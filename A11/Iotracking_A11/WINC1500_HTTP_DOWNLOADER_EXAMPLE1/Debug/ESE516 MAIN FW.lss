
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00028268  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000300  20000000  0003a268  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005990  20000300  0003a570  00030300  2**4
                  ALLOC
  3 .stack        00002000  20005c90  0003ff00  00030300  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY
  6 .debug_info   00134dfc  00000000  00000000  00030381  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000113c9  00000000  00000000  0016517d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00016e8b  00000000  00000000  00176546  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003d98  00000000  00000000  0018d3d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000039d8  00000000  00000000  00191169  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00041c1f  00000000  00000000  00194b41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005e17a  00000000  00000000  001d6760  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c3fbd  00000000  00000000  002348da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000e834  00000000  00000000  002f8898  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	90 7c 00 20 71 ad 02 00 69 ae 02 00 69 ae 02 00     .|. q...i...i...
	...
   1202c:	e5 9f 01 00 00 00 00 00 00 00 00 00 01 a1 01 00     ................
   1203c:	49 a1 01 00 69 ae 02 00 69 ae 02 00 69 ae 02 00     I...i...i...i...
   1204c:	c1 6e 02 00 ed 63 02 00 69 ae 02 00 09 2e 01 00     .n...c..i.......
   1205c:	69 ae 02 00 4d 2f 01 00 65 75 02 00 7d 75 02 00     i...M/..eu..}u..
   1206c:	95 75 02 00 ad 75 02 00 c5 75 02 00 dd 75 02 00     .u...u...u...u..
   1207c:	b9 ac 02 00 cd ac 02 00 e1 ac 02 00 d1 7c 01 00     .............|..
   1208c:	e5 7c 01 00 f9 7c 01 00 00 00 00 00 00 00 00 00     .|...|..........
   1209c:	91 2c 01 00 69 ae 02 00 cd 2d 01 00 69 ae 02 00     .,..i....-..i...
   120ac:	69 ae 02 00 00 00 00 00                             i.......

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000300 	.word	0x20000300
   120d4:	00000000 	.word	0x00000000
   120d8:	0003a268 	.word	0x0003a268

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000304 	.word	0x20000304
   12108:	0003a268 	.word	0x0003a268
   1210c:	0003a268 	.word	0x0003a268
   12110:	00000000 	.word	0x00000000

00012114 <ssd1306_hard_reset>:
 * \brief Perform a hard reset of the OLED controller
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
   12114:	b580      	push	{r7, lr}
   12116:	af00      	add	r7, sp, #0
	/*uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
	port_pin_set_output_level(SSD1306_RES_PIN, false);
	delay_cycles(delay_10us); // At lest 10us
	port_pin_set_output_level(SSD1306_RES_PIN, true);
	delay_cycles(delay_10us); // At lest 10us*/
}
   12118:	46c0      	nop			; (mov r8, r8)
   1211a:	46bd      	mov	sp, r7
   1211c:	bd80      	pop	{r7, pc}

0001211e <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
   1211e:	b580      	push	{r7, lr}
   12120:	af00      	add	r7, sp, #0

}
   12122:	46c0      	nop			; (mov r8, r8)
   12124:	46bd      	mov	sp, r7
   12126:	bd80      	pop	{r7, pc}

00012128 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
   12128:	b580      	push	{r7, lr}
   1212a:	af00      	add	r7, sp, #0


	// Initialize the interface
	ssd1306_interface_init();
   1212c:	4b25      	ldr	r3, [pc, #148]	; (121c4 <ssd1306_init+0x9c>)
   1212e:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
   12130:	4b25      	ldr	r3, [pc, #148]	; (121c8 <ssd1306_init+0xa0>)
   12132:	4798      	blx	r3

	// Set the reset pin to the default state
	//port_pin_set_output_level(SSD1306_RES_PIN, true);
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF); //0xAE
   12134:	20ae      	movs	r0, #174	; 0xae
   12136:	4b25      	ldr	r3, [pc, #148]	; (121cc <ssd1306_init+0xa4>)
   12138:	4798      	blx	r3
	
	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO); //0XD5
   1213a:	20d5      	movs	r0, #213	; 0xd5
   1213c:	4b23      	ldr	r3, [pc, #140]	; (121cc <ssd1306_init+0xa4>)
   1213e:	4798      	blx	r3
	ssd1306_write_command(0x80);
   12140:	2080      	movs	r0, #128	; 0x80
   12142:	4b22      	ldr	r3, [pc, #136]	; (121cc <ssd1306_init+0xa4>)
   12144:	4798      	blx	r3
	
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO); //0XA8
   12146:	20a8      	movs	r0, #168	; 0xa8
   12148:	4b20      	ldr	r3, [pc, #128]	; (121cc <ssd1306_init+0xa4>)
   1214a:	4798      	blx	r3
	ssd1306_write_command(0x2F); //2F
   1214c:	202f      	movs	r0, #47	; 0x2f
   1214e:	4b1f      	ldr	r3, [pc, #124]	; (121cc <ssd1306_init+0xa4>)
   12150:	4798      	blx	r3
	
	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET); //D3
   12152:	20d3      	movs	r0, #211	; 0xd3
   12154:	4b1d      	ldr	r3, [pc, #116]	; (121cc <ssd1306_init+0xa4>)
   12156:	4798      	blx	r3
	ssd1306_write_command(0x00);
   12158:	2000      	movs	r0, #0
   1215a:	4b1c      	ldr	r3, [pc, #112]	; (121cc <ssd1306_init+0xa4>)
   1215c:	4798      	blx	r3
	
	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));	
   1215e:	2040      	movs	r0, #64	; 0x40
   12160:	4b1a      	ldr	r3, [pc, #104]	; (121cc <ssd1306_init+0xa4>)
   12162:	4798      	blx	r3
	
	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING); //8D
   12164:	208d      	movs	r0, #141	; 0x8d
   12166:	4b19      	ldr	r3, [pc, #100]	; (121cc <ssd1306_init+0xa4>)
   12168:	4798      	blx	r3
	ssd1306_write_command(0x14);
   1216a:	2014      	movs	r0, #20
   1216c:	4b17      	ldr	r3, [pc, #92]	; (121cc <ssd1306_init+0xa4>)
   1216e:	4798      	blx	r3

	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY); //A6
   12170:	20a6      	movs	r0, #166	; 0xa6
   12172:	4b16      	ldr	r3, [pc, #88]	; (121cc <ssd1306_init+0xa4>)
   12174:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON); //0xA4
   12176:	20a4      	movs	r0, #164	; 0xa4
   12178:	4b14      	ldr	r3, [pc, #80]	; (121cc <ssd1306_init+0xa4>)
   1217a:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL0_SEG0| 0x1); //0xA0
   1217c:	20a1      	movs	r0, #161	; 0xa1
   1217e:	4b13      	ldr	r3, [pc, #76]	; (121cc <ssd1306_init+0xa4>)
   12180:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN); //0xC8
   12182:	20c8      	movs	r0, #200	; 0xc8
   12184:	4b11      	ldr	r3, [pc, #68]	; (121cc <ssd1306_init+0xa4>)
   12186:	4798      	blx	r3
	
	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS); //0xDA
   12188:	20da      	movs	r0, #218	; 0xda
   1218a:	4b10      	ldr	r3, [pc, #64]	; (121cc <ssd1306_init+0xa4>)
   1218c:	4798      	blx	r3
	ssd1306_write_command(0x12);
   1218e:	2012      	movs	r0, #18
   12190:	4b0e      	ldr	r3, [pc, #56]	; (121cc <ssd1306_init+0xa4>)
   12192:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0); //0x81
   12194:	2081      	movs	r0, #129	; 0x81
   12196:	4b0d      	ldr	r3, [pc, #52]	; (121cc <ssd1306_init+0xa4>)
   12198:	4798      	blx	r3
	ssd1306_write_command(0x8F);
   1219a:	208f      	movs	r0, #143	; 0x8f
   1219c:	4b0b      	ldr	r3, [pc, #44]	; (121cc <ssd1306_init+0xa4>)
   1219e:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD); //0xD9
   121a0:	20d9      	movs	r0, #217	; 0xd9
   121a2:	4b0a      	ldr	r3, [pc, #40]	; (121cc <ssd1306_init+0xa4>)
   121a4:	4798      	blx	r3
	ssd1306_write_command(0xF1);	
   121a6:	20f1      	movs	r0, #241	; 0xf1
   121a8:	4b08      	ldr	r3, [pc, #32]	; (121cc <ssd1306_init+0xa4>)
   121aa:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL); //DB
   121ac:	20db      	movs	r0, #219	; 0xdb
   121ae:	4b07      	ldr	r3, [pc, #28]	; (121cc <ssd1306_init+0xa4>)
   121b0:	4798      	blx	r3
	ssd1306_write_command(0x40);
   121b2:	2040      	movs	r0, #64	; 0x40
   121b4:	4b05      	ldr	r3, [pc, #20]	; (121cc <ssd1306_init+0xa4>)
   121b6:	4798      	blx	r3

	
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
   121b8:	20af      	movs	r0, #175	; 0xaf
   121ba:	4b04      	ldr	r3, [pc, #16]	; (121cc <ssd1306_init+0xa4>)
   121bc:	4798      	blx	r3

}
   121be:	46c0      	nop			; (mov r8, r8)
   121c0:	46bd      	mov	sp, r7
   121c2:	bd80      	pop	{r7, pc}
   121c4:	0001211f 	.word	0x0001211f
   121c8:	00012115 	.word	0x00012115
   121cc:	000121d1 	.word	0x000121d1

000121d0 <ssd1306_write_command>:
 * \param command the command to write
 */


void ssd1306_write_command(uint8_t command)
{
   121d0:	b580      	push	{r7, lr}
   121d2:	b084      	sub	sp, #16
   121d4:	af00      	add	r7, sp, #0
   121d6:	0002      	movs	r2, r0
   121d8:	1dfb      	adds	r3, r7, #7
   121da:	701a      	strb	r2, [r3, #0]
	//Send 0 command byte
	uint8_t data[2];
	data[0] = I2C_COMMAND_SSD1306;
   121dc:	230c      	movs	r3, #12
   121de:	18fb      	adds	r3, r7, r3
   121e0:	2200      	movs	r2, #0
   121e2:	701a      	strb	r2, [r3, #0]
	data[1] = command;
   121e4:	230c      	movs	r3, #12
   121e6:	18fb      	adds	r3, r7, r3
   121e8:	1dfa      	adds	r2, r7, #7
   121ea:	7812      	ldrb	r2, [r2, #0]
   121ec:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   121ee:	4b0c      	ldr	r3, [pc, #48]	; (12220 <ssd1306_write_command+0x50>)
   121f0:	223d      	movs	r2, #61	; 0x3d
   121f2:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &data[0];
   121f4:	4b0a      	ldr	r3, [pc, #40]	; (12220 <ssd1306_write_command+0x50>)
   121f6:	220c      	movs	r2, #12
   121f8:	18ba      	adds	r2, r7, r2
   121fa:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(data);
   121fc:	4b08      	ldr	r3, [pc, #32]	; (12220 <ssd1306_write_command+0x50>)
   121fe:	2202      	movs	r2, #2
   12200:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   12202:	4b07      	ldr	r3, [pc, #28]	; (12220 <ssd1306_write_command+0x50>)
   12204:	2200      	movs	r2, #0
   12206:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12208:	4b05      	ldr	r3, [pc, #20]	; (12220 <ssd1306_write_command+0x50>)
   1220a:	2200      	movs	r2, #0
   1220c:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   1220e:	4b04      	ldr	r3, [pc, #16]	; (12220 <ssd1306_write_command+0x50>)
   12210:	2164      	movs	r1, #100	; 0x64
   12212:	0018      	movs	r0, r3
   12214:	4b03      	ldr	r3, [pc, #12]	; (12224 <ssd1306_write_command+0x54>)
   12216:	4798      	blx	r3
}
   12218:	46c0      	nop			; (mov r8, r8)
   1221a:	46bd      	mov	sp, r7
   1221c:	b004      	add	sp, #16
   1221e:	bd80      	pop	{r7, pc}
   12220:	20004764 	.word	0x20004764
   12224:	000144e9 	.word	0x000144e9

00012228 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
   12228:	b580      	push	{r7, lr}
   1222a:	b084      	sub	sp, #16
   1222c:	af00      	add	r7, sp, #0
   1222e:	0002      	movs	r2, r0
   12230:	1dfb      	adds	r3, r7, #7
   12232:	701a      	strb	r2, [r3, #0]
	uint8_t msg[2];
	msg[0] = I2C_DATA_SSD1306;
   12234:	230c      	movs	r3, #12
   12236:	18fb      	adds	r3, r7, r3
   12238:	2240      	movs	r2, #64	; 0x40
   1223a:	701a      	strb	r2, [r3, #0]
	msg[1] = data;
   1223c:	230c      	movs	r3, #12
   1223e:	18fb      	adds	r3, r7, r3
   12240:	1dfa      	adds	r2, r7, #7
   12242:	7812      	ldrb	r2, [r2, #0]
   12244:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   12246:	4b0c      	ldr	r3, [pc, #48]	; (12278 <ssd1306_write_data+0x50>)
   12248:	223d      	movs	r2, #61	; 0x3d
   1224a:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &msg[0];
   1224c:	4b0a      	ldr	r3, [pc, #40]	; (12278 <ssd1306_write_data+0x50>)
   1224e:	220c      	movs	r2, #12
   12250:	18ba      	adds	r2, r7, r2
   12252:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(msg);
   12254:	4b08      	ldr	r3, [pc, #32]	; (12278 <ssd1306_write_data+0x50>)
   12256:	2202      	movs	r2, #2
   12258:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   1225a:	4b07      	ldr	r3, [pc, #28]	; (12278 <ssd1306_write_data+0x50>)
   1225c:	2200      	movs	r2, #0
   1225e:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12260:	4b05      	ldr	r3, [pc, #20]	; (12278 <ssd1306_write_data+0x50>)
   12262:	2200      	movs	r2, #0
   12264:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   12266:	4b04      	ldr	r3, [pc, #16]	; (12278 <ssd1306_write_data+0x50>)
   12268:	2164      	movs	r1, #100	; 0x64
   1226a:	0018      	movs	r0, r3
   1226c:	4b03      	ldr	r3, [pc, #12]	; (1227c <ssd1306_write_data+0x54>)
   1226e:	4798      	blx	r3
}
   12270:	46c0      	nop			; (mov r8, r8)
   12272:	46bd      	mov	sp, r7
   12274:	b004      	add	sp, #16
   12276:	bd80      	pop	{r7, pc}
   12278:	20004764 	.word	0x20004764
   1227c:	000144e9 	.word	0x000144e9

00012280 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
   12280:	b580      	push	{r7, lr}
   12282:	b082      	sub	sp, #8
   12284:	af00      	add	r7, sp, #0
   12286:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
   12288:	4b03      	ldr	r3, [pc, #12]	; (12298 <gfx_mono_set_framebuffer+0x18>)
   1228a:	687a      	ldr	r2, [r7, #4]
   1228c:	601a      	str	r2, [r3, #0]
}
   1228e:	46c0      	nop			; (mov r8, r8)
   12290:	46bd      	mov	sp, r7
   12292:	b002      	add	sp, #8
   12294:	bd80      	pop	{r7, pc}
   12296:	46c0      	nop			; (mov r8, r8)
   12298:	2000031c 	.word	0x2000031c

0001229c <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
   1229c:	b590      	push	{r4, r7, lr}
   1229e:	b083      	sub	sp, #12
   122a0:	af00      	add	r7, sp, #0
   122a2:	0004      	movs	r4, r0
   122a4:	0008      	movs	r0, r1
   122a6:	0011      	movs	r1, r2
   122a8:	1dfb      	adds	r3, r7, #7
   122aa:	1c22      	adds	r2, r4, #0
   122ac:	701a      	strb	r2, [r3, #0]
   122ae:	1dbb      	adds	r3, r7, #6
   122b0:	1c02      	adds	r2, r0, #0
   122b2:	701a      	strb	r2, [r3, #0]
   122b4:	1d7b      	adds	r3, r7, #5
   122b6:	1c0a      	adds	r2, r1, #0
   122b8:	701a      	strb	r2, [r3, #0]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
   122ba:	4b08      	ldr	r3, [pc, #32]	; (122dc <gfx_mono_framebuffer_put_byte+0x40>)
   122bc:	681a      	ldr	r2, [r3, #0]
   122be:	1dfb      	adds	r3, r7, #7
   122c0:	781b      	ldrb	r3, [r3, #0]
   122c2:	019b      	lsls	r3, r3, #6
   122c4:	0019      	movs	r1, r3
   122c6:	1dbb      	adds	r3, r7, #6
   122c8:	781b      	ldrb	r3, [r3, #0]
   122ca:	18cb      	adds	r3, r1, r3
   122cc:	18d3      	adds	r3, r2, r3
   122ce:	1d7a      	adds	r2, r7, #5
   122d0:	7812      	ldrb	r2, [r2, #0]
   122d2:	701a      	strb	r2, [r3, #0]
}
   122d4:	46c0      	nop			; (mov r8, r8)
   122d6:	46bd      	mov	sp, r7
   122d8:	b003      	add	sp, #12
   122da:	bd90      	pop	{r4, r7, pc}
   122dc:	2000031c 	.word	0x2000031c

000122e0 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   122e0:	b580      	push	{r7, lr}
   122e2:	b082      	sub	sp, #8
   122e4:	af00      	add	r7, sp, #0
   122e6:	0002      	movs	r2, r0
   122e8:	1dfb      	adds	r3, r7, #7
   122ea:	701a      	strb	r2, [r3, #0]
   122ec:	1dbb      	adds	r3, r7, #6
   122ee:	1c0a      	adds	r2, r1, #0
   122f0:	701a      	strb	r2, [r3, #0]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
   122f2:	4b07      	ldr	r3, [pc, #28]	; (12310 <gfx_mono_framebuffer_get_byte+0x30>)
   122f4:	681a      	ldr	r2, [r3, #0]
   122f6:	1dfb      	adds	r3, r7, #7
   122f8:	781b      	ldrb	r3, [r3, #0]
   122fa:	019b      	lsls	r3, r3, #6
   122fc:	0019      	movs	r1, r3
   122fe:	1dbb      	adds	r3, r7, #6
   12300:	781b      	ldrb	r3, [r3, #0]
   12302:	18cb      	adds	r3, r1, r3
   12304:	18d3      	adds	r3, r2, r3
   12306:	781b      	ldrb	r3, [r3, #0]
}
   12308:	0018      	movs	r0, r3
   1230a:	46bd      	mov	sp, r7
   1230c:	b002      	add	sp, #8
   1230e:	bd80      	pop	{r7, pc}
   12310:	2000031c 	.word	0x2000031c

00012314 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   12314:	b5b0      	push	{r4, r5, r7, lr}
   12316:	b084      	sub	sp, #16
   12318:	af00      	add	r7, sp, #0
   1231a:	0005      	movs	r5, r0
   1231c:	000c      	movs	r4, r1
   1231e:	0010      	movs	r0, r2
   12320:	0019      	movs	r1, r3
   12322:	1dfb      	adds	r3, r7, #7
   12324:	1c2a      	adds	r2, r5, #0
   12326:	701a      	strb	r2, [r3, #0]
   12328:	1dbb      	adds	r3, r7, #6
   1232a:	1c22      	adds	r2, r4, #0
   1232c:	701a      	strb	r2, [r3, #0]
   1232e:	1d7b      	adds	r3, r7, #5
   12330:	1c02      	adds	r2, r0, #0
   12332:	701a      	strb	r2, [r3, #0]
   12334:	1d3b      	adds	r3, r7, #4
   12336:	1c0a      	adds	r2, r1, #0
   12338:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
   1233a:	1dfb      	adds	r3, r7, #7
   1233c:	781a      	ldrb	r2, [r3, #0]
   1233e:	1d7b      	adds	r3, r7, #5
   12340:	781b      	ldrb	r3, [r3, #0]
   12342:	18d3      	adds	r3, r2, r3
   12344:	2b40      	cmp	r3, #64	; 0x40
   12346:	dd05      	ble.n	12354 <gfx_mono_generic_draw_horizontal_line+0x40>
		length = GFX_MONO_LCD_WIDTH - x;
   12348:	1d7b      	adds	r3, r7, #5
   1234a:	1dfa      	adds	r2, r7, #7
   1234c:	7812      	ldrb	r2, [r2, #0]
   1234e:	2140      	movs	r1, #64	; 0x40
   12350:	1a8a      	subs	r2, r1, r2
   12352:	701a      	strb	r2, [r3, #0]
	}

	page = y / 8;
   12354:	230f      	movs	r3, #15
   12356:	18fb      	adds	r3, r7, r3
   12358:	1dba      	adds	r2, r7, #6
   1235a:	7812      	ldrb	r2, [r2, #0]
   1235c:	08d2      	lsrs	r2, r2, #3
   1235e:	701a      	strb	r2, [r3, #0]
	pixelmask = (1 << (y - (page * 8)));
   12360:	1dbb      	adds	r3, r7, #6
   12362:	781a      	ldrb	r2, [r3, #0]
   12364:	230f      	movs	r3, #15
   12366:	18fb      	adds	r3, r7, r3
   12368:	781b      	ldrb	r3, [r3, #0]
   1236a:	00db      	lsls	r3, r3, #3
   1236c:	1ad3      	subs	r3, r2, r3
   1236e:	2201      	movs	r2, #1
   12370:	409a      	lsls	r2, r3
   12372:	230e      	movs	r3, #14
   12374:	18fb      	adds	r3, r7, r3
   12376:	701a      	strb	r2, [r3, #0]

	if (length == 0) {
   12378:	1d7b      	adds	r3, r7, #5
   1237a:	781b      	ldrb	r3, [r3, #0]
   1237c:	2b00      	cmp	r3, #0
   1237e:	d100      	bne.n	12382 <gfx_mono_generic_draw_horizontal_line+0x6e>
   12380:	e0a4      	b.n	124cc <gfx_mono_generic_draw_horizontal_line+0x1b8>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
   12382:	1d3b      	adds	r3, r7, #4
   12384:	781b      	ldrb	r3, [r3, #0]
   12386:	2b01      	cmp	r3, #1
   12388:	d02f      	beq.n	123ea <gfx_mono_generic_draw_horizontal_line+0xd6>
   1238a:	2b02      	cmp	r3, #2
   1238c:	d100      	bne.n	12390 <gfx_mono_generic_draw_horizontal_line+0x7c>
   1238e:	e095      	b.n	124bc <gfx_mono_generic_draw_horizontal_line+0x1a8>
   12390:	2b00      	cmp	r3, #0
   12392:	d061      	beq.n	12458 <gfx_mono_generic_draw_horizontal_line+0x144>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
   12394:	e09b      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12396:	1dfa      	adds	r2, r7, #7
   12398:	1d7b      	adds	r3, r7, #5
   1239a:	7812      	ldrb	r2, [r2, #0]
   1239c:	781b      	ldrb	r3, [r3, #0]
   1239e:	18d3      	adds	r3, r2, r3
   123a0:	b2da      	uxtb	r2, r3
   123a2:	230d      	movs	r3, #13
   123a4:	18fc      	adds	r4, r7, r3
   123a6:	230f      	movs	r3, #15
   123a8:	18fb      	adds	r3, r7, r3
   123aa:	781b      	ldrb	r3, [r3, #0]
   123ac:	0011      	movs	r1, r2
   123ae:	0018      	movs	r0, r3
   123b0:	4b48      	ldr	r3, [pc, #288]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   123b2:	4798      	blx	r3
   123b4:	0003      	movs	r3, r0
   123b6:	7023      	strb	r3, [r4, #0]
			temp |= pixelmask;
   123b8:	230d      	movs	r3, #13
   123ba:	18fb      	adds	r3, r7, r3
   123bc:	220d      	movs	r2, #13
   123be:	18b9      	adds	r1, r7, r2
   123c0:	220e      	movs	r2, #14
   123c2:	18ba      	adds	r2, r7, r2
   123c4:	7809      	ldrb	r1, [r1, #0]
   123c6:	7812      	ldrb	r2, [r2, #0]
   123c8:	430a      	orrs	r2, r1
   123ca:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   123cc:	1dfa      	adds	r2, r7, #7
   123ce:	1d7b      	adds	r3, r7, #5
   123d0:	7812      	ldrb	r2, [r2, #0]
   123d2:	781b      	ldrb	r3, [r3, #0]
   123d4:	18d3      	adds	r3, r2, r3
   123d6:	b2d9      	uxtb	r1, r3
   123d8:	230d      	movs	r3, #13
   123da:	18fb      	adds	r3, r7, r3
   123dc:	781a      	ldrb	r2, [r3, #0]
   123de:	230f      	movs	r3, #15
   123e0:	18fb      	adds	r3, r7, r3
   123e2:	7818      	ldrb	r0, [r3, #0]
   123e4:	2300      	movs	r3, #0
   123e6:	4c3c      	ldr	r4, [pc, #240]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   123e8:	47a0      	blx	r4
		while (length-- > 0) {
   123ea:	1d7b      	adds	r3, r7, #5
   123ec:	781b      	ldrb	r3, [r3, #0]
   123ee:	1d7a      	adds	r2, r7, #5
   123f0:	1e59      	subs	r1, r3, #1
   123f2:	7011      	strb	r1, [r2, #0]
   123f4:	2b00      	cmp	r3, #0
   123f6:	d1ce      	bne.n	12396 <gfx_mono_generic_draw_horizontal_line+0x82>
		break;
   123f8:	e069      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   123fa:	1dfa      	adds	r2, r7, #7
   123fc:	1d7b      	adds	r3, r7, #5
   123fe:	7812      	ldrb	r2, [r2, #0]
   12400:	781b      	ldrb	r3, [r3, #0]
   12402:	18d3      	adds	r3, r2, r3
   12404:	b2da      	uxtb	r2, r3
   12406:	230d      	movs	r3, #13
   12408:	18fc      	adds	r4, r7, r3
   1240a:	230f      	movs	r3, #15
   1240c:	18fb      	adds	r3, r7, r3
   1240e:	781b      	ldrb	r3, [r3, #0]
   12410:	0011      	movs	r1, r2
   12412:	0018      	movs	r0, r3
   12414:	4b2f      	ldr	r3, [pc, #188]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12416:	4798      	blx	r3
   12418:	0003      	movs	r3, r0
   1241a:	7023      	strb	r3, [r4, #0]
			temp &= ~pixelmask;
   1241c:	230e      	movs	r3, #14
   1241e:	18fb      	adds	r3, r7, r3
   12420:	781b      	ldrb	r3, [r3, #0]
   12422:	b25b      	sxtb	r3, r3
   12424:	43db      	mvns	r3, r3
   12426:	b25b      	sxtb	r3, r3
   12428:	220d      	movs	r2, #13
   1242a:	18ba      	adds	r2, r7, r2
   1242c:	7812      	ldrb	r2, [r2, #0]
   1242e:	b252      	sxtb	r2, r2
   12430:	4013      	ands	r3, r2
   12432:	b25a      	sxtb	r2, r3
   12434:	230d      	movs	r3, #13
   12436:	18fb      	adds	r3, r7, r3
   12438:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1243a:	1dfa      	adds	r2, r7, #7
   1243c:	1d7b      	adds	r3, r7, #5
   1243e:	7812      	ldrb	r2, [r2, #0]
   12440:	781b      	ldrb	r3, [r3, #0]
   12442:	18d3      	adds	r3, r2, r3
   12444:	b2d9      	uxtb	r1, r3
   12446:	230d      	movs	r3, #13
   12448:	18fb      	adds	r3, r7, r3
   1244a:	781a      	ldrb	r2, [r3, #0]
   1244c:	230f      	movs	r3, #15
   1244e:	18fb      	adds	r3, r7, r3
   12450:	7818      	ldrb	r0, [r3, #0]
   12452:	2300      	movs	r3, #0
   12454:	4c20      	ldr	r4, [pc, #128]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   12456:	47a0      	blx	r4
		while (length-- > 0) {
   12458:	1d7b      	adds	r3, r7, #5
   1245a:	781b      	ldrb	r3, [r3, #0]
   1245c:	1d7a      	adds	r2, r7, #5
   1245e:	1e59      	subs	r1, r3, #1
   12460:	7011      	strb	r1, [r2, #0]
   12462:	2b00      	cmp	r3, #0
   12464:	d1c9      	bne.n	123fa <gfx_mono_generic_draw_horizontal_line+0xe6>
		break;
   12466:	e032      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12468:	1dfa      	adds	r2, r7, #7
   1246a:	1d7b      	adds	r3, r7, #5
   1246c:	7812      	ldrb	r2, [r2, #0]
   1246e:	781b      	ldrb	r3, [r3, #0]
   12470:	18d3      	adds	r3, r2, r3
   12472:	b2da      	uxtb	r2, r3
   12474:	230d      	movs	r3, #13
   12476:	18fc      	adds	r4, r7, r3
   12478:	230f      	movs	r3, #15
   1247a:	18fb      	adds	r3, r7, r3
   1247c:	781b      	ldrb	r3, [r3, #0]
   1247e:	0011      	movs	r1, r2
   12480:	0018      	movs	r0, r3
   12482:	4b14      	ldr	r3, [pc, #80]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12484:	4798      	blx	r3
   12486:	0003      	movs	r3, r0
   12488:	7023      	strb	r3, [r4, #0]
			temp ^= pixelmask;
   1248a:	230d      	movs	r3, #13
   1248c:	18fb      	adds	r3, r7, r3
   1248e:	220d      	movs	r2, #13
   12490:	18b9      	adds	r1, r7, r2
   12492:	220e      	movs	r2, #14
   12494:	18ba      	adds	r2, r7, r2
   12496:	7809      	ldrb	r1, [r1, #0]
   12498:	7812      	ldrb	r2, [r2, #0]
   1249a:	404a      	eors	r2, r1
   1249c:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1249e:	1dfa      	adds	r2, r7, #7
   124a0:	1d7b      	adds	r3, r7, #5
   124a2:	7812      	ldrb	r2, [r2, #0]
   124a4:	781b      	ldrb	r3, [r3, #0]
   124a6:	18d3      	adds	r3, r2, r3
   124a8:	b2d9      	uxtb	r1, r3
   124aa:	230d      	movs	r3, #13
   124ac:	18fb      	adds	r3, r7, r3
   124ae:	781a      	ldrb	r2, [r3, #0]
   124b0:	230f      	movs	r3, #15
   124b2:	18fb      	adds	r3, r7, r3
   124b4:	7818      	ldrb	r0, [r3, #0]
   124b6:	2300      	movs	r3, #0
   124b8:	4c07      	ldr	r4, [pc, #28]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   124ba:	47a0      	blx	r4
		while (length-- > 0) {
   124bc:	1d7b      	adds	r3, r7, #5
   124be:	781b      	ldrb	r3, [r3, #0]
   124c0:	1d7a      	adds	r2, r7, #5
   124c2:	1e59      	subs	r1, r3, #1
   124c4:	7011      	strb	r1, [r2, #0]
   124c6:	2b00      	cmp	r3, #0
   124c8:	d1ce      	bne.n	12468 <gfx_mono_generic_draw_horizontal_line+0x154>
		break;
   124ca:	e000      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
		return;
   124cc:	46c0      	nop			; (mov r8, r8)
	}
}
   124ce:	46bd      	mov	sp, r7
   124d0:	b004      	add	sp, #16
   124d2:	bdb0      	pop	{r4, r5, r7, pc}
   124d4:	00012a8d 	.word	0x00012a8d
   124d8:	000129ed 	.word	0x000129ed

000124dc <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
   124dc:	b5b0      	push	{r4, r5, r7, lr}
   124de:	b082      	sub	sp, #8
   124e0:	af00      	add	r7, sp, #0
   124e2:	0005      	movs	r5, r0
   124e4:	000c      	movs	r4, r1
   124e6:	0010      	movs	r0, r2
   124e8:	0019      	movs	r1, r3
   124ea:	1dfb      	adds	r3, r7, #7
   124ec:	1c2a      	adds	r2, r5, #0
   124ee:	701a      	strb	r2, [r3, #0]
   124f0:	1dbb      	adds	r3, r7, #6
   124f2:	1c22      	adds	r2, r4, #0
   124f4:	701a      	strb	r2, [r3, #0]
   124f6:	1d7b      	adds	r3, r7, #5
   124f8:	1c02      	adds	r2, r0, #0
   124fa:	701a      	strb	r2, [r3, #0]
   124fc:	1d3b      	adds	r3, r7, #4
   124fe:	1c0a      	adds	r2, r1, #0
   12500:	701a      	strb	r2, [r3, #0]
	if (height == 0) {
   12502:	1d3b      	adds	r3, r7, #4
   12504:	781b      	ldrb	r3, [r3, #0]
   12506:	2b00      	cmp	r3, #0
   12508:	d018      	beq.n	1253c <gfx_mono_generic_draw_filled_rect+0x60>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
   1250a:	e00f      	b.n	1252c <gfx_mono_generic_draw_filled_rect+0x50>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
   1250c:	1dba      	adds	r2, r7, #6
   1250e:	1d3b      	adds	r3, r7, #4
   12510:	7812      	ldrb	r2, [r2, #0]
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	18d3      	adds	r3, r2, r3
   12516:	b2d9      	uxtb	r1, r3
   12518:	2318      	movs	r3, #24
   1251a:	18fb      	adds	r3, r7, r3
   1251c:	781c      	ldrb	r4, [r3, #0]
   1251e:	1d7b      	adds	r3, r7, #5
   12520:	781a      	ldrb	r2, [r3, #0]
   12522:	1dfb      	adds	r3, r7, #7
   12524:	7818      	ldrb	r0, [r3, #0]
   12526:	0023      	movs	r3, r4
   12528:	4c06      	ldr	r4, [pc, #24]	; (12544 <gfx_mono_generic_draw_filled_rect+0x68>)
   1252a:	47a0      	blx	r4
	while (height-- > 0) {
   1252c:	1d3b      	adds	r3, r7, #4
   1252e:	781b      	ldrb	r3, [r3, #0]
   12530:	1d3a      	adds	r2, r7, #4
   12532:	1e59      	subs	r1, r3, #1
   12534:	7011      	strb	r1, [r2, #0]
   12536:	2b00      	cmp	r3, #0
   12538:	d1e8      	bne.n	1250c <gfx_mono_generic_draw_filled_rect+0x30>
   1253a:	e000      	b.n	1253e <gfx_mono_generic_draw_filled_rect+0x62>
		return;
   1253c:	46c0      	nop			; (mov r8, r8)
	}
}
   1253e:	46bd      	mov	sp, r7
   12540:	b002      	add	sp, #8
   12542:	bdb0      	pop	{r4, r5, r7, pc}
   12544:	00012315 	.word	0x00012315

00012548 <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
   12548:	b590      	push	{r4, r7, lr}
   1254a:	b087      	sub	sp, #28
   1254c:	af00      	add	r7, sp, #0
   1254e:	0004      	movs	r4, r0
   12550:	0008      	movs	r0, r1
   12552:	0011      	movs	r1, r2
   12554:	603b      	str	r3, [r7, #0]
   12556:	1dfb      	adds	r3, r7, #7
   12558:	1c22      	adds	r2, r4, #0
   1255a:	701a      	strb	r2, [r3, #0]
   1255c:	1dbb      	adds	r3, r7, #6
   1255e:	1c02      	adds	r2, r0, #0
   12560:	701a      	strb	r2, [r3, #0]
   12562:	1d7b      	adds	r3, r7, #5
   12564:	1c0a      	adds	r2, r1, #0
   12566:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
   12568:	2310      	movs	r3, #16
   1256a:	18fb      	adds	r3, r7, r3
   1256c:	1dba      	adds	r2, r7, #6
   1256e:	7812      	ldrb	r2, [r2, #0]
   12570:	701a      	strb	r2, [r3, #0]
	gfx_coord_t inc_y = y;
   12572:	230f      	movs	r3, #15
   12574:	18fb      	adds	r3, r7, r3
   12576:	1d7a      	adds	r2, r7, #5
   12578:	7812      	ldrb	r2, [r2, #0]
   1257a:	701a      	strb	r2, [r3, #0]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
   1257c:	683b      	ldr	r3, [r7, #0]
   1257e:	7a1a      	ldrb	r2, [r3, #8]
   12580:	2313      	movs	r3, #19
   12582:	18fb      	adds	r3, r7, r3
   12584:	08d2      	lsrs	r2, r2, #3
   12586:	701a      	strb	r2, [r3, #0]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
   12588:	683b      	ldr	r3, [r7, #0]
   1258a:	7a1b      	ldrb	r3, [r3, #8]
   1258c:	2207      	movs	r2, #7
   1258e:	4013      	ands	r3, r2
   12590:	b2db      	uxtb	r3, r3
   12592:	2b00      	cmp	r3, #0
   12594:	d006      	beq.n	125a4 <gfx_mono_draw_char_progmem+0x5c>
		char_row_size++;
   12596:	2313      	movs	r3, #19
   12598:	18fb      	adds	r3, r7, r3
   1259a:	781a      	ldrb	r2, [r3, #0]
   1259c:	2313      	movs	r3, #19
   1259e:	18fb      	adds	r3, r7, r3
   125a0:	3201      	adds	r2, #1
   125a2:	701a      	strb	r2, [r3, #0]
	}

	glyph_data_offset = char_row_size * font->height *
   125a4:	2313      	movs	r3, #19
   125a6:	18fb      	adds	r3, r7, r3
   125a8:	781b      	ldrb	r3, [r3, #0]
   125aa:	b29b      	uxth	r3, r3
   125ac:	683a      	ldr	r2, [r7, #0]
   125ae:	7a52      	ldrb	r2, [r2, #9]
   125b0:	b292      	uxth	r2, r2
   125b2:	4353      	muls	r3, r2
   125b4:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
   125b6:	1dfb      	adds	r3, r7, #7
   125b8:	781b      	ldrb	r3, [r3, #0]
   125ba:	6839      	ldr	r1, [r7, #0]
   125bc:	7a89      	ldrb	r1, [r1, #10]
   125be:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
   125c0:	b299      	uxth	r1, r3
   125c2:	230c      	movs	r3, #12
   125c4:	18fb      	adds	r3, r7, r3
   125c6:	434a      	muls	r2, r1
   125c8:	801a      	strh	r2, [r3, #0]
	glyph_data = font->data.progmem + glyph_data_offset;
   125ca:	683b      	ldr	r3, [r7, #0]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	230c      	movs	r3, #12
   125d0:	18fb      	adds	r3, r7, r3
   125d2:	881b      	ldrh	r3, [r3, #0]
   125d4:	18d3      	adds	r3, r2, r3
   125d6:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
   125d8:	2312      	movs	r3, #18
   125da:	18fb      	adds	r3, r7, r3
   125dc:	683a      	ldr	r2, [r7, #0]
   125de:	7a52      	ldrb	r2, [r2, #9]
   125e0:	701a      	strb	r2, [r3, #0]

	do {
		uint8_t glyph_byte = 0;
   125e2:	230e      	movs	r3, #14
   125e4:	18fb      	adds	r3, r7, r3
   125e6:	2200      	movs	r2, #0
   125e8:	701a      	strb	r2, [r3, #0]
		uint8_t pixelsToDraw = font->width;
   125ea:	230b      	movs	r3, #11
   125ec:	18fb      	adds	r3, r7, r3
   125ee:	683a      	ldr	r2, [r7, #0]
   125f0:	7a12      	ldrb	r2, [r2, #8]
   125f2:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < pixelsToDraw; i++) {
   125f4:	2311      	movs	r3, #17
   125f6:	18fb      	adds	r3, r7, r3
   125f8:	2200      	movs	r2, #0
   125fa:	701a      	strb	r2, [r3, #0]
   125fc:	e034      	b.n	12668 <gfx_mono_draw_char_progmem+0x120>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
   125fe:	2311      	movs	r3, #17
   12600:	18fb      	adds	r3, r7, r3
   12602:	781b      	ldrb	r3, [r3, #0]
   12604:	2207      	movs	r2, #7
   12606:	4013      	ands	r3, r2
   12608:	b2db      	uxtb	r3, r3
   1260a:	2b00      	cmp	r3, #0
   1260c:	d107      	bne.n	1261e <gfx_mono_draw_char_progmem+0xd6>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
   1260e:	230e      	movs	r3, #14
   12610:	18fb      	adds	r3, r7, r3
   12612:	697a      	ldr	r2, [r7, #20]
   12614:	7812      	ldrb	r2, [r2, #0]
   12616:	701a      	strb	r2, [r3, #0]
				glyph_data++;
   12618:	697b      	ldr	r3, [r7, #20]
   1261a:	3301      	adds	r3, #1
   1261c:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
   1261e:	230e      	movs	r3, #14
   12620:	18fb      	adds	r3, r7, r3
   12622:	781b      	ldrb	r3, [r3, #0]
   12624:	b25b      	sxtb	r3, r3
   12626:	2b00      	cmp	r3, #0
   12628:	da09      	bge.n	1263e <gfx_mono_draw_char_progmem+0xf6>
				gfx_mono_draw_pixel(inc_x, inc_y,
   1262a:	230f      	movs	r3, #15
   1262c:	18fb      	adds	r3, r7, r3
   1262e:	7819      	ldrb	r1, [r3, #0]
   12630:	2310      	movs	r3, #16
   12632:	18fb      	adds	r3, r7, r3
   12634:	781b      	ldrb	r3, [r3, #0]
   12636:	2201      	movs	r2, #1
   12638:	0018      	movs	r0, r3
   1263a:	4b1d      	ldr	r3, [pc, #116]	; (126b0 <gfx_mono_draw_char_progmem+0x168>)
   1263c:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
   1263e:	2310      	movs	r3, #16
   12640:	18fb      	adds	r3, r7, r3
   12642:	2210      	movs	r2, #16
   12644:	18ba      	adds	r2, r7, r2
   12646:	7812      	ldrb	r2, [r2, #0]
   12648:	3201      	adds	r2, #1
   1264a:	701a      	strb	r2, [r3, #0]
			glyph_byte <<= 1;
   1264c:	230e      	movs	r3, #14
   1264e:	18fa      	adds	r2, r7, r3
   12650:	230e      	movs	r3, #14
   12652:	18fb      	adds	r3, r7, r3
   12654:	781b      	ldrb	r3, [r3, #0]
   12656:	18db      	adds	r3, r3, r3
   12658:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < pixelsToDraw; i++) {
   1265a:	2311      	movs	r3, #17
   1265c:	18fb      	adds	r3, r7, r3
   1265e:	781a      	ldrb	r2, [r3, #0]
   12660:	2311      	movs	r3, #17
   12662:	18fb      	adds	r3, r7, r3
   12664:	3201      	adds	r2, #1
   12666:	701a      	strb	r2, [r3, #0]
   12668:	2311      	movs	r3, #17
   1266a:	18fa      	adds	r2, r7, r3
   1266c:	230b      	movs	r3, #11
   1266e:	18fb      	adds	r3, r7, r3
   12670:	7812      	ldrb	r2, [r2, #0]
   12672:	781b      	ldrb	r3, [r3, #0]
   12674:	429a      	cmp	r2, r3
   12676:	d3c2      	bcc.n	125fe <gfx_mono_draw_char_progmem+0xb6>
		}

		inc_y += 1;
   12678:	230f      	movs	r3, #15
   1267a:	18fb      	adds	r3, r7, r3
   1267c:	220f      	movs	r2, #15
   1267e:	18ba      	adds	r2, r7, r2
   12680:	7812      	ldrb	r2, [r2, #0]
   12682:	3201      	adds	r2, #1
   12684:	701a      	strb	r2, [r3, #0]
		inc_x = x;
   12686:	2310      	movs	r3, #16
   12688:	18fb      	adds	r3, r7, r3
   1268a:	1dba      	adds	r2, r7, #6
   1268c:	7812      	ldrb	r2, [r2, #0]
   1268e:	701a      	strb	r2, [r3, #0]
		rows_left--;
   12690:	2312      	movs	r3, #18
   12692:	18fb      	adds	r3, r7, r3
   12694:	781a      	ldrb	r2, [r3, #0]
   12696:	2312      	movs	r3, #18
   12698:	18fb      	adds	r3, r7, r3
   1269a:	3a01      	subs	r2, #1
   1269c:	701a      	strb	r2, [r3, #0]
	} while (rows_left > 0);
   1269e:	2312      	movs	r3, #18
   126a0:	18fb      	adds	r3, r7, r3
   126a2:	781b      	ldrb	r3, [r3, #0]
   126a4:	2b00      	cmp	r3, #0
   126a6:	d19c      	bne.n	125e2 <gfx_mono_draw_char_progmem+0x9a>
}
   126a8:	46c0      	nop			; (mov r8, r8)
   126aa:	46bd      	mov	sp, r7
   126ac:	b007      	add	sp, #28
   126ae:	bd90      	pop	{r4, r7, pc}
   126b0:	000128f9 	.word	0x000128f9

000126b4 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
   126b4:	b590      	push	{r4, r7, lr}
   126b6:	b085      	sub	sp, #20
   126b8:	af02      	add	r7, sp, #8
   126ba:	0004      	movs	r4, r0
   126bc:	0008      	movs	r0, r1
   126be:	0011      	movs	r1, r2
   126c0:	603b      	str	r3, [r7, #0]
   126c2:	1dfb      	adds	r3, r7, #7
   126c4:	1c22      	adds	r2, r4, #0
   126c6:	701a      	strb	r2, [r3, #0]
   126c8:	1dbb      	adds	r3, r7, #6
   126ca:	1c02      	adds	r2, r0, #0
   126cc:	701a      	strb	r2, [r3, #0]
   126ce:	1d7b      	adds	r3, r7, #5
   126d0:	1c0a      	adds	r2, r1, #0
   126d2:	701a      	strb	r2, [r3, #0]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
   126d4:	683b      	ldr	r3, [r7, #0]
   126d6:	7a1a      	ldrb	r2, [r3, #8]
   126d8:	683b      	ldr	r3, [r7, #0]
   126da:	7a5c      	ldrb	r4, [r3, #9]
   126dc:	1d7b      	adds	r3, r7, #5
   126de:	7819      	ldrb	r1, [r3, #0]
   126e0:	1dbb      	adds	r3, r7, #6
   126e2:	7818      	ldrb	r0, [r3, #0]
   126e4:	2300      	movs	r3, #0
   126e6:	9300      	str	r3, [sp, #0]
   126e8:	0023      	movs	r3, r4
   126ea:	4c0b      	ldr	r4, [pc, #44]	; (12718 <gfx_mono_draw_char+0x64>)
   126ec:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
   126ee:	683b      	ldr	r3, [r7, #0]
   126f0:	781b      	ldrb	r3, [r3, #0]
   126f2:	2b00      	cmp	r3, #0
   126f4:	d000      	beq.n	126f8 <gfx_mono_draw_char+0x44>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
   126f6:	e00a      	b.n	1270e <gfx_mono_draw_char+0x5a>
		gfx_mono_draw_char_progmem(c, x, y, font);
   126f8:	683c      	ldr	r4, [r7, #0]
   126fa:	1d7b      	adds	r3, r7, #5
   126fc:	781a      	ldrb	r2, [r3, #0]
   126fe:	1dbb      	adds	r3, r7, #6
   12700:	7819      	ldrb	r1, [r3, #0]
   12702:	1dfb      	adds	r3, r7, #7
   12704:	7818      	ldrb	r0, [r3, #0]
   12706:	0023      	movs	r3, r4
   12708:	4c04      	ldr	r4, [pc, #16]	; (1271c <gfx_mono_draw_char+0x68>)
   1270a:	47a0      	blx	r4
		break;
   1270c:	46c0      	nop			; (mov r8, r8)
	}
}
   1270e:	46c0      	nop			; (mov r8, r8)
   12710:	46bd      	mov	sp, r7
   12712:	b003      	add	sp, #12
   12714:	bd90      	pop	{r4, r7, pc}
   12716:	46c0      	nop			; (mov r8, r8)
   12718:	000124dd 	.word	0x000124dd
   1271c:	00012549 	.word	0x00012549

00012720 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
   12720:	b590      	push	{r4, r7, lr}
   12722:	b087      	sub	sp, #28
   12724:	af00      	add	r7, sp, #0
   12726:	60f8      	str	r0, [r7, #12]
   12728:	0008      	movs	r0, r1
   1272a:	0011      	movs	r1, r2
   1272c:	607b      	str	r3, [r7, #4]
   1272e:	230b      	movs	r3, #11
   12730:	18fb      	adds	r3, r7, r3
   12732:	1c02      	adds	r2, r0, #0
   12734:	701a      	strb	r2, [r3, #0]
   12736:	230a      	movs	r3, #10
   12738:	18fb      	adds	r3, r7, r3
   1273a:	1c0a      	adds	r2, r1, #0
   1273c:	701a      	strb	r2, [r3, #0]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
   1273e:	2317      	movs	r3, #23
   12740:	18fb      	adds	r3, r7, r3
   12742:	220b      	movs	r2, #11
   12744:	18ba      	adds	r2, r7, r2
   12746:	7812      	ldrb	r2, [r2, #0]
   12748:	701a      	strb	r2, [r3, #0]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
   1274a:	68fb      	ldr	r3, [r7, #12]
   1274c:	781b      	ldrb	r3, [r3, #0]
   1274e:	2b0a      	cmp	r3, #10
   12750:	d111      	bne.n	12776 <gfx_mono_draw_string+0x56>
			x = start_of_string_position_x;
   12752:	230b      	movs	r3, #11
   12754:	18fb      	adds	r3, r7, r3
   12756:	2217      	movs	r2, #23
   12758:	18ba      	adds	r2, r7, r2
   1275a:	7812      	ldrb	r2, [r2, #0]
   1275c:	701a      	strb	r2, [r3, #0]
			y += font->height + 1;
   1275e:	687b      	ldr	r3, [r7, #4]
   12760:	7a5a      	ldrb	r2, [r3, #9]
   12762:	230a      	movs	r3, #10
   12764:	18fb      	adds	r3, r7, r3
   12766:	781b      	ldrb	r3, [r3, #0]
   12768:	18d3      	adds	r3, r2, r3
   1276a:	b2da      	uxtb	r2, r3
   1276c:	230a      	movs	r3, #10
   1276e:	18fb      	adds	r3, r7, r3
   12770:	3201      	adds	r2, #1
   12772:	701a      	strb	r2, [r3, #0]
   12774:	e018      	b.n	127a8 <gfx_mono_draw_string+0x88>
		} else if (*str == '\r') {
   12776:	68fb      	ldr	r3, [r7, #12]
   12778:	781b      	ldrb	r3, [r3, #0]
   1277a:	2b0d      	cmp	r3, #13
   1277c:	d014      	beq.n	127a8 <gfx_mono_draw_string+0x88>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
   1277e:	68fb      	ldr	r3, [r7, #12]
   12780:	7818      	ldrb	r0, [r3, #0]
   12782:	687c      	ldr	r4, [r7, #4]
   12784:	230a      	movs	r3, #10
   12786:	18fb      	adds	r3, r7, r3
   12788:	781a      	ldrb	r2, [r3, #0]
   1278a:	230b      	movs	r3, #11
   1278c:	18fb      	adds	r3, r7, r3
   1278e:	7819      	ldrb	r1, [r3, #0]
   12790:	0023      	movs	r3, r4
   12792:	4c0b      	ldr	r4, [pc, #44]	; (127c0 <gfx_mono_draw_string+0xa0>)
   12794:	47a0      	blx	r4
			x += font->width;
   12796:	687b      	ldr	r3, [r7, #4]
   12798:	7a19      	ldrb	r1, [r3, #8]
   1279a:	230b      	movs	r3, #11
   1279c:	18fb      	adds	r3, r7, r3
   1279e:	220b      	movs	r2, #11
   127a0:	18ba      	adds	r2, r7, r2
   127a2:	7812      	ldrb	r2, [r2, #0]
   127a4:	188a      	adds	r2, r1, r2
   127a6:	701a      	strb	r2, [r3, #0]
		}
	} while (*(++str));
   127a8:	68fb      	ldr	r3, [r7, #12]
   127aa:	3301      	adds	r3, #1
   127ac:	60fb      	str	r3, [r7, #12]
   127ae:	68fb      	ldr	r3, [r7, #12]
   127b0:	781b      	ldrb	r3, [r3, #0]
   127b2:	2b00      	cmp	r3, #0
   127b4:	d1c9      	bne.n	1274a <gfx_mono_draw_string+0x2a>
}
   127b6:	46c0      	nop			; (mov r8, r8)
   127b8:	46bd      	mov	sp, r7
   127ba:	b007      	add	sp, #28
   127bc:	bd90      	pop	{r4, r7, pc}
   127be:	46c0      	nop			; (mov r8, r8)
   127c0:	000126b5 	.word	0x000126b5

000127c4 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
   127c4:	b580      	push	{r7, lr}
   127c6:	b082      	sub	sp, #8
   127c8:	af00      	add	r7, sp, #0
   127ca:	0002      	movs	r2, r0
   127cc:	1dfb      	adds	r3, r7, #7
   127ce:	701a      	strb	r2, [r3, #0]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
   127d0:	1dfb      	adds	r3, r7, #7
   127d2:	1dfa      	adds	r2, r7, #7
   127d4:	7812      	ldrb	r2, [r2, #0]
   127d6:	210f      	movs	r1, #15
   127d8:	400a      	ands	r2, r1
   127da:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
   127dc:	1dfb      	adds	r3, r7, #7
   127de:	781b      	ldrb	r3, [r3, #0]
   127e0:	2250      	movs	r2, #80	; 0x50
   127e2:	4252      	negs	r2, r2
   127e4:	4313      	orrs	r3, r2
   127e6:	b2db      	uxtb	r3, r3
   127e8:	0018      	movs	r0, r3
   127ea:	4b03      	ldr	r3, [pc, #12]	; (127f8 <ssd1306_set_page_address+0x34>)
   127ec:	4798      	blx	r3
}
   127ee:	46c0      	nop			; (mov r8, r8)
   127f0:	46bd      	mov	sp, r7
   127f2:	b002      	add	sp, #8
   127f4:	bd80      	pop	{r7, pc}
   127f6:	46c0      	nop			; (mov r8, r8)
   127f8:	000121d1 	.word	0x000121d1

000127fc <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
   127fc:	b580      	push	{r7, lr}
   127fe:	b082      	sub	sp, #8
   12800:	af00      	add	r7, sp, #0
   12802:	0002      	movs	r2, r0
   12804:	1dfb      	adds	r3, r7, #7
   12806:	701a      	strb	r2, [r3, #0]
	// Make sure the address is 7 bits
	address &= 0x7F;
   12808:	1dfb      	adds	r3, r7, #7
   1280a:	1dfa      	adds	r2, r7, #7
   1280c:	7812      	ldrb	r2, [r2, #0]
   1280e:	217f      	movs	r1, #127	; 0x7f
   12810:	400a      	ands	r2, r1
   12812:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4)+ 0x02); //ESE516 change
   12814:	1dfb      	adds	r3, r7, #7
   12816:	781b      	ldrb	r3, [r3, #0]
   12818:	091b      	lsrs	r3, r3, #4
   1281a:	b2db      	uxtb	r3, r3
   1281c:	2210      	movs	r2, #16
   1281e:	4313      	orrs	r3, r2
   12820:	b2db      	uxtb	r3, r3
   12822:	3302      	adds	r3, #2
   12824:	b2db      	uxtb	r3, r3
   12826:	0018      	movs	r0, r3
   12828:	4b06      	ldr	r3, [pc, #24]	; (12844 <ssd1306_set_column_address+0x48>)
   1282a:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
   1282c:	1dfb      	adds	r3, r7, #7
   1282e:	781b      	ldrb	r3, [r3, #0]
   12830:	220f      	movs	r2, #15
   12832:	4013      	ands	r3, r2
   12834:	b2db      	uxtb	r3, r3
   12836:	0018      	movs	r0, r3
   12838:	4b02      	ldr	r3, [pc, #8]	; (12844 <ssd1306_set_column_address+0x48>)
   1283a:	4798      	blx	r3
}
   1283c:	46c0      	nop			; (mov r8, r8)
   1283e:	46bd      	mov	sp, r7
   12840:	b002      	add	sp, #8
   12842:	bd80      	pop	{r7, pc}
   12844:	000121d1 	.word	0x000121d1

00012848 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
   12848:	b580      	push	{r7, lr}
   1284a:	b082      	sub	sp, #8
   1284c:	af00      	add	r7, sp, #0
   1284e:	0002      	movs	r2, r0
   12850:	1dfb      	adds	r3, r7, #7
   12852:	701a      	strb	r2, [r3, #0]
	// Make sure address is 6 bits
	address &= 0x3F;
   12854:	1dfb      	adds	r3, r7, #7
   12856:	1dfa      	adds	r2, r7, #7
   12858:	7812      	ldrb	r2, [r2, #0]
   1285a:	213f      	movs	r1, #63	; 0x3f
   1285c:	400a      	ands	r2, r1
   1285e:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
   12860:	1dfb      	adds	r3, r7, #7
   12862:	781b      	ldrb	r3, [r3, #0]
   12864:	2240      	movs	r2, #64	; 0x40
   12866:	4313      	orrs	r3, r2
   12868:	b2db      	uxtb	r3, r3
   1286a:	0018      	movs	r0, r3
   1286c:	4b02      	ldr	r3, [pc, #8]	; (12878 <ssd1306_set_display_start_line_address+0x30>)
   1286e:	4798      	blx	r3
}
   12870:	46c0      	nop			; (mov r8, r8)
   12872:	46bd      	mov	sp, r7
   12874:	b002      	add	sp, #8
   12876:	bd80      	pop	{r7, pc}
   12878:	000121d1 	.word	0x000121d1

0001287c <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
   1287c:	b590      	push	{r4, r7, lr}
   1287e:	b083      	sub	sp, #12
   12880:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
   12882:	4b18      	ldr	r3, [pc, #96]	; (128e4 <gfx_mono_ssd1306_init+0x68>)
   12884:	0018      	movs	r0, r3
   12886:	4b18      	ldr	r3, [pc, #96]	; (128e8 <gfx_mono_ssd1306_init+0x6c>)
   12888:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
   1288a:	4b18      	ldr	r3, [pc, #96]	; (128ec <gfx_mono_ssd1306_init+0x70>)
   1288c:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
   1288e:	2000      	movs	r0, #0
   12890:	4b17      	ldr	r3, [pc, #92]	; (128f0 <gfx_mono_ssd1306_init+0x74>)
   12892:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12894:	1dfb      	adds	r3, r7, #7
   12896:	2200      	movs	r2, #0
   12898:	701a      	strb	r2, [r3, #0]
   1289a:	e01a      	b.n	128d2 <gfx_mono_ssd1306_init+0x56>
		for (column = 0; column < 128; column++) {
   1289c:	1dbb      	adds	r3, r7, #6
   1289e:	2200      	movs	r2, #0
   128a0:	701a      	strb	r2, [r3, #0]
   128a2:	e00c      	b.n	128be <gfx_mono_ssd1306_init+0x42>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
   128a4:	1dbb      	adds	r3, r7, #6
   128a6:	7819      	ldrb	r1, [r3, #0]
   128a8:	1dfb      	adds	r3, r7, #7
   128aa:	7818      	ldrb	r0, [r3, #0]
   128ac:	2301      	movs	r3, #1
   128ae:	2200      	movs	r2, #0
   128b0:	4c10      	ldr	r4, [pc, #64]	; (128f4 <gfx_mono_ssd1306_init+0x78>)
   128b2:	47a0      	blx	r4
		for (column = 0; column < 128; column++) {
   128b4:	1dbb      	adds	r3, r7, #6
   128b6:	781a      	ldrb	r2, [r3, #0]
   128b8:	1dbb      	adds	r3, r7, #6
   128ba:	3201      	adds	r2, #1
   128bc:	701a      	strb	r2, [r3, #0]
   128be:	1dbb      	adds	r3, r7, #6
   128c0:	781b      	ldrb	r3, [r3, #0]
   128c2:	b25b      	sxtb	r3, r3
   128c4:	2b00      	cmp	r3, #0
   128c6:	daed      	bge.n	128a4 <gfx_mono_ssd1306_init+0x28>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   128c8:	1dfb      	adds	r3, r7, #7
   128ca:	781a      	ldrb	r2, [r3, #0]
   128cc:	1dfb      	adds	r3, r7, #7
   128ce:	3201      	adds	r2, #1
   128d0:	701a      	strb	r2, [r3, #0]
   128d2:	1dfb      	adds	r3, r7, #7
   128d4:	781b      	ldrb	r3, [r3, #0]
   128d6:	2b05      	cmp	r3, #5
   128d8:	d9e0      	bls.n	1289c <gfx_mono_ssd1306_init+0x20>
		}
	}
}
   128da:	46c0      	nop			; (mov r8, r8)
   128dc:	46bd      	mov	sp, r7
   128de:	b003      	add	sp, #12
   128e0:	bd90      	pop	{r4, r7, pc}
   128e2:	46c0      	nop			; (mov r8, r8)
   128e4:	20000320 	.word	0x20000320
   128e8:	00012281 	.word	0x00012281
   128ec:	00012129 	.word	0x00012129
   128f0:	00012849 	.word	0x00012849
   128f4:	000129ed 	.word	0x000129ed

000128f8 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
   128f8:	b590      	push	{r4, r7, lr}
   128fa:	b085      	sub	sp, #20
   128fc:	af00      	add	r7, sp, #0
   128fe:	0004      	movs	r4, r0
   12900:	0008      	movs	r0, r1
   12902:	0011      	movs	r1, r2
   12904:	1dfb      	adds	r3, r7, #7
   12906:	1c22      	adds	r2, r4, #0
   12908:	701a      	strb	r2, [r3, #0]
   1290a:	1dbb      	adds	r3, r7, #6
   1290c:	1c02      	adds	r2, r0, #0
   1290e:	701a      	strb	r2, [r3, #0]
   12910:	1d7b      	adds	r3, r7, #5
   12912:	1c0a      	adds	r2, r1, #0
   12914:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	2b3f      	cmp	r3, #63	; 0x3f
   1291c:	d85d      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
   1291e:	1dbb      	adds	r3, r7, #6
   12920:	781b      	ldrb	r3, [r3, #0]
   12922:	2b2f      	cmp	r3, #47	; 0x2f
   12924:	d859      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
   12926:	230e      	movs	r3, #14
   12928:	18fb      	adds	r3, r7, r3
   1292a:	1dba      	adds	r2, r7, #6
   1292c:	7812      	ldrb	r2, [r2, #0]
   1292e:	08d2      	lsrs	r2, r2, #3
   12930:	701a      	strb	r2, [r3, #0]
	pixel_mask = (1 << (y - (page * 8)));
   12932:	1dbb      	adds	r3, r7, #6
   12934:	781a      	ldrb	r2, [r3, #0]
   12936:	230e      	movs	r3, #14
   12938:	18fb      	adds	r3, r7, r3
   1293a:	781b      	ldrb	r3, [r3, #0]
   1293c:	00db      	lsls	r3, r3, #3
   1293e:	1ad3      	subs	r3, r2, r3
   12940:	2201      	movs	r2, #1
   12942:	409a      	lsls	r2, r3
   12944:	230d      	movs	r3, #13
   12946:	18fb      	adds	r3, r7, r3
   12948:	701a      	strb	r2, [r3, #0]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
   1294a:	230f      	movs	r3, #15
   1294c:	18fc      	adds	r4, r7, r3
   1294e:	1dfb      	adds	r3, r7, #7
   12950:	781a      	ldrb	r2, [r3, #0]
   12952:	230e      	movs	r3, #14
   12954:	18fb      	adds	r3, r7, r3
   12956:	781b      	ldrb	r3, [r3, #0]
   12958:	0011      	movs	r1, r2
   1295a:	0018      	movs	r0, r3
   1295c:	4b21      	ldr	r3, [pc, #132]	; (129e4 <gfx_mono_ssd1306_draw_pixel+0xec>)
   1295e:	4798      	blx	r3
   12960:	0003      	movs	r3, r0
   12962:	7023      	strb	r3, [r4, #0]

	switch (color) {
   12964:	1d7b      	adds	r3, r7, #5
   12966:	781b      	ldrb	r3, [r3, #0]
   12968:	2b01      	cmp	r3, #1
   1296a:	d004      	beq.n	12976 <gfx_mono_ssd1306_draw_pixel+0x7e>
   1296c:	2b02      	cmp	r3, #2
   1296e:	d01d      	beq.n	129ac <gfx_mono_ssd1306_draw_pixel+0xb4>
   12970:	2b00      	cmp	r3, #0
   12972:	d00b      	beq.n	1298c <gfx_mono_ssd1306_draw_pixel+0x94>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
   12974:	e025      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value |= pixel_mask;
   12976:	230f      	movs	r3, #15
   12978:	18fb      	adds	r3, r7, r3
   1297a:	220f      	movs	r2, #15
   1297c:	18b9      	adds	r1, r7, r2
   1297e:	220d      	movs	r2, #13
   12980:	18ba      	adds	r2, r7, r2
   12982:	7809      	ldrb	r1, [r1, #0]
   12984:	7812      	ldrb	r2, [r2, #0]
   12986:	430a      	orrs	r2, r1
   12988:	701a      	strb	r2, [r3, #0]
		break;
   1298a:	e01a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value &= ~pixel_mask;
   1298c:	230d      	movs	r3, #13
   1298e:	18fb      	adds	r3, r7, r3
   12990:	781b      	ldrb	r3, [r3, #0]
   12992:	b25b      	sxtb	r3, r3
   12994:	43db      	mvns	r3, r3
   12996:	b25b      	sxtb	r3, r3
   12998:	220f      	movs	r2, #15
   1299a:	18ba      	adds	r2, r7, r2
   1299c:	7812      	ldrb	r2, [r2, #0]
   1299e:	b252      	sxtb	r2, r2
   129a0:	4013      	ands	r3, r2
   129a2:	b25a      	sxtb	r2, r3
   129a4:	230f      	movs	r3, #15
   129a6:	18fb      	adds	r3, r7, r3
   129a8:	701a      	strb	r2, [r3, #0]
		break;
   129aa:	e00a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value ^= pixel_mask;
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	220f      	movs	r2, #15
   129b2:	18b9      	adds	r1, r7, r2
   129b4:	220d      	movs	r2, #13
   129b6:	18ba      	adds	r2, r7, r2
   129b8:	7809      	ldrb	r1, [r1, #0]
   129ba:	7812      	ldrb	r2, [r2, #0]
   129bc:	404a      	eors	r2, r1
   129be:	701a      	strb	r2, [r3, #0]
		break;
   129c0:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, x, pixel_value);
   129c2:	230f      	movs	r3, #15
   129c4:	18fb      	adds	r3, r7, r3
   129c6:	781a      	ldrb	r2, [r3, #0]
   129c8:	1dfb      	adds	r3, r7, #7
   129ca:	7819      	ldrb	r1, [r3, #0]
   129cc:	230e      	movs	r3, #14
   129ce:	18fb      	adds	r3, r7, r3
   129d0:	7818      	ldrb	r0, [r3, #0]
   129d2:	2300      	movs	r3, #0
   129d4:	4c04      	ldr	r4, [pc, #16]	; (129e8 <gfx_mono_ssd1306_draw_pixel+0xf0>)
   129d6:	47a0      	blx	r4
   129d8:	e000      	b.n	129dc <gfx_mono_ssd1306_draw_pixel+0xe4>
		return;
   129da:	46c0      	nop			; (mov r8, r8)
}
   129dc:	46bd      	mov	sp, r7
   129de:	b005      	add	sp, #20
   129e0:	bd90      	pop	{r4, r7, pc}
   129e2:	46c0      	nop			; (mov r8, r8)
   129e4:	00012a8d 	.word	0x00012a8d
   129e8:	000129ed 	.word	0x000129ed

000129ec <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
   129ec:	b5b0      	push	{r4, r5, r7, lr}
   129ee:	b082      	sub	sp, #8
   129f0:	af00      	add	r7, sp, #0
   129f2:	0005      	movs	r5, r0
   129f4:	000c      	movs	r4, r1
   129f6:	0010      	movs	r0, r2
   129f8:	0019      	movs	r1, r3
   129fa:	1dfb      	adds	r3, r7, #7
   129fc:	1c2a      	adds	r2, r5, #0
   129fe:	701a      	strb	r2, [r3, #0]
   12a00:	1dbb      	adds	r3, r7, #6
   12a02:	1c22      	adds	r2, r4, #0
   12a04:	701a      	strb	r2, [r3, #0]
   12a06:	1d7b      	adds	r3, r7, #5
   12a08:	1c02      	adds	r2, r0, #0
   12a0a:	701a      	strb	r2, [r3, #0]
   12a0c:	1d3b      	adds	r3, r7, #4
   12a0e:	1c0a      	adds	r2, r1, #0
   12a10:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
   12a12:	1d3b      	adds	r3, r7, #4
   12a14:	781b      	ldrb	r3, [r3, #0]
   12a16:	2201      	movs	r2, #1
   12a18:	4053      	eors	r3, r2
   12a1a:	b2db      	uxtb	r3, r3
   12a1c:	2b00      	cmp	r3, #0
   12a1e:	d00d      	beq.n	12a3c <gfx_mono_ssd1306_put_byte+0x50>
   12a20:	1dbb      	adds	r3, r7, #6
   12a22:	781a      	ldrb	r2, [r3, #0]
   12a24:	1dfb      	adds	r3, r7, #7
   12a26:	781b      	ldrb	r3, [r3, #0]
   12a28:	0011      	movs	r1, r2
   12a2a:	0018      	movs	r0, r3
   12a2c:	4b12      	ldr	r3, [pc, #72]	; (12a78 <gfx_mono_ssd1306_put_byte+0x8c>)
   12a2e:	4798      	blx	r3
   12a30:	0003      	movs	r3, r0
   12a32:	001a      	movs	r2, r3
   12a34:	1d7b      	adds	r3, r7, #5
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	4293      	cmp	r3, r2
   12a3a:	d018      	beq.n	12a6e <gfx_mono_ssd1306_put_byte+0x82>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
   12a3c:	1d7b      	adds	r3, r7, #5
   12a3e:	781a      	ldrb	r2, [r3, #0]
   12a40:	1dbb      	adds	r3, r7, #6
   12a42:	7819      	ldrb	r1, [r3, #0]
   12a44:	1dfb      	adds	r3, r7, #7
   12a46:	781b      	ldrb	r3, [r3, #0]
   12a48:	0018      	movs	r0, r3
   12a4a:	4b0c      	ldr	r3, [pc, #48]	; (12a7c <gfx_mono_ssd1306_put_byte+0x90>)
   12a4c:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
   12a4e:	1dfb      	adds	r3, r7, #7
   12a50:	781b      	ldrb	r3, [r3, #0]
   12a52:	0018      	movs	r0, r3
   12a54:	4b0a      	ldr	r3, [pc, #40]	; (12a80 <gfx_mono_ssd1306_put_byte+0x94>)
   12a56:	4798      	blx	r3
	ssd1306_set_column_address(column);
   12a58:	1dbb      	adds	r3, r7, #6
   12a5a:	781b      	ldrb	r3, [r3, #0]
   12a5c:	0018      	movs	r0, r3
   12a5e:	4b09      	ldr	r3, [pc, #36]	; (12a84 <gfx_mono_ssd1306_put_byte+0x98>)
   12a60:	4798      	blx	r3

	ssd1306_write_data(data);
   12a62:	1d7b      	adds	r3, r7, #5
   12a64:	781b      	ldrb	r3, [r3, #0]
   12a66:	0018      	movs	r0, r3
   12a68:	4b07      	ldr	r3, [pc, #28]	; (12a88 <gfx_mono_ssd1306_put_byte+0x9c>)
   12a6a:	4798      	blx	r3
   12a6c:	e000      	b.n	12a70 <gfx_mono_ssd1306_put_byte+0x84>
		return;
   12a6e:	46c0      	nop			; (mov r8, r8)
}
   12a70:	46bd      	mov	sp, r7
   12a72:	b002      	add	sp, #8
   12a74:	bdb0      	pop	{r4, r5, r7, pc}
   12a76:	46c0      	nop			; (mov r8, r8)
   12a78:	000122e1 	.word	0x000122e1
   12a7c:	0001229d 	.word	0x0001229d
   12a80:	000127c5 	.word	0x000127c5
   12a84:	000127fd 	.word	0x000127fd
   12a88:	00012229 	.word	0x00012229

00012a8c <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   12a8c:	b580      	push	{r7, lr}
   12a8e:	b082      	sub	sp, #8
   12a90:	af00      	add	r7, sp, #0
   12a92:	0002      	movs	r2, r0
   12a94:	1dfb      	adds	r3, r7, #7
   12a96:	701a      	strb	r2, [r3, #0]
   12a98:	1dbb      	adds	r3, r7, #6
   12a9a:	1c0a      	adds	r2, r1, #0
   12a9c:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
   12a9e:	1dbb      	adds	r3, r7, #6
   12aa0:	781a      	ldrb	r2, [r3, #0]
   12aa2:	1dfb      	adds	r3, r7, #7
   12aa4:	781b      	ldrb	r3, [r3, #0]
   12aa6:	0011      	movs	r1, r2
   12aa8:	0018      	movs	r0, r3
   12aaa:	4b03      	ldr	r3, [pc, #12]	; (12ab8 <gfx_mono_ssd1306_get_byte+0x2c>)
   12aac:	4798      	blx	r3
   12aae:	0003      	movs	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
   12ab0:	0018      	movs	r0, r3
   12ab2:	46bd      	mov	sp, r7
   12ab4:	b002      	add	sp, #8
   12ab6:	bd80      	pop	{r7, pc}
   12ab8:	000122e1 	.word	0x000122e1

00012abc <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12abc:	b580      	push	{r7, lr}
   12abe:	b084      	sub	sp, #16
   12ac0:	af00      	add	r7, sp, #0
   12ac2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   12ac4:	687b      	ldr	r3, [r7, #4]
   12ac6:	681b      	ldr	r3, [r3, #0]
   12ac8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12aca:	68fb      	ldr	r3, [r7, #12]
   12acc:	7e5b      	ldrb	r3, [r3, #25]
   12ace:	b2db      	uxtb	r3, r3
   12ad0:	b25b      	sxtb	r3, r3
   12ad2:	2b00      	cmp	r3, #0
   12ad4:	da01      	bge.n	12ada <adc_is_syncing+0x1e>
		return true;
   12ad6:	2301      	movs	r3, #1
   12ad8:	e000      	b.n	12adc <adc_is_syncing+0x20>
	}

	return false;
   12ada:	2300      	movs	r3, #0
}
   12adc:	0018      	movs	r0, r3
   12ade:	46bd      	mov	sp, r7
   12ae0:	b004      	add	sp, #16
   12ae2:	bd80      	pop	{r7, pc}

00012ae4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   12ae4:	b580      	push	{r7, lr}
   12ae6:	b084      	sub	sp, #16
   12ae8:	af00      	add	r7, sp, #0
   12aea:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12aec:	687b      	ldr	r3, [r7, #4]
   12aee:	681b      	ldr	r3, [r3, #0]
   12af0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   12af2:	46c0      	nop			; (mov r8, r8)
   12af4:	687b      	ldr	r3, [r7, #4]
   12af6:	0018      	movs	r0, r3
   12af8:	4b0b      	ldr	r3, [pc, #44]	; (12b28 <adc_start_conversion+0x44>)
   12afa:	4798      	blx	r3
   12afc:	1e03      	subs	r3, r0, #0
   12afe:	d1f9      	bne.n	12af4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12b00:	68fb      	ldr	r3, [r7, #12]
   12b02:	7b1b      	ldrb	r3, [r3, #12]
   12b04:	b2db      	uxtb	r3, r3
   12b06:	2202      	movs	r2, #2
   12b08:	4313      	orrs	r3, r2
   12b0a:	b2da      	uxtb	r2, r3
   12b0c:	68fb      	ldr	r3, [r7, #12]
   12b0e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12b10:	46c0      	nop			; (mov r8, r8)
   12b12:	687b      	ldr	r3, [r7, #4]
   12b14:	0018      	movs	r0, r3
   12b16:	4b04      	ldr	r3, [pc, #16]	; (12b28 <adc_start_conversion+0x44>)
   12b18:	4798      	blx	r3
   12b1a:	1e03      	subs	r3, r0, #0
   12b1c:	d1f9      	bne.n	12b12 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12b1e:	46c0      	nop			; (mov r8, r8)
   12b20:	46bd      	mov	sp, r7
   12b22:	b004      	add	sp, #16
   12b24:	bd80      	pop	{r7, pc}
   12b26:	46c0      	nop			; (mov r8, r8)
   12b28:	00012abd 	.word	0x00012abd

00012b2c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12b2c:	b580      	push	{r7, lr}
   12b2e:	b084      	sub	sp, #16
   12b30:	af00      	add	r7, sp, #0
   12b32:	6078      	str	r0, [r7, #4]
   12b34:	000a      	movs	r2, r1
   12b36:	1cfb      	adds	r3, r7, #3
   12b38:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12b3a:	687b      	ldr	r3, [r7, #4]
   12b3c:	681b      	ldr	r3, [r3, #0]
   12b3e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12b40:	68fb      	ldr	r3, [r7, #12]
   12b42:	1cfa      	adds	r2, r7, #3
   12b44:	7812      	ldrb	r2, [r2, #0]
   12b46:	759a      	strb	r2, [r3, #22]
}
   12b48:	46c0      	nop			; (mov r8, r8)
   12b4a:	46bd      	mov	sp, r7
   12b4c:	b004      	add	sp, #16
   12b4e:	bd80      	pop	{r7, pc}

00012b50 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   12b50:	b580      	push	{r7, lr}
   12b52:	b084      	sub	sp, #16
   12b54:	af00      	add	r7, sp, #0
   12b56:	0002      	movs	r2, r0
   12b58:	1dfb      	adds	r3, r7, #7
   12b5a:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   12b5c:	1dfb      	adds	r3, r7, #7
   12b5e:	781a      	ldrb	r2, [r3, #0]
   12b60:	4b47      	ldr	r3, [pc, #284]	; (12c80 <_adc_interrupt_handler+0x130>)
   12b62:	0092      	lsls	r2, r2, #2
   12b64:	58d3      	ldr	r3, [r2, r3]
   12b66:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   12b68:	68fb      	ldr	r3, [r7, #12]
   12b6a:	681b      	ldr	r3, [r3, #0]
   12b6c:	7e1b      	ldrb	r3, [r3, #24]
   12b6e:	b2da      	uxtb	r2, r3
   12b70:	68fb      	ldr	r3, [r7, #12]
   12b72:	681b      	ldr	r3, [r3, #0]
   12b74:	7ddb      	ldrb	r3, [r3, #23]
   12b76:	b2db      	uxtb	r3, r3
   12b78:	4013      	ands	r3, r2
   12b7a:	b2db      	uxtb	r3, r3
   12b7c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   12b7e:	68bb      	ldr	r3, [r7, #8]
   12b80:	2201      	movs	r2, #1
   12b82:	4013      	ands	r3, r2
   12b84:	d045      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   12b86:	68fb      	ldr	r3, [r7, #12]
   12b88:	681b      	ldr	r3, [r3, #0]
   12b8a:	2201      	movs	r2, #1
   12b8c:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   12b8e:	46c0      	nop			; (mov r8, r8)
   12b90:	68fb      	ldr	r3, [r7, #12]
   12b92:	0018      	movs	r0, r3
   12b94:	4b3b      	ldr	r3, [pc, #236]	; (12c84 <_adc_interrupt_handler+0x134>)
   12b96:	4798      	blx	r3
   12b98:	1e03      	subs	r3, r0, #0
   12b9a:	d1f9      	bne.n	12b90 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   12b9c:	68fb      	ldr	r3, [r7, #12]
   12b9e:	695b      	ldr	r3, [r3, #20]
   12ba0:	1c99      	adds	r1, r3, #2
   12ba2:	68fa      	ldr	r2, [r7, #12]
   12ba4:	6151      	str	r1, [r2, #20]
   12ba6:	68fa      	ldr	r2, [r7, #12]
   12ba8:	6812      	ldr	r2, [r2, #0]
   12baa:	8b52      	ldrh	r2, [r2, #26]
   12bac:	b292      	uxth	r2, r2
   12bae:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12bb0:	68fb      	ldr	r3, [r7, #12]
   12bb2:	8b1b      	ldrh	r3, [r3, #24]
   12bb4:	b29b      	uxth	r3, r3
   12bb6:	3b01      	subs	r3, #1
   12bb8:	b29b      	uxth	r3, r3
   12bba:	68fa      	ldr	r2, [r7, #12]
   12bbc:	1c19      	adds	r1, r3, #0
   12bbe:	8311      	strh	r1, [r2, #24]
   12bc0:	2b00      	cmp	r3, #0
   12bc2:	d008      	beq.n	12bd6 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   12bc4:	68fb      	ldr	r3, [r7, #12]
   12bc6:	7f5b      	ldrb	r3, [r3, #29]
   12bc8:	2b00      	cmp	r3, #0
   12bca:	d022      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12bcc:	68fb      	ldr	r3, [r7, #12]
   12bce:	0018      	movs	r0, r3
   12bd0:	4b2d      	ldr	r3, [pc, #180]	; (12c88 <_adc_interrupt_handler+0x138>)
   12bd2:	4798      	blx	r3
   12bd4:	e01d      	b.n	12c12 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   12bd6:	68fb      	ldr	r3, [r7, #12]
   12bd8:	2101      	movs	r1, #1
   12bda:	0018      	movs	r0, r3
   12bdc:	4b2b      	ldr	r3, [pc, #172]	; (12c8c <_adc_interrupt_handler+0x13c>)
   12bde:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12be0:	68fb      	ldr	r3, [r7, #12]
   12be2:	7f1b      	ldrb	r3, [r3, #28]
   12be4:	b2db      	uxtb	r3, r3
   12be6:	2b05      	cmp	r3, #5
   12be8:	d113      	bne.n	12c12 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12bea:	68fb      	ldr	r3, [r7, #12]
   12bec:	2200      	movs	r2, #0
   12bee:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12bf0:	68fb      	ldr	r3, [r7, #12]
   12bf2:	7edb      	ldrb	r3, [r3, #27]
   12bf4:	001a      	movs	r2, r3
   12bf6:	2301      	movs	r3, #1
   12bf8:	4013      	ands	r3, r2
   12bfa:	d00a      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12bfc:	68fb      	ldr	r3, [r7, #12]
   12bfe:	7e9b      	ldrb	r3, [r3, #26]
   12c00:	001a      	movs	r2, r3
   12c02:	2301      	movs	r3, #1
   12c04:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   12c06:	d004      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12c08:	68fb      	ldr	r3, [r7, #12]
   12c0a:	689b      	ldr	r3, [r3, #8]
   12c0c:	68fa      	ldr	r2, [r7, #12]
   12c0e:	0010      	movs	r0, r2
   12c10:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   12c12:	68bb      	ldr	r3, [r7, #8]
   12c14:	2204      	movs	r2, #4
   12c16:	4013      	ands	r3, r2
   12c18:	d014      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12c1a:	68fb      	ldr	r3, [r7, #12]
   12c1c:	681b      	ldr	r3, [r3, #0]
   12c1e:	2204      	movs	r2, #4
   12c20:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c22:	68fb      	ldr	r3, [r7, #12]
   12c24:	7edb      	ldrb	r3, [r3, #27]
   12c26:	001a      	movs	r2, r3
   12c28:	2302      	movs	r3, #2
   12c2a:	4013      	ands	r3, r2
   12c2c:	d00a      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12c2e:	68fb      	ldr	r3, [r7, #12]
   12c30:	7e9b      	ldrb	r3, [r3, #26]
   12c32:	001a      	movs	r2, r3
   12c34:	2302      	movs	r3, #2
   12c36:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c38:	d004      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12c3a:	68fb      	ldr	r3, [r7, #12]
   12c3c:	68db      	ldr	r3, [r3, #12]
   12c3e:	68fa      	ldr	r2, [r7, #12]
   12c40:	0010      	movs	r0, r2
   12c42:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   12c44:	68bb      	ldr	r3, [r7, #8]
   12c46:	2202      	movs	r2, #2
   12c48:	4013      	ands	r3, r2
   12c4a:	d014      	beq.n	12c76 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   12c4c:	68fb      	ldr	r3, [r7, #12]
   12c4e:	681b      	ldr	r3, [r3, #0]
   12c50:	2202      	movs	r2, #2
   12c52:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c54:	68fb      	ldr	r3, [r7, #12]
   12c56:	7edb      	ldrb	r3, [r3, #27]
   12c58:	001a      	movs	r2, r3
   12c5a:	2304      	movs	r3, #4
   12c5c:	4013      	ands	r3, r2
   12c5e:	d00a      	beq.n	12c76 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   12c60:	68fb      	ldr	r3, [r7, #12]
   12c62:	7e9b      	ldrb	r3, [r3, #26]
   12c64:	001a      	movs	r2, r3
   12c66:	2304      	movs	r3, #4
   12c68:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c6a:	d004      	beq.n	12c76 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   12c6c:	68fb      	ldr	r3, [r7, #12]
   12c6e:	691b      	ldr	r3, [r3, #16]
   12c70:	68fa      	ldr	r2, [r7, #12]
   12c72:	0010      	movs	r0, r2
   12c74:	4798      	blx	r3
		}
	}
}
   12c76:	46c0      	nop			; (mov r8, r8)
   12c78:	46bd      	mov	sp, r7
   12c7a:	b004      	add	sp, #16
   12c7c:	bd80      	pop	{r7, pc}
   12c7e:	46c0      	nop			; (mov r8, r8)
   12c80:	20004778 	.word	0x20004778
   12c84:	00012abd 	.word	0x00012abd
   12c88:	00012ae5 	.word	0x00012ae5
   12c8c:	00012b2d 	.word	0x00012b2d

00012c90 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   12c90:	b580      	push	{r7, lr}
   12c92:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   12c94:	2000      	movs	r0, #0
   12c96:	4b02      	ldr	r3, [pc, #8]	; (12ca0 <ADC_Handler+0x10>)
   12c98:	4798      	blx	r3
}
   12c9a:	46c0      	nop			; (mov r8, r8)
   12c9c:	46bd      	mov	sp, r7
   12c9e:	bd80      	pop	{r7, pc}
   12ca0:	00012b51 	.word	0x00012b51

00012ca4 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   12ca4:	b580      	push	{r7, lr}
   12ca6:	b082      	sub	sp, #8
   12ca8:	af00      	add	r7, sp, #0
   12caa:	0002      	movs	r2, r0
   12cac:	1dfb      	adds	r3, r7, #7
   12cae:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12cb0:	4a07      	ldr	r2, [pc, #28]	; (12cd0 <system_interrupt_disable+0x2c>)
   12cb2:	1dfb      	adds	r3, r7, #7
   12cb4:	781b      	ldrb	r3, [r3, #0]
   12cb6:	0019      	movs	r1, r3
   12cb8:	231f      	movs	r3, #31
   12cba:	400b      	ands	r3, r1
   12cbc:	2101      	movs	r1, #1
   12cbe:	4099      	lsls	r1, r3
   12cc0:	000b      	movs	r3, r1
   12cc2:	0019      	movs	r1, r3
   12cc4:	2380      	movs	r3, #128	; 0x80
   12cc6:	50d1      	str	r1, [r2, r3]
}
   12cc8:	46c0      	nop			; (mov r8, r8)
   12cca:	46bd      	mov	sp, r7
   12ccc:	b002      	add	sp, #8
   12cce:	bd80      	pop	{r7, pc}
   12cd0:	e000e100 	.word	0xe000e100

00012cd4 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   12cd4:	b580      	push	{r7, lr}
   12cd6:	b084      	sub	sp, #16
   12cd8:	af00      	add	r7, sp, #0
   12cda:	0002      	movs	r2, r0
   12cdc:	1dfb      	adds	r3, r7, #7
   12cde:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12ce0:	1dfb      	adds	r3, r7, #7
   12ce2:	781a      	ldrb	r2, [r3, #0]
   12ce4:	4b37      	ldr	r3, [pc, #220]	; (12dc4 <_dac_interrupt_handler+0xf0>)
   12ce6:	0092      	lsls	r2, r2, #2
   12ce8:	58d3      	ldr	r3, [r2, r3]
   12cea:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12cec:	68fb      	ldr	r3, [r7, #12]
   12cee:	681b      	ldr	r3, [r3, #0]
   12cf0:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   12cf2:	68bb      	ldr	r3, [r7, #8]
   12cf4:	799b      	ldrb	r3, [r3, #6]
   12cf6:	b2db      	uxtb	r3, r3
   12cf8:	001a      	movs	r2, r3
   12cfa:	2301      	movs	r3, #1
   12cfc:	4013      	ands	r3, r2
   12cfe:	d00e      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12d00:	68bb      	ldr	r3, [r7, #8]
   12d02:	2201      	movs	r2, #1
   12d04:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   12d06:	68fb      	ldr	r3, [r7, #12]
   12d08:	3314      	adds	r3, #20
   12d0a:	2b00      	cmp	r3, #0
   12d0c:	d007      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12d0e:	68fb      	ldr	r3, [r7, #12]
   12d10:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   12d12:	2b00      	cmp	r3, #0
   12d14:	d003      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   12d16:	68fb      	ldr	r3, [r7, #12]
   12d18:	699b      	ldr	r3, [r3, #24]
   12d1a:	2000      	movs	r0, #0
   12d1c:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12d1e:	68bb      	ldr	r3, [r7, #8]
   12d20:	799b      	ldrb	r3, [r3, #6]
   12d22:	b2db      	uxtb	r3, r3
   12d24:	001a      	movs	r2, r3
   12d26:	2302      	movs	r3, #2
   12d28:	4013      	ands	r3, r2
   12d2a:	d047      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d2c:	68bb      	ldr	r3, [r7, #8]
   12d2e:	2202      	movs	r2, #2
   12d30:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   12d32:	68fb      	ldr	r3, [r7, #12]
   12d34:	899b      	ldrh	r3, [r3, #12]
   12d36:	b29b      	uxth	r3, r3
   12d38:	2b00      	cmp	r3, #0
   12d3a:	d033      	beq.n	12da4 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12d3c:	68fb      	ldr	r3, [r7, #12]
   12d3e:	689a      	ldr	r2, [r3, #8]
   12d40:	68fb      	ldr	r3, [r7, #12]
   12d42:	89db      	ldrh	r3, [r3, #14]
   12d44:	b29b      	uxth	r3, r3
   12d46:	1c59      	adds	r1, r3, #1
   12d48:	b288      	uxth	r0, r1
   12d4a:	68f9      	ldr	r1, [r7, #12]
   12d4c:	81c8      	strh	r0, [r1, #14]
   12d4e:	005b      	lsls	r3, r3, #1
   12d50:	18d3      	adds	r3, r2, r3
   12d52:	881b      	ldrh	r3, [r3, #0]
   12d54:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   12d56:	68bb      	ldr	r3, [r7, #8]
   12d58:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   12d5a:	68fb      	ldr	r3, [r7, #12]
   12d5c:	899b      	ldrh	r3, [r3, #12]
   12d5e:	b29b      	uxth	r3, r3
   12d60:	3b01      	subs	r3, #1
   12d62:	b29a      	uxth	r2, r3
   12d64:	68fb      	ldr	r3, [r7, #12]
   12d66:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   12d68:	68fb      	ldr	r3, [r7, #12]
   12d6a:	899b      	ldrh	r3, [r3, #12]
   12d6c:	b29b      	uxth	r3, r3
   12d6e:	2b00      	cmp	r3, #0
   12d70:	d118      	bne.n	12da4 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   12d72:	68fb      	ldr	r3, [r7, #12]
   12d74:	2220      	movs	r2, #32
   12d76:	2100      	movs	r1, #0
   12d78:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   12d7a:	68bb      	ldr	r3, [r7, #8]
   12d7c:	2202      	movs	r2, #2
   12d7e:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d80:	68bb      	ldr	r3, [r7, #8]
   12d82:	2202      	movs	r2, #2
   12d84:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   12d86:	2019      	movs	r0, #25
   12d88:	4b0f      	ldr	r3, [pc, #60]	; (12dc8 <_dac_interrupt_handler+0xf4>)
   12d8a:	4798      	blx	r3

				if ((module->callback) &&
   12d8c:	68fb      	ldr	r3, [r7, #12]
   12d8e:	3314      	adds	r3, #20
   12d90:	2b00      	cmp	r3, #0
   12d92:	d007      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   12d94:	68fb      	ldr	r3, [r7, #12]
   12d96:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   12d98:	2b00      	cmp	r3, #0
   12d9a:	d003      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   12d9c:	68fb      	ldr	r3, [r7, #12]
   12d9e:	69db      	ldr	r3, [r3, #28]
   12da0:	2000      	movs	r0, #0
   12da2:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   12da4:	68fb      	ldr	r3, [r7, #12]
   12da6:	3314      	adds	r3, #20
   12da8:	2b00      	cmp	r3, #0
   12daa:	d007      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12dac:	68fb      	ldr	r3, [r7, #12]
   12dae:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12db0:	2b00      	cmp	r3, #0
   12db2:	d003      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   12db4:	68fb      	ldr	r3, [r7, #12]
   12db6:	695b      	ldr	r3, [r3, #20]
   12db8:	2000      	movs	r0, #0
   12dba:	4798      	blx	r3
		}
	}
}
   12dbc:	46c0      	nop			; (mov r8, r8)
   12dbe:	46bd      	mov	sp, r7
   12dc0:	b004      	add	sp, #16
   12dc2:	bd80      	pop	{r7, pc}
   12dc4:	2000477c 	.word	0x2000477c
   12dc8:	00012ca5 	.word	0x00012ca5

00012dcc <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12dcc:	b580      	push	{r7, lr}
   12dce:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12dd0:	2000      	movs	r0, #0
   12dd2:	4b02      	ldr	r3, [pc, #8]	; (12ddc <DAC_Handler+0x10>)
   12dd4:	4798      	blx	r3
}
   12dd6:	46c0      	nop			; (mov r8, r8)
   12dd8:	46bd      	mov	sp, r7
   12dda:	bd80      	pop	{r7, pc}
   12ddc:	00012cd5 	.word	0x00012cd5

00012de0 <system_interrupt_enter_critical_section>:
{
   12de0:	b580      	push	{r7, lr}
   12de2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   12de4:	4b02      	ldr	r3, [pc, #8]	; (12df0 <system_interrupt_enter_critical_section+0x10>)
   12de6:	4798      	blx	r3
}
   12de8:	46c0      	nop			; (mov r8, r8)
   12dea:	46bd      	mov	sp, r7
   12dec:	bd80      	pop	{r7, pc}
   12dee:	46c0      	nop			; (mov r8, r8)
   12df0:	0002604d 	.word	0x0002604d

00012df4 <system_interrupt_leave_critical_section>:
{
   12df4:	b580      	push	{r7, lr}
   12df6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12df8:	4b02      	ldr	r3, [pc, #8]	; (12e04 <system_interrupt_leave_critical_section+0x10>)
   12dfa:	4798      	blx	r3
}
   12dfc:	46c0      	nop			; (mov r8, r8)
   12dfe:	46bd      	mov	sp, r7
   12e00:	bd80      	pop	{r7, pc}
   12e02:	46c0      	nop			; (mov r8, r8)
   12e04:	000260a1 	.word	0x000260a1

00012e08 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12e08:	b580      	push	{r7, lr}
   12e0a:	b086      	sub	sp, #24
   12e0c:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12e0e:	4b49      	ldr	r3, [pc, #292]	; (12f34 <DMAC_Handler+0x12c>)
   12e10:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   12e12:	4b49      	ldr	r3, [pc, #292]	; (12f38 <DMAC_Handler+0x130>)
   12e14:	8c1b      	ldrh	r3, [r3, #32]
   12e16:	b29b      	uxth	r3, r3
   12e18:	b2da      	uxtb	r2, r3
   12e1a:	2317      	movs	r3, #23
   12e1c:	18fb      	adds	r3, r7, r3
   12e1e:	210f      	movs	r1, #15
   12e20:	400a      	ands	r2, r1
   12e22:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   12e24:	2317      	movs	r3, #23
   12e26:	18fb      	adds	r3, r7, r3
   12e28:	781a      	ldrb	r2, [r3, #0]
   12e2a:	4b44      	ldr	r3, [pc, #272]	; (12f3c <DMAC_Handler+0x134>)
   12e2c:	0092      	lsls	r2, r2, #2
   12e2e:	58d3      	ldr	r3, [r2, r3]
   12e30:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   12e32:	4a41      	ldr	r2, [pc, #260]	; (12f38 <DMAC_Handler+0x130>)
   12e34:	693b      	ldr	r3, [r7, #16]
   12e36:	781b      	ldrb	r3, [r3, #0]
   12e38:	210f      	movs	r1, #15
   12e3a:	400b      	ands	r3, r1
   12e3c:	b2d9      	uxtb	r1, r3
   12e3e:	233f      	movs	r3, #63	; 0x3f
   12e40:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   12e42:	493d      	ldr	r1, [pc, #244]	; (12f38 <DMAC_Handler+0x130>)
   12e44:	230f      	movs	r3, #15
   12e46:	18fb      	adds	r3, r7, r3
   12e48:	224e      	movs	r2, #78	; 0x4e
   12e4a:	5c8a      	ldrb	r2, [r1, r2]
   12e4c:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   12e4e:	693b      	ldr	r3, [r7, #16]
   12e50:	781b      	ldrb	r3, [r3, #0]
   12e52:	4a3b      	ldr	r2, [pc, #236]	; (12f40 <DMAC_Handler+0x138>)
   12e54:	011b      	lsls	r3, r3, #4
   12e56:	18d3      	adds	r3, r2, r3
   12e58:	3302      	adds	r3, #2
   12e5a:	881b      	ldrh	r3, [r3, #0]
   12e5c:	b29b      	uxth	r3, r3
   12e5e:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   12e60:	693b      	ldr	r3, [r7, #16]
   12e62:	781b      	ldrb	r3, [r3, #0]
   12e64:	4a37      	ldr	r2, [pc, #220]	; (12f44 <DMAC_Handler+0x13c>)
   12e66:	011b      	lsls	r3, r3, #4
   12e68:	18d3      	adds	r3, r2, r3
   12e6a:	3302      	adds	r3, #2
   12e6c:	881b      	ldrh	r3, [r3, #0]
   12e6e:	b29b      	uxth	r3, r3
   12e70:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   12e72:	68ba      	ldr	r2, [r7, #8]
   12e74:	687b      	ldr	r3, [r7, #4]
   12e76:	1ad2      	subs	r2, r2, r3
   12e78:	693b      	ldr	r3, [r7, #16]
   12e7a:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   12e7c:	230f      	movs	r3, #15
   12e7e:	18fb      	adds	r3, r7, r3
   12e80:	781b      	ldrb	r3, [r3, #0]
   12e82:	2201      	movs	r2, #1
   12e84:	4013      	ands	r3, r2
   12e86:	d016      	beq.n	12eb6 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   12e88:	4a2b      	ldr	r2, [pc, #172]	; (12f38 <DMAC_Handler+0x130>)
   12e8a:	234e      	movs	r3, #78	; 0x4e
   12e8c:	2101      	movs	r1, #1
   12e8e:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   12e90:	693b      	ldr	r3, [r7, #16]
   12e92:	2210      	movs	r2, #16
   12e94:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12e96:	693b      	ldr	r3, [r7, #16]
   12e98:	7c1b      	ldrb	r3, [r3, #16]
   12e9a:	001a      	movs	r2, r3
   12e9c:	2301      	movs	r3, #1
   12e9e:	4013      	ands	r3, r2
   12ea0:	d042      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   12ea2:	693b      	ldr	r3, [r7, #16]
   12ea4:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12ea6:	2b00      	cmp	r3, #0
   12ea8:	d03e      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12eaa:	693b      	ldr	r3, [r7, #16]
   12eac:	685b      	ldr	r3, [r3, #4]
   12eae:	693a      	ldr	r2, [r7, #16]
   12eb0:	0010      	movs	r0, r2
   12eb2:	4798      	blx	r3
   12eb4:	e038      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   12eb6:	230f      	movs	r3, #15
   12eb8:	18fb      	adds	r3, r7, r3
   12eba:	781b      	ldrb	r3, [r3, #0]
   12ebc:	2202      	movs	r2, #2
   12ebe:	4013      	ands	r3, r2
   12ec0:	d016      	beq.n	12ef0 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   12ec2:	4a1d      	ldr	r2, [pc, #116]	; (12f38 <DMAC_Handler+0x130>)
   12ec4:	234e      	movs	r3, #78	; 0x4e
   12ec6:	2102      	movs	r1, #2
   12ec8:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12eca:	693b      	ldr	r3, [r7, #16]
   12ecc:	2200      	movs	r2, #0
   12ece:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ed0:	693b      	ldr	r3, [r7, #16]
   12ed2:	7c1b      	ldrb	r3, [r3, #16]
   12ed4:	001a      	movs	r2, r3
   12ed6:	2302      	movs	r3, #2
   12ed8:	4013      	ands	r3, r2
   12eda:	d025      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12edc:	693b      	ldr	r3, [r7, #16]
   12ede:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ee0:	2b00      	cmp	r3, #0
   12ee2:	d021      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   12ee4:	693b      	ldr	r3, [r7, #16]
   12ee6:	689b      	ldr	r3, [r3, #8]
   12ee8:	693a      	ldr	r2, [r7, #16]
   12eea:	0010      	movs	r0, r2
   12eec:	4798      	blx	r3
   12eee:	e01b      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12ef0:	230f      	movs	r3, #15
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	781b      	ldrb	r3, [r3, #0]
   12ef6:	2204      	movs	r2, #4
   12ef8:	4013      	ands	r3, r2
   12efa:	d015      	beq.n	12f28 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12efc:	4a0e      	ldr	r2, [pc, #56]	; (12f38 <DMAC_Handler+0x130>)
   12efe:	234e      	movs	r3, #78	; 0x4e
   12f00:	2104      	movs	r1, #4
   12f02:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   12f04:	693b      	ldr	r3, [r7, #16]
   12f06:	2206      	movs	r2, #6
   12f08:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f0a:	693b      	ldr	r3, [r7, #16]
   12f0c:	7c1b      	ldrb	r3, [r3, #16]
   12f0e:	001a      	movs	r2, r3
   12f10:	2304      	movs	r3, #4
   12f12:	4013      	ands	r3, r2
   12f14:	d008      	beq.n	12f28 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   12f16:	693b      	ldr	r3, [r7, #16]
   12f18:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f1a:	2b00      	cmp	r3, #0
   12f1c:	d004      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12f1e:	693b      	ldr	r3, [r7, #16]
   12f20:	68db      	ldr	r3, [r3, #12]
   12f22:	693a      	ldr	r2, [r7, #16]
   12f24:	0010      	movs	r0, r2
   12f26:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12f28:	4b07      	ldr	r3, [pc, #28]	; (12f48 <DMAC_Handler+0x140>)
   12f2a:	4798      	blx	r3
}
   12f2c:	46c0      	nop			; (mov r8, r8)
   12f2e:	46bd      	mov	sp, r7
   12f30:	b006      	add	sp, #24
   12f32:	bd80      	pop	{r7, pc}
   12f34:	00012de1 	.word	0x00012de1
   12f38:	41004800 	.word	0x41004800
   12f3c:	200004f0 	.word	0x200004f0
   12f40:	20004780 	.word	0x20004780
   12f44:	200004a0 	.word	0x200004a0
   12f48:	00012df5 	.word	0x00012df5

00012f4c <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   12f4c:	b580      	push	{r7, lr}
   12f4e:	b082      	sub	sp, #8
   12f50:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   12f52:	4b15      	ldr	r3, [pc, #84]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f54:	691b      	ldr	r3, [r3, #16]
   12f56:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   12f58:	4b14      	ldr	r3, [pc, #80]	; (12fac <EVSYS_Handler+0x60>)
   12f5a:	699b      	ldr	r3, [r3, #24]
   12f5c:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   12f5e:	4b12      	ldr	r3, [pc, #72]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f60:	689a      	ldr	r2, [r3, #8]
   12f62:	683b      	ldr	r3, [r7, #0]
   12f64:	431a      	orrs	r2, r3
   12f66:	4b10      	ldr	r3, [pc, #64]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f68:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   12f6a:	4b10      	ldr	r3, [pc, #64]	; (12fac <EVSYS_Handler+0x60>)
   12f6c:	4a10      	ldr	r2, [pc, #64]	; (12fb0 <EVSYS_Handler+0x64>)
   12f6e:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   12f70:	e008      	b.n	12f84 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   12f72:	687b      	ldr	r3, [r7, #4]
   12f74:	685a      	ldr	r2, [r3, #4]
   12f76:	687b      	ldr	r3, [r7, #4]
   12f78:	681b      	ldr	r3, [r3, #0]
   12f7a:	0018      	movs	r0, r3
   12f7c:	4790      	blx	r2
		current_hook = current_hook->next;
   12f7e:	687b      	ldr	r3, [r7, #4]
   12f80:	689b      	ldr	r3, [r3, #8]
   12f82:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   12f84:	687b      	ldr	r3, [r7, #4]
   12f86:	2b00      	cmp	r3, #0
   12f88:	d1f3      	bne.n	12f72 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   12f8a:	4b07      	ldr	r3, [pc, #28]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f8c:	68db      	ldr	r3, [r3, #12]
   12f8e:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   12f90:	4b05      	ldr	r3, [pc, #20]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f92:	689b      	ldr	r3, [r3, #8]
   12f94:	683a      	ldr	r2, [r7, #0]
   12f96:	43d2      	mvns	r2, r2
   12f98:	401a      	ands	r2, r3
   12f9a:	4b03      	ldr	r3, [pc, #12]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f9c:	609a      	str	r2, [r3, #8]
}
   12f9e:	46c0      	nop			; (mov r8, r8)
   12fa0:	46bd      	mov	sp, r7
   12fa2:	b002      	add	sp, #8
   12fa4:	bd80      	pop	{r7, pc}
   12fa6:	46c0      	nop			; (mov r8, r8)
   12fa8:	2000000c 	.word	0x2000000c
   12fac:	42000400 	.word	0x42000400
   12fb0:	0f0fffff 	.word	0x0f0fffff

00012fb4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   12fb4:	b580      	push	{r7, lr}
   12fb6:	b082      	sub	sp, #8
   12fb8:	af00      	add	r7, sp, #0
   12fba:	0002      	movs	r2, r0
   12fbc:	6039      	str	r1, [r7, #0]
   12fbe:	1dfb      	adds	r3, r7, #7
   12fc0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12fc2:	1dfb      	adds	r3, r7, #7
   12fc4:	781b      	ldrb	r3, [r3, #0]
   12fc6:	2b01      	cmp	r3, #1
   12fc8:	d00a      	beq.n	12fe0 <system_apb_clock_set_mask+0x2c>
   12fca:	2b02      	cmp	r3, #2
   12fcc:	d00f      	beq.n	12fee <system_apb_clock_set_mask+0x3a>
   12fce:	2b00      	cmp	r3, #0
   12fd0:	d114      	bne.n	12ffc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   12fd2:	4b0e      	ldr	r3, [pc, #56]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd4:	4a0d      	ldr	r2, [pc, #52]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd6:	6991      	ldr	r1, [r2, #24]
   12fd8:	683a      	ldr	r2, [r7, #0]
   12fda:	430a      	orrs	r2, r1
   12fdc:	619a      	str	r2, [r3, #24]
			break;
   12fde:	e00f      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12fe0:	4b0a      	ldr	r3, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe2:	4a0a      	ldr	r2, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe4:	69d1      	ldr	r1, [r2, #28]
   12fe6:	683a      	ldr	r2, [r7, #0]
   12fe8:	430a      	orrs	r2, r1
   12fea:	61da      	str	r2, [r3, #28]
			break;
   12fec:	e008      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12fee:	4b07      	ldr	r3, [pc, #28]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff0:	4a06      	ldr	r2, [pc, #24]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff2:	6a11      	ldr	r1, [r2, #32]
   12ff4:	683a      	ldr	r2, [r7, #0]
   12ff6:	430a      	orrs	r2, r1
   12ff8:	621a      	str	r2, [r3, #32]
			break;
   12ffa:	e001      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12ffc:	2317      	movs	r3, #23
   12ffe:	e000      	b.n	13002 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   13000:	2300      	movs	r3, #0
}
   13002:	0018      	movs	r0, r3
   13004:	46bd      	mov	sp, r7
   13006:	b002      	add	sp, #8
   13008:	bd80      	pop	{r7, pc}
   1300a:	46c0      	nop			; (mov r8, r8)
   1300c:	40000400 	.word	0x40000400

00013010 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   13010:	b580      	push	{r7, lr}
   13012:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   13014:	2102      	movs	r1, #2
   13016:	2002      	movs	r0, #2
   13018:	4b07      	ldr	r3, [pc, #28]	; (13038 <_system_events_init+0x28>)
   1301a:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   1301c:	4b07      	ldr	r3, [pc, #28]	; (1303c <_system_events_init+0x2c>)
   1301e:	2201      	movs	r2, #1
   13020:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   13022:	46c0      	nop			; (mov r8, r8)
   13024:	4b05      	ldr	r3, [pc, #20]	; (1303c <_system_events_init+0x2c>)
   13026:	781b      	ldrb	r3, [r3, #0]
   13028:	b2db      	uxtb	r3, r3
   1302a:	001a      	movs	r2, r3
   1302c:	2301      	movs	r3, #1
   1302e:	4013      	ands	r3, r2
   13030:	d1f8      	bne.n	13024 <_system_events_init+0x14>
	}
}
   13032:	46c0      	nop			; (mov r8, r8)
   13034:	46bd      	mov	sp, r7
   13036:	bd80      	pop	{r7, pc}
   13038:	00012fb5 	.word	0x00012fb5
   1303c:	42000400 	.word	0x42000400

00013040 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   13040:	b580      	push	{r7, lr}
   13042:	b084      	sub	sp, #16
   13044:	af00      	add	r7, sp, #0
   13046:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13048:	687b      	ldr	r3, [r7, #4]
   1304a:	681b      	ldr	r3, [r3, #0]
   1304c:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1304e:	68fb      	ldr	r3, [r7, #12]
   13050:	69db      	ldr	r3, [r3, #28]
   13052:	2207      	movs	r2, #7
   13054:	4013      	ands	r3, r2
   13056:	1e5a      	subs	r2, r3, #1
   13058:	4193      	sbcs	r3, r2
   1305a:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   1305c:	0018      	movs	r0, r3
   1305e:	46bd      	mov	sp, r7
   13060:	b004      	add	sp, #16
   13062:	bd80      	pop	{r7, pc}

00013064 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   13064:	b580      	push	{r7, lr}
   13066:	b082      	sub	sp, #8
   13068:	af00      	add	r7, sp, #0
   1306a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   1306c:	46c0      	nop			; (mov r8, r8)
   1306e:	687b      	ldr	r3, [r7, #4]
   13070:	0018      	movs	r0, r3
   13072:	4b04      	ldr	r3, [pc, #16]	; (13084 <_i2c_master_wait_for_sync+0x20>)
   13074:	4798      	blx	r3
   13076:	1e03      	subs	r3, r0, #0
   13078:	d1f9      	bne.n	1306e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   1307a:	46c0      	nop			; (mov r8, r8)
   1307c:	46bd      	mov	sp, r7
   1307e:	b002      	add	sp, #8
   13080:	bd80      	pop	{r7, pc}
   13082:	46c0      	nop			; (mov r8, r8)
   13084:	00013041 	.word	0x00013041

00013088 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   13088:	b580      	push	{r7, lr}
   1308a:	b084      	sub	sp, #16
   1308c:	af00      	add	r7, sp, #0
   1308e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13090:	687b      	ldr	r3, [r7, #4]
   13092:	681b      	ldr	r3, [r3, #0]
   13094:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13096:	68fb      	ldr	r3, [r7, #12]
   13098:	681b      	ldr	r3, [r3, #0]
   1309a:	011b      	lsls	r3, r3, #4
   1309c:	0fdb      	lsrs	r3, r3, #31
   1309e:	b2db      	uxtb	r3, r3
   130a0:	001a      	movs	r2, r3
   130a2:	230b      	movs	r3, #11
   130a4:	18fb      	adds	r3, r7, r3
   130a6:	1e51      	subs	r1, r2, #1
   130a8:	418a      	sbcs	r2, r1
   130aa:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   130ac:	2308      	movs	r3, #8
   130ae:	18fb      	adds	r3, r7, r3
   130b0:	687a      	ldr	r2, [r7, #4]
   130b2:	8b52      	ldrh	r2, [r2, #26]
   130b4:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   130b6:	687b      	ldr	r3, [r7, #4]
   130b8:	8b9b      	ldrh	r3, [r3, #28]
   130ba:	b29a      	uxth	r2, r3
   130bc:	2308      	movs	r3, #8
   130be:	18fb      	adds	r3, r7, r3
   130c0:	2108      	movs	r1, #8
   130c2:	1879      	adds	r1, r7, r1
   130c4:	8809      	ldrh	r1, [r1, #0]
   130c6:	1a8a      	subs	r2, r1, r2
   130c8:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   130ca:	687b      	ldr	r3, [r7, #4]
   130cc:	8b9b      	ldrh	r3, [r3, #28]
   130ce:	b29b      	uxth	r3, r3
   130d0:	3b01      	subs	r3, #1
   130d2:	b29a      	uxth	r2, r3
   130d4:	687b      	ldr	r3, [r7, #4]
   130d6:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   130d8:	230b      	movs	r3, #11
   130da:	18fb      	adds	r3, r7, r3
   130dc:	781b      	ldrb	r3, [r3, #0]
   130de:	2b00      	cmp	r3, #0
   130e0:	d010      	beq.n	13104 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   130e2:	687b      	ldr	r3, [r7, #4]
   130e4:	7adb      	ldrb	r3, [r3, #11]
   130e6:	2b00      	cmp	r3, #0
   130e8:	d01c      	beq.n	13124 <_i2c_master_read+0x9c>
   130ea:	687b      	ldr	r3, [r7, #4]
   130ec:	8b9b      	ldrh	r3, [r3, #28]
   130ee:	b29b      	uxth	r3, r3
   130f0:	2b01      	cmp	r3, #1
   130f2:	d117      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   130f4:	68fb      	ldr	r3, [r7, #12]
   130f6:	685b      	ldr	r3, [r3, #4]
   130f8:	2280      	movs	r2, #128	; 0x80
   130fa:	02d2      	lsls	r2, r2, #11
   130fc:	431a      	orrs	r2, r3
   130fe:	68fb      	ldr	r3, [r7, #12]
   13100:	605a      	str	r2, [r3, #4]
   13102:	e00f      	b.n	13124 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   13104:	687b      	ldr	r3, [r7, #4]
   13106:	7adb      	ldrb	r3, [r3, #11]
   13108:	2b00      	cmp	r3, #0
   1310a:	d00b      	beq.n	13124 <_i2c_master_read+0x9c>
   1310c:	687b      	ldr	r3, [r7, #4]
   1310e:	8b9b      	ldrh	r3, [r3, #28]
   13110:	b29b      	uxth	r3, r3
   13112:	2b00      	cmp	r3, #0
   13114:	d106      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13116:	68fb      	ldr	r3, [r7, #12]
   13118:	685b      	ldr	r3, [r3, #4]
   1311a:	2280      	movs	r2, #128	; 0x80
   1311c:	02d2      	lsls	r2, r2, #11
   1311e:	431a      	orrs	r2, r3
   13120:	68fb      	ldr	r3, [r7, #12]
   13122:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   13124:	687b      	ldr	r3, [r7, #4]
   13126:	8b9b      	ldrh	r3, [r3, #28]
   13128:	b29b      	uxth	r3, r3
   1312a:	2b00      	cmp	r3, #0
   1312c:	d10e      	bne.n	1314c <_i2c_master_read+0xc4>
		if (module->send_stop) {
   1312e:	687b      	ldr	r3, [r7, #4]
   13130:	7a9b      	ldrb	r3, [r3, #10]
   13132:	2b00      	cmp	r3, #0
   13134:	d00a      	beq.n	1314c <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   13136:	687b      	ldr	r3, [r7, #4]
   13138:	0018      	movs	r0, r3
   1313a:	4b0e      	ldr	r3, [pc, #56]	; (13174 <_i2c_master_read+0xec>)
   1313c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1313e:	68fb      	ldr	r3, [r7, #12]
   13140:	685b      	ldr	r3, [r3, #4]
   13142:	22c0      	movs	r2, #192	; 0xc0
   13144:	0292      	lsls	r2, r2, #10
   13146:	431a      	orrs	r2, r3
   13148:	68fb      	ldr	r3, [r7, #12]
   1314a:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   1314c:	687b      	ldr	r3, [r7, #4]
   1314e:	0018      	movs	r0, r3
   13150:	4b08      	ldr	r3, [pc, #32]	; (13174 <_i2c_master_read+0xec>)
   13152:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   13154:	687b      	ldr	r3, [r7, #4]
   13156:	6a1a      	ldr	r2, [r3, #32]
   13158:	2308      	movs	r3, #8
   1315a:	18fb      	adds	r3, r7, r3
   1315c:	881b      	ldrh	r3, [r3, #0]
   1315e:	18d3      	adds	r3, r2, r3
   13160:	68fa      	ldr	r2, [r7, #12]
   13162:	2128      	movs	r1, #40	; 0x28
   13164:	5c52      	ldrb	r2, [r2, r1]
   13166:	b2d2      	uxtb	r2, r2
   13168:	701a      	strb	r2, [r3, #0]
}
   1316a:	46c0      	nop			; (mov r8, r8)
   1316c:	46bd      	mov	sp, r7
   1316e:	b004      	add	sp, #16
   13170:	bd80      	pop	{r7, pc}
   13172:	46c0      	nop			; (mov r8, r8)
   13174:	00013065 	.word	0x00013065

00013178 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   13178:	b580      	push	{r7, lr}
   1317a:	b084      	sub	sp, #16
   1317c:	af00      	add	r7, sp, #0
   1317e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13180:	687b      	ldr	r3, [r7, #4]
   13182:	681b      	ldr	r3, [r3, #0]
   13184:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   13186:	68fb      	ldr	r3, [r7, #12]
   13188:	8b5b      	ldrh	r3, [r3, #26]
   1318a:	b29b      	uxth	r3, r3
   1318c:	001a      	movs	r2, r3
   1318e:	2304      	movs	r3, #4
   13190:	4013      	ands	r3, r2
   13192:	d004      	beq.n	1319e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   13194:	687b      	ldr	r3, [r7, #4]
   13196:	2225      	movs	r2, #37	; 0x25
   13198:	211e      	movs	r1, #30
   1319a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   1319c:	e024      	b.n	131e8 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   1319e:	230a      	movs	r3, #10
   131a0:	18fb      	adds	r3, r7, r3
   131a2:	687a      	ldr	r2, [r7, #4]
   131a4:	8b52      	ldrh	r2, [r2, #26]
   131a6:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   131a8:	687b      	ldr	r3, [r7, #4]
   131aa:	8b9b      	ldrh	r3, [r3, #28]
   131ac:	b29a      	uxth	r2, r3
   131ae:	230a      	movs	r3, #10
   131b0:	18fb      	adds	r3, r7, r3
   131b2:	210a      	movs	r1, #10
   131b4:	1879      	adds	r1, r7, r1
   131b6:	8809      	ldrh	r1, [r1, #0]
   131b8:	1a8a      	subs	r2, r1, r2
   131ba:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   131bc:	687b      	ldr	r3, [r7, #4]
   131be:	8b9b      	ldrh	r3, [r3, #28]
   131c0:	b29b      	uxth	r3, r3
   131c2:	3b01      	subs	r3, #1
   131c4:	b29a      	uxth	r2, r3
   131c6:	687b      	ldr	r3, [r7, #4]
   131c8:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   131ca:	687b      	ldr	r3, [r7, #4]
   131cc:	0018      	movs	r0, r3
   131ce:	4b08      	ldr	r3, [pc, #32]	; (131f0 <_i2c_master_write+0x78>)
   131d0:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   131d2:	687b      	ldr	r3, [r7, #4]
   131d4:	6a1a      	ldr	r2, [r3, #32]
   131d6:	230a      	movs	r3, #10
   131d8:	18fb      	adds	r3, r7, r3
   131da:	881b      	ldrh	r3, [r3, #0]
   131dc:	18d3      	adds	r3, r2, r3
   131de:	781b      	ldrb	r3, [r3, #0]
   131e0:	b2d9      	uxtb	r1, r3
   131e2:	68fb      	ldr	r3, [r7, #12]
   131e4:	2228      	movs	r2, #40	; 0x28
   131e6:	5499      	strb	r1, [r3, r2]
}
   131e8:	46bd      	mov	sp, r7
   131ea:	b004      	add	sp, #16
   131ec:	bd80      	pop	{r7, pc}
   131ee:	46c0      	nop			; (mov r8, r8)
   131f0:	00013065 	.word	0x00013065

000131f4 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   131f4:	b580      	push	{r7, lr}
   131f6:	b084      	sub	sp, #16
   131f8:	af00      	add	r7, sp, #0
   131fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   131fc:	687b      	ldr	r3, [r7, #4]
   131fe:	681b      	ldr	r3, [r3, #0]
   13200:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   13202:	68fb      	ldr	r3, [r7, #12]
   13204:	7e1b      	ldrb	r3, [r3, #24]
   13206:	b2db      	uxtb	r3, r3
   13208:	001a      	movs	r2, r3
   1320a:	2301      	movs	r3, #1
   1320c:	4013      	ands	r3, r2
   1320e:	d02b      	beq.n	13268 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   13210:	68fb      	ldr	r3, [r7, #12]
   13212:	2201      	movs	r2, #1
   13214:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   13216:	68fb      	ldr	r3, [r7, #12]
   13218:	8b5b      	ldrh	r3, [r3, #26]
   1321a:	b29b      	uxth	r3, r3
   1321c:	001a      	movs	r2, r3
   1321e:	2302      	movs	r3, #2
   13220:	4013      	ands	r3, r2
   13222:	d004      	beq.n	1322e <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   13224:	687b      	ldr	r3, [r7, #4]
   13226:	2225      	movs	r2, #37	; 0x25
   13228:	2141      	movs	r1, #65	; 0x41
   1322a:	5499      	strb	r1, [r3, r2]
   1322c:	e01c      	b.n	13268 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1322e:	68fb      	ldr	r3, [r7, #12]
   13230:	8b5b      	ldrh	r3, [r3, #26]
   13232:	b29b      	uxth	r3, r3
   13234:	001a      	movs	r2, r3
   13236:	2304      	movs	r3, #4
   13238:	4013      	ands	r3, r2
   1323a:	d015      	beq.n	13268 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   1323c:	687b      	ldr	r3, [r7, #4]
   1323e:	2225      	movs	r2, #37	; 0x25
   13240:	2118      	movs	r1, #24
   13242:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   13244:	687b      	ldr	r3, [r7, #4]
   13246:	2200      	movs	r2, #0
   13248:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   1324a:	687b      	ldr	r3, [r7, #4]
   1324c:	7a9b      	ldrb	r3, [r3, #10]
   1324e:	2b00      	cmp	r3, #0
   13250:	d00a      	beq.n	13268 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   13252:	687b      	ldr	r3, [r7, #4]
   13254:	0018      	movs	r0, r3
   13256:	4b13      	ldr	r3, [pc, #76]	; (132a4 <_i2c_master_async_address_response+0xb0>)
   13258:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1325a:	68fb      	ldr	r3, [r7, #12]
   1325c:	685b      	ldr	r3, [r3, #4]
   1325e:	22c0      	movs	r2, #192	; 0xc0
   13260:	0292      	lsls	r2, r2, #10
   13262:	431a      	orrs	r2, r3
   13264:	68fb      	ldr	r3, [r7, #12]
   13266:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   13268:	687b      	ldr	r3, [r7, #4]
   1326a:	8b9b      	ldrh	r3, [r3, #28]
   1326c:	b29a      	uxth	r2, r3
   1326e:	687b      	ldr	r3, [r7, #4]
   13270:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   13272:	687b      	ldr	r3, [r7, #4]
   13274:	2225      	movs	r2, #37	; 0x25
   13276:	5c9b      	ldrb	r3, [r3, r2]
   13278:	b2db      	uxtb	r3, r3
   1327a:	2b05      	cmp	r3, #5
   1327c:	d10e      	bne.n	1329c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   1327e:	687b      	ldr	r3, [r7, #4]
   13280:	2224      	movs	r2, #36	; 0x24
   13282:	5c9b      	ldrb	r3, [r3, r2]
   13284:	b2db      	uxtb	r3, r3
   13286:	2b00      	cmp	r3, #0
   13288:	d104      	bne.n	13294 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   1328a:	687b      	ldr	r3, [r7, #4]
   1328c:	0018      	movs	r0, r3
   1328e:	4b06      	ldr	r3, [pc, #24]	; (132a8 <_i2c_master_async_address_response+0xb4>)
   13290:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   13292:	e003      	b.n	1329c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   13294:	687b      	ldr	r3, [r7, #4]
   13296:	0018      	movs	r0, r3
   13298:	4b04      	ldr	r3, [pc, #16]	; (132ac <_i2c_master_async_address_response+0xb8>)
   1329a:	4798      	blx	r3
}
   1329c:	46c0      	nop			; (mov r8, r8)
   1329e:	46bd      	mov	sp, r7
   132a0:	b004      	add	sp, #16
   132a2:	bd80      	pop	{r7, pc}
   132a4:	00013065 	.word	0x00013065
   132a8:	00013179 	.word	0x00013179
   132ac:	00013089 	.word	0x00013089

000132b0 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   132b0:	b580      	push	{r7, lr}
   132b2:	b084      	sub	sp, #16
   132b4:	af00      	add	r7, sp, #0
   132b6:	60f8      	str	r0, [r7, #12]
   132b8:	60b9      	str	r1, [r7, #8]
   132ba:	1dfb      	adds	r3, r7, #7
   132bc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   132be:	1dfb      	adds	r3, r7, #7
   132c0:	781b      	ldrb	r3, [r3, #0]
   132c2:	68fa      	ldr	r2, [r7, #12]
   132c4:	3302      	adds	r3, #2
   132c6:	009b      	lsls	r3, r3, #2
   132c8:	18d3      	adds	r3, r2, r3
   132ca:	3304      	adds	r3, #4
   132cc:	68ba      	ldr	r2, [r7, #8]
   132ce:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   132d0:	68fb      	ldr	r3, [r7, #12]
   132d2:	7e1b      	ldrb	r3, [r3, #24]
   132d4:	b2db      	uxtb	r3, r3
   132d6:	b25a      	sxtb	r2, r3
   132d8:	1dfb      	adds	r3, r7, #7
   132da:	781b      	ldrb	r3, [r3, #0]
   132dc:	2101      	movs	r1, #1
   132de:	4099      	lsls	r1, r3
   132e0:	000b      	movs	r3, r1
   132e2:	b25b      	sxtb	r3, r3
   132e4:	4313      	orrs	r3, r2
   132e6:	b25b      	sxtb	r3, r3
   132e8:	b2da      	uxtb	r2, r3
   132ea:	68fb      	ldr	r3, [r7, #12]
   132ec:	761a      	strb	r2, [r3, #24]
}
   132ee:	46c0      	nop			; (mov r8, r8)
   132f0:	46bd      	mov	sp, r7
   132f2:	b004      	add	sp, #16
   132f4:	bd80      	pop	{r7, pc}
	...

000132f8 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   132f8:	b590      	push	{r4, r7, lr}
   132fa:	b087      	sub	sp, #28
   132fc:	af00      	add	r7, sp, #0
   132fe:	6078      	str	r0, [r7, #4]
   13300:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13302:	687b      	ldr	r3, [r7, #4]
   13304:	681b      	ldr	r3, [r3, #0]
   13306:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   13308:	683b      	ldr	r3, [r7, #0]
   1330a:	685a      	ldr	r2, [r3, #4]
   1330c:	687b      	ldr	r3, [r7, #4]
   1330e:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   13310:	683b      	ldr	r3, [r7, #0]
   13312:	885a      	ldrh	r2, [r3, #2]
   13314:	687b      	ldr	r3, [r7, #4]
   13316:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   13318:	687b      	ldr	r3, [r7, #4]
   1331a:	2224      	movs	r2, #36	; 0x24
   1331c:	2101      	movs	r1, #1
   1331e:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   13320:	687b      	ldr	r3, [r7, #4]
   13322:	2225      	movs	r2, #37	; 0x25
   13324:	2105      	movs	r1, #5
   13326:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13328:	693b      	ldr	r3, [r7, #16]
   1332a:	681b      	ldr	r3, [r3, #0]
   1332c:	011b      	lsls	r3, r3, #4
   1332e:	0fdb      	lsrs	r3, r3, #31
   13330:	b2db      	uxtb	r3, r3
   13332:	001a      	movs	r2, r3
   13334:	230f      	movs	r3, #15
   13336:	18fb      	adds	r3, r7, r3
   13338:	1e51      	subs	r1, r2, #1
   1333a:	418a      	sbcs	r2, r1
   1333c:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   1333e:	683b      	ldr	r3, [r7, #0]
   13340:	7a5b      	ldrb	r3, [r3, #9]
   13342:	2b00      	cmp	r3, #0
   13344:	d006      	beq.n	13354 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13346:	683b      	ldr	r3, [r7, #0]
   13348:	7a9a      	ldrb	r2, [r3, #10]
   1334a:	687b      	ldr	r3, [r7, #4]
   1334c:	0011      	movs	r1, r2
   1334e:	0018      	movs	r0, r3
   13350:	4b3b      	ldr	r3, [pc, #236]	; (13440 <_i2c_master_read_packet+0x148>)
   13352:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   13354:	230f      	movs	r3, #15
   13356:	18fb      	adds	r3, r7, r3
   13358:	781b      	ldrb	r3, [r3, #0]
   1335a:	2b00      	cmp	r3, #0
   1335c:	d00b      	beq.n	13376 <_i2c_master_read_packet+0x7e>
   1335e:	683b      	ldr	r3, [r7, #0]
   13360:	885b      	ldrh	r3, [r3, #2]
   13362:	2b01      	cmp	r3, #1
   13364:	d107      	bne.n	13376 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13366:	693b      	ldr	r3, [r7, #16]
   13368:	685b      	ldr	r3, [r3, #4]
   1336a:	2280      	movs	r2, #128	; 0x80
   1336c:	02d2      	lsls	r2, r2, #11
   1336e:	431a      	orrs	r2, r3
   13370:	693b      	ldr	r3, [r7, #16]
   13372:	605a      	str	r2, [r3, #4]
   13374:	e005      	b.n	13382 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13376:	693b      	ldr	r3, [r7, #16]
   13378:	685b      	ldr	r3, [r3, #4]
   1337a:	4a32      	ldr	r2, [pc, #200]	; (13444 <_i2c_master_read_packet+0x14c>)
   1337c:	401a      	ands	r2, r3
   1337e:	693b      	ldr	r3, [r7, #16]
   13380:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   13382:	683b      	ldr	r3, [r7, #0]
   13384:	7a1b      	ldrb	r3, [r3, #8]
   13386:	2b00      	cmp	r3, #0
   13388:	d045      	beq.n	13416 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   1338a:	683b      	ldr	r3, [r7, #0]
   1338c:	881b      	ldrh	r3, [r3, #0]
   1338e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13390:	683b      	ldr	r3, [r7, #0]
   13392:	7a5b      	ldrb	r3, [r3, #9]
   13394:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   13396:	4313      	orrs	r3, r2
   13398:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1339a:	2380      	movs	r3, #128	; 0x80
   1339c:	021b      	lsls	r3, r3, #8
   1339e:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   133a0:	693b      	ldr	r3, [r7, #16]
   133a2:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   133a4:	2317      	movs	r3, #23
   133a6:	18fc      	adds	r4, r7, r3
   133a8:	687b      	ldr	r3, [r7, #4]
   133aa:	0018      	movs	r0, r3
   133ac:	4b26      	ldr	r3, [pc, #152]	; (13448 <_i2c_master_read_packet+0x150>)
   133ae:	4798      	blx	r3
   133b0:	0003      	movs	r3, r0
   133b2:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   133b4:	693b      	ldr	r3, [r7, #16]
   133b6:	685b      	ldr	r3, [r3, #4]
   133b8:	4a22      	ldr	r2, [pc, #136]	; (13444 <_i2c_master_read_packet+0x14c>)
   133ba:	401a      	ands	r2, r3
   133bc:	693b      	ldr	r3, [r7, #16]
   133be:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   133c0:	2317      	movs	r3, #23
   133c2:	18fb      	adds	r3, r7, r3
   133c4:	781b      	ldrb	r3, [r3, #0]
   133c6:	2b00      	cmp	r3, #0
   133c8:	d107      	bne.n	133da <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   133ca:	2317      	movs	r3, #23
   133cc:	18fc      	adds	r4, r7, r3
   133ce:	687b      	ldr	r3, [r7, #4]
   133d0:	0018      	movs	r0, r3
   133d2:	4b1e      	ldr	r3, [pc, #120]	; (1344c <_i2c_master_read_packet+0x154>)
   133d4:	4798      	blx	r3
   133d6:	0003      	movs	r3, r0
   133d8:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   133da:	2317      	movs	r3, #23
   133dc:	18fb      	adds	r3, r7, r3
   133de:	781b      	ldrb	r3, [r3, #0]
   133e0:	2b00      	cmp	r3, #0
   133e2:	d114      	bne.n	1340e <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   133e4:	693b      	ldr	r3, [r7, #16]
   133e6:	2203      	movs	r2, #3
   133e8:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   133ea:	683b      	ldr	r3, [r7, #0]
   133ec:	881b      	ldrh	r3, [r3, #0]
   133ee:	0a1b      	lsrs	r3, r3, #8
   133f0:	b29b      	uxth	r3, r3
   133f2:	2278      	movs	r2, #120	; 0x78
   133f4:	4313      	orrs	r3, r2
   133f6:	b29b      	uxth	r3, r3
   133f8:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   133fa:	683b      	ldr	r3, [r7, #0]
   133fc:	7a5b      	ldrb	r3, [r3, #9]
   133fe:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13400:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13402:	2201      	movs	r2, #1
   13404:	4313      	orrs	r3, r2
   13406:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13408:	693b      	ldr	r3, [r7, #16]
   1340a:	625a      	str	r2, [r3, #36]	; 0x24
   1340c:	e012      	b.n	13434 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   1340e:	2317      	movs	r3, #23
   13410:	18fb      	adds	r3, r7, r3
   13412:	781b      	ldrb	r3, [r3, #0]
   13414:	e00f      	b.n	13436 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   13416:	693b      	ldr	r3, [r7, #16]
   13418:	2203      	movs	r2, #3
   1341a:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1341c:	683b      	ldr	r3, [r7, #0]
   1341e:	881b      	ldrh	r3, [r3, #0]
   13420:	005b      	lsls	r3, r3, #1
   13422:	2201      	movs	r2, #1
   13424:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13426:	683b      	ldr	r3, [r7, #0]
   13428:	7a5b      	ldrb	r3, [r3, #9]
   1342a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1342c:	4313      	orrs	r3, r2
   1342e:	001a      	movs	r2, r3
   13430:	693b      	ldr	r3, [r7, #16]
   13432:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13434:	2300      	movs	r3, #0
}
   13436:	0018      	movs	r0, r3
   13438:	46bd      	mov	sp, r7
   1343a:	b007      	add	sp, #28
   1343c:	bd90      	pop	{r4, r7, pc}
   1343e:	46c0      	nop			; (mov r8, r8)
   13440:	00017c7d 	.word	0x00017c7d
   13444:	fffbffff 	.word	0xfffbffff
   13448:	00017c1f 	.word	0x00017c1f
   1344c:	00017bc1 	.word	0x00017bc1

00013450 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13450:	b580      	push	{r7, lr}
   13452:	b082      	sub	sp, #8
   13454:	af00      	add	r7, sp, #0
   13456:	6078      	str	r0, [r7, #4]
   13458:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   1345a:	687b      	ldr	r3, [r7, #4]
   1345c:	8b9b      	ldrh	r3, [r3, #28]
   1345e:	b29b      	uxth	r3, r3
   13460:	2b00      	cmp	r3, #0
   13462:	d001      	beq.n	13468 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   13464:	2305      	movs	r3, #5
   13466:	e00c      	b.n	13482 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   13468:	687b      	ldr	r3, [r7, #4]
   1346a:	2201      	movs	r2, #1
   1346c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   1346e:	687b      	ldr	r3, [r7, #4]
   13470:	2201      	movs	r2, #1
   13472:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   13474:	683a      	ldr	r2, [r7, #0]
   13476:	687b      	ldr	r3, [r7, #4]
   13478:	0011      	movs	r1, r2
   1347a:	0018      	movs	r0, r3
   1347c:	4b03      	ldr	r3, [pc, #12]	; (1348c <i2c_master_read_packet_job+0x3c>)
   1347e:	4798      	blx	r3
   13480:	0003      	movs	r3, r0
}
   13482:	0018      	movs	r0, r3
   13484:	46bd      	mov	sp, r7
   13486:	b002      	add	sp, #8
   13488:	bd80      	pop	{r7, pc}
   1348a:	46c0      	nop			; (mov r8, r8)
   1348c:	000132f9 	.word	0x000132f9

00013490 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13490:	b580      	push	{r7, lr}
   13492:	b084      	sub	sp, #16
   13494:	af00      	add	r7, sp, #0
   13496:	6078      	str	r0, [r7, #4]
   13498:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1349a:	687b      	ldr	r3, [r7, #4]
   1349c:	681b      	ldr	r3, [r3, #0]
   1349e:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   134a0:	683b      	ldr	r3, [r7, #0]
   134a2:	7a5b      	ldrb	r3, [r3, #9]
   134a4:	2b00      	cmp	r3, #0
   134a6:	d006      	beq.n	134b6 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   134a8:	683b      	ldr	r3, [r7, #0]
   134aa:	7a9a      	ldrb	r2, [r3, #10]
   134ac:	687b      	ldr	r3, [r7, #4]
   134ae:	0011      	movs	r1, r2
   134b0:	0018      	movs	r0, r3
   134b2:	4b1e      	ldr	r3, [pc, #120]	; (1352c <_i2c_master_write_packet+0x9c>)
   134b4:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   134b6:	68fb      	ldr	r3, [r7, #12]
   134b8:	685b      	ldr	r3, [r3, #4]
   134ba:	4a1d      	ldr	r2, [pc, #116]	; (13530 <_i2c_master_write_packet+0xa0>)
   134bc:	401a      	ands	r2, r3
   134be:	68fb      	ldr	r3, [r7, #12]
   134c0:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   134c2:	683b      	ldr	r3, [r7, #0]
   134c4:	685a      	ldr	r2, [r3, #4]
   134c6:	687b      	ldr	r3, [r7, #4]
   134c8:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   134ca:	683b      	ldr	r3, [r7, #0]
   134cc:	885a      	ldrh	r2, [r3, #2]
   134ce:	687b      	ldr	r3, [r7, #4]
   134d0:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   134d2:	687b      	ldr	r3, [r7, #4]
   134d4:	2224      	movs	r2, #36	; 0x24
   134d6:	2100      	movs	r1, #0
   134d8:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   134da:	687b      	ldr	r3, [r7, #4]
   134dc:	2225      	movs	r2, #37	; 0x25
   134de:	2105      	movs	r1, #5
   134e0:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   134e2:	68fb      	ldr	r3, [r7, #12]
   134e4:	2203      	movs	r2, #3
   134e6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   134e8:	683b      	ldr	r3, [r7, #0]
   134ea:	7a1b      	ldrb	r3, [r3, #8]
   134ec:	2b00      	cmp	r3, #0
   134ee:	d00d      	beq.n	1350c <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134f0:	683b      	ldr	r3, [r7, #0]
   134f2:	881b      	ldrh	r3, [r3, #0]
   134f4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   134f6:	683b      	ldr	r3, [r7, #0]
   134f8:	7a5b      	ldrb	r3, [r3, #9]
   134fa:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134fc:	4313      	orrs	r3, r2
   134fe:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13500:	2380      	movs	r3, #128	; 0x80
   13502:	021b      	lsls	r3, r3, #8
   13504:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13506:	68fb      	ldr	r3, [r7, #12]
   13508:	625a      	str	r2, [r3, #36]	; 0x24
   1350a:	e009      	b.n	13520 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1350c:	683b      	ldr	r3, [r7, #0]
   1350e:	881b      	ldrh	r3, [r3, #0]
   13510:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13512:	683b      	ldr	r3, [r7, #0]
   13514:	7a5b      	ldrb	r3, [r3, #9]
   13516:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13518:	4313      	orrs	r3, r2
   1351a:	001a      	movs	r2, r3
   1351c:	68fb      	ldr	r3, [r7, #12]
   1351e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13520:	2300      	movs	r3, #0
}
   13522:	0018      	movs	r0, r3
   13524:	46bd      	mov	sp, r7
   13526:	b004      	add	sp, #16
   13528:	bd80      	pop	{r7, pc}
   1352a:	46c0      	nop			; (mov r8, r8)
   1352c:	00017c7d 	.word	0x00017c7d
   13530:	fffbffff 	.word	0xfffbffff

00013534 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13534:	b580      	push	{r7, lr}
   13536:	b082      	sub	sp, #8
   13538:	af00      	add	r7, sp, #0
   1353a:	6078      	str	r0, [r7, #4]
   1353c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   1353e:	687b      	ldr	r3, [r7, #4]
   13540:	8b9b      	ldrh	r3, [r3, #28]
   13542:	b29b      	uxth	r3, r3
   13544:	2b00      	cmp	r3, #0
   13546:	d001      	beq.n	1354c <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   13548:	2305      	movs	r3, #5
   1354a:	e00c      	b.n	13566 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   1354c:	687b      	ldr	r3, [r7, #4]
   1354e:	2201      	movs	r2, #1
   13550:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   13552:	687b      	ldr	r3, [r7, #4]
   13554:	2201      	movs	r2, #1
   13556:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   13558:	683a      	ldr	r2, [r7, #0]
   1355a:	687b      	ldr	r3, [r7, #4]
   1355c:	0011      	movs	r1, r2
   1355e:	0018      	movs	r0, r3
   13560:	4b03      	ldr	r3, [pc, #12]	; (13570 <i2c_master_write_packet_job+0x3c>)
   13562:	4798      	blx	r3
   13564:	0003      	movs	r3, r0
}
   13566:	0018      	movs	r0, r3
   13568:	46bd      	mov	sp, r7
   1356a:	b002      	add	sp, #8
   1356c:	bd80      	pop	{r7, pc}
   1356e:	46c0      	nop			; (mov r8, r8)
   13570:	00013491 	.word	0x00013491

00013574 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   13574:	b580      	push	{r7, lr}
   13576:	b086      	sub	sp, #24
   13578:	af00      	add	r7, sp, #0
   1357a:	0002      	movs	r2, r0
   1357c:	1dfb      	adds	r3, r7, #7
   1357e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   13580:	1dfb      	adds	r3, r7, #7
   13582:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   13584:	4b93      	ldr	r3, [pc, #588]	; (137d4 <_i2c_master_interrupt_handler+0x260>)
   13586:	0092      	lsls	r2, r2, #2
   13588:	58d3      	ldr	r3, [r2, r3]
   1358a:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1358c:	697b      	ldr	r3, [r7, #20]
   1358e:	681b      	ldr	r3, [r3, #0]
   13590:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13592:	693b      	ldr	r3, [r7, #16]
   13594:	681b      	ldr	r3, [r3, #0]
   13596:	011b      	lsls	r3, r3, #4
   13598:	0fdb      	lsrs	r3, r3, #31
   1359a:	b2db      	uxtb	r3, r3
   1359c:	001a      	movs	r2, r3
   1359e:	230f      	movs	r3, #15
   135a0:	18fb      	adds	r3, r7, r3
   135a2:	1e51      	subs	r1, r2, #1
   135a4:	418a      	sbcs	r2, r1
   135a6:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   135a8:	230e      	movs	r3, #14
   135aa:	18fb      	adds	r3, r7, r3
   135ac:	697a      	ldr	r2, [r7, #20]
   135ae:	7e52      	ldrb	r2, [r2, #25]
   135b0:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   135b2:	697b      	ldr	r3, [r7, #20]
   135b4:	7e1b      	ldrb	r3, [r3, #24]
   135b6:	b2da      	uxtb	r2, r3
   135b8:	230e      	movs	r3, #14
   135ba:	18fb      	adds	r3, r7, r3
   135bc:	210e      	movs	r1, #14
   135be:	1879      	adds	r1, r7, r1
   135c0:	7809      	ldrb	r1, [r1, #0]
   135c2:	400a      	ands	r2, r1
   135c4:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   135c6:	697b      	ldr	r3, [r7, #20]
   135c8:	8b5b      	ldrh	r3, [r3, #26]
   135ca:	b29b      	uxth	r3, r3
   135cc:	2b00      	cmp	r3, #0
   135ce:	d109      	bne.n	135e4 <_i2c_master_interrupt_handler+0x70>
   135d0:	697b      	ldr	r3, [r7, #20]
   135d2:	8b9b      	ldrh	r3, [r3, #28]
   135d4:	b29b      	uxth	r3, r3
   135d6:	2b00      	cmp	r3, #0
   135d8:	d004      	beq.n	135e4 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   135da:	697b      	ldr	r3, [r7, #20]
   135dc:	0018      	movs	r0, r3
   135de:	4b7e      	ldr	r3, [pc, #504]	; (137d8 <_i2c_master_interrupt_handler+0x264>)
   135e0:	4798      	blx	r3
   135e2:	e070      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   135e4:	697b      	ldr	r3, [r7, #20]
   135e6:	8b5b      	ldrh	r3, [r3, #26]
   135e8:	b29b      	uxth	r3, r3
   135ea:	2b00      	cmp	r3, #0
   135ec:	d039      	beq.n	13662 <_i2c_master_interrupt_handler+0xee>
   135ee:	697b      	ldr	r3, [r7, #20]
   135f0:	8b9b      	ldrh	r3, [r3, #28]
   135f2:	b29b      	uxth	r3, r3
   135f4:	2b00      	cmp	r3, #0
   135f6:	d134      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   135f8:	697b      	ldr	r3, [r7, #20]
   135fa:	2225      	movs	r2, #37	; 0x25
   135fc:	5c9b      	ldrb	r3, [r3, r2]
   135fe:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13600:	2b05      	cmp	r3, #5
   13602:	d12e      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   13604:	697b      	ldr	r3, [r7, #20]
   13606:	2224      	movs	r2, #36	; 0x24
   13608:	5c9b      	ldrb	r3, [r3, r2]
   1360a:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   1360c:	2b00      	cmp	r3, #0
   1360e:	d128      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13610:	693b      	ldr	r3, [r7, #16]
   13612:	2203      	movs	r2, #3
   13614:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   13616:	697b      	ldr	r3, [r7, #20]
   13618:	2200      	movs	r2, #0
   1361a:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   1361c:	697b      	ldr	r3, [r7, #20]
   1361e:	2225      	movs	r2, #37	; 0x25
   13620:	2100      	movs	r1, #0
   13622:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   13624:	697b      	ldr	r3, [r7, #20]
   13626:	7a9b      	ldrb	r3, [r3, #10]
   13628:	2b00      	cmp	r3, #0
   1362a:	d00b      	beq.n	13644 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1362c:	697b      	ldr	r3, [r7, #20]
   1362e:	0018      	movs	r0, r3
   13630:	4b6a      	ldr	r3, [pc, #424]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   13632:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13634:	693b      	ldr	r3, [r7, #16]
   13636:	685b      	ldr	r3, [r3, #4]
   13638:	22c0      	movs	r2, #192	; 0xc0
   1363a:	0292      	lsls	r2, r2, #10
   1363c:	431a      	orrs	r2, r3
   1363e:	693b      	ldr	r3, [r7, #16]
   13640:	605a      	str	r2, [r3, #4]
   13642:	e002      	b.n	1364a <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   13644:	693b      	ldr	r3, [r7, #16]
   13646:	2201      	movs	r2, #1
   13648:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   1364a:	230e      	movs	r3, #14
   1364c:	18fb      	adds	r3, r7, r3
   1364e:	781b      	ldrb	r3, [r3, #0]
   13650:	2201      	movs	r2, #1
   13652:	4013      	ands	r3, r2
   13654:	d037      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13656:	697b      	ldr	r3, [r7, #20]
   13658:	68db      	ldr	r3, [r3, #12]
   1365a:	697a      	ldr	r2, [r7, #20]
   1365c:	0010      	movs	r0, r2
   1365e:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13660:	e031      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   13662:	697b      	ldr	r3, [r7, #20]
   13664:	8b5b      	ldrh	r3, [r3, #26]
   13666:	b29b      	uxth	r3, r3
   13668:	2b00      	cmp	r3, #0
   1366a:	d02c      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
   1366c:	697b      	ldr	r3, [r7, #20]
   1366e:	8b9b      	ldrh	r3, [r3, #28]
   13670:	b29b      	uxth	r3, r3
   13672:	2b00      	cmp	r3, #0
   13674:	d027      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13676:	693b      	ldr	r3, [r7, #16]
   13678:	8b5b      	ldrh	r3, [r3, #26]
   1367a:	b29b      	uxth	r3, r3
   1367c:	001a      	movs	r2, r3
   1367e:	2320      	movs	r3, #32
   13680:	4013      	ands	r3, r2
   13682:	d111      	bne.n	136a8 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13684:	230f      	movs	r3, #15
   13686:	18fb      	adds	r3, r7, r3
   13688:	781b      	ldrb	r3, [r3, #0]
   1368a:	2201      	movs	r2, #1
   1368c:	4053      	eors	r3, r2
   1368e:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13690:	2b00      	cmp	r3, #0
   13692:	d104      	bne.n	1369e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13694:	697b      	ldr	r3, [r7, #20]
   13696:	8b9b      	ldrh	r3, [r3, #28]
   13698:	b29b      	uxth	r3, r3
   1369a:	2b01      	cmp	r3, #1
   1369c:	d004      	beq.n	136a8 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   1369e:	697b      	ldr	r3, [r7, #20]
   136a0:	2225      	movs	r2, #37	; 0x25
   136a2:	2141      	movs	r1, #65	; 0x41
   136a4:	5499      	strb	r1, [r3, r2]
   136a6:	e00e      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   136a8:	697b      	ldr	r3, [r7, #20]
   136aa:	2224      	movs	r2, #36	; 0x24
   136ac:	5c9b      	ldrb	r3, [r3, r2]
   136ae:	b2db      	uxtb	r3, r3
   136b0:	2b00      	cmp	r3, #0
   136b2:	d104      	bne.n	136be <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   136b4:	697b      	ldr	r3, [r7, #20]
   136b6:	0018      	movs	r0, r3
   136b8:	4b49      	ldr	r3, [pc, #292]	; (137e0 <_i2c_master_interrupt_handler+0x26c>)
   136ba:	4798      	blx	r3
   136bc:	e003      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   136be:	697b      	ldr	r3, [r7, #20]
   136c0:	0018      	movs	r0, r3
   136c2:	4b48      	ldr	r3, [pc, #288]	; (137e4 <_i2c_master_interrupt_handler+0x270>)
   136c4:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136c6:	697b      	ldr	r3, [r7, #20]
   136c8:	8b5b      	ldrh	r3, [r3, #26]
   136ca:	b29b      	uxth	r3, r3
   136cc:	2b00      	cmp	r3, #0
   136ce:	d047      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
   136d0:	697b      	ldr	r3, [r7, #20]
   136d2:	8b9b      	ldrh	r3, [r3, #28]
   136d4:	b29b      	uxth	r3, r3
   136d6:	2b00      	cmp	r3, #0
   136d8:	d142      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   136da:	697b      	ldr	r3, [r7, #20]
   136dc:	2225      	movs	r2, #37	; 0x25
   136de:	5c9b      	ldrb	r3, [r3, r2]
   136e0:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136e2:	2b05      	cmp	r3, #5
   136e4:	d13c      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   136e6:	697b      	ldr	r3, [r7, #20]
   136e8:	2224      	movs	r2, #36	; 0x24
   136ea:	5c9b      	ldrb	r3, [r3, r2]
   136ec:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   136ee:	2b01      	cmp	r3, #1
   136f0:	d136      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   136f2:	693b      	ldr	r3, [r7, #16]
   136f4:	7e1b      	ldrb	r3, [r3, #24]
   136f6:	b2db      	uxtb	r3, r3
   136f8:	001a      	movs	r2, r3
   136fa:	2302      	movs	r3, #2
   136fc:	4013      	ands	r3, r2
   136fe:	d002      	beq.n	13706 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   13700:	693b      	ldr	r3, [r7, #16]
   13702:	2202      	movs	r2, #2
   13704:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13706:	693b      	ldr	r3, [r7, #16]
   13708:	2203      	movs	r2, #3
   1370a:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   1370c:	697b      	ldr	r3, [r7, #20]
   1370e:	2200      	movs	r2, #0
   13710:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   13712:	697b      	ldr	r3, [r7, #20]
   13714:	2225      	movs	r2, #37	; 0x25
   13716:	2100      	movs	r1, #0
   13718:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   1371a:	230e      	movs	r3, #14
   1371c:	18fb      	adds	r3, r7, r3
   1371e:	781b      	ldrb	r3, [r3, #0]
   13720:	2202      	movs	r2, #2
   13722:	4013      	ands	r3, r2
   13724:	d00b      	beq.n	1373e <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   13726:	697b      	ldr	r3, [r7, #20]
   13728:	2224      	movs	r2, #36	; 0x24
   1372a:	5c9b      	ldrb	r3, [r3, r2]
   1372c:	b2db      	uxtb	r3, r3
   1372e:	2b01      	cmp	r3, #1
   13730:	d105      	bne.n	1373e <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   13732:	697b      	ldr	r3, [r7, #20]
   13734:	691b      	ldr	r3, [r3, #16]
   13736:	697a      	ldr	r2, [r7, #20]
   13738:	0010      	movs	r0, r2
   1373a:	4798      	blx	r3
   1373c:	e010      	b.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   1373e:	230e      	movs	r3, #14
   13740:	18fb      	adds	r3, r7, r3
   13742:	781b      	ldrb	r3, [r3, #0]
   13744:	2201      	movs	r2, #1
   13746:	4013      	ands	r3, r2
   13748:	d00a      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   1374a:	697b      	ldr	r3, [r7, #20]
   1374c:	2224      	movs	r2, #36	; 0x24
   1374e:	5c9b      	ldrb	r3, [r3, r2]
   13750:	b2db      	uxtb	r3, r3
   13752:	2b00      	cmp	r3, #0
   13754:	d104      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13756:	697b      	ldr	r3, [r7, #20]
   13758:	68db      	ldr	r3, [r3, #12]
   1375a:	697a      	ldr	r2, [r7, #20]
   1375c:	0010      	movs	r0, r2
   1375e:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   13760:	697b      	ldr	r3, [r7, #20]
   13762:	2225      	movs	r2, #37	; 0x25
   13764:	5c9b      	ldrb	r3, [r3, r2]
   13766:	b2db      	uxtb	r3, r3
   13768:	2b05      	cmp	r3, #5
   1376a:	d02e      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
   1376c:	697b      	ldr	r3, [r7, #20]
   1376e:	2225      	movs	r2, #37	; 0x25
   13770:	5c9b      	ldrb	r3, [r3, r2]
   13772:	b2db      	uxtb	r3, r3
   13774:	2b00      	cmp	r3, #0
   13776:	d028      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   13778:	693b      	ldr	r3, [r7, #16]
   1377a:	2203      	movs	r2, #3
   1377c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   1377e:	697b      	ldr	r3, [r7, #20]
   13780:	2200      	movs	r2, #0
   13782:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   13784:	697b      	ldr	r3, [r7, #20]
   13786:	2200      	movs	r2, #0
   13788:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1378a:	697b      	ldr	r3, [r7, #20]
   1378c:	2225      	movs	r2, #37	; 0x25
   1378e:	5c9b      	ldrb	r3, [r3, r2]
   13790:	b2db      	uxtb	r3, r3
   13792:	2b41      	cmp	r3, #65	; 0x41
   13794:	d00e      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   13796:	697b      	ldr	r3, [r7, #20]
   13798:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1379a:	2b00      	cmp	r3, #0
   1379c:	d00a      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   1379e:	697b      	ldr	r3, [r7, #20]
   137a0:	0018      	movs	r0, r3
   137a2:	4b0e      	ldr	r3, [pc, #56]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   137a4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   137a6:	693b      	ldr	r3, [r7, #16]
   137a8:	685b      	ldr	r3, [r3, #4]
   137aa:	22e0      	movs	r2, #224	; 0xe0
   137ac:	02d2      	lsls	r2, r2, #11
   137ae:	431a      	orrs	r2, r3
   137b0:	693b      	ldr	r3, [r7, #16]
   137b2:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   137b4:	230e      	movs	r3, #14
   137b6:	18fb      	adds	r3, r7, r3
   137b8:	781b      	ldrb	r3, [r3, #0]
   137ba:	2204      	movs	r2, #4
   137bc:	4013      	ands	r3, r2
   137be:	d004      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   137c0:	697b      	ldr	r3, [r7, #20]
   137c2:	695b      	ldr	r3, [r3, #20]
   137c4:	697a      	ldr	r2, [r7, #20]
   137c6:	0010      	movs	r0, r2
   137c8:	4798      	blx	r3
		}
	}
}
   137ca:	46c0      	nop			; (mov r8, r8)
   137cc:	46bd      	mov	sp, r7
   137ce:	b006      	add	sp, #24
   137d0:	bd80      	pop	{r7, pc}
   137d2:	46c0      	nop			; (mov r8, r8)
   137d4:	20005c04 	.word	0x20005c04
   137d8:	000131f5 	.word	0x000131f5
   137dc:	00013065 	.word	0x00013065
   137e0:	00013179 	.word	0x00013179
   137e4:	00013089 	.word	0x00013089

000137e8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   137e8:	b580      	push	{r7, lr}
   137ea:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   137ec:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   137f0:	4b02      	ldr	r3, [pc, #8]	; (137fc <NVIC_SystemReset+0x14>)
   137f2:	4a03      	ldr	r2, [pc, #12]	; (13800 <NVIC_SystemReset+0x18>)
   137f4:	60da      	str	r2, [r3, #12]
   137f6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   137fa:	e7fe      	b.n	137fa <NVIC_SystemReset+0x12>
   137fc:	e000ed00 	.word	0xe000ed00
   13800:	05fa0004 	.word	0x05fa0004

00013804 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   13804:	b580      	push	{r7, lr}
   13806:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   13808:	4b02      	ldr	r3, [pc, #8]	; (13814 <system_reset+0x10>)
   1380a:	4798      	blx	r3
}
   1380c:	46c0      	nop			; (mov r8, r8)
   1380e:	46bd      	mov	sp, r7
   13810:	bd80      	pop	{r7, pc}
   13812:	46c0      	nop			; (mov r8, r8)
   13814:	000137e9 	.word	0x000137e9

00013818 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   13818:	b580      	push	{r7, lr}
   1381a:	b086      	sub	sp, #24
   1381c:	af00      	add	r7, sp, #0
   1381e:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   13820:	4b98      	ldr	r3, [pc, #608]	; (13a84 <vCommandConsoleTask+0x26c>)
   13822:	0018      	movs	r0, r3
   13824:	4b98      	ldr	r3, [pc, #608]	; (13a88 <vCommandConsoleTask+0x270>)
   13826:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   13828:	4b98      	ldr	r3, [pc, #608]	; (13a8c <vCommandConsoleTask+0x274>)
   1382a:	0018      	movs	r0, r3
   1382c:	4b96      	ldr	r3, [pc, #600]	; (13a88 <vCommandConsoleTask+0x270>)
   1382e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   13830:	4b97      	ldr	r3, [pc, #604]	; (13a90 <vCommandConsoleTask+0x278>)
   13832:	0018      	movs	r0, r3
   13834:	4b94      	ldr	r3, [pc, #592]	; (13a88 <vCommandConsoleTask+0x270>)
   13836:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   13838:	4b96      	ldr	r3, [pc, #600]	; (13a94 <vCommandConsoleTask+0x27c>)
   1383a:	0018      	movs	r0, r3
   1383c:	4b92      	ldr	r3, [pc, #584]	; (13a88 <vCommandConsoleTask+0x270>)
   1383e:	4798      	blx	r3
    //FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
    //FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
    //FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
    //FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   13840:	4b95      	ldr	r3, [pc, #596]	; (13a98 <vCommandConsoleTask+0x280>)
   13842:	0018      	movs	r0, r3
   13844:	4b90      	ldr	r3, [pc, #576]	; (13a88 <vCommandConsoleTask+0x270>)
   13846:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xGpsGetCommand); //added by Derek
   13848:	4b94      	ldr	r3, [pc, #592]	; (13a9c <vCommandConsoleTask+0x284>)
   1384a:	0018      	movs	r0, r3
   1384c:	4b8e      	ldr	r3, [pc, #568]	; (13a88 <vCommandConsoleTask+0x270>)
   1384e:	4798      	blx	r3
	
    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   13850:	2317      	movs	r3, #23
   13852:	18fb      	adds	r3, r7, r3
   13854:	2200      	movs	r2, #0
   13856:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   13858:	4b91      	ldr	r3, [pc, #580]	; (13aa0 <vCommandConsoleTask+0x288>)
   1385a:	0018      	movs	r0, r3
   1385c:	4b91      	ldr	r3, [pc, #580]	; (13aa4 <vCommandConsoleTask+0x28c>)
   1385e:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   13860:	2203      	movs	r2, #3
   13862:	2100      	movs	r1, #0
   13864:	2001      	movs	r0, #1
   13866:	4b90      	ldr	r3, [pc, #576]	; (13aa8 <vCommandConsoleTask+0x290>)
   13868:	4798      	blx	r3
   1386a:	0002      	movs	r2, r0
   1386c:	4b8f      	ldr	r3, [pc, #572]	; (13aac <vCommandConsoleTask+0x294>)
   1386e:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   13870:	4b8e      	ldr	r3, [pc, #568]	; (13aac <vCommandConsoleTask+0x294>)
   13872:	681b      	ldr	r3, [r3, #0]
   13874:	2b00      	cmp	r3, #0
   13876:	d107      	bne.n	13888 <vCommandConsoleTask+0x70>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   13878:	4b8d      	ldr	r3, [pc, #564]	; (13ab0 <vCommandConsoleTask+0x298>)
   1387a:	0019      	movs	r1, r3
   1387c:	2003      	movs	r0, #3
   1387e:	4b8d      	ldr	r3, [pc, #564]	; (13ab4 <vCommandConsoleTask+0x29c>)
   13880:	4798      	blx	r3
        vTaskSuspend(NULL);
   13882:	2000      	movs	r0, #0
   13884:	4b8c      	ldr	r3, [pc, #560]	; (13ab8 <vCommandConsoleTask+0x2a0>)
   13886:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   13888:	230c      	movs	r3, #12
   1388a:	18fb      	adds	r3, r7, r3
   1388c:	0018      	movs	r0, r3
   1388e:	4b8b      	ldr	r3, [pc, #556]	; (13abc <vCommandConsoleTask+0x2a4>)
   13890:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   13892:	230c      	movs	r3, #12
   13894:	18fb      	adds	r3, r7, r3
   13896:	781b      	ldrb	r3, [r3, #0]
   13898:	2b0a      	cmp	r3, #10
   1389a:	d004      	beq.n	138a6 <vCommandConsoleTask+0x8e>
   1389c:	230c      	movs	r3, #12
   1389e:	18fb      	adds	r3, r7, r3
   138a0:	781b      	ldrb	r3, [r3, #0]
   138a2:	2b0d      	cmp	r3, #13
   138a4:	d137      	bne.n	13916 <vCommandConsoleTask+0xfe>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   138a6:	4b86      	ldr	r3, [pc, #536]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   138a8:	0018      	movs	r0, r3
   138aa:	4b7e      	ldr	r3, [pc, #504]	; (13aa4 <vCommandConsoleTask+0x28c>)
   138ac:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   138ae:	4b85      	ldr	r3, [pc, #532]	; (13ac4 <vCommandConsoleTask+0x2ac>)
   138b0:	2200      	movs	r2, #0
   138b2:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   138b4:	4b84      	ldr	r3, [pc, #528]	; (13ac8 <vCommandConsoleTask+0x2b0>)
   138b6:	2200      	movs	r2, #0
   138b8:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   138ba:	4984      	ldr	r1, [pc, #528]	; (13acc <vCommandConsoleTask+0x2b4>)
   138bc:	4b84      	ldr	r3, [pc, #528]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   138be:	2231      	movs	r2, #49	; 0x31
   138c0:	0018      	movs	r0, r3
   138c2:	4b84      	ldr	r3, [pc, #528]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   138c4:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   138c6:	4b82      	ldr	r3, [pc, #520]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   138c8:	2231      	movs	r2, #49	; 0x31
   138ca:	2100      	movs	r1, #0
   138cc:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   138ce:	4982      	ldr	r1, [pc, #520]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   138d0:	4b7e      	ldr	r3, [pc, #504]	; (13acc <vCommandConsoleTask+0x2b4>)
   138d2:	2264      	movs	r2, #100	; 0x64
   138d4:	0018      	movs	r0, r3
   138d6:	4b81      	ldr	r3, [pc, #516]	; (13adc <vCommandConsoleTask+0x2c4>)
   138d8:	4798      	blx	r3
   138da:	0003      	movs	r3, r0
   138dc:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   138de:	4b7e      	ldr	r3, [pc, #504]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   138e0:	2263      	movs	r2, #99	; 0x63
   138e2:	2100      	movs	r1, #0
   138e4:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   138e6:	4b7c      	ldr	r3, [pc, #496]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   138e8:	0018      	movs	r0, r3
   138ea:	4b6e      	ldr	r3, [pc, #440]	; (13aa4 <vCommandConsoleTask+0x28c>)
   138ec:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   138ee:	693b      	ldr	r3, [r7, #16]
   138f0:	2b00      	cmp	r3, #0
   138f2:	d1ec      	bne.n	138ce <vCommandConsoleTask+0xb6>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   138f4:	2317      	movs	r3, #23
   138f6:	18fb      	adds	r3, r7, r3
   138f8:	2200      	movs	r2, #0
   138fa:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   138fc:	4b73      	ldr	r3, [pc, #460]	; (13acc <vCommandConsoleTask+0x2b4>)
   138fe:	2232      	movs	r2, #50	; 0x32
   13900:	2100      	movs	r1, #0
   13902:	0018      	movs	r0, r3
   13904:	4b76      	ldr	r3, [pc, #472]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13906:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   13908:	4b73      	ldr	r3, [pc, #460]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   1390a:	2264      	movs	r2, #100	; 0x64
   1390c:	2100      	movs	r1, #0
   1390e:	0018      	movs	r0, r3
   13910:	4b73      	ldr	r3, [pc, #460]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13912:	4798      	blx	r3
   13914:	e0b5      	b.n	13a82 <vCommandConsoleTask+0x26a>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   13916:	4b6b      	ldr	r3, [pc, #428]	; (13ac4 <vCommandConsoleTask+0x2ac>)
   13918:	781b      	ldrb	r3, [r3, #0]
   1391a:	2b00      	cmp	r3, #0
   1391c:	d059      	beq.n	139d2 <vCommandConsoleTask+0x1ba>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   1391e:	4b6a      	ldr	r3, [pc, #424]	; (13ac8 <vCommandConsoleTask+0x2b0>)
   13920:	781b      	ldrb	r3, [r3, #0]
   13922:	2b03      	cmp	r3, #3
   13924:	d80c      	bhi.n	13940 <vCommandConsoleTask+0x128>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   13926:	4b68      	ldr	r3, [pc, #416]	; (13ac8 <vCommandConsoleTask+0x2b0>)
   13928:	781b      	ldrb	r3, [r3, #0]
   1392a:	1c5a      	adds	r2, r3, #1
   1392c:	b2d1      	uxtb	r1, r2
   1392e:	4a66      	ldr	r2, [pc, #408]	; (13ac8 <vCommandConsoleTask+0x2b0>)
   13930:	7011      	strb	r1, [r2, #0]
   13932:	001a      	movs	r2, r3
   13934:	230c      	movs	r3, #12
   13936:	18fb      	adds	r3, r7, r3
   13938:	7819      	ldrb	r1, [r3, #0]
   1393a:	4b6a      	ldr	r3, [pc, #424]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   1393c:	5499      	strb	r1, [r3, r2]
   1393e:	e005      	b.n	1394c <vCommandConsoleTask+0x134>
                } else {
                    isEscapeCode = false;
   13940:	4b60      	ldr	r3, [pc, #384]	; (13ac4 <vCommandConsoleTask+0x2ac>)
   13942:	2200      	movs	r2, #0
   13944:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   13946:	4b60      	ldr	r3, [pc, #384]	; (13ac8 <vCommandConsoleTask+0x2b0>)
   13948:	2200      	movs	r2, #0
   1394a:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   1394c:	4b5e      	ldr	r3, [pc, #376]	; (13ac8 <vCommandConsoleTask+0x2b0>)
   1394e:	781b      	ldrb	r3, [r3, #0]
   13950:	2b01      	cmp	r3, #1
   13952:	d999      	bls.n	13888 <vCommandConsoleTask+0x70>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   13954:	4a64      	ldr	r2, [pc, #400]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   13956:	4b63      	ldr	r3, [pc, #396]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13958:	0011      	movs	r1, r2
   1395a:	0018      	movs	r0, r3
   1395c:	4b63      	ldr	r3, [pc, #396]	; (13aec <vCommandConsoleTask+0x2d4>)
   1395e:	4798      	blx	r3
   13960:	1e03      	subs	r3, r0, #0
   13962:	d02f      	beq.n	139c4 <vCommandConsoleTask+0x1ac>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   13964:	4962      	ldr	r1, [pc, #392]	; (13af0 <vCommandConsoleTask+0x2d8>)
   13966:	4b59      	ldr	r3, [pc, #356]	; (13acc <vCommandConsoleTask+0x2b4>)
   13968:	221b      	movs	r2, #27
   1396a:	0018      	movs	r0, r3
   1396c:	4b61      	ldr	r3, [pc, #388]	; (13af4 <vCommandConsoleTask+0x2dc>)
   1396e:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   13970:	4b56      	ldr	r3, [pc, #344]	; (13acc <vCommandConsoleTask+0x2b4>)
   13972:	0018      	movs	r0, r3
   13974:	4b4b      	ldr	r3, [pc, #300]	; (13aa4 <vCommandConsoleTask+0x28c>)
   13976:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   13978:	2317      	movs	r3, #23
   1397a:	18fb      	adds	r3, r7, r3
   1397c:	2200      	movs	r2, #0
   1397e:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   13980:	4b52      	ldr	r3, [pc, #328]	; (13acc <vCommandConsoleTask+0x2b4>)
   13982:	2232      	movs	r2, #50	; 0x32
   13984:	2100      	movs	r1, #0
   13986:	0018      	movs	r0, r3
   13988:	4b55      	ldr	r3, [pc, #340]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   1398a:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   1398c:	4950      	ldr	r1, [pc, #320]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   1398e:	4b4f      	ldr	r3, [pc, #316]	; (13acc <vCommandConsoleTask+0x2b4>)
   13990:	2231      	movs	r2, #49	; 0x31
   13992:	0018      	movs	r0, r3
   13994:	4b4f      	ldr	r3, [pc, #316]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   13996:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   13998:	4b4c      	ldr	r3, [pc, #304]	; (13acc <vCommandConsoleTask+0x2b4>)
   1399a:	0018      	movs	r0, r3
   1399c:	4b56      	ldr	r3, [pc, #344]	; (13af8 <vCommandConsoleTask+0x2e0>)
   1399e:	4798      	blx	r3
   139a0:	0003      	movs	r3, r0
   139a2:	2b30      	cmp	r3, #48	; 0x30
   139a4:	d806      	bhi.n	139b4 <vCommandConsoleTask+0x19c>
   139a6:	4b4a      	ldr	r3, [pc, #296]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   139a8:	0018      	movs	r0, r3
   139aa:	4b53      	ldr	r3, [pc, #332]	; (13af8 <vCommandConsoleTask+0x2e0>)
   139ac:	4798      	blx	r3
   139ae:	0003      	movs	r3, r0
   139b0:	b2da      	uxtb	r2, r3
   139b2:	e000      	b.n	139b6 <vCommandConsoleTask+0x19e>
   139b4:	2231      	movs	r2, #49	; 0x31
   139b6:	2317      	movs	r3, #23
   139b8:	18fb      	adds	r3, r7, r3
   139ba:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   139bc:	4b43      	ldr	r3, [pc, #268]	; (13acc <vCommandConsoleTask+0x2b4>)
   139be:	0018      	movs	r0, r3
   139c0:	4b38      	ldr	r3, [pc, #224]	; (13aa4 <vCommandConsoleTask+0x28c>)
   139c2:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   139c4:	4b3f      	ldr	r3, [pc, #252]	; (13ac4 <vCommandConsoleTask+0x2ac>)
   139c6:	2200      	movs	r2, #0
   139c8:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   139ca:	4b3f      	ldr	r3, [pc, #252]	; (13ac8 <vCommandConsoleTask+0x2b0>)
   139cc:	2200      	movs	r2, #0
   139ce:	701a      	strb	r2, [r3, #0]
   139d0:	e75a      	b.n	13888 <vCommandConsoleTask+0x70>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   139d2:	230c      	movs	r3, #12
   139d4:	18fb      	adds	r3, r7, r3
   139d6:	781b      	ldrb	r3, [r3, #0]
   139d8:	2b0d      	cmp	r3, #13
   139da:	d100      	bne.n	139de <vCommandConsoleTask+0x1c6>
   139dc:	e754      	b.n	13888 <vCommandConsoleTask+0x70>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   139de:	230c      	movs	r3, #12
   139e0:	18fb      	adds	r3, r7, r3
   139e2:	781b      	ldrb	r3, [r3, #0]
   139e4:	2b08      	cmp	r3, #8
   139e6:	d004      	beq.n	139f2 <vCommandConsoleTask+0x1da>
   139e8:	230c      	movs	r3, #12
   139ea:	18fb      	adds	r3, r7, r3
   139ec:	781b      	ldrb	r3, [r3, #0]
   139ee:	2b7f      	cmp	r3, #127	; 0x7f
   139f0:	d11c      	bne.n	13a2c <vCommandConsoleTask+0x214>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   139f2:	2308      	movs	r3, #8
   139f4:	18fb      	adds	r3, r7, r3
   139f6:	4a41      	ldr	r2, [pc, #260]	; (13afc <vCommandConsoleTask+0x2e4>)
   139f8:	6812      	ldr	r2, [r2, #0]
   139fa:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   139fc:	2308      	movs	r3, #8
   139fe:	18fb      	adds	r3, r7, r3
   13a00:	0018      	movs	r0, r3
   13a02:	4b28      	ldr	r3, [pc, #160]	; (13aa4 <vCommandConsoleTask+0x28c>)
   13a04:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   13a06:	2317      	movs	r3, #23
   13a08:	18fb      	adds	r3, r7, r3
   13a0a:	781b      	ldrb	r3, [r3, #0]
   13a0c:	2b00      	cmp	r3, #0
   13a0e:	d037      	beq.n	13a80 <vCommandConsoleTask+0x268>
                    cInputIndex--;
   13a10:	2317      	movs	r3, #23
   13a12:	18fb      	adds	r3, r7, r3
   13a14:	781a      	ldrb	r2, [r3, #0]
   13a16:	2317      	movs	r3, #23
   13a18:	18fb      	adds	r3, r7, r3
   13a1a:	3a01      	subs	r2, #1
   13a1c:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   13a1e:	2317      	movs	r3, #23
   13a20:	18fb      	adds	r3, r7, r3
   13a22:	781b      	ldrb	r3, [r3, #0]
   13a24:	4a29      	ldr	r2, [pc, #164]	; (13acc <vCommandConsoleTask+0x2b4>)
   13a26:	2100      	movs	r1, #0
   13a28:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a2a:	e029      	b.n	13a80 <vCommandConsoleTask+0x268>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   13a2c:	230c      	movs	r3, #12
   13a2e:	18fb      	adds	r3, r7, r3
   13a30:	781b      	ldrb	r3, [r3, #0]
   13a32:	2b1b      	cmp	r3, #27
   13a34:	d106      	bne.n	13a44 <vCommandConsoleTask+0x22c>
                isEscapeCode = true;  // Next characters will be code arguments
   13a36:	4b23      	ldr	r3, [pc, #140]	; (13ac4 <vCommandConsoleTask+0x2ac>)
   13a38:	2201      	movs	r2, #1
   13a3a:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   13a3c:	4b22      	ldr	r3, [pc, #136]	; (13ac8 <vCommandConsoleTask+0x2b0>)
   13a3e:	2200      	movs	r2, #0
   13a40:	701a      	strb	r2, [r3, #0]
   13a42:	e721      	b.n	13888 <vCommandConsoleTask+0x70>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   13a44:	2317      	movs	r3, #23
   13a46:	18fb      	adds	r3, r7, r3
   13a48:	781b      	ldrb	r3, [r3, #0]
   13a4a:	2b31      	cmp	r3, #49	; 0x31
   13a4c:	d80e      	bhi.n	13a6c <vCommandConsoleTask+0x254>
                    pcInputString[cInputIndex] = cRxedChar[0];
   13a4e:	2317      	movs	r3, #23
   13a50:	18fb      	adds	r3, r7, r3
   13a52:	781b      	ldrb	r3, [r3, #0]
   13a54:	220c      	movs	r2, #12
   13a56:	18ba      	adds	r2, r7, r2
   13a58:	7811      	ldrb	r1, [r2, #0]
   13a5a:	4a1c      	ldr	r2, [pc, #112]	; (13acc <vCommandConsoleTask+0x2b4>)
   13a5c:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   13a5e:	2317      	movs	r3, #23
   13a60:	18fb      	adds	r3, r7, r3
   13a62:	781a      	ldrb	r2, [r3, #0]
   13a64:	2317      	movs	r3, #23
   13a66:	18fb      	adds	r3, r7, r3
   13a68:	3201      	adds	r2, #1
   13a6a:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   13a6c:	230c      	movs	r3, #12
   13a6e:	18fb      	adds	r3, r7, r3
   13a70:	2200      	movs	r2, #0
   13a72:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   13a74:	230c      	movs	r3, #12
   13a76:	18fb      	adds	r3, r7, r3
   13a78:	0018      	movs	r0, r3
   13a7a:	4b0a      	ldr	r3, [pc, #40]	; (13aa4 <vCommandConsoleTask+0x28c>)
   13a7c:	4798      	blx	r3
   13a7e:	e703      	b.n	13888 <vCommandConsoleTask+0x70>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a80:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   13a82:	e701      	b.n	13888 <vCommandConsoleTask+0x70>
   13a84:	000361fc 	.word	0x000361fc
   13a88:	00017dc5 	.word	0x00017dc5
   13a8c:	000361ec 	.word	0x000361ec
   13a90:	0003623c 	.word	0x0003623c
   13a94:	0003620c 	.word	0x0003620c
   13a98:	0003621c 	.word	0x0003621c
   13a9c:	0003622c 	.word	0x0003622c
   13aa0:	00035ef4 	.word	0x00035ef4
   13aa4:	0001dce5 	.word	0x0001dce5
   13aa8:	0001a385 	.word	0x0001a385
   13aac:	200047d0 	.word	0x200047d0
   13ab0:	00036058 	.word	0x00036058
   13ab4:	0001ddd1 	.word	0x0001ddd1
   13ab8:	0001c171 	.word	0x0001c171
   13abc:	00013b01 	.word	0x00013b01
   13ac0:	00036078 	.word	0x00036078
   13ac4:	20000514 	.word	0x20000514
   13ac8:	20000515 	.word	0x20000515
   13acc:	2000054c 	.word	0x2000054c
   13ad0:	20000518 	.word	0x20000518
   13ad4:	00034c6b 	.word	0x00034c6b
   13ad8:	20000580 	.word	0x20000580
   13adc:	00017e35 	.word	0x00017e35
   13ae0:	00034883 	.word	0x00034883
   13ae4:	200005e4 	.word	0x200005e4
   13ae8:	0003607c 	.word	0x0003607c
   13aec:	00034b85 	.word	0x00034b85
   13af0:	00036080 	.word	0x00036080
   13af4:	00034b41 	.word	0x00034b41
   13af8:	00034c3b 	.word	0x00034c3b
   13afc:	00036088 	.word	0x00036088

00013b00 <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   13b00:	b580      	push	{r7, lr}
   13b02:	b084      	sub	sp, #16
   13b04:	af00      	add	r7, sp, #0
   13b06:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b08:	687b      	ldr	r3, [r7, #4]
   13b0a:	0018      	movs	r0, r3
   13b0c:	4b0c      	ldr	r3, [pc, #48]	; (13b40 <FreeRTOS_read+0x40>)
   13b0e:	4798      	blx	r3
   13b10:	0003      	movs	r3, r0
   13b12:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   13b14:	e00d      	b.n	13b32 <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   13b16:	4b0b      	ldr	r3, [pc, #44]	; (13b44 <FreeRTOS_read+0x44>)
   13b18:	681a      	ldr	r2, [r3, #0]
   13b1a:	2301      	movs	r3, #1
   13b1c:	425b      	negs	r3, r3
   13b1e:	0019      	movs	r1, r3
   13b20:	0010      	movs	r0, r2
   13b22:	4b09      	ldr	r3, [pc, #36]	; (13b48 <FreeRTOS_read+0x48>)
   13b24:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b26:	687b      	ldr	r3, [r7, #4]
   13b28:	0018      	movs	r0, r3
   13b2a:	4b05      	ldr	r3, [pc, #20]	; (13b40 <FreeRTOS_read+0x40>)
   13b2c:	4798      	blx	r3
   13b2e:	0003      	movs	r3, r0
   13b30:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   13b32:	68fb      	ldr	r3, [r7, #12]
   13b34:	3301      	adds	r3, #1
   13b36:	d0ee      	beq.n	13b16 <FreeRTOS_read+0x16>
    }
}
   13b38:	46c0      	nop			; (mov r8, r8)
   13b3a:	46bd      	mov	sp, r7
   13b3c:	b004      	add	sp, #16
   13b3e:	bd80      	pop	{r7, pc}
   13b40:	0001dd81 	.word	0x0001dd81
   13b44:	200047d0 	.word	0x200047d0
   13b48:	0001b33d 	.word	0x0001b33d

00013b4c <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   13b4c:	b580      	push	{r7, lr}
   13b4e:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   13b50:	4b0a      	ldr	r3, [pc, #40]	; (13b7c <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b52:	2200      	movs	r2, #0
   13b54:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   13b56:	4b0a      	ldr	r3, [pc, #40]	; (13b80 <CliCharReadySemaphoreGiveFromISR+0x34>)
   13b58:	681b      	ldr	r3, [r3, #0]
   13b5a:	4a08      	ldr	r2, [pc, #32]	; (13b7c <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b5c:	0011      	movs	r1, r2
   13b5e:	0018      	movs	r0, r3
   13b60:	4b08      	ldr	r3, [pc, #32]	; (13b84 <CliCharReadySemaphoreGiveFromISR+0x38>)
   13b62:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13b64:	4b05      	ldr	r3, [pc, #20]	; (13b7c <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b66:	681b      	ldr	r3, [r3, #0]
   13b68:	2b00      	cmp	r3, #0
   13b6a:	d003      	beq.n	13b74 <CliCharReadySemaphoreGiveFromISR+0x28>
   13b6c:	4b06      	ldr	r3, [pc, #24]	; (13b88 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   13b6e:	2280      	movs	r2, #128	; 0x80
   13b70:	0552      	lsls	r2, r2, #21
   13b72:	601a      	str	r2, [r3, #0]
}
   13b74:	46c0      	nop			; (mov r8, r8)
   13b76:	46bd      	mov	sp, r7
   13b78:	bd80      	pop	{r7, pc}
   13b7a:	46c0      	nop			; (mov r8, r8)
   13b7c:	200005e8 	.word	0x200005e8
   13b80:	200047d0 	.word	0x200047d0
   13b84:	0001acb5 	.word	0x0001acb5
   13b88:	e000ed04 	.word	0xe000ed04

00013b8c <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13b8c:	b5b0      	push	{r4, r5, r7, lr}
   13b8e:	b08a      	sub	sp, #40	; 0x28
   13b90:	af02      	add	r7, sp, #8
   13b92:	60f8      	str	r0, [r7, #12]
   13b94:	60b9      	str	r1, [r7, #8]
   13b96:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   13b98:	4b49      	ldr	r3, [pc, #292]	; (13cc0 <CLI_GetImuData+0x134>)
   13b9a:	4798      	blx	r3
   13b9c:	0003      	movs	r3, r0
   13b9e:	61fb      	str	r3, [r7, #28]
	struct ImuDataPacket imuPacket;

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   13ba0:	231b      	movs	r3, #27
   13ba2:	18fa      	adds	r2, r7, r3
   13ba4:	69fb      	ldr	r3, [r7, #28]
   13ba6:	0011      	movs	r1, r2
   13ba8:	0018      	movs	r0, r3
   13baa:	4b46      	ldr	r3, [pc, #280]	; (13cc4 <CLI_GetImuData+0x138>)
   13bac:	4798      	blx	r3

    if (reg) {
   13bae:	231b      	movs	r3, #27
   13bb0:	18fb      	adds	r3, r7, r3
   13bb2:	781b      	ldrb	r3, [r3, #0]
   13bb4:	2b00      	cmp	r3, #0
   13bb6:	d064      	beq.n	13c82 <CLI_GetImuData+0xf6>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   13bb8:	4b43      	ldr	r3, [pc, #268]	; (13cc8 <CLI_GetImuData+0x13c>)
   13bba:	2206      	movs	r2, #6
   13bbc:	2100      	movs	r1, #0
   13bbe:	0018      	movs	r0, r3
   13bc0:	4b42      	ldr	r3, [pc, #264]	; (13ccc <CLI_GetImuData+0x140>)
   13bc2:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   13bc4:	4a40      	ldr	r2, [pc, #256]	; (13cc8 <CLI_GetImuData+0x13c>)
   13bc6:	69fb      	ldr	r3, [r7, #28]
   13bc8:	0011      	movs	r1, r2
   13bca:	0018      	movs	r0, r3
   13bcc:	4b40      	ldr	r3, [pc, #256]	; (13cd0 <CLI_GetImuData+0x144>)
   13bce:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   13bd0:	4b3d      	ldr	r3, [pc, #244]	; (13cc8 <CLI_GetImuData+0x13c>)
   13bd2:	2200      	movs	r2, #0
   13bd4:	5e9b      	ldrsh	r3, [r3, r2]
   13bd6:	0018      	movs	r0, r3
   13bd8:	4b3e      	ldr	r3, [pc, #248]	; (13cd4 <CLI_GetImuData+0x148>)
   13bda:	4798      	blx	r3
   13bdc:	1c02      	adds	r2, r0, #0
   13bde:	4b3e      	ldr	r3, [pc, #248]	; (13cd8 <CLI_GetImuData+0x14c>)
   13be0:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   13be2:	4b39      	ldr	r3, [pc, #228]	; (13cc8 <CLI_GetImuData+0x13c>)
   13be4:	2202      	movs	r2, #2
   13be6:	5e9b      	ldrsh	r3, [r3, r2]
   13be8:	0018      	movs	r0, r3
   13bea:	4b3a      	ldr	r3, [pc, #232]	; (13cd4 <CLI_GetImuData+0x148>)
   13bec:	4798      	blx	r3
   13bee:	1c02      	adds	r2, r0, #0
   13bf0:	4b39      	ldr	r3, [pc, #228]	; (13cd8 <CLI_GetImuData+0x14c>)
   13bf2:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   13bf4:	4b34      	ldr	r3, [pc, #208]	; (13cc8 <CLI_GetImuData+0x13c>)
   13bf6:	2204      	movs	r2, #4
   13bf8:	5e9b      	ldrsh	r3, [r3, r2]
   13bfa:	0018      	movs	r0, r3
   13bfc:	4b35      	ldr	r3, [pc, #212]	; (13cd4 <CLI_GetImuData+0x148>)
   13bfe:	4798      	blx	r3
   13c00:	1c02      	adds	r2, r0, #0
   13c02:	4b35      	ldr	r3, [pc, #212]	; (13cd8 <CLI_GetImuData+0x14c>)
   13c04:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   13c06:	4b34      	ldr	r3, [pc, #208]	; (13cd8 <CLI_GetImuData+0x14c>)
   13c08:	681a      	ldr	r2, [r3, #0]
   13c0a:	4b34      	ldr	r3, [pc, #208]	; (13cdc <CLI_GetImuData+0x150>)
   13c0c:	1c10      	adds	r0, r2, #0
   13c0e:	4798      	blx	r3
   13c10:	0005      	movs	r5, r0
   13c12:	4b31      	ldr	r3, [pc, #196]	; (13cd8 <CLI_GetImuData+0x14c>)
   13c14:	685a      	ldr	r2, [r3, #4]
   13c16:	4b31      	ldr	r3, [pc, #196]	; (13cdc <CLI_GetImuData+0x150>)
   13c18:	1c10      	adds	r0, r2, #0
   13c1a:	4798      	blx	r3
   13c1c:	0004      	movs	r4, r0
   13c1e:	4b2e      	ldr	r3, [pc, #184]	; (13cd8 <CLI_GetImuData+0x14c>)
   13c20:	689a      	ldr	r2, [r3, #8]
   13c22:	4b2e      	ldr	r3, [pc, #184]	; (13cdc <CLI_GetImuData+0x150>)
   13c24:	1c10      	adds	r0, r2, #0
   13c26:	4798      	blx	r3
   13c28:	0003      	movs	r3, r0
   13c2a:	4a2d      	ldr	r2, [pc, #180]	; (13ce0 <CLI_GetImuData+0x154>)
   13c2c:	68b9      	ldr	r1, [r7, #8]
   13c2e:	68f8      	ldr	r0, [r7, #12]
   13c30:	9301      	str	r3, [sp, #4]
   13c32:	9400      	str	r4, [sp, #0]
   13c34:	002b      	movs	r3, r5
   13c36:	4c2b      	ldr	r4, [pc, #172]	; (13ce4 <CLI_GetImuData+0x158>)
   13c38:	47a0      	blx	r4
		imuPacket.xmg = (int)acceleration_mg[0];
   13c3a:	4b27      	ldr	r3, [pc, #156]	; (13cd8 <CLI_GetImuData+0x14c>)
   13c3c:	681a      	ldr	r2, [r3, #0]
   13c3e:	4b27      	ldr	r3, [pc, #156]	; (13cdc <CLI_GetImuData+0x150>)
   13c40:	1c10      	adds	r0, r2, #0
   13c42:	4798      	blx	r3
   13c44:	0003      	movs	r3, r0
   13c46:	b21a      	sxth	r2, r3
   13c48:	2314      	movs	r3, #20
   13c4a:	18fb      	adds	r3, r7, r3
   13c4c:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = (int)acceleration_mg[1];
   13c4e:	4b22      	ldr	r3, [pc, #136]	; (13cd8 <CLI_GetImuData+0x14c>)
   13c50:	685a      	ldr	r2, [r3, #4]
   13c52:	4b22      	ldr	r3, [pc, #136]	; (13cdc <CLI_GetImuData+0x150>)
   13c54:	1c10      	adds	r0, r2, #0
   13c56:	4798      	blx	r3
   13c58:	0003      	movs	r3, r0
   13c5a:	b21a      	sxth	r2, r3
   13c5c:	2314      	movs	r3, #20
   13c5e:	18fb      	adds	r3, r7, r3
   13c60:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = (int)acceleration_mg[2];
   13c62:	4b1d      	ldr	r3, [pc, #116]	; (13cd8 <CLI_GetImuData+0x14c>)
   13c64:	689a      	ldr	r2, [r3, #8]
   13c66:	4b1d      	ldr	r3, [pc, #116]	; (13cdc <CLI_GetImuData+0x150>)
   13c68:	1c10      	adds	r0, r2, #0
   13c6a:	4798      	blx	r3
   13c6c:	0003      	movs	r3, r0
   13c6e:	b21a      	sxth	r2, r3
   13c70:	2314      	movs	r3, #20
   13c72:	18fb      	adds	r3, r7, r3
   13c74:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   13c76:	2314      	movs	r3, #20
   13c78:	18fb      	adds	r3, r7, r3
   13c7a:	0018      	movs	r0, r3
   13c7c:	4b1a      	ldr	r3, [pc, #104]	; (13ce8 <CLI_GetImuData+0x15c>)
   13c7e:	4798      	blx	r3
   13c80:	e019      	b.n	13cb6 <CLI_GetImuData+0x12a>
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! Sending dummy data \r\n");
   13c82:	4a1a      	ldr	r2, [pc, #104]	; (13cec <CLI_GetImuData+0x160>)
   13c84:	68b9      	ldr	r1, [r7, #8]
   13c86:	68fb      	ldr	r3, [r7, #12]
   13c88:	0018      	movs	r0, r3
   13c8a:	4b16      	ldr	r3, [pc, #88]	; (13ce4 <CLI_GetImuData+0x158>)
   13c8c:	4798      	blx	r3
		imuPacket.xmg = -1;
   13c8e:	2314      	movs	r3, #20
   13c90:	18fb      	adds	r3, r7, r3
   13c92:	2201      	movs	r2, #1
   13c94:	4252      	negs	r2, r2
   13c96:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = -2;
   13c98:	2314      	movs	r3, #20
   13c9a:	18fb      	adds	r3, r7, r3
   13c9c:	2202      	movs	r2, #2
   13c9e:	4252      	negs	r2, r2
   13ca0:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = -3;
   13ca2:	2314      	movs	r3, #20
   13ca4:	18fb      	adds	r3, r7, r3
   13ca6:	2203      	movs	r2, #3
   13ca8:	4252      	negs	r2, r2
   13caa:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   13cac:	2314      	movs	r3, #20
   13cae:	18fb      	adds	r3, r7, r3
   13cb0:	0018      	movs	r0, r3
   13cb2:	4b0d      	ldr	r3, [pc, #52]	; (13ce8 <CLI_GetImuData+0x15c>)
   13cb4:	4798      	blx	r3
    }
    return pdFALSE;
   13cb6:	2300      	movs	r3, #0
}
   13cb8:	0018      	movs	r0, r3
   13cba:	46bd      	mov	sp, r7
   13cbc:	b008      	add	sp, #32
   13cbe:	bdb0      	pop	{r4, r5, r7, pc}
   13cc0:	000154e5 	.word	0x000154e5
   13cc4:	00014ed1 	.word	0x00014ed1
   13cc8:	200005ec 	.word	0x200005ec
   13ccc:	00034883 	.word	0x00034883
   13cd0:	00014f0d 	.word	0x00014f0d
   13cd4:	00014761 	.word	0x00014761
   13cd8:	200005f4 	.word	0x200005f4
   13cdc:	00032d85 	.word	0x00032d85
   13ce0:	0003608c 	.word	0x0003608c
   13ce4:	00034add 	.word	0x00034add
   13ce8:	00017435 	.word	0x00017435
   13cec:	000360b0 	.word	0x000360b0

00013cf0 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13cf0:	b590      	push	{r4, r7, lr}
   13cf2:	b087      	sub	sp, #28
   13cf4:	af00      	add	r7, sp, #0
   13cf6:	60f8      	str	r0, [r7, #12]
   13cf8:	60b9      	str	r1, [r7, #8]
   13cfa:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13cfc:	2317      	movs	r3, #23
   13cfe:	18fb      	adds	r3, r7, r3
   13d00:	221b      	movs	r2, #27
   13d02:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13d04:	2317      	movs	r3, #23
   13d06:	18fb      	adds	r3, r7, r3
   13d08:	781b      	ldrb	r3, [r3, #0]
   13d0a:	4a08      	ldr	r2, [pc, #32]	; (13d2c <xCliClearTerminalScreen+0x3c>)
   13d0c:	4808      	ldr	r0, [pc, #32]	; (13d30 <xCliClearTerminalScreen+0x40>)
   13d0e:	210f      	movs	r1, #15
   13d10:	4c08      	ldr	r4, [pc, #32]	; (13d34 <xCliClearTerminalScreen+0x44>)
   13d12:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13d14:	4a06      	ldr	r2, [pc, #24]	; (13d30 <xCliClearTerminalScreen+0x40>)
   13d16:	68b9      	ldr	r1, [r7, #8]
   13d18:	68fb      	ldr	r3, [r7, #12]
   13d1a:	0018      	movs	r0, r3
   13d1c:	4b05      	ldr	r3, [pc, #20]	; (13d34 <xCliClearTerminalScreen+0x44>)
   13d1e:	4798      	blx	r3
    return pdFALSE;
   13d20:	2300      	movs	r3, #0
}
   13d22:	0018      	movs	r0, r3
   13d24:	46bd      	mov	sp, r7
   13d26:	b007      	add	sp, #28
   13d28:	bd90      	pop	{r4, r7, pc}
   13d2a:	46c0      	nop			; (mov r8, r8)
   13d2c:	000360d8 	.word	0x000360d8
   13d30:	20000504 	.word	0x20000504
   13d34:	00034add 	.word	0x00034add

00013d38 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d38:	b580      	push	{r7, lr}
   13d3a:	b084      	sub	sp, #16
   13d3c:	af00      	add	r7, sp, #0
   13d3e:	60f8      	str	r0, [r7, #12]
   13d40:	60b9      	str	r1, [r7, #8]
   13d42:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13d44:	2002      	movs	r0, #2
   13d46:	4b03      	ldr	r3, [pc, #12]	; (13d54 <CLI_OTAU+0x1c>)
   13d48:	4798      	blx	r3

    return pdFALSE;
   13d4a:	2300      	movs	r3, #0
}
   13d4c:	0018      	movs	r0, r3
   13d4e:	46bd      	mov	sp, r7
   13d50:	b004      	add	sp, #16
   13d52:	bd80      	pop	{r7, pc}
   13d54:	00017401 	.word	0x00017401

00013d58 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d58:	b580      	push	{r7, lr}
   13d5a:	b084      	sub	sp, #16
   13d5c:	af00      	add	r7, sp, #0
   13d5e:	60f8      	str	r0, [r7, #12]
   13d60:	60b9      	str	r1, [r7, #8]
   13d62:	607a      	str	r2, [r7, #4]
    system_reset();
   13d64:	4b03      	ldr	r3, [pc, #12]	; (13d74 <CLI_ResetDevice+0x1c>)
   13d66:	4798      	blx	r3
    return pdFALSE;
   13d68:	2300      	movs	r3, #0
}
   13d6a:	0018      	movs	r0, r3
   13d6c:	46bd      	mov	sp, r7
   13d6e:	b004      	add	sp, #16
   13d70:	bd80      	pop	{r7, pc}
   13d72:	46c0      	nop			; (mov r8, r8)
   13d74:	00013805 	.word	0x00013805

00013d78 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d78:	b590      	push	{r4, r7, lr}
   13d7a:	b08f      	sub	sp, #60	; 0x3c
   13d7c:	af00      	add	r7, sp, #0
   13d7e:	60f8      	str	r0, [r7, #12]
   13d80:	60b9      	str	r1, [r7, #8]
   13d82:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   13d84:	2318      	movs	r3, #24
   13d86:	18fb      	adds	r3, r7, r3
   13d88:	2200      	movs	r2, #0
   13d8a:	701a      	strb	r2, [r3, #0]
   13d8c:	2318      	movs	r3, #24
   13d8e:	18fb      	adds	r3, r7, r3
   13d90:	2200      	movs	r2, #0
   13d92:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   13d94:	2318      	movs	r3, #24
   13d96:	18fb      	adds	r3, r7, r3
   13d98:	2200      	movs	r2, #0
   13d9a:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   13d9c:	2318      	movs	r3, #24
   13d9e:	18fb      	adds	r3, r7, r3
   13da0:	2200      	movs	r2, #0
   13da2:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   13da4:	231c      	movs	r3, #28
   13da6:	18fb      	adds	r3, r7, r3
   13da8:	2200      	movs	r2, #0
   13daa:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   13dac:	231c      	movs	r3, #28
   13dae:	18fb      	adds	r3, r7, r3
   13db0:	2214      	movs	r2, #20
   13db2:	18ba      	adds	r2, r7, r2
   13db4:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   13db6:	231c      	movs	r3, #28
   13db8:	18fb      	adds	r3, r7, r3
   13dba:	2201      	movs	r2, #1
   13dbc:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   13dbe:	231c      	movs	r3, #28
   13dc0:	18fb      	adds	r3, r7, r3
   13dc2:	2218      	movs	r2, #24
   13dc4:	18ba      	adds	r2, r7, r2
   13dc6:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   13dc8:	231c      	movs	r3, #28
   13dca:	18fb      	adds	r3, r7, r3
   13dcc:	2201      	movs	r2, #1
   13dce:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   13dd0:	4b2a      	ldr	r3, [pc, #168]	; (13e7c <CLI_i2cScan+0x104>)
   13dd2:	0018      	movs	r0, r3
   13dd4:	4b2a      	ldr	r3, [pc, #168]	; (13e80 <CLI_i2cScan+0x108>)
   13dd6:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13dd8:	2300      	movs	r3, #0
   13dda:	637b      	str	r3, [r7, #52]	; 0x34
   13ddc:	e042      	b.n	13e64 <CLI_i2cScan+0xec>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   13dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13de0:	4a28      	ldr	r2, [pc, #160]	; (13e84 <CLI_i2cScan+0x10c>)
   13de2:	4829      	ldr	r0, [pc, #164]	; (13e88 <CLI_i2cScan+0x110>)
   13de4:	210f      	movs	r1, #15
   13de6:	4c29      	ldr	r4, [pc, #164]	; (13e8c <CLI_i2cScan+0x114>)
   13de8:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   13dea:	4b27      	ldr	r3, [pc, #156]	; (13e88 <CLI_i2cScan+0x110>)
   13dec:	0018      	movs	r0, r3
   13dee:	4b24      	ldr	r3, [pc, #144]	; (13e80 <CLI_i2cScan+0x108>)
   13df0:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   13df2:	2300      	movs	r3, #0
   13df4:	633b      	str	r3, [r7, #48]	; 0x30
   13df6:	e02b      	b.n	13e50 <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
   13df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13dfa:	b2da      	uxtb	r2, r3
   13dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13dfe:	b2db      	uxtb	r3, r3
   13e00:	18d3      	adds	r3, r2, r3
   13e02:	b2da      	uxtb	r2, r3
   13e04:	231c      	movs	r3, #28
   13e06:	18fb      	adds	r3, r7, r3
   13e08:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cReadDataWait(&i2cOled, 100, 100);
   13e0a:	231c      	movs	r3, #28
   13e0c:	18fb      	adds	r3, r7, r3
   13e0e:	2264      	movs	r2, #100	; 0x64
   13e10:	2164      	movs	r1, #100	; 0x64
   13e12:	0018      	movs	r0, r3
   13e14:	4b1e      	ldr	r3, [pc, #120]	; (13e90 <CLI_i2cScan+0x118>)
   13e16:	4798      	blx	r3
   13e18:	0003      	movs	r3, r0
   13e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   13e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13e1e:	2b00      	cmp	r3, #0
   13e20:	d10c      	bne.n	13e3c <CLI_i2cScan+0xc4>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
   13e22:	231c      	movs	r3, #28
   13e24:	18fb      	adds	r3, r7, r3
   13e26:	781b      	ldrb	r3, [r3, #0]
   13e28:	4a1a      	ldr	r2, [pc, #104]	; (13e94 <CLI_i2cScan+0x11c>)
   13e2a:	4817      	ldr	r0, [pc, #92]	; (13e88 <CLI_i2cScan+0x110>)
   13e2c:	210f      	movs	r1, #15
   13e2e:	4c17      	ldr	r4, [pc, #92]	; (13e8c <CLI_i2cScan+0x114>)
   13e30:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   13e32:	4b15      	ldr	r3, [pc, #84]	; (13e88 <CLI_i2cScan+0x110>)
   13e34:	0018      	movs	r0, r3
   13e36:	4b12      	ldr	r3, [pc, #72]	; (13e80 <CLI_i2cScan+0x108>)
   13e38:	4798      	blx	r3
   13e3a:	e006      	b.n	13e4a <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
   13e3c:	4b12      	ldr	r3, [pc, #72]	; (13e88 <CLI_i2cScan+0x110>)
   13e3e:	4a16      	ldr	r2, [pc, #88]	; (13e98 <CLI_i2cScan+0x120>)
   13e40:	601a      	str	r2, [r3, #0]
						SerialConsoleWriteString(bufCli);
   13e42:	4b11      	ldr	r3, [pc, #68]	; (13e88 <CLI_i2cScan+0x110>)
   13e44:	0018      	movs	r0, r3
   13e46:	4b0e      	ldr	r3, [pc, #56]	; (13e80 <CLI_i2cScan+0x108>)
   13e48:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   13e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13e4c:	3301      	adds	r3, #1
   13e4e:	633b      	str	r3, [r7, #48]	; 0x30
   13e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13e52:	2b0f      	cmp	r3, #15
   13e54:	ddd0      	ble.n	13df8 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   13e56:	4b11      	ldr	r3, [pc, #68]	; (13e9c <CLI_i2cScan+0x124>)
   13e58:	0018      	movs	r0, r3
   13e5a:	4b09      	ldr	r3, [pc, #36]	; (13e80 <CLI_i2cScan+0x108>)
   13e5c:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13e60:	3310      	adds	r3, #16
   13e62:	637b      	str	r3, [r7, #52]	; 0x34
   13e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13e66:	2b7f      	cmp	r3, #127	; 0x7f
   13e68:	ddb9      	ble.n	13dde <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   13e6a:	4b0c      	ldr	r3, [pc, #48]	; (13e9c <CLI_i2cScan+0x124>)
   13e6c:	0018      	movs	r0, r3
   13e6e:	4b04      	ldr	r3, [pc, #16]	; (13e80 <CLI_i2cScan+0x108>)
   13e70:	4798      	blx	r3
			return pdFALSE;
   13e72:	2300      	movs	r3, #0

}
   13e74:	0018      	movs	r0, r3
   13e76:	46bd      	mov	sp, r7
   13e78:	b00f      	add	sp, #60	; 0x3c
   13e7a:	bd90      	pop	{r4, r7, pc}
   13e7c:	0003618c 	.word	0x0003618c
   13e80:	0001dce5 	.word	0x0001dce5
   13e84:	000361c0 	.word	0x000361c0
   13e88:	20000504 	.word	0x20000504
   13e8c:	00034add 	.word	0x00034add
   13e90:	000145c1 	.word	0x000145c1
   13e94:	000361c8 	.word	0x000361c8
   13e98:	00202058 	.word	0x00202058
   13e9c:	00036078 	.word	0x00036078

00013ea0 <CLI_GetGpsData>:

// CLI Command added by Derek. Reads from the GPS and returns data.
BaseType_t CLI_GetGpsData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   13ea0:	b580      	push	{r7, lr}
   13ea2:	b084      	sub	sp, #16
   13ea4:	af00      	add	r7, sp, #0
   13ea6:	60f8      	str	r0, [r7, #12]
   13ea8:	60b9      	str	r1, [r7, #8]
   13eaa:	607a      	str	r2, [r7, #4]
	SerialConsoleWriteString("Added by Derek, TBD!\r\n\r\n");
   13eac:	4b04      	ldr	r3, [pc, #16]	; (13ec0 <CLI_GetGpsData+0x20>)
   13eae:	0018      	movs	r0, r3
   13eb0:	4b04      	ldr	r3, [pc, #16]	; (13ec4 <CLI_GetGpsData+0x24>)
   13eb2:	4798      	blx	r3
		gpsPacket.lat = 0;
		gpsPacket.lon = 0;
		WifiAddGpsDataToQueue(&gpsPacket);
	}
	*/
	return pdFALSE;
   13eb4:	2300      	movs	r3, #0
}
   13eb6:	0018      	movs	r0, r3
   13eb8:	46bd      	mov	sp, r7
   13eba:	b004      	add	sp, #16
   13ebc:	bd80      	pop	{r7, pc}
   13ebe:	46c0      	nop			; (mov r8, r8)
   13ec0:	000361d0 	.word	0x000361d0
   13ec4:	0001dce5 	.word	0x0001dce5

00013ec8 <ControlAddGameData>:
 * @return		Returns pdTrue if data can be added to queue, 0 if queue is full
 * @note

 */
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   13ec8:	b590      	push	{r4, r7, lr}
   13eca:	b085      	sub	sp, #20
   13ecc:	af00      	add	r7, sp, #0
   13ece:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBufferIn, gameIn, (TickType_t)10);
   13ed0:	4b06      	ldr	r3, [pc, #24]	; (13eec <ControlAddGameData+0x24>)
   13ed2:	6818      	ldr	r0, [r3, #0]
   13ed4:	6879      	ldr	r1, [r7, #4]
   13ed6:	2300      	movs	r3, #0
   13ed8:	220a      	movs	r2, #10
   13eda:	4c05      	ldr	r4, [pc, #20]	; (13ef0 <ControlAddGameData+0x28>)
   13edc:	47a0      	blx	r4
   13ede:	0003      	movs	r3, r0
   13ee0:	60fb      	str	r3, [r7, #12]
    return error;
   13ee2:	68fb      	ldr	r3, [r7, #12]
}
   13ee4:	0018      	movs	r0, r3
   13ee6:	46bd      	mov	sp, r7
   13ee8:	b005      	add	sp, #20
   13eea:	bd90      	pop	{r4, r7, pc}
   13eec:	20000600 	.word	0x20000600
   13ef0:	0001a62d 	.word	0x0001a62d

00013ef4 <system_interrupt_enable>:
{
   13ef4:	b580      	push	{r7, lr}
   13ef6:	b082      	sub	sp, #8
   13ef8:	af00      	add	r7, sp, #0
   13efa:	0002      	movs	r2, r0
   13efc:	1dfb      	adds	r3, r7, #7
   13efe:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13f00:	4b06      	ldr	r3, [pc, #24]	; (13f1c <system_interrupt_enable+0x28>)
   13f02:	1dfa      	adds	r2, r7, #7
   13f04:	7812      	ldrb	r2, [r2, #0]
   13f06:	0011      	movs	r1, r2
   13f08:	221f      	movs	r2, #31
   13f0a:	400a      	ands	r2, r1
   13f0c:	2101      	movs	r1, #1
   13f0e:	4091      	lsls	r1, r2
   13f10:	000a      	movs	r2, r1
   13f12:	601a      	str	r2, [r3, #0]
}
   13f14:	46c0      	nop			; (mov r8, r8)
   13f16:	46bd      	mov	sp, r7
   13f18:	b002      	add	sp, #8
   13f1a:	bd80      	pop	{r7, pc}
   13f1c:	e000e100 	.word	0xe000e100

00013f20 <i2c_master_is_syncing>:
{
   13f20:	b580      	push	{r7, lr}
   13f22:	b084      	sub	sp, #16
   13f24:	af00      	add	r7, sp, #0
   13f26:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13f28:	687b      	ldr	r3, [r7, #4]
   13f2a:	681b      	ldr	r3, [r3, #0]
   13f2c:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   13f2e:	68fb      	ldr	r3, [r7, #12]
   13f30:	69db      	ldr	r3, [r3, #28]
   13f32:	2207      	movs	r2, #7
   13f34:	4013      	ands	r3, r2
   13f36:	1e5a      	subs	r2, r3, #1
   13f38:	4193      	sbcs	r3, r2
   13f3a:	b2db      	uxtb	r3, r3
}
   13f3c:	0018      	movs	r0, r3
   13f3e:	46bd      	mov	sp, r7
   13f40:	b004      	add	sp, #16
   13f42:	bd80      	pop	{r7, pc}

00013f44 <_i2c_master_wait_for_sync>:
{
   13f44:	b580      	push	{r7, lr}
   13f46:	b082      	sub	sp, #8
   13f48:	af00      	add	r7, sp, #0
   13f4a:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   13f4c:	46c0      	nop			; (mov r8, r8)
   13f4e:	687b      	ldr	r3, [r7, #4]
   13f50:	0018      	movs	r0, r3
   13f52:	4b04      	ldr	r3, [pc, #16]	; (13f64 <_i2c_master_wait_for_sync+0x20>)
   13f54:	4798      	blx	r3
   13f56:	1e03      	subs	r3, r0, #0
   13f58:	d1f9      	bne.n	13f4e <_i2c_master_wait_for_sync+0xa>
}
   13f5a:	46c0      	nop			; (mov r8, r8)
   13f5c:	46bd      	mov	sp, r7
   13f5e:	b002      	add	sp, #8
   13f60:	bd80      	pop	{r7, pc}
   13f62:	46c0      	nop			; (mov r8, r8)
   13f64:	00013f21 	.word	0x00013f21

00013f68 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   13f68:	b580      	push	{r7, lr}
   13f6a:	b082      	sub	sp, #8
   13f6c:	af00      	add	r7, sp, #0
   13f6e:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   13f70:	687b      	ldr	r3, [r7, #4]
   13f72:	2264      	movs	r2, #100	; 0x64
   13f74:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   13f76:	687b      	ldr	r3, [r7, #4]
   13f78:	4a1b      	ldr	r2, [pc, #108]	; (13fe8 <i2c_master_get_config_defaults+0x80>)
   13f7a:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   13f7c:	687b      	ldr	r3, [r7, #4]
   13f7e:	2200      	movs	r2, #0
   13f80:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   13f82:	687b      	ldr	r3, [r7, #4]
   13f84:	2200      	movs	r2, #0
   13f86:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   13f88:	687b      	ldr	r3, [r7, #4]
   13f8a:	2200      	movs	r2, #0
   13f8c:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   13f8e:	687b      	ldr	r3, [r7, #4]
   13f90:	2280      	movs	r2, #128	; 0x80
   13f92:	0392      	lsls	r2, r2, #14
   13f94:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   13f96:	687b      	ldr	r3, [r7, #4]
   13f98:	2201      	movs	r2, #1
   13f9a:	4252      	negs	r2, r2
   13f9c:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   13f9e:	687b      	ldr	r3, [r7, #4]
   13fa0:	2201      	movs	r2, #1
   13fa2:	4252      	negs	r2, r2
   13fa4:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   13fa6:	687b      	ldr	r3, [r7, #4]
   13fa8:	2200      	movs	r2, #0
   13faa:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   13fac:	687b      	ldr	r3, [r7, #4]
   13fae:	2200      	movs	r2, #0
   13fb0:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   13fb2:	687b      	ldr	r3, [r7, #4]
   13fb4:	2224      	movs	r2, #36	; 0x24
   13fb6:	2100      	movs	r1, #0
   13fb8:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   13fba:	687b      	ldr	r3, [r7, #4]
   13fbc:	2200      	movs	r2, #0
   13fbe:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   13fc0:	687b      	ldr	r3, [r7, #4]
   13fc2:	222c      	movs	r2, #44	; 0x2c
   13fc4:	2100      	movs	r1, #0
   13fc6:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   13fc8:	687b      	ldr	r3, [r7, #4]
   13fca:	222d      	movs	r2, #45	; 0x2d
   13fcc:	2100      	movs	r1, #0
   13fce:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   13fd0:	687b      	ldr	r3, [r7, #4]
   13fd2:	222e      	movs	r2, #46	; 0x2e
   13fd4:	2100      	movs	r1, #0
   13fd6:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   13fd8:	687b      	ldr	r3, [r7, #4]
   13fda:	22d7      	movs	r2, #215	; 0xd7
   13fdc:	861a      	strh	r2, [r3, #48]	; 0x30
}
   13fde:	46c0      	nop			; (mov r8, r8)
   13fe0:	46bd      	mov	sp, r7
   13fe2:	b002      	add	sp, #8
   13fe4:	bd80      	pop	{r7, pc}
   13fe6:	46c0      	nop			; (mov r8, r8)
   13fe8:	00000d48 	.word	0x00000d48

00013fec <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   13fec:	b580      	push	{r7, lr}
   13fee:	b084      	sub	sp, #16
   13ff0:	af00      	add	r7, sp, #0
   13ff2:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13ff4:	687b      	ldr	r3, [r7, #4]
   13ff6:	681b      	ldr	r3, [r3, #0]
   13ff8:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   13ffa:	2300      	movs	r3, #0
   13ffc:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   13ffe:	687b      	ldr	r3, [r7, #4]
   14000:	0018      	movs	r0, r3
   14002:	4b14      	ldr	r3, [pc, #80]	; (14054 <i2c_master_enable+0x68>)
   14004:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   14006:	68bb      	ldr	r3, [r7, #8]
   14008:	681b      	ldr	r3, [r3, #0]
   1400a:	2202      	movs	r2, #2
   1400c:	431a      	orrs	r2, r3
   1400e:	68bb      	ldr	r3, [r7, #8]
   14010:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   14012:	687b      	ldr	r3, [r7, #4]
   14014:	681b      	ldr	r3, [r3, #0]
   14016:	0018      	movs	r0, r3
   14018:	4b0f      	ldr	r3, [pc, #60]	; (14058 <i2c_master_enable+0x6c>)
   1401a:	4798      	blx	r3
   1401c:	0003      	movs	r3, r0
   1401e:	0018      	movs	r0, r3
   14020:	4b0e      	ldr	r3, [pc, #56]	; (1405c <i2c_master_enable+0x70>)
   14022:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14024:	e00c      	b.n	14040 <i2c_master_enable+0x54>
		timeout_counter++;
   14026:	68fb      	ldr	r3, [r7, #12]
   14028:	3301      	adds	r3, #1
   1402a:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   1402c:	687b      	ldr	r3, [r7, #4]
   1402e:	88db      	ldrh	r3, [r3, #6]
   14030:	001a      	movs	r2, r3
   14032:	68fb      	ldr	r3, [r7, #12]
   14034:	429a      	cmp	r2, r3
   14036:	d803      	bhi.n	14040 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   14038:	68bb      	ldr	r3, [r7, #8]
   1403a:	2210      	movs	r2, #16
   1403c:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   1403e:	e006      	b.n	1404e <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14040:	68bb      	ldr	r3, [r7, #8]
   14042:	8b5b      	ldrh	r3, [r3, #26]
   14044:	b29b      	uxth	r3, r3
   14046:	001a      	movs	r2, r3
   14048:	2310      	movs	r3, #16
   1404a:	4013      	ands	r3, r2
   1404c:	d0eb      	beq.n	14026 <i2c_master_enable+0x3a>
		}
	}
}
   1404e:	46bd      	mov	sp, r7
   14050:	b004      	add	sp, #16
   14052:	bd80      	pop	{r7, pc}
   14054:	00013f45 	.word	0x00013f45
   14058:	00027521 	.word	0x00027521
   1405c:	00013ef5 	.word	0x00013ef5

00014060 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   14060:	b580      	push	{r7, lr}
   14062:	b082      	sub	sp, #8
   14064:	af00      	add	r7, sp, #0
   14066:	6078      	str	r0, [r7, #4]
   14068:	000a      	movs	r2, r1
   1406a:	1cfb      	adds	r3, r7, #3
   1406c:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   1406e:	687b      	ldr	r3, [r7, #4]
   14070:	7e5b      	ldrb	r3, [r3, #25]
   14072:	b2db      	uxtb	r3, r3
   14074:	b25a      	sxtb	r2, r3
   14076:	1cfb      	adds	r3, r7, #3
   14078:	781b      	ldrb	r3, [r3, #0]
   1407a:	2101      	movs	r1, #1
   1407c:	4099      	lsls	r1, r3
   1407e:	000b      	movs	r3, r1
   14080:	b25b      	sxtb	r3, r3
   14082:	4313      	orrs	r3, r2
   14084:	b25b      	sxtb	r3, r3
   14086:	b2da      	uxtb	r2, r3
   14088:	687b      	ldr	r3, [r7, #4]
   1408a:	765a      	strb	r2, [r3, #25]
}
   1408c:	46c0      	nop			; (mov r8, r8)
   1408e:	46bd      	mov	sp, r7
   14090:	b002      	add	sp, #8
   14092:	bd80      	pop	{r7, pc}

00014094 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   14094:	b590      	push	{r4, r7, lr}
   14096:	b091      	sub	sp, #68	; 0x44
   14098:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   1409a:	2300      	movs	r3, #0
   1409c:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   1409e:	233a      	movs	r3, #58	; 0x3a
   140a0:	18fb      	adds	r3, r7, r3
   140a2:	2200      	movs	r2, #0
   140a4:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   140a6:	1d3b      	adds	r3, r7, #4
   140a8:	0018      	movs	r0, r3
   140aa:	4b21      	ldr	r3, [pc, #132]	; (14130 <I2cDriverConfigureSensorBus+0x9c>)
   140ac:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   140ae:	1d3b      	adds	r3, r7, #4
   140b0:	4a20      	ldr	r2, [pc, #128]	; (14134 <I2cDriverConfigureSensorBus+0xa0>)
   140b2:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   140b4:	1d3b      	adds	r3, r7, #4
   140b6:	4a20      	ldr	r2, [pc, #128]	; (14138 <I2cDriverConfigureSensorBus+0xa4>)
   140b8:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   140ba:	1d3b      	adds	r3, r7, #4
   140bc:	22fa      	movs	r2, #250	; 0xfa
   140be:	0092      	lsls	r2, r2, #2
   140c0:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   140c2:	233b      	movs	r3, #59	; 0x3b
   140c4:	18fb      	adds	r3, r7, r3
   140c6:	2203      	movs	r2, #3
   140c8:	701a      	strb	r2, [r3, #0]
   140ca:	e01e      	b.n	1410a <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   140cc:	233a      	movs	r3, #58	; 0x3a
   140ce:	18fc      	adds	r4, r7, r3
   140d0:	1d3a      	adds	r2, r7, #4
   140d2:	491a      	ldr	r1, [pc, #104]	; (1413c <I2cDriverConfigureSensorBus+0xa8>)
   140d4:	4b1a      	ldr	r3, [pc, #104]	; (14140 <I2cDriverConfigureSensorBus+0xac>)
   140d6:	0018      	movs	r0, r3
   140d8:	4b1a      	ldr	r3, [pc, #104]	; (14144 <I2cDriverConfigureSensorBus+0xb0>)
   140da:	4798      	blx	r3
   140dc:	0003      	movs	r3, r0
   140de:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   140e0:	233a      	movs	r3, #58	; 0x3a
   140e2:	18fb      	adds	r3, r7, r3
   140e4:	781b      	ldrb	r3, [r3, #0]
   140e6:	2b00      	cmp	r3, #0
   140e8:	d104      	bne.n	140f4 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   140ea:	233a      	movs	r3, #58	; 0x3a
   140ec:	18fb      	adds	r3, r7, r3
   140ee:	781b      	ldrb	r3, [r3, #0]
   140f0:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   140f2:	e00f      	b.n	14114 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   140f4:	4b12      	ldr	r3, [pc, #72]	; (14140 <I2cDriverConfigureSensorBus+0xac>)
   140f6:	0018      	movs	r0, r3
   140f8:	4b13      	ldr	r3, [pc, #76]	; (14148 <I2cDriverConfigureSensorBus+0xb4>)
   140fa:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   140fc:	233b      	movs	r3, #59	; 0x3b
   140fe:	18fb      	adds	r3, r7, r3
   14100:	781a      	ldrb	r2, [r3, #0]
   14102:	233b      	movs	r3, #59	; 0x3b
   14104:	18fb      	adds	r3, r7, r3
   14106:	3a01      	subs	r2, #1
   14108:	701a      	strb	r2, [r3, #0]
   1410a:	233b      	movs	r3, #59	; 0x3b
   1410c:	18fb      	adds	r3, r7, r3
   1410e:	781b      	ldrb	r3, [r3, #0]
   14110:	2b00      	cmp	r3, #0
   14112:	d1db      	bne.n	140cc <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   14114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14116:	2b00      	cmp	r3, #0
   14118:	d104      	bne.n	14124 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   1411a:	4b09      	ldr	r3, [pc, #36]	; (14140 <I2cDriverConfigureSensorBus+0xac>)
   1411c:	0018      	movs	r0, r3
   1411e:	4b0b      	ldr	r3, [pc, #44]	; (1414c <I2cDriverConfigureSensorBus+0xb8>)
   14120:	4798      	blx	r3
   14122:	e000      	b.n	14126 <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   14124:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   14126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   14128:	0018      	movs	r0, r3
   1412a:	46bd      	mov	sp, r7
   1412c:	b011      	add	sp, #68	; 0x44
   1412e:	bd90      	pop	{r4, r7, pc}
   14130:	00013f69 	.word	0x00013f69
   14134:	00080002 	.word	0x00080002
   14138:	00090002 	.word	0x00090002
   1413c:	42000800 	.word	0x42000800
   14140:	200047d8 	.word	0x200047d8
   14144:	00017a25 	.word	0x00017a25
   14148:	00017b59 	.word	0x00017b59
   1414c:	00013fed 	.word	0x00013fed

00014150 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   14150:	b580      	push	{r7, lr}
   14152:	b084      	sub	sp, #16
   14154:	af00      	add	r7, sp, #0
   14156:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14158:	4b0e      	ldr	r3, [pc, #56]	; (14194 <I2cSensorsTxComplete+0x44>)
   1415a:	2200      	movs	r2, #0
   1415c:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   1415e:	4b0d      	ldr	r3, [pc, #52]	; (14194 <I2cSensorsTxComplete+0x44>)
   14160:	2201      	movs	r2, #1
   14162:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14164:	2300      	movs	r3, #0
   14166:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14168:	4b0b      	ldr	r3, [pc, #44]	; (14198 <I2cSensorsTxComplete+0x48>)
   1416a:	681b      	ldr	r3, [r3, #0]
   1416c:	220c      	movs	r2, #12
   1416e:	18ba      	adds	r2, r7, r2
   14170:	0011      	movs	r1, r2
   14172:	0018      	movs	r0, r3
   14174:	4b09      	ldr	r3, [pc, #36]	; (1419c <I2cSensorsTxComplete+0x4c>)
   14176:	4798      	blx	r3
    sensorTransmitError = false;
   14178:	4b09      	ldr	r3, [pc, #36]	; (141a0 <I2cSensorsTxComplete+0x50>)
   1417a:	2200      	movs	r2, #0
   1417c:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   1417e:	68fb      	ldr	r3, [r7, #12]
   14180:	2b00      	cmp	r3, #0
   14182:	d003      	beq.n	1418c <I2cSensorsTxComplete+0x3c>
   14184:	4b07      	ldr	r3, [pc, #28]	; (141a4 <I2cSensorsTxComplete+0x54>)
   14186:	2280      	movs	r2, #128	; 0x80
   14188:	0552      	lsls	r2, r2, #21
   1418a:	601a      	str	r2, [r3, #0]
}
   1418c:	46c0      	nop			; (mov r8, r8)
   1418e:	46bd      	mov	sp, r7
   14190:	b004      	add	sp, #16
   14192:	bd80      	pop	{r7, pc}
   14194:	20000608 	.word	0x20000608
   14198:	20004800 	.word	0x20004800
   1419c:	0001acb5 	.word	0x0001acb5
   141a0:	20000604 	.word	0x20000604
   141a4:	e000ed04 	.word	0xe000ed04

000141a8 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   141a8:	b580      	push	{r7, lr}
   141aa:	b084      	sub	sp, #16
   141ac:	af00      	add	r7, sp, #0
   141ae:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   141b0:	4b0e      	ldr	r3, [pc, #56]	; (141ec <I2cSensorsRxComplete+0x44>)
   141b2:	2200      	movs	r2, #0
   141b4:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   141b6:	4b0d      	ldr	r3, [pc, #52]	; (141ec <I2cSensorsRxComplete+0x44>)
   141b8:	2201      	movs	r2, #1
   141ba:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   141bc:	2300      	movs	r3, #0
   141be:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   141c0:	4b0b      	ldr	r3, [pc, #44]	; (141f0 <I2cSensorsRxComplete+0x48>)
   141c2:	681b      	ldr	r3, [r3, #0]
   141c4:	220c      	movs	r2, #12
   141c6:	18ba      	adds	r2, r7, r2
   141c8:	0011      	movs	r1, r2
   141ca:	0018      	movs	r0, r3
   141cc:	4b09      	ldr	r3, [pc, #36]	; (141f4 <I2cSensorsRxComplete+0x4c>)
   141ce:	4798      	blx	r3
    sensorTransmitError = false;
   141d0:	4b09      	ldr	r3, [pc, #36]	; (141f8 <I2cSensorsRxComplete+0x50>)
   141d2:	2200      	movs	r2, #0
   141d4:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   141d6:	68fb      	ldr	r3, [r7, #12]
   141d8:	2b00      	cmp	r3, #0
   141da:	d003      	beq.n	141e4 <I2cSensorsRxComplete+0x3c>
   141dc:	4b07      	ldr	r3, [pc, #28]	; (141fc <I2cSensorsRxComplete+0x54>)
   141de:	2280      	movs	r2, #128	; 0x80
   141e0:	0552      	lsls	r2, r2, #21
   141e2:	601a      	str	r2, [r3, #0]
}
   141e4:	46c0      	nop			; (mov r8, r8)
   141e6:	46bd      	mov	sp, r7
   141e8:	b004      	add	sp, #16
   141ea:	bd80      	pop	{r7, pc}
   141ec:	20000608 	.word	0x20000608
   141f0:	20004800 	.word	0x20004800
   141f4:	0001acb5 	.word	0x0001acb5
   141f8:	20000604 	.word	0x20000604
   141fc:	e000ed04 	.word	0xe000ed04

00014200 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   14200:	b580      	push	{r7, lr}
   14202:	b084      	sub	sp, #16
   14204:	af00      	add	r7, sp, #0
   14206:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14208:	4b0e      	ldr	r3, [pc, #56]	; (14244 <I2cSensorsError+0x44>)
   1420a:	2200      	movs	r2, #0
   1420c:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   1420e:	4b0d      	ldr	r3, [pc, #52]	; (14244 <I2cSensorsError+0x44>)
   14210:	2201      	movs	r2, #1
   14212:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14214:	2300      	movs	r3, #0
   14216:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14218:	4b0b      	ldr	r3, [pc, #44]	; (14248 <I2cSensorsError+0x48>)
   1421a:	681b      	ldr	r3, [r3, #0]
   1421c:	220c      	movs	r2, #12
   1421e:	18ba      	adds	r2, r7, r2
   14220:	0011      	movs	r1, r2
   14222:	0018      	movs	r0, r3
   14224:	4b09      	ldr	r3, [pc, #36]	; (1424c <I2cSensorsError+0x4c>)
   14226:	4798      	blx	r3
    sensorTransmitError = true;
   14228:	4b09      	ldr	r3, [pc, #36]	; (14250 <I2cSensorsError+0x50>)
   1422a:	2201      	movs	r2, #1
   1422c:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   1422e:	68fb      	ldr	r3, [r7, #12]
   14230:	2b00      	cmp	r3, #0
   14232:	d003      	beq.n	1423c <I2cSensorsError+0x3c>
   14234:	4b07      	ldr	r3, [pc, #28]	; (14254 <I2cSensorsError+0x54>)
   14236:	2280      	movs	r2, #128	; 0x80
   14238:	0552      	lsls	r2, r2, #21
   1423a:	601a      	str	r2, [r3, #0]
}
   1423c:	46c0      	nop			; (mov r8, r8)
   1423e:	46bd      	mov	sp, r7
   14240:	b004      	add	sp, #16
   14242:	bd80      	pop	{r7, pc}
   14244:	20000608 	.word	0x20000608
   14248:	20004800 	.word	0x20004800
   1424c:	0001acb5 	.word	0x0001acb5
   14250:	20000604 	.word	0x20000604
   14254:	e000ed04 	.word	0xe000ed04

00014258 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   14258:	b580      	push	{r7, lr}
   1425a:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   1425c:	4911      	ldr	r1, [pc, #68]	; (142a4 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   1425e:	4b12      	ldr	r3, [pc, #72]	; (142a8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14260:	2200      	movs	r2, #0
   14262:	0018      	movs	r0, r3
   14264:	4b11      	ldr	r3, [pc, #68]	; (142ac <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14266:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14268:	4b0f      	ldr	r3, [pc, #60]	; (142a8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1426a:	2100      	movs	r1, #0
   1426c:	0018      	movs	r0, r3
   1426e:	4b10      	ldr	r3, [pc, #64]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14270:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   14272:	4910      	ldr	r1, [pc, #64]	; (142b4 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   14274:	4b0c      	ldr	r3, [pc, #48]	; (142a8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14276:	2201      	movs	r2, #1
   14278:	0018      	movs	r0, r3
   1427a:	4b0c      	ldr	r3, [pc, #48]	; (142ac <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1427c:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   1427e:	4b0a      	ldr	r3, [pc, #40]	; (142a8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14280:	2101      	movs	r1, #1
   14282:	0018      	movs	r0, r3
   14284:	4b0a      	ldr	r3, [pc, #40]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14286:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   14288:	490b      	ldr	r1, [pc, #44]	; (142b8 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   1428a:	4b07      	ldr	r3, [pc, #28]	; (142a8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1428c:	2202      	movs	r2, #2
   1428e:	0018      	movs	r0, r3
   14290:	4b06      	ldr	r3, [pc, #24]	; (142ac <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14292:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   14294:	4b04      	ldr	r3, [pc, #16]	; (142a8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14296:	2102      	movs	r1, #2
   14298:	0018      	movs	r0, r3
   1429a:	4b05      	ldr	r3, [pc, #20]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   1429c:	4798      	blx	r3
}
   1429e:	46c0      	nop			; (mov r8, r8)
   142a0:	46bd      	mov	sp, r7
   142a2:	bd80      	pop	{r7, pc}
   142a4:	00014151 	.word	0x00014151
   142a8:	200047d8 	.word	0x200047d8
   142ac:	000132b1 	.word	0x000132b1
   142b0:	00014061 	.word	0x00014061
   142b4:	000141a9 	.word	0x000141a9
   142b8:	00014201 	.word	0x00014201

000142bc <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   142bc:	b580      	push	{r7, lr}
   142be:	b082      	sub	sp, #8
   142c0:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   142c2:	2300      	movs	r3, #0
   142c4:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   142c6:	4b14      	ldr	r3, [pc, #80]	; (14318 <I2cInitializeDriver+0x5c>)
   142c8:	4798      	blx	r3
   142ca:	0003      	movs	r3, r0
   142cc:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   142ce:	687b      	ldr	r3, [r7, #4]
   142d0:	2b00      	cmp	r3, #0
   142d2:	d11a      	bne.n	1430a <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   142d4:	4b11      	ldr	r3, [pc, #68]	; (1431c <I2cInitializeDriver+0x60>)
   142d6:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   142d8:	2001      	movs	r0, #1
   142da:	4b11      	ldr	r3, [pc, #68]	; (14320 <I2cInitializeDriver+0x64>)
   142dc:	4798      	blx	r3
   142de:	0002      	movs	r2, r0
   142e0:	4b10      	ldr	r3, [pc, #64]	; (14324 <I2cInitializeDriver+0x68>)
   142e2:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   142e4:	2203      	movs	r2, #3
   142e6:	2100      	movs	r1, #0
   142e8:	2001      	movs	r0, #1
   142ea:	4b0f      	ldr	r3, [pc, #60]	; (14328 <I2cInitializeDriver+0x6c>)
   142ec:	4798      	blx	r3
   142ee:	0002      	movs	r2, r0
   142f0:	4b0e      	ldr	r3, [pc, #56]	; (1432c <I2cInitializeDriver+0x70>)
   142f2:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   142f4:	4b0b      	ldr	r3, [pc, #44]	; (14324 <I2cInitializeDriver+0x68>)
   142f6:	681b      	ldr	r3, [r3, #0]
   142f8:	2b00      	cmp	r3, #0
   142fa:	d003      	beq.n	14304 <I2cInitializeDriver+0x48>
   142fc:	4b0b      	ldr	r3, [pc, #44]	; (1432c <I2cInitializeDriver+0x70>)
   142fe:	681b      	ldr	r3, [r3, #0]
   14300:	2b00      	cmp	r3, #0
   14302:	d103      	bne.n	1430c <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   14304:	2306      	movs	r3, #6
   14306:	607b      	str	r3, [r7, #4]
        goto exit;
   14308:	e000      	b.n	1430c <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   1430a:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   1430c:	687b      	ldr	r3, [r7, #4]
}
   1430e:	0018      	movs	r0, r3
   14310:	46bd      	mov	sp, r7
   14312:	b002      	add	sp, #8
   14314:	bd80      	pop	{r7, pc}
   14316:	46c0      	nop			; (mov r8, r8)
   14318:	00014095 	.word	0x00014095
   1431c:	00014259 	.word	0x00014259
   14320:	0001a5ed 	.word	0x0001a5ed
   14324:	200047d4 	.word	0x200047d4
   14328:	0001a385 	.word	0x0001a385
   1432c:	20004800 	.word	0x20004800

00014330 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   14330:	b590      	push	{r4, r7, lr}
   14332:	b085      	sub	sp, #20
   14334:	af00      	add	r7, sp, #0
   14336:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14338:	2300      	movs	r3, #0
   1433a:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   1433c:	687b      	ldr	r3, [r7, #4]
   1433e:	2b00      	cmp	r3, #0
   14340:	d003      	beq.n	1434a <I2cWriteData+0x1a>
   14342:	687b      	ldr	r3, [r7, #4]
   14344:	685b      	ldr	r3, [r3, #4]
   14346:	2b00      	cmp	r3, #0
   14348:	d103      	bne.n	14352 <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   1434a:	2308      	movs	r3, #8
   1434c:	425b      	negs	r3, r3
   1434e:	60fb      	str	r3, [r7, #12]
        goto exit;
   14350:	e01f      	b.n	14392 <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   14352:	687b      	ldr	r3, [r7, #4]
   14354:	781b      	ldrb	r3, [r3, #0]
   14356:	b29a      	uxth	r2, r3
   14358:	4b10      	ldr	r3, [pc, #64]	; (1439c <I2cWriteData+0x6c>)
   1435a:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   1435c:	687b      	ldr	r3, [r7, #4]
   1435e:	685a      	ldr	r2, [r3, #4]
   14360:	4b0e      	ldr	r3, [pc, #56]	; (1439c <I2cWriteData+0x6c>)
   14362:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   14364:	687b      	ldr	r3, [r7, #4]
   14366:	89da      	ldrh	r2, [r3, #14]
   14368:	4b0c      	ldr	r3, [pc, #48]	; (1439c <I2cWriteData+0x6c>)
   1436a:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   1436c:	230b      	movs	r3, #11
   1436e:	18fc      	adds	r4, r7, r3
   14370:	4a0a      	ldr	r2, [pc, #40]	; (1439c <I2cWriteData+0x6c>)
   14372:	4b0b      	ldr	r3, [pc, #44]	; (143a0 <I2cWriteData+0x70>)
   14374:	0011      	movs	r1, r2
   14376:	0018      	movs	r0, r3
   14378:	4b0a      	ldr	r3, [pc, #40]	; (143a4 <I2cWriteData+0x74>)
   1437a:	4798      	blx	r3
   1437c:	0003      	movs	r3, r0
   1437e:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14380:	230b      	movs	r3, #11
   14382:	18fb      	adds	r3, r7, r3
   14384:	781b      	ldrb	r3, [r3, #0]
   14386:	2b00      	cmp	r3, #0
   14388:	d003      	beq.n	14392 <I2cWriteData+0x62>
        error = ERROR_IO;
   1438a:	2306      	movs	r3, #6
   1438c:	425b      	negs	r3, r3
   1438e:	60fb      	str	r3, [r7, #12]
        goto exit;
   14390:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14392:	68fb      	ldr	r3, [r7, #12]
}
   14394:	0018      	movs	r0, r3
   14396:	46bd      	mov	sp, r7
   14398:	b005      	add	sp, #20
   1439a:	bd90      	pop	{r4, r7, pc}
   1439c:	20004804 	.word	0x20004804
   143a0:	200047d8 	.word	0x200047d8
   143a4:	00013535 	.word	0x00013535

000143a8 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   143a8:	b590      	push	{r4, r7, lr}
   143aa:	b085      	sub	sp, #20
   143ac:	af00      	add	r7, sp, #0
   143ae:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   143b0:	2300      	movs	r3, #0
   143b2:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   143b4:	687b      	ldr	r3, [r7, #4]
   143b6:	2b00      	cmp	r3, #0
   143b8:	d003      	beq.n	143c2 <I2cReadData+0x1a>
   143ba:	687b      	ldr	r3, [r7, #4]
   143bc:	685b      	ldr	r3, [r3, #4]
   143be:	2b00      	cmp	r3, #0
   143c0:	d103      	bne.n	143ca <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   143c2:	2308      	movs	r3, #8
   143c4:	425b      	negs	r3, r3
   143c6:	60fb      	str	r3, [r7, #12]
        goto exit;
   143c8:	e01f      	b.n	1440a <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   143ca:	687b      	ldr	r3, [r7, #4]
   143cc:	781b      	ldrb	r3, [r3, #0]
   143ce:	b29a      	uxth	r2, r3
   143d0:	4b10      	ldr	r3, [pc, #64]	; (14414 <I2cReadData+0x6c>)
   143d2:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   143d4:	687b      	ldr	r3, [r7, #4]
   143d6:	689a      	ldr	r2, [r3, #8]
   143d8:	4b0e      	ldr	r3, [pc, #56]	; (14414 <I2cReadData+0x6c>)
   143da:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   143dc:	687b      	ldr	r3, [r7, #4]
   143de:	899a      	ldrh	r2, [r3, #12]
   143e0:	4b0c      	ldr	r3, [pc, #48]	; (14414 <I2cReadData+0x6c>)
   143e2:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   143e4:	230b      	movs	r3, #11
   143e6:	18fc      	adds	r4, r7, r3
   143e8:	4a0a      	ldr	r2, [pc, #40]	; (14414 <I2cReadData+0x6c>)
   143ea:	4b0b      	ldr	r3, [pc, #44]	; (14418 <I2cReadData+0x70>)
   143ec:	0011      	movs	r1, r2
   143ee:	0018      	movs	r0, r3
   143f0:	4b0a      	ldr	r3, [pc, #40]	; (1441c <I2cReadData+0x74>)
   143f2:	4798      	blx	r3
   143f4:	0003      	movs	r3, r0
   143f6:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   143f8:	230b      	movs	r3, #11
   143fa:	18fb      	adds	r3, r7, r3
   143fc:	781b      	ldrb	r3, [r3, #0]
   143fe:	2b00      	cmp	r3, #0
   14400:	d003      	beq.n	1440a <I2cReadData+0x62>
        error = ERROR_IO;
   14402:	2306      	movs	r3, #6
   14404:	425b      	negs	r3, r3
   14406:	60fb      	str	r3, [r7, #12]
        goto exit;
   14408:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   1440a:	68fb      	ldr	r3, [r7, #12]
}
   1440c:	0018      	movs	r0, r3
   1440e:	46bd      	mov	sp, r7
   14410:	b005      	add	sp, #20
   14412:	bd90      	pop	{r4, r7, pc}
   14414:	20004804 	.word	0x20004804
   14418:	200047d8 	.word	0x200047d8
   1441c:	00013451 	.word	0x00013451

00014420 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   14420:	b590      	push	{r4, r7, lr}
   14422:	b083      	sub	sp, #12
   14424:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   14426:	2300      	movs	r3, #0
   14428:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   1442a:	4b09      	ldr	r3, [pc, #36]	; (14450 <I2cFreeMutex+0x30>)
   1442c:	6818      	ldr	r0, [r3, #0]
   1442e:	2300      	movs	r3, #0
   14430:	2200      	movs	r2, #0
   14432:	2100      	movs	r1, #0
   14434:	4c07      	ldr	r4, [pc, #28]	; (14454 <I2cFreeMutex+0x34>)
   14436:	47a0      	blx	r4
   14438:	0003      	movs	r3, r0
   1443a:	2b01      	cmp	r3, #1
   1443c:	d002      	beq.n	14444 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   1443e:	2314      	movs	r3, #20
   14440:	425b      	negs	r3, r3
   14442:	607b      	str	r3, [r7, #4]
    }
    return error;
   14444:	687b      	ldr	r3, [r7, #4]
}
   14446:	0018      	movs	r0, r3
   14448:	46bd      	mov	sp, r7
   1444a:	b003      	add	sp, #12
   1444c:	bd90      	pop	{r4, r7, pc}
   1444e:	46c0      	nop			; (mov r8, r8)
   14450:	200047d4 	.word	0x200047d4
   14454:	0001a62d 	.word	0x0001a62d

00014458 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   14458:	b580      	push	{r7, lr}
   1445a:	b084      	sub	sp, #16
   1445c:	af00      	add	r7, sp, #0
   1445e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14460:	2300      	movs	r3, #0
   14462:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   14464:	4b08      	ldr	r3, [pc, #32]	; (14488 <I2cGetMutex+0x30>)
   14466:	681b      	ldr	r3, [r3, #0]
   14468:	687a      	ldr	r2, [r7, #4]
   1446a:	0011      	movs	r1, r2
   1446c:	0018      	movs	r0, r3
   1446e:	4b07      	ldr	r3, [pc, #28]	; (1448c <I2cGetMutex+0x34>)
   14470:	4798      	blx	r3
   14472:	0003      	movs	r3, r0
   14474:	2b01      	cmp	r3, #1
   14476:	d002      	beq.n	1447e <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   14478:	231d      	movs	r3, #29
   1447a:	425b      	negs	r3, r3
   1447c:	60fb      	str	r3, [r7, #12]
    }
    return error;
   1447e:	68fb      	ldr	r3, [r7, #12]
}
   14480:	0018      	movs	r0, r3
   14482:	46bd      	mov	sp, r7
   14484:	b004      	add	sp, #16
   14486:	bd80      	pop	{r7, pc}
   14488:	200047d4 	.word	0x200047d4
   1448c:	0001b33d 	.word	0x0001b33d

00014490 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   14490:	b580      	push	{r7, lr}
   14492:	b084      	sub	sp, #16
   14494:	af00      	add	r7, sp, #0
   14496:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14498:	2300      	movs	r3, #0
   1449a:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   1449c:	4b04      	ldr	r3, [pc, #16]	; (144b0 <I2cGetSemaphoreHandle+0x20>)
   1449e:	681a      	ldr	r2, [r3, #0]
   144a0:	687b      	ldr	r3, [r7, #4]
   144a2:	601a      	str	r2, [r3, #0]
    return error;
   144a4:	68fb      	ldr	r3, [r7, #12]
}
   144a6:	0018      	movs	r0, r3
   144a8:	46bd      	mov	sp, r7
   144aa:	b004      	add	sp, #16
   144ac:	bd80      	pop	{r7, pc}
   144ae:	46c0      	nop			; (mov r8, r8)
   144b0:	20004800 	.word	0x20004800

000144b4 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   144b4:	b580      	push	{r7, lr}
   144b6:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   144b8:	4b02      	ldr	r3, [pc, #8]	; (144c4 <I2cGetTaskErrorStatus+0x10>)
   144ba:	781b      	ldrb	r3, [r3, #0]
}
   144bc:	0018      	movs	r0, r3
   144be:	46bd      	mov	sp, r7
   144c0:	bd80      	pop	{r7, pc}
   144c2:	46c0      	nop			; (mov r8, r8)
   144c4:	20000604 	.word	0x20000604

000144c8 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   144c8:	b580      	push	{r7, lr}
   144ca:	b082      	sub	sp, #8
   144cc:	af00      	add	r7, sp, #0
   144ce:	0002      	movs	r2, r0
   144d0:	1dfb      	adds	r3, r7, #7
   144d2:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   144d4:	4b03      	ldr	r3, [pc, #12]	; (144e4 <I2cSetTaskErrorStatus+0x1c>)
   144d6:	1dfa      	adds	r2, r7, #7
   144d8:	7812      	ldrb	r2, [r2, #0]
   144da:	701a      	strb	r2, [r3, #0]
}
   144dc:	46c0      	nop			; (mov r8, r8)
   144de:	46bd      	mov	sp, r7
   144e0:	b002      	add	sp, #8
   144e2:	bd80      	pop	{r7, pc}
   144e4:	20000604 	.word	0x20000604

000144e8 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   144e8:	b580      	push	{r7, lr}
   144ea:	b084      	sub	sp, #16
   144ec:	af00      	add	r7, sp, #0
   144ee:	6078      	str	r0, [r7, #4]
   144f0:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   144f2:	2300      	movs	r3, #0
   144f4:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   144f6:	2300      	movs	r3, #0
   144f8:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   144fa:	2396      	movs	r3, #150	; 0x96
   144fc:	005b      	lsls	r3, r3, #1
   144fe:	0018      	movs	r0, r3
   14500:	4b28      	ldr	r3, [pc, #160]	; (145a4 <I2cWriteDataWait+0xbc>)
   14502:	4798      	blx	r3
   14504:	0003      	movs	r3, r0
   14506:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14508:	68fb      	ldr	r3, [r7, #12]
   1450a:	2b00      	cmp	r3, #0
   1450c:	d138      	bne.n	14580 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   1450e:	2308      	movs	r3, #8
   14510:	18fb      	adds	r3, r7, r3
   14512:	0018      	movs	r0, r3
   14514:	4b24      	ldr	r3, [pc, #144]	; (145a8 <I2cWriteDataWait+0xc0>)
   14516:	4798      	blx	r3
   14518:	0003      	movs	r3, r0
   1451a:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   1451c:	68fb      	ldr	r3, [r7, #12]
   1451e:	2b00      	cmp	r3, #0
   14520:	d130      	bne.n	14584 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14522:	687b      	ldr	r3, [r7, #4]
   14524:	0018      	movs	r0, r3
   14526:	4b21      	ldr	r3, [pc, #132]	; (145ac <I2cWriteDataWait+0xc4>)
   14528:	4798      	blx	r3
   1452a:	0003      	movs	r3, r0
   1452c:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   1452e:	68fb      	ldr	r3, [r7, #12]
   14530:	2b00      	cmp	r3, #0
   14532:	d12a      	bne.n	1458a <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14534:	68bb      	ldr	r3, [r7, #8]
   14536:	683a      	ldr	r2, [r7, #0]
   14538:	0011      	movs	r1, r2
   1453a:	0018      	movs	r0, r3
   1453c:	4b1c      	ldr	r3, [pc, #112]	; (145b0 <I2cWriteDataWait+0xc8>)
   1453e:	4798      	blx	r3
   14540:	0003      	movs	r3, r0
   14542:	2b01      	cmp	r3, #1
   14544:	d111      	bne.n	1456a <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14546:	4b1b      	ldr	r3, [pc, #108]	; (145b4 <I2cWriteDataWait+0xcc>)
   14548:	4798      	blx	r3
   1454a:	1e03      	subs	r3, r0, #0
   1454c:	d011      	beq.n	14572 <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   1454e:	2000      	movs	r0, #0
   14550:	4b19      	ldr	r3, [pc, #100]	; (145b8 <I2cWriteDataWait+0xd0>)
   14552:	4798      	blx	r3
            if (error != ERROR_NONE) {
   14554:	68fb      	ldr	r3, [r7, #12]
   14556:	2b00      	cmp	r3, #0
   14558:	d003      	beq.n	14562 <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   1455a:	2321      	movs	r3, #33	; 0x21
   1455c:	425b      	negs	r3, r3
   1455e:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   14560:	e014      	b.n	1458c <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   14562:	2303      	movs	r3, #3
   14564:	425b      	negs	r3, r3
   14566:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   14568:	e010      	b.n	1458c <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   1456a:	2303      	movs	r3, #3
   1456c:	425b      	negs	r3, r3
   1456e:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   14570:	e00c      	b.n	1458c <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   14572:	4b12      	ldr	r3, [pc, #72]	; (145bc <I2cWriteDataWait+0xd4>)
   14574:	4798      	blx	r3
   14576:	0002      	movs	r2, r0
   14578:	68fb      	ldr	r3, [r7, #12]
   1457a:	4313      	orrs	r3, r2
   1457c:	60fb      	str	r3, [r7, #12]
   1457e:	e002      	b.n	14586 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   14580:	46c0      	nop			; (mov r8, r8)
   14582:	e000      	b.n	14586 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   14584:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   14586:	68fb      	ldr	r3, [r7, #12]
   14588:	e007      	b.n	1459a <I2cWriteDataWait+0xb2>
        goto exitError0;
   1458a:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   1458c:	4b0b      	ldr	r3, [pc, #44]	; (145bc <I2cWriteDataWait+0xd4>)
   1458e:	4798      	blx	r3
   14590:	0002      	movs	r2, r0
   14592:	68fb      	ldr	r3, [r7, #12]
   14594:	4313      	orrs	r3, r2
   14596:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   14598:	68fb      	ldr	r3, [r7, #12]
}
   1459a:	0018      	movs	r0, r3
   1459c:	46bd      	mov	sp, r7
   1459e:	b004      	add	sp, #16
   145a0:	bd80      	pop	{r7, pc}
   145a2:	46c0      	nop			; (mov r8, r8)
   145a4:	00014459 	.word	0x00014459
   145a8:	00014491 	.word	0x00014491
   145ac:	00014331 	.word	0x00014331
   145b0:	0001b33d 	.word	0x0001b33d
   145b4:	000144b5 	.word	0x000144b5
   145b8:	000144c9 	.word	0x000144c9
   145bc:	00014421 	.word	0x00014421

000145c0 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   145c0:	b580      	push	{r7, lr}
   145c2:	b086      	sub	sp, #24
   145c4:	af00      	add	r7, sp, #0
   145c6:	60f8      	str	r0, [r7, #12]
   145c8:	60b9      	str	r1, [r7, #8]
   145ca:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   145cc:	2300      	movs	r3, #0
   145ce:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   145d0:	2300      	movs	r3, #0
   145d2:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   145d4:	2396      	movs	r3, #150	; 0x96
   145d6:	005b      	lsls	r3, r3, #1
   145d8:	0018      	movs	r0, r3
   145da:	4b35      	ldr	r3, [pc, #212]	; (146b0 <I2cReadDataWait+0xf0>)
   145dc:	4798      	blx	r3
   145de:	0003      	movs	r3, r0
   145e0:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   145e2:	697b      	ldr	r3, [r7, #20]
   145e4:	2b00      	cmp	r3, #0
   145e6:	d155      	bne.n	14694 <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   145e8:	2310      	movs	r3, #16
   145ea:	18fb      	adds	r3, r7, r3
   145ec:	0018      	movs	r0, r3
   145ee:	4b31      	ldr	r3, [pc, #196]	; (146b4 <I2cReadDataWait+0xf4>)
   145f0:	4798      	blx	r3
   145f2:	0003      	movs	r3, r0
   145f4:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   145f6:	697b      	ldr	r3, [r7, #20]
   145f8:	2b00      	cmp	r3, #0
   145fa:	d14d      	bne.n	14698 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   145fc:	68fb      	ldr	r3, [r7, #12]
   145fe:	0018      	movs	r0, r3
   14600:	4b2d      	ldr	r3, [pc, #180]	; (146b8 <I2cReadDataWait+0xf8>)
   14602:	4798      	blx	r3
   14604:	0003      	movs	r3, r0
   14606:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14608:	697b      	ldr	r3, [r7, #20]
   1460a:	2b00      	cmp	r3, #0
   1460c:	d147      	bne.n	1469e <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1460e:	693b      	ldr	r3, [r7, #16]
   14610:	687a      	ldr	r2, [r7, #4]
   14612:	0011      	movs	r1, r2
   14614:	0018      	movs	r0, r3
   14616:	4b29      	ldr	r3, [pc, #164]	; (146bc <I2cReadDataWait+0xfc>)
   14618:	4798      	blx	r3
   1461a:	0003      	movs	r3, r0
   1461c:	2b01      	cmp	r3, #1
   1461e:	d118      	bne.n	14652 <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14620:	4b27      	ldr	r3, [pc, #156]	; (146c0 <I2cReadDataWait+0x100>)
   14622:	4798      	blx	r3
   14624:	1e03      	subs	r3, r0, #0
   14626:	d006      	beq.n	14636 <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   14628:	2000      	movs	r0, #0
   1462a:	4b26      	ldr	r3, [pc, #152]	; (146c4 <I2cReadDataWait+0x104>)
   1462c:	4798      	blx	r3
            error = ERROR_ABORTED;
   1462e:	2303      	movs	r3, #3
   14630:	425b      	negs	r3, r3
   14632:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14634:	e034      	b.n	146a0 <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   14636:	68bb      	ldr	r3, [r7, #8]
   14638:	0018      	movs	r0, r3
   1463a:	4b23      	ldr	r3, [pc, #140]	; (146c8 <I2cReadDataWait+0x108>)
   1463c:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   1463e:	68fb      	ldr	r3, [r7, #12]
   14640:	0018      	movs	r0, r3
   14642:	4b22      	ldr	r3, [pc, #136]	; (146cc <I2cReadDataWait+0x10c>)
   14644:	4798      	blx	r3
   14646:	0003      	movs	r3, r0
   14648:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   1464a:	697b      	ldr	r3, [r7, #20]
   1464c:	2b00      	cmp	r3, #0
   1464e:	d004      	beq.n	1465a <I2cReadDataWait+0x9a>
        goto exitError0;
   14650:	e026      	b.n	146a0 <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   14652:	2303      	movs	r3, #3
   14654:	425b      	negs	r3, r3
   14656:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14658:	e022      	b.n	146a0 <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1465a:	693b      	ldr	r3, [r7, #16]
   1465c:	687a      	ldr	r2, [r7, #4]
   1465e:	0011      	movs	r1, r2
   14660:	0018      	movs	r0, r3
   14662:	4b16      	ldr	r3, [pc, #88]	; (146bc <I2cReadDataWait+0xfc>)
   14664:	4798      	blx	r3
   14666:	0003      	movs	r3, r0
   14668:	2b01      	cmp	r3, #1
   1466a:	d10a      	bne.n	14682 <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   1466c:	4b14      	ldr	r3, [pc, #80]	; (146c0 <I2cReadDataWait+0x100>)
   1466e:	4798      	blx	r3
   14670:	1e03      	subs	r3, r0, #0
   14672:	d00a      	beq.n	1468a <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   14674:	2000      	movs	r0, #0
   14676:	4b13      	ldr	r3, [pc, #76]	; (146c4 <I2cReadDataWait+0x104>)
   14678:	4798      	blx	r3
            error = ERROR_ABORTED;
   1467a:	2303      	movs	r3, #3
   1467c:	425b      	negs	r3, r3
   1467e:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14680:	e00e      	b.n	146a0 <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14682:	2303      	movs	r3, #3
   14684:	425b      	negs	r3, r3
   14686:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14688:	e00a      	b.n	146a0 <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   1468a:	4b11      	ldr	r3, [pc, #68]	; (146d0 <I2cReadDataWait+0x110>)
   1468c:	4798      	blx	r3
   1468e:	0003      	movs	r3, r0
   14690:	617b      	str	r3, [r7, #20]
   14692:	e002      	b.n	1469a <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   14694:	46c0      	nop			; (mov r8, r8)
   14696:	e000      	b.n	1469a <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   14698:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   1469a:	697b      	ldr	r3, [r7, #20]
   1469c:	e003      	b.n	146a6 <I2cReadDataWait+0xe6>
        goto exitError0;
   1469e:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   146a0:	4b0b      	ldr	r3, [pc, #44]	; (146d0 <I2cReadDataWait+0x110>)
   146a2:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   146a4:	697b      	ldr	r3, [r7, #20]
}
   146a6:	0018      	movs	r0, r3
   146a8:	46bd      	mov	sp, r7
   146aa:	b006      	add	sp, #24
   146ac:	bd80      	pop	{r7, pc}
   146ae:	46c0      	nop			; (mov r8, r8)
   146b0:	00014459 	.word	0x00014459
   146b4:	00014491 	.word	0x00014491
   146b8:	00014331 	.word	0x00014331
   146bc:	0001b33d 	.word	0x0001b33d
   146c0:	000144b5 	.word	0x000144b5
   146c4:	000144c9 	.word	0x000144c9
   146c8:	0001c091 	.word	0x0001c091
   146cc:	000143a9 	.word	0x000143a9
   146d0:	00014421 	.word	0x00014421

000146d4 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   146d4:	b5b0      	push	{r4, r5, r7, lr}
   146d6:	b086      	sub	sp, #24
   146d8:	af00      	add	r7, sp, #0
   146da:	60f8      	str	r0, [r7, #12]
   146dc:	0008      	movs	r0, r1
   146de:	607a      	str	r2, [r7, #4]
   146e0:	0019      	movs	r1, r3
   146e2:	230b      	movs	r3, #11
   146e4:	18fb      	adds	r3, r7, r3
   146e6:	1c02      	adds	r2, r0, #0
   146e8:	701a      	strb	r2, [r3, #0]
   146ea:	2308      	movs	r3, #8
   146ec:	18fb      	adds	r3, r7, r3
   146ee:	1c0a      	adds	r2, r1, #0
   146f0:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   146f2:	68fb      	ldr	r3, [r7, #12]
   146f4:	685c      	ldr	r4, [r3, #4]
   146f6:	68fb      	ldr	r3, [r7, #12]
   146f8:	6898      	ldr	r0, [r3, #8]
   146fa:	2308      	movs	r3, #8
   146fc:	18fb      	adds	r3, r7, r3
   146fe:	881d      	ldrh	r5, [r3, #0]
   14700:	687a      	ldr	r2, [r7, #4]
   14702:	230b      	movs	r3, #11
   14704:	18fb      	adds	r3, r7, r3
   14706:	7819      	ldrb	r1, [r3, #0]
   14708:	002b      	movs	r3, r5
   1470a:	47a0      	blx	r4
   1470c:	0003      	movs	r3, r0
   1470e:	617b      	str	r3, [r7, #20]

  return ret;
   14710:	697b      	ldr	r3, [r7, #20]
}
   14712:	0018      	movs	r0, r3
   14714:	46bd      	mov	sp, r7
   14716:	b006      	add	sp, #24
   14718:	bdb0      	pop	{r4, r5, r7, pc}

0001471a <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   1471a:	b5b0      	push	{r4, r5, r7, lr}
   1471c:	b086      	sub	sp, #24
   1471e:	af00      	add	r7, sp, #0
   14720:	60f8      	str	r0, [r7, #12]
   14722:	0008      	movs	r0, r1
   14724:	607a      	str	r2, [r7, #4]
   14726:	0019      	movs	r1, r3
   14728:	230b      	movs	r3, #11
   1472a:	18fb      	adds	r3, r7, r3
   1472c:	1c02      	adds	r2, r0, #0
   1472e:	701a      	strb	r2, [r3, #0]
   14730:	2308      	movs	r3, #8
   14732:	18fb      	adds	r3, r7, r3
   14734:	1c0a      	adds	r2, r1, #0
   14736:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   14738:	68fb      	ldr	r3, [r7, #12]
   1473a:	681c      	ldr	r4, [r3, #0]
   1473c:	68fb      	ldr	r3, [r7, #12]
   1473e:	6898      	ldr	r0, [r3, #8]
   14740:	2308      	movs	r3, #8
   14742:	18fb      	adds	r3, r7, r3
   14744:	881d      	ldrh	r5, [r3, #0]
   14746:	687a      	ldr	r2, [r7, #4]
   14748:	230b      	movs	r3, #11
   1474a:	18fb      	adds	r3, r7, r3
   1474c:	7819      	ldrb	r1, [r3, #0]
   1474e:	002b      	movs	r3, r5
   14750:	47a0      	blx	r4
   14752:	0003      	movs	r3, r0
   14754:	617b      	str	r3, [r7, #20]

  return ret;
   14756:	697b      	ldr	r3, [r7, #20]
}
   14758:	0018      	movs	r0, r3
   1475a:	46bd      	mov	sp, r7
   1475c:	b006      	add	sp, #24
   1475e:	bdb0      	pop	{r4, r5, r7, pc}

00014760 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
   14760:	b580      	push	{r7, lr}
   14762:	b082      	sub	sp, #8
   14764:	af00      	add	r7, sp, #0
   14766:	0002      	movs	r2, r0
   14768:	1dbb      	adds	r3, r7, #6
   1476a:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
   1476c:	1dbb      	adds	r3, r7, #6
   1476e:	2200      	movs	r2, #0
   14770:	5e9a      	ldrsh	r2, [r3, r2]
   14772:	4b06      	ldr	r3, [pc, #24]	; (1478c <lsm6dso_from_fs2_to_mg+0x2c>)
   14774:	0010      	movs	r0, r2
   14776:	4798      	blx	r3
   14778:	1c02      	adds	r2, r0, #0
   1477a:	4b05      	ldr	r3, [pc, #20]	; (14790 <lsm6dso_from_fs2_to_mg+0x30>)
   1477c:	4905      	ldr	r1, [pc, #20]	; (14794 <lsm6dso_from_fs2_to_mg+0x34>)
   1477e:	1c10      	adds	r0, r2, #0
   14780:	4798      	blx	r3
   14782:	1c03      	adds	r3, r0, #0
}
   14784:	1c18      	adds	r0, r3, #0
   14786:	46bd      	mov	sp, r7
   14788:	b002      	add	sp, #8
   1478a:	bd80      	pop	{r7, pc}
   1478c:	00032dc5 	.word	0x00032dc5
   14790:	00032b45 	.word	0x00032b45
   14794:	3d79db23 	.word	0x3d79db23

00014798 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
   14798:	b590      	push	{r4, r7, lr}
   1479a:	b085      	sub	sp, #20
   1479c:	af00      	add	r7, sp, #0
   1479e:	6078      	str	r0, [r7, #4]
   147a0:	000a      	movs	r2, r1
   147a2:	1cfb      	adds	r3, r7, #3
   147a4:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   147a6:	2308      	movs	r3, #8
   147a8:	18fa      	adds	r2, r7, r3
   147aa:	6878      	ldr	r0, [r7, #4]
   147ac:	2301      	movs	r3, #1
   147ae:	2110      	movs	r1, #16
   147b0:	4c12      	ldr	r4, [pc, #72]	; (147fc <lsm6dso_xl_full_scale_set+0x64>)
   147b2:	47a0      	blx	r4
   147b4:	0003      	movs	r3, r0
   147b6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   147b8:	68fb      	ldr	r3, [r7, #12]
   147ba:	2b00      	cmp	r3, #0
   147bc:	d119      	bne.n	147f2 <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
   147be:	1cfb      	adds	r3, r7, #3
   147c0:	781b      	ldrb	r3, [r3, #0]
   147c2:	2203      	movs	r2, #3
   147c4:	4013      	ands	r3, r2
   147c6:	b2da      	uxtb	r2, r3
   147c8:	2308      	movs	r3, #8
   147ca:	18fb      	adds	r3, r7, r3
   147cc:	2103      	movs	r1, #3
   147ce:	400a      	ands	r2, r1
   147d0:	0090      	lsls	r0, r2, #2
   147d2:	781a      	ldrb	r2, [r3, #0]
   147d4:	210c      	movs	r1, #12
   147d6:	438a      	bics	r2, r1
   147d8:	1c11      	adds	r1, r2, #0
   147da:	1c02      	adds	r2, r0, #0
   147dc:	430a      	orrs	r2, r1
   147de:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   147e0:	2308      	movs	r3, #8
   147e2:	18fa      	adds	r2, r7, r3
   147e4:	6878      	ldr	r0, [r7, #4]
   147e6:	2301      	movs	r3, #1
   147e8:	2110      	movs	r1, #16
   147ea:	4c05      	ldr	r4, [pc, #20]	; (14800 <lsm6dso_xl_full_scale_set+0x68>)
   147ec:	47a0      	blx	r4
   147ee:	0003      	movs	r3, r0
   147f0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   147f2:	68fb      	ldr	r3, [r7, #12]
}
   147f4:	0018      	movs	r0, r3
   147f6:	46bd      	mov	sp, r7
   147f8:	b005      	add	sp, #20
   147fa:	bd90      	pop	{r4, r7, pc}
   147fc:	000146d5 	.word	0x000146d5
   14800:	0001471b 	.word	0x0001471b

00014804 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
   14804:	b590      	push	{r4, r7, lr}
   14806:	b087      	sub	sp, #28
   14808:	af00      	add	r7, sp, #0
   1480a:	6078      	str	r0, [r7, #4]
   1480c:	000a      	movs	r2, r1
   1480e:	1cfb      	adds	r3, r7, #3
   14810:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
   14812:	2317      	movs	r3, #23
   14814:	18fb      	adds	r3, r7, r3
   14816:	1cfa      	adds	r2, r7, #3
   14818:	7812      	ldrb	r2, [r2, #0]
   1481a:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   1481c:	230c      	movs	r3, #12
   1481e:	18fa      	adds	r2, r7, r3
   14820:	687b      	ldr	r3, [r7, #4]
   14822:	0011      	movs	r1, r2
   14824:	0018      	movs	r0, r3
   14826:	4ba4      	ldr	r3, [pc, #656]	; (14ab8 <lsm6dso_xl_data_rate_set+0x2b4>)
   14828:	4798      	blx	r3
   1482a:	0003      	movs	r3, r0
   1482c:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   1482e:	693b      	ldr	r3, [r7, #16]
   14830:	2b00      	cmp	r3, #0
   14832:	d000      	beq.n	14836 <lsm6dso_xl_data_rate_set+0x32>
   14834:	e113      	b.n	14a5e <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14836:	230c      	movs	r3, #12
   14838:	18fb      	adds	r3, r7, r3
   1483a:	781b      	ldrb	r3, [r3, #0]
   1483c:	07db      	lsls	r3, r3, #31
   1483e:	0fdb      	lsrs	r3, r3, #31
   14840:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   14842:	230c      	movs	r3, #12
   14844:	18fb      	adds	r3, r7, r3
   14846:	781b      	ldrb	r3, [r3, #0]
   14848:	079b      	lsls	r3, r3, #30
   1484a:	0fdb      	lsrs	r3, r3, #31
   1484c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1484e:	4313      	orrs	r3, r2
   14850:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   14852:	230c      	movs	r3, #12
   14854:	18fb      	adds	r3, r7, r3
   14856:	781b      	ldrb	r3, [r3, #0]
   14858:	075b      	lsls	r3, r3, #29
   1485a:	0fdb      	lsrs	r3, r3, #31
   1485c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1485e:	4313      	orrs	r3, r2
   14860:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   14862:	230c      	movs	r3, #12
   14864:	18fb      	adds	r3, r7, r3
   14866:	781b      	ldrb	r3, [r3, #0]
   14868:	071b      	lsls	r3, r3, #28
   1486a:	0fdb      	lsrs	r3, r3, #31
   1486c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   1486e:	4313      	orrs	r3, r2
   14870:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   14872:	230c      	movs	r3, #12
   14874:	18fb      	adds	r3, r7, r3
   14876:	781b      	ldrb	r3, [r3, #0]
   14878:	06db      	lsls	r3, r3, #27
   1487a:	0fdb      	lsrs	r3, r3, #31
   1487c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   1487e:	4313      	orrs	r3, r2
   14880:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   14882:	230c      	movs	r3, #12
   14884:	18fb      	adds	r3, r7, r3
   14886:	781b      	ldrb	r3, [r3, #0]
   14888:	069b      	lsls	r3, r3, #26
   1488a:	0fdb      	lsrs	r3, r3, #31
   1488c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   1488e:	4313      	orrs	r3, r2
   14890:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   14892:	230c      	movs	r3, #12
   14894:	18fb      	adds	r3, r7, r3
   14896:	781b      	ldrb	r3, [r3, #0]
   14898:	065b      	lsls	r3, r3, #25
   1489a:	0fdb      	lsrs	r3, r3, #31
   1489c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   1489e:	4313      	orrs	r3, r2
   148a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   148a2:	230c      	movs	r3, #12
   148a4:	18fb      	adds	r3, r7, r3
   148a6:	781b      	ldrb	r3, [r3, #0]
   148a8:	061b      	lsls	r3, r3, #24
   148aa:	0fdb      	lsrs	r3, r3, #31
   148ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   148ae:	4313      	orrs	r3, r2
   148b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   148b2:	230c      	movs	r3, #12
   148b4:	18fb      	adds	r3, r7, r3
   148b6:	785b      	ldrb	r3, [r3, #1]
   148b8:	07db      	lsls	r3, r3, #31
   148ba:	0fdb      	lsrs	r3, r3, #31
   148bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   148be:	4313      	orrs	r3, r2
   148c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   148c2:	230c      	movs	r3, #12
   148c4:	18fb      	adds	r3, r7, r3
   148c6:	785b      	ldrb	r3, [r3, #1]
   148c8:	079b      	lsls	r3, r3, #30
   148ca:	0fdb      	lsrs	r3, r3, #31
   148cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   148ce:	4313      	orrs	r3, r2
   148d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   148d2:	230c      	movs	r3, #12
   148d4:	18fb      	adds	r3, r7, r3
   148d6:	785b      	ldrb	r3, [r3, #1]
   148d8:	075b      	lsls	r3, r3, #29
   148da:	0fdb      	lsrs	r3, r3, #31
   148dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   148de:	4313      	orrs	r3, r2
   148e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   148e2:	230c      	movs	r3, #12
   148e4:	18fb      	adds	r3, r7, r3
   148e6:	785b      	ldrb	r3, [r3, #1]
   148e8:	071b      	lsls	r3, r3, #28
   148ea:	0fdb      	lsrs	r3, r3, #31
   148ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   148ee:	4313      	orrs	r3, r2
   148f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   148f2:	230c      	movs	r3, #12
   148f4:	18fb      	adds	r3, r7, r3
   148f6:	785b      	ldrb	r3, [r3, #1]
   148f8:	06db      	lsls	r3, r3, #27
   148fa:	0fdb      	lsrs	r3, r3, #31
   148fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   148fe:	4313      	orrs	r3, r2
   14900:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   14902:	230c      	movs	r3, #12
   14904:	18fb      	adds	r3, r7, r3
   14906:	785b      	ldrb	r3, [r3, #1]
   14908:	069b      	lsls	r3, r3, #26
   1490a:	0fdb      	lsrs	r3, r3, #31
   1490c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   1490e:	4313      	orrs	r3, r2
   14910:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   14912:	230c      	movs	r3, #12
   14914:	18fb      	adds	r3, r7, r3
   14916:	785b      	ldrb	r3, [r3, #1]
   14918:	065b      	lsls	r3, r3, #25
   1491a:	0fdb      	lsrs	r3, r3, #31
   1491c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   1491e:	4313      	orrs	r3, r2
   14920:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   14922:	230c      	movs	r3, #12
   14924:	18fb      	adds	r3, r7, r3
   14926:	785b      	ldrb	r3, [r3, #1]
   14928:	061b      	lsls	r3, r3, #24
   1492a:	0fdb      	lsrs	r3, r3, #31
   1492c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   1492e:	4313      	orrs	r3, r2
   14930:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14932:	2b01      	cmp	r3, #1
   14934:	d000      	beq.n	14938 <lsm6dso_xl_data_rate_set+0x134>
   14936:	e092      	b.n	14a5e <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   14938:	230b      	movs	r3, #11
   1493a:	18fa      	adds	r2, r7, r3
   1493c:	687b      	ldr	r3, [r7, #4]
   1493e:	0011      	movs	r1, r2
   14940:	0018      	movs	r0, r3
   14942:	4b5e      	ldr	r3, [pc, #376]	; (14abc <lsm6dso_xl_data_rate_set+0x2b8>)
   14944:	4798      	blx	r3
   14946:	0003      	movs	r3, r0
   14948:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   1494a:	693b      	ldr	r3, [r7, #16]
   1494c:	2b00      	cmp	r3, #0
   1494e:	d000      	beq.n	14952 <lsm6dso_xl_data_rate_set+0x14e>
   14950:	e085      	b.n	14a5e <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   14952:	230b      	movs	r3, #11
   14954:	18fb      	adds	r3, r7, r3
   14956:	781b      	ldrb	r3, [r3, #0]
   14958:	2b01      	cmp	r3, #1
   1495a:	d017      	beq.n	1498c <lsm6dso_xl_data_rate_set+0x188>
   1495c:	dc02      	bgt.n	14964 <lsm6dso_xl_data_rate_set+0x160>
   1495e:	2b00      	cmp	r3, #0
   14960:	d005      	beq.n	1496e <lsm6dso_xl_data_rate_set+0x16a>
   14962:	e076      	b.n	14a52 <lsm6dso_xl_data_rate_set+0x24e>
   14964:	2b02      	cmp	r3, #2
   14966:	d029      	beq.n	149bc <lsm6dso_xl_data_rate_set+0x1b8>
   14968:	2b03      	cmp	r3, #3
   1496a:	d048      	beq.n	149fe <lsm6dso_xl_data_rate_set+0x1fa>
   1496c:	e071      	b.n	14a52 <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
   1496e:	1cfb      	adds	r3, r7, #3
   14970:	781b      	ldrb	r3, [r3, #0]
   14972:	2b00      	cmp	r3, #0
   14974:	d104      	bne.n	14980 <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
   14976:	2317      	movs	r3, #23
   14978:	18fb      	adds	r3, r7, r3
   1497a:	2201      	movs	r2, #1
   1497c:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   1497e:	e06e      	b.n	14a5e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14980:	2317      	movs	r3, #23
   14982:	18fb      	adds	r3, r7, r3
   14984:	1cfa      	adds	r2, r7, #3
   14986:	7812      	ldrb	r2, [r2, #0]
   14988:	701a      	strb	r2, [r3, #0]
            break;
   1498a:	e068      	b.n	14a5e <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   1498c:	1cfb      	adds	r3, r7, #3
   1498e:	781b      	ldrb	r3, [r3, #0]
   14990:	2b00      	cmp	r3, #0
   14992:	d104      	bne.n	1499e <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   14994:	2317      	movs	r3, #23
   14996:	18fb      	adds	r3, r7, r3
   14998:	2202      	movs	r2, #2
   1499a:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   1499c:	e05f      	b.n	14a5e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   1499e:	1cfb      	adds	r3, r7, #3
   149a0:	781b      	ldrb	r3, [r3, #0]
   149a2:	2b01      	cmp	r3, #1
   149a4:	d104      	bne.n	149b0 <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   149a6:	2317      	movs	r3, #23
   149a8:	18fb      	adds	r3, r7, r3
   149aa:	2202      	movs	r2, #2
   149ac:	701a      	strb	r2, [r3, #0]
            break;
   149ae:	e056      	b.n	14a5e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   149b0:	2317      	movs	r3, #23
   149b2:	18fb      	adds	r3, r7, r3
   149b4:	1cfa      	adds	r2, r7, #3
   149b6:	7812      	ldrb	r2, [r2, #0]
   149b8:	701a      	strb	r2, [r3, #0]
            break;
   149ba:	e050      	b.n	14a5e <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   149bc:	1cfb      	adds	r3, r7, #3
   149be:	781b      	ldrb	r3, [r3, #0]
   149c0:	2b00      	cmp	r3, #0
   149c2:	d104      	bne.n	149ce <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   149c4:	2317      	movs	r3, #23
   149c6:	18fb      	adds	r3, r7, r3
   149c8:	2203      	movs	r2, #3
   149ca:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   149cc:	e047      	b.n	14a5e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   149ce:	1cfb      	adds	r3, r7, #3
   149d0:	781b      	ldrb	r3, [r3, #0]
   149d2:	2b01      	cmp	r3, #1
   149d4:	d104      	bne.n	149e0 <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   149d6:	2317      	movs	r3, #23
   149d8:	18fb      	adds	r3, r7, r3
   149da:	2203      	movs	r2, #3
   149dc:	701a      	strb	r2, [r3, #0]
            break;
   149de:	e03e      	b.n	14a5e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   149e0:	1cfb      	adds	r3, r7, #3
   149e2:	781b      	ldrb	r3, [r3, #0]
   149e4:	2b02      	cmp	r3, #2
   149e6:	d104      	bne.n	149f2 <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   149e8:	2317      	movs	r3, #23
   149ea:	18fb      	adds	r3, r7, r3
   149ec:	2203      	movs	r2, #3
   149ee:	701a      	strb	r2, [r3, #0]
            break;
   149f0:	e035      	b.n	14a5e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   149f2:	2317      	movs	r3, #23
   149f4:	18fb      	adds	r3, r7, r3
   149f6:	1cfa      	adds	r2, r7, #3
   149f8:	7812      	ldrb	r2, [r2, #0]
   149fa:	701a      	strb	r2, [r3, #0]
            break;
   149fc:	e02f      	b.n	14a5e <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   149fe:	1cfb      	adds	r3, r7, #3
   14a00:	781b      	ldrb	r3, [r3, #0]
   14a02:	2b00      	cmp	r3, #0
   14a04:	d104      	bne.n	14a10 <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14a06:	2317      	movs	r3, #23
   14a08:	18fb      	adds	r3, r7, r3
   14a0a:	2204      	movs	r2, #4
   14a0c:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14a0e:	e026      	b.n	14a5e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   14a10:	1cfb      	adds	r3, r7, #3
   14a12:	781b      	ldrb	r3, [r3, #0]
   14a14:	2b01      	cmp	r3, #1
   14a16:	d104      	bne.n	14a22 <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14a18:	2317      	movs	r3, #23
   14a1a:	18fb      	adds	r3, r7, r3
   14a1c:	2204      	movs	r2, #4
   14a1e:	701a      	strb	r2, [r3, #0]
            break;
   14a20:	e01d      	b.n	14a5e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   14a22:	1cfb      	adds	r3, r7, #3
   14a24:	781b      	ldrb	r3, [r3, #0]
   14a26:	2b02      	cmp	r3, #2
   14a28:	d104      	bne.n	14a34 <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14a2a:	2317      	movs	r3, #23
   14a2c:	18fb      	adds	r3, r7, r3
   14a2e:	2204      	movs	r2, #4
   14a30:	701a      	strb	r2, [r3, #0]
            break;
   14a32:	e014      	b.n	14a5e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
   14a34:	1cfb      	adds	r3, r7, #3
   14a36:	781b      	ldrb	r3, [r3, #0]
   14a38:	2b03      	cmp	r3, #3
   14a3a:	d104      	bne.n	14a46 <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14a3c:	2317      	movs	r3, #23
   14a3e:	18fb      	adds	r3, r7, r3
   14a40:	2204      	movs	r2, #4
   14a42:	701a      	strb	r2, [r3, #0]
            break;
   14a44:	e00b      	b.n	14a5e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14a46:	2317      	movs	r3, #23
   14a48:	18fb      	adds	r3, r7, r3
   14a4a:	1cfa      	adds	r2, r7, #3
   14a4c:	7812      	ldrb	r2, [r2, #0]
   14a4e:	701a      	strb	r2, [r3, #0]
            break;
   14a50:	e005      	b.n	14a5e <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
   14a52:	2317      	movs	r3, #23
   14a54:	18fb      	adds	r3, r7, r3
   14a56:	1cfa      	adds	r2, r7, #3
   14a58:	7812      	ldrb	r2, [r2, #0]
   14a5a:	701a      	strb	r2, [r3, #0]
            break;
   14a5c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   14a5e:	693b      	ldr	r3, [r7, #16]
   14a60:	2b00      	cmp	r3, #0
   14a62:	d108      	bne.n	14a76 <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14a64:	2308      	movs	r3, #8
   14a66:	18fa      	adds	r2, r7, r3
   14a68:	6878      	ldr	r0, [r7, #4]
   14a6a:	2301      	movs	r3, #1
   14a6c:	2110      	movs	r1, #16
   14a6e:	4c14      	ldr	r4, [pc, #80]	; (14ac0 <lsm6dso_xl_data_rate_set+0x2bc>)
   14a70:	47a0      	blx	r4
   14a72:	0003      	movs	r3, r0
   14a74:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   14a76:	693b      	ldr	r3, [r7, #16]
   14a78:	2b00      	cmp	r3, #0
   14a7a:	d118      	bne.n	14aae <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
   14a7c:	2317      	movs	r3, #23
   14a7e:	18fb      	adds	r3, r7, r3
   14a80:	781b      	ldrb	r3, [r3, #0]
   14a82:	220f      	movs	r2, #15
   14a84:	4013      	ands	r3, r2
   14a86:	b2da      	uxtb	r2, r3
   14a88:	2308      	movs	r3, #8
   14a8a:	18fb      	adds	r3, r7, r3
   14a8c:	0110      	lsls	r0, r2, #4
   14a8e:	781a      	ldrb	r2, [r3, #0]
   14a90:	210f      	movs	r1, #15
   14a92:	400a      	ands	r2, r1
   14a94:	1c11      	adds	r1, r2, #0
   14a96:	1c02      	adds	r2, r0, #0
   14a98:	430a      	orrs	r2, r1
   14a9a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14a9c:	2308      	movs	r3, #8
   14a9e:	18fa      	adds	r2, r7, r3
   14aa0:	6878      	ldr	r0, [r7, #4]
   14aa2:	2301      	movs	r3, #1
   14aa4:	2110      	movs	r1, #16
   14aa6:	4c07      	ldr	r4, [pc, #28]	; (14ac4 <lsm6dso_xl_data_rate_set+0x2c0>)
   14aa8:	47a0      	blx	r4
   14aaa:	0003      	movs	r3, r0
   14aac:	613b      	str	r3, [r7, #16]
  }

  return ret;
   14aae:	693b      	ldr	r3, [r7, #16]
}
   14ab0:	0018      	movs	r0, r3
   14ab2:	46bd      	mov	sp, r7
   14ab4:	b007      	add	sp, #28
   14ab6:	bd90      	pop	{r4, r7, pc}
   14ab8:	000152e1 	.word	0x000152e1
   14abc:	00015335 	.word	0x00015335
   14ac0:	000146d5 	.word	0x000146d5
   14ac4:	0001471b 	.word	0x0001471b

00014ac8 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
   14ac8:	b590      	push	{r4, r7, lr}
   14aca:	b085      	sub	sp, #20
   14acc:	af00      	add	r7, sp, #0
   14ace:	6078      	str	r0, [r7, #4]
   14ad0:	000a      	movs	r2, r1
   14ad2:	1cfb      	adds	r3, r7, #3
   14ad4:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   14ad6:	2308      	movs	r3, #8
   14ad8:	18fa      	adds	r2, r7, r3
   14ada:	6878      	ldr	r0, [r7, #4]
   14adc:	2301      	movs	r3, #1
   14ade:	2111      	movs	r1, #17
   14ae0:	4c12      	ldr	r4, [pc, #72]	; (14b2c <lsm6dso_gy_full_scale_set+0x64>)
   14ae2:	47a0      	blx	r4
   14ae4:	0003      	movs	r3, r0
   14ae6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14ae8:	68fb      	ldr	r3, [r7, #12]
   14aea:	2b00      	cmp	r3, #0
   14aec:	d119      	bne.n	14b22 <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
   14aee:	1cfb      	adds	r3, r7, #3
   14af0:	781b      	ldrb	r3, [r3, #0]
   14af2:	2207      	movs	r2, #7
   14af4:	4013      	ands	r3, r2
   14af6:	b2da      	uxtb	r2, r3
   14af8:	2308      	movs	r3, #8
   14afa:	18fb      	adds	r3, r7, r3
   14afc:	2107      	movs	r1, #7
   14afe:	400a      	ands	r2, r1
   14b00:	1890      	adds	r0, r2, r2
   14b02:	781a      	ldrb	r2, [r3, #0]
   14b04:	210e      	movs	r1, #14
   14b06:	438a      	bics	r2, r1
   14b08:	1c11      	adds	r1, r2, #0
   14b0a:	1c02      	adds	r2, r0, #0
   14b0c:	430a      	orrs	r2, r1
   14b0e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   14b10:	2308      	movs	r3, #8
   14b12:	18fa      	adds	r2, r7, r3
   14b14:	6878      	ldr	r0, [r7, #4]
   14b16:	2301      	movs	r3, #1
   14b18:	2111      	movs	r1, #17
   14b1a:	4c05      	ldr	r4, [pc, #20]	; (14b30 <lsm6dso_gy_full_scale_set+0x68>)
   14b1c:	47a0      	blx	r4
   14b1e:	0003      	movs	r3, r0
   14b20:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14b22:	68fb      	ldr	r3, [r7, #12]
}
   14b24:	0018      	movs	r0, r3
   14b26:	46bd      	mov	sp, r7
   14b28:	b005      	add	sp, #20
   14b2a:	bd90      	pop	{r4, r7, pc}
   14b2c:	000146d5 	.word	0x000146d5
   14b30:	0001471b 	.word	0x0001471b

00014b34 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
   14b34:	b590      	push	{r4, r7, lr}
   14b36:	b087      	sub	sp, #28
   14b38:	af00      	add	r7, sp, #0
   14b3a:	6078      	str	r0, [r7, #4]
   14b3c:	000a      	movs	r2, r1
   14b3e:	1cfb      	adds	r3, r7, #3
   14b40:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
   14b42:	2317      	movs	r3, #23
   14b44:	18fb      	adds	r3, r7, r3
   14b46:	1cfa      	adds	r2, r7, #3
   14b48:	7812      	ldrb	r2, [r2, #0]
   14b4a:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   14b4c:	230c      	movs	r3, #12
   14b4e:	18fa      	adds	r2, r7, r3
   14b50:	687b      	ldr	r3, [r7, #4]
   14b52:	0011      	movs	r1, r2
   14b54:	0018      	movs	r0, r3
   14b56:	4ba4      	ldr	r3, [pc, #656]	; (14de8 <lsm6dso_gy_data_rate_set+0x2b4>)
   14b58:	4798      	blx	r3
   14b5a:	0003      	movs	r3, r0
   14b5c:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   14b5e:	693b      	ldr	r3, [r7, #16]
   14b60:	2b00      	cmp	r3, #0
   14b62:	d000      	beq.n	14b66 <lsm6dso_gy_data_rate_set+0x32>
   14b64:	e113      	b.n	14d8e <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14b66:	230c      	movs	r3, #12
   14b68:	18fb      	adds	r3, r7, r3
   14b6a:	781b      	ldrb	r3, [r3, #0]
   14b6c:	07db      	lsls	r3, r3, #31
   14b6e:	0fdb      	lsrs	r3, r3, #31
   14b70:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   14b72:	230c      	movs	r3, #12
   14b74:	18fb      	adds	r3, r7, r3
   14b76:	781b      	ldrb	r3, [r3, #0]
   14b78:	079b      	lsls	r3, r3, #30
   14b7a:	0fdb      	lsrs	r3, r3, #31
   14b7c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14b7e:	4313      	orrs	r3, r2
   14b80:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   14b82:	230c      	movs	r3, #12
   14b84:	18fb      	adds	r3, r7, r3
   14b86:	781b      	ldrb	r3, [r3, #0]
   14b88:	075b      	lsls	r3, r3, #29
   14b8a:	0fdb      	lsrs	r3, r3, #31
   14b8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   14b8e:	4313      	orrs	r3, r2
   14b90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   14b92:	230c      	movs	r3, #12
   14b94:	18fb      	adds	r3, r7, r3
   14b96:	781b      	ldrb	r3, [r3, #0]
   14b98:	071b      	lsls	r3, r3, #28
   14b9a:	0fdb      	lsrs	r3, r3, #31
   14b9c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   14b9e:	4313      	orrs	r3, r2
   14ba0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   14ba2:	230c      	movs	r3, #12
   14ba4:	18fb      	adds	r3, r7, r3
   14ba6:	781b      	ldrb	r3, [r3, #0]
   14ba8:	06db      	lsls	r3, r3, #27
   14baa:	0fdb      	lsrs	r3, r3, #31
   14bac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   14bae:	4313      	orrs	r3, r2
   14bb0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   14bb2:	230c      	movs	r3, #12
   14bb4:	18fb      	adds	r3, r7, r3
   14bb6:	781b      	ldrb	r3, [r3, #0]
   14bb8:	069b      	lsls	r3, r3, #26
   14bba:	0fdb      	lsrs	r3, r3, #31
   14bbc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   14bbe:	4313      	orrs	r3, r2
   14bc0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   14bc2:	230c      	movs	r3, #12
   14bc4:	18fb      	adds	r3, r7, r3
   14bc6:	781b      	ldrb	r3, [r3, #0]
   14bc8:	065b      	lsls	r3, r3, #25
   14bca:	0fdb      	lsrs	r3, r3, #31
   14bcc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   14bce:	4313      	orrs	r3, r2
   14bd0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   14bd2:	230c      	movs	r3, #12
   14bd4:	18fb      	adds	r3, r7, r3
   14bd6:	781b      	ldrb	r3, [r3, #0]
   14bd8:	061b      	lsls	r3, r3, #24
   14bda:	0fdb      	lsrs	r3, r3, #31
   14bdc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   14bde:	4313      	orrs	r3, r2
   14be0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   14be2:	230c      	movs	r3, #12
   14be4:	18fb      	adds	r3, r7, r3
   14be6:	785b      	ldrb	r3, [r3, #1]
   14be8:	07db      	lsls	r3, r3, #31
   14bea:	0fdb      	lsrs	r3, r3, #31
   14bec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   14bee:	4313      	orrs	r3, r2
   14bf0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   14bf2:	230c      	movs	r3, #12
   14bf4:	18fb      	adds	r3, r7, r3
   14bf6:	785b      	ldrb	r3, [r3, #1]
   14bf8:	079b      	lsls	r3, r3, #30
   14bfa:	0fdb      	lsrs	r3, r3, #31
   14bfc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   14bfe:	4313      	orrs	r3, r2
   14c00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   14c02:	230c      	movs	r3, #12
   14c04:	18fb      	adds	r3, r7, r3
   14c06:	785b      	ldrb	r3, [r3, #1]
   14c08:	075b      	lsls	r3, r3, #29
   14c0a:	0fdb      	lsrs	r3, r3, #31
   14c0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   14c0e:	4313      	orrs	r3, r2
   14c10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   14c12:	230c      	movs	r3, #12
   14c14:	18fb      	adds	r3, r7, r3
   14c16:	785b      	ldrb	r3, [r3, #1]
   14c18:	071b      	lsls	r3, r3, #28
   14c1a:	0fdb      	lsrs	r3, r3, #31
   14c1c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   14c1e:	4313      	orrs	r3, r2
   14c20:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   14c22:	230c      	movs	r3, #12
   14c24:	18fb      	adds	r3, r7, r3
   14c26:	785b      	ldrb	r3, [r3, #1]
   14c28:	06db      	lsls	r3, r3, #27
   14c2a:	0fdb      	lsrs	r3, r3, #31
   14c2c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   14c2e:	4313      	orrs	r3, r2
   14c30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   14c32:	230c      	movs	r3, #12
   14c34:	18fb      	adds	r3, r7, r3
   14c36:	785b      	ldrb	r3, [r3, #1]
   14c38:	069b      	lsls	r3, r3, #26
   14c3a:	0fdb      	lsrs	r3, r3, #31
   14c3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   14c3e:	4313      	orrs	r3, r2
   14c40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   14c42:	230c      	movs	r3, #12
   14c44:	18fb      	adds	r3, r7, r3
   14c46:	785b      	ldrb	r3, [r3, #1]
   14c48:	065b      	lsls	r3, r3, #25
   14c4a:	0fdb      	lsrs	r3, r3, #31
   14c4c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   14c4e:	4313      	orrs	r3, r2
   14c50:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   14c52:	230c      	movs	r3, #12
   14c54:	18fb      	adds	r3, r7, r3
   14c56:	785b      	ldrb	r3, [r3, #1]
   14c58:	061b      	lsls	r3, r3, #24
   14c5a:	0fdb      	lsrs	r3, r3, #31
   14c5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   14c5e:	4313      	orrs	r3, r2
   14c60:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14c62:	2b01      	cmp	r3, #1
   14c64:	d000      	beq.n	14c68 <lsm6dso_gy_data_rate_set+0x134>
   14c66:	e092      	b.n	14d8e <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   14c68:	230b      	movs	r3, #11
   14c6a:	18fa      	adds	r2, r7, r3
   14c6c:	687b      	ldr	r3, [r7, #4]
   14c6e:	0011      	movs	r1, r2
   14c70:	0018      	movs	r0, r3
   14c72:	4b5e      	ldr	r3, [pc, #376]	; (14dec <lsm6dso_gy_data_rate_set+0x2b8>)
   14c74:	4798      	blx	r3
   14c76:	0003      	movs	r3, r0
   14c78:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   14c7a:	693b      	ldr	r3, [r7, #16]
   14c7c:	2b00      	cmp	r3, #0
   14c7e:	d000      	beq.n	14c82 <lsm6dso_gy_data_rate_set+0x14e>
   14c80:	e085      	b.n	14d8e <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   14c82:	230b      	movs	r3, #11
   14c84:	18fb      	adds	r3, r7, r3
   14c86:	781b      	ldrb	r3, [r3, #0]
   14c88:	2b01      	cmp	r3, #1
   14c8a:	d017      	beq.n	14cbc <lsm6dso_gy_data_rate_set+0x188>
   14c8c:	dc02      	bgt.n	14c94 <lsm6dso_gy_data_rate_set+0x160>
   14c8e:	2b00      	cmp	r3, #0
   14c90:	d005      	beq.n	14c9e <lsm6dso_gy_data_rate_set+0x16a>
   14c92:	e076      	b.n	14d82 <lsm6dso_gy_data_rate_set+0x24e>
   14c94:	2b02      	cmp	r3, #2
   14c96:	d029      	beq.n	14cec <lsm6dso_gy_data_rate_set+0x1b8>
   14c98:	2b03      	cmp	r3, #3
   14c9a:	d048      	beq.n	14d2e <lsm6dso_gy_data_rate_set+0x1fa>
   14c9c:	e071      	b.n	14d82 <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
   14c9e:	1cfb      	adds	r3, r7, #3
   14ca0:	781b      	ldrb	r3, [r3, #0]
   14ca2:	2b00      	cmp	r3, #0
   14ca4:	d104      	bne.n	14cb0 <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
   14ca6:	2317      	movs	r3, #23
   14ca8:	18fb      	adds	r3, r7, r3
   14caa:	2201      	movs	r2, #1
   14cac:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   14cae:	e06e      	b.n	14d8e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   14cb0:	2317      	movs	r3, #23
   14cb2:	18fb      	adds	r3, r7, r3
   14cb4:	1cfa      	adds	r2, r7, #3
   14cb6:	7812      	ldrb	r2, [r2, #0]
   14cb8:	701a      	strb	r2, [r3, #0]
            break;
   14cba:	e068      	b.n	14d8e <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   14cbc:	1cfb      	adds	r3, r7, #3
   14cbe:	781b      	ldrb	r3, [r3, #0]
   14cc0:	2b00      	cmp	r3, #0
   14cc2:	d104      	bne.n	14cce <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   14cc4:	2317      	movs	r3, #23
   14cc6:	18fb      	adds	r3, r7, r3
   14cc8:	2202      	movs	r2, #2
   14cca:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   14ccc:	e05f      	b.n	14d8e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   14cce:	1cfb      	adds	r3, r7, #3
   14cd0:	781b      	ldrb	r3, [r3, #0]
   14cd2:	2b01      	cmp	r3, #1
   14cd4:	d104      	bne.n	14ce0 <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   14cd6:	2317      	movs	r3, #23
   14cd8:	18fb      	adds	r3, r7, r3
   14cda:	2202      	movs	r2, #2
   14cdc:	701a      	strb	r2, [r3, #0]
            break;
   14cde:	e056      	b.n	14d8e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   14ce0:	2317      	movs	r3, #23
   14ce2:	18fb      	adds	r3, r7, r3
   14ce4:	1cfa      	adds	r2, r7, #3
   14ce6:	7812      	ldrb	r2, [r2, #0]
   14ce8:	701a      	strb	r2, [r3, #0]
            break;
   14cea:	e050      	b.n	14d8e <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   14cec:	1cfb      	adds	r3, r7, #3
   14cee:	781b      	ldrb	r3, [r3, #0]
   14cf0:	2b00      	cmp	r3, #0
   14cf2:	d104      	bne.n	14cfe <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   14cf4:	2317      	movs	r3, #23
   14cf6:	18fb      	adds	r3, r7, r3
   14cf8:	2203      	movs	r2, #3
   14cfa:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   14cfc:	e047      	b.n	14d8e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   14cfe:	1cfb      	adds	r3, r7, #3
   14d00:	781b      	ldrb	r3, [r3, #0]
   14d02:	2b01      	cmp	r3, #1
   14d04:	d104      	bne.n	14d10 <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   14d06:	2317      	movs	r3, #23
   14d08:	18fb      	adds	r3, r7, r3
   14d0a:	2203      	movs	r2, #3
   14d0c:	701a      	strb	r2, [r3, #0]
            break;
   14d0e:	e03e      	b.n	14d8e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   14d10:	1cfb      	adds	r3, r7, #3
   14d12:	781b      	ldrb	r3, [r3, #0]
   14d14:	2b02      	cmp	r3, #2
   14d16:	d104      	bne.n	14d22 <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   14d18:	2317      	movs	r3, #23
   14d1a:	18fb      	adds	r3, r7, r3
   14d1c:	2203      	movs	r2, #3
   14d1e:	701a      	strb	r2, [r3, #0]
            break;
   14d20:	e035      	b.n	14d8e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   14d22:	2317      	movs	r3, #23
   14d24:	18fb      	adds	r3, r7, r3
   14d26:	1cfa      	adds	r2, r7, #3
   14d28:	7812      	ldrb	r2, [r2, #0]
   14d2a:	701a      	strb	r2, [r3, #0]
            break;
   14d2c:	e02f      	b.n	14d8e <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   14d2e:	1cfb      	adds	r3, r7, #3
   14d30:	781b      	ldrb	r3, [r3, #0]
   14d32:	2b00      	cmp	r3, #0
   14d34:	d104      	bne.n	14d40 <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   14d36:	2317      	movs	r3, #23
   14d38:	18fb      	adds	r3, r7, r3
   14d3a:	2204      	movs	r2, #4
   14d3c:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   14d3e:	e026      	b.n	14d8e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   14d40:	1cfb      	adds	r3, r7, #3
   14d42:	781b      	ldrb	r3, [r3, #0]
   14d44:	2b01      	cmp	r3, #1
   14d46:	d104      	bne.n	14d52 <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   14d48:	2317      	movs	r3, #23
   14d4a:	18fb      	adds	r3, r7, r3
   14d4c:	2204      	movs	r2, #4
   14d4e:	701a      	strb	r2, [r3, #0]
            break;
   14d50:	e01d      	b.n	14d8e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   14d52:	1cfb      	adds	r3, r7, #3
   14d54:	781b      	ldrb	r3, [r3, #0]
   14d56:	2b02      	cmp	r3, #2
   14d58:	d104      	bne.n	14d64 <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   14d5a:	2317      	movs	r3, #23
   14d5c:	18fb      	adds	r3, r7, r3
   14d5e:	2204      	movs	r2, #4
   14d60:	701a      	strb	r2, [r3, #0]
            break;
   14d62:	e014      	b.n	14d8e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
   14d64:	1cfb      	adds	r3, r7, #3
   14d66:	781b      	ldrb	r3, [r3, #0]
   14d68:	2b03      	cmp	r3, #3
   14d6a:	d104      	bne.n	14d76 <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   14d6c:	2317      	movs	r3, #23
   14d6e:	18fb      	adds	r3, r7, r3
   14d70:	2204      	movs	r2, #4
   14d72:	701a      	strb	r2, [r3, #0]
            break;
   14d74:	e00b      	b.n	14d8e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   14d76:	2317      	movs	r3, #23
   14d78:	18fb      	adds	r3, r7, r3
   14d7a:	1cfa      	adds	r2, r7, #3
   14d7c:	7812      	ldrb	r2, [r2, #0]
   14d7e:	701a      	strb	r2, [r3, #0]
            break;
   14d80:	e005      	b.n	14d8e <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
   14d82:	2317      	movs	r3, #23
   14d84:	18fb      	adds	r3, r7, r3
   14d86:	1cfa      	adds	r2, r7, #3
   14d88:	7812      	ldrb	r2, [r2, #0]
   14d8a:	701a      	strb	r2, [r3, #0]
            break;
   14d8c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   14d8e:	693b      	ldr	r3, [r7, #16]
   14d90:	2b00      	cmp	r3, #0
   14d92:	d108      	bne.n	14da6 <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   14d94:	2308      	movs	r3, #8
   14d96:	18fa      	adds	r2, r7, r3
   14d98:	6878      	ldr	r0, [r7, #4]
   14d9a:	2301      	movs	r3, #1
   14d9c:	2111      	movs	r1, #17
   14d9e:	4c14      	ldr	r4, [pc, #80]	; (14df0 <lsm6dso_gy_data_rate_set+0x2bc>)
   14da0:	47a0      	blx	r4
   14da2:	0003      	movs	r3, r0
   14da4:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   14da6:	693b      	ldr	r3, [r7, #16]
   14da8:	2b00      	cmp	r3, #0
   14daa:	d118      	bne.n	14dde <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
   14dac:	2317      	movs	r3, #23
   14dae:	18fb      	adds	r3, r7, r3
   14db0:	781b      	ldrb	r3, [r3, #0]
   14db2:	220f      	movs	r2, #15
   14db4:	4013      	ands	r3, r2
   14db6:	b2da      	uxtb	r2, r3
   14db8:	2308      	movs	r3, #8
   14dba:	18fb      	adds	r3, r7, r3
   14dbc:	0110      	lsls	r0, r2, #4
   14dbe:	781a      	ldrb	r2, [r3, #0]
   14dc0:	210f      	movs	r1, #15
   14dc2:	400a      	ands	r2, r1
   14dc4:	1c11      	adds	r1, r2, #0
   14dc6:	1c02      	adds	r2, r0, #0
   14dc8:	430a      	orrs	r2, r1
   14dca:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   14dcc:	2308      	movs	r3, #8
   14dce:	18fa      	adds	r2, r7, r3
   14dd0:	6878      	ldr	r0, [r7, #4]
   14dd2:	2301      	movs	r3, #1
   14dd4:	2111      	movs	r1, #17
   14dd6:	4c07      	ldr	r4, [pc, #28]	; (14df4 <lsm6dso_gy_data_rate_set+0x2c0>)
   14dd8:	47a0      	blx	r4
   14dda:	0003      	movs	r3, r0
   14ddc:	613b      	str	r3, [r7, #16]
  }

  return ret;
   14dde:	693b      	ldr	r3, [r7, #16]
}
   14de0:	0018      	movs	r0, r3
   14de2:	46bd      	mov	sp, r7
   14de4:	b007      	add	sp, #28
   14de6:	bd90      	pop	{r4, r7, pc}
   14de8:	000152e1 	.word	0x000152e1
   14dec:	00015335 	.word	0x00015335
   14df0:	000146d5 	.word	0x000146d5
   14df4:	0001471b 	.word	0x0001471b

00014df8 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   14df8:	b590      	push	{r4, r7, lr}
   14dfa:	b085      	sub	sp, #20
   14dfc:	af00      	add	r7, sp, #0
   14dfe:	6078      	str	r0, [r7, #4]
   14e00:	000a      	movs	r2, r1
   14e02:	1cfb      	adds	r3, r7, #3
   14e04:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   14e06:	2308      	movs	r3, #8
   14e08:	18fa      	adds	r2, r7, r3
   14e0a:	6878      	ldr	r0, [r7, #4]
   14e0c:	2301      	movs	r3, #1
   14e0e:	2112      	movs	r1, #18
   14e10:	4c12      	ldr	r4, [pc, #72]	; (14e5c <lsm6dso_block_data_update_set+0x64>)
   14e12:	47a0      	blx	r4
   14e14:	0003      	movs	r3, r0
   14e16:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14e18:	68fb      	ldr	r3, [r7, #12]
   14e1a:	2b00      	cmp	r3, #0
   14e1c:	d119      	bne.n	14e52 <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
   14e1e:	1cfb      	adds	r3, r7, #3
   14e20:	781b      	ldrb	r3, [r3, #0]
   14e22:	2201      	movs	r2, #1
   14e24:	4013      	ands	r3, r2
   14e26:	b2da      	uxtb	r2, r3
   14e28:	2308      	movs	r3, #8
   14e2a:	18fb      	adds	r3, r7, r3
   14e2c:	2101      	movs	r1, #1
   14e2e:	400a      	ands	r2, r1
   14e30:	0190      	lsls	r0, r2, #6
   14e32:	781a      	ldrb	r2, [r3, #0]
   14e34:	2140      	movs	r1, #64	; 0x40
   14e36:	438a      	bics	r2, r1
   14e38:	1c11      	adds	r1, r2, #0
   14e3a:	1c02      	adds	r2, r0, #0
   14e3c:	430a      	orrs	r2, r1
   14e3e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   14e40:	2308      	movs	r3, #8
   14e42:	18fa      	adds	r2, r7, r3
   14e44:	6878      	ldr	r0, [r7, #4]
   14e46:	2301      	movs	r3, #1
   14e48:	2112      	movs	r1, #18
   14e4a:	4c05      	ldr	r4, [pc, #20]	; (14e60 <lsm6dso_block_data_update_set+0x68>)
   14e4c:	47a0      	blx	r4
   14e4e:	0003      	movs	r3, r0
   14e50:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14e52:	68fb      	ldr	r3, [r7, #12]
}
   14e54:	0018      	movs	r0, r3
   14e56:	46bd      	mov	sp, r7
   14e58:	b005      	add	sp, #20
   14e5a:	bd90      	pop	{r4, r7, pc}
   14e5c:	000146d5 	.word	0x000146d5
   14e60:	0001471b 	.word	0x0001471b

00014e64 <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
   14e64:	b590      	push	{r4, r7, lr}
   14e66:	b085      	sub	sp, #20
   14e68:	af00      	add	r7, sp, #0
   14e6a:	6078      	str	r0, [r7, #4]
   14e6c:	000a      	movs	r2, r1
   14e6e:	1cfb      	adds	r3, r7, #3
   14e70:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   14e72:	2308      	movs	r3, #8
   14e74:	18fa      	adds	r2, r7, r3
   14e76:	6878      	ldr	r0, [r7, #4]
   14e78:	2301      	movs	r3, #1
   14e7a:	2115      	movs	r1, #21
   14e7c:	4c12      	ldr	r4, [pc, #72]	; (14ec8 <lsm6dso_xl_offset_weight_set+0x64>)
   14e7e:	47a0      	blx	r4
   14e80:	0003      	movs	r3, r0
   14e82:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14e84:	68fb      	ldr	r3, [r7, #12]
   14e86:	2b00      	cmp	r3, #0
   14e88:	d119      	bne.n	14ebe <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
   14e8a:	1cfb      	adds	r3, r7, #3
   14e8c:	781b      	ldrb	r3, [r3, #0]
   14e8e:	2201      	movs	r2, #1
   14e90:	4013      	ands	r3, r2
   14e92:	b2da      	uxtb	r2, r3
   14e94:	2308      	movs	r3, #8
   14e96:	18fb      	adds	r3, r7, r3
   14e98:	2101      	movs	r1, #1
   14e9a:	400a      	ands	r2, r1
   14e9c:	00d0      	lsls	r0, r2, #3
   14e9e:	781a      	ldrb	r2, [r3, #0]
   14ea0:	2108      	movs	r1, #8
   14ea2:	438a      	bics	r2, r1
   14ea4:	1c11      	adds	r1, r2, #0
   14ea6:	1c02      	adds	r2, r0, #0
   14ea8:	430a      	orrs	r2, r1
   14eaa:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   14eac:	2308      	movs	r3, #8
   14eae:	18fa      	adds	r2, r7, r3
   14eb0:	6878      	ldr	r0, [r7, #4]
   14eb2:	2301      	movs	r3, #1
   14eb4:	2115      	movs	r1, #21
   14eb6:	4c05      	ldr	r4, [pc, #20]	; (14ecc <lsm6dso_xl_offset_weight_set+0x68>)
   14eb8:	47a0      	blx	r4
   14eba:	0003      	movs	r3, r0
   14ebc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14ebe:	68fb      	ldr	r3, [r7, #12]
}
   14ec0:	0018      	movs	r0, r3
   14ec2:	46bd      	mov	sp, r7
   14ec4:	b005      	add	sp, #20
   14ec6:	bd90      	pop	{r4, r7, pc}
   14ec8:	000146d5 	.word	0x000146d5
   14ecc:	0001471b 	.word	0x0001471b

00014ed0 <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
   14ed0:	b590      	push	{r4, r7, lr}
   14ed2:	b085      	sub	sp, #20
   14ed4:	af00      	add	r7, sp, #0
   14ed6:	6078      	str	r0, [r7, #4]
   14ed8:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
   14eda:	2308      	movs	r3, #8
   14edc:	18fa      	adds	r2, r7, r3
   14ede:	6878      	ldr	r0, [r7, #4]
   14ee0:	2301      	movs	r3, #1
   14ee2:	211e      	movs	r1, #30
   14ee4:	4c08      	ldr	r4, [pc, #32]	; (14f08 <lsm6dso_xl_flag_data_ready_get+0x38>)
   14ee6:	47a0      	blx	r4
   14ee8:	0003      	movs	r3, r0
   14eea:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
   14eec:	2308      	movs	r3, #8
   14eee:	18fb      	adds	r3, r7, r3
   14ef0:	781b      	ldrb	r3, [r3, #0]
   14ef2:	07db      	lsls	r3, r3, #31
   14ef4:	0fdb      	lsrs	r3, r3, #31
   14ef6:	b2db      	uxtb	r3, r3
   14ef8:	001a      	movs	r2, r3
   14efa:	683b      	ldr	r3, [r7, #0]
   14efc:	701a      	strb	r2, [r3, #0]

  return ret;
   14efe:	68fb      	ldr	r3, [r7, #12]
}
   14f00:	0018      	movs	r0, r3
   14f02:	46bd      	mov	sp, r7
   14f04:	b005      	add	sp, #20
   14f06:	bd90      	pop	{r4, r7, pc}
   14f08:	000146d5 	.word	0x000146d5

00014f0c <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   14f0c:	b590      	push	{r4, r7, lr}
   14f0e:	b087      	sub	sp, #28
   14f10:	af00      	add	r7, sp, #0
   14f12:	6078      	str	r0, [r7, #4]
   14f14:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
   14f16:	230c      	movs	r3, #12
   14f18:	18fa      	adds	r2, r7, r3
   14f1a:	6878      	ldr	r0, [r7, #4]
   14f1c:	2306      	movs	r3, #6
   14f1e:	2128      	movs	r1, #40	; 0x28
   14f20:	4c26      	ldr	r4, [pc, #152]	; (14fbc <lsm6dso_acceleration_raw_get+0xb0>)
   14f22:	47a0      	blx	r4
   14f24:	0003      	movs	r3, r0
   14f26:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   14f28:	230c      	movs	r3, #12
   14f2a:	18fb      	adds	r3, r7, r3
   14f2c:	785b      	ldrb	r3, [r3, #1]
   14f2e:	b21a      	sxth	r2, r3
   14f30:	683b      	ldr	r3, [r7, #0]
   14f32:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   14f34:	683b      	ldr	r3, [r7, #0]
   14f36:	2200      	movs	r2, #0
   14f38:	5e9b      	ldrsh	r3, [r3, r2]
   14f3a:	b29b      	uxth	r3, r3
   14f3c:	021b      	lsls	r3, r3, #8
   14f3e:	b29a      	uxth	r2, r3
   14f40:	230c      	movs	r3, #12
   14f42:	18fb      	adds	r3, r7, r3
   14f44:	781b      	ldrb	r3, [r3, #0]
   14f46:	b29b      	uxth	r3, r3
   14f48:	18d3      	adds	r3, r2, r3
   14f4a:	b29b      	uxth	r3, r3
   14f4c:	b21a      	sxth	r2, r3
   14f4e:	683b      	ldr	r3, [r7, #0]
   14f50:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   14f52:	683b      	ldr	r3, [r7, #0]
   14f54:	3302      	adds	r3, #2
   14f56:	220c      	movs	r2, #12
   14f58:	18ba      	adds	r2, r7, r2
   14f5a:	78d2      	ldrb	r2, [r2, #3]
   14f5c:	b212      	sxth	r2, r2
   14f5e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   14f60:	683b      	ldr	r3, [r7, #0]
   14f62:	3302      	adds	r3, #2
   14f64:	683a      	ldr	r2, [r7, #0]
   14f66:	3202      	adds	r2, #2
   14f68:	2100      	movs	r1, #0
   14f6a:	5e52      	ldrsh	r2, [r2, r1]
   14f6c:	b292      	uxth	r2, r2
   14f6e:	0212      	lsls	r2, r2, #8
   14f70:	b291      	uxth	r1, r2
   14f72:	220c      	movs	r2, #12
   14f74:	18ba      	adds	r2, r7, r2
   14f76:	7892      	ldrb	r2, [r2, #2]
   14f78:	b292      	uxth	r2, r2
   14f7a:	188a      	adds	r2, r1, r2
   14f7c:	b292      	uxth	r2, r2
   14f7e:	b212      	sxth	r2, r2
   14f80:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   14f82:	683b      	ldr	r3, [r7, #0]
   14f84:	3304      	adds	r3, #4
   14f86:	220c      	movs	r2, #12
   14f88:	18ba      	adds	r2, r7, r2
   14f8a:	7952      	ldrb	r2, [r2, #5]
   14f8c:	b212      	sxth	r2, r2
   14f8e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   14f90:	683b      	ldr	r3, [r7, #0]
   14f92:	3304      	adds	r3, #4
   14f94:	683a      	ldr	r2, [r7, #0]
   14f96:	3204      	adds	r2, #4
   14f98:	2100      	movs	r1, #0
   14f9a:	5e52      	ldrsh	r2, [r2, r1]
   14f9c:	b292      	uxth	r2, r2
   14f9e:	0212      	lsls	r2, r2, #8
   14fa0:	b291      	uxth	r1, r2
   14fa2:	220c      	movs	r2, #12
   14fa4:	18ba      	adds	r2, r7, r2
   14fa6:	7912      	ldrb	r2, [r2, #4]
   14fa8:	b292      	uxth	r2, r2
   14faa:	188a      	adds	r2, r1, r2
   14fac:	b292      	uxth	r2, r2
   14fae:	b212      	sxth	r2, r2
   14fb0:	801a      	strh	r2, [r3, #0]

  return ret;
   14fb2:	697b      	ldr	r3, [r7, #20]
}
   14fb4:	0018      	movs	r0, r3
   14fb6:	46bd      	mov	sp, r7
   14fb8:	b007      	add	sp, #28
   14fba:	bd90      	pop	{r4, r7, pc}
   14fbc:	000146d5 	.word	0x000146d5

00014fc0 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
   14fc0:	b590      	push	{r4, r7, lr}
   14fc2:	b085      	sub	sp, #20
   14fc4:	af00      	add	r7, sp, #0
   14fc6:	6078      	str	r0, [r7, #4]
   14fc8:	000a      	movs	r2, r1
   14fca:	1cfb      	adds	r3, r7, #3
   14fcc:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   14fce:	2308      	movs	r3, #8
   14fd0:	18fa      	adds	r2, r7, r3
   14fd2:	6878      	ldr	r0, [r7, #4]
   14fd4:	2301      	movs	r3, #1
   14fd6:	2101      	movs	r1, #1
   14fd8:	4c11      	ldr	r4, [pc, #68]	; (15020 <lsm6dso_mem_bank_set+0x60>)
   14fda:	47a0      	blx	r4
   14fdc:	0003      	movs	r3, r0
   14fde:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14fe0:	68fb      	ldr	r3, [r7, #12]
   14fe2:	2b00      	cmp	r3, #0
   14fe4:	d117      	bne.n	15016 <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
   14fe6:	1cfb      	adds	r3, r7, #3
   14fe8:	781b      	ldrb	r3, [r3, #0]
   14fea:	2203      	movs	r2, #3
   14fec:	4013      	ands	r3, r2
   14fee:	b2da      	uxtb	r2, r3
   14ff0:	2308      	movs	r3, #8
   14ff2:	18fb      	adds	r3, r7, r3
   14ff4:	0190      	lsls	r0, r2, #6
   14ff6:	781a      	ldrb	r2, [r3, #0]
   14ff8:	213f      	movs	r1, #63	; 0x3f
   14ffa:	400a      	ands	r2, r1
   14ffc:	1c11      	adds	r1, r2, #0
   14ffe:	1c02      	adds	r2, r0, #0
   15000:	430a      	orrs	r2, r1
   15002:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   15004:	2308      	movs	r3, #8
   15006:	18fa      	adds	r2, r7, r3
   15008:	6878      	ldr	r0, [r7, #4]
   1500a:	2301      	movs	r3, #1
   1500c:	2101      	movs	r1, #1
   1500e:	4c05      	ldr	r4, [pc, #20]	; (15024 <lsm6dso_mem_bank_set+0x64>)
   15010:	47a0      	blx	r4
   15012:	0003      	movs	r3, r0
   15014:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15016:	68fb      	ldr	r3, [r7, #12]
}
   15018:	0018      	movs	r0, r3
   1501a:	46bd      	mov	sp, r7
   1501c:	b005      	add	sp, #20
   1501e:	bd90      	pop	{r4, r7, pc}
   15020:	000146d5 	.word	0x000146d5
   15024:	0001471b 	.word	0x0001471b

00015028 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   15028:	b590      	push	{r4, r7, lr}
   1502a:	b085      	sub	sp, #20
   1502c:	af00      	add	r7, sp, #0
   1502e:	6078      	str	r0, [r7, #4]
   15030:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
   15032:	683a      	ldr	r2, [r7, #0]
   15034:	6878      	ldr	r0, [r7, #4]
   15036:	2301      	movs	r3, #1
   15038:	210f      	movs	r1, #15
   1503a:	4c04      	ldr	r4, [pc, #16]	; (1504c <lsm6dso_device_id_get+0x24>)
   1503c:	47a0      	blx	r4
   1503e:	0003      	movs	r3, r0
   15040:	60fb      	str	r3, [r7, #12]

  return ret;
   15042:	68fb      	ldr	r3, [r7, #12]
}
   15044:	0018      	movs	r0, r3
   15046:	46bd      	mov	sp, r7
   15048:	b005      	add	sp, #20
   1504a:	bd90      	pop	{r4, r7, pc}
   1504c:	000146d5 	.word	0x000146d5

00015050 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15050:	b590      	push	{r4, r7, lr}
   15052:	b085      	sub	sp, #20
   15054:	af00      	add	r7, sp, #0
   15056:	6078      	str	r0, [r7, #4]
   15058:	000a      	movs	r2, r1
   1505a:	1cfb      	adds	r3, r7, #3
   1505c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   1505e:	2308      	movs	r3, #8
   15060:	18fa      	adds	r2, r7, r3
   15062:	6878      	ldr	r0, [r7, #4]
   15064:	2301      	movs	r3, #1
   15066:	2112      	movs	r1, #18
   15068:	4c12      	ldr	r4, [pc, #72]	; (150b4 <lsm6dso_reset_set+0x64>)
   1506a:	47a0      	blx	r4
   1506c:	0003      	movs	r3, r0
   1506e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15070:	68fb      	ldr	r3, [r7, #12]
   15072:	2b00      	cmp	r3, #0
   15074:	d119      	bne.n	150aa <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
   15076:	1cfb      	adds	r3, r7, #3
   15078:	781b      	ldrb	r3, [r3, #0]
   1507a:	2201      	movs	r2, #1
   1507c:	4013      	ands	r3, r2
   1507e:	b2da      	uxtb	r2, r3
   15080:	2308      	movs	r3, #8
   15082:	18fb      	adds	r3, r7, r3
   15084:	2101      	movs	r1, #1
   15086:	400a      	ands	r2, r1
   15088:	0010      	movs	r0, r2
   1508a:	781a      	ldrb	r2, [r3, #0]
   1508c:	2101      	movs	r1, #1
   1508e:	438a      	bics	r2, r1
   15090:	1c11      	adds	r1, r2, #0
   15092:	1c02      	adds	r2, r0, #0
   15094:	430a      	orrs	r2, r1
   15096:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15098:	2308      	movs	r3, #8
   1509a:	18fa      	adds	r2, r7, r3
   1509c:	6878      	ldr	r0, [r7, #4]
   1509e:	2301      	movs	r3, #1
   150a0:	2112      	movs	r1, #18
   150a2:	4c05      	ldr	r4, [pc, #20]	; (150b8 <lsm6dso_reset_set+0x68>)
   150a4:	47a0      	blx	r4
   150a6:	0003      	movs	r3, r0
   150a8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   150aa:	68fb      	ldr	r3, [r7, #12]
}
   150ac:	0018      	movs	r0, r3
   150ae:	46bd      	mov	sp, r7
   150b0:	b005      	add	sp, #20
   150b2:	bd90      	pop	{r4, r7, pc}
   150b4:	000146d5 	.word	0x000146d5
   150b8:	0001471b 	.word	0x0001471b

000150bc <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   150bc:	b590      	push	{r4, r7, lr}
   150be:	b085      	sub	sp, #20
   150c0:	af00      	add	r7, sp, #0
   150c2:	6078      	str	r0, [r7, #4]
   150c4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   150c6:	2308      	movs	r3, #8
   150c8:	18fa      	adds	r2, r7, r3
   150ca:	6878      	ldr	r0, [r7, #4]
   150cc:	2301      	movs	r3, #1
   150ce:	2112      	movs	r1, #18
   150d0:	4c08      	ldr	r4, [pc, #32]	; (150f4 <lsm6dso_reset_get+0x38>)
   150d2:	47a0      	blx	r4
   150d4:	0003      	movs	r3, r0
   150d6:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
   150d8:	2308      	movs	r3, #8
   150da:	18fb      	adds	r3, r7, r3
   150dc:	781b      	ldrb	r3, [r3, #0]
   150de:	07db      	lsls	r3, r3, #31
   150e0:	0fdb      	lsrs	r3, r3, #31
   150e2:	b2db      	uxtb	r3, r3
   150e4:	001a      	movs	r2, r3
   150e6:	683b      	ldr	r3, [r7, #0]
   150e8:	701a      	strb	r2, [r3, #0]

  return ret;
   150ea:	68fb      	ldr	r3, [r7, #12]
}
   150ec:	0018      	movs	r0, r3
   150ee:	46bd      	mov	sp, r7
   150f0:	b005      	add	sp, #20
   150f2:	bd90      	pop	{r4, r7, pc}
   150f4:	000146d5 	.word	0x000146d5

000150f8 <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
   150f8:	b590      	push	{r4, r7, lr}
   150fa:	b085      	sub	sp, #20
   150fc:	af00      	add	r7, sp, #0
   150fe:	6078      	str	r0, [r7, #4]
   15100:	000a      	movs	r2, r1
   15102:	1cfb      	adds	r3, r7, #3
   15104:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15106:	2308      	movs	r3, #8
   15108:	18fa      	adds	r2, r7, r3
   1510a:	6878      	ldr	r0, [r7, #4]
   1510c:	2301      	movs	r3, #1
   1510e:	2110      	movs	r1, #16
   15110:	4c12      	ldr	r4, [pc, #72]	; (1515c <lsm6dso_xl_filter_lp2_set+0x64>)
   15112:	47a0      	blx	r4
   15114:	0003      	movs	r3, r0
   15116:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15118:	68fb      	ldr	r3, [r7, #12]
   1511a:	2b00      	cmp	r3, #0
   1511c:	d119      	bne.n	15152 <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
   1511e:	1cfb      	adds	r3, r7, #3
   15120:	781b      	ldrb	r3, [r3, #0]
   15122:	2201      	movs	r2, #1
   15124:	4013      	ands	r3, r2
   15126:	b2da      	uxtb	r2, r3
   15128:	2308      	movs	r3, #8
   1512a:	18fb      	adds	r3, r7, r3
   1512c:	2101      	movs	r1, #1
   1512e:	400a      	ands	r2, r1
   15130:	1890      	adds	r0, r2, r2
   15132:	781a      	ldrb	r2, [r3, #0]
   15134:	2102      	movs	r1, #2
   15136:	438a      	bics	r2, r1
   15138:	1c11      	adds	r1, r2, #0
   1513a:	1c02      	adds	r2, r0, #0
   1513c:	430a      	orrs	r2, r1
   1513e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15140:	2308      	movs	r3, #8
   15142:	18fa      	adds	r2, r7, r3
   15144:	6878      	ldr	r0, [r7, #4]
   15146:	2301      	movs	r3, #1
   15148:	2110      	movs	r1, #16
   1514a:	4c05      	ldr	r4, [pc, #20]	; (15160 <lsm6dso_xl_filter_lp2_set+0x68>)
   1514c:	47a0      	blx	r4
   1514e:	0003      	movs	r3, r0
   15150:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15152:	68fb      	ldr	r3, [r7, #12]
}
   15154:	0018      	movs	r0, r3
   15156:	46bd      	mov	sp, r7
   15158:	b005      	add	sp, #20
   1515a:	bd90      	pop	{r4, r7, pc}
   1515c:	000146d5 	.word	0x000146d5
   15160:	0001471b 	.word	0x0001471b

00015164 <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
   15164:	b590      	push	{r4, r7, lr}
   15166:	b085      	sub	sp, #20
   15168:	af00      	add	r7, sp, #0
   1516a:	6078      	str	r0, [r7, #4]
   1516c:	000a      	movs	r2, r1
   1516e:	1cfb      	adds	r3, r7, #3
   15170:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   15172:	2308      	movs	r3, #8
   15174:	18fa      	adds	r2, r7, r3
   15176:	6878      	ldr	r0, [r7, #4]
   15178:	2301      	movs	r3, #1
   1517a:	2117      	movs	r1, #23
   1517c:	4c25      	ldr	r4, [pc, #148]	; (15214 <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   1517e:	47a0      	blx	r4
   15180:	0003      	movs	r3, r0
   15182:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15184:	68fb      	ldr	r3, [r7, #12]
   15186:	2b00      	cmp	r3, #0
   15188:	d13f      	bne.n	1520a <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
   1518a:	1cfb      	adds	r3, r7, #3
   1518c:	781b      	ldrb	r3, [r3, #0]
   1518e:	091b      	lsrs	r3, r3, #4
   15190:	b2db      	uxtb	r3, r3
   15192:	1c1a      	adds	r2, r3, #0
   15194:	2301      	movs	r3, #1
   15196:	4013      	ands	r3, r2
   15198:	b2da      	uxtb	r2, r3
   1519a:	2308      	movs	r3, #8
   1519c:	18fb      	adds	r3, r7, r3
   1519e:	2101      	movs	r1, #1
   151a0:	400a      	ands	r2, r1
   151a2:	0090      	lsls	r0, r2, #2
   151a4:	781a      	ldrb	r2, [r3, #0]
   151a6:	2104      	movs	r1, #4
   151a8:	438a      	bics	r2, r1
   151aa:	1c11      	adds	r1, r2, #0
   151ac:	1c02      	adds	r2, r0, #0
   151ae:	430a      	orrs	r2, r1
   151b0:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
   151b2:	1cfb      	adds	r3, r7, #3
   151b4:	781b      	ldrb	r3, [r3, #0]
   151b6:	095b      	lsrs	r3, r3, #5
   151b8:	b2db      	uxtb	r3, r3
   151ba:	1c1a      	adds	r2, r3, #0
   151bc:	2301      	movs	r3, #1
   151be:	4013      	ands	r3, r2
   151c0:	b2da      	uxtb	r2, r3
   151c2:	2308      	movs	r3, #8
   151c4:	18fb      	adds	r3, r7, r3
   151c6:	2101      	movs	r1, #1
   151c8:	400a      	ands	r2, r1
   151ca:	0110      	lsls	r0, r2, #4
   151cc:	781a      	ldrb	r2, [r3, #0]
   151ce:	2110      	movs	r1, #16
   151d0:	438a      	bics	r2, r1
   151d2:	1c11      	adds	r1, r2, #0
   151d4:	1c02      	adds	r2, r0, #0
   151d6:	430a      	orrs	r2, r1
   151d8:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
   151da:	1cfb      	adds	r3, r7, #3
   151dc:	781b      	ldrb	r3, [r3, #0]
   151de:	2207      	movs	r2, #7
   151e0:	4013      	ands	r3, r2
   151e2:	b2da      	uxtb	r2, r3
   151e4:	2308      	movs	r3, #8
   151e6:	18fb      	adds	r3, r7, r3
   151e8:	0150      	lsls	r0, r2, #5
   151ea:	781a      	ldrb	r2, [r3, #0]
   151ec:	211f      	movs	r1, #31
   151ee:	400a      	ands	r2, r1
   151f0:	1c11      	adds	r1, r2, #0
   151f2:	1c02      	adds	r2, r0, #0
   151f4:	430a      	orrs	r2, r1
   151f6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   151f8:	2308      	movs	r3, #8
   151fa:	18fa      	adds	r2, r7, r3
   151fc:	6878      	ldr	r0, [r7, #4]
   151fe:	2301      	movs	r3, #1
   15200:	2117      	movs	r1, #23
   15202:	4c05      	ldr	r4, [pc, #20]	; (15218 <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   15204:	47a0      	blx	r4
   15206:	0003      	movs	r3, r0
   15208:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1520a:	68fb      	ldr	r3, [r7, #12]
}
   1520c:	0018      	movs	r0, r3
   1520e:	46bd      	mov	sp, r7
   15210:	b005      	add	sp, #20
   15212:	bd90      	pop	{r4, r7, pc}
   15214:	000146d5 	.word	0x000146d5
   15218:	0001471b 	.word	0x0001471b

0001521c <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
   1521c:	b590      	push	{r4, r7, lr}
   1521e:	b087      	sub	sp, #28
   15220:	af00      	add	r7, sp, #0
   15222:	6078      	str	r0, [r7, #4]
   15224:	000a      	movs	r2, r1
   15226:	1cfb      	adds	r3, r7, #3
   15228:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   1522a:	230c      	movs	r3, #12
   1522c:	18fa      	adds	r2, r7, r3
   1522e:	6878      	ldr	r0, [r7, #4]
   15230:	2301      	movs	r3, #1
   15232:	2118      	movs	r1, #24
   15234:	4c28      	ldr	r4, [pc, #160]	; (152d8 <lsm6dso_i3c_disable_set+0xbc>)
   15236:	47a0      	blx	r4
   15238:	0003      	movs	r3, r0
   1523a:	617b      	str	r3, [r7, #20]

  if (ret == 0)
   1523c:	697b      	ldr	r3, [r7, #20]
   1523e:	2b00      	cmp	r3, #0
   15240:	d11c      	bne.n	1527c <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
   15242:	1cfb      	adds	r3, r7, #3
   15244:	781b      	ldrb	r3, [r3, #0]
   15246:	09db      	lsrs	r3, r3, #7
   15248:	b2db      	uxtb	r3, r3
   1524a:	1c1a      	adds	r2, r3, #0
   1524c:	2301      	movs	r3, #1
   1524e:	4013      	ands	r3, r2
   15250:	b2da      	uxtb	r2, r3
   15252:	230c      	movs	r3, #12
   15254:	18fb      	adds	r3, r7, r3
   15256:	2101      	movs	r1, #1
   15258:	400a      	ands	r2, r1
   1525a:	1890      	adds	r0, r2, r2
   1525c:	781a      	ldrb	r2, [r3, #0]
   1525e:	2102      	movs	r1, #2
   15260:	438a      	bics	r2, r1
   15262:	1c11      	adds	r1, r2, #0
   15264:	1c02      	adds	r2, r0, #0
   15266:	430a      	orrs	r2, r1
   15268:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   1526a:	230c      	movs	r3, #12
   1526c:	18fa      	adds	r2, r7, r3
   1526e:	6878      	ldr	r0, [r7, #4]
   15270:	2301      	movs	r3, #1
   15272:	2118      	movs	r1, #24
   15274:	4c19      	ldr	r4, [pc, #100]	; (152dc <lsm6dso_i3c_disable_set+0xc0>)
   15276:	47a0      	blx	r4
   15278:	0003      	movs	r3, r0
   1527a:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
   1527c:	697b      	ldr	r3, [r7, #20]
   1527e:	2b00      	cmp	r3, #0
   15280:	d108      	bne.n	15294 <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   15282:	2310      	movs	r3, #16
   15284:	18fa      	adds	r2, r7, r3
   15286:	6878      	ldr	r0, [r7, #4]
   15288:	2301      	movs	r3, #1
   1528a:	2162      	movs	r1, #98	; 0x62
   1528c:	4c12      	ldr	r4, [pc, #72]	; (152d8 <lsm6dso_i3c_disable_set+0xbc>)
   1528e:	47a0      	blx	r4
   15290:	0003      	movs	r3, r0
   15292:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
   15294:	697b      	ldr	r3, [r7, #20]
   15296:	2b00      	cmp	r3, #0
   15298:	d119      	bne.n	152ce <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
   1529a:	1cfb      	adds	r3, r7, #3
   1529c:	781b      	ldrb	r3, [r3, #0]
   1529e:	2203      	movs	r2, #3
   152a0:	4013      	ands	r3, r2
   152a2:	b2da      	uxtb	r2, r3
   152a4:	2310      	movs	r3, #16
   152a6:	18fb      	adds	r3, r7, r3
   152a8:	2103      	movs	r1, #3
   152aa:	400a      	ands	r2, r1
   152ac:	00d0      	lsls	r0, r2, #3
   152ae:	781a      	ldrb	r2, [r3, #0]
   152b0:	2118      	movs	r1, #24
   152b2:	438a      	bics	r2, r1
   152b4:	1c11      	adds	r1, r2, #0
   152b6:	1c02      	adds	r2, r0, #0
   152b8:	430a      	orrs	r2, r1
   152ba:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   152bc:	2310      	movs	r3, #16
   152be:	18fa      	adds	r2, r7, r3
   152c0:	6878      	ldr	r0, [r7, #4]
   152c2:	2301      	movs	r3, #1
   152c4:	2162      	movs	r1, #98	; 0x62
   152c6:	4c05      	ldr	r4, [pc, #20]	; (152dc <lsm6dso_i3c_disable_set+0xc0>)
   152c8:	47a0      	blx	r4
   152ca:	0003      	movs	r3, r0
   152cc:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
   152ce:	697b      	ldr	r3, [r7, #20]
}
   152d0:	0018      	movs	r0, r3
   152d2:	46bd      	mov	sp, r7
   152d4:	b007      	add	sp, #28
   152d6:	bd90      	pop	{r4, r7, pc}
   152d8:	000146d5 	.word	0x000146d5
   152dc:	0001471b 	.word	0x0001471b

000152e0 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
   152e0:	b590      	push	{r4, r7, lr}
   152e2:	b085      	sub	sp, #20
   152e4:	af00      	add	r7, sp, #0
   152e6:	6078      	str	r0, [r7, #4]
   152e8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   152ea:	687b      	ldr	r3, [r7, #4]
   152ec:	2102      	movs	r1, #2
   152ee:	0018      	movs	r0, r3
   152f0:	4b0e      	ldr	r3, [pc, #56]	; (1532c <lsm6dso_fsm_enable_get+0x4c>)
   152f2:	4798      	blx	r3
   152f4:	0003      	movs	r3, r0
   152f6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   152f8:	68fb      	ldr	r3, [r7, #12]
   152fa:	2b00      	cmp	r3, #0
   152fc:	d107      	bne.n	1530e <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
   152fe:	683a      	ldr	r2, [r7, #0]
   15300:	6878      	ldr	r0, [r7, #4]
   15302:	2302      	movs	r3, #2
   15304:	2146      	movs	r1, #70	; 0x46
   15306:	4c0a      	ldr	r4, [pc, #40]	; (15330 <lsm6dso_fsm_enable_get+0x50>)
   15308:	47a0      	blx	r4
   1530a:	0003      	movs	r3, r0
   1530c:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
   1530e:	68fb      	ldr	r3, [r7, #12]
   15310:	2b00      	cmp	r3, #0
   15312:	d106      	bne.n	15322 <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   15314:	687b      	ldr	r3, [r7, #4]
   15316:	2100      	movs	r1, #0
   15318:	0018      	movs	r0, r3
   1531a:	4b04      	ldr	r3, [pc, #16]	; (1532c <lsm6dso_fsm_enable_get+0x4c>)
   1531c:	4798      	blx	r3
   1531e:	0003      	movs	r3, r0
   15320:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15322:	68fb      	ldr	r3, [r7, #12]
}
   15324:	0018      	movs	r0, r3
   15326:	46bd      	mov	sp, r7
   15328:	b005      	add	sp, #20
   1532a:	bd90      	pop	{r4, r7, pc}
   1532c:	00014fc1 	.word	0x00014fc1
   15330:	000146d5 	.word	0x000146d5

00015334 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
   15334:	b590      	push	{r4, r7, lr}
   15336:	b085      	sub	sp, #20
   15338:	af00      	add	r7, sp, #0
   1533a:	6078      	str	r0, [r7, #4]
   1533c:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   1533e:	687b      	ldr	r3, [r7, #4]
   15340:	2102      	movs	r1, #2
   15342:	0018      	movs	r0, r3
   15344:	4b21      	ldr	r3, [pc, #132]	; (153cc <lsm6dso_fsm_data_rate_get+0x98>)
   15346:	4798      	blx	r3
   15348:	0003      	movs	r3, r0
   1534a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   1534c:	68fb      	ldr	r3, [r7, #12]
   1534e:	2b00      	cmp	r3, #0
   15350:	d108      	bne.n	15364 <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
   15352:	2308      	movs	r3, #8
   15354:	18fa      	adds	r2, r7, r3
   15356:	6878      	ldr	r0, [r7, #4]
   15358:	2301      	movs	r3, #1
   1535a:	215f      	movs	r1, #95	; 0x5f
   1535c:	4c1c      	ldr	r4, [pc, #112]	; (153d0 <lsm6dso_fsm_data_rate_get+0x9c>)
   1535e:	47a0      	blx	r4
   15360:	0003      	movs	r3, r0
   15362:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
   15364:	68fb      	ldr	r3, [r7, #12]
   15366:	2b00      	cmp	r3, #0
   15368:	d12b      	bne.n	153c2 <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
   1536a:	2308      	movs	r3, #8
   1536c:	18fb      	adds	r3, r7, r3
   1536e:	781b      	ldrb	r3, [r3, #0]
   15370:	06db      	lsls	r3, r3, #27
   15372:	0f9b      	lsrs	r3, r3, #30
   15374:	b2db      	uxtb	r3, r3
   15376:	2b01      	cmp	r3, #1
   15378:	d00c      	beq.n	15394 <lsm6dso_fsm_data_rate_get+0x60>
   1537a:	dc02      	bgt.n	15382 <lsm6dso_fsm_data_rate_get+0x4e>
   1537c:	2b00      	cmp	r3, #0
   1537e:	d005      	beq.n	1538c <lsm6dso_fsm_data_rate_get+0x58>
   15380:	e014      	b.n	153ac <lsm6dso_fsm_data_rate_get+0x78>
   15382:	2b02      	cmp	r3, #2
   15384:	d00a      	beq.n	1539c <lsm6dso_fsm_data_rate_get+0x68>
   15386:	2b03      	cmp	r3, #3
   15388:	d00c      	beq.n	153a4 <lsm6dso_fsm_data_rate_get+0x70>
   1538a:	e00f      	b.n	153ac <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   1538c:	683b      	ldr	r3, [r7, #0]
   1538e:	2200      	movs	r2, #0
   15390:	701a      	strb	r2, [r3, #0]
        break;
   15392:	e00f      	b.n	153b4 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
   15394:	683b      	ldr	r3, [r7, #0]
   15396:	2201      	movs	r2, #1
   15398:	701a      	strb	r2, [r3, #0]
        break;
   1539a:	e00b      	b.n	153b4 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
   1539c:	683b      	ldr	r3, [r7, #0]
   1539e:	2202      	movs	r2, #2
   153a0:	701a      	strb	r2, [r3, #0]
        break;
   153a2:	e007      	b.n	153b4 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
   153a4:	683b      	ldr	r3, [r7, #0]
   153a6:	2203      	movs	r2, #3
   153a8:	701a      	strb	r2, [r3, #0]
        break;
   153aa:	e003      	b.n	153b4 <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   153ac:	683b      	ldr	r3, [r7, #0]
   153ae:	2200      	movs	r2, #0
   153b0:	701a      	strb	r2, [r3, #0]
        break;
   153b2:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   153b4:	687b      	ldr	r3, [r7, #4]
   153b6:	2100      	movs	r1, #0
   153b8:	0018      	movs	r0, r3
   153ba:	4b04      	ldr	r3, [pc, #16]	; (153cc <lsm6dso_fsm_data_rate_get+0x98>)
   153bc:	4798      	blx	r3
   153be:	0003      	movs	r3, r0
   153c0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   153c2:	68fb      	ldr	r3, [r7, #12]
}
   153c4:	0018      	movs	r0, r3
   153c6:	46bd      	mov	sp, r7
   153c8:	b005      	add	sp, #20
   153ca:	bd90      	pop	{r4, r7, pc}
   153cc:	00014fc1 	.word	0x00014fc1
   153d0:	000146d5 	.word	0x000146d5

000153d4 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   153d4:	b580      	push	{r7, lr}
   153d6:	b086      	sub	sp, #24
   153d8:	af00      	add	r7, sp, #0
   153da:	60f8      	str	r0, [r7, #12]
   153dc:	0008      	movs	r0, r1
   153de:	607a      	str	r2, [r7, #4]
   153e0:	0019      	movs	r1, r3
   153e2:	230b      	movs	r3, #11
   153e4:	18fb      	adds	r3, r7, r3
   153e6:	1c02      	adds	r2, r0, #0
   153e8:	701a      	strb	r2, [r3, #0]
   153ea:	2308      	movs	r3, #8
   153ec:	18fb      	adds	r3, r7, r3
   153ee:	1c0a      	adds	r2, r1, #0
   153f0:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
	int32_t error = ERROR_NONE;
   153f2:	2300      	movs	r3, #0
   153f4:	613b      	str	r3, [r7, #16]
	
	msgOutImu[0] = reg;
   153f6:	4b19      	ldr	r3, [pc, #100]	; (1545c <platform_write+0x88>)
   153f8:	220b      	movs	r2, #11
   153fa:	18ba      	adds	r2, r7, r2
   153fc:	7812      	ldrb	r2, [r2, #0]
   153fe:	701a      	strb	r2, [r3, #0]
	//loop through bufp to get message
 	for(int i = 0; i < len; i++)
   15400:	2300      	movs	r3, #0
   15402:	617b      	str	r3, [r7, #20]
   15404:	e00a      	b.n	1541c <platform_write+0x48>
 	{
 		msgOutImu[i+1] = bufp[i];
   15406:	697b      	ldr	r3, [r7, #20]
   15408:	3301      	adds	r3, #1
   1540a:	697a      	ldr	r2, [r7, #20]
   1540c:	6879      	ldr	r1, [r7, #4]
   1540e:	188a      	adds	r2, r1, r2
   15410:	7811      	ldrb	r1, [r2, #0]
   15412:	4a12      	ldr	r2, [pc, #72]	; (1545c <platform_write+0x88>)
   15414:	54d1      	strb	r1, [r2, r3]
 	for(int i = 0; i < len; i++)
   15416:	697b      	ldr	r3, [r7, #20]
   15418:	3301      	adds	r3, #1
   1541a:	617b      	str	r3, [r7, #20]
   1541c:	2308      	movs	r3, #8
   1541e:	18fb      	adds	r3, r7, r3
   15420:	881a      	ldrh	r2, [r3, #0]
   15422:	697b      	ldr	r3, [r7, #20]
   15424:	429a      	cmp	r2, r3
   15426:	dcee      	bgt.n	15406 <platform_write+0x32>
 	}
	//save individual data as part of the IMU_DATA struct
	imuData.address = LSM6DSO_I2C_ADD_H;
   15428:	4b0d      	ldr	r3, [pc, #52]	; (15460 <platform_write+0x8c>)
   1542a:	226b      	movs	r2, #107	; 0x6b
   1542c:	701a      	strb	r2, [r3, #0]
	imuData.lenOut = 1+len;
   1542e:	2308      	movs	r3, #8
   15430:	18fb      	adds	r3, r7, r3
   15432:	881b      	ldrh	r3, [r3, #0]
   15434:	3301      	adds	r3, #1
   15436:	b29a      	uxth	r2, r3
   15438:	4b09      	ldr	r3, [pc, #36]	; (15460 <platform_write+0x8c>)
   1543a:	81da      	strh	r2, [r3, #14]
	imuData.msgOut = &msgOutImu;
   1543c:	4b08      	ldr	r3, [pc, #32]	; (15460 <platform_write+0x8c>)
   1543e:	4a07      	ldr	r2, [pc, #28]	; (1545c <platform_write+0x88>)
   15440:	605a      	str	r2, [r3, #4]
	//write the imudata struct object
	error = I2cWriteDataWait(&imuData, 100);
   15442:	4b07      	ldr	r3, [pc, #28]	; (15460 <platform_write+0x8c>)
   15444:	2164      	movs	r1, #100	; 0x64
   15446:	0018      	movs	r0, r3
   15448:	4b06      	ldr	r3, [pc, #24]	; (15464 <platform_write+0x90>)
   1544a:	4798      	blx	r3
   1544c:	0003      	movs	r3, r0
   1544e:	613b      	str	r3, [r7, #16]
	return error;
   15450:	693b      	ldr	r3, [r7, #16]

}
   15452:	0018      	movs	r0, r3
   15454:	46bd      	mov	sp, r7
   15456:	b006      	add	sp, #24
   15458:	bd80      	pop	{r7, pc}
   1545a:	46c0      	nop			; (mov r8, r8)
   1545c:	20004810 	.word	0x20004810
   15460:	20004850 	.word	0x20004850
   15464:	000144e9 	.word	0x000144e9

00015468 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   15468:	b580      	push	{r7, lr}
   1546a:	b086      	sub	sp, #24
   1546c:	af00      	add	r7, sp, #0
   1546e:	60f8      	str	r0, [r7, #12]
   15470:	0008      	movs	r0, r1
   15472:	607a      	str	r2, [r7, #4]
   15474:	0019      	movs	r1, r3
   15476:	230b      	movs	r3, #11
   15478:	18fb      	adds	r3, r7, r3
   1547a:	1c02      	adds	r2, r0, #0
   1547c:	701a      	strb	r2, [r3, #0]
   1547e:	2308      	movs	r3, #8
   15480:	18fb      	adds	r3, r7, r3
   15482:	1c0a      	adds	r2, r1, #0
   15484:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	int32_t error = ERROR_NONE;
   15486:	2300      	movs	r3, #0
   15488:	617b      	str	r3, [r7, #20]
	//asssemble the message being read
	imuData.address = LSM6DSO_I2C_ADD_H;
   1548a:	4b13      	ldr	r3, [pc, #76]	; (154d8 <platform_read+0x70>)
   1548c:	226b      	movs	r2, #107	; 0x6b
   1548e:	701a      	strb	r2, [r3, #0]
	imuData.lenIn = len;
   15490:	4b11      	ldr	r3, [pc, #68]	; (154d8 <platform_read+0x70>)
   15492:	2208      	movs	r2, #8
   15494:	18ba      	adds	r2, r7, r2
   15496:	8812      	ldrh	r2, [r2, #0]
   15498:	819a      	strh	r2, [r3, #12]
	imuData.msgIn = bufp;
   1549a:	4b0f      	ldr	r3, [pc, #60]	; (154d8 <platform_read+0x70>)
   1549c:	687a      	ldr	r2, [r7, #4]
   1549e:	609a      	str	r2, [r3, #8]
	//clear our outwards message
	imuData.lenOut = 1;
   154a0:	4b0d      	ldr	r3, [pc, #52]	; (154d8 <platform_read+0x70>)
   154a2:	2201      	movs	r2, #1
   154a4:	81da      	strh	r2, [r3, #14]
	msgOutImu[0] = reg;
   154a6:	4b0d      	ldr	r3, [pc, #52]	; (154dc <platform_read+0x74>)
   154a8:	220b      	movs	r2, #11
   154aa:	18ba      	adds	r2, r7, r2
   154ac:	7812      	ldrb	r2, [r2, #0]
   154ae:	701a      	strb	r2, [r3, #0]
	msgOutImu[1] = 0;
   154b0:	4b0a      	ldr	r3, [pc, #40]	; (154dc <platform_read+0x74>)
   154b2:	2200      	movs	r2, #0
   154b4:	705a      	strb	r2, [r3, #1]
	imuData.msgOut = &msgOutImu;
   154b6:	4b08      	ldr	r3, [pc, #32]	; (154d8 <platform_read+0x70>)
   154b8:	4a08      	ldr	r2, [pc, #32]	; (154dc <platform_read+0x74>)
   154ba:	605a      	str	r2, [r3, #4]
	//read the imudata struct
	error = I2cReadDataWait(&imuData, 5, 100);
   154bc:	4b06      	ldr	r3, [pc, #24]	; (154d8 <platform_read+0x70>)
   154be:	2264      	movs	r2, #100	; 0x64
   154c0:	2105      	movs	r1, #5
   154c2:	0018      	movs	r0, r3
   154c4:	4b06      	ldr	r3, [pc, #24]	; (154e0 <platform_read+0x78>)
   154c6:	4798      	blx	r3
   154c8:	0003      	movs	r3, r0
   154ca:	617b      	str	r3, [r7, #20]
	
	return error;
   154cc:	697b      	ldr	r3, [r7, #20]

}
   154ce:	0018      	movs	r0, r3
   154d0:	46bd      	mov	sp, r7
   154d2:	b006      	add	sp, #24
   154d4:	bd80      	pop	{r7, pc}
   154d6:	46c0      	nop			; (mov r8, r8)
   154d8:	20004850 	.word	0x20004850
   154dc:	20004810 	.word	0x20004810
   154e0:	000145c1 	.word	0x000145c1

000154e4 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   154e4:	b580      	push	{r7, lr}
   154e6:	af00      	add	r7, sp, #0
return &dev_ctx;
   154e8:	4b01      	ldr	r3, [pc, #4]	; (154f0 <GetImuStruct+0xc>)
}
   154ea:	0018      	movs	r0, r3
   154ec:	46bd      	mov	sp, r7
   154ee:	bd80      	pop	{r7, pc}
   154f0:	20000020 	.word	0x20000020

000154f4 <InitImu>:



int32_t InitImu(void)
{
   154f4:	b580      	push	{r7, lr}
   154f6:	b082      	sub	sp, #8
   154f8:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
   154fa:	2300      	movs	r3, #0
   154fc:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
   154fe:	4b23      	ldr	r3, [pc, #140]	; (1558c <InitImu+0x98>)
   15500:	2101      	movs	r1, #1
   15502:	0018      	movs	r0, r3
   15504:	4b22      	ldr	r3, [pc, #136]	; (15590 <InitImu+0x9c>)
   15506:	4798      	blx	r3
   15508:	0003      	movs	r3, r0
   1550a:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
   1550c:	1cfa      	adds	r2, r7, #3
   1550e:	4b1f      	ldr	r3, [pc, #124]	; (1558c <InitImu+0x98>)
   15510:	0011      	movs	r1, r2
   15512:	0018      	movs	r0, r3
   15514:	4b1f      	ldr	r3, [pc, #124]	; (15594 <InitImu+0xa0>)
   15516:	4798      	blx	r3
   15518:	0002      	movs	r2, r0
   1551a:	687b      	ldr	r3, [r7, #4]
   1551c:	4313      	orrs	r3, r2
   1551e:	607b      	str	r3, [r7, #4]
  } while (rst);
   15520:	1cfb      	adds	r3, r7, #3
   15522:	781b      	ldrb	r3, [r3, #0]
   15524:	2b00      	cmp	r3, #0
   15526:	d1f1      	bne.n	1550c <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
   15528:	4b18      	ldr	r3, [pc, #96]	; (1558c <InitImu+0x98>)
   1552a:	2180      	movs	r1, #128	; 0x80
   1552c:	0018      	movs	r0, r3
   1552e:	4b1a      	ldr	r3, [pc, #104]	; (15598 <InitImu+0xa4>)
   15530:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   15532:	4b16      	ldr	r3, [pc, #88]	; (1558c <InitImu+0x98>)
   15534:	2101      	movs	r1, #1
   15536:	0018      	movs	r0, r3
   15538:	4b18      	ldr	r3, [pc, #96]	; (1559c <InitImu+0xa8>)
   1553a:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
   1553c:	4b13      	ldr	r3, [pc, #76]	; (1558c <InitImu+0x98>)
   1553e:	2100      	movs	r1, #0
   15540:	0018      	movs	r0, r3
   15542:	4b17      	ldr	r3, [pc, #92]	; (155a0 <InitImu+0xac>)
   15544:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
   15546:	4b11      	ldr	r3, [pc, #68]	; (1558c <InitImu+0x98>)
   15548:	2101      	movs	r1, #1
   1554a:	0018      	movs	r0, r3
   1554c:	4b15      	ldr	r3, [pc, #84]	; (155a4 <InitImu+0xb0>)
   1554e:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
   15550:	4b0e      	ldr	r3, [pc, #56]	; (1558c <InitImu+0x98>)
   15552:	2101      	movs	r1, #1
   15554:	0018      	movs	r0, r3
   15556:	4b14      	ldr	r3, [pc, #80]	; (155a8 <InitImu+0xb4>)
   15558:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
   1555a:	4b0c      	ldr	r3, [pc, #48]	; (1558c <InitImu+0x98>)
   1555c:	2100      	movs	r1, #0
   1555e:	0018      	movs	r0, r3
   15560:	4b12      	ldr	r3, [pc, #72]	; (155ac <InitImu+0xb8>)
   15562:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
   15564:	4b09      	ldr	r3, [pc, #36]	; (1558c <InitImu+0x98>)
   15566:	2106      	movs	r1, #6
   15568:	0018      	movs	r0, r3
   1556a:	4b11      	ldr	r3, [pc, #68]	; (155b0 <InitImu+0xbc>)
   1556c:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
   1556e:	4b07      	ldr	r3, [pc, #28]	; (1558c <InitImu+0x98>)
   15570:	2104      	movs	r1, #4
   15572:	0018      	movs	r0, r3
   15574:	4b0f      	ldr	r3, [pc, #60]	; (155b4 <InitImu+0xc0>)
   15576:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
   15578:	4b04      	ldr	r3, [pc, #16]	; (1558c <InitImu+0x98>)
   1557a:	2101      	movs	r1, #1
   1557c:	0018      	movs	r0, r3
   1557e:	4b0e      	ldr	r3, [pc, #56]	; (155b8 <InitImu+0xc4>)
   15580:	4798      	blx	r3

  return error;
   15582:	687b      	ldr	r3, [r7, #4]
}
   15584:	0018      	movs	r0, r3
   15586:	46bd      	mov	sp, r7
   15588:	b002      	add	sp, #8
   1558a:	bd80      	pop	{r7, pc}
   1558c:	20000020 	.word	0x20000020
   15590:	00015051 	.word	0x00015051
   15594:	000150bd 	.word	0x000150bd
   15598:	0001521d 	.word	0x0001521d
   1559c:	00014df9 	.word	0x00014df9
   155a0:	00014e65 	.word	0x00014e65
   155a4:	00014805 	.word	0x00014805
   155a8:	00014b35 	.word	0x00014b35
   155ac:	00014799 	.word	0x00014799
   155b0:	00014ac9 	.word	0x00014ac9
   155b4:	00015165 	.word	0x00015165
   155b8:	000150f9 	.word	0x000150f9

000155bc <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(void)
{
   155bc:	b580      	push	{r7, lr}
   155be:	b082      	sub	sp, #8
   155c0:	af00      	add	r7, sp, #0
    uint8_t count = 0;
   155c2:	1cfb      	adds	r3, r7, #3
   155c4:	2200      	movs	r2, #0
   155c6:	701a      	strb	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   155c8:	4b11      	ldr	r3, [pc, #68]	; (15610 <SeesawGetKeypadCount+0x54>)
   155ca:	222e      	movs	r2, #46	; 0x2e
   155cc:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   155ce:	4b10      	ldr	r3, [pc, #64]	; (15610 <SeesawGetKeypadCount+0x54>)
   155d0:	4a10      	ldr	r2, [pc, #64]	; (15614 <SeesawGetKeypadCount+0x58>)
   155d2:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   155d4:	4b0e      	ldr	r3, [pc, #56]	; (15610 <SeesawGetKeypadCount+0x54>)
   155d6:	2202      	movs	r2, #2
   155d8:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   155da:	4b0d      	ldr	r3, [pc, #52]	; (15610 <SeesawGetKeypadCount+0x54>)
   155dc:	1cfa      	adds	r2, r7, #3
   155de:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   155e0:	4b0b      	ldr	r3, [pc, #44]	; (15610 <SeesawGetKeypadCount+0x54>)
   155e2:	2201      	movs	r2, #1
   155e4:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   155e6:	4b0a      	ldr	r3, [pc, #40]	; (15610 <SeesawGetKeypadCount+0x54>)
   155e8:	2264      	movs	r2, #100	; 0x64
   155ea:	2100      	movs	r1, #0
   155ec:	0018      	movs	r0, r3
   155ee:	4b0a      	ldr	r3, [pc, #40]	; (15618 <SeesawGetKeypadCount+0x5c>)
   155f0:	4798      	blx	r3
   155f2:	0003      	movs	r3, r0
   155f4:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   155f6:	687b      	ldr	r3, [r7, #4]
   155f8:	2b00      	cmp	r3, #0
   155fa:	d003      	beq.n	15604 <SeesawGetKeypadCount+0x48>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   155fc:	4b07      	ldr	r3, [pc, #28]	; (1561c <SeesawGetKeypadCount+0x60>)
   155fe:	0018      	movs	r0, r3
   15600:	4b07      	ldr	r3, [pc, #28]	; (15620 <SeesawGetKeypadCount+0x64>)
   15602:	4798      	blx	r3
    }
    return count;
   15604:	1cfb      	adds	r3, r7, #3
   15606:	781b      	ldrb	r3, [r3, #0]
}
   15608:	0018      	movs	r0, r3
   1560a:	46bd      	mov	sp, r7
   1560c:	b002      	add	sp, #8
   1560e:	bd80      	pop	{r7, pc}
   15610:	20004860 	.word	0x20004860
   15614:	0003624c 	.word	0x0003624c
   15618:	000145c1 	.word	0x000145c1
   1561c:	00036310 	.word	0x00036310
   15620:	0001dce5 	.word	0x0001dce5

00015624 <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
{
   15624:	b580      	push	{r7, lr}
   15626:	b084      	sub	sp, #16
   15628:	af00      	add	r7, sp, #0
   1562a:	6078      	str	r0, [r7, #4]
   1562c:	000a      	movs	r2, r1
   1562e:	1cfb      	adds	r3, r7, #3
   15630:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   15632:	1cfb      	adds	r3, r7, #3
   15634:	781b      	ldrb	r3, [r3, #0]
   15636:	2b00      	cmp	r3, #0
   15638:	d101      	bne.n	1563e <SeesawReadKeypad+0x1a>
   1563a:	2300      	movs	r3, #0
   1563c:	e026      	b.n	1568c <SeesawReadKeypad+0x68>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   1563e:	2308      	movs	r3, #8
   15640:	18fb      	adds	r3, r7, r3
   15642:	4a14      	ldr	r2, [pc, #80]	; (15694 <SeesawReadKeypad+0x70>)
   15644:	8812      	ldrh	r2, [r2, #0]
   15646:	801a      	strh	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   15648:	4b13      	ldr	r3, [pc, #76]	; (15698 <SeesawReadKeypad+0x74>)
   1564a:	222e      	movs	r2, #46	; 0x2e
   1564c:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   1564e:	4b12      	ldr	r3, [pc, #72]	; (15698 <SeesawReadKeypad+0x74>)
   15650:	2208      	movs	r2, #8
   15652:	18ba      	adds	r2, r7, r2
   15654:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   15656:	4b10      	ldr	r3, [pc, #64]	; (15698 <SeesawReadKeypad+0x74>)
   15658:	2202      	movs	r2, #2
   1565a:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   1565c:	4b0e      	ldr	r3, [pc, #56]	; (15698 <SeesawReadKeypad+0x74>)
   1565e:	687a      	ldr	r2, [r7, #4]
   15660:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   15662:	1cfb      	adds	r3, r7, #3
   15664:	781b      	ldrb	r3, [r3, #0]
   15666:	b29a      	uxth	r2, r3
   15668:	4b0b      	ldr	r3, [pc, #44]	; (15698 <SeesawReadKeypad+0x74>)
   1566a:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   1566c:	4b0a      	ldr	r3, [pc, #40]	; (15698 <SeesawReadKeypad+0x74>)
   1566e:	2264      	movs	r2, #100	; 0x64
   15670:	2100      	movs	r1, #0
   15672:	0018      	movs	r0, r3
   15674:	4b09      	ldr	r3, [pc, #36]	; (1569c <SeesawReadKeypad+0x78>)
   15676:	4798      	blx	r3
   15678:	0003      	movs	r3, r0
   1567a:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   1567c:	68fb      	ldr	r3, [r7, #12]
   1567e:	2b00      	cmp	r3, #0
   15680:	d003      	beq.n	1568a <SeesawReadKeypad+0x66>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   15682:	4b07      	ldr	r3, [pc, #28]	; (156a0 <SeesawReadKeypad+0x7c>)
   15684:	0018      	movs	r0, r3
   15686:	4b07      	ldr	r3, [pc, #28]	; (156a4 <SeesawReadKeypad+0x80>)
   15688:	4798      	blx	r3
    }
    return error;
   1568a:	68fb      	ldr	r3, [r7, #12]
}
   1568c:	0018      	movs	r0, r3
   1568e:	46bd      	mov	sp, r7
   15690:	b004      	add	sp, #16
   15692:	bd80      	pop	{r7, pc}
   15694:	00036334 	.word	0x00036334
   15698:	20004860 	.word	0x20004860
   1569c:	000145c1 	.word	0x000145c1
   156a0:	00036310 	.word	0x00036310
   156a4:	0001dce5 	.word	0x0001dce5

000156a8 <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   156a8:	b5b0      	push	{r4, r5, r7, lr}
   156aa:	b086      	sub	sp, #24
   156ac:	af00      	add	r7, sp, #0
   156ae:	0005      	movs	r5, r0
   156b0:	000c      	movs	r4, r1
   156b2:	0010      	movs	r0, r2
   156b4:	0019      	movs	r1, r3
   156b6:	1dfb      	adds	r3, r7, #7
   156b8:	1c2a      	adds	r2, r5, #0
   156ba:	701a      	strb	r2, [r3, #0]
   156bc:	1dbb      	adds	r3, r7, #6
   156be:	1c22      	adds	r2, r4, #0
   156c0:	701a      	strb	r2, [r3, #0]
   156c2:	1d7b      	adds	r3, r7, #5
   156c4:	1c02      	adds	r2, r0, #0
   156c6:	701a      	strb	r2, [r3, #0]
   156c8:	1d3b      	adds	r3, r7, #4
   156ca:	1c0a      	adds	r2, r1, #0
   156cc:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   156ce:	2308      	movs	r3, #8
   156d0:	18fb      	adds	r3, r7, r3
   156d2:	220e      	movs	r2, #14
   156d4:	701a      	strb	r2, [r3, #0]
   156d6:	2308      	movs	r3, #8
   156d8:	18fb      	adds	r3, r7, r3
   156da:	2204      	movs	r2, #4
   156dc:	705a      	strb	r2, [r3, #1]
   156de:	2308      	movs	r3, #8
   156e0:	18fb      	adds	r3, r7, r3
   156e2:	2200      	movs	r2, #0
   156e4:	709a      	strb	r2, [r3, #2]
   156e6:	2308      	movs	r3, #8
   156e8:	18fb      	adds	r3, r7, r3
   156ea:	2200      	movs	r2, #0
   156ec:	70da      	strb	r2, [r3, #3]
   156ee:	2308      	movs	r3, #8
   156f0:	18fb      	adds	r3, r7, r3
   156f2:	1d7a      	adds	r2, r7, #5
   156f4:	7812      	ldrb	r2, [r2, #0]
   156f6:	711a      	strb	r2, [r3, #4]
   156f8:	2308      	movs	r3, #8
   156fa:	18fb      	adds	r3, r7, r3
   156fc:	1dba      	adds	r2, r7, #6
   156fe:	7812      	ldrb	r2, [r2, #0]
   15700:	715a      	strb	r2, [r3, #5]
   15702:	2308      	movs	r3, #8
   15704:	18fb      	adds	r3, r7, r3
   15706:	1d3a      	adds	r2, r7, #4
   15708:	7812      	ldrb	r2, [r2, #0]
   1570a:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   1570c:	1dfb      	adds	r3, r7, #7
   1570e:	781b      	ldrb	r3, [r3, #0]
   15710:	b29b      	uxth	r3, r3
   15712:	2216      	movs	r2, #22
   15714:	18ba      	adds	r2, r7, r2
   15716:	1c19      	adds	r1, r3, #0
   15718:	1c0b      	adds	r3, r1, #0
   1571a:	18db      	adds	r3, r3, r3
   1571c:	185b      	adds	r3, r3, r1
   1571e:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   15720:	2316      	movs	r3, #22
   15722:	18fb      	adds	r3, r7, r3
   15724:	881b      	ldrh	r3, [r3, #0]
   15726:	0a1b      	lsrs	r3, r3, #8
   15728:	b29b      	uxth	r3, r3
   1572a:	b2da      	uxtb	r2, r3
   1572c:	2308      	movs	r3, #8
   1572e:	18fb      	adds	r3, r7, r3
   15730:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   15732:	2316      	movs	r3, #22
   15734:	18fb      	adds	r3, r7, r3
   15736:	881b      	ldrh	r3, [r3, #0]
   15738:	b2da      	uxtb	r2, r3
   1573a:	2308      	movs	r3, #8
   1573c:	18fb      	adds	r3, r7, r3
   1573e:	70da      	strb	r2, [r3, #3]

    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   15740:	4b09      	ldr	r3, [pc, #36]	; (15768 <SeesawSetLed+0xc0>)
   15742:	2208      	movs	r2, #8
   15744:	18ba      	adds	r2, r7, r2
   15746:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   15748:	4b07      	ldr	r3, [pc, #28]	; (15768 <SeesawSetLed+0xc0>)
   1574a:	2207      	movs	r2, #7
   1574c:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   1574e:	4b06      	ldr	r3, [pc, #24]	; (15768 <SeesawSetLed+0xc0>)
   15750:	2164      	movs	r1, #100	; 0x64
   15752:	0018      	movs	r0, r3
   15754:	4b05      	ldr	r3, [pc, #20]	; (1576c <SeesawSetLed+0xc4>)
   15756:	4798      	blx	r3
   15758:	0003      	movs	r3, r0
   1575a:	613b      	str	r3, [r7, #16]
    return error;
   1575c:	693b      	ldr	r3, [r7, #16]
}
   1575e:	0018      	movs	r0, r3
   15760:	46bd      	mov	sp, r7
   15762:	b006      	add	sp, #24
   15764:	bdb0      	pop	{r4, r5, r7, pc}
   15766:	46c0      	nop			; (mov r8, r8)
   15768:	20004860 	.word	0x20004860
   1576c:	000144e9 	.word	0x000144e9

00015770 <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(void)
{
   15770:	b580      	push	{r7, lr}
   15772:	b082      	sub	sp, #8
   15774:	af00      	add	r7, sp, #0
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   15776:	003b      	movs	r3, r7
   15778:	4a0a      	ldr	r2, [pc, #40]	; (157a4 <SeesawOrderLedUpdate+0x34>)
   1577a:	8812      	ldrh	r2, [r2, #0]
   1577c:	801a      	strh	r2, [r3, #0]

    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   1577e:	4b0a      	ldr	r3, [pc, #40]	; (157a8 <SeesawOrderLedUpdate+0x38>)
   15780:	003a      	movs	r2, r7
   15782:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   15784:	4b08      	ldr	r3, [pc, #32]	; (157a8 <SeesawOrderLedUpdate+0x38>)
   15786:	2202      	movs	r2, #2
   15788:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   1578a:	4b07      	ldr	r3, [pc, #28]	; (157a8 <SeesawOrderLedUpdate+0x38>)
   1578c:	2164      	movs	r1, #100	; 0x64
   1578e:	0018      	movs	r0, r3
   15790:	4b06      	ldr	r3, [pc, #24]	; (157ac <SeesawOrderLedUpdate+0x3c>)
   15792:	4798      	blx	r3
   15794:	0003      	movs	r3, r0
   15796:	607b      	str	r3, [r7, #4]
    return error;
   15798:	687b      	ldr	r3, [r7, #4]
}
   1579a:	0018      	movs	r0, r3
   1579c:	46bd      	mov	sp, r7
   1579e:	b002      	add	sp, #8
   157a0:	bd80      	pop	{r7, pc}
   157a2:	46c0      	nop			; (mov r8, r8)
   157a4:	00036338 	.word	0x00036338
   157a8:	20004860 	.word	0x20004860
   157ac:	000144e9 	.word	0x000144e9

000157b0 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   157b0:	b590      	push	{r4, r7, lr}
   157b2:	b087      	sub	sp, #28
   157b4:	af00      	add	r7, sp, #0
   157b6:	6078      	str	r0, [r7, #4]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!\r\n");
   157b8:	4b9a      	ldr	r3, [pc, #616]	; (15a24 <vUiHandlerTask+0x274>)
   157ba:	0018      	movs	r0, r3
   157bc:	4b9a      	ldr	r3, [pc, #616]	; (15a28 <vUiHandlerTask+0x278>)
   157be:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   157c0:	4b9a      	ldr	r3, [pc, #616]	; (15a2c <vUiHandlerTask+0x27c>)
   157c2:	2201      	movs	r2, #1
   157c4:	701a      	strb	r2, [r3, #0]

    // Graphics Test - Students to uncomment to test out the OLED driver if you are using it! 
	
    gfx_mono_init();
   157c6:	4b9a      	ldr	r3, [pc, #616]	; (15a30 <vUiHandlerTask+0x280>)
   157c8:	4798      	blx	r3
    //gfx_mono_draw_line(0, 0, 64, 48, GFX_PIXEL_SET);
    //gfx_mono_draw_filled_circle(54, 24, 10, GFX_PIXEL_SET, GFX_WHOLE);
	gfx_mono_draw_string("ESE516", 0, 8, &sysfont);
   157ca:	4b9a      	ldr	r3, [pc, #616]	; (15a34 <vUiHandlerTask+0x284>)
   157cc:	489a      	ldr	r0, [pc, #616]	; (15a38 <vUiHandlerTask+0x288>)
   157ce:	2208      	movs	r2, #8
   157d0:	2100      	movs	r1, #0
   157d2:	4c9a      	ldr	r4, [pc, #616]	; (15a3c <vUiHandlerTask+0x28c>)
   157d4:	47a0      	blx	r4
	gfx_mono_draw_string("IoTracking", 0, 18, &sysfont);
   157d6:	4b97      	ldr	r3, [pc, #604]	; (15a34 <vUiHandlerTask+0x284>)
   157d8:	4899      	ldr	r0, [pc, #612]	; (15a40 <vUiHandlerTask+0x290>)
   157da:	2212      	movs	r2, #18
   157dc:	2100      	movs	r1, #0
   157de:	4c97      	ldr	r4, [pc, #604]	; (15a3c <vUiHandlerTask+0x28c>)
   157e0:	47a0      	blx	r4
	gfx_mono_draw_string("Derek Zhou", 0, 28, &sysfont);
   157e2:	4b94      	ldr	r3, [pc, #592]	; (15a34 <vUiHandlerTask+0x284>)
   157e4:	4897      	ldr	r0, [pc, #604]	; (15a44 <vUiHandlerTask+0x294>)
   157e6:	221c      	movs	r2, #28
   157e8:	2100      	movs	r1, #0
   157ea:	4c94      	ldr	r4, [pc, #592]	; (15a3c <vUiHandlerTask+0x28c>)
   157ec:	47a0      	blx	r4
	gfx_mono_draw_string("Weihao H.", 0, 38, &sysfont);
   157ee:	4b91      	ldr	r3, [pc, #580]	; (15a34 <vUiHandlerTask+0x284>)
   157f0:	4895      	ldr	r0, [pc, #596]	; (15a48 <vUiHandlerTask+0x298>)
   157f2:	2226      	movs	r2, #38	; 0x26
   157f4:	2100      	movs	r1, #0
   157f6:	4c91      	ldr	r4, [pc, #580]	; (15a3c <vUiHandlerTask+0x28c>)
   157f8:	47a0      	blx	r4

    // Here we start the loop for the UI State Machine
    while (1) {
        switch (uiState) {
   157fa:	4b8c      	ldr	r3, [pc, #560]	; (15a2c <vUiHandlerTask+0x27c>)
   157fc:	781b      	ldrb	r3, [r3, #0]
   157fe:	2b01      	cmp	r3, #1
   15800:	d100      	bne.n	15804 <vUiHandlerTask+0x54>
   15802:	e107      	b.n	15a14 <vUiHandlerTask+0x264>
   15804:	2b02      	cmp	r3, #2
   15806:	d002      	beq.n	1580e <vUiHandlerTask+0x5e>
   15808:	2b00      	cmp	r3, #0
   1580a:	d06e      	beq.n	158ea <vUiHandlerTask+0x13a>
   1580c:	e0fe      	b.n	15a0c <vUiHandlerTask+0x25c>
            }

            case (UI_STATE_SHOW_MOVES): {
                // Set initial state variable that will be used on the
                // UI_STATE_Handle_Buttons and need to be initialized once
                pressedKeys = 0;  // Set number of keys pressed by player to 0.
   1580e:	4b8f      	ldr	r3, [pc, #572]	; (15a4c <vUiHandlerTask+0x29c>)
   15810:	2200      	movs	r2, #0
   15812:	701a      	strb	r2, [r3, #0]
                keysToPress = 1;  // Set as an example to 1. STUDENTS should change this
   15814:	4b8e      	ldr	r3, [pc, #568]	; (15a50 <vUiHandlerTask+0x2a0>)
   15816:	2201      	movs	r2, #1
   15818:	701a      	strb	r2, [r3, #0]
                                  // to the number of key presses needed.
                memset(gamePacketOut.game, 0xff,
   1581a:	4b8e      	ldr	r3, [pc, #568]	; (15a54 <vUiHandlerTask+0x2a4>)
   1581c:	2214      	movs	r2, #20
   1581e:	21ff      	movs	r1, #255	; 0xff
   15820:	0018      	movs	r0, r3
   15822:	4b8d      	ldr	r3, [pc, #564]	; (15a58 <vUiHandlerTask+0x2a8>)
   15824:	4798      	blx	r3
                       sizeof(gamePacketOut.game));  // Erase gamePacketOut to an initial state
                playIsDone = false;                  // Set play to false
   15826:	4b8d      	ldr	r3, [pc, #564]	; (15a5c <vUiHandlerTask+0x2ac>)
   15828:	2200      	movs	r2, #0
   1582a:	701a      	strb	r2, [r3, #0]
                uint8_t presses = SeesawGetKeypadCount();
   1582c:	2317      	movs	r3, #23
   1582e:	18fc      	adds	r4, r7, r3
   15830:	4b8b      	ldr	r3, [pc, #556]	; (15a60 <vUiHandlerTask+0x2b0>)
   15832:	4798      	blx	r3
   15834:	0003      	movs	r3, r0
   15836:	7023      	strb	r3, [r4, #0]
                if (presses >= BUTTON_PRESSES_MAX) presses = BUTTON_PRESSES_MAX;
   15838:	2317      	movs	r3, #23
   1583a:	18fb      	adds	r3, r7, r3
   1583c:	781b      	ldrb	r3, [r3, #0]
   1583e:	2b0f      	cmp	r3, #15
   15840:	d903      	bls.n	1584a <vUiHandlerTask+0x9a>
   15842:	2317      	movs	r3, #23
   15844:	18fb      	adds	r3, r7, r3
   15846:	2210      	movs	r2, #16
   15848:	701a      	strb	r2, [r3, #0]
                if (presses != 0)
   1584a:	2317      	movs	r3, #23
   1584c:	18fb      	adds	r3, r7, r3
   1584e:	781b      	ldrb	r3, [r3, #0]
   15850:	2b00      	cmp	r3, #0
   15852:	d007      	beq.n	15864 <vUiHandlerTask+0xb4>
                    SeesawReadKeypad(buttons,
   15854:	2317      	movs	r3, #23
   15856:	18fb      	adds	r3, r7, r3
   15858:	781a      	ldrb	r2, [r3, #0]
   1585a:	4b82      	ldr	r3, [pc, #520]	; (15a64 <vUiHandlerTask+0x2b4>)
   1585c:	0011      	movs	r1, r2
   1585e:	0018      	movs	r0, r3
   15860:	4b81      	ldr	r3, [pc, #516]	; (15a68 <vUiHandlerTask+0x2b8>)
   15862:	4798      	blx	r3
                                     presses);  // Empty Seesaw buffer just in case
                                                // it has latent presses on it!
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   15864:	4b7f      	ldr	r3, [pc, #508]	; (15a64 <vUiHandlerTask+0x2b4>)
   15866:	2210      	movs	r2, #16
   15868:	2100      	movs	r1, #0
   1586a:	0018      	movs	r0, r3
   1586c:	4b7a      	ldr	r3, [pc, #488]	; (15a58 <vUiHandlerTask+0x2a8>)
   1586e:	4798      	blx	r3
                // the message gets longer might be more fun! After you finish showing
                // the move should go to state UI_STATE_HANDLE_BUTTONS

                // In the beginner example we turn LED0 and LED15 will turn on for 500
                // ms then we go to UI_STATE_HANDLE_BUTTONS
                SeesawSetLed(0, red, green, blue);  // Turn button 1 on
   15870:	4b7e      	ldr	r3, [pc, #504]	; (15a6c <vUiHandlerTask+0x2bc>)
   15872:	781b      	ldrb	r3, [r3, #0]
   15874:	b2d9      	uxtb	r1, r3
   15876:	4b7e      	ldr	r3, [pc, #504]	; (15a70 <vUiHandlerTask+0x2c0>)
   15878:	781b      	ldrb	r3, [r3, #0]
   1587a:	b2da      	uxtb	r2, r3
   1587c:	4b7d      	ldr	r3, [pc, #500]	; (15a74 <vUiHandlerTask+0x2c4>)
   1587e:	781b      	ldrb	r3, [r3, #0]
   15880:	b2db      	uxtb	r3, r3
   15882:	2000      	movs	r0, #0
   15884:	4c7c      	ldr	r4, [pc, #496]	; (15a78 <vUiHandlerTask+0x2c8>)
   15886:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   15888:	4b7c      	ldr	r3, [pc, #496]	; (15a7c <vUiHandlerTask+0x2cc>)
   1588a:	4798      	blx	r3
                vTaskDelay(1000);
   1588c:	23fa      	movs	r3, #250	; 0xfa
   1588e:	009b      	lsls	r3, r3, #2
   15890:	0018      	movs	r0, r3
   15892:	4b7b      	ldr	r3, [pc, #492]	; (15a80 <vUiHandlerTask+0x2d0>)
   15894:	4798      	blx	r3
                SeesawSetLed(0, 0, 0, 0);            // Turn button 0 off
   15896:	2300      	movs	r3, #0
   15898:	2200      	movs	r2, #0
   1589a:	2100      	movs	r1, #0
   1589c:	2000      	movs	r0, #0
   1589e:	4c76      	ldr	r4, [pc, #472]	; (15a78 <vUiHandlerTask+0x2c8>)
   158a0:	47a0      	blx	r4
                SeesawSetLed(15, red, green, blue);  // Turn button 15 on
   158a2:	4b72      	ldr	r3, [pc, #456]	; (15a6c <vUiHandlerTask+0x2bc>)
   158a4:	781b      	ldrb	r3, [r3, #0]
   158a6:	b2d9      	uxtb	r1, r3
   158a8:	4b71      	ldr	r3, [pc, #452]	; (15a70 <vUiHandlerTask+0x2c0>)
   158aa:	781b      	ldrb	r3, [r3, #0]
   158ac:	b2da      	uxtb	r2, r3
   158ae:	4b71      	ldr	r3, [pc, #452]	; (15a74 <vUiHandlerTask+0x2c4>)
   158b0:	781b      	ldrb	r3, [r3, #0]
   158b2:	b2db      	uxtb	r3, r3
   158b4:	200f      	movs	r0, #15
   158b6:	4c70      	ldr	r4, [pc, #448]	; (15a78 <vUiHandlerTask+0x2c8>)
   158b8:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   158ba:	4b70      	ldr	r3, [pc, #448]	; (15a7c <vUiHandlerTask+0x2cc>)
   158bc:	4798      	blx	r3
                vTaskDelay(1000);
   158be:	23fa      	movs	r3, #250	; 0xfa
   158c0:	009b      	lsls	r3, r3, #2
   158c2:	0018      	movs	r0, r3
   158c4:	4b6e      	ldr	r3, [pc, #440]	; (15a80 <vUiHandlerTask+0x2d0>)
   158c6:	4798      	blx	r3
                SeesawSetLed(15, 0, 0, 0);  // Turn button 15 off
   158c8:	2300      	movs	r3, #0
   158ca:	2200      	movs	r2, #0
   158cc:	2100      	movs	r1, #0
   158ce:	200f      	movs	r0, #15
   158d0:	4c69      	ldr	r4, [pc, #420]	; (15a78 <vUiHandlerTask+0x2c8>)
   158d2:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   158d4:	4b69      	ldr	r3, [pc, #420]	; (15a7c <vUiHandlerTask+0x2cc>)
   158d6:	4798      	blx	r3
                vTaskDelay(1000);
   158d8:	23fa      	movs	r3, #250	; 0xfa
   158da:	009b      	lsls	r3, r3, #2
   158dc:	0018      	movs	r0, r3
   158de:	4b68      	ldr	r3, [pc, #416]	; (15a80 <vUiHandlerTask+0x2d0>)
   158e0:	4798      	blx	r3
                uiState = UI_STATE_HANDLE_BUTTONS;
   158e2:	4b52      	ldr	r3, [pc, #328]	; (15a2c <vUiHandlerTask+0x27c>)
   158e4:	2200      	movs	r2, #0
   158e6:	701a      	strb	r2, [r3, #0]

                break;
   158e8:	e097      	b.n	15a1a <vUiHandlerTask+0x26a>
                // should be stored on "gamePacketOut". The keypresses that should count
                // are when the player RELEASES the button.

                // In this example, we return after only one button press!

                uint8_t numPresses = SeesawGetKeypadCount();
   158ea:	2316      	movs	r3, #22
   158ec:	18fc      	adds	r4, r7, r3
   158ee:	4b5c      	ldr	r3, [pc, #368]	; (15a60 <vUiHandlerTask+0x2b0>)
   158f0:	4798      	blx	r3
   158f2:	0003      	movs	r3, r0
   158f4:	7023      	strb	r3, [r4, #0]
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   158f6:	4b5b      	ldr	r3, [pc, #364]	; (15a64 <vUiHandlerTask+0x2b4>)
   158f8:	2210      	movs	r2, #16
   158fa:	2100      	movs	r1, #0
   158fc:	0018      	movs	r0, r3
   158fe:	4b56      	ldr	r3, [pc, #344]	; (15a58 <vUiHandlerTask+0x2a8>)
   15900:	4798      	blx	r3

                if (numPresses >= BUTTON_PRESSES_MAX) {
   15902:	2316      	movs	r3, #22
   15904:	18fb      	adds	r3, r7, r3
   15906:	781b      	ldrb	r3, [r3, #0]
   15908:	2b0f      	cmp	r3, #15
   1590a:	d903      	bls.n	15914 <vUiHandlerTask+0x164>
                    numPresses = BUTTON_PRESSES_MAX;
   1590c:	2316      	movs	r3, #22
   1590e:	18fb      	adds	r3, r7, r3
   15910:	2210      	movs	r2, #16
   15912:	701a      	strb	r2, [r3, #0]
                }
                if (numPresses != 0 && ERROR_NONE == SeesawReadKeypad(buttons, numPresses)) {
   15914:	2316      	movs	r3, #22
   15916:	18fb      	adds	r3, r7, r3
   15918:	781b      	ldrb	r3, [r3, #0]
   1591a:	2b00      	cmp	r3, #0
   1591c:	d065      	beq.n	159ea <vUiHandlerTask+0x23a>
   1591e:	2316      	movs	r3, #22
   15920:	18fb      	adds	r3, r7, r3
   15922:	781a      	ldrb	r2, [r3, #0]
   15924:	4b4f      	ldr	r3, [pc, #316]	; (15a64 <vUiHandlerTask+0x2b4>)
   15926:	0011      	movs	r1, r2
   15928:	0018      	movs	r0, r3
   1592a:	4b4f      	ldr	r3, [pc, #316]	; (15a68 <vUiHandlerTask+0x2b8>)
   1592c:	4798      	blx	r3
   1592e:	1e03      	subs	r3, r0, #0
   15930:	d15b      	bne.n	159ea <vUiHandlerTask+0x23a>
                    // Process Buttons
                    for (int iter = 0; iter < numPresses; iter++) {
   15932:	2300      	movs	r3, #0
   15934:	613b      	str	r3, [r7, #16]
   15936:	e050      	b.n	159da <vUiHandlerTask+0x22a>
                        uint8_t keynum = NEO_TRELLIS_SEESAW_KEY((buttons[iter] & 0xFD) >> 2);
   15938:	4a4a      	ldr	r2, [pc, #296]	; (15a64 <vUiHandlerTask+0x2b4>)
   1593a:	693b      	ldr	r3, [r7, #16]
   1593c:	18d3      	adds	r3, r2, r3
   1593e:	781b      	ldrb	r3, [r3, #0]
   15940:	089b      	lsrs	r3, r3, #2
   15942:	b2db      	uxtb	r3, r3
   15944:	2b00      	cmp	r3, #0
   15946:	da00      	bge.n	1594a <vUiHandlerTask+0x19a>
   15948:	3307      	adds	r3, #7
   1594a:	10db      	asrs	r3, r3, #3
   1594c:	b2db      	uxtb	r3, r3
   1594e:	009b      	lsls	r3, r3, #2
   15950:	b2d9      	uxtb	r1, r3
   15952:	4a44      	ldr	r2, [pc, #272]	; (15a64 <vUiHandlerTask+0x2b4>)
   15954:	693b      	ldr	r3, [r7, #16]
   15956:	18d3      	adds	r3, r2, r3
   15958:	781b      	ldrb	r3, [r3, #0]
   1595a:	089b      	lsrs	r3, r3, #2
   1595c:	b2db      	uxtb	r3, r3
   1595e:	2207      	movs	r2, #7
   15960:	4013      	ands	r3, r2
   15962:	b2da      	uxtb	r2, r3
   15964:	230f      	movs	r3, #15
   15966:	18fb      	adds	r3, r7, r3
   15968:	188a      	adds	r2, r1, r2
   1596a:	701a      	strb	r2, [r3, #0]
                        uint8_t actionButton = buttons[iter] & 0x03;
   1596c:	4a3d      	ldr	r2, [pc, #244]	; (15a64 <vUiHandlerTask+0x2b4>)
   1596e:	693b      	ldr	r3, [r7, #16]
   15970:	18d3      	adds	r3, r2, r3
   15972:	781a      	ldrb	r2, [r3, #0]
   15974:	230e      	movs	r3, #14
   15976:	18fb      	adds	r3, r7, r3
   15978:	2103      	movs	r1, #3
   1597a:	400a      	ands	r2, r1
   1597c:	701a      	strb	r2, [r3, #0]
                        if (actionButton == 0x03) {
   1597e:	230e      	movs	r3, #14
   15980:	18fb      	adds	r3, r7, r3
   15982:	781b      	ldrb	r3, [r3, #0]
   15984:	2b03      	cmp	r3, #3
   15986:	d10f      	bne.n	159a8 <vUiHandlerTask+0x1f8>
                            SeesawSetLed(keynum, red, green, blue);
   15988:	4b38      	ldr	r3, [pc, #224]	; (15a6c <vUiHandlerTask+0x2bc>)
   1598a:	781b      	ldrb	r3, [r3, #0]
   1598c:	b2d9      	uxtb	r1, r3
   1598e:	4b38      	ldr	r3, [pc, #224]	; (15a70 <vUiHandlerTask+0x2c0>)
   15990:	781b      	ldrb	r3, [r3, #0]
   15992:	b2da      	uxtb	r2, r3
   15994:	4b37      	ldr	r3, [pc, #220]	; (15a74 <vUiHandlerTask+0x2c4>)
   15996:	781b      	ldrb	r3, [r3, #0]
   15998:	b2dc      	uxtb	r4, r3
   1599a:	230f      	movs	r3, #15
   1599c:	18fb      	adds	r3, r7, r3
   1599e:	7818      	ldrb	r0, [r3, #0]
   159a0:	0023      	movs	r3, r4
   159a2:	4c35      	ldr	r4, [pc, #212]	; (15a78 <vUiHandlerTask+0x2c8>)
   159a4:	47a0      	blx	r4
   159a6:	e015      	b.n	159d4 <vUiHandlerTask+0x224>
                        } else {
                            SeesawSetLed(keynum, 0, 0, 0);
   159a8:	230f      	movs	r3, #15
   159aa:	18fb      	adds	r3, r7, r3
   159ac:	7818      	ldrb	r0, [r3, #0]
   159ae:	2300      	movs	r3, #0
   159b0:	2200      	movs	r2, #0
   159b2:	2100      	movs	r1, #0
   159b4:	4c30      	ldr	r4, [pc, #192]	; (15a78 <vUiHandlerTask+0x2c8>)
   159b6:	47a0      	blx	r4
                            // Button released! Count this into the buttons pressed by user.
                            gamePacketOut.game[pressedKeys] = keynum;
   159b8:	4b24      	ldr	r3, [pc, #144]	; (15a4c <vUiHandlerTask+0x29c>)
   159ba:	781b      	ldrb	r3, [r3, #0]
   159bc:	0019      	movs	r1, r3
   159be:	4b25      	ldr	r3, [pc, #148]	; (15a54 <vUiHandlerTask+0x2a4>)
   159c0:	220f      	movs	r2, #15
   159c2:	18ba      	adds	r2, r7, r2
   159c4:	7812      	ldrb	r2, [r2, #0]
   159c6:	545a      	strb	r2, [r3, r1]
                            pressedKeys++;
   159c8:	4b20      	ldr	r3, [pc, #128]	; (15a4c <vUiHandlerTask+0x29c>)
   159ca:	781b      	ldrb	r3, [r3, #0]
   159cc:	3301      	adds	r3, #1
   159ce:	b2da      	uxtb	r2, r3
   159d0:	4b1e      	ldr	r3, [pc, #120]	; (15a4c <vUiHandlerTask+0x29c>)
   159d2:	701a      	strb	r2, [r3, #0]
                    for (int iter = 0; iter < numPresses; iter++) {
   159d4:	693b      	ldr	r3, [r7, #16]
   159d6:	3301      	adds	r3, #1
   159d8:	613b      	str	r3, [r7, #16]
   159da:	2316      	movs	r3, #22
   159dc:	18fb      	adds	r3, r7, r3
   159de:	781a      	ldrb	r2, [r3, #0]
   159e0:	693b      	ldr	r3, [r7, #16]
   159e2:	429a      	cmp	r2, r3
   159e4:	dca8      	bgt.n	15938 <vUiHandlerTask+0x188>
                        }
                    }
                    SeesawOrderLedUpdate();
   159e6:	4b25      	ldr	r3, [pc, #148]	; (15a7c <vUiHandlerTask+0x2cc>)
   159e8:	4798      	blx	r3
                }

                // Check if we are done!
                if (pressedKeys >= keysToPress || pressedKeys >= GAME_SIZE) {
   159ea:	4b18      	ldr	r3, [pc, #96]	; (15a4c <vUiHandlerTask+0x29c>)
   159ec:	781a      	ldrb	r2, [r3, #0]
   159ee:	4b18      	ldr	r3, [pc, #96]	; (15a50 <vUiHandlerTask+0x2a0>)
   159f0:	781b      	ldrb	r3, [r3, #0]
   159f2:	429a      	cmp	r2, r3
   159f4:	d203      	bcs.n	159fe <vUiHandlerTask+0x24e>
   159f6:	4b15      	ldr	r3, [pc, #84]	; (15a4c <vUiHandlerTask+0x29c>)
   159f8:	781b      	ldrb	r3, [r3, #0]
   159fa:	2b13      	cmp	r3, #19
   159fc:	d90c      	bls.n	15a18 <vUiHandlerTask+0x268>
                    // Tell control gamePacketOut is ready to be send out AND go back to
                    // UI_STATE_IGNORE_PRESSES
                    playIsDone = true;
   159fe:	4b17      	ldr	r3, [pc, #92]	; (15a5c <vUiHandlerTask+0x2ac>)
   15a00:	2201      	movs	r2, #1
   15a02:	701a      	strb	r2, [r3, #0]
                    uiState = UI_STATE_IGNORE_PRESSES;
   15a04:	4b09      	ldr	r3, [pc, #36]	; (15a2c <vUiHandlerTask+0x27c>)
   15a06:	2201      	movs	r2, #1
   15a08:	701a      	strb	r2, [r3, #0]
                }

                break;
   15a0a:	e005      	b.n	15a18 <vUiHandlerTask+0x268>
            }

            default:  // In case of unforseen error, it is always good to sent state
                      // machine to an initial state.
                uiState = UI_STATE_HANDLE_BUTTONS;
   15a0c:	4b07      	ldr	r3, [pc, #28]	; (15a2c <vUiHandlerTask+0x27c>)
   15a0e:	2200      	movs	r2, #0
   15a10:	701a      	strb	r2, [r3, #0]
                break;
   15a12:	e002      	b.n	15a1a <vUiHandlerTask+0x26a>
                break;
   15a14:	46c0      	nop			; (mov r8, r8)
   15a16:	e000      	b.n	15a1a <vUiHandlerTask+0x26a>
                break;
   15a18:	46c0      	nop			; (mov r8, r8)
        }

        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   15a1a:	2032      	movs	r0, #50	; 0x32
   15a1c:	4b18      	ldr	r3, [pc, #96]	; (15a80 <vUiHandlerTask+0x2d0>)
   15a1e:	4798      	blx	r3
        switch (uiState) {
   15a20:	e6eb      	b.n	157fa <vUiHandlerTask+0x4a>
   15a22:	46c0      	nop			; (mov r8, r8)
   15a24:	00036360 	.word	0x00036360
   15a28:	0001dce5 	.word	0x0001dce5
   15a2c:	200048a8 	.word	0x200048a8
   15a30:	0001287d 	.word	0x0001287d
   15a34:	20000000 	.word	0x20000000
   15a38:	00036374 	.word	0x00036374
   15a3c:	00012721 	.word	0x00012721
   15a40:	0003637c 	.word	0x0003637c
   15a44:	00036388 	.word	0x00036388
   15a48:	00036394 	.word	0x00036394
   15a4c:	2000061d 	.word	0x2000061d
   15a50:	2000061e 	.word	0x2000061e
   15a54:	20004870 	.word	0x20004870
   15a58:	00034883 	.word	0x00034883
   15a5c:	2000061f 	.word	0x2000061f
   15a60:	000155bd 	.word	0x000155bd
   15a64:	20004898 	.word	0x20004898
   15a68:	00015625 	.word	0x00015625
   15a6c:	2000061c 	.word	0x2000061c
   15a70:	2000002c 	.word	0x2000002c
   15a74:	2000002d 	.word	0x2000002d
   15a78:	000156a9 	.word	0x000156a9
   15a7c:	00015771 	.word	0x00015771
   15a80:	0001c091 	.word	0x0001c091

00015a84 <UIChangeColors>:
 * @return
 * @note

*/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   15a84:	b590      	push	{r4, r7, lr}
   15a86:	b083      	sub	sp, #12
   15a88:	af00      	add	r7, sp, #0
   15a8a:	0004      	movs	r4, r0
   15a8c:	0008      	movs	r0, r1
   15a8e:	0011      	movs	r1, r2
   15a90:	1dfb      	adds	r3, r7, #7
   15a92:	1c22      	adds	r2, r4, #0
   15a94:	701a      	strb	r2, [r3, #0]
   15a96:	1dbb      	adds	r3, r7, #6
   15a98:	1c02      	adds	r2, r0, #0
   15a9a:	701a      	strb	r2, [r3, #0]
   15a9c:	1d7b      	adds	r3, r7, #5
   15a9e:	1c0a      	adds	r2, r1, #0
   15aa0:	701a      	strb	r2, [r3, #0]
    red = r;
   15aa2:	4b08      	ldr	r3, [pc, #32]	; (15ac4 <UIChangeColors+0x40>)
   15aa4:	1dfa      	adds	r2, r7, #7
   15aa6:	7812      	ldrb	r2, [r2, #0]
   15aa8:	701a      	strb	r2, [r3, #0]
    green = g;
   15aaa:	4b07      	ldr	r3, [pc, #28]	; (15ac8 <UIChangeColors+0x44>)
   15aac:	1dba      	adds	r2, r7, #6
   15aae:	7812      	ldrb	r2, [r2, #0]
   15ab0:	701a      	strb	r2, [r3, #0]
    blue = b;
   15ab2:	4b06      	ldr	r3, [pc, #24]	; (15acc <UIChangeColors+0x48>)
   15ab4:	1d7a      	adds	r2, r7, #5
   15ab6:	7812      	ldrb	r2, [r2, #0]
   15ab8:	701a      	strb	r2, [r3, #0]
}
   15aba:	46c0      	nop			; (mov r8, r8)
   15abc:	46bd      	mov	sp, r7
   15abe:	b003      	add	sp, #12
   15ac0:	bd90      	pop	{r4, r7, pc}
   15ac2:	46c0      	nop			; (mov r8, r8)
   15ac4:	2000061c 	.word	0x2000061c
   15ac8:	2000002c 	.word	0x2000002c
   15acc:	2000002d 	.word	0x2000002d

00015ad0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   15ad0:	b580      	push	{r7, lr}
   15ad2:	b084      	sub	sp, #16
   15ad4:	af00      	add	r7, sp, #0
   15ad6:	0002      	movs	r2, r0
   15ad8:	1dfb      	adds	r3, r7, #7
   15ada:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   15adc:	230f      	movs	r3, #15
   15ade:	18fb      	adds	r3, r7, r3
   15ae0:	1dfa      	adds	r2, r7, #7
   15ae2:	7812      	ldrb	r2, [r2, #0]
   15ae4:	09d2      	lsrs	r2, r2, #7
   15ae6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   15ae8:	230e      	movs	r3, #14
   15aea:	18fb      	adds	r3, r7, r3
   15aec:	1dfa      	adds	r2, r7, #7
   15aee:	7812      	ldrb	r2, [r2, #0]
   15af0:	0952      	lsrs	r2, r2, #5
   15af2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   15af4:	4b0d      	ldr	r3, [pc, #52]	; (15b2c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   15af6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   15af8:	230f      	movs	r3, #15
   15afa:	18fb      	adds	r3, r7, r3
   15afc:	781b      	ldrb	r3, [r3, #0]
   15afe:	2b00      	cmp	r3, #0
   15b00:	d10f      	bne.n	15b22 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   15b02:	230f      	movs	r3, #15
   15b04:	18fb      	adds	r3, r7, r3
   15b06:	781b      	ldrb	r3, [r3, #0]
   15b08:	009b      	lsls	r3, r3, #2
   15b0a:	2210      	movs	r2, #16
   15b0c:	4694      	mov	ip, r2
   15b0e:	44bc      	add	ip, r7
   15b10:	4463      	add	r3, ip
   15b12:	3b08      	subs	r3, #8
   15b14:	681a      	ldr	r2, [r3, #0]
   15b16:	230e      	movs	r3, #14
   15b18:	18fb      	adds	r3, r7, r3
   15b1a:	781b      	ldrb	r3, [r3, #0]
   15b1c:	01db      	lsls	r3, r3, #7
   15b1e:	18d3      	adds	r3, r2, r3
   15b20:	e000      	b.n	15b24 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   15b22:	2300      	movs	r3, #0
	}
}
   15b24:	0018      	movs	r0, r3
   15b26:	46bd      	mov	sp, r7
   15b28:	b004      	add	sp, #16
   15b2a:	bd80      	pop	{r7, pc}
   15b2c:	41004400 	.word	0x41004400

00015b30 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   15b30:	b580      	push	{r7, lr}
   15b32:	b082      	sub	sp, #8
   15b34:	af00      	add	r7, sp, #0
   15b36:	0002      	movs	r2, r0
   15b38:	1dfb      	adds	r3, r7, #7
   15b3a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   15b3c:	1dfb      	adds	r3, r7, #7
   15b3e:	781b      	ldrb	r3, [r3, #0]
   15b40:	0018      	movs	r0, r3
   15b42:	4b03      	ldr	r3, [pc, #12]	; (15b50 <port_get_group_from_gpio_pin+0x20>)
   15b44:	4798      	blx	r3
   15b46:	0003      	movs	r3, r0
}
   15b48:	0018      	movs	r0, r3
   15b4a:	46bd      	mov	sp, r7
   15b4c:	b002      	add	sp, #8
   15b4e:	bd80      	pop	{r7, pc}
   15b50:	00015ad1 	.word	0x00015ad1

00015b54 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   15b54:	b580      	push	{r7, lr}
   15b56:	b084      	sub	sp, #16
   15b58:	af00      	add	r7, sp, #0
   15b5a:	0002      	movs	r2, r0
   15b5c:	1dfb      	adds	r3, r7, #7
   15b5e:	701a      	strb	r2, [r3, #0]
   15b60:	1dbb      	adds	r3, r7, #6
   15b62:	1c0a      	adds	r2, r1, #0
   15b64:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   15b66:	1dfb      	adds	r3, r7, #7
   15b68:	781b      	ldrb	r3, [r3, #0]
   15b6a:	0018      	movs	r0, r3
   15b6c:	4b0d      	ldr	r3, [pc, #52]	; (15ba4 <port_pin_set_output_level+0x50>)
   15b6e:	4798      	blx	r3
   15b70:	0003      	movs	r3, r0
   15b72:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   15b74:	1dfb      	adds	r3, r7, #7
   15b76:	781b      	ldrb	r3, [r3, #0]
   15b78:	221f      	movs	r2, #31
   15b7a:	4013      	ands	r3, r2
   15b7c:	2201      	movs	r2, #1
   15b7e:	409a      	lsls	r2, r3
   15b80:	0013      	movs	r3, r2
   15b82:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   15b84:	1dbb      	adds	r3, r7, #6
   15b86:	781b      	ldrb	r3, [r3, #0]
   15b88:	2b00      	cmp	r3, #0
   15b8a:	d003      	beq.n	15b94 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   15b8c:	68fb      	ldr	r3, [r7, #12]
   15b8e:	68ba      	ldr	r2, [r7, #8]
   15b90:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   15b92:	e002      	b.n	15b9a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   15b94:	68fb      	ldr	r3, [r7, #12]
   15b96:	68ba      	ldr	r2, [r7, #8]
   15b98:	615a      	str	r2, [r3, #20]
}
   15b9a:	46c0      	nop			; (mov r8, r8)
   15b9c:	46bd      	mov	sp, r7
   15b9e:	b004      	add	sp, #16
   15ba0:	bd80      	pop	{r7, pc}
   15ba2:	46c0      	nop			; (mov r8, r8)
   15ba4:	00015b31 	.word	0x00015b31

00015ba8 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   15ba8:	b580      	push	{r7, lr}
   15baa:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   15bac:	4b02      	ldr	r3, [pc, #8]	; (15bb8 <init_state+0x10>)
   15bae:	2200      	movs	r2, #0
   15bb0:	701a      	strb	r2, [r3, #0]
}
   15bb2:	46c0      	nop			; (mov r8, r8)
   15bb4:	46bd      	mov	sp, r7
   15bb6:	bd80      	pop	{r7, pc}
   15bb8:	20000635 	.word	0x20000635

00015bbc <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   15bbc:	b580      	push	{r7, lr}
   15bbe:	b082      	sub	sp, #8
   15bc0:	af00      	add	r7, sp, #0
   15bc2:	0002      	movs	r2, r0
   15bc4:	1dfb      	adds	r3, r7, #7
   15bc6:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   15bc8:	1dfb      	adds	r3, r7, #7
   15bca:	781b      	ldrb	r3, [r3, #0]
   15bcc:	b25b      	sxtb	r3, r3
   15bce:	43db      	mvns	r3, r3
   15bd0:	b25b      	sxtb	r3, r3
   15bd2:	4a06      	ldr	r2, [pc, #24]	; (15bec <clear_state+0x30>)
   15bd4:	7812      	ldrb	r2, [r2, #0]
   15bd6:	b252      	sxtb	r2, r2
   15bd8:	4013      	ands	r3, r2
   15bda:	b25b      	sxtb	r3, r3
   15bdc:	b2da      	uxtb	r2, r3
   15bde:	4b03      	ldr	r3, [pc, #12]	; (15bec <clear_state+0x30>)
   15be0:	701a      	strb	r2, [r3, #0]
}
   15be2:	46c0      	nop			; (mov r8, r8)
   15be4:	46bd      	mov	sp, r7
   15be6:	b002      	add	sp, #8
   15be8:	bd80      	pop	{r7, pc}
   15bea:	46c0      	nop			; (mov r8, r8)
   15bec:	20000635 	.word	0x20000635

00015bf0 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   15bf0:	b580      	push	{r7, lr}
   15bf2:	b082      	sub	sp, #8
   15bf4:	af00      	add	r7, sp, #0
   15bf6:	0002      	movs	r2, r0
   15bf8:	1dfb      	adds	r3, r7, #7
   15bfa:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   15bfc:	4b05      	ldr	r3, [pc, #20]	; (15c14 <add_state+0x24>)
   15bfe:	781a      	ldrb	r2, [r3, #0]
   15c00:	1dfb      	adds	r3, r7, #7
   15c02:	781b      	ldrb	r3, [r3, #0]
   15c04:	4313      	orrs	r3, r2
   15c06:	b2da      	uxtb	r2, r3
   15c08:	4b02      	ldr	r3, [pc, #8]	; (15c14 <add_state+0x24>)
   15c0a:	701a      	strb	r2, [r3, #0]
}
   15c0c:	46c0      	nop			; (mov r8, r8)
   15c0e:	46bd      	mov	sp, r7
   15c10:	b002      	add	sp, #8
   15c12:	bd80      	pop	{r7, pc}
   15c14:	20000635 	.word	0x20000635

00015c18 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   15c18:	b580      	push	{r7, lr}
   15c1a:	b082      	sub	sp, #8
   15c1c:	af00      	add	r7, sp, #0
   15c1e:	0002      	movs	r2, r0
   15c20:	1dfb      	adds	r3, r7, #7
   15c22:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   15c24:	4b06      	ldr	r3, [pc, #24]	; (15c40 <is_state_set+0x28>)
   15c26:	781b      	ldrb	r3, [r3, #0]
   15c28:	1dfa      	adds	r2, r7, #7
   15c2a:	7812      	ldrb	r2, [r2, #0]
   15c2c:	4013      	ands	r3, r2
   15c2e:	b2db      	uxtb	r3, r3
   15c30:	1e5a      	subs	r2, r3, #1
   15c32:	4193      	sbcs	r3, r2
   15c34:	b2db      	uxtb	r3, r3
}
   15c36:	0018      	movs	r0, r3
   15c38:	46bd      	mov	sp, r7
   15c3a:	b002      	add	sp, #8
   15c3c:	bd80      	pop	{r7, pc}
   15c3e:	46c0      	nop			; (mov r8, r8)
   15c40:	20000635 	.word	0x20000635

00015c44 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   15c44:	b590      	push	{r4, r7, lr}
   15c46:	b085      	sub	sp, #20
   15c48:	af00      	add	r7, sp, #0
   15c4a:	6078      	str	r0, [r7, #4]
   15c4c:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   15c4e:	687b      	ldr	r3, [r7, #4]
   15c50:	2b00      	cmp	r3, #0
   15c52:	d002      	beq.n	15c5a <is_exist_file+0x16>
   15c54:	683b      	ldr	r3, [r7, #0]
   15c56:	2b00      	cmp	r3, #0
   15c58:	d101      	bne.n	15c5e <is_exist_file+0x1a>
        return false;
   15c5a:	2300      	movs	r3, #0
   15c5c:	e013      	b.n	15c86 <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   15c5e:	230f      	movs	r3, #15
   15c60:	18fc      	adds	r4, r7, r3
   15c62:	6839      	ldr	r1, [r7, #0]
   15c64:	4b0a      	ldr	r3, [pc, #40]	; (15c90 <is_exist_file+0x4c>)
   15c66:	2200      	movs	r2, #0
   15c68:	0018      	movs	r0, r3
   15c6a:	4b0a      	ldr	r3, [pc, #40]	; (15c94 <is_exist_file+0x50>)
   15c6c:	4798      	blx	r3
   15c6e:	0003      	movs	r3, r0
   15c70:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   15c72:	4b07      	ldr	r3, [pc, #28]	; (15c90 <is_exist_file+0x4c>)
   15c74:	0018      	movs	r0, r3
   15c76:	4b08      	ldr	r3, [pc, #32]	; (15c98 <is_exist_file+0x54>)
   15c78:	4798      	blx	r3
    return (ret == FR_OK);
   15c7a:	230f      	movs	r3, #15
   15c7c:	18fb      	adds	r3, r7, r3
   15c7e:	781b      	ldrb	r3, [r3, #0]
   15c80:	425a      	negs	r2, r3
   15c82:	4153      	adcs	r3, r2
   15c84:	b2db      	uxtb	r3, r3
}
   15c86:	0018      	movs	r0, r3
   15c88:	46bd      	mov	sp, r7
   15c8a:	b005      	add	sp, #20
   15c8c:	bd90      	pop	{r4, r7, pc}
   15c8e:	46c0      	nop			; (mov r8, r8)
   15c90:	20000868 	.word	0x20000868
   15c94:	0002d7a5 	.word	0x0002d7a5
   15c98:	0002e1a5 	.word	0x0002e1a5

00015c9c <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   15c9c:	b580      	push	{r7, lr}
   15c9e:	b09e      	sub	sp, #120	; 0x78
   15ca0:	af00      	add	r7, sp, #0
   15ca2:	60f8      	str	r0, [r7, #12]
   15ca4:	60b9      	str	r1, [r7, #8]
   15ca6:	1dfb      	adds	r3, r7, #7
   15ca8:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   15caa:	2376      	movs	r3, #118	; 0x76
   15cac:	18fb      	adds	r3, r7, r3
   15cae:	2201      	movs	r2, #1
   15cb0:	801a      	strh	r2, [r3, #0]
   15cb2:	2374      	movs	r3, #116	; 0x74
   15cb4:	18fb      	adds	r3, r7, r3
   15cb6:	2200      	movs	r2, #0
   15cb8:	801a      	strh	r2, [r3, #0]
   15cba:	236e      	movs	r3, #110	; 0x6e
   15cbc:	18fb      	adds	r3, r7, r3
   15cbe:	2200      	movs	r2, #0
   15cc0:	801a      	strh	r2, [r3, #0]
   15cc2:	2372      	movs	r3, #114	; 0x72
   15cc4:	18fb      	adds	r3, r7, r3
   15cc6:	2200      	movs	r2, #0
   15cc8:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   15cca:	2324      	movs	r3, #36	; 0x24
   15ccc:	18fb      	adds	r3, r7, r3
   15cce:	0018      	movs	r0, r3
   15cd0:	2341      	movs	r3, #65	; 0x41
   15cd2:	001a      	movs	r2, r3
   15cd4:	2100      	movs	r1, #0
   15cd6:	4b92      	ldr	r3, [pc, #584]	; (15f20 <rename_to_unique+0x284>)
   15cd8:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   15cda:	2318      	movs	r3, #24
   15cdc:	18fb      	adds	r3, r7, r3
   15cde:	0018      	movs	r0, r3
   15ce0:	2309      	movs	r3, #9
   15ce2:	001a      	movs	r2, r3
   15ce4:	2100      	movs	r1, #0
   15ce6:	4b8e      	ldr	r3, [pc, #568]	; (15f20 <rename_to_unique+0x284>)
   15ce8:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   15cea:	2314      	movs	r3, #20
   15cec:	18fb      	adds	r3, r7, r3
   15cee:	2200      	movs	r2, #0
   15cf0:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   15cf2:	2300      	movs	r3, #0
   15cf4:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   15cf6:	2371      	movs	r3, #113	; 0x71
   15cf8:	18fb      	adds	r3, r7, r3
   15cfa:	2200      	movs	r2, #0
   15cfc:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   15cfe:	68bb      	ldr	r3, [r7, #8]
   15d00:	2b00      	cmp	r3, #0
   15d02:	d101      	bne.n	15d08 <rename_to_unique+0x6c>
        return false;
   15d04:	2300      	movs	r3, #0
   15d06:	e106      	b.n	15f16 <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   15d08:	68ba      	ldr	r2, [r7, #8]
   15d0a:	68fb      	ldr	r3, [r7, #12]
   15d0c:	0011      	movs	r1, r2
   15d0e:	0018      	movs	r0, r3
   15d10:	4b84      	ldr	r3, [pc, #528]	; (15f24 <rename_to_unique+0x288>)
   15d12:	4798      	blx	r3
   15d14:	0003      	movs	r3, r0
   15d16:	001a      	movs	r2, r3
   15d18:	2301      	movs	r3, #1
   15d1a:	4053      	eors	r3, r2
   15d1c:	b2db      	uxtb	r3, r3
   15d1e:	2b00      	cmp	r3, #0
   15d20:	d001      	beq.n	15d26 <rename_to_unique+0x8a>
        return true;
   15d22:	2301      	movs	r3, #1
   15d24:	e0f7      	b.n	15f16 <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   15d26:	68bb      	ldr	r3, [r7, #8]
   15d28:	0018      	movs	r0, r3
   15d2a:	4b7f      	ldr	r3, [pc, #508]	; (15f28 <rename_to_unique+0x28c>)
   15d2c:	4798      	blx	r3
   15d2e:	0003      	movs	r3, r0
   15d30:	2b40      	cmp	r3, #64	; 0x40
   15d32:	d901      	bls.n	15d38 <rename_to_unique+0x9c>
        return false;
   15d34:	2300      	movs	r3, #0
   15d36:	e0ee      	b.n	15f16 <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   15d38:	68bb      	ldr	r3, [r7, #8]
   15d3a:	212e      	movs	r1, #46	; 0x2e
   15d3c:	0018      	movs	r0, r3
   15d3e:	4b7b      	ldr	r3, [pc, #492]	; (15f2c <rename_to_unique+0x290>)
   15d40:	4798      	blx	r3
   15d42:	0003      	movs	r3, r0
   15d44:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   15d46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   15d48:	2b00      	cmp	r3, #0
   15d4a:	d052      	beq.n	15df2 <rename_to_unique+0x156>
        ext_len = strlen(p);
   15d4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   15d4e:	0018      	movs	r0, r3
   15d50:	4b75      	ldr	r3, [pc, #468]	; (15f28 <rename_to_unique+0x28c>)
   15d52:	4798      	blx	r3
   15d54:	0002      	movs	r2, r0
   15d56:	236e      	movs	r3, #110	; 0x6e
   15d58:	18fb      	adds	r3, r7, r3
   15d5a:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   15d5c:	236e      	movs	r3, #110	; 0x6e
   15d5e:	18fb      	adds	r3, r7, r3
   15d60:	881b      	ldrh	r3, [r3, #0]
   15d62:	2b07      	cmp	r3, #7
   15d64:	d837      	bhi.n	15dd6 <rename_to_unique+0x13a>
            valid_ext = true;
   15d66:	2371      	movs	r3, #113	; 0x71
   15d68:	18fb      	adds	r3, r7, r3
   15d6a:	2201      	movs	r2, #1
   15d6c:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   15d6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   15d70:	2318      	movs	r3, #24
   15d72:	18fb      	adds	r3, r7, r3
   15d74:	0011      	movs	r1, r2
   15d76:	0018      	movs	r0, r3
   15d78:	4b6d      	ldr	r3, [pc, #436]	; (15f30 <rename_to_unique+0x294>)
   15d7a:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   15d7c:	68bb      	ldr	r3, [r7, #8]
   15d7e:	0018      	movs	r0, r3
   15d80:	4b69      	ldr	r3, [pc, #420]	; (15f28 <rename_to_unique+0x28c>)
   15d82:	4798      	blx	r3
   15d84:	0002      	movs	r2, r0
   15d86:	236e      	movs	r3, #110	; 0x6e
   15d88:	18fb      	adds	r3, r7, r3
   15d8a:	881b      	ldrh	r3, [r3, #0]
   15d8c:	1ad3      	subs	r3, r2, r3
   15d8e:	2b3c      	cmp	r3, #60	; 0x3c
   15d90:	d911      	bls.n	15db6 <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   15d92:	2374      	movs	r3, #116	; 0x74
   15d94:	18fb      	adds	r3, r7, r3
   15d96:	226e      	movs	r2, #110	; 0x6e
   15d98:	18ba      	adds	r2, r7, r2
   15d9a:	8812      	ldrh	r2, [r2, #0]
   15d9c:	213c      	movs	r1, #60	; 0x3c
   15d9e:	1a8a      	subs	r2, r1, r2
   15da0:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   15da2:	2374      	movs	r3, #116	; 0x74
   15da4:	18fb      	adds	r3, r7, r3
   15da6:	881a      	ldrh	r2, [r3, #0]
   15da8:	68b9      	ldr	r1, [r7, #8]
   15daa:	2324      	movs	r3, #36	; 0x24
   15dac:	18fb      	adds	r3, r7, r3
   15dae:	0018      	movs	r0, r3
   15db0:	4b60      	ldr	r3, [pc, #384]	; (15f34 <rename_to_unique+0x298>)
   15db2:	4798      	blx	r3
   15db4:	e02a      	b.n	15e0c <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   15db6:	6eba      	ldr	r2, [r7, #104]	; 0x68
   15db8:	68bb      	ldr	r3, [r7, #8]
   15dba:	1ad2      	subs	r2, r2, r3
   15dbc:	2374      	movs	r3, #116	; 0x74
   15dbe:	18fb      	adds	r3, r7, r3
   15dc0:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   15dc2:	2374      	movs	r3, #116	; 0x74
   15dc4:	18fb      	adds	r3, r7, r3
   15dc6:	881a      	ldrh	r2, [r3, #0]
   15dc8:	68b9      	ldr	r1, [r7, #8]
   15dca:	2324      	movs	r3, #36	; 0x24
   15dcc:	18fb      	adds	r3, r7, r3
   15dce:	0018      	movs	r0, r3
   15dd0:	4b58      	ldr	r3, [pc, #352]	; (15f34 <rename_to_unique+0x298>)
   15dd2:	4798      	blx	r3
   15dd4:	e01a      	b.n	15e0c <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   15dd6:	2374      	movs	r3, #116	; 0x74
   15dd8:	18fb      	adds	r3, r7, r3
   15dda:	223c      	movs	r2, #60	; 0x3c
   15ddc:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   15dde:	2374      	movs	r3, #116	; 0x74
   15de0:	18fb      	adds	r3, r7, r3
   15de2:	881a      	ldrh	r2, [r3, #0]
   15de4:	68b9      	ldr	r1, [r7, #8]
   15de6:	2324      	movs	r3, #36	; 0x24
   15de8:	18fb      	adds	r3, r7, r3
   15dea:	0018      	movs	r0, r3
   15dec:	4b51      	ldr	r3, [pc, #324]	; (15f34 <rename_to_unique+0x298>)
   15dee:	4798      	blx	r3
   15df0:	e00c      	b.n	15e0c <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   15df2:	2374      	movs	r3, #116	; 0x74
   15df4:	18fb      	adds	r3, r7, r3
   15df6:	223c      	movs	r2, #60	; 0x3c
   15df8:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   15dfa:	2374      	movs	r3, #116	; 0x74
   15dfc:	18fb      	adds	r3, r7, r3
   15dfe:	881a      	ldrh	r2, [r3, #0]
   15e00:	68b9      	ldr	r1, [r7, #8]
   15e02:	2324      	movs	r3, #36	; 0x24
   15e04:	18fb      	adds	r3, r7, r3
   15e06:	0018      	movs	r0, r3
   15e08:	4b4a      	ldr	r3, [pc, #296]	; (15f34 <rename_to_unique+0x298>)
   15e0a:	4798      	blx	r3
    }

    name[name_len++] = '-';
   15e0c:	2374      	movs	r3, #116	; 0x74
   15e0e:	18fb      	adds	r3, r7, r3
   15e10:	881b      	ldrh	r3, [r3, #0]
   15e12:	2274      	movs	r2, #116	; 0x74
   15e14:	18ba      	adds	r2, r7, r2
   15e16:	1c59      	adds	r1, r3, #1
   15e18:	8011      	strh	r1, [r2, #0]
   15e1a:	001a      	movs	r2, r3
   15e1c:	2324      	movs	r3, #36	; 0x24
   15e1e:	18fb      	adds	r3, r7, r3
   15e20:	212d      	movs	r1, #45	; 0x2d
   15e22:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   15e24:	2376      	movs	r3, #118	; 0x76
   15e26:	18fb      	adds	r3, r7, r3
   15e28:	2200      	movs	r2, #0
   15e2a:	801a      	strh	r2, [r3, #0]
   15e2c:	2372      	movs	r3, #114	; 0x72
   15e2e:	18fb      	adds	r3, r7, r3
   15e30:	2201      	movs	r2, #1
   15e32:	801a      	strh	r2, [r3, #0]
   15e34:	e010      	b.n	15e58 <rename_to_unique+0x1bc>
        count *= 10;
   15e36:	2372      	movs	r3, #114	; 0x72
   15e38:	18fa      	adds	r2, r7, r3
   15e3a:	2372      	movs	r3, #114	; 0x72
   15e3c:	18fb      	adds	r3, r7, r3
   15e3e:	881b      	ldrh	r3, [r3, #0]
   15e40:	1c19      	adds	r1, r3, #0
   15e42:	0089      	lsls	r1, r1, #2
   15e44:	18cb      	adds	r3, r1, r3
   15e46:	18db      	adds	r3, r3, r3
   15e48:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   15e4a:	2376      	movs	r3, #118	; 0x76
   15e4c:	18fb      	adds	r3, r7, r3
   15e4e:	881a      	ldrh	r2, [r3, #0]
   15e50:	2376      	movs	r3, #118	; 0x76
   15e52:	18fb      	adds	r3, r7, r3
   15e54:	3201      	adds	r2, #1
   15e56:	801a      	strh	r2, [r3, #0]
   15e58:	2376      	movs	r3, #118	; 0x76
   15e5a:	18fb      	adds	r3, r7, r3
   15e5c:	881b      	ldrh	r3, [r3, #0]
   15e5e:	2b02      	cmp	r3, #2
   15e60:	d9e9      	bls.n	15e36 <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   15e62:	2376      	movs	r3, #118	; 0x76
   15e64:	18fb      	adds	r3, r7, r3
   15e66:	2201      	movs	r2, #1
   15e68:	801a      	strh	r2, [r3, #0]
   15e6a:	e04b      	b.n	15f04 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   15e6c:	2376      	movs	r3, #118	; 0x76
   15e6e:	18fb      	adds	r3, r7, r3
   15e70:	881a      	ldrh	r2, [r3, #0]
   15e72:	4931      	ldr	r1, [pc, #196]	; (15f38 <rename_to_unique+0x29c>)
   15e74:	2314      	movs	r3, #20
   15e76:	18fb      	adds	r3, r7, r3
   15e78:	0018      	movs	r0, r3
   15e7a:	4b30      	ldr	r3, [pc, #192]	; (15f3c <rename_to_unique+0x2a0>)
   15e7c:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   15e7e:	2374      	movs	r3, #116	; 0x74
   15e80:	18fb      	adds	r3, r7, r3
   15e82:	881b      	ldrh	r3, [r3, #0]
   15e84:	2224      	movs	r2, #36	; 0x24
   15e86:	18ba      	adds	r2, r7, r2
   15e88:	18d3      	adds	r3, r2, r3
   15e8a:	2214      	movs	r2, #20
   15e8c:	18b9      	adds	r1, r7, r2
   15e8e:	2203      	movs	r2, #3
   15e90:	0018      	movs	r0, r3
   15e92:	4b28      	ldr	r3, [pc, #160]	; (15f34 <rename_to_unique+0x298>)
   15e94:	4798      	blx	r3
        if (valid_ext) {
   15e96:	2371      	movs	r3, #113	; 0x71
   15e98:	18fb      	adds	r3, r7, r3
   15e9a:	781b      	ldrb	r3, [r3, #0]
   15e9c:	2b00      	cmp	r3, #0
   15e9e:	d00c      	beq.n	15eba <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   15ea0:	2374      	movs	r3, #116	; 0x74
   15ea2:	18fb      	adds	r3, r7, r3
   15ea4:	881b      	ldrh	r3, [r3, #0]
   15ea6:	3303      	adds	r3, #3
   15ea8:	2224      	movs	r2, #36	; 0x24
   15eaa:	18ba      	adds	r2, r7, r2
   15eac:	18d3      	adds	r3, r2, r3
   15eae:	2218      	movs	r2, #24
   15eb0:	18ba      	adds	r2, r7, r2
   15eb2:	0011      	movs	r1, r2
   15eb4:	0018      	movs	r0, r3
   15eb6:	4b1e      	ldr	r3, [pc, #120]	; (15f30 <rename_to_unique+0x294>)
   15eb8:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   15eba:	2324      	movs	r3, #36	; 0x24
   15ebc:	18fa      	adds	r2, r7, r3
   15ebe:	68fb      	ldr	r3, [r7, #12]
   15ec0:	0011      	movs	r1, r2
   15ec2:	0018      	movs	r0, r3
   15ec4:	4b17      	ldr	r3, [pc, #92]	; (15f24 <rename_to_unique+0x288>)
   15ec6:	4798      	blx	r3
   15ec8:	0003      	movs	r3, r0
   15eca:	001a      	movs	r2, r3
   15ecc:	2301      	movs	r3, #1
   15ece:	4053      	eors	r3, r2
   15ed0:	b2db      	uxtb	r3, r3
   15ed2:	2b00      	cmp	r3, #0
   15ed4:	d00f      	beq.n	15ef6 <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   15ed6:	1dfb      	adds	r3, r7, #7
   15ed8:	781a      	ldrb	r2, [r3, #0]
   15eda:	68bb      	ldr	r3, [r7, #8]
   15edc:	2100      	movs	r1, #0
   15ede:	0018      	movs	r0, r3
   15ee0:	4b0f      	ldr	r3, [pc, #60]	; (15f20 <rename_to_unique+0x284>)
   15ee2:	4798      	blx	r3
            strcpy(file_path_name, name);
   15ee4:	2324      	movs	r3, #36	; 0x24
   15ee6:	18fa      	adds	r2, r7, r3
   15ee8:	68bb      	ldr	r3, [r7, #8]
   15eea:	0011      	movs	r1, r2
   15eec:	0018      	movs	r0, r3
   15eee:	4b10      	ldr	r3, [pc, #64]	; (15f30 <rename_to_unique+0x294>)
   15ef0:	4798      	blx	r3
            return true;
   15ef2:	2301      	movs	r3, #1
   15ef4:	e00f      	b.n	15f16 <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   15ef6:	2376      	movs	r3, #118	; 0x76
   15ef8:	18fb      	adds	r3, r7, r3
   15efa:	881a      	ldrh	r2, [r3, #0]
   15efc:	2376      	movs	r3, #118	; 0x76
   15efe:	18fb      	adds	r3, r7, r3
   15f00:	3201      	adds	r2, #1
   15f02:	801a      	strh	r2, [r3, #0]
   15f04:	2376      	movs	r3, #118	; 0x76
   15f06:	18fa      	adds	r2, r7, r3
   15f08:	2372      	movs	r3, #114	; 0x72
   15f0a:	18fb      	adds	r3, r7, r3
   15f0c:	8812      	ldrh	r2, [r2, #0]
   15f0e:	881b      	ldrh	r3, [r3, #0]
   15f10:	429a      	cmp	r2, r3
   15f12:	d3ab      	bcc.n	15e6c <rename_to_unique+0x1d0>
        }
    }
    return false;
   15f14:	2300      	movs	r3, #0
}
   15f16:	0018      	movs	r0, r3
   15f18:	46bd      	mov	sp, r7
   15f1a:	b01e      	add	sp, #120	; 0x78
   15f1c:	bd80      	pop	{r7, pc}
   15f1e:	46c0      	nop			; (mov r8, r8)
   15f20:	00034883 	.word	0x00034883
   15f24:	00015c45 	.word	0x00015c45
   15f28:	00034c3b 	.word	0x00034c3b
   15f2c:	00034c95 	.word	0x00034c95
   15f30:	00034bef 	.word	0x00034bef
   15f34:	00034c6b 	.word	0x00034c6b
   15f38:	000363b4 	.word	0x000363b4
   15f3c:	00034b41 	.word	0x00034b41

00015f40 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   15f40:	b590      	push	{r4, r7, lr}
   15f42:	b083      	sub	sp, #12
   15f44:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   15f46:	2001      	movs	r0, #1
   15f48:	4b22      	ldr	r3, [pc, #136]	; (15fd4 <start_download+0x94>)
   15f4a:	4798      	blx	r3
   15f4c:	0003      	movs	r3, r0
   15f4e:	001a      	movs	r2, r3
   15f50:	2301      	movs	r3, #1
   15f52:	4053      	eors	r3, r2
   15f54:	b2db      	uxtb	r3, r3
   15f56:	2b00      	cmp	r3, #0
   15f58:	d005      	beq.n	15f66 <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   15f5a:	4b1f      	ldr	r3, [pc, #124]	; (15fd8 <start_download+0x98>)
   15f5c:	0019      	movs	r1, r3
   15f5e:	2001      	movs	r0, #1
   15f60:	4b1e      	ldr	r3, [pc, #120]	; (15fdc <start_download+0x9c>)
   15f62:	4798      	blx	r3
        return;
   15f64:	e032      	b.n	15fcc <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   15f66:	2002      	movs	r0, #2
   15f68:	4b1a      	ldr	r3, [pc, #104]	; (15fd4 <start_download+0x94>)
   15f6a:	4798      	blx	r3
   15f6c:	0003      	movs	r3, r0
   15f6e:	001a      	movs	r2, r3
   15f70:	2301      	movs	r3, #1
   15f72:	4053      	eors	r3, r2
   15f74:	b2db      	uxtb	r3, r3
   15f76:	2b00      	cmp	r3, #0
   15f78:	d005      	beq.n	15f86 <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   15f7a:	4b19      	ldr	r3, [pc, #100]	; (15fe0 <start_download+0xa0>)
   15f7c:	0019      	movs	r1, r3
   15f7e:	2001      	movs	r0, #1
   15f80:	4b16      	ldr	r3, [pc, #88]	; (15fdc <start_download+0x9c>)
   15f82:	4798      	blx	r3
        return;
   15f84:	e022      	b.n	15fcc <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   15f86:	2004      	movs	r0, #4
   15f88:	4b12      	ldr	r3, [pc, #72]	; (15fd4 <start_download+0x94>)
   15f8a:	4798      	blx	r3
   15f8c:	1e03      	subs	r3, r0, #0
   15f8e:	d005      	beq.n	15f9c <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   15f90:	4b14      	ldr	r3, [pc, #80]	; (15fe4 <start_download+0xa4>)
   15f92:	0019      	movs	r1, r3
   15f94:	2001      	movs	r0, #1
   15f96:	4b11      	ldr	r3, [pc, #68]	; (15fdc <start_download+0x9c>)
   15f98:	4798      	blx	r3
        return;
   15f9a:	e017      	b.n	15fcc <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   15f9c:	2008      	movs	r0, #8
   15f9e:	4b0d      	ldr	r3, [pc, #52]	; (15fd4 <start_download+0x94>)
   15fa0:	4798      	blx	r3
   15fa2:	1e03      	subs	r3, r0, #0
   15fa4:	d005      	beq.n	15fb2 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   15fa6:	4b10      	ldr	r3, [pc, #64]	; (15fe8 <start_download+0xa8>)
   15fa8:	0019      	movs	r1, r3
   15faa:	2001      	movs	r0, #1
   15fac:	4b0b      	ldr	r3, [pc, #44]	; (15fdc <start_download+0x9c>)
   15fae:	4798      	blx	r3
        return;
   15fb0:	e00c      	b.n	15fcc <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   15fb2:	4b0e      	ldr	r3, [pc, #56]	; (15fec <start_download+0xac>)
   15fb4:	0019      	movs	r1, r3
   15fb6:	2001      	movs	r0, #1
   15fb8:	4b08      	ldr	r3, [pc, #32]	; (15fdc <start_download+0x9c>)
   15fba:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   15fbc:	490c      	ldr	r1, [pc, #48]	; (15ff0 <start_download+0xb0>)
   15fbe:	480d      	ldr	r0, [pc, #52]	; (15ff4 <start_download+0xb4>)
   15fc0:	2300      	movs	r3, #0
   15fc2:	9300      	str	r3, [sp, #0]
   15fc4:	2300      	movs	r3, #0
   15fc6:	2201      	movs	r2, #1
   15fc8:	4c0b      	ldr	r4, [pc, #44]	; (15ff8 <start_download+0xb8>)
   15fca:	47a0      	blx	r4
}
   15fcc:	46bd      	mov	sp, r7
   15fce:	b001      	add	sp, #4
   15fd0:	bd90      	pop	{r4, r7, pc}
   15fd2:	46c0      	nop			; (mov r8, r8)
   15fd4:	00015c19 	.word	0x00015c19
   15fd8:	000363bc 	.word	0x000363bc
   15fdc:	0001ddd1 	.word	0x0001ddd1
   15fe0:	000363e8 	.word	0x000363e8
   15fe4:	00036414 	.word	0x00036414
   15fe8:	00036440 	.word	0x00036440
   15fec:	0003646c 	.word	0x0003646c
   15ff0:	00036498 	.word	0x00036498
   15ff4:	20004904 	.word	0x20004904
   15ff8:	00030df9 	.word	0x00030df9

00015ffc <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   15ffc:	b5b0      	push	{r4, r5, r7, lr}
   15ffe:	b086      	sub	sp, #24
   16000:	af00      	add	r7, sp, #0
   16002:	6078      	str	r0, [r7, #4]
   16004:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   16006:	687b      	ldr	r3, [r7, #4]
   16008:	2b00      	cmp	r3, #0
   1600a:	d002      	beq.n	16012 <store_file_packet+0x16>
   1600c:	683b      	ldr	r3, [r7, #0]
   1600e:	2b00      	cmp	r3, #0
   16010:	d105      	bne.n	1601e <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   16012:	4b58      	ldr	r3, [pc, #352]	; (16174 <store_file_packet+0x178>)
   16014:	0019      	movs	r1, r3
   16016:	2001      	movs	r0, #1
   16018:	4b57      	ldr	r3, [pc, #348]	; (16178 <store_file_packet+0x17c>)
   1601a:	4798      	blx	r3
        return;
   1601c:	e0a6      	b.n	1616c <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   1601e:	2008      	movs	r0, #8
   16020:	4b56      	ldr	r3, [pc, #344]	; (1617c <store_file_packet+0x180>)
   16022:	4798      	blx	r3
   16024:	0003      	movs	r3, r0
   16026:	001a      	movs	r2, r3
   16028:	2301      	movs	r3, #1
   1602a:	4053      	eors	r3, r2
   1602c:	b2db      	uxtb	r3, r3
   1602e:	2b00      	cmp	r3, #0
   16030:	d055      	beq.n	160de <store_file_packet+0xe2>
        char *cp = NULL;
   16032:	2300      	movs	r3, #0
   16034:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16036:	4b52      	ldr	r3, [pc, #328]	; (16180 <store_file_packet+0x184>)
   16038:	2230      	movs	r2, #48	; 0x30
   1603a:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   1603c:	4b50      	ldr	r3, [pc, #320]	; (16180 <store_file_packet+0x184>)
   1603e:	223a      	movs	r2, #58	; 0x3a
   16040:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   16042:	4b50      	ldr	r3, [pc, #320]	; (16184 <store_file_packet+0x188>)
   16044:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   16046:	e002      	b.n	1604e <store_file_packet+0x52>
            cp--;
   16048:	697b      	ldr	r3, [r7, #20]
   1604a:	3b01      	subs	r3, #1
   1604c:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   1604e:	697b      	ldr	r3, [r7, #20]
   16050:	781b      	ldrb	r3, [r3, #0]
   16052:	2b2f      	cmp	r3, #47	; 0x2f
   16054:	d1f8      	bne.n	16048 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   16056:	697b      	ldr	r3, [r7, #20]
   16058:	0018      	movs	r0, r3
   1605a:	4b4b      	ldr	r3, [pc, #300]	; (16188 <store_file_packet+0x18c>)
   1605c:	4798      	blx	r3
   1605e:	0003      	movs	r3, r0
   16060:	2b01      	cmp	r3, #1
   16062:	d924      	bls.n	160ae <store_file_packet+0xb2>
            cp++;
   16064:	697b      	ldr	r3, [r7, #20]
   16066:	3301      	adds	r3, #1
   16068:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   1606a:	697a      	ldr	r2, [r7, #20]
   1606c:	4b47      	ldr	r3, [pc, #284]	; (1618c <store_file_packet+0x190>)
   1606e:	0011      	movs	r1, r2
   16070:	0018      	movs	r0, r3
   16072:	4b47      	ldr	r3, [pc, #284]	; (16190 <store_file_packet+0x194>)
   16074:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   16076:	4942      	ldr	r1, [pc, #264]	; (16180 <store_file_packet+0x184>)
   16078:	4b46      	ldr	r3, [pc, #280]	; (16194 <store_file_packet+0x198>)
   1607a:	2240      	movs	r2, #64	; 0x40
   1607c:	0018      	movs	r0, r3
   1607e:	4b46      	ldr	r3, [pc, #280]	; (16198 <store_file_packet+0x19c>)
   16080:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   16082:	4a3f      	ldr	r2, [pc, #252]	; (16180 <store_file_packet+0x184>)
   16084:	4b45      	ldr	r3, [pc, #276]	; (1619c <store_file_packet+0x1a0>)
   16086:	0019      	movs	r1, r3
   16088:	2001      	movs	r0, #1
   1608a:	4b3b      	ldr	r3, [pc, #236]	; (16178 <store_file_packet+0x17c>)
   1608c:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   1608e:	2313      	movs	r3, #19
   16090:	18fc      	adds	r4, r7, r3
   16092:	493b      	ldr	r1, [pc, #236]	; (16180 <store_file_packet+0x184>)
   16094:	4b3f      	ldr	r3, [pc, #252]	; (16194 <store_file_packet+0x198>)
   16096:	220a      	movs	r2, #10
   16098:	0018      	movs	r0, r3
   1609a:	4b41      	ldr	r3, [pc, #260]	; (161a0 <store_file_packet+0x1a4>)
   1609c:	4798      	blx	r3
   1609e:	0003      	movs	r3, r0
   160a0:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   160a2:	2313      	movs	r3, #19
   160a4:	18fb      	adds	r3, r7, r3
   160a6:	781b      	ldrb	r3, [r3, #0]
   160a8:	2b00      	cmp	r3, #0
   160aa:	d012      	beq.n	160d2 <store_file_packet+0xd6>
   160ac:	e008      	b.n	160c0 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   160ae:	4b3d      	ldr	r3, [pc, #244]	; (161a4 <store_file_packet+0x1a8>)
   160b0:	0019      	movs	r1, r3
   160b2:	2001      	movs	r0, #1
   160b4:	4b30      	ldr	r3, [pc, #192]	; (16178 <store_file_packet+0x17c>)
   160b6:	4798      	blx	r3
            add_state(CANCELED);
   160b8:	2020      	movs	r0, #32
   160ba:	4b3b      	ldr	r3, [pc, #236]	; (161a8 <store_file_packet+0x1ac>)
   160bc:	4798      	blx	r3
            return;
   160be:	e055      	b.n	1616c <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   160c0:	2313      	movs	r3, #19
   160c2:	18fb      	adds	r3, r7, r3
   160c4:	781a      	ldrb	r2, [r3, #0]
   160c6:	4b39      	ldr	r3, [pc, #228]	; (161ac <store_file_packet+0x1b0>)
   160c8:	0019      	movs	r1, r3
   160ca:	2001      	movs	r0, #1
   160cc:	4b2a      	ldr	r3, [pc, #168]	; (16178 <store_file_packet+0x17c>)
   160ce:	4798      	blx	r3
            return;
   160d0:	e04c      	b.n	1616c <store_file_packet+0x170>
        }

        received_file_size = 0;
   160d2:	4b37      	ldr	r3, [pc, #220]	; (161b0 <store_file_packet+0x1b4>)
   160d4:	2200      	movs	r2, #0
   160d6:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   160d8:	2008      	movs	r0, #8
   160da:	4b33      	ldr	r3, [pc, #204]	; (161a8 <store_file_packet+0x1ac>)
   160dc:	4798      	blx	r3
    }

    if (data != NULL) {
   160de:	687b      	ldr	r3, [r7, #4]
   160e0:	2b00      	cmp	r3, #0
   160e2:	d043      	beq.n	1616c <store_file_packet+0x170>
        UINT wsize = 0;
   160e4:	2300      	movs	r3, #0
   160e6:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   160e8:	2313      	movs	r3, #19
   160ea:	18fc      	adds	r4, r7, r3
   160ec:	230c      	movs	r3, #12
   160ee:	18fb      	adds	r3, r7, r3
   160f0:	683a      	ldr	r2, [r7, #0]
   160f2:	6879      	ldr	r1, [r7, #4]
   160f4:	4827      	ldr	r0, [pc, #156]	; (16194 <store_file_packet+0x198>)
   160f6:	4d2f      	ldr	r5, [pc, #188]	; (161b4 <store_file_packet+0x1b8>)
   160f8:	47a8      	blx	r5
   160fa:	0003      	movs	r3, r0
   160fc:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   160fe:	2313      	movs	r3, #19
   16100:	18fb      	adds	r3, r7, r3
   16102:	781b      	ldrb	r3, [r3, #0]
   16104:	2b00      	cmp	r3, #0
   16106:	d00c      	beq.n	16122 <store_file_packet+0x126>
            f_close(&file_object);
   16108:	4b22      	ldr	r3, [pc, #136]	; (16194 <store_file_packet+0x198>)
   1610a:	0018      	movs	r0, r3
   1610c:	4b2a      	ldr	r3, [pc, #168]	; (161b8 <store_file_packet+0x1bc>)
   1610e:	4798      	blx	r3
            add_state(CANCELED);
   16110:	2020      	movs	r0, #32
   16112:	4b25      	ldr	r3, [pc, #148]	; (161a8 <store_file_packet+0x1ac>)
   16114:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   16116:	4b29      	ldr	r3, [pc, #164]	; (161bc <store_file_packet+0x1c0>)
   16118:	0019      	movs	r1, r3
   1611a:	2001      	movs	r0, #1
   1611c:	4b16      	ldr	r3, [pc, #88]	; (16178 <store_file_packet+0x17c>)
   1611e:	4798      	blx	r3
            return;
   16120:	e024      	b.n	1616c <store_file_packet+0x170>
        }

        received_file_size += wsize;
   16122:	4b23      	ldr	r3, [pc, #140]	; (161b0 <store_file_packet+0x1b4>)
   16124:	681a      	ldr	r2, [r3, #0]
   16126:	68fb      	ldr	r3, [r7, #12]
   16128:	18d2      	adds	r2, r2, r3
   1612a:	4b21      	ldr	r3, [pc, #132]	; (161b0 <store_file_packet+0x1b4>)
   1612c:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   1612e:	4b20      	ldr	r3, [pc, #128]	; (161b0 <store_file_packet+0x1b4>)
   16130:	681a      	ldr	r2, [r3, #0]
   16132:	4b23      	ldr	r3, [pc, #140]	; (161c0 <store_file_packet+0x1c4>)
   16134:	681b      	ldr	r3, [r3, #0]
   16136:	4923      	ldr	r1, [pc, #140]	; (161c4 <store_file_packet+0x1c8>)
   16138:	2001      	movs	r0, #1
   1613a:	4c0f      	ldr	r4, [pc, #60]	; (16178 <store_file_packet+0x17c>)
   1613c:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   1613e:	4b1c      	ldr	r3, [pc, #112]	; (161b0 <store_file_packet+0x1b4>)
   16140:	681a      	ldr	r2, [r3, #0]
   16142:	4b1f      	ldr	r3, [pc, #124]	; (161c0 <store_file_packet+0x1c4>)
   16144:	681b      	ldr	r3, [r3, #0]
   16146:	429a      	cmp	r2, r3
   16148:	d310      	bcc.n	1616c <store_file_packet+0x170>
            f_close(&file_object);
   1614a:	4b12      	ldr	r3, [pc, #72]	; (16194 <store_file_packet+0x198>)
   1614c:	0018      	movs	r0, r3
   1614e:	4b1a      	ldr	r3, [pc, #104]	; (161b8 <store_file_packet+0x1bc>)
   16150:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   16152:	4b1d      	ldr	r3, [pc, #116]	; (161c8 <store_file_packet+0x1cc>)
   16154:	0019      	movs	r1, r3
   16156:	2001      	movs	r0, #1
   16158:	4b07      	ldr	r3, [pc, #28]	; (16178 <store_file_packet+0x17c>)
   1615a:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   1615c:	2100      	movs	r1, #0
   1615e:	2017      	movs	r0, #23
   16160:	4b1a      	ldr	r3, [pc, #104]	; (161cc <store_file_packet+0x1d0>)
   16162:	4798      	blx	r3
            add_state(COMPLETED);
   16164:	2010      	movs	r0, #16
   16166:	4b10      	ldr	r3, [pc, #64]	; (161a8 <store_file_packet+0x1ac>)
   16168:	4798      	blx	r3
            return;
   1616a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   1616c:	46bd      	mov	sp, r7
   1616e:	b006      	add	sp, #24
   16170:	bdb0      	pop	{r4, r5, r7, pc}
   16172:	46c0      	nop			; (mov r8, r8)
   16174:	000364cc 	.word	0x000364cc
   16178:	0001ddd1 	.word	0x0001ddd1
   1617c:	00015c19 	.word	0x00015c19
   16180:	200000b4 	.word	0x200000b4
   16184:	000364c8 	.word	0x000364c8
   16188:	00034c3b 	.word	0x00034c3b
   1618c:	200000b6 	.word	0x200000b6
   16190:	00034bef 	.word	0x00034bef
   16194:	20000868 	.word	0x20000868
   16198:	00015c9d 	.word	0x00015c9d
   1619c:	00036530 	.word	0x00036530
   161a0:	0002d7a5 	.word	0x0002d7a5
   161a4:	000364f0 	.word	0x000364f0
   161a8:	00015bf1 	.word	0x00015bf1
   161ac:	00036558 	.word	0x00036558
   161b0:	20000890 	.word	0x20000890
   161b4:	0002dcd5 	.word	0x0002dcd5
   161b8:	0002e1a5 	.word	0x0002e1a5
   161bc:	0003658c 	.word	0x0003658c
   161c0:	2000088c 	.word	0x2000088c
   161c4:	000365c8 	.word	0x000365c8
   161c8:	000365fc 	.word	0x000365fc
   161cc:	00015b55 	.word	0x00015b55

000161d0 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   161d0:	b590      	push	{r4, r7, lr}
   161d2:	b085      	sub	sp, #20
   161d4:	af00      	add	r7, sp, #0
   161d6:	60f8      	str	r0, [r7, #12]
   161d8:	60b9      	str	r1, [r7, #8]
   161da:	607a      	str	r2, [r7, #4]
    switch (type) {
   161dc:	68bb      	ldr	r3, [r7, #8]
   161de:	2b04      	cmp	r3, #4
   161e0:	d900      	bls.n	161e4 <http_client_callback+0x14>
   161e2:	e077      	b.n	162d4 <http_client_callback+0x104>
   161e4:	68bb      	ldr	r3, [r7, #8]
   161e6:	009a      	lsls	r2, r3, #2
   161e8:	4b3c      	ldr	r3, [pc, #240]	; (162dc <http_client_callback+0x10c>)
   161ea:	18d3      	adds	r3, r2, r3
   161ec:	681b      	ldr	r3, [r3, #0]
   161ee:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   161f0:	4b3b      	ldr	r3, [pc, #236]	; (162e0 <http_client_callback+0x110>)
   161f2:	0019      	movs	r1, r3
   161f4:	2001      	movs	r0, #1
   161f6:	4b3b      	ldr	r3, [pc, #236]	; (162e4 <http_client_callback+0x114>)
   161f8:	4798      	blx	r3
            break;
   161fa:	e06b      	b.n	162d4 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   161fc:	4b3a      	ldr	r3, [pc, #232]	; (162e8 <http_client_callback+0x118>)
   161fe:	0019      	movs	r1, r3
   16200:	2001      	movs	r0, #1
   16202:	4b38      	ldr	r3, [pc, #224]	; (162e4 <http_client_callback+0x114>)
   16204:	4798      	blx	r3
            add_state(GET_REQUESTED);
   16206:	2004      	movs	r0, #4
   16208:	4b38      	ldr	r3, [pc, #224]	; (162ec <http_client_callback+0x11c>)
   1620a:	4798      	blx	r3
            break;
   1620c:	e062      	b.n	162d4 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   1620e:	687b      	ldr	r3, [r7, #4]
   16210:	881b      	ldrh	r3, [r3, #0]
   16212:	001a      	movs	r2, r3
   16214:	687b      	ldr	r3, [r7, #4]
   16216:	685b      	ldr	r3, [r3, #4]
   16218:	4935      	ldr	r1, [pc, #212]	; (162f0 <http_client_callback+0x120>)
   1621a:	2001      	movs	r0, #1
   1621c:	4c31      	ldr	r4, [pc, #196]	; (162e4 <http_client_callback+0x114>)
   1621e:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   16220:	687b      	ldr	r3, [r7, #4]
   16222:	881b      	ldrh	r3, [r3, #0]
   16224:	2bc8      	cmp	r3, #200	; 0xc8
   16226:	d10d      	bne.n	16244 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   16228:	687b      	ldr	r3, [r7, #4]
   1622a:	685a      	ldr	r2, [r3, #4]
   1622c:	4b31      	ldr	r3, [pc, #196]	; (162f4 <http_client_callback+0x124>)
   1622e:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   16230:	4b31      	ldr	r3, [pc, #196]	; (162f8 <http_client_callback+0x128>)
   16232:	2200      	movs	r2, #0
   16234:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   16236:	687b      	ldr	r3, [r7, #4]
   16238:	685a      	ldr	r2, [r3, #4]
   1623a:	2380      	movs	r3, #128	; 0x80
   1623c:	009b      	lsls	r3, r3, #2
   1623e:	429a      	cmp	r2, r3
   16240:	d843      	bhi.n	162ca <http_client_callback+0xfa>
   16242:	e003      	b.n	1624c <http_client_callback+0x7c>
                add_state(CANCELED);
   16244:	2020      	movs	r0, #32
   16246:	4b29      	ldr	r3, [pc, #164]	; (162ec <http_client_callback+0x11c>)
   16248:	4798      	blx	r3
                return;
   1624a:	e043      	b.n	162d4 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   1624c:	687b      	ldr	r3, [r7, #4]
   1624e:	689a      	ldr	r2, [r3, #8]
   16250:	687b      	ldr	r3, [r7, #4]
   16252:	685b      	ldr	r3, [r3, #4]
   16254:	0019      	movs	r1, r3
   16256:	0010      	movs	r0, r2
   16258:	4b28      	ldr	r3, [pc, #160]	; (162fc <http_client_callback+0x12c>)
   1625a:	4798      	blx	r3
                add_state(COMPLETED);
   1625c:	2010      	movs	r0, #16
   1625e:	4b23      	ldr	r3, [pc, #140]	; (162ec <http_client_callback+0x11c>)
   16260:	4798      	blx	r3
            }
            break;
   16262:	e032      	b.n	162ca <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   16264:	687b      	ldr	r3, [r7, #4]
   16266:	685a      	ldr	r2, [r3, #4]
   16268:	687b      	ldr	r3, [r7, #4]
   1626a:	681b      	ldr	r3, [r3, #0]
   1626c:	0019      	movs	r1, r3
   1626e:	0010      	movs	r0, r2
   16270:	4b22      	ldr	r3, [pc, #136]	; (162fc <http_client_callback+0x12c>)
   16272:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   16274:	687b      	ldr	r3, [r7, #4]
   16276:	7a1b      	ldrb	r3, [r3, #8]
   16278:	2b00      	cmp	r3, #0
   1627a:	d028      	beq.n	162ce <http_client_callback+0xfe>
                add_state(COMPLETED);
   1627c:	2010      	movs	r0, #16
   1627e:	4b1b      	ldr	r3, [pc, #108]	; (162ec <http_client_callback+0x11c>)
   16280:	4798      	blx	r3
            }

            break;
   16282:	e024      	b.n	162ce <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   16284:	687b      	ldr	r3, [r7, #4]
   16286:	681a      	ldr	r2, [r3, #0]
   16288:	4b1d      	ldr	r3, [pc, #116]	; (16300 <http_client_callback+0x130>)
   1628a:	0019      	movs	r1, r3
   1628c:	2001      	movs	r0, #1
   1628e:	4b15      	ldr	r3, [pc, #84]	; (162e4 <http_client_callback+0x114>)
   16290:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   16292:	687b      	ldr	r3, [r7, #4]
   16294:	681b      	ldr	r3, [r3, #0]
   16296:	330b      	adds	r3, #11
   16298:	d11b      	bne.n	162d2 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   1629a:	2008      	movs	r0, #8
   1629c:	4b19      	ldr	r3, [pc, #100]	; (16304 <http_client_callback+0x134>)
   1629e:	4798      	blx	r3
   162a0:	1e03      	subs	r3, r0, #0
   162a2:	d006      	beq.n	162b2 <http_client_callback+0xe2>
                    f_close(&file_object);
   162a4:	4b18      	ldr	r3, [pc, #96]	; (16308 <http_client_callback+0x138>)
   162a6:	0018      	movs	r0, r3
   162a8:	4b18      	ldr	r3, [pc, #96]	; (1630c <http_client_callback+0x13c>)
   162aa:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   162ac:	2008      	movs	r0, #8
   162ae:	4b18      	ldr	r3, [pc, #96]	; (16310 <http_client_callback+0x140>)
   162b0:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   162b2:	2004      	movs	r0, #4
   162b4:	4b13      	ldr	r3, [pc, #76]	; (16304 <http_client_callback+0x134>)
   162b6:	4798      	blx	r3
   162b8:	1e03      	subs	r3, r0, #0
   162ba:	d002      	beq.n	162c2 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   162bc:	2004      	movs	r0, #4
   162be:	4b14      	ldr	r3, [pc, #80]	; (16310 <http_client_callback+0x140>)
   162c0:	4798      	blx	r3
                }

                start_download();
   162c2:	4b14      	ldr	r3, [pc, #80]	; (16314 <http_client_callback+0x144>)
   162c4:	4798      	blx	r3
            }

            break;
   162c6:	46c0      	nop			; (mov r8, r8)
   162c8:	e003      	b.n	162d2 <http_client_callback+0x102>
            break;
   162ca:	46c0      	nop			; (mov r8, r8)
   162cc:	e002      	b.n	162d4 <http_client_callback+0x104>
            break;
   162ce:	46c0      	nop			; (mov r8, r8)
   162d0:	e000      	b.n	162d4 <http_client_callback+0x104>
            break;
   162d2:	46c0      	nop			; (mov r8, r8)
    }
}
   162d4:	46bd      	mov	sp, r7
   162d6:	b005      	add	sp, #20
   162d8:	bd90      	pop	{r4, r7, pc}
   162da:	46c0      	nop			; (mov r8, r8)
   162dc:	00036db8 	.word	0x00036db8
   162e0:	00036630 	.word	0x00036630
   162e4:	0001ddd1 	.word	0x0001ddd1
   162e8:	00036668 	.word	0x00036668
   162ec:	00015bf1 	.word	0x00015bf1
   162f0:	00036694 	.word	0x00036694
   162f4:	2000088c 	.word	0x2000088c
   162f8:	20000890 	.word	0x20000890
   162fc:	00015ffd 	.word	0x00015ffd
   16300:	000366d0 	.word	0x000366d0
   16304:	00015c19 	.word	0x00015c19
   16308:	20000868 	.word	0x20000868
   1630c:	0002e1a5 	.word	0x0002e1a5
   16310:	00015bbd 	.word	0x00015bbd
   16314:	00015f41 	.word	0x00015f41

00016318 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   16318:	b580      	push	{r7, lr}
   1631a:	b082      	sub	sp, #8
   1631c:	af00      	add	r7, sp, #0
   1631e:	603a      	str	r2, [r7, #0]
   16320:	1dfb      	adds	r3, r7, #7
   16322:	1c02      	adds	r2, r0, #0
   16324:	701a      	strb	r2, [r3, #0]
   16326:	1dbb      	adds	r3, r7, #6
   16328:	1c0a      	adds	r2, r1, #0
   1632a:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   1632c:	683a      	ldr	r2, [r7, #0]
   1632e:	1dbb      	adds	r3, r7, #6
   16330:	7819      	ldrb	r1, [r3, #0]
   16332:	1dfb      	adds	r3, r7, #7
   16334:	781b      	ldrb	r3, [r3, #0]
   16336:	b25b      	sxtb	r3, r3
   16338:	0018      	movs	r0, r3
   1633a:	4b03      	ldr	r3, [pc, #12]	; (16348 <socket_cb+0x30>)
   1633c:	4798      	blx	r3
}
   1633e:	46c0      	nop			; (mov r8, r8)
   16340:	46bd      	mov	sp, r7
   16342:	b002      	add	sp, #8
   16344:	bd80      	pop	{r7, pc}
   16346:	46c0      	nop			; (mov r8, r8)
   16348:	00030b09 	.word	0x00030b09

0001634c <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   1634c:	b5b0      	push	{r4, r5, r7, lr}
   1634e:	b086      	sub	sp, #24
   16350:	af04      	add	r7, sp, #16
   16352:	6078      	str	r0, [r7, #4]
   16354:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   16356:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   16358:	22ff      	movs	r2, #255	; 0xff
   1635a:	4013      	ands	r3, r2
   1635c:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   1635e:	683b      	ldr	r3, [r7, #0]
   16360:	0a1b      	lsrs	r3, r3, #8
   16362:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   16364:	23ff      	movs	r3, #255	; 0xff
   16366:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   16368:	683a      	ldr	r2, [r7, #0]
   1636a:	0c12      	lsrs	r2, r2, #16
   1636c:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   1636e:	22ff      	movs	r2, #255	; 0xff
   16370:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   16372:	6839      	ldr	r1, [r7, #0]
   16374:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   16376:	000d      	movs	r5, r1
   16378:	6878      	ldr	r0, [r7, #4]
   1637a:	4909      	ldr	r1, [pc, #36]	; (163a0 <resolve_cb+0x54>)
   1637c:	9502      	str	r5, [sp, #8]
   1637e:	9201      	str	r2, [sp, #4]
   16380:	9300      	str	r3, [sp, #0]
   16382:	0023      	movs	r3, r4
   16384:	0002      	movs	r2, r0
   16386:	2001      	movs	r0, #1
   16388:	4c06      	ldr	r4, [pc, #24]	; (163a4 <resolve_cb+0x58>)
   1638a:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   1638c:	683a      	ldr	r2, [r7, #0]
   1638e:	687b      	ldr	r3, [r7, #4]
   16390:	0011      	movs	r1, r2
   16392:	0018      	movs	r0, r3
   16394:	4b04      	ldr	r3, [pc, #16]	; (163a8 <resolve_cb+0x5c>)
   16396:	4798      	blx	r3
}
   16398:	46c0      	nop			; (mov r8, r8)
   1639a:	46bd      	mov	sp, r7
   1639c:	b002      	add	sp, #8
   1639e:	bdb0      	pop	{r4, r5, r7, pc}
   163a0:	00036700 	.word	0x00036700
   163a4:	0001ddd1 	.word	0x0001ddd1
   163a8:	00030c6d 	.word	0x00030c6d

000163ac <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   163ac:	b590      	push	{r4, r7, lr}
   163ae:	b087      	sub	sp, #28
   163b0:	af02      	add	r7, sp, #8
   163b2:	0002      	movs	r2, r0
   163b4:	6039      	str	r1, [r7, #0]
   163b6:	1dfb      	adds	r3, r7, #7
   163b8:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   163ba:	1dfb      	adds	r3, r7, #7
   163bc:	781b      	ldrb	r3, [r3, #0]
   163be:	2b2c      	cmp	r3, #44	; 0x2c
   163c0:	d002      	beq.n	163c8 <wifi_cb+0x1c>
   163c2:	2b32      	cmp	r3, #50	; 0x32
   163c4:	d03d      	beq.n	16442 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   163c6:	e06f      	b.n	164a8 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   163c8:	683b      	ldr	r3, [r7, #0]
   163ca:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   163cc:	68fb      	ldr	r3, [r7, #12]
   163ce:	781b      	ldrb	r3, [r3, #0]
   163d0:	2b01      	cmp	r3, #1
   163d2:	d107      	bne.n	163e4 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   163d4:	4b36      	ldr	r3, [pc, #216]	; (164b0 <wifi_cb+0x104>)
   163d6:	0019      	movs	r1, r3
   163d8:	2001      	movs	r0, #1
   163da:	4b36      	ldr	r3, [pc, #216]	; (164b4 <wifi_cb+0x108>)
   163dc:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   163de:	4b36      	ldr	r3, [pc, #216]	; (164b8 <wifi_cb+0x10c>)
   163e0:	4798      	blx	r3
            break;
   163e2:	e05e      	b.n	164a2 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   163e4:	68fb      	ldr	r3, [r7, #12]
   163e6:	781b      	ldrb	r3, [r3, #0]
   163e8:	2b00      	cmp	r3, #0
   163ea:	d15a      	bne.n	164a2 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   163ec:	4b33      	ldr	r3, [pc, #204]	; (164bc <wifi_cb+0x110>)
   163ee:	0019      	movs	r1, r3
   163f0:	2001      	movs	r0, #1
   163f2:	4b30      	ldr	r3, [pc, #192]	; (164b4 <wifi_cb+0x108>)
   163f4:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   163f6:	2002      	movs	r0, #2
   163f8:	4b31      	ldr	r3, [pc, #196]	; (164c0 <wifi_cb+0x114>)
   163fa:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   163fc:	2008      	movs	r0, #8
   163fe:	4b31      	ldr	r3, [pc, #196]	; (164c4 <wifi_cb+0x118>)
   16400:	4798      	blx	r3
   16402:	1e03      	subs	r3, r0, #0
   16404:	d006      	beq.n	16414 <wifi_cb+0x68>
                    f_close(&file_object);
   16406:	4b30      	ldr	r3, [pc, #192]	; (164c8 <wifi_cb+0x11c>)
   16408:	0018      	movs	r0, r3
   1640a:	4b30      	ldr	r3, [pc, #192]	; (164cc <wifi_cb+0x120>)
   1640c:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   1640e:	2008      	movs	r0, #8
   16410:	4b2b      	ldr	r3, [pc, #172]	; (164c0 <wifi_cb+0x114>)
   16412:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   16414:	2004      	movs	r0, #4
   16416:	4b2b      	ldr	r3, [pc, #172]	; (164c4 <wifi_cb+0x118>)
   16418:	4798      	blx	r3
   1641a:	1e03      	subs	r3, r0, #0
   1641c:	d002      	beq.n	16424 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   1641e:	2004      	movs	r0, #4
   16420:	4b27      	ldr	r3, [pc, #156]	; (164c0 <wifi_cb+0x114>)
   16422:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   16424:	4b2a      	ldr	r3, [pc, #168]	; (164d0 <wifi_cb+0x124>)
   16426:	2101      	movs	r1, #1
   16428:	0018      	movs	r0, r3
   1642a:	4b2a      	ldr	r3, [pc, #168]	; (164d4 <wifi_cb+0x128>)
   1642c:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   1642e:	4a2a      	ldr	r2, [pc, #168]	; (164d8 <wifi_cb+0x12c>)
   16430:	482a      	ldr	r0, [pc, #168]	; (164dc <wifi_cb+0x130>)
   16432:	23ff      	movs	r3, #255	; 0xff
   16434:	9300      	str	r3, [sp, #0]
   16436:	0013      	movs	r3, r2
   16438:	2202      	movs	r2, #2
   1643a:	2106      	movs	r1, #6
   1643c:	4c28      	ldr	r4, [pc, #160]	; (164e0 <wifi_cb+0x134>)
   1643e:	47a0      	blx	r4
            break;
   16440:	e02f      	b.n	164a2 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   16442:	683b      	ldr	r3, [r7, #0]
   16444:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   16446:	68bb      	ldr	r3, [r7, #8]
   16448:	781b      	ldrb	r3, [r3, #0]
   1644a:	0018      	movs	r0, r3
   1644c:	68bb      	ldr	r3, [r7, #8]
   1644e:	3301      	adds	r3, #1
   16450:	781b      	ldrb	r3, [r3, #0]
   16452:	001c      	movs	r4, r3
   16454:	68bb      	ldr	r3, [r7, #8]
   16456:	3302      	adds	r3, #2
   16458:	781b      	ldrb	r3, [r3, #0]
   1645a:	001a      	movs	r2, r3
   1645c:	68bb      	ldr	r3, [r7, #8]
   1645e:	3303      	adds	r3, #3
   16460:	781b      	ldrb	r3, [r3, #0]
   16462:	4920      	ldr	r1, [pc, #128]	; (164e4 <wifi_cb+0x138>)
   16464:	9301      	str	r3, [sp, #4]
   16466:	9200      	str	r2, [sp, #0]
   16468:	0023      	movs	r3, r4
   1646a:	0002      	movs	r2, r0
   1646c:	2001      	movs	r0, #1
   1646e:	4c11      	ldr	r4, [pc, #68]	; (164b4 <wifi_cb+0x108>)
   16470:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   16472:	2002      	movs	r0, #2
   16474:	4b1c      	ldr	r3, [pc, #112]	; (164e8 <wifi_cb+0x13c>)
   16476:	4798      	blx	r3
            if (do_download_flag == 1) {
   16478:	4b1c      	ldr	r3, [pc, #112]	; (164ec <wifi_cb+0x140>)
   1647a:	781b      	ldrb	r3, [r3, #0]
   1647c:	2b01      	cmp	r3, #1
   1647e:	d102      	bne.n	16486 <wifi_cb+0xda>
                start_download();
   16480:	4b1b      	ldr	r3, [pc, #108]	; (164f0 <wifi_cb+0x144>)
   16482:	4798      	blx	r3
        } break;
   16484:	e00f      	b.n	164a6 <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   16486:	4a1b      	ldr	r2, [pc, #108]	; (164f4 <wifi_cb+0x148>)
   16488:	4b11      	ldr	r3, [pc, #68]	; (164d0 <wifi_cb+0x124>)
   1648a:	0011      	movs	r1, r2
   1648c:	0018      	movs	r0, r3
   1648e:	4b1a      	ldr	r3, [pc, #104]	; (164f8 <wifi_cb+0x14c>)
   16490:	4798      	blx	r3
   16492:	1e03      	subs	r3, r0, #0
   16494:	d007      	beq.n	164a6 <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   16496:	4b19      	ldr	r3, [pc, #100]	; (164fc <wifi_cb+0x150>)
   16498:	0019      	movs	r1, r3
   1649a:	2001      	movs	r0, #1
   1649c:	4b05      	ldr	r3, [pc, #20]	; (164b4 <wifi_cb+0x108>)
   1649e:	4798      	blx	r3
        } break;
   164a0:	e001      	b.n	164a6 <wifi_cb+0xfa>
            break;
   164a2:	46c0      	nop			; (mov r8, r8)
   164a4:	e000      	b.n	164a8 <wifi_cb+0xfc>
        } break;
   164a6:	46c0      	nop			; (mov r8, r8)
    }
}
   164a8:	46c0      	nop			; (mov r8, r8)
   164aa:	46bd      	mov	sp, r7
   164ac:	b005      	add	sp, #20
   164ae:	bd90      	pop	{r4, r7, pc}
   164b0:	00036730 	.word	0x00036730
   164b4:	0001ddd1 	.word	0x0001ddd1
   164b8:	000222d9 	.word	0x000222d9
   164bc:	00036750 	.word	0x00036750
   164c0:	00015bbd 	.word	0x00015bbd
   164c4:	00015c19 	.word	0x00015c19
   164c8:	20000868 	.word	0x20000868
   164cc:	0002e1a5 	.word	0x0002e1a5
   164d0:	20000894 	.word	0x20000894
   164d4:	0002f7b5 	.word	0x0002f7b5
   164d8:	00036774 	.word	0x00036774
   164dc:	00036780 	.word	0x00036780
   164e0:	00021e05 	.word	0x00021e05
   164e4:	00036788 	.word	0x00036788
   164e8:	00015bf1 	.word	0x00015bf1
   164ec:	20000634 	.word	0x20000634
   164f0:	00015f41 	.word	0x00015f41
   164f4:	000363a0 	.word	0x000363a0
   164f8:	0002f681 	.word	0x0002f681
   164fc:	000367b0 	.word	0x000367b0

00016500 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   16500:	b590      	push	{r4, r7, lr}
   16502:	b083      	sub	sp, #12
   16504:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   16506:	4b29      	ldr	r3, [pc, #164]	; (165ac <init_storage+0xac>)
   16508:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   1650a:	4b29      	ldr	r3, [pc, #164]	; (165b0 <init_storage+0xb0>)
   1650c:	0019      	movs	r1, r3
   1650e:	2001      	movs	r0, #1
   16510:	4b28      	ldr	r3, [pc, #160]	; (165b4 <init_storage+0xb4>)
   16512:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   16514:	1dfc      	adds	r4, r7, #7
   16516:	2000      	movs	r0, #0
   16518:	4b27      	ldr	r3, [pc, #156]	; (165b8 <init_storage+0xb8>)
   1651a:	4798      	blx	r3
   1651c:	0003      	movs	r3, r0
   1651e:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   16520:	1dfb      	adds	r3, r7, #7
   16522:	781b      	ldrb	r3, [r3, #0]
   16524:	2b01      	cmp	r3, #1
   16526:	d110      	bne.n	1654a <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   16528:	4b24      	ldr	r3, [pc, #144]	; (165bc <init_storage+0xbc>)
   1652a:	0019      	movs	r1, r3
   1652c:	2001      	movs	r0, #1
   1652e:	4b21      	ldr	r3, [pc, #132]	; (165b4 <init_storage+0xb4>)
   16530:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   16532:	4b23      	ldr	r3, [pc, #140]	; (165c0 <init_storage+0xc0>)
   16534:	0019      	movs	r1, r3
   16536:	2001      	movs	r0, #1
   16538:	4b1e      	ldr	r3, [pc, #120]	; (165b4 <init_storage+0xb4>)
   1653a:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   1653c:	46c0      	nop			; (mov r8, r8)
   1653e:	2000      	movs	r0, #0
   16540:	4b20      	ldr	r3, [pc, #128]	; (165c4 <init_storage+0xc4>)
   16542:	4798      	blx	r3
   16544:	0003      	movs	r3, r0
   16546:	2b02      	cmp	r3, #2
   16548:	d1f9      	bne.n	1653e <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   1654a:	1dfb      	adds	r3, r7, #7
   1654c:	781b      	ldrb	r3, [r3, #0]
   1654e:	2b00      	cmp	r3, #0
   16550:	d1e0      	bne.n	16514 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   16552:	4b1d      	ldr	r3, [pc, #116]	; (165c8 <init_storage+0xc8>)
   16554:	0019      	movs	r1, r3
   16556:	2001      	movs	r0, #1
   16558:	4b16      	ldr	r3, [pc, #88]	; (165b4 <init_storage+0xb4>)
   1655a:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   1655c:	238c      	movs	r3, #140	; 0x8c
   1655e:	009a      	lsls	r2, r3, #2
   16560:	4b1a      	ldr	r3, [pc, #104]	; (165cc <init_storage+0xcc>)
   16562:	2100      	movs	r1, #0
   16564:	0018      	movs	r0, r3
   16566:	4b1a      	ldr	r3, [pc, #104]	; (165d0 <init_storage+0xd0>)
   16568:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   1656a:	1dbc      	adds	r4, r7, #6
   1656c:	4b17      	ldr	r3, [pc, #92]	; (165cc <init_storage+0xcc>)
   1656e:	0019      	movs	r1, r3
   16570:	2000      	movs	r0, #0
   16572:	4b18      	ldr	r3, [pc, #96]	; (165d4 <init_storage+0xd4>)
   16574:	4798      	blx	r3
   16576:	0003      	movs	r3, r0
   16578:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   1657a:	1dbb      	adds	r3, r7, #6
   1657c:	781b      	ldrb	r3, [r3, #0]
   1657e:	2b0b      	cmp	r3, #11
   16580:	d107      	bne.n	16592 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   16582:	1dbb      	adds	r3, r7, #6
   16584:	781a      	ldrb	r2, [r3, #0]
   16586:	4b14      	ldr	r3, [pc, #80]	; (165d8 <init_storage+0xd8>)
   16588:	0019      	movs	r1, r3
   1658a:	2001      	movs	r0, #1
   1658c:	4b09      	ldr	r3, [pc, #36]	; (165b4 <init_storage+0xb4>)
   1658e:	4798      	blx	r3
            return;
   16590:	e008      	b.n	165a4 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   16592:	4b12      	ldr	r3, [pc, #72]	; (165dc <init_storage+0xdc>)
   16594:	0019      	movs	r1, r3
   16596:	2001      	movs	r0, #1
   16598:	4b06      	ldr	r3, [pc, #24]	; (165b4 <init_storage+0xb4>)
   1659a:	4798      	blx	r3
        add_state(STORAGE_READY);
   1659c:	2001      	movs	r0, #1
   1659e:	4b10      	ldr	r3, [pc, #64]	; (165e0 <init_storage+0xe0>)
   165a0:	4798      	blx	r3
        return;
   165a2:	46c0      	nop			; (mov r8, r8)
    }
}
   165a4:	46bd      	mov	sp, r7
   165a6:	b003      	add	sp, #12
   165a8:	bd90      	pop	{r4, r7, pc}
   165aa:	46c0      	nop			; (mov r8, r8)
   165ac:	0001ebe9 	.word	0x0001ebe9
   165b0:	000367d4 	.word	0x000367d4
   165b4:	0001ddd1 	.word	0x0001ddd1
   165b8:	0001f0c5 	.word	0x0001f0c5
   165bc:	0003680c 	.word	0x0003680c
   165c0:	00036834 	.word	0x00036834
   165c4:	0001ec39 	.word	0x0001ec39
   165c8:	00036868 	.word	0x00036868
   165cc:	20000638 	.word	0x20000638
   165d0:	00034883 	.word	0x00034883
   165d4:	0002d74d 	.word	0x0002d74d
   165d8:	0003688c 	.word	0x0003688c
   165dc:	000368bc 	.word	0x000368bc
   165e0:	00015bf1 	.word	0x00015bf1

000165e4 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   165e4:	b580      	push	{r7, lr}
   165e6:	b082      	sub	sp, #8
   165e8:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   165ea:	1d3b      	adds	r3, r7, #4
   165ec:	0018      	movs	r0, r3
   165ee:	4b08      	ldr	r3, [pc, #32]	; (16610 <configure_timer+0x2c>)
   165f0:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   165f2:	1d3a      	adds	r2, r7, #4
   165f4:	4b07      	ldr	r3, [pc, #28]	; (16614 <configure_timer+0x30>)
   165f6:	0011      	movs	r1, r2
   165f8:	0018      	movs	r0, r3
   165fa:	4b07      	ldr	r3, [pc, #28]	; (16618 <configure_timer+0x34>)
   165fc:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   165fe:	4b05      	ldr	r3, [pc, #20]	; (16614 <configure_timer+0x30>)
   16600:	0018      	movs	r0, r3
   16602:	4b06      	ldr	r3, [pc, #24]	; (1661c <configure_timer+0x38>)
   16604:	4798      	blx	r3
}
   16606:	46c0      	nop			; (mov r8, r8)
   16608:	46bd      	mov	sp, r7
   1660a:	b002      	add	sp, #8
   1660c:	bd80      	pop	{r7, pc}
   1660e:	46c0      	nop			; (mov r8, r8)
   16610:	0003229d 	.word	0x0003229d
   16614:	200048ac 	.word	0x200048ac
   16618:	000322c1 	.word	0x000322c1
   1661c:	000323ad 	.word	0x000323ad

00016620 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   16620:	b580      	push	{r7, lr}
   16622:	b088      	sub	sp, #32
   16624:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   16626:	003b      	movs	r3, r7
   16628:	0018      	movs	r0, r3
   1662a:	4b16      	ldr	r3, [pc, #88]	; (16684 <configure_http_client+0x64>)
   1662c:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   1662e:	003b      	movs	r3, r7
   16630:	2280      	movs	r2, #128	; 0x80
   16632:	0092      	lsls	r2, r2, #2
   16634:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   16636:	003b      	movs	r3, r7
   16638:	4a13      	ldr	r2, [pc, #76]	; (16688 <configure_http_client+0x68>)
   1663a:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 443;
   1663c:	003b      	movs	r3, r7
   1663e:	22bc      	movs	r2, #188	; 0xbc
   16640:	32ff      	adds	r2, #255	; 0xff
   16642:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 1;
   16644:	003b      	movs	r3, r7
   16646:	2201      	movs	r2, #1
   16648:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   1664a:	003a      	movs	r2, r7
   1664c:	4b0f      	ldr	r3, [pc, #60]	; (1668c <configure_http_client+0x6c>)
   1664e:	0011      	movs	r1, r2
   16650:	0018      	movs	r0, r3
   16652:	4b0f      	ldr	r3, [pc, #60]	; (16690 <configure_http_client+0x70>)
   16654:	4798      	blx	r3
   16656:	0003      	movs	r3, r0
   16658:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   1665a:	69fb      	ldr	r3, [r7, #28]
   1665c:	2b00      	cmp	r3, #0
   1665e:	da06      	bge.n	1666e <configure_http_client+0x4e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   16660:	69fa      	ldr	r2, [r7, #28]
   16662:	4b0c      	ldr	r3, [pc, #48]	; (16694 <configure_http_client+0x74>)
   16664:	0019      	movs	r1, r3
   16666:	2001      	movs	r0, #1
   16668:	4b0b      	ldr	r3, [pc, #44]	; (16698 <configure_http_client+0x78>)
   1666a:	4798      	blx	r3
        while (1) {
   1666c:	e7fe      	b.n	1666c <configure_http_client+0x4c>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   1666e:	4a0b      	ldr	r2, [pc, #44]	; (1669c <configure_http_client+0x7c>)
   16670:	4b06      	ldr	r3, [pc, #24]	; (1668c <configure_http_client+0x6c>)
   16672:	0011      	movs	r1, r2
   16674:	0018      	movs	r0, r3
   16676:	4b0a      	ldr	r3, [pc, #40]	; (166a0 <configure_http_client+0x80>)
   16678:	4798      	blx	r3
}
   1667a:	46c0      	nop			; (mov r8, r8)
   1667c:	46bd      	mov	sp, r7
   1667e:	b008      	add	sp, #32
   16680:	bd80      	pop	{r7, pc}
   16682:	46c0      	nop			; (mov r8, r8)
   16684:	00030931 	.word	0x00030931
   16688:	200048ac 	.word	0x200048ac
   1668c:	20004904 	.word	0x20004904
   16690:	0003097d 	.word	0x0003097d
   16694:	000368e0 	.word	0x000368e0
   16698:	0001ddd1 	.word	0x0001ddd1
   1669c:	000161d1 	.word	0x000161d1
   166a0:	00030a69 	.word	0x00030a69

000166a4 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   166a4:	b580      	push	{r7, lr}
   166a6:	b082      	sub	sp, #8
   166a8:	af00      	add	r7, sp, #0
   166aa:	603a      	str	r2, [r7, #0]
   166ac:	1dfb      	adds	r3, r7, #7
   166ae:	1c02      	adds	r2, r0, #0
   166b0:	701a      	strb	r2, [r3, #0]
   166b2:	1dbb      	adds	r3, r7, #6
   166b4:	1c0a      	adds	r2, r1, #0
   166b6:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   166b8:	683a      	ldr	r2, [r7, #0]
   166ba:	1dbb      	adds	r3, r7, #6
   166bc:	7819      	ldrb	r1, [r3, #0]
   166be:	1dfb      	adds	r3, r7, #7
   166c0:	781b      	ldrb	r3, [r3, #0]
   166c2:	b25b      	sxtb	r3, r3
   166c4:	0018      	movs	r0, r3
   166c6:	4b03      	ldr	r3, [pc, #12]	; (166d4 <socket_event_handler+0x30>)
   166c8:	4798      	blx	r3
}
   166ca:	46c0      	nop			; (mov r8, r8)
   166cc:	46bd      	mov	sp, r7
   166ce:	b002      	add	sp, #8
   166d0:	bd80      	pop	{r7, pc}
   166d2:	46c0      	nop			; (mov r8, r8)
   166d4:	0002f629 	.word	0x0002f629

000166d8 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   166d8:	b580      	push	{r7, lr}
   166da:	b082      	sub	sp, #8
   166dc:	af00      	add	r7, sp, #0
   166de:	6078      	str	r0, [r7, #4]
   166e0:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   166e2:	683a      	ldr	r2, [r7, #0]
   166e4:	687b      	ldr	r3, [r7, #4]
   166e6:	0011      	movs	r1, r2
   166e8:	0018      	movs	r0, r3
   166ea:	4b03      	ldr	r3, [pc, #12]	; (166f8 <socket_resolve_handler+0x20>)
   166ec:	4798      	blx	r3
}
   166ee:	46c0      	nop			; (mov r8, r8)
   166f0:	46bd      	mov	sp, r7
   166f2:	b002      	add	sp, #8
   166f4:	bd80      	pop	{r7, pc}
   166f6:	46c0      	nop			; (mov r8, r8)
   166f8:	0002f65d 	.word	0x0002f65d

000166fc <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   166fc:	b590      	push	{r4, r7, lr}
   166fe:	b089      	sub	sp, #36	; 0x24
   16700:	af02      	add	r7, sp, #8
   16702:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
   16704:	2310      	movs	r3, #16
   16706:	18fb      	adds	r3, r7, r3
   16708:	2200      	movs	r2, #0
   1670a:	701a      	strb	r2, [r3, #0]
   1670c:	2310      	movs	r3, #16
   1670e:	18fb      	adds	r3, r7, r3
   16710:	2200      	movs	r2, #0
   16712:	705a      	strb	r2, [r3, #1]
   16714:	2310      	movs	r3, #16
   16716:	18fb      	adds	r3, r7, r3
   16718:	2200      	movs	r2, #0
   1671a:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   1671c:	687b      	ldr	r3, [r7, #4]
   1671e:	685b      	ldr	r3, [r3, #4]
   16720:	685a      	ldr	r2, [r3, #4]
   16722:	687b      	ldr	r3, [r7, #4]
   16724:	685b      	ldr	r3, [r3, #4]
   16726:	689b      	ldr	r3, [r3, #8]
   16728:	492a      	ldr	r1, [pc, #168]	; (167d4 <SubscribeHandlerLedTopic+0xd8>)
   1672a:	2001      	movs	r0, #1
   1672c:	4c2a      	ldr	r4, [pc, #168]	; (167d8 <SubscribeHandlerLedTopic+0xdc>)
   1672e:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   16730:	687b      	ldr	r3, [r7, #4]
   16732:	681b      	ldr	r3, [r3, #0]
   16734:	689b      	ldr	r3, [r3, #8]
   16736:	4929      	ldr	r1, [pc, #164]	; (167dc <SubscribeHandlerLedTopic+0xe0>)
   16738:	2204      	movs	r2, #4
   1673a:	0018      	movs	r0, r3
   1673c:	4b28      	ldr	r3, [pc, #160]	; (167e0 <SubscribeHandlerLedTopic+0xe4>)
   1673e:	4798      	blx	r3
   16740:	1e03      	subs	r3, r0, #0
   16742:	d143      	bne.n	167cc <SubscribeHandlerLedTopic+0xd0>
        char *p = (char *)&msgData->message->payload[4];
   16744:	687b      	ldr	r3, [r7, #4]
   16746:	681b      	ldr	r3, [r3, #0]
   16748:	689b      	ldr	r3, [r3, #8]
   1674a:	3304      	adds	r3, #4
   1674c:	60fb      	str	r3, [r7, #12]
        int nb = 0;
   1674e:	2300      	movs	r3, #0
   16750:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
   16752:	e015      	b.n	16780 <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
   16754:	697c      	ldr	r4, [r7, #20]
   16756:	1c63      	adds	r3, r4, #1
   16758:	617b      	str	r3, [r7, #20]
   1675a:	68fb      	ldr	r3, [r7, #12]
   1675c:	220c      	movs	r2, #12
   1675e:	18b9      	adds	r1, r7, r2
   16760:	220a      	movs	r2, #10
   16762:	0018      	movs	r0, r3
   16764:	4b1f      	ldr	r3, [pc, #124]	; (167e4 <SubscribeHandlerLedTopic+0xe8>)
   16766:	4798      	blx	r3
   16768:	0003      	movs	r3, r0
   1676a:	b2da      	uxtb	r2, r3
   1676c:	2310      	movs	r3, #16
   1676e:	18fb      	adds	r3, r7, r3
   16770:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   16772:	68fb      	ldr	r3, [r7, #12]
   16774:	781b      	ldrb	r3, [r3, #0]
   16776:	2b2c      	cmp	r3, #44	; 0x2c
   16778:	d10a      	bne.n	16790 <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
   1677a:	68fb      	ldr	r3, [r7, #12]
   1677c:	3301      	adds	r3, #1
   1677e:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
   16780:	697b      	ldr	r3, [r7, #20]
   16782:	2b02      	cmp	r3, #2
   16784:	dc05      	bgt.n	16792 <SubscribeHandlerLedTopic+0x96>
   16786:	68fb      	ldr	r3, [r7, #12]
   16788:	781b      	ldrb	r3, [r3, #0]
   1678a:	2b00      	cmp	r3, #0
   1678c:	d1e2      	bne.n	16754 <SubscribeHandlerLedTopic+0x58>
   1678e:	e000      	b.n	16792 <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
   16790:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   16792:	2310      	movs	r3, #16
   16794:	18fb      	adds	r3, r7, r3
   16796:	781b      	ldrb	r3, [r3, #0]
   16798:	001a      	movs	r2, r3
   1679a:	2310      	movs	r3, #16
   1679c:	18fb      	adds	r3, r7, r3
   1679e:	785b      	ldrb	r3, [r3, #1]
   167a0:	0018      	movs	r0, r3
   167a2:	2310      	movs	r3, #16
   167a4:	18fb      	adds	r3, r7, r3
   167a6:	789b      	ldrb	r3, [r3, #2]
   167a8:	490f      	ldr	r1, [pc, #60]	; (167e8 <SubscribeHandlerLedTopic+0xec>)
   167aa:	9300      	str	r3, [sp, #0]
   167ac:	0003      	movs	r3, r0
   167ae:	2001      	movs	r0, #1
   167b0:	4c09      	ldr	r4, [pc, #36]	; (167d8 <SubscribeHandlerLedTopic+0xdc>)
   167b2:	47a0      	blx	r4
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
   167b4:	2310      	movs	r3, #16
   167b6:	18fb      	adds	r3, r7, r3
   167b8:	7818      	ldrb	r0, [r3, #0]
   167ba:	2310      	movs	r3, #16
   167bc:	18fb      	adds	r3, r7, r3
   167be:	7859      	ldrb	r1, [r3, #1]
   167c0:	2310      	movs	r3, #16
   167c2:	18fb      	adds	r3, r7, r3
   167c4:	789b      	ldrb	r3, [r3, #2]
   167c6:	001a      	movs	r2, r3
   167c8:	4b08      	ldr	r3, [pc, #32]	; (167ec <SubscribeHandlerLedTopic+0xf0>)
   167ca:	4798      	blx	r3
    }
}
   167cc:	46c0      	nop			; (mov r8, r8)
   167ce:	46bd      	mov	sp, r7
   167d0:	b007      	add	sp, #28
   167d2:	bd90      	pop	{r4, r7, pc}
   167d4:	00036928 	.word	0x00036928
   167d8:	0001ddd1 	.word	0x0001ddd1
   167dc:	00036930 	.word	0x00036930
   167e0:	00034c49 	.word	0x00034c49
   167e4:	00034df5 	.word	0x00034df5
   167e8:	00036938 	.word	0x00036938
   167ec:	00015a85 	.word	0x00015a85

000167f0 <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   167f0:	b590      	push	{r4, r7, lr}
   167f2:	b08b      	sub	sp, #44	; 0x2c
   167f4:	af00      	add	r7, sp, #0
   167f6:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
   167f8:	230c      	movs	r3, #12
   167fa:	18fb      	adds	r3, r7, r3
   167fc:	2214      	movs	r2, #20
   167fe:	21ff      	movs	r1, #255	; 0xff
   16800:	0018      	movs	r0, r3
   16802:	4b48      	ldr	r3, [pc, #288]	; (16924 <SubscribeHandlerGameTopic+0x134>)
   16804:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   16806:	687b      	ldr	r3, [r7, #4]
   16808:	681b      	ldr	r3, [r3, #0]
   1680a:	689b      	ldr	r3, [r3, #8]
   1680c:	4946      	ldr	r1, [pc, #280]	; (16928 <SubscribeHandlerGameTopic+0x138>)
   1680e:	2209      	movs	r2, #9
   16810:	0018      	movs	r0, r3
   16812:	4b46      	ldr	r3, [pc, #280]	; (1692c <SubscribeHandlerGameTopic+0x13c>)
   16814:	4798      	blx	r3
   16816:	1e03      	subs	r3, r0, #0
   16818:	d166      	bne.n	168e8 <SubscribeHandlerGameTopic+0xf8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   1681a:	4b45      	ldr	r3, [pc, #276]	; (16930 <SubscribeHandlerGameTopic+0x140>)
   1681c:	0019      	movs	r1, r3
   1681e:	2001      	movs	r0, #1
   16820:	4b44      	ldr	r3, [pc, #272]	; (16934 <SubscribeHandlerGameTopic+0x144>)
   16822:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   16824:	687b      	ldr	r3, [r7, #4]
   16826:	685b      	ldr	r3, [r3, #4]
   16828:	685a      	ldr	r2, [r3, #4]
   1682a:	687b      	ldr	r3, [r7, #4]
   1682c:	685b      	ldr	r3, [r3, #4]
   1682e:	689b      	ldr	r3, [r3, #8]
   16830:	4941      	ldr	r1, [pc, #260]	; (16938 <SubscribeHandlerGameTopic+0x148>)
   16832:	2001      	movs	r0, #1
   16834:	4c3f      	ldr	r4, [pc, #252]	; (16934 <SubscribeHandlerGameTopic+0x144>)
   16836:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   16838:	687b      	ldr	r3, [r7, #4]
   1683a:	681b      	ldr	r3, [r3, #0]
   1683c:	68da      	ldr	r2, [r3, #12]
   1683e:	687b      	ldr	r3, [r7, #4]
   16840:	681b      	ldr	r3, [r3, #0]
   16842:	689b      	ldr	r3, [r3, #8]
   16844:	493d      	ldr	r1, [pc, #244]	; (1693c <SubscribeHandlerGameTopic+0x14c>)
   16846:	2001      	movs	r0, #1
   16848:	4c3a      	ldr	r4, [pc, #232]	; (16934 <SubscribeHandlerGameTopic+0x144>)
   1684a:	47a0      	blx	r4

        int nb = 0;
   1684c:	2300      	movs	r3, #0
   1684e:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
   16850:	687b      	ldr	r3, [r7, #4]
   16852:	681b      	ldr	r3, [r3, #0]
   16854:	689b      	ldr	r3, [r3, #8]
   16856:	3309      	adds	r3, #9
   16858:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   1685a:	e015      	b.n	16888 <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
   1685c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   1685e:	1c63      	adds	r3, r4, #1
   16860:	627b      	str	r3, [r7, #36]	; 0x24
   16862:	68bb      	ldr	r3, [r7, #8]
   16864:	2208      	movs	r2, #8
   16866:	18b9      	adds	r1, r7, r2
   16868:	220a      	movs	r2, #10
   1686a:	0018      	movs	r0, r3
   1686c:	4b34      	ldr	r3, [pc, #208]	; (16940 <SubscribeHandlerGameTopic+0x150>)
   1686e:	4798      	blx	r3
   16870:	0003      	movs	r3, r0
   16872:	b2da      	uxtb	r2, r3
   16874:	230c      	movs	r3, #12
   16876:	18fb      	adds	r3, r7, r3
   16878:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   1687a:	68bb      	ldr	r3, [r7, #8]
   1687c:	781b      	ldrb	r3, [r3, #0]
   1687e:	2b2c      	cmp	r3, #44	; 0x2c
   16880:	d10a      	bne.n	16898 <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
   16882:	68bb      	ldr	r3, [r7, #8]
   16884:	3301      	adds	r3, #1
   16886:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   16888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1688a:	2b13      	cmp	r3, #19
   1688c:	dc05      	bgt.n	1689a <SubscribeHandlerGameTopic+0xaa>
   1688e:	68bb      	ldr	r3, [r7, #8]
   16890:	781b      	ldrb	r3, [r3, #0]
   16892:	2b00      	cmp	r3, #0
   16894:	d1e2      	bne.n	1685c <SubscribeHandlerGameTopic+0x6c>
   16896:	e000      	b.n	1689a <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
   16898:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   1689a:	4b2a      	ldr	r3, [pc, #168]	; (16944 <SubscribeHandlerGameTopic+0x154>)
   1689c:	0019      	movs	r1, r3
   1689e:	2001      	movs	r0, #1
   168a0:	4b24      	ldr	r3, [pc, #144]	; (16934 <SubscribeHandlerGameTopic+0x144>)
   168a2:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   168a4:	2300      	movs	r3, #0
   168a6:	623b      	str	r3, [r7, #32]
   168a8:	e00d      	b.n	168c6 <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   168aa:	230c      	movs	r3, #12
   168ac:	18fa      	adds	r2, r7, r3
   168ae:	6a3b      	ldr	r3, [r7, #32]
   168b0:	18d3      	adds	r3, r2, r3
   168b2:	781b      	ldrb	r3, [r3, #0]
   168b4:	001a      	movs	r2, r3
   168b6:	4b24      	ldr	r3, [pc, #144]	; (16948 <SubscribeHandlerGameTopic+0x158>)
   168b8:	0019      	movs	r1, r3
   168ba:	2001      	movs	r0, #1
   168bc:	4b1d      	ldr	r3, [pc, #116]	; (16934 <SubscribeHandlerGameTopic+0x144>)
   168be:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   168c0:	6a3b      	ldr	r3, [r7, #32]
   168c2:	3301      	adds	r3, #1
   168c4:	623b      	str	r3, [r7, #32]
   168c6:	6a3b      	ldr	r3, [r7, #32]
   168c8:	2b13      	cmp	r3, #19
   168ca:	ddee      	ble.n	168aa <SubscribeHandlerGameTopic+0xba>
        }

        if (pdTRUE == ControlAddGameData(&game)) {
   168cc:	230c      	movs	r3, #12
   168ce:	18fb      	adds	r3, r7, r3
   168d0:	0018      	movs	r0, r3
   168d2:	4b1e      	ldr	r3, [pc, #120]	; (1694c <SubscribeHandlerGameTopic+0x15c>)
   168d4:	4798      	blx	r3
   168d6:	0003      	movs	r3, r0
   168d8:	2b01      	cmp	r3, #1
   168da:	d11e      	bne.n	1691a <SubscribeHandlerGameTopic+0x12a>
            LogMessage(LOG_DEBUG_LVL, "\r\nSent play to control!\r\n");
   168dc:	4b1c      	ldr	r3, [pc, #112]	; (16950 <SubscribeHandlerGameTopic+0x160>)
   168de:	0019      	movs	r1, r3
   168e0:	2001      	movs	r0, #1
   168e2:	4b14      	ldr	r3, [pc, #80]	; (16934 <SubscribeHandlerGameTopic+0x144>)
   168e4:	4798      	blx	r3
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
   168e6:	e018      	b.n	1691a <SubscribeHandlerGameTopic+0x12a>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   168e8:	4b1a      	ldr	r3, [pc, #104]	; (16954 <SubscribeHandlerGameTopic+0x164>)
   168ea:	0019      	movs	r1, r3
   168ec:	2001      	movs	r0, #1
   168ee:	4b11      	ldr	r3, [pc, #68]	; (16934 <SubscribeHandlerGameTopic+0x144>)
   168f0:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   168f2:	687b      	ldr	r3, [r7, #4]
   168f4:	685b      	ldr	r3, [r3, #4]
   168f6:	685a      	ldr	r2, [r3, #4]
   168f8:	687b      	ldr	r3, [r7, #4]
   168fa:	685b      	ldr	r3, [r3, #4]
   168fc:	689b      	ldr	r3, [r3, #8]
   168fe:	490e      	ldr	r1, [pc, #56]	; (16938 <SubscribeHandlerGameTopic+0x148>)
   16900:	2001      	movs	r0, #1
   16902:	4c0c      	ldr	r4, [pc, #48]	; (16934 <SubscribeHandlerGameTopic+0x144>)
   16904:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   16906:	687b      	ldr	r3, [r7, #4]
   16908:	681b      	ldr	r3, [r3, #0]
   1690a:	68da      	ldr	r2, [r3, #12]
   1690c:	687b      	ldr	r3, [r7, #4]
   1690e:	681b      	ldr	r3, [r3, #0]
   16910:	689b      	ldr	r3, [r3, #8]
   16912:	490a      	ldr	r1, [pc, #40]	; (1693c <SubscribeHandlerGameTopic+0x14c>)
   16914:	2001      	movs	r0, #1
   16916:	4c07      	ldr	r4, [pc, #28]	; (16934 <SubscribeHandlerGameTopic+0x144>)
   16918:	47a0      	blx	r4
}
   1691a:	46c0      	nop			; (mov r8, r8)
   1691c:	46bd      	mov	sp, r7
   1691e:	b00b      	add	sp, #44	; 0x2c
   16920:	bd90      	pop	{r4, r7, pc}
   16922:	46c0      	nop			; (mov r8, r8)
   16924:	00034883 	.word	0x00034883
   16928:	0003694c 	.word	0x0003694c
   1692c:	00034c49 	.word	0x00034c49
   16930:	00036958 	.word	0x00036958
   16934:	0001ddd1 	.word	0x0001ddd1
   16938:	00036928 	.word	0x00036928
   1693c:	00036974 	.word	0x00036974
   16940:	00034df5 	.word	0x00034df5
   16944:	0003697c 	.word	0x0003697c
   16948:	00036990 	.word	0x00036990
   1694c:	00013ec9 	.word	0x00013ec9
   16950:	00036994 	.word	0x00036994
   16954:	000369b0 	.word	0x000369b0

00016958 <SubscribeHandlerImuTopic>:

void SubscribeHandlerImuTopic(MessageData *msgData)
{
   16958:	b590      	push	{r4, r7, lr}
   1695a:	b083      	sub	sp, #12
   1695c:	af00      	add	r7, sp, #0
   1695e:	6078      	str	r0, [r7, #4]
	LogMessage(LOG_DEBUG_LVL, "IMU topic received! -"); //changed by Derek
   16960:	4b09      	ldr	r3, [pc, #36]	; (16988 <SubscribeHandlerImuTopic+0x30>)
   16962:	0019      	movs	r1, r3
   16964:	2001      	movs	r0, #1
   16966:	4b09      	ldr	r3, [pc, #36]	; (1698c <SubscribeHandlerImuTopic+0x34>)
   16968:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "%.*s \r\n\r\n", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   1696a:	687b      	ldr	r3, [r7, #4]
   1696c:	685b      	ldr	r3, [r3, #4]
   1696e:	685a      	ldr	r2, [r3, #4]
   16970:	687b      	ldr	r3, [r7, #4]
   16972:	685b      	ldr	r3, [r3, #4]
   16974:	689b      	ldr	r3, [r3, #8]
   16976:	4906      	ldr	r1, [pc, #24]	; (16990 <SubscribeHandlerImuTopic+0x38>)
   16978:	2001      	movs	r0, #1
   1697a:	4c04      	ldr	r4, [pc, #16]	; (1698c <SubscribeHandlerImuTopic+0x34>)
   1697c:	47a0      	blx	r4
}
   1697e:	46c0      	nop			; (mov r8, r8)
   16980:	46bd      	mov	sp, r7
   16982:	b003      	add	sp, #12
   16984:	bd90      	pop	{r4, r7, pc}
   16986:	46c0      	nop			; (mov r8, r8)
   16988:	000369e0 	.word	0x000369e0
   1698c:	0001ddd1 	.word	0x0001ddd1
   16990:	000369f8 	.word	0x000369f8

00016994 <SubscribeHandlerGpsTopic>:
	LogMessage(LOG_DEBUG_LVL, "\r\nDistance topic received!\r\n");
	LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
}

void SubscribeHandlerGpsTopic(MessageData *msgData) //Derek-GPS, used in mqtt_callback()
{
   16994:	b590      	push	{r4, r7, lr}
   16996:	b083      	sub	sp, #12
   16998:	af00      	add	r7, sp, #0
   1699a:	6078      	str	r0, [r7, #4]
	LogMessage(LOG_DEBUG_LVL, "GPS topic received! -");
   1699c:	4b09      	ldr	r3, [pc, #36]	; (169c4 <SubscribeHandlerGpsTopic+0x30>)
   1699e:	0019      	movs	r1, r3
   169a0:	2001      	movs	r0, #1
   169a2:	4b09      	ldr	r3, [pc, #36]	; (169c8 <SubscribeHandlerGpsTopic+0x34>)
   169a4:	4798      	blx	r3
	LogMessage(LOG_DEBUG_LVL, "%.*s \r\n", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   169a6:	687b      	ldr	r3, [r7, #4]
   169a8:	685b      	ldr	r3, [r3, #4]
   169aa:	685a      	ldr	r2, [r3, #4]
   169ac:	687b      	ldr	r3, [r7, #4]
   169ae:	685b      	ldr	r3, [r3, #4]
   169b0:	689b      	ldr	r3, [r3, #8]
   169b2:	4906      	ldr	r1, [pc, #24]	; (169cc <SubscribeHandlerGpsTopic+0x38>)
   169b4:	2001      	movs	r0, #1
   169b6:	4c04      	ldr	r4, [pc, #16]	; (169c8 <SubscribeHandlerGpsTopic+0x34>)
   169b8:	47a0      	blx	r4
}
   169ba:	46c0      	nop			; (mov r8, r8)
   169bc:	46bd      	mov	sp, r7
   169be:	b003      	add	sp, #12
   169c0:	bd90      	pop	{r4, r7, pc}
   169c2:	46c0      	nop			; (mov r8, r8)
   169c4:	00036a24 	.word	0x00036a24
   169c8:	0001ddd1 	.word	0x0001ddd1
   169cc:	00036a3c 	.word	0x00036a3c

000169d0 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   169d0:	b590      	push	{r4, r7, lr}
   169d2:	b08b      	sub	sp, #44	; 0x2c
   169d4:	af06      	add	r7, sp, #24
   169d6:	60f8      	str	r0, [r7, #12]
   169d8:	60b9      	str	r1, [r7, #8]
   169da:	607a      	str	r2, [r7, #4]
    switch (type) {
   169dc:	68bb      	ldr	r3, [r7, #8]
   169de:	2b01      	cmp	r3, #1
   169e0:	d03b      	beq.n	16a5a <mqtt_callback+0x8a>
   169e2:	2b05      	cmp	r3, #5
   169e4:	d064      	beq.n	16ab0 <mqtt_callback+0xe0>
   169e6:	2b00      	cmp	r3, #0
   169e8:	d000      	beq.n	169ec <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   169ea:	e067      	b.n	16abc <mqtt_callback+0xec>
            if (data->sock_connected.result >= 0) {
   169ec:	687b      	ldr	r3, [r7, #4]
   169ee:	681b      	ldr	r3, [r3, #0]
   169f0:	2b00      	cmp	r3, #0
   169f2:	db25      	blt.n	16a40 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   169f4:	4b33      	ldr	r3, [pc, #204]	; (16ac4 <mqtt_callback+0xf4>)
   169f6:	0019      	movs	r1, r3
   169f8:	2001      	movs	r0, #1
   169fa:	4b33      	ldr	r3, [pc, #204]	; (16ac8 <mqtt_callback+0xf8>)
   169fc:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   169fe:	4933      	ldr	r1, [pc, #204]	; (16acc <mqtt_callback+0xfc>)
   16a00:	4a33      	ldr	r2, [pc, #204]	; (16ad0 <mqtt_callback+0x100>)
   16a02:	68f8      	ldr	r0, [r7, #12]
   16a04:	2300      	movs	r3, #0
   16a06:	9305      	str	r3, [sp, #20]
   16a08:	2300      	movs	r3, #0
   16a0a:	9304      	str	r3, [sp, #16]
   16a0c:	2300      	movs	r3, #0
   16a0e:	9303      	str	r3, [sp, #12]
   16a10:	2300      	movs	r3, #0
   16a12:	9302      	str	r3, [sp, #8]
   16a14:	2300      	movs	r3, #0
   16a16:	9301      	str	r3, [sp, #4]
   16a18:	4b2d      	ldr	r3, [pc, #180]	; (16ad0 <mqtt_callback+0x100>)
   16a1a:	9300      	str	r3, [sp, #0]
   16a1c:	000b      	movs	r3, r1
   16a1e:	2101      	movs	r1, #1
   16a20:	4c2c      	ldr	r4, [pc, #176]	; (16ad4 <mqtt_callback+0x104>)
   16a22:	47a0      	blx	r4
   16a24:	1e03      	subs	r3, r0, #0
   16a26:	d005      	beq.n	16a34 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   16a28:	4b2b      	ldr	r3, [pc, #172]	; (16ad8 <mqtt_callback+0x108>)
   16a2a:	0019      	movs	r1, r3
   16a2c:	2001      	movs	r0, #1
   16a2e:	4b26      	ldr	r3, [pc, #152]	; (16ac8 <mqtt_callback+0xf8>)
   16a30:	4798      	blx	r3
        } break;
   16a32:	e043      	b.n	16abc <mqtt_callback+0xec>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n\r\n");
   16a34:	4b29      	ldr	r3, [pc, #164]	; (16adc <mqtt_callback+0x10c>)
   16a36:	0019      	movs	r1, r3
   16a38:	2001      	movs	r0, #1
   16a3a:	4b23      	ldr	r3, [pc, #140]	; (16ac8 <mqtt_callback+0xf8>)
   16a3c:	4798      	blx	r3
        } break;
   16a3e:	e03d      	b.n	16abc <mqtt_callback+0xec>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   16a40:	4a27      	ldr	r2, [pc, #156]	; (16ae0 <mqtt_callback+0x110>)
   16a42:	4b28      	ldr	r3, [pc, #160]	; (16ae4 <mqtt_callback+0x114>)
   16a44:	0019      	movs	r1, r3
   16a46:	2001      	movs	r0, #1
   16a48:	4b1f      	ldr	r3, [pc, #124]	; (16ac8 <mqtt_callback+0xf8>)
   16a4a:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   16a4c:	4a24      	ldr	r2, [pc, #144]	; (16ae0 <mqtt_callback+0x110>)
   16a4e:	68fb      	ldr	r3, [r7, #12]
   16a50:	0011      	movs	r1, r2
   16a52:	0018      	movs	r0, r3
   16a54:	4b24      	ldr	r3, [pc, #144]	; (16ae8 <mqtt_callback+0x118>)
   16a56:	4798      	blx	r3
        } break;
   16a58:	e030      	b.n	16abc <mqtt_callback+0xec>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   16a5a:	687b      	ldr	r3, [r7, #4]
   16a5c:	781b      	ldrb	r3, [r3, #0]
   16a5e:	2b00      	cmp	r3, #0
   16a60:	d11d      	bne.n	16a9e <mqtt_callback+0xce>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   16a62:	4b22      	ldr	r3, [pc, #136]	; (16aec <mqtt_callback+0x11c>)
   16a64:	4922      	ldr	r1, [pc, #136]	; (16af0 <mqtt_callback+0x120>)
   16a66:	68f8      	ldr	r0, [r7, #12]
   16a68:	2202      	movs	r2, #2
   16a6a:	4c22      	ldr	r4, [pc, #136]	; (16af4 <mqtt_callback+0x124>)
   16a6c:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   16a6e:	4b22      	ldr	r3, [pc, #136]	; (16af8 <mqtt_callback+0x128>)
   16a70:	4922      	ldr	r1, [pc, #136]	; (16afc <mqtt_callback+0x12c>)
   16a72:	68f8      	ldr	r0, [r7, #12]
   16a74:	2202      	movs	r2, #2
   16a76:	4c1f      	ldr	r4, [pc, #124]	; (16af4 <mqtt_callback+0x124>)
   16a78:	47a0      	blx	r4
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
   16a7a:	4b21      	ldr	r3, [pc, #132]	; (16b00 <mqtt_callback+0x130>)
   16a7c:	4921      	ldr	r1, [pc, #132]	; (16b04 <mqtt_callback+0x134>)
   16a7e:	68f8      	ldr	r0, [r7, #12]
   16a80:	2202      	movs	r2, #2
   16a82:	4c1c      	ldr	r4, [pc, #112]	; (16af4 <mqtt_callback+0x124>)
   16a84:	47a0      	blx	r4
				mqtt_subscribe(module_inst, GPS_TOPIC, 2, SubscribeHandlerGpsTopic); //Derek-GPS
   16a86:	4b20      	ldr	r3, [pc, #128]	; (16b08 <mqtt_callback+0x138>)
   16a88:	4920      	ldr	r1, [pc, #128]	; (16b0c <mqtt_callback+0x13c>)
   16a8a:	68f8      	ldr	r0, [r7, #12]
   16a8c:	2202      	movs	r2, #2
   16a8e:	4c19      	ldr	r4, [pc, #100]	; (16af4 <mqtt_callback+0x124>)
   16a90:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   16a92:	4b1f      	ldr	r3, [pc, #124]	; (16b10 <mqtt_callback+0x140>)
   16a94:	0019      	movs	r1, r3
   16a96:	2001      	movs	r0, #1
   16a98:	4b0b      	ldr	r3, [pc, #44]	; (16ac8 <mqtt_callback+0xf8>)
   16a9a:	4798      	blx	r3
            break;
   16a9c:	e00e      	b.n	16abc <mqtt_callback+0xec>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   16a9e:	687b      	ldr	r3, [r7, #4]
   16aa0:	781b      	ldrb	r3, [r3, #0]
   16aa2:	001a      	movs	r2, r3
   16aa4:	4b1b      	ldr	r3, [pc, #108]	; (16b14 <mqtt_callback+0x144>)
   16aa6:	0019      	movs	r1, r3
   16aa8:	2001      	movs	r0, #1
   16aaa:	4b07      	ldr	r3, [pc, #28]	; (16ac8 <mqtt_callback+0xf8>)
   16aac:	4798      	blx	r3
            break;
   16aae:	e005      	b.n	16abc <mqtt_callback+0xec>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   16ab0:	4b19      	ldr	r3, [pc, #100]	; (16b18 <mqtt_callback+0x148>)
   16ab2:	0019      	movs	r1, r3
   16ab4:	2001      	movs	r0, #1
   16ab6:	4b04      	ldr	r3, [pc, #16]	; (16ac8 <mqtt_callback+0xf8>)
   16ab8:	4798      	blx	r3
            break;
   16aba:	46c0      	nop			; (mov r8, r8)
}
   16abc:	46c0      	nop			; (mov r8, r8)
   16abe:	46bd      	mov	sp, r7
   16ac0:	b005      	add	sp, #20
   16ac2:	bd90      	pop	{r4, r7, pc}
   16ac4:	00036a70 	.word	0x00036a70
   16ac8:	0001ddd1 	.word	0x0001ddd1
   16acc:	00036a8c 	.word	0x00036a8c
   16ad0:	00036a9c 	.word	0x00036a9c
   16ad4:	0002f6c9 	.word	0x0002f6c9
   16ad8:	00036aa8 	.word	0x00036aa8
   16adc:	00036ad0 	.word	0x00036ad0
   16ae0:	000363a0 	.word	0x000363a0
   16ae4:	00036af0 	.word	0x00036af0
   16ae8:	0002f681 	.word	0x0002f681
   16aec:	000167f1 	.word	0x000167f1
   16af0:	00036b28 	.word	0x00036b28
   16af4:	0002f869 	.word	0x0002f869
   16af8:	000166fd 	.word	0x000166fd
   16afc:	00036a4c 	.word	0x00036a4c
   16b00:	00016959 	.word	0x00016959
   16b04:	00036b3c 	.word	0x00036b3c
   16b08:	00016995 	.word	0x00016995
   16b0c:	00036b50 	.word	0x00036b50
   16b10:	00036b64 	.word	0x00036b64
   16b14:	00036b78 	.word	0x00036b78
   16b18:	00036bac 	.word	0x00036bac

00016b1c <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   16b1c:	b580      	push	{r7, lr}
   16b1e:	b088      	sub	sp, #32
   16b20:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   16b22:	1d3b      	adds	r3, r7, #4
   16b24:	0018      	movs	r0, r3
   16b26:	4b1f      	ldr	r3, [pc, #124]	; (16ba4 <configure_mqtt+0x88>)
   16b28:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   16b2a:	1d3b      	adds	r3, r7, #4
   16b2c:	4a1e      	ldr	r2, [pc, #120]	; (16ba8 <configure_mqtt+0x8c>)
   16b2e:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   16b30:	1d3b      	adds	r3, r7, #4
   16b32:	2280      	movs	r2, #128	; 0x80
   16b34:	0092      	lsls	r2, r2, #2
   16b36:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   16b38:	1d3b      	adds	r3, r7, #4
   16b3a:	4a1c      	ldr	r2, [pc, #112]	; (16bac <configure_mqtt+0x90>)
   16b3c:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   16b3e:	1d3b      	adds	r3, r7, #4
   16b40:	2280      	movs	r2, #128	; 0x80
   16b42:	0092      	lsls	r2, r2, #2
   16b44:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   16b46:	1d3b      	adds	r3, r7, #4
   16b48:	4a19      	ldr	r2, [pc, #100]	; (16bb0 <configure_mqtt+0x94>)
   16b4a:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   16b4c:	1d3b      	adds	r3, r7, #4
   16b4e:	4a19      	ldr	r2, [pc, #100]	; (16bb4 <configure_mqtt+0x98>)
   16b50:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   16b52:	1d3a      	adds	r2, r7, #4
   16b54:	4b18      	ldr	r3, [pc, #96]	; (16bb8 <configure_mqtt+0x9c>)
   16b56:	0011      	movs	r1, r2
   16b58:	0018      	movs	r0, r3
   16b5a:	4b18      	ldr	r3, [pc, #96]	; (16bbc <configure_mqtt+0xa0>)
   16b5c:	4798      	blx	r3
   16b5e:	0003      	movs	r3, r0
   16b60:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   16b62:	69fb      	ldr	r3, [r7, #28]
   16b64:	2b00      	cmp	r3, #0
   16b66:	da06      	bge.n	16b76 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   16b68:	69fa      	ldr	r2, [r7, #28]
   16b6a:	4b15      	ldr	r3, [pc, #84]	; (16bc0 <configure_mqtt+0xa4>)
   16b6c:	0019      	movs	r1, r3
   16b6e:	2001      	movs	r0, #1
   16b70:	4b14      	ldr	r3, [pc, #80]	; (16bc4 <configure_mqtt+0xa8>)
   16b72:	4798      	blx	r3
        while (1) {
   16b74:	e7fe      	b.n	16b74 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   16b76:	4a14      	ldr	r2, [pc, #80]	; (16bc8 <configure_mqtt+0xac>)
   16b78:	4b0f      	ldr	r3, [pc, #60]	; (16bb8 <configure_mqtt+0x9c>)
   16b7a:	0011      	movs	r1, r2
   16b7c:	0018      	movs	r0, r3
   16b7e:	4b13      	ldr	r3, [pc, #76]	; (16bcc <configure_mqtt+0xb0>)
   16b80:	4798      	blx	r3
   16b82:	0003      	movs	r3, r0
   16b84:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   16b86:	69fb      	ldr	r3, [r7, #28]
   16b88:	2b00      	cmp	r3, #0
   16b8a:	da06      	bge.n	16b9a <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   16b8c:	69fa      	ldr	r2, [r7, #28]
   16b8e:	4b10      	ldr	r3, [pc, #64]	; (16bd0 <configure_mqtt+0xb4>)
   16b90:	0019      	movs	r1, r3
   16b92:	2001      	movs	r0, #1
   16b94:	4b0b      	ldr	r3, [pc, #44]	; (16bc4 <configure_mqtt+0xa8>)
   16b96:	4798      	blx	r3
        while (1) {
   16b98:	e7fe      	b.n	16b98 <configure_mqtt+0x7c>
        }
    }
}
   16b9a:	46c0      	nop			; (mov r8, r8)
   16b9c:	46bd      	mov	sp, r7
   16b9e:	b008      	add	sp, #32
   16ba0:	bd80      	pop	{r7, pc}
   16ba2:	46c0      	nop			; (mov r8, r8)
   16ba4:	0002f5c1 	.word	0x0002f5c1
   16ba8:	200008cc 	.word	0x200008cc
   16bac:	20000acc 	.word	0x20000acc
   16bb0:	0000075b 	.word	0x0000075b
   16bb4:	00001770 	.word	0x00001770
   16bb8:	20000894 	.word	0x20000894
   16bbc:	0002f511 	.word	0x0002f511
   16bc0:	00036bc0 	.word	0x00036bc0
   16bc4:	0001ddd1 	.word	0x0001ddd1
   16bc8:	000169d1 	.word	0x000169d1
   16bcc:	0002f601 	.word	0x0002f601
   16bd0:	00036bf4 	.word	0x00036bf4

00016bd4 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   16bd4:	b580      	push	{r7, lr}
   16bd6:	b084      	sub	sp, #16
   16bd8:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   16bda:	1d3b      	adds	r3, r7, #4
   16bdc:	0018      	movs	r0, r3
   16bde:	4b0b      	ldr	r3, [pc, #44]	; (16c0c <configure_extint_channel+0x38>)
   16be0:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   16be2:	1d3b      	adds	r3, r7, #4
   16be4:	2237      	movs	r2, #55	; 0x37
   16be6:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   16be8:	1d3b      	adds	r3, r7, #4
   16bea:	2200      	movs	r2, #0
   16bec:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   16bee:	1d3b      	adds	r3, r7, #4
   16bf0:	2201      	movs	r2, #1
   16bf2:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   16bf4:	1d3b      	adds	r3, r7, #4
   16bf6:	2202      	movs	r2, #2
   16bf8:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   16bfa:	1d3b      	adds	r3, r7, #4
   16bfc:	0019      	movs	r1, r3
   16bfe:	2007      	movs	r0, #7
   16c00:	4b03      	ldr	r3, [pc, #12]	; (16c10 <configure_extint_channel+0x3c>)
   16c02:	4798      	blx	r3
}
   16c04:	46c0      	nop			; (mov r8, r8)
   16c06:	46bd      	mov	sp, r7
   16c08:	b004      	add	sp, #16
   16c0a:	bd80      	pop	{r7, pc}
   16c0c:	000266f9 	.word	0x000266f9
   16c10:	0002672d 	.word	0x0002672d

00016c14 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   16c14:	b580      	push	{r7, lr}
   16c16:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   16c18:	4b06      	ldr	r3, [pc, #24]	; (16c34 <configure_extint_callbacks+0x20>)
   16c1a:	2200      	movs	r2, #0
   16c1c:	2107      	movs	r1, #7
   16c1e:	0018      	movs	r0, r3
   16c20:	4b05      	ldr	r3, [pc, #20]	; (16c38 <configure_extint_callbacks+0x24>)
   16c22:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   16c24:	2100      	movs	r1, #0
   16c26:	2007      	movs	r0, #7
   16c28:	4b04      	ldr	r3, [pc, #16]	; (16c3c <configure_extint_callbacks+0x28>)
   16c2a:	4798      	blx	r3
}
   16c2c:	46c0      	nop			; (mov r8, r8)
   16c2e:	46bd      	mov	sp, r7
   16c30:	bd80      	pop	{r7, pc}
   16c32:	46c0      	nop			; (mov r8, r8)
   16c34:	00016c41 	.word	0x00016c41
   16c38:	000262f9 	.word	0x000262f9
   16c3c:	0002635d 	.word	0x0002635d

00016c40 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   16c40:	b5b0      	push	{r4, r5, r7, lr}
   16c42:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   16c44:	4b0c      	ldr	r3, [pc, #48]	; (16c78 <extint_detection_callback+0x38>)
   16c46:	681b      	ldr	r3, [r3, #0]
   16c48:	1c5a      	adds	r2, r3, #1
   16c4a:	4b0b      	ldr	r3, [pc, #44]	; (16c78 <extint_detection_callback+0x38>)
   16c4c:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   16c4e:	4b0a      	ldr	r3, [pc, #40]	; (16c78 <extint_detection_callback+0x38>)
   16c50:	681b      	ldr	r3, [r3, #0]
   16c52:	2b28      	cmp	r3, #40	; 0x28
   16c54:	d902      	bls.n	16c5c <extint_detection_callback+0x1c>
   16c56:	4b08      	ldr	r3, [pc, #32]	; (16c78 <extint_detection_callback+0x38>)
   16c58:	2201      	movs	r2, #1
   16c5a:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   16c5c:	4b06      	ldr	r3, [pc, #24]	; (16c78 <extint_detection_callback+0x38>)
   16c5e:	681b      	ldr	r3, [r3, #0]
   16c60:	4a06      	ldr	r2, [pc, #24]	; (16c7c <extint_detection_callback+0x3c>)
   16c62:	4807      	ldr	r0, [pc, #28]	; (16c80 <extint_detection_callback+0x40>)
   16c64:	213f      	movs	r1, #63	; 0x3f
   16c66:	4c07      	ldr	r4, [pc, #28]	; (16c84 <extint_detection_callback+0x44>)
   16c68:	47a0      	blx	r4
    isPressed = true;
   16c6a:	4b07      	ldr	r3, [pc, #28]	; (16c88 <extint_detection_callback+0x48>)
   16c6c:	2201      	movs	r2, #1
   16c6e:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   16c70:	46c0      	nop			; (mov r8, r8)
   16c72:	46bd      	mov	sp, r7
   16c74:	bdb0      	pop	{r4, r5, r7, pc}
   16c76:	46c0      	nop			; (mov r8, r8)
   16c78:	200000b0 	.word	0x200000b0
   16c7c:	00036c28 	.word	0x00036c28
   16c80:	20000070 	.word	0x20000070
   16c84:	00034add 	.word	0x00034add
   16c88:	20000ccc 	.word	0x20000ccc

00016c8c <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   16c8c:	b580      	push	{r7, lr}
   16c8e:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   16c90:	4a15      	ldr	r2, [pc, #84]	; (16ce8 <HTTP_DownloadFileInit+0x5c>)
   16c92:	4b16      	ldr	r3, [pc, #88]	; (16cec <HTTP_DownloadFileInit+0x60>)
   16c94:	0011      	movs	r1, r2
   16c96:	0018      	movs	r0, r3
   16c98:	4b15      	ldr	r3, [pc, #84]	; (16cf0 <HTTP_DownloadFileInit+0x64>)
   16c9a:	4798      	blx	r3
   16c9c:	1e03      	subs	r3, r0, #0
   16c9e:	d008      	beq.n	16cb2 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   16ca0:	4b14      	ldr	r3, [pc, #80]	; (16cf4 <HTTP_DownloadFileInit+0x68>)
   16ca2:	0019      	movs	r1, r3
   16ca4:	2001      	movs	r0, #1
   16ca6:	4b14      	ldr	r3, [pc, #80]	; (16cf8 <HTTP_DownloadFileInit+0x6c>)
   16ca8:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   16caa:	e002      	b.n	16cb2 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   16cac:	2000      	movs	r0, #0
   16cae:	4b13      	ldr	r3, [pc, #76]	; (16cfc <HTTP_DownloadFileInit+0x70>)
   16cb0:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   16cb2:	4b0e      	ldr	r3, [pc, #56]	; (16cec <HTTP_DownloadFileInit+0x60>)
   16cb4:	2234      	movs	r2, #52	; 0x34
   16cb6:	5c9b      	ldrb	r3, [r3, r2]
   16cb8:	2b00      	cmp	r3, #0
   16cba:	d1f7      	bne.n	16cac <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   16cbc:	4b10      	ldr	r3, [pc, #64]	; (16d00 <HTTP_DownloadFileInit+0x74>)
   16cbe:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   16cc0:	4b10      	ldr	r3, [pc, #64]	; (16d04 <HTTP_DownloadFileInit+0x78>)
   16cc2:	2201      	movs	r2, #1
   16cc4:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   16cc6:	4a10      	ldr	r2, [pc, #64]	; (16d08 <HTTP_DownloadFileInit+0x7c>)
   16cc8:	4b10      	ldr	r3, [pc, #64]	; (16d0c <HTTP_DownloadFileInit+0x80>)
   16cca:	0011      	movs	r1, r2
   16ccc:	0018      	movs	r0, r3
   16cce:	4b10      	ldr	r3, [pc, #64]	; (16d10 <HTTP_DownloadFileInit+0x84>)
   16cd0:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   16cd2:	4b10      	ldr	r3, [pc, #64]	; (16d14 <HTTP_DownloadFileInit+0x88>)
   16cd4:	4798      	blx	r3

    start_download();
   16cd6:	4b10      	ldr	r3, [pc, #64]	; (16d18 <HTTP_DownloadFileInit+0x8c>)
   16cd8:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   16cda:	4b10      	ldr	r3, [pc, #64]	; (16d1c <HTTP_DownloadFileInit+0x90>)
   16cdc:	2203      	movs	r2, #3
   16cde:	701a      	strb	r2, [r3, #0]
}
   16ce0:	46c0      	nop			; (mov r8, r8)
   16ce2:	46bd      	mov	sp, r7
   16ce4:	bd80      	pop	{r7, pc}
   16ce6:	46c0      	nop			; (mov r8, r8)
   16ce8:	000363a0 	.word	0x000363a0
   16cec:	20000894 	.word	0x20000894
   16cf0:	0002f7b5 	.word	0x0002f7b5
   16cf4:	000367b0 	.word	0x000367b0
   16cf8:	0001ddd1 	.word	0x0001ddd1
   16cfc:	00021de9 	.word	0x00021de9
   16d00:	000253a5 	.word	0x000253a5
   16d04:	20000634 	.word	0x20000634
   16d08:	0001634d 	.word	0x0001634d
   16d0c:	00016319 	.word	0x00016319
   16d10:	000253ed 	.word	0x000253ed
   16d14:	00025355 	.word	0x00025355
   16d18:	00015f41 	.word	0x00015f41
   16d1c:	20000620 	.word	0x20000620

00016d20 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   16d20:	b590      	push	{r4, r7, lr}
   16d22:	b085      	sub	sp, #20
   16d24:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16d26:	e009      	b.n	16d3c <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   16d28:	2000      	movs	r0, #0
   16d2a:	4b2a      	ldr	r3, [pc, #168]	; (16dd4 <HTTP_DownloadFileTransaction+0xb4>)
   16d2c:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   16d2e:	4b2a      	ldr	r3, [pc, #168]	; (16dd8 <HTTP_DownloadFileTransaction+0xb8>)
   16d30:	0018      	movs	r0, r3
   16d32:	4b2a      	ldr	r3, [pc, #168]	; (16ddc <HTTP_DownloadFileTransaction+0xbc>)
   16d34:	4798      	blx	r3
        vTaskDelay(5);
   16d36:	2005      	movs	r0, #5
   16d38:	4b29      	ldr	r3, [pc, #164]	; (16de0 <HTTP_DownloadFileTransaction+0xc0>)
   16d3a:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16d3c:	2010      	movs	r0, #16
   16d3e:	4b29      	ldr	r3, [pc, #164]	; (16de4 <HTTP_DownloadFileTransaction+0xc4>)
   16d40:	4798      	blx	r3
   16d42:	0003      	movs	r3, r0
   16d44:	001a      	movs	r2, r3
   16d46:	2301      	movs	r3, #1
   16d48:	4053      	eors	r3, r2
   16d4a:	b2db      	uxtb	r3, r3
   16d4c:	2b00      	cmp	r3, #0
   16d4e:	d009      	beq.n	16d64 <HTTP_DownloadFileTransaction+0x44>
   16d50:	2020      	movs	r0, #32
   16d52:	4b24      	ldr	r3, [pc, #144]	; (16de4 <HTTP_DownloadFileTransaction+0xc4>)
   16d54:	4798      	blx	r3
   16d56:	0003      	movs	r3, r0
   16d58:	001a      	movs	r2, r3
   16d5a:	2301      	movs	r3, #1
   16d5c:	4053      	eors	r3, r2
   16d5e:	b2db      	uxtb	r3, r3
   16d60:	2b00      	cmp	r3, #0
   16d62:	d1e1      	bne.n	16d28 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   16d64:	4b20      	ldr	r3, [pc, #128]	; (16de8 <HTTP_DownloadFileTransaction+0xc8>)
   16d66:	4798      	blx	r3
    vTaskDelay(1000);
   16d68:	23fa      	movs	r3, #250	; 0xfa
   16d6a:	009b      	lsls	r3, r3, #2
   16d6c:	0018      	movs	r0, r3
   16d6e:	4b1c      	ldr	r3, [pc, #112]	; (16de0 <HTTP_DownloadFileTransaction+0xc0>)
   16d70:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   16d72:	4b1e      	ldr	r3, [pc, #120]	; (16dec <HTTP_DownloadFileTransaction+0xcc>)
   16d74:	2200      	movs	r2, #0
   16d76:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   16d78:	003b      	movs	r3, r7
   16d7a:	4a1d      	ldr	r2, [pc, #116]	; (16df0 <HTTP_DownloadFileTransaction+0xd0>)
   16d7c:	ca13      	ldmia	r2!, {r0, r1, r4}
   16d7e:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16d80:	003b      	movs	r3, r7
   16d82:	2230      	movs	r2, #48	; 0x30
   16d84:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   16d86:	230f      	movs	r3, #15
   16d88:	18fc      	adds	r4, r7, r3
   16d8a:	0039      	movs	r1, r7
   16d8c:	4b19      	ldr	r3, [pc, #100]	; (16df4 <HTTP_DownloadFileTransaction+0xd4>)
   16d8e:	220a      	movs	r2, #10
   16d90:	0018      	movs	r0, r3
   16d92:	4b19      	ldr	r3, [pc, #100]	; (16df8 <HTTP_DownloadFileTransaction+0xd8>)
   16d94:	4798      	blx	r3
   16d96:	0003      	movs	r3, r0
   16d98:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   16d9a:	230f      	movs	r3, #15
   16d9c:	18fb      	adds	r3, r7, r3
   16d9e:	781b      	ldrb	r3, [r3, #0]
   16da0:	2b00      	cmp	r3, #0
   16da2:	d008      	beq.n	16db6 <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   16da4:	230f      	movs	r3, #15
   16da6:	18fb      	adds	r3, r7, r3
   16da8:	781a      	ldrb	r2, [r3, #0]
   16daa:	4b14      	ldr	r3, [pc, #80]	; (16dfc <HTTP_DownloadFileTransaction+0xdc>)
   16dac:	0019      	movs	r1, r3
   16dae:	2000      	movs	r0, #0
   16db0:	4b13      	ldr	r3, [pc, #76]	; (16e00 <HTTP_DownloadFileTransaction+0xe0>)
   16db2:	4798      	blx	r3
   16db4:	e003      	b.n	16dbe <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   16db6:	4b13      	ldr	r3, [pc, #76]	; (16e04 <HTTP_DownloadFileTransaction+0xe4>)
   16db8:	0018      	movs	r0, r3
   16dba:	4b13      	ldr	r3, [pc, #76]	; (16e08 <HTTP_DownloadFileTransaction+0xe8>)
   16dbc:	4798      	blx	r3
    }
	
	f_close(&file_object);
   16dbe:	4b0d      	ldr	r3, [pc, #52]	; (16df4 <HTTP_DownloadFileTransaction+0xd4>)
   16dc0:	0018      	movs	r0, r3
   16dc2:	4b12      	ldr	r3, [pc, #72]	; (16e0c <HTTP_DownloadFileTransaction+0xec>)
   16dc4:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   16dc6:	4b12      	ldr	r3, [pc, #72]	; (16e10 <HTTP_DownloadFileTransaction+0xf0>)
   16dc8:	2200      	movs	r2, #0
   16dca:	701a      	strb	r2, [r3, #0]
}
   16dcc:	46c0      	nop			; (mov r8, r8)
   16dce:	46bd      	mov	sp, r7
   16dd0:	b005      	add	sp, #20
   16dd2:	bd90      	pop	{r4, r7, pc}
   16dd4:	00021de9 	.word	0x00021de9
   16dd8:	200048ac 	.word	0x200048ac
   16ddc:	000324dd 	.word	0x000324dd
   16de0:	0001c091 	.word	0x0001c091
   16de4:	00015c19 	.word	0x00015c19
   16de8:	000253a5 	.word	0x000253a5
   16dec:	20000634 	.word	0x20000634
   16df0:	00036c60 	.word	0x00036c60
   16df4:	20000868 	.word	0x20000868
   16df8:	0002d7a5 	.word	0x0002d7a5
   16dfc:	00036c3c 	.word	0x00036c3c
   16e00:	0001ddd1 	.word	0x0001ddd1
   16e04:	00036c4c 	.word	0x00036c4c
   16e08:	0001dce5 	.word	0x0001dce5
   16e0c:	0002e1a5 	.word	0x0002e1a5
   16e10:	20000620 	.word	0x20000620

00016e14 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   16e14:	b580      	push	{r7, lr}
   16e16:	af00      	add	r7, sp, #0
    socketDeinit();
   16e18:	4b18      	ldr	r3, [pc, #96]	; (16e7c <MQTT_InitRoutine+0x68>)
   16e1a:	4798      	blx	r3
    configure_mqtt();
   16e1c:	4b18      	ldr	r3, [pc, #96]	; (16e80 <MQTT_InitRoutine+0x6c>)
   16e1e:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   16e20:	4a18      	ldr	r2, [pc, #96]	; (16e84 <MQTT_InitRoutine+0x70>)
   16e22:	4b19      	ldr	r3, [pc, #100]	; (16e88 <MQTT_InitRoutine+0x74>)
   16e24:	0011      	movs	r1, r2
   16e26:	0018      	movs	r0, r3
   16e28:	4b18      	ldr	r3, [pc, #96]	; (16e8c <MQTT_InitRoutine+0x78>)
   16e2a:	4798      	blx	r3
    socketInit();
   16e2c:	4b18      	ldr	r3, [pc, #96]	; (16e90 <MQTT_InitRoutine+0x7c>)
   16e2e:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   16e30:	4b18      	ldr	r3, [pc, #96]	; (16e94 <MQTT_InitRoutine+0x80>)
   16e32:	2234      	movs	r2, #52	; 0x34
   16e34:	5c9b      	ldrb	r3, [r3, r2]
   16e36:	2201      	movs	r2, #1
   16e38:	4053      	eors	r3, r2
   16e3a:	b2db      	uxtb	r3, r3
   16e3c:	2b00      	cmp	r3, #0
   16e3e:	d00c      	beq.n	16e5a <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   16e40:	4a15      	ldr	r2, [pc, #84]	; (16e98 <MQTT_InitRoutine+0x84>)
   16e42:	4b14      	ldr	r3, [pc, #80]	; (16e94 <MQTT_InitRoutine+0x80>)
   16e44:	0011      	movs	r1, r2
   16e46:	0018      	movs	r0, r3
   16e48:	4b14      	ldr	r3, [pc, #80]	; (16e9c <MQTT_InitRoutine+0x88>)
   16e4a:	4798      	blx	r3
   16e4c:	1e03      	subs	r3, r0, #0
   16e4e:	d004      	beq.n	16e5a <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   16e50:	4b13      	ldr	r3, [pc, #76]	; (16ea0 <MQTT_InitRoutine+0x8c>)
   16e52:	0019      	movs	r1, r3
   16e54:	2001      	movs	r0, #1
   16e56:	4b13      	ldr	r3, [pc, #76]	; (16ea4 <MQTT_InitRoutine+0x90>)
   16e58:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   16e5a:	4b0e      	ldr	r3, [pc, #56]	; (16e94 <MQTT_InitRoutine+0x80>)
   16e5c:	2234      	movs	r2, #52	; 0x34
   16e5e:	5c9b      	ldrb	r3, [r3, r2]
   16e60:	2b00      	cmp	r3, #0
   16e62:	d004      	beq.n	16e6e <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n\r\n");
   16e64:	4b10      	ldr	r3, [pc, #64]	; (16ea8 <MQTT_InitRoutine+0x94>)
   16e66:	0019      	movs	r1, r3
   16e68:	2001      	movs	r0, #1
   16e6a:	4b0e      	ldr	r3, [pc, #56]	; (16ea4 <MQTT_InitRoutine+0x90>)
   16e6c:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   16e6e:	4b0f      	ldr	r3, [pc, #60]	; (16eac <MQTT_InitRoutine+0x98>)
   16e70:	2201      	movs	r2, #1
   16e72:	701a      	strb	r2, [r3, #0]
}
   16e74:	46c0      	nop			; (mov r8, r8)
   16e76:	46bd      	mov	sp, r7
   16e78:	bd80      	pop	{r7, pc}
   16e7a:	46c0      	nop			; (mov r8, r8)
   16e7c:	000253a5 	.word	0x000253a5
   16e80:	00016b1d 	.word	0x00016b1d
   16e84:	000166d9 	.word	0x000166d9
   16e88:	000166a5 	.word	0x000166a5
   16e8c:	000253ed 	.word	0x000253ed
   16e90:	00025355 	.word	0x00025355
   16e94:	20000894 	.word	0x20000894
   16e98:	000363a0 	.word	0x000363a0
   16e9c:	0002f681 	.word	0x0002f681
   16ea0:	000367b0 	.word	0x000367b0
   16ea4:	0001ddd1 	.word	0x0001ddd1
   16ea8:	00036c6c 	.word	0x00036c6c
   16eac:	20000620 	.word	0x20000620

00016eb0 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   16eb0:	b580      	push	{r7, lr}
   16eb2:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   16eb4:	2000      	movs	r0, #0
   16eb6:	4b0c      	ldr	r3, [pc, #48]	; (16ee8 <MQTT_HandleTransactions+0x38>)
   16eb8:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   16eba:	4b0c      	ldr	r3, [pc, #48]	; (16eec <MQTT_HandleTransactions+0x3c>)
   16ebc:	0018      	movs	r0, r3
   16ebe:	4b0c      	ldr	r3, [pc, #48]	; (16ef0 <MQTT_HandleTransactions+0x40>)
   16ec0:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   16ec2:	4b0c      	ldr	r3, [pc, #48]	; (16ef4 <MQTT_HandleTransactions+0x44>)
   16ec4:	4798      	blx	r3
    MQTT_HandleImuMessages();
   16ec6:	4b0c      	ldr	r3, [pc, #48]	; (16ef8 <MQTT_HandleTransactions+0x48>)
   16ec8:	4798      	blx	r3
	MQTT_HandleGpsMessages(); //Derek-GPS
   16eca:	4b0c      	ldr	r3, [pc, #48]	; (16efc <MQTT_HandleTransactions+0x4c>)
   16ecc:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   16ece:	4b0c      	ldr	r3, [pc, #48]	; (16f00 <MQTT_HandleTransactions+0x50>)
   16ed0:	2234      	movs	r2, #52	; 0x34
   16ed2:	5c9b      	ldrb	r3, [r3, r2]
   16ed4:	2b00      	cmp	r3, #0
   16ed6:	d004      	beq.n	16ee2 <MQTT_HandleTransactions+0x32>
   16ed8:	4b09      	ldr	r3, [pc, #36]	; (16f00 <MQTT_HandleTransactions+0x50>)
   16eda:	2164      	movs	r1, #100	; 0x64
   16edc:	0018      	movs	r0, r3
   16ede:	4b09      	ldr	r3, [pc, #36]	; (16f04 <MQTT_HandleTransactions+0x54>)
   16ee0:	4798      	blx	r3
}
   16ee2:	46c0      	nop			; (mov r8, r8)
   16ee4:	46bd      	mov	sp, r7
   16ee6:	bd80      	pop	{r7, pc}
   16ee8:	00021de9 	.word	0x00021de9
   16eec:	200048ac 	.word	0x200048ac
   16ef0:	000324dd 	.word	0x000324dd
   16ef4:	0001702d 	.word	0x0001702d
   16ef8:	00016f09 	.word	0x00016f09
   16efc:	00016f95 	.word	0x00016f95
   16f00:	20000894 	.word	0x20000894
   16f04:	0002f8b1 	.word	0x0002f8b1

00016f08 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   16f08:	b590      	push	{r4, r7, lr}
   16f0a:	b085      	sub	sp, #20
   16f0c:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   16f0e:	4b18      	ldr	r3, [pc, #96]	; (16f70 <MQTT_HandleImuMessages+0x68>)
   16f10:	681b      	ldr	r3, [r3, #0]
   16f12:	0039      	movs	r1, r7
   16f14:	2200      	movs	r2, #0
   16f16:	0018      	movs	r0, r3
   16f18:	4b16      	ldr	r3, [pc, #88]	; (16f74 <MQTT_HandleImuMessages+0x6c>)
   16f1a:	4798      	blx	r3
   16f1c:	0003      	movs	r3, r0
   16f1e:	2b01      	cmp	r3, #1
   16f20:	d121      	bne.n	16f66 <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   16f22:	003b      	movs	r3, r7
   16f24:	2200      	movs	r2, #0
   16f26:	5e9b      	ldrsh	r3, [r3, r2]
   16f28:	001c      	movs	r4, r3
   16f2a:	003b      	movs	r3, r7
   16f2c:	2202      	movs	r2, #2
   16f2e:	5e9b      	ldrsh	r3, [r3, r2]
   16f30:	0019      	movs	r1, r3
   16f32:	003b      	movs	r3, r7
   16f34:	2204      	movs	r2, #4
   16f36:	5e9b      	ldrsh	r3, [r3, r2]
   16f38:	4a0f      	ldr	r2, [pc, #60]	; (16f78 <MQTT_HandleImuMessages+0x70>)
   16f3a:	4810      	ldr	r0, [pc, #64]	; (16f7c <MQTT_HandleImuMessages+0x74>)
   16f3c:	9301      	str	r3, [sp, #4]
   16f3e:	9100      	str	r1, [sp, #0]
   16f40:	0023      	movs	r3, r4
   16f42:	213f      	movs	r1, #63	; 0x3f
   16f44:	4c0e      	ldr	r4, [pc, #56]	; (16f80 <MQTT_HandleImuMessages+0x78>)
   16f46:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   16f48:	4b0c      	ldr	r3, [pc, #48]	; (16f7c <MQTT_HandleImuMessages+0x74>)
   16f4a:	0018      	movs	r0, r3
   16f4c:	4b0d      	ldr	r3, [pc, #52]	; (16f84 <MQTT_HandleImuMessages+0x7c>)
   16f4e:	4798      	blx	r3
   16f50:	0004      	movs	r4, r0
   16f52:	4a0a      	ldr	r2, [pc, #40]	; (16f7c <MQTT_HandleImuMessages+0x74>)
   16f54:	490c      	ldr	r1, [pc, #48]	; (16f88 <MQTT_HandleImuMessages+0x80>)
   16f56:	480d      	ldr	r0, [pc, #52]	; (16f8c <MQTT_HandleImuMessages+0x84>)
   16f58:	2300      	movs	r3, #0
   16f5a:	9301      	str	r3, [sp, #4]
   16f5c:	2301      	movs	r3, #1
   16f5e:	9300      	str	r3, [sp, #0]
   16f60:	0023      	movs	r3, r4
   16f62:	4c0b      	ldr	r4, [pc, #44]	; (16f90 <MQTT_HandleImuMessages+0x88>)
   16f64:	47a0      	blx	r4
    }
}
   16f66:	46c0      	nop			; (mov r8, r8)
   16f68:	46bd      	mov	sp, r7
   16f6a:	b003      	add	sp, #12
   16f6c:	bd90      	pop	{r4, r7, pc}
   16f6e:	46c0      	nop			; (mov r8, r8)
   16f70:	2000062c 	.word	0x2000062c
   16f74:	0001aee5 	.word	0x0001aee5
   16f78:	00036c8c 	.word	0x00036c8c
   16f7c:	20000030 	.word	0x20000030
   16f80:	00034add 	.word	0x00034add
   16f84:	00034c3b 	.word	0x00034c3b
   16f88:	00036b3c 	.word	0x00036b3c
   16f8c:	20000894 	.word	0x20000894
   16f90:	0002f7fd 	.word	0x0002f7fd

00016f94 <MQTT_HandleGpsMessages>:

static void MQTT_HandleGpsMessages(void) //Derek-GPS, used in MQTT_HandleTransactions()
{
   16f94:	b5b0      	push	{r4, r5, r7, lr}
   16f96:	b086      	sub	sp, #24
   16f98:	af04      	add	r7, sp, #16
	struct GpsDataPacket gpsDataVar;
	if (pdPASS == xQueueReceive(xQueueImuBuffer, &gpsDataVar, 0)) {
   16f9a:	4b1a      	ldr	r3, [pc, #104]	; (17004 <MQTT_HandleGpsMessages+0x70>)
   16f9c:	681b      	ldr	r3, [r3, #0]
   16f9e:	0039      	movs	r1, r7
   16fa0:	2200      	movs	r2, #0
   16fa2:	0018      	movs	r0, r3
   16fa4:	4b18      	ldr	r3, [pc, #96]	; (17008 <MQTT_HandleGpsMessages+0x74>)
   16fa6:	4798      	blx	r3
   16fa8:	0003      	movs	r3, r0
   16faa:	2b01      	cmp	r3, #1
   16fac:	d126      	bne.n	16ffc <MQTT_HandleGpsMessages+0x68>
		snprintf(mqtt_msg, 63, "{\"name\":\"derek\", \"lat\": %f, \"lon\": %f}", gpsDataVar.lat, gpsDataVar.lon);
   16fae:	003b      	movs	r3, r7
   16fb0:	681a      	ldr	r2, [r3, #0]
   16fb2:	4b16      	ldr	r3, [pc, #88]	; (1700c <MQTT_HandleGpsMessages+0x78>)
   16fb4:	1c10      	adds	r0, r2, #0
   16fb6:	4798      	blx	r3
   16fb8:	0004      	movs	r4, r0
   16fba:	000d      	movs	r5, r1
   16fbc:	003b      	movs	r3, r7
   16fbe:	685a      	ldr	r2, [r3, #4]
   16fc0:	4b12      	ldr	r3, [pc, #72]	; (1700c <MQTT_HandleGpsMessages+0x78>)
   16fc2:	1c10      	adds	r0, r2, #0
   16fc4:	4798      	blx	r3
   16fc6:	0002      	movs	r2, r0
   16fc8:	000b      	movs	r3, r1
   16fca:	4911      	ldr	r1, [pc, #68]	; (17010 <MQTT_HandleGpsMessages+0x7c>)
   16fcc:	4811      	ldr	r0, [pc, #68]	; (17014 <MQTT_HandleGpsMessages+0x80>)
   16fce:	9202      	str	r2, [sp, #8]
   16fd0:	9303      	str	r3, [sp, #12]
   16fd2:	9400      	str	r4, [sp, #0]
   16fd4:	9501      	str	r5, [sp, #4]
   16fd6:	000a      	movs	r2, r1
   16fd8:	213f      	movs	r1, #63	; 0x3f
   16fda:	4b0f      	ldr	r3, [pc, #60]	; (17018 <MQTT_HandleGpsMessages+0x84>)
   16fdc:	4798      	blx	r3
		mqtt_publish(&mqtt_inst, GPS_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   16fde:	4b0d      	ldr	r3, [pc, #52]	; (17014 <MQTT_HandleGpsMessages+0x80>)
   16fe0:	0018      	movs	r0, r3
   16fe2:	4b0e      	ldr	r3, [pc, #56]	; (1701c <MQTT_HandleGpsMessages+0x88>)
   16fe4:	4798      	blx	r3
   16fe6:	0004      	movs	r4, r0
   16fe8:	4a0a      	ldr	r2, [pc, #40]	; (17014 <MQTT_HandleGpsMessages+0x80>)
   16fea:	490d      	ldr	r1, [pc, #52]	; (17020 <MQTT_HandleGpsMessages+0x8c>)
   16fec:	480d      	ldr	r0, [pc, #52]	; (17024 <MQTT_HandleGpsMessages+0x90>)
   16fee:	2300      	movs	r3, #0
   16ff0:	9301      	str	r3, [sp, #4]
   16ff2:	2301      	movs	r3, #1
   16ff4:	9300      	str	r3, [sp, #0]
   16ff6:	0023      	movs	r3, r4
   16ff8:	4c0b      	ldr	r4, [pc, #44]	; (17028 <MQTT_HandleGpsMessages+0x94>)
   16ffa:	47a0      	blx	r4
	}
}
   16ffc:	46c0      	nop			; (mov r8, r8)
   16ffe:	46bd      	mov	sp, r7
   17000:	b002      	add	sp, #8
   17002:	bdb0      	pop	{r4, r5, r7, pc}
   17004:	2000062c 	.word	0x2000062c
   17008:	0001aee5 	.word	0x0001aee5
   1700c:	000346f1 	.word	0x000346f1
   17010:	00036cb0 	.word	0x00036cb0
   17014:	20000030 	.word	0x20000030
   17018:	00034add 	.word	0x00034add
   1701c:	00034c3b 	.word	0x00034c3b
   17020:	00036b50 	.word	0x00036b50
   17024:	20000894 	.word	0x20000894
   17028:	0002f7fd 	.word	0x0002f7fd

0001702c <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
   1702c:	b590      	push	{r4, r7, lr}
   1702e:	b08b      	sub	sp, #44	; 0x2c
   17030:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   17032:	4b39      	ldr	r3, [pc, #228]	; (17118 <MQTT_HandleGameMessages+0xec>)
   17034:	681b      	ldr	r3, [r3, #0]
   17036:	2208      	movs	r2, #8
   17038:	18b9      	adds	r1, r7, r2
   1703a:	2200      	movs	r2, #0
   1703c:	0018      	movs	r0, r3
   1703e:	4b37      	ldr	r3, [pc, #220]	; (1711c <MQTT_HandleGameMessages+0xf0>)
   17040:	4798      	blx	r3
   17042:	0003      	movs	r3, r0
   17044:	2b01      	cmp	r3, #1
   17046:	d163      	bne.n	17110 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   17048:	4b35      	ldr	r3, [pc, #212]	; (17120 <MQTT_HandleGameMessages+0xf4>)
   1704a:	4a36      	ldr	r2, [pc, #216]	; (17124 <MQTT_HandleGameMessages+0xf8>)
   1704c:	ca03      	ldmia	r2!, {r0, r1}
   1704e:	c303      	stmia	r3!, {r0, r1}
   17050:	8812      	ldrh	r2, [r2, #0]
   17052:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   17054:	2300      	movs	r3, #0
   17056:	61fb      	str	r3, [r7, #28]
   17058:	e02d      	b.n	170b6 <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   1705a:	2308      	movs	r3, #8
   1705c:	18fa      	adds	r2, r7, r3
   1705e:	69fb      	ldr	r3, [r7, #28]
   17060:	18d3      	adds	r3, r2, r3
   17062:	781b      	ldrb	r3, [r3, #0]
   17064:	2bff      	cmp	r3, #255	; 0xff
   17066:	d02a      	beq.n	170be <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   17068:	2308      	movs	r3, #8
   1706a:	18fa      	adds	r2, r7, r3
   1706c:	69fb      	ldr	r3, [r7, #28]
   1706e:	18d3      	adds	r3, r2, r3
   17070:	781b      	ldrb	r3, [r3, #0]
   17072:	4a2d      	ldr	r2, [pc, #180]	; (17128 <MQTT_HandleGameMessages+0xfc>)
   17074:	0038      	movs	r0, r7
   17076:	2103      	movs	r1, #3
   17078:	4c2c      	ldr	r4, [pc, #176]	; (1712c <MQTT_HandleGameMessages+0x100>)
   1707a:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   1707c:	003a      	movs	r2, r7
   1707e:	4b28      	ldr	r3, [pc, #160]	; (17120 <MQTT_HandleGameMessages+0xf4>)
   17080:	0011      	movs	r1, r2
   17082:	0018      	movs	r0, r3
   17084:	4b2a      	ldr	r3, [pc, #168]	; (17130 <MQTT_HandleGameMessages+0x104>)
   17086:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   17088:	69fb      	ldr	r3, [r7, #28]
   1708a:	3301      	adds	r3, #1
   1708c:	2208      	movs	r2, #8
   1708e:	18ba      	adds	r2, r7, r2
   17090:	5cd3      	ldrb	r3, [r2, r3]
   17092:	2bff      	cmp	r3, #255	; 0xff
   17094:	d00c      	beq.n	170b0 <MQTT_HandleGameMessages+0x84>
   17096:	69fb      	ldr	r3, [r7, #28]
   17098:	3301      	adds	r3, #1
   1709a:	2b13      	cmp	r3, #19
   1709c:	dc08      	bgt.n	170b0 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   1709e:	003b      	movs	r3, r7
   170a0:	222c      	movs	r2, #44	; 0x2c
   170a2:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   170a4:	003a      	movs	r2, r7
   170a6:	4b1e      	ldr	r3, [pc, #120]	; (17120 <MQTT_HandleGameMessages+0xf4>)
   170a8:	0011      	movs	r1, r2
   170aa:	0018      	movs	r0, r3
   170ac:	4b20      	ldr	r3, [pc, #128]	; (17130 <MQTT_HandleGameMessages+0x104>)
   170ae:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   170b0:	69fb      	ldr	r3, [r7, #28]
   170b2:	3301      	adds	r3, #1
   170b4:	61fb      	str	r3, [r7, #28]
   170b6:	69fb      	ldr	r3, [r7, #28]
   170b8:	2b13      	cmp	r3, #19
   170ba:	ddce      	ble.n	1705a <MQTT_HandleGameMessages+0x2e>
   170bc:	e000      	b.n	170c0 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   170be:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   170c0:	4b17      	ldr	r3, [pc, #92]	; (17120 <MQTT_HandleGameMessages+0xf4>)
   170c2:	0018      	movs	r0, r3
   170c4:	4b1b      	ldr	r3, [pc, #108]	; (17134 <MQTT_HandleGameMessages+0x108>)
   170c6:	4798      	blx	r3
   170c8:	0003      	movs	r3, r0
   170ca:	001a      	movs	r2, r3
   170cc:	4b14      	ldr	r3, [pc, #80]	; (17120 <MQTT_HandleGameMessages+0xf4>)
   170ce:	18d2      	adds	r2, r2, r3
   170d0:	4b19      	ldr	r3, [pc, #100]	; (17138 <MQTT_HandleGameMessages+0x10c>)
   170d2:	0010      	movs	r0, r2
   170d4:	0019      	movs	r1, r3
   170d6:	2303      	movs	r3, #3
   170d8:	001a      	movs	r2, r3
   170da:	4b18      	ldr	r3, [pc, #96]	; (1713c <MQTT_HandleGameMessages+0x110>)
   170dc:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   170de:	4b10      	ldr	r3, [pc, #64]	; (17120 <MQTT_HandleGameMessages+0xf4>)
   170e0:	0019      	movs	r1, r3
   170e2:	2001      	movs	r0, #1
   170e4:	4b16      	ldr	r3, [pc, #88]	; (17140 <MQTT_HandleGameMessages+0x114>)
   170e6:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   170e8:	4b16      	ldr	r3, [pc, #88]	; (17144 <MQTT_HandleGameMessages+0x118>)
   170ea:	0019      	movs	r1, r3
   170ec:	2001      	movs	r0, #1
   170ee:	4b14      	ldr	r3, [pc, #80]	; (17140 <MQTT_HandleGameMessages+0x114>)
   170f0:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   170f2:	4b0b      	ldr	r3, [pc, #44]	; (17120 <MQTT_HandleGameMessages+0xf4>)
   170f4:	0018      	movs	r0, r3
   170f6:	4b0f      	ldr	r3, [pc, #60]	; (17134 <MQTT_HandleGameMessages+0x108>)
   170f8:	4798      	blx	r3
   170fa:	0004      	movs	r4, r0
   170fc:	4a08      	ldr	r2, [pc, #32]	; (17120 <MQTT_HandleGameMessages+0xf4>)
   170fe:	4912      	ldr	r1, [pc, #72]	; (17148 <MQTT_HandleGameMessages+0x11c>)
   17100:	4812      	ldr	r0, [pc, #72]	; (1714c <MQTT_HandleGameMessages+0x120>)
   17102:	2300      	movs	r3, #0
   17104:	9301      	str	r3, [sp, #4]
   17106:	2301      	movs	r3, #1
   17108:	9300      	str	r3, [sp, #0]
   1710a:	0023      	movs	r3, r4
   1710c:	4c10      	ldr	r4, [pc, #64]	; (17150 <MQTT_HandleGameMessages+0x124>)
   1710e:	47a0      	blx	r4
    }
}
   17110:	46c0      	nop			; (mov r8, r8)
   17112:	46bd      	mov	sp, r7
   17114:	b009      	add	sp, #36	; 0x24
   17116:	bd90      	pop	{r4, r7, pc}
   17118:	20000628 	.word	0x20000628
   1711c:	0001aee5 	.word	0x0001aee5
   17120:	20000030 	.word	0x20000030
   17124:	0003694c 	.word	0x0003694c
   17128:	00036cd8 	.word	0x00036cd8
   1712c:	00034add 	.word	0x00034add
   17130:	00034bc1 	.word	0x00034bc1
   17134:	00034c3b 	.word	0x00034c3b
   17138:	00036cdc 	.word	0x00036cdc
   1713c:	0003484d 	.word	0x0003484d
   17140:	0001ddd1 	.word	0x0001ddd1
   17144:	00036ce0 	.word	0x00036ce0
   17148:	00036ce4 	.word	0x00036ce4
   1714c:	20000894 	.word	0x20000894
   17150:	0002f7fd 	.word	0x0002f7fd

00017154 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   17154:	b590      	push	{r4, r7, lr}
   17156:	b08d      	sub	sp, #52	; 0x34
   17158:	af02      	add	r7, sp, #8
   1715a:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   1715c:	2064      	movs	r0, #100	; 0x64
   1715e:	4b79      	ldr	r3, [pc, #484]	; (17344 <vWifiTask+0x1f0>)
   17160:	4798      	blx	r3
    init_state();
   17162:	4b79      	ldr	r3, [pc, #484]	; (17348 <vWifiTask+0x1f4>)
   17164:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   17166:	2200      	movs	r2, #0
   17168:	2104      	movs	r1, #4
   1716a:	2005      	movs	r0, #5
   1716c:	4b77      	ldr	r3, [pc, #476]	; (1734c <vWifiTask+0x1f8>)
   1716e:	4798      	blx	r3
   17170:	0002      	movs	r2, r0
   17172:	4b77      	ldr	r3, [pc, #476]	; (17350 <vWifiTask+0x1fc>)
   17174:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   17176:	2200      	movs	r2, #0
   17178:	2106      	movs	r1, #6
   1717a:	2005      	movs	r0, #5
   1717c:	4b73      	ldr	r3, [pc, #460]	; (1734c <vWifiTask+0x1f8>)
   1717e:	4798      	blx	r3
   17180:	0002      	movs	r2, r0
   17182:	4b74      	ldr	r3, [pc, #464]	; (17354 <vWifiTask+0x200>)
   17184:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   17186:	2200      	movs	r2, #0
   17188:	2114      	movs	r1, #20
   1718a:	2002      	movs	r0, #2
   1718c:	4b6f      	ldr	r3, [pc, #444]	; (1734c <vWifiTask+0x1f8>)
   1718e:	4798      	blx	r3
   17190:	0002      	movs	r2, r0
   17192:	4b71      	ldr	r3, [pc, #452]	; (17358 <vWifiTask+0x204>)
   17194:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   17196:	2200      	movs	r2, #0
   17198:	2102      	movs	r1, #2
   1719a:	2005      	movs	r0, #5
   1719c:	4b6b      	ldr	r3, [pc, #428]	; (1734c <vWifiTask+0x1f8>)
   1719e:	4798      	blx	r3
   171a0:	0002      	movs	r2, r0
   171a2:	4b6e      	ldr	r3, [pc, #440]	; (1735c <vWifiTask+0x208>)
   171a4:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
   171a6:	4b6a      	ldr	r3, [pc, #424]	; (17350 <vWifiTask+0x1fc>)
   171a8:	681b      	ldr	r3, [r3, #0]
   171aa:	2b00      	cmp	r3, #0
   171ac:	d00b      	beq.n	171c6 <vWifiTask+0x72>
   171ae:	4b69      	ldr	r3, [pc, #420]	; (17354 <vWifiTask+0x200>)
   171b0:	681b      	ldr	r3, [r3, #0]
   171b2:	2b00      	cmp	r3, #0
   171b4:	d007      	beq.n	171c6 <vWifiTask+0x72>
   171b6:	4b68      	ldr	r3, [pc, #416]	; (17358 <vWifiTask+0x204>)
   171b8:	681b      	ldr	r3, [r3, #0]
   171ba:	2b00      	cmp	r3, #0
   171bc:	d003      	beq.n	171c6 <vWifiTask+0x72>
   171be:	4b67      	ldr	r3, [pc, #412]	; (1735c <vWifiTask+0x208>)
   171c0:	681b      	ldr	r3, [r3, #0]
   171c2:	2b00      	cmp	r3, #0
   171c4:	d103      	bne.n	171ce <vWifiTask+0x7a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   171c6:	4b66      	ldr	r3, [pc, #408]	; (17360 <vWifiTask+0x20c>)
   171c8:	0018      	movs	r0, r3
   171ca:	4b66      	ldr	r3, [pc, #408]	; (17364 <vWifiTask+0x210>)
   171cc:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   171ce:	4b66      	ldr	r3, [pc, #408]	; (17368 <vWifiTask+0x214>)
   171d0:	0018      	movs	r0, r3
   171d2:	4b64      	ldr	r3, [pc, #400]	; (17364 <vWifiTask+0x210>)
   171d4:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   171d6:	4b65      	ldr	r3, [pc, #404]	; (1736c <vWifiTask+0x218>)
   171d8:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   171da:	4b65      	ldr	r3, [pc, #404]	; (17370 <vWifiTask+0x21c>)
   171dc:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   171de:	4b65      	ldr	r3, [pc, #404]	; (17374 <vWifiTask+0x220>)
   171e0:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   171e2:	4b65      	ldr	r3, [pc, #404]	; (17378 <vWifiTask+0x224>)
   171e4:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   171e6:	4b65      	ldr	r3, [pc, #404]	; (1737c <vWifiTask+0x228>)
   171e8:	4798      	blx	r3
    configure_extint_callbacks();
   171ea:	4b65      	ldr	r3, [pc, #404]	; (17380 <vWifiTask+0x22c>)
   171ec:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   171ee:	230c      	movs	r3, #12
   171f0:	18fb      	adds	r3, r7, r3
   171f2:	2218      	movs	r2, #24
   171f4:	2100      	movs	r1, #0
   171f6:	0018      	movs	r0, r3
   171f8:	4b62      	ldr	r3, [pc, #392]	; (17384 <vWifiTask+0x230>)
   171fa:	4798      	blx	r3

    nm_bsp_init();
   171fc:	4b62      	ldr	r3, [pc, #392]	; (17388 <vWifiTask+0x234>)
   171fe:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   17200:	230c      	movs	r3, #12
   17202:	18fb      	adds	r3, r7, r3
   17204:	4a61      	ldr	r2, [pc, #388]	; (1738c <vWifiTask+0x238>)
   17206:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   17208:	2327      	movs	r3, #39	; 0x27
   1720a:	18fc      	adds	r4, r7, r3
   1720c:	230c      	movs	r3, #12
   1720e:	18fb      	adds	r3, r7, r3
   17210:	0018      	movs	r0, r3
   17212:	4b5f      	ldr	r3, [pc, #380]	; (17390 <vWifiTask+0x23c>)
   17214:	4798      	blx	r3
   17216:	0003      	movs	r3, r0
   17218:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   1721a:	2327      	movs	r3, #39	; 0x27
   1721c:	18fb      	adds	r3, r7, r3
   1721e:	781b      	ldrb	r3, [r3, #0]
   17220:	b25b      	sxtb	r3, r3
   17222:	2b00      	cmp	r3, #0
   17224:	d009      	beq.n	1723a <vWifiTask+0xe6>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   17226:	2327      	movs	r3, #39	; 0x27
   17228:	18fb      	adds	r3, r7, r3
   1722a:	2200      	movs	r2, #0
   1722c:	569a      	ldrsb	r2, [r3, r2]
   1722e:	4b59      	ldr	r3, [pc, #356]	; (17394 <vWifiTask+0x240>)
   17230:	0019      	movs	r1, r3
   17232:	2001      	movs	r0, #1
   17234:	4b58      	ldr	r3, [pc, #352]	; (17398 <vWifiTask+0x244>)
   17236:	4798      	blx	r3
        while (1) {
   17238:	e7fe      	b.n	17238 <vWifiTask+0xe4>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   1723a:	4a58      	ldr	r2, [pc, #352]	; (1739c <vWifiTask+0x248>)
   1723c:	4b58      	ldr	r3, [pc, #352]	; (173a0 <vWifiTask+0x24c>)
   1723e:	0019      	movs	r1, r3
   17240:	2001      	movs	r0, #1
   17242:	4b55      	ldr	r3, [pc, #340]	; (17398 <vWifiTask+0x244>)
   17244:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   17246:	4b57      	ldr	r3, [pc, #348]	; (173a4 <vWifiTask+0x250>)
   17248:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   1724a:	4a57      	ldr	r2, [pc, #348]	; (173a8 <vWifiTask+0x254>)
   1724c:	4b57      	ldr	r3, [pc, #348]	; (173ac <vWifiTask+0x258>)
   1724e:	0011      	movs	r1, r2
   17250:	0018      	movs	r0, r3
   17252:	4b57      	ldr	r3, [pc, #348]	; (173b0 <vWifiTask+0x25c>)
   17254:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   17256:	4a57      	ldr	r2, [pc, #348]	; (173b4 <vWifiTask+0x260>)
   17258:	4850      	ldr	r0, [pc, #320]	; (1739c <vWifiTask+0x248>)
   1725a:	23ff      	movs	r3, #255	; 0xff
   1725c:	9300      	str	r3, [sp, #0]
   1725e:	0013      	movs	r3, r2
   17260:	2202      	movs	r2, #2
   17262:	2106      	movs	r1, #6
   17264:	4c54      	ldr	r4, [pc, #336]	; (173b8 <vWifiTask+0x264>)
   17266:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   17268:	e006      	b.n	17278 <vWifiTask+0x124>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   1726a:	2000      	movs	r0, #0
   1726c:	4b53      	ldr	r3, [pc, #332]	; (173bc <vWifiTask+0x268>)
   1726e:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   17270:	4b53      	ldr	r3, [pc, #332]	; (173c0 <vWifiTask+0x26c>)
   17272:	0018      	movs	r0, r3
   17274:	4b53      	ldr	r3, [pc, #332]	; (173c4 <vWifiTask+0x270>)
   17276:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   17278:	2002      	movs	r0, #2
   1727a:	4b53      	ldr	r3, [pc, #332]	; (173c8 <vWifiTask+0x274>)
   1727c:	4798      	blx	r3
   1727e:	0003      	movs	r3, r0
   17280:	001a      	movs	r2, r3
   17282:	2301      	movs	r3, #1
   17284:	4053      	eors	r3, r2
   17286:	b2db      	uxtb	r3, r3
   17288:	2b00      	cmp	r3, #0
   1728a:	d1ee      	bne.n	1726a <vWifiTask+0x116>
    }

    vTaskDelay(1000);
   1728c:	23fa      	movs	r3, #250	; 0xfa
   1728e:	009b      	lsls	r3, r3, #2
   17290:	0018      	movs	r0, r3
   17292:	4b2c      	ldr	r3, [pc, #176]	; (17344 <vWifiTask+0x1f0>)
   17294:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   17296:	4b4d      	ldr	r3, [pc, #308]	; (173cc <vWifiTask+0x278>)
   17298:	2201      	movs	r2, #1
   1729a:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   1729c:	4b4b      	ldr	r3, [pc, #300]	; (173cc <vWifiTask+0x278>)
   1729e:	781b      	ldrb	r3, [r3, #0]
   172a0:	b25b      	sxtb	r3, r3
   172a2:	2b01      	cmp	r3, #1
   172a4:	d00b      	beq.n	172be <vWifiTask+0x16a>
   172a6:	dc02      	bgt.n	172ae <vWifiTask+0x15a>
   172a8:	2b00      	cmp	r3, #0
   172aa:	d005      	beq.n	172b8 <vWifiTask+0x164>
   172ac:	e010      	b.n	172d0 <vWifiTask+0x17c>
   172ae:	2b02      	cmp	r3, #2
   172b0:	d008      	beq.n	172c4 <vWifiTask+0x170>
   172b2:	2b03      	cmp	r3, #3
   172b4:	d009      	beq.n	172ca <vWifiTask+0x176>
   172b6:	e00b      	b.n	172d0 <vWifiTask+0x17c>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   172b8:	4b45      	ldr	r3, [pc, #276]	; (173d0 <vWifiTask+0x27c>)
   172ba:	4798      	blx	r3

                break;
   172bc:	e00c      	b.n	172d8 <vWifiTask+0x184>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   172be:	4b45      	ldr	r3, [pc, #276]	; (173d4 <vWifiTask+0x280>)
   172c0:	4798      	blx	r3
                break;
   172c2:	e009      	b.n	172d8 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   172c4:	4b44      	ldr	r3, [pc, #272]	; (173d8 <vWifiTask+0x284>)
   172c6:	4798      	blx	r3
                break;
   172c8:	e006      	b.n	172d8 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   172ca:	4b44      	ldr	r3, [pc, #272]	; (173dc <vWifiTask+0x288>)
   172cc:	4798      	blx	r3
                break;
   172ce:	e003      	b.n	172d8 <vWifiTask+0x184>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   172d0:	4b3e      	ldr	r3, [pc, #248]	; (173cc <vWifiTask+0x278>)
   172d2:	2200      	movs	r2, #0
   172d4:	701a      	strb	r2, [r3, #0]
                break;
   172d6:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   172d8:	230b      	movs	r3, #11
   172da:	18fb      	adds	r3, r7, r3
   172dc:	2200      	movs	r2, #0
   172de:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   172e0:	4b1b      	ldr	r3, [pc, #108]	; (17350 <vWifiTask+0x1fc>)
   172e2:	681b      	ldr	r3, [r3, #0]
   172e4:	220b      	movs	r2, #11
   172e6:	18b9      	adds	r1, r7, r2
   172e8:	2200      	movs	r2, #0
   172ea:	0018      	movs	r0, r3
   172ec:	4b3c      	ldr	r3, [pc, #240]	; (173e0 <vWifiTask+0x28c>)
   172ee:	4798      	blx	r3
   172f0:	0003      	movs	r3, r0
   172f2:	2b01      	cmp	r3, #1
   172f4:	d105      	bne.n	17302 <vWifiTask+0x1ae>
            wifiStateMachine = DataToReceive;  // Update new state
   172f6:	230b      	movs	r3, #11
   172f8:	18fb      	adds	r3, r7, r3
   172fa:	781b      	ldrb	r3, [r3, #0]
   172fc:	b25a      	sxtb	r2, r3
   172fe:	4b33      	ldr	r3, [pc, #204]	; (173cc <vWifiTask+0x278>)
   17300:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   17302:	4b38      	ldr	r3, [pc, #224]	; (173e4 <vWifiTask+0x290>)
   17304:	781b      	ldrb	r3, [r3, #0]
   17306:	b2db      	uxtb	r3, r3
   17308:	2b00      	cmp	r3, #0
   1730a:	d017      	beq.n	1733c <vWifiTask+0x1e8>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   1730c:	4b36      	ldr	r3, [pc, #216]	; (173e8 <vWifiTask+0x294>)
   1730e:	0018      	movs	r0, r3
   17310:	4b36      	ldr	r3, [pc, #216]	; (173ec <vWifiTask+0x298>)
   17312:	4798      	blx	r3
   17314:	0004      	movs	r4, r0
   17316:	4a34      	ldr	r2, [pc, #208]	; (173e8 <vWifiTask+0x294>)
   17318:	4935      	ldr	r1, [pc, #212]	; (173f0 <vWifiTask+0x29c>)
   1731a:	4836      	ldr	r0, [pc, #216]	; (173f4 <vWifiTask+0x2a0>)
   1731c:	2300      	movs	r3, #0
   1731e:	9301      	str	r3, [sp, #4]
   17320:	2301      	movs	r3, #1
   17322:	9300      	str	r3, [sp, #0]
   17324:	0023      	movs	r3, r4
   17326:	4c34      	ldr	r4, [pc, #208]	; (173f8 <vWifiTask+0x2a4>)
   17328:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   1732a:	4a2f      	ldr	r2, [pc, #188]	; (173e8 <vWifiTask+0x294>)
   1732c:	4b33      	ldr	r3, [pc, #204]	; (173fc <vWifiTask+0x2a8>)
   1732e:	0019      	movs	r1, r3
   17330:	2001      	movs	r0, #1
   17332:	4b19      	ldr	r3, [pc, #100]	; (17398 <vWifiTask+0x244>)
   17334:	4798      	blx	r3
            isPressed = false;
   17336:	4b2b      	ldr	r3, [pc, #172]	; (173e4 <vWifiTask+0x290>)
   17338:	2200      	movs	r2, #0
   1733a:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   1733c:	2064      	movs	r0, #100	; 0x64
   1733e:	4b01      	ldr	r3, [pc, #4]	; (17344 <vWifiTask+0x1f0>)
   17340:	4798      	blx	r3
    while (1) {
   17342:	e7ab      	b.n	1729c <vWifiTask+0x148>
   17344:	0001c091 	.word	0x0001c091
   17348:	00015ba9 	.word	0x00015ba9
   1734c:	0001a385 	.word	0x0001a385
   17350:	20000624 	.word	0x20000624
   17354:	2000062c 	.word	0x2000062c
   17358:	20000628 	.word	0x20000628
   1735c:	20000630 	.word	0x20000630
   17360:	00036cf8 	.word	0x00036cf8
   17364:	0001dce5 	.word	0x0001dce5
   17368:	00036d20 	.word	0x00036d20
   1736c:	000165e5 	.word	0x000165e5
   17370:	00016621 	.word	0x00016621
   17374:	00016b1d 	.word	0x00016b1d
   17378:	00016501 	.word	0x00016501
   1737c:	00016bd5 	.word	0x00016bd5
   17380:	00016c15 	.word	0x00016c15
   17384:	00034883 	.word	0x00034883
   17388:	000201f5 	.word	0x000201f5
   1738c:	000163ad 	.word	0x000163ad
   17390:	00021ccd 	.word	0x00021ccd
   17394:	00036d3c 	.word	0x00036d3c
   17398:	0001ddd1 	.word	0x0001ddd1
   1739c:	00036780 	.word	0x00036780
   173a0:	00036d68 	.word	0x00036d68
   173a4:	00025355 	.word	0x00025355
   173a8:	000166d9 	.word	0x000166d9
   173ac:	000166a5 	.word	0x000166a5
   173b0:	000253ed 	.word	0x000253ed
   173b4:	00036774 	.word	0x00036774
   173b8:	00021e05 	.word	0x00021e05
   173bc:	00021de9 	.word	0x00021de9
   173c0:	200048ac 	.word	0x200048ac
   173c4:	000324dd 	.word	0x000324dd
   173c8:	00015c19 	.word	0x00015c19
   173cc:	20000620 	.word	0x20000620
   173d0:	00016e15 	.word	0x00016e15
   173d4:	00016eb1 	.word	0x00016eb1
   173d8:	00016c8d 	.word	0x00016c8d
   173dc:	00016d21 	.word	0x00016d21
   173e0:	0001aee5 	.word	0x0001aee5
   173e4:	20000ccc 	.word	0x20000ccc
   173e8:	20000070 	.word	0x20000070
   173ec:	00034c3b 	.word	0x00034c3b
   173f0:	00036d8c 	.word	0x00036d8c
   173f4:	20000894 	.word	0x20000894
   173f8:	0002f7fd 	.word	0x0002f7fd
   173fc:	00036da8 	.word	0x00036da8

00017400 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   17400:	b590      	push	{r4, r7, lr}
   17402:	b083      	sub	sp, #12
   17404:	af00      	add	r7, sp, #0
   17406:	0002      	movs	r2, r0
   17408:	1dfb      	adds	r3, r7, #7
   1740a:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   1740c:	1dfb      	adds	r3, r7, #7
   1740e:	781b      	ldrb	r3, [r3, #0]
   17410:	2b03      	cmp	r3, #3
   17412:	d806      	bhi.n	17422 <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   17414:	4b05      	ldr	r3, [pc, #20]	; (1742c <WifiHandlerSetState+0x2c>)
   17416:	6818      	ldr	r0, [r3, #0]
   17418:	1df9      	adds	r1, r7, #7
   1741a:	2300      	movs	r3, #0
   1741c:	220a      	movs	r2, #10
   1741e:	4c04      	ldr	r4, [pc, #16]	; (17430 <WifiHandlerSetState+0x30>)
   17420:	47a0      	blx	r4
    }
}
   17422:	46c0      	nop			; (mov r8, r8)
   17424:	46bd      	mov	sp, r7
   17426:	b003      	add	sp, #12
   17428:	bd90      	pop	{r4, r7, pc}
   1742a:	46c0      	nop			; (mov r8, r8)
   1742c:	20000624 	.word	0x20000624
   17430:	0001a62d 	.word	0x0001a62d

00017434 <WifiAddImuDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddImuDataToQueue(struct ImuDataPacket *imuPacket)
{
   17434:	b590      	push	{r4, r7, lr}
   17436:	b085      	sub	sp, #20
   17438:	af00      	add	r7, sp, #0
   1743a:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueImuBuffer, imuPacket, (TickType_t)10);
   1743c:	4b06      	ldr	r3, [pc, #24]	; (17458 <WifiAddImuDataToQueue+0x24>)
   1743e:	6818      	ldr	r0, [r3, #0]
   17440:	6879      	ldr	r1, [r7, #4]
   17442:	2300      	movs	r3, #0
   17444:	220a      	movs	r2, #10
   17446:	4c05      	ldr	r4, [pc, #20]	; (1745c <WifiAddImuDataToQueue+0x28>)
   17448:	47a0      	blx	r4
   1744a:	0003      	movs	r3, r0
   1744c:	60fb      	str	r3, [r7, #12]
    return error;
   1744e:	68fb      	ldr	r3, [r7, #12]
}
   17450:	0018      	movs	r0, r3
   17452:	46bd      	mov	sp, r7
   17454:	b005      	add	sp, #20
   17456:	bd90      	pop	{r4, r7, pc}
   17458:	2000062c 	.word	0x2000062c
   1745c:	0001a62d 	.word	0x0001a62d

00017460 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   17460:	b580      	push	{r7, lr}
   17462:	b082      	sub	sp, #8
   17464:	af00      	add	r7, sp, #0
   17466:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   17468:	687b      	ldr	r3, [r7, #4]
   1746a:	2200      	movs	r2, #0
   1746c:	701a      	strb	r2, [r3, #0]
}
   1746e:	46c0      	nop			; (mov r8, r8)
   17470:	46bd      	mov	sp, r7
   17472:	b002      	add	sp, #8
   17474:	bd80      	pop	{r7, pc}
	...

00017478 <system_apb_clock_set_mask>:
{
   17478:	b580      	push	{r7, lr}
   1747a:	b082      	sub	sp, #8
   1747c:	af00      	add	r7, sp, #0
   1747e:	0002      	movs	r2, r0
   17480:	6039      	str	r1, [r7, #0]
   17482:	1dfb      	adds	r3, r7, #7
   17484:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   17486:	1dfb      	adds	r3, r7, #7
   17488:	781b      	ldrb	r3, [r3, #0]
   1748a:	2b01      	cmp	r3, #1
   1748c:	d00a      	beq.n	174a4 <system_apb_clock_set_mask+0x2c>
   1748e:	2b02      	cmp	r3, #2
   17490:	d00f      	beq.n	174b2 <system_apb_clock_set_mask+0x3a>
   17492:	2b00      	cmp	r3, #0
   17494:	d114      	bne.n	174c0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   17496:	4b0e      	ldr	r3, [pc, #56]	; (174d0 <system_apb_clock_set_mask+0x58>)
   17498:	4a0d      	ldr	r2, [pc, #52]	; (174d0 <system_apb_clock_set_mask+0x58>)
   1749a:	6991      	ldr	r1, [r2, #24]
   1749c:	683a      	ldr	r2, [r7, #0]
   1749e:	430a      	orrs	r2, r1
   174a0:	619a      	str	r2, [r3, #24]
			break;
   174a2:	e00f      	b.n	174c4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   174a4:	4b0a      	ldr	r3, [pc, #40]	; (174d0 <system_apb_clock_set_mask+0x58>)
   174a6:	4a0a      	ldr	r2, [pc, #40]	; (174d0 <system_apb_clock_set_mask+0x58>)
   174a8:	69d1      	ldr	r1, [r2, #28]
   174aa:	683a      	ldr	r2, [r7, #0]
   174ac:	430a      	orrs	r2, r1
   174ae:	61da      	str	r2, [r3, #28]
			break;
   174b0:	e008      	b.n	174c4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   174b2:	4b07      	ldr	r3, [pc, #28]	; (174d0 <system_apb_clock_set_mask+0x58>)
   174b4:	4a06      	ldr	r2, [pc, #24]	; (174d0 <system_apb_clock_set_mask+0x58>)
   174b6:	6a11      	ldr	r1, [r2, #32]
   174b8:	683a      	ldr	r2, [r7, #0]
   174ba:	430a      	orrs	r2, r1
   174bc:	621a      	str	r2, [r3, #32]
			break;
   174be:	e001      	b.n	174c4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   174c0:	2317      	movs	r3, #23
   174c2:	e000      	b.n	174c6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   174c4:	2300      	movs	r3, #0
}
   174c6:	0018      	movs	r0, r3
   174c8:	46bd      	mov	sp, r7
   174ca:	b002      	add	sp, #8
   174cc:	bd80      	pop	{r7, pc}
   174ce:	46c0      	nop			; (mov r8, r8)
   174d0:	40000400 	.word	0x40000400

000174d4 <system_pinmux_get_config_defaults>:
{
   174d4:	b580      	push	{r7, lr}
   174d6:	b082      	sub	sp, #8
   174d8:	af00      	add	r7, sp, #0
   174da:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   174dc:	687b      	ldr	r3, [r7, #4]
   174de:	2280      	movs	r2, #128	; 0x80
   174e0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   174e2:	687b      	ldr	r3, [r7, #4]
   174e4:	2200      	movs	r2, #0
   174e6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   174e8:	687b      	ldr	r3, [r7, #4]
   174ea:	2201      	movs	r2, #1
   174ec:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   174ee:	687b      	ldr	r3, [r7, #4]
   174f0:	2200      	movs	r2, #0
   174f2:	70da      	strb	r2, [r3, #3]
}
   174f4:	46c0      	nop			; (mov r8, r8)
   174f6:	46bd      	mov	sp, r7
   174f8:	b002      	add	sp, #8
   174fa:	bd80      	pop	{r7, pc}

000174fc <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   174fc:	b580      	push	{r7, lr}
   174fe:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   17500:	4b05      	ldr	r3, [pc, #20]	; (17518 <system_is_debugger_present+0x1c>)
   17502:	789b      	ldrb	r3, [r3, #2]
   17504:	b2db      	uxtb	r3, r3
   17506:	001a      	movs	r2, r3
   17508:	2302      	movs	r3, #2
   1750a:	4013      	ands	r3, r2
   1750c:	1e5a      	subs	r2, r3, #1
   1750e:	4193      	sbcs	r3, r2
   17510:	b2db      	uxtb	r3, r3
}
   17512:	0018      	movs	r0, r3
   17514:	46bd      	mov	sp, r7
   17516:	bd80      	pop	{r7, pc}
   17518:	41002000 	.word	0x41002000

0001751c <system_interrupt_enter_critical_section>:
{
   1751c:	b580      	push	{r7, lr}
   1751e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   17520:	4b02      	ldr	r3, [pc, #8]	; (1752c <system_interrupt_enter_critical_section+0x10>)
   17522:	4798      	blx	r3
}
   17524:	46c0      	nop			; (mov r8, r8)
   17526:	46bd      	mov	sp, r7
   17528:	bd80      	pop	{r7, pc}
   1752a:	46c0      	nop			; (mov r8, r8)
   1752c:	0002604d 	.word	0x0002604d

00017530 <system_interrupt_leave_critical_section>:
{
   17530:	b580      	push	{r7, lr}
   17532:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   17534:	4b02      	ldr	r3, [pc, #8]	; (17540 <system_interrupt_leave_critical_section+0x10>)
   17536:	4798      	blx	r3
}
   17538:	46c0      	nop			; (mov r8, r8)
   1753a:	46bd      	mov	sp, r7
   1753c:	bd80      	pop	{r7, pc}
   1753e:	46c0      	nop			; (mov r8, r8)
   17540:	000260a1 	.word	0x000260a1

00017544 <system_interrupt_disable>:
{
   17544:	b580      	push	{r7, lr}
   17546:	b082      	sub	sp, #8
   17548:	af00      	add	r7, sp, #0
   1754a:	0002      	movs	r2, r0
   1754c:	1dfb      	adds	r3, r7, #7
   1754e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   17550:	4a07      	ldr	r2, [pc, #28]	; (17570 <system_interrupt_disable+0x2c>)
   17552:	1dfb      	adds	r3, r7, #7
   17554:	781b      	ldrb	r3, [r3, #0]
   17556:	0019      	movs	r1, r3
   17558:	231f      	movs	r3, #31
   1755a:	400b      	ands	r3, r1
   1755c:	2101      	movs	r1, #1
   1755e:	4099      	lsls	r1, r3
   17560:	000b      	movs	r3, r1
   17562:	0019      	movs	r1, r3
   17564:	2380      	movs	r3, #128	; 0x80
   17566:	50d1      	str	r1, [r2, r3]
}
   17568:	46c0      	nop			; (mov r8, r8)
   1756a:	46bd      	mov	sp, r7
   1756c:	b002      	add	sp, #8
   1756e:	bd80      	pop	{r7, pc}
   17570:	e000e100 	.word	0xe000e100

00017574 <i2c_master_is_syncing>:
{
   17574:	b580      	push	{r7, lr}
   17576:	b084      	sub	sp, #16
   17578:	af00      	add	r7, sp, #0
   1757a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   1757c:	687b      	ldr	r3, [r7, #4]
   1757e:	681b      	ldr	r3, [r3, #0]
   17580:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   17582:	68fb      	ldr	r3, [r7, #12]
   17584:	69db      	ldr	r3, [r3, #28]
   17586:	2207      	movs	r2, #7
   17588:	4013      	ands	r3, r2
   1758a:	1e5a      	subs	r2, r3, #1
   1758c:	4193      	sbcs	r3, r2
   1758e:	b2db      	uxtb	r3, r3
}
   17590:	0018      	movs	r0, r3
   17592:	46bd      	mov	sp, r7
   17594:	b004      	add	sp, #16
   17596:	bd80      	pop	{r7, pc}

00017598 <_i2c_master_wait_for_sync>:
{
   17598:	b580      	push	{r7, lr}
   1759a:	b082      	sub	sp, #8
   1759c:	af00      	add	r7, sp, #0
   1759e:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   175a0:	46c0      	nop			; (mov r8, r8)
   175a2:	687b      	ldr	r3, [r7, #4]
   175a4:	0018      	movs	r0, r3
   175a6:	4b04      	ldr	r3, [pc, #16]	; (175b8 <_i2c_master_wait_for_sync+0x20>)
   175a8:	4798      	blx	r3
   175aa:	1e03      	subs	r3, r0, #0
   175ac:	d1f9      	bne.n	175a2 <_i2c_master_wait_for_sync+0xa>
}
   175ae:	46c0      	nop			; (mov r8, r8)
   175b0:	46bd      	mov	sp, r7
   175b2:	b002      	add	sp, #8
   175b4:	bd80      	pop	{r7, pc}
   175b6:	46c0      	nop			; (mov r8, r8)
   175b8:	00017575 	.word	0x00017575

000175bc <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   175bc:	b580      	push	{r7, lr}
   175be:	b084      	sub	sp, #16
   175c0:	af00      	add	r7, sp, #0
   175c2:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   175c4:	687b      	ldr	r3, [r7, #4]
   175c6:	681b      	ldr	r3, [r3, #0]
   175c8:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   175ca:	687b      	ldr	r3, [r7, #4]
   175cc:	681b      	ldr	r3, [r3, #0]
   175ce:	0018      	movs	r0, r3
   175d0:	4b0d      	ldr	r3, [pc, #52]	; (17608 <i2c_master_disable+0x4c>)
   175d2:	4798      	blx	r3
   175d4:	0003      	movs	r3, r0
   175d6:	0018      	movs	r0, r3
   175d8:	4b0c      	ldr	r3, [pc, #48]	; (1760c <i2c_master_disable+0x50>)
   175da:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   175dc:	687b      	ldr	r3, [r7, #4]
   175de:	0018      	movs	r0, r3
   175e0:	4b0b      	ldr	r3, [pc, #44]	; (17610 <i2c_master_disable+0x54>)
   175e2:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   175e4:	68fb      	ldr	r3, [r7, #12]
   175e6:	2283      	movs	r2, #131	; 0x83
   175e8:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   175ea:	68fb      	ldr	r3, [r7, #12]
   175ec:	2283      	movs	r2, #131	; 0x83
   175ee:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   175f0:	68fb      	ldr	r3, [r7, #12]
   175f2:	681b      	ldr	r3, [r3, #0]
   175f4:	2202      	movs	r2, #2
   175f6:	4393      	bics	r3, r2
   175f8:	001a      	movs	r2, r3
   175fa:	68fb      	ldr	r3, [r7, #12]
   175fc:	601a      	str	r2, [r3, #0]

}
   175fe:	46c0      	nop			; (mov r8, r8)
   17600:	46bd      	mov	sp, r7
   17602:	b004      	add	sp, #16
   17604:	bd80      	pop	{r7, pc}
   17606:	46c0      	nop			; (mov r8, r8)
   17608:	00027521 	.word	0x00027521
   1760c:	00017545 	.word	0x00017545
   17610:	00017599 	.word	0x00017599

00017614 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   17614:	b5f0      	push	{r4, r5, r6, r7, lr}
   17616:	b097      	sub	sp, #92	; 0x5c
   17618:	af00      	add	r7, sp, #0
   1761a:	6178      	str	r0, [r7, #20]
   1761c:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   1761e:	2300      	movs	r3, #0
   17620:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   17622:	2300      	movs	r3, #0
   17624:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   17626:	2300      	movs	r3, #0
   17628:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   1762a:	233b      	movs	r3, #59	; 0x3b
   1762c:	2210      	movs	r2, #16
   1762e:	4694      	mov	ip, r2
   17630:	44bc      	add	ip, r7
   17632:	4463      	add	r3, ip
   17634:	2200      	movs	r2, #0
   17636:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17638:	697b      	ldr	r3, [r7, #20]
   1763a:	681b      	ldr	r3, [r3, #0]
   1763c:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   1763e:	697b      	ldr	r3, [r7, #20]
   17640:	681b      	ldr	r3, [r3, #0]
   17642:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   17644:	2323      	movs	r3, #35	; 0x23
   17646:	2210      	movs	r2, #16
   17648:	18ba      	adds	r2, r7, r2
   1764a:	18d4      	adds	r4, r2, r3
   1764c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1764e:	0018      	movs	r0, r3
   17650:	4bc0      	ldr	r3, [pc, #768]	; (17954 <_i2c_master_set_config+0x340>)
   17652:	4798      	blx	r3
   17654:	0003      	movs	r3, r0
   17656:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   17658:	230c      	movs	r3, #12
   1765a:	2210      	movs	r2, #16
   1765c:	4694      	mov	ip, r2
   1765e:	44bc      	add	ip, r7
   17660:	4463      	add	r3, ip
   17662:	0018      	movs	r0, r3
   17664:	4bbc      	ldr	r3, [pc, #752]	; (17958 <_i2c_master_set_config+0x344>)
   17666:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   17668:	693b      	ldr	r3, [r7, #16]
   1766a:	69db      	ldr	r3, [r3, #28]
   1766c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   1766e:	693b      	ldr	r3, [r7, #16]
   17670:	6a1b      	ldr	r3, [r3, #32]
   17672:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   17674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17676:	2b00      	cmp	r3, #0
   17678:	d106      	bne.n	17688 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   1767a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1767c:	2100      	movs	r1, #0
   1767e:	0018      	movs	r0, r3
   17680:	4bb6      	ldr	r3, [pc, #728]	; (1795c <_i2c_master_set_config+0x348>)
   17682:	4798      	blx	r3
   17684:	0003      	movs	r3, r0
   17686:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   17688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1768a:	b2da      	uxtb	r2, r3
   1768c:	230c      	movs	r3, #12
   1768e:	2110      	movs	r1, #16
   17690:	468c      	mov	ip, r1
   17692:	44bc      	add	ip, r7
   17694:	4463      	add	r3, ip
   17696:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   17698:	230c      	movs	r3, #12
   1769a:	2210      	movs	r2, #16
   1769c:	4694      	mov	ip, r2
   1769e:	44bc      	add	ip, r7
   176a0:	4463      	add	r3, ip
   176a2:	2202      	movs	r2, #2
   176a4:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   176a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   176a8:	0c1b      	lsrs	r3, r3, #16
   176aa:	b2db      	uxtb	r3, r3
   176ac:	220c      	movs	r2, #12
   176ae:	2110      	movs	r1, #16
   176b0:	468c      	mov	ip, r1
   176b2:	44bc      	add	ip, r7
   176b4:	4462      	add	r2, ip
   176b6:	0011      	movs	r1, r2
   176b8:	0018      	movs	r0, r3
   176ba:	4ba9      	ldr	r3, [pc, #676]	; (17960 <_i2c_master_set_config+0x34c>)
   176bc:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   176be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   176c0:	2b00      	cmp	r3, #0
   176c2:	d106      	bne.n	176d2 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   176c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   176c6:	2101      	movs	r1, #1
   176c8:	0018      	movs	r0, r3
   176ca:	4ba4      	ldr	r3, [pc, #656]	; (1795c <_i2c_master_set_config+0x348>)
   176cc:	4798      	blx	r3
   176ce:	0003      	movs	r3, r0
   176d0:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   176d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   176d4:	b2da      	uxtb	r2, r3
   176d6:	230c      	movs	r3, #12
   176d8:	2110      	movs	r1, #16
   176da:	468c      	mov	ip, r1
   176dc:	44bc      	add	ip, r7
   176de:	4463      	add	r3, ip
   176e0:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   176e2:	230c      	movs	r3, #12
   176e4:	2210      	movs	r2, #16
   176e6:	4694      	mov	ip, r2
   176e8:	44bc      	add	ip, r7
   176ea:	4463      	add	r3, ip
   176ec:	2202      	movs	r2, #2
   176ee:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   176f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   176f2:	0c1b      	lsrs	r3, r3, #16
   176f4:	b2db      	uxtb	r3, r3
   176f6:	220c      	movs	r2, #12
   176f8:	2110      	movs	r1, #16
   176fa:	468c      	mov	ip, r1
   176fc:	44bc      	add	ip, r7
   176fe:	4462      	add	r2, ip
   17700:	0011      	movs	r1, r2
   17702:	0018      	movs	r0, r3
   17704:	4b96      	ldr	r3, [pc, #600]	; (17960 <_i2c_master_set_config+0x34c>)
   17706:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   17708:	693b      	ldr	r3, [r7, #16]
   1770a:	8a9a      	ldrh	r2, [r3, #20]
   1770c:	697b      	ldr	r3, [r7, #20]
   1770e:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   17710:	693b      	ldr	r3, [r7, #16]
   17712:	8ada      	ldrh	r2, [r3, #22]
   17714:	697b      	ldr	r3, [r7, #20]
   17716:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   17718:	693b      	ldr	r3, [r7, #16]
   1771a:	7e1b      	ldrb	r3, [r3, #24]
   1771c:	2b00      	cmp	r3, #0
   1771e:	d103      	bne.n	17728 <_i2c_master_set_config+0x114>
   17720:	4b90      	ldr	r3, [pc, #576]	; (17964 <_i2c_master_set_config+0x350>)
   17722:	4798      	blx	r3
   17724:	1e03      	subs	r3, r0, #0
   17726:	d002      	beq.n	1772e <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   17728:	2380      	movs	r3, #128	; 0x80
   1772a:	657b      	str	r3, [r7, #84]	; 0x54
   1772c:	e001      	b.n	17732 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   1772e:	2300      	movs	r3, #0
   17730:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   17732:	693b      	ldr	r3, [r7, #16]
   17734:	691b      	ldr	r3, [r3, #16]
   17736:	2b00      	cmp	r3, #0
   17738:	d004      	beq.n	17744 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   1773a:	693b      	ldr	r3, [r7, #16]
   1773c:	691b      	ldr	r3, [r3, #16]
   1773e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   17740:	4313      	orrs	r3, r2
   17742:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   17744:	693b      	ldr	r3, [r7, #16]
   17746:	689b      	ldr	r3, [r3, #8]
   17748:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1774a:	4313      	orrs	r3, r2
   1774c:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   1774e:	693b      	ldr	r3, [r7, #16]
   17750:	2224      	movs	r2, #36	; 0x24
   17752:	5c9b      	ldrb	r3, [r3, r2]
   17754:	2b00      	cmp	r3, #0
   17756:	d004      	beq.n	17762 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   17758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1775a:	2280      	movs	r2, #128	; 0x80
   1775c:	05d2      	lsls	r2, r2, #23
   1775e:	4313      	orrs	r3, r2
   17760:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   17762:	693b      	ldr	r3, [r7, #16]
   17764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17766:	2b00      	cmp	r3, #0
   17768:	d004      	beq.n	17774 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   1776a:	693b      	ldr	r3, [r7, #16]
   1776c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1776e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   17770:	4313      	orrs	r3, r2
   17772:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   17774:	693b      	ldr	r3, [r7, #16]
   17776:	222c      	movs	r2, #44	; 0x2c
   17778:	5c9b      	ldrb	r3, [r3, r2]
   1777a:	2b00      	cmp	r3, #0
   1777c:	d105      	bne.n	1778a <_i2c_master_set_config+0x176>
   1777e:	693b      	ldr	r3, [r7, #16]
   17780:	689a      	ldr	r2, [r3, #8]
   17782:	2380      	movs	r3, #128	; 0x80
   17784:	049b      	lsls	r3, r3, #18
   17786:	429a      	cmp	r2, r3
   17788:	d104      	bne.n	17794 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   1778a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1778c:	2280      	movs	r2, #128	; 0x80
   1778e:	0512      	lsls	r2, r2, #20
   17790:	4313      	orrs	r3, r2
   17792:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   17794:	693b      	ldr	r3, [r7, #16]
   17796:	222d      	movs	r2, #45	; 0x2d
   17798:	5c9b      	ldrb	r3, [r3, r2]
   1779a:	2b00      	cmp	r3, #0
   1779c:	d004      	beq.n	177a8 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   1779e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   177a0:	2280      	movs	r2, #128	; 0x80
   177a2:	0412      	lsls	r2, r2, #16
   177a4:	4313      	orrs	r3, r2
   177a6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   177a8:	693b      	ldr	r3, [r7, #16]
   177aa:	222e      	movs	r2, #46	; 0x2e
   177ac:	5c9b      	ldrb	r3, [r3, r2]
   177ae:	2b00      	cmp	r3, #0
   177b0:	d004      	beq.n	177bc <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   177b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   177b4:	2280      	movs	r2, #128	; 0x80
   177b6:	03d2      	lsls	r2, r2, #15
   177b8:	4313      	orrs	r3, r2
   177ba:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   177bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   177be:	681a      	ldr	r2, [r3, #0]
   177c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   177c2:	431a      	orrs	r2, r3
   177c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   177c6:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   177c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   177ca:	2280      	movs	r2, #128	; 0x80
   177cc:	0052      	lsls	r2, r2, #1
   177ce:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   177d0:	2323      	movs	r3, #35	; 0x23
   177d2:	2210      	movs	r2, #16
   177d4:	4694      	mov	ip, r2
   177d6:	44bc      	add	ip, r7
   177d8:	4463      	add	r3, ip
   177da:	781b      	ldrb	r3, [r3, #0]
   177dc:	3314      	adds	r3, #20
   177de:	b2db      	uxtb	r3, r3
   177e0:	0018      	movs	r0, r3
   177e2:	4b61      	ldr	r3, [pc, #388]	; (17968 <_i2c_master_set_config+0x354>)
   177e4:	4798      	blx	r3
   177e6:	0003      	movs	r3, r0
   177e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   177ea:	693b      	ldr	r3, [r7, #16]
   177ec:	681b      	ldr	r3, [r3, #0]
   177ee:	22fa      	movs	r2, #250	; 0xfa
   177f0:	0092      	lsls	r2, r2, #2
   177f2:	4353      	muls	r3, r2
   177f4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   177f6:	693b      	ldr	r3, [r7, #16]
   177f8:	685b      	ldr	r3, [r3, #4]
   177fa:	22fa      	movs	r2, #250	; 0xfa
   177fc:	0092      	lsls	r2, r2, #2
   177fe:	4353      	muls	r3, r2
   17800:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   17802:	693b      	ldr	r3, [r7, #16]
   17804:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   17806:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   17808:	4b58      	ldr	r3, [pc, #352]	; (1796c <_i2c_master_set_config+0x358>)
   1780a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1780c:	4798      	blx	r3
   1780e:	0005      	movs	r5, r0
   17810:	000e      	movs	r6, r1
   17812:	4b56      	ldr	r3, [pc, #344]	; (1796c <_i2c_master_set_config+0x358>)
   17814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   17816:	4798      	blx	r3
   17818:	60b8      	str	r0, [r7, #8]
   1781a:	60f9      	str	r1, [r7, #12]
   1781c:	4b53      	ldr	r3, [pc, #332]	; (1796c <_i2c_master_set_config+0x358>)
   1781e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17820:	4798      	blx	r3
   17822:	4c53      	ldr	r4, [pc, #332]	; (17970 <_i2c_master_set_config+0x35c>)
   17824:	4a53      	ldr	r2, [pc, #332]	; (17974 <_i2c_master_set_config+0x360>)
   17826:	4b54      	ldr	r3, [pc, #336]	; (17978 <_i2c_master_set_config+0x364>)
   17828:	47a0      	blx	r4
   1782a:	0003      	movs	r3, r0
   1782c:	000c      	movs	r4, r1
   1782e:	603b      	str	r3, [r7, #0]
   17830:	607c      	str	r4, [r7, #4]
   17832:	4b4e      	ldr	r3, [pc, #312]	; (1796c <_i2c_master_set_config+0x358>)
   17834:	6a38      	ldr	r0, [r7, #32]
   17836:	4798      	blx	r3
   17838:	0002      	movs	r2, r0
   1783a:	000b      	movs	r3, r1
   1783c:	4c4c      	ldr	r4, [pc, #304]	; (17970 <_i2c_master_set_config+0x35c>)
   1783e:	6838      	ldr	r0, [r7, #0]
   17840:	6879      	ldr	r1, [r7, #4]
   17842:	47a0      	blx	r4
   17844:	0003      	movs	r3, r0
   17846:	000c      	movs	r4, r1
   17848:	0018      	movs	r0, r3
   1784a:	0021      	movs	r1, r4
   1784c:	4c4b      	ldr	r4, [pc, #300]	; (1797c <_i2c_master_set_config+0x368>)
   1784e:	2200      	movs	r2, #0
   17850:	4b4b      	ldr	r3, [pc, #300]	; (17980 <_i2c_master_set_config+0x36c>)
   17852:	47a0      	blx	r4
   17854:	0003      	movs	r3, r0
   17856:	000c      	movs	r4, r1
   17858:	001a      	movs	r2, r3
   1785a:	0023      	movs	r3, r4
   1785c:	4c44      	ldr	r4, [pc, #272]	; (17970 <_i2c_master_set_config+0x35c>)
   1785e:	68b8      	ldr	r0, [r7, #8]
   17860:	68f9      	ldr	r1, [r7, #12]
   17862:	47a0      	blx	r4
   17864:	0003      	movs	r3, r0
   17866:	000c      	movs	r4, r1
   17868:	001a      	movs	r2, r3
   1786a:	0023      	movs	r3, r4
   1786c:	4c45      	ldr	r4, [pc, #276]	; (17984 <_i2c_master_set_config+0x370>)
   1786e:	0028      	movs	r0, r5
   17870:	0031      	movs	r1, r6
   17872:	47a0      	blx	r4
   17874:	0003      	movs	r3, r0
   17876:	000c      	movs	r4, r1
   17878:	001d      	movs	r5, r3
   1787a:	0026      	movs	r6, r4
   1787c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1787e:	005a      	lsls	r2, r3, #1
   17880:	4b3a      	ldr	r3, [pc, #232]	; (1796c <_i2c_master_set_config+0x358>)
   17882:	0010      	movs	r0, r2
   17884:	4798      	blx	r3
   17886:	0002      	movs	r2, r0
   17888:	000b      	movs	r3, r1
   1788a:	4c3c      	ldr	r4, [pc, #240]	; (1797c <_i2c_master_set_config+0x368>)
   1788c:	0028      	movs	r0, r5
   1788e:	0031      	movs	r1, r6
   17890:	47a0      	blx	r4
   17892:	0003      	movs	r3, r0
   17894:	000c      	movs	r4, r1
   17896:	0018      	movs	r0, r3
   17898:	0021      	movs	r1, r4
   1789a:	4c3a      	ldr	r4, [pc, #232]	; (17984 <_i2c_master_set_config+0x370>)
   1789c:	2200      	movs	r2, #0
   1789e:	4b3a      	ldr	r3, [pc, #232]	; (17988 <_i2c_master_set_config+0x374>)
   178a0:	47a0      	blx	r4
   178a2:	0003      	movs	r3, r0
   178a4:	000c      	movs	r4, r1
   178a6:	001d      	movs	r5, r3
   178a8:	0026      	movs	r6, r4
   178aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   178ac:	005a      	lsls	r2, r3, #1
   178ae:	4b2f      	ldr	r3, [pc, #188]	; (1796c <_i2c_master_set_config+0x358>)
   178b0:	0010      	movs	r0, r2
   178b2:	4798      	blx	r3
   178b4:	0002      	movs	r2, r0
   178b6:	000b      	movs	r3, r1
   178b8:	4c34      	ldr	r4, [pc, #208]	; (1798c <_i2c_master_set_config+0x378>)
   178ba:	0028      	movs	r0, r5
   178bc:	0031      	movs	r1, r6
   178be:	47a0      	blx	r4
   178c0:	0003      	movs	r3, r0
   178c2:	000c      	movs	r4, r1
   178c4:	0019      	movs	r1, r3
   178c6:	0022      	movs	r2, r4
   178c8:	4b31      	ldr	r3, [pc, #196]	; (17990 <_i2c_master_set_config+0x37c>)
   178ca:	0008      	movs	r0, r1
   178cc:	0011      	movs	r1, r2
   178ce:	4798      	blx	r3
   178d0:	0003      	movs	r3, r0
   178d2:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   178d4:	693b      	ldr	r3, [r7, #16]
   178d6:	689a      	ldr	r2, [r3, #8]
   178d8:	2380      	movs	r3, #128	; 0x80
   178da:	049b      	lsls	r3, r3, #18
   178dc:	429a      	cmp	r2, r3
   178de:	d16a      	bne.n	179b6 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   178e0:	4b22      	ldr	r3, [pc, #136]	; (1796c <_i2c_master_set_config+0x358>)
   178e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   178e4:	4798      	blx	r3
   178e6:	4c25      	ldr	r4, [pc, #148]	; (1797c <_i2c_master_set_config+0x368>)
   178e8:	0002      	movs	r2, r0
   178ea:	000b      	movs	r3, r1
   178ec:	47a0      	blx	r4
   178ee:	0003      	movs	r3, r0
   178f0:	000c      	movs	r4, r1
   178f2:	001d      	movs	r5, r3
   178f4:	0026      	movs	r6, r4
   178f6:	4b1d      	ldr	r3, [pc, #116]	; (1796c <_i2c_master_set_config+0x358>)
   178f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   178fa:	4798      	blx	r3
   178fc:	4c1c      	ldr	r4, [pc, #112]	; (17970 <_i2c_master_set_config+0x35c>)
   178fe:	2200      	movs	r2, #0
   17900:	4b24      	ldr	r3, [pc, #144]	; (17994 <_i2c_master_set_config+0x380>)
   17902:	47a0      	blx	r4
   17904:	0003      	movs	r3, r0
   17906:	000c      	movs	r4, r1
   17908:	001a      	movs	r2, r3
   1790a:	0023      	movs	r3, r4
   1790c:	4c1f      	ldr	r4, [pc, #124]	; (1798c <_i2c_master_set_config+0x378>)
   1790e:	0028      	movs	r0, r5
   17910:	0031      	movs	r1, r6
   17912:	47a0      	blx	r4
   17914:	0003      	movs	r3, r0
   17916:	000c      	movs	r4, r1
   17918:	0018      	movs	r0, r3
   1791a:	0021      	movs	r1, r4
   1791c:	4c19      	ldr	r4, [pc, #100]	; (17984 <_i2c_master_set_config+0x370>)
   1791e:	2200      	movs	r2, #0
   17920:	4b19      	ldr	r3, [pc, #100]	; (17988 <_i2c_master_set_config+0x374>)
   17922:	47a0      	blx	r4
   17924:	0003      	movs	r3, r0
   17926:	000c      	movs	r4, r1
   17928:	0019      	movs	r1, r3
   1792a:	0022      	movs	r2, r4
   1792c:	4b18      	ldr	r3, [pc, #96]	; (17990 <_i2c_master_set_config+0x37c>)
   1792e:	0008      	movs	r0, r1
   17930:	0011      	movs	r1, r2
   17932:	4798      	blx	r3
   17934:	0003      	movs	r3, r0
   17936:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   17938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1793a:	2b00      	cmp	r3, #0
   1793c:	d02e      	beq.n	1799c <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   1793e:	4b16      	ldr	r3, [pc, #88]	; (17998 <_i2c_master_set_config+0x384>)
   17940:	6a79      	ldr	r1, [r7, #36]	; 0x24
   17942:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17944:	4798      	blx	r3
   17946:	0003      	movs	r3, r0
   17948:	1e9a      	subs	r2, r3, #2
   1794a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1794c:	1ad3      	subs	r3, r2, r3
   1794e:	653b      	str	r3, [r7, #80]	; 0x50
   17950:	e031      	b.n	179b6 <_i2c_master_set_config+0x3a2>
   17952:	46c0      	nop			; (mov r8, r8)
   17954:	00027451 	.word	0x00027451
   17958:	000174d5 	.word	0x000174d5
   1795c:	00027295 	.word	0x00027295
   17960:	0002a041 	.word	0x0002a041
   17964:	000174fd 	.word	0x000174fd
   17968:	00029e05 	.word	0x00029e05
   1796c:	00034681 	.word	0x00034681
   17970:	00033aed 	.word	0x00033aed
   17974:	e826d695 	.word	0xe826d695
   17978:	3e112e0b 	.word	0x3e112e0b
   1797c:	00032e65 	.word	0x00032e65
   17980:	40240000 	.word	0x40240000
   17984:	00033fed 	.word	0x00033fed
   17988:	3ff00000 	.word	0x3ff00000
   1798c:	00033485 	.word	0x00033485
   17990:	00034619 	.word	0x00034619
   17994:	40080000 	.word	0x40080000
   17998:	00032805 	.word	0x00032805
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   1799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1799e:	005a      	lsls	r2, r3, #1
   179a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   179a2:	18d3      	adds	r3, r2, r3
   179a4:	1e5a      	subs	r2, r3, #1
   179a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   179a8:	0059      	lsls	r1, r3, #1
   179aa:	4b1d      	ldr	r3, [pc, #116]	; (17a20 <_i2c_master_set_config+0x40c>)
   179ac:	0010      	movs	r0, r2
   179ae:	4798      	blx	r3
   179b0:	0003      	movs	r3, r0
   179b2:	3b01      	subs	r3, #1
   179b4:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   179b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   179b8:	2bff      	cmp	r3, #255	; 0xff
   179ba:	dc08      	bgt.n	179ce <_i2c_master_set_config+0x3ba>
   179bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   179be:	2b00      	cmp	r3, #0
   179c0:	db05      	blt.n	179ce <_i2c_master_set_config+0x3ba>
   179c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   179c4:	2bff      	cmp	r3, #255	; 0xff
   179c6:	dc02      	bgt.n	179ce <_i2c_master_set_config+0x3ba>
   179c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   179ca:	2b00      	cmp	r3, #0
   179cc:	da06      	bge.n	179dc <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   179ce:	233b      	movs	r3, #59	; 0x3b
   179d0:	2210      	movs	r2, #16
   179d2:	4694      	mov	ip, r2
   179d4:	44bc      	add	ip, r7
   179d6:	4463      	add	r3, ip
   179d8:	2240      	movs	r2, #64	; 0x40
   179da:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   179dc:	233b      	movs	r3, #59	; 0x3b
   179de:	2210      	movs	r2, #16
   179e0:	4694      	mov	ip, r2
   179e2:	44bc      	add	ip, r7
   179e4:	4463      	add	r3, ip
   179e6:	781b      	ldrb	r3, [r3, #0]
   179e8:	2b40      	cmp	r3, #64	; 0x40
   179ea:	d00e      	beq.n	17a0a <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   179ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   179ee:	22ff      	movs	r2, #255	; 0xff
   179f0:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   179f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   179f4:	041b      	lsls	r3, r3, #16
   179f6:	0019      	movs	r1, r3
   179f8:	23ff      	movs	r3, #255	; 0xff
   179fa:	041b      	lsls	r3, r3, #16
   179fc:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   179fe:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   17a00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   17a02:	0612      	lsls	r2, r2, #24
   17a04:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   17a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17a08:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   17a0a:	233b      	movs	r3, #59	; 0x3b
   17a0c:	2210      	movs	r2, #16
   17a0e:	4694      	mov	ip, r2
   17a10:	44bc      	add	ip, r7
   17a12:	4463      	add	r3, ip
   17a14:	781b      	ldrb	r3, [r3, #0]
}
   17a16:	0018      	movs	r0, r3
   17a18:	46bd      	mov	sp, r7
   17a1a:	b017      	add	sp, #92	; 0x5c
   17a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17a1e:	46c0      	nop			; (mov r8, r8)
   17a20:	00032805 	.word	0x00032805

00017a24 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   17a24:	b590      	push	{r4, r7, lr}
   17a26:	b08b      	sub	sp, #44	; 0x2c
   17a28:	af00      	add	r7, sp, #0
   17a2a:	60f8      	str	r0, [r7, #12]
   17a2c:	60b9      	str	r1, [r7, #8]
   17a2e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   17a30:	68fb      	ldr	r3, [r7, #12]
   17a32:	68ba      	ldr	r2, [r7, #8]
   17a34:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17a36:	68fb      	ldr	r3, [r7, #12]
   17a38:	681b      	ldr	r3, [r3, #0]
   17a3a:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   17a3c:	68fb      	ldr	r3, [r7, #12]
   17a3e:	681b      	ldr	r3, [r3, #0]
   17a40:	0018      	movs	r0, r3
   17a42:	4b3b      	ldr	r3, [pc, #236]	; (17b30 <i2c_master_init+0x10c>)
   17a44:	4798      	blx	r3
   17a46:	0003      	movs	r3, r0
   17a48:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   17a4a:	6a3b      	ldr	r3, [r7, #32]
   17a4c:	3302      	adds	r3, #2
   17a4e:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   17a50:	6a3b      	ldr	r3, [r7, #32]
   17a52:	3314      	adds	r3, #20
   17a54:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   17a56:	2201      	movs	r2, #1
   17a58:	69fb      	ldr	r3, [r7, #28]
   17a5a:	409a      	lsls	r2, r3
   17a5c:	0013      	movs	r3, r2
   17a5e:	0019      	movs	r1, r3
   17a60:	2002      	movs	r0, #2
   17a62:	4b34      	ldr	r3, [pc, #208]	; (17b34 <i2c_master_init+0x110>)
   17a64:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   17a66:	2314      	movs	r3, #20
   17a68:	18fb      	adds	r3, r7, r3
   17a6a:	0018      	movs	r0, r3
   17a6c:	4b32      	ldr	r3, [pc, #200]	; (17b38 <i2c_master_init+0x114>)
   17a6e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   17a70:	687b      	ldr	r3, [r7, #4]
   17a72:	7b1a      	ldrb	r2, [r3, #12]
   17a74:	2314      	movs	r3, #20
   17a76:	18fb      	adds	r3, r7, r3
   17a78:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   17a7a:	69bb      	ldr	r3, [r7, #24]
   17a7c:	b2db      	uxtb	r3, r3
   17a7e:	2214      	movs	r2, #20
   17a80:	18ba      	adds	r2, r7, r2
   17a82:	0011      	movs	r1, r2
   17a84:	0018      	movs	r0, r3
   17a86:	4b2d      	ldr	r3, [pc, #180]	; (17b3c <i2c_master_init+0x118>)
   17a88:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   17a8a:	69bb      	ldr	r3, [r7, #24]
   17a8c:	b2db      	uxtb	r3, r3
   17a8e:	0018      	movs	r0, r3
   17a90:	4b2b      	ldr	r3, [pc, #172]	; (17b40 <i2c_master_init+0x11c>)
   17a92:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   17a94:	687b      	ldr	r3, [r7, #4]
   17a96:	7b1b      	ldrb	r3, [r3, #12]
   17a98:	2100      	movs	r1, #0
   17a9a:	0018      	movs	r0, r3
   17a9c:	4b29      	ldr	r3, [pc, #164]	; (17b44 <i2c_master_init+0x120>)
   17a9e:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   17aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17aa2:	681b      	ldr	r3, [r3, #0]
   17aa4:	2202      	movs	r2, #2
   17aa6:	4013      	ands	r3, r2
   17aa8:	d001      	beq.n	17aae <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   17aaa:	231c      	movs	r3, #28
   17aac:	e03b      	b.n	17b26 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   17aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17ab0:	681b      	ldr	r3, [r3, #0]
   17ab2:	2201      	movs	r2, #1
   17ab4:	4013      	ands	r3, r2
   17ab6:	d001      	beq.n	17abc <i2c_master_init+0x98>
		return STATUS_BUSY;
   17ab8:	2305      	movs	r3, #5
   17aba:	e034      	b.n	17b26 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   17abc:	68fb      	ldr	r3, [r7, #12]
   17abe:	681b      	ldr	r3, [r3, #0]
   17ac0:	2217      	movs	r2, #23
   17ac2:	18bc      	adds	r4, r7, r2
   17ac4:	0018      	movs	r0, r3
   17ac6:	4b1a      	ldr	r3, [pc, #104]	; (17b30 <i2c_master_init+0x10c>)
   17ac8:	4798      	blx	r3
   17aca:	0003      	movs	r3, r0
   17acc:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   17ace:	4a1e      	ldr	r2, [pc, #120]	; (17b48 <i2c_master_init+0x124>)
   17ad0:	2317      	movs	r3, #23
   17ad2:	18fb      	adds	r3, r7, r3
   17ad4:	781b      	ldrb	r3, [r3, #0]
   17ad6:	0011      	movs	r1, r2
   17ad8:	0018      	movs	r0, r3
   17ada:	4b1c      	ldr	r3, [pc, #112]	; (17b4c <i2c_master_init+0x128>)
   17adc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   17ade:	2317      	movs	r3, #23
   17ae0:	18fb      	adds	r3, r7, r3
   17ae2:	781a      	ldrb	r2, [r3, #0]
   17ae4:	4b1a      	ldr	r3, [pc, #104]	; (17b50 <i2c_master_init+0x12c>)
   17ae6:	0092      	lsls	r2, r2, #2
   17ae8:	68f9      	ldr	r1, [r7, #12]
   17aea:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   17aec:	68fb      	ldr	r3, [r7, #12]
   17aee:	2200      	movs	r2, #0
   17af0:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   17af2:	68fb      	ldr	r3, [r7, #12]
   17af4:	2200      	movs	r2, #0
   17af6:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   17af8:	68fb      	ldr	r3, [r7, #12]
   17afa:	2200      	movs	r2, #0
   17afc:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   17afe:	68fb      	ldr	r3, [r7, #12]
   17b00:	2200      	movs	r2, #0
   17b02:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   17b04:	68fb      	ldr	r3, [r7, #12]
   17b06:	2225      	movs	r2, #37	; 0x25
   17b08:	2100      	movs	r1, #0
   17b0a:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   17b0c:	68fb      	ldr	r3, [r7, #12]
   17b0e:	2200      	movs	r2, #0
   17b10:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   17b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17b14:	2214      	movs	r2, #20
   17b16:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   17b18:	687a      	ldr	r2, [r7, #4]
   17b1a:	68fb      	ldr	r3, [r7, #12]
   17b1c:	0011      	movs	r1, r2
   17b1e:	0018      	movs	r0, r3
   17b20:	4b0c      	ldr	r3, [pc, #48]	; (17b54 <i2c_master_init+0x130>)
   17b22:	4798      	blx	r3
   17b24:	0003      	movs	r3, r0
}
   17b26:	0018      	movs	r0, r3
   17b28:	46bd      	mov	sp, r7
   17b2a:	b00b      	add	sp, #44	; 0x2c
   17b2c:	bd90      	pop	{r4, r7, pc}
   17b2e:	46c0      	nop			; (mov r8, r8)
   17b30:	00027451 	.word	0x00027451
   17b34:	00017479 	.word	0x00017479
   17b38:	00017461 	.word	0x00017461
   17b3c:	00029ce1 	.word	0x00029ce1
   17b40:	00029d25 	.word	0x00029d25
   17b44:	00027209 	.word	0x00027209
   17b48:	00013575 	.word	0x00013575
   17b4c:	000274b5 	.word	0x000274b5
   17b50:	20005c04 	.word	0x20005c04
   17b54:	00017615 	.word	0x00017615

00017b58 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   17b58:	b580      	push	{r7, lr}
   17b5a:	b084      	sub	sp, #16
   17b5c:	af00      	add	r7, sp, #0
   17b5e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17b60:	687b      	ldr	r3, [r7, #4]
   17b62:	681b      	ldr	r3, [r3, #0]
   17b64:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   17b66:	687b      	ldr	r3, [r7, #4]
   17b68:	0018      	movs	r0, r3
   17b6a:	4b0f      	ldr	r3, [pc, #60]	; (17ba8 <i2c_master_reset+0x50>)
   17b6c:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   17b6e:	687b      	ldr	r3, [r7, #4]
   17b70:	0018      	movs	r0, r3
   17b72:	4b0e      	ldr	r3, [pc, #56]	; (17bac <i2c_master_reset+0x54>)
   17b74:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   17b76:	4b0e      	ldr	r3, [pc, #56]	; (17bb0 <i2c_master_reset+0x58>)
   17b78:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   17b7a:	687b      	ldr	r3, [r7, #4]
   17b7c:	681b      	ldr	r3, [r3, #0]
   17b7e:	0018      	movs	r0, r3
   17b80:	4b0c      	ldr	r3, [pc, #48]	; (17bb4 <i2c_master_reset+0x5c>)
   17b82:	4798      	blx	r3
   17b84:	0003      	movs	r3, r0
   17b86:	0018      	movs	r0, r3
   17b88:	4b0b      	ldr	r3, [pc, #44]	; (17bb8 <i2c_master_reset+0x60>)
   17b8a:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   17b8c:	4b0b      	ldr	r3, [pc, #44]	; (17bbc <i2c_master_reset+0x64>)
   17b8e:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   17b90:	687b      	ldr	r3, [r7, #4]
   17b92:	0018      	movs	r0, r3
   17b94:	4b04      	ldr	r3, [pc, #16]	; (17ba8 <i2c_master_reset+0x50>)
   17b96:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   17b98:	68fb      	ldr	r3, [r7, #12]
   17b9a:	2201      	movs	r2, #1
   17b9c:	601a      	str	r2, [r3, #0]
}
   17b9e:	46c0      	nop			; (mov r8, r8)
   17ba0:	46bd      	mov	sp, r7
   17ba2:	b004      	add	sp, #16
   17ba4:	bd80      	pop	{r7, pc}
   17ba6:	46c0      	nop			; (mov r8, r8)
   17ba8:	00017599 	.word	0x00017599
   17bac:	000175bd 	.word	0x000175bd
   17bb0:	0001751d 	.word	0x0001751d
   17bb4:	00027521 	.word	0x00027521
   17bb8:	00029e5d 	.word	0x00029e5d
   17bbc:	00017531 	.word	0x00017531

00017bc0 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   17bc0:	b580      	push	{r7, lr}
   17bc2:	b084      	sub	sp, #16
   17bc4:	af00      	add	r7, sp, #0
   17bc6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17bc8:	687b      	ldr	r3, [r7, #4]
   17bca:	681b      	ldr	r3, [r3, #0]
   17bcc:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   17bce:	68fb      	ldr	r3, [r7, #12]
   17bd0:	7e1b      	ldrb	r3, [r3, #24]
   17bd2:	b2db      	uxtb	r3, r3
   17bd4:	001a      	movs	r2, r3
   17bd6:	2302      	movs	r3, #2
   17bd8:	4013      	ands	r3, r2
   17bda:	d00b      	beq.n	17bf4 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   17bdc:	68fb      	ldr	r3, [r7, #12]
   17bde:	2202      	movs	r2, #2
   17be0:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   17be2:	68fb      	ldr	r3, [r7, #12]
   17be4:	8b5b      	ldrh	r3, [r3, #26]
   17be6:	b29b      	uxth	r3, r3
   17be8:	001a      	movs	r2, r3
   17bea:	2302      	movs	r3, #2
   17bec:	4013      	ands	r3, r2
   17bee:	d011      	beq.n	17c14 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   17bf0:	2341      	movs	r3, #65	; 0x41
   17bf2:	e010      	b.n	17c16 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   17bf4:	68fb      	ldr	r3, [r7, #12]
   17bf6:	8b5b      	ldrh	r3, [r3, #26]
   17bf8:	b29b      	uxth	r3, r3
   17bfa:	001a      	movs	r2, r3
   17bfc:	2304      	movs	r3, #4
   17bfe:	4013      	ands	r3, r2
   17c00:	d008      	beq.n	17c14 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   17c02:	68fb      	ldr	r3, [r7, #12]
   17c04:	685b      	ldr	r3, [r3, #4]
   17c06:	22c0      	movs	r2, #192	; 0xc0
   17c08:	0292      	lsls	r2, r2, #10
   17c0a:	431a      	orrs	r2, r3
   17c0c:	68fb      	ldr	r3, [r7, #12]
   17c0e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   17c10:	2318      	movs	r3, #24
   17c12:	e000      	b.n	17c16 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   17c14:	2300      	movs	r3, #0
}
   17c16:	0018      	movs	r0, r3
   17c18:	46bd      	mov	sp, r7
   17c1a:	b004      	add	sp, #16
   17c1c:	bd80      	pop	{r7, pc}

00017c1e <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   17c1e:	b580      	push	{r7, lr}
   17c20:	b084      	sub	sp, #16
   17c22:	af00      	add	r7, sp, #0
   17c24:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17c26:	687b      	ldr	r3, [r7, #4]
   17c28:	681b      	ldr	r3, [r3, #0]
   17c2a:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   17c2c:	230e      	movs	r3, #14
   17c2e:	18fb      	adds	r3, r7, r3
   17c30:	2200      	movs	r2, #0
   17c32:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   17c34:	e00f      	b.n	17c56 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   17c36:	230e      	movs	r3, #14
   17c38:	18fb      	adds	r3, r7, r3
   17c3a:	220e      	movs	r2, #14
   17c3c:	18ba      	adds	r2, r7, r2
   17c3e:	8812      	ldrh	r2, [r2, #0]
   17c40:	3201      	adds	r2, #1
   17c42:	801a      	strh	r2, [r3, #0]
   17c44:	687b      	ldr	r3, [r7, #4]
   17c46:	891b      	ldrh	r3, [r3, #8]
   17c48:	220e      	movs	r2, #14
   17c4a:	18ba      	adds	r2, r7, r2
   17c4c:	8812      	ldrh	r2, [r2, #0]
   17c4e:	429a      	cmp	r2, r3
   17c50:	d301      	bcc.n	17c56 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   17c52:	2312      	movs	r3, #18
   17c54:	e00e      	b.n	17c74 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   17c56:	68bb      	ldr	r3, [r7, #8]
   17c58:	7e1b      	ldrb	r3, [r3, #24]
   17c5a:	b2db      	uxtb	r3, r3
   17c5c:	001a      	movs	r2, r3
   17c5e:	2301      	movs	r3, #1
   17c60:	4013      	ands	r3, r2
   17c62:	d106      	bne.n	17c72 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   17c64:	68bb      	ldr	r3, [r7, #8]
   17c66:	7e1b      	ldrb	r3, [r3, #24]
   17c68:	b2db      	uxtb	r3, r3
   17c6a:	001a      	movs	r2, r3
   17c6c:	2302      	movs	r3, #2
   17c6e:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   17c70:	d0e1      	beq.n	17c36 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   17c72:	2300      	movs	r3, #0
}
   17c74:	0018      	movs	r0, r3
   17c76:	46bd      	mov	sp, r7
   17c78:	b004      	add	sp, #16
   17c7a:	bd80      	pop	{r7, pc}

00017c7c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   17c7c:	b590      	push	{r4, r7, lr}
   17c7e:	b085      	sub	sp, #20
   17c80:	af00      	add	r7, sp, #0
   17c82:	6078      	str	r0, [r7, #4]
   17c84:	000a      	movs	r2, r1
   17c86:	1cfb      	adds	r3, r7, #3
   17c88:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17c8a:	687b      	ldr	r3, [r7, #4]
   17c8c:	681b      	ldr	r3, [r3, #0]
   17c8e:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   17c90:	68fb      	ldr	r3, [r7, #12]
   17c92:	685b      	ldr	r3, [r3, #4]
   17c94:	2280      	movs	r2, #128	; 0x80
   17c96:	02d2      	lsls	r2, r2, #11
   17c98:	431a      	orrs	r2, r3
   17c9a:	68fb      	ldr	r3, [r7, #12]
   17c9c:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   17c9e:	1cfb      	adds	r3, r7, #3
   17ca0:	781a      	ldrb	r2, [r3, #0]
   17ca2:	68fb      	ldr	r3, [r7, #12]
   17ca4:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   17ca6:	230b      	movs	r3, #11
   17ca8:	18fc      	adds	r4, r7, r3
   17caa:	687b      	ldr	r3, [r7, #4]
   17cac:	0018      	movs	r0, r3
   17cae:	4b07      	ldr	r3, [pc, #28]	; (17ccc <_i2c_master_send_hs_master_code+0x50>)
   17cb0:	4798      	blx	r3
   17cb2:	0003      	movs	r3, r0
   17cb4:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   17cb6:	68fb      	ldr	r3, [r7, #12]
   17cb8:	2201      	movs	r2, #1
   17cba:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   17cbc:	230b      	movs	r3, #11
   17cbe:	18fb      	adds	r3, r7, r3
   17cc0:	781b      	ldrb	r3, [r3, #0]
}
   17cc2:	0018      	movs	r0, r3
   17cc4:	46bd      	mov	sp, r7
   17cc6:	b005      	add	sp, #20
   17cc8:	bd90      	pop	{r4, r7, pc}
   17cca:	46c0      	nop			; (mov r8, r8)
   17ccc:	00017c1f 	.word	0x00017c1f

00017cd0 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   17cd0:	b580      	push	{r7, lr}
   17cd2:	af00      	add	r7, sp, #0
   17cd4:	2000      	movs	r0, #0
   17cd6:	4b02      	ldr	r3, [pc, #8]	; (17ce0 <TC3_Handler+0x10>)
   17cd8:	4798      	blx	r3
   17cda:	46c0      	nop			; (mov r8, r8)
   17cdc:	46bd      	mov	sp, r7
   17cde:	bd80      	pop	{r7, pc}
   17ce0:	00017d0d 	.word	0x00017d0d

00017ce4 <TC4_Handler>:
   17ce4:	b580      	push	{r7, lr}
   17ce6:	af00      	add	r7, sp, #0
   17ce8:	2001      	movs	r0, #1
   17cea:	4b02      	ldr	r3, [pc, #8]	; (17cf4 <TC4_Handler+0x10>)
   17cec:	4798      	blx	r3
   17cee:	46c0      	nop			; (mov r8, r8)
   17cf0:	46bd      	mov	sp, r7
   17cf2:	bd80      	pop	{r7, pc}
   17cf4:	00017d0d 	.word	0x00017d0d

00017cf8 <TC5_Handler>:
   17cf8:	b580      	push	{r7, lr}
   17cfa:	af00      	add	r7, sp, #0
   17cfc:	2002      	movs	r0, #2
   17cfe:	4b02      	ldr	r3, [pc, #8]	; (17d08 <TC5_Handler+0x10>)
   17d00:	4798      	blx	r3
   17d02:	46c0      	nop			; (mov r8, r8)
   17d04:	46bd      	mov	sp, r7
   17d06:	bd80      	pop	{r7, pc}
   17d08:	00017d0d 	.word	0x00017d0d

00017d0c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   17d0c:	b580      	push	{r7, lr}
   17d0e:	b084      	sub	sp, #16
   17d10:	af00      	add	r7, sp, #0
   17d12:	0002      	movs	r2, r0
   17d14:	1dfb      	adds	r3, r7, #7
   17d16:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   17d18:	1dfb      	adds	r3, r7, #7
   17d1a:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   17d1c:	4b28      	ldr	r3, [pc, #160]	; (17dc0 <_tc_interrupt_handler+0xb4>)
   17d1e:	0092      	lsls	r2, r2, #2
   17d20:	58d3      	ldr	r3, [r2, r3]
   17d22:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17d24:	68fb      	ldr	r3, [r7, #12]
   17d26:	681b      	ldr	r3, [r3, #0]
   17d28:	7b9b      	ldrb	r3, [r3, #14]
   17d2a:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   17d2c:	68fa      	ldr	r2, [r7, #12]
   17d2e:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17d30:	4013      	ands	r3, r2
   17d32:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   17d34:	68fb      	ldr	r3, [r7, #12]
   17d36:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17d38:	230b      	movs	r3, #11
   17d3a:	18fb      	adds	r3, r7, r3
   17d3c:	400a      	ands	r2, r1
   17d3e:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   17d40:	230b      	movs	r3, #11
   17d42:	18fb      	adds	r3, r7, r3
   17d44:	781b      	ldrb	r3, [r3, #0]
   17d46:	2201      	movs	r2, #1
   17d48:	4013      	ands	r3, r2
   17d4a:	d008      	beq.n	17d5e <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   17d4c:	68fb      	ldr	r3, [r7, #12]
   17d4e:	689b      	ldr	r3, [r3, #8]
   17d50:	68fa      	ldr	r2, [r7, #12]
   17d52:	0010      	movs	r0, r2
   17d54:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   17d56:	68fb      	ldr	r3, [r7, #12]
   17d58:	681b      	ldr	r3, [r3, #0]
   17d5a:	2201      	movs	r2, #1
   17d5c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   17d5e:	230b      	movs	r3, #11
   17d60:	18fb      	adds	r3, r7, r3
   17d62:	781b      	ldrb	r3, [r3, #0]
   17d64:	2202      	movs	r2, #2
   17d66:	4013      	ands	r3, r2
   17d68:	d008      	beq.n	17d7c <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   17d6a:	68fb      	ldr	r3, [r7, #12]
   17d6c:	68db      	ldr	r3, [r3, #12]
   17d6e:	68fa      	ldr	r2, [r7, #12]
   17d70:	0010      	movs	r0, r2
   17d72:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   17d74:	68fb      	ldr	r3, [r7, #12]
   17d76:	681b      	ldr	r3, [r3, #0]
   17d78:	2202      	movs	r2, #2
   17d7a:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   17d7c:	230b      	movs	r3, #11
   17d7e:	18fb      	adds	r3, r7, r3
   17d80:	781b      	ldrb	r3, [r3, #0]
   17d82:	2210      	movs	r2, #16
   17d84:	4013      	ands	r3, r2
   17d86:	d008      	beq.n	17d9a <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   17d88:	68fb      	ldr	r3, [r7, #12]
   17d8a:	691b      	ldr	r3, [r3, #16]
   17d8c:	68fa      	ldr	r2, [r7, #12]
   17d8e:	0010      	movs	r0, r2
   17d90:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   17d92:	68fb      	ldr	r3, [r7, #12]
   17d94:	681b      	ldr	r3, [r3, #0]
   17d96:	2210      	movs	r2, #16
   17d98:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   17d9a:	230b      	movs	r3, #11
   17d9c:	18fb      	adds	r3, r7, r3
   17d9e:	781b      	ldrb	r3, [r3, #0]
   17da0:	2220      	movs	r2, #32
   17da2:	4013      	ands	r3, r2
   17da4:	d008      	beq.n	17db8 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   17da6:	68fb      	ldr	r3, [r7, #12]
   17da8:	695b      	ldr	r3, [r3, #20]
   17daa:	68fa      	ldr	r2, [r7, #12]
   17dac:	0010      	movs	r0, r2
   17dae:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   17db0:	68fb      	ldr	r3, [r7, #12]
   17db2:	681b      	ldr	r3, [r3, #0]
   17db4:	2220      	movs	r2, #32
   17db6:	739a      	strb	r2, [r3, #14]
	}
}
   17db8:	46c0      	nop			; (mov r8, r8)
   17dba:	46bd      	mov	sp, r7
   17dbc:	b004      	add	sp, #16
   17dbe:	bd80      	pop	{r7, pc}
   17dc0:	200049ec 	.word	0x200049ec

00017dc4 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   17dc4:	b580      	push	{r7, lr}
   17dc6:	b084      	sub	sp, #16
   17dc8:	af00      	add	r7, sp, #0
   17dca:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   17dcc:	2300      	movs	r3, #0
   17dce:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   17dd0:	687b      	ldr	r3, [r7, #4]
   17dd2:	2b00      	cmp	r3, #0
   17dd4:	d101      	bne.n	17dda <FreeRTOS_CLIRegisterCommand+0x16>
   17dd6:	b672      	cpsid	i
   17dd8:	e7fe      	b.n	17dd8 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   17dda:	2008      	movs	r0, #8
   17ddc:	4b11      	ldr	r3, [pc, #68]	; (17e24 <FreeRTOS_CLIRegisterCommand+0x60>)
   17dde:	4798      	blx	r3
   17de0:	0003      	movs	r3, r0
   17de2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   17de4:	68bb      	ldr	r3, [r7, #8]
   17de6:	2b00      	cmp	r3, #0
   17de8:	d101      	bne.n	17dee <FreeRTOS_CLIRegisterCommand+0x2a>
   17dea:	b672      	cpsid	i
   17dec:	e7fe      	b.n	17dec <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   17dee:	68bb      	ldr	r3, [r7, #8]
   17df0:	2b00      	cmp	r3, #0
   17df2:	d012      	beq.n	17e1a <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   17df4:	4b0c      	ldr	r3, [pc, #48]	; (17e28 <FreeRTOS_CLIRegisterCommand+0x64>)
   17df6:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   17df8:	68bb      	ldr	r3, [r7, #8]
   17dfa:	687a      	ldr	r2, [r7, #4]
   17dfc:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   17dfe:	68bb      	ldr	r3, [r7, #8]
   17e00:	2200      	movs	r2, #0
   17e02:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   17e04:	4b09      	ldr	r3, [pc, #36]	; (17e2c <FreeRTOS_CLIRegisterCommand+0x68>)
   17e06:	681b      	ldr	r3, [r3, #0]
   17e08:	68ba      	ldr	r2, [r7, #8]
   17e0a:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   17e0c:	4b07      	ldr	r3, [pc, #28]	; (17e2c <FreeRTOS_CLIRegisterCommand+0x68>)
   17e0e:	68ba      	ldr	r2, [r7, #8]
   17e10:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   17e12:	4b07      	ldr	r3, [pc, #28]	; (17e30 <FreeRTOS_CLIRegisterCommand+0x6c>)
   17e14:	4798      	blx	r3

		xReturn = pdPASS;
   17e16:	2301      	movs	r3, #1
   17e18:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   17e1a:	68fb      	ldr	r3, [r7, #12]
}
   17e1c:	0018      	movs	r0, r3
   17e1e:	46bd      	mov	sp, r7
   17e20:	b004      	add	sp, #16
   17e22:	bd80      	pop	{r7, pc}
   17e24:	0001a1d1 	.word	0x0001a1d1
   17e28:	0001a099 	.word	0x0001a099
   17e2c:	20000100 	.word	0x20000100
   17e30:	0001a0bd 	.word	0x0001a0bd

00017e34 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   17e34:	b580      	push	{r7, lr}
   17e36:	b088      	sub	sp, #32
   17e38:	af00      	add	r7, sp, #0
   17e3a:	60f8      	str	r0, [r7, #12]
   17e3c:	60b9      	str	r1, [r7, #8]
   17e3e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   17e40:	2301      	movs	r3, #1
   17e42:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   17e44:	4b3d      	ldr	r3, [pc, #244]	; (17f3c <FreeRTOS_CLIProcessCommand+0x108>)
   17e46:	681b      	ldr	r3, [r3, #0]
   17e48:	2b00      	cmp	r3, #0
   17e4a:	d144      	bne.n	17ed6 <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   17e4c:	4b3b      	ldr	r3, [pc, #236]	; (17f3c <FreeRTOS_CLIProcessCommand+0x108>)
   17e4e:	4a3c      	ldr	r2, [pc, #240]	; (17f40 <FreeRTOS_CLIProcessCommand+0x10c>)
   17e50:	601a      	str	r2, [r3, #0]
   17e52:	e03a      	b.n	17eca <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   17e54:	4b39      	ldr	r3, [pc, #228]	; (17f3c <FreeRTOS_CLIProcessCommand+0x108>)
   17e56:	681b      	ldr	r3, [r3, #0]
   17e58:	681b      	ldr	r3, [r3, #0]
   17e5a:	681b      	ldr	r3, [r3, #0]
   17e5c:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   17e5e:	69bb      	ldr	r3, [r7, #24]
   17e60:	0018      	movs	r0, r3
   17e62:	4b38      	ldr	r3, [pc, #224]	; (17f44 <FreeRTOS_CLIProcessCommand+0x110>)
   17e64:	4798      	blx	r3
   17e66:	0003      	movs	r3, r0
   17e68:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   17e6a:	68fa      	ldr	r2, [r7, #12]
   17e6c:	697b      	ldr	r3, [r7, #20]
   17e6e:	18d3      	adds	r3, r2, r3
   17e70:	781b      	ldrb	r3, [r3, #0]
   17e72:	2b20      	cmp	r3, #32
   17e74:	d005      	beq.n	17e82 <FreeRTOS_CLIProcessCommand+0x4e>
   17e76:	68fa      	ldr	r2, [r7, #12]
   17e78:	697b      	ldr	r3, [r7, #20]
   17e7a:	18d3      	adds	r3, r2, r3
   17e7c:	781b      	ldrb	r3, [r3, #0]
   17e7e:	2b00      	cmp	r3, #0
   17e80:	d11e      	bne.n	17ec0 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   17e82:	697a      	ldr	r2, [r7, #20]
   17e84:	69b9      	ldr	r1, [r7, #24]
   17e86:	68fb      	ldr	r3, [r7, #12]
   17e88:	0018      	movs	r0, r3
   17e8a:	4b2f      	ldr	r3, [pc, #188]	; (17f48 <FreeRTOS_CLIProcessCommand+0x114>)
   17e8c:	4798      	blx	r3
   17e8e:	1e03      	subs	r3, r0, #0
   17e90:	d116      	bne.n	17ec0 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   17e92:	4b2a      	ldr	r3, [pc, #168]	; (17f3c <FreeRTOS_CLIProcessCommand+0x108>)
   17e94:	681b      	ldr	r3, [r3, #0]
   17e96:	681b      	ldr	r3, [r3, #0]
   17e98:	7b1b      	ldrb	r3, [r3, #12]
   17e9a:	b25b      	sxtb	r3, r3
   17e9c:	2b00      	cmp	r3, #0
   17e9e:	db19      	blt.n	17ed4 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   17ea0:	68fb      	ldr	r3, [r7, #12]
   17ea2:	0018      	movs	r0, r3
   17ea4:	4b29      	ldr	r3, [pc, #164]	; (17f4c <FreeRTOS_CLIProcessCommand+0x118>)
   17ea6:	4798      	blx	r3
   17ea8:	0003      	movs	r3, r0
   17eaa:	001a      	movs	r2, r3
   17eac:	4b23      	ldr	r3, [pc, #140]	; (17f3c <FreeRTOS_CLIProcessCommand+0x108>)
   17eae:	681b      	ldr	r3, [r3, #0]
   17eb0:	681b      	ldr	r3, [r3, #0]
   17eb2:	7b1b      	ldrb	r3, [r3, #12]
   17eb4:	b25b      	sxtb	r3, r3
   17eb6:	429a      	cmp	r2, r3
   17eb8:	d00c      	beq.n	17ed4 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   17eba:	2300      	movs	r3, #0
   17ebc:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   17ebe:	e009      	b.n	17ed4 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   17ec0:	4b1e      	ldr	r3, [pc, #120]	; (17f3c <FreeRTOS_CLIProcessCommand+0x108>)
   17ec2:	681b      	ldr	r3, [r3, #0]
   17ec4:	685a      	ldr	r2, [r3, #4]
   17ec6:	4b1d      	ldr	r3, [pc, #116]	; (17f3c <FreeRTOS_CLIProcessCommand+0x108>)
   17ec8:	601a      	str	r2, [r3, #0]
   17eca:	4b1c      	ldr	r3, [pc, #112]	; (17f3c <FreeRTOS_CLIProcessCommand+0x108>)
   17ecc:	681b      	ldr	r3, [r3, #0]
   17ece:	2b00      	cmp	r3, #0
   17ed0:	d1c0      	bne.n	17e54 <FreeRTOS_CLIProcessCommand+0x20>
   17ed2:	e000      	b.n	17ed6 <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   17ed4:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   17ed6:	4b19      	ldr	r3, [pc, #100]	; (17f3c <FreeRTOS_CLIProcessCommand+0x108>)
   17ed8:	681b      	ldr	r3, [r3, #0]
   17eda:	2b00      	cmp	r3, #0
   17edc:	d00c      	beq.n	17ef8 <FreeRTOS_CLIProcessCommand+0xc4>
   17ede:	69fb      	ldr	r3, [r7, #28]
   17ee0:	2b00      	cmp	r3, #0
   17ee2:	d109      	bne.n	17ef8 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   17ee4:	687a      	ldr	r2, [r7, #4]
   17ee6:	491a      	ldr	r1, [pc, #104]	; (17f50 <FreeRTOS_CLIProcessCommand+0x11c>)
   17ee8:	68bb      	ldr	r3, [r7, #8]
   17eea:	0018      	movs	r0, r3
   17eec:	4b19      	ldr	r3, [pc, #100]	; (17f54 <FreeRTOS_CLIProcessCommand+0x120>)
   17eee:	4798      	blx	r3
		pxCommand = NULL;
   17ef0:	4b12      	ldr	r3, [pc, #72]	; (17f3c <FreeRTOS_CLIProcessCommand+0x108>)
   17ef2:	2200      	movs	r2, #0
   17ef4:	601a      	str	r2, [r3, #0]
   17ef6:	e01c      	b.n	17f32 <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   17ef8:	4b10      	ldr	r3, [pc, #64]	; (17f3c <FreeRTOS_CLIProcessCommand+0x108>)
   17efa:	681b      	ldr	r3, [r3, #0]
   17efc:	2b00      	cmp	r3, #0
   17efe:	d010      	beq.n	17f22 <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   17f00:	4b0e      	ldr	r3, [pc, #56]	; (17f3c <FreeRTOS_CLIProcessCommand+0x108>)
   17f02:	681b      	ldr	r3, [r3, #0]
   17f04:	681b      	ldr	r3, [r3, #0]
   17f06:	689b      	ldr	r3, [r3, #8]
   17f08:	68fa      	ldr	r2, [r7, #12]
   17f0a:	6879      	ldr	r1, [r7, #4]
   17f0c:	68b8      	ldr	r0, [r7, #8]
   17f0e:	4798      	blx	r3
   17f10:	0003      	movs	r3, r0
   17f12:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   17f14:	69fb      	ldr	r3, [r7, #28]
   17f16:	2b00      	cmp	r3, #0
   17f18:	d10b      	bne.n	17f32 <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   17f1a:	4b08      	ldr	r3, [pc, #32]	; (17f3c <FreeRTOS_CLIProcessCommand+0x108>)
   17f1c:	2200      	movs	r2, #0
   17f1e:	601a      	str	r2, [r3, #0]
   17f20:	e007      	b.n	17f32 <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   17f22:	687a      	ldr	r2, [r7, #4]
   17f24:	490c      	ldr	r1, [pc, #48]	; (17f58 <FreeRTOS_CLIProcessCommand+0x124>)
   17f26:	68bb      	ldr	r3, [r7, #8]
   17f28:	0018      	movs	r0, r3
   17f2a:	4b0a      	ldr	r3, [pc, #40]	; (17f54 <FreeRTOS_CLIProcessCommand+0x120>)
   17f2c:	4798      	blx	r3
		xReturn = pdFALSE;
   17f2e:	2300      	movs	r3, #0
   17f30:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   17f32:	69fb      	ldr	r3, [r7, #28]
}
   17f34:	0018      	movs	r0, r3
   17f36:	46bd      	mov	sp, r7
   17f38:	b008      	add	sp, #32
   17f3a:	bd80      	pop	{r7, pc}
   17f3c:	20000cd0 	.word	0x20000cd0
   17f40:	200000f8 	.word	0x200000f8
   17f44:	00034c3b 	.word	0x00034c3b
   17f48:	00034c49 	.word	0x00034c49
   17f4c:	00017fbd 	.word	0x00017fbd
   17f50:	00036e00 	.word	0x00036e00
   17f54:	00034c6b 	.word	0x00034c6b
   17f58:	00036e58 	.word	0x00036e58

00017f5c <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   17f5c:	b580      	push	{r7, lr}
   17f5e:	b086      	sub	sp, #24
   17f60:	af00      	add	r7, sp, #0
   17f62:	60f8      	str	r0, [r7, #12]
   17f64:	60b9      	str	r1, [r7, #8]
   17f66:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   17f68:	4b11      	ldr	r3, [pc, #68]	; (17fb0 <prvHelpCommand+0x54>)
   17f6a:	681b      	ldr	r3, [r3, #0]
   17f6c:	2b00      	cmp	r3, #0
   17f6e:	d102      	bne.n	17f76 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   17f70:	4b0f      	ldr	r3, [pc, #60]	; (17fb0 <prvHelpCommand+0x54>)
   17f72:	4a10      	ldr	r2, [pc, #64]	; (17fb4 <prvHelpCommand+0x58>)
   17f74:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   17f76:	4b0e      	ldr	r3, [pc, #56]	; (17fb0 <prvHelpCommand+0x54>)
   17f78:	681b      	ldr	r3, [r3, #0]
   17f7a:	681b      	ldr	r3, [r3, #0]
   17f7c:	6859      	ldr	r1, [r3, #4]
   17f7e:	68ba      	ldr	r2, [r7, #8]
   17f80:	68fb      	ldr	r3, [r7, #12]
   17f82:	0018      	movs	r0, r3
   17f84:	4b0c      	ldr	r3, [pc, #48]	; (17fb8 <prvHelpCommand+0x5c>)
   17f86:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   17f88:	4b09      	ldr	r3, [pc, #36]	; (17fb0 <prvHelpCommand+0x54>)
   17f8a:	681b      	ldr	r3, [r3, #0]
   17f8c:	685a      	ldr	r2, [r3, #4]
   17f8e:	4b08      	ldr	r3, [pc, #32]	; (17fb0 <prvHelpCommand+0x54>)
   17f90:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   17f92:	4b07      	ldr	r3, [pc, #28]	; (17fb0 <prvHelpCommand+0x54>)
   17f94:	681b      	ldr	r3, [r3, #0]
   17f96:	2b00      	cmp	r3, #0
   17f98:	d102      	bne.n	17fa0 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   17f9a:	2300      	movs	r3, #0
   17f9c:	617b      	str	r3, [r7, #20]
   17f9e:	e001      	b.n	17fa4 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   17fa0:	2301      	movs	r3, #1
   17fa2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   17fa4:	697b      	ldr	r3, [r7, #20]
}
   17fa6:	0018      	movs	r0, r3
   17fa8:	46bd      	mov	sp, r7
   17faa:	b006      	add	sp, #24
   17fac:	bd80      	pop	{r7, pc}
   17fae:	46c0      	nop			; (mov r8, r8)
   17fb0:	20000cd4 	.word	0x20000cd4
   17fb4:	200000f8 	.word	0x200000f8
   17fb8:	00034c6b 	.word	0x00034c6b

00017fbc <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   17fbc:	b580      	push	{r7, lr}
   17fbe:	b084      	sub	sp, #16
   17fc0:	af00      	add	r7, sp, #0
   17fc2:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   17fc4:	230f      	movs	r3, #15
   17fc6:	18fb      	adds	r3, r7, r3
   17fc8:	2200      	movs	r2, #0
   17fca:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   17fcc:	2300      	movs	r3, #0
   17fce:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   17fd0:	e018      	b.n	18004 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   17fd2:	687b      	ldr	r3, [r7, #4]
   17fd4:	781b      	ldrb	r3, [r3, #0]
   17fd6:	2b20      	cmp	r3, #32
   17fd8:	d10f      	bne.n	17ffa <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   17fda:	68bb      	ldr	r3, [r7, #8]
   17fdc:	2b01      	cmp	r3, #1
   17fde:	d00e      	beq.n	17ffe <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   17fe0:	230f      	movs	r3, #15
   17fe2:	18fb      	adds	r3, r7, r3
   17fe4:	781b      	ldrb	r3, [r3, #0]
   17fe6:	b25b      	sxtb	r3, r3
   17fe8:	b2db      	uxtb	r3, r3
   17fea:	3301      	adds	r3, #1
   17fec:	b2da      	uxtb	r2, r3
   17fee:	230f      	movs	r3, #15
   17ff0:	18fb      	adds	r3, r7, r3
   17ff2:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   17ff4:	2301      	movs	r3, #1
   17ff6:	60bb      	str	r3, [r7, #8]
   17ff8:	e001      	b.n	17ffe <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   17ffa:	2300      	movs	r3, #0
   17ffc:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   17ffe:	687b      	ldr	r3, [r7, #4]
   18000:	3301      	adds	r3, #1
   18002:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   18004:	687b      	ldr	r3, [r7, #4]
   18006:	781b      	ldrb	r3, [r3, #0]
   18008:	2b00      	cmp	r3, #0
   1800a:	d1e2      	bne.n	17fd2 <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   1800c:	68bb      	ldr	r3, [r7, #8]
   1800e:	2b01      	cmp	r3, #1
   18010:	d109      	bne.n	18026 <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   18012:	230f      	movs	r3, #15
   18014:	18fb      	adds	r3, r7, r3
   18016:	781b      	ldrb	r3, [r3, #0]
   18018:	b25b      	sxtb	r3, r3
   1801a:	b2db      	uxtb	r3, r3
   1801c:	3b01      	subs	r3, #1
   1801e:	b2da      	uxtb	r2, r3
   18020:	230f      	movs	r3, #15
   18022:	18fb      	adds	r3, r7, r3
   18024:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   18026:	230f      	movs	r3, #15
   18028:	18fb      	adds	r3, r7, r3
   1802a:	781b      	ldrb	r3, [r3, #0]
   1802c:	b25b      	sxtb	r3, r3
}
   1802e:	0018      	movs	r0, r3
   18030:	46bd      	mov	sp, r7
   18032:	b004      	add	sp, #16
   18034:	bd80      	pop	{r7, pc}
	...

00018038 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   18038:	b580      	push	{r7, lr}
   1803a:	b082      	sub	sp, #8
   1803c:	af00      	add	r7, sp, #0
   1803e:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   18040:	687b      	ldr	r3, [r7, #4]
   18042:	0018      	movs	r0, r3
   18044:	4b03      	ldr	r3, [pc, #12]	; (18054 <prvTraceGetQueueNumber+0x1c>)
   18046:	4798      	blx	r3
   18048:	0003      	movs	r3, r0
}
   1804a:	0018      	movs	r0, r3
   1804c:	46bd      	mov	sp, r7
   1804e:	b002      	add	sp, #8
   18050:	bd80      	pop	{r7, pc}
   18052:	46c0      	nop			; (mov r8, r8)
   18054:	0001b7f5 	.word	0x0001b7f5

00018058 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   18058:	b580      	push	{r7, lr}
   1805a:	b082      	sub	sp, #8
   1805c:	af00      	add	r7, sp, #0
   1805e:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   18060:	687b      	ldr	r3, [r7, #4]
   18062:	0018      	movs	r0, r3
   18064:	4b03      	ldr	r3, [pc, #12]	; (18074 <prvTraceGetQueueType+0x1c>)
   18066:	4798      	blx	r3
   18068:	0003      	movs	r3, r0
}
   1806a:	0018      	movs	r0, r3
   1806c:	46bd      	mov	sp, r7
   1806e:	b002      	add	sp, #8
   18070:	bd80      	pop	{r7, pc}
   18072:	46c0      	nop			; (mov r8, r8)
   18074:	0001b821 	.word	0x0001b821

00018078 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   18078:	b580      	push	{r7, lr}
   1807a:	b082      	sub	sp, #8
   1807c:	af00      	add	r7, sp, #0
   1807e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   18080:	687b      	ldr	r3, [r7, #4]
   18082:	0018      	movs	r0, r3
   18084:	4b03      	ldr	r3, [pc, #12]	; (18094 <prvTraceGetTaskNumberLow16+0x1c>)
   18086:	4798      	blx	r3
   18088:	0003      	movs	r3, r0
   1808a:	b29b      	uxth	r3, r3
}
   1808c:	0018      	movs	r0, r3
   1808e:	46bd      	mov	sp, r7
   18090:	b002      	add	sp, #8
   18092:	bd80      	pop	{r7, pc}
   18094:	0001cb51 	.word	0x0001cb51

00018098 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   18098:	b580      	push	{r7, lr}
   1809a:	b082      	sub	sp, #8
   1809c:	af00      	add	r7, sp, #0
   1809e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   180a0:	687b      	ldr	r3, [r7, #4]
   180a2:	0018      	movs	r0, r3
   180a4:	4b04      	ldr	r3, [pc, #16]	; (180b8 <prvTraceGetTaskNumberHigh16+0x20>)
   180a6:	4798      	blx	r3
   180a8:	0003      	movs	r3, r0
   180aa:	0c1b      	lsrs	r3, r3, #16
   180ac:	b29b      	uxth	r3, r3
}
   180ae:	0018      	movs	r0, r3
   180b0:	46bd      	mov	sp, r7
   180b2:	b002      	add	sp, #8
   180b4:	bd80      	pop	{r7, pc}
   180b6:	46c0      	nop			; (mov r8, r8)
   180b8:	0001cb51 	.word	0x0001cb51

000180bc <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   180bc:	b580      	push	{r7, lr}
   180be:	b082      	sub	sp, #8
   180c0:	af00      	add	r7, sp, #0
   180c2:	6078      	str	r0, [r7, #4]
   180c4:	000a      	movs	r2, r1
   180c6:	1cbb      	adds	r3, r7, #2
   180c8:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   180ca:	687b      	ldr	r3, [r7, #4]
   180cc:	0018      	movs	r0, r3
   180ce:	4b08      	ldr	r3, [pc, #32]	; (180f0 <prvTraceSetTaskNumberLow16+0x34>)
   180d0:	4798      	blx	r3
   180d2:	0003      	movs	r3, r0
   180d4:	0c1b      	lsrs	r3, r3, #16
   180d6:	041a      	lsls	r2, r3, #16
   180d8:	1cbb      	adds	r3, r7, #2
   180da:	881b      	ldrh	r3, [r3, #0]
   180dc:	431a      	orrs	r2, r3
   180de:	687b      	ldr	r3, [r7, #4]
   180e0:	0011      	movs	r1, r2
   180e2:	0018      	movs	r0, r3
   180e4:	4b03      	ldr	r3, [pc, #12]	; (180f4 <prvTraceSetTaskNumberLow16+0x38>)
   180e6:	4798      	blx	r3
}
   180e8:	46c0      	nop			; (mov r8, r8)
   180ea:	46bd      	mov	sp, r7
   180ec:	b002      	add	sp, #8
   180ee:	bd80      	pop	{r7, pc}
   180f0:	0001cb51 	.word	0x0001cb51
   180f4:	0001cb79 	.word	0x0001cb79

000180f8 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   180f8:	b580      	push	{r7, lr}
   180fa:	b082      	sub	sp, #8
   180fc:	af00      	add	r7, sp, #0
   180fe:	6078      	str	r0, [r7, #4]
   18100:	000a      	movs	r2, r1
   18102:	1cbb      	adds	r3, r7, #2
   18104:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   18106:	687b      	ldr	r3, [r7, #4]
   18108:	0018      	movs	r0, r3
   1810a:	4b09      	ldr	r3, [pc, #36]	; (18130 <prvTraceSetTaskNumberHigh16+0x38>)
   1810c:	4798      	blx	r3
   1810e:	0003      	movs	r3, r0
   18110:	041b      	lsls	r3, r3, #16
   18112:	0c1a      	lsrs	r2, r3, #16
   18114:	1cbb      	adds	r3, r7, #2
   18116:	881b      	ldrh	r3, [r3, #0]
   18118:	041b      	lsls	r3, r3, #16
   1811a:	431a      	orrs	r2, r3
   1811c:	687b      	ldr	r3, [r7, #4]
   1811e:	0011      	movs	r1, r2
   18120:	0018      	movs	r0, r3
   18122:	4b04      	ldr	r3, [pc, #16]	; (18134 <prvTraceSetTaskNumberHigh16+0x3c>)
   18124:	4798      	blx	r3
}
   18126:	46c0      	nop			; (mov r8, r8)
   18128:	46bd      	mov	sp, r7
   1812a:	b002      	add	sp, #8
   1812c:	bd80      	pop	{r7, pc}
   1812e:	46c0      	nop			; (mov r8, r8)
   18130:	0001cb51 	.word	0x0001cb51
   18134:	0001cb79 	.word	0x0001cb79

00018138 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   18138:	b580      	push	{r7, lr}
   1813a:	b082      	sub	sp, #8
   1813c:	af00      	add	r7, sp, #0
   1813e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   18140:	687b      	ldr	r3, [r7, #4]
   18142:	0018      	movs	r0, r3
   18144:	4b03      	ldr	r3, [pc, #12]	; (18154 <prvTraceGetQueueNumberLow16+0x1c>)
   18146:	4798      	blx	r3
   18148:	0003      	movs	r3, r0
   1814a:	b29b      	uxth	r3, r3
}
   1814c:	0018      	movs	r0, r3
   1814e:	46bd      	mov	sp, r7
   18150:	b002      	add	sp, #8
   18152:	bd80      	pop	{r7, pc}
   18154:	00018039 	.word	0x00018039

00018158 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   18158:	b580      	push	{r7, lr}
   1815a:	b082      	sub	sp, #8
   1815c:	af00      	add	r7, sp, #0
   1815e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   18160:	687b      	ldr	r3, [r7, #4]
   18162:	0018      	movs	r0, r3
   18164:	4b04      	ldr	r3, [pc, #16]	; (18178 <prvTraceGetQueueNumberHigh16+0x20>)
   18166:	4798      	blx	r3
   18168:	0003      	movs	r3, r0
   1816a:	0c1b      	lsrs	r3, r3, #16
   1816c:	b29b      	uxth	r3, r3
}
   1816e:	0018      	movs	r0, r3
   18170:	46bd      	mov	sp, r7
   18172:	b002      	add	sp, #8
   18174:	bd80      	pop	{r7, pc}
   18176:	46c0      	nop			; (mov r8, r8)
   18178:	00018039 	.word	0x00018039

0001817c <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   1817c:	b580      	push	{r7, lr}
   1817e:	b082      	sub	sp, #8
   18180:	af00      	add	r7, sp, #0
   18182:	6078      	str	r0, [r7, #4]
   18184:	000a      	movs	r2, r1
   18186:	1cbb      	adds	r3, r7, #2
   18188:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   1818a:	687b      	ldr	r3, [r7, #4]
   1818c:	0018      	movs	r0, r3
   1818e:	4b08      	ldr	r3, [pc, #32]	; (181b0 <prvTraceSetQueueNumberLow16+0x34>)
   18190:	4798      	blx	r3
   18192:	0003      	movs	r3, r0
   18194:	0c1b      	lsrs	r3, r3, #16
   18196:	041a      	lsls	r2, r3, #16
   18198:	1cbb      	adds	r3, r7, #2
   1819a:	881b      	ldrh	r3, [r3, #0]
   1819c:	431a      	orrs	r2, r3
   1819e:	687b      	ldr	r3, [r7, #4]
   181a0:	0011      	movs	r1, r2
   181a2:	0018      	movs	r0, r3
   181a4:	4b03      	ldr	r3, [pc, #12]	; (181b4 <prvTraceSetQueueNumberLow16+0x38>)
   181a6:	4798      	blx	r3
}
   181a8:	46c0      	nop			; (mov r8, r8)
   181aa:	46bd      	mov	sp, r7
   181ac:	b002      	add	sp, #8
   181ae:	bd80      	pop	{r7, pc}
   181b0:	00018039 	.word	0x00018039
   181b4:	0001b809 	.word	0x0001b809

000181b8 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   181b8:	b580      	push	{r7, lr}
   181ba:	b082      	sub	sp, #8
   181bc:	af00      	add	r7, sp, #0
   181be:	6078      	str	r0, [r7, #4]
   181c0:	000a      	movs	r2, r1
   181c2:	1cbb      	adds	r3, r7, #2
   181c4:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   181c6:	687b      	ldr	r3, [r7, #4]
   181c8:	0018      	movs	r0, r3
   181ca:	4b09      	ldr	r3, [pc, #36]	; (181f0 <prvTraceSetQueueNumberHigh16+0x38>)
   181cc:	4798      	blx	r3
   181ce:	0003      	movs	r3, r0
   181d0:	041b      	lsls	r3, r3, #16
   181d2:	0c1a      	lsrs	r2, r3, #16
   181d4:	1cbb      	adds	r3, r7, #2
   181d6:	881b      	ldrh	r3, [r3, #0]
   181d8:	041b      	lsls	r3, r3, #16
   181da:	431a      	orrs	r2, r3
   181dc:	687b      	ldr	r3, [r7, #4]
   181de:	0011      	movs	r1, r2
   181e0:	0018      	movs	r0, r3
   181e2:	4b04      	ldr	r3, [pc, #16]	; (181f4 <prvTraceSetQueueNumberHigh16+0x3c>)
   181e4:	4798      	blx	r3
}
   181e6:	46c0      	nop			; (mov r8, r8)
   181e8:	46bd      	mov	sp, r7
   181ea:	b002      	add	sp, #8
   181ec:	bd80      	pop	{r7, pc}
   181ee:	46c0      	nop			; (mov r8, r8)
   181f0:	00018039 	.word	0x00018039
   181f4:	0001b809 	.word	0x0001b809

000181f8 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   181f8:	b580      	push	{r7, lr}
   181fa:	b084      	sub	sp, #16
   181fc:	af00      	add	r7, sp, #0
   181fe:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   18200:	2300      	movs	r3, #0
   18202:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   18204:	2300      	movs	r3, #0
   18206:	60bb      	str	r3, [r7, #8]
   18208:	e018      	b.n	1823c <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   1820a:	4b14      	ldr	r3, [pc, #80]	; (1825c <prvAddTaskToStackMonitor+0x64>)
   1820c:	68ba      	ldr	r2, [r7, #8]
   1820e:	00d2      	lsls	r2, r2, #3
   18210:	58d3      	ldr	r3, [r2, r3]
   18212:	2b00      	cmp	r3, #0
   18214:	d10f      	bne.n	18236 <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   18216:	4b11      	ldr	r3, [pc, #68]	; (1825c <prvAddTaskToStackMonitor+0x64>)
   18218:	68ba      	ldr	r2, [r7, #8]
   1821a:	00d2      	lsls	r2, r2, #3
   1821c:	6879      	ldr	r1, [r7, #4]
   1821e:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   18220:	4a0e      	ldr	r2, [pc, #56]	; (1825c <prvAddTaskToStackMonitor+0x64>)
   18222:	68bb      	ldr	r3, [r7, #8]
   18224:	00db      	lsls	r3, r3, #3
   18226:	18d3      	adds	r3, r2, r3
   18228:	3304      	adds	r3, #4
   1822a:	2201      	movs	r2, #1
   1822c:	4252      	negs	r2, r2
   1822e:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   18230:	2301      	movs	r3, #1
   18232:	60fb      	str	r3, [r7, #12]
			break;
   18234:	e005      	b.n	18242 <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   18236:	68bb      	ldr	r3, [r7, #8]
   18238:	3301      	adds	r3, #1
   1823a:	60bb      	str	r3, [r7, #8]
   1823c:	68bb      	ldr	r3, [r7, #8]
   1823e:	2b09      	cmp	r3, #9
   18240:	dde3      	ble.n	1820a <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   18242:	68fb      	ldr	r3, [r7, #12]
   18244:	2b00      	cmp	r3, #0
   18246:	d104      	bne.n	18252 <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   18248:	4b05      	ldr	r3, [pc, #20]	; (18260 <prvAddTaskToStackMonitor+0x68>)
   1824a:	681b      	ldr	r3, [r3, #0]
   1824c:	1c5a      	adds	r2, r3, #1
   1824e:	4b04      	ldr	r3, [pc, #16]	; (18260 <prvAddTaskToStackMonitor+0x68>)
   18250:	601a      	str	r2, [r3, #0]
	}
}
   18252:	46c0      	nop			; (mov r8, r8)
   18254:	46bd      	mov	sp, r7
   18256:	b004      	add	sp, #16
   18258:	bd80      	pop	{r7, pc}
   1825a:	46c0      	nop			; (mov r8, r8)
   1825c:	20000cdc 	.word	0x20000cdc
   18260:	20000d2c 	.word	0x20000d2c

00018264 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   18264:	b590      	push	{r4, r7, lr}
   18266:	b085      	sub	sp, #20
   18268:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   1826a:	2300      	movs	r3, #0
   1826c:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   1826e:	4b2b      	ldr	r3, [pc, #172]	; (1831c <prvReportStackUsage+0xb8>)
   18270:	681b      	ldr	r3, [r3, #0]
   18272:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   18274:	4b29      	ldr	r3, [pc, #164]	; (1831c <prvReportStackUsage+0xb8>)
   18276:	681a      	ldr	r2, [r3, #0]
   18278:	4b29      	ldr	r3, [pc, #164]	; (18320 <prvReportStackUsage+0xbc>)
   1827a:	00d2      	lsls	r2, r2, #3
   1827c:	58d3      	ldr	r3, [r2, r3]
   1827e:	2b00      	cmp	r3, #0
   18280:	d035      	beq.n	182ee <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   18282:	4b26      	ldr	r3, [pc, #152]	; (1831c <prvReportStackUsage+0xb8>)
   18284:	681a      	ldr	r2, [r3, #0]
   18286:	4b26      	ldr	r3, [pc, #152]	; (18320 <prvReportStackUsage+0xbc>)
   18288:	00d2      	lsls	r2, r2, #3
   1828a:	58d3      	ldr	r3, [r2, r3]
   1828c:	0018      	movs	r0, r3
   1828e:	4b25      	ldr	r3, [pc, #148]	; (18324 <prvReportStackUsage+0xc0>)
   18290:	4798      	blx	r3
   18292:	0003      	movs	r3, r0
   18294:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   18296:	4b21      	ldr	r3, [pc, #132]	; (1831c <prvReportStackUsage+0xb8>)
   18298:	681b      	ldr	r3, [r3, #0]
   1829a:	4a21      	ldr	r2, [pc, #132]	; (18320 <prvReportStackUsage+0xbc>)
   1829c:	00db      	lsls	r3, r3, #3
   1829e:	18d3      	adds	r3, r2, r3
   182a0:	3304      	adds	r3, #4
   182a2:	681a      	ldr	r2, [r3, #0]
   182a4:	687b      	ldr	r3, [r7, #4]
   182a6:	429a      	cmp	r2, r3
   182a8:	d907      	bls.n	182ba <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   182aa:	4b1c      	ldr	r3, [pc, #112]	; (1831c <prvReportStackUsage+0xb8>)
   182ac:	681b      	ldr	r3, [r3, #0]
   182ae:	4a1c      	ldr	r2, [pc, #112]	; (18320 <prvReportStackUsage+0xbc>)
   182b0:	00db      	lsls	r3, r3, #3
   182b2:	18d3      	adds	r3, r2, r3
   182b4:	3304      	adds	r3, #4
   182b6:	687a      	ldr	r2, [r7, #4]
   182b8:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   182ba:	4b18      	ldr	r3, [pc, #96]	; (1831c <prvReportStackUsage+0xb8>)
   182bc:	681a      	ldr	r2, [r3, #0]
   182be:	4b18      	ldr	r3, [pc, #96]	; (18320 <prvReportStackUsage+0xbc>)
   182c0:	00d2      	lsls	r2, r2, #3
   182c2:	58d3      	ldr	r3, [r2, r3]
   182c4:	0018      	movs	r0, r3
   182c6:	4b18      	ldr	r3, [pc, #96]	; (18328 <prvReportStackUsage+0xc4>)
   182c8:	4798      	blx	r3
   182ca:	0003      	movs	r3, r0
   182cc:	b2db      	uxtb	r3, r3
   182ce:	0019      	movs	r1, r3
   182d0:	4b12      	ldr	r3, [pc, #72]	; (1831c <prvReportStackUsage+0xb8>)
   182d2:	681b      	ldr	r3, [r3, #0]
   182d4:	4a12      	ldr	r2, [pc, #72]	; (18320 <prvReportStackUsage+0xbc>)
   182d6:	00db      	lsls	r3, r3, #3
   182d8:	18d3      	adds	r3, r2, r3
   182da:	3304      	adds	r3, #4
   182dc:	681b      	ldr	r3, [r3, #0]
   182de:	000a      	movs	r2, r1
   182e0:	2103      	movs	r1, #3
   182e2:	20ea      	movs	r0, #234	; 0xea
   182e4:	4c11      	ldr	r4, [pc, #68]	; (1832c <prvReportStackUsage+0xc8>)
   182e6:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   182e8:	68fb      	ldr	r3, [r7, #12]
   182ea:	3301      	adds	r3, #1
   182ec:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   182ee:	4b0b      	ldr	r3, [pc, #44]	; (1831c <prvReportStackUsage+0xb8>)
   182f0:	681b      	ldr	r3, [r3, #0]
   182f2:	1c5a      	adds	r2, r3, #1
   182f4:	4b0e      	ldr	r3, [pc, #56]	; (18330 <prvReportStackUsage+0xcc>)
   182f6:	210a      	movs	r1, #10
   182f8:	0010      	movs	r0, r2
   182fa:	4798      	blx	r3
   182fc:	000b      	movs	r3, r1
   182fe:	001a      	movs	r2, r3
   18300:	4b06      	ldr	r3, [pc, #24]	; (1831c <prvReportStackUsage+0xb8>)
   18302:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   18304:	68fb      	ldr	r3, [r7, #12]
   18306:	2b00      	cmp	r3, #0
   18308:	dc04      	bgt.n	18314 <prvReportStackUsage+0xb0>
   1830a:	4b04      	ldr	r3, [pc, #16]	; (1831c <prvReportStackUsage+0xb8>)
   1830c:	681a      	ldr	r2, [r3, #0]
   1830e:	68bb      	ldr	r3, [r7, #8]
   18310:	429a      	cmp	r2, r3
   18312:	d1af      	bne.n	18274 <prvReportStackUsage+0x10>
}
   18314:	46c0      	nop			; (mov r8, r8)
   18316:	46bd      	mov	sp, r7
   18318:	b005      	add	sp, #20
   1831a:	bd90      	pop	{r4, r7, pc}
   1831c:	20000d30 	.word	0x20000d30
   18320:	20000cdc 	.word	0x20000cdc
   18324:	0001ccf1 	.word	0x0001ccf1
   18328:	00018079 	.word	0x00018079
   1832c:	00018bc1 	.word	0x00018bc1
   18330:	00032ae5 	.word	0x00032ae5

00018334 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   18334:	b580      	push	{r7, lr}
   18336:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   18338:	4b02      	ldr	r3, [pc, #8]	; (18344 <prvTraceGetCurrentTaskHandle+0x10>)
   1833a:	4798      	blx	r3
   1833c:	0003      	movs	r3, r0
}
   1833e:	0018      	movs	r0, r3
   18340:	46bd      	mov	sp, r7
   18342:	bd80      	pop	{r7, pc}
   18344:	0001cd9d 	.word	0x0001cd9d

00018348 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   18348:	b590      	push	{r4, r7, lr}
   1834a:	b085      	sub	sp, #20
   1834c:	af02      	add	r7, sp, #8
   1834e:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   18350:	4b14      	ldr	r3, [pc, #80]	; (183a4 <vTraceEnable+0x5c>)
   18352:	4798      	blx	r3

	if (startOption == TRC_START)
   18354:	687b      	ldr	r3, [r7, #4]
   18356:	2b01      	cmp	r3, #1
   18358:	d102      	bne.n	18360 <vTraceEnable+0x18>
	{
		vTraceStart();
   1835a:	4b13      	ldr	r3, [pc, #76]	; (183a8 <vTraceEnable+0x60>)
   1835c:	4798      	blx	r3
   1835e:	e00e      	b.n	1837e <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   18360:	687b      	ldr	r3, [r7, #4]
   18362:	2b02      	cmp	r3, #2
   18364:	d104      	bne.n	18370 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   18366:	4b11      	ldr	r3, [pc, #68]	; (183ac <vTraceEnable+0x64>)
   18368:	0018      	movs	r0, r3
   1836a:	4b11      	ldr	r3, [pc, #68]	; (183b0 <vTraceEnable+0x68>)
   1836c:	4798      	blx	r3
   1836e:	e006      	b.n	1837e <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   18370:	687b      	ldr	r3, [r7, #4]
   18372:	2b00      	cmp	r3, #0
   18374:	d003      	beq.n	1837e <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   18376:	4b0f      	ldr	r3, [pc, #60]	; (183b4 <vTraceEnable+0x6c>)
   18378:	0018      	movs	r0, r3
   1837a:	4b0d      	ldr	r3, [pc, #52]	; (183b0 <vTraceEnable+0x68>)
   1837c:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   1837e:	4b0e      	ldr	r3, [pc, #56]	; (183b8 <vTraceEnable+0x70>)
   18380:	681b      	ldr	r3, [r3, #0]
   18382:	2b00      	cmp	r3, #0
   18384:	d10a      	bne.n	1839c <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   18386:	2396      	movs	r3, #150	; 0x96
   18388:	005a      	lsls	r2, r3, #1
   1838a:	490c      	ldr	r1, [pc, #48]	; (183bc <vTraceEnable+0x74>)
   1838c:	480c      	ldr	r0, [pc, #48]	; (183c0 <vTraceEnable+0x78>)
   1838e:	4b0a      	ldr	r3, [pc, #40]	; (183b8 <vTraceEnable+0x70>)
   18390:	9301      	str	r3, [sp, #4]
   18392:	2304      	movs	r3, #4
   18394:	9300      	str	r3, [sp, #0]
   18396:	2300      	movs	r3, #0
   18398:	4c0a      	ldr	r4, [pc, #40]	; (183c4 <vTraceEnable+0x7c>)
   1839a:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   1839c:	46c0      	nop			; (mov r8, r8)
   1839e:	46bd      	mov	sp, r7
   183a0:	b003      	add	sp, #12
   183a2:	bd90      	pop	{r4, r7, pc}
   183a4:	0001928d 	.word	0x0001928d
   183a8:	000187e5 	.word	0x000187e5
   183ac:	00036eb8 	.word	0x00036eb8
   183b0:	00019935 	.word	0x00019935
   183b4:	00036ef8 	.word	0x00036ef8
   183b8:	20000cd8 	.word	0x20000cd8
   183bc:	00036f2c 	.word	0x00036f2c
   183c0:	000183c9 	.word	0x000183c9
   183c4:	0001bcf5 	.word	0x0001bcf5

000183c8 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   183c8:	b580      	push	{r7, lr}
   183ca:	b082      	sub	sp, #8
   183cc:	af00      	add	r7, sp, #0
   183ce:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   183d0:	4b04      	ldr	r3, [pc, #16]	; (183e4 <TzCtrl+0x1c>)
   183d2:	4798      	blx	r3
   183d4:	1e03      	subs	r3, r0, #0
   183d6:	d001      	beq.n	183dc <TzCtrl+0x14>
		{
			prvReportStackUsage();
   183d8:	4b03      	ldr	r3, [pc, #12]	; (183e8 <TzCtrl+0x20>)
   183da:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   183dc:	2004      	movs	r0, #4
   183de:	4b03      	ldr	r3, [pc, #12]	; (183ec <TzCtrl+0x24>)
   183e0:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   183e2:	e7f5      	b.n	183d0 <TzCtrl+0x8>
   183e4:	00018829 	.word	0x00018829
   183e8:	00018265 	.word	0x00018265
   183ec:	0001c091 	.word	0x0001c091

000183f0 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   183f0:	b580      	push	{r7, lr}
   183f2:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   183f4:	4b60      	ldr	r3, [pc, #384]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   183f6:	681b      	ldr	r3, [r3, #0]
   183f8:	2209      	movs	r2, #9
   183fa:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   183fc:	4b5e      	ldr	r3, [pc, #376]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   183fe:	681b      	ldr	r3, [r3, #0]
   18400:	2264      	movs	r2, #100	; 0x64
   18402:	210a      	movs	r1, #10
   18404:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   18406:	4b5c      	ldr	r3, [pc, #368]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   18408:	681b      	ldr	r3, [r3, #0]
   1840a:	2265      	movs	r2, #101	; 0x65
   1840c:	210a      	movs	r1, #10
   1840e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   18410:	4b59      	ldr	r3, [pc, #356]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   18412:	681b      	ldr	r3, [r3, #0]
   18414:	2266      	movs	r2, #102	; 0x66
   18416:	210a      	movs	r1, #10
   18418:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   1841a:	4b57      	ldr	r3, [pc, #348]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   1841c:	681b      	ldr	r3, [r3, #0]
   1841e:	2267      	movs	r2, #103	; 0x67
   18420:	210f      	movs	r1, #15
   18422:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   18424:	4b54      	ldr	r3, [pc, #336]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   18426:	681b      	ldr	r3, [r3, #0]
   18428:	2268      	movs	r2, #104	; 0x68
   1842a:	2105      	movs	r1, #5
   1842c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   1842e:	4b52      	ldr	r3, [pc, #328]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   18430:	681b      	ldr	r3, [r3, #0]
   18432:	2269      	movs	r2, #105	; 0x69
   18434:	2105      	movs	r1, #5
   18436:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   18438:	4b4f      	ldr	r3, [pc, #316]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   1843a:	681b      	ldr	r3, [r3, #0]
   1843c:	226a      	movs	r2, #106	; 0x6a
   1843e:	2105      	movs	r1, #5
   18440:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   18442:	4b4d      	ldr	r3, [pc, #308]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   18444:	681b      	ldr	r3, [r3, #0]
   18446:	226b      	movs	r2, #107	; 0x6b
   18448:	2105      	movs	r1, #5
   1844a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   1844c:	4b4a      	ldr	r3, [pc, #296]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   1844e:	681b      	ldr	r3, [r3, #0]
   18450:	226c      	movs	r2, #108	; 0x6c
   18452:	2105      	movs	r1, #5
   18454:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   18456:	4b48      	ldr	r3, [pc, #288]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   18458:	681b      	ldr	r3, [r3, #0]
   1845a:	2270      	movs	r2, #112	; 0x70
   1845c:	210f      	movs	r1, #15
   1845e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   18460:	4b45      	ldr	r3, [pc, #276]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   18462:	681b      	ldr	r3, [r3, #0]
   18464:	2271      	movs	r2, #113	; 0x71
   18466:	210f      	movs	r1, #15
   18468:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   1846a:	4b43      	ldr	r3, [pc, #268]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   1846c:	681b      	ldr	r3, [r3, #0]
   1846e:	2272      	movs	r2, #114	; 0x72
   18470:	210f      	movs	r1, #15
   18472:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   18474:	4b40      	ldr	r3, [pc, #256]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   18476:	681b      	ldr	r3, [r3, #0]
   18478:	2273      	movs	r2, #115	; 0x73
   1847a:	210f      	movs	r1, #15
   1847c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   1847e:	4b3e      	ldr	r3, [pc, #248]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   18480:	681b      	ldr	r3, [r3, #0]
   18482:	2274      	movs	r2, #116	; 0x74
   18484:	210f      	movs	r1, #15
   18486:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   18488:	4b3b      	ldr	r3, [pc, #236]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   1848a:	681b      	ldr	r3, [r3, #0]
   1848c:	2275      	movs	r2, #117	; 0x75
   1848e:	210f      	movs	r1, #15
   18490:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   18492:	4b39      	ldr	r3, [pc, #228]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   18494:	681b      	ldr	r3, [r3, #0]
   18496:	2276      	movs	r2, #118	; 0x76
   18498:	210f      	movs	r1, #15
   1849a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   1849c:	4b36      	ldr	r3, [pc, #216]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   1849e:	681b      	ldr	r3, [r3, #0]
   184a0:	2277      	movs	r2, #119	; 0x77
   184a2:	210f      	movs	r1, #15
   184a4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   184a6:	4b34      	ldr	r3, [pc, #208]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   184a8:	681b      	ldr	r3, [r3, #0]
   184aa:	2278      	movs	r2, #120	; 0x78
   184ac:	210f      	movs	r1, #15
   184ae:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   184b0:	4b31      	ldr	r3, [pc, #196]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   184b2:	681b      	ldr	r3, [r3, #0]
   184b4:	227c      	movs	r2, #124	; 0x7c
   184b6:	2110      	movs	r1, #16
   184b8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   184ba:	4b2f      	ldr	r3, [pc, #188]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   184bc:	681b      	ldr	r3, [r3, #0]
   184be:	227d      	movs	r2, #125	; 0x7d
   184c0:	2110      	movs	r1, #16
   184c2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   184c4:	4b2c      	ldr	r3, [pc, #176]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   184c6:	681b      	ldr	r3, [r3, #0]
   184c8:	227e      	movs	r2, #126	; 0x7e
   184ca:	2110      	movs	r1, #16
   184cc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   184ce:	4b2a      	ldr	r3, [pc, #168]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   184d0:	681b      	ldr	r3, [r3, #0]
   184d2:	227f      	movs	r2, #127	; 0x7f
   184d4:	2113      	movs	r1, #19
   184d6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   184d8:	4b27      	ldr	r3, [pc, #156]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   184da:	681b      	ldr	r3, [r3, #0]
   184dc:	2280      	movs	r2, #128	; 0x80
   184de:	2111      	movs	r1, #17
   184e0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   184e2:	4b25      	ldr	r3, [pc, #148]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   184e4:	681b      	ldr	r3, [r3, #0]
   184e6:	2281      	movs	r2, #129	; 0x81
   184e8:	2110      	movs	r1, #16
   184ea:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   184ec:	4b22      	ldr	r3, [pc, #136]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   184ee:	681b      	ldr	r3, [r3, #0]
   184f0:	2282      	movs	r2, #130	; 0x82
   184f2:	2113      	movs	r1, #19
   184f4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   184f6:	4b20      	ldr	r3, [pc, #128]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   184f8:	681b      	ldr	r3, [r3, #0]
   184fa:	2283      	movs	r2, #131	; 0x83
   184fc:	2113      	movs	r1, #19
   184fe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   18500:	4b1d      	ldr	r3, [pc, #116]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   18502:	681b      	ldr	r3, [r3, #0]
   18504:	2284      	movs	r2, #132	; 0x84
   18506:	2113      	movs	r1, #19
   18508:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   1850a:	4b1b      	ldr	r3, [pc, #108]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   1850c:	681b      	ldr	r3, [r3, #0]
   1850e:	2288      	movs	r2, #136	; 0x88
   18510:	2100      	movs	r1, #0
   18512:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   18514:	4b18      	ldr	r3, [pc, #96]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   18516:	681b      	ldr	r3, [r3, #0]
   18518:	228a      	movs	r2, #138	; 0x8a
   1851a:	21a0      	movs	r1, #160	; 0xa0
   1851c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   1851e:	4b16      	ldr	r3, [pc, #88]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   18520:	681b      	ldr	r3, [r3, #0]
   18522:	228c      	movs	r2, #140	; 0x8c
   18524:	21a0      	movs	r1, #160	; 0xa0
   18526:	0049      	lsls	r1, r1, #1
   18528:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   1852a:	4b13      	ldr	r3, [pc, #76]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   1852c:	681b      	ldr	r3, [r3, #0]
   1852e:	228e      	movs	r2, #142	; 0x8e
   18530:	21f0      	movs	r1, #240	; 0xf0
   18532:	0049      	lsls	r1, r1, #1
   18534:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   18536:	4b10      	ldr	r3, [pc, #64]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   18538:	681b      	ldr	r3, [r3, #0]
   1853a:	2290      	movs	r2, #144	; 0x90
   1853c:	490f      	ldr	r1, [pc, #60]	; (1857c <vTraceInitObjectPropertyTable+0x18c>)
   1853e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   18540:	4b0d      	ldr	r3, [pc, #52]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   18542:	681b      	ldr	r3, [r3, #0]
   18544:	2292      	movs	r2, #146	; 0x92
   18546:	490e      	ldr	r1, [pc, #56]	; (18580 <vTraceInitObjectPropertyTable+0x190>)
   18548:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   1854a:	4b0b      	ldr	r3, [pc, #44]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   1854c:	681b      	ldr	r3, [r3, #0]
   1854e:	2294      	movs	r2, #148	; 0x94
   18550:	490c      	ldr	r1, [pc, #48]	; (18584 <vTraceInitObjectPropertyTable+0x194>)
   18552:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   18554:	4b08      	ldr	r3, [pc, #32]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   18556:	681b      	ldr	r3, [r3, #0]
   18558:	2296      	movs	r2, #150	; 0x96
   1855a:	490b      	ldr	r1, [pc, #44]	; (18588 <vTraceInitObjectPropertyTable+0x198>)
   1855c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   1855e:	4b06      	ldr	r3, [pc, #24]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   18560:	681b      	ldr	r3, [r3, #0]
   18562:	2298      	movs	r2, #152	; 0x98
   18564:	218c      	movs	r1, #140	; 0x8c
   18566:	00c9      	lsls	r1, r1, #3
   18568:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   1856a:	4b03      	ldr	r3, [pc, #12]	; (18578 <vTraceInitObjectPropertyTable+0x188>)
   1856c:	681b      	ldr	r3, [r3, #0]
   1856e:	4a07      	ldr	r2, [pc, #28]	; (1858c <vTraceInitObjectPropertyTable+0x19c>)
   18570:	661a      	str	r2, [r3, #96]	; 0x60
}
   18572:	46c0      	nop			; (mov r8, r8)
   18574:	46bd      	mov	sp, r7
   18576:	bd80      	pop	{r7, pc}
   18578:	20000df0 	.word	0x20000df0
   1857c:	000002fd 	.word	0x000002fd
   18580:	00000352 	.word	0x00000352
   18584:	000003a2 	.word	0x000003a2
   18588:	00000401 	.word	0x00000401
   1858c:	000004bf 	.word	0x000004bf

00018590 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   18590:	b580      	push	{r7, lr}
   18592:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   18594:	4b2e      	ldr	r3, [pc, #184]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   18596:	2200      	movs	r2, #0
   18598:	825a      	strh	r2, [r3, #18]
   1859a:	4b2d      	ldr	r3, [pc, #180]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   1859c:	8a5a      	ldrh	r2, [r3, #18]
   1859e:	4b2c      	ldr	r3, [pc, #176]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   185a0:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   185a2:	4b2b      	ldr	r3, [pc, #172]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   185a4:	220a      	movs	r2, #10
   185a6:	829a      	strh	r2, [r3, #20]
   185a8:	4b29      	ldr	r3, [pc, #164]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   185aa:	8a9a      	ldrh	r2, [r3, #20]
   185ac:	4b28      	ldr	r3, [pc, #160]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   185ae:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   185b0:	4b27      	ldr	r3, [pc, #156]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   185b2:	2214      	movs	r2, #20
   185b4:	82da      	strh	r2, [r3, #22]
   185b6:	4b26      	ldr	r3, [pc, #152]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   185b8:	8ada      	ldrh	r2, [r3, #22]
   185ba:	4b25      	ldr	r3, [pc, #148]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   185bc:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   185be:	4b24      	ldr	r3, [pc, #144]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   185c0:	221e      	movs	r2, #30
   185c2:	831a      	strh	r2, [r3, #24]
   185c4:	4b22      	ldr	r3, [pc, #136]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   185c6:	8b1a      	ldrh	r2, [r3, #24]
   185c8:	4b21      	ldr	r3, [pc, #132]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   185ca:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   185cc:	4b20      	ldr	r3, [pc, #128]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   185ce:	222d      	movs	r2, #45	; 0x2d
   185d0:	835a      	strh	r2, [r3, #26]
   185d2:	4b1f      	ldr	r3, [pc, #124]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   185d4:	8b5a      	ldrh	r2, [r3, #26]
   185d6:	4b1e      	ldr	r3, [pc, #120]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   185d8:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   185da:	4b1d      	ldr	r3, [pc, #116]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   185dc:	2232      	movs	r2, #50	; 0x32
   185de:	839a      	strh	r2, [r3, #28]
   185e0:	4b1b      	ldr	r3, [pc, #108]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   185e2:	8b9a      	ldrh	r2, [r3, #28]
   185e4:	4b1a      	ldr	r3, [pc, #104]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   185e6:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   185e8:	4b19      	ldr	r3, [pc, #100]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   185ea:	2237      	movs	r2, #55	; 0x37
   185ec:	83da      	strh	r2, [r3, #30]
   185ee:	4b18      	ldr	r3, [pc, #96]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   185f0:	8bda      	ldrh	r2, [r3, #30]
   185f2:	4b17      	ldr	r3, [pc, #92]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   185f4:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   185f6:	4b16      	ldr	r3, [pc, #88]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   185f8:	223c      	movs	r2, #60	; 0x3c
   185fa:	841a      	strh	r2, [r3, #32]
   185fc:	4b14      	ldr	r3, [pc, #80]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   185fe:	8c1a      	ldrh	r2, [r3, #32]
   18600:	4b13      	ldr	r3, [pc, #76]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   18602:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   18604:	4b12      	ldr	r3, [pc, #72]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   18606:	2241      	movs	r2, #65	; 0x41
   18608:	845a      	strh	r2, [r3, #34]	; 0x22
   1860a:	4b11      	ldr	r3, [pc, #68]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   1860c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   1860e:	4b10      	ldr	r3, [pc, #64]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   18610:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   18612:	4b0f      	ldr	r3, [pc, #60]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   18614:	2209      	movs	r2, #9
   18616:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   18618:	4b0d      	ldr	r3, [pc, #52]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   1861a:	2213      	movs	r2, #19
   1861c:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   1861e:	4b0c      	ldr	r3, [pc, #48]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   18620:	221d      	movs	r2, #29
   18622:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   18624:	4b0a      	ldr	r3, [pc, #40]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   18626:	222c      	movs	r2, #44	; 0x2c
   18628:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   1862a:	4b09      	ldr	r3, [pc, #36]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   1862c:	2231      	movs	r2, #49	; 0x31
   1862e:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   18630:	4b07      	ldr	r3, [pc, #28]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   18632:	2236      	movs	r2, #54	; 0x36
   18634:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   18636:	4b06      	ldr	r3, [pc, #24]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   18638:	223b      	movs	r2, #59	; 0x3b
   1863a:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   1863c:	4b04      	ldr	r3, [pc, #16]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   1863e:	2240      	movs	r2, #64	; 0x40
   18640:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   18642:	4b03      	ldr	r3, [pc, #12]	; (18650 <vTraceInitObjectHandleStack+0xc0>)
   18644:	2245      	movs	r2, #69	; 0x45
   18646:	869a      	strh	r2, [r3, #52]	; 0x34
}
   18648:	46c0      	nop			; (mov r8, r8)
   1864a:	46bd      	mov	sp, r7
   1864c:	bd80      	pop	{r7, pc}
   1864e:	46c0      	nop			; (mov r8, r8)
   18650:	20000d60 	.word	0x20000d60

00018654 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   18654:	b580      	push	{r7, lr}
   18656:	b082      	sub	sp, #8
   18658:	af00      	add	r7, sp, #0
   1865a:	0002      	movs	r2, r0
   1865c:	1dfb      	adds	r3, r7, #7
   1865e:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   18660:	1dfb      	adds	r3, r7, #7
   18662:	781b      	ldrb	r3, [r3, #0]
   18664:	2b08      	cmp	r3, #8
   18666:	d816      	bhi.n	18696 <pszTraceGetErrorNotEnoughHandles+0x42>
   18668:	009a      	lsls	r2, r3, #2
   1866a:	4b0d      	ldr	r3, [pc, #52]	; (186a0 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   1866c:	18d3      	adds	r3, r2, r3
   1866e:	681b      	ldr	r3, [r3, #0]
   18670:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   18672:	4b0c      	ldr	r3, [pc, #48]	; (186a4 <pszTraceGetErrorNotEnoughHandles+0x50>)
   18674:	e010      	b.n	18698 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   18676:	4b0c      	ldr	r3, [pc, #48]	; (186a8 <pszTraceGetErrorNotEnoughHandles+0x54>)
   18678:	e00e      	b.n	18698 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   1867a:	4b0c      	ldr	r3, [pc, #48]	; (186ac <pszTraceGetErrorNotEnoughHandles+0x58>)
   1867c:	e00c      	b.n	18698 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   1867e:	4b0c      	ldr	r3, [pc, #48]	; (186b0 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   18680:	e00a      	b.n	18698 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   18682:	4b0c      	ldr	r3, [pc, #48]	; (186b4 <pszTraceGetErrorNotEnoughHandles+0x60>)
   18684:	e008      	b.n	18698 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   18686:	4b0c      	ldr	r3, [pc, #48]	; (186b8 <pszTraceGetErrorNotEnoughHandles+0x64>)
   18688:	e006      	b.n	18698 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   1868a:	4b0c      	ldr	r3, [pc, #48]	; (186bc <pszTraceGetErrorNotEnoughHandles+0x68>)
   1868c:	e004      	b.n	18698 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   1868e:	4b0c      	ldr	r3, [pc, #48]	; (186c0 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   18690:	e002      	b.n	18698 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   18692:	4b0c      	ldr	r3, [pc, #48]	; (186c4 <pszTraceGetErrorNotEnoughHandles+0x70>)
   18694:	e000      	b.n	18698 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   18696:	4b0c      	ldr	r3, [pc, #48]	; (186c8 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   18698:	0018      	movs	r0, r3
   1869a:	46bd      	mov	sp, r7
   1869c:	b002      	add	sp, #8
   1869e:	bd80      	pop	{r7, pc}
   186a0:	00037234 	.word	0x00037234
   186a4:	00036f34 	.word	0x00036f34
   186a8:	00036f7c 	.word	0x00036f7c
   186ac:	00036fc4 	.word	0x00036fc4
   186b0:	00037018 	.word	0x00037018
   186b4:	00037064 	.word	0x00037064
   186b8:	000370b0 	.word	0x000370b0
   186bc:	000370fc 	.word	0x000370fc
   186c0:	00037150 	.word	0x00037150
   186c4:	000371a8 	.word	0x000371a8
   186c8:	00037204 	.word	0x00037204

000186cc <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   186cc:	b590      	push	{r4, r7, lr}
   186ce:	b087      	sub	sp, #28
   186d0:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   186d2:	2317      	movs	r3, #23
   186d4:	18fb      	adds	r3, r7, r3
   186d6:	2200      	movs	r2, #0
   186d8:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   186da:	4b36      	ldr	r3, [pc, #216]	; (187b4 <uiTraceStart+0xe8>)
   186dc:	681b      	ldr	r3, [r3, #0]
   186de:	2b00      	cmp	r3, #0
   186e0:	d10b      	bne.n	186fa <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   186e2:	4b34      	ldr	r3, [pc, #208]	; (187b4 <uiTraceStart+0xe8>)
   186e4:	681b      	ldr	r3, [r3, #0]
   186e6:	2b00      	cmp	r3, #0
   186e8:	d105      	bne.n	186f6 <uiTraceStart+0x2a>
   186ea:	4b33      	ldr	r3, [pc, #204]	; (187b8 <uiTraceStart+0xec>)
   186ec:	0018      	movs	r0, r3
   186ee:	4b33      	ldr	r3, [pc, #204]	; (187bc <uiTraceStart+0xf0>)
   186f0:	4798      	blx	r3
   186f2:	2300      	movs	r3, #0
   186f4:	e059      	b.n	187aa <uiTraceStart+0xde>
		return 0;
   186f6:	2300      	movs	r3, #0
   186f8:	e057      	b.n	187aa <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   186fa:	4b2e      	ldr	r3, [pc, #184]	; (187b4 <uiTraceStart+0xe8>)
   186fc:	681b      	ldr	r3, [r3, #0]
   186fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18700:	2b01      	cmp	r3, #1
   18702:	d101      	bne.n	18708 <uiTraceStart+0x3c>
		return 1; /* Already running */
   18704:	2301      	movs	r3, #1
   18706:	e050      	b.n	187aa <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   18708:	4b2d      	ldr	r3, [pc, #180]	; (187c0 <uiTraceStart+0xf4>)
   1870a:	681b      	ldr	r3, [r3, #0]
   1870c:	2b00      	cmp	r3, #0
   1870e:	d149      	bne.n	187a4 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18710:	f3ef 8310 	mrs	r3, PRIMASK
   18714:	60bb      	str	r3, [r7, #8]
  return(result);
   18716:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   18718:	613b      	str	r3, [r7, #16]
   1871a:	2301      	movs	r3, #1
   1871c:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1871e:	68fb      	ldr	r3, [r7, #12]
   18720:	f383 8810 	msr	PRIMASK, r3
   18724:	4b27      	ldr	r3, [pc, #156]	; (187c4 <uiTraceStart+0xf8>)
   18726:	681b      	ldr	r3, [r3, #0]
   18728:	1c5a      	adds	r2, r3, #1
   1872a:	4b26      	ldr	r3, [pc, #152]	; (187c4 <uiTraceStart+0xf8>)
   1872c:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   1872e:	4b21      	ldr	r3, [pc, #132]	; (187b4 <uiTraceStart+0xe8>)
   18730:	681b      	ldr	r3, [r3, #0]
   18732:	2201      	movs	r2, #1
   18734:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   18736:	4b24      	ldr	r3, [pc, #144]	; (187c8 <uiTraceStart+0xfc>)
   18738:	4798      	blx	r3
   1873a:	0003      	movs	r3, r0
   1873c:	0018      	movs	r0, r3
   1873e:	4b23      	ldr	r3, [pc, #140]	; (187cc <uiTraceStart+0x100>)
   18740:	4798      	blx	r3
   18742:	0003      	movs	r3, r0
   18744:	001a      	movs	r2, r3
   18746:	2317      	movs	r3, #23
   18748:	18fb      	adds	r3, r7, r3
   1874a:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   1874c:	2317      	movs	r3, #23
   1874e:	18fb      	adds	r3, r7, r3
   18750:	781b      	ldrb	r3, [r3, #0]
   18752:	2b00      	cmp	r3, #0
   18754:	d116      	bne.n	18784 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   18756:	2317      	movs	r3, #23
   18758:	18fc      	adds	r4, r7, r3
   1875a:	2003      	movs	r0, #3
   1875c:	4b1c      	ldr	r3, [pc, #112]	; (187d0 <uiTraceStart+0x104>)
   1875e:	4798      	blx	r3
   18760:	0003      	movs	r3, r0
   18762:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   18764:	4a1b      	ldr	r2, [pc, #108]	; (187d4 <uiTraceStart+0x108>)
   18766:	2317      	movs	r3, #23
   18768:	18fb      	adds	r3, r7, r3
   1876a:	781b      	ldrb	r3, [r3, #0]
   1876c:	0019      	movs	r1, r3
   1876e:	2003      	movs	r0, #3
   18770:	4b19      	ldr	r3, [pc, #100]	; (187d8 <uiTraceStart+0x10c>)
   18772:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   18774:	2317      	movs	r3, #23
   18776:	18fb      	adds	r3, r7, r3
   18778:	781b      	ldrb	r3, [r3, #0]
   1877a:	2200      	movs	r2, #0
   1877c:	0019      	movs	r1, r3
   1877e:	2003      	movs	r0, #3
   18780:	4b16      	ldr	r3, [pc, #88]	; (187dc <uiTraceStart+0x110>)
   18782:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   18784:	2317      	movs	r3, #23
   18786:	18fb      	adds	r3, r7, r3
   18788:	781b      	ldrb	r3, [r3, #0]
   1878a:	0018      	movs	r0, r3
   1878c:	4b14      	ldr	r3, [pc, #80]	; (187e0 <uiTraceStart+0x114>)
   1878e:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   18790:	4b0c      	ldr	r3, [pc, #48]	; (187c4 <uiTraceStart+0xf8>)
   18792:	681b      	ldr	r3, [r3, #0]
   18794:	1e5a      	subs	r2, r3, #1
   18796:	4b0b      	ldr	r3, [pc, #44]	; (187c4 <uiTraceStart+0xf8>)
   18798:	601a      	str	r2, [r3, #0]
   1879a:	693b      	ldr	r3, [r7, #16]
   1879c:	607b      	str	r3, [r7, #4]
   1879e:	687b      	ldr	r3, [r7, #4]
   187a0:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   187a4:	4b03      	ldr	r3, [pc, #12]	; (187b4 <uiTraceStart+0xe8>)
   187a6:	681b      	ldr	r3, [r3, #0]
   187a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   187aa:	0018      	movs	r0, r3
   187ac:	46bd      	mov	sp, r7
   187ae:	b007      	add	sp, #28
   187b0:	bd90      	pop	{r4, r7, pc}
   187b2:	46c0      	nop			; (mov r8, r8)
   187b4:	20000df0 	.word	0x20000df0
   187b8:	00037258 	.word	0x00037258
   187bc:	00019935 	.word	0x00019935
   187c0:	20000d50 	.word	0x20000d50
   187c4:	20000d48 	.word	0x20000d48
   187c8:	00018335 	.word	0x00018335
   187cc:	00018079 	.word	0x00018079
   187d0:	00019619 	.word	0x00019619
   187d4:	0003729c 	.word	0x0003729c
   187d8:	00019849 	.word	0x00019849
   187dc:	00018fad 	.word	0x00018fad
   187e0:	00018e95 	.word	0x00018e95

000187e4 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   187e4:	b580      	push	{r7, lr}
   187e6:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   187e8:	4b02      	ldr	r3, [pc, #8]	; (187f4 <vTraceStart+0x10>)
   187ea:	4798      	blx	r3
}
   187ec:	46c0      	nop			; (mov r8, r8)
   187ee:	46bd      	mov	sp, r7
   187f0:	bd80      	pop	{r7, pc}
   187f2:	46c0      	nop			; (mov r8, r8)
   187f4:	000186cd 	.word	0x000186cd

000187f8 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   187f8:	b580      	push	{r7, lr}
   187fa:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   187fc:	4b08      	ldr	r3, [pc, #32]	; (18820 <vTraceStop+0x28>)
   187fe:	681b      	ldr	r3, [r3, #0]
   18800:	2b00      	cmp	r3, #0
   18802:	d003      	beq.n	1880c <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   18804:	4b06      	ldr	r3, [pc, #24]	; (18820 <vTraceStop+0x28>)
   18806:	681b      	ldr	r3, [r3, #0]
   18808:	2200      	movs	r2, #0
   1880a:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   1880c:	4b05      	ldr	r3, [pc, #20]	; (18824 <vTraceStop+0x2c>)
   1880e:	681b      	ldr	r3, [r3, #0]
   18810:	2b00      	cmp	r3, #0
   18812:	d002      	beq.n	1881a <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   18814:	4b03      	ldr	r3, [pc, #12]	; (18824 <vTraceStop+0x2c>)
   18816:	681b      	ldr	r3, [r3, #0]
   18818:	4798      	blx	r3
	}
}
   1881a:	46c0      	nop			; (mov r8, r8)
   1881c:	46bd      	mov	sp, r7
   1881e:	bd80      	pop	{r7, pc}
   18820:	20000df0 	.word	0x20000df0
   18824:	20000d58 	.word	0x20000d58

00018828 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   18828:	b580      	push	{r7, lr}
   1882a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1882c:	4b05      	ldr	r3, [pc, #20]	; (18844 <xTraceIsRecordingEnabled+0x1c>)
   1882e:	681b      	ldr	r3, [r3, #0]
   18830:	2b00      	cmp	r3, #0
   18832:	d003      	beq.n	1883c <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   18834:	4b03      	ldr	r3, [pc, #12]	; (18844 <xTraceIsRecordingEnabled+0x1c>)
   18836:	681b      	ldr	r3, [r3, #0]
   18838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1883a:	e000      	b.n	1883e <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   1883c:	2300      	movs	r3, #0
	}
}
   1883e:	0018      	movs	r0, r3
   18840:	46bd      	mov	sp, r7
   18842:	bd80      	pop	{r7, pc}
   18844:	20000df0 	.word	0x20000df0

00018848 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   18848:	b590      	push	{r4, r7, lr}
   1884a:	b089      	sub	sp, #36	; 0x24
   1884c:	af00      	add	r7, sp, #0
   1884e:	0002      	movs	r2, r0
   18850:	1dfb      	adds	r3, r7, #7
   18852:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   18854:	1dfb      	adds	r3, r7, #7
   18856:	781b      	ldrb	r3, [r3, #0]
   18858:	2b00      	cmp	r3, #0
   1885a:	d057      	beq.n	1890c <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   1885c:	4b2e      	ldr	r3, [pc, #184]	; (18918 <prvTraceStoreTaskReady+0xd0>)
   1885e:	681b      	ldr	r3, [r3, #0]
   18860:	2b00      	cmp	r3, #0
   18862:	d055      	beq.n	18910 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   18864:	1dfb      	adds	r3, r7, #7
   18866:	781b      	ldrb	r3, [r3, #0]
   18868:	2b0f      	cmp	r3, #15
   1886a:	d904      	bls.n	18876 <prvTraceStoreTaskReady+0x2e>
   1886c:	4b2b      	ldr	r3, [pc, #172]	; (1891c <prvTraceStoreTaskReady+0xd4>)
   1886e:	0018      	movs	r0, r3
   18870:	4b2b      	ldr	r3, [pc, #172]	; (18920 <prvTraceStoreTaskReady+0xd8>)
   18872:	4798      	blx	r3
   18874:	e04d      	b.n	18912 <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   18876:	4b2b      	ldr	r3, [pc, #172]	; (18924 <prvTraceStoreTaskReady+0xdc>)
   18878:	681b      	ldr	r3, [r3, #0]
   1887a:	2b00      	cmp	r3, #0
   1887c:	d004      	beq.n	18888 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   1887e:	4b2a      	ldr	r3, [pc, #168]	; (18928 <prvTraceStoreTaskReady+0xe0>)
   18880:	0018      	movs	r0, r3
   18882:	4b27      	ldr	r3, [pc, #156]	; (18920 <prvTraceStoreTaskReady+0xd8>)
   18884:	4798      	blx	r3
		return;
   18886:	e044      	b.n	18912 <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18888:	f3ef 8310 	mrs	r3, PRIMASK
   1888c:	60fb      	str	r3, [r7, #12]
  return(result);
   1888e:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   18890:	61fb      	str	r3, [r7, #28]
   18892:	2301      	movs	r3, #1
   18894:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18896:	693b      	ldr	r3, [r7, #16]
   18898:	f383 8810 	msr	PRIMASK, r3
   1889c:	4b21      	ldr	r3, [pc, #132]	; (18924 <prvTraceStoreTaskReady+0xdc>)
   1889e:	681b      	ldr	r3, [r3, #0]
   188a0:	1c5a      	adds	r2, r3, #1
   188a2:	4b20      	ldr	r3, [pc, #128]	; (18924 <prvTraceStoreTaskReady+0xdc>)
   188a4:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   188a6:	4b21      	ldr	r3, [pc, #132]	; (1892c <prvTraceStoreTaskReady+0xe4>)
   188a8:	681b      	ldr	r3, [r3, #0]
   188aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   188ac:	2b00      	cmp	r3, #0
   188ae:	d022      	beq.n	188f6 <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   188b0:	231a      	movs	r3, #26
   188b2:	18fc      	adds	r4, r7, r3
   188b4:	4b1e      	ldr	r3, [pc, #120]	; (18930 <prvTraceStoreTaskReady+0xe8>)
   188b6:	0018      	movs	r0, r3
   188b8:	4b1e      	ldr	r3, [pc, #120]	; (18934 <prvTraceStoreTaskReady+0xec>)
   188ba:	4798      	blx	r3
   188bc:	0003      	movs	r3, r0
   188be:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   188c0:	2319      	movs	r3, #25
   188c2:	18fb      	adds	r3, r7, r3
   188c4:	1dfa      	adds	r2, r7, #7
   188c6:	7812      	ldrb	r2, [r2, #0]
   188c8:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   188ca:	4b1b      	ldr	r3, [pc, #108]	; (18938 <prvTraceStoreTaskReady+0xf0>)
   188cc:	4798      	blx	r3
   188ce:	0003      	movs	r3, r0
   188d0:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   188d2:	697b      	ldr	r3, [r7, #20]
   188d4:	2b00      	cmp	r3, #0
   188d6:	d00e      	beq.n	188f6 <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   188d8:	697b      	ldr	r3, [r7, #20]
   188da:	2202      	movs	r2, #2
   188dc:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   188de:	697b      	ldr	r3, [r7, #20]
   188e0:	221a      	movs	r2, #26
   188e2:	18ba      	adds	r2, r7, r2
   188e4:	8812      	ldrh	r2, [r2, #0]
   188e6:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   188e8:	697b      	ldr	r3, [r7, #20]
   188ea:	2219      	movs	r2, #25
   188ec:	18ba      	adds	r2, r7, r2
   188ee:	7812      	ldrb	r2, [r2, #0]
   188f0:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   188f2:	4b12      	ldr	r3, [pc, #72]	; (1893c <prvTraceStoreTaskReady+0xf4>)
   188f4:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   188f6:	4b0b      	ldr	r3, [pc, #44]	; (18924 <prvTraceStoreTaskReady+0xdc>)
   188f8:	681b      	ldr	r3, [r3, #0]
   188fa:	1e5a      	subs	r2, r3, #1
   188fc:	4b09      	ldr	r3, [pc, #36]	; (18924 <prvTraceStoreTaskReady+0xdc>)
   188fe:	601a      	str	r2, [r3, #0]
   18900:	69fb      	ldr	r3, [r7, #28]
   18902:	60bb      	str	r3, [r7, #8]
   18904:	68bb      	ldr	r3, [r7, #8]
   18906:	f383 8810 	msr	PRIMASK, r3
   1890a:	e002      	b.n	18912 <prvTraceStoreTaskReady+0xca>
		return;
   1890c:	46c0      	nop			; (mov r8, r8)
   1890e:	e000      	b.n	18912 <prvTraceStoreTaskReady+0xca>
		return;
   18910:	46c0      	nop			; (mov r8, r8)
}
   18912:	46bd      	mov	sp, r7
   18914:	b009      	add	sp, #36	; 0x24
   18916:	bd90      	pop	{r4, r7, pc}
   18918:	2000010c 	.word	0x2000010c
   1891c:	00037604 	.word	0x00037604
   18920:	00019935 	.word	0x00019935
   18924:	20000d48 	.word	0x20000d48
   18928:	00037644 	.word	0x00037644
   1892c:	20000df0 	.word	0x20000df0
   18930:	0000ffff 	.word	0x0000ffff
   18934:	00019b49 	.word	0x00019b49
   18938:	000194ed 	.word	0x000194ed
   1893c:	00019af1 	.word	0x00019af1

00018940 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   18940:	b580      	push	{r7, lr}
   18942:	b08e      	sub	sp, #56	; 0x38
   18944:	af00      	add	r7, sp, #0
   18946:	60f8      	str	r0, [r7, #12]
   18948:	60b9      	str	r1, [r7, #8]
   1894a:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   1894c:	4b48      	ldr	r3, [pc, #288]	; (18a70 <vTraceStoreMemMangEvent+0x130>)
   1894e:	681b      	ldr	r3, [r3, #0]
   18950:	2b00      	cmp	r3, #0
   18952:	d100      	bne.n	18956 <vTraceStoreMemMangEvent+0x16>
   18954:	e088      	b.n	18a68 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   18956:	687b      	ldr	r3, [r7, #4]
   18958:	2b00      	cmp	r3, #0
   1895a:	da03      	bge.n	18964 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   1895c:	687b      	ldr	r3, [r7, #4]
   1895e:	425b      	negs	r3, r3
   18960:	637b      	str	r3, [r7, #52]	; 0x34
   18962:	e001      	b.n	18968 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   18964:	687b      	ldr	r3, [r7, #4]
   18966:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18968:	f3ef 8310 	mrs	r3, PRIMASK
   1896c:	61bb      	str	r3, [r7, #24]
  return(result);
   1896e:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   18970:	633b      	str	r3, [r7, #48]	; 0x30
   18972:	2301      	movs	r3, #1
   18974:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18976:	69fb      	ldr	r3, [r7, #28]
   18978:	f383 8810 	msr	PRIMASK, r3
   1897c:	4b3d      	ldr	r3, [pc, #244]	; (18a74 <vTraceStoreMemMangEvent+0x134>)
   1897e:	681b      	ldr	r3, [r3, #0]
   18980:	1c5a      	adds	r2, r3, #1
   18982:	4b3c      	ldr	r3, [pc, #240]	; (18a74 <vTraceStoreMemMangEvent+0x134>)
   18984:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   18986:	68bb      	ldr	r3, [r7, #8]
   18988:	2b00      	cmp	r3, #0
   1898a:	d005      	beq.n	18998 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   1898c:	4b3a      	ldr	r3, [pc, #232]	; (18a78 <vTraceStoreMemMangEvent+0x138>)
   1898e:	681a      	ldr	r2, [r3, #0]
   18990:	687b      	ldr	r3, [r7, #4]
   18992:	18d2      	adds	r2, r2, r3
   18994:	4b38      	ldr	r3, [pc, #224]	; (18a78 <vTraceStoreMemMangEvent+0x138>)
   18996:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   18998:	4b35      	ldr	r3, [pc, #212]	; (18a70 <vTraceStoreMemMangEvent+0x130>)
   1899a:	681b      	ldr	r3, [r3, #0]
   1899c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1899e:	2b00      	cmp	r3, #0
   189a0:	d057      	beq.n	18a52 <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   189a2:	20ff      	movs	r0, #255	; 0xff
   189a4:	4b35      	ldr	r3, [pc, #212]	; (18a7c <vTraceStoreMemMangEvent+0x13c>)
   189a6:	4798      	blx	r3
   189a8:	0003      	movs	r3, r0
   189aa:	001a      	movs	r2, r3
   189ac:	232f      	movs	r3, #47	; 0x2f
   189ae:	18fb      	adds	r3, r7, r3
   189b0:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   189b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   189b4:	4a32      	ldr	r2, [pc, #200]	; (18a80 <vTraceStoreMemMangEvent+0x140>)
   189b6:	0019      	movs	r1, r3
   189b8:	0010      	movs	r0, r2
   189ba:	4b32      	ldr	r3, [pc, #200]	; (18a84 <vTraceStoreMemMangEvent+0x144>)
   189bc:	4798      	blx	r3
   189be:	0002      	movs	r2, r0
   189c0:	232c      	movs	r3, #44	; 0x2c
   189c2:	18fb      	adds	r3, r7, r3
   189c4:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   189c6:	4b30      	ldr	r3, [pc, #192]	; (18a88 <vTraceStoreMemMangEvent+0x148>)
   189c8:	4798      	blx	r3
   189ca:	0003      	movs	r3, r0
   189cc:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   189ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   189d0:	2b00      	cmp	r3, #0
   189d2:	d03e      	beq.n	18a52 <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   189d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   189d6:	222f      	movs	r2, #47	; 0x2f
   189d8:	18ba      	adds	r2, r7, r2
   189da:	7812      	ldrb	r2, [r2, #0]
   189dc:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   189de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   189e0:	2200      	movs	r2, #0
   189e2:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   189e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   189e6:	222c      	movs	r2, #44	; 0x2c
   189e8:	18ba      	adds	r2, r7, r2
   189ea:	8812      	ldrh	r2, [r2, #0]
   189ec:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   189ee:	4b27      	ldr	r3, [pc, #156]	; (18a8c <vTraceStoreMemMangEvent+0x14c>)
   189f0:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   189f2:	68bb      	ldr	r3, [r7, #8]
   189f4:	4a22      	ldr	r2, [pc, #136]	; (18a80 <vTraceStoreMemMangEvent+0x140>)
   189f6:	0019      	movs	r1, r3
   189f8:	0010      	movs	r0, r2
   189fa:	4b22      	ldr	r3, [pc, #136]	; (18a84 <vTraceStoreMemMangEvent+0x144>)
   189fc:	4798      	blx	r3
   189fe:	0002      	movs	r2, r0
   18a00:	2326      	movs	r3, #38	; 0x26
   18a02:	18fb      	adds	r3, r7, r3
   18a04:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   18a06:	2325      	movs	r3, #37	; 0x25
   18a08:	18fb      	adds	r3, r7, r3
   18a0a:	2200      	movs	r2, #0
   18a0c:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   18a0e:	4b1e      	ldr	r3, [pc, #120]	; (18a88 <vTraceStoreMemMangEvent+0x148>)
   18a10:	4798      	blx	r3
   18a12:	0003      	movs	r3, r0
   18a14:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   18a16:	6a3b      	ldr	r3, [r7, #32]
   18a18:	2b00      	cmp	r3, #0
   18a1a:	d01a      	beq.n	18a52 <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   18a1c:	6a3b      	ldr	r3, [r7, #32]
   18a1e:	2226      	movs	r2, #38	; 0x26
   18a20:	18ba      	adds	r2, r7, r2
   18a22:	8812      	ldrh	r2, [r2, #0]
   18a24:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   18a26:	6a3b      	ldr	r3, [r7, #32]
   18a28:	2225      	movs	r2, #37	; 0x25
   18a2a:	18ba      	adds	r2, r7, r2
   18a2c:	7812      	ldrb	r2, [r2, #0]
   18a2e:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   18a30:	68fb      	ldr	r3, [r7, #12]
   18a32:	b2db      	uxtb	r3, r3
   18a34:	3301      	adds	r3, #1
   18a36:	b2da      	uxtb	r2, r3
   18a38:	6a3b      	ldr	r3, [r7, #32]
   18a3a:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   18a3c:	68fb      	ldr	r3, [r7, #12]
   18a3e:	b2da      	uxtb	r2, r3
   18a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18a42:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   18a44:	4b11      	ldr	r3, [pc, #68]	; (18a8c <vTraceStoreMemMangEvent+0x14c>)
   18a46:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   18a48:	4b09      	ldr	r3, [pc, #36]	; (18a70 <vTraceStoreMemMangEvent+0x130>)
   18a4a:	681b      	ldr	r3, [r3, #0]
   18a4c:	4a0a      	ldr	r2, [pc, #40]	; (18a78 <vTraceStoreMemMangEvent+0x138>)
   18a4e:	6812      	ldr	r2, [r2, #0]
   18a50:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   18a52:	4b08      	ldr	r3, [pc, #32]	; (18a74 <vTraceStoreMemMangEvent+0x134>)
   18a54:	681b      	ldr	r3, [r3, #0]
   18a56:	1e5a      	subs	r2, r3, #1
   18a58:	4b06      	ldr	r3, [pc, #24]	; (18a74 <vTraceStoreMemMangEvent+0x134>)
   18a5a:	601a      	str	r2, [r3, #0]
   18a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18a5e:	617b      	str	r3, [r7, #20]
   18a60:	697b      	ldr	r3, [r7, #20]
   18a62:	f383 8810 	msr	PRIMASK, r3
   18a66:	e000      	b.n	18a6a <vTraceStoreMemMangEvent+0x12a>
		return;
   18a68:	46c0      	nop			; (mov r8, r8)
}
   18a6a:	46bd      	mov	sp, r7
   18a6c:	b00e      	add	sp, #56	; 0x38
   18a6e:	bd80      	pop	{r7, pc}
   18a70:	20000df0 	.word	0x20000df0
   18a74:	20000d48 	.word	0x20000d48
   18a78:	20000d5c 	.word	0x20000d5c
   18a7c:	00019b49 	.word	0x00019b49
   18a80:	0000ffff 	.word	0x0000ffff
   18a84:	00018d0d 	.word	0x00018d0d
   18a88:	000194ed 	.word	0x000194ed
   18a8c:	00019af1 	.word	0x00019af1

00018a90 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   18a90:	b590      	push	{r4, r7, lr}
   18a92:	b08b      	sub	sp, #44	; 0x2c
   18a94:	af00      	add	r7, sp, #0
   18a96:	60f8      	str	r0, [r7, #12]
   18a98:	607a      	str	r2, [r7, #4]
   18a9a:	230b      	movs	r3, #11
   18a9c:	18fb      	adds	r3, r7, r3
   18a9e:	1c0a      	adds	r2, r1, #0
   18aa0:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   18aa2:	68fb      	ldr	r3, [r7, #12]
   18aa4:	2bfe      	cmp	r3, #254	; 0xfe
   18aa6:	d904      	bls.n	18ab2 <prvTraceStoreKernelCall+0x22>
   18aa8:	4b39      	ldr	r3, [pc, #228]	; (18b90 <prvTraceStoreKernelCall+0x100>)
   18aaa:	0018      	movs	r0, r3
   18aac:	4b39      	ldr	r3, [pc, #228]	; (18b94 <prvTraceStoreKernelCall+0x104>)
   18aae:	4798      	blx	r3
   18ab0:	e06b      	b.n	18b8a <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   18ab2:	230b      	movs	r3, #11
   18ab4:	18fb      	adds	r3, r7, r3
   18ab6:	781b      	ldrb	r3, [r3, #0]
   18ab8:	2b08      	cmp	r3, #8
   18aba:	d904      	bls.n	18ac6 <prvTraceStoreKernelCall+0x36>
   18abc:	4b36      	ldr	r3, [pc, #216]	; (18b98 <prvTraceStoreKernelCall+0x108>)
   18abe:	0018      	movs	r0, r3
   18ac0:	4b34      	ldr	r3, [pc, #208]	; (18b94 <prvTraceStoreKernelCall+0x104>)
   18ac2:	4798      	blx	r3
   18ac4:	e061      	b.n	18b8a <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   18ac6:	4b35      	ldr	r3, [pc, #212]	; (18b9c <prvTraceStoreKernelCall+0x10c>)
   18ac8:	681a      	ldr	r2, [r3, #0]
   18aca:	230b      	movs	r3, #11
   18acc:	18fb      	adds	r3, r7, r3
   18ace:	781b      	ldrb	r3, [r3, #0]
   18ad0:	2164      	movs	r1, #100	; 0x64
   18ad2:	18d3      	adds	r3, r2, r3
   18ad4:	185b      	adds	r3, r3, r1
   18ad6:	781b      	ldrb	r3, [r3, #0]
   18ad8:	001a      	movs	r2, r3
   18ada:	687b      	ldr	r3, [r7, #4]
   18adc:	429a      	cmp	r2, r3
   18ade:	d204      	bcs.n	18aea <prvTraceStoreKernelCall+0x5a>
   18ae0:	4b2f      	ldr	r3, [pc, #188]	; (18ba0 <prvTraceStoreKernelCall+0x110>)
   18ae2:	0018      	movs	r0, r3
   18ae4:	4b2b      	ldr	r3, [pc, #172]	; (18b94 <prvTraceStoreKernelCall+0x104>)
   18ae6:	4798      	blx	r3
   18ae8:	e04f      	b.n	18b8a <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   18aea:	4b2e      	ldr	r3, [pc, #184]	; (18ba4 <prvTraceStoreKernelCall+0x114>)
   18aec:	681b      	ldr	r3, [r3, #0]
   18aee:	2b00      	cmp	r3, #0
   18af0:	d004      	beq.n	18afc <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   18af2:	4b2d      	ldr	r3, [pc, #180]	; (18ba8 <prvTraceStoreKernelCall+0x118>)
   18af4:	0018      	movs	r0, r3
   18af6:	4b27      	ldr	r3, [pc, #156]	; (18b94 <prvTraceStoreKernelCall+0x104>)
   18af8:	4798      	blx	r3
		return;
   18afa:	e046      	b.n	18b8a <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   18afc:	4b2b      	ldr	r3, [pc, #172]	; (18bac <prvTraceStoreKernelCall+0x11c>)
   18afe:	781b      	ldrb	r3, [r3, #0]
   18b00:	2b00      	cmp	r3, #0
   18b02:	d041      	beq.n	18b88 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18b04:	f3ef 8310 	mrs	r3, PRIMASK
   18b08:	617b      	str	r3, [r7, #20]
  return(result);
   18b0a:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   18b0c:	627b      	str	r3, [r7, #36]	; 0x24
   18b0e:	2301      	movs	r3, #1
   18b10:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18b12:	69bb      	ldr	r3, [r7, #24]
   18b14:	f383 8810 	msr	PRIMASK, r3
   18b18:	4b22      	ldr	r3, [pc, #136]	; (18ba4 <prvTraceStoreKernelCall+0x114>)
   18b1a:	681b      	ldr	r3, [r3, #0]
   18b1c:	1c5a      	adds	r2, r3, #1
   18b1e:	4b21      	ldr	r3, [pc, #132]	; (18ba4 <prvTraceStoreKernelCall+0x114>)
   18b20:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   18b22:	4b1e      	ldr	r3, [pc, #120]	; (18b9c <prvTraceStoreKernelCall+0x10c>)
   18b24:	681b      	ldr	r3, [r3, #0]
   18b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18b28:	2b00      	cmp	r3, #0
   18b2a:	d022      	beq.n	18b72 <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   18b2c:	2322      	movs	r3, #34	; 0x22
   18b2e:	18fc      	adds	r4, r7, r3
   18b30:	4b1f      	ldr	r3, [pc, #124]	; (18bb0 <prvTraceStoreKernelCall+0x120>)
   18b32:	0018      	movs	r0, r3
   18b34:	4b1f      	ldr	r3, [pc, #124]	; (18bb4 <prvTraceStoreKernelCall+0x124>)
   18b36:	4798      	blx	r3
   18b38:	0003      	movs	r3, r0
   18b3a:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   18b3c:	2321      	movs	r3, #33	; 0x21
   18b3e:	18fb      	adds	r3, r7, r3
   18b40:	687a      	ldr	r2, [r7, #4]
   18b42:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   18b44:	4b1c      	ldr	r3, [pc, #112]	; (18bb8 <prvTraceStoreKernelCall+0x128>)
   18b46:	4798      	blx	r3
   18b48:	0003      	movs	r3, r0
   18b4a:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   18b4c:	69fb      	ldr	r3, [r7, #28]
   18b4e:	2b00      	cmp	r3, #0
   18b50:	d00f      	beq.n	18b72 <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   18b52:	69fb      	ldr	r3, [r7, #28]
   18b54:	2222      	movs	r2, #34	; 0x22
   18b56:	18ba      	adds	r2, r7, r2
   18b58:	8812      	ldrh	r2, [r2, #0]
   18b5a:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   18b5c:	68fb      	ldr	r3, [r7, #12]
   18b5e:	b2da      	uxtb	r2, r3
   18b60:	69fb      	ldr	r3, [r7, #28]
   18b62:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   18b64:	69fb      	ldr	r3, [r7, #28]
   18b66:	2221      	movs	r2, #33	; 0x21
   18b68:	18ba      	adds	r2, r7, r2
   18b6a:	7812      	ldrb	r2, [r2, #0]
   18b6c:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   18b6e:	4b13      	ldr	r3, [pc, #76]	; (18bbc <prvTraceStoreKernelCall+0x12c>)
   18b70:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18b72:	4b0c      	ldr	r3, [pc, #48]	; (18ba4 <prvTraceStoreKernelCall+0x114>)
   18b74:	681b      	ldr	r3, [r3, #0]
   18b76:	1e5a      	subs	r2, r3, #1
   18b78:	4b0a      	ldr	r3, [pc, #40]	; (18ba4 <prvTraceStoreKernelCall+0x114>)
   18b7a:	601a      	str	r2, [r3, #0]
   18b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18b7e:	613b      	str	r3, [r7, #16]
   18b80:	693b      	ldr	r3, [r7, #16]
   18b82:	f383 8810 	msr	PRIMASK, r3
   18b86:	e000      	b.n	18b8a <prvTraceStoreKernelCall+0xfa>
		return;
   18b88:	46c0      	nop			; (mov r8, r8)
}
   18b8a:	46bd      	mov	sp, r7
   18b8c:	b00b      	add	sp, #44	; 0x2c
   18b8e:	bd90      	pop	{r4, r7, pc}
   18b90:	000376b4 	.word	0x000376b4
   18b94:	00019935 	.word	0x00019935
   18b98:	000376ec 	.word	0x000376ec
   18b9c:	20000df0 	.word	0x20000df0
   18ba0:	00037734 	.word	0x00037734
   18ba4:	20000d48 	.word	0x20000d48
   18ba8:	0003777c 	.word	0x0003777c
   18bac:	20000d54 	.word	0x20000d54
   18bb0:	0000ffff 	.word	0x0000ffff
   18bb4:	00019b49 	.word	0x00019b49
   18bb8:	000194ed 	.word	0x000194ed
   18bbc:	00019af1 	.word	0x00019af1

00018bc0 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   18bc0:	b580      	push	{r7, lr}
   18bc2:	b08a      	sub	sp, #40	; 0x28
   18bc4:	af00      	add	r7, sp, #0
   18bc6:	60f8      	str	r0, [r7, #12]
   18bc8:	607a      	str	r2, [r7, #4]
   18bca:	603b      	str	r3, [r7, #0]
   18bcc:	230b      	movs	r3, #11
   18bce:	18fb      	adds	r3, r7, r3
   18bd0:	1c0a      	adds	r2, r1, #0
   18bd2:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   18bd4:	68fb      	ldr	r3, [r7, #12]
   18bd6:	2bfe      	cmp	r3, #254	; 0xfe
   18bd8:	d904      	bls.n	18be4 <prvTraceStoreKernelCallWithParam+0x24>
   18bda:	4b40      	ldr	r3, [pc, #256]	; (18cdc <prvTraceStoreKernelCallWithParam+0x11c>)
   18bdc:	0018      	movs	r0, r3
   18bde:	4b40      	ldr	r3, [pc, #256]	; (18ce0 <prvTraceStoreKernelCallWithParam+0x120>)
   18be0:	4798      	blx	r3
   18be2:	e077      	b.n	18cd4 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   18be4:	230b      	movs	r3, #11
   18be6:	18fb      	adds	r3, r7, r3
   18be8:	781b      	ldrb	r3, [r3, #0]
   18bea:	2b08      	cmp	r3, #8
   18bec:	d904      	bls.n	18bf8 <prvTraceStoreKernelCallWithParam+0x38>
   18bee:	4b3d      	ldr	r3, [pc, #244]	; (18ce4 <prvTraceStoreKernelCallWithParam+0x124>)
   18bf0:	0018      	movs	r0, r3
   18bf2:	4b3b      	ldr	r3, [pc, #236]	; (18ce0 <prvTraceStoreKernelCallWithParam+0x120>)
   18bf4:	4798      	blx	r3
   18bf6:	e06d      	b.n	18cd4 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   18bf8:	4b3b      	ldr	r3, [pc, #236]	; (18ce8 <prvTraceStoreKernelCallWithParam+0x128>)
   18bfa:	681a      	ldr	r2, [r3, #0]
   18bfc:	230b      	movs	r3, #11
   18bfe:	18fb      	adds	r3, r7, r3
   18c00:	781b      	ldrb	r3, [r3, #0]
   18c02:	2164      	movs	r1, #100	; 0x64
   18c04:	18d3      	adds	r3, r2, r3
   18c06:	185b      	adds	r3, r3, r1
   18c08:	781b      	ldrb	r3, [r3, #0]
   18c0a:	001a      	movs	r2, r3
   18c0c:	687b      	ldr	r3, [r7, #4]
   18c0e:	429a      	cmp	r2, r3
   18c10:	d204      	bcs.n	18c1c <prvTraceStoreKernelCallWithParam+0x5c>
   18c12:	4b36      	ldr	r3, [pc, #216]	; (18cec <prvTraceStoreKernelCallWithParam+0x12c>)
   18c14:	0018      	movs	r0, r3
   18c16:	4b32      	ldr	r3, [pc, #200]	; (18ce0 <prvTraceStoreKernelCallWithParam+0x120>)
   18c18:	4798      	blx	r3
   18c1a:	e05b      	b.n	18cd4 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   18c1c:	4b34      	ldr	r3, [pc, #208]	; (18cf0 <prvTraceStoreKernelCallWithParam+0x130>)
   18c1e:	681b      	ldr	r3, [r3, #0]
   18c20:	2b00      	cmp	r3, #0
   18c22:	d004      	beq.n	18c2e <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   18c24:	4b33      	ldr	r3, [pc, #204]	; (18cf4 <prvTraceStoreKernelCallWithParam+0x134>)
   18c26:	0018      	movs	r0, r3
   18c28:	4b2d      	ldr	r3, [pc, #180]	; (18ce0 <prvTraceStoreKernelCallWithParam+0x120>)
   18c2a:	4798      	blx	r3
		return;
   18c2c:	e052      	b.n	18cd4 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18c2e:	f3ef 8310 	mrs	r3, PRIMASK
   18c32:	617b      	str	r3, [r7, #20]
  return(result);
   18c34:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   18c36:	627b      	str	r3, [r7, #36]	; 0x24
   18c38:	2301      	movs	r3, #1
   18c3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18c3c:	69bb      	ldr	r3, [r7, #24]
   18c3e:	f383 8810 	msr	PRIMASK, r3
   18c42:	4b2b      	ldr	r3, [pc, #172]	; (18cf0 <prvTraceStoreKernelCallWithParam+0x130>)
   18c44:	681b      	ldr	r3, [r3, #0]
   18c46:	1c5a      	adds	r2, r3, #1
   18c48:	4b29      	ldr	r3, [pc, #164]	; (18cf0 <prvTraceStoreKernelCallWithParam+0x130>)
   18c4a:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   18c4c:	4b26      	ldr	r3, [pc, #152]	; (18ce8 <prvTraceStoreKernelCallWithParam+0x128>)
   18c4e:	681b      	ldr	r3, [r3, #0]
   18c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18c52:	2b00      	cmp	r3, #0
   18c54:	d034      	beq.n	18cc0 <prvTraceStoreKernelCallWithParam+0x100>
   18c56:	4b28      	ldr	r3, [pc, #160]	; (18cf8 <prvTraceStoreKernelCallWithParam+0x138>)
   18c58:	781b      	ldrb	r3, [r3, #0]
   18c5a:	2b00      	cmp	r3, #0
   18c5c:	d030      	beq.n	18cc0 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   18c5e:	20ff      	movs	r0, #255	; 0xff
   18c60:	4b26      	ldr	r3, [pc, #152]	; (18cfc <prvTraceStoreKernelCallWithParam+0x13c>)
   18c62:	4798      	blx	r3
   18c64:	0003      	movs	r3, r0
   18c66:	001a      	movs	r2, r3
   18c68:	2323      	movs	r3, #35	; 0x23
   18c6a:	18fb      	adds	r3, r7, r3
   18c6c:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   18c6e:	683b      	ldr	r3, [r7, #0]
   18c70:	0019      	movs	r1, r3
   18c72:	20ff      	movs	r0, #255	; 0xff
   18c74:	4b22      	ldr	r3, [pc, #136]	; (18d00 <prvTraceStoreKernelCallWithParam+0x140>)
   18c76:	4798      	blx	r3
   18c78:	0002      	movs	r2, r0
   18c7a:	2322      	movs	r3, #34	; 0x22
   18c7c:	18fb      	adds	r3, r7, r3
   18c7e:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   18c80:	2321      	movs	r3, #33	; 0x21
   18c82:	18fb      	adds	r3, r7, r3
   18c84:	687a      	ldr	r2, [r7, #4]
   18c86:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   18c88:	4b1e      	ldr	r3, [pc, #120]	; (18d04 <prvTraceStoreKernelCallWithParam+0x144>)
   18c8a:	4798      	blx	r3
   18c8c:	0003      	movs	r3, r0
   18c8e:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   18c90:	69fb      	ldr	r3, [r7, #28]
   18c92:	2b00      	cmp	r3, #0
   18c94:	d014      	beq.n	18cc0 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   18c96:	69fb      	ldr	r3, [r7, #28]
   18c98:	2223      	movs	r2, #35	; 0x23
   18c9a:	18ba      	adds	r2, r7, r2
   18c9c:	7812      	ldrb	r2, [r2, #0]
   18c9e:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   18ca0:	68fb      	ldr	r3, [r7, #12]
   18ca2:	b2da      	uxtb	r2, r3
   18ca4:	69fb      	ldr	r3, [r7, #28]
   18ca6:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   18ca8:	69fb      	ldr	r3, [r7, #28]
   18caa:	2221      	movs	r2, #33	; 0x21
   18cac:	18ba      	adds	r2, r7, r2
   18cae:	7812      	ldrb	r2, [r2, #0]
   18cb0:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   18cb2:	69fb      	ldr	r3, [r7, #28]
   18cb4:	2222      	movs	r2, #34	; 0x22
   18cb6:	18ba      	adds	r2, r7, r2
   18cb8:	7812      	ldrb	r2, [r2, #0]
   18cba:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   18cbc:	4b12      	ldr	r3, [pc, #72]	; (18d08 <prvTraceStoreKernelCallWithParam+0x148>)
   18cbe:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18cc0:	4b0b      	ldr	r3, [pc, #44]	; (18cf0 <prvTraceStoreKernelCallWithParam+0x130>)
   18cc2:	681b      	ldr	r3, [r3, #0]
   18cc4:	1e5a      	subs	r2, r3, #1
   18cc6:	4b0a      	ldr	r3, [pc, #40]	; (18cf0 <prvTraceStoreKernelCallWithParam+0x130>)
   18cc8:	601a      	str	r2, [r3, #0]
   18cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18ccc:	613b      	str	r3, [r7, #16]
   18cce:	693b      	ldr	r3, [r7, #16]
   18cd0:	f383 8810 	msr	PRIMASK, r3
}
   18cd4:	46bd      	mov	sp, r7
   18cd6:	b00a      	add	sp, #40	; 0x28
   18cd8:	bd80      	pop	{r7, pc}
   18cda:	46c0      	nop			; (mov r8, r8)
   18cdc:	000377b4 	.word	0x000377b4
   18ce0:	00019935 	.word	0x00019935
   18ce4:	000377f4 	.word	0x000377f4
   18ce8:	20000df0 	.word	0x20000df0
   18cec:	00037844 	.word	0x00037844
   18cf0:	20000d48 	.word	0x20000d48
   18cf4:	00037894 	.word	0x00037894
   18cf8:	20000d54 	.word	0x20000d54
   18cfc:	00019b49 	.word	0x00019b49
   18d00:	00018d0d 	.word	0x00018d0d
   18d04:	000194ed 	.word	0x000194ed
   18d08:	00019af1 	.word	0x00019af1

00018d0c <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   18d0c:	b580      	push	{r7, lr}
   18d0e:	b084      	sub	sp, #16
   18d10:	af00      	add	r7, sp, #0
   18d12:	6078      	str	r0, [r7, #4]
   18d14:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   18d16:	687b      	ldr	r3, [r7, #4]
   18d18:	2bff      	cmp	r3, #255	; 0xff
   18d1a:	d009      	beq.n	18d30 <prvTraceGetParam+0x24>
   18d1c:	687b      	ldr	r3, [r7, #4]
   18d1e:	4a19      	ldr	r2, [pc, #100]	; (18d84 <prvTraceGetParam+0x78>)
   18d20:	4293      	cmp	r3, r2
   18d22:	d005      	beq.n	18d30 <prvTraceGetParam+0x24>
   18d24:	4b18      	ldr	r3, [pc, #96]	; (18d88 <prvTraceGetParam+0x7c>)
   18d26:	0018      	movs	r0, r3
   18d28:	4b18      	ldr	r3, [pc, #96]	; (18d8c <prvTraceGetParam+0x80>)
   18d2a:	4798      	blx	r3
   18d2c:	683b      	ldr	r3, [r7, #0]
   18d2e:	e024      	b.n	18d7a <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   18d30:	683a      	ldr	r2, [r7, #0]
   18d32:	687b      	ldr	r3, [r7, #4]
   18d34:	429a      	cmp	r2, r3
   18d36:	d801      	bhi.n	18d3c <prvTraceGetParam+0x30>
	{
		return param;
   18d38:	683b      	ldr	r3, [r7, #0]
   18d3a:	e01e      	b.n	18d7a <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   18d3c:	4b14      	ldr	r3, [pc, #80]	; (18d90 <prvTraceGetParam+0x84>)
   18d3e:	4798      	blx	r3
   18d40:	0003      	movs	r3, r0
   18d42:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   18d44:	68fb      	ldr	r3, [r7, #12]
   18d46:	2b00      	cmp	r3, #0
   18d48:	d014      	beq.n	18d74 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   18d4a:	68fb      	ldr	r3, [r7, #12]
   18d4c:	2201      	movs	r2, #1
   18d4e:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   18d50:	687b      	ldr	r3, [r7, #4]
   18d52:	43db      	mvns	r3, r3
   18d54:	683a      	ldr	r2, [r7, #0]
   18d56:	4013      	ands	r3, r2
   18d58:	0a1b      	lsrs	r3, r3, #8
   18d5a:	b2da      	uxtb	r2, r3
   18d5c:	68fb      	ldr	r3, [r7, #12]
   18d5e:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   18d60:	687b      	ldr	r3, [r7, #4]
   18d62:	43db      	mvns	r3, r3
   18d64:	683a      	ldr	r2, [r7, #0]
   18d66:	4013      	ands	r3, r2
   18d68:	0c1b      	lsrs	r3, r3, #16
   18d6a:	b29a      	uxth	r2, r3
   18d6c:	68fb      	ldr	r3, [r7, #12]
   18d6e:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   18d70:	4b08      	ldr	r3, [pc, #32]	; (18d94 <prvTraceGetParam+0x88>)
   18d72:	4798      	blx	r3
		}

		return param & param_max;
   18d74:	683b      	ldr	r3, [r7, #0]
   18d76:	687a      	ldr	r2, [r7, #4]
   18d78:	4013      	ands	r3, r2
	}
}
   18d7a:	0018      	movs	r0, r3
   18d7c:	46bd      	mov	sp, r7
   18d7e:	b004      	add	sp, #16
   18d80:	bd80      	pop	{r7, pc}
   18d82:	46c0      	nop			; (mov r8, r8)
   18d84:	0000ffff 	.word	0x0000ffff
   18d88:	000378cc 	.word	0x000378cc
   18d8c:	00019935 	.word	0x00019935
   18d90:	000194ed 	.word	0x000194ed
   18d94:	00019af1 	.word	0x00019af1

00018d98 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   18d98:	b580      	push	{r7, lr}
   18d9a:	b08a      	sub	sp, #40	; 0x28
   18d9c:	af00      	add	r7, sp, #0
   18d9e:	6078      	str	r0, [r7, #4]
   18da0:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   18da2:	2326      	movs	r3, #38	; 0x26
   18da4:	18fb      	adds	r3, r7, r3
   18da6:	2200      	movs	r2, #0
   18da8:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   18daa:	687b      	ldr	r3, [r7, #4]
   18dac:	2bfe      	cmp	r3, #254	; 0xfe
   18dae:	d904      	bls.n	18dba <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   18db0:	4b2d      	ldr	r3, [pc, #180]	; (18e68 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   18db2:	0018      	movs	r0, r3
   18db4:	4b2d      	ldr	r3, [pc, #180]	; (18e6c <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   18db6:	4798      	blx	r3
   18db8:	e053      	b.n	18e62 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   18dba:	4b2d      	ldr	r3, [pc, #180]	; (18e70 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18dbc:	681b      	ldr	r3, [r3, #0]
   18dbe:	2b00      	cmp	r3, #0
   18dc0:	d004      	beq.n	18dcc <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   18dc2:	4b2c      	ldr	r3, [pc, #176]	; (18e74 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   18dc4:	0018      	movs	r0, r3
   18dc6:	4b29      	ldr	r3, [pc, #164]	; (18e6c <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   18dc8:	4798      	blx	r3
		return;
   18dca:	e04a      	b.n	18e62 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18dcc:	f3ef 8310 	mrs	r3, PRIMASK
   18dd0:	613b      	str	r3, [r7, #16]
  return(result);
   18dd2:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   18dd4:	623b      	str	r3, [r7, #32]
   18dd6:	2301      	movs	r3, #1
   18dd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18dda:	697b      	ldr	r3, [r7, #20]
   18ddc:	f383 8810 	msr	PRIMASK, r3
   18de0:	4b23      	ldr	r3, [pc, #140]	; (18e70 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18de2:	681b      	ldr	r3, [r3, #0]
   18de4:	1c5a      	adds	r2, r3, #1
   18de6:	4b22      	ldr	r3, [pc, #136]	; (18e70 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18de8:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   18dea:	4b23      	ldr	r3, [pc, #140]	; (18e78 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   18dec:	681b      	ldr	r3, [r3, #0]
   18dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18df0:	2b00      	cmp	r3, #0
   18df2:	d02c      	beq.n	18e4e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   18df4:	4b21      	ldr	r3, [pc, #132]	; (18e7c <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   18df6:	781b      	ldrb	r3, [r3, #0]
   18df8:	2b00      	cmp	r3, #0
   18dfa:	d028      	beq.n	18e4e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   18dfc:	20ff      	movs	r0, #255	; 0xff
   18dfe:	4b20      	ldr	r3, [pc, #128]	; (18e80 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   18e00:	4798      	blx	r3
   18e02:	0003      	movs	r3, r0
   18e04:	001a      	movs	r2, r3
   18e06:	231f      	movs	r3, #31
   18e08:	18fb      	adds	r3, r7, r3
   18e0a:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   18e0c:	683b      	ldr	r3, [r7, #0]
   18e0e:	4a1d      	ldr	r2, [pc, #116]	; (18e84 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   18e10:	0019      	movs	r1, r3
   18e12:	0010      	movs	r0, r2
   18e14:	4b1c      	ldr	r3, [pc, #112]	; (18e88 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   18e16:	4798      	blx	r3
   18e18:	0002      	movs	r2, r0
   18e1a:	2326      	movs	r3, #38	; 0x26
   18e1c:	18fb      	adds	r3, r7, r3
   18e1e:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   18e20:	4b1a      	ldr	r3, [pc, #104]	; (18e8c <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   18e22:	4798      	blx	r3
   18e24:	0003      	movs	r3, r0
   18e26:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   18e28:	69bb      	ldr	r3, [r7, #24]
   18e2a:	2b00      	cmp	r3, #0
   18e2c:	d00f      	beq.n	18e4e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   18e2e:	69bb      	ldr	r3, [r7, #24]
   18e30:	221f      	movs	r2, #31
   18e32:	18ba      	adds	r2, r7, r2
   18e34:	7812      	ldrb	r2, [r2, #0]
   18e36:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   18e38:	687b      	ldr	r3, [r7, #4]
   18e3a:	b2da      	uxtb	r2, r3
   18e3c:	69bb      	ldr	r3, [r7, #24]
   18e3e:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   18e40:	69bb      	ldr	r3, [r7, #24]
   18e42:	2226      	movs	r2, #38	; 0x26
   18e44:	18ba      	adds	r2, r7, r2
   18e46:	8812      	ldrh	r2, [r2, #0]
   18e48:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   18e4a:	4b11      	ldr	r3, [pc, #68]	; (18e90 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   18e4c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18e4e:	4b08      	ldr	r3, [pc, #32]	; (18e70 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18e50:	681b      	ldr	r3, [r3, #0]
   18e52:	1e5a      	subs	r2, r3, #1
   18e54:	4b06      	ldr	r3, [pc, #24]	; (18e70 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18e56:	601a      	str	r2, [r3, #0]
   18e58:	6a3b      	ldr	r3, [r7, #32]
   18e5a:	60fb      	str	r3, [r7, #12]
   18e5c:	68fb      	ldr	r3, [r7, #12]
   18e5e:	f383 8810 	msr	PRIMASK, r3
}
   18e62:	46bd      	mov	sp, r7
   18e64:	b00a      	add	sp, #40	; 0x28
   18e66:	bd80      	pop	{r7, pc}
   18e68:	00037908 	.word	0x00037908
   18e6c:	00019935 	.word	0x00019935
   18e70:	20000d48 	.word	0x20000d48
   18e74:	00037960 	.word	0x00037960
   18e78:	20000df0 	.word	0x20000df0
   18e7c:	20000d54 	.word	0x20000d54
   18e80:	00019b49 	.word	0x00019b49
   18e84:	0000ffff 	.word	0x0000ffff
   18e88:	00018d0d 	.word	0x00018d0d
   18e8c:	000194ed 	.word	0x000194ed
   18e90:	00019af1 	.word	0x00019af1

00018e94 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   18e94:	b590      	push	{r4, r7, lr}
   18e96:	b089      	sub	sp, #36	; 0x24
   18e98:	af00      	add	r7, sp, #0
   18e9a:	0002      	movs	r2, r0
   18e9c:	1dfb      	adds	r3, r7, #7
   18e9e:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   18ea0:	1dfb      	adds	r3, r7, #7
   18ea2:	781b      	ldrb	r3, [r3, #0]
   18ea4:	2b0f      	cmp	r3, #15
   18ea6:	d904      	bls.n	18eb2 <prvTraceStoreTaskswitch+0x1e>
   18ea8:	4b34      	ldr	r3, [pc, #208]	; (18f7c <prvTraceStoreTaskswitch+0xe8>)
   18eaa:	0018      	movs	r0, r3
   18eac:	4b34      	ldr	r3, [pc, #208]	; (18f80 <prvTraceStoreTaskswitch+0xec>)
   18eae:	4798      	blx	r3
   18eb0:	e061      	b.n	18f76 <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18eb2:	f3ef 8310 	mrs	r3, PRIMASK
   18eb6:	60fb      	str	r3, [r7, #12]
  return(result);
   18eb8:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   18eba:	61fb      	str	r3, [r7, #28]
   18ebc:	2301      	movs	r3, #1
   18ebe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18ec0:	693b      	ldr	r3, [r7, #16]
   18ec2:	f383 8810 	msr	PRIMASK, r3
   18ec6:	4b2f      	ldr	r3, [pc, #188]	; (18f84 <prvTraceStoreTaskswitch+0xf0>)
   18ec8:	681b      	ldr	r3, [r3, #0]
   18eca:	1c5a      	adds	r2, r3, #1
   18ecc:	4b2d      	ldr	r3, [pc, #180]	; (18f84 <prvTraceStoreTaskswitch+0xf0>)
   18ece:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   18ed0:	4b2d      	ldr	r3, [pc, #180]	; (18f88 <prvTraceStoreTaskswitch+0xf4>)
   18ed2:	781b      	ldrb	r3, [r3, #0]
   18ed4:	1dfa      	adds	r2, r7, #7
   18ed6:	7812      	ldrb	r2, [r2, #0]
   18ed8:	429a      	cmp	r2, r3
   18eda:	d042      	beq.n	18f62 <prvTraceStoreTaskswitch+0xce>
   18edc:	4b2b      	ldr	r3, [pc, #172]	; (18f8c <prvTraceStoreTaskswitch+0xf8>)
   18ede:	681b      	ldr	r3, [r3, #0]
   18ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18ee2:	2b00      	cmp	r3, #0
   18ee4:	d03d      	beq.n	18f62 <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   18ee6:	4b2a      	ldr	r3, [pc, #168]	; (18f90 <prvTraceStoreTaskswitch+0xfc>)
   18ee8:	2200      	movs	r2, #0
   18eea:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   18eec:	231a      	movs	r3, #26
   18eee:	18fc      	adds	r4, r7, r3
   18ef0:	4b28      	ldr	r3, [pc, #160]	; (18f94 <prvTraceStoreTaskswitch+0x100>)
   18ef2:	0018      	movs	r0, r3
   18ef4:	4b28      	ldr	r3, [pc, #160]	; (18f98 <prvTraceStoreTaskswitch+0x104>)
   18ef6:	4798      	blx	r3
   18ef8:	0003      	movs	r3, r0
   18efa:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   18efc:	4b22      	ldr	r3, [pc, #136]	; (18f88 <prvTraceStoreTaskswitch+0xf4>)
   18efe:	1dfa      	adds	r2, r7, #7
   18f00:	7812      	ldrb	r2, [r2, #0]
   18f02:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   18f04:	2319      	movs	r3, #25
   18f06:	18fb      	adds	r3, r7, r3
   18f08:	4a1f      	ldr	r2, [pc, #124]	; (18f88 <prvTraceStoreTaskswitch+0xf4>)
   18f0a:	7812      	ldrb	r2, [r2, #0]
   18f0c:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   18f0e:	4b23      	ldr	r3, [pc, #140]	; (18f9c <prvTraceStoreTaskswitch+0x108>)
   18f10:	4798      	blx	r3
   18f12:	0003      	movs	r3, r0
   18f14:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   18f16:	697b      	ldr	r3, [r7, #20]
   18f18:	2b00      	cmp	r3, #0
   18f1a:	d022      	beq.n	18f62 <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   18f1c:	4b1a      	ldr	r3, [pc, #104]	; (18f88 <prvTraceStoreTaskswitch+0xf4>)
   18f1e:	781b      	ldrb	r3, [r3, #0]
   18f20:	0019      	movs	r1, r3
   18f22:	2003      	movs	r0, #3
   18f24:	4b1e      	ldr	r3, [pc, #120]	; (18fa0 <prvTraceStoreTaskswitch+0x10c>)
   18f26:	4798      	blx	r3
   18f28:	0003      	movs	r3, r0
   18f2a:	2b01      	cmp	r3, #1
   18f2c:	d103      	bne.n	18f36 <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   18f2e:	697b      	ldr	r3, [r7, #20]
   18f30:	2207      	movs	r2, #7
   18f32:	701a      	strb	r2, [r3, #0]
   18f34:	e002      	b.n	18f3c <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   18f36:	697b      	ldr	r3, [r7, #20]
   18f38:	2206      	movs	r2, #6
   18f3a:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   18f3c:	697b      	ldr	r3, [r7, #20]
   18f3e:	221a      	movs	r2, #26
   18f40:	18ba      	adds	r2, r7, r2
   18f42:	8812      	ldrh	r2, [r2, #0]
   18f44:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   18f46:	697b      	ldr	r3, [r7, #20]
   18f48:	2219      	movs	r2, #25
   18f4a:	18ba      	adds	r2, r7, r2
   18f4c:	7812      	ldrb	r2, [r2, #0]
   18f4e:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   18f50:	4b0d      	ldr	r3, [pc, #52]	; (18f88 <prvTraceStoreTaskswitch+0xf4>)
   18f52:	781b      	ldrb	r3, [r3, #0]
   18f54:	2201      	movs	r2, #1
   18f56:	0019      	movs	r1, r3
   18f58:	2003      	movs	r0, #3
   18f5a:	4b12      	ldr	r3, [pc, #72]	; (18fa4 <prvTraceStoreTaskswitch+0x110>)
   18f5c:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   18f5e:	4b12      	ldr	r3, [pc, #72]	; (18fa8 <prvTraceStoreTaskswitch+0x114>)
   18f60:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   18f62:	4b08      	ldr	r3, [pc, #32]	; (18f84 <prvTraceStoreTaskswitch+0xf0>)
   18f64:	681b      	ldr	r3, [r3, #0]
   18f66:	1e5a      	subs	r2, r3, #1
   18f68:	4b06      	ldr	r3, [pc, #24]	; (18f84 <prvTraceStoreTaskswitch+0xf0>)
   18f6a:	601a      	str	r2, [r3, #0]
   18f6c:	69fb      	ldr	r3, [r7, #28]
   18f6e:	60bb      	str	r3, [r7, #8]
   18f70:	68bb      	ldr	r3, [r7, #8]
   18f72:	f383 8810 	msr	PRIMASK, r3
}
   18f76:	46bd      	mov	sp, r7
   18f78:	b009      	add	sp, #36	; 0x24
   18f7a:	bd90      	pop	{r4, r7, pc}
   18f7c:	00037998 	.word	0x00037998
   18f80:	00019935 	.word	0x00019935
   18f84:	20000d48 	.word	0x20000d48
   18f88:	20000d54 	.word	0x20000d54
   18f8c:	20000df0 	.word	0x20000df0
   18f90:	20000d34 	.word	0x20000d34
   18f94:	0000ffff 	.word	0x0000ffff
   18f98:	00019b49 	.word	0x00019b49
   18f9c:	000194ed 	.word	0x000194ed
   18fa0:	00019191 	.word	0x00019191
   18fa4:	000190ed 	.word	0x000190ed
   18fa8:	00019af1 	.word	0x00019af1

00018fac <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   18fac:	b590      	push	{r4, r7, lr}
   18fae:	b083      	sub	sp, #12
   18fb0:	af00      	add	r7, sp, #0
   18fb2:	0004      	movs	r4, r0
   18fb4:	0008      	movs	r0, r1
   18fb6:	0011      	movs	r1, r2
   18fb8:	1dfb      	adds	r3, r7, #7
   18fba:	1c22      	adds	r2, r4, #0
   18fbc:	701a      	strb	r2, [r3, #0]
   18fbe:	1dbb      	adds	r3, r7, #6
   18fc0:	1c02      	adds	r2, r0, #0
   18fc2:	701a      	strb	r2, [r3, #0]
   18fc4:	1d7b      	adds	r3, r7, #5
   18fc6:	1c0a      	adds	r2, r1, #0
   18fc8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18fca:	1dfb      	adds	r3, r7, #7
   18fcc:	781b      	ldrb	r3, [r3, #0]
   18fce:	2b08      	cmp	r3, #8
   18fd0:	d904      	bls.n	18fdc <prvTraceSetPriorityProperty+0x30>
   18fd2:	4b1a      	ldr	r3, [pc, #104]	; (1903c <prvTraceSetPriorityProperty+0x90>)
   18fd4:	0018      	movs	r0, r3
   18fd6:	4b1a      	ldr	r3, [pc, #104]	; (19040 <prvTraceSetPriorityProperty+0x94>)
   18fd8:	4798      	blx	r3
   18fda:	e02c      	b.n	19036 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18fdc:	4b19      	ldr	r3, [pc, #100]	; (19044 <prvTraceSetPriorityProperty+0x98>)
   18fde:	681a      	ldr	r2, [r3, #0]
   18fe0:	1dfb      	adds	r3, r7, #7
   18fe2:	781b      	ldrb	r3, [r3, #0]
   18fe4:	2164      	movs	r1, #100	; 0x64
   18fe6:	18d3      	adds	r3, r2, r3
   18fe8:	185b      	adds	r3, r3, r1
   18fea:	781b      	ldrb	r3, [r3, #0]
   18fec:	1dba      	adds	r2, r7, #6
   18fee:	7812      	ldrb	r2, [r2, #0]
   18ff0:	429a      	cmp	r2, r3
   18ff2:	d904      	bls.n	18ffe <prvTraceSetPriorityProperty+0x52>
   18ff4:	4b14      	ldr	r3, [pc, #80]	; (19048 <prvTraceSetPriorityProperty+0x9c>)
   18ff6:	0018      	movs	r0, r3
   18ff8:	4b11      	ldr	r3, [pc, #68]	; (19040 <prvTraceSetPriorityProperty+0x94>)
   18ffa:	4798      	blx	r3
   18ffc:	e01b      	b.n	19036 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   18ffe:	4b11      	ldr	r3, [pc, #68]	; (19044 <prvTraceSetPriorityProperty+0x98>)
   19000:	681c      	ldr	r4, [r3, #0]
   19002:	1dfb      	adds	r3, r7, #7
   19004:	781a      	ldrb	r2, [r3, #0]
   19006:	1dbb      	adds	r3, r7, #6
   19008:	781b      	ldrb	r3, [r3, #0]
   1900a:	0011      	movs	r1, r2
   1900c:	0018      	movs	r0, r3
   1900e:	4b0f      	ldr	r3, [pc, #60]	; (1904c <prvTraceSetPriorityProperty+0xa0>)
   19010:	4798      	blx	r3
   19012:	0003      	movs	r3, r0
   19014:	0018      	movs	r0, r3
   19016:	4b0b      	ldr	r3, [pc, #44]	; (19044 <prvTraceSetPriorityProperty+0x98>)
   19018:	681a      	ldr	r2, [r3, #0]
   1901a:	1dfb      	adds	r3, r7, #7
   1901c:	781b      	ldrb	r3, [r3, #0]
   1901e:	2170      	movs	r1, #112	; 0x70
   19020:	18d3      	adds	r3, r2, r3
   19022:	185b      	adds	r3, r3, r1
   19024:	781b      	ldrb	r3, [r3, #0]
   19026:	18c3      	adds	r3, r0, r3
   19028:	3301      	adds	r3, #1
   1902a:	229c      	movs	r2, #156	; 0x9c
   1902c:	18e3      	adds	r3, r4, r3
   1902e:	189b      	adds	r3, r3, r2
   19030:	1d7a      	adds	r2, r7, #5
   19032:	7812      	ldrb	r2, [r2, #0]
   19034:	701a      	strb	r2, [r3, #0]
}
   19036:	46bd      	mov	sp, r7
   19038:	b003      	add	sp, #12
   1903a:	bd90      	pop	{r4, r7, pc}
   1903c:	00037b2c 	.word	0x00037b2c
   19040:	00019935 	.word	0x00019935
   19044:	20000df0 	.word	0x20000df0
   19048:	00037b78 	.word	0x00037b78
   1904c:	00019541 	.word	0x00019541

00019050 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   19050:	b590      	push	{r4, r7, lr}
   19052:	b083      	sub	sp, #12
   19054:	af00      	add	r7, sp, #0
   19056:	0002      	movs	r2, r0
   19058:	1dfb      	adds	r3, r7, #7
   1905a:	701a      	strb	r2, [r3, #0]
   1905c:	1dbb      	adds	r3, r7, #6
   1905e:	1c0a      	adds	r2, r1, #0
   19060:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19062:	1dfb      	adds	r3, r7, #7
   19064:	781b      	ldrb	r3, [r3, #0]
   19066:	2b08      	cmp	r3, #8
   19068:	d905      	bls.n	19076 <prvTraceGetPriorityProperty+0x26>
   1906a:	4b1b      	ldr	r3, [pc, #108]	; (190d8 <prvTraceGetPriorityProperty+0x88>)
   1906c:	0018      	movs	r0, r3
   1906e:	4b1b      	ldr	r3, [pc, #108]	; (190dc <prvTraceGetPriorityProperty+0x8c>)
   19070:	4798      	blx	r3
   19072:	2300      	movs	r3, #0
   19074:	e02b      	b.n	190ce <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19076:	4b1a      	ldr	r3, [pc, #104]	; (190e0 <prvTraceGetPriorityProperty+0x90>)
   19078:	681a      	ldr	r2, [r3, #0]
   1907a:	1dfb      	adds	r3, r7, #7
   1907c:	781b      	ldrb	r3, [r3, #0]
   1907e:	2164      	movs	r1, #100	; 0x64
   19080:	18d3      	adds	r3, r2, r3
   19082:	185b      	adds	r3, r3, r1
   19084:	781b      	ldrb	r3, [r3, #0]
   19086:	1dba      	adds	r2, r7, #6
   19088:	7812      	ldrb	r2, [r2, #0]
   1908a:	429a      	cmp	r2, r3
   1908c:	d905      	bls.n	1909a <prvTraceGetPriorityProperty+0x4a>
   1908e:	4b15      	ldr	r3, [pc, #84]	; (190e4 <prvTraceGetPriorityProperty+0x94>)
   19090:	0018      	movs	r0, r3
   19092:	4b12      	ldr	r3, [pc, #72]	; (190dc <prvTraceGetPriorityProperty+0x8c>)
   19094:	4798      	blx	r3
   19096:	2300      	movs	r3, #0
   19098:	e019      	b.n	190ce <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   1909a:	4b11      	ldr	r3, [pc, #68]	; (190e0 <prvTraceGetPriorityProperty+0x90>)
   1909c:	681c      	ldr	r4, [r3, #0]
   1909e:	1dfb      	adds	r3, r7, #7
   190a0:	781a      	ldrb	r2, [r3, #0]
   190a2:	1dbb      	adds	r3, r7, #6
   190a4:	781b      	ldrb	r3, [r3, #0]
   190a6:	0011      	movs	r1, r2
   190a8:	0018      	movs	r0, r3
   190aa:	4b0f      	ldr	r3, [pc, #60]	; (190e8 <prvTraceGetPriorityProperty+0x98>)
   190ac:	4798      	blx	r3
   190ae:	0003      	movs	r3, r0
   190b0:	0018      	movs	r0, r3
   190b2:	4b0b      	ldr	r3, [pc, #44]	; (190e0 <prvTraceGetPriorityProperty+0x90>)
   190b4:	681a      	ldr	r2, [r3, #0]
   190b6:	1dfb      	adds	r3, r7, #7
   190b8:	781b      	ldrb	r3, [r3, #0]
   190ba:	2170      	movs	r1, #112	; 0x70
   190bc:	18d3      	adds	r3, r2, r3
   190be:	185b      	adds	r3, r3, r1
   190c0:	781b      	ldrb	r3, [r3, #0]
   190c2:	18c3      	adds	r3, r0, r3
   190c4:	3301      	adds	r3, #1
   190c6:	229c      	movs	r2, #156	; 0x9c
   190c8:	18e3      	adds	r3, r4, r3
   190ca:	189b      	adds	r3, r3, r2
   190cc:	781b      	ldrb	r3, [r3, #0]
}
   190ce:	0018      	movs	r0, r3
   190d0:	46bd      	mov	sp, r7
   190d2:	b003      	add	sp, #12
   190d4:	bd90      	pop	{r4, r7, pc}
   190d6:	46c0      	nop			; (mov r8, r8)
   190d8:	00037bb8 	.word	0x00037bb8
   190dc:	00019935 	.word	0x00019935
   190e0:	20000df0 	.word	0x20000df0
   190e4:	00037c04 	.word	0x00037c04
   190e8:	00019541 	.word	0x00019541

000190ec <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   190ec:	b590      	push	{r4, r7, lr}
   190ee:	b083      	sub	sp, #12
   190f0:	af00      	add	r7, sp, #0
   190f2:	0004      	movs	r4, r0
   190f4:	0008      	movs	r0, r1
   190f6:	0011      	movs	r1, r2
   190f8:	1dfb      	adds	r3, r7, #7
   190fa:	1c22      	adds	r2, r4, #0
   190fc:	701a      	strb	r2, [r3, #0]
   190fe:	1dbb      	adds	r3, r7, #6
   19100:	1c02      	adds	r2, r0, #0
   19102:	701a      	strb	r2, [r3, #0]
   19104:	1d7b      	adds	r3, r7, #5
   19106:	1c0a      	adds	r2, r1, #0
   19108:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1910a:	1dfb      	adds	r3, r7, #7
   1910c:	781b      	ldrb	r3, [r3, #0]
   1910e:	2b08      	cmp	r3, #8
   19110:	d904      	bls.n	1911c <prvTraceSetObjectState+0x30>
   19112:	4b1a      	ldr	r3, [pc, #104]	; (1917c <prvTraceSetObjectState+0x90>)
   19114:	0018      	movs	r0, r3
   19116:	4b1a      	ldr	r3, [pc, #104]	; (19180 <prvTraceSetObjectState+0x94>)
   19118:	4798      	blx	r3
   1911a:	e02b      	b.n	19174 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1911c:	4b19      	ldr	r3, [pc, #100]	; (19184 <prvTraceSetObjectState+0x98>)
   1911e:	681a      	ldr	r2, [r3, #0]
   19120:	1dfb      	adds	r3, r7, #7
   19122:	781b      	ldrb	r3, [r3, #0]
   19124:	2164      	movs	r1, #100	; 0x64
   19126:	18d3      	adds	r3, r2, r3
   19128:	185b      	adds	r3, r3, r1
   1912a:	781b      	ldrb	r3, [r3, #0]
   1912c:	1dba      	adds	r2, r7, #6
   1912e:	7812      	ldrb	r2, [r2, #0]
   19130:	429a      	cmp	r2, r3
   19132:	d904      	bls.n	1913e <prvTraceSetObjectState+0x52>
   19134:	4b14      	ldr	r3, [pc, #80]	; (19188 <prvTraceSetObjectState+0x9c>)
   19136:	0018      	movs	r0, r3
   19138:	4b11      	ldr	r3, [pc, #68]	; (19180 <prvTraceSetObjectState+0x94>)
   1913a:	4798      	blx	r3
   1913c:	e01a      	b.n	19174 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   1913e:	4b11      	ldr	r3, [pc, #68]	; (19184 <prvTraceSetObjectState+0x98>)
   19140:	681c      	ldr	r4, [r3, #0]
   19142:	1dfb      	adds	r3, r7, #7
   19144:	781a      	ldrb	r2, [r3, #0]
   19146:	1dbb      	adds	r3, r7, #6
   19148:	781b      	ldrb	r3, [r3, #0]
   1914a:	0011      	movs	r1, r2
   1914c:	0018      	movs	r0, r3
   1914e:	4b0f      	ldr	r3, [pc, #60]	; (1918c <prvTraceSetObjectState+0xa0>)
   19150:	4798      	blx	r3
   19152:	0003      	movs	r3, r0
   19154:	0018      	movs	r0, r3
   19156:	4b0b      	ldr	r3, [pc, #44]	; (19184 <prvTraceSetObjectState+0x98>)
   19158:	681a      	ldr	r2, [r3, #0]
   1915a:	1dfb      	adds	r3, r7, #7
   1915c:	781b      	ldrb	r3, [r3, #0]
   1915e:	2170      	movs	r1, #112	; 0x70
   19160:	18d3      	adds	r3, r2, r3
   19162:	185b      	adds	r3, r3, r1
   19164:	781b      	ldrb	r3, [r3, #0]
   19166:	18c3      	adds	r3, r0, r3
   19168:	229c      	movs	r2, #156	; 0x9c
   1916a:	18e3      	adds	r3, r4, r3
   1916c:	189b      	adds	r3, r3, r2
   1916e:	1d7a      	adds	r2, r7, #5
   19170:	7812      	ldrb	r2, [r2, #0]
   19172:	701a      	strb	r2, [r3, #0]
}
   19174:	46bd      	mov	sp, r7
   19176:	b003      	add	sp, #12
   19178:	bd90      	pop	{r4, r7, pc}
   1917a:	46c0      	nop			; (mov r8, r8)
   1917c:	00037c44 	.word	0x00037c44
   19180:	00019935 	.word	0x00019935
   19184:	20000df0 	.word	0x20000df0
   19188:	00037c88 	.word	0x00037c88
   1918c:	00019541 	.word	0x00019541

00019190 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   19190:	b590      	push	{r4, r7, lr}
   19192:	b083      	sub	sp, #12
   19194:	af00      	add	r7, sp, #0
   19196:	0002      	movs	r2, r0
   19198:	1dfb      	adds	r3, r7, #7
   1919a:	701a      	strb	r2, [r3, #0]
   1919c:	1dbb      	adds	r3, r7, #6
   1919e:	1c0a      	adds	r2, r1, #0
   191a0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   191a2:	1dfb      	adds	r3, r7, #7
   191a4:	781b      	ldrb	r3, [r3, #0]
   191a6:	2b08      	cmp	r3, #8
   191a8:	d905      	bls.n	191b6 <prvTraceGetObjectState+0x26>
   191aa:	4b1a      	ldr	r3, [pc, #104]	; (19214 <prvTraceGetObjectState+0x84>)
   191ac:	0018      	movs	r0, r3
   191ae:	4b1a      	ldr	r3, [pc, #104]	; (19218 <prvTraceGetObjectState+0x88>)
   191b0:	4798      	blx	r3
   191b2:	2300      	movs	r3, #0
   191b4:	e02a      	b.n	1920c <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   191b6:	4b19      	ldr	r3, [pc, #100]	; (1921c <prvTraceGetObjectState+0x8c>)
   191b8:	681a      	ldr	r2, [r3, #0]
   191ba:	1dfb      	adds	r3, r7, #7
   191bc:	781b      	ldrb	r3, [r3, #0]
   191be:	2164      	movs	r1, #100	; 0x64
   191c0:	18d3      	adds	r3, r2, r3
   191c2:	185b      	adds	r3, r3, r1
   191c4:	781b      	ldrb	r3, [r3, #0]
   191c6:	1dba      	adds	r2, r7, #6
   191c8:	7812      	ldrb	r2, [r2, #0]
   191ca:	429a      	cmp	r2, r3
   191cc:	d905      	bls.n	191da <prvTraceGetObjectState+0x4a>
   191ce:	4b14      	ldr	r3, [pc, #80]	; (19220 <prvTraceGetObjectState+0x90>)
   191d0:	0018      	movs	r0, r3
   191d2:	4b11      	ldr	r3, [pc, #68]	; (19218 <prvTraceGetObjectState+0x88>)
   191d4:	4798      	blx	r3
   191d6:	2300      	movs	r3, #0
   191d8:	e018      	b.n	1920c <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   191da:	4b10      	ldr	r3, [pc, #64]	; (1921c <prvTraceGetObjectState+0x8c>)
   191dc:	681c      	ldr	r4, [r3, #0]
   191de:	1dfb      	adds	r3, r7, #7
   191e0:	781a      	ldrb	r2, [r3, #0]
   191e2:	1dbb      	adds	r3, r7, #6
   191e4:	781b      	ldrb	r3, [r3, #0]
   191e6:	0011      	movs	r1, r2
   191e8:	0018      	movs	r0, r3
   191ea:	4b0e      	ldr	r3, [pc, #56]	; (19224 <prvTraceGetObjectState+0x94>)
   191ec:	4798      	blx	r3
   191ee:	0003      	movs	r3, r0
   191f0:	0018      	movs	r0, r3
   191f2:	4b0a      	ldr	r3, [pc, #40]	; (1921c <prvTraceGetObjectState+0x8c>)
   191f4:	681a      	ldr	r2, [r3, #0]
   191f6:	1dfb      	adds	r3, r7, #7
   191f8:	781b      	ldrb	r3, [r3, #0]
   191fa:	2170      	movs	r1, #112	; 0x70
   191fc:	18d3      	adds	r3, r2, r3
   191fe:	185b      	adds	r3, r3, r1
   19200:	781b      	ldrb	r3, [r3, #0]
   19202:	18c3      	adds	r3, r0, r3
   19204:	229c      	movs	r2, #156	; 0x9c
   19206:	18e3      	adds	r3, r4, r3
   19208:	189b      	adds	r3, r3, r2
   1920a:	781b      	ldrb	r3, [r3, #0]
}
   1920c:	0018      	movs	r0, r3
   1920e:	46bd      	mov	sp, r7
   19210:	b003      	add	sp, #12
   19212:	bd90      	pop	{r4, r7, pc}
   19214:	00037cc4 	.word	0x00037cc4
   19218:	00019935 	.word	0x00019935
   1921c:	20000df0 	.word	0x20000df0
   19220:	00037d08 	.word	0x00037d08
   19224:	00019541 	.word	0x00019541

00019228 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   19228:	b590      	push	{r4, r7, lr}
   1922a:	b083      	sub	sp, #12
   1922c:	af00      	add	r7, sp, #0
   1922e:	0002      	movs	r2, r0
   19230:	1dfb      	adds	r3, r7, #7
   19232:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   19234:	4b11      	ldr	r3, [pc, #68]	; (1927c <prvTraceSetTaskInstanceFinished+0x54>)
   19236:	681b      	ldr	r3, [r3, #0]
   19238:	2267      	movs	r2, #103	; 0x67
   1923a:	5c9b      	ldrb	r3, [r3, r2]
   1923c:	1dfa      	adds	r2, r7, #7
   1923e:	7812      	ldrb	r2, [r2, #0]
   19240:	429a      	cmp	r2, r3
   19242:	d904      	bls.n	1924e <prvTraceSetTaskInstanceFinished+0x26>
   19244:	4b0e      	ldr	r3, [pc, #56]	; (19280 <prvTraceSetTaskInstanceFinished+0x58>)
   19246:	0018      	movs	r0, r3
   19248:	4b0e      	ldr	r3, [pc, #56]	; (19284 <prvTraceSetTaskInstanceFinished+0x5c>)
   1924a:	4798      	blx	r3
   1924c:	e013      	b.n	19276 <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   1924e:	4b0b      	ldr	r3, [pc, #44]	; (1927c <prvTraceSetTaskInstanceFinished+0x54>)
   19250:	681c      	ldr	r4, [r3, #0]
   19252:	1dfb      	adds	r3, r7, #7
   19254:	781b      	ldrb	r3, [r3, #0]
   19256:	2103      	movs	r1, #3
   19258:	0018      	movs	r0, r3
   1925a:	4b0b      	ldr	r3, [pc, #44]	; (19288 <prvTraceSetTaskInstanceFinished+0x60>)
   1925c:	4798      	blx	r3
   1925e:	0003      	movs	r3, r0
   19260:	0019      	movs	r1, r3
   19262:	4b06      	ldr	r3, [pc, #24]	; (1927c <prvTraceSetTaskInstanceFinished+0x54>)
   19264:	681b      	ldr	r3, [r3, #0]
   19266:	2273      	movs	r2, #115	; 0x73
   19268:	5c9b      	ldrb	r3, [r3, r2]
   1926a:	18cb      	adds	r3, r1, r3
   1926c:	229c      	movs	r2, #156	; 0x9c
   1926e:	18e3      	adds	r3, r4, r3
   19270:	189b      	adds	r3, r3, r2
   19272:	2200      	movs	r2, #0
   19274:	701a      	strb	r2, [r3, #0]
#endif
}
   19276:	46bd      	mov	sp, r7
   19278:	b003      	add	sp, #12
   1927a:	bd90      	pop	{r4, r7, pc}
   1927c:	20000df0 	.word	0x20000df0
   19280:	00037d44 	.word	0x00037d44
   19284:	00019935 	.word	0x00019935
   19288:	00019541 	.word	0x00019541

0001928c <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   1928c:	b580      	push	{r7, lr}
   1928e:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   19290:	4b75      	ldr	r3, [pc, #468]	; (19468 <prvTraceInitTraceData+0x1dc>)
   19292:	681b      	ldr	r3, [r3, #0]
   19294:	2b00      	cmp	r3, #0
   19296:	d103      	bne.n	192a0 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   19298:	4b73      	ldr	r3, [pc, #460]	; (19468 <prvTraceInitTraceData+0x1dc>)
   1929a:	4a74      	ldr	r2, [pc, #464]	; (1946c <prvTraceInitTraceData+0x1e0>)
   1929c:	601a      	str	r2, [r3, #0]
   1929e:	e006      	b.n	192ae <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   192a0:	4b71      	ldr	r3, [pc, #452]	; (19468 <prvTraceInitTraceData+0x1dc>)
   192a2:	681b      	ldr	r3, [r3, #0]
   192a4:	781b      	ldrb	r3, [r3, #0]
   192a6:	b2db      	uxtb	r3, r3
   192a8:	2b01      	cmp	r3, #1
   192aa:	d100      	bne.n	192ae <prvTraceInitTraceData+0x22>
   192ac:	e0d8      	b.n	19460 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   192ae:	4b70      	ldr	r3, [pc, #448]	; (19470 <prvTraceInitTraceData+0x1e4>)
   192b0:	681a      	ldr	r2, [r3, #0]
   192b2:	4b70      	ldr	r3, [pc, #448]	; (19474 <prvTraceInitTraceData+0x1e8>)
   192b4:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   192b6:	4b6c      	ldr	r3, [pc, #432]	; (19468 <prvTraceInitTraceData+0x1dc>)
   192b8:	6818      	ldr	r0, [r3, #0]
   192ba:	23bd      	movs	r3, #189	; 0xbd
   192bc:	011b      	lsls	r3, r3, #4
   192be:	001a      	movs	r2, r3
   192c0:	2100      	movs	r1, #0
   192c2:	4b6d      	ldr	r3, [pc, #436]	; (19478 <prvTraceInitTraceData+0x1ec>)
   192c4:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   192c6:	4b68      	ldr	r3, [pc, #416]	; (19468 <prvTraceInitTraceData+0x1dc>)
   192c8:	681b      	ldr	r3, [r3, #0]
   192ca:	4a6c      	ldr	r2, [pc, #432]	; (1947c <prvTraceInitTraceData+0x1f0>)
   192cc:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   192ce:	4b66      	ldr	r3, [pc, #408]	; (19468 <prvTraceInitTraceData+0x1dc>)
   192d0:	681b      	ldr	r3, [r3, #0]
   192d2:	2205      	movs	r2, #5
   192d4:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   192d6:	4b64      	ldr	r3, [pc, #400]	; (19468 <prvTraceInitTraceData+0x1dc>)
   192d8:	681b      	ldr	r3, [r3, #0]
   192da:	2200      	movs	r2, #0
   192dc:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   192de:	4b62      	ldr	r3, [pc, #392]	; (19468 <prvTraceInitTraceData+0x1dc>)
   192e0:	681b      	ldr	r3, [r3, #0]
   192e2:	22bd      	movs	r2, #189	; 0xbd
   192e4:	0112      	lsls	r2, r2, #4
   192e6:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   192e8:	4b5f      	ldr	r3, [pc, #380]	; (19468 <prvTraceInitTraceData+0x1dc>)
   192ea:	681b      	ldr	r3, [r3, #0]
   192ec:	2296      	movs	r2, #150	; 0x96
   192ee:	0052      	lsls	r2, r2, #1
   192f0:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   192f2:	4b5d      	ldr	r3, [pc, #372]	; (19468 <prvTraceInitTraceData+0x1dc>)
   192f4:	681b      	ldr	r3, [r3, #0]
   192f6:	4a62      	ldr	r2, [pc, #392]	; (19480 <prvTraceInitTraceData+0x1f4>)
   192f8:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   192fa:	4b5b      	ldr	r3, [pc, #364]	; (19468 <prvTraceInitTraceData+0x1dc>)
   192fc:	681b      	ldr	r3, [r3, #0]
   192fe:	2200      	movs	r2, #0
   19300:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   19302:	4b59      	ldr	r3, [pc, #356]	; (19468 <prvTraceInitTraceData+0x1dc>)
   19304:	681b      	ldr	r3, [r3, #0]
   19306:	2200      	movs	r2, #0
   19308:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   1930a:	4b5e      	ldr	r3, [pc, #376]	; (19484 <prvTraceInitTraceData+0x1f8>)
   1930c:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   1930e:	4b56      	ldr	r3, [pc, #344]	; (19468 <prvTraceInitTraceData+0x1dc>)
   19310:	681b      	ldr	r3, [r3, #0]
   19312:	4a5d      	ldr	r2, [pc, #372]	; (19488 <prvTraceInitTraceData+0x1fc>)
   19314:	495d      	ldr	r1, [pc, #372]	; (1948c <prvTraceInitTraceData+0x200>)
   19316:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   19318:	4b53      	ldr	r3, [pc, #332]	; (19468 <prvTraceInitTraceData+0x1dc>)
   1931a:	681a      	ldr	r2, [r3, #0]
   1931c:	23ac      	movs	r3, #172	; 0xac
   1931e:	00db      	lsls	r3, r3, #3
   19320:	21c8      	movs	r1, #200	; 0xc8
   19322:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   19324:	4b50      	ldr	r3, [pc, #320]	; (19468 <prvTraceInitTraceData+0x1dc>)
   19326:	681b      	ldr	r3, [r3, #0]
   19328:	4a59      	ldr	r2, [pc, #356]	; (19490 <prvTraceInitTraceData+0x204>)
   1932a:	2101      	movs	r1, #1
   1932c:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   1932e:	4b4e      	ldr	r3, [pc, #312]	; (19468 <prvTraceInitTraceData+0x1dc>)
   19330:	681a      	ldr	r2, [r3, #0]
   19332:	23d7      	movs	r3, #215	; 0xd7
   19334:	00db      	lsls	r3, r3, #3
   19336:	4957      	ldr	r1, [pc, #348]	; (19494 <prvTraceInitTraceData+0x208>)
   19338:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   1933a:	4b4b      	ldr	r3, [pc, #300]	; (19468 <prvTraceInitTraceData+0x1dc>)
   1933c:	681b      	ldr	r3, [r3, #0]
   1933e:	4a56      	ldr	r2, [pc, #344]	; (19498 <prvTraceInitTraceData+0x20c>)
   19340:	4694      	mov	ip, r2
   19342:	4463      	add	r3, ip
   19344:	4955      	ldr	r1, [pc, #340]	; (1949c <prvTraceInitTraceData+0x210>)
   19346:	2250      	movs	r2, #80	; 0x50
   19348:	0018      	movs	r0, r3
   1934a:	4b55      	ldr	r3, [pc, #340]	; (194a0 <prvTraceInitTraceData+0x214>)
   1934c:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   1934e:	4b46      	ldr	r3, [pc, #280]	; (19468 <prvTraceInitTraceData+0x1dc>)
   19350:	681b      	ldr	r3, [r3, #0]
   19352:	4a54      	ldr	r2, [pc, #336]	; (194a4 <prvTraceInitTraceData+0x218>)
   19354:	4954      	ldr	r1, [pc, #336]	; (194a8 <prvTraceInitTraceData+0x21c>)
   19356:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   19358:	4b43      	ldr	r3, [pc, #268]	; (19468 <prvTraceInitTraceData+0x1dc>)
   1935a:	681b      	ldr	r3, [r3, #0]
   1935c:	4a53      	ldr	r2, [pc, #332]	; (194ac <prvTraceInitTraceData+0x220>)
   1935e:	210a      	movs	r1, #10
   19360:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   19362:	4b41      	ldr	r3, [pc, #260]	; (19468 <prvTraceInitTraceData+0x1dc>)
   19364:	681b      	ldr	r3, [r3, #0]
   19366:	4a52      	ldr	r2, [pc, #328]	; (194b0 <prvTraceInitTraceData+0x224>)
   19368:	210b      	movs	r1, #11
   1936a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   1936c:	4b3e      	ldr	r3, [pc, #248]	; (19468 <prvTraceInitTraceData+0x1dc>)
   1936e:	681b      	ldr	r3, [r3, #0]
   19370:	4a50      	ldr	r2, [pc, #320]	; (194b4 <prvTraceInitTraceData+0x228>)
   19372:	210c      	movs	r1, #12
   19374:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   19376:	4b3c      	ldr	r3, [pc, #240]	; (19468 <prvTraceInitTraceData+0x1dc>)
   19378:	681b      	ldr	r3, [r3, #0]
   1937a:	4a4f      	ldr	r2, [pc, #316]	; (194b8 <prvTraceInitTraceData+0x22c>)
   1937c:	210d      	movs	r1, #13
   1937e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   19380:	4b39      	ldr	r3, [pc, #228]	; (19468 <prvTraceInitTraceData+0x1dc>)
   19382:	681b      	ldr	r3, [r3, #0]
   19384:	4a4d      	ldr	r2, [pc, #308]	; (194bc <prvTraceInitTraceData+0x230>)
   19386:	2171      	movs	r1, #113	; 0x71
   19388:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   1938a:	4b37      	ldr	r3, [pc, #220]	; (19468 <prvTraceInitTraceData+0x1dc>)
   1938c:	681b      	ldr	r3, [r3, #0]
   1938e:	4a4c      	ldr	r2, [pc, #304]	; (194c0 <prvTraceInitTraceData+0x234>)
   19390:	2172      	movs	r1, #114	; 0x72
   19392:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   19394:	4b34      	ldr	r3, [pc, #208]	; (19468 <prvTraceInitTraceData+0x1dc>)
   19396:	681b      	ldr	r3, [r3, #0]
   19398:	4a4a      	ldr	r2, [pc, #296]	; (194c4 <prvTraceInitTraceData+0x238>)
   1939a:	2173      	movs	r1, #115	; 0x73
   1939c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   1939e:	4b32      	ldr	r3, [pc, #200]	; (19468 <prvTraceInitTraceData+0x1dc>)
   193a0:	681b      	ldr	r3, [r3, #0]
   193a2:	4a49      	ldr	r2, [pc, #292]	; (194c8 <prvTraceInitTraceData+0x23c>)
   193a4:	2174      	movs	r1, #116	; 0x74
   193a6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   193a8:	4b2f      	ldr	r3, [pc, #188]	; (19468 <prvTraceInitTraceData+0x1dc>)
   193aa:	681b      	ldr	r3, [r3, #0]
   193ac:	4a47      	ldr	r2, [pc, #284]	; (194cc <prvTraceInitTraceData+0x240>)
   193ae:	21f1      	movs	r1, #241	; 0xf1
   193b0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   193b2:	4b2d      	ldr	r3, [pc, #180]	; (19468 <prvTraceInitTraceData+0x1dc>)
   193b4:	681b      	ldr	r3, [r3, #0]
   193b6:	4a46      	ldr	r2, [pc, #280]	; (194d0 <prvTraceInitTraceData+0x244>)
   193b8:	21f2      	movs	r1, #242	; 0xf2
   193ba:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   193bc:	4b2a      	ldr	r3, [pc, #168]	; (19468 <prvTraceInitTraceData+0x1dc>)
   193be:	681b      	ldr	r3, [r3, #0]
   193c0:	4a44      	ldr	r2, [pc, #272]	; (194d4 <prvTraceInitTraceData+0x248>)
   193c2:	21f3      	movs	r1, #243	; 0xf3
   193c4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   193c6:	4b28      	ldr	r3, [pc, #160]	; (19468 <prvTraceInitTraceData+0x1dc>)
   193c8:	681b      	ldr	r3, [r3, #0]
   193ca:	4a43      	ldr	r2, [pc, #268]	; (194d8 <prvTraceInitTraceData+0x24c>)
   193cc:	21f4      	movs	r1, #244	; 0xf4
   193ce:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   193d0:	4b42      	ldr	r3, [pc, #264]	; (194dc <prvTraceInitTraceData+0x250>)
   193d2:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   193d4:	4b24      	ldr	r3, [pc, #144]	; (19468 <prvTraceInitTraceData+0x1dc>)
   193d6:	681b      	ldr	r3, [r3, #0]
   193d8:	22f4      	movs	r2, #244	; 0xf4
   193da:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   193dc:	4b22      	ldr	r3, [pc, #136]	; (19468 <prvTraceInitTraceData+0x1dc>)
   193de:	681b      	ldr	r3, [r3, #0]
   193e0:	22f3      	movs	r2, #243	; 0xf3
   193e2:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   193e4:	4b20      	ldr	r3, [pc, #128]	; (19468 <prvTraceInitTraceData+0x1dc>)
   193e6:	681b      	ldr	r3, [r3, #0]
   193e8:	22f2      	movs	r2, #242	; 0xf2
   193ea:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   193ec:	4b1e      	ldr	r3, [pc, #120]	; (19468 <prvTraceInitTraceData+0x1dc>)
   193ee:	681b      	ldr	r3, [r3, #0]
   193f0:	22f1      	movs	r2, #241	; 0xf1
   193f2:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   193f4:	4b1c      	ldr	r3, [pc, #112]	; (19468 <prvTraceInitTraceData+0x1dc>)
   193f6:	681b      	ldr	r3, [r3, #0]
   193f8:	2274      	movs	r2, #116	; 0x74
   193fa:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   193fc:	4b1a      	ldr	r3, [pc, #104]	; (19468 <prvTraceInitTraceData+0x1dc>)
   193fe:	681b      	ldr	r3, [r3, #0]
   19400:	2273      	movs	r2, #115	; 0x73
   19402:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   19404:	4b18      	ldr	r3, [pc, #96]	; (19468 <prvTraceInitTraceData+0x1dc>)
   19406:	681b      	ldr	r3, [r3, #0]
   19408:	2272      	movs	r2, #114	; 0x72
   1940a:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   1940c:	4b16      	ldr	r3, [pc, #88]	; (19468 <prvTraceInitTraceData+0x1dc>)
   1940e:	681b      	ldr	r3, [r3, #0]
   19410:	2271      	movs	r2, #113	; 0x71
   19412:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   19414:	4b14      	ldr	r3, [pc, #80]	; (19468 <prvTraceInitTraceData+0x1dc>)
   19416:	681b      	ldr	r3, [r3, #0]
   19418:	2204      	movs	r2, #4
   1941a:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   1941c:	4b12      	ldr	r3, [pc, #72]	; (19468 <prvTraceInitTraceData+0x1dc>)
   1941e:	681b      	ldr	r3, [r3, #0]
   19420:	2203      	movs	r2, #3
   19422:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   19424:	4b10      	ldr	r3, [pc, #64]	; (19468 <prvTraceInitTraceData+0x1dc>)
   19426:	681b      	ldr	r3, [r3, #0]
   19428:	2202      	movs	r2, #2
   1942a:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   1942c:	4b0e      	ldr	r3, [pc, #56]	; (19468 <prvTraceInitTraceData+0x1dc>)
   1942e:	681b      	ldr	r3, [r3, #0]
   19430:	2201      	movs	r2, #1
   19432:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   19434:	4b2a      	ldr	r3, [pc, #168]	; (194e0 <prvTraceInitTraceData+0x254>)
   19436:	681b      	ldr	r3, [r3, #0]
   19438:	2b00      	cmp	r3, #0
   1943a:	d012      	beq.n	19462 <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1943c:	4b0a      	ldr	r3, [pc, #40]	; (19468 <prvTraceInitTraceData+0x1dc>)
   1943e:	681b      	ldr	r3, [r3, #0]
   19440:	4a15      	ldr	r2, [pc, #84]	; (19498 <prvTraceInitTraceData+0x20c>)
   19442:	1898      	adds	r0, r3, r2
   19444:	4b26      	ldr	r3, [pc, #152]	; (194e0 <prvTraceInitTraceData+0x254>)
   19446:	681b      	ldr	r3, [r3, #0]
   19448:	2250      	movs	r2, #80	; 0x50
   1944a:	0019      	movs	r1, r3
   1944c:	4b14      	ldr	r3, [pc, #80]	; (194a0 <prvTraceInitTraceData+0x214>)
   1944e:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   19450:	4b05      	ldr	r3, [pc, #20]	; (19468 <prvTraceInitTraceData+0x1dc>)
   19452:	681b      	ldr	r3, [r3, #0]
   19454:	4a23      	ldr	r2, [pc, #140]	; (194e4 <prvTraceInitTraceData+0x258>)
   19456:	2101      	movs	r1, #1
   19458:	5099      	str	r1, [r3, r2]
		vTraceStop();
   1945a:	4b23      	ldr	r3, [pc, #140]	; (194e8 <prvTraceInitTraceData+0x25c>)
   1945c:	4798      	blx	r3
   1945e:	e000      	b.n	19462 <prvTraceInitTraceData+0x1d6>
			return;
   19460:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   19462:	46bd      	mov	sp, r7
   19464:	bd80      	pop	{r7, pc}
   19466:	46c0      	nop			; (mov r8, r8)
   19468:	20000df0 	.word	0x20000df0
   1946c:	200049f8 	.word	0x200049f8
   19470:	e000e018 	.word	0xe000e018
   19474:	200055c8 	.word	0x200055c8
   19478:	00034883 	.word	0x00034883
   1947c:	00001aa1 	.word	0x00001aa1
   19480:	f0f0f0f0 	.word	0xf0f0f0f0
   19484:	000183f1 	.word	0x000183f1
   19488:	0000055c 	.word	0x0000055c
   1948c:	f1f1f1f1 	.word	0xf1f1f1f1
   19490:	00000564 	.word	0x00000564
   19494:	f2f2f2f2 	.word	0xf2f2f2f2
   19498:	000006bc 	.word	0x000006bc
   1949c:	00037d8c 	.word	0x00037d8c
   194a0:	00019801 	.word	0x00019801
   194a4:	0000070c 	.word	0x0000070c
   194a8:	f3f3f3f3 	.word	0xf3f3f3f3
   194ac:	00000bc4 	.word	0x00000bc4
   194b0:	00000bc5 	.word	0x00000bc5
   194b4:	00000bc6 	.word	0x00000bc6
   194b8:	00000bc7 	.word	0x00000bc7
   194bc:	00000bc8 	.word	0x00000bc8
   194c0:	00000bc9 	.word	0x00000bc9
   194c4:	00000bca 	.word	0x00000bca
   194c8:	00000bcb 	.word	0x00000bcb
   194cc:	00000bcc 	.word	0x00000bcc
   194d0:	00000bcd 	.word	0x00000bcd
   194d4:	00000bce 	.word	0x00000bce
   194d8:	00000bcf 	.word	0x00000bcf
   194dc:	00018591 	.word	0x00018591
   194e0:	20000d50 	.word	0x20000d50
   194e4:	000006b4 	.word	0x000006b4
   194e8:	000187f9 	.word	0x000187f9

000194ec <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   194ec:	b580      	push	{r7, lr}
   194ee:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   194f0:	4b10      	ldr	r3, [pc, #64]	; (19534 <prvTraceNextFreeEventBufferSlot+0x48>)
   194f2:	681b      	ldr	r3, [r3, #0]
   194f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   194f6:	2b00      	cmp	r3, #0
   194f8:	d101      	bne.n	194fe <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   194fa:	2300      	movs	r3, #0
   194fc:	e017      	b.n	1952e <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   194fe:	4b0d      	ldr	r3, [pc, #52]	; (19534 <prvTraceNextFreeEventBufferSlot+0x48>)
   19500:	681b      	ldr	r3, [r3, #0]
   19502:	69da      	ldr	r2, [r3, #28]
   19504:	232c      	movs	r3, #44	; 0x2c
   19506:	33ff      	adds	r3, #255	; 0xff
   19508:	429a      	cmp	r2, r3
   1950a:	d905      	bls.n	19518 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   1950c:	4b0a      	ldr	r3, [pc, #40]	; (19538 <prvTraceNextFreeEventBufferSlot+0x4c>)
   1950e:	0018      	movs	r0, r3
   19510:	4b0a      	ldr	r3, [pc, #40]	; (1953c <prvTraceNextFreeEventBufferSlot+0x50>)
   19512:	4798      	blx	r3
		return NULL;
   19514:	2300      	movs	r3, #0
   19516:	e00a      	b.n	1952e <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   19518:	4b06      	ldr	r3, [pc, #24]	; (19534 <prvTraceNextFreeEventBufferSlot+0x48>)
   1951a:	681a      	ldr	r2, [r3, #0]
   1951c:	4b05      	ldr	r3, [pc, #20]	; (19534 <prvTraceNextFreeEventBufferSlot+0x48>)
   1951e:	681b      	ldr	r3, [r3, #0]
   19520:	69db      	ldr	r3, [r3, #28]
   19522:	009b      	lsls	r3, r3, #2
   19524:	21e2      	movs	r1, #226	; 0xe2
   19526:	00c9      	lsls	r1, r1, #3
   19528:	468c      	mov	ip, r1
   1952a:	4463      	add	r3, ip
   1952c:	18d3      	adds	r3, r2, r3
}
   1952e:	0018      	movs	r0, r3
   19530:	46bd      	mov	sp, r7
   19532:	bd80      	pop	{r7, pc}
   19534:	20000df0 	.word	0x20000df0
   19538:	00037da0 	.word	0x00037da0
   1953c:	00019935 	.word	0x00019935

00019540 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   19540:	b580      	push	{r7, lr}
   19542:	b082      	sub	sp, #8
   19544:	af00      	add	r7, sp, #0
   19546:	0002      	movs	r2, r0
   19548:	1dfb      	adds	r3, r7, #7
   1954a:	701a      	strb	r2, [r3, #0]
   1954c:	1dbb      	adds	r3, r7, #6
   1954e:	1c0a      	adds	r2, r1, #0
   19550:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   19552:	1dbb      	adds	r3, r7, #6
   19554:	781b      	ldrb	r3, [r3, #0]
   19556:	2b08      	cmp	r3, #8
   19558:	d905      	bls.n	19566 <uiIndexOfObject+0x26>
   1955a:	4b2a      	ldr	r3, [pc, #168]	; (19604 <uiIndexOfObject+0xc4>)
   1955c:	0018      	movs	r0, r3
   1955e:	4b2a      	ldr	r3, [pc, #168]	; (19608 <uiIndexOfObject+0xc8>)
   19560:	4798      	blx	r3
   19562:	2300      	movs	r3, #0
   19564:	e049      	b.n	195fa <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   19566:	1dfb      	adds	r3, r7, #7
   19568:	781b      	ldrb	r3, [r3, #0]
   1956a:	2b00      	cmp	r3, #0
   1956c:	d00b      	beq.n	19586 <uiIndexOfObject+0x46>
   1956e:	4b27      	ldr	r3, [pc, #156]	; (1960c <uiIndexOfObject+0xcc>)
   19570:	681a      	ldr	r2, [r3, #0]
   19572:	1dbb      	adds	r3, r7, #6
   19574:	781b      	ldrb	r3, [r3, #0]
   19576:	2164      	movs	r1, #100	; 0x64
   19578:	18d3      	adds	r3, r2, r3
   1957a:	185b      	adds	r3, r3, r1
   1957c:	781b      	ldrb	r3, [r3, #0]
   1957e:	1dfa      	adds	r2, r7, #7
   19580:	7812      	ldrb	r2, [r2, #0]
   19582:	429a      	cmp	r2, r3
   19584:	d905      	bls.n	19592 <uiIndexOfObject+0x52>
   19586:	4b22      	ldr	r3, [pc, #136]	; (19610 <uiIndexOfObject+0xd0>)
   19588:	0018      	movs	r0, r3
   1958a:	4b1f      	ldr	r3, [pc, #124]	; (19608 <uiIndexOfObject+0xc8>)
   1958c:	4798      	blx	r3
   1958e:	2300      	movs	r3, #0
   19590:	e033      	b.n	195fa <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   19592:	1dbb      	adds	r3, r7, #6
   19594:	781b      	ldrb	r3, [r3, #0]
   19596:	2b08      	cmp	r3, #8
   19598:	d82a      	bhi.n	195f0 <uiIndexOfObject+0xb0>
   1959a:	1dfb      	adds	r3, r7, #7
   1959c:	781b      	ldrb	r3, [r3, #0]
   1959e:	2b00      	cmp	r3, #0
   195a0:	d026      	beq.n	195f0 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   195a2:	4b1a      	ldr	r3, [pc, #104]	; (1960c <uiIndexOfObject+0xcc>)
   195a4:	681a      	ldr	r2, [r3, #0]
   195a6:	1dbb      	adds	r3, r7, #6
   195a8:	781b      	ldrb	r3, [r3, #0]
   195aa:	2164      	movs	r1, #100	; 0x64
   195ac:	18d3      	adds	r3, r2, r3
   195ae:	185b      	adds	r3, r3, r1
   195b0:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   195b2:	1dfa      	adds	r2, r7, #7
   195b4:	7812      	ldrb	r2, [r2, #0]
   195b6:	429a      	cmp	r2, r3
   195b8:	d81a      	bhi.n	195f0 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   195ba:	4b14      	ldr	r3, [pc, #80]	; (1960c <uiIndexOfObject+0xcc>)
   195bc:	681a      	ldr	r2, [r3, #0]
   195be:	1dbb      	adds	r3, r7, #6
   195c0:	781b      	ldrb	r3, [r3, #0]
   195c2:	3340      	adds	r3, #64	; 0x40
   195c4:	005b      	lsls	r3, r3, #1
   195c6:	18d3      	adds	r3, r2, r3
   195c8:	3308      	adds	r3, #8
   195ca:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   195cc:	4b0f      	ldr	r3, [pc, #60]	; (1960c <uiIndexOfObject+0xcc>)
   195ce:	6819      	ldr	r1, [r3, #0]
   195d0:	1dbb      	adds	r3, r7, #6
   195d2:	781b      	ldrb	r3, [r3, #0]
   195d4:	207c      	movs	r0, #124	; 0x7c
   195d6:	18cb      	adds	r3, r1, r3
   195d8:	181b      	adds	r3, r3, r0
   195da:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   195dc:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   195de:	1df9      	adds	r1, r7, #7
   195e0:	7809      	ldrb	r1, [r1, #0]
   195e2:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   195e4:	b289      	uxth	r1, r1
   195e6:	434b      	muls	r3, r1
   195e8:	b29b      	uxth	r3, r3
   195ea:	18d3      	adds	r3, r2, r3
   195ec:	b29b      	uxth	r3, r3
   195ee:	e004      	b.n	195fa <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   195f0:	4b08      	ldr	r3, [pc, #32]	; (19614 <uiIndexOfObject+0xd4>)
   195f2:	0018      	movs	r0, r3
   195f4:	4b04      	ldr	r3, [pc, #16]	; (19608 <uiIndexOfObject+0xc8>)
   195f6:	4798      	blx	r3
	return 0;
   195f8:	2300      	movs	r3, #0
}
   195fa:	0018      	movs	r0, r3
   195fc:	46bd      	mov	sp, r7
   195fe:	b002      	add	sp, #8
   19600:	bd80      	pop	{r7, pc}
   19602:	46c0      	nop			; (mov r8, r8)
   19604:	00037dc8 	.word	0x00037dc8
   19608:	00019935 	.word	0x00019935
   1960c:	20000df0 	.word	0x20000df0
   19610:	00037e08 	.word	0x00037e08
   19614:	00037e48 	.word	0x00037e48

00019618 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   19618:	b580      	push	{r7, lr}
   1961a:	b088      	sub	sp, #32
   1961c:	af00      	add	r7, sp, #0
   1961e:	0002      	movs	r2, r0
   19620:	1dfb      	adds	r3, r7, #7
   19622:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   19624:	4b5a      	ldr	r3, [pc, #360]	; (19790 <prvTraceGetObjectHandle+0x178>)
   19626:	681b      	ldr	r3, [r3, #0]
   19628:	2b00      	cmp	r3, #0
   1962a:	d105      	bne.n	19638 <prvTraceGetObjectHandle+0x20>
   1962c:	4b59      	ldr	r3, [pc, #356]	; (19794 <prvTraceGetObjectHandle+0x17c>)
   1962e:	0018      	movs	r0, r3
   19630:	4b59      	ldr	r3, [pc, #356]	; (19798 <prvTraceGetObjectHandle+0x180>)
   19632:	4798      	blx	r3
   19634:	2300      	movs	r3, #0
   19636:	e0a7      	b.n	19788 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   19638:	1dfb      	adds	r3, r7, #7
   1963a:	781b      	ldrb	r3, [r3, #0]
   1963c:	2b08      	cmp	r3, #8
   1963e:	d905      	bls.n	1964c <prvTraceGetObjectHandle+0x34>
   19640:	4b56      	ldr	r3, [pc, #344]	; (1979c <prvTraceGetObjectHandle+0x184>)
   19642:	0018      	movs	r0, r3
   19644:	4b54      	ldr	r3, [pc, #336]	; (19798 <prvTraceGetObjectHandle+0x180>)
   19646:	4798      	blx	r3
   19648:	2300      	movs	r3, #0
   1964a:	e09d      	b.n	19788 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1964c:	f3ef 8310 	mrs	r3, PRIMASK
   19650:	60fb      	str	r3, [r7, #12]
  return(result);
   19652:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   19654:	61bb      	str	r3, [r7, #24]
   19656:	2301      	movs	r3, #1
   19658:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1965a:	693b      	ldr	r3, [r7, #16]
   1965c:	f383 8810 	msr	PRIMASK, r3
   19660:	4b4f      	ldr	r3, [pc, #316]	; (197a0 <prvTraceGetObjectHandle+0x188>)
   19662:	681b      	ldr	r3, [r3, #0]
   19664:	1c5a      	adds	r2, r3, #1
   19666:	4b4e      	ldr	r3, [pc, #312]	; (197a0 <prvTraceGetObjectHandle+0x188>)
   19668:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   1966a:	1dfb      	adds	r3, r7, #7
   1966c:	781a      	ldrb	r2, [r3, #0]
   1966e:	4b4d      	ldr	r3, [pc, #308]	; (197a4 <prvTraceGetObjectHandle+0x18c>)
   19670:	0052      	lsls	r2, r2, #1
   19672:	5ad3      	ldrh	r3, [r2, r3]
   19674:	001a      	movs	r2, r3
   19676:	4b4c      	ldr	r3, [pc, #304]	; (197a8 <prvTraceGetObjectHandle+0x190>)
   19678:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   1967a:	4b4b      	ldr	r3, [pc, #300]	; (197a8 <prvTraceGetObjectHandle+0x190>)
   1967c:	681b      	ldr	r3, [r3, #0]
   1967e:	4a49      	ldr	r2, [pc, #292]	; (197a4 <prvTraceGetObjectHandle+0x18c>)
   19680:	2148      	movs	r1, #72	; 0x48
   19682:	18d3      	adds	r3, r2, r3
   19684:	185b      	adds	r3, r3, r1
   19686:	781b      	ldrb	r3, [r3, #0]
   19688:	2b00      	cmp	r3, #0
   1968a:	d117      	bne.n	196bc <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   1968c:	4b46      	ldr	r3, [pc, #280]	; (197a8 <prvTraceGetObjectHandle+0x190>)
   1968e:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   19690:	4b45      	ldr	r3, [pc, #276]	; (197a8 <prvTraceGetObjectHandle+0x190>)
   19692:	681b      	ldr	r3, [r3, #0]
   19694:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   19696:	1dfb      	adds	r3, r7, #7
   19698:	781b      	ldrb	r3, [r3, #0]
   1969a:	4842      	ldr	r0, [pc, #264]	; (197a4 <prvTraceGetObjectHandle+0x18c>)
   1969c:	3308      	adds	r3, #8
   1969e:	005b      	lsls	r3, r3, #1
   196a0:	18c3      	adds	r3, r0, r3
   196a2:	3302      	adds	r3, #2
   196a4:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   196a6:	b2db      	uxtb	r3, r3
   196a8:	1acb      	subs	r3, r1, r3
   196aa:	b2db      	uxtb	r3, r3
   196ac:	3301      	adds	r3, #1
   196ae:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   196b0:	4b3c      	ldr	r3, [pc, #240]	; (197a4 <prvTraceGetObjectHandle+0x18c>)
   196b2:	2148      	movs	r1, #72	; 0x48
   196b4:	189b      	adds	r3, r3, r2
   196b6:	185b      	adds	r3, r3, r1
   196b8:	1c02      	adds	r2, r0, #0
   196ba:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   196bc:	4b3a      	ldr	r3, [pc, #232]	; (197a8 <prvTraceGetObjectHandle+0x190>)
   196be:	681a      	ldr	r2, [r3, #0]
   196c0:	231f      	movs	r3, #31
   196c2:	18fb      	adds	r3, r7, r3
   196c4:	4937      	ldr	r1, [pc, #220]	; (197a4 <prvTraceGetObjectHandle+0x18c>)
   196c6:	2048      	movs	r0, #72	; 0x48
   196c8:	188a      	adds	r2, r1, r2
   196ca:	1812      	adds	r2, r2, r0
   196cc:	7812      	ldrb	r2, [r2, #0]
   196ce:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   196d0:	1dfb      	adds	r3, r7, #7
   196d2:	781a      	ldrb	r2, [r3, #0]
   196d4:	4b33      	ldr	r3, [pc, #204]	; (197a4 <prvTraceGetObjectHandle+0x18c>)
   196d6:	0052      	lsls	r2, r2, #1
   196d8:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   196da:	1dfb      	adds	r3, r7, #7
   196dc:	781b      	ldrb	r3, [r3, #0]
   196de:	4931      	ldr	r1, [pc, #196]	; (197a4 <prvTraceGetObjectHandle+0x18c>)
   196e0:	3310      	adds	r3, #16
   196e2:	005b      	lsls	r3, r3, #1
   196e4:	18cb      	adds	r3, r1, r3
   196e6:	3304      	adds	r3, #4
   196e8:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   196ea:	429a      	cmp	r2, r3
   196ec:	d90d      	bls.n	1970a <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   196ee:	1dfb      	adds	r3, r7, #7
   196f0:	781b      	ldrb	r3, [r3, #0]
   196f2:	0018      	movs	r0, r3
   196f4:	4b2d      	ldr	r3, [pc, #180]	; (197ac <prvTraceGetObjectHandle+0x194>)
   196f6:	4798      	blx	r3
   196f8:	0003      	movs	r3, r0
   196fa:	0018      	movs	r0, r3
   196fc:	4b26      	ldr	r3, [pc, #152]	; (19798 <prvTraceGetObjectHandle+0x180>)
   196fe:	4798      	blx	r3
		handle = 0;
   19700:	231f      	movs	r3, #31
   19702:	18fb      	adds	r3, r7, r3
   19704:	2200      	movs	r2, #0
   19706:	701a      	strb	r2, [r3, #0]
   19708:	e031      	b.n	1976e <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   1970a:	1dfb      	adds	r3, r7, #7
   1970c:	781b      	ldrb	r3, [r3, #0]
   1970e:	4a25      	ldr	r2, [pc, #148]	; (197a4 <prvTraceGetObjectHandle+0x18c>)
   19710:	0059      	lsls	r1, r3, #1
   19712:	5a8a      	ldrh	r2, [r1, r2]
   19714:	3201      	adds	r2, #1
   19716:	b291      	uxth	r1, r2
   19718:	4a22      	ldr	r2, [pc, #136]	; (197a4 <prvTraceGetObjectHandle+0x18c>)
   1971a:	005b      	lsls	r3, r3, #1
   1971c:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1971e:	1dfb      	adds	r3, r7, #7
   19720:	781a      	ldrb	r2, [r3, #0]
   19722:	4b20      	ldr	r3, [pc, #128]	; (197a4 <prvTraceGetObjectHandle+0x18c>)
   19724:	0052      	lsls	r2, r2, #1
   19726:	5ad3      	ldrh	r3, [r2, r3]
   19728:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   1972a:	1dfb      	adds	r3, r7, #7
   1972c:	781b      	ldrb	r3, [r3, #0]
   1972e:	4a1d      	ldr	r2, [pc, #116]	; (197a4 <prvTraceGetObjectHandle+0x18c>)
   19730:	3308      	adds	r3, #8
   19732:	005b      	lsls	r3, r3, #1
   19734:	18d3      	adds	r3, r2, r3
   19736:	3302      	adds	r3, #2
   19738:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1973a:	1acb      	subs	r3, r1, r3
   1973c:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   1973e:	1dfb      	adds	r3, r7, #7
   19740:	781b      	ldrb	r3, [r3, #0]
   19742:	4a18      	ldr	r2, [pc, #96]	; (197a4 <prvTraceGetObjectHandle+0x18c>)
   19744:	3318      	adds	r3, #24
   19746:	005b      	lsls	r3, r3, #1
   19748:	18d3      	adds	r3, r2, r3
   1974a:	3306      	adds	r3, #6
   1974c:	881b      	ldrh	r3, [r3, #0]
   1974e:	001a      	movs	r2, r3
		if (hndCount >
   19750:	697b      	ldr	r3, [r7, #20]
   19752:	429a      	cmp	r2, r3
   19754:	da0b      	bge.n	1976e <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   19756:	1dfb      	adds	r3, r7, #7
   19758:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   1975a:	697a      	ldr	r2, [r7, #20]
   1975c:	b2d2      	uxtb	r2, r2
   1975e:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   19760:	4a10      	ldr	r2, [pc, #64]	; (197a4 <prvTraceGetObjectHandle+0x18c>)
   19762:	3318      	adds	r3, #24
   19764:	005b      	lsls	r3, r3, #1
   19766:	18d3      	adds	r3, r2, r3
   19768:	3306      	adds	r3, #6
   1976a:	1c0a      	adds	r2, r1, #0
   1976c:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   1976e:	4b0c      	ldr	r3, [pc, #48]	; (197a0 <prvTraceGetObjectHandle+0x188>)
   19770:	681b      	ldr	r3, [r3, #0]
   19772:	1e5a      	subs	r2, r3, #1
   19774:	4b0a      	ldr	r3, [pc, #40]	; (197a0 <prvTraceGetObjectHandle+0x188>)
   19776:	601a      	str	r2, [r3, #0]
   19778:	69bb      	ldr	r3, [r7, #24]
   1977a:	60bb      	str	r3, [r7, #8]
   1977c:	68bb      	ldr	r3, [r7, #8]
   1977e:	f383 8810 	msr	PRIMASK, r3

	return handle;
   19782:	231f      	movs	r3, #31
   19784:	18fb      	adds	r3, r7, r3
   19786:	781b      	ldrb	r3, [r3, #0]
}
   19788:	0018      	movs	r0, r3
   1978a:	46bd      	mov	sp, r7
   1978c:	b008      	add	sp, #32
   1978e:	bd80      	pop	{r7, pc}
   19790:	20000df0 	.word	0x20000df0
   19794:	000372a8 	.word	0x000372a8
   19798:	00019935 	.word	0x00019935
   1979c:	00037e88 	.word	0x00037e88
   197a0:	20000d48 	.word	0x20000d48
   197a4:	20000d60 	.word	0x20000d60
   197a8:	20000df4 	.word	0x20000df4
   197ac:	00018655 	.word	0x00018655

000197b0 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   197b0:	b590      	push	{r4, r7, lr}
   197b2:	b085      	sub	sp, #20
   197b4:	af00      	add	r7, sp, #0
   197b6:	0002      	movs	r2, r0
   197b8:	1dfb      	adds	r3, r7, #7
   197ba:	701a      	strb	r2, [r3, #0]
   197bc:	1dbb      	adds	r3, r7, #6
   197be:	1c0a      	adds	r2, r1, #0
   197c0:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   197c2:	230e      	movs	r3, #14
   197c4:	18fc      	adds	r4, r7, r3
   197c6:	1dfb      	adds	r3, r7, #7
   197c8:	781a      	ldrb	r2, [r3, #0]
   197ca:	1dbb      	adds	r3, r7, #6
   197cc:	781b      	ldrb	r3, [r3, #0]
   197ce:	0011      	movs	r1, r2
   197d0:	0018      	movs	r0, r3
   197d2:	4b09      	ldr	r3, [pc, #36]	; (197f8 <prvMarkObjectAsUsed+0x48>)
   197d4:	4798      	blx	r3
   197d6:	0003      	movs	r3, r0
   197d8:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   197da:	4b08      	ldr	r3, [pc, #32]	; (197fc <prvMarkObjectAsUsed+0x4c>)
   197dc:	681a      	ldr	r2, [r3, #0]
   197de:	230e      	movs	r3, #14
   197e0:	18fb      	adds	r3, r7, r3
   197e2:	881b      	ldrh	r3, [r3, #0]
   197e4:	219c      	movs	r1, #156	; 0x9c
   197e6:	18d3      	adds	r3, r2, r3
   197e8:	185b      	adds	r3, r3, r1
   197ea:	2201      	movs	r2, #1
   197ec:	701a      	strb	r2, [r3, #0]
}
   197ee:	46c0      	nop			; (mov r8, r8)
   197f0:	46bd      	mov	sp, r7
   197f2:	b005      	add	sp, #20
   197f4:	bd90      	pop	{r4, r7, pc}
   197f6:	46c0      	nop			; (mov r8, r8)
   197f8:	00019541 	.word	0x00019541
   197fc:	20000df0 	.word	0x20000df0

00019800 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   19800:	b580      	push	{r7, lr}
   19802:	b086      	sub	sp, #24
   19804:	af00      	add	r7, sp, #0
   19806:	60f8      	str	r0, [r7, #12]
   19808:	60b9      	str	r1, [r7, #8]
   1980a:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   1980c:	2300      	movs	r3, #0
   1980e:	617b      	str	r3, [r7, #20]
   19810:	e010      	b.n	19834 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   19812:	68fa      	ldr	r2, [r7, #12]
   19814:	697b      	ldr	r3, [r7, #20]
   19816:	18d3      	adds	r3, r2, r3
   19818:	68b9      	ldr	r1, [r7, #8]
   1981a:	697a      	ldr	r2, [r7, #20]
   1981c:	188a      	adds	r2, r1, r2
   1981e:	7812      	ldrb	r2, [r2, #0]
   19820:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   19822:	68ba      	ldr	r2, [r7, #8]
   19824:	697b      	ldr	r3, [r7, #20]
   19826:	18d3      	adds	r3, r2, r3
   19828:	781b      	ldrb	r3, [r3, #0]
   1982a:	2b00      	cmp	r3, #0
   1982c:	d007      	beq.n	1983e <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   1982e:	697b      	ldr	r3, [r7, #20]
   19830:	3301      	adds	r3, #1
   19832:	617b      	str	r3, [r7, #20]
   19834:	697a      	ldr	r2, [r7, #20]
   19836:	687b      	ldr	r3, [r7, #4]
   19838:	429a      	cmp	r2, r3
   1983a:	d3ea      	bcc.n	19812 <prvStrncpy+0x12>
			break;
	}
}
   1983c:	e000      	b.n	19840 <prvStrncpy+0x40>
			break;
   1983e:	46c0      	nop			; (mov r8, r8)
}
   19840:	46c0      	nop			; (mov r8, r8)
   19842:	46bd      	mov	sp, r7
   19844:	b006      	add	sp, #24
   19846:	bd80      	pop	{r7, pc}

00019848 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   19848:	b580      	push	{r7, lr}
   1984a:	b082      	sub	sp, #8
   1984c:	af00      	add	r7, sp, #0
   1984e:	603a      	str	r2, [r7, #0]
   19850:	1dfb      	adds	r3, r7, #7
   19852:	1c02      	adds	r2, r0, #0
   19854:	701a      	strb	r2, [r3, #0]
   19856:	1dbb      	adds	r3, r7, #6
   19858:	1c0a      	adds	r2, r1, #0
   1985a:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   1985c:	683b      	ldr	r3, [r7, #0]
   1985e:	2b00      	cmp	r3, #0
   19860:	d104      	bne.n	1986c <prvTraceSetObjectName+0x24>
   19862:	4b2a      	ldr	r3, [pc, #168]	; (1990c <prvTraceSetObjectName+0xc4>)
   19864:	0018      	movs	r0, r3
   19866:	4b2a      	ldr	r3, [pc, #168]	; (19910 <prvTraceSetObjectName+0xc8>)
   19868:	4798      	blx	r3
   1986a:	e04b      	b.n	19904 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   1986c:	1dfb      	adds	r3, r7, #7
   1986e:	781b      	ldrb	r3, [r3, #0]
   19870:	2b08      	cmp	r3, #8
   19872:	d904      	bls.n	1987e <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   19874:	4b27      	ldr	r3, [pc, #156]	; (19914 <prvTraceSetObjectName+0xcc>)
   19876:	0018      	movs	r0, r3
   19878:	4b25      	ldr	r3, [pc, #148]	; (19910 <prvTraceSetObjectName+0xc8>)
   1987a:	4798      	blx	r3
		return;
   1987c:	e042      	b.n	19904 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   1987e:	1dbb      	adds	r3, r7, #6
   19880:	781b      	ldrb	r3, [r3, #0]
   19882:	2b00      	cmp	r3, #0
   19884:	d104      	bne.n	19890 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   19886:	4b24      	ldr	r3, [pc, #144]	; (19918 <prvTraceSetObjectName+0xd0>)
   19888:	0018      	movs	r0, r3
   1988a:	4b21      	ldr	r3, [pc, #132]	; (19910 <prvTraceSetObjectName+0xc8>)
   1988c:	4798      	blx	r3
		return;
   1988e:	e039      	b.n	19904 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   19890:	4b22      	ldr	r3, [pc, #136]	; (1991c <prvTraceSetObjectName+0xd4>)
   19892:	681a      	ldr	r2, [r3, #0]
   19894:	1dfb      	adds	r3, r7, #7
   19896:	781b      	ldrb	r3, [r3, #0]
   19898:	2164      	movs	r1, #100	; 0x64
   1989a:	18d3      	adds	r3, r2, r3
   1989c:	185b      	adds	r3, r3, r1
   1989e:	781b      	ldrb	r3, [r3, #0]
   198a0:	1dba      	adds	r2, r7, #6
   198a2:	7812      	ldrb	r2, [r2, #0]
   198a4:	429a      	cmp	r2, r3
   198a6:	d909      	bls.n	198bc <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   198a8:	1dfb      	adds	r3, r7, #7
   198aa:	781b      	ldrb	r3, [r3, #0]
   198ac:	0018      	movs	r0, r3
   198ae:	4b1c      	ldr	r3, [pc, #112]	; (19920 <prvTraceSetObjectName+0xd8>)
   198b0:	4798      	blx	r3
   198b2:	0003      	movs	r3, r0
   198b4:	0018      	movs	r0, r3
   198b6:	4b16      	ldr	r3, [pc, #88]	; (19910 <prvTraceSetObjectName+0xc8>)
   198b8:	4798      	blx	r3
   198ba:	e023      	b.n	19904 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   198bc:	1dfb      	adds	r3, r7, #7
   198be:	781a      	ldrb	r2, [r3, #0]
   198c0:	1dbb      	adds	r3, r7, #6
   198c2:	781b      	ldrb	r3, [r3, #0]
   198c4:	0011      	movs	r1, r2
   198c6:	0018      	movs	r0, r3
   198c8:	4b16      	ldr	r3, [pc, #88]	; (19924 <prvTraceSetObjectName+0xdc>)
   198ca:	4798      	blx	r3
   198cc:	0003      	movs	r3, r0
   198ce:	001a      	movs	r2, r3
   198d0:	4b15      	ldr	r3, [pc, #84]	; (19928 <prvTraceSetObjectName+0xe0>)
   198d2:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   198d4:	4b15      	ldr	r3, [pc, #84]	; (1992c <prvTraceSetObjectName+0xe4>)
   198d6:	681b      	ldr	r3, [r3, #0]
   198d8:	2b00      	cmp	r3, #0
   198da:	d113      	bne.n	19904 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   198dc:	4b0f      	ldr	r3, [pc, #60]	; (1991c <prvTraceSetObjectName+0xd4>)
   198de:	681a      	ldr	r2, [r3, #0]
   198e0:	4b11      	ldr	r3, [pc, #68]	; (19928 <prvTraceSetObjectName+0xe0>)
   198e2:	881b      	ldrh	r3, [r3, #0]
   198e4:	3398      	adds	r3, #152	; 0x98
   198e6:	18d3      	adds	r3, r2, r3
   198e8:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   198ea:	4b0c      	ldr	r3, [pc, #48]	; (1991c <prvTraceSetObjectName+0xd4>)
   198ec:	681a      	ldr	r2, [r3, #0]
   198ee:	1dfb      	adds	r3, r7, #7
   198f0:	781b      	ldrb	r3, [r3, #0]
   198f2:	2170      	movs	r1, #112	; 0x70
   198f4:	18d3      	adds	r3, r2, r3
   198f6:	185b      	adds	r3, r3, r1
   198f8:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   198fa:	001a      	movs	r2, r3
   198fc:	683b      	ldr	r3, [r7, #0]
   198fe:	0019      	movs	r1, r3
   19900:	4b0b      	ldr	r3, [pc, #44]	; (19930 <prvTraceSetObjectName+0xe8>)
   19902:	4798      	blx	r3
		}
	}
}
   19904:	46bd      	mov	sp, r7
   19906:	b002      	add	sp, #8
   19908:	bd80      	pop	{r7, pc}
   1990a:	46c0      	nop			; (mov r8, r8)
   1990c:	00037f8c 	.word	0x00037f8c
   19910:	00019935 	.word	0x00019935
   19914:	00037fc0 	.word	0x00037fc0
   19918:	00037ff0 	.word	0x00037ff0
   1991c:	20000df0 	.word	0x20000df0
   19920:	00018655 	.word	0x00018655
   19924:	00019541 	.word	0x00019541
   19928:	20000df8 	.word	0x20000df8
   1992c:	20000d50 	.word	0x20000d50
   19930:	00019801 	.word	0x00019801

00019934 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   19934:	b580      	push	{r7, lr}
   19936:	b082      	sub	sp, #8
   19938:	af00      	add	r7, sp, #0
   1993a:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   1993c:	4b11      	ldr	r3, [pc, #68]	; (19984 <prvTraceError+0x50>)
   1993e:	681b      	ldr	r3, [r3, #0]
   19940:	2b00      	cmp	r3, #0
   19942:	d001      	beq.n	19948 <prvTraceError+0x14>
	{
		vTraceStop();
   19944:	4b10      	ldr	r3, [pc, #64]	; (19988 <prvTraceError+0x54>)
   19946:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   19948:	4b10      	ldr	r3, [pc, #64]	; (1998c <prvTraceError+0x58>)
   1994a:	681b      	ldr	r3, [r3, #0]
   1994c:	2b00      	cmp	r3, #0
   1994e:	d115      	bne.n	1997c <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   19950:	4b0e      	ldr	r3, [pc, #56]	; (1998c <prvTraceError+0x58>)
   19952:	687a      	ldr	r2, [r7, #4]
   19954:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   19956:	4b0b      	ldr	r3, [pc, #44]	; (19984 <prvTraceError+0x50>)
   19958:	681b      	ldr	r3, [r3, #0]
   1995a:	2b00      	cmp	r3, #0
   1995c:	d00e      	beq.n	1997c <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1995e:	4b09      	ldr	r3, [pc, #36]	; (19984 <prvTraceError+0x50>)
   19960:	681b      	ldr	r3, [r3, #0]
   19962:	4a0b      	ldr	r2, [pc, #44]	; (19990 <prvTraceError+0x5c>)
   19964:	1898      	adds	r0, r3, r2
   19966:	4b09      	ldr	r3, [pc, #36]	; (1998c <prvTraceError+0x58>)
   19968:	681b      	ldr	r3, [r3, #0]
   1996a:	2250      	movs	r2, #80	; 0x50
   1996c:	0019      	movs	r1, r3
   1996e:	4b09      	ldr	r3, [pc, #36]	; (19994 <prvTraceError+0x60>)
   19970:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   19972:	4b04      	ldr	r3, [pc, #16]	; (19984 <prvTraceError+0x50>)
   19974:	681b      	ldr	r3, [r3, #0]
   19976:	4a08      	ldr	r2, [pc, #32]	; (19998 <prvTraceError+0x64>)
   19978:	2101      	movs	r1, #1
   1997a:	5099      	str	r1, [r3, r2]
		}
	}
}
   1997c:	46c0      	nop			; (mov r8, r8)
   1997e:	46bd      	mov	sp, r7
   19980:	b002      	add	sp, #8
   19982:	bd80      	pop	{r7, pc}
   19984:	20000df0 	.word	0x20000df0
   19988:	000187f9 	.word	0x000187f9
   1998c:	20000d50 	.word	0x20000d50
   19990:	000006bc 	.word	0x000006bc
   19994:	00019801 	.word	0x00019801
   19998:	000006b4 	.word	0x000006b4

0001999c <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   1999c:	b580      	push	{r7, lr}
   1999e:	b086      	sub	sp, #24
   199a0:	af00      	add	r7, sp, #0
   199a2:	0002      	movs	r2, r0
   199a4:	1dfb      	adds	r3, r7, #7
   199a6:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   199a8:	2300      	movs	r3, #0
   199aa:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   199ac:	2300      	movs	r3, #0
   199ae:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   199b0:	1dfb      	adds	r3, r7, #7
   199b2:	781b      	ldrb	r3, [r3, #0]
   199b4:	2b00      	cmp	r3, #0
   199b6:	d000      	beq.n	199ba <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   199b8:	e089      	b.n	19ace <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   199ba:	4b49      	ldr	r3, [pc, #292]	; (19ae0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   199bc:	0018      	movs	r0, r3
   199be:	4b49      	ldr	r3, [pc, #292]	; (19ae4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   199c0:	4798      	blx	r3
   199c2:	e08a      	b.n	19ada <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   199c4:	4b48      	ldr	r3, [pc, #288]	; (19ae8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   199c6:	681b      	ldr	r3, [r3, #0]
   199c8:	69da      	ldr	r2, [r3, #28]
   199ca:	697b      	ldr	r3, [r7, #20]
   199cc:	18d3      	adds	r3, r2, r3
   199ce:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   199d0:	4b45      	ldr	r3, [pc, #276]	; (19ae8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   199d2:	6819      	ldr	r1, [r3, #0]
   199d4:	693b      	ldr	r3, [r7, #16]
   199d6:	009a      	lsls	r2, r3, #2
   199d8:	23e2      	movs	r3, #226	; 0xe2
   199da:	00db      	lsls	r3, r3, #3
   199dc:	188a      	adds	r2, r1, r2
   199de:	18d3      	adds	r3, r2, r3
   199e0:	781b      	ldrb	r3, [r3, #0]
   199e2:	2b98      	cmp	r3, #152	; 0x98
   199e4:	d934      	bls.n	19a50 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   199e6:	4b40      	ldr	r3, [pc, #256]	; (19ae8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   199e8:	6819      	ldr	r1, [r3, #0]
   199ea:	693b      	ldr	r3, [r7, #16]
   199ec:	009a      	lsls	r2, r3, #2
   199ee:	23e2      	movs	r3, #226	; 0xe2
   199f0:	00db      	lsls	r3, r3, #3
   199f2:	188a      	adds	r2, r1, r2
   199f4:	18d3      	adds	r3, r2, r3
   199f6:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   199f8:	2ba7      	cmp	r3, #167	; 0xa7
   199fa:	d829      	bhi.n	19a50 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   199fc:	4b3a      	ldr	r3, [pc, #232]	; (19ae8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   199fe:	6819      	ldr	r1, [r3, #0]
   19a00:	693b      	ldr	r3, [r7, #16]
   19a02:	009a      	lsls	r2, r3, #2
   19a04:	23e2      	movs	r3, #226	; 0xe2
   19a06:	00db      	lsls	r3, r3, #3
   19a08:	188a      	adds	r2, r1, r2
   19a0a:	18d3      	adds	r3, r2, r3
   19a0c:	781a      	ldrb	r2, [r3, #0]
   19a0e:	230f      	movs	r3, #15
   19a10:	18fb      	adds	r3, r7, r3
   19a12:	3268      	adds	r2, #104	; 0x68
   19a14:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   19a16:	230f      	movs	r3, #15
   19a18:	18fb      	adds	r3, r7, r3
   19a1a:	781a      	ldrb	r2, [r3, #0]
   19a1c:	693b      	ldr	r3, [r7, #16]
   19a1e:	18d2      	adds	r2, r2, r3
   19a20:	4b31      	ldr	r3, [pc, #196]	; (19ae8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19a22:	681b      	ldr	r3, [r3, #0]
   19a24:	699b      	ldr	r3, [r3, #24]
   19a26:	429a      	cmp	r2, r3
   19a28:	d24d      	bcs.n	19ac6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   19a2a:	4b2f      	ldr	r3, [pc, #188]	; (19ae8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19a2c:	681a      	ldr	r2, [r3, #0]
   19a2e:	693b      	ldr	r3, [r7, #16]
   19a30:	009b      	lsls	r3, r3, #2
   19a32:	21e2      	movs	r1, #226	; 0xe2
   19a34:	00c9      	lsls	r1, r1, #3
   19a36:	468c      	mov	ip, r1
   19a38:	4463      	add	r3, ip
   19a3a:	18d0      	adds	r0, r2, r3
   19a3c:	230f      	movs	r3, #15
   19a3e:	18fb      	adds	r3, r7, r3
   19a40:	781b      	ldrb	r3, [r3, #0]
   19a42:	3301      	adds	r3, #1
   19a44:	009b      	lsls	r3, r3, #2
   19a46:	001a      	movs	r2, r3
   19a48:	2100      	movs	r1, #0
   19a4a:	4b28      	ldr	r3, [pc, #160]	; (19aec <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   19a4c:	4798      	blx	r3
		{
   19a4e:	e03a      	b.n	19ac6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   19a50:	4b25      	ldr	r3, [pc, #148]	; (19ae8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19a52:	6819      	ldr	r1, [r3, #0]
   19a54:	693b      	ldr	r3, [r7, #16]
   19a56:	009a      	lsls	r2, r3, #2
   19a58:	23e2      	movs	r3, #226	; 0xe2
   19a5a:	00db      	lsls	r3, r3, #3
   19a5c:	188a      	adds	r2, r1, r2
   19a5e:	18d3      	adds	r3, r2, r3
   19a60:	781b      	ldrb	r3, [r3, #0]
   19a62:	2b01      	cmp	r3, #1
   19a64:	d130      	bne.n	19ac8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   19a66:	693b      	ldr	r3, [r7, #16]
   19a68:	1c5a      	adds	r2, r3, #1
   19a6a:	4b1f      	ldr	r3, [pc, #124]	; (19ae8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19a6c:	681b      	ldr	r3, [r3, #0]
   19a6e:	699b      	ldr	r3, [r3, #24]
   19a70:	429a      	cmp	r2, r3
   19a72:	d20e      	bcs.n	19a92 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   19a74:	4b1c      	ldr	r3, [pc, #112]	; (19ae8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19a76:	681a      	ldr	r2, [r3, #0]
   19a78:	693b      	ldr	r3, [r7, #16]
   19a7a:	009b      	lsls	r3, r3, #2
   19a7c:	21e2      	movs	r1, #226	; 0xe2
   19a7e:	00c9      	lsls	r1, r1, #3
   19a80:	468c      	mov	ip, r1
   19a82:	4463      	add	r3, ip
   19a84:	18d3      	adds	r3, r2, r3
   19a86:	2208      	movs	r2, #8
   19a88:	2100      	movs	r1, #0
   19a8a:	0018      	movs	r0, r3
   19a8c:	4b17      	ldr	r3, [pc, #92]	; (19aec <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   19a8e:	4798      	blx	r3
   19a90:	e01a      	b.n	19ac8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   19a92:	4b15      	ldr	r3, [pc, #84]	; (19ae8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19a94:	681b      	ldr	r3, [r3, #0]
   19a96:	22e2      	movs	r2, #226	; 0xe2
   19a98:	00d2      	lsls	r2, r2, #3
   19a9a:	4694      	mov	ip, r2
   19a9c:	4463      	add	r3, ip
   19a9e:	2204      	movs	r2, #4
   19aa0:	2100      	movs	r1, #0
   19aa2:	0018      	movs	r0, r3
   19aa4:	4b11      	ldr	r3, [pc, #68]	; (19aec <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   19aa6:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   19aa8:	4b0f      	ldr	r3, [pc, #60]	; (19ae8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19aaa:	681a      	ldr	r2, [r3, #0]
   19aac:	693b      	ldr	r3, [r7, #16]
   19aae:	009b      	lsls	r3, r3, #2
   19ab0:	21e2      	movs	r1, #226	; 0xe2
   19ab2:	00c9      	lsls	r1, r1, #3
   19ab4:	468c      	mov	ip, r1
   19ab6:	4463      	add	r3, ip
   19ab8:	18d3      	adds	r3, r2, r3
   19aba:	2204      	movs	r2, #4
   19abc:	2100      	movs	r1, #0
   19abe:	0018      	movs	r0, r3
   19ac0:	4b0a      	ldr	r3, [pc, #40]	; (19aec <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   19ac2:	4798      	blx	r3
   19ac4:	e000      	b.n	19ac8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   19ac6:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   19ac8:	697b      	ldr	r3, [r7, #20]
   19aca:	3301      	adds	r3, #1
   19acc:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   19ace:	1dfb      	adds	r3, r7, #7
   19ad0:	781a      	ldrb	r2, [r3, #0]
   19ad2:	697b      	ldr	r3, [r7, #20]
   19ad4:	429a      	cmp	r2, r3
   19ad6:	d900      	bls.n	19ada <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   19ad8:	e774      	b.n	199c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   19ada:	46bd      	mov	sp, r7
   19adc:	b006      	add	sp, #24
   19ade:	bd80      	pop	{r7, pc}
   19ae0:	00038050 	.word	0x00038050
   19ae4:	00019935 	.word	0x00019935
   19ae8:	20000df0 	.word	0x20000df0
   19aec:	00034883 	.word	0x00034883

00019af0 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   19af0:	b580      	push	{r7, lr}
   19af2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   19af4:	4b12      	ldr	r3, [pc, #72]	; (19b40 <prvTraceUpdateCounters+0x50>)
   19af6:	681b      	ldr	r3, [r3, #0]
   19af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19afa:	2b00      	cmp	r3, #0
   19afc:	d01c      	beq.n	19b38 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   19afe:	4b10      	ldr	r3, [pc, #64]	; (19b40 <prvTraceUpdateCounters+0x50>)
   19b00:	681b      	ldr	r3, [r3, #0]
   19b02:	695a      	ldr	r2, [r3, #20]
   19b04:	3201      	adds	r2, #1
   19b06:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   19b08:	4b0d      	ldr	r3, [pc, #52]	; (19b40 <prvTraceUpdateCounters+0x50>)
   19b0a:	681b      	ldr	r3, [r3, #0]
   19b0c:	69da      	ldr	r2, [r3, #28]
   19b0e:	3201      	adds	r2, #1
   19b10:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   19b12:	4b0b      	ldr	r3, [pc, #44]	; (19b40 <prvTraceUpdateCounters+0x50>)
   19b14:	681b      	ldr	r3, [r3, #0]
   19b16:	69da      	ldr	r2, [r3, #28]
   19b18:	232c      	movs	r3, #44	; 0x2c
   19b1a:	33ff      	adds	r3, #255	; 0xff
   19b1c:	429a      	cmp	r2, r3
   19b1e:	d907      	bls.n	19b30 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   19b20:	4b07      	ldr	r3, [pc, #28]	; (19b40 <prvTraceUpdateCounters+0x50>)
   19b22:	681b      	ldr	r3, [r3, #0]
   19b24:	2201      	movs	r2, #1
   19b26:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   19b28:	4b05      	ldr	r3, [pc, #20]	; (19b40 <prvTraceUpdateCounters+0x50>)
   19b2a:	681b      	ldr	r3, [r3, #0]
   19b2c:	2200      	movs	r2, #0
   19b2e:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   19b30:	2001      	movs	r0, #1
   19b32:	4b04      	ldr	r3, [pc, #16]	; (19b44 <prvTraceUpdateCounters+0x54>)
   19b34:	4798      	blx	r3
   19b36:	e000      	b.n	19b3a <prvTraceUpdateCounters+0x4a>
		return;
   19b38:	46c0      	nop			; (mov r8, r8)
#endif
}
   19b3a:	46bd      	mov	sp, r7
   19b3c:	bd80      	pop	{r7, pc}
   19b3e:	46c0      	nop			; (mov r8, r8)
   19b40:	20000df0 	.word	0x20000df0
   19b44:	0001999d 	.word	0x0001999d

00019b48 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   19b48:	b5b0      	push	{r4, r5, r7, lr}
   19b4a:	b086      	sub	sp, #24
   19b4c:	af00      	add	r7, sp, #0
   19b4e:	0002      	movs	r2, r0
   19b50:	1dbb      	adds	r3, r7, #6
   19b52:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   19b54:	2300      	movs	r3, #0
   19b56:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   19b58:	2300      	movs	r3, #0
   19b5a:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   19b5c:	2300      	movs	r3, #0
   19b5e:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   19b60:	1dbb      	adds	r3, r7, #6
   19b62:	881b      	ldrh	r3, [r3, #0]
   19b64:	2bff      	cmp	r3, #255	; 0xff
   19b66:	d00a      	beq.n	19b7e <prvTraceGetDTS+0x36>
   19b68:	1dbb      	adds	r3, r7, #6
   19b6a:	881b      	ldrh	r3, [r3, #0]
   19b6c:	4a60      	ldr	r2, [pc, #384]	; (19cf0 <prvTraceGetDTS+0x1a8>)
   19b6e:	4293      	cmp	r3, r2
   19b70:	d005      	beq.n	19b7e <prvTraceGetDTS+0x36>
   19b72:	4b60      	ldr	r3, [pc, #384]	; (19cf4 <prvTraceGetDTS+0x1ac>)
   19b74:	0018      	movs	r0, r3
   19b76:	4b60      	ldr	r3, [pc, #384]	; (19cf8 <prvTraceGetDTS+0x1b0>)
   19b78:	4798      	blx	r3
   19b7a:	2300      	movs	r3, #0
   19b7c:	e0b3      	b.n	19ce6 <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   19b7e:	4b5f      	ldr	r3, [pc, #380]	; (19cfc <prvTraceGetDTS+0x1b4>)
   19b80:	681b      	ldr	r3, [r3, #0]
   19b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19b84:	2b00      	cmp	r3, #0
   19b86:	d118      	bne.n	19bba <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   19b88:	4b5d      	ldr	r3, [pc, #372]	; (19d00 <prvTraceGetDTS+0x1b8>)
   19b8a:	681b      	ldr	r3, [r3, #0]
   19b8c:	2b00      	cmp	r3, #0
   19b8e:	d006      	beq.n	19b9e <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   19b90:	4b5a      	ldr	r3, [pc, #360]	; (19cfc <prvTraceGetDTS+0x1b4>)
   19b92:	681b      	ldr	r3, [r3, #0]
   19b94:	4a5a      	ldr	r2, [pc, #360]	; (19d00 <prvTraceGetDTS+0x1b8>)
   19b96:	6812      	ldr	r2, [r2, #0]
   19b98:	0892      	lsrs	r2, r2, #2
   19b9a:	625a      	str	r2, [r3, #36]	; 0x24
   19b9c:	e00d      	b.n	19bba <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   19b9e:	4b59      	ldr	r3, [pc, #356]	; (19d04 <prvTraceGetDTS+0x1bc>)
   19ba0:	681a      	ldr	r2, [r3, #0]
   19ba2:	4b59      	ldr	r3, [pc, #356]	; (19d08 <prvTraceGetDTS+0x1c0>)
   19ba4:	681b      	ldr	r3, [r3, #0]
   19ba6:	429a      	cmp	r2, r3
   19ba8:	d007      	beq.n	19bba <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   19baa:	4b54      	ldr	r3, [pc, #336]	; (19cfc <prvTraceGetDTS+0x1b4>)
   19bac:	681c      	ldr	r4, [r3, #0]
   19bae:	2000      	movs	r0, #0
   19bb0:	4b56      	ldr	r3, [pc, #344]	; (19d0c <prvTraceGetDTS+0x1c4>)
   19bb2:	4798      	blx	r3
   19bb4:	0003      	movs	r3, r0
   19bb6:	089b      	lsrs	r3, r3, #2
   19bb8:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   19bba:	230c      	movs	r3, #12
   19bbc:	18fb      	adds	r3, r7, r3
   19bbe:	0018      	movs	r0, r3
   19bc0:	4b53      	ldr	r3, [pc, #332]	; (19d10 <prvTraceGetDTS+0x1c8>)
   19bc2:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   19bc4:	68fa      	ldr	r2, [r7, #12]
   19bc6:	4b53      	ldr	r3, [pc, #332]	; (19d14 <prvTraceGetDTS+0x1cc>)
   19bc8:	681b      	ldr	r3, [r3, #0]
   19bca:	1ad3      	subs	r3, r2, r3
   19bcc:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   19bce:	68fa      	ldr	r2, [r7, #12]
   19bd0:	4b50      	ldr	r3, [pc, #320]	; (19d14 <prvTraceGetDTS+0x1cc>)
   19bd2:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   19bd4:	4b49      	ldr	r3, [pc, #292]	; (19cfc <prvTraceGetDTS+0x1b4>)
   19bd6:	681b      	ldr	r3, [r3, #0]
   19bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19bda:	2b00      	cmp	r3, #0
   19bdc:	d044      	beq.n	19c68 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   19bde:	4b47      	ldr	r3, [pc, #284]	; (19cfc <prvTraceGetDTS+0x1b4>)
   19be0:	681b      	ldr	r3, [r3, #0]
   19be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19be4:	693b      	ldr	r3, [r7, #16]
   19be6:	429a      	cmp	r2, r3
   19be8:	d21e      	bcs.n	19c28 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   19bea:	4b44      	ldr	r3, [pc, #272]	; (19cfc <prvTraceGetDTS+0x1b4>)
   19bec:	681c      	ldr	r4, [r3, #0]
   19bee:	4b43      	ldr	r3, [pc, #268]	; (19cfc <prvTraceGetDTS+0x1b4>)
   19bf0:	681b      	ldr	r3, [r3, #0]
   19bf2:	6add      	ldr	r5, [r3, #44]	; 0x2c
   19bf4:	4b41      	ldr	r3, [pc, #260]	; (19cfc <prvTraceGetDTS+0x1b4>)
   19bf6:	681b      	ldr	r3, [r3, #0]
   19bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19bfa:	4b47      	ldr	r3, [pc, #284]	; (19d18 <prvTraceGetDTS+0x1d0>)
   19bfc:	0011      	movs	r1, r2
   19bfe:	6938      	ldr	r0, [r7, #16]
   19c00:	4798      	blx	r3
   19c02:	0003      	movs	r3, r0
   19c04:	18eb      	adds	r3, r5, r3
   19c06:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   19c08:	4b3c      	ldr	r3, [pc, #240]	; (19cfc <prvTraceGetDTS+0x1b4>)
   19c0a:	681c      	ldr	r4, [r3, #0]
   19c0c:	4b3b      	ldr	r3, [pc, #236]	; (19cfc <prvTraceGetDTS+0x1b4>)
   19c0e:	681b      	ldr	r3, [r3, #0]
   19c10:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   19c12:	4b3a      	ldr	r3, [pc, #232]	; (19cfc <prvTraceGetDTS+0x1b4>)
   19c14:	681b      	ldr	r3, [r3, #0]
   19c16:	6a59      	ldr	r1, [r3, #36]	; 0x24
   19c18:	693a      	ldr	r2, [r7, #16]
   19c1a:	4b40      	ldr	r3, [pc, #256]	; (19d1c <prvTraceGetDTS+0x1d4>)
   19c1c:	0010      	movs	r0, r2
   19c1e:	4798      	blx	r3
   19c20:	000b      	movs	r3, r1
   19c22:	18eb      	adds	r3, r5, r3
   19c24:	62a3      	str	r3, [r4, #40]	; 0x28
   19c26:	e007      	b.n	19c38 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   19c28:	4b34      	ldr	r3, [pc, #208]	; (19cfc <prvTraceGetDTS+0x1b4>)
   19c2a:	681b      	ldr	r3, [r3, #0]
   19c2c:	4a33      	ldr	r2, [pc, #204]	; (19cfc <prvTraceGetDTS+0x1b4>)
   19c2e:	6812      	ldr	r2, [r2, #0]
   19c30:	6a91      	ldr	r1, [r2, #40]	; 0x28
   19c32:	693a      	ldr	r2, [r7, #16]
   19c34:	188a      	adds	r2, r1, r2
   19c36:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   19c38:	4b30      	ldr	r3, [pc, #192]	; (19cfc <prvTraceGetDTS+0x1b4>)
   19c3a:	681b      	ldr	r3, [r3, #0]
   19c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   19c3e:	4b2f      	ldr	r3, [pc, #188]	; (19cfc <prvTraceGetDTS+0x1b4>)
   19c40:	681b      	ldr	r3, [r3, #0]
   19c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19c44:	429a      	cmp	r2, r3
   19c46:	d313      	bcc.n	19c70 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   19c48:	4b2c      	ldr	r3, [pc, #176]	; (19cfc <prvTraceGetDTS+0x1b4>)
   19c4a:	681b      	ldr	r3, [r3, #0]
   19c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19c4e:	3201      	adds	r2, #1
   19c50:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   19c52:	4b2a      	ldr	r3, [pc, #168]	; (19cfc <prvTraceGetDTS+0x1b4>)
   19c54:	681b      	ldr	r3, [r3, #0]
   19c56:	4a29      	ldr	r2, [pc, #164]	; (19cfc <prvTraceGetDTS+0x1b4>)
   19c58:	6812      	ldr	r2, [r2, #0]
   19c5a:	6a91      	ldr	r1, [r2, #40]	; 0x28
   19c5c:	4a27      	ldr	r2, [pc, #156]	; (19cfc <prvTraceGetDTS+0x1b4>)
   19c5e:	6812      	ldr	r2, [r2, #0]
   19c60:	6a52      	ldr	r2, [r2, #36]	; 0x24
   19c62:	1a8a      	subs	r2, r1, r2
   19c64:	629a      	str	r2, [r3, #40]	; 0x28
   19c66:	e003      	b.n	19c70 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   19c68:	4b24      	ldr	r3, [pc, #144]	; (19cfc <prvTraceGetDTS+0x1b4>)
   19c6a:	681b      	ldr	r3, [r3, #0]
   19c6c:	68fa      	ldr	r2, [r7, #12]
   19c6e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   19c70:	1dbb      	adds	r3, r7, #6
   19c72:	881a      	ldrh	r2, [r3, #0]
   19c74:	693b      	ldr	r3, [r7, #16]
   19c76:	429a      	cmp	r2, r3
   19c78:	d22f      	bcs.n	19cda <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   19c7a:	4b29      	ldr	r3, [pc, #164]	; (19d20 <prvTraceGetDTS+0x1d8>)
   19c7c:	4798      	blx	r3
   19c7e:	0003      	movs	r3, r0
   19c80:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   19c82:	697b      	ldr	r3, [r7, #20]
   19c84:	2b00      	cmp	r3, #0
   19c86:	d028      	beq.n	19cda <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   19c88:	1dbb      	adds	r3, r7, #6
   19c8a:	881b      	ldrh	r3, [r3, #0]
   19c8c:	4a18      	ldr	r2, [pc, #96]	; (19cf0 <prvTraceGetDTS+0x1a8>)
   19c8e:	4293      	cmp	r3, r2
   19c90:	d10b      	bne.n	19caa <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   19c92:	697b      	ldr	r3, [r7, #20]
   19c94:	22a9      	movs	r2, #169	; 0xa9
   19c96:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   19c98:	693b      	ldr	r3, [r7, #16]
   19c9a:	0c1b      	lsrs	r3, r3, #16
   19c9c:	b29a      	uxth	r2, r3
   19c9e:	697b      	ldr	r3, [r7, #20]
   19ca0:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   19ca2:	697b      	ldr	r3, [r7, #20]
   19ca4:	2200      	movs	r2, #0
   19ca6:	705a      	strb	r2, [r3, #1]
   19ca8:	e015      	b.n	19cd6 <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   19caa:	1dbb      	adds	r3, r7, #6
   19cac:	881b      	ldrh	r3, [r3, #0]
   19cae:	2bff      	cmp	r3, #255	; 0xff
   19cb0:	d10d      	bne.n	19cce <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   19cb2:	697b      	ldr	r3, [r7, #20]
   19cb4:	22a8      	movs	r2, #168	; 0xa8
   19cb6:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   19cb8:	693b      	ldr	r3, [r7, #16]
   19cba:	0a1b      	lsrs	r3, r3, #8
   19cbc:	b29a      	uxth	r2, r3
   19cbe:	697b      	ldr	r3, [r7, #20]
   19cc0:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   19cc2:	693b      	ldr	r3, [r7, #16]
   19cc4:	0e1b      	lsrs	r3, r3, #24
   19cc6:	b2da      	uxtb	r2, r3
   19cc8:	697b      	ldr	r3, [r7, #20]
   19cca:	705a      	strb	r2, [r3, #1]
   19ccc:	e003      	b.n	19cd6 <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   19cce:	4b15      	ldr	r3, [pc, #84]	; (19d24 <prvTraceGetDTS+0x1dc>)
   19cd0:	0018      	movs	r0, r3
   19cd2:	4b09      	ldr	r3, [pc, #36]	; (19cf8 <prvTraceGetDTS+0x1b0>)
   19cd4:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   19cd6:	4b14      	ldr	r3, [pc, #80]	; (19d28 <prvTraceGetDTS+0x1e0>)
   19cd8:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   19cda:	693b      	ldr	r3, [r7, #16]
   19cdc:	b29b      	uxth	r3, r3
   19cde:	1dba      	adds	r2, r7, #6
   19ce0:	8812      	ldrh	r2, [r2, #0]
   19ce2:	4013      	ands	r3, r2
   19ce4:	b29b      	uxth	r3, r3
}
   19ce6:	0018      	movs	r0, r3
   19ce8:	46bd      	mov	sp, r7
   19cea:	b006      	add	sp, #24
   19cec:	bdb0      	pop	{r4, r5, r7, pc}
   19cee:	46c0      	nop			; (mov r8, r8)
   19cf0:	0000ffff 	.word	0x0000ffff
   19cf4:	000380a8 	.word	0x000380a8
   19cf8:	00019935 	.word	0x00019935
   19cfc:	20000df0 	.word	0x20000df0
   19d00:	20000d4c 	.word	0x20000d4c
   19d04:	e000e018 	.word	0xe000e018
   19d08:	200055c8 	.word	0x200055c8
   19d0c:	00029c09 	.word	0x00029c09
   19d10:	00019d2d 	.word	0x00019d2d
   19d14:	20000dfc 	.word	0x20000dfc
   19d18:	00032805 	.word	0x00032805
   19d1c:	00032911 	.word	0x00032911
   19d20:	000194ed 	.word	0x000194ed
   19d24:	000380e8 	.word	0x000380e8
   19d28:	00019af1 	.word	0x00019af1

00019d2c <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   19d2c:	b580      	push	{r7, lr}
   19d2e:	b084      	sub	sp, #16
   19d30:	af00      	add	r7, sp, #0
   19d32:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   19d34:	2300      	movs	r3, #0
   19d36:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   19d38:	2300      	movs	r3, #0
   19d3a:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   19d3c:	4b2d      	ldr	r3, [pc, #180]	; (19df4 <prvTracePortGetTimeStamp+0xc8>)
   19d3e:	681b      	ldr	r3, [r3, #0]
   19d40:	2b01      	cmp	r3, #1
   19d42:	d107      	bne.n	19d54 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   19d44:	687b      	ldr	r3, [r7, #4]
   19d46:	2b00      	cmp	r3, #0
   19d48:	d04f      	beq.n	19dea <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   19d4a:	4b2b      	ldr	r3, [pc, #172]	; (19df8 <prvTracePortGetTimeStamp+0xcc>)
   19d4c:	681a      	ldr	r2, [r3, #0]
   19d4e:	687b      	ldr	r3, [r7, #4]
   19d50:	601a      	str	r2, [r3, #0]
		return;
   19d52:	e04a      	b.n	19dea <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   19d54:	4b29      	ldr	r3, [pc, #164]	; (19dfc <prvTracePortGetTimeStamp+0xd0>)
   19d56:	681a      	ldr	r2, [r3, #0]
   19d58:	4b29      	ldr	r3, [pc, #164]	; (19e00 <prvTracePortGetTimeStamp+0xd4>)
   19d5a:	681b      	ldr	r3, [r3, #0]
   19d5c:	1ad3      	subs	r3, r2, r3
   19d5e:	3301      	adds	r3, #1
   19d60:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   19d62:	4b28      	ldr	r3, [pc, #160]	; (19e04 <prvTracePortGetTimeStamp+0xd8>)
   19d64:	681a      	ldr	r2, [r3, #0]
   19d66:	4b28      	ldr	r3, [pc, #160]	; (19e08 <prvTracePortGetTimeStamp+0xdc>)
   19d68:	681b      	ldr	r3, [r3, #0]
   19d6a:	1ad3      	subs	r3, r2, r3
   19d6c:	3b01      	subs	r3, #1
   19d6e:	2b00      	cmp	r3, #0
   19d70:	db03      	blt.n	19d7a <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   19d72:	4b24      	ldr	r3, [pc, #144]	; (19e04 <prvTracePortGetTimeStamp+0xd8>)
   19d74:	681b      	ldr	r3, [r3, #0]
   19d76:	60fb      	str	r3, [r7, #12]
   19d78:	e002      	b.n	19d80 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   19d7a:	4b23      	ldr	r3, [pc, #140]	; (19e08 <prvTracePortGetTimeStamp+0xdc>)
   19d7c:	681b      	ldr	r3, [r3, #0]
   19d7e:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   19d80:	4b20      	ldr	r3, [pc, #128]	; (19e04 <prvTracePortGetTimeStamp+0xd8>)
   19d82:	681b      	ldr	r3, [r3, #0]
   19d84:	68fa      	ldr	r2, [r7, #12]
   19d86:	429a      	cmp	r2, r3
   19d88:	d107      	bne.n	19d9a <prvTracePortGetTimeStamp+0x6e>
   19d8a:	4b20      	ldr	r3, [pc, #128]	; (19e0c <prvTracePortGetTimeStamp+0xe0>)
   19d8c:	681b      	ldr	r3, [r3, #0]
   19d8e:	68ba      	ldr	r2, [r7, #8]
   19d90:	429a      	cmp	r2, r3
   19d92:	d202      	bcs.n	19d9a <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   19d94:	68fb      	ldr	r3, [r7, #12]
   19d96:	3301      	adds	r3, #1
   19d98:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   19d9a:	687b      	ldr	r3, [r7, #4]
   19d9c:	2b00      	cmp	r3, #0
   19d9e:	d016      	beq.n	19dce <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   19da0:	4b16      	ldr	r3, [pc, #88]	; (19dfc <prvTracePortGetTimeStamp+0xd0>)
   19da2:	681b      	ldr	r3, [r3, #0]
   19da4:	3301      	adds	r3, #1
   19da6:	089b      	lsrs	r3, r3, #2
   19da8:	68fa      	ldr	r2, [r7, #12]
   19daa:	435a      	muls	r2, r3
   19dac:	4b12      	ldr	r3, [pc, #72]	; (19df8 <prvTracePortGetTimeStamp+0xcc>)
   19dae:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   19db0:	4b12      	ldr	r3, [pc, #72]	; (19dfc <prvTracePortGetTimeStamp+0xd0>)
   19db2:	681b      	ldr	r3, [r3, #0]
   19db4:	3301      	adds	r3, #1
   19db6:	2203      	movs	r2, #3
   19db8:	4013      	ands	r3, r2
   19dba:	68fa      	ldr	r2, [r7, #12]
   19dbc:	435a      	muls	r2, r3
   19dbe:	68bb      	ldr	r3, [r7, #8]
   19dc0:	18d3      	adds	r3, r2, r3
   19dc2:	089a      	lsrs	r2, r3, #2
   19dc4:	4b0c      	ldr	r3, [pc, #48]	; (19df8 <prvTracePortGetTimeStamp+0xcc>)
   19dc6:	681b      	ldr	r3, [r3, #0]
   19dc8:	18d2      	adds	r2, r2, r3
   19dca:	4b0b      	ldr	r3, [pc, #44]	; (19df8 <prvTracePortGetTimeStamp+0xcc>)
   19dcc:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   19dce:	4b0d      	ldr	r3, [pc, #52]	; (19e04 <prvTracePortGetTimeStamp+0xd8>)
   19dd0:	68fa      	ldr	r2, [r7, #12]
   19dd2:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   19dd4:	687b      	ldr	r3, [r7, #4]
   19dd6:	2b00      	cmp	r3, #0
   19dd8:	d003      	beq.n	19de2 <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   19dda:	4b07      	ldr	r3, [pc, #28]	; (19df8 <prvTracePortGetTimeStamp+0xcc>)
   19ddc:	681a      	ldr	r2, [r3, #0]
   19dde:	687b      	ldr	r3, [r7, #4]
   19de0:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   19de2:	4b0a      	ldr	r3, [pc, #40]	; (19e0c <prvTracePortGetTimeStamp+0xe0>)
   19de4:	68ba      	ldr	r2, [r7, #8]
   19de6:	601a      	str	r2, [r3, #0]
   19de8:	e000      	b.n	19dec <prvTracePortGetTimeStamp+0xc0>
		return;
   19dea:	46c0      	nop			; (mov r8, r8)
}
   19dec:	46bd      	mov	sp, r7
   19dee:	b004      	add	sp, #16
   19df0:	bd80      	pop	{r7, pc}
   19df2:	46c0      	nop			; (mov r8, r8)
   19df4:	20000d3c 	.word	0x20000d3c
   19df8:	20000d40 	.word	0x20000d40
   19dfc:	e000e014 	.word	0xe000e014
   19e00:	e000e018 	.word	0xe000e018
   19e04:	20000e00 	.word	0x20000e00
   19e08:	20000d38 	.word	0x20000d38
   19e0c:	20000e04 	.word	0x20000e04

00019e10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   19e10:	b580      	push	{r7, lr}
   19e12:	b082      	sub	sp, #8
   19e14:	af00      	add	r7, sp, #0
   19e16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19e18:	687b      	ldr	r3, [r7, #4]
   19e1a:	3308      	adds	r3, #8
   19e1c:	001a      	movs	r2, r3
   19e1e:	687b      	ldr	r3, [r7, #4]
   19e20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   19e22:	687b      	ldr	r3, [r7, #4]
   19e24:	2201      	movs	r2, #1
   19e26:	4252      	negs	r2, r2
   19e28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19e2a:	687b      	ldr	r3, [r7, #4]
   19e2c:	3308      	adds	r3, #8
   19e2e:	001a      	movs	r2, r3
   19e30:	687b      	ldr	r3, [r7, #4]
   19e32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19e34:	687b      	ldr	r3, [r7, #4]
   19e36:	3308      	adds	r3, #8
   19e38:	001a      	movs	r2, r3
   19e3a:	687b      	ldr	r3, [r7, #4]
   19e3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   19e3e:	687b      	ldr	r3, [r7, #4]
   19e40:	2200      	movs	r2, #0
   19e42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   19e44:	46c0      	nop			; (mov r8, r8)
   19e46:	46bd      	mov	sp, r7
   19e48:	b002      	add	sp, #8
   19e4a:	bd80      	pop	{r7, pc}

00019e4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   19e4c:	b580      	push	{r7, lr}
   19e4e:	b082      	sub	sp, #8
   19e50:	af00      	add	r7, sp, #0
   19e52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   19e54:	687b      	ldr	r3, [r7, #4]
   19e56:	2200      	movs	r2, #0
   19e58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   19e5a:	46c0      	nop			; (mov r8, r8)
   19e5c:	46bd      	mov	sp, r7
   19e5e:	b002      	add	sp, #8
   19e60:	bd80      	pop	{r7, pc}

00019e62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   19e62:	b580      	push	{r7, lr}
   19e64:	b084      	sub	sp, #16
   19e66:	af00      	add	r7, sp, #0
   19e68:	6078      	str	r0, [r7, #4]
   19e6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   19e6c:	687b      	ldr	r3, [r7, #4]
   19e6e:	685b      	ldr	r3, [r3, #4]
   19e70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   19e72:	683b      	ldr	r3, [r7, #0]
   19e74:	68fa      	ldr	r2, [r7, #12]
   19e76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   19e78:	68fb      	ldr	r3, [r7, #12]
   19e7a:	689a      	ldr	r2, [r3, #8]
   19e7c:	683b      	ldr	r3, [r7, #0]
   19e7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   19e80:	68fb      	ldr	r3, [r7, #12]
   19e82:	689b      	ldr	r3, [r3, #8]
   19e84:	683a      	ldr	r2, [r7, #0]
   19e86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   19e88:	68fb      	ldr	r3, [r7, #12]
   19e8a:	683a      	ldr	r2, [r7, #0]
   19e8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   19e8e:	683b      	ldr	r3, [r7, #0]
   19e90:	687a      	ldr	r2, [r7, #4]
   19e92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   19e94:	687b      	ldr	r3, [r7, #4]
   19e96:	681b      	ldr	r3, [r3, #0]
   19e98:	1c5a      	adds	r2, r3, #1
   19e9a:	687b      	ldr	r3, [r7, #4]
   19e9c:	601a      	str	r2, [r3, #0]
}
   19e9e:	46c0      	nop			; (mov r8, r8)
   19ea0:	46bd      	mov	sp, r7
   19ea2:	b004      	add	sp, #16
   19ea4:	bd80      	pop	{r7, pc}

00019ea6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   19ea6:	b580      	push	{r7, lr}
   19ea8:	b084      	sub	sp, #16
   19eaa:	af00      	add	r7, sp, #0
   19eac:	6078      	str	r0, [r7, #4]
   19eae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   19eb0:	683b      	ldr	r3, [r7, #0]
   19eb2:	681b      	ldr	r3, [r3, #0]
   19eb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   19eb6:	68bb      	ldr	r3, [r7, #8]
   19eb8:	3301      	adds	r3, #1
   19eba:	d103      	bne.n	19ec4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   19ebc:	687b      	ldr	r3, [r7, #4]
   19ebe:	691b      	ldr	r3, [r3, #16]
   19ec0:	60fb      	str	r3, [r7, #12]
   19ec2:	e00c      	b.n	19ede <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19ec4:	687b      	ldr	r3, [r7, #4]
   19ec6:	3308      	adds	r3, #8
   19ec8:	60fb      	str	r3, [r7, #12]
   19eca:	e002      	b.n	19ed2 <vListInsert+0x2c>
   19ecc:	68fb      	ldr	r3, [r7, #12]
   19ece:	685b      	ldr	r3, [r3, #4]
   19ed0:	60fb      	str	r3, [r7, #12]
   19ed2:	68fb      	ldr	r3, [r7, #12]
   19ed4:	685b      	ldr	r3, [r3, #4]
   19ed6:	681a      	ldr	r2, [r3, #0]
   19ed8:	68bb      	ldr	r3, [r7, #8]
   19eda:	429a      	cmp	r2, r3
   19edc:	d9f6      	bls.n	19ecc <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   19ede:	68fb      	ldr	r3, [r7, #12]
   19ee0:	685a      	ldr	r2, [r3, #4]
   19ee2:	683b      	ldr	r3, [r7, #0]
   19ee4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   19ee6:	683b      	ldr	r3, [r7, #0]
   19ee8:	685b      	ldr	r3, [r3, #4]
   19eea:	683a      	ldr	r2, [r7, #0]
   19eec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   19eee:	683b      	ldr	r3, [r7, #0]
   19ef0:	68fa      	ldr	r2, [r7, #12]
   19ef2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   19ef4:	68fb      	ldr	r3, [r7, #12]
   19ef6:	683a      	ldr	r2, [r7, #0]
   19ef8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   19efa:	683b      	ldr	r3, [r7, #0]
   19efc:	687a      	ldr	r2, [r7, #4]
   19efe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   19f00:	687b      	ldr	r3, [r7, #4]
   19f02:	681b      	ldr	r3, [r3, #0]
   19f04:	1c5a      	adds	r2, r3, #1
   19f06:	687b      	ldr	r3, [r7, #4]
   19f08:	601a      	str	r2, [r3, #0]
}
   19f0a:	46c0      	nop			; (mov r8, r8)
   19f0c:	46bd      	mov	sp, r7
   19f0e:	b004      	add	sp, #16
   19f10:	bd80      	pop	{r7, pc}

00019f12 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   19f12:	b580      	push	{r7, lr}
   19f14:	b084      	sub	sp, #16
   19f16:	af00      	add	r7, sp, #0
   19f18:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   19f1a:	687b      	ldr	r3, [r7, #4]
   19f1c:	691b      	ldr	r3, [r3, #16]
   19f1e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   19f20:	687b      	ldr	r3, [r7, #4]
   19f22:	685b      	ldr	r3, [r3, #4]
   19f24:	687a      	ldr	r2, [r7, #4]
   19f26:	6892      	ldr	r2, [r2, #8]
   19f28:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   19f2a:	687b      	ldr	r3, [r7, #4]
   19f2c:	689b      	ldr	r3, [r3, #8]
   19f2e:	687a      	ldr	r2, [r7, #4]
   19f30:	6852      	ldr	r2, [r2, #4]
   19f32:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   19f34:	68fb      	ldr	r3, [r7, #12]
   19f36:	685a      	ldr	r2, [r3, #4]
   19f38:	687b      	ldr	r3, [r7, #4]
   19f3a:	429a      	cmp	r2, r3
   19f3c:	d103      	bne.n	19f46 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   19f3e:	687b      	ldr	r3, [r7, #4]
   19f40:	689a      	ldr	r2, [r3, #8]
   19f42:	68fb      	ldr	r3, [r7, #12]
   19f44:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   19f46:	687b      	ldr	r3, [r7, #4]
   19f48:	2200      	movs	r2, #0
   19f4a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   19f4c:	68fb      	ldr	r3, [r7, #12]
   19f4e:	681b      	ldr	r3, [r3, #0]
   19f50:	1e5a      	subs	r2, r3, #1
   19f52:	68fb      	ldr	r3, [r7, #12]
   19f54:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   19f56:	68fb      	ldr	r3, [r7, #12]
   19f58:	681b      	ldr	r3, [r3, #0]
}
   19f5a:	0018      	movs	r0, r3
   19f5c:	46bd      	mov	sp, r7
   19f5e:	b004      	add	sp, #16
   19f60:	bd80      	pop	{r7, pc}
	...

00019f64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   19f64:	b580      	push	{r7, lr}
   19f66:	b084      	sub	sp, #16
   19f68:	af00      	add	r7, sp, #0
   19f6a:	60f8      	str	r0, [r7, #12]
   19f6c:	60b9      	str	r1, [r7, #8]
   19f6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   19f70:	68fb      	ldr	r3, [r7, #12]
   19f72:	3b04      	subs	r3, #4
   19f74:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   19f76:	68fb      	ldr	r3, [r7, #12]
   19f78:	2280      	movs	r2, #128	; 0x80
   19f7a:	0452      	lsls	r2, r2, #17
   19f7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   19f7e:	68fb      	ldr	r3, [r7, #12]
   19f80:	3b04      	subs	r3, #4
   19f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   19f84:	68ba      	ldr	r2, [r7, #8]
   19f86:	68fb      	ldr	r3, [r7, #12]
   19f88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   19f8a:	68fb      	ldr	r3, [r7, #12]
   19f8c:	3b04      	subs	r3, #4
   19f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   19f90:	4a08      	ldr	r2, [pc, #32]	; (19fb4 <pxPortInitialiseStack+0x50>)
   19f92:	68fb      	ldr	r3, [r7, #12]
   19f94:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   19f96:	68fb      	ldr	r3, [r7, #12]
   19f98:	3b14      	subs	r3, #20
   19f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   19f9c:	687a      	ldr	r2, [r7, #4]
   19f9e:	68fb      	ldr	r3, [r7, #12]
   19fa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   19fa2:	68fb      	ldr	r3, [r7, #12]
   19fa4:	3b20      	subs	r3, #32
   19fa6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   19fa8:	68fb      	ldr	r3, [r7, #12]
}
   19faa:	0018      	movs	r0, r3
   19fac:	46bd      	mov	sp, r7
   19fae:	b004      	add	sp, #16
   19fb0:	bd80      	pop	{r7, pc}
   19fb2:	46c0      	nop			; (mov r8, r8)
   19fb4:	00019fb9 	.word	0x00019fb9

00019fb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   19fb8:	b580      	push	{r7, lr}
   19fba:	b082      	sub	sp, #8
   19fbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   19fbe:	2300      	movs	r3, #0
   19fc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   19fc2:	4b07      	ldr	r3, [pc, #28]	; (19fe0 <prvTaskExitError+0x28>)
   19fc4:	681b      	ldr	r3, [r3, #0]
   19fc6:	3301      	adds	r3, #1
   19fc8:	d001      	beq.n	19fce <prvTaskExitError+0x16>
   19fca:	b672      	cpsid	i
   19fcc:	e7fe      	b.n	19fcc <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   19fce:	b672      	cpsid	i
	while( ulDummy == 0 )
   19fd0:	46c0      	nop			; (mov r8, r8)
   19fd2:	687b      	ldr	r3, [r7, #4]
   19fd4:	2b00      	cmp	r3, #0
   19fd6:	d0fc      	beq.n	19fd2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   19fd8:	46c0      	nop			; (mov r8, r8)
   19fda:	46bd      	mov	sp, r7
   19fdc:	b002      	add	sp, #8
   19fde:	bd80      	pop	{r7, pc}
   19fe0:	20000114 	.word	0x20000114

00019fe4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   19fe4:	b580      	push	{r7, lr}
   19fe6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   19fe8:	46c0      	nop			; (mov r8, r8)
   19fea:	46bd      	mov	sp, r7
   19fec:	bd80      	pop	{r7, pc}
	...

00019ff0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   19ff0:	4a0b      	ldr	r2, [pc, #44]	; (1a020 <pxCurrentTCBConst2>)
   19ff2:	6813      	ldr	r3, [r2, #0]
   19ff4:	6818      	ldr	r0, [r3, #0]
   19ff6:	3020      	adds	r0, #32
   19ff8:	f380 8809 	msr	PSP, r0
   19ffc:	2002      	movs	r0, #2
   19ffe:	f380 8814 	msr	CONTROL, r0
   1a002:	f3bf 8f6f 	isb	sy
   1a006:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1a008:	46ae      	mov	lr, r5
   1a00a:	bc08      	pop	{r3}
   1a00c:	bc04      	pop	{r2}
   1a00e:	b662      	cpsie	i
   1a010:	4718      	bx	r3
   1a012:	46c0      	nop			; (mov r8, r8)
   1a014:	46c0      	nop			; (mov r8, r8)
   1a016:	46c0      	nop			; (mov r8, r8)
   1a018:	46c0      	nop			; (mov r8, r8)
   1a01a:	46c0      	nop			; (mov r8, r8)
   1a01c:	46c0      	nop			; (mov r8, r8)
   1a01e:	46c0      	nop			; (mov r8, r8)

0001a020 <pxCurrentTCBConst2>:
   1a020:	200040d8 	.word	0x200040d8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1a024:	46c0      	nop			; (mov r8, r8)
   1a026:	46c0      	nop			; (mov r8, r8)

0001a028 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1a028:	b580      	push	{r7, lr}
   1a02a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1a02c:	4b0e      	ldr	r3, [pc, #56]	; (1a068 <xPortStartScheduler+0x40>)
   1a02e:	4a0e      	ldr	r2, [pc, #56]	; (1a068 <xPortStartScheduler+0x40>)
   1a030:	6812      	ldr	r2, [r2, #0]
   1a032:	21ff      	movs	r1, #255	; 0xff
   1a034:	0409      	lsls	r1, r1, #16
   1a036:	430a      	orrs	r2, r1
   1a038:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1a03a:	4b0b      	ldr	r3, [pc, #44]	; (1a068 <xPortStartScheduler+0x40>)
   1a03c:	4a0a      	ldr	r2, [pc, #40]	; (1a068 <xPortStartScheduler+0x40>)
   1a03e:	6812      	ldr	r2, [r2, #0]
   1a040:	21ff      	movs	r1, #255	; 0xff
   1a042:	0609      	lsls	r1, r1, #24
   1a044:	430a      	orrs	r2, r1
   1a046:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1a048:	4b08      	ldr	r3, [pc, #32]	; (1a06c <xPortStartScheduler+0x44>)
   1a04a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1a04c:	4b08      	ldr	r3, [pc, #32]	; (1a070 <xPortStartScheduler+0x48>)
   1a04e:	2200      	movs	r2, #0
   1a050:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1a052:	4b08      	ldr	r3, [pc, #32]	; (1a074 <xPortStartScheduler+0x4c>)
   1a054:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1a056:	4b08      	ldr	r3, [pc, #32]	; (1a078 <xPortStartScheduler+0x50>)
   1a058:	4798      	blx	r3
	prvTaskExitError();
   1a05a:	4b08      	ldr	r3, [pc, #32]	; (1a07c <xPortStartScheduler+0x54>)
   1a05c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1a05e:	2300      	movs	r3, #0
}
   1a060:	0018      	movs	r0, r3
   1a062:	46bd      	mov	sp, r7
   1a064:	bd80      	pop	{r7, pc}
   1a066:	46c0      	nop			; (mov r8, r8)
   1a068:	e000ed20 	.word	0xe000ed20
   1a06c:	0001a189 	.word	0x0001a189
   1a070:	20000114 	.word	0x20000114
   1a074:	00019ff1 	.word	0x00019ff1
   1a078:	0001c6e5 	.word	0x0001c6e5
   1a07c:	00019fb9 	.word	0x00019fb9

0001a080 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1a080:	b580      	push	{r7, lr}
   1a082:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1a084:	4b03      	ldr	r3, [pc, #12]	; (1a094 <vPortYield+0x14>)
   1a086:	2280      	movs	r2, #128	; 0x80
   1a088:	0552      	lsls	r2, r2, #21
   1a08a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1a08c:	46c0      	nop			; (mov r8, r8)
   1a08e:	46bd      	mov	sp, r7
   1a090:	bd80      	pop	{r7, pc}
   1a092:	46c0      	nop			; (mov r8, r8)
   1a094:	e000ed04 	.word	0xe000ed04

0001a098 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1a098:	b580      	push	{r7, lr}
   1a09a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1a09c:	b672      	cpsid	i
    uxCriticalNesting++;
   1a09e:	4b06      	ldr	r3, [pc, #24]	; (1a0b8 <vPortEnterCritical+0x20>)
   1a0a0:	681b      	ldr	r3, [r3, #0]
   1a0a2:	1c5a      	adds	r2, r3, #1
   1a0a4:	4b04      	ldr	r3, [pc, #16]	; (1a0b8 <vPortEnterCritical+0x20>)
   1a0a6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1a0a8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1a0ac:	f3bf 8f6f 	isb	sy
}
   1a0b0:	46c0      	nop			; (mov r8, r8)
   1a0b2:	46bd      	mov	sp, r7
   1a0b4:	bd80      	pop	{r7, pc}
   1a0b6:	46c0      	nop			; (mov r8, r8)
   1a0b8:	20000114 	.word	0x20000114

0001a0bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1a0bc:	b580      	push	{r7, lr}
   1a0be:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1a0c0:	4b09      	ldr	r3, [pc, #36]	; (1a0e8 <vPortExitCritical+0x2c>)
   1a0c2:	681b      	ldr	r3, [r3, #0]
   1a0c4:	2b00      	cmp	r3, #0
   1a0c6:	d101      	bne.n	1a0cc <vPortExitCritical+0x10>
   1a0c8:	b672      	cpsid	i
   1a0ca:	e7fe      	b.n	1a0ca <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1a0cc:	4b06      	ldr	r3, [pc, #24]	; (1a0e8 <vPortExitCritical+0x2c>)
   1a0ce:	681b      	ldr	r3, [r3, #0]
   1a0d0:	1e5a      	subs	r2, r3, #1
   1a0d2:	4b05      	ldr	r3, [pc, #20]	; (1a0e8 <vPortExitCritical+0x2c>)
   1a0d4:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1a0d6:	4b04      	ldr	r3, [pc, #16]	; (1a0e8 <vPortExitCritical+0x2c>)
   1a0d8:	681b      	ldr	r3, [r3, #0]
   1a0da:	2b00      	cmp	r3, #0
   1a0dc:	d100      	bne.n	1a0e0 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1a0de:	b662      	cpsie	i
    }
}
   1a0e0:	46c0      	nop			; (mov r8, r8)
   1a0e2:	46bd      	mov	sp, r7
   1a0e4:	bd80      	pop	{r7, pc}
   1a0e6:	46c0      	nop			; (mov r8, r8)
   1a0e8:	20000114 	.word	0x20000114

0001a0ec <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1a0ec:	f3ef 8010 	mrs	r0, PRIMASK
   1a0f0:	b672      	cpsid	i
   1a0f2:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1a0f4:	46c0      	nop			; (mov r8, r8)
   1a0f6:	0018      	movs	r0, r3

0001a0f8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1a0f8:	f380 8810 	msr	PRIMASK, r0
   1a0fc:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1a0fe:	46c0      	nop			; (mov r8, r8)

0001a100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1a100:	f3ef 8009 	mrs	r0, PSP
   1a104:	4b0e      	ldr	r3, [pc, #56]	; (1a140 <pxCurrentTCBConst>)
   1a106:	681a      	ldr	r2, [r3, #0]
   1a108:	3820      	subs	r0, #32
   1a10a:	6010      	str	r0, [r2, #0]
   1a10c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1a10e:	4644      	mov	r4, r8
   1a110:	464d      	mov	r5, r9
   1a112:	4656      	mov	r6, sl
   1a114:	465f      	mov	r7, fp
   1a116:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1a118:	b508      	push	{r3, lr}
   1a11a:	b672      	cpsid	i
   1a11c:	f002 fae2 	bl	1c6e4 <vTaskSwitchContext>
   1a120:	b662      	cpsie	i
   1a122:	bc0c      	pop	{r2, r3}
   1a124:	6811      	ldr	r1, [r2, #0]
   1a126:	6808      	ldr	r0, [r1, #0]
   1a128:	3010      	adds	r0, #16
   1a12a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1a12c:	46a0      	mov	r8, r4
   1a12e:	46a9      	mov	r9, r5
   1a130:	46b2      	mov	sl, r6
   1a132:	46bb      	mov	fp, r7
   1a134:	f380 8809 	msr	PSP, r0
   1a138:	3820      	subs	r0, #32
   1a13a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1a13c:	4718      	bx	r3
   1a13e:	46c0      	nop			; (mov r8, r8)

0001a140 <pxCurrentTCBConst>:
   1a140:	200040d8 	.word	0x200040d8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1a144:	46c0      	nop			; (mov r8, r8)
   1a146:	46c0      	nop			; (mov r8, r8)

0001a148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1a148:	b580      	push	{r7, lr}
   1a14a:	b082      	sub	sp, #8
   1a14c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1a14e:	4b0a      	ldr	r3, [pc, #40]	; (1a178 <SysTick_Handler+0x30>)
   1a150:	4798      	blx	r3
   1a152:	0003      	movs	r3, r0
   1a154:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1a156:	4b09      	ldr	r3, [pc, #36]	; (1a17c <SysTick_Handler+0x34>)
   1a158:	4798      	blx	r3
   1a15a:	1e03      	subs	r3, r0, #0
   1a15c:	d003      	beq.n	1a166 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1a15e:	4b08      	ldr	r3, [pc, #32]	; (1a180 <SysTick_Handler+0x38>)
   1a160:	2280      	movs	r2, #128	; 0x80
   1a162:	0552      	lsls	r2, r2, #21
   1a164:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1a166:	687b      	ldr	r3, [r7, #4]
   1a168:	0018      	movs	r0, r3
   1a16a:	4b06      	ldr	r3, [pc, #24]	; (1a184 <SysTick_Handler+0x3c>)
   1a16c:	4798      	blx	r3
}
   1a16e:	46c0      	nop			; (mov r8, r8)
   1a170:	46bd      	mov	sp, r7
   1a172:	b002      	add	sp, #8
   1a174:	bd80      	pop	{r7, pc}
   1a176:	46c0      	nop			; (mov r8, r8)
   1a178:	0001a0ed 	.word	0x0001a0ed
   1a17c:	0001c4f5 	.word	0x0001c4f5
   1a180:	e000ed04 	.word	0xe000ed04
   1a184:	0001a0f9 	.word	0x0001a0f9

0001a188 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1a188:	b5b0      	push	{r4, r5, r7, lr}
   1a18a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1a18c:	4b0b      	ldr	r3, [pc, #44]	; (1a1bc <prvSetupTimerInterrupt+0x34>)
   1a18e:	2200      	movs	r2, #0
   1a190:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1a192:	4b0b      	ldr	r3, [pc, #44]	; (1a1c0 <prvSetupTimerInterrupt+0x38>)
   1a194:	2200      	movs	r2, #0
   1a196:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1a198:	4c0a      	ldr	r4, [pc, #40]	; (1a1c4 <prvSetupTimerInterrupt+0x3c>)
   1a19a:	2000      	movs	r0, #0
   1a19c:	4b0a      	ldr	r3, [pc, #40]	; (1a1c8 <prvSetupTimerInterrupt+0x40>)
   1a19e:	4798      	blx	r3
   1a1a0:	4b0a      	ldr	r3, [pc, #40]	; (1a1cc <prvSetupTimerInterrupt+0x44>)
   1a1a2:	22fa      	movs	r2, #250	; 0xfa
   1a1a4:	0091      	lsls	r1, r2, #2
   1a1a6:	4798      	blx	r3
   1a1a8:	0003      	movs	r3, r0
   1a1aa:	3b01      	subs	r3, #1
   1a1ac:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1a1ae:	4b03      	ldr	r3, [pc, #12]	; (1a1bc <prvSetupTimerInterrupt+0x34>)
   1a1b0:	2207      	movs	r2, #7
   1a1b2:	601a      	str	r2, [r3, #0]
}
   1a1b4:	46c0      	nop			; (mov r8, r8)
   1a1b6:	46bd      	mov	sp, r7
   1a1b8:	bdb0      	pop	{r4, r5, r7, pc}
   1a1ba:	46c0      	nop			; (mov r8, r8)
   1a1bc:	e000e010 	.word	0xe000e010
   1a1c0:	e000e018 	.word	0xe000e018
   1a1c4:	e000e014 	.word	0xe000e014
   1a1c8:	00029c09 	.word	0x00029c09
   1a1cc:	00032805 	.word	0x00032805

0001a1d0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1a1d0:	b580      	push	{r7, lr}
   1a1d2:	b084      	sub	sp, #16
   1a1d4:	af00      	add	r7, sp, #0
   1a1d6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   1a1d8:	2300      	movs	r3, #0
   1a1da:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1a1dc:	687b      	ldr	r3, [r7, #4]
   1a1de:	2207      	movs	r2, #7
   1a1e0:	4013      	ands	r3, r2
   1a1e2:	d004      	beq.n	1a1ee <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1a1e4:	687b      	ldr	r3, [r7, #4]
   1a1e6:	2207      	movs	r2, #7
   1a1e8:	4393      	bics	r3, r2
   1a1ea:	3308      	adds	r3, #8
   1a1ec:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1a1ee:	4b21      	ldr	r3, [pc, #132]	; (1a274 <pvPortMalloc+0xa4>)
   1a1f0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1a1f2:	4b21      	ldr	r3, [pc, #132]	; (1a278 <pvPortMalloc+0xa8>)
   1a1f4:	681b      	ldr	r3, [r3, #0]
   1a1f6:	2b00      	cmp	r3, #0
   1a1f8:	d105      	bne.n	1a206 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1a1fa:	4b20      	ldr	r3, [pc, #128]	; (1a27c <pvPortMalloc+0xac>)
   1a1fc:	2207      	movs	r2, #7
   1a1fe:	4393      	bics	r3, r2
   1a200:	001a      	movs	r2, r3
   1a202:	4b1d      	ldr	r3, [pc, #116]	; (1a278 <pvPortMalloc+0xa8>)
   1a204:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1a206:	4b1e      	ldr	r3, [pc, #120]	; (1a280 <pvPortMalloc+0xb0>)
   1a208:	681a      	ldr	r2, [r3, #0]
   1a20a:	687b      	ldr	r3, [r7, #4]
   1a20c:	18d3      	adds	r3, r2, r3
   1a20e:	4a1d      	ldr	r2, [pc, #116]	; (1a284 <pvPortMalloc+0xb4>)
   1a210:	4293      	cmp	r3, r2
   1a212:	d813      	bhi.n	1a23c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1a214:	4b1a      	ldr	r3, [pc, #104]	; (1a280 <pvPortMalloc+0xb0>)
   1a216:	681a      	ldr	r2, [r3, #0]
   1a218:	687b      	ldr	r3, [r7, #4]
   1a21a:	18d2      	adds	r2, r2, r3
   1a21c:	4b18      	ldr	r3, [pc, #96]	; (1a280 <pvPortMalloc+0xb0>)
   1a21e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1a220:	429a      	cmp	r2, r3
   1a222:	d90b      	bls.n	1a23c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1a224:	4b14      	ldr	r3, [pc, #80]	; (1a278 <pvPortMalloc+0xa8>)
   1a226:	681a      	ldr	r2, [r3, #0]
   1a228:	4b15      	ldr	r3, [pc, #84]	; (1a280 <pvPortMalloc+0xb0>)
   1a22a:	681b      	ldr	r3, [r3, #0]
   1a22c:	18d3      	adds	r3, r2, r3
   1a22e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1a230:	4b13      	ldr	r3, [pc, #76]	; (1a280 <pvPortMalloc+0xb0>)
   1a232:	681a      	ldr	r2, [r3, #0]
   1a234:	687b      	ldr	r3, [r7, #4]
   1a236:	18d2      	adds	r2, r2, r3
   1a238:	4b11      	ldr	r3, [pc, #68]	; (1a280 <pvPortMalloc+0xb0>)
   1a23a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1a23c:	68fb      	ldr	r3, [r7, #12]
   1a23e:	2b00      	cmp	r3, #0
   1a240:	d006      	beq.n	1a250 <pvPortMalloc+0x80>
   1a242:	68fb      	ldr	r3, [r7, #12]
   1a244:	687a      	ldr	r2, [r7, #4]
   1a246:	0019      	movs	r1, r3
   1a248:	2094      	movs	r0, #148	; 0x94
   1a24a:	4b0f      	ldr	r3, [pc, #60]	; (1a288 <pvPortMalloc+0xb8>)
   1a24c:	4798      	blx	r3
   1a24e:	e005      	b.n	1a25c <pvPortMalloc+0x8c>
   1a250:	68fb      	ldr	r3, [r7, #12]
   1a252:	687a      	ldr	r2, [r7, #4]
   1a254:	0019      	movs	r1, r3
   1a256:	20e8      	movs	r0, #232	; 0xe8
   1a258:	4b0b      	ldr	r3, [pc, #44]	; (1a288 <pvPortMalloc+0xb8>)
   1a25a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1a25c:	4b0b      	ldr	r3, [pc, #44]	; (1a28c <pvPortMalloc+0xbc>)
   1a25e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1a260:	68fb      	ldr	r3, [r7, #12]
   1a262:	2b00      	cmp	r3, #0
   1a264:	d101      	bne.n	1a26a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1a266:	4b0a      	ldr	r3, [pc, #40]	; (1a290 <pvPortMalloc+0xc0>)
   1a268:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1a26a:	68fb      	ldr	r3, [r7, #12]
}
   1a26c:	0018      	movs	r0, r3
   1a26e:	46bd      	mov	sp, r7
   1a270:	b004      	add	sp, #16
   1a272:	bd80      	pop	{r7, pc}
   1a274:	0001c351 	.word	0x0001c351
   1a278:	200040d4 	.word	0x200040d4
   1a27c:	20000e10 	.word	0x20000e10
   1a280:	200040d0 	.word	0x200040d0
   1a284:	000032bf 	.word	0x000032bf
   1a288:	00018941 	.word	0x00018941
   1a28c:	0001c369 	.word	0x0001c369
   1a290:	000327d5 	.word	0x000327d5

0001a294 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1a294:	b580      	push	{r7, lr}
   1a296:	b082      	sub	sp, #8
   1a298:	af00      	add	r7, sp, #0
   1a29a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1a29c:	687b      	ldr	r3, [r7, #4]
   1a29e:	2b00      	cmp	r3, #0
   1a2a0:	d001      	beq.n	1a2a6 <vPortFree+0x12>
   1a2a2:	b672      	cpsid	i
   1a2a4:	e7fe      	b.n	1a2a4 <vPortFree+0x10>
}
   1a2a6:	46c0      	nop			; (mov r8, r8)
   1a2a8:	46bd      	mov	sp, r7
   1a2aa:	b002      	add	sp, #8
   1a2ac:	bd80      	pop	{r7, pc}
	...

0001a2b0 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1a2b0:	b580      	push	{r7, lr}
   1a2b2:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1a2b4:	4b03      	ldr	r3, [pc, #12]	; (1a2c4 <xPortGetFreeHeapSize+0x14>)
   1a2b6:	681b      	ldr	r3, [r3, #0]
   1a2b8:	22cb      	movs	r2, #203	; 0xcb
   1a2ba:	0192      	lsls	r2, r2, #6
   1a2bc:	1ad3      	subs	r3, r2, r3
}
   1a2be:	0018      	movs	r0, r3
   1a2c0:	46bd      	mov	sp, r7
   1a2c2:	bd80      	pop	{r7, pc}
   1a2c4:	200040d0 	.word	0x200040d0

0001a2c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1a2c8:	b580      	push	{r7, lr}
   1a2ca:	b084      	sub	sp, #16
   1a2cc:	af00      	add	r7, sp, #0
   1a2ce:	6078      	str	r0, [r7, #4]
   1a2d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a2d2:	687b      	ldr	r3, [r7, #4]
   1a2d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1a2d6:	68fb      	ldr	r3, [r7, #12]
   1a2d8:	2b00      	cmp	r3, #0
   1a2da:	d101      	bne.n	1a2e0 <xQueueGenericReset+0x18>
   1a2dc:	b672      	cpsid	i
   1a2de:	e7fe      	b.n	1a2de <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1a2e0:	4b23      	ldr	r3, [pc, #140]	; (1a370 <xQueueGenericReset+0xa8>)
   1a2e2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1a2e4:	68fb      	ldr	r3, [r7, #12]
   1a2e6:	681a      	ldr	r2, [r3, #0]
   1a2e8:	68fb      	ldr	r3, [r7, #12]
   1a2ea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1a2ec:	68fb      	ldr	r3, [r7, #12]
   1a2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a2f0:	434b      	muls	r3, r1
   1a2f2:	18d2      	adds	r2, r2, r3
   1a2f4:	68fb      	ldr	r3, [r7, #12]
   1a2f6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1a2f8:	68fb      	ldr	r3, [r7, #12]
   1a2fa:	2200      	movs	r2, #0
   1a2fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1a2fe:	68fb      	ldr	r3, [r7, #12]
   1a300:	681a      	ldr	r2, [r3, #0]
   1a302:	68fb      	ldr	r3, [r7, #12]
   1a304:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1a306:	68fb      	ldr	r3, [r7, #12]
   1a308:	681a      	ldr	r2, [r3, #0]
   1a30a:	68fb      	ldr	r3, [r7, #12]
   1a30c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a30e:	1e59      	subs	r1, r3, #1
   1a310:	68fb      	ldr	r3, [r7, #12]
   1a312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a314:	434b      	muls	r3, r1
   1a316:	18d2      	adds	r2, r2, r3
   1a318:	68fb      	ldr	r3, [r7, #12]
   1a31a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1a31c:	68fb      	ldr	r3, [r7, #12]
   1a31e:	2244      	movs	r2, #68	; 0x44
   1a320:	21ff      	movs	r1, #255	; 0xff
   1a322:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1a324:	68fb      	ldr	r3, [r7, #12]
   1a326:	2245      	movs	r2, #69	; 0x45
   1a328:	21ff      	movs	r1, #255	; 0xff
   1a32a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1a32c:	683b      	ldr	r3, [r7, #0]
   1a32e:	2b00      	cmp	r3, #0
   1a330:	d10d      	bne.n	1a34e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a332:	68fb      	ldr	r3, [r7, #12]
   1a334:	691b      	ldr	r3, [r3, #16]
   1a336:	2b00      	cmp	r3, #0
   1a338:	d013      	beq.n	1a362 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a33a:	68fb      	ldr	r3, [r7, #12]
   1a33c:	3310      	adds	r3, #16
   1a33e:	0018      	movs	r0, r3
   1a340:	4b0c      	ldr	r3, [pc, #48]	; (1a374 <xQueueGenericReset+0xac>)
   1a342:	4798      	blx	r3
   1a344:	1e03      	subs	r3, r0, #0
   1a346:	d00c      	beq.n	1a362 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1a348:	4b0b      	ldr	r3, [pc, #44]	; (1a378 <xQueueGenericReset+0xb0>)
   1a34a:	4798      	blx	r3
   1a34c:	e009      	b.n	1a362 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1a34e:	68fb      	ldr	r3, [r7, #12]
   1a350:	3310      	adds	r3, #16
   1a352:	0018      	movs	r0, r3
   1a354:	4b09      	ldr	r3, [pc, #36]	; (1a37c <xQueueGenericReset+0xb4>)
   1a356:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1a358:	68fb      	ldr	r3, [r7, #12]
   1a35a:	3324      	adds	r3, #36	; 0x24
   1a35c:	0018      	movs	r0, r3
   1a35e:	4b07      	ldr	r3, [pc, #28]	; (1a37c <xQueueGenericReset+0xb4>)
   1a360:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1a362:	4b07      	ldr	r3, [pc, #28]	; (1a380 <xQueueGenericReset+0xb8>)
   1a364:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1a366:	2301      	movs	r3, #1
}
   1a368:	0018      	movs	r0, r3
   1a36a:	46bd      	mov	sp, r7
   1a36c:	b004      	add	sp, #16
   1a36e:	bd80      	pop	{r7, pc}
   1a370:	0001a099 	.word	0x0001a099
   1a374:	0001c929 	.word	0x0001c929
   1a378:	0001a081 	.word	0x0001a081
   1a37c:	00019e11 	.word	0x00019e11
   1a380:	0001a0bd 	.word	0x0001a0bd

0001a384 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1a384:	b590      	push	{r4, r7, lr}
   1a386:	b08b      	sub	sp, #44	; 0x2c
   1a388:	af02      	add	r7, sp, #8
   1a38a:	60f8      	str	r0, [r7, #12]
   1a38c:	60b9      	str	r1, [r7, #8]
   1a38e:	1dfb      	adds	r3, r7, #7
   1a390:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1a392:	68fb      	ldr	r3, [r7, #12]
   1a394:	2b00      	cmp	r3, #0
   1a396:	d101      	bne.n	1a39c <xQueueGenericCreate+0x18>
   1a398:	b672      	cpsid	i
   1a39a:	e7fe      	b.n	1a39a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1a39c:	68bb      	ldr	r3, [r7, #8]
   1a39e:	2b00      	cmp	r3, #0
   1a3a0:	d102      	bne.n	1a3a8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1a3a2:	2300      	movs	r3, #0
   1a3a4:	61fb      	str	r3, [r7, #28]
   1a3a6:	e003      	b.n	1a3b0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1a3a8:	68fb      	ldr	r3, [r7, #12]
   1a3aa:	68ba      	ldr	r2, [r7, #8]
   1a3ac:	4353      	muls	r3, r2
   1a3ae:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1a3b0:	69fb      	ldr	r3, [r7, #28]
   1a3b2:	3354      	adds	r3, #84	; 0x54
   1a3b4:	0018      	movs	r0, r3
   1a3b6:	4b19      	ldr	r3, [pc, #100]	; (1a41c <xQueueGenericCreate+0x98>)
   1a3b8:	4798      	blx	r3
   1a3ba:	0003      	movs	r3, r0
   1a3bc:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1a3be:	69bb      	ldr	r3, [r7, #24]
   1a3c0:	2b00      	cmp	r3, #0
   1a3c2:	d00d      	beq.n	1a3e0 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1a3c4:	69bb      	ldr	r3, [r7, #24]
   1a3c6:	3354      	adds	r3, #84	; 0x54
   1a3c8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1a3ca:	1dfb      	adds	r3, r7, #7
   1a3cc:	781c      	ldrb	r4, [r3, #0]
   1a3ce:	697a      	ldr	r2, [r7, #20]
   1a3d0:	68b9      	ldr	r1, [r7, #8]
   1a3d2:	68f8      	ldr	r0, [r7, #12]
   1a3d4:	69bb      	ldr	r3, [r7, #24]
   1a3d6:	9300      	str	r3, [sp, #0]
   1a3d8:	0023      	movs	r3, r4
   1a3da:	4c11      	ldr	r4, [pc, #68]	; (1a420 <xQueueGenericCreate+0x9c>)
   1a3dc:	47a0      	blx	r4
   1a3de:	e017      	b.n	1a410 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1a3e0:	4b10      	ldr	r3, [pc, #64]	; (1a424 <xQueueGenericCreate+0xa0>)
   1a3e2:	4798      	blx	r3
   1a3e4:	0003      	movs	r3, r0
   1a3e6:	0018      	movs	r0, r3
   1a3e8:	4b0f      	ldr	r3, [pc, #60]	; (1a428 <xQueueGenericCreate+0xa4>)
   1a3ea:	4798      	blx	r3
   1a3ec:	0003      	movs	r3, r0
   1a3ee:	001a      	movs	r2, r3
   1a3f0:	4b0e      	ldr	r3, [pc, #56]	; (1a42c <xQueueGenericCreate+0xa8>)
   1a3f2:	881b      	ldrh	r3, [r3, #0]
   1a3f4:	4013      	ands	r3, r2
   1a3f6:	b29b      	uxth	r3, r3
   1a3f8:	2b00      	cmp	r3, #0
   1a3fa:	d009      	beq.n	1a410 <xQueueGenericCreate+0x8c>
   1a3fc:	1dfb      	adds	r3, r7, #7
   1a3fe:	781b      	ldrb	r3, [r3, #0]
   1a400:	4a0b      	ldr	r2, [pc, #44]	; (1a430 <xQueueGenericCreate+0xac>)
   1a402:	5cd3      	ldrb	r3, [r2, r3]
   1a404:	3340      	adds	r3, #64	; 0x40
   1a406:	b2db      	uxtb	r3, r3
   1a408:	2100      	movs	r1, #0
   1a40a:	0018      	movs	r0, r3
   1a40c:	4b09      	ldr	r3, [pc, #36]	; (1a434 <xQueueGenericCreate+0xb0>)
   1a40e:	4798      	blx	r3
		}

		return pxNewQueue;
   1a410:	69bb      	ldr	r3, [r7, #24]
	}
   1a412:	0018      	movs	r0, r3
   1a414:	46bd      	mov	sp, r7
   1a416:	b009      	add	sp, #36	; 0x24
   1a418:	bd90      	pop	{r4, r7, pc}
   1a41a:	46c0      	nop			; (mov r8, r8)
   1a41c:	0001a1d1 	.word	0x0001a1d1
   1a420:	0001a439 	.word	0x0001a439
   1a424:	00018335 	.word	0x00018335
   1a428:	00018099 	.word	0x00018099
   1a42c:	20000110 	.word	0x20000110
   1a430:	20000104 	.word	0x20000104
   1a434:	00018d99 	.word	0x00018d99

0001a438 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1a438:	b5b0      	push	{r4, r5, r7, lr}
   1a43a:	b084      	sub	sp, #16
   1a43c:	af00      	add	r7, sp, #0
   1a43e:	60f8      	str	r0, [r7, #12]
   1a440:	60b9      	str	r1, [r7, #8]
   1a442:	607a      	str	r2, [r7, #4]
   1a444:	001a      	movs	r2, r3
   1a446:	1cfb      	adds	r3, r7, #3
   1a448:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1a44a:	68bb      	ldr	r3, [r7, #8]
   1a44c:	2b00      	cmp	r3, #0
   1a44e:	d103      	bne.n	1a458 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1a450:	6a3b      	ldr	r3, [r7, #32]
   1a452:	6a3a      	ldr	r2, [r7, #32]
   1a454:	601a      	str	r2, [r3, #0]
   1a456:	e002      	b.n	1a45e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1a458:	6a3b      	ldr	r3, [r7, #32]
   1a45a:	687a      	ldr	r2, [r7, #4]
   1a45c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1a45e:	6a3b      	ldr	r3, [r7, #32]
   1a460:	68fa      	ldr	r2, [r7, #12]
   1a462:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1a464:	6a3b      	ldr	r3, [r7, #32]
   1a466:	68ba      	ldr	r2, [r7, #8]
   1a468:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1a46a:	6a3b      	ldr	r3, [r7, #32]
   1a46c:	2101      	movs	r1, #1
   1a46e:	0018      	movs	r0, r3
   1a470:	4b41      	ldr	r3, [pc, #260]	; (1a578 <prvInitialiseNewQueue+0x140>)
   1a472:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1a474:	6a3b      	ldr	r3, [r7, #32]
   1a476:	1cfa      	adds	r2, r7, #3
   1a478:	2150      	movs	r1, #80	; 0x50
   1a47a:	7812      	ldrb	r2, [r2, #0]
   1a47c:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1a47e:	6a3b      	ldr	r3, [r7, #32]
   1a480:	2200      	movs	r2, #0
   1a482:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1a484:	6a3b      	ldr	r3, [r7, #32]
   1a486:	0018      	movs	r0, r3
   1a488:	4b3c      	ldr	r3, [pc, #240]	; (1a57c <prvInitialiseNewQueue+0x144>)
   1a48a:	4798      	blx	r3
   1a48c:	0003      	movs	r3, r0
   1a48e:	001a      	movs	r2, r3
   1a490:	4b3b      	ldr	r3, [pc, #236]	; (1a580 <prvInitialiseNewQueue+0x148>)
   1a492:	5c9b      	ldrb	r3, [r3, r2]
   1a494:	0018      	movs	r0, r3
   1a496:	4b3b      	ldr	r3, [pc, #236]	; (1a584 <prvInitialiseNewQueue+0x14c>)
   1a498:	4798      	blx	r3
   1a49a:	0003      	movs	r3, r0
   1a49c:	b29a      	uxth	r2, r3
   1a49e:	6a3b      	ldr	r3, [r7, #32]
   1a4a0:	0011      	movs	r1, r2
   1a4a2:	0018      	movs	r0, r3
   1a4a4:	4b38      	ldr	r3, [pc, #224]	; (1a588 <prvInitialiseNewQueue+0x150>)
   1a4a6:	4798      	blx	r3
   1a4a8:	4b38      	ldr	r3, [pc, #224]	; (1a58c <prvInitialiseNewQueue+0x154>)
   1a4aa:	881a      	ldrh	r2, [r3, #0]
   1a4ac:	6a3b      	ldr	r3, [r7, #32]
   1a4ae:	0011      	movs	r1, r2
   1a4b0:	0018      	movs	r0, r3
   1a4b2:	4b37      	ldr	r3, [pc, #220]	; (1a590 <prvInitialiseNewQueue+0x158>)
   1a4b4:	4798      	blx	r3
   1a4b6:	6a3b      	ldr	r3, [r7, #32]
   1a4b8:	0018      	movs	r0, r3
   1a4ba:	4b30      	ldr	r3, [pc, #192]	; (1a57c <prvInitialiseNewQueue+0x144>)
   1a4bc:	4798      	blx	r3
   1a4be:	0003      	movs	r3, r0
   1a4c0:	001a      	movs	r2, r3
   1a4c2:	4b2f      	ldr	r3, [pc, #188]	; (1a580 <prvInitialiseNewQueue+0x148>)
   1a4c4:	5c9c      	ldrb	r4, [r3, r2]
   1a4c6:	6a3b      	ldr	r3, [r7, #32]
   1a4c8:	0018      	movs	r0, r3
   1a4ca:	4b32      	ldr	r3, [pc, #200]	; (1a594 <prvInitialiseNewQueue+0x15c>)
   1a4cc:	4798      	blx	r3
   1a4ce:	0003      	movs	r3, r0
   1a4d0:	b2db      	uxtb	r3, r3
   1a4d2:	0019      	movs	r1, r3
   1a4d4:	0020      	movs	r0, r4
   1a4d6:	4b30      	ldr	r3, [pc, #192]	; (1a598 <prvInitialiseNewQueue+0x160>)
   1a4d8:	4798      	blx	r3
   1a4da:	4b30      	ldr	r3, [pc, #192]	; (1a59c <prvInitialiseNewQueue+0x164>)
   1a4dc:	4798      	blx	r3
   1a4de:	0003      	movs	r3, r0
   1a4e0:	0018      	movs	r0, r3
   1a4e2:	4b2f      	ldr	r3, [pc, #188]	; (1a5a0 <prvInitialiseNewQueue+0x168>)
   1a4e4:	4798      	blx	r3
   1a4e6:	0003      	movs	r3, r0
   1a4e8:	001a      	movs	r2, r3
   1a4ea:	4b2e      	ldr	r3, [pc, #184]	; (1a5a4 <prvInitialiseNewQueue+0x16c>)
   1a4ec:	881b      	ldrh	r3, [r3, #0]
   1a4ee:	4013      	ands	r3, r2
   1a4f0:	b29b      	uxth	r3, r3
   1a4f2:	2b00      	cmp	r3, #0
   1a4f4:	d029      	beq.n	1a54a <prvInitialiseNewQueue+0x112>
   1a4f6:	6a3b      	ldr	r3, [r7, #32]
   1a4f8:	0018      	movs	r0, r3
   1a4fa:	4b2b      	ldr	r3, [pc, #172]	; (1a5a8 <prvInitialiseNewQueue+0x170>)
   1a4fc:	4798      	blx	r3
   1a4fe:	0003      	movs	r3, r0
   1a500:	001a      	movs	r2, r3
   1a502:	4b28      	ldr	r3, [pc, #160]	; (1a5a4 <prvInitialiseNewQueue+0x16c>)
   1a504:	881b      	ldrh	r3, [r3, #0]
   1a506:	4013      	ands	r3, r2
   1a508:	b29b      	uxth	r3, r3
   1a50a:	2b00      	cmp	r3, #0
   1a50c:	d01d      	beq.n	1a54a <prvInitialiseNewQueue+0x112>
   1a50e:	6a3b      	ldr	r3, [r7, #32]
   1a510:	0018      	movs	r0, r3
   1a512:	4b1a      	ldr	r3, [pc, #104]	; (1a57c <prvInitialiseNewQueue+0x144>)
   1a514:	4798      	blx	r3
   1a516:	0003      	movs	r3, r0
   1a518:	001a      	movs	r2, r3
   1a51a:	4b19      	ldr	r3, [pc, #100]	; (1a580 <prvInitialiseNewQueue+0x148>)
   1a51c:	5c9b      	ldrb	r3, [r3, r2]
   1a51e:	3318      	adds	r3, #24
   1a520:	b2db      	uxtb	r3, r3
   1a522:	001d      	movs	r5, r3
   1a524:	6a3b      	ldr	r3, [r7, #32]
   1a526:	0018      	movs	r0, r3
   1a528:	4b14      	ldr	r3, [pc, #80]	; (1a57c <prvInitialiseNewQueue+0x144>)
   1a52a:	4798      	blx	r3
   1a52c:	0003      	movs	r3, r0
   1a52e:	001a      	movs	r2, r3
   1a530:	4b13      	ldr	r3, [pc, #76]	; (1a580 <prvInitialiseNewQueue+0x148>)
   1a532:	5c9c      	ldrb	r4, [r3, r2]
   1a534:	6a3b      	ldr	r3, [r7, #32]
   1a536:	0018      	movs	r0, r3
   1a538:	4b16      	ldr	r3, [pc, #88]	; (1a594 <prvInitialiseNewQueue+0x15c>)
   1a53a:	4798      	blx	r3
   1a53c:	0003      	movs	r3, r0
   1a53e:	b2db      	uxtb	r3, r3
   1a540:	001a      	movs	r2, r3
   1a542:	0021      	movs	r1, r4
   1a544:	0028      	movs	r0, r5
   1a546:	4b19      	ldr	r3, [pc, #100]	; (1a5ac <prvInitialiseNewQueue+0x174>)
   1a548:	4798      	blx	r3
   1a54a:	6a3b      	ldr	r3, [r7, #32]
   1a54c:	0018      	movs	r0, r3
   1a54e:	4b0b      	ldr	r3, [pc, #44]	; (1a57c <prvInitialiseNewQueue+0x144>)
   1a550:	4798      	blx	r3
   1a552:	0003      	movs	r3, r0
   1a554:	001a      	movs	r2, r3
   1a556:	4b0a      	ldr	r3, [pc, #40]	; (1a580 <prvInitialiseNewQueue+0x148>)
   1a558:	5c9c      	ldrb	r4, [r3, r2]
   1a55a:	6a3b      	ldr	r3, [r7, #32]
   1a55c:	0018      	movs	r0, r3
   1a55e:	4b0d      	ldr	r3, [pc, #52]	; (1a594 <prvInitialiseNewQueue+0x15c>)
   1a560:	4798      	blx	r3
   1a562:	0003      	movs	r3, r0
   1a564:	b2db      	uxtb	r3, r3
   1a566:	2200      	movs	r2, #0
   1a568:	0019      	movs	r1, r3
   1a56a:	0020      	movs	r0, r4
   1a56c:	4b10      	ldr	r3, [pc, #64]	; (1a5b0 <prvInitialiseNewQueue+0x178>)
   1a56e:	4798      	blx	r3
}
   1a570:	46c0      	nop			; (mov r8, r8)
   1a572:	46bd      	mov	sp, r7
   1a574:	b004      	add	sp, #16
   1a576:	bdb0      	pop	{r4, r5, r7, pc}
   1a578:	0001a2c9 	.word	0x0001a2c9
   1a57c:	00018059 	.word	0x00018059
   1a580:	20000104 	.word	0x20000104
   1a584:	00019619 	.word	0x00019619
   1a588:	0001817d 	.word	0x0001817d
   1a58c:	20000112 	.word	0x20000112
   1a590:	000181b9 	.word	0x000181b9
   1a594:	00018139 	.word	0x00018139
   1a598:	000197b1 	.word	0x000197b1
   1a59c:	00018335 	.word	0x00018335
   1a5a0:	00018099 	.word	0x00018099
   1a5a4:	20000110 	.word	0x20000110
   1a5a8:	00018159 	.word	0x00018159
   1a5ac:	00018a91 	.word	0x00018a91
   1a5b0:	000190ed 	.word	0x000190ed

0001a5b4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1a5b4:	b590      	push	{r4, r7, lr}
   1a5b6:	b083      	sub	sp, #12
   1a5b8:	af00      	add	r7, sp, #0
   1a5ba:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1a5bc:	687b      	ldr	r3, [r7, #4]
   1a5be:	2b00      	cmp	r3, #0
   1a5c0:	d00e      	beq.n	1a5e0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1a5c2:	687b      	ldr	r3, [r7, #4]
   1a5c4:	2200      	movs	r2, #0
   1a5c6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1a5c8:	687b      	ldr	r3, [r7, #4]
   1a5ca:	2200      	movs	r2, #0
   1a5cc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1a5ce:	687b      	ldr	r3, [r7, #4]
   1a5d0:	2200      	movs	r2, #0
   1a5d2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1a5d4:	6878      	ldr	r0, [r7, #4]
   1a5d6:	2300      	movs	r3, #0
   1a5d8:	2200      	movs	r2, #0
   1a5da:	2100      	movs	r1, #0
   1a5dc:	4c02      	ldr	r4, [pc, #8]	; (1a5e8 <prvInitialiseMutex+0x34>)
   1a5de:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1a5e0:	46c0      	nop			; (mov r8, r8)
   1a5e2:	46bd      	mov	sp, r7
   1a5e4:	b003      	add	sp, #12
   1a5e6:	bd90      	pop	{r4, r7, pc}
   1a5e8:	0001a62d 	.word	0x0001a62d

0001a5ec <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1a5ec:	b580      	push	{r7, lr}
   1a5ee:	b086      	sub	sp, #24
   1a5f0:	af00      	add	r7, sp, #0
   1a5f2:	0002      	movs	r2, r0
   1a5f4:	1dfb      	adds	r3, r7, #7
   1a5f6:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1a5f8:	2301      	movs	r3, #1
   1a5fa:	617b      	str	r3, [r7, #20]
   1a5fc:	2300      	movs	r3, #0
   1a5fe:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1a600:	1dfb      	adds	r3, r7, #7
   1a602:	781a      	ldrb	r2, [r3, #0]
   1a604:	6939      	ldr	r1, [r7, #16]
   1a606:	697b      	ldr	r3, [r7, #20]
   1a608:	0018      	movs	r0, r3
   1a60a:	4b06      	ldr	r3, [pc, #24]	; (1a624 <xQueueCreateMutex+0x38>)
   1a60c:	4798      	blx	r3
   1a60e:	0003      	movs	r3, r0
   1a610:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1a612:	68fb      	ldr	r3, [r7, #12]
   1a614:	0018      	movs	r0, r3
   1a616:	4b04      	ldr	r3, [pc, #16]	; (1a628 <xQueueCreateMutex+0x3c>)
   1a618:	4798      	blx	r3

		return pxNewQueue;
   1a61a:	68fb      	ldr	r3, [r7, #12]
	}
   1a61c:	0018      	movs	r0, r3
   1a61e:	46bd      	mov	sp, r7
   1a620:	b006      	add	sp, #24
   1a622:	bd80      	pop	{r7, pc}
   1a624:	0001a385 	.word	0x0001a385
   1a628:	0001a5b5 	.word	0x0001a5b5

0001a62c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1a62c:	b5b0      	push	{r4, r5, r7, lr}
   1a62e:	b08a      	sub	sp, #40	; 0x28
   1a630:	af00      	add	r7, sp, #0
   1a632:	60f8      	str	r0, [r7, #12]
   1a634:	60b9      	str	r1, [r7, #8]
   1a636:	607a      	str	r2, [r7, #4]
   1a638:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1a63a:	2300      	movs	r3, #0
   1a63c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a63e:	68fb      	ldr	r3, [r7, #12]
   1a640:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1a642:	6a3b      	ldr	r3, [r7, #32]
   1a644:	2b00      	cmp	r3, #0
   1a646:	d101      	bne.n	1a64c <xQueueGenericSend+0x20>
   1a648:	b672      	cpsid	i
   1a64a:	e7fe      	b.n	1a64a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a64c:	68bb      	ldr	r3, [r7, #8]
   1a64e:	2b00      	cmp	r3, #0
   1a650:	d103      	bne.n	1a65a <xQueueGenericSend+0x2e>
   1a652:	6a3b      	ldr	r3, [r7, #32]
   1a654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a656:	2b00      	cmp	r3, #0
   1a658:	d101      	bne.n	1a65e <xQueueGenericSend+0x32>
   1a65a:	2301      	movs	r3, #1
   1a65c:	e000      	b.n	1a660 <xQueueGenericSend+0x34>
   1a65e:	2300      	movs	r3, #0
   1a660:	2b00      	cmp	r3, #0
   1a662:	d101      	bne.n	1a668 <xQueueGenericSend+0x3c>
   1a664:	b672      	cpsid	i
   1a666:	e7fe      	b.n	1a666 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1a668:	683b      	ldr	r3, [r7, #0]
   1a66a:	2b02      	cmp	r3, #2
   1a66c:	d103      	bne.n	1a676 <xQueueGenericSend+0x4a>
   1a66e:	6a3b      	ldr	r3, [r7, #32]
   1a670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a672:	2b01      	cmp	r3, #1
   1a674:	d101      	bne.n	1a67a <xQueueGenericSend+0x4e>
   1a676:	2301      	movs	r3, #1
   1a678:	e000      	b.n	1a67c <xQueueGenericSend+0x50>
   1a67a:	2300      	movs	r3, #0
   1a67c:	2b00      	cmp	r3, #0
   1a67e:	d101      	bne.n	1a684 <xQueueGenericSend+0x58>
   1a680:	b672      	cpsid	i
   1a682:	e7fe      	b.n	1a682 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a684:	4bbc      	ldr	r3, [pc, #752]	; (1a978 <xQueueGenericSend+0x34c>)
   1a686:	4798      	blx	r3
   1a688:	1e03      	subs	r3, r0, #0
   1a68a:	d102      	bne.n	1a692 <xQueueGenericSend+0x66>
   1a68c:	687b      	ldr	r3, [r7, #4]
   1a68e:	2b00      	cmp	r3, #0
   1a690:	d101      	bne.n	1a696 <xQueueGenericSend+0x6a>
   1a692:	2301      	movs	r3, #1
   1a694:	e000      	b.n	1a698 <xQueueGenericSend+0x6c>
   1a696:	2300      	movs	r3, #0
   1a698:	2b00      	cmp	r3, #0
   1a69a:	d101      	bne.n	1a6a0 <xQueueGenericSend+0x74>
   1a69c:	b672      	cpsid	i
   1a69e:	e7fe      	b.n	1a69e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1a6a0:	4bb6      	ldr	r3, [pc, #728]	; (1a97c <xQueueGenericSend+0x350>)
   1a6a2:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1a6a4:	6a3b      	ldr	r3, [r7, #32]
   1a6a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a6a8:	6a3b      	ldr	r3, [r7, #32]
   1a6aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a6ac:	429a      	cmp	r2, r3
   1a6ae:	d303      	bcc.n	1a6b8 <xQueueGenericSend+0x8c>
   1a6b0:	683b      	ldr	r3, [r7, #0]
   1a6b2:	2b02      	cmp	r3, #2
   1a6b4:	d000      	beq.n	1a6b8 <xQueueGenericSend+0x8c>
   1a6b6:	e08e      	b.n	1a7d6 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1a6b8:	4bb1      	ldr	r3, [pc, #708]	; (1a980 <xQueueGenericSend+0x354>)
   1a6ba:	4798      	blx	r3
   1a6bc:	0003      	movs	r3, r0
   1a6be:	0018      	movs	r0, r3
   1a6c0:	4bb0      	ldr	r3, [pc, #704]	; (1a984 <xQueueGenericSend+0x358>)
   1a6c2:	4798      	blx	r3
   1a6c4:	0003      	movs	r3, r0
   1a6c6:	001a      	movs	r2, r3
   1a6c8:	4baf      	ldr	r3, [pc, #700]	; (1a988 <xQueueGenericSend+0x35c>)
   1a6ca:	881b      	ldrh	r3, [r3, #0]
   1a6cc:	4013      	ands	r3, r2
   1a6ce:	b29b      	uxth	r3, r3
   1a6d0:	2b00      	cmp	r3, #0
   1a6d2:	d02e      	beq.n	1a732 <xQueueGenericSend+0x106>
   1a6d4:	6a3b      	ldr	r3, [r7, #32]
   1a6d6:	0018      	movs	r0, r3
   1a6d8:	4bac      	ldr	r3, [pc, #688]	; (1a98c <xQueueGenericSend+0x360>)
   1a6da:	4798      	blx	r3
   1a6dc:	0003      	movs	r3, r0
   1a6de:	001a      	movs	r2, r3
   1a6e0:	4ba9      	ldr	r3, [pc, #676]	; (1a988 <xQueueGenericSend+0x35c>)
   1a6e2:	881b      	ldrh	r3, [r3, #0]
   1a6e4:	4013      	ands	r3, r2
   1a6e6:	b29b      	uxth	r3, r3
   1a6e8:	2b00      	cmp	r3, #0
   1a6ea:	d022      	beq.n	1a732 <xQueueGenericSend+0x106>
   1a6ec:	683b      	ldr	r3, [r7, #0]
   1a6ee:	2b00      	cmp	r3, #0
   1a6f0:	d10b      	bne.n	1a70a <xQueueGenericSend+0xde>
   1a6f2:	6a3b      	ldr	r3, [r7, #32]
   1a6f4:	0018      	movs	r0, r3
   1a6f6:	4ba6      	ldr	r3, [pc, #664]	; (1a990 <xQueueGenericSend+0x364>)
   1a6f8:	4798      	blx	r3
   1a6fa:	0003      	movs	r3, r0
   1a6fc:	001a      	movs	r2, r3
   1a6fe:	4ba5      	ldr	r3, [pc, #660]	; (1a994 <xQueueGenericSend+0x368>)
   1a700:	5c9b      	ldrb	r3, [r3, r2]
   1a702:	3320      	adds	r3, #32
   1a704:	b2db      	uxtb	r3, r3
   1a706:	001d      	movs	r5, r3
   1a708:	e000      	b.n	1a70c <xQueueGenericSend+0xe0>
   1a70a:	2525      	movs	r5, #37	; 0x25
   1a70c:	6a3b      	ldr	r3, [r7, #32]
   1a70e:	0018      	movs	r0, r3
   1a710:	4b9f      	ldr	r3, [pc, #636]	; (1a990 <xQueueGenericSend+0x364>)
   1a712:	4798      	blx	r3
   1a714:	0003      	movs	r3, r0
   1a716:	001a      	movs	r2, r3
   1a718:	4b9e      	ldr	r3, [pc, #632]	; (1a994 <xQueueGenericSend+0x368>)
   1a71a:	5c9c      	ldrb	r4, [r3, r2]
   1a71c:	6a3b      	ldr	r3, [r7, #32]
   1a71e:	0018      	movs	r0, r3
   1a720:	4b9d      	ldr	r3, [pc, #628]	; (1a998 <xQueueGenericSend+0x36c>)
   1a722:	4798      	blx	r3
   1a724:	0003      	movs	r3, r0
   1a726:	b2db      	uxtb	r3, r3
   1a728:	001a      	movs	r2, r3
   1a72a:	0021      	movs	r1, r4
   1a72c:	0028      	movs	r0, r5
   1a72e:	4b9b      	ldr	r3, [pc, #620]	; (1a99c <xQueueGenericSend+0x370>)
   1a730:	4798      	blx	r3
   1a732:	6a3b      	ldr	r3, [r7, #32]
   1a734:	0018      	movs	r0, r3
   1a736:	4b96      	ldr	r3, [pc, #600]	; (1a990 <xQueueGenericSend+0x364>)
   1a738:	4798      	blx	r3
   1a73a:	0003      	movs	r3, r0
   1a73c:	001a      	movs	r2, r3
   1a73e:	4b95      	ldr	r3, [pc, #596]	; (1a994 <xQueueGenericSend+0x368>)
   1a740:	5c9c      	ldrb	r4, [r3, r2]
   1a742:	6a3b      	ldr	r3, [r7, #32]
   1a744:	0018      	movs	r0, r3
   1a746:	4b94      	ldr	r3, [pc, #592]	; (1a998 <xQueueGenericSend+0x36c>)
   1a748:	4798      	blx	r3
   1a74a:	0003      	movs	r3, r0
   1a74c:	b2dd      	uxtb	r5, r3
   1a74e:	6a3b      	ldr	r3, [r7, #32]
   1a750:	0018      	movs	r0, r3
   1a752:	4b8f      	ldr	r3, [pc, #572]	; (1a990 <xQueueGenericSend+0x364>)
   1a754:	4798      	blx	r3
   1a756:	0003      	movs	r3, r0
   1a758:	001a      	movs	r2, r3
   1a75a:	4b8e      	ldr	r3, [pc, #568]	; (1a994 <xQueueGenericSend+0x368>)
   1a75c:	5c9b      	ldrb	r3, [r3, r2]
   1a75e:	2b02      	cmp	r3, #2
   1a760:	d005      	beq.n	1a76e <xQueueGenericSend+0x142>
   1a762:	6a3b      	ldr	r3, [r7, #32]
   1a764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a766:	b2db      	uxtb	r3, r3
   1a768:	3301      	adds	r3, #1
   1a76a:	b2db      	uxtb	r3, r3
   1a76c:	e000      	b.n	1a770 <xQueueGenericSend+0x144>
   1a76e:	2300      	movs	r3, #0
   1a770:	001a      	movs	r2, r3
   1a772:	0029      	movs	r1, r5
   1a774:	0020      	movs	r0, r4
   1a776:	4b8a      	ldr	r3, [pc, #552]	; (1a9a0 <xQueueGenericSend+0x374>)
   1a778:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1a77a:	683a      	ldr	r2, [r7, #0]
   1a77c:	68b9      	ldr	r1, [r7, #8]
   1a77e:	6a3b      	ldr	r3, [r7, #32]
   1a780:	0018      	movs	r0, r3
   1a782:	4b88      	ldr	r3, [pc, #544]	; (1a9a4 <xQueueGenericSend+0x378>)
   1a784:	4798      	blx	r3
   1a786:	0003      	movs	r3, r0
   1a788:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1a78a:	6a3b      	ldr	r3, [r7, #32]
   1a78c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a78e:	2b00      	cmp	r3, #0
   1a790:	d00a      	beq.n	1a7a8 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1a792:	683a      	ldr	r2, [r7, #0]
   1a794:	6a3b      	ldr	r3, [r7, #32]
   1a796:	0011      	movs	r1, r2
   1a798:	0018      	movs	r0, r3
   1a79a:	4b83      	ldr	r3, [pc, #524]	; (1a9a8 <xQueueGenericSend+0x37c>)
   1a79c:	4798      	blx	r3
   1a79e:	1e03      	subs	r3, r0, #0
   1a7a0:	d015      	beq.n	1a7ce <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1a7a2:	4b82      	ldr	r3, [pc, #520]	; (1a9ac <xQueueGenericSend+0x380>)
   1a7a4:	4798      	blx	r3
   1a7a6:	e012      	b.n	1a7ce <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a7a8:	6a3b      	ldr	r3, [r7, #32]
   1a7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a7ac:	2b00      	cmp	r3, #0
   1a7ae:	d009      	beq.n	1a7c4 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a7b0:	6a3b      	ldr	r3, [r7, #32]
   1a7b2:	3324      	adds	r3, #36	; 0x24
   1a7b4:	0018      	movs	r0, r3
   1a7b6:	4b7e      	ldr	r3, [pc, #504]	; (1a9b0 <xQueueGenericSend+0x384>)
   1a7b8:	4798      	blx	r3
   1a7ba:	1e03      	subs	r3, r0, #0
   1a7bc:	d007      	beq.n	1a7ce <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1a7be:	4b7b      	ldr	r3, [pc, #492]	; (1a9ac <xQueueGenericSend+0x380>)
   1a7c0:	4798      	blx	r3
   1a7c2:	e004      	b.n	1a7ce <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1a7c4:	69fb      	ldr	r3, [r7, #28]
   1a7c6:	2b00      	cmp	r3, #0
   1a7c8:	d001      	beq.n	1a7ce <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1a7ca:	4b78      	ldr	r3, [pc, #480]	; (1a9ac <xQueueGenericSend+0x380>)
   1a7cc:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1a7ce:	4b79      	ldr	r3, [pc, #484]	; (1a9b4 <xQueueGenericSend+0x388>)
   1a7d0:	4798      	blx	r3
				return pdPASS;
   1a7d2:	2301      	movs	r3, #1
   1a7d4:	e142      	b.n	1aa5c <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1a7d6:	687b      	ldr	r3, [r7, #4]
   1a7d8:	2b00      	cmp	r3, #0
   1a7da:	d140      	bne.n	1a85e <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1a7dc:	4b75      	ldr	r3, [pc, #468]	; (1a9b4 <xQueueGenericSend+0x388>)
   1a7de:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1a7e0:	4b67      	ldr	r3, [pc, #412]	; (1a980 <xQueueGenericSend+0x354>)
   1a7e2:	4798      	blx	r3
   1a7e4:	0003      	movs	r3, r0
   1a7e6:	0018      	movs	r0, r3
   1a7e8:	4b66      	ldr	r3, [pc, #408]	; (1a984 <xQueueGenericSend+0x358>)
   1a7ea:	4798      	blx	r3
   1a7ec:	0003      	movs	r3, r0
   1a7ee:	001a      	movs	r2, r3
   1a7f0:	4b65      	ldr	r3, [pc, #404]	; (1a988 <xQueueGenericSend+0x35c>)
   1a7f2:	881b      	ldrh	r3, [r3, #0]
   1a7f4:	4013      	ands	r3, r2
   1a7f6:	b29b      	uxth	r3, r3
   1a7f8:	2b00      	cmp	r3, #0
   1a7fa:	d02e      	beq.n	1a85a <xQueueGenericSend+0x22e>
   1a7fc:	6a3b      	ldr	r3, [r7, #32]
   1a7fe:	0018      	movs	r0, r3
   1a800:	4b62      	ldr	r3, [pc, #392]	; (1a98c <xQueueGenericSend+0x360>)
   1a802:	4798      	blx	r3
   1a804:	0003      	movs	r3, r0
   1a806:	001a      	movs	r2, r3
   1a808:	4b5f      	ldr	r3, [pc, #380]	; (1a988 <xQueueGenericSend+0x35c>)
   1a80a:	881b      	ldrh	r3, [r3, #0]
   1a80c:	4013      	ands	r3, r2
   1a80e:	b29b      	uxth	r3, r3
   1a810:	2b00      	cmp	r3, #0
   1a812:	d022      	beq.n	1a85a <xQueueGenericSend+0x22e>
   1a814:	683b      	ldr	r3, [r7, #0]
   1a816:	2b00      	cmp	r3, #0
   1a818:	d10b      	bne.n	1a832 <xQueueGenericSend+0x206>
   1a81a:	6a3b      	ldr	r3, [r7, #32]
   1a81c:	0018      	movs	r0, r3
   1a81e:	4b5c      	ldr	r3, [pc, #368]	; (1a990 <xQueueGenericSend+0x364>)
   1a820:	4798      	blx	r3
   1a822:	0003      	movs	r3, r0
   1a824:	001a      	movs	r2, r3
   1a826:	4b5b      	ldr	r3, [pc, #364]	; (1a994 <xQueueGenericSend+0x368>)
   1a828:	5c9b      	ldrb	r3, [r3, r2]
   1a82a:	3348      	adds	r3, #72	; 0x48
   1a82c:	b2db      	uxtb	r3, r3
   1a82e:	001d      	movs	r5, r3
   1a830:	e000      	b.n	1a834 <xQueueGenericSend+0x208>
   1a832:	254d      	movs	r5, #77	; 0x4d
   1a834:	6a3b      	ldr	r3, [r7, #32]
   1a836:	0018      	movs	r0, r3
   1a838:	4b55      	ldr	r3, [pc, #340]	; (1a990 <xQueueGenericSend+0x364>)
   1a83a:	4798      	blx	r3
   1a83c:	0003      	movs	r3, r0
   1a83e:	001a      	movs	r2, r3
   1a840:	4b54      	ldr	r3, [pc, #336]	; (1a994 <xQueueGenericSend+0x368>)
   1a842:	5c9c      	ldrb	r4, [r3, r2]
   1a844:	6a3b      	ldr	r3, [r7, #32]
   1a846:	0018      	movs	r0, r3
   1a848:	4b53      	ldr	r3, [pc, #332]	; (1a998 <xQueueGenericSend+0x36c>)
   1a84a:	4798      	blx	r3
   1a84c:	0003      	movs	r3, r0
   1a84e:	b2db      	uxtb	r3, r3
   1a850:	001a      	movs	r2, r3
   1a852:	0021      	movs	r1, r4
   1a854:	0028      	movs	r0, r5
   1a856:	4b51      	ldr	r3, [pc, #324]	; (1a99c <xQueueGenericSend+0x370>)
   1a858:	4798      	blx	r3
					return errQUEUE_FULL;
   1a85a:	2300      	movs	r3, #0
   1a85c:	e0fe      	b.n	1aa5c <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1a85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a860:	2b00      	cmp	r3, #0
   1a862:	d106      	bne.n	1a872 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1a864:	2314      	movs	r3, #20
   1a866:	18fb      	adds	r3, r7, r3
   1a868:	0018      	movs	r0, r3
   1a86a:	4b53      	ldr	r3, [pc, #332]	; (1a9b8 <xQueueGenericSend+0x38c>)
   1a86c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1a86e:	2301      	movs	r3, #1
   1a870:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1a872:	4b50      	ldr	r3, [pc, #320]	; (1a9b4 <xQueueGenericSend+0x388>)
   1a874:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1a876:	4b51      	ldr	r3, [pc, #324]	; (1a9bc <xQueueGenericSend+0x390>)
   1a878:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1a87a:	4b40      	ldr	r3, [pc, #256]	; (1a97c <xQueueGenericSend+0x350>)
   1a87c:	4798      	blx	r3
   1a87e:	6a3b      	ldr	r3, [r7, #32]
   1a880:	2244      	movs	r2, #68	; 0x44
   1a882:	5c9b      	ldrb	r3, [r3, r2]
   1a884:	b25b      	sxtb	r3, r3
   1a886:	3301      	adds	r3, #1
   1a888:	d103      	bne.n	1a892 <xQueueGenericSend+0x266>
   1a88a:	6a3b      	ldr	r3, [r7, #32]
   1a88c:	2244      	movs	r2, #68	; 0x44
   1a88e:	2100      	movs	r1, #0
   1a890:	5499      	strb	r1, [r3, r2]
   1a892:	6a3b      	ldr	r3, [r7, #32]
   1a894:	2245      	movs	r2, #69	; 0x45
   1a896:	5c9b      	ldrb	r3, [r3, r2]
   1a898:	b25b      	sxtb	r3, r3
   1a89a:	3301      	adds	r3, #1
   1a89c:	d103      	bne.n	1a8a6 <xQueueGenericSend+0x27a>
   1a89e:	6a3b      	ldr	r3, [r7, #32]
   1a8a0:	2245      	movs	r2, #69	; 0x45
   1a8a2:	2100      	movs	r1, #0
   1a8a4:	5499      	strb	r1, [r3, r2]
   1a8a6:	4b43      	ldr	r3, [pc, #268]	; (1a9b4 <xQueueGenericSend+0x388>)
   1a8a8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1a8aa:	1d3a      	adds	r2, r7, #4
   1a8ac:	2314      	movs	r3, #20
   1a8ae:	18fb      	adds	r3, r7, r3
   1a8b0:	0011      	movs	r1, r2
   1a8b2:	0018      	movs	r0, r3
   1a8b4:	4b42      	ldr	r3, [pc, #264]	; (1a9c0 <xQueueGenericSend+0x394>)
   1a8b6:	4798      	blx	r3
   1a8b8:	1e03      	subs	r3, r0, #0
   1a8ba:	d000      	beq.n	1a8be <xQueueGenericSend+0x292>
   1a8bc:	e08a      	b.n	1a9d4 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1a8be:	6a3b      	ldr	r3, [r7, #32]
   1a8c0:	0018      	movs	r0, r3
   1a8c2:	4b40      	ldr	r3, [pc, #256]	; (1a9c4 <xQueueGenericSend+0x398>)
   1a8c4:	4798      	blx	r3
   1a8c6:	1e03      	subs	r3, r0, #0
   1a8c8:	d04f      	beq.n	1a96a <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1a8ca:	4b2d      	ldr	r3, [pc, #180]	; (1a980 <xQueueGenericSend+0x354>)
   1a8cc:	4798      	blx	r3
   1a8ce:	0003      	movs	r3, r0
   1a8d0:	0018      	movs	r0, r3
   1a8d2:	4b2c      	ldr	r3, [pc, #176]	; (1a984 <xQueueGenericSend+0x358>)
   1a8d4:	4798      	blx	r3
   1a8d6:	0003      	movs	r3, r0
   1a8d8:	001a      	movs	r2, r3
   1a8da:	4b2b      	ldr	r3, [pc, #172]	; (1a988 <xQueueGenericSend+0x35c>)
   1a8dc:	881b      	ldrh	r3, [r3, #0]
   1a8de:	4013      	ands	r3, r2
   1a8e0:	b29b      	uxth	r3, r3
   1a8e2:	2b00      	cmp	r3, #0
   1a8e4:	d02e      	beq.n	1a944 <xQueueGenericSend+0x318>
   1a8e6:	6a3b      	ldr	r3, [r7, #32]
   1a8e8:	0018      	movs	r0, r3
   1a8ea:	4b28      	ldr	r3, [pc, #160]	; (1a98c <xQueueGenericSend+0x360>)
   1a8ec:	4798      	blx	r3
   1a8ee:	0003      	movs	r3, r0
   1a8f0:	001a      	movs	r2, r3
   1a8f2:	4b25      	ldr	r3, [pc, #148]	; (1a988 <xQueueGenericSend+0x35c>)
   1a8f4:	881b      	ldrh	r3, [r3, #0]
   1a8f6:	4013      	ands	r3, r2
   1a8f8:	b29b      	uxth	r3, r3
   1a8fa:	2b00      	cmp	r3, #0
   1a8fc:	d022      	beq.n	1a944 <xQueueGenericSend+0x318>
   1a8fe:	683b      	ldr	r3, [r7, #0]
   1a900:	2b00      	cmp	r3, #0
   1a902:	d10b      	bne.n	1a91c <xQueueGenericSend+0x2f0>
   1a904:	6a3b      	ldr	r3, [r7, #32]
   1a906:	0018      	movs	r0, r3
   1a908:	4b21      	ldr	r3, [pc, #132]	; (1a990 <xQueueGenericSend+0x364>)
   1a90a:	4798      	blx	r3
   1a90c:	0003      	movs	r3, r0
   1a90e:	001a      	movs	r2, r3
   1a910:	4b20      	ldr	r3, [pc, #128]	; (1a994 <xQueueGenericSend+0x368>)
   1a912:	5c9b      	ldrb	r3, [r3, r2]
   1a914:	3370      	adds	r3, #112	; 0x70
   1a916:	b2db      	uxtb	r3, r3
   1a918:	001d      	movs	r5, r3
   1a91a:	e000      	b.n	1a91e <xQueueGenericSend+0x2f2>
   1a91c:	2575      	movs	r5, #117	; 0x75
   1a91e:	6a3b      	ldr	r3, [r7, #32]
   1a920:	0018      	movs	r0, r3
   1a922:	4b1b      	ldr	r3, [pc, #108]	; (1a990 <xQueueGenericSend+0x364>)
   1a924:	4798      	blx	r3
   1a926:	0003      	movs	r3, r0
   1a928:	001a      	movs	r2, r3
   1a92a:	4b1a      	ldr	r3, [pc, #104]	; (1a994 <xQueueGenericSend+0x368>)
   1a92c:	5c9c      	ldrb	r4, [r3, r2]
   1a92e:	6a3b      	ldr	r3, [r7, #32]
   1a930:	0018      	movs	r0, r3
   1a932:	4b19      	ldr	r3, [pc, #100]	; (1a998 <xQueueGenericSend+0x36c>)
   1a934:	4798      	blx	r3
   1a936:	0003      	movs	r3, r0
   1a938:	b2db      	uxtb	r3, r3
   1a93a:	001a      	movs	r2, r3
   1a93c:	0021      	movs	r1, r4
   1a93e:	0028      	movs	r0, r5
   1a940:	4b16      	ldr	r3, [pc, #88]	; (1a99c <xQueueGenericSend+0x370>)
   1a942:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1a944:	6a3b      	ldr	r3, [r7, #32]
   1a946:	3310      	adds	r3, #16
   1a948:	687a      	ldr	r2, [r7, #4]
   1a94a:	0011      	movs	r1, r2
   1a94c:	0018      	movs	r0, r3
   1a94e:	4b1e      	ldr	r3, [pc, #120]	; (1a9c8 <xQueueGenericSend+0x39c>)
   1a950:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1a952:	6a3b      	ldr	r3, [r7, #32]
   1a954:	0018      	movs	r0, r3
   1a956:	4b1d      	ldr	r3, [pc, #116]	; (1a9cc <xQueueGenericSend+0x3a0>)
   1a958:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1a95a:	4b1d      	ldr	r3, [pc, #116]	; (1a9d0 <xQueueGenericSend+0x3a4>)
   1a95c:	4798      	blx	r3
   1a95e:	1e03      	subs	r3, r0, #0
   1a960:	d000      	beq.n	1a964 <xQueueGenericSend+0x338>
   1a962:	e69d      	b.n	1a6a0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1a964:	4b11      	ldr	r3, [pc, #68]	; (1a9ac <xQueueGenericSend+0x380>)
   1a966:	4798      	blx	r3
   1a968:	e69a      	b.n	1a6a0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1a96a:	6a3b      	ldr	r3, [r7, #32]
   1a96c:	0018      	movs	r0, r3
   1a96e:	4b17      	ldr	r3, [pc, #92]	; (1a9cc <xQueueGenericSend+0x3a0>)
   1a970:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1a972:	4b17      	ldr	r3, [pc, #92]	; (1a9d0 <xQueueGenericSend+0x3a4>)
   1a974:	4798      	blx	r3
   1a976:	e693      	b.n	1a6a0 <xQueueGenericSend+0x74>
   1a978:	0001cdb9 	.word	0x0001cdb9
   1a97c:	0001a099 	.word	0x0001a099
   1a980:	00018335 	.word	0x00018335
   1a984:	00018099 	.word	0x00018099
   1a988:	20000110 	.word	0x20000110
   1a98c:	00018159 	.word	0x00018159
   1a990:	00018059 	.word	0x00018059
   1a994:	20000104 	.word	0x20000104
   1a998:	00018139 	.word	0x00018139
   1a99c:	00018a91 	.word	0x00018a91
   1a9a0:	000190ed 	.word	0x000190ed
   1a9a4:	0001b865 	.word	0x0001b865
   1a9a8:	0001bb69 	.word	0x0001bb69
   1a9ac:	0001a081 	.word	0x0001a081
   1a9b0:	0001c929 	.word	0x0001c929
   1a9b4:	0001a0bd 	.word	0x0001a0bd
   1a9b8:	0001ca69 	.word	0x0001ca69
   1a9bc:	0001c351 	.word	0x0001c351
   1a9c0:	0001ca91 	.word	0x0001ca91
   1a9c4:	0001bab9 	.word	0x0001bab9
   1a9c8:	0001c805 	.word	0x0001c805
   1a9cc:	0001b995 	.word	0x0001b995
   1a9d0:	0001c369 	.word	0x0001c369
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1a9d4:	6a3b      	ldr	r3, [r7, #32]
   1a9d6:	0018      	movs	r0, r3
   1a9d8:	4b22      	ldr	r3, [pc, #136]	; (1aa64 <xQueueGenericSend+0x438>)
   1a9da:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1a9dc:	4b22      	ldr	r3, [pc, #136]	; (1aa68 <xQueueGenericSend+0x43c>)
   1a9de:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1a9e0:	4b22      	ldr	r3, [pc, #136]	; (1aa6c <xQueueGenericSend+0x440>)
   1a9e2:	4798      	blx	r3
   1a9e4:	0003      	movs	r3, r0
   1a9e6:	0018      	movs	r0, r3
   1a9e8:	4b21      	ldr	r3, [pc, #132]	; (1aa70 <xQueueGenericSend+0x444>)
   1a9ea:	4798      	blx	r3
   1a9ec:	0003      	movs	r3, r0
   1a9ee:	001a      	movs	r2, r3
   1a9f0:	4b20      	ldr	r3, [pc, #128]	; (1aa74 <xQueueGenericSend+0x448>)
   1a9f2:	881b      	ldrh	r3, [r3, #0]
   1a9f4:	4013      	ands	r3, r2
   1a9f6:	b29b      	uxth	r3, r3
   1a9f8:	2b00      	cmp	r3, #0
   1a9fa:	d02e      	beq.n	1aa5a <xQueueGenericSend+0x42e>
   1a9fc:	6a3b      	ldr	r3, [r7, #32]
   1a9fe:	0018      	movs	r0, r3
   1aa00:	4b1d      	ldr	r3, [pc, #116]	; (1aa78 <xQueueGenericSend+0x44c>)
   1aa02:	4798      	blx	r3
   1aa04:	0003      	movs	r3, r0
   1aa06:	001a      	movs	r2, r3
   1aa08:	4b1a      	ldr	r3, [pc, #104]	; (1aa74 <xQueueGenericSend+0x448>)
   1aa0a:	881b      	ldrh	r3, [r3, #0]
   1aa0c:	4013      	ands	r3, r2
   1aa0e:	b29b      	uxth	r3, r3
   1aa10:	2b00      	cmp	r3, #0
   1aa12:	d022      	beq.n	1aa5a <xQueueGenericSend+0x42e>
   1aa14:	683b      	ldr	r3, [r7, #0]
   1aa16:	2b00      	cmp	r3, #0
   1aa18:	d10b      	bne.n	1aa32 <xQueueGenericSend+0x406>
   1aa1a:	6a3b      	ldr	r3, [r7, #32]
   1aa1c:	0018      	movs	r0, r3
   1aa1e:	4b17      	ldr	r3, [pc, #92]	; (1aa7c <xQueueGenericSend+0x450>)
   1aa20:	4798      	blx	r3
   1aa22:	0003      	movs	r3, r0
   1aa24:	001a      	movs	r2, r3
   1aa26:	4b16      	ldr	r3, [pc, #88]	; (1aa80 <xQueueGenericSend+0x454>)
   1aa28:	5c9b      	ldrb	r3, [r3, r2]
   1aa2a:	3348      	adds	r3, #72	; 0x48
   1aa2c:	b2db      	uxtb	r3, r3
   1aa2e:	001d      	movs	r5, r3
   1aa30:	e000      	b.n	1aa34 <xQueueGenericSend+0x408>
   1aa32:	254d      	movs	r5, #77	; 0x4d
   1aa34:	6a3b      	ldr	r3, [r7, #32]
   1aa36:	0018      	movs	r0, r3
   1aa38:	4b10      	ldr	r3, [pc, #64]	; (1aa7c <xQueueGenericSend+0x450>)
   1aa3a:	4798      	blx	r3
   1aa3c:	0003      	movs	r3, r0
   1aa3e:	001a      	movs	r2, r3
   1aa40:	4b0f      	ldr	r3, [pc, #60]	; (1aa80 <xQueueGenericSend+0x454>)
   1aa42:	5c9c      	ldrb	r4, [r3, r2]
   1aa44:	6a3b      	ldr	r3, [r7, #32]
   1aa46:	0018      	movs	r0, r3
   1aa48:	4b0e      	ldr	r3, [pc, #56]	; (1aa84 <xQueueGenericSend+0x458>)
   1aa4a:	4798      	blx	r3
   1aa4c:	0003      	movs	r3, r0
   1aa4e:	b2db      	uxtb	r3, r3
   1aa50:	001a      	movs	r2, r3
   1aa52:	0021      	movs	r1, r4
   1aa54:	0028      	movs	r0, r5
   1aa56:	4b0c      	ldr	r3, [pc, #48]	; (1aa88 <xQueueGenericSend+0x45c>)
   1aa58:	4798      	blx	r3
			return errQUEUE_FULL;
   1aa5a:	2300      	movs	r3, #0
		}
	}
}
   1aa5c:	0018      	movs	r0, r3
   1aa5e:	46bd      	mov	sp, r7
   1aa60:	b00a      	add	sp, #40	; 0x28
   1aa62:	bdb0      	pop	{r4, r5, r7, pc}
   1aa64:	0001b995 	.word	0x0001b995
   1aa68:	0001c369 	.word	0x0001c369
   1aa6c:	00018335 	.word	0x00018335
   1aa70:	00018099 	.word	0x00018099
   1aa74:	20000110 	.word	0x20000110
   1aa78:	00018159 	.word	0x00018159
   1aa7c:	00018059 	.word	0x00018059
   1aa80:	20000104 	.word	0x20000104
   1aa84:	00018139 	.word	0x00018139
   1aa88:	00018a91 	.word	0x00018a91

0001aa8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1aa8c:	b5b0      	push	{r4, r5, r7, lr}
   1aa8e:	b088      	sub	sp, #32
   1aa90:	af00      	add	r7, sp, #0
   1aa92:	60f8      	str	r0, [r7, #12]
   1aa94:	60b9      	str	r1, [r7, #8]
   1aa96:	607a      	str	r2, [r7, #4]
   1aa98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1aa9a:	68fb      	ldr	r3, [r7, #12]
   1aa9c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1aa9e:	69bb      	ldr	r3, [r7, #24]
   1aaa0:	2b00      	cmp	r3, #0
   1aaa2:	d101      	bne.n	1aaa8 <xQueueGenericSendFromISR+0x1c>
   1aaa4:	b672      	cpsid	i
   1aaa6:	e7fe      	b.n	1aaa6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1aaa8:	68bb      	ldr	r3, [r7, #8]
   1aaaa:	2b00      	cmp	r3, #0
   1aaac:	d103      	bne.n	1aab6 <xQueueGenericSendFromISR+0x2a>
   1aaae:	69bb      	ldr	r3, [r7, #24]
   1aab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1aab2:	2b00      	cmp	r3, #0
   1aab4:	d101      	bne.n	1aaba <xQueueGenericSendFromISR+0x2e>
   1aab6:	2301      	movs	r3, #1
   1aab8:	e000      	b.n	1aabc <xQueueGenericSendFromISR+0x30>
   1aaba:	2300      	movs	r3, #0
   1aabc:	2b00      	cmp	r3, #0
   1aabe:	d101      	bne.n	1aac4 <xQueueGenericSendFromISR+0x38>
   1aac0:	b672      	cpsid	i
   1aac2:	e7fe      	b.n	1aac2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1aac4:	683b      	ldr	r3, [r7, #0]
   1aac6:	2b02      	cmp	r3, #2
   1aac8:	d103      	bne.n	1aad2 <xQueueGenericSendFromISR+0x46>
   1aaca:	69bb      	ldr	r3, [r7, #24]
   1aacc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1aace:	2b01      	cmp	r3, #1
   1aad0:	d101      	bne.n	1aad6 <xQueueGenericSendFromISR+0x4a>
   1aad2:	2301      	movs	r3, #1
   1aad4:	e000      	b.n	1aad8 <xQueueGenericSendFromISR+0x4c>
   1aad6:	2300      	movs	r3, #0
   1aad8:	2b00      	cmp	r3, #0
   1aada:	d101      	bne.n	1aae0 <xQueueGenericSendFromISR+0x54>
   1aadc:	b672      	cpsid	i
   1aade:	e7fe      	b.n	1aade <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1aae0:	4b68      	ldr	r3, [pc, #416]	; (1ac84 <xQueueGenericSendFromISR+0x1f8>)
   1aae2:	4798      	blx	r3
   1aae4:	0003      	movs	r3, r0
   1aae6:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1aae8:	69bb      	ldr	r3, [r7, #24]
   1aaea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1aaec:	69bb      	ldr	r3, [r7, #24]
   1aaee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1aaf0:	429a      	cmp	r2, r3
   1aaf2:	d303      	bcc.n	1aafc <xQueueGenericSendFromISR+0x70>
   1aaf4:	683b      	ldr	r3, [r7, #0]
   1aaf6:	2b02      	cmp	r3, #2
   1aaf8:	d000      	beq.n	1aafc <xQueueGenericSendFromISR+0x70>
   1aafa:	e088      	b.n	1ac0e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1aafc:	2313      	movs	r3, #19
   1aafe:	18fb      	adds	r3, r7, r3
   1ab00:	69ba      	ldr	r2, [r7, #24]
   1ab02:	2145      	movs	r1, #69	; 0x45
   1ab04:	5c52      	ldrb	r2, [r2, r1]
   1ab06:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1ab08:	69bb      	ldr	r3, [r7, #24]
   1ab0a:	0018      	movs	r0, r3
   1ab0c:	4b5e      	ldr	r3, [pc, #376]	; (1ac88 <xQueueGenericSendFromISR+0x1fc>)
   1ab0e:	4798      	blx	r3
   1ab10:	0003      	movs	r3, r0
   1ab12:	001a      	movs	r2, r3
   1ab14:	4b5d      	ldr	r3, [pc, #372]	; (1ac8c <xQueueGenericSendFromISR+0x200>)
   1ab16:	881b      	ldrh	r3, [r3, #0]
   1ab18:	4013      	ands	r3, r2
   1ab1a:	b29b      	uxth	r3, r3
   1ab1c:	2b00      	cmp	r3, #0
   1ab1e:	d022      	beq.n	1ab66 <xQueueGenericSendFromISR+0xda>
   1ab20:	683b      	ldr	r3, [r7, #0]
   1ab22:	2b00      	cmp	r3, #0
   1ab24:	d10b      	bne.n	1ab3e <xQueueGenericSendFromISR+0xb2>
   1ab26:	69bb      	ldr	r3, [r7, #24]
   1ab28:	0018      	movs	r0, r3
   1ab2a:	4b59      	ldr	r3, [pc, #356]	; (1ac90 <xQueueGenericSendFromISR+0x204>)
   1ab2c:	4798      	blx	r3
   1ab2e:	0003      	movs	r3, r0
   1ab30:	001a      	movs	r2, r3
   1ab32:	4b58      	ldr	r3, [pc, #352]	; (1ac94 <xQueueGenericSendFromISR+0x208>)
   1ab34:	5c9b      	ldrb	r3, [r3, r2]
   1ab36:	3330      	adds	r3, #48	; 0x30
   1ab38:	b2db      	uxtb	r3, r3
   1ab3a:	001d      	movs	r5, r3
   1ab3c:	e000      	b.n	1ab40 <xQueueGenericSendFromISR+0xb4>
   1ab3e:	2535      	movs	r5, #53	; 0x35
   1ab40:	69bb      	ldr	r3, [r7, #24]
   1ab42:	0018      	movs	r0, r3
   1ab44:	4b52      	ldr	r3, [pc, #328]	; (1ac90 <xQueueGenericSendFromISR+0x204>)
   1ab46:	4798      	blx	r3
   1ab48:	0003      	movs	r3, r0
   1ab4a:	001a      	movs	r2, r3
   1ab4c:	4b51      	ldr	r3, [pc, #324]	; (1ac94 <xQueueGenericSendFromISR+0x208>)
   1ab4e:	5c9c      	ldrb	r4, [r3, r2]
   1ab50:	69bb      	ldr	r3, [r7, #24]
   1ab52:	0018      	movs	r0, r3
   1ab54:	4b50      	ldr	r3, [pc, #320]	; (1ac98 <xQueueGenericSendFromISR+0x20c>)
   1ab56:	4798      	blx	r3
   1ab58:	0003      	movs	r3, r0
   1ab5a:	b2db      	uxtb	r3, r3
   1ab5c:	001a      	movs	r2, r3
   1ab5e:	0021      	movs	r1, r4
   1ab60:	0028      	movs	r0, r5
   1ab62:	4b4e      	ldr	r3, [pc, #312]	; (1ac9c <xQueueGenericSendFromISR+0x210>)
   1ab64:	4798      	blx	r3
   1ab66:	69bb      	ldr	r3, [r7, #24]
   1ab68:	0018      	movs	r0, r3
   1ab6a:	4b49      	ldr	r3, [pc, #292]	; (1ac90 <xQueueGenericSendFromISR+0x204>)
   1ab6c:	4798      	blx	r3
   1ab6e:	0003      	movs	r3, r0
   1ab70:	001a      	movs	r2, r3
   1ab72:	4b48      	ldr	r3, [pc, #288]	; (1ac94 <xQueueGenericSendFromISR+0x208>)
   1ab74:	5c9c      	ldrb	r4, [r3, r2]
   1ab76:	69bb      	ldr	r3, [r7, #24]
   1ab78:	0018      	movs	r0, r3
   1ab7a:	4b47      	ldr	r3, [pc, #284]	; (1ac98 <xQueueGenericSendFromISR+0x20c>)
   1ab7c:	4798      	blx	r3
   1ab7e:	0003      	movs	r3, r0
   1ab80:	b2d9      	uxtb	r1, r3
   1ab82:	69bb      	ldr	r3, [r7, #24]
   1ab84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ab86:	b2db      	uxtb	r3, r3
   1ab88:	3301      	adds	r3, #1
   1ab8a:	b2db      	uxtb	r3, r3
   1ab8c:	001a      	movs	r2, r3
   1ab8e:	0020      	movs	r0, r4
   1ab90:	4b43      	ldr	r3, [pc, #268]	; (1aca0 <xQueueGenericSendFromISR+0x214>)
   1ab92:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1ab94:	683a      	ldr	r2, [r7, #0]
   1ab96:	68b9      	ldr	r1, [r7, #8]
   1ab98:	69bb      	ldr	r3, [r7, #24]
   1ab9a:	0018      	movs	r0, r3
   1ab9c:	4b41      	ldr	r3, [pc, #260]	; (1aca4 <xQueueGenericSendFromISR+0x218>)
   1ab9e:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1aba0:	2313      	movs	r3, #19
   1aba2:	18fb      	adds	r3, r7, r3
   1aba4:	781b      	ldrb	r3, [r3, #0]
   1aba6:	b25b      	sxtb	r3, r3
   1aba8:	3301      	adds	r3, #1
   1abaa:	d124      	bne.n	1abf6 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1abac:	69bb      	ldr	r3, [r7, #24]
   1abae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1abb0:	2b00      	cmp	r3, #0
   1abb2:	d00e      	beq.n	1abd2 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1abb4:	683a      	ldr	r2, [r7, #0]
   1abb6:	69bb      	ldr	r3, [r7, #24]
   1abb8:	0011      	movs	r1, r2
   1abba:	0018      	movs	r0, r3
   1abbc:	4b3a      	ldr	r3, [pc, #232]	; (1aca8 <xQueueGenericSendFromISR+0x21c>)
   1abbe:	4798      	blx	r3
   1abc0:	1e03      	subs	r3, r0, #0
   1abc2:	d021      	beq.n	1ac08 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1abc4:	687b      	ldr	r3, [r7, #4]
   1abc6:	2b00      	cmp	r3, #0
   1abc8:	d01e      	beq.n	1ac08 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1abca:	687b      	ldr	r3, [r7, #4]
   1abcc:	2201      	movs	r2, #1
   1abce:	601a      	str	r2, [r3, #0]
   1abd0:	e01a      	b.n	1ac08 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1abd2:	69bb      	ldr	r3, [r7, #24]
   1abd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1abd6:	2b00      	cmp	r3, #0
   1abd8:	d016      	beq.n	1ac08 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1abda:	69bb      	ldr	r3, [r7, #24]
   1abdc:	3324      	adds	r3, #36	; 0x24
   1abde:	0018      	movs	r0, r3
   1abe0:	4b32      	ldr	r3, [pc, #200]	; (1acac <xQueueGenericSendFromISR+0x220>)
   1abe2:	4798      	blx	r3
   1abe4:	1e03      	subs	r3, r0, #0
   1abe6:	d00f      	beq.n	1ac08 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1abe8:	687b      	ldr	r3, [r7, #4]
   1abea:	2b00      	cmp	r3, #0
   1abec:	d00c      	beq.n	1ac08 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1abee:	687b      	ldr	r3, [r7, #4]
   1abf0:	2201      	movs	r2, #1
   1abf2:	601a      	str	r2, [r3, #0]
   1abf4:	e008      	b.n	1ac08 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1abf6:	2313      	movs	r3, #19
   1abf8:	18fb      	adds	r3, r7, r3
   1abfa:	781b      	ldrb	r3, [r3, #0]
   1abfc:	3301      	adds	r3, #1
   1abfe:	b2db      	uxtb	r3, r3
   1ac00:	b259      	sxtb	r1, r3
   1ac02:	69bb      	ldr	r3, [r7, #24]
   1ac04:	2245      	movs	r2, #69	; 0x45
   1ac06:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1ac08:	2301      	movs	r3, #1
   1ac0a:	61fb      	str	r3, [r7, #28]
		{
   1ac0c:	e030      	b.n	1ac70 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1ac0e:	69bb      	ldr	r3, [r7, #24]
   1ac10:	0018      	movs	r0, r3
   1ac12:	4b1d      	ldr	r3, [pc, #116]	; (1ac88 <xQueueGenericSendFromISR+0x1fc>)
   1ac14:	4798      	blx	r3
   1ac16:	0003      	movs	r3, r0
   1ac18:	001a      	movs	r2, r3
   1ac1a:	4b1c      	ldr	r3, [pc, #112]	; (1ac8c <xQueueGenericSendFromISR+0x200>)
   1ac1c:	881b      	ldrh	r3, [r3, #0]
   1ac1e:	4013      	ands	r3, r2
   1ac20:	b29b      	uxth	r3, r3
   1ac22:	2b00      	cmp	r3, #0
   1ac24:	d022      	beq.n	1ac6c <xQueueGenericSendFromISR+0x1e0>
   1ac26:	683b      	ldr	r3, [r7, #0]
   1ac28:	2b00      	cmp	r3, #0
   1ac2a:	d10b      	bne.n	1ac44 <xQueueGenericSendFromISR+0x1b8>
   1ac2c:	69bb      	ldr	r3, [r7, #24]
   1ac2e:	0018      	movs	r0, r3
   1ac30:	4b17      	ldr	r3, [pc, #92]	; (1ac90 <xQueueGenericSendFromISR+0x204>)
   1ac32:	4798      	blx	r3
   1ac34:	0003      	movs	r3, r0
   1ac36:	001a      	movs	r2, r3
   1ac38:	4b16      	ldr	r3, [pc, #88]	; (1ac94 <xQueueGenericSendFromISR+0x208>)
   1ac3a:	5c9b      	ldrb	r3, [r3, r2]
   1ac3c:	3358      	adds	r3, #88	; 0x58
   1ac3e:	b2db      	uxtb	r3, r3
   1ac40:	001d      	movs	r5, r3
   1ac42:	e000      	b.n	1ac46 <xQueueGenericSendFromISR+0x1ba>
   1ac44:	255d      	movs	r5, #93	; 0x5d
   1ac46:	69bb      	ldr	r3, [r7, #24]
   1ac48:	0018      	movs	r0, r3
   1ac4a:	4b11      	ldr	r3, [pc, #68]	; (1ac90 <xQueueGenericSendFromISR+0x204>)
   1ac4c:	4798      	blx	r3
   1ac4e:	0003      	movs	r3, r0
   1ac50:	001a      	movs	r2, r3
   1ac52:	4b10      	ldr	r3, [pc, #64]	; (1ac94 <xQueueGenericSendFromISR+0x208>)
   1ac54:	5c9c      	ldrb	r4, [r3, r2]
   1ac56:	69bb      	ldr	r3, [r7, #24]
   1ac58:	0018      	movs	r0, r3
   1ac5a:	4b0f      	ldr	r3, [pc, #60]	; (1ac98 <xQueueGenericSendFromISR+0x20c>)
   1ac5c:	4798      	blx	r3
   1ac5e:	0003      	movs	r3, r0
   1ac60:	b2db      	uxtb	r3, r3
   1ac62:	001a      	movs	r2, r3
   1ac64:	0021      	movs	r1, r4
   1ac66:	0028      	movs	r0, r5
   1ac68:	4b0c      	ldr	r3, [pc, #48]	; (1ac9c <xQueueGenericSendFromISR+0x210>)
   1ac6a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1ac6c:	2300      	movs	r3, #0
   1ac6e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1ac70:	697b      	ldr	r3, [r7, #20]
   1ac72:	0018      	movs	r0, r3
   1ac74:	4b0e      	ldr	r3, [pc, #56]	; (1acb0 <xQueueGenericSendFromISR+0x224>)
   1ac76:	4798      	blx	r3

	return xReturn;
   1ac78:	69fb      	ldr	r3, [r7, #28]
}
   1ac7a:	0018      	movs	r0, r3
   1ac7c:	46bd      	mov	sp, r7
   1ac7e:	b008      	add	sp, #32
   1ac80:	bdb0      	pop	{r4, r5, r7, pc}
   1ac82:	46c0      	nop			; (mov r8, r8)
   1ac84:	0001a0ed 	.word	0x0001a0ed
   1ac88:	00018159 	.word	0x00018159
   1ac8c:	20000110 	.word	0x20000110
   1ac90:	00018059 	.word	0x00018059
   1ac94:	20000104 	.word	0x20000104
   1ac98:	00018139 	.word	0x00018139
   1ac9c:	00018a91 	.word	0x00018a91
   1aca0:	000190ed 	.word	0x000190ed
   1aca4:	0001b865 	.word	0x0001b865
   1aca8:	0001bb69 	.word	0x0001bb69
   1acac:	0001c929 	.word	0x0001c929
   1acb0:	0001a0f9 	.word	0x0001a0f9

0001acb4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1acb4:	b580      	push	{r7, lr}
   1acb6:	b082      	sub	sp, #8
   1acb8:	af00      	add	r7, sp, #0
   1acba:	6078      	str	r0, [r7, #4]
   1acbc:	6039      	str	r1, [r7, #0]
   1acbe:	6839      	ldr	r1, [r7, #0]
   1acc0:	687b      	ldr	r3, [r7, #4]
   1acc2:	2200      	movs	r2, #0
   1acc4:	0018      	movs	r0, r3
   1acc6:	4b03      	ldr	r3, [pc, #12]	; (1acd4 <xQueueGiveFromISR+0x20>)
   1acc8:	4798      	blx	r3
   1acca:	0003      	movs	r3, r0
   1accc:	0018      	movs	r0, r3
   1acce:	46bd      	mov	sp, r7
   1acd0:	b002      	add	sp, #8
   1acd2:	bd80      	pop	{r7, pc}
   1acd4:	0001acd9 	.word	0x0001acd9

0001acd8 <MyWrapper>:
{
   1acd8:	b5b0      	push	{r4, r5, r7, lr}
   1acda:	b08a      	sub	sp, #40	; 0x28
   1acdc:	af00      	add	r7, sp, #0
   1acde:	60f8      	str	r0, [r7, #12]
   1ace0:	60b9      	str	r1, [r7, #8]
   1ace2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ace4:	68fb      	ldr	r3, [r7, #12]
   1ace6:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1ace8:	6a3b      	ldr	r3, [r7, #32]
   1acea:	2b00      	cmp	r3, #0
   1acec:	d101      	bne.n	1acf2 <MyWrapper+0x1a>
   1acee:	b672      	cpsid	i
   1acf0:	e7fe      	b.n	1acf0 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1acf2:	6a3b      	ldr	r3, [r7, #32]
   1acf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1acf6:	2b00      	cmp	r3, #0
   1acf8:	d001      	beq.n	1acfe <MyWrapper+0x26>
   1acfa:	b672      	cpsid	i
   1acfc:	e7fe      	b.n	1acfc <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1acfe:	6a3b      	ldr	r3, [r7, #32]
   1ad00:	681b      	ldr	r3, [r3, #0]
   1ad02:	2b00      	cmp	r3, #0
   1ad04:	d103      	bne.n	1ad0e <MyWrapper+0x36>
   1ad06:	6a3b      	ldr	r3, [r7, #32]
   1ad08:	685b      	ldr	r3, [r3, #4]
   1ad0a:	2b00      	cmp	r3, #0
   1ad0c:	d101      	bne.n	1ad12 <MyWrapper+0x3a>
   1ad0e:	2301      	movs	r3, #1
   1ad10:	e000      	b.n	1ad14 <MyWrapper+0x3c>
   1ad12:	2300      	movs	r3, #0
   1ad14:	2b00      	cmp	r3, #0
   1ad16:	d101      	bne.n	1ad1c <MyWrapper+0x44>
   1ad18:	b672      	cpsid	i
   1ad1a:	e7fe      	b.n	1ad1a <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1ad1c:	4b66      	ldr	r3, [pc, #408]	; (1aeb8 <MyWrapper+0x1e0>)
   1ad1e:	4798      	blx	r3
   1ad20:	0003      	movs	r3, r0
   1ad22:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1ad24:	6a3b      	ldr	r3, [r7, #32]
   1ad26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ad28:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1ad2a:	6a3b      	ldr	r3, [r7, #32]
   1ad2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1ad2e:	69bb      	ldr	r3, [r7, #24]
   1ad30:	429a      	cmp	r2, r3
   1ad32:	d800      	bhi.n	1ad36 <MyWrapper+0x5e>
   1ad34:	e085      	b.n	1ae42 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1ad36:	2317      	movs	r3, #23
   1ad38:	18fb      	adds	r3, r7, r3
   1ad3a:	6a3a      	ldr	r2, [r7, #32]
   1ad3c:	2145      	movs	r1, #69	; 0x45
   1ad3e:	5c52      	ldrb	r2, [r2, r1]
   1ad40:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1ad42:	6a3b      	ldr	r3, [r7, #32]
   1ad44:	0018      	movs	r0, r3
   1ad46:	4b5d      	ldr	r3, [pc, #372]	; (1aebc <MyWrapper+0x1e4>)
   1ad48:	4798      	blx	r3
   1ad4a:	0003      	movs	r3, r0
   1ad4c:	001a      	movs	r2, r3
   1ad4e:	4b5c      	ldr	r3, [pc, #368]	; (1aec0 <MyWrapper+0x1e8>)
   1ad50:	881b      	ldrh	r3, [r3, #0]
   1ad52:	4013      	ands	r3, r2
   1ad54:	b29b      	uxth	r3, r3
   1ad56:	2b00      	cmp	r3, #0
   1ad58:	d022      	beq.n	1ada0 <MyWrapper+0xc8>
   1ad5a:	687b      	ldr	r3, [r7, #4]
   1ad5c:	2b00      	cmp	r3, #0
   1ad5e:	d10b      	bne.n	1ad78 <MyWrapper+0xa0>
   1ad60:	6a3b      	ldr	r3, [r7, #32]
   1ad62:	0018      	movs	r0, r3
   1ad64:	4b57      	ldr	r3, [pc, #348]	; (1aec4 <MyWrapper+0x1ec>)
   1ad66:	4798      	blx	r3
   1ad68:	0003      	movs	r3, r0
   1ad6a:	001a      	movs	r2, r3
   1ad6c:	4b56      	ldr	r3, [pc, #344]	; (1aec8 <MyWrapper+0x1f0>)
   1ad6e:	5c9b      	ldrb	r3, [r3, r2]
   1ad70:	3330      	adds	r3, #48	; 0x30
   1ad72:	b2db      	uxtb	r3, r3
   1ad74:	001d      	movs	r5, r3
   1ad76:	e000      	b.n	1ad7a <MyWrapper+0xa2>
   1ad78:	2535      	movs	r5, #53	; 0x35
   1ad7a:	6a3b      	ldr	r3, [r7, #32]
   1ad7c:	0018      	movs	r0, r3
   1ad7e:	4b51      	ldr	r3, [pc, #324]	; (1aec4 <MyWrapper+0x1ec>)
   1ad80:	4798      	blx	r3
   1ad82:	0003      	movs	r3, r0
   1ad84:	001a      	movs	r2, r3
   1ad86:	4b50      	ldr	r3, [pc, #320]	; (1aec8 <MyWrapper+0x1f0>)
   1ad88:	5c9c      	ldrb	r4, [r3, r2]
   1ad8a:	6a3b      	ldr	r3, [r7, #32]
   1ad8c:	0018      	movs	r0, r3
   1ad8e:	4b4f      	ldr	r3, [pc, #316]	; (1aecc <MyWrapper+0x1f4>)
   1ad90:	4798      	blx	r3
   1ad92:	0003      	movs	r3, r0
   1ad94:	b2db      	uxtb	r3, r3
   1ad96:	001a      	movs	r2, r3
   1ad98:	0021      	movs	r1, r4
   1ad9a:	0028      	movs	r0, r5
   1ad9c:	4b4c      	ldr	r3, [pc, #304]	; (1aed0 <MyWrapper+0x1f8>)
   1ad9e:	4798      	blx	r3
   1ada0:	6a3b      	ldr	r3, [r7, #32]
   1ada2:	0018      	movs	r0, r3
   1ada4:	4b47      	ldr	r3, [pc, #284]	; (1aec4 <MyWrapper+0x1ec>)
   1ada6:	4798      	blx	r3
   1ada8:	0003      	movs	r3, r0
   1adaa:	001a      	movs	r2, r3
   1adac:	4b46      	ldr	r3, [pc, #280]	; (1aec8 <MyWrapper+0x1f0>)
   1adae:	5c9c      	ldrb	r4, [r3, r2]
   1adb0:	6a3b      	ldr	r3, [r7, #32]
   1adb2:	0018      	movs	r0, r3
   1adb4:	4b45      	ldr	r3, [pc, #276]	; (1aecc <MyWrapper+0x1f4>)
   1adb6:	4798      	blx	r3
   1adb8:	0003      	movs	r3, r0
   1adba:	b2d9      	uxtb	r1, r3
   1adbc:	6a3b      	ldr	r3, [r7, #32]
   1adbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1adc0:	b2db      	uxtb	r3, r3
   1adc2:	3301      	adds	r3, #1
   1adc4:	b2db      	uxtb	r3, r3
   1adc6:	001a      	movs	r2, r3
   1adc8:	0020      	movs	r0, r4
   1adca:	4b42      	ldr	r3, [pc, #264]	; (1aed4 <MyWrapper+0x1fc>)
   1adcc:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1adce:	69bb      	ldr	r3, [r7, #24]
   1add0:	1c5a      	adds	r2, r3, #1
   1add2:	6a3b      	ldr	r3, [r7, #32]
   1add4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1add6:	2317      	movs	r3, #23
   1add8:	18fb      	adds	r3, r7, r3
   1adda:	781b      	ldrb	r3, [r3, #0]
   1addc:	b25b      	sxtb	r3, r3
   1adde:	3301      	adds	r3, #1
   1ade0:	d123      	bne.n	1ae2a <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1ade2:	6a3b      	ldr	r3, [r7, #32]
   1ade4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ade6:	2b00      	cmp	r3, #0
   1ade8:	d00d      	beq.n	1ae06 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1adea:	6a3b      	ldr	r3, [r7, #32]
   1adec:	2100      	movs	r1, #0
   1adee:	0018      	movs	r0, r3
   1adf0:	4b39      	ldr	r3, [pc, #228]	; (1aed8 <MyWrapper+0x200>)
   1adf2:	4798      	blx	r3
   1adf4:	1e03      	subs	r3, r0, #0
   1adf6:	d021      	beq.n	1ae3c <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1adf8:	68bb      	ldr	r3, [r7, #8]
   1adfa:	2b00      	cmp	r3, #0
   1adfc:	d01e      	beq.n	1ae3c <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1adfe:	68bb      	ldr	r3, [r7, #8]
   1ae00:	2201      	movs	r2, #1
   1ae02:	601a      	str	r2, [r3, #0]
   1ae04:	e01a      	b.n	1ae3c <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1ae06:	6a3b      	ldr	r3, [r7, #32]
   1ae08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ae0a:	2b00      	cmp	r3, #0
   1ae0c:	d016      	beq.n	1ae3c <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ae0e:	6a3b      	ldr	r3, [r7, #32]
   1ae10:	3324      	adds	r3, #36	; 0x24
   1ae12:	0018      	movs	r0, r3
   1ae14:	4b31      	ldr	r3, [pc, #196]	; (1aedc <MyWrapper+0x204>)
   1ae16:	4798      	blx	r3
   1ae18:	1e03      	subs	r3, r0, #0
   1ae1a:	d00f      	beq.n	1ae3c <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1ae1c:	68bb      	ldr	r3, [r7, #8]
   1ae1e:	2b00      	cmp	r3, #0
   1ae20:	d00c      	beq.n	1ae3c <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1ae22:	68bb      	ldr	r3, [r7, #8]
   1ae24:	2201      	movs	r2, #1
   1ae26:	601a      	str	r2, [r3, #0]
   1ae28:	e008      	b.n	1ae3c <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1ae2a:	2317      	movs	r3, #23
   1ae2c:	18fb      	adds	r3, r7, r3
   1ae2e:	781b      	ldrb	r3, [r3, #0]
   1ae30:	3301      	adds	r3, #1
   1ae32:	b2db      	uxtb	r3, r3
   1ae34:	b259      	sxtb	r1, r3
   1ae36:	6a3b      	ldr	r3, [r7, #32]
   1ae38:	2245      	movs	r2, #69	; 0x45
   1ae3a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1ae3c:	2301      	movs	r3, #1
   1ae3e:	627b      	str	r3, [r7, #36]	; 0x24
   1ae40:	e030      	b.n	1aea4 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1ae42:	6a3b      	ldr	r3, [r7, #32]
   1ae44:	0018      	movs	r0, r3
   1ae46:	4b1d      	ldr	r3, [pc, #116]	; (1aebc <MyWrapper+0x1e4>)
   1ae48:	4798      	blx	r3
   1ae4a:	0003      	movs	r3, r0
   1ae4c:	001a      	movs	r2, r3
   1ae4e:	4b1c      	ldr	r3, [pc, #112]	; (1aec0 <MyWrapper+0x1e8>)
   1ae50:	881b      	ldrh	r3, [r3, #0]
   1ae52:	4013      	ands	r3, r2
   1ae54:	b29b      	uxth	r3, r3
   1ae56:	2b00      	cmp	r3, #0
   1ae58:	d022      	beq.n	1aea0 <MyWrapper+0x1c8>
   1ae5a:	687b      	ldr	r3, [r7, #4]
   1ae5c:	2b00      	cmp	r3, #0
   1ae5e:	d10b      	bne.n	1ae78 <MyWrapper+0x1a0>
   1ae60:	6a3b      	ldr	r3, [r7, #32]
   1ae62:	0018      	movs	r0, r3
   1ae64:	4b17      	ldr	r3, [pc, #92]	; (1aec4 <MyWrapper+0x1ec>)
   1ae66:	4798      	blx	r3
   1ae68:	0003      	movs	r3, r0
   1ae6a:	001a      	movs	r2, r3
   1ae6c:	4b16      	ldr	r3, [pc, #88]	; (1aec8 <MyWrapper+0x1f0>)
   1ae6e:	5c9b      	ldrb	r3, [r3, r2]
   1ae70:	3358      	adds	r3, #88	; 0x58
   1ae72:	b2db      	uxtb	r3, r3
   1ae74:	001d      	movs	r5, r3
   1ae76:	e000      	b.n	1ae7a <MyWrapper+0x1a2>
   1ae78:	255d      	movs	r5, #93	; 0x5d
   1ae7a:	6a3b      	ldr	r3, [r7, #32]
   1ae7c:	0018      	movs	r0, r3
   1ae7e:	4b11      	ldr	r3, [pc, #68]	; (1aec4 <MyWrapper+0x1ec>)
   1ae80:	4798      	blx	r3
   1ae82:	0003      	movs	r3, r0
   1ae84:	001a      	movs	r2, r3
   1ae86:	4b10      	ldr	r3, [pc, #64]	; (1aec8 <MyWrapper+0x1f0>)
   1ae88:	5c9c      	ldrb	r4, [r3, r2]
   1ae8a:	6a3b      	ldr	r3, [r7, #32]
   1ae8c:	0018      	movs	r0, r3
   1ae8e:	4b0f      	ldr	r3, [pc, #60]	; (1aecc <MyWrapper+0x1f4>)
   1ae90:	4798      	blx	r3
   1ae92:	0003      	movs	r3, r0
   1ae94:	b2db      	uxtb	r3, r3
   1ae96:	001a      	movs	r2, r3
   1ae98:	0021      	movs	r1, r4
   1ae9a:	0028      	movs	r0, r5
   1ae9c:	4b0c      	ldr	r3, [pc, #48]	; (1aed0 <MyWrapper+0x1f8>)
   1ae9e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1aea0:	2300      	movs	r3, #0
   1aea2:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1aea4:	69fb      	ldr	r3, [r7, #28]
   1aea6:	0018      	movs	r0, r3
   1aea8:	4b0d      	ldr	r3, [pc, #52]	; (1aee0 <MyWrapper+0x208>)
   1aeaa:	4798      	blx	r3

	return xReturn;
   1aeac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1aeae:	0018      	movs	r0, r3
   1aeb0:	46bd      	mov	sp, r7
   1aeb2:	b00a      	add	sp, #40	; 0x28
   1aeb4:	bdb0      	pop	{r4, r5, r7, pc}
   1aeb6:	46c0      	nop			; (mov r8, r8)
   1aeb8:	0001a0ed 	.word	0x0001a0ed
   1aebc:	00018159 	.word	0x00018159
   1aec0:	20000110 	.word	0x20000110
   1aec4:	00018059 	.word	0x00018059
   1aec8:	20000104 	.word	0x20000104
   1aecc:	00018139 	.word	0x00018139
   1aed0:	00018a91 	.word	0x00018a91
   1aed4:	000190ed 	.word	0x000190ed
   1aed8:	0001bb69 	.word	0x0001bb69
   1aedc:	0001c929 	.word	0x0001c929
   1aee0:	0001a0f9 	.word	0x0001a0f9

0001aee4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1aee4:	b5b0      	push	{r4, r5, r7, lr}
   1aee6:	b08a      	sub	sp, #40	; 0x28
   1aee8:	af00      	add	r7, sp, #0
   1aeea:	60f8      	str	r0, [r7, #12]
   1aeec:	60b9      	str	r1, [r7, #8]
   1aeee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1aef0:	2300      	movs	r3, #0
   1aef2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1aef4:	68fb      	ldr	r3, [r7, #12]
   1aef6:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1aef8:	6a3b      	ldr	r3, [r7, #32]
   1aefa:	2b00      	cmp	r3, #0
   1aefc:	d101      	bne.n	1af02 <xQueueReceive+0x1e>
   1aefe:	b672      	cpsid	i
   1af00:	e7fe      	b.n	1af00 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1af02:	68bb      	ldr	r3, [r7, #8]
   1af04:	2b00      	cmp	r3, #0
   1af06:	d103      	bne.n	1af10 <xQueueReceive+0x2c>
   1af08:	6a3b      	ldr	r3, [r7, #32]
   1af0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1af0c:	2b00      	cmp	r3, #0
   1af0e:	d101      	bne.n	1af14 <xQueueReceive+0x30>
   1af10:	2301      	movs	r3, #1
   1af12:	e000      	b.n	1af16 <xQueueReceive+0x32>
   1af14:	2300      	movs	r3, #0
   1af16:	2b00      	cmp	r3, #0
   1af18:	d101      	bne.n	1af1e <xQueueReceive+0x3a>
   1af1a:	b672      	cpsid	i
   1af1c:	e7fe      	b.n	1af1c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1af1e:	4bbf      	ldr	r3, [pc, #764]	; (1b21c <xQueueReceive+0x338>)
   1af20:	4798      	blx	r3
   1af22:	1e03      	subs	r3, r0, #0
   1af24:	d102      	bne.n	1af2c <xQueueReceive+0x48>
   1af26:	687b      	ldr	r3, [r7, #4]
   1af28:	2b00      	cmp	r3, #0
   1af2a:	d101      	bne.n	1af30 <xQueueReceive+0x4c>
   1af2c:	2301      	movs	r3, #1
   1af2e:	e000      	b.n	1af32 <xQueueReceive+0x4e>
   1af30:	2300      	movs	r3, #0
   1af32:	2b00      	cmp	r3, #0
   1af34:	d101      	bne.n	1af3a <xQueueReceive+0x56>
   1af36:	b672      	cpsid	i
   1af38:	e7fe      	b.n	1af38 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1af3a:	4bb9      	ldr	r3, [pc, #740]	; (1b220 <xQueueReceive+0x33c>)
   1af3c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1af3e:	6a3b      	ldr	r3, [r7, #32]
   1af40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1af42:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1af44:	69fb      	ldr	r3, [r7, #28]
   1af46:	2b00      	cmp	r3, #0
   1af48:	d100      	bne.n	1af4c <xQueueReceive+0x68>
   1af4a:	e07d      	b.n	1b048 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1af4c:	68ba      	ldr	r2, [r7, #8]
   1af4e:	6a3b      	ldr	r3, [r7, #32]
   1af50:	0011      	movs	r1, r2
   1af52:	0018      	movs	r0, r3
   1af54:	4bb3      	ldr	r3, [pc, #716]	; (1b224 <xQueueReceive+0x340>)
   1af56:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1af58:	4bb3      	ldr	r3, [pc, #716]	; (1b228 <xQueueReceive+0x344>)
   1af5a:	4798      	blx	r3
   1af5c:	0003      	movs	r3, r0
   1af5e:	0018      	movs	r0, r3
   1af60:	4bb2      	ldr	r3, [pc, #712]	; (1b22c <xQueueReceive+0x348>)
   1af62:	4798      	blx	r3
   1af64:	0003      	movs	r3, r0
   1af66:	001a      	movs	r2, r3
   1af68:	4bb1      	ldr	r3, [pc, #708]	; (1b230 <xQueueReceive+0x34c>)
   1af6a:	881b      	ldrh	r3, [r3, #0]
   1af6c:	4013      	ands	r3, r2
   1af6e:	b29b      	uxth	r3, r3
   1af70:	2b00      	cmp	r3, #0
   1af72:	d029      	beq.n	1afc8 <xQueueReceive+0xe4>
   1af74:	6a3b      	ldr	r3, [r7, #32]
   1af76:	0018      	movs	r0, r3
   1af78:	4bae      	ldr	r3, [pc, #696]	; (1b234 <xQueueReceive+0x350>)
   1af7a:	4798      	blx	r3
   1af7c:	0003      	movs	r3, r0
   1af7e:	001a      	movs	r2, r3
   1af80:	4bab      	ldr	r3, [pc, #684]	; (1b230 <xQueueReceive+0x34c>)
   1af82:	881b      	ldrh	r3, [r3, #0]
   1af84:	4013      	ands	r3, r2
   1af86:	b29b      	uxth	r3, r3
   1af88:	2b00      	cmp	r3, #0
   1af8a:	d01d      	beq.n	1afc8 <xQueueReceive+0xe4>
   1af8c:	6a3b      	ldr	r3, [r7, #32]
   1af8e:	0018      	movs	r0, r3
   1af90:	4ba9      	ldr	r3, [pc, #676]	; (1b238 <xQueueReceive+0x354>)
   1af92:	4798      	blx	r3
   1af94:	0003      	movs	r3, r0
   1af96:	001a      	movs	r2, r3
   1af98:	4ba8      	ldr	r3, [pc, #672]	; (1b23c <xQueueReceive+0x358>)
   1af9a:	5c9b      	ldrb	r3, [r3, r2]
   1af9c:	3328      	adds	r3, #40	; 0x28
   1af9e:	b2db      	uxtb	r3, r3
   1afa0:	001d      	movs	r5, r3
   1afa2:	6a3b      	ldr	r3, [r7, #32]
   1afa4:	0018      	movs	r0, r3
   1afa6:	4ba4      	ldr	r3, [pc, #656]	; (1b238 <xQueueReceive+0x354>)
   1afa8:	4798      	blx	r3
   1afaa:	0003      	movs	r3, r0
   1afac:	001a      	movs	r2, r3
   1afae:	4ba3      	ldr	r3, [pc, #652]	; (1b23c <xQueueReceive+0x358>)
   1afb0:	5c9c      	ldrb	r4, [r3, r2]
   1afb2:	6a3b      	ldr	r3, [r7, #32]
   1afb4:	0018      	movs	r0, r3
   1afb6:	4ba2      	ldr	r3, [pc, #648]	; (1b240 <xQueueReceive+0x35c>)
   1afb8:	4798      	blx	r3
   1afba:	0003      	movs	r3, r0
   1afbc:	b2db      	uxtb	r3, r3
   1afbe:	001a      	movs	r2, r3
   1afc0:	0021      	movs	r1, r4
   1afc2:	0028      	movs	r0, r5
   1afc4:	4b9f      	ldr	r3, [pc, #636]	; (1b244 <xQueueReceive+0x360>)
   1afc6:	4798      	blx	r3
   1afc8:	6a3b      	ldr	r3, [r7, #32]
   1afca:	0018      	movs	r0, r3
   1afcc:	4b9a      	ldr	r3, [pc, #616]	; (1b238 <xQueueReceive+0x354>)
   1afce:	4798      	blx	r3
   1afd0:	0003      	movs	r3, r0
   1afd2:	001a      	movs	r2, r3
   1afd4:	4b99      	ldr	r3, [pc, #612]	; (1b23c <xQueueReceive+0x358>)
   1afd6:	5c9c      	ldrb	r4, [r3, r2]
   1afd8:	6a3b      	ldr	r3, [r7, #32]
   1afda:	0018      	movs	r0, r3
   1afdc:	4b98      	ldr	r3, [pc, #608]	; (1b240 <xQueueReceive+0x35c>)
   1afde:	4798      	blx	r3
   1afe0:	0003      	movs	r3, r0
   1afe2:	b2dd      	uxtb	r5, r3
   1afe4:	6a3b      	ldr	r3, [r7, #32]
   1afe6:	0018      	movs	r0, r3
   1afe8:	4b93      	ldr	r3, [pc, #588]	; (1b238 <xQueueReceive+0x354>)
   1afea:	4798      	blx	r3
   1afec:	0003      	movs	r3, r0
   1afee:	001a      	movs	r2, r3
   1aff0:	4b92      	ldr	r3, [pc, #584]	; (1b23c <xQueueReceive+0x358>)
   1aff2:	5c9b      	ldrb	r3, [r3, r2]
   1aff4:	2b02      	cmp	r3, #2
   1aff6:	d108      	bne.n	1b00a <xQueueReceive+0x126>
   1aff8:	4b8b      	ldr	r3, [pc, #556]	; (1b228 <xQueueReceive+0x344>)
   1affa:	4798      	blx	r3
   1affc:	0003      	movs	r3, r0
   1affe:	0018      	movs	r0, r3
   1b000:	4b91      	ldr	r3, [pc, #580]	; (1b248 <xQueueReceive+0x364>)
   1b002:	4798      	blx	r3
   1b004:	0003      	movs	r3, r0
   1b006:	b2db      	uxtb	r3, r3
   1b008:	e004      	b.n	1b014 <xQueueReceive+0x130>
   1b00a:	6a3b      	ldr	r3, [r7, #32]
   1b00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b00e:	b2db      	uxtb	r3, r3
   1b010:	3b01      	subs	r3, #1
   1b012:	b2db      	uxtb	r3, r3
   1b014:	001a      	movs	r2, r3
   1b016:	0029      	movs	r1, r5
   1b018:	0020      	movs	r0, r4
   1b01a:	4b8c      	ldr	r3, [pc, #560]	; (1b24c <xQueueReceive+0x368>)
   1b01c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1b01e:	69fb      	ldr	r3, [r7, #28]
   1b020:	1e5a      	subs	r2, r3, #1
   1b022:	6a3b      	ldr	r3, [r7, #32]
   1b024:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b026:	6a3b      	ldr	r3, [r7, #32]
   1b028:	691b      	ldr	r3, [r3, #16]
   1b02a:	2b00      	cmp	r3, #0
   1b02c:	d008      	beq.n	1b040 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b02e:	6a3b      	ldr	r3, [r7, #32]
   1b030:	3310      	adds	r3, #16
   1b032:	0018      	movs	r0, r3
   1b034:	4b86      	ldr	r3, [pc, #536]	; (1b250 <xQueueReceive+0x36c>)
   1b036:	4798      	blx	r3
   1b038:	1e03      	subs	r3, r0, #0
   1b03a:	d001      	beq.n	1b040 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1b03c:	4b85      	ldr	r3, [pc, #532]	; (1b254 <xQueueReceive+0x370>)
   1b03e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1b040:	4b85      	ldr	r3, [pc, #532]	; (1b258 <xQueueReceive+0x374>)
   1b042:	4798      	blx	r3
				return pdPASS;
   1b044:	2301      	movs	r3, #1
   1b046:	e15f      	b.n	1b308 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b048:	687b      	ldr	r3, [r7, #4]
   1b04a:	2b00      	cmp	r3, #0
   1b04c:	d13b      	bne.n	1b0c6 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1b04e:	4b82      	ldr	r3, [pc, #520]	; (1b258 <xQueueReceive+0x374>)
   1b050:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b052:	4b75      	ldr	r3, [pc, #468]	; (1b228 <xQueueReceive+0x344>)
   1b054:	4798      	blx	r3
   1b056:	0003      	movs	r3, r0
   1b058:	0018      	movs	r0, r3
   1b05a:	4b74      	ldr	r3, [pc, #464]	; (1b22c <xQueueReceive+0x348>)
   1b05c:	4798      	blx	r3
   1b05e:	0003      	movs	r3, r0
   1b060:	001a      	movs	r2, r3
   1b062:	4b73      	ldr	r3, [pc, #460]	; (1b230 <xQueueReceive+0x34c>)
   1b064:	881b      	ldrh	r3, [r3, #0]
   1b066:	4013      	ands	r3, r2
   1b068:	b29b      	uxth	r3, r3
   1b06a:	2b00      	cmp	r3, #0
   1b06c:	d029      	beq.n	1b0c2 <xQueueReceive+0x1de>
   1b06e:	6a3b      	ldr	r3, [r7, #32]
   1b070:	0018      	movs	r0, r3
   1b072:	4b70      	ldr	r3, [pc, #448]	; (1b234 <xQueueReceive+0x350>)
   1b074:	4798      	blx	r3
   1b076:	0003      	movs	r3, r0
   1b078:	001a      	movs	r2, r3
   1b07a:	4b6d      	ldr	r3, [pc, #436]	; (1b230 <xQueueReceive+0x34c>)
   1b07c:	881b      	ldrh	r3, [r3, #0]
   1b07e:	4013      	ands	r3, r2
   1b080:	b29b      	uxth	r3, r3
   1b082:	2b00      	cmp	r3, #0
   1b084:	d01d      	beq.n	1b0c2 <xQueueReceive+0x1de>
   1b086:	6a3b      	ldr	r3, [r7, #32]
   1b088:	0018      	movs	r0, r3
   1b08a:	4b6b      	ldr	r3, [pc, #428]	; (1b238 <xQueueReceive+0x354>)
   1b08c:	4798      	blx	r3
   1b08e:	0003      	movs	r3, r0
   1b090:	001a      	movs	r2, r3
   1b092:	4b6a      	ldr	r3, [pc, #424]	; (1b23c <xQueueReceive+0x358>)
   1b094:	5c9b      	ldrb	r3, [r3, r2]
   1b096:	3350      	adds	r3, #80	; 0x50
   1b098:	b2db      	uxtb	r3, r3
   1b09a:	001d      	movs	r5, r3
   1b09c:	6a3b      	ldr	r3, [r7, #32]
   1b09e:	0018      	movs	r0, r3
   1b0a0:	4b65      	ldr	r3, [pc, #404]	; (1b238 <xQueueReceive+0x354>)
   1b0a2:	4798      	blx	r3
   1b0a4:	0003      	movs	r3, r0
   1b0a6:	001a      	movs	r2, r3
   1b0a8:	4b64      	ldr	r3, [pc, #400]	; (1b23c <xQueueReceive+0x358>)
   1b0aa:	5c9c      	ldrb	r4, [r3, r2]
   1b0ac:	6a3b      	ldr	r3, [r7, #32]
   1b0ae:	0018      	movs	r0, r3
   1b0b0:	4b63      	ldr	r3, [pc, #396]	; (1b240 <xQueueReceive+0x35c>)
   1b0b2:	4798      	blx	r3
   1b0b4:	0003      	movs	r3, r0
   1b0b6:	b2db      	uxtb	r3, r3
   1b0b8:	001a      	movs	r2, r3
   1b0ba:	0021      	movs	r1, r4
   1b0bc:	0028      	movs	r0, r5
   1b0be:	4b61      	ldr	r3, [pc, #388]	; (1b244 <xQueueReceive+0x360>)
   1b0c0:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1b0c2:	2300      	movs	r3, #0
   1b0c4:	e120      	b.n	1b308 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b0c8:	2b00      	cmp	r3, #0
   1b0ca:	d106      	bne.n	1b0da <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b0cc:	2314      	movs	r3, #20
   1b0ce:	18fb      	adds	r3, r7, r3
   1b0d0:	0018      	movs	r0, r3
   1b0d2:	4b62      	ldr	r3, [pc, #392]	; (1b25c <xQueueReceive+0x378>)
   1b0d4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b0d6:	2301      	movs	r3, #1
   1b0d8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b0da:	4b5f      	ldr	r3, [pc, #380]	; (1b258 <xQueueReceive+0x374>)
   1b0dc:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b0de:	4b60      	ldr	r3, [pc, #384]	; (1b260 <xQueueReceive+0x37c>)
   1b0e0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b0e2:	4b4f      	ldr	r3, [pc, #316]	; (1b220 <xQueueReceive+0x33c>)
   1b0e4:	4798      	blx	r3
   1b0e6:	6a3b      	ldr	r3, [r7, #32]
   1b0e8:	2244      	movs	r2, #68	; 0x44
   1b0ea:	5c9b      	ldrb	r3, [r3, r2]
   1b0ec:	b25b      	sxtb	r3, r3
   1b0ee:	3301      	adds	r3, #1
   1b0f0:	d103      	bne.n	1b0fa <xQueueReceive+0x216>
   1b0f2:	6a3b      	ldr	r3, [r7, #32]
   1b0f4:	2244      	movs	r2, #68	; 0x44
   1b0f6:	2100      	movs	r1, #0
   1b0f8:	5499      	strb	r1, [r3, r2]
   1b0fa:	6a3b      	ldr	r3, [r7, #32]
   1b0fc:	2245      	movs	r2, #69	; 0x45
   1b0fe:	5c9b      	ldrb	r3, [r3, r2]
   1b100:	b25b      	sxtb	r3, r3
   1b102:	3301      	adds	r3, #1
   1b104:	d103      	bne.n	1b10e <xQueueReceive+0x22a>
   1b106:	6a3b      	ldr	r3, [r7, #32]
   1b108:	2245      	movs	r2, #69	; 0x45
   1b10a:	2100      	movs	r1, #0
   1b10c:	5499      	strb	r1, [r3, r2]
   1b10e:	4b52      	ldr	r3, [pc, #328]	; (1b258 <xQueueReceive+0x374>)
   1b110:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b112:	1d3a      	adds	r2, r7, #4
   1b114:	2314      	movs	r3, #20
   1b116:	18fb      	adds	r3, r7, r3
   1b118:	0011      	movs	r1, r2
   1b11a:	0018      	movs	r0, r3
   1b11c:	4b51      	ldr	r3, [pc, #324]	; (1b264 <xQueueReceive+0x380>)
   1b11e:	4798      	blx	r3
   1b120:	1e03      	subs	r3, r0, #0
   1b122:	d000      	beq.n	1b126 <xQueueReceive+0x242>
   1b124:	e0aa      	b.n	1b27c <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b126:	6a3b      	ldr	r3, [r7, #32]
   1b128:	0018      	movs	r0, r3
   1b12a:	4b4f      	ldr	r3, [pc, #316]	; (1b268 <xQueueReceive+0x384>)
   1b12c:	4798      	blx	r3
   1b12e:	1e03      	subs	r3, r0, #0
   1b130:	d06d      	beq.n	1b20e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1b132:	4b3d      	ldr	r3, [pc, #244]	; (1b228 <xQueueReceive+0x344>)
   1b134:	4798      	blx	r3
   1b136:	0003      	movs	r3, r0
   1b138:	0018      	movs	r0, r3
   1b13a:	4b3c      	ldr	r3, [pc, #240]	; (1b22c <xQueueReceive+0x348>)
   1b13c:	4798      	blx	r3
   1b13e:	0003      	movs	r3, r0
   1b140:	001a      	movs	r2, r3
   1b142:	4b3b      	ldr	r3, [pc, #236]	; (1b230 <xQueueReceive+0x34c>)
   1b144:	881b      	ldrh	r3, [r3, #0]
   1b146:	4013      	ands	r3, r2
   1b148:	b29b      	uxth	r3, r3
   1b14a:	2b00      	cmp	r3, #0
   1b14c:	d029      	beq.n	1b1a2 <xQueueReceive+0x2be>
   1b14e:	6a3b      	ldr	r3, [r7, #32]
   1b150:	0018      	movs	r0, r3
   1b152:	4b38      	ldr	r3, [pc, #224]	; (1b234 <xQueueReceive+0x350>)
   1b154:	4798      	blx	r3
   1b156:	0003      	movs	r3, r0
   1b158:	001a      	movs	r2, r3
   1b15a:	4b35      	ldr	r3, [pc, #212]	; (1b230 <xQueueReceive+0x34c>)
   1b15c:	881b      	ldrh	r3, [r3, #0]
   1b15e:	4013      	ands	r3, r2
   1b160:	b29b      	uxth	r3, r3
   1b162:	2b00      	cmp	r3, #0
   1b164:	d01d      	beq.n	1b1a2 <xQueueReceive+0x2be>
   1b166:	6a3b      	ldr	r3, [r7, #32]
   1b168:	0018      	movs	r0, r3
   1b16a:	4b33      	ldr	r3, [pc, #204]	; (1b238 <xQueueReceive+0x354>)
   1b16c:	4798      	blx	r3
   1b16e:	0003      	movs	r3, r0
   1b170:	001a      	movs	r2, r3
   1b172:	4b32      	ldr	r3, [pc, #200]	; (1b23c <xQueueReceive+0x358>)
   1b174:	5c9b      	ldrb	r3, [r3, r2]
   1b176:	3368      	adds	r3, #104	; 0x68
   1b178:	b2db      	uxtb	r3, r3
   1b17a:	001d      	movs	r5, r3
   1b17c:	6a3b      	ldr	r3, [r7, #32]
   1b17e:	0018      	movs	r0, r3
   1b180:	4b2d      	ldr	r3, [pc, #180]	; (1b238 <xQueueReceive+0x354>)
   1b182:	4798      	blx	r3
   1b184:	0003      	movs	r3, r0
   1b186:	001a      	movs	r2, r3
   1b188:	4b2c      	ldr	r3, [pc, #176]	; (1b23c <xQueueReceive+0x358>)
   1b18a:	5c9c      	ldrb	r4, [r3, r2]
   1b18c:	6a3b      	ldr	r3, [r7, #32]
   1b18e:	0018      	movs	r0, r3
   1b190:	4b2b      	ldr	r3, [pc, #172]	; (1b240 <xQueueReceive+0x35c>)
   1b192:	4798      	blx	r3
   1b194:	0003      	movs	r3, r0
   1b196:	b2db      	uxtb	r3, r3
   1b198:	001a      	movs	r2, r3
   1b19a:	0021      	movs	r1, r4
   1b19c:	0028      	movs	r0, r5
   1b19e:	4b29      	ldr	r3, [pc, #164]	; (1b244 <xQueueReceive+0x360>)
   1b1a0:	4798      	blx	r3
   1b1a2:	6a3b      	ldr	r3, [r7, #32]
   1b1a4:	0018      	movs	r0, r3
   1b1a6:	4b24      	ldr	r3, [pc, #144]	; (1b238 <xQueueReceive+0x354>)
   1b1a8:	4798      	blx	r3
   1b1aa:	0003      	movs	r3, r0
   1b1ac:	001a      	movs	r2, r3
   1b1ae:	4b23      	ldr	r3, [pc, #140]	; (1b23c <xQueueReceive+0x358>)
   1b1b0:	5c9b      	ldrb	r3, [r3, r2]
   1b1b2:	2b02      	cmp	r3, #2
   1b1b4:	d018      	beq.n	1b1e8 <xQueueReceive+0x304>
   1b1b6:	4b1c      	ldr	r3, [pc, #112]	; (1b228 <xQueueReceive+0x344>)
   1b1b8:	4798      	blx	r3
   1b1ba:	0003      	movs	r3, r0
   1b1bc:	0018      	movs	r0, r3
   1b1be:	4b1b      	ldr	r3, [pc, #108]	; (1b22c <xQueueReceive+0x348>)
   1b1c0:	4798      	blx	r3
   1b1c2:	0003      	movs	r3, r0
   1b1c4:	001a      	movs	r2, r3
   1b1c6:	4b1a      	ldr	r3, [pc, #104]	; (1b230 <xQueueReceive+0x34c>)
   1b1c8:	881b      	ldrh	r3, [r3, #0]
   1b1ca:	4013      	ands	r3, r2
   1b1cc:	b29b      	uxth	r3, r3
   1b1ce:	2b00      	cmp	r3, #0
   1b1d0:	d00a      	beq.n	1b1e8 <xQueueReceive+0x304>
   1b1d2:	4b15      	ldr	r3, [pc, #84]	; (1b228 <xQueueReceive+0x344>)
   1b1d4:	4798      	blx	r3
   1b1d6:	0003      	movs	r3, r0
   1b1d8:	0018      	movs	r0, r3
   1b1da:	4b1b      	ldr	r3, [pc, #108]	; (1b248 <xQueueReceive+0x364>)
   1b1dc:	4798      	blx	r3
   1b1de:	0003      	movs	r3, r0
   1b1e0:	b2db      	uxtb	r3, r3
   1b1e2:	0018      	movs	r0, r3
   1b1e4:	4b21      	ldr	r3, [pc, #132]	; (1b26c <xQueueReceive+0x388>)
   1b1e6:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1b1e8:	6a3b      	ldr	r3, [r7, #32]
   1b1ea:	3324      	adds	r3, #36	; 0x24
   1b1ec:	687a      	ldr	r2, [r7, #4]
   1b1ee:	0011      	movs	r1, r2
   1b1f0:	0018      	movs	r0, r3
   1b1f2:	4b1f      	ldr	r3, [pc, #124]	; (1b270 <xQueueReceive+0x38c>)
   1b1f4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1b1f6:	6a3b      	ldr	r3, [r7, #32]
   1b1f8:	0018      	movs	r0, r3
   1b1fa:	4b1e      	ldr	r3, [pc, #120]	; (1b274 <xQueueReceive+0x390>)
   1b1fc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1b1fe:	4b1e      	ldr	r3, [pc, #120]	; (1b278 <xQueueReceive+0x394>)
   1b200:	4798      	blx	r3
   1b202:	1e03      	subs	r3, r0, #0
   1b204:	d000      	beq.n	1b208 <xQueueReceive+0x324>
   1b206:	e698      	b.n	1af3a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1b208:	4b12      	ldr	r3, [pc, #72]	; (1b254 <xQueueReceive+0x370>)
   1b20a:	4798      	blx	r3
   1b20c:	e695      	b.n	1af3a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1b20e:	6a3b      	ldr	r3, [r7, #32]
   1b210:	0018      	movs	r0, r3
   1b212:	4b18      	ldr	r3, [pc, #96]	; (1b274 <xQueueReceive+0x390>)
   1b214:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b216:	4b18      	ldr	r3, [pc, #96]	; (1b278 <xQueueReceive+0x394>)
   1b218:	4798      	blx	r3
   1b21a:	e68e      	b.n	1af3a <xQueueReceive+0x56>
   1b21c:	0001cdb9 	.word	0x0001cdb9
   1b220:	0001a099 	.word	0x0001a099
   1b224:	0001b945 	.word	0x0001b945
   1b228:	00018335 	.word	0x00018335
   1b22c:	00018099 	.word	0x00018099
   1b230:	20000110 	.word	0x20000110
   1b234:	00018159 	.word	0x00018159
   1b238:	00018059 	.word	0x00018059
   1b23c:	20000104 	.word	0x20000104
   1b240:	00018139 	.word	0x00018139
   1b244:	00018a91 	.word	0x00018a91
   1b248:	00018079 	.word	0x00018079
   1b24c:	000190ed 	.word	0x000190ed
   1b250:	0001c929 	.word	0x0001c929
   1b254:	0001a081 	.word	0x0001a081
   1b258:	0001a0bd 	.word	0x0001a0bd
   1b25c:	0001ca69 	.word	0x0001ca69
   1b260:	0001c351 	.word	0x0001c351
   1b264:	0001ca91 	.word	0x0001ca91
   1b268:	0001ba85 	.word	0x0001ba85
   1b26c:	00019229 	.word	0x00019229
   1b270:	0001c805 	.word	0x0001c805
   1b274:	0001b995 	.word	0x0001b995
   1b278:	0001c369 	.word	0x0001c369
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1b27c:	6a3b      	ldr	r3, [r7, #32]
   1b27e:	0018      	movs	r0, r3
   1b280:	4b23      	ldr	r3, [pc, #140]	; (1b310 <xQueueReceive+0x42c>)
   1b282:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b284:	4b23      	ldr	r3, [pc, #140]	; (1b314 <xQueueReceive+0x430>)
   1b286:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b288:	6a3b      	ldr	r3, [r7, #32]
   1b28a:	0018      	movs	r0, r3
   1b28c:	4b22      	ldr	r3, [pc, #136]	; (1b318 <xQueueReceive+0x434>)
   1b28e:	4798      	blx	r3
   1b290:	1e03      	subs	r3, r0, #0
   1b292:	d100      	bne.n	1b296 <xQueueReceive+0x3b2>
   1b294:	e651      	b.n	1af3a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b296:	4b21      	ldr	r3, [pc, #132]	; (1b31c <xQueueReceive+0x438>)
   1b298:	4798      	blx	r3
   1b29a:	0003      	movs	r3, r0
   1b29c:	0018      	movs	r0, r3
   1b29e:	4b20      	ldr	r3, [pc, #128]	; (1b320 <xQueueReceive+0x43c>)
   1b2a0:	4798      	blx	r3
   1b2a2:	0003      	movs	r3, r0
   1b2a4:	001a      	movs	r2, r3
   1b2a6:	4b1f      	ldr	r3, [pc, #124]	; (1b324 <xQueueReceive+0x440>)
   1b2a8:	881b      	ldrh	r3, [r3, #0]
   1b2aa:	4013      	ands	r3, r2
   1b2ac:	b29b      	uxth	r3, r3
   1b2ae:	2b00      	cmp	r3, #0
   1b2b0:	d029      	beq.n	1b306 <xQueueReceive+0x422>
   1b2b2:	6a3b      	ldr	r3, [r7, #32]
   1b2b4:	0018      	movs	r0, r3
   1b2b6:	4b1c      	ldr	r3, [pc, #112]	; (1b328 <xQueueReceive+0x444>)
   1b2b8:	4798      	blx	r3
   1b2ba:	0003      	movs	r3, r0
   1b2bc:	001a      	movs	r2, r3
   1b2be:	4b19      	ldr	r3, [pc, #100]	; (1b324 <xQueueReceive+0x440>)
   1b2c0:	881b      	ldrh	r3, [r3, #0]
   1b2c2:	4013      	ands	r3, r2
   1b2c4:	b29b      	uxth	r3, r3
   1b2c6:	2b00      	cmp	r3, #0
   1b2c8:	d01d      	beq.n	1b306 <xQueueReceive+0x422>
   1b2ca:	6a3b      	ldr	r3, [r7, #32]
   1b2cc:	0018      	movs	r0, r3
   1b2ce:	4b17      	ldr	r3, [pc, #92]	; (1b32c <xQueueReceive+0x448>)
   1b2d0:	4798      	blx	r3
   1b2d2:	0003      	movs	r3, r0
   1b2d4:	001a      	movs	r2, r3
   1b2d6:	4b16      	ldr	r3, [pc, #88]	; (1b330 <xQueueReceive+0x44c>)
   1b2d8:	5c9b      	ldrb	r3, [r3, r2]
   1b2da:	3350      	adds	r3, #80	; 0x50
   1b2dc:	b2db      	uxtb	r3, r3
   1b2de:	001d      	movs	r5, r3
   1b2e0:	6a3b      	ldr	r3, [r7, #32]
   1b2e2:	0018      	movs	r0, r3
   1b2e4:	4b11      	ldr	r3, [pc, #68]	; (1b32c <xQueueReceive+0x448>)
   1b2e6:	4798      	blx	r3
   1b2e8:	0003      	movs	r3, r0
   1b2ea:	001a      	movs	r2, r3
   1b2ec:	4b10      	ldr	r3, [pc, #64]	; (1b330 <xQueueReceive+0x44c>)
   1b2ee:	5c9c      	ldrb	r4, [r3, r2]
   1b2f0:	6a3b      	ldr	r3, [r7, #32]
   1b2f2:	0018      	movs	r0, r3
   1b2f4:	4b0f      	ldr	r3, [pc, #60]	; (1b334 <xQueueReceive+0x450>)
   1b2f6:	4798      	blx	r3
   1b2f8:	0003      	movs	r3, r0
   1b2fa:	b2db      	uxtb	r3, r3
   1b2fc:	001a      	movs	r2, r3
   1b2fe:	0021      	movs	r1, r4
   1b300:	0028      	movs	r0, r5
   1b302:	4b0d      	ldr	r3, [pc, #52]	; (1b338 <xQueueReceive+0x454>)
   1b304:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1b306:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1b308:	0018      	movs	r0, r3
   1b30a:	46bd      	mov	sp, r7
   1b30c:	b00a      	add	sp, #40	; 0x28
   1b30e:	bdb0      	pop	{r4, r5, r7, pc}
   1b310:	0001b995 	.word	0x0001b995
   1b314:	0001c369 	.word	0x0001c369
   1b318:	0001ba85 	.word	0x0001ba85
   1b31c:	00018335 	.word	0x00018335
   1b320:	00018099 	.word	0x00018099
   1b324:	20000110 	.word	0x20000110
   1b328:	00018159 	.word	0x00018159
   1b32c:	00018059 	.word	0x00018059
   1b330:	20000104 	.word	0x20000104
   1b334:	00018139 	.word	0x00018139
   1b338:	00018a91 	.word	0x00018a91

0001b33c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1b33c:	b5b0      	push	{r4, r5, r7, lr}
   1b33e:	b08a      	sub	sp, #40	; 0x28
   1b340:	af00      	add	r7, sp, #0
   1b342:	6078      	str	r0, [r7, #4]
   1b344:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1b346:	2300      	movs	r3, #0
   1b348:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b34a:	687b      	ldr	r3, [r7, #4]
   1b34c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1b34e:	2300      	movs	r3, #0
   1b350:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1b352:	69fb      	ldr	r3, [r7, #28]
   1b354:	2b00      	cmp	r3, #0
   1b356:	d101      	bne.n	1b35c <xQueueSemaphoreTake+0x20>
   1b358:	b672      	cpsid	i
   1b35a:	e7fe      	b.n	1b35a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1b35c:	69fb      	ldr	r3, [r7, #28]
   1b35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b360:	2b00      	cmp	r3, #0
   1b362:	d001      	beq.n	1b368 <xQueueSemaphoreTake+0x2c>
   1b364:	b672      	cpsid	i
   1b366:	e7fe      	b.n	1b366 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b368:	4bcb      	ldr	r3, [pc, #812]	; (1b698 <xQueueSemaphoreTake+0x35c>)
   1b36a:	4798      	blx	r3
   1b36c:	1e03      	subs	r3, r0, #0
   1b36e:	d102      	bne.n	1b376 <xQueueSemaphoreTake+0x3a>
   1b370:	683b      	ldr	r3, [r7, #0]
   1b372:	2b00      	cmp	r3, #0
   1b374:	d101      	bne.n	1b37a <xQueueSemaphoreTake+0x3e>
   1b376:	2301      	movs	r3, #1
   1b378:	e000      	b.n	1b37c <xQueueSemaphoreTake+0x40>
   1b37a:	2300      	movs	r3, #0
   1b37c:	2b00      	cmp	r3, #0
   1b37e:	d101      	bne.n	1b384 <xQueueSemaphoreTake+0x48>
   1b380:	b672      	cpsid	i
   1b382:	e7fe      	b.n	1b382 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1b384:	4bc5      	ldr	r3, [pc, #788]	; (1b69c <xQueueSemaphoreTake+0x360>)
   1b386:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1b388:	69fb      	ldr	r3, [r7, #28]
   1b38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b38c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1b38e:	69bb      	ldr	r3, [r7, #24]
   1b390:	2b00      	cmp	r3, #0
   1b392:	d100      	bne.n	1b396 <xQueueSemaphoreTake+0x5a>
   1b394:	e080      	b.n	1b498 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1b396:	4bc2      	ldr	r3, [pc, #776]	; (1b6a0 <xQueueSemaphoreTake+0x364>)
   1b398:	4798      	blx	r3
   1b39a:	0003      	movs	r3, r0
   1b39c:	0018      	movs	r0, r3
   1b39e:	4bc1      	ldr	r3, [pc, #772]	; (1b6a4 <xQueueSemaphoreTake+0x368>)
   1b3a0:	4798      	blx	r3
   1b3a2:	0003      	movs	r3, r0
   1b3a4:	001a      	movs	r2, r3
   1b3a6:	4bc0      	ldr	r3, [pc, #768]	; (1b6a8 <xQueueSemaphoreTake+0x36c>)
   1b3a8:	881b      	ldrh	r3, [r3, #0]
   1b3aa:	4013      	ands	r3, r2
   1b3ac:	b29b      	uxth	r3, r3
   1b3ae:	2b00      	cmp	r3, #0
   1b3b0:	d029      	beq.n	1b406 <xQueueSemaphoreTake+0xca>
   1b3b2:	69fb      	ldr	r3, [r7, #28]
   1b3b4:	0018      	movs	r0, r3
   1b3b6:	4bbd      	ldr	r3, [pc, #756]	; (1b6ac <xQueueSemaphoreTake+0x370>)
   1b3b8:	4798      	blx	r3
   1b3ba:	0003      	movs	r3, r0
   1b3bc:	001a      	movs	r2, r3
   1b3be:	4bba      	ldr	r3, [pc, #744]	; (1b6a8 <xQueueSemaphoreTake+0x36c>)
   1b3c0:	881b      	ldrh	r3, [r3, #0]
   1b3c2:	4013      	ands	r3, r2
   1b3c4:	b29b      	uxth	r3, r3
   1b3c6:	2b00      	cmp	r3, #0
   1b3c8:	d01d      	beq.n	1b406 <xQueueSemaphoreTake+0xca>
   1b3ca:	69fb      	ldr	r3, [r7, #28]
   1b3cc:	0018      	movs	r0, r3
   1b3ce:	4bb8      	ldr	r3, [pc, #736]	; (1b6b0 <xQueueSemaphoreTake+0x374>)
   1b3d0:	4798      	blx	r3
   1b3d2:	0003      	movs	r3, r0
   1b3d4:	001a      	movs	r2, r3
   1b3d6:	4bb7      	ldr	r3, [pc, #732]	; (1b6b4 <xQueueSemaphoreTake+0x378>)
   1b3d8:	5c9b      	ldrb	r3, [r3, r2]
   1b3da:	3328      	adds	r3, #40	; 0x28
   1b3dc:	b2db      	uxtb	r3, r3
   1b3de:	001d      	movs	r5, r3
   1b3e0:	69fb      	ldr	r3, [r7, #28]
   1b3e2:	0018      	movs	r0, r3
   1b3e4:	4bb2      	ldr	r3, [pc, #712]	; (1b6b0 <xQueueSemaphoreTake+0x374>)
   1b3e6:	4798      	blx	r3
   1b3e8:	0003      	movs	r3, r0
   1b3ea:	001a      	movs	r2, r3
   1b3ec:	4bb1      	ldr	r3, [pc, #708]	; (1b6b4 <xQueueSemaphoreTake+0x378>)
   1b3ee:	5c9c      	ldrb	r4, [r3, r2]
   1b3f0:	69fb      	ldr	r3, [r7, #28]
   1b3f2:	0018      	movs	r0, r3
   1b3f4:	4bb0      	ldr	r3, [pc, #704]	; (1b6b8 <xQueueSemaphoreTake+0x37c>)
   1b3f6:	4798      	blx	r3
   1b3f8:	0003      	movs	r3, r0
   1b3fa:	b2db      	uxtb	r3, r3
   1b3fc:	001a      	movs	r2, r3
   1b3fe:	0021      	movs	r1, r4
   1b400:	0028      	movs	r0, r5
   1b402:	4bae      	ldr	r3, [pc, #696]	; (1b6bc <xQueueSemaphoreTake+0x380>)
   1b404:	4798      	blx	r3
   1b406:	69fb      	ldr	r3, [r7, #28]
   1b408:	0018      	movs	r0, r3
   1b40a:	4ba9      	ldr	r3, [pc, #676]	; (1b6b0 <xQueueSemaphoreTake+0x374>)
   1b40c:	4798      	blx	r3
   1b40e:	0003      	movs	r3, r0
   1b410:	001a      	movs	r2, r3
   1b412:	4ba8      	ldr	r3, [pc, #672]	; (1b6b4 <xQueueSemaphoreTake+0x378>)
   1b414:	5c9c      	ldrb	r4, [r3, r2]
   1b416:	69fb      	ldr	r3, [r7, #28]
   1b418:	0018      	movs	r0, r3
   1b41a:	4ba7      	ldr	r3, [pc, #668]	; (1b6b8 <xQueueSemaphoreTake+0x37c>)
   1b41c:	4798      	blx	r3
   1b41e:	0003      	movs	r3, r0
   1b420:	b2dd      	uxtb	r5, r3
   1b422:	69fb      	ldr	r3, [r7, #28]
   1b424:	0018      	movs	r0, r3
   1b426:	4ba2      	ldr	r3, [pc, #648]	; (1b6b0 <xQueueSemaphoreTake+0x374>)
   1b428:	4798      	blx	r3
   1b42a:	0003      	movs	r3, r0
   1b42c:	001a      	movs	r2, r3
   1b42e:	4ba1      	ldr	r3, [pc, #644]	; (1b6b4 <xQueueSemaphoreTake+0x378>)
   1b430:	5c9b      	ldrb	r3, [r3, r2]
   1b432:	2b02      	cmp	r3, #2
   1b434:	d108      	bne.n	1b448 <xQueueSemaphoreTake+0x10c>
   1b436:	4b9a      	ldr	r3, [pc, #616]	; (1b6a0 <xQueueSemaphoreTake+0x364>)
   1b438:	4798      	blx	r3
   1b43a:	0003      	movs	r3, r0
   1b43c:	0018      	movs	r0, r3
   1b43e:	4ba0      	ldr	r3, [pc, #640]	; (1b6c0 <xQueueSemaphoreTake+0x384>)
   1b440:	4798      	blx	r3
   1b442:	0003      	movs	r3, r0
   1b444:	b2db      	uxtb	r3, r3
   1b446:	e004      	b.n	1b452 <xQueueSemaphoreTake+0x116>
   1b448:	69fb      	ldr	r3, [r7, #28]
   1b44a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b44c:	b2db      	uxtb	r3, r3
   1b44e:	3b01      	subs	r3, #1
   1b450:	b2db      	uxtb	r3, r3
   1b452:	001a      	movs	r2, r3
   1b454:	0029      	movs	r1, r5
   1b456:	0020      	movs	r0, r4
   1b458:	4b9a      	ldr	r3, [pc, #616]	; (1b6c4 <xQueueSemaphoreTake+0x388>)
   1b45a:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1b45c:	69bb      	ldr	r3, [r7, #24]
   1b45e:	1e5a      	subs	r2, r3, #1
   1b460:	69fb      	ldr	r3, [r7, #28]
   1b462:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b464:	69fb      	ldr	r3, [r7, #28]
   1b466:	681b      	ldr	r3, [r3, #0]
   1b468:	2b00      	cmp	r3, #0
   1b46a:	d104      	bne.n	1b476 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1b46c:	4b96      	ldr	r3, [pc, #600]	; (1b6c8 <xQueueSemaphoreTake+0x38c>)
   1b46e:	4798      	blx	r3
   1b470:	0002      	movs	r2, r0
   1b472:	69fb      	ldr	r3, [r7, #28]
   1b474:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b476:	69fb      	ldr	r3, [r7, #28]
   1b478:	691b      	ldr	r3, [r3, #16]
   1b47a:	2b00      	cmp	r3, #0
   1b47c:	d008      	beq.n	1b490 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b47e:	69fb      	ldr	r3, [r7, #28]
   1b480:	3310      	adds	r3, #16
   1b482:	0018      	movs	r0, r3
   1b484:	4b91      	ldr	r3, [pc, #580]	; (1b6cc <xQueueSemaphoreTake+0x390>)
   1b486:	4798      	blx	r3
   1b488:	1e03      	subs	r3, r0, #0
   1b48a:	d001      	beq.n	1b490 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1b48c:	4b90      	ldr	r3, [pc, #576]	; (1b6d0 <xQueueSemaphoreTake+0x394>)
   1b48e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1b490:	4b90      	ldr	r3, [pc, #576]	; (1b6d4 <xQueueSemaphoreTake+0x398>)
   1b492:	4798      	blx	r3
				return pdPASS;
   1b494:	2301      	movs	r3, #1
   1b496:	e18b      	b.n	1b7b0 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b498:	683b      	ldr	r3, [r7, #0]
   1b49a:	2b00      	cmp	r3, #0
   1b49c:	d140      	bne.n	1b520 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1b49e:	6a3b      	ldr	r3, [r7, #32]
   1b4a0:	2b00      	cmp	r3, #0
   1b4a2:	d001      	beq.n	1b4a8 <xQueueSemaphoreTake+0x16c>
   1b4a4:	b672      	cpsid	i
   1b4a6:	e7fe      	b.n	1b4a6 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1b4a8:	4b8a      	ldr	r3, [pc, #552]	; (1b6d4 <xQueueSemaphoreTake+0x398>)
   1b4aa:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b4ac:	4b7c      	ldr	r3, [pc, #496]	; (1b6a0 <xQueueSemaphoreTake+0x364>)
   1b4ae:	4798      	blx	r3
   1b4b0:	0003      	movs	r3, r0
   1b4b2:	0018      	movs	r0, r3
   1b4b4:	4b7b      	ldr	r3, [pc, #492]	; (1b6a4 <xQueueSemaphoreTake+0x368>)
   1b4b6:	4798      	blx	r3
   1b4b8:	0003      	movs	r3, r0
   1b4ba:	001a      	movs	r2, r3
   1b4bc:	4b7a      	ldr	r3, [pc, #488]	; (1b6a8 <xQueueSemaphoreTake+0x36c>)
   1b4be:	881b      	ldrh	r3, [r3, #0]
   1b4c0:	4013      	ands	r3, r2
   1b4c2:	b29b      	uxth	r3, r3
   1b4c4:	2b00      	cmp	r3, #0
   1b4c6:	d029      	beq.n	1b51c <xQueueSemaphoreTake+0x1e0>
   1b4c8:	69fb      	ldr	r3, [r7, #28]
   1b4ca:	0018      	movs	r0, r3
   1b4cc:	4b77      	ldr	r3, [pc, #476]	; (1b6ac <xQueueSemaphoreTake+0x370>)
   1b4ce:	4798      	blx	r3
   1b4d0:	0003      	movs	r3, r0
   1b4d2:	001a      	movs	r2, r3
   1b4d4:	4b74      	ldr	r3, [pc, #464]	; (1b6a8 <xQueueSemaphoreTake+0x36c>)
   1b4d6:	881b      	ldrh	r3, [r3, #0]
   1b4d8:	4013      	ands	r3, r2
   1b4da:	b29b      	uxth	r3, r3
   1b4dc:	2b00      	cmp	r3, #0
   1b4de:	d01d      	beq.n	1b51c <xQueueSemaphoreTake+0x1e0>
   1b4e0:	69fb      	ldr	r3, [r7, #28]
   1b4e2:	0018      	movs	r0, r3
   1b4e4:	4b72      	ldr	r3, [pc, #456]	; (1b6b0 <xQueueSemaphoreTake+0x374>)
   1b4e6:	4798      	blx	r3
   1b4e8:	0003      	movs	r3, r0
   1b4ea:	001a      	movs	r2, r3
   1b4ec:	4b71      	ldr	r3, [pc, #452]	; (1b6b4 <xQueueSemaphoreTake+0x378>)
   1b4ee:	5c9b      	ldrb	r3, [r3, r2]
   1b4f0:	3350      	adds	r3, #80	; 0x50
   1b4f2:	b2db      	uxtb	r3, r3
   1b4f4:	001d      	movs	r5, r3
   1b4f6:	69fb      	ldr	r3, [r7, #28]
   1b4f8:	0018      	movs	r0, r3
   1b4fa:	4b6d      	ldr	r3, [pc, #436]	; (1b6b0 <xQueueSemaphoreTake+0x374>)
   1b4fc:	4798      	blx	r3
   1b4fe:	0003      	movs	r3, r0
   1b500:	001a      	movs	r2, r3
   1b502:	4b6c      	ldr	r3, [pc, #432]	; (1b6b4 <xQueueSemaphoreTake+0x378>)
   1b504:	5c9c      	ldrb	r4, [r3, r2]
   1b506:	69fb      	ldr	r3, [r7, #28]
   1b508:	0018      	movs	r0, r3
   1b50a:	4b6b      	ldr	r3, [pc, #428]	; (1b6b8 <xQueueSemaphoreTake+0x37c>)
   1b50c:	4798      	blx	r3
   1b50e:	0003      	movs	r3, r0
   1b510:	b2db      	uxtb	r3, r3
   1b512:	001a      	movs	r2, r3
   1b514:	0021      	movs	r1, r4
   1b516:	0028      	movs	r0, r5
   1b518:	4b68      	ldr	r3, [pc, #416]	; (1b6bc <xQueueSemaphoreTake+0x380>)
   1b51a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1b51c:	2300      	movs	r3, #0
   1b51e:	e147      	b.n	1b7b0 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b522:	2b00      	cmp	r3, #0
   1b524:	d106      	bne.n	1b534 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b526:	230c      	movs	r3, #12
   1b528:	18fb      	adds	r3, r7, r3
   1b52a:	0018      	movs	r0, r3
   1b52c:	4b6a      	ldr	r3, [pc, #424]	; (1b6d8 <xQueueSemaphoreTake+0x39c>)
   1b52e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b530:	2301      	movs	r3, #1
   1b532:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b534:	4b67      	ldr	r3, [pc, #412]	; (1b6d4 <xQueueSemaphoreTake+0x398>)
   1b536:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b538:	4b68      	ldr	r3, [pc, #416]	; (1b6dc <xQueueSemaphoreTake+0x3a0>)
   1b53a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b53c:	4b57      	ldr	r3, [pc, #348]	; (1b69c <xQueueSemaphoreTake+0x360>)
   1b53e:	4798      	blx	r3
   1b540:	69fb      	ldr	r3, [r7, #28]
   1b542:	2244      	movs	r2, #68	; 0x44
   1b544:	5c9b      	ldrb	r3, [r3, r2]
   1b546:	b25b      	sxtb	r3, r3
   1b548:	3301      	adds	r3, #1
   1b54a:	d103      	bne.n	1b554 <xQueueSemaphoreTake+0x218>
   1b54c:	69fb      	ldr	r3, [r7, #28]
   1b54e:	2244      	movs	r2, #68	; 0x44
   1b550:	2100      	movs	r1, #0
   1b552:	5499      	strb	r1, [r3, r2]
   1b554:	69fb      	ldr	r3, [r7, #28]
   1b556:	2245      	movs	r2, #69	; 0x45
   1b558:	5c9b      	ldrb	r3, [r3, r2]
   1b55a:	b25b      	sxtb	r3, r3
   1b55c:	3301      	adds	r3, #1
   1b55e:	d103      	bne.n	1b568 <xQueueSemaphoreTake+0x22c>
   1b560:	69fb      	ldr	r3, [r7, #28]
   1b562:	2245      	movs	r2, #69	; 0x45
   1b564:	2100      	movs	r1, #0
   1b566:	5499      	strb	r1, [r3, r2]
   1b568:	4b5a      	ldr	r3, [pc, #360]	; (1b6d4 <xQueueSemaphoreTake+0x398>)
   1b56a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b56c:	003a      	movs	r2, r7
   1b56e:	230c      	movs	r3, #12
   1b570:	18fb      	adds	r3, r7, r3
   1b572:	0011      	movs	r1, r2
   1b574:	0018      	movs	r0, r3
   1b576:	4b5a      	ldr	r3, [pc, #360]	; (1b6e0 <xQueueSemaphoreTake+0x3a4>)
   1b578:	4798      	blx	r3
   1b57a:	1e03      	subs	r3, r0, #0
   1b57c:	d000      	beq.n	1b580 <xQueueSemaphoreTake+0x244>
   1b57e:	e0bd      	b.n	1b6fc <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b580:	69fb      	ldr	r3, [r7, #28]
   1b582:	0018      	movs	r0, r3
   1b584:	4b57      	ldr	r3, [pc, #348]	; (1b6e4 <xQueueSemaphoreTake+0x3a8>)
   1b586:	4798      	blx	r3
   1b588:	1e03      	subs	r3, r0, #0
   1b58a:	d100      	bne.n	1b58e <xQueueSemaphoreTake+0x252>
   1b58c:	e07c      	b.n	1b688 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1b58e:	4b44      	ldr	r3, [pc, #272]	; (1b6a0 <xQueueSemaphoreTake+0x364>)
   1b590:	4798      	blx	r3
   1b592:	0003      	movs	r3, r0
   1b594:	0018      	movs	r0, r3
   1b596:	4b43      	ldr	r3, [pc, #268]	; (1b6a4 <xQueueSemaphoreTake+0x368>)
   1b598:	4798      	blx	r3
   1b59a:	0003      	movs	r3, r0
   1b59c:	001a      	movs	r2, r3
   1b59e:	4b42      	ldr	r3, [pc, #264]	; (1b6a8 <xQueueSemaphoreTake+0x36c>)
   1b5a0:	881b      	ldrh	r3, [r3, #0]
   1b5a2:	4013      	ands	r3, r2
   1b5a4:	b29b      	uxth	r3, r3
   1b5a6:	2b00      	cmp	r3, #0
   1b5a8:	d029      	beq.n	1b5fe <xQueueSemaphoreTake+0x2c2>
   1b5aa:	69fb      	ldr	r3, [r7, #28]
   1b5ac:	0018      	movs	r0, r3
   1b5ae:	4b3f      	ldr	r3, [pc, #252]	; (1b6ac <xQueueSemaphoreTake+0x370>)
   1b5b0:	4798      	blx	r3
   1b5b2:	0003      	movs	r3, r0
   1b5b4:	001a      	movs	r2, r3
   1b5b6:	4b3c      	ldr	r3, [pc, #240]	; (1b6a8 <xQueueSemaphoreTake+0x36c>)
   1b5b8:	881b      	ldrh	r3, [r3, #0]
   1b5ba:	4013      	ands	r3, r2
   1b5bc:	b29b      	uxth	r3, r3
   1b5be:	2b00      	cmp	r3, #0
   1b5c0:	d01d      	beq.n	1b5fe <xQueueSemaphoreTake+0x2c2>
   1b5c2:	69fb      	ldr	r3, [r7, #28]
   1b5c4:	0018      	movs	r0, r3
   1b5c6:	4b3a      	ldr	r3, [pc, #232]	; (1b6b0 <xQueueSemaphoreTake+0x374>)
   1b5c8:	4798      	blx	r3
   1b5ca:	0003      	movs	r3, r0
   1b5cc:	001a      	movs	r2, r3
   1b5ce:	4b39      	ldr	r3, [pc, #228]	; (1b6b4 <xQueueSemaphoreTake+0x378>)
   1b5d0:	5c9b      	ldrb	r3, [r3, r2]
   1b5d2:	3368      	adds	r3, #104	; 0x68
   1b5d4:	b2db      	uxtb	r3, r3
   1b5d6:	001d      	movs	r5, r3
   1b5d8:	69fb      	ldr	r3, [r7, #28]
   1b5da:	0018      	movs	r0, r3
   1b5dc:	4b34      	ldr	r3, [pc, #208]	; (1b6b0 <xQueueSemaphoreTake+0x374>)
   1b5de:	4798      	blx	r3
   1b5e0:	0003      	movs	r3, r0
   1b5e2:	001a      	movs	r2, r3
   1b5e4:	4b33      	ldr	r3, [pc, #204]	; (1b6b4 <xQueueSemaphoreTake+0x378>)
   1b5e6:	5c9c      	ldrb	r4, [r3, r2]
   1b5e8:	69fb      	ldr	r3, [r7, #28]
   1b5ea:	0018      	movs	r0, r3
   1b5ec:	4b32      	ldr	r3, [pc, #200]	; (1b6b8 <xQueueSemaphoreTake+0x37c>)
   1b5ee:	4798      	blx	r3
   1b5f0:	0003      	movs	r3, r0
   1b5f2:	b2db      	uxtb	r3, r3
   1b5f4:	001a      	movs	r2, r3
   1b5f6:	0021      	movs	r1, r4
   1b5f8:	0028      	movs	r0, r5
   1b5fa:	4b30      	ldr	r3, [pc, #192]	; (1b6bc <xQueueSemaphoreTake+0x380>)
   1b5fc:	4798      	blx	r3
   1b5fe:	69fb      	ldr	r3, [r7, #28]
   1b600:	0018      	movs	r0, r3
   1b602:	4b2b      	ldr	r3, [pc, #172]	; (1b6b0 <xQueueSemaphoreTake+0x374>)
   1b604:	4798      	blx	r3
   1b606:	0003      	movs	r3, r0
   1b608:	001a      	movs	r2, r3
   1b60a:	4b2a      	ldr	r3, [pc, #168]	; (1b6b4 <xQueueSemaphoreTake+0x378>)
   1b60c:	5c9b      	ldrb	r3, [r3, r2]
   1b60e:	2b02      	cmp	r3, #2
   1b610:	d018      	beq.n	1b644 <xQueueSemaphoreTake+0x308>
   1b612:	4b23      	ldr	r3, [pc, #140]	; (1b6a0 <xQueueSemaphoreTake+0x364>)
   1b614:	4798      	blx	r3
   1b616:	0003      	movs	r3, r0
   1b618:	0018      	movs	r0, r3
   1b61a:	4b22      	ldr	r3, [pc, #136]	; (1b6a4 <xQueueSemaphoreTake+0x368>)
   1b61c:	4798      	blx	r3
   1b61e:	0003      	movs	r3, r0
   1b620:	001a      	movs	r2, r3
   1b622:	4b21      	ldr	r3, [pc, #132]	; (1b6a8 <xQueueSemaphoreTake+0x36c>)
   1b624:	881b      	ldrh	r3, [r3, #0]
   1b626:	4013      	ands	r3, r2
   1b628:	b29b      	uxth	r3, r3
   1b62a:	2b00      	cmp	r3, #0
   1b62c:	d00a      	beq.n	1b644 <xQueueSemaphoreTake+0x308>
   1b62e:	4b1c      	ldr	r3, [pc, #112]	; (1b6a0 <xQueueSemaphoreTake+0x364>)
   1b630:	4798      	blx	r3
   1b632:	0003      	movs	r3, r0
   1b634:	0018      	movs	r0, r3
   1b636:	4b22      	ldr	r3, [pc, #136]	; (1b6c0 <xQueueSemaphoreTake+0x384>)
   1b638:	4798      	blx	r3
   1b63a:	0003      	movs	r3, r0
   1b63c:	b2db      	uxtb	r3, r3
   1b63e:	0018      	movs	r0, r3
   1b640:	4b29      	ldr	r3, [pc, #164]	; (1b6e8 <xQueueSemaphoreTake+0x3ac>)
   1b642:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b644:	69fb      	ldr	r3, [r7, #28]
   1b646:	681b      	ldr	r3, [r3, #0]
   1b648:	2b00      	cmp	r3, #0
   1b64a:	d10a      	bne.n	1b662 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1b64c:	4b13      	ldr	r3, [pc, #76]	; (1b69c <xQueueSemaphoreTake+0x360>)
   1b64e:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1b650:	69fb      	ldr	r3, [r7, #28]
   1b652:	685b      	ldr	r3, [r3, #4]
   1b654:	0018      	movs	r0, r3
   1b656:	4b25      	ldr	r3, [pc, #148]	; (1b6ec <xQueueSemaphoreTake+0x3b0>)
   1b658:	4798      	blx	r3
   1b65a:	0003      	movs	r3, r0
   1b65c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1b65e:	4b1d      	ldr	r3, [pc, #116]	; (1b6d4 <xQueueSemaphoreTake+0x398>)
   1b660:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1b662:	69fb      	ldr	r3, [r7, #28]
   1b664:	3324      	adds	r3, #36	; 0x24
   1b666:	683a      	ldr	r2, [r7, #0]
   1b668:	0011      	movs	r1, r2
   1b66a:	0018      	movs	r0, r3
   1b66c:	4b20      	ldr	r3, [pc, #128]	; (1b6f0 <xQueueSemaphoreTake+0x3b4>)
   1b66e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1b670:	69fb      	ldr	r3, [r7, #28]
   1b672:	0018      	movs	r0, r3
   1b674:	4b1f      	ldr	r3, [pc, #124]	; (1b6f4 <xQueueSemaphoreTake+0x3b8>)
   1b676:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1b678:	4b1f      	ldr	r3, [pc, #124]	; (1b6f8 <xQueueSemaphoreTake+0x3bc>)
   1b67a:	4798      	blx	r3
   1b67c:	1e03      	subs	r3, r0, #0
   1b67e:	d000      	beq.n	1b682 <xQueueSemaphoreTake+0x346>
   1b680:	e680      	b.n	1b384 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1b682:	4b13      	ldr	r3, [pc, #76]	; (1b6d0 <xQueueSemaphoreTake+0x394>)
   1b684:	4798      	blx	r3
   1b686:	e67d      	b.n	1b384 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1b688:	69fb      	ldr	r3, [r7, #28]
   1b68a:	0018      	movs	r0, r3
   1b68c:	4b19      	ldr	r3, [pc, #100]	; (1b6f4 <xQueueSemaphoreTake+0x3b8>)
   1b68e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b690:	4b19      	ldr	r3, [pc, #100]	; (1b6f8 <xQueueSemaphoreTake+0x3bc>)
   1b692:	4798      	blx	r3
   1b694:	e676      	b.n	1b384 <xQueueSemaphoreTake+0x48>
   1b696:	46c0      	nop			; (mov r8, r8)
   1b698:	0001cdb9 	.word	0x0001cdb9
   1b69c:	0001a099 	.word	0x0001a099
   1b6a0:	00018335 	.word	0x00018335
   1b6a4:	00018099 	.word	0x00018099
   1b6a8:	20000110 	.word	0x20000110
   1b6ac:	00018159 	.word	0x00018159
   1b6b0:	00018059 	.word	0x00018059
   1b6b4:	20000104 	.word	0x20000104
   1b6b8:	00018139 	.word	0x00018139
   1b6bc:	00018a91 	.word	0x00018a91
   1b6c0:	00018079 	.word	0x00018079
   1b6c4:	000190ed 	.word	0x000190ed
   1b6c8:	0001d285 	.word	0x0001d285
   1b6cc:	0001c929 	.word	0x0001c929
   1b6d0:	0001a081 	.word	0x0001a081
   1b6d4:	0001a0bd 	.word	0x0001a0bd
   1b6d8:	0001ca69 	.word	0x0001ca69
   1b6dc:	0001c351 	.word	0x0001c351
   1b6e0:	0001ca91 	.word	0x0001ca91
   1b6e4:	0001ba85 	.word	0x0001ba85
   1b6e8:	00019229 	.word	0x00019229
   1b6ec:	0001cdf1 	.word	0x0001cdf1
   1b6f0:	0001c805 	.word	0x0001c805
   1b6f4:	0001b995 	.word	0x0001b995
   1b6f8:	0001c369 	.word	0x0001c369
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1b6fc:	69fb      	ldr	r3, [r7, #28]
   1b6fe:	0018      	movs	r0, r3
   1b700:	4b2d      	ldr	r3, [pc, #180]	; (1b7b8 <xQueueSemaphoreTake+0x47c>)
   1b702:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b704:	4b2d      	ldr	r3, [pc, #180]	; (1b7bc <xQueueSemaphoreTake+0x480>)
   1b706:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b708:	69fb      	ldr	r3, [r7, #28]
   1b70a:	0018      	movs	r0, r3
   1b70c:	4b2c      	ldr	r3, [pc, #176]	; (1b7c0 <xQueueSemaphoreTake+0x484>)
   1b70e:	4798      	blx	r3
   1b710:	1e03      	subs	r3, r0, #0
   1b712:	d100      	bne.n	1b716 <xQueueSemaphoreTake+0x3da>
   1b714:	e636      	b.n	1b384 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1b716:	6a3b      	ldr	r3, [r7, #32]
   1b718:	2b00      	cmp	r3, #0
   1b71a:	d010      	beq.n	1b73e <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1b71c:	4b29      	ldr	r3, [pc, #164]	; (1b7c4 <xQueueSemaphoreTake+0x488>)
   1b71e:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1b720:	69fb      	ldr	r3, [r7, #28]
   1b722:	0018      	movs	r0, r3
   1b724:	4b28      	ldr	r3, [pc, #160]	; (1b7c8 <xQueueSemaphoreTake+0x48c>)
   1b726:	4798      	blx	r3
   1b728:	0003      	movs	r3, r0
   1b72a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1b72c:	69fb      	ldr	r3, [r7, #28]
   1b72e:	685b      	ldr	r3, [r3, #4]
   1b730:	697a      	ldr	r2, [r7, #20]
   1b732:	0011      	movs	r1, r2
   1b734:	0018      	movs	r0, r3
   1b736:	4b25      	ldr	r3, [pc, #148]	; (1b7cc <xQueueSemaphoreTake+0x490>)
   1b738:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1b73a:	4b25      	ldr	r3, [pc, #148]	; (1b7d0 <xQueueSemaphoreTake+0x494>)
   1b73c:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b73e:	4b25      	ldr	r3, [pc, #148]	; (1b7d4 <xQueueSemaphoreTake+0x498>)
   1b740:	4798      	blx	r3
   1b742:	0003      	movs	r3, r0
   1b744:	0018      	movs	r0, r3
   1b746:	4b24      	ldr	r3, [pc, #144]	; (1b7d8 <xQueueSemaphoreTake+0x49c>)
   1b748:	4798      	blx	r3
   1b74a:	0003      	movs	r3, r0
   1b74c:	001a      	movs	r2, r3
   1b74e:	4b23      	ldr	r3, [pc, #140]	; (1b7dc <xQueueSemaphoreTake+0x4a0>)
   1b750:	881b      	ldrh	r3, [r3, #0]
   1b752:	4013      	ands	r3, r2
   1b754:	b29b      	uxth	r3, r3
   1b756:	2b00      	cmp	r3, #0
   1b758:	d029      	beq.n	1b7ae <xQueueSemaphoreTake+0x472>
   1b75a:	69fb      	ldr	r3, [r7, #28]
   1b75c:	0018      	movs	r0, r3
   1b75e:	4b20      	ldr	r3, [pc, #128]	; (1b7e0 <xQueueSemaphoreTake+0x4a4>)
   1b760:	4798      	blx	r3
   1b762:	0003      	movs	r3, r0
   1b764:	001a      	movs	r2, r3
   1b766:	4b1d      	ldr	r3, [pc, #116]	; (1b7dc <xQueueSemaphoreTake+0x4a0>)
   1b768:	881b      	ldrh	r3, [r3, #0]
   1b76a:	4013      	ands	r3, r2
   1b76c:	b29b      	uxth	r3, r3
   1b76e:	2b00      	cmp	r3, #0
   1b770:	d01d      	beq.n	1b7ae <xQueueSemaphoreTake+0x472>
   1b772:	69fb      	ldr	r3, [r7, #28]
   1b774:	0018      	movs	r0, r3
   1b776:	4b1b      	ldr	r3, [pc, #108]	; (1b7e4 <xQueueSemaphoreTake+0x4a8>)
   1b778:	4798      	blx	r3
   1b77a:	0003      	movs	r3, r0
   1b77c:	001a      	movs	r2, r3
   1b77e:	4b1a      	ldr	r3, [pc, #104]	; (1b7e8 <xQueueSemaphoreTake+0x4ac>)
   1b780:	5c9b      	ldrb	r3, [r3, r2]
   1b782:	3350      	adds	r3, #80	; 0x50
   1b784:	b2db      	uxtb	r3, r3
   1b786:	001d      	movs	r5, r3
   1b788:	69fb      	ldr	r3, [r7, #28]
   1b78a:	0018      	movs	r0, r3
   1b78c:	4b15      	ldr	r3, [pc, #84]	; (1b7e4 <xQueueSemaphoreTake+0x4a8>)
   1b78e:	4798      	blx	r3
   1b790:	0003      	movs	r3, r0
   1b792:	001a      	movs	r2, r3
   1b794:	4b14      	ldr	r3, [pc, #80]	; (1b7e8 <xQueueSemaphoreTake+0x4ac>)
   1b796:	5c9c      	ldrb	r4, [r3, r2]
   1b798:	69fb      	ldr	r3, [r7, #28]
   1b79a:	0018      	movs	r0, r3
   1b79c:	4b13      	ldr	r3, [pc, #76]	; (1b7ec <xQueueSemaphoreTake+0x4b0>)
   1b79e:	4798      	blx	r3
   1b7a0:	0003      	movs	r3, r0
   1b7a2:	b2db      	uxtb	r3, r3
   1b7a4:	001a      	movs	r2, r3
   1b7a6:	0021      	movs	r1, r4
   1b7a8:	0028      	movs	r0, r5
   1b7aa:	4b11      	ldr	r3, [pc, #68]	; (1b7f0 <xQueueSemaphoreTake+0x4b4>)
   1b7ac:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1b7ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1b7b0:	0018      	movs	r0, r3
   1b7b2:	46bd      	mov	sp, r7
   1b7b4:	b00a      	add	sp, #40	; 0x28
   1b7b6:	bdb0      	pop	{r4, r5, r7, pc}
   1b7b8:	0001b995 	.word	0x0001b995
   1b7bc:	0001c369 	.word	0x0001c369
   1b7c0:	0001ba85 	.word	0x0001ba85
   1b7c4:	0001a099 	.word	0x0001a099
   1b7c8:	0001b837 	.word	0x0001b837
   1b7cc:	0001d0e9 	.word	0x0001d0e9
   1b7d0:	0001a0bd 	.word	0x0001a0bd
   1b7d4:	00018335 	.word	0x00018335
   1b7d8:	00018099 	.word	0x00018099
   1b7dc:	20000110 	.word	0x20000110
   1b7e0:	00018159 	.word	0x00018159
   1b7e4:	00018059 	.word	0x00018059
   1b7e8:	20000104 	.word	0x20000104
   1b7ec:	00018139 	.word	0x00018139
   1b7f0:	00018a91 	.word	0x00018a91

0001b7f4 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1b7f4:	b580      	push	{r7, lr}
   1b7f6:	b082      	sub	sp, #8
   1b7f8:	af00      	add	r7, sp, #0
   1b7fa:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1b7fc:	687b      	ldr	r3, [r7, #4]
   1b7fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1b800:	0018      	movs	r0, r3
   1b802:	46bd      	mov	sp, r7
   1b804:	b002      	add	sp, #8
   1b806:	bd80      	pop	{r7, pc}

0001b808 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1b808:	b580      	push	{r7, lr}
   1b80a:	b082      	sub	sp, #8
   1b80c:	af00      	add	r7, sp, #0
   1b80e:	6078      	str	r0, [r7, #4]
   1b810:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1b812:	687b      	ldr	r3, [r7, #4]
   1b814:	683a      	ldr	r2, [r7, #0]
   1b816:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1b818:	46c0      	nop			; (mov r8, r8)
   1b81a:	46bd      	mov	sp, r7
   1b81c:	b002      	add	sp, #8
   1b81e:	bd80      	pop	{r7, pc}

0001b820 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1b820:	b580      	push	{r7, lr}
   1b822:	b082      	sub	sp, #8
   1b824:	af00      	add	r7, sp, #0
   1b826:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1b828:	687b      	ldr	r3, [r7, #4]
   1b82a:	2250      	movs	r2, #80	; 0x50
   1b82c:	5c9b      	ldrb	r3, [r3, r2]
	}
   1b82e:	0018      	movs	r0, r3
   1b830:	46bd      	mov	sp, r7
   1b832:	b002      	add	sp, #8
   1b834:	bd80      	pop	{r7, pc}

0001b836 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1b836:	b580      	push	{r7, lr}
   1b838:	b084      	sub	sp, #16
   1b83a:	af00      	add	r7, sp, #0
   1b83c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1b83e:	687b      	ldr	r3, [r7, #4]
   1b840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b842:	2b00      	cmp	r3, #0
   1b844:	d006      	beq.n	1b854 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1b846:	687b      	ldr	r3, [r7, #4]
   1b848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b84a:	681b      	ldr	r3, [r3, #0]
   1b84c:	2205      	movs	r2, #5
   1b84e:	1ad3      	subs	r3, r2, r3
   1b850:	60fb      	str	r3, [r7, #12]
   1b852:	e001      	b.n	1b858 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1b854:	2300      	movs	r3, #0
   1b856:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1b858:	68fb      	ldr	r3, [r7, #12]
	}
   1b85a:	0018      	movs	r0, r3
   1b85c:	46bd      	mov	sp, r7
   1b85e:	b004      	add	sp, #16
   1b860:	bd80      	pop	{r7, pc}
	...

0001b864 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1b864:	b580      	push	{r7, lr}
   1b866:	b086      	sub	sp, #24
   1b868:	af00      	add	r7, sp, #0
   1b86a:	60f8      	str	r0, [r7, #12]
   1b86c:	60b9      	str	r1, [r7, #8]
   1b86e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1b870:	2300      	movs	r3, #0
   1b872:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b874:	68fb      	ldr	r3, [r7, #12]
   1b876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b878:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1b87a:	68fb      	ldr	r3, [r7, #12]
   1b87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b87e:	2b00      	cmp	r3, #0
   1b880:	d10e      	bne.n	1b8a0 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b882:	68fb      	ldr	r3, [r7, #12]
   1b884:	681b      	ldr	r3, [r3, #0]
   1b886:	2b00      	cmp	r3, #0
   1b888:	d14e      	bne.n	1b928 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1b88a:	68fb      	ldr	r3, [r7, #12]
   1b88c:	685b      	ldr	r3, [r3, #4]
   1b88e:	0018      	movs	r0, r3
   1b890:	4b2a      	ldr	r3, [pc, #168]	; (1b93c <prvCopyDataToQueue+0xd8>)
   1b892:	4798      	blx	r3
   1b894:	0003      	movs	r3, r0
   1b896:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1b898:	68fb      	ldr	r3, [r7, #12]
   1b89a:	2200      	movs	r2, #0
   1b89c:	605a      	str	r2, [r3, #4]
   1b89e:	e043      	b.n	1b928 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1b8a0:	687b      	ldr	r3, [r7, #4]
   1b8a2:	2b00      	cmp	r3, #0
   1b8a4:	d119      	bne.n	1b8da <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1b8a6:	68fb      	ldr	r3, [r7, #12]
   1b8a8:	6898      	ldr	r0, [r3, #8]
   1b8aa:	68fb      	ldr	r3, [r7, #12]
   1b8ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b8ae:	68bb      	ldr	r3, [r7, #8]
   1b8b0:	0019      	movs	r1, r3
   1b8b2:	4b23      	ldr	r3, [pc, #140]	; (1b940 <prvCopyDataToQueue+0xdc>)
   1b8b4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1b8b6:	68fb      	ldr	r3, [r7, #12]
   1b8b8:	689a      	ldr	r2, [r3, #8]
   1b8ba:	68fb      	ldr	r3, [r7, #12]
   1b8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b8be:	18d2      	adds	r2, r2, r3
   1b8c0:	68fb      	ldr	r3, [r7, #12]
   1b8c2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1b8c4:	68fb      	ldr	r3, [r7, #12]
   1b8c6:	689a      	ldr	r2, [r3, #8]
   1b8c8:	68fb      	ldr	r3, [r7, #12]
   1b8ca:	685b      	ldr	r3, [r3, #4]
   1b8cc:	429a      	cmp	r2, r3
   1b8ce:	d32b      	bcc.n	1b928 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1b8d0:	68fb      	ldr	r3, [r7, #12]
   1b8d2:	681a      	ldr	r2, [r3, #0]
   1b8d4:	68fb      	ldr	r3, [r7, #12]
   1b8d6:	609a      	str	r2, [r3, #8]
   1b8d8:	e026      	b.n	1b928 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b8da:	68fb      	ldr	r3, [r7, #12]
   1b8dc:	68d8      	ldr	r0, [r3, #12]
   1b8de:	68fb      	ldr	r3, [r7, #12]
   1b8e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b8e2:	68bb      	ldr	r3, [r7, #8]
   1b8e4:	0019      	movs	r1, r3
   1b8e6:	4b16      	ldr	r3, [pc, #88]	; (1b940 <prvCopyDataToQueue+0xdc>)
   1b8e8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1b8ea:	68fb      	ldr	r3, [r7, #12]
   1b8ec:	68da      	ldr	r2, [r3, #12]
   1b8ee:	68fb      	ldr	r3, [r7, #12]
   1b8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b8f2:	425b      	negs	r3, r3
   1b8f4:	18d2      	adds	r2, r2, r3
   1b8f6:	68fb      	ldr	r3, [r7, #12]
   1b8f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1b8fa:	68fb      	ldr	r3, [r7, #12]
   1b8fc:	68da      	ldr	r2, [r3, #12]
   1b8fe:	68fb      	ldr	r3, [r7, #12]
   1b900:	681b      	ldr	r3, [r3, #0]
   1b902:	429a      	cmp	r2, r3
   1b904:	d207      	bcs.n	1b916 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1b906:	68fb      	ldr	r3, [r7, #12]
   1b908:	685a      	ldr	r2, [r3, #4]
   1b90a:	68fb      	ldr	r3, [r7, #12]
   1b90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b90e:	425b      	negs	r3, r3
   1b910:	18d2      	adds	r2, r2, r3
   1b912:	68fb      	ldr	r3, [r7, #12]
   1b914:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1b916:	687b      	ldr	r3, [r7, #4]
   1b918:	2b02      	cmp	r3, #2
   1b91a:	d105      	bne.n	1b928 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1b91c:	693b      	ldr	r3, [r7, #16]
   1b91e:	2b00      	cmp	r3, #0
   1b920:	d002      	beq.n	1b928 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1b922:	693b      	ldr	r3, [r7, #16]
   1b924:	3b01      	subs	r3, #1
   1b926:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1b928:	693b      	ldr	r3, [r7, #16]
   1b92a:	1c5a      	adds	r2, r3, #1
   1b92c:	68fb      	ldr	r3, [r7, #12]
   1b92e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1b930:	697b      	ldr	r3, [r7, #20]
}
   1b932:	0018      	movs	r0, r3
   1b934:	46bd      	mov	sp, r7
   1b936:	b006      	add	sp, #24
   1b938:	bd80      	pop	{r7, pc}
   1b93a:	46c0      	nop			; (mov r8, r8)
   1b93c:	0001cf81 	.word	0x0001cf81
   1b940:	0003484d 	.word	0x0003484d

0001b944 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1b944:	b580      	push	{r7, lr}
   1b946:	b082      	sub	sp, #8
   1b948:	af00      	add	r7, sp, #0
   1b94a:	6078      	str	r0, [r7, #4]
   1b94c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1b94e:	687b      	ldr	r3, [r7, #4]
   1b950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b952:	2b00      	cmp	r3, #0
   1b954:	d018      	beq.n	1b988 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1b956:	687b      	ldr	r3, [r7, #4]
   1b958:	68da      	ldr	r2, [r3, #12]
   1b95a:	687b      	ldr	r3, [r7, #4]
   1b95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b95e:	18d2      	adds	r2, r2, r3
   1b960:	687b      	ldr	r3, [r7, #4]
   1b962:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1b964:	687b      	ldr	r3, [r7, #4]
   1b966:	68da      	ldr	r2, [r3, #12]
   1b968:	687b      	ldr	r3, [r7, #4]
   1b96a:	685b      	ldr	r3, [r3, #4]
   1b96c:	429a      	cmp	r2, r3
   1b96e:	d303      	bcc.n	1b978 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1b970:	687b      	ldr	r3, [r7, #4]
   1b972:	681a      	ldr	r2, [r3, #0]
   1b974:	687b      	ldr	r3, [r7, #4]
   1b976:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1b978:	687b      	ldr	r3, [r7, #4]
   1b97a:	68d9      	ldr	r1, [r3, #12]
   1b97c:	687b      	ldr	r3, [r7, #4]
   1b97e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b980:	683b      	ldr	r3, [r7, #0]
   1b982:	0018      	movs	r0, r3
   1b984:	4b02      	ldr	r3, [pc, #8]	; (1b990 <prvCopyDataFromQueue+0x4c>)
   1b986:	4798      	blx	r3
	}
}
   1b988:	46c0      	nop			; (mov r8, r8)
   1b98a:	46bd      	mov	sp, r7
   1b98c:	b002      	add	sp, #8
   1b98e:	bd80      	pop	{r7, pc}
   1b990:	0003484d 	.word	0x0003484d

0001b994 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1b994:	b580      	push	{r7, lr}
   1b996:	b084      	sub	sp, #16
   1b998:	af00      	add	r7, sp, #0
   1b99a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1b99c:	4b34      	ldr	r3, [pc, #208]	; (1ba70 <prvUnlockQueue+0xdc>)
   1b99e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1b9a0:	230f      	movs	r3, #15
   1b9a2:	18fb      	adds	r3, r7, r3
   1b9a4:	687a      	ldr	r2, [r7, #4]
   1b9a6:	2145      	movs	r1, #69	; 0x45
   1b9a8:	5c52      	ldrb	r2, [r2, r1]
   1b9aa:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1b9ac:	e022      	b.n	1b9f4 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1b9ae:	687b      	ldr	r3, [r7, #4]
   1b9b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b9b2:	2b00      	cmp	r3, #0
   1b9b4:	d009      	beq.n	1b9ca <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1b9b6:	687b      	ldr	r3, [r7, #4]
   1b9b8:	2100      	movs	r1, #0
   1b9ba:	0018      	movs	r0, r3
   1b9bc:	4b2d      	ldr	r3, [pc, #180]	; (1ba74 <prvUnlockQueue+0xe0>)
   1b9be:	4798      	blx	r3
   1b9c0:	1e03      	subs	r3, r0, #0
   1b9c2:	d00f      	beq.n	1b9e4 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1b9c4:	4b2c      	ldr	r3, [pc, #176]	; (1ba78 <prvUnlockQueue+0xe4>)
   1b9c6:	4798      	blx	r3
   1b9c8:	e00c      	b.n	1b9e4 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b9ca:	687b      	ldr	r3, [r7, #4]
   1b9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b9ce:	2b00      	cmp	r3, #0
   1b9d0:	d017      	beq.n	1ba02 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b9d2:	687b      	ldr	r3, [r7, #4]
   1b9d4:	3324      	adds	r3, #36	; 0x24
   1b9d6:	0018      	movs	r0, r3
   1b9d8:	4b28      	ldr	r3, [pc, #160]	; (1ba7c <prvUnlockQueue+0xe8>)
   1b9da:	4798      	blx	r3
   1b9dc:	1e03      	subs	r3, r0, #0
   1b9de:	d001      	beq.n	1b9e4 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1b9e0:	4b25      	ldr	r3, [pc, #148]	; (1ba78 <prvUnlockQueue+0xe4>)
   1b9e2:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1b9e4:	230f      	movs	r3, #15
   1b9e6:	18fb      	adds	r3, r7, r3
   1b9e8:	781b      	ldrb	r3, [r3, #0]
   1b9ea:	3b01      	subs	r3, #1
   1b9ec:	b2da      	uxtb	r2, r3
   1b9ee:	230f      	movs	r3, #15
   1b9f0:	18fb      	adds	r3, r7, r3
   1b9f2:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1b9f4:	230f      	movs	r3, #15
   1b9f6:	18fb      	adds	r3, r7, r3
   1b9f8:	781b      	ldrb	r3, [r3, #0]
   1b9fa:	b25b      	sxtb	r3, r3
   1b9fc:	2b00      	cmp	r3, #0
   1b9fe:	dcd6      	bgt.n	1b9ae <prvUnlockQueue+0x1a>
   1ba00:	e000      	b.n	1ba04 <prvUnlockQueue+0x70>
						break;
   1ba02:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1ba04:	687b      	ldr	r3, [r7, #4]
   1ba06:	2245      	movs	r2, #69	; 0x45
   1ba08:	21ff      	movs	r1, #255	; 0xff
   1ba0a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1ba0c:	4b1c      	ldr	r3, [pc, #112]	; (1ba80 <prvUnlockQueue+0xec>)
   1ba0e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1ba10:	4b17      	ldr	r3, [pc, #92]	; (1ba70 <prvUnlockQueue+0xdc>)
   1ba12:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1ba14:	230e      	movs	r3, #14
   1ba16:	18fb      	adds	r3, r7, r3
   1ba18:	687a      	ldr	r2, [r7, #4]
   1ba1a:	2144      	movs	r1, #68	; 0x44
   1ba1c:	5c52      	ldrb	r2, [r2, r1]
   1ba1e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1ba20:	e014      	b.n	1ba4c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1ba22:	687b      	ldr	r3, [r7, #4]
   1ba24:	691b      	ldr	r3, [r3, #16]
   1ba26:	2b00      	cmp	r3, #0
   1ba28:	d017      	beq.n	1ba5a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1ba2a:	687b      	ldr	r3, [r7, #4]
   1ba2c:	3310      	adds	r3, #16
   1ba2e:	0018      	movs	r0, r3
   1ba30:	4b12      	ldr	r3, [pc, #72]	; (1ba7c <prvUnlockQueue+0xe8>)
   1ba32:	4798      	blx	r3
   1ba34:	1e03      	subs	r3, r0, #0
   1ba36:	d001      	beq.n	1ba3c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1ba38:	4b0f      	ldr	r3, [pc, #60]	; (1ba78 <prvUnlockQueue+0xe4>)
   1ba3a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1ba3c:	230e      	movs	r3, #14
   1ba3e:	18fb      	adds	r3, r7, r3
   1ba40:	781b      	ldrb	r3, [r3, #0]
   1ba42:	3b01      	subs	r3, #1
   1ba44:	b2da      	uxtb	r2, r3
   1ba46:	230e      	movs	r3, #14
   1ba48:	18fb      	adds	r3, r7, r3
   1ba4a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1ba4c:	230e      	movs	r3, #14
   1ba4e:	18fb      	adds	r3, r7, r3
   1ba50:	781b      	ldrb	r3, [r3, #0]
   1ba52:	b25b      	sxtb	r3, r3
   1ba54:	2b00      	cmp	r3, #0
   1ba56:	dce4      	bgt.n	1ba22 <prvUnlockQueue+0x8e>
   1ba58:	e000      	b.n	1ba5c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1ba5a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1ba5c:	687b      	ldr	r3, [r7, #4]
   1ba5e:	2244      	movs	r2, #68	; 0x44
   1ba60:	21ff      	movs	r1, #255	; 0xff
   1ba62:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1ba64:	4b06      	ldr	r3, [pc, #24]	; (1ba80 <prvUnlockQueue+0xec>)
   1ba66:	4798      	blx	r3
}
   1ba68:	46c0      	nop			; (mov r8, r8)
   1ba6a:	46bd      	mov	sp, r7
   1ba6c:	b004      	add	sp, #16
   1ba6e:	bd80      	pop	{r7, pc}
   1ba70:	0001a099 	.word	0x0001a099
   1ba74:	0001bb69 	.word	0x0001bb69
   1ba78:	0001cb3d 	.word	0x0001cb3d
   1ba7c:	0001c929 	.word	0x0001c929
   1ba80:	0001a0bd 	.word	0x0001a0bd

0001ba84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1ba84:	b580      	push	{r7, lr}
   1ba86:	b084      	sub	sp, #16
   1ba88:	af00      	add	r7, sp, #0
   1ba8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1ba8c:	4b08      	ldr	r3, [pc, #32]	; (1bab0 <prvIsQueueEmpty+0x2c>)
   1ba8e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1ba90:	687b      	ldr	r3, [r7, #4]
   1ba92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ba94:	2b00      	cmp	r3, #0
   1ba96:	d102      	bne.n	1ba9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1ba98:	2301      	movs	r3, #1
   1ba9a:	60fb      	str	r3, [r7, #12]
   1ba9c:	e001      	b.n	1baa2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1ba9e:	2300      	movs	r3, #0
   1baa0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1baa2:	4b04      	ldr	r3, [pc, #16]	; (1bab4 <prvIsQueueEmpty+0x30>)
   1baa4:	4798      	blx	r3

	return xReturn;
   1baa6:	68fb      	ldr	r3, [r7, #12]
}
   1baa8:	0018      	movs	r0, r3
   1baaa:	46bd      	mov	sp, r7
   1baac:	b004      	add	sp, #16
   1baae:	bd80      	pop	{r7, pc}
   1bab0:	0001a099 	.word	0x0001a099
   1bab4:	0001a0bd 	.word	0x0001a0bd

0001bab8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1bab8:	b580      	push	{r7, lr}
   1baba:	b084      	sub	sp, #16
   1babc:	af00      	add	r7, sp, #0
   1babe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1bac0:	4b09      	ldr	r3, [pc, #36]	; (1bae8 <prvIsQueueFull+0x30>)
   1bac2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1bac4:	687b      	ldr	r3, [r7, #4]
   1bac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1bac8:	687b      	ldr	r3, [r7, #4]
   1baca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1bacc:	429a      	cmp	r2, r3
   1bace:	d102      	bne.n	1bad6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1bad0:	2301      	movs	r3, #1
   1bad2:	60fb      	str	r3, [r7, #12]
   1bad4:	e001      	b.n	1bada <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1bad6:	2300      	movs	r3, #0
   1bad8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1bada:	4b04      	ldr	r3, [pc, #16]	; (1baec <prvIsQueueFull+0x34>)
   1badc:	4798      	blx	r3

	return xReturn;
   1bade:	68fb      	ldr	r3, [r7, #12]
}
   1bae0:	0018      	movs	r0, r3
   1bae2:	46bd      	mov	sp, r7
   1bae4:	b004      	add	sp, #16
   1bae6:	bd80      	pop	{r7, pc}
   1bae8:	0001a099 	.word	0x0001a099
   1baec:	0001a0bd 	.word	0x0001a0bd

0001baf0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1baf0:	b580      	push	{r7, lr}
   1baf2:	b086      	sub	sp, #24
   1baf4:	af00      	add	r7, sp, #0
   1baf6:	60f8      	str	r0, [r7, #12]
   1baf8:	60b9      	str	r1, [r7, #8]
   1bafa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1bafc:	68fb      	ldr	r3, [r7, #12]
   1bafe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1bb00:	4b15      	ldr	r3, [pc, #84]	; (1bb58 <vQueueWaitForMessageRestricted+0x68>)
   1bb02:	4798      	blx	r3
   1bb04:	697b      	ldr	r3, [r7, #20]
   1bb06:	2244      	movs	r2, #68	; 0x44
   1bb08:	5c9b      	ldrb	r3, [r3, r2]
   1bb0a:	b25b      	sxtb	r3, r3
   1bb0c:	3301      	adds	r3, #1
   1bb0e:	d103      	bne.n	1bb18 <vQueueWaitForMessageRestricted+0x28>
   1bb10:	697b      	ldr	r3, [r7, #20]
   1bb12:	2244      	movs	r2, #68	; 0x44
   1bb14:	2100      	movs	r1, #0
   1bb16:	5499      	strb	r1, [r3, r2]
   1bb18:	697b      	ldr	r3, [r7, #20]
   1bb1a:	2245      	movs	r2, #69	; 0x45
   1bb1c:	5c9b      	ldrb	r3, [r3, r2]
   1bb1e:	b25b      	sxtb	r3, r3
   1bb20:	3301      	adds	r3, #1
   1bb22:	d103      	bne.n	1bb2c <vQueueWaitForMessageRestricted+0x3c>
   1bb24:	697b      	ldr	r3, [r7, #20]
   1bb26:	2245      	movs	r2, #69	; 0x45
   1bb28:	2100      	movs	r1, #0
   1bb2a:	5499      	strb	r1, [r3, r2]
   1bb2c:	4b0b      	ldr	r3, [pc, #44]	; (1bb5c <vQueueWaitForMessageRestricted+0x6c>)
   1bb2e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1bb30:	697b      	ldr	r3, [r7, #20]
   1bb32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bb34:	2b00      	cmp	r3, #0
   1bb36:	d106      	bne.n	1bb46 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1bb38:	697b      	ldr	r3, [r7, #20]
   1bb3a:	3324      	adds	r3, #36	; 0x24
   1bb3c:	687a      	ldr	r2, [r7, #4]
   1bb3e:	68b9      	ldr	r1, [r7, #8]
   1bb40:	0018      	movs	r0, r3
   1bb42:	4b07      	ldr	r3, [pc, #28]	; (1bb60 <vQueueWaitForMessageRestricted+0x70>)
   1bb44:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1bb46:	697b      	ldr	r3, [r7, #20]
   1bb48:	0018      	movs	r0, r3
   1bb4a:	4b06      	ldr	r3, [pc, #24]	; (1bb64 <vQueueWaitForMessageRestricted+0x74>)
   1bb4c:	4798      	blx	r3
	}
   1bb4e:	46c0      	nop			; (mov r8, r8)
   1bb50:	46bd      	mov	sp, r7
   1bb52:	b006      	add	sp, #24
   1bb54:	bd80      	pop	{r7, pc}
   1bb56:	46c0      	nop			; (mov r8, r8)
   1bb58:	0001a099 	.word	0x0001a099
   1bb5c:	0001a0bd 	.word	0x0001a0bd
   1bb60:	0001c849 	.word	0x0001c849
   1bb64:	0001b995 	.word	0x0001b995

0001bb68 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1bb68:	b5b0      	push	{r4, r5, r7, lr}
   1bb6a:	b086      	sub	sp, #24
   1bb6c:	af00      	add	r7, sp, #0
   1bb6e:	6078      	str	r0, [r7, #4]
   1bb70:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1bb72:	687b      	ldr	r3, [r7, #4]
   1bb74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1bb76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1bb78:	2300      	movs	r3, #0
   1bb7a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1bb7c:	693b      	ldr	r3, [r7, #16]
   1bb7e:	2b00      	cmp	r3, #0
   1bb80:	d101      	bne.n	1bb86 <prvNotifyQueueSetContainer+0x1e>
   1bb82:	b672      	cpsid	i
   1bb84:	e7fe      	b.n	1bb84 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1bb86:	693b      	ldr	r3, [r7, #16]
   1bb88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1bb8a:	693b      	ldr	r3, [r7, #16]
   1bb8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1bb8e:	429a      	cmp	r2, r3
   1bb90:	d301      	bcc.n	1bb96 <prvNotifyQueueSetContainer+0x2e>
   1bb92:	b672      	cpsid	i
   1bb94:	e7fe      	b.n	1bb94 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1bb96:	693b      	ldr	r3, [r7, #16]
   1bb98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1bb9a:	693b      	ldr	r3, [r7, #16]
   1bb9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1bb9e:	429a      	cmp	r2, r3
   1bba0:	d300      	bcc.n	1bba4 <prvNotifyQueueSetContainer+0x3c>
   1bba2:	e08b      	b.n	1bcbc <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1bba4:	230f      	movs	r3, #15
   1bba6:	18fb      	adds	r3, r7, r3
   1bba8:	693a      	ldr	r2, [r7, #16]
   1bbaa:	2145      	movs	r1, #69	; 0x45
   1bbac:	5c52      	ldrb	r2, [r2, r1]
   1bbae:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1bbb0:	4b45      	ldr	r3, [pc, #276]	; (1bcc8 <prvNotifyQueueSetContainer+0x160>)
   1bbb2:	4798      	blx	r3
   1bbb4:	0003      	movs	r3, r0
   1bbb6:	0018      	movs	r0, r3
   1bbb8:	4b44      	ldr	r3, [pc, #272]	; (1bccc <prvNotifyQueueSetContainer+0x164>)
   1bbba:	4798      	blx	r3
   1bbbc:	0003      	movs	r3, r0
   1bbbe:	001a      	movs	r2, r3
   1bbc0:	4b43      	ldr	r3, [pc, #268]	; (1bcd0 <prvNotifyQueueSetContainer+0x168>)
   1bbc2:	881b      	ldrh	r3, [r3, #0]
   1bbc4:	4013      	ands	r3, r2
   1bbc6:	b29b      	uxth	r3, r3
   1bbc8:	2b00      	cmp	r3, #0
   1bbca:	d02e      	beq.n	1bc2a <prvNotifyQueueSetContainer+0xc2>
   1bbcc:	693b      	ldr	r3, [r7, #16]
   1bbce:	0018      	movs	r0, r3
   1bbd0:	4b40      	ldr	r3, [pc, #256]	; (1bcd4 <prvNotifyQueueSetContainer+0x16c>)
   1bbd2:	4798      	blx	r3
   1bbd4:	0003      	movs	r3, r0
   1bbd6:	001a      	movs	r2, r3
   1bbd8:	4b3d      	ldr	r3, [pc, #244]	; (1bcd0 <prvNotifyQueueSetContainer+0x168>)
   1bbda:	881b      	ldrh	r3, [r3, #0]
   1bbdc:	4013      	ands	r3, r2
   1bbde:	b29b      	uxth	r3, r3
   1bbe0:	2b00      	cmp	r3, #0
   1bbe2:	d022      	beq.n	1bc2a <prvNotifyQueueSetContainer+0xc2>
   1bbe4:	683b      	ldr	r3, [r7, #0]
   1bbe6:	2b00      	cmp	r3, #0
   1bbe8:	d10b      	bne.n	1bc02 <prvNotifyQueueSetContainer+0x9a>
   1bbea:	693b      	ldr	r3, [r7, #16]
   1bbec:	0018      	movs	r0, r3
   1bbee:	4b3a      	ldr	r3, [pc, #232]	; (1bcd8 <prvNotifyQueueSetContainer+0x170>)
   1bbf0:	4798      	blx	r3
   1bbf2:	0003      	movs	r3, r0
   1bbf4:	001a      	movs	r2, r3
   1bbf6:	4b39      	ldr	r3, [pc, #228]	; (1bcdc <prvNotifyQueueSetContainer+0x174>)
   1bbf8:	5c9b      	ldrb	r3, [r3, r2]
   1bbfa:	3320      	adds	r3, #32
   1bbfc:	b2db      	uxtb	r3, r3
   1bbfe:	001d      	movs	r5, r3
   1bc00:	e000      	b.n	1bc04 <prvNotifyQueueSetContainer+0x9c>
   1bc02:	2525      	movs	r5, #37	; 0x25
   1bc04:	693b      	ldr	r3, [r7, #16]
   1bc06:	0018      	movs	r0, r3
   1bc08:	4b33      	ldr	r3, [pc, #204]	; (1bcd8 <prvNotifyQueueSetContainer+0x170>)
   1bc0a:	4798      	blx	r3
   1bc0c:	0003      	movs	r3, r0
   1bc0e:	001a      	movs	r2, r3
   1bc10:	4b32      	ldr	r3, [pc, #200]	; (1bcdc <prvNotifyQueueSetContainer+0x174>)
   1bc12:	5c9c      	ldrb	r4, [r3, r2]
   1bc14:	693b      	ldr	r3, [r7, #16]
   1bc16:	0018      	movs	r0, r3
   1bc18:	4b31      	ldr	r3, [pc, #196]	; (1bce0 <prvNotifyQueueSetContainer+0x178>)
   1bc1a:	4798      	blx	r3
   1bc1c:	0003      	movs	r3, r0
   1bc1e:	b2db      	uxtb	r3, r3
   1bc20:	001a      	movs	r2, r3
   1bc22:	0021      	movs	r1, r4
   1bc24:	0028      	movs	r0, r5
   1bc26:	4b2f      	ldr	r3, [pc, #188]	; (1bce4 <prvNotifyQueueSetContainer+0x17c>)
   1bc28:	4798      	blx	r3
   1bc2a:	693b      	ldr	r3, [r7, #16]
   1bc2c:	0018      	movs	r0, r3
   1bc2e:	4b2a      	ldr	r3, [pc, #168]	; (1bcd8 <prvNotifyQueueSetContainer+0x170>)
   1bc30:	4798      	blx	r3
   1bc32:	0003      	movs	r3, r0
   1bc34:	001a      	movs	r2, r3
   1bc36:	4b29      	ldr	r3, [pc, #164]	; (1bcdc <prvNotifyQueueSetContainer+0x174>)
   1bc38:	5c9c      	ldrb	r4, [r3, r2]
   1bc3a:	693b      	ldr	r3, [r7, #16]
   1bc3c:	0018      	movs	r0, r3
   1bc3e:	4b28      	ldr	r3, [pc, #160]	; (1bce0 <prvNotifyQueueSetContainer+0x178>)
   1bc40:	4798      	blx	r3
   1bc42:	0003      	movs	r3, r0
   1bc44:	b2dd      	uxtb	r5, r3
   1bc46:	693b      	ldr	r3, [r7, #16]
   1bc48:	0018      	movs	r0, r3
   1bc4a:	4b23      	ldr	r3, [pc, #140]	; (1bcd8 <prvNotifyQueueSetContainer+0x170>)
   1bc4c:	4798      	blx	r3
   1bc4e:	0003      	movs	r3, r0
   1bc50:	001a      	movs	r2, r3
   1bc52:	4b22      	ldr	r3, [pc, #136]	; (1bcdc <prvNotifyQueueSetContainer+0x174>)
   1bc54:	5c9b      	ldrb	r3, [r3, r2]
   1bc56:	2b02      	cmp	r3, #2
   1bc58:	d005      	beq.n	1bc66 <prvNotifyQueueSetContainer+0xfe>
   1bc5a:	693b      	ldr	r3, [r7, #16]
   1bc5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bc5e:	b2db      	uxtb	r3, r3
   1bc60:	3301      	adds	r3, #1
   1bc62:	b2db      	uxtb	r3, r3
   1bc64:	e000      	b.n	1bc68 <prvNotifyQueueSetContainer+0x100>
   1bc66:	2300      	movs	r3, #0
   1bc68:	001a      	movs	r2, r3
   1bc6a:	0029      	movs	r1, r5
   1bc6c:	0020      	movs	r0, r4
   1bc6e:	4b1e      	ldr	r3, [pc, #120]	; (1bce8 <prvNotifyQueueSetContainer+0x180>)
   1bc70:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1bc72:	683a      	ldr	r2, [r7, #0]
   1bc74:	1d39      	adds	r1, r7, #4
   1bc76:	693b      	ldr	r3, [r7, #16]
   1bc78:	0018      	movs	r0, r3
   1bc7a:	4b1c      	ldr	r3, [pc, #112]	; (1bcec <prvNotifyQueueSetContainer+0x184>)
   1bc7c:	4798      	blx	r3
   1bc7e:	0003      	movs	r3, r0
   1bc80:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1bc82:	230f      	movs	r3, #15
   1bc84:	18fb      	adds	r3, r7, r3
   1bc86:	781b      	ldrb	r3, [r3, #0]
   1bc88:	b25b      	sxtb	r3, r3
   1bc8a:	3301      	adds	r3, #1
   1bc8c:	d10d      	bne.n	1bcaa <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1bc8e:	693b      	ldr	r3, [r7, #16]
   1bc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bc92:	2b00      	cmp	r3, #0
   1bc94:	d012      	beq.n	1bcbc <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1bc96:	693b      	ldr	r3, [r7, #16]
   1bc98:	3324      	adds	r3, #36	; 0x24
   1bc9a:	0018      	movs	r0, r3
   1bc9c:	4b14      	ldr	r3, [pc, #80]	; (1bcf0 <prvNotifyQueueSetContainer+0x188>)
   1bc9e:	4798      	blx	r3
   1bca0:	1e03      	subs	r3, r0, #0
   1bca2:	d00b      	beq.n	1bcbc <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1bca4:	2301      	movs	r3, #1
   1bca6:	617b      	str	r3, [r7, #20]
   1bca8:	e008      	b.n	1bcbc <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1bcaa:	230f      	movs	r3, #15
   1bcac:	18fb      	adds	r3, r7, r3
   1bcae:	781b      	ldrb	r3, [r3, #0]
   1bcb0:	3301      	adds	r3, #1
   1bcb2:	b2db      	uxtb	r3, r3
   1bcb4:	b259      	sxtb	r1, r3
   1bcb6:	693b      	ldr	r3, [r7, #16]
   1bcb8:	2245      	movs	r2, #69	; 0x45
   1bcba:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1bcbc:	697b      	ldr	r3, [r7, #20]
	}
   1bcbe:	0018      	movs	r0, r3
   1bcc0:	46bd      	mov	sp, r7
   1bcc2:	b006      	add	sp, #24
   1bcc4:	bdb0      	pop	{r4, r5, r7, pc}
   1bcc6:	46c0      	nop			; (mov r8, r8)
   1bcc8:	00018335 	.word	0x00018335
   1bccc:	00018099 	.word	0x00018099
   1bcd0:	20000110 	.word	0x20000110
   1bcd4:	00018159 	.word	0x00018159
   1bcd8:	00018059 	.word	0x00018059
   1bcdc:	20000104 	.word	0x20000104
   1bce0:	00018139 	.word	0x00018139
   1bce4:	00018a91 	.word	0x00018a91
   1bce8:	000190ed 	.word	0x000190ed
   1bcec:	0001b865 	.word	0x0001b865
   1bcf0:	0001c929 	.word	0x0001c929

0001bcf4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1bcf4:	b590      	push	{r4, r7, lr}
   1bcf6:	b08d      	sub	sp, #52	; 0x34
   1bcf8:	af04      	add	r7, sp, #16
   1bcfa:	60f8      	str	r0, [r7, #12]
   1bcfc:	60b9      	str	r1, [r7, #8]
   1bcfe:	603b      	str	r3, [r7, #0]
   1bd00:	1dbb      	adds	r3, r7, #6
   1bd02:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1bd04:	1dbb      	adds	r3, r7, #6
   1bd06:	881b      	ldrh	r3, [r3, #0]
   1bd08:	009b      	lsls	r3, r3, #2
   1bd0a:	0018      	movs	r0, r3
   1bd0c:	4b1d      	ldr	r3, [pc, #116]	; (1bd84 <xTaskCreate+0x90>)
   1bd0e:	4798      	blx	r3
   1bd10:	0003      	movs	r3, r0
   1bd12:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1bd14:	697b      	ldr	r3, [r7, #20]
   1bd16:	2b00      	cmp	r3, #0
   1bd18:	d010      	beq.n	1bd3c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1bd1a:	2054      	movs	r0, #84	; 0x54
   1bd1c:	4b19      	ldr	r3, [pc, #100]	; (1bd84 <xTaskCreate+0x90>)
   1bd1e:	4798      	blx	r3
   1bd20:	0003      	movs	r3, r0
   1bd22:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1bd24:	69fb      	ldr	r3, [r7, #28]
   1bd26:	2b00      	cmp	r3, #0
   1bd28:	d003      	beq.n	1bd32 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1bd2a:	69fb      	ldr	r3, [r7, #28]
   1bd2c:	697a      	ldr	r2, [r7, #20]
   1bd2e:	631a      	str	r2, [r3, #48]	; 0x30
   1bd30:	e006      	b.n	1bd40 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1bd32:	697b      	ldr	r3, [r7, #20]
   1bd34:	0018      	movs	r0, r3
   1bd36:	4b14      	ldr	r3, [pc, #80]	; (1bd88 <xTaskCreate+0x94>)
   1bd38:	4798      	blx	r3
   1bd3a:	e001      	b.n	1bd40 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1bd3c:	2300      	movs	r3, #0
   1bd3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1bd40:	69fb      	ldr	r3, [r7, #28]
   1bd42:	2b00      	cmp	r3, #0
   1bd44:	d016      	beq.n	1bd74 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1bd46:	1dbb      	adds	r3, r7, #6
   1bd48:	881a      	ldrh	r2, [r3, #0]
   1bd4a:	683c      	ldr	r4, [r7, #0]
   1bd4c:	68b9      	ldr	r1, [r7, #8]
   1bd4e:	68f8      	ldr	r0, [r7, #12]
   1bd50:	2300      	movs	r3, #0
   1bd52:	9303      	str	r3, [sp, #12]
   1bd54:	69fb      	ldr	r3, [r7, #28]
   1bd56:	9302      	str	r3, [sp, #8]
   1bd58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bd5a:	9301      	str	r3, [sp, #4]
   1bd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bd5e:	9300      	str	r3, [sp, #0]
   1bd60:	0023      	movs	r3, r4
   1bd62:	4c0a      	ldr	r4, [pc, #40]	; (1bd8c <xTaskCreate+0x98>)
   1bd64:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1bd66:	69fb      	ldr	r3, [r7, #28]
   1bd68:	0018      	movs	r0, r3
   1bd6a:	4b09      	ldr	r3, [pc, #36]	; (1bd90 <xTaskCreate+0x9c>)
   1bd6c:	4798      	blx	r3
			xReturn = pdPASS;
   1bd6e:	2301      	movs	r3, #1
   1bd70:	61bb      	str	r3, [r7, #24]
   1bd72:	e002      	b.n	1bd7a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1bd74:	2301      	movs	r3, #1
   1bd76:	425b      	negs	r3, r3
   1bd78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1bd7a:	69bb      	ldr	r3, [r7, #24]
	}
   1bd7c:	0018      	movs	r0, r3
   1bd7e:	46bd      	mov	sp, r7
   1bd80:	b009      	add	sp, #36	; 0x24
   1bd82:	bd90      	pop	{r4, r7, pc}
   1bd84:	0001a1d1 	.word	0x0001a1d1
   1bd88:	0001a295 	.word	0x0001a295
   1bd8c:	0001bd95 	.word	0x0001bd95
   1bd90:	0001bea5 	.word	0x0001bea5

0001bd94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1bd94:	b580      	push	{r7, lr}
   1bd96:	b086      	sub	sp, #24
   1bd98:	af00      	add	r7, sp, #0
   1bd9a:	60f8      	str	r0, [r7, #12]
   1bd9c:	60b9      	str	r1, [r7, #8]
   1bd9e:	607a      	str	r2, [r7, #4]
   1bda0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1bda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bda4:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1bda6:	687b      	ldr	r3, [r7, #4]
   1bda8:	009b      	lsls	r3, r3, #2
   1bdaa:	001a      	movs	r2, r3
   1bdac:	21a5      	movs	r1, #165	; 0xa5
   1bdae:	4b39      	ldr	r3, [pc, #228]	; (1be94 <prvInitialiseNewTask+0x100>)
   1bdb0:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1bdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bdb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1bdb6:	687b      	ldr	r3, [r7, #4]
   1bdb8:	4937      	ldr	r1, [pc, #220]	; (1be98 <prvInitialiseNewTask+0x104>)
   1bdba:	468c      	mov	ip, r1
   1bdbc:	4463      	add	r3, ip
   1bdbe:	009b      	lsls	r3, r3, #2
   1bdc0:	18d3      	adds	r3, r2, r3
   1bdc2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1bdc4:	693b      	ldr	r3, [r7, #16]
   1bdc6:	2207      	movs	r2, #7
   1bdc8:	4393      	bics	r3, r2
   1bdca:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1bdcc:	693b      	ldr	r3, [r7, #16]
   1bdce:	2207      	movs	r2, #7
   1bdd0:	4013      	ands	r3, r2
   1bdd2:	d001      	beq.n	1bdd8 <prvInitialiseNewTask+0x44>
   1bdd4:	b672      	cpsid	i
   1bdd6:	e7fe      	b.n	1bdd6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1bdd8:	2300      	movs	r3, #0
   1bdda:	617b      	str	r3, [r7, #20]
   1bddc:	e013      	b.n	1be06 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1bdde:	68ba      	ldr	r2, [r7, #8]
   1bde0:	697b      	ldr	r3, [r7, #20]
   1bde2:	18d3      	adds	r3, r2, r3
   1bde4:	7818      	ldrb	r0, [r3, #0]
   1bde6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bde8:	2134      	movs	r1, #52	; 0x34
   1bdea:	697b      	ldr	r3, [r7, #20]
   1bdec:	18d3      	adds	r3, r2, r3
   1bdee:	185b      	adds	r3, r3, r1
   1bdf0:	1c02      	adds	r2, r0, #0
   1bdf2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1bdf4:	68ba      	ldr	r2, [r7, #8]
   1bdf6:	697b      	ldr	r3, [r7, #20]
   1bdf8:	18d3      	adds	r3, r2, r3
   1bdfa:	781b      	ldrb	r3, [r3, #0]
   1bdfc:	2b00      	cmp	r3, #0
   1bdfe:	d006      	beq.n	1be0e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1be00:	697b      	ldr	r3, [r7, #20]
   1be02:	3301      	adds	r3, #1
   1be04:	617b      	str	r3, [r7, #20]
   1be06:	697b      	ldr	r3, [r7, #20]
   1be08:	2b07      	cmp	r3, #7
   1be0a:	d9e8      	bls.n	1bdde <prvInitialiseNewTask+0x4a>
   1be0c:	e000      	b.n	1be10 <prvInitialiseNewTask+0x7c>
		{
			break;
   1be0e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1be10:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be12:	223b      	movs	r2, #59	; 0x3b
   1be14:	2100      	movs	r1, #0
   1be16:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1be18:	6a3b      	ldr	r3, [r7, #32]
   1be1a:	2b04      	cmp	r3, #4
   1be1c:	d901      	bls.n	1be22 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1be1e:	2304      	movs	r3, #4
   1be20:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1be22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be24:	6a3a      	ldr	r2, [r7, #32]
   1be26:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1be28:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be2a:	6a3a      	ldr	r2, [r7, #32]
   1be2c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1be2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be30:	2200      	movs	r2, #0
   1be32:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1be34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be36:	3304      	adds	r3, #4
   1be38:	0018      	movs	r0, r3
   1be3a:	4b18      	ldr	r3, [pc, #96]	; (1be9c <prvInitialiseNewTask+0x108>)
   1be3c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1be3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be40:	3318      	adds	r3, #24
   1be42:	0018      	movs	r0, r3
   1be44:	4b15      	ldr	r3, [pc, #84]	; (1be9c <prvInitialiseNewTask+0x108>)
   1be46:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1be48:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1be4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1be4e:	6a3b      	ldr	r3, [r7, #32]
   1be50:	2205      	movs	r2, #5
   1be52:	1ad2      	subs	r2, r2, r3
   1be54:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1be58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1be5c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1be5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be60:	2200      	movs	r2, #0
   1be62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1be64:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be66:	2250      	movs	r2, #80	; 0x50
   1be68:	2100      	movs	r1, #0
   1be6a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1be6c:	683a      	ldr	r2, [r7, #0]
   1be6e:	68f9      	ldr	r1, [r7, #12]
   1be70:	693b      	ldr	r3, [r7, #16]
   1be72:	0018      	movs	r0, r3
   1be74:	4b0a      	ldr	r3, [pc, #40]	; (1bea0 <prvInitialiseNewTask+0x10c>)
   1be76:	4798      	blx	r3
   1be78:	0002      	movs	r2, r0
   1be7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be7c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1be7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1be80:	2b00      	cmp	r3, #0
   1be82:	d002      	beq.n	1be8a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1be84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1be86:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1be88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1be8a:	46c0      	nop			; (mov r8, r8)
   1be8c:	46bd      	mov	sp, r7
   1be8e:	b006      	add	sp, #24
   1be90:	bd80      	pop	{r7, pc}
   1be92:	46c0      	nop			; (mov r8, r8)
   1be94:	00034883 	.word	0x00034883
   1be98:	3fffffff 	.word	0x3fffffff
   1be9c:	00019e4d 	.word	0x00019e4d
   1bea0:	00019f65 	.word	0x00019f65

0001bea4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1bea4:	b580      	push	{r7, lr}
   1bea6:	b082      	sub	sp, #8
   1bea8:	af00      	add	r7, sp, #0
   1beaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1beac:	4b60      	ldr	r3, [pc, #384]	; (1c030 <prvAddNewTaskToReadyList+0x18c>)
   1beae:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1beb0:	4b60      	ldr	r3, [pc, #384]	; (1c034 <prvAddNewTaskToReadyList+0x190>)
   1beb2:	681b      	ldr	r3, [r3, #0]
   1beb4:	1c5a      	adds	r2, r3, #1
   1beb6:	4b5f      	ldr	r3, [pc, #380]	; (1c034 <prvAddNewTaskToReadyList+0x190>)
   1beb8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1beba:	4b5f      	ldr	r3, [pc, #380]	; (1c038 <prvAddNewTaskToReadyList+0x194>)
   1bebc:	681b      	ldr	r3, [r3, #0]
   1bebe:	2b00      	cmp	r3, #0
   1bec0:	d109      	bne.n	1bed6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1bec2:	4b5d      	ldr	r3, [pc, #372]	; (1c038 <prvAddNewTaskToReadyList+0x194>)
   1bec4:	687a      	ldr	r2, [r7, #4]
   1bec6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1bec8:	4b5a      	ldr	r3, [pc, #360]	; (1c034 <prvAddNewTaskToReadyList+0x190>)
   1beca:	681b      	ldr	r3, [r3, #0]
   1becc:	2b01      	cmp	r3, #1
   1bece:	d110      	bne.n	1bef2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1bed0:	4b5a      	ldr	r3, [pc, #360]	; (1c03c <prvAddNewTaskToReadyList+0x198>)
   1bed2:	4798      	blx	r3
   1bed4:	e00d      	b.n	1bef2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1bed6:	4b5a      	ldr	r3, [pc, #360]	; (1c040 <prvAddNewTaskToReadyList+0x19c>)
   1bed8:	681b      	ldr	r3, [r3, #0]
   1beda:	2b00      	cmp	r3, #0
   1bedc:	d109      	bne.n	1bef2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1bede:	4b56      	ldr	r3, [pc, #344]	; (1c038 <prvAddNewTaskToReadyList+0x194>)
   1bee0:	681b      	ldr	r3, [r3, #0]
   1bee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bee4:	687b      	ldr	r3, [r7, #4]
   1bee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bee8:	429a      	cmp	r2, r3
   1beea:	d802      	bhi.n	1bef2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1beec:	4b52      	ldr	r3, [pc, #328]	; (1c038 <prvAddNewTaskToReadyList+0x194>)
   1beee:	687a      	ldr	r2, [r7, #4]
   1bef0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1bef2:	4b54      	ldr	r3, [pc, #336]	; (1c044 <prvAddNewTaskToReadyList+0x1a0>)
   1bef4:	681b      	ldr	r3, [r3, #0]
   1bef6:	1c5a      	adds	r2, r3, #1
   1bef8:	4b52      	ldr	r3, [pc, #328]	; (1c044 <prvAddNewTaskToReadyList+0x1a0>)
   1befa:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1befc:	4b51      	ldr	r3, [pc, #324]	; (1c044 <prvAddNewTaskToReadyList+0x1a0>)
   1befe:	681a      	ldr	r2, [r3, #0]
   1bf00:	687b      	ldr	r3, [r7, #4]
   1bf02:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1bf04:	687b      	ldr	r3, [r7, #4]
   1bf06:	2b00      	cmp	r3, #0
   1bf08:	d052      	beq.n	1bfb0 <prvAddNewTaskToReadyList+0x10c>
   1bf0a:	2003      	movs	r0, #3
   1bf0c:	4b4e      	ldr	r3, [pc, #312]	; (1c048 <prvAddNewTaskToReadyList+0x1a4>)
   1bf0e:	4798      	blx	r3
   1bf10:	0003      	movs	r3, r0
   1bf12:	b29a      	uxth	r2, r3
   1bf14:	687b      	ldr	r3, [r7, #4]
   1bf16:	0011      	movs	r1, r2
   1bf18:	0018      	movs	r0, r3
   1bf1a:	4b4c      	ldr	r3, [pc, #304]	; (1c04c <prvAddNewTaskToReadyList+0x1a8>)
   1bf1c:	4798      	blx	r3
   1bf1e:	4b4c      	ldr	r3, [pc, #304]	; (1c050 <prvAddNewTaskToReadyList+0x1ac>)
   1bf20:	881a      	ldrh	r2, [r3, #0]
   1bf22:	687b      	ldr	r3, [r7, #4]
   1bf24:	0011      	movs	r1, r2
   1bf26:	0018      	movs	r0, r3
   1bf28:	4b4a      	ldr	r3, [pc, #296]	; (1c054 <prvAddNewTaskToReadyList+0x1b0>)
   1bf2a:	4798      	blx	r3
   1bf2c:	687b      	ldr	r3, [r7, #4]
   1bf2e:	0018      	movs	r0, r3
   1bf30:	4b49      	ldr	r3, [pc, #292]	; (1c058 <prvAddNewTaskToReadyList+0x1b4>)
   1bf32:	4798      	blx	r3
   1bf34:	0003      	movs	r3, r0
   1bf36:	b2d9      	uxtb	r1, r3
   1bf38:	687b      	ldr	r3, [r7, #4]
   1bf3a:	3334      	adds	r3, #52	; 0x34
   1bf3c:	001a      	movs	r2, r3
   1bf3e:	2003      	movs	r0, #3
   1bf40:	4b46      	ldr	r3, [pc, #280]	; (1c05c <prvAddNewTaskToReadyList+0x1b8>)
   1bf42:	4798      	blx	r3
   1bf44:	687b      	ldr	r3, [r7, #4]
   1bf46:	0018      	movs	r0, r3
   1bf48:	4b43      	ldr	r3, [pc, #268]	; (1c058 <prvAddNewTaskToReadyList+0x1b4>)
   1bf4a:	4798      	blx	r3
   1bf4c:	0003      	movs	r3, r0
   1bf4e:	b2d9      	uxtb	r1, r3
   1bf50:	687b      	ldr	r3, [r7, #4]
   1bf52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bf54:	b2db      	uxtb	r3, r3
   1bf56:	001a      	movs	r2, r3
   1bf58:	2003      	movs	r0, #3
   1bf5a:	4b41      	ldr	r3, [pc, #260]	; (1c060 <prvAddNewTaskToReadyList+0x1bc>)
   1bf5c:	4798      	blx	r3
   1bf5e:	4b41      	ldr	r3, [pc, #260]	; (1c064 <prvAddNewTaskToReadyList+0x1c0>)
   1bf60:	4798      	blx	r3
   1bf62:	0003      	movs	r3, r0
   1bf64:	0018      	movs	r0, r3
   1bf66:	4b40      	ldr	r3, [pc, #256]	; (1c068 <prvAddNewTaskToReadyList+0x1c4>)
   1bf68:	4798      	blx	r3
   1bf6a:	0003      	movs	r3, r0
   1bf6c:	001a      	movs	r2, r3
   1bf6e:	4b3f      	ldr	r3, [pc, #252]	; (1c06c <prvAddNewTaskToReadyList+0x1c8>)
   1bf70:	881b      	ldrh	r3, [r3, #0]
   1bf72:	4013      	ands	r3, r2
   1bf74:	b29b      	uxth	r3, r3
   1bf76:	2b00      	cmp	r3, #0
   1bf78:	d016      	beq.n	1bfa8 <prvAddNewTaskToReadyList+0x104>
   1bf7a:	687b      	ldr	r3, [r7, #4]
   1bf7c:	0018      	movs	r0, r3
   1bf7e:	4b3a      	ldr	r3, [pc, #232]	; (1c068 <prvAddNewTaskToReadyList+0x1c4>)
   1bf80:	4798      	blx	r3
   1bf82:	0003      	movs	r3, r0
   1bf84:	001a      	movs	r2, r3
   1bf86:	4b39      	ldr	r3, [pc, #228]	; (1c06c <prvAddNewTaskToReadyList+0x1c8>)
   1bf88:	881b      	ldrh	r3, [r3, #0]
   1bf8a:	4013      	ands	r3, r2
   1bf8c:	b29b      	uxth	r3, r3
   1bf8e:	2b00      	cmp	r3, #0
   1bf90:	d00a      	beq.n	1bfa8 <prvAddNewTaskToReadyList+0x104>
   1bf92:	687b      	ldr	r3, [r7, #4]
   1bf94:	0018      	movs	r0, r3
   1bf96:	4b30      	ldr	r3, [pc, #192]	; (1c058 <prvAddNewTaskToReadyList+0x1b4>)
   1bf98:	4798      	blx	r3
   1bf9a:	0003      	movs	r3, r0
   1bf9c:	b2db      	uxtb	r3, r3
   1bf9e:	001a      	movs	r2, r3
   1bfa0:	2103      	movs	r1, #3
   1bfa2:	201b      	movs	r0, #27
   1bfa4:	4b32      	ldr	r3, [pc, #200]	; (1c070 <prvAddNewTaskToReadyList+0x1cc>)
   1bfa6:	4798      	blx	r3
   1bfa8:	687b      	ldr	r3, [r7, #4]
   1bfaa:	0018      	movs	r0, r3
   1bfac:	4b31      	ldr	r3, [pc, #196]	; (1c074 <prvAddNewTaskToReadyList+0x1d0>)
   1bfae:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1bfb0:	687b      	ldr	r3, [r7, #4]
   1bfb2:	0018      	movs	r0, r3
   1bfb4:	4b2c      	ldr	r3, [pc, #176]	; (1c068 <prvAddNewTaskToReadyList+0x1c4>)
   1bfb6:	4798      	blx	r3
   1bfb8:	0003      	movs	r3, r0
   1bfba:	001a      	movs	r2, r3
   1bfbc:	4b2b      	ldr	r3, [pc, #172]	; (1c06c <prvAddNewTaskToReadyList+0x1c8>)
   1bfbe:	881b      	ldrh	r3, [r3, #0]
   1bfc0:	4013      	ands	r3, r2
   1bfc2:	b29b      	uxth	r3, r3
   1bfc4:	2b00      	cmp	r3, #0
   1bfc6:	d008      	beq.n	1bfda <prvAddNewTaskToReadyList+0x136>
   1bfc8:	687b      	ldr	r3, [r7, #4]
   1bfca:	0018      	movs	r0, r3
   1bfcc:	4b22      	ldr	r3, [pc, #136]	; (1c058 <prvAddNewTaskToReadyList+0x1b4>)
   1bfce:	4798      	blx	r3
   1bfd0:	0003      	movs	r3, r0
   1bfd2:	b2db      	uxtb	r3, r3
   1bfd4:	0018      	movs	r0, r3
   1bfd6:	4b28      	ldr	r3, [pc, #160]	; (1c078 <prvAddNewTaskToReadyList+0x1d4>)
   1bfd8:	4798      	blx	r3
   1bfda:	687b      	ldr	r3, [r7, #4]
   1bfdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bfde:	4b27      	ldr	r3, [pc, #156]	; (1c07c <prvAddNewTaskToReadyList+0x1d8>)
   1bfe0:	681b      	ldr	r3, [r3, #0]
   1bfe2:	429a      	cmp	r2, r3
   1bfe4:	d903      	bls.n	1bfee <prvAddNewTaskToReadyList+0x14a>
   1bfe6:	687b      	ldr	r3, [r7, #4]
   1bfe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bfea:	4b24      	ldr	r3, [pc, #144]	; (1c07c <prvAddNewTaskToReadyList+0x1d8>)
   1bfec:	601a      	str	r2, [r3, #0]
   1bfee:	687b      	ldr	r3, [r7, #4]
   1bff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bff2:	0013      	movs	r3, r2
   1bff4:	009b      	lsls	r3, r3, #2
   1bff6:	189b      	adds	r3, r3, r2
   1bff8:	009b      	lsls	r3, r3, #2
   1bffa:	4a21      	ldr	r2, [pc, #132]	; (1c080 <prvAddNewTaskToReadyList+0x1dc>)
   1bffc:	189a      	adds	r2, r3, r2
   1bffe:	687b      	ldr	r3, [r7, #4]
   1c000:	3304      	adds	r3, #4
   1c002:	0019      	movs	r1, r3
   1c004:	0010      	movs	r0, r2
   1c006:	4b1f      	ldr	r3, [pc, #124]	; (1c084 <prvAddNewTaskToReadyList+0x1e0>)
   1c008:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1c00a:	4b1f      	ldr	r3, [pc, #124]	; (1c088 <prvAddNewTaskToReadyList+0x1e4>)
   1c00c:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1c00e:	4b0c      	ldr	r3, [pc, #48]	; (1c040 <prvAddNewTaskToReadyList+0x19c>)
   1c010:	681b      	ldr	r3, [r3, #0]
   1c012:	2b00      	cmp	r3, #0
   1c014:	d008      	beq.n	1c028 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1c016:	4b08      	ldr	r3, [pc, #32]	; (1c038 <prvAddNewTaskToReadyList+0x194>)
   1c018:	681b      	ldr	r3, [r3, #0]
   1c01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c01c:	687b      	ldr	r3, [r7, #4]
   1c01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c020:	429a      	cmp	r2, r3
   1c022:	d201      	bcs.n	1c028 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1c024:	4b19      	ldr	r3, [pc, #100]	; (1c08c <prvAddNewTaskToReadyList+0x1e8>)
   1c026:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1c028:	46c0      	nop			; (mov r8, r8)
   1c02a:	46bd      	mov	sp, r7
   1c02c:	b002      	add	sp, #8
   1c02e:	bd80      	pop	{r7, pc}
   1c030:	0001a099 	.word	0x0001a099
   1c034:	200041b0 	.word	0x200041b0
   1c038:	200040d8 	.word	0x200040d8
   1c03c:	0001cbc5 	.word	0x0001cbc5
   1c040:	200041bc 	.word	0x200041bc
   1c044:	200041cc 	.word	0x200041cc
   1c048:	00019619 	.word	0x00019619
   1c04c:	000180bd 	.word	0x000180bd
   1c050:	20000112 	.word	0x20000112
   1c054:	000180f9 	.word	0x000180f9
   1c058:	00018079 	.word	0x00018079
   1c05c:	00019849 	.word	0x00019849
   1c060:	00018fad 	.word	0x00018fad
   1c064:	00018335 	.word	0x00018335
   1c068:	00018099 	.word	0x00018099
   1c06c:	20000110 	.word	0x20000110
   1c070:	00018a91 	.word	0x00018a91
   1c074:	000181f9 	.word	0x000181f9
   1c078:	00018849 	.word	0x00018849
   1c07c:	200041b8 	.word	0x200041b8
   1c080:	200040dc 	.word	0x200040dc
   1c084:	00019e63 	.word	0x00019e63
   1c088:	0001a0bd 	.word	0x0001a0bd
   1c08c:	0001a081 	.word	0x0001a081

0001c090 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1c090:	b580      	push	{r7, lr}
   1c092:	b084      	sub	sp, #16
   1c094:	af00      	add	r7, sp, #0
   1c096:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1c098:	2300      	movs	r3, #0
   1c09a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1c09c:	687b      	ldr	r3, [r7, #4]
   1c09e:	2b00      	cmp	r3, #0
   1c0a0:	d045      	beq.n	1c12e <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1c0a2:	4b27      	ldr	r3, [pc, #156]	; (1c140 <vTaskDelay+0xb0>)
   1c0a4:	681b      	ldr	r3, [r3, #0]
   1c0a6:	2b00      	cmp	r3, #0
   1c0a8:	d001      	beq.n	1c0ae <vTaskDelay+0x1e>
   1c0aa:	b672      	cpsid	i
   1c0ac:	e7fe      	b.n	1c0ac <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1c0ae:	4b25      	ldr	r3, [pc, #148]	; (1c144 <vTaskDelay+0xb4>)
   1c0b0:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1c0b2:	4b25      	ldr	r3, [pc, #148]	; (1c148 <vTaskDelay+0xb8>)
   1c0b4:	681b      	ldr	r3, [r3, #0]
   1c0b6:	0018      	movs	r0, r3
   1c0b8:	4b24      	ldr	r3, [pc, #144]	; (1c14c <vTaskDelay+0xbc>)
   1c0ba:	4798      	blx	r3
   1c0bc:	0003      	movs	r3, r0
   1c0be:	001a      	movs	r2, r3
   1c0c0:	4b23      	ldr	r3, [pc, #140]	; (1c150 <vTaskDelay+0xc0>)
   1c0c2:	881b      	ldrh	r3, [r3, #0]
   1c0c4:	4013      	ands	r3, r2
   1c0c6:	b29b      	uxth	r3, r3
   1c0c8:	2b00      	cmp	r3, #0
   1c0ca:	d00e      	beq.n	1c0ea <vTaskDelay+0x5a>
   1c0cc:	687b      	ldr	r3, [r7, #4]
   1c0ce:	0019      	movs	r1, r3
   1c0d0:	2089      	movs	r0, #137	; 0x89
   1c0d2:	4b20      	ldr	r3, [pc, #128]	; (1c154 <vTaskDelay+0xc4>)
   1c0d4:	4798      	blx	r3
   1c0d6:	4b1c      	ldr	r3, [pc, #112]	; (1c148 <vTaskDelay+0xb8>)
   1c0d8:	681b      	ldr	r3, [r3, #0]
   1c0da:	0018      	movs	r0, r3
   1c0dc:	4b1e      	ldr	r3, [pc, #120]	; (1c158 <vTaskDelay+0xc8>)
   1c0de:	4798      	blx	r3
   1c0e0:	0003      	movs	r3, r0
   1c0e2:	b2db      	uxtb	r3, r3
   1c0e4:	0018      	movs	r0, r3
   1c0e6:	4b1d      	ldr	r3, [pc, #116]	; (1c15c <vTaskDelay+0xcc>)
   1c0e8:	4798      	blx	r3
   1c0ea:	4b1d      	ldr	r3, [pc, #116]	; (1c160 <vTaskDelay+0xd0>)
   1c0ec:	4798      	blx	r3
   1c0ee:	0003      	movs	r3, r0
   1c0f0:	0018      	movs	r0, r3
   1c0f2:	4b16      	ldr	r3, [pc, #88]	; (1c14c <vTaskDelay+0xbc>)
   1c0f4:	4798      	blx	r3
   1c0f6:	0003      	movs	r3, r0
   1c0f8:	001a      	movs	r2, r3
   1c0fa:	4b15      	ldr	r3, [pc, #84]	; (1c150 <vTaskDelay+0xc0>)
   1c0fc:	881b      	ldrh	r3, [r3, #0]
   1c0fe:	4013      	ands	r3, r2
   1c100:	b29b      	uxth	r3, r3
   1c102:	2b00      	cmp	r3, #0
   1c104:	d00a      	beq.n	1c11c <vTaskDelay+0x8c>
   1c106:	4b16      	ldr	r3, [pc, #88]	; (1c160 <vTaskDelay+0xd0>)
   1c108:	4798      	blx	r3
   1c10a:	0003      	movs	r3, r0
   1c10c:	0018      	movs	r0, r3
   1c10e:	4b12      	ldr	r3, [pc, #72]	; (1c158 <vTaskDelay+0xc8>)
   1c110:	4798      	blx	r3
   1c112:	0003      	movs	r3, r0
   1c114:	b2db      	uxtb	r3, r3
   1c116:	0018      	movs	r0, r3
   1c118:	4b10      	ldr	r3, [pc, #64]	; (1c15c <vTaskDelay+0xcc>)
   1c11a:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1c11c:	687b      	ldr	r3, [r7, #4]
   1c11e:	2100      	movs	r1, #0
   1c120:	0018      	movs	r0, r3
   1c122:	4b10      	ldr	r3, [pc, #64]	; (1c164 <vTaskDelay+0xd4>)
   1c124:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1c126:	4b10      	ldr	r3, [pc, #64]	; (1c168 <vTaskDelay+0xd8>)
   1c128:	4798      	blx	r3
   1c12a:	0003      	movs	r3, r0
   1c12c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1c12e:	68fb      	ldr	r3, [r7, #12]
   1c130:	2b00      	cmp	r3, #0
   1c132:	d101      	bne.n	1c138 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1c134:	4b0d      	ldr	r3, [pc, #52]	; (1c16c <vTaskDelay+0xdc>)
   1c136:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c138:	46c0      	nop			; (mov r8, r8)
   1c13a:	46bd      	mov	sp, r7
   1c13c:	b004      	add	sp, #16
   1c13e:	bd80      	pop	{r7, pc}
   1c140:	200041d8 	.word	0x200041d8
   1c144:	0001c351 	.word	0x0001c351
   1c148:	200040d8 	.word	0x200040d8
   1c14c:	00018099 	.word	0x00018099
   1c150:	20000110 	.word	0x20000110
   1c154:	00018d99 	.word	0x00018d99
   1c158:	00018079 	.word	0x00018079
   1c15c:	00019229 	.word	0x00019229
   1c160:	00018335 	.word	0x00018335
   1c164:	0001d2a9 	.word	0x0001d2a9
   1c168:	0001c369 	.word	0x0001c369
   1c16c:	0001a081 	.word	0x0001a081

0001c170 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1c170:	b580      	push	{r7, lr}
   1c172:	b084      	sub	sp, #16
   1c174:	af00      	add	r7, sp, #0
   1c176:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1c178:	4b42      	ldr	r3, [pc, #264]	; (1c284 <vTaskSuspend+0x114>)
   1c17a:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1c17c:	687b      	ldr	r3, [r7, #4]
   1c17e:	2b00      	cmp	r3, #0
   1c180:	d102      	bne.n	1c188 <vTaskSuspend+0x18>
   1c182:	4b41      	ldr	r3, [pc, #260]	; (1c288 <vTaskSuspend+0x118>)
   1c184:	681b      	ldr	r3, [r3, #0]
   1c186:	e000      	b.n	1c18a <vTaskSuspend+0x1a>
   1c188:	687b      	ldr	r3, [r7, #4]
   1c18a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1c18c:	4b3f      	ldr	r3, [pc, #252]	; (1c28c <vTaskSuspend+0x11c>)
   1c18e:	4798      	blx	r3
   1c190:	0003      	movs	r3, r0
   1c192:	0018      	movs	r0, r3
   1c194:	4b3e      	ldr	r3, [pc, #248]	; (1c290 <vTaskSuspend+0x120>)
   1c196:	4798      	blx	r3
   1c198:	0003      	movs	r3, r0
   1c19a:	001a      	movs	r2, r3
   1c19c:	4b3d      	ldr	r3, [pc, #244]	; (1c294 <vTaskSuspend+0x124>)
   1c19e:	881b      	ldrh	r3, [r3, #0]
   1c1a0:	4013      	ands	r3, r2
   1c1a2:	b29b      	uxth	r3, r3
   1c1a4:	2b00      	cmp	r3, #0
   1c1a6:	d016      	beq.n	1c1d6 <vTaskSuspend+0x66>
   1c1a8:	68fb      	ldr	r3, [r7, #12]
   1c1aa:	0018      	movs	r0, r3
   1c1ac:	4b38      	ldr	r3, [pc, #224]	; (1c290 <vTaskSuspend+0x120>)
   1c1ae:	4798      	blx	r3
   1c1b0:	0003      	movs	r3, r0
   1c1b2:	001a      	movs	r2, r3
   1c1b4:	4b37      	ldr	r3, [pc, #220]	; (1c294 <vTaskSuspend+0x124>)
   1c1b6:	881b      	ldrh	r3, [r3, #0]
   1c1b8:	4013      	ands	r3, r2
   1c1ba:	b29b      	uxth	r3, r3
   1c1bc:	2b00      	cmp	r3, #0
   1c1be:	d00a      	beq.n	1c1d6 <vTaskSuspend+0x66>
   1c1c0:	68fb      	ldr	r3, [r7, #12]
   1c1c2:	0018      	movs	r0, r3
   1c1c4:	4b34      	ldr	r3, [pc, #208]	; (1c298 <vTaskSuspend+0x128>)
   1c1c6:	4798      	blx	r3
   1c1c8:	0003      	movs	r3, r0
   1c1ca:	b2db      	uxtb	r3, r3
   1c1cc:	001a      	movs	r2, r3
   1c1ce:	2103      	movs	r1, #3
   1c1d0:	208a      	movs	r0, #138	; 0x8a
   1c1d2:	4b32      	ldr	r3, [pc, #200]	; (1c29c <vTaskSuspend+0x12c>)
   1c1d4:	4798      	blx	r3
   1c1d6:	68fb      	ldr	r3, [r7, #12]
   1c1d8:	0018      	movs	r0, r3
   1c1da:	4b2f      	ldr	r3, [pc, #188]	; (1c298 <vTaskSuspend+0x128>)
   1c1dc:	4798      	blx	r3
   1c1de:	0003      	movs	r3, r0
   1c1e0:	b2db      	uxtb	r3, r3
   1c1e2:	0018      	movs	r0, r3
   1c1e4:	4b2e      	ldr	r3, [pc, #184]	; (1c2a0 <vTaskSuspend+0x130>)
   1c1e6:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c1e8:	68fb      	ldr	r3, [r7, #12]
   1c1ea:	3304      	adds	r3, #4
   1c1ec:	0018      	movs	r0, r3
   1c1ee:	4b2d      	ldr	r3, [pc, #180]	; (1c2a4 <vTaskSuspend+0x134>)
   1c1f0:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1c1f2:	68fb      	ldr	r3, [r7, #12]
   1c1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c1f6:	2b00      	cmp	r3, #0
   1c1f8:	d004      	beq.n	1c204 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c1fa:	68fb      	ldr	r3, [r7, #12]
   1c1fc:	3318      	adds	r3, #24
   1c1fe:	0018      	movs	r0, r3
   1c200:	4b28      	ldr	r3, [pc, #160]	; (1c2a4 <vTaskSuspend+0x134>)
   1c202:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1c204:	68fb      	ldr	r3, [r7, #12]
   1c206:	1d1a      	adds	r2, r3, #4
   1c208:	4b27      	ldr	r3, [pc, #156]	; (1c2a8 <vTaskSuspend+0x138>)
   1c20a:	0011      	movs	r1, r2
   1c20c:	0018      	movs	r0, r3
   1c20e:	4b27      	ldr	r3, [pc, #156]	; (1c2ac <vTaskSuspend+0x13c>)
   1c210:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1c212:	68fb      	ldr	r3, [r7, #12]
   1c214:	2250      	movs	r2, #80	; 0x50
   1c216:	5c9b      	ldrb	r3, [r3, r2]
   1c218:	b2db      	uxtb	r3, r3
   1c21a:	2b01      	cmp	r3, #1
   1c21c:	d103      	bne.n	1c226 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1c21e:	68fb      	ldr	r3, [r7, #12]
   1c220:	2250      	movs	r2, #80	; 0x50
   1c222:	2100      	movs	r1, #0
   1c224:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1c226:	4b22      	ldr	r3, [pc, #136]	; (1c2b0 <vTaskSuspend+0x140>)
   1c228:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1c22a:	4b22      	ldr	r3, [pc, #136]	; (1c2b4 <vTaskSuspend+0x144>)
   1c22c:	681b      	ldr	r3, [r3, #0]
   1c22e:	2b00      	cmp	r3, #0
   1c230:	d005      	beq.n	1c23e <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1c232:	4b14      	ldr	r3, [pc, #80]	; (1c284 <vTaskSuspend+0x114>)
   1c234:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1c236:	4b20      	ldr	r3, [pc, #128]	; (1c2b8 <vTaskSuspend+0x148>)
   1c238:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1c23a:	4b1d      	ldr	r3, [pc, #116]	; (1c2b0 <vTaskSuspend+0x140>)
   1c23c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1c23e:	4b12      	ldr	r3, [pc, #72]	; (1c288 <vTaskSuspend+0x118>)
   1c240:	681b      	ldr	r3, [r3, #0]
   1c242:	68fa      	ldr	r2, [r7, #12]
   1c244:	429a      	cmp	r2, r3
   1c246:	d118      	bne.n	1c27a <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1c248:	4b1a      	ldr	r3, [pc, #104]	; (1c2b4 <vTaskSuspend+0x144>)
   1c24a:	681b      	ldr	r3, [r3, #0]
   1c24c:	2b00      	cmp	r3, #0
   1c24e:	d008      	beq.n	1c262 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1c250:	4b1a      	ldr	r3, [pc, #104]	; (1c2bc <vTaskSuspend+0x14c>)
   1c252:	681b      	ldr	r3, [r3, #0]
   1c254:	2b00      	cmp	r3, #0
   1c256:	d001      	beq.n	1c25c <vTaskSuspend+0xec>
   1c258:	b672      	cpsid	i
   1c25a:	e7fe      	b.n	1c25a <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1c25c:	4b18      	ldr	r3, [pc, #96]	; (1c2c0 <vTaskSuspend+0x150>)
   1c25e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c260:	e00b      	b.n	1c27a <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1c262:	4b11      	ldr	r3, [pc, #68]	; (1c2a8 <vTaskSuspend+0x138>)
   1c264:	681a      	ldr	r2, [r3, #0]
   1c266:	4b17      	ldr	r3, [pc, #92]	; (1c2c4 <vTaskSuspend+0x154>)
   1c268:	681b      	ldr	r3, [r3, #0]
   1c26a:	429a      	cmp	r2, r3
   1c26c:	d103      	bne.n	1c276 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1c26e:	4b06      	ldr	r3, [pc, #24]	; (1c288 <vTaskSuspend+0x118>)
   1c270:	2200      	movs	r2, #0
   1c272:	601a      	str	r2, [r3, #0]
	}
   1c274:	e001      	b.n	1c27a <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1c276:	4b14      	ldr	r3, [pc, #80]	; (1c2c8 <vTaskSuspend+0x158>)
   1c278:	4798      	blx	r3
	}
   1c27a:	46c0      	nop			; (mov r8, r8)
   1c27c:	46bd      	mov	sp, r7
   1c27e:	b004      	add	sp, #16
   1c280:	bd80      	pop	{r7, pc}
   1c282:	46c0      	nop			; (mov r8, r8)
   1c284:	0001a099 	.word	0x0001a099
   1c288:	200040d8 	.word	0x200040d8
   1c28c:	00018335 	.word	0x00018335
   1c290:	00018099 	.word	0x00018099
   1c294:	20000110 	.word	0x20000110
   1c298:	00018079 	.word	0x00018079
   1c29c:	00018a91 	.word	0x00018a91
   1c2a0:	00019229 	.word	0x00019229
   1c2a4:	00019f13 	.word	0x00019f13
   1c2a8:	2000419c 	.word	0x2000419c
   1c2ac:	00019e63 	.word	0x00019e63
   1c2b0:	0001a0bd 	.word	0x0001a0bd
   1c2b4:	200041bc 	.word	0x200041bc
   1c2b8:	0001cd55 	.word	0x0001cd55
   1c2bc:	200041d8 	.word	0x200041d8
   1c2c0:	0001a081 	.word	0x0001a081
   1c2c4:	200041b0 	.word	0x200041b0
   1c2c8:	0001c6e5 	.word	0x0001c6e5

0001c2cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1c2cc:	b590      	push	{r4, r7, lr}
   1c2ce:	b085      	sub	sp, #20
   1c2d0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1c2d2:	4916      	ldr	r1, [pc, #88]	; (1c32c <vTaskStartScheduler+0x60>)
   1c2d4:	4816      	ldr	r0, [pc, #88]	; (1c330 <vTaskStartScheduler+0x64>)
   1c2d6:	4b17      	ldr	r3, [pc, #92]	; (1c334 <vTaskStartScheduler+0x68>)
   1c2d8:	9301      	str	r3, [sp, #4]
   1c2da:	2300      	movs	r3, #0
   1c2dc:	9300      	str	r3, [sp, #0]
   1c2de:	2300      	movs	r3, #0
   1c2e0:	2296      	movs	r2, #150	; 0x96
   1c2e2:	4c15      	ldr	r4, [pc, #84]	; (1c338 <vTaskStartScheduler+0x6c>)
   1c2e4:	47a0      	blx	r4
   1c2e6:	0003      	movs	r3, r0
   1c2e8:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1c2ea:	687b      	ldr	r3, [r7, #4]
   1c2ec:	2b01      	cmp	r3, #1
   1c2ee:	d103      	bne.n	1c2f8 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1c2f0:	4b12      	ldr	r3, [pc, #72]	; (1c33c <vTaskStartScheduler+0x70>)
   1c2f2:	4798      	blx	r3
   1c2f4:	0003      	movs	r3, r0
   1c2f6:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1c2f8:	687b      	ldr	r3, [r7, #4]
   1c2fa:	2b01      	cmp	r3, #1
   1c2fc:	d10d      	bne.n	1c31a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1c2fe:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1c300:	4b0f      	ldr	r3, [pc, #60]	; (1c340 <vTaskStartScheduler+0x74>)
   1c302:	2201      	movs	r2, #1
   1c304:	4252      	negs	r2, r2
   1c306:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1c308:	4b0e      	ldr	r3, [pc, #56]	; (1c344 <vTaskStartScheduler+0x78>)
   1c30a:	2201      	movs	r2, #1
   1c30c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1c30e:	4b0e      	ldr	r3, [pc, #56]	; (1c348 <vTaskStartScheduler+0x7c>)
   1c310:	2200      	movs	r2, #0
   1c312:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1c314:	4b0d      	ldr	r3, [pc, #52]	; (1c34c <vTaskStartScheduler+0x80>)
   1c316:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1c318:	e004      	b.n	1c324 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1c31a:	687b      	ldr	r3, [r7, #4]
   1c31c:	3301      	adds	r3, #1
   1c31e:	d101      	bne.n	1c324 <vTaskStartScheduler+0x58>
   1c320:	b672      	cpsid	i
   1c322:	e7fe      	b.n	1c322 <vTaskStartScheduler+0x56>
}
   1c324:	46c0      	nop			; (mov r8, r8)
   1c326:	46bd      	mov	sp, r7
   1c328:	b003      	add	sp, #12
   1c32a:	bd90      	pop	{r4, r7, pc}
   1c32c:	000382d4 	.word	0x000382d4
   1c330:	0001cb9d 	.word	0x0001cb9d
   1c334:	200041d4 	.word	0x200041d4
   1c338:	0001bcf5 	.word	0x0001bcf5
   1c33c:	0001d35d 	.word	0x0001d35d
   1c340:	200041d0 	.word	0x200041d0
   1c344:	200041bc 	.word	0x200041bc
   1c348:	200041b4 	.word	0x200041b4
   1c34c:	0001a029 	.word	0x0001a029

0001c350 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1c350:	b580      	push	{r7, lr}
   1c352:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1c354:	4b03      	ldr	r3, [pc, #12]	; (1c364 <vTaskSuspendAll+0x14>)
   1c356:	681b      	ldr	r3, [r3, #0]
   1c358:	1c5a      	adds	r2, r3, #1
   1c35a:	4b02      	ldr	r3, [pc, #8]	; (1c364 <vTaskSuspendAll+0x14>)
   1c35c:	601a      	str	r2, [r3, #0]
}
   1c35e:	46c0      	nop			; (mov r8, r8)
   1c360:	46bd      	mov	sp, r7
   1c362:	bd80      	pop	{r7, pc}
   1c364:	200041d8 	.word	0x200041d8

0001c368 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1c368:	b580      	push	{r7, lr}
   1c36a:	b084      	sub	sp, #16
   1c36c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1c36e:	2300      	movs	r3, #0
   1c370:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1c372:	2300      	movs	r3, #0
   1c374:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1c376:	4b45      	ldr	r3, [pc, #276]	; (1c48c <xTaskResumeAll+0x124>)
   1c378:	681b      	ldr	r3, [r3, #0]
   1c37a:	2b00      	cmp	r3, #0
   1c37c:	d101      	bne.n	1c382 <xTaskResumeAll+0x1a>
   1c37e:	b672      	cpsid	i
   1c380:	e7fe      	b.n	1c380 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1c382:	4b43      	ldr	r3, [pc, #268]	; (1c490 <xTaskResumeAll+0x128>)
   1c384:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1c386:	4b41      	ldr	r3, [pc, #260]	; (1c48c <xTaskResumeAll+0x124>)
   1c388:	681b      	ldr	r3, [r3, #0]
   1c38a:	1e5a      	subs	r2, r3, #1
   1c38c:	4b3f      	ldr	r3, [pc, #252]	; (1c48c <xTaskResumeAll+0x124>)
   1c38e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c390:	4b3e      	ldr	r3, [pc, #248]	; (1c48c <xTaskResumeAll+0x124>)
   1c392:	681b      	ldr	r3, [r3, #0]
   1c394:	2b00      	cmp	r3, #0
   1c396:	d000      	beq.n	1c39a <xTaskResumeAll+0x32>
   1c398:	e071      	b.n	1c47e <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1c39a:	4b3e      	ldr	r3, [pc, #248]	; (1c494 <xTaskResumeAll+0x12c>)
   1c39c:	681b      	ldr	r3, [r3, #0]
   1c39e:	2b00      	cmp	r3, #0
   1c3a0:	d100      	bne.n	1c3a4 <xTaskResumeAll+0x3c>
   1c3a2:	e06c      	b.n	1c47e <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1c3a4:	e044      	b.n	1c430 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1c3a6:	4b3c      	ldr	r3, [pc, #240]	; (1c498 <xTaskResumeAll+0x130>)
   1c3a8:	68db      	ldr	r3, [r3, #12]
   1c3aa:	68db      	ldr	r3, [r3, #12]
   1c3ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c3ae:	68fb      	ldr	r3, [r7, #12]
   1c3b0:	3318      	adds	r3, #24
   1c3b2:	0018      	movs	r0, r3
   1c3b4:	4b39      	ldr	r3, [pc, #228]	; (1c49c <xTaskResumeAll+0x134>)
   1c3b6:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c3b8:	68fb      	ldr	r3, [r7, #12]
   1c3ba:	3304      	adds	r3, #4
   1c3bc:	0018      	movs	r0, r3
   1c3be:	4b37      	ldr	r3, [pc, #220]	; (1c49c <xTaskResumeAll+0x134>)
   1c3c0:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1c3c2:	68fb      	ldr	r3, [r7, #12]
   1c3c4:	0018      	movs	r0, r3
   1c3c6:	4b36      	ldr	r3, [pc, #216]	; (1c4a0 <xTaskResumeAll+0x138>)
   1c3c8:	4798      	blx	r3
   1c3ca:	0003      	movs	r3, r0
   1c3cc:	001a      	movs	r2, r3
   1c3ce:	4b35      	ldr	r3, [pc, #212]	; (1c4a4 <xTaskResumeAll+0x13c>)
   1c3d0:	881b      	ldrh	r3, [r3, #0]
   1c3d2:	4013      	ands	r3, r2
   1c3d4:	b29b      	uxth	r3, r3
   1c3d6:	2b00      	cmp	r3, #0
   1c3d8:	d008      	beq.n	1c3ec <xTaskResumeAll+0x84>
   1c3da:	68fb      	ldr	r3, [r7, #12]
   1c3dc:	0018      	movs	r0, r3
   1c3de:	4b32      	ldr	r3, [pc, #200]	; (1c4a8 <xTaskResumeAll+0x140>)
   1c3e0:	4798      	blx	r3
   1c3e2:	0003      	movs	r3, r0
   1c3e4:	b2db      	uxtb	r3, r3
   1c3e6:	0018      	movs	r0, r3
   1c3e8:	4b30      	ldr	r3, [pc, #192]	; (1c4ac <xTaskResumeAll+0x144>)
   1c3ea:	4798      	blx	r3
   1c3ec:	68fb      	ldr	r3, [r7, #12]
   1c3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c3f0:	4b2f      	ldr	r3, [pc, #188]	; (1c4b0 <xTaskResumeAll+0x148>)
   1c3f2:	681b      	ldr	r3, [r3, #0]
   1c3f4:	429a      	cmp	r2, r3
   1c3f6:	d903      	bls.n	1c400 <xTaskResumeAll+0x98>
   1c3f8:	68fb      	ldr	r3, [r7, #12]
   1c3fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c3fc:	4b2c      	ldr	r3, [pc, #176]	; (1c4b0 <xTaskResumeAll+0x148>)
   1c3fe:	601a      	str	r2, [r3, #0]
   1c400:	68fb      	ldr	r3, [r7, #12]
   1c402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c404:	0013      	movs	r3, r2
   1c406:	009b      	lsls	r3, r3, #2
   1c408:	189b      	adds	r3, r3, r2
   1c40a:	009b      	lsls	r3, r3, #2
   1c40c:	4a29      	ldr	r2, [pc, #164]	; (1c4b4 <xTaskResumeAll+0x14c>)
   1c40e:	189a      	adds	r2, r3, r2
   1c410:	68fb      	ldr	r3, [r7, #12]
   1c412:	3304      	adds	r3, #4
   1c414:	0019      	movs	r1, r3
   1c416:	0010      	movs	r0, r2
   1c418:	4b27      	ldr	r3, [pc, #156]	; (1c4b8 <xTaskResumeAll+0x150>)
   1c41a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1c41c:	68fb      	ldr	r3, [r7, #12]
   1c41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c420:	4b26      	ldr	r3, [pc, #152]	; (1c4bc <xTaskResumeAll+0x154>)
   1c422:	681b      	ldr	r3, [r3, #0]
   1c424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c426:	429a      	cmp	r2, r3
   1c428:	d302      	bcc.n	1c430 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1c42a:	4b25      	ldr	r3, [pc, #148]	; (1c4c0 <xTaskResumeAll+0x158>)
   1c42c:	2201      	movs	r2, #1
   1c42e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1c430:	4b19      	ldr	r3, [pc, #100]	; (1c498 <xTaskResumeAll+0x130>)
   1c432:	681b      	ldr	r3, [r3, #0]
   1c434:	2b00      	cmp	r3, #0
   1c436:	d1b6      	bne.n	1c3a6 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1c438:	68fb      	ldr	r3, [r7, #12]
   1c43a:	2b00      	cmp	r3, #0
   1c43c:	d001      	beq.n	1c442 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1c43e:	4b21      	ldr	r3, [pc, #132]	; (1c4c4 <xTaskResumeAll+0x15c>)
   1c440:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1c442:	4b21      	ldr	r3, [pc, #132]	; (1c4c8 <xTaskResumeAll+0x160>)
   1c444:	681b      	ldr	r3, [r3, #0]
   1c446:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1c448:	687b      	ldr	r3, [r7, #4]
   1c44a:	2b00      	cmp	r3, #0
   1c44c:	d00f      	beq.n	1c46e <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1c44e:	4b1f      	ldr	r3, [pc, #124]	; (1c4cc <xTaskResumeAll+0x164>)
   1c450:	4798      	blx	r3
   1c452:	1e03      	subs	r3, r0, #0
   1c454:	d002      	beq.n	1c45c <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1c456:	4b1a      	ldr	r3, [pc, #104]	; (1c4c0 <xTaskResumeAll+0x158>)
   1c458:	2201      	movs	r2, #1
   1c45a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1c45c:	687b      	ldr	r3, [r7, #4]
   1c45e:	3b01      	subs	r3, #1
   1c460:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1c462:	687b      	ldr	r3, [r7, #4]
   1c464:	2b00      	cmp	r3, #0
   1c466:	d1f2      	bne.n	1c44e <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1c468:	4b17      	ldr	r3, [pc, #92]	; (1c4c8 <xTaskResumeAll+0x160>)
   1c46a:	2200      	movs	r2, #0
   1c46c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1c46e:	4b14      	ldr	r3, [pc, #80]	; (1c4c0 <xTaskResumeAll+0x158>)
   1c470:	681b      	ldr	r3, [r3, #0]
   1c472:	2b00      	cmp	r3, #0
   1c474:	d003      	beq.n	1c47e <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1c476:	2301      	movs	r3, #1
   1c478:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1c47a:	4b15      	ldr	r3, [pc, #84]	; (1c4d0 <xTaskResumeAll+0x168>)
   1c47c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1c47e:	4b15      	ldr	r3, [pc, #84]	; (1c4d4 <xTaskResumeAll+0x16c>)
   1c480:	4798      	blx	r3

	return xAlreadyYielded;
   1c482:	68bb      	ldr	r3, [r7, #8]
}
   1c484:	0018      	movs	r0, r3
   1c486:	46bd      	mov	sp, r7
   1c488:	b004      	add	sp, #16
   1c48a:	bd80      	pop	{r7, pc}
   1c48c:	200041d8 	.word	0x200041d8
   1c490:	0001a099 	.word	0x0001a099
   1c494:	200041b0 	.word	0x200041b0
   1c498:	20004170 	.word	0x20004170
   1c49c:	00019f13 	.word	0x00019f13
   1c4a0:	00018099 	.word	0x00018099
   1c4a4:	20000110 	.word	0x20000110
   1c4a8:	00018079 	.word	0x00018079
   1c4ac:	00018849 	.word	0x00018849
   1c4b0:	200041b8 	.word	0x200041b8
   1c4b4:	200040dc 	.word	0x200040dc
   1c4b8:	00019e63 	.word	0x00019e63
   1c4bc:	200040d8 	.word	0x200040d8
   1c4c0:	200041c4 	.word	0x200041c4
   1c4c4:	0001cd55 	.word	0x0001cd55
   1c4c8:	200041c0 	.word	0x200041c0
   1c4cc:	0001c4f5 	.word	0x0001c4f5
   1c4d0:	0001a081 	.word	0x0001a081
   1c4d4:	0001a0bd 	.word	0x0001a0bd

0001c4d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1c4d8:	b580      	push	{r7, lr}
   1c4da:	b082      	sub	sp, #8
   1c4dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1c4de:	4b04      	ldr	r3, [pc, #16]	; (1c4f0 <xTaskGetTickCount+0x18>)
   1c4e0:	681b      	ldr	r3, [r3, #0]
   1c4e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1c4e4:	687b      	ldr	r3, [r7, #4]
}
   1c4e6:	0018      	movs	r0, r3
   1c4e8:	46bd      	mov	sp, r7
   1c4ea:	b002      	add	sp, #8
   1c4ec:	bd80      	pop	{r7, pc}
   1c4ee:	46c0      	nop			; (mov r8, r8)
   1c4f0:	200041b4 	.word	0x200041b4

0001c4f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1c4f4:	b580      	push	{r7, lr}
   1c4f6:	b086      	sub	sp, #24
   1c4f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1c4fa:	2300      	movs	r3, #0
   1c4fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1c4fe:	4b64      	ldr	r3, [pc, #400]	; (1c690 <xTaskIncrementTick+0x19c>)
   1c500:	681b      	ldr	r3, [r3, #0]
   1c502:	2b01      	cmp	r3, #1
   1c504:	d003      	beq.n	1c50e <xTaskIncrementTick+0x1a>
   1c506:	4b63      	ldr	r3, [pc, #396]	; (1c694 <xTaskIncrementTick+0x1a0>)
   1c508:	681b      	ldr	r3, [r3, #0]
   1c50a:	2b00      	cmp	r3, #0
   1c50c:	d107      	bne.n	1c51e <xTaskIncrementTick+0x2a>
   1c50e:	4b62      	ldr	r3, [pc, #392]	; (1c698 <xTaskIncrementTick+0x1a4>)
   1c510:	681b      	ldr	r3, [r3, #0]
   1c512:	1c5a      	adds	r2, r3, #1
   1c514:	4b60      	ldr	r3, [pc, #384]	; (1c698 <xTaskIncrementTick+0x1a4>)
   1c516:	601a      	str	r2, [r3, #0]
   1c518:	2000      	movs	r0, #0
   1c51a:	4b60      	ldr	r3, [pc, #384]	; (1c69c <xTaskIncrementTick+0x1a8>)
   1c51c:	4798      	blx	r3
   1c51e:	4b5c      	ldr	r3, [pc, #368]	; (1c690 <xTaskIncrementTick+0x19c>)
   1c520:	681b      	ldr	r3, [r3, #0]
   1c522:	2b00      	cmp	r3, #0
   1c524:	d106      	bne.n	1c534 <xTaskIncrementTick+0x40>
   1c526:	4b5e      	ldr	r3, [pc, #376]	; (1c6a0 <xTaskIncrementTick+0x1ac>)
   1c528:	681b      	ldr	r3, [r3, #0]
   1c52a:	3301      	adds	r3, #1
   1c52c:	0019      	movs	r1, r3
   1c52e:	2003      	movs	r0, #3
   1c530:	4b5c      	ldr	r3, [pc, #368]	; (1c6a4 <xTaskIncrementTick+0x1b0>)
   1c532:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c534:	4b56      	ldr	r3, [pc, #344]	; (1c690 <xTaskIncrementTick+0x19c>)
   1c536:	681b      	ldr	r3, [r3, #0]
   1c538:	2b00      	cmp	r3, #0
   1c53a:	d000      	beq.n	1c53e <xTaskIncrementTick+0x4a>
   1c53c:	e098      	b.n	1c670 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1c53e:	4b58      	ldr	r3, [pc, #352]	; (1c6a0 <xTaskIncrementTick+0x1ac>)
   1c540:	681b      	ldr	r3, [r3, #0]
   1c542:	3301      	adds	r3, #1
   1c544:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1c546:	4b56      	ldr	r3, [pc, #344]	; (1c6a0 <xTaskIncrementTick+0x1ac>)
   1c548:	693a      	ldr	r2, [r7, #16]
   1c54a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1c54c:	693b      	ldr	r3, [r7, #16]
   1c54e:	2b00      	cmp	r3, #0
   1c550:	d117      	bne.n	1c582 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1c552:	4b55      	ldr	r3, [pc, #340]	; (1c6a8 <xTaskIncrementTick+0x1b4>)
   1c554:	681b      	ldr	r3, [r3, #0]
   1c556:	681b      	ldr	r3, [r3, #0]
   1c558:	2b00      	cmp	r3, #0
   1c55a:	d001      	beq.n	1c560 <xTaskIncrementTick+0x6c>
   1c55c:	b672      	cpsid	i
   1c55e:	e7fe      	b.n	1c55e <xTaskIncrementTick+0x6a>
   1c560:	4b51      	ldr	r3, [pc, #324]	; (1c6a8 <xTaskIncrementTick+0x1b4>)
   1c562:	681b      	ldr	r3, [r3, #0]
   1c564:	60fb      	str	r3, [r7, #12]
   1c566:	4b51      	ldr	r3, [pc, #324]	; (1c6ac <xTaskIncrementTick+0x1b8>)
   1c568:	681a      	ldr	r2, [r3, #0]
   1c56a:	4b4f      	ldr	r3, [pc, #316]	; (1c6a8 <xTaskIncrementTick+0x1b4>)
   1c56c:	601a      	str	r2, [r3, #0]
   1c56e:	4b4f      	ldr	r3, [pc, #316]	; (1c6ac <xTaskIncrementTick+0x1b8>)
   1c570:	68fa      	ldr	r2, [r7, #12]
   1c572:	601a      	str	r2, [r3, #0]
   1c574:	4b4e      	ldr	r3, [pc, #312]	; (1c6b0 <xTaskIncrementTick+0x1bc>)
   1c576:	681b      	ldr	r3, [r3, #0]
   1c578:	1c5a      	adds	r2, r3, #1
   1c57a:	4b4d      	ldr	r3, [pc, #308]	; (1c6b0 <xTaskIncrementTick+0x1bc>)
   1c57c:	601a      	str	r2, [r3, #0]
   1c57e:	4b4d      	ldr	r3, [pc, #308]	; (1c6b4 <xTaskIncrementTick+0x1c0>)
   1c580:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1c582:	4b4d      	ldr	r3, [pc, #308]	; (1c6b8 <xTaskIncrementTick+0x1c4>)
   1c584:	681b      	ldr	r3, [r3, #0]
   1c586:	693a      	ldr	r2, [r7, #16]
   1c588:	429a      	cmp	r2, r3
   1c58a:	d363      	bcc.n	1c654 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1c58c:	4b46      	ldr	r3, [pc, #280]	; (1c6a8 <xTaskIncrementTick+0x1b4>)
   1c58e:	681b      	ldr	r3, [r3, #0]
   1c590:	681b      	ldr	r3, [r3, #0]
   1c592:	2b00      	cmp	r3, #0
   1c594:	d101      	bne.n	1c59a <xTaskIncrementTick+0xa6>
   1c596:	2301      	movs	r3, #1
   1c598:	e000      	b.n	1c59c <xTaskIncrementTick+0xa8>
   1c59a:	2300      	movs	r3, #0
   1c59c:	2b00      	cmp	r3, #0
   1c59e:	d004      	beq.n	1c5aa <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c5a0:	4b45      	ldr	r3, [pc, #276]	; (1c6b8 <xTaskIncrementTick+0x1c4>)
   1c5a2:	2201      	movs	r2, #1
   1c5a4:	4252      	negs	r2, r2
   1c5a6:	601a      	str	r2, [r3, #0]
					break;
   1c5a8:	e054      	b.n	1c654 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1c5aa:	4b3f      	ldr	r3, [pc, #252]	; (1c6a8 <xTaskIncrementTick+0x1b4>)
   1c5ac:	681b      	ldr	r3, [r3, #0]
   1c5ae:	68db      	ldr	r3, [r3, #12]
   1c5b0:	68db      	ldr	r3, [r3, #12]
   1c5b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1c5b4:	68bb      	ldr	r3, [r7, #8]
   1c5b6:	685b      	ldr	r3, [r3, #4]
   1c5b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1c5ba:	693a      	ldr	r2, [r7, #16]
   1c5bc:	687b      	ldr	r3, [r7, #4]
   1c5be:	429a      	cmp	r2, r3
   1c5c0:	d203      	bcs.n	1c5ca <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1c5c2:	4b3d      	ldr	r3, [pc, #244]	; (1c6b8 <xTaskIncrementTick+0x1c4>)
   1c5c4:	687a      	ldr	r2, [r7, #4]
   1c5c6:	601a      	str	r2, [r3, #0]
						break;
   1c5c8:	e044      	b.n	1c654 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c5ca:	68bb      	ldr	r3, [r7, #8]
   1c5cc:	3304      	adds	r3, #4
   1c5ce:	0018      	movs	r0, r3
   1c5d0:	4b3a      	ldr	r3, [pc, #232]	; (1c6bc <xTaskIncrementTick+0x1c8>)
   1c5d2:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1c5d4:	68bb      	ldr	r3, [r7, #8]
   1c5d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c5d8:	2b00      	cmp	r3, #0
   1c5da:	d004      	beq.n	1c5e6 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c5dc:	68bb      	ldr	r3, [r7, #8]
   1c5de:	3318      	adds	r3, #24
   1c5e0:	0018      	movs	r0, r3
   1c5e2:	4b36      	ldr	r3, [pc, #216]	; (1c6bc <xTaskIncrementTick+0x1c8>)
   1c5e4:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1c5e6:	68bb      	ldr	r3, [r7, #8]
   1c5e8:	0018      	movs	r0, r3
   1c5ea:	4b35      	ldr	r3, [pc, #212]	; (1c6c0 <xTaskIncrementTick+0x1cc>)
   1c5ec:	4798      	blx	r3
   1c5ee:	0003      	movs	r3, r0
   1c5f0:	001a      	movs	r2, r3
   1c5f2:	4b34      	ldr	r3, [pc, #208]	; (1c6c4 <xTaskIncrementTick+0x1d0>)
   1c5f4:	881b      	ldrh	r3, [r3, #0]
   1c5f6:	4013      	ands	r3, r2
   1c5f8:	b29b      	uxth	r3, r3
   1c5fa:	2b00      	cmp	r3, #0
   1c5fc:	d008      	beq.n	1c610 <xTaskIncrementTick+0x11c>
   1c5fe:	68bb      	ldr	r3, [r7, #8]
   1c600:	0018      	movs	r0, r3
   1c602:	4b31      	ldr	r3, [pc, #196]	; (1c6c8 <xTaskIncrementTick+0x1d4>)
   1c604:	4798      	blx	r3
   1c606:	0003      	movs	r3, r0
   1c608:	b2db      	uxtb	r3, r3
   1c60a:	0018      	movs	r0, r3
   1c60c:	4b2f      	ldr	r3, [pc, #188]	; (1c6cc <xTaskIncrementTick+0x1d8>)
   1c60e:	4798      	blx	r3
   1c610:	68bb      	ldr	r3, [r7, #8]
   1c612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c614:	4b2e      	ldr	r3, [pc, #184]	; (1c6d0 <xTaskIncrementTick+0x1dc>)
   1c616:	681b      	ldr	r3, [r3, #0]
   1c618:	429a      	cmp	r2, r3
   1c61a:	d903      	bls.n	1c624 <xTaskIncrementTick+0x130>
   1c61c:	68bb      	ldr	r3, [r7, #8]
   1c61e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c620:	4b2b      	ldr	r3, [pc, #172]	; (1c6d0 <xTaskIncrementTick+0x1dc>)
   1c622:	601a      	str	r2, [r3, #0]
   1c624:	68bb      	ldr	r3, [r7, #8]
   1c626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c628:	0013      	movs	r3, r2
   1c62a:	009b      	lsls	r3, r3, #2
   1c62c:	189b      	adds	r3, r3, r2
   1c62e:	009b      	lsls	r3, r3, #2
   1c630:	4a28      	ldr	r2, [pc, #160]	; (1c6d4 <xTaskIncrementTick+0x1e0>)
   1c632:	189a      	adds	r2, r3, r2
   1c634:	68bb      	ldr	r3, [r7, #8]
   1c636:	3304      	adds	r3, #4
   1c638:	0019      	movs	r1, r3
   1c63a:	0010      	movs	r0, r2
   1c63c:	4b26      	ldr	r3, [pc, #152]	; (1c6d8 <xTaskIncrementTick+0x1e4>)
   1c63e:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1c640:	68bb      	ldr	r3, [r7, #8]
   1c642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c644:	4b25      	ldr	r3, [pc, #148]	; (1c6dc <xTaskIncrementTick+0x1e8>)
   1c646:	681b      	ldr	r3, [r3, #0]
   1c648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c64a:	429a      	cmp	r2, r3
   1c64c:	d39e      	bcc.n	1c58c <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1c64e:	2301      	movs	r3, #1
   1c650:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1c652:	e79b      	b.n	1c58c <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1c654:	4b21      	ldr	r3, [pc, #132]	; (1c6dc <xTaskIncrementTick+0x1e8>)
   1c656:	681b      	ldr	r3, [r3, #0]
   1c658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c65a:	491e      	ldr	r1, [pc, #120]	; (1c6d4 <xTaskIncrementTick+0x1e0>)
   1c65c:	0013      	movs	r3, r2
   1c65e:	009b      	lsls	r3, r3, #2
   1c660:	189b      	adds	r3, r3, r2
   1c662:	009b      	lsls	r3, r3, #2
   1c664:	585b      	ldr	r3, [r3, r1]
   1c666:	2b01      	cmp	r3, #1
   1c668:	d907      	bls.n	1c67a <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1c66a:	2301      	movs	r3, #1
   1c66c:	617b      	str	r3, [r7, #20]
   1c66e:	e004      	b.n	1c67a <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1c670:	4b08      	ldr	r3, [pc, #32]	; (1c694 <xTaskIncrementTick+0x1a0>)
   1c672:	681b      	ldr	r3, [r3, #0]
   1c674:	1c5a      	adds	r2, r3, #1
   1c676:	4b07      	ldr	r3, [pc, #28]	; (1c694 <xTaskIncrementTick+0x1a0>)
   1c678:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1c67a:	4b19      	ldr	r3, [pc, #100]	; (1c6e0 <xTaskIncrementTick+0x1ec>)
   1c67c:	681b      	ldr	r3, [r3, #0]
   1c67e:	2b00      	cmp	r3, #0
   1c680:	d001      	beq.n	1c686 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1c682:	2301      	movs	r3, #1
   1c684:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1c686:	697b      	ldr	r3, [r7, #20]
}
   1c688:	0018      	movs	r0, r3
   1c68a:	46bd      	mov	sp, r7
   1c68c:	b006      	add	sp, #24
   1c68e:	bd80      	pop	{r7, pc}
   1c690:	200041d8 	.word	0x200041d8
   1c694:	200041c0 	.word	0x200041c0
   1c698:	20000d38 	.word	0x20000d38
   1c69c:	00019d2d 	.word	0x00019d2d
   1c6a0:	200041b4 	.word	0x200041b4
   1c6a4:	00018d99 	.word	0x00018d99
   1c6a8:	20004168 	.word	0x20004168
   1c6ac:	2000416c 	.word	0x2000416c
   1c6b0:	200041c8 	.word	0x200041c8
   1c6b4:	0001cd55 	.word	0x0001cd55
   1c6b8:	200041d0 	.word	0x200041d0
   1c6bc:	00019f13 	.word	0x00019f13
   1c6c0:	00018099 	.word	0x00018099
   1c6c4:	20000110 	.word	0x20000110
   1c6c8:	00018079 	.word	0x00018079
   1c6cc:	00018849 	.word	0x00018849
   1c6d0:	200041b8 	.word	0x200041b8
   1c6d4:	200040dc 	.word	0x200040dc
   1c6d8:	00019e63 	.word	0x00019e63
   1c6dc:	200040d8 	.word	0x200040d8
   1c6e0:	200041c4 	.word	0x200041c4

0001c6e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1c6e4:	b580      	push	{r7, lr}
   1c6e6:	b082      	sub	sp, #8
   1c6e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1c6ea:	4b3a      	ldr	r3, [pc, #232]	; (1c7d4 <vTaskSwitchContext+0xf0>)
   1c6ec:	681b      	ldr	r3, [r3, #0]
   1c6ee:	2b00      	cmp	r3, #0
   1c6f0:	d003      	beq.n	1c6fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1c6f2:	4b39      	ldr	r3, [pc, #228]	; (1c7d8 <vTaskSwitchContext+0xf4>)
   1c6f4:	2201      	movs	r2, #1
   1c6f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1c6f8:	e067      	b.n	1c7ca <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1c6fa:	4b37      	ldr	r3, [pc, #220]	; (1c7d8 <vTaskSwitchContext+0xf4>)
   1c6fc:	2200      	movs	r2, #0
   1c6fe:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1c700:	4b36      	ldr	r3, [pc, #216]	; (1c7dc <vTaskSwitchContext+0xf8>)
   1c702:	681b      	ldr	r3, [r3, #0]
   1c704:	681a      	ldr	r2, [r3, #0]
   1c706:	4b35      	ldr	r3, [pc, #212]	; (1c7dc <vTaskSwitchContext+0xf8>)
   1c708:	681b      	ldr	r3, [r3, #0]
   1c70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c70c:	429a      	cmp	r2, r3
   1c70e:	d808      	bhi.n	1c722 <vTaskSwitchContext+0x3e>
   1c710:	4b32      	ldr	r3, [pc, #200]	; (1c7dc <vTaskSwitchContext+0xf8>)
   1c712:	681a      	ldr	r2, [r3, #0]
   1c714:	4b31      	ldr	r3, [pc, #196]	; (1c7dc <vTaskSwitchContext+0xf8>)
   1c716:	681b      	ldr	r3, [r3, #0]
   1c718:	3334      	adds	r3, #52	; 0x34
   1c71a:	0019      	movs	r1, r3
   1c71c:	0010      	movs	r0, r2
   1c71e:	4b30      	ldr	r3, [pc, #192]	; (1c7e0 <vTaskSwitchContext+0xfc>)
   1c720:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1c722:	4b30      	ldr	r3, [pc, #192]	; (1c7e4 <vTaskSwitchContext+0x100>)
   1c724:	681b      	ldr	r3, [r3, #0]
   1c726:	607b      	str	r3, [r7, #4]
   1c728:	e007      	b.n	1c73a <vTaskSwitchContext+0x56>
   1c72a:	687b      	ldr	r3, [r7, #4]
   1c72c:	2b00      	cmp	r3, #0
   1c72e:	d101      	bne.n	1c734 <vTaskSwitchContext+0x50>
   1c730:	b672      	cpsid	i
   1c732:	e7fe      	b.n	1c732 <vTaskSwitchContext+0x4e>
   1c734:	687b      	ldr	r3, [r7, #4]
   1c736:	3b01      	subs	r3, #1
   1c738:	607b      	str	r3, [r7, #4]
   1c73a:	492b      	ldr	r1, [pc, #172]	; (1c7e8 <vTaskSwitchContext+0x104>)
   1c73c:	687a      	ldr	r2, [r7, #4]
   1c73e:	0013      	movs	r3, r2
   1c740:	009b      	lsls	r3, r3, #2
   1c742:	189b      	adds	r3, r3, r2
   1c744:	009b      	lsls	r3, r3, #2
   1c746:	585b      	ldr	r3, [r3, r1]
   1c748:	2b00      	cmp	r3, #0
   1c74a:	d0ee      	beq.n	1c72a <vTaskSwitchContext+0x46>
   1c74c:	687a      	ldr	r2, [r7, #4]
   1c74e:	0013      	movs	r3, r2
   1c750:	009b      	lsls	r3, r3, #2
   1c752:	189b      	adds	r3, r3, r2
   1c754:	009b      	lsls	r3, r3, #2
   1c756:	4a24      	ldr	r2, [pc, #144]	; (1c7e8 <vTaskSwitchContext+0x104>)
   1c758:	189b      	adds	r3, r3, r2
   1c75a:	603b      	str	r3, [r7, #0]
   1c75c:	683b      	ldr	r3, [r7, #0]
   1c75e:	685b      	ldr	r3, [r3, #4]
   1c760:	685a      	ldr	r2, [r3, #4]
   1c762:	683b      	ldr	r3, [r7, #0]
   1c764:	605a      	str	r2, [r3, #4]
   1c766:	683b      	ldr	r3, [r7, #0]
   1c768:	685a      	ldr	r2, [r3, #4]
   1c76a:	683b      	ldr	r3, [r7, #0]
   1c76c:	3308      	adds	r3, #8
   1c76e:	429a      	cmp	r2, r3
   1c770:	d104      	bne.n	1c77c <vTaskSwitchContext+0x98>
   1c772:	683b      	ldr	r3, [r7, #0]
   1c774:	685b      	ldr	r3, [r3, #4]
   1c776:	685a      	ldr	r2, [r3, #4]
   1c778:	683b      	ldr	r3, [r7, #0]
   1c77a:	605a      	str	r2, [r3, #4]
   1c77c:	683b      	ldr	r3, [r7, #0]
   1c77e:	685b      	ldr	r3, [r3, #4]
   1c780:	68da      	ldr	r2, [r3, #12]
   1c782:	4b16      	ldr	r3, [pc, #88]	; (1c7dc <vTaskSwitchContext+0xf8>)
   1c784:	601a      	str	r2, [r3, #0]
   1c786:	4b17      	ldr	r3, [pc, #92]	; (1c7e4 <vTaskSwitchContext+0x100>)
   1c788:	687a      	ldr	r2, [r7, #4]
   1c78a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1c78c:	4b17      	ldr	r3, [pc, #92]	; (1c7ec <vTaskSwitchContext+0x108>)
   1c78e:	2201      	movs	r2, #1
   1c790:	601a      	str	r2, [r3, #0]
   1c792:	4b17      	ldr	r3, [pc, #92]	; (1c7f0 <vTaskSwitchContext+0x10c>)
   1c794:	4798      	blx	r3
   1c796:	0003      	movs	r3, r0
   1c798:	0018      	movs	r0, r3
   1c79a:	4b16      	ldr	r3, [pc, #88]	; (1c7f4 <vTaskSwitchContext+0x110>)
   1c79c:	4798      	blx	r3
   1c79e:	0003      	movs	r3, r0
   1c7a0:	001a      	movs	r2, r3
   1c7a2:	4b15      	ldr	r3, [pc, #84]	; (1c7f8 <vTaskSwitchContext+0x114>)
   1c7a4:	881b      	ldrh	r3, [r3, #0]
   1c7a6:	4013      	ands	r3, r2
   1c7a8:	b29b      	uxth	r3, r3
   1c7aa:	2b00      	cmp	r3, #0
   1c7ac:	d00a      	beq.n	1c7c4 <vTaskSwitchContext+0xe0>
   1c7ae:	4b10      	ldr	r3, [pc, #64]	; (1c7f0 <vTaskSwitchContext+0x10c>)
   1c7b0:	4798      	blx	r3
   1c7b2:	0003      	movs	r3, r0
   1c7b4:	0018      	movs	r0, r3
   1c7b6:	4b11      	ldr	r3, [pc, #68]	; (1c7fc <vTaskSwitchContext+0x118>)
   1c7b8:	4798      	blx	r3
   1c7ba:	0003      	movs	r3, r0
   1c7bc:	b2db      	uxtb	r3, r3
   1c7be:	0018      	movs	r0, r3
   1c7c0:	4b0f      	ldr	r3, [pc, #60]	; (1c800 <vTaskSwitchContext+0x11c>)
   1c7c2:	4798      	blx	r3
   1c7c4:	4b09      	ldr	r3, [pc, #36]	; (1c7ec <vTaskSwitchContext+0x108>)
   1c7c6:	2202      	movs	r2, #2
   1c7c8:	601a      	str	r2, [r3, #0]
}
   1c7ca:	46c0      	nop			; (mov r8, r8)
   1c7cc:	46bd      	mov	sp, r7
   1c7ce:	b002      	add	sp, #8
   1c7d0:	bd80      	pop	{r7, pc}
   1c7d2:	46c0      	nop			; (mov r8, r8)
   1c7d4:	200041d8 	.word	0x200041d8
   1c7d8:	200041c4 	.word	0x200041c4
   1c7dc:	200040d8 	.word	0x200040d8
   1c7e0:	000327ed 	.word	0x000327ed
   1c7e4:	200041b8 	.word	0x200041b8
   1c7e8:	200040dc 	.word	0x200040dc
   1c7ec:	20000d44 	.word	0x20000d44
   1c7f0:	00018335 	.word	0x00018335
   1c7f4:	00018099 	.word	0x00018099
   1c7f8:	20000110 	.word	0x20000110
   1c7fc:	00018079 	.word	0x00018079
   1c800:	00018e95 	.word	0x00018e95

0001c804 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1c804:	b580      	push	{r7, lr}
   1c806:	b082      	sub	sp, #8
   1c808:	af00      	add	r7, sp, #0
   1c80a:	6078      	str	r0, [r7, #4]
   1c80c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1c80e:	687b      	ldr	r3, [r7, #4]
   1c810:	2b00      	cmp	r3, #0
   1c812:	d101      	bne.n	1c818 <vTaskPlaceOnEventList+0x14>
   1c814:	b672      	cpsid	i
   1c816:	e7fe      	b.n	1c816 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1c818:	4b08      	ldr	r3, [pc, #32]	; (1c83c <vTaskPlaceOnEventList+0x38>)
   1c81a:	681b      	ldr	r3, [r3, #0]
   1c81c:	3318      	adds	r3, #24
   1c81e:	001a      	movs	r2, r3
   1c820:	687b      	ldr	r3, [r7, #4]
   1c822:	0011      	movs	r1, r2
   1c824:	0018      	movs	r0, r3
   1c826:	4b06      	ldr	r3, [pc, #24]	; (1c840 <vTaskPlaceOnEventList+0x3c>)
   1c828:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1c82a:	683b      	ldr	r3, [r7, #0]
   1c82c:	2101      	movs	r1, #1
   1c82e:	0018      	movs	r0, r3
   1c830:	4b04      	ldr	r3, [pc, #16]	; (1c844 <vTaskPlaceOnEventList+0x40>)
   1c832:	4798      	blx	r3
}
   1c834:	46c0      	nop			; (mov r8, r8)
   1c836:	46bd      	mov	sp, r7
   1c838:	b002      	add	sp, #8
   1c83a:	bd80      	pop	{r7, pc}
   1c83c:	200040d8 	.word	0x200040d8
   1c840:	00019ea7 	.word	0x00019ea7
   1c844:	0001d2a9 	.word	0x0001d2a9

0001c848 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1c848:	b580      	push	{r7, lr}
   1c84a:	b084      	sub	sp, #16
   1c84c:	af00      	add	r7, sp, #0
   1c84e:	60f8      	str	r0, [r7, #12]
   1c850:	60b9      	str	r1, [r7, #8]
   1c852:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1c854:	68fb      	ldr	r3, [r7, #12]
   1c856:	2b00      	cmp	r3, #0
   1c858:	d101      	bne.n	1c85e <vTaskPlaceOnEventListRestricted+0x16>
   1c85a:	b672      	cpsid	i
   1c85c:	e7fe      	b.n	1c85c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1c85e:	4b28      	ldr	r3, [pc, #160]	; (1c900 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c860:	681b      	ldr	r3, [r3, #0]
   1c862:	3318      	adds	r3, #24
   1c864:	001a      	movs	r2, r3
   1c866:	68fb      	ldr	r3, [r7, #12]
   1c868:	0011      	movs	r1, r2
   1c86a:	0018      	movs	r0, r3
   1c86c:	4b25      	ldr	r3, [pc, #148]	; (1c904 <vTaskPlaceOnEventListRestricted+0xbc>)
   1c86e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1c870:	687b      	ldr	r3, [r7, #4]
   1c872:	2b00      	cmp	r3, #0
   1c874:	d002      	beq.n	1c87c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1c876:	2301      	movs	r3, #1
   1c878:	425b      	negs	r3, r3
   1c87a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1c87c:	4b20      	ldr	r3, [pc, #128]	; (1c900 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c87e:	681b      	ldr	r3, [r3, #0]
   1c880:	0018      	movs	r0, r3
   1c882:	4b21      	ldr	r3, [pc, #132]	; (1c908 <vTaskPlaceOnEventListRestricted+0xc0>)
   1c884:	4798      	blx	r3
   1c886:	0003      	movs	r3, r0
   1c888:	001a      	movs	r2, r3
   1c88a:	4b20      	ldr	r3, [pc, #128]	; (1c90c <vTaskPlaceOnEventListRestricted+0xc4>)
   1c88c:	881b      	ldrh	r3, [r3, #0]
   1c88e:	4013      	ands	r3, r2
   1c890:	b29b      	uxth	r3, r3
   1c892:	2b00      	cmp	r3, #0
   1c894:	d011      	beq.n	1c8ba <vTaskPlaceOnEventListRestricted+0x72>
   1c896:	4b1e      	ldr	r3, [pc, #120]	; (1c910 <vTaskPlaceOnEventListRestricted+0xc8>)
   1c898:	681a      	ldr	r2, [r3, #0]
   1c89a:	68bb      	ldr	r3, [r7, #8]
   1c89c:	18d3      	adds	r3, r2, r3
   1c89e:	0019      	movs	r1, r3
   1c8a0:	2088      	movs	r0, #136	; 0x88
   1c8a2:	4b1c      	ldr	r3, [pc, #112]	; (1c914 <vTaskPlaceOnEventListRestricted+0xcc>)
   1c8a4:	4798      	blx	r3
   1c8a6:	4b16      	ldr	r3, [pc, #88]	; (1c900 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c8a8:	681b      	ldr	r3, [r3, #0]
   1c8aa:	0018      	movs	r0, r3
   1c8ac:	4b1a      	ldr	r3, [pc, #104]	; (1c918 <vTaskPlaceOnEventListRestricted+0xd0>)
   1c8ae:	4798      	blx	r3
   1c8b0:	0003      	movs	r3, r0
   1c8b2:	b2db      	uxtb	r3, r3
   1c8b4:	0018      	movs	r0, r3
   1c8b6:	4b19      	ldr	r3, [pc, #100]	; (1c91c <vTaskPlaceOnEventListRestricted+0xd4>)
   1c8b8:	4798      	blx	r3
   1c8ba:	4b19      	ldr	r3, [pc, #100]	; (1c920 <vTaskPlaceOnEventListRestricted+0xd8>)
   1c8bc:	4798      	blx	r3
   1c8be:	0003      	movs	r3, r0
   1c8c0:	0018      	movs	r0, r3
   1c8c2:	4b11      	ldr	r3, [pc, #68]	; (1c908 <vTaskPlaceOnEventListRestricted+0xc0>)
   1c8c4:	4798      	blx	r3
   1c8c6:	0003      	movs	r3, r0
   1c8c8:	001a      	movs	r2, r3
   1c8ca:	4b10      	ldr	r3, [pc, #64]	; (1c90c <vTaskPlaceOnEventListRestricted+0xc4>)
   1c8cc:	881b      	ldrh	r3, [r3, #0]
   1c8ce:	4013      	ands	r3, r2
   1c8d0:	b29b      	uxth	r3, r3
   1c8d2:	2b00      	cmp	r3, #0
   1c8d4:	d00a      	beq.n	1c8ec <vTaskPlaceOnEventListRestricted+0xa4>
   1c8d6:	4b12      	ldr	r3, [pc, #72]	; (1c920 <vTaskPlaceOnEventListRestricted+0xd8>)
   1c8d8:	4798      	blx	r3
   1c8da:	0003      	movs	r3, r0
   1c8dc:	0018      	movs	r0, r3
   1c8de:	4b0e      	ldr	r3, [pc, #56]	; (1c918 <vTaskPlaceOnEventListRestricted+0xd0>)
   1c8e0:	4798      	blx	r3
   1c8e2:	0003      	movs	r3, r0
   1c8e4:	b2db      	uxtb	r3, r3
   1c8e6:	0018      	movs	r0, r3
   1c8e8:	4b0c      	ldr	r3, [pc, #48]	; (1c91c <vTaskPlaceOnEventListRestricted+0xd4>)
   1c8ea:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1c8ec:	687a      	ldr	r2, [r7, #4]
   1c8ee:	68bb      	ldr	r3, [r7, #8]
   1c8f0:	0011      	movs	r1, r2
   1c8f2:	0018      	movs	r0, r3
   1c8f4:	4b0b      	ldr	r3, [pc, #44]	; (1c924 <vTaskPlaceOnEventListRestricted+0xdc>)
   1c8f6:	4798      	blx	r3
	}
   1c8f8:	46c0      	nop			; (mov r8, r8)
   1c8fa:	46bd      	mov	sp, r7
   1c8fc:	b004      	add	sp, #16
   1c8fe:	bd80      	pop	{r7, pc}
   1c900:	200040d8 	.word	0x200040d8
   1c904:	00019e63 	.word	0x00019e63
   1c908:	00018099 	.word	0x00018099
   1c90c:	20000110 	.word	0x20000110
   1c910:	200041b4 	.word	0x200041b4
   1c914:	00018d99 	.word	0x00018d99
   1c918:	00018079 	.word	0x00018079
   1c91c:	00019229 	.word	0x00019229
   1c920:	00018335 	.word	0x00018335
   1c924:	0001d2a9 	.word	0x0001d2a9

0001c928 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1c928:	b580      	push	{r7, lr}
   1c92a:	b084      	sub	sp, #16
   1c92c:	af00      	add	r7, sp, #0
   1c92e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1c930:	687b      	ldr	r3, [r7, #4]
   1c932:	68db      	ldr	r3, [r3, #12]
   1c934:	68db      	ldr	r3, [r3, #12]
   1c936:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1c938:	68bb      	ldr	r3, [r7, #8]
   1c93a:	2b00      	cmp	r3, #0
   1c93c:	d101      	bne.n	1c942 <xTaskRemoveFromEventList+0x1a>
   1c93e:	b672      	cpsid	i
   1c940:	e7fe      	b.n	1c940 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1c942:	68bb      	ldr	r3, [r7, #8]
   1c944:	3318      	adds	r3, #24
   1c946:	0018      	movs	r0, r3
   1c948:	4b2a      	ldr	r3, [pc, #168]	; (1c9f4 <xTaskRemoveFromEventList+0xcc>)
   1c94a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c94c:	4b2a      	ldr	r3, [pc, #168]	; (1c9f8 <xTaskRemoveFromEventList+0xd0>)
   1c94e:	681b      	ldr	r3, [r3, #0]
   1c950:	2b00      	cmp	r3, #0
   1c952:	d132      	bne.n	1c9ba <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1c954:	68bb      	ldr	r3, [r7, #8]
   1c956:	3304      	adds	r3, #4
   1c958:	0018      	movs	r0, r3
   1c95a:	4b26      	ldr	r3, [pc, #152]	; (1c9f4 <xTaskRemoveFromEventList+0xcc>)
   1c95c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1c95e:	68bb      	ldr	r3, [r7, #8]
   1c960:	0018      	movs	r0, r3
   1c962:	4b26      	ldr	r3, [pc, #152]	; (1c9fc <xTaskRemoveFromEventList+0xd4>)
   1c964:	4798      	blx	r3
   1c966:	0003      	movs	r3, r0
   1c968:	001a      	movs	r2, r3
   1c96a:	4b25      	ldr	r3, [pc, #148]	; (1ca00 <xTaskRemoveFromEventList+0xd8>)
   1c96c:	881b      	ldrh	r3, [r3, #0]
   1c96e:	4013      	ands	r3, r2
   1c970:	b29b      	uxth	r3, r3
   1c972:	2b00      	cmp	r3, #0
   1c974:	d008      	beq.n	1c988 <xTaskRemoveFromEventList+0x60>
   1c976:	68bb      	ldr	r3, [r7, #8]
   1c978:	0018      	movs	r0, r3
   1c97a:	4b22      	ldr	r3, [pc, #136]	; (1ca04 <xTaskRemoveFromEventList+0xdc>)
   1c97c:	4798      	blx	r3
   1c97e:	0003      	movs	r3, r0
   1c980:	b2db      	uxtb	r3, r3
   1c982:	0018      	movs	r0, r3
   1c984:	4b20      	ldr	r3, [pc, #128]	; (1ca08 <xTaskRemoveFromEventList+0xe0>)
   1c986:	4798      	blx	r3
   1c988:	68bb      	ldr	r3, [r7, #8]
   1c98a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c98c:	4b1f      	ldr	r3, [pc, #124]	; (1ca0c <xTaskRemoveFromEventList+0xe4>)
   1c98e:	681b      	ldr	r3, [r3, #0]
   1c990:	429a      	cmp	r2, r3
   1c992:	d903      	bls.n	1c99c <xTaskRemoveFromEventList+0x74>
   1c994:	68bb      	ldr	r3, [r7, #8]
   1c996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c998:	4b1c      	ldr	r3, [pc, #112]	; (1ca0c <xTaskRemoveFromEventList+0xe4>)
   1c99a:	601a      	str	r2, [r3, #0]
   1c99c:	68bb      	ldr	r3, [r7, #8]
   1c99e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c9a0:	0013      	movs	r3, r2
   1c9a2:	009b      	lsls	r3, r3, #2
   1c9a4:	189b      	adds	r3, r3, r2
   1c9a6:	009b      	lsls	r3, r3, #2
   1c9a8:	4a19      	ldr	r2, [pc, #100]	; (1ca10 <xTaskRemoveFromEventList+0xe8>)
   1c9aa:	189a      	adds	r2, r3, r2
   1c9ac:	68bb      	ldr	r3, [r7, #8]
   1c9ae:	3304      	adds	r3, #4
   1c9b0:	0019      	movs	r1, r3
   1c9b2:	0010      	movs	r0, r2
   1c9b4:	4b17      	ldr	r3, [pc, #92]	; (1ca14 <xTaskRemoveFromEventList+0xec>)
   1c9b6:	4798      	blx	r3
   1c9b8:	e007      	b.n	1c9ca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1c9ba:	68bb      	ldr	r3, [r7, #8]
   1c9bc:	3318      	adds	r3, #24
   1c9be:	001a      	movs	r2, r3
   1c9c0:	4b15      	ldr	r3, [pc, #84]	; (1ca18 <xTaskRemoveFromEventList+0xf0>)
   1c9c2:	0011      	movs	r1, r2
   1c9c4:	0018      	movs	r0, r3
   1c9c6:	4b13      	ldr	r3, [pc, #76]	; (1ca14 <xTaskRemoveFromEventList+0xec>)
   1c9c8:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1c9ca:	68bb      	ldr	r3, [r7, #8]
   1c9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c9ce:	4b13      	ldr	r3, [pc, #76]	; (1ca1c <xTaskRemoveFromEventList+0xf4>)
   1c9d0:	681b      	ldr	r3, [r3, #0]
   1c9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c9d4:	429a      	cmp	r2, r3
   1c9d6:	d905      	bls.n	1c9e4 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1c9d8:	2301      	movs	r3, #1
   1c9da:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1c9dc:	4b10      	ldr	r3, [pc, #64]	; (1ca20 <xTaskRemoveFromEventList+0xf8>)
   1c9de:	2201      	movs	r2, #1
   1c9e0:	601a      	str	r2, [r3, #0]
   1c9e2:	e001      	b.n	1c9e8 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1c9e4:	2300      	movs	r3, #0
   1c9e6:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1c9e8:	68fb      	ldr	r3, [r7, #12]
}
   1c9ea:	0018      	movs	r0, r3
   1c9ec:	46bd      	mov	sp, r7
   1c9ee:	b004      	add	sp, #16
   1c9f0:	bd80      	pop	{r7, pc}
   1c9f2:	46c0      	nop			; (mov r8, r8)
   1c9f4:	00019f13 	.word	0x00019f13
   1c9f8:	200041d8 	.word	0x200041d8
   1c9fc:	00018099 	.word	0x00018099
   1ca00:	20000110 	.word	0x20000110
   1ca04:	00018079 	.word	0x00018079
   1ca08:	00018849 	.word	0x00018849
   1ca0c:	200041b8 	.word	0x200041b8
   1ca10:	200040dc 	.word	0x200040dc
   1ca14:	00019e63 	.word	0x00019e63
   1ca18:	20004170 	.word	0x20004170
   1ca1c:	200040d8 	.word	0x200040d8
   1ca20:	200041c4 	.word	0x200041c4

0001ca24 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1ca24:	b580      	push	{r7, lr}
   1ca26:	b082      	sub	sp, #8
   1ca28:	af00      	add	r7, sp, #0
   1ca2a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1ca2c:	687b      	ldr	r3, [r7, #4]
   1ca2e:	2b00      	cmp	r3, #0
   1ca30:	d101      	bne.n	1ca36 <vTaskSetTimeOutState+0x12>
   1ca32:	b672      	cpsid	i
   1ca34:	e7fe      	b.n	1ca34 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1ca36:	4b08      	ldr	r3, [pc, #32]	; (1ca58 <vTaskSetTimeOutState+0x34>)
   1ca38:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1ca3a:	4b08      	ldr	r3, [pc, #32]	; (1ca5c <vTaskSetTimeOutState+0x38>)
   1ca3c:	681a      	ldr	r2, [r3, #0]
   1ca3e:	687b      	ldr	r3, [r7, #4]
   1ca40:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1ca42:	4b07      	ldr	r3, [pc, #28]	; (1ca60 <vTaskSetTimeOutState+0x3c>)
   1ca44:	681a      	ldr	r2, [r3, #0]
   1ca46:	687b      	ldr	r3, [r7, #4]
   1ca48:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1ca4a:	4b06      	ldr	r3, [pc, #24]	; (1ca64 <vTaskSetTimeOutState+0x40>)
   1ca4c:	4798      	blx	r3
}
   1ca4e:	46c0      	nop			; (mov r8, r8)
   1ca50:	46bd      	mov	sp, r7
   1ca52:	b002      	add	sp, #8
   1ca54:	bd80      	pop	{r7, pc}
   1ca56:	46c0      	nop			; (mov r8, r8)
   1ca58:	0001a099 	.word	0x0001a099
   1ca5c:	200041c8 	.word	0x200041c8
   1ca60:	200041b4 	.word	0x200041b4
   1ca64:	0001a0bd 	.word	0x0001a0bd

0001ca68 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1ca68:	b580      	push	{r7, lr}
   1ca6a:	b082      	sub	sp, #8
   1ca6c:	af00      	add	r7, sp, #0
   1ca6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1ca70:	4b05      	ldr	r3, [pc, #20]	; (1ca88 <vTaskInternalSetTimeOutState+0x20>)
   1ca72:	681a      	ldr	r2, [r3, #0]
   1ca74:	687b      	ldr	r3, [r7, #4]
   1ca76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1ca78:	4b04      	ldr	r3, [pc, #16]	; (1ca8c <vTaskInternalSetTimeOutState+0x24>)
   1ca7a:	681a      	ldr	r2, [r3, #0]
   1ca7c:	687b      	ldr	r3, [r7, #4]
   1ca7e:	605a      	str	r2, [r3, #4]
}
   1ca80:	46c0      	nop			; (mov r8, r8)
   1ca82:	46bd      	mov	sp, r7
   1ca84:	b002      	add	sp, #8
   1ca86:	bd80      	pop	{r7, pc}
   1ca88:	200041c8 	.word	0x200041c8
   1ca8c:	200041b4 	.word	0x200041b4

0001ca90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1ca90:	b580      	push	{r7, lr}
   1ca92:	b086      	sub	sp, #24
   1ca94:	af00      	add	r7, sp, #0
   1ca96:	6078      	str	r0, [r7, #4]
   1ca98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1ca9a:	687b      	ldr	r3, [r7, #4]
   1ca9c:	2b00      	cmp	r3, #0
   1ca9e:	d101      	bne.n	1caa4 <xTaskCheckForTimeOut+0x14>
   1caa0:	b672      	cpsid	i
   1caa2:	e7fe      	b.n	1caa2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1caa4:	683b      	ldr	r3, [r7, #0]
   1caa6:	2b00      	cmp	r3, #0
   1caa8:	d101      	bne.n	1caae <xTaskCheckForTimeOut+0x1e>
   1caaa:	b672      	cpsid	i
   1caac:	e7fe      	b.n	1caac <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1caae:	4b1e      	ldr	r3, [pc, #120]	; (1cb28 <xTaskCheckForTimeOut+0x98>)
   1cab0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1cab2:	4b1e      	ldr	r3, [pc, #120]	; (1cb2c <xTaskCheckForTimeOut+0x9c>)
   1cab4:	681b      	ldr	r3, [r3, #0]
   1cab6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1cab8:	687b      	ldr	r3, [r7, #4]
   1caba:	685b      	ldr	r3, [r3, #4]
   1cabc:	693a      	ldr	r2, [r7, #16]
   1cabe:	1ad3      	subs	r3, r2, r3
   1cac0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1cac2:	683b      	ldr	r3, [r7, #0]
   1cac4:	681b      	ldr	r3, [r3, #0]
   1cac6:	3301      	adds	r3, #1
   1cac8:	d102      	bne.n	1cad0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1caca:	2300      	movs	r3, #0
   1cacc:	617b      	str	r3, [r7, #20]
   1cace:	e024      	b.n	1cb1a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1cad0:	687b      	ldr	r3, [r7, #4]
   1cad2:	681a      	ldr	r2, [r3, #0]
   1cad4:	4b16      	ldr	r3, [pc, #88]	; (1cb30 <xTaskCheckForTimeOut+0xa0>)
   1cad6:	681b      	ldr	r3, [r3, #0]
   1cad8:	429a      	cmp	r2, r3
   1cada:	d007      	beq.n	1caec <xTaskCheckForTimeOut+0x5c>
   1cadc:	687b      	ldr	r3, [r7, #4]
   1cade:	685a      	ldr	r2, [r3, #4]
   1cae0:	693b      	ldr	r3, [r7, #16]
   1cae2:	429a      	cmp	r2, r3
   1cae4:	d802      	bhi.n	1caec <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1cae6:	2301      	movs	r3, #1
   1cae8:	617b      	str	r3, [r7, #20]
   1caea:	e016      	b.n	1cb1a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1caec:	683b      	ldr	r3, [r7, #0]
   1caee:	681a      	ldr	r2, [r3, #0]
   1caf0:	68fb      	ldr	r3, [r7, #12]
   1caf2:	429a      	cmp	r2, r3
   1caf4:	d90c      	bls.n	1cb10 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1caf6:	683b      	ldr	r3, [r7, #0]
   1caf8:	681a      	ldr	r2, [r3, #0]
   1cafa:	68fb      	ldr	r3, [r7, #12]
   1cafc:	1ad2      	subs	r2, r2, r3
   1cafe:	683b      	ldr	r3, [r7, #0]
   1cb00:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1cb02:	687b      	ldr	r3, [r7, #4]
   1cb04:	0018      	movs	r0, r3
   1cb06:	4b0b      	ldr	r3, [pc, #44]	; (1cb34 <xTaskCheckForTimeOut+0xa4>)
   1cb08:	4798      	blx	r3
			xReturn = pdFALSE;
   1cb0a:	2300      	movs	r3, #0
   1cb0c:	617b      	str	r3, [r7, #20]
   1cb0e:	e004      	b.n	1cb1a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1cb10:	683b      	ldr	r3, [r7, #0]
   1cb12:	2200      	movs	r2, #0
   1cb14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1cb16:	2301      	movs	r3, #1
   1cb18:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1cb1a:	4b07      	ldr	r3, [pc, #28]	; (1cb38 <xTaskCheckForTimeOut+0xa8>)
   1cb1c:	4798      	blx	r3

	return xReturn;
   1cb1e:	697b      	ldr	r3, [r7, #20]
}
   1cb20:	0018      	movs	r0, r3
   1cb22:	46bd      	mov	sp, r7
   1cb24:	b006      	add	sp, #24
   1cb26:	bd80      	pop	{r7, pc}
   1cb28:	0001a099 	.word	0x0001a099
   1cb2c:	200041b4 	.word	0x200041b4
   1cb30:	200041c8 	.word	0x200041c8
   1cb34:	0001ca69 	.word	0x0001ca69
   1cb38:	0001a0bd 	.word	0x0001a0bd

0001cb3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1cb3c:	b580      	push	{r7, lr}
   1cb3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1cb40:	4b02      	ldr	r3, [pc, #8]	; (1cb4c <vTaskMissedYield+0x10>)
   1cb42:	2201      	movs	r2, #1
   1cb44:	601a      	str	r2, [r3, #0]
}
   1cb46:	46c0      	nop			; (mov r8, r8)
   1cb48:	46bd      	mov	sp, r7
   1cb4a:	bd80      	pop	{r7, pc}
   1cb4c:	200041c4 	.word	0x200041c4

0001cb50 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1cb50:	b580      	push	{r7, lr}
   1cb52:	b084      	sub	sp, #16
   1cb54:	af00      	add	r7, sp, #0
   1cb56:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1cb58:	687b      	ldr	r3, [r7, #4]
   1cb5a:	2b00      	cmp	r3, #0
   1cb5c:	d005      	beq.n	1cb6a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1cb5e:	687b      	ldr	r3, [r7, #4]
   1cb60:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1cb62:	68bb      	ldr	r3, [r7, #8]
   1cb64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1cb66:	60fb      	str	r3, [r7, #12]
   1cb68:	e001      	b.n	1cb6e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1cb6a:	2300      	movs	r3, #0
   1cb6c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1cb6e:	68fb      	ldr	r3, [r7, #12]
	}
   1cb70:	0018      	movs	r0, r3
   1cb72:	46bd      	mov	sp, r7
   1cb74:	b004      	add	sp, #16
   1cb76:	bd80      	pop	{r7, pc}

0001cb78 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1cb78:	b580      	push	{r7, lr}
   1cb7a:	b084      	sub	sp, #16
   1cb7c:	af00      	add	r7, sp, #0
   1cb7e:	6078      	str	r0, [r7, #4]
   1cb80:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1cb82:	687b      	ldr	r3, [r7, #4]
   1cb84:	2b00      	cmp	r3, #0
   1cb86:	d004      	beq.n	1cb92 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1cb88:	687b      	ldr	r3, [r7, #4]
   1cb8a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1cb8c:	68fb      	ldr	r3, [r7, #12]
   1cb8e:	683a      	ldr	r2, [r7, #0]
   1cb90:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1cb92:	46c0      	nop			; (mov r8, r8)
   1cb94:	46bd      	mov	sp, r7
   1cb96:	b004      	add	sp, #16
   1cb98:	bd80      	pop	{r7, pc}
	...

0001cb9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1cb9c:	b580      	push	{r7, lr}
   1cb9e:	b082      	sub	sp, #8
   1cba0:	af00      	add	r7, sp, #0
   1cba2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1cba4:	4b04      	ldr	r3, [pc, #16]	; (1cbb8 <prvIdleTask+0x1c>)
   1cba6:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1cba8:	4b04      	ldr	r3, [pc, #16]	; (1cbbc <prvIdleTask+0x20>)
   1cbaa:	681b      	ldr	r3, [r3, #0]
   1cbac:	2b01      	cmp	r3, #1
   1cbae:	d9f9      	bls.n	1cba4 <prvIdleTask+0x8>
			{
				taskYIELD();
   1cbb0:	4b03      	ldr	r3, [pc, #12]	; (1cbc0 <prvIdleTask+0x24>)
   1cbb2:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1cbb4:	e7f6      	b.n	1cba4 <prvIdleTask+0x8>
   1cbb6:	46c0      	nop			; (mov r8, r8)
   1cbb8:	0001cc51 	.word	0x0001cc51
   1cbbc:	200040dc 	.word	0x200040dc
   1cbc0:	0001a081 	.word	0x0001a081

0001cbc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1cbc4:	b580      	push	{r7, lr}
   1cbc6:	b082      	sub	sp, #8
   1cbc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1cbca:	2300      	movs	r3, #0
   1cbcc:	607b      	str	r3, [r7, #4]
   1cbce:	e00c      	b.n	1cbea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1cbd0:	687a      	ldr	r2, [r7, #4]
   1cbd2:	0013      	movs	r3, r2
   1cbd4:	009b      	lsls	r3, r3, #2
   1cbd6:	189b      	adds	r3, r3, r2
   1cbd8:	009b      	lsls	r3, r3, #2
   1cbda:	4a14      	ldr	r2, [pc, #80]	; (1cc2c <prvInitialiseTaskLists+0x68>)
   1cbdc:	189b      	adds	r3, r3, r2
   1cbde:	0018      	movs	r0, r3
   1cbe0:	4b13      	ldr	r3, [pc, #76]	; (1cc30 <prvInitialiseTaskLists+0x6c>)
   1cbe2:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1cbe4:	687b      	ldr	r3, [r7, #4]
   1cbe6:	3301      	adds	r3, #1
   1cbe8:	607b      	str	r3, [r7, #4]
   1cbea:	687b      	ldr	r3, [r7, #4]
   1cbec:	2b04      	cmp	r3, #4
   1cbee:	d9ef      	bls.n	1cbd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1cbf0:	4b10      	ldr	r3, [pc, #64]	; (1cc34 <prvInitialiseTaskLists+0x70>)
   1cbf2:	0018      	movs	r0, r3
   1cbf4:	4b0e      	ldr	r3, [pc, #56]	; (1cc30 <prvInitialiseTaskLists+0x6c>)
   1cbf6:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1cbf8:	4b0f      	ldr	r3, [pc, #60]	; (1cc38 <prvInitialiseTaskLists+0x74>)
   1cbfa:	0018      	movs	r0, r3
   1cbfc:	4b0c      	ldr	r3, [pc, #48]	; (1cc30 <prvInitialiseTaskLists+0x6c>)
   1cbfe:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1cc00:	4b0e      	ldr	r3, [pc, #56]	; (1cc3c <prvInitialiseTaskLists+0x78>)
   1cc02:	0018      	movs	r0, r3
   1cc04:	4b0a      	ldr	r3, [pc, #40]	; (1cc30 <prvInitialiseTaskLists+0x6c>)
   1cc06:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1cc08:	4b0d      	ldr	r3, [pc, #52]	; (1cc40 <prvInitialiseTaskLists+0x7c>)
   1cc0a:	0018      	movs	r0, r3
   1cc0c:	4b08      	ldr	r3, [pc, #32]	; (1cc30 <prvInitialiseTaskLists+0x6c>)
   1cc0e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1cc10:	4b0c      	ldr	r3, [pc, #48]	; (1cc44 <prvInitialiseTaskLists+0x80>)
   1cc12:	0018      	movs	r0, r3
   1cc14:	4b06      	ldr	r3, [pc, #24]	; (1cc30 <prvInitialiseTaskLists+0x6c>)
   1cc16:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1cc18:	4b0b      	ldr	r3, [pc, #44]	; (1cc48 <prvInitialiseTaskLists+0x84>)
   1cc1a:	4a06      	ldr	r2, [pc, #24]	; (1cc34 <prvInitialiseTaskLists+0x70>)
   1cc1c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1cc1e:	4b0b      	ldr	r3, [pc, #44]	; (1cc4c <prvInitialiseTaskLists+0x88>)
   1cc20:	4a05      	ldr	r2, [pc, #20]	; (1cc38 <prvInitialiseTaskLists+0x74>)
   1cc22:	601a      	str	r2, [r3, #0]
}
   1cc24:	46c0      	nop			; (mov r8, r8)
   1cc26:	46bd      	mov	sp, r7
   1cc28:	b002      	add	sp, #8
   1cc2a:	bd80      	pop	{r7, pc}
   1cc2c:	200040dc 	.word	0x200040dc
   1cc30:	00019e11 	.word	0x00019e11
   1cc34:	20004140 	.word	0x20004140
   1cc38:	20004154 	.word	0x20004154
   1cc3c:	20004170 	.word	0x20004170
   1cc40:	20004184 	.word	0x20004184
   1cc44:	2000419c 	.word	0x2000419c
   1cc48:	20004168 	.word	0x20004168
   1cc4c:	2000416c 	.word	0x2000416c

0001cc50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1cc50:	b580      	push	{r7, lr}
   1cc52:	b082      	sub	sp, #8
   1cc54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1cc56:	e01a      	b.n	1cc8e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1cc58:	4b11      	ldr	r3, [pc, #68]	; (1cca0 <prvCheckTasksWaitingTermination+0x50>)
   1cc5a:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1cc5c:	4b11      	ldr	r3, [pc, #68]	; (1cca4 <prvCheckTasksWaitingTermination+0x54>)
   1cc5e:	68db      	ldr	r3, [r3, #12]
   1cc60:	68db      	ldr	r3, [r3, #12]
   1cc62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1cc64:	687b      	ldr	r3, [r7, #4]
   1cc66:	3304      	adds	r3, #4
   1cc68:	0018      	movs	r0, r3
   1cc6a:	4b0f      	ldr	r3, [pc, #60]	; (1cca8 <prvCheckTasksWaitingTermination+0x58>)
   1cc6c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1cc6e:	4b0f      	ldr	r3, [pc, #60]	; (1ccac <prvCheckTasksWaitingTermination+0x5c>)
   1cc70:	681b      	ldr	r3, [r3, #0]
   1cc72:	1e5a      	subs	r2, r3, #1
   1cc74:	4b0d      	ldr	r3, [pc, #52]	; (1ccac <prvCheckTasksWaitingTermination+0x5c>)
   1cc76:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1cc78:	4b0d      	ldr	r3, [pc, #52]	; (1ccb0 <prvCheckTasksWaitingTermination+0x60>)
   1cc7a:	681b      	ldr	r3, [r3, #0]
   1cc7c:	1e5a      	subs	r2, r3, #1
   1cc7e:	4b0c      	ldr	r3, [pc, #48]	; (1ccb0 <prvCheckTasksWaitingTermination+0x60>)
   1cc80:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1cc82:	4b0c      	ldr	r3, [pc, #48]	; (1ccb4 <prvCheckTasksWaitingTermination+0x64>)
   1cc84:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1cc86:	687b      	ldr	r3, [r7, #4]
   1cc88:	0018      	movs	r0, r3
   1cc8a:	4b0b      	ldr	r3, [pc, #44]	; (1ccb8 <prvCheckTasksWaitingTermination+0x68>)
   1cc8c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1cc8e:	4b08      	ldr	r3, [pc, #32]	; (1ccb0 <prvCheckTasksWaitingTermination+0x60>)
   1cc90:	681b      	ldr	r3, [r3, #0]
   1cc92:	2b00      	cmp	r3, #0
   1cc94:	d1e0      	bne.n	1cc58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1cc96:	46c0      	nop			; (mov r8, r8)
   1cc98:	46bd      	mov	sp, r7
   1cc9a:	b002      	add	sp, #8
   1cc9c:	bd80      	pop	{r7, pc}
   1cc9e:	46c0      	nop			; (mov r8, r8)
   1cca0:	0001a099 	.word	0x0001a099
   1cca4:	20004184 	.word	0x20004184
   1cca8:	00019f13 	.word	0x00019f13
   1ccac:	200041b0 	.word	0x200041b0
   1ccb0:	20004198 	.word	0x20004198
   1ccb4:	0001a0bd 	.word	0x0001a0bd
   1ccb8:	0001cd2d 	.word	0x0001cd2d

0001ccbc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1ccbc:	b580      	push	{r7, lr}
   1ccbe:	b084      	sub	sp, #16
   1ccc0:	af00      	add	r7, sp, #0
   1ccc2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1ccc4:	2300      	movs	r3, #0
   1ccc6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1ccc8:	e005      	b.n	1ccd6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1ccca:	687b      	ldr	r3, [r7, #4]
   1cccc:	3301      	adds	r3, #1
   1ccce:	607b      	str	r3, [r7, #4]
			ulCount++;
   1ccd0:	68fb      	ldr	r3, [r7, #12]
   1ccd2:	3301      	adds	r3, #1
   1ccd4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1ccd6:	687b      	ldr	r3, [r7, #4]
   1ccd8:	781b      	ldrb	r3, [r3, #0]
   1ccda:	2ba5      	cmp	r3, #165	; 0xa5
   1ccdc:	d0f5      	beq.n	1ccca <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1ccde:	68fb      	ldr	r3, [r7, #12]
   1cce0:	089b      	lsrs	r3, r3, #2
   1cce2:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1cce4:	68fb      	ldr	r3, [r7, #12]
   1cce6:	b29b      	uxth	r3, r3
	}
   1cce8:	0018      	movs	r0, r3
   1ccea:	46bd      	mov	sp, r7
   1ccec:	b004      	add	sp, #16
   1ccee:	bd80      	pop	{r7, pc}

0001ccf0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1ccf0:	b580      	push	{r7, lr}
   1ccf2:	b086      	sub	sp, #24
   1ccf4:	af00      	add	r7, sp, #0
   1ccf6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1ccf8:	687b      	ldr	r3, [r7, #4]
   1ccfa:	2b00      	cmp	r3, #0
   1ccfc:	d102      	bne.n	1cd04 <uxTaskGetStackHighWaterMark+0x14>
   1ccfe:	4b09      	ldr	r3, [pc, #36]	; (1cd24 <uxTaskGetStackHighWaterMark+0x34>)
   1cd00:	681b      	ldr	r3, [r3, #0]
   1cd02:	e000      	b.n	1cd06 <uxTaskGetStackHighWaterMark+0x16>
   1cd04:	687b      	ldr	r3, [r7, #4]
   1cd06:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1cd08:	697b      	ldr	r3, [r7, #20]
   1cd0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1cd0c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1cd0e:	693b      	ldr	r3, [r7, #16]
   1cd10:	0018      	movs	r0, r3
   1cd12:	4b05      	ldr	r3, [pc, #20]	; (1cd28 <uxTaskGetStackHighWaterMark+0x38>)
   1cd14:	4798      	blx	r3
   1cd16:	0003      	movs	r3, r0
   1cd18:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1cd1a:	68fb      	ldr	r3, [r7, #12]
	}
   1cd1c:	0018      	movs	r0, r3
   1cd1e:	46bd      	mov	sp, r7
   1cd20:	b006      	add	sp, #24
   1cd22:	bd80      	pop	{r7, pc}
   1cd24:	200040d8 	.word	0x200040d8
   1cd28:	0001ccbd 	.word	0x0001ccbd

0001cd2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1cd2c:	b580      	push	{r7, lr}
   1cd2e:	b082      	sub	sp, #8
   1cd30:	af00      	add	r7, sp, #0
   1cd32:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1cd34:	687b      	ldr	r3, [r7, #4]
   1cd36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1cd38:	0018      	movs	r0, r3
   1cd3a:	4b05      	ldr	r3, [pc, #20]	; (1cd50 <prvDeleteTCB+0x24>)
   1cd3c:	4798      	blx	r3
			vPortFree( pxTCB );
   1cd3e:	687b      	ldr	r3, [r7, #4]
   1cd40:	0018      	movs	r0, r3
   1cd42:	4b03      	ldr	r3, [pc, #12]	; (1cd50 <prvDeleteTCB+0x24>)
   1cd44:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1cd46:	46c0      	nop			; (mov r8, r8)
   1cd48:	46bd      	mov	sp, r7
   1cd4a:	b002      	add	sp, #8
   1cd4c:	bd80      	pop	{r7, pc}
   1cd4e:	46c0      	nop			; (mov r8, r8)
   1cd50:	0001a295 	.word	0x0001a295

0001cd54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1cd54:	b580      	push	{r7, lr}
   1cd56:	b082      	sub	sp, #8
   1cd58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1cd5a:	4b0e      	ldr	r3, [pc, #56]	; (1cd94 <prvResetNextTaskUnblockTime+0x40>)
   1cd5c:	681b      	ldr	r3, [r3, #0]
   1cd5e:	681b      	ldr	r3, [r3, #0]
   1cd60:	2b00      	cmp	r3, #0
   1cd62:	d101      	bne.n	1cd68 <prvResetNextTaskUnblockTime+0x14>
   1cd64:	2301      	movs	r3, #1
   1cd66:	e000      	b.n	1cd6a <prvResetNextTaskUnblockTime+0x16>
   1cd68:	2300      	movs	r3, #0
   1cd6a:	2b00      	cmp	r3, #0
   1cd6c:	d004      	beq.n	1cd78 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1cd6e:	4b0a      	ldr	r3, [pc, #40]	; (1cd98 <prvResetNextTaskUnblockTime+0x44>)
   1cd70:	2201      	movs	r2, #1
   1cd72:	4252      	negs	r2, r2
   1cd74:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1cd76:	e008      	b.n	1cd8a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1cd78:	4b06      	ldr	r3, [pc, #24]	; (1cd94 <prvResetNextTaskUnblockTime+0x40>)
   1cd7a:	681b      	ldr	r3, [r3, #0]
   1cd7c:	68db      	ldr	r3, [r3, #12]
   1cd7e:	68db      	ldr	r3, [r3, #12]
   1cd80:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1cd82:	687b      	ldr	r3, [r7, #4]
   1cd84:	685a      	ldr	r2, [r3, #4]
   1cd86:	4b04      	ldr	r3, [pc, #16]	; (1cd98 <prvResetNextTaskUnblockTime+0x44>)
   1cd88:	601a      	str	r2, [r3, #0]
}
   1cd8a:	46c0      	nop			; (mov r8, r8)
   1cd8c:	46bd      	mov	sp, r7
   1cd8e:	b002      	add	sp, #8
   1cd90:	bd80      	pop	{r7, pc}
   1cd92:	46c0      	nop			; (mov r8, r8)
   1cd94:	20004168 	.word	0x20004168
   1cd98:	200041d0 	.word	0x200041d0

0001cd9c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1cd9c:	b580      	push	{r7, lr}
   1cd9e:	b082      	sub	sp, #8
   1cda0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1cda2:	4b04      	ldr	r3, [pc, #16]	; (1cdb4 <xTaskGetCurrentTaskHandle+0x18>)
   1cda4:	681b      	ldr	r3, [r3, #0]
   1cda6:	607b      	str	r3, [r7, #4]

		return xReturn;
   1cda8:	687b      	ldr	r3, [r7, #4]
	}
   1cdaa:	0018      	movs	r0, r3
   1cdac:	46bd      	mov	sp, r7
   1cdae:	b002      	add	sp, #8
   1cdb0:	bd80      	pop	{r7, pc}
   1cdb2:	46c0      	nop			; (mov r8, r8)
   1cdb4:	200040d8 	.word	0x200040d8

0001cdb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1cdb8:	b580      	push	{r7, lr}
   1cdba:	b082      	sub	sp, #8
   1cdbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1cdbe:	4b0a      	ldr	r3, [pc, #40]	; (1cde8 <xTaskGetSchedulerState+0x30>)
   1cdc0:	681b      	ldr	r3, [r3, #0]
   1cdc2:	2b00      	cmp	r3, #0
   1cdc4:	d102      	bne.n	1cdcc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1cdc6:	2301      	movs	r3, #1
   1cdc8:	607b      	str	r3, [r7, #4]
   1cdca:	e008      	b.n	1cdde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1cdcc:	4b07      	ldr	r3, [pc, #28]	; (1cdec <xTaskGetSchedulerState+0x34>)
   1cdce:	681b      	ldr	r3, [r3, #0]
   1cdd0:	2b00      	cmp	r3, #0
   1cdd2:	d102      	bne.n	1cdda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1cdd4:	2302      	movs	r3, #2
   1cdd6:	607b      	str	r3, [r7, #4]
   1cdd8:	e001      	b.n	1cdde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1cdda:	2300      	movs	r3, #0
   1cddc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1cdde:	687b      	ldr	r3, [r7, #4]
	}
   1cde0:	0018      	movs	r0, r3
   1cde2:	46bd      	mov	sp, r7
   1cde4:	b002      	add	sp, #8
   1cde6:	bd80      	pop	{r7, pc}
   1cde8:	200041bc 	.word	0x200041bc
   1cdec:	200041d8 	.word	0x200041d8

0001cdf0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1cdf0:	b590      	push	{r4, r7, lr}
   1cdf2:	b085      	sub	sp, #20
   1cdf4:	af00      	add	r7, sp, #0
   1cdf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1cdf8:	687b      	ldr	r3, [r7, #4]
   1cdfa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1cdfc:	2300      	movs	r3, #0
   1cdfe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1ce00:	687b      	ldr	r3, [r7, #4]
   1ce02:	2b00      	cmp	r3, #0
   1ce04:	d100      	bne.n	1ce08 <xTaskPriorityInherit+0x18>
   1ce06:	e09d      	b.n	1cf44 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1ce08:	68bb      	ldr	r3, [r7, #8]
   1ce0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ce0c:	4b50      	ldr	r3, [pc, #320]	; (1cf50 <xTaskPriorityInherit+0x160>)
   1ce0e:	681b      	ldr	r3, [r3, #0]
   1ce10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ce12:	429a      	cmp	r2, r3
   1ce14:	d300      	bcc.n	1ce18 <xTaskPriorityInherit+0x28>
   1ce16:	e08c      	b.n	1cf32 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1ce18:	68bb      	ldr	r3, [r7, #8]
   1ce1a:	699b      	ldr	r3, [r3, #24]
   1ce1c:	2b00      	cmp	r3, #0
   1ce1e:	db06      	blt.n	1ce2e <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ce20:	4b4b      	ldr	r3, [pc, #300]	; (1cf50 <xTaskPriorityInherit+0x160>)
   1ce22:	681b      	ldr	r3, [r3, #0]
   1ce24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ce26:	2205      	movs	r2, #5
   1ce28:	1ad2      	subs	r2, r2, r3
   1ce2a:	68bb      	ldr	r3, [r7, #8]
   1ce2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1ce2e:	68bb      	ldr	r3, [r7, #8]
   1ce30:	6959      	ldr	r1, [r3, #20]
   1ce32:	68bb      	ldr	r3, [r7, #8]
   1ce34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ce36:	0013      	movs	r3, r2
   1ce38:	009b      	lsls	r3, r3, #2
   1ce3a:	189b      	adds	r3, r3, r2
   1ce3c:	009b      	lsls	r3, r3, #2
   1ce3e:	4a45      	ldr	r2, [pc, #276]	; (1cf54 <xTaskPriorityInherit+0x164>)
   1ce40:	189b      	adds	r3, r3, r2
   1ce42:	4299      	cmp	r1, r3
   1ce44:	d101      	bne.n	1ce4a <xTaskPriorityInherit+0x5a>
   1ce46:	2301      	movs	r3, #1
   1ce48:	e000      	b.n	1ce4c <xTaskPriorityInherit+0x5c>
   1ce4a:	2300      	movs	r3, #0
   1ce4c:	2b00      	cmp	r3, #0
   1ce4e:	d037      	beq.n	1cec0 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1ce50:	68bb      	ldr	r3, [r7, #8]
   1ce52:	3304      	adds	r3, #4
   1ce54:	0018      	movs	r0, r3
   1ce56:	4b40      	ldr	r3, [pc, #256]	; (1cf58 <xTaskPriorityInherit+0x168>)
   1ce58:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1ce5a:	4b3d      	ldr	r3, [pc, #244]	; (1cf50 <xTaskPriorityInherit+0x160>)
   1ce5c:	681b      	ldr	r3, [r3, #0]
   1ce5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ce60:	68bb      	ldr	r3, [r7, #8]
   1ce62:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1ce64:	68bb      	ldr	r3, [r7, #8]
   1ce66:	0018      	movs	r0, r3
   1ce68:	4b3c      	ldr	r3, [pc, #240]	; (1cf5c <xTaskPriorityInherit+0x16c>)
   1ce6a:	4798      	blx	r3
   1ce6c:	0003      	movs	r3, r0
   1ce6e:	001a      	movs	r2, r3
   1ce70:	4b3b      	ldr	r3, [pc, #236]	; (1cf60 <xTaskPriorityInherit+0x170>)
   1ce72:	881b      	ldrh	r3, [r3, #0]
   1ce74:	4013      	ands	r3, r2
   1ce76:	b29b      	uxth	r3, r3
   1ce78:	2b00      	cmp	r3, #0
   1ce7a:	d008      	beq.n	1ce8e <xTaskPriorityInherit+0x9e>
   1ce7c:	68bb      	ldr	r3, [r7, #8]
   1ce7e:	0018      	movs	r0, r3
   1ce80:	4b38      	ldr	r3, [pc, #224]	; (1cf64 <xTaskPriorityInherit+0x174>)
   1ce82:	4798      	blx	r3
   1ce84:	0003      	movs	r3, r0
   1ce86:	b2db      	uxtb	r3, r3
   1ce88:	0018      	movs	r0, r3
   1ce8a:	4b37      	ldr	r3, [pc, #220]	; (1cf68 <xTaskPriorityInherit+0x178>)
   1ce8c:	4798      	blx	r3
   1ce8e:	68bb      	ldr	r3, [r7, #8]
   1ce90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ce92:	4b36      	ldr	r3, [pc, #216]	; (1cf6c <xTaskPriorityInherit+0x17c>)
   1ce94:	681b      	ldr	r3, [r3, #0]
   1ce96:	429a      	cmp	r2, r3
   1ce98:	d903      	bls.n	1cea2 <xTaskPriorityInherit+0xb2>
   1ce9a:	68bb      	ldr	r3, [r7, #8]
   1ce9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ce9e:	4b33      	ldr	r3, [pc, #204]	; (1cf6c <xTaskPriorityInherit+0x17c>)
   1cea0:	601a      	str	r2, [r3, #0]
   1cea2:	68bb      	ldr	r3, [r7, #8]
   1cea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cea6:	0013      	movs	r3, r2
   1cea8:	009b      	lsls	r3, r3, #2
   1ceaa:	189b      	adds	r3, r3, r2
   1ceac:	009b      	lsls	r3, r3, #2
   1ceae:	4a29      	ldr	r2, [pc, #164]	; (1cf54 <xTaskPriorityInherit+0x164>)
   1ceb0:	189a      	adds	r2, r3, r2
   1ceb2:	68bb      	ldr	r3, [r7, #8]
   1ceb4:	3304      	adds	r3, #4
   1ceb6:	0019      	movs	r1, r3
   1ceb8:	0010      	movs	r0, r2
   1ceba:	4b2d      	ldr	r3, [pc, #180]	; (1cf70 <xTaskPriorityInherit+0x180>)
   1cebc:	4798      	blx	r3
   1cebe:	e004      	b.n	1ceca <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1cec0:	4b23      	ldr	r3, [pc, #140]	; (1cf50 <xTaskPriorityInherit+0x160>)
   1cec2:	681b      	ldr	r3, [r3, #0]
   1cec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cec6:	68bb      	ldr	r3, [r7, #8]
   1cec8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1ceca:	68bb      	ldr	r3, [r7, #8]
   1cecc:	0018      	movs	r0, r3
   1cece:	4b23      	ldr	r3, [pc, #140]	; (1cf5c <xTaskPriorityInherit+0x16c>)
   1ced0:	4798      	blx	r3
   1ced2:	0003      	movs	r3, r0
   1ced4:	001a      	movs	r2, r3
   1ced6:	4b22      	ldr	r3, [pc, #136]	; (1cf60 <xTaskPriorityInherit+0x170>)
   1ced8:	881b      	ldrh	r3, [r3, #0]
   1ceda:	4013      	ands	r3, r2
   1cedc:	b29b      	uxth	r3, r3
   1cede:	2b00      	cmp	r3, #0
   1cee0:	d024      	beq.n	1cf2c <xTaskPriorityInherit+0x13c>
   1cee2:	68bb      	ldr	r3, [r7, #8]
   1cee4:	0018      	movs	r0, r3
   1cee6:	4b1f      	ldr	r3, [pc, #124]	; (1cf64 <xTaskPriorityInherit+0x174>)
   1cee8:	4798      	blx	r3
   1ceea:	0003      	movs	r3, r0
   1ceec:	b2db      	uxtb	r3, r3
   1ceee:	001c      	movs	r4, r3
   1cef0:	68bb      	ldr	r3, [r7, #8]
   1cef2:	0018      	movs	r0, r3
   1cef4:	4b1b      	ldr	r3, [pc, #108]	; (1cf64 <xTaskPriorityInherit+0x174>)
   1cef6:	4798      	blx	r3
   1cef8:	0003      	movs	r3, r0
   1cefa:	b2db      	uxtb	r3, r3
   1cefc:	0019      	movs	r1, r3
   1cefe:	2003      	movs	r0, #3
   1cf00:	4b1c      	ldr	r3, [pc, #112]	; (1cf74 <xTaskPriorityInherit+0x184>)
   1cf02:	4798      	blx	r3
   1cf04:	0003      	movs	r3, r0
   1cf06:	0022      	movs	r2, r4
   1cf08:	2103      	movs	r1, #3
   1cf0a:	208e      	movs	r0, #142	; 0x8e
   1cf0c:	4c1a      	ldr	r4, [pc, #104]	; (1cf78 <xTaskPriorityInherit+0x188>)
   1cf0e:	47a0      	blx	r4
   1cf10:	68bb      	ldr	r3, [r7, #8]
   1cf12:	0018      	movs	r0, r3
   1cf14:	4b13      	ldr	r3, [pc, #76]	; (1cf64 <xTaskPriorityInherit+0x174>)
   1cf16:	4798      	blx	r3
   1cf18:	0003      	movs	r3, r0
   1cf1a:	b2d9      	uxtb	r1, r3
   1cf1c:	4b0c      	ldr	r3, [pc, #48]	; (1cf50 <xTaskPriorityInherit+0x160>)
   1cf1e:	681b      	ldr	r3, [r3, #0]
   1cf20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cf22:	b2db      	uxtb	r3, r3
   1cf24:	001a      	movs	r2, r3
   1cf26:	2003      	movs	r0, #3
   1cf28:	4b14      	ldr	r3, [pc, #80]	; (1cf7c <xTaskPriorityInherit+0x18c>)
   1cf2a:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1cf2c:	2301      	movs	r3, #1
   1cf2e:	60fb      	str	r3, [r7, #12]
   1cf30:	e008      	b.n	1cf44 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1cf32:	68bb      	ldr	r3, [r7, #8]
   1cf34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1cf36:	4b06      	ldr	r3, [pc, #24]	; (1cf50 <xTaskPriorityInherit+0x160>)
   1cf38:	681b      	ldr	r3, [r3, #0]
   1cf3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cf3c:	429a      	cmp	r2, r3
   1cf3e:	d201      	bcs.n	1cf44 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1cf40:	2301      	movs	r3, #1
   1cf42:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1cf44:	68fb      	ldr	r3, [r7, #12]
	}
   1cf46:	0018      	movs	r0, r3
   1cf48:	46bd      	mov	sp, r7
   1cf4a:	b005      	add	sp, #20
   1cf4c:	bd90      	pop	{r4, r7, pc}
   1cf4e:	46c0      	nop			; (mov r8, r8)
   1cf50:	200040d8 	.word	0x200040d8
   1cf54:	200040dc 	.word	0x200040dc
   1cf58:	00019f13 	.word	0x00019f13
   1cf5c:	00018099 	.word	0x00018099
   1cf60:	20000110 	.word	0x20000110
   1cf64:	00018079 	.word	0x00018079
   1cf68:	00018849 	.word	0x00018849
   1cf6c:	200041b8 	.word	0x200041b8
   1cf70:	00019e63 	.word	0x00019e63
   1cf74:	00019051 	.word	0x00019051
   1cf78:	00018bc1 	.word	0x00018bc1
   1cf7c:	00018fad 	.word	0x00018fad

0001cf80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1cf80:	b590      	push	{r4, r7, lr}
   1cf82:	b085      	sub	sp, #20
   1cf84:	af00      	add	r7, sp, #0
   1cf86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1cf88:	687b      	ldr	r3, [r7, #4]
   1cf8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1cf8c:	2300      	movs	r3, #0
   1cf8e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1cf90:	687b      	ldr	r3, [r7, #4]
   1cf92:	2b00      	cmp	r3, #0
   1cf94:	d100      	bne.n	1cf98 <xTaskPriorityDisinherit+0x18>
   1cf96:	e089      	b.n	1d0ac <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1cf98:	4b47      	ldr	r3, [pc, #284]	; (1d0b8 <xTaskPriorityDisinherit+0x138>)
   1cf9a:	681b      	ldr	r3, [r3, #0]
   1cf9c:	68ba      	ldr	r2, [r7, #8]
   1cf9e:	429a      	cmp	r2, r3
   1cfa0:	d001      	beq.n	1cfa6 <xTaskPriorityDisinherit+0x26>
   1cfa2:	b672      	cpsid	i
   1cfa4:	e7fe      	b.n	1cfa4 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1cfa6:	68bb      	ldr	r3, [r7, #8]
   1cfa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1cfaa:	2b00      	cmp	r3, #0
   1cfac:	d101      	bne.n	1cfb2 <xTaskPriorityDisinherit+0x32>
   1cfae:	b672      	cpsid	i
   1cfb0:	e7fe      	b.n	1cfb0 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1cfb2:	68bb      	ldr	r3, [r7, #8]
   1cfb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1cfb6:	1e5a      	subs	r2, r3, #1
   1cfb8:	68bb      	ldr	r3, [r7, #8]
   1cfba:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1cfbc:	68bb      	ldr	r3, [r7, #8]
   1cfbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cfc0:	68bb      	ldr	r3, [r7, #8]
   1cfc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cfc4:	429a      	cmp	r2, r3
   1cfc6:	d071      	beq.n	1d0ac <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1cfc8:	68bb      	ldr	r3, [r7, #8]
   1cfca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1cfcc:	2b00      	cmp	r3, #0
   1cfce:	d16d      	bne.n	1d0ac <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1cfd0:	68bb      	ldr	r3, [r7, #8]
   1cfd2:	3304      	adds	r3, #4
   1cfd4:	0018      	movs	r0, r3
   1cfd6:	4b39      	ldr	r3, [pc, #228]	; (1d0bc <xTaskPriorityDisinherit+0x13c>)
   1cfd8:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1cfda:	68bb      	ldr	r3, [r7, #8]
   1cfdc:	0018      	movs	r0, r3
   1cfde:	4b38      	ldr	r3, [pc, #224]	; (1d0c0 <xTaskPriorityDisinherit+0x140>)
   1cfe0:	4798      	blx	r3
   1cfe2:	0003      	movs	r3, r0
   1cfe4:	001a      	movs	r2, r3
   1cfe6:	4b37      	ldr	r3, [pc, #220]	; (1d0c4 <xTaskPriorityDisinherit+0x144>)
   1cfe8:	881b      	ldrh	r3, [r3, #0]
   1cfea:	4013      	ands	r3, r2
   1cfec:	b29b      	uxth	r3, r3
   1cfee:	2b00      	cmp	r3, #0
   1cff0:	d023      	beq.n	1d03a <xTaskPriorityDisinherit+0xba>
   1cff2:	68bb      	ldr	r3, [r7, #8]
   1cff4:	0018      	movs	r0, r3
   1cff6:	4b34      	ldr	r3, [pc, #208]	; (1d0c8 <xTaskPriorityDisinherit+0x148>)
   1cff8:	4798      	blx	r3
   1cffa:	0003      	movs	r3, r0
   1cffc:	b2db      	uxtb	r3, r3
   1cffe:	001c      	movs	r4, r3
   1d000:	68bb      	ldr	r3, [r7, #8]
   1d002:	0018      	movs	r0, r3
   1d004:	4b30      	ldr	r3, [pc, #192]	; (1d0c8 <xTaskPriorityDisinherit+0x148>)
   1d006:	4798      	blx	r3
   1d008:	0003      	movs	r3, r0
   1d00a:	b2db      	uxtb	r3, r3
   1d00c:	0019      	movs	r1, r3
   1d00e:	2003      	movs	r0, #3
   1d010:	4b2e      	ldr	r3, [pc, #184]	; (1d0cc <xTaskPriorityDisinherit+0x14c>)
   1d012:	4798      	blx	r3
   1d014:	0003      	movs	r3, r0
   1d016:	0022      	movs	r2, r4
   1d018:	2103      	movs	r1, #3
   1d01a:	208f      	movs	r0, #143	; 0x8f
   1d01c:	4c2c      	ldr	r4, [pc, #176]	; (1d0d0 <xTaskPriorityDisinherit+0x150>)
   1d01e:	47a0      	blx	r4
   1d020:	68bb      	ldr	r3, [r7, #8]
   1d022:	0018      	movs	r0, r3
   1d024:	4b28      	ldr	r3, [pc, #160]	; (1d0c8 <xTaskPriorityDisinherit+0x148>)
   1d026:	4798      	blx	r3
   1d028:	0003      	movs	r3, r0
   1d02a:	b2d9      	uxtb	r1, r3
   1d02c:	68bb      	ldr	r3, [r7, #8]
   1d02e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d030:	b2db      	uxtb	r3, r3
   1d032:	001a      	movs	r2, r3
   1d034:	2003      	movs	r0, #3
   1d036:	4b27      	ldr	r3, [pc, #156]	; (1d0d4 <xTaskPriorityDisinherit+0x154>)
   1d038:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1d03a:	68bb      	ldr	r3, [r7, #8]
   1d03c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d03e:	68bb      	ldr	r3, [r7, #8]
   1d040:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d042:	68bb      	ldr	r3, [r7, #8]
   1d044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d046:	2205      	movs	r2, #5
   1d048:	1ad2      	subs	r2, r2, r3
   1d04a:	68bb      	ldr	r3, [r7, #8]
   1d04c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1d04e:	68bb      	ldr	r3, [r7, #8]
   1d050:	0018      	movs	r0, r3
   1d052:	4b1b      	ldr	r3, [pc, #108]	; (1d0c0 <xTaskPriorityDisinherit+0x140>)
   1d054:	4798      	blx	r3
   1d056:	0003      	movs	r3, r0
   1d058:	001a      	movs	r2, r3
   1d05a:	4b1a      	ldr	r3, [pc, #104]	; (1d0c4 <xTaskPriorityDisinherit+0x144>)
   1d05c:	881b      	ldrh	r3, [r3, #0]
   1d05e:	4013      	ands	r3, r2
   1d060:	b29b      	uxth	r3, r3
   1d062:	2b00      	cmp	r3, #0
   1d064:	d008      	beq.n	1d078 <xTaskPriorityDisinherit+0xf8>
   1d066:	68bb      	ldr	r3, [r7, #8]
   1d068:	0018      	movs	r0, r3
   1d06a:	4b17      	ldr	r3, [pc, #92]	; (1d0c8 <xTaskPriorityDisinherit+0x148>)
   1d06c:	4798      	blx	r3
   1d06e:	0003      	movs	r3, r0
   1d070:	b2db      	uxtb	r3, r3
   1d072:	0018      	movs	r0, r3
   1d074:	4b18      	ldr	r3, [pc, #96]	; (1d0d8 <xTaskPriorityDisinherit+0x158>)
   1d076:	4798      	blx	r3
   1d078:	68bb      	ldr	r3, [r7, #8]
   1d07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d07c:	4b17      	ldr	r3, [pc, #92]	; (1d0dc <xTaskPriorityDisinherit+0x15c>)
   1d07e:	681b      	ldr	r3, [r3, #0]
   1d080:	429a      	cmp	r2, r3
   1d082:	d903      	bls.n	1d08c <xTaskPriorityDisinherit+0x10c>
   1d084:	68bb      	ldr	r3, [r7, #8]
   1d086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d088:	4b14      	ldr	r3, [pc, #80]	; (1d0dc <xTaskPriorityDisinherit+0x15c>)
   1d08a:	601a      	str	r2, [r3, #0]
   1d08c:	68bb      	ldr	r3, [r7, #8]
   1d08e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d090:	0013      	movs	r3, r2
   1d092:	009b      	lsls	r3, r3, #2
   1d094:	189b      	adds	r3, r3, r2
   1d096:	009b      	lsls	r3, r3, #2
   1d098:	4a11      	ldr	r2, [pc, #68]	; (1d0e0 <xTaskPriorityDisinherit+0x160>)
   1d09a:	189a      	adds	r2, r3, r2
   1d09c:	68bb      	ldr	r3, [r7, #8]
   1d09e:	3304      	adds	r3, #4
   1d0a0:	0019      	movs	r1, r3
   1d0a2:	0010      	movs	r0, r2
   1d0a4:	4b0f      	ldr	r3, [pc, #60]	; (1d0e4 <xTaskPriorityDisinherit+0x164>)
   1d0a6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1d0a8:	2301      	movs	r3, #1
   1d0aa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1d0ac:	68fb      	ldr	r3, [r7, #12]
	}
   1d0ae:	0018      	movs	r0, r3
   1d0b0:	46bd      	mov	sp, r7
   1d0b2:	b005      	add	sp, #20
   1d0b4:	bd90      	pop	{r4, r7, pc}
   1d0b6:	46c0      	nop			; (mov r8, r8)
   1d0b8:	200040d8 	.word	0x200040d8
   1d0bc:	00019f13 	.word	0x00019f13
   1d0c0:	00018099 	.word	0x00018099
   1d0c4:	20000110 	.word	0x20000110
   1d0c8:	00018079 	.word	0x00018079
   1d0cc:	00019051 	.word	0x00019051
   1d0d0:	00018bc1 	.word	0x00018bc1
   1d0d4:	00018fad 	.word	0x00018fad
   1d0d8:	00018849 	.word	0x00018849
   1d0dc:	200041b8 	.word	0x200041b8
   1d0e0:	200040dc 	.word	0x200040dc
   1d0e4:	00019e63 	.word	0x00019e63

0001d0e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1d0e8:	b590      	push	{r4, r7, lr}
   1d0ea:	b087      	sub	sp, #28
   1d0ec:	af00      	add	r7, sp, #0
   1d0ee:	6078      	str	r0, [r7, #4]
   1d0f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1d0f2:	687b      	ldr	r3, [r7, #4]
   1d0f4:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1d0f6:	2301      	movs	r3, #1
   1d0f8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1d0fa:	687b      	ldr	r3, [r7, #4]
   1d0fc:	2b00      	cmp	r3, #0
   1d0fe:	d100      	bne.n	1d102 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1d100:	e0a4      	b.n	1d24c <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1d102:	693b      	ldr	r3, [r7, #16]
   1d104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d106:	2b00      	cmp	r3, #0
   1d108:	d101      	bne.n	1d10e <vTaskPriorityDisinheritAfterTimeout+0x26>
   1d10a:	b672      	cpsid	i
   1d10c:	e7fe      	b.n	1d10c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1d10e:	693b      	ldr	r3, [r7, #16]
   1d110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d112:	683b      	ldr	r3, [r7, #0]
   1d114:	429a      	cmp	r2, r3
   1d116:	d202      	bcs.n	1d11e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1d118:	683b      	ldr	r3, [r7, #0]
   1d11a:	617b      	str	r3, [r7, #20]
   1d11c:	e002      	b.n	1d124 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1d11e:	693b      	ldr	r3, [r7, #16]
   1d120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d122:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1d124:	693b      	ldr	r3, [r7, #16]
   1d126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d128:	697b      	ldr	r3, [r7, #20]
   1d12a:	429a      	cmp	r2, r3
   1d12c:	d100      	bne.n	1d130 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1d12e:	e08d      	b.n	1d24c <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1d130:	693b      	ldr	r3, [r7, #16]
   1d132:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1d134:	68fb      	ldr	r3, [r7, #12]
   1d136:	429a      	cmp	r2, r3
   1d138:	d000      	beq.n	1d13c <vTaskPriorityDisinheritAfterTimeout+0x54>
   1d13a:	e087      	b.n	1d24c <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1d13c:	4b45      	ldr	r3, [pc, #276]	; (1d254 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1d13e:	681b      	ldr	r3, [r3, #0]
   1d140:	693a      	ldr	r2, [r7, #16]
   1d142:	429a      	cmp	r2, r3
   1d144:	d101      	bne.n	1d14a <vTaskPriorityDisinheritAfterTimeout+0x62>
   1d146:	b672      	cpsid	i
   1d148:	e7fe      	b.n	1d148 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1d14a:	693b      	ldr	r3, [r7, #16]
   1d14c:	0018      	movs	r0, r3
   1d14e:	4b42      	ldr	r3, [pc, #264]	; (1d258 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1d150:	4798      	blx	r3
   1d152:	0003      	movs	r3, r0
   1d154:	001a      	movs	r2, r3
   1d156:	4b41      	ldr	r3, [pc, #260]	; (1d25c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1d158:	881b      	ldrh	r3, [r3, #0]
   1d15a:	4013      	ands	r3, r2
   1d15c:	b29b      	uxth	r3, r3
   1d15e:	2b00      	cmp	r3, #0
   1d160:	d023      	beq.n	1d1aa <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1d162:	693b      	ldr	r3, [r7, #16]
   1d164:	0018      	movs	r0, r3
   1d166:	4b3e      	ldr	r3, [pc, #248]	; (1d260 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d168:	4798      	blx	r3
   1d16a:	0003      	movs	r3, r0
   1d16c:	b2db      	uxtb	r3, r3
   1d16e:	001c      	movs	r4, r3
   1d170:	693b      	ldr	r3, [r7, #16]
   1d172:	0018      	movs	r0, r3
   1d174:	4b3a      	ldr	r3, [pc, #232]	; (1d260 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d176:	4798      	blx	r3
   1d178:	0003      	movs	r3, r0
   1d17a:	b2db      	uxtb	r3, r3
   1d17c:	0019      	movs	r1, r3
   1d17e:	2003      	movs	r0, #3
   1d180:	4b38      	ldr	r3, [pc, #224]	; (1d264 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1d182:	4798      	blx	r3
   1d184:	0003      	movs	r3, r0
   1d186:	0022      	movs	r2, r4
   1d188:	2103      	movs	r1, #3
   1d18a:	208f      	movs	r0, #143	; 0x8f
   1d18c:	4c36      	ldr	r4, [pc, #216]	; (1d268 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1d18e:	47a0      	blx	r4
   1d190:	693b      	ldr	r3, [r7, #16]
   1d192:	0018      	movs	r0, r3
   1d194:	4b32      	ldr	r3, [pc, #200]	; (1d260 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d196:	4798      	blx	r3
   1d198:	0003      	movs	r3, r0
   1d19a:	b2d9      	uxtb	r1, r3
   1d19c:	693b      	ldr	r3, [r7, #16]
   1d19e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d1a0:	b2db      	uxtb	r3, r3
   1d1a2:	001a      	movs	r2, r3
   1d1a4:	2003      	movs	r0, #3
   1d1a6:	4b31      	ldr	r3, [pc, #196]	; (1d26c <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1d1a8:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1d1aa:	693b      	ldr	r3, [r7, #16]
   1d1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d1ae:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1d1b0:	693b      	ldr	r3, [r7, #16]
   1d1b2:	697a      	ldr	r2, [r7, #20]
   1d1b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1d1b6:	693b      	ldr	r3, [r7, #16]
   1d1b8:	699b      	ldr	r3, [r3, #24]
   1d1ba:	2b00      	cmp	r3, #0
   1d1bc:	db04      	blt.n	1d1c8 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d1be:	697b      	ldr	r3, [r7, #20]
   1d1c0:	2205      	movs	r2, #5
   1d1c2:	1ad2      	subs	r2, r2, r3
   1d1c4:	693b      	ldr	r3, [r7, #16]
   1d1c6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1d1c8:	693b      	ldr	r3, [r7, #16]
   1d1ca:	6959      	ldr	r1, [r3, #20]
   1d1cc:	68ba      	ldr	r2, [r7, #8]
   1d1ce:	0013      	movs	r3, r2
   1d1d0:	009b      	lsls	r3, r3, #2
   1d1d2:	189b      	adds	r3, r3, r2
   1d1d4:	009b      	lsls	r3, r3, #2
   1d1d6:	4a26      	ldr	r2, [pc, #152]	; (1d270 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1d1d8:	189b      	adds	r3, r3, r2
   1d1da:	4299      	cmp	r1, r3
   1d1dc:	d101      	bne.n	1d1e2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1d1de:	2301      	movs	r3, #1
   1d1e0:	e000      	b.n	1d1e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1d1e2:	2300      	movs	r3, #0
   1d1e4:	2b00      	cmp	r3, #0
   1d1e6:	d031      	beq.n	1d24c <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d1e8:	693b      	ldr	r3, [r7, #16]
   1d1ea:	3304      	adds	r3, #4
   1d1ec:	0018      	movs	r0, r3
   1d1ee:	4b21      	ldr	r3, [pc, #132]	; (1d274 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1d1f0:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1d1f2:	693b      	ldr	r3, [r7, #16]
   1d1f4:	0018      	movs	r0, r3
   1d1f6:	4b18      	ldr	r3, [pc, #96]	; (1d258 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1d1f8:	4798      	blx	r3
   1d1fa:	0003      	movs	r3, r0
   1d1fc:	001a      	movs	r2, r3
   1d1fe:	4b17      	ldr	r3, [pc, #92]	; (1d25c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1d200:	881b      	ldrh	r3, [r3, #0]
   1d202:	4013      	ands	r3, r2
   1d204:	b29b      	uxth	r3, r3
   1d206:	2b00      	cmp	r3, #0
   1d208:	d008      	beq.n	1d21c <vTaskPriorityDisinheritAfterTimeout+0x134>
   1d20a:	693b      	ldr	r3, [r7, #16]
   1d20c:	0018      	movs	r0, r3
   1d20e:	4b14      	ldr	r3, [pc, #80]	; (1d260 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d210:	4798      	blx	r3
   1d212:	0003      	movs	r3, r0
   1d214:	b2db      	uxtb	r3, r3
   1d216:	0018      	movs	r0, r3
   1d218:	4b17      	ldr	r3, [pc, #92]	; (1d278 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1d21a:	4798      	blx	r3
   1d21c:	693b      	ldr	r3, [r7, #16]
   1d21e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d220:	4b16      	ldr	r3, [pc, #88]	; (1d27c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1d222:	681b      	ldr	r3, [r3, #0]
   1d224:	429a      	cmp	r2, r3
   1d226:	d903      	bls.n	1d230 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1d228:	693b      	ldr	r3, [r7, #16]
   1d22a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d22c:	4b13      	ldr	r3, [pc, #76]	; (1d27c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1d22e:	601a      	str	r2, [r3, #0]
   1d230:	693b      	ldr	r3, [r7, #16]
   1d232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d234:	0013      	movs	r3, r2
   1d236:	009b      	lsls	r3, r3, #2
   1d238:	189b      	adds	r3, r3, r2
   1d23a:	009b      	lsls	r3, r3, #2
   1d23c:	4a0c      	ldr	r2, [pc, #48]	; (1d270 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1d23e:	189a      	adds	r2, r3, r2
   1d240:	693b      	ldr	r3, [r7, #16]
   1d242:	3304      	adds	r3, #4
   1d244:	0019      	movs	r1, r3
   1d246:	0010      	movs	r0, r2
   1d248:	4b0d      	ldr	r3, [pc, #52]	; (1d280 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1d24a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1d24c:	46c0      	nop			; (mov r8, r8)
   1d24e:	46bd      	mov	sp, r7
   1d250:	b007      	add	sp, #28
   1d252:	bd90      	pop	{r4, r7, pc}
   1d254:	200040d8 	.word	0x200040d8
   1d258:	00018099 	.word	0x00018099
   1d25c:	20000110 	.word	0x20000110
   1d260:	00018079 	.word	0x00018079
   1d264:	00019051 	.word	0x00019051
   1d268:	00018bc1 	.word	0x00018bc1
   1d26c:	00018fad 	.word	0x00018fad
   1d270:	200040dc 	.word	0x200040dc
   1d274:	00019f13 	.word	0x00019f13
   1d278:	00018849 	.word	0x00018849
   1d27c:	200041b8 	.word	0x200041b8
   1d280:	00019e63 	.word	0x00019e63

0001d284 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1d284:	b580      	push	{r7, lr}
   1d286:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1d288:	4b06      	ldr	r3, [pc, #24]	; (1d2a4 <pvTaskIncrementMutexHeldCount+0x20>)
   1d28a:	681b      	ldr	r3, [r3, #0]
   1d28c:	2b00      	cmp	r3, #0
   1d28e:	d004      	beq.n	1d29a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1d290:	4b04      	ldr	r3, [pc, #16]	; (1d2a4 <pvTaskIncrementMutexHeldCount+0x20>)
   1d292:	681b      	ldr	r3, [r3, #0]
   1d294:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1d296:	3201      	adds	r2, #1
   1d298:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1d29a:	4b02      	ldr	r3, [pc, #8]	; (1d2a4 <pvTaskIncrementMutexHeldCount+0x20>)
   1d29c:	681b      	ldr	r3, [r3, #0]
	}
   1d29e:	0018      	movs	r0, r3
   1d2a0:	46bd      	mov	sp, r7
   1d2a2:	bd80      	pop	{r7, pc}
   1d2a4:	200040d8 	.word	0x200040d8

0001d2a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1d2a8:	b580      	push	{r7, lr}
   1d2aa:	b084      	sub	sp, #16
   1d2ac:	af00      	add	r7, sp, #0
   1d2ae:	6078      	str	r0, [r7, #4]
   1d2b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1d2b2:	4b21      	ldr	r3, [pc, #132]	; (1d338 <prvAddCurrentTaskToDelayedList+0x90>)
   1d2b4:	681b      	ldr	r3, [r3, #0]
   1d2b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d2b8:	4b20      	ldr	r3, [pc, #128]	; (1d33c <prvAddCurrentTaskToDelayedList+0x94>)
   1d2ba:	681b      	ldr	r3, [r3, #0]
   1d2bc:	3304      	adds	r3, #4
   1d2be:	0018      	movs	r0, r3
   1d2c0:	4b1f      	ldr	r3, [pc, #124]	; (1d340 <prvAddCurrentTaskToDelayedList+0x98>)
   1d2c2:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1d2c4:	687b      	ldr	r3, [r7, #4]
   1d2c6:	3301      	adds	r3, #1
   1d2c8:	d10b      	bne.n	1d2e2 <prvAddCurrentTaskToDelayedList+0x3a>
   1d2ca:	683b      	ldr	r3, [r7, #0]
   1d2cc:	2b00      	cmp	r3, #0
   1d2ce:	d008      	beq.n	1d2e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d2d0:	4b1a      	ldr	r3, [pc, #104]	; (1d33c <prvAddCurrentTaskToDelayedList+0x94>)
   1d2d2:	681b      	ldr	r3, [r3, #0]
   1d2d4:	1d1a      	adds	r2, r3, #4
   1d2d6:	4b1b      	ldr	r3, [pc, #108]	; (1d344 <prvAddCurrentTaskToDelayedList+0x9c>)
   1d2d8:	0011      	movs	r1, r2
   1d2da:	0018      	movs	r0, r3
   1d2dc:	4b1a      	ldr	r3, [pc, #104]	; (1d348 <prvAddCurrentTaskToDelayedList+0xa0>)
   1d2de:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1d2e0:	e026      	b.n	1d330 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1d2e2:	68fa      	ldr	r2, [r7, #12]
   1d2e4:	687b      	ldr	r3, [r7, #4]
   1d2e6:	18d3      	adds	r3, r2, r3
   1d2e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1d2ea:	4b14      	ldr	r3, [pc, #80]	; (1d33c <prvAddCurrentTaskToDelayedList+0x94>)
   1d2ec:	681b      	ldr	r3, [r3, #0]
   1d2ee:	68ba      	ldr	r2, [r7, #8]
   1d2f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1d2f2:	68ba      	ldr	r2, [r7, #8]
   1d2f4:	68fb      	ldr	r3, [r7, #12]
   1d2f6:	429a      	cmp	r2, r3
   1d2f8:	d209      	bcs.n	1d30e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d2fa:	4b14      	ldr	r3, [pc, #80]	; (1d34c <prvAddCurrentTaskToDelayedList+0xa4>)
   1d2fc:	681a      	ldr	r2, [r3, #0]
   1d2fe:	4b0f      	ldr	r3, [pc, #60]	; (1d33c <prvAddCurrentTaskToDelayedList+0x94>)
   1d300:	681b      	ldr	r3, [r3, #0]
   1d302:	3304      	adds	r3, #4
   1d304:	0019      	movs	r1, r3
   1d306:	0010      	movs	r0, r2
   1d308:	4b11      	ldr	r3, [pc, #68]	; (1d350 <prvAddCurrentTaskToDelayedList+0xa8>)
   1d30a:	4798      	blx	r3
}
   1d30c:	e010      	b.n	1d330 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d30e:	4b11      	ldr	r3, [pc, #68]	; (1d354 <prvAddCurrentTaskToDelayedList+0xac>)
   1d310:	681a      	ldr	r2, [r3, #0]
   1d312:	4b0a      	ldr	r3, [pc, #40]	; (1d33c <prvAddCurrentTaskToDelayedList+0x94>)
   1d314:	681b      	ldr	r3, [r3, #0]
   1d316:	3304      	adds	r3, #4
   1d318:	0019      	movs	r1, r3
   1d31a:	0010      	movs	r0, r2
   1d31c:	4b0c      	ldr	r3, [pc, #48]	; (1d350 <prvAddCurrentTaskToDelayedList+0xa8>)
   1d31e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1d320:	4b0d      	ldr	r3, [pc, #52]	; (1d358 <prvAddCurrentTaskToDelayedList+0xb0>)
   1d322:	681b      	ldr	r3, [r3, #0]
   1d324:	68ba      	ldr	r2, [r7, #8]
   1d326:	429a      	cmp	r2, r3
   1d328:	d202      	bcs.n	1d330 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1d32a:	4b0b      	ldr	r3, [pc, #44]	; (1d358 <prvAddCurrentTaskToDelayedList+0xb0>)
   1d32c:	68ba      	ldr	r2, [r7, #8]
   1d32e:	601a      	str	r2, [r3, #0]
}
   1d330:	46c0      	nop			; (mov r8, r8)
   1d332:	46bd      	mov	sp, r7
   1d334:	b004      	add	sp, #16
   1d336:	bd80      	pop	{r7, pc}
   1d338:	200041b4 	.word	0x200041b4
   1d33c:	200040d8 	.word	0x200040d8
   1d340:	00019f13 	.word	0x00019f13
   1d344:	2000419c 	.word	0x2000419c
   1d348:	00019e63 	.word	0x00019e63
   1d34c:	2000416c 	.word	0x2000416c
   1d350:	00019ea7 	.word	0x00019ea7
   1d354:	20004168 	.word	0x20004168
   1d358:	200041d0 	.word	0x200041d0

0001d35c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1d35c:	b590      	push	{r4, r7, lr}
   1d35e:	b085      	sub	sp, #20
   1d360:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1d362:	2300      	movs	r3, #0
   1d364:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1d366:	4b0e      	ldr	r3, [pc, #56]	; (1d3a0 <xTimerCreateTimerTask+0x44>)
   1d368:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1d36a:	4b0e      	ldr	r3, [pc, #56]	; (1d3a4 <xTimerCreateTimerTask+0x48>)
   1d36c:	681b      	ldr	r3, [r3, #0]
   1d36e:	2b00      	cmp	r3, #0
   1d370:	d00b      	beq.n	1d38a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1d372:	490d      	ldr	r1, [pc, #52]	; (1d3a8 <xTimerCreateTimerTask+0x4c>)
   1d374:	480d      	ldr	r0, [pc, #52]	; (1d3ac <xTimerCreateTimerTask+0x50>)
   1d376:	4b0e      	ldr	r3, [pc, #56]	; (1d3b0 <xTimerCreateTimerTask+0x54>)
   1d378:	9301      	str	r3, [sp, #4]
   1d37a:	2302      	movs	r3, #2
   1d37c:	9300      	str	r3, [sp, #0]
   1d37e:	2300      	movs	r3, #0
   1d380:	2280      	movs	r2, #128	; 0x80
   1d382:	4c0c      	ldr	r4, [pc, #48]	; (1d3b4 <xTimerCreateTimerTask+0x58>)
   1d384:	47a0      	blx	r4
   1d386:	0003      	movs	r3, r0
   1d388:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1d38a:	687b      	ldr	r3, [r7, #4]
   1d38c:	2b00      	cmp	r3, #0
   1d38e:	d101      	bne.n	1d394 <xTimerCreateTimerTask+0x38>
   1d390:	b672      	cpsid	i
   1d392:	e7fe      	b.n	1d392 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1d394:	687b      	ldr	r3, [r7, #4]
}
   1d396:	0018      	movs	r0, r3
   1d398:	46bd      	mov	sp, r7
   1d39a:	b003      	add	sp, #12
   1d39c:	bd90      	pop	{r4, r7, pc}
   1d39e:	46c0      	nop			; (mov r8, r8)
   1d3a0:	0001d8a5 	.word	0x0001d8a5
   1d3a4:	2000420c 	.word	0x2000420c
   1d3a8:	000382dc 	.word	0x000382dc
   1d3ac:	0001d4dd 	.word	0x0001d4dd
   1d3b0:	20004210 	.word	0x20004210
   1d3b4:	0001bcf5 	.word	0x0001bcf5

0001d3b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1d3b8:	b590      	push	{r4, r7, lr}
   1d3ba:	b089      	sub	sp, #36	; 0x24
   1d3bc:	af00      	add	r7, sp, #0
   1d3be:	60f8      	str	r0, [r7, #12]
   1d3c0:	60b9      	str	r1, [r7, #8]
   1d3c2:	607a      	str	r2, [r7, #4]
   1d3c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1d3c6:	2300      	movs	r3, #0
   1d3c8:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1d3ca:	68fb      	ldr	r3, [r7, #12]
   1d3cc:	2b00      	cmp	r3, #0
   1d3ce:	d101      	bne.n	1d3d4 <xTimerGenericCommand+0x1c>
   1d3d0:	b672      	cpsid	i
   1d3d2:	e7fe      	b.n	1d3d2 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1d3d4:	4b1e      	ldr	r3, [pc, #120]	; (1d450 <xTimerGenericCommand+0x98>)
   1d3d6:	681b      	ldr	r3, [r3, #0]
   1d3d8:	2b00      	cmp	r3, #0
   1d3da:	d033      	beq.n	1d444 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1d3dc:	2310      	movs	r3, #16
   1d3de:	18fb      	adds	r3, r7, r3
   1d3e0:	68ba      	ldr	r2, [r7, #8]
   1d3e2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1d3e4:	2310      	movs	r3, #16
   1d3e6:	18fb      	adds	r3, r7, r3
   1d3e8:	687a      	ldr	r2, [r7, #4]
   1d3ea:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1d3ec:	2310      	movs	r3, #16
   1d3ee:	18fb      	adds	r3, r7, r3
   1d3f0:	68fa      	ldr	r2, [r7, #12]
   1d3f2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1d3f4:	68bb      	ldr	r3, [r7, #8]
   1d3f6:	2b05      	cmp	r3, #5
   1d3f8:	dc1a      	bgt.n	1d430 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1d3fa:	4b16      	ldr	r3, [pc, #88]	; (1d454 <xTimerGenericCommand+0x9c>)
   1d3fc:	4798      	blx	r3
   1d3fe:	0003      	movs	r3, r0
   1d400:	2b02      	cmp	r3, #2
   1d402:	d10a      	bne.n	1d41a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1d404:	4b12      	ldr	r3, [pc, #72]	; (1d450 <xTimerGenericCommand+0x98>)
   1d406:	6818      	ldr	r0, [r3, #0]
   1d408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1d40a:	2310      	movs	r3, #16
   1d40c:	18f9      	adds	r1, r7, r3
   1d40e:	2300      	movs	r3, #0
   1d410:	4c11      	ldr	r4, [pc, #68]	; (1d458 <xTimerGenericCommand+0xa0>)
   1d412:	47a0      	blx	r4
   1d414:	0003      	movs	r3, r0
   1d416:	61fb      	str	r3, [r7, #28]
   1d418:	e014      	b.n	1d444 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1d41a:	4b0d      	ldr	r3, [pc, #52]	; (1d450 <xTimerGenericCommand+0x98>)
   1d41c:	6818      	ldr	r0, [r3, #0]
   1d41e:	2310      	movs	r3, #16
   1d420:	18f9      	adds	r1, r7, r3
   1d422:	2300      	movs	r3, #0
   1d424:	2200      	movs	r2, #0
   1d426:	4c0c      	ldr	r4, [pc, #48]	; (1d458 <xTimerGenericCommand+0xa0>)
   1d428:	47a0      	blx	r4
   1d42a:	0003      	movs	r3, r0
   1d42c:	61fb      	str	r3, [r7, #28]
   1d42e:	e009      	b.n	1d444 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1d430:	4b07      	ldr	r3, [pc, #28]	; (1d450 <xTimerGenericCommand+0x98>)
   1d432:	6818      	ldr	r0, [r3, #0]
   1d434:	683a      	ldr	r2, [r7, #0]
   1d436:	2310      	movs	r3, #16
   1d438:	18f9      	adds	r1, r7, r3
   1d43a:	2300      	movs	r3, #0
   1d43c:	4c07      	ldr	r4, [pc, #28]	; (1d45c <xTimerGenericCommand+0xa4>)
   1d43e:	47a0      	blx	r4
   1d440:	0003      	movs	r3, r0
   1d442:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1d444:	69fb      	ldr	r3, [r7, #28]
}
   1d446:	0018      	movs	r0, r3
   1d448:	46bd      	mov	sp, r7
   1d44a:	b009      	add	sp, #36	; 0x24
   1d44c:	bd90      	pop	{r4, r7, pc}
   1d44e:	46c0      	nop			; (mov r8, r8)
   1d450:	2000420c 	.word	0x2000420c
   1d454:	0001cdb9 	.word	0x0001cdb9
   1d458:	0001a62d 	.word	0x0001a62d
   1d45c:	0001aa8d 	.word	0x0001aa8d

0001d460 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1d460:	b590      	push	{r4, r7, lr}
   1d462:	b087      	sub	sp, #28
   1d464:	af02      	add	r7, sp, #8
   1d466:	6078      	str	r0, [r7, #4]
   1d468:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d46a:	4b18      	ldr	r3, [pc, #96]	; (1d4cc <prvProcessExpiredTimer+0x6c>)
   1d46c:	681b      	ldr	r3, [r3, #0]
   1d46e:	68db      	ldr	r3, [r3, #12]
   1d470:	68db      	ldr	r3, [r3, #12]
   1d472:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d474:	68fb      	ldr	r3, [r7, #12]
   1d476:	3304      	adds	r3, #4
   1d478:	0018      	movs	r0, r3
   1d47a:	4b15      	ldr	r3, [pc, #84]	; (1d4d0 <prvProcessExpiredTimer+0x70>)
   1d47c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d47e:	68fb      	ldr	r3, [r7, #12]
   1d480:	69db      	ldr	r3, [r3, #28]
   1d482:	2b01      	cmp	r3, #1
   1d484:	d119      	bne.n	1d4ba <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1d486:	68fb      	ldr	r3, [r7, #12]
   1d488:	699a      	ldr	r2, [r3, #24]
   1d48a:	687b      	ldr	r3, [r7, #4]
   1d48c:	18d1      	adds	r1, r2, r3
   1d48e:	687b      	ldr	r3, [r7, #4]
   1d490:	683a      	ldr	r2, [r7, #0]
   1d492:	68f8      	ldr	r0, [r7, #12]
   1d494:	4c0f      	ldr	r4, [pc, #60]	; (1d4d4 <prvProcessExpiredTimer+0x74>)
   1d496:	47a0      	blx	r4
   1d498:	1e03      	subs	r3, r0, #0
   1d49a:	d00e      	beq.n	1d4ba <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1d49c:	687a      	ldr	r2, [r7, #4]
   1d49e:	68f8      	ldr	r0, [r7, #12]
   1d4a0:	2300      	movs	r3, #0
   1d4a2:	9300      	str	r3, [sp, #0]
   1d4a4:	2300      	movs	r3, #0
   1d4a6:	2100      	movs	r1, #0
   1d4a8:	4c0b      	ldr	r4, [pc, #44]	; (1d4d8 <prvProcessExpiredTimer+0x78>)
   1d4aa:	47a0      	blx	r4
   1d4ac:	0003      	movs	r3, r0
   1d4ae:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1d4b0:	68bb      	ldr	r3, [r7, #8]
   1d4b2:	2b00      	cmp	r3, #0
   1d4b4:	d101      	bne.n	1d4ba <prvProcessExpiredTimer+0x5a>
   1d4b6:	b672      	cpsid	i
   1d4b8:	e7fe      	b.n	1d4b8 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d4ba:	68fb      	ldr	r3, [r7, #12]
   1d4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d4be:	68fa      	ldr	r2, [r7, #12]
   1d4c0:	0010      	movs	r0, r2
   1d4c2:	4798      	blx	r3
}
   1d4c4:	46c0      	nop			; (mov r8, r8)
   1d4c6:	46bd      	mov	sp, r7
   1d4c8:	b005      	add	sp, #20
   1d4ca:	bd90      	pop	{r4, r7, pc}
   1d4cc:	20004204 	.word	0x20004204
   1d4d0:	00019f13 	.word	0x00019f13
   1d4d4:	0001d645 	.word	0x0001d645
   1d4d8:	0001d3b9 	.word	0x0001d3b9

0001d4dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1d4dc:	b580      	push	{r7, lr}
   1d4de:	b084      	sub	sp, #16
   1d4e0:	af00      	add	r7, sp, #0
   1d4e2:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1d4e4:	4b08      	ldr	r3, [pc, #32]	; (1d508 <prvTimerTask+0x2c>)
   1d4e6:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1d4e8:	2308      	movs	r3, #8
   1d4ea:	18fb      	adds	r3, r7, r3
   1d4ec:	0018      	movs	r0, r3
   1d4ee:	4b07      	ldr	r3, [pc, #28]	; (1d50c <prvTimerTask+0x30>)
   1d4f0:	4798      	blx	r3
   1d4f2:	0003      	movs	r3, r0
   1d4f4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1d4f6:	68ba      	ldr	r2, [r7, #8]
   1d4f8:	68fb      	ldr	r3, [r7, #12]
   1d4fa:	0011      	movs	r1, r2
   1d4fc:	0018      	movs	r0, r3
   1d4fe:	4b04      	ldr	r3, [pc, #16]	; (1d510 <prvTimerTask+0x34>)
   1d500:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1d502:	4b04      	ldr	r3, [pc, #16]	; (1d514 <prvTimerTask+0x38>)
   1d504:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1d506:	e7ef      	b.n	1d4e8 <prvTimerTask+0xc>
   1d508:	000325d5 	.word	0x000325d5
   1d50c:	0001d5bd 	.word	0x0001d5bd
   1d510:	0001d519 	.word	0x0001d519
   1d514:	0001d6cd 	.word	0x0001d6cd

0001d518 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1d518:	b580      	push	{r7, lr}
   1d51a:	b084      	sub	sp, #16
   1d51c:	af00      	add	r7, sp, #0
   1d51e:	6078      	str	r0, [r7, #4]
   1d520:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1d522:	4b1e      	ldr	r3, [pc, #120]	; (1d59c <prvProcessTimerOrBlockTask+0x84>)
   1d524:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1d526:	2308      	movs	r3, #8
   1d528:	18fb      	adds	r3, r7, r3
   1d52a:	0018      	movs	r0, r3
   1d52c:	4b1c      	ldr	r3, [pc, #112]	; (1d5a0 <prvProcessTimerOrBlockTask+0x88>)
   1d52e:	4798      	blx	r3
   1d530:	0003      	movs	r3, r0
   1d532:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1d534:	68bb      	ldr	r3, [r7, #8]
   1d536:	2b00      	cmp	r3, #0
   1d538:	d129      	bne.n	1d58e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1d53a:	683b      	ldr	r3, [r7, #0]
   1d53c:	2b00      	cmp	r3, #0
   1d53e:	d10c      	bne.n	1d55a <prvProcessTimerOrBlockTask+0x42>
   1d540:	687a      	ldr	r2, [r7, #4]
   1d542:	68fb      	ldr	r3, [r7, #12]
   1d544:	429a      	cmp	r2, r3
   1d546:	d808      	bhi.n	1d55a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1d548:	4b16      	ldr	r3, [pc, #88]	; (1d5a4 <prvProcessTimerOrBlockTask+0x8c>)
   1d54a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1d54c:	68fa      	ldr	r2, [r7, #12]
   1d54e:	687b      	ldr	r3, [r7, #4]
   1d550:	0011      	movs	r1, r2
   1d552:	0018      	movs	r0, r3
   1d554:	4b14      	ldr	r3, [pc, #80]	; (1d5a8 <prvProcessTimerOrBlockTask+0x90>)
   1d556:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1d558:	e01b      	b.n	1d592 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1d55a:	683b      	ldr	r3, [r7, #0]
   1d55c:	2b00      	cmp	r3, #0
   1d55e:	d006      	beq.n	1d56e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1d560:	4b12      	ldr	r3, [pc, #72]	; (1d5ac <prvProcessTimerOrBlockTask+0x94>)
   1d562:	681b      	ldr	r3, [r3, #0]
   1d564:	681b      	ldr	r3, [r3, #0]
   1d566:	425a      	negs	r2, r3
   1d568:	4153      	adcs	r3, r2
   1d56a:	b2db      	uxtb	r3, r3
   1d56c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1d56e:	4b10      	ldr	r3, [pc, #64]	; (1d5b0 <prvProcessTimerOrBlockTask+0x98>)
   1d570:	6818      	ldr	r0, [r3, #0]
   1d572:	687a      	ldr	r2, [r7, #4]
   1d574:	68fb      	ldr	r3, [r7, #12]
   1d576:	1ad3      	subs	r3, r2, r3
   1d578:	683a      	ldr	r2, [r7, #0]
   1d57a:	0019      	movs	r1, r3
   1d57c:	4b0d      	ldr	r3, [pc, #52]	; (1d5b4 <prvProcessTimerOrBlockTask+0x9c>)
   1d57e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1d580:	4b08      	ldr	r3, [pc, #32]	; (1d5a4 <prvProcessTimerOrBlockTask+0x8c>)
   1d582:	4798      	blx	r3
   1d584:	1e03      	subs	r3, r0, #0
   1d586:	d104      	bne.n	1d592 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1d588:	4b0b      	ldr	r3, [pc, #44]	; (1d5b8 <prvProcessTimerOrBlockTask+0xa0>)
   1d58a:	4798      	blx	r3
}
   1d58c:	e001      	b.n	1d592 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1d58e:	4b05      	ldr	r3, [pc, #20]	; (1d5a4 <prvProcessTimerOrBlockTask+0x8c>)
   1d590:	4798      	blx	r3
}
   1d592:	46c0      	nop			; (mov r8, r8)
   1d594:	46bd      	mov	sp, r7
   1d596:	b004      	add	sp, #16
   1d598:	bd80      	pop	{r7, pc}
   1d59a:	46c0      	nop			; (mov r8, r8)
   1d59c:	0001c351 	.word	0x0001c351
   1d5a0:	0001d5fd 	.word	0x0001d5fd
   1d5a4:	0001c369 	.word	0x0001c369
   1d5a8:	0001d461 	.word	0x0001d461
   1d5ac:	20004208 	.word	0x20004208
   1d5b0:	2000420c 	.word	0x2000420c
   1d5b4:	0001baf1 	.word	0x0001baf1
   1d5b8:	0001a081 	.word	0x0001a081

0001d5bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1d5bc:	b580      	push	{r7, lr}
   1d5be:	b084      	sub	sp, #16
   1d5c0:	af00      	add	r7, sp, #0
   1d5c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1d5c4:	4b0c      	ldr	r3, [pc, #48]	; (1d5f8 <prvGetNextExpireTime+0x3c>)
   1d5c6:	681b      	ldr	r3, [r3, #0]
   1d5c8:	681b      	ldr	r3, [r3, #0]
   1d5ca:	425a      	negs	r2, r3
   1d5cc:	4153      	adcs	r3, r2
   1d5ce:	b2db      	uxtb	r3, r3
   1d5d0:	001a      	movs	r2, r3
   1d5d2:	687b      	ldr	r3, [r7, #4]
   1d5d4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1d5d6:	687b      	ldr	r3, [r7, #4]
   1d5d8:	681b      	ldr	r3, [r3, #0]
   1d5da:	2b00      	cmp	r3, #0
   1d5dc:	d105      	bne.n	1d5ea <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d5de:	4b06      	ldr	r3, [pc, #24]	; (1d5f8 <prvGetNextExpireTime+0x3c>)
   1d5e0:	681b      	ldr	r3, [r3, #0]
   1d5e2:	68db      	ldr	r3, [r3, #12]
   1d5e4:	681b      	ldr	r3, [r3, #0]
   1d5e6:	60fb      	str	r3, [r7, #12]
   1d5e8:	e001      	b.n	1d5ee <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1d5ea:	2300      	movs	r3, #0
   1d5ec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1d5ee:	68fb      	ldr	r3, [r7, #12]
}
   1d5f0:	0018      	movs	r0, r3
   1d5f2:	46bd      	mov	sp, r7
   1d5f4:	b004      	add	sp, #16
   1d5f6:	bd80      	pop	{r7, pc}
   1d5f8:	20004204 	.word	0x20004204

0001d5fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1d5fc:	b580      	push	{r7, lr}
   1d5fe:	b084      	sub	sp, #16
   1d600:	af00      	add	r7, sp, #0
   1d602:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1d604:	4b0c      	ldr	r3, [pc, #48]	; (1d638 <prvSampleTimeNow+0x3c>)
   1d606:	4798      	blx	r3
   1d608:	0003      	movs	r3, r0
   1d60a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1d60c:	4b0b      	ldr	r3, [pc, #44]	; (1d63c <prvSampleTimeNow+0x40>)
   1d60e:	681b      	ldr	r3, [r3, #0]
   1d610:	68fa      	ldr	r2, [r7, #12]
   1d612:	429a      	cmp	r2, r3
   1d614:	d205      	bcs.n	1d622 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1d616:	4b0a      	ldr	r3, [pc, #40]	; (1d640 <prvSampleTimeNow+0x44>)
   1d618:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1d61a:	687b      	ldr	r3, [r7, #4]
   1d61c:	2201      	movs	r2, #1
   1d61e:	601a      	str	r2, [r3, #0]
   1d620:	e002      	b.n	1d628 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1d622:	687b      	ldr	r3, [r7, #4]
   1d624:	2200      	movs	r2, #0
   1d626:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1d628:	4b04      	ldr	r3, [pc, #16]	; (1d63c <prvSampleTimeNow+0x40>)
   1d62a:	68fa      	ldr	r2, [r7, #12]
   1d62c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1d62e:	68fb      	ldr	r3, [r7, #12]
}
   1d630:	0018      	movs	r0, r3
   1d632:	46bd      	mov	sp, r7
   1d634:	b004      	add	sp, #16
   1d636:	bd80      	pop	{r7, pc}
   1d638:	0001c4d9 	.word	0x0001c4d9
   1d63c:	20004214 	.word	0x20004214
   1d640:	0001d7e5 	.word	0x0001d7e5

0001d644 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1d644:	b580      	push	{r7, lr}
   1d646:	b086      	sub	sp, #24
   1d648:	af00      	add	r7, sp, #0
   1d64a:	60f8      	str	r0, [r7, #12]
   1d64c:	60b9      	str	r1, [r7, #8]
   1d64e:	607a      	str	r2, [r7, #4]
   1d650:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1d652:	2300      	movs	r3, #0
   1d654:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1d656:	68fb      	ldr	r3, [r7, #12]
   1d658:	68ba      	ldr	r2, [r7, #8]
   1d65a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1d65c:	68fb      	ldr	r3, [r7, #12]
   1d65e:	68fa      	ldr	r2, [r7, #12]
   1d660:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1d662:	68ba      	ldr	r2, [r7, #8]
   1d664:	687b      	ldr	r3, [r7, #4]
   1d666:	429a      	cmp	r2, r3
   1d668:	d812      	bhi.n	1d690 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d66a:	687a      	ldr	r2, [r7, #4]
   1d66c:	683b      	ldr	r3, [r7, #0]
   1d66e:	1ad2      	subs	r2, r2, r3
   1d670:	68fb      	ldr	r3, [r7, #12]
   1d672:	699b      	ldr	r3, [r3, #24]
   1d674:	429a      	cmp	r2, r3
   1d676:	d302      	bcc.n	1d67e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1d678:	2301      	movs	r3, #1
   1d67a:	617b      	str	r3, [r7, #20]
   1d67c:	e01b      	b.n	1d6b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1d67e:	4b10      	ldr	r3, [pc, #64]	; (1d6c0 <prvInsertTimerInActiveList+0x7c>)
   1d680:	681a      	ldr	r2, [r3, #0]
   1d682:	68fb      	ldr	r3, [r7, #12]
   1d684:	3304      	adds	r3, #4
   1d686:	0019      	movs	r1, r3
   1d688:	0010      	movs	r0, r2
   1d68a:	4b0e      	ldr	r3, [pc, #56]	; (1d6c4 <prvInsertTimerInActiveList+0x80>)
   1d68c:	4798      	blx	r3
   1d68e:	e012      	b.n	1d6b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1d690:	687a      	ldr	r2, [r7, #4]
   1d692:	683b      	ldr	r3, [r7, #0]
   1d694:	429a      	cmp	r2, r3
   1d696:	d206      	bcs.n	1d6a6 <prvInsertTimerInActiveList+0x62>
   1d698:	68ba      	ldr	r2, [r7, #8]
   1d69a:	683b      	ldr	r3, [r7, #0]
   1d69c:	429a      	cmp	r2, r3
   1d69e:	d302      	bcc.n	1d6a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1d6a0:	2301      	movs	r3, #1
   1d6a2:	617b      	str	r3, [r7, #20]
   1d6a4:	e007      	b.n	1d6b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1d6a6:	4b08      	ldr	r3, [pc, #32]	; (1d6c8 <prvInsertTimerInActiveList+0x84>)
   1d6a8:	681a      	ldr	r2, [r3, #0]
   1d6aa:	68fb      	ldr	r3, [r7, #12]
   1d6ac:	3304      	adds	r3, #4
   1d6ae:	0019      	movs	r1, r3
   1d6b0:	0010      	movs	r0, r2
   1d6b2:	4b04      	ldr	r3, [pc, #16]	; (1d6c4 <prvInsertTimerInActiveList+0x80>)
   1d6b4:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1d6b6:	697b      	ldr	r3, [r7, #20]
}
   1d6b8:	0018      	movs	r0, r3
   1d6ba:	46bd      	mov	sp, r7
   1d6bc:	b006      	add	sp, #24
   1d6be:	bd80      	pop	{r7, pc}
   1d6c0:	20004208 	.word	0x20004208
   1d6c4:	00019ea7 	.word	0x00019ea7
   1d6c8:	20004204 	.word	0x20004204

0001d6cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1d6cc:	b590      	push	{r4, r7, lr}
   1d6ce:	b08b      	sub	sp, #44	; 0x2c
   1d6d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1d6d2:	e068      	b.n	1d7a6 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1d6d4:	2308      	movs	r3, #8
   1d6d6:	18fb      	adds	r3, r7, r3
   1d6d8:	681b      	ldr	r3, [r3, #0]
   1d6da:	2b00      	cmp	r3, #0
   1d6dc:	db63      	blt.n	1d7a6 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1d6de:	2308      	movs	r3, #8
   1d6e0:	18fb      	adds	r3, r7, r3
   1d6e2:	689b      	ldr	r3, [r3, #8]
   1d6e4:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1d6e6:	69fb      	ldr	r3, [r7, #28]
   1d6e8:	695b      	ldr	r3, [r3, #20]
   1d6ea:	2b00      	cmp	r3, #0
   1d6ec:	d004      	beq.n	1d6f8 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d6ee:	69fb      	ldr	r3, [r7, #28]
   1d6f0:	3304      	adds	r3, #4
   1d6f2:	0018      	movs	r0, r3
   1d6f4:	4b33      	ldr	r3, [pc, #204]	; (1d7c4 <prvProcessReceivedCommands+0xf8>)
   1d6f6:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1d6f8:	1d3b      	adds	r3, r7, #4
   1d6fa:	0018      	movs	r0, r3
   1d6fc:	4b32      	ldr	r3, [pc, #200]	; (1d7c8 <prvProcessReceivedCommands+0xfc>)
   1d6fe:	4798      	blx	r3
   1d700:	0003      	movs	r3, r0
   1d702:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1d704:	2308      	movs	r3, #8
   1d706:	18fb      	adds	r3, r7, r3
   1d708:	681b      	ldr	r3, [r3, #0]
   1d70a:	2b09      	cmp	r3, #9
   1d70c:	d84a      	bhi.n	1d7a4 <prvProcessReceivedCommands+0xd8>
   1d70e:	009a      	lsls	r2, r3, #2
   1d710:	4b2e      	ldr	r3, [pc, #184]	; (1d7cc <prvProcessReceivedCommands+0x100>)
   1d712:	18d3      	adds	r3, r2, r3
   1d714:	681b      	ldr	r3, [r3, #0]
   1d716:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1d718:	2308      	movs	r3, #8
   1d71a:	18fb      	adds	r3, r7, r3
   1d71c:	685a      	ldr	r2, [r3, #4]
   1d71e:	69fb      	ldr	r3, [r7, #28]
   1d720:	699b      	ldr	r3, [r3, #24]
   1d722:	18d1      	adds	r1, r2, r3
   1d724:	2308      	movs	r3, #8
   1d726:	18fb      	adds	r3, r7, r3
   1d728:	685b      	ldr	r3, [r3, #4]
   1d72a:	69ba      	ldr	r2, [r7, #24]
   1d72c:	69f8      	ldr	r0, [r7, #28]
   1d72e:	4c28      	ldr	r4, [pc, #160]	; (1d7d0 <prvProcessReceivedCommands+0x104>)
   1d730:	47a0      	blx	r4
   1d732:	1e03      	subs	r3, r0, #0
   1d734:	d037      	beq.n	1d7a6 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d736:	69fb      	ldr	r3, [r7, #28]
   1d738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d73a:	69fa      	ldr	r2, [r7, #28]
   1d73c:	0010      	movs	r0, r2
   1d73e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d740:	69fb      	ldr	r3, [r7, #28]
   1d742:	69db      	ldr	r3, [r3, #28]
   1d744:	2b01      	cmp	r3, #1
   1d746:	d12e      	bne.n	1d7a6 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1d748:	2308      	movs	r3, #8
   1d74a:	18fb      	adds	r3, r7, r3
   1d74c:	685a      	ldr	r2, [r3, #4]
   1d74e:	69fb      	ldr	r3, [r7, #28]
   1d750:	699b      	ldr	r3, [r3, #24]
   1d752:	18d2      	adds	r2, r2, r3
   1d754:	69f8      	ldr	r0, [r7, #28]
   1d756:	2300      	movs	r3, #0
   1d758:	9300      	str	r3, [sp, #0]
   1d75a:	2300      	movs	r3, #0
   1d75c:	2100      	movs	r1, #0
   1d75e:	4c1d      	ldr	r4, [pc, #116]	; (1d7d4 <prvProcessReceivedCommands+0x108>)
   1d760:	47a0      	blx	r4
   1d762:	0003      	movs	r3, r0
   1d764:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1d766:	697b      	ldr	r3, [r7, #20]
   1d768:	2b00      	cmp	r3, #0
   1d76a:	d11c      	bne.n	1d7a6 <prvProcessReceivedCommands+0xda>
   1d76c:	b672      	cpsid	i
   1d76e:	e7fe      	b.n	1d76e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1d770:	2308      	movs	r3, #8
   1d772:	18fb      	adds	r3, r7, r3
   1d774:	685a      	ldr	r2, [r3, #4]
   1d776:	69fb      	ldr	r3, [r7, #28]
   1d778:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1d77a:	69fb      	ldr	r3, [r7, #28]
   1d77c:	699b      	ldr	r3, [r3, #24]
   1d77e:	2b00      	cmp	r3, #0
   1d780:	d101      	bne.n	1d786 <prvProcessReceivedCommands+0xba>
   1d782:	b672      	cpsid	i
   1d784:	e7fe      	b.n	1d784 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1d786:	69fb      	ldr	r3, [r7, #28]
   1d788:	699a      	ldr	r2, [r3, #24]
   1d78a:	69bb      	ldr	r3, [r7, #24]
   1d78c:	18d1      	adds	r1, r2, r3
   1d78e:	69bb      	ldr	r3, [r7, #24]
   1d790:	69ba      	ldr	r2, [r7, #24]
   1d792:	69f8      	ldr	r0, [r7, #28]
   1d794:	4c0e      	ldr	r4, [pc, #56]	; (1d7d0 <prvProcessReceivedCommands+0x104>)
   1d796:	47a0      	blx	r4
					break;
   1d798:	e005      	b.n	1d7a6 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1d79a:	69fb      	ldr	r3, [r7, #28]
   1d79c:	0018      	movs	r0, r3
   1d79e:	4b0e      	ldr	r3, [pc, #56]	; (1d7d8 <prvProcessReceivedCommands+0x10c>)
   1d7a0:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1d7a2:	e000      	b.n	1d7a6 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1d7a4:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1d7a6:	4b0d      	ldr	r3, [pc, #52]	; (1d7dc <prvProcessReceivedCommands+0x110>)
   1d7a8:	681b      	ldr	r3, [r3, #0]
   1d7aa:	2208      	movs	r2, #8
   1d7ac:	18b9      	adds	r1, r7, r2
   1d7ae:	2200      	movs	r2, #0
   1d7b0:	0018      	movs	r0, r3
   1d7b2:	4b0b      	ldr	r3, [pc, #44]	; (1d7e0 <prvProcessReceivedCommands+0x114>)
   1d7b4:	4798      	blx	r3
   1d7b6:	1e03      	subs	r3, r0, #0
   1d7b8:	d18c      	bne.n	1d6d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1d7ba:	46c0      	nop			; (mov r8, r8)
   1d7bc:	46bd      	mov	sp, r7
   1d7be:	b009      	add	sp, #36	; 0x24
   1d7c0:	bd90      	pop	{r4, r7, pc}
   1d7c2:	46c0      	nop			; (mov r8, r8)
   1d7c4:	00019f13 	.word	0x00019f13
   1d7c8:	0001d5fd 	.word	0x0001d5fd
   1d7cc:	000382e4 	.word	0x000382e4
   1d7d0:	0001d645 	.word	0x0001d645
   1d7d4:	0001d3b9 	.word	0x0001d3b9
   1d7d8:	0001a295 	.word	0x0001a295
   1d7dc:	2000420c 	.word	0x2000420c
   1d7e0:	0001aee5 	.word	0x0001aee5

0001d7e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1d7e4:	b590      	push	{r4, r7, lr}
   1d7e6:	b089      	sub	sp, #36	; 0x24
   1d7e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1d7ea:	e03e      	b.n	1d86a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d7ec:	4b28      	ldr	r3, [pc, #160]	; (1d890 <prvSwitchTimerLists+0xac>)
   1d7ee:	681b      	ldr	r3, [r3, #0]
   1d7f0:	68db      	ldr	r3, [r3, #12]
   1d7f2:	681b      	ldr	r3, [r3, #0]
   1d7f4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d7f6:	4b26      	ldr	r3, [pc, #152]	; (1d890 <prvSwitchTimerLists+0xac>)
   1d7f8:	681b      	ldr	r3, [r3, #0]
   1d7fa:	68db      	ldr	r3, [r3, #12]
   1d7fc:	68db      	ldr	r3, [r3, #12]
   1d7fe:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d800:	693b      	ldr	r3, [r7, #16]
   1d802:	3304      	adds	r3, #4
   1d804:	0018      	movs	r0, r3
   1d806:	4b23      	ldr	r3, [pc, #140]	; (1d894 <prvSwitchTimerLists+0xb0>)
   1d808:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d80a:	693b      	ldr	r3, [r7, #16]
   1d80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d80e:	693a      	ldr	r2, [r7, #16]
   1d810:	0010      	movs	r0, r2
   1d812:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d814:	693b      	ldr	r3, [r7, #16]
   1d816:	69db      	ldr	r3, [r3, #28]
   1d818:	2b01      	cmp	r3, #1
   1d81a:	d126      	bne.n	1d86a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1d81c:	693b      	ldr	r3, [r7, #16]
   1d81e:	699a      	ldr	r2, [r3, #24]
   1d820:	697b      	ldr	r3, [r7, #20]
   1d822:	18d3      	adds	r3, r2, r3
   1d824:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1d826:	68fa      	ldr	r2, [r7, #12]
   1d828:	697b      	ldr	r3, [r7, #20]
   1d82a:	429a      	cmp	r2, r3
   1d82c:	d90e      	bls.n	1d84c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1d82e:	693b      	ldr	r3, [r7, #16]
   1d830:	68fa      	ldr	r2, [r7, #12]
   1d832:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1d834:	693b      	ldr	r3, [r7, #16]
   1d836:	693a      	ldr	r2, [r7, #16]
   1d838:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1d83a:	4b15      	ldr	r3, [pc, #84]	; (1d890 <prvSwitchTimerLists+0xac>)
   1d83c:	681a      	ldr	r2, [r3, #0]
   1d83e:	693b      	ldr	r3, [r7, #16]
   1d840:	3304      	adds	r3, #4
   1d842:	0019      	movs	r1, r3
   1d844:	0010      	movs	r0, r2
   1d846:	4b14      	ldr	r3, [pc, #80]	; (1d898 <prvSwitchTimerLists+0xb4>)
   1d848:	4798      	blx	r3
   1d84a:	e00e      	b.n	1d86a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1d84c:	697a      	ldr	r2, [r7, #20]
   1d84e:	6938      	ldr	r0, [r7, #16]
   1d850:	2300      	movs	r3, #0
   1d852:	9300      	str	r3, [sp, #0]
   1d854:	2300      	movs	r3, #0
   1d856:	2100      	movs	r1, #0
   1d858:	4c10      	ldr	r4, [pc, #64]	; (1d89c <prvSwitchTimerLists+0xb8>)
   1d85a:	47a0      	blx	r4
   1d85c:	0003      	movs	r3, r0
   1d85e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1d860:	68bb      	ldr	r3, [r7, #8]
   1d862:	2b00      	cmp	r3, #0
   1d864:	d101      	bne.n	1d86a <prvSwitchTimerLists+0x86>
   1d866:	b672      	cpsid	i
   1d868:	e7fe      	b.n	1d868 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1d86a:	4b09      	ldr	r3, [pc, #36]	; (1d890 <prvSwitchTimerLists+0xac>)
   1d86c:	681b      	ldr	r3, [r3, #0]
   1d86e:	681b      	ldr	r3, [r3, #0]
   1d870:	2b00      	cmp	r3, #0
   1d872:	d1bb      	bne.n	1d7ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1d874:	4b06      	ldr	r3, [pc, #24]	; (1d890 <prvSwitchTimerLists+0xac>)
   1d876:	681b      	ldr	r3, [r3, #0]
   1d878:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1d87a:	4b09      	ldr	r3, [pc, #36]	; (1d8a0 <prvSwitchTimerLists+0xbc>)
   1d87c:	681a      	ldr	r2, [r3, #0]
   1d87e:	4b04      	ldr	r3, [pc, #16]	; (1d890 <prvSwitchTimerLists+0xac>)
   1d880:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1d882:	4b07      	ldr	r3, [pc, #28]	; (1d8a0 <prvSwitchTimerLists+0xbc>)
   1d884:	687a      	ldr	r2, [r7, #4]
   1d886:	601a      	str	r2, [r3, #0]
}
   1d888:	46c0      	nop			; (mov r8, r8)
   1d88a:	46bd      	mov	sp, r7
   1d88c:	b007      	add	sp, #28
   1d88e:	bd90      	pop	{r4, r7, pc}
   1d890:	20004204 	.word	0x20004204
   1d894:	00019f13 	.word	0x00019f13
   1d898:	00019ea7 	.word	0x00019ea7
   1d89c:	0001d3b9 	.word	0x0001d3b9
   1d8a0:	20004208 	.word	0x20004208

0001d8a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1d8a4:	b580      	push	{r7, lr}
   1d8a6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1d8a8:	4b10      	ldr	r3, [pc, #64]	; (1d8ec <prvCheckForValidListAndQueue+0x48>)
   1d8aa:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1d8ac:	4b10      	ldr	r3, [pc, #64]	; (1d8f0 <prvCheckForValidListAndQueue+0x4c>)
   1d8ae:	681b      	ldr	r3, [r3, #0]
   1d8b0:	2b00      	cmp	r3, #0
   1d8b2:	d115      	bne.n	1d8e0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1d8b4:	4b0f      	ldr	r3, [pc, #60]	; (1d8f4 <prvCheckForValidListAndQueue+0x50>)
   1d8b6:	0018      	movs	r0, r3
   1d8b8:	4b0f      	ldr	r3, [pc, #60]	; (1d8f8 <prvCheckForValidListAndQueue+0x54>)
   1d8ba:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1d8bc:	4b0f      	ldr	r3, [pc, #60]	; (1d8fc <prvCheckForValidListAndQueue+0x58>)
   1d8be:	0018      	movs	r0, r3
   1d8c0:	4b0d      	ldr	r3, [pc, #52]	; (1d8f8 <prvCheckForValidListAndQueue+0x54>)
   1d8c2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1d8c4:	4b0e      	ldr	r3, [pc, #56]	; (1d900 <prvCheckForValidListAndQueue+0x5c>)
   1d8c6:	4a0b      	ldr	r2, [pc, #44]	; (1d8f4 <prvCheckForValidListAndQueue+0x50>)
   1d8c8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1d8ca:	4b0e      	ldr	r3, [pc, #56]	; (1d904 <prvCheckForValidListAndQueue+0x60>)
   1d8cc:	4a0b      	ldr	r2, [pc, #44]	; (1d8fc <prvCheckForValidListAndQueue+0x58>)
   1d8ce:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1d8d0:	2200      	movs	r2, #0
   1d8d2:	210c      	movs	r1, #12
   1d8d4:	2005      	movs	r0, #5
   1d8d6:	4b0c      	ldr	r3, [pc, #48]	; (1d908 <prvCheckForValidListAndQueue+0x64>)
   1d8d8:	4798      	blx	r3
   1d8da:	0002      	movs	r2, r0
   1d8dc:	4b04      	ldr	r3, [pc, #16]	; (1d8f0 <prvCheckForValidListAndQueue+0x4c>)
   1d8de:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1d8e0:	4b0a      	ldr	r3, [pc, #40]	; (1d90c <prvCheckForValidListAndQueue+0x68>)
   1d8e2:	4798      	blx	r3
}
   1d8e4:	46c0      	nop			; (mov r8, r8)
   1d8e6:	46bd      	mov	sp, r7
   1d8e8:	bd80      	pop	{r7, pc}
   1d8ea:	46c0      	nop			; (mov r8, r8)
   1d8ec:	0001a099 	.word	0x0001a099
   1d8f0:	2000420c 	.word	0x2000420c
   1d8f4:	200041dc 	.word	0x200041dc
   1d8f8:	00019e11 	.word	0x00019e11
   1d8fc:	200041f0 	.word	0x200041f0
   1d900:	20004204 	.word	0x20004204
   1d904:	20004208 	.word	0x20004208
   1d908:	0001a385 	.word	0x0001a385
   1d90c:	0001a0bd 	.word	0x0001a0bd

0001d910 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1d910:	b580      	push	{r7, lr}
   1d912:	b082      	sub	sp, #8
   1d914:	af00      	add	r7, sp, #0
   1d916:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1d918:	687b      	ldr	r3, [r7, #4]
   1d91a:	7c1b      	ldrb	r3, [r3, #16]
   1d91c:	2b00      	cmp	r3, #0
   1d91e:	d00b      	beq.n	1d938 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1d920:	687b      	ldr	r3, [r7, #4]
   1d922:	689b      	ldr	r3, [r3, #8]
   1d924:	1c5a      	adds	r2, r3, #1
   1d926:	687b      	ldr	r3, [r7, #4]
   1d928:	68d9      	ldr	r1, [r3, #12]
   1d92a:	4b10      	ldr	r3, [pc, #64]	; (1d96c <advance_pointer+0x5c>)
   1d92c:	0010      	movs	r0, r2
   1d92e:	4798      	blx	r3
   1d930:	000b      	movs	r3, r1
   1d932:	001a      	movs	r2, r3
   1d934:	687b      	ldr	r3, [r7, #4]
   1d936:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1d938:	687b      	ldr	r3, [r7, #4]
   1d93a:	685b      	ldr	r3, [r3, #4]
   1d93c:	1c5a      	adds	r2, r3, #1
   1d93e:	687b      	ldr	r3, [r7, #4]
   1d940:	68d9      	ldr	r1, [r3, #12]
   1d942:	4b0a      	ldr	r3, [pc, #40]	; (1d96c <advance_pointer+0x5c>)
   1d944:	0010      	movs	r0, r2
   1d946:	4798      	blx	r3
   1d948:	000b      	movs	r3, r1
   1d94a:	001a      	movs	r2, r3
   1d94c:	687b      	ldr	r3, [r7, #4]
   1d94e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1d950:	687b      	ldr	r3, [r7, #4]
   1d952:	685a      	ldr	r2, [r3, #4]
   1d954:	687b      	ldr	r3, [r7, #4]
   1d956:	689b      	ldr	r3, [r3, #8]
   1d958:	1ad3      	subs	r3, r2, r3
   1d95a:	425a      	negs	r2, r3
   1d95c:	4153      	adcs	r3, r2
   1d95e:	b2da      	uxtb	r2, r3
   1d960:	687b      	ldr	r3, [r7, #4]
   1d962:	741a      	strb	r2, [r3, #16]
 }
   1d964:	46c0      	nop			; (mov r8, r8)
   1d966:	46bd      	mov	sp, r7
   1d968:	b002      	add	sp, #8
   1d96a:	bd80      	pop	{r7, pc}
   1d96c:	00032911 	.word	0x00032911

0001d970 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1d970:	b580      	push	{r7, lr}
   1d972:	b082      	sub	sp, #8
   1d974:	af00      	add	r7, sp, #0
   1d976:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1d978:	687b      	ldr	r3, [r7, #4]
   1d97a:	2200      	movs	r2, #0
   1d97c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1d97e:	687b      	ldr	r3, [r7, #4]
   1d980:	689b      	ldr	r3, [r3, #8]
   1d982:	1c5a      	adds	r2, r3, #1
   1d984:	687b      	ldr	r3, [r7, #4]
   1d986:	68d9      	ldr	r1, [r3, #12]
   1d988:	4b05      	ldr	r3, [pc, #20]	; (1d9a0 <retreat_pointer+0x30>)
   1d98a:	0010      	movs	r0, r2
   1d98c:	4798      	blx	r3
   1d98e:	000b      	movs	r3, r1
   1d990:	001a      	movs	r2, r3
   1d992:	687b      	ldr	r3, [r7, #4]
   1d994:	609a      	str	r2, [r3, #8]
 }
   1d996:	46c0      	nop			; (mov r8, r8)
   1d998:	46bd      	mov	sp, r7
   1d99a:	b002      	add	sp, #8
   1d99c:	bd80      	pop	{r7, pc}
   1d99e:	46c0      	nop			; (mov r8, r8)
   1d9a0:	00032911 	.word	0x00032911

0001d9a4 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1d9a4:	b580      	push	{r7, lr}
   1d9a6:	b084      	sub	sp, #16
   1d9a8:	af00      	add	r7, sp, #0
   1d9aa:	6078      	str	r0, [r7, #4]
   1d9ac:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1d9ae:	2014      	movs	r0, #20
   1d9b0:	4b09      	ldr	r3, [pc, #36]	; (1d9d8 <circular_buf_init+0x34>)
   1d9b2:	4798      	blx	r3
   1d9b4:	0003      	movs	r3, r0
   1d9b6:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1d9b8:	68fb      	ldr	r3, [r7, #12]
   1d9ba:	687a      	ldr	r2, [r7, #4]
   1d9bc:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1d9be:	68fb      	ldr	r3, [r7, #12]
   1d9c0:	683a      	ldr	r2, [r7, #0]
   1d9c2:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1d9c4:	68fb      	ldr	r3, [r7, #12]
   1d9c6:	0018      	movs	r0, r3
   1d9c8:	4b04      	ldr	r3, [pc, #16]	; (1d9dc <circular_buf_init+0x38>)
   1d9ca:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1d9cc:	68fb      	ldr	r3, [r7, #12]
 }
   1d9ce:	0018      	movs	r0, r3
   1d9d0:	46bd      	mov	sp, r7
   1d9d2:	b004      	add	sp, #16
   1d9d4:	bd80      	pop	{r7, pc}
   1d9d6:	46c0      	nop			; (mov r8, r8)
   1d9d8:	00034825 	.word	0x00034825
   1d9dc:	0001d9e1 	.word	0x0001d9e1

0001d9e0 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1d9e0:	b580      	push	{r7, lr}
   1d9e2:	b082      	sub	sp, #8
   1d9e4:	af00      	add	r7, sp, #0
   1d9e6:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1d9e8:	687b      	ldr	r3, [r7, #4]
   1d9ea:	2200      	movs	r2, #0
   1d9ec:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1d9ee:	687b      	ldr	r3, [r7, #4]
   1d9f0:	2200      	movs	r2, #0
   1d9f2:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1d9f4:	687b      	ldr	r3, [r7, #4]
   1d9f6:	2200      	movs	r2, #0
   1d9f8:	741a      	strb	r2, [r3, #16]
 }
   1d9fa:	46c0      	nop			; (mov r8, r8)
   1d9fc:	46bd      	mov	sp, r7
   1d9fe:	b002      	add	sp, #8
   1da00:	bd80      	pop	{r7, pc}
	...

0001da04 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1da04:	b580      	push	{r7, lr}
   1da06:	b082      	sub	sp, #8
   1da08:	af00      	add	r7, sp, #0
   1da0a:	6078      	str	r0, [r7, #4]
   1da0c:	000a      	movs	r2, r1
   1da0e:	1cfb      	adds	r3, r7, #3
   1da10:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1da12:	687b      	ldr	r3, [r7, #4]
   1da14:	681a      	ldr	r2, [r3, #0]
   1da16:	687b      	ldr	r3, [r7, #4]
   1da18:	685b      	ldr	r3, [r3, #4]
   1da1a:	18d3      	adds	r3, r2, r3
   1da1c:	1cfa      	adds	r2, r7, #3
   1da1e:	7812      	ldrb	r2, [r2, #0]
   1da20:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1da22:	687b      	ldr	r3, [r7, #4]
   1da24:	0018      	movs	r0, r3
   1da26:	4b03      	ldr	r3, [pc, #12]	; (1da34 <circular_buf_put+0x30>)
   1da28:	4798      	blx	r3
 }
   1da2a:	46c0      	nop			; (mov r8, r8)
   1da2c:	46bd      	mov	sp, r7
   1da2e:	b002      	add	sp, #8
   1da30:	bd80      	pop	{r7, pc}
   1da32:	46c0      	nop			; (mov r8, r8)
   1da34:	0001d911 	.word	0x0001d911

0001da38 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1da38:	b580      	push	{r7, lr}
   1da3a:	b084      	sub	sp, #16
   1da3c:	af00      	add	r7, sp, #0
   1da3e:	6078      	str	r0, [r7, #4]
   1da40:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1da42:	2301      	movs	r3, #1
   1da44:	425b      	negs	r3, r3
   1da46:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1da48:	687b      	ldr	r3, [r7, #4]
   1da4a:	0018      	movs	r0, r3
   1da4c:	4b0d      	ldr	r3, [pc, #52]	; (1da84 <circular_buf_get+0x4c>)
   1da4e:	4798      	blx	r3
   1da50:	0003      	movs	r3, r0
   1da52:	001a      	movs	r2, r3
   1da54:	2301      	movs	r3, #1
   1da56:	4053      	eors	r3, r2
   1da58:	b2db      	uxtb	r3, r3
   1da5a:	2b00      	cmp	r3, #0
   1da5c:	d00d      	beq.n	1da7a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1da5e:	687b      	ldr	r3, [r7, #4]
   1da60:	681a      	ldr	r2, [r3, #0]
   1da62:	687b      	ldr	r3, [r7, #4]
   1da64:	689b      	ldr	r3, [r3, #8]
   1da66:	18d3      	adds	r3, r2, r3
   1da68:	781a      	ldrb	r2, [r3, #0]
   1da6a:	683b      	ldr	r3, [r7, #0]
   1da6c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1da6e:	687b      	ldr	r3, [r7, #4]
   1da70:	0018      	movs	r0, r3
   1da72:	4b05      	ldr	r3, [pc, #20]	; (1da88 <circular_buf_get+0x50>)
   1da74:	4798      	blx	r3

		 r = 0;
   1da76:	2300      	movs	r3, #0
   1da78:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1da7a:	68fb      	ldr	r3, [r7, #12]
 }
   1da7c:	0018      	movs	r0, r3
   1da7e:	46bd      	mov	sp, r7
   1da80:	b004      	add	sp, #16
   1da82:	bd80      	pop	{r7, pc}
   1da84:	0001da8d 	.word	0x0001da8d
   1da88:	0001d971 	.word	0x0001d971

0001da8c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1da8c:	b580      	push	{r7, lr}
   1da8e:	b082      	sub	sp, #8
   1da90:	af00      	add	r7, sp, #0
   1da92:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1da94:	687b      	ldr	r3, [r7, #4]
   1da96:	7c1b      	ldrb	r3, [r3, #16]
   1da98:	2201      	movs	r2, #1
   1da9a:	4053      	eors	r3, r2
   1da9c:	b2db      	uxtb	r3, r3
   1da9e:	2b00      	cmp	r3, #0
   1daa0:	d007      	beq.n	1dab2 <circular_buf_empty+0x26>
   1daa2:	687b      	ldr	r3, [r7, #4]
   1daa4:	685a      	ldr	r2, [r3, #4]
   1daa6:	687b      	ldr	r3, [r7, #4]
   1daa8:	689b      	ldr	r3, [r3, #8]
   1daaa:	429a      	cmp	r2, r3
   1daac:	d101      	bne.n	1dab2 <circular_buf_empty+0x26>
   1daae:	2301      	movs	r3, #1
   1dab0:	e000      	b.n	1dab4 <circular_buf_empty+0x28>
   1dab2:	2300      	movs	r3, #0
   1dab4:	1c1a      	adds	r2, r3, #0
   1dab6:	2301      	movs	r3, #1
   1dab8:	4013      	ands	r3, r2
   1daba:	b2db      	uxtb	r3, r3
 }
   1dabc:	0018      	movs	r0, r3
   1dabe:	46bd      	mov	sp, r7
   1dac0:	b002      	add	sp, #8
   1dac2:	bd80      	pop	{r7, pc}

0001dac4 <system_interrupt_enable>:
{
   1dac4:	b580      	push	{r7, lr}
   1dac6:	b082      	sub	sp, #8
   1dac8:	af00      	add	r7, sp, #0
   1daca:	0002      	movs	r2, r0
   1dacc:	1dfb      	adds	r3, r7, #7
   1dace:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1dad0:	4b06      	ldr	r3, [pc, #24]	; (1daec <system_interrupt_enable+0x28>)
   1dad2:	1dfa      	adds	r2, r7, #7
   1dad4:	7812      	ldrb	r2, [r2, #0]
   1dad6:	0011      	movs	r1, r2
   1dad8:	221f      	movs	r2, #31
   1dada:	400a      	ands	r2, r1
   1dadc:	2101      	movs	r1, #1
   1dade:	4091      	lsls	r1, r2
   1dae0:	000a      	movs	r2, r1
   1dae2:	601a      	str	r2, [r3, #0]
}
   1dae4:	46c0      	nop			; (mov r8, r8)
   1dae6:	46bd      	mov	sp, r7
   1dae8:	b002      	add	sp, #8
   1daea:	bd80      	pop	{r7, pc}
   1daec:	e000e100 	.word	0xe000e100

0001daf0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1daf0:	b580      	push	{r7, lr}
   1daf2:	b084      	sub	sp, #16
   1daf4:	af00      	add	r7, sp, #0
   1daf6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1daf8:	687b      	ldr	r3, [r7, #4]
   1dafa:	681b      	ldr	r3, [r3, #0]
   1dafc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1dafe:	68fb      	ldr	r3, [r7, #12]
   1db00:	69db      	ldr	r3, [r3, #28]
   1db02:	1e5a      	subs	r2, r3, #1
   1db04:	4193      	sbcs	r3, r2
   1db06:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1db08:	0018      	movs	r0, r3
   1db0a:	46bd      	mov	sp, r7
   1db0c:	b004      	add	sp, #16
   1db0e:	bd80      	pop	{r7, pc}

0001db10 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1db10:	b580      	push	{r7, lr}
   1db12:	b082      	sub	sp, #8
   1db14:	af00      	add	r7, sp, #0
   1db16:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1db18:	46c0      	nop			; (mov r8, r8)
   1db1a:	687b      	ldr	r3, [r7, #4]
   1db1c:	0018      	movs	r0, r3
   1db1e:	4b04      	ldr	r3, [pc, #16]	; (1db30 <_usart_wait_for_sync+0x20>)
   1db20:	4798      	blx	r3
   1db22:	1e03      	subs	r3, r0, #0
   1db24:	d1f9      	bne.n	1db1a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1db26:	46c0      	nop			; (mov r8, r8)
   1db28:	46bd      	mov	sp, r7
   1db2a:	b002      	add	sp, #8
   1db2c:	bd80      	pop	{r7, pc}
   1db2e:	46c0      	nop			; (mov r8, r8)
   1db30:	0001daf1 	.word	0x0001daf1

0001db34 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1db34:	b580      	push	{r7, lr}
   1db36:	b082      	sub	sp, #8
   1db38:	af00      	add	r7, sp, #0
   1db3a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1db3c:	687b      	ldr	r3, [r7, #4]
   1db3e:	2280      	movs	r2, #128	; 0x80
   1db40:	05d2      	lsls	r2, r2, #23
   1db42:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1db44:	687b      	ldr	r3, [r7, #4]
   1db46:	2200      	movs	r2, #0
   1db48:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1db4a:	687b      	ldr	r3, [r7, #4]
   1db4c:	22ff      	movs	r2, #255	; 0xff
   1db4e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1db50:	687b      	ldr	r3, [r7, #4]
   1db52:	2200      	movs	r2, #0
   1db54:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1db56:	687b      	ldr	r3, [r7, #4]
   1db58:	2200      	movs	r2, #0
   1db5a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1db5c:	687b      	ldr	r3, [r7, #4]
   1db5e:	2296      	movs	r2, #150	; 0x96
   1db60:	0192      	lsls	r2, r2, #6
   1db62:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1db64:	687b      	ldr	r3, [r7, #4]
   1db66:	2224      	movs	r2, #36	; 0x24
   1db68:	2101      	movs	r1, #1
   1db6a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1db6c:	687b      	ldr	r3, [r7, #4]
   1db6e:	2225      	movs	r2, #37	; 0x25
   1db70:	2101      	movs	r1, #1
   1db72:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1db74:	687b      	ldr	r3, [r7, #4]
   1db76:	2226      	movs	r2, #38	; 0x26
   1db78:	2100      	movs	r1, #0
   1db7a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1db7c:	687b      	ldr	r3, [r7, #4]
   1db7e:	2227      	movs	r2, #39	; 0x27
   1db80:	2100      	movs	r1, #0
   1db82:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1db84:	687b      	ldr	r3, [r7, #4]
   1db86:	2200      	movs	r2, #0
   1db88:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1db8a:	687b      	ldr	r3, [r7, #4]
   1db8c:	2288      	movs	r2, #136	; 0x88
   1db8e:	0352      	lsls	r2, r2, #13
   1db90:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1db92:	687b      	ldr	r3, [r7, #4]
   1db94:	222c      	movs	r2, #44	; 0x2c
   1db96:	2100      	movs	r1, #0
   1db98:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1db9a:	687b      	ldr	r3, [r7, #4]
   1db9c:	222d      	movs	r2, #45	; 0x2d
   1db9e:	2100      	movs	r1, #0
   1dba0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1dba2:	687b      	ldr	r3, [r7, #4]
   1dba4:	2200      	movs	r2, #0
   1dba6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1dba8:	687b      	ldr	r3, [r7, #4]
   1dbaa:	2200      	movs	r2, #0
   1dbac:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1dbae:	687b      	ldr	r3, [r7, #4]
   1dbb0:	2200      	movs	r2, #0
   1dbb2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1dbb4:	687b      	ldr	r3, [r7, #4]
   1dbb6:	2200      	movs	r2, #0
   1dbb8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1dbba:	687b      	ldr	r3, [r7, #4]
   1dbbc:	2200      	movs	r2, #0
   1dbbe:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1dbc0:	687b      	ldr	r3, [r7, #4]
   1dbc2:	2200      	movs	r2, #0
   1dbc4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1dbc6:	687b      	ldr	r3, [r7, #4]
   1dbc8:	2200      	movs	r2, #0
   1dbca:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1dbcc:	687b      	ldr	r3, [r7, #4]
   1dbce:	2200      	movs	r2, #0
   1dbd0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1dbd2:	687b      	ldr	r3, [r7, #4]
   1dbd4:	2200      	movs	r2, #0
   1dbd6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1dbd8:	687b      	ldr	r3, [r7, #4]
   1dbda:	2200      	movs	r2, #0
   1dbdc:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1dbde:	687b      	ldr	r3, [r7, #4]
   1dbe0:	2213      	movs	r2, #19
   1dbe2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1dbe4:	687b      	ldr	r3, [r7, #4]
   1dbe6:	2200      	movs	r2, #0
   1dbe8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1dbea:	46c0      	nop			; (mov r8, r8)
   1dbec:	46bd      	mov	sp, r7
   1dbee:	b002      	add	sp, #8
   1dbf0:	bd80      	pop	{r7, pc}
	...

0001dbf4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1dbf4:	b580      	push	{r7, lr}
   1dbf6:	b084      	sub	sp, #16
   1dbf8:	af00      	add	r7, sp, #0
   1dbfa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1dbfc:	687b      	ldr	r3, [r7, #4]
   1dbfe:	681b      	ldr	r3, [r3, #0]
   1dc00:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1dc02:	687b      	ldr	r3, [r7, #4]
   1dc04:	681b      	ldr	r3, [r3, #0]
   1dc06:	0018      	movs	r0, r3
   1dc08:	4b09      	ldr	r3, [pc, #36]	; (1dc30 <usart_enable+0x3c>)
   1dc0a:	4798      	blx	r3
   1dc0c:	0003      	movs	r3, r0
   1dc0e:	0018      	movs	r0, r3
   1dc10:	4b08      	ldr	r3, [pc, #32]	; (1dc34 <usart_enable+0x40>)
   1dc12:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1dc14:	687b      	ldr	r3, [r7, #4]
   1dc16:	0018      	movs	r0, r3
   1dc18:	4b07      	ldr	r3, [pc, #28]	; (1dc38 <usart_enable+0x44>)
   1dc1a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1dc1c:	68fb      	ldr	r3, [r7, #12]
   1dc1e:	681b      	ldr	r3, [r3, #0]
   1dc20:	2202      	movs	r2, #2
   1dc22:	431a      	orrs	r2, r3
   1dc24:	68fb      	ldr	r3, [r7, #12]
   1dc26:	601a      	str	r2, [r3, #0]
}
   1dc28:	46c0      	nop			; (mov r8, r8)
   1dc2a:	46bd      	mov	sp, r7
   1dc2c:	b004      	add	sp, #16
   1dc2e:	bd80      	pop	{r7, pc}
   1dc30:	00027521 	.word	0x00027521
   1dc34:	0001dac5 	.word	0x0001dac5
   1dc38:	0001db11 	.word	0x0001db11

0001dc3c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1dc3c:	b580      	push	{r7, lr}
   1dc3e:	b082      	sub	sp, #8
   1dc40:	af00      	add	r7, sp, #0
   1dc42:	6078      	str	r0, [r7, #4]
   1dc44:	000a      	movs	r2, r1
   1dc46:	1cfb      	adds	r3, r7, #3
   1dc48:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1dc4a:	687b      	ldr	r3, [r7, #4]
   1dc4c:	2231      	movs	r2, #49	; 0x31
   1dc4e:	5c9b      	ldrb	r3, [r3, r2]
   1dc50:	b25a      	sxtb	r2, r3
   1dc52:	1cfb      	adds	r3, r7, #3
   1dc54:	781b      	ldrb	r3, [r3, #0]
   1dc56:	2101      	movs	r1, #1
   1dc58:	4099      	lsls	r1, r3
   1dc5a:	000b      	movs	r3, r1
   1dc5c:	b25b      	sxtb	r3, r3
   1dc5e:	4313      	orrs	r3, r2
   1dc60:	b25b      	sxtb	r3, r3
   1dc62:	b2d9      	uxtb	r1, r3
   1dc64:	687b      	ldr	r3, [r7, #4]
   1dc66:	2231      	movs	r2, #49	; 0x31
   1dc68:	5499      	strb	r1, [r3, r2]

}
   1dc6a:	46c0      	nop			; (mov r8, r8)
   1dc6c:	46bd      	mov	sp, r7
   1dc6e:	b002      	add	sp, #8
   1dc70:	bd80      	pop	{r7, pc}
	...

0001dc74 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1dc74:	b580      	push	{r7, lr}
   1dc76:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1dc78:	2380      	movs	r3, #128	; 0x80
   1dc7a:	009a      	lsls	r2, r3, #2
   1dc7c:	4b0f      	ldr	r3, [pc, #60]	; (1dcbc <InitializeSerialConsole+0x48>)
   1dc7e:	0011      	movs	r1, r2
   1dc80:	0018      	movs	r0, r3
   1dc82:	4b0f      	ldr	r3, [pc, #60]	; (1dcc0 <InitializeSerialConsole+0x4c>)
   1dc84:	4798      	blx	r3
   1dc86:	0002      	movs	r2, r0
   1dc88:	4b0e      	ldr	r3, [pc, #56]	; (1dcc4 <InitializeSerialConsole+0x50>)
   1dc8a:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1dc8c:	2380      	movs	r3, #128	; 0x80
   1dc8e:	009a      	lsls	r2, r3, #2
   1dc90:	4b0d      	ldr	r3, [pc, #52]	; (1dcc8 <InitializeSerialConsole+0x54>)
   1dc92:	0011      	movs	r1, r2
   1dc94:	0018      	movs	r0, r3
   1dc96:	4b0a      	ldr	r3, [pc, #40]	; (1dcc0 <InitializeSerialConsole+0x4c>)
   1dc98:	4798      	blx	r3
   1dc9a:	0002      	movs	r2, r0
   1dc9c:	4b0b      	ldr	r3, [pc, #44]	; (1dccc <InitializeSerialConsole+0x58>)
   1dc9e:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1dca0:	4b0b      	ldr	r3, [pc, #44]	; (1dcd0 <InitializeSerialConsole+0x5c>)
   1dca2:	4798      	blx	r3
    configure_usart_callbacks();
   1dca4:	4b0b      	ldr	r3, [pc, #44]	; (1dcd4 <InitializeSerialConsole+0x60>)
   1dca6:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1dca8:	490b      	ldr	r1, [pc, #44]	; (1dcd8 <InitializeSerialConsole+0x64>)
   1dcaa:	4b0c      	ldr	r3, [pc, #48]	; (1dcdc <InitializeSerialConsole+0x68>)
   1dcac:	2201      	movs	r2, #1
   1dcae:	0018      	movs	r0, r3
   1dcb0:	4b0b      	ldr	r3, [pc, #44]	; (1dce0 <InitializeSerialConsole+0x6c>)
   1dcb2:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1dcb4:	46c0      	nop			; (mov r8, r8)
   1dcb6:	46bd      	mov	sp, r7
   1dcb8:	bd80      	pop	{r7, pc}
   1dcba:	46c0      	nop			; (mov r8, r8)
   1dcbc:	20005888 	.word	0x20005888
   1dcc0:	0001d9a5 	.word	0x0001d9a5
   1dcc4:	20005680 	.word	0x20005680
   1dcc8:	20005688 	.word	0x20005688
   1dccc:	20005a8c 	.word	0x20005a8c
   1dcd0:	0001de49 	.word	0x0001de49
   1dcd4:	0001dec1 	.word	0x0001dec1
   1dcd8:	20005684 	.word	0x20005684
   1dcdc:	2000564c 	.word	0x2000564c
   1dce0:	00028dc9 	.word	0x00028dc9

0001dce4 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1dce4:	b580      	push	{r7, lr}
   1dce6:	b084      	sub	sp, #16
   1dce8:	af00      	add	r7, sp, #0
   1dcea:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1dcec:	4b1a      	ldr	r3, [pc, #104]	; (1dd58 <SerialConsoleWriteString+0x74>)
   1dcee:	4798      	blx	r3
    if (string != NULL) {
   1dcf0:	687b      	ldr	r3, [r7, #4]
   1dcf2:	2b00      	cmp	r3, #0
   1dcf4:	d02a      	beq.n	1dd4c <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1dcf6:	2300      	movs	r3, #0
   1dcf8:	60fb      	str	r3, [r7, #12]
   1dcfa:	e00b      	b.n	1dd14 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1dcfc:	4b17      	ldr	r3, [pc, #92]	; (1dd5c <SerialConsoleWriteString+0x78>)
   1dcfe:	6818      	ldr	r0, [r3, #0]
   1dd00:	687a      	ldr	r2, [r7, #4]
   1dd02:	68fb      	ldr	r3, [r7, #12]
   1dd04:	18d3      	adds	r3, r2, r3
   1dd06:	781b      	ldrb	r3, [r3, #0]
   1dd08:	0019      	movs	r1, r3
   1dd0a:	4b15      	ldr	r3, [pc, #84]	; (1dd60 <SerialConsoleWriteString+0x7c>)
   1dd0c:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1dd0e:	68fb      	ldr	r3, [r7, #12]
   1dd10:	3301      	adds	r3, #1
   1dd12:	60fb      	str	r3, [r7, #12]
   1dd14:	687b      	ldr	r3, [r7, #4]
   1dd16:	0018      	movs	r0, r3
   1dd18:	4b12      	ldr	r3, [pc, #72]	; (1dd64 <SerialConsoleWriteString+0x80>)
   1dd1a:	4798      	blx	r3
   1dd1c:	0002      	movs	r2, r0
   1dd1e:	68fb      	ldr	r3, [r7, #12]
   1dd20:	429a      	cmp	r2, r3
   1dd22:	d8eb      	bhi.n	1dcfc <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1dd24:	4b10      	ldr	r3, [pc, #64]	; (1dd68 <SerialConsoleWriteString+0x84>)
   1dd26:	2101      	movs	r1, #1
   1dd28:	0018      	movs	r0, r3
   1dd2a:	4b10      	ldr	r3, [pc, #64]	; (1dd6c <SerialConsoleWriteString+0x88>)
   1dd2c:	4798      	blx	r3
   1dd2e:	1e03      	subs	r3, r0, #0
   1dd30:	d10c      	bne.n	1dd4c <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1dd32:	4b0a      	ldr	r3, [pc, #40]	; (1dd5c <SerialConsoleWriteString+0x78>)
   1dd34:	681b      	ldr	r3, [r3, #0]
   1dd36:	4a0e      	ldr	r2, [pc, #56]	; (1dd70 <SerialConsoleWriteString+0x8c>)
   1dd38:	0011      	movs	r1, r2
   1dd3a:	0018      	movs	r0, r3
   1dd3c:	4b0d      	ldr	r3, [pc, #52]	; (1dd74 <SerialConsoleWriteString+0x90>)
   1dd3e:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1dd40:	490b      	ldr	r1, [pc, #44]	; (1dd70 <SerialConsoleWriteString+0x8c>)
   1dd42:	4b09      	ldr	r3, [pc, #36]	; (1dd68 <SerialConsoleWriteString+0x84>)
   1dd44:	2201      	movs	r2, #1
   1dd46:	0018      	movs	r0, r3
   1dd48:	4b0b      	ldr	r3, [pc, #44]	; (1dd78 <SerialConsoleWriteString+0x94>)
   1dd4a:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1dd4c:	4b0b      	ldr	r3, [pc, #44]	; (1dd7c <SerialConsoleWriteString+0x98>)
   1dd4e:	4798      	blx	r3
}
   1dd50:	46c0      	nop			; (mov r8, r8)
   1dd52:	46bd      	mov	sp, r7
   1dd54:	b004      	add	sp, #16
   1dd56:	bd80      	pop	{r7, pc}
   1dd58:	0001c351 	.word	0x0001c351
   1dd5c:	20005a8c 	.word	0x20005a8c
   1dd60:	0001da05 	.word	0x0001da05
   1dd64:	00034c3b 	.word	0x00034c3b
   1dd68:	2000564c 	.word	0x2000564c
   1dd6c:	00028e11 	.word	0x00028e11
   1dd70:	20005a88 	.word	0x20005a88
   1dd74:	0001da39 	.word	0x0001da39
   1dd78:	00028d81 	.word	0x00028d81
   1dd7c:	0001c369 	.word	0x0001c369

0001dd80 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1dd80:	b580      	push	{r7, lr}
   1dd82:	b084      	sub	sp, #16
   1dd84:	af00      	add	r7, sp, #0
   1dd86:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1dd88:	4b08      	ldr	r3, [pc, #32]	; (1ddac <SerialConsoleReadCharacter+0x2c>)
   1dd8a:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1dd8c:	4b08      	ldr	r3, [pc, #32]	; (1ddb0 <SerialConsoleReadCharacter+0x30>)
   1dd8e:	681b      	ldr	r3, [r3, #0]
   1dd90:	687a      	ldr	r2, [r7, #4]
   1dd92:	0011      	movs	r1, r2
   1dd94:	0018      	movs	r0, r3
   1dd96:	4b07      	ldr	r3, [pc, #28]	; (1ddb4 <SerialConsoleReadCharacter+0x34>)
   1dd98:	4798      	blx	r3
   1dd9a:	0003      	movs	r3, r0
   1dd9c:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1dd9e:	4b06      	ldr	r3, [pc, #24]	; (1ddb8 <SerialConsoleReadCharacter+0x38>)
   1dda0:	4798      	blx	r3
    return a;
   1dda2:	68fb      	ldr	r3, [r7, #12]
}
   1dda4:	0018      	movs	r0, r3
   1dda6:	46bd      	mov	sp, r7
   1dda8:	b004      	add	sp, #16
   1ddaa:	bd80      	pop	{r7, pc}
   1ddac:	0001c351 	.word	0x0001c351
   1ddb0:	20005680 	.word	0x20005680
   1ddb4:	0001da39 	.word	0x0001da39
   1ddb8:	0001c369 	.word	0x0001c369

0001ddbc <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1ddbc:	b580      	push	{r7, lr}
   1ddbe:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1ddc0:	4b02      	ldr	r3, [pc, #8]	; (1ddcc <getLogLevel+0x10>)
   1ddc2:	781b      	ldrb	r3, [r3, #0]
}
   1ddc4:	0018      	movs	r0, r3
   1ddc6:	46bd      	mov	sp, r7
   1ddc8:	bd80      	pop	{r7, pc}
   1ddca:	46c0      	nop			; (mov r8, r8)
   1ddcc:	20004218 	.word	0x20004218

0001ddd0 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1ddd0:	b40e      	push	{r1, r2, r3}
   1ddd2:	b590      	push	{r4, r7, lr}
   1ddd4:	b084      	sub	sp, #16
   1ddd6:	af00      	add	r7, sp, #0
   1ddd8:	0002      	movs	r2, r0
   1ddda:	1dfb      	adds	r3, r7, #7
   1dddc:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1ddde:	4b0e      	ldr	r3, [pc, #56]	; (1de18 <LogMessage+0x48>)
   1dde0:	4798      	blx	r3
   1dde2:	0003      	movs	r3, r0
   1dde4:	001a      	movs	r2, r3
   1dde6:	1dfb      	adds	r3, r7, #7
   1dde8:	781b      	ldrb	r3, [r3, #0]
   1ddea:	4293      	cmp	r3, r2
   1ddec:	d30c      	bcc.n	1de08 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1ddee:	2320      	movs	r3, #32
   1ddf0:	18fb      	adds	r3, r7, r3
   1ddf2:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1ddf4:	68fb      	ldr	r3, [r7, #12]
   1ddf6:	69fa      	ldr	r2, [r7, #28]
   1ddf8:	4808      	ldr	r0, [pc, #32]	; (1de1c <LogMessage+0x4c>)
   1ddfa:	217f      	movs	r1, #127	; 0x7f
   1ddfc:	4c08      	ldr	r4, [pc, #32]	; (1de20 <LogMessage+0x50>)
   1ddfe:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1de00:	4b06      	ldr	r3, [pc, #24]	; (1de1c <LogMessage+0x4c>)
   1de02:	0018      	movs	r0, r3
   1de04:	4b07      	ldr	r3, [pc, #28]	; (1de24 <LogMessage+0x54>)
   1de06:	4798      	blx	r3
        va_end(ap);
    }
};
   1de08:	46c0      	nop			; (mov r8, r8)
   1de0a:	46bd      	mov	sp, r7
   1de0c:	b004      	add	sp, #16
   1de0e:	bc90      	pop	{r4, r7}
   1de10:	bc08      	pop	{r3}
   1de12:	b003      	add	sp, #12
   1de14:	4718      	bx	r3
   1de16:	46c0      	nop			; (mov r8, r8)
   1de18:	0001ddbd 	.word	0x0001ddbd
   1de1c:	200055cc 	.word	0x200055cc
   1de20:	00034e75 	.word	0x00034e75
   1de24:	0001dce5 	.word	0x0001dce5

0001de28 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1de28:	b40f      	push	{r0, r1, r2, r3}
   1de2a:	b580      	push	{r7, lr}
   1de2c:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1de2e:	68bb      	ldr	r3, [r7, #8]
   1de30:	0019      	movs	r1, r3
   1de32:	2001      	movs	r0, #1
   1de34:	4b03      	ldr	r3, [pc, #12]	; (1de44 <LogMessageDebug+0x1c>)
   1de36:	4798      	blx	r3
};
   1de38:	46c0      	nop			; (mov r8, r8)
   1de3a:	46bd      	mov	sp, r7
   1de3c:	bc80      	pop	{r7}
   1de3e:	bc08      	pop	{r3}
   1de40:	b004      	add	sp, #16
   1de42:	4718      	bx	r3
   1de44:	0001ddd1 	.word	0x0001ddd1

0001de48 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1de48:	b580      	push	{r7, lr}
   1de4a:	b090      	sub	sp, #64	; 0x40
   1de4c:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1de4e:	003b      	movs	r3, r7
   1de50:	0018      	movs	r0, r3
   1de52:	4b14      	ldr	r3, [pc, #80]	; (1dea4 <configure_usart+0x5c>)
   1de54:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1de56:	003b      	movs	r3, r7
   1de58:	22e1      	movs	r2, #225	; 0xe1
   1de5a:	0252      	lsls	r2, r2, #9
   1de5c:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1de5e:	003b      	movs	r3, r7
   1de60:	22c4      	movs	r2, #196	; 0xc4
   1de62:	0392      	lsls	r2, r2, #14
   1de64:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1de66:	003b      	movs	r3, r7
   1de68:	2201      	movs	r2, #1
   1de6a:	4252      	negs	r2, r2
   1de6c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1de6e:	003b      	movs	r3, r7
   1de70:	2201      	movs	r2, #1
   1de72:	4252      	negs	r2, r2
   1de74:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1de76:	003b      	movs	r3, r7
   1de78:	4a0b      	ldr	r2, [pc, #44]	; (1dea8 <configure_usart+0x60>)
   1de7a:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1de7c:	003b      	movs	r3, r7
   1de7e:	4a0b      	ldr	r2, [pc, #44]	; (1deac <configure_usart+0x64>)
   1de80:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1de82:	46c0      	nop			; (mov r8, r8)
   1de84:	003a      	movs	r2, r7
   1de86:	490a      	ldr	r1, [pc, #40]	; (1deb0 <configure_usart+0x68>)
   1de88:	4b0a      	ldr	r3, [pc, #40]	; (1deb4 <configure_usart+0x6c>)
   1de8a:	0018      	movs	r0, r3
   1de8c:	4b0a      	ldr	r3, [pc, #40]	; (1deb8 <configure_usart+0x70>)
   1de8e:	4798      	blx	r3
   1de90:	1e03      	subs	r3, r0, #0
   1de92:	d1f7      	bne.n	1de84 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1de94:	4b07      	ldr	r3, [pc, #28]	; (1deb4 <configure_usart+0x6c>)
   1de96:	0018      	movs	r0, r3
   1de98:	4b08      	ldr	r3, [pc, #32]	; (1debc <configure_usart+0x74>)
   1de9a:	4798      	blx	r3
}
   1de9c:	46c0      	nop			; (mov r8, r8)
   1de9e:	46bd      	mov	sp, r7
   1dea0:	b010      	add	sp, #64	; 0x40
   1dea2:	bd80      	pop	{r7, pc}
   1dea4:	0001db35 	.word	0x0001db35
   1dea8:	002a0003 	.word	0x002a0003
   1deac:	002b0003 	.word	0x002b0003
   1deb0:	42001800 	.word	0x42001800
   1deb4:	2000564c 	.word	0x2000564c
   1deb8:	00028985 	.word	0x00028985
   1debc:	0001dbf5 	.word	0x0001dbf5

0001dec0 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1dec0:	b580      	push	{r7, lr}
   1dec2:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1dec4:	490c      	ldr	r1, [pc, #48]	; (1def8 <configure_usart_callbacks+0x38>)
   1dec6:	4b0d      	ldr	r3, [pc, #52]	; (1defc <configure_usart_callbacks+0x3c>)
   1dec8:	2200      	movs	r2, #0
   1deca:	0018      	movs	r0, r3
   1decc:	4b0c      	ldr	r3, [pc, #48]	; (1df00 <configure_usart_callbacks+0x40>)
   1dece:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1ded0:	490c      	ldr	r1, [pc, #48]	; (1df04 <configure_usart_callbacks+0x44>)
   1ded2:	4b0a      	ldr	r3, [pc, #40]	; (1defc <configure_usart_callbacks+0x3c>)
   1ded4:	2201      	movs	r2, #1
   1ded6:	0018      	movs	r0, r3
   1ded8:	4b09      	ldr	r3, [pc, #36]	; (1df00 <configure_usart_callbacks+0x40>)
   1deda:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1dedc:	4b07      	ldr	r3, [pc, #28]	; (1defc <configure_usart_callbacks+0x3c>)
   1dede:	2100      	movs	r1, #0
   1dee0:	0018      	movs	r0, r3
   1dee2:	4b09      	ldr	r3, [pc, #36]	; (1df08 <configure_usart_callbacks+0x48>)
   1dee4:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1dee6:	4b05      	ldr	r3, [pc, #20]	; (1defc <configure_usart_callbacks+0x3c>)
   1dee8:	2101      	movs	r1, #1
   1deea:	0018      	movs	r0, r3
   1deec:	4b06      	ldr	r3, [pc, #24]	; (1df08 <configure_usart_callbacks+0x48>)
   1deee:	4798      	blx	r3
}
   1def0:	46c0      	nop			; (mov r8, r8)
   1def2:	46bd      	mov	sp, r7
   1def4:	bd80      	pop	{r7, pc}
   1def6:	46c0      	nop			; (mov r8, r8)
   1def8:	0001df55 	.word	0x0001df55
   1defc:	2000564c 	.word	0x2000564c
   1df00:	00028d39 	.word	0x00028d39
   1df04:	0001df0d 	.word	0x0001df0d
   1df08:	0001dc3d 	.word	0x0001dc3d

0001df0c <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1df0c:	b580      	push	{r7, lr}
   1df0e:	b082      	sub	sp, #8
   1df10:	af00      	add	r7, sp, #0
   1df12:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1df14:	4b09      	ldr	r3, [pc, #36]	; (1df3c <usart_read_callback+0x30>)
   1df16:	681a      	ldr	r2, [r3, #0]
   1df18:	4b09      	ldr	r3, [pc, #36]	; (1df40 <usart_read_callback+0x34>)
   1df1a:	781b      	ldrb	r3, [r3, #0]
   1df1c:	0019      	movs	r1, r3
   1df1e:	0010      	movs	r0, r2
   1df20:	4b08      	ldr	r3, [pc, #32]	; (1df44 <usart_read_callback+0x38>)
   1df22:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1df24:	4906      	ldr	r1, [pc, #24]	; (1df40 <usart_read_callback+0x34>)
   1df26:	4b08      	ldr	r3, [pc, #32]	; (1df48 <usart_read_callback+0x3c>)
   1df28:	2201      	movs	r2, #1
   1df2a:	0018      	movs	r0, r3
   1df2c:	4b07      	ldr	r3, [pc, #28]	; (1df4c <usart_read_callback+0x40>)
   1df2e:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1df30:	4b07      	ldr	r3, [pc, #28]	; (1df50 <usart_read_callback+0x44>)
   1df32:	4798      	blx	r3
}
   1df34:	46c0      	nop			; (mov r8, r8)
   1df36:	46bd      	mov	sp, r7
   1df38:	b002      	add	sp, #8
   1df3a:	bd80      	pop	{r7, pc}
   1df3c:	20005680 	.word	0x20005680
   1df40:	20005684 	.word	0x20005684
   1df44:	0001da05 	.word	0x0001da05
   1df48:	2000564c 	.word	0x2000564c
   1df4c:	00028dc9 	.word	0x00028dc9
   1df50:	00013b4d 	.word	0x00013b4d

0001df54 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1df54:	b580      	push	{r7, lr}
   1df56:	b082      	sub	sp, #8
   1df58:	af00      	add	r7, sp, #0
   1df5a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1df5c:	4b09      	ldr	r3, [pc, #36]	; (1df84 <usart_write_callback+0x30>)
   1df5e:	681b      	ldr	r3, [r3, #0]
   1df60:	4a09      	ldr	r2, [pc, #36]	; (1df88 <usart_write_callback+0x34>)
   1df62:	0011      	movs	r1, r2
   1df64:	0018      	movs	r0, r3
   1df66:	4b09      	ldr	r3, [pc, #36]	; (1df8c <usart_write_callback+0x38>)
   1df68:	4798      	blx	r3
   1df6a:	0003      	movs	r3, r0
   1df6c:	3301      	adds	r3, #1
   1df6e:	d005      	beq.n	1df7c <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1df70:	4905      	ldr	r1, [pc, #20]	; (1df88 <usart_write_callback+0x34>)
   1df72:	4b07      	ldr	r3, [pc, #28]	; (1df90 <usart_write_callback+0x3c>)
   1df74:	2201      	movs	r2, #1
   1df76:	0018      	movs	r0, r3
   1df78:	4b06      	ldr	r3, [pc, #24]	; (1df94 <usart_write_callback+0x40>)
   1df7a:	4798      	blx	r3
    }
}
   1df7c:	46c0      	nop			; (mov r8, r8)
   1df7e:	46bd      	mov	sp, r7
   1df80:	b002      	add	sp, #8
   1df82:	bd80      	pop	{r7, pc}
   1df84:	20005a8c 	.word	0x20005a8c
   1df88:	20005a88 	.word	0x20005a88
   1df8c:	0001da39 	.word	0x0001da39
   1df90:	2000564c 	.word	0x2000564c
   1df94:	00028d81 	.word	0x00028d81

0001df98 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1df98:	b590      	push	{r4, r7, lr}
   1df9a:	b087      	sub	sp, #28
   1df9c:	af00      	add	r7, sp, #0
   1df9e:	60f8      	str	r0, [r7, #12]
   1dfa0:	000c      	movs	r4, r1
   1dfa2:	0010      	movs	r0, r2
   1dfa4:	0019      	movs	r1, r3
   1dfa6:	230a      	movs	r3, #10
   1dfa8:	18fb      	adds	r3, r7, r3
   1dfaa:	1c22      	adds	r2, r4, #0
   1dfac:	801a      	strh	r2, [r3, #0]
   1dfae:	2308      	movs	r3, #8
   1dfb0:	18fb      	adds	r3, r7, r3
   1dfb2:	1c02      	adds	r2, r0, #0
   1dfb4:	801a      	strh	r2, [r3, #0]
   1dfb6:	1dfb      	adds	r3, r7, #7
   1dfb8:	1c0a      	adds	r2, r1, #0
   1dfba:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1dfbc:	230a      	movs	r3, #10
   1dfbe:	18fb      	adds	r3, r7, r3
   1dfc0:	881a      	ldrh	r2, [r3, #0]
   1dfc2:	2308      	movs	r3, #8
   1dfc4:	18fb      	adds	r3, r7, r3
   1dfc6:	881b      	ldrh	r3, [r3, #0]
   1dfc8:	1ad3      	subs	r3, r2, r3
   1dfca:	3307      	adds	r3, #7
   1dfcc:	2b00      	cmp	r3, #0
   1dfce:	da00      	bge.n	1dfd2 <SDMMC_UNSTUFF_BITS+0x3a>
   1dfd0:	3307      	adds	r3, #7
   1dfd2:	10db      	asrs	r3, r3, #3
   1dfd4:	3b01      	subs	r3, #1
   1dfd6:	68fa      	ldr	r2, [r7, #12]
   1dfd8:	18d3      	adds	r3, r2, r3
   1dfda:	781b      	ldrb	r3, [r3, #0]
   1dfdc:	0019      	movs	r1, r3
   1dfde:	2308      	movs	r3, #8
   1dfe0:	18fb      	adds	r3, r7, r3
   1dfe2:	881b      	ldrh	r3, [r3, #0]
   1dfe4:	2207      	movs	r2, #7
   1dfe6:	4013      	ands	r3, r2
   1dfe8:	4119      	asrs	r1, r3
   1dfea:	000b      	movs	r3, r1
   1dfec:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1dfee:	2308      	movs	r3, #8
   1dff0:	18fb      	adds	r3, r7, r3
   1dff2:	881b      	ldrh	r3, [r3, #0]
   1dff4:	2207      	movs	r2, #7
   1dff6:	401a      	ands	r2, r3
   1dff8:	1dfb      	adds	r3, r7, #7
   1dffa:	781b      	ldrb	r3, [r3, #0]
   1dffc:	18d3      	adds	r3, r2, r3
   1dffe:	2b08      	cmp	r3, #8
   1e000:	dd1c      	ble.n	1e03c <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1e002:	230a      	movs	r3, #10
   1e004:	18fb      	adds	r3, r7, r3
   1e006:	881a      	ldrh	r2, [r3, #0]
   1e008:	2308      	movs	r3, #8
   1e00a:	18fb      	adds	r3, r7, r3
   1e00c:	881b      	ldrh	r3, [r3, #0]
   1e00e:	1ad3      	subs	r3, r2, r3
   1e010:	3307      	adds	r3, #7
   1e012:	2b00      	cmp	r3, #0
   1e014:	da00      	bge.n	1e018 <SDMMC_UNSTUFF_BITS+0x80>
   1e016:	3307      	adds	r3, #7
   1e018:	10db      	asrs	r3, r3, #3
   1e01a:	3b02      	subs	r3, #2
   1e01c:	68fa      	ldr	r2, [r7, #12]
   1e01e:	18d3      	adds	r3, r2, r3
   1e020:	781b      	ldrb	r3, [r3, #0]
   1e022:	0019      	movs	r1, r3
   1e024:	2308      	movs	r3, #8
   1e026:	18fb      	adds	r3, r7, r3
   1e028:	881b      	ldrh	r3, [r3, #0]
   1e02a:	2207      	movs	r2, #7
   1e02c:	4013      	ands	r3, r2
   1e02e:	2208      	movs	r2, #8
   1e030:	1ad3      	subs	r3, r2, r3
   1e032:	4099      	lsls	r1, r3
   1e034:	000b      	movs	r3, r1
   1e036:	697a      	ldr	r2, [r7, #20]
   1e038:	4313      	orrs	r3, r2
   1e03a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1e03c:	2308      	movs	r3, #8
   1e03e:	18fb      	adds	r3, r7, r3
   1e040:	881b      	ldrh	r3, [r3, #0]
   1e042:	2207      	movs	r2, #7
   1e044:	401a      	ands	r2, r3
   1e046:	1dfb      	adds	r3, r7, #7
   1e048:	781b      	ldrb	r3, [r3, #0]
   1e04a:	18d3      	adds	r3, r2, r3
   1e04c:	2b10      	cmp	r3, #16
   1e04e:	dd1c      	ble.n	1e08a <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1e050:	230a      	movs	r3, #10
   1e052:	18fb      	adds	r3, r7, r3
   1e054:	881a      	ldrh	r2, [r3, #0]
   1e056:	2308      	movs	r3, #8
   1e058:	18fb      	adds	r3, r7, r3
   1e05a:	881b      	ldrh	r3, [r3, #0]
   1e05c:	1ad3      	subs	r3, r2, r3
   1e05e:	3307      	adds	r3, #7
   1e060:	2b00      	cmp	r3, #0
   1e062:	da00      	bge.n	1e066 <SDMMC_UNSTUFF_BITS+0xce>
   1e064:	3307      	adds	r3, #7
   1e066:	10db      	asrs	r3, r3, #3
   1e068:	3b03      	subs	r3, #3
   1e06a:	68fa      	ldr	r2, [r7, #12]
   1e06c:	18d3      	adds	r3, r2, r3
   1e06e:	781b      	ldrb	r3, [r3, #0]
   1e070:	0019      	movs	r1, r3
   1e072:	2308      	movs	r3, #8
   1e074:	18fb      	adds	r3, r7, r3
   1e076:	881b      	ldrh	r3, [r3, #0]
   1e078:	2207      	movs	r2, #7
   1e07a:	4013      	ands	r3, r2
   1e07c:	2210      	movs	r2, #16
   1e07e:	1ad3      	subs	r3, r2, r3
   1e080:	4099      	lsls	r1, r3
   1e082:	000b      	movs	r3, r1
   1e084:	697a      	ldr	r2, [r7, #20]
   1e086:	4313      	orrs	r3, r2
   1e088:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1e08a:	2308      	movs	r3, #8
   1e08c:	18fb      	adds	r3, r7, r3
   1e08e:	881b      	ldrh	r3, [r3, #0]
   1e090:	2207      	movs	r2, #7
   1e092:	401a      	ands	r2, r3
   1e094:	1dfb      	adds	r3, r7, #7
   1e096:	781b      	ldrb	r3, [r3, #0]
   1e098:	18d3      	adds	r3, r2, r3
   1e09a:	2b10      	cmp	r3, #16
   1e09c:	dd1c      	ble.n	1e0d8 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1e09e:	230a      	movs	r3, #10
   1e0a0:	18fb      	adds	r3, r7, r3
   1e0a2:	881a      	ldrh	r2, [r3, #0]
   1e0a4:	2308      	movs	r3, #8
   1e0a6:	18fb      	adds	r3, r7, r3
   1e0a8:	881b      	ldrh	r3, [r3, #0]
   1e0aa:	1ad3      	subs	r3, r2, r3
   1e0ac:	3307      	adds	r3, #7
   1e0ae:	2b00      	cmp	r3, #0
   1e0b0:	da00      	bge.n	1e0b4 <SDMMC_UNSTUFF_BITS+0x11c>
   1e0b2:	3307      	adds	r3, #7
   1e0b4:	10db      	asrs	r3, r3, #3
   1e0b6:	3b03      	subs	r3, #3
   1e0b8:	68fa      	ldr	r2, [r7, #12]
   1e0ba:	18d3      	adds	r3, r2, r3
   1e0bc:	781b      	ldrb	r3, [r3, #0]
   1e0be:	0019      	movs	r1, r3
   1e0c0:	2308      	movs	r3, #8
   1e0c2:	18fb      	adds	r3, r7, r3
   1e0c4:	881b      	ldrh	r3, [r3, #0]
   1e0c6:	2207      	movs	r2, #7
   1e0c8:	4013      	ands	r3, r2
   1e0ca:	2210      	movs	r2, #16
   1e0cc:	1ad3      	subs	r3, r2, r3
   1e0ce:	4099      	lsls	r1, r3
   1e0d0:	000b      	movs	r3, r1
   1e0d2:	697a      	ldr	r2, [r7, #20]
   1e0d4:	4313      	orrs	r3, r2
   1e0d6:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1e0d8:	1dfb      	adds	r3, r7, #7
   1e0da:	781b      	ldrb	r3, [r3, #0]
   1e0dc:	2201      	movs	r2, #1
   1e0de:	409a      	lsls	r2, r3
   1e0e0:	0013      	movs	r3, r2
   1e0e2:	1e5a      	subs	r2, r3, #1
   1e0e4:	697b      	ldr	r3, [r7, #20]
   1e0e6:	4013      	ands	r3, r2
   1e0e8:	617b      	str	r3, [r7, #20]
	return value;
   1e0ea:	697b      	ldr	r3, [r7, #20]
}
   1e0ec:	0018      	movs	r0, r3
   1e0ee:	46bd      	mov	sp, r7
   1e0f0:	b007      	add	sp, #28
   1e0f2:	bd90      	pop	{r4, r7, pc}

0001e0f4 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1e0f4:	b580      	push	{r7, lr}
   1e0f6:	b082      	sub	sp, #8
   1e0f8:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1e0fa:	4b23      	ldr	r3, [pc, #140]	; (1e188 <mmc_spi_op_cond+0x94>)
   1e0fc:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1e0fe:	4b23      	ldr	r3, [pc, #140]	; (1e18c <mmc_spi_op_cond+0x98>)
   1e100:	2100      	movs	r1, #0
   1e102:	0018      	movs	r0, r3
   1e104:	4b22      	ldr	r3, [pc, #136]	; (1e190 <mmc_spi_op_cond+0x9c>)
   1e106:	4798      	blx	r3
   1e108:	0003      	movs	r3, r0
   1e10a:	001a      	movs	r2, r3
   1e10c:	2301      	movs	r3, #1
   1e10e:	4053      	eors	r3, r2
   1e110:	b2db      	uxtb	r3, r3
   1e112:	2b00      	cmp	r3, #0
   1e114:	d001      	beq.n	1e11a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1e116:	2300      	movs	r3, #0
   1e118:	e031      	b.n	1e17e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1e11a:	4b1e      	ldr	r3, [pc, #120]	; (1e194 <mmc_spi_op_cond+0xa0>)
   1e11c:	4798      	blx	r3
   1e11e:	0003      	movs	r3, r0
   1e120:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1e122:	683b      	ldr	r3, [r7, #0]
   1e124:	2201      	movs	r2, #1
   1e126:	4013      	ands	r3, r2
   1e128:	d006      	beq.n	1e138 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1e12a:	687b      	ldr	r3, [r7, #4]
   1e12c:	1e5a      	subs	r2, r3, #1
   1e12e:	607a      	str	r2, [r7, #4]
   1e130:	2b00      	cmp	r3, #0
   1e132:	d1e4      	bne.n	1e0fe <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1e134:	2300      	movs	r3, #0
   1e136:	e022      	b.n	1e17e <mmc_spi_op_cond+0x8a>
			break;
   1e138:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1e13a:	4b17      	ldr	r3, [pc, #92]	; (1e198 <mmc_spi_op_cond+0xa4>)
   1e13c:	2100      	movs	r1, #0
   1e13e:	0018      	movs	r0, r3
   1e140:	4b13      	ldr	r3, [pc, #76]	; (1e190 <mmc_spi_op_cond+0x9c>)
   1e142:	4798      	blx	r3
   1e144:	0003      	movs	r3, r0
   1e146:	001a      	movs	r2, r3
   1e148:	2301      	movs	r3, #1
   1e14a:	4053      	eors	r3, r2
   1e14c:	b2db      	uxtb	r3, r3
   1e14e:	2b00      	cmp	r3, #0
   1e150:	d001      	beq.n	1e156 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1e152:	2300      	movs	r3, #0
   1e154:	e013      	b.n	1e17e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1e156:	4b0f      	ldr	r3, [pc, #60]	; (1e194 <mmc_spi_op_cond+0xa0>)
   1e158:	4798      	blx	r3
   1e15a:	0002      	movs	r2, r0
   1e15c:	23c0      	movs	r3, #192	; 0xc0
   1e15e:	05db      	lsls	r3, r3, #23
   1e160:	401a      	ands	r2, r3
   1e162:	2380      	movs	r3, #128	; 0x80
   1e164:	05db      	lsls	r3, r3, #23
   1e166:	429a      	cmp	r2, r3
   1e168:	d108      	bne.n	1e17c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1e16a:	4b0c      	ldr	r3, [pc, #48]	; (1e19c <mmc_spi_op_cond+0xa8>)
   1e16c:	681a      	ldr	r2, [r3, #0]
   1e16e:	4b0b      	ldr	r3, [pc, #44]	; (1e19c <mmc_spi_op_cond+0xa8>)
   1e170:	681b      	ldr	r3, [r3, #0]
   1e172:	7adb      	ldrb	r3, [r3, #11]
   1e174:	2108      	movs	r1, #8
   1e176:	430b      	orrs	r3, r1
   1e178:	b2db      	uxtb	r3, r3
   1e17a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1e17c:	2301      	movs	r3, #1
}
   1e17e:	0018      	movs	r0, r3
   1e180:	46bd      	mov	sp, r7
   1e182:	b002      	add	sp, #8
   1e184:	bd80      	pop	{r7, pc}
   1e186:	46c0      	nop			; (mov r8, r8)
   1e188:	00001bee 	.word	0x00001bee
   1e18c:	00001101 	.word	0x00001101
   1e190:	0001fb71 	.word	0x0001fb71
   1e194:	0001fdb1 	.word	0x0001fdb1
   1e198:	0000053a 	.word	0x0000053a
   1e19c:	20004240 	.word	0x20004240

0001e1a0 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1e1a0:	b580      	push	{r7, lr}
   1e1a2:	b086      	sub	sp, #24
   1e1a4:	af00      	add	r7, sp, #0
   1e1a6:	0002      	movs	r2, r0
   1e1a8:	1dfb      	adds	r3, r7, #7
   1e1aa:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1e1ac:	4b2e      	ldr	r3, [pc, #184]	; (1e268 <sd_spi_op_cond+0xc8>)
   1e1ae:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1e1b0:	4b2e      	ldr	r3, [pc, #184]	; (1e26c <sd_spi_op_cond+0xcc>)
   1e1b2:	2100      	movs	r1, #0
   1e1b4:	0018      	movs	r0, r3
   1e1b6:	4b2e      	ldr	r3, [pc, #184]	; (1e270 <sd_spi_op_cond+0xd0>)
   1e1b8:	4798      	blx	r3
   1e1ba:	0003      	movs	r3, r0
   1e1bc:	001a      	movs	r2, r3
   1e1be:	2301      	movs	r3, #1
   1e1c0:	4053      	eors	r3, r2
   1e1c2:	b2db      	uxtb	r3, r3
   1e1c4:	2b00      	cmp	r3, #0
   1e1c6:	d001      	beq.n	1e1cc <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1e1c8:	2300      	movs	r3, #0
   1e1ca:	e048      	b.n	1e25e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1e1cc:	2300      	movs	r3, #0
   1e1ce:	617b      	str	r3, [r7, #20]
		if (v2) {
   1e1d0:	1dfb      	adds	r3, r7, #7
   1e1d2:	781b      	ldrb	r3, [r3, #0]
   1e1d4:	2b00      	cmp	r3, #0
   1e1d6:	d004      	beq.n	1e1e2 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1e1d8:	697b      	ldr	r3, [r7, #20]
   1e1da:	2280      	movs	r2, #128	; 0x80
   1e1dc:	05d2      	lsls	r2, r2, #23
   1e1de:	4313      	orrs	r3, r2
   1e1e0:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1e1e2:	697b      	ldr	r3, [r7, #20]
   1e1e4:	4a23      	ldr	r2, [pc, #140]	; (1e274 <sd_spi_op_cond+0xd4>)
   1e1e6:	0019      	movs	r1, r3
   1e1e8:	0010      	movs	r0, r2
   1e1ea:	4b21      	ldr	r3, [pc, #132]	; (1e270 <sd_spi_op_cond+0xd0>)
   1e1ec:	4798      	blx	r3
   1e1ee:	0003      	movs	r3, r0
   1e1f0:	001a      	movs	r2, r3
   1e1f2:	2301      	movs	r3, #1
   1e1f4:	4053      	eors	r3, r2
   1e1f6:	b2db      	uxtb	r3, r3
   1e1f8:	2b00      	cmp	r3, #0
   1e1fa:	d001      	beq.n	1e200 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1e1fc:	2300      	movs	r3, #0
   1e1fe:	e02e      	b.n	1e25e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1e200:	4b1d      	ldr	r3, [pc, #116]	; (1e278 <sd_spi_op_cond+0xd8>)
   1e202:	4798      	blx	r3
   1e204:	0003      	movs	r3, r0
   1e206:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1e208:	68fb      	ldr	r3, [r7, #12]
   1e20a:	2201      	movs	r2, #1
   1e20c:	4013      	ands	r3, r2
   1e20e:	d006      	beq.n	1e21e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1e210:	693b      	ldr	r3, [r7, #16]
   1e212:	1e5a      	subs	r2, r3, #1
   1e214:	613a      	str	r2, [r7, #16]
   1e216:	2b00      	cmp	r3, #0
   1e218:	d1ca      	bne.n	1e1b0 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1e21a:	2300      	movs	r3, #0
   1e21c:	e01f      	b.n	1e25e <sd_spi_op_cond+0xbe>
			break;
   1e21e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1e220:	4b16      	ldr	r3, [pc, #88]	; (1e27c <sd_spi_op_cond+0xdc>)
   1e222:	2100      	movs	r1, #0
   1e224:	0018      	movs	r0, r3
   1e226:	4b12      	ldr	r3, [pc, #72]	; (1e270 <sd_spi_op_cond+0xd0>)
   1e228:	4798      	blx	r3
   1e22a:	0003      	movs	r3, r0
   1e22c:	001a      	movs	r2, r3
   1e22e:	2301      	movs	r3, #1
   1e230:	4053      	eors	r3, r2
   1e232:	b2db      	uxtb	r3, r3
   1e234:	2b00      	cmp	r3, #0
   1e236:	d001      	beq.n	1e23c <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1e238:	2300      	movs	r3, #0
   1e23a:	e010      	b.n	1e25e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1e23c:	4b0e      	ldr	r3, [pc, #56]	; (1e278 <sd_spi_op_cond+0xd8>)
   1e23e:	4798      	blx	r3
   1e240:	0002      	movs	r2, r0
   1e242:	2380      	movs	r3, #128	; 0x80
   1e244:	05db      	lsls	r3, r3, #23
   1e246:	4013      	ands	r3, r2
   1e248:	d008      	beq.n	1e25c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1e24a:	4b0d      	ldr	r3, [pc, #52]	; (1e280 <sd_spi_op_cond+0xe0>)
   1e24c:	681a      	ldr	r2, [r3, #0]
   1e24e:	4b0c      	ldr	r3, [pc, #48]	; (1e280 <sd_spi_op_cond+0xe0>)
   1e250:	681b      	ldr	r3, [r3, #0]
   1e252:	7adb      	ldrb	r3, [r3, #11]
   1e254:	2108      	movs	r1, #8
   1e256:	430b      	orrs	r3, r1
   1e258:	b2db      	uxtb	r3, r3
   1e25a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1e25c:	2301      	movs	r3, #1
}
   1e25e:	0018      	movs	r0, r3
   1e260:	46bd      	mov	sp, r7
   1e262:	b006      	add	sp, #24
   1e264:	bd80      	pop	{r7, pc}
   1e266:	46c0      	nop			; (mov r8, r8)
   1e268:	00001bee 	.word	0x00001bee
   1e26c:	00001137 	.word	0x00001137
   1e270:	0001fb71 	.word	0x0001fb71
   1e274:	00001129 	.word	0x00001129
   1e278:	0001fdb1 	.word	0x0001fdb1
   1e27c:	0000053a 	.word	0x0000053a
   1e280:	20004240 	.word	0x20004240

0001e284 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1e284:	b580      	push	{r7, lr}
   1e286:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1e288:	2301      	movs	r3, #1
}
   1e28a:	0018      	movs	r0, r3
   1e28c:	46bd      	mov	sp, r7
   1e28e:	bd80      	pop	{r7, pc}

0001e290 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1e290:	b580      	push	{r7, lr}
   1e292:	b084      	sub	sp, #16
   1e294:	af00      	add	r7, sp, #0
   1e296:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1e298:	687b      	ldr	r3, [r7, #4]
   1e29a:	2200      	movs	r2, #0
   1e29c:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1e29e:	23d5      	movs	r3, #213	; 0xd5
   1e2a0:	005b      	lsls	r3, r3, #1
   1e2a2:	4a14      	ldr	r2, [pc, #80]	; (1e2f4 <sd_cmd8+0x64>)
   1e2a4:	0019      	movs	r1, r3
   1e2a6:	0010      	movs	r0, r2
   1e2a8:	4b13      	ldr	r3, [pc, #76]	; (1e2f8 <sd_cmd8+0x68>)
   1e2aa:	4798      	blx	r3
   1e2ac:	0003      	movs	r3, r0
   1e2ae:	001a      	movs	r2, r3
   1e2b0:	2301      	movs	r3, #1
   1e2b2:	4053      	eors	r3, r2
   1e2b4:	b2db      	uxtb	r3, r3
   1e2b6:	2b00      	cmp	r3, #0
   1e2b8:	d001      	beq.n	1e2be <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1e2ba:	2301      	movs	r3, #1
   1e2bc:	e015      	b.n	1e2ea <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1e2be:	4b0f      	ldr	r3, [pc, #60]	; (1e2fc <sd_cmd8+0x6c>)
   1e2c0:	4798      	blx	r3
   1e2c2:	0003      	movs	r3, r0
   1e2c4:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1e2c6:	68fb      	ldr	r3, [r7, #12]
   1e2c8:	3301      	adds	r3, #1
   1e2ca:	d101      	bne.n	1e2d0 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1e2cc:	2301      	movs	r3, #1
   1e2ce:	e00c      	b.n	1e2ea <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1e2d0:	68fb      	ldr	r3, [r7, #12]
   1e2d2:	051b      	lsls	r3, r3, #20
   1e2d4:	0d1a      	lsrs	r2, r3, #20
   1e2d6:	23d5      	movs	r3, #213	; 0xd5
   1e2d8:	005b      	lsls	r3, r3, #1
   1e2da:	429a      	cmp	r2, r3
   1e2dc:	d001      	beq.n	1e2e2 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1e2de:	2300      	movs	r3, #0
   1e2e0:	e003      	b.n	1e2ea <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1e2e2:	687b      	ldr	r3, [r7, #4]
   1e2e4:	2201      	movs	r2, #1
   1e2e6:	701a      	strb	r2, [r3, #0]
	return true;
   1e2e8:	2301      	movs	r3, #1
}
   1e2ea:	0018      	movs	r0, r3
   1e2ec:	46bd      	mov	sp, r7
   1e2ee:	b004      	add	sp, #16
   1e2f0:	bd80      	pop	{r7, pc}
   1e2f2:	46c0      	nop			; (mov r8, r8)
   1e2f4:	00005508 	.word	0x00005508
   1e2f8:	0001fb71 	.word	0x0001fb71
   1e2fc:	0001fdb1 	.word	0x0001fdb1

0001e300 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1e300:	b590      	push	{r4, r7, lr}
   1e302:	b089      	sub	sp, #36	; 0x24
   1e304:	af02      	add	r7, sp, #8
   1e306:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1e308:	2380      	movs	r3, #128	; 0x80
   1e30a:	009a      	lsls	r2, r3, #2
   1e30c:	4841      	ldr	r0, [pc, #260]	; (1e414 <mmc_cmd8+0x114>)
   1e30e:	2300      	movs	r3, #0
   1e310:	9300      	str	r3, [sp, #0]
   1e312:	2301      	movs	r3, #1
   1e314:	2100      	movs	r1, #0
   1e316:	4c40      	ldr	r4, [pc, #256]	; (1e418 <mmc_cmd8+0x118>)
   1e318:	47a0      	blx	r4
   1e31a:	0003      	movs	r3, r0
   1e31c:	001a      	movs	r2, r3
   1e31e:	2301      	movs	r3, #1
   1e320:	4053      	eors	r3, r2
   1e322:	b2db      	uxtb	r3, r3
   1e324:	2b00      	cmp	r3, #0
   1e326:	d001      	beq.n	1e32c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1e328:	2300      	movs	r3, #0
   1e32a:	e06e      	b.n	1e40a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1e32c:	2316      	movs	r3, #22
   1e32e:	18fb      	adds	r3, r7, r3
   1e330:	2200      	movs	r2, #0
   1e332:	801a      	strh	r2, [r3, #0]
   1e334:	e014      	b.n	1e360 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1e336:	2310      	movs	r3, #16
   1e338:	18fb      	adds	r3, r7, r3
   1e33a:	0018      	movs	r0, r3
   1e33c:	4b37      	ldr	r3, [pc, #220]	; (1e41c <mmc_cmd8+0x11c>)
   1e33e:	4798      	blx	r3
   1e340:	0003      	movs	r3, r0
   1e342:	001a      	movs	r2, r3
   1e344:	2301      	movs	r3, #1
   1e346:	4053      	eors	r3, r2
   1e348:	b2db      	uxtb	r3, r3
   1e34a:	2b00      	cmp	r3, #0
   1e34c:	d001      	beq.n	1e352 <mmc_cmd8+0x52>
			return false;
   1e34e:	2300      	movs	r3, #0
   1e350:	e05b      	b.n	1e40a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1e352:	2316      	movs	r3, #22
   1e354:	18fb      	adds	r3, r7, r3
   1e356:	881a      	ldrh	r2, [r3, #0]
   1e358:	2316      	movs	r3, #22
   1e35a:	18fb      	adds	r3, r7, r3
   1e35c:	3201      	adds	r2, #1
   1e35e:	801a      	strh	r2, [r3, #0]
   1e360:	2316      	movs	r3, #22
   1e362:	18fb      	adds	r3, r7, r3
   1e364:	881b      	ldrh	r3, [r3, #0]
   1e366:	2b31      	cmp	r3, #49	; 0x31
   1e368:	d9e5      	bls.n	1e336 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1e36a:	693b      	ldr	r3, [r7, #16]
   1e36c:	b2db      	uxtb	r3, r3
   1e36e:	2202      	movs	r2, #2
   1e370:	4013      	ands	r3, r2
   1e372:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1e374:	687b      	ldr	r3, [r7, #4]
   1e376:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1e378:	4b29      	ldr	r3, [pc, #164]	; (1e420 <mmc_cmd8+0x120>)
   1e37a:	681b      	ldr	r3, [r3, #0]
   1e37c:	330e      	adds	r3, #14
   1e37e:	0018      	movs	r0, r3
   1e380:	230c      	movs	r3, #12
   1e382:	223e      	movs	r2, #62	; 0x3e
   1e384:	2180      	movs	r1, #128	; 0x80
   1e386:	4c27      	ldr	r4, [pc, #156]	; (1e424 <mmc_cmd8+0x124>)
   1e388:	47a0      	blx	r4
   1e38a:	0002      	movs	r2, r0
   1e38c:	4b26      	ldr	r3, [pc, #152]	; (1e428 <mmc_cmd8+0x128>)
   1e38e:	429a      	cmp	r2, r3
   1e390:	d135      	bne.n	1e3fe <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1e392:	e014      	b.n	1e3be <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1e394:	230c      	movs	r3, #12
   1e396:	18fb      	adds	r3, r7, r3
   1e398:	0018      	movs	r0, r3
   1e39a:	4b20      	ldr	r3, [pc, #128]	; (1e41c <mmc_cmd8+0x11c>)
   1e39c:	4798      	blx	r3
   1e39e:	0003      	movs	r3, r0
   1e3a0:	001a      	movs	r2, r3
   1e3a2:	2301      	movs	r3, #1
   1e3a4:	4053      	eors	r3, r2
   1e3a6:	b2db      	uxtb	r3, r3
   1e3a8:	2b00      	cmp	r3, #0
   1e3aa:	d001      	beq.n	1e3b0 <mmc_cmd8+0xb0>
				return false;
   1e3ac:	2300      	movs	r3, #0
   1e3ae:	e02c      	b.n	1e40a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1e3b0:	2316      	movs	r3, #22
   1e3b2:	18fb      	adds	r3, r7, r3
   1e3b4:	881a      	ldrh	r2, [r3, #0]
   1e3b6:	2316      	movs	r3, #22
   1e3b8:	18fb      	adds	r3, r7, r3
   1e3ba:	3201      	adds	r2, #1
   1e3bc:	801a      	strh	r2, [r3, #0]
   1e3be:	2316      	movs	r3, #22
   1e3c0:	18fb      	adds	r3, r7, r3
   1e3c2:	881b      	ldrh	r3, [r3, #0]
   1e3c4:	2b35      	cmp	r3, #53	; 0x35
   1e3c6:	d9e5      	bls.n	1e394 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1e3c8:	4b15      	ldr	r3, [pc, #84]	; (1e420 <mmc_cmd8+0x120>)
   1e3ca:	681b      	ldr	r3, [r3, #0]
   1e3cc:	68fa      	ldr	r2, [r7, #12]
   1e3ce:	0852      	lsrs	r2, r2, #1
   1e3d0:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1e3d2:	e014      	b.n	1e3fe <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1e3d4:	230c      	movs	r3, #12
   1e3d6:	18fb      	adds	r3, r7, r3
   1e3d8:	0018      	movs	r0, r3
   1e3da:	4b10      	ldr	r3, [pc, #64]	; (1e41c <mmc_cmd8+0x11c>)
   1e3dc:	4798      	blx	r3
   1e3de:	0003      	movs	r3, r0
   1e3e0:	001a      	movs	r2, r3
   1e3e2:	2301      	movs	r3, #1
   1e3e4:	4053      	eors	r3, r2
   1e3e6:	b2db      	uxtb	r3, r3
   1e3e8:	2b00      	cmp	r3, #0
   1e3ea:	d001      	beq.n	1e3f0 <mmc_cmd8+0xf0>
			return false;
   1e3ec:	2300      	movs	r3, #0
   1e3ee:	e00c      	b.n	1e40a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1e3f0:	2316      	movs	r3, #22
   1e3f2:	18fb      	adds	r3, r7, r3
   1e3f4:	881a      	ldrh	r2, [r3, #0]
   1e3f6:	2316      	movs	r3, #22
   1e3f8:	18fb      	adds	r3, r7, r3
   1e3fa:	3201      	adds	r2, #1
   1e3fc:	801a      	strh	r2, [r3, #0]
   1e3fe:	2316      	movs	r3, #22
   1e400:	18fb      	adds	r3, r7, r3
   1e402:	881b      	ldrh	r3, [r3, #0]
   1e404:	2b7f      	cmp	r3, #127	; 0x7f
   1e406:	d9e5      	bls.n	1e3d4 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1e408:	2301      	movs	r3, #1
}
   1e40a:	0018      	movs	r0, r3
   1e40c:	46bd      	mov	sp, r7
   1e40e:	b007      	add	sp, #28
   1e410:	bd90      	pop	{r4, r7, pc}
   1e412:	46c0      	nop			; (mov r8, r8)
   1e414:	00081108 	.word	0x00081108
   1e418:	0001fb99 	.word	0x0001fb99
   1e41c:	0001fdc5 	.word	0x0001fdc5
   1e420:	20004240 	.word	0x20004240
   1e424:	0001df99 	.word	0x0001df99
   1e428:	00000fff 	.word	0x00000fff

0001e42c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1e42c:	b590      	push	{r4, r7, lr}
   1e42e:	b083      	sub	sp, #12
   1e430:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1e432:	4b15      	ldr	r3, [pc, #84]	; (1e488 <sd_mmc_cmd9_spi+0x5c>)
   1e434:	681b      	ldr	r3, [r3, #0]
   1e436:	891b      	ldrh	r3, [r3, #8]
   1e438:	0419      	lsls	r1, r3, #16
   1e43a:	4814      	ldr	r0, [pc, #80]	; (1e48c <sd_mmc_cmd9_spi+0x60>)
   1e43c:	2301      	movs	r3, #1
   1e43e:	9300      	str	r3, [sp, #0]
   1e440:	2301      	movs	r3, #1
   1e442:	2210      	movs	r2, #16
   1e444:	4c12      	ldr	r4, [pc, #72]	; (1e490 <sd_mmc_cmd9_spi+0x64>)
   1e446:	47a0      	blx	r4
   1e448:	0003      	movs	r3, r0
   1e44a:	001a      	movs	r2, r3
   1e44c:	2301      	movs	r3, #1
   1e44e:	4053      	eors	r3, r2
   1e450:	b2db      	uxtb	r3, r3
   1e452:	2b00      	cmp	r3, #0
   1e454:	d001      	beq.n	1e45a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1e456:	2300      	movs	r3, #0
   1e458:	e012      	b.n	1e480 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1e45a:	4b0b      	ldr	r3, [pc, #44]	; (1e488 <sd_mmc_cmd9_spi+0x5c>)
   1e45c:	681b      	ldr	r3, [r3, #0]
   1e45e:	330e      	adds	r3, #14
   1e460:	2101      	movs	r1, #1
   1e462:	0018      	movs	r0, r3
   1e464:	4b0b      	ldr	r3, [pc, #44]	; (1e494 <sd_mmc_cmd9_spi+0x68>)
   1e466:	4798      	blx	r3
   1e468:	0003      	movs	r3, r0
   1e46a:	001a      	movs	r2, r3
   1e46c:	2301      	movs	r3, #1
   1e46e:	4053      	eors	r3, r2
   1e470:	b2db      	uxtb	r3, r3
   1e472:	2b00      	cmp	r3, #0
   1e474:	d001      	beq.n	1e47a <sd_mmc_cmd9_spi+0x4e>
		return false;
   1e476:	2300      	movs	r3, #0
   1e478:	e002      	b.n	1e480 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1e47a:	4b07      	ldr	r3, [pc, #28]	; (1e498 <sd_mmc_cmd9_spi+0x6c>)
   1e47c:	4798      	blx	r3
   1e47e:	0003      	movs	r3, r0
}
   1e480:	0018      	movs	r0, r3
   1e482:	46bd      	mov	sp, r7
   1e484:	b001      	add	sp, #4
   1e486:	bd90      	pop	{r4, r7, pc}
   1e488:	20004240 	.word	0x20004240
   1e48c:	00081109 	.word	0x00081109
   1e490:	0001fb99 	.word	0x0001fb99
   1e494:	0001fe69 	.word	0x0001fe69
   1e498:	0001ff0d 	.word	0x0001ff0d

0001e49c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1e49c:	b5b0      	push	{r4, r5, r7, lr}
   1e49e:	b084      	sub	sp, #16
   1e4a0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1e4a2:	4b45      	ldr	r3, [pc, #276]	; (1e5b8 <mmc_decode_csd+0x11c>)
   1e4a4:	681b      	ldr	r3, [r3, #0]
   1e4a6:	330e      	adds	r3, #14
   1e4a8:	0018      	movs	r0, r3
   1e4aa:	2304      	movs	r3, #4
   1e4ac:	227a      	movs	r2, #122	; 0x7a
   1e4ae:	2180      	movs	r1, #128	; 0x80
   1e4b0:	4c42      	ldr	r4, [pc, #264]	; (1e5bc <mmc_decode_csd+0x120>)
   1e4b2:	47a0      	blx	r4
   1e4b4:	0003      	movs	r3, r0
   1e4b6:	2b02      	cmp	r3, #2
   1e4b8:	d011      	beq.n	1e4de <mmc_decode_csd+0x42>
   1e4ba:	d802      	bhi.n	1e4c2 <mmc_decode_csd+0x26>
   1e4bc:	2b01      	cmp	r3, #1
   1e4be:	d009      	beq.n	1e4d4 <mmc_decode_csd+0x38>
   1e4c0:	e003      	b.n	1e4ca <mmc_decode_csd+0x2e>
   1e4c2:	2b03      	cmp	r3, #3
   1e4c4:	d010      	beq.n	1e4e8 <mmc_decode_csd+0x4c>
   1e4c6:	2b04      	cmp	r3, #4
   1e4c8:	d013      	beq.n	1e4f2 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1e4ca:	4b3b      	ldr	r3, [pc, #236]	; (1e5b8 <mmc_decode_csd+0x11c>)
   1e4cc:	681b      	ldr	r3, [r3, #0]
   1e4ce:	2212      	movs	r2, #18
   1e4d0:	731a      	strb	r2, [r3, #12]
		break;
   1e4d2:	e013      	b.n	1e4fc <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1e4d4:	4b38      	ldr	r3, [pc, #224]	; (1e5b8 <mmc_decode_csd+0x11c>)
   1e4d6:	681b      	ldr	r3, [r3, #0]
   1e4d8:	2214      	movs	r2, #20
   1e4da:	731a      	strb	r2, [r3, #12]
		break;
   1e4dc:	e00e      	b.n	1e4fc <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1e4de:	4b36      	ldr	r3, [pc, #216]	; (1e5b8 <mmc_decode_csd+0x11c>)
   1e4e0:	681b      	ldr	r3, [r3, #0]
   1e4e2:	2222      	movs	r2, #34	; 0x22
   1e4e4:	731a      	strb	r2, [r3, #12]
		break;
   1e4e6:	e009      	b.n	1e4fc <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1e4e8:	4b33      	ldr	r3, [pc, #204]	; (1e5b8 <mmc_decode_csd+0x11c>)
   1e4ea:	681b      	ldr	r3, [r3, #0]
   1e4ec:	2230      	movs	r2, #48	; 0x30
   1e4ee:	731a      	strb	r2, [r3, #12]
		break;
   1e4f0:	e004      	b.n	1e4fc <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1e4f2:	4b31      	ldr	r3, [pc, #196]	; (1e5b8 <mmc_decode_csd+0x11c>)
   1e4f4:	681b      	ldr	r3, [r3, #0]
   1e4f6:	2240      	movs	r2, #64	; 0x40
   1e4f8:	731a      	strb	r2, [r3, #12]
		break;
   1e4fa:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1e4fc:	4b2e      	ldr	r3, [pc, #184]	; (1e5b8 <mmc_decode_csd+0x11c>)
   1e4fe:	681b      	ldr	r3, [r3, #0]
   1e500:	330e      	adds	r3, #14
   1e502:	0018      	movs	r0, r3
   1e504:	2308      	movs	r3, #8
   1e506:	2260      	movs	r2, #96	; 0x60
   1e508:	2180      	movs	r1, #128	; 0x80
   1e50a:	4c2c      	ldr	r4, [pc, #176]	; (1e5bc <mmc_decode_csd+0x120>)
   1e50c:	47a0      	blx	r4
   1e50e:	0003      	movs	r3, r0
   1e510:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1e512:	68fb      	ldr	r3, [r7, #12]
   1e514:	2207      	movs	r2, #7
   1e516:	401a      	ands	r2, r3
   1e518:	4b29      	ldr	r3, [pc, #164]	; (1e5c0 <mmc_decode_csd+0x124>)
   1e51a:	0092      	lsls	r2, r2, #2
   1e51c:	58d3      	ldr	r3, [r2, r3]
   1e51e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1e520:	68fb      	ldr	r3, [r7, #12]
   1e522:	08db      	lsrs	r3, r3, #3
   1e524:	220f      	movs	r2, #15
   1e526:	401a      	ands	r2, r3
   1e528:	4b26      	ldr	r3, [pc, #152]	; (1e5c4 <mmc_decode_csd+0x128>)
   1e52a:	0092      	lsls	r2, r2, #2
   1e52c:	58d3      	ldr	r3, [r2, r3]
   1e52e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1e530:	4b21      	ldr	r3, [pc, #132]	; (1e5b8 <mmc_decode_csd+0x11c>)
   1e532:	681b      	ldr	r3, [r3, #0]
   1e534:	68ba      	ldr	r2, [r7, #8]
   1e536:	6879      	ldr	r1, [r7, #4]
   1e538:	434a      	muls	r2, r1
   1e53a:	21fa      	movs	r1, #250	; 0xfa
   1e53c:	0089      	lsls	r1, r1, #2
   1e53e:	434a      	muls	r2, r1
   1e540:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1e542:	4b1d      	ldr	r3, [pc, #116]	; (1e5b8 <mmc_decode_csd+0x11c>)
   1e544:	681b      	ldr	r3, [r3, #0]
   1e546:	330e      	adds	r3, #14
   1e548:	0018      	movs	r0, r3
   1e54a:	230c      	movs	r3, #12
   1e54c:	223e      	movs	r2, #62	; 0x3e
   1e54e:	2180      	movs	r1, #128	; 0x80
   1e550:	4c1a      	ldr	r4, [pc, #104]	; (1e5bc <mmc_decode_csd+0x120>)
   1e552:	47a0      	blx	r4
   1e554:	0002      	movs	r2, r0
   1e556:	4b1c      	ldr	r3, [pc, #112]	; (1e5c8 <mmc_decode_csd+0x12c>)
   1e558:	429a      	cmp	r2, r3
   1e55a:	d028      	beq.n	1e5ae <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1e55c:	4b16      	ldr	r3, [pc, #88]	; (1e5b8 <mmc_decode_csd+0x11c>)
   1e55e:	681b      	ldr	r3, [r3, #0]
   1e560:	330e      	adds	r3, #14
   1e562:	0018      	movs	r0, r3
   1e564:	230c      	movs	r3, #12
   1e566:	223e      	movs	r2, #62	; 0x3e
   1e568:	2180      	movs	r1, #128	; 0x80
   1e56a:	4c14      	ldr	r4, [pc, #80]	; (1e5bc <mmc_decode_csd+0x120>)
   1e56c:	47a0      	blx	r4
   1e56e:	0003      	movs	r3, r0
   1e570:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1e572:	4b11      	ldr	r3, [pc, #68]	; (1e5b8 <mmc_decode_csd+0x11c>)
   1e574:	681b      	ldr	r3, [r3, #0]
   1e576:	330e      	adds	r3, #14
   1e578:	0018      	movs	r0, r3
   1e57a:	2303      	movs	r3, #3
   1e57c:	222f      	movs	r2, #47	; 0x2f
   1e57e:	2180      	movs	r1, #128	; 0x80
   1e580:	4d0e      	ldr	r5, [pc, #56]	; (1e5bc <mmc_decode_csd+0x120>)
   1e582:	47a8      	blx	r5
   1e584:	0003      	movs	r3, r0
   1e586:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1e588:	409c      	lsls	r4, r3
   1e58a:	0023      	movs	r3, r4
   1e58c:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1e58e:	4b0a      	ldr	r3, [pc, #40]	; (1e5b8 <mmc_decode_csd+0x11c>)
   1e590:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1e592:	4b09      	ldr	r3, [pc, #36]	; (1e5b8 <mmc_decode_csd+0x11c>)
   1e594:	681b      	ldr	r3, [r3, #0]
   1e596:	330e      	adds	r3, #14
   1e598:	0018      	movs	r0, r3
   1e59a:	2304      	movs	r3, #4
   1e59c:	2250      	movs	r2, #80	; 0x50
   1e59e:	2180      	movs	r1, #128	; 0x80
   1e5a0:	4d06      	ldr	r5, [pc, #24]	; (1e5bc <mmc_decode_csd+0x120>)
   1e5a2:	47a8      	blx	r5
   1e5a4:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1e5a6:	683b      	ldr	r3, [r7, #0]
   1e5a8:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1e5aa:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1e5ac:	6063      	str	r3, [r4, #4]
	}
}
   1e5ae:	46c0      	nop			; (mov r8, r8)
   1e5b0:	46bd      	mov	sp, r7
   1e5b2:	b004      	add	sp, #16
   1e5b4:	bdb0      	pop	{r4, r5, r7, pc}
   1e5b6:	46c0      	nop			; (mov r8, r8)
   1e5b8:	20004240 	.word	0x20004240
   1e5bc:	0001df99 	.word	0x0001df99
   1e5c0:	0003830c 	.word	0x0003830c
   1e5c4:	00038368 	.word	0x00038368
   1e5c8:	00000fff 	.word	0x00000fff

0001e5cc <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1e5cc:	b5b0      	push	{r4, r5, r7, lr}
   1e5ce:	b084      	sub	sp, #16
   1e5d0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1e5d2:	4b35      	ldr	r3, [pc, #212]	; (1e6a8 <sd_decode_csd+0xdc>)
   1e5d4:	681b      	ldr	r3, [r3, #0]
   1e5d6:	330e      	adds	r3, #14
   1e5d8:	0018      	movs	r0, r3
   1e5da:	2308      	movs	r3, #8
   1e5dc:	2260      	movs	r2, #96	; 0x60
   1e5de:	2180      	movs	r1, #128	; 0x80
   1e5e0:	4c32      	ldr	r4, [pc, #200]	; (1e6ac <sd_decode_csd+0xe0>)
   1e5e2:	47a0      	blx	r4
   1e5e4:	0003      	movs	r3, r0
   1e5e6:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1e5e8:	68fb      	ldr	r3, [r7, #12]
   1e5ea:	2207      	movs	r2, #7
   1e5ec:	401a      	ands	r2, r3
   1e5ee:	4b30      	ldr	r3, [pc, #192]	; (1e6b0 <sd_decode_csd+0xe4>)
   1e5f0:	0092      	lsls	r2, r2, #2
   1e5f2:	58d3      	ldr	r3, [r2, r3]
   1e5f4:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1e5f6:	68fb      	ldr	r3, [r7, #12]
   1e5f8:	08db      	lsrs	r3, r3, #3
   1e5fa:	220f      	movs	r2, #15
   1e5fc:	401a      	ands	r2, r3
   1e5fe:	4b2d      	ldr	r3, [pc, #180]	; (1e6b4 <sd_decode_csd+0xe8>)
   1e600:	0092      	lsls	r2, r2, #2
   1e602:	58d3      	ldr	r3, [r2, r3]
   1e604:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1e606:	4b28      	ldr	r3, [pc, #160]	; (1e6a8 <sd_decode_csd+0xdc>)
   1e608:	681b      	ldr	r3, [r3, #0]
   1e60a:	68ba      	ldr	r2, [r7, #8]
   1e60c:	6879      	ldr	r1, [r7, #4]
   1e60e:	434a      	muls	r2, r1
   1e610:	21fa      	movs	r1, #250	; 0xfa
   1e612:	0089      	lsls	r1, r1, #2
   1e614:	434a      	muls	r2, r1
   1e616:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1e618:	4b23      	ldr	r3, [pc, #140]	; (1e6a8 <sd_decode_csd+0xdc>)
   1e61a:	681b      	ldr	r3, [r3, #0]
   1e61c:	330e      	adds	r3, #14
   1e61e:	0018      	movs	r0, r3
   1e620:	2302      	movs	r3, #2
   1e622:	227e      	movs	r2, #126	; 0x7e
   1e624:	2180      	movs	r1, #128	; 0x80
   1e626:	4c21      	ldr	r4, [pc, #132]	; (1e6ac <sd_decode_csd+0xe0>)
   1e628:	47a0      	blx	r4
   1e62a:	1e03      	subs	r3, r0, #0
   1e62c:	d00f      	beq.n	1e64e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1e62e:	4b1e      	ldr	r3, [pc, #120]	; (1e6a8 <sd_decode_csd+0xdc>)
   1e630:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1e632:	4b1d      	ldr	r3, [pc, #116]	; (1e6a8 <sd_decode_csd+0xdc>)
   1e634:	681b      	ldr	r3, [r3, #0]
   1e636:	330e      	adds	r3, #14
   1e638:	0018      	movs	r0, r3
   1e63a:	2316      	movs	r3, #22
   1e63c:	2230      	movs	r2, #48	; 0x30
   1e63e:	2180      	movs	r1, #128	; 0x80
   1e640:	4d1a      	ldr	r5, [pc, #104]	; (1e6ac <sd_decode_csd+0xe0>)
   1e642:	47a8      	blx	r5
   1e644:	0003      	movs	r3, r0
				* 512;
   1e646:	3301      	adds	r3, #1
   1e648:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1e64a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1e64c:	e028      	b.n	1e6a0 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1e64e:	4b16      	ldr	r3, [pc, #88]	; (1e6a8 <sd_decode_csd+0xdc>)
   1e650:	681b      	ldr	r3, [r3, #0]
   1e652:	330e      	adds	r3, #14
   1e654:	0018      	movs	r0, r3
   1e656:	230c      	movs	r3, #12
   1e658:	223e      	movs	r2, #62	; 0x3e
   1e65a:	2180      	movs	r1, #128	; 0x80
   1e65c:	4c13      	ldr	r4, [pc, #76]	; (1e6ac <sd_decode_csd+0xe0>)
   1e65e:	47a0      	blx	r4
   1e660:	0003      	movs	r3, r0
   1e662:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1e664:	4b10      	ldr	r3, [pc, #64]	; (1e6a8 <sd_decode_csd+0xdc>)
   1e666:	681b      	ldr	r3, [r3, #0]
   1e668:	330e      	adds	r3, #14
   1e66a:	0018      	movs	r0, r3
   1e66c:	2303      	movs	r3, #3
   1e66e:	222f      	movs	r2, #47	; 0x2f
   1e670:	2180      	movs	r1, #128	; 0x80
   1e672:	4d0e      	ldr	r5, [pc, #56]	; (1e6ac <sd_decode_csd+0xe0>)
   1e674:	47a8      	blx	r5
   1e676:	0003      	movs	r3, r0
   1e678:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1e67a:	409c      	lsls	r4, r3
   1e67c:	0023      	movs	r3, r4
   1e67e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1e680:	4b09      	ldr	r3, [pc, #36]	; (1e6a8 <sd_decode_csd+0xdc>)
   1e682:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1e684:	4b08      	ldr	r3, [pc, #32]	; (1e6a8 <sd_decode_csd+0xdc>)
   1e686:	681b      	ldr	r3, [r3, #0]
   1e688:	330e      	adds	r3, #14
   1e68a:	0018      	movs	r0, r3
   1e68c:	2304      	movs	r3, #4
   1e68e:	2250      	movs	r2, #80	; 0x50
   1e690:	2180      	movs	r1, #128	; 0x80
   1e692:	4d06      	ldr	r5, [pc, #24]	; (1e6ac <sd_decode_csd+0xe0>)
   1e694:	47a8      	blx	r5
   1e696:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1e698:	683b      	ldr	r3, [r7, #0]
   1e69a:	4093      	lsls	r3, r2
				/ 1024;
   1e69c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1e69e:	6063      	str	r3, [r4, #4]
}
   1e6a0:	46c0      	nop			; (mov r8, r8)
   1e6a2:	46bd      	mov	sp, r7
   1e6a4:	b004      	add	sp, #16
   1e6a6:	bdb0      	pop	{r4, r5, r7, pc}
   1e6a8:	20004240 	.word	0x20004240
   1e6ac:	0001df99 	.word	0x0001df99
   1e6b0:	0003830c 	.word	0x0003830c
   1e6b4:	00038328 	.word	0x00038328

0001e6b8 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1e6b8:	b580      	push	{r7, lr}
   1e6ba:	b082      	sub	sp, #8
   1e6bc:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1e6be:	4b11      	ldr	r3, [pc, #68]	; (1e704 <sd_mmc_cmd13+0x4c>)
   1e6c0:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1e6c2:	4b11      	ldr	r3, [pc, #68]	; (1e708 <sd_mmc_cmd13+0x50>)
   1e6c4:	2100      	movs	r1, #0
   1e6c6:	0018      	movs	r0, r3
   1e6c8:	4b10      	ldr	r3, [pc, #64]	; (1e70c <sd_mmc_cmd13+0x54>)
   1e6ca:	4798      	blx	r3
   1e6cc:	0003      	movs	r3, r0
   1e6ce:	001a      	movs	r2, r3
   1e6d0:	2301      	movs	r3, #1
   1e6d2:	4053      	eors	r3, r2
   1e6d4:	b2db      	uxtb	r3, r3
   1e6d6:	2b00      	cmp	r3, #0
   1e6d8:	d001      	beq.n	1e6de <sd_mmc_cmd13+0x26>
				return false;
   1e6da:	2300      	movs	r3, #0
   1e6dc:	e00e      	b.n	1e6fc <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1e6de:	4b0c      	ldr	r3, [pc, #48]	; (1e710 <sd_mmc_cmd13+0x58>)
   1e6e0:	4798      	blx	r3
   1e6e2:	0002      	movs	r2, r0
   1e6e4:	23ff      	movs	r3, #255	; 0xff
   1e6e6:	4013      	ands	r3, r2
   1e6e8:	d006      	beq.n	1e6f8 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1e6ea:	687b      	ldr	r3, [r7, #4]
   1e6ec:	1e5a      	subs	r2, r3, #1
   1e6ee:	607a      	str	r2, [r7, #4]
   1e6f0:	2b00      	cmp	r3, #0
   1e6f2:	d1e6      	bne.n	1e6c2 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1e6f4:	2300      	movs	r3, #0
   1e6f6:	e001      	b.n	1e6fc <sd_mmc_cmd13+0x44>
				break;
   1e6f8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1e6fa:	2301      	movs	r3, #1
}
   1e6fc:	0018      	movs	r0, r3
   1e6fe:	46bd      	mov	sp, r7
   1e700:	b002      	add	sp, #8
   1e702:	bd80      	pop	{r7, pc}
   1e704:	00030d40 	.word	0x00030d40
   1e708:	00001b0d 	.word	0x00001b0d
   1e70c:	0001fb71 	.word	0x0001fb71
   1e710:	0001fdb1 	.word	0x0001fdb1

0001e714 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1e714:	b590      	push	{r4, r7, lr}
   1e716:	b085      	sub	sp, #20
   1e718:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1e71a:	4b38      	ldr	r3, [pc, #224]	; (1e7fc <sd_acmd51+0xe8>)
   1e71c:	681b      	ldr	r3, [r3, #0]
   1e71e:	891b      	ldrh	r3, [r3, #8]
   1e720:	041b      	lsls	r3, r3, #16
   1e722:	4a37      	ldr	r2, [pc, #220]	; (1e800 <sd_acmd51+0xec>)
   1e724:	0019      	movs	r1, r3
   1e726:	0010      	movs	r0, r2
   1e728:	4b36      	ldr	r3, [pc, #216]	; (1e804 <sd_acmd51+0xf0>)
   1e72a:	4798      	blx	r3
   1e72c:	0003      	movs	r3, r0
   1e72e:	001a      	movs	r2, r3
   1e730:	2301      	movs	r3, #1
   1e732:	4053      	eors	r3, r2
   1e734:	b2db      	uxtb	r3, r3
   1e736:	2b00      	cmp	r3, #0
   1e738:	d001      	beq.n	1e73e <sd_acmd51+0x2a>
		return false;
   1e73a:	2300      	movs	r3, #0
   1e73c:	e059      	b.n	1e7f2 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1e73e:	4832      	ldr	r0, [pc, #200]	; (1e808 <sd_acmd51+0xf4>)
   1e740:	2301      	movs	r3, #1
   1e742:	9300      	str	r3, [sp, #0]
   1e744:	2301      	movs	r3, #1
   1e746:	2208      	movs	r2, #8
   1e748:	2100      	movs	r1, #0
   1e74a:	4c30      	ldr	r4, [pc, #192]	; (1e80c <sd_acmd51+0xf8>)
   1e74c:	47a0      	blx	r4
   1e74e:	0003      	movs	r3, r0
   1e750:	001a      	movs	r2, r3
   1e752:	2301      	movs	r3, #1
   1e754:	4053      	eors	r3, r2
   1e756:	b2db      	uxtb	r3, r3
   1e758:	2b00      	cmp	r3, #0
   1e75a:	d001      	beq.n	1e760 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1e75c:	2300      	movs	r3, #0
   1e75e:	e048      	b.n	1e7f2 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1e760:	003b      	movs	r3, r7
   1e762:	2101      	movs	r1, #1
   1e764:	0018      	movs	r0, r3
   1e766:	4b2a      	ldr	r3, [pc, #168]	; (1e810 <sd_acmd51+0xfc>)
   1e768:	4798      	blx	r3
   1e76a:	0003      	movs	r3, r0
   1e76c:	001a      	movs	r2, r3
   1e76e:	2301      	movs	r3, #1
   1e770:	4053      	eors	r3, r2
   1e772:	b2db      	uxtb	r3, r3
   1e774:	2b00      	cmp	r3, #0
   1e776:	d001      	beq.n	1e77c <sd_acmd51+0x68>
		return false;
   1e778:	2300      	movs	r3, #0
   1e77a:	e03a      	b.n	1e7f2 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1e77c:	4b25      	ldr	r3, [pc, #148]	; (1e814 <sd_acmd51+0x100>)
   1e77e:	4798      	blx	r3
   1e780:	0003      	movs	r3, r0
   1e782:	001a      	movs	r2, r3
   1e784:	2301      	movs	r3, #1
   1e786:	4053      	eors	r3, r2
   1e788:	b2db      	uxtb	r3, r3
   1e78a:	2b00      	cmp	r3, #0
   1e78c:	d001      	beq.n	1e792 <sd_acmd51+0x7e>
		return false;
   1e78e:	2300      	movs	r3, #0
   1e790:	e02f      	b.n	1e7f2 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1e792:	0038      	movs	r0, r7
   1e794:	2304      	movs	r3, #4
   1e796:	2238      	movs	r2, #56	; 0x38
   1e798:	2140      	movs	r1, #64	; 0x40
   1e79a:	4c1f      	ldr	r4, [pc, #124]	; (1e818 <sd_acmd51+0x104>)
   1e79c:	47a0      	blx	r4
   1e79e:	0003      	movs	r3, r0
   1e7a0:	2b01      	cmp	r3, #1
   1e7a2:	d008      	beq.n	1e7b6 <sd_acmd51+0xa2>
   1e7a4:	d302      	bcc.n	1e7ac <sd_acmd51+0x98>
   1e7a6:	2b02      	cmp	r3, #2
   1e7a8:	d00a      	beq.n	1e7c0 <sd_acmd51+0xac>
   1e7aa:	e01c      	b.n	1e7e6 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1e7ac:	4b13      	ldr	r3, [pc, #76]	; (1e7fc <sd_acmd51+0xe8>)
   1e7ae:	681b      	ldr	r3, [r3, #0]
   1e7b0:	2210      	movs	r2, #16
   1e7b2:	731a      	strb	r2, [r3, #12]
		break;
   1e7b4:	e01c      	b.n	1e7f0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1e7b6:	4b11      	ldr	r3, [pc, #68]	; (1e7fc <sd_acmd51+0xe8>)
   1e7b8:	681b      	ldr	r3, [r3, #0]
   1e7ba:	221a      	movs	r2, #26
   1e7bc:	731a      	strb	r2, [r3, #12]
		break;
   1e7be:	e017      	b.n	1e7f0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1e7c0:	0038      	movs	r0, r7
   1e7c2:	2301      	movs	r3, #1
   1e7c4:	222f      	movs	r2, #47	; 0x2f
   1e7c6:	2140      	movs	r1, #64	; 0x40
   1e7c8:	4c13      	ldr	r4, [pc, #76]	; (1e818 <sd_acmd51+0x104>)
   1e7ca:	47a0      	blx	r4
   1e7cc:	0003      	movs	r3, r0
   1e7ce:	2b01      	cmp	r3, #1
   1e7d0:	d104      	bne.n	1e7dc <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1e7d2:	4b0a      	ldr	r3, [pc, #40]	; (1e7fc <sd_acmd51+0xe8>)
   1e7d4:	681b      	ldr	r3, [r3, #0]
   1e7d6:	2230      	movs	r2, #48	; 0x30
   1e7d8:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1e7da:	e009      	b.n	1e7f0 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1e7dc:	4b07      	ldr	r3, [pc, #28]	; (1e7fc <sd_acmd51+0xe8>)
   1e7de:	681b      	ldr	r3, [r3, #0]
   1e7e0:	2220      	movs	r2, #32
   1e7e2:	731a      	strb	r2, [r3, #12]
		break;
   1e7e4:	e004      	b.n	1e7f0 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1e7e6:	4b05      	ldr	r3, [pc, #20]	; (1e7fc <sd_acmd51+0xe8>)
   1e7e8:	681b      	ldr	r3, [r3, #0]
   1e7ea:	2210      	movs	r2, #16
   1e7ec:	731a      	strb	r2, [r3, #12]
		break;
   1e7ee:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1e7f0:	2301      	movs	r3, #1
}
   1e7f2:	0018      	movs	r0, r3
   1e7f4:	46bd      	mov	sp, r7
   1e7f6:	b003      	add	sp, #12
   1e7f8:	bd90      	pop	{r4, r7, pc}
   1e7fa:	46c0      	nop			; (mov r8, r8)
   1e7fc:	20004240 	.word	0x20004240
   1e800:	00001137 	.word	0x00001137
   1e804:	0001fb71 	.word	0x0001fb71
   1e808:	00081133 	.word	0x00081133
   1e80c:	0001fb99 	.word	0x0001fb99
   1e810:	0001fe69 	.word	0x0001fe69
   1e814:	0001ff0d 	.word	0x0001ff0d
   1e818:	0001df99 	.word	0x0001df99

0001e81c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1e81c:	b580      	push	{r7, lr}
   1e81e:	b082      	sub	sp, #8
   1e820:	af00      	add	r7, sp, #0
   1e822:	0002      	movs	r2, r0
   1e824:	1dfb      	adds	r3, r7, #7
   1e826:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1e828:	1dfb      	adds	r3, r7, #7
   1e82a:	781b      	ldrb	r3, [r3, #0]
   1e82c:	2b00      	cmp	r3, #0
   1e82e:	d001      	beq.n	1e834 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1e830:	2304      	movs	r3, #4
   1e832:	e047      	b.n	1e8c4 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1e834:	1dfb      	adds	r3, r7, #7
   1e836:	781b      	ldrb	r3, [r3, #0]
   1e838:	4a24      	ldr	r2, [pc, #144]	; (1e8cc <sd_mmc_select_slot+0xb0>)
   1e83a:	015b      	lsls	r3, r3, #5
   1e83c:	18d3      	adds	r3, r2, r3
   1e83e:	330a      	adds	r3, #10
   1e840:	781b      	ldrb	r3, [r3, #0]
   1e842:	2b04      	cmp	r3, #4
   1e844:	d008      	beq.n	1e858 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1e846:	1dfb      	adds	r3, r7, #7
   1e848:	781b      	ldrb	r3, [r3, #0]
   1e84a:	4a20      	ldr	r2, [pc, #128]	; (1e8cc <sd_mmc_select_slot+0xb0>)
   1e84c:	015b      	lsls	r3, r3, #5
   1e84e:	18d3      	adds	r3, r2, r3
   1e850:	330a      	adds	r3, #10
   1e852:	781b      	ldrb	r3, [r3, #0]
   1e854:	2b03      	cmp	r3, #3
   1e856:	d11d      	bne.n	1e894 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1e858:	1dfb      	adds	r3, r7, #7
   1e85a:	781b      	ldrb	r3, [r3, #0]
   1e85c:	4a1b      	ldr	r2, [pc, #108]	; (1e8cc <sd_mmc_select_slot+0xb0>)
   1e85e:	015b      	lsls	r3, r3, #5
   1e860:	18d3      	adds	r3, r2, r3
   1e862:	330a      	adds	r3, #10
   1e864:	2202      	movs	r2, #2
   1e866:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1e868:	1dfb      	adds	r3, r7, #7
   1e86a:	781a      	ldrb	r2, [r3, #0]
   1e86c:	4b17      	ldr	r3, [pc, #92]	; (1e8cc <sd_mmc_select_slot+0xb0>)
   1e86e:	0152      	lsls	r2, r2, #5
   1e870:	4917      	ldr	r1, [pc, #92]	; (1e8d0 <sd_mmc_select_slot+0xb4>)
   1e872:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1e874:	1dfb      	adds	r3, r7, #7
   1e876:	781b      	ldrb	r3, [r3, #0]
   1e878:	4a14      	ldr	r2, [pc, #80]	; (1e8cc <sd_mmc_select_slot+0xb0>)
   1e87a:	015b      	lsls	r3, r3, #5
   1e87c:	18d3      	adds	r3, r2, r3
   1e87e:	330d      	adds	r3, #13
   1e880:	2201      	movs	r2, #1
   1e882:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1e884:	1dfb      	adds	r3, r7, #7
   1e886:	781b      	ldrb	r3, [r3, #0]
   1e888:	4a10      	ldr	r2, [pc, #64]	; (1e8cc <sd_mmc_select_slot+0xb0>)
   1e88a:	015b      	lsls	r3, r3, #5
   1e88c:	18d3      	adds	r3, r2, r3
   1e88e:	331e      	adds	r3, #30
   1e890:	2200      	movs	r2, #0
   1e892:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1e894:	4b0f      	ldr	r3, [pc, #60]	; (1e8d4 <sd_mmc_select_slot+0xb8>)
   1e896:	1dfa      	adds	r2, r7, #7
   1e898:	7812      	ldrb	r2, [r2, #0]
   1e89a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1e89c:	1dfb      	adds	r3, r7, #7
   1e89e:	781b      	ldrb	r3, [r3, #0]
   1e8a0:	015a      	lsls	r2, r3, #5
   1e8a2:	4b0a      	ldr	r3, [pc, #40]	; (1e8cc <sd_mmc_select_slot+0xb0>)
   1e8a4:	18d2      	adds	r2, r2, r3
   1e8a6:	4b0c      	ldr	r3, [pc, #48]	; (1e8d8 <sd_mmc_select_slot+0xbc>)
   1e8a8:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1e8aa:	4b0c      	ldr	r3, [pc, #48]	; (1e8dc <sd_mmc_select_slot+0xc0>)
   1e8ac:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1e8ae:	1dfb      	adds	r3, r7, #7
   1e8b0:	781b      	ldrb	r3, [r3, #0]
   1e8b2:	4a06      	ldr	r2, [pc, #24]	; (1e8cc <sd_mmc_select_slot+0xb0>)
   1e8b4:	015b      	lsls	r3, r3, #5
   1e8b6:	18d3      	adds	r3, r2, r3
   1e8b8:	330a      	adds	r3, #10
   1e8ba:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1e8bc:	3b02      	subs	r3, #2
   1e8be:	425a      	negs	r2, r3
   1e8c0:	4153      	adcs	r3, r2
   1e8c2:	b2db      	uxtb	r3, r3
}
   1e8c4:	0018      	movs	r0, r3
   1e8c6:	46bd      	mov	sp, r7
   1e8c8:	b002      	add	sp, #8
   1e8ca:	bd80      	pop	{r7, pc}
   1e8cc:	2000421c 	.word	0x2000421c
   1e8d0:	00061a80 	.word	0x00061a80
   1e8d4:	2000423c 	.word	0x2000423c
   1e8d8:	20004240 	.word	0x20004240
   1e8dc:	0001e8e1 	.word	0x0001e8e1

0001e8e0 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1e8e0:	b5b0      	push	{r4, r5, r7, lr}
   1e8e2:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1e8e4:	4b09      	ldr	r3, [pc, #36]	; (1e90c <sd_mmc_configure_slot+0x2c>)
   1e8e6:	7818      	ldrb	r0, [r3, #0]
   1e8e8:	4b09      	ldr	r3, [pc, #36]	; (1e910 <sd_mmc_configure_slot+0x30>)
   1e8ea:	681b      	ldr	r3, [r3, #0]
   1e8ec:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1e8ee:	4b08      	ldr	r3, [pc, #32]	; (1e910 <sd_mmc_configure_slot+0x30>)
   1e8f0:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1e8f2:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1e8f4:	4b06      	ldr	r3, [pc, #24]	; (1e910 <sd_mmc_configure_slot+0x30>)
   1e8f6:	681b      	ldr	r3, [r3, #0]
   1e8f8:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1e8fa:	1e5c      	subs	r4, r3, #1
   1e8fc:	41a3      	sbcs	r3, r4
   1e8fe:	b2db      	uxtb	r3, r3
   1e900:	4c04      	ldr	r4, [pc, #16]	; (1e914 <sd_mmc_configure_slot+0x34>)
   1e902:	47a0      	blx	r4
}
   1e904:	46c0      	nop			; (mov r8, r8)
   1e906:	46bd      	mov	sp, r7
   1e908:	bdb0      	pop	{r4, r5, r7, pc}
   1e90a:	46c0      	nop			; (mov r8, r8)
   1e90c:	2000423c 	.word	0x2000423c
   1e910:	20004240 	.word	0x20004240
   1e914:	0001fa59 	.word	0x0001fa59

0001e918 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1e918:	b580      	push	{r7, lr}
   1e91a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1e91c:	4b05      	ldr	r3, [pc, #20]	; (1e934 <sd_mmc_deselect_slot+0x1c>)
   1e91e:	781b      	ldrb	r3, [r3, #0]
   1e920:	2b00      	cmp	r3, #0
   1e922:	d104      	bne.n	1e92e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1e924:	4b03      	ldr	r3, [pc, #12]	; (1e934 <sd_mmc_deselect_slot+0x1c>)
   1e926:	781b      	ldrb	r3, [r3, #0]
   1e928:	0018      	movs	r0, r3
   1e92a:	4b03      	ldr	r3, [pc, #12]	; (1e938 <sd_mmc_deselect_slot+0x20>)
   1e92c:	4798      	blx	r3
	}
}
   1e92e:	46c0      	nop			; (mov r8, r8)
   1e930:	46bd      	mov	sp, r7
   1e932:	bd80      	pop	{r7, pc}
   1e934:	2000423c 	.word	0x2000423c
   1e938:	0001fae1 	.word	0x0001fae1

0001e93c <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1e93c:	b580      	push	{r7, lr}
   1e93e:	b082      	sub	sp, #8
   1e940:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1e942:	1dfb      	adds	r3, r7, #7
   1e944:	2200      	movs	r2, #0
   1e946:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1e948:	4b59      	ldr	r3, [pc, #356]	; (1eab0 <sd_mmc_spi_card_init+0x174>)
   1e94a:	681b      	ldr	r3, [r3, #0]
   1e94c:	2201      	movs	r2, #1
   1e94e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1e950:	4b57      	ldr	r3, [pc, #348]	; (1eab0 <sd_mmc_spi_card_init+0x174>)
   1e952:	681b      	ldr	r3, [r3, #0]
   1e954:	2200      	movs	r2, #0
   1e956:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1e958:	4b55      	ldr	r3, [pc, #340]	; (1eab0 <sd_mmc_spi_card_init+0x174>)
   1e95a:	681b      	ldr	r3, [r3, #0]
   1e95c:	2200      	movs	r2, #0
   1e95e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1e960:	4b54      	ldr	r3, [pc, #336]	; (1eab4 <sd_mmc_spi_card_init+0x178>)
   1e962:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1e964:	2388      	movs	r3, #136	; 0x88
   1e966:	015b      	lsls	r3, r3, #5
   1e968:	2100      	movs	r1, #0
   1e96a:	0018      	movs	r0, r3
   1e96c:	4b52      	ldr	r3, [pc, #328]	; (1eab8 <sd_mmc_spi_card_init+0x17c>)
   1e96e:	4798      	blx	r3
   1e970:	0003      	movs	r3, r0
   1e972:	001a      	movs	r2, r3
   1e974:	2301      	movs	r3, #1
   1e976:	4053      	eors	r3, r2
   1e978:	b2db      	uxtb	r3, r3
   1e97a:	2b00      	cmp	r3, #0
   1e97c:	d001      	beq.n	1e982 <sd_mmc_spi_card_init+0x46>
		return false;
   1e97e:	2300      	movs	r3, #0
   1e980:	e092      	b.n	1eaa8 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1e982:	1dfb      	adds	r3, r7, #7
   1e984:	0018      	movs	r0, r3
   1e986:	4b4d      	ldr	r3, [pc, #308]	; (1eabc <sd_mmc_spi_card_init+0x180>)
   1e988:	4798      	blx	r3
   1e98a:	0003      	movs	r3, r0
   1e98c:	001a      	movs	r2, r3
   1e98e:	2301      	movs	r3, #1
   1e990:	4053      	eors	r3, r2
   1e992:	b2db      	uxtb	r3, r3
   1e994:	2b00      	cmp	r3, #0
   1e996:	d001      	beq.n	1e99c <sd_mmc_spi_card_init+0x60>
		return false;
   1e998:	2300      	movs	r3, #0
   1e99a:	e085      	b.n	1eaa8 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1e99c:	4b48      	ldr	r3, [pc, #288]	; (1eac0 <sd_mmc_spi_card_init+0x184>)
   1e99e:	4798      	blx	r3
   1e9a0:	0003      	movs	r3, r0
   1e9a2:	001a      	movs	r2, r3
   1e9a4:	2301      	movs	r3, #1
   1e9a6:	4053      	eors	r3, r2
   1e9a8:	b2db      	uxtb	r3, r3
   1e9aa:	2b00      	cmp	r3, #0
   1e9ac:	d001      	beq.n	1e9b2 <sd_mmc_spi_card_init+0x76>
		return false;
   1e9ae:	2300      	movs	r3, #0
   1e9b0:	e07a      	b.n	1eaa8 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1e9b2:	4b3f      	ldr	r3, [pc, #252]	; (1eab0 <sd_mmc_spi_card_init+0x174>)
   1e9b4:	681b      	ldr	r3, [r3, #0]
   1e9b6:	7adb      	ldrb	r3, [r3, #11]
   1e9b8:	001a      	movs	r2, r3
   1e9ba:	2301      	movs	r3, #1
   1e9bc:	4013      	ands	r3, r2
   1e9be:	d021      	beq.n	1ea04 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1e9c0:	1dfb      	adds	r3, r7, #7
   1e9c2:	781b      	ldrb	r3, [r3, #0]
   1e9c4:	0018      	movs	r0, r3
   1e9c6:	4b3f      	ldr	r3, [pc, #252]	; (1eac4 <sd_mmc_spi_card_init+0x188>)
   1e9c8:	4798      	blx	r3
   1e9ca:	0003      	movs	r3, r0
   1e9cc:	001a      	movs	r2, r3
   1e9ce:	2301      	movs	r3, #1
   1e9d0:	4053      	eors	r3, r2
   1e9d2:	b2db      	uxtb	r3, r3
   1e9d4:	2b00      	cmp	r3, #0
   1e9d6:	d007      	beq.n	1e9e8 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1e9d8:	4b35      	ldr	r3, [pc, #212]	; (1eab0 <sd_mmc_spi_card_init+0x174>)
   1e9da:	681b      	ldr	r3, [r3, #0]
   1e9dc:	2202      	movs	r2, #2
   1e9de:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1e9e0:	4b39      	ldr	r3, [pc, #228]	; (1eac8 <sd_mmc_spi_card_init+0x18c>)
   1e9e2:	4798      	blx	r3
   1e9e4:	0003      	movs	r3, r0
   1e9e6:	e05f      	b.n	1eaa8 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1e9e8:	4b38      	ldr	r3, [pc, #224]	; (1eacc <sd_mmc_spi_card_init+0x190>)
   1e9ea:	2100      	movs	r1, #0
   1e9ec:	0018      	movs	r0, r3
   1e9ee:	4b32      	ldr	r3, [pc, #200]	; (1eab8 <sd_mmc_spi_card_init+0x17c>)
   1e9f0:	4798      	blx	r3
   1e9f2:	0003      	movs	r3, r0
   1e9f4:	001a      	movs	r2, r3
   1e9f6:	2301      	movs	r3, #1
   1e9f8:	4053      	eors	r3, r2
   1e9fa:	b2db      	uxtb	r3, r3
   1e9fc:	2b00      	cmp	r3, #0
   1e9fe:	d001      	beq.n	1ea04 <sd_mmc_spi_card_init+0xc8>
			return false;
   1ea00:	2300      	movs	r3, #0
   1ea02:	e051      	b.n	1eaa8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1ea04:	4b2a      	ldr	r3, [pc, #168]	; (1eab0 <sd_mmc_spi_card_init+0x174>)
   1ea06:	681b      	ldr	r3, [r3, #0]
   1ea08:	7adb      	ldrb	r3, [r3, #11]
   1ea0a:	001a      	movs	r2, r3
   1ea0c:	2301      	movs	r3, #1
   1ea0e:	4013      	ands	r3, r2
   1ea10:	d017      	beq.n	1ea42 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1ea12:	4b2f      	ldr	r3, [pc, #188]	; (1ead0 <sd_mmc_spi_card_init+0x194>)
   1ea14:	4798      	blx	r3
   1ea16:	0003      	movs	r3, r0
   1ea18:	001a      	movs	r2, r3
   1ea1a:	2301      	movs	r3, #1
   1ea1c:	4053      	eors	r3, r2
   1ea1e:	b2db      	uxtb	r3, r3
   1ea20:	2b00      	cmp	r3, #0
   1ea22:	d001      	beq.n	1ea28 <sd_mmc_spi_card_init+0xec>
			return false;
   1ea24:	2300      	movs	r3, #0
   1ea26:	e03f      	b.n	1eaa8 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1ea28:	4b2a      	ldr	r3, [pc, #168]	; (1ead4 <sd_mmc_spi_card_init+0x198>)
   1ea2a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1ea2c:	4b2a      	ldr	r3, [pc, #168]	; (1ead8 <sd_mmc_spi_card_init+0x19c>)
   1ea2e:	4798      	blx	r3
   1ea30:	0003      	movs	r3, r0
   1ea32:	001a      	movs	r2, r3
   1ea34:	2301      	movs	r3, #1
   1ea36:	4053      	eors	r3, r2
   1ea38:	b2db      	uxtb	r3, r3
   1ea3a:	2b00      	cmp	r3, #0
   1ea3c:	d001      	beq.n	1ea42 <sd_mmc_spi_card_init+0x106>
			return false;
   1ea3e:	2300      	movs	r3, #0
   1ea40:	e032      	b.n	1eaa8 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1ea42:	4b1b      	ldr	r3, [pc, #108]	; (1eab0 <sd_mmc_spi_card_init+0x174>)
   1ea44:	681b      	ldr	r3, [r3, #0]
   1ea46:	7adb      	ldrb	r3, [r3, #11]
   1ea48:	001a      	movs	r2, r3
   1ea4a:	2301      	movs	r3, #1
   1ea4c:	4013      	ands	r3, r2
   1ea4e:	d016      	beq.n	1ea7e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1ea50:	4b17      	ldr	r3, [pc, #92]	; (1eab0 <sd_mmc_spi_card_init+0x174>)
   1ea52:	681b      	ldr	r3, [r3, #0]
   1ea54:	7adb      	ldrb	r3, [r3, #11]
   1ea56:	001a      	movs	r2, r3
   1ea58:	2308      	movs	r3, #8
   1ea5a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1ea5c:	d10f      	bne.n	1ea7e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1ea5e:	2380      	movs	r3, #128	; 0x80
   1ea60:	009b      	lsls	r3, r3, #2
   1ea62:	4a1e      	ldr	r2, [pc, #120]	; (1eadc <sd_mmc_spi_card_init+0x1a0>)
   1ea64:	0019      	movs	r1, r3
   1ea66:	0010      	movs	r0, r2
   1ea68:	4b13      	ldr	r3, [pc, #76]	; (1eab8 <sd_mmc_spi_card_init+0x17c>)
   1ea6a:	4798      	blx	r3
   1ea6c:	0003      	movs	r3, r0
   1ea6e:	001a      	movs	r2, r3
   1ea70:	2301      	movs	r3, #1
   1ea72:	4053      	eors	r3, r2
   1ea74:	b2db      	uxtb	r3, r3
   1ea76:	2b00      	cmp	r3, #0
   1ea78:	d001      	beq.n	1ea7e <sd_mmc_spi_card_init+0x142>
			return false;
   1ea7a:	2300      	movs	r3, #0
   1ea7c:	e014      	b.n	1eaa8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1ea7e:	4b0c      	ldr	r3, [pc, #48]	; (1eab0 <sd_mmc_spi_card_init+0x174>)
   1ea80:	681b      	ldr	r3, [r3, #0]
   1ea82:	7adb      	ldrb	r3, [r3, #11]
   1ea84:	001a      	movs	r2, r3
   1ea86:	2301      	movs	r3, #1
   1ea88:	4013      	ands	r3, r2
   1ea8a:	d00a      	beq.n	1eaa2 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1ea8c:	4b14      	ldr	r3, [pc, #80]	; (1eae0 <sd_mmc_spi_card_init+0x1a4>)
   1ea8e:	4798      	blx	r3
   1ea90:	0003      	movs	r3, r0
   1ea92:	001a      	movs	r2, r3
   1ea94:	2301      	movs	r3, #1
   1ea96:	4053      	eors	r3, r2
   1ea98:	b2db      	uxtb	r3, r3
   1ea9a:	2b00      	cmp	r3, #0
   1ea9c:	d001      	beq.n	1eaa2 <sd_mmc_spi_card_init+0x166>
			return false;
   1ea9e:	2300      	movs	r3, #0
   1eaa0:	e002      	b.n	1eaa8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1eaa2:	4b10      	ldr	r3, [pc, #64]	; (1eae4 <sd_mmc_spi_card_init+0x1a8>)
   1eaa4:	4798      	blx	r3
	return true;
   1eaa6:	2301      	movs	r3, #1
}
   1eaa8:	0018      	movs	r0, r3
   1eaaa:	46bd      	mov	sp, r7
   1eaac:	b002      	add	sp, #8
   1eaae:	bd80      	pop	{r7, pc}
   1eab0:	20004240 	.word	0x20004240
   1eab4:	0001fb25 	.word	0x0001fb25
   1eab8:	0001fb71 	.word	0x0001fb71
   1eabc:	0001e291 	.word	0x0001e291
   1eac0:	0001e285 	.word	0x0001e285
   1eac4:	0001e1a1 	.word	0x0001e1a1
   1eac8:	0001eae9 	.word	0x0001eae9
   1eacc:	0000113b 	.word	0x0000113b
   1ead0:	0001e42d 	.word	0x0001e42d
   1ead4:	0001e5cd 	.word	0x0001e5cd
   1ead8:	0001e715 	.word	0x0001e715
   1eadc:	00001110 	.word	0x00001110
   1eae0:	0001e6b9 	.word	0x0001e6b9
   1eae4:	0001e8e1 	.word	0x0001e8e1

0001eae8 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1eae8:	b580      	push	{r7, lr}
   1eaea:	b082      	sub	sp, #8
   1eaec:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1eaee:	2388      	movs	r3, #136	; 0x88
   1eaf0:	015b      	lsls	r3, r3, #5
   1eaf2:	2100      	movs	r1, #0
   1eaf4:	0018      	movs	r0, r3
   1eaf6:	4b32      	ldr	r3, [pc, #200]	; (1ebc0 <sd_mmc_spi_install_mmc+0xd8>)
   1eaf8:	4798      	blx	r3
   1eafa:	0003      	movs	r3, r0
   1eafc:	001a      	movs	r2, r3
   1eafe:	2301      	movs	r3, #1
   1eb00:	4053      	eors	r3, r2
   1eb02:	b2db      	uxtb	r3, r3
   1eb04:	2b00      	cmp	r3, #0
   1eb06:	d001      	beq.n	1eb0c <sd_mmc_spi_install_mmc+0x24>
		return false;
   1eb08:	2300      	movs	r3, #0
   1eb0a:	e055      	b.n	1ebb8 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1eb0c:	4b2d      	ldr	r3, [pc, #180]	; (1ebc4 <sd_mmc_spi_install_mmc+0xdc>)
   1eb0e:	4798      	blx	r3
   1eb10:	0003      	movs	r3, r0
   1eb12:	001a      	movs	r2, r3
   1eb14:	2301      	movs	r3, #1
   1eb16:	4053      	eors	r3, r2
   1eb18:	b2db      	uxtb	r3, r3
   1eb1a:	2b00      	cmp	r3, #0
   1eb1c:	d001      	beq.n	1eb22 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1eb1e:	2300      	movs	r3, #0
   1eb20:	e04a      	b.n	1ebb8 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1eb22:	4b29      	ldr	r3, [pc, #164]	; (1ebc8 <sd_mmc_spi_install_mmc+0xe0>)
   1eb24:	2100      	movs	r1, #0
   1eb26:	0018      	movs	r0, r3
   1eb28:	4b25      	ldr	r3, [pc, #148]	; (1ebc0 <sd_mmc_spi_install_mmc+0xd8>)
   1eb2a:	4798      	blx	r3
   1eb2c:	0003      	movs	r3, r0
   1eb2e:	001a      	movs	r2, r3
   1eb30:	2301      	movs	r3, #1
   1eb32:	4053      	eors	r3, r2
   1eb34:	b2db      	uxtb	r3, r3
   1eb36:	2b00      	cmp	r3, #0
   1eb38:	d001      	beq.n	1eb3e <sd_mmc_spi_install_mmc+0x56>
		return false;
   1eb3a:	2300      	movs	r3, #0
   1eb3c:	e03c      	b.n	1ebb8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1eb3e:	4b23      	ldr	r3, [pc, #140]	; (1ebcc <sd_mmc_spi_install_mmc+0xe4>)
   1eb40:	4798      	blx	r3
   1eb42:	0003      	movs	r3, r0
   1eb44:	001a      	movs	r2, r3
   1eb46:	2301      	movs	r3, #1
   1eb48:	4053      	eors	r3, r2
   1eb4a:	b2db      	uxtb	r3, r3
   1eb4c:	2b00      	cmp	r3, #0
   1eb4e:	d001      	beq.n	1eb54 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1eb50:	2300      	movs	r3, #0
   1eb52:	e031      	b.n	1ebb8 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1eb54:	4b1e      	ldr	r3, [pc, #120]	; (1ebd0 <sd_mmc_spi_install_mmc+0xe8>)
   1eb56:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1eb58:	4b1e      	ldr	r3, [pc, #120]	; (1ebd4 <sd_mmc_spi_install_mmc+0xec>)
   1eb5a:	681b      	ldr	r3, [r3, #0]
   1eb5c:	7b1b      	ldrb	r3, [r3, #12]
   1eb5e:	2b3f      	cmp	r3, #63	; 0x3f
   1eb60:	d90c      	bls.n	1eb7c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1eb62:	1dfb      	adds	r3, r7, #7
   1eb64:	0018      	movs	r0, r3
   1eb66:	4b1c      	ldr	r3, [pc, #112]	; (1ebd8 <sd_mmc_spi_install_mmc+0xf0>)
   1eb68:	4798      	blx	r3
   1eb6a:	0003      	movs	r3, r0
   1eb6c:	001a      	movs	r2, r3
   1eb6e:	2301      	movs	r3, #1
   1eb70:	4053      	eors	r3, r2
   1eb72:	b2db      	uxtb	r3, r3
   1eb74:	2b00      	cmp	r3, #0
   1eb76:	d001      	beq.n	1eb7c <sd_mmc_spi_install_mmc+0x94>
			return false;
   1eb78:	2300      	movs	r3, #0
   1eb7a:	e01d      	b.n	1ebb8 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1eb7c:	2380      	movs	r3, #128	; 0x80
   1eb7e:	009b      	lsls	r3, r3, #2
   1eb80:	4a16      	ldr	r2, [pc, #88]	; (1ebdc <sd_mmc_spi_install_mmc+0xf4>)
   1eb82:	0019      	movs	r1, r3
   1eb84:	0010      	movs	r0, r2
   1eb86:	4b0e      	ldr	r3, [pc, #56]	; (1ebc0 <sd_mmc_spi_install_mmc+0xd8>)
   1eb88:	4798      	blx	r3
   1eb8a:	0003      	movs	r3, r0
   1eb8c:	001a      	movs	r2, r3
   1eb8e:	2301      	movs	r3, #1
   1eb90:	4053      	eors	r3, r2
   1eb92:	b2db      	uxtb	r3, r3
   1eb94:	2b00      	cmp	r3, #0
   1eb96:	d001      	beq.n	1eb9c <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1eb98:	2300      	movs	r3, #0
   1eb9a:	e00d      	b.n	1ebb8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1eb9c:	4b10      	ldr	r3, [pc, #64]	; (1ebe0 <sd_mmc_spi_install_mmc+0xf8>)
   1eb9e:	4798      	blx	r3
   1eba0:	0003      	movs	r3, r0
   1eba2:	001a      	movs	r2, r3
   1eba4:	2301      	movs	r3, #1
   1eba6:	4053      	eors	r3, r2
   1eba8:	b2db      	uxtb	r3, r3
   1ebaa:	2b00      	cmp	r3, #0
   1ebac:	d001      	beq.n	1ebb2 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1ebae:	2300      	movs	r3, #0
   1ebb0:	e002      	b.n	1ebb8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1ebb2:	4b0c      	ldr	r3, [pc, #48]	; (1ebe4 <sd_mmc_spi_install_mmc+0xfc>)
   1ebb4:	4798      	blx	r3
	return true;
   1ebb6:	2301      	movs	r3, #1
}
   1ebb8:	0018      	movs	r0, r3
   1ebba:	46bd      	mov	sp, r7
   1ebbc:	b002      	add	sp, #8
   1ebbe:	bd80      	pop	{r7, pc}
   1ebc0:	0001fb71 	.word	0x0001fb71
   1ebc4:	0001e0f5 	.word	0x0001e0f5
   1ebc8:	0000113b 	.word	0x0000113b
   1ebcc:	0001e42d 	.word	0x0001e42d
   1ebd0:	0001e49d 	.word	0x0001e49d
   1ebd4:	20004240 	.word	0x20004240
   1ebd8:	0001e301 	.word	0x0001e301
   1ebdc:	00001110 	.word	0x00001110
   1ebe0:	0001e6b9 	.word	0x0001e6b9
   1ebe4:	0001e8e1 	.word	0x0001e8e1

0001ebe8 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1ebe8:	b580      	push	{r7, lr}
   1ebea:	b082      	sub	sp, #8
   1ebec:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1ebee:	1dfb      	adds	r3, r7, #7
   1ebf0:	2200      	movs	r2, #0
   1ebf2:	701a      	strb	r2, [r3, #0]
   1ebf4:	e00c      	b.n	1ec10 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1ebf6:	1dfb      	adds	r3, r7, #7
   1ebf8:	781b      	ldrb	r3, [r3, #0]
   1ebfa:	4a0c      	ldr	r2, [pc, #48]	; (1ec2c <sd_mmc_init+0x44>)
   1ebfc:	015b      	lsls	r3, r3, #5
   1ebfe:	18d3      	adds	r3, r2, r3
   1ec00:	330a      	adds	r3, #10
   1ec02:	2204      	movs	r2, #4
   1ec04:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1ec06:	1dfb      	adds	r3, r7, #7
   1ec08:	781a      	ldrb	r2, [r3, #0]
   1ec0a:	1dfb      	adds	r3, r7, #7
   1ec0c:	3201      	adds	r2, #1
   1ec0e:	701a      	strb	r2, [r3, #0]
   1ec10:	1dfb      	adds	r3, r7, #7
   1ec12:	781b      	ldrb	r3, [r3, #0]
   1ec14:	2b00      	cmp	r3, #0
   1ec16:	d0ee      	beq.n	1ebf6 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1ec18:	4b05      	ldr	r3, [pc, #20]	; (1ec30 <sd_mmc_init+0x48>)
   1ec1a:	22ff      	movs	r2, #255	; 0xff
   1ec1c:	701a      	strb	r2, [r3, #0]
	driver_init();
   1ec1e:	4b05      	ldr	r3, [pc, #20]	; (1ec34 <sd_mmc_init+0x4c>)
   1ec20:	4798      	blx	r3
}
   1ec22:	46c0      	nop			; (mov r8, r8)
   1ec24:	46bd      	mov	sp, r7
   1ec26:	b002      	add	sp, #8
   1ec28:	bd80      	pop	{r7, pc}
   1ec2a:	46c0      	nop			; (mov r8, r8)
   1ec2c:	2000421c 	.word	0x2000421c
   1ec30:	2000423c 	.word	0x2000423c
   1ec34:	0001f991 	.word	0x0001f991

0001ec38 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1ec38:	b590      	push	{r4, r7, lr}
   1ec3a:	b085      	sub	sp, #20
   1ec3c:	af00      	add	r7, sp, #0
   1ec3e:	0002      	movs	r2, r0
   1ec40:	1dfb      	adds	r3, r7, #7
   1ec42:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1ec44:	230f      	movs	r3, #15
   1ec46:	18fc      	adds	r4, r7, r3
   1ec48:	1dfb      	adds	r3, r7, #7
   1ec4a:	781b      	ldrb	r3, [r3, #0]
   1ec4c:	0018      	movs	r0, r3
   1ec4e:	4b13      	ldr	r3, [pc, #76]	; (1ec9c <sd_mmc_check+0x64>)
   1ec50:	4798      	blx	r3
   1ec52:	0003      	movs	r3, r0
   1ec54:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1ec56:	230f      	movs	r3, #15
   1ec58:	18fb      	adds	r3, r7, r3
   1ec5a:	781b      	ldrb	r3, [r3, #0]
   1ec5c:	2b01      	cmp	r3, #1
   1ec5e:	d005      	beq.n	1ec6c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1ec60:	4b0f      	ldr	r3, [pc, #60]	; (1eca0 <sd_mmc_check+0x68>)
   1ec62:	4798      	blx	r3
		return sd_mmc_err;
   1ec64:	230f      	movs	r3, #15
   1ec66:	18fb      	adds	r3, r7, r3
   1ec68:	781b      	ldrb	r3, [r3, #0]
   1ec6a:	e012      	b.n	1ec92 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1ec6c:	4b0d      	ldr	r3, [pc, #52]	; (1eca4 <sd_mmc_check+0x6c>)
   1ec6e:	4798      	blx	r3
   1ec70:	1e03      	subs	r3, r0, #0
   1ec72:	d007      	beq.n	1ec84 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1ec74:	4b0c      	ldr	r3, [pc, #48]	; (1eca8 <sd_mmc_check+0x70>)
   1ec76:	681b      	ldr	r3, [r3, #0]
   1ec78:	2200      	movs	r2, #0
   1ec7a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1ec7c:	4b08      	ldr	r3, [pc, #32]	; (1eca0 <sd_mmc_check+0x68>)
   1ec7e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1ec80:	2301      	movs	r3, #1
   1ec82:	e006      	b.n	1ec92 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1ec84:	4b08      	ldr	r3, [pc, #32]	; (1eca8 <sd_mmc_check+0x70>)
   1ec86:	681b      	ldr	r3, [r3, #0]
   1ec88:	2203      	movs	r2, #3
   1ec8a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1ec8c:	4b04      	ldr	r3, [pc, #16]	; (1eca0 <sd_mmc_check+0x68>)
   1ec8e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1ec90:	2303      	movs	r3, #3
}
   1ec92:	0018      	movs	r0, r3
   1ec94:	46bd      	mov	sp, r7
   1ec96:	b005      	add	sp, #20
   1ec98:	bd90      	pop	{r4, r7, pc}
   1ec9a:	46c0      	nop			; (mov r8, r8)
   1ec9c:	0001e81d 	.word	0x0001e81d
   1eca0:	0001e919 	.word	0x0001e919
   1eca4:	0001e93d 	.word	0x0001e93d
   1eca8:	20004240 	.word	0x20004240

0001ecac <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1ecac:	b580      	push	{r7, lr}
   1ecae:	b082      	sub	sp, #8
   1ecb0:	af00      	add	r7, sp, #0
   1ecb2:	0002      	movs	r2, r0
   1ecb4:	1dfb      	adds	r3, r7, #7
   1ecb6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1ecb8:	1dfb      	adds	r3, r7, #7
   1ecba:	781b      	ldrb	r3, [r3, #0]
   1ecbc:	0018      	movs	r0, r3
   1ecbe:	4b07      	ldr	r3, [pc, #28]	; (1ecdc <sd_mmc_get_type+0x30>)
   1ecc0:	4798      	blx	r3
   1ecc2:	1e03      	subs	r3, r0, #0
   1ecc4:	d001      	beq.n	1ecca <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1ecc6:	2300      	movs	r3, #0
   1ecc8:	e004      	b.n	1ecd4 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1ecca:	4b05      	ldr	r3, [pc, #20]	; (1ece0 <sd_mmc_get_type+0x34>)
   1eccc:	4798      	blx	r3
	return sd_mmc_card->type;
   1ecce:	4b05      	ldr	r3, [pc, #20]	; (1ece4 <sd_mmc_get_type+0x38>)
   1ecd0:	681b      	ldr	r3, [r3, #0]
   1ecd2:	7adb      	ldrb	r3, [r3, #11]
}
   1ecd4:	0018      	movs	r0, r3
   1ecd6:	46bd      	mov	sp, r7
   1ecd8:	b002      	add	sp, #8
   1ecda:	bd80      	pop	{r7, pc}
   1ecdc:	0001e81d 	.word	0x0001e81d
   1ece0:	0001e919 	.word	0x0001e919
   1ece4:	20004240 	.word	0x20004240

0001ece8 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1ece8:	b580      	push	{r7, lr}
   1ecea:	b082      	sub	sp, #8
   1ecec:	af00      	add	r7, sp, #0
   1ecee:	0002      	movs	r2, r0
   1ecf0:	1dfb      	adds	r3, r7, #7
   1ecf2:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1ecf4:	1dfb      	adds	r3, r7, #7
   1ecf6:	781b      	ldrb	r3, [r3, #0]
   1ecf8:	0018      	movs	r0, r3
   1ecfa:	4b07      	ldr	r3, [pc, #28]	; (1ed18 <sd_mmc_get_capacity+0x30>)
   1ecfc:	4798      	blx	r3
   1ecfe:	1e03      	subs	r3, r0, #0
   1ed00:	d001      	beq.n	1ed06 <sd_mmc_get_capacity+0x1e>
		return 0;
   1ed02:	2300      	movs	r3, #0
   1ed04:	e004      	b.n	1ed10 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1ed06:	4b05      	ldr	r3, [pc, #20]	; (1ed1c <sd_mmc_get_capacity+0x34>)
   1ed08:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1ed0a:	4b05      	ldr	r3, [pc, #20]	; (1ed20 <sd_mmc_get_capacity+0x38>)
   1ed0c:	681b      	ldr	r3, [r3, #0]
   1ed0e:	685b      	ldr	r3, [r3, #4]
}
   1ed10:	0018      	movs	r0, r3
   1ed12:	46bd      	mov	sp, r7
   1ed14:	b002      	add	sp, #8
   1ed16:	bd80      	pop	{r7, pc}
   1ed18:	0001e81d 	.word	0x0001e81d
   1ed1c:	0001e919 	.word	0x0001e919
   1ed20:	20004240 	.word	0x20004240

0001ed24 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1ed24:	b580      	push	{r7, lr}
   1ed26:	b082      	sub	sp, #8
   1ed28:	af00      	add	r7, sp, #0
   1ed2a:	0002      	movs	r2, r0
   1ed2c:	1dfb      	adds	r3, r7, #7
   1ed2e:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1ed30:	2300      	movs	r3, #0
}
   1ed32:	0018      	movs	r0, r3
   1ed34:	46bd      	mov	sp, r7
   1ed36:	b002      	add	sp, #8
   1ed38:	bd80      	pop	{r7, pc}
	...

0001ed3c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1ed3c:	b590      	push	{r4, r7, lr}
   1ed3e:	b089      	sub	sp, #36	; 0x24
   1ed40:	af02      	add	r7, sp, #8
   1ed42:	6039      	str	r1, [r7, #0]
   1ed44:	0011      	movs	r1, r2
   1ed46:	1dfb      	adds	r3, r7, #7
   1ed48:	1c02      	adds	r2, r0, #0
   1ed4a:	701a      	strb	r2, [r3, #0]
   1ed4c:	1d3b      	adds	r3, r7, #4
   1ed4e:	1c0a      	adds	r2, r1, #0
   1ed50:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1ed52:	230f      	movs	r3, #15
   1ed54:	18fc      	adds	r4, r7, r3
   1ed56:	1dfb      	adds	r3, r7, #7
   1ed58:	781b      	ldrb	r3, [r3, #0]
   1ed5a:	0018      	movs	r0, r3
   1ed5c:	4b29      	ldr	r3, [pc, #164]	; (1ee04 <sd_mmc_init_read_blocks+0xc8>)
   1ed5e:	4798      	blx	r3
   1ed60:	0003      	movs	r3, r0
   1ed62:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1ed64:	230f      	movs	r3, #15
   1ed66:	18fb      	adds	r3, r7, r3
   1ed68:	781b      	ldrb	r3, [r3, #0]
   1ed6a:	2b00      	cmp	r3, #0
   1ed6c:	d003      	beq.n	1ed76 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1ed6e:	230f      	movs	r3, #15
   1ed70:	18fb      	adds	r3, r7, r3
   1ed72:	781b      	ldrb	r3, [r3, #0]
   1ed74:	e041      	b.n	1edfa <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1ed76:	4b24      	ldr	r3, [pc, #144]	; (1ee08 <sd_mmc_init_read_blocks+0xcc>)
   1ed78:	4798      	blx	r3
   1ed7a:	0003      	movs	r3, r0
   1ed7c:	001a      	movs	r2, r3
   1ed7e:	2301      	movs	r3, #1
   1ed80:	4053      	eors	r3, r2
   1ed82:	b2db      	uxtb	r3, r3
   1ed84:	2b00      	cmp	r3, #0
   1ed86:	d003      	beq.n	1ed90 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1ed88:	4b20      	ldr	r3, [pc, #128]	; (1ee0c <sd_mmc_init_read_blocks+0xd0>)
   1ed8a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1ed8c:	2305      	movs	r3, #5
   1ed8e:	e034      	b.n	1edfa <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1ed90:	1d3b      	adds	r3, r7, #4
   1ed92:	881b      	ldrh	r3, [r3, #0]
   1ed94:	2b01      	cmp	r3, #1
   1ed96:	d902      	bls.n	1ed9e <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1ed98:	4b1d      	ldr	r3, [pc, #116]	; (1ee10 <sd_mmc_init_read_blocks+0xd4>)
   1ed9a:	617b      	str	r3, [r7, #20]
   1ed9c:	e001      	b.n	1eda2 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1ed9e:	4b1d      	ldr	r3, [pc, #116]	; (1ee14 <sd_mmc_init_read_blocks+0xd8>)
   1eda0:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1eda2:	4b1d      	ldr	r3, [pc, #116]	; (1ee18 <sd_mmc_init_read_blocks+0xdc>)
   1eda4:	681b      	ldr	r3, [r3, #0]
   1eda6:	7adb      	ldrb	r3, [r3, #11]
   1eda8:	001a      	movs	r2, r3
   1edaa:	2308      	movs	r3, #8
   1edac:	4013      	ands	r3, r2
   1edae:	d002      	beq.n	1edb6 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1edb0:	683b      	ldr	r3, [r7, #0]
   1edb2:	613b      	str	r3, [r7, #16]
   1edb4:	e002      	b.n	1edbc <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1edb6:	683b      	ldr	r3, [r7, #0]
   1edb8:	025b      	lsls	r3, r3, #9
   1edba:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1edbc:	1d3b      	adds	r3, r7, #4
   1edbe:	881c      	ldrh	r4, [r3, #0]
   1edc0:	2380      	movs	r3, #128	; 0x80
   1edc2:	009a      	lsls	r2, r3, #2
   1edc4:	6939      	ldr	r1, [r7, #16]
   1edc6:	6978      	ldr	r0, [r7, #20]
   1edc8:	2301      	movs	r3, #1
   1edca:	9300      	str	r3, [sp, #0]
   1edcc:	0023      	movs	r3, r4
   1edce:	4c13      	ldr	r4, [pc, #76]	; (1ee1c <sd_mmc_init_read_blocks+0xe0>)
   1edd0:	47a0      	blx	r4
   1edd2:	0003      	movs	r3, r0
   1edd4:	001a      	movs	r2, r3
   1edd6:	2301      	movs	r3, #1
   1edd8:	4053      	eors	r3, r2
   1edda:	b2db      	uxtb	r3, r3
   1eddc:	2b00      	cmp	r3, #0
   1edde:	d003      	beq.n	1ede8 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1ede0:	4b0a      	ldr	r3, [pc, #40]	; (1ee0c <sd_mmc_init_read_blocks+0xd0>)
   1ede2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1ede4:	2305      	movs	r3, #5
   1ede6:	e008      	b.n	1edfa <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1ede8:	4b0d      	ldr	r3, [pc, #52]	; (1ee20 <sd_mmc_init_read_blocks+0xe4>)
   1edea:	1d3a      	adds	r2, r7, #4
   1edec:	8812      	ldrh	r2, [r2, #0]
   1edee:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1edf0:	4b0c      	ldr	r3, [pc, #48]	; (1ee24 <sd_mmc_init_read_blocks+0xe8>)
   1edf2:	1d3a      	adds	r2, r7, #4
   1edf4:	8812      	ldrh	r2, [r2, #0]
   1edf6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1edf8:	2300      	movs	r3, #0
}
   1edfa:	0018      	movs	r0, r3
   1edfc:	46bd      	mov	sp, r7
   1edfe:	b007      	add	sp, #28
   1ee00:	bd90      	pop	{r4, r7, pc}
   1ee02:	46c0      	nop			; (mov r8, r8)
   1ee04:	0001e81d 	.word	0x0001e81d
   1ee08:	0001e6b9 	.word	0x0001e6b9
   1ee0c:	0001e919 	.word	0x0001e919
   1ee10:	00101112 	.word	0x00101112
   1ee14:	00081111 	.word	0x00081111
   1ee18:	20004240 	.word	0x20004240
   1ee1c:	0001fb99 	.word	0x0001fb99
   1ee20:	20004246 	.word	0x20004246
   1ee24:	20004244 	.word	0x20004244

0001ee28 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1ee28:	b580      	push	{r7, lr}
   1ee2a:	b082      	sub	sp, #8
   1ee2c:	af00      	add	r7, sp, #0
   1ee2e:	6078      	str	r0, [r7, #4]
   1ee30:	000a      	movs	r2, r1
   1ee32:	1cbb      	adds	r3, r7, #2
   1ee34:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1ee36:	1cbb      	adds	r3, r7, #2
   1ee38:	881a      	ldrh	r2, [r3, #0]
   1ee3a:	687b      	ldr	r3, [r7, #4]
   1ee3c:	0011      	movs	r1, r2
   1ee3e:	0018      	movs	r0, r3
   1ee40:	4b0d      	ldr	r3, [pc, #52]	; (1ee78 <sd_mmc_start_read_blocks+0x50>)
   1ee42:	4798      	blx	r3
   1ee44:	0003      	movs	r3, r0
   1ee46:	001a      	movs	r2, r3
   1ee48:	2301      	movs	r3, #1
   1ee4a:	4053      	eors	r3, r2
   1ee4c:	b2db      	uxtb	r3, r3
   1ee4e:	2b00      	cmp	r3, #0
   1ee50:	d004      	beq.n	1ee5c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1ee52:	4b0a      	ldr	r3, [pc, #40]	; (1ee7c <sd_mmc_start_read_blocks+0x54>)
   1ee54:	2200      	movs	r2, #0
   1ee56:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1ee58:	2305      	movs	r3, #5
   1ee5a:	e008      	b.n	1ee6e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1ee5c:	4b07      	ldr	r3, [pc, #28]	; (1ee7c <sd_mmc_start_read_blocks+0x54>)
   1ee5e:	881a      	ldrh	r2, [r3, #0]
   1ee60:	1cbb      	adds	r3, r7, #2
   1ee62:	881b      	ldrh	r3, [r3, #0]
   1ee64:	1ad3      	subs	r3, r2, r3
   1ee66:	b29a      	uxth	r2, r3
   1ee68:	4b04      	ldr	r3, [pc, #16]	; (1ee7c <sd_mmc_start_read_blocks+0x54>)
   1ee6a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1ee6c:	2300      	movs	r3, #0
}
   1ee6e:	0018      	movs	r0, r3
   1ee70:	46bd      	mov	sp, r7
   1ee72:	b002      	add	sp, #8
   1ee74:	bd80      	pop	{r7, pc}
   1ee76:	46c0      	nop			; (mov r8, r8)
   1ee78:	0001fe69 	.word	0x0001fe69
   1ee7c:	20004246 	.word	0x20004246

0001ee80 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1ee80:	b580      	push	{r7, lr}
   1ee82:	b082      	sub	sp, #8
   1ee84:	af00      	add	r7, sp, #0
   1ee86:	0002      	movs	r2, r0
   1ee88:	1dfb      	adds	r3, r7, #7
   1ee8a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1ee8c:	4b1c      	ldr	r3, [pc, #112]	; (1ef00 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1ee8e:	4798      	blx	r3
   1ee90:	0003      	movs	r3, r0
   1ee92:	001a      	movs	r2, r3
   1ee94:	2301      	movs	r3, #1
   1ee96:	4053      	eors	r3, r2
   1ee98:	b2db      	uxtb	r3, r3
   1ee9a:	2b00      	cmp	r3, #0
   1ee9c:	d001      	beq.n	1eea2 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1ee9e:	2305      	movs	r3, #5
   1eea0:	e029      	b.n	1eef6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1eea2:	1dfb      	adds	r3, r7, #7
   1eea4:	781b      	ldrb	r3, [r3, #0]
   1eea6:	2b00      	cmp	r3, #0
   1eea8:	d003      	beq.n	1eeb2 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1eeaa:	4b16      	ldr	r3, [pc, #88]	; (1ef04 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1eeac:	2200      	movs	r2, #0
   1eeae:	801a      	strh	r2, [r3, #0]
   1eeb0:	e005      	b.n	1eebe <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1eeb2:	4b14      	ldr	r3, [pc, #80]	; (1ef04 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1eeb4:	881b      	ldrh	r3, [r3, #0]
   1eeb6:	2b00      	cmp	r3, #0
   1eeb8:	d001      	beq.n	1eebe <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1eeba:	2300      	movs	r3, #0
   1eebc:	e01b      	b.n	1eef6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1eebe:	4b12      	ldr	r3, [pc, #72]	; (1ef08 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1eec0:	881b      	ldrh	r3, [r3, #0]
   1eec2:	2b01      	cmp	r3, #1
   1eec4:	d103      	bne.n	1eece <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1eec6:	4b11      	ldr	r3, [pc, #68]	; (1ef0c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1eec8:	4798      	blx	r3
		return SD_MMC_OK;
   1eeca:	2300      	movs	r3, #0
   1eecc:	e013      	b.n	1eef6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1eece:	4b10      	ldr	r3, [pc, #64]	; (1ef10 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1eed0:	2100      	movs	r1, #0
   1eed2:	0018      	movs	r0, r3
   1eed4:	4b0f      	ldr	r3, [pc, #60]	; (1ef14 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1eed6:	4798      	blx	r3
   1eed8:	0003      	movs	r3, r0
   1eeda:	001a      	movs	r2, r3
   1eedc:	2301      	movs	r3, #1
   1eede:	4053      	eors	r3, r2
   1eee0:	b2db      	uxtb	r3, r3
   1eee2:	2b00      	cmp	r3, #0
   1eee4:	d004      	beq.n	1eef0 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1eee6:	4b0a      	ldr	r3, [pc, #40]	; (1ef10 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1eee8:	2100      	movs	r1, #0
   1eeea:	0018      	movs	r0, r3
   1eeec:	4b09      	ldr	r3, [pc, #36]	; (1ef14 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1eeee:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1eef0:	4b06      	ldr	r3, [pc, #24]	; (1ef0c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1eef2:	4798      	blx	r3
	return SD_MMC_OK;
   1eef4:	2300      	movs	r3, #0
}
   1eef6:	0018      	movs	r0, r3
   1eef8:	46bd      	mov	sp, r7
   1eefa:	b002      	add	sp, #8
   1eefc:	bd80      	pop	{r7, pc}
   1eefe:	46c0      	nop			; (mov r8, r8)
   1ef00:	0001ff0d 	.word	0x0001ff0d
   1ef04:	20004246 	.word	0x20004246
   1ef08:	20004244 	.word	0x20004244
   1ef0c:	0001e919 	.word	0x0001e919
   1ef10:	0000310c 	.word	0x0000310c
   1ef14:	0001fb71 	.word	0x0001fb71

0001ef18 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1ef18:	b590      	push	{r4, r7, lr}
   1ef1a:	b089      	sub	sp, #36	; 0x24
   1ef1c:	af02      	add	r7, sp, #8
   1ef1e:	6039      	str	r1, [r7, #0]
   1ef20:	0011      	movs	r1, r2
   1ef22:	1dfb      	adds	r3, r7, #7
   1ef24:	1c02      	adds	r2, r0, #0
   1ef26:	701a      	strb	r2, [r3, #0]
   1ef28:	1d3b      	adds	r3, r7, #4
   1ef2a:	1c0a      	adds	r2, r1, #0
   1ef2c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1ef2e:	230f      	movs	r3, #15
   1ef30:	18fc      	adds	r4, r7, r3
   1ef32:	1dfb      	adds	r3, r7, #7
   1ef34:	781b      	ldrb	r3, [r3, #0]
   1ef36:	0018      	movs	r0, r3
   1ef38:	4b28      	ldr	r3, [pc, #160]	; (1efdc <sd_mmc_init_write_blocks+0xc4>)
   1ef3a:	4798      	blx	r3
   1ef3c:	0003      	movs	r3, r0
   1ef3e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1ef40:	230f      	movs	r3, #15
   1ef42:	18fb      	adds	r3, r7, r3
   1ef44:	781b      	ldrb	r3, [r3, #0]
   1ef46:	2b00      	cmp	r3, #0
   1ef48:	d003      	beq.n	1ef52 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1ef4a:	230f      	movs	r3, #15
   1ef4c:	18fb      	adds	r3, r7, r3
   1ef4e:	781b      	ldrb	r3, [r3, #0]
   1ef50:	e03f      	b.n	1efd2 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1ef52:	1dfb      	adds	r3, r7, #7
   1ef54:	781b      	ldrb	r3, [r3, #0]
   1ef56:	0018      	movs	r0, r3
   1ef58:	4b21      	ldr	r3, [pc, #132]	; (1efe0 <sd_mmc_init_write_blocks+0xc8>)
   1ef5a:	4798      	blx	r3
   1ef5c:	1e03      	subs	r3, r0, #0
   1ef5e:	d003      	beq.n	1ef68 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1ef60:	4b20      	ldr	r3, [pc, #128]	; (1efe4 <sd_mmc_init_write_blocks+0xcc>)
   1ef62:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1ef64:	2307      	movs	r3, #7
   1ef66:	e034      	b.n	1efd2 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1ef68:	1d3b      	adds	r3, r7, #4
   1ef6a:	881b      	ldrh	r3, [r3, #0]
   1ef6c:	2b01      	cmp	r3, #1
   1ef6e:	d902      	bls.n	1ef76 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1ef70:	4b1d      	ldr	r3, [pc, #116]	; (1efe8 <sd_mmc_init_write_blocks+0xd0>)
   1ef72:	617b      	str	r3, [r7, #20]
   1ef74:	e001      	b.n	1ef7a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1ef76:	4b1d      	ldr	r3, [pc, #116]	; (1efec <sd_mmc_init_write_blocks+0xd4>)
   1ef78:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1ef7a:	4b1d      	ldr	r3, [pc, #116]	; (1eff0 <sd_mmc_init_write_blocks+0xd8>)
   1ef7c:	681b      	ldr	r3, [r3, #0]
   1ef7e:	7adb      	ldrb	r3, [r3, #11]
   1ef80:	001a      	movs	r2, r3
   1ef82:	2308      	movs	r3, #8
   1ef84:	4013      	ands	r3, r2
   1ef86:	d002      	beq.n	1ef8e <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1ef88:	683b      	ldr	r3, [r7, #0]
   1ef8a:	613b      	str	r3, [r7, #16]
   1ef8c:	e002      	b.n	1ef94 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1ef8e:	683b      	ldr	r3, [r7, #0]
   1ef90:	025b      	lsls	r3, r3, #9
   1ef92:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1ef94:	1d3b      	adds	r3, r7, #4
   1ef96:	881c      	ldrh	r4, [r3, #0]
   1ef98:	2380      	movs	r3, #128	; 0x80
   1ef9a:	009a      	lsls	r2, r3, #2
   1ef9c:	6939      	ldr	r1, [r7, #16]
   1ef9e:	6978      	ldr	r0, [r7, #20]
   1efa0:	2301      	movs	r3, #1
   1efa2:	9300      	str	r3, [sp, #0]
   1efa4:	0023      	movs	r3, r4
   1efa6:	4c13      	ldr	r4, [pc, #76]	; (1eff4 <sd_mmc_init_write_blocks+0xdc>)
   1efa8:	47a0      	blx	r4
   1efaa:	0003      	movs	r3, r0
   1efac:	001a      	movs	r2, r3
   1efae:	2301      	movs	r3, #1
   1efb0:	4053      	eors	r3, r2
   1efb2:	b2db      	uxtb	r3, r3
   1efb4:	2b00      	cmp	r3, #0
   1efb6:	d003      	beq.n	1efc0 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1efb8:	4b0a      	ldr	r3, [pc, #40]	; (1efe4 <sd_mmc_init_write_blocks+0xcc>)
   1efba:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1efbc:	2305      	movs	r3, #5
   1efbe:	e008      	b.n	1efd2 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1efc0:	4b0d      	ldr	r3, [pc, #52]	; (1eff8 <sd_mmc_init_write_blocks+0xe0>)
   1efc2:	1d3a      	adds	r2, r7, #4
   1efc4:	8812      	ldrh	r2, [r2, #0]
   1efc6:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1efc8:	4b0c      	ldr	r3, [pc, #48]	; (1effc <sd_mmc_init_write_blocks+0xe4>)
   1efca:	1d3a      	adds	r2, r7, #4
   1efcc:	8812      	ldrh	r2, [r2, #0]
   1efce:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1efd0:	2300      	movs	r3, #0
}
   1efd2:	0018      	movs	r0, r3
   1efd4:	46bd      	mov	sp, r7
   1efd6:	b007      	add	sp, #28
   1efd8:	bd90      	pop	{r4, r7, pc}
   1efda:	46c0      	nop			; (mov r8, r8)
   1efdc:	0001e81d 	.word	0x0001e81d
   1efe0:	0001ed25 	.word	0x0001ed25
   1efe4:	0001e919 	.word	0x0001e919
   1efe8:	00109119 	.word	0x00109119
   1efec:	00089118 	.word	0x00089118
   1eff0:	20004240 	.word	0x20004240
   1eff4:	0001fb99 	.word	0x0001fb99
   1eff8:	20004246 	.word	0x20004246
   1effc:	20004244 	.word	0x20004244

0001f000 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1f000:	b580      	push	{r7, lr}
   1f002:	b082      	sub	sp, #8
   1f004:	af00      	add	r7, sp, #0
   1f006:	6078      	str	r0, [r7, #4]
   1f008:	000a      	movs	r2, r1
   1f00a:	1cbb      	adds	r3, r7, #2
   1f00c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1f00e:	1cbb      	adds	r3, r7, #2
   1f010:	881a      	ldrh	r2, [r3, #0]
   1f012:	687b      	ldr	r3, [r7, #4]
   1f014:	0011      	movs	r1, r2
   1f016:	0018      	movs	r0, r3
   1f018:	4b0d      	ldr	r3, [pc, #52]	; (1f050 <sd_mmc_start_write_blocks+0x50>)
   1f01a:	4798      	blx	r3
   1f01c:	0003      	movs	r3, r0
   1f01e:	001a      	movs	r2, r3
   1f020:	2301      	movs	r3, #1
   1f022:	4053      	eors	r3, r2
   1f024:	b2db      	uxtb	r3, r3
   1f026:	2b00      	cmp	r3, #0
   1f028:	d004      	beq.n	1f034 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1f02a:	4b0a      	ldr	r3, [pc, #40]	; (1f054 <sd_mmc_start_write_blocks+0x54>)
   1f02c:	2200      	movs	r2, #0
   1f02e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1f030:	2305      	movs	r3, #5
   1f032:	e008      	b.n	1f046 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1f034:	4b07      	ldr	r3, [pc, #28]	; (1f054 <sd_mmc_start_write_blocks+0x54>)
   1f036:	881a      	ldrh	r2, [r3, #0]
   1f038:	1cbb      	adds	r3, r7, #2
   1f03a:	881b      	ldrh	r3, [r3, #0]
   1f03c:	1ad3      	subs	r3, r2, r3
   1f03e:	b29a      	uxth	r2, r3
   1f040:	4b04      	ldr	r3, [pc, #16]	; (1f054 <sd_mmc_start_write_blocks+0x54>)
   1f042:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f044:	2300      	movs	r3, #0
}
   1f046:	0018      	movs	r0, r3
   1f048:	46bd      	mov	sp, r7
   1f04a:	b002      	add	sp, #8
   1f04c:	bd80      	pop	{r7, pc}
   1f04e:	46c0      	nop			; (mov r8, r8)
   1f050:	0001ff19 	.word	0x0001ff19
   1f054:	20004246 	.word	0x20004246

0001f058 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1f058:	b580      	push	{r7, lr}
   1f05a:	b082      	sub	sp, #8
   1f05c:	af00      	add	r7, sp, #0
   1f05e:	0002      	movs	r2, r0
   1f060:	1dfb      	adds	r3, r7, #7
   1f062:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1f064:	4b13      	ldr	r3, [pc, #76]	; (1f0b4 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1f066:	4798      	blx	r3
   1f068:	0003      	movs	r3, r0
   1f06a:	001a      	movs	r2, r3
   1f06c:	2301      	movs	r3, #1
   1f06e:	4053      	eors	r3, r2
   1f070:	b2db      	uxtb	r3, r3
   1f072:	2b00      	cmp	r3, #0
   1f074:	d001      	beq.n	1f07a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1f076:	2305      	movs	r3, #5
   1f078:	e018      	b.n	1f0ac <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1f07a:	1dfb      	adds	r3, r7, #7
   1f07c:	781b      	ldrb	r3, [r3, #0]
   1f07e:	2b00      	cmp	r3, #0
   1f080:	d003      	beq.n	1f08a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1f082:	4b0d      	ldr	r3, [pc, #52]	; (1f0b8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1f084:	2200      	movs	r2, #0
   1f086:	801a      	strh	r2, [r3, #0]
   1f088:	e005      	b.n	1f096 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1f08a:	4b0b      	ldr	r3, [pc, #44]	; (1f0b8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1f08c:	881b      	ldrh	r3, [r3, #0]
   1f08e:	2b00      	cmp	r3, #0
   1f090:	d001      	beq.n	1f096 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1f092:	2300      	movs	r3, #0
   1f094:	e00a      	b.n	1f0ac <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1f096:	4b09      	ldr	r3, [pc, #36]	; (1f0bc <sd_mmc_wait_end_of_write_blocks+0x64>)
   1f098:	881b      	ldrh	r3, [r3, #0]
   1f09a:	2b01      	cmp	r3, #1
   1f09c:	d103      	bne.n	1f0a6 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1f09e:	4b08      	ldr	r3, [pc, #32]	; (1f0c0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1f0a0:	4798      	blx	r3
		return SD_MMC_OK;
   1f0a2:	2300      	movs	r3, #0
   1f0a4:	e002      	b.n	1f0ac <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1f0a6:	4b06      	ldr	r3, [pc, #24]	; (1f0c0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1f0a8:	4798      	blx	r3
	return SD_MMC_OK;
   1f0aa:	2300      	movs	r3, #0
}
   1f0ac:	0018      	movs	r0, r3
   1f0ae:	46bd      	mov	sp, r7
   1f0b0:	b002      	add	sp, #8
   1f0b2:	bd80      	pop	{r7, pc}
   1f0b4:	0001ffd9 	.word	0x0001ffd9
   1f0b8:	20004246 	.word	0x20004246
   1f0bc:	20004244 	.word	0x20004244
   1f0c0:	0001e919 	.word	0x0001e919

0001f0c4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1f0c4:	b580      	push	{r7, lr}
   1f0c6:	b082      	sub	sp, #8
   1f0c8:	af00      	add	r7, sp, #0
   1f0ca:	0002      	movs	r2, r0
   1f0cc:	1dfb      	adds	r3, r7, #7
   1f0ce:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1f0d0:	1dfb      	adds	r3, r7, #7
   1f0d2:	781b      	ldrb	r3, [r3, #0]
   1f0d4:	0018      	movs	r0, r3
   1f0d6:	4b16      	ldr	r3, [pc, #88]	; (1f130 <sd_mmc_test_unit_ready+0x6c>)
   1f0d8:	4798      	blx	r3
   1f0da:	0003      	movs	r3, r0
   1f0dc:	2b01      	cmp	r3, #1
   1f0de:	d019      	beq.n	1f114 <sd_mmc_test_unit_ready+0x50>
   1f0e0:	2b02      	cmp	r3, #2
   1f0e2:	d019      	beq.n	1f118 <sd_mmc_test_unit_ready+0x54>
   1f0e4:	2b00      	cmp	r3, #0
   1f0e6:	d11e      	bne.n	1f126 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1f0e8:	1dfb      	adds	r3, r7, #7
   1f0ea:	781b      	ldrb	r3, [r3, #0]
   1f0ec:	4a11      	ldr	r2, [pc, #68]	; (1f134 <sd_mmc_test_unit_ready+0x70>)
   1f0ee:	5cd3      	ldrb	r3, [r2, r3]
   1f0f0:	2b00      	cmp	r3, #0
   1f0f2:	d001      	beq.n	1f0f8 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1f0f4:	2302      	movs	r3, #2
   1f0f6:	e017      	b.n	1f128 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1f0f8:	1dfb      	adds	r3, r7, #7
   1f0fa:	781b      	ldrb	r3, [r3, #0]
   1f0fc:	0018      	movs	r0, r3
   1f0fe:	4b0e      	ldr	r3, [pc, #56]	; (1f138 <sd_mmc_test_unit_ready+0x74>)
   1f100:	4798      	blx	r3
   1f102:	0003      	movs	r3, r0
   1f104:	001a      	movs	r2, r3
   1f106:	2303      	movs	r3, #3
   1f108:	4013      	ands	r3, r2
   1f10a:	d001      	beq.n	1f110 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1f10c:	2300      	movs	r3, #0
   1f10e:	e00b      	b.n	1f128 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1f110:	2302      	movs	r3, #2
   1f112:	e009      	b.n	1f128 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1f114:	2303      	movs	r3, #3
   1f116:	e007      	b.n	1f128 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1f118:	1dfb      	adds	r3, r7, #7
   1f11a:	781b      	ldrb	r3, [r3, #0]
   1f11c:	4a05      	ldr	r2, [pc, #20]	; (1f134 <sd_mmc_test_unit_ready+0x70>)
   1f11e:	2100      	movs	r1, #0
   1f120:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1f122:	2302      	movs	r3, #2
   1f124:	e000      	b.n	1f128 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1f126:	2301      	movs	r3, #1
	}
}
   1f128:	0018      	movs	r0, r3
   1f12a:	46bd      	mov	sp, r7
   1f12c:	b002      	add	sp, #8
   1f12e:	bd80      	pop	{r7, pc}
   1f130:	0001ec39 	.word	0x0001ec39
   1f134:	20004248 	.word	0x20004248
   1f138:	0001ecad 	.word	0x0001ecad

0001f13c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1f13c:	b580      	push	{r7, lr}
   1f13e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1f140:	2000      	movs	r0, #0
   1f142:	4b03      	ldr	r3, [pc, #12]	; (1f150 <sd_mmc_test_unit_ready_0+0x14>)
   1f144:	4798      	blx	r3
   1f146:	0003      	movs	r3, r0
}
   1f148:	0018      	movs	r0, r3
   1f14a:	46bd      	mov	sp, r7
   1f14c:	bd80      	pop	{r7, pc}
   1f14e:	46c0      	nop			; (mov r8, r8)
   1f150:	0001f0c5 	.word	0x0001f0c5

0001f154 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1f154:	b580      	push	{r7, lr}
   1f156:	b082      	sub	sp, #8
   1f158:	af00      	add	r7, sp, #0
   1f15a:	0002      	movs	r2, r0
   1f15c:	6039      	str	r1, [r7, #0]
   1f15e:	1dfb      	adds	r3, r7, #7
   1f160:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1f162:	1dfb      	adds	r3, r7, #7
   1f164:	781b      	ldrb	r3, [r3, #0]
   1f166:	0018      	movs	r0, r3
   1f168:	4b08      	ldr	r3, [pc, #32]	; (1f18c <sd_mmc_read_capacity+0x38>)
   1f16a:	4798      	blx	r3
   1f16c:	0003      	movs	r3, r0
   1f16e:	005b      	lsls	r3, r3, #1
   1f170:	1e5a      	subs	r2, r3, #1
   1f172:	683b      	ldr	r3, [r7, #0]
   1f174:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1f176:	1dfb      	adds	r3, r7, #7
   1f178:	781b      	ldrb	r3, [r3, #0]
   1f17a:	0018      	movs	r0, r3
   1f17c:	4b04      	ldr	r3, [pc, #16]	; (1f190 <sd_mmc_read_capacity+0x3c>)
   1f17e:	4798      	blx	r3
   1f180:	0003      	movs	r3, r0
}
   1f182:	0018      	movs	r0, r3
   1f184:	46bd      	mov	sp, r7
   1f186:	b002      	add	sp, #8
   1f188:	bd80      	pop	{r7, pc}
   1f18a:	46c0      	nop			; (mov r8, r8)
   1f18c:	0001ece9 	.word	0x0001ece9
   1f190:	0001f0c5 	.word	0x0001f0c5

0001f194 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1f194:	b580      	push	{r7, lr}
   1f196:	b082      	sub	sp, #8
   1f198:	af00      	add	r7, sp, #0
   1f19a:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1f19c:	687b      	ldr	r3, [r7, #4]
   1f19e:	0019      	movs	r1, r3
   1f1a0:	2000      	movs	r0, #0
   1f1a2:	4b03      	ldr	r3, [pc, #12]	; (1f1b0 <sd_mmc_read_capacity_0+0x1c>)
   1f1a4:	4798      	blx	r3
   1f1a6:	0003      	movs	r3, r0
}
   1f1a8:	0018      	movs	r0, r3
   1f1aa:	46bd      	mov	sp, r7
   1f1ac:	b002      	add	sp, #8
   1f1ae:	bd80      	pop	{r7, pc}
   1f1b0:	0001f155 	.word	0x0001f155

0001f1b4 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1f1b4:	b580      	push	{r7, lr}
   1f1b6:	b082      	sub	sp, #8
   1f1b8:	af00      	add	r7, sp, #0
   1f1ba:	0002      	movs	r2, r0
   1f1bc:	1dfb      	adds	r3, r7, #7
   1f1be:	701a      	strb	r2, [r3, #0]
   1f1c0:	1dbb      	adds	r3, r7, #6
   1f1c2:	1c0a      	adds	r2, r1, #0
   1f1c4:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1f1c6:	1dfb      	adds	r3, r7, #7
   1f1c8:	781b      	ldrb	r3, [r3, #0]
   1f1ca:	4a04      	ldr	r2, [pc, #16]	; (1f1dc <sd_mmc_unload+0x28>)
   1f1cc:	1db9      	adds	r1, r7, #6
   1f1ce:	7809      	ldrb	r1, [r1, #0]
   1f1d0:	54d1      	strb	r1, [r2, r3]
	return true;
   1f1d2:	2301      	movs	r3, #1
}
   1f1d4:	0018      	movs	r0, r3
   1f1d6:	46bd      	mov	sp, r7
   1f1d8:	b002      	add	sp, #8
   1f1da:	bd80      	pop	{r7, pc}
   1f1dc:	20004248 	.word	0x20004248

0001f1e0 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1f1e0:	b580      	push	{r7, lr}
   1f1e2:	b082      	sub	sp, #8
   1f1e4:	af00      	add	r7, sp, #0
   1f1e6:	0002      	movs	r2, r0
   1f1e8:	1dfb      	adds	r3, r7, #7
   1f1ea:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1f1ec:	1dfb      	adds	r3, r7, #7
   1f1ee:	781b      	ldrb	r3, [r3, #0]
   1f1f0:	0019      	movs	r1, r3
   1f1f2:	2000      	movs	r0, #0
   1f1f4:	4b03      	ldr	r3, [pc, #12]	; (1f204 <sd_mmc_unload_0+0x24>)
   1f1f6:	4798      	blx	r3
   1f1f8:	0003      	movs	r3, r0
}
   1f1fa:	0018      	movs	r0, r3
   1f1fc:	46bd      	mov	sp, r7
   1f1fe:	b002      	add	sp, #8
   1f200:	bd80      	pop	{r7, pc}
   1f202:	46c0      	nop			; (mov r8, r8)
   1f204:	0001f1b5 	.word	0x0001f1b5

0001f208 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1f208:	b580      	push	{r7, lr}
   1f20a:	b082      	sub	sp, #8
   1f20c:	af00      	add	r7, sp, #0
   1f20e:	0002      	movs	r2, r0
   1f210:	1dfb      	adds	r3, r7, #7
   1f212:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1f214:	1dfb      	adds	r3, r7, #7
   1f216:	781b      	ldrb	r3, [r3, #0]
   1f218:	0018      	movs	r0, r3
   1f21a:	4b03      	ldr	r3, [pc, #12]	; (1f228 <sd_mmc_wr_protect+0x20>)
   1f21c:	4798      	blx	r3
   1f21e:	0003      	movs	r3, r0
}
   1f220:	0018      	movs	r0, r3
   1f222:	46bd      	mov	sp, r7
   1f224:	b002      	add	sp, #8
   1f226:	bd80      	pop	{r7, pc}
   1f228:	0001ed25 	.word	0x0001ed25

0001f22c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1f22c:	b580      	push	{r7, lr}
   1f22e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1f230:	2000      	movs	r0, #0
   1f232:	4b03      	ldr	r3, [pc, #12]	; (1f240 <sd_mmc_wr_protect_0+0x14>)
   1f234:	4798      	blx	r3
   1f236:	0003      	movs	r3, r0
}
   1f238:	0018      	movs	r0, r3
   1f23a:	46bd      	mov	sp, r7
   1f23c:	bd80      	pop	{r7, pc}
   1f23e:	46c0      	nop			; (mov r8, r8)
   1f240:	0001f209 	.word	0x0001f209

0001f244 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1f244:	b580      	push	{r7, lr}
   1f246:	b082      	sub	sp, #8
   1f248:	af00      	add	r7, sp, #0
   1f24a:	0002      	movs	r2, r0
   1f24c:	1dfb      	adds	r3, r7, #7
   1f24e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1f250:	2301      	movs	r3, #1
}
   1f252:	0018      	movs	r0, r3
   1f254:	46bd      	mov	sp, r7
   1f256:	b002      	add	sp, #8
   1f258:	bd80      	pop	{r7, pc}
	...

0001f25c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1f25c:	b580      	push	{r7, lr}
   1f25e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1f260:	2000      	movs	r0, #0
   1f262:	4b03      	ldr	r3, [pc, #12]	; (1f270 <sd_mmc_removal_0+0x14>)
   1f264:	4798      	blx	r3
   1f266:	0003      	movs	r3, r0
}
   1f268:	0018      	movs	r0, r3
   1f26a:	46bd      	mov	sp, r7
   1f26c:	bd80      	pop	{r7, pc}
   1f26e:	46c0      	nop			; (mov r8, r8)
   1f270:	0001f245 	.word	0x0001f245

0001f274 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1f274:	b580      	push	{r7, lr}
   1f276:	b084      	sub	sp, #16
   1f278:	af00      	add	r7, sp, #0
   1f27a:	60b9      	str	r1, [r7, #8]
   1f27c:	607a      	str	r2, [r7, #4]
   1f27e:	230f      	movs	r3, #15
   1f280:	18fb      	adds	r3, r7, r3
   1f282:	1c02      	adds	r2, r0, #0
   1f284:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1f286:	68b9      	ldr	r1, [r7, #8]
   1f288:	230f      	movs	r3, #15
   1f28a:	18fb      	adds	r3, r7, r3
   1f28c:	781b      	ldrb	r3, [r3, #0]
   1f28e:	2201      	movs	r2, #1
   1f290:	0018      	movs	r0, r3
   1f292:	4b10      	ldr	r3, [pc, #64]	; (1f2d4 <sd_mmc_mem_2_ram+0x60>)
   1f294:	4798      	blx	r3
   1f296:	1e03      	subs	r3, r0, #0
   1f298:	d005      	beq.n	1f2a6 <sd_mmc_mem_2_ram+0x32>
   1f29a:	2b02      	cmp	r3, #2
   1f29c:	d101      	bne.n	1f2a2 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1f29e:	2302      	movs	r3, #2
   1f2a0:	e013      	b.n	1f2ca <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1f2a2:	2301      	movs	r3, #1
   1f2a4:	e011      	b.n	1f2ca <sd_mmc_mem_2_ram+0x56>
		break;
   1f2a6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1f2a8:	687b      	ldr	r3, [r7, #4]
   1f2aa:	2101      	movs	r1, #1
   1f2ac:	0018      	movs	r0, r3
   1f2ae:	4b0a      	ldr	r3, [pc, #40]	; (1f2d8 <sd_mmc_mem_2_ram+0x64>)
   1f2b0:	4798      	blx	r3
   1f2b2:	1e03      	subs	r3, r0, #0
   1f2b4:	d001      	beq.n	1f2ba <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1f2b6:	2301      	movs	r3, #1
   1f2b8:	e007      	b.n	1f2ca <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1f2ba:	2000      	movs	r0, #0
   1f2bc:	4b07      	ldr	r3, [pc, #28]	; (1f2dc <sd_mmc_mem_2_ram+0x68>)
   1f2be:	4798      	blx	r3
   1f2c0:	1e03      	subs	r3, r0, #0
   1f2c2:	d001      	beq.n	1f2c8 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1f2c4:	2301      	movs	r3, #1
   1f2c6:	e000      	b.n	1f2ca <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1f2c8:	2300      	movs	r3, #0
}
   1f2ca:	0018      	movs	r0, r3
   1f2cc:	46bd      	mov	sp, r7
   1f2ce:	b004      	add	sp, #16
   1f2d0:	bd80      	pop	{r7, pc}
   1f2d2:	46c0      	nop			; (mov r8, r8)
   1f2d4:	0001ed3d 	.word	0x0001ed3d
   1f2d8:	0001ee29 	.word	0x0001ee29
   1f2dc:	0001ee81 	.word	0x0001ee81

0001f2e0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1f2e0:	b580      	push	{r7, lr}
   1f2e2:	b082      	sub	sp, #8
   1f2e4:	af00      	add	r7, sp, #0
   1f2e6:	6078      	str	r0, [r7, #4]
   1f2e8:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1f2ea:	683a      	ldr	r2, [r7, #0]
   1f2ec:	687b      	ldr	r3, [r7, #4]
   1f2ee:	0019      	movs	r1, r3
   1f2f0:	2000      	movs	r0, #0
   1f2f2:	4b03      	ldr	r3, [pc, #12]	; (1f300 <sd_mmc_mem_2_ram_0+0x20>)
   1f2f4:	4798      	blx	r3
   1f2f6:	0003      	movs	r3, r0
}
   1f2f8:	0018      	movs	r0, r3
   1f2fa:	46bd      	mov	sp, r7
   1f2fc:	b002      	add	sp, #8
   1f2fe:	bd80      	pop	{r7, pc}
   1f300:	0001f275 	.word	0x0001f275

0001f304 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1f304:	b580      	push	{r7, lr}
   1f306:	b084      	sub	sp, #16
   1f308:	af00      	add	r7, sp, #0
   1f30a:	60b9      	str	r1, [r7, #8]
   1f30c:	607a      	str	r2, [r7, #4]
   1f30e:	230f      	movs	r3, #15
   1f310:	18fb      	adds	r3, r7, r3
   1f312:	1c02      	adds	r2, r0, #0
   1f314:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1f316:	68b9      	ldr	r1, [r7, #8]
   1f318:	230f      	movs	r3, #15
   1f31a:	18fb      	adds	r3, r7, r3
   1f31c:	781b      	ldrb	r3, [r3, #0]
   1f31e:	2201      	movs	r2, #1
   1f320:	0018      	movs	r0, r3
   1f322:	4b10      	ldr	r3, [pc, #64]	; (1f364 <sd_mmc_ram_2_mem+0x60>)
   1f324:	4798      	blx	r3
   1f326:	1e03      	subs	r3, r0, #0
   1f328:	d005      	beq.n	1f336 <sd_mmc_ram_2_mem+0x32>
   1f32a:	2b02      	cmp	r3, #2
   1f32c:	d101      	bne.n	1f332 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1f32e:	2302      	movs	r3, #2
   1f330:	e013      	b.n	1f35a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1f332:	2301      	movs	r3, #1
   1f334:	e011      	b.n	1f35a <sd_mmc_ram_2_mem+0x56>
		break;
   1f336:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1f338:	687b      	ldr	r3, [r7, #4]
   1f33a:	2101      	movs	r1, #1
   1f33c:	0018      	movs	r0, r3
   1f33e:	4b0a      	ldr	r3, [pc, #40]	; (1f368 <sd_mmc_ram_2_mem+0x64>)
   1f340:	4798      	blx	r3
   1f342:	1e03      	subs	r3, r0, #0
   1f344:	d001      	beq.n	1f34a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1f346:	2301      	movs	r3, #1
   1f348:	e007      	b.n	1f35a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1f34a:	2000      	movs	r0, #0
   1f34c:	4b07      	ldr	r3, [pc, #28]	; (1f36c <sd_mmc_ram_2_mem+0x68>)
   1f34e:	4798      	blx	r3
   1f350:	1e03      	subs	r3, r0, #0
   1f352:	d001      	beq.n	1f358 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1f354:	2301      	movs	r3, #1
   1f356:	e000      	b.n	1f35a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1f358:	2300      	movs	r3, #0
}
   1f35a:	0018      	movs	r0, r3
   1f35c:	46bd      	mov	sp, r7
   1f35e:	b004      	add	sp, #16
   1f360:	bd80      	pop	{r7, pc}
   1f362:	46c0      	nop			; (mov r8, r8)
   1f364:	0001ef19 	.word	0x0001ef19
   1f368:	0001f001 	.word	0x0001f001
   1f36c:	0001f059 	.word	0x0001f059

0001f370 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1f370:	b580      	push	{r7, lr}
   1f372:	b082      	sub	sp, #8
   1f374:	af00      	add	r7, sp, #0
   1f376:	6078      	str	r0, [r7, #4]
   1f378:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1f37a:	683a      	ldr	r2, [r7, #0]
   1f37c:	687b      	ldr	r3, [r7, #4]
   1f37e:	0019      	movs	r1, r3
   1f380:	2000      	movs	r0, #0
   1f382:	4b03      	ldr	r3, [pc, #12]	; (1f390 <sd_mmc_ram_2_mem_0+0x20>)
   1f384:	4798      	blx	r3
   1f386:	0003      	movs	r3, r0
}
   1f388:	0018      	movs	r0, r3
   1f38a:	46bd      	mov	sp, r7
   1f38c:	b002      	add	sp, #8
   1f38e:	bd80      	pop	{r7, pc}
   1f390:	0001f305 	.word	0x0001f305

0001f394 <system_pinmux_get_group_from_gpio_pin>:
{
   1f394:	b580      	push	{r7, lr}
   1f396:	b084      	sub	sp, #16
   1f398:	af00      	add	r7, sp, #0
   1f39a:	0002      	movs	r2, r0
   1f39c:	1dfb      	adds	r3, r7, #7
   1f39e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1f3a0:	230f      	movs	r3, #15
   1f3a2:	18fb      	adds	r3, r7, r3
   1f3a4:	1dfa      	adds	r2, r7, #7
   1f3a6:	7812      	ldrb	r2, [r2, #0]
   1f3a8:	09d2      	lsrs	r2, r2, #7
   1f3aa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1f3ac:	230e      	movs	r3, #14
   1f3ae:	18fb      	adds	r3, r7, r3
   1f3b0:	1dfa      	adds	r2, r7, #7
   1f3b2:	7812      	ldrb	r2, [r2, #0]
   1f3b4:	0952      	lsrs	r2, r2, #5
   1f3b6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1f3b8:	4b0d      	ldr	r3, [pc, #52]	; (1f3f0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1f3ba:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1f3bc:	230f      	movs	r3, #15
   1f3be:	18fb      	adds	r3, r7, r3
   1f3c0:	781b      	ldrb	r3, [r3, #0]
   1f3c2:	2b00      	cmp	r3, #0
   1f3c4:	d10f      	bne.n	1f3e6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1f3c6:	230f      	movs	r3, #15
   1f3c8:	18fb      	adds	r3, r7, r3
   1f3ca:	781b      	ldrb	r3, [r3, #0]
   1f3cc:	009b      	lsls	r3, r3, #2
   1f3ce:	2210      	movs	r2, #16
   1f3d0:	4694      	mov	ip, r2
   1f3d2:	44bc      	add	ip, r7
   1f3d4:	4463      	add	r3, ip
   1f3d6:	3b08      	subs	r3, #8
   1f3d8:	681a      	ldr	r2, [r3, #0]
   1f3da:	230e      	movs	r3, #14
   1f3dc:	18fb      	adds	r3, r7, r3
   1f3de:	781b      	ldrb	r3, [r3, #0]
   1f3e0:	01db      	lsls	r3, r3, #7
   1f3e2:	18d3      	adds	r3, r2, r3
   1f3e4:	e000      	b.n	1f3e8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1f3e6:	2300      	movs	r3, #0
}
   1f3e8:	0018      	movs	r0, r3
   1f3ea:	46bd      	mov	sp, r7
   1f3ec:	b004      	add	sp, #16
   1f3ee:	bd80      	pop	{r7, pc}
   1f3f0:	41004400 	.word	0x41004400

0001f3f4 <system_interrupt_enable>:
{
   1f3f4:	b580      	push	{r7, lr}
   1f3f6:	b082      	sub	sp, #8
   1f3f8:	af00      	add	r7, sp, #0
   1f3fa:	0002      	movs	r2, r0
   1f3fc:	1dfb      	adds	r3, r7, #7
   1f3fe:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1f400:	4b06      	ldr	r3, [pc, #24]	; (1f41c <system_interrupt_enable+0x28>)
   1f402:	1dfa      	adds	r2, r7, #7
   1f404:	7812      	ldrb	r2, [r2, #0]
   1f406:	0011      	movs	r1, r2
   1f408:	221f      	movs	r2, #31
   1f40a:	400a      	ands	r2, r1
   1f40c:	2101      	movs	r1, #1
   1f40e:	4091      	lsls	r1, r2
   1f410:	000a      	movs	r2, r1
   1f412:	601a      	str	r2, [r3, #0]
}
   1f414:	46c0      	nop			; (mov r8, r8)
   1f416:	46bd      	mov	sp, r7
   1f418:	b002      	add	sp, #8
   1f41a:	bd80      	pop	{r7, pc}
   1f41c:	e000e100 	.word	0xe000e100

0001f420 <port_get_group_from_gpio_pin>:
{
   1f420:	b580      	push	{r7, lr}
   1f422:	b082      	sub	sp, #8
   1f424:	af00      	add	r7, sp, #0
   1f426:	0002      	movs	r2, r0
   1f428:	1dfb      	adds	r3, r7, #7
   1f42a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1f42c:	1dfb      	adds	r3, r7, #7
   1f42e:	781b      	ldrb	r3, [r3, #0]
   1f430:	0018      	movs	r0, r3
   1f432:	4b03      	ldr	r3, [pc, #12]	; (1f440 <port_get_group_from_gpio_pin+0x20>)
   1f434:	4798      	blx	r3
   1f436:	0003      	movs	r3, r0
}
   1f438:	0018      	movs	r0, r3
   1f43a:	46bd      	mov	sp, r7
   1f43c:	b002      	add	sp, #8
   1f43e:	bd80      	pop	{r7, pc}
   1f440:	0001f395 	.word	0x0001f395

0001f444 <port_get_config_defaults>:
{
   1f444:	b580      	push	{r7, lr}
   1f446:	b082      	sub	sp, #8
   1f448:	af00      	add	r7, sp, #0
   1f44a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1f44c:	687b      	ldr	r3, [r7, #4]
   1f44e:	2200      	movs	r2, #0
   1f450:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1f452:	687b      	ldr	r3, [r7, #4]
   1f454:	2201      	movs	r2, #1
   1f456:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1f458:	687b      	ldr	r3, [r7, #4]
   1f45a:	2200      	movs	r2, #0
   1f45c:	709a      	strb	r2, [r3, #2]
}
   1f45e:	46c0      	nop			; (mov r8, r8)
   1f460:	46bd      	mov	sp, r7
   1f462:	b002      	add	sp, #8
   1f464:	bd80      	pop	{r7, pc}
	...

0001f468 <port_pin_set_output_level>:
{
   1f468:	b580      	push	{r7, lr}
   1f46a:	b084      	sub	sp, #16
   1f46c:	af00      	add	r7, sp, #0
   1f46e:	0002      	movs	r2, r0
   1f470:	1dfb      	adds	r3, r7, #7
   1f472:	701a      	strb	r2, [r3, #0]
   1f474:	1dbb      	adds	r3, r7, #6
   1f476:	1c0a      	adds	r2, r1, #0
   1f478:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1f47a:	1dfb      	adds	r3, r7, #7
   1f47c:	781b      	ldrb	r3, [r3, #0]
   1f47e:	0018      	movs	r0, r3
   1f480:	4b0d      	ldr	r3, [pc, #52]	; (1f4b8 <port_pin_set_output_level+0x50>)
   1f482:	4798      	blx	r3
   1f484:	0003      	movs	r3, r0
   1f486:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1f488:	1dfb      	adds	r3, r7, #7
   1f48a:	781b      	ldrb	r3, [r3, #0]
   1f48c:	221f      	movs	r2, #31
   1f48e:	4013      	ands	r3, r2
   1f490:	2201      	movs	r2, #1
   1f492:	409a      	lsls	r2, r3
   1f494:	0013      	movs	r3, r2
   1f496:	60bb      	str	r3, [r7, #8]
	if (level) {
   1f498:	1dbb      	adds	r3, r7, #6
   1f49a:	781b      	ldrb	r3, [r3, #0]
   1f49c:	2b00      	cmp	r3, #0
   1f49e:	d003      	beq.n	1f4a8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1f4a0:	68fb      	ldr	r3, [r7, #12]
   1f4a2:	68ba      	ldr	r2, [r7, #8]
   1f4a4:	619a      	str	r2, [r3, #24]
}
   1f4a6:	e002      	b.n	1f4ae <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1f4a8:	68fb      	ldr	r3, [r7, #12]
   1f4aa:	68ba      	ldr	r2, [r7, #8]
   1f4ac:	615a      	str	r2, [r3, #20]
}
   1f4ae:	46c0      	nop			; (mov r8, r8)
   1f4b0:	46bd      	mov	sp, r7
   1f4b2:	b004      	add	sp, #16
   1f4b4:	bd80      	pop	{r7, pc}
   1f4b6:	46c0      	nop			; (mov r8, r8)
   1f4b8:	0001f421 	.word	0x0001f421

0001f4bc <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   1f4bc:	b580      	push	{r7, lr}
   1f4be:	b084      	sub	sp, #16
   1f4c0:	af00      	add	r7, sp, #0
   1f4c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f4c4:	687b      	ldr	r3, [r7, #4]
   1f4c6:	681b      	ldr	r3, [r3, #0]
   1f4c8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   1f4ca:	68fb      	ldr	r3, [r7, #12]
   1f4cc:	69db      	ldr	r3, [r3, #28]
   1f4ce:	1e5a      	subs	r2, r3, #1
   1f4d0:	4193      	sbcs	r3, r2
   1f4d2:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   1f4d4:	0018      	movs	r0, r3
   1f4d6:	46bd      	mov	sp, r7
   1f4d8:	b004      	add	sp, #16
   1f4da:	bd80      	pop	{r7, pc}

0001f4dc <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   1f4dc:	b580      	push	{r7, lr}
   1f4de:	b082      	sub	sp, #8
   1f4e0:	af00      	add	r7, sp, #0
   1f4e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   1f4e4:	687b      	ldr	r3, [r7, #4]
   1f4e6:	2201      	movs	r2, #1
   1f4e8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1f4ea:	687b      	ldr	r3, [r7, #4]
   1f4ec:	2200      	movs	r2, #0
   1f4ee:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1f4f0:	687b      	ldr	r3, [r7, #4]
   1f4f2:	2200      	movs	r2, #0
   1f4f4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1f4f6:	687b      	ldr	r3, [r7, #4]
   1f4f8:	22c0      	movs	r2, #192	; 0xc0
   1f4fa:	0392      	lsls	r2, r2, #14
   1f4fc:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1f4fe:	687b      	ldr	r3, [r7, #4]
   1f500:	2200      	movs	r2, #0
   1f502:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1f504:	687b      	ldr	r3, [r7, #4]
   1f506:	2200      	movs	r2, #0
   1f508:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1f50a:	687b      	ldr	r3, [r7, #4]
   1f50c:	2201      	movs	r2, #1
   1f50e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   1f510:	687b      	ldr	r3, [r7, #4]
   1f512:	2201      	movs	r2, #1
   1f514:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   1f516:	687b      	ldr	r3, [r7, #4]
   1f518:	2200      	movs	r2, #0
   1f51a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   1f51c:	687b      	ldr	r3, [r7, #4]
   1f51e:	2224      	movs	r2, #36	; 0x24
   1f520:	2100      	movs	r1, #0
   1f522:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1f524:	687b      	ldr	r3, [r7, #4]
   1f526:	3318      	adds	r3, #24
   1f528:	220c      	movs	r2, #12
   1f52a:	2100      	movs	r1, #0
   1f52c:	0018      	movs	r0, r3
   1f52e:	4b0a      	ldr	r3, [pc, #40]	; (1f558 <spi_get_config_defaults+0x7c>)
   1f530:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   1f532:	687b      	ldr	r3, [r7, #4]
   1f534:	4a09      	ldr	r2, [pc, #36]	; (1f55c <spi_get_config_defaults+0x80>)
   1f536:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1f538:	687b      	ldr	r3, [r7, #4]
   1f53a:	2200      	movs	r2, #0
   1f53c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1f53e:	687b      	ldr	r3, [r7, #4]
   1f540:	2200      	movs	r2, #0
   1f542:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1f544:	687b      	ldr	r3, [r7, #4]
   1f546:	2200      	movs	r2, #0
   1f548:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1f54a:	687b      	ldr	r3, [r7, #4]
   1f54c:	2200      	movs	r2, #0
   1f54e:	635a      	str	r2, [r3, #52]	; 0x34

};
   1f550:	46c0      	nop			; (mov r8, r8)
   1f552:	46bd      	mov	sp, r7
   1f554:	b002      	add	sp, #8
   1f556:	bd80      	pop	{r7, pc}
   1f558:	00034883 	.word	0x00034883
   1f55c:	000186a0 	.word	0x000186a0

0001f560 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   1f560:	b580      	push	{r7, lr}
   1f562:	b082      	sub	sp, #8
   1f564:	af00      	add	r7, sp, #0
   1f566:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   1f568:	687b      	ldr	r3, [r7, #4]
   1f56a:	220a      	movs	r2, #10
   1f56c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1f56e:	687b      	ldr	r3, [r7, #4]
   1f570:	2200      	movs	r2, #0
   1f572:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1f574:	687b      	ldr	r3, [r7, #4]
   1f576:	2200      	movs	r2, #0
   1f578:	709a      	strb	r2, [r3, #2]
}
   1f57a:	46c0      	nop			; (mov r8, r8)
   1f57c:	46bd      	mov	sp, r7
   1f57e:	b002      	add	sp, #8
   1f580:	bd80      	pop	{r7, pc}
	...

0001f584 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   1f584:	b580      	push	{r7, lr}
   1f586:	b084      	sub	sp, #16
   1f588:	af00      	add	r7, sp, #0
   1f58a:	6078      	str	r0, [r7, #4]
   1f58c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1f58e:	683b      	ldr	r3, [r7, #0]
   1f590:	781a      	ldrb	r2, [r3, #0]
   1f592:	687b      	ldr	r3, [r7, #4]
   1f594:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1f596:	683b      	ldr	r3, [r7, #0]
   1f598:	785a      	ldrb	r2, [r3, #1]
   1f59a:	687b      	ldr	r3, [r7, #4]
   1f59c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1f59e:	683b      	ldr	r3, [r7, #0]
   1f5a0:	789a      	ldrb	r2, [r3, #2]
   1f5a2:	687b      	ldr	r3, [r7, #4]
   1f5a4:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1f5a6:	230c      	movs	r3, #12
   1f5a8:	18fb      	adds	r3, r7, r3
   1f5aa:	0018      	movs	r0, r3
   1f5ac:	4b0b      	ldr	r3, [pc, #44]	; (1f5dc <spi_attach_slave+0x58>)
   1f5ae:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1f5b0:	230c      	movs	r3, #12
   1f5b2:	18fb      	adds	r3, r7, r3
   1f5b4:	2201      	movs	r2, #1
   1f5b6:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1f5b8:	687b      	ldr	r3, [r7, #4]
   1f5ba:	781b      	ldrb	r3, [r3, #0]
   1f5bc:	220c      	movs	r2, #12
   1f5be:	18ba      	adds	r2, r7, r2
   1f5c0:	0011      	movs	r1, r2
   1f5c2:	0018      	movs	r0, r3
   1f5c4:	4b06      	ldr	r3, [pc, #24]	; (1f5e0 <spi_attach_slave+0x5c>)
   1f5c6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1f5c8:	687b      	ldr	r3, [r7, #4]
   1f5ca:	781b      	ldrb	r3, [r3, #0]
   1f5cc:	2101      	movs	r1, #1
   1f5ce:	0018      	movs	r0, r3
   1f5d0:	4b04      	ldr	r3, [pc, #16]	; (1f5e4 <spi_attach_slave+0x60>)
   1f5d2:	4798      	blx	r3
}
   1f5d4:	46c0      	nop			; (mov r8, r8)
   1f5d6:	46bd      	mov	sp, r7
   1f5d8:	b004      	add	sp, #16
   1f5da:	bd80      	pop	{r7, pc}
   1f5dc:	0001f445 	.word	0x0001f445
   1f5e0:	00026851 	.word	0x00026851
   1f5e4:	0001f469 	.word	0x0001f469

0001f5e8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   1f5e8:	b580      	push	{r7, lr}
   1f5ea:	b084      	sub	sp, #16
   1f5ec:	af00      	add	r7, sp, #0
   1f5ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f5f0:	687b      	ldr	r3, [r7, #4]
   1f5f2:	681b      	ldr	r3, [r3, #0]
   1f5f4:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1f5f6:	687b      	ldr	r3, [r7, #4]
   1f5f8:	681b      	ldr	r3, [r3, #0]
   1f5fa:	0018      	movs	r0, r3
   1f5fc:	4b0b      	ldr	r3, [pc, #44]	; (1f62c <spi_enable+0x44>)
   1f5fe:	4798      	blx	r3
   1f600:	0003      	movs	r3, r0
   1f602:	0018      	movs	r0, r3
   1f604:	4b0a      	ldr	r3, [pc, #40]	; (1f630 <spi_enable+0x48>)
   1f606:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1f608:	46c0      	nop			; (mov r8, r8)
   1f60a:	687b      	ldr	r3, [r7, #4]
   1f60c:	0018      	movs	r0, r3
   1f60e:	4b09      	ldr	r3, [pc, #36]	; (1f634 <spi_enable+0x4c>)
   1f610:	4798      	blx	r3
   1f612:	1e03      	subs	r3, r0, #0
   1f614:	d1f9      	bne.n	1f60a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1f616:	68fb      	ldr	r3, [r7, #12]
   1f618:	681b      	ldr	r3, [r3, #0]
   1f61a:	2202      	movs	r2, #2
   1f61c:	431a      	orrs	r2, r3
   1f61e:	68fb      	ldr	r3, [r7, #12]
   1f620:	601a      	str	r2, [r3, #0]
}
   1f622:	46c0      	nop			; (mov r8, r8)
   1f624:	46bd      	mov	sp, r7
   1f626:	b004      	add	sp, #16
   1f628:	bd80      	pop	{r7, pc}
   1f62a:	46c0      	nop			; (mov r8, r8)
   1f62c:	00027521 	.word	0x00027521
   1f630:	0001f3f5 	.word	0x0001f3f5
   1f634:	0001f4bd 	.word	0x0001f4bd

0001f638 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1f638:	b580      	push	{r7, lr}
   1f63a:	b084      	sub	sp, #16
   1f63c:	af00      	add	r7, sp, #0
   1f63e:	6078      	str	r0, [r7, #4]
   1f640:	000a      	movs	r2, r1
   1f642:	1cfb      	adds	r3, r7, #3
   1f644:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1f646:	230f      	movs	r3, #15
   1f648:	18fb      	adds	r3, r7, r3
   1f64a:	2200      	movs	r2, #0
   1f64c:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1f64e:	e038      	b.n	1f6c2 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1f650:	687b      	ldr	r3, [r7, #4]
   1f652:	1c5a      	adds	r2, r3, #1
   1f654:	607a      	str	r2, [r7, #4]
   1f656:	220e      	movs	r2, #14
   1f658:	18ba      	adds	r2, r7, r2
   1f65a:	781b      	ldrb	r3, [r3, #0]
   1f65c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1f65e:	230d      	movs	r3, #13
   1f660:	18fb      	adds	r3, r7, r3
   1f662:	2200      	movs	r2, #0
   1f664:	701a      	strb	r2, [r3, #0]
   1f666:	e027      	b.n	1f6b8 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1f668:	230f      	movs	r3, #15
   1f66a:	18fa      	adds	r2, r7, r3
   1f66c:	230f      	movs	r3, #15
   1f66e:	18fb      	adds	r3, r7, r3
   1f670:	781b      	ldrb	r3, [r3, #0]
   1f672:	18db      	adds	r3, r3, r3
   1f674:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1f676:	230e      	movs	r3, #14
   1f678:	18fa      	adds	r2, r7, r3
   1f67a:	230f      	movs	r3, #15
   1f67c:	18fb      	adds	r3, r7, r3
   1f67e:	7812      	ldrb	r2, [r2, #0]
   1f680:	781b      	ldrb	r3, [r3, #0]
   1f682:	4053      	eors	r3, r2
   1f684:	b2db      	uxtb	r3, r3
   1f686:	b25b      	sxtb	r3, r3
   1f688:	2b00      	cmp	r3, #0
   1f68a:	da07      	bge.n	1f69c <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1f68c:	230f      	movs	r3, #15
   1f68e:	18fb      	adds	r3, r7, r3
   1f690:	220f      	movs	r2, #15
   1f692:	18ba      	adds	r2, r7, r2
   1f694:	7812      	ldrb	r2, [r2, #0]
   1f696:	2109      	movs	r1, #9
   1f698:	404a      	eors	r2, r1
   1f69a:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1f69c:	230e      	movs	r3, #14
   1f69e:	18fa      	adds	r2, r7, r3
   1f6a0:	230e      	movs	r3, #14
   1f6a2:	18fb      	adds	r3, r7, r3
   1f6a4:	781b      	ldrb	r3, [r3, #0]
   1f6a6:	18db      	adds	r3, r3, r3
   1f6a8:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1f6aa:	230d      	movs	r3, #13
   1f6ac:	18fb      	adds	r3, r7, r3
   1f6ae:	781a      	ldrb	r2, [r3, #0]
   1f6b0:	230d      	movs	r3, #13
   1f6b2:	18fb      	adds	r3, r7, r3
   1f6b4:	3201      	adds	r2, #1
   1f6b6:	701a      	strb	r2, [r3, #0]
   1f6b8:	230d      	movs	r3, #13
   1f6ba:	18fb      	adds	r3, r7, r3
   1f6bc:	781b      	ldrb	r3, [r3, #0]
   1f6be:	2b07      	cmp	r3, #7
   1f6c0:	d9d2      	bls.n	1f668 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1f6c2:	1cfb      	adds	r3, r7, #3
   1f6c4:	781b      	ldrb	r3, [r3, #0]
   1f6c6:	1cfa      	adds	r2, r7, #3
   1f6c8:	1e59      	subs	r1, r3, #1
   1f6ca:	7011      	strb	r1, [r2, #0]
   1f6cc:	2b00      	cmp	r3, #0
   1f6ce:	d1bf      	bne.n	1f650 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1f6d0:	230f      	movs	r3, #15
   1f6d2:	18fb      	adds	r3, r7, r3
   1f6d4:	781b      	ldrb	r3, [r3, #0]
   1f6d6:	005b      	lsls	r3, r3, #1
   1f6d8:	b25b      	sxtb	r3, r3
   1f6da:	2201      	movs	r2, #1
   1f6dc:	4313      	orrs	r3, r2
   1f6de:	b25a      	sxtb	r2, r3
   1f6e0:	230f      	movs	r3, #15
   1f6e2:	18fb      	adds	r3, r7, r3
   1f6e4:	701a      	strb	r2, [r3, #0]
	return crc;
   1f6e6:	230f      	movs	r3, #15
   1f6e8:	18fb      	adds	r3, r7, r3
   1f6ea:	781b      	ldrb	r3, [r3, #0]
}
   1f6ec:	0018      	movs	r0, r3
   1f6ee:	46bd      	mov	sp, r7
   1f6f0:	b004      	add	sp, #16
   1f6f2:	bd80      	pop	{r7, pc}

0001f6f4 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1f6f4:	b590      	push	{r4, r7, lr}
   1f6f6:	b083      	sub	sp, #12
   1f6f8:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1f6fa:	1c7b      	adds	r3, r7, #1
   1f6fc:	22ff      	movs	r2, #255	; 0xff
   1f6fe:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1f700:	1cbb      	adds	r3, r7, #2
   1f702:	22ff      	movs	r2, #255	; 0xff
   1f704:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f706:	1cbb      	adds	r3, r7, #2
   1f708:	881b      	ldrh	r3, [r3, #0]
   1f70a:	1c79      	adds	r1, r7, #1
   1f70c:	4811      	ldr	r0, [pc, #68]	; (1f754 <sd_mmc_spi_wait_busy+0x60>)
   1f70e:	2201      	movs	r2, #1
   1f710:	4c11      	ldr	r4, [pc, #68]	; (1f758 <sd_mmc_spi_wait_busy+0x64>)
   1f712:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1f714:	4b11      	ldr	r3, [pc, #68]	; (1f75c <sd_mmc_spi_wait_busy+0x68>)
   1f716:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f718:	1cbb      	adds	r3, r7, #2
   1f71a:	881b      	ldrh	r3, [r3, #0]
   1f71c:	1c79      	adds	r1, r7, #1
   1f71e:	480d      	ldr	r0, [pc, #52]	; (1f754 <sd_mmc_spi_wait_busy+0x60>)
   1f720:	2201      	movs	r2, #1
   1f722:	4c0d      	ldr	r4, [pc, #52]	; (1f758 <sd_mmc_spi_wait_busy+0x64>)
   1f724:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f726:	1cbb      	adds	r3, r7, #2
   1f728:	881b      	ldrh	r3, [r3, #0]
   1f72a:	1c79      	adds	r1, r7, #1
   1f72c:	4809      	ldr	r0, [pc, #36]	; (1f754 <sd_mmc_spi_wait_busy+0x60>)
   1f72e:	2201      	movs	r2, #1
   1f730:	4c09      	ldr	r4, [pc, #36]	; (1f758 <sd_mmc_spi_wait_busy+0x64>)
   1f732:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1f734:	687b      	ldr	r3, [r7, #4]
   1f736:	1e5a      	subs	r2, r3, #1
   1f738:	607a      	str	r2, [r7, #4]
   1f73a:	2b00      	cmp	r3, #0
   1f73c:	d101      	bne.n	1f742 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1f73e:	2300      	movs	r3, #0
   1f740:	e004      	b.n	1f74c <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1f742:	1c7b      	adds	r3, r7, #1
   1f744:	781b      	ldrb	r3, [r3, #0]
   1f746:	2bff      	cmp	r3, #255	; 0xff
   1f748:	d1ed      	bne.n	1f726 <sd_mmc_spi_wait_busy+0x32>
	return true;
   1f74a:	2301      	movs	r3, #1
}
   1f74c:	0018      	movs	r0, r3
   1f74e:	46bd      	mov	sp, r7
   1f750:	b003      	add	sp, #12
   1f752:	bd90      	pop	{r4, r7, pc}
   1f754:	2000424c 	.word	0x2000424c
   1f758:	00027e61 	.word	0x00027e61
   1f75c:	00030d40 	.word	0x00030d40

0001f760 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1f760:	b590      	push	{r4, r7, lr}
   1f762:	b083      	sub	sp, #12
   1f764:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1f766:	1cbb      	adds	r3, r7, #2
   1f768:	22ff      	movs	r2, #255	; 0xff
   1f76a:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1f76c:	1c7b      	adds	r3, r7, #1
   1f76e:	2200      	movs	r2, #0
   1f770:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1f772:	4b18      	ldr	r3, [pc, #96]	; (1f7d4 <sd_mmc_spi_start_read_block+0x74>)
   1f774:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1f776:	687b      	ldr	r3, [r7, #4]
   1f778:	1e5a      	subs	r2, r3, #1
   1f77a:	607a      	str	r2, [r7, #4]
   1f77c:	2b00      	cmp	r3, #0
   1f77e:	d104      	bne.n	1f78a <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1f780:	4b15      	ldr	r3, [pc, #84]	; (1f7d8 <sd_mmc_spi_start_read_block+0x78>)
   1f782:	2204      	movs	r2, #4
   1f784:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1f786:	2300      	movs	r3, #0
   1f788:	e020      	b.n	1f7cc <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1f78a:	1cbb      	adds	r3, r7, #2
   1f78c:	881b      	ldrh	r3, [r3, #0]
   1f78e:	1c79      	adds	r1, r7, #1
   1f790:	4812      	ldr	r0, [pc, #72]	; (1f7dc <sd_mmc_spi_start_read_block+0x7c>)
   1f792:	2201      	movs	r2, #1
   1f794:	4c12      	ldr	r4, [pc, #72]	; (1f7e0 <sd_mmc_spi_start_read_block+0x80>)
   1f796:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1f798:	1c7b      	adds	r3, r7, #1
   1f79a:	781b      	ldrb	r3, [r3, #0]
   1f79c:	001a      	movs	r2, r3
   1f79e:	23f0      	movs	r3, #240	; 0xf0
   1f7a0:	4013      	ands	r3, r2
   1f7a2:	d10e      	bne.n	1f7c2 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1f7a4:	1c7b      	adds	r3, r7, #1
   1f7a6:	781b      	ldrb	r3, [r3, #0]
   1f7a8:	001a      	movs	r2, r3
   1f7aa:	2307      	movs	r3, #7
   1f7ac:	4013      	ands	r3, r2
   1f7ae:	d003      	beq.n	1f7b8 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1f7b0:	4b09      	ldr	r3, [pc, #36]	; (1f7d8 <sd_mmc_spi_start_read_block+0x78>)
   1f7b2:	2207      	movs	r2, #7
   1f7b4:	701a      	strb	r2, [r3, #0]
   1f7b6:	e002      	b.n	1f7be <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1f7b8:	4b07      	ldr	r3, [pc, #28]	; (1f7d8 <sd_mmc_spi_start_read_block+0x78>)
   1f7ba:	220b      	movs	r2, #11
   1f7bc:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1f7be:	2300      	movs	r3, #0
   1f7c0:	e004      	b.n	1f7cc <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1f7c2:	1c7b      	adds	r3, r7, #1
   1f7c4:	781b      	ldrb	r3, [r3, #0]
   1f7c6:	2bfe      	cmp	r3, #254	; 0xfe
   1f7c8:	d1d5      	bne.n	1f776 <sd_mmc_spi_start_read_block+0x16>

	return true;
   1f7ca:	2301      	movs	r3, #1
}
   1f7cc:	0018      	movs	r0, r3
   1f7ce:	46bd      	mov	sp, r7
   1f7d0:	b003      	add	sp, #12
   1f7d2:	bd90      	pop	{r4, r7, pc}
   1f7d4:	0007a120 	.word	0x0007a120
   1f7d8:	2000428f 	.word	0x2000428f
   1f7dc:	2000424c 	.word	0x2000424c
   1f7e0:	00027e61 	.word	0x00027e61

0001f7e4 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1f7e4:	b590      	push	{r4, r7, lr}
   1f7e6:	b083      	sub	sp, #12
   1f7e8:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1f7ea:	1dbb      	adds	r3, r7, #6
   1f7ec:	22ff      	movs	r2, #255	; 0xff
   1f7ee:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1f7f0:	1dbb      	adds	r3, r7, #6
   1f7f2:	881b      	ldrh	r3, [r3, #0]
   1f7f4:	1d39      	adds	r1, r7, #4
   1f7f6:	4804      	ldr	r0, [pc, #16]	; (1f808 <sd_mmc_spi_stop_read_block+0x24>)
   1f7f8:	2202      	movs	r2, #2
   1f7fa:	4c04      	ldr	r4, [pc, #16]	; (1f80c <sd_mmc_spi_stop_read_block+0x28>)
   1f7fc:	47a0      	blx	r4
			dummy);
}
   1f7fe:	46c0      	nop			; (mov r8, r8)
   1f800:	46bd      	mov	sp, r7
   1f802:	b003      	add	sp, #12
   1f804:	bd90      	pop	{r4, r7, pc}
   1f806:	46c0      	nop			; (mov r8, r8)
   1f808:	2000424c 	.word	0x2000424c
   1f80c:	00027e61 	.word	0x00027e61

0001f810 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1f810:	b580      	push	{r7, lr}
   1f812:	b082      	sub	sp, #8
   1f814:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   1f816:	1dfb      	adds	r3, r7, #7
   1f818:	22ff      	movs	r2, #255	; 0xff
   1f81a:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   1f81c:	1df9      	adds	r1, r7, #7
   1f81e:	4b0d      	ldr	r3, [pc, #52]	; (1f854 <sd_mmc_spi_start_write_block+0x44>)
   1f820:	2201      	movs	r2, #1
   1f822:	0018      	movs	r0, r3
   1f824:	4b0c      	ldr	r3, [pc, #48]	; (1f858 <sd_mmc_spi_start_write_block+0x48>)
   1f826:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   1f828:	4b0c      	ldr	r3, [pc, #48]	; (1f85c <sd_mmc_spi_start_write_block+0x4c>)
   1f82a:	881b      	ldrh	r3, [r3, #0]
   1f82c:	2b01      	cmp	r3, #1
   1f82e:	d103      	bne.n	1f838 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   1f830:	1dbb      	adds	r3, r7, #6
   1f832:	22fe      	movs	r2, #254	; 0xfe
   1f834:	701a      	strb	r2, [r3, #0]
   1f836:	e002      	b.n	1f83e <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   1f838:	1dbb      	adds	r3, r7, #6
   1f83a:	22fc      	movs	r2, #252	; 0xfc
   1f83c:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1f83e:	1db9      	adds	r1, r7, #6
   1f840:	4b04      	ldr	r3, [pc, #16]	; (1f854 <sd_mmc_spi_start_write_block+0x44>)
   1f842:	2201      	movs	r2, #1
   1f844:	0018      	movs	r0, r3
   1f846:	4b04      	ldr	r3, [pc, #16]	; (1f858 <sd_mmc_spi_start_write_block+0x48>)
   1f848:	4798      	blx	r3
}
   1f84a:	46c0      	nop			; (mov r8, r8)
   1f84c:	46bd      	mov	sp, r7
   1f84e:	b002      	add	sp, #8
   1f850:	bd80      	pop	{r7, pc}
   1f852:	46c0      	nop			; (mov r8, r8)
   1f854:	2000424c 	.word	0x2000424c
   1f858:	00028085 	.word	0x00028085
   1f85c:	2000429a 	.word	0x2000429a

0001f860 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   1f860:	b590      	push	{r4, r7, lr}
   1f862:	b083      	sub	sp, #12
   1f864:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   1f866:	1dbb      	adds	r3, r7, #6
   1f868:	22ff      	movs	r2, #255	; 0xff
   1f86a:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   1f86c:	1cbb      	adds	r3, r7, #2
   1f86e:	2201      	movs	r2, #1
   1f870:	4252      	negs	r2, r2
   1f872:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   1f874:	1cb9      	adds	r1, r7, #2
   1f876:	4b1b      	ldr	r3, [pc, #108]	; (1f8e4 <sd_mmc_spi_stop_write_block+0x84>)
   1f878:	2202      	movs	r2, #2
   1f87a:	0018      	movs	r0, r3
   1f87c:	4b1a      	ldr	r3, [pc, #104]	; (1f8e8 <sd_mmc_spi_stop_write_block+0x88>)
   1f87e:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1f880:	1dbb      	adds	r3, r7, #6
   1f882:	881b      	ldrh	r3, [r3, #0]
   1f884:	1d79      	adds	r1, r7, #5
   1f886:	4817      	ldr	r0, [pc, #92]	; (1f8e4 <sd_mmc_spi_stop_write_block+0x84>)
   1f888:	2201      	movs	r2, #1
   1f88a:	4c18      	ldr	r4, [pc, #96]	; (1f8ec <sd_mmc_spi_stop_write_block+0x8c>)
   1f88c:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1f88e:	1d7b      	adds	r3, r7, #5
   1f890:	781b      	ldrb	r3, [r3, #0]
   1f892:	001a      	movs	r2, r3
   1f894:	2310      	movs	r3, #16
   1f896:	4013      	ands	r3, r2
   1f898:	d105      	bne.n	1f8a6 <sd_mmc_spi_stop_write_block+0x46>
   1f89a:	1d7b      	adds	r3, r7, #5
   1f89c:	781b      	ldrb	r3, [r3, #0]
   1f89e:	001a      	movs	r2, r3
   1f8a0:	2301      	movs	r3, #1
   1f8a2:	4013      	ands	r3, r2
   1f8a4:	d104      	bne.n	1f8b0 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1f8a6:	4b12      	ldr	r3, [pc, #72]	; (1f8f0 <sd_mmc_spi_stop_write_block+0x90>)
   1f8a8:	2201      	movs	r2, #1
   1f8aa:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   1f8ac:	2300      	movs	r3, #0
   1f8ae:	e014      	b.n	1f8da <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1f8b0:	1d7b      	adds	r3, r7, #5
   1f8b2:	781b      	ldrb	r3, [r3, #0]
   1f8b4:	001a      	movs	r2, r3
   1f8b6:	231e      	movs	r3, #30
   1f8b8:	4013      	ands	r3, r2
   1f8ba:	2b04      	cmp	r3, #4
   1f8bc:	d00b      	beq.n	1f8d6 <sd_mmc_spi_stop_write_block+0x76>
   1f8be:	2b0a      	cmp	r3, #10
   1f8c0:	d104      	bne.n	1f8cc <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1f8c2:	4b0b      	ldr	r3, [pc, #44]	; (1f8f0 <sd_mmc_spi_stop_write_block+0x90>)
   1f8c4:	2208      	movs	r2, #8
   1f8c6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1f8c8:	2300      	movs	r3, #0
   1f8ca:	e006      	b.n	1f8da <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1f8cc:	4b08      	ldr	r3, [pc, #32]	; (1f8f0 <sd_mmc_spi_stop_write_block+0x90>)
   1f8ce:	220a      	movs	r2, #10
   1f8d0:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1f8d2:	2300      	movs	r3, #0
   1f8d4:	e001      	b.n	1f8da <sd_mmc_spi_stop_write_block+0x7a>
		break;
   1f8d6:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1f8d8:	2301      	movs	r3, #1
}
   1f8da:	0018      	movs	r0, r3
   1f8dc:	46bd      	mov	sp, r7
   1f8de:	b003      	add	sp, #12
   1f8e0:	bd90      	pop	{r4, r7, pc}
   1f8e2:	46c0      	nop			; (mov r8, r8)
   1f8e4:	2000424c 	.word	0x2000424c
   1f8e8:	00028085 	.word	0x00028085
   1f8ec:	00027e61 	.word	0x00027e61
   1f8f0:	2000428f 	.word	0x2000428f

0001f8f4 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   1f8f4:	b590      	push	{r4, r7, lr}
   1f8f6:	b083      	sub	sp, #12
   1f8f8:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   1f8fa:	4b1d      	ldr	r3, [pc, #116]	; (1f970 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1f8fc:	881b      	ldrh	r3, [r3, #0]
   1f8fe:	2b01      	cmp	r3, #1
   1f900:	d101      	bne.n	1f906 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   1f902:	2301      	movs	r3, #1
   1f904:	e030      	b.n	1f968 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   1f906:	4b1a      	ldr	r3, [pc, #104]	; (1f970 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1f908:	881b      	ldrh	r3, [r3, #0]
   1f90a:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1f90c:	4b19      	ldr	r3, [pc, #100]	; (1f974 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   1f90e:	681a      	ldr	r2, [r3, #0]
   1f910:	4b19      	ldr	r3, [pc, #100]	; (1f978 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   1f912:	881b      	ldrh	r3, [r3, #0]
   1f914:	0019      	movs	r1, r3
   1f916:	4b19      	ldr	r3, [pc, #100]	; (1f97c <sd_mmc_spi_stop_multiwrite_block+0x88>)
   1f918:	0010      	movs	r0, r2
   1f91a:	4798      	blx	r3
   1f91c:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   1f91e:	429c      	cmp	r4, r3
   1f920:	d901      	bls.n	1f926 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   1f922:	2301      	movs	r3, #1
   1f924:	e020      	b.n	1f968 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   1f926:	1dfb      	adds	r3, r7, #7
   1f928:	22ff      	movs	r2, #255	; 0xff
   1f92a:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1f92c:	1df9      	adds	r1, r7, #7
   1f92e:	4b14      	ldr	r3, [pc, #80]	; (1f980 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1f930:	2201      	movs	r2, #1
   1f932:	0018      	movs	r0, r3
   1f934:	4b13      	ldr	r3, [pc, #76]	; (1f984 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1f936:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   1f938:	1dfb      	adds	r3, r7, #7
   1f93a:	22fd      	movs	r2, #253	; 0xfd
   1f93c:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1f93e:	1df9      	adds	r1, r7, #7
   1f940:	4b0f      	ldr	r3, [pc, #60]	; (1f980 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1f942:	2201      	movs	r2, #1
   1f944:	0018      	movs	r0, r3
   1f946:	4b0f      	ldr	r3, [pc, #60]	; (1f984 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1f948:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   1f94a:	4b0f      	ldr	r3, [pc, #60]	; (1f988 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   1f94c:	4798      	blx	r3
   1f94e:	0003      	movs	r3, r0
   1f950:	001a      	movs	r2, r3
   1f952:	2301      	movs	r3, #1
   1f954:	4053      	eors	r3, r2
   1f956:	b2db      	uxtb	r3, r3
   1f958:	2b00      	cmp	r3, #0
   1f95a:	d004      	beq.n	1f966 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1f95c:	4b0b      	ldr	r3, [pc, #44]	; (1f98c <sd_mmc_spi_stop_multiwrite_block+0x98>)
   1f95e:	2205      	movs	r2, #5
   1f960:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   1f962:	2300      	movs	r3, #0
   1f964:	e000      	b.n	1f968 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   1f966:	2301      	movs	r3, #1
}
   1f968:	0018      	movs	r0, r3
   1f96a:	46bd      	mov	sp, r7
   1f96c:	b003      	add	sp, #12
   1f96e:	bd90      	pop	{r4, r7, pc}
   1f970:	2000429a 	.word	0x2000429a
   1f974:	20004294 	.word	0x20004294
   1f978:	20004298 	.word	0x20004298
   1f97c:	00032805 	.word	0x00032805
   1f980:	2000424c 	.word	0x2000424c
   1f984:	00028085 	.word	0x00028085
   1f988:	0001f6f5 	.word	0x0001f6f5
   1f98c:	2000428f 	.word	0x2000428f

0001f990 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   1f990:	b580      	push	{r7, lr}
   1f992:	b090      	sub	sp, #64	; 0x40
   1f994:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f996:	4b1f      	ldr	r3, [pc, #124]	; (1fa14 <sd_mmc_spi_init+0x84>)
   1f998:	2200      	movs	r2, #0
   1f99a:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1f99c:	233c      	movs	r3, #60	; 0x3c
   1f99e:	18fb      	adds	r3, r7, r3
   1f9a0:	0018      	movs	r0, r3
   1f9a2:	4b1d      	ldr	r3, [pc, #116]	; (1fa18 <sd_mmc_spi_init+0x88>)
   1f9a4:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   1f9a6:	1d3b      	adds	r3, r7, #4
   1f9a8:	0018      	movs	r0, r3
   1f9aa:	4b1c      	ldr	r3, [pc, #112]	; (1fa1c <sd_mmc_spi_init+0x8c>)
   1f9ac:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   1f9ae:	1d3b      	adds	r3, r7, #4
   1f9b0:	2280      	movs	r2, #128	; 0x80
   1f9b2:	0252      	lsls	r2, r2, #9
   1f9b4:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   1f9b6:	1d3b      	adds	r3, r7, #4
   1f9b8:	4a19      	ldr	r2, [pc, #100]	; (1fa20 <sd_mmc_spi_init+0x90>)
   1f9ba:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   1f9bc:	1d3b      	adds	r3, r7, #4
   1f9be:	4a19      	ldr	r2, [pc, #100]	; (1fa24 <sd_mmc_spi_init+0x94>)
   1f9c0:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   1f9c2:	1d3b      	adds	r3, r7, #4
   1f9c4:	4a18      	ldr	r2, [pc, #96]	; (1fa28 <sd_mmc_spi_init+0x98>)
   1f9c6:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   1f9c8:	1d3b      	adds	r3, r7, #4
   1f9ca:	4a18      	ldr	r2, [pc, #96]	; (1fa2c <sd_mmc_spi_init+0x9c>)
   1f9cc:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   1f9ce:	1d3b      	adds	r3, r7, #4
   1f9d0:	2224      	movs	r2, #36	; 0x24
   1f9d2:	2100      	movs	r1, #0
   1f9d4:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   1f9d6:	1d3b      	adds	r3, r7, #4
   1f9d8:	4a15      	ldr	r2, [pc, #84]	; (1fa30 <sd_mmc_spi_init+0xa0>)
   1f9da:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   1f9dc:	1d3a      	adds	r2, r7, #4
   1f9de:	4915      	ldr	r1, [pc, #84]	; (1fa34 <sd_mmc_spi_init+0xa4>)
   1f9e0:	4b15      	ldr	r3, [pc, #84]	; (1fa38 <sd_mmc_spi_init+0xa8>)
   1f9e2:	0018      	movs	r0, r3
   1f9e4:	4b15      	ldr	r3, [pc, #84]	; (1fa3c <sd_mmc_spi_init+0xac>)
   1f9e6:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   1f9e8:	4b13      	ldr	r3, [pc, #76]	; (1fa38 <sd_mmc_spi_init+0xa8>)
   1f9ea:	0018      	movs	r0, r3
   1f9ec:	4b14      	ldr	r3, [pc, #80]	; (1fa40 <sd_mmc_spi_init+0xb0>)
   1f9ee:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   1f9f0:	4b14      	ldr	r3, [pc, #80]	; (1fa44 <sd_mmc_spi_init+0xb4>)
   1f9f2:	0018      	movs	r0, r3
   1f9f4:	4b14      	ldr	r3, [pc, #80]	; (1fa48 <sd_mmc_spi_init+0xb8>)
   1f9f6:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   1f9f8:	4b14      	ldr	r3, [pc, #80]	; (1fa4c <sd_mmc_spi_init+0xbc>)
   1f9fa:	781a      	ldrb	r2, [r3, #0]
   1f9fc:	4b11      	ldr	r3, [pc, #68]	; (1fa44 <sd_mmc_spi_init+0xb4>)
   1f9fe:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   1fa00:	4a10      	ldr	r2, [pc, #64]	; (1fa44 <sd_mmc_spi_init+0xb4>)
   1fa02:	4b13      	ldr	r3, [pc, #76]	; (1fa50 <sd_mmc_spi_init+0xc0>)
   1fa04:	0011      	movs	r1, r2
   1fa06:	0018      	movs	r0, r3
   1fa08:	4b12      	ldr	r3, [pc, #72]	; (1fa54 <sd_mmc_spi_init+0xc4>)
   1fa0a:	4798      	blx	r3
}
   1fa0c:	46c0      	nop			; (mov r8, r8)
   1fa0e:	46bd      	mov	sp, r7
   1fa10:	b010      	add	sp, #64	; 0x40
   1fa12:	bd80      	pop	{r7, pc}
   1fa14:	2000428f 	.word	0x2000428f
   1fa18:	0001f445 	.word	0x0001f445
   1fa1c:	0001f4dd 	.word	0x0001f4dd
   1fa20:	00100002 	.word	0x00100002
   1fa24:	00110002 	.word	0x00110002
   1fa28:	00120002 	.word	0x00120002
   1fa2c:	00130002 	.word	0x00130002
   1fa30:	00061a80 	.word	0x00061a80
   1fa34:	42000c00 	.word	0x42000c00
   1fa38:	2000424c 	.word	0x2000424c
   1fa3c:	00027cd1 	.word	0x00027cd1
   1fa40:	0001f5e9 	.word	0x0001f5e9
   1fa44:	2000428c 	.word	0x2000428c
   1fa48:	0001f561 	.word	0x0001f561
   1fa4c:	20000118 	.word	0x20000118
   1fa50:	20004288 	.word	0x20004288
   1fa54:	0001f585 	.word	0x0001f585

0001fa58 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   1fa58:	b590      	push	{r4, r7, lr}
   1fa5a:	b083      	sub	sp, #12
   1fa5c:	af00      	add	r7, sp, #0
   1fa5e:	0004      	movs	r4, r0
   1fa60:	6039      	str	r1, [r7, #0]
   1fa62:	0010      	movs	r0, r2
   1fa64:	0019      	movs	r1, r3
   1fa66:	1dfb      	adds	r3, r7, #7
   1fa68:	1c22      	adds	r2, r4, #0
   1fa6a:	701a      	strb	r2, [r3, #0]
   1fa6c:	1dbb      	adds	r3, r7, #6
   1fa6e:	1c02      	adds	r2, r0, #0
   1fa70:	701a      	strb	r2, [r3, #0]
   1fa72:	1d7b      	adds	r3, r7, #5
   1fa74:	1c0a      	adds	r2, r1, #0
   1fa76:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fa78:	4b13      	ldr	r3, [pc, #76]	; (1fac8 <sd_mmc_spi_select_device+0x70>)
   1fa7a:	2200      	movs	r2, #0
   1fa7c:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   1fa7e:	683b      	ldr	r3, [r7, #0]
   1fa80:	4a12      	ldr	r2, [pc, #72]	; (1facc <sd_mmc_spi_select_device+0x74>)
   1fa82:	4293      	cmp	r3, r2
   1fa84:	d907      	bls.n	1fa96 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   1fa86:	4b11      	ldr	r3, [pc, #68]	; (1facc <sd_mmc_spi_select_device+0x74>)
   1fa88:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1fa8a:	e004      	b.n	1fa96 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   1fa8c:	683b      	ldr	r3, [r7, #0]
   1fa8e:	08db      	lsrs	r3, r3, #3
   1fa90:	683a      	ldr	r2, [r7, #0]
   1fa92:	1ad3      	subs	r3, r2, r3
   1fa94:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1fa96:	683a      	ldr	r2, [r7, #0]
   1fa98:	4b0d      	ldr	r3, [pc, #52]	; (1fad0 <sd_mmc_spi_select_device+0x78>)
   1fa9a:	0011      	movs	r1, r2
   1fa9c:	0018      	movs	r0, r3
   1fa9e:	4b0d      	ldr	r3, [pc, #52]	; (1fad4 <sd_mmc_spi_select_device+0x7c>)
   1faa0:	4798      	blx	r3
   1faa2:	0003      	movs	r3, r0
   1faa4:	2b17      	cmp	r3, #23
   1faa6:	d0f1      	beq.n	1fa8c <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   1faa8:	1dfb      	adds	r3, r7, #7
   1faaa:	781a      	ldrb	r2, [r3, #0]
   1faac:	0013      	movs	r3, r2
   1faae:	005b      	lsls	r3, r3, #1
   1fab0:	189b      	adds	r3, r3, r2
   1fab2:	4a09      	ldr	r2, [pc, #36]	; (1fad8 <sd_mmc_spi_select_device+0x80>)
   1fab4:	1899      	adds	r1, r3, r2
   1fab6:	4b06      	ldr	r3, [pc, #24]	; (1fad0 <sd_mmc_spi_select_device+0x78>)
   1fab8:	2201      	movs	r2, #1
   1faba:	0018      	movs	r0, r3
   1fabc:	4b07      	ldr	r3, [pc, #28]	; (1fadc <sd_mmc_spi_select_device+0x84>)
   1fabe:	4798      	blx	r3
}
   1fac0:	46c0      	nop			; (mov r8, r8)
   1fac2:	46bd      	mov	sp, r7
   1fac4:	b003      	add	sp, #12
   1fac6:	bd90      	pop	{r4, r7, pc}
   1fac8:	2000428f 	.word	0x2000428f
   1facc:	00989680 	.word	0x00989680
   1fad0:	2000424c 	.word	0x2000424c
   1fad4:	000279f9 	.word	0x000279f9
   1fad8:	20004288 	.word	0x20004288
   1fadc:	00027f95 	.word	0x00027f95

0001fae0 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   1fae0:	b580      	push	{r7, lr}
   1fae2:	b082      	sub	sp, #8
   1fae4:	af00      	add	r7, sp, #0
   1fae6:	0002      	movs	r2, r0
   1fae8:	1dfb      	adds	r3, r7, #7
   1faea:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1faec:	4b09      	ldr	r3, [pc, #36]	; (1fb14 <sd_mmc_spi_deselect_device+0x34>)
   1faee:	2200      	movs	r2, #0
   1faf0:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   1faf2:	1dfb      	adds	r3, r7, #7
   1faf4:	781a      	ldrb	r2, [r3, #0]
   1faf6:	0013      	movs	r3, r2
   1faf8:	005b      	lsls	r3, r3, #1
   1fafa:	189b      	adds	r3, r3, r2
   1fafc:	4a06      	ldr	r2, [pc, #24]	; (1fb18 <sd_mmc_spi_deselect_device+0x38>)
   1fafe:	1899      	adds	r1, r3, r2
   1fb00:	4b06      	ldr	r3, [pc, #24]	; (1fb1c <sd_mmc_spi_deselect_device+0x3c>)
   1fb02:	2200      	movs	r2, #0
   1fb04:	0018      	movs	r0, r3
   1fb06:	4b06      	ldr	r3, [pc, #24]	; (1fb20 <sd_mmc_spi_deselect_device+0x40>)
   1fb08:	4798      	blx	r3
}
   1fb0a:	46c0      	nop			; (mov r8, r8)
   1fb0c:	46bd      	mov	sp, r7
   1fb0e:	b002      	add	sp, #8
   1fb10:	bd80      	pop	{r7, pc}
   1fb12:	46c0      	nop			; (mov r8, r8)
   1fb14:	2000428f 	.word	0x2000428f
   1fb18:	20004288 	.word	0x20004288
   1fb1c:	2000424c 	.word	0x2000424c
   1fb20:	00027f95 	.word	0x00027f95

0001fb24 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   1fb24:	b580      	push	{r7, lr}
   1fb26:	b082      	sub	sp, #8
   1fb28:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   1fb2a:	1dbb      	adds	r3, r7, #6
   1fb2c:	22ff      	movs	r2, #255	; 0xff
   1fb2e:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fb30:	4b0c      	ldr	r3, [pc, #48]	; (1fb64 <sd_mmc_spi_send_clock+0x40>)
   1fb32:	2200      	movs	r2, #0
   1fb34:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   1fb36:	1dfb      	adds	r3, r7, #7
   1fb38:	2200      	movs	r2, #0
   1fb3a:	701a      	strb	r2, [r3, #0]
   1fb3c:	e00a      	b.n	1fb54 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   1fb3e:	1db9      	adds	r1, r7, #6
   1fb40:	4b09      	ldr	r3, [pc, #36]	; (1fb68 <sd_mmc_spi_send_clock+0x44>)
   1fb42:	2201      	movs	r2, #1
   1fb44:	0018      	movs	r0, r3
   1fb46:	4b09      	ldr	r3, [pc, #36]	; (1fb6c <sd_mmc_spi_send_clock+0x48>)
   1fb48:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   1fb4a:	1dfb      	adds	r3, r7, #7
   1fb4c:	781a      	ldrb	r2, [r3, #0]
   1fb4e:	1dfb      	adds	r3, r7, #7
   1fb50:	3201      	adds	r2, #1
   1fb52:	701a      	strb	r2, [r3, #0]
   1fb54:	1dfb      	adds	r3, r7, #7
   1fb56:	781b      	ldrb	r3, [r3, #0]
   1fb58:	2b09      	cmp	r3, #9
   1fb5a:	d9f0      	bls.n	1fb3e <sd_mmc_spi_send_clock+0x1a>
	}
}
   1fb5c:	46c0      	nop			; (mov r8, r8)
   1fb5e:	46bd      	mov	sp, r7
   1fb60:	b002      	add	sp, #8
   1fb62:	bd80      	pop	{r7, pc}
   1fb64:	2000428f 	.word	0x2000428f
   1fb68:	2000424c 	.word	0x2000424c
   1fb6c:	00028085 	.word	0x00028085

0001fb70 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   1fb70:	b590      	push	{r4, r7, lr}
   1fb72:	b085      	sub	sp, #20
   1fb74:	af02      	add	r7, sp, #8
   1fb76:	6078      	str	r0, [r7, #4]
   1fb78:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   1fb7a:	6839      	ldr	r1, [r7, #0]
   1fb7c:	6878      	ldr	r0, [r7, #4]
   1fb7e:	2300      	movs	r3, #0
   1fb80:	9300      	str	r3, [sp, #0]
   1fb82:	2300      	movs	r3, #0
   1fb84:	2200      	movs	r2, #0
   1fb86:	4c03      	ldr	r4, [pc, #12]	; (1fb94 <sd_mmc_spi_send_cmd+0x24>)
   1fb88:	47a0      	blx	r4
   1fb8a:	0003      	movs	r3, r0
}
   1fb8c:	0018      	movs	r0, r3
   1fb8e:	46bd      	mov	sp, r7
   1fb90:	b003      	add	sp, #12
   1fb92:	bd90      	pop	{r4, r7, pc}
   1fb94:	0001fb99 	.word	0x0001fb99

0001fb98 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   1fb98:	b590      	push	{r4, r7, lr}
   1fb9a:	b089      	sub	sp, #36	; 0x24
   1fb9c:	af00      	add	r7, sp, #0
   1fb9e:	60f8      	str	r0, [r7, #12]
   1fba0:	60b9      	str	r1, [r7, #8]
   1fba2:	0019      	movs	r1, r3
   1fba4:	1dbb      	adds	r3, r7, #6
   1fba6:	801a      	strh	r2, [r3, #0]
   1fba8:	1d3b      	adds	r3, r7, #4
   1fbaa:	1c0a      	adds	r2, r1, #0
   1fbac:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   1fbae:	231b      	movs	r3, #27
   1fbb0:	18fb      	adds	r3, r7, r3
   1fbb2:	22ff      	movs	r2, #255	; 0xff
   1fbb4:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   1fbb6:	231c      	movs	r3, #28
   1fbb8:	18fb      	adds	r3, r7, r3
   1fbba:	22ff      	movs	r2, #255	; 0xff
   1fbbc:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fbbe:	4b72      	ldr	r3, [pc, #456]	; (1fd88 <sd_mmc_spi_adtc_start+0x1f0>)
   1fbc0:	2200      	movs	r2, #0
   1fbc2:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   1fbc4:	68fb      	ldr	r3, [r7, #12]
   1fbc6:	b2db      	uxtb	r3, r3
   1fbc8:	223f      	movs	r2, #63	; 0x3f
   1fbca:	4013      	ands	r3, r2
   1fbcc:	b2db      	uxtb	r3, r3
   1fbce:	2240      	movs	r2, #64	; 0x40
   1fbd0:	4313      	orrs	r3, r2
   1fbd2:	b2da      	uxtb	r2, r3
   1fbd4:	2314      	movs	r3, #20
   1fbd6:	18fb      	adds	r3, r7, r3
   1fbd8:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   1fbda:	68bb      	ldr	r3, [r7, #8]
   1fbdc:	0e1b      	lsrs	r3, r3, #24
   1fbde:	b2da      	uxtb	r2, r3
   1fbe0:	2314      	movs	r3, #20
   1fbe2:	18fb      	adds	r3, r7, r3
   1fbe4:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   1fbe6:	68bb      	ldr	r3, [r7, #8]
   1fbe8:	0c1b      	lsrs	r3, r3, #16
   1fbea:	b2da      	uxtb	r2, r3
   1fbec:	2314      	movs	r3, #20
   1fbee:	18fb      	adds	r3, r7, r3
   1fbf0:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   1fbf2:	68bb      	ldr	r3, [r7, #8]
   1fbf4:	0a1b      	lsrs	r3, r3, #8
   1fbf6:	b2da      	uxtb	r2, r3
   1fbf8:	2314      	movs	r3, #20
   1fbfa:	18fb      	adds	r3, r7, r3
   1fbfc:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   1fbfe:	68bb      	ldr	r3, [r7, #8]
   1fc00:	b2da      	uxtb	r2, r3
   1fc02:	2314      	movs	r3, #20
   1fc04:	18fb      	adds	r3, r7, r3
   1fc06:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   1fc08:	2314      	movs	r3, #20
   1fc0a:	18fb      	adds	r3, r7, r3
   1fc0c:	2105      	movs	r1, #5
   1fc0e:	0018      	movs	r0, r3
   1fc10:	4b5e      	ldr	r3, [pc, #376]	; (1fd8c <sd_mmc_spi_adtc_start+0x1f4>)
   1fc12:	4798      	blx	r3
   1fc14:	0003      	movs	r3, r0
   1fc16:	001a      	movs	r2, r3
   1fc18:	2314      	movs	r3, #20
   1fc1a:	18fb      	adds	r3, r7, r3
   1fc1c:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   1fc1e:	231b      	movs	r3, #27
   1fc20:	18f9      	adds	r1, r7, r3
   1fc22:	4b5b      	ldr	r3, [pc, #364]	; (1fd90 <sd_mmc_spi_adtc_start+0x1f8>)
   1fc24:	2201      	movs	r2, #1
   1fc26:	0018      	movs	r0, r3
   1fc28:	4b5a      	ldr	r3, [pc, #360]	; (1fd94 <sd_mmc_spi_adtc_start+0x1fc>)
   1fc2a:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   1fc2c:	2314      	movs	r3, #20
   1fc2e:	18f9      	adds	r1, r7, r3
   1fc30:	4b57      	ldr	r3, [pc, #348]	; (1fd90 <sd_mmc_spi_adtc_start+0x1f8>)
   1fc32:	2206      	movs	r2, #6
   1fc34:	0018      	movs	r0, r3
   1fc36:	4b57      	ldr	r3, [pc, #348]	; (1fd94 <sd_mmc_spi_adtc_start+0x1fc>)
   1fc38:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   1fc3a:	2313      	movs	r3, #19
   1fc3c:	18fb      	adds	r3, r7, r3
   1fc3e:	22ff      	movs	r2, #255	; 0xff
   1fc40:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1fc42:	231c      	movs	r3, #28
   1fc44:	18fb      	adds	r3, r7, r3
   1fc46:	881b      	ldrh	r3, [r3, #0]
   1fc48:	2213      	movs	r2, #19
   1fc4a:	18b9      	adds	r1, r7, r2
   1fc4c:	4850      	ldr	r0, [pc, #320]	; (1fd90 <sd_mmc_spi_adtc_start+0x1f8>)
   1fc4e:	2201      	movs	r2, #1
   1fc50:	4c51      	ldr	r4, [pc, #324]	; (1fd98 <sd_mmc_spi_adtc_start+0x200>)
   1fc52:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   1fc54:	231f      	movs	r3, #31
   1fc56:	18fb      	adds	r3, r7, r3
   1fc58:	2207      	movs	r2, #7
   1fc5a:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1fc5c:	231c      	movs	r3, #28
   1fc5e:	18fb      	adds	r3, r7, r3
   1fc60:	881b      	ldrh	r3, [r3, #0]
   1fc62:	2213      	movs	r2, #19
   1fc64:	18b9      	adds	r1, r7, r2
   1fc66:	484a      	ldr	r0, [pc, #296]	; (1fd90 <sd_mmc_spi_adtc_start+0x1f8>)
   1fc68:	2201      	movs	r2, #1
   1fc6a:	4c4b      	ldr	r4, [pc, #300]	; (1fd98 <sd_mmc_spi_adtc_start+0x200>)
   1fc6c:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   1fc6e:	2313      	movs	r3, #19
   1fc70:	18fb      	adds	r3, r7, r3
   1fc72:	781b      	ldrb	r3, [r3, #0]
   1fc74:	b25b      	sxtb	r3, r3
   1fc76:	2b00      	cmp	r3, #0
   1fc78:	da10      	bge.n	1fc9c <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   1fc7a:	231f      	movs	r3, #31
   1fc7c:	18fb      	adds	r3, r7, r3
   1fc7e:	221f      	movs	r2, #31
   1fc80:	18ba      	adds	r2, r7, r2
   1fc82:	7812      	ldrb	r2, [r2, #0]
   1fc84:	3a01      	subs	r2, #1
   1fc86:	701a      	strb	r2, [r3, #0]
   1fc88:	231f      	movs	r3, #31
   1fc8a:	18fb      	adds	r3, r7, r3
   1fc8c:	781b      	ldrb	r3, [r3, #0]
   1fc8e:	2b00      	cmp	r3, #0
   1fc90:	d1e4      	bne.n	1fc5c <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   1fc92:	4b3d      	ldr	r3, [pc, #244]	; (1fd88 <sd_mmc_spi_adtc_start+0x1f0>)
   1fc94:	2202      	movs	r2, #2
   1fc96:	701a      	strb	r2, [r3, #0]
			return false;
   1fc98:	2300      	movs	r3, #0
   1fc9a:	e070      	b.n	1fd7e <sd_mmc_spi_adtc_start+0x1e6>
			break;
   1fc9c:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   1fc9e:	2313      	movs	r3, #19
   1fca0:	18fb      	adds	r3, r7, r3
   1fca2:	781b      	ldrb	r3, [r3, #0]
   1fca4:	001a      	movs	r2, r3
   1fca6:	4b3d      	ldr	r3, [pc, #244]	; (1fd9c <sd_mmc_spi_adtc_start+0x204>)
   1fca8:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   1fcaa:	2313      	movs	r3, #19
   1fcac:	18fb      	adds	r3, r7, r3
   1fcae:	781b      	ldrb	r3, [r3, #0]
   1fcb0:	001a      	movs	r2, r3
   1fcb2:	2308      	movs	r3, #8
   1fcb4:	4013      	ands	r3, r2
   1fcb6:	d004      	beq.n	1fcc2 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   1fcb8:	4b33      	ldr	r3, [pc, #204]	; (1fd88 <sd_mmc_spi_adtc_start+0x1f0>)
   1fcba:	2206      	movs	r2, #6
   1fcbc:	701a      	strb	r2, [r3, #0]
		return false;
   1fcbe:	2300      	movs	r3, #0
   1fcc0:	e05d      	b.n	1fd7e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   1fcc2:	2313      	movs	r3, #19
   1fcc4:	18fb      	adds	r3, r7, r3
   1fcc6:	781b      	ldrb	r3, [r3, #0]
   1fcc8:	001a      	movs	r2, r3
   1fcca:	2304      	movs	r3, #4
   1fccc:	4013      	ands	r3, r2
   1fcce:	d004      	beq.n	1fcda <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   1fcd0:	4b2d      	ldr	r3, [pc, #180]	; (1fd88 <sd_mmc_spi_adtc_start+0x1f0>)
   1fcd2:	2209      	movs	r2, #9
   1fcd4:	701a      	strb	r2, [r3, #0]
		return false;
   1fcd6:	2300      	movs	r3, #0
   1fcd8:	e051      	b.n	1fd7e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   1fcda:	2313      	movs	r3, #19
   1fcdc:	18fb      	adds	r3, r7, r3
   1fcde:	781b      	ldrb	r3, [r3, #0]
   1fce0:	001a      	movs	r2, r3
   1fce2:	2301      	movs	r3, #1
   1fce4:	439a      	bics	r2, r3
   1fce6:	1e13      	subs	r3, r2, #0
   1fce8:	d004      	beq.n	1fcf4 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1fcea:	4b27      	ldr	r3, [pc, #156]	; (1fd88 <sd_mmc_spi_adtc_start+0x1f0>)
   1fcec:	2201      	movs	r2, #1
   1fcee:	701a      	strb	r2, [r3, #0]
		return false;
   1fcf0:	2300      	movs	r3, #0
   1fcf2:	e044      	b.n	1fd7e <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   1fcf4:	68fa      	ldr	r2, [r7, #12]
   1fcf6:	2380      	movs	r3, #128	; 0x80
   1fcf8:	019b      	lsls	r3, r3, #6
   1fcfa:	4013      	ands	r3, r2
   1fcfc:	d00d      	beq.n	1fd1a <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   1fcfe:	4b28      	ldr	r3, [pc, #160]	; (1fda0 <sd_mmc_spi_adtc_start+0x208>)
   1fd00:	4798      	blx	r3
   1fd02:	0003      	movs	r3, r0
   1fd04:	001a      	movs	r2, r3
   1fd06:	2301      	movs	r3, #1
   1fd08:	4053      	eors	r3, r2
   1fd0a:	b2db      	uxtb	r3, r3
   1fd0c:	2b00      	cmp	r3, #0
   1fd0e:	d004      	beq.n	1fd1a <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   1fd10:	4b1d      	ldr	r3, [pc, #116]	; (1fd88 <sd_mmc_spi_adtc_start+0x1f0>)
   1fd12:	2203      	movs	r2, #3
   1fd14:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   1fd16:	2300      	movs	r3, #0
   1fd18:	e031      	b.n	1fd7e <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   1fd1a:	68fa      	ldr	r2, [r7, #12]
   1fd1c:	2380      	movs	r3, #128	; 0x80
   1fd1e:	009b      	lsls	r3, r3, #2
   1fd20:	4013      	ands	r3, r2
   1fd22:	d00e      	beq.n	1fd42 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   1fd24:	4b1d      	ldr	r3, [pc, #116]	; (1fd9c <sd_mmc_spi_adtc_start+0x204>)
   1fd26:	2200      	movs	r2, #0
   1fd28:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   1fd2a:	231c      	movs	r3, #28
   1fd2c:	18fb      	adds	r3, r7, r3
   1fd2e:	881b      	ldrh	r3, [r3, #0]
   1fd30:	491a      	ldr	r1, [pc, #104]	; (1fd9c <sd_mmc_spi_adtc_start+0x204>)
   1fd32:	4817      	ldr	r0, [pc, #92]	; (1fd90 <sd_mmc_spi_adtc_start+0x1f8>)
   1fd34:	2201      	movs	r2, #1
   1fd36:	4c18      	ldr	r4, [pc, #96]	; (1fd98 <sd_mmc_spi_adtc_start+0x200>)
   1fd38:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   1fd3a:	4b18      	ldr	r3, [pc, #96]	; (1fd9c <sd_mmc_spi_adtc_start+0x204>)
   1fd3c:	681a      	ldr	r2, [r3, #0]
   1fd3e:	4b17      	ldr	r3, [pc, #92]	; (1fd9c <sd_mmc_spi_adtc_start+0x204>)
   1fd40:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   1fd42:	68fa      	ldr	r2, [r7, #12]
   1fd44:	2380      	movs	r3, #128	; 0x80
   1fd46:	00db      	lsls	r3, r3, #3
   1fd48:	4013      	ands	r3, r2
   1fd4a:	d00c      	beq.n	1fd66 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   1fd4c:	231c      	movs	r3, #28
   1fd4e:	18fb      	adds	r3, r7, r3
   1fd50:	881b      	ldrh	r3, [r3, #0]
   1fd52:	4912      	ldr	r1, [pc, #72]	; (1fd9c <sd_mmc_spi_adtc_start+0x204>)
   1fd54:	480e      	ldr	r0, [pc, #56]	; (1fd90 <sd_mmc_spi_adtc_start+0x1f8>)
   1fd56:	2204      	movs	r2, #4
   1fd58:	4c0f      	ldr	r4, [pc, #60]	; (1fd98 <sd_mmc_spi_adtc_start+0x200>)
   1fd5a:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   1fd5c:	4b0f      	ldr	r3, [pc, #60]	; (1fd9c <sd_mmc_spi_adtc_start+0x204>)
   1fd5e:	681b      	ldr	r3, [r3, #0]
   1fd60:	ba1a      	rev	r2, r3
   1fd62:	4b0e      	ldr	r3, [pc, #56]	; (1fd9c <sd_mmc_spi_adtc_start+0x204>)
   1fd64:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   1fd66:	4b0f      	ldr	r3, [pc, #60]	; (1fda4 <sd_mmc_spi_adtc_start+0x20c>)
   1fd68:	1dba      	adds	r2, r7, #6
   1fd6a:	8812      	ldrh	r2, [r2, #0]
   1fd6c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   1fd6e:	4b0e      	ldr	r3, [pc, #56]	; (1fda8 <sd_mmc_spi_adtc_start+0x210>)
   1fd70:	1d3a      	adds	r2, r7, #4
   1fd72:	8812      	ldrh	r2, [r2, #0]
   1fd74:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   1fd76:	4b0d      	ldr	r3, [pc, #52]	; (1fdac <sd_mmc_spi_adtc_start+0x214>)
   1fd78:	2200      	movs	r2, #0
   1fd7a:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   1fd7c:	2301      	movs	r3, #1
}
   1fd7e:	0018      	movs	r0, r3
   1fd80:	46bd      	mov	sp, r7
   1fd82:	b009      	add	sp, #36	; 0x24
   1fd84:	bd90      	pop	{r4, r7, pc}
   1fd86:	46c0      	nop			; (mov r8, r8)
   1fd88:	2000428f 	.word	0x2000428f
   1fd8c:	0001f639 	.word	0x0001f639
   1fd90:	2000424c 	.word	0x2000424c
   1fd94:	00028085 	.word	0x00028085
   1fd98:	00027e61 	.word	0x00027e61
   1fd9c:	20004290 	.word	0x20004290
   1fda0:	0001f6f5 	.word	0x0001f6f5
   1fda4:	20004298 	.word	0x20004298
   1fda8:	2000429a 	.word	0x2000429a
   1fdac:	20004294 	.word	0x20004294

0001fdb0 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   1fdb0:	b580      	push	{r7, lr}
   1fdb2:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   1fdb4:	4b02      	ldr	r3, [pc, #8]	; (1fdc0 <sd_mmc_spi_get_response+0x10>)
   1fdb6:	681b      	ldr	r3, [r3, #0]
}
   1fdb8:	0018      	movs	r0, r3
   1fdba:	46bd      	mov	sp, r7
   1fdbc:	bd80      	pop	{r7, pc}
   1fdbe:	46c0      	nop			; (mov r8, r8)
   1fdc0:	20004290 	.word	0x20004290

0001fdc4 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   1fdc4:	b590      	push	{r4, r7, lr}
   1fdc6:	b085      	sub	sp, #20
   1fdc8:	af00      	add	r7, sp, #0
   1fdca:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   1fdcc:	230e      	movs	r3, #14
   1fdce:	18fb      	adds	r3, r7, r3
   1fdd0:	22ff      	movs	r2, #255	; 0xff
   1fdd2:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fdd4:	4b1c      	ldr	r3, [pc, #112]	; (1fe48 <sd_mmc_spi_read_word+0x84>)
   1fdd6:	2200      	movs	r2, #0
   1fdd8:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1fdda:	4b1c      	ldr	r3, [pc, #112]	; (1fe4c <sd_mmc_spi_read_word+0x88>)
   1fddc:	681a      	ldr	r2, [r3, #0]
   1fdde:	4b1c      	ldr	r3, [pc, #112]	; (1fe50 <sd_mmc_spi_read_word+0x8c>)
   1fde0:	881b      	ldrh	r3, [r3, #0]
   1fde2:	0019      	movs	r1, r3
   1fde4:	4b1b      	ldr	r3, [pc, #108]	; (1fe54 <sd_mmc_spi_read_word+0x90>)
   1fde6:	0010      	movs	r0, r2
   1fde8:	4798      	blx	r3
   1fdea:	1e0b      	subs	r3, r1, #0
   1fdec:	d10a      	bne.n	1fe04 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   1fdee:	4b1a      	ldr	r3, [pc, #104]	; (1fe58 <sd_mmc_spi_read_word+0x94>)
   1fdf0:	4798      	blx	r3
   1fdf2:	0003      	movs	r3, r0
   1fdf4:	001a      	movs	r2, r3
   1fdf6:	2301      	movs	r3, #1
   1fdf8:	4053      	eors	r3, r2
   1fdfa:	b2db      	uxtb	r3, r3
   1fdfc:	2b00      	cmp	r3, #0
   1fdfe:	d001      	beq.n	1fe04 <sd_mmc_spi_read_word+0x40>
			return false;
   1fe00:	2300      	movs	r3, #0
   1fe02:	e01d      	b.n	1fe40 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   1fe04:	230e      	movs	r3, #14
   1fe06:	18fb      	adds	r3, r7, r3
   1fe08:	881b      	ldrh	r3, [r3, #0]
   1fe0a:	1d39      	adds	r1, r7, #4
   1fe0c:	4813      	ldr	r0, [pc, #76]	; (1fe5c <sd_mmc_spi_read_word+0x98>)
   1fe0e:	2204      	movs	r2, #4
   1fe10:	4c13      	ldr	r4, [pc, #76]	; (1fe60 <sd_mmc_spi_read_word+0x9c>)
   1fe12:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   1fe14:	687b      	ldr	r3, [r7, #4]
   1fe16:	687a      	ldr	r2, [r7, #4]
   1fe18:	6812      	ldr	r2, [r2, #0]
   1fe1a:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   1fe1c:	4b0b      	ldr	r3, [pc, #44]	; (1fe4c <sd_mmc_spi_read_word+0x88>)
   1fe1e:	681b      	ldr	r3, [r3, #0]
   1fe20:	1d1a      	adds	r2, r3, #4
   1fe22:	4b0a      	ldr	r3, [pc, #40]	; (1fe4c <sd_mmc_spi_read_word+0x88>)
   1fe24:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1fe26:	4b09      	ldr	r3, [pc, #36]	; (1fe4c <sd_mmc_spi_read_word+0x88>)
   1fe28:	681a      	ldr	r2, [r3, #0]
   1fe2a:	4b09      	ldr	r3, [pc, #36]	; (1fe50 <sd_mmc_spi_read_word+0x8c>)
   1fe2c:	881b      	ldrh	r3, [r3, #0]
   1fe2e:	0019      	movs	r1, r3
   1fe30:	4b08      	ldr	r3, [pc, #32]	; (1fe54 <sd_mmc_spi_read_word+0x90>)
   1fe32:	0010      	movs	r0, r2
   1fe34:	4798      	blx	r3
   1fe36:	1e0b      	subs	r3, r1, #0
   1fe38:	d101      	bne.n	1fe3e <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   1fe3a:	4b0a      	ldr	r3, [pc, #40]	; (1fe64 <sd_mmc_spi_read_word+0xa0>)
   1fe3c:	4798      	blx	r3
	}
	return true;
   1fe3e:	2301      	movs	r3, #1
}
   1fe40:	0018      	movs	r0, r3
   1fe42:	46bd      	mov	sp, r7
   1fe44:	b005      	add	sp, #20
   1fe46:	bd90      	pop	{r4, r7, pc}
   1fe48:	2000428f 	.word	0x2000428f
   1fe4c:	20004294 	.word	0x20004294
   1fe50:	20004298 	.word	0x20004298
   1fe54:	00032911 	.word	0x00032911
   1fe58:	0001f761 	.word	0x0001f761
   1fe5c:	2000424c 	.word	0x2000424c
   1fe60:	00027e61 	.word	0x00027e61
   1fe64:	0001f7e5 	.word	0x0001f7e5

0001fe68 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   1fe68:	b590      	push	{r4, r7, lr}
   1fe6a:	b085      	sub	sp, #20
   1fe6c:	af00      	add	r7, sp, #0
   1fe6e:	6078      	str	r0, [r7, #4]
   1fe70:	000a      	movs	r2, r1
   1fe72:	1cbb      	adds	r3, r7, #2
   1fe74:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   1fe76:	230a      	movs	r3, #10
   1fe78:	18fb      	adds	r3, r7, r3
   1fe7a:	22ff      	movs	r2, #255	; 0xff
   1fe7c:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fe7e:	4b1c      	ldr	r3, [pc, #112]	; (1fef0 <sd_mmc_spi_start_read_blocks+0x88>)
   1fe80:	2200      	movs	r2, #0
   1fe82:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1fe84:	2300      	movs	r3, #0
   1fe86:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1fe88:	e025      	b.n	1fed6 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   1fe8a:	4b1a      	ldr	r3, [pc, #104]	; (1fef4 <sd_mmc_spi_start_read_blocks+0x8c>)
   1fe8c:	4798      	blx	r3
   1fe8e:	0003      	movs	r3, r0
   1fe90:	001a      	movs	r2, r3
   1fe92:	2301      	movs	r3, #1
   1fe94:	4053      	eors	r3, r2
   1fe96:	b2db      	uxtb	r3, r3
   1fe98:	2b00      	cmp	r3, #0
   1fe9a:	d001      	beq.n	1fea0 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   1fe9c:	2300      	movs	r3, #0
   1fe9e:	e022      	b.n	1fee6 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1fea0:	687a      	ldr	r2, [r7, #4]
   1fea2:	68fb      	ldr	r3, [r7, #12]
   1fea4:	18d1      	adds	r1, r2, r3
   1fea6:	4b14      	ldr	r3, [pc, #80]	; (1fef8 <sd_mmc_spi_start_read_blocks+0x90>)
   1fea8:	881a      	ldrh	r2, [r3, #0]
   1feaa:	230a      	movs	r3, #10
   1feac:	18fb      	adds	r3, r7, r3
   1feae:	881b      	ldrh	r3, [r3, #0]
   1feb0:	4812      	ldr	r0, [pc, #72]	; (1fefc <sd_mmc_spi_start_read_blocks+0x94>)
   1feb2:	4c13      	ldr	r4, [pc, #76]	; (1ff00 <sd_mmc_spi_start_read_blocks+0x98>)
   1feb4:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   1feb6:	4b10      	ldr	r3, [pc, #64]	; (1fef8 <sd_mmc_spi_start_read_blocks+0x90>)
   1feb8:	881b      	ldrh	r3, [r3, #0]
   1feba:	001a      	movs	r2, r3
   1febc:	68fb      	ldr	r3, [r7, #12]
   1febe:	189b      	adds	r3, r3, r2
   1fec0:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1fec2:	4b0d      	ldr	r3, [pc, #52]	; (1fef8 <sd_mmc_spi_start_read_blocks+0x90>)
   1fec4:	881b      	ldrh	r3, [r3, #0]
   1fec6:	001a      	movs	r2, r3
   1fec8:	4b0e      	ldr	r3, [pc, #56]	; (1ff04 <sd_mmc_spi_start_read_blocks+0x9c>)
   1feca:	681b      	ldr	r3, [r3, #0]
   1fecc:	18d2      	adds	r2, r2, r3
   1fece:	4b0d      	ldr	r3, [pc, #52]	; (1ff04 <sd_mmc_spi_start_read_blocks+0x9c>)
   1fed0:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   1fed2:	4b0d      	ldr	r3, [pc, #52]	; (1ff08 <sd_mmc_spi_start_read_blocks+0xa0>)
   1fed4:	4798      	blx	r3
	while (nb_block--) {
   1fed6:	1cbb      	adds	r3, r7, #2
   1fed8:	881b      	ldrh	r3, [r3, #0]
   1feda:	1cba      	adds	r2, r7, #2
   1fedc:	1e59      	subs	r1, r3, #1
   1fede:	8011      	strh	r1, [r2, #0]
   1fee0:	2b00      	cmp	r3, #0
   1fee2:	d1d2      	bne.n	1fe8a <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   1fee4:	2301      	movs	r3, #1
}
   1fee6:	0018      	movs	r0, r3
   1fee8:	46bd      	mov	sp, r7
   1feea:	b005      	add	sp, #20
   1feec:	bd90      	pop	{r4, r7, pc}
   1feee:	46c0      	nop			; (mov r8, r8)
   1fef0:	2000428f 	.word	0x2000428f
   1fef4:	0001f761 	.word	0x0001f761
   1fef8:	20004298 	.word	0x20004298
   1fefc:	2000424c 	.word	0x2000424c
   1ff00:	00027e61 	.word	0x00027e61
   1ff04:	20004294 	.word	0x20004294
   1ff08:	0001f7e5 	.word	0x0001f7e5

0001ff0c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   1ff0c:	b580      	push	{r7, lr}
   1ff0e:	af00      	add	r7, sp, #0
	return true;
   1ff10:	2301      	movs	r3, #1
}
   1ff12:	0018      	movs	r0, r3
   1ff14:	46bd      	mov	sp, r7
   1ff16:	bd80      	pop	{r7, pc}

0001ff18 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   1ff18:	b580      	push	{r7, lr}
   1ff1a:	b084      	sub	sp, #16
   1ff1c:	af00      	add	r7, sp, #0
   1ff1e:	6078      	str	r0, [r7, #4]
   1ff20:	000a      	movs	r2, r1
   1ff22:	1cbb      	adds	r3, r7, #2
   1ff24:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ff26:	4b24      	ldr	r3, [pc, #144]	; (1ffb8 <sd_mmc_spi_start_write_blocks+0xa0>)
   1ff28:	2200      	movs	r2, #0
   1ff2a:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1ff2c:	2300      	movs	r3, #0
   1ff2e:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1ff30:	e035      	b.n	1ff9e <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   1ff32:	4b22      	ldr	r3, [pc, #136]	; (1ffbc <sd_mmc_spi_start_write_blocks+0xa4>)
   1ff34:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1ff36:	687a      	ldr	r2, [r7, #4]
   1ff38:	68fb      	ldr	r3, [r7, #12]
   1ff3a:	18d1      	adds	r1, r2, r3
   1ff3c:	4b20      	ldr	r3, [pc, #128]	; (1ffc0 <sd_mmc_spi_start_write_blocks+0xa8>)
   1ff3e:	881a      	ldrh	r2, [r3, #0]
   1ff40:	4b20      	ldr	r3, [pc, #128]	; (1ffc4 <sd_mmc_spi_start_write_blocks+0xac>)
   1ff42:	0018      	movs	r0, r3
   1ff44:	4b20      	ldr	r3, [pc, #128]	; (1ffc8 <sd_mmc_spi_start_write_blocks+0xb0>)
   1ff46:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   1ff48:	4b1d      	ldr	r3, [pc, #116]	; (1ffc0 <sd_mmc_spi_start_write_blocks+0xa8>)
   1ff4a:	881b      	ldrh	r3, [r3, #0]
   1ff4c:	001a      	movs	r2, r3
   1ff4e:	68fb      	ldr	r3, [r7, #12]
   1ff50:	189b      	adds	r3, r3, r2
   1ff52:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1ff54:	4b1a      	ldr	r3, [pc, #104]	; (1ffc0 <sd_mmc_spi_start_write_blocks+0xa8>)
   1ff56:	881b      	ldrh	r3, [r3, #0]
   1ff58:	001a      	movs	r2, r3
   1ff5a:	4b1c      	ldr	r3, [pc, #112]	; (1ffcc <sd_mmc_spi_start_write_blocks+0xb4>)
   1ff5c:	681b      	ldr	r3, [r3, #0]
   1ff5e:	18d2      	adds	r2, r2, r3
   1ff60:	4b1a      	ldr	r3, [pc, #104]	; (1ffcc <sd_mmc_spi_start_write_blocks+0xb4>)
   1ff62:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   1ff64:	4b1a      	ldr	r3, [pc, #104]	; (1ffd0 <sd_mmc_spi_start_write_blocks+0xb8>)
   1ff66:	4798      	blx	r3
   1ff68:	0003      	movs	r3, r0
   1ff6a:	001a      	movs	r2, r3
   1ff6c:	2301      	movs	r3, #1
   1ff6e:	4053      	eors	r3, r2
   1ff70:	b2db      	uxtb	r3, r3
   1ff72:	2b00      	cmp	r3, #0
   1ff74:	d001      	beq.n	1ff7a <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   1ff76:	2300      	movs	r3, #0
   1ff78:	e019      	b.n	1ffae <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   1ff7a:	1cbb      	adds	r3, r7, #2
   1ff7c:	881b      	ldrh	r3, [r3, #0]
   1ff7e:	2b00      	cmp	r3, #0
   1ff80:	d00d      	beq.n	1ff9e <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   1ff82:	4b14      	ldr	r3, [pc, #80]	; (1ffd4 <sd_mmc_spi_start_write_blocks+0xbc>)
   1ff84:	4798      	blx	r3
   1ff86:	0003      	movs	r3, r0
   1ff88:	001a      	movs	r2, r3
   1ff8a:	2301      	movs	r3, #1
   1ff8c:	4053      	eors	r3, r2
   1ff8e:	b2db      	uxtb	r3, r3
   1ff90:	2b00      	cmp	r3, #0
   1ff92:	d004      	beq.n	1ff9e <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1ff94:	4b08      	ldr	r3, [pc, #32]	; (1ffb8 <sd_mmc_spi_start_write_blocks+0xa0>)
   1ff96:	2205      	movs	r2, #5
   1ff98:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1ff9a:	2300      	movs	r3, #0
   1ff9c:	e007      	b.n	1ffae <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   1ff9e:	1cbb      	adds	r3, r7, #2
   1ffa0:	881b      	ldrh	r3, [r3, #0]
   1ffa2:	1cba      	adds	r2, r7, #2
   1ffa4:	1e59      	subs	r1, r3, #1
   1ffa6:	8011      	strh	r1, [r2, #0]
   1ffa8:	2b00      	cmp	r3, #0
   1ffaa:	d1c2      	bne.n	1ff32 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   1ffac:	2301      	movs	r3, #1
}
   1ffae:	0018      	movs	r0, r3
   1ffb0:	46bd      	mov	sp, r7
   1ffb2:	b004      	add	sp, #16
   1ffb4:	bd80      	pop	{r7, pc}
   1ffb6:	46c0      	nop			; (mov r8, r8)
   1ffb8:	2000428f 	.word	0x2000428f
   1ffbc:	0001f811 	.word	0x0001f811
   1ffc0:	20004298 	.word	0x20004298
   1ffc4:	2000424c 	.word	0x2000424c
   1ffc8:	00028085 	.word	0x00028085
   1ffcc:	20004294 	.word	0x20004294
   1ffd0:	0001f861 	.word	0x0001f861
   1ffd4:	0001f6f5 	.word	0x0001f6f5

0001ffd8 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   1ffd8:	b580      	push	{r7, lr}
   1ffda:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   1ffdc:	4b09      	ldr	r3, [pc, #36]	; (20004 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   1ffde:	4798      	blx	r3
   1ffe0:	0003      	movs	r3, r0
   1ffe2:	001a      	movs	r2, r3
   1ffe4:	2301      	movs	r3, #1
   1ffe6:	4053      	eors	r3, r2
   1ffe8:	b2db      	uxtb	r3, r3
   1ffea:	2b00      	cmp	r3, #0
   1ffec:	d004      	beq.n	1fff8 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1ffee:	4b06      	ldr	r3, [pc, #24]	; (20008 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   1fff0:	2205      	movs	r2, #5
   1fff2:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   1fff4:	2300      	movs	r3, #0
   1fff6:	e002      	b.n	1fffe <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   1fff8:	4b04      	ldr	r3, [pc, #16]	; (2000c <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   1fffa:	4798      	blx	r3
   1fffc:	0003      	movs	r3, r0
}
   1fffe:	0018      	movs	r0, r3
   20000:	46bd      	mov	sp, r7
   20002:	bd80      	pop	{r7, pc}
   20004:	0001f6f5 	.word	0x0001f6f5
   20008:	2000428f 	.word	0x2000428f
   2000c:	0001f8f5 	.word	0x0001f8f5

00020010 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   20010:	b580      	push	{r7, lr}
   20012:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   20014:	2000      	movs	r0, #0
   20016:	4b0f      	ldr	r3, [pc, #60]	; (20054 <delay_init+0x44>)
   20018:	4798      	blx	r3
   2001a:	0002      	movs	r2, r0
   2001c:	4b0e      	ldr	r3, [pc, #56]	; (20058 <delay_init+0x48>)
   2001e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   20020:	4b0d      	ldr	r3, [pc, #52]	; (20058 <delay_init+0x48>)
   20022:	6818      	ldr	r0, [r3, #0]
   20024:	4b0d      	ldr	r3, [pc, #52]	; (2005c <delay_init+0x4c>)
   20026:	22fa      	movs	r2, #250	; 0xfa
   20028:	0091      	lsls	r1, r2, #2
   2002a:	4798      	blx	r3
   2002c:	0003      	movs	r3, r0
   2002e:	001a      	movs	r2, r3
   20030:	4b09      	ldr	r3, [pc, #36]	; (20058 <delay_init+0x48>)
   20032:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   20034:	4b08      	ldr	r3, [pc, #32]	; (20058 <delay_init+0x48>)
   20036:	6818      	ldr	r0, [r3, #0]
   20038:	4b08      	ldr	r3, [pc, #32]	; (2005c <delay_init+0x4c>)
   2003a:	22fa      	movs	r2, #250	; 0xfa
   2003c:	0091      	lsls	r1, r2, #2
   2003e:	4798      	blx	r3
   20040:	0003      	movs	r3, r0
   20042:	001a      	movs	r2, r3
   20044:	4b06      	ldr	r3, [pc, #24]	; (20060 <delay_init+0x50>)
   20046:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   20048:	4b06      	ldr	r3, [pc, #24]	; (20064 <delay_init+0x54>)
   2004a:	2205      	movs	r2, #5
   2004c:	601a      	str	r2, [r3, #0]
}
   2004e:	46c0      	nop			; (mov r8, r8)
   20050:	46bd      	mov	sp, r7
   20052:	bd80      	pop	{r7, pc}
   20054:	00029c09 	.word	0x00029c09
   20058:	2000011c 	.word	0x2000011c
   2005c:	00032805 	.word	0x00032805
   20060:	20000120 	.word	0x20000120
   20064:	e000e010 	.word	0xe000e010

00020068 <system_pinmux_get_group_from_gpio_pin>:
{
   20068:	b580      	push	{r7, lr}
   2006a:	b084      	sub	sp, #16
   2006c:	af00      	add	r7, sp, #0
   2006e:	0002      	movs	r2, r0
   20070:	1dfb      	adds	r3, r7, #7
   20072:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20074:	230f      	movs	r3, #15
   20076:	18fb      	adds	r3, r7, r3
   20078:	1dfa      	adds	r2, r7, #7
   2007a:	7812      	ldrb	r2, [r2, #0]
   2007c:	09d2      	lsrs	r2, r2, #7
   2007e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20080:	230e      	movs	r3, #14
   20082:	18fb      	adds	r3, r7, r3
   20084:	1dfa      	adds	r2, r7, #7
   20086:	7812      	ldrb	r2, [r2, #0]
   20088:	0952      	lsrs	r2, r2, #5
   2008a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2008c:	4b0d      	ldr	r3, [pc, #52]	; (200c4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2008e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   20090:	230f      	movs	r3, #15
   20092:	18fb      	adds	r3, r7, r3
   20094:	781b      	ldrb	r3, [r3, #0]
   20096:	2b00      	cmp	r3, #0
   20098:	d10f      	bne.n	200ba <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2009a:	230f      	movs	r3, #15
   2009c:	18fb      	adds	r3, r7, r3
   2009e:	781b      	ldrb	r3, [r3, #0]
   200a0:	009b      	lsls	r3, r3, #2
   200a2:	2210      	movs	r2, #16
   200a4:	4694      	mov	ip, r2
   200a6:	44bc      	add	ip, r7
   200a8:	4463      	add	r3, ip
   200aa:	3b08      	subs	r3, #8
   200ac:	681a      	ldr	r2, [r3, #0]
   200ae:	230e      	movs	r3, #14
   200b0:	18fb      	adds	r3, r7, r3
   200b2:	781b      	ldrb	r3, [r3, #0]
   200b4:	01db      	lsls	r3, r3, #7
   200b6:	18d3      	adds	r3, r2, r3
   200b8:	e000      	b.n	200bc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   200ba:	2300      	movs	r3, #0
}
   200bc:	0018      	movs	r0, r3
   200be:	46bd      	mov	sp, r7
   200c0:	b004      	add	sp, #16
   200c2:	bd80      	pop	{r7, pc}
   200c4:	41004400 	.word	0x41004400

000200c8 <system_interrupt_enable_global>:
{
   200c8:	b580      	push	{r7, lr}
   200ca:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   200cc:	4b04      	ldr	r3, [pc, #16]	; (200e0 <system_interrupt_enable_global+0x18>)
   200ce:	2201      	movs	r2, #1
   200d0:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   200d2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   200d6:	b662      	cpsie	i
}
   200d8:	46c0      	nop			; (mov r8, r8)
   200da:	46bd      	mov	sp, r7
   200dc:	bd80      	pop	{r7, pc}
   200de:	46c0      	nop			; (mov r8, r8)
   200e0:	20000126 	.word	0x20000126

000200e4 <port_get_group_from_gpio_pin>:
{
   200e4:	b580      	push	{r7, lr}
   200e6:	b082      	sub	sp, #8
   200e8:	af00      	add	r7, sp, #0
   200ea:	0002      	movs	r2, r0
   200ec:	1dfb      	adds	r3, r7, #7
   200ee:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   200f0:	1dfb      	adds	r3, r7, #7
   200f2:	781b      	ldrb	r3, [r3, #0]
   200f4:	0018      	movs	r0, r3
   200f6:	4b03      	ldr	r3, [pc, #12]	; (20104 <port_get_group_from_gpio_pin+0x20>)
   200f8:	4798      	blx	r3
   200fa:	0003      	movs	r3, r0
}
   200fc:	0018      	movs	r0, r3
   200fe:	46bd      	mov	sp, r7
   20100:	b002      	add	sp, #8
   20102:	bd80      	pop	{r7, pc}
   20104:	00020069 	.word	0x00020069

00020108 <port_get_config_defaults>:
{
   20108:	b580      	push	{r7, lr}
   2010a:	b082      	sub	sp, #8
   2010c:	af00      	add	r7, sp, #0
   2010e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   20110:	687b      	ldr	r3, [r7, #4]
   20112:	2200      	movs	r2, #0
   20114:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   20116:	687b      	ldr	r3, [r7, #4]
   20118:	2201      	movs	r2, #1
   2011a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   2011c:	687b      	ldr	r3, [r7, #4]
   2011e:	2200      	movs	r2, #0
   20120:	709a      	strb	r2, [r3, #2]
}
   20122:	46c0      	nop			; (mov r8, r8)
   20124:	46bd      	mov	sp, r7
   20126:	b002      	add	sp, #8
   20128:	bd80      	pop	{r7, pc}
	...

0002012c <port_pin_set_output_level>:
{
   2012c:	b580      	push	{r7, lr}
   2012e:	b084      	sub	sp, #16
   20130:	af00      	add	r7, sp, #0
   20132:	0002      	movs	r2, r0
   20134:	1dfb      	adds	r3, r7, #7
   20136:	701a      	strb	r2, [r3, #0]
   20138:	1dbb      	adds	r3, r7, #6
   2013a:	1c0a      	adds	r2, r1, #0
   2013c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2013e:	1dfb      	adds	r3, r7, #7
   20140:	781b      	ldrb	r3, [r3, #0]
   20142:	0018      	movs	r0, r3
   20144:	4b0d      	ldr	r3, [pc, #52]	; (2017c <port_pin_set_output_level+0x50>)
   20146:	4798      	blx	r3
   20148:	0003      	movs	r3, r0
   2014a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2014c:	1dfb      	adds	r3, r7, #7
   2014e:	781b      	ldrb	r3, [r3, #0]
   20150:	221f      	movs	r2, #31
   20152:	4013      	ands	r3, r2
   20154:	2201      	movs	r2, #1
   20156:	409a      	lsls	r2, r3
   20158:	0013      	movs	r3, r2
   2015a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2015c:	1dbb      	adds	r3, r7, #6
   2015e:	781b      	ldrb	r3, [r3, #0]
   20160:	2b00      	cmp	r3, #0
   20162:	d003      	beq.n	2016c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   20164:	68fb      	ldr	r3, [r7, #12]
   20166:	68ba      	ldr	r2, [r7, #8]
   20168:	619a      	str	r2, [r3, #24]
}
   2016a:	e002      	b.n	20172 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2016c:	68fb      	ldr	r3, [r7, #12]
   2016e:	68ba      	ldr	r2, [r7, #8]
   20170:	615a      	str	r2, [r3, #20]
}
   20172:	46c0      	nop			; (mov r8, r8)
   20174:	46bd      	mov	sp, r7
   20176:	b004      	add	sp, #16
   20178:	bd80      	pop	{r7, pc}
   2017a:	46c0      	nop			; (mov r8, r8)
   2017c:	000200e5 	.word	0x000200e5

00020180 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   20180:	b580      	push	{r7, lr}
   20182:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   20184:	4b04      	ldr	r3, [pc, #16]	; (20198 <chip_isr+0x18>)
   20186:	681b      	ldr	r3, [r3, #0]
   20188:	2b00      	cmp	r3, #0
   2018a:	d002      	beq.n	20192 <chip_isr+0x12>
		gpfIsr();
   2018c:	4b02      	ldr	r3, [pc, #8]	; (20198 <chip_isr+0x18>)
   2018e:	681b      	ldr	r3, [r3, #0]
   20190:	4798      	blx	r3
	}
}
   20192:	46c0      	nop			; (mov r8, r8)
   20194:	46bd      	mov	sp, r7
   20196:	bd80      	pop	{r7, pc}
   20198:	2000429c 	.word	0x2000429c

0002019c <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   2019c:	b580      	push	{r7, lr}
   2019e:	b082      	sub	sp, #8
   201a0:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   201a2:	1d3b      	adds	r3, r7, #4
   201a4:	0018      	movs	r0, r3
   201a6:	4b10      	ldr	r3, [pc, #64]	; (201e8 <init_chip_pins+0x4c>)
   201a8:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   201aa:	1d3b      	adds	r3, r7, #4
   201ac:	2201      	movs	r2, #1
   201ae:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   201b0:	1d3b      	adds	r3, r7, #4
   201b2:	0019      	movs	r1, r3
   201b4:	201b      	movs	r0, #27
   201b6:	4b0d      	ldr	r3, [pc, #52]	; (201ec <init_chip_pins+0x50>)
   201b8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   201ba:	1d3b      	adds	r3, r7, #4
   201bc:	0019      	movs	r1, r3
   201be:	201c      	movs	r0, #28
   201c0:	4b0a      	ldr	r3, [pc, #40]	; (201ec <init_chip_pins+0x50>)
   201c2:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   201c4:	1d3b      	adds	r3, r7, #4
   201c6:	0019      	movs	r1, r3
   201c8:	2028      	movs	r0, #40	; 0x28
   201ca:	4b08      	ldr	r3, [pc, #32]	; (201ec <init_chip_pins+0x50>)
   201cc:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   201ce:	2100      	movs	r1, #0
   201d0:	201c      	movs	r0, #28
   201d2:	4b07      	ldr	r3, [pc, #28]	; (201f0 <init_chip_pins+0x54>)
   201d4:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   201d6:	2100      	movs	r1, #0
   201d8:	201b      	movs	r0, #27
   201da:	4b05      	ldr	r3, [pc, #20]	; (201f0 <init_chip_pins+0x54>)
   201dc:	4798      	blx	r3
}
   201de:	46c0      	nop			; (mov r8, r8)
   201e0:	46bd      	mov	sp, r7
   201e2:	b002      	add	sp, #8
   201e4:	bd80      	pop	{r7, pc}
   201e6:	46c0      	nop			; (mov r8, r8)
   201e8:	00020109 	.word	0x00020109
   201ec:	00026851 	.word	0x00026851
   201f0:	0002012d 	.word	0x0002012d

000201f4 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   201f4:	b580      	push	{r7, lr}
   201f6:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   201f8:	4b0b      	ldr	r3, [pc, #44]	; (20228 <nm_bsp_init+0x34>)
   201fa:	2200      	movs	r2, #0
   201fc:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   201fe:	4b0b      	ldr	r3, [pc, #44]	; (2022c <nm_bsp_init+0x38>)
   20200:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   20202:	4b0b      	ldr	r3, [pc, #44]	; (20230 <nm_bsp_init+0x3c>)
   20204:	681b      	ldr	r3, [r3, #0]
   20206:	2201      	movs	r2, #1
   20208:	4013      	ands	r3, r2
   2020a:	d004      	beq.n	20216 <nm_bsp_init+0x22>
   2020c:	4b08      	ldr	r3, [pc, #32]	; (20230 <nm_bsp_init+0x3c>)
   2020e:	681b      	ldr	r3, [r3, #0]
   20210:	2202      	movs	r2, #2
   20212:	4013      	ands	r3, r2
   20214:	d101      	bne.n	2021a <nm_bsp_init+0x26>
	    delay_init();
   20216:	4b07      	ldr	r3, [pc, #28]	; (20234 <nm_bsp_init+0x40>)
   20218:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   2021a:	4b07      	ldr	r3, [pc, #28]	; (20238 <nm_bsp_init+0x44>)
   2021c:	4798      	blx	r3

	return M2M_SUCCESS;
   2021e:	2300      	movs	r3, #0
}
   20220:	0018      	movs	r0, r3
   20222:	46bd      	mov	sp, r7
   20224:	bd80      	pop	{r7, pc}
   20226:	46c0      	nop			; (mov r8, r8)
   20228:	2000429c 	.word	0x2000429c
   2022c:	0002019d 	.word	0x0002019d
   20230:	e000e010 	.word	0xe000e010
   20234:	00020011 	.word	0x00020011
   20238:	000200c9 	.word	0x000200c9

0002023c <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   2023c:	b580      	push	{r7, lr}
   2023e:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   20240:	2100      	movs	r1, #0
   20242:	201c      	movs	r0, #28
   20244:	4b0b      	ldr	r3, [pc, #44]	; (20274 <nm_bsp_reset+0x38>)
   20246:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   20248:	2100      	movs	r1, #0
   2024a:	201b      	movs	r0, #27
   2024c:	4b09      	ldr	r3, [pc, #36]	; (20274 <nm_bsp_reset+0x38>)
   2024e:	4798      	blx	r3
	nm_bsp_sleep(1);
   20250:	2001      	movs	r0, #1
   20252:	4b09      	ldr	r3, [pc, #36]	; (20278 <nm_bsp_reset+0x3c>)
   20254:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   20256:	2101      	movs	r1, #1
   20258:	201c      	movs	r0, #28
   2025a:	4b06      	ldr	r3, [pc, #24]	; (20274 <nm_bsp_reset+0x38>)
   2025c:	4798      	blx	r3
	nm_bsp_sleep(10);
   2025e:	200a      	movs	r0, #10
   20260:	4b05      	ldr	r3, [pc, #20]	; (20278 <nm_bsp_reset+0x3c>)
   20262:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   20264:	2101      	movs	r1, #1
   20266:	201b      	movs	r0, #27
   20268:	4b02      	ldr	r3, [pc, #8]	; (20274 <nm_bsp_reset+0x38>)
   2026a:	4798      	blx	r3
}
   2026c:	46c0      	nop			; (mov r8, r8)
   2026e:	46bd      	mov	sp, r7
   20270:	bd80      	pop	{r7, pc}
   20272:	46c0      	nop			; (mov r8, r8)
   20274:	0002012d 	.word	0x0002012d
   20278:	0002027d 	.word	0x0002027d

0002027c <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   2027c:	b580      	push	{r7, lr}
   2027e:	b082      	sub	sp, #8
   20280:	af00      	add	r7, sp, #0
   20282:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   20284:	687b      	ldr	r3, [r7, #4]
   20286:	0018      	movs	r0, r3
   20288:	4b02      	ldr	r3, [pc, #8]	; (20294 <nm_bsp_sleep+0x18>)
   2028a:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   2028c:	46c0      	nop			; (mov r8, r8)
   2028e:	46bd      	mov	sp, r7
   20290:	b002      	add	sp, #8
   20292:	bd80      	pop	{r7, pc}
   20294:	0001c091 	.word	0x0001c091

00020298 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   20298:	b580      	push	{r7, lr}
   2029a:	b086      	sub	sp, #24
   2029c:	af00      	add	r7, sp, #0
   2029e:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   202a0:	4b15      	ldr	r3, [pc, #84]	; (202f8 <nm_bsp_register_isr+0x60>)
   202a2:	687a      	ldr	r2, [r7, #4]
   202a4:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   202a6:	230c      	movs	r3, #12
   202a8:	18fb      	adds	r3, r7, r3
   202aa:	0018      	movs	r0, r3
   202ac:	4b13      	ldr	r3, [pc, #76]	; (202fc <nm_bsp_register_isr+0x64>)
   202ae:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   202b0:	230c      	movs	r3, #12
   202b2:	18fb      	adds	r3, r7, r3
   202b4:	2229      	movs	r2, #41	; 0x29
   202b6:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   202b8:	230c      	movs	r3, #12
   202ba:	18fb      	adds	r3, r7, r3
   202bc:	2200      	movs	r2, #0
   202be:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   202c0:	230c      	movs	r3, #12
   202c2:	18fb      	adds	r3, r7, r3
   202c4:	2201      	movs	r2, #1
   202c6:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   202c8:	230c      	movs	r3, #12
   202ca:	18fb      	adds	r3, r7, r3
   202cc:	2202      	movs	r2, #2
   202ce:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   202d0:	230c      	movs	r3, #12
   202d2:	18fb      	adds	r3, r7, r3
   202d4:	0019      	movs	r1, r3
   202d6:	2009      	movs	r0, #9
   202d8:	4b09      	ldr	r3, [pc, #36]	; (20300 <nm_bsp_register_isr+0x68>)
   202da:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   202dc:	4b09      	ldr	r3, [pc, #36]	; (20304 <nm_bsp_register_isr+0x6c>)
   202de:	2200      	movs	r2, #0
   202e0:	2109      	movs	r1, #9
   202e2:	0018      	movs	r0, r3
   202e4:	4b08      	ldr	r3, [pc, #32]	; (20308 <nm_bsp_register_isr+0x70>)
   202e6:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   202e8:	2100      	movs	r1, #0
   202ea:	2009      	movs	r0, #9
   202ec:	4b07      	ldr	r3, [pc, #28]	; (2030c <nm_bsp_register_isr+0x74>)
   202ee:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   202f0:	46c0      	nop			; (mov r8, r8)
   202f2:	46bd      	mov	sp, r7
   202f4:	b006      	add	sp, #24
   202f6:	bd80      	pop	{r7, pc}
   202f8:	2000429c 	.word	0x2000429c
   202fc:	000266f9 	.word	0x000266f9
   20300:	0002672d 	.word	0x0002672d
   20304:	00020181 	.word	0x00020181
   20308:	000262f9 	.word	0x000262f9
   2030c:	0002635d 	.word	0x0002635d

00020310 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   20310:	b580      	push	{r7, lr}
   20312:	b082      	sub	sp, #8
   20314:	af00      	add	r7, sp, #0
   20316:	0002      	movs	r2, r0
   20318:	1dfb      	adds	r3, r7, #7
   2031a:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   2031c:	1dfb      	adds	r3, r7, #7
   2031e:	781b      	ldrb	r3, [r3, #0]
   20320:	2b00      	cmp	r3, #0
   20322:	d004      	beq.n	2032e <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   20324:	2100      	movs	r1, #0
   20326:	2009      	movs	r0, #9
   20328:	4b05      	ldr	r3, [pc, #20]	; (20340 <nm_bsp_interrupt_ctrl+0x30>)
   2032a:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   2032c:	e003      	b.n	20336 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   2032e:	2100      	movs	r1, #0
   20330:	2009      	movs	r0, #9
   20332:	4b04      	ldr	r3, [pc, #16]	; (20344 <nm_bsp_interrupt_ctrl+0x34>)
   20334:	4798      	blx	r3
}
   20336:	46c0      	nop			; (mov r8, r8)
   20338:	46bd      	mov	sp, r7
   2033a:	b002      	add	sp, #8
   2033c:	bd80      	pop	{r7, pc}
   2033e:	46c0      	nop			; (mov r8, r8)
   20340:	0002635d 	.word	0x0002635d
   20344:	000263a5 	.word	0x000263a5

00020348 <system_pinmux_get_group_from_gpio_pin>:
{
   20348:	b580      	push	{r7, lr}
   2034a:	b084      	sub	sp, #16
   2034c:	af00      	add	r7, sp, #0
   2034e:	0002      	movs	r2, r0
   20350:	1dfb      	adds	r3, r7, #7
   20352:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20354:	230f      	movs	r3, #15
   20356:	18fb      	adds	r3, r7, r3
   20358:	1dfa      	adds	r2, r7, #7
   2035a:	7812      	ldrb	r2, [r2, #0]
   2035c:	09d2      	lsrs	r2, r2, #7
   2035e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20360:	230e      	movs	r3, #14
   20362:	18fb      	adds	r3, r7, r3
   20364:	1dfa      	adds	r2, r7, #7
   20366:	7812      	ldrb	r2, [r2, #0]
   20368:	0952      	lsrs	r2, r2, #5
   2036a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2036c:	4b0d      	ldr	r3, [pc, #52]	; (203a4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2036e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   20370:	230f      	movs	r3, #15
   20372:	18fb      	adds	r3, r7, r3
   20374:	781b      	ldrb	r3, [r3, #0]
   20376:	2b00      	cmp	r3, #0
   20378:	d10f      	bne.n	2039a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2037a:	230f      	movs	r3, #15
   2037c:	18fb      	adds	r3, r7, r3
   2037e:	781b      	ldrb	r3, [r3, #0]
   20380:	009b      	lsls	r3, r3, #2
   20382:	2210      	movs	r2, #16
   20384:	4694      	mov	ip, r2
   20386:	44bc      	add	ip, r7
   20388:	4463      	add	r3, ip
   2038a:	3b08      	subs	r3, #8
   2038c:	681a      	ldr	r2, [r3, #0]
   2038e:	230e      	movs	r3, #14
   20390:	18fb      	adds	r3, r7, r3
   20392:	781b      	ldrb	r3, [r3, #0]
   20394:	01db      	lsls	r3, r3, #7
   20396:	18d3      	adds	r3, r2, r3
   20398:	e000      	b.n	2039c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2039a:	2300      	movs	r3, #0
}
   2039c:	0018      	movs	r0, r3
   2039e:	46bd      	mov	sp, r7
   203a0:	b004      	add	sp, #16
   203a2:	bd80      	pop	{r7, pc}
   203a4:	41004400 	.word	0x41004400

000203a8 <system_interrupt_enable>:
{
   203a8:	b580      	push	{r7, lr}
   203aa:	b082      	sub	sp, #8
   203ac:	af00      	add	r7, sp, #0
   203ae:	0002      	movs	r2, r0
   203b0:	1dfb      	adds	r3, r7, #7
   203b2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   203b4:	4b06      	ldr	r3, [pc, #24]	; (203d0 <system_interrupt_enable+0x28>)
   203b6:	1dfa      	adds	r2, r7, #7
   203b8:	7812      	ldrb	r2, [r2, #0]
   203ba:	0011      	movs	r1, r2
   203bc:	221f      	movs	r2, #31
   203be:	400a      	ands	r2, r1
   203c0:	2101      	movs	r1, #1
   203c2:	4091      	lsls	r1, r2
   203c4:	000a      	movs	r2, r1
   203c6:	601a      	str	r2, [r3, #0]
}
   203c8:	46c0      	nop			; (mov r8, r8)
   203ca:	46bd      	mov	sp, r7
   203cc:	b002      	add	sp, #8
   203ce:	bd80      	pop	{r7, pc}
   203d0:	e000e100 	.word	0xe000e100

000203d4 <system_interrupt_disable>:
{
   203d4:	b580      	push	{r7, lr}
   203d6:	b082      	sub	sp, #8
   203d8:	af00      	add	r7, sp, #0
   203da:	0002      	movs	r2, r0
   203dc:	1dfb      	adds	r3, r7, #7
   203de:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   203e0:	4a07      	ldr	r2, [pc, #28]	; (20400 <system_interrupt_disable+0x2c>)
   203e2:	1dfb      	adds	r3, r7, #7
   203e4:	781b      	ldrb	r3, [r3, #0]
   203e6:	0019      	movs	r1, r3
   203e8:	231f      	movs	r3, #31
   203ea:	400b      	ands	r3, r1
   203ec:	2101      	movs	r1, #1
   203ee:	4099      	lsls	r1, r3
   203f0:	000b      	movs	r3, r1
   203f2:	0019      	movs	r1, r3
   203f4:	2380      	movs	r3, #128	; 0x80
   203f6:	50d1      	str	r1, [r2, r3]
}
   203f8:	46c0      	nop			; (mov r8, r8)
   203fa:	46bd      	mov	sp, r7
   203fc:	b002      	add	sp, #8
   203fe:	bd80      	pop	{r7, pc}
   20400:	e000e100 	.word	0xe000e100

00020404 <port_get_group_from_gpio_pin>:
{
   20404:	b580      	push	{r7, lr}
   20406:	b082      	sub	sp, #8
   20408:	af00      	add	r7, sp, #0
   2040a:	0002      	movs	r2, r0
   2040c:	1dfb      	adds	r3, r7, #7
   2040e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20410:	1dfb      	adds	r3, r7, #7
   20412:	781b      	ldrb	r3, [r3, #0]
   20414:	0018      	movs	r0, r3
   20416:	4b03      	ldr	r3, [pc, #12]	; (20424 <port_get_group_from_gpio_pin+0x20>)
   20418:	4798      	blx	r3
   2041a:	0003      	movs	r3, r0
}
   2041c:	0018      	movs	r0, r3
   2041e:	46bd      	mov	sp, r7
   20420:	b002      	add	sp, #8
   20422:	bd80      	pop	{r7, pc}
   20424:	00020349 	.word	0x00020349

00020428 <port_get_config_defaults>:
{
   20428:	b580      	push	{r7, lr}
   2042a:	b082      	sub	sp, #8
   2042c:	af00      	add	r7, sp, #0
   2042e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   20430:	687b      	ldr	r3, [r7, #4]
   20432:	2200      	movs	r2, #0
   20434:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   20436:	687b      	ldr	r3, [r7, #4]
   20438:	2201      	movs	r2, #1
   2043a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   2043c:	687b      	ldr	r3, [r7, #4]
   2043e:	2200      	movs	r2, #0
   20440:	709a      	strb	r2, [r3, #2]
}
   20442:	46c0      	nop			; (mov r8, r8)
   20444:	46bd      	mov	sp, r7
   20446:	b002      	add	sp, #8
   20448:	bd80      	pop	{r7, pc}
	...

0002044c <port_pin_set_output_level>:
{
   2044c:	b580      	push	{r7, lr}
   2044e:	b084      	sub	sp, #16
   20450:	af00      	add	r7, sp, #0
   20452:	0002      	movs	r2, r0
   20454:	1dfb      	adds	r3, r7, #7
   20456:	701a      	strb	r2, [r3, #0]
   20458:	1dbb      	adds	r3, r7, #6
   2045a:	1c0a      	adds	r2, r1, #0
   2045c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2045e:	1dfb      	adds	r3, r7, #7
   20460:	781b      	ldrb	r3, [r3, #0]
   20462:	0018      	movs	r0, r3
   20464:	4b0d      	ldr	r3, [pc, #52]	; (2049c <port_pin_set_output_level+0x50>)
   20466:	4798      	blx	r3
   20468:	0003      	movs	r3, r0
   2046a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2046c:	1dfb      	adds	r3, r7, #7
   2046e:	781b      	ldrb	r3, [r3, #0]
   20470:	221f      	movs	r2, #31
   20472:	4013      	ands	r3, r2
   20474:	2201      	movs	r2, #1
   20476:	409a      	lsls	r2, r3
   20478:	0013      	movs	r3, r2
   2047a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2047c:	1dbb      	adds	r3, r7, #6
   2047e:	781b      	ldrb	r3, [r3, #0]
   20480:	2b00      	cmp	r3, #0
   20482:	d003      	beq.n	2048c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   20484:	68fb      	ldr	r3, [r7, #12]
   20486:	68ba      	ldr	r2, [r7, #8]
   20488:	619a      	str	r2, [r3, #24]
}
   2048a:	e002      	b.n	20492 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2048c:	68fb      	ldr	r3, [r7, #12]
   2048e:	68ba      	ldr	r2, [r7, #8]
   20490:	615a      	str	r2, [r3, #20]
}
   20492:	46c0      	nop			; (mov r8, r8)
   20494:	46bd      	mov	sp, r7
   20496:	b004      	add	sp, #16
   20498:	bd80      	pop	{r7, pc}
   2049a:	46c0      	nop			; (mov r8, r8)
   2049c:	00020405 	.word	0x00020405

000204a0 <spi_is_syncing>:
{
   204a0:	b580      	push	{r7, lr}
   204a2:	b084      	sub	sp, #16
   204a4:	af00      	add	r7, sp, #0
   204a6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   204a8:	687b      	ldr	r3, [r7, #4]
   204aa:	681b      	ldr	r3, [r3, #0]
   204ac:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   204ae:	68fb      	ldr	r3, [r7, #12]
   204b0:	69db      	ldr	r3, [r3, #28]
   204b2:	1e5a      	subs	r2, r3, #1
   204b4:	4193      	sbcs	r3, r2
   204b6:	b2db      	uxtb	r3, r3
}
   204b8:	0018      	movs	r0, r3
   204ba:	46bd      	mov	sp, r7
   204bc:	b004      	add	sp, #16
   204be:	bd80      	pop	{r7, pc}

000204c0 <spi_get_config_defaults>:
{
   204c0:	b580      	push	{r7, lr}
   204c2:	b082      	sub	sp, #8
   204c4:	af00      	add	r7, sp, #0
   204c6:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   204c8:	687b      	ldr	r3, [r7, #4]
   204ca:	2201      	movs	r2, #1
   204cc:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   204ce:	687b      	ldr	r3, [r7, #4]
   204d0:	2200      	movs	r2, #0
   204d2:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   204d4:	687b      	ldr	r3, [r7, #4]
   204d6:	2200      	movs	r2, #0
   204d8:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   204da:	687b      	ldr	r3, [r7, #4]
   204dc:	22c0      	movs	r2, #192	; 0xc0
   204de:	0392      	lsls	r2, r2, #14
   204e0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   204e2:	687b      	ldr	r3, [r7, #4]
   204e4:	2200      	movs	r2, #0
   204e6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   204e8:	687b      	ldr	r3, [r7, #4]
   204ea:	2200      	movs	r2, #0
   204ec:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   204ee:	687b      	ldr	r3, [r7, #4]
   204f0:	2201      	movs	r2, #1
   204f2:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   204f4:	687b      	ldr	r3, [r7, #4]
   204f6:	2201      	movs	r2, #1
   204f8:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   204fa:	687b      	ldr	r3, [r7, #4]
   204fc:	2200      	movs	r2, #0
   204fe:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   20500:	687b      	ldr	r3, [r7, #4]
   20502:	2224      	movs	r2, #36	; 0x24
   20504:	2100      	movs	r1, #0
   20506:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   20508:	687b      	ldr	r3, [r7, #4]
   2050a:	3318      	adds	r3, #24
   2050c:	220c      	movs	r2, #12
   2050e:	2100      	movs	r1, #0
   20510:	0018      	movs	r0, r3
   20512:	4b0a      	ldr	r3, [pc, #40]	; (2053c <spi_get_config_defaults+0x7c>)
   20514:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   20516:	687b      	ldr	r3, [r7, #4]
   20518:	4a09      	ldr	r2, [pc, #36]	; (20540 <spi_get_config_defaults+0x80>)
   2051a:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   2051c:	687b      	ldr	r3, [r7, #4]
   2051e:	2200      	movs	r2, #0
   20520:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   20522:	687b      	ldr	r3, [r7, #4]
   20524:	2200      	movs	r2, #0
   20526:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   20528:	687b      	ldr	r3, [r7, #4]
   2052a:	2200      	movs	r2, #0
   2052c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   2052e:	687b      	ldr	r3, [r7, #4]
   20530:	2200      	movs	r2, #0
   20532:	635a      	str	r2, [r3, #52]	; 0x34
};
   20534:	46c0      	nop			; (mov r8, r8)
   20536:	46bd      	mov	sp, r7
   20538:	b002      	add	sp, #8
   2053a:	bd80      	pop	{r7, pc}
   2053c:	00034883 	.word	0x00034883
   20540:	000186a0 	.word	0x000186a0

00020544 <spi_slave_inst_get_config_defaults>:
{
   20544:	b580      	push	{r7, lr}
   20546:	b082      	sub	sp, #8
   20548:	af00      	add	r7, sp, #0
   2054a:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   2054c:	687b      	ldr	r3, [r7, #4]
   2054e:	220a      	movs	r2, #10
   20550:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   20552:	687b      	ldr	r3, [r7, #4]
   20554:	2200      	movs	r2, #0
   20556:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   20558:	687b      	ldr	r3, [r7, #4]
   2055a:	2200      	movs	r2, #0
   2055c:	709a      	strb	r2, [r3, #2]
}
   2055e:	46c0      	nop			; (mov r8, r8)
   20560:	46bd      	mov	sp, r7
   20562:	b002      	add	sp, #8
   20564:	bd80      	pop	{r7, pc}
	...

00020568 <spi_attach_slave>:
{
   20568:	b580      	push	{r7, lr}
   2056a:	b084      	sub	sp, #16
   2056c:	af00      	add	r7, sp, #0
   2056e:	6078      	str	r0, [r7, #4]
   20570:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   20572:	683b      	ldr	r3, [r7, #0]
   20574:	781a      	ldrb	r2, [r3, #0]
   20576:	687b      	ldr	r3, [r7, #4]
   20578:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   2057a:	683b      	ldr	r3, [r7, #0]
   2057c:	785a      	ldrb	r2, [r3, #1]
   2057e:	687b      	ldr	r3, [r7, #4]
   20580:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   20582:	683b      	ldr	r3, [r7, #0]
   20584:	789a      	ldrb	r2, [r3, #2]
   20586:	687b      	ldr	r3, [r7, #4]
   20588:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   2058a:	230c      	movs	r3, #12
   2058c:	18fb      	adds	r3, r7, r3
   2058e:	0018      	movs	r0, r3
   20590:	4b0b      	ldr	r3, [pc, #44]	; (205c0 <spi_attach_slave+0x58>)
   20592:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   20594:	230c      	movs	r3, #12
   20596:	18fb      	adds	r3, r7, r3
   20598:	2201      	movs	r2, #1
   2059a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   2059c:	687b      	ldr	r3, [r7, #4]
   2059e:	781b      	ldrb	r3, [r3, #0]
   205a0:	220c      	movs	r2, #12
   205a2:	18ba      	adds	r2, r7, r2
   205a4:	0011      	movs	r1, r2
   205a6:	0018      	movs	r0, r3
   205a8:	4b06      	ldr	r3, [pc, #24]	; (205c4 <spi_attach_slave+0x5c>)
   205aa:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   205ac:	687b      	ldr	r3, [r7, #4]
   205ae:	781b      	ldrb	r3, [r3, #0]
   205b0:	2101      	movs	r1, #1
   205b2:	0018      	movs	r0, r3
   205b4:	4b04      	ldr	r3, [pc, #16]	; (205c8 <spi_attach_slave+0x60>)
   205b6:	4798      	blx	r3
}
   205b8:	46c0      	nop			; (mov r8, r8)
   205ba:	46bd      	mov	sp, r7
   205bc:	b004      	add	sp, #16
   205be:	bd80      	pop	{r7, pc}
   205c0:	00020429 	.word	0x00020429
   205c4:	00026851 	.word	0x00026851
   205c8:	0002044d 	.word	0x0002044d

000205cc <spi_enable>:
{
   205cc:	b580      	push	{r7, lr}
   205ce:	b084      	sub	sp, #16
   205d0:	af00      	add	r7, sp, #0
   205d2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   205d4:	687b      	ldr	r3, [r7, #4]
   205d6:	681b      	ldr	r3, [r3, #0]
   205d8:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   205da:	687b      	ldr	r3, [r7, #4]
   205dc:	681b      	ldr	r3, [r3, #0]
   205de:	0018      	movs	r0, r3
   205e0:	4b0b      	ldr	r3, [pc, #44]	; (20610 <spi_enable+0x44>)
   205e2:	4798      	blx	r3
   205e4:	0003      	movs	r3, r0
   205e6:	0018      	movs	r0, r3
   205e8:	4b0a      	ldr	r3, [pc, #40]	; (20614 <spi_enable+0x48>)
   205ea:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   205ec:	46c0      	nop			; (mov r8, r8)
   205ee:	687b      	ldr	r3, [r7, #4]
   205f0:	0018      	movs	r0, r3
   205f2:	4b09      	ldr	r3, [pc, #36]	; (20618 <spi_enable+0x4c>)
   205f4:	4798      	blx	r3
   205f6:	1e03      	subs	r3, r0, #0
   205f8:	d1f9      	bne.n	205ee <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   205fa:	68fb      	ldr	r3, [r7, #12]
   205fc:	681b      	ldr	r3, [r3, #0]
   205fe:	2202      	movs	r2, #2
   20600:	431a      	orrs	r2, r3
   20602:	68fb      	ldr	r3, [r7, #12]
   20604:	601a      	str	r2, [r3, #0]
}
   20606:	46c0      	nop			; (mov r8, r8)
   20608:	46bd      	mov	sp, r7
   2060a:	b004      	add	sp, #16
   2060c:	bd80      	pop	{r7, pc}
   2060e:	46c0      	nop			; (mov r8, r8)
   20610:	00027521 	.word	0x00027521
   20614:	000203a9 	.word	0x000203a9
   20618:	000204a1 	.word	0x000204a1

0002061c <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   2061c:	b580      	push	{r7, lr}
   2061e:	b084      	sub	sp, #16
   20620:	af00      	add	r7, sp, #0
   20622:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20624:	687b      	ldr	r3, [r7, #4]
   20626:	681b      	ldr	r3, [r3, #0]
   20628:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   2062a:	687b      	ldr	r3, [r7, #4]
   2062c:	681b      	ldr	r3, [r3, #0]
   2062e:	0018      	movs	r0, r3
   20630:	4b0e      	ldr	r3, [pc, #56]	; (2066c <spi_disable+0x50>)
   20632:	4798      	blx	r3
   20634:	0003      	movs	r3, r0
   20636:	0018      	movs	r0, r3
   20638:	4b0d      	ldr	r3, [pc, #52]	; (20670 <spi_disable+0x54>)
   2063a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   2063c:	46c0      	nop			; (mov r8, r8)
   2063e:	687b      	ldr	r3, [r7, #4]
   20640:	0018      	movs	r0, r3
   20642:	4b0c      	ldr	r3, [pc, #48]	; (20674 <spi_disable+0x58>)
   20644:	4798      	blx	r3
   20646:	1e03      	subs	r3, r0, #0
   20648:	d1f9      	bne.n	2063e <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2064a:	68fb      	ldr	r3, [r7, #12]
   2064c:	228f      	movs	r2, #143	; 0x8f
   2064e:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   20650:	68fb      	ldr	r3, [r7, #12]
   20652:	228f      	movs	r2, #143	; 0x8f
   20654:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   20656:	68fb      	ldr	r3, [r7, #12]
   20658:	681b      	ldr	r3, [r3, #0]
   2065a:	2202      	movs	r2, #2
   2065c:	4393      	bics	r3, r2
   2065e:	001a      	movs	r2, r3
   20660:	68fb      	ldr	r3, [r7, #12]
   20662:	601a      	str	r2, [r3, #0]
}
   20664:	46c0      	nop			; (mov r8, r8)
   20666:	46bd      	mov	sp, r7
   20668:	b004      	add	sp, #16
   2066a:	bd80      	pop	{r7, pc}
   2066c:	00027521 	.word	0x00027521
   20670:	000203d5 	.word	0x000203d5
   20674:	000204a1 	.word	0x000204a1

00020678 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   20678:	b580      	push	{r7, lr}
   2067a:	b084      	sub	sp, #16
   2067c:	af00      	add	r7, sp, #0
   2067e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20680:	687b      	ldr	r3, [r7, #4]
   20682:	681b      	ldr	r3, [r3, #0]
   20684:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   20686:	68fb      	ldr	r3, [r7, #12]
   20688:	7e1b      	ldrb	r3, [r3, #24]
   2068a:	b2db      	uxtb	r3, r3
   2068c:	001a      	movs	r2, r3
   2068e:	2302      	movs	r3, #2
   20690:	4013      	ands	r3, r2
   20692:	1e5a      	subs	r2, r3, #1
   20694:	4193      	sbcs	r3, r2
   20696:	b2db      	uxtb	r3, r3
}
   20698:	0018      	movs	r0, r3
   2069a:	46bd      	mov	sp, r7
   2069c:	b004      	add	sp, #16
   2069e:	bd80      	pop	{r7, pc}

000206a0 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   206a0:	b580      	push	{r7, lr}
   206a2:	b084      	sub	sp, #16
   206a4:	af00      	add	r7, sp, #0
   206a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   206a8:	687b      	ldr	r3, [r7, #4]
   206aa:	681b      	ldr	r3, [r3, #0]
   206ac:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   206ae:	68fb      	ldr	r3, [r7, #12]
   206b0:	7e1b      	ldrb	r3, [r3, #24]
   206b2:	b2db      	uxtb	r3, r3
   206b4:	001a      	movs	r2, r3
   206b6:	2301      	movs	r3, #1
   206b8:	4013      	ands	r3, r2
   206ba:	1e5a      	subs	r2, r3, #1
   206bc:	4193      	sbcs	r3, r2
   206be:	b2db      	uxtb	r3, r3
}
   206c0:	0018      	movs	r0, r3
   206c2:	46bd      	mov	sp, r7
   206c4:	b004      	add	sp, #16
   206c6:	bd80      	pop	{r7, pc}

000206c8 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   206c8:	b580      	push	{r7, lr}
   206ca:	b084      	sub	sp, #16
   206cc:	af00      	add	r7, sp, #0
   206ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   206d0:	687b      	ldr	r3, [r7, #4]
   206d2:	681b      	ldr	r3, [r3, #0]
   206d4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   206d6:	68fb      	ldr	r3, [r7, #12]
   206d8:	7e1b      	ldrb	r3, [r3, #24]
   206da:	b2db      	uxtb	r3, r3
   206dc:	001a      	movs	r2, r3
   206de:	2304      	movs	r3, #4
   206e0:	4013      	ands	r3, r2
   206e2:	1e5a      	subs	r2, r3, #1
   206e4:	4193      	sbcs	r3, r2
   206e6:	b2db      	uxtb	r3, r3
}
   206e8:	0018      	movs	r0, r3
   206ea:	46bd      	mov	sp, r7
   206ec:	b004      	add	sp, #16
   206ee:	bd80      	pop	{r7, pc}

000206f0 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   206f0:	b580      	push	{r7, lr}
   206f2:	b084      	sub	sp, #16
   206f4:	af00      	add	r7, sp, #0
   206f6:	6078      	str	r0, [r7, #4]
   206f8:	000a      	movs	r2, r1
   206fa:	1cbb      	adds	r3, r7, #2
   206fc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   206fe:	687b      	ldr	r3, [r7, #4]
   20700:	681b      	ldr	r3, [r3, #0]
   20702:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   20704:	687b      	ldr	r3, [r7, #4]
   20706:	0018      	movs	r0, r3
   20708:	4b0a      	ldr	r3, [pc, #40]	; (20734 <spi_write+0x44>)
   2070a:	4798      	blx	r3
   2070c:	0003      	movs	r3, r0
   2070e:	001a      	movs	r2, r3
   20710:	2301      	movs	r3, #1
   20712:	4053      	eors	r3, r2
   20714:	b2db      	uxtb	r3, r3
   20716:	2b00      	cmp	r3, #0
   20718:	d001      	beq.n	2071e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   2071a:	2305      	movs	r3, #5
   2071c:	e006      	b.n	2072c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   2071e:	1cbb      	adds	r3, r7, #2
   20720:	881b      	ldrh	r3, [r3, #0]
   20722:	05db      	lsls	r3, r3, #23
   20724:	0dda      	lsrs	r2, r3, #23
   20726:	68fb      	ldr	r3, [r7, #12]
   20728:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   2072a:	2300      	movs	r3, #0
}
   2072c:	0018      	movs	r0, r3
   2072e:	46bd      	mov	sp, r7
   20730:	b004      	add	sp, #16
   20732:	bd80      	pop	{r7, pc}
   20734:	000206a1 	.word	0x000206a1

00020738 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   20738:	b580      	push	{r7, lr}
   2073a:	b084      	sub	sp, #16
   2073c:	af00      	add	r7, sp, #0
   2073e:	6078      	str	r0, [r7, #4]
   20740:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20742:	687b      	ldr	r3, [r7, #4]
   20744:	681b      	ldr	r3, [r3, #0]
   20746:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   20748:	687b      	ldr	r3, [r7, #4]
   2074a:	0018      	movs	r0, r3
   2074c:	4b1b      	ldr	r3, [pc, #108]	; (207bc <spi_read+0x84>)
   2074e:	4798      	blx	r3
   20750:	0003      	movs	r3, r0
   20752:	001a      	movs	r2, r3
   20754:	2301      	movs	r3, #1
   20756:	4053      	eors	r3, r2
   20758:	b2db      	uxtb	r3, r3
   2075a:	2b00      	cmp	r3, #0
   2075c:	d001      	beq.n	20762 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   2075e:	2310      	movs	r3, #16
   20760:	e027      	b.n	207b2 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   20762:	230f      	movs	r3, #15
   20764:	18fb      	adds	r3, r7, r3
   20766:	2200      	movs	r2, #0
   20768:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2076a:	68bb      	ldr	r3, [r7, #8]
   2076c:	8b5b      	ldrh	r3, [r3, #26]
   2076e:	b29b      	uxth	r3, r3
   20770:	001a      	movs	r2, r3
   20772:	2304      	movs	r3, #4
   20774:	4013      	ands	r3, r2
   20776:	d006      	beq.n	20786 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   20778:	230f      	movs	r3, #15
   2077a:	18fb      	adds	r3, r7, r3
   2077c:	221e      	movs	r2, #30
   2077e:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   20780:	68bb      	ldr	r3, [r7, #8]
   20782:	2204      	movs	r2, #4
   20784:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   20786:	687b      	ldr	r3, [r7, #4]
   20788:	799b      	ldrb	r3, [r3, #6]
   2078a:	2b01      	cmp	r3, #1
   2078c:	d108      	bne.n	207a0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   2078e:	68bb      	ldr	r3, [r7, #8]
   20790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20792:	b29b      	uxth	r3, r3
   20794:	05db      	lsls	r3, r3, #23
   20796:	0ddb      	lsrs	r3, r3, #23
   20798:	b29a      	uxth	r2, r3
   2079a:	683b      	ldr	r3, [r7, #0]
   2079c:	801a      	strh	r2, [r3, #0]
   2079e:	e005      	b.n	207ac <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   207a0:	68bb      	ldr	r3, [r7, #8]
   207a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   207a4:	b2db      	uxtb	r3, r3
   207a6:	b29a      	uxth	r2, r3
   207a8:	683b      	ldr	r3, [r7, #0]
   207aa:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   207ac:	230f      	movs	r3, #15
   207ae:	18fb      	adds	r3, r7, r3
   207b0:	781b      	ldrb	r3, [r3, #0]
}
   207b2:	0018      	movs	r0, r3
   207b4:	46bd      	mov	sp, r7
   207b6:	b004      	add	sp, #16
   207b8:	bd80      	pop	{r7, pc}
   207ba:	46c0      	nop			; (mov r8, r8)
   207bc:	000206c9 	.word	0x000206c9

000207c0 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   207c0:	b580      	push	{r7, lr}
   207c2:	b086      	sub	sp, #24
   207c4:	af00      	add	r7, sp, #0
   207c6:	60f8      	str	r0, [r7, #12]
   207c8:	60b9      	str	r1, [r7, #8]
   207ca:	1dbb      	adds	r3, r7, #6
   207cc:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   207ce:	2313      	movs	r3, #19
   207d0:	18fb      	adds	r3, r7, r3
   207d2:	22ff      	movs	r2, #255	; 0xff
   207d4:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   207d6:	2317      	movs	r3, #23
   207d8:	18fb      	adds	r3, r7, r3
   207da:	2200      	movs	r2, #0
   207dc:	701a      	strb	r2, [r3, #0]
   207de:	2316      	movs	r3, #22
   207e0:	18fb      	adds	r3, r7, r3
   207e2:	2200      	movs	r2, #0
   207e4:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   207e6:	2314      	movs	r3, #20
   207e8:	18fb      	adds	r3, r7, r3
   207ea:	2200      	movs	r2, #0
   207ec:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   207ee:	2310      	movs	r3, #16
   207f0:	18fb      	adds	r3, r7, r3
   207f2:	2200      	movs	r2, #0
   207f4:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   207f6:	68bb      	ldr	r3, [r7, #8]
   207f8:	2b00      	cmp	r3, #0
   207fa:	d102      	bne.n	20802 <spi_rw+0x42>
   207fc:	68fb      	ldr	r3, [r7, #12]
   207fe:	2b00      	cmp	r3, #0
   20800:	d003      	beq.n	2080a <spi_rw+0x4a>
   20802:	1dbb      	adds	r3, r7, #6
   20804:	881b      	ldrh	r3, [r3, #0]
   20806:	2b00      	cmp	r3, #0
   20808:	d102      	bne.n	20810 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   2080a:	230f      	movs	r3, #15
   2080c:	425b      	negs	r3, r3
   2080e:	e07e      	b.n	2090e <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   20810:	68fb      	ldr	r3, [r7, #12]
   20812:	2b00      	cmp	r3, #0
   20814:	d106      	bne.n	20824 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   20816:	2313      	movs	r3, #19
   20818:	18fb      	adds	r3, r7, r3
   2081a:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   2081c:	2317      	movs	r3, #23
   2081e:	18fb      	adds	r3, r7, r3
   20820:	2201      	movs	r2, #1
   20822:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   20824:	68bb      	ldr	r3, [r7, #8]
   20826:	2b00      	cmp	r3, #0
   20828:	d106      	bne.n	20838 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   2082a:	2313      	movs	r3, #19
   2082c:	18fb      	adds	r3, r7, r3
   2082e:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   20830:	2316      	movs	r3, #22
   20832:	18fb      	adds	r3, r7, r3
   20834:	2201      	movs	r2, #1
   20836:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   20838:	4937      	ldr	r1, [pc, #220]	; (20918 <spi_rw+0x158>)
   2083a:	4b38      	ldr	r3, [pc, #224]	; (2091c <spi_rw+0x15c>)
   2083c:	2201      	movs	r2, #1
   2083e:	0018      	movs	r0, r3
   20840:	4b37      	ldr	r3, [pc, #220]	; (20920 <spi_rw+0x160>)
   20842:	4798      	blx	r3

	while (u16Sz) {
   20844:	e04c      	b.n	208e0 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   20846:	68fb      	ldr	r3, [r7, #12]
   20848:	781a      	ldrb	r2, [r3, #0]
   2084a:	2314      	movs	r3, #20
   2084c:	18fb      	adds	r3, r7, r3
   2084e:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   20850:	46c0      	nop			; (mov r8, r8)
   20852:	4b32      	ldr	r3, [pc, #200]	; (2091c <spi_rw+0x15c>)
   20854:	0018      	movs	r0, r3
   20856:	4b33      	ldr	r3, [pc, #204]	; (20924 <spi_rw+0x164>)
   20858:	4798      	blx	r3
   2085a:	0003      	movs	r3, r0
   2085c:	001a      	movs	r2, r3
   2085e:	2301      	movs	r3, #1
   20860:	4053      	eors	r3, r2
   20862:	b2db      	uxtb	r3, r3
   20864:	2b00      	cmp	r3, #0
   20866:	d1f4      	bne.n	20852 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   20868:	46c0      	nop			; (mov r8, r8)
   2086a:	2314      	movs	r3, #20
   2086c:	18fb      	adds	r3, r7, r3
   2086e:	881a      	ldrh	r2, [r3, #0]
   20870:	4b2a      	ldr	r3, [pc, #168]	; (2091c <spi_rw+0x15c>)
   20872:	0011      	movs	r1, r2
   20874:	0018      	movs	r0, r3
   20876:	4b2c      	ldr	r3, [pc, #176]	; (20928 <spi_rw+0x168>)
   20878:	4798      	blx	r3
   2087a:	1e03      	subs	r3, r0, #0
   2087c:	d1f5      	bne.n	2086a <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   2087e:	46c0      	nop			; (mov r8, r8)
   20880:	4b26      	ldr	r3, [pc, #152]	; (2091c <spi_rw+0x15c>)
   20882:	0018      	movs	r0, r3
   20884:	4b29      	ldr	r3, [pc, #164]	; (2092c <spi_rw+0x16c>)
   20886:	4798      	blx	r3
   20888:	0003      	movs	r3, r0
   2088a:	001a      	movs	r2, r3
   2088c:	2301      	movs	r3, #1
   2088e:	4053      	eors	r3, r2
   20890:	b2db      	uxtb	r3, r3
   20892:	2b00      	cmp	r3, #0
   20894:	d1f4      	bne.n	20880 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   20896:	46c0      	nop			; (mov r8, r8)
   20898:	2310      	movs	r3, #16
   2089a:	18fa      	adds	r2, r7, r3
   2089c:	4b1f      	ldr	r3, [pc, #124]	; (2091c <spi_rw+0x15c>)
   2089e:	0011      	movs	r1, r2
   208a0:	0018      	movs	r0, r3
   208a2:	4b23      	ldr	r3, [pc, #140]	; (20930 <spi_rw+0x170>)
   208a4:	4798      	blx	r3
   208a6:	1e03      	subs	r3, r0, #0
   208a8:	d1f6      	bne.n	20898 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   208aa:	2310      	movs	r3, #16
   208ac:	18fb      	adds	r3, r7, r3
   208ae:	881b      	ldrh	r3, [r3, #0]
   208b0:	b2da      	uxtb	r2, r3
   208b2:	68bb      	ldr	r3, [r7, #8]
   208b4:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   208b6:	1dbb      	adds	r3, r7, #6
   208b8:	881a      	ldrh	r2, [r3, #0]
   208ba:	1dbb      	adds	r3, r7, #6
   208bc:	3a01      	subs	r2, #1
   208be:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   208c0:	2316      	movs	r3, #22
   208c2:	18fb      	adds	r3, r7, r3
   208c4:	781b      	ldrb	r3, [r3, #0]
   208c6:	2b00      	cmp	r3, #0
   208c8:	d102      	bne.n	208d0 <spi_rw+0x110>
			pu8Miso++;
   208ca:	68bb      	ldr	r3, [r7, #8]
   208cc:	3301      	adds	r3, #1
   208ce:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   208d0:	2317      	movs	r3, #23
   208d2:	18fb      	adds	r3, r7, r3
   208d4:	781b      	ldrb	r3, [r3, #0]
   208d6:	2b00      	cmp	r3, #0
   208d8:	d102      	bne.n	208e0 <spi_rw+0x120>
			pu8Mosi++;
   208da:	68fb      	ldr	r3, [r7, #12]
   208dc:	3301      	adds	r3, #1
   208de:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   208e0:	1dbb      	adds	r3, r7, #6
   208e2:	881b      	ldrh	r3, [r3, #0]
   208e4:	2b00      	cmp	r3, #0
   208e6:	d1ae      	bne.n	20846 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   208e8:	46c0      	nop			; (mov r8, r8)
   208ea:	4b0c      	ldr	r3, [pc, #48]	; (2091c <spi_rw+0x15c>)
   208ec:	0018      	movs	r0, r3
   208ee:	4b11      	ldr	r3, [pc, #68]	; (20934 <spi_rw+0x174>)
   208f0:	4798      	blx	r3
   208f2:	0003      	movs	r3, r0
   208f4:	001a      	movs	r2, r3
   208f6:	2301      	movs	r3, #1
   208f8:	4053      	eors	r3, r2
   208fa:	b2db      	uxtb	r3, r3
   208fc:	2b00      	cmp	r3, #0
   208fe:	d1f4      	bne.n	208ea <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   20900:	4905      	ldr	r1, [pc, #20]	; (20918 <spi_rw+0x158>)
   20902:	4b06      	ldr	r3, [pc, #24]	; (2091c <spi_rw+0x15c>)
   20904:	2200      	movs	r2, #0
   20906:	0018      	movs	r0, r3
   20908:	4b05      	ldr	r3, [pc, #20]	; (20920 <spi_rw+0x160>)
   2090a:	4798      	blx	r3

	return M2M_SUCCESS;
   2090c:	2300      	movs	r3, #0
}
   2090e:	0018      	movs	r0, r3
   20910:	46bd      	mov	sp, r7
   20912:	b006      	add	sp, #24
   20914:	bd80      	pop	{r7, pc}
   20916:	46c0      	nop			; (mov r8, r8)
   20918:	20005a90 	.word	0x20005a90
   2091c:	20005a94 	.word	0x20005a94
   20920:	00027f95 	.word	0x00027f95
   20924:	000206a1 	.word	0x000206a1
   20928:	000206f1 	.word	0x000206f1
   2092c:	000206c9 	.word	0x000206c9
   20930:	00020739 	.word	0x00020739
   20934:	00020679 	.word	0x00020679

00020938 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   20938:	b580      	push	{r7, lr}
   2093a:	b092      	sub	sp, #72	; 0x48
   2093c:	af00      	add	r7, sp, #0
   2093e:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   20940:	2347      	movs	r3, #71	; 0x47
   20942:	18fb      	adds	r3, r7, r3
   20944:	2200      	movs	r2, #0
   20946:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   20948:	2308      	movs	r3, #8
   2094a:	18fb      	adds	r3, r7, r3
   2094c:	0018      	movs	r0, r3
   2094e:	4b26      	ldr	r3, [pc, #152]	; (209e8 <nm_bus_init+0xb0>)
   20950:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   20952:	2308      	movs	r3, #8
   20954:	18fb      	adds	r3, r7, r3
   20956:	220e      	movs	r2, #14
   20958:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   2095a:	2308      	movs	r3, #8
   2095c:	18fa      	adds	r2, r7, r3
   2095e:	4b23      	ldr	r3, [pc, #140]	; (209ec <nm_bus_init+0xb4>)
   20960:	0011      	movs	r1, r2
   20962:	0018      	movs	r0, r3
   20964:	4b22      	ldr	r3, [pc, #136]	; (209f0 <nm_bus_init+0xb8>)
   20966:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   20968:	230c      	movs	r3, #12
   2096a:	18fb      	adds	r3, r7, r3
   2096c:	0018      	movs	r0, r3
   2096e:	4b21      	ldr	r3, [pc, #132]	; (209f4 <nm_bus_init+0xbc>)
   20970:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   20972:	230c      	movs	r3, #12
   20974:	18fb      	adds	r3, r7, r3
   20976:	22c0      	movs	r2, #192	; 0xc0
   20978:	0392      	lsls	r2, r2, #14
   2097a:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   2097c:	230c      	movs	r3, #12
   2097e:	18fb      	adds	r3, r7, r3
   20980:	4a1d      	ldr	r2, [pc, #116]	; (209f8 <nm_bus_init+0xc0>)
   20982:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   20984:	230c      	movs	r3, #12
   20986:	18fb      	adds	r3, r7, r3
   20988:	4a1c      	ldr	r2, [pc, #112]	; (209fc <nm_bus_init+0xc4>)
   2098a:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   2098c:	230c      	movs	r3, #12
   2098e:	18fb      	adds	r3, r7, r3
   20990:	2201      	movs	r2, #1
   20992:	4252      	negs	r2, r2
   20994:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   20996:	230c      	movs	r3, #12
   20998:	18fb      	adds	r3, r7, r3
   2099a:	4a19      	ldr	r2, [pc, #100]	; (20a00 <nm_bus_init+0xc8>)
   2099c:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   2099e:	230c      	movs	r3, #12
   209a0:	18fb      	adds	r3, r7, r3
   209a2:	2200      	movs	r2, #0
   209a4:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   209a6:	230c      	movs	r3, #12
   209a8:	18fb      	adds	r3, r7, r3
   209aa:	4a16      	ldr	r2, [pc, #88]	; (20a04 <nm_bus_init+0xcc>)
   209ac:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   209ae:	230c      	movs	r3, #12
   209b0:	18fa      	adds	r2, r7, r3
   209b2:	4915      	ldr	r1, [pc, #84]	; (20a08 <nm_bus_init+0xd0>)
   209b4:	4b15      	ldr	r3, [pc, #84]	; (20a0c <nm_bus_init+0xd4>)
   209b6:	0018      	movs	r0, r3
   209b8:	4b15      	ldr	r3, [pc, #84]	; (20a10 <nm_bus_init+0xd8>)
   209ba:	4798      	blx	r3
   209bc:	1e03      	subs	r3, r0, #0
   209be:	d002      	beq.n	209c6 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   209c0:	2306      	movs	r3, #6
   209c2:	425b      	negs	r3, r3
   209c4:	e00c      	b.n	209e0 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   209c6:	4b11      	ldr	r3, [pc, #68]	; (20a0c <nm_bus_init+0xd4>)
   209c8:	0018      	movs	r0, r3
   209ca:	4b12      	ldr	r3, [pc, #72]	; (20a14 <nm_bus_init+0xdc>)
   209cc:	4798      	blx	r3

	nm_bsp_reset();
   209ce:	4b12      	ldr	r3, [pc, #72]	; (20a18 <nm_bus_init+0xe0>)
   209d0:	4798      	blx	r3
	nm_bsp_sleep(1);
   209d2:	2001      	movs	r0, #1
   209d4:	4b11      	ldr	r3, [pc, #68]	; (20a1c <nm_bus_init+0xe4>)
   209d6:	4798      	blx	r3
#endif
	return result;
   209d8:	2347      	movs	r3, #71	; 0x47
   209da:	18fb      	adds	r3, r7, r3
   209dc:	781b      	ldrb	r3, [r3, #0]
   209de:	b25b      	sxtb	r3, r3
}
   209e0:	0018      	movs	r0, r3
   209e2:	46bd      	mov	sp, r7
   209e4:	b012      	add	sp, #72	; 0x48
   209e6:	bd80      	pop	{r7, pc}
   209e8:	00020545 	.word	0x00020545
   209ec:	20005a90 	.word	0x20005a90
   209f0:	00020569 	.word	0x00020569
   209f4:	000204c1 	.word	0x000204c1
   209f8:	000c0002 	.word	0x000c0002
   209fc:	000d0002 	.word	0x000d0002
   20a00:	000f0002 	.word	0x000f0002
   20a04:	00124f80 	.word	0x00124f80
   20a08:	42001000 	.word	0x42001000
   20a0c:	20005a94 	.word	0x20005a94
   20a10:	00027cd1 	.word	0x00027cd1
   20a14:	000205cd 	.word	0x000205cd
   20a18:	0002023d 	.word	0x0002023d
   20a1c:	0002027d 	.word	0x0002027d

00020a20 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   20a20:	b590      	push	{r4, r7, lr}
   20a22:	b085      	sub	sp, #20
   20a24:	af00      	add	r7, sp, #0
   20a26:	0002      	movs	r2, r0
   20a28:	6039      	str	r1, [r7, #0]
   20a2a:	1dfb      	adds	r3, r7, #7
   20a2c:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   20a2e:	230f      	movs	r3, #15
   20a30:	18fb      	adds	r3, r7, r3
   20a32:	2200      	movs	r2, #0
   20a34:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   20a36:	1dfb      	adds	r3, r7, #7
   20a38:	781b      	ldrb	r3, [r3, #0]
   20a3a:	2b03      	cmp	r3, #3
   20a3c:	d10f      	bne.n	20a5e <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   20a3e:	683b      	ldr	r3, [r7, #0]
   20a40:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   20a42:	68bb      	ldr	r3, [r7, #8]
   20a44:	6818      	ldr	r0, [r3, #0]
   20a46:	68bb      	ldr	r3, [r7, #8]
   20a48:	6859      	ldr	r1, [r3, #4]
   20a4a:	68bb      	ldr	r3, [r7, #8]
   20a4c:	891b      	ldrh	r3, [r3, #8]
   20a4e:	220f      	movs	r2, #15
   20a50:	18bc      	adds	r4, r7, r2
   20a52:	001a      	movs	r2, r3
   20a54:	4b10      	ldr	r3, [pc, #64]	; (20a98 <nm_bus_ioctl+0x78>)
   20a56:	4798      	blx	r3
   20a58:	0003      	movs	r3, r0
   20a5a:	7023      	strb	r3, [r4, #0]
		}
		break;
   20a5c:	e013      	b.n	20a86 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   20a5e:	230f      	movs	r3, #15
   20a60:	18fb      	adds	r3, r7, r3
   20a62:	22ff      	movs	r2, #255	; 0xff
   20a64:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   20a66:	2383      	movs	r3, #131	; 0x83
   20a68:	005a      	lsls	r2, r3, #1
   20a6a:	490c      	ldr	r1, [pc, #48]	; (20a9c <nm_bus_ioctl+0x7c>)
   20a6c:	4b0c      	ldr	r3, [pc, #48]	; (20aa0 <nm_bus_ioctl+0x80>)
   20a6e:	0018      	movs	r0, r3
   20a70:	4b0c      	ldr	r3, [pc, #48]	; (20aa4 <nm_bus_ioctl+0x84>)
   20a72:	4798      	blx	r3
   20a74:	4b0c      	ldr	r3, [pc, #48]	; (20aa8 <nm_bus_ioctl+0x88>)
   20a76:	0018      	movs	r0, r3
   20a78:	4b0a      	ldr	r3, [pc, #40]	; (20aa4 <nm_bus_ioctl+0x84>)
   20a7a:	4798      	blx	r3
   20a7c:	4b0b      	ldr	r3, [pc, #44]	; (20aac <nm_bus_ioctl+0x8c>)
   20a7e:	0018      	movs	r0, r3
   20a80:	4b08      	ldr	r3, [pc, #32]	; (20aa4 <nm_bus_ioctl+0x84>)
   20a82:	4798      	blx	r3
			break;
   20a84:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   20a86:	230f      	movs	r3, #15
   20a88:	18fb      	adds	r3, r7, r3
   20a8a:	781b      	ldrb	r3, [r3, #0]
   20a8c:	b25b      	sxtb	r3, r3
}
   20a8e:	0018      	movs	r0, r3
   20a90:	46bd      	mov	sp, r7
   20a92:	b005      	add	sp, #20
   20a94:	bd90      	pop	{r4, r7, pc}
   20a96:	46c0      	nop			; (mov r8, r8)
   20a98:	000207c1 	.word	0x000207c1
   20a9c:	000383d4 	.word	0x000383d4
   20aa0:	000383a8 	.word	0x000383a8
   20aa4:	0001de29 	.word	0x0001de29
   20aa8:	000383bc 	.word	0x000383bc
   20aac:	000383d0 	.word	0x000383d0

00020ab0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   20ab0:	b580      	push	{r7, lr}
   20ab2:	b082      	sub	sp, #8
   20ab4:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   20ab6:	1dfb      	adds	r3, r7, #7
   20ab8:	2200      	movs	r2, #0
   20aba:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   20abc:	1d3b      	adds	r3, r7, #4
   20abe:	0018      	movs	r0, r3
   20ac0:	4b13      	ldr	r3, [pc, #76]	; (20b10 <nm_bus_deinit+0x60>)
   20ac2:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   20ac4:	1d3b      	adds	r3, r7, #4
   20ac6:	2200      	movs	r2, #0
   20ac8:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   20aca:	1d3b      	adds	r3, r7, #4
   20acc:	2200      	movs	r2, #0
   20ace:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   20ad0:	4b10      	ldr	r3, [pc, #64]	; (20b14 <nm_bus_deinit+0x64>)
   20ad2:	0018      	movs	r0, r3
   20ad4:	4b10      	ldr	r3, [pc, #64]	; (20b18 <nm_bus_deinit+0x68>)
   20ad6:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   20ad8:	1d3b      	adds	r3, r7, #4
   20ada:	0019      	movs	r1, r3
   20adc:	200c      	movs	r0, #12
   20ade:	4b0f      	ldr	r3, [pc, #60]	; (20b1c <nm_bus_deinit+0x6c>)
   20ae0:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   20ae2:	1d3b      	adds	r3, r7, #4
   20ae4:	0019      	movs	r1, r3
   20ae6:	200f      	movs	r0, #15
   20ae8:	4b0c      	ldr	r3, [pc, #48]	; (20b1c <nm_bus_deinit+0x6c>)
   20aea:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   20aec:	1d3b      	adds	r3, r7, #4
   20aee:	0019      	movs	r1, r3
   20af0:	200d      	movs	r0, #13
   20af2:	4b0a      	ldr	r3, [pc, #40]	; (20b1c <nm_bus_deinit+0x6c>)
   20af4:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   20af6:	1d3b      	adds	r3, r7, #4
   20af8:	0019      	movs	r1, r3
   20afa:	200e      	movs	r0, #14
   20afc:	4b07      	ldr	r3, [pc, #28]	; (20b1c <nm_bus_deinit+0x6c>)
   20afe:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   20b00:	1dfb      	adds	r3, r7, #7
   20b02:	781b      	ldrb	r3, [r3, #0]
   20b04:	b25b      	sxtb	r3, r3
}
   20b06:	0018      	movs	r0, r3
   20b08:	46bd      	mov	sp, r7
   20b0a:	b002      	add	sp, #8
   20b0c:	bd80      	pop	{r7, pc}
   20b0e:	46c0      	nop			; (mov r8, r8)
   20b10:	00020429 	.word	0x00020429
   20b14:	20005a94 	.word	0x20005a94
   20b18:	0002061d 	.word	0x0002061d
   20b1c:	00026851 	.word	0x00026851

00020b20 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   20b20:	b580      	push	{r7, lr}
   20b22:	b084      	sub	sp, #16
   20b24:	af00      	add	r7, sp, #0
   20b26:	60f8      	str	r0, [r7, #12]
   20b28:	60b9      	str	r1, [r7, #8]
   20b2a:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   20b2c:	687b      	ldr	r3, [r7, #4]
   20b2e:	2b00      	cmp	r3, #0
   20b30:	d010      	beq.n	20b54 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   20b32:	68bb      	ldr	r3, [r7, #8]
   20b34:	781a      	ldrb	r2, [r3, #0]
   20b36:	68fb      	ldr	r3, [r7, #12]
   20b38:	701a      	strb	r2, [r3, #0]
		pDst++;
   20b3a:	68fb      	ldr	r3, [r7, #12]
   20b3c:	3301      	adds	r3, #1
   20b3e:	60fb      	str	r3, [r7, #12]
		pSrc++;
   20b40:	68bb      	ldr	r3, [r7, #8]
   20b42:	3301      	adds	r3, #1
   20b44:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   20b46:	687b      	ldr	r3, [r7, #4]
   20b48:	3b01      	subs	r3, #1
   20b4a:	607b      	str	r3, [r7, #4]
   20b4c:	687b      	ldr	r3, [r7, #4]
   20b4e:	2b00      	cmp	r3, #0
   20b50:	d1ef      	bne.n	20b32 <m2m_memcpy+0x12>
   20b52:	e000      	b.n	20b56 <m2m_memcpy+0x36>
	if(sz == 0) return;
   20b54:	46c0      	nop			; (mov r8, r8)
}
   20b56:	46bd      	mov	sp, r7
   20b58:	b004      	add	sp, #16
   20b5a:	bd80      	pop	{r7, pc}

00020b5c <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   20b5c:	b580      	push	{r7, lr}
   20b5e:	b084      	sub	sp, #16
   20b60:	af00      	add	r7, sp, #0
   20b62:	60f8      	str	r0, [r7, #12]
   20b64:	607a      	str	r2, [r7, #4]
   20b66:	230b      	movs	r3, #11
   20b68:	18fb      	adds	r3, r7, r3
   20b6a:	1c0a      	adds	r2, r1, #0
   20b6c:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   20b6e:	687b      	ldr	r3, [r7, #4]
   20b70:	2b00      	cmp	r3, #0
   20b72:	d00e      	beq.n	20b92 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   20b74:	68fb      	ldr	r3, [r7, #12]
   20b76:	220b      	movs	r2, #11
   20b78:	18ba      	adds	r2, r7, r2
   20b7a:	7812      	ldrb	r2, [r2, #0]
   20b7c:	701a      	strb	r2, [r3, #0]
		pBuf++;
   20b7e:	68fb      	ldr	r3, [r7, #12]
   20b80:	3301      	adds	r3, #1
   20b82:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   20b84:	687b      	ldr	r3, [r7, #4]
   20b86:	3b01      	subs	r3, #1
   20b88:	607b      	str	r3, [r7, #4]
   20b8a:	687b      	ldr	r3, [r7, #4]
   20b8c:	2b00      	cmp	r3, #0
   20b8e:	d1f1      	bne.n	20b74 <m2m_memset+0x18>
   20b90:	e000      	b.n	20b94 <m2m_memset+0x38>
	if(sz == 0) return;
   20b92:	46c0      	nop			; (mov r8, r8)
}
   20b94:	46bd      	mov	sp, r7
   20b96:	b004      	add	sp, #16
   20b98:	bd80      	pop	{r7, pc}

00020b9a <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   20b9a:	b580      	push	{r7, lr}
   20b9c:	b084      	sub	sp, #16
   20b9e:	af00      	add	r7, sp, #0
   20ba0:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   20ba2:	230e      	movs	r3, #14
   20ba4:	18fb      	adds	r3, r7, r3
   20ba6:	2200      	movs	r2, #0
   20ba8:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   20baa:	e009      	b.n	20bc0 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   20bac:	230e      	movs	r3, #14
   20bae:	18fb      	adds	r3, r7, r3
   20bb0:	881a      	ldrh	r2, [r3, #0]
   20bb2:	230e      	movs	r3, #14
   20bb4:	18fb      	adds	r3, r7, r3
   20bb6:	3201      	adds	r2, #1
   20bb8:	801a      	strh	r2, [r3, #0]
		pcStr++;
   20bba:	687b      	ldr	r3, [r7, #4]
   20bbc:	3301      	adds	r3, #1
   20bbe:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   20bc0:	687b      	ldr	r3, [r7, #4]
   20bc2:	781b      	ldrb	r3, [r3, #0]
   20bc4:	2b00      	cmp	r3, #0
   20bc6:	d1f1      	bne.n	20bac <m2m_strlen+0x12>
	}
	return u16StrLen;
   20bc8:	230e      	movs	r3, #14
   20bca:	18fb      	adds	r3, r7, r3
   20bcc:	881b      	ldrh	r3, [r3, #0]
}
   20bce:	0018      	movs	r0, r3
   20bd0:	46bd      	mov	sp, r7
   20bd2:	b004      	add	sp, #16
   20bd4:	bd80      	pop	{r7, pc}
	...

00020bd8 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   20bd8:	b580      	push	{r7, lr}
   20bda:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   20bdc:	4b04      	ldr	r3, [pc, #16]	; (20bf0 <isr+0x18>)
   20bde:	78db      	ldrb	r3, [r3, #3]
   20be0:	b2db      	uxtb	r3, r3
   20be2:	3301      	adds	r3, #1
   20be4:	b2da      	uxtb	r2, r3
   20be6:	4b02      	ldr	r3, [pc, #8]	; (20bf0 <isr+0x18>)
   20be8:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   20bea:	46c0      	nop			; (mov r8, r8)
   20bec:	46bd      	mov	sp, r7
   20bee:	bd80      	pop	{r7, pc}
   20bf0:	20005ad0 	.word	0x20005ad0

00020bf4 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   20bf4:	b590      	push	{r4, r7, lr}
   20bf6:	b083      	sub	sp, #12
   20bf8:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   20bfa:	1dfb      	adds	r3, r7, #7
   20bfc:	2200      	movs	r2, #0
   20bfe:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   20c00:	4b14      	ldr	r3, [pc, #80]	; (20c54 <hif_set_rx_done+0x60>)
   20c02:	2200      	movs	r2, #0
   20c04:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   20c06:	2001      	movs	r0, #1
   20c08:	4b13      	ldr	r3, [pc, #76]	; (20c58 <hif_set_rx_done+0x64>)
   20c0a:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   20c0c:	1dfc      	adds	r4, r7, #7
   20c0e:	003b      	movs	r3, r7
   20c10:	4a12      	ldr	r2, [pc, #72]	; (20c5c <hif_set_rx_done+0x68>)
   20c12:	0019      	movs	r1, r3
   20c14:	0010      	movs	r0, r2
   20c16:	4b12      	ldr	r3, [pc, #72]	; (20c60 <hif_set_rx_done+0x6c>)
   20c18:	4798      	blx	r3
   20c1a:	0003      	movs	r3, r0
   20c1c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   20c1e:	1dfb      	adds	r3, r7, #7
   20c20:	781b      	ldrb	r3, [r3, #0]
   20c22:	b25b      	sxtb	r3, r3
   20c24:	2b00      	cmp	r3, #0
   20c26:	d10d      	bne.n	20c44 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   20c28:	683b      	ldr	r3, [r7, #0]
   20c2a:	2202      	movs	r2, #2
   20c2c:	4313      	orrs	r3, r2
   20c2e:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   20c30:	683b      	ldr	r3, [r7, #0]
   20c32:	1dfc      	adds	r4, r7, #7
   20c34:	4a09      	ldr	r2, [pc, #36]	; (20c5c <hif_set_rx_done+0x68>)
   20c36:	0019      	movs	r1, r3
   20c38:	0010      	movs	r0, r2
   20c3a:	4b0a      	ldr	r3, [pc, #40]	; (20c64 <hif_set_rx_done+0x70>)
   20c3c:	4798      	blx	r3
   20c3e:	0003      	movs	r3, r0
   20c40:	7023      	strb	r3, [r4, #0]
   20c42:	e000      	b.n	20c46 <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   20c44:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   20c46:	1dfb      	adds	r3, r7, #7
   20c48:	781b      	ldrb	r3, [r3, #0]
   20c4a:	b25b      	sxtb	r3, r3

}
   20c4c:	0018      	movs	r0, r3
   20c4e:	46bd      	mov	sp, r7
   20c50:	b003      	add	sp, #12
   20c52:	bd90      	pop	{r4, r7, pc}
   20c54:	20005ad0 	.word	0x20005ad0
   20c58:	00020311 	.word	0x00020311
   20c5c:	00001070 	.word	0x00001070
   20c60:	00022b15 	.word	0x00022b15
   20c64:	00022b39 	.word	0x00022b39

00020c68 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   20c68:	b580      	push	{r7, lr}
   20c6a:	b082      	sub	sp, #8
   20c6c:	af00      	add	r7, sp, #0
   20c6e:	603a      	str	r2, [r7, #0]
   20c70:	1dfb      	adds	r3, r7, #7
   20c72:	1c02      	adds	r2, r0, #0
   20c74:	701a      	strb	r2, [r3, #0]
   20c76:	1d3b      	adds	r3, r7, #4
   20c78:	1c0a      	adds	r2, r1, #0
   20c7a:	801a      	strh	r2, [r3, #0]


}
   20c7c:	46c0      	nop			; (mov r8, r8)
   20c7e:	46bd      	mov	sp, r7
   20c80:	b002      	add	sp, #8
   20c82:	bd80      	pop	{r7, pc}

00020c84 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   20c84:	b590      	push	{r4, r7, lr}
   20c86:	b083      	sub	sp, #12
   20c88:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   20c8a:	1dfb      	adds	r3, r7, #7
   20c8c:	2200      	movs	r2, #0
   20c8e:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   20c90:	4b16      	ldr	r3, [pc, #88]	; (20cec <hif_chip_wake+0x68>)
   20c92:	789b      	ldrb	r3, [r3, #2]
   20c94:	b2db      	uxtb	r3, r3
   20c96:	2b00      	cmp	r3, #0
   20c98:	d003      	beq.n	20ca2 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   20c9a:	1dfb      	adds	r3, r7, #7
   20c9c:	781b      	ldrb	r3, [r3, #0]
   20c9e:	b25b      	sxtb	r3, r3
   20ca0:	e01f      	b.n	20ce2 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   20ca2:	4b12      	ldr	r3, [pc, #72]	; (20cec <hif_chip_wake+0x68>)
   20ca4:	785b      	ldrb	r3, [r3, #1]
   20ca6:	b2db      	uxtb	r3, r3
   20ca8:	2b00      	cmp	r3, #0
   20caa:	d10e      	bne.n	20cca <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   20cac:	4b0f      	ldr	r3, [pc, #60]	; (20cec <hif_chip_wake+0x68>)
   20cae:	781b      	ldrb	r3, [r3, #0]
   20cb0:	b2db      	uxtb	r3, r3
   20cb2:	2b00      	cmp	r3, #0
   20cb4:	d009      	beq.n	20cca <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   20cb6:	1dfc      	adds	r4, r7, #7
   20cb8:	4b0d      	ldr	r3, [pc, #52]	; (20cf0 <hif_chip_wake+0x6c>)
   20cba:	4798      	blx	r3
   20cbc:	0003      	movs	r3, r0
   20cbe:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   20cc0:	1dfb      	adds	r3, r7, #7
   20cc2:	781b      	ldrb	r3, [r3, #0]
   20cc4:	b25b      	sxtb	r3, r3
   20cc6:	2b00      	cmp	r3, #0
   20cc8:	d107      	bne.n	20cda <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   20cca:	4b08      	ldr	r3, [pc, #32]	; (20cec <hif_chip_wake+0x68>)
   20ccc:	785b      	ldrb	r3, [r3, #1]
   20cce:	b2db      	uxtb	r3, r3
   20cd0:	3301      	adds	r3, #1
   20cd2:	b2da      	uxtb	r2, r3
   20cd4:	4b05      	ldr	r3, [pc, #20]	; (20cec <hif_chip_wake+0x68>)
   20cd6:	705a      	strb	r2, [r3, #1]
   20cd8:	e000      	b.n	20cdc <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   20cda:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   20cdc:	1dfb      	adds	r3, r7, #7
   20cde:	781b      	ldrb	r3, [r3, #0]
   20ce0:	b25b      	sxtb	r3, r3
}
   20ce2:	0018      	movs	r0, r3
   20ce4:	46bd      	mov	sp, r7
   20ce6:	b003      	add	sp, #12
   20ce8:	bd90      	pop	{r4, r7, pc}
   20cea:	46c0      	nop			; (mov r8, r8)
   20cec:	20005ad0 	.word	0x20005ad0
   20cf0:	000225e5 	.word	0x000225e5

00020cf4 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   20cf4:	b580      	push	{r7, lr}
   20cf6:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   20cf8:	4b07      	ldr	r3, [pc, #28]	; (20d18 <hif_chip_sleep_sc+0x24>)
   20cfa:	785b      	ldrb	r3, [r3, #1]
   20cfc:	b2db      	uxtb	r3, r3
   20cfe:	2b00      	cmp	r3, #0
   20d00:	d006      	beq.n	20d10 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   20d02:	4b05      	ldr	r3, [pc, #20]	; (20d18 <hif_chip_sleep_sc+0x24>)
   20d04:	785b      	ldrb	r3, [r3, #1]
   20d06:	b2db      	uxtb	r3, r3
   20d08:	3b01      	subs	r3, #1
   20d0a:	b2da      	uxtb	r2, r3
   20d0c:	4b02      	ldr	r3, [pc, #8]	; (20d18 <hif_chip_sleep_sc+0x24>)
   20d0e:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   20d10:	2300      	movs	r3, #0
}
   20d12:	0018      	movs	r0, r3
   20d14:	46bd      	mov	sp, r7
   20d16:	bd80      	pop	{r7, pc}
   20d18:	20005ad0 	.word	0x20005ad0

00020d1c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   20d1c:	b590      	push	{r4, r7, lr}
   20d1e:	b083      	sub	sp, #12
   20d20:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   20d22:	1dfb      	adds	r3, r7, #7
   20d24:	2200      	movs	r2, #0
   20d26:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   20d28:	4b10      	ldr	r3, [pc, #64]	; (20d6c <hif_chip_sleep+0x50>)
   20d2a:	785b      	ldrb	r3, [r3, #1]
   20d2c:	b2db      	uxtb	r3, r3
   20d2e:	2b00      	cmp	r3, #0
   20d30:	d006      	beq.n	20d40 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   20d32:	4b0e      	ldr	r3, [pc, #56]	; (20d6c <hif_chip_sleep+0x50>)
   20d34:	785b      	ldrb	r3, [r3, #1]
   20d36:	b2db      	uxtb	r3, r3
   20d38:	3b01      	subs	r3, #1
   20d3a:	b2da      	uxtb	r2, r3
   20d3c:	4b0b      	ldr	r3, [pc, #44]	; (20d6c <hif_chip_sleep+0x50>)
   20d3e:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   20d40:	4b0a      	ldr	r3, [pc, #40]	; (20d6c <hif_chip_sleep+0x50>)
   20d42:	785b      	ldrb	r3, [r3, #1]
   20d44:	b2db      	uxtb	r3, r3
   20d46:	2b00      	cmp	r3, #0
   20d48:	d109      	bne.n	20d5e <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   20d4a:	4b08      	ldr	r3, [pc, #32]	; (20d6c <hif_chip_sleep+0x50>)
   20d4c:	781b      	ldrb	r3, [r3, #0]
   20d4e:	b2db      	uxtb	r3, r3
   20d50:	2b00      	cmp	r3, #0
   20d52:	d004      	beq.n	20d5e <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   20d54:	1dfc      	adds	r4, r7, #7
   20d56:	4b06      	ldr	r3, [pc, #24]	; (20d70 <hif_chip_sleep+0x54>)
   20d58:	4798      	blx	r3
   20d5a:	0003      	movs	r3, r0
   20d5c:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   20d5e:	1dfb      	adds	r3, r7, #7
   20d60:	781b      	ldrb	r3, [r3, #0]
   20d62:	b25b      	sxtb	r3, r3
}
   20d64:	0018      	movs	r0, r3
   20d66:	46bd      	mov	sp, r7
   20d68:	b003      	add	sp, #12
   20d6a:	bd90      	pop	{r4, r7, pc}
   20d6c:	20005ad0 	.word	0x20005ad0
   20d70:	0002250d 	.word	0x0002250d

00020d74 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   20d74:	b580      	push	{r7, lr}
   20d76:	b082      	sub	sp, #8
   20d78:	af00      	add	r7, sp, #0
   20d7a:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   20d7c:	4b09      	ldr	r3, [pc, #36]	; (20da4 <hif_init+0x30>)
   20d7e:	222c      	movs	r2, #44	; 0x2c
   20d80:	2100      	movs	r1, #0
   20d82:	0018      	movs	r0, r3
   20d84:	4b08      	ldr	r3, [pc, #32]	; (20da8 <hif_init+0x34>)
   20d86:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   20d88:	4b08      	ldr	r3, [pc, #32]	; (20dac <hif_init+0x38>)
   20d8a:	0018      	movs	r0, r3
   20d8c:	4b08      	ldr	r3, [pc, #32]	; (20db0 <hif_init+0x3c>)
   20d8e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   20d90:	4b08      	ldr	r3, [pc, #32]	; (20db4 <hif_init+0x40>)
   20d92:	0019      	movs	r1, r3
   20d94:	2003      	movs	r0, #3
   20d96:	4b08      	ldr	r3, [pc, #32]	; (20db8 <hif_init+0x44>)
   20d98:	4798      	blx	r3
	return M2M_SUCCESS;
   20d9a:	2300      	movs	r3, #0
}
   20d9c:	0018      	movs	r0, r3
   20d9e:	46bd      	mov	sp, r7
   20da0:	b002      	add	sp, #8
   20da2:	bd80      	pop	{r7, pc}
   20da4:	20005ad0 	.word	0x20005ad0
   20da8:	00020b5d 	.word	0x00020b5d
   20dac:	00020bd9 	.word	0x00020bd9
   20db0:	00020299 	.word	0x00020299
   20db4:	00020c69 	.word	0x00020c69
   20db8:	00021859 	.word	0x00021859

00020dbc <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   20dbc:	b590      	push	{r4, r7, lr}
   20dbe:	b089      	sub	sp, #36	; 0x24
   20dc0:	af00      	add	r7, sp, #0
   20dc2:	0004      	movs	r4, r0
   20dc4:	0008      	movs	r0, r1
   20dc6:	603a      	str	r2, [r7, #0]
   20dc8:	0019      	movs	r1, r3
   20dca:	1dfb      	adds	r3, r7, #7
   20dcc:	1c22      	adds	r2, r4, #0
   20dce:	701a      	strb	r2, [r3, #0]
   20dd0:	1dbb      	adds	r3, r7, #6
   20dd2:	1c02      	adds	r2, r0, #0
   20dd4:	701a      	strb	r2, [r3, #0]
   20dd6:	1d3b      	adds	r3, r7, #4
   20dd8:	1c0a      	adds	r2, r1, #0
   20dda:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   20ddc:	231f      	movs	r3, #31
   20dde:	18fb      	adds	r3, r7, r3
   20de0:	22ff      	movs	r2, #255	; 0xff
   20de2:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   20de4:	1dbb      	adds	r3, r7, #6
   20de6:	781b      	ldrb	r3, [r3, #0]
   20de8:	227f      	movs	r2, #127	; 0x7f
   20dea:	4013      	ands	r3, r2
   20dec:	b2da      	uxtb	r2, r3
   20dee:	2318      	movs	r3, #24
   20df0:	18fb      	adds	r3, r7, r3
   20df2:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   20df4:	2318      	movs	r3, #24
   20df6:	18fb      	adds	r3, r7, r3
   20df8:	1dfa      	adds	r2, r7, #7
   20dfa:	7812      	ldrb	r2, [r2, #0]
   20dfc:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   20dfe:	2318      	movs	r3, #24
   20e00:	18fb      	adds	r3, r7, r3
   20e02:	2208      	movs	r2, #8
   20e04:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   20e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20e08:	2b00      	cmp	r3, #0
   20e0a:	d011      	beq.n	20e30 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   20e0c:	2318      	movs	r3, #24
   20e0e:	18fb      	adds	r3, r7, r3
   20e10:	885b      	ldrh	r3, [r3, #2]
   20e12:	b29a      	uxth	r2, r3
   20e14:	2338      	movs	r3, #56	; 0x38
   20e16:	18f9      	adds	r1, r7, r3
   20e18:	2334      	movs	r3, #52	; 0x34
   20e1a:	18fb      	adds	r3, r7, r3
   20e1c:	8809      	ldrh	r1, [r1, #0]
   20e1e:	881b      	ldrh	r3, [r3, #0]
   20e20:	18cb      	adds	r3, r1, r3
   20e22:	b29b      	uxth	r3, r3
   20e24:	18d3      	adds	r3, r2, r3
   20e26:	b29a      	uxth	r2, r3
   20e28:	2318      	movs	r3, #24
   20e2a:	18fb      	adds	r3, r7, r3
   20e2c:	805a      	strh	r2, [r3, #2]
   20e2e:	e00a      	b.n	20e46 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   20e30:	2318      	movs	r3, #24
   20e32:	18fb      	adds	r3, r7, r3
   20e34:	885b      	ldrh	r3, [r3, #2]
   20e36:	b29a      	uxth	r2, r3
   20e38:	1d3b      	adds	r3, r7, #4
   20e3a:	881b      	ldrh	r3, [r3, #0]
   20e3c:	18d3      	adds	r3, r2, r3
   20e3e:	b29a      	uxth	r2, r3
   20e40:	2318      	movs	r3, #24
   20e42:	18fb      	adds	r3, r7, r3
   20e44:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   20e46:	231f      	movs	r3, #31
   20e48:	18fc      	adds	r4, r7, r3
   20e4a:	4bb2      	ldr	r3, [pc, #712]	; (21114 <hif_send+0x358>)
   20e4c:	4798      	blx	r3
   20e4e:	0003      	movs	r3, r0
   20e50:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   20e52:	231f      	movs	r3, #31
   20e54:	18fb      	adds	r3, r7, r3
   20e56:	781b      	ldrb	r3, [r3, #0]
   20e58:	b25b      	sxtb	r3, r3
   20e5a:	2b00      	cmp	r3, #0
   20e5c:	d000      	beq.n	20e60 <hif_send+0xa4>
   20e5e:	e129      	b.n	210b4 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   20e60:	2300      	movs	r3, #0
   20e62:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   20e64:	230e      	movs	r3, #14
   20e66:	18fb      	adds	r3, r7, r3
   20e68:	2200      	movs	r2, #0
   20e6a:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   20e6c:	2300      	movs	r3, #0
   20e6e:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   20e70:	1dfb      	adds	r3, r7, #7
   20e72:	781a      	ldrb	r2, [r3, #0]
   20e74:	697b      	ldr	r3, [r7, #20]
   20e76:	4313      	orrs	r3, r2
   20e78:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   20e7a:	1dbb      	adds	r3, r7, #6
   20e7c:	781b      	ldrb	r3, [r3, #0]
   20e7e:	021a      	lsls	r2, r3, #8
   20e80:	697b      	ldr	r3, [r7, #20]
   20e82:	4313      	orrs	r3, r2
   20e84:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   20e86:	2318      	movs	r3, #24
   20e88:	18fb      	adds	r3, r7, r3
   20e8a:	885b      	ldrh	r3, [r3, #2]
   20e8c:	b29b      	uxth	r3, r3
   20e8e:	041a      	lsls	r2, r3, #16
   20e90:	697b      	ldr	r3, [r7, #20]
   20e92:	4313      	orrs	r3, r2
   20e94:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   20e96:	697b      	ldr	r3, [r7, #20]
   20e98:	221f      	movs	r2, #31
   20e9a:	18bc      	adds	r4, r7, r2
   20e9c:	4a9e      	ldr	r2, [pc, #632]	; (21118 <hif_send+0x35c>)
   20e9e:	0019      	movs	r1, r3
   20ea0:	0010      	movs	r0, r2
   20ea2:	4b9e      	ldr	r3, [pc, #632]	; (2111c <hif_send+0x360>)
   20ea4:	4798      	blx	r3
   20ea6:	0003      	movs	r3, r0
   20ea8:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   20eaa:	231f      	movs	r3, #31
   20eac:	18fb      	adds	r3, r7, r3
   20eae:	781b      	ldrb	r3, [r3, #0]
   20eb0:	b25b      	sxtb	r3, r3
   20eb2:	2b00      	cmp	r3, #0
   20eb4:	d000      	beq.n	20eb8 <hif_send+0xfc>
   20eb6:	e119      	b.n	210ec <hif_send+0x330>

		reg = 0UL;
   20eb8:	2300      	movs	r3, #0
   20eba:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   20ebc:	697b      	ldr	r3, [r7, #20]
   20ebe:	2202      	movs	r2, #2
   20ec0:	4313      	orrs	r3, r2
   20ec2:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   20ec4:	697b      	ldr	r3, [r7, #20]
   20ec6:	221f      	movs	r2, #31
   20ec8:	18bc      	adds	r4, r7, r2
   20eca:	4a95      	ldr	r2, [pc, #596]	; (21120 <hif_send+0x364>)
   20ecc:	0019      	movs	r1, r3
   20ece:	0010      	movs	r0, r2
   20ed0:	4b92      	ldr	r3, [pc, #584]	; (2111c <hif_send+0x360>)
   20ed2:	4798      	blx	r3
   20ed4:	0003      	movs	r3, r0
   20ed6:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   20ed8:	231f      	movs	r3, #31
   20eda:	18fb      	adds	r3, r7, r3
   20edc:	781b      	ldrb	r3, [r3, #0]
   20ede:	b25b      	sxtb	r3, r3
   20ee0:	2b00      	cmp	r3, #0
   20ee2:	d000      	beq.n	20ee6 <hif_send+0x12a>
   20ee4:	e104      	b.n	210f0 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   20ee6:	2300      	movs	r3, #0
   20ee8:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   20eea:	230e      	movs	r3, #14
   20eec:	18fb      	adds	r3, r7, r3
   20eee:	2200      	movs	r2, #0
   20ef0:	801a      	strh	r2, [r3, #0]
   20ef2:	e050      	b.n	20f96 <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   20ef4:	231f      	movs	r3, #31
   20ef6:	18fc      	adds	r4, r7, r3
   20ef8:	2314      	movs	r3, #20
   20efa:	18fb      	adds	r3, r7, r3
   20efc:	4a88      	ldr	r2, [pc, #544]	; (21120 <hif_send+0x364>)
   20efe:	0019      	movs	r1, r3
   20f00:	0010      	movs	r0, r2
   20f02:	4b88      	ldr	r3, [pc, #544]	; (21124 <hif_send+0x368>)
   20f04:	4798      	blx	r3
   20f06:	0003      	movs	r3, r0
   20f08:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   20f0a:	231f      	movs	r3, #31
   20f0c:	18fb      	adds	r3, r7, r3
   20f0e:	781b      	ldrb	r3, [r3, #0]
   20f10:	b25b      	sxtb	r3, r3
   20f12:	2b00      	cmp	r3, #0
   20f14:	d147      	bne.n	20fa6 <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   20f16:	230e      	movs	r3, #14
   20f18:	18fb      	adds	r3, r7, r3
   20f1a:	881b      	ldrh	r3, [r3, #0]
   20f1c:	b29a      	uxth	r2, r3
   20f1e:	23f4      	movs	r3, #244	; 0xf4
   20f20:	33ff      	adds	r3, #255	; 0xff
   20f22:	429a      	cmp	r2, r3
   20f24:	d916      	bls.n	20f54 <hif_send+0x198>
				if(cnt < 501) {
   20f26:	230e      	movs	r3, #14
   20f28:	18fb      	adds	r3, r7, r3
   20f2a:	881b      	ldrh	r3, [r3, #0]
   20f2c:	b29a      	uxth	r2, r3
   20f2e:	23fa      	movs	r3, #250	; 0xfa
   20f30:	005b      	lsls	r3, r3, #1
   20f32:	429a      	cmp	r2, r3
   20f34:	d80b      	bhi.n	20f4e <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   20f36:	4b7c      	ldr	r3, [pc, #496]	; (21128 <hif_send+0x36c>)
   20f38:	0018      	movs	r0, r3
   20f3a:	4b7c      	ldr	r3, [pc, #496]	; (2112c <hif_send+0x370>)
   20f3c:	4798      	blx	r3
   20f3e:	4b7c      	ldr	r3, [pc, #496]	; (21130 <hif_send+0x374>)
   20f40:	0018      	movs	r0, r3
   20f42:	4b7a      	ldr	r3, [pc, #488]	; (2112c <hif_send+0x370>)
   20f44:	4798      	blx	r3
   20f46:	4b7b      	ldr	r3, [pc, #492]	; (21134 <hif_send+0x378>)
   20f48:	0018      	movs	r0, r3
   20f4a:	4b78      	ldr	r3, [pc, #480]	; (2112c <hif_send+0x370>)
   20f4c:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   20f4e:	2001      	movs	r0, #1
   20f50:	4b79      	ldr	r3, [pc, #484]	; (21138 <hif_send+0x37c>)
   20f52:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   20f54:	697b      	ldr	r3, [r7, #20]
   20f56:	2202      	movs	r2, #2
   20f58:	4013      	ands	r3, r2
   20f5a:	d113      	bne.n	20f84 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   20f5c:	231f      	movs	r3, #31
   20f5e:	18fc      	adds	r4, r7, r3
   20f60:	2310      	movs	r3, #16
   20f62:	18fb      	adds	r3, r7, r3
   20f64:	4a75      	ldr	r2, [pc, #468]	; (2113c <hif_send+0x380>)
   20f66:	0019      	movs	r1, r3
   20f68:	0010      	movs	r0, r2
   20f6a:	4b6e      	ldr	r3, [pc, #440]	; (21124 <hif_send+0x368>)
   20f6c:	4798      	blx	r3
   20f6e:	0003      	movs	r3, r0
   20f70:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   20f72:	231f      	movs	r3, #31
   20f74:	18fb      	adds	r3, r7, r3
   20f76:	781b      	ldrb	r3, [r3, #0]
   20f78:	b25b      	sxtb	r3, r3
   20f7a:	2b00      	cmp	r3, #0
   20f7c:	d015      	beq.n	20faa <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   20f7e:	2300      	movs	r3, #0
   20f80:	613b      	str	r3, [r7, #16]
					goto ERR1;
   20f82:	e0bc      	b.n	210fe <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   20f84:	230e      	movs	r3, #14
   20f86:	18fb      	adds	r3, r7, r3
   20f88:	881b      	ldrh	r3, [r3, #0]
   20f8a:	b29b      	uxth	r3, r3
   20f8c:	3301      	adds	r3, #1
   20f8e:	b29a      	uxth	r2, r3
   20f90:	230e      	movs	r3, #14
   20f92:	18fb      	adds	r3, r7, r3
   20f94:	801a      	strh	r2, [r3, #0]
   20f96:	230e      	movs	r3, #14
   20f98:	18fb      	adds	r3, r7, r3
   20f9a:	881b      	ldrh	r3, [r3, #0]
   20f9c:	b29b      	uxth	r3, r3
   20f9e:	4a68      	ldr	r2, [pc, #416]	; (21140 <hif_send+0x384>)
   20fa0:	4293      	cmp	r3, r2
   20fa2:	d9a7      	bls.n	20ef4 <hif_send+0x138>
   20fa4:	e002      	b.n	20fac <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   20fa6:	46c0      	nop			; (mov r8, r8)
   20fa8:	e000      	b.n	20fac <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   20faa:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   20fac:	693b      	ldr	r3, [r7, #16]
   20fae:	2b00      	cmp	r3, #0
   20fb0:	d100      	bne.n	20fb4 <hif_send+0x1f8>
   20fb2:	e074      	b.n	2109e <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   20fb4:	693b      	ldr	r3, [r7, #16]
   20fb6:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   20fb8:	2318      	movs	r3, #24
   20fba:	18fb      	adds	r3, r7, r3
   20fbc:	885b      	ldrh	r3, [r3, #2]
   20fbe:	b29a      	uxth	r2, r3
   20fc0:	2318      	movs	r3, #24
   20fc2:	18fb      	adds	r3, r7, r3
   20fc4:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   20fc6:	68bb      	ldr	r3, [r7, #8]
   20fc8:	221f      	movs	r2, #31
   20fca:	18bc      	adds	r4, r7, r2
   20fcc:	2218      	movs	r2, #24
   20fce:	18b9      	adds	r1, r7, r2
   20fd0:	2208      	movs	r2, #8
   20fd2:	0018      	movs	r0, r3
   20fd4:	4b5b      	ldr	r3, [pc, #364]	; (21144 <hif_send+0x388>)
   20fd6:	4798      	blx	r3
   20fd8:	0003      	movs	r3, r0
   20fda:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   20fdc:	231f      	movs	r3, #31
   20fde:	18fb      	adds	r3, r7, r3
   20fe0:	781b      	ldrb	r3, [r3, #0]
   20fe2:	b25b      	sxtb	r3, r3
   20fe4:	2b00      	cmp	r3, #0
   20fe6:	d000      	beq.n	20fea <hif_send+0x22e>
   20fe8:	e084      	b.n	210f4 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   20fea:	68bb      	ldr	r3, [r7, #8]
   20fec:	3308      	adds	r3, #8
   20fee:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   20ff0:	683b      	ldr	r3, [r7, #0]
   20ff2:	2b00      	cmp	r3, #0
   20ff4:	d016      	beq.n	21024 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   20ff6:	68b8      	ldr	r0, [r7, #8]
   20ff8:	1d3b      	adds	r3, r7, #4
   20ffa:	881a      	ldrh	r2, [r3, #0]
   20ffc:	231f      	movs	r3, #31
   20ffe:	18fc      	adds	r4, r7, r3
   21000:	683b      	ldr	r3, [r7, #0]
   21002:	0019      	movs	r1, r3
   21004:	4b4f      	ldr	r3, [pc, #316]	; (21144 <hif_send+0x388>)
   21006:	4798      	blx	r3
   21008:	0003      	movs	r3, r0
   2100a:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   2100c:	231f      	movs	r3, #31
   2100e:	18fb      	adds	r3, r7, r3
   21010:	781b      	ldrb	r3, [r3, #0]
   21012:	b25b      	sxtb	r3, r3
   21014:	2b00      	cmp	r3, #0
   21016:	d000      	beq.n	2101a <hif_send+0x25e>
   21018:	e06e      	b.n	210f8 <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   2101a:	1d3b      	adds	r3, r7, #4
   2101c:	881a      	ldrh	r2, [r3, #0]
   2101e:	68bb      	ldr	r3, [r7, #8]
   21020:	18d3      	adds	r3, r2, r3
   21022:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   21024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21026:	2b00      	cmp	r3, #0
   21028:	d021      	beq.n	2106e <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   2102a:	2338      	movs	r3, #56	; 0x38
   2102c:	18fb      	adds	r3, r7, r3
   2102e:	881a      	ldrh	r2, [r3, #0]
   21030:	1d3b      	adds	r3, r7, #4
   21032:	881b      	ldrh	r3, [r3, #0]
   21034:	1ad3      	subs	r3, r2, r3
   21036:	001a      	movs	r2, r3
   21038:	68bb      	ldr	r3, [r7, #8]
   2103a:	18d3      	adds	r3, r2, r3
   2103c:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   2103e:	68b8      	ldr	r0, [r7, #8]
   21040:	2334      	movs	r3, #52	; 0x34
   21042:	18fb      	adds	r3, r7, r3
   21044:	881a      	ldrh	r2, [r3, #0]
   21046:	231f      	movs	r3, #31
   21048:	18fc      	adds	r4, r7, r3
   2104a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2104c:	0019      	movs	r1, r3
   2104e:	4b3d      	ldr	r3, [pc, #244]	; (21144 <hif_send+0x388>)
   21050:	4798      	blx	r3
   21052:	0003      	movs	r3, r0
   21054:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   21056:	231f      	movs	r3, #31
   21058:	18fb      	adds	r3, r7, r3
   2105a:	781b      	ldrb	r3, [r3, #0]
   2105c:	b25b      	sxtb	r3, r3
   2105e:	2b00      	cmp	r3, #0
   21060:	d14c      	bne.n	210fc <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   21062:	2334      	movs	r3, #52	; 0x34
   21064:	18fb      	adds	r3, r7, r3
   21066:	881a      	ldrh	r2, [r3, #0]
   21068:	68bb      	ldr	r3, [r7, #8]
   2106a:	18d3      	adds	r3, r2, r3
   2106c:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   2106e:	693b      	ldr	r3, [r7, #16]
   21070:	009b      	lsls	r3, r3, #2
   21072:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   21074:	697b      	ldr	r3, [r7, #20]
   21076:	2202      	movs	r2, #2
   21078:	4313      	orrs	r3, r2
   2107a:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   2107c:	697b      	ldr	r3, [r7, #20]
   2107e:	221f      	movs	r2, #31
   21080:	18bc      	adds	r4, r7, r2
   21082:	4a31      	ldr	r2, [pc, #196]	; (21148 <hif_send+0x38c>)
   21084:	0019      	movs	r1, r3
   21086:	0010      	movs	r0, r2
   21088:	4b24      	ldr	r3, [pc, #144]	; (2111c <hif_send+0x360>)
   2108a:	4798      	blx	r3
   2108c:	0003      	movs	r3, r0
   2108e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   21090:	231f      	movs	r3, #31
   21092:	18fb      	adds	r3, r7, r3
   21094:	781b      	ldrb	r3, [r3, #0]
   21096:	b25b      	sxtb	r3, r3
   21098:	2b00      	cmp	r3, #0
   2109a:	d01c      	beq.n	210d6 <hif_send+0x31a>
   2109c:	e02f      	b.n	210fe <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   2109e:	231f      	movs	r3, #31
   210a0:	18fc      	adds	r4, r7, r3
   210a2:	4b2a      	ldr	r3, [pc, #168]	; (2114c <hif_send+0x390>)
   210a4:	4798      	blx	r3
   210a6:	0003      	movs	r3, r0
   210a8:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   210aa:	231f      	movs	r3, #31
   210ac:	18fb      	adds	r3, r7, r3
   210ae:	22fd      	movs	r2, #253	; 0xfd
   210b0:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   210b2:	e026      	b.n	21102 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   210b4:	2398      	movs	r3, #152	; 0x98
   210b6:	33ff      	adds	r3, #255	; 0xff
   210b8:	001a      	movs	r2, r3
   210ba:	4925      	ldr	r1, [pc, #148]	; (21150 <hif_send+0x394>)
   210bc:	4b25      	ldr	r3, [pc, #148]	; (21154 <hif_send+0x398>)
   210be:	0018      	movs	r0, r3
   210c0:	4b1a      	ldr	r3, [pc, #104]	; (2112c <hif_send+0x370>)
   210c2:	4798      	blx	r3
   210c4:	4b24      	ldr	r3, [pc, #144]	; (21158 <hif_send+0x39c>)
   210c6:	0018      	movs	r0, r3
   210c8:	4b18      	ldr	r3, [pc, #96]	; (2112c <hif_send+0x370>)
   210ca:	4798      	blx	r3
   210cc:	4b19      	ldr	r3, [pc, #100]	; (21134 <hif_send+0x378>)
   210ce:	0018      	movs	r0, r3
   210d0:	4b16      	ldr	r3, [pc, #88]	; (2112c <hif_send+0x370>)
   210d2:	4798      	blx	r3
		goto ERR2;
   210d4:	e015      	b.n	21102 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   210d6:	231f      	movs	r3, #31
   210d8:	18fc      	adds	r4, r7, r3
   210da:	4b1c      	ldr	r3, [pc, #112]	; (2114c <hif_send+0x390>)
   210dc:	4798      	blx	r3
   210de:	0003      	movs	r3, r0
   210e0:	7023      	strb	r3, [r4, #0]
	return ret;
   210e2:	231f      	movs	r3, #31
   210e4:	18fb      	adds	r3, r7, r3
   210e6:	781b      	ldrb	r3, [r3, #0]
   210e8:	b25b      	sxtb	r3, r3
   210ea:	e00e      	b.n	2110a <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   210ec:	46c0      	nop			; (mov r8, r8)
   210ee:	e006      	b.n	210fe <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   210f0:	46c0      	nop			; (mov r8, r8)
   210f2:	e004      	b.n	210fe <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   210f4:	46c0      	nop			; (mov r8, r8)
   210f6:	e002      	b.n	210fe <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   210f8:	46c0      	nop			; (mov r8, r8)
   210fa:	e000      	b.n	210fe <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   210fc:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   210fe:	4b17      	ldr	r3, [pc, #92]	; (2115c <hif_send+0x3a0>)
   21100:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   21102:	231f      	movs	r3, #31
   21104:	18fb      	adds	r3, r7, r3
   21106:	781b      	ldrb	r3, [r3, #0]
   21108:	b25b      	sxtb	r3, r3
}
   2110a:	0018      	movs	r0, r3
   2110c:	46bd      	mov	sp, r7
   2110e:	b009      	add	sp, #36	; 0x24
   21110:	bd90      	pop	{r4, r7, pc}
   21112:	46c0      	nop			; (mov r8, r8)
   21114:	00020c85 	.word	0x00020c85
   21118:	0000108c 	.word	0x0000108c
   2111c:	00022b39 	.word	0x00022b39
   21120:	00001078 	.word	0x00001078
   21124:	00022b15 	.word	0x00022b15
   21128:	000383e4 	.word	0x000383e4
   2112c:	0001de29 	.word	0x0001de29
   21130:	000383f0 	.word	0x000383f0
   21134:	00038404 	.word	0x00038404
   21138:	0002027d 	.word	0x0002027d
   2113c:	00150400 	.word	0x00150400
   21140:	000003e7 	.word	0x000003e7
   21144:	00022c81 	.word	0x00022c81
   21148:	0000106c 	.word	0x0000106c
   2114c:	00020d1d 	.word	0x00020d1d
   21150:	0003870c 	.word	0x0003870c
   21154:	00038408 	.word	0x00038408
   21158:	0003841c 	.word	0x0003841c
   2115c:	00020cf5 	.word	0x00020cf5

00021160 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   21160:	b590      	push	{r4, r7, lr}
   21162:	b087      	sub	sp, #28
   21164:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   21166:	230f      	movs	r3, #15
   21168:	18fb      	adds	r3, r7, r3
   2116a:	2200      	movs	r2, #0
   2116c:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   2116e:	230f      	movs	r3, #15
   21170:	18fc      	adds	r4, r7, r3
   21172:	2308      	movs	r3, #8
   21174:	18fb      	adds	r3, r7, r3
   21176:	4adc      	ldr	r2, [pc, #880]	; (214e8 <hif_isr+0x388>)
   21178:	0019      	movs	r1, r3
   2117a:	0010      	movs	r0, r2
   2117c:	4bdb      	ldr	r3, [pc, #876]	; (214ec <hif_isr+0x38c>)
   2117e:	4798      	blx	r3
   21180:	0003      	movs	r3, r0
   21182:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   21184:	230f      	movs	r3, #15
   21186:	18fb      	adds	r3, r7, r3
   21188:	781b      	ldrb	r3, [r3, #0]
   2118a:	b25b      	sxtb	r3, r3
   2118c:	2b00      	cmp	r3, #0
   2118e:	d000      	beq.n	21192 <hif_isr+0x32>
   21190:	e21e      	b.n	215d0 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   21192:	68bb      	ldr	r3, [r7, #8]
   21194:	2201      	movs	r2, #1
   21196:	4013      	ands	r3, r2
   21198:	d100      	bne.n	2119c <hif_isr+0x3c>
   2119a:	e204      	b.n	215a6 <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   2119c:	2000      	movs	r0, #0
   2119e:	4bd4      	ldr	r3, [pc, #848]	; (214f0 <hif_isr+0x390>)
   211a0:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   211a2:	68bb      	ldr	r3, [r7, #8]
   211a4:	2201      	movs	r2, #1
   211a6:	4393      	bics	r3, r2
   211a8:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   211aa:	68bb      	ldr	r3, [r7, #8]
   211ac:	220f      	movs	r2, #15
   211ae:	18bc      	adds	r4, r7, r2
   211b0:	4acd      	ldr	r2, [pc, #820]	; (214e8 <hif_isr+0x388>)
   211b2:	0019      	movs	r1, r3
   211b4:	0010      	movs	r0, r2
   211b6:	4bcf      	ldr	r3, [pc, #828]	; (214f4 <hif_isr+0x394>)
   211b8:	4798      	blx	r3
   211ba:	0003      	movs	r3, r0
   211bc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   211be:	230f      	movs	r3, #15
   211c0:	18fb      	adds	r3, r7, r3
   211c2:	781b      	ldrb	r3, [r3, #0]
   211c4:	b25b      	sxtb	r3, r3
   211c6:	2b00      	cmp	r3, #0
   211c8:	d000      	beq.n	211cc <hif_isr+0x6c>
   211ca:	e210      	b.n	215ee <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   211cc:	4bca      	ldr	r3, [pc, #808]	; (214f8 <hif_isr+0x398>)
   211ce:	2201      	movs	r2, #1
   211d0:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   211d2:	68bb      	ldr	r3, [r7, #8]
   211d4:	089b      	lsrs	r3, r3, #2
   211d6:	b29a      	uxth	r2, r3
   211d8:	230c      	movs	r3, #12
   211da:	18fb      	adds	r3, r7, r3
   211dc:	0512      	lsls	r2, r2, #20
   211de:	0d12      	lsrs	r2, r2, #20
   211e0:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   211e2:	230c      	movs	r3, #12
   211e4:	18fb      	adds	r3, r7, r3
   211e6:	881b      	ldrh	r3, [r3, #0]
   211e8:	2b00      	cmp	r3, #0
   211ea:	d100      	bne.n	211ee <hif_isr+0x8e>
   211ec:	e1c8      	b.n	21580 <hif_isr+0x420>
				uint32 address = 0;
   211ee:	2300      	movs	r3, #0
   211f0:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   211f2:	230f      	movs	r3, #15
   211f4:	18fc      	adds	r4, r7, r3
   211f6:	003b      	movs	r3, r7
   211f8:	4ac0      	ldr	r2, [pc, #768]	; (214fc <hif_isr+0x39c>)
   211fa:	0019      	movs	r1, r3
   211fc:	0010      	movs	r0, r2
   211fe:	4bbb      	ldr	r3, [pc, #748]	; (214ec <hif_isr+0x38c>)
   21200:	4798      	blx	r3
   21202:	0003      	movs	r3, r0
   21204:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   21206:	230f      	movs	r3, #15
   21208:	18fb      	adds	r3, r7, r3
   2120a:	781b      	ldrb	r3, [r3, #0]
   2120c:	b25b      	sxtb	r3, r3
   2120e:	2b00      	cmp	r3, #0
   21210:	d012      	beq.n	21238 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   21212:	23e4      	movs	r3, #228	; 0xe4
   21214:	005a      	lsls	r2, r3, #1
   21216:	49ba      	ldr	r1, [pc, #744]	; (21500 <hif_isr+0x3a0>)
   21218:	4bba      	ldr	r3, [pc, #744]	; (21504 <hif_isr+0x3a4>)
   2121a:	0018      	movs	r0, r3
   2121c:	4bba      	ldr	r3, [pc, #744]	; (21508 <hif_isr+0x3a8>)
   2121e:	4798      	blx	r3
   21220:	4bba      	ldr	r3, [pc, #744]	; (2150c <hif_isr+0x3ac>)
   21222:	0018      	movs	r0, r3
   21224:	4bb8      	ldr	r3, [pc, #736]	; (21508 <hif_isr+0x3a8>)
   21226:	4798      	blx	r3
   21228:	4bb9      	ldr	r3, [pc, #740]	; (21510 <hif_isr+0x3b0>)
   2122a:	0018      	movs	r0, r3
   2122c:	4bb6      	ldr	r3, [pc, #728]	; (21508 <hif_isr+0x3a8>)
   2122e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   21230:	2001      	movs	r0, #1
   21232:	4baf      	ldr	r3, [pc, #700]	; (214f0 <hif_isr+0x390>)
   21234:	4798      	blx	r3
					goto ERR1;
   21236:	e1db      	b.n	215f0 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   21238:	683a      	ldr	r2, [r7, #0]
   2123a:	4baf      	ldr	r3, [pc, #700]	; (214f8 <hif_isr+0x398>)
   2123c:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   2123e:	230c      	movs	r3, #12
   21240:	18fb      	adds	r3, r7, r3
   21242:	881a      	ldrh	r2, [r3, #0]
   21244:	4bac      	ldr	r3, [pc, #688]	; (214f8 <hif_isr+0x398>)
   21246:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   21248:	683b      	ldr	r3, [r7, #0]
   2124a:	220f      	movs	r2, #15
   2124c:	18bc      	adds	r4, r7, r2
   2124e:	1d39      	adds	r1, r7, #4
   21250:	2204      	movs	r2, #4
   21252:	0018      	movs	r0, r3
   21254:	4baf      	ldr	r3, [pc, #700]	; (21514 <hif_isr+0x3b4>)
   21256:	4798      	blx	r3
   21258:	0003      	movs	r3, r0
   2125a:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   2125c:	1d3b      	adds	r3, r7, #4
   2125e:	885b      	ldrh	r3, [r3, #2]
   21260:	b29a      	uxth	r2, r3
   21262:	1d3b      	adds	r3, r7, #4
   21264:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   21266:	230f      	movs	r3, #15
   21268:	18fb      	adds	r3, r7, r3
   2126a:	781b      	ldrb	r3, [r3, #0]
   2126c:	b25b      	sxtb	r3, r3
   2126e:	2b00      	cmp	r3, #0
   21270:	d012      	beq.n	21298 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   21272:	23e9      	movs	r3, #233	; 0xe9
   21274:	005a      	lsls	r2, r3, #1
   21276:	49a2      	ldr	r1, [pc, #648]	; (21500 <hif_isr+0x3a0>)
   21278:	4ba2      	ldr	r3, [pc, #648]	; (21504 <hif_isr+0x3a4>)
   2127a:	0018      	movs	r0, r3
   2127c:	4ba2      	ldr	r3, [pc, #648]	; (21508 <hif_isr+0x3a8>)
   2127e:	4798      	blx	r3
   21280:	4ba5      	ldr	r3, [pc, #660]	; (21518 <hif_isr+0x3b8>)
   21282:	0018      	movs	r0, r3
   21284:	4ba0      	ldr	r3, [pc, #640]	; (21508 <hif_isr+0x3a8>)
   21286:	4798      	blx	r3
   21288:	4ba1      	ldr	r3, [pc, #644]	; (21510 <hif_isr+0x3b0>)
   2128a:	0018      	movs	r0, r3
   2128c:	4b9e      	ldr	r3, [pc, #632]	; (21508 <hif_isr+0x3a8>)
   2128e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   21290:	2001      	movs	r0, #1
   21292:	4b97      	ldr	r3, [pc, #604]	; (214f0 <hif_isr+0x390>)
   21294:	4798      	blx	r3
					goto ERR1;
   21296:	e1ab      	b.n	215f0 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   21298:	1d3b      	adds	r3, r7, #4
   2129a:	885b      	ldrh	r3, [r3, #2]
   2129c:	b29b      	uxth	r3, r3
   2129e:	220c      	movs	r2, #12
   212a0:	18ba      	adds	r2, r7, r2
   212a2:	8812      	ldrh	r2, [r2, #0]
   212a4:	429a      	cmp	r2, r3
   212a6:	d02f      	beq.n	21308 <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   212a8:	230c      	movs	r3, #12
   212aa:	18fb      	adds	r3, r7, r3
   212ac:	881b      	ldrh	r3, [r3, #0]
   212ae:	1d3a      	adds	r2, r7, #4
   212b0:	8852      	ldrh	r2, [r2, #2]
   212b2:	b292      	uxth	r2, r2
   212b4:	1a9b      	subs	r3, r3, r2
   212b6:	2b04      	cmp	r3, #4
   212b8:	dd26      	ble.n	21308 <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   212ba:	23dc      	movs	r3, #220	; 0xdc
   212bc:	33ff      	adds	r3, #255	; 0xff
   212be:	001a      	movs	r2, r3
   212c0:	498f      	ldr	r1, [pc, #572]	; (21500 <hif_isr+0x3a0>)
   212c2:	4b90      	ldr	r3, [pc, #576]	; (21504 <hif_isr+0x3a4>)
   212c4:	0018      	movs	r0, r3
   212c6:	4b90      	ldr	r3, [pc, #576]	; (21508 <hif_isr+0x3a8>)
   212c8:	4798      	blx	r3
   212ca:	230c      	movs	r3, #12
   212cc:	18fb      	adds	r3, r7, r3
   212ce:	8819      	ldrh	r1, [r3, #0]
   212d0:	1d3b      	adds	r3, r7, #4
   212d2:	885b      	ldrh	r3, [r3, #2]
   212d4:	b29b      	uxth	r3, r3
   212d6:	001a      	movs	r2, r3
   212d8:	1d3b      	adds	r3, r7, #4
   212da:	781b      	ldrb	r3, [r3, #0]
   212dc:	b2db      	uxtb	r3, r3
   212de:	001c      	movs	r4, r3
   212e0:	1d3b      	adds	r3, r7, #4
   212e2:	785b      	ldrb	r3, [r3, #1]
   212e4:	b2db      	uxtb	r3, r3
   212e6:	488d      	ldr	r0, [pc, #564]	; (2151c <hif_isr+0x3bc>)
   212e8:	9300      	str	r3, [sp, #0]
   212ea:	0023      	movs	r3, r4
   212ec:	4c86      	ldr	r4, [pc, #536]	; (21508 <hif_isr+0x3a8>)
   212ee:	47a0      	blx	r4
   212f0:	4b87      	ldr	r3, [pc, #540]	; (21510 <hif_isr+0x3b0>)
   212f2:	0018      	movs	r0, r3
   212f4:	4b84      	ldr	r3, [pc, #528]	; (21508 <hif_isr+0x3a8>)
   212f6:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   212f8:	2001      	movs	r0, #1
   212fa:	4b7d      	ldr	r3, [pc, #500]	; (214f0 <hif_isr+0x390>)
   212fc:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   212fe:	230f      	movs	r3, #15
   21300:	18fb      	adds	r3, r7, r3
   21302:	22fa      	movs	r2, #250	; 0xfa
   21304:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   21306:	e173      	b.n	215f0 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   21308:	1d3b      	adds	r3, r7, #4
   2130a:	781b      	ldrb	r3, [r3, #0]
   2130c:	b2db      	uxtb	r3, r3
   2130e:	2b01      	cmp	r3, #1
   21310:	d122      	bne.n	21358 <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   21312:	4b79      	ldr	r3, [pc, #484]	; (214f8 <hif_isr+0x398>)
   21314:	691b      	ldr	r3, [r3, #16]
   21316:	2b00      	cmp	r3, #0
   21318:	d00d      	beq.n	21336 <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2131a:	4b77      	ldr	r3, [pc, #476]	; (214f8 <hif_isr+0x398>)
   2131c:	691b      	ldr	r3, [r3, #16]
   2131e:	1d3a      	adds	r2, r7, #4
   21320:	7852      	ldrb	r2, [r2, #1]
   21322:	b2d0      	uxtb	r0, r2
   21324:	1d3a      	adds	r2, r7, #4
   21326:	8852      	ldrh	r2, [r2, #2]
   21328:	b292      	uxth	r2, r2
   2132a:	3a08      	subs	r2, #8
   2132c:	b291      	uxth	r1, r2
   2132e:	683a      	ldr	r2, [r7, #0]
   21330:	3208      	adds	r2, #8
   21332:	4798      	blx	r3
   21334:	e102      	b.n	2153c <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   21336:	23e8      	movs	r3, #232	; 0xe8
   21338:	33ff      	adds	r3, #255	; 0xff
   2133a:	001a      	movs	r2, r3
   2133c:	4970      	ldr	r1, [pc, #448]	; (21500 <hif_isr+0x3a0>)
   2133e:	4b71      	ldr	r3, [pc, #452]	; (21504 <hif_isr+0x3a4>)
   21340:	0018      	movs	r0, r3
   21342:	4b71      	ldr	r3, [pc, #452]	; (21508 <hif_isr+0x3a8>)
   21344:	4798      	blx	r3
   21346:	4b76      	ldr	r3, [pc, #472]	; (21520 <hif_isr+0x3c0>)
   21348:	0018      	movs	r0, r3
   2134a:	4b6f      	ldr	r3, [pc, #444]	; (21508 <hif_isr+0x3a8>)
   2134c:	4798      	blx	r3
   2134e:	4b70      	ldr	r3, [pc, #448]	; (21510 <hif_isr+0x3b0>)
   21350:	0018      	movs	r0, r3
   21352:	4b6d      	ldr	r3, [pc, #436]	; (21508 <hif_isr+0x3a8>)
   21354:	4798      	blx	r3
   21356:	e0f1      	b.n	2153c <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   21358:	1d3b      	adds	r3, r7, #4
   2135a:	781b      	ldrb	r3, [r3, #0]
   2135c:	b2db      	uxtb	r3, r3
   2135e:	2b02      	cmp	r3, #2
   21360:	d122      	bne.n	213a8 <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   21362:	4b65      	ldr	r3, [pc, #404]	; (214f8 <hif_isr+0x398>)
   21364:	695b      	ldr	r3, [r3, #20]
   21366:	2b00      	cmp	r3, #0
   21368:	d00d      	beq.n	21386 <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2136a:	4b63      	ldr	r3, [pc, #396]	; (214f8 <hif_isr+0x398>)
   2136c:	695b      	ldr	r3, [r3, #20]
   2136e:	1d3a      	adds	r2, r7, #4
   21370:	7852      	ldrb	r2, [r2, #1]
   21372:	b2d0      	uxtb	r0, r2
   21374:	1d3a      	adds	r2, r7, #4
   21376:	8852      	ldrh	r2, [r2, #2]
   21378:	b292      	uxth	r2, r2
   2137a:	3a08      	subs	r2, #8
   2137c:	b291      	uxth	r1, r2
   2137e:	683a      	ldr	r2, [r7, #0]
   21380:	3208      	adds	r2, #8
   21382:	4798      	blx	r3
   21384:	e0da      	b.n	2153c <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   21386:	23f0      	movs	r3, #240	; 0xf0
   21388:	33ff      	adds	r3, #255	; 0xff
   2138a:	001a      	movs	r2, r3
   2138c:	495c      	ldr	r1, [pc, #368]	; (21500 <hif_isr+0x3a0>)
   2138e:	4b5d      	ldr	r3, [pc, #372]	; (21504 <hif_isr+0x3a4>)
   21390:	0018      	movs	r0, r3
   21392:	4b5d      	ldr	r3, [pc, #372]	; (21508 <hif_isr+0x3a8>)
   21394:	4798      	blx	r3
   21396:	4b63      	ldr	r3, [pc, #396]	; (21524 <hif_isr+0x3c4>)
   21398:	0018      	movs	r0, r3
   2139a:	4b5b      	ldr	r3, [pc, #364]	; (21508 <hif_isr+0x3a8>)
   2139c:	4798      	blx	r3
   2139e:	4b5c      	ldr	r3, [pc, #368]	; (21510 <hif_isr+0x3b0>)
   213a0:	0018      	movs	r0, r3
   213a2:	4b59      	ldr	r3, [pc, #356]	; (21508 <hif_isr+0x3a8>)
   213a4:	4798      	blx	r3
   213a6:	e0c9      	b.n	2153c <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   213a8:	1d3b      	adds	r3, r7, #4
   213aa:	781b      	ldrb	r3, [r3, #0]
   213ac:	b2db      	uxtb	r3, r3
   213ae:	2b04      	cmp	r3, #4
   213b0:	d122      	bne.n	213f8 <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   213b2:	4b51      	ldr	r3, [pc, #324]	; (214f8 <hif_isr+0x398>)
   213b4:	699b      	ldr	r3, [r3, #24]
   213b6:	2b00      	cmp	r3, #0
   213b8:	d00d      	beq.n	213d6 <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   213ba:	4b4f      	ldr	r3, [pc, #316]	; (214f8 <hif_isr+0x398>)
   213bc:	699b      	ldr	r3, [r3, #24]
   213be:	1d3a      	adds	r2, r7, #4
   213c0:	7852      	ldrb	r2, [r2, #1]
   213c2:	b2d0      	uxtb	r0, r2
   213c4:	1d3a      	adds	r2, r7, #4
   213c6:	8852      	ldrh	r2, [r2, #2]
   213c8:	b292      	uxth	r2, r2
   213ca:	3a08      	subs	r2, #8
   213cc:	b291      	uxth	r1, r2
   213ce:	683a      	ldr	r2, [r7, #0]
   213d0:	3208      	adds	r2, #8
   213d2:	4798      	blx	r3
   213d4:	e0b2      	b.n	2153c <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   213d6:	23f8      	movs	r3, #248	; 0xf8
   213d8:	33ff      	adds	r3, #255	; 0xff
   213da:	001a      	movs	r2, r3
   213dc:	4948      	ldr	r1, [pc, #288]	; (21500 <hif_isr+0x3a0>)
   213de:	4b49      	ldr	r3, [pc, #292]	; (21504 <hif_isr+0x3a4>)
   213e0:	0018      	movs	r0, r3
   213e2:	4b49      	ldr	r3, [pc, #292]	; (21508 <hif_isr+0x3a8>)
   213e4:	4798      	blx	r3
   213e6:	4b50      	ldr	r3, [pc, #320]	; (21528 <hif_isr+0x3c8>)
   213e8:	0018      	movs	r0, r3
   213ea:	4b47      	ldr	r3, [pc, #284]	; (21508 <hif_isr+0x3a8>)
   213ec:	4798      	blx	r3
   213ee:	4b48      	ldr	r3, [pc, #288]	; (21510 <hif_isr+0x3b0>)
   213f0:	0018      	movs	r0, r3
   213f2:	4b45      	ldr	r3, [pc, #276]	; (21508 <hif_isr+0x3a8>)
   213f4:	4798      	blx	r3
   213f6:	e0a1      	b.n	2153c <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   213f8:	1d3b      	adds	r3, r7, #4
   213fa:	781b      	ldrb	r3, [r3, #0]
   213fc:	b2db      	uxtb	r3, r3
   213fe:	2b06      	cmp	r3, #6
   21400:	d121      	bne.n	21446 <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   21402:	4b3d      	ldr	r3, [pc, #244]	; (214f8 <hif_isr+0x398>)
   21404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21406:	2b00      	cmp	r3, #0
   21408:	d00d      	beq.n	21426 <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2140a:	4b3b      	ldr	r3, [pc, #236]	; (214f8 <hif_isr+0x398>)
   2140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2140e:	1d3a      	adds	r2, r7, #4
   21410:	7852      	ldrb	r2, [r2, #1]
   21412:	b2d0      	uxtb	r0, r2
   21414:	1d3a      	adds	r2, r7, #4
   21416:	8852      	ldrh	r2, [r2, #2]
   21418:	b292      	uxth	r2, r2
   2141a:	3a08      	subs	r2, #8
   2141c:	b291      	uxth	r1, r2
   2141e:	683a      	ldr	r2, [r7, #0]
   21420:	3208      	adds	r2, #8
   21422:	4798      	blx	r3
   21424:	e08a      	b.n	2153c <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   21426:	2380      	movs	r3, #128	; 0x80
   21428:	009a      	lsls	r2, r3, #2
   2142a:	4935      	ldr	r1, [pc, #212]	; (21500 <hif_isr+0x3a0>)
   2142c:	4b35      	ldr	r3, [pc, #212]	; (21504 <hif_isr+0x3a4>)
   2142e:	0018      	movs	r0, r3
   21430:	4b35      	ldr	r3, [pc, #212]	; (21508 <hif_isr+0x3a8>)
   21432:	4798      	blx	r3
   21434:	4b3d      	ldr	r3, [pc, #244]	; (2152c <hif_isr+0x3cc>)
   21436:	0018      	movs	r0, r3
   21438:	4b33      	ldr	r3, [pc, #204]	; (21508 <hif_isr+0x3a8>)
   2143a:	4798      	blx	r3
   2143c:	4b34      	ldr	r3, [pc, #208]	; (21510 <hif_isr+0x3b0>)
   2143e:	0018      	movs	r0, r3
   21440:	4b31      	ldr	r3, [pc, #196]	; (21508 <hif_isr+0x3a8>)
   21442:	4798      	blx	r3
   21444:	e07a      	b.n	2153c <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   21446:	1d3b      	adds	r3, r7, #4
   21448:	781b      	ldrb	r3, [r3, #0]
   2144a:	b2db      	uxtb	r3, r3
   2144c:	2b07      	cmp	r3, #7
   2144e:	d120      	bne.n	21492 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   21450:	4b29      	ldr	r3, [pc, #164]	; (214f8 <hif_isr+0x398>)
   21452:	69db      	ldr	r3, [r3, #28]
   21454:	2b00      	cmp	r3, #0
   21456:	d00d      	beq.n	21474 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21458:	4b27      	ldr	r3, [pc, #156]	; (214f8 <hif_isr+0x398>)
   2145a:	69db      	ldr	r3, [r3, #28]
   2145c:	1d3a      	adds	r2, r7, #4
   2145e:	7852      	ldrb	r2, [r2, #1]
   21460:	b2d0      	uxtb	r0, r2
   21462:	1d3a      	adds	r2, r7, #4
   21464:	8852      	ldrh	r2, [r2, #2]
   21466:	b292      	uxth	r2, r2
   21468:	3a08      	subs	r2, #8
   2146a:	b291      	uxth	r1, r2
   2146c:	683a      	ldr	r2, [r7, #0]
   2146e:	3208      	adds	r2, #8
   21470:	4798      	blx	r3
   21472:	e063      	b.n	2153c <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   21474:	4a2e      	ldr	r2, [pc, #184]	; (21530 <hif_isr+0x3d0>)
   21476:	4922      	ldr	r1, [pc, #136]	; (21500 <hif_isr+0x3a0>)
   21478:	4b22      	ldr	r3, [pc, #136]	; (21504 <hif_isr+0x3a4>)
   2147a:	0018      	movs	r0, r3
   2147c:	4b22      	ldr	r3, [pc, #136]	; (21508 <hif_isr+0x3a8>)
   2147e:	4798      	blx	r3
   21480:	4b2c      	ldr	r3, [pc, #176]	; (21534 <hif_isr+0x3d4>)
   21482:	0018      	movs	r0, r3
   21484:	4b20      	ldr	r3, [pc, #128]	; (21508 <hif_isr+0x3a8>)
   21486:	4798      	blx	r3
   21488:	4b21      	ldr	r3, [pc, #132]	; (21510 <hif_isr+0x3b0>)
   2148a:	0018      	movs	r0, r3
   2148c:	4b1e      	ldr	r3, [pc, #120]	; (21508 <hif_isr+0x3a8>)
   2148e:	4798      	blx	r3
   21490:	e054      	b.n	2153c <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   21492:	1d3b      	adds	r3, r7, #4
   21494:	781b      	ldrb	r3, [r3, #0]
   21496:	b2db      	uxtb	r3, r3
   21498:	2b05      	cmp	r3, #5
   2149a:	d111      	bne.n	214c0 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   2149c:	4b16      	ldr	r3, [pc, #88]	; (214f8 <hif_isr+0x398>)
   2149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   214a0:	2b00      	cmp	r3, #0
   214a2:	d04b      	beq.n	2153c <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   214a4:	4b14      	ldr	r3, [pc, #80]	; (214f8 <hif_isr+0x398>)
   214a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   214a8:	1d3a      	adds	r2, r7, #4
   214aa:	7852      	ldrb	r2, [r2, #1]
   214ac:	b2d0      	uxtb	r0, r2
   214ae:	1d3a      	adds	r2, r7, #4
   214b0:	8852      	ldrh	r2, [r2, #2]
   214b2:	b292      	uxth	r2, r2
   214b4:	3a08      	subs	r2, #8
   214b6:	b291      	uxth	r1, r2
   214b8:	683a      	ldr	r2, [r7, #0]
   214ba:	3208      	adds	r2, #8
   214bc:	4798      	blx	r3
   214be:	e03d      	b.n	2153c <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   214c0:	2384      	movs	r3, #132	; 0x84
   214c2:	009a      	lsls	r2, r3, #2
   214c4:	490e      	ldr	r1, [pc, #56]	; (21500 <hif_isr+0x3a0>)
   214c6:	4b0f      	ldr	r3, [pc, #60]	; (21504 <hif_isr+0x3a4>)
   214c8:	0018      	movs	r0, r3
   214ca:	4b0f      	ldr	r3, [pc, #60]	; (21508 <hif_isr+0x3a8>)
   214cc:	4798      	blx	r3
   214ce:	4b1a      	ldr	r3, [pc, #104]	; (21538 <hif_isr+0x3d8>)
   214d0:	0018      	movs	r0, r3
   214d2:	4b0d      	ldr	r3, [pc, #52]	; (21508 <hif_isr+0x3a8>)
   214d4:	4798      	blx	r3
   214d6:	4b0e      	ldr	r3, [pc, #56]	; (21510 <hif_isr+0x3b0>)
   214d8:	0018      	movs	r0, r3
   214da:	4b0b      	ldr	r3, [pc, #44]	; (21508 <hif_isr+0x3a8>)
   214dc:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   214de:	230f      	movs	r3, #15
   214e0:	18fb      	adds	r3, r7, r3
   214e2:	22fa      	movs	r2, #250	; 0xfa
   214e4:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   214e6:	e083      	b.n	215f0 <hif_isr+0x490>
   214e8:	00001070 	.word	0x00001070
   214ec:	00022b15 	.word	0x00022b15
   214f0:	00020311 	.word	0x00020311
   214f4:	00022b39 	.word	0x00022b39
   214f8:	20005ad0 	.word	0x20005ad0
   214fc:	00001084 	.word	0x00001084
   21500:	00038718 	.word	0x00038718
   21504:	00038408 	.word	0x00038408
   21508:	0001de29 	.word	0x0001de29
   2150c:	0003843c 	.word	0x0003843c
   21510:	00038404 	.word	0x00038404
   21514:	00022b89 	.word	0x00022b89
   21518:	00038464 	.word	0x00038464
   2151c:	0003847c 	.word	0x0003847c
   21520:	000384bc 	.word	0x000384bc
   21524:	000384e0 	.word	0x000384e0
   21528:	00038504 	.word	0x00038504
   2152c:	00038524 	.word	0x00038524
   21530:	00000207 	.word	0x00000207
   21534:	00038548 	.word	0x00038548
   21538:	0003856c 	.word	0x0003856c
				}
				if(gstrHifCxt.u8HifRXDone)
   2153c:	4b30      	ldr	r3, [pc, #192]	; (21600 <hif_isr+0x4a0>)
   2153e:	789b      	ldrb	r3, [r3, #2]
   21540:	b2db      	uxtb	r3, r3
   21542:	2b00      	cmp	r3, #0
   21544:	d054      	beq.n	215f0 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   21546:	4a2f      	ldr	r2, [pc, #188]	; (21604 <hif_isr+0x4a4>)
   21548:	492f      	ldr	r1, [pc, #188]	; (21608 <hif_isr+0x4a8>)
   2154a:	4b30      	ldr	r3, [pc, #192]	; (2160c <hif_isr+0x4ac>)
   2154c:	0018      	movs	r0, r3
   2154e:	4b30      	ldr	r3, [pc, #192]	; (21610 <hif_isr+0x4b0>)
   21550:	4798      	blx	r3
   21552:	1d3b      	adds	r3, r7, #4
   21554:	781b      	ldrb	r3, [r3, #0]
   21556:	b2db      	uxtb	r3, r3
   21558:	0019      	movs	r1, r3
   2155a:	1d3b      	adds	r3, r7, #4
   2155c:	785b      	ldrb	r3, [r3, #1]
   2155e:	b2db      	uxtb	r3, r3
   21560:	001a      	movs	r2, r3
   21562:	4b2c      	ldr	r3, [pc, #176]	; (21614 <hif_isr+0x4b4>)
   21564:	0018      	movs	r0, r3
   21566:	4b2a      	ldr	r3, [pc, #168]	; (21610 <hif_isr+0x4b0>)
   21568:	4798      	blx	r3
   2156a:	4b2b      	ldr	r3, [pc, #172]	; (21618 <hif_isr+0x4b8>)
   2156c:	0018      	movs	r0, r3
   2156e:	4b28      	ldr	r3, [pc, #160]	; (21610 <hif_isr+0x4b0>)
   21570:	4798      	blx	r3
					ret = hif_set_rx_done();
   21572:	230f      	movs	r3, #15
   21574:	18fc      	adds	r4, r7, r3
   21576:	4b29      	ldr	r3, [pc, #164]	; (2161c <hif_isr+0x4bc>)
   21578:	4798      	blx	r3
   2157a:	0003      	movs	r3, r0
   2157c:	7023      	strb	r3, [r4, #0]
   2157e:	e037      	b.n	215f0 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   21580:	4a27      	ldr	r2, [pc, #156]	; (21620 <hif_isr+0x4c0>)
   21582:	4921      	ldr	r1, [pc, #132]	; (21608 <hif_isr+0x4a8>)
   21584:	4b21      	ldr	r3, [pc, #132]	; (2160c <hif_isr+0x4ac>)
   21586:	0018      	movs	r0, r3
   21588:	4b21      	ldr	r3, [pc, #132]	; (21610 <hif_isr+0x4b0>)
   2158a:	4798      	blx	r3
   2158c:	4b25      	ldr	r3, [pc, #148]	; (21624 <hif_isr+0x4c4>)
   2158e:	0018      	movs	r0, r3
   21590:	4b1f      	ldr	r3, [pc, #124]	; (21610 <hif_isr+0x4b0>)
   21592:	4798      	blx	r3
   21594:	4b20      	ldr	r3, [pc, #128]	; (21618 <hif_isr+0x4b8>)
   21596:	0018      	movs	r0, r3
   21598:	4b1d      	ldr	r3, [pc, #116]	; (21610 <hif_isr+0x4b0>)
   2159a:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   2159c:	230f      	movs	r3, #15
   2159e:	18fb      	adds	r3, r7, r3
   215a0:	22fe      	movs	r2, #254	; 0xfe
   215a2:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   215a4:	e024      	b.n	215f0 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   215a6:	4a20      	ldr	r2, [pc, #128]	; (21628 <hif_isr+0x4c8>)
   215a8:	4917      	ldr	r1, [pc, #92]	; (21608 <hif_isr+0x4a8>)
   215aa:	4b18      	ldr	r3, [pc, #96]	; (2160c <hif_isr+0x4ac>)
   215ac:	0018      	movs	r0, r3
   215ae:	4b18      	ldr	r3, [pc, #96]	; (21610 <hif_isr+0x4b0>)
   215b0:	4798      	blx	r3
   215b2:	68ba      	ldr	r2, [r7, #8]
   215b4:	4b1d      	ldr	r3, [pc, #116]	; (2162c <hif_isr+0x4cc>)
   215b6:	0011      	movs	r1, r2
   215b8:	0018      	movs	r0, r3
   215ba:	4b15      	ldr	r3, [pc, #84]	; (21610 <hif_isr+0x4b0>)
   215bc:	4798      	blx	r3
   215be:	4b16      	ldr	r3, [pc, #88]	; (21618 <hif_isr+0x4b8>)
   215c0:	0018      	movs	r0, r3
   215c2:	4b13      	ldr	r3, [pc, #76]	; (21610 <hif_isr+0x4b0>)
   215c4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   215c6:	230f      	movs	r3, #15
   215c8:	18fb      	adds	r3, r7, r3
   215ca:	22f4      	movs	r2, #244	; 0xf4
   215cc:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   215ce:	e00f      	b.n	215f0 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   215d0:	4a17      	ldr	r2, [pc, #92]	; (21630 <hif_isr+0x4d0>)
   215d2:	490d      	ldr	r1, [pc, #52]	; (21608 <hif_isr+0x4a8>)
   215d4:	4b0d      	ldr	r3, [pc, #52]	; (2160c <hif_isr+0x4ac>)
   215d6:	0018      	movs	r0, r3
   215d8:	4b0d      	ldr	r3, [pc, #52]	; (21610 <hif_isr+0x4b0>)
   215da:	4798      	blx	r3
   215dc:	4b15      	ldr	r3, [pc, #84]	; (21634 <hif_isr+0x4d4>)
   215de:	0018      	movs	r0, r3
   215e0:	4b0b      	ldr	r3, [pc, #44]	; (21610 <hif_isr+0x4b0>)
   215e2:	4798      	blx	r3
   215e4:	4b0c      	ldr	r3, [pc, #48]	; (21618 <hif_isr+0x4b8>)
   215e6:	0018      	movs	r0, r3
   215e8:	4b09      	ldr	r3, [pc, #36]	; (21610 <hif_isr+0x4b0>)
   215ea:	4798      	blx	r3
		goto ERR1;
   215ec:	e000      	b.n	215f0 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   215ee:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   215f0:	230f      	movs	r3, #15
   215f2:	18fb      	adds	r3, r7, r3
   215f4:	781b      	ldrb	r3, [r3, #0]
   215f6:	b25b      	sxtb	r3, r3
}
   215f8:	0018      	movs	r0, r3
   215fa:	46bd      	mov	sp, r7
   215fc:	b005      	add	sp, #20
   215fe:	bd90      	pop	{r4, r7, pc}
   21600:	20005ad0 	.word	0x20005ad0
   21604:	00000216 	.word	0x00000216
   21608:	00038718 	.word	0x00038718
   2160c:	00038408 	.word	0x00038408
   21610:	0001de29 	.word	0x0001de29
   21614:	00038584 	.word	0x00038584
   21618:	00038404 	.word	0x00038404
   2161c:	00020bf5 	.word	0x00020bf5
   21620:	0000021d 	.word	0x0000021d
   21624:	000385b0 	.word	0x000385b0
   21628:	00000225 	.word	0x00000225
   2162c:	000385c4 	.word	0x000385c4
   21630:	0000022e 	.word	0x0000022e
   21634:	000385e0 	.word	0x000385e0

00021638 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   21638:	b590      	push	{r4, r7, lr}
   2163a:	b083      	sub	sp, #12
   2163c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   2163e:	1dfb      	adds	r3, r7, #7
   21640:	2200      	movs	r2, #0
   21642:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   21644:	4b1c      	ldr	r3, [pc, #112]	; (216b8 <hif_handle_isr+0x80>)
   21646:	2200      	movs	r2, #0
   21648:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2164a:	e024      	b.n	21696 <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   2164c:	4b1a      	ldr	r3, [pc, #104]	; (216b8 <hif_handle_isr+0x80>)
   2164e:	78db      	ldrb	r3, [r3, #3]
   21650:	b2db      	uxtb	r3, r3
   21652:	3b01      	subs	r3, #1
   21654:	b2da      	uxtb	r2, r3
   21656:	4b18      	ldr	r3, [pc, #96]	; (216b8 <hif_handle_isr+0x80>)
   21658:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   2165a:	1dfc      	adds	r4, r7, #7
   2165c:	4b17      	ldr	r3, [pc, #92]	; (216bc <hif_handle_isr+0x84>)
   2165e:	4798      	blx	r3
   21660:	0003      	movs	r3, r0
   21662:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   21664:	1dfb      	adds	r3, r7, #7
   21666:	781b      	ldrb	r3, [r3, #0]
   21668:	b25b      	sxtb	r3, r3
   2166a:	2b00      	cmp	r3, #0
   2166c:	d100      	bne.n	21670 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   2166e:	e012      	b.n	21696 <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   21670:	4a13      	ldr	r2, [pc, #76]	; (216c0 <hif_handle_isr+0x88>)
   21672:	4914      	ldr	r1, [pc, #80]	; (216c4 <hif_handle_isr+0x8c>)
   21674:	4b14      	ldr	r3, [pc, #80]	; (216c8 <hif_handle_isr+0x90>)
   21676:	0018      	movs	r0, r3
   21678:	4b14      	ldr	r3, [pc, #80]	; (216cc <hif_handle_isr+0x94>)
   2167a:	4798      	blx	r3
   2167c:	1dfb      	adds	r3, r7, #7
   2167e:	2200      	movs	r2, #0
   21680:	569a      	ldrsb	r2, [r3, r2]
   21682:	4b13      	ldr	r3, [pc, #76]	; (216d0 <hif_handle_isr+0x98>)
   21684:	0011      	movs	r1, r2
   21686:	0018      	movs	r0, r3
   21688:	4b10      	ldr	r3, [pc, #64]	; (216cc <hif_handle_isr+0x94>)
   2168a:	4798      	blx	r3
   2168c:	4b11      	ldr	r3, [pc, #68]	; (216d4 <hif_handle_isr+0x9c>)
   2168e:	0018      	movs	r0, r3
   21690:	4b0e      	ldr	r3, [pc, #56]	; (216cc <hif_handle_isr+0x94>)
   21692:	4798      	blx	r3
			ret = hif_isr();
   21694:	e7e1      	b.n	2165a <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   21696:	4b08      	ldr	r3, [pc, #32]	; (216b8 <hif_handle_isr+0x80>)
   21698:	78db      	ldrb	r3, [r3, #3]
   2169a:	b2db      	uxtb	r3, r3
   2169c:	2b00      	cmp	r3, #0
   2169e:	d004      	beq.n	216aa <hif_handle_isr+0x72>
   216a0:	4b05      	ldr	r3, [pc, #20]	; (216b8 <hif_handle_isr+0x80>)
   216a2:	791b      	ldrb	r3, [r3, #4]
   216a4:	b2db      	uxtb	r3, r3
   216a6:	2b00      	cmp	r3, #0
   216a8:	d0d0      	beq.n	2164c <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   216aa:	1dfb      	adds	r3, r7, #7
   216ac:	781b      	ldrb	r3, [r3, #0]
   216ae:	b25b      	sxtb	r3, r3
}
   216b0:	0018      	movs	r0, r3
   216b2:	46bd      	mov	sp, r7
   216b4:	b003      	add	sp, #12
   216b6:	bd90      	pop	{r4, r7, pc}
   216b8:	20005ad0 	.word	0x20005ad0
   216bc:	00021161 	.word	0x00021161
   216c0:	00000257 	.word	0x00000257
   216c4:	00038720 	.word	0x00038720
   216c8:	00038408 	.word	0x00038408
   216cc:	0001de29 	.word	0x0001de29
   216d0:	00038604 	.word	0x00038604
   216d4:	00038404 	.word	0x00038404

000216d8 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   216d8:	b590      	push	{r4, r7, lr}
   216da:	b087      	sub	sp, #28
   216dc:	af00      	add	r7, sp, #0
   216de:	60f8      	str	r0, [r7, #12]
   216e0:	60b9      	str	r1, [r7, #8]
   216e2:	0019      	movs	r1, r3
   216e4:	1dbb      	adds	r3, r7, #6
   216e6:	801a      	strh	r2, [r3, #0]
   216e8:	1d7b      	adds	r3, r7, #5
   216ea:	1c0a      	adds	r2, r1, #0
   216ec:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   216ee:	2317      	movs	r3, #23
   216f0:	18fb      	adds	r3, r7, r3
   216f2:	2200      	movs	r2, #0
   216f4:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   216f6:	68fb      	ldr	r3, [r7, #12]
   216f8:	2b00      	cmp	r3, #0
   216fa:	d006      	beq.n	2170a <hif_receive+0x32>
   216fc:	68bb      	ldr	r3, [r7, #8]
   216fe:	2b00      	cmp	r3, #0
   21700:	d003      	beq.n	2170a <hif_receive+0x32>
   21702:	1dbb      	adds	r3, r7, #6
   21704:	881b      	ldrh	r3, [r3, #0]
   21706:	2b00      	cmp	r3, #0
   21708:	d11e      	bne.n	21748 <hif_receive+0x70>
	{
		if(isDone)
   2170a:	1d7b      	adds	r3, r7, #5
   2170c:	781b      	ldrb	r3, [r3, #0]
   2170e:	2b00      	cmp	r3, #0
   21710:	d006      	beq.n	21720 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   21712:	2317      	movs	r3, #23
   21714:	18fc      	adds	r4, r7, r3
   21716:	4b45      	ldr	r3, [pc, #276]	; (2182c <hif_receive+0x154>)
   21718:	4798      	blx	r3
   2171a:	0003      	movs	r3, r0
   2171c:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   2171e:	e07c      	b.n	2181a <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   21720:	2317      	movs	r3, #23
   21722:	18fb      	adds	r3, r7, r3
   21724:	22f4      	movs	r2, #244	; 0xf4
   21726:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   21728:	239e      	movs	r3, #158	; 0x9e
   2172a:	009a      	lsls	r2, r3, #2
   2172c:	4940      	ldr	r1, [pc, #256]	; (21830 <hif_receive+0x158>)
   2172e:	4b41      	ldr	r3, [pc, #260]	; (21834 <hif_receive+0x15c>)
   21730:	0018      	movs	r0, r3
   21732:	4b41      	ldr	r3, [pc, #260]	; (21838 <hif_receive+0x160>)
   21734:	4798      	blx	r3
   21736:	4b41      	ldr	r3, [pc, #260]	; (2183c <hif_receive+0x164>)
   21738:	0018      	movs	r0, r3
   2173a:	4b3f      	ldr	r3, [pc, #252]	; (21838 <hif_receive+0x160>)
   2173c:	4798      	blx	r3
   2173e:	4b40      	ldr	r3, [pc, #256]	; (21840 <hif_receive+0x168>)
   21740:	0018      	movs	r0, r3
   21742:	4b3d      	ldr	r3, [pc, #244]	; (21838 <hif_receive+0x160>)
   21744:	4798      	blx	r3
		goto ERR1;
   21746:	e068      	b.n	2181a <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   21748:	1dbb      	adds	r3, r7, #6
   2174a:	881a      	ldrh	r2, [r3, #0]
   2174c:	4b3d      	ldr	r3, [pc, #244]	; (21844 <hif_receive+0x16c>)
   2174e:	68db      	ldr	r3, [r3, #12]
   21750:	429a      	cmp	r2, r3
   21752:	d917      	bls.n	21784 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   21754:	2317      	movs	r3, #23
   21756:	18fb      	adds	r3, r7, r3
   21758:	22f4      	movs	r2, #244	; 0xf4
   2175a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   2175c:	23a0      	movs	r3, #160	; 0xa0
   2175e:	009a      	lsls	r2, r3, #2
   21760:	4933      	ldr	r1, [pc, #204]	; (21830 <hif_receive+0x158>)
   21762:	4b34      	ldr	r3, [pc, #208]	; (21834 <hif_receive+0x15c>)
   21764:	0018      	movs	r0, r3
   21766:	4b34      	ldr	r3, [pc, #208]	; (21838 <hif_receive+0x160>)
   21768:	4798      	blx	r3
   2176a:	1dbb      	adds	r3, r7, #6
   2176c:	8819      	ldrh	r1, [r3, #0]
   2176e:	4b35      	ldr	r3, [pc, #212]	; (21844 <hif_receive+0x16c>)
   21770:	68da      	ldr	r2, [r3, #12]
   21772:	4b35      	ldr	r3, [pc, #212]	; (21848 <hif_receive+0x170>)
   21774:	0018      	movs	r0, r3
   21776:	4b30      	ldr	r3, [pc, #192]	; (21838 <hif_receive+0x160>)
   21778:	4798      	blx	r3
   2177a:	4b31      	ldr	r3, [pc, #196]	; (21840 <hif_receive+0x168>)
   2177c:	0018      	movs	r0, r3
   2177e:	4b2e      	ldr	r3, [pc, #184]	; (21838 <hif_receive+0x160>)
   21780:	4798      	blx	r3
		goto ERR1;
   21782:	e04a      	b.n	2181a <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   21784:	4b2f      	ldr	r3, [pc, #188]	; (21844 <hif_receive+0x16c>)
   21786:	689a      	ldr	r2, [r3, #8]
   21788:	68fb      	ldr	r3, [r7, #12]
   2178a:	429a      	cmp	r2, r3
   2178c:	d80a      	bhi.n	217a4 <hif_receive+0xcc>
   2178e:	1dbb      	adds	r3, r7, #6
   21790:	881a      	ldrh	r2, [r3, #0]
   21792:	68fb      	ldr	r3, [r7, #12]
   21794:	18d2      	adds	r2, r2, r3
   21796:	4b2b      	ldr	r3, [pc, #172]	; (21844 <hif_receive+0x16c>)
   21798:	6899      	ldr	r1, [r3, #8]
   2179a:	4b2a      	ldr	r3, [pc, #168]	; (21844 <hif_receive+0x16c>)
   2179c:	68db      	ldr	r3, [r3, #12]
   2179e:	18cb      	adds	r3, r1, r3
   217a0:	429a      	cmp	r2, r3
   217a2:	d912      	bls.n	217ca <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   217a4:	2317      	movs	r3, #23
   217a6:	18fb      	adds	r3, r7, r3
   217a8:	22f4      	movs	r2, #244	; 0xf4
   217aa:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   217ac:	4a27      	ldr	r2, [pc, #156]	; (2184c <hif_receive+0x174>)
   217ae:	4920      	ldr	r1, [pc, #128]	; (21830 <hif_receive+0x158>)
   217b0:	4b20      	ldr	r3, [pc, #128]	; (21834 <hif_receive+0x15c>)
   217b2:	0018      	movs	r0, r3
   217b4:	4b20      	ldr	r3, [pc, #128]	; (21838 <hif_receive+0x160>)
   217b6:	4798      	blx	r3
   217b8:	4b25      	ldr	r3, [pc, #148]	; (21850 <hif_receive+0x178>)
   217ba:	0018      	movs	r0, r3
   217bc:	4b1e      	ldr	r3, [pc, #120]	; (21838 <hif_receive+0x160>)
   217be:	4798      	blx	r3
   217c0:	4b1f      	ldr	r3, [pc, #124]	; (21840 <hif_receive+0x168>)
   217c2:	0018      	movs	r0, r3
   217c4:	4b1c      	ldr	r3, [pc, #112]	; (21838 <hif_receive+0x160>)
   217c6:	4798      	blx	r3
		goto ERR1;
   217c8:	e027      	b.n	2181a <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   217ca:	1dbb      	adds	r3, r7, #6
   217cc:	881a      	ldrh	r2, [r3, #0]
   217ce:	2317      	movs	r3, #23
   217d0:	18fc      	adds	r4, r7, r3
   217d2:	68b9      	ldr	r1, [r7, #8]
   217d4:	68fb      	ldr	r3, [r7, #12]
   217d6:	0018      	movs	r0, r3
   217d8:	4b1e      	ldr	r3, [pc, #120]	; (21854 <hif_receive+0x17c>)
   217da:	4798      	blx	r3
   217dc:	0003      	movs	r3, r0
   217de:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   217e0:	2317      	movs	r3, #23
   217e2:	18fb      	adds	r3, r7, r3
   217e4:	781b      	ldrb	r3, [r3, #0]
   217e6:	b25b      	sxtb	r3, r3
   217e8:	2b00      	cmp	r3, #0
   217ea:	d115      	bne.n	21818 <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   217ec:	4b15      	ldr	r3, [pc, #84]	; (21844 <hif_receive+0x16c>)
   217ee:	689a      	ldr	r2, [r3, #8]
   217f0:	4b14      	ldr	r3, [pc, #80]	; (21844 <hif_receive+0x16c>)
   217f2:	68db      	ldr	r3, [r3, #12]
   217f4:	18d2      	adds	r2, r2, r3
   217f6:	1dbb      	adds	r3, r7, #6
   217f8:	8819      	ldrh	r1, [r3, #0]
   217fa:	68fb      	ldr	r3, [r7, #12]
   217fc:	18cb      	adds	r3, r1, r3
   217fe:	429a      	cmp	r2, r3
   21800:	d003      	beq.n	2180a <hif_receive+0x132>
   21802:	1d7b      	adds	r3, r7, #5
   21804:	781b      	ldrb	r3, [r3, #0]
   21806:	2b00      	cmp	r3, #0
   21808:	d007      	beq.n	2181a <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   2180a:	2317      	movs	r3, #23
   2180c:	18fc      	adds	r4, r7, r3
   2180e:	4b07      	ldr	r3, [pc, #28]	; (2182c <hif_receive+0x154>)
   21810:	4798      	blx	r3
   21812:	0003      	movs	r3, r0
   21814:	7023      	strb	r3, [r4, #0]
   21816:	e000      	b.n	2181a <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   21818:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2181a:	2317      	movs	r3, #23
   2181c:	18fb      	adds	r3, r7, r3
   2181e:	781b      	ldrb	r3, [r3, #0]
   21820:	b25b      	sxtb	r3, r3
}
   21822:	0018      	movs	r0, r3
   21824:	46bd      	mov	sp, r7
   21826:	b007      	add	sp, #28
   21828:	bd90      	pop	{r4, r7, pc}
   2182a:	46c0      	nop			; (mov r8, r8)
   2182c:	00020bf5 	.word	0x00020bf5
   21830:	00038730 	.word	0x00038730
   21834:	00038408 	.word	0x00038408
   21838:	0001de29 	.word	0x0001de29
   2183c:	00038634 	.word	0x00038634
   21840:	00038404 	.word	0x00038404
   21844:	20005ad0 	.word	0x20005ad0
   21848:	00038654 	.word	0x00038654
   2184c:	00000286 	.word	0x00000286
   21850:	0003869c 	.word	0x0003869c
   21854:	00022b89 	.word	0x00022b89

00021858 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   21858:	b580      	push	{r7, lr}
   2185a:	b084      	sub	sp, #16
   2185c:	af00      	add	r7, sp, #0
   2185e:	0002      	movs	r2, r0
   21860:	6039      	str	r1, [r7, #0]
   21862:	1dfb      	adds	r3, r7, #7
   21864:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21866:	230f      	movs	r3, #15
   21868:	18fb      	adds	r3, r7, r3
   2186a:	2200      	movs	r2, #0
   2186c:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   2186e:	1dfb      	adds	r3, r7, #7
   21870:	781b      	ldrb	r3, [r3, #0]
   21872:	2b07      	cmp	r3, #7
   21874:	d820      	bhi.n	218b8 <hif_register_cb+0x60>
   21876:	009a      	lsls	r2, r3, #2
   21878:	4b1e      	ldr	r3, [pc, #120]	; (218f4 <hif_register_cb+0x9c>)
   2187a:	18d3      	adds	r3, r2, r3
   2187c:	681b      	ldr	r3, [r3, #0]
   2187e:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   21880:	4b1d      	ldr	r3, [pc, #116]	; (218f8 <hif_register_cb+0xa0>)
   21882:	683a      	ldr	r2, [r7, #0]
   21884:	615a      	str	r2, [r3, #20]
			break;
   21886:	e02d      	b.n	218e4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   21888:	4b1b      	ldr	r3, [pc, #108]	; (218f8 <hif_register_cb+0xa0>)
   2188a:	683a      	ldr	r2, [r7, #0]
   2188c:	611a      	str	r2, [r3, #16]
			break;
   2188e:	e029      	b.n	218e4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   21890:	4b19      	ldr	r3, [pc, #100]	; (218f8 <hif_register_cb+0xa0>)
   21892:	683a      	ldr	r2, [r7, #0]
   21894:	619a      	str	r2, [r3, #24]
			break;
   21896:	e025      	b.n	218e4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   21898:	4b17      	ldr	r3, [pc, #92]	; (218f8 <hif_register_cb+0xa0>)
   2189a:	683a      	ldr	r2, [r7, #0]
   2189c:	621a      	str	r2, [r3, #32]
			break;
   2189e:	e021      	b.n	218e4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   218a0:	4b15      	ldr	r3, [pc, #84]	; (218f8 <hif_register_cb+0xa0>)
   218a2:	683a      	ldr	r2, [r7, #0]
   218a4:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   218a6:	e01d      	b.n	218e4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   218a8:	4b13      	ldr	r3, [pc, #76]	; (218f8 <hif_register_cb+0xa0>)
   218aa:	683a      	ldr	r2, [r7, #0]
   218ac:	61da      	str	r2, [r3, #28]
			break;
   218ae:	e019      	b.n	218e4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   218b0:	4b11      	ldr	r3, [pc, #68]	; (218f8 <hif_register_cb+0xa0>)
   218b2:	683a      	ldr	r2, [r7, #0]
   218b4:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   218b6:	e015      	b.n	218e4 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   218b8:	4a10      	ldr	r2, [pc, #64]	; (218fc <hif_register_cb+0xa4>)
   218ba:	4911      	ldr	r1, [pc, #68]	; (21900 <hif_register_cb+0xa8>)
   218bc:	4b11      	ldr	r3, [pc, #68]	; (21904 <hif_register_cb+0xac>)
   218be:	0018      	movs	r0, r3
   218c0:	4b11      	ldr	r3, [pc, #68]	; (21908 <hif_register_cb+0xb0>)
   218c2:	4798      	blx	r3
   218c4:	1dfb      	adds	r3, r7, #7
   218c6:	781a      	ldrb	r2, [r3, #0]
   218c8:	4b10      	ldr	r3, [pc, #64]	; (2190c <hif_register_cb+0xb4>)
   218ca:	0011      	movs	r1, r2
   218cc:	0018      	movs	r0, r3
   218ce:	4b0e      	ldr	r3, [pc, #56]	; (21908 <hif_register_cb+0xb0>)
   218d0:	4798      	blx	r3
   218d2:	4b0f      	ldr	r3, [pc, #60]	; (21910 <hif_register_cb+0xb8>)
   218d4:	0018      	movs	r0, r3
   218d6:	4b0c      	ldr	r3, [pc, #48]	; (21908 <hif_register_cb+0xb0>)
   218d8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   218da:	230f      	movs	r3, #15
   218dc:	18fb      	adds	r3, r7, r3
   218de:	22f4      	movs	r2, #244	; 0xf4
   218e0:	701a      	strb	r2, [r3, #0]
			break;
   218e2:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   218e4:	230f      	movs	r3, #15
   218e6:	18fb      	adds	r3, r7, r3
   218e8:	781b      	ldrb	r3, [r3, #0]
   218ea:	b25b      	sxtb	r3, r3
}
   218ec:	0018      	movs	r0, r3
   218ee:	46bd      	mov	sp, r7
   218f0:	b004      	add	sp, #16
   218f2:	bd80      	pop	{r7, pc}
   218f4:	000386ec 	.word	0x000386ec
   218f8:	20005ad0 	.word	0x20005ad0
   218fc:	000002be 	.word	0x000002be
   21900:	0003873c 	.word	0x0003873c
   21904:	00038408 	.word	0x00038408
   21908:	0001de29 	.word	0x0001de29
   2190c:	000386e0 	.word	0x000386e0
   21910:	00038404 	.word	0x00038404

00021914 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   21914:	b590      	push	{r4, r7, lr}
   21916:	b0af      	sub	sp, #188	; 0xbc
   21918:	af02      	add	r7, sp, #8
   2191a:	603a      	str	r2, [r7, #0]
   2191c:	1dfb      	adds	r3, r7, #7
   2191e:	1c02      	adds	r2, r0, #0
   21920:	701a      	strb	r2, [r3, #0]
   21922:	1d3b      	adds	r3, r7, #4
   21924:	1c0a      	adds	r2, r1, #0
   21926:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   21928:	1dfb      	adds	r3, r7, #7
   2192a:	781b      	ldrb	r3, [r3, #0]
   2192c:	2b2c      	cmp	r3, #44	; 0x2c
   2192e:	d116      	bne.n	2195e <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   21930:	23a4      	movs	r3, #164	; 0xa4
   21932:	18f9      	adds	r1, r7, r3
   21934:	6838      	ldr	r0, [r7, #0]
   21936:	2300      	movs	r3, #0
   21938:	2204      	movs	r2, #4
   2193a:	4cca      	ldr	r4, [pc, #808]	; (21c64 <m2m_wifi_cb+0x350>)
   2193c:	47a0      	blx	r4
   2193e:	1e03      	subs	r3, r0, #0
   21940:	d000      	beq.n	21944 <m2m_wifi_cb+0x30>
   21942:	e1b4      	b.n	21cae <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   21944:	4bc8      	ldr	r3, [pc, #800]	; (21c68 <m2m_wifi_cb+0x354>)
   21946:	681b      	ldr	r3, [r3, #0]
   21948:	2b00      	cmp	r3, #0
   2194a:	d100      	bne.n	2194e <m2m_wifi_cb+0x3a>
   2194c:	e1af      	b.n	21cae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   2194e:	4bc6      	ldr	r3, [pc, #792]	; (21c68 <m2m_wifi_cb+0x354>)
   21950:	681b      	ldr	r3, [r3, #0]
   21952:	22a4      	movs	r2, #164	; 0xa4
   21954:	18ba      	adds	r2, r7, r2
   21956:	0011      	movs	r1, r2
   21958:	202c      	movs	r0, #44	; 0x2c
   2195a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   2195c:	e1a7      	b.n	21cae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   2195e:	1dfb      	adds	r3, r7, #7
   21960:	781b      	ldrb	r3, [r3, #0]
   21962:	2b1b      	cmp	r3, #27
   21964:	d116      	bne.n	21994 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   21966:	239c      	movs	r3, #156	; 0x9c
   21968:	18f9      	adds	r1, r7, r3
   2196a:	6838      	ldr	r0, [r7, #0]
   2196c:	2300      	movs	r3, #0
   2196e:	2208      	movs	r2, #8
   21970:	4cbc      	ldr	r4, [pc, #752]	; (21c64 <m2m_wifi_cb+0x350>)
   21972:	47a0      	blx	r4
   21974:	1e03      	subs	r3, r0, #0
   21976:	d000      	beq.n	2197a <m2m_wifi_cb+0x66>
   21978:	e199      	b.n	21cae <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2197a:	4bbb      	ldr	r3, [pc, #748]	; (21c68 <m2m_wifi_cb+0x354>)
   2197c:	681b      	ldr	r3, [r3, #0]
   2197e:	2b00      	cmp	r3, #0
   21980:	d100      	bne.n	21984 <m2m_wifi_cb+0x70>
   21982:	e194      	b.n	21cae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   21984:	4bb8      	ldr	r3, [pc, #736]	; (21c68 <m2m_wifi_cb+0x354>)
   21986:	681b      	ldr	r3, [r3, #0]
   21988:	229c      	movs	r2, #156	; 0x9c
   2198a:	18ba      	adds	r2, r7, r2
   2198c:	0011      	movs	r1, r2
   2198e:	201b      	movs	r0, #27
   21990:	4798      	blx	r3
}
   21992:	e18c      	b.n	21cae <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   21994:	1dfb      	adds	r3, r7, #7
   21996:	781b      	ldrb	r3, [r3, #0]
   21998:	2b06      	cmp	r3, #6
   2199a:	d116      	bne.n	219ca <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   2199c:	230c      	movs	r3, #12
   2199e:	18f9      	adds	r1, r7, r3
   219a0:	6838      	ldr	r0, [r7, #0]
   219a2:	2301      	movs	r3, #1
   219a4:	2230      	movs	r2, #48	; 0x30
   219a6:	4caf      	ldr	r4, [pc, #700]	; (21c64 <m2m_wifi_cb+0x350>)
   219a8:	47a0      	blx	r4
   219aa:	1e03      	subs	r3, r0, #0
   219ac:	d000      	beq.n	219b0 <m2m_wifi_cb+0x9c>
   219ae:	e17e      	b.n	21cae <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   219b0:	4bad      	ldr	r3, [pc, #692]	; (21c68 <m2m_wifi_cb+0x354>)
   219b2:	681b      	ldr	r3, [r3, #0]
   219b4:	2b00      	cmp	r3, #0
   219b6:	d100      	bne.n	219ba <m2m_wifi_cb+0xa6>
   219b8:	e179      	b.n	21cae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   219ba:	4bab      	ldr	r3, [pc, #684]	; (21c68 <m2m_wifi_cb+0x354>)
   219bc:	681b      	ldr	r3, [r3, #0]
   219be:	220c      	movs	r2, #12
   219c0:	18ba      	adds	r2, r7, r2
   219c2:	0011      	movs	r1, r2
   219c4:	2006      	movs	r0, #6
   219c6:	4798      	blx	r3
}
   219c8:	e171      	b.n	21cae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   219ca:	1dfb      	adds	r3, r7, #7
   219cc:	781b      	ldrb	r3, [r3, #0]
   219ce:	2b0e      	cmp	r3, #14
   219d0:	d100      	bne.n	219d4 <m2m_wifi_cb+0xc0>
   219d2:	e16c      	b.n	21cae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   219d4:	1dfb      	adds	r3, r7, #7
   219d6:	781b      	ldrb	r3, [r3, #0]
   219d8:	2b32      	cmp	r3, #50	; 0x32
   219da:	d116      	bne.n	21a0a <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   219dc:	2384      	movs	r3, #132	; 0x84
   219de:	18f9      	adds	r1, r7, r3
   219e0:	6838      	ldr	r0, [r7, #0]
   219e2:	2300      	movs	r3, #0
   219e4:	2218      	movs	r2, #24
   219e6:	4c9f      	ldr	r4, [pc, #636]	; (21c64 <m2m_wifi_cb+0x350>)
   219e8:	47a0      	blx	r4
   219ea:	1e03      	subs	r3, r0, #0
   219ec:	d000      	beq.n	219f0 <m2m_wifi_cb+0xdc>
   219ee:	e15e      	b.n	21cae <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   219f0:	4b9d      	ldr	r3, [pc, #628]	; (21c68 <m2m_wifi_cb+0x354>)
   219f2:	681b      	ldr	r3, [r3, #0]
   219f4:	2b00      	cmp	r3, #0
   219f6:	d100      	bne.n	219fa <m2m_wifi_cb+0xe6>
   219f8:	e159      	b.n	21cae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   219fa:	4b9b      	ldr	r3, [pc, #620]	; (21c68 <m2m_wifi_cb+0x354>)
   219fc:	681b      	ldr	r3, [r3, #0]
   219fe:	2284      	movs	r2, #132	; 0x84
   21a00:	18ba      	adds	r2, r7, r2
   21a02:	0011      	movs	r1, r2
   21a04:	2032      	movs	r0, #50	; 0x32
   21a06:	4798      	blx	r3
}
   21a08:	e151      	b.n	21cae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   21a0a:	1dfb      	adds	r3, r7, #7
   21a0c:	781b      	ldrb	r3, [r3, #0]
   21a0e:	2b2f      	cmp	r3, #47	; 0x2f
   21a10:	d11d      	bne.n	21a4e <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   21a12:	230c      	movs	r3, #12
   21a14:	18fb      	adds	r3, r7, r3
   21a16:	2264      	movs	r2, #100	; 0x64
   21a18:	2100      	movs	r1, #0
   21a1a:	0018      	movs	r0, r3
   21a1c:	4b93      	ldr	r3, [pc, #588]	; (21c6c <m2m_wifi_cb+0x358>)
   21a1e:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   21a20:	230c      	movs	r3, #12
   21a22:	18f9      	adds	r1, r7, r3
   21a24:	6838      	ldr	r0, [r7, #0]
   21a26:	2300      	movs	r3, #0
   21a28:	2264      	movs	r2, #100	; 0x64
   21a2a:	4c8e      	ldr	r4, [pc, #568]	; (21c64 <m2m_wifi_cb+0x350>)
   21a2c:	47a0      	blx	r4
   21a2e:	1e03      	subs	r3, r0, #0
   21a30:	d000      	beq.n	21a34 <m2m_wifi_cb+0x120>
   21a32:	e13c      	b.n	21cae <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21a34:	4b8c      	ldr	r3, [pc, #560]	; (21c68 <m2m_wifi_cb+0x354>)
   21a36:	681b      	ldr	r3, [r3, #0]
   21a38:	2b00      	cmp	r3, #0
   21a3a:	d100      	bne.n	21a3e <m2m_wifi_cb+0x12a>
   21a3c:	e137      	b.n	21cae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   21a3e:	4b8a      	ldr	r3, [pc, #552]	; (21c68 <m2m_wifi_cb+0x354>)
   21a40:	681b      	ldr	r3, [r3, #0]
   21a42:	220c      	movs	r2, #12
   21a44:	18ba      	adds	r2, r7, r2
   21a46:	0011      	movs	r1, r2
   21a48:	202f      	movs	r0, #47	; 0x2f
   21a4a:	4798      	blx	r3
}
   21a4c:	e12f      	b.n	21cae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   21a4e:	1dfb      	adds	r3, r7, #7
   21a50:	781b      	ldrb	r3, [r3, #0]
   21a52:	2b34      	cmp	r3, #52	; 0x34
   21a54:	d137      	bne.n	21ac6 <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   21a56:	2380      	movs	r3, #128	; 0x80
   21a58:	18f9      	adds	r1, r7, r3
   21a5a:	6838      	ldr	r0, [r7, #0]
   21a5c:	2300      	movs	r3, #0
   21a5e:	2204      	movs	r2, #4
   21a60:	4c80      	ldr	r4, [pc, #512]	; (21c64 <m2m_wifi_cb+0x350>)
   21a62:	47a0      	blx	r4
   21a64:	1e03      	subs	r3, r0, #0
   21a66:	d000      	beq.n	21a6a <m2m_wifi_cb+0x156>
   21a68:	e121      	b.n	21cae <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   21a6a:	4b81      	ldr	r3, [pc, #516]	; (21c70 <m2m_wifi_cb+0x35c>)
   21a6c:	0018      	movs	r0, r3
   21a6e:	4b81      	ldr	r3, [pc, #516]	; (21c74 <m2m_wifi_cb+0x360>)
   21a70:	4798      	blx	r3
   21a72:	2380      	movs	r3, #128	; 0x80
   21a74:	18fb      	adds	r3, r7, r3
   21a76:	681b      	ldr	r3, [r3, #0]
   21a78:	0e1b      	lsrs	r3, r3, #24
   21a7a:	b2db      	uxtb	r3, r3
   21a7c:	0019      	movs	r1, r3
   21a7e:	2380      	movs	r3, #128	; 0x80
   21a80:	18fb      	adds	r3, r7, r3
   21a82:	681b      	ldr	r3, [r3, #0]
   21a84:	0c1b      	lsrs	r3, r3, #16
   21a86:	b2db      	uxtb	r3, r3
   21a88:	001a      	movs	r2, r3
   21a8a:	2380      	movs	r3, #128	; 0x80
   21a8c:	18fb      	adds	r3, r7, r3
   21a8e:	681b      	ldr	r3, [r3, #0]
   21a90:	0a1b      	lsrs	r3, r3, #8
   21a92:	b2db      	uxtb	r3, r3
   21a94:	001c      	movs	r4, r3
   21a96:	2380      	movs	r3, #128	; 0x80
   21a98:	18fb      	adds	r3, r7, r3
   21a9a:	681b      	ldr	r3, [r3, #0]
   21a9c:	b2db      	uxtb	r3, r3
   21a9e:	4876      	ldr	r0, [pc, #472]	; (21c78 <m2m_wifi_cb+0x364>)
   21aa0:	9300      	str	r3, [sp, #0]
   21aa2:	0023      	movs	r3, r4
   21aa4:	4c73      	ldr	r4, [pc, #460]	; (21c74 <m2m_wifi_cb+0x360>)
   21aa6:	47a0      	blx	r4
   21aa8:	4b74      	ldr	r3, [pc, #464]	; (21c7c <m2m_wifi_cb+0x368>)
   21aaa:	0018      	movs	r0, r3
   21aac:	4b71      	ldr	r3, [pc, #452]	; (21c74 <m2m_wifi_cb+0x360>)
   21aae:	4798      	blx	r3
			if (gpfAppWifiCb)
   21ab0:	4b6d      	ldr	r3, [pc, #436]	; (21c68 <m2m_wifi_cb+0x354>)
   21ab2:	681b      	ldr	r3, [r3, #0]
   21ab4:	2b00      	cmp	r3, #0
   21ab6:	d100      	bne.n	21aba <m2m_wifi_cb+0x1a6>
   21ab8:	e0f9      	b.n	21cae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   21aba:	4b6b      	ldr	r3, [pc, #428]	; (21c68 <m2m_wifi_cb+0x354>)
   21abc:	681b      	ldr	r3, [r3, #0]
   21abe:	2100      	movs	r1, #0
   21ac0:	2034      	movs	r0, #52	; 0x34
   21ac2:	4798      	blx	r3
}
   21ac4:	e0f3      	b.n	21cae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   21ac6:	1dfb      	adds	r3, r7, #7
   21ac8:	781b      	ldrb	r3, [r3, #0]
   21aca:	2b11      	cmp	r3, #17
   21acc:	d11e      	bne.n	21b0c <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   21ace:	4b6c      	ldr	r3, [pc, #432]	; (21c80 <m2m_wifi_cb+0x36c>)
   21ad0:	2200      	movs	r2, #0
   21ad2:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   21ad4:	237c      	movs	r3, #124	; 0x7c
   21ad6:	18f9      	adds	r1, r7, r3
   21ad8:	6838      	ldr	r0, [r7, #0]
   21ada:	2300      	movs	r3, #0
   21adc:	2204      	movs	r2, #4
   21ade:	4c61      	ldr	r4, [pc, #388]	; (21c64 <m2m_wifi_cb+0x350>)
   21ae0:	47a0      	blx	r4
   21ae2:	1e03      	subs	r3, r0, #0
   21ae4:	d000      	beq.n	21ae8 <m2m_wifi_cb+0x1d4>
   21ae6:	e0e2      	b.n	21cae <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   21ae8:	237c      	movs	r3, #124	; 0x7c
   21aea:	18fb      	adds	r3, r7, r3
   21aec:	781a      	ldrb	r2, [r3, #0]
   21aee:	4b65      	ldr	r3, [pc, #404]	; (21c84 <m2m_wifi_cb+0x370>)
   21af0:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   21af2:	4b5d      	ldr	r3, [pc, #372]	; (21c68 <m2m_wifi_cb+0x354>)
   21af4:	681b      	ldr	r3, [r3, #0]
   21af6:	2b00      	cmp	r3, #0
   21af8:	d100      	bne.n	21afc <m2m_wifi_cb+0x1e8>
   21afa:	e0d8      	b.n	21cae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   21afc:	4b5a      	ldr	r3, [pc, #360]	; (21c68 <m2m_wifi_cb+0x354>)
   21afe:	681b      	ldr	r3, [r3, #0]
   21b00:	227c      	movs	r2, #124	; 0x7c
   21b02:	18ba      	adds	r2, r7, r2
   21b04:	0011      	movs	r1, r2
   21b06:	2011      	movs	r0, #17
   21b08:	4798      	blx	r3
}
   21b0a:	e0d0      	b.n	21cae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   21b0c:	1dfb      	adds	r3, r7, #7
   21b0e:	781b      	ldrb	r3, [r3, #0]
   21b10:	2b13      	cmp	r3, #19
   21b12:	d116      	bne.n	21b42 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   21b14:	230c      	movs	r3, #12
   21b16:	18f9      	adds	r1, r7, r3
   21b18:	6838      	ldr	r0, [r7, #0]
   21b1a:	2300      	movs	r3, #0
   21b1c:	222c      	movs	r2, #44	; 0x2c
   21b1e:	4c51      	ldr	r4, [pc, #324]	; (21c64 <m2m_wifi_cb+0x350>)
   21b20:	47a0      	blx	r4
   21b22:	1e03      	subs	r3, r0, #0
   21b24:	d000      	beq.n	21b28 <m2m_wifi_cb+0x214>
   21b26:	e0c2      	b.n	21cae <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21b28:	4b4f      	ldr	r3, [pc, #316]	; (21c68 <m2m_wifi_cb+0x354>)
   21b2a:	681b      	ldr	r3, [r3, #0]
   21b2c:	2b00      	cmp	r3, #0
   21b2e:	d100      	bne.n	21b32 <m2m_wifi_cb+0x21e>
   21b30:	e0bd      	b.n	21cae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   21b32:	4b4d      	ldr	r3, [pc, #308]	; (21c68 <m2m_wifi_cb+0x354>)
   21b34:	681b      	ldr	r3, [r3, #0]
   21b36:	220c      	movs	r2, #12
   21b38:	18ba      	adds	r2, r7, r2
   21b3a:	0011      	movs	r1, r2
   21b3c:	2013      	movs	r0, #19
   21b3e:	4798      	blx	r3
}
   21b40:	e0b5      	b.n	21cae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   21b42:	1dfb      	adds	r3, r7, #7
   21b44:	781b      	ldrb	r3, [r3, #0]
   21b46:	2b04      	cmp	r3, #4
   21b48:	d116      	bne.n	21b78 <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   21b4a:	23a8      	movs	r3, #168	; 0xa8
   21b4c:	18f9      	adds	r1, r7, r3
   21b4e:	6838      	ldr	r0, [r7, #0]
   21b50:	2300      	movs	r3, #0
   21b52:	2204      	movs	r2, #4
   21b54:	4c43      	ldr	r4, [pc, #268]	; (21c64 <m2m_wifi_cb+0x350>)
   21b56:	47a0      	blx	r4
   21b58:	1e03      	subs	r3, r0, #0
   21b5a:	d000      	beq.n	21b5e <m2m_wifi_cb+0x24a>
   21b5c:	e0a7      	b.n	21cae <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21b5e:	4b42      	ldr	r3, [pc, #264]	; (21c68 <m2m_wifi_cb+0x354>)
   21b60:	681b      	ldr	r3, [r3, #0]
   21b62:	2b00      	cmp	r3, #0
   21b64:	d100      	bne.n	21b68 <m2m_wifi_cb+0x254>
   21b66:	e0a2      	b.n	21cae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   21b68:	4b3f      	ldr	r3, [pc, #252]	; (21c68 <m2m_wifi_cb+0x354>)
   21b6a:	681b      	ldr	r3, [r3, #0]
   21b6c:	22a8      	movs	r2, #168	; 0xa8
   21b6e:	18ba      	adds	r2, r7, r2
   21b70:	0011      	movs	r1, r2
   21b72:	2004      	movs	r0, #4
   21b74:	4798      	blx	r3
}
   21b76:	e09a      	b.n	21cae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   21b78:	1dfb      	adds	r3, r7, #7
   21b7a:	781b      	ldrb	r3, [r3, #0]
   21b7c:	2b65      	cmp	r3, #101	; 0x65
   21b7e:	d116      	bne.n	21bae <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   21b80:	23a8      	movs	r3, #168	; 0xa8
   21b82:	18f9      	adds	r1, r7, r3
   21b84:	6838      	ldr	r0, [r7, #0]
   21b86:	2300      	movs	r3, #0
   21b88:	2204      	movs	r2, #4
   21b8a:	4c36      	ldr	r4, [pc, #216]	; (21c64 <m2m_wifi_cb+0x350>)
   21b8c:	47a0      	blx	r4
   21b8e:	1e03      	subs	r3, r0, #0
   21b90:	d000      	beq.n	21b94 <m2m_wifi_cb+0x280>
   21b92:	e08c      	b.n	21cae <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21b94:	4b34      	ldr	r3, [pc, #208]	; (21c68 <m2m_wifi_cb+0x354>)
   21b96:	681b      	ldr	r3, [r3, #0]
   21b98:	2b00      	cmp	r3, #0
   21b9a:	d100      	bne.n	21b9e <m2m_wifi_cb+0x28a>
   21b9c:	e087      	b.n	21cae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   21b9e:	4b32      	ldr	r3, [pc, #200]	; (21c68 <m2m_wifi_cb+0x354>)
   21ba0:	681b      	ldr	r3, [r3, #0]
   21ba2:	22a8      	movs	r2, #168	; 0xa8
   21ba4:	18ba      	adds	r2, r7, r2
   21ba6:	0011      	movs	r1, r2
   21ba8:	2065      	movs	r0, #101	; 0x65
   21baa:	4798      	blx	r3
}
   21bac:	e07f      	b.n	21cae <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   21bae:	1dfb      	adds	r3, r7, #7
   21bb0:	781b      	ldrb	r3, [r3, #0]
   21bb2:	2b09      	cmp	r3, #9
   21bb4:	d116      	bne.n	21be4 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   21bb6:	230c      	movs	r3, #12
   21bb8:	18f9      	adds	r1, r7, r3
   21bba:	6838      	ldr	r0, [r7, #0]
   21bbc:	2301      	movs	r3, #1
   21bbe:	2264      	movs	r2, #100	; 0x64
   21bc0:	4c28      	ldr	r4, [pc, #160]	; (21c64 <m2m_wifi_cb+0x350>)
   21bc2:	47a0      	blx	r4
   21bc4:	1e03      	subs	r3, r0, #0
   21bc6:	d000      	beq.n	21bca <m2m_wifi_cb+0x2b6>
   21bc8:	e071      	b.n	21cae <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   21bca:	4b27      	ldr	r3, [pc, #156]	; (21c68 <m2m_wifi_cb+0x354>)
   21bcc:	681b      	ldr	r3, [r3, #0]
   21bce:	2b00      	cmp	r3, #0
   21bd0:	d100      	bne.n	21bd4 <m2m_wifi_cb+0x2c0>
   21bd2:	e06c      	b.n	21cae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   21bd4:	4b24      	ldr	r3, [pc, #144]	; (21c68 <m2m_wifi_cb+0x354>)
   21bd6:	681b      	ldr	r3, [r3, #0]
   21bd8:	220c      	movs	r2, #12
   21bda:	18ba      	adds	r2, r7, r2
   21bdc:	0011      	movs	r1, r2
   21bde:	2009      	movs	r0, #9
   21be0:	4798      	blx	r3
}
   21be2:	e064      	b.n	21cae <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   21be4:	1dfb      	adds	r3, r7, #7
   21be6:	781b      	ldrb	r3, [r3, #0]
   21be8:	2b2a      	cmp	r3, #42	; 0x2a
   21bea:	d114      	bne.n	21c16 <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   21bec:	2378      	movs	r3, #120	; 0x78
   21bee:	18f9      	adds	r1, r7, r3
   21bf0:	6838      	ldr	r0, [r7, #0]
   21bf2:	2301      	movs	r3, #1
   21bf4:	2204      	movs	r2, #4
   21bf6:	4c1b      	ldr	r4, [pc, #108]	; (21c64 <m2m_wifi_cb+0x350>)
   21bf8:	47a0      	blx	r4
   21bfa:	1e03      	subs	r3, r0, #0
   21bfc:	d157      	bne.n	21cae <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   21bfe:	4b1a      	ldr	r3, [pc, #104]	; (21c68 <m2m_wifi_cb+0x354>)
   21c00:	681b      	ldr	r3, [r3, #0]
   21c02:	2b00      	cmp	r3, #0
   21c04:	d053      	beq.n	21cae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   21c06:	4b18      	ldr	r3, [pc, #96]	; (21c68 <m2m_wifi_cb+0x354>)
   21c08:	681b      	ldr	r3, [r3, #0]
   21c0a:	2278      	movs	r2, #120	; 0x78
   21c0c:	18ba      	adds	r2, r7, r2
   21c0e:	0011      	movs	r1, r2
   21c10:	202a      	movs	r0, #42	; 0x2a
   21c12:	4798      	blx	r3
}
   21c14:	e04b      	b.n	21cae <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   21c16:	1dfb      	adds	r3, r7, #7
   21c18:	781b      	ldrb	r3, [r3, #0]
   21c1a:	2b20      	cmp	r3, #32
   21c1c:	d134      	bne.n	21c88 <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   21c1e:	2370      	movs	r3, #112	; 0x70
   21c20:	18f9      	adds	r1, r7, r3
   21c22:	6838      	ldr	r0, [r7, #0]
   21c24:	2300      	movs	r3, #0
   21c26:	2208      	movs	r2, #8
   21c28:	4c0e      	ldr	r4, [pc, #56]	; (21c64 <m2m_wifi_cb+0x350>)
   21c2a:	47a0      	blx	r4
   21c2c:	1e03      	subs	r3, r0, #0
   21c2e:	d13e      	bne.n	21cae <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   21c30:	683b      	ldr	r3, [r7, #0]
   21c32:	3308      	adds	r3, #8
   21c34:	0018      	movs	r0, r3
   21c36:	2370      	movs	r3, #112	; 0x70
   21c38:	18fb      	adds	r3, r7, r3
   21c3a:	6819      	ldr	r1, [r3, #0]
   21c3c:	2370      	movs	r3, #112	; 0x70
   21c3e:	18fb      	adds	r3, r7, r3
   21c40:	889a      	ldrh	r2, [r3, #4]
   21c42:	2301      	movs	r3, #1
   21c44:	4c07      	ldr	r4, [pc, #28]	; (21c64 <m2m_wifi_cb+0x350>)
   21c46:	47a0      	blx	r4
   21c48:	1e03      	subs	r3, r0, #0
   21c4a:	d130      	bne.n	21cae <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   21c4c:	4b06      	ldr	r3, [pc, #24]	; (21c68 <m2m_wifi_cb+0x354>)
   21c4e:	681b      	ldr	r3, [r3, #0]
   21c50:	2b00      	cmp	r3, #0
   21c52:	d02c      	beq.n	21cae <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   21c54:	4b04      	ldr	r3, [pc, #16]	; (21c68 <m2m_wifi_cb+0x354>)
   21c56:	681b      	ldr	r3, [r3, #0]
   21c58:	2270      	movs	r2, #112	; 0x70
   21c5a:	18ba      	adds	r2, r7, r2
   21c5c:	0011      	movs	r1, r2
   21c5e:	2020      	movs	r0, #32
   21c60:	4798      	blx	r3
}
   21c62:	e024      	b.n	21cae <m2m_wifi_cb+0x39a>
   21c64:	000216d9 	.word	0x000216d9
   21c68:	200042a4 	.word	0x200042a4
   21c6c:	00020b5d 	.word	0x00020b5d
   21c70:	0003874c 	.word	0x0003874c
   21c74:	0001de29 	.word	0x0001de29
   21c78:	00038758 	.word	0x00038758
   21c7c:	00038778 	.word	0x00038778
   21c80:	200042a1 	.word	0x200042a1
   21c84:	200042a0 	.word	0x200042a0
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   21c88:	2324      	movs	r3, #36	; 0x24
   21c8a:	33ff      	adds	r3, #255	; 0xff
   21c8c:	001a      	movs	r2, r3
   21c8e:	490a      	ldr	r1, [pc, #40]	; (21cb8 <m2m_wifi_cb+0x3a4>)
   21c90:	4b0a      	ldr	r3, [pc, #40]	; (21cbc <m2m_wifi_cb+0x3a8>)
   21c92:	0018      	movs	r0, r3
   21c94:	4b0a      	ldr	r3, [pc, #40]	; (21cc0 <m2m_wifi_cb+0x3ac>)
   21c96:	4798      	blx	r3
   21c98:	1dfb      	adds	r3, r7, #7
   21c9a:	781a      	ldrb	r2, [r3, #0]
   21c9c:	4b09      	ldr	r3, [pc, #36]	; (21cc4 <m2m_wifi_cb+0x3b0>)
   21c9e:	0011      	movs	r1, r2
   21ca0:	0018      	movs	r0, r3
   21ca2:	4b07      	ldr	r3, [pc, #28]	; (21cc0 <m2m_wifi_cb+0x3ac>)
   21ca4:	4798      	blx	r3
   21ca6:	4b08      	ldr	r3, [pc, #32]	; (21cc8 <m2m_wifi_cb+0x3b4>)
   21ca8:	0018      	movs	r0, r3
   21caa:	4b05      	ldr	r3, [pc, #20]	; (21cc0 <m2m_wifi_cb+0x3ac>)
   21cac:	4798      	blx	r3
}
   21cae:	46c0      	nop			; (mov r8, r8)
   21cb0:	46bd      	mov	sp, r7
   21cb2:	b02d      	add	sp, #180	; 0xb4
   21cb4:	bd90      	pop	{r4, r7, pc}
   21cb6:	46c0      	nop			; (mov r8, r8)
   21cb8:	00038a6c 	.word	0x00038a6c
   21cbc:	0003877c 	.word	0x0003877c
   21cc0:	0001de29 	.word	0x0001de29
   21cc4:	00038790 	.word	0x00038790
   21cc8:	00038778 	.word	0x00038778

00021ccc <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   21ccc:	b590      	push	{r4, r7, lr}
   21cce:	b08f      	sub	sp, #60	; 0x3c
   21cd0:	af00      	add	r7, sp, #0
   21cd2:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   21cd4:	2337      	movs	r3, #55	; 0x37
   21cd6:	18fb      	adds	r3, r7, r3
   21cd8:	2200      	movs	r2, #0
   21cda:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   21cdc:	230b      	movs	r3, #11
   21cde:	18fb      	adds	r3, r7, r3
   21ce0:	2201      	movs	r2, #1
   21ce2:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   21ce4:	687b      	ldr	r3, [r7, #4]
   21ce6:	2b00      	cmp	r3, #0
   21ce8:	d104      	bne.n	21cf4 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   21cea:	2337      	movs	r3, #55	; 0x37
   21cec:	18fb      	adds	r3, r7, r3
   21cee:	22f4      	movs	r2, #244	; 0xf4
   21cf0:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   21cf2:	e052      	b.n	21d9a <m2m_wifi_init+0xce>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   21cf4:	687b      	ldr	r3, [r7, #4]
   21cf6:	681a      	ldr	r2, [r3, #0]
   21cf8:	4b2c      	ldr	r3, [pc, #176]	; (21dac <m2m_wifi_init+0xe0>)
   21cfa:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   21cfc:	4b2c      	ldr	r3, [pc, #176]	; (21db0 <m2m_wifi_init+0xe4>)
   21cfe:	2200      	movs	r2, #0
   21d00:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   21d02:	2337      	movs	r3, #55	; 0x37
   21d04:	18fc      	adds	r4, r7, r3
   21d06:	230b      	movs	r3, #11
   21d08:	18fb      	adds	r3, r7, r3
   21d0a:	0018      	movs	r0, r3
   21d0c:	4b29      	ldr	r3, [pc, #164]	; (21db4 <m2m_wifi_init+0xe8>)
   21d0e:	4798      	blx	r3
   21d10:	0003      	movs	r3, r0
   21d12:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   21d14:	2337      	movs	r3, #55	; 0x37
   21d16:	18fb      	adds	r3, r7, r3
   21d18:	781b      	ldrb	r3, [r3, #0]
   21d1a:	b25b      	sxtb	r3, r3
   21d1c:	2b00      	cmp	r3, #0
   21d1e:	d139      	bne.n	21d94 <m2m_wifi_init+0xc8>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   21d20:	2337      	movs	r3, #55	; 0x37
   21d22:	18fc      	adds	r4, r7, r3
   21d24:	2000      	movs	r0, #0
   21d26:	4b24      	ldr	r3, [pc, #144]	; (21db8 <m2m_wifi_init+0xec>)
   21d28:	4798      	blx	r3
   21d2a:	0003      	movs	r3, r0
   21d2c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   21d2e:	2337      	movs	r3, #55	; 0x37
   21d30:	18fb      	adds	r3, r7, r3
   21d32:	781b      	ldrb	r3, [r3, #0]
   21d34:	b25b      	sxtb	r3, r3
   21d36:	2b00      	cmp	r3, #0
   21d38:	d127      	bne.n	21d8a <m2m_wifi_init+0xbe>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   21d3a:	4b20      	ldr	r3, [pc, #128]	; (21dbc <m2m_wifi_init+0xf0>)
   21d3c:	0019      	movs	r1, r3
   21d3e:	2001      	movs	r0, #1
   21d40:	4b1f      	ldr	r3, [pc, #124]	; (21dc0 <m2m_wifi_init+0xf4>)
   21d42:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   21d44:	2337      	movs	r3, #55	; 0x37
   21d46:	18fc      	adds	r4, r7, r3
   21d48:	230c      	movs	r3, #12
   21d4a:	18fb      	adds	r3, r7, r3
   21d4c:	0018      	movs	r0, r3
   21d4e:	4b1d      	ldr	r3, [pc, #116]	; (21dc4 <m2m_wifi_init+0xf8>)
   21d50:	4798      	blx	r3
   21d52:	0003      	movs	r3, r0
   21d54:	7023      	strb	r3, [r4, #0]
	//M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
	//M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
	//M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
	//M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
	//M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
	SerialConsoleWriteString("\r\n");
   21d56:	4b1c      	ldr	r3, [pc, #112]	; (21dc8 <m2m_wifi_init+0xfc>)
   21d58:	0018      	movs	r0, r3
   21d5a:	4b1c      	ldr	r3, [pc, #112]	; (21dcc <m2m_wifi_init+0x100>)
   21d5c:	4798      	blx	r3
	
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   21d5e:	2337      	movs	r3, #55	; 0x37
   21d60:	18fb      	adds	r3, r7, r3
   21d62:	781b      	ldrb	r3, [r3, #0]
   21d64:	b25b      	sxtb	r3, r3
   21d66:	330d      	adds	r3, #13
   21d68:	d116      	bne.n	21d98 <m2m_wifi_init+0xcc>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   21d6a:	23f5      	movs	r3, #245	; 0xf5
   21d6c:	005a      	lsls	r2, r3, #1
   21d6e:	4918      	ldr	r1, [pc, #96]	; (21dd0 <m2m_wifi_init+0x104>)
   21d70:	4b18      	ldr	r3, [pc, #96]	; (21dd4 <m2m_wifi_init+0x108>)
   21d72:	0018      	movs	r0, r3
   21d74:	4b18      	ldr	r3, [pc, #96]	; (21dd8 <m2m_wifi_init+0x10c>)
   21d76:	4798      	blx	r3
   21d78:	4b18      	ldr	r3, [pc, #96]	; (21ddc <m2m_wifi_init+0x110>)
   21d7a:	0018      	movs	r0, r3
   21d7c:	4b16      	ldr	r3, [pc, #88]	; (21dd8 <m2m_wifi_init+0x10c>)
   21d7e:	4798      	blx	r3
   21d80:	4b17      	ldr	r3, [pc, #92]	; (21de0 <m2m_wifi_init+0x114>)
   21d82:	0018      	movs	r0, r3
   21d84:	4b14      	ldr	r3, [pc, #80]	; (21dd8 <m2m_wifi_init+0x10c>)
   21d86:	4798      	blx	r3
	}

	goto _EXIT0;
   21d88:	e006      	b.n	21d98 <m2m_wifi_init+0xcc>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   21d8a:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   21d8c:	2000      	movs	r0, #0
   21d8e:	4b15      	ldr	r3, [pc, #84]	; (21de4 <m2m_wifi_init+0x118>)
   21d90:	4798      	blx	r3
   21d92:	e002      	b.n	21d9a <m2m_wifi_init+0xce>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   21d94:	46c0      	nop			; (mov r8, r8)
   21d96:	e000      	b.n	21d9a <m2m_wifi_init+0xce>
	goto _EXIT0;
   21d98:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   21d9a:	2337      	movs	r3, #55	; 0x37
   21d9c:	18fb      	adds	r3, r7, r3
   21d9e:	781b      	ldrb	r3, [r3, #0]
   21da0:	b25b      	sxtb	r3, r3
}
   21da2:	0018      	movs	r0, r3
   21da4:	46bd      	mov	sp, r7
   21da6:	b00f      	add	sp, #60	; 0x3c
   21da8:	bd90      	pop	{r4, r7, pc}
   21daa:	46c0      	nop			; (mov r8, r8)
   21dac:	200042a4 	.word	0x200042a4
   21db0:	200042a1 	.word	0x200042a1
   21db4:	00022f19 	.word	0x00022f19
   21db8:	00020d75 	.word	0x00020d75
   21dbc:	00021915 	.word	0x00021915
   21dc0:	00021859 	.word	0x00021859
   21dc4:	00022d4d 	.word	0x00022d4d
   21dc8:	000388f0 	.word	0x000388f0
   21dcc:	0001dce5 	.word	0x0001dce5
   21dd0:	00038a78 	.word	0x00038a78
   21dd4:	0003877c 	.word	0x0003877c
   21dd8:	0001de29 	.word	0x0001de29
   21ddc:	000388f4 	.word	0x000388f4
   21de0:	00038778 	.word	0x00038778
   21de4:	000230a9 	.word	0x000230a9

00021de8 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   21de8:	b580      	push	{r7, lr}
   21dea:	b082      	sub	sp, #8
   21dec:	af00      	add	r7, sp, #0
   21dee:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   21df0:	4b03      	ldr	r3, [pc, #12]	; (21e00 <m2m_wifi_handle_events+0x18>)
   21df2:	4798      	blx	r3
   21df4:	0003      	movs	r3, r0
}
   21df6:	0018      	movs	r0, r3
   21df8:	46bd      	mov	sp, r7
   21dfa:	b002      	add	sp, #8
   21dfc:	bd80      	pop	{r7, pc}
   21dfe:	46c0      	nop			; (mov r8, r8)
   21e00:	00021639 	.word	0x00021639

00021e04 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   21e04:	b590      	push	{r4, r7, lr}
   21e06:	b087      	sub	sp, #28
   21e08:	af02      	add	r7, sp, #8
   21e0a:	60f8      	str	r0, [r7, #12]
   21e0c:	0008      	movs	r0, r1
   21e0e:	0011      	movs	r1, r2
   21e10:	607b      	str	r3, [r7, #4]
   21e12:	230b      	movs	r3, #11
   21e14:	18fb      	adds	r3, r7, r3
   21e16:	1c02      	adds	r2, r0, #0
   21e18:	701a      	strb	r2, [r3, #0]
   21e1a:	230a      	movs	r3, #10
   21e1c:	18fb      	adds	r3, r7, r3
   21e1e:	1c0a      	adds	r2, r1, #0
   21e20:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   21e22:	687c      	ldr	r4, [r7, #4]
   21e24:	230a      	movs	r3, #10
   21e26:	18fb      	adds	r3, r7, r3
   21e28:	781a      	ldrb	r2, [r3, #0]
   21e2a:	230b      	movs	r3, #11
   21e2c:	18fb      	adds	r3, r7, r3
   21e2e:	7819      	ldrb	r1, [r3, #0]
   21e30:	68f8      	ldr	r0, [r7, #12]
   21e32:	2300      	movs	r3, #0
   21e34:	9301      	str	r3, [sp, #4]
   21e36:	2320      	movs	r3, #32
   21e38:	18fb      	adds	r3, r7, r3
   21e3a:	881b      	ldrh	r3, [r3, #0]
   21e3c:	9300      	str	r3, [sp, #0]
   21e3e:	0023      	movs	r3, r4
   21e40:	4c03      	ldr	r4, [pc, #12]	; (21e50 <m2m_wifi_connect+0x4c>)
   21e42:	47a0      	blx	r4
   21e44:	0003      	movs	r3, r0
}
   21e46:	0018      	movs	r0, r3
   21e48:	46bd      	mov	sp, r7
   21e4a:	b005      	add	sp, #20
   21e4c:	bd90      	pop	{r4, r7, pc}
   21e4e:	46c0      	nop			; (mov r8, r8)
   21e50:	00021e55 	.word	0x00021e55

00021e54 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   21e54:	b5b0      	push	{r4, r5, r7, lr}
   21e56:	b0aa      	sub	sp, #168	; 0xa8
   21e58:	af04      	add	r7, sp, #16
   21e5a:	60f8      	str	r0, [r7, #12]
   21e5c:	0008      	movs	r0, r1
   21e5e:	0011      	movs	r1, r2
   21e60:	607b      	str	r3, [r7, #4]
   21e62:	230b      	movs	r3, #11
   21e64:	18fb      	adds	r3, r7, r3
   21e66:	1c02      	adds	r2, r0, #0
   21e68:	701a      	strb	r2, [r3, #0]
   21e6a:	230a      	movs	r3, #10
   21e6c:	18fb      	adds	r3, r7, r3
   21e6e:	1c0a      	adds	r2, r1, #0
   21e70:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   21e72:	2397      	movs	r3, #151	; 0x97
   21e74:	18fb      	adds	r3, r7, r3
   21e76:	2200      	movs	r2, #0
   21e78:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   21e7a:	230a      	movs	r3, #10
   21e7c:	18fb      	adds	r3, r7, r3
   21e7e:	781b      	ldrb	r3, [r3, #0]
   21e80:	2b01      	cmp	r3, #1
   21e82:	d100      	bne.n	21e86 <m2m_wifi_connect_sc+0x32>
   21e84:	e085      	b.n	21f92 <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   21e86:	687b      	ldr	r3, [r7, #4]
   21e88:	2b00      	cmp	r3, #0
   21e8a:	d112      	bne.n	21eb2 <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   21e8c:	4ad7      	ldr	r2, [pc, #860]	; (221ec <m2m_wifi_connect_sc+0x398>)
   21e8e:	49d8      	ldr	r1, [pc, #864]	; (221f0 <m2m_wifi_connect_sc+0x39c>)
   21e90:	4bd8      	ldr	r3, [pc, #864]	; (221f4 <m2m_wifi_connect_sc+0x3a0>)
   21e92:	0018      	movs	r0, r3
   21e94:	4bd8      	ldr	r3, [pc, #864]	; (221f8 <m2m_wifi_connect_sc+0x3a4>)
   21e96:	4798      	blx	r3
   21e98:	4bd8      	ldr	r3, [pc, #864]	; (221fc <m2m_wifi_connect_sc+0x3a8>)
   21e9a:	0018      	movs	r0, r3
   21e9c:	4bd6      	ldr	r3, [pc, #856]	; (221f8 <m2m_wifi_connect_sc+0x3a4>)
   21e9e:	4798      	blx	r3
   21ea0:	4bd7      	ldr	r3, [pc, #860]	; (22200 <m2m_wifi_connect_sc+0x3ac>)
   21ea2:	0018      	movs	r0, r3
   21ea4:	4bd4      	ldr	r3, [pc, #848]	; (221f8 <m2m_wifi_connect_sc+0x3a4>)
   21ea6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21ea8:	2397      	movs	r3, #151	; 0x97
   21eaa:	18fb      	adds	r3, r7, r3
   21eac:	22f4      	movs	r2, #244	; 0xf4
   21eae:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21eb0:	e1f9      	b.n	222a6 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   21eb2:	230a      	movs	r3, #10
   21eb4:	18fb      	adds	r3, r7, r3
   21eb6:	781b      	ldrb	r3, [r3, #0]
   21eb8:	2b02      	cmp	r3, #2
   21eba:	d16a      	bne.n	21f92 <m2m_wifi_connect_sc+0x13e>
   21ebc:	687b      	ldr	r3, [r7, #4]
   21ebe:	0018      	movs	r0, r3
   21ec0:	4bd0      	ldr	r3, [pc, #832]	; (22204 <m2m_wifi_connect_sc+0x3b0>)
   21ec2:	4798      	blx	r3
   21ec4:	0003      	movs	r3, r0
   21ec6:	2b40      	cmp	r3, #64	; 0x40
   21ec8:	d163      	bne.n	21f92 <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   21eca:	2396      	movs	r3, #150	; 0x96
   21ecc:	18fb      	adds	r3, r7, r3
   21ece:	2200      	movs	r2, #0
   21ed0:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   21ed2:	687b      	ldr	r3, [r7, #4]
   21ed4:	2290      	movs	r2, #144	; 0x90
   21ed6:	18ba      	adds	r2, r7, r2
   21ed8:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   21eda:	e055      	b.n	21f88 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   21edc:	2396      	movs	r3, #150	; 0x96
   21ede:	18fb      	adds	r3, r7, r3
   21ee0:	781b      	ldrb	r3, [r3, #0]
   21ee2:	2290      	movs	r2, #144	; 0x90
   21ee4:	18ba      	adds	r2, r7, r2
   21ee6:	6812      	ldr	r2, [r2, #0]
   21ee8:	18d3      	adds	r3, r2, r3
   21eea:	781b      	ldrb	r3, [r3, #0]
   21eec:	2b2f      	cmp	r3, #47	; 0x2f
   21eee:	d931      	bls.n	21f54 <m2m_wifi_connect_sc+0x100>
   21ef0:	2396      	movs	r3, #150	; 0x96
   21ef2:	18fb      	adds	r3, r7, r3
   21ef4:	781b      	ldrb	r3, [r3, #0]
   21ef6:	2290      	movs	r2, #144	; 0x90
   21ef8:	18ba      	adds	r2, r7, r2
   21efa:	6812      	ldr	r2, [r2, #0]
   21efc:	18d3      	adds	r3, r2, r3
   21efe:	781b      	ldrb	r3, [r3, #0]
   21f00:	2b39      	cmp	r3, #57	; 0x39
   21f02:	d909      	bls.n	21f18 <m2m_wifi_connect_sc+0xc4>
   21f04:	2396      	movs	r3, #150	; 0x96
   21f06:	18fb      	adds	r3, r7, r3
   21f08:	781b      	ldrb	r3, [r3, #0]
   21f0a:	2290      	movs	r2, #144	; 0x90
   21f0c:	18ba      	adds	r2, r7, r2
   21f0e:	6812      	ldr	r2, [r2, #0]
   21f10:	18d3      	adds	r3, r2, r3
   21f12:	781b      	ldrb	r3, [r3, #0]
   21f14:	2b40      	cmp	r3, #64	; 0x40
   21f16:	d91d      	bls.n	21f54 <m2m_wifi_connect_sc+0x100>
   21f18:	2396      	movs	r3, #150	; 0x96
   21f1a:	18fb      	adds	r3, r7, r3
   21f1c:	781b      	ldrb	r3, [r3, #0]
   21f1e:	2290      	movs	r2, #144	; 0x90
   21f20:	18ba      	adds	r2, r7, r2
   21f22:	6812      	ldr	r2, [r2, #0]
   21f24:	18d3      	adds	r3, r2, r3
   21f26:	781b      	ldrb	r3, [r3, #0]
   21f28:	2b46      	cmp	r3, #70	; 0x46
   21f2a:	d909      	bls.n	21f40 <m2m_wifi_connect_sc+0xec>
   21f2c:	2396      	movs	r3, #150	; 0x96
   21f2e:	18fb      	adds	r3, r7, r3
   21f30:	781b      	ldrb	r3, [r3, #0]
   21f32:	2290      	movs	r2, #144	; 0x90
   21f34:	18ba      	adds	r2, r7, r2
   21f36:	6812      	ldr	r2, [r2, #0]
   21f38:	18d3      	adds	r3, r2, r3
   21f3a:	781b      	ldrb	r3, [r3, #0]
   21f3c:	2b60      	cmp	r3, #96	; 0x60
   21f3e:	d909      	bls.n	21f54 <m2m_wifi_connect_sc+0x100>
   21f40:	2396      	movs	r3, #150	; 0x96
   21f42:	18fb      	adds	r3, r7, r3
   21f44:	781b      	ldrb	r3, [r3, #0]
   21f46:	2290      	movs	r2, #144	; 0x90
   21f48:	18ba      	adds	r2, r7, r2
   21f4a:	6812      	ldr	r2, [r2, #0]
   21f4c:	18d3      	adds	r3, r2, r3
   21f4e:	781b      	ldrb	r3, [r3, #0]
   21f50:	2b66      	cmp	r3, #102	; 0x66
   21f52:	d912      	bls.n	21f7a <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   21f54:	4aac      	ldr	r2, [pc, #688]	; (22208 <m2m_wifi_connect_sc+0x3b4>)
   21f56:	49a6      	ldr	r1, [pc, #664]	; (221f0 <m2m_wifi_connect_sc+0x39c>)
   21f58:	4ba6      	ldr	r3, [pc, #664]	; (221f4 <m2m_wifi_connect_sc+0x3a0>)
   21f5a:	0018      	movs	r0, r3
   21f5c:	4ba6      	ldr	r3, [pc, #664]	; (221f8 <m2m_wifi_connect_sc+0x3a4>)
   21f5e:	4798      	blx	r3
   21f60:	4baa      	ldr	r3, [pc, #680]	; (2220c <m2m_wifi_connect_sc+0x3b8>)
   21f62:	0018      	movs	r0, r3
   21f64:	4ba4      	ldr	r3, [pc, #656]	; (221f8 <m2m_wifi_connect_sc+0x3a4>)
   21f66:	4798      	blx	r3
   21f68:	4ba5      	ldr	r3, [pc, #660]	; (22200 <m2m_wifi_connect_sc+0x3ac>)
   21f6a:	0018      	movs	r0, r3
   21f6c:	4ba2      	ldr	r3, [pc, #648]	; (221f8 <m2m_wifi_connect_sc+0x3a4>)
   21f6e:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   21f70:	2397      	movs	r3, #151	; 0x97
   21f72:	18fb      	adds	r3, r7, r3
   21f74:	22f4      	movs	r2, #244	; 0xf4
   21f76:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   21f78:	e195      	b.n	222a6 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   21f7a:	2396      	movs	r3, #150	; 0x96
   21f7c:	18fb      	adds	r3, r7, r3
   21f7e:	781a      	ldrb	r2, [r3, #0]
   21f80:	2396      	movs	r3, #150	; 0x96
   21f82:	18fb      	adds	r3, r7, r3
   21f84:	3201      	adds	r2, #1
   21f86:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   21f88:	2396      	movs	r3, #150	; 0x96
   21f8a:	18fb      	adds	r3, r7, r3
   21f8c:	781b      	ldrb	r3, [r3, #0]
   21f8e:	2b3f      	cmp	r3, #63	; 0x3f
   21f90:	d9a4      	bls.n	21edc <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   21f92:	230b      	movs	r3, #11
   21f94:	18fb      	adds	r3, r7, r3
   21f96:	781b      	ldrb	r3, [r3, #0]
   21f98:	2b00      	cmp	r3, #0
   21f9a:	d004      	beq.n	21fa6 <m2m_wifi_connect_sc+0x152>
   21f9c:	230b      	movs	r3, #11
   21f9e:	18fb      	adds	r3, r7, r3
   21fa0:	781b      	ldrb	r3, [r3, #0]
   21fa2:	2b20      	cmp	r3, #32
   21fa4:	d912      	bls.n	21fcc <m2m_wifi_connect_sc+0x178>
	{
		M2M_ERR("SSID LEN INVALID\n");
   21fa6:	4a9a      	ldr	r2, [pc, #616]	; (22210 <m2m_wifi_connect_sc+0x3bc>)
   21fa8:	4991      	ldr	r1, [pc, #580]	; (221f0 <m2m_wifi_connect_sc+0x39c>)
   21faa:	4b92      	ldr	r3, [pc, #584]	; (221f4 <m2m_wifi_connect_sc+0x3a0>)
   21fac:	0018      	movs	r0, r3
   21fae:	4b92      	ldr	r3, [pc, #584]	; (221f8 <m2m_wifi_connect_sc+0x3a4>)
   21fb0:	4798      	blx	r3
   21fb2:	4b98      	ldr	r3, [pc, #608]	; (22214 <m2m_wifi_connect_sc+0x3c0>)
   21fb4:	0018      	movs	r0, r3
   21fb6:	4b90      	ldr	r3, [pc, #576]	; (221f8 <m2m_wifi_connect_sc+0x3a4>)
   21fb8:	4798      	blx	r3
   21fba:	4b91      	ldr	r3, [pc, #580]	; (22200 <m2m_wifi_connect_sc+0x3ac>)
   21fbc:	0018      	movs	r0, r3
   21fbe:	4b8e      	ldr	r3, [pc, #568]	; (221f8 <m2m_wifi_connect_sc+0x3a4>)
   21fc0:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   21fc2:	2397      	movs	r3, #151	; 0x97
   21fc4:	18fb      	adds	r3, r7, r3
   21fc6:	22f4      	movs	r2, #244	; 0xf4
   21fc8:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   21fca:	e16c      	b.n	222a6 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   21fcc:	23a8      	movs	r3, #168	; 0xa8
   21fce:	18fb      	adds	r3, r7, r3
   21fd0:	881b      	ldrh	r3, [r3, #0]
   21fd2:	2b00      	cmp	r3, #0
   21fd4:	d004      	beq.n	21fe0 <m2m_wifi_connect_sc+0x18c>
   21fd6:	23a8      	movs	r3, #168	; 0xa8
   21fd8:	18fb      	adds	r3, r7, r3
   21fda:	881b      	ldrh	r3, [r3, #0]
   21fdc:	2b0e      	cmp	r3, #14
   21fde:	d918      	bls.n	22012 <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   21fe0:	23a8      	movs	r3, #168	; 0xa8
   21fe2:	18fb      	adds	r3, r7, r3
   21fe4:	881b      	ldrh	r3, [r3, #0]
   21fe6:	2bff      	cmp	r3, #255	; 0xff
   21fe8:	d013      	beq.n	22012 <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   21fea:	238f      	movs	r3, #143	; 0x8f
   21fec:	009a      	lsls	r2, r3, #2
   21fee:	4980      	ldr	r1, [pc, #512]	; (221f0 <m2m_wifi_connect_sc+0x39c>)
   21ff0:	4b80      	ldr	r3, [pc, #512]	; (221f4 <m2m_wifi_connect_sc+0x3a0>)
   21ff2:	0018      	movs	r0, r3
   21ff4:	4b80      	ldr	r3, [pc, #512]	; (221f8 <m2m_wifi_connect_sc+0x3a4>)
   21ff6:	4798      	blx	r3
   21ff8:	4b87      	ldr	r3, [pc, #540]	; (22218 <m2m_wifi_connect_sc+0x3c4>)
   21ffa:	0018      	movs	r0, r3
   21ffc:	4b7e      	ldr	r3, [pc, #504]	; (221f8 <m2m_wifi_connect_sc+0x3a4>)
   21ffe:	4798      	blx	r3
   22000:	4b7f      	ldr	r3, [pc, #508]	; (22200 <m2m_wifi_connect_sc+0x3ac>)
   22002:	0018      	movs	r0, r3
   22004:	4b7c      	ldr	r3, [pc, #496]	; (221f8 <m2m_wifi_connect_sc+0x3a4>)
   22006:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22008:	2397      	movs	r3, #151	; 0x97
   2200a:	18fb      	adds	r3, r7, r3
   2200c:	22f4      	movs	r2, #244	; 0xf4
   2200e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22010:	e149      	b.n	222a6 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   22012:	230b      	movs	r3, #11
   22014:	18fb      	adds	r3, r7, r3
   22016:	781a      	ldrb	r2, [r3, #0]
   22018:	68f9      	ldr	r1, [r7, #12]
   2201a:	2314      	movs	r3, #20
   2201c:	18fb      	adds	r3, r7, r3
   2201e:	3346      	adds	r3, #70	; 0x46
   22020:	0018      	movs	r0, r3
   22022:	4b7e      	ldr	r3, [pc, #504]	; (2221c <m2m_wifi_connect_sc+0x3c8>)
   22024:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   22026:	230b      	movs	r3, #11
   22028:	18fb      	adds	r3, r7, r3
   2202a:	781b      	ldrb	r3, [r3, #0]
   2202c:	2214      	movs	r2, #20
   2202e:	18ba      	adds	r2, r7, r2
   22030:	2146      	movs	r1, #70	; 0x46
   22032:	18d3      	adds	r3, r2, r3
   22034:	185b      	adds	r3, r3, r1
   22036:	2200      	movs	r2, #0
   22038:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   2203a:	2314      	movs	r3, #20
   2203c:	18fb      	adds	r3, r7, r3
   2203e:	22a8      	movs	r2, #168	; 0xa8
   22040:	18ba      	adds	r2, r7, r2
   22042:	2144      	movs	r1, #68	; 0x44
   22044:	8812      	ldrh	r2, [r2, #0]
   22046:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   22048:	23ac      	movs	r3, #172	; 0xac
   2204a:	18fb      	adds	r3, r7, r3
   2204c:	781b      	ldrb	r3, [r3, #0]
   2204e:	1e5a      	subs	r2, r3, #1
   22050:	4193      	sbcs	r3, r2
   22052:	b2db      	uxtb	r3, r3
   22054:	0019      	movs	r1, r3
   22056:	2314      	movs	r3, #20
   22058:	18fb      	adds	r3, r7, r3
   2205a:	2267      	movs	r2, #103	; 0x67
   2205c:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   2205e:	2314      	movs	r3, #20
   22060:	18fb      	adds	r3, r7, r3
   22062:	228c      	movs	r2, #140	; 0x8c
   22064:	18ba      	adds	r2, r7, r2
   22066:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   22068:	238c      	movs	r3, #140	; 0x8c
   2206a:	18fb      	adds	r3, r7, r3
   2206c:	681b      	ldr	r3, [r3, #0]
   2206e:	220a      	movs	r2, #10
   22070:	18ba      	adds	r2, r7, r2
   22072:	2141      	movs	r1, #65	; 0x41
   22074:	7812      	ldrb	r2, [r2, #0]
   22076:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   22078:	230a      	movs	r3, #10
   2207a:	18fb      	adds	r3, r7, r3
   2207c:	781b      	ldrb	r3, [r3, #0]
   2207e:	2b03      	cmp	r3, #3
   22080:	d000      	beq.n	22084 <m2m_wifi_connect_sc+0x230>
   22082:	e07c      	b.n	2217e <m2m_wifi_connect_sc+0x32a>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   22084:	687b      	ldr	r3, [r7, #4]
   22086:	2288      	movs	r2, #136	; 0x88
   22088:	18ba      	adds	r2, r7, r2
   2208a:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   2208c:	238c      	movs	r3, #140	; 0x8c
   2208e:	18fb      	adds	r3, r7, r3
   22090:	681b      	ldr	r3, [r3, #0]
   22092:	2284      	movs	r2, #132	; 0x84
   22094:	18ba      	adds	r2, r7, r2
   22096:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   22098:	2388      	movs	r3, #136	; 0x88
   2209a:	18fb      	adds	r3, r7, r3
   2209c:	681b      	ldr	r3, [r3, #0]
   2209e:	781b      	ldrb	r3, [r3, #0]
   220a0:	3b01      	subs	r3, #1
   220a2:	b2da      	uxtb	r2, r3
   220a4:	2384      	movs	r3, #132	; 0x84
   220a6:	18fb      	adds	r3, r7, r3
   220a8:	681b      	ldr	r3, [r3, #0]
   220aa:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   220ac:	2384      	movs	r3, #132	; 0x84
   220ae:	18fb      	adds	r3, r7, r3
   220b0:	681b      	ldr	r3, [r3, #0]
   220b2:	781b      	ldrb	r3, [r3, #0]
   220b4:	2b03      	cmp	r3, #3
   220b6:	d918      	bls.n	220ea <m2m_wifi_connect_sc+0x296>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   220b8:	4a59      	ldr	r2, [pc, #356]	; (22220 <m2m_wifi_connect_sc+0x3cc>)
   220ba:	494d      	ldr	r1, [pc, #308]	; (221f0 <m2m_wifi_connect_sc+0x39c>)
   220bc:	4b4d      	ldr	r3, [pc, #308]	; (221f4 <m2m_wifi_connect_sc+0x3a0>)
   220be:	0018      	movs	r0, r3
   220c0:	4b4d      	ldr	r3, [pc, #308]	; (221f8 <m2m_wifi_connect_sc+0x3a4>)
   220c2:	4798      	blx	r3
   220c4:	2384      	movs	r3, #132	; 0x84
   220c6:	18fb      	adds	r3, r7, r3
   220c8:	681b      	ldr	r3, [r3, #0]
   220ca:	781b      	ldrb	r3, [r3, #0]
   220cc:	001a      	movs	r2, r3
   220ce:	4b55      	ldr	r3, [pc, #340]	; (22224 <m2m_wifi_connect_sc+0x3d0>)
   220d0:	0011      	movs	r1, r2
   220d2:	0018      	movs	r0, r3
   220d4:	4b48      	ldr	r3, [pc, #288]	; (221f8 <m2m_wifi_connect_sc+0x3a4>)
   220d6:	4798      	blx	r3
   220d8:	4b49      	ldr	r3, [pc, #292]	; (22200 <m2m_wifi_connect_sc+0x3ac>)
   220da:	0018      	movs	r0, r3
   220dc:	4b46      	ldr	r3, [pc, #280]	; (221f8 <m2m_wifi_connect_sc+0x3a4>)
   220de:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   220e0:	2397      	movs	r3, #151	; 0x97
   220e2:	18fb      	adds	r3, r7, r3
   220e4:	22f4      	movs	r2, #244	; 0xf4
   220e6:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   220e8:	e0dd      	b.n	222a6 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   220ea:	2388      	movs	r3, #136	; 0x88
   220ec:	18fb      	adds	r3, r7, r3
   220ee:	681b      	ldr	r3, [r3, #0]
   220f0:	785b      	ldrb	r3, [r3, #1]
   220f2:	3b01      	subs	r3, #1
   220f4:	b2da      	uxtb	r2, r3
   220f6:	2384      	movs	r3, #132	; 0x84
   220f8:	18fb      	adds	r3, r7, r3
   220fa:	681b      	ldr	r3, [r3, #0]
   220fc:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   220fe:	2384      	movs	r3, #132	; 0x84
   22100:	18fb      	adds	r3, r7, r3
   22102:	681b      	ldr	r3, [r3, #0]
   22104:	785b      	ldrb	r3, [r3, #1]
   22106:	2b0a      	cmp	r3, #10
   22108:	d01e      	beq.n	22148 <m2m_wifi_connect_sc+0x2f4>
   2210a:	2384      	movs	r3, #132	; 0x84
   2210c:	18fb      	adds	r3, r7, r3
   2210e:	681b      	ldr	r3, [r3, #0]
   22110:	785b      	ldrb	r3, [r3, #1]
   22112:	2b1a      	cmp	r3, #26
   22114:	d018      	beq.n	22148 <m2m_wifi_connect_sc+0x2f4>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   22116:	4a44      	ldr	r2, [pc, #272]	; (22228 <m2m_wifi_connect_sc+0x3d4>)
   22118:	4935      	ldr	r1, [pc, #212]	; (221f0 <m2m_wifi_connect_sc+0x39c>)
   2211a:	4b36      	ldr	r3, [pc, #216]	; (221f4 <m2m_wifi_connect_sc+0x3a0>)
   2211c:	0018      	movs	r0, r3
   2211e:	4b36      	ldr	r3, [pc, #216]	; (221f8 <m2m_wifi_connect_sc+0x3a4>)
   22120:	4798      	blx	r3
   22122:	2384      	movs	r3, #132	; 0x84
   22124:	18fb      	adds	r3, r7, r3
   22126:	681b      	ldr	r3, [r3, #0]
   22128:	785b      	ldrb	r3, [r3, #1]
   2212a:	001a      	movs	r2, r3
   2212c:	4b3f      	ldr	r3, [pc, #252]	; (2222c <m2m_wifi_connect_sc+0x3d8>)
   2212e:	0011      	movs	r1, r2
   22130:	0018      	movs	r0, r3
   22132:	4b31      	ldr	r3, [pc, #196]	; (221f8 <m2m_wifi_connect_sc+0x3a4>)
   22134:	4798      	blx	r3
   22136:	4b32      	ldr	r3, [pc, #200]	; (22200 <m2m_wifi_connect_sc+0x3ac>)
   22138:	0018      	movs	r0, r3
   2213a:	4b2f      	ldr	r3, [pc, #188]	; (221f8 <m2m_wifi_connect_sc+0x3a4>)
   2213c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2213e:	2397      	movs	r3, #151	; 0x97
   22140:	18fb      	adds	r3, r7, r3
   22142:	22f4      	movs	r2, #244	; 0xf4
   22144:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22146:	e0ae      	b.n	222a6 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   22148:	2384      	movs	r3, #132	; 0x84
   2214a:	18fb      	adds	r3, r7, r3
   2214c:	681b      	ldr	r3, [r3, #0]
   2214e:	1c98      	adds	r0, r3, #2
   22150:	2388      	movs	r3, #136	; 0x88
   22152:	18fb      	adds	r3, r7, r3
   22154:	681b      	ldr	r3, [r3, #0]
   22156:	1c99      	adds	r1, r3, #2
   22158:	2388      	movs	r3, #136	; 0x88
   2215a:	18fb      	adds	r3, r7, r3
   2215c:	681b      	ldr	r3, [r3, #0]
   2215e:	785b      	ldrb	r3, [r3, #1]
   22160:	001a      	movs	r2, r3
   22162:	4b2e      	ldr	r3, [pc, #184]	; (2221c <m2m_wifi_connect_sc+0x3c8>)
   22164:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   22166:	2388      	movs	r3, #136	; 0x88
   22168:	18fb      	adds	r3, r7, r3
   2216a:	681b      	ldr	r3, [r3, #0]
   2216c:	785b      	ldrb	r3, [r3, #1]
   2216e:	001a      	movs	r2, r3
   22170:	2384      	movs	r3, #132	; 0x84
   22172:	18fb      	adds	r3, r7, r3
   22174:	681b      	ldr	r3, [r3, #0]
   22176:	189b      	adds	r3, r3, r2
   22178:	2200      	movs	r2, #0
   2217a:	709a      	strb	r2, [r3, #2]
   2217c:	e082      	b.n	22284 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   2217e:	230a      	movs	r3, #10
   22180:	18fb      	adds	r3, r7, r3
   22182:	781b      	ldrb	r3, [r3, #0]
   22184:	2b02      	cmp	r3, #2
   22186:	d157      	bne.n	22238 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   22188:	2382      	movs	r3, #130	; 0x82
   2218a:	18fc      	adds	r4, r7, r3
   2218c:	687b      	ldr	r3, [r7, #4]
   2218e:	0018      	movs	r0, r3
   22190:	4b1c      	ldr	r3, [pc, #112]	; (22204 <m2m_wifi_connect_sc+0x3b0>)
   22192:	4798      	blx	r3
   22194:	0003      	movs	r3, r0
   22196:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   22198:	2382      	movs	r3, #130	; 0x82
   2219a:	18fb      	adds	r3, r7, r3
   2219c:	881b      	ldrh	r3, [r3, #0]
   2219e:	2b00      	cmp	r3, #0
   221a0:	d004      	beq.n	221ac <m2m_wifi_connect_sc+0x358>
   221a2:	2382      	movs	r3, #130	; 0x82
   221a4:	18fb      	adds	r3, r7, r3
   221a6:	881b      	ldrh	r3, [r3, #0]
   221a8:	2b40      	cmp	r3, #64	; 0x40
   221aa:	d912      	bls.n	221d2 <m2m_wifi_connect_sc+0x37e>
		{
			M2M_ERR("Incorrect PSK key length\n");
   221ac:	4a20      	ldr	r2, [pc, #128]	; (22230 <m2m_wifi_connect_sc+0x3dc>)
   221ae:	4910      	ldr	r1, [pc, #64]	; (221f0 <m2m_wifi_connect_sc+0x39c>)
   221b0:	4b10      	ldr	r3, [pc, #64]	; (221f4 <m2m_wifi_connect_sc+0x3a0>)
   221b2:	0018      	movs	r0, r3
   221b4:	4b10      	ldr	r3, [pc, #64]	; (221f8 <m2m_wifi_connect_sc+0x3a4>)
   221b6:	4798      	blx	r3
   221b8:	4b1e      	ldr	r3, [pc, #120]	; (22234 <m2m_wifi_connect_sc+0x3e0>)
   221ba:	0018      	movs	r0, r3
   221bc:	4b0e      	ldr	r3, [pc, #56]	; (221f8 <m2m_wifi_connect_sc+0x3a4>)
   221be:	4798      	blx	r3
   221c0:	4b0f      	ldr	r3, [pc, #60]	; (22200 <m2m_wifi_connect_sc+0x3ac>)
   221c2:	0018      	movs	r0, r3
   221c4:	4b0c      	ldr	r3, [pc, #48]	; (221f8 <m2m_wifi_connect_sc+0x3a4>)
   221c6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   221c8:	2397      	movs	r3, #151	; 0x97
   221ca:	18fb      	adds	r3, r7, r3
   221cc:	22f4      	movs	r2, #244	; 0xf4
   221ce:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   221d0:	e069      	b.n	222a6 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   221d2:	238c      	movs	r3, #140	; 0x8c
   221d4:	18fb      	adds	r3, r7, r3
   221d6:	6818      	ldr	r0, [r3, #0]
   221d8:	2382      	movs	r3, #130	; 0x82
   221da:	18fb      	adds	r3, r7, r3
   221dc:	881b      	ldrh	r3, [r3, #0]
   221de:	3301      	adds	r3, #1
   221e0:	001a      	movs	r2, r3
   221e2:	687b      	ldr	r3, [r7, #4]
   221e4:	0019      	movs	r1, r3
   221e6:	4b0d      	ldr	r3, [pc, #52]	; (2221c <m2m_wifi_connect_sc+0x3c8>)
   221e8:	4798      	blx	r3
   221ea:	e04b      	b.n	22284 <m2m_wifi_connect_sc+0x430>
   221ec:	0000021d 	.word	0x0000021d
   221f0:	00038a88 	.word	0x00038a88
   221f4:	0003877c 	.word	0x0003877c
   221f8:	0001de29 	.word	0x0001de29
   221fc:	00038910 	.word	0x00038910
   22200:	00038778 	.word	0x00038778
   22204:	00020b9b 	.word	0x00020b9b
   22208:	00000229 	.word	0x00000229
   2220c:	00038924 	.word	0x00038924
   22210:	00000233 	.word	0x00000233
   22214:	00038934 	.word	0x00038934
   22218:	00038948 	.word	0x00038948
   2221c:	00020b21 	.word	0x00020b21
   22220:	00000253 	.word	0x00000253
   22224:	00038954 	.word	0x00038954
   22228:	0000025a 	.word	0x0000025a
   2222c:	00038970 	.word	0x00038970
   22230:	00000269 	.word	0x00000269
   22234:	0003898c 	.word	0x0003898c
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   22238:	230a      	movs	r3, #10
   2223a:	18fb      	adds	r3, r7, r3
   2223c:	781b      	ldrb	r3, [r3, #0]
   2223e:	2b04      	cmp	r3, #4
   22240:	d108      	bne.n	22254 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   22242:	238c      	movs	r3, #140	; 0x8c
   22244:	18fb      	adds	r3, r7, r3
   22246:	681b      	ldr	r3, [r3, #0]
   22248:	6879      	ldr	r1, [r7, #4]
   2224a:	223e      	movs	r2, #62	; 0x3e
   2224c:	0018      	movs	r0, r3
   2224e:	4b1a      	ldr	r3, [pc, #104]	; (222b8 <m2m_wifi_connect_sc+0x464>)
   22250:	4798      	blx	r3
   22252:	e017      	b.n	22284 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   22254:	230a      	movs	r3, #10
   22256:	18fb      	adds	r3, r7, r3
   22258:	781b      	ldrb	r3, [r3, #0]
   2225a:	2b01      	cmp	r3, #1
   2225c:	d012      	beq.n	22284 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   2225e:	4a17      	ldr	r2, [pc, #92]	; (222bc <m2m_wifi_connect_sc+0x468>)
   22260:	4917      	ldr	r1, [pc, #92]	; (222c0 <m2m_wifi_connect_sc+0x46c>)
   22262:	4b18      	ldr	r3, [pc, #96]	; (222c4 <m2m_wifi_connect_sc+0x470>)
   22264:	0018      	movs	r0, r3
   22266:	4b18      	ldr	r3, [pc, #96]	; (222c8 <m2m_wifi_connect_sc+0x474>)
   22268:	4798      	blx	r3
   2226a:	4b18      	ldr	r3, [pc, #96]	; (222cc <m2m_wifi_connect_sc+0x478>)
   2226c:	0018      	movs	r0, r3
   2226e:	4b16      	ldr	r3, [pc, #88]	; (222c8 <m2m_wifi_connect_sc+0x474>)
   22270:	4798      	blx	r3
   22272:	4b17      	ldr	r3, [pc, #92]	; (222d0 <m2m_wifi_connect_sc+0x47c>)
   22274:	0018      	movs	r0, r3
   22276:	4b14      	ldr	r3, [pc, #80]	; (222c8 <m2m_wifi_connect_sc+0x474>)
   22278:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   2227a:	2397      	movs	r3, #151	; 0x97
   2227c:	18fb      	adds	r3, r7, r3
   2227e:	22f4      	movs	r2, #244	; 0xf4
   22280:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   22282:	e010      	b.n	222a6 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   22284:	2397      	movs	r3, #151	; 0x97
   22286:	18fc      	adds	r4, r7, r3
   22288:	2314      	movs	r3, #20
   2228a:	18fa      	adds	r2, r7, r3
   2228c:	2300      	movs	r3, #0
   2228e:	9302      	str	r3, [sp, #8]
   22290:	2300      	movs	r3, #0
   22292:	9301      	str	r3, [sp, #4]
   22294:	2300      	movs	r3, #0
   22296:	9300      	str	r3, [sp, #0]
   22298:	236c      	movs	r3, #108	; 0x6c
   2229a:	2128      	movs	r1, #40	; 0x28
   2229c:	2001      	movs	r0, #1
   2229e:	4d0d      	ldr	r5, [pc, #52]	; (222d4 <m2m_wifi_connect_sc+0x480>)
   222a0:	47a8      	blx	r5
   222a2:	0003      	movs	r3, r0
   222a4:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   222a6:	2397      	movs	r3, #151	; 0x97
   222a8:	18fb      	adds	r3, r7, r3
   222aa:	781b      	ldrb	r3, [r3, #0]
   222ac:	b25b      	sxtb	r3, r3
}
   222ae:	0018      	movs	r0, r3
   222b0:	46bd      	mov	sp, r7
   222b2:	b026      	add	sp, #152	; 0x98
   222b4:	bdb0      	pop	{r4, r5, r7, pc}
   222b6:	46c0      	nop			; (mov r8, r8)
   222b8:	00020b21 	.word	0x00020b21
   222bc:	00000279 	.word	0x00000279
   222c0:	00038a88 	.word	0x00038a88
   222c4:	0003877c 	.word	0x0003877c
   222c8:	0001de29 	.word	0x0001de29
   222cc:	000389a8 	.word	0x000389a8
   222d0:	00038778 	.word	0x00038778
   222d4:	00020dbd 	.word	0x00020dbd

000222d8 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   222d8:	b580      	push	{r7, lr}
   222da:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   222dc:	2300      	movs	r3, #0
}
   222de:	0018      	movs	r0, r3
   222e0:	46bd      	mov	sp, r7
   222e2:	bd80      	pop	{r7, pc}

000222e4 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   222e4:	b590      	push	{r4, r7, lr}
   222e6:	b087      	sub	sp, #28
   222e8:	af00      	add	r7, sp, #0
   222ea:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   222ec:	2317      	movs	r3, #23
   222ee:	18fb      	adds	r3, r7, r3
   222f0:	2200      	movs	r2, #0
   222f2:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   222f4:	687b      	ldr	r3, [r7, #4]
   222f6:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   222f8:	693b      	ldr	r3, [r7, #16]
   222fa:	2280      	movs	r2, #128	; 0x80
   222fc:	0052      	lsls	r2, r2, #1
   222fe:	4313      	orrs	r3, r2
   22300:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   22302:	693a      	ldr	r2, [r7, #16]
   22304:	23a5      	movs	r3, #165	; 0xa5
   22306:	015b      	lsls	r3, r3, #5
   22308:	0011      	movs	r1, r2
   2230a:	0018      	movs	r0, r3
   2230c:	4b12      	ldr	r3, [pc, #72]	; (22358 <chip_apply_conf+0x74>)
   2230e:	4798      	blx	r3
		if(val32 != 0) {		
   22310:	693b      	ldr	r3, [r7, #16]
   22312:	2b00      	cmp	r3, #0
   22314:	d018      	beq.n	22348 <chip_apply_conf+0x64>
			uint32 reg = 0;
   22316:	2300      	movs	r3, #0
   22318:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   2231a:	2317      	movs	r3, #23
   2231c:	18fc      	adds	r4, r7, r3
   2231e:	230c      	movs	r3, #12
   22320:	18fa      	adds	r2, r7, r3
   22322:	23a5      	movs	r3, #165	; 0xa5
   22324:	015b      	lsls	r3, r3, #5
   22326:	0011      	movs	r1, r2
   22328:	0018      	movs	r0, r3
   2232a:	4b0c      	ldr	r3, [pc, #48]	; (2235c <chip_apply_conf+0x78>)
   2232c:	4798      	blx	r3
   2232e:	0003      	movs	r3, r0
   22330:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   22332:	2317      	movs	r3, #23
   22334:	18fb      	adds	r3, r7, r3
   22336:	781b      	ldrb	r3, [r3, #0]
   22338:	b25b      	sxtb	r3, r3
   2233a:	2b00      	cmp	r3, #0
   2233c:	d1e1      	bne.n	22302 <chip_apply_conf+0x1e>
				if(reg == val32)
   2233e:	68fa      	ldr	r2, [r7, #12]
   22340:	693b      	ldr	r3, [r7, #16]
   22342:	429a      	cmp	r2, r3
   22344:	d002      	beq.n	2234c <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   22346:	e7dc      	b.n	22302 <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   22348:	46c0      	nop			; (mov r8, r8)
   2234a:	e000      	b.n	2234e <chip_apply_conf+0x6a>
					break;
   2234c:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   2234e:	2300      	movs	r3, #0
}
   22350:	0018      	movs	r0, r3
   22352:	46bd      	mov	sp, r7
   22354:	b007      	add	sp, #28
   22356:	bd90      	pop	{r4, r7, pc}
   22358:	00022b39 	.word	0x00022b39
   2235c:	00022b15 	.word	0x00022b15

00022360 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   22360:	b590      	push	{r4, r7, lr}
   22362:	b083      	sub	sp, #12
   22364:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   22366:	2300      	movs	r3, #0
   22368:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   2236a:	1dfb      	adds	r3, r7, #7
   2236c:	2200      	movs	r2, #0
   2236e:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   22370:	1dfc      	adds	r4, r7, #7
   22372:	003b      	movs	r3, r7
   22374:	4a24      	ldr	r2, [pc, #144]	; (22408 <enable_interrupts+0xa8>)
   22376:	0019      	movs	r1, r3
   22378:	0010      	movs	r0, r2
   2237a:	4b24      	ldr	r3, [pc, #144]	; (2240c <enable_interrupts+0xac>)
   2237c:	4798      	blx	r3
   2237e:	0003      	movs	r3, r0
   22380:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   22382:	1dfb      	adds	r3, r7, #7
   22384:	781b      	ldrb	r3, [r3, #0]
   22386:	b25b      	sxtb	r3, r3
   22388:	2b00      	cmp	r3, #0
   2238a:	d131      	bne.n	223f0 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   2238c:	683b      	ldr	r3, [r7, #0]
   2238e:	2280      	movs	r2, #128	; 0x80
   22390:	0052      	lsls	r2, r2, #1
   22392:	4313      	orrs	r3, r2
   22394:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   22396:	683b      	ldr	r3, [r7, #0]
   22398:	1dfc      	adds	r4, r7, #7
   2239a:	4a1b      	ldr	r2, [pc, #108]	; (22408 <enable_interrupts+0xa8>)
   2239c:	0019      	movs	r1, r3
   2239e:	0010      	movs	r0, r2
   223a0:	4b1b      	ldr	r3, [pc, #108]	; (22410 <enable_interrupts+0xb0>)
   223a2:	4798      	blx	r3
   223a4:	0003      	movs	r3, r0
   223a6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   223a8:	1dfb      	adds	r3, r7, #7
   223aa:	781b      	ldrb	r3, [r3, #0]
   223ac:	b25b      	sxtb	r3, r3
   223ae:	2b00      	cmp	r3, #0
   223b0:	d120      	bne.n	223f4 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   223b2:	1dfc      	adds	r4, r7, #7
   223b4:	003a      	movs	r2, r7
   223b6:	23d0      	movs	r3, #208	; 0xd0
   223b8:	015b      	lsls	r3, r3, #5
   223ba:	0011      	movs	r1, r2
   223bc:	0018      	movs	r0, r3
   223be:	4b13      	ldr	r3, [pc, #76]	; (2240c <enable_interrupts+0xac>)
   223c0:	4798      	blx	r3
   223c2:	0003      	movs	r3, r0
   223c4:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   223c6:	1dfb      	adds	r3, r7, #7
   223c8:	781b      	ldrb	r3, [r3, #0]
   223ca:	b25b      	sxtb	r3, r3
   223cc:	2b00      	cmp	r3, #0
   223ce:	d113      	bne.n	223f8 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   223d0:	683b      	ldr	r3, [r7, #0]
   223d2:	2280      	movs	r2, #128	; 0x80
   223d4:	0252      	lsls	r2, r2, #9
   223d6:	4313      	orrs	r3, r2
   223d8:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   223da:	683a      	ldr	r2, [r7, #0]
   223dc:	1dfc      	adds	r4, r7, #7
   223de:	23d0      	movs	r3, #208	; 0xd0
   223e0:	015b      	lsls	r3, r3, #5
   223e2:	0011      	movs	r1, r2
   223e4:	0018      	movs	r0, r3
   223e6:	4b0a      	ldr	r3, [pc, #40]	; (22410 <enable_interrupts+0xb0>)
   223e8:	4798      	blx	r3
   223ea:	0003      	movs	r3, r0
   223ec:	7023      	strb	r3, [r4, #0]
   223ee:	e004      	b.n	223fa <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   223f0:	46c0      	nop			; (mov r8, r8)
   223f2:	e002      	b.n	223fa <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   223f4:	46c0      	nop			; (mov r8, r8)
   223f6:	e000      	b.n	223fa <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   223f8:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   223fa:	1dfb      	adds	r3, r7, #7
   223fc:	781b      	ldrb	r3, [r3, #0]
   223fe:	b25b      	sxtb	r3, r3
}
   22400:	0018      	movs	r0, r3
   22402:	46bd      	mov	sp, r7
   22404:	b003      	add	sp, #12
   22406:	bd90      	pop	{r4, r7, pc}
   22408:	00001408 	.word	0x00001408
   2240c:	00022b15 	.word	0x00022b15
   22410:	00022b39 	.word	0x00022b39

00022414 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   22414:	b580      	push	{r7, lr}
   22416:	b082      	sub	sp, #8
   22418:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   2241a:	4b32      	ldr	r3, [pc, #200]	; (224e4 <nmi_get_chipid+0xd0>)
   2241c:	681b      	ldr	r3, [r3, #0]
   2241e:	2b00      	cmp	r3, #0
   22420:	d159      	bne.n	224d6 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   22422:	4a30      	ldr	r2, [pc, #192]	; (224e4 <nmi_get_chipid+0xd0>)
   22424:	2380      	movs	r3, #128	; 0x80
   22426:	015b      	lsls	r3, r3, #5
   22428:	0011      	movs	r1, r2
   2242a:	0018      	movs	r0, r3
   2242c:	4b2e      	ldr	r3, [pc, #184]	; (224e8 <nmi_get_chipid+0xd4>)
   2242e:	4798      	blx	r3
   22430:	1e03      	subs	r3, r0, #0
   22432:	d004      	beq.n	2243e <nmi_get_chipid+0x2a>
			chipid = 0;
   22434:	4b2b      	ldr	r3, [pc, #172]	; (224e4 <nmi_get_chipid+0xd0>)
   22436:	2200      	movs	r2, #0
   22438:	601a      	str	r2, [r3, #0]
			return 0;
   2243a:	2300      	movs	r3, #0
   2243c:	e04d      	b.n	224da <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   2243e:	1d3b      	adds	r3, r7, #4
   22440:	4a2a      	ldr	r2, [pc, #168]	; (224ec <nmi_get_chipid+0xd8>)
   22442:	0019      	movs	r1, r3
   22444:	0010      	movs	r0, r2
   22446:	4b28      	ldr	r3, [pc, #160]	; (224e8 <nmi_get_chipid+0xd4>)
   22448:	4798      	blx	r3
   2244a:	1e03      	subs	r3, r0, #0
   2244c:	d004      	beq.n	22458 <nmi_get_chipid+0x44>
			chipid = 0;
   2244e:	4b25      	ldr	r3, [pc, #148]	; (224e4 <nmi_get_chipid+0xd0>)
   22450:	2200      	movs	r2, #0
   22452:	601a      	str	r2, [r3, #0]
			return 0;
   22454:	2300      	movs	r3, #0
   22456:	e040      	b.n	224da <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   22458:	4b22      	ldr	r3, [pc, #136]	; (224e4 <nmi_get_chipid+0xd0>)
   2245a:	681b      	ldr	r3, [r3, #0]
   2245c:	4a24      	ldr	r2, [pc, #144]	; (224f0 <nmi_get_chipid+0xdc>)
   2245e:	4293      	cmp	r3, r2
   22460:	d106      	bne.n	22470 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   22462:	687b      	ldr	r3, [r7, #4]
   22464:	2b01      	cmp	r3, #1
   22466:	d029      	beq.n	224bc <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   22468:	4b1e      	ldr	r3, [pc, #120]	; (224e4 <nmi_get_chipid+0xd0>)
   2246a:	4a22      	ldr	r2, [pc, #136]	; (224f4 <nmi_get_chipid+0xe0>)
   2246c:	601a      	str	r2, [r3, #0]
   2246e:	e025      	b.n	224bc <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   22470:	4b1c      	ldr	r3, [pc, #112]	; (224e4 <nmi_get_chipid+0xd0>)
   22472:	681b      	ldr	r3, [r3, #0]
   22474:	4a20      	ldr	r2, [pc, #128]	; (224f8 <nmi_get_chipid+0xe4>)
   22476:	4293      	cmp	r3, r2
   22478:	d10d      	bne.n	22496 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   2247a:	687b      	ldr	r3, [r7, #4]
   2247c:	2b03      	cmp	r3, #3
   2247e:	d01d      	beq.n	224bc <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   22480:	687b      	ldr	r3, [r7, #4]
   22482:	2b04      	cmp	r3, #4
   22484:	d103      	bne.n	2248e <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   22486:	4b17      	ldr	r3, [pc, #92]	; (224e4 <nmi_get_chipid+0xd0>)
   22488:	4a1c      	ldr	r2, [pc, #112]	; (224fc <nmi_get_chipid+0xe8>)
   2248a:	601a      	str	r2, [r3, #0]
   2248c:	e016      	b.n	224bc <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   2248e:	4b15      	ldr	r3, [pc, #84]	; (224e4 <nmi_get_chipid+0xd0>)
   22490:	4a1b      	ldr	r2, [pc, #108]	; (22500 <nmi_get_chipid+0xec>)
   22492:	601a      	str	r2, [r3, #0]
   22494:	e012      	b.n	224bc <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   22496:	4b13      	ldr	r3, [pc, #76]	; (224e4 <nmi_get_chipid+0xd0>)
   22498:	681b      	ldr	r3, [r3, #0]
   2249a:	4a1a      	ldr	r2, [pc, #104]	; (22504 <nmi_get_chipid+0xf0>)
   2249c:	4293      	cmp	r3, r2
   2249e:	d10d      	bne.n	224bc <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   224a0:	4a10      	ldr	r2, [pc, #64]	; (224e4 <nmi_get_chipid+0xd0>)
   224a2:	23ec      	movs	r3, #236	; 0xec
   224a4:	039b      	lsls	r3, r3, #14
   224a6:	0011      	movs	r1, r2
   224a8:	0018      	movs	r0, r3
   224aa:	4b0f      	ldr	r3, [pc, #60]	; (224e8 <nmi_get_chipid+0xd4>)
   224ac:	4798      	blx	r3
   224ae:	1e03      	subs	r3, r0, #0
   224b0:	d004      	beq.n	224bc <nmi_get_chipid+0xa8>
			chipid = 0;
   224b2:	4b0c      	ldr	r3, [pc, #48]	; (224e4 <nmi_get_chipid+0xd0>)
   224b4:	2200      	movs	r2, #0
   224b6:	601a      	str	r2, [r3, #0]
			return 0;
   224b8:	2300      	movs	r3, #0
   224ba:	e00e      	b.n	224da <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   224bc:	4b09      	ldr	r3, [pc, #36]	; (224e4 <nmi_get_chipid+0xd0>)
   224be:	681b      	ldr	r3, [r3, #0]
   224c0:	4a11      	ldr	r2, [pc, #68]	; (22508 <nmi_get_chipid+0xf4>)
   224c2:	401a      	ands	r2, r3
   224c4:	4b07      	ldr	r3, [pc, #28]	; (224e4 <nmi_get_chipid+0xd0>)
   224c6:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   224c8:	4b06      	ldr	r3, [pc, #24]	; (224e4 <nmi_get_chipid+0xd0>)
   224ca:	681b      	ldr	r3, [r3, #0]
   224cc:	22a0      	movs	r2, #160	; 0xa0
   224ce:	02d2      	lsls	r2, r2, #11
   224d0:	431a      	orrs	r2, r3
   224d2:	4b04      	ldr	r3, [pc, #16]	; (224e4 <nmi_get_chipid+0xd0>)
   224d4:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   224d6:	4b03      	ldr	r3, [pc, #12]	; (224e4 <nmi_get_chipid+0xd0>)
   224d8:	681b      	ldr	r3, [r3, #0]
}
   224da:	0018      	movs	r0, r3
   224dc:	46bd      	mov	sp, r7
   224de:	b002      	add	sp, #8
   224e0:	bd80      	pop	{r7, pc}
   224e2:	46c0      	nop			; (mov r8, r8)
   224e4:	200042a8 	.word	0x200042a8
   224e8:	00022b15 	.word	0x00022b15
   224ec:	000013f4 	.word	0x000013f4
   224f0:	001002a0 	.word	0x001002a0
   224f4:	001002a1 	.word	0x001002a1
   224f8:	001002b0 	.word	0x001002b0
   224fc:	001002b1 	.word	0x001002b1
   22500:	001002b2 	.word	0x001002b2
   22504:	001000f0 	.word	0x001000f0
   22508:	fff0ffff 	.word	0xfff0ffff

0002250c <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   2250c:	b590      	push	{r4, r7, lr}
   2250e:	b083      	sub	sp, #12
   22510:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   22512:	1dfb      	adds	r3, r7, #7
   22514:	2200      	movs	r2, #0
   22516:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   22518:	1dfc      	adds	r4, r7, #7
   2251a:	003b      	movs	r3, r7
   2251c:	0019      	movs	r1, r3
   2251e:	2010      	movs	r0, #16
   22520:	4b2e      	ldr	r3, [pc, #184]	; (225dc <chip_sleep+0xd0>)
   22522:	4798      	blx	r3
   22524:	0003      	movs	r3, r0
   22526:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   22528:	1dfb      	adds	r3, r7, #7
   2252a:	781b      	ldrb	r3, [r3, #0]
   2252c:	b25b      	sxtb	r3, r3
   2252e:	2b00      	cmp	r3, #0
   22530:	d145      	bne.n	225be <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   22532:	683b      	ldr	r3, [r7, #0]
   22534:	2201      	movs	r2, #1
   22536:	4013      	ands	r3, r2
   22538:	d000      	beq.n	2253c <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   2253a:	e7ed      	b.n	22518 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   2253c:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   2253e:	1dfc      	adds	r4, r7, #7
   22540:	003b      	movs	r3, r7
   22542:	0019      	movs	r1, r3
   22544:	2001      	movs	r0, #1
   22546:	4b25      	ldr	r3, [pc, #148]	; (225dc <chip_sleep+0xd0>)
   22548:	4798      	blx	r3
   2254a:	0003      	movs	r3, r0
   2254c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2254e:	1dfb      	adds	r3, r7, #7
   22550:	781b      	ldrb	r3, [r3, #0]
   22552:	b25b      	sxtb	r3, r3
   22554:	2b00      	cmp	r3, #0
   22556:	d134      	bne.n	225c2 <chip_sleep+0xb6>
	if(reg & NBIT1)
   22558:	683b      	ldr	r3, [r7, #0]
   2255a:	2202      	movs	r2, #2
   2255c:	4013      	ands	r3, r2
   2255e:	d010      	beq.n	22582 <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   22560:	683b      	ldr	r3, [r7, #0]
   22562:	2202      	movs	r2, #2
   22564:	4393      	bics	r3, r2
   22566:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   22568:	683b      	ldr	r3, [r7, #0]
   2256a:	1dfc      	adds	r4, r7, #7
   2256c:	0019      	movs	r1, r3
   2256e:	2001      	movs	r0, #1
   22570:	4b1b      	ldr	r3, [pc, #108]	; (225e0 <chip_sleep+0xd4>)
   22572:	4798      	blx	r3
   22574:	0003      	movs	r3, r0
   22576:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   22578:	1dfb      	adds	r3, r7, #7
   2257a:	781b      	ldrb	r3, [r3, #0]
   2257c:	b25b      	sxtb	r3, r3
   2257e:	2b00      	cmp	r3, #0
   22580:	d121      	bne.n	225c6 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   22582:	1dfc      	adds	r4, r7, #7
   22584:	003b      	movs	r3, r7
   22586:	0019      	movs	r1, r3
   22588:	200b      	movs	r0, #11
   2258a:	4b14      	ldr	r3, [pc, #80]	; (225dc <chip_sleep+0xd0>)
   2258c:	4798      	blx	r3
   2258e:	0003      	movs	r3, r0
   22590:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   22592:	1dfb      	adds	r3, r7, #7
   22594:	781b      	ldrb	r3, [r3, #0]
   22596:	b25b      	sxtb	r3, r3
   22598:	2b00      	cmp	r3, #0
   2259a:	d116      	bne.n	225ca <chip_sleep+0xbe>
	if(reg & NBIT0)
   2259c:	683b      	ldr	r3, [r7, #0]
   2259e:	2201      	movs	r2, #1
   225a0:	4013      	ands	r3, r2
   225a2:	d013      	beq.n	225cc <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   225a4:	683b      	ldr	r3, [r7, #0]
   225a6:	2201      	movs	r2, #1
   225a8:	4393      	bics	r3, r2
   225aa:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   225ac:	683b      	ldr	r3, [r7, #0]
   225ae:	1dfc      	adds	r4, r7, #7
   225b0:	0019      	movs	r1, r3
   225b2:	200b      	movs	r0, #11
   225b4:	4b0a      	ldr	r3, [pc, #40]	; (225e0 <chip_sleep+0xd4>)
   225b6:	4798      	blx	r3
   225b8:	0003      	movs	r3, r0
   225ba:	7023      	strb	r3, [r4, #0]
   225bc:	e006      	b.n	225cc <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   225be:	46c0      	nop			; (mov r8, r8)
   225c0:	e004      	b.n	225cc <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   225c2:	46c0      	nop			; (mov r8, r8)
   225c4:	e002      	b.n	225cc <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   225c6:	46c0      	nop			; (mov r8, r8)
   225c8:	e000      	b.n	225cc <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   225ca:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   225cc:	1dfb      	adds	r3, r7, #7
   225ce:	781b      	ldrb	r3, [r3, #0]
   225d0:	b25b      	sxtb	r3, r3
}
   225d2:	0018      	movs	r0, r3
   225d4:	46bd      	mov	sp, r7
   225d6:	b003      	add	sp, #12
   225d8:	bd90      	pop	{r4, r7, pc}
   225da:	46c0      	nop			; (mov r8, r8)
   225dc:	00022b15 	.word	0x00022b15
   225e0:	00022b39 	.word	0x00022b39

000225e4 <chip_wake>:
sint8 chip_wake(void)
{
   225e4:	b590      	push	{r4, r7, lr}
   225e6:	b085      	sub	sp, #20
   225e8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   225ea:	230f      	movs	r3, #15
   225ec:	18fb      	adds	r3, r7, r3
   225ee:	2200      	movs	r2, #0
   225f0:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   225f2:	2300      	movs	r3, #0
   225f4:	607b      	str	r3, [r7, #4]
   225f6:	2300      	movs	r3, #0
   225f8:	603b      	str	r3, [r7, #0]
   225fa:	2300      	movs	r3, #0
   225fc:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   225fe:	230f      	movs	r3, #15
   22600:	18fc      	adds	r4, r7, r3
   22602:	1d3b      	adds	r3, r7, #4
   22604:	0019      	movs	r1, r3
   22606:	200b      	movs	r0, #11
   22608:	4b4e      	ldr	r3, [pc, #312]	; (22744 <chip_wake+0x160>)
   2260a:	4798      	blx	r3
   2260c:	0003      	movs	r3, r0
   2260e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22610:	230f      	movs	r3, #15
   22612:	18fb      	adds	r3, r7, r3
   22614:	781b      	ldrb	r3, [r3, #0]
   22616:	b25b      	sxtb	r3, r3
   22618:	2b00      	cmp	r3, #0
   2261a:	d000      	beq.n	2261e <chip_wake+0x3a>
   2261c:	e082      	b.n	22724 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   2261e:	687b      	ldr	r3, [r7, #4]
   22620:	2201      	movs	r2, #1
   22622:	4013      	ands	r3, r2
   22624:	d111      	bne.n	2264a <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   22626:	687b      	ldr	r3, [r7, #4]
   22628:	2201      	movs	r2, #1
   2262a:	4313      	orrs	r3, r2
   2262c:	220f      	movs	r2, #15
   2262e:	18bc      	adds	r4, r7, r2
   22630:	0019      	movs	r1, r3
   22632:	200b      	movs	r0, #11
   22634:	4b44      	ldr	r3, [pc, #272]	; (22748 <chip_wake+0x164>)
   22636:	4798      	blx	r3
   22638:	0003      	movs	r3, r0
   2263a:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2263c:	230f      	movs	r3, #15
   2263e:	18fb      	adds	r3, r7, r3
   22640:	781b      	ldrb	r3, [r3, #0]
   22642:	b25b      	sxtb	r3, r3
   22644:	2b00      	cmp	r3, #0
   22646:	d000      	beq.n	2264a <chip_wake+0x66>
   22648:	e06e      	b.n	22728 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   2264a:	230f      	movs	r3, #15
   2264c:	18fc      	adds	r4, r7, r3
   2264e:	1d3b      	adds	r3, r7, #4
   22650:	0019      	movs	r1, r3
   22652:	2001      	movs	r0, #1
   22654:	4b3b      	ldr	r3, [pc, #236]	; (22744 <chip_wake+0x160>)
   22656:	4798      	blx	r3
   22658:	0003      	movs	r3, r0
   2265a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2265c:	230f      	movs	r3, #15
   2265e:	18fb      	adds	r3, r7, r3
   22660:	781b      	ldrb	r3, [r3, #0]
   22662:	b25b      	sxtb	r3, r3
   22664:	2b00      	cmp	r3, #0
   22666:	d161      	bne.n	2272c <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   22668:	687b      	ldr	r3, [r7, #4]
   2266a:	2202      	movs	r2, #2
   2266c:	4013      	ands	r3, r2
   2266e:	d110      	bne.n	22692 <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   22670:	687b      	ldr	r3, [r7, #4]
   22672:	2202      	movs	r2, #2
   22674:	4313      	orrs	r3, r2
   22676:	220f      	movs	r2, #15
   22678:	18bc      	adds	r4, r7, r2
   2267a:	0019      	movs	r1, r3
   2267c:	2001      	movs	r0, #1
   2267e:	4b32      	ldr	r3, [pc, #200]	; (22748 <chip_wake+0x164>)
   22680:	4798      	blx	r3
   22682:	0003      	movs	r3, r0
   22684:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   22686:	230f      	movs	r3, #15
   22688:	18fb      	adds	r3, r7, r3
   2268a:	781b      	ldrb	r3, [r3, #0]
   2268c:	b25b      	sxtb	r3, r3
   2268e:	2b00      	cmp	r3, #0
   22690:	d14e      	bne.n	22730 <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   22692:	230f      	movs	r3, #15
   22694:	18fc      	adds	r4, r7, r3
   22696:	003b      	movs	r3, r7
   22698:	0019      	movs	r1, r3
   2269a:	200f      	movs	r0, #15
   2269c:	4b29      	ldr	r3, [pc, #164]	; (22744 <chip_wake+0x160>)
   2269e:	4798      	blx	r3
   226a0:	0003      	movs	r3, r0
   226a2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   226a4:	230f      	movs	r3, #15
   226a6:	18fb      	adds	r3, r7, r3
   226a8:	781b      	ldrb	r3, [r3, #0]
   226aa:	b25b      	sxtb	r3, r3
   226ac:	2b00      	cmp	r3, #0
   226ae:	d014      	beq.n	226da <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   226b0:	23a8      	movs	r3, #168	; 0xa8
   226b2:	005a      	lsls	r2, r3, #1
   226b4:	4925      	ldr	r1, [pc, #148]	; (2274c <chip_wake+0x168>)
   226b6:	4b26      	ldr	r3, [pc, #152]	; (22750 <chip_wake+0x16c>)
   226b8:	0018      	movs	r0, r3
   226ba:	4b26      	ldr	r3, [pc, #152]	; (22754 <chip_wake+0x170>)
   226bc:	4798      	blx	r3
   226be:	230f      	movs	r3, #15
   226c0:	18fb      	adds	r3, r7, r3
   226c2:	2100      	movs	r1, #0
   226c4:	5659      	ldrsb	r1, [r3, r1]
   226c6:	683a      	ldr	r2, [r7, #0]
   226c8:	4b23      	ldr	r3, [pc, #140]	; (22758 <chip_wake+0x174>)
   226ca:	0018      	movs	r0, r3
   226cc:	4b21      	ldr	r3, [pc, #132]	; (22754 <chip_wake+0x170>)
   226ce:	4798      	blx	r3
   226d0:	4b22      	ldr	r3, [pc, #136]	; (2275c <chip_wake+0x178>)
   226d2:	0018      	movs	r0, r3
   226d4:	4b1f      	ldr	r3, [pc, #124]	; (22754 <chip_wake+0x170>)
   226d6:	4798      	blx	r3
			goto _WAKE_EXIT;
   226d8:	e02b      	b.n	22732 <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   226da:	683b      	ldr	r3, [r7, #0]
   226dc:	2204      	movs	r2, #4
   226de:	4013      	ands	r3, r2
   226e0:	d11c      	bne.n	2271c <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   226e2:	2002      	movs	r0, #2
   226e4:	4b1e      	ldr	r3, [pc, #120]	; (22760 <chip_wake+0x17c>)
   226e6:	4798      	blx	r3
		trials++;
   226e8:	68bb      	ldr	r3, [r7, #8]
   226ea:	3301      	adds	r3, #1
   226ec:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   226ee:	68bb      	ldr	r3, [r7, #8]
   226f0:	2b04      	cmp	r3, #4
   226f2:	d9ce      	bls.n	22692 <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   226f4:	23ad      	movs	r3, #173	; 0xad
   226f6:	005a      	lsls	r2, r3, #1
   226f8:	4914      	ldr	r1, [pc, #80]	; (2274c <chip_wake+0x168>)
   226fa:	4b15      	ldr	r3, [pc, #84]	; (22750 <chip_wake+0x16c>)
   226fc:	0018      	movs	r0, r3
   226fe:	4b15      	ldr	r3, [pc, #84]	; (22754 <chip_wake+0x170>)
   22700:	4798      	blx	r3
   22702:	4b18      	ldr	r3, [pc, #96]	; (22764 <chip_wake+0x180>)
   22704:	0018      	movs	r0, r3
   22706:	4b13      	ldr	r3, [pc, #76]	; (22754 <chip_wake+0x170>)
   22708:	4798      	blx	r3
   2270a:	4b14      	ldr	r3, [pc, #80]	; (2275c <chip_wake+0x178>)
   2270c:	0018      	movs	r0, r3
   2270e:	4b11      	ldr	r3, [pc, #68]	; (22754 <chip_wake+0x170>)
   22710:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   22712:	230f      	movs	r3, #15
   22714:	18fb      	adds	r3, r7, r3
   22716:	22fc      	movs	r2, #252	; 0xfc
   22718:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   2271a:	e00a      	b.n	22732 <chip_wake+0x14e>
			break;
   2271c:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   2271e:	4b12      	ldr	r3, [pc, #72]	; (22768 <chip_wake+0x184>)
   22720:	4798      	blx	r3
   22722:	e006      	b.n	22732 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22724:	46c0      	nop			; (mov r8, r8)
   22726:	e004      	b.n	22732 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22728:	46c0      	nop			; (mov r8, r8)
   2272a:	e002      	b.n	22732 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2272c:	46c0      	nop			; (mov r8, r8)
   2272e:	e000      	b.n	22732 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   22730:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   22732:	230f      	movs	r3, #15
   22734:	18fb      	adds	r3, r7, r3
   22736:	781b      	ldrb	r3, [r3, #0]
   22738:	b25b      	sxtb	r3, r3
}
   2273a:	0018      	movs	r0, r3
   2273c:	46bd      	mov	sp, r7
   2273e:	b005      	add	sp, #20
   22740:	bd90      	pop	{r4, r7, pc}
   22742:	46c0      	nop			; (mov r8, r8)
   22744:	00022b15 	.word	0x00022b15
   22748:	00022b39 	.word	0x00022b39
   2274c:	00038b28 	.word	0x00038b28
   22750:	00038a9c 	.word	0x00038a9c
   22754:	0001de29 	.word	0x0001de29
   22758:	00038ab0 	.word	0x00038ab0
   2275c:	00038ac8 	.word	0x00038ac8
   22760:	0002027d 	.word	0x0002027d
   22764:	00038acc 	.word	0x00038acc
   22768:	00022ad5 	.word	0x00022ad5

0002276c <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   2276c:	b580      	push	{r7, lr}
   2276e:	b088      	sub	sp, #32
   22770:	af00      	add	r7, sp, #0
   22772:	0002      	movs	r2, r0
   22774:	1dfb      	adds	r3, r7, #7
   22776:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22778:	2313      	movs	r3, #19
   2277a:	18fb      	adds	r3, r7, r3
   2277c:	2200      	movs	r2, #0
   2277e:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   22780:	2300      	movs	r3, #0
   22782:	61fb      	str	r3, [r7, #28]
   22784:	2300      	movs	r3, #0
   22786:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   22788:	2300      	movs	r3, #0
   2278a:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   2278c:	4b4a      	ldr	r3, [pc, #296]	; (228b8 <wait_for_bootrom+0x14c>)
   2278e:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   22790:	2300      	movs	r3, #0
   22792:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   22794:	4b49      	ldr	r3, [pc, #292]	; (228bc <wait_for_bootrom+0x150>)
   22796:	0018      	movs	r0, r3
   22798:	4b49      	ldr	r3, [pc, #292]	; (228c0 <wait_for_bootrom+0x154>)
   2279a:	4798      	blx	r3
   2279c:	0003      	movs	r3, r0
   2279e:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   227a0:	69fb      	ldr	r3, [r7, #28]
   227a2:	2b00      	cmp	r3, #0
   227a4:	db03      	blt.n	227ae <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   227a6:	2001      	movs	r0, #1
   227a8:	4b46      	ldr	r3, [pc, #280]	; (228c4 <wait_for_bootrom+0x158>)
   227aa:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   227ac:	e7f2      	b.n	22794 <wait_for_bootrom+0x28>
			break;
   227ae:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   227b0:	4b45      	ldr	r3, [pc, #276]	; (228c8 <wait_for_bootrom+0x15c>)
   227b2:	0018      	movs	r0, r3
   227b4:	4b42      	ldr	r3, [pc, #264]	; (228c0 <wait_for_bootrom+0x154>)
   227b6:	4798      	blx	r3
   227b8:	0003      	movs	r3, r0
   227ba:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   227bc:	69fb      	ldr	r3, [r7, #28]
   227be:	2201      	movs	r2, #1
   227c0:	4013      	ands	r3, r2
   227c2:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   227c4:	69fb      	ldr	r3, [r7, #28]
   227c6:	2b00      	cmp	r3, #0
   227c8:	d112      	bne.n	227f0 <wait_for_bootrom+0x84>
	{
		reg = 0;
   227ca:	2300      	movs	r3, #0
   227cc:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   227ce:	e00b      	b.n	227e8 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   227d0:	2001      	movs	r0, #1
   227d2:	4b3c      	ldr	r3, [pc, #240]	; (228c4 <wait_for_bootrom+0x158>)
   227d4:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   227d6:	4b3d      	ldr	r3, [pc, #244]	; (228cc <wait_for_bootrom+0x160>)
   227d8:	0018      	movs	r0, r3
   227da:	4b39      	ldr	r3, [pc, #228]	; (228c0 <wait_for_bootrom+0x154>)
   227dc:	4798      	blx	r3
   227de:	0003      	movs	r3, r0
   227e0:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   227e2:	69bb      	ldr	r3, [r7, #24]
   227e4:	3301      	adds	r3, #1
   227e6:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   227e8:	69fb      	ldr	r3, [r7, #28]
   227ea:	4a39      	ldr	r2, [pc, #228]	; (228d0 <wait_for_bootrom+0x164>)
   227ec:	4293      	cmp	r3, r2
   227ee:	d1ef      	bne.n	227d0 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   227f0:	1dfb      	adds	r3, r7, #7
   227f2:	781b      	ldrb	r3, [r3, #0]
   227f4:	2b02      	cmp	r3, #2
   227f6:	d10d      	bne.n	22814 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   227f8:	4a36      	ldr	r2, [pc, #216]	; (228d4 <wait_for_bootrom+0x168>)
   227fa:	4b37      	ldr	r3, [pc, #220]	; (228d8 <wait_for_bootrom+0x16c>)
   227fc:	0011      	movs	r1, r2
   227fe:	0018      	movs	r0, r3
   22800:	4b36      	ldr	r3, [pc, #216]	; (228dc <wait_for_bootrom+0x170>)
   22802:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   22804:	2380      	movs	r3, #128	; 0x80
   22806:	035b      	lsls	r3, r3, #13
   22808:	4a35      	ldr	r2, [pc, #212]	; (228e0 <wait_for_bootrom+0x174>)
   2280a:	0019      	movs	r1, r3
   2280c:	0010      	movs	r0, r2
   2280e:	4b33      	ldr	r3, [pc, #204]	; (228dc <wait_for_bootrom+0x170>)
   22810:	4798      	blx	r3
   22812:	e022      	b.n	2285a <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   22814:	1dfb      	adds	r3, r7, #7
   22816:	781b      	ldrb	r3, [r3, #0]
   22818:	2b03      	cmp	r3, #3
   2281a:	d10b      	bne.n	22834 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   2281c:	4a2d      	ldr	r2, [pc, #180]	; (228d4 <wait_for_bootrom+0x168>)
   2281e:	4b2e      	ldr	r3, [pc, #184]	; (228d8 <wait_for_bootrom+0x16c>)
   22820:	0011      	movs	r1, r2
   22822:	0018      	movs	r0, r3
   22824:	4b2d      	ldr	r3, [pc, #180]	; (228dc <wait_for_bootrom+0x170>)
   22826:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   22828:	4b2d      	ldr	r3, [pc, #180]	; (228e0 <wait_for_bootrom+0x174>)
   2282a:	2100      	movs	r1, #0
   2282c:	0018      	movs	r0, r3
   2282e:	4b2b      	ldr	r3, [pc, #172]	; (228dc <wait_for_bootrom+0x170>)
   22830:	4798      	blx	r3
   22832:	e012      	b.n	2285a <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   22834:	1dfb      	adds	r3, r7, #7
   22836:	781b      	ldrb	r3, [r3, #0]
   22838:	2b04      	cmp	r3, #4
   2283a:	d108      	bne.n	2284e <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   2283c:	2380      	movs	r3, #128	; 0x80
   2283e:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   22840:	68fb      	ldr	r3, [r7, #12]
   22842:	4a27      	ldr	r2, [pc, #156]	; (228e0 <wait_for_bootrom+0x174>)
   22844:	0019      	movs	r1, r3
   22846:	0010      	movs	r0, r2
   22848:	4b24      	ldr	r3, [pc, #144]	; (228dc <wait_for_bootrom+0x170>)
   2284a:	4798      	blx	r3
   2284c:	e005      	b.n	2285a <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   2284e:	68fb      	ldr	r3, [r7, #12]
   22850:	4a23      	ldr	r2, [pc, #140]	; (228e0 <wait_for_bootrom+0x174>)
   22852:	0019      	movs	r1, r3
   22854:	0010      	movs	r0, r2
   22856:	4b21      	ldr	r3, [pc, #132]	; (228dc <wait_for_bootrom+0x170>)
   22858:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   2285a:	4b22      	ldr	r3, [pc, #136]	; (228e4 <wait_for_bootrom+0x178>)
   2285c:	4798      	blx	r3
   2285e:	0003      	movs	r3, r0
   22860:	051b      	lsls	r3, r3, #20
   22862:	0d1b      	lsrs	r3, r3, #20
   22864:	4a20      	ldr	r2, [pc, #128]	; (228e8 <wait_for_bootrom+0x17c>)
   22866:	4293      	cmp	r3, r2
   22868:	d906      	bls.n	22878 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   2286a:	697b      	ldr	r3, [r7, #20]
   2286c:	2202      	movs	r2, #2
   2286e:	4313      	orrs	r3, r2
   22870:	0018      	movs	r0, r3
   22872:	4b1e      	ldr	r3, [pc, #120]	; (228ec <wait_for_bootrom+0x180>)
   22874:	4798      	blx	r3
   22876:	e003      	b.n	22880 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   22878:	697b      	ldr	r3, [r7, #20]
   2287a:	0018      	movs	r0, r3
   2287c:	4b1b      	ldr	r3, [pc, #108]	; (228ec <wait_for_bootrom+0x180>)
   2287e:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   22880:	4b1b      	ldr	r3, [pc, #108]	; (228f0 <wait_for_bootrom+0x184>)
   22882:	0018      	movs	r0, r3
   22884:	4b1b      	ldr	r3, [pc, #108]	; (228f4 <wait_for_bootrom+0x188>)
   22886:	4798      	blx	r3
   22888:	68fa      	ldr	r2, [r7, #12]
   2288a:	4b1b      	ldr	r3, [pc, #108]	; (228f8 <wait_for_bootrom+0x18c>)
   2288c:	0011      	movs	r1, r2
   2288e:	0018      	movs	r0, r3
   22890:	4b18      	ldr	r3, [pc, #96]	; (228f4 <wait_for_bootrom+0x188>)
   22892:	4798      	blx	r3
   22894:	4b19      	ldr	r3, [pc, #100]	; (228fc <wait_for_bootrom+0x190>)
   22896:	0018      	movs	r0, r3
   22898:	4b16      	ldr	r3, [pc, #88]	; (228f4 <wait_for_bootrom+0x188>)
   2289a:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   2289c:	4a18      	ldr	r2, [pc, #96]	; (22900 <wait_for_bootrom+0x194>)
   2289e:	4b0b      	ldr	r3, [pc, #44]	; (228cc <wait_for_bootrom+0x160>)
   228a0:	0011      	movs	r1, r2
   228a2:	0018      	movs	r0, r3
   228a4:	4b0d      	ldr	r3, [pc, #52]	; (228dc <wait_for_bootrom+0x170>)
   228a6:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   228a8:	2313      	movs	r3, #19
   228aa:	18fb      	adds	r3, r7, r3
   228ac:	781b      	ldrb	r3, [r3, #0]
   228ae:	b25b      	sxtb	r3, r3
}
   228b0:	0018      	movs	r0, r3
   228b2:	46bd      	mov	sp, r7
   228b4:	b008      	add	sp, #32
   228b6:	bd80      	pop	{r7, pc}
   228b8:	13301354 	.word	0x13301354
   228bc:	00001014 	.word	0x00001014
   228c0:	00022af5 	.word	0x00022af5
   228c4:	0002027d 	.word	0x0002027d
   228c8:	000207bc 	.word	0x000207bc
   228cc:	000c000c 	.word	0x000c000c
   228d0:	10add09e 	.word	0x10add09e
   228d4:	3c1cd57d 	.word	0x3c1cd57d
   228d8:	000207ac 	.word	0x000207ac
   228dc:	00022b39 	.word	0x00022b39
   228e0:	0000108c 	.word	0x0000108c
   228e4:	00022415 	.word	0x00022415
   228e8:	0000039f 	.word	0x0000039f
   228ec:	000222e5 	.word	0x000222e5
   228f0:	00038ae8 	.word	0x00038ae8
   228f4:	0001de29 	.word	0x0001de29
   228f8:	00038af4 	.word	0x00038af4
   228fc:	00038ac8 	.word	0x00038ac8
   22900:	ef522f61 	.word	0xef522f61

00022904 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   22904:	b580      	push	{r7, lr}
   22906:	b088      	sub	sp, #32
   22908:	af00      	add	r7, sp, #0
   2290a:	0002      	movs	r2, r0
   2290c:	1dfb      	adds	r3, r7, #7
   2290e:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22910:	231f      	movs	r3, #31
   22912:	18fb      	adds	r3, r7, r3
   22914:	2200      	movs	r2, #0
   22916:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   22918:	2300      	movs	r3, #0
   2291a:	61bb      	str	r3, [r7, #24]
   2291c:	2300      	movs	r3, #0
   2291e:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   22920:	2301      	movs	r3, #1
   22922:	425b      	negs	r3, r3
   22924:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   22926:	4b1d      	ldr	r3, [pc, #116]	; (2299c <wait_for_firmware_start+0x98>)
   22928:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   2292a:	4b1d      	ldr	r3, [pc, #116]	; (229a0 <wait_for_firmware_start+0x9c>)
   2292c:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   2292e:	1dfb      	adds	r3, r7, #7
   22930:	781b      	ldrb	r3, [r3, #0]
   22932:	2b02      	cmp	r3, #2
   22934:	d003      	beq.n	2293e <wait_for_firmware_start+0x3a>
   22936:	1dfb      	adds	r3, r7, #7
   22938:	781b      	ldrb	r3, [r3, #0]
   2293a:	2b03      	cmp	r3, #3
   2293c:	d119      	bne.n	22972 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   2293e:	4b19      	ldr	r3, [pc, #100]	; (229a4 <wait_for_firmware_start+0xa0>)
   22940:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   22942:	4b19      	ldr	r3, [pc, #100]	; (229a8 <wait_for_firmware_start+0xa4>)
   22944:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   22946:	e014      	b.n	22972 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   22948:	2002      	movs	r0, #2
   2294a:	4b18      	ldr	r3, [pc, #96]	; (229ac <wait_for_firmware_start+0xa8>)
   2294c:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   2294e:	68fb      	ldr	r3, [r7, #12]
   22950:	0018      	movs	r0, r3
   22952:	4b17      	ldr	r3, [pc, #92]	; (229b0 <wait_for_firmware_start+0xac>)
   22954:	4798      	blx	r3
   22956:	0003      	movs	r3, r0
   22958:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   2295a:	697b      	ldr	r3, [r7, #20]
   2295c:	3301      	adds	r3, #1
   2295e:	617b      	str	r3, [r7, #20]
   22960:	697a      	ldr	r2, [r7, #20]
   22962:	693b      	ldr	r3, [r7, #16]
   22964:	429a      	cmp	r2, r3
   22966:	d304      	bcc.n	22972 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   22968:	231f      	movs	r3, #31
   2296a:	18fb      	adds	r3, r7, r3
   2296c:	22fb      	movs	r2, #251	; 0xfb
   2296e:	701a      	strb	r2, [r3, #0]
			goto ERR;
   22970:	e00c      	b.n	2298c <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   22972:	68ba      	ldr	r2, [r7, #8]
   22974:	69bb      	ldr	r3, [r7, #24]
   22976:	429a      	cmp	r2, r3
   22978:	d1e6      	bne.n	22948 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   2297a:	68bb      	ldr	r3, [r7, #8]
   2297c:	4a08      	ldr	r2, [pc, #32]	; (229a0 <wait_for_firmware_start+0x9c>)
   2297e:	4293      	cmp	r3, r2
   22980:	d104      	bne.n	2298c <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   22982:	4b06      	ldr	r3, [pc, #24]	; (2299c <wait_for_firmware_start+0x98>)
   22984:	2100      	movs	r1, #0
   22986:	0018      	movs	r0, r3
   22988:	4b0a      	ldr	r3, [pc, #40]	; (229b4 <wait_for_firmware_start+0xb0>)
   2298a:	4798      	blx	r3
	}
ERR:
	return ret;
   2298c:	231f      	movs	r3, #31
   2298e:	18fb      	adds	r3, r7, r3
   22990:	781b      	ldrb	r3, [r3, #0]
   22992:	b25b      	sxtb	r3, r3
}
   22994:	0018      	movs	r0, r3
   22996:	46bd      	mov	sp, r7
   22998:	b008      	add	sp, #32
   2299a:	bd80      	pop	{r7, pc}
   2299c:	0000108c 	.word	0x0000108c
   229a0:	02532636 	.word	0x02532636
   229a4:	000207ac 	.word	0x000207ac
   229a8:	d75dc1c3 	.word	0xd75dc1c3
   229ac:	0002027d 	.word	0x0002027d
   229b0:	00022af5 	.word	0x00022af5
   229b4:	00022b39 	.word	0x00022b39

000229b8 <chip_deinit>:

sint8 chip_deinit(void)
{
   229b8:	b590      	push	{r4, r7, lr}
   229ba:	b083      	sub	sp, #12
   229bc:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   229be:	2300      	movs	r3, #0
   229c0:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   229c2:	1dfc      	adds	r4, r7, #7
   229c4:	003a      	movs	r2, r7
   229c6:	23a0      	movs	r3, #160	; 0xa0
   229c8:	015b      	lsls	r3, r3, #5
   229ca:	0011      	movs	r1, r2
   229cc:	0018      	movs	r0, r3
   229ce:	4b20      	ldr	r3, [pc, #128]	; (22a50 <chip_deinit+0x98>)
   229d0:	4798      	blx	r3
   229d2:	0003      	movs	r3, r0
   229d4:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   229d6:	1dfb      	adds	r3, r7, #7
   229d8:	781b      	ldrb	r3, [r3, #0]
   229da:	b25b      	sxtb	r3, r3
   229dc:	2b00      	cmp	r3, #0
   229de:	d00e      	beq.n	229fe <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   229e0:	4a1c      	ldr	r2, [pc, #112]	; (22a54 <chip_deinit+0x9c>)
   229e2:	491d      	ldr	r1, [pc, #116]	; (22a58 <chip_deinit+0xa0>)
   229e4:	4b1d      	ldr	r3, [pc, #116]	; (22a5c <chip_deinit+0xa4>)
   229e6:	0018      	movs	r0, r3
   229e8:	4b1d      	ldr	r3, [pc, #116]	; (22a60 <chip_deinit+0xa8>)
   229ea:	4798      	blx	r3
   229ec:	4b1d      	ldr	r3, [pc, #116]	; (22a64 <chip_deinit+0xac>)
   229ee:	0018      	movs	r0, r3
   229f0:	4b1b      	ldr	r3, [pc, #108]	; (22a60 <chip_deinit+0xa8>)
   229f2:	4798      	blx	r3
   229f4:	4b1c      	ldr	r3, [pc, #112]	; (22a68 <chip_deinit+0xb0>)
   229f6:	0018      	movs	r0, r3
   229f8:	4b19      	ldr	r3, [pc, #100]	; (22a60 <chip_deinit+0xa8>)
   229fa:	4798      	blx	r3
		goto ERR1;
   229fc:	e021      	b.n	22a42 <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   229fe:	683b      	ldr	r3, [r7, #0]
   22a00:	4a1a      	ldr	r2, [pc, #104]	; (22a6c <chip_deinit+0xb4>)
   22a02:	4013      	ands	r3, r2
   22a04:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   22a06:	683a      	ldr	r2, [r7, #0]
   22a08:	1dfc      	adds	r4, r7, #7
   22a0a:	23a0      	movs	r3, #160	; 0xa0
   22a0c:	015b      	lsls	r3, r3, #5
   22a0e:	0011      	movs	r1, r2
   22a10:	0018      	movs	r0, r3
   22a12:	4b17      	ldr	r3, [pc, #92]	; (22a70 <chip_deinit+0xb8>)
   22a14:	4798      	blx	r3
   22a16:	0003      	movs	r3, r0
   22a18:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   22a1a:	1dfb      	adds	r3, r7, #7
   22a1c:	781b      	ldrb	r3, [r3, #0]
   22a1e:	b25b      	sxtb	r3, r3
   22a20:	2b00      	cmp	r3, #0
   22a22:	d00e      	beq.n	22a42 <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   22a24:	4a13      	ldr	r2, [pc, #76]	; (22a74 <chip_deinit+0xbc>)
   22a26:	490c      	ldr	r1, [pc, #48]	; (22a58 <chip_deinit+0xa0>)
   22a28:	4b0c      	ldr	r3, [pc, #48]	; (22a5c <chip_deinit+0xa4>)
   22a2a:	0018      	movs	r0, r3
   22a2c:	4b0c      	ldr	r3, [pc, #48]	; (22a60 <chip_deinit+0xa8>)
   22a2e:	4798      	blx	r3
   22a30:	4b0c      	ldr	r3, [pc, #48]	; (22a64 <chip_deinit+0xac>)
   22a32:	0018      	movs	r0, r3
   22a34:	4b0a      	ldr	r3, [pc, #40]	; (22a60 <chip_deinit+0xa8>)
   22a36:	4798      	blx	r3
   22a38:	4b0b      	ldr	r3, [pc, #44]	; (22a68 <chip_deinit+0xb0>)
   22a3a:	0018      	movs	r0, r3
   22a3c:	4b08      	ldr	r3, [pc, #32]	; (22a60 <chip_deinit+0xa8>)
   22a3e:	4798      	blx	r3
		goto ERR1;
   22a40:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   22a42:	1dfb      	adds	r3, r7, #7
   22a44:	781b      	ldrb	r3, [r3, #0]
   22a46:	b25b      	sxtb	r3, r3
}
   22a48:	0018      	movs	r0, r3
   22a4a:	46bd      	mov	sp, r7
   22a4c:	b003      	add	sp, #12
   22a4e:	bd90      	pop	{r4, r7, pc}
   22a50:	00022b15 	.word	0x00022b15
   22a54:	00000201 	.word	0x00000201
   22a58:	00038b34 	.word	0x00038b34
   22a5c:	00038a9c 	.word	0x00038a9c
   22a60:	0001de29 	.word	0x0001de29
   22a64:	00038b0c 	.word	0x00038b0c
   22a68:	00038ac8 	.word	0x00038ac8
   22a6c:	fffffbff 	.word	0xfffffbff
   22a70:	00022b39 	.word	0x00022b39
   22a74:	00000207 	.word	0x00000207

00022a78 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   22a78:	b590      	push	{r4, r7, lr}
   22a7a:	b085      	sub	sp, #20
   22a7c:	af00      	add	r7, sp, #0
   22a7e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22a80:	230f      	movs	r3, #15
   22a82:	18fb      	adds	r3, r7, r3
   22a84:	2200      	movs	r2, #0
   22a86:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   22a88:	230f      	movs	r3, #15
   22a8a:	18fc      	adds	r4, r7, r3
   22a8c:	687b      	ldr	r3, [r7, #4]
   22a8e:	0018      	movs	r0, r3
   22a90:	4b05      	ldr	r3, [pc, #20]	; (22aa8 <nm_bus_iface_init+0x30>)
   22a92:	4798      	blx	r3
   22a94:	0003      	movs	r3, r0
   22a96:	7023      	strb	r3, [r4, #0]
	return ret;
   22a98:	230f      	movs	r3, #15
   22a9a:	18fb      	adds	r3, r7, r3
   22a9c:	781b      	ldrb	r3, [r3, #0]
   22a9e:	b25b      	sxtb	r3, r3
}
   22aa0:	0018      	movs	r0, r3
   22aa2:	46bd      	mov	sp, r7
   22aa4:	b005      	add	sp, #20
   22aa6:	bd90      	pop	{r4, r7, pc}
   22aa8:	00020939 	.word	0x00020939

00022aac <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   22aac:	b590      	push	{r4, r7, lr}
   22aae:	b083      	sub	sp, #12
   22ab0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22ab2:	1dfb      	adds	r3, r7, #7
   22ab4:	2200      	movs	r2, #0
   22ab6:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   22ab8:	1dfc      	adds	r4, r7, #7
   22aba:	4b05      	ldr	r3, [pc, #20]	; (22ad0 <nm_bus_iface_deinit+0x24>)
   22abc:	4798      	blx	r3
   22abe:	0003      	movs	r3, r0
   22ac0:	7023      	strb	r3, [r4, #0]

	return ret;
   22ac2:	1dfb      	adds	r3, r7, #7
   22ac4:	781b      	ldrb	r3, [r3, #0]
   22ac6:	b25b      	sxtb	r3, r3
}
   22ac8:	0018      	movs	r0, r3
   22aca:	46bd      	mov	sp, r7
   22acc:	b003      	add	sp, #12
   22ace:	bd90      	pop	{r4, r7, pc}
   22ad0:	00020ab1 	.word	0x00020ab1

00022ad4 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   22ad4:	b580      	push	{r7, lr}
   22ad6:	b082      	sub	sp, #8
   22ad8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22ada:	1dfb      	adds	r3, r7, #7
   22adc:	2200      	movs	r2, #0
   22ade:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   22ae0:	4b03      	ldr	r3, [pc, #12]	; (22af0 <nm_bus_reset+0x1c>)
   22ae2:	4798      	blx	r3
   22ae4:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   22ae6:	0018      	movs	r0, r3
   22ae8:	46bd      	mov	sp, r7
   22aea:	b002      	add	sp, #8
   22aec:	bd80      	pop	{r7, pc}
   22aee:	46c0      	nop			; (mov r8, r8)
   22af0:	00024901 	.word	0x00024901

00022af4 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   22af4:	b580      	push	{r7, lr}
   22af6:	b082      	sub	sp, #8
   22af8:	af00      	add	r7, sp, #0
   22afa:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   22afc:	687b      	ldr	r3, [r7, #4]
   22afe:	0018      	movs	r0, r3
   22b00:	4b03      	ldr	r3, [pc, #12]	; (22b10 <nm_read_reg+0x1c>)
   22b02:	4798      	blx	r3
   22b04:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   22b06:	0018      	movs	r0, r3
   22b08:	46bd      	mov	sp, r7
   22b0a:	b002      	add	sp, #8
   22b0c:	bd80      	pop	{r7, pc}
   22b0e:	46c0      	nop			; (mov r8, r8)
   22b10:	00024a95 	.word	0x00024a95

00022b14 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   22b14:	b580      	push	{r7, lr}
   22b16:	b082      	sub	sp, #8
   22b18:	af00      	add	r7, sp, #0
   22b1a:	6078      	str	r0, [r7, #4]
   22b1c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   22b1e:	683a      	ldr	r2, [r7, #0]
   22b20:	687b      	ldr	r3, [r7, #4]
   22b22:	0011      	movs	r1, r2
   22b24:	0018      	movs	r0, r3
   22b26:	4b03      	ldr	r3, [pc, #12]	; (22b34 <nm_read_reg_with_ret+0x20>)
   22b28:	4798      	blx	r3
   22b2a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   22b2c:	0018      	movs	r0, r3
   22b2e:	46bd      	mov	sp, r7
   22b30:	b002      	add	sp, #8
   22b32:	bd80      	pop	{r7, pc}
   22b34:	00024ab9 	.word	0x00024ab9

00022b38 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   22b38:	b580      	push	{r7, lr}
   22b3a:	b082      	sub	sp, #8
   22b3c:	af00      	add	r7, sp, #0
   22b3e:	6078      	str	r0, [r7, #4]
   22b40:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   22b42:	683a      	ldr	r2, [r7, #0]
   22b44:	687b      	ldr	r3, [r7, #4]
   22b46:	0011      	movs	r1, r2
   22b48:	0018      	movs	r0, r3
   22b4a:	4b03      	ldr	r3, [pc, #12]	; (22b58 <nm_write_reg+0x20>)
   22b4c:	4798      	blx	r3
   22b4e:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   22b50:	0018      	movs	r0, r3
   22b52:	46bd      	mov	sp, r7
   22b54:	b002      	add	sp, #8
   22b56:	bd80      	pop	{r7, pc}
   22b58:	00024b09 	.word	0x00024b09

00022b5c <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   22b5c:	b580      	push	{r7, lr}
   22b5e:	b084      	sub	sp, #16
   22b60:	af00      	add	r7, sp, #0
   22b62:	60f8      	str	r0, [r7, #12]
   22b64:	60b9      	str	r1, [r7, #8]
   22b66:	1dbb      	adds	r3, r7, #6
   22b68:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   22b6a:	1dbb      	adds	r3, r7, #6
   22b6c:	881a      	ldrh	r2, [r3, #0]
   22b6e:	68b9      	ldr	r1, [r7, #8]
   22b70:	68fb      	ldr	r3, [r7, #12]
   22b72:	0018      	movs	r0, r3
   22b74:	4b03      	ldr	r3, [pc, #12]	; (22b84 <p_nm_read_block+0x28>)
   22b76:	4798      	blx	r3
   22b78:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   22b7a:	0018      	movs	r0, r3
   22b7c:	46bd      	mov	sp, r7
   22b7e:	b004      	add	sp, #16
   22b80:	bd80      	pop	{r7, pc}
   22b82:	46c0      	nop			; (mov r8, r8)
   22b84:	00024b59 	.word	0x00024b59

00022b88 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   22b88:	b580      	push	{r7, lr}
   22b8a:	b086      	sub	sp, #24
   22b8c:	af00      	add	r7, sp, #0
   22b8e:	60f8      	str	r0, [r7, #12]
   22b90:	60b9      	str	r1, [r7, #8]
   22b92:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   22b94:	4b2d      	ldr	r3, [pc, #180]	; (22c4c <nm_read_block+0xc4>)
   22b96:	881a      	ldrh	r2, [r3, #0]
   22b98:	2310      	movs	r3, #16
   22b9a:	18fb      	adds	r3, r7, r3
   22b9c:	3a08      	subs	r2, #8
   22b9e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   22ba0:	2300      	movs	r3, #0
   22ba2:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   22ba4:	2313      	movs	r3, #19
   22ba6:	18fb      	adds	r3, r7, r3
   22ba8:	2200      	movs	r2, #0
   22baa:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   22bac:	2310      	movs	r3, #16
   22bae:	18fb      	adds	r3, r7, r3
   22bb0:	881a      	ldrh	r2, [r3, #0]
   22bb2:	687b      	ldr	r3, [r7, #4]
   22bb4:	429a      	cmp	r2, r3
   22bb6:	d313      	bcc.n	22be0 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   22bb8:	68ba      	ldr	r2, [r7, #8]
   22bba:	697b      	ldr	r3, [r7, #20]
   22bbc:	18d1      	adds	r1, r2, r3
   22bbe:	687b      	ldr	r3, [r7, #4]
   22bc0:	b29a      	uxth	r2, r3
   22bc2:	68fb      	ldr	r3, [r7, #12]
   22bc4:	0018      	movs	r0, r3
   22bc6:	4b22      	ldr	r3, [pc, #136]	; (22c50 <nm_read_block+0xc8>)
   22bc8:	4798      	blx	r3
   22bca:	0003      	movs	r3, r0
   22bcc:	b2da      	uxtb	r2, r3
   22bce:	2313      	movs	r3, #19
   22bd0:	18fb      	adds	r3, r7, r3
   22bd2:	781b      	ldrb	r3, [r3, #0]
   22bd4:	18d3      	adds	r3, r2, r3
   22bd6:	b2da      	uxtb	r2, r3
   22bd8:	2313      	movs	r3, #19
   22bda:	18fb      	adds	r3, r7, r3
   22bdc:	701a      	strb	r2, [r3, #0]
			break;
   22bde:	e02d      	b.n	22c3c <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   22be0:	68ba      	ldr	r2, [r7, #8]
   22be2:	697b      	ldr	r3, [r7, #20]
   22be4:	18d1      	adds	r1, r2, r3
   22be6:	2310      	movs	r3, #16
   22be8:	18fb      	adds	r3, r7, r3
   22bea:	881a      	ldrh	r2, [r3, #0]
   22bec:	68fb      	ldr	r3, [r7, #12]
   22bee:	0018      	movs	r0, r3
   22bf0:	4b17      	ldr	r3, [pc, #92]	; (22c50 <nm_read_block+0xc8>)
   22bf2:	4798      	blx	r3
   22bf4:	0003      	movs	r3, r0
   22bf6:	b2da      	uxtb	r2, r3
   22bf8:	2313      	movs	r3, #19
   22bfa:	18fb      	adds	r3, r7, r3
   22bfc:	781b      	ldrb	r3, [r3, #0]
   22bfe:	18d3      	adds	r3, r2, r3
   22c00:	b2da      	uxtb	r2, r3
   22c02:	2313      	movs	r3, #19
   22c04:	18fb      	adds	r3, r7, r3
   22c06:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   22c08:	2313      	movs	r3, #19
   22c0a:	18fb      	adds	r3, r7, r3
   22c0c:	781b      	ldrb	r3, [r3, #0]
   22c0e:	b25b      	sxtb	r3, r3
   22c10:	2b00      	cmp	r3, #0
   22c12:	d112      	bne.n	22c3a <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   22c14:	2310      	movs	r3, #16
   22c16:	18fb      	adds	r3, r7, r3
   22c18:	881b      	ldrh	r3, [r3, #0]
   22c1a:	687a      	ldr	r2, [r7, #4]
   22c1c:	1ad3      	subs	r3, r2, r3
   22c1e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   22c20:	2310      	movs	r3, #16
   22c22:	18fb      	adds	r3, r7, r3
   22c24:	881b      	ldrh	r3, [r3, #0]
   22c26:	697a      	ldr	r2, [r7, #20]
   22c28:	18d3      	adds	r3, r2, r3
   22c2a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   22c2c:	2310      	movs	r3, #16
   22c2e:	18fb      	adds	r3, r7, r3
   22c30:	881b      	ldrh	r3, [r3, #0]
   22c32:	68fa      	ldr	r2, [r7, #12]
   22c34:	18d3      	adds	r3, r2, r3
   22c36:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   22c38:	e7b8      	b.n	22bac <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   22c3a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   22c3c:	2313      	movs	r3, #19
   22c3e:	18fb      	adds	r3, r7, r3
   22c40:	781b      	ldrb	r3, [r3, #0]
   22c42:	b25b      	sxtb	r3, r3
}
   22c44:	0018      	movs	r0, r3
   22c46:	46bd      	mov	sp, r7
   22c48:	b006      	add	sp, #24
   22c4a:	bd80      	pop	{r7, pc}
   22c4c:	20000124 	.word	0x20000124
   22c50:	00022b5d 	.word	0x00022b5d

00022c54 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   22c54:	b580      	push	{r7, lr}
   22c56:	b084      	sub	sp, #16
   22c58:	af00      	add	r7, sp, #0
   22c5a:	60f8      	str	r0, [r7, #12]
   22c5c:	60b9      	str	r1, [r7, #8]
   22c5e:	1dbb      	adds	r3, r7, #6
   22c60:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   22c62:	1dbb      	adds	r3, r7, #6
   22c64:	881a      	ldrh	r2, [r3, #0]
   22c66:	68b9      	ldr	r1, [r7, #8]
   22c68:	68fb      	ldr	r3, [r7, #12]
   22c6a:	0018      	movs	r0, r3
   22c6c:	4b03      	ldr	r3, [pc, #12]	; (22c7c <p_nm_write_block+0x28>)
   22c6e:	4798      	blx	r3
   22c70:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   22c72:	0018      	movs	r0, r3
   22c74:	46bd      	mov	sp, r7
   22c76:	b004      	add	sp, #16
   22c78:	bd80      	pop	{r7, pc}
   22c7a:	46c0      	nop			; (mov r8, r8)
   22c7c:	00024bb1 	.word	0x00024bb1

00022c80 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   22c80:	b580      	push	{r7, lr}
   22c82:	b086      	sub	sp, #24
   22c84:	af00      	add	r7, sp, #0
   22c86:	60f8      	str	r0, [r7, #12]
   22c88:	60b9      	str	r1, [r7, #8]
   22c8a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   22c8c:	4b2d      	ldr	r3, [pc, #180]	; (22d44 <nm_write_block+0xc4>)
   22c8e:	881a      	ldrh	r2, [r3, #0]
   22c90:	2310      	movs	r3, #16
   22c92:	18fb      	adds	r3, r7, r3
   22c94:	3a08      	subs	r2, #8
   22c96:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   22c98:	2300      	movs	r3, #0
   22c9a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   22c9c:	2313      	movs	r3, #19
   22c9e:	18fb      	adds	r3, r7, r3
   22ca0:	2200      	movs	r2, #0
   22ca2:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   22ca4:	2310      	movs	r3, #16
   22ca6:	18fb      	adds	r3, r7, r3
   22ca8:	881a      	ldrh	r2, [r3, #0]
   22caa:	687b      	ldr	r3, [r7, #4]
   22cac:	429a      	cmp	r2, r3
   22cae:	d313      	bcc.n	22cd8 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   22cb0:	68ba      	ldr	r2, [r7, #8]
   22cb2:	697b      	ldr	r3, [r7, #20]
   22cb4:	18d1      	adds	r1, r2, r3
   22cb6:	687b      	ldr	r3, [r7, #4]
   22cb8:	b29a      	uxth	r2, r3
   22cba:	68fb      	ldr	r3, [r7, #12]
   22cbc:	0018      	movs	r0, r3
   22cbe:	4b22      	ldr	r3, [pc, #136]	; (22d48 <nm_write_block+0xc8>)
   22cc0:	4798      	blx	r3
   22cc2:	0003      	movs	r3, r0
   22cc4:	b2da      	uxtb	r2, r3
   22cc6:	2313      	movs	r3, #19
   22cc8:	18fb      	adds	r3, r7, r3
   22cca:	781b      	ldrb	r3, [r3, #0]
   22ccc:	18d3      	adds	r3, r2, r3
   22cce:	b2da      	uxtb	r2, r3
   22cd0:	2313      	movs	r3, #19
   22cd2:	18fb      	adds	r3, r7, r3
   22cd4:	701a      	strb	r2, [r3, #0]
			break;
   22cd6:	e02d      	b.n	22d34 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   22cd8:	68ba      	ldr	r2, [r7, #8]
   22cda:	697b      	ldr	r3, [r7, #20]
   22cdc:	18d1      	adds	r1, r2, r3
   22cde:	2310      	movs	r3, #16
   22ce0:	18fb      	adds	r3, r7, r3
   22ce2:	881a      	ldrh	r2, [r3, #0]
   22ce4:	68fb      	ldr	r3, [r7, #12]
   22ce6:	0018      	movs	r0, r3
   22ce8:	4b17      	ldr	r3, [pc, #92]	; (22d48 <nm_write_block+0xc8>)
   22cea:	4798      	blx	r3
   22cec:	0003      	movs	r3, r0
   22cee:	b2da      	uxtb	r2, r3
   22cf0:	2313      	movs	r3, #19
   22cf2:	18fb      	adds	r3, r7, r3
   22cf4:	781b      	ldrb	r3, [r3, #0]
   22cf6:	18d3      	adds	r3, r2, r3
   22cf8:	b2da      	uxtb	r2, r3
   22cfa:	2313      	movs	r3, #19
   22cfc:	18fb      	adds	r3, r7, r3
   22cfe:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   22d00:	2313      	movs	r3, #19
   22d02:	18fb      	adds	r3, r7, r3
   22d04:	781b      	ldrb	r3, [r3, #0]
   22d06:	b25b      	sxtb	r3, r3
   22d08:	2b00      	cmp	r3, #0
   22d0a:	d112      	bne.n	22d32 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   22d0c:	2310      	movs	r3, #16
   22d0e:	18fb      	adds	r3, r7, r3
   22d10:	881b      	ldrh	r3, [r3, #0]
   22d12:	687a      	ldr	r2, [r7, #4]
   22d14:	1ad3      	subs	r3, r2, r3
   22d16:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   22d18:	2310      	movs	r3, #16
   22d1a:	18fb      	adds	r3, r7, r3
   22d1c:	881b      	ldrh	r3, [r3, #0]
   22d1e:	697a      	ldr	r2, [r7, #20]
   22d20:	18d3      	adds	r3, r2, r3
   22d22:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   22d24:	2310      	movs	r3, #16
   22d26:	18fb      	adds	r3, r7, r3
   22d28:	881b      	ldrh	r3, [r3, #0]
   22d2a:	68fa      	ldr	r2, [r7, #12]
   22d2c:	18d3      	adds	r3, r2, r3
   22d2e:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   22d30:	e7b8      	b.n	22ca4 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   22d32:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   22d34:	2313      	movs	r3, #19
   22d36:	18fb      	adds	r3, r7, r3
   22d38:	781b      	ldrb	r3, [r3, #0]
   22d3a:	b25b      	sxtb	r3, r3
}
   22d3c:	0018      	movs	r0, r3
   22d3e:	46bd      	mov	sp, r7
   22d40:	b006      	add	sp, #24
   22d42:	bd80      	pop	{r7, pc}
   22d44:	20000124 	.word	0x20000124
   22d48:	00022c55 	.word	0x00022c55

00022d4c <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   22d4c:	b590      	push	{r4, r7, lr}
   22d4e:	b089      	sub	sp, #36	; 0x24
   22d50:	af00      	add	r7, sp, #0
   22d52:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   22d54:	2300      	movs	r3, #0
   22d56:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   22d58:	231f      	movs	r3, #31
   22d5a:	18fb      	adds	r3, r7, r3
   22d5c:	2200      	movs	r2, #0
   22d5e:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   22d60:	230c      	movs	r3, #12
   22d62:	18fb      	adds	r3, r7, r3
   22d64:	0018      	movs	r0, r3
   22d66:	2308      	movs	r3, #8
   22d68:	001a      	movs	r2, r3
   22d6a:	2100      	movs	r1, #0
   22d6c:	4b64      	ldr	r3, [pc, #400]	; (22f00 <nm_get_firmware_full_info+0x1b4>)
   22d6e:	4798      	blx	r3
	if (pstrRev != NULL)
   22d70:	687b      	ldr	r3, [r7, #4]
   22d72:	2b00      	cmp	r3, #0
   22d74:	d100      	bne.n	22d78 <nm_get_firmware_full_info+0x2c>
   22d76:	e0ba      	b.n	22eee <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   22d78:	687b      	ldr	r3, [r7, #4]
   22d7a:	2228      	movs	r2, #40	; 0x28
   22d7c:	2100      	movs	r1, #0
   22d7e:	0018      	movs	r0, r3
   22d80:	4b60      	ldr	r3, [pc, #384]	; (22f04 <nm_get_firmware_full_info+0x1b8>)
   22d82:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   22d84:	231f      	movs	r3, #31
   22d86:	18fc      	adds	r4, r7, r3
   22d88:	2314      	movs	r3, #20
   22d8a:	18fb      	adds	r3, r7, r3
   22d8c:	4a5e      	ldr	r2, [pc, #376]	; (22f08 <nm_get_firmware_full_info+0x1bc>)
   22d8e:	0019      	movs	r1, r3
   22d90:	0010      	movs	r0, r2
   22d92:	4b5e      	ldr	r3, [pc, #376]	; (22f0c <nm_get_firmware_full_info+0x1c0>)
   22d94:	4798      	blx	r3
   22d96:	0003      	movs	r3, r0
   22d98:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   22d9a:	231f      	movs	r3, #31
   22d9c:	18fb      	adds	r3, r7, r3
   22d9e:	781b      	ldrb	r3, [r3, #0]
   22da0:	b25b      	sxtb	r3, r3
   22da2:	2b00      	cmp	r3, #0
   22da4:	d000      	beq.n	22da8 <nm_get_firmware_full_info+0x5c>
   22da6:	e0a2      	b.n	22eee <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   22da8:	697b      	ldr	r3, [r7, #20]
   22daa:	2b00      	cmp	r3, #0
   22dac:	d100      	bne.n	22db0 <nm_get_firmware_full_info+0x64>
   22dae:	e09a      	b.n	22ee6 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   22db0:	697b      	ldr	r3, [r7, #20]
   22db2:	22c0      	movs	r2, #192	; 0xc0
   22db4:	0292      	lsls	r2, r2, #10
   22db6:	4313      	orrs	r3, r2
   22db8:	221f      	movs	r2, #31
   22dba:	18bc      	adds	r4, r7, r2
   22dbc:	220c      	movs	r2, #12
   22dbe:	18b9      	adds	r1, r7, r2
   22dc0:	2208      	movs	r2, #8
   22dc2:	0018      	movs	r0, r3
   22dc4:	4b52      	ldr	r3, [pc, #328]	; (22f10 <nm_get_firmware_full_info+0x1c4>)
   22dc6:	4798      	blx	r3
   22dc8:	0003      	movs	r3, r0
   22dca:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   22dcc:	231f      	movs	r3, #31
   22dce:	18fb      	adds	r3, r7, r3
   22dd0:	781b      	ldrb	r3, [r3, #0]
   22dd2:	b25b      	sxtb	r3, r3
   22dd4:	2b00      	cmp	r3, #0
   22dd6:	d000      	beq.n	22dda <nm_get_firmware_full_info+0x8e>
   22dd8:	e089      	b.n	22eee <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   22dda:	230c      	movs	r3, #12
   22ddc:	18fb      	adds	r3, r7, r3
   22dde:	685b      	ldr	r3, [r3, #4]
   22de0:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   22de2:	697b      	ldr	r3, [r7, #20]
   22de4:	041b      	lsls	r3, r3, #16
   22de6:	0c1b      	lsrs	r3, r3, #16
   22de8:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   22dea:	697b      	ldr	r3, [r7, #20]
   22dec:	2b00      	cmp	r3, #0
   22dee:	d100      	bne.n	22df2 <nm_get_firmware_full_info+0xa6>
   22df0:	e074      	b.n	22edc <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   22df2:	697b      	ldr	r3, [r7, #20]
   22df4:	22c0      	movs	r2, #192	; 0xc0
   22df6:	0292      	lsls	r2, r2, #10
   22df8:	4313      	orrs	r3, r2
   22dfa:	221f      	movs	r2, #31
   22dfc:	18bc      	adds	r4, r7, r2
   22dfe:	6879      	ldr	r1, [r7, #4]
   22e00:	2228      	movs	r2, #40	; 0x28
   22e02:	0018      	movs	r0, r3
   22e04:	4b42      	ldr	r3, [pc, #264]	; (22f10 <nm_get_firmware_full_info+0x1c4>)
   22e06:	4798      	blx	r3
   22e08:	0003      	movs	r3, r0
   22e0a:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   22e0c:	231f      	movs	r3, #31
   22e0e:	18fb      	adds	r3, r7, r3
   22e10:	781b      	ldrb	r3, [r3, #0]
   22e12:	b25b      	sxtb	r3, r3
   22e14:	2b00      	cmp	r3, #0
   22e16:	d16a      	bne.n	22eee <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   22e18:	687b      	ldr	r3, [r7, #4]
   22e1a:	791b      	ldrb	r3, [r3, #4]
   22e1c:	021b      	lsls	r3, r3, #8
   22e1e:	b21a      	sxth	r2, r3
   22e20:	687b      	ldr	r3, [r7, #4]
   22e22:	795b      	ldrb	r3, [r3, #5]
   22e24:	011b      	lsls	r3, r3, #4
   22e26:	b21b      	sxth	r3, r3
   22e28:	21ff      	movs	r1, #255	; 0xff
   22e2a:	400b      	ands	r3, r1
   22e2c:	b21b      	sxth	r3, r3
   22e2e:	4313      	orrs	r3, r2
   22e30:	b21a      	sxth	r2, r3
   22e32:	687b      	ldr	r3, [r7, #4]
   22e34:	799b      	ldrb	r3, [r3, #6]
   22e36:	b21b      	sxth	r3, r3
   22e38:	210f      	movs	r1, #15
   22e3a:	400b      	ands	r3, r1
   22e3c:	b21b      	sxth	r3, r3
   22e3e:	4313      	orrs	r3, r2
   22e40:	b21a      	sxth	r2, r3
   22e42:	231c      	movs	r3, #28
   22e44:	18fb      	adds	r3, r7, r3
   22e46:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   22e48:	231a      	movs	r3, #26
   22e4a:	18fb      	adds	r3, r7, r3
   22e4c:	4a31      	ldr	r2, [pc, #196]	; (22f14 <nm_get_firmware_full_info+0x1c8>)
   22e4e:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   22e50:	687b      	ldr	r3, [r7, #4]
   22e52:	79db      	ldrb	r3, [r3, #7]
   22e54:	021b      	lsls	r3, r3, #8
   22e56:	b21a      	sxth	r2, r3
   22e58:	687b      	ldr	r3, [r7, #4]
   22e5a:	7a1b      	ldrb	r3, [r3, #8]
   22e5c:	011b      	lsls	r3, r3, #4
   22e5e:	b21b      	sxth	r3, r3
   22e60:	21ff      	movs	r1, #255	; 0xff
   22e62:	400b      	ands	r3, r1
   22e64:	b21b      	sxth	r3, r3
   22e66:	4313      	orrs	r3, r2
   22e68:	b21a      	sxth	r2, r3
   22e6a:	687b      	ldr	r3, [r7, #4]
   22e6c:	7a5b      	ldrb	r3, [r3, #9]
   22e6e:	b21b      	sxth	r3, r3
   22e70:	210f      	movs	r1, #15
   22e72:	400b      	ands	r3, r1
   22e74:	b21b      	sxth	r3, r3
   22e76:	4313      	orrs	r3, r2
   22e78:	b21a      	sxth	r2, r3
   22e7a:	2318      	movs	r3, #24
   22e7c:	18fb      	adds	r3, r7, r3
   22e7e:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   22e80:	231c      	movs	r3, #28
   22e82:	18fb      	adds	r3, r7, r3
   22e84:	881b      	ldrh	r3, [r3, #0]
   22e86:	2b00      	cmp	r3, #0
   22e88:	d009      	beq.n	22e9e <nm_get_firmware_full_info+0x152>
   22e8a:	2318      	movs	r3, #24
   22e8c:	18fb      	adds	r3, r7, r3
   22e8e:	881b      	ldrh	r3, [r3, #0]
   22e90:	2b00      	cmp	r3, #0
   22e92:	d004      	beq.n	22e9e <nm_get_firmware_full_info+0x152>
   22e94:	2318      	movs	r3, #24
   22e96:	18fb      	adds	r3, r7, r3
   22e98:	881b      	ldrh	r3, [r3, #0]
   22e9a:	2b00      	cmp	r3, #0
   22e9c:	d104      	bne.n	22ea8 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   22e9e:	231f      	movs	r3, #31
   22ea0:	18fb      	adds	r3, r7, r3
   22ea2:	22f4      	movs	r2, #244	; 0xf4
   22ea4:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22ea6:	e022      	b.n	22eee <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   22ea8:	231a      	movs	r3, #26
   22eaa:	18fa      	adds	r2, r7, r3
   22eac:	2318      	movs	r3, #24
   22eae:	18fb      	adds	r3, r7, r3
   22eb0:	8812      	ldrh	r2, [r2, #0]
   22eb2:	881b      	ldrh	r3, [r3, #0]
   22eb4:	429a      	cmp	r2, r3
   22eb6:	d204      	bcs.n	22ec2 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   22eb8:	231f      	movs	r3, #31
   22eba:	18fb      	adds	r3, r7, r3
   22ebc:	22f3      	movs	r2, #243	; 0xf3
   22ebe:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22ec0:	e015      	b.n	22eee <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   22ec2:	231a      	movs	r3, #26
   22ec4:	18fa      	adds	r2, r7, r3
   22ec6:	231c      	movs	r3, #28
   22ec8:	18fb      	adds	r3, r7, r3
   22eca:	8812      	ldrh	r2, [r2, #0]
   22ecc:	881b      	ldrh	r3, [r3, #0]
   22ece:	429a      	cmp	r2, r3
   22ed0:	d90d      	bls.n	22eee <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   22ed2:	231f      	movs	r3, #31
   22ed4:	18fb      	adds	r3, r7, r3
   22ed6:	22f3      	movs	r2, #243	; 0xf3
   22ed8:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22eda:	e008      	b.n	22eee <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   22edc:	231f      	movs	r3, #31
   22ede:	18fb      	adds	r3, r7, r3
   22ee0:	22f4      	movs	r2, #244	; 0xf4
   22ee2:	701a      	strb	r2, [r3, #0]
   22ee4:	e003      	b.n	22eee <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   22ee6:	231f      	movs	r3, #31
   22ee8:	18fb      	adds	r3, r7, r3
   22eea:	22f4      	movs	r2, #244	; 0xf4
   22eec:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   22eee:	231f      	movs	r3, #31
   22ef0:	18fb      	adds	r3, r7, r3
   22ef2:	781b      	ldrb	r3, [r3, #0]
   22ef4:	b25b      	sxtb	r3, r3
}
   22ef6:	0018      	movs	r0, r3
   22ef8:	46bd      	mov	sp, r7
   22efa:	b009      	add	sp, #36	; 0x24
   22efc:	bd90      	pop	{r4, r7, pc}
   22efe:	46c0      	nop			; (mov r8, r8)
   22f00:	00034883 	.word	0x00034883
   22f04:	00020b5d 	.word	0x00020b5d
   22f08:	000c0008 	.word	0x000c0008
   22f0c:	00022b15 	.word	0x00022b15
   22f10:	00022b89 	.word	0x00022b89
   22f14:	00001354 	.word	0x00001354

00022f18 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   22f18:	b590      	push	{r4, r7, lr}
   22f1a:	b085      	sub	sp, #20
   22f1c:	af00      	add	r7, sp, #0
   22f1e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22f20:	230f      	movs	r3, #15
   22f22:	18fb      	adds	r3, r7, r3
   22f24:	2200      	movs	r2, #0
   22f26:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   22f28:	687b      	ldr	r3, [r7, #4]
   22f2a:	2b00      	cmp	r3, #0
   22f2c:	d013      	beq.n	22f56 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   22f2e:	230e      	movs	r3, #14
   22f30:	18fb      	adds	r3, r7, r3
   22f32:	687a      	ldr	r2, [r7, #4]
   22f34:	7812      	ldrb	r2, [r2, #0]
   22f36:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   22f38:	230e      	movs	r3, #14
   22f3a:	18fb      	adds	r3, r7, r3
   22f3c:	781b      	ldrb	r3, [r3, #0]
   22f3e:	2b00      	cmp	r3, #0
   22f40:	d004      	beq.n	22f4c <nm_drv_init+0x34>
   22f42:	230e      	movs	r3, #14
   22f44:	18fb      	adds	r3, r7, r3
   22f46:	781b      	ldrb	r3, [r3, #0]
   22f48:	2b04      	cmp	r3, #4
   22f4a:	d908      	bls.n	22f5e <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   22f4c:	230e      	movs	r3, #14
   22f4e:	18fb      	adds	r3, r7, r3
   22f50:	2201      	movs	r2, #1
   22f52:	701a      	strb	r2, [r3, #0]
   22f54:	e003      	b.n	22f5e <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   22f56:	230e      	movs	r3, #14
   22f58:	18fb      	adds	r3, r7, r3
   22f5a:	2201      	movs	r2, #1
   22f5c:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   22f5e:	230f      	movs	r3, #15
   22f60:	18fc      	adds	r4, r7, r3
   22f62:	2000      	movs	r0, #0
   22f64:	4b41      	ldr	r3, [pc, #260]	; (2306c <nm_drv_init+0x154>)
   22f66:	4798      	blx	r3
   22f68:	0003      	movs	r3, r0
   22f6a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22f6c:	230f      	movs	r3, #15
   22f6e:	18fb      	adds	r3, r7, r3
   22f70:	781b      	ldrb	r3, [r3, #0]
   22f72:	b25b      	sxtb	r3, r3
   22f74:	2b00      	cmp	r3, #0
   22f76:	d00f      	beq.n	22f98 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   22f78:	2390      	movs	r3, #144	; 0x90
   22f7a:	005a      	lsls	r2, r3, #1
   22f7c:	493c      	ldr	r1, [pc, #240]	; (23070 <nm_drv_init+0x158>)
   22f7e:	4b3d      	ldr	r3, [pc, #244]	; (23074 <nm_drv_init+0x15c>)
   22f80:	0018      	movs	r0, r3
   22f82:	4b3d      	ldr	r3, [pc, #244]	; (23078 <nm_drv_init+0x160>)
   22f84:	4798      	blx	r3
   22f86:	4b3d      	ldr	r3, [pc, #244]	; (2307c <nm_drv_init+0x164>)
   22f88:	0018      	movs	r0, r3
   22f8a:	4b3b      	ldr	r3, [pc, #236]	; (23078 <nm_drv_init+0x160>)
   22f8c:	4798      	blx	r3
   22f8e:	4b3c      	ldr	r3, [pc, #240]	; (23080 <nm_drv_init+0x168>)
   22f90:	0018      	movs	r0, r3
   22f92:	4b39      	ldr	r3, [pc, #228]	; (23078 <nm_drv_init+0x160>)
   22f94:	4798      	blx	r3
		goto ERR1;
   22f96:	e061      	b.n	2305c <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   22f98:	4b3a      	ldr	r3, [pc, #232]	; (23084 <nm_drv_init+0x16c>)
   22f9a:	0018      	movs	r0, r3
   22f9c:	4b36      	ldr	r3, [pc, #216]	; (23078 <nm_drv_init+0x160>)
   22f9e:	4798      	blx	r3
   22fa0:	4b39      	ldr	r3, [pc, #228]	; (23088 <nm_drv_init+0x170>)
   22fa2:	4798      	blx	r3
   22fa4:	0002      	movs	r2, r0
   22fa6:	4b39      	ldr	r3, [pc, #228]	; (2308c <nm_drv_init+0x174>)
   22fa8:	0011      	movs	r1, r2
   22faa:	0018      	movs	r0, r3
   22fac:	4b32      	ldr	r3, [pc, #200]	; (23078 <nm_drv_init+0x160>)
   22fae:	4798      	blx	r3
   22fb0:	4b33      	ldr	r3, [pc, #204]	; (23080 <nm_drv_init+0x168>)
   22fb2:	0018      	movs	r0, r3
   22fb4:	4b30      	ldr	r3, [pc, #192]	; (23078 <nm_drv_init+0x160>)
   22fb6:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   22fb8:	4b35      	ldr	r3, [pc, #212]	; (23090 <nm_drv_init+0x178>)
   22fba:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   22fbc:	230f      	movs	r3, #15
   22fbe:	18fc      	adds	r4, r7, r3
   22fc0:	230e      	movs	r3, #14
   22fc2:	18fb      	adds	r3, r7, r3
   22fc4:	781b      	ldrb	r3, [r3, #0]
   22fc6:	0018      	movs	r0, r3
   22fc8:	4b32      	ldr	r3, [pc, #200]	; (23094 <nm_drv_init+0x17c>)
   22fca:	4798      	blx	r3
   22fcc:	0003      	movs	r3, r0
   22fce:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22fd0:	230f      	movs	r3, #15
   22fd2:	18fb      	adds	r3, r7, r3
   22fd4:	781b      	ldrb	r3, [r3, #0]
   22fd6:	b25b      	sxtb	r3, r3
   22fd8:	2b00      	cmp	r3, #0
   22fda:	d13a      	bne.n	23052 <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   22fdc:	230f      	movs	r3, #15
   22fde:	18fc      	adds	r4, r7, r3
   22fe0:	230e      	movs	r3, #14
   22fe2:	18fb      	adds	r3, r7, r3
   22fe4:	781b      	ldrb	r3, [r3, #0]
   22fe6:	0018      	movs	r0, r3
   22fe8:	4b2b      	ldr	r3, [pc, #172]	; (23098 <nm_drv_init+0x180>)
   22fea:	4798      	blx	r3
   22fec:	0003      	movs	r3, r0
   22fee:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22ff0:	230f      	movs	r3, #15
   22ff2:	18fb      	adds	r3, r7, r3
   22ff4:	781b      	ldrb	r3, [r3, #0]
   22ff6:	b25b      	sxtb	r3, r3
   22ff8:	2b00      	cmp	r3, #0
   22ffa:	d12c      	bne.n	23056 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   22ffc:	230e      	movs	r3, #14
   22ffe:	18fb      	adds	r3, r7, r3
   23000:	781b      	ldrb	r3, [r3, #0]
   23002:	2b02      	cmp	r3, #2
   23004:	d02a      	beq.n	2305c <nm_drv_init+0x144>
   23006:	230e      	movs	r3, #14
   23008:	18fb      	adds	r3, r7, r3
   2300a:	781b      	ldrb	r3, [r3, #0]
   2300c:	2b03      	cmp	r3, #3
   2300e:	d025      	beq.n	2305c <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   23010:	230f      	movs	r3, #15
   23012:	18fc      	adds	r4, r7, r3
   23014:	4b21      	ldr	r3, [pc, #132]	; (2309c <nm_drv_init+0x184>)
   23016:	4798      	blx	r3
   23018:	0003      	movs	r3, r0
   2301a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2301c:	230f      	movs	r3, #15
   2301e:	18fb      	adds	r3, r7, r3
   23020:	781b      	ldrb	r3, [r3, #0]
   23022:	b25b      	sxtb	r3, r3
   23024:	2b00      	cmp	r3, #0
   23026:	d00f      	beq.n	23048 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   23028:	23a7      	movs	r3, #167	; 0xa7
   2302a:	005a      	lsls	r2, r3, #1
   2302c:	4910      	ldr	r1, [pc, #64]	; (23070 <nm_drv_init+0x158>)
   2302e:	4b11      	ldr	r3, [pc, #68]	; (23074 <nm_drv_init+0x15c>)
   23030:	0018      	movs	r0, r3
   23032:	4b11      	ldr	r3, [pc, #68]	; (23078 <nm_drv_init+0x160>)
   23034:	4798      	blx	r3
   23036:	4b1a      	ldr	r3, [pc, #104]	; (230a0 <nm_drv_init+0x188>)
   23038:	0018      	movs	r0, r3
   2303a:	4b0f      	ldr	r3, [pc, #60]	; (23078 <nm_drv_init+0x160>)
   2303c:	4798      	blx	r3
   2303e:	4b10      	ldr	r3, [pc, #64]	; (23080 <nm_drv_init+0x168>)
   23040:	0018      	movs	r0, r3
   23042:	4b0d      	ldr	r3, [pc, #52]	; (23078 <nm_drv_init+0x160>)
   23044:	4798      	blx	r3
		goto ERR2;
   23046:	e007      	b.n	23058 <nm_drv_init+0x140>
	}
	return ret;
   23048:	230f      	movs	r3, #15
   2304a:	18fb      	adds	r3, r7, r3
   2304c:	781b      	ldrb	r3, [r3, #0]
   2304e:	b25b      	sxtb	r3, r3
   23050:	e008      	b.n	23064 <nm_drv_init+0x14c>
		goto ERR2;
   23052:	46c0      	nop			; (mov r8, r8)
   23054:	e000      	b.n	23058 <nm_drv_init+0x140>
		goto ERR2;
   23056:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   23058:	4b12      	ldr	r3, [pc, #72]	; (230a4 <nm_drv_init+0x18c>)
   2305a:	4798      	blx	r3
ERR1:
	return ret;
   2305c:	230f      	movs	r3, #15
   2305e:	18fb      	adds	r3, r7, r3
   23060:	781b      	ldrb	r3, [r3, #0]
   23062:	b25b      	sxtb	r3, r3
}
   23064:	0018      	movs	r0, r3
   23066:	46bd      	mov	sp, r7
   23068:	b005      	add	sp, #20
   2306a:	bd90      	pop	{r4, r7, pc}
   2306c:	00022a79 	.word	0x00022a79
   23070:	00038c10 	.word	0x00038c10
   23074:	00038b40 	.word	0x00038b40
   23078:	0001de29 	.word	0x0001de29
   2307c:	00038b54 	.word	0x00038b54
   23080:	00038b70 	.word	0x00038b70
   23084:	00038b74 	.word	0x00038b74
   23088:	00022415 	.word	0x00022415
   2308c:	00038b80 	.word	0x00038b80
   23090:	00024931 	.word	0x00024931
   23094:	0002276d 	.word	0x0002276d
   23098:	00022905 	.word	0x00022905
   2309c:	00022361 	.word	0x00022361
   230a0:	00038b90 	.word	0x00038b90
   230a4:	00022aad 	.word	0x00022aad

000230a8 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   230a8:	b590      	push	{r4, r7, lr}
   230aa:	b085      	sub	sp, #20
   230ac:	af00      	add	r7, sp, #0
   230ae:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   230b0:	230f      	movs	r3, #15
   230b2:	18fc      	adds	r4, r7, r3
   230b4:	4b2e      	ldr	r3, [pc, #184]	; (23170 <nm_drv_deinit+0xc8>)
   230b6:	4798      	blx	r3
   230b8:	0003      	movs	r3, r0
   230ba:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   230bc:	230f      	movs	r3, #15
   230be:	18fb      	adds	r3, r7, r3
   230c0:	781b      	ldrb	r3, [r3, #0]
   230c2:	b25b      	sxtb	r3, r3
   230c4:	2b00      	cmp	r3, #0
   230c6:	d010      	beq.n	230ea <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   230c8:	2366      	movs	r3, #102	; 0x66
   230ca:	33ff      	adds	r3, #255	; 0xff
   230cc:	001a      	movs	r2, r3
   230ce:	4929      	ldr	r1, [pc, #164]	; (23174 <nm_drv_deinit+0xcc>)
   230d0:	4b29      	ldr	r3, [pc, #164]	; (23178 <nm_drv_deinit+0xd0>)
   230d2:	0018      	movs	r0, r3
   230d4:	4b29      	ldr	r3, [pc, #164]	; (2317c <nm_drv_deinit+0xd4>)
   230d6:	4798      	blx	r3
   230d8:	4b29      	ldr	r3, [pc, #164]	; (23180 <nm_drv_deinit+0xd8>)
   230da:	0018      	movs	r0, r3
   230dc:	4b27      	ldr	r3, [pc, #156]	; (2317c <nm_drv_deinit+0xd4>)
   230de:	4798      	blx	r3
   230e0:	4b28      	ldr	r3, [pc, #160]	; (23184 <nm_drv_deinit+0xdc>)
   230e2:	0018      	movs	r0, r3
   230e4:	4b25      	ldr	r3, [pc, #148]	; (2317c <nm_drv_deinit+0xd4>)
   230e6:	4798      	blx	r3
		goto ERR1;
   230e8:	e03a      	b.n	23160 <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   230ea:	230f      	movs	r3, #15
   230ec:	18fc      	adds	r4, r7, r3
   230ee:	2000      	movs	r0, #0
   230f0:	4b25      	ldr	r3, [pc, #148]	; (23188 <nm_drv_deinit+0xe0>)
   230f2:	4798      	blx	r3
   230f4:	0003      	movs	r3, r0
   230f6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   230f8:	230f      	movs	r3, #15
   230fa:	18fb      	adds	r3, r7, r3
   230fc:	781b      	ldrb	r3, [r3, #0]
   230fe:	b25b      	sxtb	r3, r3
   23100:	2b00      	cmp	r3, #0
   23102:	d00f      	beq.n	23124 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   23104:	23b6      	movs	r3, #182	; 0xb6
   23106:	005a      	lsls	r2, r3, #1
   23108:	491a      	ldr	r1, [pc, #104]	; (23174 <nm_drv_deinit+0xcc>)
   2310a:	4b1b      	ldr	r3, [pc, #108]	; (23178 <nm_drv_deinit+0xd0>)
   2310c:	0018      	movs	r0, r3
   2310e:	4b1b      	ldr	r3, [pc, #108]	; (2317c <nm_drv_deinit+0xd4>)
   23110:	4798      	blx	r3
   23112:	4b1e      	ldr	r3, [pc, #120]	; (2318c <nm_drv_deinit+0xe4>)
   23114:	0018      	movs	r0, r3
   23116:	4b19      	ldr	r3, [pc, #100]	; (2317c <nm_drv_deinit+0xd4>)
   23118:	4798      	blx	r3
   2311a:	4b1a      	ldr	r3, [pc, #104]	; (23184 <nm_drv_deinit+0xdc>)
   2311c:	0018      	movs	r0, r3
   2311e:	4b17      	ldr	r3, [pc, #92]	; (2317c <nm_drv_deinit+0xd4>)
   23120:	4798      	blx	r3
		goto ERR1;
   23122:	e01d      	b.n	23160 <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   23124:	230f      	movs	r3, #15
   23126:	18fc      	adds	r4, r7, r3
   23128:	4b19      	ldr	r3, [pc, #100]	; (23190 <nm_drv_deinit+0xe8>)
   2312a:	4798      	blx	r3
   2312c:	0003      	movs	r3, r0
   2312e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23130:	230f      	movs	r3, #15
   23132:	18fb      	adds	r3, r7, r3
   23134:	781b      	ldrb	r3, [r3, #0]
   23136:	b25b      	sxtb	r3, r3
   23138:	2b00      	cmp	r3, #0
   2313a:	d00f      	beq.n	2315c <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   2313c:	23b9      	movs	r3, #185	; 0xb9
   2313e:	005a      	lsls	r2, r3, #1
   23140:	490c      	ldr	r1, [pc, #48]	; (23174 <nm_drv_deinit+0xcc>)
   23142:	4b0d      	ldr	r3, [pc, #52]	; (23178 <nm_drv_deinit+0xd0>)
   23144:	0018      	movs	r0, r3
   23146:	4b0d      	ldr	r3, [pc, #52]	; (2317c <nm_drv_deinit+0xd4>)
   23148:	4798      	blx	r3
   2314a:	4b12      	ldr	r3, [pc, #72]	; (23194 <nm_drv_deinit+0xec>)
   2314c:	0018      	movs	r0, r3
   2314e:	4b0b      	ldr	r3, [pc, #44]	; (2317c <nm_drv_deinit+0xd4>)
   23150:	4798      	blx	r3
   23152:	4b0c      	ldr	r3, [pc, #48]	; (23184 <nm_drv_deinit+0xdc>)
   23154:	0018      	movs	r0, r3
   23156:	4b09      	ldr	r3, [pc, #36]	; (2317c <nm_drv_deinit+0xd4>)
   23158:	4798      	blx	r3
		goto ERR1;
   2315a:	e001      	b.n	23160 <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   2315c:	4b0e      	ldr	r3, [pc, #56]	; (23198 <nm_drv_deinit+0xf0>)
   2315e:	4798      	blx	r3
#endif

ERR1:
	return ret;
   23160:	230f      	movs	r3, #15
   23162:	18fb      	adds	r3, r7, r3
   23164:	781b      	ldrb	r3, [r3, #0]
   23166:	b25b      	sxtb	r3, r3
}
   23168:	0018      	movs	r0, r3
   2316a:	46bd      	mov	sp, r7
   2316c:	b005      	add	sp, #20
   2316e:	bd90      	pop	{r4, r7, pc}
   23170:	000229b9 	.word	0x000229b9
   23174:	00038c1c 	.word	0x00038c1c
   23178:	00038b40 	.word	0x00038b40
   2317c:	0001de29 	.word	0x0001de29
   23180:	00038bb0 	.word	0x00038bb0
   23184:	00038b70 	.word	0x00038b70
   23188:	00025dd9 	.word	0x00025dd9
   2318c:	00038bd0 	.word	0x00038bd0
   23190:	00022aad 	.word	0x00022aad
   23194:	00038bf4 	.word	0x00038bf4
   23198:	00024a7d 	.word	0x00024a7d

0002319c <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   2319c:	b580      	push	{r7, lr}
   2319e:	b086      	sub	sp, #24
   231a0:	af00      	add	r7, sp, #0
   231a2:	6078      	str	r0, [r7, #4]
   231a4:	000a      	movs	r2, r1
   231a6:	1cbb      	adds	r3, r7, #2
   231a8:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   231aa:	230c      	movs	r3, #12
   231ac:	18fb      	adds	r3, r7, r3
   231ae:	2200      	movs	r2, #0
   231b0:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   231b2:	230c      	movs	r3, #12
   231b4:	18fb      	adds	r3, r7, r3
   231b6:	687a      	ldr	r2, [r7, #4]
   231b8:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   231ba:	230c      	movs	r3, #12
   231bc:	18fb      	adds	r3, r7, r3
   231be:	1cba      	adds	r2, r7, #2
   231c0:	8812      	ldrh	r2, [r2, #0]
   231c2:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   231c4:	230c      	movs	r3, #12
   231c6:	18fb      	adds	r3, r7, r3
   231c8:	0019      	movs	r1, r3
   231ca:	2003      	movs	r0, #3
   231cc:	4b03      	ldr	r3, [pc, #12]	; (231dc <nmi_spi_read+0x40>)
   231ce:	4798      	blx	r3
   231d0:	0003      	movs	r3, r0
}
   231d2:	0018      	movs	r0, r3
   231d4:	46bd      	mov	sp, r7
   231d6:	b006      	add	sp, #24
   231d8:	bd80      	pop	{r7, pc}
   231da:	46c0      	nop			; (mov r8, r8)
   231dc:	00020a21 	.word	0x00020a21

000231e0 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   231e0:	b580      	push	{r7, lr}
   231e2:	b086      	sub	sp, #24
   231e4:	af00      	add	r7, sp, #0
   231e6:	6078      	str	r0, [r7, #4]
   231e8:	000a      	movs	r2, r1
   231ea:	1cbb      	adds	r3, r7, #2
   231ec:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   231ee:	230c      	movs	r3, #12
   231f0:	18fb      	adds	r3, r7, r3
   231f2:	687a      	ldr	r2, [r7, #4]
   231f4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   231f6:	230c      	movs	r3, #12
   231f8:	18fb      	adds	r3, r7, r3
   231fa:	2200      	movs	r2, #0
   231fc:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   231fe:	230c      	movs	r3, #12
   23200:	18fb      	adds	r3, r7, r3
   23202:	1cba      	adds	r2, r7, #2
   23204:	8812      	ldrh	r2, [r2, #0]
   23206:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   23208:	230c      	movs	r3, #12
   2320a:	18fb      	adds	r3, r7, r3
   2320c:	0019      	movs	r1, r3
   2320e:	2003      	movs	r0, #3
   23210:	4b03      	ldr	r3, [pc, #12]	; (23220 <nmi_spi_write+0x40>)
   23212:	4798      	blx	r3
   23214:	0003      	movs	r3, r0
}
   23216:	0018      	movs	r0, r3
   23218:	46bd      	mov	sp, r7
   2321a:	b006      	add	sp, #24
   2321c:	bd80      	pop	{r7, pc}
   2321e:	46c0      	nop			; (mov r8, r8)
   23220:	00020a21 	.word	0x00020a21

00023224 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   23224:	b580      	push	{r7, lr}
   23226:	b088      	sub	sp, #32
   23228:	af00      	add	r7, sp, #0
   2322a:	60f8      	str	r0, [r7, #12]
   2322c:	60b9      	str	r1, [r7, #8]
   2322e:	1dbb      	adds	r3, r7, #6
   23230:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   23232:	2314      	movs	r3, #20
   23234:	18fb      	adds	r3, r7, r3
   23236:	68fa      	ldr	r2, [r7, #12]
   23238:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   2323a:	2314      	movs	r3, #20
   2323c:	18fb      	adds	r3, r7, r3
   2323e:	68ba      	ldr	r2, [r7, #8]
   23240:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   23242:	2314      	movs	r3, #20
   23244:	18fb      	adds	r3, r7, r3
   23246:	1dba      	adds	r2, r7, #6
   23248:	8812      	ldrh	r2, [r2, #0]
   2324a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   2324c:	2314      	movs	r3, #20
   2324e:	18fb      	adds	r3, r7, r3
   23250:	0019      	movs	r1, r3
   23252:	2003      	movs	r0, #3
   23254:	4b03      	ldr	r3, [pc, #12]	; (23264 <nmi_spi_rw+0x40>)
   23256:	4798      	blx	r3
   23258:	0003      	movs	r3, r0
}
   2325a:	0018      	movs	r0, r3
   2325c:	46bd      	mov	sp, r7
   2325e:	b008      	add	sp, #32
   23260:	bd80      	pop	{r7, pc}
   23262:	46c0      	nop			; (mov r8, r8)
   23264:	00020a21 	.word	0x00020a21

00023268 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   23268:	b580      	push	{r7, lr}
   2326a:	b082      	sub	sp, #8
   2326c:	af00      	add	r7, sp, #0
   2326e:	0002      	movs	r2, r0
   23270:	1dfb      	adds	r3, r7, #7
   23272:	701a      	strb	r2, [r3, #0]
   23274:	1dbb      	adds	r3, r7, #6
   23276:	1c0a      	adds	r2, r1, #0
   23278:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   2327a:	1dfb      	adds	r3, r7, #7
   2327c:	781b      	ldrb	r3, [r3, #0]
   2327e:	005a      	lsls	r2, r3, #1
   23280:	1dbb      	adds	r3, r7, #6
   23282:	781b      	ldrb	r3, [r3, #0]
   23284:	4053      	eors	r3, r2
   23286:	4a03      	ldr	r2, [pc, #12]	; (23294 <crc7_byte+0x2c>)
   23288:	5cd3      	ldrb	r3, [r2, r3]
}
   2328a:	0018      	movs	r0, r3
   2328c:	46bd      	mov	sp, r7
   2328e:	b002      	add	sp, #8
   23290:	bd80      	pop	{r7, pc}
   23292:	46c0      	nop			; (mov r8, r8)
   23294:	00038c2c 	.word	0x00038c2c

00023298 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   23298:	b590      	push	{r4, r7, lr}
   2329a:	b085      	sub	sp, #20
   2329c:	af00      	add	r7, sp, #0
   2329e:	60b9      	str	r1, [r7, #8]
   232a0:	607a      	str	r2, [r7, #4]
   232a2:	230f      	movs	r3, #15
   232a4:	18fb      	adds	r3, r7, r3
   232a6:	1c02      	adds	r2, r0, #0
   232a8:	701a      	strb	r2, [r3, #0]
	while (len--)
   232aa:	e00e      	b.n	232ca <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   232ac:	68bb      	ldr	r3, [r7, #8]
   232ae:	1c5a      	adds	r2, r3, #1
   232b0:	60ba      	str	r2, [r7, #8]
   232b2:	781a      	ldrb	r2, [r3, #0]
   232b4:	230f      	movs	r3, #15
   232b6:	18fc      	adds	r4, r7, r3
   232b8:	230f      	movs	r3, #15
   232ba:	18fb      	adds	r3, r7, r3
   232bc:	781b      	ldrb	r3, [r3, #0]
   232be:	0011      	movs	r1, r2
   232c0:	0018      	movs	r0, r3
   232c2:	4b08      	ldr	r3, [pc, #32]	; (232e4 <crc7+0x4c>)
   232c4:	4798      	blx	r3
   232c6:	0003      	movs	r3, r0
   232c8:	7023      	strb	r3, [r4, #0]
	while (len--)
   232ca:	687b      	ldr	r3, [r7, #4]
   232cc:	1e5a      	subs	r2, r3, #1
   232ce:	607a      	str	r2, [r7, #4]
   232d0:	2b00      	cmp	r3, #0
   232d2:	d1eb      	bne.n	232ac <crc7+0x14>
	return crc;
   232d4:	230f      	movs	r3, #15
   232d6:	18fb      	adds	r3, r7, r3
   232d8:	781b      	ldrb	r3, [r3, #0]
}
   232da:	0018      	movs	r0, r3
   232dc:	46bd      	mov	sp, r7
   232de:	b005      	add	sp, #20
   232e0:	bd90      	pop	{r4, r7, pc}
   232e2:	46c0      	nop			; (mov r8, r8)
   232e4:	00023269 	.word	0x00023269

000232e8 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   232e8:	b590      	push	{r4, r7, lr}
   232ea:	b089      	sub	sp, #36	; 0x24
   232ec:	af00      	add	r7, sp, #0
   232ee:	60b9      	str	r1, [r7, #8]
   232f0:	607a      	str	r2, [r7, #4]
   232f2:	603b      	str	r3, [r7, #0]
   232f4:	230f      	movs	r3, #15
   232f6:	18fb      	adds	r3, r7, r3
   232f8:	1c02      	adds	r2, r0, #0
   232fa:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   232fc:	231f      	movs	r3, #31
   232fe:	18fb      	adds	r3, r7, r3
   23300:	2205      	movs	r2, #5
   23302:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   23304:	231e      	movs	r3, #30
   23306:	18fb      	adds	r3, r7, r3
   23308:	2201      	movs	r2, #1
   2330a:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   2330c:	2314      	movs	r3, #20
   2330e:	18fb      	adds	r3, r7, r3
   23310:	220f      	movs	r2, #15
   23312:	18ba      	adds	r2, r7, r2
   23314:	7812      	ldrb	r2, [r2, #0]
   23316:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   23318:	230f      	movs	r3, #15
   2331a:	18fb      	adds	r3, r7, r3
   2331c:	781b      	ldrb	r3, [r3, #0]
   2331e:	3bc1      	subs	r3, #193	; 0xc1
   23320:	2b0e      	cmp	r3, #14
   23322:	d900      	bls.n	23326 <spi_cmd+0x3e>
   23324:	e11b      	b.n	2355e <spi_cmd+0x276>
   23326:	009a      	lsls	r2, r3, #2
   23328:	4bb6      	ldr	r3, [pc, #728]	; (23604 <spi_cmd+0x31c>)
   2332a:	18d3      	adds	r3, r2, r3
   2332c:	681b      	ldr	r3, [r3, #0]
   2332e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   23330:	68bb      	ldr	r3, [r7, #8]
   23332:	0c1b      	lsrs	r3, r3, #16
   23334:	b2da      	uxtb	r2, r3
   23336:	2314      	movs	r3, #20
   23338:	18fb      	adds	r3, r7, r3
   2333a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   2333c:	68bb      	ldr	r3, [r7, #8]
   2333e:	0a1b      	lsrs	r3, r3, #8
   23340:	b2da      	uxtb	r2, r3
   23342:	2314      	movs	r3, #20
   23344:	18fb      	adds	r3, r7, r3
   23346:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   23348:	68bb      	ldr	r3, [r7, #8]
   2334a:	b2da      	uxtb	r2, r3
   2334c:	2314      	movs	r3, #20
   2334e:	18fb      	adds	r3, r7, r3
   23350:	70da      	strb	r2, [r3, #3]
		len = 5;
   23352:	231f      	movs	r3, #31
   23354:	18fb      	adds	r3, r7, r3
   23356:	2205      	movs	r2, #5
   23358:	701a      	strb	r2, [r3, #0]
		break;
   2335a:	e105      	b.n	23568 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   2335c:	68bb      	ldr	r3, [r7, #8]
   2335e:	0a1b      	lsrs	r3, r3, #8
   23360:	b2da      	uxtb	r2, r3
   23362:	2314      	movs	r3, #20
   23364:	18fb      	adds	r3, r7, r3
   23366:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   23368:	2330      	movs	r3, #48	; 0x30
   2336a:	18fb      	adds	r3, r7, r3
   2336c:	781b      	ldrb	r3, [r3, #0]
   2336e:	2b00      	cmp	r3, #0
   23370:	d009      	beq.n	23386 <spi_cmd+0x9e>
   23372:	2314      	movs	r3, #20
   23374:	18fb      	adds	r3, r7, r3
   23376:	785b      	ldrb	r3, [r3, #1]
   23378:	2280      	movs	r2, #128	; 0x80
   2337a:	4252      	negs	r2, r2
   2337c:	4313      	orrs	r3, r2
   2337e:	b2da      	uxtb	r2, r3
   23380:	2314      	movs	r3, #20
   23382:	18fb      	adds	r3, r7, r3
   23384:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   23386:	68bb      	ldr	r3, [r7, #8]
   23388:	b2da      	uxtb	r2, r3
   2338a:	2314      	movs	r3, #20
   2338c:	18fb      	adds	r3, r7, r3
   2338e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   23390:	2314      	movs	r3, #20
   23392:	18fb      	adds	r3, r7, r3
   23394:	2200      	movs	r2, #0
   23396:	70da      	strb	r2, [r3, #3]
		len = 5;
   23398:	231f      	movs	r3, #31
   2339a:	18fb      	adds	r3, r7, r3
   2339c:	2205      	movs	r2, #5
   2339e:	701a      	strb	r2, [r3, #0]
		break;
   233a0:	e0e2      	b.n	23568 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   233a2:	2314      	movs	r3, #20
   233a4:	18fb      	adds	r3, r7, r3
   233a6:	2200      	movs	r2, #0
   233a8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   233aa:	2314      	movs	r3, #20
   233ac:	18fb      	adds	r3, r7, r3
   233ae:	2200      	movs	r2, #0
   233b0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   233b2:	2314      	movs	r3, #20
   233b4:	18fb      	adds	r3, r7, r3
   233b6:	2200      	movs	r2, #0
   233b8:	70da      	strb	r2, [r3, #3]
		len = 5;
   233ba:	231f      	movs	r3, #31
   233bc:	18fb      	adds	r3, r7, r3
   233be:	2205      	movs	r2, #5
   233c0:	701a      	strb	r2, [r3, #0]
		break;
   233c2:	e0d1      	b.n	23568 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   233c4:	2314      	movs	r3, #20
   233c6:	18fb      	adds	r3, r7, r3
   233c8:	2200      	movs	r2, #0
   233ca:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   233cc:	2314      	movs	r3, #20
   233ce:	18fb      	adds	r3, r7, r3
   233d0:	2200      	movs	r2, #0
   233d2:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   233d4:	2314      	movs	r3, #20
   233d6:	18fb      	adds	r3, r7, r3
   233d8:	2200      	movs	r2, #0
   233da:	70da      	strb	r2, [r3, #3]
		len = 5;
   233dc:	231f      	movs	r3, #31
   233de:	18fb      	adds	r3, r7, r3
   233e0:	2205      	movs	r2, #5
   233e2:	701a      	strb	r2, [r3, #0]
		break;
   233e4:	e0c0      	b.n	23568 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   233e6:	2314      	movs	r3, #20
   233e8:	18fb      	adds	r3, r7, r3
   233ea:	22ff      	movs	r2, #255	; 0xff
   233ec:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   233ee:	2314      	movs	r3, #20
   233f0:	18fb      	adds	r3, r7, r3
   233f2:	22ff      	movs	r2, #255	; 0xff
   233f4:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   233f6:	2314      	movs	r3, #20
   233f8:	18fb      	adds	r3, r7, r3
   233fa:	22ff      	movs	r2, #255	; 0xff
   233fc:	70da      	strb	r2, [r3, #3]
		len = 5;
   233fe:	231f      	movs	r3, #31
   23400:	18fb      	adds	r3, r7, r3
   23402:	2205      	movs	r2, #5
   23404:	701a      	strb	r2, [r3, #0]
		break;
   23406:	e0af      	b.n	23568 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   23408:	68bb      	ldr	r3, [r7, #8]
   2340a:	0c1b      	lsrs	r3, r3, #16
   2340c:	b2da      	uxtb	r2, r3
   2340e:	2314      	movs	r3, #20
   23410:	18fb      	adds	r3, r7, r3
   23412:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23414:	68bb      	ldr	r3, [r7, #8]
   23416:	0a1b      	lsrs	r3, r3, #8
   23418:	b2da      	uxtb	r2, r3
   2341a:	2314      	movs	r3, #20
   2341c:	18fb      	adds	r3, r7, r3
   2341e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   23420:	68bb      	ldr	r3, [r7, #8]
   23422:	b2da      	uxtb	r2, r3
   23424:	2314      	movs	r3, #20
   23426:	18fb      	adds	r3, r7, r3
   23428:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   2342a:	683b      	ldr	r3, [r7, #0]
   2342c:	0a1b      	lsrs	r3, r3, #8
   2342e:	b2da      	uxtb	r2, r3
   23430:	2314      	movs	r3, #20
   23432:	18fb      	adds	r3, r7, r3
   23434:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   23436:	683b      	ldr	r3, [r7, #0]
   23438:	b2da      	uxtb	r2, r3
   2343a:	2314      	movs	r3, #20
   2343c:	18fb      	adds	r3, r7, r3
   2343e:	715a      	strb	r2, [r3, #5]
		len = 7;
   23440:	231f      	movs	r3, #31
   23442:	18fb      	adds	r3, r7, r3
   23444:	2207      	movs	r2, #7
   23446:	701a      	strb	r2, [r3, #0]
		break;
   23448:	e08e      	b.n	23568 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   2344a:	68bb      	ldr	r3, [r7, #8]
   2344c:	0c1b      	lsrs	r3, r3, #16
   2344e:	b2da      	uxtb	r2, r3
   23450:	2314      	movs	r3, #20
   23452:	18fb      	adds	r3, r7, r3
   23454:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23456:	68bb      	ldr	r3, [r7, #8]
   23458:	0a1b      	lsrs	r3, r3, #8
   2345a:	b2da      	uxtb	r2, r3
   2345c:	2314      	movs	r3, #20
   2345e:	18fb      	adds	r3, r7, r3
   23460:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   23462:	68bb      	ldr	r3, [r7, #8]
   23464:	b2da      	uxtb	r2, r3
   23466:	2314      	movs	r3, #20
   23468:	18fb      	adds	r3, r7, r3
   2346a:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   2346c:	683b      	ldr	r3, [r7, #0]
   2346e:	0c1b      	lsrs	r3, r3, #16
   23470:	b2da      	uxtb	r2, r3
   23472:	2314      	movs	r3, #20
   23474:	18fb      	adds	r3, r7, r3
   23476:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   23478:	683b      	ldr	r3, [r7, #0]
   2347a:	0a1b      	lsrs	r3, r3, #8
   2347c:	b2da      	uxtb	r2, r3
   2347e:	2314      	movs	r3, #20
   23480:	18fb      	adds	r3, r7, r3
   23482:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   23484:	683b      	ldr	r3, [r7, #0]
   23486:	b2da      	uxtb	r2, r3
   23488:	2314      	movs	r3, #20
   2348a:	18fb      	adds	r3, r7, r3
   2348c:	719a      	strb	r2, [r3, #6]
		len = 8;
   2348e:	231f      	movs	r3, #31
   23490:	18fb      	adds	r3, r7, r3
   23492:	2208      	movs	r2, #8
   23494:	701a      	strb	r2, [r3, #0]
		break;
   23496:	e067      	b.n	23568 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   23498:	68bb      	ldr	r3, [r7, #8]
   2349a:	0a1b      	lsrs	r3, r3, #8
   2349c:	b2da      	uxtb	r2, r3
   2349e:	2314      	movs	r3, #20
   234a0:	18fb      	adds	r3, r7, r3
   234a2:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   234a4:	2330      	movs	r3, #48	; 0x30
   234a6:	18fb      	adds	r3, r7, r3
   234a8:	781b      	ldrb	r3, [r3, #0]
   234aa:	2b00      	cmp	r3, #0
   234ac:	d009      	beq.n	234c2 <spi_cmd+0x1da>
   234ae:	2314      	movs	r3, #20
   234b0:	18fb      	adds	r3, r7, r3
   234b2:	785b      	ldrb	r3, [r3, #1]
   234b4:	2280      	movs	r2, #128	; 0x80
   234b6:	4252      	negs	r2, r2
   234b8:	4313      	orrs	r3, r2
   234ba:	b2da      	uxtb	r2, r3
   234bc:	2314      	movs	r3, #20
   234be:	18fb      	adds	r3, r7, r3
   234c0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   234c2:	68bb      	ldr	r3, [r7, #8]
   234c4:	b2da      	uxtb	r2, r3
   234c6:	2314      	movs	r3, #20
   234c8:	18fb      	adds	r3, r7, r3
   234ca:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   234cc:	687b      	ldr	r3, [r7, #4]
   234ce:	0e1b      	lsrs	r3, r3, #24
   234d0:	b2da      	uxtb	r2, r3
   234d2:	2314      	movs	r3, #20
   234d4:	18fb      	adds	r3, r7, r3
   234d6:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   234d8:	687b      	ldr	r3, [r7, #4]
   234da:	0c1b      	lsrs	r3, r3, #16
   234dc:	b2da      	uxtb	r2, r3
   234de:	2314      	movs	r3, #20
   234e0:	18fb      	adds	r3, r7, r3
   234e2:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   234e4:	687b      	ldr	r3, [r7, #4]
   234e6:	0a1b      	lsrs	r3, r3, #8
   234e8:	b2da      	uxtb	r2, r3
   234ea:	2314      	movs	r3, #20
   234ec:	18fb      	adds	r3, r7, r3
   234ee:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   234f0:	687b      	ldr	r3, [r7, #4]
   234f2:	b2da      	uxtb	r2, r3
   234f4:	2314      	movs	r3, #20
   234f6:	18fb      	adds	r3, r7, r3
   234f8:	719a      	strb	r2, [r3, #6]
		len = 8;
   234fa:	231f      	movs	r3, #31
   234fc:	18fb      	adds	r3, r7, r3
   234fe:	2208      	movs	r2, #8
   23500:	701a      	strb	r2, [r3, #0]
		break;
   23502:	e031      	b.n	23568 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   23504:	68bb      	ldr	r3, [r7, #8]
   23506:	0c1b      	lsrs	r3, r3, #16
   23508:	b2da      	uxtb	r2, r3
   2350a:	2314      	movs	r3, #20
   2350c:	18fb      	adds	r3, r7, r3
   2350e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23510:	68bb      	ldr	r3, [r7, #8]
   23512:	0a1b      	lsrs	r3, r3, #8
   23514:	b2da      	uxtb	r2, r3
   23516:	2314      	movs	r3, #20
   23518:	18fb      	adds	r3, r7, r3
   2351a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   2351c:	68bb      	ldr	r3, [r7, #8]
   2351e:	b2da      	uxtb	r2, r3
   23520:	2314      	movs	r3, #20
   23522:	18fb      	adds	r3, r7, r3
   23524:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   23526:	687b      	ldr	r3, [r7, #4]
   23528:	0e1b      	lsrs	r3, r3, #24
   2352a:	b2da      	uxtb	r2, r3
   2352c:	2314      	movs	r3, #20
   2352e:	18fb      	adds	r3, r7, r3
   23530:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   23532:	687b      	ldr	r3, [r7, #4]
   23534:	0c1b      	lsrs	r3, r3, #16
   23536:	b2da      	uxtb	r2, r3
   23538:	2314      	movs	r3, #20
   2353a:	18fb      	adds	r3, r7, r3
   2353c:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   2353e:	687b      	ldr	r3, [r7, #4]
   23540:	0a1b      	lsrs	r3, r3, #8
   23542:	b2da      	uxtb	r2, r3
   23544:	2314      	movs	r3, #20
   23546:	18fb      	adds	r3, r7, r3
   23548:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   2354a:	687b      	ldr	r3, [r7, #4]
   2354c:	b2da      	uxtb	r2, r3
   2354e:	2314      	movs	r3, #20
   23550:	18fb      	adds	r3, r7, r3
   23552:	71da      	strb	r2, [r3, #7]
		len = 9;
   23554:	231f      	movs	r3, #31
   23556:	18fb      	adds	r3, r7, r3
   23558:	2209      	movs	r2, #9
   2355a:	701a      	strb	r2, [r3, #0]
		break;
   2355c:	e004      	b.n	23568 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   2355e:	231e      	movs	r3, #30
   23560:	18fb      	adds	r3, r7, r3
   23562:	2200      	movs	r2, #0
   23564:	701a      	strb	r2, [r3, #0]
		break;
   23566:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   23568:	231e      	movs	r3, #30
   2356a:	18fb      	adds	r3, r7, r3
   2356c:	781b      	ldrb	r3, [r3, #0]
   2356e:	b25b      	sxtb	r3, r3
   23570:	2b00      	cmp	r3, #0
   23572:	d03f      	beq.n	235f4 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   23574:	4b24      	ldr	r3, [pc, #144]	; (23608 <spi_cmd+0x320>)
   23576:	781b      	ldrb	r3, [r3, #0]
   23578:	2b00      	cmp	r3, #0
   2357a:	d115      	bne.n	235a8 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   2357c:	231f      	movs	r3, #31
   2357e:	18fb      	adds	r3, r7, r3
   23580:	781b      	ldrb	r3, [r3, #0]
   23582:	1e5c      	subs	r4, r3, #1
   23584:	231f      	movs	r3, #31
   23586:	18fb      	adds	r3, r7, r3
   23588:	781b      	ldrb	r3, [r3, #0]
   2358a:	3b01      	subs	r3, #1
   2358c:	001a      	movs	r2, r3
   2358e:	2314      	movs	r3, #20
   23590:	18fb      	adds	r3, r7, r3
   23592:	0019      	movs	r1, r3
   23594:	207f      	movs	r0, #127	; 0x7f
   23596:	4b1d      	ldr	r3, [pc, #116]	; (2360c <spi_cmd+0x324>)
   23598:	4798      	blx	r3
   2359a:	0003      	movs	r3, r0
   2359c:	18db      	adds	r3, r3, r3
   2359e:	b2da      	uxtb	r2, r3
   235a0:	2314      	movs	r3, #20
   235a2:	18fb      	adds	r3, r7, r3
   235a4:	551a      	strb	r2, [r3, r4]
   235a6:	e006      	b.n	235b6 <spi_cmd+0x2ce>
		else
			len-=1;
   235a8:	231f      	movs	r3, #31
   235aa:	18fb      	adds	r3, r7, r3
   235ac:	221f      	movs	r2, #31
   235ae:	18ba      	adds	r2, r7, r2
   235b0:	7812      	ldrb	r2, [r2, #0]
   235b2:	3a01      	subs	r2, #1
   235b4:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   235b6:	231f      	movs	r3, #31
   235b8:	18fb      	adds	r3, r7, r3
   235ba:	781b      	ldrb	r3, [r3, #0]
   235bc:	b29a      	uxth	r2, r3
   235be:	2314      	movs	r3, #20
   235c0:	18fb      	adds	r3, r7, r3
   235c2:	0011      	movs	r1, r2
   235c4:	0018      	movs	r0, r3
   235c6:	4b12      	ldr	r3, [pc, #72]	; (23610 <spi_cmd+0x328>)
   235c8:	4798      	blx	r3
   235ca:	1e03      	subs	r3, r0, #0
   235cc:	d012      	beq.n	235f4 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   235ce:	2390      	movs	r3, #144	; 0x90
   235d0:	005a      	lsls	r2, r3, #1
   235d2:	4910      	ldr	r1, [pc, #64]	; (23614 <spi_cmd+0x32c>)
   235d4:	4b10      	ldr	r3, [pc, #64]	; (23618 <spi_cmd+0x330>)
   235d6:	0018      	movs	r0, r3
   235d8:	4b10      	ldr	r3, [pc, #64]	; (2361c <spi_cmd+0x334>)
   235da:	4798      	blx	r3
   235dc:	4b10      	ldr	r3, [pc, #64]	; (23620 <spi_cmd+0x338>)
   235de:	0018      	movs	r0, r3
   235e0:	4b0e      	ldr	r3, [pc, #56]	; (2361c <spi_cmd+0x334>)
   235e2:	4798      	blx	r3
   235e4:	4b0f      	ldr	r3, [pc, #60]	; (23624 <spi_cmd+0x33c>)
   235e6:	0018      	movs	r0, r3
   235e8:	4b0c      	ldr	r3, [pc, #48]	; (2361c <spi_cmd+0x334>)
   235ea:	4798      	blx	r3
			result = N_FAIL;
   235ec:	231e      	movs	r3, #30
   235ee:	18fb      	adds	r3, r7, r3
   235f0:	2200      	movs	r2, #0
   235f2:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   235f4:	231e      	movs	r3, #30
   235f6:	18fb      	adds	r3, r7, r3
   235f8:	781b      	ldrb	r3, [r3, #0]
   235fa:	b25b      	sxtb	r3, r3
}
   235fc:	0018      	movs	r0, r3
   235fe:	46bd      	mov	sp, r7
   23600:	b009      	add	sp, #36	; 0x24
   23602:	bd90      	pop	{r4, r7, pc}
   23604:	000392a4 	.word	0x000392a4
   23608:	200042ac 	.word	0x200042ac
   2360c:	00023299 	.word	0x00023299
   23610:	000231e1 	.word	0x000231e1
   23614:	0003931c 	.word	0x0003931c
   23618:	00038d2c 	.word	0x00038d2c
   2361c:	0001de29 	.word	0x0001de29
   23620:	00038d40 	.word	0x00038d40
   23624:	00038d6c 	.word	0x00038d6c

00023628 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   23628:	b590      	push	{r4, r7, lr}
   2362a:	b085      	sub	sp, #20
   2362c:	af00      	add	r7, sp, #0
   2362e:	0002      	movs	r2, r0
   23630:	1dfb      	adds	r3, r7, #7
   23632:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   23634:	230e      	movs	r3, #14
   23636:	18fb      	adds	r3, r7, r3
   23638:	2201      	movs	r2, #1
   2363a:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   2363c:	4b32      	ldr	r3, [pc, #200]	; (23708 <spi_data_rsp+0xe0>)
   2363e:	781b      	ldrb	r3, [r3, #0]
   23640:	2b00      	cmp	r3, #0
   23642:	d104      	bne.n	2364e <spi_data_rsp+0x26>
		len = 2;
   23644:	230f      	movs	r3, #15
   23646:	18fb      	adds	r3, r7, r3
   23648:	2202      	movs	r2, #2
   2364a:	701a      	strb	r2, [r3, #0]
   2364c:	e003      	b.n	23656 <spi_data_rsp+0x2e>
	else
		len = 3;
   2364e:	230f      	movs	r3, #15
   23650:	18fb      	adds	r3, r7, r3
   23652:	2203      	movs	r2, #3
   23654:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   23656:	230f      	movs	r3, #15
   23658:	18fb      	adds	r3, r7, r3
   2365a:	781b      	ldrb	r3, [r3, #0]
   2365c:	b29a      	uxth	r2, r3
   2365e:	2308      	movs	r3, #8
   23660:	18fb      	adds	r3, r7, r3
   23662:	0011      	movs	r1, r2
   23664:	0018      	movs	r0, r3
   23666:	4b29      	ldr	r3, [pc, #164]	; (2370c <spi_data_rsp+0xe4>)
   23668:	4798      	blx	r3
   2366a:	1e03      	subs	r3, r0, #0
   2366c:	d013      	beq.n	23696 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   2366e:	239a      	movs	r3, #154	; 0x9a
   23670:	005a      	lsls	r2, r3, #1
   23672:	4927      	ldr	r1, [pc, #156]	; (23710 <spi_data_rsp+0xe8>)
   23674:	4b27      	ldr	r3, [pc, #156]	; (23714 <spi_data_rsp+0xec>)
   23676:	0018      	movs	r0, r3
   23678:	4b27      	ldr	r3, [pc, #156]	; (23718 <spi_data_rsp+0xf0>)
   2367a:	4798      	blx	r3
   2367c:	4b27      	ldr	r3, [pc, #156]	; (2371c <spi_data_rsp+0xf4>)
   2367e:	0018      	movs	r0, r3
   23680:	4b25      	ldr	r3, [pc, #148]	; (23718 <spi_data_rsp+0xf0>)
   23682:	4798      	blx	r3
   23684:	4b26      	ldr	r3, [pc, #152]	; (23720 <spi_data_rsp+0xf8>)
   23686:	0018      	movs	r0, r3
   23688:	4b23      	ldr	r3, [pc, #140]	; (23718 <spi_data_rsp+0xf0>)
   2368a:	4798      	blx	r3
		result = N_FAIL;
   2368c:	230e      	movs	r3, #14
   2368e:	18fb      	adds	r3, r7, r3
   23690:	2200      	movs	r2, #0
   23692:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   23694:	e030      	b.n	236f8 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   23696:	230f      	movs	r3, #15
   23698:	18fb      	adds	r3, r7, r3
   2369a:	781b      	ldrb	r3, [r3, #0]
   2369c:	3b01      	subs	r3, #1
   2369e:	2208      	movs	r2, #8
   236a0:	18ba      	adds	r2, r7, r2
   236a2:	5cd3      	ldrb	r3, [r2, r3]
   236a4:	2b00      	cmp	r3, #0
   236a6:	d108      	bne.n	236ba <spi_data_rsp+0x92>
   236a8:	230f      	movs	r3, #15
   236aa:	18fb      	adds	r3, r7, r3
   236ac:	781b      	ldrb	r3, [r3, #0]
   236ae:	3b02      	subs	r3, #2
   236b0:	2208      	movs	r2, #8
   236b2:	18ba      	adds	r2, r7, r2
   236b4:	5cd3      	ldrb	r3, [r2, r3]
   236b6:	2bc3      	cmp	r3, #195	; 0xc3
   236b8:	d01e      	beq.n	236f8 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   236ba:	233c      	movs	r3, #60	; 0x3c
   236bc:	33ff      	adds	r3, #255	; 0xff
   236be:	001a      	movs	r2, r3
   236c0:	4913      	ldr	r1, [pc, #76]	; (23710 <spi_data_rsp+0xe8>)
   236c2:	4b14      	ldr	r3, [pc, #80]	; (23714 <spi_data_rsp+0xec>)
   236c4:	0018      	movs	r0, r3
   236c6:	4b14      	ldr	r3, [pc, #80]	; (23718 <spi_data_rsp+0xf0>)
   236c8:	4798      	blx	r3
   236ca:	2308      	movs	r3, #8
   236cc:	18fb      	adds	r3, r7, r3
   236ce:	781b      	ldrb	r3, [r3, #0]
   236d0:	0019      	movs	r1, r3
   236d2:	2308      	movs	r3, #8
   236d4:	18fb      	adds	r3, r7, r3
   236d6:	785b      	ldrb	r3, [r3, #1]
   236d8:	001a      	movs	r2, r3
   236da:	2308      	movs	r3, #8
   236dc:	18fb      	adds	r3, r7, r3
   236de:	789b      	ldrb	r3, [r3, #2]
   236e0:	4810      	ldr	r0, [pc, #64]	; (23724 <spi_data_rsp+0xfc>)
   236e2:	4c0d      	ldr	r4, [pc, #52]	; (23718 <spi_data_rsp+0xf0>)
   236e4:	47a0      	blx	r4
   236e6:	4b0e      	ldr	r3, [pc, #56]	; (23720 <spi_data_rsp+0xf8>)
   236e8:	0018      	movs	r0, r3
   236ea:	4b0b      	ldr	r3, [pc, #44]	; (23718 <spi_data_rsp+0xf0>)
   236ec:	4798      	blx	r3
		result = N_FAIL;
   236ee:	230e      	movs	r3, #14
   236f0:	18fb      	adds	r3, r7, r3
   236f2:	2200      	movs	r2, #0
   236f4:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   236f6:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   236f8:	230e      	movs	r3, #14
   236fa:	18fb      	adds	r3, r7, r3
   236fc:	781b      	ldrb	r3, [r3, #0]
   236fe:	b25b      	sxtb	r3, r3
}
   23700:	0018      	movs	r0, r3
   23702:	46bd      	mov	sp, r7
   23704:	b005      	add	sp, #20
   23706:	bd90      	pop	{r4, r7, pc}
   23708:	200042ac 	.word	0x200042ac
   2370c:	0002319d 	.word	0x0002319d
   23710:	00039324 	.word	0x00039324
   23714:	00038d2c 	.word	0x00038d2c
   23718:	0001de29 	.word	0x0001de29
   2371c:	00038d70 	.word	0x00038d70
   23720:	00038d6c 	.word	0x00038d6c
   23724:	00038d90 	.word	0x00038d90

00023728 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   23728:	b580      	push	{r7, lr}
   2372a:	b084      	sub	sp, #16
   2372c:	af00      	add	r7, sp, #0
   2372e:	0002      	movs	r2, r0
   23730:	1dfb      	adds	r3, r7, #7
   23732:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   23734:	230f      	movs	r3, #15
   23736:	18fb      	adds	r3, r7, r3
   23738:	2201      	movs	r2, #1
   2373a:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   2373c:	1dfb      	adds	r3, r7, #7
   2373e:	781b      	ldrb	r3, [r3, #0]
   23740:	2bcf      	cmp	r3, #207	; 0xcf
   23742:	d007      	beq.n	23754 <spi_cmd_rsp+0x2c>
   23744:	1dfb      	adds	r3, r7, #7
   23746:	781b      	ldrb	r3, [r3, #0]
   23748:	2bc5      	cmp	r3, #197	; 0xc5
   2374a:	d003      	beq.n	23754 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   2374c:	1dfb      	adds	r3, r7, #7
   2374e:	781b      	ldrb	r3, [r3, #0]
   23750:	2bc6      	cmp	r3, #198	; 0xc6
   23752:	d10c      	bne.n	2376e <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   23754:	230d      	movs	r3, #13
   23756:	18fb      	adds	r3, r7, r3
   23758:	2101      	movs	r1, #1
   2375a:	0018      	movs	r0, r3
   2375c:	4b3b      	ldr	r3, [pc, #236]	; (2384c <spi_cmd_rsp+0x124>)
   2375e:	4798      	blx	r3
   23760:	1e03      	subs	r3, r0, #0
   23762:	d004      	beq.n	2376e <spi_cmd_rsp+0x46>
			result = N_FAIL;
   23764:	230f      	movs	r3, #15
   23766:	18fb      	adds	r3, r7, r3
   23768:	2200      	movs	r2, #0
   2376a:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   2376c:	e065      	b.n	2383a <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   2376e:	230e      	movs	r3, #14
   23770:	18fb      	adds	r3, r7, r3
   23772:	220a      	movs	r2, #10
   23774:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   23776:	230d      	movs	r3, #13
   23778:	18fb      	adds	r3, r7, r3
   2377a:	2101      	movs	r1, #1
   2377c:	0018      	movs	r0, r3
   2377e:	4b33      	ldr	r3, [pc, #204]	; (2384c <spi_cmd_rsp+0x124>)
   23780:	4798      	blx	r3
   23782:	1e03      	subs	r3, r0, #0
   23784:	d014      	beq.n	237b0 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   23786:	235c      	movs	r3, #92	; 0x5c
   23788:	33ff      	adds	r3, #255	; 0xff
   2378a:	001a      	movs	r2, r3
   2378c:	4930      	ldr	r1, [pc, #192]	; (23850 <spi_cmd_rsp+0x128>)
   2378e:	4b31      	ldr	r3, [pc, #196]	; (23854 <spi_cmd_rsp+0x12c>)
   23790:	0018      	movs	r0, r3
   23792:	4b31      	ldr	r3, [pc, #196]	; (23858 <spi_cmd_rsp+0x130>)
   23794:	4798      	blx	r3
   23796:	4b31      	ldr	r3, [pc, #196]	; (2385c <spi_cmd_rsp+0x134>)
   23798:	0018      	movs	r0, r3
   2379a:	4b2f      	ldr	r3, [pc, #188]	; (23858 <spi_cmd_rsp+0x130>)
   2379c:	4798      	blx	r3
   2379e:	4b30      	ldr	r3, [pc, #192]	; (23860 <spi_cmd_rsp+0x138>)
   237a0:	0018      	movs	r0, r3
   237a2:	4b2d      	ldr	r3, [pc, #180]	; (23858 <spi_cmd_rsp+0x130>)
   237a4:	4798      	blx	r3
			result = N_FAIL;
   237a6:	230f      	movs	r3, #15
   237a8:	18fb      	adds	r3, r7, r3
   237aa:	2200      	movs	r2, #0
   237ac:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   237ae:	e044      	b.n	2383a <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   237b0:	230d      	movs	r3, #13
   237b2:	18fb      	adds	r3, r7, r3
   237b4:	781b      	ldrb	r3, [r3, #0]
   237b6:	1dfa      	adds	r2, r7, #7
   237b8:	7812      	ldrb	r2, [r2, #0]
   237ba:	429a      	cmp	r2, r3
   237bc:	d00b      	beq.n	237d6 <spi_cmd_rsp+0xae>
   237be:	230e      	movs	r3, #14
   237c0:	18fb      	adds	r3, r7, r3
   237c2:	781b      	ldrb	r3, [r3, #0]
   237c4:	b25b      	sxtb	r3, r3
   237c6:	b2da      	uxtb	r2, r3
   237c8:	3a01      	subs	r2, #1
   237ca:	b2d1      	uxtb	r1, r2
   237cc:	220e      	movs	r2, #14
   237ce:	18ba      	adds	r2, r7, r2
   237d0:	7011      	strb	r1, [r2, #0]
   237d2:	2b00      	cmp	r3, #0
   237d4:	dccf      	bgt.n	23776 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   237d6:	230e      	movs	r3, #14
   237d8:	18fb      	adds	r3, r7, r3
   237da:	220a      	movs	r2, #10
   237dc:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   237de:	230d      	movs	r3, #13
   237e0:	18fb      	adds	r3, r7, r3
   237e2:	2101      	movs	r1, #1
   237e4:	0018      	movs	r0, r3
   237e6:	4b19      	ldr	r3, [pc, #100]	; (2384c <spi_cmd_rsp+0x124>)
   237e8:	4798      	blx	r3
   237ea:	1e03      	subs	r3, r0, #0
   237ec:	d014      	beq.n	23818 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   237ee:	236a      	movs	r3, #106	; 0x6a
   237f0:	33ff      	adds	r3, #255	; 0xff
   237f2:	001a      	movs	r2, r3
   237f4:	4916      	ldr	r1, [pc, #88]	; (23850 <spi_cmd_rsp+0x128>)
   237f6:	4b17      	ldr	r3, [pc, #92]	; (23854 <spi_cmd_rsp+0x12c>)
   237f8:	0018      	movs	r0, r3
   237fa:	4b17      	ldr	r3, [pc, #92]	; (23858 <spi_cmd_rsp+0x130>)
   237fc:	4798      	blx	r3
   237fe:	4b17      	ldr	r3, [pc, #92]	; (2385c <spi_cmd_rsp+0x134>)
   23800:	0018      	movs	r0, r3
   23802:	4b15      	ldr	r3, [pc, #84]	; (23858 <spi_cmd_rsp+0x130>)
   23804:	4798      	blx	r3
   23806:	4b16      	ldr	r3, [pc, #88]	; (23860 <spi_cmd_rsp+0x138>)
   23808:	0018      	movs	r0, r3
   2380a:	4b13      	ldr	r3, [pc, #76]	; (23858 <spi_cmd_rsp+0x130>)
   2380c:	4798      	blx	r3
			result = N_FAIL;
   2380e:	230f      	movs	r3, #15
   23810:	18fb      	adds	r3, r7, r3
   23812:	2200      	movs	r2, #0
   23814:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   23816:	e010      	b.n	2383a <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   23818:	230d      	movs	r3, #13
   2381a:	18fb      	adds	r3, r7, r3
   2381c:	781b      	ldrb	r3, [r3, #0]
   2381e:	2b00      	cmp	r3, #0
   23820:	d00b      	beq.n	2383a <spi_cmd_rsp+0x112>
   23822:	230e      	movs	r3, #14
   23824:	18fb      	adds	r3, r7, r3
   23826:	781b      	ldrb	r3, [r3, #0]
   23828:	b25b      	sxtb	r3, r3
   2382a:	b2da      	uxtb	r2, r3
   2382c:	3a01      	subs	r2, #1
   2382e:	b2d1      	uxtb	r1, r2
   23830:	220e      	movs	r2, #14
   23832:	18ba      	adds	r2, r7, r2
   23834:	7011      	strb	r1, [r2, #0]
   23836:	2b00      	cmp	r3, #0
   23838:	dcd1      	bgt.n	237de <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   2383a:	230f      	movs	r3, #15
   2383c:	18fb      	adds	r3, r7, r3
   2383e:	781b      	ldrb	r3, [r3, #0]
   23840:	b25b      	sxtb	r3, r3
}
   23842:	0018      	movs	r0, r3
   23844:	46bd      	mov	sp, r7
   23846:	b004      	add	sp, #16
   23848:	bd80      	pop	{r7, pc}
   2384a:	46c0      	nop			; (mov r8, r8)
   2384c:	0002319d 	.word	0x0002319d
   23850:	00039334 	.word	0x00039334
   23854:	00038d2c 	.word	0x00038d2c
   23858:	0001de29 	.word	0x0001de29
   2385c:	00038dc0 	.word	0x00038dc0
   23860:	00038d6c 	.word	0x00038d6c

00023864 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   23864:	b590      	push	{r4, r7, lr}
   23866:	b09f      	sub	sp, #124	; 0x7c
   23868:	af00      	add	r7, sp, #0
   2386a:	60b9      	str	r1, [r7, #8]
   2386c:	607a      	str	r2, [r7, #4]
   2386e:	603b      	str	r3, [r7, #0]
   23870:	230f      	movs	r3, #15
   23872:	18fb      	adds	r3, r7, r3
   23874:	1c02      	adds	r2, r0, #0
   23876:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   23878:	2300      	movs	r3, #0
   2387a:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   2387c:	2301      	movs	r3, #1
   2387e:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   23880:	2338      	movs	r3, #56	; 0x38
   23882:	18fb      	adds	r3, r7, r3
   23884:	220f      	movs	r2, #15
   23886:	18ba      	adds	r2, r7, r2
   23888:	7812      	ldrb	r2, [r2, #0]
   2388a:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   2388c:	230f      	movs	r3, #15
   2388e:	18fb      	adds	r3, r7, r3
   23890:	781b      	ldrb	r3, [r3, #0]
   23892:	3bc1      	subs	r3, #193	; 0xc1
   23894:	2b0e      	cmp	r3, #14
   23896:	d900      	bls.n	2389a <spi_cmd_complete+0x36>
   23898:	e103      	b.n	23aa2 <spi_cmd_complete+0x23e>
   2389a:	009a      	lsls	r2, r3, #2
   2389c:	4bd1      	ldr	r3, [pc, #836]	; (23be4 <spi_cmd_complete+0x380>)
   2389e:	18d3      	adds	r3, r2, r3
   238a0:	681b      	ldr	r3, [r3, #0]
   238a2:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   238a4:	68bb      	ldr	r3, [r7, #8]
   238a6:	0c1b      	lsrs	r3, r3, #16
   238a8:	b2da      	uxtb	r2, r3
   238aa:	2338      	movs	r3, #56	; 0x38
   238ac:	18fb      	adds	r3, r7, r3
   238ae:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   238b0:	68bb      	ldr	r3, [r7, #8]
   238b2:	0a1b      	lsrs	r3, r3, #8
   238b4:	b2da      	uxtb	r2, r3
   238b6:	2338      	movs	r3, #56	; 0x38
   238b8:	18fb      	adds	r3, r7, r3
   238ba:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   238bc:	68bb      	ldr	r3, [r7, #8]
   238be:	b2da      	uxtb	r2, r3
   238c0:	2338      	movs	r3, #56	; 0x38
   238c2:	18fb      	adds	r3, r7, r3
   238c4:	70da      	strb	r2, [r3, #3]
		len = 5;
   238c6:	2305      	movs	r3, #5
   238c8:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   238ca:	e0ed      	b.n	23aa8 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   238cc:	68bb      	ldr	r3, [r7, #8]
   238ce:	0a1b      	lsrs	r3, r3, #8
   238d0:	b2da      	uxtb	r2, r3
   238d2:	2338      	movs	r3, #56	; 0x38
   238d4:	18fb      	adds	r3, r7, r3
   238d6:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   238d8:	2388      	movs	r3, #136	; 0x88
   238da:	18fb      	adds	r3, r7, r3
   238dc:	781b      	ldrb	r3, [r3, #0]
   238de:	2b01      	cmp	r3, #1
   238e0:	d109      	bne.n	238f6 <spi_cmd_complete+0x92>
   238e2:	2338      	movs	r3, #56	; 0x38
   238e4:	18fb      	adds	r3, r7, r3
   238e6:	785b      	ldrb	r3, [r3, #1]
   238e8:	2280      	movs	r2, #128	; 0x80
   238ea:	4252      	negs	r2, r2
   238ec:	4313      	orrs	r3, r2
   238ee:	b2da      	uxtb	r2, r3
   238f0:	2338      	movs	r3, #56	; 0x38
   238f2:	18fb      	adds	r3, r7, r3
   238f4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   238f6:	68bb      	ldr	r3, [r7, #8]
   238f8:	b2da      	uxtb	r2, r3
   238fa:	2338      	movs	r3, #56	; 0x38
   238fc:	18fb      	adds	r3, r7, r3
   238fe:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   23900:	2338      	movs	r3, #56	; 0x38
   23902:	18fb      	adds	r3, r7, r3
   23904:	2200      	movs	r2, #0
   23906:	70da      	strb	r2, [r3, #3]
		len = 5;
   23908:	2305      	movs	r3, #5
   2390a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2390c:	e0cc      	b.n	23aa8 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   2390e:	2338      	movs	r3, #56	; 0x38
   23910:	18fb      	adds	r3, r7, r3
   23912:	2200      	movs	r2, #0
   23914:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   23916:	2338      	movs	r3, #56	; 0x38
   23918:	18fb      	adds	r3, r7, r3
   2391a:	2200      	movs	r2, #0
   2391c:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   2391e:	2338      	movs	r3, #56	; 0x38
   23920:	18fb      	adds	r3, r7, r3
   23922:	2200      	movs	r2, #0
   23924:	70da      	strb	r2, [r3, #3]
		len = 5;
   23926:	2305      	movs	r3, #5
   23928:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2392a:	e0bd      	b.n	23aa8 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   2392c:	2338      	movs	r3, #56	; 0x38
   2392e:	18fb      	adds	r3, r7, r3
   23930:	2200      	movs	r2, #0
   23932:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   23934:	2338      	movs	r3, #56	; 0x38
   23936:	18fb      	adds	r3, r7, r3
   23938:	2200      	movs	r2, #0
   2393a:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   2393c:	2338      	movs	r3, #56	; 0x38
   2393e:	18fb      	adds	r3, r7, r3
   23940:	2200      	movs	r2, #0
   23942:	70da      	strb	r2, [r3, #3]
		len = 5;
   23944:	2305      	movs	r3, #5
   23946:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23948:	e0ae      	b.n	23aa8 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   2394a:	2338      	movs	r3, #56	; 0x38
   2394c:	18fb      	adds	r3, r7, r3
   2394e:	22ff      	movs	r2, #255	; 0xff
   23950:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   23952:	2338      	movs	r3, #56	; 0x38
   23954:	18fb      	adds	r3, r7, r3
   23956:	22ff      	movs	r2, #255	; 0xff
   23958:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   2395a:	2338      	movs	r3, #56	; 0x38
   2395c:	18fb      	adds	r3, r7, r3
   2395e:	22ff      	movs	r2, #255	; 0xff
   23960:	70da      	strb	r2, [r3, #3]
		len = 5;
   23962:	2305      	movs	r3, #5
   23964:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23966:	e09f      	b.n	23aa8 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   23968:	68bb      	ldr	r3, [r7, #8]
   2396a:	0c1b      	lsrs	r3, r3, #16
   2396c:	b2da      	uxtb	r2, r3
   2396e:	2338      	movs	r3, #56	; 0x38
   23970:	18fb      	adds	r3, r7, r3
   23972:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23974:	68bb      	ldr	r3, [r7, #8]
   23976:	0a1b      	lsrs	r3, r3, #8
   23978:	b2da      	uxtb	r2, r3
   2397a:	2338      	movs	r3, #56	; 0x38
   2397c:	18fb      	adds	r3, r7, r3
   2397e:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23980:	68bb      	ldr	r3, [r7, #8]
   23982:	b2da      	uxtb	r2, r3
   23984:	2338      	movs	r3, #56	; 0x38
   23986:	18fb      	adds	r3, r7, r3
   23988:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   2398a:	683b      	ldr	r3, [r7, #0]
   2398c:	0a1b      	lsrs	r3, r3, #8
   2398e:	b2da      	uxtb	r2, r3
   23990:	2338      	movs	r3, #56	; 0x38
   23992:	18fb      	adds	r3, r7, r3
   23994:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   23996:	683b      	ldr	r3, [r7, #0]
   23998:	b2da      	uxtb	r2, r3
   2399a:	2338      	movs	r3, #56	; 0x38
   2399c:	18fb      	adds	r3, r7, r3
   2399e:	715a      	strb	r2, [r3, #5]
		len = 7;
   239a0:	2307      	movs	r3, #7
   239a2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   239a4:	e080      	b.n	23aa8 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   239a6:	68bb      	ldr	r3, [r7, #8]
   239a8:	0c1b      	lsrs	r3, r3, #16
   239aa:	b2da      	uxtb	r2, r3
   239ac:	2338      	movs	r3, #56	; 0x38
   239ae:	18fb      	adds	r3, r7, r3
   239b0:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   239b2:	68bb      	ldr	r3, [r7, #8]
   239b4:	0a1b      	lsrs	r3, r3, #8
   239b6:	b2da      	uxtb	r2, r3
   239b8:	2338      	movs	r3, #56	; 0x38
   239ba:	18fb      	adds	r3, r7, r3
   239bc:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   239be:	68bb      	ldr	r3, [r7, #8]
   239c0:	b2da      	uxtb	r2, r3
   239c2:	2338      	movs	r3, #56	; 0x38
   239c4:	18fb      	adds	r3, r7, r3
   239c6:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   239c8:	683b      	ldr	r3, [r7, #0]
   239ca:	0c1b      	lsrs	r3, r3, #16
   239cc:	b2da      	uxtb	r2, r3
   239ce:	2338      	movs	r3, #56	; 0x38
   239d0:	18fb      	adds	r3, r7, r3
   239d2:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   239d4:	683b      	ldr	r3, [r7, #0]
   239d6:	0a1b      	lsrs	r3, r3, #8
   239d8:	b2da      	uxtb	r2, r3
   239da:	2338      	movs	r3, #56	; 0x38
   239dc:	18fb      	adds	r3, r7, r3
   239de:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   239e0:	683b      	ldr	r3, [r7, #0]
   239e2:	b2da      	uxtb	r2, r3
   239e4:	2338      	movs	r3, #56	; 0x38
   239e6:	18fb      	adds	r3, r7, r3
   239e8:	719a      	strb	r2, [r3, #6]
		len = 8;
   239ea:	2308      	movs	r3, #8
   239ec:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   239ee:	e05b      	b.n	23aa8 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   239f0:	68bb      	ldr	r3, [r7, #8]
   239f2:	0a1b      	lsrs	r3, r3, #8
   239f4:	b2da      	uxtb	r2, r3
   239f6:	2338      	movs	r3, #56	; 0x38
   239f8:	18fb      	adds	r3, r7, r3
   239fa:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   239fc:	2388      	movs	r3, #136	; 0x88
   239fe:	18fb      	adds	r3, r7, r3
   23a00:	781b      	ldrb	r3, [r3, #0]
   23a02:	2b01      	cmp	r3, #1
   23a04:	d109      	bne.n	23a1a <spi_cmd_complete+0x1b6>
   23a06:	2338      	movs	r3, #56	; 0x38
   23a08:	18fb      	adds	r3, r7, r3
   23a0a:	785b      	ldrb	r3, [r3, #1]
   23a0c:	2280      	movs	r2, #128	; 0x80
   23a0e:	4252      	negs	r2, r2
   23a10:	4313      	orrs	r3, r2
   23a12:	b2da      	uxtb	r2, r3
   23a14:	2338      	movs	r3, #56	; 0x38
   23a16:	18fb      	adds	r3, r7, r3
   23a18:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   23a1a:	68bb      	ldr	r3, [r7, #8]
   23a1c:	b2da      	uxtb	r2, r3
   23a1e:	2338      	movs	r3, #56	; 0x38
   23a20:	18fb      	adds	r3, r7, r3
   23a22:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   23a24:	687b      	ldr	r3, [r7, #4]
   23a26:	78da      	ldrb	r2, [r3, #3]
   23a28:	2338      	movs	r3, #56	; 0x38
   23a2a:	18fb      	adds	r3, r7, r3
   23a2c:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   23a2e:	687b      	ldr	r3, [r7, #4]
   23a30:	789a      	ldrb	r2, [r3, #2]
   23a32:	2338      	movs	r3, #56	; 0x38
   23a34:	18fb      	adds	r3, r7, r3
   23a36:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   23a38:	687b      	ldr	r3, [r7, #4]
   23a3a:	785a      	ldrb	r2, [r3, #1]
   23a3c:	2338      	movs	r3, #56	; 0x38
   23a3e:	18fb      	adds	r3, r7, r3
   23a40:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   23a42:	687b      	ldr	r3, [r7, #4]
   23a44:	781a      	ldrb	r2, [r3, #0]
   23a46:	2338      	movs	r3, #56	; 0x38
   23a48:	18fb      	adds	r3, r7, r3
   23a4a:	719a      	strb	r2, [r3, #6]
		len = 8;
   23a4c:	2308      	movs	r3, #8
   23a4e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23a50:	e02a      	b.n	23aa8 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   23a52:	68bb      	ldr	r3, [r7, #8]
   23a54:	0c1b      	lsrs	r3, r3, #16
   23a56:	b2da      	uxtb	r2, r3
   23a58:	2338      	movs	r3, #56	; 0x38
   23a5a:	18fb      	adds	r3, r7, r3
   23a5c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23a5e:	68bb      	ldr	r3, [r7, #8]
   23a60:	0a1b      	lsrs	r3, r3, #8
   23a62:	b2da      	uxtb	r2, r3
   23a64:	2338      	movs	r3, #56	; 0x38
   23a66:	18fb      	adds	r3, r7, r3
   23a68:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   23a6a:	68bb      	ldr	r3, [r7, #8]
   23a6c:	b2da      	uxtb	r2, r3
   23a6e:	2338      	movs	r3, #56	; 0x38
   23a70:	18fb      	adds	r3, r7, r3
   23a72:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   23a74:	687b      	ldr	r3, [r7, #4]
   23a76:	78da      	ldrb	r2, [r3, #3]
   23a78:	2338      	movs	r3, #56	; 0x38
   23a7a:	18fb      	adds	r3, r7, r3
   23a7c:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   23a7e:	687b      	ldr	r3, [r7, #4]
   23a80:	789a      	ldrb	r2, [r3, #2]
   23a82:	2338      	movs	r3, #56	; 0x38
   23a84:	18fb      	adds	r3, r7, r3
   23a86:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   23a88:	687b      	ldr	r3, [r7, #4]
   23a8a:	785a      	ldrb	r2, [r3, #1]
   23a8c:	2338      	movs	r3, #56	; 0x38
   23a8e:	18fb      	adds	r3, r7, r3
   23a90:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   23a92:	687b      	ldr	r3, [r7, #4]
   23a94:	781a      	ldrb	r2, [r3, #0]
   23a96:	2338      	movs	r3, #56	; 0x38
   23a98:	18fb      	adds	r3, r7, r3
   23a9a:	71da      	strb	r2, [r3, #7]
		len = 9;
   23a9c:	2309      	movs	r3, #9
   23a9e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23aa0:	e002      	b.n	23aa8 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   23aa2:	2300      	movs	r3, #0
   23aa4:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   23aa6:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   23aa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23aaa:	2b01      	cmp	r3, #1
   23aac:	d001      	beq.n	23ab2 <spi_cmd_complete+0x24e>
		return result;
   23aae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23ab0:	e33a      	b.n	24128 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   23ab2:	4b4d      	ldr	r3, [pc, #308]	; (23be8 <spi_cmd_complete+0x384>)
   23ab4:	781b      	ldrb	r3, [r3, #0]
   23ab6:	2b00      	cmp	r3, #0
   23ab8:	d111      	bne.n	23ade <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   23aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23abc:	1e5c      	subs	r4, r3, #1
   23abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23ac0:	3b01      	subs	r3, #1
   23ac2:	001a      	movs	r2, r3
   23ac4:	2338      	movs	r3, #56	; 0x38
   23ac6:	18fb      	adds	r3, r7, r3
   23ac8:	0019      	movs	r1, r3
   23aca:	207f      	movs	r0, #127	; 0x7f
   23acc:	4b47      	ldr	r3, [pc, #284]	; (23bec <spi_cmd_complete+0x388>)
   23ace:	4798      	blx	r3
   23ad0:	0003      	movs	r3, r0
   23ad2:	18db      	adds	r3, r3, r3
   23ad4:	b2da      	uxtb	r2, r3
   23ad6:	2338      	movs	r3, #56	; 0x38
   23ad8:	18fb      	adds	r3, r7, r3
   23ada:	551a      	strb	r2, [r3, r4]
   23adc:	e002      	b.n	23ae4 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   23ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23ae0:	3b01      	subs	r3, #1
   23ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   23ae4:	230f      	movs	r3, #15
   23ae6:	18fb      	adds	r3, r7, r3
   23ae8:	781b      	ldrb	r3, [r3, #0]
   23aea:	2bcf      	cmp	r3, #207	; 0xcf
   23aec:	d009      	beq.n	23b02 <spi_cmd_complete+0x29e>
   23aee:	230f      	movs	r3, #15
   23af0:	18fb      	adds	r3, r7, r3
   23af2:	781b      	ldrb	r3, [r3, #0]
   23af4:	2bc5      	cmp	r3, #197	; 0xc5
   23af6:	d004      	beq.n	23b02 <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   23af8:	230f      	movs	r3, #15
   23afa:	18fb      	adds	r3, r7, r3
   23afc:	781b      	ldrb	r3, [r3, #0]
   23afe:	2bc6      	cmp	r3, #198	; 0xc6
   23b00:	d103      	bne.n	23b0a <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   23b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23b04:	3306      	adds	r3, #6
   23b06:	673b      	str	r3, [r7, #112]	; 0x70
   23b08:	e018      	b.n	23b3c <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   23b0a:	230f      	movs	r3, #15
   23b0c:	18fb      	adds	r3, r7, r3
   23b0e:	781b      	ldrb	r3, [r3, #0]
   23b10:	2bc4      	cmp	r3, #196	; 0xc4
   23b12:	d004      	beq.n	23b1e <spi_cmd_complete+0x2ba>
   23b14:	230f      	movs	r3, #15
   23b16:	18fb      	adds	r3, r7, r3
   23b18:	781b      	ldrb	r3, [r3, #0]
   23b1a:	2bca      	cmp	r3, #202	; 0xca
   23b1c:	d10b      	bne.n	23b36 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   23b1e:	4b32      	ldr	r3, [pc, #200]	; (23be8 <spi_cmd_complete+0x384>)
   23b20:	781b      	ldrb	r3, [r3, #0]
   23b22:	2b00      	cmp	r3, #0
   23b24:	d103      	bne.n	23b2e <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   23b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23b28:	330c      	adds	r3, #12
   23b2a:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   23b2c:	e006      	b.n	23b3c <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   23b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23b30:	330a      	adds	r3, #10
   23b32:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   23b34:	e002      	b.n	23b3c <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   23b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23b38:	3305      	adds	r3, #5
   23b3a:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   23b3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23b3e:	2b20      	cmp	r3, #32
   23b40:	d914      	bls.n	23b6c <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   23b42:	23f7      	movs	r3, #247	; 0xf7
   23b44:	005a      	lsls	r2, r3, #1
   23b46:	492a      	ldr	r1, [pc, #168]	; (23bf0 <spi_cmd_complete+0x38c>)
   23b48:	4b2a      	ldr	r3, [pc, #168]	; (23bf4 <spi_cmd_complete+0x390>)
   23b4a:	0018      	movs	r0, r3
   23b4c:	4b2a      	ldr	r3, [pc, #168]	; (23bf8 <spi_cmd_complete+0x394>)
   23b4e:	4798      	blx	r3
   23b50:	6f39      	ldr	r1, [r7, #112]	; 0x70
   23b52:	4b2a      	ldr	r3, [pc, #168]	; (23bfc <spi_cmd_complete+0x398>)
   23b54:	2220      	movs	r2, #32
   23b56:	0018      	movs	r0, r3
   23b58:	4b27      	ldr	r3, [pc, #156]	; (23bf8 <spi_cmd_complete+0x394>)
   23b5a:	4798      	blx	r3
   23b5c:	4b28      	ldr	r3, [pc, #160]	; (23c00 <spi_cmd_complete+0x39c>)
   23b5e:	0018      	movs	r0, r3
   23b60:	4b25      	ldr	r3, [pc, #148]	; (23bf8 <spi_cmd_complete+0x394>)
   23b62:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   23b64:	2300      	movs	r3, #0
   23b66:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23b68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23b6a:	e2dd      	b.n	24128 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   23b6c:	2377      	movs	r3, #119	; 0x77
   23b6e:	18fb      	adds	r3, r7, r3
   23b70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   23b72:	701a      	strb	r2, [r3, #0]
   23b74:	e00d      	b.n	23b92 <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   23b76:	2377      	movs	r3, #119	; 0x77
   23b78:	18fb      	adds	r3, r7, r3
   23b7a:	781b      	ldrb	r3, [r3, #0]
   23b7c:	2238      	movs	r2, #56	; 0x38
   23b7e:	18ba      	adds	r2, r7, r2
   23b80:	2100      	movs	r1, #0
   23b82:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   23b84:	2377      	movs	r3, #119	; 0x77
   23b86:	18fb      	adds	r3, r7, r3
   23b88:	781a      	ldrb	r2, [r3, #0]
   23b8a:	2377      	movs	r3, #119	; 0x77
   23b8c:	18fb      	adds	r3, r7, r3
   23b8e:	3201      	adds	r2, #1
   23b90:	701a      	strb	r2, [r3, #0]
   23b92:	2377      	movs	r3, #119	; 0x77
   23b94:	18fb      	adds	r3, r7, r3
   23b96:	781a      	ldrb	r2, [r3, #0]
   23b98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23b9a:	429a      	cmp	r2, r3
   23b9c:	d3eb      	bcc.n	23b76 <spi_cmd_complete+0x312>
	}
	rix = len;
   23b9e:	2376      	movs	r3, #118	; 0x76
   23ba0:	18fb      	adds	r3, r7, r3
   23ba2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   23ba4:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   23ba6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23ba8:	b29a      	uxth	r2, r3
   23baa:	2318      	movs	r3, #24
   23bac:	18f9      	adds	r1, r7, r3
   23bae:	2338      	movs	r3, #56	; 0x38
   23bb0:	18fb      	adds	r3, r7, r3
   23bb2:	0018      	movs	r0, r3
   23bb4:	4b13      	ldr	r3, [pc, #76]	; (23c04 <spi_cmd_complete+0x3a0>)
   23bb6:	4798      	blx	r3
   23bb8:	1e03      	subs	r3, r0, #0
   23bba:	d027      	beq.n	23c0c <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   23bbc:	23fa      	movs	r3, #250	; 0xfa
   23bbe:	33ff      	adds	r3, #255	; 0xff
   23bc0:	001a      	movs	r2, r3
   23bc2:	490b      	ldr	r1, [pc, #44]	; (23bf0 <spi_cmd_complete+0x38c>)
   23bc4:	4b0b      	ldr	r3, [pc, #44]	; (23bf4 <spi_cmd_complete+0x390>)
   23bc6:	0018      	movs	r0, r3
   23bc8:	4b0b      	ldr	r3, [pc, #44]	; (23bf8 <spi_cmd_complete+0x394>)
   23bca:	4798      	blx	r3
   23bcc:	4b0e      	ldr	r3, [pc, #56]	; (23c08 <spi_cmd_complete+0x3a4>)
   23bce:	0018      	movs	r0, r3
   23bd0:	4b09      	ldr	r3, [pc, #36]	; (23bf8 <spi_cmd_complete+0x394>)
   23bd2:	4798      	blx	r3
   23bd4:	4b0a      	ldr	r3, [pc, #40]	; (23c00 <spi_cmd_complete+0x39c>)
   23bd6:	0018      	movs	r0, r3
   23bd8:	4b07      	ldr	r3, [pc, #28]	; (23bf8 <spi_cmd_complete+0x394>)
   23bda:	4798      	blx	r3
		result = N_FAIL;
   23bdc:	2300      	movs	r3, #0
   23bde:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23be0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23be2:	e2a1      	b.n	24128 <spi_cmd_complete+0x8c4>
   23be4:	000392e0 	.word	0x000392e0
   23be8:	200042ac 	.word	0x200042ac
   23bec:	00023299 	.word	0x00023299
   23bf0:	00039340 	.word	0x00039340
   23bf4:	00038d2c 	.word	0x00038d2c
   23bf8:	0001de29 	.word	0x0001de29
   23bfc:	00038df4 	.word	0x00038df4
   23c00:	00038d6c 	.word	0x00038d6c
   23c04:	00023225 	.word	0x00023225
   23c08:	00038d40 	.word	0x00038d40
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   23c0c:	230f      	movs	r3, #15
   23c0e:	18fb      	adds	r3, r7, r3
   23c10:	781b      	ldrb	r3, [r3, #0]
   23c12:	2bcf      	cmp	r3, #207	; 0xcf
   23c14:	d009      	beq.n	23c2a <spi_cmd_complete+0x3c6>
   23c16:	230f      	movs	r3, #15
   23c18:	18fb      	adds	r3, r7, r3
   23c1a:	781b      	ldrb	r3, [r3, #0]
   23c1c:	2bc5      	cmp	r3, #197	; 0xc5
   23c1e:	d004      	beq.n	23c2a <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   23c20:	230f      	movs	r3, #15
   23c22:	18fb      	adds	r3, r7, r3
   23c24:	781b      	ldrb	r3, [r3, #0]
   23c26:	2bc6      	cmp	r3, #198	; 0xc6
   23c28:	d106      	bne.n	23c38 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   23c2a:	2376      	movs	r3, #118	; 0x76
   23c2c:	18fb      	adds	r3, r7, r3
   23c2e:	781a      	ldrb	r2, [r3, #0]
   23c30:	2376      	movs	r3, #118	; 0x76
   23c32:	18fb      	adds	r3, r7, r3
   23c34:	3201      	adds	r2, #1
   23c36:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   23c38:	2376      	movs	r3, #118	; 0x76
   23c3a:	18fb      	adds	r3, r7, r3
   23c3c:	781b      	ldrb	r3, [r3, #0]
   23c3e:	2276      	movs	r2, #118	; 0x76
   23c40:	18ba      	adds	r2, r7, r2
   23c42:	1c59      	adds	r1, r3, #1
   23c44:	7011      	strb	r1, [r2, #0]
   23c46:	001a      	movs	r2, r3
   23c48:	2318      	movs	r3, #24
   23c4a:	18fb      	adds	r3, r7, r3
   23c4c:	5c9a      	ldrb	r2, [r3, r2]
   23c4e:	2317      	movs	r3, #23
   23c50:	18fb      	adds	r3, r7, r3
   23c52:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   23c54:	2317      	movs	r3, #23
   23c56:	18fb      	adds	r3, r7, r3
   23c58:	781b      	ldrb	r3, [r3, #0]
   23c5a:	220f      	movs	r2, #15
   23c5c:	18ba      	adds	r2, r7, r2
   23c5e:	7812      	ldrb	r2, [r2, #0]
   23c60:	429a      	cmp	r2, r3
   23c62:	d018      	beq.n	23c96 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   23c64:	4add      	ldr	r2, [pc, #884]	; (23fdc <spi_cmd_complete+0x778>)
   23c66:	49de      	ldr	r1, [pc, #888]	; (23fe0 <spi_cmd_complete+0x77c>)
   23c68:	4bde      	ldr	r3, [pc, #888]	; (23fe4 <spi_cmd_complete+0x780>)
   23c6a:	0018      	movs	r0, r3
   23c6c:	4bde      	ldr	r3, [pc, #888]	; (23fe8 <spi_cmd_complete+0x784>)
   23c6e:	4798      	blx	r3
   23c70:	230f      	movs	r3, #15
   23c72:	18fb      	adds	r3, r7, r3
   23c74:	7819      	ldrb	r1, [r3, #0]
   23c76:	2317      	movs	r3, #23
   23c78:	18fb      	adds	r3, r7, r3
   23c7a:	781b      	ldrb	r3, [r3, #0]
   23c7c:	001a      	movs	r2, r3
   23c7e:	4bdb      	ldr	r3, [pc, #876]	; (23fec <spi_cmd_complete+0x788>)
   23c80:	0018      	movs	r0, r3
   23c82:	4bd9      	ldr	r3, [pc, #868]	; (23fe8 <spi_cmd_complete+0x784>)
   23c84:	4798      	blx	r3
   23c86:	4bda      	ldr	r3, [pc, #872]	; (23ff0 <spi_cmd_complete+0x78c>)
   23c88:	0018      	movs	r0, r3
   23c8a:	4bd7      	ldr	r3, [pc, #860]	; (23fe8 <spi_cmd_complete+0x784>)
   23c8c:	4798      	blx	r3
		result = N_FAIL;
   23c8e:	2300      	movs	r3, #0
   23c90:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23c92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23c94:	e248      	b.n	24128 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   23c96:	2376      	movs	r3, #118	; 0x76
   23c98:	18fb      	adds	r3, r7, r3
   23c9a:	781b      	ldrb	r3, [r3, #0]
   23c9c:	2276      	movs	r2, #118	; 0x76
   23c9e:	18ba      	adds	r2, r7, r2
   23ca0:	1c59      	adds	r1, r3, #1
   23ca2:	7011      	strb	r1, [r2, #0]
   23ca4:	001a      	movs	r2, r3
   23ca6:	2318      	movs	r3, #24
   23ca8:	18fb      	adds	r3, r7, r3
   23caa:	5c9a      	ldrb	r2, [r3, r2]
   23cac:	2317      	movs	r3, #23
   23cae:	18fb      	adds	r3, r7, r3
   23cb0:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   23cb2:	2317      	movs	r3, #23
   23cb4:	18fb      	adds	r3, r7, r3
   23cb6:	781b      	ldrb	r3, [r3, #0]
   23cb8:	2b00      	cmp	r3, #0
   23cba:	d016      	beq.n	23cea <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   23cbc:	4acd      	ldr	r2, [pc, #820]	; (23ff4 <spi_cmd_complete+0x790>)
   23cbe:	49c8      	ldr	r1, [pc, #800]	; (23fe0 <spi_cmd_complete+0x77c>)
   23cc0:	4bc8      	ldr	r3, [pc, #800]	; (23fe4 <spi_cmd_complete+0x780>)
   23cc2:	0018      	movs	r0, r3
   23cc4:	4bc8      	ldr	r3, [pc, #800]	; (23fe8 <spi_cmd_complete+0x784>)
   23cc6:	4798      	blx	r3
   23cc8:	2317      	movs	r3, #23
   23cca:	18fb      	adds	r3, r7, r3
   23ccc:	781b      	ldrb	r3, [r3, #0]
   23cce:	001a      	movs	r2, r3
   23cd0:	4bc9      	ldr	r3, [pc, #804]	; (23ff8 <spi_cmd_complete+0x794>)
   23cd2:	0011      	movs	r1, r2
   23cd4:	0018      	movs	r0, r3
   23cd6:	4bc4      	ldr	r3, [pc, #784]	; (23fe8 <spi_cmd_complete+0x784>)
   23cd8:	4798      	blx	r3
   23cda:	4bc5      	ldr	r3, [pc, #788]	; (23ff0 <spi_cmd_complete+0x78c>)
   23cdc:	0018      	movs	r0, r3
   23cde:	4bc2      	ldr	r3, [pc, #776]	; (23fe8 <spi_cmd_complete+0x784>)
   23ce0:	4798      	blx	r3
		result = N_FAIL;
   23ce2:	2300      	movs	r3, #0
   23ce4:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23ce6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23ce8:	e21e      	b.n	24128 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   23cea:	230f      	movs	r3, #15
   23cec:	18fb      	adds	r3, r7, r3
   23cee:	781b      	ldrb	r3, [r3, #0]
   23cf0:	2bc4      	cmp	r3, #196	; 0xc4
   23cf2:	d00f      	beq.n	23d14 <spi_cmd_complete+0x4b0>
   23cf4:	230f      	movs	r3, #15
   23cf6:	18fb      	adds	r3, r7, r3
   23cf8:	781b      	ldrb	r3, [r3, #0]
   23cfa:	2bca      	cmp	r3, #202	; 0xca
   23cfc:	d00a      	beq.n	23d14 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   23cfe:	230f      	movs	r3, #15
   23d00:	18fb      	adds	r3, r7, r3
   23d02:	781b      	ldrb	r3, [r3, #0]
   23d04:	2bc2      	cmp	r3, #194	; 0xc2
   23d06:	d005      	beq.n	23d14 <spi_cmd_complete+0x4b0>
   23d08:	230f      	movs	r3, #15
   23d0a:	18fb      	adds	r3, r7, r3
   23d0c:	781b      	ldrb	r3, [r3, #0]
   23d0e:	2bc8      	cmp	r3, #200	; 0xc8
   23d10:	d000      	beq.n	23d14 <spi_cmd_complete+0x4b0>
   23d12:	e208      	b.n	24126 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   23d14:	230a      	movs	r3, #10
   23d16:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   23d18:	2376      	movs	r3, #118	; 0x76
   23d1a:	18fb      	adds	r3, r7, r3
   23d1c:	781a      	ldrb	r2, [r3, #0]
   23d1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23d20:	429a      	cmp	r2, r3
   23d22:	d218      	bcs.n	23d56 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   23d24:	2376      	movs	r3, #118	; 0x76
   23d26:	18fb      	adds	r3, r7, r3
   23d28:	781b      	ldrb	r3, [r3, #0]
   23d2a:	2276      	movs	r2, #118	; 0x76
   23d2c:	18ba      	adds	r2, r7, r2
   23d2e:	1c59      	adds	r1, r3, #1
   23d30:	7011      	strb	r1, [r2, #0]
   23d32:	001a      	movs	r2, r3
   23d34:	2318      	movs	r3, #24
   23d36:	18fb      	adds	r3, r7, r3
   23d38:	5c9a      	ldrb	r2, [r3, r2]
   23d3a:	2317      	movs	r3, #23
   23d3c:	18fb      	adds	r3, r7, r3
   23d3e:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   23d40:	2317      	movs	r3, #23
   23d42:	18fb      	adds	r3, r7, r3
   23d44:	781b      	ldrb	r3, [r3, #0]
   23d46:	091b      	lsrs	r3, r3, #4
   23d48:	b2db      	uxtb	r3, r3
   23d4a:	001a      	movs	r2, r3
   23d4c:	230f      	movs	r3, #15
   23d4e:	4013      	ands	r3, r2
   23d50:	2b0f      	cmp	r3, #15
   23d52:	d103      	bne.n	23d5c <spi_cmd_complete+0x4f8>
					break;
   23d54:	e007      	b.n	23d66 <spi_cmd_complete+0x502>
					retry = 0;
   23d56:	2300      	movs	r3, #0
   23d58:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   23d5a:	e004      	b.n	23d66 <spi_cmd_complete+0x502>
			} while (retry--);
   23d5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23d5e:	1e5a      	subs	r2, r3, #1
   23d60:	667a      	str	r2, [r7, #100]	; 0x64
   23d62:	2b00      	cmp	r3, #0
   23d64:	d1d8      	bne.n	23d18 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   23d66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23d68:	2b00      	cmp	r3, #0
   23d6a:	dc18      	bgt.n	23d9e <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   23d6c:	2395      	movs	r3, #149	; 0x95
   23d6e:	009a      	lsls	r2, r3, #2
   23d70:	499b      	ldr	r1, [pc, #620]	; (23fe0 <spi_cmd_complete+0x77c>)
   23d72:	4b9c      	ldr	r3, [pc, #624]	; (23fe4 <spi_cmd_complete+0x780>)
   23d74:	0018      	movs	r0, r3
   23d76:	4b9c      	ldr	r3, [pc, #624]	; (23fe8 <spi_cmd_complete+0x784>)
   23d78:	4798      	blx	r3
   23d7a:	2317      	movs	r3, #23
   23d7c:	18fb      	adds	r3, r7, r3
   23d7e:	781b      	ldrb	r3, [r3, #0]
   23d80:	001a      	movs	r2, r3
   23d82:	4b9e      	ldr	r3, [pc, #632]	; (23ffc <spi_cmd_complete+0x798>)
   23d84:	0011      	movs	r1, r2
   23d86:	0018      	movs	r0, r3
   23d88:	4b97      	ldr	r3, [pc, #604]	; (23fe8 <spi_cmd_complete+0x784>)
   23d8a:	4798      	blx	r3
   23d8c:	4b98      	ldr	r3, [pc, #608]	; (23ff0 <spi_cmd_complete+0x78c>)
   23d8e:	0018      	movs	r0, r3
   23d90:	4b95      	ldr	r3, [pc, #596]	; (23fe8 <spi_cmd_complete+0x784>)
   23d92:	4798      	blx	r3
				result = N_RESET;
   23d94:	2301      	movs	r3, #1
   23d96:	425b      	negs	r3, r3
   23d98:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   23d9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23d9c:	e1c4      	b.n	24128 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   23d9e:	230f      	movs	r3, #15
   23da0:	18fb      	adds	r3, r7, r3
   23da2:	781b      	ldrb	r3, [r3, #0]
   23da4:	2bc4      	cmp	r3, #196	; 0xc4
   23da6:	d005      	beq.n	23db4 <spi_cmd_complete+0x550>
   23da8:	230f      	movs	r3, #15
   23daa:	18fb      	adds	r3, r7, r3
   23dac:	781b      	ldrb	r3, [r3, #0]
   23dae:	2bca      	cmp	r3, #202	; 0xca
   23db0:	d000      	beq.n	23db4 <spi_cmd_complete+0x550>
   23db2:	e08e      	b.n	23ed2 <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   23db4:	2376      	movs	r3, #118	; 0x76
   23db6:	18fb      	adds	r3, r7, r3
   23db8:	781b      	ldrb	r3, [r3, #0]
   23dba:	3303      	adds	r3, #3
   23dbc:	001a      	movs	r2, r3
   23dbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23dc0:	429a      	cmp	r2, r3
   23dc2:	d23c      	bcs.n	23e3e <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   23dc4:	2376      	movs	r3, #118	; 0x76
   23dc6:	18fb      	adds	r3, r7, r3
   23dc8:	781b      	ldrb	r3, [r3, #0]
   23dca:	2276      	movs	r2, #118	; 0x76
   23dcc:	18ba      	adds	r2, r7, r2
   23dce:	1c59      	adds	r1, r3, #1
   23dd0:	7011      	strb	r1, [r2, #0]
   23dd2:	001a      	movs	r2, r3
   23dd4:	2318      	movs	r3, #24
   23dd6:	18fb      	adds	r3, r7, r3
   23dd8:	5c9a      	ldrb	r2, [r3, r2]
   23dda:	687b      	ldr	r3, [r7, #4]
   23ddc:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   23dde:	687b      	ldr	r3, [r7, #4]
   23de0:	1c5a      	adds	r2, r3, #1
   23de2:	2376      	movs	r3, #118	; 0x76
   23de4:	18fb      	adds	r3, r7, r3
   23de6:	781b      	ldrb	r3, [r3, #0]
   23de8:	2176      	movs	r1, #118	; 0x76
   23dea:	1879      	adds	r1, r7, r1
   23dec:	1c58      	adds	r0, r3, #1
   23dee:	7008      	strb	r0, [r1, #0]
   23df0:	0019      	movs	r1, r3
   23df2:	2318      	movs	r3, #24
   23df4:	18fb      	adds	r3, r7, r3
   23df6:	5c5b      	ldrb	r3, [r3, r1]
   23df8:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   23dfa:	687b      	ldr	r3, [r7, #4]
   23dfc:	1c9a      	adds	r2, r3, #2
   23dfe:	2376      	movs	r3, #118	; 0x76
   23e00:	18fb      	adds	r3, r7, r3
   23e02:	781b      	ldrb	r3, [r3, #0]
   23e04:	2176      	movs	r1, #118	; 0x76
   23e06:	1879      	adds	r1, r7, r1
   23e08:	1c58      	adds	r0, r3, #1
   23e0a:	7008      	strb	r0, [r1, #0]
   23e0c:	0019      	movs	r1, r3
   23e0e:	2318      	movs	r3, #24
   23e10:	18fb      	adds	r3, r7, r3
   23e12:	5c5b      	ldrb	r3, [r3, r1]
   23e14:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   23e16:	687b      	ldr	r3, [r7, #4]
   23e18:	1cda      	adds	r2, r3, #3
   23e1a:	2376      	movs	r3, #118	; 0x76
   23e1c:	18fb      	adds	r3, r7, r3
   23e1e:	781b      	ldrb	r3, [r3, #0]
   23e20:	2176      	movs	r1, #118	; 0x76
   23e22:	1879      	adds	r1, r7, r1
   23e24:	1c58      	adds	r0, r3, #1
   23e26:	7008      	strb	r0, [r1, #0]
   23e28:	0019      	movs	r1, r3
   23e2a:	2318      	movs	r3, #24
   23e2c:	18fb      	adds	r3, r7, r3
   23e2e:	5c5b      	ldrb	r3, [r3, r1]
   23e30:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   23e32:	4b73      	ldr	r3, [pc, #460]	; (24000 <spi_cmd_complete+0x79c>)
   23e34:	781b      	ldrb	r3, [r3, #0]
   23e36:	2b00      	cmp	r3, #0
   23e38:	d000      	beq.n	23e3c <spi_cmd_complete+0x5d8>
   23e3a:	e174      	b.n	24126 <spi_cmd_complete+0x8c2>
   23e3c:	e011      	b.n	23e62 <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   23e3e:	4a71      	ldr	r2, [pc, #452]	; (24004 <spi_cmd_complete+0x7a0>)
   23e40:	4967      	ldr	r1, [pc, #412]	; (23fe0 <spi_cmd_complete+0x77c>)
   23e42:	4b68      	ldr	r3, [pc, #416]	; (23fe4 <spi_cmd_complete+0x780>)
   23e44:	0018      	movs	r0, r3
   23e46:	4b68      	ldr	r3, [pc, #416]	; (23fe8 <spi_cmd_complete+0x784>)
   23e48:	4798      	blx	r3
   23e4a:	4b6f      	ldr	r3, [pc, #444]	; (24008 <spi_cmd_complete+0x7a4>)
   23e4c:	0018      	movs	r0, r3
   23e4e:	4b66      	ldr	r3, [pc, #408]	; (23fe8 <spi_cmd_complete+0x784>)
   23e50:	4798      	blx	r3
   23e52:	4b67      	ldr	r3, [pc, #412]	; (23ff0 <spi_cmd_complete+0x78c>)
   23e54:	0018      	movs	r0, r3
   23e56:	4b64      	ldr	r3, [pc, #400]	; (23fe8 <spi_cmd_complete+0x784>)
   23e58:	4798      	blx	r3
					result = N_FAIL;
   23e5a:	2300      	movs	r3, #0
   23e5c:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   23e5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23e60:	e162      	b.n	24128 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   23e62:	2376      	movs	r3, #118	; 0x76
   23e64:	18fb      	adds	r3, r7, r3
   23e66:	781b      	ldrb	r3, [r3, #0]
   23e68:	3301      	adds	r3, #1
   23e6a:	001a      	movs	r2, r3
   23e6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23e6e:	429a      	cmp	r2, r3
   23e70:	d21c      	bcs.n	23eac <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   23e72:	2376      	movs	r3, #118	; 0x76
   23e74:	18fb      	adds	r3, r7, r3
   23e76:	781b      	ldrb	r3, [r3, #0]
   23e78:	2276      	movs	r2, #118	; 0x76
   23e7a:	18ba      	adds	r2, r7, r2
   23e7c:	1c59      	adds	r1, r3, #1
   23e7e:	7011      	strb	r1, [r2, #0]
   23e80:	001a      	movs	r2, r3
   23e82:	2318      	movs	r3, #24
   23e84:	18fb      	adds	r3, r7, r3
   23e86:	5c9a      	ldrb	r2, [r3, r2]
   23e88:	2314      	movs	r3, #20
   23e8a:	18fb      	adds	r3, r7, r3
   23e8c:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   23e8e:	2376      	movs	r3, #118	; 0x76
   23e90:	18fb      	adds	r3, r7, r3
   23e92:	781b      	ldrb	r3, [r3, #0]
   23e94:	2276      	movs	r2, #118	; 0x76
   23e96:	18ba      	adds	r2, r7, r2
   23e98:	1c59      	adds	r1, r3, #1
   23e9a:	7011      	strb	r1, [r2, #0]
   23e9c:	001a      	movs	r2, r3
   23e9e:	2318      	movs	r3, #24
   23ea0:	18fb      	adds	r3, r7, r3
   23ea2:	5c9a      	ldrb	r2, [r3, r2]
   23ea4:	2314      	movs	r3, #20
   23ea6:	18fb      	adds	r3, r7, r3
   23ea8:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   23eaa:	e13c      	b.n	24126 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   23eac:	239c      	movs	r3, #156	; 0x9c
   23eae:	009a      	lsls	r2, r3, #2
   23eb0:	494b      	ldr	r1, [pc, #300]	; (23fe0 <spi_cmd_complete+0x77c>)
   23eb2:	4b4c      	ldr	r3, [pc, #304]	; (23fe4 <spi_cmd_complete+0x780>)
   23eb4:	0018      	movs	r0, r3
   23eb6:	4b4c      	ldr	r3, [pc, #304]	; (23fe8 <spi_cmd_complete+0x784>)
   23eb8:	4798      	blx	r3
   23eba:	4b54      	ldr	r3, [pc, #336]	; (2400c <spi_cmd_complete+0x7a8>)
   23ebc:	0018      	movs	r0, r3
   23ebe:	4b4a      	ldr	r3, [pc, #296]	; (23fe8 <spi_cmd_complete+0x784>)
   23ec0:	4798      	blx	r3
   23ec2:	4b4b      	ldr	r3, [pc, #300]	; (23ff0 <spi_cmd_complete+0x78c>)
   23ec4:	0018      	movs	r0, r3
   23ec6:	4b48      	ldr	r3, [pc, #288]	; (23fe8 <spi_cmd_complete+0x784>)
   23ec8:	4798      	blx	r3
						result = N_FAIL;
   23eca:	2300      	movs	r3, #0
   23ecc:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   23ece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23ed0:	e12a      	b.n	24128 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   23ed2:	230f      	movs	r3, #15
   23ed4:	18fb      	adds	r3, r7, r3
   23ed6:	781b      	ldrb	r3, [r3, #0]
   23ed8:	2bc2      	cmp	r3, #194	; 0xc2
   23eda:	d005      	beq.n	23ee8 <spi_cmd_complete+0x684>
   23edc:	230f      	movs	r3, #15
   23ede:	18fb      	adds	r3, r7, r3
   23ee0:	781b      	ldrb	r3, [r3, #0]
   23ee2:	2bc8      	cmp	r3, #200	; 0xc8
   23ee4:	d000      	beq.n	23ee8 <spi_cmd_complete+0x684>
   23ee6:	e11e      	b.n	24126 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   23ee8:	2300      	movs	r3, #0
   23eea:	663b      	str	r3, [r7, #96]	; 0x60
   23eec:	e011      	b.n	23f12 <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   23eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23ef0:	1c5a      	adds	r2, r3, #1
   23ef2:	663a      	str	r2, [r7, #96]	; 0x60
   23ef4:	001a      	movs	r2, r3
   23ef6:	687b      	ldr	r3, [r7, #4]
   23ef8:	189a      	adds	r2, r3, r2
   23efa:	2376      	movs	r3, #118	; 0x76
   23efc:	18fb      	adds	r3, r7, r3
   23efe:	781b      	ldrb	r3, [r3, #0]
   23f00:	2176      	movs	r1, #118	; 0x76
   23f02:	1879      	adds	r1, r7, r1
   23f04:	1c58      	adds	r0, r3, #1
   23f06:	7008      	strb	r0, [r1, #0]
   23f08:	0019      	movs	r1, r3
   23f0a:	2318      	movs	r3, #24
   23f0c:	18fb      	adds	r3, r7, r3
   23f0e:	5c5b      	ldrb	r3, [r3, r1]
   23f10:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   23f12:	2376      	movs	r3, #118	; 0x76
   23f14:	18fb      	adds	r3, r7, r3
   23f16:	781a      	ldrb	r2, [r3, #0]
   23f18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23f1a:	429a      	cmp	r2, r3
   23f1c:	d203      	bcs.n	23f26 <spi_cmd_complete+0x6c2>
   23f1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23f20:	683b      	ldr	r3, [r7, #0]
   23f22:	429a      	cmp	r2, r3
   23f24:	d3e3      	bcc.n	23eee <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   23f26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23f28:	683a      	ldr	r2, [r7, #0]
   23f2a:	1ad3      	subs	r3, r2, r3
   23f2c:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   23f2e:	683b      	ldr	r3, [r7, #0]
   23f30:	2b00      	cmp	r3, #0
   23f32:	d100      	bne.n	23f36 <spi_cmd_complete+0x6d2>
   23f34:	e0f1      	b.n	2411a <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   23f36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23f38:	2280      	movs	r2, #128	; 0x80
   23f3a:	0192      	lsls	r2, r2, #6
   23f3c:	1ad3      	subs	r3, r2, r3
   23f3e:	001a      	movs	r2, r3
   23f40:	683b      	ldr	r3, [r7, #0]
   23f42:	429a      	cmp	r2, r3
   23f44:	d302      	bcc.n	23f4c <spi_cmd_complete+0x6e8>
						nbytes = sz;
   23f46:	683b      	ldr	r3, [r7, #0]
   23f48:	65fb      	str	r3, [r7, #92]	; 0x5c
   23f4a:	e004      	b.n	23f56 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   23f4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23f4e:	2280      	movs	r2, #128	; 0x80
   23f50:	0192      	lsls	r2, r2, #6
   23f52:	1ad3      	subs	r3, r2, r3
   23f54:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   23f56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23f58:	687a      	ldr	r2, [r7, #4]
   23f5a:	18d3      	adds	r3, r2, r3
   23f5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   23f5e:	b292      	uxth	r2, r2
   23f60:	0011      	movs	r1, r2
   23f62:	0018      	movs	r0, r3
   23f64:	4b2a      	ldr	r3, [pc, #168]	; (24010 <spi_cmd_complete+0x7ac>)
   23f66:	4798      	blx	r3
   23f68:	1e03      	subs	r3, r0, #0
   23f6a:	d010      	beq.n	23f8e <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   23f6c:	4a29      	ldr	r2, [pc, #164]	; (24014 <spi_cmd_complete+0x7b0>)
   23f6e:	491c      	ldr	r1, [pc, #112]	; (23fe0 <spi_cmd_complete+0x77c>)
   23f70:	4b1c      	ldr	r3, [pc, #112]	; (23fe4 <spi_cmd_complete+0x780>)
   23f72:	0018      	movs	r0, r3
   23f74:	4b1c      	ldr	r3, [pc, #112]	; (23fe8 <spi_cmd_complete+0x784>)
   23f76:	4798      	blx	r3
   23f78:	4b27      	ldr	r3, [pc, #156]	; (24018 <spi_cmd_complete+0x7b4>)
   23f7a:	0018      	movs	r0, r3
   23f7c:	4b1a      	ldr	r3, [pc, #104]	; (23fe8 <spi_cmd_complete+0x784>)
   23f7e:	4798      	blx	r3
   23f80:	4b1b      	ldr	r3, [pc, #108]	; (23ff0 <spi_cmd_complete+0x78c>)
   23f82:	0018      	movs	r0, r3
   23f84:	4b18      	ldr	r3, [pc, #96]	; (23fe8 <spi_cmd_complete+0x784>)
   23f86:	4798      	blx	r3
						result = N_FAIL;
   23f88:	2300      	movs	r3, #0
   23f8a:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   23f8c:	e0cb      	b.n	24126 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   23f8e:	4b1c      	ldr	r3, [pc, #112]	; (24000 <spi_cmd_complete+0x79c>)
   23f90:	781b      	ldrb	r3, [r3, #0]
   23f92:	2b00      	cmp	r3, #0
   23f94:	d119      	bne.n	23fca <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   23f96:	2314      	movs	r3, #20
   23f98:	18fb      	adds	r3, r7, r3
   23f9a:	2102      	movs	r1, #2
   23f9c:	0018      	movs	r0, r3
   23f9e:	4b1c      	ldr	r3, [pc, #112]	; (24010 <spi_cmd_complete+0x7ac>)
   23fa0:	4798      	blx	r3
   23fa2:	1e03      	subs	r3, r0, #0
   23fa4:	d011      	beq.n	23fca <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   23fa6:	23a6      	movs	r3, #166	; 0xa6
   23fa8:	009a      	lsls	r2, r3, #2
   23faa:	490d      	ldr	r1, [pc, #52]	; (23fe0 <spi_cmd_complete+0x77c>)
   23fac:	4b0d      	ldr	r3, [pc, #52]	; (23fe4 <spi_cmd_complete+0x780>)
   23fae:	0018      	movs	r0, r3
   23fb0:	4b0d      	ldr	r3, [pc, #52]	; (23fe8 <spi_cmd_complete+0x784>)
   23fb2:	4798      	blx	r3
   23fb4:	4b19      	ldr	r3, [pc, #100]	; (2401c <spi_cmd_complete+0x7b8>)
   23fb6:	0018      	movs	r0, r3
   23fb8:	4b0b      	ldr	r3, [pc, #44]	; (23fe8 <spi_cmd_complete+0x784>)
   23fba:	4798      	blx	r3
   23fbc:	4b0c      	ldr	r3, [pc, #48]	; (23ff0 <spi_cmd_complete+0x78c>)
   23fbe:	0018      	movs	r0, r3
   23fc0:	4b09      	ldr	r3, [pc, #36]	; (23fe8 <spi_cmd_complete+0x784>)
   23fc2:	4798      	blx	r3
							result = N_FAIL;
   23fc4:	2300      	movs	r3, #0
   23fc6:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   23fc8:	e0ad      	b.n	24126 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   23fca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   23fce:	18d3      	adds	r3, r2, r3
   23fd0:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   23fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   23fd4:	683a      	ldr	r2, [r7, #0]
   23fd6:	1ad3      	subs	r3, r2, r3
   23fd8:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   23fda:	e09e      	b.n	2411a <spi_cmd_complete+0x8b6>
   23fdc:	0000022f 	.word	0x0000022f
   23fe0:	00039340 	.word	0x00039340
   23fe4:	00038d2c 	.word	0x00038d2c
   23fe8:	0001de29 	.word	0x0001de29
   23fec:	00038e24 	.word	0x00038e24
   23ff0:	00038d6c 	.word	0x00038d6c
   23ff4:	00000239 	.word	0x00000239
   23ff8:	00038e60 	.word	0x00038e60
   23ffc:	00038e94 	.word	0x00038e94
   24000:	200042ac 	.word	0x200042ac
   24004:	00000263 	.word	0x00000263
   24008:	00038ec4 	.word	0x00038ec4
   2400c:	00038ef4 	.word	0x00038ef4
   24010:	0002319d 	.word	0x0002319d
   24014:	0000028e 	.word	0x0000028e
   24018:	00038f24 	.word	0x00038f24
   2401c:	00038f58 	.word	0x00038f58
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   24020:	683a      	ldr	r2, [r7, #0]
   24022:	2380      	movs	r3, #128	; 0x80
   24024:	019b      	lsls	r3, r3, #6
   24026:	429a      	cmp	r2, r3
   24028:	d802      	bhi.n	24030 <spi_cmd_complete+0x7cc>
						nbytes = sz;
   2402a:	683b      	ldr	r3, [r7, #0]
   2402c:	65bb      	str	r3, [r7, #88]	; 0x58
   2402e:	e002      	b.n	24036 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   24030:	2380      	movs	r3, #128	; 0x80
   24032:	019b      	lsls	r3, r3, #6
   24034:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   24036:	230a      	movs	r3, #10
   24038:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   2403a:	2317      	movs	r3, #23
   2403c:	18fb      	adds	r3, r7, r3
   2403e:	2101      	movs	r1, #1
   24040:	0018      	movs	r0, r3
   24042:	4b3b      	ldr	r3, [pc, #236]	; (24130 <spi_cmd_complete+0x8cc>)
   24044:	4798      	blx	r3
   24046:	1e03      	subs	r3, r0, #0
   24048:	d011      	beq.n	2406e <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   2404a:	23ae      	movs	r3, #174	; 0xae
   2404c:	009a      	lsls	r2, r3, #2
   2404e:	4939      	ldr	r1, [pc, #228]	; (24134 <spi_cmd_complete+0x8d0>)
   24050:	4b39      	ldr	r3, [pc, #228]	; (24138 <spi_cmd_complete+0x8d4>)
   24052:	0018      	movs	r0, r3
   24054:	4b39      	ldr	r3, [pc, #228]	; (2413c <spi_cmd_complete+0x8d8>)
   24056:	4798      	blx	r3
   24058:	4b39      	ldr	r3, [pc, #228]	; (24140 <spi_cmd_complete+0x8dc>)
   2405a:	0018      	movs	r0, r3
   2405c:	4b37      	ldr	r3, [pc, #220]	; (2413c <spi_cmd_complete+0x8d8>)
   2405e:	4798      	blx	r3
   24060:	4b38      	ldr	r3, [pc, #224]	; (24144 <spi_cmd_complete+0x8e0>)
   24062:	0018      	movs	r0, r3
   24064:	4b35      	ldr	r3, [pc, #212]	; (2413c <spi_cmd_complete+0x8d8>)
   24066:	4798      	blx	r3
							result = N_FAIL;
   24068:	2300      	movs	r3, #0
   2406a:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   2406c:	e010      	b.n	24090 <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   2406e:	2317      	movs	r3, #23
   24070:	18fb      	adds	r3, r7, r3
   24072:	781b      	ldrb	r3, [r3, #0]
   24074:	091b      	lsrs	r3, r3, #4
   24076:	b2db      	uxtb	r3, r3
   24078:	001a      	movs	r2, r3
   2407a:	230f      	movs	r3, #15
   2407c:	4013      	ands	r3, r2
   2407e:	2b0f      	cmp	r3, #15
   24080:	d005      	beq.n	2408e <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   24082:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24084:	1e5a      	subs	r2, r3, #1
   24086:	667a      	str	r2, [r7, #100]	; 0x64
   24088:	2b00      	cmp	r3, #0
   2408a:	d1d6      	bne.n	2403a <spi_cmd_complete+0x7d6>
   2408c:	e000      	b.n	24090 <spi_cmd_complete+0x82c>
							break;
   2408e:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   24090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24092:	2b00      	cmp	r3, #0
   24094:	d046      	beq.n	24124 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   24096:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24098:	687a      	ldr	r2, [r7, #4]
   2409a:	18d3      	adds	r3, r2, r3
   2409c:	6dba      	ldr	r2, [r7, #88]	; 0x58
   2409e:	b292      	uxth	r2, r2
   240a0:	0011      	movs	r1, r2
   240a2:	0018      	movs	r0, r3
   240a4:	4b22      	ldr	r3, [pc, #136]	; (24130 <spi_cmd_complete+0x8cc>)
   240a6:	4798      	blx	r3
   240a8:	1e03      	subs	r3, r0, #0
   240aa:	d011      	beq.n	240d0 <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   240ac:	23b2      	movs	r3, #178	; 0xb2
   240ae:	009a      	lsls	r2, r3, #2
   240b0:	4920      	ldr	r1, [pc, #128]	; (24134 <spi_cmd_complete+0x8d0>)
   240b2:	4b21      	ldr	r3, [pc, #132]	; (24138 <spi_cmd_complete+0x8d4>)
   240b4:	0018      	movs	r0, r3
   240b6:	4b21      	ldr	r3, [pc, #132]	; (2413c <spi_cmd_complete+0x8d8>)
   240b8:	4798      	blx	r3
   240ba:	4b23      	ldr	r3, [pc, #140]	; (24148 <spi_cmd_complete+0x8e4>)
   240bc:	0018      	movs	r0, r3
   240be:	4b1f      	ldr	r3, [pc, #124]	; (2413c <spi_cmd_complete+0x8d8>)
   240c0:	4798      	blx	r3
   240c2:	4b20      	ldr	r3, [pc, #128]	; (24144 <spi_cmd_complete+0x8e0>)
   240c4:	0018      	movs	r0, r3
   240c6:	4b1d      	ldr	r3, [pc, #116]	; (2413c <spi_cmd_complete+0x8d8>)
   240c8:	4798      	blx	r3
						result = N_FAIL;
   240ca:	2300      	movs	r3, #0
   240cc:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   240ce:	e02a      	b.n	24126 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   240d0:	4b1e      	ldr	r3, [pc, #120]	; (2414c <spi_cmd_complete+0x8e8>)
   240d2:	781b      	ldrb	r3, [r3, #0]
   240d4:	2b00      	cmp	r3, #0
   240d6:	d118      	bne.n	2410a <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   240d8:	2314      	movs	r3, #20
   240da:	18fb      	adds	r3, r7, r3
   240dc:	2102      	movs	r1, #2
   240de:	0018      	movs	r0, r3
   240e0:	4b13      	ldr	r3, [pc, #76]	; (24130 <spi_cmd_complete+0x8cc>)
   240e2:	4798      	blx	r3
   240e4:	1e03      	subs	r3, r0, #0
   240e6:	d010      	beq.n	2410a <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   240e8:	4a19      	ldr	r2, [pc, #100]	; (24150 <spi_cmd_complete+0x8ec>)
   240ea:	4912      	ldr	r1, [pc, #72]	; (24134 <spi_cmd_complete+0x8d0>)
   240ec:	4b12      	ldr	r3, [pc, #72]	; (24138 <spi_cmd_complete+0x8d4>)
   240ee:	0018      	movs	r0, r3
   240f0:	4b12      	ldr	r3, [pc, #72]	; (2413c <spi_cmd_complete+0x8d8>)
   240f2:	4798      	blx	r3
   240f4:	4b17      	ldr	r3, [pc, #92]	; (24154 <spi_cmd_complete+0x8f0>)
   240f6:	0018      	movs	r0, r3
   240f8:	4b10      	ldr	r3, [pc, #64]	; (2413c <spi_cmd_complete+0x8d8>)
   240fa:	4798      	blx	r3
   240fc:	4b11      	ldr	r3, [pc, #68]	; (24144 <spi_cmd_complete+0x8e0>)
   240fe:	0018      	movs	r0, r3
   24100:	4b0e      	ldr	r3, [pc, #56]	; (2413c <spi_cmd_complete+0x8d8>)
   24102:	4798      	blx	r3
							result = N_FAIL;
   24104:	2300      	movs	r3, #0
   24106:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24108:	e00d      	b.n	24126 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   2410a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   2410c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2410e:	18d3      	adds	r3, r2, r3
   24110:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   24112:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24114:	683a      	ldr	r2, [r7, #0]
   24116:	1ad3      	subs	r3, r2, r3
   24118:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   2411a:	683b      	ldr	r3, [r7, #0]
   2411c:	2b00      	cmp	r3, #0
   2411e:	d000      	beq.n	24122 <spi_cmd_complete+0x8be>
   24120:	e77e      	b.n	24020 <spi_cmd_complete+0x7bc>
   24122:	e000      	b.n	24126 <spi_cmd_complete+0x8c2>
						break;
   24124:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   24126:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   24128:	0018      	movs	r0, r3
   2412a:	46bd      	mov	sp, r7
   2412c:	b01f      	add	sp, #124	; 0x7c
   2412e:	bd90      	pop	{r4, r7, pc}
   24130:	0002319d 	.word	0x0002319d
   24134:	00039340 	.word	0x00039340
   24138:	00038d2c 	.word	0x00038d2c
   2413c:	0001de29 	.word	0x0001de29
   24140:	00038f90 	.word	0x00038f90
   24144:	00038d6c 	.word	0x00038d6c
   24148:	00038f24 	.word	0x00038f24
   2414c:	200042ac 	.word	0x200042ac
   24150:	000002d2 	.word	0x000002d2
   24154:	00038f58 	.word	0x00038f58

00024158 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   24158:	b580      	push	{r7, lr}
   2415a:	b086      	sub	sp, #24
   2415c:	af00      	add	r7, sp, #0
   2415e:	6078      	str	r0, [r7, #4]
   24160:	000a      	movs	r2, r1
   24162:	1cbb      	adds	r3, r7, #2
   24164:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   24166:	2313      	movs	r3, #19
   24168:	18fb      	adds	r3, r7, r3
   2416a:	2201      	movs	r2, #1
   2416c:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   2416e:	230c      	movs	r3, #12
   24170:	18fb      	adds	r3, r7, r3
   24172:	2200      	movs	r2, #0
   24174:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   24176:	2316      	movs	r3, #22
   24178:	18fb      	adds	r3, r7, r3
   2417a:	2200      	movs	r2, #0
   2417c:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   2417e:	1cbb      	adds	r3, r7, #2
   24180:	881a      	ldrh	r2, [r3, #0]
   24182:	2380      	movs	r3, #128	; 0x80
   24184:	019b      	lsls	r3, r3, #6
   24186:	429a      	cmp	r2, r3
   24188:	d805      	bhi.n	24196 <spi_data_write+0x3e>
			nbytes = sz;
   2418a:	2314      	movs	r3, #20
   2418c:	18fb      	adds	r3, r7, r3
   2418e:	1cba      	adds	r2, r7, #2
   24190:	8812      	ldrh	r2, [r2, #0]
   24192:	801a      	strh	r2, [r3, #0]
   24194:	e004      	b.n	241a0 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   24196:	2314      	movs	r3, #20
   24198:	18fb      	adds	r3, r7, r3
   2419a:	2280      	movs	r2, #128	; 0x80
   2419c:	0192      	lsls	r2, r2, #6
   2419e:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   241a0:	2311      	movs	r3, #17
   241a2:	18fb      	adds	r3, r7, r3
   241a4:	22f0      	movs	r2, #240	; 0xf0
   241a6:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   241a8:	2316      	movs	r3, #22
   241aa:	18fb      	adds	r3, r7, r3
   241ac:	2200      	movs	r2, #0
   241ae:	5e9b      	ldrsh	r3, [r3, r2]
   241b0:	2b00      	cmp	r3, #0
   241b2:	d10f      	bne.n	241d4 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   241b4:	1cbb      	adds	r3, r7, #2
   241b6:	881a      	ldrh	r2, [r3, #0]
   241b8:	2380      	movs	r3, #128	; 0x80
   241ba:	019b      	lsls	r3, r3, #6
   241bc:	429a      	cmp	r2, r3
   241be:	d804      	bhi.n	241ca <spi_data_write+0x72>
				order = 0x3;
   241c0:	2312      	movs	r3, #18
   241c2:	18fb      	adds	r3, r7, r3
   241c4:	2203      	movs	r2, #3
   241c6:	701a      	strb	r2, [r3, #0]
   241c8:	e013      	b.n	241f2 <spi_data_write+0x9a>
			else
				order = 0x1;
   241ca:	2312      	movs	r3, #18
   241cc:	18fb      	adds	r3, r7, r3
   241ce:	2201      	movs	r2, #1
   241d0:	701a      	strb	r2, [r3, #0]
   241d2:	e00e      	b.n	241f2 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   241d4:	1cbb      	adds	r3, r7, #2
   241d6:	881a      	ldrh	r2, [r3, #0]
   241d8:	2380      	movs	r3, #128	; 0x80
   241da:	019b      	lsls	r3, r3, #6
   241dc:	429a      	cmp	r2, r3
   241de:	d804      	bhi.n	241ea <spi_data_write+0x92>
				order = 0x3;
   241e0:	2312      	movs	r3, #18
   241e2:	18fb      	adds	r3, r7, r3
   241e4:	2203      	movs	r2, #3
   241e6:	701a      	strb	r2, [r3, #0]
   241e8:	e003      	b.n	241f2 <spi_data_write+0x9a>
			else
				order = 0x2;
   241ea:	2312      	movs	r3, #18
   241ec:	18fb      	adds	r3, r7, r3
   241ee:	2202      	movs	r2, #2
   241f0:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   241f2:	2311      	movs	r3, #17
   241f4:	18fb      	adds	r3, r7, r3
   241f6:	781a      	ldrb	r2, [r3, #0]
   241f8:	2312      	movs	r3, #18
   241fa:	18fb      	adds	r3, r7, r3
   241fc:	781b      	ldrb	r3, [r3, #0]
   241fe:	4313      	orrs	r3, r2
   24200:	b2da      	uxtb	r2, r3
   24202:	2311      	movs	r3, #17
   24204:	18fb      	adds	r3, r7, r3
   24206:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   24208:	2311      	movs	r3, #17
   2420a:	18fb      	adds	r3, r7, r3
   2420c:	2101      	movs	r1, #1
   2420e:	0018      	movs	r0, r3
   24210:	4b3c      	ldr	r3, [pc, #240]	; (24304 <spi_data_write+0x1ac>)
   24212:	4798      	blx	r3
   24214:	1e03      	subs	r3, r0, #0
   24216:	d012      	beq.n	2423e <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   24218:	4a3b      	ldr	r2, [pc, #236]	; (24308 <spi_data_write+0x1b0>)
   2421a:	493c      	ldr	r1, [pc, #240]	; (2430c <spi_data_write+0x1b4>)
   2421c:	4b3c      	ldr	r3, [pc, #240]	; (24310 <spi_data_write+0x1b8>)
   2421e:	0018      	movs	r0, r3
   24220:	4b3c      	ldr	r3, [pc, #240]	; (24314 <spi_data_write+0x1bc>)
   24222:	4798      	blx	r3
   24224:	4b3c      	ldr	r3, [pc, #240]	; (24318 <spi_data_write+0x1c0>)
   24226:	0018      	movs	r0, r3
   24228:	4b3a      	ldr	r3, [pc, #232]	; (24314 <spi_data_write+0x1bc>)
   2422a:	4798      	blx	r3
   2422c:	4b3b      	ldr	r3, [pc, #236]	; (2431c <spi_data_write+0x1c4>)
   2422e:	0018      	movs	r0, r3
   24230:	4b38      	ldr	r3, [pc, #224]	; (24314 <spi_data_write+0x1bc>)
   24232:	4798      	blx	r3
			result = N_FAIL;
   24234:	2313      	movs	r3, #19
   24236:	18fb      	adds	r3, r7, r3
   24238:	2200      	movs	r2, #0
   2423a:	701a      	strb	r2, [r3, #0]
			break;
   2423c:	e059      	b.n	242f2 <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   2423e:	2316      	movs	r3, #22
   24240:	18fb      	adds	r3, r7, r3
   24242:	2200      	movs	r2, #0
   24244:	5e9b      	ldrsh	r3, [r3, r2]
   24246:	687a      	ldr	r2, [r7, #4]
   24248:	18d2      	adds	r2, r2, r3
   2424a:	2314      	movs	r3, #20
   2424c:	18fb      	adds	r3, r7, r3
   2424e:	881b      	ldrh	r3, [r3, #0]
   24250:	0019      	movs	r1, r3
   24252:	0010      	movs	r0, r2
   24254:	4b2b      	ldr	r3, [pc, #172]	; (24304 <spi_data_write+0x1ac>)
   24256:	4798      	blx	r3
   24258:	1e03      	subs	r3, r0, #0
   2425a:	d012      	beq.n	24282 <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   2425c:	4a30      	ldr	r2, [pc, #192]	; (24320 <spi_data_write+0x1c8>)
   2425e:	492b      	ldr	r1, [pc, #172]	; (2430c <spi_data_write+0x1b4>)
   24260:	4b2b      	ldr	r3, [pc, #172]	; (24310 <spi_data_write+0x1b8>)
   24262:	0018      	movs	r0, r3
   24264:	4b2b      	ldr	r3, [pc, #172]	; (24314 <spi_data_write+0x1bc>)
   24266:	4798      	blx	r3
   24268:	4b2e      	ldr	r3, [pc, #184]	; (24324 <spi_data_write+0x1cc>)
   2426a:	0018      	movs	r0, r3
   2426c:	4b29      	ldr	r3, [pc, #164]	; (24314 <spi_data_write+0x1bc>)
   2426e:	4798      	blx	r3
   24270:	4b2a      	ldr	r3, [pc, #168]	; (2431c <spi_data_write+0x1c4>)
   24272:	0018      	movs	r0, r3
   24274:	4b27      	ldr	r3, [pc, #156]	; (24314 <spi_data_write+0x1bc>)
   24276:	4798      	blx	r3
			result = N_FAIL;
   24278:	2313      	movs	r3, #19
   2427a:	18fb      	adds	r3, r7, r3
   2427c:	2200      	movs	r2, #0
   2427e:	701a      	strb	r2, [r3, #0]
			break;
   24280:	e037      	b.n	242f2 <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   24282:	4b29      	ldr	r3, [pc, #164]	; (24328 <spi_data_write+0x1d0>)
   24284:	781b      	ldrb	r3, [r3, #0]
   24286:	2b00      	cmp	r3, #0
   24288:	d11b      	bne.n	242c2 <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   2428a:	230c      	movs	r3, #12
   2428c:	18fb      	adds	r3, r7, r3
   2428e:	2102      	movs	r1, #2
   24290:	0018      	movs	r0, r3
   24292:	4b1c      	ldr	r3, [pc, #112]	; (24304 <spi_data_write+0x1ac>)
   24294:	4798      	blx	r3
   24296:	1e03      	subs	r3, r0, #0
   24298:	d013      	beq.n	242c2 <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   2429a:	23d7      	movs	r3, #215	; 0xd7
   2429c:	009a      	lsls	r2, r3, #2
   2429e:	491b      	ldr	r1, [pc, #108]	; (2430c <spi_data_write+0x1b4>)
   242a0:	4b1b      	ldr	r3, [pc, #108]	; (24310 <spi_data_write+0x1b8>)
   242a2:	0018      	movs	r0, r3
   242a4:	4b1b      	ldr	r3, [pc, #108]	; (24314 <spi_data_write+0x1bc>)
   242a6:	4798      	blx	r3
   242a8:	4b20      	ldr	r3, [pc, #128]	; (2432c <spi_data_write+0x1d4>)
   242aa:	0018      	movs	r0, r3
   242ac:	4b19      	ldr	r3, [pc, #100]	; (24314 <spi_data_write+0x1bc>)
   242ae:	4798      	blx	r3
   242b0:	4b1a      	ldr	r3, [pc, #104]	; (2431c <spi_data_write+0x1c4>)
   242b2:	0018      	movs	r0, r3
   242b4:	4b17      	ldr	r3, [pc, #92]	; (24314 <spi_data_write+0x1bc>)
   242b6:	4798      	blx	r3
				result = N_FAIL;
   242b8:	2313      	movs	r3, #19
   242ba:	18fb      	adds	r3, r7, r3
   242bc:	2200      	movs	r2, #0
   242be:	701a      	strb	r2, [r3, #0]
				break;
   242c0:	e017      	b.n	242f2 <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   242c2:	2316      	movs	r3, #22
   242c4:	18fb      	adds	r3, r7, r3
   242c6:	881a      	ldrh	r2, [r3, #0]
   242c8:	2314      	movs	r3, #20
   242ca:	18fb      	adds	r3, r7, r3
   242cc:	881b      	ldrh	r3, [r3, #0]
   242ce:	18d3      	adds	r3, r2, r3
   242d0:	b29a      	uxth	r2, r3
   242d2:	2316      	movs	r3, #22
   242d4:	18fb      	adds	r3, r7, r3
   242d6:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   242d8:	1cbb      	adds	r3, r7, #2
   242da:	1cb9      	adds	r1, r7, #2
   242dc:	2214      	movs	r2, #20
   242de:	18ba      	adds	r2, r7, r2
   242e0:	8809      	ldrh	r1, [r1, #0]
   242e2:	8812      	ldrh	r2, [r2, #0]
   242e4:	1a8a      	subs	r2, r1, r2
   242e6:	801a      	strh	r2, [r3, #0]
	} while (sz);
   242e8:	1cbb      	adds	r3, r7, #2
   242ea:	881b      	ldrh	r3, [r3, #0]
   242ec:	2b00      	cmp	r3, #0
   242ee:	d000      	beq.n	242f2 <spi_data_write+0x19a>
   242f0:	e745      	b.n	2417e <spi_data_write+0x26>


	return result;
   242f2:	2313      	movs	r3, #19
   242f4:	18fb      	adds	r3, r7, r3
   242f6:	781b      	ldrb	r3, [r3, #0]
   242f8:	b25b      	sxtb	r3, r3
}
   242fa:	0018      	movs	r0, r3
   242fc:	46bd      	mov	sp, r7
   242fe:	b006      	add	sp, #24
   24300:	bd80      	pop	{r7, pc}
   24302:	46c0      	nop			; (mov r8, r8)
   24304:	000231e1 	.word	0x000231e1
   24308:	00000349 	.word	0x00000349
   2430c:	00039354 	.word	0x00039354
   24310:	00038d2c 	.word	0x00038d2c
   24314:	0001de29 	.word	0x0001de29
   24318:	00038ff4 	.word	0x00038ff4
   2431c:	00038d6c 	.word	0x00038d6c
   24320:	00000352 	.word	0x00000352
   24324:	0003902c 	.word	0x0003902c
   24328:	200042ac 	.word	0x200042ac
   2432c:	00039060 	.word	0x00039060

00024330 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   24330:	b590      	push	{r4, r7, lr}
   24332:	b087      	sub	sp, #28
   24334:	af02      	add	r7, sp, #8
   24336:	6078      	str	r0, [r7, #4]
   24338:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   2433a:	230f      	movs	r3, #15
   2433c:	18fb      	adds	r3, r7, r3
   2433e:	220a      	movs	r2, #10
   24340:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   24342:	230c      	movs	r3, #12
   24344:	18fb      	adds	r3, r7, r3
   24346:	2201      	movs	r2, #1
   24348:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   2434a:	230e      	movs	r3, #14
   2434c:	18fb      	adds	r3, r7, r3
   2434e:	22c9      	movs	r2, #201	; 0xc9
   24350:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   24352:	230d      	movs	r3, #13
   24354:	18fb      	adds	r3, r7, r3
   24356:	2200      	movs	r2, #0
   24358:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   2435a:	687b      	ldr	r3, [r7, #4]
   2435c:	2b30      	cmp	r3, #48	; 0x30
   2435e:	d808      	bhi.n	24372 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   24360:	230e      	movs	r3, #14
   24362:	18fb      	adds	r3, r7, r3
   24364:	22c3      	movs	r2, #195	; 0xc3
   24366:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   24368:	230d      	movs	r3, #13
   2436a:	18fb      	adds	r3, r7, r3
   2436c:	2201      	movs	r2, #1
   2436e:	701a      	strb	r2, [r3, #0]
   24370:	e007      	b.n	24382 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   24372:	230e      	movs	r3, #14
   24374:	18fb      	adds	r3, r7, r3
   24376:	22c9      	movs	r2, #201	; 0xc9
   24378:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   2437a:	230d      	movs	r3, #13
   2437c:	18fb      	adds	r3, r7, r3
   2437e:	2200      	movs	r2, #0
   24380:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   24382:	003a      	movs	r2, r7
   24384:	6879      	ldr	r1, [r7, #4]
   24386:	230e      	movs	r3, #14
   24388:	18fb      	adds	r3, r7, r3
   2438a:	7818      	ldrb	r0, [r3, #0]
   2438c:	230d      	movs	r3, #13
   2438e:	18fb      	adds	r3, r7, r3
   24390:	781b      	ldrb	r3, [r3, #0]
   24392:	9300      	str	r3, [sp, #0]
   24394:	2304      	movs	r3, #4
   24396:	4c2e      	ldr	r4, [pc, #184]	; (24450 <spi_write_reg+0x120>)
   24398:	47a0      	blx	r4
   2439a:	0002      	movs	r2, r0
   2439c:	230c      	movs	r3, #12
   2439e:	18fb      	adds	r3, r7, r3
   243a0:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   243a2:	230c      	movs	r3, #12
   243a4:	18fb      	adds	r3, r7, r3
   243a6:	781b      	ldrb	r3, [r3, #0]
   243a8:	b25b      	sxtb	r3, r3
   243aa:	2b01      	cmp	r3, #1
   243ac:	d010      	beq.n	243d0 <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   243ae:	4a29      	ldr	r2, [pc, #164]	; (24454 <spi_write_reg+0x124>)
   243b0:	4929      	ldr	r1, [pc, #164]	; (24458 <spi_write_reg+0x128>)
   243b2:	4b2a      	ldr	r3, [pc, #168]	; (2445c <spi_write_reg+0x12c>)
   243b4:	0018      	movs	r0, r3
   243b6:	4b2a      	ldr	r3, [pc, #168]	; (24460 <spi_write_reg+0x130>)
   243b8:	4798      	blx	r3
   243ba:	687a      	ldr	r2, [r7, #4]
   243bc:	4b29      	ldr	r3, [pc, #164]	; (24464 <spi_write_reg+0x134>)
   243be:	0011      	movs	r1, r2
   243c0:	0018      	movs	r0, r3
   243c2:	4b27      	ldr	r3, [pc, #156]	; (24460 <spi_write_reg+0x130>)
   243c4:	4798      	blx	r3
   243c6:	4b28      	ldr	r3, [pc, #160]	; (24468 <spi_write_reg+0x138>)
   243c8:	0018      	movs	r0, r3
   243ca:	4b25      	ldr	r3, [pc, #148]	; (24460 <spi_write_reg+0x130>)
   243cc:	4798      	blx	r3
		goto _FAIL_;
   243ce:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   243d0:	230c      	movs	r3, #12
   243d2:	18fb      	adds	r3, r7, r3
   243d4:	781b      	ldrb	r3, [r3, #0]
   243d6:	b25b      	sxtb	r3, r3
   243d8:	2b01      	cmp	r3, #1
   243da:	d030      	beq.n	2443e <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   243dc:	2001      	movs	r0, #1
   243de:	4b23      	ldr	r3, [pc, #140]	; (2446c <spi_write_reg+0x13c>)
   243e0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   243e2:	2300      	movs	r3, #0
   243e4:	9300      	str	r3, [sp, #0]
   243e6:	2300      	movs	r3, #0
   243e8:	2200      	movs	r2, #0
   243ea:	2100      	movs	r1, #0
   243ec:	20cf      	movs	r0, #207	; 0xcf
   243ee:	4c20      	ldr	r4, [pc, #128]	; (24470 <spi_write_reg+0x140>)
   243f0:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   243f2:	20cf      	movs	r0, #207	; 0xcf
   243f4:	4b1f      	ldr	r3, [pc, #124]	; (24474 <spi_write_reg+0x144>)
   243f6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   243f8:	23ea      	movs	r3, #234	; 0xea
   243fa:	009a      	lsls	r2, r3, #2
   243fc:	4916      	ldr	r1, [pc, #88]	; (24458 <spi_write_reg+0x128>)
   243fe:	4b17      	ldr	r3, [pc, #92]	; (2445c <spi_write_reg+0x12c>)
   24400:	0018      	movs	r0, r3
   24402:	4b17      	ldr	r3, [pc, #92]	; (24460 <spi_write_reg+0x130>)
   24404:	4798      	blx	r3
   24406:	230f      	movs	r3, #15
   24408:	18fb      	adds	r3, r7, r3
   2440a:	7819      	ldrb	r1, [r3, #0]
   2440c:	683b      	ldr	r3, [r7, #0]
   2440e:	687a      	ldr	r2, [r7, #4]
   24410:	4819      	ldr	r0, [pc, #100]	; (24478 <spi_write_reg+0x148>)
   24412:	4c13      	ldr	r4, [pc, #76]	; (24460 <spi_write_reg+0x130>)
   24414:	47a0      	blx	r4
   24416:	4b14      	ldr	r3, [pc, #80]	; (24468 <spi_write_reg+0x138>)
   24418:	0018      	movs	r0, r3
   2441a:	4b11      	ldr	r3, [pc, #68]	; (24460 <spi_write_reg+0x130>)
   2441c:	4798      	blx	r3
		nm_bsp_sleep(1);
   2441e:	2001      	movs	r0, #1
   24420:	4b12      	ldr	r3, [pc, #72]	; (2446c <spi_write_reg+0x13c>)
   24422:	4798      	blx	r3
		retry--;
   24424:	230f      	movs	r3, #15
   24426:	18fb      	adds	r3, r7, r3
   24428:	781a      	ldrb	r2, [r3, #0]
   2442a:	230f      	movs	r3, #15
   2442c:	18fb      	adds	r3, r7, r3
   2442e:	3a01      	subs	r2, #1
   24430:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   24432:	230f      	movs	r3, #15
   24434:	18fb      	adds	r3, r7, r3
   24436:	781b      	ldrb	r3, [r3, #0]
   24438:	2b00      	cmp	r3, #0
   2443a:	d000      	beq.n	2443e <spi_write_reg+0x10e>
   2443c:	e78d      	b.n	2435a <spi_write_reg+0x2a>
	}

	return result;
   2443e:	230c      	movs	r3, #12
   24440:	18fb      	adds	r3, r7, r3
   24442:	781b      	ldrb	r3, [r3, #0]
   24444:	b25b      	sxtb	r3, r3
}
   24446:	0018      	movs	r0, r3
   24448:	46bd      	mov	sp, r7
   2444a:	b005      	add	sp, #20
   2444c:	bd90      	pop	{r4, r7, pc}
   2444e:	46c0      	nop			; (mov r8, r8)
   24450:	00023865 	.word	0x00023865
   24454:	0000039d 	.word	0x0000039d
   24458:	00039364 	.word	0x00039364
   2445c:	00038d2c 	.word	0x00038d2c
   24460:	0001de29 	.word	0x0001de29
   24464:	00039098 	.word	0x00039098
   24468:	00038d6c 	.word	0x00038d6c
   2446c:	0002027d 	.word	0x0002027d
   24470:	000232e9 	.word	0x000232e9
   24474:	00023729 	.word	0x00023729
   24478:	000390c4 	.word	0x000390c4

0002447c <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   2447c:	b590      	push	{r4, r7, lr}
   2447e:	b089      	sub	sp, #36	; 0x24
   24480:	af02      	add	r7, sp, #8
   24482:	60f8      	str	r0, [r7, #12]
   24484:	60b9      	str	r1, [r7, #8]
   24486:	1dbb      	adds	r3, r7, #6
   24488:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   2448a:	2316      	movs	r3, #22
   2448c:	18fb      	adds	r3, r7, r3
   2448e:	220a      	movs	r2, #10
   24490:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   24492:	2315      	movs	r3, #21
   24494:	18fb      	adds	r3, r7, r3
   24496:	22c7      	movs	r2, #199	; 0xc7
   24498:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   2449a:	1dbb      	adds	r3, r7, #6
   2449c:	881a      	ldrh	r2, [r3, #0]
   2449e:	68f9      	ldr	r1, [r7, #12]
   244a0:	2315      	movs	r3, #21
   244a2:	18fb      	adds	r3, r7, r3
   244a4:	7818      	ldrb	r0, [r3, #0]
   244a6:	2300      	movs	r3, #0
   244a8:	9300      	str	r3, [sp, #0]
   244aa:	0013      	movs	r3, r2
   244ac:	2200      	movs	r2, #0
   244ae:	4c4d      	ldr	r4, [pc, #308]	; (245e4 <nm_spi_write+0x168>)
   244b0:	47a0      	blx	r4
   244b2:	0002      	movs	r2, r0
   244b4:	2317      	movs	r3, #23
   244b6:	18fb      	adds	r3, r7, r3
   244b8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   244ba:	2317      	movs	r3, #23
   244bc:	18fb      	adds	r3, r7, r3
   244be:	781b      	ldrb	r3, [r3, #0]
   244c0:	b25b      	sxtb	r3, r3
   244c2:	2b01      	cmp	r3, #1
   244c4:	d010      	beq.n	244e8 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   244c6:	4a48      	ldr	r2, [pc, #288]	; (245e8 <nm_spi_write+0x16c>)
   244c8:	4948      	ldr	r1, [pc, #288]	; (245ec <nm_spi_write+0x170>)
   244ca:	4b49      	ldr	r3, [pc, #292]	; (245f0 <nm_spi_write+0x174>)
   244cc:	0018      	movs	r0, r3
   244ce:	4b49      	ldr	r3, [pc, #292]	; (245f4 <nm_spi_write+0x178>)
   244d0:	4798      	blx	r3
   244d2:	68fa      	ldr	r2, [r7, #12]
   244d4:	4b48      	ldr	r3, [pc, #288]	; (245f8 <nm_spi_write+0x17c>)
   244d6:	0011      	movs	r1, r2
   244d8:	0018      	movs	r0, r3
   244da:	4b46      	ldr	r3, [pc, #280]	; (245f4 <nm_spi_write+0x178>)
   244dc:	4798      	blx	r3
   244de:	4b47      	ldr	r3, [pc, #284]	; (245fc <nm_spi_write+0x180>)
   244e0:	0018      	movs	r0, r3
   244e2:	4b44      	ldr	r3, [pc, #272]	; (245f4 <nm_spi_write+0x178>)
   244e4:	4798      	blx	r3
		goto _FAIL_;
   244e6:	e03e      	b.n	24566 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   244e8:	2317      	movs	r3, #23
   244ea:	18fc      	adds	r4, r7, r3
   244ec:	1dbb      	adds	r3, r7, #6
   244ee:	881a      	ldrh	r2, [r3, #0]
   244f0:	68bb      	ldr	r3, [r7, #8]
   244f2:	0011      	movs	r1, r2
   244f4:	0018      	movs	r0, r3
   244f6:	4b42      	ldr	r3, [pc, #264]	; (24600 <nm_spi_write+0x184>)
   244f8:	4798      	blx	r3
   244fa:	0003      	movs	r3, r0
   244fc:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   244fe:	2317      	movs	r3, #23
   24500:	18fb      	adds	r3, r7, r3
   24502:	781b      	ldrb	r3, [r3, #0]
   24504:	b25b      	sxtb	r3, r3
   24506:	2b01      	cmp	r3, #1
   24508:	d00e      	beq.n	24528 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   2450a:	4a3e      	ldr	r2, [pc, #248]	; (24604 <nm_spi_write+0x188>)
   2450c:	4937      	ldr	r1, [pc, #220]	; (245ec <nm_spi_write+0x170>)
   2450e:	4b38      	ldr	r3, [pc, #224]	; (245f0 <nm_spi_write+0x174>)
   24510:	0018      	movs	r0, r3
   24512:	4b38      	ldr	r3, [pc, #224]	; (245f4 <nm_spi_write+0x178>)
   24514:	4798      	blx	r3
   24516:	4b3c      	ldr	r3, [pc, #240]	; (24608 <nm_spi_write+0x18c>)
   24518:	0018      	movs	r0, r3
   2451a:	4b36      	ldr	r3, [pc, #216]	; (245f4 <nm_spi_write+0x178>)
   2451c:	4798      	blx	r3
   2451e:	4b37      	ldr	r3, [pc, #220]	; (245fc <nm_spi_write+0x180>)
   24520:	0018      	movs	r0, r3
   24522:	4b34      	ldr	r3, [pc, #208]	; (245f4 <nm_spi_write+0x178>)
   24524:	4798      	blx	r3
		goto _FAIL_;
   24526:	e01e      	b.n	24566 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   24528:	2317      	movs	r3, #23
   2452a:	18fc      	adds	r4, r7, r3
   2452c:	2315      	movs	r3, #21
   2452e:	18fb      	adds	r3, r7, r3
   24530:	781b      	ldrb	r3, [r3, #0]
   24532:	0018      	movs	r0, r3
   24534:	4b35      	ldr	r3, [pc, #212]	; (2460c <nm_spi_write+0x190>)
   24536:	4798      	blx	r3
   24538:	0003      	movs	r3, r0
   2453a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   2453c:	2317      	movs	r3, #23
   2453e:	18fb      	adds	r3, r7, r3
   24540:	781b      	ldrb	r3, [r3, #0]
   24542:	b25b      	sxtb	r3, r3
   24544:	2b01      	cmp	r3, #1
   24546:	d00e      	beq.n	24566 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   24548:	4a31      	ldr	r2, [pc, #196]	; (24610 <nm_spi_write+0x194>)
   2454a:	4928      	ldr	r1, [pc, #160]	; (245ec <nm_spi_write+0x170>)
   2454c:	4b28      	ldr	r3, [pc, #160]	; (245f0 <nm_spi_write+0x174>)
   2454e:	0018      	movs	r0, r3
   24550:	4b28      	ldr	r3, [pc, #160]	; (245f4 <nm_spi_write+0x178>)
   24552:	4798      	blx	r3
   24554:	4b2c      	ldr	r3, [pc, #176]	; (24608 <nm_spi_write+0x18c>)
   24556:	0018      	movs	r0, r3
   24558:	4b26      	ldr	r3, [pc, #152]	; (245f4 <nm_spi_write+0x178>)
   2455a:	4798      	blx	r3
   2455c:	4b27      	ldr	r3, [pc, #156]	; (245fc <nm_spi_write+0x180>)
   2455e:	0018      	movs	r0, r3
   24560:	4b24      	ldr	r3, [pc, #144]	; (245f4 <nm_spi_write+0x178>)
   24562:	4798      	blx	r3
		goto _FAIL_;
   24564:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   24566:	2317      	movs	r3, #23
   24568:	18fb      	adds	r3, r7, r3
   2456a:	781b      	ldrb	r3, [r3, #0]
   2456c:	b25b      	sxtb	r3, r3
   2456e:	2b01      	cmp	r3, #1
   24570:	d030      	beq.n	245d4 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   24572:	2001      	movs	r0, #1
   24574:	4b27      	ldr	r3, [pc, #156]	; (24614 <nm_spi_write+0x198>)
   24576:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24578:	2300      	movs	r3, #0
   2457a:	9300      	str	r3, [sp, #0]
   2457c:	2300      	movs	r3, #0
   2457e:	2200      	movs	r2, #0
   24580:	2100      	movs	r1, #0
   24582:	20cf      	movs	r0, #207	; 0xcf
   24584:	4c24      	ldr	r4, [pc, #144]	; (24618 <nm_spi_write+0x19c>)
   24586:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24588:	20cf      	movs	r0, #207	; 0xcf
   2458a:	4b24      	ldr	r3, [pc, #144]	; (2461c <nm_spi_write+0x1a0>)
   2458c:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   2458e:	4a24      	ldr	r2, [pc, #144]	; (24620 <nm_spi_write+0x1a4>)
   24590:	4916      	ldr	r1, [pc, #88]	; (245ec <nm_spi_write+0x170>)
   24592:	4b17      	ldr	r3, [pc, #92]	; (245f0 <nm_spi_write+0x174>)
   24594:	0018      	movs	r0, r3
   24596:	4b17      	ldr	r3, [pc, #92]	; (245f4 <nm_spi_write+0x178>)
   24598:	4798      	blx	r3
   2459a:	2316      	movs	r3, #22
   2459c:	18fb      	adds	r3, r7, r3
   2459e:	7819      	ldrb	r1, [r3, #0]
   245a0:	1dbb      	adds	r3, r7, #6
   245a2:	881b      	ldrh	r3, [r3, #0]
   245a4:	68fa      	ldr	r2, [r7, #12]
   245a6:	481f      	ldr	r0, [pc, #124]	; (24624 <nm_spi_write+0x1a8>)
   245a8:	4c12      	ldr	r4, [pc, #72]	; (245f4 <nm_spi_write+0x178>)
   245aa:	47a0      	blx	r4
   245ac:	4b13      	ldr	r3, [pc, #76]	; (245fc <nm_spi_write+0x180>)
   245ae:	0018      	movs	r0, r3
   245b0:	4b10      	ldr	r3, [pc, #64]	; (245f4 <nm_spi_write+0x178>)
   245b2:	4798      	blx	r3
		nm_bsp_sleep(1);
   245b4:	2001      	movs	r0, #1
   245b6:	4b17      	ldr	r3, [pc, #92]	; (24614 <nm_spi_write+0x198>)
   245b8:	4798      	blx	r3
		retry--;
   245ba:	2316      	movs	r3, #22
   245bc:	18fb      	adds	r3, r7, r3
   245be:	781a      	ldrb	r2, [r3, #0]
   245c0:	2316      	movs	r3, #22
   245c2:	18fb      	adds	r3, r7, r3
   245c4:	3a01      	subs	r2, #1
   245c6:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   245c8:	2316      	movs	r3, #22
   245ca:	18fb      	adds	r3, r7, r3
   245cc:	781b      	ldrb	r3, [r3, #0]
   245ce:	2b00      	cmp	r3, #0
   245d0:	d000      	beq.n	245d4 <nm_spi_write+0x158>
   245d2:	e762      	b.n	2449a <nm_spi_write+0x1e>
	}


	return result;
   245d4:	2317      	movs	r3, #23
   245d6:	18fb      	adds	r3, r7, r3
   245d8:	781b      	ldrb	r3, [r3, #0]
   245da:	b25b      	sxtb	r3, r3
}
   245dc:	0018      	movs	r0, r3
   245de:	46bd      	mov	sp, r7
   245e0:	b007      	add	sp, #28
   245e2:	bd90      	pop	{r4, r7, pc}
   245e4:	00023865 	.word	0x00023865
   245e8:	000003cf 	.word	0x000003cf
   245ec:	00039374 	.word	0x00039374
   245f0:	00038d2c 	.word	0x00038d2c
   245f4:	0001de29 	.word	0x0001de29
   245f8:	000390e0 	.word	0x000390e0
   245fc:	00038d6c 	.word	0x00038d6c
   24600:	00024159 	.word	0x00024159
   24604:	000003d9 	.word	0x000003d9
   24608:	00039110 	.word	0x00039110
   2460c:	00023629 	.word	0x00023629
   24610:	000003e1 	.word	0x000003e1
   24614:	0002027d 	.word	0x0002027d
   24618:	000232e9 	.word	0x000232e9
   2461c:	00023729 	.word	0x00023729
   24620:	000003eb 	.word	0x000003eb
   24624:	00039138 	.word	0x00039138

00024628 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   24628:	b590      	push	{r4, r7, lr}
   2462a:	b087      	sub	sp, #28
   2462c:	af02      	add	r7, sp, #8
   2462e:	6078      	str	r0, [r7, #4]
   24630:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   24632:	230f      	movs	r3, #15
   24634:	18fb      	adds	r3, r7, r3
   24636:	220a      	movs	r2, #10
   24638:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   2463a:	230c      	movs	r3, #12
   2463c:	18fb      	adds	r3, r7, r3
   2463e:	2201      	movs	r2, #1
   24640:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   24642:	230e      	movs	r3, #14
   24644:	18fb      	adds	r3, r7, r3
   24646:	22ca      	movs	r2, #202	; 0xca
   24648:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   2464a:	230d      	movs	r3, #13
   2464c:	18fb      	adds	r3, r7, r3
   2464e:	2200      	movs	r2, #0
   24650:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   24652:	687b      	ldr	r3, [r7, #4]
   24654:	2bff      	cmp	r3, #255	; 0xff
   24656:	d808      	bhi.n	2466a <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   24658:	230e      	movs	r3, #14
   2465a:	18fb      	adds	r3, r7, r3
   2465c:	22c4      	movs	r2, #196	; 0xc4
   2465e:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   24660:	230d      	movs	r3, #13
   24662:	18fb      	adds	r3, r7, r3
   24664:	2201      	movs	r2, #1
   24666:	701a      	strb	r2, [r3, #0]
   24668:	e007      	b.n	2467a <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   2466a:	230e      	movs	r3, #14
   2466c:	18fb      	adds	r3, r7, r3
   2466e:	22ca      	movs	r2, #202	; 0xca
   24670:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   24672:	230d      	movs	r3, #13
   24674:	18fb      	adds	r3, r7, r3
   24676:	2200      	movs	r2, #0
   24678:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   2467a:	2308      	movs	r3, #8
   2467c:	18fa      	adds	r2, r7, r3
   2467e:	6879      	ldr	r1, [r7, #4]
   24680:	230e      	movs	r3, #14
   24682:	18fb      	adds	r3, r7, r3
   24684:	7818      	ldrb	r0, [r3, #0]
   24686:	230d      	movs	r3, #13
   24688:	18fb      	adds	r3, r7, r3
   2468a:	781b      	ldrb	r3, [r3, #0]
   2468c:	9300      	str	r3, [sp, #0]
   2468e:	2304      	movs	r3, #4
   24690:	4c37      	ldr	r4, [pc, #220]	; (24770 <spi_read_reg+0x148>)
   24692:	47a0      	blx	r4
   24694:	0002      	movs	r2, r0
   24696:	230c      	movs	r3, #12
   24698:	18fb      	adds	r3, r7, r3
   2469a:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2469c:	230c      	movs	r3, #12
   2469e:	18fb      	adds	r3, r7, r3
   246a0:	781b      	ldrb	r3, [r3, #0]
   246a2:	b25b      	sxtb	r3, r3
   246a4:	2b01      	cmp	r3, #1
   246a6:	d010      	beq.n	246ca <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   246a8:	4a32      	ldr	r2, [pc, #200]	; (24774 <spi_read_reg+0x14c>)
   246aa:	4933      	ldr	r1, [pc, #204]	; (24778 <spi_read_reg+0x150>)
   246ac:	4b33      	ldr	r3, [pc, #204]	; (2477c <spi_read_reg+0x154>)
   246ae:	0018      	movs	r0, r3
   246b0:	4b33      	ldr	r3, [pc, #204]	; (24780 <spi_read_reg+0x158>)
   246b2:	4798      	blx	r3
   246b4:	687a      	ldr	r2, [r7, #4]
   246b6:	4b33      	ldr	r3, [pc, #204]	; (24784 <spi_read_reg+0x15c>)
   246b8:	0011      	movs	r1, r2
   246ba:	0018      	movs	r0, r3
   246bc:	4b30      	ldr	r3, [pc, #192]	; (24780 <spi_read_reg+0x158>)
   246be:	4798      	blx	r3
   246c0:	4b31      	ldr	r3, [pc, #196]	; (24788 <spi_read_reg+0x160>)
   246c2:	0018      	movs	r0, r3
   246c4:	4b2e      	ldr	r3, [pc, #184]	; (24780 <spi_read_reg+0x158>)
   246c6:	4798      	blx	r3
		goto _FAIL_;
   246c8:	e014      	b.n	246f4 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   246ca:	2308      	movs	r3, #8
   246cc:	18fb      	adds	r3, r7, r3
   246ce:	781b      	ldrb	r3, [r3, #0]
   246d0:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   246d2:	2308      	movs	r3, #8
   246d4:	18fb      	adds	r3, r7, r3
   246d6:	785b      	ldrb	r3, [r3, #1]
   246d8:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   246da:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   246dc:	2308      	movs	r3, #8
   246de:	18fb      	adds	r3, r7, r3
   246e0:	789b      	ldrb	r3, [r3, #2]
   246e2:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   246e4:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   246e6:	2308      	movs	r3, #8
   246e8:	18fb      	adds	r3, r7, r3
   246ea:	78db      	ldrb	r3, [r3, #3]
   246ec:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   246ee:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   246f0:	683b      	ldr	r3, [r7, #0]
   246f2:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   246f4:	230c      	movs	r3, #12
   246f6:	18fb      	adds	r3, r7, r3
   246f8:	781b      	ldrb	r3, [r3, #0]
   246fa:	b25b      	sxtb	r3, r3
   246fc:	2b01      	cmp	r3, #1
   246fe:	d02f      	beq.n	24760 <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   24700:	2001      	movs	r0, #1
   24702:	4b22      	ldr	r3, [pc, #136]	; (2478c <spi_read_reg+0x164>)
   24704:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24706:	2300      	movs	r3, #0
   24708:	9300      	str	r3, [sp, #0]
   2470a:	2300      	movs	r3, #0
   2470c:	2200      	movs	r2, #0
   2470e:	2100      	movs	r1, #0
   24710:	20cf      	movs	r0, #207	; 0xcf
   24712:	4c1f      	ldr	r4, [pc, #124]	; (24790 <spi_read_reg+0x168>)
   24714:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24716:	20cf      	movs	r0, #207	; 0xcf
   24718:	4b1e      	ldr	r3, [pc, #120]	; (24794 <spi_read_reg+0x16c>)
   2471a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   2471c:	4a1e      	ldr	r2, [pc, #120]	; (24798 <spi_read_reg+0x170>)
   2471e:	4916      	ldr	r1, [pc, #88]	; (24778 <spi_read_reg+0x150>)
   24720:	4b16      	ldr	r3, [pc, #88]	; (2477c <spi_read_reg+0x154>)
   24722:	0018      	movs	r0, r3
   24724:	4b16      	ldr	r3, [pc, #88]	; (24780 <spi_read_reg+0x158>)
   24726:	4798      	blx	r3
   24728:	230f      	movs	r3, #15
   2472a:	18fb      	adds	r3, r7, r3
   2472c:	7819      	ldrb	r1, [r3, #0]
   2472e:	687a      	ldr	r2, [r7, #4]
   24730:	4b1a      	ldr	r3, [pc, #104]	; (2479c <spi_read_reg+0x174>)
   24732:	0018      	movs	r0, r3
   24734:	4b12      	ldr	r3, [pc, #72]	; (24780 <spi_read_reg+0x158>)
   24736:	4798      	blx	r3
   24738:	4b13      	ldr	r3, [pc, #76]	; (24788 <spi_read_reg+0x160>)
   2473a:	0018      	movs	r0, r3
   2473c:	4b10      	ldr	r3, [pc, #64]	; (24780 <spi_read_reg+0x158>)
   2473e:	4798      	blx	r3
		nm_bsp_sleep(1);
   24740:	2001      	movs	r0, #1
   24742:	4b12      	ldr	r3, [pc, #72]	; (2478c <spi_read_reg+0x164>)
   24744:	4798      	blx	r3
		retry--;
   24746:	230f      	movs	r3, #15
   24748:	18fb      	adds	r3, r7, r3
   2474a:	781a      	ldrb	r2, [r3, #0]
   2474c:	230f      	movs	r3, #15
   2474e:	18fb      	adds	r3, r7, r3
   24750:	3a01      	subs	r2, #1
   24752:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   24754:	230f      	movs	r3, #15
   24756:	18fb      	adds	r3, r7, r3
   24758:	781b      	ldrb	r3, [r3, #0]
   2475a:	2b00      	cmp	r3, #0
   2475c:	d000      	beq.n	24760 <spi_read_reg+0x138>
   2475e:	e778      	b.n	24652 <spi_read_reg+0x2a>
	}
		
	return result;
   24760:	230c      	movs	r3, #12
   24762:	18fb      	adds	r3, r7, r3
   24764:	781b      	ldrb	r3, [r3, #0]
   24766:	b25b      	sxtb	r3, r3
}
   24768:	0018      	movs	r0, r3
   2476a:	46bd      	mov	sp, r7
   2476c:	b005      	add	sp, #20
   2476e:	bd90      	pop	{r4, r7, pc}
   24770:	00023865 	.word	0x00023865
   24774:	00000423 	.word	0x00000423
   24778:	00039384 	.word	0x00039384
   2477c:	00038d2c 	.word	0x00038d2c
   24780:	0001de29 	.word	0x0001de29
   24784:	00039154 	.word	0x00039154
   24788:	00038d6c 	.word	0x00038d6c
   2478c:	0002027d 	.word	0x0002027d
   24790:	000232e9 	.word	0x000232e9
   24794:	00023729 	.word	0x00023729
   24798:	00000435 	.word	0x00000435
   2479c:	00039180 	.word	0x00039180

000247a0 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   247a0:	b590      	push	{r4, r7, lr}
   247a2:	b089      	sub	sp, #36	; 0x24
   247a4:	af02      	add	r7, sp, #8
   247a6:	60f8      	str	r0, [r7, #12]
   247a8:	60b9      	str	r1, [r7, #8]
   247aa:	1dbb      	adds	r3, r7, #6
   247ac:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   247ae:	2316      	movs	r3, #22
   247b0:	18fb      	adds	r3, r7, r3
   247b2:	22c8      	movs	r2, #200	; 0xc8
   247b4:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   247b6:	2317      	movs	r3, #23
   247b8:	18fb      	adds	r3, r7, r3
   247ba:	220a      	movs	r2, #10
   247bc:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   247be:	1dbb      	adds	r3, r7, #6
   247c0:	881c      	ldrh	r4, [r3, #0]
   247c2:	68ba      	ldr	r2, [r7, #8]
   247c4:	68f9      	ldr	r1, [r7, #12]
   247c6:	2316      	movs	r3, #22
   247c8:	18fb      	adds	r3, r7, r3
   247ca:	7818      	ldrb	r0, [r3, #0]
   247cc:	2300      	movs	r3, #0
   247ce:	9300      	str	r3, [sp, #0]
   247d0:	0023      	movs	r3, r4
   247d2:	4c2e      	ldr	r4, [pc, #184]	; (2488c <nm_spi_read+0xec>)
   247d4:	47a0      	blx	r4
   247d6:	0002      	movs	r2, r0
   247d8:	2315      	movs	r3, #21
   247da:	18fb      	adds	r3, r7, r3
   247dc:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   247de:	2315      	movs	r3, #21
   247e0:	18fb      	adds	r3, r7, r3
   247e2:	781b      	ldrb	r3, [r3, #0]
   247e4:	b25b      	sxtb	r3, r3
   247e6:	2b01      	cmp	r3, #1
   247e8:	d010      	beq.n	2480c <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   247ea:	4a29      	ldr	r2, [pc, #164]	; (24890 <nm_spi_read+0xf0>)
   247ec:	4929      	ldr	r1, [pc, #164]	; (24894 <nm_spi_read+0xf4>)
   247ee:	4b2a      	ldr	r3, [pc, #168]	; (24898 <nm_spi_read+0xf8>)
   247f0:	0018      	movs	r0, r3
   247f2:	4b2a      	ldr	r3, [pc, #168]	; (2489c <nm_spi_read+0xfc>)
   247f4:	4798      	blx	r3
   247f6:	68fa      	ldr	r2, [r7, #12]
   247f8:	4b29      	ldr	r3, [pc, #164]	; (248a0 <nm_spi_read+0x100>)
   247fa:	0011      	movs	r1, r2
   247fc:	0018      	movs	r0, r3
   247fe:	4b27      	ldr	r3, [pc, #156]	; (2489c <nm_spi_read+0xfc>)
   24800:	4798      	blx	r3
   24802:	4b28      	ldr	r3, [pc, #160]	; (248a4 <nm_spi_read+0x104>)
   24804:	0018      	movs	r0, r3
   24806:	4b25      	ldr	r3, [pc, #148]	; (2489c <nm_spi_read+0xfc>)
   24808:	4798      	blx	r3
		goto _FAIL_;
   2480a:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   2480c:	2315      	movs	r3, #21
   2480e:	18fb      	adds	r3, r7, r3
   24810:	781b      	ldrb	r3, [r3, #0]
   24812:	b25b      	sxtb	r3, r3
   24814:	2b01      	cmp	r3, #1
   24816:	d030      	beq.n	2487a <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   24818:	2001      	movs	r0, #1
   2481a:	4b23      	ldr	r3, [pc, #140]	; (248a8 <nm_spi_read+0x108>)
   2481c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2481e:	2300      	movs	r3, #0
   24820:	9300      	str	r3, [sp, #0]
   24822:	2300      	movs	r3, #0
   24824:	2200      	movs	r2, #0
   24826:	2100      	movs	r1, #0
   24828:	20cf      	movs	r0, #207	; 0xcf
   2482a:	4c20      	ldr	r4, [pc, #128]	; (248ac <nm_spi_read+0x10c>)
   2482c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2482e:	20cf      	movs	r0, #207	; 0xcf
   24830:	4b1f      	ldr	r3, [pc, #124]	; (248b0 <nm_spi_read+0x110>)
   24832:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   24834:	4a1f      	ldr	r2, [pc, #124]	; (248b4 <nm_spi_read+0x114>)
   24836:	4917      	ldr	r1, [pc, #92]	; (24894 <nm_spi_read+0xf4>)
   24838:	4b17      	ldr	r3, [pc, #92]	; (24898 <nm_spi_read+0xf8>)
   2483a:	0018      	movs	r0, r3
   2483c:	4b17      	ldr	r3, [pc, #92]	; (2489c <nm_spi_read+0xfc>)
   2483e:	4798      	blx	r3
   24840:	2317      	movs	r3, #23
   24842:	18fb      	adds	r3, r7, r3
   24844:	7819      	ldrb	r1, [r3, #0]
   24846:	1dbb      	adds	r3, r7, #6
   24848:	881b      	ldrh	r3, [r3, #0]
   2484a:	68fa      	ldr	r2, [r7, #12]
   2484c:	481a      	ldr	r0, [pc, #104]	; (248b8 <nm_spi_read+0x118>)
   2484e:	4c13      	ldr	r4, [pc, #76]	; (2489c <nm_spi_read+0xfc>)
   24850:	47a0      	blx	r4
   24852:	4b14      	ldr	r3, [pc, #80]	; (248a4 <nm_spi_read+0x104>)
   24854:	0018      	movs	r0, r3
   24856:	4b11      	ldr	r3, [pc, #68]	; (2489c <nm_spi_read+0xfc>)
   24858:	4798      	blx	r3
		nm_bsp_sleep(1);
   2485a:	2001      	movs	r0, #1
   2485c:	4b12      	ldr	r3, [pc, #72]	; (248a8 <nm_spi_read+0x108>)
   2485e:	4798      	blx	r3
		retry--;
   24860:	2317      	movs	r3, #23
   24862:	18fb      	adds	r3, r7, r3
   24864:	781a      	ldrb	r2, [r3, #0]
   24866:	2317      	movs	r3, #23
   24868:	18fb      	adds	r3, r7, r3
   2486a:	3a01      	subs	r2, #1
   2486c:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2486e:	2317      	movs	r3, #23
   24870:	18fb      	adds	r3, r7, r3
   24872:	781b      	ldrb	r3, [r3, #0]
   24874:	2b00      	cmp	r3, #0
   24876:	d000      	beq.n	2487a <nm_spi_read+0xda>
   24878:	e7a1      	b.n	247be <nm_spi_read+0x1e>
	}

	return result;
   2487a:	2315      	movs	r3, #21
   2487c:	18fb      	adds	r3, r7, r3
   2487e:	781b      	ldrb	r3, [r3, #0]
   24880:	b25b      	sxtb	r3, r3
}
   24882:	0018      	movs	r0, r3
   24884:	46bd      	mov	sp, r7
   24886:	b007      	add	sp, #28
   24888:	bd90      	pop	{r4, r7, pc}
   2488a:	46c0      	nop			; (mov r8, r8)
   2488c:	00023865 	.word	0x00023865
   24890:	00000472 	.word	0x00000472
   24894:	00039394 	.word	0x00039394
   24898:	00038d2c 	.word	0x00038d2c
   2489c:	0001de29 	.word	0x0001de29
   248a0:	00039198 	.word	0x00039198
   248a4:	00038d6c 	.word	0x00038d6c
   248a8:	0002027d 	.word	0x0002027d
   248ac:	000232e9 	.word	0x000232e9
   248b0:	00023729 	.word	0x00023729
   248b4:	0000047d 	.word	0x0000047d
   248b8:	00039138 	.word	0x00039138

000248bc <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   248bc:	b580      	push	{r7, lr}
   248be:	b082      	sub	sp, #8
   248c0:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   248c2:	4b0c      	ldr	r3, [pc, #48]	; (248f4 <spi_init_pkt_sz+0x38>)
   248c4:	0018      	movs	r0, r3
   248c6:	4b0c      	ldr	r3, [pc, #48]	; (248f8 <spi_init_pkt_sz+0x3c>)
   248c8:	4798      	blx	r3
   248ca:	0003      	movs	r3, r0
   248cc:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   248ce:	687b      	ldr	r3, [r7, #4]
   248d0:	2270      	movs	r2, #112	; 0x70
   248d2:	4393      	bics	r3, r2
   248d4:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   248d6:	687b      	ldr	r3, [r7, #4]
   248d8:	2250      	movs	r2, #80	; 0x50
   248da:	4313      	orrs	r3, r2
   248dc:	607b      	str	r3, [r7, #4]
   248de:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   248e0:	687b      	ldr	r3, [r7, #4]
   248e2:	4a04      	ldr	r2, [pc, #16]	; (248f4 <spi_init_pkt_sz+0x38>)
   248e4:	0019      	movs	r1, r3
   248e6:	0010      	movs	r0, r2
   248e8:	4b04      	ldr	r3, [pc, #16]	; (248fc <spi_init_pkt_sz+0x40>)
   248ea:	4798      	blx	r3
}
   248ec:	46c0      	nop			; (mov r8, r8)
   248ee:	46bd      	mov	sp, r7
   248f0:	b002      	add	sp, #8
   248f2:	bd80      	pop	{r7, pc}
   248f4:	0000e824 	.word	0x0000e824
   248f8:	00024a95 	.word	0x00024a95
   248fc:	00024b09 	.word	0x00024b09

00024900 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   24900:	b590      	push	{r4, r7, lr}
   24902:	b083      	sub	sp, #12
   24904:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24906:	2300      	movs	r3, #0
   24908:	9300      	str	r3, [sp, #0]
   2490a:	2300      	movs	r3, #0
   2490c:	2200      	movs	r2, #0
   2490e:	2100      	movs	r1, #0
   24910:	20cf      	movs	r0, #207	; 0xcf
   24912:	4c05      	ldr	r4, [pc, #20]	; (24928 <nm_spi_reset+0x28>)
   24914:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   24916:	20cf      	movs	r0, #207	; 0xcf
   24918:	4b04      	ldr	r3, [pc, #16]	; (2492c <nm_spi_reset+0x2c>)
   2491a:	4798      	blx	r3
	return M2M_SUCCESS;
   2491c:	2300      	movs	r3, #0
}
   2491e:	0018      	movs	r0, r3
   24920:	46bd      	mov	sp, r7
   24922:	b001      	add	sp, #4
   24924:	bd90      	pop	{r4, r7, pc}
   24926:	46c0      	nop			; (mov r8, r8)
   24928:	000232e9 	.word	0x000232e9
   2492c:	00023729 	.word	0x00023729

00024930 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   24930:	b580      	push	{r7, lr}
   24932:	b082      	sub	sp, #8
   24934:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   24936:	2300      	movs	r3, #0
   24938:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   2493a:	4b40      	ldr	r3, [pc, #256]	; (24a3c <nm_spi_init+0x10c>)
   2493c:	2200      	movs	r2, #0
   2493e:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   24940:	003b      	movs	r3, r7
   24942:	4a3f      	ldr	r2, [pc, #252]	; (24a40 <nm_spi_init+0x110>)
   24944:	0019      	movs	r1, r3
   24946:	0010      	movs	r0, r2
   24948:	4b3e      	ldr	r3, [pc, #248]	; (24a44 <nm_spi_init+0x114>)
   2494a:	4798      	blx	r3
   2494c:	1e03      	subs	r3, r0, #0
   2494e:	d129      	bne.n	249a4 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   24950:	4b3a      	ldr	r3, [pc, #232]	; (24a3c <nm_spi_init+0x10c>)
   24952:	2201      	movs	r2, #1
   24954:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   24956:	2398      	movs	r3, #152	; 0x98
   24958:	00da      	lsls	r2, r3, #3
   2495a:	493b      	ldr	r1, [pc, #236]	; (24a48 <nm_spi_init+0x118>)
   2495c:	4b3b      	ldr	r3, [pc, #236]	; (24a4c <nm_spi_init+0x11c>)
   2495e:	0018      	movs	r0, r3
   24960:	4b3b      	ldr	r3, [pc, #236]	; (24a50 <nm_spi_init+0x120>)
   24962:	4798      	blx	r3
   24964:	4b3b      	ldr	r3, [pc, #236]	; (24a54 <nm_spi_init+0x124>)
   24966:	0018      	movs	r0, r3
   24968:	4b39      	ldr	r3, [pc, #228]	; (24a50 <nm_spi_init+0x120>)
   2496a:	4798      	blx	r3
   2496c:	4b3a      	ldr	r3, [pc, #232]	; (24a58 <nm_spi_init+0x128>)
   2496e:	0018      	movs	r0, r3
   24970:	4b37      	ldr	r3, [pc, #220]	; (24a50 <nm_spi_init+0x120>)
   24972:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   24974:	003b      	movs	r3, r7
   24976:	4a32      	ldr	r2, [pc, #200]	; (24a40 <nm_spi_init+0x110>)
   24978:	0019      	movs	r1, r3
   2497a:	0010      	movs	r0, r2
   2497c:	4b31      	ldr	r3, [pc, #196]	; (24a44 <nm_spi_init+0x114>)
   2497e:	4798      	blx	r3
   24980:	1e03      	subs	r3, r0, #0
   24982:	d10f      	bne.n	249a4 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   24984:	4a35      	ldr	r2, [pc, #212]	; (24a5c <nm_spi_init+0x12c>)
   24986:	4930      	ldr	r1, [pc, #192]	; (24a48 <nm_spi_init+0x118>)
   24988:	4b30      	ldr	r3, [pc, #192]	; (24a4c <nm_spi_init+0x11c>)
   2498a:	0018      	movs	r0, r3
   2498c:	4b30      	ldr	r3, [pc, #192]	; (24a50 <nm_spi_init+0x120>)
   2498e:	4798      	blx	r3
   24990:	4b33      	ldr	r3, [pc, #204]	; (24a60 <nm_spi_init+0x130>)
   24992:	0018      	movs	r0, r3
   24994:	4b2e      	ldr	r3, [pc, #184]	; (24a50 <nm_spi_init+0x120>)
   24996:	4798      	blx	r3
   24998:	4b2f      	ldr	r3, [pc, #188]	; (24a58 <nm_spi_init+0x128>)
   2499a:	0018      	movs	r0, r3
   2499c:	4b2c      	ldr	r3, [pc, #176]	; (24a50 <nm_spi_init+0x120>)
   2499e:	4798      	blx	r3
			return 0;
   249a0:	2300      	movs	r3, #0
   249a2:	e047      	b.n	24a34 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   249a4:	4b25      	ldr	r3, [pc, #148]	; (24a3c <nm_spi_init+0x10c>)
   249a6:	781b      	ldrb	r3, [r3, #0]
   249a8:	2b00      	cmp	r3, #0
   249aa:	d126      	bne.n	249fa <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   249ac:	683b      	ldr	r3, [r7, #0]
   249ae:	220c      	movs	r2, #12
   249b0:	4393      	bics	r3, r2
   249b2:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   249b4:	683b      	ldr	r3, [r7, #0]
   249b6:	2270      	movs	r2, #112	; 0x70
   249b8:	4393      	bics	r3, r2
   249ba:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   249bc:	683b      	ldr	r3, [r7, #0]
   249be:	2250      	movs	r2, #80	; 0x50
   249c0:	4313      	orrs	r3, r2
   249c2:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   249c4:	683b      	ldr	r3, [r7, #0]
   249c6:	4a1e      	ldr	r2, [pc, #120]	; (24a40 <nm_spi_init+0x110>)
   249c8:	0019      	movs	r1, r3
   249ca:	0010      	movs	r0, r2
   249cc:	4b25      	ldr	r3, [pc, #148]	; (24a64 <nm_spi_init+0x134>)
   249ce:	4798      	blx	r3
   249d0:	1e03      	subs	r3, r0, #0
   249d2:	d10f      	bne.n	249f4 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   249d4:	4a24      	ldr	r2, [pc, #144]	; (24a68 <nm_spi_init+0x138>)
   249d6:	491c      	ldr	r1, [pc, #112]	; (24a48 <nm_spi_init+0x118>)
   249d8:	4b1c      	ldr	r3, [pc, #112]	; (24a4c <nm_spi_init+0x11c>)
   249da:	0018      	movs	r0, r3
   249dc:	4b1c      	ldr	r3, [pc, #112]	; (24a50 <nm_spi_init+0x120>)
   249de:	4798      	blx	r3
   249e0:	4b22      	ldr	r3, [pc, #136]	; (24a6c <nm_spi_init+0x13c>)
   249e2:	0018      	movs	r0, r3
   249e4:	4b1a      	ldr	r3, [pc, #104]	; (24a50 <nm_spi_init+0x120>)
   249e6:	4798      	blx	r3
   249e8:	4b1b      	ldr	r3, [pc, #108]	; (24a58 <nm_spi_init+0x128>)
   249ea:	0018      	movs	r0, r3
   249ec:	4b18      	ldr	r3, [pc, #96]	; (24a50 <nm_spi_init+0x120>)
   249ee:	4798      	blx	r3
			return 0;
   249f0:	2300      	movs	r3, #0
   249f2:	e01f      	b.n	24a34 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   249f4:	4b11      	ldr	r3, [pc, #68]	; (24a3c <nm_spi_init+0x10c>)
   249f6:	2201      	movs	r2, #1
   249f8:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   249fa:	1d3a      	adds	r2, r7, #4
   249fc:	2380      	movs	r3, #128	; 0x80
   249fe:	015b      	lsls	r3, r3, #5
   24a00:	0011      	movs	r1, r2
   24a02:	0018      	movs	r0, r3
   24a04:	4b0f      	ldr	r3, [pc, #60]	; (24a44 <nm_spi_init+0x114>)
   24a06:	4798      	blx	r3
   24a08:	1e03      	subs	r3, r0, #0
   24a0a:	d110      	bne.n	24a2e <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   24a0c:	4a18      	ldr	r2, [pc, #96]	; (24a70 <nm_spi_init+0x140>)
   24a0e:	490e      	ldr	r1, [pc, #56]	; (24a48 <nm_spi_init+0x118>)
   24a10:	4b0e      	ldr	r3, [pc, #56]	; (24a4c <nm_spi_init+0x11c>)
   24a12:	0018      	movs	r0, r3
   24a14:	4b0e      	ldr	r3, [pc, #56]	; (24a50 <nm_spi_init+0x120>)
   24a16:	4798      	blx	r3
   24a18:	4b16      	ldr	r3, [pc, #88]	; (24a74 <nm_spi_init+0x144>)
   24a1a:	0018      	movs	r0, r3
   24a1c:	4b0c      	ldr	r3, [pc, #48]	; (24a50 <nm_spi_init+0x120>)
   24a1e:	4798      	blx	r3
   24a20:	4b0d      	ldr	r3, [pc, #52]	; (24a58 <nm_spi_init+0x128>)
   24a22:	0018      	movs	r0, r3
   24a24:	4b0a      	ldr	r3, [pc, #40]	; (24a50 <nm_spi_init+0x120>)
   24a26:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   24a28:	2306      	movs	r3, #6
   24a2a:	425b      	negs	r3, r3
   24a2c:	e002      	b.n	24a34 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   24a2e:	4b12      	ldr	r3, [pc, #72]	; (24a78 <nm_spi_init+0x148>)
   24a30:	4798      	blx	r3


	return M2M_SUCCESS;
   24a32:	2300      	movs	r3, #0
}
   24a34:	0018      	movs	r0, r3
   24a36:	46bd      	mov	sp, r7
   24a38:	b002      	add	sp, #8
   24a3a:	bd80      	pop	{r7, pc}
   24a3c:	200042ac 	.word	0x200042ac
   24a40:	0000e824 	.word	0x0000e824
   24a44:	00024629 	.word	0x00024629
   24a48:	000393a0 	.word	0x000393a0
   24a4c:	00038d2c 	.word	0x00038d2c
   24a50:	0001de29 	.word	0x0001de29
   24a54:	000391c8 	.word	0x000391c8
   24a58:	00038d6c 	.word	0x00038d6c
   24a5c:	000004c3 	.word	0x000004c3
   24a60:	00039218 	.word	0x00039218
   24a64:	00024331 	.word	0x00024331
   24a68:	000004cd 	.word	0x000004cd
   24a6c:	00039248 	.word	0x00039248
   24a70:	000004d7 	.word	0x000004d7
   24a74:	0003927c 	.word	0x0003927c
   24a78:	000248bd 	.word	0x000248bd

00024a7c <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   24a7c:	b580      	push	{r7, lr}
   24a7e:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   24a80:	4b03      	ldr	r3, [pc, #12]	; (24a90 <nm_spi_deinit+0x14>)
   24a82:	2200      	movs	r2, #0
   24a84:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   24a86:	2300      	movs	r3, #0
}
   24a88:	0018      	movs	r0, r3
   24a8a:	46bd      	mov	sp, r7
   24a8c:	bd80      	pop	{r7, pc}
   24a8e:	46c0      	nop			; (mov r8, r8)
   24a90:	200042ac 	.word	0x200042ac

00024a94 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   24a94:	b580      	push	{r7, lr}
   24a96:	b084      	sub	sp, #16
   24a98:	af00      	add	r7, sp, #0
   24a9a:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   24a9c:	230c      	movs	r3, #12
   24a9e:	18fa      	adds	r2, r7, r3
   24aa0:	687b      	ldr	r3, [r7, #4]
   24aa2:	0011      	movs	r1, r2
   24aa4:	0018      	movs	r0, r3
   24aa6:	4b03      	ldr	r3, [pc, #12]	; (24ab4 <nm_spi_read_reg+0x20>)
   24aa8:	4798      	blx	r3

	return u32Val;
   24aaa:	68fb      	ldr	r3, [r7, #12]
}
   24aac:	0018      	movs	r0, r3
   24aae:	46bd      	mov	sp, r7
   24ab0:	b004      	add	sp, #16
   24ab2:	bd80      	pop	{r7, pc}
   24ab4:	00024629 	.word	0x00024629

00024ab8 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   24ab8:	b590      	push	{r4, r7, lr}
   24aba:	b085      	sub	sp, #20
   24abc:	af00      	add	r7, sp, #0
   24abe:	6078      	str	r0, [r7, #4]
   24ac0:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   24ac2:	230f      	movs	r3, #15
   24ac4:	18fc      	adds	r4, r7, r3
   24ac6:	683a      	ldr	r2, [r7, #0]
   24ac8:	687b      	ldr	r3, [r7, #4]
   24aca:	0011      	movs	r1, r2
   24acc:	0018      	movs	r0, r3
   24ace:	4b0d      	ldr	r3, [pc, #52]	; (24b04 <nm_spi_read_reg_with_ret+0x4c>)
   24ad0:	4798      	blx	r3
   24ad2:	0003      	movs	r3, r0
   24ad4:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24ad6:	230f      	movs	r3, #15
   24ad8:	18fb      	adds	r3, r7, r3
   24ada:	781b      	ldrb	r3, [r3, #0]
   24adc:	b25b      	sxtb	r3, r3
   24ade:	2b01      	cmp	r3, #1
   24ae0:	d104      	bne.n	24aec <nm_spi_read_reg_with_ret+0x34>
   24ae2:	230f      	movs	r3, #15
   24ae4:	18fb      	adds	r3, r7, r3
   24ae6:	2200      	movs	r2, #0
   24ae8:	701a      	strb	r2, [r3, #0]
   24aea:	e003      	b.n	24af4 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24aec:	230f      	movs	r3, #15
   24aee:	18fb      	adds	r3, r7, r3
   24af0:	22fa      	movs	r2, #250	; 0xfa
   24af2:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24af4:	230f      	movs	r3, #15
   24af6:	18fb      	adds	r3, r7, r3
   24af8:	781b      	ldrb	r3, [r3, #0]
   24afa:	b25b      	sxtb	r3, r3
}
   24afc:	0018      	movs	r0, r3
   24afe:	46bd      	mov	sp, r7
   24b00:	b005      	add	sp, #20
   24b02:	bd90      	pop	{r4, r7, pc}
   24b04:	00024629 	.word	0x00024629

00024b08 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   24b08:	b590      	push	{r4, r7, lr}
   24b0a:	b085      	sub	sp, #20
   24b0c:	af00      	add	r7, sp, #0
   24b0e:	6078      	str	r0, [r7, #4]
   24b10:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   24b12:	230f      	movs	r3, #15
   24b14:	18fc      	adds	r4, r7, r3
   24b16:	683a      	ldr	r2, [r7, #0]
   24b18:	687b      	ldr	r3, [r7, #4]
   24b1a:	0011      	movs	r1, r2
   24b1c:	0018      	movs	r0, r3
   24b1e:	4b0d      	ldr	r3, [pc, #52]	; (24b54 <nm_spi_write_reg+0x4c>)
   24b20:	4798      	blx	r3
   24b22:	0003      	movs	r3, r0
   24b24:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24b26:	230f      	movs	r3, #15
   24b28:	18fb      	adds	r3, r7, r3
   24b2a:	781b      	ldrb	r3, [r3, #0]
   24b2c:	b25b      	sxtb	r3, r3
   24b2e:	2b01      	cmp	r3, #1
   24b30:	d104      	bne.n	24b3c <nm_spi_write_reg+0x34>
   24b32:	230f      	movs	r3, #15
   24b34:	18fb      	adds	r3, r7, r3
   24b36:	2200      	movs	r2, #0
   24b38:	701a      	strb	r2, [r3, #0]
   24b3a:	e003      	b.n	24b44 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24b3c:	230f      	movs	r3, #15
   24b3e:	18fb      	adds	r3, r7, r3
   24b40:	22fa      	movs	r2, #250	; 0xfa
   24b42:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24b44:	230f      	movs	r3, #15
   24b46:	18fb      	adds	r3, r7, r3
   24b48:	781b      	ldrb	r3, [r3, #0]
   24b4a:	b25b      	sxtb	r3, r3
}
   24b4c:	0018      	movs	r0, r3
   24b4e:	46bd      	mov	sp, r7
   24b50:	b005      	add	sp, #20
   24b52:	bd90      	pop	{r4, r7, pc}
   24b54:	00024331 	.word	0x00024331

00024b58 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   24b58:	b590      	push	{r4, r7, lr}
   24b5a:	b087      	sub	sp, #28
   24b5c:	af00      	add	r7, sp, #0
   24b5e:	60f8      	str	r0, [r7, #12]
   24b60:	60b9      	str	r1, [r7, #8]
   24b62:	1dbb      	adds	r3, r7, #6
   24b64:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   24b66:	2317      	movs	r3, #23
   24b68:	18fc      	adds	r4, r7, r3
   24b6a:	1dbb      	adds	r3, r7, #6
   24b6c:	881a      	ldrh	r2, [r3, #0]
   24b6e:	68b9      	ldr	r1, [r7, #8]
   24b70:	68fb      	ldr	r3, [r7, #12]
   24b72:	0018      	movs	r0, r3
   24b74:	4b0d      	ldr	r3, [pc, #52]	; (24bac <nm_spi_read_block+0x54>)
   24b76:	4798      	blx	r3
   24b78:	0003      	movs	r3, r0
   24b7a:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24b7c:	2317      	movs	r3, #23
   24b7e:	18fb      	adds	r3, r7, r3
   24b80:	781b      	ldrb	r3, [r3, #0]
   24b82:	b25b      	sxtb	r3, r3
   24b84:	2b01      	cmp	r3, #1
   24b86:	d104      	bne.n	24b92 <nm_spi_read_block+0x3a>
   24b88:	2317      	movs	r3, #23
   24b8a:	18fb      	adds	r3, r7, r3
   24b8c:	2200      	movs	r2, #0
   24b8e:	701a      	strb	r2, [r3, #0]
   24b90:	e003      	b.n	24b9a <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24b92:	2317      	movs	r3, #23
   24b94:	18fb      	adds	r3, r7, r3
   24b96:	22fa      	movs	r2, #250	; 0xfa
   24b98:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24b9a:	2317      	movs	r3, #23
   24b9c:	18fb      	adds	r3, r7, r3
   24b9e:	781b      	ldrb	r3, [r3, #0]
   24ba0:	b25b      	sxtb	r3, r3
}
   24ba2:	0018      	movs	r0, r3
   24ba4:	46bd      	mov	sp, r7
   24ba6:	b007      	add	sp, #28
   24ba8:	bd90      	pop	{r4, r7, pc}
   24baa:	46c0      	nop			; (mov r8, r8)
   24bac:	000247a1 	.word	0x000247a1

00024bb0 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   24bb0:	b590      	push	{r4, r7, lr}
   24bb2:	b087      	sub	sp, #28
   24bb4:	af00      	add	r7, sp, #0
   24bb6:	60f8      	str	r0, [r7, #12]
   24bb8:	60b9      	str	r1, [r7, #8]
   24bba:	1dbb      	adds	r3, r7, #6
   24bbc:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   24bbe:	2317      	movs	r3, #23
   24bc0:	18fc      	adds	r4, r7, r3
   24bc2:	1dbb      	adds	r3, r7, #6
   24bc4:	881a      	ldrh	r2, [r3, #0]
   24bc6:	68b9      	ldr	r1, [r7, #8]
   24bc8:	68fb      	ldr	r3, [r7, #12]
   24bca:	0018      	movs	r0, r3
   24bcc:	4b0d      	ldr	r3, [pc, #52]	; (24c04 <nm_spi_write_block+0x54>)
   24bce:	4798      	blx	r3
   24bd0:	0003      	movs	r3, r0
   24bd2:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24bd4:	2317      	movs	r3, #23
   24bd6:	18fb      	adds	r3, r7, r3
   24bd8:	781b      	ldrb	r3, [r3, #0]
   24bda:	b25b      	sxtb	r3, r3
   24bdc:	2b01      	cmp	r3, #1
   24bde:	d104      	bne.n	24bea <nm_spi_write_block+0x3a>
   24be0:	2317      	movs	r3, #23
   24be2:	18fb      	adds	r3, r7, r3
   24be4:	2200      	movs	r2, #0
   24be6:	701a      	strb	r2, [r3, #0]
   24be8:	e003      	b.n	24bf2 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24bea:	2317      	movs	r3, #23
   24bec:	18fb      	adds	r3, r7, r3
   24bee:	22fa      	movs	r2, #250	; 0xfa
   24bf0:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24bf2:	2317      	movs	r3, #23
   24bf4:	18fb      	adds	r3, r7, r3
   24bf6:	781b      	ldrb	r3, [r3, #0]
   24bf8:	b25b      	sxtb	r3, r3
}
   24bfa:	0018      	movs	r0, r3
   24bfc:	46bd      	mov	sp, r7
   24bfe:	b007      	add	sp, #28
   24c00:	bd90      	pop	{r4, r7, pc}
   24c02:	46c0      	nop			; (mov r8, r8)
   24c04:	0002447d 	.word	0x0002447d

00024c08 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   24c08:	b590      	push	{r4, r7, lr}
   24c0a:	b089      	sub	sp, #36	; 0x24
   24c0c:	af00      	add	r7, sp, #0
   24c0e:	60b9      	str	r1, [r7, #8]
   24c10:	0011      	movs	r1, r2
   24c12:	607b      	str	r3, [r7, #4]
   24c14:	230f      	movs	r3, #15
   24c16:	18fb      	adds	r3, r7, r3
   24c18:	1c02      	adds	r2, r0, #0
   24c1a:	701a      	strb	r2, [r3, #0]
   24c1c:	230e      	movs	r3, #14
   24c1e:	18fb      	adds	r3, r7, r3
   24c20:	1c0a      	adds	r2, r1, #0
   24c22:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   24c24:	2330      	movs	r3, #48	; 0x30
   24c26:	18fb      	adds	r3, r7, r3
   24c28:	881b      	ldrh	r3, [r3, #0]
   24c2a:	2b00      	cmp	r3, #0
   24c2c:	d100      	bne.n	24c30 <Socket_ReadSocketData+0x28>
   24c2e:	e0d7      	b.n	24de0 <Socket_ReadSocketData+0x1d8>
   24c30:	230f      	movs	r3, #15
   24c32:	18fb      	adds	r3, r7, r3
   24c34:	2200      	movs	r2, #0
   24c36:	569a      	ldrsb	r2, [r3, r2]
   24c38:	4b6b      	ldr	r3, [pc, #428]	; (24de8 <Socket_ReadSocketData+0x1e0>)
   24c3a:	0112      	lsls	r2, r2, #4
   24c3c:	58d3      	ldr	r3, [r2, r3]
   24c3e:	2b00      	cmp	r3, #0
   24c40:	d100      	bne.n	24c44 <Socket_ReadSocketData+0x3c>
   24c42:	e0cd      	b.n	24de0 <Socket_ReadSocketData+0x1d8>
   24c44:	230f      	movs	r3, #15
   24c46:	18fb      	adds	r3, r7, r3
   24c48:	781b      	ldrb	r3, [r3, #0]
   24c4a:	b25b      	sxtb	r3, r3
   24c4c:	4a66      	ldr	r2, [pc, #408]	; (24de8 <Socket_ReadSocketData+0x1e0>)
   24c4e:	011b      	lsls	r3, r3, #4
   24c50:	18d3      	adds	r3, r2, r3
   24c52:	3304      	adds	r3, #4
   24c54:	881b      	ldrh	r3, [r3, #0]
   24c56:	b29b      	uxth	r3, r3
   24c58:	2b00      	cmp	r3, #0
   24c5a:	d100      	bne.n	24c5e <Socket_ReadSocketData+0x56>
   24c5c:	e0c0      	b.n	24de0 <Socket_ReadSocketData+0x1d8>
   24c5e:	230f      	movs	r3, #15
   24c60:	18fb      	adds	r3, r7, r3
   24c62:	781b      	ldrb	r3, [r3, #0]
   24c64:	b25b      	sxtb	r3, r3
   24c66:	4a60      	ldr	r2, [pc, #384]	; (24de8 <Socket_ReadSocketData+0x1e0>)
   24c68:	011b      	lsls	r3, r3, #4
   24c6a:	18d3      	adds	r3, r2, r3
   24c6c:	330a      	adds	r3, #10
   24c6e:	781b      	ldrb	r3, [r3, #0]
   24c70:	b2db      	uxtb	r3, r3
   24c72:	2b01      	cmp	r3, #1
   24c74:	d000      	beq.n	24c78 <Socket_ReadSocketData+0x70>
   24c76:	e0b3      	b.n	24de0 <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   24c78:	687b      	ldr	r3, [r7, #4]
   24c7a:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   24c7c:	68bb      	ldr	r3, [r7, #8]
   24c7e:	2230      	movs	r2, #48	; 0x30
   24c80:	18ba      	adds	r2, r7, r2
   24c82:	8812      	ldrh	r2, [r2, #0]
   24c84:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   24c86:	2319      	movs	r3, #25
   24c88:	18fb      	adds	r3, r7, r3
   24c8a:	2201      	movs	r2, #1
   24c8c:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   24c8e:	231a      	movs	r3, #26
   24c90:	18fb      	adds	r3, r7, r3
   24c92:	2230      	movs	r2, #48	; 0x30
   24c94:	18ba      	adds	r2, r7, r2
   24c96:	8812      	ldrh	r2, [r2, #0]
   24c98:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   24c9a:	230f      	movs	r3, #15
   24c9c:	18fb      	adds	r3, r7, r3
   24c9e:	781b      	ldrb	r3, [r3, #0]
   24ca0:	b25b      	sxtb	r3, r3
   24ca2:	4a51      	ldr	r2, [pc, #324]	; (24de8 <Socket_ReadSocketData+0x1e0>)
   24ca4:	011b      	lsls	r3, r3, #4
   24ca6:	18d3      	adds	r3, r2, r3
   24ca8:	3304      	adds	r3, #4
   24caa:	881b      	ldrh	r3, [r3, #0]
   24cac:	b29b      	uxth	r3, r3
   24cae:	221a      	movs	r2, #26
   24cb0:	18ba      	adds	r2, r7, r2
   24cb2:	8812      	ldrh	r2, [r2, #0]
   24cb4:	1ad3      	subs	r3, r2, r3
   24cb6:	b29a      	uxth	r2, r3
   24cb8:	2316      	movs	r3, #22
   24cba:	18fb      	adds	r3, r7, r3
   24cbc:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   24cbe:	2316      	movs	r3, #22
   24cc0:	18fb      	adds	r3, r7, r3
   24cc2:	2200      	movs	r2, #0
   24cc4:	5e9b      	ldrsh	r3, [r3, r2]
   24cc6:	2b00      	cmp	r3, #0
   24cc8:	dd0f      	ble.n	24cea <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   24cca:	2319      	movs	r3, #25
   24ccc:	18fb      	adds	r3, r7, r3
   24cce:	2200      	movs	r2, #0
   24cd0:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   24cd2:	230f      	movs	r3, #15
   24cd4:	18fb      	adds	r3, r7, r3
   24cd6:	2200      	movs	r2, #0
   24cd8:	569a      	ldrsb	r2, [r3, r2]
   24cda:	231a      	movs	r3, #26
   24cdc:	18fb      	adds	r3, r7, r3
   24cde:	4942      	ldr	r1, [pc, #264]	; (24de8 <Socket_ReadSocketData+0x1e0>)
   24ce0:	0112      	lsls	r2, r2, #4
   24ce2:	188a      	adds	r2, r1, r2
   24ce4:	3204      	adds	r2, #4
   24ce6:	8812      	ldrh	r2, [r2, #0]
   24ce8:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   24cea:	230f      	movs	r3, #15
   24cec:	18fb      	adds	r3, r7, r3
   24cee:	2200      	movs	r2, #0
   24cf0:	569a      	ldrsb	r2, [r3, r2]
   24cf2:	4b3d      	ldr	r3, [pc, #244]	; (24de8 <Socket_ReadSocketData+0x1e0>)
   24cf4:	0112      	lsls	r2, r2, #4
   24cf6:	58d1      	ldr	r1, [r2, r3]
   24cf8:	2319      	movs	r3, #25
   24cfa:	18fb      	adds	r3, r7, r3
   24cfc:	781c      	ldrb	r4, [r3, #0]
   24cfe:	231a      	movs	r3, #26
   24d00:	18fb      	adds	r3, r7, r3
   24d02:	881a      	ldrh	r2, [r3, #0]
   24d04:	69f8      	ldr	r0, [r7, #28]
   24d06:	0023      	movs	r3, r4
   24d08:	4c38      	ldr	r4, [pc, #224]	; (24dec <Socket_ReadSocketData+0x1e4>)
   24d0a:	47a0      	blx	r4
   24d0c:	1e03      	subs	r3, r0, #0
   24d0e:	d14f      	bne.n	24db0 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   24d10:	230f      	movs	r3, #15
   24d12:	18fb      	adds	r3, r7, r3
   24d14:	2200      	movs	r2, #0
   24d16:	569a      	ldrsb	r2, [r3, r2]
   24d18:	4b33      	ldr	r3, [pc, #204]	; (24de8 <Socket_ReadSocketData+0x1e0>)
   24d1a:	0112      	lsls	r2, r2, #4
   24d1c:	58d2      	ldr	r2, [r2, r3]
   24d1e:	68bb      	ldr	r3, [r7, #8]
   24d20:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   24d22:	231a      	movs	r3, #26
   24d24:	18fb      	adds	r3, r7, r3
   24d26:	2200      	movs	r2, #0
   24d28:	5e9a      	ldrsh	r2, [r3, r2]
   24d2a:	68bb      	ldr	r3, [r7, #8]
   24d2c:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   24d2e:	68bb      	ldr	r3, [r7, #8]
   24d30:	88da      	ldrh	r2, [r3, #6]
   24d32:	231a      	movs	r3, #26
   24d34:	18fb      	adds	r3, r7, r3
   24d36:	881b      	ldrh	r3, [r3, #0]
   24d38:	1ad3      	subs	r3, r2, r3
   24d3a:	b29a      	uxth	r2, r3
   24d3c:	68bb      	ldr	r3, [r7, #8]
   24d3e:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   24d40:	4b2b      	ldr	r3, [pc, #172]	; (24df0 <Socket_ReadSocketData+0x1e8>)
   24d42:	681b      	ldr	r3, [r3, #0]
   24d44:	2b00      	cmp	r3, #0
   24d46:	d00b      	beq.n	24d60 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   24d48:	4b29      	ldr	r3, [pc, #164]	; (24df0 <Socket_ReadSocketData+0x1e8>)
   24d4a:	681b      	ldr	r3, [r3, #0]
   24d4c:	68bc      	ldr	r4, [r7, #8]
   24d4e:	220e      	movs	r2, #14
   24d50:	18ba      	adds	r2, r7, r2
   24d52:	7811      	ldrb	r1, [r2, #0]
   24d54:	220f      	movs	r2, #15
   24d56:	18ba      	adds	r2, r7, r2
   24d58:	2000      	movs	r0, #0
   24d5a:	5610      	ldrsb	r0, [r2, r0]
   24d5c:	0022      	movs	r2, r4
   24d5e:	4798      	blx	r3

				u16ReadCount -= u16Read;
   24d60:	2330      	movs	r3, #48	; 0x30
   24d62:	18f9      	adds	r1, r7, r3
   24d64:	2330      	movs	r3, #48	; 0x30
   24d66:	18fa      	adds	r2, r7, r3
   24d68:	231a      	movs	r3, #26
   24d6a:	18fb      	adds	r3, r7, r3
   24d6c:	8812      	ldrh	r2, [r2, #0]
   24d6e:	881b      	ldrh	r3, [r3, #0]
   24d70:	1ad3      	subs	r3, r2, r3
   24d72:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   24d74:	231a      	movs	r3, #26
   24d76:	18fb      	adds	r3, r7, r3
   24d78:	881b      	ldrh	r3, [r3, #0]
   24d7a:	69fa      	ldr	r2, [r7, #28]
   24d7c:	18d3      	adds	r3, r2, r3
   24d7e:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   24d80:	230f      	movs	r3, #15
   24d82:	18fb      	adds	r3, r7, r3
   24d84:	781b      	ldrb	r3, [r3, #0]
   24d86:	b25b      	sxtb	r3, r3
   24d88:	4a17      	ldr	r2, [pc, #92]	; (24de8 <Socket_ReadSocketData+0x1e0>)
   24d8a:	011b      	lsls	r3, r3, #4
   24d8c:	18d3      	adds	r3, r2, r3
   24d8e:	330a      	adds	r3, #10
   24d90:	781b      	ldrb	r3, [r3, #0]
   24d92:	b2db      	uxtb	r3, r3
   24d94:	2b00      	cmp	r3, #0
   24d96:	d11c      	bne.n	24dd2 <Socket_ReadSocketData+0x1ca>
   24d98:	2330      	movs	r3, #48	; 0x30
   24d9a:	18fb      	adds	r3, r7, r3
   24d9c:	881b      	ldrh	r3, [r3, #0]
   24d9e:	2b00      	cmp	r3, #0
   24da0:	d017      	beq.n	24dd2 <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   24da2:	2301      	movs	r3, #1
   24da4:	2200      	movs	r2, #0
   24da6:	2100      	movs	r1, #0
   24da8:	2000      	movs	r0, #0
   24daa:	4c10      	ldr	r4, [pc, #64]	; (24dec <Socket_ReadSocketData+0x1e4>)
   24dac:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   24dae:	e017      	b.n	24de0 <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   24db0:	4b10      	ldr	r3, [pc, #64]	; (24df4 <Socket_ReadSocketData+0x1ec>)
   24db2:	0018      	movs	r0, r3
   24db4:	4b10      	ldr	r3, [pc, #64]	; (24df8 <Socket_ReadSocketData+0x1f0>)
   24db6:	4798      	blx	r3
   24db8:	2330      	movs	r3, #48	; 0x30
   24dba:	18fb      	adds	r3, r7, r3
   24dbc:	881a      	ldrh	r2, [r3, #0]
   24dbe:	4b0f      	ldr	r3, [pc, #60]	; (24dfc <Socket_ReadSocketData+0x1f4>)
   24dc0:	0011      	movs	r1, r2
   24dc2:	0018      	movs	r0, r3
   24dc4:	4b0c      	ldr	r3, [pc, #48]	; (24df8 <Socket_ReadSocketData+0x1f0>)
   24dc6:	4798      	blx	r3
   24dc8:	4b0d      	ldr	r3, [pc, #52]	; (24e00 <Socket_ReadSocketData+0x1f8>)
   24dca:	0018      	movs	r0, r3
   24dcc:	4b0a      	ldr	r3, [pc, #40]	; (24df8 <Socket_ReadSocketData+0x1f0>)
   24dce:	4798      	blx	r3
				break;
   24dd0:	e006      	b.n	24de0 <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   24dd2:	2330      	movs	r3, #48	; 0x30
   24dd4:	18fb      	adds	r3, r7, r3
   24dd6:	881b      	ldrh	r3, [r3, #0]
   24dd8:	2b00      	cmp	r3, #0
   24dda:	d000      	beq.n	24dde <Socket_ReadSocketData+0x1d6>
   24ddc:	e753      	b.n	24c86 <Socket_ReadSocketData+0x7e>
	}
}
   24dde:	e7ff      	b.n	24de0 <Socket_ReadSocketData+0x1d8>
   24de0:	46c0      	nop			; (mov r8, r8)
   24de2:	46bd      	mov	sp, r7
   24de4:	b009      	add	sp, #36	; 0x24
   24de6:	bd90      	pop	{r4, r7, pc}
   24de8:	20005b00 	.word	0x20005b00
   24dec:	000216d9 	.word	0x000216d9
   24df0:	20005bb0 	.word	0x20005bb0
   24df4:	000393ac 	.word	0x000393ac
   24df8:	0001de29 	.word	0x0001de29
   24dfc:	000393b8 	.word	0x000393b8
   24e00:	000393cc 	.word	0x000393cc

00024e04 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   24e04:	b590      	push	{r4, r7, lr}
   24e06:	b0bb      	sub	sp, #236	; 0xec
   24e08:	af02      	add	r7, sp, #8
   24e0a:	603a      	str	r2, [r7, #0]
   24e0c:	1dfb      	adds	r3, r7, #7
   24e0e:	1c02      	adds	r2, r0, #0
   24e10:	701a      	strb	r2, [r3, #0]
   24e12:	1d3b      	adds	r3, r7, #4
   24e14:	1c0a      	adds	r2, r1, #0
   24e16:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   24e18:	1dfb      	adds	r3, r7, #7
   24e1a:	781b      	ldrb	r3, [r3, #0]
   24e1c:	2b41      	cmp	r3, #65	; 0x41
   24e1e:	d003      	beq.n	24e28 <m2m_ip_cb+0x24>
   24e20:	1dfb      	adds	r3, r7, #7
   24e22:	781b      	ldrb	r3, [r3, #0]
   24e24:	2b54      	cmp	r3, #84	; 0x54
   24e26:	d120      	bne.n	24e6a <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   24e28:	23cc      	movs	r3, #204	; 0xcc
   24e2a:	18f9      	adds	r1, r7, r3
   24e2c:	6838      	ldr	r0, [r7, #0]
   24e2e:	2300      	movs	r3, #0
   24e30:	2204      	movs	r2, #4
   24e32:	4c98      	ldr	r4, [pc, #608]	; (25094 <m2m_ip_cb+0x290>)
   24e34:	47a0      	blx	r4
   24e36:	1e03      	subs	r3, r0, #0
   24e38:	d000      	beq.n	24e3c <m2m_ip_cb+0x38>
   24e3a:	e275      	b.n	25328 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   24e3c:	23cc      	movs	r3, #204	; 0xcc
   24e3e:	18fb      	adds	r3, r7, r3
   24e40:	2201      	movs	r2, #1
   24e42:	569a      	ldrsb	r2, [r3, r2]
   24e44:	23c8      	movs	r3, #200	; 0xc8
   24e46:	18fb      	adds	r3, r7, r3
   24e48:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   24e4a:	4b93      	ldr	r3, [pc, #588]	; (25098 <m2m_ip_cb+0x294>)
   24e4c:	681b      	ldr	r3, [r3, #0]
   24e4e:	2b00      	cmp	r3, #0
   24e50:	d100      	bne.n	24e54 <m2m_ip_cb+0x50>
   24e52:	e269      	b.n	25328 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   24e54:	4b90      	ldr	r3, [pc, #576]	; (25098 <m2m_ip_cb+0x294>)
   24e56:	681b      	ldr	r3, [r3, #0]
   24e58:	22cc      	movs	r2, #204	; 0xcc
   24e5a:	18ba      	adds	r2, r7, r2
   24e5c:	2000      	movs	r0, #0
   24e5e:	5610      	ldrsb	r0, [r2, r0]
   24e60:	22c8      	movs	r2, #200	; 0xc8
   24e62:	18ba      	adds	r2, r7, r2
   24e64:	2101      	movs	r1, #1
   24e66:	4798      	blx	r3
	{
   24e68:	e25e      	b.n	25328 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   24e6a:	1dfb      	adds	r3, r7, #7
   24e6c:	781b      	ldrb	r3, [r3, #0]
   24e6e:	2b42      	cmp	r3, #66	; 0x42
   24e70:	d120      	bne.n	24eb4 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   24e72:	23c4      	movs	r3, #196	; 0xc4
   24e74:	18f9      	adds	r1, r7, r3
   24e76:	6838      	ldr	r0, [r7, #0]
   24e78:	2300      	movs	r3, #0
   24e7a:	2204      	movs	r2, #4
   24e7c:	4c85      	ldr	r4, [pc, #532]	; (25094 <m2m_ip_cb+0x290>)
   24e7e:	47a0      	blx	r4
   24e80:	1e03      	subs	r3, r0, #0
   24e82:	d000      	beq.n	24e86 <m2m_ip_cb+0x82>
   24e84:	e257      	b.n	25336 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   24e86:	23c4      	movs	r3, #196	; 0xc4
   24e88:	18fb      	adds	r3, r7, r3
   24e8a:	2201      	movs	r2, #1
   24e8c:	569a      	ldrsb	r2, [r3, r2]
   24e8e:	23c0      	movs	r3, #192	; 0xc0
   24e90:	18fb      	adds	r3, r7, r3
   24e92:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   24e94:	4b80      	ldr	r3, [pc, #512]	; (25098 <m2m_ip_cb+0x294>)
   24e96:	681b      	ldr	r3, [r3, #0]
   24e98:	2b00      	cmp	r3, #0
   24e9a:	d100      	bne.n	24e9e <m2m_ip_cb+0x9a>
   24e9c:	e24b      	b.n	25336 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   24e9e:	4b7e      	ldr	r3, [pc, #504]	; (25098 <m2m_ip_cb+0x294>)
   24ea0:	681b      	ldr	r3, [r3, #0]
   24ea2:	22c4      	movs	r2, #196	; 0xc4
   24ea4:	18ba      	adds	r2, r7, r2
   24ea6:	2000      	movs	r0, #0
   24ea8:	5610      	ldrsb	r0, [r2, r0]
   24eaa:	22c0      	movs	r2, #192	; 0xc0
   24eac:	18ba      	adds	r2, r7, r2
   24eae:	2102      	movs	r1, #2
   24eb0:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   24eb2:	e240      	b.n	25336 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   24eb4:	1dfb      	adds	r3, r7, #7
   24eb6:	781b      	ldrb	r3, [r3, #0]
   24eb8:	2b43      	cmp	r3, #67	; 0x43
   24eba:	d000      	beq.n	24ebe <m2m_ip_cb+0xba>
   24ebc:	e086      	b.n	24fcc <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   24ebe:	23b4      	movs	r3, #180	; 0xb4
   24ec0:	18f9      	adds	r1, r7, r3
   24ec2:	6838      	ldr	r0, [r7, #0]
   24ec4:	2300      	movs	r3, #0
   24ec6:	220c      	movs	r2, #12
   24ec8:	4c72      	ldr	r4, [pc, #456]	; (25094 <m2m_ip_cb+0x290>)
   24eca:	47a0      	blx	r4
   24ecc:	1e03      	subs	r3, r0, #0
   24ece:	d000      	beq.n	24ed2 <m2m_ip_cb+0xce>
   24ed0:	e231      	b.n	25336 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   24ed2:	23b4      	movs	r3, #180	; 0xb4
   24ed4:	18fb      	adds	r3, r7, r3
   24ed6:	7a5b      	ldrb	r3, [r3, #9]
   24ed8:	b25b      	sxtb	r3, r3
   24eda:	2b00      	cmp	r3, #0
   24edc:	db4f      	blt.n	24f7e <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   24ede:	23b4      	movs	r3, #180	; 0xb4
   24ee0:	18fb      	adds	r3, r7, r3
   24ee2:	7a5b      	ldrb	r3, [r3, #9]
   24ee4:	b25b      	sxtb	r3, r3
   24ee6:	0018      	movs	r0, r3
   24ee8:	23b4      	movs	r3, #180	; 0xb4
   24eea:	18fb      	adds	r3, r7, r3
   24eec:	7a1b      	ldrb	r3, [r3, #8]
   24eee:	b25b      	sxtb	r3, r3
   24ef0:	4a6a      	ldr	r2, [pc, #424]	; (2509c <m2m_ip_cb+0x298>)
   24ef2:	011b      	lsls	r3, r3, #4
   24ef4:	18d3      	adds	r3, r2, r3
   24ef6:	330b      	adds	r3, #11
   24ef8:	781b      	ldrb	r3, [r3, #0]
   24efa:	b2d9      	uxtb	r1, r3
   24efc:	4a67      	ldr	r2, [pc, #412]	; (2509c <m2m_ip_cb+0x298>)
   24efe:	0103      	lsls	r3, r0, #4
   24f00:	18d3      	adds	r3, r2, r3
   24f02:	330b      	adds	r3, #11
   24f04:	1c0a      	adds	r2, r1, #0
   24f06:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   24f08:	23b4      	movs	r3, #180	; 0xb4
   24f0a:	18fb      	adds	r3, r7, r3
   24f0c:	7a5b      	ldrb	r3, [r3, #9]
   24f0e:	b25b      	sxtb	r3, r3
   24f10:	4a62      	ldr	r2, [pc, #392]	; (2509c <m2m_ip_cb+0x298>)
   24f12:	011b      	lsls	r3, r3, #4
   24f14:	18d3      	adds	r3, r2, r3
   24f16:	330a      	adds	r3, #10
   24f18:	2201      	movs	r2, #1
   24f1a:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   24f1c:	23b4      	movs	r3, #180	; 0xb4
   24f1e:	18fb      	adds	r3, r7, r3
   24f20:	7a5b      	ldrb	r3, [r3, #9]
   24f22:	b25b      	sxtb	r3, r3
   24f24:	0018      	movs	r0, r3
   24f26:	23b4      	movs	r3, #180	; 0xb4
   24f28:	18fb      	adds	r3, r7, r3
   24f2a:	895b      	ldrh	r3, [r3, #10]
   24f2c:	3b08      	subs	r3, #8
   24f2e:	b299      	uxth	r1, r3
   24f30:	4a5a      	ldr	r2, [pc, #360]	; (2509c <m2m_ip_cb+0x298>)
   24f32:	0103      	lsls	r3, r0, #4
   24f34:	18d3      	adds	r3, r2, r3
   24f36:	3308      	adds	r3, #8
   24f38:	1c0a      	adds	r2, r1, #0
   24f3a:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   24f3c:	4b58      	ldr	r3, [pc, #352]	; (250a0 <m2m_ip_cb+0x29c>)
   24f3e:	881b      	ldrh	r3, [r3, #0]
   24f40:	b29b      	uxth	r3, r3
   24f42:	3301      	adds	r3, #1
   24f44:	b29a      	uxth	r2, r3
   24f46:	4b56      	ldr	r3, [pc, #344]	; (250a0 <m2m_ip_cb+0x29c>)
   24f48:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   24f4a:	4b55      	ldr	r3, [pc, #340]	; (250a0 <m2m_ip_cb+0x29c>)
   24f4c:	881b      	ldrh	r3, [r3, #0]
   24f4e:	b29b      	uxth	r3, r3
   24f50:	2b00      	cmp	r3, #0
   24f52:	d106      	bne.n	24f62 <m2m_ip_cb+0x15e>
					++gu16SessionID;
   24f54:	4b52      	ldr	r3, [pc, #328]	; (250a0 <m2m_ip_cb+0x29c>)
   24f56:	881b      	ldrh	r3, [r3, #0]
   24f58:	b29b      	uxth	r3, r3
   24f5a:	3301      	adds	r3, #1
   24f5c:	b29a      	uxth	r2, r3
   24f5e:	4b50      	ldr	r3, [pc, #320]	; (250a0 <m2m_ip_cb+0x29c>)
   24f60:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   24f62:	23b4      	movs	r3, #180	; 0xb4
   24f64:	18fb      	adds	r3, r7, r3
   24f66:	7a5b      	ldrb	r3, [r3, #9]
   24f68:	b25b      	sxtb	r3, r3
   24f6a:	0018      	movs	r0, r3
   24f6c:	4b4c      	ldr	r3, [pc, #304]	; (250a0 <m2m_ip_cb+0x29c>)
   24f6e:	881b      	ldrh	r3, [r3, #0]
   24f70:	b299      	uxth	r1, r3
   24f72:	4a4a      	ldr	r2, [pc, #296]	; (2509c <m2m_ip_cb+0x298>)
   24f74:	0103      	lsls	r3, r0, #4
   24f76:	18d3      	adds	r3, r2, r3
   24f78:	3306      	adds	r3, #6
   24f7a:	1c0a      	adds	r2, r1, #0
   24f7c:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   24f7e:	23b4      	movs	r3, #180	; 0xb4
   24f80:	18fb      	adds	r3, r7, r3
   24f82:	2209      	movs	r2, #9
   24f84:	569a      	ldrsb	r2, [r3, r2]
   24f86:	23a0      	movs	r3, #160	; 0xa0
   24f88:	18fb      	adds	r3, r7, r3
   24f8a:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   24f8c:	23a0      	movs	r3, #160	; 0xa0
   24f8e:	18fb      	adds	r3, r7, r3
   24f90:	2202      	movs	r2, #2
   24f92:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   24f94:	23b4      	movs	r3, #180	; 0xb4
   24f96:	18fb      	adds	r3, r7, r3
   24f98:	885a      	ldrh	r2, [r3, #2]
   24f9a:	23a0      	movs	r3, #160	; 0xa0
   24f9c:	18fb      	adds	r3, r7, r3
   24f9e:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   24fa0:	23b4      	movs	r3, #180	; 0xb4
   24fa2:	18fb      	adds	r3, r7, r3
   24fa4:	685a      	ldr	r2, [r3, #4]
   24fa6:	23a0      	movs	r3, #160	; 0xa0
   24fa8:	18fb      	adds	r3, r7, r3
   24faa:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   24fac:	4b3a      	ldr	r3, [pc, #232]	; (25098 <m2m_ip_cb+0x294>)
   24fae:	681b      	ldr	r3, [r3, #0]
   24fb0:	2b00      	cmp	r3, #0
   24fb2:	d100      	bne.n	24fb6 <m2m_ip_cb+0x1b2>
   24fb4:	e1bf      	b.n	25336 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   24fb6:	4b38      	ldr	r3, [pc, #224]	; (25098 <m2m_ip_cb+0x294>)
   24fb8:	681b      	ldr	r3, [r3, #0]
   24fba:	22b4      	movs	r2, #180	; 0xb4
   24fbc:	18ba      	adds	r2, r7, r2
   24fbe:	2008      	movs	r0, #8
   24fc0:	5610      	ldrsb	r0, [r2, r0]
   24fc2:	22a0      	movs	r2, #160	; 0xa0
   24fc4:	18ba      	adds	r2, r7, r2
   24fc6:	2104      	movs	r1, #4
   24fc8:	4798      	blx	r3
}
   24fca:	e1b4      	b.n	25336 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   24fcc:	1dfb      	adds	r3, r7, #7
   24fce:	781b      	ldrb	r3, [r3, #0]
   24fd0:	2b44      	cmp	r3, #68	; 0x44
   24fd2:	d003      	beq.n	24fdc <m2m_ip_cb+0x1d8>
   24fd4:	1dfb      	adds	r3, r7, #7
   24fd6:	781b      	ldrb	r3, [r3, #0]
   24fd8:	2b4b      	cmp	r3, #75	; 0x4b
   24fda:	d13d      	bne.n	25058 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   24fdc:	239c      	movs	r3, #156	; 0x9c
   24fde:	18f9      	adds	r1, r7, r3
   24fe0:	6838      	ldr	r0, [r7, #0]
   24fe2:	2300      	movs	r3, #0
   24fe4:	2204      	movs	r2, #4
   24fe6:	4c2b      	ldr	r4, [pc, #172]	; (25094 <m2m_ip_cb+0x290>)
   24fe8:	47a0      	blx	r4
   24fea:	1e03      	subs	r3, r0, #0
   24fec:	d000      	beq.n	24ff0 <m2m_ip_cb+0x1ec>
   24fee:	e19d      	b.n	2532c <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   24ff0:	239c      	movs	r3, #156	; 0x9c
   24ff2:	18fb      	adds	r3, r7, r3
   24ff4:	2200      	movs	r2, #0
   24ff6:	569a      	ldrsb	r2, [r3, r2]
   24ff8:	2398      	movs	r3, #152	; 0x98
   24ffa:	18fb      	adds	r3, r7, r3
   24ffc:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   24ffe:	239c      	movs	r3, #156	; 0x9c
   25000:	18fb      	adds	r3, r7, r3
   25002:	2201      	movs	r2, #1
   25004:	569a      	ldrsb	r2, [r3, r2]
   25006:	2398      	movs	r3, #152	; 0x98
   25008:	18fb      	adds	r3, r7, r3
   2500a:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   2500c:	239c      	movs	r3, #156	; 0x9c
   2500e:	18fb      	adds	r3, r7, r3
   25010:	785b      	ldrb	r3, [r3, #1]
   25012:	b25b      	sxtb	r3, r3
   25014:	2b00      	cmp	r3, #0
   25016:	d10f      	bne.n	25038 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25018:	239c      	movs	r3, #156	; 0x9c
   2501a:	18fb      	adds	r3, r7, r3
   2501c:	781b      	ldrb	r3, [r3, #0]
   2501e:	b25b      	sxtb	r3, r3
   25020:	0018      	movs	r0, r3
   25022:	239c      	movs	r3, #156	; 0x9c
   25024:	18fb      	adds	r3, r7, r3
   25026:	885b      	ldrh	r3, [r3, #2]
   25028:	3b08      	subs	r3, #8
   2502a:	b299      	uxth	r1, r3
   2502c:	4a1b      	ldr	r2, [pc, #108]	; (2509c <m2m_ip_cb+0x298>)
   2502e:	0103      	lsls	r3, r0, #4
   25030:	18d3      	adds	r3, r2, r3
   25032:	3308      	adds	r3, #8
   25034:	1c0a      	adds	r2, r1, #0
   25036:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   25038:	4b17      	ldr	r3, [pc, #92]	; (25098 <m2m_ip_cb+0x294>)
   2503a:	681b      	ldr	r3, [r3, #0]
   2503c:	2b00      	cmp	r3, #0
   2503e:	d100      	bne.n	25042 <m2m_ip_cb+0x23e>
   25040:	e174      	b.n	2532c <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   25042:	4b15      	ldr	r3, [pc, #84]	; (25098 <m2m_ip_cb+0x294>)
   25044:	681b      	ldr	r3, [r3, #0]
   25046:	229c      	movs	r2, #156	; 0x9c
   25048:	18ba      	adds	r2, r7, r2
   2504a:	2000      	movs	r0, #0
   2504c:	5610      	ldrsb	r0, [r2, r0]
   2504e:	2298      	movs	r2, #152	; 0x98
   25050:	18ba      	adds	r2, r7, r2
   25052:	2105      	movs	r1, #5
   25054:	4798      	blx	r3
	{
   25056:	e169      	b.n	2532c <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   25058:	1dfb      	adds	r3, r7, #7
   2505a:	781b      	ldrb	r3, [r3, #0]
   2505c:	2b4a      	cmp	r3, #74	; 0x4a
   2505e:	d123      	bne.n	250a8 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   25060:	230c      	movs	r3, #12
   25062:	18f9      	adds	r1, r7, r3
   25064:	6838      	ldr	r0, [r7, #0]
   25066:	2300      	movs	r3, #0
   25068:	2244      	movs	r2, #68	; 0x44
   2506a:	4c0a      	ldr	r4, [pc, #40]	; (25094 <m2m_ip_cb+0x290>)
   2506c:	47a0      	blx	r4
   2506e:	1e03      	subs	r3, r0, #0
   25070:	d000      	beq.n	25074 <m2m_ip_cb+0x270>
   25072:	e160      	b.n	25336 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   25074:	4b0b      	ldr	r3, [pc, #44]	; (250a4 <m2m_ip_cb+0x2a0>)
   25076:	681b      	ldr	r3, [r3, #0]
   25078:	2b00      	cmp	r3, #0
   2507a:	d100      	bne.n	2507e <m2m_ip_cb+0x27a>
   2507c:	e15b      	b.n	25336 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   2507e:	4b09      	ldr	r3, [pc, #36]	; (250a4 <m2m_ip_cb+0x2a0>)
   25080:	681a      	ldr	r2, [r3, #0]
   25082:	230c      	movs	r3, #12
   25084:	18fb      	adds	r3, r7, r3
   25086:	6c19      	ldr	r1, [r3, #64]	; 0x40
   25088:	230c      	movs	r3, #12
   2508a:	18fb      	adds	r3, r7, r3
   2508c:	0018      	movs	r0, r3
   2508e:	4790      	blx	r2
}
   25090:	e151      	b.n	25336 <m2m_ip_cb+0x532>
   25092:	46c0      	nop			; (mov r8, r8)
   25094:	000216d9 	.word	0x000216d9
   25098:	20005bb0 	.word	0x20005bb0
   2509c:	20005b00 	.word	0x20005b00
   250a0:	200042ae 	.word	0x200042ae
   250a4:	20005bb8 	.word	0x20005bb8
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   250a8:	1dfb      	adds	r3, r7, #7
   250aa:	781b      	ldrb	r3, [r3, #0]
   250ac:	2b46      	cmp	r3, #70	; 0x46
   250ae:	d008      	beq.n	250c2 <m2m_ip_cb+0x2be>
   250b0:	1dfb      	adds	r3, r7, #7
   250b2:	781b      	ldrb	r3, [r3, #0]
   250b4:	2b48      	cmp	r3, #72	; 0x48
   250b6:	d004      	beq.n	250c2 <m2m_ip_cb+0x2be>
   250b8:	1dfb      	adds	r3, r7, #7
   250ba:	781b      	ldrb	r3, [r3, #0]
   250bc:	2b4d      	cmp	r3, #77	; 0x4d
   250be:	d000      	beq.n	250c2 <m2m_ip_cb+0x2be>
   250c0:	e0b4      	b.n	2522c <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   250c2:	23df      	movs	r3, #223	; 0xdf
   250c4:	18fb      	adds	r3, r7, r3
   250c6:	2206      	movs	r2, #6
   250c8:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   250ca:	1dfb      	adds	r3, r7, #7
   250cc:	781b      	ldrb	r3, [r3, #0]
   250ce:	2b48      	cmp	r3, #72	; 0x48
   250d0:	d103      	bne.n	250da <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   250d2:	23df      	movs	r3, #223	; 0xdf
   250d4:	18fb      	adds	r3, r7, r3
   250d6:	2209      	movs	r2, #9
   250d8:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   250da:	23d8      	movs	r3, #216	; 0xd8
   250dc:	18fb      	adds	r3, r7, r3
   250de:	2210      	movs	r2, #16
   250e0:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   250e2:	23d8      	movs	r3, #216	; 0xd8
   250e4:	18fb      	adds	r3, r7, r3
   250e6:	881a      	ldrh	r2, [r3, #0]
   250e8:	2388      	movs	r3, #136	; 0x88
   250ea:	18f9      	adds	r1, r7, r3
   250ec:	6838      	ldr	r0, [r7, #0]
   250ee:	2300      	movs	r3, #0
   250f0:	4c93      	ldr	r4, [pc, #588]	; (25340 <m2m_ip_cb+0x53c>)
   250f2:	47a0      	blx	r4
   250f4:	1e03      	subs	r3, r0, #0
   250f6:	d000      	beq.n	250fa <m2m_ip_cb+0x2f6>
   250f8:	e11a      	b.n	25330 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   250fa:	23d6      	movs	r3, #214	; 0xd6
   250fc:	18fb      	adds	r3, r7, r3
   250fe:	2200      	movs	r2, #0
   25100:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   25102:	23d5      	movs	r3, #213	; 0xd5
   25104:	18fb      	adds	r3, r7, r3
   25106:	2288      	movs	r2, #136	; 0x88
   25108:	18ba      	adds	r2, r7, r2
   2510a:	7b12      	ldrb	r2, [r2, #12]
   2510c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   2510e:	23d6      	movs	r3, #214	; 0xd6
   25110:	18fb      	adds	r3, r7, r3
   25112:	2288      	movs	r2, #136	; 0x88
   25114:	18ba      	adds	r2, r7, r2
   25116:	89d2      	ldrh	r2, [r2, #14]
   25118:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   2511a:	23d5      	movs	r3, #213	; 0xd5
   2511c:	18fb      	adds	r3, r7, r3
   2511e:	781b      	ldrb	r3, [r3, #0]
   25120:	b25b      	sxtb	r3, r3
   25122:	4a88      	ldr	r2, [pc, #544]	; (25344 <m2m_ip_cb+0x540>)
   25124:	011b      	lsls	r3, r3, #4
   25126:	18d3      	adds	r3, r2, r3
   25128:	330c      	adds	r3, #12
   2512a:	2200      	movs	r2, #0
   2512c:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   2512e:	23d2      	movs	r3, #210	; 0xd2
   25130:	18fb      	adds	r3, r7, r3
   25132:	2288      	movs	r2, #136	; 0x88
   25134:	18ba      	adds	r2, r7, r2
   25136:	8912      	ldrh	r2, [r2, #8]
   25138:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   2513a:	23d0      	movs	r3, #208	; 0xd0
   2513c:	18fb      	adds	r3, r7, r3
   2513e:	2288      	movs	r2, #136	; 0x88
   25140:	18ba      	adds	r2, r7, r2
   25142:	8952      	ldrh	r2, [r2, #10]
   25144:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   25146:	2388      	movs	r3, #136	; 0x88
   25148:	18fb      	adds	r3, r7, r3
   2514a:	885a      	ldrh	r2, [r3, #2]
   2514c:	2370      	movs	r3, #112	; 0x70
   2514e:	18fb      	adds	r3, r7, r3
   25150:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   25152:	2388      	movs	r3, #136	; 0x88
   25154:	18fb      	adds	r3, r7, r3
   25156:	685a      	ldr	r2, [r3, #4]
   25158:	2370      	movs	r3, #112	; 0x70
   2515a:	18fb      	adds	r3, r7, r3
   2515c:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   2515e:	23d5      	movs	r3, #213	; 0xd5
   25160:	18fb      	adds	r3, r7, r3
   25162:	781b      	ldrb	r3, [r3, #0]
   25164:	b25b      	sxtb	r3, r3
   25166:	4a77      	ldr	r2, [pc, #476]	; (25344 <m2m_ip_cb+0x540>)
   25168:	011b      	lsls	r3, r3, #4
   2516a:	18d3      	adds	r3, r2, r3
   2516c:	3306      	adds	r3, #6
   2516e:	881b      	ldrh	r3, [r3, #0]
   25170:	b29b      	uxth	r3, r3
   25172:	22d6      	movs	r2, #214	; 0xd6
   25174:	18ba      	adds	r2, r7, r2
   25176:	8812      	ldrh	r2, [r2, #0]
   25178:	429a      	cmp	r2, r3
   2517a:	d148      	bne.n	2520e <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   2517c:	23d2      	movs	r3, #210	; 0xd2
   2517e:	18fb      	adds	r3, r7, r3
   25180:	2200      	movs	r2, #0
   25182:	5e9b      	ldrsh	r3, [r3, r2]
   25184:	2b00      	cmp	r3, #0
   25186:	dd25      	ble.n	251d4 <m2m_ip_cb+0x3d0>
   25188:	23d2      	movs	r3, #210	; 0xd2
   2518a:	18fb      	adds	r3, r7, r3
   2518c:	2200      	movs	r2, #0
   2518e:	5e9a      	ldrsh	r2, [r3, r2]
   25190:	1d3b      	adds	r3, r7, #4
   25192:	881b      	ldrh	r3, [r3, #0]
   25194:	429a      	cmp	r2, r3
   25196:	da1d      	bge.n	251d4 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   25198:	23d0      	movs	r3, #208	; 0xd0
   2519a:	18fb      	adds	r3, r7, r3
   2519c:	881b      	ldrh	r3, [r3, #0]
   2519e:	683a      	ldr	r2, [r7, #0]
   251a0:	18d3      	adds	r3, r2, r3
   251a2:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   251a4:	23d8      	movs	r3, #216	; 0xd8
   251a6:	18fb      	adds	r3, r7, r3
   251a8:	22d2      	movs	r2, #210	; 0xd2
   251aa:	18ba      	adds	r2, r7, r2
   251ac:	8812      	ldrh	r2, [r2, #0]
   251ae:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   251b0:	683c      	ldr	r4, [r7, #0]
   251b2:	23df      	movs	r3, #223	; 0xdf
   251b4:	18fb      	adds	r3, r7, r3
   251b6:	781a      	ldrb	r2, [r3, #0]
   251b8:	2370      	movs	r3, #112	; 0x70
   251ba:	18f9      	adds	r1, r7, r3
   251bc:	23d5      	movs	r3, #213	; 0xd5
   251be:	18fb      	adds	r3, r7, r3
   251c0:	2000      	movs	r0, #0
   251c2:	5618      	ldrsb	r0, [r3, r0]
   251c4:	23d8      	movs	r3, #216	; 0xd8
   251c6:	18fb      	adds	r3, r7, r3
   251c8:	881b      	ldrh	r3, [r3, #0]
   251ca:	9300      	str	r3, [sp, #0]
   251cc:	0023      	movs	r3, r4
   251ce:	4c5e      	ldr	r4, [pc, #376]	; (25348 <m2m_ip_cb+0x544>)
   251d0:	47a0      	blx	r4
	{
   251d2:	e0ad      	b.n	25330 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   251d4:	2370      	movs	r3, #112	; 0x70
   251d6:	18fb      	adds	r3, r7, r3
   251d8:	22d2      	movs	r2, #210	; 0xd2
   251da:	18ba      	adds	r2, r7, r2
   251dc:	8812      	ldrh	r2, [r2, #0]
   251de:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   251e0:	2370      	movs	r3, #112	; 0x70
   251e2:	18fb      	adds	r3, r7, r3
   251e4:	2200      	movs	r2, #0
   251e6:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   251e8:	4b58      	ldr	r3, [pc, #352]	; (2534c <m2m_ip_cb+0x548>)
   251ea:	681b      	ldr	r3, [r3, #0]
   251ec:	2b00      	cmp	r3, #0
   251ee:	d100      	bne.n	251f2 <m2m_ip_cb+0x3ee>
   251f0:	e09e      	b.n	25330 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   251f2:	4b56      	ldr	r3, [pc, #344]	; (2534c <m2m_ip_cb+0x548>)
   251f4:	681b      	ldr	r3, [r3, #0]
   251f6:	2270      	movs	r2, #112	; 0x70
   251f8:	18bc      	adds	r4, r7, r2
   251fa:	22df      	movs	r2, #223	; 0xdf
   251fc:	18ba      	adds	r2, r7, r2
   251fe:	7811      	ldrb	r1, [r2, #0]
   25200:	22d5      	movs	r2, #213	; 0xd5
   25202:	18ba      	adds	r2, r7, r2
   25204:	2000      	movs	r0, #0
   25206:	5610      	ldrsb	r0, [r2, r0]
   25208:	0022      	movs	r2, r4
   2520a:	4798      	blx	r3
	{
   2520c:	e090      	b.n	25330 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   2520e:	23d8      	movs	r3, #216	; 0xd8
   25210:	18fa      	adds	r2, r7, r3
   25212:	1d3b      	adds	r3, r7, #4
   25214:	8812      	ldrh	r2, [r2, #0]
   25216:	881b      	ldrh	r3, [r3, #0]
   25218:	429a      	cmp	r2, r3
   2521a:	d300      	bcc.n	2521e <m2m_ip_cb+0x41a>
   2521c:	e088      	b.n	25330 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   2521e:	2301      	movs	r3, #1
   25220:	2200      	movs	r2, #0
   25222:	2100      	movs	r1, #0
   25224:	2000      	movs	r0, #0
   25226:	4c46      	ldr	r4, [pc, #280]	; (25340 <m2m_ip_cb+0x53c>)
   25228:	47a0      	blx	r4
	{
   2522a:	e081      	b.n	25330 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   2522c:	1dfb      	adds	r3, r7, #7
   2522e:	781b      	ldrb	r3, [r3, #0]
   25230:	2b45      	cmp	r3, #69	; 0x45
   25232:	d007      	beq.n	25244 <m2m_ip_cb+0x440>
   25234:	1dfb      	adds	r3, r7, #7
   25236:	781b      	ldrb	r3, [r3, #0]
   25238:	2b47      	cmp	r3, #71	; 0x47
   2523a:	d003      	beq.n	25244 <m2m_ip_cb+0x440>
   2523c:	1dfb      	adds	r3, r7, #7
   2523e:	781b      	ldrb	r3, [r3, #0]
   25240:	2b4c      	cmp	r3, #76	; 0x4c
   25242:	d14c      	bne.n	252de <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   25244:	23de      	movs	r3, #222	; 0xde
   25246:	18fb      	adds	r3, r7, r3
   25248:	2207      	movs	r2, #7
   2524a:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   2524c:	1dfb      	adds	r3, r7, #7
   2524e:	781b      	ldrb	r3, [r3, #0]
   25250:	2b47      	cmp	r3, #71	; 0x47
   25252:	d103      	bne.n	2525c <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   25254:	23de      	movs	r3, #222	; 0xde
   25256:	18fb      	adds	r3, r7, r3
   25258:	2208      	movs	r2, #8
   2525a:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   2525c:	2364      	movs	r3, #100	; 0x64
   2525e:	18f9      	adds	r1, r7, r3
   25260:	6838      	ldr	r0, [r7, #0]
   25262:	2300      	movs	r3, #0
   25264:	2208      	movs	r2, #8
   25266:	4c36      	ldr	r4, [pc, #216]	; (25340 <m2m_ip_cb+0x53c>)
   25268:	47a0      	blx	r4
   2526a:	1e03      	subs	r3, r0, #0
   2526c:	d162      	bne.n	25334 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   2526e:	23dc      	movs	r3, #220	; 0xdc
   25270:	18fb      	adds	r3, r7, r3
   25272:	2200      	movs	r2, #0
   25274:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   25276:	23db      	movs	r3, #219	; 0xdb
   25278:	18fb      	adds	r3, r7, r3
   2527a:	2264      	movs	r2, #100	; 0x64
   2527c:	18ba      	adds	r2, r7, r2
   2527e:	7812      	ldrb	r2, [r2, #0]
   25280:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   25282:	23dc      	movs	r3, #220	; 0xdc
   25284:	18fb      	adds	r3, r7, r3
   25286:	2264      	movs	r2, #100	; 0x64
   25288:	18ba      	adds	r2, r7, r2
   2528a:	8892      	ldrh	r2, [r2, #4]
   2528c:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   2528e:	2364      	movs	r3, #100	; 0x64
   25290:	18fb      	adds	r3, r7, r3
   25292:	2202      	movs	r2, #2
   25294:	5e9a      	ldrsh	r2, [r3, r2]
   25296:	236e      	movs	r3, #110	; 0x6e
   25298:	18fb      	adds	r3, r7, r3
   2529a:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   2529c:	23db      	movs	r3, #219	; 0xdb
   2529e:	18fb      	adds	r3, r7, r3
   252a0:	781b      	ldrb	r3, [r3, #0]
   252a2:	b25b      	sxtb	r3, r3
   252a4:	4a27      	ldr	r2, [pc, #156]	; (25344 <m2m_ip_cb+0x540>)
   252a6:	011b      	lsls	r3, r3, #4
   252a8:	18d3      	adds	r3, r2, r3
   252aa:	3306      	adds	r3, #6
   252ac:	881b      	ldrh	r3, [r3, #0]
   252ae:	b29b      	uxth	r3, r3
   252b0:	22dc      	movs	r2, #220	; 0xdc
   252b2:	18ba      	adds	r2, r7, r2
   252b4:	8812      	ldrh	r2, [r2, #0]
   252b6:	429a      	cmp	r2, r3
   252b8:	d13c      	bne.n	25334 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   252ba:	4b24      	ldr	r3, [pc, #144]	; (2534c <m2m_ip_cb+0x548>)
   252bc:	681b      	ldr	r3, [r3, #0]
   252be:	2b00      	cmp	r3, #0
   252c0:	d038      	beq.n	25334 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   252c2:	4b22      	ldr	r3, [pc, #136]	; (2534c <m2m_ip_cb+0x548>)
   252c4:	681b      	ldr	r3, [r3, #0]
   252c6:	226e      	movs	r2, #110	; 0x6e
   252c8:	18bc      	adds	r4, r7, r2
   252ca:	22de      	movs	r2, #222	; 0xde
   252cc:	18ba      	adds	r2, r7, r2
   252ce:	7811      	ldrb	r1, [r2, #0]
   252d0:	22db      	movs	r2, #219	; 0xdb
   252d2:	18ba      	adds	r2, r7, r2
   252d4:	2000      	movs	r0, #0
   252d6:	5610      	ldrsb	r0, [r2, r0]
   252d8:	0022      	movs	r2, r4
   252da:	4798      	blx	r3
	{
   252dc:	e02a      	b.n	25334 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   252de:	1dfb      	adds	r3, r7, #7
   252e0:	781b      	ldrb	r3, [r3, #0]
   252e2:	2b52      	cmp	r3, #82	; 0x52
   252e4:	d127      	bne.n	25336 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   252e6:	2350      	movs	r3, #80	; 0x50
   252e8:	18f9      	adds	r1, r7, r3
   252ea:	6838      	ldr	r0, [r7, #0]
   252ec:	2301      	movs	r3, #1
   252ee:	2214      	movs	r2, #20
   252f0:	4c13      	ldr	r4, [pc, #76]	; (25340 <m2m_ip_cb+0x53c>)
   252f2:	47a0      	blx	r4
   252f4:	1e03      	subs	r3, r0, #0
   252f6:	d11e      	bne.n	25336 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   252f8:	2350      	movs	r3, #80	; 0x50
   252fa:	18fb      	adds	r3, r7, r3
   252fc:	685b      	ldr	r3, [r3, #4]
   252fe:	001a      	movs	r2, r3
   25300:	4b13      	ldr	r3, [pc, #76]	; (25350 <m2m_ip_cb+0x54c>)
   25302:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   25304:	4b12      	ldr	r3, [pc, #72]	; (25350 <m2m_ip_cb+0x54c>)
   25306:	681b      	ldr	r3, [r3, #0]
   25308:	2b00      	cmp	r3, #0
   2530a:	d014      	beq.n	25336 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   2530c:	4b10      	ldr	r3, [pc, #64]	; (25350 <m2m_ip_cb+0x54c>)
   2530e:	681c      	ldr	r4, [r3, #0]
   25310:	2350      	movs	r3, #80	; 0x50
   25312:	18fb      	adds	r3, r7, r3
   25314:	6818      	ldr	r0, [r3, #0]
   25316:	2350      	movs	r3, #80	; 0x50
   25318:	18fb      	adds	r3, r7, r3
   2531a:	6899      	ldr	r1, [r3, #8]
   2531c:	2350      	movs	r3, #80	; 0x50
   2531e:	18fb      	adds	r3, r7, r3
   25320:	7c1b      	ldrb	r3, [r3, #16]
   25322:	001a      	movs	r2, r3
   25324:	47a0      	blx	r4
}
   25326:	e006      	b.n	25336 <m2m_ip_cb+0x532>
	{
   25328:	46c0      	nop			; (mov r8, r8)
   2532a:	e004      	b.n	25336 <m2m_ip_cb+0x532>
	{
   2532c:	46c0      	nop			; (mov r8, r8)
   2532e:	e002      	b.n	25336 <m2m_ip_cb+0x532>
	{
   25330:	46c0      	nop			; (mov r8, r8)
   25332:	e000      	b.n	25336 <m2m_ip_cb+0x532>
	{
   25334:	46c0      	nop			; (mov r8, r8)
}
   25336:	46c0      	nop			; (mov r8, r8)
   25338:	46bd      	mov	sp, r7
   2533a:	b039      	add	sp, #228	; 0xe4
   2533c:	bd90      	pop	{r4, r7, pc}
   2533e:	46c0      	nop			; (mov r8, r8)
   25340:	000216d9 	.word	0x000216d9
   25344:	20005b00 	.word	0x20005b00
   25348:	00024c09 	.word	0x00024c09
   2534c:	20005bb0 	.word	0x20005bb0
   25350:	20005bb4 	.word	0x20005bb4

00025354 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   25354:	b580      	push	{r7, lr}
   25356:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   25358:	4b0c      	ldr	r3, [pc, #48]	; (2538c <socketInit+0x38>)
   2535a:	781b      	ldrb	r3, [r3, #0]
   2535c:	b2db      	uxtb	r3, r3
   2535e:	2b00      	cmp	r3, #0
   25360:	d110      	bne.n	25384 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   25362:	4b0b      	ldr	r3, [pc, #44]	; (25390 <socketInit+0x3c>)
   25364:	22b0      	movs	r2, #176	; 0xb0
   25366:	2100      	movs	r1, #0
   25368:	0018      	movs	r0, r3
   2536a:	4b0a      	ldr	r3, [pc, #40]	; (25394 <socketInit+0x40>)
   2536c:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   2536e:	4b0a      	ldr	r3, [pc, #40]	; (25398 <socketInit+0x44>)
   25370:	0019      	movs	r1, r3
   25372:	2002      	movs	r0, #2
   25374:	4b09      	ldr	r3, [pc, #36]	; (2539c <socketInit+0x48>)
   25376:	4798      	blx	r3
		gbSocketInit	= 1;
   25378:	4b04      	ldr	r3, [pc, #16]	; (2538c <socketInit+0x38>)
   2537a:	2201      	movs	r2, #1
   2537c:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   2537e:	4b08      	ldr	r3, [pc, #32]	; (253a0 <socketInit+0x4c>)
   25380:	2200      	movs	r2, #0
   25382:	801a      	strh	r2, [r3, #0]
	}
}
   25384:	46c0      	nop			; (mov r8, r8)
   25386:	46bd      	mov	sp, r7
   25388:	bd80      	pop	{r7, pc}
   2538a:	46c0      	nop			; (mov r8, r8)
   2538c:	200042b0 	.word	0x200042b0
   25390:	20005b00 	.word	0x20005b00
   25394:	00020b5d 	.word	0x00020b5d
   25398:	00024e05 	.word	0x00024e05
   2539c:	00021859 	.word	0x00021859
   253a0:	200042ae 	.word	0x200042ae

000253a4 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   253a4:	b580      	push	{r7, lr}
   253a6:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   253a8:	4b0a      	ldr	r3, [pc, #40]	; (253d4 <socketDeinit+0x30>)
   253aa:	22b0      	movs	r2, #176	; 0xb0
   253ac:	2100      	movs	r1, #0
   253ae:	0018      	movs	r0, r3
   253b0:	4b09      	ldr	r3, [pc, #36]	; (253d8 <socketDeinit+0x34>)
   253b2:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   253b4:	2100      	movs	r1, #0
   253b6:	2002      	movs	r0, #2
   253b8:	4b08      	ldr	r3, [pc, #32]	; (253dc <socketDeinit+0x38>)
   253ba:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   253bc:	4b08      	ldr	r3, [pc, #32]	; (253e0 <socketDeinit+0x3c>)
   253be:	2200      	movs	r2, #0
   253c0:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   253c2:	4b08      	ldr	r3, [pc, #32]	; (253e4 <socketDeinit+0x40>)
   253c4:	2200      	movs	r2, #0
   253c6:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   253c8:	4b07      	ldr	r3, [pc, #28]	; (253e8 <socketDeinit+0x44>)
   253ca:	2200      	movs	r2, #0
   253cc:	701a      	strb	r2, [r3, #0]
}
   253ce:	46c0      	nop			; (mov r8, r8)
   253d0:	46bd      	mov	sp, r7
   253d2:	bd80      	pop	{r7, pc}
   253d4:	20005b00 	.word	0x20005b00
   253d8:	00020b5d 	.word	0x00020b5d
   253dc:	00021859 	.word	0x00021859
   253e0:	20005bb0 	.word	0x20005bb0
   253e4:	20005bb8 	.word	0x20005bb8
   253e8:	200042b0 	.word	0x200042b0

000253ec <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   253ec:	b580      	push	{r7, lr}
   253ee:	b082      	sub	sp, #8
   253f0:	af00      	add	r7, sp, #0
   253f2:	6078      	str	r0, [r7, #4]
   253f4:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   253f6:	4b05      	ldr	r3, [pc, #20]	; (2540c <registerSocketCallback+0x20>)
   253f8:	687a      	ldr	r2, [r7, #4]
   253fa:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   253fc:	4b04      	ldr	r3, [pc, #16]	; (25410 <registerSocketCallback+0x24>)
   253fe:	683a      	ldr	r2, [r7, #0]
   25400:	601a      	str	r2, [r3, #0]
}
   25402:	46c0      	nop			; (mov r8, r8)
   25404:	46bd      	mov	sp, r7
   25406:	b002      	add	sp, #8
   25408:	bd80      	pop	{r7, pc}
   2540a:	46c0      	nop			; (mov r8, r8)
   2540c:	20005bb0 	.word	0x20005bb0
   25410:	20005bb8 	.word	0x20005bb8

00025414 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   25414:	b590      	push	{r4, r7, lr}
   25416:	b08d      	sub	sp, #52	; 0x34
   25418:	af04      	add	r7, sp, #16
   2541a:	0004      	movs	r4, r0
   2541c:	0008      	movs	r0, r1
   2541e:	0011      	movs	r1, r2
   25420:	1dbb      	adds	r3, r7, #6
   25422:	1c22      	adds	r2, r4, #0
   25424:	801a      	strh	r2, [r3, #0]
   25426:	1d7b      	adds	r3, r7, #5
   25428:	1c02      	adds	r2, r0, #0
   2542a:	701a      	strb	r2, [r3, #0]
   2542c:	1d3b      	adds	r3, r7, #4
   2542e:	1c0a      	adds	r2, r1, #0
   25430:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   25432:	231f      	movs	r3, #31
   25434:	18fb      	adds	r3, r7, r3
   25436:	22ff      	movs	r2, #255	; 0xff
   25438:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   2543a:	1dbb      	adds	r3, r7, #6
   2543c:	881b      	ldrh	r3, [r3, #0]
   2543e:	2b02      	cmp	r3, #2
   25440:	d000      	beq.n	25444 <socket+0x30>
   25442:	e0ce      	b.n	255e2 <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   25444:	1d7b      	adds	r3, r7, #5
   25446:	781b      	ldrb	r3, [r3, #0]
   25448:	2b01      	cmp	r3, #1
   2544a:	d135      	bne.n	254b8 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   2544c:	231e      	movs	r3, #30
   2544e:	18fb      	adds	r3, r7, r3
   25450:	2200      	movs	r2, #0
   25452:	701a      	strb	r2, [r3, #0]
   25454:	e02a      	b.n	254ac <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   25456:	2317      	movs	r3, #23
   25458:	18fb      	adds	r3, r7, r3
   2545a:	4a66      	ldr	r2, [pc, #408]	; (255f4 <socket+0x1e0>)
   2545c:	7812      	ldrb	r2, [r2, #0]
   2545e:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   25460:	4b64      	ldr	r3, [pc, #400]	; (255f4 <socket+0x1e0>)
   25462:	781b      	ldrb	r3, [r3, #0]
   25464:	b2db      	uxtb	r3, r3
   25466:	011a      	lsls	r2, r3, #4
   25468:	4b63      	ldr	r3, [pc, #396]	; (255f8 <socket+0x1e4>)
   2546a:	18d3      	adds	r3, r2, r3
   2546c:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   2546e:	4b61      	ldr	r3, [pc, #388]	; (255f4 <socket+0x1e0>)
   25470:	781b      	ldrb	r3, [r3, #0]
   25472:	b2db      	uxtb	r3, r3
   25474:	1c5a      	adds	r2, r3, #1
   25476:	4b61      	ldr	r3, [pc, #388]	; (255fc <socket+0x1e8>)
   25478:	2107      	movs	r1, #7
   2547a:	0010      	movs	r0, r2
   2547c:	4798      	blx	r3
   2547e:	000b      	movs	r3, r1
   25480:	b2da      	uxtb	r2, r3
   25482:	4b5c      	ldr	r3, [pc, #368]	; (255f4 <socket+0x1e0>)
   25484:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   25486:	69bb      	ldr	r3, [r7, #24]
   25488:	7a9b      	ldrb	r3, [r3, #10]
   2548a:	b2db      	uxtb	r3, r3
   2548c:	2b00      	cmp	r3, #0
   2548e:	d106      	bne.n	2549e <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   25490:	231f      	movs	r3, #31
   25492:	18fb      	adds	r3, r7, r3
   25494:	2217      	movs	r2, #23
   25496:	18ba      	adds	r2, r7, r2
   25498:	7812      	ldrb	r2, [r2, #0]
   2549a:	701a      	strb	r2, [r3, #0]
					break;
   2549c:	e04c      	b.n	25538 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   2549e:	231e      	movs	r3, #30
   254a0:	18fb      	adds	r3, r7, r3
   254a2:	781a      	ldrb	r2, [r3, #0]
   254a4:	231e      	movs	r3, #30
   254a6:	18fb      	adds	r3, r7, r3
   254a8:	3201      	adds	r2, #1
   254aa:	701a      	strb	r2, [r3, #0]
   254ac:	231e      	movs	r3, #30
   254ae:	18fb      	adds	r3, r7, r3
   254b0:	781b      	ldrb	r3, [r3, #0]
   254b2:	2b06      	cmp	r3, #6
   254b4:	d9cf      	bls.n	25456 <socket+0x42>
   254b6:	e03f      	b.n	25538 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   254b8:	1d7b      	adds	r3, r7, #5
   254ba:	781b      	ldrb	r3, [r3, #0]
   254bc:	2b02      	cmp	r3, #2
   254be:	d13b      	bne.n	25538 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   254c0:	4b4f      	ldr	r3, [pc, #316]	; (25600 <socket+0x1ec>)
   254c2:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   254c4:	231e      	movs	r3, #30
   254c6:	18fb      	adds	r3, r7, r3
   254c8:	2200      	movs	r2, #0
   254ca:	701a      	strb	r2, [r3, #0]
   254cc:	e02f      	b.n	2552e <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   254ce:	2317      	movs	r3, #23
   254d0:	18fb      	adds	r3, r7, r3
   254d2:	4a4c      	ldr	r2, [pc, #304]	; (25604 <socket+0x1f0>)
   254d4:	7812      	ldrb	r2, [r2, #0]
   254d6:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   254d8:	4b4a      	ldr	r3, [pc, #296]	; (25604 <socket+0x1f0>)
   254da:	781b      	ldrb	r3, [r3, #0]
   254dc:	b2db      	uxtb	r3, r3
   254de:	011b      	lsls	r3, r3, #4
   254e0:	693a      	ldr	r2, [r7, #16]
   254e2:	18d3      	adds	r3, r2, r3
   254e4:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   254e6:	4b47      	ldr	r3, [pc, #284]	; (25604 <socket+0x1f0>)
   254e8:	781b      	ldrb	r3, [r3, #0]
   254ea:	b2db      	uxtb	r3, r3
   254ec:	3301      	adds	r3, #1
   254ee:	4a46      	ldr	r2, [pc, #280]	; (25608 <socket+0x1f4>)
   254f0:	4013      	ands	r3, r2
   254f2:	d504      	bpl.n	254fe <socket+0xea>
   254f4:	3b01      	subs	r3, #1
   254f6:	2204      	movs	r2, #4
   254f8:	4252      	negs	r2, r2
   254fa:	4313      	orrs	r3, r2
   254fc:	3301      	adds	r3, #1
   254fe:	b2da      	uxtb	r2, r3
   25500:	4b40      	ldr	r3, [pc, #256]	; (25604 <socket+0x1f0>)
   25502:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   25504:	69bb      	ldr	r3, [r7, #24]
   25506:	7a9b      	ldrb	r3, [r3, #10]
   25508:	b2db      	uxtb	r3, r3
   2550a:	2b00      	cmp	r3, #0
   2550c:	d108      	bne.n	25520 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   2550e:	2317      	movs	r3, #23
   25510:	18fb      	adds	r3, r7, r3
   25512:	781b      	ldrb	r3, [r3, #0]
   25514:	3307      	adds	r3, #7
   25516:	b2da      	uxtb	r2, r3
   25518:	231f      	movs	r3, #31
   2551a:	18fb      	adds	r3, r7, r3
   2551c:	701a      	strb	r2, [r3, #0]
					break;
   2551e:	e00b      	b.n	25538 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   25520:	231e      	movs	r3, #30
   25522:	18fb      	adds	r3, r7, r3
   25524:	781a      	ldrb	r2, [r3, #0]
   25526:	231e      	movs	r3, #30
   25528:	18fb      	adds	r3, r7, r3
   2552a:	3201      	adds	r2, #1
   2552c:	701a      	strb	r2, [r3, #0]
   2552e:	231e      	movs	r3, #30
   25530:	18fb      	adds	r3, r7, r3
   25532:	781b      	ldrb	r3, [r3, #0]
   25534:	2b03      	cmp	r3, #3
   25536:	d9ca      	bls.n	254ce <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   25538:	231f      	movs	r3, #31
   2553a:	18fb      	adds	r3, r7, r3
   2553c:	781b      	ldrb	r3, [r3, #0]
   2553e:	2b7f      	cmp	r3, #127	; 0x7f
   25540:	d84f      	bhi.n	255e2 <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   25542:	69bb      	ldr	r3, [r7, #24]
   25544:	2210      	movs	r2, #16
   25546:	2100      	movs	r1, #0
   25548:	0018      	movs	r0, r3
   2554a:	4b30      	ldr	r3, [pc, #192]	; (2560c <socket+0x1f8>)
   2554c:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   2554e:	69bb      	ldr	r3, [r7, #24]
   25550:	2201      	movs	r2, #1
   25552:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   25554:	4b2e      	ldr	r3, [pc, #184]	; (25610 <socket+0x1fc>)
   25556:	881b      	ldrh	r3, [r3, #0]
   25558:	b29b      	uxth	r3, r3
   2555a:	3301      	adds	r3, #1
   2555c:	b29a      	uxth	r2, r3
   2555e:	4b2c      	ldr	r3, [pc, #176]	; (25610 <socket+0x1fc>)
   25560:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   25562:	4b2b      	ldr	r3, [pc, #172]	; (25610 <socket+0x1fc>)
   25564:	881b      	ldrh	r3, [r3, #0]
   25566:	b29b      	uxth	r3, r3
   25568:	2b00      	cmp	r3, #0
   2556a:	d106      	bne.n	2557a <socket+0x166>
				++gu16SessionID;
   2556c:	4b28      	ldr	r3, [pc, #160]	; (25610 <socket+0x1fc>)
   2556e:	881b      	ldrh	r3, [r3, #0]
   25570:	b29b      	uxth	r3, r3
   25572:	3301      	adds	r3, #1
   25574:	b29a      	uxth	r2, r3
   25576:	4b26      	ldr	r3, [pc, #152]	; (25610 <socket+0x1fc>)
   25578:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   2557a:	4b25      	ldr	r3, [pc, #148]	; (25610 <socket+0x1fc>)
   2557c:	881b      	ldrh	r3, [r3, #0]
   2557e:	b29a      	uxth	r2, r3
   25580:	69bb      	ldr	r3, [r7, #24]
   25582:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   25584:	4b23      	ldr	r3, [pc, #140]	; (25614 <socket+0x200>)
   25586:	0018      	movs	r0, r3
   25588:	4b23      	ldr	r3, [pc, #140]	; (25618 <socket+0x204>)
   2558a:	4798      	blx	r3
   2558c:	231f      	movs	r3, #31
   2558e:	18fb      	adds	r3, r7, r3
   25590:	2100      	movs	r1, #0
   25592:	5659      	ldrsb	r1, [r3, r1]
   25594:	4b1e      	ldr	r3, [pc, #120]	; (25610 <socket+0x1fc>)
   25596:	881b      	ldrh	r3, [r3, #0]
   25598:	b29b      	uxth	r3, r3
   2559a:	001a      	movs	r2, r3
   2559c:	4b1f      	ldr	r3, [pc, #124]	; (2561c <socket+0x208>)
   2559e:	0018      	movs	r0, r3
   255a0:	4b1d      	ldr	r3, [pc, #116]	; (25618 <socket+0x204>)
   255a2:	4798      	blx	r3
   255a4:	4b1e      	ldr	r3, [pc, #120]	; (25620 <socket+0x20c>)
   255a6:	0018      	movs	r0, r3
   255a8:	4b1b      	ldr	r3, [pc, #108]	; (25618 <socket+0x204>)
   255aa:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   255ac:	1d3b      	adds	r3, r7, #4
   255ae:	781b      	ldrb	r3, [r3, #0]
   255b0:	2201      	movs	r2, #1
   255b2:	4013      	ands	r3, r2
   255b4:	d015      	beq.n	255e2 <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   255b6:	230c      	movs	r3, #12
   255b8:	18fb      	adds	r3, r7, r3
   255ba:	221f      	movs	r2, #31
   255bc:	18ba      	adds	r2, r7, r2
   255be:	7812      	ldrb	r2, [r2, #0]
   255c0:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   255c2:	69bb      	ldr	r3, [r7, #24]
   255c4:	2221      	movs	r2, #33	; 0x21
   255c6:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   255c8:	230c      	movs	r3, #12
   255ca:	18fa      	adds	r2, r7, r3
   255cc:	2300      	movs	r3, #0
   255ce:	9302      	str	r3, [sp, #8]
   255d0:	2300      	movs	r3, #0
   255d2:	9301      	str	r3, [sp, #4]
   255d4:	2300      	movs	r3, #0
   255d6:	9300      	str	r3, [sp, #0]
   255d8:	2304      	movs	r3, #4
   255da:	2150      	movs	r1, #80	; 0x50
   255dc:	2002      	movs	r0, #2
   255de:	4c11      	ldr	r4, [pc, #68]	; (25624 <socket+0x210>)
   255e0:	47a0      	blx	r4
			}
		}
	}
	return sock;
   255e2:	231f      	movs	r3, #31
   255e4:	18fb      	adds	r3, r7, r3
   255e6:	781b      	ldrb	r3, [r3, #0]
   255e8:	b25b      	sxtb	r3, r3
}
   255ea:	0018      	movs	r0, r3
   255ec:	46bd      	mov	sp, r7
   255ee:	b009      	add	sp, #36	; 0x24
   255f0:	bd90      	pop	{r4, r7, pc}
   255f2:	46c0      	nop			; (mov r8, r8)
   255f4:	200042b1 	.word	0x200042b1
   255f8:	20005b00 	.word	0x20005b00
   255fc:	00032ae5 	.word	0x00032ae5
   25600:	20005b70 	.word	0x20005b70
   25604:	200042b2 	.word	0x200042b2
   25608:	80000003 	.word	0x80000003
   2560c:	00020b5d 	.word	0x00020b5d
   25610:	200042ae 	.word	0x200042ae
   25614:	000393ac 	.word	0x000393ac
   25618:	0001de29 	.word	0x0001de29
   2561c:	000393d0 	.word	0x000393d0
   25620:	000393cc 	.word	0x000393cc
   25624:	00020dbd 	.word	0x00020dbd

00025628 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   25628:	b5b0      	push	{r4, r5, r7, lr}
   2562a:	b08a      	sub	sp, #40	; 0x28
   2562c:	af04      	add	r7, sp, #16
   2562e:	6039      	str	r1, [r7, #0]
   25630:	0011      	movs	r1, r2
   25632:	1dfb      	adds	r3, r7, #7
   25634:	1c02      	adds	r2, r0, #0
   25636:	701a      	strb	r2, [r3, #0]
   25638:	1dbb      	adds	r3, r7, #6
   2563a:	1c0a      	adds	r2, r1, #0
   2563c:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   2563e:	2317      	movs	r3, #23
   25640:	18fb      	adds	r3, r7, r3
   25642:	22fa      	movs	r2, #250	; 0xfa
   25644:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   25646:	1dfb      	adds	r3, r7, #7
   25648:	781b      	ldrb	r3, [r3, #0]
   2564a:	2b7f      	cmp	r3, #127	; 0x7f
   2564c:	d867      	bhi.n	2571e <connect+0xf6>
   2564e:	683b      	ldr	r3, [r7, #0]
   25650:	2b00      	cmp	r3, #0
   25652:	d064      	beq.n	2571e <connect+0xf6>
   25654:	1dfb      	adds	r3, r7, #7
   25656:	781b      	ldrb	r3, [r3, #0]
   25658:	b25b      	sxtb	r3, r3
   2565a:	4a35      	ldr	r2, [pc, #212]	; (25730 <connect+0x108>)
   2565c:	011b      	lsls	r3, r3, #4
   2565e:	18d3      	adds	r3, r2, r3
   25660:	330a      	adds	r3, #10
   25662:	781b      	ldrb	r3, [r3, #0]
   25664:	b2db      	uxtb	r3, r3
   25666:	2b01      	cmp	r3, #1
   25668:	d159      	bne.n	2571e <connect+0xf6>
   2566a:	1dbb      	adds	r3, r7, #6
   2566c:	781b      	ldrb	r3, [r3, #0]
   2566e:	2b00      	cmp	r3, #0
   25670:	d055      	beq.n	2571e <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   25672:	2316      	movs	r3, #22
   25674:	18fb      	adds	r3, r7, r3
   25676:	2244      	movs	r2, #68	; 0x44
   25678:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   2567a:	1dfb      	adds	r3, r7, #7
   2567c:	781b      	ldrb	r3, [r3, #0]
   2567e:	b25b      	sxtb	r3, r3
   25680:	4a2b      	ldr	r2, [pc, #172]	; (25730 <connect+0x108>)
   25682:	011b      	lsls	r3, r3, #4
   25684:	18d3      	adds	r3, r2, r3
   25686:	330b      	adds	r3, #11
   25688:	781b      	ldrb	r3, [r3, #0]
   2568a:	b2db      	uxtb	r3, r3
   2568c:	001a      	movs	r2, r3
   2568e:	2301      	movs	r3, #1
   25690:	4013      	ands	r3, r2
   25692:	d00f      	beq.n	256b4 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   25694:	2316      	movs	r3, #22
   25696:	18fb      	adds	r3, r7, r3
   25698:	224b      	movs	r2, #75	; 0x4b
   2569a:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   2569c:	1dfb      	adds	r3, r7, #7
   2569e:	781b      	ldrb	r3, [r3, #0]
   256a0:	b25b      	sxtb	r3, r3
   256a2:	4a23      	ldr	r2, [pc, #140]	; (25730 <connect+0x108>)
   256a4:	011b      	lsls	r3, r3, #4
   256a6:	18d3      	adds	r3, r2, r3
   256a8:	330b      	adds	r3, #11
   256aa:	781b      	ldrb	r3, [r3, #0]
   256ac:	b2da      	uxtb	r2, r3
   256ae:	2308      	movs	r3, #8
   256b0:	18fb      	adds	r3, r7, r3
   256b2:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   256b4:	2308      	movs	r3, #8
   256b6:	18fb      	adds	r3, r7, r3
   256b8:	1dfa      	adds	r2, r7, #7
   256ba:	7812      	ldrb	r2, [r2, #0]
   256bc:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   256be:	6839      	ldr	r1, [r7, #0]
   256c0:	2308      	movs	r3, #8
   256c2:	18fb      	adds	r3, r7, r3
   256c4:	2208      	movs	r2, #8
   256c6:	0018      	movs	r0, r3
   256c8:	4b1a      	ldr	r3, [pc, #104]	; (25734 <connect+0x10c>)
   256ca:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   256cc:	1dfb      	adds	r3, r7, #7
   256ce:	781b      	ldrb	r3, [r3, #0]
   256d0:	b25b      	sxtb	r3, r3
   256d2:	4a17      	ldr	r2, [pc, #92]	; (25730 <connect+0x108>)
   256d4:	011b      	lsls	r3, r3, #4
   256d6:	18d3      	adds	r3, r2, r3
   256d8:	3306      	adds	r3, #6
   256da:	881b      	ldrh	r3, [r3, #0]
   256dc:	b29a      	uxth	r2, r3
   256de:	2308      	movs	r3, #8
   256e0:	18fb      	adds	r3, r7, r3
   256e2:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   256e4:	2317      	movs	r3, #23
   256e6:	18fc      	adds	r4, r7, r3
   256e8:	2308      	movs	r3, #8
   256ea:	18fa      	adds	r2, r7, r3
   256ec:	2316      	movs	r3, #22
   256ee:	18fb      	adds	r3, r7, r3
   256f0:	7819      	ldrb	r1, [r3, #0]
   256f2:	2300      	movs	r3, #0
   256f4:	9302      	str	r3, [sp, #8]
   256f6:	2300      	movs	r3, #0
   256f8:	9301      	str	r3, [sp, #4]
   256fa:	2300      	movs	r3, #0
   256fc:	9300      	str	r3, [sp, #0]
   256fe:	230c      	movs	r3, #12
   25700:	2002      	movs	r0, #2
   25702:	4d0d      	ldr	r5, [pc, #52]	; (25738 <connect+0x110>)
   25704:	47a8      	blx	r5
   25706:	0003      	movs	r3, r0
   25708:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   2570a:	2317      	movs	r3, #23
   2570c:	18fb      	adds	r3, r7, r3
   2570e:	781b      	ldrb	r3, [r3, #0]
   25710:	b25b      	sxtb	r3, r3
   25712:	2b00      	cmp	r3, #0
   25714:	d003      	beq.n	2571e <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   25716:	2317      	movs	r3, #23
   25718:	18fb      	adds	r3, r7, r3
   2571a:	22f7      	movs	r2, #247	; 0xf7
   2571c:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   2571e:	2317      	movs	r3, #23
   25720:	18fb      	adds	r3, r7, r3
   25722:	781b      	ldrb	r3, [r3, #0]
   25724:	b25b      	sxtb	r3, r3
}
   25726:	0018      	movs	r0, r3
   25728:	46bd      	mov	sp, r7
   2572a:	b006      	add	sp, #24
   2572c:	bdb0      	pop	{r4, r5, r7, pc}
   2572e:	46c0      	nop			; (mov r8, r8)
   25730:	20005b00 	.word	0x20005b00
   25734:	00020b21 	.word	0x00020b21
   25738:	00020dbd 	.word	0x00020dbd

0002573c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   2573c:	b590      	push	{r4, r7, lr}
   2573e:	b08f      	sub	sp, #60	; 0x3c
   25740:	af04      	add	r7, sp, #16
   25742:	0004      	movs	r4, r0
   25744:	60b9      	str	r1, [r7, #8]
   25746:	0010      	movs	r0, r2
   25748:	0019      	movs	r1, r3
   2574a:	230f      	movs	r3, #15
   2574c:	18fb      	adds	r3, r7, r3
   2574e:	1c22      	adds	r2, r4, #0
   25750:	701a      	strb	r2, [r3, #0]
   25752:	230c      	movs	r3, #12
   25754:	18fb      	adds	r3, r7, r3
   25756:	1c02      	adds	r2, r0, #0
   25758:	801a      	strh	r2, [r3, #0]
   2575a:	1dbb      	adds	r3, r7, #6
   2575c:	1c0a      	adds	r2, r1, #0
   2575e:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   25760:	2326      	movs	r3, #38	; 0x26
   25762:	18fb      	adds	r3, r7, r3
   25764:	2206      	movs	r2, #6
   25766:	4252      	negs	r2, r2
   25768:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   2576a:	230f      	movs	r3, #15
   2576c:	18fb      	adds	r3, r7, r3
   2576e:	781b      	ldrb	r3, [r3, #0]
   25770:	2b7f      	cmp	r3, #127	; 0x7f
   25772:	d900      	bls.n	25776 <send+0x3a>
   25774:	e087      	b.n	25886 <send+0x14a>
   25776:	68bb      	ldr	r3, [r7, #8]
   25778:	2b00      	cmp	r3, #0
   2577a:	d100      	bne.n	2577e <send+0x42>
   2577c:	e083      	b.n	25886 <send+0x14a>
   2577e:	230c      	movs	r3, #12
   25780:	18fb      	adds	r3, r7, r3
   25782:	881a      	ldrh	r2, [r3, #0]
   25784:	23af      	movs	r3, #175	; 0xaf
   25786:	00db      	lsls	r3, r3, #3
   25788:	429a      	cmp	r2, r3
   2578a:	d900      	bls.n	2578e <send+0x52>
   2578c:	e07b      	b.n	25886 <send+0x14a>
   2578e:	230f      	movs	r3, #15
   25790:	18fb      	adds	r3, r7, r3
   25792:	781b      	ldrb	r3, [r3, #0]
   25794:	b25b      	sxtb	r3, r3
   25796:	4a40      	ldr	r2, [pc, #256]	; (25898 <send+0x15c>)
   25798:	011b      	lsls	r3, r3, #4
   2579a:	18d3      	adds	r3, r2, r3
   2579c:	330a      	adds	r3, #10
   2579e:	781b      	ldrb	r3, [r3, #0]
   257a0:	b2db      	uxtb	r3, r3
   257a2:	2b01      	cmp	r3, #1
   257a4:	d16f      	bne.n	25886 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   257a6:	2323      	movs	r3, #35	; 0x23
   257a8:	18fb      	adds	r3, r7, r3
   257aa:	2245      	movs	r2, #69	; 0x45
   257ac:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   257ae:	2324      	movs	r3, #36	; 0x24
   257b0:	18fb      	adds	r3, r7, r3
   257b2:	2250      	movs	r2, #80	; 0x50
   257b4:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   257b6:	2310      	movs	r3, #16
   257b8:	18fb      	adds	r3, r7, r3
   257ba:	220f      	movs	r2, #15
   257bc:	18ba      	adds	r2, r7, r2
   257be:	7812      	ldrb	r2, [r2, #0]
   257c0:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   257c2:	2310      	movs	r3, #16
   257c4:	18fb      	adds	r3, r7, r3
   257c6:	220c      	movs	r2, #12
   257c8:	18ba      	adds	r2, r7, r2
   257ca:	8812      	ldrh	r2, [r2, #0]
   257cc:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   257ce:	230f      	movs	r3, #15
   257d0:	18fb      	adds	r3, r7, r3
   257d2:	781b      	ldrb	r3, [r3, #0]
   257d4:	b25b      	sxtb	r3, r3
   257d6:	4a30      	ldr	r2, [pc, #192]	; (25898 <send+0x15c>)
   257d8:	011b      	lsls	r3, r3, #4
   257da:	18d3      	adds	r3, r2, r3
   257dc:	3306      	adds	r3, #6
   257de:	881b      	ldrh	r3, [r3, #0]
   257e0:	b29a      	uxth	r2, r3
   257e2:	2310      	movs	r3, #16
   257e4:	18fb      	adds	r3, r7, r3
   257e6:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   257e8:	230f      	movs	r3, #15
   257ea:	18fb      	adds	r3, r7, r3
   257ec:	781b      	ldrb	r3, [r3, #0]
   257ee:	b25b      	sxtb	r3, r3
   257f0:	2b06      	cmp	r3, #6
   257f2:	dd03      	ble.n	257fc <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   257f4:	2324      	movs	r3, #36	; 0x24
   257f6:	18fb      	adds	r3, r7, r3
   257f8:	2244      	movs	r2, #68	; 0x44
   257fa:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   257fc:	230f      	movs	r3, #15
   257fe:	18fb      	adds	r3, r7, r3
   25800:	781b      	ldrb	r3, [r3, #0]
   25802:	b25b      	sxtb	r3, r3
   25804:	4a24      	ldr	r2, [pc, #144]	; (25898 <send+0x15c>)
   25806:	011b      	lsls	r3, r3, #4
   25808:	18d3      	adds	r3, r2, r3
   2580a:	330b      	adds	r3, #11
   2580c:	781b      	ldrb	r3, [r3, #0]
   2580e:	b2db      	uxtb	r3, r3
   25810:	001a      	movs	r2, r3
   25812:	2301      	movs	r3, #1
   25814:	4013      	ands	r3, r2
   25816:	d00f      	beq.n	25838 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   25818:	2323      	movs	r3, #35	; 0x23
   2581a:	18fb      	adds	r3, r7, r3
   2581c:	224c      	movs	r2, #76	; 0x4c
   2581e:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   25820:	230f      	movs	r3, #15
   25822:	18fb      	adds	r3, r7, r3
   25824:	2200      	movs	r2, #0
   25826:	569a      	ldrsb	r2, [r3, r2]
   25828:	2324      	movs	r3, #36	; 0x24
   2582a:	18fb      	adds	r3, r7, r3
   2582c:	491a      	ldr	r1, [pc, #104]	; (25898 <send+0x15c>)
   2582e:	0112      	lsls	r2, r2, #4
   25830:	188a      	adds	r2, r1, r2
   25832:	3208      	adds	r2, #8
   25834:	8812      	ldrh	r2, [r2, #0]
   25836:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   25838:	2323      	movs	r3, #35	; 0x23
   2583a:	18fb      	adds	r3, r7, r3
   2583c:	781b      	ldrb	r3, [r3, #0]
   2583e:	2280      	movs	r2, #128	; 0x80
   25840:	4252      	negs	r2, r2
   25842:	4313      	orrs	r3, r2
   25844:	b2d9      	uxtb	r1, r3
   25846:	2310      	movs	r3, #16
   25848:	18fa      	adds	r2, r7, r3
   2584a:	2324      	movs	r3, #36	; 0x24
   2584c:	18fb      	adds	r3, r7, r3
   2584e:	881b      	ldrh	r3, [r3, #0]
   25850:	9302      	str	r3, [sp, #8]
   25852:	230c      	movs	r3, #12
   25854:	18fb      	adds	r3, r7, r3
   25856:	881b      	ldrh	r3, [r3, #0]
   25858:	9301      	str	r3, [sp, #4]
   2585a:	68bb      	ldr	r3, [r7, #8]
   2585c:	9300      	str	r3, [sp, #0]
   2585e:	2310      	movs	r3, #16
   25860:	2002      	movs	r0, #2
   25862:	4c0e      	ldr	r4, [pc, #56]	; (2589c <send+0x160>)
   25864:	47a0      	blx	r4
   25866:	0003      	movs	r3, r0
   25868:	001a      	movs	r2, r3
   2586a:	2326      	movs	r3, #38	; 0x26
   2586c:	18fb      	adds	r3, r7, r3
   2586e:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   25870:	2326      	movs	r3, #38	; 0x26
   25872:	18fb      	adds	r3, r7, r3
   25874:	2200      	movs	r2, #0
   25876:	5e9b      	ldrsh	r3, [r3, r2]
   25878:	2b00      	cmp	r3, #0
   2587a:	d004      	beq.n	25886 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   2587c:	2326      	movs	r3, #38	; 0x26
   2587e:	18fb      	adds	r3, r7, r3
   25880:	220e      	movs	r2, #14
   25882:	4252      	negs	r2, r2
   25884:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   25886:	2326      	movs	r3, #38	; 0x26
   25888:	18fb      	adds	r3, r7, r3
   2588a:	2200      	movs	r2, #0
   2588c:	5e9b      	ldrsh	r3, [r3, r2]
}
   2588e:	0018      	movs	r0, r3
   25890:	46bd      	mov	sp, r7
   25892:	b00b      	add	sp, #44	; 0x2c
   25894:	bd90      	pop	{r4, r7, pc}
   25896:	46c0      	nop			; (mov r8, r8)
   25898:	20005b00 	.word	0x20005b00
   2589c:	00020dbd 	.word	0x00020dbd

000258a0 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   258a0:	b590      	push	{r4, r7, lr}
   258a2:	b08d      	sub	sp, #52	; 0x34
   258a4:	af04      	add	r7, sp, #16
   258a6:	60b9      	str	r1, [r7, #8]
   258a8:	0011      	movs	r1, r2
   258aa:	607b      	str	r3, [r7, #4]
   258ac:	230f      	movs	r3, #15
   258ae:	18fb      	adds	r3, r7, r3
   258b0:	1c02      	adds	r2, r0, #0
   258b2:	701a      	strb	r2, [r3, #0]
   258b4:	230c      	movs	r3, #12
   258b6:	18fb      	adds	r3, r7, r3
   258b8:	1c0a      	adds	r2, r1, #0
   258ba:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   258bc:	231e      	movs	r3, #30
   258be:	18fb      	adds	r3, r7, r3
   258c0:	2206      	movs	r2, #6
   258c2:	4252      	negs	r2, r2
   258c4:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   258c6:	230f      	movs	r3, #15
   258c8:	18fb      	adds	r3, r7, r3
   258ca:	781b      	ldrb	r3, [r3, #0]
   258cc:	2b7f      	cmp	r3, #127	; 0x7f
   258ce:	d900      	bls.n	258d2 <recv+0x32>
   258d0:	e099      	b.n	25a06 <recv+0x166>
   258d2:	68bb      	ldr	r3, [r7, #8]
   258d4:	2b00      	cmp	r3, #0
   258d6:	d100      	bne.n	258da <recv+0x3a>
   258d8:	e095      	b.n	25a06 <recv+0x166>
   258da:	230c      	movs	r3, #12
   258dc:	18fb      	adds	r3, r7, r3
   258de:	881b      	ldrh	r3, [r3, #0]
   258e0:	2b00      	cmp	r3, #0
   258e2:	d100      	bne.n	258e6 <recv+0x46>
   258e4:	e08f      	b.n	25a06 <recv+0x166>
   258e6:	230f      	movs	r3, #15
   258e8:	18fb      	adds	r3, r7, r3
   258ea:	781b      	ldrb	r3, [r3, #0]
   258ec:	b25b      	sxtb	r3, r3
   258ee:	4a4a      	ldr	r2, [pc, #296]	; (25a18 <recv+0x178>)
   258f0:	011b      	lsls	r3, r3, #4
   258f2:	18d3      	adds	r3, r2, r3
   258f4:	330a      	adds	r3, #10
   258f6:	781b      	ldrb	r3, [r3, #0]
   258f8:	b2db      	uxtb	r3, r3
   258fa:	2b01      	cmp	r3, #1
   258fc:	d000      	beq.n	25900 <recv+0x60>
   258fe:	e082      	b.n	25a06 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   25900:	231e      	movs	r3, #30
   25902:	18fb      	adds	r3, r7, r3
   25904:	2200      	movs	r2, #0
   25906:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   25908:	230f      	movs	r3, #15
   2590a:	18fb      	adds	r3, r7, r3
   2590c:	2200      	movs	r2, #0
   2590e:	569a      	ldrsb	r2, [r3, r2]
   25910:	4b41      	ldr	r3, [pc, #260]	; (25a18 <recv+0x178>)
   25912:	0112      	lsls	r2, r2, #4
   25914:	68b9      	ldr	r1, [r7, #8]
   25916:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   25918:	230f      	movs	r3, #15
   2591a:	18fb      	adds	r3, r7, r3
   2591c:	781b      	ldrb	r3, [r3, #0]
   2591e:	b25b      	sxtb	r3, r3
   25920:	4a3d      	ldr	r2, [pc, #244]	; (25a18 <recv+0x178>)
   25922:	011b      	lsls	r3, r3, #4
   25924:	18d3      	adds	r3, r2, r3
   25926:	3304      	adds	r3, #4
   25928:	220c      	movs	r2, #12
   2592a:	18ba      	adds	r2, r7, r2
   2592c:	8812      	ldrh	r2, [r2, #0]
   2592e:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   25930:	230f      	movs	r3, #15
   25932:	18fb      	adds	r3, r7, r3
   25934:	781b      	ldrb	r3, [r3, #0]
   25936:	b25b      	sxtb	r3, r3
   25938:	4a37      	ldr	r2, [pc, #220]	; (25a18 <recv+0x178>)
   2593a:	011b      	lsls	r3, r3, #4
   2593c:	18d3      	adds	r3, r2, r3
   2593e:	330c      	adds	r3, #12
   25940:	781b      	ldrb	r3, [r3, #0]
   25942:	b2db      	uxtb	r3, r3
   25944:	2b00      	cmp	r3, #0
   25946:	d15e      	bne.n	25a06 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   25948:	231d      	movs	r3, #29
   2594a:	18fb      	adds	r3, r7, r3
   2594c:	2246      	movs	r2, #70	; 0x46
   2594e:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   25950:	230f      	movs	r3, #15
   25952:	18fb      	adds	r3, r7, r3
   25954:	781b      	ldrb	r3, [r3, #0]
   25956:	b25b      	sxtb	r3, r3
   25958:	4a2f      	ldr	r2, [pc, #188]	; (25a18 <recv+0x178>)
   2595a:	011b      	lsls	r3, r3, #4
   2595c:	18d3      	adds	r3, r2, r3
   2595e:	330c      	adds	r3, #12
   25960:	2201      	movs	r2, #1
   25962:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25964:	230f      	movs	r3, #15
   25966:	18fb      	adds	r3, r7, r3
   25968:	781b      	ldrb	r3, [r3, #0]
   2596a:	b25b      	sxtb	r3, r3
   2596c:	4a2a      	ldr	r2, [pc, #168]	; (25a18 <recv+0x178>)
   2596e:	011b      	lsls	r3, r3, #4
   25970:	18d3      	adds	r3, r2, r3
   25972:	330b      	adds	r3, #11
   25974:	781b      	ldrb	r3, [r3, #0]
   25976:	b2db      	uxtb	r3, r3
   25978:	001a      	movs	r2, r3
   2597a:	2301      	movs	r3, #1
   2597c:	4013      	ands	r3, r2
   2597e:	d003      	beq.n	25988 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   25980:	231d      	movs	r3, #29
   25982:	18fb      	adds	r3, r7, r3
   25984:	224d      	movs	r2, #77	; 0x4d
   25986:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   25988:	687b      	ldr	r3, [r7, #4]
   2598a:	2b00      	cmp	r3, #0
   2598c:	d105      	bne.n	2599a <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   2598e:	2314      	movs	r3, #20
   25990:	18fb      	adds	r3, r7, r3
   25992:	2201      	movs	r2, #1
   25994:	4252      	negs	r2, r2
   25996:	601a      	str	r2, [r3, #0]
   25998:	e003      	b.n	259a2 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   2599a:	2314      	movs	r3, #20
   2599c:	18fb      	adds	r3, r7, r3
   2599e:	687a      	ldr	r2, [r7, #4]
   259a0:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   259a2:	2314      	movs	r3, #20
   259a4:	18fb      	adds	r3, r7, r3
   259a6:	220f      	movs	r2, #15
   259a8:	18ba      	adds	r2, r7, r2
   259aa:	7812      	ldrb	r2, [r2, #0]
   259ac:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   259ae:	230f      	movs	r3, #15
   259b0:	18fb      	adds	r3, r7, r3
   259b2:	781b      	ldrb	r3, [r3, #0]
   259b4:	b25b      	sxtb	r3, r3
   259b6:	4a18      	ldr	r2, [pc, #96]	; (25a18 <recv+0x178>)
   259b8:	011b      	lsls	r3, r3, #4
   259ba:	18d3      	adds	r3, r2, r3
   259bc:	3306      	adds	r3, #6
   259be:	881b      	ldrh	r3, [r3, #0]
   259c0:	b29a      	uxth	r2, r3
   259c2:	2314      	movs	r3, #20
   259c4:	18fb      	adds	r3, r7, r3
   259c6:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   259c8:	2314      	movs	r3, #20
   259ca:	18fa      	adds	r2, r7, r3
   259cc:	231d      	movs	r3, #29
   259ce:	18fb      	adds	r3, r7, r3
   259d0:	7819      	ldrb	r1, [r3, #0]
   259d2:	2300      	movs	r3, #0
   259d4:	9302      	str	r3, [sp, #8]
   259d6:	2300      	movs	r3, #0
   259d8:	9301      	str	r3, [sp, #4]
   259da:	2300      	movs	r3, #0
   259dc:	9300      	str	r3, [sp, #0]
   259de:	2308      	movs	r3, #8
   259e0:	2002      	movs	r0, #2
   259e2:	4c0e      	ldr	r4, [pc, #56]	; (25a1c <recv+0x17c>)
   259e4:	47a0      	blx	r4
   259e6:	0003      	movs	r3, r0
   259e8:	001a      	movs	r2, r3
   259ea:	231e      	movs	r3, #30
   259ec:	18fb      	adds	r3, r7, r3
   259ee:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   259f0:	231e      	movs	r3, #30
   259f2:	18fb      	adds	r3, r7, r3
   259f4:	2200      	movs	r2, #0
   259f6:	5e9b      	ldrsh	r3, [r3, r2]
   259f8:	2b00      	cmp	r3, #0
   259fa:	d004      	beq.n	25a06 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   259fc:	231e      	movs	r3, #30
   259fe:	18fb      	adds	r3, r7, r3
   25a00:	220e      	movs	r2, #14
   25a02:	4252      	negs	r2, r2
   25a04:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   25a06:	231e      	movs	r3, #30
   25a08:	18fb      	adds	r3, r7, r3
   25a0a:	2200      	movs	r2, #0
   25a0c:	5e9b      	ldrsh	r3, [r3, r2]
}
   25a0e:	0018      	movs	r0, r3
   25a10:	46bd      	mov	sp, r7
   25a12:	b009      	add	sp, #36	; 0x24
   25a14:	bd90      	pop	{r4, r7, pc}
   25a16:	46c0      	nop			; (mov r8, r8)
   25a18:	20005b00 	.word	0x20005b00
   25a1c:	00020dbd 	.word	0x00020dbd

00025a20 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   25a20:	b5b0      	push	{r4, r5, r7, lr}
   25a22:	b088      	sub	sp, #32
   25a24:	af04      	add	r7, sp, #16
   25a26:	0002      	movs	r2, r0
   25a28:	1dfb      	adds	r3, r7, #7
   25a2a:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   25a2c:	230f      	movs	r3, #15
   25a2e:	18fb      	adds	r3, r7, r3
   25a30:	22fa      	movs	r2, #250	; 0xfa
   25a32:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   25a34:	4b43      	ldr	r3, [pc, #268]	; (25b44 <close+0x124>)
   25a36:	0018      	movs	r0, r3
   25a38:	4b43      	ldr	r3, [pc, #268]	; (25b48 <close+0x128>)
   25a3a:	4798      	blx	r3
   25a3c:	1dfb      	adds	r3, r7, #7
   25a3e:	2200      	movs	r2, #0
   25a40:	569a      	ldrsb	r2, [r3, r2]
   25a42:	4b42      	ldr	r3, [pc, #264]	; (25b4c <close+0x12c>)
   25a44:	0011      	movs	r1, r2
   25a46:	0018      	movs	r0, r3
   25a48:	4b3f      	ldr	r3, [pc, #252]	; (25b48 <close+0x128>)
   25a4a:	4798      	blx	r3
   25a4c:	4b40      	ldr	r3, [pc, #256]	; (25b50 <close+0x130>)
   25a4e:	0018      	movs	r0, r3
   25a50:	4b3d      	ldr	r3, [pc, #244]	; (25b48 <close+0x128>)
   25a52:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   25a54:	1dfb      	adds	r3, r7, #7
   25a56:	781b      	ldrb	r3, [r3, #0]
   25a58:	2b7f      	cmp	r3, #127	; 0x7f
   25a5a:	d86a      	bhi.n	25b32 <close+0x112>
   25a5c:	1dfb      	adds	r3, r7, #7
   25a5e:	781b      	ldrb	r3, [r3, #0]
   25a60:	b25b      	sxtb	r3, r3
   25a62:	4a3c      	ldr	r2, [pc, #240]	; (25b54 <close+0x134>)
   25a64:	011b      	lsls	r3, r3, #4
   25a66:	18d3      	adds	r3, r2, r3
   25a68:	330a      	adds	r3, #10
   25a6a:	781b      	ldrb	r3, [r3, #0]
   25a6c:	b2db      	uxtb	r3, r3
   25a6e:	2b01      	cmp	r3, #1
   25a70:	d15f      	bne.n	25b32 <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   25a72:	230e      	movs	r3, #14
   25a74:	18fb      	adds	r3, r7, r3
   25a76:	2249      	movs	r2, #73	; 0x49
   25a78:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   25a7a:	2308      	movs	r3, #8
   25a7c:	18fb      	adds	r3, r7, r3
   25a7e:	1dfa      	adds	r2, r7, #7
   25a80:	7812      	ldrb	r2, [r2, #0]
   25a82:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   25a84:	1dfb      	adds	r3, r7, #7
   25a86:	781b      	ldrb	r3, [r3, #0]
   25a88:	b25b      	sxtb	r3, r3
   25a8a:	4a32      	ldr	r2, [pc, #200]	; (25b54 <close+0x134>)
   25a8c:	011b      	lsls	r3, r3, #4
   25a8e:	18d3      	adds	r3, r2, r3
   25a90:	3306      	adds	r3, #6
   25a92:	881b      	ldrh	r3, [r3, #0]
   25a94:	b29a      	uxth	r2, r3
   25a96:	2308      	movs	r3, #8
   25a98:	18fb      	adds	r3, r7, r3
   25a9a:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   25a9c:	1dfb      	adds	r3, r7, #7
   25a9e:	781b      	ldrb	r3, [r3, #0]
   25aa0:	b25b      	sxtb	r3, r3
   25aa2:	4a2c      	ldr	r2, [pc, #176]	; (25b54 <close+0x134>)
   25aa4:	011b      	lsls	r3, r3, #4
   25aa6:	18d3      	adds	r3, r2, r3
   25aa8:	330a      	adds	r3, #10
   25aaa:	2200      	movs	r2, #0
   25aac:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   25aae:	1dfb      	adds	r3, r7, #7
   25ab0:	781b      	ldrb	r3, [r3, #0]
   25ab2:	b25b      	sxtb	r3, r3
   25ab4:	4a27      	ldr	r2, [pc, #156]	; (25b54 <close+0x134>)
   25ab6:	011b      	lsls	r3, r3, #4
   25ab8:	18d3      	adds	r3, r2, r3
   25aba:	3306      	adds	r3, #6
   25abc:	2200      	movs	r2, #0
   25abe:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25ac0:	1dfb      	adds	r3, r7, #7
   25ac2:	781b      	ldrb	r3, [r3, #0]
   25ac4:	b25b      	sxtb	r3, r3
   25ac6:	4a23      	ldr	r2, [pc, #140]	; (25b54 <close+0x134>)
   25ac8:	011b      	lsls	r3, r3, #4
   25aca:	18d3      	adds	r3, r2, r3
   25acc:	330b      	adds	r3, #11
   25ace:	781b      	ldrb	r3, [r3, #0]
   25ad0:	b2db      	uxtb	r3, r3
   25ad2:	001a      	movs	r2, r3
   25ad4:	2301      	movs	r3, #1
   25ad6:	4013      	ands	r3, r2
   25ad8:	d003      	beq.n	25ae2 <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   25ada:	230e      	movs	r3, #14
   25adc:	18fb      	adds	r3, r7, r3
   25ade:	224e      	movs	r2, #78	; 0x4e
   25ae0:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   25ae2:	230f      	movs	r3, #15
   25ae4:	18fc      	adds	r4, r7, r3
   25ae6:	2308      	movs	r3, #8
   25ae8:	18fa      	adds	r2, r7, r3
   25aea:	230e      	movs	r3, #14
   25aec:	18fb      	adds	r3, r7, r3
   25aee:	7819      	ldrb	r1, [r3, #0]
   25af0:	2300      	movs	r3, #0
   25af2:	9302      	str	r3, [sp, #8]
   25af4:	2300      	movs	r3, #0
   25af6:	9301      	str	r3, [sp, #4]
   25af8:	2300      	movs	r3, #0
   25afa:	9300      	str	r3, [sp, #0]
   25afc:	2304      	movs	r3, #4
   25afe:	2002      	movs	r0, #2
   25b00:	4d15      	ldr	r5, [pc, #84]	; (25b58 <close+0x138>)
   25b02:	47a8      	blx	r5
   25b04:	0003      	movs	r3, r0
   25b06:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   25b08:	230f      	movs	r3, #15
   25b0a:	18fb      	adds	r3, r7, r3
   25b0c:	781b      	ldrb	r3, [r3, #0]
   25b0e:	b25b      	sxtb	r3, r3
   25b10:	2b00      	cmp	r3, #0
   25b12:	d003      	beq.n	25b1c <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   25b14:	230f      	movs	r3, #15
   25b16:	18fb      	adds	r3, r7, r3
   25b18:	22f7      	movs	r2, #247	; 0xf7
   25b1a:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   25b1c:	1dfb      	adds	r3, r7, #7
   25b1e:	781b      	ldrb	r3, [r3, #0]
   25b20:	b25b      	sxtb	r3, r3
   25b22:	011a      	lsls	r2, r3, #4
   25b24:	4b0b      	ldr	r3, [pc, #44]	; (25b54 <close+0x134>)
   25b26:	18d3      	adds	r3, r2, r3
   25b28:	2210      	movs	r2, #16
   25b2a:	2100      	movs	r1, #0
   25b2c:	0018      	movs	r0, r3
   25b2e:	4b0b      	ldr	r3, [pc, #44]	; (25b5c <close+0x13c>)
   25b30:	4798      	blx	r3
	}
	return s8Ret;
   25b32:	230f      	movs	r3, #15
   25b34:	18fb      	adds	r3, r7, r3
   25b36:	781b      	ldrb	r3, [r3, #0]
   25b38:	b25b      	sxtb	r3, r3
}
   25b3a:	0018      	movs	r0, r3
   25b3c:	46bd      	mov	sp, r7
   25b3e:	b004      	add	sp, #16
   25b40:	bdb0      	pop	{r4, r5, r7, pc}
   25b42:	46c0      	nop			; (mov r8, r8)
   25b44:	000393ac 	.word	0x000393ac
   25b48:	0001de29 	.word	0x0001de29
   25b4c:	000393ec 	.word	0x000393ec
   25b50:	000393cc 	.word	0x000393cc
   25b54:	20005b00 	.word	0x20005b00
   25b58:	00020dbd 	.word	0x00020dbd
   25b5c:	00020b5d 	.word	0x00020b5d

00025b60 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   25b60:	b580      	push	{r7, lr}
   25b62:	b086      	sub	sp, #24
   25b64:	af00      	add	r7, sp, #0
   25b66:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   25b68:	2300      	movs	r3, #0
   25b6a:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   25b6c:	2317      	movs	r3, #23
   25b6e:	18fb      	adds	r3, r7, r3
   25b70:	2200      	movs	r2, #0
   25b72:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   25b74:	2316      	movs	r3, #22
   25b76:	18fb      	adds	r3, r7, r3
   25b78:	2200      	movs	r2, #0
   25b7a:	701a      	strb	r2, [r3, #0]
   25b7c:	e060      	b.n	25c40 <nmi_inet_addr+0xe0>
	{
		j = 0;
   25b7e:	2315      	movs	r3, #21
   25b80:	18fb      	adds	r3, r7, r3
   25b82:	2200      	movs	r2, #0
   25b84:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   25b86:	2314      	movs	r3, #20
   25b88:	18fb      	adds	r3, r7, r3
   25b8a:	687a      	ldr	r2, [r7, #4]
   25b8c:	7812      	ldrb	r2, [r2, #0]
   25b8e:	701a      	strb	r2, [r3, #0]
			++j;
   25b90:	2315      	movs	r3, #21
   25b92:	18fb      	adds	r3, r7, r3
   25b94:	2215      	movs	r2, #21
   25b96:	18ba      	adds	r2, r7, r2
   25b98:	7812      	ldrb	r2, [r2, #0]
   25b9a:	3201      	adds	r2, #1
   25b9c:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   25b9e:	2315      	movs	r3, #21
   25ba0:	18fb      	adds	r3, r7, r3
   25ba2:	781b      	ldrb	r3, [r3, #0]
   25ba4:	2b04      	cmp	r3, #4
   25ba6:	d901      	bls.n	25bac <nmi_inet_addr+0x4c>
			{
				return 0;
   25ba8:	2300      	movs	r3, #0
   25baa:	e057      	b.n	25c5c <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   25bac:	2314      	movs	r3, #20
   25bae:	18fb      	adds	r3, r7, r3
   25bb0:	781b      	ldrb	r3, [r3, #0]
   25bb2:	2b2e      	cmp	r3, #46	; 0x2e
   25bb4:	d004      	beq.n	25bc0 <nmi_inet_addr+0x60>
   25bb6:	2314      	movs	r3, #20
   25bb8:	18fb      	adds	r3, r7, r3
   25bba:	781b      	ldrb	r3, [r3, #0]
   25bbc:	2b00      	cmp	r3, #0
   25bbe:	d10d      	bne.n	25bdc <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   25bc0:	2316      	movs	r3, #22
   25bc2:	18fb      	adds	r3, r7, r3
   25bc4:	781b      	ldrb	r3, [r3, #0]
   25bc6:	220c      	movs	r2, #12
   25bc8:	18ba      	adds	r2, r7, r2
   25bca:	2117      	movs	r1, #23
   25bcc:	1879      	adds	r1, r7, r1
   25bce:	7809      	ldrb	r1, [r1, #0]
   25bd0:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   25bd2:	2317      	movs	r3, #23
   25bd4:	18fb      	adds	r3, r7, r3
   25bd6:	2200      	movs	r2, #0
   25bd8:	701a      	strb	r2, [r3, #0]
   25bda:	e01d      	b.n	25c18 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   25bdc:	2314      	movs	r3, #20
   25bde:	18fb      	adds	r3, r7, r3
   25be0:	781b      	ldrb	r3, [r3, #0]
   25be2:	2b2f      	cmp	r3, #47	; 0x2f
   25be4:	d916      	bls.n	25c14 <nmi_inet_addr+0xb4>
   25be6:	2314      	movs	r3, #20
   25be8:	18fb      	adds	r3, r7, r3
   25bea:	781b      	ldrb	r3, [r3, #0]
   25bec:	2b39      	cmp	r3, #57	; 0x39
   25bee:	d811      	bhi.n	25c14 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   25bf0:	2317      	movs	r3, #23
   25bf2:	18fb      	adds	r3, r7, r3
   25bf4:	781b      	ldrb	r3, [r3, #0]
   25bf6:	1c1a      	adds	r2, r3, #0
   25bf8:	0092      	lsls	r2, r2, #2
   25bfa:	18d3      	adds	r3, r2, r3
   25bfc:	18db      	adds	r3, r3, r3
   25bfe:	b2da      	uxtb	r2, r3
   25c00:	2314      	movs	r3, #20
   25c02:	18fb      	adds	r3, r7, r3
   25c04:	781b      	ldrb	r3, [r3, #0]
   25c06:	18d3      	adds	r3, r2, r3
   25c08:	b2da      	uxtb	r2, r3
   25c0a:	2317      	movs	r3, #23
   25c0c:	18fb      	adds	r3, r7, r3
   25c0e:	3a30      	subs	r2, #48	; 0x30
   25c10:	701a      	strb	r2, [r3, #0]
   25c12:	e001      	b.n	25c18 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   25c14:	2300      	movs	r3, #0
   25c16:	e021      	b.n	25c5c <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   25c18:	687b      	ldr	r3, [r7, #4]
   25c1a:	3301      	adds	r3, #1
   25c1c:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   25c1e:	2314      	movs	r3, #20
   25c20:	18fb      	adds	r3, r7, r3
   25c22:	781b      	ldrb	r3, [r3, #0]
   25c24:	2b2e      	cmp	r3, #46	; 0x2e
   25c26:	d004      	beq.n	25c32 <nmi_inet_addr+0xd2>
   25c28:	2314      	movs	r3, #20
   25c2a:	18fb      	adds	r3, r7, r3
   25c2c:	781b      	ldrb	r3, [r3, #0]
   25c2e:	2b00      	cmp	r3, #0
   25c30:	d1a9      	bne.n	25b86 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   25c32:	2316      	movs	r3, #22
   25c34:	18fb      	adds	r3, r7, r3
   25c36:	2216      	movs	r2, #22
   25c38:	18ba      	adds	r2, r7, r2
   25c3a:	7812      	ldrb	r2, [r2, #0]
   25c3c:	3201      	adds	r2, #1
   25c3e:	701a      	strb	r2, [r3, #0]
   25c40:	2316      	movs	r3, #22
   25c42:	18fb      	adds	r3, r7, r3
   25c44:	781b      	ldrb	r3, [r3, #0]
   25c46:	2b03      	cmp	r3, #3
   25c48:	d999      	bls.n	25b7e <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   25c4a:	230c      	movs	r3, #12
   25c4c:	18f9      	adds	r1, r7, r3
   25c4e:	2310      	movs	r3, #16
   25c50:	18fb      	adds	r3, r7, r3
   25c52:	2204      	movs	r2, #4
   25c54:	0018      	movs	r0, r3
   25c56:	4b03      	ldr	r3, [pc, #12]	; (25c64 <nmi_inet_addr+0x104>)
   25c58:	4798      	blx	r3
	return u32IP;
   25c5a:	693b      	ldr	r3, [r7, #16]
}
   25c5c:	0018      	movs	r0, r3
   25c5e:	46bd      	mov	sp, r7
   25c60:	b006      	add	sp, #24
   25c62:	bd80      	pop	{r7, pc}
   25c64:	00020b21 	.word	0x00020b21

00025c68 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   25c68:	b5b0      	push	{r4, r5, r7, lr}
   25c6a:	b088      	sub	sp, #32
   25c6c:	af04      	add	r7, sp, #16
   25c6e:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   25c70:	230f      	movs	r3, #15
   25c72:	18fb      	adds	r3, r7, r3
   25c74:	22fa      	movs	r2, #250	; 0xfa
   25c76:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   25c78:	687b      	ldr	r3, [r7, #4]
   25c7a:	0018      	movs	r0, r3
   25c7c:	4b14      	ldr	r3, [pc, #80]	; (25cd0 <gethostbyname+0x68>)
   25c7e:	4798      	blx	r3
   25c80:	0003      	movs	r3, r0
   25c82:	001a      	movs	r2, r3
   25c84:	230e      	movs	r3, #14
   25c86:	18fb      	adds	r3, r7, r3
   25c88:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   25c8a:	230e      	movs	r3, #14
   25c8c:	18fb      	adds	r3, r7, r3
   25c8e:	781b      	ldrb	r3, [r3, #0]
   25c90:	2b40      	cmp	r3, #64	; 0x40
   25c92:	d815      	bhi.n	25cc0 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   25c94:	230e      	movs	r3, #14
   25c96:	18fb      	adds	r3, r7, r3
   25c98:	781b      	ldrb	r3, [r3, #0]
   25c9a:	b29b      	uxth	r3, r3
   25c9c:	3301      	adds	r3, #1
   25c9e:	b299      	uxth	r1, r3
   25ca0:	230f      	movs	r3, #15
   25ca2:	18fc      	adds	r4, r7, r3
   25ca4:	687a      	ldr	r2, [r7, #4]
   25ca6:	2300      	movs	r3, #0
   25ca8:	9302      	str	r3, [sp, #8]
   25caa:	2300      	movs	r3, #0
   25cac:	9301      	str	r3, [sp, #4]
   25cae:	2300      	movs	r3, #0
   25cb0:	9300      	str	r3, [sp, #0]
   25cb2:	000b      	movs	r3, r1
   25cb4:	214a      	movs	r1, #74	; 0x4a
   25cb6:	2002      	movs	r0, #2
   25cb8:	4d06      	ldr	r5, [pc, #24]	; (25cd4 <gethostbyname+0x6c>)
   25cba:	47a8      	blx	r5
   25cbc:	0003      	movs	r3, r0
   25cbe:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   25cc0:	230f      	movs	r3, #15
   25cc2:	18fb      	adds	r3, r7, r3
   25cc4:	781b      	ldrb	r3, [r3, #0]
   25cc6:	b25b      	sxtb	r3, r3
}
   25cc8:	0018      	movs	r0, r3
   25cca:	46bd      	mov	sp, r7
   25ccc:	b004      	add	sp, #16
   25cce:	bdb0      	pop	{r4, r5, r7, pc}
   25cd0:	00020b9b 	.word	0x00020b9b
   25cd4:	00020dbd 	.word	0x00020dbd

00025cd8 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   25cd8:	b580      	push	{r7, lr}
   25cda:	b082      	sub	sp, #8
   25cdc:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   25cde:	003b      	movs	r3, r7
   25ce0:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   25ce2:	687b      	ldr	r3, [r7, #4]
   25ce4:	22b9      	movs	r2, #185	; 0xb9
   25ce6:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   25ce8:	4b13      	ldr	r3, [pc, #76]	; (25d38 <spi_flash_enter_low_power_mode+0x60>)
   25cea:	2100      	movs	r1, #0
   25cec:	0018      	movs	r0, r3
   25cee:	4b13      	ldr	r3, [pc, #76]	; (25d3c <spi_flash_enter_low_power_mode+0x64>)
   25cf0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   25cf2:	687b      	ldr	r3, [r7, #4]
   25cf4:	781b      	ldrb	r3, [r3, #0]
   25cf6:	001a      	movs	r2, r3
   25cf8:	4b11      	ldr	r3, [pc, #68]	; (25d40 <spi_flash_enter_low_power_mode+0x68>)
   25cfa:	0011      	movs	r1, r2
   25cfc:	0018      	movs	r0, r3
   25cfe:	4b0f      	ldr	r3, [pc, #60]	; (25d3c <spi_flash_enter_low_power_mode+0x64>)
   25d00:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   25d02:	4b10      	ldr	r3, [pc, #64]	; (25d44 <spi_flash_enter_low_power_mode+0x6c>)
   25d04:	2101      	movs	r1, #1
   25d06:	0018      	movs	r0, r3
   25d08:	4b0c      	ldr	r3, [pc, #48]	; (25d3c <spi_flash_enter_low_power_mode+0x64>)
   25d0a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   25d0c:	4b0e      	ldr	r3, [pc, #56]	; (25d48 <spi_flash_enter_low_power_mode+0x70>)
   25d0e:	2100      	movs	r1, #0
   25d10:	0018      	movs	r0, r3
   25d12:	4b0a      	ldr	r3, [pc, #40]	; (25d3c <spi_flash_enter_low_power_mode+0x64>)
   25d14:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   25d16:	4b0d      	ldr	r3, [pc, #52]	; (25d4c <spi_flash_enter_low_power_mode+0x74>)
   25d18:	2181      	movs	r1, #129	; 0x81
   25d1a:	0018      	movs	r0, r3
   25d1c:	4b07      	ldr	r3, [pc, #28]	; (25d3c <spi_flash_enter_low_power_mode+0x64>)
   25d1e:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   25d20:	46c0      	nop			; (mov r8, r8)
   25d22:	4b0b      	ldr	r3, [pc, #44]	; (25d50 <spi_flash_enter_low_power_mode+0x78>)
   25d24:	0018      	movs	r0, r3
   25d26:	4b0b      	ldr	r3, [pc, #44]	; (25d54 <spi_flash_enter_low_power_mode+0x7c>)
   25d28:	4798      	blx	r3
   25d2a:	0003      	movs	r3, r0
   25d2c:	2b01      	cmp	r3, #1
   25d2e:	d1f8      	bne.n	25d22 <spi_flash_enter_low_power_mode+0x4a>
}
   25d30:	46c0      	nop			; (mov r8, r8)
   25d32:	46bd      	mov	sp, r7
   25d34:	b002      	add	sp, #8
   25d36:	bd80      	pop	{r7, pc}
   25d38:	00010208 	.word	0x00010208
   25d3c:	00022b39 	.word	0x00022b39
   25d40:	0001020c 	.word	0x0001020c
   25d44:	00010214 	.word	0x00010214
   25d48:	0001021c 	.word	0x0001021c
   25d4c:	00010204 	.word	0x00010204
   25d50:	00010218 	.word	0x00010218
   25d54:	00022af5 	.word	0x00022af5

00025d58 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   25d58:	b580      	push	{r7, lr}
   25d5a:	b082      	sub	sp, #8
   25d5c:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   25d5e:	003b      	movs	r3, r7
   25d60:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   25d62:	687b      	ldr	r3, [r7, #4]
   25d64:	22ab      	movs	r2, #171	; 0xab
   25d66:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   25d68:	4b13      	ldr	r3, [pc, #76]	; (25db8 <spi_flash_leave_low_power_mode+0x60>)
   25d6a:	2100      	movs	r1, #0
   25d6c:	0018      	movs	r0, r3
   25d6e:	4b13      	ldr	r3, [pc, #76]	; (25dbc <spi_flash_leave_low_power_mode+0x64>)
   25d70:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   25d72:	687b      	ldr	r3, [r7, #4]
   25d74:	781b      	ldrb	r3, [r3, #0]
   25d76:	001a      	movs	r2, r3
   25d78:	4b11      	ldr	r3, [pc, #68]	; (25dc0 <spi_flash_leave_low_power_mode+0x68>)
   25d7a:	0011      	movs	r1, r2
   25d7c:	0018      	movs	r0, r3
   25d7e:	4b0f      	ldr	r3, [pc, #60]	; (25dbc <spi_flash_leave_low_power_mode+0x64>)
   25d80:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   25d82:	4b10      	ldr	r3, [pc, #64]	; (25dc4 <spi_flash_leave_low_power_mode+0x6c>)
   25d84:	2101      	movs	r1, #1
   25d86:	0018      	movs	r0, r3
   25d88:	4b0c      	ldr	r3, [pc, #48]	; (25dbc <spi_flash_leave_low_power_mode+0x64>)
   25d8a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   25d8c:	4b0e      	ldr	r3, [pc, #56]	; (25dc8 <spi_flash_leave_low_power_mode+0x70>)
   25d8e:	2100      	movs	r1, #0
   25d90:	0018      	movs	r0, r3
   25d92:	4b0a      	ldr	r3, [pc, #40]	; (25dbc <spi_flash_leave_low_power_mode+0x64>)
   25d94:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   25d96:	4b0d      	ldr	r3, [pc, #52]	; (25dcc <spi_flash_leave_low_power_mode+0x74>)
   25d98:	2181      	movs	r1, #129	; 0x81
   25d9a:	0018      	movs	r0, r3
   25d9c:	4b07      	ldr	r3, [pc, #28]	; (25dbc <spi_flash_leave_low_power_mode+0x64>)
   25d9e:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   25da0:	46c0      	nop			; (mov r8, r8)
   25da2:	4b0b      	ldr	r3, [pc, #44]	; (25dd0 <spi_flash_leave_low_power_mode+0x78>)
   25da4:	0018      	movs	r0, r3
   25da6:	4b0b      	ldr	r3, [pc, #44]	; (25dd4 <spi_flash_leave_low_power_mode+0x7c>)
   25da8:	4798      	blx	r3
   25daa:	0003      	movs	r3, r0
   25dac:	2b01      	cmp	r3, #1
   25dae:	d1f8      	bne.n	25da2 <spi_flash_leave_low_power_mode+0x4a>
}
   25db0:	46c0      	nop			; (mov r8, r8)
   25db2:	46bd      	mov	sp, r7
   25db4:	b002      	add	sp, #8
   25db6:	bd80      	pop	{r7, pc}
   25db8:	00010208 	.word	0x00010208
   25dbc:	00022b39 	.word	0x00022b39
   25dc0:	0001020c 	.word	0x0001020c
   25dc4:	00010214 	.word	0x00010214
   25dc8:	0001021c 	.word	0x0001021c
   25dcc:	00010204 	.word	0x00010204
   25dd0:	00010218 	.word	0x00010218
   25dd4:	00022af5 	.word	0x00022af5

00025dd8 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   25dd8:	b590      	push	{r4, r7, lr}
   25dda:	b085      	sub	sp, #20
   25ddc:	af00      	add	r7, sp, #0
   25dde:	0002      	movs	r2, r0
   25de0:	1dfb      	adds	r3, r7, #7
   25de2:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   25de4:	230f      	movs	r3, #15
   25de6:	18fb      	adds	r3, r7, r3
   25de8:	2200      	movs	r2, #0
   25dea:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   25dec:	4b24      	ldr	r3, [pc, #144]	; (25e80 <spi_flash_enable+0xa8>)
   25dee:	4798      	blx	r3
   25df0:	0003      	movs	r3, r0
   25df2:	051b      	lsls	r3, r3, #20
   25df4:	0d1b      	lsrs	r3, r3, #20
   25df6:	4a23      	ldr	r2, [pc, #140]	; (25e84 <spi_flash_enable+0xac>)
   25df8:	4293      	cmp	r3, r2
   25dfa:	d938      	bls.n	25e6e <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   25dfc:	230f      	movs	r3, #15
   25dfe:	18fc      	adds	r4, r7, r3
   25e00:	2308      	movs	r3, #8
   25e02:	18fb      	adds	r3, r7, r3
   25e04:	4a20      	ldr	r2, [pc, #128]	; (25e88 <spi_flash_enable+0xb0>)
   25e06:	0019      	movs	r1, r3
   25e08:	0010      	movs	r0, r2
   25e0a:	4b20      	ldr	r3, [pc, #128]	; (25e8c <spi_flash_enable+0xb4>)
   25e0c:	4798      	blx	r3
   25e0e:	0003      	movs	r3, r0
   25e10:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   25e12:	230f      	movs	r3, #15
   25e14:	18fb      	adds	r3, r7, r3
   25e16:	781b      	ldrb	r3, [r3, #0]
   25e18:	b25b      	sxtb	r3, r3
   25e1a:	2b00      	cmp	r3, #0
   25e1c:	d126      	bne.n	25e6c <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   25e1e:	68bb      	ldr	r3, [r7, #8]
   25e20:	4a1b      	ldr	r2, [pc, #108]	; (25e90 <spi_flash_enable+0xb8>)
   25e22:	4013      	ands	r3, r2
   25e24:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   25e26:	68bb      	ldr	r3, [r7, #8]
   25e28:	4a1a      	ldr	r2, [pc, #104]	; (25e94 <spi_flash_enable+0xbc>)
   25e2a:	4313      	orrs	r3, r2
   25e2c:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   25e2e:	68bb      	ldr	r3, [r7, #8]
   25e30:	4a15      	ldr	r2, [pc, #84]	; (25e88 <spi_flash_enable+0xb0>)
   25e32:	0019      	movs	r1, r3
   25e34:	0010      	movs	r0, r2
   25e36:	4b18      	ldr	r3, [pc, #96]	; (25e98 <spi_flash_enable+0xc0>)
   25e38:	4798      	blx	r3
		if(enable) {
   25e3a:	1dfb      	adds	r3, r7, #7
   25e3c:	781b      	ldrb	r3, [r3, #0]
   25e3e:	2b00      	cmp	r3, #0
   25e40:	d002      	beq.n	25e48 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   25e42:	4b16      	ldr	r3, [pc, #88]	; (25e9c <spi_flash_enable+0xc4>)
   25e44:	4798      	blx	r3
   25e46:	e001      	b.n	25e4c <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   25e48:	4b15      	ldr	r3, [pc, #84]	; (25ea0 <spi_flash_enable+0xc8>)
   25e4a:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   25e4c:	68bb      	ldr	r3, [r7, #8]
   25e4e:	4a10      	ldr	r2, [pc, #64]	; (25e90 <spi_flash_enable+0xb8>)
   25e50:	4013      	ands	r3, r2
   25e52:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   25e54:	68bb      	ldr	r3, [r7, #8]
   25e56:	2280      	movs	r2, #128	; 0x80
   25e58:	0252      	lsls	r2, r2, #9
   25e5a:	4313      	orrs	r3, r2
   25e5c:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   25e5e:	68bb      	ldr	r3, [r7, #8]
   25e60:	4a09      	ldr	r2, [pc, #36]	; (25e88 <spi_flash_enable+0xb0>)
   25e62:	0019      	movs	r1, r3
   25e64:	0010      	movs	r0, r2
   25e66:	4b0c      	ldr	r3, [pc, #48]	; (25e98 <spi_flash_enable+0xc0>)
   25e68:	4798      	blx	r3
   25e6a:	e000      	b.n	25e6e <spi_flash_enable+0x96>
			goto ERR1;
   25e6c:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   25e6e:	230f      	movs	r3, #15
   25e70:	18fb      	adds	r3, r7, r3
   25e72:	781b      	ldrb	r3, [r3, #0]
   25e74:	b25b      	sxtb	r3, r3
}
   25e76:	0018      	movs	r0, r3
   25e78:	46bd      	mov	sp, r7
   25e7a:	b005      	add	sp, #20
   25e7c:	bd90      	pop	{r4, r7, pc}
   25e7e:	46c0      	nop			; (mov r8, r8)
   25e80:	00022415 	.word	0x00022415
   25e84:	0000039f 	.word	0x0000039f
   25e88:	00001410 	.word	0x00001410
   25e8c:	00022b15 	.word	0x00022b15
   25e90:	f8888fff 	.word	0xf8888fff
   25e94:	01111000 	.word	0x01111000
   25e98:	00022b39 	.word	0x00022b39
   25e9c:	00025d59 	.word	0x00025d59
   25ea0:	00025cd9 	.word	0x00025cd9

00025ea4 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   25ea4:	b580      	push	{r7, lr}
   25ea6:	b084      	sub	sp, #16
   25ea8:	af00      	add	r7, sp, #0
   25eaa:	0002      	movs	r2, r0
   25eac:	1dfb      	adds	r3, r7, #7
   25eae:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   25eb0:	1dfb      	adds	r3, r7, #7
   25eb2:	781b      	ldrb	r3, [r3, #0]
   25eb4:	2b00      	cmp	r3, #0
   25eb6:	d108      	bne.n	25eca <mem_test_unit_ready+0x26>
   25eb8:	1dfb      	adds	r3, r7, #7
   25eba:	781a      	ldrb	r2, [r3, #0]
   25ebc:	4b08      	ldr	r3, [pc, #32]	; (25ee0 <mem_test_unit_ready+0x3c>)
   25ebe:	0152      	lsls	r2, r2, #5
   25ec0:	58d3      	ldr	r3, [r2, r3]
   25ec2:	4798      	blx	r3
   25ec4:	0003      	movs	r3, r0
   25ec6:	001a      	movs	r2, r3
   25ec8:	e000      	b.n	25ecc <mem_test_unit_ready+0x28>
   25eca:	2201      	movs	r2, #1
  status =
   25ecc:	230f      	movs	r3, #15
   25ece:	18fb      	adds	r3, r7, r3
   25ed0:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   25ed2:	230f      	movs	r3, #15
   25ed4:	18fb      	adds	r3, r7, r3
   25ed6:	781b      	ldrb	r3, [r3, #0]
}
   25ed8:	0018      	movs	r0, r3
   25eda:	46bd      	mov	sp, r7
   25edc:	b004      	add	sp, #16
   25ede:	bd80      	pop	{r7, pc}
   25ee0:	00039478 	.word	0x00039478

00025ee4 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   25ee4:	b580      	push	{r7, lr}
   25ee6:	b084      	sub	sp, #16
   25ee8:	af00      	add	r7, sp, #0
   25eea:	0002      	movs	r2, r0
   25eec:	6039      	str	r1, [r7, #0]
   25eee:	1dfb      	adds	r3, r7, #7
   25ef0:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   25ef2:	1dfb      	adds	r3, r7, #7
   25ef4:	781b      	ldrb	r3, [r3, #0]
   25ef6:	2b00      	cmp	r3, #0
   25ef8:	d10c      	bne.n	25f14 <mem_read_capacity+0x30>
   25efa:	1dfb      	adds	r3, r7, #7
   25efc:	781b      	ldrb	r3, [r3, #0]
   25efe:	4a0b      	ldr	r2, [pc, #44]	; (25f2c <mem_read_capacity+0x48>)
   25f00:	015b      	lsls	r3, r3, #5
   25f02:	18d3      	adds	r3, r2, r3
   25f04:	3304      	adds	r3, #4
   25f06:	681b      	ldr	r3, [r3, #0]
   25f08:	683a      	ldr	r2, [r7, #0]
   25f0a:	0010      	movs	r0, r2
   25f0c:	4798      	blx	r3
   25f0e:	0003      	movs	r3, r0
   25f10:	001a      	movs	r2, r3
   25f12:	e000      	b.n	25f16 <mem_read_capacity+0x32>
   25f14:	2201      	movs	r2, #1
  status =
   25f16:	230f      	movs	r3, #15
   25f18:	18fb      	adds	r3, r7, r3
   25f1a:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   25f1c:	230f      	movs	r3, #15
   25f1e:	18fb      	adds	r3, r7, r3
   25f20:	781b      	ldrb	r3, [r3, #0]
}
   25f22:	0018      	movs	r0, r3
   25f24:	46bd      	mov	sp, r7
   25f26:	b004      	add	sp, #16
   25f28:	bd80      	pop	{r7, pc}
   25f2a:	46c0      	nop			; (mov r8, r8)
   25f2c:	00039478 	.word	0x00039478

00025f30 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   25f30:	b580      	push	{r7, lr}
   25f32:	b084      	sub	sp, #16
   25f34:	af00      	add	r7, sp, #0
   25f36:	0002      	movs	r2, r0
   25f38:	1dfb      	adds	r3, r7, #7
   25f3a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   25f3c:	1dfb      	adds	r3, r7, #7
   25f3e:	781b      	ldrb	r3, [r3, #0]
   25f40:	425a      	negs	r2, r3
   25f42:	4153      	adcs	r3, r2
   25f44:	b2da      	uxtb	r2, r3
  sector_size =
   25f46:	230f      	movs	r3, #15
   25f48:	18fb      	adds	r3, r7, r3
   25f4a:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   25f4c:	230f      	movs	r3, #15
   25f4e:	18fb      	adds	r3, r7, r3
   25f50:	781b      	ldrb	r3, [r3, #0]
}
   25f52:	0018      	movs	r0, r3
   25f54:	46bd      	mov	sp, r7
   25f56:	b004      	add	sp, #16
   25f58:	bd80      	pop	{r7, pc}
	...

00025f5c <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   25f5c:	b580      	push	{r7, lr}
   25f5e:	b084      	sub	sp, #16
   25f60:	af00      	add	r7, sp, #0
   25f62:	0002      	movs	r2, r0
   25f64:	1dfb      	adds	r3, r7, #7
   25f66:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   25f68:	1dfb      	adds	r3, r7, #7
   25f6a:	781b      	ldrb	r3, [r3, #0]
   25f6c:	2b00      	cmp	r3, #0
   25f6e:	d109      	bne.n	25f84 <mem_wr_protect+0x28>
   25f70:	1dfb      	adds	r3, r7, #7
   25f72:	781b      	ldrb	r3, [r3, #0]
   25f74:	4a0a      	ldr	r2, [pc, #40]	; (25fa0 <mem_wr_protect+0x44>)
   25f76:	015b      	lsls	r3, r3, #5
   25f78:	18d3      	adds	r3, r2, r3
   25f7a:	330c      	adds	r3, #12
   25f7c:	681b      	ldr	r3, [r3, #0]
   25f7e:	4798      	blx	r3
   25f80:	1e03      	subs	r3, r0, #0
   25f82:	d001      	beq.n	25f88 <mem_wr_protect+0x2c>
   25f84:	2201      	movs	r2, #1
   25f86:	e000      	b.n	25f8a <mem_wr_protect+0x2e>
   25f88:	2200      	movs	r2, #0
  wr_protect =
   25f8a:	230f      	movs	r3, #15
   25f8c:	18fb      	adds	r3, r7, r3
   25f8e:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   25f90:	230f      	movs	r3, #15
   25f92:	18fb      	adds	r3, r7, r3
   25f94:	781b      	ldrb	r3, [r3, #0]
}
   25f96:	0018      	movs	r0, r3
   25f98:	46bd      	mov	sp, r7
   25f9a:	b004      	add	sp, #16
   25f9c:	bd80      	pop	{r7, pc}
   25f9e:	46c0      	nop			; (mov r8, r8)
   25fa0:	00039478 	.word	0x00039478

00025fa4 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   25fa4:	b580      	push	{r7, lr}
   25fa6:	b086      	sub	sp, #24
   25fa8:	af00      	add	r7, sp, #0
   25faa:	60b9      	str	r1, [r7, #8]
   25fac:	607a      	str	r2, [r7, #4]
   25fae:	230f      	movs	r3, #15
   25fb0:	18fb      	adds	r3, r7, r3
   25fb2:	1c02      	adds	r2, r0, #0
   25fb4:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   25fb6:	230f      	movs	r3, #15
   25fb8:	18fb      	adds	r3, r7, r3
   25fba:	781b      	ldrb	r3, [r3, #0]
   25fbc:	2b00      	cmp	r3, #0
   25fbe:	d10e      	bne.n	25fde <memory_2_ram+0x3a>
   25fc0:	230f      	movs	r3, #15
   25fc2:	18fb      	adds	r3, r7, r3
   25fc4:	781b      	ldrb	r3, [r3, #0]
   25fc6:	4a0b      	ldr	r2, [pc, #44]	; (25ff4 <memory_2_ram+0x50>)
   25fc8:	015b      	lsls	r3, r3, #5
   25fca:	18d3      	adds	r3, r2, r3
   25fcc:	3314      	adds	r3, #20
   25fce:	681b      	ldr	r3, [r3, #0]
   25fd0:	6879      	ldr	r1, [r7, #4]
   25fd2:	68ba      	ldr	r2, [r7, #8]
   25fd4:	0010      	movs	r0, r2
   25fd6:	4798      	blx	r3
   25fd8:	0003      	movs	r3, r0
   25fda:	001a      	movs	r2, r3
   25fdc:	e000      	b.n	25fe0 <memory_2_ram+0x3c>
   25fde:	2201      	movs	r2, #1
  status =
   25fe0:	2317      	movs	r3, #23
   25fe2:	18fb      	adds	r3, r7, r3
   25fe4:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   25fe6:	2317      	movs	r3, #23
   25fe8:	18fb      	adds	r3, r7, r3
   25fea:	781b      	ldrb	r3, [r3, #0]
}
   25fec:	0018      	movs	r0, r3
   25fee:	46bd      	mov	sp, r7
   25ff0:	b006      	add	sp, #24
   25ff2:	bd80      	pop	{r7, pc}
   25ff4:	00039478 	.word	0x00039478

00025ff8 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   25ff8:	b580      	push	{r7, lr}
   25ffa:	b086      	sub	sp, #24
   25ffc:	af00      	add	r7, sp, #0
   25ffe:	60b9      	str	r1, [r7, #8]
   26000:	607a      	str	r2, [r7, #4]
   26002:	230f      	movs	r3, #15
   26004:	18fb      	adds	r3, r7, r3
   26006:	1c02      	adds	r2, r0, #0
   26008:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   2600a:	230f      	movs	r3, #15
   2600c:	18fb      	adds	r3, r7, r3
   2600e:	781b      	ldrb	r3, [r3, #0]
   26010:	2b00      	cmp	r3, #0
   26012:	d10e      	bne.n	26032 <ram_2_memory+0x3a>
   26014:	230f      	movs	r3, #15
   26016:	18fb      	adds	r3, r7, r3
   26018:	781b      	ldrb	r3, [r3, #0]
   2601a:	4a0b      	ldr	r2, [pc, #44]	; (26048 <ram_2_memory+0x50>)
   2601c:	015b      	lsls	r3, r3, #5
   2601e:	18d3      	adds	r3, r2, r3
   26020:	3318      	adds	r3, #24
   26022:	681b      	ldr	r3, [r3, #0]
   26024:	6879      	ldr	r1, [r7, #4]
   26026:	68ba      	ldr	r2, [r7, #8]
   26028:	0010      	movs	r0, r2
   2602a:	4798      	blx	r3
   2602c:	0003      	movs	r3, r0
   2602e:	001a      	movs	r2, r3
   26030:	e000      	b.n	26034 <ram_2_memory+0x3c>
   26032:	2201      	movs	r2, #1
  status =
   26034:	2317      	movs	r3, #23
   26036:	18fb      	adds	r3, r7, r3
   26038:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   2603a:	2317      	movs	r3, #23
   2603c:	18fb      	adds	r3, r7, r3
   2603e:	781b      	ldrb	r3, [r3, #0]
}
   26040:	0018      	movs	r0, r3
   26042:	46bd      	mov	sp, r7
   26044:	b006      	add	sp, #24
   26046:	bd80      	pop	{r7, pc}
   26048:	00039478 	.word	0x00039478

0002604c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   2604c:	b580      	push	{r7, lr}
   2604e:	b082      	sub	sp, #8
   26050:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   26052:	4b10      	ldr	r3, [pc, #64]	; (26094 <cpu_irq_enter_critical+0x48>)
   26054:	681b      	ldr	r3, [r3, #0]
   26056:	2b00      	cmp	r3, #0
   26058:	d112      	bne.n	26080 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2605a:	f3ef 8310 	mrs	r3, PRIMASK
   2605e:	607b      	str	r3, [r7, #4]
  return(result);
   26060:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   26062:	2b00      	cmp	r3, #0
   26064:	d109      	bne.n	2607a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   26066:	b672      	cpsid	i
   26068:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   2606c:	4b0a      	ldr	r3, [pc, #40]	; (26098 <cpu_irq_enter_critical+0x4c>)
   2606e:	2200      	movs	r2, #0
   26070:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   26072:	4b0a      	ldr	r3, [pc, #40]	; (2609c <cpu_irq_enter_critical+0x50>)
   26074:	2201      	movs	r2, #1
   26076:	701a      	strb	r2, [r3, #0]
   26078:	e002      	b.n	26080 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   2607a:	4b08      	ldr	r3, [pc, #32]	; (2609c <cpu_irq_enter_critical+0x50>)
   2607c:	2200      	movs	r2, #0
   2607e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   26080:	4b04      	ldr	r3, [pc, #16]	; (26094 <cpu_irq_enter_critical+0x48>)
   26082:	681b      	ldr	r3, [r3, #0]
   26084:	1c5a      	adds	r2, r3, #1
   26086:	4b03      	ldr	r3, [pc, #12]	; (26094 <cpu_irq_enter_critical+0x48>)
   26088:	601a      	str	r2, [r3, #0]
}
   2608a:	46c0      	nop			; (mov r8, r8)
   2608c:	46bd      	mov	sp, r7
   2608e:	b002      	add	sp, #8
   26090:	bd80      	pop	{r7, pc}
   26092:	46c0      	nop			; (mov r8, r8)
   26094:	200042b4 	.word	0x200042b4
   26098:	20000126 	.word	0x20000126
   2609c:	200042b8 	.word	0x200042b8

000260a0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   260a0:	b580      	push	{r7, lr}
   260a2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   260a4:	4b0b      	ldr	r3, [pc, #44]	; (260d4 <cpu_irq_leave_critical+0x34>)
   260a6:	681b      	ldr	r3, [r3, #0]
   260a8:	1e5a      	subs	r2, r3, #1
   260aa:	4b0a      	ldr	r3, [pc, #40]	; (260d4 <cpu_irq_leave_critical+0x34>)
   260ac:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   260ae:	4b09      	ldr	r3, [pc, #36]	; (260d4 <cpu_irq_leave_critical+0x34>)
   260b0:	681b      	ldr	r3, [r3, #0]
   260b2:	2b00      	cmp	r3, #0
   260b4:	d10a      	bne.n	260cc <cpu_irq_leave_critical+0x2c>
   260b6:	4b08      	ldr	r3, [pc, #32]	; (260d8 <cpu_irq_leave_critical+0x38>)
   260b8:	781b      	ldrb	r3, [r3, #0]
   260ba:	b2db      	uxtb	r3, r3
   260bc:	2b00      	cmp	r3, #0
   260be:	d005      	beq.n	260cc <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   260c0:	4b06      	ldr	r3, [pc, #24]	; (260dc <cpu_irq_leave_critical+0x3c>)
   260c2:	2201      	movs	r2, #1
   260c4:	701a      	strb	r2, [r3, #0]
   260c6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   260ca:	b662      	cpsie	i
	}
}
   260cc:	46c0      	nop			; (mov r8, r8)
   260ce:	46bd      	mov	sp, r7
   260d0:	bd80      	pop	{r7, pc}
   260d2:	46c0      	nop			; (mov r8, r8)
   260d4:	200042b4 	.word	0x200042b4
   260d8:	200042b8 	.word	0x200042b8
   260dc:	20000126 	.word	0x20000126

000260e0 <system_pinmux_get_group_from_gpio_pin>:
{
   260e0:	b580      	push	{r7, lr}
   260e2:	b084      	sub	sp, #16
   260e4:	af00      	add	r7, sp, #0
   260e6:	0002      	movs	r2, r0
   260e8:	1dfb      	adds	r3, r7, #7
   260ea:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   260ec:	230f      	movs	r3, #15
   260ee:	18fb      	adds	r3, r7, r3
   260f0:	1dfa      	adds	r2, r7, #7
   260f2:	7812      	ldrb	r2, [r2, #0]
   260f4:	09d2      	lsrs	r2, r2, #7
   260f6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   260f8:	230e      	movs	r3, #14
   260fa:	18fb      	adds	r3, r7, r3
   260fc:	1dfa      	adds	r2, r7, #7
   260fe:	7812      	ldrb	r2, [r2, #0]
   26100:	0952      	lsrs	r2, r2, #5
   26102:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   26104:	4b0d      	ldr	r3, [pc, #52]	; (2613c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   26106:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   26108:	230f      	movs	r3, #15
   2610a:	18fb      	adds	r3, r7, r3
   2610c:	781b      	ldrb	r3, [r3, #0]
   2610e:	2b00      	cmp	r3, #0
   26110:	d10f      	bne.n	26132 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   26112:	230f      	movs	r3, #15
   26114:	18fb      	adds	r3, r7, r3
   26116:	781b      	ldrb	r3, [r3, #0]
   26118:	009b      	lsls	r3, r3, #2
   2611a:	2210      	movs	r2, #16
   2611c:	4694      	mov	ip, r2
   2611e:	44bc      	add	ip, r7
   26120:	4463      	add	r3, ip
   26122:	3b08      	subs	r3, #8
   26124:	681a      	ldr	r2, [r3, #0]
   26126:	230e      	movs	r3, #14
   26128:	18fb      	adds	r3, r7, r3
   2612a:	781b      	ldrb	r3, [r3, #0]
   2612c:	01db      	lsls	r3, r3, #7
   2612e:	18d3      	adds	r3, r2, r3
   26130:	e000      	b.n	26134 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   26132:	2300      	movs	r3, #0
}
   26134:	0018      	movs	r0, r3
   26136:	46bd      	mov	sp, r7
   26138:	b004      	add	sp, #16
   2613a:	bd80      	pop	{r7, pc}
   2613c:	41004400 	.word	0x41004400

00026140 <port_get_group_from_gpio_pin>:
{
   26140:	b580      	push	{r7, lr}
   26142:	b082      	sub	sp, #8
   26144:	af00      	add	r7, sp, #0
   26146:	0002      	movs	r2, r0
   26148:	1dfb      	adds	r3, r7, #7
   2614a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2614c:	1dfb      	adds	r3, r7, #7
   2614e:	781b      	ldrb	r3, [r3, #0]
   26150:	0018      	movs	r0, r3
   26152:	4b03      	ldr	r3, [pc, #12]	; (26160 <port_get_group_from_gpio_pin+0x20>)
   26154:	4798      	blx	r3
   26156:	0003      	movs	r3, r0
}
   26158:	0018      	movs	r0, r3
   2615a:	46bd      	mov	sp, r7
   2615c:	b002      	add	sp, #8
   2615e:	bd80      	pop	{r7, pc}
   26160:	000260e1 	.word	0x000260e1

00026164 <port_get_config_defaults>:
{
   26164:	b580      	push	{r7, lr}
   26166:	b082      	sub	sp, #8
   26168:	af00      	add	r7, sp, #0
   2616a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   2616c:	687b      	ldr	r3, [r7, #4]
   2616e:	2200      	movs	r2, #0
   26170:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   26172:	687b      	ldr	r3, [r7, #4]
   26174:	2201      	movs	r2, #1
   26176:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   26178:	687b      	ldr	r3, [r7, #4]
   2617a:	2200      	movs	r2, #0
   2617c:	709a      	strb	r2, [r3, #2]
}
   2617e:	46c0      	nop			; (mov r8, r8)
   26180:	46bd      	mov	sp, r7
   26182:	b002      	add	sp, #8
   26184:	bd80      	pop	{r7, pc}
	...

00026188 <port_pin_set_output_level>:
{
   26188:	b580      	push	{r7, lr}
   2618a:	b084      	sub	sp, #16
   2618c:	af00      	add	r7, sp, #0
   2618e:	0002      	movs	r2, r0
   26190:	1dfb      	adds	r3, r7, #7
   26192:	701a      	strb	r2, [r3, #0]
   26194:	1dbb      	adds	r3, r7, #6
   26196:	1c0a      	adds	r2, r1, #0
   26198:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2619a:	1dfb      	adds	r3, r7, #7
   2619c:	781b      	ldrb	r3, [r3, #0]
   2619e:	0018      	movs	r0, r3
   261a0:	4b0d      	ldr	r3, [pc, #52]	; (261d8 <port_pin_set_output_level+0x50>)
   261a2:	4798      	blx	r3
   261a4:	0003      	movs	r3, r0
   261a6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   261a8:	1dfb      	adds	r3, r7, #7
   261aa:	781b      	ldrb	r3, [r3, #0]
   261ac:	221f      	movs	r2, #31
   261ae:	4013      	ands	r3, r2
   261b0:	2201      	movs	r2, #1
   261b2:	409a      	lsls	r2, r3
   261b4:	0013      	movs	r3, r2
   261b6:	60bb      	str	r3, [r7, #8]
	if (level) {
   261b8:	1dbb      	adds	r3, r7, #6
   261ba:	781b      	ldrb	r3, [r3, #0]
   261bc:	2b00      	cmp	r3, #0
   261be:	d003      	beq.n	261c8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   261c0:	68fb      	ldr	r3, [r7, #12]
   261c2:	68ba      	ldr	r2, [r7, #8]
   261c4:	619a      	str	r2, [r3, #24]
}
   261c6:	e002      	b.n	261ce <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   261c8:	68fb      	ldr	r3, [r7, #12]
   261ca:	68ba      	ldr	r2, [r7, #8]
   261cc:	615a      	str	r2, [r3, #20]
}
   261ce:	46c0      	nop			; (mov r8, r8)
   261d0:	46bd      	mov	sp, r7
   261d2:	b004      	add	sp, #16
   261d4:	bd80      	pop	{r7, pc}
   261d6:	46c0      	nop			; (mov r8, r8)
   261d8:	00026141 	.word	0x00026141

000261dc <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   261dc:	b580      	push	{r7, lr}
   261de:	b082      	sub	sp, #8
   261e0:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   261e2:	1d3b      	adds	r3, r7, #4
   261e4:	0018      	movs	r0, r3
   261e6:	4b0e      	ldr	r3, [pc, #56]	; (26220 <system_board_init+0x44>)
   261e8:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   261ea:	1d3b      	adds	r3, r7, #4
   261ec:	2201      	movs	r2, #1
   261ee:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   261f0:	1d3b      	adds	r3, r7, #4
   261f2:	0019      	movs	r1, r3
   261f4:	2017      	movs	r0, #23
   261f6:	4b0b      	ldr	r3, [pc, #44]	; (26224 <system_board_init+0x48>)
   261f8:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   261fa:	2101      	movs	r1, #1
   261fc:	2017      	movs	r0, #23
   261fe:	4b0a      	ldr	r3, [pc, #40]	; (26228 <system_board_init+0x4c>)
   26200:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   26202:	1d3b      	adds	r3, r7, #4
   26204:	2200      	movs	r2, #0
   26206:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   26208:	1d3b      	adds	r3, r7, #4
   2620a:	2201      	movs	r2, #1
   2620c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   2620e:	1d3b      	adds	r3, r7, #4
   26210:	0019      	movs	r1, r3
   26212:	2037      	movs	r0, #55	; 0x37
   26214:	4b03      	ldr	r3, [pc, #12]	; (26224 <system_board_init+0x48>)
   26216:	4798      	blx	r3
}
   26218:	46c0      	nop			; (mov r8, r8)
   2621a:	46bd      	mov	sp, r7
   2621c:	b002      	add	sp, #8
   2621e:	bd80      	pop	{r7, pc}
   26220:	00026165 	.word	0x00026165
   26224:	00026851 	.word	0x00026851
   26228:	00026189 	.word	0x00026189

0002622c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   2622c:	b580      	push	{r7, lr}
   2622e:	b084      	sub	sp, #16
   26230:	af00      	add	r7, sp, #0
   26232:	0002      	movs	r2, r0
   26234:	1dfb      	adds	r3, r7, #7
   26236:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   26238:	230f      	movs	r3, #15
   2623a:	18fb      	adds	r3, r7, r3
   2623c:	1dfa      	adds	r2, r7, #7
   2623e:	7812      	ldrb	r2, [r2, #0]
   26240:	0952      	lsrs	r2, r2, #5
   26242:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   26244:	230f      	movs	r3, #15
   26246:	18fb      	adds	r3, r7, r3
   26248:	781b      	ldrb	r3, [r3, #0]
   2624a:	2b00      	cmp	r3, #0
   2624c:	d10c      	bne.n	26268 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2624e:	4b09      	ldr	r3, [pc, #36]	; (26274 <_extint_get_eic_from_channel+0x48>)
   26250:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   26252:	230f      	movs	r3, #15
   26254:	18fb      	adds	r3, r7, r3
   26256:	781b      	ldrb	r3, [r3, #0]
   26258:	009b      	lsls	r3, r3, #2
   2625a:	2210      	movs	r2, #16
   2625c:	4694      	mov	ip, r2
   2625e:	44bc      	add	ip, r7
   26260:	4463      	add	r3, ip
   26262:	3b08      	subs	r3, #8
   26264:	681b      	ldr	r3, [r3, #0]
   26266:	e000      	b.n	2626a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   26268:	2300      	movs	r3, #0
	}
}
   2626a:	0018      	movs	r0, r3
   2626c:	46bd      	mov	sp, r7
   2626e:	b004      	add	sp, #16
   26270:	bd80      	pop	{r7, pc}
   26272:	46c0      	nop			; (mov r8, r8)
   26274:	40001800 	.word	0x40001800

00026278 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   26278:	b580      	push	{r7, lr}
   2627a:	b084      	sub	sp, #16
   2627c:	af00      	add	r7, sp, #0
   2627e:	0002      	movs	r2, r0
   26280:	1dfb      	adds	r3, r7, #7
   26282:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   26284:	1dfb      	adds	r3, r7, #7
   26286:	781b      	ldrb	r3, [r3, #0]
   26288:	0018      	movs	r0, r3
   2628a:	4b0b      	ldr	r3, [pc, #44]	; (262b8 <extint_chan_is_detected+0x40>)
   2628c:	4798      	blx	r3
   2628e:	0003      	movs	r3, r0
   26290:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   26292:	1dfb      	adds	r3, r7, #7
   26294:	781b      	ldrb	r3, [r3, #0]
   26296:	221f      	movs	r2, #31
   26298:	4013      	ands	r3, r2
   2629a:	2201      	movs	r2, #1
   2629c:	409a      	lsls	r2, r3
   2629e:	0013      	movs	r3, r2
   262a0:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   262a2:	68fb      	ldr	r3, [r7, #12]
   262a4:	691b      	ldr	r3, [r3, #16]
   262a6:	68ba      	ldr	r2, [r7, #8]
   262a8:	4013      	ands	r3, r2
   262aa:	1e5a      	subs	r2, r3, #1
   262ac:	4193      	sbcs	r3, r2
   262ae:	b2db      	uxtb	r3, r3
}
   262b0:	0018      	movs	r0, r3
   262b2:	46bd      	mov	sp, r7
   262b4:	b004      	add	sp, #16
   262b6:	bd80      	pop	{r7, pc}
   262b8:	0002622d 	.word	0x0002622d

000262bc <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   262bc:	b580      	push	{r7, lr}
   262be:	b084      	sub	sp, #16
   262c0:	af00      	add	r7, sp, #0
   262c2:	0002      	movs	r2, r0
   262c4:	1dfb      	adds	r3, r7, #7
   262c6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   262c8:	1dfb      	adds	r3, r7, #7
   262ca:	781b      	ldrb	r3, [r3, #0]
   262cc:	0018      	movs	r0, r3
   262ce:	4b09      	ldr	r3, [pc, #36]	; (262f4 <extint_chan_clear_detected+0x38>)
   262d0:	4798      	blx	r3
   262d2:	0003      	movs	r3, r0
   262d4:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   262d6:	1dfb      	adds	r3, r7, #7
   262d8:	781b      	ldrb	r3, [r3, #0]
   262da:	221f      	movs	r2, #31
   262dc:	4013      	ands	r3, r2
   262de:	2201      	movs	r2, #1
   262e0:	409a      	lsls	r2, r3
   262e2:	0013      	movs	r3, r2
   262e4:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   262e6:	68fb      	ldr	r3, [r7, #12]
   262e8:	68ba      	ldr	r2, [r7, #8]
   262ea:	611a      	str	r2, [r3, #16]
}
   262ec:	46c0      	nop			; (mov r8, r8)
   262ee:	46bd      	mov	sp, r7
   262f0:	b004      	add	sp, #16
   262f2:	bd80      	pop	{r7, pc}
   262f4:	0002622d 	.word	0x0002622d

000262f8 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   262f8:	b580      	push	{r7, lr}
   262fa:	b082      	sub	sp, #8
   262fc:	af00      	add	r7, sp, #0
   262fe:	6078      	str	r0, [r7, #4]
   26300:	0008      	movs	r0, r1
   26302:	0011      	movs	r1, r2
   26304:	1cfb      	adds	r3, r7, #3
   26306:	1c02      	adds	r2, r0, #0
   26308:	701a      	strb	r2, [r3, #0]
   2630a:	1cbb      	adds	r3, r7, #2
   2630c:	1c0a      	adds	r2, r1, #0
   2630e:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   26310:	1cbb      	adds	r3, r7, #2
   26312:	781b      	ldrb	r3, [r3, #0]
   26314:	2b00      	cmp	r3, #0
   26316:	d001      	beq.n	2631c <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   26318:	2317      	movs	r3, #23
   2631a:	e019      	b.n	26350 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   2631c:	1cfb      	adds	r3, r7, #3
   2631e:	781a      	ldrb	r2, [r3, #0]
   26320:	4b0d      	ldr	r3, [pc, #52]	; (26358 <extint_register_callback+0x60>)
   26322:	0092      	lsls	r2, r2, #2
   26324:	58d3      	ldr	r3, [r2, r3]
   26326:	2b00      	cmp	r3, #0
   26328:	d107      	bne.n	2633a <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   2632a:	1cfb      	adds	r3, r7, #3
   2632c:	781a      	ldrb	r2, [r3, #0]
   2632e:	4b0a      	ldr	r3, [pc, #40]	; (26358 <extint_register_callback+0x60>)
   26330:	0092      	lsls	r2, r2, #2
   26332:	6879      	ldr	r1, [r7, #4]
   26334:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   26336:	2300      	movs	r3, #0
   26338:	e00a      	b.n	26350 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   2633a:	1cfb      	adds	r3, r7, #3
   2633c:	781a      	ldrb	r2, [r3, #0]
   2633e:	4b06      	ldr	r3, [pc, #24]	; (26358 <extint_register_callback+0x60>)
   26340:	0092      	lsls	r2, r2, #2
   26342:	58d2      	ldr	r2, [r2, r3]
   26344:	687b      	ldr	r3, [r7, #4]
   26346:	429a      	cmp	r2, r3
   26348:	d101      	bne.n	2634e <extint_register_callback+0x56>
		return STATUS_OK;
   2634a:	2300      	movs	r3, #0
   2634c:	e000      	b.n	26350 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   2634e:	231d      	movs	r3, #29
}
   26350:	0018      	movs	r0, r3
   26352:	46bd      	mov	sp, r7
   26354:	b002      	add	sp, #8
   26356:	bd80      	pop	{r7, pc}
   26358:	20005bc0 	.word	0x20005bc0

0002635c <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   2635c:	b580      	push	{r7, lr}
   2635e:	b084      	sub	sp, #16
   26360:	af00      	add	r7, sp, #0
   26362:	0002      	movs	r2, r0
   26364:	1dfb      	adds	r3, r7, #7
   26366:	701a      	strb	r2, [r3, #0]
   26368:	1dbb      	adds	r3, r7, #6
   2636a:	1c0a      	adds	r2, r1, #0
   2636c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   2636e:	1dbb      	adds	r3, r7, #6
   26370:	781b      	ldrb	r3, [r3, #0]
   26372:	2b00      	cmp	r3, #0
   26374:	d10e      	bne.n	26394 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   26376:	1dfb      	adds	r3, r7, #7
   26378:	781b      	ldrb	r3, [r3, #0]
   2637a:	0018      	movs	r0, r3
   2637c:	4b08      	ldr	r3, [pc, #32]	; (263a0 <extint_chan_enable_callback+0x44>)
   2637e:	4798      	blx	r3
   26380:	0003      	movs	r3, r0
   26382:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   26384:	1dfb      	adds	r3, r7, #7
   26386:	781b      	ldrb	r3, [r3, #0]
   26388:	2201      	movs	r2, #1
   2638a:	409a      	lsls	r2, r3
   2638c:	68fb      	ldr	r3, [r7, #12]
   2638e:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   26390:	2300      	movs	r3, #0
   26392:	e000      	b.n	26396 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   26394:	2317      	movs	r3, #23
}
   26396:	0018      	movs	r0, r3
   26398:	46bd      	mov	sp, r7
   2639a:	b004      	add	sp, #16
   2639c:	bd80      	pop	{r7, pc}
   2639e:	46c0      	nop			; (mov r8, r8)
   263a0:	0002622d 	.word	0x0002622d

000263a4 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   263a4:	b580      	push	{r7, lr}
   263a6:	b084      	sub	sp, #16
   263a8:	af00      	add	r7, sp, #0
   263aa:	0002      	movs	r2, r0
   263ac:	1dfb      	adds	r3, r7, #7
   263ae:	701a      	strb	r2, [r3, #0]
   263b0:	1dbb      	adds	r3, r7, #6
   263b2:	1c0a      	adds	r2, r1, #0
   263b4:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   263b6:	1dbb      	adds	r3, r7, #6
   263b8:	781b      	ldrb	r3, [r3, #0]
   263ba:	2b00      	cmp	r3, #0
   263bc:	d10e      	bne.n	263dc <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   263be:	1dfb      	adds	r3, r7, #7
   263c0:	781b      	ldrb	r3, [r3, #0]
   263c2:	0018      	movs	r0, r3
   263c4:	4b08      	ldr	r3, [pc, #32]	; (263e8 <extint_chan_disable_callback+0x44>)
   263c6:	4798      	blx	r3
   263c8:	0003      	movs	r3, r0
   263ca:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   263cc:	1dfb      	adds	r3, r7, #7
   263ce:	781b      	ldrb	r3, [r3, #0]
   263d0:	2201      	movs	r2, #1
   263d2:	409a      	lsls	r2, r3
   263d4:	68fb      	ldr	r3, [r7, #12]
   263d6:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   263d8:	2300      	movs	r3, #0
   263da:	e000      	b.n	263de <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   263dc:	2317      	movs	r3, #23
}
   263de:	0018      	movs	r0, r3
   263e0:	46bd      	mov	sp, r7
   263e2:	b004      	add	sp, #16
   263e4:	bd80      	pop	{r7, pc}
   263e6:	46c0      	nop			; (mov r8, r8)
   263e8:	0002622d 	.word	0x0002622d

000263ec <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   263ec:	b580      	push	{r7, lr}
   263ee:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   263f0:	4b15      	ldr	r3, [pc, #84]	; (26448 <EIC_Handler+0x5c>)
   263f2:	2200      	movs	r2, #0
   263f4:	701a      	strb	r2, [r3, #0]
   263f6:	e020      	b.n	2643a <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   263f8:	4b13      	ldr	r3, [pc, #76]	; (26448 <EIC_Handler+0x5c>)
   263fa:	781b      	ldrb	r3, [r3, #0]
   263fc:	0018      	movs	r0, r3
   263fe:	4b13      	ldr	r3, [pc, #76]	; (2644c <EIC_Handler+0x60>)
   26400:	4798      	blx	r3
   26402:	1e03      	subs	r3, r0, #0
   26404:	d013      	beq.n	2642e <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   26406:	4b10      	ldr	r3, [pc, #64]	; (26448 <EIC_Handler+0x5c>)
   26408:	781b      	ldrb	r3, [r3, #0]
   2640a:	0018      	movs	r0, r3
   2640c:	4b10      	ldr	r3, [pc, #64]	; (26450 <EIC_Handler+0x64>)
   2640e:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   26410:	4b0d      	ldr	r3, [pc, #52]	; (26448 <EIC_Handler+0x5c>)
   26412:	781b      	ldrb	r3, [r3, #0]
   26414:	001a      	movs	r2, r3
   26416:	4b0f      	ldr	r3, [pc, #60]	; (26454 <EIC_Handler+0x68>)
   26418:	0092      	lsls	r2, r2, #2
   2641a:	58d3      	ldr	r3, [r2, r3]
   2641c:	2b00      	cmp	r3, #0
   2641e:	d006      	beq.n	2642e <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   26420:	4b09      	ldr	r3, [pc, #36]	; (26448 <EIC_Handler+0x5c>)
   26422:	781b      	ldrb	r3, [r3, #0]
   26424:	001a      	movs	r2, r3
   26426:	4b0b      	ldr	r3, [pc, #44]	; (26454 <EIC_Handler+0x68>)
   26428:	0092      	lsls	r2, r2, #2
   2642a:	58d3      	ldr	r3, [r2, r3]
   2642c:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2642e:	4b06      	ldr	r3, [pc, #24]	; (26448 <EIC_Handler+0x5c>)
   26430:	781b      	ldrb	r3, [r3, #0]
   26432:	3301      	adds	r3, #1
   26434:	b2da      	uxtb	r2, r3
   26436:	4b04      	ldr	r3, [pc, #16]	; (26448 <EIC_Handler+0x5c>)
   26438:	701a      	strb	r2, [r3, #0]
   2643a:	4b03      	ldr	r3, [pc, #12]	; (26448 <EIC_Handler+0x5c>)
   2643c:	781b      	ldrb	r3, [r3, #0]
   2643e:	2b0f      	cmp	r3, #15
   26440:	d9da      	bls.n	263f8 <EIC_Handler+0xc>
			}
		}
	}
}
   26442:	46c0      	nop			; (mov r8, r8)
   26444:	46bd      	mov	sp, r7
   26446:	bd80      	pop	{r7, pc}
   26448:	20005bbc 	.word	0x20005bbc
   2644c:	00026279 	.word	0x00026279
   26450:	000262bd 	.word	0x000262bd
   26454:	20005bc0 	.word	0x20005bc0

00026458 <system_gclk_chan_get_config_defaults>:
{
   26458:	b580      	push	{r7, lr}
   2645a:	b082      	sub	sp, #8
   2645c:	af00      	add	r7, sp, #0
   2645e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26460:	687b      	ldr	r3, [r7, #4]
   26462:	2200      	movs	r2, #0
   26464:	701a      	strb	r2, [r3, #0]
}
   26466:	46c0      	nop			; (mov r8, r8)
   26468:	46bd      	mov	sp, r7
   2646a:	b002      	add	sp, #8
   2646c:	bd80      	pop	{r7, pc}
	...

00026470 <system_apb_clock_set_mask>:
{
   26470:	b580      	push	{r7, lr}
   26472:	b082      	sub	sp, #8
   26474:	af00      	add	r7, sp, #0
   26476:	0002      	movs	r2, r0
   26478:	6039      	str	r1, [r7, #0]
   2647a:	1dfb      	adds	r3, r7, #7
   2647c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2647e:	1dfb      	adds	r3, r7, #7
   26480:	781b      	ldrb	r3, [r3, #0]
   26482:	2b01      	cmp	r3, #1
   26484:	d00a      	beq.n	2649c <system_apb_clock_set_mask+0x2c>
   26486:	2b02      	cmp	r3, #2
   26488:	d00f      	beq.n	264aa <system_apb_clock_set_mask+0x3a>
   2648a:	2b00      	cmp	r3, #0
   2648c:	d114      	bne.n	264b8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2648e:	4b0e      	ldr	r3, [pc, #56]	; (264c8 <system_apb_clock_set_mask+0x58>)
   26490:	4a0d      	ldr	r2, [pc, #52]	; (264c8 <system_apb_clock_set_mask+0x58>)
   26492:	6991      	ldr	r1, [r2, #24]
   26494:	683a      	ldr	r2, [r7, #0]
   26496:	430a      	orrs	r2, r1
   26498:	619a      	str	r2, [r3, #24]
			break;
   2649a:	e00f      	b.n	264bc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2649c:	4b0a      	ldr	r3, [pc, #40]	; (264c8 <system_apb_clock_set_mask+0x58>)
   2649e:	4a0a      	ldr	r2, [pc, #40]	; (264c8 <system_apb_clock_set_mask+0x58>)
   264a0:	69d1      	ldr	r1, [r2, #28]
   264a2:	683a      	ldr	r2, [r7, #0]
   264a4:	430a      	orrs	r2, r1
   264a6:	61da      	str	r2, [r3, #28]
			break;
   264a8:	e008      	b.n	264bc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   264aa:	4b07      	ldr	r3, [pc, #28]	; (264c8 <system_apb_clock_set_mask+0x58>)
   264ac:	4a06      	ldr	r2, [pc, #24]	; (264c8 <system_apb_clock_set_mask+0x58>)
   264ae:	6a11      	ldr	r1, [r2, #32]
   264b0:	683a      	ldr	r2, [r7, #0]
   264b2:	430a      	orrs	r2, r1
   264b4:	621a      	str	r2, [r3, #32]
			break;
   264b6:	e001      	b.n	264bc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   264b8:	2317      	movs	r3, #23
   264ba:	e000      	b.n	264be <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   264bc:	2300      	movs	r3, #0
}
   264be:	0018      	movs	r0, r3
   264c0:	46bd      	mov	sp, r7
   264c2:	b002      	add	sp, #8
   264c4:	bd80      	pop	{r7, pc}
   264c6:	46c0      	nop			; (mov r8, r8)
   264c8:	40000400 	.word	0x40000400

000264cc <system_pinmux_get_config_defaults>:
{
   264cc:	b580      	push	{r7, lr}
   264ce:	b082      	sub	sp, #8
   264d0:	af00      	add	r7, sp, #0
   264d2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   264d4:	687b      	ldr	r3, [r7, #4]
   264d6:	2280      	movs	r2, #128	; 0x80
   264d8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   264da:	687b      	ldr	r3, [r7, #4]
   264dc:	2200      	movs	r2, #0
   264de:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   264e0:	687b      	ldr	r3, [r7, #4]
   264e2:	2201      	movs	r2, #1
   264e4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   264e6:	687b      	ldr	r3, [r7, #4]
   264e8:	2200      	movs	r2, #0
   264ea:	70da      	strb	r2, [r3, #3]
}
   264ec:	46c0      	nop			; (mov r8, r8)
   264ee:	46bd      	mov	sp, r7
   264f0:	b002      	add	sp, #8
   264f2:	bd80      	pop	{r7, pc}

000264f4 <system_interrupt_enable>:
{
   264f4:	b580      	push	{r7, lr}
   264f6:	b082      	sub	sp, #8
   264f8:	af00      	add	r7, sp, #0
   264fa:	0002      	movs	r2, r0
   264fc:	1dfb      	adds	r3, r7, #7
   264fe:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26500:	4b06      	ldr	r3, [pc, #24]	; (2651c <system_interrupt_enable+0x28>)
   26502:	1dfa      	adds	r2, r7, #7
   26504:	7812      	ldrb	r2, [r2, #0]
   26506:	0011      	movs	r1, r2
   26508:	221f      	movs	r2, #31
   2650a:	400a      	ands	r2, r1
   2650c:	2101      	movs	r1, #1
   2650e:	4091      	lsls	r1, r2
   26510:	000a      	movs	r2, r1
   26512:	601a      	str	r2, [r3, #0]
}
   26514:	46c0      	nop			; (mov r8, r8)
   26516:	46bd      	mov	sp, r7
   26518:	b002      	add	sp, #8
   2651a:	bd80      	pop	{r7, pc}
   2651c:	e000e100 	.word	0xe000e100

00026520 <_extint_get_eic_from_channel>:
{
   26520:	b580      	push	{r7, lr}
   26522:	b084      	sub	sp, #16
   26524:	af00      	add	r7, sp, #0
   26526:	0002      	movs	r2, r0
   26528:	1dfb      	adds	r3, r7, #7
   2652a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   2652c:	230f      	movs	r3, #15
   2652e:	18fb      	adds	r3, r7, r3
   26530:	1dfa      	adds	r2, r7, #7
   26532:	7812      	ldrb	r2, [r2, #0]
   26534:	0952      	lsrs	r2, r2, #5
   26536:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   26538:	230f      	movs	r3, #15
   2653a:	18fb      	adds	r3, r7, r3
   2653c:	781b      	ldrb	r3, [r3, #0]
   2653e:	2b00      	cmp	r3, #0
   26540:	d10c      	bne.n	2655c <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26542:	4b09      	ldr	r3, [pc, #36]	; (26568 <_extint_get_eic_from_channel+0x48>)
   26544:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   26546:	230f      	movs	r3, #15
   26548:	18fb      	adds	r3, r7, r3
   2654a:	781b      	ldrb	r3, [r3, #0]
   2654c:	009b      	lsls	r3, r3, #2
   2654e:	2210      	movs	r2, #16
   26550:	4694      	mov	ip, r2
   26552:	44bc      	add	ip, r7
   26554:	4463      	add	r3, ip
   26556:	3b08      	subs	r3, #8
   26558:	681b      	ldr	r3, [r3, #0]
   2655a:	e000      	b.n	2655e <_extint_get_eic_from_channel+0x3e>
		return NULL;
   2655c:	2300      	movs	r3, #0
}
   2655e:	0018      	movs	r0, r3
   26560:	46bd      	mov	sp, r7
   26562:	b004      	add	sp, #16
   26564:	bd80      	pop	{r7, pc}
   26566:	46c0      	nop			; (mov r8, r8)
   26568:	40001800 	.word	0x40001800

0002656c <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   2656c:	b580      	push	{r7, lr}
   2656e:	b082      	sub	sp, #8
   26570:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26572:	4b0f      	ldr	r3, [pc, #60]	; (265b0 <extint_is_syncing+0x44>)
   26574:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26576:	2300      	movs	r3, #0
   26578:	607b      	str	r3, [r7, #4]
   2657a:	e011      	b.n	265a0 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   2657c:	687b      	ldr	r3, [r7, #4]
   2657e:	009b      	lsls	r3, r3, #2
   26580:	2208      	movs	r2, #8
   26582:	4694      	mov	ip, r2
   26584:	44bc      	add	ip, r7
   26586:	4463      	add	r3, ip
   26588:	3b08      	subs	r3, #8
   2658a:	681b      	ldr	r3, [r3, #0]
   2658c:	785b      	ldrb	r3, [r3, #1]
   2658e:	b2db      	uxtb	r3, r3
   26590:	b25b      	sxtb	r3, r3
   26592:	2b00      	cmp	r3, #0
   26594:	da01      	bge.n	2659a <extint_is_syncing+0x2e>
			return true;
   26596:	2301      	movs	r3, #1
   26598:	e006      	b.n	265a8 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2659a:	687b      	ldr	r3, [r7, #4]
   2659c:	3301      	adds	r3, #1
   2659e:	607b      	str	r3, [r7, #4]
   265a0:	687b      	ldr	r3, [r7, #4]
   265a2:	2b00      	cmp	r3, #0
   265a4:	d0ea      	beq.n	2657c <extint_is_syncing+0x10>
		}
	}
	return false;
   265a6:	2300      	movs	r3, #0
}
   265a8:	0018      	movs	r0, r3
   265aa:	46bd      	mov	sp, r7
   265ac:	b002      	add	sp, #8
   265ae:	bd80      	pop	{r7, pc}
   265b0:	40001800 	.word	0x40001800

000265b4 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   265b4:	b580      	push	{r7, lr}
   265b6:	b084      	sub	sp, #16
   265b8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   265ba:	4b2d      	ldr	r3, [pc, #180]	; (26670 <_system_extint_init+0xbc>)
   265bc:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   265be:	2140      	movs	r1, #64	; 0x40
   265c0:	2000      	movs	r0, #0
   265c2:	4b2c      	ldr	r3, [pc, #176]	; (26674 <_system_extint_init+0xc0>)
   265c4:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   265c6:	003b      	movs	r3, r7
   265c8:	0018      	movs	r0, r3
   265ca:	4b2b      	ldr	r3, [pc, #172]	; (26678 <_system_extint_init+0xc4>)
   265cc:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   265ce:	003b      	movs	r3, r7
   265d0:	2200      	movs	r2, #0
   265d2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   265d4:	003b      	movs	r3, r7
   265d6:	0019      	movs	r1, r3
   265d8:	2005      	movs	r0, #5
   265da:	4b28      	ldr	r3, [pc, #160]	; (2667c <_system_extint_init+0xc8>)
   265dc:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   265de:	2005      	movs	r0, #5
   265e0:	4b27      	ldr	r3, [pc, #156]	; (26680 <_system_extint_init+0xcc>)
   265e2:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   265e4:	2300      	movs	r3, #0
   265e6:	60fb      	str	r3, [r7, #12]
   265e8:	e018      	b.n	2661c <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   265ea:	68fb      	ldr	r3, [r7, #12]
   265ec:	009b      	lsls	r3, r3, #2
   265ee:	2210      	movs	r2, #16
   265f0:	4694      	mov	ip, r2
   265f2:	44bc      	add	ip, r7
   265f4:	4463      	add	r3, ip
   265f6:	3b0c      	subs	r3, #12
   265f8:	681a      	ldr	r2, [r3, #0]
   265fa:	68fb      	ldr	r3, [r7, #12]
   265fc:	009b      	lsls	r3, r3, #2
   265fe:	2110      	movs	r1, #16
   26600:	468c      	mov	ip, r1
   26602:	44bc      	add	ip, r7
   26604:	4463      	add	r3, ip
   26606:	3b0c      	subs	r3, #12
   26608:	681b      	ldr	r3, [r3, #0]
   2660a:	781b      	ldrb	r3, [r3, #0]
   2660c:	b2db      	uxtb	r3, r3
   2660e:	2101      	movs	r1, #1
   26610:	430b      	orrs	r3, r1
   26612:	b2db      	uxtb	r3, r3
   26614:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26616:	68fb      	ldr	r3, [r7, #12]
   26618:	3301      	adds	r3, #1
   2661a:	60fb      	str	r3, [r7, #12]
   2661c:	68fb      	ldr	r3, [r7, #12]
   2661e:	2b00      	cmp	r3, #0
   26620:	d0e3      	beq.n	265ea <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   26622:	46c0      	nop			; (mov r8, r8)
   26624:	4b17      	ldr	r3, [pc, #92]	; (26684 <_system_extint_init+0xd0>)
   26626:	4798      	blx	r3
   26628:	1e03      	subs	r3, r0, #0
   2662a:	d1fb      	bne.n	26624 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   2662c:	230b      	movs	r3, #11
   2662e:	18fb      	adds	r3, r7, r3
   26630:	2200      	movs	r2, #0
   26632:	701a      	strb	r2, [r3, #0]
   26634:	e00d      	b.n	26652 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   26636:	230b      	movs	r3, #11
   26638:	18fb      	adds	r3, r7, r3
   2663a:	781a      	ldrb	r2, [r3, #0]
   2663c:	4b12      	ldr	r3, [pc, #72]	; (26688 <_system_extint_init+0xd4>)
   2663e:	0092      	lsls	r2, r2, #2
   26640:	2100      	movs	r1, #0
   26642:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   26644:	230b      	movs	r3, #11
   26646:	18fb      	adds	r3, r7, r3
   26648:	781a      	ldrb	r2, [r3, #0]
   2664a:	230b      	movs	r3, #11
   2664c:	18fb      	adds	r3, r7, r3
   2664e:	3201      	adds	r2, #1
   26650:	701a      	strb	r2, [r3, #0]
   26652:	230b      	movs	r3, #11
   26654:	18fb      	adds	r3, r7, r3
   26656:	781b      	ldrb	r3, [r3, #0]
   26658:	2b0f      	cmp	r3, #15
   2665a:	d9ec      	bls.n	26636 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   2665c:	2004      	movs	r0, #4
   2665e:	4b0b      	ldr	r3, [pc, #44]	; (2668c <_system_extint_init+0xd8>)
   26660:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   26662:	4b0b      	ldr	r3, [pc, #44]	; (26690 <_system_extint_init+0xdc>)
   26664:	4798      	blx	r3
}
   26666:	46c0      	nop			; (mov r8, r8)
   26668:	46bd      	mov	sp, r7
   2666a:	b004      	add	sp, #16
   2666c:	bd80      	pop	{r7, pc}
   2666e:	46c0      	nop			; (mov r8, r8)
   26670:	40001800 	.word	0x40001800
   26674:	00026471 	.word	0x00026471
   26678:	00026459 	.word	0x00026459
   2667c:	00029ce1 	.word	0x00029ce1
   26680:	00029d25 	.word	0x00029d25
   26684:	0002656d 	.word	0x0002656d
   26688:	20005bc0 	.word	0x20005bc0
   2668c:	000264f5 	.word	0x000264f5
   26690:	00026695 	.word	0x00026695

00026694 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   26694:	b580      	push	{r7, lr}
   26696:	b082      	sub	sp, #8
   26698:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2669a:	4b15      	ldr	r3, [pc, #84]	; (266f0 <_extint_enable+0x5c>)
   2669c:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2669e:	2300      	movs	r3, #0
   266a0:	607b      	str	r3, [r7, #4]
   266a2:	e018      	b.n	266d6 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   266a4:	687b      	ldr	r3, [r7, #4]
   266a6:	009b      	lsls	r3, r3, #2
   266a8:	2208      	movs	r2, #8
   266aa:	4694      	mov	ip, r2
   266ac:	44bc      	add	ip, r7
   266ae:	4463      	add	r3, ip
   266b0:	3b08      	subs	r3, #8
   266b2:	681a      	ldr	r2, [r3, #0]
   266b4:	687b      	ldr	r3, [r7, #4]
   266b6:	009b      	lsls	r3, r3, #2
   266b8:	2108      	movs	r1, #8
   266ba:	468c      	mov	ip, r1
   266bc:	44bc      	add	ip, r7
   266be:	4463      	add	r3, ip
   266c0:	3b08      	subs	r3, #8
   266c2:	681b      	ldr	r3, [r3, #0]
   266c4:	781b      	ldrb	r3, [r3, #0]
   266c6:	b2db      	uxtb	r3, r3
   266c8:	2102      	movs	r1, #2
   266ca:	430b      	orrs	r3, r1
   266cc:	b2db      	uxtb	r3, r3
   266ce:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   266d0:	687b      	ldr	r3, [r7, #4]
   266d2:	3301      	adds	r3, #1
   266d4:	607b      	str	r3, [r7, #4]
   266d6:	687b      	ldr	r3, [r7, #4]
   266d8:	2b00      	cmp	r3, #0
   266da:	d0e3      	beq.n	266a4 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   266dc:	46c0      	nop			; (mov r8, r8)
   266de:	4b05      	ldr	r3, [pc, #20]	; (266f4 <_extint_enable+0x60>)
   266e0:	4798      	blx	r3
   266e2:	1e03      	subs	r3, r0, #0
   266e4:	d1fb      	bne.n	266de <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   266e6:	46c0      	nop			; (mov r8, r8)
   266e8:	46bd      	mov	sp, r7
   266ea:	b002      	add	sp, #8
   266ec:	bd80      	pop	{r7, pc}
   266ee:	46c0      	nop			; (mov r8, r8)
   266f0:	40001800 	.word	0x40001800
   266f4:	0002656d 	.word	0x0002656d

000266f8 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   266f8:	b580      	push	{r7, lr}
   266fa:	b082      	sub	sp, #8
   266fc:	af00      	add	r7, sp, #0
   266fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   26700:	687b      	ldr	r3, [r7, #4]
   26702:	2200      	movs	r2, #0
   26704:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   26706:	687b      	ldr	r3, [r7, #4]
   26708:	2200      	movs	r2, #0
   2670a:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   2670c:	687b      	ldr	r3, [r7, #4]
   2670e:	2201      	movs	r2, #1
   26710:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   26712:	687b      	ldr	r3, [r7, #4]
   26714:	2201      	movs	r2, #1
   26716:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   26718:	687b      	ldr	r3, [r7, #4]
   2671a:	2200      	movs	r2, #0
   2671c:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   2671e:	687b      	ldr	r3, [r7, #4]
   26720:	2202      	movs	r2, #2
   26722:	72da      	strb	r2, [r3, #11]
}
   26724:	46c0      	nop			; (mov r8, r8)
   26726:	46bd      	mov	sp, r7
   26728:	b002      	add	sp, #8
   2672a:	bd80      	pop	{r7, pc}

0002672c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   2672c:	b580      	push	{r7, lr}
   2672e:	b086      	sub	sp, #24
   26730:	af00      	add	r7, sp, #0
   26732:	0002      	movs	r2, r0
   26734:	6039      	str	r1, [r7, #0]
   26736:	1dfb      	adds	r3, r7, #7
   26738:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   2673a:	2308      	movs	r3, #8
   2673c:	18fb      	adds	r3, r7, r3
   2673e:	0018      	movs	r0, r3
   26740:	4b36      	ldr	r3, [pc, #216]	; (2681c <extint_chan_set_config+0xf0>)
   26742:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   26744:	683b      	ldr	r3, [r7, #0]
   26746:	685b      	ldr	r3, [r3, #4]
   26748:	b2da      	uxtb	r2, r3
   2674a:	2308      	movs	r3, #8
   2674c:	18fb      	adds	r3, r7, r3
   2674e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26750:	2308      	movs	r3, #8
   26752:	18fb      	adds	r3, r7, r3
   26754:	2200      	movs	r2, #0
   26756:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   26758:	683b      	ldr	r3, [r7, #0]
   2675a:	7a1a      	ldrb	r2, [r3, #8]
   2675c:	2308      	movs	r3, #8
   2675e:	18fb      	adds	r3, r7, r3
   26760:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   26762:	683b      	ldr	r3, [r7, #0]
   26764:	681b      	ldr	r3, [r3, #0]
   26766:	b2db      	uxtb	r3, r3
   26768:	2208      	movs	r2, #8
   2676a:	18ba      	adds	r2, r7, r2
   2676c:	0011      	movs	r1, r2
   2676e:	0018      	movs	r0, r3
   26770:	4b2b      	ldr	r3, [pc, #172]	; (26820 <extint_chan_set_config+0xf4>)
   26772:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   26774:	1dfb      	adds	r3, r7, #7
   26776:	781b      	ldrb	r3, [r3, #0]
   26778:	0018      	movs	r0, r3
   2677a:	4b2a      	ldr	r3, [pc, #168]	; (26824 <extint_chan_set_config+0xf8>)
   2677c:	4798      	blx	r3
   2677e:	0003      	movs	r3, r0
   26780:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   26782:	1dfb      	adds	r3, r7, #7
   26784:	781b      	ldrb	r3, [r3, #0]
   26786:	2207      	movs	r2, #7
   26788:	4013      	ands	r3, r2
   2678a:	009b      	lsls	r3, r3, #2
   2678c:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   2678e:	683b      	ldr	r3, [r7, #0]
   26790:	7adb      	ldrb	r3, [r3, #11]
   26792:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   26794:	683b      	ldr	r3, [r7, #0]
   26796:	7a9b      	ldrb	r3, [r3, #10]
   26798:	2b00      	cmp	r3, #0
   2679a:	d003      	beq.n	267a4 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   2679c:	697b      	ldr	r3, [r7, #20]
   2679e:	2208      	movs	r2, #8
   267a0:	4313      	orrs	r3, r2
   267a2:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   267a4:	1dfb      	adds	r3, r7, #7
   267a6:	781b      	ldrb	r3, [r3, #0]
   267a8:	08db      	lsrs	r3, r3, #3
   267aa:	b2db      	uxtb	r3, r3
   267ac:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   267ae:	1dfb      	adds	r3, r7, #7
   267b0:	781b      	ldrb	r3, [r3, #0]
   267b2:	08db      	lsrs	r3, r3, #3
   267b4:	b2db      	uxtb	r3, r3
   267b6:	001a      	movs	r2, r3
   267b8:	693b      	ldr	r3, [r7, #16]
   267ba:	3206      	adds	r2, #6
   267bc:	0092      	lsls	r2, r2, #2
   267be:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   267c0:	210f      	movs	r1, #15
   267c2:	68fa      	ldr	r2, [r7, #12]
   267c4:	4091      	lsls	r1, r2
   267c6:	000a      	movs	r2, r1
   267c8:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   267ca:	401a      	ands	r2, r3
			(new_config << config_pos);
   267cc:	6979      	ldr	r1, [r7, #20]
   267ce:	68fb      	ldr	r3, [r7, #12]
   267d0:	4099      	lsls	r1, r3
   267d2:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   267d4:	431a      	orrs	r2, r3
   267d6:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   267d8:	693b      	ldr	r3, [r7, #16]
   267da:	1d82      	adds	r2, r0, #6
   267dc:	0092      	lsls	r2, r2, #2
   267de:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   267e0:	683b      	ldr	r3, [r7, #0]
   267e2:	7a5b      	ldrb	r3, [r3, #9]
   267e4:	2b00      	cmp	r3, #0
   267e6:	d00a      	beq.n	267fe <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   267e8:	693b      	ldr	r3, [r7, #16]
   267ea:	695a      	ldr	r2, [r3, #20]
   267ec:	1dfb      	adds	r3, r7, #7
   267ee:	781b      	ldrb	r3, [r3, #0]
   267f0:	2101      	movs	r1, #1
   267f2:	4099      	lsls	r1, r3
   267f4:	000b      	movs	r3, r1
   267f6:	431a      	orrs	r2, r3
   267f8:	693b      	ldr	r3, [r7, #16]
   267fa:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   267fc:	e00a      	b.n	26814 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   267fe:	693b      	ldr	r3, [r7, #16]
   26800:	695b      	ldr	r3, [r3, #20]
   26802:	1dfa      	adds	r2, r7, #7
   26804:	7812      	ldrb	r2, [r2, #0]
   26806:	2101      	movs	r1, #1
   26808:	4091      	lsls	r1, r2
   2680a:	000a      	movs	r2, r1
   2680c:	43d2      	mvns	r2, r2
   2680e:	401a      	ands	r2, r3
   26810:	693b      	ldr	r3, [r7, #16]
   26812:	615a      	str	r2, [r3, #20]
}
   26814:	46c0      	nop			; (mov r8, r8)
   26816:	46bd      	mov	sp, r7
   26818:	b006      	add	sp, #24
   2681a:	bd80      	pop	{r7, pc}
   2681c:	000264cd 	.word	0x000264cd
   26820:	0002a041 	.word	0x0002a041
   26824:	00026521 	.word	0x00026521

00026828 <system_pinmux_get_config_defaults>:
{
   26828:	b580      	push	{r7, lr}
   2682a:	b082      	sub	sp, #8
   2682c:	af00      	add	r7, sp, #0
   2682e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   26830:	687b      	ldr	r3, [r7, #4]
   26832:	2280      	movs	r2, #128	; 0x80
   26834:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26836:	687b      	ldr	r3, [r7, #4]
   26838:	2200      	movs	r2, #0
   2683a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2683c:	687b      	ldr	r3, [r7, #4]
   2683e:	2201      	movs	r2, #1
   26840:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   26842:	687b      	ldr	r3, [r7, #4]
   26844:	2200      	movs	r2, #0
   26846:	70da      	strb	r2, [r3, #3]
}
   26848:	46c0      	nop			; (mov r8, r8)
   2684a:	46bd      	mov	sp, r7
   2684c:	b002      	add	sp, #8
   2684e:	bd80      	pop	{r7, pc}

00026850 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   26850:	b580      	push	{r7, lr}
   26852:	b084      	sub	sp, #16
   26854:	af00      	add	r7, sp, #0
   26856:	0002      	movs	r2, r0
   26858:	6039      	str	r1, [r7, #0]
   2685a:	1dfb      	adds	r3, r7, #7
   2685c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   2685e:	230c      	movs	r3, #12
   26860:	18fb      	adds	r3, r7, r3
   26862:	0018      	movs	r0, r3
   26864:	4b10      	ldr	r3, [pc, #64]	; (268a8 <port_pin_set_config+0x58>)
   26866:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   26868:	230c      	movs	r3, #12
   2686a:	18fb      	adds	r3, r7, r3
   2686c:	2280      	movs	r2, #128	; 0x80
   2686e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   26870:	683b      	ldr	r3, [r7, #0]
   26872:	781a      	ldrb	r2, [r3, #0]
   26874:	230c      	movs	r3, #12
   26876:	18fb      	adds	r3, r7, r3
   26878:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   2687a:	683b      	ldr	r3, [r7, #0]
   2687c:	785a      	ldrb	r2, [r3, #1]
   2687e:	230c      	movs	r3, #12
   26880:	18fb      	adds	r3, r7, r3
   26882:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   26884:	683b      	ldr	r3, [r7, #0]
   26886:	789a      	ldrb	r2, [r3, #2]
   26888:	230c      	movs	r3, #12
   2688a:	18fb      	adds	r3, r7, r3
   2688c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   2688e:	230c      	movs	r3, #12
   26890:	18fa      	adds	r2, r7, r3
   26892:	1dfb      	adds	r3, r7, #7
   26894:	781b      	ldrb	r3, [r3, #0]
   26896:	0011      	movs	r1, r2
   26898:	0018      	movs	r0, r3
   2689a:	4b04      	ldr	r3, [pc, #16]	; (268ac <port_pin_set_config+0x5c>)
   2689c:	4798      	blx	r3
}
   2689e:	46c0      	nop			; (mov r8, r8)
   268a0:	46bd      	mov	sp, r7
   268a2:	b004      	add	sp, #16
   268a4:	bd80      	pop	{r7, pc}
   268a6:	46c0      	nop			; (mov r8, r8)
   268a8:	00026829 	.word	0x00026829
   268ac:	0002a041 	.word	0x0002a041

000268b0 <system_gclk_chan_get_config_defaults>:
{
   268b0:	b580      	push	{r7, lr}
   268b2:	b082      	sub	sp, #8
   268b4:	af00      	add	r7, sp, #0
   268b6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   268b8:	687b      	ldr	r3, [r7, #4]
   268ba:	2200      	movs	r2, #0
   268bc:	701a      	strb	r2, [r3, #0]
}
   268be:	46c0      	nop			; (mov r8, r8)
   268c0:	46bd      	mov	sp, r7
   268c2:	b002      	add	sp, #8
   268c4:	bd80      	pop	{r7, pc}
	...

000268c8 <system_apb_clock_set_mask>:
{
   268c8:	b580      	push	{r7, lr}
   268ca:	b082      	sub	sp, #8
   268cc:	af00      	add	r7, sp, #0
   268ce:	0002      	movs	r2, r0
   268d0:	6039      	str	r1, [r7, #0]
   268d2:	1dfb      	adds	r3, r7, #7
   268d4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   268d6:	1dfb      	adds	r3, r7, #7
   268d8:	781b      	ldrb	r3, [r3, #0]
   268da:	2b01      	cmp	r3, #1
   268dc:	d00a      	beq.n	268f4 <system_apb_clock_set_mask+0x2c>
   268de:	2b02      	cmp	r3, #2
   268e0:	d00f      	beq.n	26902 <system_apb_clock_set_mask+0x3a>
   268e2:	2b00      	cmp	r3, #0
   268e4:	d114      	bne.n	26910 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   268e6:	4b0e      	ldr	r3, [pc, #56]	; (26920 <system_apb_clock_set_mask+0x58>)
   268e8:	4a0d      	ldr	r2, [pc, #52]	; (26920 <system_apb_clock_set_mask+0x58>)
   268ea:	6991      	ldr	r1, [r2, #24]
   268ec:	683a      	ldr	r2, [r7, #0]
   268ee:	430a      	orrs	r2, r1
   268f0:	619a      	str	r2, [r3, #24]
			break;
   268f2:	e00f      	b.n	26914 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   268f4:	4b0a      	ldr	r3, [pc, #40]	; (26920 <system_apb_clock_set_mask+0x58>)
   268f6:	4a0a      	ldr	r2, [pc, #40]	; (26920 <system_apb_clock_set_mask+0x58>)
   268f8:	69d1      	ldr	r1, [r2, #28]
   268fa:	683a      	ldr	r2, [r7, #0]
   268fc:	430a      	orrs	r2, r1
   268fe:	61da      	str	r2, [r3, #28]
			break;
   26900:	e008      	b.n	26914 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   26902:	4b07      	ldr	r3, [pc, #28]	; (26920 <system_apb_clock_set_mask+0x58>)
   26904:	4a06      	ldr	r2, [pc, #24]	; (26920 <system_apb_clock_set_mask+0x58>)
   26906:	6a11      	ldr	r1, [r2, #32]
   26908:	683a      	ldr	r2, [r7, #0]
   2690a:	430a      	orrs	r2, r1
   2690c:	621a      	str	r2, [r3, #32]
			break;
   2690e:	e001      	b.n	26914 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   26910:	2317      	movs	r3, #23
   26912:	e000      	b.n	26916 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   26914:	2300      	movs	r3, #0
}
   26916:	0018      	movs	r0, r3
   26918:	46bd      	mov	sp, r7
   2691a:	b002      	add	sp, #8
   2691c:	bd80      	pop	{r7, pc}
   2691e:	46c0      	nop			; (mov r8, r8)
   26920:	40000400 	.word	0x40000400

00026924 <system_interrupt_enable>:
{
   26924:	b580      	push	{r7, lr}
   26926:	b082      	sub	sp, #8
   26928:	af00      	add	r7, sp, #0
   2692a:	0002      	movs	r2, r0
   2692c:	1dfb      	adds	r3, r7, #7
   2692e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26930:	4b06      	ldr	r3, [pc, #24]	; (2694c <system_interrupt_enable+0x28>)
   26932:	1dfa      	adds	r2, r7, #7
   26934:	7812      	ldrb	r2, [r2, #0]
   26936:	0011      	movs	r1, r2
   26938:	221f      	movs	r2, #31
   2693a:	400a      	ands	r2, r1
   2693c:	2101      	movs	r1, #1
   2693e:	4091      	lsls	r1, r2
   26940:	000a      	movs	r2, r1
   26942:	601a      	str	r2, [r3, #0]
}
   26944:	46c0      	nop			; (mov r8, r8)
   26946:	46bd      	mov	sp, r7
   26948:	b002      	add	sp, #8
   2694a:	bd80      	pop	{r7, pc}
   2694c:	e000e100 	.word	0xe000e100

00026950 <system_interrupt_disable>:
{
   26950:	b580      	push	{r7, lr}
   26952:	b082      	sub	sp, #8
   26954:	af00      	add	r7, sp, #0
   26956:	0002      	movs	r2, r0
   26958:	1dfb      	adds	r3, r7, #7
   2695a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2695c:	4a07      	ldr	r2, [pc, #28]	; (2697c <system_interrupt_disable+0x2c>)
   2695e:	1dfb      	adds	r3, r7, #7
   26960:	781b      	ldrb	r3, [r3, #0]
   26962:	0019      	movs	r1, r3
   26964:	231f      	movs	r3, #31
   26966:	400b      	ands	r3, r1
   26968:	2101      	movs	r1, #1
   2696a:	4099      	lsls	r1, r3
   2696c:	000b      	movs	r3, r1
   2696e:	0019      	movs	r1, r3
   26970:	2380      	movs	r3, #128	; 0x80
   26972:	50d1      	str	r1, [r2, r3]
}
   26974:	46c0      	nop			; (mov r8, r8)
   26976:	46bd      	mov	sp, r7
   26978:	b002      	add	sp, #8
   2697a:	bd80      	pop	{r7, pc}
   2697c:	e000e100 	.word	0xe000e100

00026980 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   26980:	b580      	push	{r7, lr}
   26982:	b084      	sub	sp, #16
   26984:	af00      	add	r7, sp, #0
   26986:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26988:	687b      	ldr	r3, [r7, #4]
   2698a:	681b      	ldr	r3, [r3, #0]
   2698c:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   2698e:	68fb      	ldr	r3, [r7, #12]
   26990:	7a9b      	ldrb	r3, [r3, #10]
   26992:	b2db      	uxtb	r3, r3
   26994:	b25b      	sxtb	r3, r3
   26996:	2b00      	cmp	r3, #0
   26998:	da01      	bge.n	2699e <rtc_calendar_is_syncing+0x1e>
                return true;
   2699a:	2301      	movs	r3, #1
   2699c:	e000      	b.n	269a0 <rtc_calendar_is_syncing+0x20>
        }

        return false;
   2699e:	2300      	movs	r3, #0
}
   269a0:	0018      	movs	r0, r3
   269a2:	46bd      	mov	sp, r7
   269a4:	b004      	add	sp, #16
   269a6:	bd80      	pop	{r7, pc}

000269a8 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   269a8:	b580      	push	{r7, lr}
   269aa:	b084      	sub	sp, #16
   269ac:	af00      	add	r7, sp, #0
   269ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   269b0:	687b      	ldr	r3, [r7, #4]
   269b2:	681b      	ldr	r3, [r3, #0]
   269b4:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   269b6:	2003      	movs	r0, #3
   269b8:	4b0a      	ldr	r3, [pc, #40]	; (269e4 <rtc_calendar_enable+0x3c>)
   269ba:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   269bc:	46c0      	nop			; (mov r8, r8)
   269be:	687b      	ldr	r3, [r7, #4]
   269c0:	0018      	movs	r0, r3
   269c2:	4b09      	ldr	r3, [pc, #36]	; (269e8 <rtc_calendar_enable+0x40>)
   269c4:	4798      	blx	r3
   269c6:	1e03      	subs	r3, r0, #0
   269c8:	d1f9      	bne.n	269be <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   269ca:	68fb      	ldr	r3, [r7, #12]
   269cc:	881b      	ldrh	r3, [r3, #0]
   269ce:	b29b      	uxth	r3, r3
   269d0:	2202      	movs	r2, #2
   269d2:	4313      	orrs	r3, r2
   269d4:	b29a      	uxth	r2, r3
   269d6:	68fb      	ldr	r3, [r7, #12]
   269d8:	801a      	strh	r2, [r3, #0]
}
   269da:	46c0      	nop			; (mov r8, r8)
   269dc:	46bd      	mov	sp, r7
   269de:	b004      	add	sp, #16
   269e0:	bd80      	pop	{r7, pc}
   269e2:	46c0      	nop			; (mov r8, r8)
   269e4:	00026925 	.word	0x00026925
   269e8:	00026981 	.word	0x00026981

000269ec <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   269ec:	b580      	push	{r7, lr}
   269ee:	b084      	sub	sp, #16
   269f0:	af00      	add	r7, sp, #0
   269f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   269f4:	687b      	ldr	r3, [r7, #4]
   269f6:	681b      	ldr	r3, [r3, #0]
   269f8:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   269fa:	2003      	movs	r0, #3
   269fc:	4b0d      	ldr	r3, [pc, #52]	; (26a34 <rtc_calendar_disable+0x48>)
   269fe:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   26a00:	46c0      	nop			; (mov r8, r8)
   26a02:	687b      	ldr	r3, [r7, #4]
   26a04:	0018      	movs	r0, r3
   26a06:	4b0c      	ldr	r3, [pc, #48]	; (26a38 <rtc_calendar_disable+0x4c>)
   26a08:	4798      	blx	r3
   26a0a:	1e03      	subs	r3, r0, #0
   26a0c:	d1f9      	bne.n	26a02 <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   26a0e:	68fb      	ldr	r3, [r7, #12]
   26a10:	22c1      	movs	r2, #193	; 0xc1
   26a12:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   26a14:	68fb      	ldr	r3, [r7, #12]
   26a16:	22c1      	movs	r2, #193	; 0xc1
   26a18:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   26a1a:	68fb      	ldr	r3, [r7, #12]
   26a1c:	881b      	ldrh	r3, [r3, #0]
   26a1e:	b29b      	uxth	r3, r3
   26a20:	2202      	movs	r2, #2
   26a22:	4393      	bics	r3, r2
   26a24:	b29a      	uxth	r2, r3
   26a26:	68fb      	ldr	r3, [r7, #12]
   26a28:	801a      	strh	r2, [r3, #0]
}
   26a2a:	46c0      	nop			; (mov r8, r8)
   26a2c:	46bd      	mov	sp, r7
   26a2e:	b004      	add	sp, #16
   26a30:	bd80      	pop	{r7, pc}
   26a32:	46c0      	nop			; (mov r8, r8)
   26a34:	00026951 	.word	0x00026951
   26a38:	00026981 	.word	0x00026981

00026a3c <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   26a3c:	b580      	push	{r7, lr}
   26a3e:	b084      	sub	sp, #16
   26a40:	af00      	add	r7, sp, #0
   26a42:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26a44:	687b      	ldr	r3, [r7, #4]
   26a46:	681b      	ldr	r3, [r3, #0]
   26a48:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   26a4a:	687b      	ldr	r3, [r7, #4]
   26a4c:	0018      	movs	r0, r3
   26a4e:	4b0d      	ldr	r3, [pc, #52]	; (26a84 <rtc_calendar_reset+0x48>)
   26a50:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   26a52:	687b      	ldr	r3, [r7, #4]
   26a54:	2200      	movs	r2, #0
   26a56:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   26a58:	687b      	ldr	r3, [r7, #4]
   26a5a:	2200      	movs	r2, #0
   26a5c:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   26a5e:	46c0      	nop			; (mov r8, r8)
   26a60:	687b      	ldr	r3, [r7, #4]
   26a62:	0018      	movs	r0, r3
   26a64:	4b08      	ldr	r3, [pc, #32]	; (26a88 <rtc_calendar_reset+0x4c>)
   26a66:	4798      	blx	r3
   26a68:	1e03      	subs	r3, r0, #0
   26a6a:	d1f9      	bne.n	26a60 <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   26a6c:	68fb      	ldr	r3, [r7, #12]
   26a6e:	881b      	ldrh	r3, [r3, #0]
   26a70:	b29b      	uxth	r3, r3
   26a72:	2201      	movs	r2, #1
   26a74:	4313      	orrs	r3, r2
   26a76:	b29a      	uxth	r2, r3
   26a78:	68fb      	ldr	r3, [r7, #12]
   26a7a:	801a      	strh	r2, [r3, #0]
}
   26a7c:	46c0      	nop			; (mov r8, r8)
   26a7e:	46bd      	mov	sp, r7
   26a80:	b004      	add	sp, #16
   26a82:	bd80      	pop	{r7, pc}
   26a84:	000269ed 	.word	0x000269ed
   26a88:	00026981 	.word	0x00026981

00026a8c <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   26a8c:	b580      	push	{r7, lr}
   26a8e:	b084      	sub	sp, #16
   26a90:	af00      	add	r7, sp, #0
   26a92:	6078      	str	r0, [r7, #4]
   26a94:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   26a96:	683b      	ldr	r3, [r7, #0]
   26a98:	88db      	ldrh	r3, [r3, #6]
   26a9a:	001a      	movs	r2, r3
   26a9c:	687b      	ldr	r3, [r7, #4]
   26a9e:	88db      	ldrh	r3, [r3, #6]
   26aa0:	1ad3      	subs	r3, r2, r3
   26aa2:	069b      	lsls	r3, r3, #26
   26aa4:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   26aa6:	683b      	ldr	r3, [r7, #0]
   26aa8:	795b      	ldrb	r3, [r3, #5]
   26aaa:	059b      	lsls	r3, r3, #22
   26aac:	001a      	movs	r2, r3
   26aae:	68fb      	ldr	r3, [r7, #12]
   26ab0:	4313      	orrs	r3, r2
   26ab2:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   26ab4:	683b      	ldr	r3, [r7, #0]
   26ab6:	791b      	ldrb	r3, [r3, #4]
   26ab8:	045b      	lsls	r3, r3, #17
   26aba:	001a      	movs	r2, r3
   26abc:	68fb      	ldr	r3, [r7, #12]
   26abe:	4313      	orrs	r3, r2
   26ac0:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   26ac2:	683b      	ldr	r3, [r7, #0]
   26ac4:	789b      	ldrb	r3, [r3, #2]
   26ac6:	031b      	lsls	r3, r3, #12
   26ac8:	001a      	movs	r2, r3
   26aca:	68fb      	ldr	r3, [r7, #12]
   26acc:	4313      	orrs	r3, r2
   26ace:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   26ad0:	687b      	ldr	r3, [r7, #4]
   26ad2:	791b      	ldrb	r3, [r3, #4]
   26ad4:	2201      	movs	r2, #1
   26ad6:	4053      	eors	r3, r2
   26ad8:	b2db      	uxtb	r3, r3
   26ada:	2b00      	cmp	r3, #0
   26adc:	d008      	beq.n	26af0 <rtc_calendar_time_to_register_value+0x64>
   26ade:	683b      	ldr	r3, [r7, #0]
   26ae0:	78db      	ldrb	r3, [r3, #3]
   26ae2:	2b00      	cmp	r3, #0
   26ae4:	d004      	beq.n	26af0 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   26ae6:	68fb      	ldr	r3, [r7, #12]
   26ae8:	2280      	movs	r2, #128	; 0x80
   26aea:	0252      	lsls	r2, r2, #9
   26aec:	4313      	orrs	r3, r2
   26aee:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   26af0:	683b      	ldr	r3, [r7, #0]
   26af2:	785b      	ldrb	r3, [r3, #1]
   26af4:	019b      	lsls	r3, r3, #6
   26af6:	001a      	movs	r2, r3
   26af8:	68fb      	ldr	r3, [r7, #12]
   26afa:	4313      	orrs	r3, r2
   26afc:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   26afe:	683b      	ldr	r3, [r7, #0]
   26b00:	781b      	ldrb	r3, [r3, #0]
   26b02:	001a      	movs	r2, r3
   26b04:	68fb      	ldr	r3, [r7, #12]
   26b06:	4313      	orrs	r3, r2
   26b08:	60fb      	str	r3, [r7, #12]

	return register_value;
   26b0a:	68fb      	ldr	r3, [r7, #12]
}
   26b0c:	0018      	movs	r0, r3
   26b0e:	46bd      	mov	sp, r7
   26b10:	b004      	add	sp, #16
   26b12:	bd80      	pop	{r7, pc}

00026b14 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   26b14:	b580      	push	{r7, lr}
   26b16:	b084      	sub	sp, #16
   26b18:	af00      	add	r7, sp, #0
   26b1a:	60f8      	str	r0, [r7, #12]
   26b1c:	60b9      	str	r1, [r7, #8]
   26b1e:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   26b20:	68bb      	ldr	r3, [r7, #8]
   26b22:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   26b24:	b29a      	uxth	r2, r3
   26b26:	68fb      	ldr	r3, [r7, #12]
   26b28:	88db      	ldrh	r3, [r3, #6]
   26b2a:	18d3      	adds	r3, r2, r3
   26b2c:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   26b2e:	687b      	ldr	r3, [r7, #4]
   26b30:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   26b32:	68bb      	ldr	r3, [r7, #8]
   26b34:	0d9b      	lsrs	r3, r3, #22
   26b36:	b2db      	uxtb	r3, r3
   26b38:	220f      	movs	r2, #15
   26b3a:	4013      	ands	r3, r2
   26b3c:	b2da      	uxtb	r2, r3
   26b3e:	687b      	ldr	r3, [r7, #4]
   26b40:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   26b42:	68bb      	ldr	r3, [r7, #8]
   26b44:	0c5b      	lsrs	r3, r3, #17
   26b46:	b2db      	uxtb	r3, r3
   26b48:	221f      	movs	r2, #31
   26b4a:	4013      	ands	r3, r2
   26b4c:	b2da      	uxtb	r2, r3
   26b4e:	687b      	ldr	r3, [r7, #4]
   26b50:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   26b52:	68fb      	ldr	r3, [r7, #12]
   26b54:	791b      	ldrb	r3, [r3, #4]
   26b56:	2b00      	cmp	r3, #0
   26b58:	d008      	beq.n	26b6c <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   26b5a:	68bb      	ldr	r3, [r7, #8]
   26b5c:	0b1b      	lsrs	r3, r3, #12
   26b5e:	b2db      	uxtb	r3, r3
   26b60:	221f      	movs	r2, #31
   26b62:	4013      	ands	r3, r2
   26b64:	b2da      	uxtb	r2, r3
   26b66:	687b      	ldr	r3, [r7, #4]
   26b68:	709a      	strb	r2, [r3, #2]
   26b6a:	e010      	b.n	26b8e <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   26b6c:	68bb      	ldr	r3, [r7, #8]
   26b6e:	0b1b      	lsrs	r3, r3, #12
   26b70:	b2db      	uxtb	r3, r3
   26b72:	220f      	movs	r2, #15
   26b74:	4013      	ands	r3, r2
   26b76:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   26b78:	687b      	ldr	r3, [r7, #4]
   26b7a:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   26b7c:	68ba      	ldr	r2, [r7, #8]
   26b7e:	2380      	movs	r3, #128	; 0x80
   26b80:	025b      	lsls	r3, r3, #9
   26b82:	4013      	ands	r3, r2
   26b84:	1e5a      	subs	r2, r3, #1
   26b86:	4193      	sbcs	r3, r2
   26b88:	b2da      	uxtb	r2, r3
   26b8a:	687b      	ldr	r3, [r7, #4]
   26b8c:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   26b8e:	68bb      	ldr	r3, [r7, #8]
   26b90:	099b      	lsrs	r3, r3, #6
   26b92:	b2db      	uxtb	r3, r3
   26b94:	223f      	movs	r2, #63	; 0x3f
   26b96:	4013      	ands	r3, r2
   26b98:	b2da      	uxtb	r2, r3
   26b9a:	687b      	ldr	r3, [r7, #4]
   26b9c:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   26b9e:	68bb      	ldr	r3, [r7, #8]
   26ba0:	b2db      	uxtb	r3, r3
   26ba2:	223f      	movs	r2, #63	; 0x3f
   26ba4:	4013      	ands	r3, r2
   26ba6:	b2da      	uxtb	r2, r3
   26ba8:	687b      	ldr	r3, [r7, #4]
   26baa:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   26bac:	46c0      	nop			; (mov r8, r8)
   26bae:	46bd      	mov	sp, r7
   26bb0:	b004      	add	sp, #16
   26bb2:	bd80      	pop	{r7, pc}

00026bb4 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   26bb4:	b580      	push	{r7, lr}
   26bb6:	b084      	sub	sp, #16
   26bb8:	af00      	add	r7, sp, #0
   26bba:	6078      	str	r0, [r7, #4]
   26bbc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26bbe:	687b      	ldr	r3, [r7, #4]
   26bc0:	681b      	ldr	r3, [r3, #0]
   26bc2:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   26bc4:	683b      	ldr	r3, [r7, #0]
   26bc6:	881a      	ldrh	r2, [r3, #0]
   26bc8:	230e      	movs	r3, #14
   26bca:	18fb      	adds	r3, r7, r3
   26bcc:	2108      	movs	r1, #8
   26bce:	430a      	orrs	r2, r1
   26bd0:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   26bd2:	683b      	ldr	r3, [r7, #0]
   26bd4:	791b      	ldrb	r3, [r3, #4]
   26bd6:	2201      	movs	r2, #1
   26bd8:	4053      	eors	r3, r2
   26bda:	b2db      	uxtb	r3, r3
   26bdc:	2b00      	cmp	r3, #0
   26bde:	d007      	beq.n	26bf0 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   26be0:	230e      	movs	r3, #14
   26be2:	18fb      	adds	r3, r7, r3
   26be4:	220e      	movs	r2, #14
   26be6:	18ba      	adds	r2, r7, r2
   26be8:	8812      	ldrh	r2, [r2, #0]
   26bea:	2140      	movs	r1, #64	; 0x40
   26bec:	430a      	orrs	r2, r1
   26bee:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   26bf0:	683b      	ldr	r3, [r7, #0]
   26bf2:	789b      	ldrb	r3, [r3, #2]
   26bf4:	2b00      	cmp	r3, #0
   26bf6:	d007      	beq.n	26c08 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   26bf8:	230e      	movs	r3, #14
   26bfa:	18fb      	adds	r3, r7, r3
   26bfc:	220e      	movs	r2, #14
   26bfe:	18ba      	adds	r2, r7, r2
   26c00:	8812      	ldrh	r2, [r2, #0]
   26c02:	2180      	movs	r1, #128	; 0x80
   26c04:	430a      	orrs	r2, r1
   26c06:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   26c08:	68bb      	ldr	r3, [r7, #8]
   26c0a:	220e      	movs	r2, #14
   26c0c:	18ba      	adds	r2, r7, r2
   26c0e:	8812      	ldrh	r2, [r2, #0]
   26c10:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   26c12:	683b      	ldr	r3, [r7, #0]
   26c14:	78db      	ldrb	r3, [r3, #3]
   26c16:	2b00      	cmp	r3, #0
   26c18:	d008      	beq.n	26c2c <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   26c1a:	68bb      	ldr	r3, [r7, #8]
   26c1c:	885b      	ldrh	r3, [r3, #2]
   26c1e:	b29b      	uxth	r3, r3
   26c20:	2280      	movs	r2, #128	; 0x80
   26c22:	01d2      	lsls	r2, r2, #7
   26c24:	4313      	orrs	r3, r2
   26c26:	b29a      	uxth	r2, r3
   26c28:	68bb      	ldr	r3, [r7, #8]
   26c2a:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   26c2c:	230d      	movs	r3, #13
   26c2e:	18fb      	adds	r3, r7, r3
   26c30:	2200      	movs	r2, #0
   26c32:	701a      	strb	r2, [r3, #0]
   26c34:	e017      	b.n	26c66 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   26c36:	230d      	movs	r3, #13
   26c38:	18fb      	adds	r3, r7, r3
   26c3a:	781a      	ldrb	r2, [r3, #0]
   26c3c:	0013      	movs	r3, r2
   26c3e:	009b      	lsls	r3, r3, #2
   26c40:	189b      	adds	r3, r3, r2
   26c42:	005b      	lsls	r3, r3, #1
   26c44:	3308      	adds	r3, #8
   26c46:	683a      	ldr	r2, [r7, #0]
   26c48:	18d1      	adds	r1, r2, r3
   26c4a:	230d      	movs	r3, #13
   26c4c:	18fb      	adds	r3, r7, r3
   26c4e:	781a      	ldrb	r2, [r3, #0]
   26c50:	687b      	ldr	r3, [r7, #4]
   26c52:	0018      	movs	r0, r3
   26c54:	4b08      	ldr	r3, [pc, #32]	; (26c78 <_rtc_calendar_set_config+0xc4>)
   26c56:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   26c58:	230d      	movs	r3, #13
   26c5a:	18fb      	adds	r3, r7, r3
   26c5c:	781a      	ldrb	r2, [r3, #0]
   26c5e:	230d      	movs	r3, #13
   26c60:	18fb      	adds	r3, r7, r3
   26c62:	3201      	adds	r2, #1
   26c64:	701a      	strb	r2, [r3, #0]
   26c66:	230d      	movs	r3, #13
   26c68:	18fb      	adds	r3, r7, r3
   26c6a:	781b      	ldrb	r3, [r3, #0]
   26c6c:	2b00      	cmp	r3, #0
   26c6e:	d0e2      	beq.n	26c36 <_rtc_calendar_set_config+0x82>
	}
}
   26c70:	46c0      	nop			; (mov r8, r8)
   26c72:	46bd      	mov	sp, r7
   26c74:	b004      	add	sp, #16
   26c76:	bd80      	pop	{r7, pc}
   26c78:	00026d9d 	.word	0x00026d9d

00026c7c <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   26c7c:	b580      	push	{r7, lr}
   26c7e:	b086      	sub	sp, #24
   26c80:	af00      	add	r7, sp, #0
   26c82:	60f8      	str	r0, [r7, #12]
   26c84:	60b9      	str	r1, [r7, #8]
   26c86:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   26c88:	68fb      	ldr	r3, [r7, #12]
   26c8a:	68ba      	ldr	r2, [r7, #8]
   26c8c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   26c8e:	2120      	movs	r1, #32
   26c90:	2000      	movs	r0, #0
   26c92:	4b18      	ldr	r3, [pc, #96]	; (26cf4 <rtc_calendar_init+0x78>)
   26c94:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   26c96:	2314      	movs	r3, #20
   26c98:	18fb      	adds	r3, r7, r3
   26c9a:	0018      	movs	r0, r3
   26c9c:	4b16      	ldr	r3, [pc, #88]	; (26cf8 <rtc_calendar_init+0x7c>)
   26c9e:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   26ca0:	2314      	movs	r3, #20
   26ca2:	18fb      	adds	r3, r7, r3
   26ca4:	2202      	movs	r2, #2
   26ca6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   26ca8:	2314      	movs	r3, #20
   26caa:	18fb      	adds	r3, r7, r3
   26cac:	0019      	movs	r1, r3
   26cae:	2004      	movs	r0, #4
   26cb0:	4b12      	ldr	r3, [pc, #72]	; (26cfc <rtc_calendar_init+0x80>)
   26cb2:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   26cb4:	2004      	movs	r0, #4
   26cb6:	4b12      	ldr	r3, [pc, #72]	; (26d00 <rtc_calendar_init+0x84>)
   26cb8:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   26cba:	68fb      	ldr	r3, [r7, #12]
   26cbc:	0018      	movs	r0, r3
   26cbe:	4b11      	ldr	r3, [pc, #68]	; (26d04 <rtc_calendar_init+0x88>)
   26cc0:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   26cc2:	687b      	ldr	r3, [r7, #4]
   26cc4:	791a      	ldrb	r2, [r3, #4]
   26cc6:	68fb      	ldr	r3, [r7, #12]
   26cc8:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   26cca:	687b      	ldr	r3, [r7, #4]
   26ccc:	78da      	ldrb	r2, [r3, #3]
   26cce:	68fb      	ldr	r3, [r7, #12]
   26cd0:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   26cd2:	687b      	ldr	r3, [r7, #4]
   26cd4:	88da      	ldrh	r2, [r3, #6]
   26cd6:	68fb      	ldr	r3, [r7, #12]
   26cd8:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   26cda:	4b0b      	ldr	r3, [pc, #44]	; (26d08 <rtc_calendar_init+0x8c>)
   26cdc:	68fa      	ldr	r2, [r7, #12]
   26cde:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   26ce0:	687a      	ldr	r2, [r7, #4]
   26ce2:	68fb      	ldr	r3, [r7, #12]
   26ce4:	0011      	movs	r1, r2
   26ce6:	0018      	movs	r0, r3
   26ce8:	4b08      	ldr	r3, [pc, #32]	; (26d0c <rtc_calendar_init+0x90>)
   26cea:	4798      	blx	r3
}
   26cec:	46c0      	nop			; (mov r8, r8)
   26cee:	46bd      	mov	sp, r7
   26cf0:	b006      	add	sp, #24
   26cf2:	bd80      	pop	{r7, pc}
   26cf4:	000268c9 	.word	0x000268c9
   26cf8:	000268b1 	.word	0x000268b1
   26cfc:	00029ce1 	.word	0x00029ce1
   26d00:	00029d25 	.word	0x00029d25
   26d04:	00026a3d 	.word	0x00026a3d
   26d08:	20005c00 	.word	0x20005c00
   26d0c:	00026bb5 	.word	0x00026bb5

00026d10 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   26d10:	b580      	push	{r7, lr}
   26d12:	b084      	sub	sp, #16
   26d14:	af00      	add	r7, sp, #0
   26d16:	6078      	str	r0, [r7, #4]
   26d18:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26d1a:	687b      	ldr	r3, [r7, #4]
   26d1c:	681b      	ldr	r3, [r3, #0]
   26d1e:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   26d20:	687b      	ldr	r3, [r7, #4]
   26d22:	795b      	ldrb	r3, [r3, #5]
   26d24:	2201      	movs	r2, #1
   26d26:	4053      	eors	r3, r2
   26d28:	b2db      	uxtb	r3, r3
   26d2a:	2b00      	cmp	r3, #0
   26d2c:	d00a      	beq.n	26d44 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   26d2e:	68fb      	ldr	r3, [r7, #12]
   26d30:	4a16      	ldr	r2, [pc, #88]	; (26d8c <rtc_calendar_get_time+0x7c>)
   26d32:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   26d34:	46c0      	nop			; (mov r8, r8)
   26d36:	687b      	ldr	r3, [r7, #4]
   26d38:	0018      	movs	r0, r3
   26d3a:	4b15      	ldr	r3, [pc, #84]	; (26d90 <rtc_calendar_get_time+0x80>)
   26d3c:	4798      	blx	r3
   26d3e:	1e03      	subs	r3, r0, #0
   26d40:	d1f9      	bne.n	26d36 <rtc_calendar_get_time+0x26>
   26d42:	e016      	b.n	26d72 <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   26d44:	68fb      	ldr	r3, [r7, #12]
   26d46:	885b      	ldrh	r3, [r3, #2]
   26d48:	b29b      	uxth	r3, r3
   26d4a:	001a      	movs	r2, r3
   26d4c:	2380      	movs	r3, #128	; 0x80
   26d4e:	01db      	lsls	r3, r3, #7
   26d50:	4013      	ands	r3, r2
   26d52:	d10e      	bne.n	26d72 <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   26d54:	68fb      	ldr	r3, [r7, #12]
   26d56:	885b      	ldrh	r3, [r3, #2]
   26d58:	b29b      	uxth	r3, r3
   26d5a:	4a0e      	ldr	r2, [pc, #56]	; (26d94 <rtc_calendar_get_time+0x84>)
   26d5c:	4313      	orrs	r3, r2
   26d5e:	b29a      	uxth	r2, r3
   26d60:	68fb      	ldr	r3, [r7, #12]
   26d62:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   26d64:	46c0      	nop			; (mov r8, r8)
   26d66:	687b      	ldr	r3, [r7, #4]
   26d68:	0018      	movs	r0, r3
   26d6a:	4b09      	ldr	r3, [pc, #36]	; (26d90 <rtc_calendar_get_time+0x80>)
   26d6c:	4798      	blx	r3
   26d6e:	1e03      	subs	r3, r0, #0
   26d70:	d1f9      	bne.n	26d66 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   26d72:	68fb      	ldr	r3, [r7, #12]
   26d74:	691b      	ldr	r3, [r3, #16]
   26d76:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   26d78:	683a      	ldr	r2, [r7, #0]
   26d7a:	68b9      	ldr	r1, [r7, #8]
   26d7c:	687b      	ldr	r3, [r7, #4]
   26d7e:	0018      	movs	r0, r3
   26d80:	4b05      	ldr	r3, [pc, #20]	; (26d98 <rtc_calendar_get_time+0x88>)
   26d82:	4798      	blx	r3
}
   26d84:	46c0      	nop			; (mov r8, r8)
   26d86:	46bd      	mov	sp, r7
   26d88:	b004      	add	sp, #16
   26d8a:	bd80      	pop	{r7, pc}
   26d8c:	ffff8000 	.word	0xffff8000
   26d90:	00026981 	.word	0x00026981
   26d94:	ffffc000 	.word	0xffffc000
   26d98:	00026b15 	.word	0x00026b15

00026d9c <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   26d9c:	b580      	push	{r7, lr}
   26d9e:	b086      	sub	sp, #24
   26da0:	af00      	add	r7, sp, #0
   26da2:	60f8      	str	r0, [r7, #12]
   26da4:	60b9      	str	r1, [r7, #8]
   26da6:	1dfb      	adds	r3, r7, #7
   26da8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26daa:	68fb      	ldr	r3, [r7, #12]
   26dac:	681b      	ldr	r3, [r3, #0]
   26dae:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   26db0:	1dfb      	adds	r3, r7, #7
   26db2:	781b      	ldrb	r3, [r3, #0]
   26db4:	2b01      	cmp	r3, #1
   26db6:	d901      	bls.n	26dbc <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   26db8:	2317      	movs	r3, #23
   26dba:	e021      	b.n	26e00 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   26dbc:	68ba      	ldr	r2, [r7, #8]
   26dbe:	68fb      	ldr	r3, [r7, #12]
   26dc0:	0011      	movs	r1, r2
   26dc2:	0018      	movs	r0, r3
   26dc4:	4b10      	ldr	r3, [pc, #64]	; (26e08 <rtc_calendar_set_alarm+0x6c>)
   26dc6:	4798      	blx	r3
   26dc8:	0003      	movs	r3, r0
   26dca:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   26dcc:	46c0      	nop			; (mov r8, r8)
   26dce:	68fb      	ldr	r3, [r7, #12]
   26dd0:	0018      	movs	r0, r3
   26dd2:	4b0e      	ldr	r3, [pc, #56]	; (26e0c <rtc_calendar_set_alarm+0x70>)
   26dd4:	4798      	blx	r3
   26dd6:	1e03      	subs	r3, r0, #0
   26dd8:	d1f9      	bne.n	26dce <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   26dda:	1dfb      	adds	r3, r7, #7
   26ddc:	781a      	ldrb	r2, [r3, #0]
   26dde:	697b      	ldr	r3, [r7, #20]
   26de0:	3203      	adds	r2, #3
   26de2:	00d2      	lsls	r2, r2, #3
   26de4:	6939      	ldr	r1, [r7, #16]
   26de6:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   26de8:	1dfb      	adds	r3, r7, #7
   26dea:	781b      	ldrb	r3, [r3, #0]
   26dec:	68ba      	ldr	r2, [r7, #8]
   26dee:	7a11      	ldrb	r1, [r2, #8]
   26df0:	697a      	ldr	r2, [r7, #20]
   26df2:	3303      	adds	r3, #3
   26df4:	00db      	lsls	r3, r3, #3
   26df6:	18d3      	adds	r3, r2, r3
   26df8:	3304      	adds	r3, #4
   26dfa:	1c0a      	adds	r2, r1, #0
   26dfc:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   26dfe:	2300      	movs	r3, #0
}
   26e00:	0018      	movs	r0, r3
   26e02:	46bd      	mov	sp, r7
   26e04:	b006      	add	sp, #24
   26e06:	bd80      	pop	{r7, pc}
   26e08:	00026a8d 	.word	0x00026a8d
   26e0c:	00026981 	.word	0x00026981

00026e10 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   26e10:	b580      	push	{r7, lr}
   26e12:	b086      	sub	sp, #24
   26e14:	af00      	add	r7, sp, #0
   26e16:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   26e18:	4b28      	ldr	r3, [pc, #160]	; (26ebc <_rtc_interrupt_handler+0xac>)
   26e1a:	687a      	ldr	r2, [r7, #4]
   26e1c:	0092      	lsls	r2, r2, #2
   26e1e:	58d3      	ldr	r3, [r2, r3]
   26e20:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   26e22:	697b      	ldr	r3, [r7, #20]
   26e24:	681b      	ldr	r3, [r3, #0]
   26e26:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   26e28:	230e      	movs	r3, #14
   26e2a:	18fb      	adds	r3, r7, r3
   26e2c:	697a      	ldr	r2, [r7, #20]
   26e2e:	8a52      	ldrh	r2, [r2, #18]
   26e30:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   26e32:	697b      	ldr	r3, [r7, #20]
   26e34:	8a1b      	ldrh	r3, [r3, #16]
   26e36:	b29a      	uxth	r2, r3
   26e38:	230e      	movs	r3, #14
   26e3a:	18fb      	adds	r3, r7, r3
   26e3c:	210e      	movs	r1, #14
   26e3e:	1879      	adds	r1, r7, r1
   26e40:	8809      	ldrh	r1, [r1, #0]
   26e42:	400a      	ands	r2, r1
   26e44:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   26e46:	693b      	ldr	r3, [r7, #16]
   26e48:	7a1b      	ldrb	r3, [r3, #8]
   26e4a:	b2da      	uxtb	r2, r3
   26e4c:	230c      	movs	r3, #12
   26e4e:	18fb      	adds	r3, r7, r3
   26e50:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   26e52:	693b      	ldr	r3, [r7, #16]
   26e54:	79db      	ldrb	r3, [r3, #7]
   26e56:	b2db      	uxtb	r3, r3
   26e58:	b29a      	uxth	r2, r3
   26e5a:	230c      	movs	r3, #12
   26e5c:	18fb      	adds	r3, r7, r3
   26e5e:	210c      	movs	r1, #12
   26e60:	1879      	adds	r1, r7, r1
   26e62:	8809      	ldrh	r1, [r1, #0]
   26e64:	400a      	ands	r2, r1
   26e66:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   26e68:	230c      	movs	r3, #12
   26e6a:	18fb      	adds	r3, r7, r3
   26e6c:	881b      	ldrh	r3, [r3, #0]
   26e6e:	2280      	movs	r2, #128	; 0x80
   26e70:	4013      	ands	r3, r2
   26e72:	d00c      	beq.n	26e8e <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   26e74:	230e      	movs	r3, #14
   26e76:	18fb      	adds	r3, r7, r3
   26e78:	881b      	ldrh	r3, [r3, #0]
   26e7a:	2202      	movs	r2, #2
   26e7c:	4013      	ands	r3, r2
   26e7e:	d002      	beq.n	26e86 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   26e80:	697b      	ldr	r3, [r7, #20]
   26e82:	68db      	ldr	r3, [r3, #12]
   26e84:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   26e86:	693b      	ldr	r3, [r7, #16]
   26e88:	2280      	movs	r2, #128	; 0x80
   26e8a:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   26e8c:	e011      	b.n	26eb2 <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   26e8e:	230c      	movs	r3, #12
   26e90:	18fb      	adds	r3, r7, r3
   26e92:	881b      	ldrh	r3, [r3, #0]
   26e94:	2201      	movs	r2, #1
   26e96:	4013      	ands	r3, r2
   26e98:	d00b      	beq.n	26eb2 <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   26e9a:	230e      	movs	r3, #14
   26e9c:	18fb      	adds	r3, r7, r3
   26e9e:	881b      	ldrh	r3, [r3, #0]
   26ea0:	2201      	movs	r2, #1
   26ea2:	4013      	ands	r3, r2
   26ea4:	d002      	beq.n	26eac <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   26ea6:	697b      	ldr	r3, [r7, #20]
   26ea8:	689b      	ldr	r3, [r3, #8]
   26eaa:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   26eac:	693b      	ldr	r3, [r7, #16]
   26eae:	2201      	movs	r2, #1
   26eb0:	721a      	strb	r2, [r3, #8]
}
   26eb2:	46c0      	nop			; (mov r8, r8)
   26eb4:	46bd      	mov	sp, r7
   26eb6:	b006      	add	sp, #24
   26eb8:	bd80      	pop	{r7, pc}
   26eba:	46c0      	nop			; (mov r8, r8)
   26ebc:	20005c00 	.word	0x20005c00

00026ec0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   26ec0:	b580      	push	{r7, lr}
   26ec2:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   26ec4:	2000      	movs	r0, #0
   26ec6:	4b02      	ldr	r3, [pc, #8]	; (26ed0 <RTC_Handler+0x10>)
   26ec8:	4798      	blx	r3
}
   26eca:	46c0      	nop			; (mov r8, r8)
   26ecc:	46bd      	mov	sp, r7
   26ece:	bd80      	pop	{r7, pc}
   26ed0:	00026e11 	.word	0x00026e11

00026ed4 <system_gclk_chan_get_config_defaults>:
{
   26ed4:	b580      	push	{r7, lr}
   26ed6:	b082      	sub	sp, #8
   26ed8:	af00      	add	r7, sp, #0
   26eda:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26edc:	687b      	ldr	r3, [r7, #4]
   26ede:	2200      	movs	r2, #0
   26ee0:	701a      	strb	r2, [r3, #0]
}
   26ee2:	46c0      	nop			; (mov r8, r8)
   26ee4:	46bd      	mov	sp, r7
   26ee6:	b002      	add	sp, #8
   26ee8:	bd80      	pop	{r7, pc}

00026eea <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   26eea:	b5f0      	push	{r4, r5, r6, r7, lr}
   26eec:	b08d      	sub	sp, #52	; 0x34
   26eee:	af00      	add	r7, sp, #0
   26ef0:	60b8      	str	r0, [r7, #8]
   26ef2:	60f9      	str	r1, [r7, #12]
   26ef4:	603a      	str	r2, [r7, #0]
   26ef6:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   26ef8:	2300      	movs	r3, #0
   26efa:	2400      	movs	r4, #0
   26efc:	623b      	str	r3, [r7, #32]
   26efe:	627c      	str	r4, [r7, #36]	; 0x24
   26f00:	2300      	movs	r3, #0
   26f02:	2400      	movs	r4, #0
   26f04:	61bb      	str	r3, [r7, #24]
   26f06:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   26f08:	233f      	movs	r3, #63	; 0x3f
   26f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   26f0c:	e053      	b.n	26fb6 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   26f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26f10:	3b20      	subs	r3, #32
   26f12:	2b00      	cmp	r3, #0
   26f14:	db04      	blt.n	26f20 <long_division+0x36>
   26f16:	2201      	movs	r2, #1
   26f18:	409a      	lsls	r2, r3
   26f1a:	0013      	movs	r3, r2
   26f1c:	617b      	str	r3, [r7, #20]
   26f1e:	e00b      	b.n	26f38 <long_division+0x4e>
   26f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26f22:	2220      	movs	r2, #32
   26f24:	1ad3      	subs	r3, r2, r3
   26f26:	2201      	movs	r2, #1
   26f28:	40da      	lsrs	r2, r3
   26f2a:	0013      	movs	r3, r2
   26f2c:	2100      	movs	r1, #0
   26f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   26f30:	4091      	lsls	r1, r2
   26f32:	000a      	movs	r2, r1
   26f34:	4313      	orrs	r3, r2
   26f36:	617b      	str	r3, [r7, #20]
   26f38:	2201      	movs	r2, #1
   26f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26f3c:	409a      	lsls	r2, r3
   26f3e:	0013      	movs	r3, r2
   26f40:	613b      	str	r3, [r7, #16]

		r = r << 1;
   26f42:	69bb      	ldr	r3, [r7, #24]
   26f44:	69fc      	ldr	r4, [r7, #28]
   26f46:	18db      	adds	r3, r3, r3
   26f48:	4164      	adcs	r4, r4
   26f4a:	61bb      	str	r3, [r7, #24]
   26f4c:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   26f4e:	68bb      	ldr	r3, [r7, #8]
   26f50:	693a      	ldr	r2, [r7, #16]
   26f52:	401a      	ands	r2, r3
   26f54:	0015      	movs	r5, r2
   26f56:	68fb      	ldr	r3, [r7, #12]
   26f58:	697a      	ldr	r2, [r7, #20]
   26f5a:	401a      	ands	r2, r3
   26f5c:	0016      	movs	r6, r2
   26f5e:	002b      	movs	r3, r5
   26f60:	4333      	orrs	r3, r6
   26f62:	d007      	beq.n	26f74 <long_division+0x8a>
			r |= 0x01;
   26f64:	69bb      	ldr	r3, [r7, #24]
   26f66:	2201      	movs	r2, #1
   26f68:	4313      	orrs	r3, r2
   26f6a:	61bb      	str	r3, [r7, #24]
   26f6c:	69fb      	ldr	r3, [r7, #28]
   26f6e:	2200      	movs	r2, #0
   26f70:	4313      	orrs	r3, r2
   26f72:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   26f74:	687a      	ldr	r2, [r7, #4]
   26f76:	69fb      	ldr	r3, [r7, #28]
   26f78:	429a      	cmp	r2, r3
   26f7a:	d819      	bhi.n	26fb0 <long_division+0xc6>
   26f7c:	687a      	ldr	r2, [r7, #4]
   26f7e:	69fb      	ldr	r3, [r7, #28]
   26f80:	429a      	cmp	r2, r3
   26f82:	d103      	bne.n	26f8c <long_division+0xa2>
   26f84:	683a      	ldr	r2, [r7, #0]
   26f86:	69bb      	ldr	r3, [r7, #24]
   26f88:	429a      	cmp	r2, r3
   26f8a:	d811      	bhi.n	26fb0 <long_division+0xc6>
			r = r - d;
   26f8c:	69b9      	ldr	r1, [r7, #24]
   26f8e:	69fa      	ldr	r2, [r7, #28]
   26f90:	683b      	ldr	r3, [r7, #0]
   26f92:	687c      	ldr	r4, [r7, #4]
   26f94:	1ac9      	subs	r1, r1, r3
   26f96:	41a2      	sbcs	r2, r4
   26f98:	000b      	movs	r3, r1
   26f9a:	0014      	movs	r4, r2
   26f9c:	61bb      	str	r3, [r7, #24]
   26f9e:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   26fa0:	6a3a      	ldr	r2, [r7, #32]
   26fa2:	693b      	ldr	r3, [r7, #16]
   26fa4:	4313      	orrs	r3, r2
   26fa6:	623b      	str	r3, [r7, #32]
   26fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   26faa:	697b      	ldr	r3, [r7, #20]
   26fac:	4313      	orrs	r3, r2
   26fae:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   26fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26fb2:	3b01      	subs	r3, #1
   26fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   26fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26fb8:	2b00      	cmp	r3, #0
   26fba:	daa8      	bge.n	26f0e <long_division+0x24>
		}
	}

	return q;
   26fbc:	6a3b      	ldr	r3, [r7, #32]
   26fbe:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   26fc0:	0018      	movs	r0, r3
   26fc2:	0021      	movs	r1, r4
   26fc4:	46bd      	mov	sp, r7
   26fc6:	b00d      	add	sp, #52	; 0x34
   26fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026fca <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   26fca:	b580      	push	{r7, lr}
   26fcc:	b086      	sub	sp, #24
   26fce:	af00      	add	r7, sp, #0
   26fd0:	60f8      	str	r0, [r7, #12]
   26fd2:	60b9      	str	r1, [r7, #8]
   26fd4:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   26fd6:	2316      	movs	r3, #22
   26fd8:	18fb      	adds	r3, r7, r3
   26fda:	2200      	movs	r2, #0
   26fdc:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   26fde:	68bb      	ldr	r3, [r7, #8]
   26fe0:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   26fe2:	68bb      	ldr	r3, [r7, #8]
   26fe4:	085a      	lsrs	r2, r3, #1
   26fe6:	68fb      	ldr	r3, [r7, #12]
   26fe8:	429a      	cmp	r2, r3
   26fea:	d201      	bcs.n	26ff0 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26fec:	2340      	movs	r3, #64	; 0x40
   26fee:	e026      	b.n	2703e <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   26ff0:	68bb      	ldr	r3, [r7, #8]
   26ff2:	085b      	lsrs	r3, r3, #1
   26ff4:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   26ff6:	e00a      	b.n	2700e <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   26ff8:	693a      	ldr	r2, [r7, #16]
   26ffa:	68fb      	ldr	r3, [r7, #12]
   26ffc:	1ad3      	subs	r3, r2, r3
   26ffe:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   27000:	2316      	movs	r3, #22
   27002:	18fb      	adds	r3, r7, r3
   27004:	881a      	ldrh	r2, [r3, #0]
   27006:	2316      	movs	r3, #22
   27008:	18fb      	adds	r3, r7, r3
   2700a:	3201      	adds	r2, #1
   2700c:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   2700e:	693a      	ldr	r2, [r7, #16]
   27010:	68fb      	ldr	r3, [r7, #12]
   27012:	429a      	cmp	r2, r3
   27014:	d2f0      	bcs.n	26ff8 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   27016:	2316      	movs	r3, #22
   27018:	18fb      	adds	r3, r7, r3
   2701a:	2216      	movs	r2, #22
   2701c:	18ba      	adds	r2, r7, r2
   2701e:	8812      	ldrh	r2, [r2, #0]
   27020:	3a01      	subs	r2, #1
   27022:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   27024:	2316      	movs	r3, #22
   27026:	18fb      	adds	r3, r7, r3
   27028:	881b      	ldrh	r3, [r3, #0]
   2702a:	2bff      	cmp	r3, #255	; 0xff
   2702c:	d901      	bls.n	27032 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   2702e:	2340      	movs	r3, #64	; 0x40
   27030:	e005      	b.n	2703e <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   27032:	687b      	ldr	r3, [r7, #4]
   27034:	2216      	movs	r2, #22
   27036:	18ba      	adds	r2, r7, r2
   27038:	8812      	ldrh	r2, [r2, #0]
   2703a:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   2703c:	2300      	movs	r3, #0
	}
}
   2703e:	0018      	movs	r0, r3
   27040:	46bd      	mov	sp, r7
   27042:	b006      	add	sp, #24
   27044:	bd80      	pop	{r7, pc}
	...

00027048 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   27048:	b5f0      	push	{r4, r5, r6, r7, lr}
   2704a:	b0a1      	sub	sp, #132	; 0x84
   2704c:	af00      	add	r7, sp, #0
   2704e:	64f8      	str	r0, [r7, #76]	; 0x4c
   27050:	64b9      	str	r1, [r7, #72]	; 0x48
   27052:	647a      	str	r2, [r7, #68]	; 0x44
   27054:	2243      	movs	r2, #67	; 0x43
   27056:	18ba      	adds	r2, r7, r2
   27058:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   2705a:	2300      	movs	r3, #0
   2705c:	2400      	movs	r4, #0
   2705e:	673b      	str	r3, [r7, #112]	; 0x70
   27060:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   27062:	2300      	movs	r3, #0
   27064:	2400      	movs	r4, #0
   27066:	66bb      	str	r3, [r7, #104]	; 0x68
   27068:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   2706a:	2300      	movs	r3, #0
   2706c:	2400      	movs	r4, #0
   2706e:	67bb      	str	r3, [r7, #120]	; 0x78
   27070:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   27072:	2300      	movs	r3, #0
   27074:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   27076:	2358      	movs	r3, #88	; 0x58
   27078:	2240      	movs	r2, #64	; 0x40
   2707a:	4694      	mov	ip, r2
   2707c:	44bc      	add	ip, r7
   2707e:	4463      	add	r3, ip
   27080:	781a      	ldrb	r2, [r3, #0]
   27082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27084:	435a      	muls	r2, r3
   27086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27088:	429a      	cmp	r2, r3
   2708a:	d901      	bls.n	27090 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   2708c:	2340      	movs	r3, #64	; 0x40
   2708e:	e0b3      	b.n	271f8 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   27090:	2343      	movs	r3, #67	; 0x43
   27092:	18fb      	adds	r3, r7, r3
   27094:	781b      	ldrb	r3, [r3, #0]
   27096:	2b00      	cmp	r3, #0
   27098:	d13d      	bne.n	27116 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   2709a:	2358      	movs	r3, #88	; 0x58
   2709c:	2240      	movs	r2, #64	; 0x40
   2709e:	4694      	mov	ip, r2
   270a0:	44bc      	add	ip, r7
   270a2:	4463      	add	r3, ip
   270a4:	781b      	ldrb	r3, [r3, #0]
   270a6:	b2db      	uxtb	r3, r3
   270a8:	613b      	str	r3, [r7, #16]
   270aa:	2300      	movs	r3, #0
   270ac:	617b      	str	r3, [r7, #20]
   270ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   270b0:	60bb      	str	r3, [r7, #8]
   270b2:	2300      	movs	r3, #0
   270b4:	60fb      	str	r3, [r7, #12]
   270b6:	4c52      	ldr	r4, [pc, #328]	; (27200 <_sercom_get_async_baud_val+0x1b8>)
   270b8:	68ba      	ldr	r2, [r7, #8]
   270ba:	68fb      	ldr	r3, [r7, #12]
   270bc:	6938      	ldr	r0, [r7, #16]
   270be:	6979      	ldr	r1, [r7, #20]
   270c0:	47a0      	blx	r4
   270c2:	0003      	movs	r3, r0
   270c4:	000c      	movs	r4, r1
   270c6:	001b      	movs	r3, r3
   270c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   270ca:	2300      	movs	r3, #0
   270cc:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   270ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   270d0:	603b      	str	r3, [r7, #0]
   270d2:	2300      	movs	r3, #0
   270d4:	607b      	str	r3, [r7, #4]
   270d6:	6db8      	ldr	r0, [r7, #88]	; 0x58
   270d8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   270da:	683a      	ldr	r2, [r7, #0]
   270dc:	687b      	ldr	r3, [r7, #4]
   270de:	4c49      	ldr	r4, [pc, #292]	; (27204 <_sercom_get_async_baud_val+0x1bc>)
   270e0:	47a0      	blx	r4
   270e2:	0003      	movs	r3, r0
   270e4:	000c      	movs	r4, r1
   270e6:	673b      	str	r3, [r7, #112]	; 0x70
   270e8:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   270ea:	2100      	movs	r1, #0
   270ec:	2201      	movs	r2, #1
   270ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   270f0:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   270f2:	1ac9      	subs	r1, r1, r3
   270f4:	41a2      	sbcs	r2, r4
   270f6:	000b      	movs	r3, r1
   270f8:	0014      	movs	r4, r2
   270fa:	66bb      	str	r3, [r7, #104]	; 0x68
   270fc:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   270fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   27100:	0c1b      	lsrs	r3, r3, #16
   27102:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   27104:	0416      	lsls	r6, r2, #16
   27106:	431e      	orrs	r6, r3
   27108:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2710a:	041d      	lsls	r5, r3, #16
   2710c:	0033      	movs	r3, r6
   2710e:	67bb      	str	r3, [r7, #120]	; 0x78
   27110:	2300      	movs	r3, #0
   27112:	67fb      	str	r3, [r7, #124]	; 0x7c
   27114:	e06a      	b.n	271ec <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   27116:	2343      	movs	r3, #67	; 0x43
   27118:	18fb      	adds	r3, r7, r3
   2711a:	781b      	ldrb	r3, [r3, #0]
   2711c:	2b01      	cmp	r3, #1
   2711e:	d165      	bne.n	271ec <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   27120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27122:	633b      	str	r3, [r7, #48]	; 0x30
   27124:	2300      	movs	r3, #0
   27126:	637b      	str	r3, [r7, #52]	; 0x34
   27128:	2358      	movs	r3, #88	; 0x58
   2712a:	2240      	movs	r2, #64	; 0x40
   2712c:	4694      	mov	ip, r2
   2712e:	44bc      	add	ip, r7
   27130:	4463      	add	r3, ip
   27132:	781b      	ldrb	r3, [r3, #0]
   27134:	b2db      	uxtb	r3, r3
   27136:	62bb      	str	r3, [r7, #40]	; 0x28
   27138:	2300      	movs	r3, #0
   2713a:	62fb      	str	r3, [r7, #44]	; 0x2c
   2713c:	4c30      	ldr	r4, [pc, #192]	; (27200 <_sercom_get_async_baud_val+0x1b8>)
   2713e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   27140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27142:	6b38      	ldr	r0, [r7, #48]	; 0x30
   27144:	6b79      	ldr	r1, [r7, #52]	; 0x34
   27146:	47a0      	blx	r4
   27148:	0003      	movs	r3, r0
   2714a:	000c      	movs	r4, r1
   2714c:	65bb      	str	r3, [r7, #88]	; 0x58
   2714e:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   27150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27152:	623b      	str	r3, [r7, #32]
   27154:	2300      	movs	r3, #0
   27156:	627b      	str	r3, [r7, #36]	; 0x24
   27158:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2715a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   2715c:	001a      	movs	r2, r3
   2715e:	0023      	movs	r3, r4
   27160:	6a38      	ldr	r0, [r7, #32]
   27162:	6a79      	ldr	r1, [r7, #36]	; 0x24
   27164:	4c27      	ldr	r4, [pc, #156]	; (27204 <_sercom_get_async_baud_val+0x1bc>)
   27166:	47a0      	blx	r4
   27168:	0003      	movs	r3, r0
   2716a:	000c      	movs	r4, r1
   2716c:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   2716e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   27170:	2380      	movs	r3, #128	; 0x80
   27172:	019b      	lsls	r3, r3, #6
   27174:	429a      	cmp	r2, r3
   27176:	d901      	bls.n	2717c <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27178:	2340      	movs	r3, #64	; 0x40
   2717a:	e03d      	b.n	271f8 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   2717c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2717e:	61bb      	str	r3, [r7, #24]
   27180:	2300      	movs	r3, #0
   27182:	61fb      	str	r3, [r7, #28]
   27184:	69b9      	ldr	r1, [r7, #24]
   27186:	69fa      	ldr	r2, [r7, #28]
   27188:	000b      	movs	r3, r1
   2718a:	0f5b      	lsrs	r3, r3, #29
   2718c:	0010      	movs	r0, r2
   2718e:	00c0      	lsls	r0, r0, #3
   27190:	63f8      	str	r0, [r7, #60]	; 0x3c
   27192:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   27194:	4318      	orrs	r0, r3
   27196:	63f8      	str	r0, [r7, #60]	; 0x3c
   27198:	000b      	movs	r3, r1
   2719a:	00db      	lsls	r3, r3, #3
   2719c:	63bb      	str	r3, [r7, #56]	; 0x38
   2719e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   271a0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   271a2:	001a      	movs	r2, r3
   271a4:	0023      	movs	r3, r4
   271a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   271a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   271aa:	4c16      	ldr	r4, [pc, #88]	; (27204 <_sercom_get_async_baud_val+0x1bc>)
   271ac:	47a0      	blx	r4
   271ae:	0003      	movs	r3, r0
   271b0:	000c      	movs	r4, r1
   271b2:	65bb      	str	r3, [r7, #88]	; 0x58
   271b4:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   271b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   271b8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   271ba:	b2d9      	uxtb	r1, r3
   271bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   271be:	b2db      	uxtb	r3, r3
   271c0:	00db      	lsls	r3, r3, #3
   271c2:	b2da      	uxtb	r2, r3
   271c4:	2317      	movs	r3, #23
   271c6:	2040      	movs	r0, #64	; 0x40
   271c8:	4684      	mov	ip, r0
   271ca:	44bc      	add	ip, r7
   271cc:	4463      	add	r3, ip
   271ce:	1a8a      	subs	r2, r1, r2
   271d0:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   271d2:	2317      	movs	r3, #23
   271d4:	2240      	movs	r2, #64	; 0x40
   271d6:	4694      	mov	ip, r2
   271d8:	44bc      	add	ip, r7
   271da:	4463      	add	r3, ip
   271dc:	781b      	ldrb	r3, [r3, #0]
   271de:	035b      	lsls	r3, r3, #13
   271e0:	001a      	movs	r2, r3
   271e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   271e4:	4313      	orrs	r3, r2
   271e6:	67bb      	str	r3, [r7, #120]	; 0x78
   271e8:	2300      	movs	r3, #0
   271ea:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   271ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   271ee:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   271f0:	b29a      	uxth	r2, r3
   271f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   271f4:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   271f6:	2300      	movs	r3, #0
}
   271f8:	0018      	movs	r0, r3
   271fa:	46bd      	mov	sp, r7
   271fc:	b021      	add	sp, #132	; 0x84
   271fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27200:	00032af1 	.word	0x00032af1
   27204:	00026eeb 	.word	0x00026eeb

00027208 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   27208:	b580      	push	{r7, lr}
   2720a:	b084      	sub	sp, #16
   2720c:	af00      	add	r7, sp, #0
   2720e:	0002      	movs	r2, r0
   27210:	1dfb      	adds	r3, r7, #7
   27212:	701a      	strb	r2, [r3, #0]
   27214:	1dbb      	adds	r3, r7, #6
   27216:	1c0a      	adds	r2, r1, #0
   27218:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   2721a:	4b1a      	ldr	r3, [pc, #104]	; (27284 <sercom_set_gclk_generator+0x7c>)
   2721c:	781b      	ldrb	r3, [r3, #0]
   2721e:	2201      	movs	r2, #1
   27220:	4053      	eors	r3, r2
   27222:	b2db      	uxtb	r3, r3
   27224:	2b00      	cmp	r3, #0
   27226:	d103      	bne.n	27230 <sercom_set_gclk_generator+0x28>
   27228:	1dbb      	adds	r3, r7, #6
   2722a:	781b      	ldrb	r3, [r3, #0]
   2722c:	2b00      	cmp	r3, #0
   2722e:	d01b      	beq.n	27268 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27230:	230c      	movs	r3, #12
   27232:	18fb      	adds	r3, r7, r3
   27234:	0018      	movs	r0, r3
   27236:	4b14      	ldr	r3, [pc, #80]	; (27288 <sercom_set_gclk_generator+0x80>)
   27238:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   2723a:	230c      	movs	r3, #12
   2723c:	18fb      	adds	r3, r7, r3
   2723e:	1dfa      	adds	r2, r7, #7
   27240:	7812      	ldrb	r2, [r2, #0]
   27242:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   27244:	230c      	movs	r3, #12
   27246:	18fb      	adds	r3, r7, r3
   27248:	0019      	movs	r1, r3
   2724a:	2013      	movs	r0, #19
   2724c:	4b0f      	ldr	r3, [pc, #60]	; (2728c <sercom_set_gclk_generator+0x84>)
   2724e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   27250:	2013      	movs	r0, #19
   27252:	4b0f      	ldr	r3, [pc, #60]	; (27290 <sercom_set_gclk_generator+0x88>)
   27254:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   27256:	4b0b      	ldr	r3, [pc, #44]	; (27284 <sercom_set_gclk_generator+0x7c>)
   27258:	1dfa      	adds	r2, r7, #7
   2725a:	7812      	ldrb	r2, [r2, #0]
   2725c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   2725e:	4b09      	ldr	r3, [pc, #36]	; (27284 <sercom_set_gclk_generator+0x7c>)
   27260:	2201      	movs	r2, #1
   27262:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   27264:	2300      	movs	r3, #0
   27266:	e008      	b.n	2727a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   27268:	4b06      	ldr	r3, [pc, #24]	; (27284 <sercom_set_gclk_generator+0x7c>)
   2726a:	785b      	ldrb	r3, [r3, #1]
   2726c:	1dfa      	adds	r2, r7, #7
   2726e:	7812      	ldrb	r2, [r2, #0]
   27270:	429a      	cmp	r2, r3
   27272:	d101      	bne.n	27278 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   27274:	2300      	movs	r3, #0
   27276:	e000      	b.n	2727a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   27278:	231d      	movs	r3, #29
}
   2727a:	0018      	movs	r0, r3
   2727c:	46bd      	mov	sp, r7
   2727e:	b004      	add	sp, #16
   27280:	bd80      	pop	{r7, pc}
   27282:	46c0      	nop			; (mov r8, r8)
   27284:	200042bc 	.word	0x200042bc
   27288:	00026ed5 	.word	0x00026ed5
   2728c:	00029ce1 	.word	0x00029ce1
   27290:	00029d25 	.word	0x00029d25

00027294 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   27294:	b580      	push	{r7, lr}
   27296:	b082      	sub	sp, #8
   27298:	af00      	add	r7, sp, #0
   2729a:	6078      	str	r0, [r7, #4]
   2729c:	000a      	movs	r2, r1
   2729e:	1cfb      	adds	r3, r7, #3
   272a0:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   272a2:	687b      	ldr	r3, [r7, #4]
   272a4:	4a4d      	ldr	r2, [pc, #308]	; (273dc <_sercom_get_default_pad+0x148>)
   272a6:	4293      	cmp	r3, r2
   272a8:	d03f      	beq.n	2732a <_sercom_get_default_pad+0x96>
   272aa:	4a4c      	ldr	r2, [pc, #304]	; (273dc <_sercom_get_default_pad+0x148>)
   272ac:	4293      	cmp	r3, r2
   272ae:	d806      	bhi.n	272be <_sercom_get_default_pad+0x2a>
   272b0:	4a4b      	ldr	r2, [pc, #300]	; (273e0 <_sercom_get_default_pad+0x14c>)
   272b2:	4293      	cmp	r3, r2
   272b4:	d00f      	beq.n	272d6 <_sercom_get_default_pad+0x42>
   272b6:	4a4b      	ldr	r2, [pc, #300]	; (273e4 <_sercom_get_default_pad+0x150>)
   272b8:	4293      	cmp	r3, r2
   272ba:	d021      	beq.n	27300 <_sercom_get_default_pad+0x6c>
   272bc:	e089      	b.n	273d2 <_sercom_get_default_pad+0x13e>
   272be:	4a4a      	ldr	r2, [pc, #296]	; (273e8 <_sercom_get_default_pad+0x154>)
   272c0:	4293      	cmp	r3, r2
   272c2:	d100      	bne.n	272c6 <_sercom_get_default_pad+0x32>
   272c4:	e05b      	b.n	2737e <_sercom_get_default_pad+0xea>
   272c6:	4a49      	ldr	r2, [pc, #292]	; (273ec <_sercom_get_default_pad+0x158>)
   272c8:	4293      	cmp	r3, r2
   272ca:	d100      	bne.n	272ce <_sercom_get_default_pad+0x3a>
   272cc:	e06c      	b.n	273a8 <_sercom_get_default_pad+0x114>
   272ce:	4a48      	ldr	r2, [pc, #288]	; (273f0 <_sercom_get_default_pad+0x15c>)
   272d0:	4293      	cmp	r3, r2
   272d2:	d03f      	beq.n	27354 <_sercom_get_default_pad+0xc0>
   272d4:	e07d      	b.n	273d2 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   272d6:	1cfb      	adds	r3, r7, #3
   272d8:	781b      	ldrb	r3, [r3, #0]
   272da:	2b01      	cmp	r3, #1
   272dc:	d00a      	beq.n	272f4 <_sercom_get_default_pad+0x60>
   272de:	dc02      	bgt.n	272e6 <_sercom_get_default_pad+0x52>
   272e0:	2b00      	cmp	r3, #0
   272e2:	d005      	beq.n	272f0 <_sercom_get_default_pad+0x5c>
   272e4:	e075      	b.n	273d2 <_sercom_get_default_pad+0x13e>
   272e6:	2b02      	cmp	r3, #2
   272e8:	d006      	beq.n	272f8 <_sercom_get_default_pad+0x64>
   272ea:	2b03      	cmp	r3, #3
   272ec:	d006      	beq.n	272fc <_sercom_get_default_pad+0x68>
   272ee:	e070      	b.n	273d2 <_sercom_get_default_pad+0x13e>
   272f0:	4b40      	ldr	r3, [pc, #256]	; (273f4 <_sercom_get_default_pad+0x160>)
   272f2:	e06f      	b.n	273d4 <_sercom_get_default_pad+0x140>
   272f4:	4b40      	ldr	r3, [pc, #256]	; (273f8 <_sercom_get_default_pad+0x164>)
   272f6:	e06d      	b.n	273d4 <_sercom_get_default_pad+0x140>
   272f8:	4b40      	ldr	r3, [pc, #256]	; (273fc <_sercom_get_default_pad+0x168>)
   272fa:	e06b      	b.n	273d4 <_sercom_get_default_pad+0x140>
   272fc:	4b40      	ldr	r3, [pc, #256]	; (27400 <_sercom_get_default_pad+0x16c>)
   272fe:	e069      	b.n	273d4 <_sercom_get_default_pad+0x140>
   27300:	1cfb      	adds	r3, r7, #3
   27302:	781b      	ldrb	r3, [r3, #0]
   27304:	2b01      	cmp	r3, #1
   27306:	d00a      	beq.n	2731e <_sercom_get_default_pad+0x8a>
   27308:	dc02      	bgt.n	27310 <_sercom_get_default_pad+0x7c>
   2730a:	2b00      	cmp	r3, #0
   2730c:	d005      	beq.n	2731a <_sercom_get_default_pad+0x86>
   2730e:	e060      	b.n	273d2 <_sercom_get_default_pad+0x13e>
   27310:	2b02      	cmp	r3, #2
   27312:	d006      	beq.n	27322 <_sercom_get_default_pad+0x8e>
   27314:	2b03      	cmp	r3, #3
   27316:	d006      	beq.n	27326 <_sercom_get_default_pad+0x92>
   27318:	e05b      	b.n	273d2 <_sercom_get_default_pad+0x13e>
   2731a:	2303      	movs	r3, #3
   2731c:	e05a      	b.n	273d4 <_sercom_get_default_pad+0x140>
   2731e:	4b39      	ldr	r3, [pc, #228]	; (27404 <_sercom_get_default_pad+0x170>)
   27320:	e058      	b.n	273d4 <_sercom_get_default_pad+0x140>
   27322:	4b39      	ldr	r3, [pc, #228]	; (27408 <_sercom_get_default_pad+0x174>)
   27324:	e056      	b.n	273d4 <_sercom_get_default_pad+0x140>
   27326:	4b39      	ldr	r3, [pc, #228]	; (2740c <_sercom_get_default_pad+0x178>)
   27328:	e054      	b.n	273d4 <_sercom_get_default_pad+0x140>
   2732a:	1cfb      	adds	r3, r7, #3
   2732c:	781b      	ldrb	r3, [r3, #0]
   2732e:	2b01      	cmp	r3, #1
   27330:	d00a      	beq.n	27348 <_sercom_get_default_pad+0xb4>
   27332:	dc02      	bgt.n	2733a <_sercom_get_default_pad+0xa6>
   27334:	2b00      	cmp	r3, #0
   27336:	d005      	beq.n	27344 <_sercom_get_default_pad+0xb0>
   27338:	e04b      	b.n	273d2 <_sercom_get_default_pad+0x13e>
   2733a:	2b02      	cmp	r3, #2
   2733c:	d006      	beq.n	2734c <_sercom_get_default_pad+0xb8>
   2733e:	2b03      	cmp	r3, #3
   27340:	d006      	beq.n	27350 <_sercom_get_default_pad+0xbc>
   27342:	e046      	b.n	273d2 <_sercom_get_default_pad+0x13e>
   27344:	4b32      	ldr	r3, [pc, #200]	; (27410 <_sercom_get_default_pad+0x17c>)
   27346:	e045      	b.n	273d4 <_sercom_get_default_pad+0x140>
   27348:	4b32      	ldr	r3, [pc, #200]	; (27414 <_sercom_get_default_pad+0x180>)
   2734a:	e043      	b.n	273d4 <_sercom_get_default_pad+0x140>
   2734c:	4b32      	ldr	r3, [pc, #200]	; (27418 <_sercom_get_default_pad+0x184>)
   2734e:	e041      	b.n	273d4 <_sercom_get_default_pad+0x140>
   27350:	4b32      	ldr	r3, [pc, #200]	; (2741c <_sercom_get_default_pad+0x188>)
   27352:	e03f      	b.n	273d4 <_sercom_get_default_pad+0x140>
   27354:	1cfb      	adds	r3, r7, #3
   27356:	781b      	ldrb	r3, [r3, #0]
   27358:	2b01      	cmp	r3, #1
   2735a:	d00a      	beq.n	27372 <_sercom_get_default_pad+0xde>
   2735c:	dc02      	bgt.n	27364 <_sercom_get_default_pad+0xd0>
   2735e:	2b00      	cmp	r3, #0
   27360:	d005      	beq.n	2736e <_sercom_get_default_pad+0xda>
   27362:	e036      	b.n	273d2 <_sercom_get_default_pad+0x13e>
   27364:	2b02      	cmp	r3, #2
   27366:	d006      	beq.n	27376 <_sercom_get_default_pad+0xe2>
   27368:	2b03      	cmp	r3, #3
   2736a:	d006      	beq.n	2737a <_sercom_get_default_pad+0xe6>
   2736c:	e031      	b.n	273d2 <_sercom_get_default_pad+0x13e>
   2736e:	4b2c      	ldr	r3, [pc, #176]	; (27420 <_sercom_get_default_pad+0x18c>)
   27370:	e030      	b.n	273d4 <_sercom_get_default_pad+0x140>
   27372:	4b2c      	ldr	r3, [pc, #176]	; (27424 <_sercom_get_default_pad+0x190>)
   27374:	e02e      	b.n	273d4 <_sercom_get_default_pad+0x140>
   27376:	4b2c      	ldr	r3, [pc, #176]	; (27428 <_sercom_get_default_pad+0x194>)
   27378:	e02c      	b.n	273d4 <_sercom_get_default_pad+0x140>
   2737a:	4b2c      	ldr	r3, [pc, #176]	; (2742c <_sercom_get_default_pad+0x198>)
   2737c:	e02a      	b.n	273d4 <_sercom_get_default_pad+0x140>
   2737e:	1cfb      	adds	r3, r7, #3
   27380:	781b      	ldrb	r3, [r3, #0]
   27382:	2b01      	cmp	r3, #1
   27384:	d00a      	beq.n	2739c <_sercom_get_default_pad+0x108>
   27386:	dc02      	bgt.n	2738e <_sercom_get_default_pad+0xfa>
   27388:	2b00      	cmp	r3, #0
   2738a:	d005      	beq.n	27398 <_sercom_get_default_pad+0x104>
   2738c:	e021      	b.n	273d2 <_sercom_get_default_pad+0x13e>
   2738e:	2b02      	cmp	r3, #2
   27390:	d006      	beq.n	273a0 <_sercom_get_default_pad+0x10c>
   27392:	2b03      	cmp	r3, #3
   27394:	d006      	beq.n	273a4 <_sercom_get_default_pad+0x110>
   27396:	e01c      	b.n	273d2 <_sercom_get_default_pad+0x13e>
   27398:	4b25      	ldr	r3, [pc, #148]	; (27430 <_sercom_get_default_pad+0x19c>)
   2739a:	e01b      	b.n	273d4 <_sercom_get_default_pad+0x140>
   2739c:	4b25      	ldr	r3, [pc, #148]	; (27434 <_sercom_get_default_pad+0x1a0>)
   2739e:	e019      	b.n	273d4 <_sercom_get_default_pad+0x140>
   273a0:	4b25      	ldr	r3, [pc, #148]	; (27438 <_sercom_get_default_pad+0x1a4>)
   273a2:	e017      	b.n	273d4 <_sercom_get_default_pad+0x140>
   273a4:	4b25      	ldr	r3, [pc, #148]	; (2743c <_sercom_get_default_pad+0x1a8>)
   273a6:	e015      	b.n	273d4 <_sercom_get_default_pad+0x140>
   273a8:	1cfb      	adds	r3, r7, #3
   273aa:	781b      	ldrb	r3, [r3, #0]
   273ac:	2b01      	cmp	r3, #1
   273ae:	d00a      	beq.n	273c6 <_sercom_get_default_pad+0x132>
   273b0:	dc02      	bgt.n	273b8 <_sercom_get_default_pad+0x124>
   273b2:	2b00      	cmp	r3, #0
   273b4:	d005      	beq.n	273c2 <_sercom_get_default_pad+0x12e>
   273b6:	e00c      	b.n	273d2 <_sercom_get_default_pad+0x13e>
   273b8:	2b02      	cmp	r3, #2
   273ba:	d006      	beq.n	273ca <_sercom_get_default_pad+0x136>
   273bc:	2b03      	cmp	r3, #3
   273be:	d006      	beq.n	273ce <_sercom_get_default_pad+0x13a>
   273c0:	e007      	b.n	273d2 <_sercom_get_default_pad+0x13e>
   273c2:	4b1f      	ldr	r3, [pc, #124]	; (27440 <_sercom_get_default_pad+0x1ac>)
   273c4:	e006      	b.n	273d4 <_sercom_get_default_pad+0x140>
   273c6:	4b1f      	ldr	r3, [pc, #124]	; (27444 <_sercom_get_default_pad+0x1b0>)
   273c8:	e004      	b.n	273d4 <_sercom_get_default_pad+0x140>
   273ca:	4b1f      	ldr	r3, [pc, #124]	; (27448 <_sercom_get_default_pad+0x1b4>)
   273cc:	e002      	b.n	273d4 <_sercom_get_default_pad+0x140>
   273ce:	4b1f      	ldr	r3, [pc, #124]	; (2744c <_sercom_get_default_pad+0x1b8>)
   273d0:	e000      	b.n	273d4 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   273d2:	2300      	movs	r3, #0
}
   273d4:	0018      	movs	r0, r3
   273d6:	46bd      	mov	sp, r7
   273d8:	b002      	add	sp, #8
   273da:	bd80      	pop	{r7, pc}
   273dc:	42001000 	.word	0x42001000
   273e0:	42000800 	.word	0x42000800
   273e4:	42000c00 	.word	0x42000c00
   273e8:	42001800 	.word	0x42001800
   273ec:	42001c00 	.word	0x42001c00
   273f0:	42001400 	.word	0x42001400
   273f4:	00040003 	.word	0x00040003
   273f8:	00050003 	.word	0x00050003
   273fc:	00060003 	.word	0x00060003
   27400:	00070003 	.word	0x00070003
   27404:	00010003 	.word	0x00010003
   27408:	001e0003 	.word	0x001e0003
   2740c:	001f0003 	.word	0x001f0003
   27410:	00080003 	.word	0x00080003
   27414:	00090003 	.word	0x00090003
   27418:	000a0003 	.word	0x000a0003
   2741c:	000b0003 	.word	0x000b0003
   27420:	00100003 	.word	0x00100003
   27424:	00110003 	.word	0x00110003
   27428:	00120003 	.word	0x00120003
   2742c:	00130003 	.word	0x00130003
   27430:	000c0003 	.word	0x000c0003
   27434:	000d0003 	.word	0x000d0003
   27438:	000e0003 	.word	0x000e0003
   2743c:	000f0003 	.word	0x000f0003
   27440:	00160003 	.word	0x00160003
   27444:	00170003 	.word	0x00170003
   27448:	00180003 	.word	0x00180003
   2744c:	00190003 	.word	0x00190003

00027450 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   27450:	b590      	push	{r4, r7, lr}
   27452:	b08b      	sub	sp, #44	; 0x2c
   27454:	af00      	add	r7, sp, #0
   27456:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   27458:	230c      	movs	r3, #12
   2745a:	18fb      	adds	r3, r7, r3
   2745c:	4a0f      	ldr	r2, [pc, #60]	; (2749c <_sercom_get_sercom_inst_index+0x4c>)
   2745e:	ca13      	ldmia	r2!, {r0, r1, r4}
   27460:	c313      	stmia	r3!, {r0, r1, r4}
   27462:	ca13      	ldmia	r2!, {r0, r1, r4}
   27464:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27466:	2300      	movs	r3, #0
   27468:	627b      	str	r3, [r7, #36]	; 0x24
   2746a:	e00e      	b.n	2748a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   2746c:	230c      	movs	r3, #12
   2746e:	18fb      	adds	r3, r7, r3
   27470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27472:	0092      	lsls	r2, r2, #2
   27474:	58d3      	ldr	r3, [r2, r3]
   27476:	001a      	movs	r2, r3
   27478:	687b      	ldr	r3, [r7, #4]
   2747a:	429a      	cmp	r2, r3
   2747c:	d102      	bne.n	27484 <_sercom_get_sercom_inst_index+0x34>
			return i;
   2747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27480:	b2db      	uxtb	r3, r3
   27482:	e006      	b.n	27492 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27486:	3301      	adds	r3, #1
   27488:	627b      	str	r3, [r7, #36]	; 0x24
   2748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2748c:	2b05      	cmp	r3, #5
   2748e:	d9ed      	bls.n	2746c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   27490:	2300      	movs	r3, #0
}
   27492:	0018      	movs	r0, r3
   27494:	46bd      	mov	sp, r7
   27496:	b00b      	add	sp, #44	; 0x2c
   27498:	bd90      	pop	{r4, r7, pc}
   2749a:	46c0      	nop			; (mov r8, r8)
   2749c:	00039498 	.word	0x00039498

000274a0 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   274a0:	b580      	push	{r7, lr}
   274a2:	b082      	sub	sp, #8
   274a4:	af00      	add	r7, sp, #0
   274a6:	0002      	movs	r2, r0
   274a8:	1dfb      	adds	r3, r7, #7
   274aa:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   274ac:	46c0      	nop			; (mov r8, r8)
   274ae:	46bd      	mov	sp, r7
   274b0:	b002      	add	sp, #8
   274b2:	bd80      	pop	{r7, pc}

000274b4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   274b4:	b580      	push	{r7, lr}
   274b6:	b084      	sub	sp, #16
   274b8:	af00      	add	r7, sp, #0
   274ba:	0002      	movs	r2, r0
   274bc:	6039      	str	r1, [r7, #0]
   274be:	1dfb      	adds	r3, r7, #7
   274c0:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   274c2:	4b13      	ldr	r3, [pc, #76]	; (27510 <_sercom_set_handler+0x5c>)
   274c4:	781b      	ldrb	r3, [r3, #0]
   274c6:	2201      	movs	r2, #1
   274c8:	4053      	eors	r3, r2
   274ca:	b2db      	uxtb	r3, r3
   274cc:	2b00      	cmp	r3, #0
   274ce:	d015      	beq.n	274fc <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   274d0:	2300      	movs	r3, #0
   274d2:	60fb      	str	r3, [r7, #12]
   274d4:	e00c      	b.n	274f0 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   274d6:	4b0f      	ldr	r3, [pc, #60]	; (27514 <_sercom_set_handler+0x60>)
   274d8:	68fa      	ldr	r2, [r7, #12]
   274da:	0092      	lsls	r2, r2, #2
   274dc:	490e      	ldr	r1, [pc, #56]	; (27518 <_sercom_set_handler+0x64>)
   274de:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   274e0:	4b0e      	ldr	r3, [pc, #56]	; (2751c <_sercom_set_handler+0x68>)
   274e2:	68fa      	ldr	r2, [r7, #12]
   274e4:	0092      	lsls	r2, r2, #2
   274e6:	2100      	movs	r1, #0
   274e8:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   274ea:	68fb      	ldr	r3, [r7, #12]
   274ec:	3301      	adds	r3, #1
   274ee:	60fb      	str	r3, [r7, #12]
   274f0:	68fb      	ldr	r3, [r7, #12]
   274f2:	2b05      	cmp	r3, #5
   274f4:	d9ef      	bls.n	274d6 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   274f6:	4b06      	ldr	r3, [pc, #24]	; (27510 <_sercom_set_handler+0x5c>)
   274f8:	2201      	movs	r2, #1
   274fa:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   274fc:	1dfb      	adds	r3, r7, #7
   274fe:	781a      	ldrb	r2, [r3, #0]
   27500:	4b04      	ldr	r3, [pc, #16]	; (27514 <_sercom_set_handler+0x60>)
   27502:	0092      	lsls	r2, r2, #2
   27504:	6839      	ldr	r1, [r7, #0]
   27506:	50d1      	str	r1, [r2, r3]
}
   27508:	46c0      	nop			; (mov r8, r8)
   2750a:	46bd      	mov	sp, r7
   2750c:	b004      	add	sp, #16
   2750e:	bd80      	pop	{r7, pc}
   27510:	200042be 	.word	0x200042be
   27514:	200042c0 	.word	0x200042c0
   27518:	000274a1 	.word	0x000274a1
   2751c:	20005c04 	.word	0x20005c04

00027520 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   27520:	b590      	push	{r4, r7, lr}
   27522:	b085      	sub	sp, #20
   27524:	af00      	add	r7, sp, #0
   27526:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   27528:	2308      	movs	r3, #8
   2752a:	18fb      	adds	r3, r7, r3
   2752c:	4a0b      	ldr	r2, [pc, #44]	; (2755c <_sercom_get_interrupt_vector+0x3c>)
   2752e:	6811      	ldr	r1, [r2, #0]
   27530:	6019      	str	r1, [r3, #0]
   27532:	8892      	ldrh	r2, [r2, #4]
   27534:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   27536:	230f      	movs	r3, #15
   27538:	18fc      	adds	r4, r7, r3
   2753a:	687b      	ldr	r3, [r7, #4]
   2753c:	0018      	movs	r0, r3
   2753e:	4b08      	ldr	r3, [pc, #32]	; (27560 <_sercom_get_interrupt_vector+0x40>)
   27540:	4798      	blx	r3
   27542:	0003      	movs	r3, r0
   27544:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   27546:	230f      	movs	r3, #15
   27548:	18fb      	adds	r3, r7, r3
   2754a:	781b      	ldrb	r3, [r3, #0]
   2754c:	2208      	movs	r2, #8
   2754e:	18ba      	adds	r2, r7, r2
   27550:	5cd3      	ldrb	r3, [r2, r3]
   27552:	b25b      	sxtb	r3, r3
}
   27554:	0018      	movs	r0, r3
   27556:	46bd      	mov	sp, r7
   27558:	b005      	add	sp, #20
   2755a:	bd90      	pop	{r4, r7, pc}
   2755c:	000394b0 	.word	0x000394b0
   27560:	00027451 	.word	0x00027451

00027564 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   27564:	b580      	push	{r7, lr}
   27566:	af00      	add	r7, sp, #0
   27568:	4b03      	ldr	r3, [pc, #12]	; (27578 <SERCOM0_Handler+0x14>)
   2756a:	681b      	ldr	r3, [r3, #0]
   2756c:	2000      	movs	r0, #0
   2756e:	4798      	blx	r3
   27570:	46c0      	nop			; (mov r8, r8)
   27572:	46bd      	mov	sp, r7
   27574:	bd80      	pop	{r7, pc}
   27576:	46c0      	nop			; (mov r8, r8)
   27578:	200042c0 	.word	0x200042c0

0002757c <SERCOM1_Handler>:
   2757c:	b580      	push	{r7, lr}
   2757e:	af00      	add	r7, sp, #0
   27580:	4b03      	ldr	r3, [pc, #12]	; (27590 <SERCOM1_Handler+0x14>)
   27582:	685b      	ldr	r3, [r3, #4]
   27584:	2001      	movs	r0, #1
   27586:	4798      	blx	r3
   27588:	46c0      	nop			; (mov r8, r8)
   2758a:	46bd      	mov	sp, r7
   2758c:	bd80      	pop	{r7, pc}
   2758e:	46c0      	nop			; (mov r8, r8)
   27590:	200042c0 	.word	0x200042c0

00027594 <SERCOM2_Handler>:
   27594:	b580      	push	{r7, lr}
   27596:	af00      	add	r7, sp, #0
   27598:	4b03      	ldr	r3, [pc, #12]	; (275a8 <SERCOM2_Handler+0x14>)
   2759a:	689b      	ldr	r3, [r3, #8]
   2759c:	2002      	movs	r0, #2
   2759e:	4798      	blx	r3
   275a0:	46c0      	nop			; (mov r8, r8)
   275a2:	46bd      	mov	sp, r7
   275a4:	bd80      	pop	{r7, pc}
   275a6:	46c0      	nop			; (mov r8, r8)
   275a8:	200042c0 	.word	0x200042c0

000275ac <SERCOM3_Handler>:
   275ac:	b580      	push	{r7, lr}
   275ae:	af00      	add	r7, sp, #0
   275b0:	4b03      	ldr	r3, [pc, #12]	; (275c0 <SERCOM3_Handler+0x14>)
   275b2:	68db      	ldr	r3, [r3, #12]
   275b4:	2003      	movs	r0, #3
   275b6:	4798      	blx	r3
   275b8:	46c0      	nop			; (mov r8, r8)
   275ba:	46bd      	mov	sp, r7
   275bc:	bd80      	pop	{r7, pc}
   275be:	46c0      	nop			; (mov r8, r8)
   275c0:	200042c0 	.word	0x200042c0

000275c4 <SERCOM4_Handler>:
   275c4:	b580      	push	{r7, lr}
   275c6:	af00      	add	r7, sp, #0
   275c8:	4b03      	ldr	r3, [pc, #12]	; (275d8 <SERCOM4_Handler+0x14>)
   275ca:	691b      	ldr	r3, [r3, #16]
   275cc:	2004      	movs	r0, #4
   275ce:	4798      	blx	r3
   275d0:	46c0      	nop			; (mov r8, r8)
   275d2:	46bd      	mov	sp, r7
   275d4:	bd80      	pop	{r7, pc}
   275d6:	46c0      	nop			; (mov r8, r8)
   275d8:	200042c0 	.word	0x200042c0

000275dc <SERCOM5_Handler>:
   275dc:	b580      	push	{r7, lr}
   275de:	af00      	add	r7, sp, #0
   275e0:	4b03      	ldr	r3, [pc, #12]	; (275f0 <SERCOM5_Handler+0x14>)
   275e2:	695b      	ldr	r3, [r3, #20]
   275e4:	2005      	movs	r0, #5
   275e6:	4798      	blx	r3
   275e8:	46c0      	nop			; (mov r8, r8)
   275ea:	46bd      	mov	sp, r7
   275ec:	bd80      	pop	{r7, pc}
   275ee:	46c0      	nop			; (mov r8, r8)
   275f0:	200042c0 	.word	0x200042c0

000275f4 <system_pinmux_get_config_defaults>:
{
   275f4:	b580      	push	{r7, lr}
   275f6:	b082      	sub	sp, #8
   275f8:	af00      	add	r7, sp, #0
   275fa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   275fc:	687b      	ldr	r3, [r7, #4]
   275fe:	2280      	movs	r2, #128	; 0x80
   27600:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27602:	687b      	ldr	r3, [r7, #4]
   27604:	2200      	movs	r2, #0
   27606:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   27608:	687b      	ldr	r3, [r7, #4]
   2760a:	2201      	movs	r2, #1
   2760c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2760e:	687b      	ldr	r3, [r7, #4]
   27610:	2200      	movs	r2, #0
   27612:	70da      	strb	r2, [r3, #3]
}
   27614:	46c0      	nop			; (mov r8, r8)
   27616:	46bd      	mov	sp, r7
   27618:	b002      	add	sp, #8
   2761a:	bd80      	pop	{r7, pc}

0002761c <system_pinmux_get_group_from_gpio_pin>:
{
   2761c:	b580      	push	{r7, lr}
   2761e:	b084      	sub	sp, #16
   27620:	af00      	add	r7, sp, #0
   27622:	0002      	movs	r2, r0
   27624:	1dfb      	adds	r3, r7, #7
   27626:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   27628:	230f      	movs	r3, #15
   2762a:	18fb      	adds	r3, r7, r3
   2762c:	1dfa      	adds	r2, r7, #7
   2762e:	7812      	ldrb	r2, [r2, #0]
   27630:	09d2      	lsrs	r2, r2, #7
   27632:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   27634:	230e      	movs	r3, #14
   27636:	18fb      	adds	r3, r7, r3
   27638:	1dfa      	adds	r2, r7, #7
   2763a:	7812      	ldrb	r2, [r2, #0]
   2763c:	0952      	lsrs	r2, r2, #5
   2763e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   27640:	4b0d      	ldr	r3, [pc, #52]	; (27678 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   27642:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   27644:	230f      	movs	r3, #15
   27646:	18fb      	adds	r3, r7, r3
   27648:	781b      	ldrb	r3, [r3, #0]
   2764a:	2b00      	cmp	r3, #0
   2764c:	d10f      	bne.n	2766e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2764e:	230f      	movs	r3, #15
   27650:	18fb      	adds	r3, r7, r3
   27652:	781b      	ldrb	r3, [r3, #0]
   27654:	009b      	lsls	r3, r3, #2
   27656:	2210      	movs	r2, #16
   27658:	4694      	mov	ip, r2
   2765a:	44bc      	add	ip, r7
   2765c:	4463      	add	r3, ip
   2765e:	3b08      	subs	r3, #8
   27660:	681a      	ldr	r2, [r3, #0]
   27662:	230e      	movs	r3, #14
   27664:	18fb      	adds	r3, r7, r3
   27666:	781b      	ldrb	r3, [r3, #0]
   27668:	01db      	lsls	r3, r3, #7
   2766a:	18d3      	adds	r3, r2, r3
   2766c:	e000      	b.n	27670 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2766e:	2300      	movs	r3, #0
}
   27670:	0018      	movs	r0, r3
   27672:	46bd      	mov	sp, r7
   27674:	b004      	add	sp, #16
   27676:	bd80      	pop	{r7, pc}
   27678:	41004400 	.word	0x41004400

0002767c <port_get_group_from_gpio_pin>:
{
   2767c:	b580      	push	{r7, lr}
   2767e:	b082      	sub	sp, #8
   27680:	af00      	add	r7, sp, #0
   27682:	0002      	movs	r2, r0
   27684:	1dfb      	adds	r3, r7, #7
   27686:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   27688:	1dfb      	adds	r3, r7, #7
   2768a:	781b      	ldrb	r3, [r3, #0]
   2768c:	0018      	movs	r0, r3
   2768e:	4b03      	ldr	r3, [pc, #12]	; (2769c <port_get_group_from_gpio_pin+0x20>)
   27690:	4798      	blx	r3
   27692:	0003      	movs	r3, r0
}
   27694:	0018      	movs	r0, r3
   27696:	46bd      	mov	sp, r7
   27698:	b002      	add	sp, #8
   2769a:	bd80      	pop	{r7, pc}
   2769c:	0002761d 	.word	0x0002761d

000276a0 <port_pin_set_output_level>:
{
   276a0:	b580      	push	{r7, lr}
   276a2:	b084      	sub	sp, #16
   276a4:	af00      	add	r7, sp, #0
   276a6:	0002      	movs	r2, r0
   276a8:	1dfb      	adds	r3, r7, #7
   276aa:	701a      	strb	r2, [r3, #0]
   276ac:	1dbb      	adds	r3, r7, #6
   276ae:	1c0a      	adds	r2, r1, #0
   276b0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   276b2:	1dfb      	adds	r3, r7, #7
   276b4:	781b      	ldrb	r3, [r3, #0]
   276b6:	0018      	movs	r0, r3
   276b8:	4b0d      	ldr	r3, [pc, #52]	; (276f0 <port_pin_set_output_level+0x50>)
   276ba:	4798      	blx	r3
   276bc:	0003      	movs	r3, r0
   276be:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   276c0:	1dfb      	adds	r3, r7, #7
   276c2:	781b      	ldrb	r3, [r3, #0]
   276c4:	221f      	movs	r2, #31
   276c6:	4013      	ands	r3, r2
   276c8:	2201      	movs	r2, #1
   276ca:	409a      	lsls	r2, r3
   276cc:	0013      	movs	r3, r2
   276ce:	60bb      	str	r3, [r7, #8]
	if (level) {
   276d0:	1dbb      	adds	r3, r7, #6
   276d2:	781b      	ldrb	r3, [r3, #0]
   276d4:	2b00      	cmp	r3, #0
   276d6:	d003      	beq.n	276e0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   276d8:	68fb      	ldr	r3, [r7, #12]
   276da:	68ba      	ldr	r2, [r7, #8]
   276dc:	619a      	str	r2, [r3, #24]
}
   276de:	e002      	b.n	276e6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   276e0:	68fb      	ldr	r3, [r7, #12]
   276e2:	68ba      	ldr	r2, [r7, #8]
   276e4:	615a      	str	r2, [r3, #20]
}
   276e6:	46c0      	nop			; (mov r8, r8)
   276e8:	46bd      	mov	sp, r7
   276ea:	b004      	add	sp, #16
   276ec:	bd80      	pop	{r7, pc}
   276ee:	46c0      	nop			; (mov r8, r8)
   276f0:	0002767d 	.word	0x0002767d

000276f4 <system_gclk_chan_get_config_defaults>:
{
   276f4:	b580      	push	{r7, lr}
   276f6:	b082      	sub	sp, #8
   276f8:	af00      	add	r7, sp, #0
   276fa:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   276fc:	687b      	ldr	r3, [r7, #4]
   276fe:	2200      	movs	r2, #0
   27700:	701a      	strb	r2, [r3, #0]
}
   27702:	46c0      	nop			; (mov r8, r8)
   27704:	46bd      	mov	sp, r7
   27706:	b002      	add	sp, #8
   27708:	bd80      	pop	{r7, pc}
	...

0002770c <system_apb_clock_set_mask>:
{
   2770c:	b580      	push	{r7, lr}
   2770e:	b082      	sub	sp, #8
   27710:	af00      	add	r7, sp, #0
   27712:	0002      	movs	r2, r0
   27714:	6039      	str	r1, [r7, #0]
   27716:	1dfb      	adds	r3, r7, #7
   27718:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2771a:	1dfb      	adds	r3, r7, #7
   2771c:	781b      	ldrb	r3, [r3, #0]
   2771e:	2b01      	cmp	r3, #1
   27720:	d00a      	beq.n	27738 <system_apb_clock_set_mask+0x2c>
   27722:	2b02      	cmp	r3, #2
   27724:	d00f      	beq.n	27746 <system_apb_clock_set_mask+0x3a>
   27726:	2b00      	cmp	r3, #0
   27728:	d114      	bne.n	27754 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2772a:	4b0e      	ldr	r3, [pc, #56]	; (27764 <system_apb_clock_set_mask+0x58>)
   2772c:	4a0d      	ldr	r2, [pc, #52]	; (27764 <system_apb_clock_set_mask+0x58>)
   2772e:	6991      	ldr	r1, [r2, #24]
   27730:	683a      	ldr	r2, [r7, #0]
   27732:	430a      	orrs	r2, r1
   27734:	619a      	str	r2, [r3, #24]
			break;
   27736:	e00f      	b.n	27758 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27738:	4b0a      	ldr	r3, [pc, #40]	; (27764 <system_apb_clock_set_mask+0x58>)
   2773a:	4a0a      	ldr	r2, [pc, #40]	; (27764 <system_apb_clock_set_mask+0x58>)
   2773c:	69d1      	ldr	r1, [r2, #28]
   2773e:	683a      	ldr	r2, [r7, #0]
   27740:	430a      	orrs	r2, r1
   27742:	61da      	str	r2, [r3, #28]
			break;
   27744:	e008      	b.n	27758 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   27746:	4b07      	ldr	r3, [pc, #28]	; (27764 <system_apb_clock_set_mask+0x58>)
   27748:	4a06      	ldr	r2, [pc, #24]	; (27764 <system_apb_clock_set_mask+0x58>)
   2774a:	6a11      	ldr	r1, [r2, #32]
   2774c:	683a      	ldr	r2, [r7, #0]
   2774e:	430a      	orrs	r2, r1
   27750:	621a      	str	r2, [r3, #32]
			break;
   27752:	e001      	b.n	27758 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   27754:	2317      	movs	r3, #23
   27756:	e000      	b.n	2775a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   27758:	2300      	movs	r3, #0
}
   2775a:	0018      	movs	r0, r3
   2775c:	46bd      	mov	sp, r7
   2775e:	b002      	add	sp, #8
   27760:	bd80      	pop	{r7, pc}
   27762:	46c0      	nop			; (mov r8, r8)
   27764:	40000400 	.word	0x40000400

00027768 <system_is_debugger_present>:
{
   27768:	b580      	push	{r7, lr}
   2776a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   2776c:	4b05      	ldr	r3, [pc, #20]	; (27784 <system_is_debugger_present+0x1c>)
   2776e:	789b      	ldrb	r3, [r3, #2]
   27770:	b2db      	uxtb	r3, r3
   27772:	001a      	movs	r2, r3
   27774:	2302      	movs	r3, #2
   27776:	4013      	ands	r3, r2
   27778:	1e5a      	subs	r2, r3, #1
   2777a:	4193      	sbcs	r3, r2
   2777c:	b2db      	uxtb	r3, r3
}
   2777e:	0018      	movs	r0, r3
   27780:	46bd      	mov	sp, r7
   27782:	bd80      	pop	{r7, pc}
   27784:	41002000 	.word	0x41002000

00027788 <system_interrupt_enable>:
{
   27788:	b580      	push	{r7, lr}
   2778a:	b082      	sub	sp, #8
   2778c:	af00      	add	r7, sp, #0
   2778e:	0002      	movs	r2, r0
   27790:	1dfb      	adds	r3, r7, #7
   27792:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27794:	4b06      	ldr	r3, [pc, #24]	; (277b0 <system_interrupt_enable+0x28>)
   27796:	1dfa      	adds	r2, r7, #7
   27798:	7812      	ldrb	r2, [r2, #0]
   2779a:	0011      	movs	r1, r2
   2779c:	221f      	movs	r2, #31
   2779e:	400a      	ands	r2, r1
   277a0:	2101      	movs	r1, #1
   277a2:	4091      	lsls	r1, r2
   277a4:	000a      	movs	r2, r1
   277a6:	601a      	str	r2, [r3, #0]
}
   277a8:	46c0      	nop			; (mov r8, r8)
   277aa:	46bd      	mov	sp, r7
   277ac:	b002      	add	sp, #8
   277ae:	bd80      	pop	{r7, pc}
   277b0:	e000e100 	.word	0xe000e100

000277b4 <system_interrupt_disable>:
{
   277b4:	b580      	push	{r7, lr}
   277b6:	b082      	sub	sp, #8
   277b8:	af00      	add	r7, sp, #0
   277ba:	0002      	movs	r2, r0
   277bc:	1dfb      	adds	r3, r7, #7
   277be:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   277c0:	4a07      	ldr	r2, [pc, #28]	; (277e0 <system_interrupt_disable+0x2c>)
   277c2:	1dfb      	adds	r3, r7, #7
   277c4:	781b      	ldrb	r3, [r3, #0]
   277c6:	0019      	movs	r1, r3
   277c8:	231f      	movs	r3, #31
   277ca:	400b      	ands	r3, r1
   277cc:	2101      	movs	r1, #1
   277ce:	4099      	lsls	r1, r3
   277d0:	000b      	movs	r3, r1
   277d2:	0019      	movs	r1, r3
   277d4:	2380      	movs	r3, #128	; 0x80
   277d6:	50d1      	str	r1, [r2, r3]
}
   277d8:	46c0      	nop			; (mov r8, r8)
   277da:	46bd      	mov	sp, r7
   277dc:	b002      	add	sp, #8
   277de:	bd80      	pop	{r7, pc}
   277e0:	e000e100 	.word	0xe000e100

000277e4 <spi_is_syncing>:
{
   277e4:	b580      	push	{r7, lr}
   277e6:	b084      	sub	sp, #16
   277e8:	af00      	add	r7, sp, #0
   277ea:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   277ec:	687b      	ldr	r3, [r7, #4]
   277ee:	681b      	ldr	r3, [r3, #0]
   277f0:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   277f2:	68fb      	ldr	r3, [r7, #12]
   277f4:	69db      	ldr	r3, [r3, #28]
   277f6:	1e5a      	subs	r2, r3, #1
   277f8:	4193      	sbcs	r3, r2
   277fa:	b2db      	uxtb	r3, r3
}
   277fc:	0018      	movs	r0, r3
   277fe:	46bd      	mov	sp, r7
   27800:	b004      	add	sp, #16
   27802:	bd80      	pop	{r7, pc}

00027804 <spi_enable>:
{
   27804:	b580      	push	{r7, lr}
   27806:	b084      	sub	sp, #16
   27808:	af00      	add	r7, sp, #0
   2780a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2780c:	687b      	ldr	r3, [r7, #4]
   2780e:	681b      	ldr	r3, [r3, #0]
   27810:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   27812:	687b      	ldr	r3, [r7, #4]
   27814:	681b      	ldr	r3, [r3, #0]
   27816:	0018      	movs	r0, r3
   27818:	4b0b      	ldr	r3, [pc, #44]	; (27848 <spi_enable+0x44>)
   2781a:	4798      	blx	r3
   2781c:	0003      	movs	r3, r0
   2781e:	0018      	movs	r0, r3
   27820:	4b0a      	ldr	r3, [pc, #40]	; (2784c <spi_enable+0x48>)
   27822:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   27824:	46c0      	nop			; (mov r8, r8)
   27826:	687b      	ldr	r3, [r7, #4]
   27828:	0018      	movs	r0, r3
   2782a:	4b09      	ldr	r3, [pc, #36]	; (27850 <spi_enable+0x4c>)
   2782c:	4798      	blx	r3
   2782e:	1e03      	subs	r3, r0, #0
   27830:	d1f9      	bne.n	27826 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   27832:	68fb      	ldr	r3, [r7, #12]
   27834:	681b      	ldr	r3, [r3, #0]
   27836:	2202      	movs	r2, #2
   27838:	431a      	orrs	r2, r3
   2783a:	68fb      	ldr	r3, [r7, #12]
   2783c:	601a      	str	r2, [r3, #0]
}
   2783e:	46c0      	nop			; (mov r8, r8)
   27840:	46bd      	mov	sp, r7
   27842:	b004      	add	sp, #16
   27844:	bd80      	pop	{r7, pc}
   27846:	46c0      	nop			; (mov r8, r8)
   27848:	00027521 	.word	0x00027521
   2784c:	00027789 	.word	0x00027789
   27850:	000277e5 	.word	0x000277e5

00027854 <spi_disable>:
{
   27854:	b580      	push	{r7, lr}
   27856:	b084      	sub	sp, #16
   27858:	af00      	add	r7, sp, #0
   2785a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2785c:	687b      	ldr	r3, [r7, #4]
   2785e:	681b      	ldr	r3, [r3, #0]
   27860:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   27862:	687b      	ldr	r3, [r7, #4]
   27864:	681b      	ldr	r3, [r3, #0]
   27866:	0018      	movs	r0, r3
   27868:	4b0e      	ldr	r3, [pc, #56]	; (278a4 <spi_disable+0x50>)
   2786a:	4798      	blx	r3
   2786c:	0003      	movs	r3, r0
   2786e:	0018      	movs	r0, r3
   27870:	4b0d      	ldr	r3, [pc, #52]	; (278a8 <spi_disable+0x54>)
   27872:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   27874:	46c0      	nop			; (mov r8, r8)
   27876:	687b      	ldr	r3, [r7, #4]
   27878:	0018      	movs	r0, r3
   2787a:	4b0c      	ldr	r3, [pc, #48]	; (278ac <spi_disable+0x58>)
   2787c:	4798      	blx	r3
   2787e:	1e03      	subs	r3, r0, #0
   27880:	d1f9      	bne.n	27876 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   27882:	68fb      	ldr	r3, [r7, #12]
   27884:	228f      	movs	r2, #143	; 0x8f
   27886:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   27888:	68fb      	ldr	r3, [r7, #12]
   2788a:	228f      	movs	r2, #143	; 0x8f
   2788c:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   2788e:	68fb      	ldr	r3, [r7, #12]
   27890:	681b      	ldr	r3, [r3, #0]
   27892:	2202      	movs	r2, #2
   27894:	4393      	bics	r3, r2
   27896:	001a      	movs	r2, r3
   27898:	68fb      	ldr	r3, [r7, #12]
   2789a:	601a      	str	r2, [r3, #0]
}
   2789c:	46c0      	nop			; (mov r8, r8)
   2789e:	46bd      	mov	sp, r7
   278a0:	b004      	add	sp, #16
   278a2:	bd80      	pop	{r7, pc}
   278a4:	00027521 	.word	0x00027521
   278a8:	000277b5 	.word	0x000277b5
   278ac:	000277e5 	.word	0x000277e5

000278b0 <spi_is_write_complete>:
{
   278b0:	b580      	push	{r7, lr}
   278b2:	b084      	sub	sp, #16
   278b4:	af00      	add	r7, sp, #0
   278b6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   278b8:	687b      	ldr	r3, [r7, #4]
   278ba:	681b      	ldr	r3, [r3, #0]
   278bc:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   278be:	68fb      	ldr	r3, [r7, #12]
   278c0:	7e1b      	ldrb	r3, [r3, #24]
   278c2:	b2db      	uxtb	r3, r3
   278c4:	001a      	movs	r2, r3
   278c6:	2302      	movs	r3, #2
   278c8:	4013      	ands	r3, r2
   278ca:	1e5a      	subs	r2, r3, #1
   278cc:	4193      	sbcs	r3, r2
   278ce:	b2db      	uxtb	r3, r3
}
   278d0:	0018      	movs	r0, r3
   278d2:	46bd      	mov	sp, r7
   278d4:	b004      	add	sp, #16
   278d6:	bd80      	pop	{r7, pc}

000278d8 <spi_is_ready_to_write>:
{
   278d8:	b580      	push	{r7, lr}
   278da:	b084      	sub	sp, #16
   278dc:	af00      	add	r7, sp, #0
   278de:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   278e0:	687b      	ldr	r3, [r7, #4]
   278e2:	681b      	ldr	r3, [r3, #0]
   278e4:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   278e6:	68fb      	ldr	r3, [r7, #12]
   278e8:	7e1b      	ldrb	r3, [r3, #24]
   278ea:	b2db      	uxtb	r3, r3
   278ec:	001a      	movs	r2, r3
   278ee:	2301      	movs	r3, #1
   278f0:	4013      	ands	r3, r2
   278f2:	1e5a      	subs	r2, r3, #1
   278f4:	4193      	sbcs	r3, r2
   278f6:	b2db      	uxtb	r3, r3
}
   278f8:	0018      	movs	r0, r3
   278fa:	46bd      	mov	sp, r7
   278fc:	b004      	add	sp, #16
   278fe:	bd80      	pop	{r7, pc}

00027900 <spi_is_ready_to_read>:
{
   27900:	b580      	push	{r7, lr}
   27902:	b084      	sub	sp, #16
   27904:	af00      	add	r7, sp, #0
   27906:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27908:	687b      	ldr	r3, [r7, #4]
   2790a:	681b      	ldr	r3, [r3, #0]
   2790c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   2790e:	68fb      	ldr	r3, [r7, #12]
   27910:	7e1b      	ldrb	r3, [r3, #24]
   27912:	b2db      	uxtb	r3, r3
   27914:	001a      	movs	r2, r3
   27916:	2304      	movs	r3, #4
   27918:	4013      	ands	r3, r2
   2791a:	1e5a      	subs	r2, r3, #1
   2791c:	4193      	sbcs	r3, r2
   2791e:	b2db      	uxtb	r3, r3
}
   27920:	0018      	movs	r0, r3
   27922:	46bd      	mov	sp, r7
   27924:	b004      	add	sp, #16
   27926:	bd80      	pop	{r7, pc}

00027928 <spi_write>:
{
   27928:	b580      	push	{r7, lr}
   2792a:	b084      	sub	sp, #16
   2792c:	af00      	add	r7, sp, #0
   2792e:	6078      	str	r0, [r7, #4]
   27930:	000a      	movs	r2, r1
   27932:	1cbb      	adds	r3, r7, #2
   27934:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27936:	687b      	ldr	r3, [r7, #4]
   27938:	681b      	ldr	r3, [r3, #0]
   2793a:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   2793c:	687b      	ldr	r3, [r7, #4]
   2793e:	0018      	movs	r0, r3
   27940:	4b0a      	ldr	r3, [pc, #40]	; (2796c <spi_write+0x44>)
   27942:	4798      	blx	r3
   27944:	0003      	movs	r3, r0
   27946:	001a      	movs	r2, r3
   27948:	2301      	movs	r3, #1
   2794a:	4053      	eors	r3, r2
   2794c:	b2db      	uxtb	r3, r3
   2794e:	2b00      	cmp	r3, #0
   27950:	d001      	beq.n	27956 <spi_write+0x2e>
		return STATUS_BUSY;
   27952:	2305      	movs	r3, #5
   27954:	e006      	b.n	27964 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   27956:	1cbb      	adds	r3, r7, #2
   27958:	881b      	ldrh	r3, [r3, #0]
   2795a:	05db      	lsls	r3, r3, #23
   2795c:	0dda      	lsrs	r2, r3, #23
   2795e:	68fb      	ldr	r3, [r7, #12]
   27960:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   27962:	2300      	movs	r3, #0
}
   27964:	0018      	movs	r0, r3
   27966:	46bd      	mov	sp, r7
   27968:	b004      	add	sp, #16
   2796a:	bd80      	pop	{r7, pc}
   2796c:	000278d9 	.word	0x000278d9

00027970 <spi_read>:
{
   27970:	b580      	push	{r7, lr}
   27972:	b084      	sub	sp, #16
   27974:	af00      	add	r7, sp, #0
   27976:	6078      	str	r0, [r7, #4]
   27978:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2797a:	687b      	ldr	r3, [r7, #4]
   2797c:	681b      	ldr	r3, [r3, #0]
   2797e:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   27980:	687b      	ldr	r3, [r7, #4]
   27982:	0018      	movs	r0, r3
   27984:	4b1b      	ldr	r3, [pc, #108]	; (279f4 <spi_read+0x84>)
   27986:	4798      	blx	r3
   27988:	0003      	movs	r3, r0
   2798a:	001a      	movs	r2, r3
   2798c:	2301      	movs	r3, #1
   2798e:	4053      	eors	r3, r2
   27990:	b2db      	uxtb	r3, r3
   27992:	2b00      	cmp	r3, #0
   27994:	d001      	beq.n	2799a <spi_read+0x2a>
		return STATUS_ERR_IO;
   27996:	2310      	movs	r3, #16
   27998:	e027      	b.n	279ea <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   2799a:	230f      	movs	r3, #15
   2799c:	18fb      	adds	r3, r7, r3
   2799e:	2200      	movs	r2, #0
   279a0:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   279a2:	68bb      	ldr	r3, [r7, #8]
   279a4:	8b5b      	ldrh	r3, [r3, #26]
   279a6:	b29b      	uxth	r3, r3
   279a8:	001a      	movs	r2, r3
   279aa:	2304      	movs	r3, #4
   279ac:	4013      	ands	r3, r2
   279ae:	d006      	beq.n	279be <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   279b0:	230f      	movs	r3, #15
   279b2:	18fb      	adds	r3, r7, r3
   279b4:	221e      	movs	r2, #30
   279b6:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   279b8:	68bb      	ldr	r3, [r7, #8]
   279ba:	2204      	movs	r2, #4
   279bc:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   279be:	687b      	ldr	r3, [r7, #4]
   279c0:	799b      	ldrb	r3, [r3, #6]
   279c2:	2b01      	cmp	r3, #1
   279c4:	d108      	bne.n	279d8 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   279c6:	68bb      	ldr	r3, [r7, #8]
   279c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   279ca:	b29b      	uxth	r3, r3
   279cc:	05db      	lsls	r3, r3, #23
   279ce:	0ddb      	lsrs	r3, r3, #23
   279d0:	b29a      	uxth	r2, r3
   279d2:	683b      	ldr	r3, [r7, #0]
   279d4:	801a      	strh	r2, [r3, #0]
   279d6:	e005      	b.n	279e4 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   279d8:	68bb      	ldr	r3, [r7, #8]
   279da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   279dc:	b2db      	uxtb	r3, r3
   279de:	b29a      	uxth	r2, r3
   279e0:	683b      	ldr	r3, [r7, #0]
   279e2:	801a      	strh	r2, [r3, #0]
	return retval;
   279e4:	230f      	movs	r3, #15
   279e6:	18fb      	adds	r3, r7, r3
   279e8:	781b      	ldrb	r3, [r3, #0]
}
   279ea:	0018      	movs	r0, r3
   279ec:	46bd      	mov	sp, r7
   279ee:	b004      	add	sp, #16
   279f0:	bd80      	pop	{r7, pc}
   279f2:	46c0      	nop			; (mov r8, r8)
   279f4:	00027901 	.word	0x00027901

000279f8 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   279f8:	b590      	push	{r4, r7, lr}
   279fa:	b089      	sub	sp, #36	; 0x24
   279fc:	af00      	add	r7, sp, #0
   279fe:	6078      	str	r0, [r7, #4]
   27a00:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   27a02:	230c      	movs	r3, #12
   27a04:	18fb      	adds	r3, r7, r3
   27a06:	2200      	movs	r2, #0
   27a08:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   27a0a:	687b      	ldr	r3, [r7, #4]
   27a0c:	681b      	ldr	r3, [r3, #0]
   27a0e:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   27a10:	687b      	ldr	r3, [r7, #4]
   27a12:	0018      	movs	r0, r3
   27a14:	4b24      	ldr	r3, [pc, #144]	; (27aa8 <spi_set_baudrate+0xb0>)
   27a16:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   27a18:	46c0      	nop			; (mov r8, r8)
   27a1a:	687b      	ldr	r3, [r7, #4]
   27a1c:	0018      	movs	r0, r3
   27a1e:	4b23      	ldr	r3, [pc, #140]	; (27aac <spi_set_baudrate+0xb4>)
   27a20:	4798      	blx	r3
   27a22:	1e03      	subs	r3, r0, #0
   27a24:	d1f9      	bne.n	27a1a <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27a26:	687b      	ldr	r3, [r7, #4]
   27a28:	681b      	ldr	r3, [r3, #0]
   27a2a:	0018      	movs	r0, r3
   27a2c:	4b20      	ldr	r3, [pc, #128]	; (27ab0 <spi_set_baudrate+0xb8>)
   27a2e:	4798      	blx	r3
   27a30:	0003      	movs	r3, r0
   27a32:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27a34:	69bb      	ldr	r3, [r7, #24]
   27a36:	3314      	adds	r3, #20
   27a38:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   27a3a:	697b      	ldr	r3, [r7, #20]
   27a3c:	b2db      	uxtb	r3, r3
   27a3e:	0018      	movs	r0, r3
   27a40:	4b1c      	ldr	r3, [pc, #112]	; (27ab4 <spi_set_baudrate+0xbc>)
   27a42:	4798      	blx	r3
   27a44:	0003      	movs	r3, r0
   27a46:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   27a48:	230f      	movs	r3, #15
   27a4a:	18fc      	adds	r4, r7, r3
   27a4c:	230c      	movs	r3, #12
   27a4e:	18fa      	adds	r2, r7, r3
   27a50:	6939      	ldr	r1, [r7, #16]
   27a52:	683b      	ldr	r3, [r7, #0]
   27a54:	0018      	movs	r0, r3
   27a56:	4b18      	ldr	r3, [pc, #96]	; (27ab8 <spi_set_baudrate+0xc0>)
   27a58:	4798      	blx	r3
   27a5a:	0003      	movs	r3, r0
   27a5c:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   27a5e:	230f      	movs	r3, #15
   27a60:	18fb      	adds	r3, r7, r3
   27a62:	781b      	ldrb	r3, [r3, #0]
   27a64:	2b00      	cmp	r3, #0
   27a66:	d001      	beq.n	27a6c <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   27a68:	2317      	movs	r3, #23
   27a6a:	e018      	b.n	27a9e <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   27a6c:	230c      	movs	r3, #12
   27a6e:	18fb      	adds	r3, r7, r3
   27a70:	881b      	ldrh	r3, [r3, #0]
   27a72:	b2da      	uxtb	r2, r3
   27a74:	69fb      	ldr	r3, [r7, #28]
   27a76:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   27a78:	46c0      	nop			; (mov r8, r8)
   27a7a:	687b      	ldr	r3, [r7, #4]
   27a7c:	0018      	movs	r0, r3
   27a7e:	4b0b      	ldr	r3, [pc, #44]	; (27aac <spi_set_baudrate+0xb4>)
   27a80:	4798      	blx	r3
   27a82:	1e03      	subs	r3, r0, #0
   27a84:	d1f9      	bne.n	27a7a <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   27a86:	687b      	ldr	r3, [r7, #4]
   27a88:	0018      	movs	r0, r3
   27a8a:	4b0c      	ldr	r3, [pc, #48]	; (27abc <spi_set_baudrate+0xc4>)
   27a8c:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   27a8e:	46c0      	nop			; (mov r8, r8)
   27a90:	687b      	ldr	r3, [r7, #4]
   27a92:	0018      	movs	r0, r3
   27a94:	4b05      	ldr	r3, [pc, #20]	; (27aac <spi_set_baudrate+0xb4>)
   27a96:	4798      	blx	r3
   27a98:	1e03      	subs	r3, r0, #0
   27a9a:	d1f9      	bne.n	27a90 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   27a9c:	2300      	movs	r3, #0
}
   27a9e:	0018      	movs	r0, r3
   27aa0:	46bd      	mov	sp, r7
   27aa2:	b009      	add	sp, #36	; 0x24
   27aa4:	bd90      	pop	{r4, r7, pc}
   27aa6:	46c0      	nop			; (mov r8, r8)
   27aa8:	00027855 	.word	0x00027855
   27aac:	000277e5 	.word	0x000277e5
   27ab0:	00027451 	.word	0x00027451
   27ab4:	00029e05 	.word	0x00029e05
   27ab8:	00026fcb 	.word	0x00026fcb
   27abc:	00027805 	.word	0x00027805

00027ac0 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   27ac0:	b590      	push	{r4, r7, lr}
   27ac2:	b093      	sub	sp, #76	; 0x4c
   27ac4:	af00      	add	r7, sp, #0
   27ac6:	6078      	str	r0, [r7, #4]
   27ac8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   27aca:	687b      	ldr	r3, [r7, #4]
   27acc:	681b      	ldr	r3, [r3, #0]
   27ace:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   27ad0:	687b      	ldr	r3, [r7, #4]
   27ad2:	681b      	ldr	r3, [r3, #0]
   27ad4:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   27ad6:	231c      	movs	r3, #28
   27ad8:	18fb      	adds	r3, r7, r3
   27ada:	0018      	movs	r0, r3
   27adc:	4b75      	ldr	r3, [pc, #468]	; (27cb4 <_spi_set_config+0x1f4>)
   27ade:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27ae0:	231c      	movs	r3, #28
   27ae2:	18fb      	adds	r3, r7, r3
   27ae4:	2200      	movs	r2, #0
   27ae6:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   27ae8:	683b      	ldr	r3, [r7, #0]
   27aea:	781b      	ldrb	r3, [r3, #0]
   27aec:	2b00      	cmp	r3, #0
   27aee:	d103      	bne.n	27af8 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   27af0:	231c      	movs	r3, #28
   27af2:	18fb      	adds	r3, r7, r3
   27af4:	2200      	movs	r2, #0
   27af6:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   27af8:	683b      	ldr	r3, [r7, #0]
   27afa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   27afc:	230c      	movs	r3, #12
   27afe:	18fb      	adds	r3, r7, r3
   27b00:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   27b02:	683b      	ldr	r3, [r7, #0]
   27b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   27b06:	230c      	movs	r3, #12
   27b08:	18fb      	adds	r3, r7, r3
   27b0a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   27b0c:	683b      	ldr	r3, [r7, #0]
   27b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   27b10:	230c      	movs	r3, #12
   27b12:	18fb      	adds	r3, r7, r3
   27b14:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   27b16:	683b      	ldr	r3, [r7, #0]
   27b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   27b1a:	230c      	movs	r3, #12
   27b1c:	18fb      	adds	r3, r7, r3
   27b1e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   27b20:	2347      	movs	r3, #71	; 0x47
   27b22:	18fb      	adds	r3, r7, r3
   27b24:	2200      	movs	r2, #0
   27b26:	701a      	strb	r2, [r3, #0]
   27b28:	e02c      	b.n	27b84 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   27b2a:	2347      	movs	r3, #71	; 0x47
   27b2c:	18fb      	adds	r3, r7, r3
   27b2e:	781a      	ldrb	r2, [r3, #0]
   27b30:	230c      	movs	r3, #12
   27b32:	18fb      	adds	r3, r7, r3
   27b34:	0092      	lsls	r2, r2, #2
   27b36:	58d3      	ldr	r3, [r2, r3]
   27b38:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   27b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27b3c:	2b00      	cmp	r3, #0
   27b3e:	d109      	bne.n	27b54 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   27b40:	2347      	movs	r3, #71	; 0x47
   27b42:	18fb      	adds	r3, r7, r3
   27b44:	781a      	ldrb	r2, [r3, #0]
   27b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27b48:	0011      	movs	r1, r2
   27b4a:	0018      	movs	r0, r3
   27b4c:	4b5a      	ldr	r3, [pc, #360]	; (27cb8 <_spi_set_config+0x1f8>)
   27b4e:	4798      	blx	r3
   27b50:	0003      	movs	r3, r0
   27b52:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   27b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27b56:	3301      	adds	r3, #1
   27b58:	d00d      	beq.n	27b76 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   27b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27b5c:	b2da      	uxtb	r2, r3
   27b5e:	231c      	movs	r3, #28
   27b60:	18fb      	adds	r3, r7, r3
   27b62:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   27b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27b66:	0c1b      	lsrs	r3, r3, #16
   27b68:	b2db      	uxtb	r3, r3
   27b6a:	221c      	movs	r2, #28
   27b6c:	18ba      	adds	r2, r7, r2
   27b6e:	0011      	movs	r1, r2
   27b70:	0018      	movs	r0, r3
   27b72:	4b52      	ldr	r3, [pc, #328]	; (27cbc <_spi_set_config+0x1fc>)
   27b74:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   27b76:	2347      	movs	r3, #71	; 0x47
   27b78:	18fb      	adds	r3, r7, r3
   27b7a:	781a      	ldrb	r2, [r3, #0]
   27b7c:	2347      	movs	r3, #71	; 0x47
   27b7e:	18fb      	adds	r3, r7, r3
   27b80:	3201      	adds	r2, #1
   27b82:	701a      	strb	r2, [r3, #0]
   27b84:	2347      	movs	r3, #71	; 0x47
   27b86:	18fb      	adds	r3, r7, r3
   27b88:	781b      	ldrb	r3, [r3, #0]
   27b8a:	2b03      	cmp	r3, #3
   27b8c:	d9cd      	bls.n	27b2a <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   27b8e:	683b      	ldr	r3, [r7, #0]
   27b90:	781a      	ldrb	r2, [r3, #0]
   27b92:	687b      	ldr	r3, [r7, #4]
   27b94:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   27b96:	683b      	ldr	r3, [r7, #0]
   27b98:	7c1a      	ldrb	r2, [r3, #16]
   27b9a:	687b      	ldr	r3, [r7, #4]
   27b9c:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   27b9e:	683b      	ldr	r3, [r7, #0]
   27ba0:	7c9a      	ldrb	r2, [r3, #18]
   27ba2:	687b      	ldr	r3, [r7, #4]
   27ba4:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   27ba6:	683b      	ldr	r3, [r7, #0]
   27ba8:	7d1a      	ldrb	r2, [r3, #20]
   27baa:	687b      	ldr	r3, [r7, #4]
   27bac:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   27bae:	230a      	movs	r3, #10
   27bb0:	18fb      	adds	r3, r7, r3
   27bb2:	2200      	movs	r2, #0
   27bb4:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   27bb6:	2300      	movs	r3, #0
   27bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   27bba:	2300      	movs	r3, #0
   27bbc:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   27bbe:	683b      	ldr	r3, [r7, #0]
   27bc0:	781b      	ldrb	r3, [r3, #0]
   27bc2:	2b01      	cmp	r3, #1
   27bc4:	d129      	bne.n	27c1a <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27bc6:	687b      	ldr	r3, [r7, #4]
   27bc8:	681b      	ldr	r3, [r3, #0]
   27bca:	0018      	movs	r0, r3
   27bcc:	4b3c      	ldr	r3, [pc, #240]	; (27cc0 <_spi_set_config+0x200>)
   27bce:	4798      	blx	r3
   27bd0:	0003      	movs	r3, r0
   27bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27bd6:	3314      	adds	r3, #20
   27bd8:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   27bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27bdc:	b2db      	uxtb	r3, r3
   27bde:	0018      	movs	r0, r3
   27be0:	4b38      	ldr	r3, [pc, #224]	; (27cc4 <_spi_set_config+0x204>)
   27be2:	4798      	blx	r3
   27be4:	0003      	movs	r3, r0
   27be6:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   27be8:	683b      	ldr	r3, [r7, #0]
   27bea:	699b      	ldr	r3, [r3, #24]
   27bec:	2223      	movs	r2, #35	; 0x23
   27bee:	18bc      	adds	r4, r7, r2
   27bf0:	220a      	movs	r2, #10
   27bf2:	18ba      	adds	r2, r7, r2
   27bf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   27bf6:	0018      	movs	r0, r3
   27bf8:	4b33      	ldr	r3, [pc, #204]	; (27cc8 <_spi_set_config+0x208>)
   27bfa:	4798      	blx	r3
   27bfc:	0003      	movs	r3, r0
   27bfe:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   27c00:	2323      	movs	r3, #35	; 0x23
   27c02:	18fb      	adds	r3, r7, r3
   27c04:	781b      	ldrb	r3, [r3, #0]
   27c06:	2b00      	cmp	r3, #0
   27c08:	d001      	beq.n	27c0e <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   27c0a:	2317      	movs	r3, #23
   27c0c:	e04e      	b.n	27cac <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   27c0e:	230a      	movs	r3, #10
   27c10:	18fb      	adds	r3, r7, r3
   27c12:	881b      	ldrh	r3, [r3, #0]
   27c14:	b2da      	uxtb	r2, r3
   27c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27c18:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   27c1a:	683b      	ldr	r3, [r7, #0]
   27c1c:	685b      	ldr	r3, [r3, #4]
   27c1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27c20:	4313      	orrs	r3, r2
   27c22:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   27c24:	683b      	ldr	r3, [r7, #0]
   27c26:	689b      	ldr	r3, [r3, #8]
   27c28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27c2a:	4313      	orrs	r3, r2
   27c2c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   27c2e:	683b      	ldr	r3, [r7, #0]
   27c30:	68db      	ldr	r3, [r3, #12]
   27c32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27c34:	4313      	orrs	r3, r2
   27c36:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   27c38:	683b      	ldr	r3, [r7, #0]
   27c3a:	7c1b      	ldrb	r3, [r3, #16]
   27c3c:	001a      	movs	r2, r3
   27c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27c40:	4313      	orrs	r3, r2
   27c42:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   27c44:	683b      	ldr	r3, [r7, #0]
   27c46:	7c5b      	ldrb	r3, [r3, #17]
   27c48:	2b00      	cmp	r3, #0
   27c4a:	d103      	bne.n	27c54 <_spi_set_config+0x194>
   27c4c:	4b1f      	ldr	r3, [pc, #124]	; (27ccc <_spi_set_config+0x20c>)
   27c4e:	4798      	blx	r3
   27c50:	1e03      	subs	r3, r0, #0
   27c52:	d003      	beq.n	27c5c <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   27c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27c56:	2280      	movs	r2, #128	; 0x80
   27c58:	4313      	orrs	r3, r2
   27c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   27c5c:	683b      	ldr	r3, [r7, #0]
   27c5e:	7c9b      	ldrb	r3, [r3, #18]
   27c60:	2b00      	cmp	r3, #0
   27c62:	d004      	beq.n	27c6e <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   27c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27c66:	2280      	movs	r2, #128	; 0x80
   27c68:	0292      	lsls	r2, r2, #10
   27c6a:	4313      	orrs	r3, r2
   27c6c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   27c6e:	683b      	ldr	r3, [r7, #0]
   27c70:	7cdb      	ldrb	r3, [r3, #19]
   27c72:	2b00      	cmp	r3, #0
   27c74:	d004      	beq.n	27c80 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   27c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27c78:	2280      	movs	r2, #128	; 0x80
   27c7a:	0092      	lsls	r2, r2, #2
   27c7c:	4313      	orrs	r3, r2
   27c7e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   27c80:	683b      	ldr	r3, [r7, #0]
   27c82:	7d1b      	ldrb	r3, [r3, #20]
   27c84:	2b00      	cmp	r3, #0
   27c86:	d004      	beq.n	27c92 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   27c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27c8a:	2280      	movs	r2, #128	; 0x80
   27c8c:	0192      	lsls	r2, r2, #6
   27c8e:	4313      	orrs	r3, r2
   27c90:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   27c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27c94:	681a      	ldr	r2, [r3, #0]
   27c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27c98:	431a      	orrs	r2, r3
   27c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27c9c:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   27c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27ca0:	685a      	ldr	r2, [r3, #4]
   27ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27ca4:	431a      	orrs	r2, r3
   27ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27ca8:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   27caa:	2300      	movs	r3, #0
}
   27cac:	0018      	movs	r0, r3
   27cae:	46bd      	mov	sp, r7
   27cb0:	b013      	add	sp, #76	; 0x4c
   27cb2:	bd90      	pop	{r4, r7, pc}
   27cb4:	000275f5 	.word	0x000275f5
   27cb8:	00027295 	.word	0x00027295
   27cbc:	0002a041 	.word	0x0002a041
   27cc0:	00027451 	.word	0x00027451
   27cc4:	00029e05 	.word	0x00029e05
   27cc8:	00026fcb 	.word	0x00026fcb
   27ccc:	00027769 	.word	0x00027769

00027cd0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   27cd0:	b590      	push	{r4, r7, lr}
   27cd2:	b08b      	sub	sp, #44	; 0x2c
   27cd4:	af00      	add	r7, sp, #0
   27cd6:	60f8      	str	r0, [r7, #12]
   27cd8:	60b9      	str	r1, [r7, #8]
   27cda:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   27cdc:	68fb      	ldr	r3, [r7, #12]
   27cde:	68ba      	ldr	r2, [r7, #8]
   27ce0:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   27ce2:	68fb      	ldr	r3, [r7, #12]
   27ce4:	681b      	ldr	r3, [r3, #0]
   27ce6:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   27ce8:	6a3b      	ldr	r3, [r7, #32]
   27cea:	681b      	ldr	r3, [r3, #0]
   27cec:	2202      	movs	r2, #2
   27cee:	4013      	ands	r3, r2
   27cf0:	d001      	beq.n	27cf6 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   27cf2:	231c      	movs	r3, #28
   27cf4:	e09c      	b.n	27e30 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   27cf6:	6a3b      	ldr	r3, [r7, #32]
   27cf8:	681b      	ldr	r3, [r3, #0]
   27cfa:	2201      	movs	r2, #1
   27cfc:	4013      	ands	r3, r2
   27cfe:	d001      	beq.n	27d04 <spi_init+0x34>
		return STATUS_BUSY;
   27d00:	2305      	movs	r3, #5
   27d02:	e095      	b.n	27e30 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27d04:	68fb      	ldr	r3, [r7, #12]
   27d06:	681b      	ldr	r3, [r3, #0]
   27d08:	0018      	movs	r0, r3
   27d0a:	4b4b      	ldr	r3, [pc, #300]	; (27e38 <spi_init+0x168>)
   27d0c:	4798      	blx	r3
   27d0e:	0003      	movs	r3, r0
   27d10:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   27d12:	69fb      	ldr	r3, [r7, #28]
   27d14:	3302      	adds	r3, #2
   27d16:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27d18:	69fb      	ldr	r3, [r7, #28]
   27d1a:	3314      	adds	r3, #20
   27d1c:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   27d1e:	2201      	movs	r2, #1
   27d20:	69bb      	ldr	r3, [r7, #24]
   27d22:	409a      	lsls	r2, r3
   27d24:	0013      	movs	r3, r2
   27d26:	0019      	movs	r1, r3
   27d28:	2002      	movs	r0, #2
   27d2a:	4b44      	ldr	r3, [pc, #272]	; (27e3c <spi_init+0x16c>)
   27d2c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27d2e:	2310      	movs	r3, #16
   27d30:	18fb      	adds	r3, r7, r3
   27d32:	0018      	movs	r0, r3
   27d34:	4b42      	ldr	r3, [pc, #264]	; (27e40 <spi_init+0x170>)
   27d36:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   27d38:	687b      	ldr	r3, [r7, #4]
   27d3a:	2224      	movs	r2, #36	; 0x24
   27d3c:	5c9a      	ldrb	r2, [r3, r2]
   27d3e:	2310      	movs	r3, #16
   27d40:	18fb      	adds	r3, r7, r3
   27d42:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   27d44:	697b      	ldr	r3, [r7, #20]
   27d46:	b2db      	uxtb	r3, r3
   27d48:	2210      	movs	r2, #16
   27d4a:	18ba      	adds	r2, r7, r2
   27d4c:	0011      	movs	r1, r2
   27d4e:	0018      	movs	r0, r3
   27d50:	4b3c      	ldr	r3, [pc, #240]	; (27e44 <spi_init+0x174>)
   27d52:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   27d54:	697b      	ldr	r3, [r7, #20]
   27d56:	b2db      	uxtb	r3, r3
   27d58:	0018      	movs	r0, r3
   27d5a:	4b3b      	ldr	r3, [pc, #236]	; (27e48 <spi_init+0x178>)
   27d5c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   27d5e:	687b      	ldr	r3, [r7, #4]
   27d60:	2224      	movs	r2, #36	; 0x24
   27d62:	5c9b      	ldrb	r3, [r3, r2]
   27d64:	2100      	movs	r1, #0
   27d66:	0018      	movs	r0, r3
   27d68:	4b38      	ldr	r3, [pc, #224]	; (27e4c <spi_init+0x17c>)
   27d6a:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   27d6c:	687b      	ldr	r3, [r7, #4]
   27d6e:	781b      	ldrb	r3, [r3, #0]
   27d70:	2b01      	cmp	r3, #1
   27d72:	d105      	bne.n	27d80 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   27d74:	6a3b      	ldr	r3, [r7, #32]
   27d76:	681b      	ldr	r3, [r3, #0]
   27d78:	220c      	movs	r2, #12
   27d7a:	431a      	orrs	r2, r3
   27d7c:	6a3b      	ldr	r3, [r7, #32]
   27d7e:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   27d80:	2327      	movs	r3, #39	; 0x27
   27d82:	18fb      	adds	r3, r7, r3
   27d84:	2200      	movs	r2, #0
   27d86:	701a      	strb	r2, [r3, #0]
   27d88:	e010      	b.n	27dac <spi_init+0xdc>
		module->callback[i]        = NULL;
   27d8a:	2327      	movs	r3, #39	; 0x27
   27d8c:	18fb      	adds	r3, r7, r3
   27d8e:	781b      	ldrb	r3, [r3, #0]
   27d90:	68fa      	ldr	r2, [r7, #12]
   27d92:	3302      	adds	r3, #2
   27d94:	009b      	lsls	r3, r3, #2
   27d96:	18d3      	adds	r3, r2, r3
   27d98:	3304      	adds	r3, #4
   27d9a:	2200      	movs	r2, #0
   27d9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   27d9e:	2327      	movs	r3, #39	; 0x27
   27da0:	18fb      	adds	r3, r7, r3
   27da2:	781a      	ldrb	r2, [r3, #0]
   27da4:	2327      	movs	r3, #39	; 0x27
   27da6:	18fb      	adds	r3, r7, r3
   27da8:	3201      	adds	r2, #1
   27daa:	701a      	strb	r2, [r3, #0]
   27dac:	2327      	movs	r3, #39	; 0x27
   27dae:	18fb      	adds	r3, r7, r3
   27db0:	781b      	ldrb	r3, [r3, #0]
   27db2:	2b06      	cmp	r3, #6
   27db4:	d9e9      	bls.n	27d8a <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   27db6:	68fb      	ldr	r3, [r7, #12]
   27db8:	2200      	movs	r2, #0
   27dba:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   27dbc:	68fb      	ldr	r3, [r7, #12]
   27dbe:	2200      	movs	r2, #0
   27dc0:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   27dc2:	68fb      	ldr	r3, [r7, #12]
   27dc4:	2200      	movs	r2, #0
   27dc6:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   27dc8:	68fb      	ldr	r3, [r7, #12]
   27dca:	2200      	movs	r2, #0
   27dcc:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   27dce:	68fb      	ldr	r3, [r7, #12]
   27dd0:	2236      	movs	r2, #54	; 0x36
   27dd2:	2100      	movs	r1, #0
   27dd4:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   27dd6:	68fb      	ldr	r3, [r7, #12]
   27dd8:	2237      	movs	r2, #55	; 0x37
   27dda:	2100      	movs	r1, #0
   27ddc:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   27dde:	68fb      	ldr	r3, [r7, #12]
   27de0:	2238      	movs	r2, #56	; 0x38
   27de2:	2100      	movs	r1, #0
   27de4:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   27de6:	68fb      	ldr	r3, [r7, #12]
   27de8:	2203      	movs	r2, #3
   27dea:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   27dec:	68fb      	ldr	r3, [r7, #12]
   27dee:	2200      	movs	r2, #0
   27df0:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   27df2:	68fb      	ldr	r3, [r7, #12]
   27df4:	681b      	ldr	r3, [r3, #0]
   27df6:	2213      	movs	r2, #19
   27df8:	18bc      	adds	r4, r7, r2
   27dfa:	0018      	movs	r0, r3
   27dfc:	4b0e      	ldr	r3, [pc, #56]	; (27e38 <spi_init+0x168>)
   27dfe:	4798      	blx	r3
   27e00:	0003      	movs	r3, r0
   27e02:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   27e04:	4a12      	ldr	r2, [pc, #72]	; (27e50 <spi_init+0x180>)
   27e06:	2313      	movs	r3, #19
   27e08:	18fb      	adds	r3, r7, r3
   27e0a:	781b      	ldrb	r3, [r3, #0]
   27e0c:	0011      	movs	r1, r2
   27e0e:	0018      	movs	r0, r3
   27e10:	4b10      	ldr	r3, [pc, #64]	; (27e54 <spi_init+0x184>)
   27e12:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   27e14:	2313      	movs	r3, #19
   27e16:	18fb      	adds	r3, r7, r3
   27e18:	781a      	ldrb	r2, [r3, #0]
   27e1a:	4b0f      	ldr	r3, [pc, #60]	; (27e58 <spi_init+0x188>)
   27e1c:	0092      	lsls	r2, r2, #2
   27e1e:	68f9      	ldr	r1, [r7, #12]
   27e20:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   27e22:	687a      	ldr	r2, [r7, #4]
   27e24:	68fb      	ldr	r3, [r7, #12]
   27e26:	0011      	movs	r1, r2
   27e28:	0018      	movs	r0, r3
   27e2a:	4b0c      	ldr	r3, [pc, #48]	; (27e5c <spi_init+0x18c>)
   27e2c:	4798      	blx	r3
   27e2e:	0003      	movs	r3, r0
}
   27e30:	0018      	movs	r0, r3
   27e32:	46bd      	mov	sp, r7
   27e34:	b00b      	add	sp, #44	; 0x2c
   27e36:	bd90      	pop	{r4, r7, pc}
   27e38:	00027451 	.word	0x00027451
   27e3c:	0002770d 	.word	0x0002770d
   27e40:	000276f5 	.word	0x000276f5
   27e44:	00029ce1 	.word	0x00029ce1
   27e48:	00029d25 	.word	0x00029d25
   27e4c:	00027209 	.word	0x00027209
   27e50:	00028329 	.word	0x00028329
   27e54:	000274b5 	.word	0x000274b5
   27e58:	20005c04 	.word	0x20005c04
   27e5c:	00027ac1 	.word	0x00027ac1

00027e60 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   27e60:	b590      	push	{r4, r7, lr}
   27e62:	b087      	sub	sp, #28
   27e64:	af00      	add	r7, sp, #0
   27e66:	60f8      	str	r0, [r7, #12]
   27e68:	60b9      	str	r1, [r7, #8]
   27e6a:	0019      	movs	r1, r3
   27e6c:	1dbb      	adds	r3, r7, #6
   27e6e:	801a      	strh	r2, [r3, #0]
   27e70:	1d3b      	adds	r3, r7, #4
   27e72:	1c0a      	adds	r2, r1, #0
   27e74:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   27e76:	68fb      	ldr	r3, [r7, #12]
   27e78:	2238      	movs	r2, #56	; 0x38
   27e7a:	5c9b      	ldrb	r3, [r3, r2]
   27e7c:	b2db      	uxtb	r3, r3
   27e7e:	2b05      	cmp	r3, #5
   27e80:	d101      	bne.n	27e86 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   27e82:	2305      	movs	r3, #5
   27e84:	e07a      	b.n	27f7c <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   27e86:	1dbb      	adds	r3, r7, #6
   27e88:	881b      	ldrh	r3, [r3, #0]
   27e8a:	2b00      	cmp	r3, #0
   27e8c:	d101      	bne.n	27e92 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   27e8e:	2317      	movs	r3, #23
   27e90:	e074      	b.n	27f7c <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   27e92:	68fb      	ldr	r3, [r7, #12]
   27e94:	79db      	ldrb	r3, [r3, #7]
   27e96:	2201      	movs	r2, #1
   27e98:	4053      	eors	r3, r2
   27e9a:	b2db      	uxtb	r3, r3
   27e9c:	2b00      	cmp	r3, #0
   27e9e:	d001      	beq.n	27ea4 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   27ea0:	231c      	movs	r3, #28
   27ea2:	e06b      	b.n	27f7c <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   27ea4:	2316      	movs	r3, #22
   27ea6:	18fb      	adds	r3, r7, r3
   27ea8:	2200      	movs	r2, #0
   27eaa:	801a      	strh	r2, [r3, #0]

	while (length--) {
   27eac:	e05e      	b.n	27f6c <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   27eae:	68fb      	ldr	r3, [r7, #12]
   27eb0:	795b      	ldrb	r3, [r3, #5]
   27eb2:	2b01      	cmp	r3, #1
   27eb4:	d112      	bne.n	27edc <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   27eb6:	46c0      	nop			; (mov r8, r8)
   27eb8:	68fb      	ldr	r3, [r7, #12]
   27eba:	0018      	movs	r0, r3
   27ebc:	4b31      	ldr	r3, [pc, #196]	; (27f84 <spi_read_buffer_wait+0x124>)
   27ebe:	4798      	blx	r3
   27ec0:	0003      	movs	r3, r0
   27ec2:	001a      	movs	r2, r3
   27ec4:	2301      	movs	r3, #1
   27ec6:	4053      	eors	r3, r2
   27ec8:	b2db      	uxtb	r3, r3
   27eca:	2b00      	cmp	r3, #0
   27ecc:	d1f4      	bne.n	27eb8 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   27ece:	1d3b      	adds	r3, r7, #4
   27ed0:	881a      	ldrh	r2, [r3, #0]
   27ed2:	68fb      	ldr	r3, [r7, #12]
   27ed4:	0011      	movs	r1, r2
   27ed6:	0018      	movs	r0, r3
   27ed8:	4b2b      	ldr	r3, [pc, #172]	; (27f88 <spi_read_buffer_wait+0x128>)
   27eda:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   27edc:	46c0      	nop			; (mov r8, r8)
   27ede:	68fb      	ldr	r3, [r7, #12]
   27ee0:	0018      	movs	r0, r3
   27ee2:	4b2a      	ldr	r3, [pc, #168]	; (27f8c <spi_read_buffer_wait+0x12c>)
   27ee4:	4798      	blx	r3
   27ee6:	0003      	movs	r3, r0
   27ee8:	001a      	movs	r2, r3
   27eea:	2301      	movs	r3, #1
   27eec:	4053      	eors	r3, r2
   27eee:	b2db      	uxtb	r3, r3
   27ef0:	2b00      	cmp	r3, #0
   27ef2:	d1f4      	bne.n	27ede <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   27ef4:	2312      	movs	r3, #18
   27ef6:	18fb      	adds	r3, r7, r3
   27ef8:	2200      	movs	r2, #0
   27efa:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   27efc:	2315      	movs	r3, #21
   27efe:	18fc      	adds	r4, r7, r3
   27f00:	2312      	movs	r3, #18
   27f02:	18fa      	adds	r2, r7, r3
   27f04:	68fb      	ldr	r3, [r7, #12]
   27f06:	0011      	movs	r1, r2
   27f08:	0018      	movs	r0, r3
   27f0a:	4b21      	ldr	r3, [pc, #132]	; (27f90 <spi_read_buffer_wait+0x130>)
   27f0c:	4798      	blx	r3
   27f0e:	0003      	movs	r3, r0
   27f10:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   27f12:	2315      	movs	r3, #21
   27f14:	18fb      	adds	r3, r7, r3
   27f16:	781b      	ldrb	r3, [r3, #0]
   27f18:	2b00      	cmp	r3, #0
   27f1a:	d003      	beq.n	27f24 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   27f1c:	2315      	movs	r3, #21
   27f1e:	18fb      	adds	r3, r7, r3
   27f20:	781b      	ldrb	r3, [r3, #0]
   27f22:	e02b      	b.n	27f7c <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   27f24:	2316      	movs	r3, #22
   27f26:	18fb      	adds	r3, r7, r3
   27f28:	881b      	ldrh	r3, [r3, #0]
   27f2a:	2216      	movs	r2, #22
   27f2c:	18ba      	adds	r2, r7, r2
   27f2e:	1c59      	adds	r1, r3, #1
   27f30:	8011      	strh	r1, [r2, #0]
   27f32:	001a      	movs	r2, r3
   27f34:	68bb      	ldr	r3, [r7, #8]
   27f36:	189b      	adds	r3, r3, r2
   27f38:	2212      	movs	r2, #18
   27f3a:	18ba      	adds	r2, r7, r2
   27f3c:	8812      	ldrh	r2, [r2, #0]
   27f3e:	b2d2      	uxtb	r2, r2
   27f40:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27f42:	68fb      	ldr	r3, [r7, #12]
   27f44:	799b      	ldrb	r3, [r3, #6]
   27f46:	2b01      	cmp	r3, #1
   27f48:	d110      	bne.n	27f6c <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   27f4a:	2316      	movs	r3, #22
   27f4c:	18fb      	adds	r3, r7, r3
   27f4e:	881b      	ldrh	r3, [r3, #0]
   27f50:	2216      	movs	r2, #22
   27f52:	18ba      	adds	r2, r7, r2
   27f54:	1c59      	adds	r1, r3, #1
   27f56:	8011      	strh	r1, [r2, #0]
   27f58:	001a      	movs	r2, r3
   27f5a:	68bb      	ldr	r3, [r7, #8]
   27f5c:	189b      	adds	r3, r3, r2
   27f5e:	2212      	movs	r2, #18
   27f60:	18ba      	adds	r2, r7, r2
   27f62:	8812      	ldrh	r2, [r2, #0]
   27f64:	0a12      	lsrs	r2, r2, #8
   27f66:	b292      	uxth	r2, r2
   27f68:	b2d2      	uxtb	r2, r2
   27f6a:	701a      	strb	r2, [r3, #0]
	while (length--) {
   27f6c:	1dbb      	adds	r3, r7, #6
   27f6e:	881b      	ldrh	r3, [r3, #0]
   27f70:	1dba      	adds	r2, r7, #6
   27f72:	1e59      	subs	r1, r3, #1
   27f74:	8011      	strh	r1, [r2, #0]
   27f76:	2b00      	cmp	r3, #0
   27f78:	d199      	bne.n	27eae <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   27f7a:	2300      	movs	r3, #0
}
   27f7c:	0018      	movs	r0, r3
   27f7e:	46bd      	mov	sp, r7
   27f80:	b007      	add	sp, #28
   27f82:	bd90      	pop	{r4, r7, pc}
   27f84:	000278d9 	.word	0x000278d9
   27f88:	00027929 	.word	0x00027929
   27f8c:	00027901 	.word	0x00027901
   27f90:	00027971 	.word	0x00027971

00027f94 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   27f94:	b580      	push	{r7, lr}
   27f96:	b086      	sub	sp, #24
   27f98:	af00      	add	r7, sp, #0
   27f9a:	60f8      	str	r0, [r7, #12]
   27f9c:	60b9      	str	r1, [r7, #8]
   27f9e:	1dfb      	adds	r3, r7, #7
   27fa0:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   27fa2:	68fb      	ldr	r3, [r7, #12]
   27fa4:	795b      	ldrb	r3, [r3, #5]
   27fa6:	2b01      	cmp	r3, #1
   27fa8:	d001      	beq.n	27fae <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   27faa:	2315      	movs	r3, #21
   27fac:	e05c      	b.n	28068 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   27fae:	68fb      	ldr	r3, [r7, #12]
   27fb0:	7a1b      	ldrb	r3, [r3, #8]
   27fb2:	2201      	movs	r2, #1
   27fb4:	4053      	eors	r3, r2
   27fb6:	b2db      	uxtb	r3, r3
   27fb8:	2b00      	cmp	r3, #0
   27fba:	d054      	beq.n	28066 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   27fbc:	1dfb      	adds	r3, r7, #7
   27fbe:	781b      	ldrb	r3, [r3, #0]
   27fc0:	2b00      	cmp	r3, #0
   27fc2:	d04a      	beq.n	2805a <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   27fc4:	68bb      	ldr	r3, [r7, #8]
   27fc6:	785b      	ldrb	r3, [r3, #1]
   27fc8:	2b00      	cmp	r3, #0
   27fca:	d03f      	beq.n	2804c <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   27fcc:	68fb      	ldr	r3, [r7, #12]
   27fce:	0018      	movs	r0, r3
   27fd0:	4b27      	ldr	r3, [pc, #156]	; (28070 <spi_select_slave+0xdc>)
   27fd2:	4798      	blx	r3
   27fd4:	0003      	movs	r3, r0
   27fd6:	001a      	movs	r2, r3
   27fd8:	2301      	movs	r3, #1
   27fda:	4053      	eors	r3, r2
   27fdc:	b2db      	uxtb	r3, r3
   27fde:	2b00      	cmp	r3, #0
   27fe0:	d007      	beq.n	27ff2 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   27fe2:	68bb      	ldr	r3, [r7, #8]
   27fe4:	781b      	ldrb	r3, [r3, #0]
   27fe6:	2101      	movs	r1, #1
   27fe8:	0018      	movs	r0, r3
   27fea:	4b22      	ldr	r3, [pc, #136]	; (28074 <spi_select_slave+0xe0>)
   27fec:	4798      	blx	r3
					return STATUS_BUSY;
   27fee:	2305      	movs	r3, #5
   27ff0:	e03a      	b.n	28068 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   27ff2:	68bb      	ldr	r3, [r7, #8]
   27ff4:	781b      	ldrb	r3, [r3, #0]
   27ff6:	2100      	movs	r1, #0
   27ff8:	0018      	movs	r0, r3
   27ffa:	4b1e      	ldr	r3, [pc, #120]	; (28074 <spi_select_slave+0xe0>)
   27ffc:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   27ffe:	68bb      	ldr	r3, [r7, #8]
   28000:	789b      	ldrb	r3, [r3, #2]
   28002:	b29a      	uxth	r2, r3
   28004:	68fb      	ldr	r3, [r7, #12]
   28006:	0011      	movs	r1, r2
   28008:	0018      	movs	r0, r3
   2800a:	4b1b      	ldr	r3, [pc, #108]	; (28078 <spi_select_slave+0xe4>)
   2800c:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   2800e:	68fb      	ldr	r3, [r7, #12]
   28010:	79db      	ldrb	r3, [r3, #7]
   28012:	2201      	movs	r2, #1
   28014:	4053      	eors	r3, r2
   28016:	b2db      	uxtb	r3, r3
   28018:	2b00      	cmp	r3, #0
   2801a:	d024      	beq.n	28066 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   2801c:	46c0      	nop			; (mov r8, r8)
   2801e:	68fb      	ldr	r3, [r7, #12]
   28020:	0018      	movs	r0, r3
   28022:	4b16      	ldr	r3, [pc, #88]	; (2807c <spi_select_slave+0xe8>)
   28024:	4798      	blx	r3
   28026:	0003      	movs	r3, r0
   28028:	001a      	movs	r2, r3
   2802a:	2301      	movs	r3, #1
   2802c:	4053      	eors	r3, r2
   2802e:	b2db      	uxtb	r3, r3
   28030:	2b00      	cmp	r3, #0
   28032:	d1f4      	bne.n	2801e <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   28034:	2316      	movs	r3, #22
   28036:	18fb      	adds	r3, r7, r3
   28038:	2200      	movs	r2, #0
   2803a:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   2803c:	2316      	movs	r3, #22
   2803e:	18fa      	adds	r2, r7, r3
   28040:	68fb      	ldr	r3, [r7, #12]
   28042:	0011      	movs	r1, r2
   28044:	0018      	movs	r0, r3
   28046:	4b0e      	ldr	r3, [pc, #56]	; (28080 <spi_select_slave+0xec>)
   28048:	4798      	blx	r3
   2804a:	e00c      	b.n	28066 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   2804c:	68bb      	ldr	r3, [r7, #8]
   2804e:	781b      	ldrb	r3, [r3, #0]
   28050:	2100      	movs	r1, #0
   28052:	0018      	movs	r0, r3
   28054:	4b07      	ldr	r3, [pc, #28]	; (28074 <spi_select_slave+0xe0>)
   28056:	4798      	blx	r3
   28058:	e005      	b.n	28066 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   2805a:	68bb      	ldr	r3, [r7, #8]
   2805c:	781b      	ldrb	r3, [r3, #0]
   2805e:	2101      	movs	r1, #1
   28060:	0018      	movs	r0, r3
   28062:	4b04      	ldr	r3, [pc, #16]	; (28074 <spi_select_slave+0xe0>)
   28064:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   28066:	2300      	movs	r3, #0
}
   28068:	0018      	movs	r0, r3
   2806a:	46bd      	mov	sp, r7
   2806c:	b006      	add	sp, #24
   2806e:	bd80      	pop	{r7, pc}
   28070:	000278d9 	.word	0x000278d9
   28074:	000276a1 	.word	0x000276a1
   28078:	00027929 	.word	0x00027929
   2807c:	00027901 	.word	0x00027901
   28080:	00027971 	.word	0x00027971

00028084 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   28084:	b580      	push	{r7, lr}
   28086:	b086      	sub	sp, #24
   28088:	af00      	add	r7, sp, #0
   2808a:	60f8      	str	r0, [r7, #12]
   2808c:	60b9      	str	r1, [r7, #8]
   2808e:	1dbb      	adds	r3, r7, #6
   28090:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   28092:	68fb      	ldr	r3, [r7, #12]
   28094:	2238      	movs	r2, #56	; 0x38
   28096:	5c9b      	ldrb	r3, [r3, r2]
   28098:	b2db      	uxtb	r3, r3
   2809a:	2b05      	cmp	r3, #5
   2809c:	d101      	bne.n	280a2 <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   2809e:	2305      	movs	r3, #5
   280a0:	e087      	b.n	281b2 <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   280a2:	1dbb      	adds	r3, r7, #6
   280a4:	881b      	ldrh	r3, [r3, #0]
   280a6:	2b00      	cmp	r3, #0
   280a8:	d101      	bne.n	280ae <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   280aa:	2317      	movs	r3, #23
   280ac:	e081      	b.n	281b2 <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   280ae:	2316      	movs	r3, #22
   280b0:	18fb      	adds	r3, r7, r3
   280b2:	2200      	movs	r2, #0
   280b4:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   280b6:	2314      	movs	r3, #20
   280b8:	18fb      	adds	r3, r7, r3
   280ba:	1dba      	adds	r2, r7, #6
   280bc:	8812      	ldrh	r2, [r2, #0]
   280be:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   280c0:	e05f      	b.n	28182 <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   280c2:	46c0      	nop			; (mov r8, r8)
   280c4:	68fb      	ldr	r3, [r7, #12]
   280c6:	0018      	movs	r0, r3
   280c8:	4b3c      	ldr	r3, [pc, #240]	; (281bc <spi_write_buffer_wait+0x138>)
   280ca:	4798      	blx	r3
   280cc:	0003      	movs	r3, r0
   280ce:	001a      	movs	r2, r3
   280d0:	2301      	movs	r3, #1
   280d2:	4053      	eors	r3, r2
   280d4:	b2db      	uxtb	r3, r3
   280d6:	2b00      	cmp	r3, #0
   280d8:	d1f4      	bne.n	280c4 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   280da:	2316      	movs	r3, #22
   280dc:	18fb      	adds	r3, r7, r3
   280de:	881b      	ldrh	r3, [r3, #0]
   280e0:	2216      	movs	r2, #22
   280e2:	18ba      	adds	r2, r7, r2
   280e4:	1c59      	adds	r1, r3, #1
   280e6:	8011      	strh	r1, [r2, #0]
   280e8:	001a      	movs	r2, r3
   280ea:	68bb      	ldr	r3, [r7, #8]
   280ec:	189b      	adds	r3, r3, r2
   280ee:	781a      	ldrb	r2, [r3, #0]
   280f0:	2312      	movs	r3, #18
   280f2:	18fb      	adds	r3, r7, r3
   280f4:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   280f6:	68fb      	ldr	r3, [r7, #12]
   280f8:	799b      	ldrb	r3, [r3, #6]
   280fa:	2b01      	cmp	r3, #1
   280fc:	d115      	bne.n	2812a <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   280fe:	2316      	movs	r3, #22
   28100:	18fb      	adds	r3, r7, r3
   28102:	881b      	ldrh	r3, [r3, #0]
   28104:	2216      	movs	r2, #22
   28106:	18ba      	adds	r2, r7, r2
   28108:	1c59      	adds	r1, r3, #1
   2810a:	8011      	strh	r1, [r2, #0]
   2810c:	001a      	movs	r2, r3
   2810e:	68bb      	ldr	r3, [r7, #8]
   28110:	189b      	adds	r3, r3, r2
   28112:	781b      	ldrb	r3, [r3, #0]
   28114:	021b      	lsls	r3, r3, #8
   28116:	b21a      	sxth	r2, r3
   28118:	2312      	movs	r3, #18
   2811a:	18fb      	adds	r3, r7, r3
   2811c:	2100      	movs	r1, #0
   2811e:	5e5b      	ldrsh	r3, [r3, r1]
   28120:	4313      	orrs	r3, r2
   28122:	b21a      	sxth	r2, r3
   28124:	2312      	movs	r3, #18
   28126:	18fb      	adds	r3, r7, r3
   28128:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   2812a:	2312      	movs	r3, #18
   2812c:	18fb      	adds	r3, r7, r3
   2812e:	881a      	ldrh	r2, [r3, #0]
   28130:	68fb      	ldr	r3, [r7, #12]
   28132:	0011      	movs	r1, r2
   28134:	0018      	movs	r0, r3
   28136:	4b22      	ldr	r3, [pc, #136]	; (281c0 <spi_write_buffer_wait+0x13c>)
   28138:	4798      	blx	r3

		if (module->receiver_enabled) {
   2813a:	68fb      	ldr	r3, [r7, #12]
   2813c:	79db      	ldrb	r3, [r3, #7]
   2813e:	2214      	movs	r2, #20
   28140:	18ba      	adds	r2, r7, r2
   28142:	2114      	movs	r1, #20
   28144:	1879      	adds	r1, r7, r1
   28146:	8809      	ldrh	r1, [r1, #0]
   28148:	8011      	strh	r1, [r2, #0]
   2814a:	2b00      	cmp	r3, #0
   2814c:	d019      	beq.n	28182 <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   2814e:	46c0      	nop			; (mov r8, r8)
   28150:	68fb      	ldr	r3, [r7, #12]
   28152:	0018      	movs	r0, r3
   28154:	4b1b      	ldr	r3, [pc, #108]	; (281c4 <spi_write_buffer_wait+0x140>)
   28156:	4798      	blx	r3
   28158:	0003      	movs	r3, r0
   2815a:	001a      	movs	r2, r3
   2815c:	2301      	movs	r3, #1
   2815e:	4053      	eors	r3, r2
   28160:	b2db      	uxtb	r3, r3
   28162:	2b00      	cmp	r3, #0
   28164:	d1f4      	bne.n	28150 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   28166:	2310      	movs	r3, #16
   28168:	18fa      	adds	r2, r7, r3
   2816a:	68fb      	ldr	r3, [r7, #12]
   2816c:	0011      	movs	r1, r2
   2816e:	0018      	movs	r0, r3
   28170:	4b15      	ldr	r3, [pc, #84]	; (281c8 <spi_write_buffer_wait+0x144>)
   28172:	4798      	blx	r3
			flush_length--;
   28174:	2314      	movs	r3, #20
   28176:	18fb      	adds	r3, r7, r3
   28178:	881a      	ldrh	r2, [r3, #0]
   2817a:	2314      	movs	r3, #20
   2817c:	18fb      	adds	r3, r7, r3
   2817e:	3a01      	subs	r2, #1
   28180:	801a      	strh	r2, [r3, #0]
	while (length--) {
   28182:	1dbb      	adds	r3, r7, #6
   28184:	881b      	ldrh	r3, [r3, #0]
   28186:	1dba      	adds	r2, r7, #6
   28188:	1e59      	subs	r1, r3, #1
   2818a:	8011      	strh	r1, [r2, #0]
   2818c:	2b00      	cmp	r3, #0
   2818e:	d198      	bne.n	280c2 <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   28190:	68fb      	ldr	r3, [r7, #12]
   28192:	795b      	ldrb	r3, [r3, #5]
   28194:	2b01      	cmp	r3, #1
   28196:	d10b      	bne.n	281b0 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   28198:	46c0      	nop			; (mov r8, r8)
   2819a:	68fb      	ldr	r3, [r7, #12]
   2819c:	0018      	movs	r0, r3
   2819e:	4b0b      	ldr	r3, [pc, #44]	; (281cc <spi_write_buffer_wait+0x148>)
   281a0:	4798      	blx	r3
   281a2:	0003      	movs	r3, r0
   281a4:	001a      	movs	r2, r3
   281a6:	2301      	movs	r3, #1
   281a8:	4053      	eors	r3, r2
   281aa:	b2db      	uxtb	r3, r3
   281ac:	2b00      	cmp	r3, #0
   281ae:	d1f4      	bne.n	2819a <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   281b0:	2300      	movs	r3, #0
}
   281b2:	0018      	movs	r0, r3
   281b4:	46bd      	mov	sp, r7
   281b6:	b006      	add	sp, #24
   281b8:	bd80      	pop	{r7, pc}
   281ba:	46c0      	nop			; (mov r8, r8)
   281bc:	000278d9 	.word	0x000278d9
   281c0:	00027929 	.word	0x00027929
   281c4:	00027901 	.word	0x00027901
   281c8:	00027971 	.word	0x00027971
   281cc:	000278b1 	.word	0x000278b1

000281d0 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   281d0:	b580      	push	{r7, lr}
   281d2:	b084      	sub	sp, #16
   281d4:	af00      	add	r7, sp, #0
   281d6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   281d8:	687b      	ldr	r3, [r7, #4]
   281da:	681b      	ldr	r3, [r3, #0]
   281dc:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   281de:	687b      	ldr	r3, [r7, #4]
   281e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   281e2:	781b      	ldrb	r3, [r3, #0]
   281e4:	b2da      	uxtb	r2, r3
   281e6:	230e      	movs	r3, #14
   281e8:	18fb      	adds	r3, r7, r3
   281ea:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   281ec:	687b      	ldr	r3, [r7, #4]
   281ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   281f0:	1c5a      	adds	r2, r3, #1
   281f2:	687b      	ldr	r3, [r7, #4]
   281f4:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   281f6:	687b      	ldr	r3, [r7, #4]
   281f8:	799b      	ldrb	r3, [r3, #6]
   281fa:	2b01      	cmp	r3, #1
   281fc:	d113      	bne.n	28226 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   281fe:	687b      	ldr	r3, [r7, #4]
   28200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28202:	781b      	ldrb	r3, [r3, #0]
   28204:	b2db      	uxtb	r3, r3
   28206:	021b      	lsls	r3, r3, #8
   28208:	b21a      	sxth	r2, r3
   2820a:	230e      	movs	r3, #14
   2820c:	18fb      	adds	r3, r7, r3
   2820e:	2100      	movs	r1, #0
   28210:	5e5b      	ldrsh	r3, [r3, r1]
   28212:	4313      	orrs	r3, r2
   28214:	b21a      	sxth	r2, r3
   28216:	230e      	movs	r3, #14
   28218:	18fb      	adds	r3, r7, r3
   2821a:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   2821c:	687b      	ldr	r3, [r7, #4]
   2821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28220:	1c5a      	adds	r2, r3, #1
   28222:	687b      	ldr	r3, [r7, #4]
   28224:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   28226:	230e      	movs	r3, #14
   28228:	18fb      	adds	r3, r7, r3
   2822a:	881b      	ldrh	r3, [r3, #0]
   2822c:	05db      	lsls	r3, r3, #23
   2822e:	0dda      	lsrs	r2, r3, #23
   28230:	68bb      	ldr	r3, [r7, #8]
   28232:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   28234:	687b      	ldr	r3, [r7, #4]
   28236:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   28238:	b29b      	uxth	r3, r3
   2823a:	3b01      	subs	r3, #1
   2823c:	b29a      	uxth	r2, r3
   2823e:	687b      	ldr	r3, [r7, #4]
   28240:	869a      	strh	r2, [r3, #52]	; 0x34
}
   28242:	46c0      	nop			; (mov r8, r8)
   28244:	46bd      	mov	sp, r7
   28246:	b004      	add	sp, #16
   28248:	bd80      	pop	{r7, pc}
	...

0002824c <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   2824c:	b580      	push	{r7, lr}
   2824e:	b084      	sub	sp, #16
   28250:	af00      	add	r7, sp, #0
   28252:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28254:	687b      	ldr	r3, [r7, #4]
   28256:	681b      	ldr	r3, [r3, #0]
   28258:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   2825a:	4b08      	ldr	r3, [pc, #32]	; (2827c <_spi_write_dummy+0x30>)
   2825c:	881b      	ldrh	r3, [r3, #0]
   2825e:	001a      	movs	r2, r3
   28260:	68fb      	ldr	r3, [r7, #12]
   28262:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   28264:	687b      	ldr	r3, [r7, #4]
   28266:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28268:	b29b      	uxth	r3, r3
   2826a:	3b01      	subs	r3, #1
   2826c:	b29a      	uxth	r2, r3
   2826e:	687b      	ldr	r3, [r7, #4]
   28270:	865a      	strh	r2, [r3, #50]	; 0x32
}
   28272:	46c0      	nop			; (mov r8, r8)
   28274:	46bd      	mov	sp, r7
   28276:	b004      	add	sp, #16
   28278:	bd80      	pop	{r7, pc}
   2827a:	46c0      	nop			; (mov r8, r8)
   2827c:	20005c1c 	.word	0x20005c1c

00028280 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   28280:	b580      	push	{r7, lr}
   28282:	b084      	sub	sp, #16
   28284:	af00      	add	r7, sp, #0
   28286:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28288:	687b      	ldr	r3, [r7, #4]
   2828a:	681b      	ldr	r3, [r3, #0]
   2828c:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   2828e:	230a      	movs	r3, #10
   28290:	18fb      	adds	r3, r7, r3
   28292:	2200      	movs	r2, #0
   28294:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   28296:	68fb      	ldr	r3, [r7, #12]
   28298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2829a:	230a      	movs	r3, #10
   2829c:	18fb      	adds	r3, r7, r3
   2829e:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   282a0:	687b      	ldr	r3, [r7, #4]
   282a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   282a4:	b29b      	uxth	r3, r3
   282a6:	3b01      	subs	r3, #1
   282a8:	b29a      	uxth	r2, r3
   282aa:	687b      	ldr	r3, [r7, #4]
   282ac:	865a      	strh	r2, [r3, #50]	; 0x32
}
   282ae:	46c0      	nop			; (mov r8, r8)
   282b0:	46bd      	mov	sp, r7
   282b2:	b004      	add	sp, #16
   282b4:	bd80      	pop	{r7, pc}

000282b6 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   282b6:	b580      	push	{r7, lr}
   282b8:	b084      	sub	sp, #16
   282ba:	af00      	add	r7, sp, #0
   282bc:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   282be:	687b      	ldr	r3, [r7, #4]
   282c0:	681b      	ldr	r3, [r3, #0]
   282c2:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   282c4:	68fb      	ldr	r3, [r7, #12]
   282c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   282c8:	b29a      	uxth	r2, r3
   282ca:	230a      	movs	r3, #10
   282cc:	18fb      	adds	r3, r7, r3
   282ce:	05d2      	lsls	r2, r2, #23
   282d0:	0dd2      	lsrs	r2, r2, #23
   282d2:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   282d4:	687b      	ldr	r3, [r7, #4]
   282d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   282d8:	220a      	movs	r2, #10
   282da:	18ba      	adds	r2, r7, r2
   282dc:	8812      	ldrh	r2, [r2, #0]
   282de:	b2d2      	uxtb	r2, r2
   282e0:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   282e2:	687b      	ldr	r3, [r7, #4]
   282e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   282e6:	1c5a      	adds	r2, r3, #1
   282e8:	687b      	ldr	r3, [r7, #4]
   282ea:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   282ec:	687b      	ldr	r3, [r7, #4]
   282ee:	799b      	ldrb	r3, [r3, #6]
   282f0:	2b01      	cmp	r3, #1
   282f2:	d10d      	bne.n	28310 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   282f4:	687b      	ldr	r3, [r7, #4]
   282f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   282f8:	220a      	movs	r2, #10
   282fa:	18ba      	adds	r2, r7, r2
   282fc:	8812      	ldrh	r2, [r2, #0]
   282fe:	0a12      	lsrs	r2, r2, #8
   28300:	b292      	uxth	r2, r2
   28302:	b2d2      	uxtb	r2, r2
   28304:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   28306:	687b      	ldr	r3, [r7, #4]
   28308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2830a:	1c5a      	adds	r2, r3, #1
   2830c:	687b      	ldr	r3, [r7, #4]
   2830e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   28310:	687b      	ldr	r3, [r7, #4]
   28312:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   28314:	b29b      	uxth	r3, r3
   28316:	3b01      	subs	r3, #1
   28318:	b29a      	uxth	r2, r3
   2831a:	687b      	ldr	r3, [r7, #4]
   2831c:	861a      	strh	r2, [r3, #48]	; 0x30
}
   2831e:	46c0      	nop			; (mov r8, r8)
   28320:	46bd      	mov	sp, r7
   28322:	b004      	add	sp, #16
   28324:	bd80      	pop	{r7, pc}
	...

00028328 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   28328:	b580      	push	{r7, lr}
   2832a:	b086      	sub	sp, #24
   2832c:	af00      	add	r7, sp, #0
   2832e:	0002      	movs	r2, r0
   28330:	1dfb      	adds	r3, r7, #7
   28332:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   28334:	1dfb      	adds	r3, r7, #7
   28336:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   28338:	4b96      	ldr	r3, [pc, #600]	; (28594 <_spi_interrupt_handler+0x26c>)
   2833a:	0092      	lsls	r2, r2, #2
   2833c:	58d3      	ldr	r3, [r2, r3]
   2833e:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28340:	697b      	ldr	r3, [r7, #20]
   28342:	681b      	ldr	r3, [r3, #0]
   28344:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   28346:	697b      	ldr	r3, [r7, #20]
   28348:	2237      	movs	r2, #55	; 0x37
   2834a:	5c9a      	ldrb	r2, [r3, r2]
   2834c:	697b      	ldr	r3, [r7, #20]
   2834e:	2136      	movs	r1, #54	; 0x36
   28350:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   28352:	230f      	movs	r3, #15
   28354:	18fb      	adds	r3, r7, r3
   28356:	400a      	ands	r2, r1
   28358:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   2835a:	693b      	ldr	r3, [r7, #16]
   2835c:	7e1b      	ldrb	r3, [r3, #24]
   2835e:	b2da      	uxtb	r2, r3
   28360:	230c      	movs	r3, #12
   28362:	18fb      	adds	r3, r7, r3
   28364:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   28366:	693b      	ldr	r3, [r7, #16]
   28368:	7d9b      	ldrb	r3, [r3, #22]
   2836a:	b2db      	uxtb	r3, r3
   2836c:	b29a      	uxth	r2, r3
   2836e:	230c      	movs	r3, #12
   28370:	18fb      	adds	r3, r7, r3
   28372:	210c      	movs	r1, #12
   28374:	1879      	adds	r1, r7, r1
   28376:	8809      	ldrh	r1, [r1, #0]
   28378:	400a      	ands	r2, r1
   2837a:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   2837c:	230c      	movs	r3, #12
   2837e:	18fb      	adds	r3, r7, r3
   28380:	881b      	ldrh	r3, [r3, #0]
   28382:	2201      	movs	r2, #1
   28384:	4013      	ands	r3, r2
   28386:	d038      	beq.n	283fa <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   28388:	697b      	ldr	r3, [r7, #20]
   2838a:	795b      	ldrb	r3, [r3, #5]
   2838c:	2b01      	cmp	r3, #1
   2838e:	d110      	bne.n	283b2 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   28390:	697b      	ldr	r3, [r7, #20]
   28392:	7a5b      	ldrb	r3, [r3, #9]
   28394:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   28396:	2b00      	cmp	r3, #0
   28398:	d10b      	bne.n	283b2 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   2839a:	697b      	ldr	r3, [r7, #20]
   2839c:	0018      	movs	r0, r3
   2839e:	4b7e      	ldr	r3, [pc, #504]	; (28598 <_spi_interrupt_handler+0x270>)
   283a0:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   283a2:	697b      	ldr	r3, [r7, #20]
   283a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   283a6:	b29b      	uxth	r3, r3
   283a8:	2b00      	cmp	r3, #0
   283aa:	d102      	bne.n	283b2 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   283ac:	693b      	ldr	r3, [r7, #16]
   283ae:	2201      	movs	r2, #1
   283b0:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   283b2:	697b      	ldr	r3, [r7, #20]
   283b4:	795b      	ldrb	r3, [r3, #5]
		if (0
   283b6:	2b01      	cmp	r3, #1
   283b8:	d11f      	bne.n	283fa <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   283ba:	697b      	ldr	r3, [r7, #20]
   283bc:	7a5b      	ldrb	r3, [r3, #9]
   283be:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   283c0:	2b00      	cmp	r3, #0
   283c2:	d01a      	beq.n	283fa <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   283c4:	697b      	ldr	r3, [r7, #20]
   283c6:	0018      	movs	r0, r3
   283c8:	4b74      	ldr	r3, [pc, #464]	; (2859c <_spi_interrupt_handler+0x274>)
   283ca:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   283cc:	697b      	ldr	r3, [r7, #20]
   283ce:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   283d0:	b29b      	uxth	r3, r3
   283d2:	2b00      	cmp	r3, #0
   283d4:	d111      	bne.n	283fa <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   283d6:	693b      	ldr	r3, [r7, #16]
   283d8:	2201      	movs	r2, #1
   283da:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   283dc:	697b      	ldr	r3, [r7, #20]
   283de:	7a5b      	ldrb	r3, [r3, #9]
   283e0:	b2db      	uxtb	r3, r3
   283e2:	2b01      	cmp	r3, #1
   283e4:	d109      	bne.n	283fa <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   283e6:	697b      	ldr	r3, [r7, #20]
   283e8:	79db      	ldrb	r3, [r3, #7]
   283ea:	2201      	movs	r2, #1
   283ec:	4053      	eors	r3, r2
   283ee:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   283f0:	2b00      	cmp	r3, #0
   283f2:	d002      	beq.n	283fa <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   283f4:	693b      	ldr	r3, [r7, #16]
   283f6:	2202      	movs	r2, #2
   283f8:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   283fa:	230c      	movs	r3, #12
   283fc:	18fb      	adds	r3, r7, r3
   283fe:	881b      	ldrh	r3, [r3, #0]
   28400:	2204      	movs	r2, #4
   28402:	4013      	ands	r3, r2
   28404:	d100      	bne.n	28408 <_spi_interrupt_handler+0xe0>
   28406:	e07e      	b.n	28506 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   28408:	693b      	ldr	r3, [r7, #16]
   2840a:	8b5b      	ldrh	r3, [r3, #26]
   2840c:	b29b      	uxth	r3, r3
   2840e:	001a      	movs	r2, r3
   28410:	2304      	movs	r3, #4
   28412:	4013      	ands	r3, r2
   28414:	d022      	beq.n	2845c <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   28416:	697b      	ldr	r3, [r7, #20]
   28418:	7a5b      	ldrb	r3, [r3, #9]
   2841a:	b2db      	uxtb	r3, r3
   2841c:	2b01      	cmp	r3, #1
   2841e:	d014      	beq.n	2844a <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   28420:	697b      	ldr	r3, [r7, #20]
   28422:	2238      	movs	r2, #56	; 0x38
   28424:	211e      	movs	r1, #30
   28426:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   28428:	697b      	ldr	r3, [r7, #20]
   2842a:	2203      	movs	r2, #3
   2842c:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   2842e:	693b      	ldr	r3, [r7, #16]
   28430:	2205      	movs	r2, #5
   28432:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   28434:	230f      	movs	r3, #15
   28436:	18fb      	adds	r3, r7, r3
   28438:	781b      	ldrb	r3, [r3, #0]
   2843a:	2208      	movs	r2, #8
   2843c:	4013      	ands	r3, r2
   2843e:	d004      	beq.n	2844a <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   28440:	697b      	ldr	r3, [r7, #20]
   28442:	699b      	ldr	r3, [r3, #24]
   28444:	697a      	ldr	r2, [r7, #20]
   28446:	0010      	movs	r0, r2
   28448:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   2844a:	693b      	ldr	r3, [r7, #16]
   2844c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2844e:	230a      	movs	r3, #10
   28450:	18fb      	adds	r3, r7, r3
   28452:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   28454:	693b      	ldr	r3, [r7, #16]
   28456:	2204      	movs	r2, #4
   28458:	835a      	strh	r2, [r3, #26]
   2845a:	e054      	b.n	28506 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   2845c:	697b      	ldr	r3, [r7, #20]
   2845e:	7a5b      	ldrb	r3, [r3, #9]
   28460:	b2db      	uxtb	r3, r3
   28462:	2b01      	cmp	r3, #1
   28464:	d11e      	bne.n	284a4 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   28466:	697b      	ldr	r3, [r7, #20]
   28468:	0018      	movs	r0, r3
   2846a:	4b4d      	ldr	r3, [pc, #308]	; (285a0 <_spi_interrupt_handler+0x278>)
   2846c:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   2846e:	697b      	ldr	r3, [r7, #20]
   28470:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28472:	b29b      	uxth	r3, r3
   28474:	2b00      	cmp	r3, #0
   28476:	d146      	bne.n	28506 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   28478:	693b      	ldr	r3, [r7, #16]
   2847a:	2204      	movs	r2, #4
   2847c:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   2847e:	697b      	ldr	r3, [r7, #20]
   28480:	2238      	movs	r2, #56	; 0x38
   28482:	2100      	movs	r1, #0
   28484:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   28486:	697b      	ldr	r3, [r7, #20]
   28488:	2203      	movs	r2, #3
   2848a:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   2848c:	230f      	movs	r3, #15
   2848e:	18fb      	adds	r3, r7, r3
   28490:	781b      	ldrb	r3, [r3, #0]
   28492:	2201      	movs	r2, #1
   28494:	4013      	ands	r3, r2
   28496:	d036      	beq.n	28506 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   28498:	697b      	ldr	r3, [r7, #20]
   2849a:	68db      	ldr	r3, [r3, #12]
   2849c:	697a      	ldr	r2, [r7, #20]
   2849e:	0010      	movs	r0, r2
   284a0:	4798      	blx	r3
   284a2:	e030      	b.n	28506 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   284a4:	697b      	ldr	r3, [r7, #20]
   284a6:	0018      	movs	r0, r3
   284a8:	4b3e      	ldr	r3, [pc, #248]	; (285a4 <_spi_interrupt_handler+0x27c>)
   284aa:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   284ac:	697b      	ldr	r3, [r7, #20]
   284ae:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   284b0:	b29b      	uxth	r3, r3
   284b2:	2b00      	cmp	r3, #0
   284b4:	d127      	bne.n	28506 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   284b6:	697b      	ldr	r3, [r7, #20]
   284b8:	2238      	movs	r2, #56	; 0x38
   284ba:	2100      	movs	r1, #0
   284bc:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   284be:	693b      	ldr	r3, [r7, #16]
   284c0:	2204      	movs	r2, #4
   284c2:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   284c4:	697b      	ldr	r3, [r7, #20]
   284c6:	7a5b      	ldrb	r3, [r3, #9]
   284c8:	b2db      	uxtb	r3, r3
   284ca:	2b02      	cmp	r3, #2
   284cc:	d10b      	bne.n	284e6 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   284ce:	230f      	movs	r3, #15
   284d0:	18fb      	adds	r3, r7, r3
   284d2:	781b      	ldrb	r3, [r3, #0]
   284d4:	2204      	movs	r2, #4
   284d6:	4013      	ands	r3, r2
   284d8:	d015      	beq.n	28506 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   284da:	697b      	ldr	r3, [r7, #20]
   284dc:	695b      	ldr	r3, [r3, #20]
   284de:	697a      	ldr	r2, [r7, #20]
   284e0:	0010      	movs	r0, r2
   284e2:	4798      	blx	r3
   284e4:	e00f      	b.n	28506 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   284e6:	697b      	ldr	r3, [r7, #20]
   284e8:	7a5b      	ldrb	r3, [r3, #9]
   284ea:	b2db      	uxtb	r3, r3
   284ec:	2b00      	cmp	r3, #0
   284ee:	d10a      	bne.n	28506 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   284f0:	230f      	movs	r3, #15
   284f2:	18fb      	adds	r3, r7, r3
   284f4:	781b      	ldrb	r3, [r3, #0]
   284f6:	2202      	movs	r2, #2
   284f8:	4013      	ands	r3, r2
   284fa:	d004      	beq.n	28506 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   284fc:	697b      	ldr	r3, [r7, #20]
   284fe:	691b      	ldr	r3, [r3, #16]
   28500:	697a      	ldr	r2, [r7, #20]
   28502:	0010      	movs	r0, r2
   28504:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   28506:	230c      	movs	r3, #12
   28508:	18fb      	adds	r3, r7, r3
   2850a:	881b      	ldrh	r3, [r3, #0]
   2850c:	2202      	movs	r2, #2
   2850e:	4013      	ands	r3, r2
   28510:	d024      	beq.n	2855c <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   28512:	697b      	ldr	r3, [r7, #20]
   28514:	795b      	ldrb	r3, [r3, #5]
   28516:	2b01      	cmp	r3, #1
   28518:	d120      	bne.n	2855c <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   2851a:	697b      	ldr	r3, [r7, #20]
   2851c:	7a5b      	ldrb	r3, [r3, #9]
   2851e:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   28520:	2b01      	cmp	r3, #1
   28522:	d11b      	bne.n	2855c <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   28524:	697b      	ldr	r3, [r7, #20]
   28526:	79db      	ldrb	r3, [r3, #7]
   28528:	2201      	movs	r2, #1
   2852a:	4053      	eors	r3, r2
   2852c:	b2db      	uxtb	r3, r3
   2852e:	2b00      	cmp	r3, #0
   28530:	d014      	beq.n	2855c <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   28532:	693b      	ldr	r3, [r7, #16]
   28534:	2202      	movs	r2, #2
   28536:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   28538:	697b      	ldr	r3, [r7, #20]
   2853a:	2203      	movs	r2, #3
   2853c:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   2853e:	697b      	ldr	r3, [r7, #20]
   28540:	2238      	movs	r2, #56	; 0x38
   28542:	2100      	movs	r1, #0
   28544:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   28546:	230f      	movs	r3, #15
   28548:	18fb      	adds	r3, r7, r3
   2854a:	781b      	ldrb	r3, [r3, #0]
   2854c:	2201      	movs	r2, #1
   2854e:	4013      	ands	r3, r2
   28550:	d004      	beq.n	2855c <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   28552:	697b      	ldr	r3, [r7, #20]
   28554:	68db      	ldr	r3, [r3, #12]
   28556:	697a      	ldr	r2, [r7, #20]
   28558:	0010      	movs	r0, r2
   2855a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   2855c:	230c      	movs	r3, #12
   2855e:	18fb      	adds	r3, r7, r3
   28560:	881b      	ldrh	r3, [r3, #0]
   28562:	2280      	movs	r2, #128	; 0x80
   28564:	4013      	ands	r3, r2
   28566:	d010      	beq.n	2858a <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   28568:	693b      	ldr	r3, [r7, #16]
   2856a:	2280      	movs	r2, #128	; 0x80
   2856c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   2856e:	693b      	ldr	r3, [r7, #16]
   28570:	2280      	movs	r2, #128	; 0x80
   28572:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   28574:	230f      	movs	r3, #15
   28576:	18fb      	adds	r3, r7, r3
   28578:	781b      	ldrb	r3, [r3, #0]
   2857a:	2240      	movs	r2, #64	; 0x40
   2857c:	4013      	ands	r3, r2
   2857e:	d004      	beq.n	2858a <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   28580:	697b      	ldr	r3, [r7, #20]
   28582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28584:	697a      	ldr	r2, [r7, #20]
   28586:	0010      	movs	r0, r2
   28588:	4798      	blx	r3
		}
	}
#  endif
}
   2858a:	46c0      	nop			; (mov r8, r8)
   2858c:	46bd      	mov	sp, r7
   2858e:	b006      	add	sp, #24
   28590:	bd80      	pop	{r7, pc}
   28592:	46c0      	nop			; (mov r8, r8)
   28594:	20005c04 	.word	0x20005c04
   28598:	0002824d 	.word	0x0002824d
   2859c:	000281d1 	.word	0x000281d1
   285a0:	00028281 	.word	0x00028281
   285a4:	000282b7 	.word	0x000282b7

000285a8 <system_gclk_chan_get_config_defaults>:
{
   285a8:	b580      	push	{r7, lr}
   285aa:	b082      	sub	sp, #8
   285ac:	af00      	add	r7, sp, #0
   285ae:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   285b0:	687b      	ldr	r3, [r7, #4]
   285b2:	2200      	movs	r2, #0
   285b4:	701a      	strb	r2, [r3, #0]
}
   285b6:	46c0      	nop			; (mov r8, r8)
   285b8:	46bd      	mov	sp, r7
   285ba:	b002      	add	sp, #8
   285bc:	bd80      	pop	{r7, pc}
	...

000285c0 <system_apb_clock_set_mask>:
{
   285c0:	b580      	push	{r7, lr}
   285c2:	b082      	sub	sp, #8
   285c4:	af00      	add	r7, sp, #0
   285c6:	0002      	movs	r2, r0
   285c8:	6039      	str	r1, [r7, #0]
   285ca:	1dfb      	adds	r3, r7, #7
   285cc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   285ce:	1dfb      	adds	r3, r7, #7
   285d0:	781b      	ldrb	r3, [r3, #0]
   285d2:	2b01      	cmp	r3, #1
   285d4:	d00a      	beq.n	285ec <system_apb_clock_set_mask+0x2c>
   285d6:	2b02      	cmp	r3, #2
   285d8:	d00f      	beq.n	285fa <system_apb_clock_set_mask+0x3a>
   285da:	2b00      	cmp	r3, #0
   285dc:	d114      	bne.n	28608 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   285de:	4b0e      	ldr	r3, [pc, #56]	; (28618 <system_apb_clock_set_mask+0x58>)
   285e0:	4a0d      	ldr	r2, [pc, #52]	; (28618 <system_apb_clock_set_mask+0x58>)
   285e2:	6991      	ldr	r1, [r2, #24]
   285e4:	683a      	ldr	r2, [r7, #0]
   285e6:	430a      	orrs	r2, r1
   285e8:	619a      	str	r2, [r3, #24]
			break;
   285ea:	e00f      	b.n	2860c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   285ec:	4b0a      	ldr	r3, [pc, #40]	; (28618 <system_apb_clock_set_mask+0x58>)
   285ee:	4a0a      	ldr	r2, [pc, #40]	; (28618 <system_apb_clock_set_mask+0x58>)
   285f0:	69d1      	ldr	r1, [r2, #28]
   285f2:	683a      	ldr	r2, [r7, #0]
   285f4:	430a      	orrs	r2, r1
   285f6:	61da      	str	r2, [r3, #28]
			break;
   285f8:	e008      	b.n	2860c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   285fa:	4b07      	ldr	r3, [pc, #28]	; (28618 <system_apb_clock_set_mask+0x58>)
   285fc:	4a06      	ldr	r2, [pc, #24]	; (28618 <system_apb_clock_set_mask+0x58>)
   285fe:	6a11      	ldr	r1, [r2, #32]
   28600:	683a      	ldr	r2, [r7, #0]
   28602:	430a      	orrs	r2, r1
   28604:	621a      	str	r2, [r3, #32]
			break;
   28606:	e001      	b.n	2860c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28608:	2317      	movs	r3, #23
   2860a:	e000      	b.n	2860e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2860c:	2300      	movs	r3, #0
}
   2860e:	0018      	movs	r0, r3
   28610:	46bd      	mov	sp, r7
   28612:	b002      	add	sp, #8
   28614:	bd80      	pop	{r7, pc}
   28616:	46c0      	nop			; (mov r8, r8)
   28618:	40000400 	.word	0x40000400

0002861c <system_pinmux_get_config_defaults>:
{
   2861c:	b580      	push	{r7, lr}
   2861e:	b082      	sub	sp, #8
   28620:	af00      	add	r7, sp, #0
   28622:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   28624:	687b      	ldr	r3, [r7, #4]
   28626:	2280      	movs	r2, #128	; 0x80
   28628:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2862a:	687b      	ldr	r3, [r7, #4]
   2862c:	2200      	movs	r2, #0
   2862e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   28630:	687b      	ldr	r3, [r7, #4]
   28632:	2201      	movs	r2, #1
   28634:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   28636:	687b      	ldr	r3, [r7, #4]
   28638:	2200      	movs	r2, #0
   2863a:	70da      	strb	r2, [r3, #3]
}
   2863c:	46c0      	nop			; (mov r8, r8)
   2863e:	46bd      	mov	sp, r7
   28640:	b002      	add	sp, #8
   28642:	bd80      	pop	{r7, pc}

00028644 <system_is_debugger_present>:
{
   28644:	b580      	push	{r7, lr}
   28646:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   28648:	4b05      	ldr	r3, [pc, #20]	; (28660 <system_is_debugger_present+0x1c>)
   2864a:	789b      	ldrb	r3, [r3, #2]
   2864c:	b2db      	uxtb	r3, r3
   2864e:	001a      	movs	r2, r3
   28650:	2302      	movs	r3, #2
   28652:	4013      	ands	r3, r2
   28654:	1e5a      	subs	r2, r3, #1
   28656:	4193      	sbcs	r3, r2
   28658:	b2db      	uxtb	r3, r3
}
   2865a:	0018      	movs	r0, r3
   2865c:	46bd      	mov	sp, r7
   2865e:	bd80      	pop	{r7, pc}
   28660:	41002000 	.word	0x41002000

00028664 <usart_is_syncing>:
{
   28664:	b580      	push	{r7, lr}
   28666:	b084      	sub	sp, #16
   28668:	af00      	add	r7, sp, #0
   2866a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   2866c:	687b      	ldr	r3, [r7, #4]
   2866e:	681b      	ldr	r3, [r3, #0]
   28670:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   28672:	68fb      	ldr	r3, [r7, #12]
   28674:	69db      	ldr	r3, [r3, #28]
   28676:	1e5a      	subs	r2, r3, #1
   28678:	4193      	sbcs	r3, r2
   2867a:	b2db      	uxtb	r3, r3
}
   2867c:	0018      	movs	r0, r3
   2867e:	46bd      	mov	sp, r7
   28680:	b004      	add	sp, #16
   28682:	bd80      	pop	{r7, pc}

00028684 <_usart_wait_for_sync>:
{
   28684:	b580      	push	{r7, lr}
   28686:	b082      	sub	sp, #8
   28688:	af00      	add	r7, sp, #0
   2868a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   2868c:	46c0      	nop			; (mov r8, r8)
   2868e:	687b      	ldr	r3, [r7, #4]
   28690:	0018      	movs	r0, r3
   28692:	4b04      	ldr	r3, [pc, #16]	; (286a4 <_usart_wait_for_sync+0x20>)
   28694:	4798      	blx	r3
   28696:	1e03      	subs	r3, r0, #0
   28698:	d1f9      	bne.n	2868e <_usart_wait_for_sync+0xa>
}
   2869a:	46c0      	nop			; (mov r8, r8)
   2869c:	46bd      	mov	sp, r7
   2869e:	b002      	add	sp, #8
   286a0:	bd80      	pop	{r7, pc}
   286a2:	46c0      	nop			; (mov r8, r8)
   286a4:	00028665 	.word	0x00028665

000286a8 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   286a8:	b5b0      	push	{r4, r5, r7, lr}
   286aa:	b08c      	sub	sp, #48	; 0x30
   286ac:	af02      	add	r7, sp, #8
   286ae:	6078      	str	r0, [r7, #4]
   286b0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   286b2:	687b      	ldr	r3, [r7, #4]
   286b4:	681b      	ldr	r3, [r3, #0]
   286b6:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   286b8:	687b      	ldr	r3, [r7, #4]
   286ba:	681b      	ldr	r3, [r3, #0]
   286bc:	0018      	movs	r0, r3
   286be:	4bab      	ldr	r3, [pc, #684]	; (2896c <_usart_set_config+0x2c4>)
   286c0:	4798      	blx	r3
   286c2:	0003      	movs	r3, r0
   286c4:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   286c6:	697b      	ldr	r3, [r7, #20]
   286c8:	3314      	adds	r3, #20
   286ca:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   286cc:	2300      	movs	r3, #0
   286ce:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   286d0:	2300      	movs	r3, #0
   286d2:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   286d4:	230a      	movs	r3, #10
   286d6:	18fb      	adds	r3, r7, r3
   286d8:	2200      	movs	r2, #0
   286da:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   286dc:	231f      	movs	r3, #31
   286de:	18fb      	adds	r3, r7, r3
   286e0:	2200      	movs	r2, #0
   286e2:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   286e4:	231e      	movs	r3, #30
   286e6:	18fb      	adds	r3, r7, r3
   286e8:	2210      	movs	r2, #16
   286ea:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   286ec:	683b      	ldr	r3, [r7, #0]
   286ee:	8a1b      	ldrh	r3, [r3, #16]
   286f0:	2280      	movs	r2, #128	; 0x80
   286f2:	01d2      	lsls	r2, r2, #7
   286f4:	4293      	cmp	r3, r2
   286f6:	d01c      	beq.n	28732 <_usart_set_config+0x8a>
   286f8:	2280      	movs	r2, #128	; 0x80
   286fa:	01d2      	lsls	r2, r2, #7
   286fc:	4293      	cmp	r3, r2
   286fe:	dc06      	bgt.n	2870e <_usart_set_config+0x66>
   28700:	2b00      	cmp	r3, #0
   28702:	d00d      	beq.n	28720 <_usart_set_config+0x78>
   28704:	2280      	movs	r2, #128	; 0x80
   28706:	0192      	lsls	r2, r2, #6
   28708:	4293      	cmp	r3, r2
   2870a:	d024      	beq.n	28756 <_usart_set_config+0xae>
   2870c:	e035      	b.n	2877a <_usart_set_config+0xd2>
   2870e:	22c0      	movs	r2, #192	; 0xc0
   28710:	01d2      	lsls	r2, r2, #7
   28712:	4293      	cmp	r3, r2
   28714:	d028      	beq.n	28768 <_usart_set_config+0xc0>
   28716:	2280      	movs	r2, #128	; 0x80
   28718:	0212      	lsls	r2, r2, #8
   2871a:	4293      	cmp	r3, r2
   2871c:	d012      	beq.n	28744 <_usart_set_config+0x9c>
   2871e:	e02c      	b.n	2877a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28720:	231f      	movs	r3, #31
   28722:	18fb      	adds	r3, r7, r3
   28724:	2200      	movs	r2, #0
   28726:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   28728:	231e      	movs	r3, #30
   2872a:	18fb      	adds	r3, r7, r3
   2872c:	2210      	movs	r2, #16
   2872e:	701a      	strb	r2, [r3, #0]
			break;
   28730:	e023      	b.n	2877a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28732:	231f      	movs	r3, #31
   28734:	18fb      	adds	r3, r7, r3
   28736:	2200      	movs	r2, #0
   28738:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2873a:	231e      	movs	r3, #30
   2873c:	18fb      	adds	r3, r7, r3
   2873e:	2208      	movs	r2, #8
   28740:	701a      	strb	r2, [r3, #0]
			break;
   28742:	e01a      	b.n	2877a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28744:	231f      	movs	r3, #31
   28746:	18fb      	adds	r3, r7, r3
   28748:	2200      	movs	r2, #0
   2874a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   2874c:	231e      	movs	r3, #30
   2874e:	18fb      	adds	r3, r7, r3
   28750:	2203      	movs	r2, #3
   28752:	701a      	strb	r2, [r3, #0]
			break;
   28754:	e011      	b.n	2877a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   28756:	231f      	movs	r3, #31
   28758:	18fb      	adds	r3, r7, r3
   2875a:	2201      	movs	r2, #1
   2875c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2875e:	231e      	movs	r3, #30
   28760:	18fb      	adds	r3, r7, r3
   28762:	2210      	movs	r2, #16
   28764:	701a      	strb	r2, [r3, #0]
			break;
   28766:	e008      	b.n	2877a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   28768:	231f      	movs	r3, #31
   2876a:	18fb      	adds	r3, r7, r3
   2876c:	2201      	movs	r2, #1
   2876e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   28770:	231e      	movs	r3, #30
   28772:	18fb      	adds	r3, r7, r3
   28774:	2208      	movs	r2, #8
   28776:	701a      	strb	r2, [r3, #0]
			break;
   28778:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   2877a:	683b      	ldr	r3, [r7, #0]
   2877c:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   2877e:	683b      	ldr	r3, [r7, #0]
   28780:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   28782:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   28784:	683b      	ldr	r3, [r7, #0]
   28786:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   28788:	4313      	orrs	r3, r2
		config->sample_rate |
   2878a:	683a      	ldr	r2, [r7, #0]
   2878c:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   2878e:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   28790:	683a      	ldr	r2, [r7, #0]
   28792:	7e12      	ldrb	r2, [r2, #24]
   28794:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   28796:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   28798:	683a      	ldr	r2, [r7, #0]
   2879a:	2126      	movs	r1, #38	; 0x26
   2879c:	5c52      	ldrb	r2, [r2, r1]
   2879e:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   287a0:	4313      	orrs	r3, r2
   287a2:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   287a4:	231d      	movs	r3, #29
   287a6:	18fb      	adds	r3, r7, r3
   287a8:	2200      	movs	r2, #0
   287aa:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   287ac:	683b      	ldr	r3, [r7, #0]
   287ae:	685b      	ldr	r3, [r3, #4]
   287b0:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   287b2:	68fb      	ldr	r3, [r7, #12]
   287b4:	2b00      	cmp	r3, #0
   287b6:	d01e      	beq.n	287f6 <_usart_set_config+0x14e>
   287b8:	2280      	movs	r2, #128	; 0x80
   287ba:	0552      	lsls	r2, r2, #21
   287bc:	4293      	cmp	r3, r2
   287be:	d14f      	bne.n	28860 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   287c0:	683b      	ldr	r3, [r7, #0]
   287c2:	2227      	movs	r2, #39	; 0x27
   287c4:	5c9b      	ldrb	r3, [r3, r2]
   287c6:	2201      	movs	r2, #1
   287c8:	4053      	eors	r3, r2
   287ca:	b2db      	uxtb	r3, r3
   287cc:	2b00      	cmp	r3, #0
   287ce:	d046      	beq.n	2885e <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   287d0:	683b      	ldr	r3, [r7, #0]
   287d2:	6a1d      	ldr	r5, [r3, #32]
   287d4:	693b      	ldr	r3, [r7, #16]
   287d6:	b2db      	uxtb	r3, r3
   287d8:	0018      	movs	r0, r3
   287da:	4b65      	ldr	r3, [pc, #404]	; (28970 <_usart_set_config+0x2c8>)
   287dc:	4798      	blx	r3
   287de:	0001      	movs	r1, r0
   287e0:	231d      	movs	r3, #29
   287e2:	18fc      	adds	r4, r7, r3
   287e4:	230a      	movs	r3, #10
   287e6:	18fb      	adds	r3, r7, r3
   287e8:	001a      	movs	r2, r3
   287ea:	0028      	movs	r0, r5
   287ec:	4b61      	ldr	r3, [pc, #388]	; (28974 <_usart_set_config+0x2cc>)
   287ee:	4798      	blx	r3
   287f0:	0003      	movs	r3, r0
   287f2:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   287f4:	e033      	b.n	2885e <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   287f6:	683b      	ldr	r3, [r7, #0]
   287f8:	2227      	movs	r2, #39	; 0x27
   287fa:	5c9b      	ldrb	r3, [r3, r2]
   287fc:	2b00      	cmp	r3, #0
   287fe:	d014      	beq.n	2882a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   28800:	683b      	ldr	r3, [r7, #0]
   28802:	6a18      	ldr	r0, [r3, #32]
   28804:	683b      	ldr	r3, [r7, #0]
   28806:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   28808:	231d      	movs	r3, #29
   2880a:	18fc      	adds	r4, r7, r3
   2880c:	231f      	movs	r3, #31
   2880e:	18fb      	adds	r3, r7, r3
   28810:	781d      	ldrb	r5, [r3, #0]
   28812:	230a      	movs	r3, #10
   28814:	18fa      	adds	r2, r7, r3
   28816:	231e      	movs	r3, #30
   28818:	18fb      	adds	r3, r7, r3
   2881a:	781b      	ldrb	r3, [r3, #0]
   2881c:	9300      	str	r3, [sp, #0]
   2881e:	002b      	movs	r3, r5
   28820:	4d55      	ldr	r5, [pc, #340]	; (28978 <_usart_set_config+0x2d0>)
   28822:	47a8      	blx	r5
   28824:	0003      	movs	r3, r0
   28826:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   28828:	e01a      	b.n	28860 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   2882a:	683b      	ldr	r3, [r7, #0]
   2882c:	6a1d      	ldr	r5, [r3, #32]
   2882e:	693b      	ldr	r3, [r7, #16]
   28830:	b2db      	uxtb	r3, r3
   28832:	0018      	movs	r0, r3
   28834:	4b4e      	ldr	r3, [pc, #312]	; (28970 <_usart_set_config+0x2c8>)
   28836:	4798      	blx	r3
				status_code =
   28838:	231d      	movs	r3, #29
   2883a:	18fc      	adds	r4, r7, r3
   2883c:	231f      	movs	r3, #31
   2883e:	18fb      	adds	r3, r7, r3
   28840:	7819      	ldrb	r1, [r3, #0]
   28842:	230a      	movs	r3, #10
   28844:	18fa      	adds	r2, r7, r3
   28846:	231e      	movs	r3, #30
   28848:	18fb      	adds	r3, r7, r3
   2884a:	781b      	ldrb	r3, [r3, #0]
   2884c:	9300      	str	r3, [sp, #0]
   2884e:	000b      	movs	r3, r1
   28850:	0001      	movs	r1, r0
   28852:	0028      	movs	r0, r5
   28854:	4d48      	ldr	r5, [pc, #288]	; (28978 <_usart_set_config+0x2d0>)
   28856:	47a8      	blx	r5
   28858:	0003      	movs	r3, r0
   2885a:	7023      	strb	r3, [r4, #0]
			break;
   2885c:	e000      	b.n	28860 <_usart_set_config+0x1b8>
			break;
   2885e:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   28860:	231d      	movs	r3, #29
   28862:	18fb      	adds	r3, r7, r3
   28864:	781b      	ldrb	r3, [r3, #0]
   28866:	2b00      	cmp	r3, #0
   28868:	d003      	beq.n	28872 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   2886a:	231d      	movs	r3, #29
   2886c:	18fb      	adds	r3, r7, r3
   2886e:	781b      	ldrb	r3, [r3, #0]
   28870:	e077      	b.n	28962 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   28872:	683b      	ldr	r3, [r7, #0]
   28874:	7e5b      	ldrb	r3, [r3, #25]
   28876:	2b00      	cmp	r3, #0
   28878:	d003      	beq.n	28882 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   2887a:	683b      	ldr	r3, [r7, #0]
   2887c:	7e9a      	ldrb	r2, [r3, #26]
   2887e:	69bb      	ldr	r3, [r7, #24]
   28880:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   28882:	687b      	ldr	r3, [r7, #4]
   28884:	0018      	movs	r0, r3
   28886:	4b3d      	ldr	r3, [pc, #244]	; (2897c <_usart_set_config+0x2d4>)
   28888:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   2888a:	230a      	movs	r3, #10
   2888c:	18fb      	adds	r3, r7, r3
   2888e:	881a      	ldrh	r2, [r3, #0]
   28890:	69bb      	ldr	r3, [r7, #24]
   28892:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   28894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   28896:	68fb      	ldr	r3, [r7, #12]
   28898:	4313      	orrs	r3, r2
   2889a:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   2889c:	683b      	ldr	r3, [r7, #0]
   2889e:	2227      	movs	r2, #39	; 0x27
   288a0:	5c9b      	ldrb	r3, [r3, r2]
   288a2:	2201      	movs	r2, #1
   288a4:	4053      	eors	r3, r2
   288a6:	b2db      	uxtb	r3, r3
   288a8:	2b00      	cmp	r3, #0
   288aa:	d003      	beq.n	288b4 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   288ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   288ae:	2204      	movs	r2, #4
   288b0:	4313      	orrs	r3, r2
   288b2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   288b4:	683b      	ldr	r3, [r7, #0]
   288b6:	7e5b      	ldrb	r3, [r3, #25]
   288b8:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   288ba:	683b      	ldr	r3, [r7, #0]
   288bc:	7f1b      	ldrb	r3, [r3, #28]
   288be:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   288c0:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   288c2:	683b      	ldr	r3, [r7, #0]
   288c4:	7f5b      	ldrb	r3, [r3, #29]
   288c6:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   288c8:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   288ca:	683b      	ldr	r3, [r7, #0]
   288cc:	2124      	movs	r1, #36	; 0x24
   288ce:	5c5b      	ldrb	r3, [r3, r1]
   288d0:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   288d2:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   288d4:	683b      	ldr	r3, [r7, #0]
   288d6:	2125      	movs	r1, #37	; 0x25
   288d8:	5c5b      	ldrb	r3, [r3, r1]
   288da:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   288dc:	4313      	orrs	r3, r2
	ctrlb =  
   288de:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   288e0:	683b      	ldr	r3, [r7, #0]
   288e2:	7a9b      	ldrb	r3, [r3, #10]
   288e4:	001a      	movs	r2, r3
   288e6:	6a3b      	ldr	r3, [r7, #32]
   288e8:	4313      	orrs	r3, r2
   288ea:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   288ec:	683b      	ldr	r3, [r7, #0]
   288ee:	7adb      	ldrb	r3, [r3, #11]
   288f0:	001a      	movs	r2, r3
   288f2:	6a3b      	ldr	r3, [r7, #32]
   288f4:	4313      	orrs	r3, r2
   288f6:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   288f8:	683b      	ldr	r3, [r7, #0]
   288fa:	891b      	ldrh	r3, [r3, #8]
   288fc:	2bff      	cmp	r3, #255	; 0xff
   288fe:	d00b      	beq.n	28918 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   28900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28902:	2280      	movs	r2, #128	; 0x80
   28904:	0452      	lsls	r2, r2, #17
   28906:	4313      	orrs	r3, r2
   28908:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   2890a:	683b      	ldr	r3, [r7, #0]
   2890c:	891b      	ldrh	r3, [r3, #8]
   2890e:	001a      	movs	r2, r3
   28910:	6a3b      	ldr	r3, [r7, #32]
   28912:	4313      	orrs	r3, r2
   28914:	623b      	str	r3, [r7, #32]
   28916:	e008      	b.n	2892a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   28918:	683b      	ldr	r3, [r7, #0]
   2891a:	7edb      	ldrb	r3, [r3, #27]
   2891c:	2b00      	cmp	r3, #0
   2891e:	d004      	beq.n	2892a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   28920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28922:	2280      	movs	r2, #128	; 0x80
   28924:	04d2      	lsls	r2, r2, #19
   28926:	4313      	orrs	r3, r2
   28928:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   2892a:	683b      	ldr	r3, [r7, #0]
   2892c:	222c      	movs	r2, #44	; 0x2c
   2892e:	5c9b      	ldrb	r3, [r3, r2]
   28930:	2b00      	cmp	r3, #0
   28932:	d103      	bne.n	2893c <_usart_set_config+0x294>
   28934:	4b12      	ldr	r3, [pc, #72]	; (28980 <_usart_set_config+0x2d8>)
   28936:	4798      	blx	r3
   28938:	1e03      	subs	r3, r0, #0
   2893a:	d003      	beq.n	28944 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   2893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2893e:	2280      	movs	r2, #128	; 0x80
   28940:	4313      	orrs	r3, r2
   28942:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   28944:	687b      	ldr	r3, [r7, #4]
   28946:	0018      	movs	r0, r3
   28948:	4b0c      	ldr	r3, [pc, #48]	; (2897c <_usart_set_config+0x2d4>)
   2894a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   2894c:	69bb      	ldr	r3, [r7, #24]
   2894e:	6a3a      	ldr	r2, [r7, #32]
   28950:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   28952:	687b      	ldr	r3, [r7, #4]
   28954:	0018      	movs	r0, r3
   28956:	4b09      	ldr	r3, [pc, #36]	; (2897c <_usart_set_config+0x2d4>)
   28958:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   2895a:	69bb      	ldr	r3, [r7, #24]
   2895c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2895e:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   28960:	2300      	movs	r3, #0
}
   28962:	0018      	movs	r0, r3
   28964:	46bd      	mov	sp, r7
   28966:	b00a      	add	sp, #40	; 0x28
   28968:	bdb0      	pop	{r4, r5, r7, pc}
   2896a:	46c0      	nop			; (mov r8, r8)
   2896c:	00027451 	.word	0x00027451
   28970:	00029e05 	.word	0x00029e05
   28974:	00026fcb 	.word	0x00026fcb
   28978:	00027049 	.word	0x00027049
   2897c:	00028685 	.word	0x00028685
   28980:	00028645 	.word	0x00028645

00028984 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   28984:	b590      	push	{r4, r7, lr}
   28986:	b093      	sub	sp, #76	; 0x4c
   28988:	af00      	add	r7, sp, #0
   2898a:	60f8      	str	r0, [r7, #12]
   2898c:	60b9      	str	r1, [r7, #8]
   2898e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   28990:	233b      	movs	r3, #59	; 0x3b
   28992:	18fb      	adds	r3, r7, r3
   28994:	2200      	movs	r2, #0
   28996:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   28998:	68fb      	ldr	r3, [r7, #12]
   2899a:	68ba      	ldr	r2, [r7, #8]
   2899c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2899e:	68fb      	ldr	r3, [r7, #12]
   289a0:	681b      	ldr	r3, [r3, #0]
   289a2:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   289a4:	68fb      	ldr	r3, [r7, #12]
   289a6:	681b      	ldr	r3, [r3, #0]
   289a8:	0018      	movs	r0, r3
   289aa:	4b86      	ldr	r3, [pc, #536]	; (28bc4 <usart_init+0x240>)
   289ac:	4798      	blx	r3
   289ae:	0003      	movs	r3, r0
   289b0:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   289b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   289b4:	3302      	adds	r3, #2
   289b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   289b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   289ba:	3314      	adds	r3, #20
   289bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   289be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   289c0:	681b      	ldr	r3, [r3, #0]
   289c2:	2201      	movs	r2, #1
   289c4:	4013      	ands	r3, r2
   289c6:	d001      	beq.n	289cc <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   289c8:	2305      	movs	r3, #5
   289ca:	e0f6      	b.n	28bba <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   289cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   289ce:	681b      	ldr	r3, [r3, #0]
   289d0:	2202      	movs	r2, #2
   289d2:	4013      	ands	r3, r2
   289d4:	d001      	beq.n	289da <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   289d6:	231c      	movs	r3, #28
   289d8:	e0ef      	b.n	28bba <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   289da:	2201      	movs	r2, #1
   289dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   289de:	409a      	lsls	r2, r3
   289e0:	0013      	movs	r3, r2
   289e2:	0019      	movs	r1, r3
   289e4:	2002      	movs	r0, #2
   289e6:	4b78      	ldr	r3, [pc, #480]	; (28bc8 <usart_init+0x244>)
   289e8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   289ea:	2324      	movs	r3, #36	; 0x24
   289ec:	18fb      	adds	r3, r7, r3
   289ee:	0018      	movs	r0, r3
   289f0:	4b76      	ldr	r3, [pc, #472]	; (28bcc <usart_init+0x248>)
   289f2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   289f4:	687b      	ldr	r3, [r7, #4]
   289f6:	222d      	movs	r2, #45	; 0x2d
   289f8:	5c9a      	ldrb	r2, [r3, r2]
   289fa:	2324      	movs	r3, #36	; 0x24
   289fc:	18fb      	adds	r3, r7, r3
   289fe:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   28a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
   28a02:	b2db      	uxtb	r3, r3
   28a04:	2224      	movs	r2, #36	; 0x24
   28a06:	18ba      	adds	r2, r7, r2
   28a08:	0011      	movs	r1, r2
   28a0a:	0018      	movs	r0, r3
   28a0c:	4b70      	ldr	r3, [pc, #448]	; (28bd0 <usart_init+0x24c>)
   28a0e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   28a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
   28a12:	b2db      	uxtb	r3, r3
   28a14:	0018      	movs	r0, r3
   28a16:	4b6f      	ldr	r3, [pc, #444]	; (28bd4 <usart_init+0x250>)
   28a18:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   28a1a:	687b      	ldr	r3, [r7, #4]
   28a1c:	222d      	movs	r2, #45	; 0x2d
   28a1e:	5c9b      	ldrb	r3, [r3, r2]
   28a20:	2100      	movs	r1, #0
   28a22:	0018      	movs	r0, r3
   28a24:	4b6c      	ldr	r3, [pc, #432]	; (28bd8 <usart_init+0x254>)
   28a26:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   28a28:	687b      	ldr	r3, [r7, #4]
   28a2a:	7ada      	ldrb	r2, [r3, #11]
   28a2c:	68fb      	ldr	r3, [r7, #12]
   28a2e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   28a30:	687b      	ldr	r3, [r7, #4]
   28a32:	2224      	movs	r2, #36	; 0x24
   28a34:	5c9a      	ldrb	r2, [r3, r2]
   28a36:	68fb      	ldr	r3, [r7, #12]
   28a38:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   28a3a:	687b      	ldr	r3, [r7, #4]
   28a3c:	2225      	movs	r2, #37	; 0x25
   28a3e:	5c9a      	ldrb	r2, [r3, r2]
   28a40:	68fb      	ldr	r3, [r7, #12]
   28a42:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   28a44:	687b      	ldr	r3, [r7, #4]
   28a46:	7eda      	ldrb	r2, [r3, #27]
   28a48:	68fb      	ldr	r3, [r7, #12]
   28a4a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   28a4c:	687b      	ldr	r3, [r7, #4]
   28a4e:	7f1a      	ldrb	r2, [r3, #28]
   28a50:	68fb      	ldr	r3, [r7, #12]
   28a52:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   28a54:	233b      	movs	r3, #59	; 0x3b
   28a56:	18fc      	adds	r4, r7, r3
   28a58:	687a      	ldr	r2, [r7, #4]
   28a5a:	68fb      	ldr	r3, [r7, #12]
   28a5c:	0011      	movs	r1, r2
   28a5e:	0018      	movs	r0, r3
   28a60:	4b5e      	ldr	r3, [pc, #376]	; (28bdc <usart_init+0x258>)
   28a62:	4798      	blx	r3
   28a64:	0003      	movs	r3, r0
   28a66:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   28a68:	233b      	movs	r3, #59	; 0x3b
   28a6a:	18fb      	adds	r3, r7, r3
   28a6c:	781b      	ldrb	r3, [r3, #0]
   28a6e:	2b00      	cmp	r3, #0
   28a70:	d003      	beq.n	28a7a <usart_init+0xf6>
		return status_code;
   28a72:	233b      	movs	r3, #59	; 0x3b
   28a74:	18fb      	adds	r3, r7, r3
   28a76:	781b      	ldrb	r3, [r3, #0]
   28a78:	e09f      	b.n	28bba <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   28a7a:	2320      	movs	r3, #32
   28a7c:	18fb      	adds	r3, r7, r3
   28a7e:	0018      	movs	r0, r3
   28a80:	4b57      	ldr	r3, [pc, #348]	; (28be0 <usart_init+0x25c>)
   28a82:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28a84:	2320      	movs	r3, #32
   28a86:	18fb      	adds	r3, r7, r3
   28a88:	2200      	movs	r2, #0
   28a8a:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   28a8c:	2320      	movs	r3, #32
   28a8e:	18fb      	adds	r3, r7, r3
   28a90:	2200      	movs	r2, #0
   28a92:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   28a94:	687b      	ldr	r3, [r7, #4]
   28a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   28a98:	2310      	movs	r3, #16
   28a9a:	18fb      	adds	r3, r7, r3
   28a9c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   28a9e:	687b      	ldr	r3, [r7, #4]
   28aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   28aa2:	2310      	movs	r3, #16
   28aa4:	18fb      	adds	r3, r7, r3
   28aa6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   28aa8:	687b      	ldr	r3, [r7, #4]
   28aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   28aac:	2310      	movs	r3, #16
   28aae:	18fb      	adds	r3, r7, r3
   28ab0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   28ab2:	687b      	ldr	r3, [r7, #4]
   28ab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   28ab6:	2310      	movs	r3, #16
   28ab8:	18fb      	adds	r3, r7, r3
   28aba:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   28abc:	2347      	movs	r3, #71	; 0x47
   28abe:	18fb      	adds	r3, r7, r3
   28ac0:	2200      	movs	r2, #0
   28ac2:	701a      	strb	r2, [r3, #0]
   28ac4:	e02c      	b.n	28b20 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   28ac6:	2347      	movs	r3, #71	; 0x47
   28ac8:	18fb      	adds	r3, r7, r3
   28aca:	781a      	ldrb	r2, [r3, #0]
   28acc:	2310      	movs	r3, #16
   28ace:	18fb      	adds	r3, r7, r3
   28ad0:	0092      	lsls	r2, r2, #2
   28ad2:	58d3      	ldr	r3, [r2, r3]
   28ad4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   28ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28ad8:	2b00      	cmp	r3, #0
   28ada:	d109      	bne.n	28af0 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   28adc:	2347      	movs	r3, #71	; 0x47
   28ade:	18fb      	adds	r3, r7, r3
   28ae0:	781a      	ldrb	r2, [r3, #0]
   28ae2:	68bb      	ldr	r3, [r7, #8]
   28ae4:	0011      	movs	r1, r2
   28ae6:	0018      	movs	r0, r3
   28ae8:	4b3e      	ldr	r3, [pc, #248]	; (28be4 <usart_init+0x260>)
   28aea:	4798      	blx	r3
   28aec:	0003      	movs	r3, r0
   28aee:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   28af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28af2:	3301      	adds	r3, #1
   28af4:	d00d      	beq.n	28b12 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   28af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28af8:	b2da      	uxtb	r2, r3
   28afa:	2320      	movs	r3, #32
   28afc:	18fb      	adds	r3, r7, r3
   28afe:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   28b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28b02:	0c1b      	lsrs	r3, r3, #16
   28b04:	b2db      	uxtb	r3, r3
   28b06:	2220      	movs	r2, #32
   28b08:	18ba      	adds	r2, r7, r2
   28b0a:	0011      	movs	r1, r2
   28b0c:	0018      	movs	r0, r3
   28b0e:	4b36      	ldr	r3, [pc, #216]	; (28be8 <usart_init+0x264>)
   28b10:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   28b12:	2347      	movs	r3, #71	; 0x47
   28b14:	18fb      	adds	r3, r7, r3
   28b16:	781a      	ldrb	r2, [r3, #0]
   28b18:	2347      	movs	r3, #71	; 0x47
   28b1a:	18fb      	adds	r3, r7, r3
   28b1c:	3201      	adds	r2, #1
   28b1e:	701a      	strb	r2, [r3, #0]
   28b20:	2347      	movs	r3, #71	; 0x47
   28b22:	18fb      	adds	r3, r7, r3
   28b24:	781b      	ldrb	r3, [r3, #0]
   28b26:	2b03      	cmp	r3, #3
   28b28:	d9cd      	bls.n	28ac6 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   28b2a:	2300      	movs	r3, #0
   28b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   28b2e:	e00a      	b.n	28b46 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   28b30:	68fa      	ldr	r2, [r7, #12]
   28b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28b34:	3302      	adds	r3, #2
   28b36:	009b      	lsls	r3, r3, #2
   28b38:	18d3      	adds	r3, r2, r3
   28b3a:	3304      	adds	r3, #4
   28b3c:	2200      	movs	r2, #0
   28b3e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   28b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28b42:	3301      	adds	r3, #1
   28b44:	63fb      	str	r3, [r7, #60]	; 0x3c
   28b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28b48:	2b05      	cmp	r3, #5
   28b4a:	d9f1      	bls.n	28b30 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   28b4c:	68fb      	ldr	r3, [r7, #12]
   28b4e:	2200      	movs	r2, #0
   28b50:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   28b52:	68fb      	ldr	r3, [r7, #12]
   28b54:	2200      	movs	r2, #0
   28b56:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   28b58:	68fb      	ldr	r3, [r7, #12]
   28b5a:	2200      	movs	r2, #0
   28b5c:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   28b5e:	68fb      	ldr	r3, [r7, #12]
   28b60:	2200      	movs	r2, #0
   28b62:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   28b64:	68fb      	ldr	r3, [r7, #12]
   28b66:	2230      	movs	r2, #48	; 0x30
   28b68:	2100      	movs	r1, #0
   28b6a:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   28b6c:	68fb      	ldr	r3, [r7, #12]
   28b6e:	2231      	movs	r2, #49	; 0x31
   28b70:	2100      	movs	r1, #0
   28b72:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   28b74:	68fb      	ldr	r3, [r7, #12]
   28b76:	2232      	movs	r2, #50	; 0x32
   28b78:	2100      	movs	r1, #0
   28b7a:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   28b7c:	68fb      	ldr	r3, [r7, #12]
   28b7e:	2233      	movs	r2, #51	; 0x33
   28b80:	2100      	movs	r1, #0
   28b82:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   28b84:	68fb      	ldr	r3, [r7, #12]
   28b86:	681b      	ldr	r3, [r3, #0]
   28b88:	2227      	movs	r2, #39	; 0x27
   28b8a:	18bc      	adds	r4, r7, r2
   28b8c:	0018      	movs	r0, r3
   28b8e:	4b0d      	ldr	r3, [pc, #52]	; (28bc4 <usart_init+0x240>)
   28b90:	4798      	blx	r3
   28b92:	0003      	movs	r3, r0
   28b94:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   28b96:	4a15      	ldr	r2, [pc, #84]	; (28bec <usart_init+0x268>)
   28b98:	2327      	movs	r3, #39	; 0x27
   28b9a:	18fb      	adds	r3, r7, r3
   28b9c:	781b      	ldrb	r3, [r3, #0]
   28b9e:	0011      	movs	r1, r2
   28ba0:	0018      	movs	r0, r3
   28ba2:	4b13      	ldr	r3, [pc, #76]	; (28bf0 <usart_init+0x26c>)
   28ba4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   28ba6:	2327      	movs	r3, #39	; 0x27
   28ba8:	18fb      	adds	r3, r7, r3
   28baa:	781a      	ldrb	r2, [r3, #0]
   28bac:	4b11      	ldr	r3, [pc, #68]	; (28bf4 <usart_init+0x270>)
   28bae:	0092      	lsls	r2, r2, #2
   28bb0:	68f9      	ldr	r1, [r7, #12]
   28bb2:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   28bb4:	233b      	movs	r3, #59	; 0x3b
   28bb6:	18fb      	adds	r3, r7, r3
   28bb8:	781b      	ldrb	r3, [r3, #0]
}
   28bba:	0018      	movs	r0, r3
   28bbc:	46bd      	mov	sp, r7
   28bbe:	b013      	add	sp, #76	; 0x4c
   28bc0:	bd90      	pop	{r4, r7, pc}
   28bc2:	46c0      	nop			; (mov r8, r8)
   28bc4:	00027451 	.word	0x00027451
   28bc8:	000285c1 	.word	0x000285c1
   28bcc:	000285a9 	.word	0x000285a9
   28bd0:	00029ce1 	.word	0x00029ce1
   28bd4:	00029d25 	.word	0x00029d25
   28bd8:	00027209 	.word	0x00027209
   28bdc:	000286a9 	.word	0x000286a9
   28be0:	0002861d 	.word	0x0002861d
   28be4:	00027295 	.word	0x00027295
   28be8:	0002a041 	.word	0x0002a041
   28bec:	00028e61 	.word	0x00028e61
   28bf0:	000274b5 	.word	0x000274b5
   28bf4:	20005c04 	.word	0x20005c04

00028bf8 <system_interrupt_enter_critical_section>:
{
   28bf8:	b580      	push	{r7, lr}
   28bfa:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   28bfc:	4b02      	ldr	r3, [pc, #8]	; (28c08 <system_interrupt_enter_critical_section+0x10>)
   28bfe:	4798      	blx	r3
}
   28c00:	46c0      	nop			; (mov r8, r8)
   28c02:	46bd      	mov	sp, r7
   28c04:	bd80      	pop	{r7, pc}
   28c06:	46c0      	nop			; (mov r8, r8)
   28c08:	0002604d 	.word	0x0002604d

00028c0c <system_interrupt_leave_critical_section>:
{
   28c0c:	b580      	push	{r7, lr}
   28c0e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   28c10:	4b02      	ldr	r3, [pc, #8]	; (28c1c <system_interrupt_leave_critical_section+0x10>)
   28c12:	4798      	blx	r3
}
   28c14:	46c0      	nop			; (mov r8, r8)
   28c16:	46bd      	mov	sp, r7
   28c18:	bd80      	pop	{r7, pc}
   28c1a:	46c0      	nop			; (mov r8, r8)
   28c1c:	000260a1 	.word	0x000260a1

00028c20 <usart_is_syncing>:
{
   28c20:	b580      	push	{r7, lr}
   28c22:	b084      	sub	sp, #16
   28c24:	af00      	add	r7, sp, #0
   28c26:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   28c28:	687b      	ldr	r3, [r7, #4]
   28c2a:	681b      	ldr	r3, [r3, #0]
   28c2c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   28c2e:	68fb      	ldr	r3, [r7, #12]
   28c30:	69db      	ldr	r3, [r3, #28]
   28c32:	1e5a      	subs	r2, r3, #1
   28c34:	4193      	sbcs	r3, r2
   28c36:	b2db      	uxtb	r3, r3
}
   28c38:	0018      	movs	r0, r3
   28c3a:	46bd      	mov	sp, r7
   28c3c:	b004      	add	sp, #16
   28c3e:	bd80      	pop	{r7, pc}

00028c40 <_usart_wait_for_sync>:
{
   28c40:	b580      	push	{r7, lr}
   28c42:	b082      	sub	sp, #8
   28c44:	af00      	add	r7, sp, #0
   28c46:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   28c48:	46c0      	nop			; (mov r8, r8)
   28c4a:	687b      	ldr	r3, [r7, #4]
   28c4c:	0018      	movs	r0, r3
   28c4e:	4b04      	ldr	r3, [pc, #16]	; (28c60 <_usart_wait_for_sync+0x20>)
   28c50:	4798      	blx	r3
   28c52:	1e03      	subs	r3, r0, #0
   28c54:	d1f9      	bne.n	28c4a <_usart_wait_for_sync+0xa>
}
   28c56:	46c0      	nop			; (mov r8, r8)
   28c58:	46bd      	mov	sp, r7
   28c5a:	b002      	add	sp, #8
   28c5c:	bd80      	pop	{r7, pc}
   28c5e:	46c0      	nop			; (mov r8, r8)
   28c60:	00028c21 	.word	0x00028c21

00028c64 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   28c64:	b580      	push	{r7, lr}
   28c66:	b086      	sub	sp, #24
   28c68:	af00      	add	r7, sp, #0
   28c6a:	60f8      	str	r0, [r7, #12]
   28c6c:	60b9      	str	r1, [r7, #8]
   28c6e:	1dbb      	adds	r3, r7, #6
   28c70:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28c72:	68fb      	ldr	r3, [r7, #12]
   28c74:	681b      	ldr	r3, [r3, #0]
   28c76:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   28c78:	4b0f      	ldr	r3, [pc, #60]	; (28cb8 <_usart_write_buffer+0x54>)
   28c7a:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   28c7c:	68fb      	ldr	r3, [r7, #12]
   28c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28c80:	b29b      	uxth	r3, r3
   28c82:	2b00      	cmp	r3, #0
   28c84:	d003      	beq.n	28c8e <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   28c86:	4b0d      	ldr	r3, [pc, #52]	; (28cbc <_usart_write_buffer+0x58>)
   28c88:	4798      	blx	r3
		return STATUS_BUSY;
   28c8a:	2305      	movs	r3, #5
   28c8c:	e010      	b.n	28cb0 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   28c8e:	68fb      	ldr	r3, [r7, #12]
   28c90:	1dba      	adds	r2, r7, #6
   28c92:	8812      	ldrh	r2, [r2, #0]
   28c94:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   28c96:	4b09      	ldr	r3, [pc, #36]	; (28cbc <_usart_write_buffer+0x58>)
   28c98:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   28c9a:	68fb      	ldr	r3, [r7, #12]
   28c9c:	68ba      	ldr	r2, [r7, #8]
   28c9e:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   28ca0:	68fb      	ldr	r3, [r7, #12]
   28ca2:	2233      	movs	r2, #51	; 0x33
   28ca4:	2105      	movs	r1, #5
   28ca6:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   28ca8:	697b      	ldr	r3, [r7, #20]
   28caa:	2201      	movs	r2, #1
   28cac:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   28cae:	2300      	movs	r3, #0
}
   28cb0:	0018      	movs	r0, r3
   28cb2:	46bd      	mov	sp, r7
   28cb4:	b006      	add	sp, #24
   28cb6:	bd80      	pop	{r7, pc}
   28cb8:	00028bf9 	.word	0x00028bf9
   28cbc:	00028c0d 	.word	0x00028c0d

00028cc0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   28cc0:	b580      	push	{r7, lr}
   28cc2:	b086      	sub	sp, #24
   28cc4:	af00      	add	r7, sp, #0
   28cc6:	60f8      	str	r0, [r7, #12]
   28cc8:	60b9      	str	r1, [r7, #8]
   28cca:	1dbb      	adds	r3, r7, #6
   28ccc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28cce:	68fb      	ldr	r3, [r7, #12]
   28cd0:	681b      	ldr	r3, [r3, #0]
   28cd2:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   28cd4:	4b16      	ldr	r3, [pc, #88]	; (28d30 <_usart_read_buffer+0x70>)
   28cd6:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   28cd8:	68fb      	ldr	r3, [r7, #12]
   28cda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28cdc:	b29b      	uxth	r3, r3
   28cde:	2b00      	cmp	r3, #0
   28ce0:	d003      	beq.n	28cea <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   28ce2:	4b14      	ldr	r3, [pc, #80]	; (28d34 <_usart_read_buffer+0x74>)
   28ce4:	4798      	blx	r3
		return STATUS_BUSY;
   28ce6:	2305      	movs	r3, #5
   28ce8:	e01e      	b.n	28d28 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   28cea:	68fb      	ldr	r3, [r7, #12]
   28cec:	1dba      	adds	r2, r7, #6
   28cee:	8812      	ldrh	r2, [r2, #0]
   28cf0:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   28cf2:	4b10      	ldr	r3, [pc, #64]	; (28d34 <_usart_read_buffer+0x74>)
   28cf4:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   28cf6:	68fb      	ldr	r3, [r7, #12]
   28cf8:	68ba      	ldr	r2, [r7, #8]
   28cfa:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   28cfc:	68fb      	ldr	r3, [r7, #12]
   28cfe:	2232      	movs	r2, #50	; 0x32
   28d00:	2105      	movs	r1, #5
   28d02:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   28d04:	697b      	ldr	r3, [r7, #20]
   28d06:	2204      	movs	r2, #4
   28d08:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   28d0a:	68fb      	ldr	r3, [r7, #12]
   28d0c:	7a1b      	ldrb	r3, [r3, #8]
   28d0e:	2b00      	cmp	r3, #0
   28d10:	d002      	beq.n	28d18 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   28d12:	697b      	ldr	r3, [r7, #20]
   28d14:	2220      	movs	r2, #32
   28d16:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   28d18:	68fb      	ldr	r3, [r7, #12]
   28d1a:	7a5b      	ldrb	r3, [r3, #9]
   28d1c:	2b00      	cmp	r3, #0
   28d1e:	d002      	beq.n	28d26 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   28d20:	697b      	ldr	r3, [r7, #20]
   28d22:	2208      	movs	r2, #8
   28d24:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   28d26:	2300      	movs	r3, #0
}
   28d28:	0018      	movs	r0, r3
   28d2a:	46bd      	mov	sp, r7
   28d2c:	b006      	add	sp, #24
   28d2e:	bd80      	pop	{r7, pc}
   28d30:	00028bf9 	.word	0x00028bf9
   28d34:	00028c0d 	.word	0x00028c0d

00028d38 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   28d38:	b580      	push	{r7, lr}
   28d3a:	b084      	sub	sp, #16
   28d3c:	af00      	add	r7, sp, #0
   28d3e:	60f8      	str	r0, [r7, #12]
   28d40:	60b9      	str	r1, [r7, #8]
   28d42:	1dfb      	adds	r3, r7, #7
   28d44:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   28d46:	1dfb      	adds	r3, r7, #7
   28d48:	781b      	ldrb	r3, [r3, #0]
   28d4a:	68fa      	ldr	r2, [r7, #12]
   28d4c:	3302      	adds	r3, #2
   28d4e:	009b      	lsls	r3, r3, #2
   28d50:	18d3      	adds	r3, r2, r3
   28d52:	3304      	adds	r3, #4
   28d54:	68ba      	ldr	r2, [r7, #8]
   28d56:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   28d58:	68fb      	ldr	r3, [r7, #12]
   28d5a:	2230      	movs	r2, #48	; 0x30
   28d5c:	5c9b      	ldrb	r3, [r3, r2]
   28d5e:	b25a      	sxtb	r2, r3
   28d60:	1dfb      	adds	r3, r7, #7
   28d62:	781b      	ldrb	r3, [r3, #0]
   28d64:	2101      	movs	r1, #1
   28d66:	4099      	lsls	r1, r3
   28d68:	000b      	movs	r3, r1
   28d6a:	b25b      	sxtb	r3, r3
   28d6c:	4313      	orrs	r3, r2
   28d6e:	b25b      	sxtb	r3, r3
   28d70:	b2d9      	uxtb	r1, r3
   28d72:	68fb      	ldr	r3, [r7, #12]
   28d74:	2230      	movs	r2, #48	; 0x30
   28d76:	5499      	strb	r1, [r3, r2]
}
   28d78:	46c0      	nop			; (mov r8, r8)
   28d7a:	46bd      	mov	sp, r7
   28d7c:	b004      	add	sp, #16
   28d7e:	bd80      	pop	{r7, pc}

00028d80 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   28d80:	b580      	push	{r7, lr}
   28d82:	b084      	sub	sp, #16
   28d84:	af00      	add	r7, sp, #0
   28d86:	60f8      	str	r0, [r7, #12]
   28d88:	60b9      	str	r1, [r7, #8]
   28d8a:	1dbb      	adds	r3, r7, #6
   28d8c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   28d8e:	1dbb      	adds	r3, r7, #6
   28d90:	881b      	ldrh	r3, [r3, #0]
   28d92:	2b00      	cmp	r3, #0
   28d94:	d101      	bne.n	28d9a <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   28d96:	2317      	movs	r3, #23
   28d98:	e010      	b.n	28dbc <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   28d9a:	68fb      	ldr	r3, [r7, #12]
   28d9c:	79db      	ldrb	r3, [r3, #7]
   28d9e:	2201      	movs	r2, #1
   28da0:	4053      	eors	r3, r2
   28da2:	b2db      	uxtb	r3, r3
   28da4:	2b00      	cmp	r3, #0
   28da6:	d001      	beq.n	28dac <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   28da8:	231c      	movs	r3, #28
   28daa:	e007      	b.n	28dbc <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   28dac:	1dbb      	adds	r3, r7, #6
   28dae:	881a      	ldrh	r2, [r3, #0]
   28db0:	68b9      	ldr	r1, [r7, #8]
   28db2:	68fb      	ldr	r3, [r7, #12]
   28db4:	0018      	movs	r0, r3
   28db6:	4b03      	ldr	r3, [pc, #12]	; (28dc4 <usart_write_buffer_job+0x44>)
   28db8:	4798      	blx	r3
   28dba:	0003      	movs	r3, r0
}
   28dbc:	0018      	movs	r0, r3
   28dbe:	46bd      	mov	sp, r7
   28dc0:	b004      	add	sp, #16
   28dc2:	bd80      	pop	{r7, pc}
   28dc4:	00028c65 	.word	0x00028c65

00028dc8 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   28dc8:	b580      	push	{r7, lr}
   28dca:	b084      	sub	sp, #16
   28dcc:	af00      	add	r7, sp, #0
   28dce:	60f8      	str	r0, [r7, #12]
   28dd0:	60b9      	str	r1, [r7, #8]
   28dd2:	1dbb      	adds	r3, r7, #6
   28dd4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   28dd6:	1dbb      	adds	r3, r7, #6
   28dd8:	881b      	ldrh	r3, [r3, #0]
   28dda:	2b00      	cmp	r3, #0
   28ddc:	d101      	bne.n	28de2 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   28dde:	2317      	movs	r3, #23
   28de0:	e010      	b.n	28e04 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   28de2:	68fb      	ldr	r3, [r7, #12]
   28de4:	799b      	ldrb	r3, [r3, #6]
   28de6:	2201      	movs	r2, #1
   28de8:	4053      	eors	r3, r2
   28dea:	b2db      	uxtb	r3, r3
   28dec:	2b00      	cmp	r3, #0
   28dee:	d001      	beq.n	28df4 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   28df0:	231c      	movs	r3, #28
   28df2:	e007      	b.n	28e04 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   28df4:	1dbb      	adds	r3, r7, #6
   28df6:	881a      	ldrh	r2, [r3, #0]
   28df8:	68b9      	ldr	r1, [r7, #8]
   28dfa:	68fb      	ldr	r3, [r7, #12]
   28dfc:	0018      	movs	r0, r3
   28dfe:	4b03      	ldr	r3, [pc, #12]	; (28e0c <usart_read_buffer_job+0x44>)
   28e00:	4798      	blx	r3
   28e02:	0003      	movs	r3, r0
}
   28e04:	0018      	movs	r0, r3
   28e06:	46bd      	mov	sp, r7
   28e08:	b004      	add	sp, #16
   28e0a:	bd80      	pop	{r7, pc}
   28e0c:	00028cc1 	.word	0x00028cc1

00028e10 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   28e10:	b580      	push	{r7, lr}
   28e12:	b084      	sub	sp, #16
   28e14:	af00      	add	r7, sp, #0
   28e16:	6078      	str	r0, [r7, #4]
   28e18:	000a      	movs	r2, r1
   28e1a:	1cfb      	adds	r3, r7, #3
   28e1c:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   28e1e:	1cfb      	adds	r3, r7, #3
   28e20:	781b      	ldrb	r3, [r3, #0]
   28e22:	2b00      	cmp	r3, #0
   28e24:	d002      	beq.n	28e2c <usart_get_job_status+0x1c>
   28e26:	2b01      	cmp	r3, #1
   28e28:	d007      	beq.n	28e3a <usart_get_job_status+0x2a>
   28e2a:	e00d      	b.n	28e48 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   28e2c:	230f      	movs	r3, #15
   28e2e:	18fb      	adds	r3, r7, r3
   28e30:	687a      	ldr	r2, [r7, #4]
   28e32:	2132      	movs	r1, #50	; 0x32
   28e34:	5c52      	ldrb	r2, [r2, r1]
   28e36:	701a      	strb	r2, [r3, #0]
			break;
   28e38:	e00b      	b.n	28e52 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   28e3a:	230f      	movs	r3, #15
   28e3c:	18fb      	adds	r3, r7, r3
   28e3e:	687a      	ldr	r2, [r7, #4]
   28e40:	2133      	movs	r1, #51	; 0x33
   28e42:	5c52      	ldrb	r2, [r2, r1]
   28e44:	701a      	strb	r2, [r3, #0]
			break;
   28e46:	e004      	b.n	28e52 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   28e48:	230f      	movs	r3, #15
   28e4a:	18fb      	adds	r3, r7, r3
   28e4c:	2217      	movs	r2, #23
   28e4e:	701a      	strb	r2, [r3, #0]
			break;
   28e50:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   28e52:	230f      	movs	r3, #15
   28e54:	18fb      	adds	r3, r7, r3
   28e56:	781b      	ldrb	r3, [r3, #0]
}
   28e58:	0018      	movs	r0, r3
   28e5a:	46bd      	mov	sp, r7
   28e5c:	b004      	add	sp, #16
   28e5e:	bd80      	pop	{r7, pc}

00028e60 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   28e60:	b580      	push	{r7, lr}
   28e62:	b088      	sub	sp, #32
   28e64:	af00      	add	r7, sp, #0
   28e66:	0002      	movs	r2, r0
   28e68:	1dfb      	adds	r3, r7, #7
   28e6a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   28e6c:	1dfb      	adds	r3, r7, #7
   28e6e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   28e70:	4ba3      	ldr	r3, [pc, #652]	; (29100 <_usart_interrupt_handler+0x2a0>)
   28e72:	0092      	lsls	r2, r2, #2
   28e74:	58d3      	ldr	r3, [r2, r3]
   28e76:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   28e78:	69bb      	ldr	r3, [r7, #24]
   28e7a:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   28e7c:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   28e7e:	69bb      	ldr	r3, [r7, #24]
   28e80:	0018      	movs	r0, r3
   28e82:	4ba0      	ldr	r3, [pc, #640]	; (29104 <_usart_interrupt_handler+0x2a4>)
   28e84:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   28e86:	697b      	ldr	r3, [r7, #20]
   28e88:	7e1b      	ldrb	r3, [r3, #24]
   28e8a:	b2da      	uxtb	r2, r3
   28e8c:	2312      	movs	r3, #18
   28e8e:	18fb      	adds	r3, r7, r3
   28e90:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   28e92:	697b      	ldr	r3, [r7, #20]
   28e94:	7d9b      	ldrb	r3, [r3, #22]
   28e96:	b2db      	uxtb	r3, r3
   28e98:	b29a      	uxth	r2, r3
   28e9a:	2312      	movs	r3, #18
   28e9c:	18fb      	adds	r3, r7, r3
   28e9e:	2112      	movs	r1, #18
   28ea0:	1879      	adds	r1, r7, r1
   28ea2:	8809      	ldrh	r1, [r1, #0]
   28ea4:	400a      	ands	r2, r1
   28ea6:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   28ea8:	69bb      	ldr	r3, [r7, #24]
   28eaa:	2230      	movs	r2, #48	; 0x30
   28eac:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   28eae:	69ba      	ldr	r2, [r7, #24]
   28eb0:	2131      	movs	r1, #49	; 0x31
   28eb2:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   28eb4:	4013      	ands	r3, r2
   28eb6:	b2da      	uxtb	r2, r3
   28eb8:	2310      	movs	r3, #16
   28eba:	18fb      	adds	r3, r7, r3
   28ebc:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   28ebe:	2312      	movs	r3, #18
   28ec0:	18fb      	adds	r3, r7, r3
   28ec2:	881b      	ldrh	r3, [r3, #0]
   28ec4:	2201      	movs	r2, #1
   28ec6:	4013      	ands	r3, r2
   28ec8:	d044      	beq.n	28f54 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   28eca:	69bb      	ldr	r3, [r7, #24]
   28ecc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28ece:	b29b      	uxth	r3, r3
   28ed0:	2b00      	cmp	r3, #0
   28ed2:	d03c      	beq.n	28f4e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   28ed4:	69bb      	ldr	r3, [r7, #24]
   28ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28ed8:	781b      	ldrb	r3, [r3, #0]
   28eda:	b2da      	uxtb	r2, r3
   28edc:	231c      	movs	r3, #28
   28ede:	18fb      	adds	r3, r7, r3
   28ee0:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   28ee2:	69bb      	ldr	r3, [r7, #24]
   28ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28ee6:	1c5a      	adds	r2, r3, #1
   28ee8:	69bb      	ldr	r3, [r7, #24]
   28eea:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   28eec:	69bb      	ldr	r3, [r7, #24]
   28eee:	795b      	ldrb	r3, [r3, #5]
   28ef0:	2b01      	cmp	r3, #1
   28ef2:	d113      	bne.n	28f1c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   28ef4:	69bb      	ldr	r3, [r7, #24]
   28ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28ef8:	781b      	ldrb	r3, [r3, #0]
   28efa:	b2db      	uxtb	r3, r3
   28efc:	021b      	lsls	r3, r3, #8
   28efe:	b21a      	sxth	r2, r3
   28f00:	231c      	movs	r3, #28
   28f02:	18fb      	adds	r3, r7, r3
   28f04:	2100      	movs	r1, #0
   28f06:	5e5b      	ldrsh	r3, [r3, r1]
   28f08:	4313      	orrs	r3, r2
   28f0a:	b21a      	sxth	r2, r3
   28f0c:	231c      	movs	r3, #28
   28f0e:	18fb      	adds	r3, r7, r3
   28f10:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   28f12:	69bb      	ldr	r3, [r7, #24]
   28f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28f16:	1c5a      	adds	r2, r3, #1
   28f18:	69bb      	ldr	r3, [r7, #24]
   28f1a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   28f1c:	231c      	movs	r3, #28
   28f1e:	18fb      	adds	r3, r7, r3
   28f20:	881b      	ldrh	r3, [r3, #0]
   28f22:	05db      	lsls	r3, r3, #23
   28f24:	0ddb      	lsrs	r3, r3, #23
   28f26:	b29a      	uxth	r2, r3
   28f28:	697b      	ldr	r3, [r7, #20]
   28f2a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   28f2c:	69bb      	ldr	r3, [r7, #24]
   28f2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28f30:	b29b      	uxth	r3, r3
   28f32:	3b01      	subs	r3, #1
   28f34:	b29b      	uxth	r3, r3
   28f36:	69ba      	ldr	r2, [r7, #24]
   28f38:	1c19      	adds	r1, r3, #0
   28f3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
   28f3c:	2b00      	cmp	r3, #0
   28f3e:	d109      	bne.n	28f54 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   28f40:	697b      	ldr	r3, [r7, #20]
   28f42:	2201      	movs	r2, #1
   28f44:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   28f46:	697b      	ldr	r3, [r7, #20]
   28f48:	2202      	movs	r2, #2
   28f4a:	759a      	strb	r2, [r3, #22]
   28f4c:	e002      	b.n	28f54 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   28f4e:	697b      	ldr	r3, [r7, #20]
   28f50:	2201      	movs	r2, #1
   28f52:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   28f54:	2312      	movs	r3, #18
   28f56:	18fb      	adds	r3, r7, r3
   28f58:	881b      	ldrh	r3, [r3, #0]
   28f5a:	2202      	movs	r2, #2
   28f5c:	4013      	ands	r3, r2
   28f5e:	d011      	beq.n	28f84 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   28f60:	697b      	ldr	r3, [r7, #20]
   28f62:	2202      	movs	r2, #2
   28f64:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   28f66:	69bb      	ldr	r3, [r7, #24]
   28f68:	2233      	movs	r2, #51	; 0x33
   28f6a:	2100      	movs	r1, #0
   28f6c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   28f6e:	2310      	movs	r3, #16
   28f70:	18fb      	adds	r3, r7, r3
   28f72:	881b      	ldrh	r3, [r3, #0]
   28f74:	2201      	movs	r2, #1
   28f76:	4013      	ands	r3, r2
   28f78:	d004      	beq.n	28f84 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   28f7a:	69bb      	ldr	r3, [r7, #24]
   28f7c:	68db      	ldr	r3, [r3, #12]
   28f7e:	69ba      	ldr	r2, [r7, #24]
   28f80:	0010      	movs	r0, r2
   28f82:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   28f84:	2312      	movs	r3, #18
   28f86:	18fb      	adds	r3, r7, r3
   28f88:	881b      	ldrh	r3, [r3, #0]
   28f8a:	2204      	movs	r2, #4
   28f8c:	4013      	ands	r3, r2
   28f8e:	d100      	bne.n	28f92 <_usart_interrupt_handler+0x132>
   28f90:	e0bd      	b.n	2910e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   28f92:	69bb      	ldr	r3, [r7, #24]
   28f94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28f96:	b29b      	uxth	r3, r3
   28f98:	2b00      	cmp	r3, #0
   28f9a:	d100      	bne.n	28f9e <_usart_interrupt_handler+0x13e>
   28f9c:	e0b4      	b.n	29108 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   28f9e:	697b      	ldr	r3, [r7, #20]
   28fa0:	8b5b      	ldrh	r3, [r3, #26]
   28fa2:	b29b      	uxth	r3, r3
   28fa4:	b2da      	uxtb	r2, r3
   28fa6:	231f      	movs	r3, #31
   28fa8:	18fb      	adds	r3, r7, r3
   28faa:	213f      	movs	r1, #63	; 0x3f
   28fac:	400a      	ands	r2, r1
   28fae:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   28fb0:	231f      	movs	r3, #31
   28fb2:	18fb      	adds	r3, r7, r3
   28fb4:	781b      	ldrb	r3, [r3, #0]
   28fb6:	2208      	movs	r2, #8
   28fb8:	4013      	ands	r3, r2
   28fba:	d007      	beq.n	28fcc <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   28fbc:	231f      	movs	r3, #31
   28fbe:	18fb      	adds	r3, r7, r3
   28fc0:	221f      	movs	r2, #31
   28fc2:	18ba      	adds	r2, r7, r2
   28fc4:	7812      	ldrb	r2, [r2, #0]
   28fc6:	2108      	movs	r1, #8
   28fc8:	438a      	bics	r2, r1
   28fca:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   28fcc:	231f      	movs	r3, #31
   28fce:	18fb      	adds	r3, r7, r3
   28fd0:	781b      	ldrb	r3, [r3, #0]
   28fd2:	2b00      	cmp	r3, #0
   28fd4:	d050      	beq.n	29078 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   28fd6:	231f      	movs	r3, #31
   28fd8:	18fb      	adds	r3, r7, r3
   28fda:	781b      	ldrb	r3, [r3, #0]
   28fdc:	2202      	movs	r2, #2
   28fde:	4013      	ands	r3, r2
   28fe0:	d007      	beq.n	28ff2 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   28fe2:	69bb      	ldr	r3, [r7, #24]
   28fe4:	2232      	movs	r2, #50	; 0x32
   28fe6:	211a      	movs	r1, #26
   28fe8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   28fea:	697b      	ldr	r3, [r7, #20]
   28fec:	2202      	movs	r2, #2
   28fee:	835a      	strh	r2, [r3, #26]
   28ff0:	e036      	b.n	29060 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   28ff2:	231f      	movs	r3, #31
   28ff4:	18fb      	adds	r3, r7, r3
   28ff6:	781b      	ldrb	r3, [r3, #0]
   28ff8:	2204      	movs	r2, #4
   28ffa:	4013      	ands	r3, r2
   28ffc:	d007      	beq.n	2900e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   28ffe:	69bb      	ldr	r3, [r7, #24]
   29000:	2232      	movs	r2, #50	; 0x32
   29002:	211e      	movs	r1, #30
   29004:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   29006:	697b      	ldr	r3, [r7, #20]
   29008:	2204      	movs	r2, #4
   2900a:	835a      	strh	r2, [r3, #26]
   2900c:	e028      	b.n	29060 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   2900e:	231f      	movs	r3, #31
   29010:	18fb      	adds	r3, r7, r3
   29012:	781b      	ldrb	r3, [r3, #0]
   29014:	2201      	movs	r2, #1
   29016:	4013      	ands	r3, r2
   29018:	d007      	beq.n	2902a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   2901a:	69bb      	ldr	r3, [r7, #24]
   2901c:	2232      	movs	r2, #50	; 0x32
   2901e:	2113      	movs	r1, #19
   29020:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   29022:	697b      	ldr	r3, [r7, #20]
   29024:	2201      	movs	r2, #1
   29026:	835a      	strh	r2, [r3, #26]
   29028:	e01a      	b.n	29060 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   2902a:	231f      	movs	r3, #31
   2902c:	18fb      	adds	r3, r7, r3
   2902e:	781b      	ldrb	r3, [r3, #0]
   29030:	2210      	movs	r2, #16
   29032:	4013      	ands	r3, r2
   29034:	d007      	beq.n	29046 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   29036:	69bb      	ldr	r3, [r7, #24]
   29038:	2232      	movs	r2, #50	; 0x32
   2903a:	2142      	movs	r1, #66	; 0x42
   2903c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   2903e:	697b      	ldr	r3, [r7, #20]
   29040:	2210      	movs	r2, #16
   29042:	835a      	strh	r2, [r3, #26]
   29044:	e00c      	b.n	29060 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   29046:	231f      	movs	r3, #31
   29048:	18fb      	adds	r3, r7, r3
   2904a:	781b      	ldrb	r3, [r3, #0]
   2904c:	2220      	movs	r2, #32
   2904e:	4013      	ands	r3, r2
   29050:	d006      	beq.n	29060 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   29052:	69bb      	ldr	r3, [r7, #24]
   29054:	2232      	movs	r2, #50	; 0x32
   29056:	2141      	movs	r1, #65	; 0x41
   29058:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   2905a:	697b      	ldr	r3, [r7, #20]
   2905c:	2220      	movs	r2, #32
   2905e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   29060:	2310      	movs	r3, #16
   29062:	18fb      	adds	r3, r7, r3
   29064:	881b      	ldrh	r3, [r3, #0]
   29066:	2204      	movs	r2, #4
   29068:	4013      	ands	r3, r2
				if (callback_status
   2906a:	d050      	beq.n	2910e <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   2906c:	69bb      	ldr	r3, [r7, #24]
   2906e:	695b      	ldr	r3, [r3, #20]
   29070:	69ba      	ldr	r2, [r7, #24]
   29072:	0010      	movs	r0, r2
   29074:	4798      	blx	r3
   29076:	e04a      	b.n	2910e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   29078:	697b      	ldr	r3, [r7, #20]
   2907a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   2907c:	b29a      	uxth	r2, r3
   2907e:	230e      	movs	r3, #14
   29080:	18fb      	adds	r3, r7, r3
   29082:	05d2      	lsls	r2, r2, #23
   29084:	0dd2      	lsrs	r2, r2, #23
   29086:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   29088:	69bb      	ldr	r3, [r7, #24]
   2908a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2908c:	220e      	movs	r2, #14
   2908e:	18ba      	adds	r2, r7, r2
   29090:	8812      	ldrh	r2, [r2, #0]
   29092:	b2d2      	uxtb	r2, r2
   29094:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   29096:	69bb      	ldr	r3, [r7, #24]
   29098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2909a:	1c5a      	adds	r2, r3, #1
   2909c:	69bb      	ldr	r3, [r7, #24]
   2909e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   290a0:	69bb      	ldr	r3, [r7, #24]
   290a2:	795b      	ldrb	r3, [r3, #5]
   290a4:	2b01      	cmp	r3, #1
   290a6:	d10d      	bne.n	290c4 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   290a8:	69bb      	ldr	r3, [r7, #24]
   290aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   290ac:	220e      	movs	r2, #14
   290ae:	18ba      	adds	r2, r7, r2
   290b0:	8812      	ldrh	r2, [r2, #0]
   290b2:	0a12      	lsrs	r2, r2, #8
   290b4:	b292      	uxth	r2, r2
   290b6:	b2d2      	uxtb	r2, r2
   290b8:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   290ba:	69bb      	ldr	r3, [r7, #24]
   290bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   290be:	1c5a      	adds	r2, r3, #1
   290c0:	69bb      	ldr	r3, [r7, #24]
   290c2:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   290c4:	69bb      	ldr	r3, [r7, #24]
   290c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   290c8:	b29b      	uxth	r3, r3
   290ca:	3b01      	subs	r3, #1
   290cc:	b29b      	uxth	r3, r3
   290ce:	69ba      	ldr	r2, [r7, #24]
   290d0:	1c19      	adds	r1, r3, #0
   290d2:	8591      	strh	r1, [r2, #44]	; 0x2c
   290d4:	2b00      	cmp	r3, #0
   290d6:	d11a      	bne.n	2910e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   290d8:	697b      	ldr	r3, [r7, #20]
   290da:	2204      	movs	r2, #4
   290dc:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   290de:	69bb      	ldr	r3, [r7, #24]
   290e0:	2232      	movs	r2, #50	; 0x32
   290e2:	2100      	movs	r1, #0
   290e4:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   290e6:	2310      	movs	r3, #16
   290e8:	18fb      	adds	r3, r7, r3
   290ea:	881b      	ldrh	r3, [r3, #0]
   290ec:	2202      	movs	r2, #2
   290ee:	4013      	ands	r3, r2
					if (callback_status
   290f0:	d00d      	beq.n	2910e <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   290f2:	69bb      	ldr	r3, [r7, #24]
   290f4:	691b      	ldr	r3, [r3, #16]
   290f6:	69ba      	ldr	r2, [r7, #24]
   290f8:	0010      	movs	r0, r2
   290fa:	4798      	blx	r3
   290fc:	e007      	b.n	2910e <_usart_interrupt_handler+0x2ae>
   290fe:	46c0      	nop			; (mov r8, r8)
   29100:	20005c04 	.word	0x20005c04
   29104:	00028c41 	.word	0x00028c41
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   29108:	697b      	ldr	r3, [r7, #20]
   2910a:	2204      	movs	r2, #4
   2910c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   2910e:	2312      	movs	r3, #18
   29110:	18fb      	adds	r3, r7, r3
   29112:	881b      	ldrh	r3, [r3, #0]
   29114:	2210      	movs	r2, #16
   29116:	4013      	ands	r3, r2
   29118:	d010      	beq.n	2913c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   2911a:	697b      	ldr	r3, [r7, #20]
   2911c:	2210      	movs	r2, #16
   2911e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   29120:	697b      	ldr	r3, [r7, #20]
   29122:	2210      	movs	r2, #16
   29124:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   29126:	2310      	movs	r3, #16
   29128:	18fb      	adds	r3, r7, r3
   2912a:	881b      	ldrh	r3, [r3, #0]
   2912c:	2210      	movs	r2, #16
   2912e:	4013      	ands	r3, r2
   29130:	d004      	beq.n	2913c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   29132:	69bb      	ldr	r3, [r7, #24]
   29134:	69db      	ldr	r3, [r3, #28]
   29136:	69ba      	ldr	r2, [r7, #24]
   29138:	0010      	movs	r0, r2
   2913a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   2913c:	2312      	movs	r3, #18
   2913e:	18fb      	adds	r3, r7, r3
   29140:	881b      	ldrh	r3, [r3, #0]
   29142:	2220      	movs	r2, #32
   29144:	4013      	ands	r3, r2
   29146:	d010      	beq.n	2916a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   29148:	697b      	ldr	r3, [r7, #20]
   2914a:	2220      	movs	r2, #32
   2914c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   2914e:	697b      	ldr	r3, [r7, #20]
   29150:	2220      	movs	r2, #32
   29152:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   29154:	2310      	movs	r3, #16
   29156:	18fb      	adds	r3, r7, r3
   29158:	881b      	ldrh	r3, [r3, #0]
   2915a:	2208      	movs	r2, #8
   2915c:	4013      	ands	r3, r2
   2915e:	d004      	beq.n	2916a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   29160:	69bb      	ldr	r3, [r7, #24]
   29162:	699b      	ldr	r3, [r3, #24]
   29164:	69ba      	ldr	r2, [r7, #24]
   29166:	0010      	movs	r0, r2
   29168:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   2916a:	2312      	movs	r3, #18
   2916c:	18fb      	adds	r3, r7, r3
   2916e:	881b      	ldrh	r3, [r3, #0]
   29170:	2208      	movs	r2, #8
   29172:	4013      	ands	r3, r2
   29174:	d010      	beq.n	29198 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   29176:	697b      	ldr	r3, [r7, #20]
   29178:	2208      	movs	r2, #8
   2917a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   2917c:	697b      	ldr	r3, [r7, #20]
   2917e:	2208      	movs	r2, #8
   29180:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   29182:	2310      	movs	r3, #16
   29184:	18fb      	adds	r3, r7, r3
   29186:	881b      	ldrh	r3, [r3, #0]
   29188:	2220      	movs	r2, #32
   2918a:	4013      	ands	r3, r2
   2918c:	d004      	beq.n	29198 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   2918e:	69bb      	ldr	r3, [r7, #24]
   29190:	6a1b      	ldr	r3, [r3, #32]
   29192:	69ba      	ldr	r2, [r7, #24]
   29194:	0010      	movs	r0, r2
   29196:	4798      	blx	r3
		}
	}
#endif
}
   29198:	46c0      	nop			; (mov r8, r8)
   2919a:	46bd      	mov	sp, r7
   2919c:	b008      	add	sp, #32
   2919e:	bd80      	pop	{r7, pc}

000291a0 <system_gclk_gen_get_config_defaults>:
{
   291a0:	b580      	push	{r7, lr}
   291a2:	b082      	sub	sp, #8
   291a4:	af00      	add	r7, sp, #0
   291a6:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   291a8:	687b      	ldr	r3, [r7, #4]
   291aa:	2201      	movs	r2, #1
   291ac:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   291ae:	687b      	ldr	r3, [r7, #4]
   291b0:	2200      	movs	r2, #0
   291b2:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   291b4:	687b      	ldr	r3, [r7, #4]
   291b6:	2206      	movs	r2, #6
   291b8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   291ba:	687b      	ldr	r3, [r7, #4]
   291bc:	2200      	movs	r2, #0
   291be:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   291c0:	687b      	ldr	r3, [r7, #4]
   291c2:	2200      	movs	r2, #0
   291c4:	725a      	strb	r2, [r3, #9]
}
   291c6:	46c0      	nop			; (mov r8, r8)
   291c8:	46bd      	mov	sp, r7
   291ca:	b002      	add	sp, #8
   291cc:	bd80      	pop	{r7, pc}

000291ce <system_gclk_chan_get_config_defaults>:
{
   291ce:	b580      	push	{r7, lr}
   291d0:	b082      	sub	sp, #8
   291d2:	af00      	add	r7, sp, #0
   291d4:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   291d6:	687b      	ldr	r3, [r7, #4]
   291d8:	2200      	movs	r2, #0
   291da:	701a      	strb	r2, [r3, #0]
}
   291dc:	46c0      	nop			; (mov r8, r8)
   291de:	46bd      	mov	sp, r7
   291e0:	b002      	add	sp, #8
   291e2:	bd80      	pop	{r7, pc}

000291e4 <system_clock_source_osc8m_get_config_defaults>:
{
   291e4:	b580      	push	{r7, lr}
   291e6:	b082      	sub	sp, #8
   291e8:	af00      	add	r7, sp, #0
   291ea:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   291ec:	687b      	ldr	r3, [r7, #4]
   291ee:	2203      	movs	r2, #3
   291f0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   291f2:	687b      	ldr	r3, [r7, #4]
   291f4:	2200      	movs	r2, #0
   291f6:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   291f8:	687b      	ldr	r3, [r7, #4]
   291fa:	2201      	movs	r2, #1
   291fc:	709a      	strb	r2, [r3, #2]
}
   291fe:	46c0      	nop			; (mov r8, r8)
   29200:	46bd      	mov	sp, r7
   29202:	b002      	add	sp, #8
   29204:	bd80      	pop	{r7, pc}
	...

00029208 <system_cpu_clock_set_divider>:
{
   29208:	b580      	push	{r7, lr}
   2920a:	b082      	sub	sp, #8
   2920c:	af00      	add	r7, sp, #0
   2920e:	0002      	movs	r2, r0
   29210:	1dfb      	adds	r3, r7, #7
   29212:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   29214:	4a03      	ldr	r2, [pc, #12]	; (29224 <system_cpu_clock_set_divider+0x1c>)
   29216:	1dfb      	adds	r3, r7, #7
   29218:	781b      	ldrb	r3, [r3, #0]
   2921a:	7213      	strb	r3, [r2, #8]
}
   2921c:	46c0      	nop			; (mov r8, r8)
   2921e:	46bd      	mov	sp, r7
   29220:	b002      	add	sp, #8
   29222:	bd80      	pop	{r7, pc}
   29224:	40000400 	.word	0x40000400

00029228 <system_apb_clock_set_divider>:
{
   29228:	b580      	push	{r7, lr}
   2922a:	b082      	sub	sp, #8
   2922c:	af00      	add	r7, sp, #0
   2922e:	0002      	movs	r2, r0
   29230:	1dfb      	adds	r3, r7, #7
   29232:	701a      	strb	r2, [r3, #0]
   29234:	1dbb      	adds	r3, r7, #6
   29236:	1c0a      	adds	r2, r1, #0
   29238:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2923a:	1dfb      	adds	r3, r7, #7
   2923c:	781b      	ldrb	r3, [r3, #0]
   2923e:	2b01      	cmp	r3, #1
   29240:	d008      	beq.n	29254 <system_apb_clock_set_divider+0x2c>
   29242:	2b02      	cmp	r3, #2
   29244:	d00b      	beq.n	2925e <system_apb_clock_set_divider+0x36>
   29246:	2b00      	cmp	r3, #0
   29248:	d10e      	bne.n	29268 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   2924a:	4a0b      	ldr	r2, [pc, #44]	; (29278 <system_apb_clock_set_divider+0x50>)
   2924c:	1dbb      	adds	r3, r7, #6
   2924e:	781b      	ldrb	r3, [r3, #0]
   29250:	7253      	strb	r3, [r2, #9]
			break;
   29252:	e00b      	b.n	2926c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   29254:	4a08      	ldr	r2, [pc, #32]	; (29278 <system_apb_clock_set_divider+0x50>)
   29256:	1dbb      	adds	r3, r7, #6
   29258:	781b      	ldrb	r3, [r3, #0]
   2925a:	7293      	strb	r3, [r2, #10]
			break;
   2925c:	e006      	b.n	2926c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   2925e:	4a06      	ldr	r2, [pc, #24]	; (29278 <system_apb_clock_set_divider+0x50>)
   29260:	1dbb      	adds	r3, r7, #6
   29262:	781b      	ldrb	r3, [r3, #0]
   29264:	72d3      	strb	r3, [r2, #11]
			break;
   29266:	e001      	b.n	2926c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   29268:	2317      	movs	r3, #23
   2926a:	e000      	b.n	2926e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   2926c:	2300      	movs	r3, #0
}
   2926e:	0018      	movs	r0, r3
   29270:	46bd      	mov	sp, r7
   29272:	b002      	add	sp, #8
   29274:	bd80      	pop	{r7, pc}
   29276:	46c0      	nop			; (mov r8, r8)
   29278:	40000400 	.word	0x40000400

0002927c <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   2927c:	b580      	push	{r7, lr}
   2927e:	b082      	sub	sp, #8
   29280:	af00      	add	r7, sp, #0
   29282:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   29284:	687b      	ldr	r3, [r7, #4]
   29286:	2201      	movs	r2, #1
   29288:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   2928a:	687b      	ldr	r3, [r7, #4]
   2928c:	2200      	movs	r2, #0
   2928e:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   29290:	687b      	ldr	r3, [r7, #4]
   29292:	2200      	movs	r2, #0
   29294:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   29296:	687b      	ldr	r3, [r7, #4]
   29298:	2200      	movs	r2, #0
   2929a:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   2929c:	687b      	ldr	r3, [r7, #4]
   2929e:	2200      	movs	r2, #0
   292a0:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   292a2:	687b      	ldr	r3, [r7, #4]
   292a4:	4a0a      	ldr	r2, [pc, #40]	; (292d0 <system_clock_source_dpll_get_config_defaults+0x54>)
   292a6:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   292a8:	687b      	ldr	r3, [r7, #4]
   292aa:	2280      	movs	r2, #128	; 0x80
   292ac:	0212      	lsls	r2, r2, #8
   292ae:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   292b0:	687b      	ldr	r3, [r7, #4]
   292b2:	2201      	movs	r2, #1
   292b4:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   292b6:	687b      	ldr	r3, [r7, #4]
   292b8:	2200      	movs	r2, #0
   292ba:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   292bc:	687b      	ldr	r3, [r7, #4]
   292be:	2200      	movs	r2, #0
   292c0:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   292c2:	687b      	ldr	r3, [r7, #4]
   292c4:	2200      	movs	r2, #0
   292c6:	749a      	strb	r2, [r3, #18]
};
   292c8:	46c0      	nop			; (mov r8, r8)
   292ca:	46bd      	mov	sp, r7
   292cc:	b002      	add	sp, #8
   292ce:	bd80      	pop	{r7, pc}
   292d0:	02dc6c00 	.word	0x02dc6c00

000292d4 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   292d4:	b580      	push	{r7, lr}
   292d6:	b082      	sub	sp, #8
   292d8:	af00      	add	r7, sp, #0
   292da:	0002      	movs	r2, r0
   292dc:	1dfb      	adds	r3, r7, #7
   292de:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   292e0:	4a08      	ldr	r2, [pc, #32]	; (29304 <system_flash_set_waitstates+0x30>)
   292e2:	1dfb      	adds	r3, r7, #7
   292e4:	781b      	ldrb	r3, [r3, #0]
   292e6:	210f      	movs	r1, #15
   292e8:	400b      	ands	r3, r1
   292ea:	b2d9      	uxtb	r1, r3
   292ec:	6853      	ldr	r3, [r2, #4]
   292ee:	200f      	movs	r0, #15
   292f0:	4001      	ands	r1, r0
   292f2:	0049      	lsls	r1, r1, #1
   292f4:	201e      	movs	r0, #30
   292f6:	4383      	bics	r3, r0
   292f8:	430b      	orrs	r3, r1
   292fa:	6053      	str	r3, [r2, #4]
}
   292fc:	46c0      	nop			; (mov r8, r8)
   292fe:	46bd      	mov	sp, r7
   29300:	b002      	add	sp, #8
   29302:	bd80      	pop	{r7, pc}
   29304:	41004000 	.word	0x41004000

00029308 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   29308:	b580      	push	{r7, lr}
   2930a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   2930c:	46c0      	nop			; (mov r8, r8)
   2930e:	4b04      	ldr	r3, [pc, #16]	; (29320 <_system_dfll_wait_for_sync+0x18>)
   29310:	68db      	ldr	r3, [r3, #12]
   29312:	2210      	movs	r2, #16
   29314:	4013      	ands	r3, r2
   29316:	d0fa      	beq.n	2930e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   29318:	46c0      	nop			; (mov r8, r8)
   2931a:	46bd      	mov	sp, r7
   2931c:	bd80      	pop	{r7, pc}
   2931e:	46c0      	nop			; (mov r8, r8)
   29320:	40000800 	.word	0x40000800

00029324 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   29324:	b580      	push	{r7, lr}
   29326:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   29328:	4b0c      	ldr	r3, [pc, #48]	; (2935c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2932a:	2202      	movs	r2, #2
   2932c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2932e:	4b0c      	ldr	r3, [pc, #48]	; (29360 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   29330:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   29332:	4a0a      	ldr	r2, [pc, #40]	; (2935c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29334:	4b0b      	ldr	r3, [pc, #44]	; (29364 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   29336:	689b      	ldr	r3, [r3, #8]
   29338:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   2933a:	4a08      	ldr	r2, [pc, #32]	; (2935c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2933c:	4b09      	ldr	r3, [pc, #36]	; (29364 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2933e:	685b      	ldr	r3, [r3, #4]
   29340:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   29342:	4b06      	ldr	r3, [pc, #24]	; (2935c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29344:	2200      	movs	r2, #0
   29346:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   29348:	4b05      	ldr	r3, [pc, #20]	; (29360 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2934a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   2934c:	4a03      	ldr	r2, [pc, #12]	; (2935c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2934e:	4b05      	ldr	r3, [pc, #20]	; (29364 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   29350:	681b      	ldr	r3, [r3, #0]
   29352:	b29b      	uxth	r3, r3
   29354:	8493      	strh	r3, [r2, #36]	; 0x24
}
   29356:	46c0      	nop			; (mov r8, r8)
   29358:	46bd      	mov	sp, r7
   2935a:	bd80      	pop	{r7, pc}
   2935c:	40000800 	.word	0x40000800
   29360:	00029309 	.word	0x00029309
   29364:	200042d8 	.word	0x200042d8

00029368 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   29368:	b580      	push	{r7, lr}
   2936a:	b082      	sub	sp, #8
   2936c:	af00      	add	r7, sp, #0
   2936e:	0002      	movs	r2, r0
   29370:	1dfb      	adds	r3, r7, #7
   29372:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   29374:	1dfb      	adds	r3, r7, #7
   29376:	781b      	ldrb	r3, [r3, #0]
   29378:	2b08      	cmp	r3, #8
   2937a:	d841      	bhi.n	29400 <system_clock_source_get_hz+0x98>
   2937c:	009a      	lsls	r2, r3, #2
   2937e:	4b23      	ldr	r3, [pc, #140]	; (2940c <system_clock_source_get_hz+0xa4>)
   29380:	18d3      	adds	r3, r2, r3
   29382:	681b      	ldr	r3, [r3, #0]
   29384:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   29386:	4b22      	ldr	r3, [pc, #136]	; (29410 <system_clock_source_get_hz+0xa8>)
   29388:	691b      	ldr	r3, [r3, #16]
   2938a:	e03a      	b.n	29402 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   2938c:	4b21      	ldr	r3, [pc, #132]	; (29414 <system_clock_source_get_hz+0xac>)
   2938e:	6a1b      	ldr	r3, [r3, #32]
   29390:	059b      	lsls	r3, r3, #22
   29392:	0f9b      	lsrs	r3, r3, #30
   29394:	b2db      	uxtb	r3, r3
   29396:	001a      	movs	r2, r3
   29398:	4b1f      	ldr	r3, [pc, #124]	; (29418 <system_clock_source_get_hz+0xb0>)
   2939a:	40d3      	lsrs	r3, r2
   2939c:	e031      	b.n	29402 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2939e:	2380      	movs	r3, #128	; 0x80
   293a0:	021b      	lsls	r3, r3, #8
   293a2:	e02e      	b.n	29402 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   293a4:	2380      	movs	r3, #128	; 0x80
   293a6:	021b      	lsls	r3, r3, #8
   293a8:	e02b      	b.n	29402 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   293aa:	4b19      	ldr	r3, [pc, #100]	; (29410 <system_clock_source_get_hz+0xa8>)
   293ac:	695b      	ldr	r3, [r3, #20]
   293ae:	e028      	b.n	29402 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   293b0:	4b17      	ldr	r3, [pc, #92]	; (29410 <system_clock_source_get_hz+0xa8>)
   293b2:	681b      	ldr	r3, [r3, #0]
   293b4:	2202      	movs	r2, #2
   293b6:	4013      	ands	r3, r2
   293b8:	d101      	bne.n	293be <system_clock_source_get_hz+0x56>
			return 0;
   293ba:	2300      	movs	r3, #0
   293bc:	e021      	b.n	29402 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   293be:	4b17      	ldr	r3, [pc, #92]	; (2941c <system_clock_source_get_hz+0xb4>)
   293c0:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   293c2:	4b13      	ldr	r3, [pc, #76]	; (29410 <system_clock_source_get_hz+0xa8>)
   293c4:	681b      	ldr	r3, [r3, #0]
   293c6:	2224      	movs	r2, #36	; 0x24
   293c8:	4013      	ands	r3, r2
   293ca:	2b04      	cmp	r3, #4
   293cc:	d109      	bne.n	293e2 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   293ce:	2000      	movs	r0, #0
   293d0:	4b13      	ldr	r3, [pc, #76]	; (29420 <system_clock_source_get_hz+0xb8>)
   293d2:	4798      	blx	r3
   293d4:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   293d6:	4b0e      	ldr	r3, [pc, #56]	; (29410 <system_clock_source_get_hz+0xa8>)
   293d8:	689b      	ldr	r3, [r3, #8]
   293da:	041b      	lsls	r3, r3, #16
   293dc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   293de:	4353      	muls	r3, r2
   293e0:	e00f      	b.n	29402 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   293e2:	4b10      	ldr	r3, [pc, #64]	; (29424 <system_clock_source_get_hz+0xbc>)
   293e4:	e00d      	b.n	29402 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   293e6:	4a0b      	ldr	r2, [pc, #44]	; (29414 <system_clock_source_get_hz+0xac>)
   293e8:	2350      	movs	r3, #80	; 0x50
   293ea:	5cd3      	ldrb	r3, [r2, r3]
   293ec:	b2db      	uxtb	r3, r3
   293ee:	001a      	movs	r2, r3
   293f0:	2304      	movs	r3, #4
   293f2:	4013      	ands	r3, r2
   293f4:	d101      	bne.n	293fa <system_clock_source_get_hz+0x92>
			return 0;
   293f6:	2300      	movs	r3, #0
   293f8:	e003      	b.n	29402 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   293fa:	4b05      	ldr	r3, [pc, #20]	; (29410 <system_clock_source_get_hz+0xa8>)
   293fc:	68db      	ldr	r3, [r3, #12]
   293fe:	e000      	b.n	29402 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   29400:	2300      	movs	r3, #0
	}
}
   29402:	0018      	movs	r0, r3
   29404:	46bd      	mov	sp, r7
   29406:	b002      	add	sp, #8
   29408:	bd80      	pop	{r7, pc}
   2940a:	46c0      	nop			; (mov r8, r8)
   2940c:	000394b8 	.word	0x000394b8
   29410:	200042d8 	.word	0x200042d8
   29414:	40000800 	.word	0x40000800
   29418:	007a1200 	.word	0x007a1200
   2941c:	00029309 	.word	0x00029309
   29420:	00029e05 	.word	0x00029e05
   29424:	02dc6c00 	.word	0x02dc6c00

00029428 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   29428:	b580      	push	{r7, lr}
   2942a:	b084      	sub	sp, #16
   2942c:	af00      	add	r7, sp, #0
   2942e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   29430:	4b1a      	ldr	r3, [pc, #104]	; (2949c <system_clock_source_osc8m_set_config+0x74>)
   29432:	6a1b      	ldr	r3, [r3, #32]
   29434:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   29436:	687b      	ldr	r3, [r7, #4]
   29438:	781b      	ldrb	r3, [r3, #0]
   2943a:	1c1a      	adds	r2, r3, #0
   2943c:	2303      	movs	r3, #3
   2943e:	4013      	ands	r3, r2
   29440:	b2da      	uxtb	r2, r3
   29442:	230d      	movs	r3, #13
   29444:	18fb      	adds	r3, r7, r3
   29446:	2103      	movs	r1, #3
   29448:	400a      	ands	r2, r1
   2944a:	0010      	movs	r0, r2
   2944c:	781a      	ldrb	r2, [r3, #0]
   2944e:	2103      	movs	r1, #3
   29450:	438a      	bics	r2, r1
   29452:	1c11      	adds	r1, r2, #0
   29454:	1c02      	adds	r2, r0, #0
   29456:	430a      	orrs	r2, r1
   29458:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   2945a:	687b      	ldr	r3, [r7, #4]
   2945c:	789a      	ldrb	r2, [r3, #2]
   2945e:	230c      	movs	r3, #12
   29460:	18fb      	adds	r3, r7, r3
   29462:	01d0      	lsls	r0, r2, #7
   29464:	781a      	ldrb	r2, [r3, #0]
   29466:	217f      	movs	r1, #127	; 0x7f
   29468:	400a      	ands	r2, r1
   2946a:	1c11      	adds	r1, r2, #0
   2946c:	1c02      	adds	r2, r0, #0
   2946e:	430a      	orrs	r2, r1
   29470:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   29472:	687b      	ldr	r3, [r7, #4]
   29474:	785a      	ldrb	r2, [r3, #1]
   29476:	230c      	movs	r3, #12
   29478:	18fb      	adds	r3, r7, r3
   2947a:	2101      	movs	r1, #1
   2947c:	400a      	ands	r2, r1
   2947e:	0190      	lsls	r0, r2, #6
   29480:	781a      	ldrb	r2, [r3, #0]
   29482:	2140      	movs	r1, #64	; 0x40
   29484:	438a      	bics	r2, r1
   29486:	1c11      	adds	r1, r2, #0
   29488:	1c02      	adds	r2, r0, #0
   2948a:	430a      	orrs	r2, r1
   2948c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2948e:	4b03      	ldr	r3, [pc, #12]	; (2949c <system_clock_source_osc8m_set_config+0x74>)
   29490:	68fa      	ldr	r2, [r7, #12]
   29492:	621a      	str	r2, [r3, #32]
}
   29494:	46c0      	nop			; (mov r8, r8)
   29496:	46bd      	mov	sp, r7
   29498:	b004      	add	sp, #16
   2949a:	bd80      	pop	{r7, pc}
   2949c:	40000800 	.word	0x40000800

000294a0 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   294a0:	b580      	push	{r7, lr}
   294a2:	b086      	sub	sp, #24
   294a4:	af00      	add	r7, sp, #0
   294a6:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   294a8:	687b      	ldr	r3, [r7, #4]
   294aa:	68db      	ldr	r3, [r3, #12]
   294ac:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   294ae:	687b      	ldr	r3, [r7, #4]
   294b0:	7d1b      	ldrb	r3, [r3, #20]
   294b2:	2b01      	cmp	r3, #1
   294b4:	d10a      	bne.n	294cc <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   294b6:	687b      	ldr	r3, [r7, #4]
   294b8:	8a1b      	ldrh	r3, [r3, #16]
   294ba:	3301      	adds	r3, #1
   294bc:	005b      	lsls	r3, r3, #1
   294be:	001a      	movs	r2, r3
   294c0:	4b36      	ldr	r3, [pc, #216]	; (2959c <system_clock_source_dpll_set_config+0xfc>)
   294c2:	0011      	movs	r1, r2
   294c4:	6978      	ldr	r0, [r7, #20]
   294c6:	4798      	blx	r3
   294c8:	0003      	movs	r3, r0
   294ca:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   294cc:	687b      	ldr	r3, [r7, #4]
   294ce:	689b      	ldr	r3, [r3, #8]
   294d0:	011a      	lsls	r2, r3, #4
   294d2:	4b32      	ldr	r3, [pc, #200]	; (2959c <system_clock_source_dpll_set_config+0xfc>)
   294d4:	6979      	ldr	r1, [r7, #20]
   294d6:	0010      	movs	r0, r2
   294d8:	4798      	blx	r3
   294da:	0003      	movs	r3, r0
   294dc:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   294de:	693b      	ldr	r3, [r7, #16]
   294e0:	b2da      	uxtb	r2, r3
   294e2:	230f      	movs	r3, #15
   294e4:	18fb      	adds	r3, r7, r3
   294e6:	210f      	movs	r1, #15
   294e8:	400a      	ands	r2, r1
   294ea:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   294ec:	693b      	ldr	r3, [r7, #16]
   294ee:	091b      	lsrs	r3, r3, #4
   294f0:	3b01      	subs	r3, #1
   294f2:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   294f4:	492a      	ldr	r1, [pc, #168]	; (295a0 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   294f6:	687b      	ldr	r3, [r7, #4]
   294f8:	781b      	ldrb	r3, [r3, #0]
   294fa:	01db      	lsls	r3, r3, #7
   294fc:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   294fe:	687b      	ldr	r3, [r7, #4]
   29500:	785b      	ldrb	r3, [r3, #1]
   29502:	019b      	lsls	r3, r3, #6
   29504:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   29506:	4313      	orrs	r3, r2
   29508:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   2950a:	2344      	movs	r3, #68	; 0x44
   2950c:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   2950e:	4b24      	ldr	r3, [pc, #144]	; (295a0 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   29510:	220f      	movs	r2, #15
   29512:	18ba      	adds	r2, r7, r2
   29514:	7812      	ldrb	r2, [r2, #0]
   29516:	0412      	lsls	r2, r2, #16
   29518:	0011      	movs	r1, r2
   2951a:	22f0      	movs	r2, #240	; 0xf0
   2951c:	0312      	lsls	r2, r2, #12
   2951e:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   29520:	693a      	ldr	r2, [r7, #16]
   29522:	0512      	lsls	r2, r2, #20
   29524:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   29526:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   29528:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   2952a:	4b1d      	ldr	r3, [pc, #116]	; (295a0 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2952c:	687a      	ldr	r2, [r7, #4]
   2952e:	8a12      	ldrh	r2, [r2, #16]
   29530:	0412      	lsls	r2, r2, #16
   29532:	0011      	movs	r1, r2
   29534:	4a1b      	ldr	r2, [pc, #108]	; (295a4 <system_clock_source_dpll_set_config+0x104>)
   29536:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   29538:	687a      	ldr	r2, [r7, #4]
   2953a:	7892      	ldrb	r2, [r2, #2]
   2953c:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2953e:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   29540:	687a      	ldr	r2, [r7, #4]
   29542:	7cd2      	ldrb	r2, [r2, #19]
   29544:	0212      	lsls	r2, r2, #8
   29546:	0010      	movs	r0, r2
   29548:	22e0      	movs	r2, #224	; 0xe0
   2954a:	00d2      	lsls	r2, r2, #3
   2954c:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2954e:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   29550:	687a      	ldr	r2, [r7, #4]
   29552:	7d12      	ldrb	r2, [r2, #20]
   29554:	0112      	lsls	r2, r2, #4
   29556:	0010      	movs	r0, r2
   29558:	2230      	movs	r2, #48	; 0x30
   2955a:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2955c:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2955e:	687a      	ldr	r2, [r7, #4]
   29560:	78d2      	ldrb	r2, [r2, #3]
   29562:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   29564:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   29566:	687a      	ldr	r2, [r7, #4]
   29568:	7912      	ldrb	r2, [r2, #4]
   2956a:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2956c:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   2956e:	687a      	ldr	r2, [r7, #4]
   29570:	7c92      	ldrb	r2, [r2, #18]
   29572:	0010      	movs	r0, r2
   29574:	2203      	movs	r2, #3
   29576:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   29578:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   2957a:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   2957c:	693b      	ldr	r3, [r7, #16]
   2957e:	3301      	adds	r3, #1
   29580:	011a      	lsls	r2, r3, #4
   29582:	230f      	movs	r3, #15
   29584:	18fb      	adds	r3, r7, r3
   29586:	781b      	ldrb	r3, [r3, #0]
   29588:	18d3      	adds	r3, r2, r3
   2958a:	697a      	ldr	r2, [r7, #20]
   2958c:	4353      	muls	r3, r2
   2958e:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   29590:	4b05      	ldr	r3, [pc, #20]	; (295a8 <system_clock_source_dpll_set_config+0x108>)
   29592:	60da      	str	r2, [r3, #12]
}
   29594:	46c0      	nop			; (mov r8, r8)
   29596:	46bd      	mov	sp, r7
   29598:	b006      	add	sp, #24
   2959a:	bd80      	pop	{r7, pc}
   2959c:	00032805 	.word	0x00032805
   295a0:	40000800 	.word	0x40000800
   295a4:	07ff0000 	.word	0x07ff0000
   295a8:	200042d8 	.word	0x200042d8

000295ac <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   295ac:	b580      	push	{r7, lr}
   295ae:	b082      	sub	sp, #8
   295b0:	af00      	add	r7, sp, #0
   295b2:	0002      	movs	r2, r0
   295b4:	1dfb      	adds	r3, r7, #7
   295b6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   295b8:	1dfb      	adds	r3, r7, #7
   295ba:	781b      	ldrb	r3, [r3, #0]
   295bc:	2b08      	cmp	r3, #8
   295be:	d83b      	bhi.n	29638 <system_clock_source_enable+0x8c>
   295c0:	009a      	lsls	r2, r3, #2
   295c2:	4b21      	ldr	r3, [pc, #132]	; (29648 <system_clock_source_enable+0x9c>)
   295c4:	18d3      	adds	r3, r2, r3
   295c6:	681b      	ldr	r3, [r3, #0]
   295c8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   295ca:	4b20      	ldr	r3, [pc, #128]	; (2964c <system_clock_source_enable+0xa0>)
   295cc:	4a1f      	ldr	r2, [pc, #124]	; (2964c <system_clock_source_enable+0xa0>)
   295ce:	6a12      	ldr	r2, [r2, #32]
   295d0:	2102      	movs	r1, #2
   295d2:	430a      	orrs	r2, r1
   295d4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   295d6:	2300      	movs	r3, #0
   295d8:	e031      	b.n	2963e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   295da:	4b1c      	ldr	r3, [pc, #112]	; (2964c <system_clock_source_enable+0xa0>)
   295dc:	4a1b      	ldr	r2, [pc, #108]	; (2964c <system_clock_source_enable+0xa0>)
   295de:	6992      	ldr	r2, [r2, #24]
   295e0:	2102      	movs	r1, #2
   295e2:	430a      	orrs	r2, r1
   295e4:	619a      	str	r2, [r3, #24]
		break;
   295e6:	e029      	b.n	2963c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   295e8:	4a18      	ldr	r2, [pc, #96]	; (2964c <system_clock_source_enable+0xa0>)
   295ea:	4b18      	ldr	r3, [pc, #96]	; (2964c <system_clock_source_enable+0xa0>)
   295ec:	8a1b      	ldrh	r3, [r3, #16]
   295ee:	b29b      	uxth	r3, r3
   295f0:	2102      	movs	r1, #2
   295f2:	430b      	orrs	r3, r1
   295f4:	b29b      	uxth	r3, r3
   295f6:	8213      	strh	r3, [r2, #16]
		break;
   295f8:	e020      	b.n	2963c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   295fa:	4a14      	ldr	r2, [pc, #80]	; (2964c <system_clock_source_enable+0xa0>)
   295fc:	4b13      	ldr	r3, [pc, #76]	; (2964c <system_clock_source_enable+0xa0>)
   295fe:	8a9b      	ldrh	r3, [r3, #20]
   29600:	b29b      	uxth	r3, r3
   29602:	2102      	movs	r1, #2
   29604:	430b      	orrs	r3, r1
   29606:	b29b      	uxth	r3, r3
   29608:	8293      	strh	r3, [r2, #20]
		break;
   2960a:	e017      	b.n	2963c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   2960c:	4b10      	ldr	r3, [pc, #64]	; (29650 <system_clock_source_enable+0xa4>)
   2960e:	681b      	ldr	r3, [r3, #0]
   29610:	2202      	movs	r2, #2
   29612:	431a      	orrs	r2, r3
   29614:	4b0e      	ldr	r3, [pc, #56]	; (29650 <system_clock_source_enable+0xa4>)
   29616:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   29618:	4b0e      	ldr	r3, [pc, #56]	; (29654 <system_clock_source_enable+0xa8>)
   2961a:	4798      	blx	r3
		break;
   2961c:	e00e      	b.n	2963c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   2961e:	4a0b      	ldr	r2, [pc, #44]	; (2964c <system_clock_source_enable+0xa0>)
   29620:	490a      	ldr	r1, [pc, #40]	; (2964c <system_clock_source_enable+0xa0>)
   29622:	2344      	movs	r3, #68	; 0x44
   29624:	5ccb      	ldrb	r3, [r1, r3]
   29626:	b2db      	uxtb	r3, r3
   29628:	2102      	movs	r1, #2
   2962a:	430b      	orrs	r3, r1
   2962c:	b2d9      	uxtb	r1, r3
   2962e:	2344      	movs	r3, #68	; 0x44
   29630:	54d1      	strb	r1, [r2, r3]
		break;
   29632:	e003      	b.n	2963c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   29634:	2300      	movs	r3, #0
   29636:	e002      	b.n	2963e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   29638:	2317      	movs	r3, #23
   2963a:	e000      	b.n	2963e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   2963c:	2300      	movs	r3, #0
}
   2963e:	0018      	movs	r0, r3
   29640:	46bd      	mov	sp, r7
   29642:	b002      	add	sp, #8
   29644:	bd80      	pop	{r7, pc}
   29646:	46c0      	nop			; (mov r8, r8)
   29648:	000394dc 	.word	0x000394dc
   2964c:	40000800 	.word	0x40000800
   29650:	200042d8 	.word	0x200042d8
   29654:	00029325 	.word	0x00029325

00029658 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   29658:	b580      	push	{r7, lr}
   2965a:	b084      	sub	sp, #16
   2965c:	af00      	add	r7, sp, #0
   2965e:	0002      	movs	r2, r0
   29660:	1dfb      	adds	r3, r7, #7
   29662:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   29664:	2300      	movs	r3, #0
   29666:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   29668:	1dfb      	adds	r3, r7, #7
   2966a:	781b      	ldrb	r3, [r3, #0]
   2966c:	2b08      	cmp	r3, #8
   2966e:	d821      	bhi.n	296b4 <system_clock_source_is_ready+0x5c>
   29670:	009a      	lsls	r2, r3, #2
   29672:	4b18      	ldr	r3, [pc, #96]	; (296d4 <system_clock_source_is_ready+0x7c>)
   29674:	18d3      	adds	r3, r2, r3
   29676:	681b      	ldr	r3, [r3, #0]
   29678:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   2967a:	2308      	movs	r3, #8
   2967c:	60fb      	str	r3, [r7, #12]
		break;
   2967e:	e01b      	b.n	296b8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   29680:	2304      	movs	r3, #4
   29682:	60fb      	str	r3, [r7, #12]
		break;
   29684:	e018      	b.n	296b8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   29686:	2301      	movs	r3, #1
   29688:	60fb      	str	r3, [r7, #12]
		break;
   2968a:	e015      	b.n	296b8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   2968c:	2302      	movs	r3, #2
   2968e:	60fb      	str	r3, [r7, #12]
		break;
   29690:	e012      	b.n	296b8 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   29692:	2310      	movs	r3, #16
   29694:	60fb      	str	r3, [r7, #12]
		}
		break;
   29696:	e00f      	b.n	296b8 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   29698:	4a0f      	ldr	r2, [pc, #60]	; (296d8 <system_clock_source_is_ready+0x80>)
   2969a:	2350      	movs	r3, #80	; 0x50
   2969c:	5cd3      	ldrb	r3, [r2, r3]
   2969e:	b2db      	uxtb	r3, r3
   296a0:	001a      	movs	r2, r3
   296a2:	2303      	movs	r3, #3
   296a4:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   296a6:	3b03      	subs	r3, #3
   296a8:	425a      	negs	r2, r3
   296aa:	4153      	adcs	r3, r2
   296ac:	b2db      	uxtb	r3, r3
   296ae:	e00c      	b.n	296ca <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   296b0:	2301      	movs	r3, #1
   296b2:	e00a      	b.n	296ca <system_clock_source_is_ready+0x72>

	default:
		return false;
   296b4:	2300      	movs	r3, #0
   296b6:	e008      	b.n	296ca <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   296b8:	4b07      	ldr	r3, [pc, #28]	; (296d8 <system_clock_source_is_ready+0x80>)
   296ba:	68db      	ldr	r3, [r3, #12]
   296bc:	68fa      	ldr	r2, [r7, #12]
   296be:	401a      	ands	r2, r3
   296c0:	68fb      	ldr	r3, [r7, #12]
   296c2:	1ad3      	subs	r3, r2, r3
   296c4:	425a      	negs	r2, r3
   296c6:	4153      	adcs	r3, r2
   296c8:	b2db      	uxtb	r3, r3
}
   296ca:	0018      	movs	r0, r3
   296cc:	46bd      	mov	sp, r7
   296ce:	b004      	add	sp, #16
   296d0:	bd80      	pop	{r7, pc}
   296d2:	46c0      	nop			; (mov r8, r8)
   296d4:	00039500 	.word	0x00039500
   296d8:	40000800 	.word	0x40000800

000296dc <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   296dc:	b580      	push	{r7, lr}
   296de:	b082      	sub	sp, #8
   296e0:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   296e2:	003b      	movs	r3, r7
   296e4:	2203      	movs	r2, #3
   296e6:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   296e8:	2300      	movs	r3, #0
   296ea:	607b      	str	r3, [r7, #4]
   296ec:	e009      	b.n	29702 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   296ee:	687b      	ldr	r3, [r7, #4]
   296f0:	b2db      	uxtb	r3, r3
   296f2:	003a      	movs	r2, r7
   296f4:	0011      	movs	r1, r2
   296f6:	0018      	movs	r0, r3
   296f8:	4b05      	ldr	r3, [pc, #20]	; (29710 <_switch_peripheral_gclk+0x34>)
   296fa:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   296fc:	687b      	ldr	r3, [r7, #4]
   296fe:	3301      	adds	r3, #1
   29700:	607b      	str	r3, [r7, #4]
   29702:	687b      	ldr	r3, [r7, #4]
   29704:	2b24      	cmp	r3, #36	; 0x24
   29706:	d9f2      	bls.n	296ee <_switch_peripheral_gclk+0x12>
	}
}
   29708:	46c0      	nop			; (mov r8, r8)
   2970a:	46bd      	mov	sp, r7
   2970c:	b002      	add	sp, #8
   2970e:	bd80      	pop	{r7, pc}
   29710:	00029ce1 	.word	0x00029ce1

00029714 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   29714:	b580      	push	{r7, lr}
   29716:	b0a6      	sub	sp, #152	; 0x98
   29718:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   2971a:	4b92      	ldr	r3, [pc, #584]	; (29964 <system_clock_init+0x250>)
   2971c:	22c2      	movs	r2, #194	; 0xc2
   2971e:	00d2      	lsls	r2, r2, #3
   29720:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   29722:	2003      	movs	r0, #3
   29724:	4b90      	ldr	r3, [pc, #576]	; (29968 <system_clock_init+0x254>)
   29726:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   29728:	4b90      	ldr	r3, [pc, #576]	; (2996c <system_clock_init+0x258>)
   2972a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   2972c:	2394      	movs	r3, #148	; 0x94
   2972e:	18fb      	adds	r3, r7, r3
   29730:	0018      	movs	r0, r3
   29732:	4b8f      	ldr	r3, [pc, #572]	; (29970 <system_clock_init+0x25c>)
   29734:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   29736:	2394      	movs	r3, #148	; 0x94
   29738:	18fb      	adds	r3, r7, r3
   2973a:	2200      	movs	r2, #0
   2973c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   2973e:	2394      	movs	r3, #148	; 0x94
   29740:	18fb      	adds	r3, r7, r3
   29742:	2201      	movs	r2, #1
   29744:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   29746:	2394      	movs	r3, #148	; 0x94
   29748:	18fb      	adds	r3, r7, r3
   2974a:	2200      	movs	r2, #0
   2974c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   2974e:	2394      	movs	r3, #148	; 0x94
   29750:	18fb      	adds	r3, r7, r3
   29752:	0018      	movs	r0, r3
   29754:	4b87      	ldr	r3, [pc, #540]	; (29974 <system_clock_init+0x260>)
   29756:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   29758:	2006      	movs	r0, #6
   2975a:	4b87      	ldr	r3, [pc, #540]	; (29978 <system_clock_init+0x264>)
   2975c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   2975e:	4b87      	ldr	r3, [pc, #540]	; (2997c <system_clock_init+0x268>)
   29760:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   29762:	2360      	movs	r3, #96	; 0x60
   29764:	18fb      	adds	r3, r7, r3
   29766:	0018      	movs	r0, r3
   29768:	4b85      	ldr	r3, [pc, #532]	; (29980 <system_clock_init+0x26c>)
   2976a:	4798      	blx	r3
   2976c:	2360      	movs	r3, #96	; 0x60
   2976e:	18fb      	adds	r3, r7, r3
   29770:	2206      	movs	r2, #6
   29772:	701a      	strb	r2, [r3, #0]
   29774:	2360      	movs	r3, #96	; 0x60
   29776:	18fb      	adds	r3, r7, r3
   29778:	2208      	movs	r2, #8
   2977a:	605a      	str	r2, [r3, #4]
   2977c:	2360      	movs	r3, #96	; 0x60
   2977e:	18fb      	adds	r3, r7, r3
   29780:	2200      	movs	r2, #0
   29782:	721a      	strb	r2, [r3, #8]
   29784:	2360      	movs	r3, #96	; 0x60
   29786:	18fb      	adds	r3, r7, r3
   29788:	2200      	movs	r2, #0
   2978a:	725a      	strb	r2, [r3, #9]
   2978c:	2360      	movs	r3, #96	; 0x60
   2978e:	18fb      	adds	r3, r7, r3
   29790:	0019      	movs	r1, r3
   29792:	2001      	movs	r0, #1
   29794:	4b7b      	ldr	r3, [pc, #492]	; (29984 <system_clock_init+0x270>)
   29796:	4798      	blx	r3
   29798:	2001      	movs	r0, #1
   2979a:	4b7b      	ldr	r3, [pc, #492]	; (29988 <system_clock_init+0x274>)
   2979c:	4798      	blx	r3
   2979e:	2354      	movs	r3, #84	; 0x54
   297a0:	18fb      	adds	r3, r7, r3
   297a2:	0018      	movs	r0, r3
   297a4:	4b76      	ldr	r3, [pc, #472]	; (29980 <system_clock_init+0x26c>)
   297a6:	4798      	blx	r3
   297a8:	2354      	movs	r3, #84	; 0x54
   297aa:	18fb      	adds	r3, r7, r3
   297ac:	2203      	movs	r2, #3
   297ae:	701a      	strb	r2, [r3, #0]
   297b0:	2354      	movs	r3, #84	; 0x54
   297b2:	18fb      	adds	r3, r7, r3
   297b4:	2201      	movs	r2, #1
   297b6:	605a      	str	r2, [r3, #4]
   297b8:	2354      	movs	r3, #84	; 0x54
   297ba:	18fb      	adds	r3, r7, r3
   297bc:	2201      	movs	r2, #1
   297be:	721a      	strb	r2, [r3, #8]
   297c0:	2354      	movs	r3, #84	; 0x54
   297c2:	18fb      	adds	r3, r7, r3
   297c4:	2200      	movs	r2, #0
   297c6:	725a      	strb	r2, [r3, #9]
   297c8:	2354      	movs	r3, #84	; 0x54
   297ca:	18fb      	adds	r3, r7, r3
   297cc:	0019      	movs	r1, r3
   297ce:	2002      	movs	r0, #2
   297d0:	4b6c      	ldr	r3, [pc, #432]	; (29984 <system_clock_init+0x270>)
   297d2:	4798      	blx	r3
   297d4:	2002      	movs	r0, #2
   297d6:	4b6c      	ldr	r3, [pc, #432]	; (29988 <system_clock_init+0x274>)
   297d8:	4798      	blx	r3
   297da:	233c      	movs	r3, #60	; 0x3c
   297dc:	18fb      	adds	r3, r7, r3
   297de:	0018      	movs	r0, r3
   297e0:	4b67      	ldr	r3, [pc, #412]	; (29980 <system_clock_init+0x26c>)
   297e2:	4798      	blx	r3
   297e4:	233c      	movs	r3, #60	; 0x3c
   297e6:	18fb      	adds	r3, r7, r3
   297e8:	2203      	movs	r2, #3
   297ea:	701a      	strb	r2, [r3, #0]
   297ec:	233c      	movs	r3, #60	; 0x3c
   297ee:	18fb      	adds	r3, r7, r3
   297f0:	2220      	movs	r2, #32
   297f2:	605a      	str	r2, [r3, #4]
   297f4:	233c      	movs	r3, #60	; 0x3c
   297f6:	18fb      	adds	r3, r7, r3
   297f8:	2200      	movs	r2, #0
   297fa:	721a      	strb	r2, [r3, #8]
   297fc:	233c      	movs	r3, #60	; 0x3c
   297fe:	18fb      	adds	r3, r7, r3
   29800:	2200      	movs	r2, #0
   29802:	725a      	strb	r2, [r3, #9]
   29804:	233c      	movs	r3, #60	; 0x3c
   29806:	18fb      	adds	r3, r7, r3
   29808:	0019      	movs	r1, r3
   2980a:	2004      	movs	r0, #4
   2980c:	4b5d      	ldr	r3, [pc, #372]	; (29984 <system_clock_init+0x270>)
   2980e:	4798      	blx	r3
   29810:	2004      	movs	r0, #4
   29812:	4b5d      	ldr	r3, [pc, #372]	; (29988 <system_clock_init+0x274>)
   29814:	4798      	blx	r3
   29816:	2330      	movs	r3, #48	; 0x30
   29818:	18fb      	adds	r3, r7, r3
   2981a:	0018      	movs	r0, r3
   2981c:	4b58      	ldr	r3, [pc, #352]	; (29980 <system_clock_init+0x26c>)
   2981e:	4798      	blx	r3
   29820:	2330      	movs	r3, #48	; 0x30
   29822:	18fb      	adds	r3, r7, r3
   29824:	2206      	movs	r2, #6
   29826:	701a      	strb	r2, [r3, #0]
   29828:	2330      	movs	r3, #48	; 0x30
   2982a:	18fb      	adds	r3, r7, r3
   2982c:	2201      	movs	r2, #1
   2982e:	605a      	str	r2, [r3, #4]
   29830:	2330      	movs	r3, #48	; 0x30
   29832:	18fb      	adds	r3, r7, r3
   29834:	2200      	movs	r2, #0
   29836:	721a      	strb	r2, [r3, #8]
   29838:	2330      	movs	r3, #48	; 0x30
   2983a:	18fb      	adds	r3, r7, r3
   2983c:	2200      	movs	r2, #0
   2983e:	725a      	strb	r2, [r3, #9]
   29840:	2330      	movs	r3, #48	; 0x30
   29842:	18fb      	adds	r3, r7, r3
   29844:	0019      	movs	r1, r3
   29846:	2005      	movs	r0, #5
   29848:	4b4e      	ldr	r3, [pc, #312]	; (29984 <system_clock_init+0x270>)
   2984a:	4798      	blx	r3
   2984c:	2005      	movs	r0, #5
   2984e:	4b4e      	ldr	r3, [pc, #312]	; (29988 <system_clock_init+0x274>)
   29850:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   29852:	2390      	movs	r3, #144	; 0x90
   29854:	18fb      	adds	r3, r7, r3
   29856:	0018      	movs	r0, r3
   29858:	4b4c      	ldr	r3, [pc, #304]	; (2998c <system_clock_init+0x278>)
   2985a:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   2985c:	2390      	movs	r3, #144	; 0x90
   2985e:	18fb      	adds	r3, r7, r3
   29860:	2201      	movs	r2, #1
   29862:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   29864:	2390      	movs	r3, #144	; 0x90
   29866:	18fb      	adds	r3, r7, r3
   29868:	0019      	movs	r1, r3
   2986a:	2001      	movs	r0, #1
   2986c:	4b48      	ldr	r3, [pc, #288]	; (29990 <system_clock_init+0x27c>)
   2986e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   29870:	2001      	movs	r0, #1
   29872:	4b48      	ldr	r3, [pc, #288]	; (29994 <system_clock_init+0x280>)
   29874:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   29876:	2378      	movs	r3, #120	; 0x78
   29878:	18fb      	adds	r3, r7, r3
   2987a:	0018      	movs	r0, r3
   2987c:	4b46      	ldr	r3, [pc, #280]	; (29998 <system_clock_init+0x284>)
   2987e:	4798      	blx	r3

	dpll_config.on_demand        = false;
   29880:	2378      	movs	r3, #120	; 0x78
   29882:	18fb      	adds	r3, r7, r3
   29884:	2200      	movs	r2, #0
   29886:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   29888:	2378      	movs	r3, #120	; 0x78
   2988a:	18fb      	adds	r3, r7, r3
   2988c:	2200      	movs	r2, #0
   2988e:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   29890:	2378      	movs	r3, #120	; 0x78
   29892:	18fb      	adds	r3, r7, r3
   29894:	2200      	movs	r2, #0
   29896:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   29898:	2378      	movs	r3, #120	; 0x78
   2989a:	18fb      	adds	r3, r7, r3
   2989c:	2200      	movs	r2, #0
   2989e:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   298a0:	2378      	movs	r3, #120	; 0x78
   298a2:	18fb      	adds	r3, r7, r3
   298a4:	2200      	movs	r2, #0
   298a6:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   298a8:	2378      	movs	r3, #120	; 0x78
   298aa:	18fb      	adds	r3, r7, r3
   298ac:	2200      	movs	r2, #0
   298ae:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   298b0:	2378      	movs	r3, #120	; 0x78
   298b2:	18fb      	adds	r3, r7, r3
   298b4:	2200      	movs	r2, #0
   298b6:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   298b8:	2378      	movs	r3, #120	; 0x78
   298ba:	18fb      	adds	r3, r7, r3
   298bc:	2202      	movs	r2, #2
   298be:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   298c0:	2378      	movs	r3, #120	; 0x78
   298c2:	18fb      	adds	r3, r7, r3
   298c4:	4a35      	ldr	r2, [pc, #212]	; (2999c <system_clock_init+0x288>)
   298c6:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   298c8:	2378      	movs	r3, #120	; 0x78
   298ca:	18fb      	adds	r3, r7, r3
   298cc:	2201      	movs	r2, #1
   298ce:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   298d0:	2378      	movs	r3, #120	; 0x78
   298d2:	18fb      	adds	r3, r7, r3
   298d4:	4a32      	ldr	r2, [pc, #200]	; (299a0 <system_clock_init+0x28c>)
   298d6:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   298d8:	2378      	movs	r3, #120	; 0x78
   298da:	18fb      	adds	r3, r7, r3
   298dc:	0018      	movs	r0, r3
   298de:	4b31      	ldr	r3, [pc, #196]	; (299a4 <system_clock_init+0x290>)
   298e0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   298e2:	2008      	movs	r0, #8
   298e4:	4b24      	ldr	r3, [pc, #144]	; (29978 <system_clock_init+0x264>)
   298e6:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   298e8:	46c0      	nop			; (mov r8, r8)
   298ea:	2008      	movs	r0, #8
   298ec:	4b2e      	ldr	r3, [pc, #184]	; (299a8 <system_clock_init+0x294>)
   298ee:	4798      	blx	r3
   298f0:	0003      	movs	r3, r0
   298f2:	001a      	movs	r2, r3
   298f4:	2301      	movs	r3, #1
   298f6:	4053      	eors	r3, r2
   298f8:	b2db      	uxtb	r3, r3
   298fa:	2b00      	cmp	r3, #0
   298fc:	d1f5      	bne.n	298ea <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   298fe:	4919      	ldr	r1, [pc, #100]	; (29964 <system_clock_init+0x250>)
   29900:	2244      	movs	r2, #68	; 0x44
   29902:	5c8b      	ldrb	r3, [r1, r2]
   29904:	2080      	movs	r0, #128	; 0x80
   29906:	4240      	negs	r0, r0
   29908:	4303      	orrs	r3, r0
   2990a:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   2990c:	2000      	movs	r0, #0
   2990e:	4b27      	ldr	r3, [pc, #156]	; (299ac <system_clock_init+0x298>)
   29910:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   29912:	2100      	movs	r1, #0
   29914:	2000      	movs	r0, #0
   29916:	4b26      	ldr	r3, [pc, #152]	; (299b0 <system_clock_init+0x29c>)
   29918:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   2991a:	2100      	movs	r1, #0
   2991c:	2001      	movs	r0, #1
   2991e:	4b24      	ldr	r3, [pc, #144]	; (299b0 <system_clock_init+0x29c>)
   29920:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   29922:	2100      	movs	r1, #0
   29924:	2002      	movs	r0, #2
   29926:	4b22      	ldr	r3, [pc, #136]	; (299b0 <system_clock_init+0x29c>)
   29928:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   2992a:	003b      	movs	r3, r7
   2992c:	0018      	movs	r0, r3
   2992e:	4b14      	ldr	r3, [pc, #80]	; (29980 <system_clock_init+0x26c>)
   29930:	4798      	blx	r3
   29932:	003b      	movs	r3, r7
   29934:	2208      	movs	r2, #8
   29936:	701a      	strb	r2, [r3, #0]
   29938:	003b      	movs	r3, r7
   2993a:	2201      	movs	r2, #1
   2993c:	605a      	str	r2, [r3, #4]
   2993e:	003b      	movs	r3, r7
   29940:	2200      	movs	r2, #0
   29942:	721a      	strb	r2, [r3, #8]
   29944:	003b      	movs	r3, r7
   29946:	2201      	movs	r2, #1
   29948:	725a      	strb	r2, [r3, #9]
   2994a:	003b      	movs	r3, r7
   2994c:	0019      	movs	r1, r3
   2994e:	2000      	movs	r0, #0
   29950:	4b0c      	ldr	r3, [pc, #48]	; (29984 <system_clock_init+0x270>)
   29952:	4798      	blx	r3
   29954:	2000      	movs	r0, #0
   29956:	4b0c      	ldr	r3, [pc, #48]	; (29988 <system_clock_init+0x274>)
   29958:	4798      	blx	r3
#endif
}
   2995a:	46c0      	nop			; (mov r8, r8)
   2995c:	46bd      	mov	sp, r7
   2995e:	b026      	add	sp, #152	; 0x98
   29960:	bd80      	pop	{r7, pc}
   29962:	46c0      	nop			; (mov r8, r8)
   29964:	40000800 	.word	0x40000800
   29968:	000292d5 	.word	0x000292d5
   2996c:	000296dd 	.word	0x000296dd
   29970:	000291e5 	.word	0x000291e5
   29974:	00029429 	.word	0x00029429
   29978:	000295ad 	.word	0x000295ad
   2997c:	00029a59 	.word	0x00029a59
   29980:	000291a1 	.word	0x000291a1
   29984:	00029a89 	.word	0x00029a89
   29988:	00029bad 	.word	0x00029bad
   2998c:	000291cf 	.word	0x000291cf
   29990:	00029ce1 	.word	0x00029ce1
   29994:	00029d25 	.word	0x00029d25
   29998:	0002927d 	.word	0x0002927d
   2999c:	000f4240 	.word	0x000f4240
   299a0:	02dc6c00 	.word	0x02dc6c00
   299a4:	000294a1 	.word	0x000294a1
   299a8:	00029659 	.word	0x00029659
   299ac:	00029209 	.word	0x00029209
   299b0:	00029229 	.word	0x00029229

000299b4 <system_apb_clock_set_mask>:
{
   299b4:	b580      	push	{r7, lr}
   299b6:	b082      	sub	sp, #8
   299b8:	af00      	add	r7, sp, #0
   299ba:	0002      	movs	r2, r0
   299bc:	6039      	str	r1, [r7, #0]
   299be:	1dfb      	adds	r3, r7, #7
   299c0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   299c2:	1dfb      	adds	r3, r7, #7
   299c4:	781b      	ldrb	r3, [r3, #0]
   299c6:	2b01      	cmp	r3, #1
   299c8:	d00a      	beq.n	299e0 <system_apb_clock_set_mask+0x2c>
   299ca:	2b02      	cmp	r3, #2
   299cc:	d00f      	beq.n	299ee <system_apb_clock_set_mask+0x3a>
   299ce:	2b00      	cmp	r3, #0
   299d0:	d114      	bne.n	299fc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   299d2:	4b0e      	ldr	r3, [pc, #56]	; (29a0c <system_apb_clock_set_mask+0x58>)
   299d4:	4a0d      	ldr	r2, [pc, #52]	; (29a0c <system_apb_clock_set_mask+0x58>)
   299d6:	6991      	ldr	r1, [r2, #24]
   299d8:	683a      	ldr	r2, [r7, #0]
   299da:	430a      	orrs	r2, r1
   299dc:	619a      	str	r2, [r3, #24]
			break;
   299de:	e00f      	b.n	29a00 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   299e0:	4b0a      	ldr	r3, [pc, #40]	; (29a0c <system_apb_clock_set_mask+0x58>)
   299e2:	4a0a      	ldr	r2, [pc, #40]	; (29a0c <system_apb_clock_set_mask+0x58>)
   299e4:	69d1      	ldr	r1, [r2, #28]
   299e6:	683a      	ldr	r2, [r7, #0]
   299e8:	430a      	orrs	r2, r1
   299ea:	61da      	str	r2, [r3, #28]
			break;
   299ec:	e008      	b.n	29a00 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   299ee:	4b07      	ldr	r3, [pc, #28]	; (29a0c <system_apb_clock_set_mask+0x58>)
   299f0:	4a06      	ldr	r2, [pc, #24]	; (29a0c <system_apb_clock_set_mask+0x58>)
   299f2:	6a11      	ldr	r1, [r2, #32]
   299f4:	683a      	ldr	r2, [r7, #0]
   299f6:	430a      	orrs	r2, r1
   299f8:	621a      	str	r2, [r3, #32]
			break;
   299fa:	e001      	b.n	29a00 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   299fc:	2317      	movs	r3, #23
   299fe:	e000      	b.n	29a02 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29a00:	2300      	movs	r3, #0
}
   29a02:	0018      	movs	r0, r3
   29a04:	46bd      	mov	sp, r7
   29a06:	b002      	add	sp, #8
   29a08:	bd80      	pop	{r7, pc}
   29a0a:	46c0      	nop			; (mov r8, r8)
   29a0c:	40000400 	.word	0x40000400

00029a10 <system_interrupt_enter_critical_section>:
{
   29a10:	b580      	push	{r7, lr}
   29a12:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   29a14:	4b02      	ldr	r3, [pc, #8]	; (29a20 <system_interrupt_enter_critical_section+0x10>)
   29a16:	4798      	blx	r3
}
   29a18:	46c0      	nop			; (mov r8, r8)
   29a1a:	46bd      	mov	sp, r7
   29a1c:	bd80      	pop	{r7, pc}
   29a1e:	46c0      	nop			; (mov r8, r8)
   29a20:	0002604d 	.word	0x0002604d

00029a24 <system_interrupt_leave_critical_section>:
{
   29a24:	b580      	push	{r7, lr}
   29a26:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   29a28:	4b02      	ldr	r3, [pc, #8]	; (29a34 <system_interrupt_leave_critical_section+0x10>)
   29a2a:	4798      	blx	r3
}
   29a2c:	46c0      	nop			; (mov r8, r8)
   29a2e:	46bd      	mov	sp, r7
   29a30:	bd80      	pop	{r7, pc}
   29a32:	46c0      	nop			; (mov r8, r8)
   29a34:	000260a1 	.word	0x000260a1

00029a38 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   29a38:	b580      	push	{r7, lr}
   29a3a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   29a3c:	4b05      	ldr	r3, [pc, #20]	; (29a54 <system_gclk_is_syncing+0x1c>)
   29a3e:	785b      	ldrb	r3, [r3, #1]
   29a40:	b2db      	uxtb	r3, r3
   29a42:	b25b      	sxtb	r3, r3
   29a44:	2b00      	cmp	r3, #0
   29a46:	da01      	bge.n	29a4c <system_gclk_is_syncing+0x14>
		return true;
   29a48:	2301      	movs	r3, #1
   29a4a:	e000      	b.n	29a4e <system_gclk_is_syncing+0x16>
	}

	return false;
   29a4c:	2300      	movs	r3, #0
}
   29a4e:	0018      	movs	r0, r3
   29a50:	46bd      	mov	sp, r7
   29a52:	bd80      	pop	{r7, pc}
   29a54:	40000c00 	.word	0x40000c00

00029a58 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   29a58:	b580      	push	{r7, lr}
   29a5a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   29a5c:	2108      	movs	r1, #8
   29a5e:	2000      	movs	r0, #0
   29a60:	4b07      	ldr	r3, [pc, #28]	; (29a80 <system_gclk_init+0x28>)
   29a62:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   29a64:	4b07      	ldr	r3, [pc, #28]	; (29a84 <system_gclk_init+0x2c>)
   29a66:	2201      	movs	r2, #1
   29a68:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   29a6a:	46c0      	nop			; (mov r8, r8)
   29a6c:	4b05      	ldr	r3, [pc, #20]	; (29a84 <system_gclk_init+0x2c>)
   29a6e:	781b      	ldrb	r3, [r3, #0]
   29a70:	b2db      	uxtb	r3, r3
   29a72:	001a      	movs	r2, r3
   29a74:	2301      	movs	r3, #1
   29a76:	4013      	ands	r3, r2
   29a78:	d1f8      	bne.n	29a6c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   29a7a:	46c0      	nop			; (mov r8, r8)
   29a7c:	46bd      	mov	sp, r7
   29a7e:	bd80      	pop	{r7, pc}
   29a80:	000299b5 	.word	0x000299b5
   29a84:	40000c00 	.word	0x40000c00

00029a88 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   29a88:	b580      	push	{r7, lr}
   29a8a:	b086      	sub	sp, #24
   29a8c:	af00      	add	r7, sp, #0
   29a8e:	0002      	movs	r2, r0
   29a90:	6039      	str	r1, [r7, #0]
   29a92:	1dfb      	adds	r3, r7, #7
   29a94:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   29a96:	1dfb      	adds	r3, r7, #7
   29a98:	781b      	ldrb	r3, [r3, #0]
   29a9a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   29a9c:	1dfb      	adds	r3, r7, #7
   29a9e:	781b      	ldrb	r3, [r3, #0]
   29aa0:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   29aa2:	683b      	ldr	r3, [r7, #0]
   29aa4:	781b      	ldrb	r3, [r3, #0]
   29aa6:	021b      	lsls	r3, r3, #8
   29aa8:	001a      	movs	r2, r3
   29aaa:	697b      	ldr	r3, [r7, #20]
   29aac:	4313      	orrs	r3, r2
   29aae:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   29ab0:	683b      	ldr	r3, [r7, #0]
   29ab2:	785b      	ldrb	r3, [r3, #1]
   29ab4:	2b00      	cmp	r3, #0
   29ab6:	d004      	beq.n	29ac2 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   29ab8:	697b      	ldr	r3, [r7, #20]
   29aba:	2280      	movs	r2, #128	; 0x80
   29abc:	02d2      	lsls	r2, r2, #11
   29abe:	4313      	orrs	r3, r2
   29ac0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   29ac2:	683b      	ldr	r3, [r7, #0]
   29ac4:	7a5b      	ldrb	r3, [r3, #9]
   29ac6:	2b00      	cmp	r3, #0
   29ac8:	d004      	beq.n	29ad4 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   29aca:	697b      	ldr	r3, [r7, #20]
   29acc:	2280      	movs	r2, #128	; 0x80
   29ace:	0312      	lsls	r2, r2, #12
   29ad0:	4313      	orrs	r3, r2
   29ad2:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   29ad4:	683b      	ldr	r3, [r7, #0]
   29ad6:	685b      	ldr	r3, [r3, #4]
   29ad8:	2b01      	cmp	r3, #1
   29ada:	d92c      	bls.n	29b36 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   29adc:	683b      	ldr	r3, [r7, #0]
   29ade:	685a      	ldr	r2, [r3, #4]
   29ae0:	683b      	ldr	r3, [r7, #0]
   29ae2:	685b      	ldr	r3, [r3, #4]
   29ae4:	3b01      	subs	r3, #1
   29ae6:	4013      	ands	r3, r2
   29ae8:	d11a      	bne.n	29b20 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   29aea:	2300      	movs	r3, #0
   29aec:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   29aee:	2302      	movs	r3, #2
   29af0:	60bb      	str	r3, [r7, #8]
   29af2:	e005      	b.n	29b00 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   29af4:	68fb      	ldr	r3, [r7, #12]
   29af6:	3301      	adds	r3, #1
   29af8:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   29afa:	68bb      	ldr	r3, [r7, #8]
   29afc:	005b      	lsls	r3, r3, #1
   29afe:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   29b00:	683b      	ldr	r3, [r7, #0]
   29b02:	685a      	ldr	r2, [r3, #4]
   29b04:	68bb      	ldr	r3, [r7, #8]
   29b06:	429a      	cmp	r2, r3
   29b08:	d8f4      	bhi.n	29af4 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   29b0a:	68fb      	ldr	r3, [r7, #12]
   29b0c:	021b      	lsls	r3, r3, #8
   29b0e:	693a      	ldr	r2, [r7, #16]
   29b10:	4313      	orrs	r3, r2
   29b12:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   29b14:	697b      	ldr	r3, [r7, #20]
   29b16:	2280      	movs	r2, #128	; 0x80
   29b18:	0352      	lsls	r2, r2, #13
   29b1a:	4313      	orrs	r3, r2
   29b1c:	617b      	str	r3, [r7, #20]
   29b1e:	e00a      	b.n	29b36 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   29b20:	683b      	ldr	r3, [r7, #0]
   29b22:	685b      	ldr	r3, [r3, #4]
   29b24:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   29b26:	693a      	ldr	r2, [r7, #16]
   29b28:	4313      	orrs	r3, r2
   29b2a:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   29b2c:	697b      	ldr	r3, [r7, #20]
   29b2e:	2280      	movs	r2, #128	; 0x80
   29b30:	0292      	lsls	r2, r2, #10
   29b32:	4313      	orrs	r3, r2
   29b34:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   29b36:	683b      	ldr	r3, [r7, #0]
   29b38:	7a1b      	ldrb	r3, [r3, #8]
   29b3a:	2b00      	cmp	r3, #0
   29b3c:	d004      	beq.n	29b48 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   29b3e:	697b      	ldr	r3, [r7, #20]
   29b40:	2280      	movs	r2, #128	; 0x80
   29b42:	0392      	lsls	r2, r2, #14
   29b44:	4313      	orrs	r3, r2
   29b46:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   29b48:	46c0      	nop			; (mov r8, r8)
   29b4a:	4b13      	ldr	r3, [pc, #76]	; (29b98 <system_gclk_gen_set_config+0x110>)
   29b4c:	4798      	blx	r3
   29b4e:	1e03      	subs	r3, r0, #0
   29b50:	d1fb      	bne.n	29b4a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   29b52:	4b12      	ldr	r3, [pc, #72]	; (29b9c <system_gclk_gen_set_config+0x114>)
   29b54:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   29b56:	4a12      	ldr	r2, [pc, #72]	; (29ba0 <system_gclk_gen_set_config+0x118>)
   29b58:	1dfb      	adds	r3, r7, #7
   29b5a:	781b      	ldrb	r3, [r3, #0]
   29b5c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   29b5e:	46c0      	nop			; (mov r8, r8)
   29b60:	4b0d      	ldr	r3, [pc, #52]	; (29b98 <system_gclk_gen_set_config+0x110>)
   29b62:	4798      	blx	r3
   29b64:	1e03      	subs	r3, r0, #0
   29b66:	d1fb      	bne.n	29b60 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   29b68:	4b0e      	ldr	r3, [pc, #56]	; (29ba4 <system_gclk_gen_set_config+0x11c>)
   29b6a:	693a      	ldr	r2, [r7, #16]
   29b6c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   29b6e:	46c0      	nop			; (mov r8, r8)
   29b70:	4b09      	ldr	r3, [pc, #36]	; (29b98 <system_gclk_gen_set_config+0x110>)
   29b72:	4798      	blx	r3
   29b74:	1e03      	subs	r3, r0, #0
   29b76:	d1fb      	bne.n	29b70 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   29b78:	4b0a      	ldr	r3, [pc, #40]	; (29ba4 <system_gclk_gen_set_config+0x11c>)
   29b7a:	4a0a      	ldr	r2, [pc, #40]	; (29ba4 <system_gclk_gen_set_config+0x11c>)
   29b7c:	6851      	ldr	r1, [r2, #4]
   29b7e:	2280      	movs	r2, #128	; 0x80
   29b80:	0252      	lsls	r2, r2, #9
   29b82:	4011      	ands	r1, r2
   29b84:	697a      	ldr	r2, [r7, #20]
   29b86:	430a      	orrs	r2, r1
   29b88:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   29b8a:	4b07      	ldr	r3, [pc, #28]	; (29ba8 <system_gclk_gen_set_config+0x120>)
   29b8c:	4798      	blx	r3
}
   29b8e:	46c0      	nop			; (mov r8, r8)
   29b90:	46bd      	mov	sp, r7
   29b92:	b006      	add	sp, #24
   29b94:	bd80      	pop	{r7, pc}
   29b96:	46c0      	nop			; (mov r8, r8)
   29b98:	00029a39 	.word	0x00029a39
   29b9c:	00029a11 	.word	0x00029a11
   29ba0:	40000c08 	.word	0x40000c08
   29ba4:	40000c00 	.word	0x40000c00
   29ba8:	00029a25 	.word	0x00029a25

00029bac <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   29bac:	b580      	push	{r7, lr}
   29bae:	b082      	sub	sp, #8
   29bb0:	af00      	add	r7, sp, #0
   29bb2:	0002      	movs	r2, r0
   29bb4:	1dfb      	adds	r3, r7, #7
   29bb6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   29bb8:	46c0      	nop			; (mov r8, r8)
   29bba:	4b0e      	ldr	r3, [pc, #56]	; (29bf4 <system_gclk_gen_enable+0x48>)
   29bbc:	4798      	blx	r3
   29bbe:	1e03      	subs	r3, r0, #0
   29bc0:	d1fb      	bne.n	29bba <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   29bc2:	4b0d      	ldr	r3, [pc, #52]	; (29bf8 <system_gclk_gen_enable+0x4c>)
   29bc4:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   29bc6:	4a0d      	ldr	r2, [pc, #52]	; (29bfc <system_gclk_gen_enable+0x50>)
   29bc8:	1dfb      	adds	r3, r7, #7
   29bca:	781b      	ldrb	r3, [r3, #0]
   29bcc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29bce:	46c0      	nop			; (mov r8, r8)
   29bd0:	4b08      	ldr	r3, [pc, #32]	; (29bf4 <system_gclk_gen_enable+0x48>)
   29bd2:	4798      	blx	r3
   29bd4:	1e03      	subs	r3, r0, #0
   29bd6:	d1fb      	bne.n	29bd0 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   29bd8:	4b09      	ldr	r3, [pc, #36]	; (29c00 <system_gclk_gen_enable+0x54>)
   29bda:	4a09      	ldr	r2, [pc, #36]	; (29c00 <system_gclk_gen_enable+0x54>)
   29bdc:	6852      	ldr	r2, [r2, #4]
   29bde:	2180      	movs	r1, #128	; 0x80
   29be0:	0249      	lsls	r1, r1, #9
   29be2:	430a      	orrs	r2, r1
   29be4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   29be6:	4b07      	ldr	r3, [pc, #28]	; (29c04 <system_gclk_gen_enable+0x58>)
   29be8:	4798      	blx	r3
}
   29bea:	46c0      	nop			; (mov r8, r8)
   29bec:	46bd      	mov	sp, r7
   29bee:	b002      	add	sp, #8
   29bf0:	bd80      	pop	{r7, pc}
   29bf2:	46c0      	nop			; (mov r8, r8)
   29bf4:	00029a39 	.word	0x00029a39
   29bf8:	00029a11 	.word	0x00029a11
   29bfc:	40000c04 	.word	0x40000c04
   29c00:	40000c00 	.word	0x40000c00
   29c04:	00029a25 	.word	0x00029a25

00029c08 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   29c08:	b580      	push	{r7, lr}
   29c0a:	b086      	sub	sp, #24
   29c0c:	af00      	add	r7, sp, #0
   29c0e:	0002      	movs	r2, r0
   29c10:	1dfb      	adds	r3, r7, #7
   29c12:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   29c14:	46c0      	nop			; (mov r8, r8)
   29c16:	4b2a      	ldr	r3, [pc, #168]	; (29cc0 <system_gclk_gen_get_hz+0xb8>)
   29c18:	4798      	blx	r3
   29c1a:	1e03      	subs	r3, r0, #0
   29c1c:	d1fb      	bne.n	29c16 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   29c1e:	4b29      	ldr	r3, [pc, #164]	; (29cc4 <system_gclk_gen_get_hz+0xbc>)
   29c20:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   29c22:	4a29      	ldr	r2, [pc, #164]	; (29cc8 <system_gclk_gen_get_hz+0xc0>)
   29c24:	1dfb      	adds	r3, r7, #7
   29c26:	781b      	ldrb	r3, [r3, #0]
   29c28:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29c2a:	46c0      	nop			; (mov r8, r8)
   29c2c:	4b24      	ldr	r3, [pc, #144]	; (29cc0 <system_gclk_gen_get_hz+0xb8>)
   29c2e:	4798      	blx	r3
   29c30:	1e03      	subs	r3, r0, #0
   29c32:	d1fb      	bne.n	29c2c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   29c34:	4b25      	ldr	r3, [pc, #148]	; (29ccc <system_gclk_gen_get_hz+0xc4>)
   29c36:	685b      	ldr	r3, [r3, #4]
   29c38:	04db      	lsls	r3, r3, #19
   29c3a:	0edb      	lsrs	r3, r3, #27
   29c3c:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   29c3e:	0018      	movs	r0, r3
   29c40:	4b23      	ldr	r3, [pc, #140]	; (29cd0 <system_gclk_gen_get_hz+0xc8>)
   29c42:	4798      	blx	r3
   29c44:	0003      	movs	r3, r0
   29c46:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   29c48:	4a1f      	ldr	r2, [pc, #124]	; (29cc8 <system_gclk_gen_get_hz+0xc0>)
   29c4a:	1dfb      	adds	r3, r7, #7
   29c4c:	781b      	ldrb	r3, [r3, #0]
   29c4e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   29c50:	4b1e      	ldr	r3, [pc, #120]	; (29ccc <system_gclk_gen_get_hz+0xc4>)
   29c52:	685b      	ldr	r3, [r3, #4]
   29c54:	02db      	lsls	r3, r3, #11
   29c56:	0fdb      	lsrs	r3, r3, #31
   29c58:	b2da      	uxtb	r2, r3
   29c5a:	2313      	movs	r3, #19
   29c5c:	18fb      	adds	r3, r7, r3
   29c5e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   29c60:	4a1c      	ldr	r2, [pc, #112]	; (29cd4 <system_gclk_gen_get_hz+0xcc>)
   29c62:	1dfb      	adds	r3, r7, #7
   29c64:	781b      	ldrb	r3, [r3, #0]
   29c66:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29c68:	46c0      	nop			; (mov r8, r8)
   29c6a:	4b15      	ldr	r3, [pc, #84]	; (29cc0 <system_gclk_gen_get_hz+0xb8>)
   29c6c:	4798      	blx	r3
   29c6e:	1e03      	subs	r3, r0, #0
   29c70:	d1fb      	bne.n	29c6a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   29c72:	4b16      	ldr	r3, [pc, #88]	; (29ccc <system_gclk_gen_get_hz+0xc4>)
   29c74:	689b      	ldr	r3, [r3, #8]
   29c76:	021b      	lsls	r3, r3, #8
   29c78:	0c1b      	lsrs	r3, r3, #16
   29c7a:	b29b      	uxth	r3, r3
   29c7c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   29c7e:	4b16      	ldr	r3, [pc, #88]	; (29cd8 <system_gclk_gen_get_hz+0xd0>)
   29c80:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   29c82:	2313      	movs	r3, #19
   29c84:	18fb      	adds	r3, r7, r3
   29c86:	781b      	ldrb	r3, [r3, #0]
   29c88:	2b00      	cmp	r3, #0
   29c8a:	d109      	bne.n	29ca0 <system_gclk_gen_get_hz+0x98>
   29c8c:	68fb      	ldr	r3, [r7, #12]
   29c8e:	2b01      	cmp	r3, #1
   29c90:	d906      	bls.n	29ca0 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   29c92:	4b12      	ldr	r3, [pc, #72]	; (29cdc <system_gclk_gen_get_hz+0xd4>)
   29c94:	68f9      	ldr	r1, [r7, #12]
   29c96:	6978      	ldr	r0, [r7, #20]
   29c98:	4798      	blx	r3
   29c9a:	0003      	movs	r3, r0
   29c9c:	617b      	str	r3, [r7, #20]
   29c9e:	e00a      	b.n	29cb6 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   29ca0:	2313      	movs	r3, #19
   29ca2:	18fb      	adds	r3, r7, r3
   29ca4:	781b      	ldrb	r3, [r3, #0]
   29ca6:	2b00      	cmp	r3, #0
   29ca8:	d005      	beq.n	29cb6 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   29caa:	68fb      	ldr	r3, [r7, #12]
   29cac:	3301      	adds	r3, #1
   29cae:	697a      	ldr	r2, [r7, #20]
   29cb0:	40da      	lsrs	r2, r3
   29cb2:	0013      	movs	r3, r2
   29cb4:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   29cb6:	697b      	ldr	r3, [r7, #20]
}
   29cb8:	0018      	movs	r0, r3
   29cba:	46bd      	mov	sp, r7
   29cbc:	b006      	add	sp, #24
   29cbe:	bd80      	pop	{r7, pc}
   29cc0:	00029a39 	.word	0x00029a39
   29cc4:	00029a11 	.word	0x00029a11
   29cc8:	40000c04 	.word	0x40000c04
   29ccc:	40000c00 	.word	0x40000c00
   29cd0:	00029369 	.word	0x00029369
   29cd4:	40000c08 	.word	0x40000c08
   29cd8:	00029a25 	.word	0x00029a25
   29cdc:	00032805 	.word	0x00032805

00029ce0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   29ce0:	b580      	push	{r7, lr}
   29ce2:	b084      	sub	sp, #16
   29ce4:	af00      	add	r7, sp, #0
   29ce6:	0002      	movs	r2, r0
   29ce8:	6039      	str	r1, [r7, #0]
   29cea:	1dfb      	adds	r3, r7, #7
   29cec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   29cee:	1dfb      	adds	r3, r7, #7
   29cf0:	781b      	ldrb	r3, [r3, #0]
   29cf2:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   29cf4:	683b      	ldr	r3, [r7, #0]
   29cf6:	781b      	ldrb	r3, [r3, #0]
   29cf8:	021b      	lsls	r3, r3, #8
   29cfa:	001a      	movs	r2, r3
   29cfc:	68fb      	ldr	r3, [r7, #12]
   29cfe:	4313      	orrs	r3, r2
   29d00:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   29d02:	1dfb      	adds	r3, r7, #7
   29d04:	781b      	ldrb	r3, [r3, #0]
   29d06:	0018      	movs	r0, r3
   29d08:	4b04      	ldr	r3, [pc, #16]	; (29d1c <system_gclk_chan_set_config+0x3c>)
   29d0a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   29d0c:	4b04      	ldr	r3, [pc, #16]	; (29d20 <system_gclk_chan_set_config+0x40>)
   29d0e:	68fa      	ldr	r2, [r7, #12]
   29d10:	b292      	uxth	r2, r2
   29d12:	805a      	strh	r2, [r3, #2]
}
   29d14:	46c0      	nop			; (mov r8, r8)
   29d16:	46bd      	mov	sp, r7
   29d18:	b004      	add	sp, #16
   29d1a:	bd80      	pop	{r7, pc}
   29d1c:	00029d6d 	.word	0x00029d6d
   29d20:	40000c00 	.word	0x40000c00

00029d24 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   29d24:	b580      	push	{r7, lr}
   29d26:	b082      	sub	sp, #8
   29d28:	af00      	add	r7, sp, #0
   29d2a:	0002      	movs	r2, r0
   29d2c:	1dfb      	adds	r3, r7, #7
   29d2e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   29d30:	4b0a      	ldr	r3, [pc, #40]	; (29d5c <system_gclk_chan_enable+0x38>)
   29d32:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   29d34:	4a0a      	ldr	r2, [pc, #40]	; (29d60 <system_gclk_chan_enable+0x3c>)
   29d36:	1dfb      	adds	r3, r7, #7
   29d38:	781b      	ldrb	r3, [r3, #0]
   29d3a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   29d3c:	4909      	ldr	r1, [pc, #36]	; (29d64 <system_gclk_chan_enable+0x40>)
   29d3e:	4b09      	ldr	r3, [pc, #36]	; (29d64 <system_gclk_chan_enable+0x40>)
   29d40:	885b      	ldrh	r3, [r3, #2]
   29d42:	b29b      	uxth	r3, r3
   29d44:	2280      	movs	r2, #128	; 0x80
   29d46:	01d2      	lsls	r2, r2, #7
   29d48:	4313      	orrs	r3, r2
   29d4a:	b29b      	uxth	r3, r3
   29d4c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   29d4e:	4b06      	ldr	r3, [pc, #24]	; (29d68 <system_gclk_chan_enable+0x44>)
   29d50:	4798      	blx	r3
}
   29d52:	46c0      	nop			; (mov r8, r8)
   29d54:	46bd      	mov	sp, r7
   29d56:	b002      	add	sp, #8
   29d58:	bd80      	pop	{r7, pc}
   29d5a:	46c0      	nop			; (mov r8, r8)
   29d5c:	00029a11 	.word	0x00029a11
   29d60:	40000c02 	.word	0x40000c02
   29d64:	40000c00 	.word	0x40000c00
   29d68:	00029a25 	.word	0x00029a25

00029d6c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   29d6c:	b580      	push	{r7, lr}
   29d6e:	b084      	sub	sp, #16
   29d70:	af00      	add	r7, sp, #0
   29d72:	0002      	movs	r2, r0
   29d74:	1dfb      	adds	r3, r7, #7
   29d76:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   29d78:	4b1c      	ldr	r3, [pc, #112]	; (29dec <system_gclk_chan_disable+0x80>)
   29d7a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   29d7c:	4a1c      	ldr	r2, [pc, #112]	; (29df0 <system_gclk_chan_disable+0x84>)
   29d7e:	1dfb      	adds	r3, r7, #7
   29d80:	781b      	ldrb	r3, [r3, #0]
   29d82:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   29d84:	4b1b      	ldr	r3, [pc, #108]	; (29df4 <system_gclk_chan_disable+0x88>)
   29d86:	885b      	ldrh	r3, [r3, #2]
   29d88:	051b      	lsls	r3, r3, #20
   29d8a:	0f1b      	lsrs	r3, r3, #28
   29d8c:	b2db      	uxtb	r3, r3
   29d8e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   29d90:	4a18      	ldr	r2, [pc, #96]	; (29df4 <system_gclk_chan_disable+0x88>)
   29d92:	8853      	ldrh	r3, [r2, #2]
   29d94:	4918      	ldr	r1, [pc, #96]	; (29df8 <system_gclk_chan_disable+0x8c>)
   29d96:	400b      	ands	r3, r1
   29d98:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   29d9a:	4a16      	ldr	r2, [pc, #88]	; (29df4 <system_gclk_chan_disable+0x88>)
   29d9c:	4b15      	ldr	r3, [pc, #84]	; (29df4 <system_gclk_chan_disable+0x88>)
   29d9e:	885b      	ldrh	r3, [r3, #2]
   29da0:	b29b      	uxth	r3, r3
   29da2:	4916      	ldr	r1, [pc, #88]	; (29dfc <system_gclk_chan_disable+0x90>)
   29da4:	400b      	ands	r3, r1
   29da6:	b29b      	uxth	r3, r3
   29da8:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   29daa:	46c0      	nop			; (mov r8, r8)
   29dac:	4b11      	ldr	r3, [pc, #68]	; (29df4 <system_gclk_chan_disable+0x88>)
   29dae:	885b      	ldrh	r3, [r3, #2]
   29db0:	b29b      	uxth	r3, r3
   29db2:	001a      	movs	r2, r3
   29db4:	2380      	movs	r3, #128	; 0x80
   29db6:	01db      	lsls	r3, r3, #7
   29db8:	4013      	ands	r3, r2
   29dba:	d1f7      	bne.n	29dac <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   29dbc:	4a0d      	ldr	r2, [pc, #52]	; (29df4 <system_gclk_chan_disable+0x88>)
   29dbe:	68fb      	ldr	r3, [r7, #12]
   29dc0:	b2db      	uxtb	r3, r3
   29dc2:	1c19      	adds	r1, r3, #0
   29dc4:	230f      	movs	r3, #15
   29dc6:	400b      	ands	r3, r1
   29dc8:	b2d9      	uxtb	r1, r3
   29dca:	8853      	ldrh	r3, [r2, #2]
   29dcc:	1c08      	adds	r0, r1, #0
   29dce:	210f      	movs	r1, #15
   29dd0:	4001      	ands	r1, r0
   29dd2:	0208      	lsls	r0, r1, #8
   29dd4:	4908      	ldr	r1, [pc, #32]	; (29df8 <system_gclk_chan_disable+0x8c>)
   29dd6:	400b      	ands	r3, r1
   29dd8:	1c19      	adds	r1, r3, #0
   29dda:	1c03      	adds	r3, r0, #0
   29ddc:	430b      	orrs	r3, r1
   29dde:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   29de0:	4b07      	ldr	r3, [pc, #28]	; (29e00 <system_gclk_chan_disable+0x94>)
   29de2:	4798      	blx	r3
}
   29de4:	46c0      	nop			; (mov r8, r8)
   29de6:	46bd      	mov	sp, r7
   29de8:	b004      	add	sp, #16
   29dea:	bd80      	pop	{r7, pc}
   29dec:	00029a11 	.word	0x00029a11
   29df0:	40000c02 	.word	0x40000c02
   29df4:	40000c00 	.word	0x40000c00
   29df8:	fffff0ff 	.word	0xfffff0ff
   29dfc:	ffffbfff 	.word	0xffffbfff
   29e00:	00029a25 	.word	0x00029a25

00029e04 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   29e04:	b580      	push	{r7, lr}
   29e06:	b084      	sub	sp, #16
   29e08:	af00      	add	r7, sp, #0
   29e0a:	0002      	movs	r2, r0
   29e0c:	1dfb      	adds	r3, r7, #7
   29e0e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   29e10:	4b0d      	ldr	r3, [pc, #52]	; (29e48 <system_gclk_chan_get_hz+0x44>)
   29e12:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   29e14:	4a0d      	ldr	r2, [pc, #52]	; (29e4c <system_gclk_chan_get_hz+0x48>)
   29e16:	1dfb      	adds	r3, r7, #7
   29e18:	781b      	ldrb	r3, [r3, #0]
   29e1a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   29e1c:	4b0c      	ldr	r3, [pc, #48]	; (29e50 <system_gclk_chan_get_hz+0x4c>)
   29e1e:	885b      	ldrh	r3, [r3, #2]
   29e20:	051b      	lsls	r3, r3, #20
   29e22:	0f1b      	lsrs	r3, r3, #28
   29e24:	b2da      	uxtb	r2, r3
   29e26:	230f      	movs	r3, #15
   29e28:	18fb      	adds	r3, r7, r3
   29e2a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   29e2c:	4b09      	ldr	r3, [pc, #36]	; (29e54 <system_gclk_chan_get_hz+0x50>)
   29e2e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   29e30:	230f      	movs	r3, #15
   29e32:	18fb      	adds	r3, r7, r3
   29e34:	781b      	ldrb	r3, [r3, #0]
   29e36:	0018      	movs	r0, r3
   29e38:	4b07      	ldr	r3, [pc, #28]	; (29e58 <system_gclk_chan_get_hz+0x54>)
   29e3a:	4798      	blx	r3
   29e3c:	0003      	movs	r3, r0
}
   29e3e:	0018      	movs	r0, r3
   29e40:	46bd      	mov	sp, r7
   29e42:	b004      	add	sp, #16
   29e44:	bd80      	pop	{r7, pc}
   29e46:	46c0      	nop			; (mov r8, r8)
   29e48:	00029a11 	.word	0x00029a11
   29e4c:	40000c02 	.word	0x40000c02
   29e50:	40000c00 	.word	0x40000c00
   29e54:	00029a25 	.word	0x00029a25
   29e58:	00029c09 	.word	0x00029c09

00029e5c <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   29e5c:	b580      	push	{r7, lr}
   29e5e:	b084      	sub	sp, #16
   29e60:	af00      	add	r7, sp, #0
   29e62:	0002      	movs	r2, r0
   29e64:	1dfb      	adds	r3, r7, #7
   29e66:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   29e68:	230f      	movs	r3, #15
   29e6a:	18fb      	adds	r3, r7, r3
   29e6c:	2200      	movs	r2, #0
   29e6e:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   29e70:	1dfb      	adds	r3, r7, #7
   29e72:	781b      	ldrb	r3, [r3, #0]
   29e74:	2b7f      	cmp	r3, #127	; 0x7f
   29e76:	d80b      	bhi.n	29e90 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   29e78:	4a13      	ldr	r2, [pc, #76]	; (29ec8 <system_interrupt_clear_pending+0x6c>)
   29e7a:	1dfb      	adds	r3, r7, #7
   29e7c:	781b      	ldrb	r3, [r3, #0]
   29e7e:	b25b      	sxtb	r3, r3
   29e80:	2101      	movs	r1, #1
   29e82:	4099      	lsls	r1, r3
   29e84:	000b      	movs	r3, r1
   29e86:	0019      	movs	r1, r3
   29e88:	23c0      	movs	r3, #192	; 0xc0
   29e8a:	005b      	lsls	r3, r3, #1
   29e8c:	50d1      	str	r1, [r2, r3]
   29e8e:	e014      	b.n	29eba <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   29e90:	1dfb      	adds	r3, r7, #7
   29e92:	781b      	ldrb	r3, [r3, #0]
   29e94:	b25b      	sxtb	r3, r3
   29e96:	330e      	adds	r3, #14
   29e98:	d101      	bne.n	29e9e <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   29e9a:	2317      	movs	r3, #23
   29e9c:	e010      	b.n	29ec0 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   29e9e:	1dfb      	adds	r3, r7, #7
   29ea0:	781b      	ldrb	r3, [r3, #0]
   29ea2:	b25b      	sxtb	r3, r3
   29ea4:	3301      	adds	r3, #1
   29ea6:	d104      	bne.n	29eb2 <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   29ea8:	4b08      	ldr	r3, [pc, #32]	; (29ecc <system_interrupt_clear_pending+0x70>)
   29eaa:	2280      	movs	r2, #128	; 0x80
   29eac:	0492      	lsls	r2, r2, #18
   29eae:	605a      	str	r2, [r3, #4]
   29eb0:	e003      	b.n	29eba <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   29eb2:	230f      	movs	r3, #15
   29eb4:	18fb      	adds	r3, r7, r3
   29eb6:	2217      	movs	r2, #23
   29eb8:	701a      	strb	r2, [r3, #0]
	}

	return status;
   29eba:	230f      	movs	r3, #15
   29ebc:	18fb      	adds	r3, r7, r3
   29ebe:	781b      	ldrb	r3, [r3, #0]
}
   29ec0:	0018      	movs	r0, r3
   29ec2:	46bd      	mov	sp, r7
   29ec4:	b004      	add	sp, #16
   29ec6:	bd80      	pop	{r7, pc}
   29ec8:	e000e100 	.word	0xe000e100
   29ecc:	e000ed00 	.word	0xe000ed00

00029ed0 <system_pinmux_get_group_from_gpio_pin>:
{
   29ed0:	b580      	push	{r7, lr}
   29ed2:	b084      	sub	sp, #16
   29ed4:	af00      	add	r7, sp, #0
   29ed6:	0002      	movs	r2, r0
   29ed8:	1dfb      	adds	r3, r7, #7
   29eda:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   29edc:	230f      	movs	r3, #15
   29ede:	18fb      	adds	r3, r7, r3
   29ee0:	1dfa      	adds	r2, r7, #7
   29ee2:	7812      	ldrb	r2, [r2, #0]
   29ee4:	09d2      	lsrs	r2, r2, #7
   29ee6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   29ee8:	230e      	movs	r3, #14
   29eea:	18fb      	adds	r3, r7, r3
   29eec:	1dfa      	adds	r2, r7, #7
   29eee:	7812      	ldrb	r2, [r2, #0]
   29ef0:	0952      	lsrs	r2, r2, #5
   29ef2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   29ef4:	4b0d      	ldr	r3, [pc, #52]	; (29f2c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   29ef6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   29ef8:	230f      	movs	r3, #15
   29efa:	18fb      	adds	r3, r7, r3
   29efc:	781b      	ldrb	r3, [r3, #0]
   29efe:	2b00      	cmp	r3, #0
   29f00:	d10f      	bne.n	29f22 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   29f02:	230f      	movs	r3, #15
   29f04:	18fb      	adds	r3, r7, r3
   29f06:	781b      	ldrb	r3, [r3, #0]
   29f08:	009b      	lsls	r3, r3, #2
   29f0a:	2210      	movs	r2, #16
   29f0c:	4694      	mov	ip, r2
   29f0e:	44bc      	add	ip, r7
   29f10:	4463      	add	r3, ip
   29f12:	3b08      	subs	r3, #8
   29f14:	681a      	ldr	r2, [r3, #0]
   29f16:	230e      	movs	r3, #14
   29f18:	18fb      	adds	r3, r7, r3
   29f1a:	781b      	ldrb	r3, [r3, #0]
   29f1c:	01db      	lsls	r3, r3, #7
   29f1e:	18d3      	adds	r3, r2, r3
   29f20:	e000      	b.n	29f24 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   29f22:	2300      	movs	r3, #0
}
   29f24:	0018      	movs	r0, r3
   29f26:	46bd      	mov	sp, r7
   29f28:	b004      	add	sp, #16
   29f2a:	bd80      	pop	{r7, pc}
   29f2c:	41004400 	.word	0x41004400

00029f30 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   29f30:	b580      	push	{r7, lr}
   29f32:	b088      	sub	sp, #32
   29f34:	af00      	add	r7, sp, #0
   29f36:	60f8      	str	r0, [r7, #12]
   29f38:	60b9      	str	r1, [r7, #8]
   29f3a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   29f3c:	2300      	movs	r3, #0
   29f3e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   29f40:	687b      	ldr	r3, [r7, #4]
   29f42:	78db      	ldrb	r3, [r3, #3]
   29f44:	2201      	movs	r2, #1
   29f46:	4053      	eors	r3, r2
   29f48:	b2db      	uxtb	r3, r3
   29f4a:	2b00      	cmp	r3, #0
   29f4c:	d035      	beq.n	29fba <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   29f4e:	687b      	ldr	r3, [r7, #4]
   29f50:	781b      	ldrb	r3, [r3, #0]
   29f52:	2b80      	cmp	r3, #128	; 0x80
   29f54:	d00b      	beq.n	29f6e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   29f56:	69fb      	ldr	r3, [r7, #28]
   29f58:	2280      	movs	r2, #128	; 0x80
   29f5a:	0252      	lsls	r2, r2, #9
   29f5c:	4313      	orrs	r3, r2
   29f5e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   29f60:	687b      	ldr	r3, [r7, #4]
   29f62:	781b      	ldrb	r3, [r3, #0]
   29f64:	061b      	lsls	r3, r3, #24
   29f66:	001a      	movs	r2, r3
   29f68:	69fb      	ldr	r3, [r7, #28]
   29f6a:	4313      	orrs	r3, r2
   29f6c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   29f6e:	687b      	ldr	r3, [r7, #4]
   29f70:	785b      	ldrb	r3, [r3, #1]
   29f72:	2b00      	cmp	r3, #0
   29f74:	d003      	beq.n	29f7e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29f76:	687b      	ldr	r3, [r7, #4]
   29f78:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   29f7a:	2b02      	cmp	r3, #2
   29f7c:	d110      	bne.n	29fa0 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   29f7e:	69fb      	ldr	r3, [r7, #28]
   29f80:	2280      	movs	r2, #128	; 0x80
   29f82:	0292      	lsls	r2, r2, #10
   29f84:	4313      	orrs	r3, r2
   29f86:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   29f88:	687b      	ldr	r3, [r7, #4]
   29f8a:	789b      	ldrb	r3, [r3, #2]
   29f8c:	2b00      	cmp	r3, #0
   29f8e:	d004      	beq.n	29f9a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   29f90:	69fb      	ldr	r3, [r7, #28]
   29f92:	2280      	movs	r2, #128	; 0x80
   29f94:	02d2      	lsls	r2, r2, #11
   29f96:	4313      	orrs	r3, r2
   29f98:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   29f9a:	68fb      	ldr	r3, [r7, #12]
   29f9c:	68ba      	ldr	r2, [r7, #8]
   29f9e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29fa0:	687b      	ldr	r3, [r7, #4]
   29fa2:	785b      	ldrb	r3, [r3, #1]
   29fa4:	2b01      	cmp	r3, #1
   29fa6:	d003      	beq.n	29fb0 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29fa8:	687b      	ldr	r3, [r7, #4]
   29faa:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29fac:	2b02      	cmp	r3, #2
   29fae:	d107      	bne.n	29fc0 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   29fb0:	69fb      	ldr	r3, [r7, #28]
   29fb2:	4a22      	ldr	r2, [pc, #136]	; (2a03c <_system_pinmux_config+0x10c>)
   29fb4:	4013      	ands	r3, r2
   29fb6:	61fb      	str	r3, [r7, #28]
   29fb8:	e002      	b.n	29fc0 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   29fba:	68fb      	ldr	r3, [r7, #12]
   29fbc:	68ba      	ldr	r2, [r7, #8]
   29fbe:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   29fc0:	68bb      	ldr	r3, [r7, #8]
   29fc2:	041b      	lsls	r3, r3, #16
   29fc4:	0c1b      	lsrs	r3, r3, #16
   29fc6:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   29fc8:	68bb      	ldr	r3, [r7, #8]
   29fca:	0c1b      	lsrs	r3, r3, #16
   29fcc:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29fce:	69ba      	ldr	r2, [r7, #24]
   29fd0:	69fb      	ldr	r3, [r7, #28]
   29fd2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   29fd4:	22a0      	movs	r2, #160	; 0xa0
   29fd6:	05d2      	lsls	r2, r2, #23
   29fd8:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29fda:	68fb      	ldr	r3, [r7, #12]
   29fdc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29fde:	697a      	ldr	r2, [r7, #20]
   29fe0:	69fb      	ldr	r3, [r7, #28]
   29fe2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   29fe4:	22d0      	movs	r2, #208	; 0xd0
   29fe6:	0612      	lsls	r2, r2, #24
   29fe8:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29fea:	68fb      	ldr	r3, [r7, #12]
   29fec:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   29fee:	687b      	ldr	r3, [r7, #4]
   29ff0:	78db      	ldrb	r3, [r3, #3]
   29ff2:	2201      	movs	r2, #1
   29ff4:	4053      	eors	r3, r2
   29ff6:	b2db      	uxtb	r3, r3
   29ff8:	2b00      	cmp	r3, #0
   29ffa:	d01a      	beq.n	2a032 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   29ffc:	69fa      	ldr	r2, [r7, #28]
   29ffe:	2380      	movs	r3, #128	; 0x80
   2a000:	02db      	lsls	r3, r3, #11
   2a002:	4013      	ands	r3, r2
   2a004:	d00a      	beq.n	2a01c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2a006:	687b      	ldr	r3, [r7, #4]
   2a008:	789b      	ldrb	r3, [r3, #2]
   2a00a:	2b01      	cmp	r3, #1
   2a00c:	d103      	bne.n	2a016 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2a00e:	68fb      	ldr	r3, [r7, #12]
   2a010:	68ba      	ldr	r2, [r7, #8]
   2a012:	619a      	str	r2, [r3, #24]
   2a014:	e002      	b.n	2a01c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   2a016:	68fb      	ldr	r3, [r7, #12]
   2a018:	68ba      	ldr	r2, [r7, #8]
   2a01a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a01c:	687b      	ldr	r3, [r7, #4]
   2a01e:	785b      	ldrb	r3, [r3, #1]
   2a020:	2b01      	cmp	r3, #1
   2a022:	d003      	beq.n	2a02c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2a024:	687b      	ldr	r3, [r7, #4]
   2a026:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a028:	2b02      	cmp	r3, #2
   2a02a:	d102      	bne.n	2a032 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2a02c:	68fb      	ldr	r3, [r7, #12]
   2a02e:	68ba      	ldr	r2, [r7, #8]
   2a030:	609a      	str	r2, [r3, #8]
		}
	}
}
   2a032:	46c0      	nop			; (mov r8, r8)
   2a034:	46bd      	mov	sp, r7
   2a036:	b008      	add	sp, #32
   2a038:	bd80      	pop	{r7, pc}
   2a03a:	46c0      	nop			; (mov r8, r8)
   2a03c:	fffbffff 	.word	0xfffbffff

0002a040 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2a040:	b580      	push	{r7, lr}
   2a042:	b084      	sub	sp, #16
   2a044:	af00      	add	r7, sp, #0
   2a046:	0002      	movs	r2, r0
   2a048:	6039      	str	r1, [r7, #0]
   2a04a:	1dfb      	adds	r3, r7, #7
   2a04c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2a04e:	1dfb      	adds	r3, r7, #7
   2a050:	781b      	ldrb	r3, [r3, #0]
   2a052:	0018      	movs	r0, r3
   2a054:	4b0a      	ldr	r3, [pc, #40]	; (2a080 <system_pinmux_pin_set_config+0x40>)
   2a056:	4798      	blx	r3
   2a058:	0003      	movs	r3, r0
   2a05a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2a05c:	1dfb      	adds	r3, r7, #7
   2a05e:	781b      	ldrb	r3, [r3, #0]
   2a060:	221f      	movs	r2, #31
   2a062:	4013      	ands	r3, r2
   2a064:	2201      	movs	r2, #1
   2a066:	409a      	lsls	r2, r3
   2a068:	0013      	movs	r3, r2
   2a06a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2a06c:	683a      	ldr	r2, [r7, #0]
   2a06e:	68b9      	ldr	r1, [r7, #8]
   2a070:	68fb      	ldr	r3, [r7, #12]
   2a072:	0018      	movs	r0, r3
   2a074:	4b03      	ldr	r3, [pc, #12]	; (2a084 <system_pinmux_pin_set_config+0x44>)
   2a076:	4798      	blx	r3
}
   2a078:	46c0      	nop			; (mov r8, r8)
   2a07a:	46bd      	mov	sp, r7
   2a07c:	b004      	add	sp, #16
   2a07e:	bd80      	pop	{r7, pc}
   2a080:	00029ed1 	.word	0x00029ed1
   2a084:	00029f31 	.word	0x00029f31

0002a088 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   2a088:	b580      	push	{r7, lr}
   2a08a:	af00      	add	r7, sp, #0
	return;
   2a08c:	46c0      	nop			; (mov r8, r8)
}
   2a08e:	46bd      	mov	sp, r7
   2a090:	bd80      	pop	{r7, pc}
	...

0002a094 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   2a094:	b580      	push	{r7, lr}
   2a096:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   2a098:	4b06      	ldr	r3, [pc, #24]	; (2a0b4 <system_init+0x20>)
   2a09a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2a09c:	4b06      	ldr	r3, [pc, #24]	; (2a0b8 <system_init+0x24>)
   2a09e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2a0a0:	4b06      	ldr	r3, [pc, #24]	; (2a0bc <system_init+0x28>)
   2a0a2:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   2a0a4:	4b06      	ldr	r3, [pc, #24]	; (2a0c0 <system_init+0x2c>)
   2a0a6:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   2a0a8:	4b06      	ldr	r3, [pc, #24]	; (2a0c4 <system_init+0x30>)
   2a0aa:	4798      	blx	r3
}
   2a0ac:	46c0      	nop			; (mov r8, r8)
   2a0ae:	46bd      	mov	sp, r7
   2a0b0:	bd80      	pop	{r7, pc}
   2a0b2:	46c0      	nop			; (mov r8, r8)
   2a0b4:	00029715 	.word	0x00029715
   2a0b8:	000261dd 	.word	0x000261dd
   2a0bc:	00013011 	.word	0x00013011
   2a0c0:	000265b5 	.word	0x000265b5
   2a0c4:	0002a089 	.word	0x0002a089

0002a0c8 <system_gclk_chan_get_config_defaults>:
{
   2a0c8:	b580      	push	{r7, lr}
   2a0ca:	b082      	sub	sp, #8
   2a0cc:	af00      	add	r7, sp, #0
   2a0ce:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2a0d0:	687b      	ldr	r3, [r7, #4]
   2a0d2:	2200      	movs	r2, #0
   2a0d4:	701a      	strb	r2, [r3, #0]
}
   2a0d6:	46c0      	nop			; (mov r8, r8)
   2a0d8:	46bd      	mov	sp, r7
   2a0da:	b002      	add	sp, #8
   2a0dc:	bd80      	pop	{r7, pc}
	...

0002a0e0 <system_apb_clock_set_mask>:
{
   2a0e0:	b580      	push	{r7, lr}
   2a0e2:	b082      	sub	sp, #8
   2a0e4:	af00      	add	r7, sp, #0
   2a0e6:	0002      	movs	r2, r0
   2a0e8:	6039      	str	r1, [r7, #0]
   2a0ea:	1dfb      	adds	r3, r7, #7
   2a0ec:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a0ee:	1dfb      	adds	r3, r7, #7
   2a0f0:	781b      	ldrb	r3, [r3, #0]
   2a0f2:	2b01      	cmp	r3, #1
   2a0f4:	d00a      	beq.n	2a10c <system_apb_clock_set_mask+0x2c>
   2a0f6:	2b02      	cmp	r3, #2
   2a0f8:	d00f      	beq.n	2a11a <system_apb_clock_set_mask+0x3a>
   2a0fa:	2b00      	cmp	r3, #0
   2a0fc:	d114      	bne.n	2a128 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2a0fe:	4b0e      	ldr	r3, [pc, #56]	; (2a138 <system_apb_clock_set_mask+0x58>)
   2a100:	4a0d      	ldr	r2, [pc, #52]	; (2a138 <system_apb_clock_set_mask+0x58>)
   2a102:	6991      	ldr	r1, [r2, #24]
   2a104:	683a      	ldr	r2, [r7, #0]
   2a106:	430a      	orrs	r2, r1
   2a108:	619a      	str	r2, [r3, #24]
			break;
   2a10a:	e00f      	b.n	2a12c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2a10c:	4b0a      	ldr	r3, [pc, #40]	; (2a138 <system_apb_clock_set_mask+0x58>)
   2a10e:	4a0a      	ldr	r2, [pc, #40]	; (2a138 <system_apb_clock_set_mask+0x58>)
   2a110:	69d1      	ldr	r1, [r2, #28]
   2a112:	683a      	ldr	r2, [r7, #0]
   2a114:	430a      	orrs	r2, r1
   2a116:	61da      	str	r2, [r3, #28]
			break;
   2a118:	e008      	b.n	2a12c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2a11a:	4b07      	ldr	r3, [pc, #28]	; (2a138 <system_apb_clock_set_mask+0x58>)
   2a11c:	4a06      	ldr	r2, [pc, #24]	; (2a138 <system_apb_clock_set_mask+0x58>)
   2a11e:	6a11      	ldr	r1, [r2, #32]
   2a120:	683a      	ldr	r2, [r7, #0]
   2a122:	430a      	orrs	r2, r1
   2a124:	621a      	str	r2, [r3, #32]
			break;
   2a126:	e001      	b.n	2a12c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2a128:	2317      	movs	r3, #23
   2a12a:	e000      	b.n	2a12e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2a12c:	2300      	movs	r3, #0
}
   2a12e:	0018      	movs	r0, r3
   2a130:	46bd      	mov	sp, r7
   2a132:	b002      	add	sp, #8
   2a134:	bd80      	pop	{r7, pc}
   2a136:	46c0      	nop			; (mov r8, r8)
   2a138:	40000400 	.word	0x40000400

0002a13c <system_pinmux_get_config_defaults>:
{
   2a13c:	b580      	push	{r7, lr}
   2a13e:	b082      	sub	sp, #8
   2a140:	af00      	add	r7, sp, #0
   2a142:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2a144:	687b      	ldr	r3, [r7, #4]
   2a146:	2280      	movs	r2, #128	; 0x80
   2a148:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2a14a:	687b      	ldr	r3, [r7, #4]
   2a14c:	2200      	movs	r2, #0
   2a14e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2a150:	687b      	ldr	r3, [r7, #4]
   2a152:	2201      	movs	r2, #1
   2a154:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2a156:	687b      	ldr	r3, [r7, #4]
   2a158:	2200      	movs	r2, #0
   2a15a:	70da      	strb	r2, [r3, #3]
}
   2a15c:	46c0      	nop			; (mov r8, r8)
   2a15e:	46bd      	mov	sp, r7
   2a160:	b002      	add	sp, #8
   2a162:	bd80      	pop	{r7, pc}

0002a164 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   2a164:	b580      	push	{r7, lr}
   2a166:	b084      	sub	sp, #16
   2a168:	af00      	add	r7, sp, #0
   2a16a:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2a16c:	2300      	movs	r3, #0
   2a16e:	60fb      	str	r3, [r7, #12]
   2a170:	e00c      	b.n	2a18c <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2a172:	4b0a      	ldr	r3, [pc, #40]	; (2a19c <_tcc_get_inst_index+0x38>)
   2a174:	68fa      	ldr	r2, [r7, #12]
   2a176:	0092      	lsls	r2, r2, #2
   2a178:	58d2      	ldr	r2, [r2, r3]
   2a17a:	687b      	ldr	r3, [r7, #4]
   2a17c:	429a      	cmp	r2, r3
   2a17e:	d102      	bne.n	2a186 <_tcc_get_inst_index+0x22>
			return i;
   2a180:	68fb      	ldr	r3, [r7, #12]
   2a182:	b2db      	uxtb	r3, r3
   2a184:	e006      	b.n	2a194 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2a186:	68fb      	ldr	r3, [r7, #12]
   2a188:	3301      	adds	r3, #1
   2a18a:	60fb      	str	r3, [r7, #12]
   2a18c:	68fb      	ldr	r3, [r7, #12]
   2a18e:	2b02      	cmp	r3, #2
   2a190:	d9ef      	bls.n	2a172 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2a192:	2300      	movs	r3, #0
}
   2a194:	0018      	movs	r0, r3
   2a196:	46bd      	mov	sp, r7
   2a198:	b004      	add	sp, #16
   2a19a:	bd80      	pop	{r7, pc}
   2a19c:	00039524 	.word	0x00039524

0002a1a0 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2a1a0:	b590      	push	{r4, r7, lr}
   2a1a2:	b085      	sub	sp, #20
   2a1a4:	af00      	add	r7, sp, #0
   2a1a6:	6078      	str	r0, [r7, #4]
   2a1a8:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2a1aa:	230f      	movs	r3, #15
   2a1ac:	18fc      	adds	r4, r7, r3
   2a1ae:	683b      	ldr	r3, [r7, #0]
   2a1b0:	0018      	movs	r0, r3
   2a1b2:	4bad      	ldr	r3, [pc, #692]	; (2a468 <tcc_get_config_defaults+0x2c8>)
   2a1b4:	4798      	blx	r3
   2a1b6:	0003      	movs	r3, r0
   2a1b8:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   2a1ba:	687b      	ldr	r3, [r7, #4]
   2a1bc:	2200      	movs	r2, #0
   2a1be:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2a1c0:	230f      	movs	r3, #15
   2a1c2:	18fb      	adds	r3, r7, r3
   2a1c4:	781a      	ldrb	r2, [r3, #0]
   2a1c6:	4ba9      	ldr	r3, [pc, #676]	; (2a46c <tcc_get_config_defaults+0x2cc>)
   2a1c8:	0092      	lsls	r2, r2, #2
   2a1ca:	58d2      	ldr	r2, [r2, r3]
   2a1cc:	687b      	ldr	r3, [r7, #4]
   2a1ce:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2a1d0:	687b      	ldr	r3, [r7, #4]
   2a1d2:	2200      	movs	r2, #0
   2a1d4:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2a1d6:	687b      	ldr	r3, [r7, #4]
   2a1d8:	2200      	movs	r2, #0
   2a1da:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   2a1dc:	687b      	ldr	r3, [r7, #4]
   2a1de:	2200      	movs	r2, #0
   2a1e0:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2a1e2:	687b      	ldr	r3, [r7, #4]
   2a1e4:	2200      	movs	r2, #0
   2a1e6:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2a1e8:	687b      	ldr	r3, [r7, #4]
   2a1ea:	2200      	movs	r2, #0
   2a1ec:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a1ee:	687b      	ldr	r3, [r7, #4]
   2a1f0:	2200      	movs	r2, #0
   2a1f2:	61da      	str	r2, [r3, #28]
   2a1f4:	687b      	ldr	r3, [r7, #4]
   2a1f6:	2200      	movs	r2, #0
   2a1f8:	621a      	str	r2, [r3, #32]
   2a1fa:	687b      	ldr	r3, [r7, #4]
   2a1fc:	2200      	movs	r2, #0
   2a1fe:	625a      	str	r2, [r3, #36]	; 0x24
   2a200:	687b      	ldr	r3, [r7, #4]
   2a202:	2200      	movs	r2, #0
   2a204:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a206:	687b      	ldr	r3, [r7, #4]
   2a208:	2200      	movs	r2, #0
   2a20a:	751a      	strb	r2, [r3, #20]
   2a20c:	687b      	ldr	r3, [r7, #4]
   2a20e:	2200      	movs	r2, #0
   2a210:	755a      	strb	r2, [r3, #21]
   2a212:	687b      	ldr	r3, [r7, #4]
   2a214:	2200      	movs	r2, #0
   2a216:	759a      	strb	r2, [r3, #22]
   2a218:	687b      	ldr	r3, [r7, #4]
   2a21a:	2200      	movs	r2, #0
   2a21c:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2a21e:	687b      	ldr	r3, [r7, #4]
   2a220:	2200      	movs	r2, #0
   2a222:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   2a224:	687b      	ldr	r3, [r7, #4]
   2a226:	2200      	movs	r2, #0
   2a228:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a22a:	687b      	ldr	r3, [r7, #4]
   2a22c:	2200      	movs	r2, #0
   2a22e:	741a      	strb	r2, [r3, #16]
   2a230:	687b      	ldr	r3, [r7, #4]
   2a232:	2200      	movs	r2, #0
   2a234:	745a      	strb	r2, [r3, #17]
   2a236:	687b      	ldr	r3, [r7, #4]
   2a238:	2200      	movs	r2, #0
   2a23a:	749a      	strb	r2, [r3, #18]
   2a23c:	687b      	ldr	r3, [r7, #4]
   2a23e:	2200      	movs	r2, #0
   2a240:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2a242:	687b      	ldr	r3, [r7, #4]
   2a244:	222c      	movs	r2, #44	; 0x2c
   2a246:	2100      	movs	r1, #0
   2a248:	5499      	strb	r1, [r3, r2]
   2a24a:	687b      	ldr	r3, [r7, #4]
   2a24c:	222d      	movs	r2, #45	; 0x2d
   2a24e:	2100      	movs	r1, #0
   2a250:	5499      	strb	r1, [r3, r2]
   2a252:	687b      	ldr	r3, [r7, #4]
   2a254:	222e      	movs	r2, #46	; 0x2e
   2a256:	2100      	movs	r1, #0
   2a258:	5499      	strb	r1, [r3, r2]
   2a25a:	687b      	ldr	r3, [r7, #4]
   2a25c:	222f      	movs	r2, #47	; 0x2f
   2a25e:	2100      	movs	r1, #0
   2a260:	5499      	strb	r1, [r3, r2]
   2a262:	687b      	ldr	r3, [r7, #4]
   2a264:	2230      	movs	r2, #48	; 0x30
   2a266:	2100      	movs	r1, #0
   2a268:	5499      	strb	r1, [r3, r2]
   2a26a:	687b      	ldr	r3, [r7, #4]
   2a26c:	2231      	movs	r2, #49	; 0x31
   2a26e:	2100      	movs	r1, #0
   2a270:	5499      	strb	r1, [r3, r2]
   2a272:	687b      	ldr	r3, [r7, #4]
   2a274:	2232      	movs	r2, #50	; 0x32
   2a276:	2100      	movs	r1, #0
   2a278:	5499      	strb	r1, [r3, r2]
   2a27a:	687b      	ldr	r3, [r7, #4]
   2a27c:	2233      	movs	r2, #51	; 0x33
   2a27e:	2100      	movs	r1, #0
   2a280:	5499      	strb	r1, [r3, r2]
   2a282:	687b      	ldr	r3, [r7, #4]
   2a284:	2234      	movs	r2, #52	; 0x34
   2a286:	2100      	movs	r1, #0
   2a288:	5499      	strb	r1, [r3, r2]
   2a28a:	687b      	ldr	r3, [r7, #4]
   2a28c:	2235      	movs	r2, #53	; 0x35
   2a28e:	2100      	movs	r1, #0
   2a290:	5499      	strb	r1, [r3, r2]
   2a292:	687b      	ldr	r3, [r7, #4]
   2a294:	2236      	movs	r2, #54	; 0x36
   2a296:	2100      	movs	r1, #0
   2a298:	5499      	strb	r1, [r3, r2]
   2a29a:	687b      	ldr	r3, [r7, #4]
   2a29c:	2237      	movs	r2, #55	; 0x37
   2a29e:	2100      	movs	r1, #0
   2a2a0:	5499      	strb	r1, [r3, r2]
   2a2a2:	687b      	ldr	r3, [r7, #4]
   2a2a4:	2238      	movs	r2, #56	; 0x38
   2a2a6:	2100      	movs	r1, #0
   2a2a8:	5499      	strb	r1, [r3, r2]
   2a2aa:	687b      	ldr	r3, [r7, #4]
   2a2ac:	2239      	movs	r2, #57	; 0x39
   2a2ae:	2100      	movs	r1, #0
   2a2b0:	5499      	strb	r1, [r3, r2]
   2a2b2:	687b      	ldr	r3, [r7, #4]
   2a2b4:	223a      	movs	r2, #58	; 0x3a
   2a2b6:	2100      	movs	r1, #0
   2a2b8:	5499      	strb	r1, [r3, r2]
   2a2ba:	687b      	ldr	r3, [r7, #4]
   2a2bc:	223b      	movs	r2, #59	; 0x3b
   2a2be:	2100      	movs	r1, #0
   2a2c0:	5499      	strb	r1, [r3, r2]
   2a2c2:	687b      	ldr	r3, [r7, #4]
   2a2c4:	223c      	movs	r2, #60	; 0x3c
   2a2c6:	2100      	movs	r1, #0
   2a2c8:	5499      	strb	r1, [r3, r2]
   2a2ca:	687b      	ldr	r3, [r7, #4]
   2a2cc:	223d      	movs	r2, #61	; 0x3d
   2a2ce:	2100      	movs	r1, #0
   2a2d0:	5499      	strb	r1, [r3, r2]
   2a2d2:	687b      	ldr	r3, [r7, #4]
   2a2d4:	223e      	movs	r2, #62	; 0x3e
   2a2d6:	2100      	movs	r1, #0
   2a2d8:	5499      	strb	r1, [r3, r2]
   2a2da:	687b      	ldr	r3, [r7, #4]
   2a2dc:	223f      	movs	r2, #63	; 0x3f
   2a2de:	2100      	movs	r1, #0
   2a2e0:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2a2e2:	687b      	ldr	r3, [r7, #4]
   2a2e4:	2240      	movs	r2, #64	; 0x40
   2a2e6:	2100      	movs	r1, #0
   2a2e8:	5499      	strb	r1, [r3, r2]
   2a2ea:	687b      	ldr	r3, [r7, #4]
   2a2ec:	2241      	movs	r2, #65	; 0x41
   2a2ee:	2100      	movs	r1, #0
   2a2f0:	5499      	strb	r1, [r3, r2]
   2a2f2:	687b      	ldr	r3, [r7, #4]
   2a2f4:	2242      	movs	r2, #66	; 0x42
   2a2f6:	2100      	movs	r1, #0
   2a2f8:	5499      	strb	r1, [r3, r2]
   2a2fa:	687b      	ldr	r3, [r7, #4]
   2a2fc:	2243      	movs	r2, #67	; 0x43
   2a2fe:	2100      	movs	r1, #0
   2a300:	5499      	strb	r1, [r3, r2]
   2a302:	687b      	ldr	r3, [r7, #4]
   2a304:	2244      	movs	r2, #68	; 0x44
   2a306:	2100      	movs	r1, #0
   2a308:	5499      	strb	r1, [r3, r2]
   2a30a:	687b      	ldr	r3, [r7, #4]
   2a30c:	2245      	movs	r2, #69	; 0x45
   2a30e:	2100      	movs	r1, #0
   2a310:	5499      	strb	r1, [r3, r2]
   2a312:	687b      	ldr	r3, [r7, #4]
   2a314:	2246      	movs	r2, #70	; 0x46
   2a316:	2100      	movs	r1, #0
   2a318:	5499      	strb	r1, [r3, r2]
   2a31a:	687b      	ldr	r3, [r7, #4]
   2a31c:	2247      	movs	r2, #71	; 0x47
   2a31e:	2100      	movs	r1, #0
   2a320:	5499      	strb	r1, [r3, r2]
   2a322:	687b      	ldr	r3, [r7, #4]
   2a324:	2248      	movs	r2, #72	; 0x48
   2a326:	2100      	movs	r1, #0
   2a328:	5499      	strb	r1, [r3, r2]
   2a32a:	687b      	ldr	r3, [r7, #4]
   2a32c:	2249      	movs	r2, #73	; 0x49
   2a32e:	2100      	movs	r1, #0
   2a330:	5499      	strb	r1, [r3, r2]
   2a332:	687b      	ldr	r3, [r7, #4]
   2a334:	224a      	movs	r2, #74	; 0x4a
   2a336:	2100      	movs	r1, #0
   2a338:	5499      	strb	r1, [r3, r2]
   2a33a:	687b      	ldr	r3, [r7, #4]
   2a33c:	224b      	movs	r2, #75	; 0x4b
   2a33e:	2100      	movs	r1, #0
   2a340:	5499      	strb	r1, [r3, r2]
   2a342:	687b      	ldr	r3, [r7, #4]
   2a344:	224c      	movs	r2, #76	; 0x4c
   2a346:	2100      	movs	r1, #0
   2a348:	5499      	strb	r1, [r3, r2]
   2a34a:	687b      	ldr	r3, [r7, #4]
   2a34c:	224d      	movs	r2, #77	; 0x4d
   2a34e:	2100      	movs	r1, #0
   2a350:	5499      	strb	r1, [r3, r2]
   2a352:	687b      	ldr	r3, [r7, #4]
   2a354:	224e      	movs	r2, #78	; 0x4e
   2a356:	2100      	movs	r1, #0
   2a358:	5499      	strb	r1, [r3, r2]
   2a35a:	687b      	ldr	r3, [r7, #4]
   2a35c:	224f      	movs	r2, #79	; 0x4f
   2a35e:	2100      	movs	r1, #0
   2a360:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2a362:	687b      	ldr	r3, [r7, #4]
   2a364:	2250      	movs	r2, #80	; 0x50
   2a366:	2100      	movs	r1, #0
   2a368:	5499      	strb	r1, [r3, r2]
   2a36a:	687b      	ldr	r3, [r7, #4]
   2a36c:	2251      	movs	r2, #81	; 0x51
   2a36e:	2100      	movs	r1, #0
   2a370:	5499      	strb	r1, [r3, r2]
   2a372:	687b      	ldr	r3, [r7, #4]
   2a374:	2252      	movs	r2, #82	; 0x52
   2a376:	2100      	movs	r1, #0
   2a378:	5499      	strb	r1, [r3, r2]
   2a37a:	687b      	ldr	r3, [r7, #4]
   2a37c:	2253      	movs	r2, #83	; 0x53
   2a37e:	2100      	movs	r1, #0
   2a380:	5499      	strb	r1, [r3, r2]
   2a382:	687b      	ldr	r3, [r7, #4]
   2a384:	2254      	movs	r2, #84	; 0x54
   2a386:	2100      	movs	r1, #0
   2a388:	5499      	strb	r1, [r3, r2]
   2a38a:	687b      	ldr	r3, [r7, #4]
   2a38c:	2255      	movs	r2, #85	; 0x55
   2a38e:	2100      	movs	r1, #0
   2a390:	5499      	strb	r1, [r3, r2]
   2a392:	687b      	ldr	r3, [r7, #4]
   2a394:	2256      	movs	r2, #86	; 0x56
   2a396:	2100      	movs	r1, #0
   2a398:	5499      	strb	r1, [r3, r2]
   2a39a:	687b      	ldr	r3, [r7, #4]
   2a39c:	2257      	movs	r2, #87	; 0x57
   2a39e:	2100      	movs	r1, #0
   2a3a0:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2a3a2:	687b      	ldr	r3, [r7, #4]
   2a3a4:	2298      	movs	r2, #152	; 0x98
   2a3a6:	2100      	movs	r1, #0
   2a3a8:	5499      	strb	r1, [r3, r2]
   2a3aa:	687b      	ldr	r3, [r7, #4]
   2a3ac:	2200      	movs	r2, #0
   2a3ae:	659a      	str	r2, [r3, #88]	; 0x58
   2a3b0:	687b      	ldr	r3, [r7, #4]
   2a3b2:	2200      	movs	r2, #0
   2a3b4:	679a      	str	r2, [r3, #120]	; 0x78
   2a3b6:	687b      	ldr	r3, [r7, #4]
   2a3b8:	2299      	movs	r2, #153	; 0x99
   2a3ba:	2100      	movs	r1, #0
   2a3bc:	5499      	strb	r1, [r3, r2]
   2a3be:	687b      	ldr	r3, [r7, #4]
   2a3c0:	2200      	movs	r2, #0
   2a3c2:	65da      	str	r2, [r3, #92]	; 0x5c
   2a3c4:	687b      	ldr	r3, [r7, #4]
   2a3c6:	2200      	movs	r2, #0
   2a3c8:	67da      	str	r2, [r3, #124]	; 0x7c
   2a3ca:	687b      	ldr	r3, [r7, #4]
   2a3cc:	229a      	movs	r2, #154	; 0x9a
   2a3ce:	2100      	movs	r1, #0
   2a3d0:	5499      	strb	r1, [r3, r2]
   2a3d2:	687b      	ldr	r3, [r7, #4]
   2a3d4:	2200      	movs	r2, #0
   2a3d6:	661a      	str	r2, [r3, #96]	; 0x60
   2a3d8:	687b      	ldr	r3, [r7, #4]
   2a3da:	2280      	movs	r2, #128	; 0x80
   2a3dc:	2100      	movs	r1, #0
   2a3de:	5099      	str	r1, [r3, r2]
   2a3e0:	687b      	ldr	r3, [r7, #4]
   2a3e2:	229b      	movs	r2, #155	; 0x9b
   2a3e4:	2100      	movs	r1, #0
   2a3e6:	5499      	strb	r1, [r3, r2]
   2a3e8:	687b      	ldr	r3, [r7, #4]
   2a3ea:	2200      	movs	r2, #0
   2a3ec:	665a      	str	r2, [r3, #100]	; 0x64
   2a3ee:	687b      	ldr	r3, [r7, #4]
   2a3f0:	2284      	movs	r2, #132	; 0x84
   2a3f2:	2100      	movs	r1, #0
   2a3f4:	5099      	str	r1, [r3, r2]
   2a3f6:	687b      	ldr	r3, [r7, #4]
   2a3f8:	229c      	movs	r2, #156	; 0x9c
   2a3fa:	2100      	movs	r1, #0
   2a3fc:	5499      	strb	r1, [r3, r2]
   2a3fe:	687b      	ldr	r3, [r7, #4]
   2a400:	2200      	movs	r2, #0
   2a402:	669a      	str	r2, [r3, #104]	; 0x68
   2a404:	687b      	ldr	r3, [r7, #4]
   2a406:	2288      	movs	r2, #136	; 0x88
   2a408:	2100      	movs	r1, #0
   2a40a:	5099      	str	r1, [r3, r2]
   2a40c:	687b      	ldr	r3, [r7, #4]
   2a40e:	229d      	movs	r2, #157	; 0x9d
   2a410:	2100      	movs	r1, #0
   2a412:	5499      	strb	r1, [r3, r2]
   2a414:	687b      	ldr	r3, [r7, #4]
   2a416:	2200      	movs	r2, #0
   2a418:	66da      	str	r2, [r3, #108]	; 0x6c
   2a41a:	687b      	ldr	r3, [r7, #4]
   2a41c:	228c      	movs	r2, #140	; 0x8c
   2a41e:	2100      	movs	r1, #0
   2a420:	5099      	str	r1, [r3, r2]
   2a422:	687b      	ldr	r3, [r7, #4]
   2a424:	229e      	movs	r2, #158	; 0x9e
   2a426:	2100      	movs	r1, #0
   2a428:	5499      	strb	r1, [r3, r2]
   2a42a:	687b      	ldr	r3, [r7, #4]
   2a42c:	2200      	movs	r2, #0
   2a42e:	671a      	str	r2, [r3, #112]	; 0x70
   2a430:	687b      	ldr	r3, [r7, #4]
   2a432:	2290      	movs	r2, #144	; 0x90
   2a434:	2100      	movs	r1, #0
   2a436:	5099      	str	r1, [r3, r2]
   2a438:	687b      	ldr	r3, [r7, #4]
   2a43a:	229f      	movs	r2, #159	; 0x9f
   2a43c:	2100      	movs	r1, #0
   2a43e:	5499      	strb	r1, [r3, r2]
   2a440:	687b      	ldr	r3, [r7, #4]
   2a442:	2200      	movs	r2, #0
   2a444:	675a      	str	r2, [r3, #116]	; 0x74
   2a446:	687b      	ldr	r3, [r7, #4]
   2a448:	2294      	movs	r2, #148	; 0x94
   2a44a:	2100      	movs	r1, #0
   2a44c:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2a44e:	687b      	ldr	r3, [r7, #4]
   2a450:	22a0      	movs	r2, #160	; 0xa0
   2a452:	2101      	movs	r1, #1
   2a454:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2a456:	687b      	ldr	r3, [r7, #4]
   2a458:	22a1      	movs	r2, #161	; 0xa1
   2a45a:	2100      	movs	r1, #0
   2a45c:	5499      	strb	r1, [r3, r2]
}
   2a45e:	46c0      	nop			; (mov r8, r8)
   2a460:	46bd      	mov	sp, r7
   2a462:	b005      	add	sp, #20
   2a464:	bd90      	pop	{r4, r7, pc}
   2a466:	46c0      	nop			; (mov r8, r8)
   2a468:	0002a165 	.word	0x0002a165
   2a46c:	00039540 	.word	0x00039540

0002a470 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a470:	b580      	push	{r7, lr}
   2a472:	b086      	sub	sp, #24
   2a474:	af00      	add	r7, sp, #0
   2a476:	60b9      	str	r1, [r7, #8]
   2a478:	607a      	str	r2, [r7, #4]
   2a47a:	230f      	movs	r3, #15
   2a47c:	18fb      	adds	r3, r7, r3
   2a47e:	1c02      	adds	r2, r0, #0
   2a480:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2a482:	2300      	movs	r3, #0
   2a484:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a486:	2300      	movs	r3, #0
   2a488:	613b      	str	r3, [r7, #16]
   2a48a:	e01d      	b.n	2a4c8 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2a48c:	68ba      	ldr	r2, [r7, #8]
   2a48e:	693b      	ldr	r3, [r7, #16]
   2a490:	18d3      	adds	r3, r2, r3
   2a492:	3310      	adds	r3, #16
   2a494:	781b      	ldrb	r3, [r3, #0]
   2a496:	2b01      	cmp	r3, #1
   2a498:	d113      	bne.n	2a4c2 <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2a49a:	230f      	movs	r3, #15
   2a49c:	18fb      	adds	r3, r7, r3
   2a49e:	781b      	ldrb	r3, [r3, #0]
   2a4a0:	4a1b      	ldr	r2, [pc, #108]	; (2a510 <_tcc_build_ctrla+0xa0>)
   2a4a2:	5cd3      	ldrb	r3, [r2, r3]
   2a4a4:	001a      	movs	r2, r3
   2a4a6:	693b      	ldr	r3, [r7, #16]
   2a4a8:	429a      	cmp	r2, r3
   2a4aa:	da01      	bge.n	2a4b0 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2a4ac:	2317      	movs	r3, #23
   2a4ae:	e02a      	b.n	2a506 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2a4b0:	2380      	movs	r3, #128	; 0x80
   2a4b2:	045a      	lsls	r2, r3, #17
   2a4b4:	693b      	ldr	r3, [r7, #16]
   2a4b6:	409a      	lsls	r2, r3
   2a4b8:	0013      	movs	r3, r2
   2a4ba:	001a      	movs	r2, r3
   2a4bc:	697b      	ldr	r3, [r7, #20]
   2a4be:	4313      	orrs	r3, r2
   2a4c0:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a4c2:	693b      	ldr	r3, [r7, #16]
   2a4c4:	3301      	adds	r3, #1
   2a4c6:	613b      	str	r3, [r7, #16]
   2a4c8:	693b      	ldr	r3, [r7, #16]
   2a4ca:	2b03      	cmp	r3, #3
   2a4cc:	ddde      	ble.n	2a48c <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2a4ce:	68bb      	ldr	r3, [r7, #8]
   2a4d0:	22a1      	movs	r2, #161	; 0xa1
   2a4d2:	5c9b      	ldrb	r3, [r3, r2]
   2a4d4:	2b00      	cmp	r3, #0
   2a4d6:	d004      	beq.n	2a4e2 <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2a4d8:	697b      	ldr	r3, [r7, #20]
   2a4da:	2280      	movs	r2, #128	; 0x80
   2a4dc:	0112      	lsls	r2, r2, #4
   2a4de:	4313      	orrs	r3, r2
   2a4e0:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2a4e2:	68bb      	ldr	r3, [r7, #8]
   2a4e4:	7b1b      	ldrb	r3, [r3, #12]
   2a4e6:	031b      	lsls	r3, r3, #12
   2a4e8:	001a      	movs	r2, r3
   2a4ea:	697b      	ldr	r3, [r7, #20]
   2a4ec:	4313      	orrs	r3, r2
   2a4ee:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2a4f0:	68bb      	ldr	r3, [r7, #8]
   2a4f2:	7adb      	ldrb	r3, [r3, #11]
   2a4f4:	021b      	lsls	r3, r3, #8
   2a4f6:	001a      	movs	r2, r3
   2a4f8:	697b      	ldr	r3, [r7, #20]
   2a4fa:	4313      	orrs	r3, r2
   2a4fc:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2a4fe:	687b      	ldr	r3, [r7, #4]
   2a500:	697a      	ldr	r2, [r7, #20]
   2a502:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2a504:	2300      	movs	r3, #0
}
   2a506:	0018      	movs	r0, r3
   2a508:	46bd      	mov	sp, r7
   2a50a:	b006      	add	sp, #24
   2a50c:	bd80      	pop	{r7, pc}
   2a50e:	46c0      	nop			; (mov r8, r8)
   2a510:	0003954c 	.word	0x0003954c

0002a514 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2a514:	b580      	push	{r7, lr}
   2a516:	b086      	sub	sp, #24
   2a518:	af00      	add	r7, sp, #0
   2a51a:	60b9      	str	r1, [r7, #8]
   2a51c:	607a      	str	r2, [r7, #4]
   2a51e:	230f      	movs	r3, #15
   2a520:	18fb      	adds	r3, r7, r3
   2a522:	1c02      	adds	r2, r0, #0
   2a524:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2a526:	2317      	movs	r3, #23
   2a528:	18fb      	adds	r3, r7, r3
   2a52a:	2200      	movs	r2, #0
   2a52c:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2a52e:	68bb      	ldr	r3, [r7, #8]
   2a530:	7a1b      	ldrb	r3, [r3, #8]
   2a532:	2b00      	cmp	r3, #0
   2a534:	d007      	beq.n	2a546 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2a536:	2317      	movs	r3, #23
   2a538:	18fb      	adds	r3, r7, r3
   2a53a:	2217      	movs	r2, #23
   2a53c:	18ba      	adds	r2, r7, r2
   2a53e:	7812      	ldrb	r2, [r2, #0]
   2a540:	2104      	movs	r1, #4
   2a542:	430a      	orrs	r2, r1
   2a544:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2a546:	68bb      	ldr	r3, [r7, #8]
   2a548:	7a5b      	ldrb	r3, [r3, #9]
   2a54a:	2b01      	cmp	r3, #1
   2a54c:	d107      	bne.n	2a55e <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2a54e:	2317      	movs	r3, #23
   2a550:	18fb      	adds	r3, r7, r3
   2a552:	2217      	movs	r2, #23
   2a554:	18ba      	adds	r2, r7, r2
   2a556:	7812      	ldrb	r2, [r2, #0]
   2a558:	2101      	movs	r1, #1
   2a55a:	430a      	orrs	r2, r1
   2a55c:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2a55e:	687b      	ldr	r3, [r7, #4]
   2a560:	2217      	movs	r2, #23
   2a562:	18ba      	adds	r2, r7, r2
   2a564:	7812      	ldrb	r2, [r2, #0]
   2a566:	701a      	strb	r2, [r3, #0]
}
   2a568:	46c0      	nop			; (mov r8, r8)
   2a56a:	46bd      	mov	sp, r7
   2a56c:	b006      	add	sp, #24
   2a56e:	bd80      	pop	{r7, pc}

0002a570 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a570:	b580      	push	{r7, lr}
   2a572:	b088      	sub	sp, #32
   2a574:	af00      	add	r7, sp, #0
   2a576:	60b9      	str	r1, [r7, #8]
   2a578:	607a      	str	r2, [r7, #4]
   2a57a:	230f      	movs	r3, #15
   2a57c:	18fb      	adds	r3, r7, r3
   2a57e:	1c02      	adds	r2, r0, #0
   2a580:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2a582:	230f      	movs	r3, #15
   2a584:	18fb      	adds	r3, r7, r3
   2a586:	781a      	ldrb	r2, [r3, #0]
   2a588:	231b      	movs	r3, #27
   2a58a:	18fb      	adds	r3, r7, r3
   2a58c:	493e      	ldr	r1, [pc, #248]	; (2a688 <_tcc_build_faults+0x118>)
   2a58e:	5c8a      	ldrb	r2, [r1, r2]
   2a590:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2a592:	2300      	movs	r3, #0
   2a594:	61fb      	str	r3, [r7, #28]
   2a596:	e06e      	b.n	2a676 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2a598:	69fa      	ldr	r2, [r7, #28]
   2a59a:	0013      	movs	r3, r2
   2a59c:	009b      	lsls	r3, r3, #2
   2a59e:	189b      	adds	r3, r3, r2
   2a5a0:	005b      	lsls	r3, r3, #1
   2a5a2:	3328      	adds	r3, #40	; 0x28
   2a5a4:	68ba      	ldr	r2, [r7, #8]
   2a5a6:	18d3      	adds	r3, r2, r3
   2a5a8:	3304      	adds	r3, #4
   2a5aa:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2a5ac:	697b      	ldr	r3, [r7, #20]
   2a5ae:	7a5b      	ldrb	r3, [r3, #9]
   2a5b0:	221b      	movs	r2, #27
   2a5b2:	18ba      	adds	r2, r7, r2
   2a5b4:	7812      	ldrb	r2, [r2, #0]
   2a5b6:	429a      	cmp	r2, r3
   2a5b8:	d801      	bhi.n	2a5be <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2a5ba:	2317      	movs	r3, #23
   2a5bc:	e05f      	b.n	2a67e <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2a5be:	697b      	ldr	r3, [r7, #20]
   2a5c0:	781b      	ldrb	r3, [r3, #0]
   2a5c2:	2b0f      	cmp	r3, #15
   2a5c4:	d901      	bls.n	2a5ca <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2a5c6:	2317      	movs	r3, #23
   2a5c8:	e059      	b.n	2a67e <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2a5ca:	697b      	ldr	r3, [r7, #20]
   2a5cc:	781b      	ldrb	r3, [r3, #0]
   2a5ce:	061b      	lsls	r3, r3, #24
   2a5d0:	001a      	movs	r2, r3
   2a5d2:	23f0      	movs	r3, #240	; 0xf0
   2a5d4:	051b      	lsls	r3, r3, #20
   2a5d6:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2a5d8:	697b      	ldr	r3, [r7, #20]
   2a5da:	785b      	ldrb	r3, [r3, #1]
   2a5dc:	041b      	lsls	r3, r3, #16
   2a5de:	0019      	movs	r1, r3
   2a5e0:	23ff      	movs	r3, #255	; 0xff
   2a5e2:	041b      	lsls	r3, r3, #16
   2a5e4:	400b      	ands	r3, r1
   2a5e6:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2a5e8:	697b      	ldr	r3, [r7, #20]
   2a5ea:	789b      	ldrb	r3, [r3, #2]
   2a5ec:	2b00      	cmp	r3, #0
   2a5ee:	d001      	beq.n	2a5f4 <_tcc_build_faults+0x84>
   2a5f0:	2380      	movs	r3, #128	; 0x80
   2a5f2:	e000      	b.n	2a5f6 <_tcc_build_faults+0x86>
   2a5f4:	2300      	movs	r3, #0
   2a5f6:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2a5f8:	697b      	ldr	r3, [r7, #20]
   2a5fa:	78db      	ldrb	r3, [r3, #3]
   2a5fc:	2b00      	cmp	r3, #0
   2a5fe:	d001      	beq.n	2a604 <_tcc_build_faults+0x94>
   2a600:	2308      	movs	r3, #8
   2a602:	e000      	b.n	2a606 <_tcc_build_faults+0x96>
   2a604:	2300      	movs	r3, #0
   2a606:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2a608:	697b      	ldr	r3, [r7, #20]
   2a60a:	791b      	ldrb	r3, [r3, #4]
   2a60c:	2b00      	cmp	r3, #0
   2a60e:	d001      	beq.n	2a614 <_tcc_build_faults+0xa4>
   2a610:	2310      	movs	r3, #16
   2a612:	e000      	b.n	2a616 <_tcc_build_faults+0xa6>
   2a614:	2300      	movs	r3, #0
   2a616:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2a618:	697b      	ldr	r3, [r7, #20]
   2a61a:	795b      	ldrb	r3, [r3, #5]
   2a61c:	0019      	movs	r1, r3
   2a61e:	2303      	movs	r3, #3
   2a620:	400b      	ands	r3, r1
   2a622:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2a624:	697b      	ldr	r3, [r7, #20]
   2a626:	799b      	ldrb	r3, [r3, #6]
   2a628:	015b      	lsls	r3, r3, #5
   2a62a:	0019      	movs	r1, r3
   2a62c:	2360      	movs	r3, #96	; 0x60
   2a62e:	400b      	ands	r3, r1
   2a630:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2a632:	697b      	ldr	r3, [r7, #20]
   2a634:	79db      	ldrb	r3, [r3, #7]
   2a636:	021b      	lsls	r3, r3, #8
   2a638:	0019      	movs	r1, r3
   2a63a:	23c0      	movs	r3, #192	; 0xc0
   2a63c:	009b      	lsls	r3, r3, #2
   2a63e:	400b      	ands	r3, r1
   2a640:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2a642:	697b      	ldr	r3, [r7, #20]
   2a644:	7a1b      	ldrb	r3, [r3, #8]
   2a646:	031b      	lsls	r3, r3, #12
   2a648:	0019      	movs	r1, r3
   2a64a:	23e0      	movs	r3, #224	; 0xe0
   2a64c:	01db      	lsls	r3, r3, #7
   2a64e:	400b      	ands	r3, r1
   2a650:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2a652:	697b      	ldr	r3, [r7, #20]
   2a654:	7a5b      	ldrb	r3, [r3, #9]
   2a656:	029b      	lsls	r3, r3, #10
   2a658:	0019      	movs	r1, r3
   2a65a:	23c0      	movs	r3, #192	; 0xc0
   2a65c:	011b      	lsls	r3, r3, #4
   2a65e:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2a660:	4313      	orrs	r3, r2
   2a662:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2a664:	69fb      	ldr	r3, [r7, #28]
   2a666:	009b      	lsls	r3, r3, #2
   2a668:	687a      	ldr	r2, [r7, #4]
   2a66a:	18d3      	adds	r3, r2, r3
   2a66c:	693a      	ldr	r2, [r7, #16]
   2a66e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2a670:	69fb      	ldr	r3, [r7, #28]
   2a672:	3301      	adds	r3, #1
   2a674:	61fb      	str	r3, [r7, #28]
   2a676:	69fb      	ldr	r3, [r7, #28]
   2a678:	2b01      	cmp	r3, #1
   2a67a:	dd8d      	ble.n	2a598 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2a67c:	2300      	movs	r3, #0
}
   2a67e:	0018      	movs	r0, r3
   2a680:	46bd      	mov	sp, r7
   2a682:	b008      	add	sp, #32
   2a684:	bd80      	pop	{r7, pc}
   2a686:	46c0      	nop			; (mov r8, r8)
   2a688:	0003954c 	.word	0x0003954c

0002a68c <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a68c:	b580      	push	{r7, lr}
   2a68e:	b088      	sub	sp, #32
   2a690:	af00      	add	r7, sp, #0
   2a692:	60b9      	str	r1, [r7, #8]
   2a694:	607a      	str	r2, [r7, #4]
   2a696:	230f      	movs	r3, #15
   2a698:	18fb      	adds	r3, r7, r3
   2a69a:	1c02      	adds	r2, r0, #0
   2a69c:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2a69e:	230f      	movs	r3, #15
   2a6a0:	18fb      	adds	r3, r7, r3
   2a6a2:	781a      	ldrb	r2, [r3, #0]
   2a6a4:	2317      	movs	r3, #23
   2a6a6:	18fb      	adds	r3, r7, r3
   2a6a8:	492d      	ldr	r1, [pc, #180]	; (2a760 <_tcc_build_drvctrl+0xd4>)
   2a6aa:	5c8a      	ldrb	r2, [r1, r2]
   2a6ac:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2a6ae:	2300      	movs	r3, #0
   2a6b0:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a6b2:	2300      	movs	r3, #0
   2a6b4:	61fb      	str	r3, [r7, #28]
   2a6b6:	e048      	b.n	2a74a <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2a6b8:	68ba      	ldr	r2, [r7, #8]
   2a6ba:	2150      	movs	r1, #80	; 0x50
   2a6bc:	69fb      	ldr	r3, [r7, #28]
   2a6be:	18d3      	adds	r3, r2, r3
   2a6c0:	185b      	adds	r3, r3, r1
   2a6c2:	781b      	ldrb	r3, [r3, #0]
   2a6c4:	2b00      	cmp	r3, #0
   2a6c6:	d010      	beq.n	2a6ea <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2a6c8:	2317      	movs	r3, #23
   2a6ca:	18fb      	adds	r3, r7, r3
   2a6cc:	781a      	ldrb	r2, [r3, #0]
   2a6ce:	69fb      	ldr	r3, [r7, #28]
   2a6d0:	429a      	cmp	r2, r3
   2a6d2:	d801      	bhi.n	2a6d8 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2a6d4:	2317      	movs	r3, #23
   2a6d6:	e03f      	b.n	2a758 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2a6d8:	2380      	movs	r3, #128	; 0x80
   2a6da:	025a      	lsls	r2, r3, #9
   2a6dc:	69fb      	ldr	r3, [r7, #28]
   2a6de:	409a      	lsls	r2, r3
   2a6e0:	0013      	movs	r3, r2
   2a6e2:	001a      	movs	r2, r3
   2a6e4:	69bb      	ldr	r3, [r7, #24]
   2a6e6:	4313      	orrs	r3, r2
   2a6e8:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2a6ea:	68ba      	ldr	r2, [r7, #8]
   2a6ec:	69fb      	ldr	r3, [r7, #28]
   2a6ee:	331c      	adds	r3, #28
   2a6f0:	005b      	lsls	r3, r3, #1
   2a6f2:	18d3      	adds	r3, r2, r3
   2a6f4:	3309      	adds	r3, #9
   2a6f6:	781b      	ldrb	r3, [r3, #0]
   2a6f8:	2b00      	cmp	r3, #0
   2a6fa:	d023      	beq.n	2a744 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2a6fc:	2317      	movs	r3, #23
   2a6fe:	18fb      	adds	r3, r7, r3
   2a700:	781a      	ldrb	r2, [r3, #0]
   2a702:	69fb      	ldr	r3, [r7, #28]
   2a704:	429a      	cmp	r2, r3
   2a706:	d801      	bhi.n	2a70c <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2a708:	2317      	movs	r3, #23
   2a70a:	e025      	b.n	2a758 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2a70c:	68ba      	ldr	r2, [r7, #8]
   2a70e:	69fb      	ldr	r3, [r7, #28]
   2a710:	331c      	adds	r3, #28
   2a712:	005b      	lsls	r3, r3, #1
   2a714:	18d3      	adds	r3, r2, r3
   2a716:	3309      	adds	r3, #9
   2a718:	781b      	ldrb	r3, [r3, #0]
   2a71a:	2b02      	cmp	r3, #2
   2a71c:	d10a      	bne.n	2a734 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2a71e:	2302      	movs	r3, #2
   2a720:	33ff      	adds	r3, #255	; 0xff
   2a722:	001a      	movs	r2, r3
   2a724:	69fb      	ldr	r3, [r7, #28]
   2a726:	409a      	lsls	r2, r3
   2a728:	0013      	movs	r3, r2
   2a72a:	001a      	movs	r2, r3
   2a72c:	69bb      	ldr	r3, [r7, #24]
   2a72e:	4313      	orrs	r3, r2
   2a730:	61bb      	str	r3, [r7, #24]
   2a732:	e007      	b.n	2a744 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2a734:	2201      	movs	r2, #1
   2a736:	69fb      	ldr	r3, [r7, #28]
   2a738:	409a      	lsls	r2, r3
   2a73a:	0013      	movs	r3, r2
   2a73c:	001a      	movs	r2, r3
   2a73e:	69bb      	ldr	r3, [r7, #24]
   2a740:	4313      	orrs	r3, r2
   2a742:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a744:	69fb      	ldr	r3, [r7, #28]
   2a746:	3301      	adds	r3, #1
   2a748:	61fb      	str	r3, [r7, #28]
   2a74a:	69fb      	ldr	r3, [r7, #28]
   2a74c:	2b07      	cmp	r3, #7
   2a74e:	d9b3      	bls.n	2a6b8 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2a750:	687b      	ldr	r3, [r7, #4]
   2a752:	69ba      	ldr	r2, [r7, #24]
   2a754:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2a756:	2300      	movs	r3, #0
}
   2a758:	0018      	movs	r0, r3
   2a75a:	46bd      	mov	sp, r7
   2a75c:	b008      	add	sp, #32
   2a75e:	bd80      	pop	{r7, pc}
   2a760:	00039550 	.word	0x00039550

0002a764 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a764:	b580      	push	{r7, lr}
   2a766:	b088      	sub	sp, #32
   2a768:	af00      	add	r7, sp, #0
   2a76a:	60b9      	str	r1, [r7, #8]
   2a76c:	607a      	str	r2, [r7, #4]
   2a76e:	230f      	movs	r3, #15
   2a770:	18fb      	adds	r3, r7, r3
   2a772:	1c02      	adds	r2, r0, #0
   2a774:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2a776:	230f      	movs	r3, #15
   2a778:	18fb      	adds	r3, r7, r3
   2a77a:	781a      	ldrb	r2, [r3, #0]
   2a77c:	2317      	movs	r3, #23
   2a77e:	18fb      	adds	r3, r7, r3
   2a780:	491d      	ldr	r1, [pc, #116]	; (2a7f8 <_tcc_build_waves+0x94>)
   2a782:	5c8a      	ldrb	r2, [r1, r2]
   2a784:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2a786:	68bb      	ldr	r3, [r7, #8]
   2a788:	3310      	adds	r3, #16
   2a78a:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2a78c:	693b      	ldr	r3, [r7, #16]
   2a78e:	7a5b      	ldrb	r3, [r3, #9]
   2a790:	011b      	lsls	r3, r3, #4
   2a792:	001a      	movs	r2, r3
   2a794:	2330      	movs	r3, #48	; 0x30
   2a796:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2a798:	693b      	ldr	r3, [r7, #16]
   2a79a:	7a1b      	ldrb	r3, [r3, #8]
   2a79c:	0019      	movs	r1, r3
   2a79e:	2307      	movs	r3, #7
   2a7a0:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2a7a2:	4313      	orrs	r3, r2
   2a7a4:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2a7a6:	2300      	movs	r3, #0
   2a7a8:	61fb      	str	r3, [r7, #28]
   2a7aa:	e01a      	b.n	2a7e2 <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2a7ac:	693a      	ldr	r2, [r7, #16]
   2a7ae:	69fb      	ldr	r3, [r7, #28]
   2a7b0:	18d3      	adds	r3, r2, r3
   2a7b2:	3304      	adds	r3, #4
   2a7b4:	781b      	ldrb	r3, [r3, #0]
   2a7b6:	2b00      	cmp	r3, #0
   2a7b8:	d010      	beq.n	2a7dc <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2a7ba:	2317      	movs	r3, #23
   2a7bc:	18fb      	adds	r3, r7, r3
   2a7be:	781a      	ldrb	r2, [r3, #0]
   2a7c0:	69fb      	ldr	r3, [r7, #28]
   2a7c2:	429a      	cmp	r2, r3
   2a7c4:	dc01      	bgt.n	2a7ca <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2a7c6:	2317      	movs	r3, #23
   2a7c8:	e012      	b.n	2a7f0 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2a7ca:	2380      	movs	r3, #128	; 0x80
   2a7cc:	025a      	lsls	r2, r3, #9
   2a7ce:	69fb      	ldr	r3, [r7, #28]
   2a7d0:	409a      	lsls	r2, r3
   2a7d2:	0013      	movs	r3, r2
   2a7d4:	001a      	movs	r2, r3
   2a7d6:	69bb      	ldr	r3, [r7, #24]
   2a7d8:	4313      	orrs	r3, r2
   2a7da:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2a7dc:	69fb      	ldr	r3, [r7, #28]
   2a7de:	3301      	adds	r3, #1
   2a7e0:	61fb      	str	r3, [r7, #28]
   2a7e2:	69fb      	ldr	r3, [r7, #28]
   2a7e4:	2b03      	cmp	r3, #3
   2a7e6:	dde1      	ble.n	2a7ac <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2a7e8:	687b      	ldr	r3, [r7, #4]
   2a7ea:	69ba      	ldr	r2, [r7, #24]
   2a7ec:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2a7ee:	2300      	movs	r3, #0
}
   2a7f0:	0018      	movs	r0, r3
   2a7f2:	46bd      	mov	sp, r7
   2a7f4:	b008      	add	sp, #32
   2a7f6:	bd80      	pop	{r7, pc}
   2a7f8:	0003954c 	.word	0x0003954c

0002a7fc <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2a7fc:	b590      	push	{r4, r7, lr}
   2a7fe:	b091      	sub	sp, #68	; 0x44
   2a800:	af00      	add	r7, sp, #0
   2a802:	60f8      	str	r0, [r7, #12]
   2a804:	60b9      	str	r1, [r7, #8]
   2a806:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2a808:	233b      	movs	r3, #59	; 0x3b
   2a80a:	18fc      	adds	r4, r7, r3
   2a80c:	68bb      	ldr	r3, [r7, #8]
   2a80e:	0018      	movs	r0, r3
   2a810:	4bc4      	ldr	r3, [pc, #784]	; (2ab24 <tcc_init+0x328>)
   2a812:	4798      	blx	r3
   2a814:	0003      	movs	r3, r0
   2a816:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2a818:	233b      	movs	r3, #59	; 0x3b
   2a81a:	18fb      	adds	r3, r7, r3
   2a81c:	781a      	ldrb	r2, [r3, #0]
   2a81e:	4bc2      	ldr	r3, [pc, #776]	; (2ab28 <tcc_init+0x32c>)
   2a820:	0092      	lsls	r2, r2, #2
   2a822:	58d3      	ldr	r3, [r2, r3]
   2a824:	0019      	movs	r1, r3
   2a826:	2002      	movs	r0, #2
   2a828:	4bc0      	ldr	r3, [pc, #768]	; (2ab2c <tcc_init+0x330>)
   2a82a:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2a82c:	68bb      	ldr	r3, [r7, #8]
   2a82e:	681b      	ldr	r3, [r3, #0]
   2a830:	2202      	movs	r2, #2
   2a832:	4013      	ands	r3, r2
   2a834:	d001      	beq.n	2a83a <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2a836:	231c      	movs	r3, #28
   2a838:	e1be      	b.n	2abb8 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2a83a:	68bb      	ldr	r3, [r7, #8]
   2a83c:	681b      	ldr	r3, [r3, #0]
   2a83e:	2201      	movs	r2, #1
   2a840:	4013      	ands	r3, r2
   2a842:	d001      	beq.n	2a848 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2a844:	231c      	movs	r3, #28
   2a846:	e1b7      	b.n	2abb8 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2a848:	233b      	movs	r3, #59	; 0x3b
   2a84a:	18fb      	adds	r3, r7, r3
   2a84c:	781a      	ldrb	r2, [r3, #0]
   2a84e:	4bb8      	ldr	r3, [pc, #736]	; (2ab30 <tcc_init+0x334>)
   2a850:	0092      	lsls	r2, r2, #2
   2a852:	58d3      	ldr	r3, [r2, r3]
   2a854:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2a856:	687b      	ldr	r3, [r7, #4]
   2a858:	681a      	ldr	r2, [r3, #0]
   2a85a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a85c:	429a      	cmp	r2, r3
   2a85e:	d804      	bhi.n	2a86a <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2a860:	687b      	ldr	r3, [r7, #4]
   2a862:	685a      	ldr	r2, [r3, #4]
   2a864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a866:	429a      	cmp	r2, r3
   2a868:	d901      	bls.n	2a86e <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2a86a:	2317      	movs	r3, #23
   2a86c:	e1a4      	b.n	2abb8 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a86e:	2300      	movs	r3, #0
   2a870:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a872:	e00e      	b.n	2a892 <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2a874:	687a      	ldr	r2, [r7, #4]
   2a876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a878:	3306      	adds	r3, #6
   2a87a:	009b      	lsls	r3, r3, #2
   2a87c:	18d3      	adds	r3, r2, r3
   2a87e:	3304      	adds	r3, #4
   2a880:	681a      	ldr	r2, [r3, #0]
   2a882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a884:	429a      	cmp	r2, r3
   2a886:	d901      	bls.n	2a88c <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2a888:	2317      	movs	r3, #23
   2a88a:	e195      	b.n	2abb8 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a88c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a88e:	3301      	adds	r3, #1
   2a890:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a894:	2b03      	cmp	r3, #3
   2a896:	dded      	ble.n	2a874 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a898:	2300      	movs	r3, #0
   2a89a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a89c:	e019      	b.n	2a8d2 <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2a89e:	687a      	ldr	r2, [r7, #4]
   2a8a0:	2198      	movs	r1, #152	; 0x98
   2a8a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a8a4:	18d3      	adds	r3, r2, r3
   2a8a6:	185b      	adds	r3, r3, r1
   2a8a8:	781b      	ldrb	r3, [r3, #0]
   2a8aa:	2201      	movs	r2, #1
   2a8ac:	4053      	eors	r3, r2
   2a8ae:	b2db      	uxtb	r3, r3
   2a8b0:	2b00      	cmp	r3, #0
   2a8b2:	d10a      	bne.n	2a8ca <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2a8b4:	233b      	movs	r3, #59	; 0x3b
   2a8b6:	18fb      	adds	r3, r7, r3
   2a8b8:	781b      	ldrb	r3, [r3, #0]
   2a8ba:	4a9e      	ldr	r2, [pc, #632]	; (2ab34 <tcc_init+0x338>)
   2a8bc:	5cd3      	ldrb	r3, [r2, r3]
   2a8be:	001a      	movs	r2, r3
   2a8c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a8c2:	429a      	cmp	r2, r3
   2a8c4:	dc02      	bgt.n	2a8cc <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2a8c6:	2317      	movs	r3, #23
   2a8c8:	e176      	b.n	2abb8 <tcc_init+0x3bc>
			continue;
   2a8ca:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a8cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a8ce:	3301      	adds	r3, #1
   2a8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a8d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a8d4:	2b07      	cmp	r3, #7
   2a8d6:	dde2      	ble.n	2a89e <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2a8d8:	2300      	movs	r3, #0
   2a8da:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2a8dc:	2333      	movs	r3, #51	; 0x33
   2a8de:	18fc      	adds	r4, r7, r3
   2a8e0:	232c      	movs	r3, #44	; 0x2c
   2a8e2:	18fa      	adds	r2, r7, r3
   2a8e4:	6879      	ldr	r1, [r7, #4]
   2a8e6:	233b      	movs	r3, #59	; 0x3b
   2a8e8:	18fb      	adds	r3, r7, r3
   2a8ea:	781b      	ldrb	r3, [r3, #0]
   2a8ec:	0018      	movs	r0, r3
   2a8ee:	4b92      	ldr	r3, [pc, #584]	; (2ab38 <tcc_init+0x33c>)
   2a8f0:	4798      	blx	r3
   2a8f2:	0003      	movs	r3, r0
   2a8f4:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a8f6:	2333      	movs	r3, #51	; 0x33
   2a8f8:	18fb      	adds	r3, r7, r3
   2a8fa:	781b      	ldrb	r3, [r3, #0]
   2a8fc:	2b00      	cmp	r3, #0
   2a8fe:	d003      	beq.n	2a908 <tcc_init+0x10c>
		return status;
   2a900:	2333      	movs	r3, #51	; 0x33
   2a902:	18fb      	adds	r3, r7, r3
   2a904:	781b      	ldrb	r3, [r3, #0]
   2a906:	e157      	b.n	2abb8 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2a908:	232b      	movs	r3, #43	; 0x2b
   2a90a:	18fa      	adds	r2, r7, r3
   2a90c:	6879      	ldr	r1, [r7, #4]
   2a90e:	233b      	movs	r3, #59	; 0x3b
   2a910:	18fb      	adds	r3, r7, r3
   2a912:	781b      	ldrb	r3, [r3, #0]
   2a914:	0018      	movs	r0, r3
   2a916:	4b89      	ldr	r3, [pc, #548]	; (2ab3c <tcc_init+0x340>)
   2a918:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2a91a:	2333      	movs	r3, #51	; 0x33
   2a91c:	18fc      	adds	r4, r7, r3
   2a91e:	2320      	movs	r3, #32
   2a920:	18fa      	adds	r2, r7, r3
   2a922:	6879      	ldr	r1, [r7, #4]
   2a924:	233b      	movs	r3, #59	; 0x3b
   2a926:	18fb      	adds	r3, r7, r3
   2a928:	781b      	ldrb	r3, [r3, #0]
   2a92a:	0018      	movs	r0, r3
   2a92c:	4b84      	ldr	r3, [pc, #528]	; (2ab40 <tcc_init+0x344>)
   2a92e:	4798      	blx	r3
   2a930:	0003      	movs	r3, r0
   2a932:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a934:	2333      	movs	r3, #51	; 0x33
   2a936:	18fb      	adds	r3, r7, r3
   2a938:	781b      	ldrb	r3, [r3, #0]
   2a93a:	2b00      	cmp	r3, #0
   2a93c:	d003      	beq.n	2a946 <tcc_init+0x14a>
		return status;
   2a93e:	2333      	movs	r3, #51	; 0x33
   2a940:	18fb      	adds	r3, r7, r3
   2a942:	781b      	ldrb	r3, [r3, #0]
   2a944:	e138      	b.n	2abb8 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2a946:	2300      	movs	r3, #0
   2a948:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2a94a:	2333      	movs	r3, #51	; 0x33
   2a94c:	18fc      	adds	r4, r7, r3
   2a94e:	231c      	movs	r3, #28
   2a950:	18fa      	adds	r2, r7, r3
   2a952:	6879      	ldr	r1, [r7, #4]
   2a954:	233b      	movs	r3, #59	; 0x3b
   2a956:	18fb      	adds	r3, r7, r3
   2a958:	781b      	ldrb	r3, [r3, #0]
   2a95a:	0018      	movs	r0, r3
   2a95c:	4b79      	ldr	r3, [pc, #484]	; (2ab44 <tcc_init+0x348>)
   2a95e:	4798      	blx	r3
   2a960:	0003      	movs	r3, r0
   2a962:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a964:	2333      	movs	r3, #51	; 0x33
   2a966:	18fb      	adds	r3, r7, r3
   2a968:	781b      	ldrb	r3, [r3, #0]
   2a96a:	2b00      	cmp	r3, #0
   2a96c:	d003      	beq.n	2a976 <tcc_init+0x17a>
		return status;
   2a96e:	2333      	movs	r3, #51	; 0x33
   2a970:	18fb      	adds	r3, r7, r3
   2a972:	781b      	ldrb	r3, [r3, #0]
   2a974:	e120      	b.n	2abb8 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2a976:	2333      	movs	r3, #51	; 0x33
   2a978:	18fc      	adds	r4, r7, r3
   2a97a:	2318      	movs	r3, #24
   2a97c:	18fa      	adds	r2, r7, r3
   2a97e:	6879      	ldr	r1, [r7, #4]
   2a980:	233b      	movs	r3, #59	; 0x3b
   2a982:	18fb      	adds	r3, r7, r3
   2a984:	781b      	ldrb	r3, [r3, #0]
   2a986:	0018      	movs	r0, r3
   2a988:	4b6f      	ldr	r3, [pc, #444]	; (2ab48 <tcc_init+0x34c>)
   2a98a:	4798      	blx	r3
   2a98c:	0003      	movs	r3, r0
   2a98e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a990:	2333      	movs	r3, #51	; 0x33
   2a992:	18fb      	adds	r3, r7, r3
   2a994:	781b      	ldrb	r3, [r3, #0]
   2a996:	2b00      	cmp	r3, #0
   2a998:	d003      	beq.n	2a9a2 <tcc_init+0x1a6>
		return status;
   2a99a:	2333      	movs	r3, #51	; 0x33
   2a99c:	18fb      	adds	r3, r7, r3
   2a99e:	781b      	ldrb	r3, [r3, #0]
   2a9a0:	e10a      	b.n	2abb8 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a9a2:	2300      	movs	r3, #0
   2a9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a9a6:	e009      	b.n	2a9bc <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2a9a8:	68fa      	ldr	r2, [r7, #12]
   2a9aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a9ac:	009b      	lsls	r3, r3, #2
   2a9ae:	18d3      	adds	r3, r2, r3
   2a9b0:	3304      	adds	r3, #4
   2a9b2:	2200      	movs	r2, #0
   2a9b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a9b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a9b8:	3301      	adds	r3, #1
   2a9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a9bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a9be:	2b0b      	cmp	r3, #11
   2a9c0:	ddf2      	ble.n	2a9a8 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2a9c2:	68fb      	ldr	r3, [r7, #12]
   2a9c4:	2200      	movs	r2, #0
   2a9c6:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2a9c8:	68fb      	ldr	r3, [r7, #12]
   2a9ca:	2200      	movs	r2, #0
   2a9cc:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2a9ce:	233b      	movs	r3, #59	; 0x3b
   2a9d0:	18fb      	adds	r3, r7, r3
   2a9d2:	781a      	ldrb	r2, [r3, #0]
   2a9d4:	4b5d      	ldr	r3, [pc, #372]	; (2ab4c <tcc_init+0x350>)
   2a9d6:	0092      	lsls	r2, r2, #2
   2a9d8:	68f9      	ldr	r1, [r7, #12]
   2a9da:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2a9dc:	68fb      	ldr	r3, [r7, #12]
   2a9de:	68ba      	ldr	r2, [r7, #8]
   2a9e0:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2a9e2:	687b      	ldr	r3, [r7, #4]
   2a9e4:	22a0      	movs	r2, #160	; 0xa0
   2a9e6:	5c99      	ldrb	r1, [r3, r2]
   2a9e8:	68fb      	ldr	r3, [r7, #12]
   2a9ea:	223c      	movs	r2, #60	; 0x3c
   2a9ec:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2a9ee:	2314      	movs	r3, #20
   2a9f0:	18fb      	adds	r3, r7, r3
   2a9f2:	0018      	movs	r0, r3
   2a9f4:	4b56      	ldr	r3, [pc, #344]	; (2ab50 <tcc_init+0x354>)
   2a9f6:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2a9f8:	687b      	ldr	r3, [r7, #4]
   2a9fa:	7a9a      	ldrb	r2, [r3, #10]
   2a9fc:	2314      	movs	r3, #20
   2a9fe:	18fb      	adds	r3, r7, r3
   2aa00:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2aa02:	233b      	movs	r3, #59	; 0x3b
   2aa04:	18fb      	adds	r3, r7, r3
   2aa06:	781b      	ldrb	r3, [r3, #0]
   2aa08:	4a52      	ldr	r2, [pc, #328]	; (2ab54 <tcc_init+0x358>)
   2aa0a:	5cd3      	ldrb	r3, [r2, r3]
   2aa0c:	2214      	movs	r2, #20
   2aa0e:	18ba      	adds	r2, r7, r2
   2aa10:	0011      	movs	r1, r2
   2aa12:	0018      	movs	r0, r3
   2aa14:	4b50      	ldr	r3, [pc, #320]	; (2ab58 <tcc_init+0x35c>)
   2aa16:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2aa18:	233b      	movs	r3, #59	; 0x3b
   2aa1a:	18fb      	adds	r3, r7, r3
   2aa1c:	781b      	ldrb	r3, [r3, #0]
   2aa1e:	4a4d      	ldr	r2, [pc, #308]	; (2ab54 <tcc_init+0x358>)
   2aa20:	5cd3      	ldrb	r3, [r2, r3]
   2aa22:	0018      	movs	r0, r3
   2aa24:	4b4d      	ldr	r3, [pc, #308]	; (2ab5c <tcc_init+0x360>)
   2aa26:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2aa28:	2300      	movs	r3, #0
   2aa2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2aa2c:	e02d      	b.n	2aa8a <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2aa2e:	687a      	ldr	r2, [r7, #4]
   2aa30:	2198      	movs	r1, #152	; 0x98
   2aa32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aa34:	18d3      	adds	r3, r2, r3
   2aa36:	185b      	adds	r3, r3, r1
   2aa38:	781b      	ldrb	r3, [r3, #0]
   2aa3a:	2201      	movs	r2, #1
   2aa3c:	4053      	eors	r3, r2
   2aa3e:	b2db      	uxtb	r3, r3
   2aa40:	2b00      	cmp	r3, #0
   2aa42:	d11e      	bne.n	2aa82 <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2aa44:	2310      	movs	r3, #16
   2aa46:	18fb      	adds	r3, r7, r3
   2aa48:	0018      	movs	r0, r3
   2aa4a:	4b45      	ldr	r3, [pc, #276]	; (2ab60 <tcc_init+0x364>)
   2aa4c:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2aa4e:	687b      	ldr	r3, [r7, #4]
   2aa50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2aa52:	321e      	adds	r2, #30
   2aa54:	0092      	lsls	r2, r2, #2
   2aa56:	58d3      	ldr	r3, [r2, r3]
   2aa58:	b2da      	uxtb	r2, r3
   2aa5a:	2310      	movs	r3, #16
   2aa5c:	18fb      	adds	r3, r7, r3
   2aa5e:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2aa60:	2310      	movs	r3, #16
   2aa62:	18fb      	adds	r3, r7, r3
   2aa64:	2201      	movs	r2, #1
   2aa66:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2aa68:	687b      	ldr	r3, [r7, #4]
   2aa6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2aa6c:	3216      	adds	r2, #22
   2aa6e:	0092      	lsls	r2, r2, #2
   2aa70:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2aa72:	b2db      	uxtb	r3, r3
   2aa74:	2210      	movs	r2, #16
   2aa76:	18ba      	adds	r2, r7, r2
   2aa78:	0011      	movs	r1, r2
   2aa7a:	0018      	movs	r0, r3
   2aa7c:	4b39      	ldr	r3, [pc, #228]	; (2ab64 <tcc_init+0x368>)
   2aa7e:	4798      	blx	r3
   2aa80:	e000      	b.n	2aa84 <tcc_init+0x288>
			continue;
   2aa82:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2aa84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aa86:	3301      	adds	r3, #1
   2aa88:	63fb      	str	r3, [r7, #60]	; 0x3c
   2aa8a:	233b      	movs	r3, #59	; 0x3b
   2aa8c:	18fb      	adds	r3, r7, r3
   2aa8e:	781b      	ldrb	r3, [r3, #0]
   2aa90:	4a28      	ldr	r2, [pc, #160]	; (2ab34 <tcc_init+0x338>)
   2aa92:	5cd3      	ldrb	r3, [r2, r3]
   2aa94:	001a      	movs	r2, r3
   2aa96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aa98:	429a      	cmp	r2, r3
   2aa9a:	dcc8      	bgt.n	2aa2e <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2aa9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2aa9e:	68bb      	ldr	r3, [r7, #8]
   2aaa0:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2aaa2:	46c0      	nop			; (mov r8, r8)
   2aaa4:	68bb      	ldr	r3, [r7, #8]
   2aaa6:	689b      	ldr	r3, [r3, #8]
   2aaa8:	2204      	movs	r2, #4
   2aaaa:	4013      	ands	r3, r2
   2aaac:	d1fa      	bne.n	2aaa4 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2aaae:	68bb      	ldr	r3, [r7, #8]
   2aab0:	22ff      	movs	r2, #255	; 0xff
   2aab2:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2aab4:	46c0      	nop			; (mov r8, r8)
   2aab6:	68bb      	ldr	r3, [r7, #8]
   2aab8:	689b      	ldr	r3, [r3, #8]
   2aaba:	2204      	movs	r2, #4
   2aabc:	4013      	ands	r3, r2
   2aabe:	d1fa      	bne.n	2aab6 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2aac0:	232b      	movs	r3, #43	; 0x2b
   2aac2:	18fb      	adds	r3, r7, r3
   2aac4:	781a      	ldrb	r2, [r3, #0]
   2aac6:	68bb      	ldr	r3, [r7, #8]
   2aac8:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2aaca:	2320      	movs	r3, #32
   2aacc:	18fb      	adds	r3, r7, r3
   2aace:	681a      	ldr	r2, [r3, #0]
   2aad0:	68bb      	ldr	r3, [r7, #8]
   2aad2:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2aad4:	2320      	movs	r3, #32
   2aad6:	18fb      	adds	r3, r7, r3
   2aad8:	685a      	ldr	r2, [r3, #4]
   2aada:	68bb      	ldr	r3, [r7, #8]
   2aadc:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2aade:	69fa      	ldr	r2, [r7, #28]
   2aae0:	68bb      	ldr	r3, [r7, #8]
   2aae2:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2aae4:	46c0      	nop			; (mov r8, r8)
   2aae6:	68bb      	ldr	r3, [r7, #8]
   2aae8:	689b      	ldr	r3, [r3, #8]
   2aaea:	4a1f      	ldr	r2, [pc, #124]	; (2ab68 <tcc_init+0x36c>)
   2aaec:	4013      	ands	r3, r2
   2aaee:	d1fa      	bne.n	2aae6 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2aaf0:	69ba      	ldr	r2, [r7, #24]
   2aaf2:	68bb      	ldr	r3, [r7, #8]
   2aaf4:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2aaf6:	46c0      	nop			; (mov r8, r8)
   2aaf8:	68bb      	ldr	r3, [r7, #8]
   2aafa:	689b      	ldr	r3, [r3, #8]
   2aafc:	2210      	movs	r2, #16
   2aafe:	4013      	ands	r3, r2
   2ab00:	d1fa      	bne.n	2aaf8 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2ab02:	687b      	ldr	r3, [r7, #4]
   2ab04:	681a      	ldr	r2, [r3, #0]
   2ab06:	68bb      	ldr	r3, [r7, #8]
   2ab08:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2ab0a:	46c0      	nop			; (mov r8, r8)
   2ab0c:	68bb      	ldr	r3, [r7, #8]
   2ab0e:	689b      	ldr	r3, [r3, #8]
   2ab10:	4a16      	ldr	r2, [pc, #88]	; (2ab6c <tcc_init+0x370>)
   2ab12:	4013      	ands	r3, r2
   2ab14:	d1fa      	bne.n	2ab0c <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2ab16:	687b      	ldr	r3, [r7, #4]
   2ab18:	685a      	ldr	r2, [r3, #4]
   2ab1a:	68bb      	ldr	r3, [r7, #8]
   2ab1c:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2ab1e:	2300      	movs	r3, #0
   2ab20:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ab22:	e03f      	b.n	2aba4 <tcc_init+0x3a8>
   2ab24:	0002a165 	.word	0x0002a165
   2ab28:	00039534 	.word	0x00039534
   2ab2c:	0002a0e1 	.word	0x0002a0e1
   2ab30:	00039540 	.word	0x00039540
   2ab34:	00039550 	.word	0x00039550
   2ab38:	0002a471 	.word	0x0002a471
   2ab3c:	0002a515 	.word	0x0002a515
   2ab40:	0002a571 	.word	0x0002a571
   2ab44:	0002a68d 	.word	0x0002a68d
   2ab48:	0002a765 	.word	0x0002a765
   2ab4c:	20005c20 	.word	0x20005c20
   2ab50:	0002a0c9 	.word	0x0002a0c9
   2ab54:	00039530 	.word	0x00039530
   2ab58:	00029ce1 	.word	0x00029ce1
   2ab5c:	00029d25 	.word	0x00029d25
   2ab60:	0002a13d 	.word	0x0002a13d
   2ab64:	0002a041 	.word	0x0002a041
   2ab68:	00020040 	.word	0x00020040
   2ab6c:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2ab70:	46c0      	nop			; (mov r8, r8)
   2ab72:	68bb      	ldr	r3, [r7, #8]
   2ab74:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2ab76:	4912      	ldr	r1, [pc, #72]	; (2abc0 <tcc_init+0x3c4>)
   2ab78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2ab7a:	4091      	lsls	r1, r2
   2ab7c:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2ab7e:	4013      	ands	r3, r2
   2ab80:	d1f7      	bne.n	2ab72 <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2ab82:	687a      	ldr	r2, [r7, #4]
   2ab84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ab86:	3306      	adds	r3, #6
   2ab88:	009b      	lsls	r3, r3, #2
   2ab8a:	18d3      	adds	r3, r2, r3
   2ab8c:	3304      	adds	r3, #4
   2ab8e:	681a      	ldr	r2, [r3, #0]
   2ab90:	68b9      	ldr	r1, [r7, #8]
   2ab92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ab94:	3310      	adds	r3, #16
   2ab96:	009b      	lsls	r3, r3, #2
   2ab98:	18cb      	adds	r3, r1, r3
   2ab9a:	3304      	adds	r3, #4
   2ab9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2ab9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aba0:	3301      	adds	r3, #1
   2aba2:	63fb      	str	r3, [r7, #60]	; 0x3c
   2aba4:	233b      	movs	r3, #59	; 0x3b
   2aba6:	18fb      	adds	r3, r7, r3
   2aba8:	781b      	ldrb	r3, [r3, #0]
   2abaa:	4a06      	ldr	r2, [pc, #24]	; (2abc4 <tcc_init+0x3c8>)
   2abac:	5cd3      	ldrb	r3, [r2, r3]
   2abae:	001a      	movs	r2, r3
   2abb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2abb2:	429a      	cmp	r2, r3
   2abb4:	dcdc      	bgt.n	2ab70 <tcc_init+0x374>
	}

	return STATUS_OK;
   2abb6:	2300      	movs	r3, #0
}
   2abb8:	0018      	movs	r0, r3
   2abba:	46bd      	mov	sp, r7
   2abbc:	b011      	add	sp, #68	; 0x44
   2abbe:	bd90      	pop	{r4, r7, pc}
   2abc0:	00080100 	.word	0x00080100
   2abc4:	0003954c 	.word	0x0003954c

0002abc8 <system_interrupt_enable>:
{
   2abc8:	b580      	push	{r7, lr}
   2abca:	b082      	sub	sp, #8
   2abcc:	af00      	add	r7, sp, #0
   2abce:	0002      	movs	r2, r0
   2abd0:	1dfb      	adds	r3, r7, #7
   2abd2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2abd4:	4b06      	ldr	r3, [pc, #24]	; (2abf0 <system_interrupt_enable+0x28>)
   2abd6:	1dfa      	adds	r2, r7, #7
   2abd8:	7812      	ldrb	r2, [r2, #0]
   2abda:	0011      	movs	r1, r2
   2abdc:	221f      	movs	r2, #31
   2abde:	400a      	ands	r2, r1
   2abe0:	2101      	movs	r1, #1
   2abe2:	4091      	lsls	r1, r2
   2abe4:	000a      	movs	r2, r1
   2abe6:	601a      	str	r2, [r3, #0]
}
   2abe8:	46c0      	nop			; (mov r8, r8)
   2abea:	46bd      	mov	sp, r7
   2abec:	b002      	add	sp, #8
   2abee:	bd80      	pop	{r7, pc}
   2abf0:	e000e100 	.word	0xe000e100

0002abf4 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2abf4:	b580      	push	{r7, lr}
   2abf6:	b082      	sub	sp, #8
   2abf8:	af00      	add	r7, sp, #0
   2abfa:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2abfc:	4a04      	ldr	r2, [pc, #16]	; (2ac10 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2abfe:	687b      	ldr	r3, [r7, #4]
   2ac00:	18d3      	adds	r3, r2, r3
   2ac02:	781b      	ldrb	r3, [r3, #0]
   2ac04:	b25b      	sxtb	r3, r3
}
   2ac06:	0018      	movs	r0, r3
   2ac08:	46bd      	mov	sp, r7
   2ac0a:	b002      	add	sp, #8
   2ac0c:	bd80      	pop	{r7, pc}
   2ac0e:	46c0      	nop			; (mov r8, r8)
   2ac10:	20000128 	.word	0x20000128

0002ac14 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2ac14:	b580      	push	{r7, lr}
   2ac16:	b084      	sub	sp, #16
   2ac18:	af00      	add	r7, sp, #0
   2ac1a:	60f8      	str	r0, [r7, #12]
   2ac1c:	60b9      	str	r1, [r7, #8]
   2ac1e:	1dfb      	adds	r3, r7, #7
   2ac20:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2ac22:	1dfb      	adds	r3, r7, #7
   2ac24:	781b      	ldrb	r3, [r3, #0]
   2ac26:	68fa      	ldr	r2, [r7, #12]
   2ac28:	009b      	lsls	r3, r3, #2
   2ac2a:	18d3      	adds	r3, r2, r3
   2ac2c:	3304      	adds	r3, #4
   2ac2e:	68ba      	ldr	r2, [r7, #8]
   2ac30:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2ac32:	68fb      	ldr	r3, [r7, #12]
   2ac34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2ac36:	1dfb      	adds	r3, r7, #7
   2ac38:	7819      	ldrb	r1, [r3, #0]
   2ac3a:	4b05      	ldr	r3, [pc, #20]	; (2ac50 <tcc_register_callback+0x3c>)
   2ac3c:	0089      	lsls	r1, r1, #2
   2ac3e:	58cb      	ldr	r3, [r1, r3]
   2ac40:	431a      	orrs	r2, r3
   2ac42:	68fb      	ldr	r3, [r7, #12]
   2ac44:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2ac46:	2300      	movs	r3, #0
}
   2ac48:	0018      	movs	r0, r3
   2ac4a:	46bd      	mov	sp, r7
   2ac4c:	b004      	add	sp, #16
   2ac4e:	bd80      	pop	{r7, pc}
   2ac50:	00039554 	.word	0x00039554

0002ac54 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2ac54:	b580      	push	{r7, lr}
   2ac56:	b082      	sub	sp, #8
   2ac58:	af00      	add	r7, sp, #0
   2ac5a:	6078      	str	r0, [r7, #4]
   2ac5c:	000a      	movs	r2, r1
   2ac5e:	1cfb      	adds	r3, r7, #3
   2ac60:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2ac62:	687b      	ldr	r3, [r7, #4]
   2ac64:	681b      	ldr	r3, [r3, #0]
   2ac66:	0018      	movs	r0, r3
   2ac68:	4b0f      	ldr	r3, [pc, #60]	; (2aca8 <tcc_enable_callback+0x54>)
   2ac6a:	4798      	blx	r3
   2ac6c:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2ac6e:	0018      	movs	r0, r3
   2ac70:	4b0e      	ldr	r3, [pc, #56]	; (2acac <tcc_enable_callback+0x58>)
   2ac72:	4798      	blx	r3
   2ac74:	0003      	movs	r3, r0
   2ac76:	0018      	movs	r0, r3
   2ac78:	4b0d      	ldr	r3, [pc, #52]	; (2acb0 <tcc_enable_callback+0x5c>)
   2ac7a:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2ac7c:	687b      	ldr	r3, [r7, #4]
   2ac7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2ac80:	1cfb      	adds	r3, r7, #3
   2ac82:	7819      	ldrb	r1, [r3, #0]
   2ac84:	4b0b      	ldr	r3, [pc, #44]	; (2acb4 <tcc_enable_callback+0x60>)
   2ac86:	0089      	lsls	r1, r1, #2
   2ac88:	58cb      	ldr	r3, [r1, r3]
   2ac8a:	431a      	orrs	r2, r3
   2ac8c:	687b      	ldr	r3, [r7, #4]
   2ac8e:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2ac90:	687b      	ldr	r3, [r7, #4]
   2ac92:	681b      	ldr	r3, [r3, #0]
   2ac94:	1cfa      	adds	r2, r7, #3
   2ac96:	7811      	ldrb	r1, [r2, #0]
   2ac98:	4a06      	ldr	r2, [pc, #24]	; (2acb4 <tcc_enable_callback+0x60>)
   2ac9a:	0089      	lsls	r1, r1, #2
   2ac9c:	588a      	ldr	r2, [r1, r2]
   2ac9e:	629a      	str	r2, [r3, #40]	; 0x28
}
   2aca0:	46c0      	nop			; (mov r8, r8)
   2aca2:	46bd      	mov	sp, r7
   2aca4:	b002      	add	sp, #8
   2aca6:	bd80      	pop	{r7, pc}
   2aca8:	0002a165 	.word	0x0002a165
   2acac:	0002abf5 	.word	0x0002abf5
   2acb0:	0002abc9 	.word	0x0002abc9
   2acb4:	00039554 	.word	0x00039554

0002acb8 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2acb8:	b580      	push	{r7, lr}
   2acba:	af00      	add	r7, sp, #0
   2acbc:	2000      	movs	r0, #0
   2acbe:	4b02      	ldr	r3, [pc, #8]	; (2acc8 <TCC0_Handler+0x10>)
   2acc0:	4798      	blx	r3
   2acc2:	46c0      	nop			; (mov r8, r8)
   2acc4:	46bd      	mov	sp, r7
   2acc6:	bd80      	pop	{r7, pc}
   2acc8:	0002acf5 	.word	0x0002acf5

0002accc <TCC1_Handler>:
   2accc:	b580      	push	{r7, lr}
   2acce:	af00      	add	r7, sp, #0
   2acd0:	2001      	movs	r0, #1
   2acd2:	4b02      	ldr	r3, [pc, #8]	; (2acdc <TCC1_Handler+0x10>)
   2acd4:	4798      	blx	r3
   2acd6:	46c0      	nop			; (mov r8, r8)
   2acd8:	46bd      	mov	sp, r7
   2acda:	bd80      	pop	{r7, pc}
   2acdc:	0002acf5 	.word	0x0002acf5

0002ace0 <TCC2_Handler>:
   2ace0:	b580      	push	{r7, lr}
   2ace2:	af00      	add	r7, sp, #0
   2ace4:	2002      	movs	r0, #2
   2ace6:	4b02      	ldr	r3, [pc, #8]	; (2acf0 <TCC2_Handler+0x10>)
   2ace8:	4798      	blx	r3
   2acea:	46c0      	nop			; (mov r8, r8)
   2acec:	46bd      	mov	sp, r7
   2acee:	bd80      	pop	{r7, pc}
   2acf0:	0002acf5 	.word	0x0002acf5

0002acf4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2acf4:	b580      	push	{r7, lr}
   2acf6:	b086      	sub	sp, #24
   2acf8:	af00      	add	r7, sp, #0
   2acfa:	0002      	movs	r2, r0
   2acfc:	1dfb      	adds	r3, r7, #7
   2acfe:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2ad00:	1dfb      	adds	r3, r7, #7
   2ad02:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2ad04:	4b18      	ldr	r3, [pc, #96]	; (2ad68 <_tcc_interrupt_handler+0x74>)
   2ad06:	0092      	lsls	r2, r2, #2
   2ad08:	58d3      	ldr	r3, [r2, r3]
   2ad0a:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2ad0c:	693b      	ldr	r3, [r7, #16]
   2ad0e:	681b      	ldr	r3, [r3, #0]
   2ad10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2ad12:	693b      	ldr	r3, [r7, #16]
   2ad14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2ad16:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2ad18:	693b      	ldr	r3, [r7, #16]
   2ad1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2ad1c:	4013      	ands	r3, r2
   2ad1e:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2ad20:	2300      	movs	r3, #0
   2ad22:	617b      	str	r3, [r7, #20]
   2ad24:	e019      	b.n	2ad5a <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2ad26:	4b11      	ldr	r3, [pc, #68]	; (2ad6c <_tcc_interrupt_handler+0x78>)
   2ad28:	697a      	ldr	r2, [r7, #20]
   2ad2a:	0092      	lsls	r2, r2, #2
   2ad2c:	58d3      	ldr	r3, [r2, r3]
   2ad2e:	68fa      	ldr	r2, [r7, #12]
   2ad30:	4013      	ands	r3, r2
   2ad32:	d00f      	beq.n	2ad54 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2ad34:	693a      	ldr	r2, [r7, #16]
   2ad36:	697b      	ldr	r3, [r7, #20]
   2ad38:	009b      	lsls	r3, r3, #2
   2ad3a:	18d3      	adds	r3, r2, r3
   2ad3c:	3304      	adds	r3, #4
   2ad3e:	681b      	ldr	r3, [r3, #0]
   2ad40:	693a      	ldr	r2, [r7, #16]
   2ad42:	0010      	movs	r0, r2
   2ad44:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2ad46:	693b      	ldr	r3, [r7, #16]
   2ad48:	681b      	ldr	r3, [r3, #0]
   2ad4a:	4a08      	ldr	r2, [pc, #32]	; (2ad6c <_tcc_interrupt_handler+0x78>)
   2ad4c:	6979      	ldr	r1, [r7, #20]
   2ad4e:	0089      	lsls	r1, r1, #2
   2ad50:	588a      	ldr	r2, [r1, r2]
   2ad52:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2ad54:	697b      	ldr	r3, [r7, #20]
   2ad56:	3301      	adds	r3, #1
   2ad58:	617b      	str	r3, [r7, #20]
   2ad5a:	697b      	ldr	r3, [r7, #20]
   2ad5c:	2b0b      	cmp	r3, #11
   2ad5e:	dde2      	ble.n	2ad26 <_tcc_interrupt_handler+0x32>
		}
	}
}
   2ad60:	46c0      	nop			; (mov r8, r8)
   2ad62:	46bd      	mov	sp, r7
   2ad64:	b006      	add	sp, #24
   2ad66:	bd80      	pop	{r7, pc}
   2ad68:	20005c20 	.word	0x20005c20
   2ad6c:	00039554 	.word	0x00039554

0002ad70 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2ad70:	b580      	push	{r7, lr}
   2ad72:	b082      	sub	sp, #8
   2ad74:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2ad76:	4b2f      	ldr	r3, [pc, #188]	; (2ae34 <Reset_Handler+0xc4>)
   2ad78:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2ad7a:	4b2f      	ldr	r3, [pc, #188]	; (2ae38 <Reset_Handler+0xc8>)
   2ad7c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2ad7e:	687a      	ldr	r2, [r7, #4]
   2ad80:	683b      	ldr	r3, [r7, #0]
   2ad82:	429a      	cmp	r2, r3
   2ad84:	d00c      	beq.n	2ada0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2ad86:	e007      	b.n	2ad98 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2ad88:	683b      	ldr	r3, [r7, #0]
   2ad8a:	1d1a      	adds	r2, r3, #4
   2ad8c:	603a      	str	r2, [r7, #0]
   2ad8e:	687a      	ldr	r2, [r7, #4]
   2ad90:	1d11      	adds	r1, r2, #4
   2ad92:	6079      	str	r1, [r7, #4]
   2ad94:	6812      	ldr	r2, [r2, #0]
   2ad96:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2ad98:	683a      	ldr	r2, [r7, #0]
   2ad9a:	4b28      	ldr	r3, [pc, #160]	; (2ae3c <Reset_Handler+0xcc>)
   2ad9c:	429a      	cmp	r2, r3
   2ad9e:	d3f3      	bcc.n	2ad88 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2ada0:	4b27      	ldr	r3, [pc, #156]	; (2ae40 <Reset_Handler+0xd0>)
   2ada2:	603b      	str	r3, [r7, #0]
   2ada4:	e004      	b.n	2adb0 <Reset_Handler+0x40>
                *pDest++ = 0;
   2ada6:	683b      	ldr	r3, [r7, #0]
   2ada8:	1d1a      	adds	r2, r3, #4
   2adaa:	603a      	str	r2, [r7, #0]
   2adac:	2200      	movs	r2, #0
   2adae:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2adb0:	683a      	ldr	r2, [r7, #0]
   2adb2:	4b24      	ldr	r3, [pc, #144]	; (2ae44 <Reset_Handler+0xd4>)
   2adb4:	429a      	cmp	r2, r3
   2adb6:	d3f6      	bcc.n	2ada6 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2adb8:	4b23      	ldr	r3, [pc, #140]	; (2ae48 <Reset_Handler+0xd8>)
   2adba:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2adbc:	4b23      	ldr	r3, [pc, #140]	; (2ae4c <Reset_Handler+0xdc>)
   2adbe:	687a      	ldr	r2, [r7, #4]
   2adc0:	21ff      	movs	r1, #255	; 0xff
   2adc2:	438a      	bics	r2, r1
   2adc4:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2adc6:	4a22      	ldr	r2, [pc, #136]	; (2ae50 <Reset_Handler+0xe0>)
   2adc8:	2390      	movs	r3, #144	; 0x90
   2adca:	005b      	lsls	r3, r3, #1
   2adcc:	2102      	movs	r1, #2
   2adce:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2add0:	4a20      	ldr	r2, [pc, #128]	; (2ae54 <Reset_Handler+0xe4>)
   2add2:	78d3      	ldrb	r3, [r2, #3]
   2add4:	2103      	movs	r1, #3
   2add6:	438b      	bics	r3, r1
   2add8:	1c19      	adds	r1, r3, #0
   2adda:	2302      	movs	r3, #2
   2addc:	430b      	orrs	r3, r1
   2adde:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2ade0:	4a1c      	ldr	r2, [pc, #112]	; (2ae54 <Reset_Handler+0xe4>)
   2ade2:	78d3      	ldrb	r3, [r2, #3]
   2ade4:	210c      	movs	r1, #12
   2ade6:	438b      	bics	r3, r1
   2ade8:	1c19      	adds	r1, r3, #0
   2adea:	2308      	movs	r3, #8
   2adec:	430b      	orrs	r3, r1
   2adee:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2adf0:	4a19      	ldr	r2, [pc, #100]	; (2ae58 <Reset_Handler+0xe8>)
   2adf2:	7b93      	ldrb	r3, [r2, #14]
   2adf4:	2130      	movs	r1, #48	; 0x30
   2adf6:	438b      	bics	r3, r1
   2adf8:	1c19      	adds	r1, r3, #0
   2adfa:	2320      	movs	r3, #32
   2adfc:	430b      	orrs	r3, r1
   2adfe:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2ae00:	4a15      	ldr	r2, [pc, #84]	; (2ae58 <Reset_Handler+0xe8>)
   2ae02:	7b93      	ldrb	r3, [r2, #14]
   2ae04:	210c      	movs	r1, #12
   2ae06:	438b      	bics	r3, r1
   2ae08:	1c19      	adds	r1, r3, #0
   2ae0a:	2308      	movs	r3, #8
   2ae0c:	430b      	orrs	r3, r1
   2ae0e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2ae10:	4a11      	ldr	r2, [pc, #68]	; (2ae58 <Reset_Handler+0xe8>)
   2ae12:	7b93      	ldrb	r3, [r2, #14]
   2ae14:	2103      	movs	r1, #3
   2ae16:	438b      	bics	r3, r1
   2ae18:	1c19      	adds	r1, r3, #0
   2ae1a:	2302      	movs	r3, #2
   2ae1c:	430b      	orrs	r3, r1
   2ae1e:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2ae20:	4a0e      	ldr	r2, [pc, #56]	; (2ae5c <Reset_Handler+0xec>)
   2ae22:	6853      	ldr	r3, [r2, #4]
   2ae24:	2180      	movs	r1, #128	; 0x80
   2ae26:	430b      	orrs	r3, r1
   2ae28:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2ae2a:	4b0d      	ldr	r3, [pc, #52]	; (2ae60 <Reset_Handler+0xf0>)
   2ae2c:	4798      	blx	r3

        /* Branch to main function */
        main();
   2ae2e:	4b0d      	ldr	r3, [pc, #52]	; (2ae64 <Reset_Handler+0xf4>)
   2ae30:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2ae32:	e7fe      	b.n	2ae32 <Reset_Handler+0xc2>
   2ae34:	0003a268 	.word	0x0003a268
   2ae38:	20000000 	.word	0x20000000
   2ae3c:	20000300 	.word	0x20000300
   2ae40:	20000300 	.word	0x20000300
   2ae44:	20005c90 	.word	0x20005c90
   2ae48:	00012000 	.word	0x00012000
   2ae4c:	e000ed00 	.word	0xe000ed00
   2ae50:	41007000 	.word	0x41007000
   2ae54:	41005000 	.word	0x41005000
   2ae58:	41004800 	.word	0x41004800
   2ae5c:	41004000 	.word	0x41004000
   2ae60:	000347dd 	.word	0x000347dd
   2ae64:	000325a5 	.word	0x000325a5

0002ae68 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2ae68:	b580      	push	{r7, lr}
   2ae6a:	af00      	add	r7, sp, #0
  __asm volatile (
   2ae6c:	2004      	movs	r0, #4
   2ae6e:	4671      	mov	r1, lr
   2ae70:	4208      	tst	r0, r1
   2ae72:	d002      	beq.n	2ae7a <_MSP>
   2ae74:	f3ef 8009 	mrs	r0, PSP
   2ae78:	e001      	b.n	2ae7e <_HALT>

0002ae7a <_MSP>:
   2ae7a:	f3ef 8008 	mrs	r0, MSP

0002ae7e <_HALT>:
   2ae7e:	6941      	ldr	r1, [r0, #20]
   2ae80:	e004      	b.n	2ae8c <HardFault_HandlerC>
   2ae82:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2ae84:	46c0      	nop			; (mov r8, r8)
   2ae86:	46bd      	mov	sp, r7
   2ae88:	bd80      	pop	{r7, pc}
	...

0002ae8c <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2ae8c:	b580      	push	{r7, lr}
   2ae8e:	b090      	sub	sp, #64	; 0x40
   2ae90:	af00      	add	r7, sp, #0
   2ae92:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2ae94:	687b      	ldr	r3, [r7, #4]
   2ae96:	681b      	ldr	r3, [r3, #0]
   2ae98:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2ae9a:	687b      	ldr	r3, [r7, #4]
   2ae9c:	685b      	ldr	r3, [r3, #4]
   2ae9e:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2aea0:	687b      	ldr	r3, [r7, #4]
   2aea2:	689b      	ldr	r3, [r3, #8]
   2aea4:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2aea6:	687b      	ldr	r3, [r7, #4]
   2aea8:	68db      	ldr	r3, [r3, #12]
   2aeaa:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2aeac:	687b      	ldr	r3, [r7, #4]
   2aeae:	691b      	ldr	r3, [r3, #16]
   2aeb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2aeb2:	687b      	ldr	r3, [r7, #4]
   2aeb4:	695b      	ldr	r3, [r3, #20]
   2aeb6:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2aeb8:	687b      	ldr	r3, [r7, #4]
   2aeba:	699b      	ldr	r3, [r3, #24]
   2aebc:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2aebe:	687b      	ldr	r3, [r7, #4]
   2aec0:	69db      	ldr	r3, [r3, #28]
   2aec2:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2aec4:	4b0b      	ldr	r3, [pc, #44]	; (2aef4 <HardFault_HandlerC+0x68>)
   2aec6:	681b      	ldr	r3, [r3, #0]
   2aec8:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2aeca:	4b0b      	ldr	r3, [pc, #44]	; (2aef8 <HardFault_HandlerC+0x6c>)
   2aecc:	681b      	ldr	r3, [r3, #0]
   2aece:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2aed0:	4b0a      	ldr	r3, [pc, #40]	; (2aefc <HardFault_HandlerC+0x70>)
   2aed2:	681b      	ldr	r3, [r3, #0]
   2aed4:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2aed6:	4b0a      	ldr	r3, [pc, #40]	; (2af00 <HardFault_HandlerC+0x74>)
   2aed8:	681b      	ldr	r3, [r3, #0]
   2aeda:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2aedc:	4b09      	ldr	r3, [pc, #36]	; (2af04 <HardFault_HandlerC+0x78>)
   2aede:	681b      	ldr	r3, [r3, #0]
   2aee0:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2aee2:	4b09      	ldr	r3, [pc, #36]	; (2af08 <HardFault_HandlerC+0x7c>)
   2aee4:	681b      	ldr	r3, [r3, #0]
   2aee6:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2aee8:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2aeea:	46c0      	nop			; (mov r8, r8)
   2aeec:	46bd      	mov	sp, r7
   2aeee:	b010      	add	sp, #64	; 0x40
   2aef0:	bd80      	pop	{r7, pc}
   2aef2:	46c0      	nop			; (mov r8, r8)
   2aef4:	e000ed28 	.word	0xe000ed28
   2aef8:	e000ed2c 	.word	0xe000ed2c
   2aefc:	e000ed30 	.word	0xe000ed30
   2af00:	e000ed3c 	.word	0xe000ed3c
   2af04:	e000ed34 	.word	0xe000ed34
   2af08:	e000ed38 	.word	0xe000ed38

0002af0c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2af0c:	b580      	push	{r7, lr}
   2af0e:	b086      	sub	sp, #24
   2af10:	af00      	add	r7, sp, #0
   2af12:	60f8      	str	r0, [r7, #12]
   2af14:	60b9      	str	r1, [r7, #8]
   2af16:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2af18:	2300      	movs	r3, #0
   2af1a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2af1c:	68fb      	ldr	r3, [r7, #12]
   2af1e:	2b00      	cmp	r3, #0
   2af20:	d012      	beq.n	2af48 <_read+0x3c>
		return -1;
   2af22:	2301      	movs	r3, #1
   2af24:	425b      	negs	r3, r3
   2af26:	e013      	b.n	2af50 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2af28:	4b0b      	ldr	r3, [pc, #44]	; (2af58 <_read+0x4c>)
   2af2a:	681a      	ldr	r2, [r3, #0]
   2af2c:	4b0b      	ldr	r3, [pc, #44]	; (2af5c <_read+0x50>)
   2af2e:	681b      	ldr	r3, [r3, #0]
   2af30:	68b9      	ldr	r1, [r7, #8]
   2af32:	0018      	movs	r0, r3
   2af34:	4790      	blx	r2
		ptr++;
   2af36:	68bb      	ldr	r3, [r7, #8]
   2af38:	3301      	adds	r3, #1
   2af3a:	60bb      	str	r3, [r7, #8]
		nChars++;
   2af3c:	697b      	ldr	r3, [r7, #20]
   2af3e:	3301      	adds	r3, #1
   2af40:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2af42:	687b      	ldr	r3, [r7, #4]
   2af44:	3b01      	subs	r3, #1
   2af46:	607b      	str	r3, [r7, #4]
   2af48:	687b      	ldr	r3, [r7, #4]
   2af4a:	2b00      	cmp	r3, #0
   2af4c:	dcec      	bgt.n	2af28 <_read+0x1c>
	}
	return nChars;
   2af4e:	697b      	ldr	r3, [r7, #20]
}
   2af50:	0018      	movs	r0, r3
   2af52:	46bd      	mov	sp, r7
   2af54:	b006      	add	sp, #24
   2af56:	bd80      	pop	{r7, pc}
   2af58:	20005c2c 	.word	0x20005c2c
   2af5c:	20005c34 	.word	0x20005c34

0002af60 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2af60:	b580      	push	{r7, lr}
   2af62:	b086      	sub	sp, #24
   2af64:	af00      	add	r7, sp, #0
   2af66:	60f8      	str	r0, [r7, #12]
   2af68:	60b9      	str	r1, [r7, #8]
   2af6a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2af6c:	2300      	movs	r3, #0
   2af6e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2af70:	68fb      	ldr	r3, [r7, #12]
   2af72:	2b01      	cmp	r3, #1
   2af74:	d01d      	beq.n	2afb2 <_write+0x52>
   2af76:	68fb      	ldr	r3, [r7, #12]
   2af78:	2b02      	cmp	r3, #2
   2af7a:	d01a      	beq.n	2afb2 <_write+0x52>
   2af7c:	68fb      	ldr	r3, [r7, #12]
   2af7e:	2b03      	cmp	r3, #3
   2af80:	d017      	beq.n	2afb2 <_write+0x52>
		return -1;
   2af82:	2301      	movs	r3, #1
   2af84:	425b      	negs	r3, r3
   2af86:	e018      	b.n	2afba <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2af88:	4b0e      	ldr	r3, [pc, #56]	; (2afc4 <_write+0x64>)
   2af8a:	681a      	ldr	r2, [r3, #0]
   2af8c:	4b0e      	ldr	r3, [pc, #56]	; (2afc8 <_write+0x68>)
   2af8e:	6818      	ldr	r0, [r3, #0]
   2af90:	68bb      	ldr	r3, [r7, #8]
   2af92:	1c59      	adds	r1, r3, #1
   2af94:	60b9      	str	r1, [r7, #8]
   2af96:	781b      	ldrb	r3, [r3, #0]
   2af98:	0019      	movs	r1, r3
   2af9a:	4790      	blx	r2
   2af9c:	1e03      	subs	r3, r0, #0
   2af9e:	da02      	bge.n	2afa6 <_write+0x46>
			return -1;
   2afa0:	2301      	movs	r3, #1
   2afa2:	425b      	negs	r3, r3
   2afa4:	e009      	b.n	2afba <_write+0x5a>
		}
		++nChars;
   2afa6:	697b      	ldr	r3, [r7, #20]
   2afa8:	3301      	adds	r3, #1
   2afaa:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2afac:	687b      	ldr	r3, [r7, #4]
   2afae:	3b01      	subs	r3, #1
   2afb0:	607b      	str	r3, [r7, #4]
   2afb2:	687b      	ldr	r3, [r7, #4]
   2afb4:	2b00      	cmp	r3, #0
   2afb6:	d1e7      	bne.n	2af88 <_write+0x28>
	}
	return nChars;
   2afb8:	697b      	ldr	r3, [r7, #20]
}
   2afba:	0018      	movs	r0, r3
   2afbc:	46bd      	mov	sp, r7
   2afbe:	b006      	add	sp, #24
   2afc0:	bd80      	pop	{r7, pc}
   2afc2:	46c0      	nop			; (mov r8, r8)
   2afc4:	20005c30 	.word	0x20005c30
   2afc8:	20005c34 	.word	0x20005c34

0002afcc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2afcc:	b580      	push	{r7, lr}
   2afce:	b084      	sub	sp, #16
   2afd0:	af00      	add	r7, sp, #0
   2afd2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2afd4:	4b0a      	ldr	r3, [pc, #40]	; (2b000 <_sbrk+0x34>)
   2afd6:	681b      	ldr	r3, [r3, #0]
   2afd8:	2b00      	cmp	r3, #0
   2afda:	d102      	bne.n	2afe2 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2afdc:	4b08      	ldr	r3, [pc, #32]	; (2b000 <_sbrk+0x34>)
   2afde:	4a09      	ldr	r2, [pc, #36]	; (2b004 <_sbrk+0x38>)
   2afe0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2afe2:	4b07      	ldr	r3, [pc, #28]	; (2b000 <_sbrk+0x34>)
   2afe4:	681b      	ldr	r3, [r3, #0]
   2afe6:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2afe8:	4b05      	ldr	r3, [pc, #20]	; (2b000 <_sbrk+0x34>)
   2afea:	681a      	ldr	r2, [r3, #0]
   2afec:	687b      	ldr	r3, [r7, #4]
   2afee:	18d2      	adds	r2, r2, r3
   2aff0:	4b03      	ldr	r3, [pc, #12]	; (2b000 <_sbrk+0x34>)
   2aff2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2aff4:	68fb      	ldr	r3, [r7, #12]
}
   2aff6:	0018      	movs	r0, r3
   2aff8:	46bd      	mov	sp, r7
   2affa:	b004      	add	sp, #16
   2affc:	bd80      	pop	{r7, pc}
   2affe:	46c0      	nop			; (mov r8, r8)
   2b000:	200042f0 	.word	0x200042f0
   2b004:	20007c90 	.word	0x20007c90

0002b008 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2b008:	b580      	push	{r7, lr}
   2b00a:	b082      	sub	sp, #8
   2b00c:	af00      	add	r7, sp, #0
   2b00e:	6078      	str	r0, [r7, #4]
	return -1;
   2b010:	2301      	movs	r3, #1
   2b012:	425b      	negs	r3, r3
}
   2b014:	0018      	movs	r0, r3
   2b016:	46bd      	mov	sp, r7
   2b018:	b002      	add	sp, #8
   2b01a:	bd80      	pop	{r7, pc}

0002b01c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2b01c:	b580      	push	{r7, lr}
   2b01e:	b082      	sub	sp, #8
   2b020:	af00      	add	r7, sp, #0
   2b022:	6078      	str	r0, [r7, #4]
   2b024:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2b026:	683b      	ldr	r3, [r7, #0]
   2b028:	2280      	movs	r2, #128	; 0x80
   2b02a:	0192      	lsls	r2, r2, #6
   2b02c:	605a      	str	r2, [r3, #4]

	return 0;
   2b02e:	2300      	movs	r3, #0
}
   2b030:	0018      	movs	r0, r3
   2b032:	46bd      	mov	sp, r7
   2b034:	b002      	add	sp, #8
   2b036:	bd80      	pop	{r7, pc}

0002b038 <_isatty>:

extern int _isatty(int file)
{
   2b038:	b580      	push	{r7, lr}
   2b03a:	b082      	sub	sp, #8
   2b03c:	af00      	add	r7, sp, #0
   2b03e:	6078      	str	r0, [r7, #4]
	return 1;
   2b040:	2301      	movs	r3, #1
}
   2b042:	0018      	movs	r0, r3
   2b044:	46bd      	mov	sp, r7
   2b046:	b002      	add	sp, #8
   2b048:	bd80      	pop	{r7, pc}

0002b04a <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2b04a:	b580      	push	{r7, lr}
   2b04c:	b084      	sub	sp, #16
   2b04e:	af00      	add	r7, sp, #0
   2b050:	60f8      	str	r0, [r7, #12]
   2b052:	60b9      	str	r1, [r7, #8]
   2b054:	607a      	str	r2, [r7, #4]
	return 0;
   2b056:	2300      	movs	r3, #0
}
   2b058:	0018      	movs	r0, r3
   2b05a:	46bd      	mov	sp, r7
   2b05c:	b004      	add	sp, #16
   2b05e:	bd80      	pop	{r7, pc}

0002b060 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2b060:	b580      	push	{r7, lr}
   2b062:	b082      	sub	sp, #8
   2b064:	af00      	add	r7, sp, #0
   2b066:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2b068:	687b      	ldr	r3, [r7, #4]
   2b06a:	2200      	movs	r2, #0
   2b06c:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2b06e:	687b      	ldr	r3, [r7, #4]
   2b070:	2200      	movs	r2, #0
   2b072:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2b074:	687b      	ldr	r3, [r7, #4]
   2b076:	2200      	movs	r2, #0
   2b078:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2b07a:	687b      	ldr	r3, [r7, #4]
   2b07c:	2200      	movs	r2, #0
   2b07e:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2b080:	687b      	ldr	r3, [r7, #4]
   2b082:	2201      	movs	r2, #1
   2b084:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2b086:	687b      	ldr	r3, [r7, #4]
   2b088:	2201      	movs	r2, #1
   2b08a:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2b08c:	687b      	ldr	r3, [r7, #4]
   2b08e:	22fa      	movs	r2, #250	; 0xfa
   2b090:	00d2      	lsls	r2, r2, #3
   2b092:	80da      	strh	r2, [r3, #6]
}
   2b094:	46c0      	nop			; (mov r8, r8)
   2b096:	46bd      	mov	sp, r7
   2b098:	b002      	add	sp, #8
   2b09a:	bd80      	pop	{r7, pc}

0002b09c <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2b09c:	b580      	push	{r7, lr}
   2b09e:	b086      	sub	sp, #24
   2b0a0:	af00      	add	r7, sp, #0
   2b0a2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2b0a4:	230c      	movs	r3, #12
   2b0a6:	18fb      	adds	r3, r7, r3
   2b0a8:	0018      	movs	r0, r3
   2b0aa:	4b23      	ldr	r3, [pc, #140]	; (2b138 <rtc_calendar_get_config_defaults+0x9c>)
   2b0ac:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2b0ae:	687b      	ldr	r3, [r7, #4]
   2b0b0:	22a0      	movs	r2, #160	; 0xa0
   2b0b2:	0112      	lsls	r2, r2, #4
   2b0b4:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2b0b6:	687b      	ldr	r3, [r7, #4]
   2b0b8:	2200      	movs	r2, #0
   2b0ba:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2b0bc:	687b      	ldr	r3, [r7, #4]
   2b0be:	2200      	movs	r2, #0
   2b0c0:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2b0c2:	687b      	ldr	r3, [r7, #4]
   2b0c4:	2200      	movs	r2, #0
   2b0c6:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2b0c8:	687b      	ldr	r3, [r7, #4]
   2b0ca:	22fa      	movs	r2, #250	; 0xfa
   2b0cc:	00d2      	lsls	r2, r2, #3
   2b0ce:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2b0d0:	2317      	movs	r3, #23
   2b0d2:	18fb      	adds	r3, r7, r3
   2b0d4:	2200      	movs	r2, #0
   2b0d6:	701a      	strb	r2, [r3, #0]
   2b0d8:	e025      	b.n	2b126 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2b0da:	2317      	movs	r3, #23
   2b0dc:	18fb      	adds	r3, r7, r3
   2b0de:	781a      	ldrb	r2, [r3, #0]
   2b0e0:	6879      	ldr	r1, [r7, #4]
   2b0e2:	2008      	movs	r0, #8
   2b0e4:	0013      	movs	r3, r2
   2b0e6:	009b      	lsls	r3, r3, #2
   2b0e8:	189b      	adds	r3, r3, r2
   2b0ea:	005b      	lsls	r3, r3, #1
   2b0ec:	18cb      	adds	r3, r1, r3
   2b0ee:	181a      	adds	r2, r3, r0
   2b0f0:	230c      	movs	r3, #12
   2b0f2:	18fb      	adds	r3, r7, r3
   2b0f4:	0010      	movs	r0, r2
   2b0f6:	0019      	movs	r1, r3
   2b0f8:	2308      	movs	r3, #8
   2b0fa:	001a      	movs	r2, r3
   2b0fc:	4b0f      	ldr	r3, [pc, #60]	; (2b13c <rtc_calendar_get_config_defaults+0xa0>)
   2b0fe:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2b100:	2317      	movs	r3, #23
   2b102:	18fb      	adds	r3, r7, r3
   2b104:	781a      	ldrb	r2, [r3, #0]
   2b106:	6879      	ldr	r1, [r7, #4]
   2b108:	0013      	movs	r3, r2
   2b10a:	009b      	lsls	r3, r3, #2
   2b10c:	189b      	adds	r3, r3, r2
   2b10e:	005b      	lsls	r3, r3, #1
   2b110:	18cb      	adds	r3, r1, r3
   2b112:	3310      	adds	r3, #16
   2b114:	2206      	movs	r2, #6
   2b116:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2b118:	2317      	movs	r3, #23
   2b11a:	18fb      	adds	r3, r7, r3
   2b11c:	781a      	ldrb	r2, [r3, #0]
   2b11e:	2317      	movs	r3, #23
   2b120:	18fb      	adds	r3, r7, r3
   2b122:	3201      	adds	r2, #1
   2b124:	701a      	strb	r2, [r3, #0]
   2b126:	2317      	movs	r3, #23
   2b128:	18fb      	adds	r3, r7, r3
   2b12a:	781b      	ldrb	r3, [r3, #0]
   2b12c:	2b00      	cmp	r3, #0
   2b12e:	d0d4      	beq.n	2b0da <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2b130:	46c0      	nop			; (mov r8, r8)
   2b132:	46bd      	mov	sp, r7
   2b134:	b006      	add	sp, #24
   2b136:	bd80      	pop	{r7, pc}
   2b138:	0002b061 	.word	0x0002b061
   2b13c:	0003484d 	.word	0x0003484d

0002b140 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2b140:	b580      	push	{r7, lr}
   2b142:	b088      	sub	sp, #32
   2b144:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2b146:	230c      	movs	r3, #12
   2b148:	18fb      	adds	r3, r7, r3
   2b14a:	0018      	movs	r0, r3
   2b14c:	4b1a      	ldr	r3, [pc, #104]	; (2b1b8 <configure_rtc_calendar+0x78>)
   2b14e:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2b150:	1d3b      	adds	r3, r7, #4
   2b152:	0018      	movs	r0, r3
   2b154:	4b19      	ldr	r3, [pc, #100]	; (2b1bc <configure_rtc_calendar+0x7c>)
   2b156:	4798      	blx	r3
	init_time.year   = 2014;
   2b158:	1d3b      	adds	r3, r7, #4
   2b15a:	4a19      	ldr	r2, [pc, #100]	; (2b1c0 <configure_rtc_calendar+0x80>)
   2b15c:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2b15e:	1d3b      	adds	r3, r7, #4
   2b160:	2201      	movs	r2, #1
   2b162:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2b164:	1d3b      	adds	r3, r7, #4
   2b166:	2201      	movs	r2, #1
   2b168:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2b16a:	1d3b      	adds	r3, r7, #4
   2b16c:	2200      	movs	r2, #0
   2b16e:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2b170:	1d3b      	adds	r3, r7, #4
   2b172:	2200      	movs	r2, #0
   2b174:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2b176:	1d3b      	adds	r3, r7, #4
   2b178:	2204      	movs	r2, #4
   2b17a:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2b17c:	230c      	movs	r3, #12
   2b17e:	18fb      	adds	r3, r7, r3
   2b180:	2201      	movs	r2, #1
   2b182:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2b184:	230c      	movs	r3, #12
   2b186:	18fb      	adds	r3, r7, r3
   2b188:	1d3a      	adds	r2, r7, #4
   2b18a:	3308      	adds	r3, #8
   2b18c:	ca03      	ldmia	r2!, {r0, r1}
   2b18e:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2b190:	230c      	movs	r3, #12
   2b192:	18fb      	adds	r3, r7, r3
   2b194:	2206      	movs	r2, #6
   2b196:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2b198:	230c      	movs	r3, #12
   2b19a:	18fa      	adds	r2, r7, r3
   2b19c:	4909      	ldr	r1, [pc, #36]	; (2b1c4 <configure_rtc_calendar+0x84>)
   2b19e:	4b0a      	ldr	r3, [pc, #40]	; (2b1c8 <configure_rtc_calendar+0x88>)
   2b1a0:	0018      	movs	r0, r3
   2b1a2:	4b0a      	ldr	r3, [pc, #40]	; (2b1cc <configure_rtc_calendar+0x8c>)
   2b1a4:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2b1a6:	4b08      	ldr	r3, [pc, #32]	; (2b1c8 <configure_rtc_calendar+0x88>)
   2b1a8:	0018      	movs	r0, r3
   2b1aa:	4b09      	ldr	r3, [pc, #36]	; (2b1d0 <configure_rtc_calendar+0x90>)
   2b1ac:	4798      	blx	r3
}
   2b1ae:	46c0      	nop			; (mov r8, r8)
   2b1b0:	46bd      	mov	sp, r7
   2b1b2:	b008      	add	sp, #32
   2b1b4:	bd80      	pop	{r7, pc}
   2b1b6:	46c0      	nop			; (mov r8, r8)
   2b1b8:	0002b09d 	.word	0x0002b09d
   2b1bc:	0002b061 	.word	0x0002b061
   2b1c0:	000007de 	.word	0x000007de
   2b1c4:	40001400 	.word	0x40001400
   2b1c8:	20005c38 	.word	0x20005c38
   2b1cc:	00026c7d 	.word	0x00026c7d
   2b1d0:	000269a9 	.word	0x000269a9

0002b1d4 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2b1d4:	b590      	push	{r4, r7, lr}
   2b1d6:	b085      	sub	sp, #20
   2b1d8:	af00      	add	r7, sp, #0
   2b1da:	0002      	movs	r2, r0
   2b1dc:	1dfb      	adds	r3, r7, #7
   2b1de:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2b1e0:	4b1a      	ldr	r3, [pc, #104]	; (2b24c <disk_initialize+0x78>)
   2b1e2:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2b1e4:	1dfb      	adds	r3, r7, #7
   2b1e6:	781b      	ldrb	r3, [r3, #0]
   2b1e8:	2b01      	cmp	r3, #1
   2b1ea:	d901      	bls.n	2b1f0 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2b1ec:	2301      	movs	r3, #1
   2b1ee:	e029      	b.n	2b244 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2b1f0:	2300      	movs	r3, #0
   2b1f2:	60fb      	str	r3, [r7, #12]
   2b1f4:	e010      	b.n	2b218 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2b1f6:	230b      	movs	r3, #11
   2b1f8:	18fc      	adds	r4, r7, r3
   2b1fa:	1dfb      	adds	r3, r7, #7
   2b1fc:	781b      	ldrb	r3, [r3, #0]
   2b1fe:	0018      	movs	r0, r3
   2b200:	4b13      	ldr	r3, [pc, #76]	; (2b250 <disk_initialize+0x7c>)
   2b202:	4798      	blx	r3
   2b204:	0003      	movs	r3, r0
   2b206:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2b208:	230b      	movs	r3, #11
   2b20a:	18fb      	adds	r3, r7, r3
   2b20c:	781b      	ldrb	r3, [r3, #0]
   2b20e:	2b03      	cmp	r3, #3
   2b210:	d106      	bne.n	2b220 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2b212:	68fb      	ldr	r3, [r7, #12]
   2b214:	3301      	adds	r3, #1
   2b216:	60fb      	str	r3, [r7, #12]
   2b218:	68fb      	ldr	r3, [r7, #12]
   2b21a:	2b01      	cmp	r3, #1
   2b21c:	ddeb      	ble.n	2b1f6 <disk_initialize+0x22>
   2b21e:	e000      	b.n	2b222 <disk_initialize+0x4e>
			break;
   2b220:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2b222:	230b      	movs	r3, #11
   2b224:	18fb      	adds	r3, r7, r3
   2b226:	781b      	ldrb	r3, [r3, #0]
   2b228:	2b00      	cmp	r3, #0
   2b22a:	d001      	beq.n	2b230 <disk_initialize+0x5c>
		return STA_NOINIT;
   2b22c:	2301      	movs	r3, #1
   2b22e:	e009      	b.n	2b244 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2b230:	1dfb      	adds	r3, r7, #7
   2b232:	781b      	ldrb	r3, [r3, #0]
   2b234:	0018      	movs	r0, r3
   2b236:	4b07      	ldr	r3, [pc, #28]	; (2b254 <disk_initialize+0x80>)
   2b238:	4798      	blx	r3
   2b23a:	1e03      	subs	r3, r0, #0
   2b23c:	d001      	beq.n	2b242 <disk_initialize+0x6e>
		return STA_PROTECT;
   2b23e:	2304      	movs	r3, #4
   2b240:	e000      	b.n	2b244 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2b242:	2300      	movs	r3, #0
}
   2b244:	0018      	movs	r0, r3
   2b246:	46bd      	mov	sp, r7
   2b248:	b005      	add	sp, #20
   2b24a:	bd90      	pop	{r4, r7, pc}
   2b24c:	0002b141 	.word	0x0002b141
   2b250:	00025ea5 	.word	0x00025ea5
   2b254:	00025f5d 	.word	0x00025f5d

0002b258 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2b258:	b580      	push	{r7, lr}
   2b25a:	b082      	sub	sp, #8
   2b25c:	af00      	add	r7, sp, #0
   2b25e:	0002      	movs	r2, r0
   2b260:	1dfb      	adds	r3, r7, #7
   2b262:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2b264:	1dfb      	adds	r3, r7, #7
   2b266:	781b      	ldrb	r3, [r3, #0]
   2b268:	0018      	movs	r0, r3
   2b26a:	4b08      	ldr	r3, [pc, #32]	; (2b28c <disk_status+0x34>)
   2b26c:	4798      	blx	r3
   2b26e:	1e03      	subs	r3, r0, #0
   2b270:	d002      	beq.n	2b278 <disk_status+0x20>
   2b272:	2b02      	cmp	r3, #2
   2b274:	d002      	beq.n	2b27c <disk_status+0x24>
   2b276:	e003      	b.n	2b280 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2b278:	2300      	movs	r3, #0
   2b27a:	e002      	b.n	2b282 <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2b27c:	2303      	movs	r3, #3
   2b27e:	e000      	b.n	2b282 <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2b280:	2301      	movs	r3, #1
	}
}
   2b282:	0018      	movs	r0, r3
   2b284:	46bd      	mov	sp, r7
   2b286:	b002      	add	sp, #8
   2b288:	bd80      	pop	{r7, pc}
   2b28a:	46c0      	nop			; (mov r8, r8)
   2b28c:	00025ea5 	.word	0x00025ea5

0002b290 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2b290:	b590      	push	{r4, r7, lr}
   2b292:	b089      	sub	sp, #36	; 0x24
   2b294:	af00      	add	r7, sp, #0
   2b296:	60b9      	str	r1, [r7, #8]
   2b298:	607a      	str	r2, [r7, #4]
   2b29a:	0019      	movs	r1, r3
   2b29c:	230f      	movs	r3, #15
   2b29e:	18fb      	adds	r3, r7, r3
   2b2a0:	1c02      	adds	r2, r0, #0
   2b2a2:	701a      	strb	r2, [r3, #0]
   2b2a4:	230e      	movs	r3, #14
   2b2a6:	18fb      	adds	r3, r7, r3
   2b2a8:	1c0a      	adds	r2, r1, #0
   2b2aa:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2b2ac:	231b      	movs	r3, #27
   2b2ae:	18fc      	adds	r4, r7, r3
   2b2b0:	230f      	movs	r3, #15
   2b2b2:	18fb      	adds	r3, r7, r3
   2b2b4:	781b      	ldrb	r3, [r3, #0]
   2b2b6:	0018      	movs	r0, r3
   2b2b8:	4b28      	ldr	r3, [pc, #160]	; (2b35c <disk_read+0xcc>)
   2b2ba:	4798      	blx	r3
   2b2bc:	0003      	movs	r3, r0
   2b2be:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2b2c0:	231b      	movs	r3, #27
   2b2c2:	18fb      	adds	r3, r7, r3
   2b2c4:	781b      	ldrb	r3, [r3, #0]
   2b2c6:	2b00      	cmp	r3, #0
   2b2c8:	d101      	bne.n	2b2ce <disk_read+0x3e>
		return RES_ERROR;
   2b2ca:	2301      	movs	r3, #1
   2b2cc:	e042      	b.n	2b354 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2b2ce:	2314      	movs	r3, #20
   2b2d0:	18fa      	adds	r2, r7, r3
   2b2d2:	230f      	movs	r3, #15
   2b2d4:	18fb      	adds	r3, r7, r3
   2b2d6:	781b      	ldrb	r3, [r3, #0]
   2b2d8:	0011      	movs	r1, r2
   2b2da:	0018      	movs	r0, r3
   2b2dc:	4b20      	ldr	r3, [pc, #128]	; (2b360 <disk_read+0xd0>)
   2b2de:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2b2e0:	230e      	movs	r3, #14
   2b2e2:	18fb      	adds	r3, r7, r3
   2b2e4:	781b      	ldrb	r3, [r3, #0]
   2b2e6:	221b      	movs	r2, #27
   2b2e8:	18ba      	adds	r2, r7, r2
   2b2ea:	7812      	ldrb	r2, [r2, #0]
   2b2ec:	4353      	muls	r3, r2
   2b2ee:	001a      	movs	r2, r3
   2b2f0:	687b      	ldr	r3, [r7, #4]
   2b2f2:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2b2f4:	697b      	ldr	r3, [r7, #20]
   2b2f6:	3301      	adds	r3, #1
   2b2f8:	211b      	movs	r1, #27
   2b2fa:	1879      	adds	r1, r7, r1
   2b2fc:	7809      	ldrb	r1, [r1, #0]
   2b2fe:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2b300:	429a      	cmp	r2, r3
   2b302:	d901      	bls.n	2b308 <disk_read+0x78>
		return RES_PARERR;
   2b304:	2304      	movs	r3, #4
   2b306:	e025      	b.n	2b354 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2b308:	2300      	movs	r3, #0
   2b30a:	61fb      	str	r3, [r7, #28]
   2b30c:	e01b      	b.n	2b346 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2b30e:	231b      	movs	r3, #27
   2b310:	18fb      	adds	r3, r7, r3
   2b312:	781b      	ldrb	r3, [r3, #0]
   2b314:	69fa      	ldr	r2, [r7, #28]
   2b316:	435a      	muls	r2, r3
   2b318:	687b      	ldr	r3, [r7, #4]
   2b31a:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2b31c:	231b      	movs	r3, #27
   2b31e:	18fb      	adds	r3, r7, r3
   2b320:	781b      	ldrb	r3, [r3, #0]
   2b322:	69fa      	ldr	r2, [r7, #28]
   2b324:	4353      	muls	r3, r2
   2b326:	025b      	lsls	r3, r3, #9
   2b328:	68ba      	ldr	r2, [r7, #8]
   2b32a:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2b32c:	230f      	movs	r3, #15
   2b32e:	18fb      	adds	r3, r7, r3
   2b330:	781b      	ldrb	r3, [r3, #0]
   2b332:	0018      	movs	r0, r3
   2b334:	4b0b      	ldr	r3, [pc, #44]	; (2b364 <disk_read+0xd4>)
   2b336:	4798      	blx	r3
   2b338:	1e03      	subs	r3, r0, #0
   2b33a:	d001      	beq.n	2b340 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2b33c:	2301      	movs	r3, #1
   2b33e:	e009      	b.n	2b354 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2b340:	69fb      	ldr	r3, [r7, #28]
   2b342:	3301      	adds	r3, #1
   2b344:	61fb      	str	r3, [r7, #28]
   2b346:	230e      	movs	r3, #14
   2b348:	18fb      	adds	r3, r7, r3
   2b34a:	781a      	ldrb	r2, [r3, #0]
   2b34c:	69fb      	ldr	r3, [r7, #28]
   2b34e:	429a      	cmp	r2, r3
   2b350:	d8dd      	bhi.n	2b30e <disk_read+0x7e>
		}
	}

	return RES_OK;
   2b352:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2b354:	0018      	movs	r0, r3
   2b356:	46bd      	mov	sp, r7
   2b358:	b009      	add	sp, #36	; 0x24
   2b35a:	bd90      	pop	{r4, r7, pc}
   2b35c:	00025f31 	.word	0x00025f31
   2b360:	00025ee5 	.word	0x00025ee5
   2b364:	00025fa5 	.word	0x00025fa5

0002b368 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2b368:	b590      	push	{r4, r7, lr}
   2b36a:	b089      	sub	sp, #36	; 0x24
   2b36c:	af00      	add	r7, sp, #0
   2b36e:	60b9      	str	r1, [r7, #8]
   2b370:	607a      	str	r2, [r7, #4]
   2b372:	0019      	movs	r1, r3
   2b374:	230f      	movs	r3, #15
   2b376:	18fb      	adds	r3, r7, r3
   2b378:	1c02      	adds	r2, r0, #0
   2b37a:	701a      	strb	r2, [r3, #0]
   2b37c:	230e      	movs	r3, #14
   2b37e:	18fb      	adds	r3, r7, r3
   2b380:	1c0a      	adds	r2, r1, #0
   2b382:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2b384:	231b      	movs	r3, #27
   2b386:	18fc      	adds	r4, r7, r3
   2b388:	230f      	movs	r3, #15
   2b38a:	18fb      	adds	r3, r7, r3
   2b38c:	781b      	ldrb	r3, [r3, #0]
   2b38e:	0018      	movs	r0, r3
   2b390:	4b28      	ldr	r3, [pc, #160]	; (2b434 <disk_write+0xcc>)
   2b392:	4798      	blx	r3
   2b394:	0003      	movs	r3, r0
   2b396:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2b398:	231b      	movs	r3, #27
   2b39a:	18fb      	adds	r3, r7, r3
   2b39c:	781b      	ldrb	r3, [r3, #0]
   2b39e:	2b00      	cmp	r3, #0
   2b3a0:	d101      	bne.n	2b3a6 <disk_write+0x3e>
		return RES_ERROR;
   2b3a2:	2301      	movs	r3, #1
   2b3a4:	e042      	b.n	2b42c <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2b3a6:	2314      	movs	r3, #20
   2b3a8:	18fa      	adds	r2, r7, r3
   2b3aa:	230f      	movs	r3, #15
   2b3ac:	18fb      	adds	r3, r7, r3
   2b3ae:	781b      	ldrb	r3, [r3, #0]
   2b3b0:	0011      	movs	r1, r2
   2b3b2:	0018      	movs	r0, r3
   2b3b4:	4b20      	ldr	r3, [pc, #128]	; (2b438 <disk_write+0xd0>)
   2b3b6:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2b3b8:	230e      	movs	r3, #14
   2b3ba:	18fb      	adds	r3, r7, r3
   2b3bc:	781b      	ldrb	r3, [r3, #0]
   2b3be:	221b      	movs	r2, #27
   2b3c0:	18ba      	adds	r2, r7, r2
   2b3c2:	7812      	ldrb	r2, [r2, #0]
   2b3c4:	4353      	muls	r3, r2
   2b3c6:	001a      	movs	r2, r3
   2b3c8:	687b      	ldr	r3, [r7, #4]
   2b3ca:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2b3cc:	697b      	ldr	r3, [r7, #20]
   2b3ce:	3301      	adds	r3, #1
   2b3d0:	211b      	movs	r1, #27
   2b3d2:	1879      	adds	r1, r7, r1
   2b3d4:	7809      	ldrb	r1, [r1, #0]
   2b3d6:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2b3d8:	429a      	cmp	r2, r3
   2b3da:	d901      	bls.n	2b3e0 <disk_write+0x78>
		return RES_PARERR;
   2b3dc:	2304      	movs	r3, #4
   2b3de:	e025      	b.n	2b42c <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2b3e0:	2300      	movs	r3, #0
   2b3e2:	61fb      	str	r3, [r7, #28]
   2b3e4:	e01b      	b.n	2b41e <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2b3e6:	231b      	movs	r3, #27
   2b3e8:	18fb      	adds	r3, r7, r3
   2b3ea:	781b      	ldrb	r3, [r3, #0]
   2b3ec:	69fa      	ldr	r2, [r7, #28]
   2b3ee:	435a      	muls	r2, r3
   2b3f0:	687b      	ldr	r3, [r7, #4]
   2b3f2:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2b3f4:	231b      	movs	r3, #27
   2b3f6:	18fb      	adds	r3, r7, r3
   2b3f8:	781b      	ldrb	r3, [r3, #0]
   2b3fa:	69fa      	ldr	r2, [r7, #28]
   2b3fc:	4353      	muls	r3, r2
   2b3fe:	025b      	lsls	r3, r3, #9
   2b400:	68ba      	ldr	r2, [r7, #8]
   2b402:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2b404:	230f      	movs	r3, #15
   2b406:	18fb      	adds	r3, r7, r3
   2b408:	781b      	ldrb	r3, [r3, #0]
   2b40a:	0018      	movs	r0, r3
   2b40c:	4b0b      	ldr	r3, [pc, #44]	; (2b43c <disk_write+0xd4>)
   2b40e:	4798      	blx	r3
   2b410:	1e03      	subs	r3, r0, #0
   2b412:	d001      	beq.n	2b418 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2b414:	2301      	movs	r3, #1
   2b416:	e009      	b.n	2b42c <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2b418:	69fb      	ldr	r3, [r7, #28]
   2b41a:	3301      	adds	r3, #1
   2b41c:	61fb      	str	r3, [r7, #28]
   2b41e:	230e      	movs	r3, #14
   2b420:	18fb      	adds	r3, r7, r3
   2b422:	781a      	ldrb	r2, [r3, #0]
   2b424:	69fb      	ldr	r3, [r7, #28]
   2b426:	429a      	cmp	r2, r3
   2b428:	d8dd      	bhi.n	2b3e6 <disk_write+0x7e>
		}
	}

	return RES_OK;
   2b42a:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2b42c:	0018      	movs	r0, r3
   2b42e:	46bd      	mov	sp, r7
   2b430:	b009      	add	sp, #36	; 0x24
   2b432:	bd90      	pop	{r4, r7, pc}
   2b434:	00025f31 	.word	0x00025f31
   2b438:	00025ee5 	.word	0x00025ee5
   2b43c:	00025ff9 	.word	0x00025ff9

0002b440 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2b440:	b590      	push	{r4, r7, lr}
   2b442:	b085      	sub	sp, #20
   2b444:	af00      	add	r7, sp, #0
   2b446:	603a      	str	r2, [r7, #0]
   2b448:	1dfb      	adds	r3, r7, #7
   2b44a:	1c02      	adds	r2, r0, #0
   2b44c:	701a      	strb	r2, [r3, #0]
   2b44e:	1dbb      	adds	r3, r7, #6
   2b450:	1c0a      	adds	r2, r1, #0
   2b452:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2b454:	230f      	movs	r3, #15
   2b456:	18fb      	adds	r3, r7, r3
   2b458:	2204      	movs	r2, #4
   2b45a:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2b45c:	1dbb      	adds	r3, r7, #6
   2b45e:	781b      	ldrb	r3, [r3, #0]
   2b460:	2b01      	cmp	r3, #1
   2b462:	d00f      	beq.n	2b484 <disk_ioctl+0x44>
   2b464:	dc02      	bgt.n	2b46c <disk_ioctl+0x2c>
   2b466:	2b00      	cmp	r3, #0
   2b468:	d044      	beq.n	2b4f4 <disk_ioctl+0xb4>
   2b46a:	e054      	b.n	2b516 <disk_ioctl+0xd6>
   2b46c:	2b02      	cmp	r3, #2
   2b46e:	d01a      	beq.n	2b4a6 <disk_ioctl+0x66>
   2b470:	2b03      	cmp	r3, #3
   2b472:	d150      	bne.n	2b516 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2b474:	683b      	ldr	r3, [r7, #0]
   2b476:	2201      	movs	r2, #1
   2b478:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2b47a:	230f      	movs	r3, #15
   2b47c:	18fb      	adds	r3, r7, r3
   2b47e:	2200      	movs	r2, #0
   2b480:	701a      	strb	r2, [r3, #0]
		break;
   2b482:	e04c      	b.n	2b51e <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2b484:	2308      	movs	r3, #8
   2b486:	18fa      	adds	r2, r7, r3
   2b488:	1dfb      	adds	r3, r7, #7
   2b48a:	781b      	ldrb	r3, [r3, #0]
   2b48c:	0011      	movs	r1, r2
   2b48e:	0018      	movs	r0, r3
   2b490:	4b26      	ldr	r3, [pc, #152]	; (2b52c <disk_ioctl+0xec>)
   2b492:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2b494:	68bb      	ldr	r3, [r7, #8]
   2b496:	1c5a      	adds	r2, r3, #1
   2b498:	683b      	ldr	r3, [r7, #0]
   2b49a:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2b49c:	230f      	movs	r3, #15
   2b49e:	18fb      	adds	r3, r7, r3
   2b4a0:	2200      	movs	r2, #0
   2b4a2:	701a      	strb	r2, [r3, #0]
	}
	break;
   2b4a4:	e03b      	b.n	2b51e <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2b4a6:	230e      	movs	r3, #14
   2b4a8:	18fc      	adds	r4, r7, r3
   2b4aa:	1dfb      	adds	r3, r7, #7
   2b4ac:	781b      	ldrb	r3, [r3, #0]
   2b4ae:	0018      	movs	r0, r3
   2b4b0:	4b1f      	ldr	r3, [pc, #124]	; (2b530 <disk_ioctl+0xf0>)
   2b4b2:	4798      	blx	r3
   2b4b4:	0003      	movs	r3, r0
   2b4b6:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2b4b8:	230e      	movs	r3, #14
   2b4ba:	18fb      	adds	r3, r7, r3
   2b4bc:	781b      	ldrb	r3, [r3, #0]
   2b4be:	2b01      	cmp	r3, #1
   2b4c0:	d010      	beq.n	2b4e4 <disk_ioctl+0xa4>
   2b4c2:	230e      	movs	r3, #14
   2b4c4:	18fb      	adds	r3, r7, r3
   2b4c6:	781b      	ldrb	r3, [r3, #0]
   2b4c8:	2b02      	cmp	r3, #2
   2b4ca:	d00b      	beq.n	2b4e4 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2b4cc:	230e      	movs	r3, #14
   2b4ce:	18fb      	adds	r3, r7, r3
   2b4d0:	781b      	ldrb	r3, [r3, #0]
   2b4d2:	2b04      	cmp	r3, #4
   2b4d4:	d006      	beq.n	2b4e4 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2b4d6:	230e      	movs	r3, #14
   2b4d8:	18fb      	adds	r3, r7, r3
   2b4da:	781b      	ldrb	r3, [r3, #0]
   2b4dc:	2b08      	cmp	r3, #8
   2b4de:	d001      	beq.n	2b4e4 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2b4e0:	2301      	movs	r3, #1
   2b4e2:	e01f      	b.n	2b524 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2b4e4:	683b      	ldr	r3, [r7, #0]
   2b4e6:	2200      	movs	r2, #0
   2b4e8:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2b4ea:	230f      	movs	r3, #15
   2b4ec:	18fb      	adds	r3, r7, r3
   2b4ee:	2200      	movs	r2, #0
   2b4f0:	701a      	strb	r2, [r3, #0]
	}
	break;
   2b4f2:	e014      	b.n	2b51e <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2b4f4:	1dfb      	adds	r3, r7, #7
   2b4f6:	781b      	ldrb	r3, [r3, #0]
   2b4f8:	0018      	movs	r0, r3
   2b4fa:	4b0e      	ldr	r3, [pc, #56]	; (2b534 <disk_ioctl+0xf4>)
   2b4fc:	4798      	blx	r3
   2b4fe:	1e03      	subs	r3, r0, #0
   2b500:	d104      	bne.n	2b50c <disk_ioctl+0xcc>
			res = RES_OK;
   2b502:	230f      	movs	r3, #15
   2b504:	18fb      	adds	r3, r7, r3
   2b506:	2200      	movs	r2, #0
   2b508:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2b50a:	e008      	b.n	2b51e <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2b50c:	230f      	movs	r3, #15
   2b50e:	18fb      	adds	r3, r7, r3
   2b510:	2203      	movs	r2, #3
   2b512:	701a      	strb	r2, [r3, #0]
		break;
   2b514:	e003      	b.n	2b51e <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2b516:	230f      	movs	r3, #15
   2b518:	18fb      	adds	r3, r7, r3
   2b51a:	2204      	movs	r2, #4
   2b51c:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2b51e:	230f      	movs	r3, #15
   2b520:	18fb      	adds	r3, r7, r3
   2b522:	781b      	ldrb	r3, [r3, #0]
}
   2b524:	0018      	movs	r0, r3
   2b526:	46bd      	mov	sp, r7
   2b528:	b005      	add	sp, #20
   2b52a:	bd90      	pop	{r4, r7, pc}
   2b52c:	00025ee5 	.word	0x00025ee5
   2b530:	00025f31 	.word	0x00025f31
   2b534:	00025ea5 	.word	0x00025ea5

0002b538 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2b538:	b580      	push	{r7, lr}
   2b53a:	b084      	sub	sp, #16
   2b53c:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2b53e:	1d3a      	adds	r2, r7, #4
   2b540:	4b12      	ldr	r3, [pc, #72]	; (2b58c <get_fattime+0x54>)
   2b542:	0011      	movs	r1, r2
   2b544:	0018      	movs	r0, r3
   2b546:	4b12      	ldr	r3, [pc, #72]	; (2b590 <get_fattime+0x58>)
   2b548:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2b54a:	1d3b      	adds	r3, r7, #4
   2b54c:	88db      	ldrh	r3, [r3, #6]
   2b54e:	4a11      	ldr	r2, [pc, #68]	; (2b594 <get_fattime+0x5c>)
   2b550:	4694      	mov	ip, r2
   2b552:	4463      	add	r3, ip
   2b554:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2b556:	1d3b      	adds	r3, r7, #4
   2b558:	795b      	ldrb	r3, [r3, #5]
   2b55a:	055b      	lsls	r3, r3, #21
   2b55c:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2b55e:	1d3b      	adds	r3, r7, #4
   2b560:	791b      	ldrb	r3, [r3, #4]
   2b562:	041b      	lsls	r3, r3, #16
   2b564:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2b566:	1d3b      	adds	r3, r7, #4
   2b568:	789b      	ldrb	r3, [r3, #2]
   2b56a:	02db      	lsls	r3, r3, #11
   2b56c:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2b56e:	1d3b      	adds	r3, r7, #4
   2b570:	785b      	ldrb	r3, [r3, #1]
   2b572:	015b      	lsls	r3, r3, #5
   2b574:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2b576:	1d3a      	adds	r2, r7, #4
   2b578:	7812      	ldrb	r2, [r2, #0]
   2b57a:	0852      	lsrs	r2, r2, #1
   2b57c:	b2d2      	uxtb	r2, r2
   2b57e:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2b580:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2b582:	68fb      	ldr	r3, [r7, #12]
}
   2b584:	0018      	movs	r0, r3
   2b586:	46bd      	mov	sp, r7
   2b588:	b004      	add	sp, #16
   2b58a:	bd80      	pop	{r7, pc}
   2b58c:	20005c38 	.word	0x20005c38
   2b590:	00026d11 	.word	0x00026d11
   2b594:	fffff844 	.word	0xfffff844

0002b598 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2b598:	b580      	push	{r7, lr}
   2b59a:	b086      	sub	sp, #24
   2b59c:	af00      	add	r7, sp, #0
   2b59e:	60f8      	str	r0, [r7, #12]
   2b5a0:	60b9      	str	r1, [r7, #8]
   2b5a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2b5a4:	68fb      	ldr	r3, [r7, #12]
   2b5a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2b5a8:	68bb      	ldr	r3, [r7, #8]
   2b5aa:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2b5ac:	e007      	b.n	2b5be <mem_cpy+0x26>
		*d++ = *s++;
   2b5ae:	697b      	ldr	r3, [r7, #20]
   2b5b0:	1c5a      	adds	r2, r3, #1
   2b5b2:	617a      	str	r2, [r7, #20]
   2b5b4:	693a      	ldr	r2, [r7, #16]
   2b5b6:	1c51      	adds	r1, r2, #1
   2b5b8:	6139      	str	r1, [r7, #16]
   2b5ba:	7812      	ldrb	r2, [r2, #0]
   2b5bc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2b5be:	687b      	ldr	r3, [r7, #4]
   2b5c0:	1e5a      	subs	r2, r3, #1
   2b5c2:	607a      	str	r2, [r7, #4]
   2b5c4:	2b00      	cmp	r3, #0
   2b5c6:	d1f2      	bne.n	2b5ae <mem_cpy+0x16>
}
   2b5c8:	46c0      	nop			; (mov r8, r8)
   2b5ca:	46bd      	mov	sp, r7
   2b5cc:	b006      	add	sp, #24
   2b5ce:	bd80      	pop	{r7, pc}

0002b5d0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2b5d0:	b580      	push	{r7, lr}
   2b5d2:	b086      	sub	sp, #24
   2b5d4:	af00      	add	r7, sp, #0
   2b5d6:	60f8      	str	r0, [r7, #12]
   2b5d8:	60b9      	str	r1, [r7, #8]
   2b5da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2b5dc:	68fb      	ldr	r3, [r7, #12]
   2b5de:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2b5e0:	e005      	b.n	2b5ee <mem_set+0x1e>
		*d++ = (BYTE)val;
   2b5e2:	697b      	ldr	r3, [r7, #20]
   2b5e4:	1c5a      	adds	r2, r3, #1
   2b5e6:	617a      	str	r2, [r7, #20]
   2b5e8:	68ba      	ldr	r2, [r7, #8]
   2b5ea:	b2d2      	uxtb	r2, r2
   2b5ec:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2b5ee:	687b      	ldr	r3, [r7, #4]
   2b5f0:	1e5a      	subs	r2, r3, #1
   2b5f2:	607a      	str	r2, [r7, #4]
   2b5f4:	2b00      	cmp	r3, #0
   2b5f6:	d1f4      	bne.n	2b5e2 <mem_set+0x12>
}
   2b5f8:	46c0      	nop			; (mov r8, r8)
   2b5fa:	46bd      	mov	sp, r7
   2b5fc:	b006      	add	sp, #24
   2b5fe:	bd80      	pop	{r7, pc}

0002b600 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2b600:	b580      	push	{r7, lr}
   2b602:	b088      	sub	sp, #32
   2b604:	af00      	add	r7, sp, #0
   2b606:	60f8      	str	r0, [r7, #12]
   2b608:	60b9      	str	r1, [r7, #8]
   2b60a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2b60c:	68fb      	ldr	r3, [r7, #12]
   2b60e:	61fb      	str	r3, [r7, #28]
   2b610:	68bb      	ldr	r3, [r7, #8]
   2b612:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2b614:	2300      	movs	r3, #0
   2b616:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2b618:	46c0      	nop			; (mov r8, r8)
   2b61a:	687b      	ldr	r3, [r7, #4]
   2b61c:	1e5a      	subs	r2, r3, #1
   2b61e:	607a      	str	r2, [r7, #4]
   2b620:	2b00      	cmp	r3, #0
   2b622:	d00d      	beq.n	2b640 <mem_cmp+0x40>
   2b624:	69fb      	ldr	r3, [r7, #28]
   2b626:	1c5a      	adds	r2, r3, #1
   2b628:	61fa      	str	r2, [r7, #28]
   2b62a:	781b      	ldrb	r3, [r3, #0]
   2b62c:	0019      	movs	r1, r3
   2b62e:	69bb      	ldr	r3, [r7, #24]
   2b630:	1c5a      	adds	r2, r3, #1
   2b632:	61ba      	str	r2, [r7, #24]
   2b634:	781b      	ldrb	r3, [r3, #0]
   2b636:	1acb      	subs	r3, r1, r3
   2b638:	617b      	str	r3, [r7, #20]
   2b63a:	697b      	ldr	r3, [r7, #20]
   2b63c:	2b00      	cmp	r3, #0
   2b63e:	d0ec      	beq.n	2b61a <mem_cmp+0x1a>
	return r;
   2b640:	697b      	ldr	r3, [r7, #20]
}
   2b642:	0018      	movs	r0, r3
   2b644:	46bd      	mov	sp, r7
   2b646:	b008      	add	sp, #32
   2b648:	bd80      	pop	{r7, pc}

0002b64a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2b64a:	b580      	push	{r7, lr}
   2b64c:	b082      	sub	sp, #8
   2b64e:	af00      	add	r7, sp, #0
   2b650:	6078      	str	r0, [r7, #4]
   2b652:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2b654:	e002      	b.n	2b65c <chk_chr+0x12>
   2b656:	687b      	ldr	r3, [r7, #4]
   2b658:	3301      	adds	r3, #1
   2b65a:	607b      	str	r3, [r7, #4]
   2b65c:	687b      	ldr	r3, [r7, #4]
   2b65e:	781b      	ldrb	r3, [r3, #0]
   2b660:	2b00      	cmp	r3, #0
   2b662:	d005      	beq.n	2b670 <chk_chr+0x26>
   2b664:	687b      	ldr	r3, [r7, #4]
   2b666:	781b      	ldrb	r3, [r3, #0]
   2b668:	001a      	movs	r2, r3
   2b66a:	683b      	ldr	r3, [r7, #0]
   2b66c:	429a      	cmp	r2, r3
   2b66e:	d1f2      	bne.n	2b656 <chk_chr+0xc>
	return *str;
   2b670:	687b      	ldr	r3, [r7, #4]
   2b672:	781b      	ldrb	r3, [r3, #0]
}
   2b674:	0018      	movs	r0, r3
   2b676:	46bd      	mov	sp, r7
   2b678:	b002      	add	sp, #8
   2b67a:	bd80      	pop	{r7, pc}

0002b67c <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2b67c:	b590      	push	{r4, r7, lr}
   2b67e:	b085      	sub	sp, #20
   2b680:	af00      	add	r7, sp, #0
   2b682:	6078      	str	r0, [r7, #4]
   2b684:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2b686:	687b      	ldr	r3, [r7, #4]
   2b688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2b68a:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2b68c:	68fa      	ldr	r2, [r7, #12]
   2b68e:	683b      	ldr	r3, [r7, #0]
   2b690:	429a      	cmp	r2, r3
   2b692:	d04e      	beq.n	2b732 <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2b694:	687b      	ldr	r3, [r7, #4]
   2b696:	791b      	ldrb	r3, [r3, #4]
   2b698:	2b00      	cmp	r3, #0
   2b69a:	d037      	beq.n	2b70c <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2b69c:	687b      	ldr	r3, [r7, #4]
   2b69e:	7858      	ldrb	r0, [r3, #1]
   2b6a0:	687b      	ldr	r3, [r7, #4]
   2b6a2:	3330      	adds	r3, #48	; 0x30
   2b6a4:	0019      	movs	r1, r3
   2b6a6:	68fa      	ldr	r2, [r7, #12]
   2b6a8:	2301      	movs	r3, #1
   2b6aa:	4c24      	ldr	r4, [pc, #144]	; (2b73c <move_window+0xc0>)
   2b6ac:	47a0      	blx	r4
   2b6ae:	1e03      	subs	r3, r0, #0
   2b6b0:	d001      	beq.n	2b6b6 <move_window+0x3a>
				return FR_DISK_ERR;
   2b6b2:	2301      	movs	r3, #1
   2b6b4:	e03e      	b.n	2b734 <move_window+0xb8>
			fs->wflag = 0;
   2b6b6:	687b      	ldr	r3, [r7, #4]
   2b6b8:	2200      	movs	r2, #0
   2b6ba:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2b6bc:	687b      	ldr	r3, [r7, #4]
   2b6be:	6a1a      	ldr	r2, [r3, #32]
   2b6c0:	687b      	ldr	r3, [r7, #4]
   2b6c2:	69db      	ldr	r3, [r3, #28]
   2b6c4:	18d2      	adds	r2, r2, r3
   2b6c6:	68fb      	ldr	r3, [r7, #12]
   2b6c8:	429a      	cmp	r2, r3
   2b6ca:	d91f      	bls.n	2b70c <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2b6cc:	230b      	movs	r3, #11
   2b6ce:	18fb      	adds	r3, r7, r3
   2b6d0:	687a      	ldr	r2, [r7, #4]
   2b6d2:	78d2      	ldrb	r2, [r2, #3]
   2b6d4:	701a      	strb	r2, [r3, #0]
   2b6d6:	e014      	b.n	2b702 <move_window+0x86>
					wsect += fs->fsize;
   2b6d8:	687b      	ldr	r3, [r7, #4]
   2b6da:	69db      	ldr	r3, [r3, #28]
   2b6dc:	68fa      	ldr	r2, [r7, #12]
   2b6de:	18d3      	adds	r3, r2, r3
   2b6e0:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2b6e2:	687b      	ldr	r3, [r7, #4]
   2b6e4:	7858      	ldrb	r0, [r3, #1]
   2b6e6:	687b      	ldr	r3, [r7, #4]
   2b6e8:	3330      	adds	r3, #48	; 0x30
   2b6ea:	0019      	movs	r1, r3
   2b6ec:	68fa      	ldr	r2, [r7, #12]
   2b6ee:	2301      	movs	r3, #1
   2b6f0:	4c12      	ldr	r4, [pc, #72]	; (2b73c <move_window+0xc0>)
   2b6f2:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2b6f4:	230b      	movs	r3, #11
   2b6f6:	18fb      	adds	r3, r7, r3
   2b6f8:	781a      	ldrb	r2, [r3, #0]
   2b6fa:	230b      	movs	r3, #11
   2b6fc:	18fb      	adds	r3, r7, r3
   2b6fe:	3a01      	subs	r2, #1
   2b700:	701a      	strb	r2, [r3, #0]
   2b702:	230b      	movs	r3, #11
   2b704:	18fb      	adds	r3, r7, r3
   2b706:	781b      	ldrb	r3, [r3, #0]
   2b708:	2b01      	cmp	r3, #1
   2b70a:	d8e5      	bhi.n	2b6d8 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2b70c:	683b      	ldr	r3, [r7, #0]
   2b70e:	2b00      	cmp	r3, #0
   2b710:	d00f      	beq.n	2b732 <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2b712:	687b      	ldr	r3, [r7, #4]
   2b714:	7858      	ldrb	r0, [r3, #1]
   2b716:	687b      	ldr	r3, [r7, #4]
   2b718:	3330      	adds	r3, #48	; 0x30
   2b71a:	0019      	movs	r1, r3
   2b71c:	683a      	ldr	r2, [r7, #0]
   2b71e:	2301      	movs	r3, #1
   2b720:	4c07      	ldr	r4, [pc, #28]	; (2b740 <move_window+0xc4>)
   2b722:	47a0      	blx	r4
   2b724:	1e03      	subs	r3, r0, #0
   2b726:	d001      	beq.n	2b72c <move_window+0xb0>
				return FR_DISK_ERR;
   2b728:	2301      	movs	r3, #1
   2b72a:	e003      	b.n	2b734 <move_window+0xb8>
			fs->winsect = sector;
   2b72c:	687b      	ldr	r3, [r7, #4]
   2b72e:	683a      	ldr	r2, [r7, #0]
   2b730:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2b732:	2300      	movs	r3, #0
}
   2b734:	0018      	movs	r0, r3
   2b736:	46bd      	mov	sp, r7
   2b738:	b005      	add	sp, #20
   2b73a:	bd90      	pop	{r4, r7, pc}
   2b73c:	0002b369 	.word	0x0002b369
   2b740:	0002b291 	.word	0x0002b291

0002b744 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2b744:	b590      	push	{r4, r7, lr}
   2b746:	b085      	sub	sp, #20
   2b748:	af00      	add	r7, sp, #0
   2b74a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2b74c:	230f      	movs	r3, #15
   2b74e:	18fc      	adds	r4, r7, r3
   2b750:	687b      	ldr	r3, [r7, #4]
   2b752:	2100      	movs	r1, #0
   2b754:	0018      	movs	r0, r3
   2b756:	4b52      	ldr	r3, [pc, #328]	; (2b8a0 <sync+0x15c>)
   2b758:	4798      	blx	r3
   2b75a:	0003      	movs	r3, r0
   2b75c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2b75e:	230f      	movs	r3, #15
   2b760:	18fb      	adds	r3, r7, r3
   2b762:	781b      	ldrb	r3, [r3, #0]
   2b764:	2b00      	cmp	r3, #0
   2b766:	d000      	beq.n	2b76a <sync+0x26>
   2b768:	e093      	b.n	2b892 <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2b76a:	687b      	ldr	r3, [r7, #4]
   2b76c:	781b      	ldrb	r3, [r3, #0]
   2b76e:	2b03      	cmp	r3, #3
   2b770:	d000      	beq.n	2b774 <sync+0x30>
   2b772:	e081      	b.n	2b878 <sync+0x134>
   2b774:	687b      	ldr	r3, [r7, #4]
   2b776:	795b      	ldrb	r3, [r3, #5]
   2b778:	2b00      	cmp	r3, #0
   2b77a:	d07d      	beq.n	2b878 <sync+0x134>
			fs->winsect = 0;
   2b77c:	687b      	ldr	r3, [r7, #4]
   2b77e:	2200      	movs	r2, #0
   2b780:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2b782:	687b      	ldr	r3, [r7, #4]
   2b784:	3330      	adds	r3, #48	; 0x30
   2b786:	0018      	movs	r0, r3
   2b788:	2380      	movs	r3, #128	; 0x80
   2b78a:	009b      	lsls	r3, r3, #2
   2b78c:	001a      	movs	r2, r3
   2b78e:	2100      	movs	r1, #0
   2b790:	4b44      	ldr	r3, [pc, #272]	; (2b8a4 <sync+0x160>)
   2b792:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2b794:	687b      	ldr	r3, [r7, #4]
   2b796:	4a44      	ldr	r2, [pc, #272]	; (2b8a8 <sync+0x164>)
   2b798:	2155      	movs	r1, #85	; 0x55
   2b79a:	5499      	strb	r1, [r3, r2]
   2b79c:	687b      	ldr	r3, [r7, #4]
   2b79e:	4a43      	ldr	r2, [pc, #268]	; (2b8ac <sync+0x168>)
   2b7a0:	21aa      	movs	r1, #170	; 0xaa
   2b7a2:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2b7a4:	687b      	ldr	r3, [r7, #4]
   2b7a6:	2230      	movs	r2, #48	; 0x30
   2b7a8:	2152      	movs	r1, #82	; 0x52
   2b7aa:	5499      	strb	r1, [r3, r2]
   2b7ac:	687b      	ldr	r3, [r7, #4]
   2b7ae:	2231      	movs	r2, #49	; 0x31
   2b7b0:	2152      	movs	r1, #82	; 0x52
   2b7b2:	5499      	strb	r1, [r3, r2]
   2b7b4:	687b      	ldr	r3, [r7, #4]
   2b7b6:	2232      	movs	r2, #50	; 0x32
   2b7b8:	2161      	movs	r1, #97	; 0x61
   2b7ba:	5499      	strb	r1, [r3, r2]
   2b7bc:	687b      	ldr	r3, [r7, #4]
   2b7be:	2233      	movs	r2, #51	; 0x33
   2b7c0:	2141      	movs	r1, #65	; 0x41
   2b7c2:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2b7c4:	687a      	ldr	r2, [r7, #4]
   2b7c6:	2385      	movs	r3, #133	; 0x85
   2b7c8:	009b      	lsls	r3, r3, #2
   2b7ca:	2172      	movs	r1, #114	; 0x72
   2b7cc:	54d1      	strb	r1, [r2, r3]
   2b7ce:	687b      	ldr	r3, [r7, #4]
   2b7d0:	4a37      	ldr	r2, [pc, #220]	; (2b8b0 <sync+0x16c>)
   2b7d2:	2172      	movs	r1, #114	; 0x72
   2b7d4:	5499      	strb	r1, [r3, r2]
   2b7d6:	687b      	ldr	r3, [r7, #4]
   2b7d8:	4a36      	ldr	r2, [pc, #216]	; (2b8b4 <sync+0x170>)
   2b7da:	2141      	movs	r1, #65	; 0x41
   2b7dc:	5499      	strb	r1, [r3, r2]
   2b7de:	687b      	ldr	r3, [r7, #4]
   2b7e0:	4a35      	ldr	r2, [pc, #212]	; (2b8b8 <sync+0x174>)
   2b7e2:	2161      	movs	r1, #97	; 0x61
   2b7e4:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2b7e6:	687b      	ldr	r3, [r7, #4]
   2b7e8:	691b      	ldr	r3, [r3, #16]
   2b7ea:	b2d9      	uxtb	r1, r3
   2b7ec:	687a      	ldr	r2, [r7, #4]
   2b7ee:	2386      	movs	r3, #134	; 0x86
   2b7f0:	009b      	lsls	r3, r3, #2
   2b7f2:	54d1      	strb	r1, [r2, r3]
   2b7f4:	687b      	ldr	r3, [r7, #4]
   2b7f6:	691b      	ldr	r3, [r3, #16]
   2b7f8:	b29b      	uxth	r3, r3
   2b7fa:	0a1b      	lsrs	r3, r3, #8
   2b7fc:	b29b      	uxth	r3, r3
   2b7fe:	b2d9      	uxtb	r1, r3
   2b800:	687b      	ldr	r3, [r7, #4]
   2b802:	4a2e      	ldr	r2, [pc, #184]	; (2b8bc <sync+0x178>)
   2b804:	5499      	strb	r1, [r3, r2]
   2b806:	687b      	ldr	r3, [r7, #4]
   2b808:	691b      	ldr	r3, [r3, #16]
   2b80a:	0c1b      	lsrs	r3, r3, #16
   2b80c:	b2d9      	uxtb	r1, r3
   2b80e:	687b      	ldr	r3, [r7, #4]
   2b810:	4a2b      	ldr	r2, [pc, #172]	; (2b8c0 <sync+0x17c>)
   2b812:	5499      	strb	r1, [r3, r2]
   2b814:	687b      	ldr	r3, [r7, #4]
   2b816:	691b      	ldr	r3, [r3, #16]
   2b818:	0e1b      	lsrs	r3, r3, #24
   2b81a:	b2d9      	uxtb	r1, r3
   2b81c:	687b      	ldr	r3, [r7, #4]
   2b81e:	4a29      	ldr	r2, [pc, #164]	; (2b8c4 <sync+0x180>)
   2b820:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2b822:	687b      	ldr	r3, [r7, #4]
   2b824:	68db      	ldr	r3, [r3, #12]
   2b826:	b2d9      	uxtb	r1, r3
   2b828:	687a      	ldr	r2, [r7, #4]
   2b82a:	2387      	movs	r3, #135	; 0x87
   2b82c:	009b      	lsls	r3, r3, #2
   2b82e:	54d1      	strb	r1, [r2, r3]
   2b830:	687b      	ldr	r3, [r7, #4]
   2b832:	68db      	ldr	r3, [r3, #12]
   2b834:	b29b      	uxth	r3, r3
   2b836:	0a1b      	lsrs	r3, r3, #8
   2b838:	b29b      	uxth	r3, r3
   2b83a:	b2d9      	uxtb	r1, r3
   2b83c:	687b      	ldr	r3, [r7, #4]
   2b83e:	4a22      	ldr	r2, [pc, #136]	; (2b8c8 <sync+0x184>)
   2b840:	5499      	strb	r1, [r3, r2]
   2b842:	687b      	ldr	r3, [r7, #4]
   2b844:	68db      	ldr	r3, [r3, #12]
   2b846:	0c1b      	lsrs	r3, r3, #16
   2b848:	b2d9      	uxtb	r1, r3
   2b84a:	687b      	ldr	r3, [r7, #4]
   2b84c:	4a1f      	ldr	r2, [pc, #124]	; (2b8cc <sync+0x188>)
   2b84e:	5499      	strb	r1, [r3, r2]
   2b850:	687b      	ldr	r3, [r7, #4]
   2b852:	68db      	ldr	r3, [r3, #12]
   2b854:	0e1b      	lsrs	r3, r3, #24
   2b856:	b2d9      	uxtb	r1, r3
   2b858:	687b      	ldr	r3, [r7, #4]
   2b85a:	4a1d      	ldr	r2, [pc, #116]	; (2b8d0 <sync+0x18c>)
   2b85c:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2b85e:	687b      	ldr	r3, [r7, #4]
   2b860:	7858      	ldrb	r0, [r3, #1]
   2b862:	687b      	ldr	r3, [r7, #4]
   2b864:	3330      	adds	r3, #48	; 0x30
   2b866:	0019      	movs	r1, r3
   2b868:	687b      	ldr	r3, [r7, #4]
   2b86a:	695a      	ldr	r2, [r3, #20]
   2b86c:	2301      	movs	r3, #1
   2b86e:	4c19      	ldr	r4, [pc, #100]	; (2b8d4 <sync+0x190>)
   2b870:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2b872:	687b      	ldr	r3, [r7, #4]
   2b874:	2200      	movs	r2, #0
   2b876:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2b878:	687b      	ldr	r3, [r7, #4]
   2b87a:	785b      	ldrb	r3, [r3, #1]
   2b87c:	2200      	movs	r2, #0
   2b87e:	2100      	movs	r1, #0
   2b880:	0018      	movs	r0, r3
   2b882:	4b15      	ldr	r3, [pc, #84]	; (2b8d8 <sync+0x194>)
   2b884:	4798      	blx	r3
   2b886:	1e03      	subs	r3, r0, #0
   2b888:	d003      	beq.n	2b892 <sync+0x14e>
			res = FR_DISK_ERR;
   2b88a:	230f      	movs	r3, #15
   2b88c:	18fb      	adds	r3, r7, r3
   2b88e:	2201      	movs	r2, #1
   2b890:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2b892:	230f      	movs	r3, #15
   2b894:	18fb      	adds	r3, r7, r3
   2b896:	781b      	ldrb	r3, [r3, #0]
}
   2b898:	0018      	movs	r0, r3
   2b89a:	46bd      	mov	sp, r7
   2b89c:	b005      	add	sp, #20
   2b89e:	bd90      	pop	{r4, r7, pc}
   2b8a0:	0002b67d 	.word	0x0002b67d
   2b8a4:	0002b5d1 	.word	0x0002b5d1
   2b8a8:	0000022e 	.word	0x0000022e
   2b8ac:	0000022f 	.word	0x0000022f
   2b8b0:	00000215 	.word	0x00000215
   2b8b4:	00000216 	.word	0x00000216
   2b8b8:	00000217 	.word	0x00000217
   2b8bc:	00000219 	.word	0x00000219
   2b8c0:	0000021a 	.word	0x0000021a
   2b8c4:	0000021b 	.word	0x0000021b
   2b8c8:	0000021d 	.word	0x0000021d
   2b8cc:	0000021e 	.word	0x0000021e
   2b8d0:	0000021f 	.word	0x0000021f
   2b8d4:	0002b369 	.word	0x0002b369
   2b8d8:	0002b441 	.word	0x0002b441

0002b8dc <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2b8dc:	b580      	push	{r7, lr}
   2b8de:	b082      	sub	sp, #8
   2b8e0:	af00      	add	r7, sp, #0
   2b8e2:	6078      	str	r0, [r7, #4]
   2b8e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2b8e6:	683b      	ldr	r3, [r7, #0]
   2b8e8:	3b02      	subs	r3, #2
   2b8ea:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2b8ec:	687b      	ldr	r3, [r7, #4]
   2b8ee:	699b      	ldr	r3, [r3, #24]
   2b8f0:	1e9a      	subs	r2, r3, #2
   2b8f2:	683b      	ldr	r3, [r7, #0]
   2b8f4:	429a      	cmp	r2, r3
   2b8f6:	d801      	bhi.n	2b8fc <clust2sect+0x20>
   2b8f8:	2300      	movs	r3, #0
   2b8fa:	e007      	b.n	2b90c <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2b8fc:	687b      	ldr	r3, [r7, #4]
   2b8fe:	789b      	ldrb	r3, [r3, #2]
   2b900:	001a      	movs	r2, r3
   2b902:	683b      	ldr	r3, [r7, #0]
   2b904:	435a      	muls	r2, r3
   2b906:	687b      	ldr	r3, [r7, #4]
   2b908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b90a:	18d3      	adds	r3, r2, r3
}
   2b90c:	0018      	movs	r0, r3
   2b90e:	46bd      	mov	sp, r7
   2b910:	b002      	add	sp, #8
   2b912:	bd80      	pop	{r7, pc}

0002b914 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2b914:	b580      	push	{r7, lr}
   2b916:	b086      	sub	sp, #24
   2b918:	af00      	add	r7, sp, #0
   2b91a:	6078      	str	r0, [r7, #4]
   2b91c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2b91e:	683b      	ldr	r3, [r7, #0]
   2b920:	2b01      	cmp	r3, #1
   2b922:	d904      	bls.n	2b92e <get_fat+0x1a>
   2b924:	687b      	ldr	r3, [r7, #4]
   2b926:	699a      	ldr	r2, [r3, #24]
   2b928:	683b      	ldr	r3, [r7, #0]
   2b92a:	429a      	cmp	r2, r3
   2b92c:	d801      	bhi.n	2b932 <get_fat+0x1e>
		return 1;
   2b92e:	2301      	movs	r3, #1
   2b930:	e09f      	b.n	2ba72 <get_fat+0x15e>

	switch (fs->fs_type) {
   2b932:	687b      	ldr	r3, [r7, #4]
   2b934:	781b      	ldrb	r3, [r3, #0]
   2b936:	2b02      	cmp	r3, #2
   2b938:	d048      	beq.n	2b9cc <get_fat+0xb8>
   2b93a:	2b03      	cmp	r3, #3
   2b93c:	d067      	beq.n	2ba0e <get_fat+0xfa>
   2b93e:	2b01      	cmp	r3, #1
   2b940:	d000      	beq.n	2b944 <get_fat+0x30>
   2b942:	e094      	b.n	2ba6e <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2b944:	683b      	ldr	r3, [r7, #0]
   2b946:	617b      	str	r3, [r7, #20]
   2b948:	697b      	ldr	r3, [r7, #20]
   2b94a:	085b      	lsrs	r3, r3, #1
   2b94c:	697a      	ldr	r2, [r7, #20]
   2b94e:	18d3      	adds	r3, r2, r3
   2b950:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b952:	687b      	ldr	r3, [r7, #4]
   2b954:	6a1a      	ldr	r2, [r3, #32]
   2b956:	697b      	ldr	r3, [r7, #20]
   2b958:	0a5b      	lsrs	r3, r3, #9
   2b95a:	18d2      	adds	r2, r2, r3
   2b95c:	687b      	ldr	r3, [r7, #4]
   2b95e:	0011      	movs	r1, r2
   2b960:	0018      	movs	r0, r3
   2b962:	4b46      	ldr	r3, [pc, #280]	; (2ba7c <get_fat+0x168>)
   2b964:	4798      	blx	r3
   2b966:	1e03      	subs	r3, r0, #0
   2b968:	d000      	beq.n	2b96c <get_fat+0x58>
   2b96a:	e079      	b.n	2ba60 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2b96c:	697b      	ldr	r3, [r7, #20]
   2b96e:	05db      	lsls	r3, r3, #23
   2b970:	0ddb      	lsrs	r3, r3, #23
   2b972:	687a      	ldr	r2, [r7, #4]
   2b974:	2130      	movs	r1, #48	; 0x30
   2b976:	18d3      	adds	r3, r2, r3
   2b978:	185b      	adds	r3, r3, r1
   2b97a:	781b      	ldrb	r3, [r3, #0]
   2b97c:	613b      	str	r3, [r7, #16]
   2b97e:	697b      	ldr	r3, [r7, #20]
   2b980:	3301      	adds	r3, #1
   2b982:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b984:	687b      	ldr	r3, [r7, #4]
   2b986:	6a1a      	ldr	r2, [r3, #32]
   2b988:	697b      	ldr	r3, [r7, #20]
   2b98a:	0a5b      	lsrs	r3, r3, #9
   2b98c:	18d2      	adds	r2, r2, r3
   2b98e:	687b      	ldr	r3, [r7, #4]
   2b990:	0011      	movs	r1, r2
   2b992:	0018      	movs	r0, r3
   2b994:	4b39      	ldr	r3, [pc, #228]	; (2ba7c <get_fat+0x168>)
   2b996:	4798      	blx	r3
   2b998:	1e03      	subs	r3, r0, #0
   2b99a:	d163      	bne.n	2ba64 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2b99c:	697b      	ldr	r3, [r7, #20]
   2b99e:	05db      	lsls	r3, r3, #23
   2b9a0:	0ddb      	lsrs	r3, r3, #23
   2b9a2:	687a      	ldr	r2, [r7, #4]
   2b9a4:	2130      	movs	r1, #48	; 0x30
   2b9a6:	18d3      	adds	r3, r2, r3
   2b9a8:	185b      	adds	r3, r3, r1
   2b9aa:	781b      	ldrb	r3, [r3, #0]
   2b9ac:	021b      	lsls	r3, r3, #8
   2b9ae:	001a      	movs	r2, r3
   2b9b0:	693b      	ldr	r3, [r7, #16]
   2b9b2:	4313      	orrs	r3, r2
   2b9b4:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2b9b6:	683b      	ldr	r3, [r7, #0]
   2b9b8:	2201      	movs	r2, #1
   2b9ba:	4013      	ands	r3, r2
   2b9bc:	d002      	beq.n	2b9c4 <get_fat+0xb0>
   2b9be:	693b      	ldr	r3, [r7, #16]
   2b9c0:	091b      	lsrs	r3, r3, #4
   2b9c2:	e056      	b.n	2ba72 <get_fat+0x15e>
   2b9c4:	693b      	ldr	r3, [r7, #16]
   2b9c6:	051b      	lsls	r3, r3, #20
   2b9c8:	0d1b      	lsrs	r3, r3, #20
   2b9ca:	e052      	b.n	2ba72 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2b9cc:	687b      	ldr	r3, [r7, #4]
   2b9ce:	6a1a      	ldr	r2, [r3, #32]
   2b9d0:	683b      	ldr	r3, [r7, #0]
   2b9d2:	0a1b      	lsrs	r3, r3, #8
   2b9d4:	18d2      	adds	r2, r2, r3
   2b9d6:	687b      	ldr	r3, [r7, #4]
   2b9d8:	0011      	movs	r1, r2
   2b9da:	0018      	movs	r0, r3
   2b9dc:	4b27      	ldr	r3, [pc, #156]	; (2ba7c <get_fat+0x168>)
   2b9de:	4798      	blx	r3
   2b9e0:	1e03      	subs	r3, r0, #0
   2b9e2:	d141      	bne.n	2ba68 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2b9e4:	683b      	ldr	r3, [r7, #0]
   2b9e6:	005a      	lsls	r2, r3, #1
   2b9e8:	23ff      	movs	r3, #255	; 0xff
   2b9ea:	005b      	lsls	r3, r3, #1
   2b9ec:	4013      	ands	r3, r2
   2b9ee:	3330      	adds	r3, #48	; 0x30
   2b9f0:	687a      	ldr	r2, [r7, #4]
   2b9f2:	18d3      	adds	r3, r2, r3
   2b9f4:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2b9f6:	68fb      	ldr	r3, [r7, #12]
   2b9f8:	3301      	adds	r3, #1
   2b9fa:	781b      	ldrb	r3, [r3, #0]
   2b9fc:	021b      	lsls	r3, r3, #8
   2b9fe:	b21a      	sxth	r2, r3
   2ba00:	68fb      	ldr	r3, [r7, #12]
   2ba02:	781b      	ldrb	r3, [r3, #0]
   2ba04:	b21b      	sxth	r3, r3
   2ba06:	4313      	orrs	r3, r2
   2ba08:	b21b      	sxth	r3, r3
   2ba0a:	b29b      	uxth	r3, r3
   2ba0c:	e031      	b.n	2ba72 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2ba0e:	687b      	ldr	r3, [r7, #4]
   2ba10:	6a1a      	ldr	r2, [r3, #32]
   2ba12:	683b      	ldr	r3, [r7, #0]
   2ba14:	09db      	lsrs	r3, r3, #7
   2ba16:	18d2      	adds	r2, r2, r3
   2ba18:	687b      	ldr	r3, [r7, #4]
   2ba1a:	0011      	movs	r1, r2
   2ba1c:	0018      	movs	r0, r3
   2ba1e:	4b17      	ldr	r3, [pc, #92]	; (2ba7c <get_fat+0x168>)
   2ba20:	4798      	blx	r3
   2ba22:	1e03      	subs	r3, r0, #0
   2ba24:	d122      	bne.n	2ba6c <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2ba26:	683b      	ldr	r3, [r7, #0]
   2ba28:	009a      	lsls	r2, r3, #2
   2ba2a:	23fe      	movs	r3, #254	; 0xfe
   2ba2c:	005b      	lsls	r3, r3, #1
   2ba2e:	4013      	ands	r3, r2
   2ba30:	3330      	adds	r3, #48	; 0x30
   2ba32:	687a      	ldr	r2, [r7, #4]
   2ba34:	18d3      	adds	r3, r2, r3
   2ba36:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2ba38:	68fb      	ldr	r3, [r7, #12]
   2ba3a:	3303      	adds	r3, #3
   2ba3c:	781b      	ldrb	r3, [r3, #0]
   2ba3e:	061a      	lsls	r2, r3, #24
   2ba40:	68fb      	ldr	r3, [r7, #12]
   2ba42:	3302      	adds	r3, #2
   2ba44:	781b      	ldrb	r3, [r3, #0]
   2ba46:	041b      	lsls	r3, r3, #16
   2ba48:	4313      	orrs	r3, r2
   2ba4a:	68fa      	ldr	r2, [r7, #12]
   2ba4c:	3201      	adds	r2, #1
   2ba4e:	7812      	ldrb	r2, [r2, #0]
   2ba50:	0212      	lsls	r2, r2, #8
   2ba52:	4313      	orrs	r3, r2
   2ba54:	68fa      	ldr	r2, [r7, #12]
   2ba56:	7812      	ldrb	r2, [r2, #0]
   2ba58:	4313      	orrs	r3, r2
   2ba5a:	011b      	lsls	r3, r3, #4
   2ba5c:	091b      	lsrs	r3, r3, #4
   2ba5e:	e008      	b.n	2ba72 <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2ba60:	46c0      	nop			; (mov r8, r8)
   2ba62:	e004      	b.n	2ba6e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2ba64:	46c0      	nop			; (mov r8, r8)
   2ba66:	e002      	b.n	2ba6e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2ba68:	46c0      	nop			; (mov r8, r8)
   2ba6a:	e000      	b.n	2ba6e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2ba6c:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2ba6e:	2301      	movs	r3, #1
   2ba70:	425b      	negs	r3, r3
}
   2ba72:	0018      	movs	r0, r3
   2ba74:	46bd      	mov	sp, r7
   2ba76:	b006      	add	sp, #24
   2ba78:	bd80      	pop	{r7, pc}
   2ba7a:	46c0      	nop			; (mov r8, r8)
   2ba7c:	0002b67d 	.word	0x0002b67d

0002ba80 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2ba80:	b590      	push	{r4, r7, lr}
   2ba82:	b089      	sub	sp, #36	; 0x24
   2ba84:	af00      	add	r7, sp, #0
   2ba86:	60f8      	str	r0, [r7, #12]
   2ba88:	60b9      	str	r1, [r7, #8]
   2ba8a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2ba8c:	68bb      	ldr	r3, [r7, #8]
   2ba8e:	2b01      	cmp	r3, #1
   2ba90:	d904      	bls.n	2ba9c <put_fat+0x1c>
   2ba92:	68fb      	ldr	r3, [r7, #12]
   2ba94:	699a      	ldr	r2, [r3, #24]
   2ba96:	68bb      	ldr	r3, [r7, #8]
   2ba98:	429a      	cmp	r2, r3
   2ba9a:	d804      	bhi.n	2baa6 <put_fat+0x26>
		res = FR_INT_ERR;
   2ba9c:	231f      	movs	r3, #31
   2ba9e:	18fb      	adds	r3, r7, r3
   2baa0:	2202      	movs	r2, #2
   2baa2:	701a      	strb	r2, [r3, #0]
   2baa4:	e100      	b.n	2bca8 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2baa6:	68fb      	ldr	r3, [r7, #12]
   2baa8:	781b      	ldrb	r3, [r3, #0]
   2baaa:	2b02      	cmp	r3, #2
   2baac:	d100      	bne.n	2bab0 <put_fat+0x30>
   2baae:	e078      	b.n	2bba2 <put_fat+0x122>
   2bab0:	2b03      	cmp	r3, #3
   2bab2:	d100      	bne.n	2bab6 <put_fat+0x36>
   2bab4:	e09e      	b.n	2bbf4 <put_fat+0x174>
   2bab6:	2b01      	cmp	r3, #1
   2bab8:	d000      	beq.n	2babc <put_fat+0x3c>
   2baba:	e0e6      	b.n	2bc8a <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2babc:	68bb      	ldr	r3, [r7, #8]
   2babe:	61bb      	str	r3, [r7, #24]
   2bac0:	69bb      	ldr	r3, [r7, #24]
   2bac2:	085b      	lsrs	r3, r3, #1
   2bac4:	69ba      	ldr	r2, [r7, #24]
   2bac6:	18d3      	adds	r3, r2, r3
   2bac8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2baca:	68fb      	ldr	r3, [r7, #12]
   2bacc:	6a1a      	ldr	r2, [r3, #32]
   2bace:	69bb      	ldr	r3, [r7, #24]
   2bad0:	0a5b      	lsrs	r3, r3, #9
   2bad2:	18d2      	adds	r2, r2, r3
   2bad4:	231f      	movs	r3, #31
   2bad6:	18fc      	adds	r4, r7, r3
   2bad8:	68fb      	ldr	r3, [r7, #12]
   2bada:	0011      	movs	r1, r2
   2badc:	0018      	movs	r0, r3
   2bade:	4b76      	ldr	r3, [pc, #472]	; (2bcb8 <put_fat+0x238>)
   2bae0:	4798      	blx	r3
   2bae2:	0003      	movs	r3, r0
   2bae4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bae6:	231f      	movs	r3, #31
   2bae8:	18fb      	adds	r3, r7, r3
   2baea:	781b      	ldrb	r3, [r3, #0]
   2baec:	2b00      	cmp	r3, #0
   2baee:	d000      	beq.n	2baf2 <put_fat+0x72>
   2baf0:	e0d0      	b.n	2bc94 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2baf2:	69bb      	ldr	r3, [r7, #24]
   2baf4:	05db      	lsls	r3, r3, #23
   2baf6:	0ddb      	lsrs	r3, r3, #23
   2baf8:	3330      	adds	r3, #48	; 0x30
   2bafa:	68fa      	ldr	r2, [r7, #12]
   2bafc:	18d3      	adds	r3, r2, r3
   2bafe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2bb00:	68bb      	ldr	r3, [r7, #8]
   2bb02:	2201      	movs	r2, #1
   2bb04:	4013      	ands	r3, r2
   2bb06:	d00d      	beq.n	2bb24 <put_fat+0xa4>
   2bb08:	697b      	ldr	r3, [r7, #20]
   2bb0a:	781b      	ldrb	r3, [r3, #0]
   2bb0c:	b25b      	sxtb	r3, r3
   2bb0e:	220f      	movs	r2, #15
   2bb10:	4013      	ands	r3, r2
   2bb12:	b25a      	sxtb	r2, r3
   2bb14:	687b      	ldr	r3, [r7, #4]
   2bb16:	b2db      	uxtb	r3, r3
   2bb18:	011b      	lsls	r3, r3, #4
   2bb1a:	b25b      	sxtb	r3, r3
   2bb1c:	4313      	orrs	r3, r2
   2bb1e:	b25b      	sxtb	r3, r3
   2bb20:	b2db      	uxtb	r3, r3
   2bb22:	e001      	b.n	2bb28 <put_fat+0xa8>
   2bb24:	687b      	ldr	r3, [r7, #4]
   2bb26:	b2db      	uxtb	r3, r3
   2bb28:	697a      	ldr	r2, [r7, #20]
   2bb2a:	7013      	strb	r3, [r2, #0]
			bc++;
   2bb2c:	69bb      	ldr	r3, [r7, #24]
   2bb2e:	3301      	adds	r3, #1
   2bb30:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2bb32:	68fb      	ldr	r3, [r7, #12]
   2bb34:	2201      	movs	r2, #1
   2bb36:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2bb38:	68fb      	ldr	r3, [r7, #12]
   2bb3a:	6a1a      	ldr	r2, [r3, #32]
   2bb3c:	69bb      	ldr	r3, [r7, #24]
   2bb3e:	0a5b      	lsrs	r3, r3, #9
   2bb40:	18d2      	adds	r2, r2, r3
   2bb42:	231f      	movs	r3, #31
   2bb44:	18fc      	adds	r4, r7, r3
   2bb46:	68fb      	ldr	r3, [r7, #12]
   2bb48:	0011      	movs	r1, r2
   2bb4a:	0018      	movs	r0, r3
   2bb4c:	4b5a      	ldr	r3, [pc, #360]	; (2bcb8 <put_fat+0x238>)
   2bb4e:	4798      	blx	r3
   2bb50:	0003      	movs	r3, r0
   2bb52:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bb54:	231f      	movs	r3, #31
   2bb56:	18fb      	adds	r3, r7, r3
   2bb58:	781b      	ldrb	r3, [r3, #0]
   2bb5a:	2b00      	cmp	r3, #0
   2bb5c:	d000      	beq.n	2bb60 <put_fat+0xe0>
   2bb5e:	e09b      	b.n	2bc98 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2bb60:	69bb      	ldr	r3, [r7, #24]
   2bb62:	05db      	lsls	r3, r3, #23
   2bb64:	0ddb      	lsrs	r3, r3, #23
   2bb66:	3330      	adds	r3, #48	; 0x30
   2bb68:	68fa      	ldr	r2, [r7, #12]
   2bb6a:	18d3      	adds	r3, r2, r3
   2bb6c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2bb6e:	68bb      	ldr	r3, [r7, #8]
   2bb70:	2201      	movs	r2, #1
   2bb72:	4013      	ands	r3, r2
   2bb74:	d003      	beq.n	2bb7e <put_fat+0xfe>
   2bb76:	687b      	ldr	r3, [r7, #4]
   2bb78:	091b      	lsrs	r3, r3, #4
   2bb7a:	b2db      	uxtb	r3, r3
   2bb7c:	e00e      	b.n	2bb9c <put_fat+0x11c>
   2bb7e:	697b      	ldr	r3, [r7, #20]
   2bb80:	781b      	ldrb	r3, [r3, #0]
   2bb82:	b25b      	sxtb	r3, r3
   2bb84:	220f      	movs	r2, #15
   2bb86:	4393      	bics	r3, r2
   2bb88:	b25a      	sxtb	r2, r3
   2bb8a:	687b      	ldr	r3, [r7, #4]
   2bb8c:	0a1b      	lsrs	r3, r3, #8
   2bb8e:	b25b      	sxtb	r3, r3
   2bb90:	210f      	movs	r1, #15
   2bb92:	400b      	ands	r3, r1
   2bb94:	b25b      	sxtb	r3, r3
   2bb96:	4313      	orrs	r3, r2
   2bb98:	b25b      	sxtb	r3, r3
   2bb9a:	b2db      	uxtb	r3, r3
   2bb9c:	697a      	ldr	r2, [r7, #20]
   2bb9e:	7013      	strb	r3, [r2, #0]
			break;
   2bba0:	e07f      	b.n	2bca2 <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2bba2:	68fb      	ldr	r3, [r7, #12]
   2bba4:	6a1a      	ldr	r2, [r3, #32]
   2bba6:	68bb      	ldr	r3, [r7, #8]
   2bba8:	0a1b      	lsrs	r3, r3, #8
   2bbaa:	18d2      	adds	r2, r2, r3
   2bbac:	231f      	movs	r3, #31
   2bbae:	18fc      	adds	r4, r7, r3
   2bbb0:	68fb      	ldr	r3, [r7, #12]
   2bbb2:	0011      	movs	r1, r2
   2bbb4:	0018      	movs	r0, r3
   2bbb6:	4b40      	ldr	r3, [pc, #256]	; (2bcb8 <put_fat+0x238>)
   2bbb8:	4798      	blx	r3
   2bbba:	0003      	movs	r3, r0
   2bbbc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bbbe:	231f      	movs	r3, #31
   2bbc0:	18fb      	adds	r3, r7, r3
   2bbc2:	781b      	ldrb	r3, [r3, #0]
   2bbc4:	2b00      	cmp	r3, #0
   2bbc6:	d169      	bne.n	2bc9c <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2bbc8:	68bb      	ldr	r3, [r7, #8]
   2bbca:	005a      	lsls	r2, r3, #1
   2bbcc:	23ff      	movs	r3, #255	; 0xff
   2bbce:	005b      	lsls	r3, r3, #1
   2bbd0:	4013      	ands	r3, r2
   2bbd2:	3330      	adds	r3, #48	; 0x30
   2bbd4:	68fa      	ldr	r2, [r7, #12]
   2bbd6:	18d3      	adds	r3, r2, r3
   2bbd8:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2bbda:	687b      	ldr	r3, [r7, #4]
   2bbdc:	b2da      	uxtb	r2, r3
   2bbde:	697b      	ldr	r3, [r7, #20]
   2bbe0:	701a      	strb	r2, [r3, #0]
   2bbe2:	697b      	ldr	r3, [r7, #20]
   2bbe4:	3301      	adds	r3, #1
   2bbe6:	687a      	ldr	r2, [r7, #4]
   2bbe8:	b292      	uxth	r2, r2
   2bbea:	0a12      	lsrs	r2, r2, #8
   2bbec:	b292      	uxth	r2, r2
   2bbee:	b2d2      	uxtb	r2, r2
   2bbf0:	701a      	strb	r2, [r3, #0]
			break;
   2bbf2:	e056      	b.n	2bca2 <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2bbf4:	68fb      	ldr	r3, [r7, #12]
   2bbf6:	6a1a      	ldr	r2, [r3, #32]
   2bbf8:	68bb      	ldr	r3, [r7, #8]
   2bbfa:	09db      	lsrs	r3, r3, #7
   2bbfc:	18d2      	adds	r2, r2, r3
   2bbfe:	231f      	movs	r3, #31
   2bc00:	18fc      	adds	r4, r7, r3
   2bc02:	68fb      	ldr	r3, [r7, #12]
   2bc04:	0011      	movs	r1, r2
   2bc06:	0018      	movs	r0, r3
   2bc08:	4b2b      	ldr	r3, [pc, #172]	; (2bcb8 <put_fat+0x238>)
   2bc0a:	4798      	blx	r3
   2bc0c:	0003      	movs	r3, r0
   2bc0e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bc10:	231f      	movs	r3, #31
   2bc12:	18fb      	adds	r3, r7, r3
   2bc14:	781b      	ldrb	r3, [r3, #0]
   2bc16:	2b00      	cmp	r3, #0
   2bc18:	d142      	bne.n	2bca0 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2bc1a:	68bb      	ldr	r3, [r7, #8]
   2bc1c:	009a      	lsls	r2, r3, #2
   2bc1e:	23fe      	movs	r3, #254	; 0xfe
   2bc20:	005b      	lsls	r3, r3, #1
   2bc22:	4013      	ands	r3, r2
   2bc24:	3330      	adds	r3, #48	; 0x30
   2bc26:	68fa      	ldr	r2, [r7, #12]
   2bc28:	18d3      	adds	r3, r2, r3
   2bc2a:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2bc2c:	697b      	ldr	r3, [r7, #20]
   2bc2e:	3303      	adds	r3, #3
   2bc30:	781b      	ldrb	r3, [r3, #0]
   2bc32:	061a      	lsls	r2, r3, #24
   2bc34:	697b      	ldr	r3, [r7, #20]
   2bc36:	3302      	adds	r3, #2
   2bc38:	781b      	ldrb	r3, [r3, #0]
   2bc3a:	041b      	lsls	r3, r3, #16
   2bc3c:	4313      	orrs	r3, r2
   2bc3e:	697a      	ldr	r2, [r7, #20]
   2bc40:	3201      	adds	r2, #1
   2bc42:	7812      	ldrb	r2, [r2, #0]
   2bc44:	0212      	lsls	r2, r2, #8
   2bc46:	4313      	orrs	r3, r2
   2bc48:	697a      	ldr	r2, [r7, #20]
   2bc4a:	7812      	ldrb	r2, [r2, #0]
   2bc4c:	4313      	orrs	r3, r2
   2bc4e:	0f1b      	lsrs	r3, r3, #28
   2bc50:	071b      	lsls	r3, r3, #28
   2bc52:	687a      	ldr	r2, [r7, #4]
   2bc54:	4313      	orrs	r3, r2
   2bc56:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2bc58:	687b      	ldr	r3, [r7, #4]
   2bc5a:	b2da      	uxtb	r2, r3
   2bc5c:	697b      	ldr	r3, [r7, #20]
   2bc5e:	701a      	strb	r2, [r3, #0]
   2bc60:	697b      	ldr	r3, [r7, #20]
   2bc62:	3301      	adds	r3, #1
   2bc64:	687a      	ldr	r2, [r7, #4]
   2bc66:	b292      	uxth	r2, r2
   2bc68:	0a12      	lsrs	r2, r2, #8
   2bc6a:	b292      	uxth	r2, r2
   2bc6c:	b2d2      	uxtb	r2, r2
   2bc6e:	701a      	strb	r2, [r3, #0]
   2bc70:	697b      	ldr	r3, [r7, #20]
   2bc72:	3302      	adds	r3, #2
   2bc74:	687a      	ldr	r2, [r7, #4]
   2bc76:	0c12      	lsrs	r2, r2, #16
   2bc78:	b2d2      	uxtb	r2, r2
   2bc7a:	701a      	strb	r2, [r3, #0]
   2bc7c:	697b      	ldr	r3, [r7, #20]
   2bc7e:	3303      	adds	r3, #3
   2bc80:	687a      	ldr	r2, [r7, #4]
   2bc82:	0e12      	lsrs	r2, r2, #24
   2bc84:	b2d2      	uxtb	r2, r2
   2bc86:	701a      	strb	r2, [r3, #0]
			break;
   2bc88:	e00b      	b.n	2bca2 <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2bc8a:	231f      	movs	r3, #31
   2bc8c:	18fb      	adds	r3, r7, r3
   2bc8e:	2202      	movs	r2, #2
   2bc90:	701a      	strb	r2, [r3, #0]
   2bc92:	e006      	b.n	2bca2 <put_fat+0x222>
			if (res != FR_OK) break;
   2bc94:	46c0      	nop			; (mov r8, r8)
   2bc96:	e004      	b.n	2bca2 <put_fat+0x222>
			if (res != FR_OK) break;
   2bc98:	46c0      	nop			; (mov r8, r8)
   2bc9a:	e002      	b.n	2bca2 <put_fat+0x222>
			if (res != FR_OK) break;
   2bc9c:	46c0      	nop			; (mov r8, r8)
   2bc9e:	e000      	b.n	2bca2 <put_fat+0x222>
			if (res != FR_OK) break;
   2bca0:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2bca2:	68fb      	ldr	r3, [r7, #12]
   2bca4:	2201      	movs	r2, #1
   2bca6:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2bca8:	231f      	movs	r3, #31
   2bcaa:	18fb      	adds	r3, r7, r3
   2bcac:	781b      	ldrb	r3, [r3, #0]
}
   2bcae:	0018      	movs	r0, r3
   2bcb0:	46bd      	mov	sp, r7
   2bcb2:	b009      	add	sp, #36	; 0x24
   2bcb4:	bd90      	pop	{r4, r7, pc}
   2bcb6:	46c0      	nop			; (mov r8, r8)
   2bcb8:	0002b67d 	.word	0x0002b67d

0002bcbc <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2bcbc:	b590      	push	{r4, r7, lr}
   2bcbe:	b085      	sub	sp, #20
   2bcc0:	af00      	add	r7, sp, #0
   2bcc2:	6078      	str	r0, [r7, #4]
   2bcc4:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2bcc6:	683b      	ldr	r3, [r7, #0]
   2bcc8:	2b01      	cmp	r3, #1
   2bcca:	d904      	bls.n	2bcd6 <remove_chain+0x1a>
   2bccc:	687b      	ldr	r3, [r7, #4]
   2bcce:	699a      	ldr	r2, [r3, #24]
   2bcd0:	683b      	ldr	r3, [r7, #0]
   2bcd2:	429a      	cmp	r2, r3
   2bcd4:	d804      	bhi.n	2bce0 <remove_chain+0x24>
		res = FR_INT_ERR;
   2bcd6:	230f      	movs	r3, #15
   2bcd8:	18fb      	adds	r3, r7, r3
   2bcda:	2202      	movs	r2, #2
   2bcdc:	701a      	strb	r2, [r3, #0]
   2bcde:	e045      	b.n	2bd6c <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2bce0:	230f      	movs	r3, #15
   2bce2:	18fb      	adds	r3, r7, r3
   2bce4:	2200      	movs	r2, #0
   2bce6:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2bce8:	e037      	b.n	2bd5a <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2bcea:	683a      	ldr	r2, [r7, #0]
   2bcec:	687b      	ldr	r3, [r7, #4]
   2bcee:	0011      	movs	r1, r2
   2bcf0:	0018      	movs	r0, r3
   2bcf2:	4b22      	ldr	r3, [pc, #136]	; (2bd7c <remove_chain+0xc0>)
   2bcf4:	4798      	blx	r3
   2bcf6:	0003      	movs	r3, r0
   2bcf8:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2bcfa:	68bb      	ldr	r3, [r7, #8]
   2bcfc:	2b00      	cmp	r3, #0
   2bcfe:	d032      	beq.n	2bd66 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2bd00:	68bb      	ldr	r3, [r7, #8]
   2bd02:	2b01      	cmp	r3, #1
   2bd04:	d104      	bne.n	2bd10 <remove_chain+0x54>
   2bd06:	230f      	movs	r3, #15
   2bd08:	18fb      	adds	r3, r7, r3
   2bd0a:	2202      	movs	r2, #2
   2bd0c:	701a      	strb	r2, [r3, #0]
   2bd0e:	e02d      	b.n	2bd6c <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2bd10:	68bb      	ldr	r3, [r7, #8]
   2bd12:	3301      	adds	r3, #1
   2bd14:	d104      	bne.n	2bd20 <remove_chain+0x64>
   2bd16:	230f      	movs	r3, #15
   2bd18:	18fb      	adds	r3, r7, r3
   2bd1a:	2201      	movs	r2, #1
   2bd1c:	701a      	strb	r2, [r3, #0]
   2bd1e:	e025      	b.n	2bd6c <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2bd20:	230f      	movs	r3, #15
   2bd22:	18fc      	adds	r4, r7, r3
   2bd24:	6839      	ldr	r1, [r7, #0]
   2bd26:	687b      	ldr	r3, [r7, #4]
   2bd28:	2200      	movs	r2, #0
   2bd2a:	0018      	movs	r0, r3
   2bd2c:	4b14      	ldr	r3, [pc, #80]	; (2bd80 <remove_chain+0xc4>)
   2bd2e:	4798      	blx	r3
   2bd30:	0003      	movs	r3, r0
   2bd32:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bd34:	230f      	movs	r3, #15
   2bd36:	18fb      	adds	r3, r7, r3
   2bd38:	781b      	ldrb	r3, [r3, #0]
   2bd3a:	2b00      	cmp	r3, #0
   2bd3c:	d115      	bne.n	2bd6a <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2bd3e:	687b      	ldr	r3, [r7, #4]
   2bd40:	691b      	ldr	r3, [r3, #16]
   2bd42:	3301      	adds	r3, #1
   2bd44:	d007      	beq.n	2bd56 <remove_chain+0x9a>
				fs->free_clust++;
   2bd46:	687b      	ldr	r3, [r7, #4]
   2bd48:	691b      	ldr	r3, [r3, #16]
   2bd4a:	1c5a      	adds	r2, r3, #1
   2bd4c:	687b      	ldr	r3, [r7, #4]
   2bd4e:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2bd50:	687b      	ldr	r3, [r7, #4]
   2bd52:	2201      	movs	r2, #1
   2bd54:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2bd56:	68bb      	ldr	r3, [r7, #8]
   2bd58:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2bd5a:	687b      	ldr	r3, [r7, #4]
   2bd5c:	699a      	ldr	r2, [r3, #24]
   2bd5e:	683b      	ldr	r3, [r7, #0]
   2bd60:	429a      	cmp	r2, r3
   2bd62:	d8c2      	bhi.n	2bcea <remove_chain+0x2e>
   2bd64:	e002      	b.n	2bd6c <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2bd66:	46c0      	nop			; (mov r8, r8)
   2bd68:	e000      	b.n	2bd6c <remove_chain+0xb0>
			if (res != FR_OK) break;
   2bd6a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2bd6c:	230f      	movs	r3, #15
   2bd6e:	18fb      	adds	r3, r7, r3
   2bd70:	781b      	ldrb	r3, [r3, #0]
}
   2bd72:	0018      	movs	r0, r3
   2bd74:	46bd      	mov	sp, r7
   2bd76:	b005      	add	sp, #20
   2bd78:	bd90      	pop	{r4, r7, pc}
   2bd7a:	46c0      	nop			; (mov r8, r8)
   2bd7c:	0002b915 	.word	0x0002b915
   2bd80:	0002ba81 	.word	0x0002ba81

0002bd84 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2bd84:	b590      	push	{r4, r7, lr}
   2bd86:	b087      	sub	sp, #28
   2bd88:	af00      	add	r7, sp, #0
   2bd8a:	6078      	str	r0, [r7, #4]
   2bd8c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2bd8e:	683b      	ldr	r3, [r7, #0]
   2bd90:	2b00      	cmp	r3, #0
   2bd92:	d10d      	bne.n	2bdb0 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2bd94:	687b      	ldr	r3, [r7, #4]
   2bd96:	68db      	ldr	r3, [r3, #12]
   2bd98:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2bd9a:	693b      	ldr	r3, [r7, #16]
   2bd9c:	2b00      	cmp	r3, #0
   2bd9e:	d004      	beq.n	2bdaa <create_chain+0x26>
   2bda0:	687b      	ldr	r3, [r7, #4]
   2bda2:	699a      	ldr	r2, [r3, #24]
   2bda4:	693b      	ldr	r3, [r7, #16]
   2bda6:	429a      	cmp	r2, r3
   2bda8:	d818      	bhi.n	2bddc <create_chain+0x58>
   2bdaa:	2301      	movs	r3, #1
   2bdac:	613b      	str	r3, [r7, #16]
   2bdae:	e015      	b.n	2bddc <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2bdb0:	683a      	ldr	r2, [r7, #0]
   2bdb2:	687b      	ldr	r3, [r7, #4]
   2bdb4:	0011      	movs	r1, r2
   2bdb6:	0018      	movs	r0, r3
   2bdb8:	4b3e      	ldr	r3, [pc, #248]	; (2beb4 <create_chain+0x130>)
   2bdba:	4798      	blx	r3
   2bdbc:	0003      	movs	r3, r0
   2bdbe:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2bdc0:	68bb      	ldr	r3, [r7, #8]
   2bdc2:	2b01      	cmp	r3, #1
   2bdc4:	d801      	bhi.n	2bdca <create_chain+0x46>
   2bdc6:	2301      	movs	r3, #1
   2bdc8:	e070      	b.n	2beac <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2bdca:	687b      	ldr	r3, [r7, #4]
   2bdcc:	699a      	ldr	r2, [r3, #24]
   2bdce:	68bb      	ldr	r3, [r7, #8]
   2bdd0:	429a      	cmp	r2, r3
   2bdd2:	d901      	bls.n	2bdd8 <create_chain+0x54>
   2bdd4:	68bb      	ldr	r3, [r7, #8]
   2bdd6:	e069      	b.n	2beac <create_chain+0x128>
		scl = clst;
   2bdd8:	683b      	ldr	r3, [r7, #0]
   2bdda:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2bddc:	693b      	ldr	r3, [r7, #16]
   2bdde:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2bde0:	697b      	ldr	r3, [r7, #20]
   2bde2:	3301      	adds	r3, #1
   2bde4:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2bde6:	687b      	ldr	r3, [r7, #4]
   2bde8:	699a      	ldr	r2, [r3, #24]
   2bdea:	697b      	ldr	r3, [r7, #20]
   2bdec:	429a      	cmp	r2, r3
   2bdee:	d807      	bhi.n	2be00 <create_chain+0x7c>
			ncl = 2;
   2bdf0:	2302      	movs	r3, #2
   2bdf2:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2bdf4:	697a      	ldr	r2, [r7, #20]
   2bdf6:	693b      	ldr	r3, [r7, #16]
   2bdf8:	429a      	cmp	r2, r3
   2bdfa:	d901      	bls.n	2be00 <create_chain+0x7c>
   2bdfc:	2300      	movs	r3, #0
   2bdfe:	e055      	b.n	2beac <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2be00:	697a      	ldr	r2, [r7, #20]
   2be02:	687b      	ldr	r3, [r7, #4]
   2be04:	0011      	movs	r1, r2
   2be06:	0018      	movs	r0, r3
   2be08:	4b2a      	ldr	r3, [pc, #168]	; (2beb4 <create_chain+0x130>)
   2be0a:	4798      	blx	r3
   2be0c:	0003      	movs	r3, r0
   2be0e:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2be10:	68bb      	ldr	r3, [r7, #8]
   2be12:	2b00      	cmp	r3, #0
   2be14:	d00d      	beq.n	2be32 <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2be16:	68bb      	ldr	r3, [r7, #8]
   2be18:	3301      	adds	r3, #1
   2be1a:	d002      	beq.n	2be22 <create_chain+0x9e>
   2be1c:	68bb      	ldr	r3, [r7, #8]
   2be1e:	2b01      	cmp	r3, #1
   2be20:	d101      	bne.n	2be26 <create_chain+0xa2>
			return cs;
   2be22:	68bb      	ldr	r3, [r7, #8]
   2be24:	e042      	b.n	2beac <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2be26:	697a      	ldr	r2, [r7, #20]
   2be28:	693b      	ldr	r3, [r7, #16]
   2be2a:	429a      	cmp	r2, r3
   2be2c:	d1d8      	bne.n	2bde0 <create_chain+0x5c>
   2be2e:	2300      	movs	r3, #0
   2be30:	e03c      	b.n	2beac <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2be32:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2be34:	230f      	movs	r3, #15
   2be36:	18fc      	adds	r4, r7, r3
   2be38:	4a1f      	ldr	r2, [pc, #124]	; (2beb8 <create_chain+0x134>)
   2be3a:	6979      	ldr	r1, [r7, #20]
   2be3c:	687b      	ldr	r3, [r7, #4]
   2be3e:	0018      	movs	r0, r3
   2be40:	4b1e      	ldr	r3, [pc, #120]	; (2bebc <create_chain+0x138>)
   2be42:	4798      	blx	r3
   2be44:	0003      	movs	r3, r0
   2be46:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2be48:	230f      	movs	r3, #15
   2be4a:	18fb      	adds	r3, r7, r3
   2be4c:	781b      	ldrb	r3, [r3, #0]
   2be4e:	2b00      	cmp	r3, #0
   2be50:	d10c      	bne.n	2be6c <create_chain+0xe8>
   2be52:	683b      	ldr	r3, [r7, #0]
   2be54:	2b00      	cmp	r3, #0
   2be56:	d009      	beq.n	2be6c <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2be58:	230f      	movs	r3, #15
   2be5a:	18fc      	adds	r4, r7, r3
   2be5c:	697a      	ldr	r2, [r7, #20]
   2be5e:	6839      	ldr	r1, [r7, #0]
   2be60:	687b      	ldr	r3, [r7, #4]
   2be62:	0018      	movs	r0, r3
   2be64:	4b15      	ldr	r3, [pc, #84]	; (2bebc <create_chain+0x138>)
   2be66:	4798      	blx	r3
   2be68:	0003      	movs	r3, r0
   2be6a:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2be6c:	230f      	movs	r3, #15
   2be6e:	18fb      	adds	r3, r7, r3
   2be70:	781b      	ldrb	r3, [r3, #0]
   2be72:	2b00      	cmp	r3, #0
   2be74:	d10f      	bne.n	2be96 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2be76:	687b      	ldr	r3, [r7, #4]
   2be78:	697a      	ldr	r2, [r7, #20]
   2be7a:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2be7c:	687b      	ldr	r3, [r7, #4]
   2be7e:	691b      	ldr	r3, [r3, #16]
   2be80:	3301      	adds	r3, #1
   2be82:	d012      	beq.n	2beaa <create_chain+0x126>
			fs->free_clust--;
   2be84:	687b      	ldr	r3, [r7, #4]
   2be86:	691b      	ldr	r3, [r3, #16]
   2be88:	1e5a      	subs	r2, r3, #1
   2be8a:	687b      	ldr	r3, [r7, #4]
   2be8c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2be8e:	687b      	ldr	r3, [r7, #4]
   2be90:	2201      	movs	r2, #1
   2be92:	715a      	strb	r2, [r3, #5]
   2be94:	e009      	b.n	2beaa <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2be96:	230f      	movs	r3, #15
   2be98:	18fb      	adds	r3, r7, r3
   2be9a:	781b      	ldrb	r3, [r3, #0]
   2be9c:	2b01      	cmp	r3, #1
   2be9e:	d102      	bne.n	2bea6 <create_chain+0x122>
   2bea0:	2301      	movs	r3, #1
   2bea2:	425b      	negs	r3, r3
   2bea4:	e000      	b.n	2bea8 <create_chain+0x124>
   2bea6:	2301      	movs	r3, #1
   2bea8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2beaa:	697b      	ldr	r3, [r7, #20]
}
   2beac:	0018      	movs	r0, r3
   2beae:	46bd      	mov	sp, r7
   2beb0:	b007      	add	sp, #28
   2beb2:	bd90      	pop	{r4, r7, pc}
   2beb4:	0002b915 	.word	0x0002b915
   2beb8:	0fffffff 	.word	0x0fffffff
   2bebc:	0002ba81 	.word	0x0002ba81

0002bec0 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2bec0:	b580      	push	{r7, lr}
   2bec2:	b084      	sub	sp, #16
   2bec4:	af00      	add	r7, sp, #0
   2bec6:	6078      	str	r0, [r7, #4]
   2bec8:	000a      	movs	r2, r1
   2beca:	1cbb      	adds	r3, r7, #2
   2becc:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2bece:	687b      	ldr	r3, [r7, #4]
   2bed0:	1cba      	adds	r2, r7, #2
   2bed2:	8812      	ldrh	r2, [r2, #0]
   2bed4:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2bed6:	687b      	ldr	r3, [r7, #4]
   2bed8:	689b      	ldr	r3, [r3, #8]
   2beda:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2bedc:	68fb      	ldr	r3, [r7, #12]
   2bede:	2b01      	cmp	r3, #1
   2bee0:	d005      	beq.n	2beee <dir_sdi+0x2e>
   2bee2:	687b      	ldr	r3, [r7, #4]
   2bee4:	681b      	ldr	r3, [r3, #0]
   2bee6:	699a      	ldr	r2, [r3, #24]
   2bee8:	68fb      	ldr	r3, [r7, #12]
   2beea:	429a      	cmp	r2, r3
   2beec:	d801      	bhi.n	2bef2 <dir_sdi+0x32>
		return FR_INT_ERR;
   2beee:	2302      	movs	r3, #2
   2bef0:	e075      	b.n	2bfde <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2bef2:	68fb      	ldr	r3, [r7, #12]
   2bef4:	2b00      	cmp	r3, #0
   2bef6:	d108      	bne.n	2bf0a <dir_sdi+0x4a>
   2bef8:	687b      	ldr	r3, [r7, #4]
   2befa:	681b      	ldr	r3, [r3, #0]
   2befc:	781b      	ldrb	r3, [r3, #0]
   2befe:	2b03      	cmp	r3, #3
   2bf00:	d103      	bne.n	2bf0a <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2bf02:	687b      	ldr	r3, [r7, #4]
   2bf04:	681b      	ldr	r3, [r3, #0]
   2bf06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2bf08:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2bf0a:	68fb      	ldr	r3, [r7, #12]
   2bf0c:	2b00      	cmp	r3, #0
   2bf0e:	d116      	bne.n	2bf3e <dir_sdi+0x7e>
		dj->clust = clst;
   2bf10:	687b      	ldr	r3, [r7, #4]
   2bf12:	68fa      	ldr	r2, [r7, #12]
   2bf14:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2bf16:	687b      	ldr	r3, [r7, #4]
   2bf18:	681b      	ldr	r3, [r3, #0]
   2bf1a:	891b      	ldrh	r3, [r3, #8]
   2bf1c:	1cba      	adds	r2, r7, #2
   2bf1e:	8812      	ldrh	r2, [r2, #0]
   2bf20:	429a      	cmp	r2, r3
   2bf22:	d301      	bcc.n	2bf28 <dir_sdi+0x68>
			return FR_INT_ERR;
   2bf24:	2302      	movs	r3, #2
   2bf26:	e05a      	b.n	2bfde <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2bf28:	687b      	ldr	r3, [r7, #4]
   2bf2a:	681b      	ldr	r3, [r3, #0]
   2bf2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2bf2e:	1cba      	adds	r2, r7, #2
   2bf30:	8812      	ldrh	r2, [r2, #0]
   2bf32:	0912      	lsrs	r2, r2, #4
   2bf34:	b292      	uxth	r2, r2
   2bf36:	189a      	adds	r2, r3, r2
   2bf38:	687b      	ldr	r3, [r7, #4]
   2bf3a:	611a      	str	r2, [r3, #16]
   2bf3c:	e042      	b.n	2bfc4 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2bf3e:	687b      	ldr	r3, [r7, #4]
   2bf40:	681b      	ldr	r3, [r3, #0]
   2bf42:	789b      	ldrb	r3, [r3, #2]
   2bf44:	b29a      	uxth	r2, r3
   2bf46:	230a      	movs	r3, #10
   2bf48:	18fb      	adds	r3, r7, r3
   2bf4a:	0112      	lsls	r2, r2, #4
   2bf4c:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2bf4e:	e020      	b.n	2bf92 <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2bf50:	687b      	ldr	r3, [r7, #4]
   2bf52:	681b      	ldr	r3, [r3, #0]
   2bf54:	68fa      	ldr	r2, [r7, #12]
   2bf56:	0011      	movs	r1, r2
   2bf58:	0018      	movs	r0, r3
   2bf5a:	4b23      	ldr	r3, [pc, #140]	; (2bfe8 <dir_sdi+0x128>)
   2bf5c:	4798      	blx	r3
   2bf5e:	0003      	movs	r3, r0
   2bf60:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2bf62:	68fb      	ldr	r3, [r7, #12]
   2bf64:	3301      	adds	r3, #1
   2bf66:	d101      	bne.n	2bf6c <dir_sdi+0xac>
   2bf68:	2301      	movs	r3, #1
   2bf6a:	e038      	b.n	2bfde <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2bf6c:	68fb      	ldr	r3, [r7, #12]
   2bf6e:	2b01      	cmp	r3, #1
   2bf70:	d905      	bls.n	2bf7e <dir_sdi+0xbe>
   2bf72:	687b      	ldr	r3, [r7, #4]
   2bf74:	681b      	ldr	r3, [r3, #0]
   2bf76:	699a      	ldr	r2, [r3, #24]
   2bf78:	68fb      	ldr	r3, [r7, #12]
   2bf7a:	429a      	cmp	r2, r3
   2bf7c:	d801      	bhi.n	2bf82 <dir_sdi+0xc2>
				return FR_INT_ERR;
   2bf7e:	2302      	movs	r3, #2
   2bf80:	e02d      	b.n	2bfde <dir_sdi+0x11e>
			idx -= ic;
   2bf82:	1cbb      	adds	r3, r7, #2
   2bf84:	1cb9      	adds	r1, r7, #2
   2bf86:	220a      	movs	r2, #10
   2bf88:	18ba      	adds	r2, r7, r2
   2bf8a:	8809      	ldrh	r1, [r1, #0]
   2bf8c:	8812      	ldrh	r2, [r2, #0]
   2bf8e:	1a8a      	subs	r2, r1, r2
   2bf90:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2bf92:	1cba      	adds	r2, r7, #2
   2bf94:	230a      	movs	r3, #10
   2bf96:	18fb      	adds	r3, r7, r3
   2bf98:	8812      	ldrh	r2, [r2, #0]
   2bf9a:	881b      	ldrh	r3, [r3, #0]
   2bf9c:	429a      	cmp	r2, r3
   2bf9e:	d2d7      	bcs.n	2bf50 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2bfa0:	687b      	ldr	r3, [r7, #4]
   2bfa2:	68fa      	ldr	r2, [r7, #12]
   2bfa4:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2bfa6:	687b      	ldr	r3, [r7, #4]
   2bfa8:	681b      	ldr	r3, [r3, #0]
   2bfaa:	68fa      	ldr	r2, [r7, #12]
   2bfac:	0011      	movs	r1, r2
   2bfae:	0018      	movs	r0, r3
   2bfb0:	4b0e      	ldr	r3, [pc, #56]	; (2bfec <dir_sdi+0x12c>)
   2bfb2:	4798      	blx	r3
   2bfb4:	0002      	movs	r2, r0
   2bfb6:	1cbb      	adds	r3, r7, #2
   2bfb8:	881b      	ldrh	r3, [r3, #0]
   2bfba:	091b      	lsrs	r3, r3, #4
   2bfbc:	b29b      	uxth	r3, r3
   2bfbe:	18d2      	adds	r2, r2, r3
   2bfc0:	687b      	ldr	r3, [r7, #4]
   2bfc2:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2bfc4:	687b      	ldr	r3, [r7, #4]
   2bfc6:	681b      	ldr	r3, [r3, #0]
   2bfc8:	3330      	adds	r3, #48	; 0x30
   2bfca:	001a      	movs	r2, r3
   2bfcc:	1cbb      	adds	r3, r7, #2
   2bfce:	881b      	ldrh	r3, [r3, #0]
   2bfd0:	210f      	movs	r1, #15
   2bfd2:	400b      	ands	r3, r1
   2bfd4:	015b      	lsls	r3, r3, #5
   2bfd6:	18d2      	adds	r2, r2, r3
   2bfd8:	687b      	ldr	r3, [r7, #4]
   2bfda:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2bfdc:	2300      	movs	r3, #0
}
   2bfde:	0018      	movs	r0, r3
   2bfe0:	46bd      	mov	sp, r7
   2bfe2:	b004      	add	sp, #16
   2bfe4:	bd80      	pop	{r7, pc}
   2bfe6:	46c0      	nop			; (mov r8, r8)
   2bfe8:	0002b915 	.word	0x0002b915
   2bfec:	0002b8dd 	.word	0x0002b8dd

0002bff0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2bff0:	b590      	push	{r4, r7, lr}
   2bff2:	b085      	sub	sp, #20
   2bff4:	af00      	add	r7, sp, #0
   2bff6:	6078      	str	r0, [r7, #4]
   2bff8:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2bffa:	687b      	ldr	r3, [r7, #4]
   2bffc:	88da      	ldrh	r2, [r3, #6]
   2bffe:	2308      	movs	r3, #8
   2c000:	18fb      	adds	r3, r7, r3
   2c002:	3201      	adds	r2, #1
   2c004:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2c006:	2308      	movs	r3, #8
   2c008:	18fb      	adds	r3, r7, r3
   2c00a:	881b      	ldrh	r3, [r3, #0]
   2c00c:	2b00      	cmp	r3, #0
   2c00e:	d003      	beq.n	2c018 <dir_next+0x28>
   2c010:	687b      	ldr	r3, [r7, #4]
   2c012:	691b      	ldr	r3, [r3, #16]
   2c014:	2b00      	cmp	r3, #0
   2c016:	d101      	bne.n	2c01c <dir_next+0x2c>
		return FR_NO_FILE;
   2c018:	2304      	movs	r3, #4
   2c01a:	e0d2      	b.n	2c1c2 <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2c01c:	2308      	movs	r3, #8
   2c01e:	18fb      	adds	r3, r7, r3
   2c020:	881b      	ldrh	r3, [r3, #0]
   2c022:	220f      	movs	r2, #15
   2c024:	4013      	ands	r3, r2
   2c026:	b29b      	uxth	r3, r3
   2c028:	2b00      	cmp	r3, #0
   2c02a:	d000      	beq.n	2c02e <dir_next+0x3e>
   2c02c:	e0b6      	b.n	2c19c <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2c02e:	687b      	ldr	r3, [r7, #4]
   2c030:	691b      	ldr	r3, [r3, #16]
   2c032:	1c5a      	adds	r2, r3, #1
   2c034:	687b      	ldr	r3, [r7, #4]
   2c036:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2c038:	687b      	ldr	r3, [r7, #4]
   2c03a:	68db      	ldr	r3, [r3, #12]
   2c03c:	2b00      	cmp	r3, #0
   2c03e:	d10a      	bne.n	2c056 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2c040:	687b      	ldr	r3, [r7, #4]
   2c042:	681b      	ldr	r3, [r3, #0]
   2c044:	891b      	ldrh	r3, [r3, #8]
   2c046:	2208      	movs	r2, #8
   2c048:	18ba      	adds	r2, r7, r2
   2c04a:	8812      	ldrh	r2, [r2, #0]
   2c04c:	429a      	cmp	r2, r3
   2c04e:	d200      	bcs.n	2c052 <dir_next+0x62>
   2c050:	e0a4      	b.n	2c19c <dir_next+0x1ac>
				return FR_NO_FILE;
   2c052:	2304      	movs	r3, #4
   2c054:	e0b5      	b.n	2c1c2 <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2c056:	2308      	movs	r3, #8
   2c058:	18fb      	adds	r3, r7, r3
   2c05a:	881b      	ldrh	r3, [r3, #0]
   2c05c:	091b      	lsrs	r3, r3, #4
   2c05e:	b29b      	uxth	r3, r3
   2c060:	001a      	movs	r2, r3
   2c062:	687b      	ldr	r3, [r7, #4]
   2c064:	681b      	ldr	r3, [r3, #0]
   2c066:	789b      	ldrb	r3, [r3, #2]
   2c068:	3b01      	subs	r3, #1
   2c06a:	4013      	ands	r3, r2
   2c06c:	d000      	beq.n	2c070 <dir_next+0x80>
   2c06e:	e095      	b.n	2c19c <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2c070:	687b      	ldr	r3, [r7, #4]
   2c072:	681a      	ldr	r2, [r3, #0]
   2c074:	687b      	ldr	r3, [r7, #4]
   2c076:	68db      	ldr	r3, [r3, #12]
   2c078:	0019      	movs	r1, r3
   2c07a:	0010      	movs	r0, r2
   2c07c:	4b53      	ldr	r3, [pc, #332]	; (2c1cc <dir_next+0x1dc>)
   2c07e:	4798      	blx	r3
   2c080:	0003      	movs	r3, r0
   2c082:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2c084:	68fb      	ldr	r3, [r7, #12]
   2c086:	2b01      	cmp	r3, #1
   2c088:	d801      	bhi.n	2c08e <dir_next+0x9e>
   2c08a:	2302      	movs	r3, #2
   2c08c:	e099      	b.n	2c1c2 <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2c08e:	68fb      	ldr	r3, [r7, #12]
   2c090:	3301      	adds	r3, #1
   2c092:	d101      	bne.n	2c098 <dir_next+0xa8>
   2c094:	2301      	movs	r3, #1
   2c096:	e094      	b.n	2c1c2 <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2c098:	687b      	ldr	r3, [r7, #4]
   2c09a:	681b      	ldr	r3, [r3, #0]
   2c09c:	699a      	ldr	r2, [r3, #24]
   2c09e:	68fb      	ldr	r3, [r7, #12]
   2c0a0:	429a      	cmp	r2, r3
   2c0a2:	d900      	bls.n	2c0a6 <dir_next+0xb6>
   2c0a4:	e06d      	b.n	2c182 <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2c0a6:	683b      	ldr	r3, [r7, #0]
   2c0a8:	2b00      	cmp	r3, #0
   2c0aa:	d101      	bne.n	2c0b0 <dir_next+0xc0>
   2c0ac:	2304      	movs	r3, #4
   2c0ae:	e088      	b.n	2c1c2 <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2c0b0:	687b      	ldr	r3, [r7, #4]
   2c0b2:	681a      	ldr	r2, [r3, #0]
   2c0b4:	687b      	ldr	r3, [r7, #4]
   2c0b6:	68db      	ldr	r3, [r3, #12]
   2c0b8:	0019      	movs	r1, r3
   2c0ba:	0010      	movs	r0, r2
   2c0bc:	4b44      	ldr	r3, [pc, #272]	; (2c1d0 <dir_next+0x1e0>)
   2c0be:	4798      	blx	r3
   2c0c0:	0003      	movs	r3, r0
   2c0c2:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2c0c4:	68fb      	ldr	r3, [r7, #12]
   2c0c6:	2b00      	cmp	r3, #0
   2c0c8:	d101      	bne.n	2c0ce <dir_next+0xde>
   2c0ca:	2307      	movs	r3, #7
   2c0cc:	e079      	b.n	2c1c2 <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2c0ce:	68fb      	ldr	r3, [r7, #12]
   2c0d0:	2b01      	cmp	r3, #1
   2c0d2:	d101      	bne.n	2c0d8 <dir_next+0xe8>
   2c0d4:	2302      	movs	r3, #2
   2c0d6:	e074      	b.n	2c1c2 <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2c0d8:	68fb      	ldr	r3, [r7, #12]
   2c0da:	3301      	adds	r3, #1
   2c0dc:	d101      	bne.n	2c0e2 <dir_next+0xf2>
   2c0de:	2301      	movs	r3, #1
   2c0e0:	e06f      	b.n	2c1c2 <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2c0e2:	687b      	ldr	r3, [r7, #4]
   2c0e4:	681b      	ldr	r3, [r3, #0]
   2c0e6:	2100      	movs	r1, #0
   2c0e8:	0018      	movs	r0, r3
   2c0ea:	4b3a      	ldr	r3, [pc, #232]	; (2c1d4 <dir_next+0x1e4>)
   2c0ec:	4798      	blx	r3
   2c0ee:	1e03      	subs	r3, r0, #0
   2c0f0:	d001      	beq.n	2c0f6 <dir_next+0x106>
   2c0f2:	2301      	movs	r3, #1
   2c0f4:	e065      	b.n	2c1c2 <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2c0f6:	687b      	ldr	r3, [r7, #4]
   2c0f8:	681b      	ldr	r3, [r3, #0]
   2c0fa:	3330      	adds	r3, #48	; 0x30
   2c0fc:	0018      	movs	r0, r3
   2c0fe:	2380      	movs	r3, #128	; 0x80
   2c100:	009b      	lsls	r3, r3, #2
   2c102:	001a      	movs	r2, r3
   2c104:	2100      	movs	r1, #0
   2c106:	4b34      	ldr	r3, [pc, #208]	; (2c1d8 <dir_next+0x1e8>)
   2c108:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2c10a:	687b      	ldr	r3, [r7, #4]
   2c10c:	681c      	ldr	r4, [r3, #0]
   2c10e:	687b      	ldr	r3, [r7, #4]
   2c110:	681b      	ldr	r3, [r3, #0]
   2c112:	68fa      	ldr	r2, [r7, #12]
   2c114:	0011      	movs	r1, r2
   2c116:	0018      	movs	r0, r3
   2c118:	4b30      	ldr	r3, [pc, #192]	; (2c1dc <dir_next+0x1ec>)
   2c11a:	4798      	blx	r3
   2c11c:	0003      	movs	r3, r0
   2c11e:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2c120:	230b      	movs	r3, #11
   2c122:	18fb      	adds	r3, r7, r3
   2c124:	2200      	movs	r2, #0
   2c126:	701a      	strb	r2, [r3, #0]
   2c128:	e019      	b.n	2c15e <dir_next+0x16e>
						dj->fs->wflag = 1;
   2c12a:	687b      	ldr	r3, [r7, #4]
   2c12c:	681b      	ldr	r3, [r3, #0]
   2c12e:	2201      	movs	r2, #1
   2c130:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2c132:	687b      	ldr	r3, [r7, #4]
   2c134:	681b      	ldr	r3, [r3, #0]
   2c136:	2100      	movs	r1, #0
   2c138:	0018      	movs	r0, r3
   2c13a:	4b26      	ldr	r3, [pc, #152]	; (2c1d4 <dir_next+0x1e4>)
   2c13c:	4798      	blx	r3
   2c13e:	1e03      	subs	r3, r0, #0
   2c140:	d001      	beq.n	2c146 <dir_next+0x156>
   2c142:	2301      	movs	r3, #1
   2c144:	e03d      	b.n	2c1c2 <dir_next+0x1d2>
						dj->fs->winsect++;
   2c146:	687b      	ldr	r3, [r7, #4]
   2c148:	681b      	ldr	r3, [r3, #0]
   2c14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2c14c:	3201      	adds	r2, #1
   2c14e:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2c150:	230b      	movs	r3, #11
   2c152:	18fb      	adds	r3, r7, r3
   2c154:	781a      	ldrb	r2, [r3, #0]
   2c156:	230b      	movs	r3, #11
   2c158:	18fb      	adds	r3, r7, r3
   2c15a:	3201      	adds	r2, #1
   2c15c:	701a      	strb	r2, [r3, #0]
   2c15e:	687b      	ldr	r3, [r7, #4]
   2c160:	681b      	ldr	r3, [r3, #0]
   2c162:	789b      	ldrb	r3, [r3, #2]
   2c164:	220b      	movs	r2, #11
   2c166:	18ba      	adds	r2, r7, r2
   2c168:	7812      	ldrb	r2, [r2, #0]
   2c16a:	429a      	cmp	r2, r3
   2c16c:	d3dd      	bcc.n	2c12a <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2c16e:	687b      	ldr	r3, [r7, #4]
   2c170:	681b      	ldr	r3, [r3, #0]
   2c172:	687a      	ldr	r2, [r7, #4]
   2c174:	6812      	ldr	r2, [r2, #0]
   2c176:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2c178:	220b      	movs	r2, #11
   2c17a:	18ba      	adds	r2, r7, r2
   2c17c:	7812      	ldrb	r2, [r2, #0]
   2c17e:	1a8a      	subs	r2, r1, r2
   2c180:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2c182:	687b      	ldr	r3, [r7, #4]
   2c184:	68fa      	ldr	r2, [r7, #12]
   2c186:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2c188:	687b      	ldr	r3, [r7, #4]
   2c18a:	681b      	ldr	r3, [r3, #0]
   2c18c:	68fa      	ldr	r2, [r7, #12]
   2c18e:	0011      	movs	r1, r2
   2c190:	0018      	movs	r0, r3
   2c192:	4b12      	ldr	r3, [pc, #72]	; (2c1dc <dir_next+0x1ec>)
   2c194:	4798      	blx	r3
   2c196:	0002      	movs	r2, r0
   2c198:	687b      	ldr	r3, [r7, #4]
   2c19a:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2c19c:	687b      	ldr	r3, [r7, #4]
   2c19e:	2208      	movs	r2, #8
   2c1a0:	18ba      	adds	r2, r7, r2
   2c1a2:	8812      	ldrh	r2, [r2, #0]
   2c1a4:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2c1a6:	687b      	ldr	r3, [r7, #4]
   2c1a8:	681b      	ldr	r3, [r3, #0]
   2c1aa:	3330      	adds	r3, #48	; 0x30
   2c1ac:	001a      	movs	r2, r3
   2c1ae:	2308      	movs	r3, #8
   2c1b0:	18fb      	adds	r3, r7, r3
   2c1b2:	881b      	ldrh	r3, [r3, #0]
   2c1b4:	210f      	movs	r1, #15
   2c1b6:	400b      	ands	r3, r1
   2c1b8:	015b      	lsls	r3, r3, #5
   2c1ba:	18d2      	adds	r2, r2, r3
   2c1bc:	687b      	ldr	r3, [r7, #4]
   2c1be:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2c1c0:	2300      	movs	r3, #0
}
   2c1c2:	0018      	movs	r0, r3
   2c1c4:	46bd      	mov	sp, r7
   2c1c6:	b005      	add	sp, #20
   2c1c8:	bd90      	pop	{r4, r7, pc}
   2c1ca:	46c0      	nop			; (mov r8, r8)
   2c1cc:	0002b915 	.word	0x0002b915
   2c1d0:	0002bd85 	.word	0x0002bd85
   2c1d4:	0002b67d 	.word	0x0002b67d
   2c1d8:	0002b5d1 	.word	0x0002b5d1
   2c1dc:	0002b8dd 	.word	0x0002b8dd

0002c1e0 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2c1e0:	b590      	push	{r4, r7, lr}
   2c1e2:	b087      	sub	sp, #28
   2c1e4:	af00      	add	r7, sp, #0
   2c1e6:	6078      	str	r0, [r7, #4]
   2c1e8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2c1ea:	683b      	ldr	r3, [r7, #0]
   2c1ec:	781b      	ldrb	r3, [r3, #0]
   2c1ee:	001a      	movs	r2, r3
   2c1f0:	2340      	movs	r3, #64	; 0x40
   2c1f2:	439a      	bics	r2, r3
   2c1f4:	0013      	movs	r3, r2
   2c1f6:	1e5a      	subs	r2, r3, #1
   2c1f8:	0013      	movs	r3, r2
   2c1fa:	005b      	lsls	r3, r3, #1
   2c1fc:	189b      	adds	r3, r3, r2
   2c1fe:	009b      	lsls	r3, r3, #2
   2c200:	189b      	adds	r3, r3, r2
   2c202:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2c204:	2300      	movs	r3, #0
   2c206:	613b      	str	r3, [r7, #16]
   2c208:	230e      	movs	r3, #14
   2c20a:	18fb      	adds	r3, r7, r3
   2c20c:	2201      	movs	r2, #1
   2c20e:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2c210:	4a31      	ldr	r2, [pc, #196]	; (2c2d8 <cmp_lfn+0xf8>)
   2c212:	693b      	ldr	r3, [r7, #16]
   2c214:	18d3      	adds	r3, r2, r3
   2c216:	781b      	ldrb	r3, [r3, #0]
   2c218:	3301      	adds	r3, #1
   2c21a:	683a      	ldr	r2, [r7, #0]
   2c21c:	18d3      	adds	r3, r2, r3
   2c21e:	781b      	ldrb	r3, [r3, #0]
   2c220:	021b      	lsls	r3, r3, #8
   2c222:	b21a      	sxth	r2, r3
   2c224:	492c      	ldr	r1, [pc, #176]	; (2c2d8 <cmp_lfn+0xf8>)
   2c226:	693b      	ldr	r3, [r7, #16]
   2c228:	18cb      	adds	r3, r1, r3
   2c22a:	781b      	ldrb	r3, [r3, #0]
   2c22c:	0019      	movs	r1, r3
   2c22e:	683b      	ldr	r3, [r7, #0]
   2c230:	185b      	adds	r3, r3, r1
   2c232:	781b      	ldrb	r3, [r3, #0]
   2c234:	b21b      	sxth	r3, r3
   2c236:	4313      	orrs	r3, r2
   2c238:	b21a      	sxth	r2, r3
   2c23a:	230c      	movs	r3, #12
   2c23c:	18fb      	adds	r3, r7, r3
   2c23e:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2c240:	230e      	movs	r3, #14
   2c242:	18fb      	adds	r3, r7, r3
   2c244:	881b      	ldrh	r3, [r3, #0]
   2c246:	2b00      	cmp	r3, #0
   2c248:	d01f      	beq.n	2c28a <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2c24a:	230e      	movs	r3, #14
   2c24c:	18fc      	adds	r4, r7, r3
   2c24e:	230c      	movs	r3, #12
   2c250:	18fb      	adds	r3, r7, r3
   2c252:	881b      	ldrh	r3, [r3, #0]
   2c254:	0018      	movs	r0, r3
   2c256:	4b21      	ldr	r3, [pc, #132]	; (2c2dc <cmp_lfn+0xfc>)
   2c258:	4798      	blx	r3
   2c25a:	0003      	movs	r3, r0
   2c25c:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2c25e:	697b      	ldr	r3, [r7, #20]
   2c260:	2bfe      	cmp	r3, #254	; 0xfe
   2c262:	d810      	bhi.n	2c286 <cmp_lfn+0xa6>
   2c264:	697b      	ldr	r3, [r7, #20]
   2c266:	1c5a      	adds	r2, r3, #1
   2c268:	617a      	str	r2, [r7, #20]
   2c26a:	005b      	lsls	r3, r3, #1
   2c26c:	687a      	ldr	r2, [r7, #4]
   2c26e:	18d3      	adds	r3, r2, r3
   2c270:	881b      	ldrh	r3, [r3, #0]
   2c272:	0018      	movs	r0, r3
   2c274:	4b19      	ldr	r3, [pc, #100]	; (2c2dc <cmp_lfn+0xfc>)
   2c276:	4798      	blx	r3
   2c278:	0003      	movs	r3, r0
   2c27a:	001a      	movs	r2, r3
   2c27c:	230e      	movs	r3, #14
   2c27e:	18fb      	adds	r3, r7, r3
   2c280:	881b      	ldrh	r3, [r3, #0]
   2c282:	4293      	cmp	r3, r2
   2c284:	d009      	beq.n	2c29a <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2c286:	2300      	movs	r3, #0
   2c288:	e022      	b.n	2c2d0 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2c28a:	230c      	movs	r3, #12
   2c28c:	18fb      	adds	r3, r7, r3
   2c28e:	881b      	ldrh	r3, [r3, #0]
   2c290:	4a13      	ldr	r2, [pc, #76]	; (2c2e0 <cmp_lfn+0x100>)
   2c292:	4293      	cmp	r3, r2
   2c294:	d001      	beq.n	2c29a <cmp_lfn+0xba>
   2c296:	2300      	movs	r3, #0
   2c298:	e01a      	b.n	2c2d0 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2c29a:	693b      	ldr	r3, [r7, #16]
   2c29c:	3301      	adds	r3, #1
   2c29e:	613b      	str	r3, [r7, #16]
   2c2a0:	693b      	ldr	r3, [r7, #16]
   2c2a2:	2b0c      	cmp	r3, #12
   2c2a4:	d9b4      	bls.n	2c210 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2c2a6:	683b      	ldr	r3, [r7, #0]
   2c2a8:	781b      	ldrb	r3, [r3, #0]
   2c2aa:	001a      	movs	r2, r3
   2c2ac:	2340      	movs	r3, #64	; 0x40
   2c2ae:	4013      	ands	r3, r2
   2c2b0:	d00d      	beq.n	2c2ce <cmp_lfn+0xee>
   2c2b2:	230e      	movs	r3, #14
   2c2b4:	18fb      	adds	r3, r7, r3
   2c2b6:	881b      	ldrh	r3, [r3, #0]
   2c2b8:	2b00      	cmp	r3, #0
   2c2ba:	d008      	beq.n	2c2ce <cmp_lfn+0xee>
   2c2bc:	697b      	ldr	r3, [r7, #20]
   2c2be:	005b      	lsls	r3, r3, #1
   2c2c0:	687a      	ldr	r2, [r7, #4]
   2c2c2:	18d3      	adds	r3, r2, r3
   2c2c4:	881b      	ldrh	r3, [r3, #0]
   2c2c6:	2b00      	cmp	r3, #0
   2c2c8:	d001      	beq.n	2c2ce <cmp_lfn+0xee>
		return 0;
   2c2ca:	2300      	movs	r3, #0
   2c2cc:	e000      	b.n	2c2d0 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2c2ce:	2301      	movs	r3, #1
}
   2c2d0:	0018      	movs	r0, r3
   2c2d2:	46bd      	mov	sp, r7
   2c2d4:	b007      	add	sp, #28
   2c2d6:	bd90      	pop	{r4, r7, pc}
   2c2d8:	00039584 	.word	0x00039584
   2c2dc:	0002e28d 	.word	0x0002e28d
   2c2e0:	0000ffff 	.word	0x0000ffff

0002c2e4 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2c2e4:	b580      	push	{r7, lr}
   2c2e6:	b088      	sub	sp, #32
   2c2e8:	af00      	add	r7, sp, #0
   2c2ea:	60f8      	str	r0, [r7, #12]
   2c2ec:	60b9      	str	r1, [r7, #8]
   2c2ee:	0019      	movs	r1, r3
   2c2f0:	1dfb      	adds	r3, r7, #7
   2c2f2:	701a      	strb	r2, [r3, #0]
   2c2f4:	1dbb      	adds	r3, r7, #6
   2c2f6:	1c0a      	adds	r2, r1, #0
   2c2f8:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2c2fa:	68bb      	ldr	r3, [r7, #8]
   2c2fc:	330d      	adds	r3, #13
   2c2fe:	1dba      	adds	r2, r7, #6
   2c300:	7812      	ldrb	r2, [r2, #0]
   2c302:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2c304:	68bb      	ldr	r3, [r7, #8]
   2c306:	330b      	adds	r3, #11
   2c308:	220f      	movs	r2, #15
   2c30a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2c30c:	68bb      	ldr	r3, [r7, #8]
   2c30e:	330c      	adds	r3, #12
   2c310:	2200      	movs	r2, #0
   2c312:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2c314:	68bb      	ldr	r3, [r7, #8]
   2c316:	331a      	adds	r3, #26
   2c318:	2200      	movs	r2, #0
   2c31a:	701a      	strb	r2, [r3, #0]
   2c31c:	68bb      	ldr	r3, [r7, #8]
   2c31e:	331b      	adds	r3, #27
   2c320:	2200      	movs	r2, #0
   2c322:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2c324:	1dfb      	adds	r3, r7, #7
   2c326:	781b      	ldrb	r3, [r3, #0]
   2c328:	1e5a      	subs	r2, r3, #1
   2c32a:	0013      	movs	r3, r2
   2c32c:	005b      	lsls	r3, r3, #1
   2c32e:	189b      	adds	r3, r3, r2
   2c330:	009b      	lsls	r3, r3, #2
   2c332:	189b      	adds	r3, r3, r2
   2c334:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2c336:	2316      	movs	r3, #22
   2c338:	18fb      	adds	r3, r7, r3
   2c33a:	2200      	movs	r2, #0
   2c33c:	801a      	strh	r2, [r3, #0]
   2c33e:	2300      	movs	r3, #0
   2c340:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2c342:	2316      	movs	r3, #22
   2c344:	18fb      	adds	r3, r7, r3
   2c346:	881b      	ldrh	r3, [r3, #0]
   2c348:	4a28      	ldr	r2, [pc, #160]	; (2c3ec <fit_lfn+0x108>)
   2c34a:	4293      	cmp	r3, r2
   2c34c:	d009      	beq.n	2c362 <fit_lfn+0x7e>
   2c34e:	69fb      	ldr	r3, [r7, #28]
   2c350:	1c5a      	adds	r2, r3, #1
   2c352:	61fa      	str	r2, [r7, #28]
   2c354:	005b      	lsls	r3, r3, #1
   2c356:	68fa      	ldr	r2, [r7, #12]
   2c358:	18d2      	adds	r2, r2, r3
   2c35a:	2316      	movs	r3, #22
   2c35c:	18fb      	adds	r3, r7, r3
   2c35e:	8812      	ldrh	r2, [r2, #0]
   2c360:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2c362:	4a23      	ldr	r2, [pc, #140]	; (2c3f0 <fit_lfn+0x10c>)
   2c364:	69bb      	ldr	r3, [r7, #24]
   2c366:	18d3      	adds	r3, r2, r3
   2c368:	781b      	ldrb	r3, [r3, #0]
   2c36a:	001a      	movs	r2, r3
   2c36c:	68bb      	ldr	r3, [r7, #8]
   2c36e:	189b      	adds	r3, r3, r2
   2c370:	2216      	movs	r2, #22
   2c372:	18ba      	adds	r2, r7, r2
   2c374:	8812      	ldrh	r2, [r2, #0]
   2c376:	b2d2      	uxtb	r2, r2
   2c378:	701a      	strb	r2, [r3, #0]
   2c37a:	4a1d      	ldr	r2, [pc, #116]	; (2c3f0 <fit_lfn+0x10c>)
   2c37c:	69bb      	ldr	r3, [r7, #24]
   2c37e:	18d3      	adds	r3, r2, r3
   2c380:	781b      	ldrb	r3, [r3, #0]
   2c382:	3301      	adds	r3, #1
   2c384:	68ba      	ldr	r2, [r7, #8]
   2c386:	18d3      	adds	r3, r2, r3
   2c388:	2216      	movs	r2, #22
   2c38a:	18ba      	adds	r2, r7, r2
   2c38c:	8812      	ldrh	r2, [r2, #0]
   2c38e:	0a12      	lsrs	r2, r2, #8
   2c390:	b292      	uxth	r2, r2
   2c392:	b2d2      	uxtb	r2, r2
   2c394:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2c396:	2316      	movs	r3, #22
   2c398:	18fb      	adds	r3, r7, r3
   2c39a:	881b      	ldrh	r3, [r3, #0]
   2c39c:	2b00      	cmp	r3, #0
   2c39e:	d104      	bne.n	2c3aa <fit_lfn+0xc6>
   2c3a0:	2316      	movs	r3, #22
   2c3a2:	18fb      	adds	r3, r7, r3
   2c3a4:	2201      	movs	r2, #1
   2c3a6:	4252      	negs	r2, r2
   2c3a8:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2c3aa:	69bb      	ldr	r3, [r7, #24]
   2c3ac:	3301      	adds	r3, #1
   2c3ae:	61bb      	str	r3, [r7, #24]
   2c3b0:	69bb      	ldr	r3, [r7, #24]
   2c3b2:	2b0c      	cmp	r3, #12
   2c3b4:	d9c5      	bls.n	2c342 <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2c3b6:	2316      	movs	r3, #22
   2c3b8:	18fb      	adds	r3, r7, r3
   2c3ba:	881b      	ldrh	r3, [r3, #0]
   2c3bc:	4a0b      	ldr	r2, [pc, #44]	; (2c3ec <fit_lfn+0x108>)
   2c3be:	4293      	cmp	r3, r2
   2c3c0:	d006      	beq.n	2c3d0 <fit_lfn+0xec>
   2c3c2:	69fb      	ldr	r3, [r7, #28]
   2c3c4:	005b      	lsls	r3, r3, #1
   2c3c6:	68fa      	ldr	r2, [r7, #12]
   2c3c8:	18d3      	adds	r3, r2, r3
   2c3ca:	881b      	ldrh	r3, [r3, #0]
   2c3cc:	2b00      	cmp	r3, #0
   2c3ce:	d105      	bne.n	2c3dc <fit_lfn+0xf8>
   2c3d0:	1dfb      	adds	r3, r7, #7
   2c3d2:	1dfa      	adds	r2, r7, #7
   2c3d4:	7812      	ldrb	r2, [r2, #0]
   2c3d6:	2140      	movs	r1, #64	; 0x40
   2c3d8:	430a      	orrs	r2, r1
   2c3da:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2c3dc:	68bb      	ldr	r3, [r7, #8]
   2c3de:	1dfa      	adds	r2, r7, #7
   2c3e0:	7812      	ldrb	r2, [r2, #0]
   2c3e2:	701a      	strb	r2, [r3, #0]
}
   2c3e4:	46c0      	nop			; (mov r8, r8)
   2c3e6:	46bd      	mov	sp, r7
   2c3e8:	b008      	add	sp, #32
   2c3ea:	bd80      	pop	{r7, pc}
   2c3ec:	0000ffff 	.word	0x0000ffff
   2c3f0:	00039584 	.word	0x00039584

0002c3f4 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2c3f4:	b580      	push	{r7, lr}
   2c3f6:	b08a      	sub	sp, #40	; 0x28
   2c3f8:	af00      	add	r7, sp, #0
   2c3fa:	60f8      	str	r0, [r7, #12]
   2c3fc:	60b9      	str	r1, [r7, #8]
   2c3fe:	607a      	str	r2, [r7, #4]
   2c400:	001a      	movs	r2, r3
   2c402:	1cbb      	adds	r3, r7, #2
   2c404:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2c406:	68b9      	ldr	r1, [r7, #8]
   2c408:	68fb      	ldr	r3, [r7, #12]
   2c40a:	220b      	movs	r2, #11
   2c40c:	0018      	movs	r0, r3
   2c40e:	4b38      	ldr	r3, [pc, #224]	; (2c4f0 <gen_numname+0xfc>)
   2c410:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2c412:	1cbb      	adds	r3, r7, #2
   2c414:	881b      	ldrh	r3, [r3, #0]
   2c416:	2b05      	cmp	r3, #5
   2c418:	d911      	bls.n	2c43e <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2c41a:	1cbb      	adds	r3, r7, #2
   2c41c:	881b      	ldrh	r3, [r3, #0]
   2c41e:	b29a      	uxth	r2, r3
   2c420:	0852      	lsrs	r2, r2, #1
   2c422:	03db      	lsls	r3, r3, #15
   2c424:	4313      	orrs	r3, r2
   2c426:	b299      	uxth	r1, r3
   2c428:	687b      	ldr	r3, [r7, #4]
   2c42a:	1c9a      	adds	r2, r3, #2
   2c42c:	607a      	str	r2, [r7, #4]
   2c42e:	881a      	ldrh	r2, [r3, #0]
   2c430:	1cbb      	adds	r3, r7, #2
   2c432:	188a      	adds	r2, r1, r2
   2c434:	801a      	strh	r2, [r3, #0]
   2c436:	687b      	ldr	r3, [r7, #4]
   2c438:	881b      	ldrh	r3, [r3, #0]
   2c43a:	2b00      	cmp	r3, #0
   2c43c:	d1ed      	bne.n	2c41a <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2c43e:	2307      	movs	r3, #7
   2c440:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2c442:	1cbb      	adds	r3, r7, #2
   2c444:	881b      	ldrh	r3, [r3, #0]
   2c446:	b2db      	uxtb	r3, r3
   2c448:	220f      	movs	r2, #15
   2c44a:	4013      	ands	r3, r2
   2c44c:	b2da      	uxtb	r2, r3
   2c44e:	2327      	movs	r3, #39	; 0x27
   2c450:	18fb      	adds	r3, r7, r3
   2c452:	3230      	adds	r2, #48	; 0x30
   2c454:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2c456:	2327      	movs	r3, #39	; 0x27
   2c458:	18fb      	adds	r3, r7, r3
   2c45a:	781b      	ldrb	r3, [r3, #0]
   2c45c:	2b39      	cmp	r3, #57	; 0x39
   2c45e:	d906      	bls.n	2c46e <gen_numname+0x7a>
   2c460:	2327      	movs	r3, #39	; 0x27
   2c462:	18fb      	adds	r3, r7, r3
   2c464:	2227      	movs	r2, #39	; 0x27
   2c466:	18ba      	adds	r2, r7, r2
   2c468:	7812      	ldrb	r2, [r2, #0]
   2c46a:	3207      	adds	r2, #7
   2c46c:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2c46e:	6a3b      	ldr	r3, [r7, #32]
   2c470:	1e5a      	subs	r2, r3, #1
   2c472:	623a      	str	r2, [r7, #32]
   2c474:	2214      	movs	r2, #20
   2c476:	18ba      	adds	r2, r7, r2
   2c478:	2127      	movs	r1, #39	; 0x27
   2c47a:	1879      	adds	r1, r7, r1
   2c47c:	7809      	ldrb	r1, [r1, #0]
   2c47e:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2c480:	1cbb      	adds	r3, r7, #2
   2c482:	1cba      	adds	r2, r7, #2
   2c484:	8812      	ldrh	r2, [r2, #0]
   2c486:	0912      	lsrs	r2, r2, #4
   2c488:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2c48a:	1cbb      	adds	r3, r7, #2
   2c48c:	881b      	ldrh	r3, [r3, #0]
   2c48e:	2b00      	cmp	r3, #0
   2c490:	d1d7      	bne.n	2c442 <gen_numname+0x4e>
	ns[i] = '~';
   2c492:	2314      	movs	r3, #20
   2c494:	18fa      	adds	r2, r7, r3
   2c496:	6a3b      	ldr	r3, [r7, #32]
   2c498:	18d3      	adds	r3, r2, r3
   2c49a:	227e      	movs	r2, #126	; 0x7e
   2c49c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2c49e:	2300      	movs	r3, #0
   2c4a0:	61fb      	str	r3, [r7, #28]
   2c4a2:	e002      	b.n	2c4aa <gen_numname+0xb6>
   2c4a4:	69fb      	ldr	r3, [r7, #28]
   2c4a6:	3301      	adds	r3, #1
   2c4a8:	61fb      	str	r3, [r7, #28]
   2c4aa:	69fa      	ldr	r2, [r7, #28]
   2c4ac:	6a3b      	ldr	r3, [r7, #32]
   2c4ae:	429a      	cmp	r2, r3
   2c4b0:	d205      	bcs.n	2c4be <gen_numname+0xca>
   2c4b2:	68fa      	ldr	r2, [r7, #12]
   2c4b4:	69fb      	ldr	r3, [r7, #28]
   2c4b6:	18d3      	adds	r3, r2, r3
   2c4b8:	781b      	ldrb	r3, [r3, #0]
   2c4ba:	2b20      	cmp	r3, #32
   2c4bc:	d1f2      	bne.n	2c4a4 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2c4be:	69fb      	ldr	r3, [r7, #28]
   2c4c0:	1c5a      	adds	r2, r3, #1
   2c4c2:	61fa      	str	r2, [r7, #28]
   2c4c4:	68fa      	ldr	r2, [r7, #12]
   2c4c6:	18d2      	adds	r2, r2, r3
   2c4c8:	6a3b      	ldr	r3, [r7, #32]
   2c4ca:	2b07      	cmp	r3, #7
   2c4cc:	d806      	bhi.n	2c4dc <gen_numname+0xe8>
   2c4ce:	6a3b      	ldr	r3, [r7, #32]
   2c4d0:	1c59      	adds	r1, r3, #1
   2c4d2:	6239      	str	r1, [r7, #32]
   2c4d4:	2114      	movs	r1, #20
   2c4d6:	1879      	adds	r1, r7, r1
   2c4d8:	5ccb      	ldrb	r3, [r1, r3]
   2c4da:	e000      	b.n	2c4de <gen_numname+0xea>
   2c4dc:	2320      	movs	r3, #32
   2c4de:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2c4e0:	69fb      	ldr	r3, [r7, #28]
   2c4e2:	2b07      	cmp	r3, #7
   2c4e4:	d9eb      	bls.n	2c4be <gen_numname+0xca>
}
   2c4e6:	46c0      	nop			; (mov r8, r8)
   2c4e8:	46bd      	mov	sp, r7
   2c4ea:	b00a      	add	sp, #40	; 0x28
   2c4ec:	bd80      	pop	{r7, pc}
   2c4ee:	46c0      	nop			; (mov r8, r8)
   2c4f0:	0002b599 	.word	0x0002b599

0002c4f4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2c4f4:	b580      	push	{r7, lr}
   2c4f6:	b084      	sub	sp, #16
   2c4f8:	af00      	add	r7, sp, #0
   2c4fa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2c4fc:	230f      	movs	r3, #15
   2c4fe:	18fb      	adds	r3, r7, r3
   2c500:	2200      	movs	r2, #0
   2c502:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2c504:	230b      	movs	r3, #11
   2c506:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2c508:	230f      	movs	r3, #15
   2c50a:	18fb      	adds	r3, r7, r3
   2c50c:	781b      	ldrb	r3, [r3, #0]
   2c50e:	b2da      	uxtb	r2, r3
   2c510:	0852      	lsrs	r2, r2, #1
   2c512:	01db      	lsls	r3, r3, #7
   2c514:	4313      	orrs	r3, r2
   2c516:	b2d9      	uxtb	r1, r3
   2c518:	687b      	ldr	r3, [r7, #4]
   2c51a:	1c5a      	adds	r2, r3, #1
   2c51c:	607a      	str	r2, [r7, #4]
   2c51e:	781a      	ldrb	r2, [r3, #0]
   2c520:	230f      	movs	r3, #15
   2c522:	18fb      	adds	r3, r7, r3
   2c524:	188a      	adds	r2, r1, r2
   2c526:	701a      	strb	r2, [r3, #0]
   2c528:	68bb      	ldr	r3, [r7, #8]
   2c52a:	3b01      	subs	r3, #1
   2c52c:	60bb      	str	r3, [r7, #8]
   2c52e:	68bb      	ldr	r3, [r7, #8]
   2c530:	2b00      	cmp	r3, #0
   2c532:	d1e9      	bne.n	2c508 <sum_sfn+0x14>
	return sum;
   2c534:	230f      	movs	r3, #15
   2c536:	18fb      	adds	r3, r7, r3
   2c538:	781b      	ldrb	r3, [r3, #0]
}
   2c53a:	0018      	movs	r0, r3
   2c53c:	46bd      	mov	sp, r7
   2c53e:	b004      	add	sp, #16
   2c540:	bd80      	pop	{r7, pc}
	...

0002c544 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2c544:	b590      	push	{r4, r7, lr}
   2c546:	b087      	sub	sp, #28
   2c548:	af00      	add	r7, sp, #0
   2c54a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2c54c:	2317      	movs	r3, #23
   2c54e:	18fc      	adds	r4, r7, r3
   2c550:	687b      	ldr	r3, [r7, #4]
   2c552:	2100      	movs	r1, #0
   2c554:	0018      	movs	r0, r3
   2c556:	4b74      	ldr	r3, [pc, #464]	; (2c728 <dir_find+0x1e4>)
   2c558:	4798      	blx	r3
   2c55a:	0003      	movs	r3, r0
   2c55c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2c55e:	2317      	movs	r3, #23
   2c560:	18fb      	adds	r3, r7, r3
   2c562:	781b      	ldrb	r3, [r3, #0]
   2c564:	2b00      	cmp	r3, #0
   2c566:	d003      	beq.n	2c570 <dir_find+0x2c>
   2c568:	2317      	movs	r3, #23
   2c56a:	18fb      	adds	r3, r7, r3
   2c56c:	781b      	ldrb	r3, [r3, #0]
   2c56e:	e0d6      	b.n	2c71e <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2c570:	2314      	movs	r3, #20
   2c572:	18fb      	adds	r3, r7, r3
   2c574:	22ff      	movs	r2, #255	; 0xff
   2c576:	701a      	strb	r2, [r3, #0]
   2c578:	2315      	movs	r3, #21
   2c57a:	18fb      	adds	r3, r7, r3
   2c57c:	2214      	movs	r2, #20
   2c57e:	18ba      	adds	r2, r7, r2
   2c580:	7812      	ldrb	r2, [r2, #0]
   2c582:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2c584:	687b      	ldr	r3, [r7, #4]
   2c586:	681a      	ldr	r2, [r3, #0]
   2c588:	687b      	ldr	r3, [r7, #4]
   2c58a:	691b      	ldr	r3, [r3, #16]
   2c58c:	2117      	movs	r1, #23
   2c58e:	187c      	adds	r4, r7, r1
   2c590:	0019      	movs	r1, r3
   2c592:	0010      	movs	r0, r2
   2c594:	4b65      	ldr	r3, [pc, #404]	; (2c72c <dir_find+0x1e8>)
   2c596:	4798      	blx	r3
   2c598:	0003      	movs	r3, r0
   2c59a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2c59c:	2317      	movs	r3, #23
   2c59e:	18fb      	adds	r3, r7, r3
   2c5a0:	781b      	ldrb	r3, [r3, #0]
   2c5a2:	2b00      	cmp	r3, #0
   2c5a4:	d000      	beq.n	2c5a8 <dir_find+0x64>
   2c5a6:	e0b2      	b.n	2c70e <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2c5a8:	687b      	ldr	r3, [r7, #4]
   2c5aa:	695b      	ldr	r3, [r3, #20]
   2c5ac:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2c5ae:	2316      	movs	r3, #22
   2c5b0:	18fb      	adds	r3, r7, r3
   2c5b2:	693a      	ldr	r2, [r7, #16]
   2c5b4:	7812      	ldrb	r2, [r2, #0]
   2c5b6:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2c5b8:	2316      	movs	r3, #22
   2c5ba:	18fb      	adds	r3, r7, r3
   2c5bc:	781b      	ldrb	r3, [r3, #0]
   2c5be:	2b00      	cmp	r3, #0
   2c5c0:	d104      	bne.n	2c5cc <dir_find+0x88>
   2c5c2:	2317      	movs	r3, #23
   2c5c4:	18fb      	adds	r3, r7, r3
   2c5c6:	2204      	movs	r2, #4
   2c5c8:	701a      	strb	r2, [r3, #0]
   2c5ca:	e0a5      	b.n	2c718 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2c5cc:	693b      	ldr	r3, [r7, #16]
   2c5ce:	330b      	adds	r3, #11
   2c5d0:	781a      	ldrb	r2, [r3, #0]
   2c5d2:	230f      	movs	r3, #15
   2c5d4:	18fb      	adds	r3, r7, r3
   2c5d6:	213f      	movs	r1, #63	; 0x3f
   2c5d8:	400a      	ands	r2, r1
   2c5da:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2c5dc:	2316      	movs	r3, #22
   2c5de:	18fb      	adds	r3, r7, r3
   2c5e0:	781b      	ldrb	r3, [r3, #0]
   2c5e2:	2be5      	cmp	r3, #229	; 0xe5
   2c5e4:	d00a      	beq.n	2c5fc <dir_find+0xb8>
   2c5e6:	230f      	movs	r3, #15
   2c5e8:	18fb      	adds	r3, r7, r3
   2c5ea:	781b      	ldrb	r3, [r3, #0]
   2c5ec:	2208      	movs	r2, #8
   2c5ee:	4013      	ands	r3, r2
   2c5f0:	d009      	beq.n	2c606 <dir_find+0xc2>
   2c5f2:	230f      	movs	r3, #15
   2c5f4:	18fb      	adds	r3, r7, r3
   2c5f6:	781b      	ldrb	r3, [r3, #0]
   2c5f8:	2b0f      	cmp	r3, #15
   2c5fa:	d004      	beq.n	2c606 <dir_find+0xc2>
			ord = 0xFF;
   2c5fc:	2315      	movs	r3, #21
   2c5fe:	18fb      	adds	r3, r7, r3
   2c600:	22ff      	movs	r2, #255	; 0xff
   2c602:	701a      	strb	r2, [r3, #0]
   2c604:	e073      	b.n	2c6ee <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2c606:	230f      	movs	r3, #15
   2c608:	18fb      	adds	r3, r7, r3
   2c60a:	781b      	ldrb	r3, [r3, #0]
   2c60c:	2b0f      	cmp	r3, #15
   2c60e:	d145      	bne.n	2c69c <dir_find+0x158>
				if (dj->lfn) {
   2c610:	687b      	ldr	r3, [r7, #4]
   2c612:	69db      	ldr	r3, [r3, #28]
   2c614:	2b00      	cmp	r3, #0
   2c616:	d100      	bne.n	2c61a <dir_find+0xd6>
   2c618:	e069      	b.n	2c6ee <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2c61a:	2316      	movs	r3, #22
   2c61c:	18fb      	adds	r3, r7, r3
   2c61e:	781b      	ldrb	r3, [r3, #0]
   2c620:	2240      	movs	r2, #64	; 0x40
   2c622:	4013      	ands	r3, r2
   2c624:	d016      	beq.n	2c654 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2c626:	2314      	movs	r3, #20
   2c628:	18fb      	adds	r3, r7, r3
   2c62a:	693a      	ldr	r2, [r7, #16]
   2c62c:	7b52      	ldrb	r2, [r2, #13]
   2c62e:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2c630:	2316      	movs	r3, #22
   2c632:	18fb      	adds	r3, r7, r3
   2c634:	2216      	movs	r2, #22
   2c636:	18ba      	adds	r2, r7, r2
   2c638:	7812      	ldrb	r2, [r2, #0]
   2c63a:	2140      	movs	r1, #64	; 0x40
   2c63c:	438a      	bics	r2, r1
   2c63e:	701a      	strb	r2, [r3, #0]
   2c640:	2315      	movs	r3, #21
   2c642:	18fb      	adds	r3, r7, r3
   2c644:	2216      	movs	r2, #22
   2c646:	18ba      	adds	r2, r7, r2
   2c648:	7812      	ldrb	r2, [r2, #0]
   2c64a:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2c64c:	687b      	ldr	r3, [r7, #4]
   2c64e:	88da      	ldrh	r2, [r3, #6]
   2c650:	687b      	ldr	r3, [r7, #4]
   2c652:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2c654:	2316      	movs	r3, #22
   2c656:	18fa      	adds	r2, r7, r3
   2c658:	2315      	movs	r3, #21
   2c65a:	18fb      	adds	r3, r7, r3
   2c65c:	7812      	ldrb	r2, [r2, #0]
   2c65e:	781b      	ldrb	r3, [r3, #0]
   2c660:	429a      	cmp	r2, r3
   2c662:	d116      	bne.n	2c692 <dir_find+0x14e>
   2c664:	693b      	ldr	r3, [r7, #16]
   2c666:	330d      	adds	r3, #13
   2c668:	781b      	ldrb	r3, [r3, #0]
   2c66a:	2214      	movs	r2, #20
   2c66c:	18ba      	adds	r2, r7, r2
   2c66e:	7812      	ldrb	r2, [r2, #0]
   2c670:	429a      	cmp	r2, r3
   2c672:	d10e      	bne.n	2c692 <dir_find+0x14e>
   2c674:	687b      	ldr	r3, [r7, #4]
   2c676:	69db      	ldr	r3, [r3, #28]
   2c678:	693a      	ldr	r2, [r7, #16]
   2c67a:	0011      	movs	r1, r2
   2c67c:	0018      	movs	r0, r3
   2c67e:	4b2c      	ldr	r3, [pc, #176]	; (2c730 <dir_find+0x1ec>)
   2c680:	4798      	blx	r3
   2c682:	1e03      	subs	r3, r0, #0
   2c684:	d005      	beq.n	2c692 <dir_find+0x14e>
   2c686:	2315      	movs	r3, #21
   2c688:	18fb      	adds	r3, r7, r3
   2c68a:	781b      	ldrb	r3, [r3, #0]
   2c68c:	3b01      	subs	r3, #1
   2c68e:	b2da      	uxtb	r2, r3
   2c690:	e000      	b.n	2c694 <dir_find+0x150>
   2c692:	22ff      	movs	r2, #255	; 0xff
   2c694:	2315      	movs	r3, #21
   2c696:	18fb      	adds	r3, r7, r3
   2c698:	701a      	strb	r2, [r3, #0]
   2c69a:	e028      	b.n	2c6ee <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2c69c:	2315      	movs	r3, #21
   2c69e:	18fb      	adds	r3, r7, r3
   2c6a0:	781b      	ldrb	r3, [r3, #0]
   2c6a2:	2b00      	cmp	r3, #0
   2c6a4:	d10a      	bne.n	2c6bc <dir_find+0x178>
   2c6a6:	693b      	ldr	r3, [r7, #16]
   2c6a8:	0018      	movs	r0, r3
   2c6aa:	4b22      	ldr	r3, [pc, #136]	; (2c734 <dir_find+0x1f0>)
   2c6ac:	4798      	blx	r3
   2c6ae:	0003      	movs	r3, r0
   2c6b0:	001a      	movs	r2, r3
   2c6b2:	2314      	movs	r3, #20
   2c6b4:	18fb      	adds	r3, r7, r3
   2c6b6:	781b      	ldrb	r3, [r3, #0]
   2c6b8:	4293      	cmp	r3, r2
   2c6ba:	d02a      	beq.n	2c712 <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2c6bc:	2315      	movs	r3, #21
   2c6be:	18fb      	adds	r3, r7, r3
   2c6c0:	22ff      	movs	r2, #255	; 0xff
   2c6c2:	701a      	strb	r2, [r3, #0]
   2c6c4:	687b      	ldr	r3, [r7, #4]
   2c6c6:	2201      	movs	r2, #1
   2c6c8:	4252      	negs	r2, r2
   2c6ca:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2c6cc:	687b      	ldr	r3, [r7, #4]
   2c6ce:	699b      	ldr	r3, [r3, #24]
   2c6d0:	330b      	adds	r3, #11
   2c6d2:	781b      	ldrb	r3, [r3, #0]
   2c6d4:	001a      	movs	r2, r3
   2c6d6:	2301      	movs	r3, #1
   2c6d8:	4013      	ands	r3, r2
   2c6da:	d108      	bne.n	2c6ee <dir_find+0x1aa>
   2c6dc:	687b      	ldr	r3, [r7, #4]
   2c6de:	6999      	ldr	r1, [r3, #24]
   2c6e0:	693b      	ldr	r3, [r7, #16]
   2c6e2:	220b      	movs	r2, #11
   2c6e4:	0018      	movs	r0, r3
   2c6e6:	4b14      	ldr	r3, [pc, #80]	; (2c738 <dir_find+0x1f4>)
   2c6e8:	4798      	blx	r3
   2c6ea:	1e03      	subs	r3, r0, #0
   2c6ec:	d013      	beq.n	2c716 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2c6ee:	2317      	movs	r3, #23
   2c6f0:	18fc      	adds	r4, r7, r3
   2c6f2:	687b      	ldr	r3, [r7, #4]
   2c6f4:	2100      	movs	r1, #0
   2c6f6:	0018      	movs	r0, r3
   2c6f8:	4b10      	ldr	r3, [pc, #64]	; (2c73c <dir_find+0x1f8>)
   2c6fa:	4798      	blx	r3
   2c6fc:	0003      	movs	r3, r0
   2c6fe:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2c700:	2317      	movs	r3, #23
   2c702:	18fb      	adds	r3, r7, r3
   2c704:	781b      	ldrb	r3, [r3, #0]
   2c706:	2b00      	cmp	r3, #0
   2c708:	d100      	bne.n	2c70c <dir_find+0x1c8>
   2c70a:	e73b      	b.n	2c584 <dir_find+0x40>
   2c70c:	e004      	b.n	2c718 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2c70e:	46c0      	nop			; (mov r8, r8)
   2c710:	e002      	b.n	2c718 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2c712:	46c0      	nop			; (mov r8, r8)
   2c714:	e000      	b.n	2c718 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2c716:	46c0      	nop			; (mov r8, r8)

	return res;
   2c718:	2317      	movs	r3, #23
   2c71a:	18fb      	adds	r3, r7, r3
   2c71c:	781b      	ldrb	r3, [r3, #0]
}
   2c71e:	0018      	movs	r0, r3
   2c720:	46bd      	mov	sp, r7
   2c722:	b007      	add	sp, #28
   2c724:	bd90      	pop	{r4, r7, pc}
   2c726:	46c0      	nop			; (mov r8, r8)
   2c728:	0002bec1 	.word	0x0002bec1
   2c72c:	0002b67d 	.word	0x0002b67d
   2c730:	0002c1e1 	.word	0x0002c1e1
   2c734:	0002c4f5 	.word	0x0002c4f5
   2c738:	0002b601 	.word	0x0002b601
   2c73c:	0002bff1 	.word	0x0002bff1

0002c740 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2c740:	b590      	push	{r4, r7, lr}
   2c742:	b08d      	sub	sp, #52	; 0x34
   2c744:	af00      	add	r7, sp, #0
   2c746:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2c748:	687b      	ldr	r3, [r7, #4]
   2c74a:	699b      	ldr	r3, [r3, #24]
   2c74c:	627b      	str	r3, [r7, #36]	; 0x24
   2c74e:	687b      	ldr	r3, [r7, #4]
   2c750:	69db      	ldr	r3, [r3, #28]
   2c752:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2c754:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2c756:	230c      	movs	r3, #12
   2c758:	18fb      	adds	r3, r7, r3
   2c75a:	220c      	movs	r2, #12
   2c75c:	0018      	movs	r0, r3
   2c75e:	4bc8      	ldr	r3, [pc, #800]	; (2ca80 <dir_register+0x340>)
   2c760:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2c762:	230c      	movs	r3, #12
   2c764:	18fb      	adds	r3, r7, r3
   2c766:	7adb      	ldrb	r3, [r3, #11]
   2c768:	001a      	movs	r2, r3
   2c76a:	2301      	movs	r3, #1
   2c76c:	4013      	ands	r3, r2
   2c76e:	d048      	beq.n	2c802 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2c770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c772:	330b      	adds	r3, #11
   2c774:	2200      	movs	r2, #0
   2c776:	701a      	strb	r2, [r3, #0]
   2c778:	687b      	ldr	r3, [r7, #4]
   2c77a:	2200      	movs	r2, #0
   2c77c:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2c77e:	232c      	movs	r3, #44	; 0x2c
   2c780:	18fb      	adds	r3, r7, r3
   2c782:	2201      	movs	r2, #1
   2c784:	801a      	strh	r2, [r3, #0]
   2c786:	e01c      	b.n	2c7c2 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2c788:	232c      	movs	r3, #44	; 0x2c
   2c78a:	18fb      	adds	r3, r7, r3
   2c78c:	881b      	ldrh	r3, [r3, #0]
   2c78e:	6a3a      	ldr	r2, [r7, #32]
   2c790:	210c      	movs	r1, #12
   2c792:	1879      	adds	r1, r7, r1
   2c794:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2c796:	4cbb      	ldr	r4, [pc, #748]	; (2ca84 <dir_register+0x344>)
   2c798:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2c79a:	232f      	movs	r3, #47	; 0x2f
   2c79c:	18fc      	adds	r4, r7, r3
   2c79e:	687b      	ldr	r3, [r7, #4]
   2c7a0:	0018      	movs	r0, r3
   2c7a2:	4bb9      	ldr	r3, [pc, #740]	; (2ca88 <dir_register+0x348>)
   2c7a4:	4798      	blx	r3
   2c7a6:	0003      	movs	r3, r0
   2c7a8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c7aa:	232f      	movs	r3, #47	; 0x2f
   2c7ac:	18fb      	adds	r3, r7, r3
   2c7ae:	781b      	ldrb	r3, [r3, #0]
   2c7b0:	2b00      	cmp	r3, #0
   2c7b2:	d10c      	bne.n	2c7ce <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2c7b4:	232c      	movs	r3, #44	; 0x2c
   2c7b6:	18fb      	adds	r3, r7, r3
   2c7b8:	881a      	ldrh	r2, [r3, #0]
   2c7ba:	232c      	movs	r3, #44	; 0x2c
   2c7bc:	18fb      	adds	r3, r7, r3
   2c7be:	3201      	adds	r2, #1
   2c7c0:	801a      	strh	r2, [r3, #0]
   2c7c2:	232c      	movs	r3, #44	; 0x2c
   2c7c4:	18fb      	adds	r3, r7, r3
   2c7c6:	881b      	ldrh	r3, [r3, #0]
   2c7c8:	2b63      	cmp	r3, #99	; 0x63
   2c7ca:	d9dd      	bls.n	2c788 <dir_register+0x48>
   2c7cc:	e000      	b.n	2c7d0 <dir_register+0x90>
			if (res != FR_OK) break;
   2c7ce:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2c7d0:	232c      	movs	r3, #44	; 0x2c
   2c7d2:	18fb      	adds	r3, r7, r3
   2c7d4:	881b      	ldrh	r3, [r3, #0]
   2c7d6:	2b64      	cmp	r3, #100	; 0x64
   2c7d8:	d101      	bne.n	2c7de <dir_register+0x9e>
   2c7da:	2307      	movs	r3, #7
   2c7dc:	e14c      	b.n	2ca78 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2c7de:	232f      	movs	r3, #47	; 0x2f
   2c7e0:	18fb      	adds	r3, r7, r3
   2c7e2:	781b      	ldrb	r3, [r3, #0]
   2c7e4:	2b04      	cmp	r3, #4
   2c7e6:	d003      	beq.n	2c7f0 <dir_register+0xb0>
   2c7e8:	232f      	movs	r3, #47	; 0x2f
   2c7ea:	18fb      	adds	r3, r7, r3
   2c7ec:	781b      	ldrb	r3, [r3, #0]
   2c7ee:	e143      	b.n	2ca78 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2c7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c7f2:	330b      	adds	r3, #11
   2c7f4:	220c      	movs	r2, #12
   2c7f6:	18ba      	adds	r2, r7, r2
   2c7f8:	7ad2      	ldrb	r2, [r2, #11]
   2c7fa:	701a      	strb	r2, [r3, #0]
   2c7fc:	687b      	ldr	r3, [r7, #4]
   2c7fe:	6a3a      	ldr	r2, [r7, #32]
   2c800:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2c802:	230c      	movs	r3, #12
   2c804:	18fb      	adds	r3, r7, r3
   2c806:	7adb      	ldrb	r3, [r3, #11]
   2c808:	001a      	movs	r2, r3
   2c80a:	2302      	movs	r3, #2
   2c80c:	4013      	ands	r3, r2
   2c80e:	d023      	beq.n	2c858 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2c810:	232a      	movs	r3, #42	; 0x2a
   2c812:	18fb      	adds	r3, r7, r3
   2c814:	2200      	movs	r2, #0
   2c816:	801a      	strh	r2, [r3, #0]
   2c818:	e006      	b.n	2c828 <dir_register+0xe8>
   2c81a:	232a      	movs	r3, #42	; 0x2a
   2c81c:	18fb      	adds	r3, r7, r3
   2c81e:	881a      	ldrh	r2, [r3, #0]
   2c820:	232a      	movs	r3, #42	; 0x2a
   2c822:	18fb      	adds	r3, r7, r3
   2c824:	3201      	adds	r2, #1
   2c826:	801a      	strh	r2, [r3, #0]
   2c828:	232a      	movs	r3, #42	; 0x2a
   2c82a:	18fb      	adds	r3, r7, r3
   2c82c:	881b      	ldrh	r3, [r3, #0]
   2c82e:	005b      	lsls	r3, r3, #1
   2c830:	6a3a      	ldr	r2, [r7, #32]
   2c832:	18d3      	adds	r3, r2, r3
   2c834:	881b      	ldrh	r3, [r3, #0]
   2c836:	2b00      	cmp	r3, #0
   2c838:	d1ef      	bne.n	2c81a <dir_register+0xda>
		ne = (ne + 25) / 13;
   2c83a:	232a      	movs	r3, #42	; 0x2a
   2c83c:	18fb      	adds	r3, r7, r3
   2c83e:	881b      	ldrh	r3, [r3, #0]
   2c840:	3319      	adds	r3, #25
   2c842:	001a      	movs	r2, r3
   2c844:	4b91      	ldr	r3, [pc, #580]	; (2ca8c <dir_register+0x34c>)
   2c846:	210d      	movs	r1, #13
   2c848:	0010      	movs	r0, r2
   2c84a:	4798      	blx	r3
   2c84c:	0003      	movs	r3, r0
   2c84e:	001a      	movs	r2, r3
   2c850:	232a      	movs	r3, #42	; 0x2a
   2c852:	18fb      	adds	r3, r7, r3
   2c854:	801a      	strh	r2, [r3, #0]
   2c856:	e003      	b.n	2c860 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2c858:	232a      	movs	r3, #42	; 0x2a
   2c85a:	18fb      	adds	r3, r7, r3
   2c85c:	2201      	movs	r2, #1
   2c85e:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2c860:	232f      	movs	r3, #47	; 0x2f
   2c862:	18fc      	adds	r4, r7, r3
   2c864:	687b      	ldr	r3, [r7, #4]
   2c866:	2100      	movs	r1, #0
   2c868:	0018      	movs	r0, r3
   2c86a:	4b89      	ldr	r3, [pc, #548]	; (2ca90 <dir_register+0x350>)
   2c86c:	4798      	blx	r3
   2c86e:	0003      	movs	r3, r0
   2c870:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2c872:	232f      	movs	r3, #47	; 0x2f
   2c874:	18fb      	adds	r3, r7, r3
   2c876:	781b      	ldrb	r3, [r3, #0]
   2c878:	2b00      	cmp	r3, #0
   2c87a:	d003      	beq.n	2c884 <dir_register+0x144>
   2c87c:	232f      	movs	r3, #47	; 0x2f
   2c87e:	18fb      	adds	r3, r7, r3
   2c880:	781b      	ldrb	r3, [r3, #0]
   2c882:	e0f9      	b.n	2ca78 <dir_register+0x338>
	n = is = 0;
   2c884:	2328      	movs	r3, #40	; 0x28
   2c886:	18fb      	adds	r3, r7, r3
   2c888:	2200      	movs	r2, #0
   2c88a:	801a      	strh	r2, [r3, #0]
   2c88c:	232c      	movs	r3, #44	; 0x2c
   2c88e:	18fb      	adds	r3, r7, r3
   2c890:	2228      	movs	r2, #40	; 0x28
   2c892:	18ba      	adds	r2, r7, r2
   2c894:	8812      	ldrh	r2, [r2, #0]
   2c896:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2c898:	687b      	ldr	r3, [r7, #4]
   2c89a:	681a      	ldr	r2, [r3, #0]
   2c89c:	687b      	ldr	r3, [r7, #4]
   2c89e:	691b      	ldr	r3, [r3, #16]
   2c8a0:	212f      	movs	r1, #47	; 0x2f
   2c8a2:	187c      	adds	r4, r7, r1
   2c8a4:	0019      	movs	r1, r3
   2c8a6:	0010      	movs	r0, r2
   2c8a8:	4b7a      	ldr	r3, [pc, #488]	; (2ca94 <dir_register+0x354>)
   2c8aa:	4798      	blx	r3
   2c8ac:	0003      	movs	r3, r0
   2c8ae:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2c8b0:	232f      	movs	r3, #47	; 0x2f
   2c8b2:	18fb      	adds	r3, r7, r3
   2c8b4:	781b      	ldrb	r3, [r3, #0]
   2c8b6:	2b00      	cmp	r3, #0
   2c8b8:	d13c      	bne.n	2c934 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2c8ba:	687b      	ldr	r3, [r7, #4]
   2c8bc:	695a      	ldr	r2, [r3, #20]
   2c8be:	231f      	movs	r3, #31
   2c8c0:	18fb      	adds	r3, r7, r3
   2c8c2:	7812      	ldrb	r2, [r2, #0]
   2c8c4:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2c8c6:	231f      	movs	r3, #31
   2c8c8:	18fb      	adds	r3, r7, r3
   2c8ca:	781b      	ldrb	r3, [r3, #0]
   2c8cc:	2be5      	cmp	r3, #229	; 0xe5
   2c8ce:	d004      	beq.n	2c8da <dir_register+0x19a>
   2c8d0:	231f      	movs	r3, #31
   2c8d2:	18fb      	adds	r3, r7, r3
   2c8d4:	781b      	ldrb	r3, [r3, #0]
   2c8d6:	2b00      	cmp	r3, #0
   2c8d8:	d119      	bne.n	2c90e <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2c8da:	232c      	movs	r3, #44	; 0x2c
   2c8dc:	18fb      	adds	r3, r7, r3
   2c8de:	881b      	ldrh	r3, [r3, #0]
   2c8e0:	2b00      	cmp	r3, #0
   2c8e2:	d104      	bne.n	2c8ee <dir_register+0x1ae>
   2c8e4:	2328      	movs	r3, #40	; 0x28
   2c8e6:	18fb      	adds	r3, r7, r3
   2c8e8:	687a      	ldr	r2, [r7, #4]
   2c8ea:	88d2      	ldrh	r2, [r2, #6]
   2c8ec:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2c8ee:	232c      	movs	r3, #44	; 0x2c
   2c8f0:	18fb      	adds	r3, r7, r3
   2c8f2:	222c      	movs	r2, #44	; 0x2c
   2c8f4:	18ba      	adds	r2, r7, r2
   2c8f6:	8812      	ldrh	r2, [r2, #0]
   2c8f8:	3201      	adds	r2, #1
   2c8fa:	801a      	strh	r2, [r3, #0]
   2c8fc:	232c      	movs	r3, #44	; 0x2c
   2c8fe:	18fa      	adds	r2, r7, r3
   2c900:	232a      	movs	r3, #42	; 0x2a
   2c902:	18fb      	adds	r3, r7, r3
   2c904:	8812      	ldrh	r2, [r2, #0]
   2c906:	881b      	ldrh	r3, [r3, #0]
   2c908:	429a      	cmp	r2, r3
   2c90a:	d104      	bne.n	2c916 <dir_register+0x1d6>
   2c90c:	e013      	b.n	2c936 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2c90e:	232c      	movs	r3, #44	; 0x2c
   2c910:	18fb      	adds	r3, r7, r3
   2c912:	2200      	movs	r2, #0
   2c914:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2c916:	232f      	movs	r3, #47	; 0x2f
   2c918:	18fc      	adds	r4, r7, r3
   2c91a:	687b      	ldr	r3, [r7, #4]
   2c91c:	2101      	movs	r1, #1
   2c91e:	0018      	movs	r0, r3
   2c920:	4b5d      	ldr	r3, [pc, #372]	; (2ca98 <dir_register+0x358>)
   2c922:	4798      	blx	r3
   2c924:	0003      	movs	r3, r0
   2c926:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2c928:	232f      	movs	r3, #47	; 0x2f
   2c92a:	18fb      	adds	r3, r7, r3
   2c92c:	781b      	ldrb	r3, [r3, #0]
   2c92e:	2b00      	cmp	r3, #0
   2c930:	d0b2      	beq.n	2c898 <dir_register+0x158>
   2c932:	e000      	b.n	2c936 <dir_register+0x1f6>
		if (res != FR_OK) break;
   2c934:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2c936:	232f      	movs	r3, #47	; 0x2f
   2c938:	18fb      	adds	r3, r7, r3
   2c93a:	781b      	ldrb	r3, [r3, #0]
   2c93c:	2b00      	cmp	r3, #0
   2c93e:	d163      	bne.n	2ca08 <dir_register+0x2c8>
   2c940:	232a      	movs	r3, #42	; 0x2a
   2c942:	18fb      	adds	r3, r7, r3
   2c944:	881b      	ldrh	r3, [r3, #0]
   2c946:	2b01      	cmp	r3, #1
   2c948:	d95e      	bls.n	2ca08 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2c94a:	232f      	movs	r3, #47	; 0x2f
   2c94c:	18fc      	adds	r4, r7, r3
   2c94e:	2328      	movs	r3, #40	; 0x28
   2c950:	18fb      	adds	r3, r7, r3
   2c952:	881a      	ldrh	r2, [r3, #0]
   2c954:	687b      	ldr	r3, [r7, #4]
   2c956:	0011      	movs	r1, r2
   2c958:	0018      	movs	r0, r3
   2c95a:	4b4d      	ldr	r3, [pc, #308]	; (2ca90 <dir_register+0x350>)
   2c95c:	4798      	blx	r3
   2c95e:	0003      	movs	r3, r0
   2c960:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2c962:	232f      	movs	r3, #47	; 0x2f
   2c964:	18fb      	adds	r3, r7, r3
   2c966:	781b      	ldrb	r3, [r3, #0]
   2c968:	2b00      	cmp	r3, #0
   2c96a:	d14d      	bne.n	2ca08 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2c96c:	687b      	ldr	r3, [r7, #4]
   2c96e:	699b      	ldr	r3, [r3, #24]
   2c970:	221e      	movs	r2, #30
   2c972:	18bc      	adds	r4, r7, r2
   2c974:	0018      	movs	r0, r3
   2c976:	4b49      	ldr	r3, [pc, #292]	; (2ca9c <dir_register+0x35c>)
   2c978:	4798      	blx	r3
   2c97a:	0003      	movs	r3, r0
   2c97c:	7023      	strb	r3, [r4, #0]
			ne--;
   2c97e:	232a      	movs	r3, #42	; 0x2a
   2c980:	18fb      	adds	r3, r7, r3
   2c982:	881a      	ldrh	r2, [r3, #0]
   2c984:	232a      	movs	r3, #42	; 0x2a
   2c986:	18fb      	adds	r3, r7, r3
   2c988:	3a01      	subs	r2, #1
   2c98a:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2c98c:	687b      	ldr	r3, [r7, #4]
   2c98e:	681a      	ldr	r2, [r3, #0]
   2c990:	687b      	ldr	r3, [r7, #4]
   2c992:	691b      	ldr	r3, [r3, #16]
   2c994:	212f      	movs	r1, #47	; 0x2f
   2c996:	187c      	adds	r4, r7, r1
   2c998:	0019      	movs	r1, r3
   2c99a:	0010      	movs	r0, r2
   2c99c:	4b3d      	ldr	r3, [pc, #244]	; (2ca94 <dir_register+0x354>)
   2c99e:	4798      	blx	r3
   2c9a0:	0003      	movs	r3, r0
   2c9a2:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2c9a4:	232f      	movs	r3, #47	; 0x2f
   2c9a6:	18fb      	adds	r3, r7, r3
   2c9a8:	781b      	ldrb	r3, [r3, #0]
   2c9aa:	2b00      	cmp	r3, #0
   2c9ac:	d12b      	bne.n	2ca06 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2c9ae:	687b      	ldr	r3, [r7, #4]
   2c9b0:	69d8      	ldr	r0, [r3, #28]
   2c9b2:	687b      	ldr	r3, [r7, #4]
   2c9b4:	6959      	ldr	r1, [r3, #20]
   2c9b6:	232a      	movs	r3, #42	; 0x2a
   2c9b8:	18fb      	adds	r3, r7, r3
   2c9ba:	881b      	ldrh	r3, [r3, #0]
   2c9bc:	b2da      	uxtb	r2, r3
   2c9be:	231e      	movs	r3, #30
   2c9c0:	18fb      	adds	r3, r7, r3
   2c9c2:	781b      	ldrb	r3, [r3, #0]
   2c9c4:	4c36      	ldr	r4, [pc, #216]	; (2caa0 <dir_register+0x360>)
   2c9c6:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2c9c8:	687b      	ldr	r3, [r7, #4]
   2c9ca:	681b      	ldr	r3, [r3, #0]
   2c9cc:	2201      	movs	r2, #1
   2c9ce:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2c9d0:	232f      	movs	r3, #47	; 0x2f
   2c9d2:	18fc      	adds	r4, r7, r3
   2c9d4:	687b      	ldr	r3, [r7, #4]
   2c9d6:	2100      	movs	r1, #0
   2c9d8:	0018      	movs	r0, r3
   2c9da:	4b2f      	ldr	r3, [pc, #188]	; (2ca98 <dir_register+0x358>)
   2c9dc:	4798      	blx	r3
   2c9de:	0003      	movs	r3, r0
   2c9e0:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2c9e2:	232f      	movs	r3, #47	; 0x2f
   2c9e4:	18fb      	adds	r3, r7, r3
   2c9e6:	781b      	ldrb	r3, [r3, #0]
   2c9e8:	2b00      	cmp	r3, #0
   2c9ea:	d10d      	bne.n	2ca08 <dir_register+0x2c8>
   2c9ec:	232a      	movs	r3, #42	; 0x2a
   2c9ee:	18fb      	adds	r3, r7, r3
   2c9f0:	222a      	movs	r2, #42	; 0x2a
   2c9f2:	18ba      	adds	r2, r7, r2
   2c9f4:	8812      	ldrh	r2, [r2, #0]
   2c9f6:	3a01      	subs	r2, #1
   2c9f8:	801a      	strh	r2, [r3, #0]
   2c9fa:	232a      	movs	r3, #42	; 0x2a
   2c9fc:	18fb      	adds	r3, r7, r3
   2c9fe:	881b      	ldrh	r3, [r3, #0]
   2ca00:	2b00      	cmp	r3, #0
   2ca02:	d1c3      	bne.n	2c98c <dir_register+0x24c>
   2ca04:	e000      	b.n	2ca08 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2ca06:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2ca08:	232f      	movs	r3, #47	; 0x2f
   2ca0a:	18fb      	adds	r3, r7, r3
   2ca0c:	781b      	ldrb	r3, [r3, #0]
   2ca0e:	2b00      	cmp	r3, #0
   2ca10:	d12f      	bne.n	2ca72 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2ca12:	687b      	ldr	r3, [r7, #4]
   2ca14:	681a      	ldr	r2, [r3, #0]
   2ca16:	687b      	ldr	r3, [r7, #4]
   2ca18:	691b      	ldr	r3, [r3, #16]
   2ca1a:	212f      	movs	r1, #47	; 0x2f
   2ca1c:	187c      	adds	r4, r7, r1
   2ca1e:	0019      	movs	r1, r3
   2ca20:	0010      	movs	r0, r2
   2ca22:	4b1c      	ldr	r3, [pc, #112]	; (2ca94 <dir_register+0x354>)
   2ca24:	4798      	blx	r3
   2ca26:	0003      	movs	r3, r0
   2ca28:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2ca2a:	232f      	movs	r3, #47	; 0x2f
   2ca2c:	18fb      	adds	r3, r7, r3
   2ca2e:	781b      	ldrb	r3, [r3, #0]
   2ca30:	2b00      	cmp	r3, #0
   2ca32:	d11e      	bne.n	2ca72 <dir_register+0x332>
			dir = dj->dir;
   2ca34:	687b      	ldr	r3, [r7, #4]
   2ca36:	695b      	ldr	r3, [r3, #20]
   2ca38:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2ca3a:	69bb      	ldr	r3, [r7, #24]
   2ca3c:	2220      	movs	r2, #32
   2ca3e:	2100      	movs	r1, #0
   2ca40:	0018      	movs	r0, r3
   2ca42:	4b18      	ldr	r3, [pc, #96]	; (2caa4 <dir_register+0x364>)
   2ca44:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2ca46:	687b      	ldr	r3, [r7, #4]
   2ca48:	6999      	ldr	r1, [r3, #24]
   2ca4a:	69bb      	ldr	r3, [r7, #24]
   2ca4c:	220b      	movs	r2, #11
   2ca4e:	0018      	movs	r0, r3
   2ca50:	4b0b      	ldr	r3, [pc, #44]	; (2ca80 <dir_register+0x340>)
   2ca52:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2ca54:	69bb      	ldr	r3, [r7, #24]
   2ca56:	330c      	adds	r3, #12
   2ca58:	001a      	movs	r2, r3
   2ca5a:	687b      	ldr	r3, [r7, #4]
   2ca5c:	699b      	ldr	r3, [r3, #24]
   2ca5e:	330b      	adds	r3, #11
   2ca60:	781b      	ldrb	r3, [r3, #0]
   2ca62:	2118      	movs	r1, #24
   2ca64:	400b      	ands	r3, r1
   2ca66:	b2db      	uxtb	r3, r3
   2ca68:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2ca6a:	687b      	ldr	r3, [r7, #4]
   2ca6c:	681b      	ldr	r3, [r3, #0]
   2ca6e:	2201      	movs	r2, #1
   2ca70:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2ca72:	232f      	movs	r3, #47	; 0x2f
   2ca74:	18fb      	adds	r3, r7, r3
   2ca76:	781b      	ldrb	r3, [r3, #0]
}
   2ca78:	0018      	movs	r0, r3
   2ca7a:	46bd      	mov	sp, r7
   2ca7c:	b00d      	add	sp, #52	; 0x34
   2ca7e:	bd90      	pop	{r4, r7, pc}
   2ca80:	0002b599 	.word	0x0002b599
   2ca84:	0002c3f5 	.word	0x0002c3f5
   2ca88:	0002c545 	.word	0x0002c545
   2ca8c:	00032919 	.word	0x00032919
   2ca90:	0002bec1 	.word	0x0002bec1
   2ca94:	0002b67d 	.word	0x0002b67d
   2ca98:	0002bff1 	.word	0x0002bff1
   2ca9c:	0002c4f5 	.word	0x0002c4f5
   2caa0:	0002c2e5 	.word	0x0002c2e5
   2caa4:	0002b5d1 	.word	0x0002b5d1

0002caa8 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2caa8:	b590      	push	{r4, r7, lr}
   2caaa:	b08b      	sub	sp, #44	; 0x2c
   2caac:	af00      	add	r7, sp, #0
   2caae:	6078      	str	r0, [r7, #4]
   2cab0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2cab2:	683b      	ldr	r3, [r7, #0]
   2cab4:	681b      	ldr	r3, [r3, #0]
   2cab6:	613b      	str	r3, [r7, #16]
   2cab8:	e002      	b.n	2cac0 <create_name+0x18>
   2caba:	693b      	ldr	r3, [r7, #16]
   2cabc:	3301      	adds	r3, #1
   2cabe:	613b      	str	r3, [r7, #16]
   2cac0:	693b      	ldr	r3, [r7, #16]
   2cac2:	781b      	ldrb	r3, [r3, #0]
   2cac4:	2b2f      	cmp	r3, #47	; 0x2f
   2cac6:	d0f8      	beq.n	2caba <create_name+0x12>
   2cac8:	693b      	ldr	r3, [r7, #16]
   2caca:	781b      	ldrb	r3, [r3, #0]
   2cacc:	2b5c      	cmp	r3, #92	; 0x5c
   2cace:	d0f4      	beq.n	2caba <create_name+0x12>
	lfn = dj->lfn;
   2cad0:	687b      	ldr	r3, [r7, #4]
   2cad2:	69db      	ldr	r3, [r3, #28]
   2cad4:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2cad6:	2300      	movs	r3, #0
   2cad8:	617b      	str	r3, [r7, #20]
   2cada:	697b      	ldr	r3, [r7, #20]
   2cadc:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2cade:	69bb      	ldr	r3, [r7, #24]
   2cae0:	1c5a      	adds	r2, r3, #1
   2cae2:	61ba      	str	r2, [r7, #24]
   2cae4:	693a      	ldr	r2, [r7, #16]
   2cae6:	18d3      	adds	r3, r2, r3
   2cae8:	781a      	ldrb	r2, [r3, #0]
   2caea:	2324      	movs	r3, #36	; 0x24
   2caec:	18fb      	adds	r3, r7, r3
   2caee:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2caf0:	2324      	movs	r3, #36	; 0x24
   2caf2:	18fb      	adds	r3, r7, r3
   2caf4:	881b      	ldrh	r3, [r3, #0]
   2caf6:	2b1f      	cmp	r3, #31
   2caf8:	d944      	bls.n	2cb84 <create_name+0xdc>
   2cafa:	2324      	movs	r3, #36	; 0x24
   2cafc:	18fb      	adds	r3, r7, r3
   2cafe:	881b      	ldrh	r3, [r3, #0]
   2cb00:	2b2f      	cmp	r3, #47	; 0x2f
   2cb02:	d03f      	beq.n	2cb84 <create_name+0xdc>
   2cb04:	2324      	movs	r3, #36	; 0x24
   2cb06:	18fb      	adds	r3, r7, r3
   2cb08:	881b      	ldrh	r3, [r3, #0]
   2cb0a:	2b5c      	cmp	r3, #92	; 0x5c
   2cb0c:	d03a      	beq.n	2cb84 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2cb0e:	697b      	ldr	r3, [r7, #20]
   2cb10:	2bfe      	cmp	r3, #254	; 0xfe
   2cb12:	d901      	bls.n	2cb18 <create_name+0x70>
			return FR_INVALID_NAME;
   2cb14:	2306      	movs	r3, #6
   2cb16:	e1e7      	b.n	2cee8 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2cb18:	2324      	movs	r3, #36	; 0x24
   2cb1a:	18fb      	adds	r3, r7, r3
   2cb1c:	2224      	movs	r2, #36	; 0x24
   2cb1e:	18ba      	adds	r2, r7, r2
   2cb20:	8812      	ldrh	r2, [r2, #0]
   2cb22:	21ff      	movs	r1, #255	; 0xff
   2cb24:	400a      	ands	r2, r1
   2cb26:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2cb28:	2324      	movs	r3, #36	; 0x24
   2cb2a:	18fc      	adds	r4, r7, r3
   2cb2c:	2324      	movs	r3, #36	; 0x24
   2cb2e:	18fb      	adds	r3, r7, r3
   2cb30:	881b      	ldrh	r3, [r3, #0]
   2cb32:	2101      	movs	r1, #1
   2cb34:	0018      	movs	r0, r3
   2cb36:	4bba      	ldr	r3, [pc, #744]	; (2ce20 <create_name+0x378>)
   2cb38:	4798      	blx	r3
   2cb3a:	0003      	movs	r3, r0
   2cb3c:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2cb3e:	2324      	movs	r3, #36	; 0x24
   2cb40:	18fb      	adds	r3, r7, r3
   2cb42:	881b      	ldrh	r3, [r3, #0]
   2cb44:	2b00      	cmp	r3, #0
   2cb46:	d101      	bne.n	2cb4c <create_name+0xa4>
   2cb48:	2306      	movs	r3, #6
   2cb4a:	e1cd      	b.n	2cee8 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2cb4c:	2324      	movs	r3, #36	; 0x24
   2cb4e:	18fb      	adds	r3, r7, r3
   2cb50:	881b      	ldrh	r3, [r3, #0]
   2cb52:	2b7f      	cmp	r3, #127	; 0x7f
   2cb54:	d80b      	bhi.n	2cb6e <create_name+0xc6>
   2cb56:	2324      	movs	r3, #36	; 0x24
   2cb58:	18fb      	adds	r3, r7, r3
   2cb5a:	881a      	ldrh	r2, [r3, #0]
   2cb5c:	4bb1      	ldr	r3, [pc, #708]	; (2ce24 <create_name+0x37c>)
   2cb5e:	0011      	movs	r1, r2
   2cb60:	0018      	movs	r0, r3
   2cb62:	4bb1      	ldr	r3, [pc, #708]	; (2ce28 <create_name+0x380>)
   2cb64:	4798      	blx	r3
   2cb66:	1e03      	subs	r3, r0, #0
   2cb68:	d001      	beq.n	2cb6e <create_name+0xc6>
			return FR_INVALID_NAME;
   2cb6a:	2306      	movs	r3, #6
   2cb6c:	e1bc      	b.n	2cee8 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2cb6e:	697b      	ldr	r3, [r7, #20]
   2cb70:	1c5a      	adds	r2, r3, #1
   2cb72:	617a      	str	r2, [r7, #20]
   2cb74:	005b      	lsls	r3, r3, #1
   2cb76:	68fa      	ldr	r2, [r7, #12]
   2cb78:	18d3      	adds	r3, r2, r3
   2cb7a:	2224      	movs	r2, #36	; 0x24
   2cb7c:	18ba      	adds	r2, r7, r2
   2cb7e:	8812      	ldrh	r2, [r2, #0]
   2cb80:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2cb82:	e7ac      	b.n	2cade <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2cb84:	693a      	ldr	r2, [r7, #16]
   2cb86:	69bb      	ldr	r3, [r7, #24]
   2cb88:	18d2      	adds	r2, r2, r3
   2cb8a:	683b      	ldr	r3, [r7, #0]
   2cb8c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2cb8e:	2324      	movs	r3, #36	; 0x24
   2cb90:	18fb      	adds	r3, r7, r3
   2cb92:	881b      	ldrh	r3, [r3, #0]
   2cb94:	2b1f      	cmp	r3, #31
   2cb96:	d801      	bhi.n	2cb9c <create_name+0xf4>
   2cb98:	2204      	movs	r2, #4
   2cb9a:	e000      	b.n	2cb9e <create_name+0xf6>
   2cb9c:	2200      	movs	r2, #0
   2cb9e:	2326      	movs	r3, #38	; 0x26
   2cba0:	18fb      	adds	r3, r7, r3
   2cba2:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2cba4:	e017      	b.n	2cbd6 <create_name+0x12e>
		w = lfn[di-1];
   2cba6:	697b      	ldr	r3, [r7, #20]
   2cba8:	4aa0      	ldr	r2, [pc, #640]	; (2ce2c <create_name+0x384>)
   2cbaa:	4694      	mov	ip, r2
   2cbac:	4463      	add	r3, ip
   2cbae:	005b      	lsls	r3, r3, #1
   2cbb0:	68fa      	ldr	r2, [r7, #12]
   2cbb2:	18d2      	adds	r2, r2, r3
   2cbb4:	2324      	movs	r3, #36	; 0x24
   2cbb6:	18fb      	adds	r3, r7, r3
   2cbb8:	8812      	ldrh	r2, [r2, #0]
   2cbba:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2cbbc:	2324      	movs	r3, #36	; 0x24
   2cbbe:	18fb      	adds	r3, r7, r3
   2cbc0:	881b      	ldrh	r3, [r3, #0]
   2cbc2:	2b20      	cmp	r3, #32
   2cbc4:	d004      	beq.n	2cbd0 <create_name+0x128>
   2cbc6:	2324      	movs	r3, #36	; 0x24
   2cbc8:	18fb      	adds	r3, r7, r3
   2cbca:	881b      	ldrh	r3, [r3, #0]
   2cbcc:	2b2e      	cmp	r3, #46	; 0x2e
   2cbce:	d106      	bne.n	2cbde <create_name+0x136>
		di--;
   2cbd0:	697b      	ldr	r3, [r7, #20]
   2cbd2:	3b01      	subs	r3, #1
   2cbd4:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2cbd6:	697b      	ldr	r3, [r7, #20]
   2cbd8:	2b00      	cmp	r3, #0
   2cbda:	d1e4      	bne.n	2cba6 <create_name+0xfe>
   2cbdc:	e000      	b.n	2cbe0 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2cbde:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2cbe0:	697b      	ldr	r3, [r7, #20]
   2cbe2:	2b00      	cmp	r3, #0
   2cbe4:	d101      	bne.n	2cbea <create_name+0x142>
   2cbe6:	2306      	movs	r3, #6
   2cbe8:	e17e      	b.n	2cee8 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2cbea:	697b      	ldr	r3, [r7, #20]
   2cbec:	005b      	lsls	r3, r3, #1
   2cbee:	68fa      	ldr	r2, [r7, #12]
   2cbf0:	18d3      	adds	r3, r2, r3
   2cbf2:	2200      	movs	r2, #0
   2cbf4:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2cbf6:	687b      	ldr	r3, [r7, #4]
   2cbf8:	699b      	ldr	r3, [r3, #24]
   2cbfa:	220b      	movs	r2, #11
   2cbfc:	2120      	movs	r1, #32
   2cbfe:	0018      	movs	r0, r3
   2cc00:	4b8b      	ldr	r3, [pc, #556]	; (2ce30 <create_name+0x388>)
   2cc02:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2cc04:	2300      	movs	r3, #0
   2cc06:	61bb      	str	r3, [r7, #24]
   2cc08:	e002      	b.n	2cc10 <create_name+0x168>
   2cc0a:	69bb      	ldr	r3, [r7, #24]
   2cc0c:	3301      	adds	r3, #1
   2cc0e:	61bb      	str	r3, [r7, #24]
   2cc10:	69bb      	ldr	r3, [r7, #24]
   2cc12:	005b      	lsls	r3, r3, #1
   2cc14:	68fa      	ldr	r2, [r7, #12]
   2cc16:	18d3      	adds	r3, r2, r3
   2cc18:	881b      	ldrh	r3, [r3, #0]
   2cc1a:	2b20      	cmp	r3, #32
   2cc1c:	d0f5      	beq.n	2cc0a <create_name+0x162>
   2cc1e:	69bb      	ldr	r3, [r7, #24]
   2cc20:	005b      	lsls	r3, r3, #1
   2cc22:	68fa      	ldr	r2, [r7, #12]
   2cc24:	18d3      	adds	r3, r2, r3
   2cc26:	881b      	ldrh	r3, [r3, #0]
   2cc28:	2b2e      	cmp	r3, #46	; 0x2e
   2cc2a:	d0ee      	beq.n	2cc0a <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2cc2c:	69bb      	ldr	r3, [r7, #24]
   2cc2e:	2b00      	cmp	r3, #0
   2cc30:	d00b      	beq.n	2cc4a <create_name+0x1a2>
   2cc32:	2326      	movs	r3, #38	; 0x26
   2cc34:	18fb      	adds	r3, r7, r3
   2cc36:	2226      	movs	r2, #38	; 0x26
   2cc38:	18ba      	adds	r2, r7, r2
   2cc3a:	7812      	ldrb	r2, [r2, #0]
   2cc3c:	2103      	movs	r1, #3
   2cc3e:	430a      	orrs	r2, r1
   2cc40:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2cc42:	e002      	b.n	2cc4a <create_name+0x1a2>
   2cc44:	697b      	ldr	r3, [r7, #20]
   2cc46:	3b01      	subs	r3, #1
   2cc48:	617b      	str	r3, [r7, #20]
   2cc4a:	697b      	ldr	r3, [r7, #20]
   2cc4c:	2b00      	cmp	r3, #0
   2cc4e:	d009      	beq.n	2cc64 <create_name+0x1bc>
   2cc50:	697b      	ldr	r3, [r7, #20]
   2cc52:	4a76      	ldr	r2, [pc, #472]	; (2ce2c <create_name+0x384>)
   2cc54:	4694      	mov	ip, r2
   2cc56:	4463      	add	r3, ip
   2cc58:	005b      	lsls	r3, r3, #1
   2cc5a:	68fa      	ldr	r2, [r7, #12]
   2cc5c:	18d3      	adds	r3, r2, r3
   2cc5e:	881b      	ldrh	r3, [r3, #0]
   2cc60:	2b2e      	cmp	r3, #46	; 0x2e
   2cc62:	d1ef      	bne.n	2cc44 <create_name+0x19c>

	b = i = 0; ni = 8;
   2cc64:	2300      	movs	r3, #0
   2cc66:	623b      	str	r3, [r7, #32]
   2cc68:	2327      	movs	r3, #39	; 0x27
   2cc6a:	18fb      	adds	r3, r7, r3
   2cc6c:	2200      	movs	r2, #0
   2cc6e:	701a      	strb	r2, [r3, #0]
   2cc70:	2308      	movs	r3, #8
   2cc72:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2cc74:	69bb      	ldr	r3, [r7, #24]
   2cc76:	1c5a      	adds	r2, r3, #1
   2cc78:	61ba      	str	r2, [r7, #24]
   2cc7a:	005b      	lsls	r3, r3, #1
   2cc7c:	68fa      	ldr	r2, [r7, #12]
   2cc7e:	18d2      	adds	r2, r2, r3
   2cc80:	2324      	movs	r3, #36	; 0x24
   2cc82:	18fb      	adds	r3, r7, r3
   2cc84:	8812      	ldrh	r2, [r2, #0]
   2cc86:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2cc88:	2324      	movs	r3, #36	; 0x24
   2cc8a:	18fb      	adds	r3, r7, r3
   2cc8c:	881b      	ldrh	r3, [r3, #0]
   2cc8e:	2b00      	cmp	r3, #0
   2cc90:	d100      	bne.n	2cc94 <create_name+0x1ec>
   2cc92:	e0c3      	b.n	2ce1c <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2cc94:	2324      	movs	r3, #36	; 0x24
   2cc96:	18fb      	adds	r3, r7, r3
   2cc98:	881b      	ldrh	r3, [r3, #0]
   2cc9a:	2b20      	cmp	r3, #32
   2cc9c:	d008      	beq.n	2ccb0 <create_name+0x208>
   2cc9e:	2324      	movs	r3, #36	; 0x24
   2cca0:	18fb      	adds	r3, r7, r3
   2cca2:	881b      	ldrh	r3, [r3, #0]
   2cca4:	2b2e      	cmp	r3, #46	; 0x2e
   2cca6:	d10c      	bne.n	2ccc2 <create_name+0x21a>
   2cca8:	69ba      	ldr	r2, [r7, #24]
   2ccaa:	697b      	ldr	r3, [r7, #20]
   2ccac:	429a      	cmp	r2, r3
   2ccae:	d008      	beq.n	2ccc2 <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2ccb0:	2326      	movs	r3, #38	; 0x26
   2ccb2:	18fb      	adds	r3, r7, r3
   2ccb4:	2226      	movs	r2, #38	; 0x26
   2ccb6:	18ba      	adds	r2, r7, r2
   2ccb8:	7812      	ldrb	r2, [r2, #0]
   2ccba:	2103      	movs	r1, #3
   2ccbc:	430a      	orrs	r2, r1
   2ccbe:	701a      	strb	r2, [r3, #0]
   2ccc0:	e0ab      	b.n	2ce1a <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2ccc2:	6a3a      	ldr	r2, [r7, #32]
   2ccc4:	69fb      	ldr	r3, [r7, #28]
   2ccc6:	429a      	cmp	r2, r3
   2ccc8:	d203      	bcs.n	2ccd2 <create_name+0x22a>
   2ccca:	69ba      	ldr	r2, [r7, #24]
   2cccc:	697b      	ldr	r3, [r7, #20]
   2ccce:	429a      	cmp	r2, r3
   2ccd0:	d12a      	bne.n	2cd28 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2ccd2:	69fb      	ldr	r3, [r7, #28]
   2ccd4:	2b0b      	cmp	r3, #11
   2ccd6:	d108      	bne.n	2ccea <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2ccd8:	2326      	movs	r3, #38	; 0x26
   2ccda:	18fb      	adds	r3, r7, r3
   2ccdc:	2226      	movs	r2, #38	; 0x26
   2ccde:	18ba      	adds	r2, r7, r2
   2cce0:	7812      	ldrb	r2, [r2, #0]
   2cce2:	2103      	movs	r1, #3
   2cce4:	430a      	orrs	r2, r1
   2cce6:	701a      	strb	r2, [r3, #0]
   2cce8:	e0a9      	b.n	2ce3e <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2ccea:	69ba      	ldr	r2, [r7, #24]
   2ccec:	697b      	ldr	r3, [r7, #20]
   2ccee:	429a      	cmp	r2, r3
   2ccf0:	d007      	beq.n	2cd02 <create_name+0x25a>
   2ccf2:	2326      	movs	r3, #38	; 0x26
   2ccf4:	18fb      	adds	r3, r7, r3
   2ccf6:	2226      	movs	r2, #38	; 0x26
   2ccf8:	18ba      	adds	r2, r7, r2
   2ccfa:	7812      	ldrb	r2, [r2, #0]
   2ccfc:	2103      	movs	r1, #3
   2ccfe:	430a      	orrs	r2, r1
   2cd00:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2cd02:	69ba      	ldr	r2, [r7, #24]
   2cd04:	697b      	ldr	r3, [r7, #20]
   2cd06:	429a      	cmp	r2, r3
   2cd08:	d900      	bls.n	2cd0c <create_name+0x264>
   2cd0a:	e097      	b.n	2ce3c <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2cd0c:	697b      	ldr	r3, [r7, #20]
   2cd0e:	61bb      	str	r3, [r7, #24]
   2cd10:	2308      	movs	r3, #8
   2cd12:	623b      	str	r3, [r7, #32]
   2cd14:	230b      	movs	r3, #11
   2cd16:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2cd18:	2327      	movs	r3, #39	; 0x27
   2cd1a:	18fb      	adds	r3, r7, r3
   2cd1c:	2227      	movs	r2, #39	; 0x27
   2cd1e:	18ba      	adds	r2, r7, r2
   2cd20:	7812      	ldrb	r2, [r2, #0]
   2cd22:	0092      	lsls	r2, r2, #2
   2cd24:	701a      	strb	r2, [r3, #0]
   2cd26:	e078      	b.n	2ce1a <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2cd28:	2324      	movs	r3, #36	; 0x24
   2cd2a:	18fb      	adds	r3, r7, r3
   2cd2c:	881b      	ldrh	r3, [r3, #0]
   2cd2e:	2b7f      	cmp	r3, #127	; 0x7f
   2cd30:	d920      	bls.n	2cd74 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2cd32:	2324      	movs	r3, #36	; 0x24
   2cd34:	18fc      	adds	r4, r7, r3
   2cd36:	2324      	movs	r3, #36	; 0x24
   2cd38:	18fb      	adds	r3, r7, r3
   2cd3a:	881b      	ldrh	r3, [r3, #0]
   2cd3c:	2100      	movs	r1, #0
   2cd3e:	0018      	movs	r0, r3
   2cd40:	4b37      	ldr	r3, [pc, #220]	; (2ce20 <create_name+0x378>)
   2cd42:	4798      	blx	r3
   2cd44:	0003      	movs	r3, r0
   2cd46:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2cd48:	2324      	movs	r3, #36	; 0x24
   2cd4a:	18fb      	adds	r3, r7, r3
   2cd4c:	881b      	ldrh	r3, [r3, #0]
   2cd4e:	2b00      	cmp	r3, #0
   2cd50:	d008      	beq.n	2cd64 <create_name+0x2bc>
   2cd52:	2324      	movs	r3, #36	; 0x24
   2cd54:	18fb      	adds	r3, r7, r3
   2cd56:	881b      	ldrh	r3, [r3, #0]
   2cd58:	3b80      	subs	r3, #128	; 0x80
   2cd5a:	4a36      	ldr	r2, [pc, #216]	; (2ce34 <create_name+0x38c>)
   2cd5c:	5cd2      	ldrb	r2, [r2, r3]
   2cd5e:	2324      	movs	r3, #36	; 0x24
   2cd60:	18fb      	adds	r3, r7, r3
   2cd62:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2cd64:	2326      	movs	r3, #38	; 0x26
   2cd66:	18fb      	adds	r3, r7, r3
   2cd68:	2226      	movs	r2, #38	; 0x26
   2cd6a:	18ba      	adds	r2, r7, r2
   2cd6c:	7812      	ldrb	r2, [r2, #0]
   2cd6e:	2102      	movs	r1, #2
   2cd70:	430a      	orrs	r2, r1
   2cd72:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2cd74:	2324      	movs	r3, #36	; 0x24
   2cd76:	18fb      	adds	r3, r7, r3
   2cd78:	881b      	ldrh	r3, [r3, #0]
   2cd7a:	2b00      	cmp	r3, #0
   2cd7c:	d009      	beq.n	2cd92 <create_name+0x2ea>
   2cd7e:	2324      	movs	r3, #36	; 0x24
   2cd80:	18fb      	adds	r3, r7, r3
   2cd82:	881a      	ldrh	r2, [r3, #0]
   2cd84:	4b2c      	ldr	r3, [pc, #176]	; (2ce38 <create_name+0x390>)
   2cd86:	0011      	movs	r1, r2
   2cd88:	0018      	movs	r0, r3
   2cd8a:	4b27      	ldr	r3, [pc, #156]	; (2ce28 <create_name+0x380>)
   2cd8c:	4798      	blx	r3
   2cd8e:	1e03      	subs	r3, r0, #0
   2cd90:	d00c      	beq.n	2cdac <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2cd92:	2324      	movs	r3, #36	; 0x24
   2cd94:	18fb      	adds	r3, r7, r3
   2cd96:	225f      	movs	r2, #95	; 0x5f
   2cd98:	801a      	strh	r2, [r3, #0]
   2cd9a:	2326      	movs	r3, #38	; 0x26
   2cd9c:	18fb      	adds	r3, r7, r3
   2cd9e:	2226      	movs	r2, #38	; 0x26
   2cda0:	18ba      	adds	r2, r7, r2
   2cda2:	7812      	ldrb	r2, [r2, #0]
   2cda4:	2103      	movs	r1, #3
   2cda6:	430a      	orrs	r2, r1
   2cda8:	701a      	strb	r2, [r3, #0]
   2cdaa:	e02b      	b.n	2ce04 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2cdac:	2324      	movs	r3, #36	; 0x24
   2cdae:	18fb      	adds	r3, r7, r3
   2cdb0:	881b      	ldrh	r3, [r3, #0]
   2cdb2:	2b40      	cmp	r3, #64	; 0x40
   2cdb4:	d90d      	bls.n	2cdd2 <create_name+0x32a>
   2cdb6:	2324      	movs	r3, #36	; 0x24
   2cdb8:	18fb      	adds	r3, r7, r3
   2cdba:	881b      	ldrh	r3, [r3, #0]
   2cdbc:	2b5a      	cmp	r3, #90	; 0x5a
   2cdbe:	d808      	bhi.n	2cdd2 <create_name+0x32a>
					b |= 2;
   2cdc0:	2327      	movs	r3, #39	; 0x27
   2cdc2:	18fb      	adds	r3, r7, r3
   2cdc4:	2227      	movs	r2, #39	; 0x27
   2cdc6:	18ba      	adds	r2, r7, r2
   2cdc8:	7812      	ldrb	r2, [r2, #0]
   2cdca:	2102      	movs	r1, #2
   2cdcc:	430a      	orrs	r2, r1
   2cdce:	701a      	strb	r2, [r3, #0]
   2cdd0:	e018      	b.n	2ce04 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2cdd2:	2324      	movs	r3, #36	; 0x24
   2cdd4:	18fb      	adds	r3, r7, r3
   2cdd6:	881b      	ldrh	r3, [r3, #0]
   2cdd8:	2b60      	cmp	r3, #96	; 0x60
   2cdda:	d913      	bls.n	2ce04 <create_name+0x35c>
   2cddc:	2324      	movs	r3, #36	; 0x24
   2cdde:	18fb      	adds	r3, r7, r3
   2cde0:	881b      	ldrh	r3, [r3, #0]
   2cde2:	2b7a      	cmp	r3, #122	; 0x7a
   2cde4:	d80e      	bhi.n	2ce04 <create_name+0x35c>
						b |= 1; w -= 0x20;
   2cde6:	2327      	movs	r3, #39	; 0x27
   2cde8:	18fb      	adds	r3, r7, r3
   2cdea:	2227      	movs	r2, #39	; 0x27
   2cdec:	18ba      	adds	r2, r7, r2
   2cdee:	7812      	ldrb	r2, [r2, #0]
   2cdf0:	2101      	movs	r1, #1
   2cdf2:	430a      	orrs	r2, r1
   2cdf4:	701a      	strb	r2, [r3, #0]
   2cdf6:	2324      	movs	r3, #36	; 0x24
   2cdf8:	18fb      	adds	r3, r7, r3
   2cdfa:	2224      	movs	r2, #36	; 0x24
   2cdfc:	18ba      	adds	r2, r7, r2
   2cdfe:	8812      	ldrh	r2, [r2, #0]
   2ce00:	3a20      	subs	r2, #32
   2ce02:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2ce04:	687b      	ldr	r3, [r7, #4]
   2ce06:	699a      	ldr	r2, [r3, #24]
   2ce08:	6a3b      	ldr	r3, [r7, #32]
   2ce0a:	1c59      	adds	r1, r3, #1
   2ce0c:	6239      	str	r1, [r7, #32]
   2ce0e:	18d3      	adds	r3, r2, r3
   2ce10:	2224      	movs	r2, #36	; 0x24
   2ce12:	18ba      	adds	r2, r7, r2
   2ce14:	8812      	ldrh	r2, [r2, #0]
   2ce16:	b2d2      	uxtb	r2, r2
   2ce18:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2ce1a:	e72b      	b.n	2cc74 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2ce1c:	46c0      	nop			; (mov r8, r8)
   2ce1e:	e00e      	b.n	2ce3e <create_name+0x396>
   2ce20:	0002e1e1 	.word	0x0002e1e1
   2ce24:	00039594 	.word	0x00039594
   2ce28:	0002b64b 	.word	0x0002b64b
   2ce2c:	7fffffff 	.word	0x7fffffff
   2ce30:	0002b5d1 	.word	0x0002b5d1
   2ce34:	000395dc 	.word	0x000395dc
   2ce38:	000395a0 	.word	0x000395a0
			if (si > di) break;			/* No extension */
   2ce3c:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2ce3e:	687b      	ldr	r3, [r7, #4]
   2ce40:	699b      	ldr	r3, [r3, #24]
   2ce42:	781b      	ldrb	r3, [r3, #0]
   2ce44:	2be5      	cmp	r3, #229	; 0xe5
   2ce46:	d103      	bne.n	2ce50 <create_name+0x3a8>
   2ce48:	687b      	ldr	r3, [r7, #4]
   2ce4a:	699b      	ldr	r3, [r3, #24]
   2ce4c:	2205      	movs	r2, #5
   2ce4e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2ce50:	69fb      	ldr	r3, [r7, #28]
   2ce52:	2b08      	cmp	r3, #8
   2ce54:	d106      	bne.n	2ce64 <create_name+0x3bc>
   2ce56:	2327      	movs	r3, #39	; 0x27
   2ce58:	18fb      	adds	r3, r7, r3
   2ce5a:	2227      	movs	r2, #39	; 0x27
   2ce5c:	18ba      	adds	r2, r7, r2
   2ce5e:	7812      	ldrb	r2, [r2, #0]
   2ce60:	0092      	lsls	r2, r2, #2
   2ce62:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2ce64:	2327      	movs	r3, #39	; 0x27
   2ce66:	18fb      	adds	r3, r7, r3
   2ce68:	781b      	ldrb	r3, [r3, #0]
   2ce6a:	220c      	movs	r2, #12
   2ce6c:	4013      	ands	r3, r2
   2ce6e:	2b0c      	cmp	r3, #12
   2ce70:	d006      	beq.n	2ce80 <create_name+0x3d8>
   2ce72:	2327      	movs	r3, #39	; 0x27
   2ce74:	18fb      	adds	r3, r7, r3
   2ce76:	781b      	ldrb	r3, [r3, #0]
   2ce78:	2203      	movs	r2, #3
   2ce7a:	4013      	ands	r3, r2
   2ce7c:	2b03      	cmp	r3, #3
   2ce7e:	d107      	bne.n	2ce90 <create_name+0x3e8>
		cf |= NS_LFN;
   2ce80:	2326      	movs	r3, #38	; 0x26
   2ce82:	18fb      	adds	r3, r7, r3
   2ce84:	2226      	movs	r2, #38	; 0x26
   2ce86:	18ba      	adds	r2, r7, r2
   2ce88:	7812      	ldrb	r2, [r2, #0]
   2ce8a:	2102      	movs	r1, #2
   2ce8c:	430a      	orrs	r2, r1
   2ce8e:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2ce90:	2326      	movs	r3, #38	; 0x26
   2ce92:	18fb      	adds	r3, r7, r3
   2ce94:	781b      	ldrb	r3, [r3, #0]
   2ce96:	2202      	movs	r2, #2
   2ce98:	4013      	ands	r3, r2
   2ce9a:	d11d      	bne.n	2ced8 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2ce9c:	2327      	movs	r3, #39	; 0x27
   2ce9e:	18fb      	adds	r3, r7, r3
   2cea0:	781b      	ldrb	r3, [r3, #0]
   2cea2:	2203      	movs	r2, #3
   2cea4:	4013      	ands	r3, r2
   2cea6:	2b01      	cmp	r3, #1
   2cea8:	d107      	bne.n	2ceba <create_name+0x412>
   2ceaa:	2326      	movs	r3, #38	; 0x26
   2ceac:	18fb      	adds	r3, r7, r3
   2ceae:	2226      	movs	r2, #38	; 0x26
   2ceb0:	18ba      	adds	r2, r7, r2
   2ceb2:	7812      	ldrb	r2, [r2, #0]
   2ceb4:	2110      	movs	r1, #16
   2ceb6:	430a      	orrs	r2, r1
   2ceb8:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2ceba:	2327      	movs	r3, #39	; 0x27
   2cebc:	18fb      	adds	r3, r7, r3
   2cebe:	781b      	ldrb	r3, [r3, #0]
   2cec0:	220c      	movs	r2, #12
   2cec2:	4013      	ands	r3, r2
   2cec4:	2b04      	cmp	r3, #4
   2cec6:	d107      	bne.n	2ced8 <create_name+0x430>
   2cec8:	2326      	movs	r3, #38	; 0x26
   2ceca:	18fb      	adds	r3, r7, r3
   2cecc:	2226      	movs	r2, #38	; 0x26
   2cece:	18ba      	adds	r2, r7, r2
   2ced0:	7812      	ldrb	r2, [r2, #0]
   2ced2:	2108      	movs	r1, #8
   2ced4:	430a      	orrs	r2, r1
   2ced6:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2ced8:	687b      	ldr	r3, [r7, #4]
   2ceda:	699b      	ldr	r3, [r3, #24]
   2cedc:	330b      	adds	r3, #11
   2cede:	2226      	movs	r2, #38	; 0x26
   2cee0:	18ba      	adds	r2, r7, r2
   2cee2:	7812      	ldrb	r2, [r2, #0]
   2cee4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2cee6:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2cee8:	0018      	movs	r0, r3
   2ceea:	46bd      	mov	sp, r7
   2ceec:	b00b      	add	sp, #44	; 0x2c
   2ceee:	bd90      	pop	{r4, r7, pc}

0002cef0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2cef0:	b590      	push	{r4, r7, lr}
   2cef2:	b085      	sub	sp, #20
   2cef4:	af00      	add	r7, sp, #0
   2cef6:	6078      	str	r0, [r7, #4]
   2cef8:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2cefa:	683b      	ldr	r3, [r7, #0]
   2cefc:	781b      	ldrb	r3, [r3, #0]
   2cefe:	2b2f      	cmp	r3, #47	; 0x2f
   2cf00:	d003      	beq.n	2cf0a <follow_path+0x1a>
   2cf02:	683b      	ldr	r3, [r7, #0]
   2cf04:	781b      	ldrb	r3, [r3, #0]
   2cf06:	2b5c      	cmp	r3, #92	; 0x5c
   2cf08:	d102      	bne.n	2cf10 <follow_path+0x20>
		path++;
   2cf0a:	683b      	ldr	r3, [r7, #0]
   2cf0c:	3301      	adds	r3, #1
   2cf0e:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2cf10:	687b      	ldr	r3, [r7, #4]
   2cf12:	2200      	movs	r2, #0
   2cf14:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2cf16:	683b      	ldr	r3, [r7, #0]
   2cf18:	781b      	ldrb	r3, [r3, #0]
   2cf1a:	2b1f      	cmp	r3, #31
   2cf1c:	d80c      	bhi.n	2cf38 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2cf1e:	230f      	movs	r3, #15
   2cf20:	18fc      	adds	r4, r7, r3
   2cf22:	687b      	ldr	r3, [r7, #4]
   2cf24:	2100      	movs	r1, #0
   2cf26:	0018      	movs	r0, r3
   2cf28:	4b3c      	ldr	r3, [pc, #240]	; (2d01c <follow_path+0x12c>)
   2cf2a:	4798      	blx	r3
   2cf2c:	0003      	movs	r3, r0
   2cf2e:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2cf30:	687b      	ldr	r3, [r7, #4]
   2cf32:	2200      	movs	r2, #0
   2cf34:	615a      	str	r2, [r3, #20]
   2cf36:	e06a      	b.n	2d00e <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2cf38:	230f      	movs	r3, #15
   2cf3a:	18fc      	adds	r4, r7, r3
   2cf3c:	003a      	movs	r2, r7
   2cf3e:	687b      	ldr	r3, [r7, #4]
   2cf40:	0011      	movs	r1, r2
   2cf42:	0018      	movs	r0, r3
   2cf44:	4b36      	ldr	r3, [pc, #216]	; (2d020 <follow_path+0x130>)
   2cf46:	4798      	blx	r3
   2cf48:	0003      	movs	r3, r0
   2cf4a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2cf4c:	230f      	movs	r3, #15
   2cf4e:	18fb      	adds	r3, r7, r3
   2cf50:	781b      	ldrb	r3, [r3, #0]
   2cf52:	2b00      	cmp	r3, #0
   2cf54:	d154      	bne.n	2d000 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2cf56:	230f      	movs	r3, #15
   2cf58:	18fc      	adds	r4, r7, r3
   2cf5a:	687b      	ldr	r3, [r7, #4]
   2cf5c:	0018      	movs	r0, r3
   2cf5e:	4b31      	ldr	r3, [pc, #196]	; (2d024 <follow_path+0x134>)
   2cf60:	4798      	blx	r3
   2cf62:	0003      	movs	r3, r0
   2cf64:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2cf66:	687b      	ldr	r3, [r7, #4]
   2cf68:	699a      	ldr	r2, [r3, #24]
   2cf6a:	230e      	movs	r3, #14
   2cf6c:	18fb      	adds	r3, r7, r3
   2cf6e:	7ad2      	ldrb	r2, [r2, #11]
   2cf70:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2cf72:	230f      	movs	r3, #15
   2cf74:	18fb      	adds	r3, r7, r3
   2cf76:	781b      	ldrb	r3, [r3, #0]
   2cf78:	2b00      	cmp	r3, #0
   2cf7a:	d00f      	beq.n	2cf9c <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2cf7c:	230f      	movs	r3, #15
   2cf7e:	18fb      	adds	r3, r7, r3
   2cf80:	781b      	ldrb	r3, [r3, #0]
   2cf82:	2b04      	cmp	r3, #4
   2cf84:	d13e      	bne.n	2d004 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2cf86:	230e      	movs	r3, #14
   2cf88:	18fb      	adds	r3, r7, r3
   2cf8a:	781b      	ldrb	r3, [r3, #0]
   2cf8c:	2204      	movs	r2, #4
   2cf8e:	4013      	ands	r3, r2
   2cf90:	d13a      	bne.n	2d008 <follow_path+0x118>
   2cf92:	230f      	movs	r3, #15
   2cf94:	18fb      	adds	r3, r7, r3
   2cf96:	2205      	movs	r2, #5
   2cf98:	701a      	strb	r2, [r3, #0]
				}
				break;
   2cf9a:	e035      	b.n	2d008 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2cf9c:	230e      	movs	r3, #14
   2cf9e:	18fb      	adds	r3, r7, r3
   2cfa0:	781b      	ldrb	r3, [r3, #0]
   2cfa2:	2204      	movs	r2, #4
   2cfa4:	4013      	ands	r3, r2
   2cfa6:	d131      	bne.n	2d00c <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2cfa8:	687b      	ldr	r3, [r7, #4]
   2cfaa:	695b      	ldr	r3, [r3, #20]
   2cfac:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2cfae:	68bb      	ldr	r3, [r7, #8]
   2cfb0:	330b      	adds	r3, #11
   2cfb2:	781b      	ldrb	r3, [r3, #0]
   2cfb4:	001a      	movs	r2, r3
   2cfb6:	2310      	movs	r3, #16
   2cfb8:	4013      	ands	r3, r2
   2cfba:	d104      	bne.n	2cfc6 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2cfbc:	230f      	movs	r3, #15
   2cfbe:	18fb      	adds	r3, r7, r3
   2cfc0:	2205      	movs	r2, #5
   2cfc2:	701a      	strb	r2, [r3, #0]
   2cfc4:	e023      	b.n	2d00e <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2cfc6:	68bb      	ldr	r3, [r7, #8]
   2cfc8:	3315      	adds	r3, #21
   2cfca:	781b      	ldrb	r3, [r3, #0]
   2cfcc:	021b      	lsls	r3, r3, #8
   2cfce:	b21a      	sxth	r2, r3
   2cfd0:	68bb      	ldr	r3, [r7, #8]
   2cfd2:	3314      	adds	r3, #20
   2cfd4:	781b      	ldrb	r3, [r3, #0]
   2cfd6:	b21b      	sxth	r3, r3
   2cfd8:	4313      	orrs	r3, r2
   2cfda:	b21b      	sxth	r3, r3
   2cfdc:	b29b      	uxth	r3, r3
   2cfde:	041b      	lsls	r3, r3, #16
   2cfe0:	68ba      	ldr	r2, [r7, #8]
   2cfe2:	321b      	adds	r2, #27
   2cfe4:	7812      	ldrb	r2, [r2, #0]
   2cfe6:	0212      	lsls	r2, r2, #8
   2cfe8:	b211      	sxth	r1, r2
   2cfea:	68ba      	ldr	r2, [r7, #8]
   2cfec:	321a      	adds	r2, #26
   2cfee:	7812      	ldrb	r2, [r2, #0]
   2cff0:	b212      	sxth	r2, r2
   2cff2:	430a      	orrs	r2, r1
   2cff4:	b212      	sxth	r2, r2
   2cff6:	b292      	uxth	r2, r2
   2cff8:	431a      	orrs	r2, r3
   2cffa:	687b      	ldr	r3, [r7, #4]
   2cffc:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2cffe:	e79b      	b.n	2cf38 <follow_path+0x48>
			if (res != FR_OK) break;
   2d000:	46c0      	nop			; (mov r8, r8)
   2d002:	e004      	b.n	2d00e <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2d004:	46c0      	nop			; (mov r8, r8)
   2d006:	e002      	b.n	2d00e <follow_path+0x11e>
				break;
   2d008:	46c0      	nop			; (mov r8, r8)
   2d00a:	e000      	b.n	2d00e <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2d00c:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2d00e:	230f      	movs	r3, #15
   2d010:	18fb      	adds	r3, r7, r3
   2d012:	781b      	ldrb	r3, [r3, #0]
}
   2d014:	0018      	movs	r0, r3
   2d016:	46bd      	mov	sp, r7
   2d018:	b005      	add	sp, #20
   2d01a:	bd90      	pop	{r4, r7, pc}
   2d01c:	0002bec1 	.word	0x0002bec1
   2d020:	0002caa9 	.word	0x0002caa9
   2d024:	0002c545 	.word	0x0002c545

0002d028 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2d028:	b590      	push	{r4, r7, lr}
   2d02a:	b083      	sub	sp, #12
   2d02c:	af00      	add	r7, sp, #0
   2d02e:	6078      	str	r0, [r7, #4]
   2d030:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2d032:	687b      	ldr	r3, [r7, #4]
   2d034:	7858      	ldrb	r0, [r3, #1]
   2d036:	687b      	ldr	r3, [r7, #4]
   2d038:	3330      	adds	r3, #48	; 0x30
   2d03a:	0019      	movs	r1, r3
   2d03c:	683a      	ldr	r2, [r7, #0]
   2d03e:	2301      	movs	r3, #1
   2d040:	4c2a      	ldr	r4, [pc, #168]	; (2d0ec <check_fs+0xc4>)
   2d042:	47a0      	blx	r4
   2d044:	1e03      	subs	r3, r0, #0
   2d046:	d001      	beq.n	2d04c <check_fs+0x24>
		return 3;
   2d048:	2303      	movs	r3, #3
   2d04a:	e04b      	b.n	2d0e4 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2d04c:	687b      	ldr	r3, [r7, #4]
   2d04e:	4a28      	ldr	r2, [pc, #160]	; (2d0f0 <check_fs+0xc8>)
   2d050:	4694      	mov	ip, r2
   2d052:	4463      	add	r3, ip
   2d054:	3301      	adds	r3, #1
   2d056:	781b      	ldrb	r3, [r3, #0]
   2d058:	021b      	lsls	r3, r3, #8
   2d05a:	b21a      	sxth	r2, r3
   2d05c:	687b      	ldr	r3, [r7, #4]
   2d05e:	4924      	ldr	r1, [pc, #144]	; (2d0f0 <check_fs+0xc8>)
   2d060:	5c5b      	ldrb	r3, [r3, r1]
   2d062:	b21b      	sxth	r3, r3
   2d064:	4313      	orrs	r3, r2
   2d066:	b21b      	sxth	r3, r3
   2d068:	4a22      	ldr	r2, [pc, #136]	; (2d0f4 <check_fs+0xcc>)
   2d06a:	4293      	cmp	r3, r2
   2d06c:	d001      	beq.n	2d072 <check_fs+0x4a>
		return 2;
   2d06e:	2302      	movs	r3, #2
   2d070:	e038      	b.n	2d0e4 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2d072:	687b      	ldr	r3, [r7, #4]
   2d074:	3366      	adds	r3, #102	; 0x66
   2d076:	3303      	adds	r3, #3
   2d078:	781b      	ldrb	r3, [r3, #0]
   2d07a:	061a      	lsls	r2, r3, #24
   2d07c:	687b      	ldr	r3, [r7, #4]
   2d07e:	3366      	adds	r3, #102	; 0x66
   2d080:	3302      	adds	r3, #2
   2d082:	781b      	ldrb	r3, [r3, #0]
   2d084:	041b      	lsls	r3, r3, #16
   2d086:	4313      	orrs	r3, r2
   2d088:	687a      	ldr	r2, [r7, #4]
   2d08a:	3266      	adds	r2, #102	; 0x66
   2d08c:	3201      	adds	r2, #1
   2d08e:	7812      	ldrb	r2, [r2, #0]
   2d090:	0212      	lsls	r2, r2, #8
   2d092:	4313      	orrs	r3, r2
   2d094:	687a      	ldr	r2, [r7, #4]
   2d096:	2166      	movs	r1, #102	; 0x66
   2d098:	5c52      	ldrb	r2, [r2, r1]
   2d09a:	4313      	orrs	r3, r2
   2d09c:	021b      	lsls	r3, r3, #8
   2d09e:	0a1b      	lsrs	r3, r3, #8
   2d0a0:	4a15      	ldr	r2, [pc, #84]	; (2d0f8 <check_fs+0xd0>)
   2d0a2:	4293      	cmp	r3, r2
   2d0a4:	d101      	bne.n	2d0aa <check_fs+0x82>
		return 0;
   2d0a6:	2300      	movs	r3, #0
   2d0a8:	e01c      	b.n	2d0e4 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2d0aa:	687b      	ldr	r3, [r7, #4]
   2d0ac:	3382      	adds	r3, #130	; 0x82
   2d0ae:	3303      	adds	r3, #3
   2d0b0:	781b      	ldrb	r3, [r3, #0]
   2d0b2:	061a      	lsls	r2, r3, #24
   2d0b4:	687b      	ldr	r3, [r7, #4]
   2d0b6:	3382      	adds	r3, #130	; 0x82
   2d0b8:	3302      	adds	r3, #2
   2d0ba:	781b      	ldrb	r3, [r3, #0]
   2d0bc:	041b      	lsls	r3, r3, #16
   2d0be:	4313      	orrs	r3, r2
   2d0c0:	687a      	ldr	r2, [r7, #4]
   2d0c2:	3282      	adds	r2, #130	; 0x82
   2d0c4:	3201      	adds	r2, #1
   2d0c6:	7812      	ldrb	r2, [r2, #0]
   2d0c8:	0212      	lsls	r2, r2, #8
   2d0ca:	4313      	orrs	r3, r2
   2d0cc:	687a      	ldr	r2, [r7, #4]
   2d0ce:	2182      	movs	r1, #130	; 0x82
   2d0d0:	5c52      	ldrb	r2, [r2, r1]
   2d0d2:	4313      	orrs	r3, r2
   2d0d4:	021b      	lsls	r3, r3, #8
   2d0d6:	0a1b      	lsrs	r3, r3, #8
   2d0d8:	4a07      	ldr	r2, [pc, #28]	; (2d0f8 <check_fs+0xd0>)
   2d0da:	4293      	cmp	r3, r2
   2d0dc:	d101      	bne.n	2d0e2 <check_fs+0xba>
		return 0;
   2d0de:	2300      	movs	r3, #0
   2d0e0:	e000      	b.n	2d0e4 <check_fs+0xbc>

	return 1;
   2d0e2:	2301      	movs	r3, #1
}
   2d0e4:	0018      	movs	r0, r3
   2d0e6:	46bd      	mov	sp, r7
   2d0e8:	b003      	add	sp, #12
   2d0ea:	bd90      	pop	{r4, r7, pc}
   2d0ec:	0002b291 	.word	0x0002b291
   2d0f0:	0000022e 	.word	0x0000022e
   2d0f4:	ffffaa55 	.word	0xffffaa55
   2d0f8:	00544146 	.word	0x00544146

0002d0fc <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2d0fc:	b590      	push	{r4, r7, lr}
   2d0fe:	b093      	sub	sp, #76	; 0x4c
   2d100:	af00      	add	r7, sp, #0
   2d102:	60f8      	str	r0, [r7, #12]
   2d104:	60b9      	str	r1, [r7, #8]
   2d106:	1dfb      	adds	r3, r7, #7
   2d108:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2d10a:	68fb      	ldr	r3, [r7, #12]
   2d10c:	681b      	ldr	r3, [r3, #0]
   2d10e:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2d110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2d112:	781b      	ldrb	r3, [r3, #0]
   2d114:	3b30      	subs	r3, #48	; 0x30
   2d116:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2d118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d11a:	2b09      	cmp	r3, #9
   2d11c:	d80b      	bhi.n	2d136 <chk_mounted+0x3a>
   2d11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2d120:	3301      	adds	r3, #1
   2d122:	781b      	ldrb	r3, [r3, #0]
   2d124:	2b3a      	cmp	r3, #58	; 0x3a
   2d126:	d106      	bne.n	2d136 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2d128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2d12a:	3302      	adds	r3, #2
   2d12c:	62fb      	str	r3, [r7, #44]	; 0x2c
   2d12e:	68fb      	ldr	r3, [r7, #12]
   2d130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2d132:	601a      	str	r2, [r3, #0]
   2d134:	e001      	b.n	2d13a <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2d136:	2300      	movs	r3, #0
   2d138:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2d13a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d13c:	2b07      	cmp	r3, #7
   2d13e:	d901      	bls.n	2d144 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2d140:	230b      	movs	r3, #11
   2d142:	e2af      	b.n	2d6a4 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2d144:	4bc5      	ldr	r3, [pc, #788]	; (2d45c <chk_mounted+0x360>)
   2d146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2d148:	0092      	lsls	r2, r2, #2
   2d14a:	58d3      	ldr	r3, [r2, r3]
   2d14c:	62bb      	str	r3, [r7, #40]	; 0x28
   2d14e:	68bb      	ldr	r3, [r7, #8]
   2d150:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d152:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2d154:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d156:	2b00      	cmp	r3, #0
   2d158:	d101      	bne.n	2d15e <chk_mounted+0x62>
   2d15a:	230c      	movs	r3, #12
   2d15c:	e2a2      	b.n	2d6a4 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2d15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d160:	781b      	ldrb	r3, [r3, #0]
   2d162:	2b00      	cmp	r3, #0
   2d164:	d01c      	beq.n	2d1a0 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2d166:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d168:	785b      	ldrb	r3, [r3, #1]
   2d16a:	2227      	movs	r2, #39	; 0x27
   2d16c:	18bc      	adds	r4, r7, r2
   2d16e:	0018      	movs	r0, r3
   2d170:	4bbb      	ldr	r3, [pc, #748]	; (2d460 <chk_mounted+0x364>)
   2d172:	4798      	blx	r3
   2d174:	0003      	movs	r3, r0
   2d176:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2d178:	2327      	movs	r3, #39	; 0x27
   2d17a:	18fb      	adds	r3, r7, r3
   2d17c:	781b      	ldrb	r3, [r3, #0]
   2d17e:	2201      	movs	r2, #1
   2d180:	4013      	ands	r3, r2
   2d182:	d10d      	bne.n	2d1a0 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2d184:	1dfb      	adds	r3, r7, #7
   2d186:	781b      	ldrb	r3, [r3, #0]
   2d188:	2b00      	cmp	r3, #0
   2d18a:	d007      	beq.n	2d19c <chk_mounted+0xa0>
   2d18c:	2327      	movs	r3, #39	; 0x27
   2d18e:	18fb      	adds	r3, r7, r3
   2d190:	781b      	ldrb	r3, [r3, #0]
   2d192:	2204      	movs	r2, #4
   2d194:	4013      	ands	r3, r2
   2d196:	d001      	beq.n	2d19c <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2d198:	230a      	movs	r3, #10
   2d19a:	e283      	b.n	2d6a4 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2d19c:	2300      	movs	r3, #0
   2d19e:	e281      	b.n	2d6a4 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2d1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1a2:	2200      	movs	r2, #0
   2d1a4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2d1a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d1a8:	b2da      	uxtb	r2, r3
   2d1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1ac:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2d1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1b0:	785b      	ldrb	r3, [r3, #1]
   2d1b2:	2227      	movs	r2, #39	; 0x27
   2d1b4:	18bc      	adds	r4, r7, r2
   2d1b6:	0018      	movs	r0, r3
   2d1b8:	4baa      	ldr	r3, [pc, #680]	; (2d464 <chk_mounted+0x368>)
   2d1ba:	4798      	blx	r3
   2d1bc:	0003      	movs	r3, r0
   2d1be:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2d1c0:	2327      	movs	r3, #39	; 0x27
   2d1c2:	18fb      	adds	r3, r7, r3
   2d1c4:	781b      	ldrb	r3, [r3, #0]
   2d1c6:	2201      	movs	r2, #1
   2d1c8:	4013      	ands	r3, r2
   2d1ca:	d001      	beq.n	2d1d0 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2d1cc:	2303      	movs	r3, #3
   2d1ce:	e269      	b.n	2d6a4 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2d1d0:	1dfb      	adds	r3, r7, #7
   2d1d2:	781b      	ldrb	r3, [r3, #0]
   2d1d4:	2b00      	cmp	r3, #0
   2d1d6:	d007      	beq.n	2d1e8 <chk_mounted+0xec>
   2d1d8:	2327      	movs	r3, #39	; 0x27
   2d1da:	18fb      	adds	r3, r7, r3
   2d1dc:	781b      	ldrb	r3, [r3, #0]
   2d1de:	2204      	movs	r2, #4
   2d1e0:	4013      	ands	r3, r2
   2d1e2:	d001      	beq.n	2d1e8 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2d1e4:	230a      	movs	r3, #10
   2d1e6:	e25d      	b.n	2d6a4 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2d1e8:	2300      	movs	r3, #0
   2d1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d1ec:	2347      	movs	r3, #71	; 0x47
   2d1ee:	18fc      	adds	r4, r7, r3
   2d1f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1f4:	0011      	movs	r1, r2
   2d1f6:	0018      	movs	r0, r3
   2d1f8:	4b9b      	ldr	r3, [pc, #620]	; (2d468 <chk_mounted+0x36c>)
   2d1fa:	4798      	blx	r3
   2d1fc:	0003      	movs	r3, r0
   2d1fe:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2d200:	2347      	movs	r3, #71	; 0x47
   2d202:	18fb      	adds	r3, r7, r3
   2d204:	781b      	ldrb	r3, [r3, #0]
   2d206:	2b01      	cmp	r3, #1
   2d208:	d13b      	bne.n	2d282 <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2d20a:	2346      	movs	r3, #70	; 0x46
   2d20c:	18fb      	adds	r3, r7, r3
   2d20e:	2200      	movs	r2, #0
   2d210:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2d212:	2346      	movs	r3, #70	; 0x46
   2d214:	18fb      	adds	r3, r7, r3
   2d216:	781b      	ldrb	r3, [r3, #0]
   2d218:	2b00      	cmp	r3, #0
   2d21a:	d006      	beq.n	2d22a <chk_mounted+0x12e>
   2d21c:	2346      	movs	r3, #70	; 0x46
   2d21e:	18fb      	adds	r3, r7, r3
   2d220:	781a      	ldrb	r2, [r3, #0]
   2d222:	2346      	movs	r3, #70	; 0x46
   2d224:	18fb      	adds	r3, r7, r3
   2d226:	3a01      	subs	r2, #1
   2d228:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2d22a:	2346      	movs	r3, #70	; 0x46
   2d22c:	18fb      	adds	r3, r7, r3
   2d22e:	781b      	ldrb	r3, [r3, #0]
   2d230:	011b      	lsls	r3, r3, #4
   2d232:	33bf      	adds	r3, #191	; 0xbf
   2d234:	33ff      	adds	r3, #255	; 0xff
   2d236:	3330      	adds	r3, #48	; 0x30
   2d238:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d23a:	18d3      	adds	r3, r2, r3
   2d23c:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2d23e:	6a3b      	ldr	r3, [r7, #32]
   2d240:	3304      	adds	r3, #4
   2d242:	781b      	ldrb	r3, [r3, #0]
   2d244:	2b00      	cmp	r3, #0
   2d246:	d01c      	beq.n	2d282 <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2d248:	6a3b      	ldr	r3, [r7, #32]
   2d24a:	330b      	adds	r3, #11
   2d24c:	781b      	ldrb	r3, [r3, #0]
   2d24e:	061a      	lsls	r2, r3, #24
   2d250:	6a3b      	ldr	r3, [r7, #32]
   2d252:	330a      	adds	r3, #10
   2d254:	781b      	ldrb	r3, [r3, #0]
   2d256:	041b      	lsls	r3, r3, #16
   2d258:	4313      	orrs	r3, r2
   2d25a:	6a3a      	ldr	r2, [r7, #32]
   2d25c:	3209      	adds	r2, #9
   2d25e:	7812      	ldrb	r2, [r2, #0]
   2d260:	0212      	lsls	r2, r2, #8
   2d262:	4313      	orrs	r3, r2
   2d264:	6a3a      	ldr	r2, [r7, #32]
   2d266:	3208      	adds	r2, #8
   2d268:	7812      	ldrb	r2, [r2, #0]
   2d26a:	4313      	orrs	r3, r2
   2d26c:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2d26e:	2347      	movs	r3, #71	; 0x47
   2d270:	18fc      	adds	r4, r7, r3
   2d272:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d274:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d276:	0011      	movs	r1, r2
   2d278:	0018      	movs	r0, r3
   2d27a:	4b7b      	ldr	r3, [pc, #492]	; (2d468 <chk_mounted+0x36c>)
   2d27c:	4798      	blx	r3
   2d27e:	0003      	movs	r3, r0
   2d280:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2d282:	2347      	movs	r3, #71	; 0x47
   2d284:	18fb      	adds	r3, r7, r3
   2d286:	781b      	ldrb	r3, [r3, #0]
   2d288:	2b03      	cmp	r3, #3
   2d28a:	d101      	bne.n	2d290 <chk_mounted+0x194>
   2d28c:	2301      	movs	r3, #1
   2d28e:	e209      	b.n	2d6a4 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2d290:	2347      	movs	r3, #71	; 0x47
   2d292:	18fb      	adds	r3, r7, r3
   2d294:	781b      	ldrb	r3, [r3, #0]
   2d296:	2b00      	cmp	r3, #0
   2d298:	d001      	beq.n	2d29e <chk_mounted+0x1a2>
   2d29a:	230d      	movs	r3, #13
   2d29c:	e202      	b.n	2d6a4 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2d29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d2a0:	223c      	movs	r2, #60	; 0x3c
   2d2a2:	5c9b      	ldrb	r3, [r3, r2]
   2d2a4:	021b      	lsls	r3, r3, #8
   2d2a6:	b21a      	sxth	r2, r3
   2d2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d2aa:	213b      	movs	r1, #59	; 0x3b
   2d2ac:	5c5b      	ldrb	r3, [r3, r1]
   2d2ae:	b21b      	sxth	r3, r3
   2d2b0:	4313      	orrs	r3, r2
   2d2b2:	b21a      	sxth	r2, r3
   2d2b4:	2380      	movs	r3, #128	; 0x80
   2d2b6:	009b      	lsls	r3, r3, #2
   2d2b8:	429a      	cmp	r2, r3
   2d2ba:	d001      	beq.n	2d2c0 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2d2bc:	230d      	movs	r3, #13
   2d2be:	e1f1      	b.n	2d6a4 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2d2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d2c2:	2247      	movs	r2, #71	; 0x47
   2d2c4:	5c9b      	ldrb	r3, [r3, r2]
   2d2c6:	021b      	lsls	r3, r3, #8
   2d2c8:	b21a      	sxth	r2, r3
   2d2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d2cc:	2146      	movs	r1, #70	; 0x46
   2d2ce:	5c5b      	ldrb	r3, [r3, r1]
   2d2d0:	b21b      	sxth	r3, r3
   2d2d2:	4313      	orrs	r3, r2
   2d2d4:	b21b      	sxth	r3, r3
   2d2d6:	b29b      	uxth	r3, r3
   2d2d8:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2d2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d2dc:	2b00      	cmp	r3, #0
   2d2de:	d112      	bne.n	2d306 <chk_mounted+0x20a>
   2d2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d2e2:	2257      	movs	r2, #87	; 0x57
   2d2e4:	5c9b      	ldrb	r3, [r3, r2]
   2d2e6:	061a      	lsls	r2, r3, #24
   2d2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d2ea:	2156      	movs	r1, #86	; 0x56
   2d2ec:	5c5b      	ldrb	r3, [r3, r1]
   2d2ee:	041b      	lsls	r3, r3, #16
   2d2f0:	4313      	orrs	r3, r2
   2d2f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d2f4:	2155      	movs	r1, #85	; 0x55
   2d2f6:	5c52      	ldrb	r2, [r2, r1]
   2d2f8:	0212      	lsls	r2, r2, #8
   2d2fa:	4313      	orrs	r3, r2
   2d2fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d2fe:	2154      	movs	r1, #84	; 0x54
   2d300:	5c52      	ldrb	r2, [r2, r1]
   2d302:	4313      	orrs	r3, r2
   2d304:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2d306:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d308:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2d30a:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2d30c:	231f      	movs	r3, #31
   2d30e:	18fb      	adds	r3, r7, r3
   2d310:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d312:	2140      	movs	r1, #64	; 0x40
   2d314:	5c52      	ldrb	r2, [r2, r1]
   2d316:	701a      	strb	r2, [r3, #0]
   2d318:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d31a:	221f      	movs	r2, #31
   2d31c:	18ba      	adds	r2, r7, r2
   2d31e:	7812      	ldrb	r2, [r2, #0]
   2d320:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2d322:	231f      	movs	r3, #31
   2d324:	18fb      	adds	r3, r7, r3
   2d326:	781b      	ldrb	r3, [r3, #0]
   2d328:	2b01      	cmp	r3, #1
   2d32a:	d006      	beq.n	2d33a <chk_mounted+0x23e>
   2d32c:	231f      	movs	r3, #31
   2d32e:	18fb      	adds	r3, r7, r3
   2d330:	781b      	ldrb	r3, [r3, #0]
   2d332:	2b02      	cmp	r3, #2
   2d334:	d001      	beq.n	2d33a <chk_mounted+0x23e>
   2d336:	230d      	movs	r3, #13
   2d338:	e1b4      	b.n	2d6a4 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2d33a:	231f      	movs	r3, #31
   2d33c:	18fb      	adds	r3, r7, r3
   2d33e:	781a      	ldrb	r2, [r3, #0]
   2d340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d342:	4353      	muls	r3, r2
   2d344:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2d346:	231f      	movs	r3, #31
   2d348:	18fb      	adds	r3, r7, r3
   2d34a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d34c:	213d      	movs	r1, #61	; 0x3d
   2d34e:	5c52      	ldrb	r2, [r2, r1]
   2d350:	701a      	strb	r2, [r3, #0]
   2d352:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d354:	221f      	movs	r2, #31
   2d356:	18ba      	adds	r2, r7, r2
   2d358:	7812      	ldrb	r2, [r2, #0]
   2d35a:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2d35c:	231f      	movs	r3, #31
   2d35e:	18fb      	adds	r3, r7, r3
   2d360:	781b      	ldrb	r3, [r3, #0]
   2d362:	2b00      	cmp	r3, #0
   2d364:	d008      	beq.n	2d378 <chk_mounted+0x27c>
   2d366:	231f      	movs	r3, #31
   2d368:	18fb      	adds	r3, r7, r3
   2d36a:	781b      	ldrb	r3, [r3, #0]
   2d36c:	221f      	movs	r2, #31
   2d36e:	18ba      	adds	r2, r7, r2
   2d370:	7812      	ldrb	r2, [r2, #0]
   2d372:	3a01      	subs	r2, #1
   2d374:	4013      	ands	r3, r2
   2d376:	d001      	beq.n	2d37c <chk_mounted+0x280>
   2d378:	230d      	movs	r3, #13
   2d37a:	e193      	b.n	2d6a4 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2d37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d37e:	2242      	movs	r2, #66	; 0x42
   2d380:	5c9b      	ldrb	r3, [r3, r2]
   2d382:	021b      	lsls	r3, r3, #8
   2d384:	b21a      	sxth	r2, r3
   2d386:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d388:	2141      	movs	r1, #65	; 0x41
   2d38a:	5c5b      	ldrb	r3, [r3, r1]
   2d38c:	b21b      	sxth	r3, r3
   2d38e:	4313      	orrs	r3, r2
   2d390:	b21b      	sxth	r3, r3
   2d392:	b29a      	uxth	r2, r3
   2d394:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d396:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2d398:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d39a:	891b      	ldrh	r3, [r3, #8]
   2d39c:	220f      	movs	r2, #15
   2d39e:	4013      	ands	r3, r2
   2d3a0:	b29b      	uxth	r3, r3
   2d3a2:	2b00      	cmp	r3, #0
   2d3a4:	d001      	beq.n	2d3aa <chk_mounted+0x2ae>
   2d3a6:	230d      	movs	r3, #13
   2d3a8:	e17c      	b.n	2d6a4 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2d3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3ac:	2244      	movs	r2, #68	; 0x44
   2d3ae:	5c9b      	ldrb	r3, [r3, r2]
   2d3b0:	021b      	lsls	r3, r3, #8
   2d3b2:	b21a      	sxth	r2, r3
   2d3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3b6:	2143      	movs	r1, #67	; 0x43
   2d3b8:	5c5b      	ldrb	r3, [r3, r1]
   2d3ba:	b21b      	sxth	r3, r3
   2d3bc:	4313      	orrs	r3, r2
   2d3be:	b21b      	sxth	r3, r3
   2d3c0:	b29b      	uxth	r3, r3
   2d3c2:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2d3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2d3c6:	2b00      	cmp	r3, #0
   2d3c8:	d112      	bne.n	2d3f0 <chk_mounted+0x2f4>
   2d3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3cc:	2253      	movs	r2, #83	; 0x53
   2d3ce:	5c9b      	ldrb	r3, [r3, r2]
   2d3d0:	061a      	lsls	r2, r3, #24
   2d3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3d4:	2152      	movs	r1, #82	; 0x52
   2d3d6:	5c5b      	ldrb	r3, [r3, r1]
   2d3d8:	041b      	lsls	r3, r3, #16
   2d3da:	4313      	orrs	r3, r2
   2d3dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d3de:	2151      	movs	r1, #81	; 0x51
   2d3e0:	5c52      	ldrb	r2, [r2, r1]
   2d3e2:	0212      	lsls	r2, r2, #8
   2d3e4:	4313      	orrs	r3, r2
   2d3e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d3e8:	2150      	movs	r1, #80	; 0x50
   2d3ea:	5c52      	ldrb	r2, [r2, r1]
   2d3ec:	4313      	orrs	r3, r2
   2d3ee:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2d3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3f2:	223f      	movs	r2, #63	; 0x3f
   2d3f4:	5c9b      	ldrb	r3, [r3, r2]
   2d3f6:	021b      	lsls	r3, r3, #8
   2d3f8:	b21a      	sxth	r2, r3
   2d3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3fc:	213e      	movs	r1, #62	; 0x3e
   2d3fe:	5c5b      	ldrb	r3, [r3, r1]
   2d400:	b21b      	sxth	r3, r3
   2d402:	4313      	orrs	r3, r2
   2d404:	b21a      	sxth	r2, r3
   2d406:	231c      	movs	r3, #28
   2d408:	18fb      	adds	r3, r7, r3
   2d40a:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2d40c:	231c      	movs	r3, #28
   2d40e:	18fb      	adds	r3, r7, r3
   2d410:	881b      	ldrh	r3, [r3, #0]
   2d412:	2b00      	cmp	r3, #0
   2d414:	d101      	bne.n	2d41a <chk_mounted+0x31e>
   2d416:	230d      	movs	r3, #13
   2d418:	e144      	b.n	2d6a4 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2d41a:	231c      	movs	r3, #28
   2d41c:	18fb      	adds	r3, r7, r3
   2d41e:	881a      	ldrh	r2, [r3, #0]
   2d420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d422:	18d3      	adds	r3, r2, r3
   2d424:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d426:	8912      	ldrh	r2, [r2, #8]
   2d428:	0912      	lsrs	r2, r2, #4
   2d42a:	b292      	uxth	r2, r2
   2d42c:	189b      	adds	r3, r3, r2
   2d42e:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2d430:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2d432:	69bb      	ldr	r3, [r7, #24]
   2d434:	429a      	cmp	r2, r3
   2d436:	d201      	bcs.n	2d43c <chk_mounted+0x340>
   2d438:	230d      	movs	r3, #13
   2d43a:	e133      	b.n	2d6a4 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2d43c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2d43e:	69bb      	ldr	r3, [r7, #24]
   2d440:	1ad2      	subs	r2, r2, r3
   2d442:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d444:	789b      	ldrb	r3, [r3, #2]
   2d446:	0019      	movs	r1, r3
   2d448:	4b08      	ldr	r3, [pc, #32]	; (2d46c <chk_mounted+0x370>)
   2d44a:	0010      	movs	r0, r2
   2d44c:	4798      	blx	r3
   2d44e:	0003      	movs	r3, r0
   2d450:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2d452:	697b      	ldr	r3, [r7, #20]
   2d454:	2b00      	cmp	r3, #0
   2d456:	d10b      	bne.n	2d470 <chk_mounted+0x374>
   2d458:	230d      	movs	r3, #13
   2d45a:	e123      	b.n	2d6a4 <chk_mounted+0x5a8>
   2d45c:	200042f4 	.word	0x200042f4
   2d460:	0002b259 	.word	0x0002b259
   2d464:	0002b1d5 	.word	0x0002b1d5
   2d468:	0002d029 	.word	0x0002d029
   2d46c:	00032805 	.word	0x00032805
	fmt = FS_FAT12;
   2d470:	2347      	movs	r3, #71	; 0x47
   2d472:	18fb      	adds	r3, r7, r3
   2d474:	2201      	movs	r2, #1
   2d476:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2d478:	697b      	ldr	r3, [r7, #20]
   2d47a:	4a8c      	ldr	r2, [pc, #560]	; (2d6ac <chk_mounted+0x5b0>)
   2d47c:	4293      	cmp	r3, r2
   2d47e:	d903      	bls.n	2d488 <chk_mounted+0x38c>
   2d480:	2347      	movs	r3, #71	; 0x47
   2d482:	18fb      	adds	r3, r7, r3
   2d484:	2202      	movs	r2, #2
   2d486:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2d488:	697b      	ldr	r3, [r7, #20]
   2d48a:	4a89      	ldr	r2, [pc, #548]	; (2d6b0 <chk_mounted+0x5b4>)
   2d48c:	4293      	cmp	r3, r2
   2d48e:	d903      	bls.n	2d498 <chk_mounted+0x39c>
   2d490:	2347      	movs	r3, #71	; 0x47
   2d492:	18fb      	adds	r3, r7, r3
   2d494:	2203      	movs	r2, #3
   2d496:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2d498:	697b      	ldr	r3, [r7, #20]
   2d49a:	1c9a      	adds	r2, r3, #2
   2d49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d49e:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2d4a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d4a2:	69bb      	ldr	r3, [r7, #24]
   2d4a4:	18d2      	adds	r2, r2, r3
   2d4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d4a8:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2d4aa:	231c      	movs	r3, #28
   2d4ac:	18fb      	adds	r3, r7, r3
   2d4ae:	881a      	ldrh	r2, [r3, #0]
   2d4b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d4b2:	18d2      	adds	r2, r2, r3
   2d4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d4b6:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2d4b8:	2347      	movs	r3, #71	; 0x47
   2d4ba:	18fb      	adds	r3, r7, r3
   2d4bc:	781b      	ldrb	r3, [r3, #0]
   2d4be:	2b03      	cmp	r3, #3
   2d4c0:	d11e      	bne.n	2d500 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2d4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d4c4:	891b      	ldrh	r3, [r3, #8]
   2d4c6:	2b00      	cmp	r3, #0
   2d4c8:	d001      	beq.n	2d4ce <chk_mounted+0x3d2>
   2d4ca:	230d      	movs	r3, #13
   2d4cc:	e0ea      	b.n	2d6a4 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2d4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d4d0:	225f      	movs	r2, #95	; 0x5f
   2d4d2:	5c9b      	ldrb	r3, [r3, r2]
   2d4d4:	061a      	lsls	r2, r3, #24
   2d4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d4d8:	215e      	movs	r1, #94	; 0x5e
   2d4da:	5c5b      	ldrb	r3, [r3, r1]
   2d4dc:	041b      	lsls	r3, r3, #16
   2d4de:	4313      	orrs	r3, r2
   2d4e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d4e2:	215d      	movs	r1, #93	; 0x5d
   2d4e4:	5c52      	ldrb	r2, [r2, r1]
   2d4e6:	0212      	lsls	r2, r2, #8
   2d4e8:	4313      	orrs	r3, r2
   2d4ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d4ec:	215c      	movs	r1, #92	; 0x5c
   2d4ee:	5c52      	ldrb	r2, [r2, r1]
   2d4f0:	431a      	orrs	r2, r3
   2d4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d4f4:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2d4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d4f8:	699b      	ldr	r3, [r3, #24]
   2d4fa:	009b      	lsls	r3, r3, #2
   2d4fc:	633b      	str	r3, [r7, #48]	; 0x30
   2d4fe:	e020      	b.n	2d542 <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2d500:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d502:	891b      	ldrh	r3, [r3, #8]
   2d504:	2b00      	cmp	r3, #0
   2d506:	d101      	bne.n	2d50c <chk_mounted+0x410>
   2d508:	230d      	movs	r3, #13
   2d50a:	e0cb      	b.n	2d6a4 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2d50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d50e:	6a1a      	ldr	r2, [r3, #32]
   2d510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d512:	18d2      	adds	r2, r2, r3
   2d514:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d516:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2d518:	2347      	movs	r3, #71	; 0x47
   2d51a:	18fb      	adds	r3, r7, r3
   2d51c:	781b      	ldrb	r3, [r3, #0]
   2d51e:	2b02      	cmp	r3, #2
   2d520:	d103      	bne.n	2d52a <chk_mounted+0x42e>
   2d522:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d524:	699b      	ldr	r3, [r3, #24]
   2d526:	005b      	lsls	r3, r3, #1
   2d528:	e00a      	b.n	2d540 <chk_mounted+0x444>
   2d52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d52c:	699a      	ldr	r2, [r3, #24]
   2d52e:	0013      	movs	r3, r2
   2d530:	005b      	lsls	r3, r3, #1
   2d532:	189b      	adds	r3, r3, r2
   2d534:	085a      	lsrs	r2, r3, #1
   2d536:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d538:	699b      	ldr	r3, [r3, #24]
   2d53a:	2101      	movs	r1, #1
   2d53c:	400b      	ands	r3, r1
   2d53e:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2d540:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2d542:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d544:	69da      	ldr	r2, [r3, #28]
   2d546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2d548:	495a      	ldr	r1, [pc, #360]	; (2d6b4 <chk_mounted+0x5b8>)
   2d54a:	468c      	mov	ip, r1
   2d54c:	4463      	add	r3, ip
   2d54e:	0a5b      	lsrs	r3, r3, #9
   2d550:	429a      	cmp	r2, r3
   2d552:	d201      	bcs.n	2d558 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2d554:	230d      	movs	r3, #13
   2d556:	e0a5      	b.n	2d6a4 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2d558:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d55a:	2201      	movs	r2, #1
   2d55c:	4252      	negs	r2, r2
   2d55e:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2d560:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d562:	2200      	movs	r2, #0
   2d564:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2d566:	2347      	movs	r3, #71	; 0x47
   2d568:	18fb      	adds	r3, r7, r3
   2d56a:	781b      	ldrb	r3, [r3, #0]
   2d56c:	2b03      	cmp	r3, #3
   2d56e:	d000      	beq.n	2d572 <chk_mounted+0x476>
   2d570:	e082      	b.n	2d678 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2d572:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d574:	2200      	movs	r2, #0
   2d576:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2d578:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d57a:	2261      	movs	r2, #97	; 0x61
   2d57c:	5c9b      	ldrb	r3, [r3, r2]
   2d57e:	021b      	lsls	r3, r3, #8
   2d580:	b21a      	sxth	r2, r3
   2d582:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d584:	2160      	movs	r1, #96	; 0x60
   2d586:	5c5b      	ldrb	r3, [r3, r1]
   2d588:	b21b      	sxth	r3, r3
   2d58a:	4313      	orrs	r3, r2
   2d58c:	b21b      	sxth	r3, r3
   2d58e:	b29b      	uxth	r3, r3
   2d590:	001a      	movs	r2, r3
   2d592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d594:	18d2      	adds	r2, r2, r3
   2d596:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d598:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2d59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d59c:	7858      	ldrb	r0, [r3, #1]
   2d59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5a0:	3330      	adds	r3, #48	; 0x30
   2d5a2:	0019      	movs	r1, r3
   2d5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5a6:	695a      	ldr	r2, [r3, #20]
   2d5a8:	2301      	movs	r3, #1
   2d5aa:	4c43      	ldr	r4, [pc, #268]	; (2d6b8 <chk_mounted+0x5bc>)
   2d5ac:	47a0      	blx	r4
   2d5ae:	1e03      	subs	r3, r0, #0
   2d5b0:	d162      	bne.n	2d678 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2d5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5b4:	4a41      	ldr	r2, [pc, #260]	; (2d6bc <chk_mounted+0x5c0>)
   2d5b6:	5c9b      	ldrb	r3, [r3, r2]
   2d5b8:	021b      	lsls	r3, r3, #8
   2d5ba:	b21a      	sxth	r2, r3
   2d5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5be:	4940      	ldr	r1, [pc, #256]	; (2d6c0 <chk_mounted+0x5c4>)
   2d5c0:	5c5b      	ldrb	r3, [r3, r1]
   2d5c2:	b21b      	sxth	r3, r3
   2d5c4:	4313      	orrs	r3, r2
   2d5c6:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2d5c8:	4a3e      	ldr	r2, [pc, #248]	; (2d6c4 <chk_mounted+0x5c8>)
   2d5ca:	4293      	cmp	r3, r2
   2d5cc:	d154      	bne.n	2d678 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2d5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5d0:	2233      	movs	r2, #51	; 0x33
   2d5d2:	5c9b      	ldrb	r3, [r3, r2]
   2d5d4:	061a      	lsls	r2, r3, #24
   2d5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5d8:	2132      	movs	r1, #50	; 0x32
   2d5da:	5c5b      	ldrb	r3, [r3, r1]
   2d5dc:	041b      	lsls	r3, r3, #16
   2d5de:	4313      	orrs	r3, r2
   2d5e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d5e2:	2131      	movs	r1, #49	; 0x31
   2d5e4:	5c52      	ldrb	r2, [r2, r1]
   2d5e6:	0212      	lsls	r2, r2, #8
   2d5e8:	4313      	orrs	r3, r2
   2d5ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d5ec:	2130      	movs	r1, #48	; 0x30
   2d5ee:	5c52      	ldrb	r2, [r2, r1]
   2d5f0:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2d5f2:	4a35      	ldr	r2, [pc, #212]	; (2d6c8 <chk_mounted+0x5cc>)
   2d5f4:	4293      	cmp	r3, r2
   2d5f6:	d13f      	bne.n	2d678 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2d5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5fa:	4a34      	ldr	r2, [pc, #208]	; (2d6cc <chk_mounted+0x5d0>)
   2d5fc:	5c9b      	ldrb	r3, [r3, r2]
   2d5fe:	061a      	lsls	r2, r3, #24
   2d600:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d602:	4933      	ldr	r1, [pc, #204]	; (2d6d0 <chk_mounted+0x5d4>)
   2d604:	5c5b      	ldrb	r3, [r3, r1]
   2d606:	041b      	lsls	r3, r3, #16
   2d608:	4313      	orrs	r3, r2
   2d60a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d60c:	4931      	ldr	r1, [pc, #196]	; (2d6d4 <chk_mounted+0x5d8>)
   2d60e:	5c52      	ldrb	r2, [r2, r1]
   2d610:	0212      	lsls	r2, r2, #8
   2d612:	4313      	orrs	r3, r2
   2d614:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d616:	2285      	movs	r2, #133	; 0x85
   2d618:	0092      	lsls	r2, r2, #2
   2d61a:	5c8a      	ldrb	r2, [r1, r2]
   2d61c:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2d61e:	4a2e      	ldr	r2, [pc, #184]	; (2d6d8 <chk_mounted+0x5dc>)
   2d620:	4293      	cmp	r3, r2
   2d622:	d129      	bne.n	2d678 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2d624:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d626:	4a2d      	ldr	r2, [pc, #180]	; (2d6dc <chk_mounted+0x5e0>)
   2d628:	5c9b      	ldrb	r3, [r3, r2]
   2d62a:	061a      	lsls	r2, r3, #24
   2d62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d62e:	492c      	ldr	r1, [pc, #176]	; (2d6e0 <chk_mounted+0x5e4>)
   2d630:	5c5b      	ldrb	r3, [r3, r1]
   2d632:	041b      	lsls	r3, r3, #16
   2d634:	4313      	orrs	r3, r2
   2d636:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d638:	492a      	ldr	r1, [pc, #168]	; (2d6e4 <chk_mounted+0x5e8>)
   2d63a:	5c52      	ldrb	r2, [r2, r1]
   2d63c:	0212      	lsls	r2, r2, #8
   2d63e:	4313      	orrs	r3, r2
   2d640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d642:	2287      	movs	r2, #135	; 0x87
   2d644:	0092      	lsls	r2, r2, #2
   2d646:	5c8a      	ldrb	r2, [r1, r2]
   2d648:	431a      	orrs	r2, r3
   2d64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d64c:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2d64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d650:	4a25      	ldr	r2, [pc, #148]	; (2d6e8 <chk_mounted+0x5ec>)
   2d652:	5c9b      	ldrb	r3, [r3, r2]
   2d654:	061a      	lsls	r2, r3, #24
   2d656:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d658:	4924      	ldr	r1, [pc, #144]	; (2d6ec <chk_mounted+0x5f0>)
   2d65a:	5c5b      	ldrb	r3, [r3, r1]
   2d65c:	041b      	lsls	r3, r3, #16
   2d65e:	4313      	orrs	r3, r2
   2d660:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d662:	4923      	ldr	r1, [pc, #140]	; (2d6f0 <chk_mounted+0x5f4>)
   2d664:	5c52      	ldrb	r2, [r2, r1]
   2d666:	0212      	lsls	r2, r2, #8
   2d668:	4313      	orrs	r3, r2
   2d66a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d66c:	2286      	movs	r2, #134	; 0x86
   2d66e:	0092      	lsls	r2, r2, #2
   2d670:	5c8a      	ldrb	r2, [r1, r2]
   2d672:	431a      	orrs	r2, r3
   2d674:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d676:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2d678:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d67a:	2247      	movs	r2, #71	; 0x47
   2d67c:	18ba      	adds	r2, r7, r2
   2d67e:	7812      	ldrb	r2, [r2, #0]
   2d680:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2d682:	4b1c      	ldr	r3, [pc, #112]	; (2d6f4 <chk_mounted+0x5f8>)
   2d684:	881b      	ldrh	r3, [r3, #0]
   2d686:	3301      	adds	r3, #1
   2d688:	b29a      	uxth	r2, r3
   2d68a:	4b1a      	ldr	r3, [pc, #104]	; (2d6f4 <chk_mounted+0x5f8>)
   2d68c:	801a      	strh	r2, [r3, #0]
   2d68e:	4b19      	ldr	r3, [pc, #100]	; (2d6f4 <chk_mounted+0x5f8>)
   2d690:	881a      	ldrh	r2, [r3, #0]
   2d692:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d694:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2d696:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d698:	2200      	movs	r2, #0
   2d69a:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2d69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d69e:	2200      	movs	r2, #0
   2d6a0:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2d6a2:	2300      	movs	r3, #0
}
   2d6a4:	0018      	movs	r0, r3
   2d6a6:	46bd      	mov	sp, r7
   2d6a8:	b013      	add	sp, #76	; 0x4c
   2d6aa:	bd90      	pop	{r4, r7, pc}
   2d6ac:	00000ff5 	.word	0x00000ff5
   2d6b0:	0000fff5 	.word	0x0000fff5
   2d6b4:	000001ff 	.word	0x000001ff
   2d6b8:	0002b291 	.word	0x0002b291
   2d6bc:	0000022f 	.word	0x0000022f
   2d6c0:	0000022e 	.word	0x0000022e
   2d6c4:	ffffaa55 	.word	0xffffaa55
   2d6c8:	41615252 	.word	0x41615252
   2d6cc:	00000217 	.word	0x00000217
   2d6d0:	00000216 	.word	0x00000216
   2d6d4:	00000215 	.word	0x00000215
   2d6d8:	61417272 	.word	0x61417272
   2d6dc:	0000021f 	.word	0x0000021f
   2d6e0:	0000021e 	.word	0x0000021e
   2d6e4:	0000021d 	.word	0x0000021d
   2d6e8:	0000021b 	.word	0x0000021b
   2d6ec:	0000021a 	.word	0x0000021a
   2d6f0:	00000219 	.word	0x00000219
   2d6f4:	20004314 	.word	0x20004314

0002d6f8 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2d6f8:	b580      	push	{r7, lr}
   2d6fa:	b082      	sub	sp, #8
   2d6fc:	af00      	add	r7, sp, #0
   2d6fe:	6078      	str	r0, [r7, #4]
   2d700:	000a      	movs	r2, r1
   2d702:	1cbb      	adds	r3, r7, #2
   2d704:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2d706:	687b      	ldr	r3, [r7, #4]
   2d708:	2b00      	cmp	r3, #0
   2d70a:	d009      	beq.n	2d720 <validate+0x28>
   2d70c:	687b      	ldr	r3, [r7, #4]
   2d70e:	781b      	ldrb	r3, [r3, #0]
   2d710:	2b00      	cmp	r3, #0
   2d712:	d005      	beq.n	2d720 <validate+0x28>
   2d714:	687b      	ldr	r3, [r7, #4]
   2d716:	88db      	ldrh	r3, [r3, #6]
   2d718:	1cba      	adds	r2, r7, #2
   2d71a:	8812      	ldrh	r2, [r2, #0]
   2d71c:	429a      	cmp	r2, r3
   2d71e:	d001      	beq.n	2d724 <validate+0x2c>
		return FR_INVALID_OBJECT;
   2d720:	2309      	movs	r3, #9
   2d722:	e00c      	b.n	2d73e <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2d724:	687b      	ldr	r3, [r7, #4]
   2d726:	785b      	ldrb	r3, [r3, #1]
   2d728:	0018      	movs	r0, r3
   2d72a:	4b07      	ldr	r3, [pc, #28]	; (2d748 <validate+0x50>)
   2d72c:	4798      	blx	r3
   2d72e:	0003      	movs	r3, r0
   2d730:	001a      	movs	r2, r3
   2d732:	2301      	movs	r3, #1
   2d734:	4013      	ands	r3, r2
   2d736:	d001      	beq.n	2d73c <validate+0x44>
		return FR_NOT_READY;
   2d738:	2303      	movs	r3, #3
   2d73a:	e000      	b.n	2d73e <validate+0x46>

	return FR_OK;
   2d73c:	2300      	movs	r3, #0
}
   2d73e:	0018      	movs	r0, r3
   2d740:	46bd      	mov	sp, r7
   2d742:	b002      	add	sp, #8
   2d744:	bd80      	pop	{r7, pc}
   2d746:	46c0      	nop			; (mov r8, r8)
   2d748:	0002b259 	.word	0x0002b259

0002d74c <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2d74c:	b580      	push	{r7, lr}
   2d74e:	b084      	sub	sp, #16
   2d750:	af00      	add	r7, sp, #0
   2d752:	0002      	movs	r2, r0
   2d754:	6039      	str	r1, [r7, #0]
   2d756:	1dfb      	adds	r3, r7, #7
   2d758:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2d75a:	1dfb      	adds	r3, r7, #7
   2d75c:	781b      	ldrb	r3, [r3, #0]
   2d75e:	2b07      	cmp	r3, #7
   2d760:	d901      	bls.n	2d766 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2d762:	230b      	movs	r3, #11
   2d764:	e018      	b.n	2d798 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2d766:	1dfb      	adds	r3, r7, #7
   2d768:	781a      	ldrb	r2, [r3, #0]
   2d76a:	4b0d      	ldr	r3, [pc, #52]	; (2d7a0 <f_mount+0x54>)
   2d76c:	0092      	lsls	r2, r2, #2
   2d76e:	58d3      	ldr	r3, [r2, r3]
   2d770:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2d772:	68fb      	ldr	r3, [r7, #12]
   2d774:	2b00      	cmp	r3, #0
   2d776:	d002      	beq.n	2d77e <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2d778:	68fb      	ldr	r3, [r7, #12]
   2d77a:	2200      	movs	r2, #0
   2d77c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2d77e:	683b      	ldr	r3, [r7, #0]
   2d780:	2b00      	cmp	r3, #0
   2d782:	d002      	beq.n	2d78a <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2d784:	683b      	ldr	r3, [r7, #0]
   2d786:	2200      	movs	r2, #0
   2d788:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2d78a:	1dfb      	adds	r3, r7, #7
   2d78c:	781a      	ldrb	r2, [r3, #0]
   2d78e:	4b04      	ldr	r3, [pc, #16]	; (2d7a0 <f_mount+0x54>)
   2d790:	0092      	lsls	r2, r2, #2
   2d792:	6839      	ldr	r1, [r7, #0]
   2d794:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2d796:	2300      	movs	r3, #0
}
   2d798:	0018      	movs	r0, r3
   2d79a:	46bd      	mov	sp, r7
   2d79c:	b004      	add	sp, #16
   2d79e:	bd80      	pop	{r7, pc}
   2d7a0:	200042f4 	.word	0x200042f4

0002d7a4 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2d7a4:	b590      	push	{r4, r7, lr}
   2d7a6:	4ce5      	ldr	r4, [pc, #916]	; (2db3c <f_open+0x398>)
   2d7a8:	44a5      	add	sp, r4
   2d7aa:	af00      	add	r7, sp, #0
   2d7ac:	60f8      	str	r0, [r7, #12]
   2d7ae:	60b9      	str	r1, [r7, #8]
   2d7b0:	4be3      	ldr	r3, [pc, #908]	; (2db40 <f_open+0x39c>)
   2d7b2:	2194      	movs	r1, #148	; 0x94
   2d7b4:	0089      	lsls	r1, r1, #2
   2d7b6:	468c      	mov	ip, r1
   2d7b8:	44bc      	add	ip, r7
   2d7ba:	4463      	add	r3, ip
   2d7bc:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2d7be:	68fb      	ldr	r3, [r7, #12]
   2d7c0:	2200      	movs	r2, #0
   2d7c2:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2d7c4:	4bde      	ldr	r3, [pc, #888]	; (2db40 <f_open+0x39c>)
   2d7c6:	2294      	movs	r2, #148	; 0x94
   2d7c8:	0092      	lsls	r2, r2, #2
   2d7ca:	4694      	mov	ip, r2
   2d7cc:	44bc      	add	ip, r7
   2d7ce:	4463      	add	r3, ip
   2d7d0:	4adb      	ldr	r2, [pc, #876]	; (2db40 <f_open+0x39c>)
   2d7d2:	2194      	movs	r1, #148	; 0x94
   2d7d4:	0089      	lsls	r1, r1, #2
   2d7d6:	468c      	mov	ip, r1
   2d7d8:	44bc      	add	ip, r7
   2d7da:	4462      	add	r2, ip
   2d7dc:	7812      	ldrb	r2, [r2, #0]
   2d7de:	211f      	movs	r1, #31
   2d7e0:	400a      	ands	r2, r1
   2d7e2:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2d7e4:	4bd6      	ldr	r3, [pc, #856]	; (2db40 <f_open+0x39c>)
   2d7e6:	2294      	movs	r2, #148	; 0x94
   2d7e8:	0092      	lsls	r2, r2, #2
   2d7ea:	4694      	mov	ip, r2
   2d7ec:	44bc      	add	ip, r7
   2d7ee:	4463      	add	r3, ip
   2d7f0:	781b      	ldrb	r3, [r3, #0]
   2d7f2:	2201      	movs	r2, #1
   2d7f4:	4393      	bics	r3, r2
   2d7f6:	b2da      	uxtb	r2, r3
   2d7f8:	4bd2      	ldr	r3, [pc, #840]	; (2db44 <f_open+0x3a0>)
   2d7fa:	18fc      	adds	r4, r7, r3
   2d7fc:	2387      	movs	r3, #135	; 0x87
   2d7fe:	009b      	lsls	r3, r3, #2
   2d800:	18f9      	adds	r1, r7, r3
   2d802:	2308      	movs	r3, #8
   2d804:	18fb      	adds	r3, r7, r3
   2d806:	0018      	movs	r0, r3
   2d808:	4bcf      	ldr	r3, [pc, #828]	; (2db48 <f_open+0x3a4>)
   2d80a:	4798      	blx	r3
   2d80c:	0003      	movs	r3, r0
   2d80e:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2d810:	2387      	movs	r3, #135	; 0x87
   2d812:	009b      	lsls	r3, r3, #2
   2d814:	18fb      	adds	r3, r7, r3
   2d816:	2284      	movs	r2, #132	; 0x84
   2d818:	0092      	lsls	r2, r2, #2
   2d81a:	18ba      	adds	r2, r7, r2
   2d81c:	619a      	str	r2, [r3, #24]
   2d81e:	2387      	movs	r3, #135	; 0x87
   2d820:	009b      	lsls	r3, r3, #2
   2d822:	18fb      	adds	r3, r7, r3
   2d824:	2210      	movs	r2, #16
   2d826:	18ba      	adds	r2, r7, r2
   2d828:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2d82a:	4bc6      	ldr	r3, [pc, #792]	; (2db44 <f_open+0x3a0>)
   2d82c:	18fb      	adds	r3, r7, r3
   2d82e:	781b      	ldrb	r3, [r3, #0]
   2d830:	2b00      	cmp	r3, #0
   2d832:	d10b      	bne.n	2d84c <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2d834:	68ba      	ldr	r2, [r7, #8]
   2d836:	4bc3      	ldr	r3, [pc, #780]	; (2db44 <f_open+0x3a0>)
   2d838:	18fc      	adds	r4, r7, r3
   2d83a:	2387      	movs	r3, #135	; 0x87
   2d83c:	009b      	lsls	r3, r3, #2
   2d83e:	18fb      	adds	r3, r7, r3
   2d840:	0011      	movs	r1, r2
   2d842:	0018      	movs	r0, r3
   2d844:	4bc1      	ldr	r3, [pc, #772]	; (2db4c <f_open+0x3a8>)
   2d846:	4798      	blx	r3
   2d848:	0003      	movs	r3, r0
   2d84a:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2d84c:	2387      	movs	r3, #135	; 0x87
   2d84e:	009b      	lsls	r3, r3, #2
   2d850:	18fb      	adds	r3, r7, r3
   2d852:	695b      	ldr	r3, [r3, #20]
   2d854:	2292      	movs	r2, #146	; 0x92
   2d856:	0092      	lsls	r2, r2, #2
   2d858:	18ba      	adds	r2, r7, r2
   2d85a:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2d85c:	4bb9      	ldr	r3, [pc, #740]	; (2db44 <f_open+0x3a0>)
   2d85e:	18fb      	adds	r3, r7, r3
   2d860:	781b      	ldrb	r3, [r3, #0]
   2d862:	2b00      	cmp	r3, #0
   2d864:	d109      	bne.n	2d87a <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2d866:	2392      	movs	r3, #146	; 0x92
   2d868:	009b      	lsls	r3, r3, #2
   2d86a:	18fb      	adds	r3, r7, r3
   2d86c:	681b      	ldr	r3, [r3, #0]
   2d86e:	2b00      	cmp	r3, #0
   2d870:	d103      	bne.n	2d87a <f_open+0xd6>
			res = FR_INVALID_NAME;
   2d872:	4bb4      	ldr	r3, [pc, #720]	; (2db44 <f_open+0x3a0>)
   2d874:	18fb      	adds	r3, r7, r3
   2d876:	2206      	movs	r2, #6
   2d878:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2d87a:	4bb1      	ldr	r3, [pc, #708]	; (2db40 <f_open+0x39c>)
   2d87c:	2294      	movs	r2, #148	; 0x94
   2d87e:	0092      	lsls	r2, r2, #2
   2d880:	4694      	mov	ip, r2
   2d882:	44bc      	add	ip, r7
   2d884:	4463      	add	r3, ip
   2d886:	781b      	ldrb	r3, [r3, #0]
   2d888:	221c      	movs	r2, #28
   2d88a:	4013      	ands	r3, r2
   2d88c:	d100      	bne.n	2d890 <f_open+0xec>
   2d88e:	e141      	b.n	2db14 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2d890:	4bac      	ldr	r3, [pc, #688]	; (2db44 <f_open+0x3a0>)
   2d892:	18fb      	adds	r3, r7, r3
   2d894:	781b      	ldrb	r3, [r3, #0]
   2d896:	2b00      	cmp	r3, #0
   2d898:	d027      	beq.n	2d8ea <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2d89a:	4baa      	ldr	r3, [pc, #680]	; (2db44 <f_open+0x3a0>)
   2d89c:	18fb      	adds	r3, r7, r3
   2d89e:	781b      	ldrb	r3, [r3, #0]
   2d8a0:	2b04      	cmp	r3, #4
   2d8a2:	d109      	bne.n	2d8b8 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2d8a4:	4ba7      	ldr	r3, [pc, #668]	; (2db44 <f_open+0x3a0>)
   2d8a6:	18fc      	adds	r4, r7, r3
   2d8a8:	2387      	movs	r3, #135	; 0x87
   2d8aa:	009b      	lsls	r3, r3, #2
   2d8ac:	18fb      	adds	r3, r7, r3
   2d8ae:	0018      	movs	r0, r3
   2d8b0:	4ba7      	ldr	r3, [pc, #668]	; (2db50 <f_open+0x3ac>)
   2d8b2:	4798      	blx	r3
   2d8b4:	0003      	movs	r3, r0
   2d8b6:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2d8b8:	4ba1      	ldr	r3, [pc, #644]	; (2db40 <f_open+0x39c>)
   2d8ba:	2294      	movs	r2, #148	; 0x94
   2d8bc:	0092      	lsls	r2, r2, #2
   2d8be:	4694      	mov	ip, r2
   2d8c0:	44bc      	add	ip, r7
   2d8c2:	4463      	add	r3, ip
   2d8c4:	4a9e      	ldr	r2, [pc, #632]	; (2db40 <f_open+0x39c>)
   2d8c6:	2194      	movs	r1, #148	; 0x94
   2d8c8:	0089      	lsls	r1, r1, #2
   2d8ca:	468c      	mov	ip, r1
   2d8cc:	44bc      	add	ip, r7
   2d8ce:	4462      	add	r2, ip
   2d8d0:	7812      	ldrb	r2, [r2, #0]
   2d8d2:	2108      	movs	r1, #8
   2d8d4:	430a      	orrs	r2, r1
   2d8d6:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2d8d8:	2387      	movs	r3, #135	; 0x87
   2d8da:	009b      	lsls	r3, r3, #2
   2d8dc:	18fb      	adds	r3, r7, r3
   2d8de:	695b      	ldr	r3, [r3, #20]
   2d8e0:	2292      	movs	r2, #146	; 0x92
   2d8e2:	0092      	lsls	r2, r2, #2
   2d8e4:	18ba      	adds	r2, r7, r2
   2d8e6:	6013      	str	r3, [r2, #0]
   2d8e8:	e01c      	b.n	2d924 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2d8ea:	2392      	movs	r3, #146	; 0x92
   2d8ec:	009b      	lsls	r3, r3, #2
   2d8ee:	18fb      	adds	r3, r7, r3
   2d8f0:	681b      	ldr	r3, [r3, #0]
   2d8f2:	330b      	adds	r3, #11
   2d8f4:	781b      	ldrb	r3, [r3, #0]
   2d8f6:	001a      	movs	r2, r3
   2d8f8:	2311      	movs	r3, #17
   2d8fa:	4013      	ands	r3, r2
   2d8fc:	d004      	beq.n	2d908 <f_open+0x164>
				res = FR_DENIED;
   2d8fe:	4b91      	ldr	r3, [pc, #580]	; (2db44 <f_open+0x3a0>)
   2d900:	18fb      	adds	r3, r7, r3
   2d902:	2207      	movs	r2, #7
   2d904:	701a      	strb	r2, [r3, #0]
   2d906:	e00d      	b.n	2d924 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2d908:	4b8d      	ldr	r3, [pc, #564]	; (2db40 <f_open+0x39c>)
   2d90a:	2294      	movs	r2, #148	; 0x94
   2d90c:	0092      	lsls	r2, r2, #2
   2d90e:	4694      	mov	ip, r2
   2d910:	44bc      	add	ip, r7
   2d912:	4463      	add	r3, ip
   2d914:	781b      	ldrb	r3, [r3, #0]
   2d916:	2204      	movs	r2, #4
   2d918:	4013      	ands	r3, r2
   2d91a:	d003      	beq.n	2d924 <f_open+0x180>
					res = FR_EXIST;
   2d91c:	4b89      	ldr	r3, [pc, #548]	; (2db44 <f_open+0x3a0>)
   2d91e:	18fb      	adds	r3, r7, r3
   2d920:	2208      	movs	r2, #8
   2d922:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2d924:	4b87      	ldr	r3, [pc, #540]	; (2db44 <f_open+0x3a0>)
   2d926:	18fb      	adds	r3, r7, r3
   2d928:	781b      	ldrb	r3, [r3, #0]
   2d92a:	2b00      	cmp	r3, #0
   2d92c:	d000      	beq.n	2d930 <f_open+0x18c>
   2d92e:	e12f      	b.n	2db90 <f_open+0x3ec>
   2d930:	4b83      	ldr	r3, [pc, #524]	; (2db40 <f_open+0x39c>)
   2d932:	2294      	movs	r2, #148	; 0x94
   2d934:	0092      	lsls	r2, r2, #2
   2d936:	4694      	mov	ip, r2
   2d938:	44bc      	add	ip, r7
   2d93a:	4463      	add	r3, ip
   2d93c:	781b      	ldrb	r3, [r3, #0]
   2d93e:	2208      	movs	r2, #8
   2d940:	4013      	ands	r3, r2
   2d942:	d100      	bne.n	2d946 <f_open+0x1a2>
   2d944:	e124      	b.n	2db90 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2d946:	4b83      	ldr	r3, [pc, #524]	; (2db54 <f_open+0x3b0>)
   2d948:	4798      	blx	r3
   2d94a:	0003      	movs	r3, r0
   2d94c:	2291      	movs	r2, #145	; 0x91
   2d94e:	0092      	lsls	r2, r2, #2
   2d950:	18ba      	adds	r2, r7, r2
   2d952:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2d954:	2392      	movs	r3, #146	; 0x92
   2d956:	009b      	lsls	r3, r3, #2
   2d958:	18fb      	adds	r3, r7, r3
   2d95a:	681b      	ldr	r3, [r3, #0]
   2d95c:	330e      	adds	r3, #14
   2d95e:	2291      	movs	r2, #145	; 0x91
   2d960:	0092      	lsls	r2, r2, #2
   2d962:	18ba      	adds	r2, r7, r2
   2d964:	6812      	ldr	r2, [r2, #0]
   2d966:	b2d2      	uxtb	r2, r2
   2d968:	701a      	strb	r2, [r3, #0]
   2d96a:	2392      	movs	r3, #146	; 0x92
   2d96c:	009b      	lsls	r3, r3, #2
   2d96e:	18fb      	adds	r3, r7, r3
   2d970:	681b      	ldr	r3, [r3, #0]
   2d972:	330f      	adds	r3, #15
   2d974:	2291      	movs	r2, #145	; 0x91
   2d976:	0092      	lsls	r2, r2, #2
   2d978:	18ba      	adds	r2, r7, r2
   2d97a:	6812      	ldr	r2, [r2, #0]
   2d97c:	b292      	uxth	r2, r2
   2d97e:	0a12      	lsrs	r2, r2, #8
   2d980:	b292      	uxth	r2, r2
   2d982:	b2d2      	uxtb	r2, r2
   2d984:	701a      	strb	r2, [r3, #0]
   2d986:	2392      	movs	r3, #146	; 0x92
   2d988:	009b      	lsls	r3, r3, #2
   2d98a:	18fb      	adds	r3, r7, r3
   2d98c:	681b      	ldr	r3, [r3, #0]
   2d98e:	3310      	adds	r3, #16
   2d990:	2291      	movs	r2, #145	; 0x91
   2d992:	0092      	lsls	r2, r2, #2
   2d994:	18ba      	adds	r2, r7, r2
   2d996:	6812      	ldr	r2, [r2, #0]
   2d998:	0c12      	lsrs	r2, r2, #16
   2d99a:	b2d2      	uxtb	r2, r2
   2d99c:	701a      	strb	r2, [r3, #0]
   2d99e:	2392      	movs	r3, #146	; 0x92
   2d9a0:	009b      	lsls	r3, r3, #2
   2d9a2:	18fb      	adds	r3, r7, r3
   2d9a4:	681b      	ldr	r3, [r3, #0]
   2d9a6:	3311      	adds	r3, #17
   2d9a8:	2291      	movs	r2, #145	; 0x91
   2d9aa:	0092      	lsls	r2, r2, #2
   2d9ac:	18ba      	adds	r2, r7, r2
   2d9ae:	6812      	ldr	r2, [r2, #0]
   2d9b0:	0e12      	lsrs	r2, r2, #24
   2d9b2:	b2d2      	uxtb	r2, r2
   2d9b4:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2d9b6:	2392      	movs	r3, #146	; 0x92
   2d9b8:	009b      	lsls	r3, r3, #2
   2d9ba:	18fb      	adds	r3, r7, r3
   2d9bc:	681b      	ldr	r3, [r3, #0]
   2d9be:	330b      	adds	r3, #11
   2d9c0:	2200      	movs	r2, #0
   2d9c2:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2d9c4:	2392      	movs	r3, #146	; 0x92
   2d9c6:	009b      	lsls	r3, r3, #2
   2d9c8:	18fb      	adds	r3, r7, r3
   2d9ca:	681b      	ldr	r3, [r3, #0]
   2d9cc:	331c      	adds	r3, #28
   2d9ce:	2200      	movs	r2, #0
   2d9d0:	701a      	strb	r2, [r3, #0]
   2d9d2:	2392      	movs	r3, #146	; 0x92
   2d9d4:	009b      	lsls	r3, r3, #2
   2d9d6:	18fb      	adds	r3, r7, r3
   2d9d8:	681b      	ldr	r3, [r3, #0]
   2d9da:	331d      	adds	r3, #29
   2d9dc:	2200      	movs	r2, #0
   2d9de:	701a      	strb	r2, [r3, #0]
   2d9e0:	2392      	movs	r3, #146	; 0x92
   2d9e2:	009b      	lsls	r3, r3, #2
   2d9e4:	18fb      	adds	r3, r7, r3
   2d9e6:	681b      	ldr	r3, [r3, #0]
   2d9e8:	331e      	adds	r3, #30
   2d9ea:	2200      	movs	r2, #0
   2d9ec:	701a      	strb	r2, [r3, #0]
   2d9ee:	2392      	movs	r3, #146	; 0x92
   2d9f0:	009b      	lsls	r3, r3, #2
   2d9f2:	18fb      	adds	r3, r7, r3
   2d9f4:	681b      	ldr	r3, [r3, #0]
   2d9f6:	331f      	adds	r3, #31
   2d9f8:	2200      	movs	r2, #0
   2d9fa:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2d9fc:	2392      	movs	r3, #146	; 0x92
   2d9fe:	009b      	lsls	r3, r3, #2
   2da00:	18fb      	adds	r3, r7, r3
   2da02:	681b      	ldr	r3, [r3, #0]
   2da04:	3315      	adds	r3, #21
   2da06:	781b      	ldrb	r3, [r3, #0]
   2da08:	021b      	lsls	r3, r3, #8
   2da0a:	b21a      	sxth	r2, r3
   2da0c:	2392      	movs	r3, #146	; 0x92
   2da0e:	009b      	lsls	r3, r3, #2
   2da10:	18fb      	adds	r3, r7, r3
   2da12:	681b      	ldr	r3, [r3, #0]
   2da14:	3314      	adds	r3, #20
   2da16:	781b      	ldrb	r3, [r3, #0]
   2da18:	b21b      	sxth	r3, r3
   2da1a:	4313      	orrs	r3, r2
   2da1c:	b21b      	sxth	r3, r3
   2da1e:	b29b      	uxth	r3, r3
   2da20:	041b      	lsls	r3, r3, #16
   2da22:	2292      	movs	r2, #146	; 0x92
   2da24:	0092      	lsls	r2, r2, #2
   2da26:	18ba      	adds	r2, r7, r2
   2da28:	6812      	ldr	r2, [r2, #0]
   2da2a:	321b      	adds	r2, #27
   2da2c:	7812      	ldrb	r2, [r2, #0]
   2da2e:	0212      	lsls	r2, r2, #8
   2da30:	b211      	sxth	r1, r2
   2da32:	2292      	movs	r2, #146	; 0x92
   2da34:	0092      	lsls	r2, r2, #2
   2da36:	18ba      	adds	r2, r7, r2
   2da38:	6812      	ldr	r2, [r2, #0]
   2da3a:	321a      	adds	r2, #26
   2da3c:	7812      	ldrb	r2, [r2, #0]
   2da3e:	b212      	sxth	r2, r2
   2da40:	430a      	orrs	r2, r1
   2da42:	b212      	sxth	r2, r2
   2da44:	b292      	uxth	r2, r2
   2da46:	4313      	orrs	r3, r2
   2da48:	2290      	movs	r2, #144	; 0x90
   2da4a:	0092      	lsls	r2, r2, #2
   2da4c:	18ba      	adds	r2, r7, r2
   2da4e:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2da50:	2392      	movs	r3, #146	; 0x92
   2da52:	009b      	lsls	r3, r3, #2
   2da54:	18fb      	adds	r3, r7, r3
   2da56:	681b      	ldr	r3, [r3, #0]
   2da58:	331a      	adds	r3, #26
   2da5a:	2200      	movs	r2, #0
   2da5c:	701a      	strb	r2, [r3, #0]
   2da5e:	2392      	movs	r3, #146	; 0x92
   2da60:	009b      	lsls	r3, r3, #2
   2da62:	18fb      	adds	r3, r7, r3
   2da64:	681b      	ldr	r3, [r3, #0]
   2da66:	331b      	adds	r3, #27
   2da68:	2200      	movs	r2, #0
   2da6a:	701a      	strb	r2, [r3, #0]
   2da6c:	2392      	movs	r3, #146	; 0x92
   2da6e:	009b      	lsls	r3, r3, #2
   2da70:	18fb      	adds	r3, r7, r3
   2da72:	681b      	ldr	r3, [r3, #0]
   2da74:	3314      	adds	r3, #20
   2da76:	2200      	movs	r2, #0
   2da78:	701a      	strb	r2, [r3, #0]
   2da7a:	2392      	movs	r3, #146	; 0x92
   2da7c:	009b      	lsls	r3, r3, #2
   2da7e:	18fb      	adds	r3, r7, r3
   2da80:	681b      	ldr	r3, [r3, #0]
   2da82:	3315      	adds	r3, #21
   2da84:	2200      	movs	r2, #0
   2da86:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2da88:	2387      	movs	r3, #135	; 0x87
   2da8a:	009b      	lsls	r3, r3, #2
   2da8c:	18fb      	adds	r3, r7, r3
   2da8e:	681b      	ldr	r3, [r3, #0]
   2da90:	2201      	movs	r2, #1
   2da92:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2da94:	2390      	movs	r3, #144	; 0x90
   2da96:	009b      	lsls	r3, r3, #2
   2da98:	18fb      	adds	r3, r7, r3
   2da9a:	681b      	ldr	r3, [r3, #0]
   2da9c:	2b00      	cmp	r3, #0
   2da9e:	d100      	bne.n	2daa2 <f_open+0x2fe>
   2daa0:	e076      	b.n	2db90 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2daa2:	2387      	movs	r3, #135	; 0x87
   2daa4:	009b      	lsls	r3, r3, #2
   2daa6:	18fb      	adds	r3, r7, r3
   2daa8:	681b      	ldr	r3, [r3, #0]
   2daaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2daac:	2291      	movs	r2, #145	; 0x91
   2daae:	0092      	lsls	r2, r2, #2
   2dab0:	18ba      	adds	r2, r7, r2
   2dab2:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2dab4:	2387      	movs	r3, #135	; 0x87
   2dab6:	009b      	lsls	r3, r3, #2
   2dab8:	18fb      	adds	r3, r7, r3
   2daba:	681b      	ldr	r3, [r3, #0]
   2dabc:	4a21      	ldr	r2, [pc, #132]	; (2db44 <f_open+0x3a0>)
   2dabe:	18bc      	adds	r4, r7, r2
   2dac0:	2290      	movs	r2, #144	; 0x90
   2dac2:	0092      	lsls	r2, r2, #2
   2dac4:	18ba      	adds	r2, r7, r2
   2dac6:	6812      	ldr	r2, [r2, #0]
   2dac8:	0011      	movs	r1, r2
   2daca:	0018      	movs	r0, r3
   2dacc:	4b22      	ldr	r3, [pc, #136]	; (2db58 <f_open+0x3b4>)
   2dace:	4798      	blx	r3
   2dad0:	0003      	movs	r3, r0
   2dad2:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2dad4:	4b1b      	ldr	r3, [pc, #108]	; (2db44 <f_open+0x3a0>)
   2dad6:	18fb      	adds	r3, r7, r3
   2dad8:	781b      	ldrb	r3, [r3, #0]
   2dada:	2b00      	cmp	r3, #0
   2dadc:	d158      	bne.n	2db90 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2dade:	2387      	movs	r3, #135	; 0x87
   2dae0:	009b      	lsls	r3, r3, #2
   2dae2:	18fb      	adds	r3, r7, r3
   2dae4:	681b      	ldr	r3, [r3, #0]
   2dae6:	2290      	movs	r2, #144	; 0x90
   2dae8:	0092      	lsls	r2, r2, #2
   2daea:	18ba      	adds	r2, r7, r2
   2daec:	6812      	ldr	r2, [r2, #0]
   2daee:	3a01      	subs	r2, #1
   2daf0:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2daf2:	2387      	movs	r3, #135	; 0x87
   2daf4:	009b      	lsls	r3, r3, #2
   2daf6:	18fb      	adds	r3, r7, r3
   2daf8:	681b      	ldr	r3, [r3, #0]
   2dafa:	4a12      	ldr	r2, [pc, #72]	; (2db44 <f_open+0x3a0>)
   2dafc:	18bc      	adds	r4, r7, r2
   2dafe:	2291      	movs	r2, #145	; 0x91
   2db00:	0092      	lsls	r2, r2, #2
   2db02:	18ba      	adds	r2, r7, r2
   2db04:	6812      	ldr	r2, [r2, #0]
   2db06:	0011      	movs	r1, r2
   2db08:	0018      	movs	r0, r3
   2db0a:	4b14      	ldr	r3, [pc, #80]	; (2db5c <f_open+0x3b8>)
   2db0c:	4798      	blx	r3
   2db0e:	0003      	movs	r3, r0
   2db10:	7023      	strb	r3, [r4, #0]
   2db12:	e03d      	b.n	2db90 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2db14:	4b0b      	ldr	r3, [pc, #44]	; (2db44 <f_open+0x3a0>)
   2db16:	18fb      	adds	r3, r7, r3
   2db18:	781b      	ldrb	r3, [r3, #0]
   2db1a:	2b00      	cmp	r3, #0
   2db1c:	d138      	bne.n	2db90 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2db1e:	2392      	movs	r3, #146	; 0x92
   2db20:	009b      	lsls	r3, r3, #2
   2db22:	18fb      	adds	r3, r7, r3
   2db24:	681b      	ldr	r3, [r3, #0]
   2db26:	330b      	adds	r3, #11
   2db28:	781b      	ldrb	r3, [r3, #0]
   2db2a:	001a      	movs	r2, r3
   2db2c:	2310      	movs	r3, #16
   2db2e:	4013      	ands	r3, r2
   2db30:	d016      	beq.n	2db60 <f_open+0x3bc>
				res = FR_NO_FILE;
   2db32:	4b04      	ldr	r3, [pc, #16]	; (2db44 <f_open+0x3a0>)
   2db34:	18fb      	adds	r3, r7, r3
   2db36:	2204      	movs	r2, #4
   2db38:	701a      	strb	r2, [r3, #0]
   2db3a:	e029      	b.n	2db90 <f_open+0x3ec>
   2db3c:	fffffdac 	.word	0xfffffdac
   2db40:	fffffdb7 	.word	0xfffffdb7
   2db44:	0000024f 	.word	0x0000024f
   2db48:	0002d0fd 	.word	0x0002d0fd
   2db4c:	0002cef1 	.word	0x0002cef1
   2db50:	0002c741 	.word	0x0002c741
   2db54:	0002b539 	.word	0x0002b539
   2db58:	0002bcbd 	.word	0x0002bcbd
   2db5c:	0002b67d 	.word	0x0002b67d
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2db60:	4b5a      	ldr	r3, [pc, #360]	; (2dccc <f_open+0x528>)
   2db62:	2294      	movs	r2, #148	; 0x94
   2db64:	0092      	lsls	r2, r2, #2
   2db66:	4694      	mov	ip, r2
   2db68:	44bc      	add	ip, r7
   2db6a:	4463      	add	r3, ip
   2db6c:	781b      	ldrb	r3, [r3, #0]
   2db6e:	2202      	movs	r2, #2
   2db70:	4013      	ands	r3, r2
   2db72:	d00d      	beq.n	2db90 <f_open+0x3ec>
   2db74:	2392      	movs	r3, #146	; 0x92
   2db76:	009b      	lsls	r3, r3, #2
   2db78:	18fb      	adds	r3, r7, r3
   2db7a:	681b      	ldr	r3, [r3, #0]
   2db7c:	330b      	adds	r3, #11
   2db7e:	781b      	ldrb	r3, [r3, #0]
   2db80:	001a      	movs	r2, r3
   2db82:	2301      	movs	r3, #1
   2db84:	4013      	ands	r3, r2
   2db86:	d003      	beq.n	2db90 <f_open+0x3ec>
					res = FR_DENIED;
   2db88:	4b51      	ldr	r3, [pc, #324]	; (2dcd0 <f_open+0x52c>)
   2db8a:	18fb      	adds	r3, r7, r3
   2db8c:	2207      	movs	r2, #7
   2db8e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2db90:	4b4f      	ldr	r3, [pc, #316]	; (2dcd0 <f_open+0x52c>)
   2db92:	18fb      	adds	r3, r7, r3
   2db94:	781b      	ldrb	r3, [r3, #0]
   2db96:	2b00      	cmp	r3, #0
   2db98:	d126      	bne.n	2dbe8 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2db9a:	4b4c      	ldr	r3, [pc, #304]	; (2dccc <f_open+0x528>)
   2db9c:	2294      	movs	r2, #148	; 0x94
   2db9e:	0092      	lsls	r2, r2, #2
   2dba0:	4694      	mov	ip, r2
   2dba2:	44bc      	add	ip, r7
   2dba4:	4463      	add	r3, ip
   2dba6:	781b      	ldrb	r3, [r3, #0]
   2dba8:	2208      	movs	r2, #8
   2dbaa:	4013      	ands	r3, r2
   2dbac:	d00f      	beq.n	2dbce <f_open+0x42a>
			mode |= FA__WRITTEN;
   2dbae:	4b47      	ldr	r3, [pc, #284]	; (2dccc <f_open+0x528>)
   2dbb0:	2294      	movs	r2, #148	; 0x94
   2dbb2:	0092      	lsls	r2, r2, #2
   2dbb4:	4694      	mov	ip, r2
   2dbb6:	44bc      	add	ip, r7
   2dbb8:	4463      	add	r3, ip
   2dbba:	4a44      	ldr	r2, [pc, #272]	; (2dccc <f_open+0x528>)
   2dbbc:	2194      	movs	r1, #148	; 0x94
   2dbbe:	0089      	lsls	r1, r1, #2
   2dbc0:	468c      	mov	ip, r1
   2dbc2:	44bc      	add	ip, r7
   2dbc4:	4462      	add	r2, ip
   2dbc6:	7812      	ldrb	r2, [r2, #0]
   2dbc8:	2120      	movs	r1, #32
   2dbca:	430a      	orrs	r2, r1
   2dbcc:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2dbce:	2387      	movs	r3, #135	; 0x87
   2dbd0:	009b      	lsls	r3, r3, #2
   2dbd2:	18fb      	adds	r3, r7, r3
   2dbd4:	681b      	ldr	r3, [r3, #0]
   2dbd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2dbd8:	68fb      	ldr	r3, [r7, #12]
   2dbda:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2dbdc:	68fb      	ldr	r3, [r7, #12]
   2dbde:	2292      	movs	r2, #146	; 0x92
   2dbe0:	0092      	lsls	r2, r2, #2
   2dbe2:	18ba      	adds	r2, r7, r2
   2dbe4:	6812      	ldr	r2, [r2, #0]
   2dbe6:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2dbe8:	4b39      	ldr	r3, [pc, #228]	; (2dcd0 <f_open+0x52c>)
   2dbea:	18fb      	adds	r3, r7, r3
   2dbec:	781b      	ldrb	r3, [r3, #0]
   2dbee:	2b00      	cmp	r3, #0
   2dbf0:	d163      	bne.n	2dcba <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2dbf2:	68fb      	ldr	r3, [r7, #12]
   2dbf4:	4a35      	ldr	r2, [pc, #212]	; (2dccc <f_open+0x528>)
   2dbf6:	2194      	movs	r1, #148	; 0x94
   2dbf8:	0089      	lsls	r1, r1, #2
   2dbfa:	468c      	mov	ip, r1
   2dbfc:	44bc      	add	ip, r7
   2dbfe:	4462      	add	r2, ip
   2dc00:	7812      	ldrb	r2, [r2, #0]
   2dc02:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2dc04:	2392      	movs	r3, #146	; 0x92
   2dc06:	009b      	lsls	r3, r3, #2
   2dc08:	18fb      	adds	r3, r7, r3
   2dc0a:	681b      	ldr	r3, [r3, #0]
   2dc0c:	3315      	adds	r3, #21
   2dc0e:	781b      	ldrb	r3, [r3, #0]
   2dc10:	021b      	lsls	r3, r3, #8
   2dc12:	b21a      	sxth	r2, r3
   2dc14:	2392      	movs	r3, #146	; 0x92
   2dc16:	009b      	lsls	r3, r3, #2
   2dc18:	18fb      	adds	r3, r7, r3
   2dc1a:	681b      	ldr	r3, [r3, #0]
   2dc1c:	3314      	adds	r3, #20
   2dc1e:	781b      	ldrb	r3, [r3, #0]
   2dc20:	b21b      	sxth	r3, r3
   2dc22:	4313      	orrs	r3, r2
   2dc24:	b21b      	sxth	r3, r3
   2dc26:	b29b      	uxth	r3, r3
   2dc28:	041b      	lsls	r3, r3, #16
   2dc2a:	2292      	movs	r2, #146	; 0x92
   2dc2c:	0092      	lsls	r2, r2, #2
   2dc2e:	18ba      	adds	r2, r7, r2
   2dc30:	6812      	ldr	r2, [r2, #0]
   2dc32:	321b      	adds	r2, #27
   2dc34:	7812      	ldrb	r2, [r2, #0]
   2dc36:	0212      	lsls	r2, r2, #8
   2dc38:	b211      	sxth	r1, r2
   2dc3a:	2292      	movs	r2, #146	; 0x92
   2dc3c:	0092      	lsls	r2, r2, #2
   2dc3e:	18ba      	adds	r2, r7, r2
   2dc40:	6812      	ldr	r2, [r2, #0]
   2dc42:	321a      	adds	r2, #26
   2dc44:	7812      	ldrb	r2, [r2, #0]
   2dc46:	b212      	sxth	r2, r2
   2dc48:	430a      	orrs	r2, r1
   2dc4a:	b212      	sxth	r2, r2
   2dc4c:	b292      	uxth	r2, r2
   2dc4e:	431a      	orrs	r2, r3
   2dc50:	68fb      	ldr	r3, [r7, #12]
   2dc52:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2dc54:	2392      	movs	r3, #146	; 0x92
   2dc56:	009b      	lsls	r3, r3, #2
   2dc58:	18fb      	adds	r3, r7, r3
   2dc5a:	681b      	ldr	r3, [r3, #0]
   2dc5c:	331f      	adds	r3, #31
   2dc5e:	781b      	ldrb	r3, [r3, #0]
   2dc60:	061a      	lsls	r2, r3, #24
   2dc62:	2392      	movs	r3, #146	; 0x92
   2dc64:	009b      	lsls	r3, r3, #2
   2dc66:	18fb      	adds	r3, r7, r3
   2dc68:	681b      	ldr	r3, [r3, #0]
   2dc6a:	331e      	adds	r3, #30
   2dc6c:	781b      	ldrb	r3, [r3, #0]
   2dc6e:	041b      	lsls	r3, r3, #16
   2dc70:	4313      	orrs	r3, r2
   2dc72:	2292      	movs	r2, #146	; 0x92
   2dc74:	0092      	lsls	r2, r2, #2
   2dc76:	18ba      	adds	r2, r7, r2
   2dc78:	6812      	ldr	r2, [r2, #0]
   2dc7a:	321d      	adds	r2, #29
   2dc7c:	7812      	ldrb	r2, [r2, #0]
   2dc7e:	0212      	lsls	r2, r2, #8
   2dc80:	4313      	orrs	r3, r2
   2dc82:	2292      	movs	r2, #146	; 0x92
   2dc84:	0092      	lsls	r2, r2, #2
   2dc86:	18ba      	adds	r2, r7, r2
   2dc88:	6812      	ldr	r2, [r2, #0]
   2dc8a:	321c      	adds	r2, #28
   2dc8c:	7812      	ldrb	r2, [r2, #0]
   2dc8e:	431a      	orrs	r2, r3
   2dc90:	68fb      	ldr	r3, [r7, #12]
   2dc92:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2dc94:	68fb      	ldr	r3, [r7, #12]
   2dc96:	2200      	movs	r2, #0
   2dc98:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2dc9a:	68fb      	ldr	r3, [r7, #12]
   2dc9c:	2200      	movs	r2, #0
   2dc9e:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2dca0:	2387      	movs	r3, #135	; 0x87
   2dca2:	009b      	lsls	r3, r3, #2
   2dca4:	18fb      	adds	r3, r7, r3
   2dca6:	681a      	ldr	r2, [r3, #0]
   2dca8:	68fb      	ldr	r3, [r7, #12]
   2dcaa:	601a      	str	r2, [r3, #0]
   2dcac:	2387      	movs	r3, #135	; 0x87
   2dcae:	009b      	lsls	r3, r3, #2
   2dcb0:	18fb      	adds	r3, r7, r3
   2dcb2:	681b      	ldr	r3, [r3, #0]
   2dcb4:	88da      	ldrh	r2, [r3, #6]
   2dcb6:	68fb      	ldr	r3, [r7, #12]
   2dcb8:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2dcba:	4b05      	ldr	r3, [pc, #20]	; (2dcd0 <f_open+0x52c>)
   2dcbc:	18fb      	adds	r3, r7, r3
   2dcbe:	781b      	ldrb	r3, [r3, #0]
}
   2dcc0:	0018      	movs	r0, r3
   2dcc2:	46bd      	mov	sp, r7
   2dcc4:	2395      	movs	r3, #149	; 0x95
   2dcc6:	009b      	lsls	r3, r3, #2
   2dcc8:	449d      	add	sp, r3
   2dcca:	bd90      	pop	{r4, r7, pc}
   2dccc:	fffffdb7 	.word	0xfffffdb7
   2dcd0:	0000024f 	.word	0x0000024f

0002dcd4 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2dcd4:	b590      	push	{r4, r7, lr}
   2dcd6:	b08b      	sub	sp, #44	; 0x2c
   2dcd8:	af00      	add	r7, sp, #0
   2dcda:	60f8      	str	r0, [r7, #12]
   2dcdc:	60b9      	str	r1, [r7, #8]
   2dcde:	607a      	str	r2, [r7, #4]
   2dce0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2dce2:	68bb      	ldr	r3, [r7, #8]
   2dce4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2dce6:	683b      	ldr	r3, [r7, #0]
   2dce8:	2200      	movs	r2, #0
   2dcea:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2dcec:	68fb      	ldr	r3, [r7, #12]
   2dcee:	681a      	ldr	r2, [r3, #0]
   2dcf0:	68fb      	ldr	r3, [r7, #12]
   2dcf2:	889b      	ldrh	r3, [r3, #4]
   2dcf4:	2117      	movs	r1, #23
   2dcf6:	187c      	adds	r4, r7, r1
   2dcf8:	0019      	movs	r1, r3
   2dcfa:	0010      	movs	r0, r2
   2dcfc:	4bc3      	ldr	r3, [pc, #780]	; (2e00c <f_write+0x338>)
   2dcfe:	4798      	blx	r3
   2dd00:	0003      	movs	r3, r0
   2dd02:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2dd04:	2317      	movs	r3, #23
   2dd06:	18fb      	adds	r3, r7, r3
   2dd08:	781b      	ldrb	r3, [r3, #0]
   2dd0a:	2b00      	cmp	r3, #0
   2dd0c:	d003      	beq.n	2dd16 <f_write+0x42>
   2dd0e:	2317      	movs	r3, #23
   2dd10:	18fb      	adds	r3, r7, r3
   2dd12:	781b      	ldrb	r3, [r3, #0]
   2dd14:	e176      	b.n	2e004 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2dd16:	68fb      	ldr	r3, [r7, #12]
   2dd18:	799b      	ldrb	r3, [r3, #6]
   2dd1a:	b25b      	sxtb	r3, r3
   2dd1c:	2b00      	cmp	r3, #0
   2dd1e:	da01      	bge.n	2dd24 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2dd20:	2302      	movs	r3, #2
   2dd22:	e16f      	b.n	2e004 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2dd24:	68fb      	ldr	r3, [r7, #12]
   2dd26:	799b      	ldrb	r3, [r3, #6]
   2dd28:	001a      	movs	r2, r3
   2dd2a:	2302      	movs	r3, #2
   2dd2c:	4013      	ands	r3, r2
   2dd2e:	d101      	bne.n	2dd34 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2dd30:	2307      	movs	r3, #7
   2dd32:	e167      	b.n	2e004 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2dd34:	68fb      	ldr	r3, [r7, #12]
   2dd36:	68da      	ldr	r2, [r3, #12]
   2dd38:	687b      	ldr	r3, [r7, #4]
   2dd3a:	18d2      	adds	r2, r2, r3
   2dd3c:	68fb      	ldr	r3, [r7, #12]
   2dd3e:	68db      	ldr	r3, [r3, #12]
   2dd40:	429a      	cmp	r2, r3
   2dd42:	d300      	bcc.n	2dd46 <f_write+0x72>
   2dd44:	e146      	b.n	2dfd4 <f_write+0x300>
   2dd46:	2300      	movs	r3, #0
   2dd48:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2dd4a:	e143      	b.n	2dfd4 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2dd4c:	68fb      	ldr	r3, [r7, #12]
   2dd4e:	689b      	ldr	r3, [r3, #8]
   2dd50:	05db      	lsls	r3, r3, #23
   2dd52:	0ddb      	lsrs	r3, r3, #23
   2dd54:	d000      	beq.n	2dd58 <f_write+0x84>
   2dd56:	e0f6      	b.n	2df46 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2dd58:	68fb      	ldr	r3, [r7, #12]
   2dd5a:	689b      	ldr	r3, [r3, #8]
   2dd5c:	0a5b      	lsrs	r3, r3, #9
   2dd5e:	b2da      	uxtb	r2, r3
   2dd60:	68fb      	ldr	r3, [r7, #12]
   2dd62:	681b      	ldr	r3, [r3, #0]
   2dd64:	789b      	ldrb	r3, [r3, #2]
   2dd66:	3b01      	subs	r3, #1
   2dd68:	b2d9      	uxtb	r1, r3
   2dd6a:	2316      	movs	r3, #22
   2dd6c:	18fb      	adds	r3, r7, r3
   2dd6e:	400a      	ands	r2, r1
   2dd70:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2dd72:	2316      	movs	r3, #22
   2dd74:	18fb      	adds	r3, r7, r3
   2dd76:	781b      	ldrb	r3, [r3, #0]
   2dd78:	2b00      	cmp	r3, #0
   2dd7a:	d140      	bne.n	2ddfe <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2dd7c:	68fb      	ldr	r3, [r7, #12]
   2dd7e:	689b      	ldr	r3, [r3, #8]
   2dd80:	2b00      	cmp	r3, #0
   2dd82:	d111      	bne.n	2dda8 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2dd84:	68fb      	ldr	r3, [r7, #12]
   2dd86:	691b      	ldr	r3, [r3, #16]
   2dd88:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2dd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dd8c:	2b00      	cmp	r3, #0
   2dd8e:	d115      	bne.n	2ddbc <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2dd90:	68fb      	ldr	r3, [r7, #12]
   2dd92:	681b      	ldr	r3, [r3, #0]
   2dd94:	2100      	movs	r1, #0
   2dd96:	0018      	movs	r0, r3
   2dd98:	4b9d      	ldr	r3, [pc, #628]	; (2e010 <f_write+0x33c>)
   2dd9a:	4798      	blx	r3
   2dd9c:	0003      	movs	r3, r0
   2dd9e:	627b      	str	r3, [r7, #36]	; 0x24
   2dda0:	68fb      	ldr	r3, [r7, #12]
   2dda2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2dda4:	611a      	str	r2, [r3, #16]
   2dda6:	e009      	b.n	2ddbc <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2dda8:	68fb      	ldr	r3, [r7, #12]
   2ddaa:	681a      	ldr	r2, [r3, #0]
   2ddac:	68fb      	ldr	r3, [r7, #12]
   2ddae:	695b      	ldr	r3, [r3, #20]
   2ddb0:	0019      	movs	r1, r3
   2ddb2:	0010      	movs	r0, r2
   2ddb4:	4b96      	ldr	r3, [pc, #600]	; (2e010 <f_write+0x33c>)
   2ddb6:	4798      	blx	r3
   2ddb8:	0003      	movs	r3, r0
   2ddba:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2ddbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ddbe:	2b00      	cmp	r3, #0
   2ddc0:	d100      	bne.n	2ddc4 <f_write+0xf0>
   2ddc2:	e10c      	b.n	2dfde <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2ddc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ddc6:	2b01      	cmp	r3, #1
   2ddc8:	d109      	bne.n	2ddde <f_write+0x10a>
   2ddca:	68fb      	ldr	r3, [r7, #12]
   2ddcc:	799b      	ldrb	r3, [r3, #6]
   2ddce:	2280      	movs	r2, #128	; 0x80
   2ddd0:	4252      	negs	r2, r2
   2ddd2:	4313      	orrs	r3, r2
   2ddd4:	b2da      	uxtb	r2, r3
   2ddd6:	68fb      	ldr	r3, [r7, #12]
   2ddd8:	719a      	strb	r2, [r3, #6]
   2ddda:	2302      	movs	r3, #2
   2dddc:	e112      	b.n	2e004 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2ddde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dde0:	3301      	adds	r3, #1
   2dde2:	d109      	bne.n	2ddf8 <f_write+0x124>
   2dde4:	68fb      	ldr	r3, [r7, #12]
   2dde6:	799b      	ldrb	r3, [r3, #6]
   2dde8:	2280      	movs	r2, #128	; 0x80
   2ddea:	4252      	negs	r2, r2
   2ddec:	4313      	orrs	r3, r2
   2ddee:	b2da      	uxtb	r2, r3
   2ddf0:	68fb      	ldr	r3, [r7, #12]
   2ddf2:	719a      	strb	r2, [r3, #6]
   2ddf4:	2301      	movs	r3, #1
   2ddf6:	e105      	b.n	2e004 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2ddf8:	68fb      	ldr	r3, [r7, #12]
   2ddfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2ddfc:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2ddfe:	68fb      	ldr	r3, [r7, #12]
   2de00:	681b      	ldr	r3, [r3, #0]
   2de02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2de04:	68fb      	ldr	r3, [r7, #12]
   2de06:	699b      	ldr	r3, [r3, #24]
   2de08:	429a      	cmp	r2, r3
   2de0a:	d111      	bne.n	2de30 <f_write+0x15c>
   2de0c:	68fb      	ldr	r3, [r7, #12]
   2de0e:	681b      	ldr	r3, [r3, #0]
   2de10:	2100      	movs	r1, #0
   2de12:	0018      	movs	r0, r3
   2de14:	4b7f      	ldr	r3, [pc, #508]	; (2e014 <f_write+0x340>)
   2de16:	4798      	blx	r3
   2de18:	1e03      	subs	r3, r0, #0
   2de1a:	d009      	beq.n	2de30 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2de1c:	68fb      	ldr	r3, [r7, #12]
   2de1e:	799b      	ldrb	r3, [r3, #6]
   2de20:	2280      	movs	r2, #128	; 0x80
   2de22:	4252      	negs	r2, r2
   2de24:	4313      	orrs	r3, r2
   2de26:	b2da      	uxtb	r2, r3
   2de28:	68fb      	ldr	r3, [r7, #12]
   2de2a:	719a      	strb	r2, [r3, #6]
   2de2c:	2301      	movs	r3, #1
   2de2e:	e0e9      	b.n	2e004 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2de30:	68fb      	ldr	r3, [r7, #12]
   2de32:	681a      	ldr	r2, [r3, #0]
   2de34:	68fb      	ldr	r3, [r7, #12]
   2de36:	695b      	ldr	r3, [r3, #20]
   2de38:	0019      	movs	r1, r3
   2de3a:	0010      	movs	r0, r2
   2de3c:	4b76      	ldr	r3, [pc, #472]	; (2e018 <f_write+0x344>)
   2de3e:	4798      	blx	r3
   2de40:	0003      	movs	r3, r0
   2de42:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2de44:	693b      	ldr	r3, [r7, #16]
   2de46:	2b00      	cmp	r3, #0
   2de48:	d109      	bne.n	2de5e <f_write+0x18a>
   2de4a:	68fb      	ldr	r3, [r7, #12]
   2de4c:	799b      	ldrb	r3, [r3, #6]
   2de4e:	2280      	movs	r2, #128	; 0x80
   2de50:	4252      	negs	r2, r2
   2de52:	4313      	orrs	r3, r2
   2de54:	b2da      	uxtb	r2, r3
   2de56:	68fb      	ldr	r3, [r7, #12]
   2de58:	719a      	strb	r2, [r3, #6]
   2de5a:	2302      	movs	r3, #2
   2de5c:	e0d2      	b.n	2e004 <f_write+0x330>
			sect += csect;
   2de5e:	2316      	movs	r3, #22
   2de60:	18fb      	adds	r3, r7, r3
   2de62:	781b      	ldrb	r3, [r3, #0]
   2de64:	693a      	ldr	r2, [r7, #16]
   2de66:	18d3      	adds	r3, r2, r3
   2de68:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2de6a:	687b      	ldr	r3, [r7, #4]
   2de6c:	0a5b      	lsrs	r3, r3, #9
   2de6e:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2de70:	69fb      	ldr	r3, [r7, #28]
   2de72:	2b00      	cmp	r3, #0
   2de74:	d048      	beq.n	2df08 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2de76:	2316      	movs	r3, #22
   2de78:	18fb      	adds	r3, r7, r3
   2de7a:	781a      	ldrb	r2, [r3, #0]
   2de7c:	69fb      	ldr	r3, [r7, #28]
   2de7e:	18d2      	adds	r2, r2, r3
   2de80:	68fb      	ldr	r3, [r7, #12]
   2de82:	681b      	ldr	r3, [r3, #0]
   2de84:	789b      	ldrb	r3, [r3, #2]
   2de86:	429a      	cmp	r2, r3
   2de88:	d908      	bls.n	2de9c <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2de8a:	68fb      	ldr	r3, [r7, #12]
   2de8c:	681b      	ldr	r3, [r3, #0]
   2de8e:	789b      	ldrb	r3, [r3, #2]
   2de90:	001a      	movs	r2, r3
   2de92:	2316      	movs	r3, #22
   2de94:	18fb      	adds	r3, r7, r3
   2de96:	781b      	ldrb	r3, [r3, #0]
   2de98:	1ad3      	subs	r3, r2, r3
   2de9a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2de9c:	68fb      	ldr	r3, [r7, #12]
   2de9e:	681b      	ldr	r3, [r3, #0]
   2dea0:	7858      	ldrb	r0, [r3, #1]
   2dea2:	69fb      	ldr	r3, [r7, #28]
   2dea4:	b2db      	uxtb	r3, r3
   2dea6:	693a      	ldr	r2, [r7, #16]
   2dea8:	69b9      	ldr	r1, [r7, #24]
   2deaa:	4c5c      	ldr	r4, [pc, #368]	; (2e01c <f_write+0x348>)
   2deac:	47a0      	blx	r4
   2deae:	1e03      	subs	r3, r0, #0
   2deb0:	d009      	beq.n	2dec6 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2deb2:	68fb      	ldr	r3, [r7, #12]
   2deb4:	799b      	ldrb	r3, [r3, #6]
   2deb6:	2280      	movs	r2, #128	; 0x80
   2deb8:	4252      	negs	r2, r2
   2deba:	4313      	orrs	r3, r2
   2debc:	b2da      	uxtb	r2, r3
   2debe:	68fb      	ldr	r3, [r7, #12]
   2dec0:	719a      	strb	r2, [r3, #6]
   2dec2:	2301      	movs	r3, #1
   2dec4:	e09e      	b.n	2e004 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2dec6:	68fb      	ldr	r3, [r7, #12]
   2dec8:	681b      	ldr	r3, [r3, #0]
   2deca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2decc:	693b      	ldr	r3, [r7, #16]
   2dece:	1ad2      	subs	r2, r2, r3
   2ded0:	69fb      	ldr	r3, [r7, #28]
   2ded2:	429a      	cmp	r2, r3
   2ded4:	d214      	bcs.n	2df00 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2ded6:	68fb      	ldr	r3, [r7, #12]
   2ded8:	681b      	ldr	r3, [r3, #0]
   2deda:	3330      	adds	r3, #48	; 0x30
   2dedc:	0018      	movs	r0, r3
   2dede:	68fb      	ldr	r3, [r7, #12]
   2dee0:	681b      	ldr	r3, [r3, #0]
   2dee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2dee4:	693b      	ldr	r3, [r7, #16]
   2dee6:	1ad3      	subs	r3, r2, r3
   2dee8:	025b      	lsls	r3, r3, #9
   2deea:	69ba      	ldr	r2, [r7, #24]
   2deec:	18d1      	adds	r1, r2, r3
   2deee:	2380      	movs	r3, #128	; 0x80
   2def0:	009b      	lsls	r3, r3, #2
   2def2:	001a      	movs	r2, r3
   2def4:	4b4a      	ldr	r3, [pc, #296]	; (2e020 <f_write+0x34c>)
   2def6:	4798      	blx	r3
					fp->fs->wflag = 0;
   2def8:	68fb      	ldr	r3, [r7, #12]
   2defa:	681b      	ldr	r3, [r3, #0]
   2defc:	2200      	movs	r2, #0
   2defe:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2df00:	69fb      	ldr	r3, [r7, #28]
   2df02:	025b      	lsls	r3, r3, #9
   2df04:	623b      	str	r3, [r7, #32]
				continue;
   2df06:	e051      	b.n	2dfac <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2df08:	68fb      	ldr	r3, [r7, #12]
   2df0a:	689a      	ldr	r2, [r3, #8]
   2df0c:	68fb      	ldr	r3, [r7, #12]
   2df0e:	68db      	ldr	r3, [r3, #12]
   2df10:	429a      	cmp	r2, r3
   2df12:	d315      	bcc.n	2df40 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2df14:	68fb      	ldr	r3, [r7, #12]
   2df16:	681b      	ldr	r3, [r3, #0]
   2df18:	2100      	movs	r1, #0
   2df1a:	0018      	movs	r0, r3
   2df1c:	4b3d      	ldr	r3, [pc, #244]	; (2e014 <f_write+0x340>)
   2df1e:	4798      	blx	r3
   2df20:	1e03      	subs	r3, r0, #0
   2df22:	d009      	beq.n	2df38 <f_write+0x264>
   2df24:	68fb      	ldr	r3, [r7, #12]
   2df26:	799b      	ldrb	r3, [r3, #6]
   2df28:	2280      	movs	r2, #128	; 0x80
   2df2a:	4252      	negs	r2, r2
   2df2c:	4313      	orrs	r3, r2
   2df2e:	b2da      	uxtb	r2, r3
   2df30:	68fb      	ldr	r3, [r7, #12]
   2df32:	719a      	strb	r2, [r3, #6]
   2df34:	2301      	movs	r3, #1
   2df36:	e065      	b.n	2e004 <f_write+0x330>
				fp->fs->winsect = sect;
   2df38:	68fb      	ldr	r3, [r7, #12]
   2df3a:	681b      	ldr	r3, [r3, #0]
   2df3c:	693a      	ldr	r2, [r7, #16]
   2df3e:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2df40:	68fb      	ldr	r3, [r7, #12]
   2df42:	693a      	ldr	r2, [r7, #16]
   2df44:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2df46:	68fb      	ldr	r3, [r7, #12]
   2df48:	689b      	ldr	r3, [r3, #8]
   2df4a:	05db      	lsls	r3, r3, #23
   2df4c:	0ddb      	lsrs	r3, r3, #23
   2df4e:	2280      	movs	r2, #128	; 0x80
   2df50:	0092      	lsls	r2, r2, #2
   2df52:	1ad3      	subs	r3, r2, r3
   2df54:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2df56:	6a3a      	ldr	r2, [r7, #32]
   2df58:	687b      	ldr	r3, [r7, #4]
   2df5a:	429a      	cmp	r2, r3
   2df5c:	d901      	bls.n	2df62 <f_write+0x28e>
   2df5e:	687b      	ldr	r3, [r7, #4]
   2df60:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2df62:	68fb      	ldr	r3, [r7, #12]
   2df64:	681a      	ldr	r2, [r3, #0]
   2df66:	68fb      	ldr	r3, [r7, #12]
   2df68:	699b      	ldr	r3, [r3, #24]
   2df6a:	0019      	movs	r1, r3
   2df6c:	0010      	movs	r0, r2
   2df6e:	4b29      	ldr	r3, [pc, #164]	; (2e014 <f_write+0x340>)
   2df70:	4798      	blx	r3
   2df72:	1e03      	subs	r3, r0, #0
   2df74:	d009      	beq.n	2df8a <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2df76:	68fb      	ldr	r3, [r7, #12]
   2df78:	799b      	ldrb	r3, [r3, #6]
   2df7a:	2280      	movs	r2, #128	; 0x80
   2df7c:	4252      	negs	r2, r2
   2df7e:	4313      	orrs	r3, r2
   2df80:	b2da      	uxtb	r2, r3
   2df82:	68fb      	ldr	r3, [r7, #12]
   2df84:	719a      	strb	r2, [r3, #6]
   2df86:	2301      	movs	r3, #1
   2df88:	e03c      	b.n	2e004 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2df8a:	68fb      	ldr	r3, [r7, #12]
   2df8c:	681a      	ldr	r2, [r3, #0]
   2df8e:	68fb      	ldr	r3, [r7, #12]
   2df90:	689b      	ldr	r3, [r3, #8]
   2df92:	05db      	lsls	r3, r3, #23
   2df94:	0ddb      	lsrs	r3, r3, #23
   2df96:	3330      	adds	r3, #48	; 0x30
   2df98:	18d3      	adds	r3, r2, r3
   2df9a:	6a3a      	ldr	r2, [r7, #32]
   2df9c:	69b9      	ldr	r1, [r7, #24]
   2df9e:	0018      	movs	r0, r3
   2dfa0:	4b1f      	ldr	r3, [pc, #124]	; (2e020 <f_write+0x34c>)
   2dfa2:	4798      	blx	r3
		fp->fs->wflag = 1;
   2dfa4:	68fb      	ldr	r3, [r7, #12]
   2dfa6:	681b      	ldr	r3, [r3, #0]
   2dfa8:	2201      	movs	r2, #1
   2dfaa:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2dfac:	69ba      	ldr	r2, [r7, #24]
   2dfae:	6a3b      	ldr	r3, [r7, #32]
   2dfb0:	18d3      	adds	r3, r2, r3
   2dfb2:	61bb      	str	r3, [r7, #24]
   2dfb4:	68fb      	ldr	r3, [r7, #12]
   2dfb6:	689a      	ldr	r2, [r3, #8]
   2dfb8:	6a3b      	ldr	r3, [r7, #32]
   2dfba:	18d2      	adds	r2, r2, r3
   2dfbc:	68fb      	ldr	r3, [r7, #12]
   2dfbe:	609a      	str	r2, [r3, #8]
   2dfc0:	683b      	ldr	r3, [r7, #0]
   2dfc2:	681a      	ldr	r2, [r3, #0]
   2dfc4:	6a3b      	ldr	r3, [r7, #32]
   2dfc6:	18d2      	adds	r2, r2, r3
   2dfc8:	683b      	ldr	r3, [r7, #0]
   2dfca:	601a      	str	r2, [r3, #0]
   2dfcc:	687a      	ldr	r2, [r7, #4]
   2dfce:	6a3b      	ldr	r3, [r7, #32]
   2dfd0:	1ad3      	subs	r3, r2, r3
   2dfd2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2dfd4:	687b      	ldr	r3, [r7, #4]
   2dfd6:	2b00      	cmp	r3, #0
   2dfd8:	d000      	beq.n	2dfdc <f_write+0x308>
   2dfda:	e6b7      	b.n	2dd4c <f_write+0x78>
   2dfdc:	e000      	b.n	2dfe0 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2dfde:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2dfe0:	68fb      	ldr	r3, [r7, #12]
   2dfe2:	689a      	ldr	r2, [r3, #8]
   2dfe4:	68fb      	ldr	r3, [r7, #12]
   2dfe6:	68db      	ldr	r3, [r3, #12]
   2dfe8:	429a      	cmp	r2, r3
   2dfea:	d903      	bls.n	2dff4 <f_write+0x320>
   2dfec:	68fb      	ldr	r3, [r7, #12]
   2dfee:	689a      	ldr	r2, [r3, #8]
   2dff0:	68fb      	ldr	r3, [r7, #12]
   2dff2:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2dff4:	68fb      	ldr	r3, [r7, #12]
   2dff6:	799b      	ldrb	r3, [r3, #6]
   2dff8:	2220      	movs	r2, #32
   2dffa:	4313      	orrs	r3, r2
   2dffc:	b2da      	uxtb	r2, r3
   2dffe:	68fb      	ldr	r3, [r7, #12]
   2e000:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2e002:	2300      	movs	r3, #0
}
   2e004:	0018      	movs	r0, r3
   2e006:	46bd      	mov	sp, r7
   2e008:	b00b      	add	sp, #44	; 0x2c
   2e00a:	bd90      	pop	{r4, r7, pc}
   2e00c:	0002d6f9 	.word	0x0002d6f9
   2e010:	0002bd85 	.word	0x0002bd85
   2e014:	0002b67d 	.word	0x0002b67d
   2e018:	0002b8dd 	.word	0x0002b8dd
   2e01c:	0002b369 	.word	0x0002b369
   2e020:	0002b599 	.word	0x0002b599

0002e024 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2e024:	b590      	push	{r4, r7, lr}
   2e026:	b087      	sub	sp, #28
   2e028:	af00      	add	r7, sp, #0
   2e02a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2e02c:	687b      	ldr	r3, [r7, #4]
   2e02e:	681a      	ldr	r2, [r3, #0]
   2e030:	687b      	ldr	r3, [r7, #4]
   2e032:	889b      	ldrh	r3, [r3, #4]
   2e034:	2117      	movs	r1, #23
   2e036:	187c      	adds	r4, r7, r1
   2e038:	0019      	movs	r1, r3
   2e03a:	0010      	movs	r0, r2
   2e03c:	4b55      	ldr	r3, [pc, #340]	; (2e194 <f_sync+0x170>)
   2e03e:	4798      	blx	r3
   2e040:	0003      	movs	r3, r0
   2e042:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2e044:	2317      	movs	r3, #23
   2e046:	18fb      	adds	r3, r7, r3
   2e048:	781b      	ldrb	r3, [r3, #0]
   2e04a:	2b00      	cmp	r3, #0
   2e04c:	d000      	beq.n	2e050 <f_sync+0x2c>
   2e04e:	e09a      	b.n	2e186 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2e050:	687b      	ldr	r3, [r7, #4]
   2e052:	799b      	ldrb	r3, [r3, #6]
   2e054:	001a      	movs	r2, r3
   2e056:	2320      	movs	r3, #32
   2e058:	4013      	ands	r3, r2
   2e05a:	d100      	bne.n	2e05e <f_sync+0x3a>
   2e05c:	e093      	b.n	2e186 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2e05e:	687b      	ldr	r3, [r7, #4]
   2e060:	681a      	ldr	r2, [r3, #0]
   2e062:	687b      	ldr	r3, [r7, #4]
   2e064:	69db      	ldr	r3, [r3, #28]
   2e066:	2117      	movs	r1, #23
   2e068:	187c      	adds	r4, r7, r1
   2e06a:	0019      	movs	r1, r3
   2e06c:	0010      	movs	r0, r2
   2e06e:	4b4a      	ldr	r3, [pc, #296]	; (2e198 <f_sync+0x174>)
   2e070:	4798      	blx	r3
   2e072:	0003      	movs	r3, r0
   2e074:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2e076:	2317      	movs	r3, #23
   2e078:	18fb      	adds	r3, r7, r3
   2e07a:	781b      	ldrb	r3, [r3, #0]
   2e07c:	2b00      	cmp	r3, #0
   2e07e:	d000      	beq.n	2e082 <f_sync+0x5e>
   2e080:	e081      	b.n	2e186 <f_sync+0x162>
				dir = fp->dir_ptr;
   2e082:	687b      	ldr	r3, [r7, #4]
   2e084:	6a1b      	ldr	r3, [r3, #32]
   2e086:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2e088:	693b      	ldr	r3, [r7, #16]
   2e08a:	330b      	adds	r3, #11
   2e08c:	693a      	ldr	r2, [r7, #16]
   2e08e:	320b      	adds	r2, #11
   2e090:	7812      	ldrb	r2, [r2, #0]
   2e092:	2120      	movs	r1, #32
   2e094:	430a      	orrs	r2, r1
   2e096:	b2d2      	uxtb	r2, r2
   2e098:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2e09a:	693b      	ldr	r3, [r7, #16]
   2e09c:	331c      	adds	r3, #28
   2e09e:	001a      	movs	r2, r3
   2e0a0:	687b      	ldr	r3, [r7, #4]
   2e0a2:	68db      	ldr	r3, [r3, #12]
   2e0a4:	b2db      	uxtb	r3, r3
   2e0a6:	7013      	strb	r3, [r2, #0]
   2e0a8:	693b      	ldr	r3, [r7, #16]
   2e0aa:	331d      	adds	r3, #29
   2e0ac:	001a      	movs	r2, r3
   2e0ae:	687b      	ldr	r3, [r7, #4]
   2e0b0:	68db      	ldr	r3, [r3, #12]
   2e0b2:	b29b      	uxth	r3, r3
   2e0b4:	0a1b      	lsrs	r3, r3, #8
   2e0b6:	b29b      	uxth	r3, r3
   2e0b8:	b2db      	uxtb	r3, r3
   2e0ba:	7013      	strb	r3, [r2, #0]
   2e0bc:	693b      	ldr	r3, [r7, #16]
   2e0be:	331e      	adds	r3, #30
   2e0c0:	001a      	movs	r2, r3
   2e0c2:	687b      	ldr	r3, [r7, #4]
   2e0c4:	68db      	ldr	r3, [r3, #12]
   2e0c6:	0c1b      	lsrs	r3, r3, #16
   2e0c8:	b2db      	uxtb	r3, r3
   2e0ca:	7013      	strb	r3, [r2, #0]
   2e0cc:	693b      	ldr	r3, [r7, #16]
   2e0ce:	331f      	adds	r3, #31
   2e0d0:	001a      	movs	r2, r3
   2e0d2:	687b      	ldr	r3, [r7, #4]
   2e0d4:	68db      	ldr	r3, [r3, #12]
   2e0d6:	0e1b      	lsrs	r3, r3, #24
   2e0d8:	b2db      	uxtb	r3, r3
   2e0da:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2e0dc:	693b      	ldr	r3, [r7, #16]
   2e0de:	331a      	adds	r3, #26
   2e0e0:	001a      	movs	r2, r3
   2e0e2:	687b      	ldr	r3, [r7, #4]
   2e0e4:	691b      	ldr	r3, [r3, #16]
   2e0e6:	b2db      	uxtb	r3, r3
   2e0e8:	7013      	strb	r3, [r2, #0]
   2e0ea:	693b      	ldr	r3, [r7, #16]
   2e0ec:	331b      	adds	r3, #27
   2e0ee:	001a      	movs	r2, r3
   2e0f0:	687b      	ldr	r3, [r7, #4]
   2e0f2:	691b      	ldr	r3, [r3, #16]
   2e0f4:	b29b      	uxth	r3, r3
   2e0f6:	0a1b      	lsrs	r3, r3, #8
   2e0f8:	b29b      	uxth	r3, r3
   2e0fa:	b2db      	uxtb	r3, r3
   2e0fc:	7013      	strb	r3, [r2, #0]
   2e0fe:	693b      	ldr	r3, [r7, #16]
   2e100:	3314      	adds	r3, #20
   2e102:	001a      	movs	r2, r3
   2e104:	687b      	ldr	r3, [r7, #4]
   2e106:	691b      	ldr	r3, [r3, #16]
   2e108:	0c1b      	lsrs	r3, r3, #16
   2e10a:	b2db      	uxtb	r3, r3
   2e10c:	7013      	strb	r3, [r2, #0]
   2e10e:	693b      	ldr	r3, [r7, #16]
   2e110:	3315      	adds	r3, #21
   2e112:	001a      	movs	r2, r3
   2e114:	687b      	ldr	r3, [r7, #4]
   2e116:	691b      	ldr	r3, [r3, #16]
   2e118:	0c1b      	lsrs	r3, r3, #16
   2e11a:	b29b      	uxth	r3, r3
   2e11c:	0a1b      	lsrs	r3, r3, #8
   2e11e:	b29b      	uxth	r3, r3
   2e120:	b2db      	uxtb	r3, r3
   2e122:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2e124:	4b1d      	ldr	r3, [pc, #116]	; (2e19c <f_sync+0x178>)
   2e126:	4798      	blx	r3
   2e128:	0003      	movs	r3, r0
   2e12a:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2e12c:	693b      	ldr	r3, [r7, #16]
   2e12e:	3316      	adds	r3, #22
   2e130:	68fa      	ldr	r2, [r7, #12]
   2e132:	b2d2      	uxtb	r2, r2
   2e134:	701a      	strb	r2, [r3, #0]
   2e136:	693b      	ldr	r3, [r7, #16]
   2e138:	3317      	adds	r3, #23
   2e13a:	68fa      	ldr	r2, [r7, #12]
   2e13c:	b292      	uxth	r2, r2
   2e13e:	0a12      	lsrs	r2, r2, #8
   2e140:	b292      	uxth	r2, r2
   2e142:	b2d2      	uxtb	r2, r2
   2e144:	701a      	strb	r2, [r3, #0]
   2e146:	693b      	ldr	r3, [r7, #16]
   2e148:	3318      	adds	r3, #24
   2e14a:	68fa      	ldr	r2, [r7, #12]
   2e14c:	0c12      	lsrs	r2, r2, #16
   2e14e:	b2d2      	uxtb	r2, r2
   2e150:	701a      	strb	r2, [r3, #0]
   2e152:	693b      	ldr	r3, [r7, #16]
   2e154:	3319      	adds	r3, #25
   2e156:	68fa      	ldr	r2, [r7, #12]
   2e158:	0e12      	lsrs	r2, r2, #24
   2e15a:	b2d2      	uxtb	r2, r2
   2e15c:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2e15e:	687b      	ldr	r3, [r7, #4]
   2e160:	799b      	ldrb	r3, [r3, #6]
   2e162:	2220      	movs	r2, #32
   2e164:	4393      	bics	r3, r2
   2e166:	b2da      	uxtb	r2, r3
   2e168:	687b      	ldr	r3, [r7, #4]
   2e16a:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2e16c:	687b      	ldr	r3, [r7, #4]
   2e16e:	681b      	ldr	r3, [r3, #0]
   2e170:	2201      	movs	r2, #1
   2e172:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2e174:	687b      	ldr	r3, [r7, #4]
   2e176:	681b      	ldr	r3, [r3, #0]
   2e178:	2217      	movs	r2, #23
   2e17a:	18bc      	adds	r4, r7, r2
   2e17c:	0018      	movs	r0, r3
   2e17e:	4b08      	ldr	r3, [pc, #32]	; (2e1a0 <f_sync+0x17c>)
   2e180:	4798      	blx	r3
   2e182:	0003      	movs	r3, r0
   2e184:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2e186:	2317      	movs	r3, #23
   2e188:	18fb      	adds	r3, r7, r3
   2e18a:	781b      	ldrb	r3, [r3, #0]
}
   2e18c:	0018      	movs	r0, r3
   2e18e:	46bd      	mov	sp, r7
   2e190:	b007      	add	sp, #28
   2e192:	bd90      	pop	{r4, r7, pc}
   2e194:	0002d6f9 	.word	0x0002d6f9
   2e198:	0002b67d 	.word	0x0002b67d
   2e19c:	0002b539 	.word	0x0002b539
   2e1a0:	0002b745 	.word	0x0002b745

0002e1a4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2e1a4:	b590      	push	{r4, r7, lr}
   2e1a6:	b085      	sub	sp, #20
   2e1a8:	af00      	add	r7, sp, #0
   2e1aa:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2e1ac:	230f      	movs	r3, #15
   2e1ae:	18fc      	adds	r4, r7, r3
   2e1b0:	687b      	ldr	r3, [r7, #4]
   2e1b2:	0018      	movs	r0, r3
   2e1b4:	4b09      	ldr	r3, [pc, #36]	; (2e1dc <f_close+0x38>)
   2e1b6:	4798      	blx	r3
   2e1b8:	0003      	movs	r3, r0
   2e1ba:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2e1bc:	230f      	movs	r3, #15
   2e1be:	18fb      	adds	r3, r7, r3
   2e1c0:	781b      	ldrb	r3, [r3, #0]
   2e1c2:	2b00      	cmp	r3, #0
   2e1c4:	d102      	bne.n	2e1cc <f_close+0x28>
   2e1c6:	687b      	ldr	r3, [r7, #4]
   2e1c8:	2200      	movs	r2, #0
   2e1ca:	601a      	str	r2, [r3, #0]
	return res;
   2e1cc:	230f      	movs	r3, #15
   2e1ce:	18fb      	adds	r3, r7, r3
   2e1d0:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2e1d2:	0018      	movs	r0, r3
   2e1d4:	46bd      	mov	sp, r7
   2e1d6:	b005      	add	sp, #20
   2e1d8:	bd90      	pop	{r4, r7, pc}
   2e1da:	46c0      	nop			; (mov r8, r8)
   2e1dc:	0002e025 	.word	0x0002e025

0002e1e0 <ff_convert>:
   2e1e0:	b580      	push	{r7, lr}
   2e1e2:	b084      	sub	sp, #16
   2e1e4:	af00      	add	r7, sp, #0
   2e1e6:	0002      	movs	r2, r0
   2e1e8:	6039      	str	r1, [r7, #0]
   2e1ea:	1dbb      	adds	r3, r7, #6
   2e1ec:	801a      	strh	r2, [r3, #0]
   2e1ee:	1dbb      	adds	r3, r7, #6
   2e1f0:	881b      	ldrh	r3, [r3, #0]
   2e1f2:	2b7f      	cmp	r3, #127	; 0x7f
   2e1f4:	d805      	bhi.n	2e202 <ff_convert+0x22>
   2e1f6:	230e      	movs	r3, #14
   2e1f8:	18fb      	adds	r3, r7, r3
   2e1fa:	1dba      	adds	r2, r7, #6
   2e1fc:	8812      	ldrh	r2, [r2, #0]
   2e1fe:	801a      	strh	r2, [r3, #0]
   2e200:	e03a      	b.n	2e278 <ff_convert+0x98>
   2e202:	683b      	ldr	r3, [r7, #0]
   2e204:	2b00      	cmp	r3, #0
   2e206:	d010      	beq.n	2e22a <ff_convert+0x4a>
   2e208:	1dbb      	adds	r3, r7, #6
   2e20a:	881b      	ldrh	r3, [r3, #0]
   2e20c:	2bff      	cmp	r3, #255	; 0xff
   2e20e:	d807      	bhi.n	2e220 <ff_convert+0x40>
   2e210:	1dbb      	adds	r3, r7, #6
   2e212:	881b      	ldrh	r3, [r3, #0]
   2e214:	3b80      	subs	r3, #128	; 0x80
   2e216:	001a      	movs	r2, r3
   2e218:	4b1b      	ldr	r3, [pc, #108]	; (2e288 <ff_convert+0xa8>)
   2e21a:	0052      	lsls	r2, r2, #1
   2e21c:	5ad2      	ldrh	r2, [r2, r3]
   2e21e:	e000      	b.n	2e222 <ff_convert+0x42>
   2e220:	2200      	movs	r2, #0
   2e222:	230e      	movs	r3, #14
   2e224:	18fb      	adds	r3, r7, r3
   2e226:	801a      	strh	r2, [r3, #0]
   2e228:	e026      	b.n	2e278 <ff_convert+0x98>
   2e22a:	230e      	movs	r3, #14
   2e22c:	18fb      	adds	r3, r7, r3
   2e22e:	2200      	movs	r2, #0
   2e230:	801a      	strh	r2, [r3, #0]
   2e232:	e010      	b.n	2e256 <ff_convert+0x76>
   2e234:	230e      	movs	r3, #14
   2e236:	18fb      	adds	r3, r7, r3
   2e238:	881a      	ldrh	r2, [r3, #0]
   2e23a:	4b13      	ldr	r3, [pc, #76]	; (2e288 <ff_convert+0xa8>)
   2e23c:	0052      	lsls	r2, r2, #1
   2e23e:	5ad3      	ldrh	r3, [r2, r3]
   2e240:	1dba      	adds	r2, r7, #6
   2e242:	8812      	ldrh	r2, [r2, #0]
   2e244:	429a      	cmp	r2, r3
   2e246:	d00c      	beq.n	2e262 <ff_convert+0x82>
   2e248:	230e      	movs	r3, #14
   2e24a:	18fb      	adds	r3, r7, r3
   2e24c:	881a      	ldrh	r2, [r3, #0]
   2e24e:	230e      	movs	r3, #14
   2e250:	18fb      	adds	r3, r7, r3
   2e252:	3201      	adds	r2, #1
   2e254:	801a      	strh	r2, [r3, #0]
   2e256:	230e      	movs	r3, #14
   2e258:	18fb      	adds	r3, r7, r3
   2e25a:	881b      	ldrh	r3, [r3, #0]
   2e25c:	2b7f      	cmp	r3, #127	; 0x7f
   2e25e:	d9e9      	bls.n	2e234 <ff_convert+0x54>
   2e260:	e000      	b.n	2e264 <ff_convert+0x84>
   2e262:	46c0      	nop			; (mov r8, r8)
   2e264:	230e      	movs	r3, #14
   2e266:	18fb      	adds	r3, r7, r3
   2e268:	881b      	ldrh	r3, [r3, #0]
   2e26a:	3380      	adds	r3, #128	; 0x80
   2e26c:	b29a      	uxth	r2, r3
   2e26e:	230e      	movs	r3, #14
   2e270:	18fb      	adds	r3, r7, r3
   2e272:	21ff      	movs	r1, #255	; 0xff
   2e274:	400a      	ands	r2, r1
   2e276:	801a      	strh	r2, [r3, #0]
   2e278:	230e      	movs	r3, #14
   2e27a:	18fb      	adds	r3, r7, r3
   2e27c:	881b      	ldrh	r3, [r3, #0]
   2e27e:	0018      	movs	r0, r3
   2e280:	46bd      	mov	sp, r7
   2e282:	b004      	add	sp, #16
   2e284:	bd80      	pop	{r7, pc}
   2e286:	46c0      	nop			; (mov r8, r8)
   2e288:	0003965c 	.word	0x0003965c

0002e28c <ff_wtoupper>:
   2e28c:	b580      	push	{r7, lr}
   2e28e:	b084      	sub	sp, #16
   2e290:	af00      	add	r7, sp, #0
   2e292:	0002      	movs	r2, r0
   2e294:	1dbb      	adds	r3, r7, #6
   2e296:	801a      	strh	r2, [r3, #0]
   2e298:	2300      	movs	r3, #0
   2e29a:	60fb      	str	r3, [r7, #12]
   2e29c:	e002      	b.n	2e2a4 <ff_wtoupper+0x18>
   2e29e:	68fb      	ldr	r3, [r7, #12]
   2e2a0:	3301      	adds	r3, #1
   2e2a2:	60fb      	str	r3, [r7, #12]
   2e2a4:	4b0f      	ldr	r3, [pc, #60]	; (2e2e4 <ff_wtoupper+0x58>)
   2e2a6:	68fa      	ldr	r2, [r7, #12]
   2e2a8:	0052      	lsls	r2, r2, #1
   2e2aa:	5ad3      	ldrh	r3, [r2, r3]
   2e2ac:	2b00      	cmp	r3, #0
   2e2ae:	d007      	beq.n	2e2c0 <ff_wtoupper+0x34>
   2e2b0:	4b0c      	ldr	r3, [pc, #48]	; (2e2e4 <ff_wtoupper+0x58>)
   2e2b2:	68fa      	ldr	r2, [r7, #12]
   2e2b4:	0052      	lsls	r2, r2, #1
   2e2b6:	5ad3      	ldrh	r3, [r2, r3]
   2e2b8:	1dba      	adds	r2, r7, #6
   2e2ba:	8812      	ldrh	r2, [r2, #0]
   2e2bc:	429a      	cmp	r2, r3
   2e2be:	d1ee      	bne.n	2e29e <ff_wtoupper+0x12>
   2e2c0:	4b08      	ldr	r3, [pc, #32]	; (2e2e4 <ff_wtoupper+0x58>)
   2e2c2:	68fa      	ldr	r2, [r7, #12]
   2e2c4:	0052      	lsls	r2, r2, #1
   2e2c6:	5ad3      	ldrh	r3, [r2, r3]
   2e2c8:	2b00      	cmp	r3, #0
   2e2ca:	d004      	beq.n	2e2d6 <ff_wtoupper+0x4a>
   2e2cc:	4b06      	ldr	r3, [pc, #24]	; (2e2e8 <ff_wtoupper+0x5c>)
   2e2ce:	68fa      	ldr	r2, [r7, #12]
   2e2d0:	0052      	lsls	r2, r2, #1
   2e2d2:	5ad3      	ldrh	r3, [r2, r3]
   2e2d4:	e001      	b.n	2e2da <ff_wtoupper+0x4e>
   2e2d6:	1dbb      	adds	r3, r7, #6
   2e2d8:	881b      	ldrh	r3, [r3, #0]
   2e2da:	0018      	movs	r0, r3
   2e2dc:	46bd      	mov	sp, r7
   2e2de:	b004      	add	sp, #16
   2e2e0:	bd80      	pop	{r7, pc}
   2e2e2:	46c0      	nop			; (mov r8, r8)
   2e2e4:	0003975c 	.word	0x0003975c
   2e2e8:	0003993c 	.word	0x0003993c

0002e2ec <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2e2ec:	b580      	push	{r7, lr}
   2e2ee:	b084      	sub	sp, #16
   2e2f0:	af00      	add	r7, sp, #0
   2e2f2:	60f8      	str	r0, [r7, #12]
   2e2f4:	60b9      	str	r1, [r7, #8]
   2e2f6:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2e2f8:	68fb      	ldr	r3, [r7, #12]
   2e2fa:	68ba      	ldr	r2, [r7, #8]
   2e2fc:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2e2fe:	68fb      	ldr	r3, [r7, #12]
   2e300:	687a      	ldr	r2, [r7, #4]
   2e302:	601a      	str	r2, [r3, #0]
}
   2e304:	46c0      	nop			; (mov r8, r8)
   2e306:	46bd      	mov	sp, r7
   2e308:	b004      	add	sp, #16
   2e30a:	bd80      	pop	{r7, pc}

0002e30c <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2e30c:	b580      	push	{r7, lr}
   2e30e:	b082      	sub	sp, #8
   2e310:	af00      	add	r7, sp, #0
   2e312:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2e314:	687b      	ldr	r3, [r7, #4]
   2e316:	681b      	ldr	r3, [r3, #0]
   2e318:	4a07      	ldr	r2, [pc, #28]	; (2e338 <getNextPacketId+0x2c>)
   2e31a:	4293      	cmp	r3, r2
   2e31c:	d003      	beq.n	2e326 <getNextPacketId+0x1a>
   2e31e:	687b      	ldr	r3, [r7, #4]
   2e320:	681b      	ldr	r3, [r3, #0]
   2e322:	1c5a      	adds	r2, r3, #1
   2e324:	e000      	b.n	2e328 <getNextPacketId+0x1c>
   2e326:	2201      	movs	r2, #1
   2e328:	687b      	ldr	r3, [r7, #4]
   2e32a:	601a      	str	r2, [r3, #0]
   2e32c:	687b      	ldr	r3, [r7, #4]
   2e32e:	681b      	ldr	r3, [r3, #0]
}
   2e330:	0018      	movs	r0, r3
   2e332:	46bd      	mov	sp, r7
   2e334:	b002      	add	sp, #8
   2e336:	bd80      	pop	{r7, pc}
   2e338:	0000ffff 	.word	0x0000ffff

0002e33c <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2e33c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e33e:	b087      	sub	sp, #28
   2e340:	af00      	add	r7, sp, #0
   2e342:	60f8      	str	r0, [r7, #12]
   2e344:	60b9      	str	r1, [r7, #8]
   2e346:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2e348:	2301      	movs	r3, #1
   2e34a:	425b      	negs	r3, r3
   2e34c:	617b      	str	r3, [r7, #20]
        sent = 0;
   2e34e:	2300      	movs	r3, #0
   2e350:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2e352:	e01a      	b.n	2e38a <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2e354:	68fb      	ldr	r3, [r7, #12]
   2e356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e358:	68dc      	ldr	r4, [r3, #12]
   2e35a:	68fb      	ldr	r3, [r7, #12]
   2e35c:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e35e:	68fb      	ldr	r3, [r7, #12]
   2e360:	691a      	ldr	r2, [r3, #16]
   2e362:	693b      	ldr	r3, [r7, #16]
   2e364:	18d6      	adds	r6, r2, r3
   2e366:	687b      	ldr	r3, [r7, #4]
   2e368:	0018      	movs	r0, r3
   2e36a:	4b1a      	ldr	r3, [pc, #104]	; (2e3d4 <sendPacket+0x98>)
   2e36c:	4798      	blx	r3
   2e36e:	0003      	movs	r3, r0
   2e370:	68ba      	ldr	r2, [r7, #8]
   2e372:	0031      	movs	r1, r6
   2e374:	0028      	movs	r0, r5
   2e376:	47a0      	blx	r4
   2e378:	0003      	movs	r3, r0
   2e37a:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2e37c:	697b      	ldr	r3, [r7, #20]
   2e37e:	2b00      	cmp	r3, #0
   2e380:	db0e      	blt.n	2e3a0 <sendPacket+0x64>
            break;
        sent += rc;
   2e382:	693a      	ldr	r2, [r7, #16]
   2e384:	697b      	ldr	r3, [r7, #20]
   2e386:	18d3      	adds	r3, r2, r3
   2e388:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2e38a:	693a      	ldr	r2, [r7, #16]
   2e38c:	68bb      	ldr	r3, [r7, #8]
   2e38e:	429a      	cmp	r2, r3
   2e390:	da07      	bge.n	2e3a2 <sendPacket+0x66>
   2e392:	687b      	ldr	r3, [r7, #4]
   2e394:	0018      	movs	r0, r3
   2e396:	4b10      	ldr	r3, [pc, #64]	; (2e3d8 <sendPacket+0x9c>)
   2e398:	4798      	blx	r3
   2e39a:	1e03      	subs	r3, r0, #0
   2e39c:	d0da      	beq.n	2e354 <sendPacket+0x18>
   2e39e:	e000      	b.n	2e3a2 <sendPacket+0x66>
            break;
   2e3a0:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2e3a2:	693a      	ldr	r2, [r7, #16]
   2e3a4:	68bb      	ldr	r3, [r7, #8]
   2e3a6:	429a      	cmp	r2, r3
   2e3a8:	d10b      	bne.n	2e3c2 <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2e3aa:	68fb      	ldr	r3, [r7, #12]
   2e3ac:	3354      	adds	r3, #84	; 0x54
   2e3ae:	001a      	movs	r2, r3
   2e3b0:	68fb      	ldr	r3, [r7, #12]
   2e3b2:	699b      	ldr	r3, [r3, #24]
   2e3b4:	0019      	movs	r1, r3
   2e3b6:	0010      	movs	r0, r2
   2e3b8:	4b08      	ldr	r3, [pc, #32]	; (2e3dc <sendPacket+0xa0>)
   2e3ba:	4798      	blx	r3
        rc = SUCCESS;
   2e3bc:	2300      	movs	r3, #0
   2e3be:	617b      	str	r3, [r7, #20]
   2e3c0:	e002      	b.n	2e3c8 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2e3c2:	2301      	movs	r3, #1
   2e3c4:	425b      	negs	r3, r3
   2e3c6:	617b      	str	r3, [r7, #20]
    return rc;
   2e3c8:	697b      	ldr	r3, [r7, #20]
}
   2e3ca:	0018      	movs	r0, r3
   2e3cc:	46bd      	mov	sp, r7
   2e3ce:	b007      	add	sp, #28
   2e3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e3d2:	46c0      	nop			; (mov r8, r8)
   2e3d4:	0002f19d 	.word	0x0002f19d
   2e3d8:	0002f121 	.word	0x0002f121
   2e3dc:	0002f175 	.word	0x0002f175

0002e3e0 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2e3e0:	b580      	push	{r7, lr}
   2e3e2:	b086      	sub	sp, #24
   2e3e4:	af00      	add	r7, sp, #0
   2e3e6:	60f8      	str	r0, [r7, #12]
   2e3e8:	60b9      	str	r1, [r7, #8]
   2e3ea:	607a      	str	r2, [r7, #4]
   2e3ec:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2e3ee:	68fb      	ldr	r3, [r7, #12]
   2e3f0:	68ba      	ldr	r2, [r7, #8]
   2e3f2:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e3f4:	2300      	movs	r3, #0
   2e3f6:	617b      	str	r3, [r7, #20]
   2e3f8:	e00a      	b.n	2e410 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2e3fa:	68fa      	ldr	r2, [r7, #12]
   2e3fc:	697b      	ldr	r3, [r7, #20]
   2e3fe:	3304      	adds	r3, #4
   2e400:	00db      	lsls	r3, r3, #3
   2e402:	18d3      	adds	r3, r2, r3
   2e404:	3304      	adds	r3, #4
   2e406:	2200      	movs	r2, #0
   2e408:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e40a:	697b      	ldr	r3, [r7, #20]
   2e40c:	3301      	adds	r3, #1
   2e40e:	617b      	str	r3, [r7, #20]
   2e410:	697b      	ldr	r3, [r7, #20]
   2e412:	2b04      	cmp	r3, #4
   2e414:	ddf1      	ble.n	2e3fa <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2e416:	68fb      	ldr	r3, [r7, #12]
   2e418:	687a      	ldr	r2, [r7, #4]
   2e41a:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2e41c:	68fb      	ldr	r3, [r7, #12]
   2e41e:	683a      	ldr	r2, [r7, #0]
   2e420:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2e422:	68fb      	ldr	r3, [r7, #12]
   2e424:	6a3a      	ldr	r2, [r7, #32]
   2e426:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2e428:	68fb      	ldr	r3, [r7, #12]
   2e42a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e42c:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2e42e:	68fb      	ldr	r3, [r7, #12]
   2e430:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e432:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2e434:	68fb      	ldr	r3, [r7, #12]
   2e436:	2200      	movs	r2, #0
   2e438:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2e43a:	68fb      	ldr	r3, [r7, #12]
   2e43c:	2200      	movs	r2, #0
   2e43e:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2e440:	68fb      	ldr	r3, [r7, #12]
   2e442:	2200      	movs	r2, #0
   2e444:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2e446:	68fb      	ldr	r3, [r7, #12]
   2e448:	2201      	movs	r2, #1
   2e44a:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2e44c:	68fb      	ldr	r3, [r7, #12]
   2e44e:	3354      	adds	r3, #84	; 0x54
   2e450:	0018      	movs	r0, r3
   2e452:	4b03      	ldr	r3, [pc, #12]	; (2e460 <MQTTClientInit+0x80>)
   2e454:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2e456:	46c0      	nop			; (mov r8, r8)
   2e458:	46bd      	mov	sp, r7
   2e45a:	b006      	add	sp, #24
   2e45c:	bd80      	pop	{r7, pc}
   2e45e:	46c0      	nop			; (mov r8, r8)
   2e460:	0002f1c5 	.word	0x0002f1c5

0002e464 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2e464:	b590      	push	{r4, r7, lr}
   2e466:	b08b      	sub	sp, #44	; 0x2c
   2e468:	af00      	add	r7, sp, #0
   2e46a:	60f8      	str	r0, [r7, #12]
   2e46c:	60b9      	str	r1, [r7, #8]
   2e46e:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2e470:	2301      	movs	r3, #1
   2e472:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2e474:	2300      	movs	r3, #0
   2e476:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2e478:	2304      	movs	r3, #4
   2e47a:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2e47c:	68bb      	ldr	r3, [r7, #8]
   2e47e:	2200      	movs	r2, #0
   2e480:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2e482:	2301      	movs	r3, #1
   2e484:	425b      	negs	r3, r3
   2e486:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2e488:	6a3b      	ldr	r3, [r7, #32]
   2e48a:	3301      	adds	r3, #1
   2e48c:	623b      	str	r3, [r7, #32]
   2e48e:	6a3a      	ldr	r2, [r7, #32]
   2e490:	69fb      	ldr	r3, [r7, #28]
   2e492:	429a      	cmp	r2, r3
   2e494:	dd03      	ble.n	2e49e <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2e496:	2301      	movs	r3, #1
   2e498:	425b      	negs	r3, r3
   2e49a:	61bb      	str	r3, [r7, #24]
            goto exit;
   2e49c:	e026      	b.n	2e4ec <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2e49e:	68fb      	ldr	r3, [r7, #12]
   2e4a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e4a2:	689c      	ldr	r4, [r3, #8]
   2e4a4:	68fb      	ldr	r3, [r7, #12]
   2e4a6:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2e4a8:	687b      	ldr	r3, [r7, #4]
   2e4aa:	2217      	movs	r2, #23
   2e4ac:	18b9      	adds	r1, r7, r2
   2e4ae:	2201      	movs	r2, #1
   2e4b0:	47a0      	blx	r4
   2e4b2:	0003      	movs	r3, r0
   2e4b4:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2e4b6:	69bb      	ldr	r3, [r7, #24]
   2e4b8:	2b01      	cmp	r3, #1
   2e4ba:	d116      	bne.n	2e4ea <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2e4bc:	68bb      	ldr	r3, [r7, #8]
   2e4be:	681a      	ldr	r2, [r3, #0]
   2e4c0:	2317      	movs	r3, #23
   2e4c2:	18fb      	adds	r3, r7, r3
   2e4c4:	781b      	ldrb	r3, [r3, #0]
   2e4c6:	0019      	movs	r1, r3
   2e4c8:	237f      	movs	r3, #127	; 0x7f
   2e4ca:	400b      	ands	r3, r1
   2e4cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2e4ce:	434b      	muls	r3, r1
   2e4d0:	18d2      	adds	r2, r2, r3
   2e4d2:	68bb      	ldr	r3, [r7, #8]
   2e4d4:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2e4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e4d8:	01db      	lsls	r3, r3, #7
   2e4da:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2e4dc:	2317      	movs	r3, #23
   2e4de:	18fb      	adds	r3, r7, r3
   2e4e0:	781b      	ldrb	r3, [r3, #0]
   2e4e2:	b25b      	sxtb	r3, r3
   2e4e4:	2b00      	cmp	r3, #0
   2e4e6:	dbcc      	blt.n	2e482 <decodePacket+0x1e>
   2e4e8:	e000      	b.n	2e4ec <decodePacket+0x88>
            goto exit;
   2e4ea:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2e4ec:	6a3b      	ldr	r3, [r7, #32]
}
   2e4ee:	0018      	movs	r0, r3
   2e4f0:	46bd      	mov	sp, r7
   2e4f2:	b00b      	add	sp, #44	; 0x2c
   2e4f4:	bd90      	pop	{r4, r7, pc}
	...

0002e4f8 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2e4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e4fa:	46c6      	mov	lr, r8
   2e4fc:	b500      	push	{lr}
   2e4fe:	b086      	sub	sp, #24
   2e500:	af00      	add	r7, sp, #0
   2e502:	6078      	str	r0, [r7, #4]
   2e504:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2e506:	2301      	movs	r3, #1
   2e508:	425b      	negs	r3, r3
   2e50a:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2e50c:	2300      	movs	r3, #0
   2e50e:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2e510:	2300      	movs	r3, #0
   2e512:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2e514:	2300      	movs	r3, #0
   2e516:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2e518:	687b      	ldr	r3, [r7, #4]
   2e51a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e51c:	689c      	ldr	r4, [r3, #8]
   2e51e:	687b      	ldr	r3, [r7, #4]
   2e520:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e522:	687b      	ldr	r3, [r7, #4]
   2e524:	695e      	ldr	r6, [r3, #20]
   2e526:	683b      	ldr	r3, [r7, #0]
   2e528:	0018      	movs	r0, r3
   2e52a:	4b2b      	ldr	r3, [pc, #172]	; (2e5d8 <readPacket+0xe0>)
   2e52c:	4798      	blx	r3
   2e52e:	0003      	movs	r3, r0
   2e530:	2201      	movs	r2, #1
   2e532:	0031      	movs	r1, r6
   2e534:	0028      	movs	r0, r5
   2e536:	47a0      	blx	r4
   2e538:	0003      	movs	r3, r0
   2e53a:	2b01      	cmp	r3, #1
   2e53c:	d141      	bne.n	2e5c2 <readPacket+0xca>
        goto exit;

    len = 1;
   2e53e:	2301      	movs	r3, #1
   2e540:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2e542:	683b      	ldr	r3, [r7, #0]
   2e544:	0018      	movs	r0, r3
   2e546:	4b24      	ldr	r3, [pc, #144]	; (2e5d8 <readPacket+0xe0>)
   2e548:	4798      	blx	r3
   2e54a:	0002      	movs	r2, r0
   2e54c:	2308      	movs	r3, #8
   2e54e:	18f9      	adds	r1, r7, r3
   2e550:	687b      	ldr	r3, [r7, #4]
   2e552:	0018      	movs	r0, r3
   2e554:	4b21      	ldr	r3, [pc, #132]	; (2e5dc <readPacket+0xe4>)
   2e556:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2e558:	687b      	ldr	r3, [r7, #4]
   2e55a:	695b      	ldr	r3, [r3, #20]
   2e55c:	3301      	adds	r3, #1
   2e55e:	68ba      	ldr	r2, [r7, #8]
   2e560:	0011      	movs	r1, r2
   2e562:	0018      	movs	r0, r3
   2e564:	4b1e      	ldr	r3, [pc, #120]	; (2e5e0 <readPacket+0xe8>)
   2e566:	4798      	blx	r3
   2e568:	0002      	movs	r2, r0
   2e56a:	693b      	ldr	r3, [r7, #16]
   2e56c:	189b      	adds	r3, r3, r2
   2e56e:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2e570:	68bb      	ldr	r3, [r7, #8]
   2e572:	2b00      	cmp	r3, #0
   2e574:	dd17      	ble.n	2e5a6 <readPacket+0xae>
   2e576:	687b      	ldr	r3, [r7, #4]
   2e578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e57a:	689c      	ldr	r4, [r3, #8]
   2e57c:	687b      	ldr	r3, [r7, #4]
   2e57e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e580:	687b      	ldr	r3, [r7, #4]
   2e582:	695a      	ldr	r2, [r3, #20]
   2e584:	693b      	ldr	r3, [r7, #16]
   2e586:	18d6      	adds	r6, r2, r3
   2e588:	68bb      	ldr	r3, [r7, #8]
   2e58a:	4698      	mov	r8, r3
   2e58c:	683b      	ldr	r3, [r7, #0]
   2e58e:	0018      	movs	r0, r3
   2e590:	4b11      	ldr	r3, [pc, #68]	; (2e5d8 <readPacket+0xe0>)
   2e592:	4798      	blx	r3
   2e594:	0003      	movs	r3, r0
   2e596:	4642      	mov	r2, r8
   2e598:	0031      	movs	r1, r6
   2e59a:	0028      	movs	r0, r5
   2e59c:	47a0      	blx	r4
   2e59e:	0002      	movs	r2, r0
   2e5a0:	68bb      	ldr	r3, [r7, #8]
   2e5a2:	429a      	cmp	r2, r3
   2e5a4:	d10f      	bne.n	2e5c6 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2e5a6:	687b      	ldr	r3, [r7, #4]
   2e5a8:	695b      	ldr	r3, [r3, #20]
   2e5aa:	781a      	ldrb	r2, [r3, #0]
   2e5ac:	230c      	movs	r3, #12
   2e5ae:	18fb      	adds	r3, r7, r3
   2e5b0:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2e5b2:	230c      	movs	r3, #12
   2e5b4:	18fb      	adds	r3, r7, r3
   2e5b6:	781b      	ldrb	r3, [r3, #0]
   2e5b8:	061b      	lsls	r3, r3, #24
   2e5ba:	0f1b      	lsrs	r3, r3, #28
   2e5bc:	b2db      	uxtb	r3, r3
   2e5be:	617b      	str	r3, [r7, #20]
   2e5c0:	e002      	b.n	2e5c8 <readPacket+0xd0>
        goto exit;
   2e5c2:	46c0      	nop			; (mov r8, r8)
   2e5c4:	e000      	b.n	2e5c8 <readPacket+0xd0>
        goto exit;
   2e5c6:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2e5c8:	697b      	ldr	r3, [r7, #20]
}
   2e5ca:	0018      	movs	r0, r3
   2e5cc:	46bd      	mov	sp, r7
   2e5ce:	b006      	add	sp, #24
   2e5d0:	bc04      	pop	{r2}
   2e5d2:	4690      	mov	r8, r2
   2e5d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e5d6:	46c0      	nop			; (mov r8, r8)
   2e5d8:	0002f19d 	.word	0x0002f19d
   2e5dc:	0002e465 	.word	0x0002e465
   2e5e0:	0002ff75 	.word	0x0002ff75

0002e5e4 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2e5e4:	b580      	push	{r7, lr}
   2e5e6:	b086      	sub	sp, #24
   2e5e8:	af00      	add	r7, sp, #0
   2e5ea:	6078      	str	r0, [r7, #4]
   2e5ec:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2e5ee:	687b      	ldr	r3, [r7, #4]
   2e5f0:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2e5f2:	683b      	ldr	r3, [r7, #0]
   2e5f4:	689b      	ldr	r3, [r3, #8]
   2e5f6:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2e5f8:	683b      	ldr	r3, [r7, #0]
   2e5fa:	685b      	ldr	r3, [r3, #4]
   2e5fc:	001a      	movs	r2, r3
   2e5fe:	693b      	ldr	r3, [r7, #16]
   2e600:	189b      	adds	r3, r3, r2
   2e602:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2e604:	e039      	b.n	2e67a <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2e606:	693b      	ldr	r3, [r7, #16]
   2e608:	781b      	ldrb	r3, [r3, #0]
   2e60a:	2b2f      	cmp	r3, #47	; 0x2f
   2e60c:	d103      	bne.n	2e616 <isTopicMatched+0x32>
   2e60e:	697b      	ldr	r3, [r7, #20]
   2e610:	781b      	ldrb	r3, [r3, #0]
   2e612:	2b2f      	cmp	r3, #47	; 0x2f
   2e614:	d13a      	bne.n	2e68c <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2e616:	697b      	ldr	r3, [r7, #20]
   2e618:	781b      	ldrb	r3, [r3, #0]
   2e61a:	2b2b      	cmp	r3, #43	; 0x2b
   2e61c:	d009      	beq.n	2e632 <isTopicMatched+0x4e>
   2e61e:	697b      	ldr	r3, [r7, #20]
   2e620:	781b      	ldrb	r3, [r3, #0]
   2e622:	2b23      	cmp	r3, #35	; 0x23
   2e624:	d005      	beq.n	2e632 <isTopicMatched+0x4e>
   2e626:	697b      	ldr	r3, [r7, #20]
   2e628:	781a      	ldrb	r2, [r3, #0]
   2e62a:	693b      	ldr	r3, [r7, #16]
   2e62c:	781b      	ldrb	r3, [r3, #0]
   2e62e:	429a      	cmp	r2, r3
   2e630:	d12e      	bne.n	2e690 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2e632:	697b      	ldr	r3, [r7, #20]
   2e634:	781b      	ldrb	r3, [r3, #0]
   2e636:	2b2b      	cmp	r3, #43	; 0x2b
   2e638:	d112      	bne.n	2e660 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2e63a:	693b      	ldr	r3, [r7, #16]
   2e63c:	3301      	adds	r3, #1
   2e63e:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2e640:	e005      	b.n	2e64e <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2e642:	693b      	ldr	r3, [r7, #16]
   2e644:	3301      	adds	r3, #1
   2e646:	613b      	str	r3, [r7, #16]
   2e648:	693b      	ldr	r3, [r7, #16]
   2e64a:	3301      	adds	r3, #1
   2e64c:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2e64e:	68fa      	ldr	r2, [r7, #12]
   2e650:	68bb      	ldr	r3, [r7, #8]
   2e652:	429a      	cmp	r2, r3
   2e654:	d20b      	bcs.n	2e66e <isTopicMatched+0x8a>
   2e656:	68fb      	ldr	r3, [r7, #12]
   2e658:	781b      	ldrb	r3, [r3, #0]
   2e65a:	2b2f      	cmp	r3, #47	; 0x2f
   2e65c:	d1f1      	bne.n	2e642 <isTopicMatched+0x5e>
   2e65e:	e006      	b.n	2e66e <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2e660:	697b      	ldr	r3, [r7, #20]
   2e662:	781b      	ldrb	r3, [r3, #0]
   2e664:	2b23      	cmp	r3, #35	; 0x23
   2e666:	d102      	bne.n	2e66e <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2e668:	68bb      	ldr	r3, [r7, #8]
   2e66a:	3b01      	subs	r3, #1
   2e66c:	613b      	str	r3, [r7, #16]
        curf++;
   2e66e:	697b      	ldr	r3, [r7, #20]
   2e670:	3301      	adds	r3, #1
   2e672:	617b      	str	r3, [r7, #20]
        curn++;
   2e674:	693b      	ldr	r3, [r7, #16]
   2e676:	3301      	adds	r3, #1
   2e678:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2e67a:	697b      	ldr	r3, [r7, #20]
   2e67c:	781b      	ldrb	r3, [r3, #0]
   2e67e:	2b00      	cmp	r3, #0
   2e680:	d007      	beq.n	2e692 <isTopicMatched+0xae>
   2e682:	693a      	ldr	r2, [r7, #16]
   2e684:	68bb      	ldr	r3, [r7, #8]
   2e686:	429a      	cmp	r2, r3
   2e688:	d3bd      	bcc.n	2e606 <isTopicMatched+0x22>
   2e68a:	e002      	b.n	2e692 <isTopicMatched+0xae>
            break;
   2e68c:	46c0      	nop			; (mov r8, r8)
   2e68e:	e000      	b.n	2e692 <isTopicMatched+0xae>
            break;
   2e690:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2e692:	693a      	ldr	r2, [r7, #16]
   2e694:	68bb      	ldr	r3, [r7, #8]
   2e696:	429a      	cmp	r2, r3
   2e698:	d105      	bne.n	2e6a6 <isTopicMatched+0xc2>
   2e69a:	697b      	ldr	r3, [r7, #20]
   2e69c:	781b      	ldrb	r3, [r3, #0]
   2e69e:	2b00      	cmp	r3, #0
   2e6a0:	d101      	bne.n	2e6a6 <isTopicMatched+0xc2>
   2e6a2:	2301      	movs	r3, #1
   2e6a4:	e000      	b.n	2e6a8 <isTopicMatched+0xc4>
   2e6a6:	2300      	movs	r3, #0
   2e6a8:	b2db      	uxtb	r3, r3
}
   2e6aa:	0018      	movs	r0, r3
   2e6ac:	46bd      	mov	sp, r7
   2e6ae:	b006      	add	sp, #24
   2e6b0:	bd80      	pop	{r7, pc}
	...

0002e6b4 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2e6b4:	b580      	push	{r7, lr}
   2e6b6:	b08a      	sub	sp, #40	; 0x28
   2e6b8:	af00      	add	r7, sp, #0
   2e6ba:	60f8      	str	r0, [r7, #12]
   2e6bc:	60b9      	str	r1, [r7, #8]
   2e6be:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2e6c0:	2301      	movs	r3, #1
   2e6c2:	425b      	negs	r3, r3
   2e6c4:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e6c6:	2300      	movs	r3, #0
   2e6c8:	627b      	str	r3, [r7, #36]	; 0x24
   2e6ca:	e044      	b.n	2e756 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2e6cc:	68fa      	ldr	r2, [r7, #12]
   2e6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e6d0:	3304      	adds	r3, #4
   2e6d2:	00db      	lsls	r3, r3, #3
   2e6d4:	18d3      	adds	r3, r2, r3
   2e6d6:	3304      	adds	r3, #4
   2e6d8:	681b      	ldr	r3, [r3, #0]
   2e6da:	2b00      	cmp	r3, #0
   2e6dc:	d038      	beq.n	2e750 <deliverMessage+0x9c>
   2e6de:	68fa      	ldr	r2, [r7, #12]
   2e6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e6e2:	3304      	adds	r3, #4
   2e6e4:	00db      	lsls	r3, r3, #3
   2e6e6:	18d3      	adds	r3, r2, r3
   2e6e8:	3304      	adds	r3, #4
   2e6ea:	681a      	ldr	r2, [r3, #0]
   2e6ec:	68bb      	ldr	r3, [r7, #8]
   2e6ee:	0011      	movs	r1, r2
   2e6f0:	0018      	movs	r0, r3
   2e6f2:	4b28      	ldr	r3, [pc, #160]	; (2e794 <deliverMessage+0xe0>)
   2e6f4:	4798      	blx	r3
   2e6f6:	1e03      	subs	r3, r0, #0
   2e6f8:	d10d      	bne.n	2e716 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2e6fa:	68fa      	ldr	r2, [r7, #12]
   2e6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e6fe:	3304      	adds	r3, #4
   2e700:	00db      	lsls	r3, r3, #3
   2e702:	18d3      	adds	r3, r2, r3
   2e704:	3304      	adds	r3, #4
   2e706:	681b      	ldr	r3, [r3, #0]
   2e708:	68ba      	ldr	r2, [r7, #8]
   2e70a:	0011      	movs	r1, r2
   2e70c:	0018      	movs	r0, r3
   2e70e:	4b22      	ldr	r3, [pc, #136]	; (2e798 <deliverMessage+0xe4>)
   2e710:	4798      	blx	r3
   2e712:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2e714:	d01c      	beq.n	2e750 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2e716:	68fa      	ldr	r2, [r7, #12]
   2e718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e71a:	3304      	adds	r3, #4
   2e71c:	00db      	lsls	r3, r3, #3
   2e71e:	18d3      	adds	r3, r2, r3
   2e720:	3308      	adds	r3, #8
   2e722:	681b      	ldr	r3, [r3, #0]
   2e724:	2b00      	cmp	r3, #0
   2e726:	d013      	beq.n	2e750 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2e728:	687a      	ldr	r2, [r7, #4]
   2e72a:	68b9      	ldr	r1, [r7, #8]
   2e72c:	2318      	movs	r3, #24
   2e72e:	18fb      	adds	r3, r7, r3
   2e730:	0018      	movs	r0, r3
   2e732:	4b1a      	ldr	r3, [pc, #104]	; (2e79c <deliverMessage+0xe8>)
   2e734:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2e736:	68fa      	ldr	r2, [r7, #12]
   2e738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e73a:	3304      	adds	r3, #4
   2e73c:	00db      	lsls	r3, r3, #3
   2e73e:	18d3      	adds	r3, r2, r3
   2e740:	3308      	adds	r3, #8
   2e742:	681b      	ldr	r3, [r3, #0]
   2e744:	2218      	movs	r2, #24
   2e746:	18ba      	adds	r2, r7, r2
   2e748:	0010      	movs	r0, r2
   2e74a:	4798      	blx	r3
                rc = SUCCESS;
   2e74c:	2300      	movs	r3, #0
   2e74e:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e752:	3301      	adds	r3, #1
   2e754:	627b      	str	r3, [r7, #36]	; 0x24
   2e756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e758:	2b04      	cmp	r3, #4
   2e75a:	ddb7      	ble.n	2e6cc <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2e75c:	6a3b      	ldr	r3, [r7, #32]
   2e75e:	3301      	adds	r3, #1
   2e760:	d112      	bne.n	2e788 <deliverMessage+0xd4>
   2e762:	68fb      	ldr	r3, [r7, #12]
   2e764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e766:	2b00      	cmp	r3, #0
   2e768:	d00e      	beq.n	2e788 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2e76a:	687a      	ldr	r2, [r7, #4]
   2e76c:	68b9      	ldr	r1, [r7, #8]
   2e76e:	2310      	movs	r3, #16
   2e770:	18fb      	adds	r3, r7, r3
   2e772:	0018      	movs	r0, r3
   2e774:	4b09      	ldr	r3, [pc, #36]	; (2e79c <deliverMessage+0xe8>)
   2e776:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2e778:	68fb      	ldr	r3, [r7, #12]
   2e77a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e77c:	2210      	movs	r2, #16
   2e77e:	18ba      	adds	r2, r7, r2
   2e780:	0010      	movs	r0, r2
   2e782:	4798      	blx	r3
        rc = SUCCESS;
   2e784:	2300      	movs	r3, #0
   2e786:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2e788:	6a3b      	ldr	r3, [r7, #32]
}
   2e78a:	0018      	movs	r0, r3
   2e78c:	46bd      	mov	sp, r7
   2e78e:	b00a      	add	sp, #40	; 0x28
   2e790:	bd80      	pop	{r7, pc}
   2e792:	46c0      	nop			; (mov r8, r8)
   2e794:	00030389 	.word	0x00030389
   2e798:	0002e5e5 	.word	0x0002e5e5
   2e79c:	0002e2ed 	.word	0x0002e2ed

0002e7a0 <keepalive>:


int keepalive(MQTTClient* c)
{
   2e7a0:	b580      	push	{r7, lr}
   2e7a2:	b088      	sub	sp, #32
   2e7a4:	af00      	add	r7, sp, #0
   2e7a6:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2e7a8:	2301      	movs	r3, #1
   2e7aa:	425b      	negs	r3, r3
   2e7ac:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2e7ae:	687b      	ldr	r3, [r7, #4]
   2e7b0:	699b      	ldr	r3, [r3, #24]
   2e7b2:	2b00      	cmp	r3, #0
   2e7b4:	d102      	bne.n	2e7bc <keepalive+0x1c>
    {
        rc = SUCCESS;
   2e7b6:	2300      	movs	r3, #0
   2e7b8:	61fb      	str	r3, [r7, #28]
        goto exit;
   2e7ba:	e033      	b.n	2e824 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2e7bc:	687b      	ldr	r3, [r7, #4]
   2e7be:	3354      	adds	r3, #84	; 0x54
   2e7c0:	0018      	movs	r0, r3
   2e7c2:	4b1b      	ldr	r3, [pc, #108]	; (2e830 <keepalive+0x90>)
   2e7c4:	4798      	blx	r3
   2e7c6:	1e03      	subs	r3, r0, #0
   2e7c8:	d02c      	beq.n	2e824 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2e7ca:	687b      	ldr	r3, [r7, #4]
   2e7cc:	7f1b      	ldrb	r3, [r3, #28]
   2e7ce:	2b00      	cmp	r3, #0
   2e7d0:	d128      	bne.n	2e824 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2e7d2:	230c      	movs	r3, #12
   2e7d4:	18fb      	adds	r3, r7, r3
   2e7d6:	0018      	movs	r0, r3
   2e7d8:	4b16      	ldr	r3, [pc, #88]	; (2e834 <keepalive+0x94>)
   2e7da:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2e7dc:	23fa      	movs	r3, #250	; 0xfa
   2e7de:	009a      	lsls	r2, r3, #2
   2e7e0:	230c      	movs	r3, #12
   2e7e2:	18fb      	adds	r3, r7, r3
   2e7e4:	0011      	movs	r1, r2
   2e7e6:	0018      	movs	r0, r3
   2e7e8:	4b13      	ldr	r3, [pc, #76]	; (2e838 <keepalive+0x98>)
   2e7ea:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2e7ec:	687b      	ldr	r3, [r7, #4]
   2e7ee:	691a      	ldr	r2, [r3, #16]
   2e7f0:	687b      	ldr	r3, [r7, #4]
   2e7f2:	689b      	ldr	r3, [r3, #8]
   2e7f4:	0019      	movs	r1, r3
   2e7f6:	0010      	movs	r0, r2
   2e7f8:	4b10      	ldr	r3, [pc, #64]	; (2e83c <keepalive+0x9c>)
   2e7fa:	4798      	blx	r3
   2e7fc:	0003      	movs	r3, r0
   2e7fe:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2e800:	69bb      	ldr	r3, [r7, #24]
   2e802:	2b00      	cmp	r3, #0
   2e804:	dd0e      	ble.n	2e824 <keepalive+0x84>
   2e806:	230c      	movs	r3, #12
   2e808:	18fa      	adds	r2, r7, r3
   2e80a:	69b9      	ldr	r1, [r7, #24]
   2e80c:	687b      	ldr	r3, [r7, #4]
   2e80e:	0018      	movs	r0, r3
   2e810:	4b0b      	ldr	r3, [pc, #44]	; (2e840 <keepalive+0xa0>)
   2e812:	4798      	blx	r3
   2e814:	0003      	movs	r3, r0
   2e816:	61fb      	str	r3, [r7, #28]
   2e818:	69fb      	ldr	r3, [r7, #28]
   2e81a:	2b00      	cmp	r3, #0
   2e81c:	d102      	bne.n	2e824 <keepalive+0x84>
                c->ping_outstanding = 1;
   2e81e:	687b      	ldr	r3, [r7, #4]
   2e820:	2201      	movs	r2, #1
   2e822:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2e824:	69fb      	ldr	r3, [r7, #28]
}
   2e826:	0018      	movs	r0, r3
   2e828:	46bd      	mov	sp, r7
   2e82a:	b008      	add	sp, #32
   2e82c:	bd80      	pop	{r7, pc}
   2e82e:	46c0      	nop			; (mov r8, r8)
   2e830:	0002f121 	.word	0x0002f121
   2e834:	0002f1c5 	.word	0x0002f1c5
   2e838:	0002f14d 	.word	0x0002f14d
   2e83c:	0002fd99 	.word	0x0002fd99
   2e840:	0002e33d 	.word	0x0002e33d

0002e844 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2e844:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e846:	b095      	sub	sp, #84	; 0x54
   2e848:	af06      	add	r7, sp, #24
   2e84a:	6078      	str	r0, [r7, #4]
   2e84c:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2e84e:	683a      	ldr	r2, [r7, #0]
   2e850:	687b      	ldr	r3, [r7, #4]
   2e852:	0011      	movs	r1, r2
   2e854:	0018      	movs	r0, r3
   2e856:	4b70      	ldr	r3, [pc, #448]	; (2ea18 <cycle+0x1d4>)
   2e858:	4798      	blx	r3
   2e85a:	0002      	movs	r2, r0
   2e85c:	232e      	movs	r3, #46	; 0x2e
   2e85e:	18fb      	adds	r3, r7, r3
   2e860:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2e862:	2300      	movs	r3, #0
   2e864:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2e866:	2300      	movs	r3, #0
   2e868:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2e86a:	232e      	movs	r3, #46	; 0x2e
   2e86c:	18fb      	adds	r3, r7, r3
   2e86e:	881b      	ldrh	r3, [r3, #0]
   2e870:	2b0d      	cmp	r3, #13
   2e872:	d900      	bls.n	2e876 <cycle+0x32>
   2e874:	e0bd      	b.n	2e9f2 <cycle+0x1ae>
   2e876:	009a      	lsls	r2, r3, #2
   2e878:	4b68      	ldr	r3, [pc, #416]	; (2ea1c <cycle+0x1d8>)
   2e87a:	18d3      	adds	r3, r2, r3
   2e87c:	681b      	ldr	r3, [r3, #0]
   2e87e:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2e880:	687b      	ldr	r3, [r7, #4]
   2e882:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2e884:	687b      	ldr	r3, [r7, #4]
   2e886:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2e888:	001e      	movs	r6, r3
   2e88a:	2310      	movs	r3, #16
   2e88c:	18fb      	adds	r3, r7, r3
   2e88e:	1d1d      	adds	r5, r3, #4
   2e890:	2310      	movs	r3, #16
   2e892:	18fb      	adds	r3, r7, r3
   2e894:	1c5c      	adds	r4, r3, #1
   2e896:	230c      	movs	r3, #12
   2e898:	18f9      	adds	r1, r7, r3
   2e89a:	2310      	movs	r3, #16
   2e89c:	18fb      	adds	r3, r7, r3
   2e89e:	1c98      	adds	r0, r3, #2
   2e8a0:	9604      	str	r6, [sp, #16]
   2e8a2:	9203      	str	r2, [sp, #12]
   2e8a4:	2310      	movs	r3, #16
   2e8a6:	18fb      	adds	r3, r7, r3
   2e8a8:	330c      	adds	r3, #12
   2e8aa:	9302      	str	r3, [sp, #8]
   2e8ac:	2310      	movs	r3, #16
   2e8ae:	18fb      	adds	r3, r7, r3
   2e8b0:	3308      	adds	r3, #8
   2e8b2:	9301      	str	r3, [sp, #4]
   2e8b4:	2320      	movs	r3, #32
   2e8b6:	18fb      	adds	r3, r7, r3
   2e8b8:	9300      	str	r3, [sp, #0]
   2e8ba:	002b      	movs	r3, r5
   2e8bc:	0022      	movs	r2, r4
   2e8be:	4c58      	ldr	r4, [pc, #352]	; (2ea20 <cycle+0x1dc>)
   2e8c0:	47a0      	blx	r4
   2e8c2:	0003      	movs	r3, r0
   2e8c4:	2b01      	cmp	r3, #1
   2e8c6:	d000      	beq.n	2e8ca <cycle+0x86>
   2e8c8:	e098      	b.n	2e9fc <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2e8ca:	68fb      	ldr	r3, [r7, #12]
   2e8cc:	b2da      	uxtb	r2, r3
   2e8ce:	2310      	movs	r3, #16
   2e8d0:	18fb      	adds	r3, r7, r3
   2e8d2:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2e8d4:	2310      	movs	r3, #16
   2e8d6:	18fa      	adds	r2, r7, r3
   2e8d8:	2320      	movs	r3, #32
   2e8da:	18f9      	adds	r1, r7, r3
   2e8dc:	687b      	ldr	r3, [r7, #4]
   2e8de:	0018      	movs	r0, r3
   2e8e0:	4b50      	ldr	r3, [pc, #320]	; (2ea24 <cycle+0x1e0>)
   2e8e2:	4798      	blx	r3
            if (msg.qos != QOS0)
   2e8e4:	2310      	movs	r3, #16
   2e8e6:	18fb      	adds	r3, r7, r3
   2e8e8:	781b      	ldrb	r3, [r3, #0]
   2e8ea:	2b00      	cmp	r3, #0
   2e8ec:	d100      	bne.n	2e8f0 <cycle+0xac>
   2e8ee:	e07d      	b.n	2e9ec <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2e8f0:	2310      	movs	r3, #16
   2e8f2:	18fb      	adds	r3, r7, r3
   2e8f4:	781b      	ldrb	r3, [r3, #0]
   2e8f6:	2b01      	cmp	r3, #1
   2e8f8:	d10f      	bne.n	2e91a <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2e8fa:	687b      	ldr	r3, [r7, #4]
   2e8fc:	6918      	ldr	r0, [r3, #16]
   2e8fe:	687b      	ldr	r3, [r7, #4]
   2e900:	689b      	ldr	r3, [r3, #8]
   2e902:	0019      	movs	r1, r3
   2e904:	2310      	movs	r3, #16
   2e906:	18fb      	adds	r3, r7, r3
   2e908:	889b      	ldrh	r3, [r3, #4]
   2e90a:	9300      	str	r3, [sp, #0]
   2e90c:	2300      	movs	r3, #0
   2e90e:	2204      	movs	r2, #4
   2e910:	4c45      	ldr	r4, [pc, #276]	; (2ea28 <cycle+0x1e4>)
   2e912:	47a0      	blx	r4
   2e914:	0003      	movs	r3, r0
   2e916:	637b      	str	r3, [r7, #52]	; 0x34
   2e918:	e013      	b.n	2e942 <cycle+0xfe>
                else if (msg.qos == QOS2)
   2e91a:	2310      	movs	r3, #16
   2e91c:	18fb      	adds	r3, r7, r3
   2e91e:	781b      	ldrb	r3, [r3, #0]
   2e920:	2b02      	cmp	r3, #2
   2e922:	d10e      	bne.n	2e942 <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2e924:	687b      	ldr	r3, [r7, #4]
   2e926:	6918      	ldr	r0, [r3, #16]
   2e928:	687b      	ldr	r3, [r7, #4]
   2e92a:	689b      	ldr	r3, [r3, #8]
   2e92c:	0019      	movs	r1, r3
   2e92e:	2310      	movs	r3, #16
   2e930:	18fb      	adds	r3, r7, r3
   2e932:	889b      	ldrh	r3, [r3, #4]
   2e934:	9300      	str	r3, [sp, #0]
   2e936:	2300      	movs	r3, #0
   2e938:	2205      	movs	r2, #5
   2e93a:	4c3b      	ldr	r4, [pc, #236]	; (2ea28 <cycle+0x1e4>)
   2e93c:	47a0      	blx	r4
   2e93e:	0003      	movs	r3, r0
   2e940:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2e942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e944:	2b00      	cmp	r3, #0
   2e946:	dc03      	bgt.n	2e950 <cycle+0x10c>
                    rc = FAILURE;
   2e948:	2301      	movs	r3, #1
   2e94a:	425b      	negs	r3, r3
   2e94c:	633b      	str	r3, [r7, #48]	; 0x30
   2e94e:	e007      	b.n	2e960 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2e950:	683a      	ldr	r2, [r7, #0]
   2e952:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2e954:	687b      	ldr	r3, [r7, #4]
   2e956:	0018      	movs	r0, r3
   2e958:	4b34      	ldr	r3, [pc, #208]	; (2ea2c <cycle+0x1e8>)
   2e95a:	4798      	blx	r3
   2e95c:	0003      	movs	r3, r0
   2e95e:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2e960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e962:	3301      	adds	r3, #1
   2e964:	d142      	bne.n	2e9ec <cycle+0x1a8>
                    goto exit; // there was a problem
   2e966:	46c0      	nop			; (mov r8, r8)
   2e968:	e049      	b.n	2e9fe <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2e96a:	687b      	ldr	r3, [r7, #4]
   2e96c:	695c      	ldr	r4, [r3, #20]
   2e96e:	687b      	ldr	r3, [r7, #4]
   2e970:	68db      	ldr	r3, [r3, #12]
   2e972:	220a      	movs	r2, #10
   2e974:	18ba      	adds	r2, r7, r2
   2e976:	2109      	movs	r1, #9
   2e978:	1879      	adds	r1, r7, r1
   2e97a:	2008      	movs	r0, #8
   2e97c:	1838      	adds	r0, r7, r0
   2e97e:	9300      	str	r3, [sp, #0]
   2e980:	0023      	movs	r3, r4
   2e982:	4c2b      	ldr	r4, [pc, #172]	; (2ea30 <cycle+0x1ec>)
   2e984:	47a0      	blx	r4
   2e986:	0003      	movs	r3, r0
   2e988:	2b01      	cmp	r3, #1
   2e98a:	d003      	beq.n	2e994 <cycle+0x150>
                rc = FAILURE;
   2e98c:	2301      	movs	r3, #1
   2e98e:	425b      	negs	r3, r3
   2e990:	633b      	str	r3, [r7, #48]	; 0x30
   2e992:	e023      	b.n	2e9dc <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2e994:	687b      	ldr	r3, [r7, #4]
   2e996:	6918      	ldr	r0, [r3, #16]
   2e998:	687b      	ldr	r3, [r7, #4]
   2e99a:	689b      	ldr	r3, [r3, #8]
   2e99c:	0019      	movs	r1, r3
   2e99e:	230a      	movs	r3, #10
   2e9a0:	18fb      	adds	r3, r7, r3
   2e9a2:	881b      	ldrh	r3, [r3, #0]
   2e9a4:	9300      	str	r3, [sp, #0]
   2e9a6:	2300      	movs	r3, #0
   2e9a8:	2206      	movs	r2, #6
   2e9aa:	4c1f      	ldr	r4, [pc, #124]	; (2ea28 <cycle+0x1e4>)
   2e9ac:	47a0      	blx	r4
   2e9ae:	0003      	movs	r3, r0
   2e9b0:	637b      	str	r3, [r7, #52]	; 0x34
   2e9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e9b4:	2b00      	cmp	r3, #0
   2e9b6:	dc03      	bgt.n	2e9c0 <cycle+0x17c>
                rc = FAILURE;
   2e9b8:	2301      	movs	r3, #1
   2e9ba:	425b      	negs	r3, r3
   2e9bc:	633b      	str	r3, [r7, #48]	; 0x30
   2e9be:	e00d      	b.n	2e9dc <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2e9c0:	683a      	ldr	r2, [r7, #0]
   2e9c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2e9c4:	687b      	ldr	r3, [r7, #4]
   2e9c6:	0018      	movs	r0, r3
   2e9c8:	4b18      	ldr	r3, [pc, #96]	; (2ea2c <cycle+0x1e8>)
   2e9ca:	4798      	blx	r3
   2e9cc:	0003      	movs	r3, r0
   2e9ce:	633b      	str	r3, [r7, #48]	; 0x30
   2e9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e9d2:	2b00      	cmp	r3, #0
   2e9d4:	d002      	beq.n	2e9dc <cycle+0x198>
                rc = FAILURE; // there was a problem
   2e9d6:	2301      	movs	r3, #1
   2e9d8:	425b      	negs	r3, r3
   2e9da:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2e9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e9de:	3301      	adds	r3, #1
   2e9e0:	d106      	bne.n	2e9f0 <cycle+0x1ac>
                goto exit; // there was a problem
   2e9e2:	e00c      	b.n	2e9fe <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2e9e4:	687b      	ldr	r3, [r7, #4]
   2e9e6:	2200      	movs	r2, #0
   2e9e8:	771a      	strb	r2, [r3, #28]
            break;
   2e9ea:	e002      	b.n	2e9f2 <cycle+0x1ae>
            break;
   2e9ec:	46c0      	nop			; (mov r8, r8)
   2e9ee:	e000      	b.n	2e9f2 <cycle+0x1ae>
            break;
   2e9f0:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2e9f2:	687b      	ldr	r3, [r7, #4]
   2e9f4:	0018      	movs	r0, r3
   2e9f6:	4b0f      	ldr	r3, [pc, #60]	; (2ea34 <cycle+0x1f0>)
   2e9f8:	4798      	blx	r3
   2e9fa:	e000      	b.n	2e9fe <cycle+0x1ba>
                goto exit;
   2e9fc:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2e9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ea00:	2b00      	cmp	r3, #0
   2ea02:	d103      	bne.n	2ea0c <cycle+0x1c8>
        rc = packet_type;
   2ea04:	232e      	movs	r3, #46	; 0x2e
   2ea06:	18fb      	adds	r3, r7, r3
   2ea08:	881b      	ldrh	r3, [r3, #0]
   2ea0a:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2ea0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2ea0e:	0018      	movs	r0, r3
   2ea10:	46bd      	mov	sp, r7
   2ea12:	b00f      	add	sp, #60	; 0x3c
   2ea14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ea16:	46c0      	nop			; (mov r8, r8)
   2ea18:	0002e4f9 	.word	0x0002e4f9
   2ea1c:	00039b1c 	.word	0x00039b1c
   2ea20:	0002fdbd 	.word	0x0002fdbd
   2ea24:	0002e6b5 	.word	0x0002e6b5
   2ea28:	000305b5 	.word	0x000305b5
   2ea2c:	0002e33d 	.word	0x0002e33d
   2ea30:	0002fec1 	.word	0x0002fec1
   2ea34:	0002e7a1 	.word	0x0002e7a1

0002ea38 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2ea38:	b580      	push	{r7, lr}
   2ea3a:	b086      	sub	sp, #24
   2ea3c:	af00      	add	r7, sp, #0
   2ea3e:	6078      	str	r0, [r7, #4]
   2ea40:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2ea42:	2300      	movs	r3, #0
   2ea44:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2ea46:	2308      	movs	r3, #8
   2ea48:	18fb      	adds	r3, r7, r3
   2ea4a:	0018      	movs	r0, r3
   2ea4c:	4b11      	ldr	r3, [pc, #68]	; (2ea94 <MQTTYield+0x5c>)
   2ea4e:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2ea50:	683a      	ldr	r2, [r7, #0]
   2ea52:	2308      	movs	r3, #8
   2ea54:	18fb      	adds	r3, r7, r3
   2ea56:	0011      	movs	r1, r2
   2ea58:	0018      	movs	r0, r3
   2ea5a:	4b0f      	ldr	r3, [pc, #60]	; (2ea98 <MQTTYield+0x60>)
   2ea5c:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2ea5e:	2308      	movs	r3, #8
   2ea60:	18fa      	adds	r2, r7, r3
   2ea62:	687b      	ldr	r3, [r7, #4]
   2ea64:	0011      	movs	r1, r2
   2ea66:	0018      	movs	r0, r3
   2ea68:	4b0c      	ldr	r3, [pc, #48]	; (2ea9c <MQTTYield+0x64>)
   2ea6a:	4798      	blx	r3
   2ea6c:	0003      	movs	r3, r0
   2ea6e:	3301      	adds	r3, #1
   2ea70:	d103      	bne.n	2ea7a <MQTTYield+0x42>
        {
            rc = FAILURE;
   2ea72:	2301      	movs	r3, #1
   2ea74:	425b      	negs	r3, r3
   2ea76:	617b      	str	r3, [r7, #20]
            break;
   2ea78:	e006      	b.n	2ea88 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2ea7a:	2308      	movs	r3, #8
   2ea7c:	18fb      	adds	r3, r7, r3
   2ea7e:	0018      	movs	r0, r3
   2ea80:	4b07      	ldr	r3, [pc, #28]	; (2eaa0 <MQTTYield+0x68>)
   2ea82:	4798      	blx	r3
   2ea84:	1e03      	subs	r3, r0, #0
   2ea86:	d0ea      	beq.n	2ea5e <MQTTYield+0x26>
        
    return rc;
   2ea88:	697b      	ldr	r3, [r7, #20]
}
   2ea8a:	0018      	movs	r0, r3
   2ea8c:	46bd      	mov	sp, r7
   2ea8e:	b006      	add	sp, #24
   2ea90:	bd80      	pop	{r7, pc}
   2ea92:	46c0      	nop			; (mov r8, r8)
   2ea94:	0002f1c5 	.word	0x0002f1c5
   2ea98:	0002f14d 	.word	0x0002f14d
   2ea9c:	0002e845 	.word	0x0002e845
   2eaa0:	0002f121 	.word	0x0002f121

0002eaa4 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2eaa4:	b580      	push	{r7, lr}
   2eaa6:	b086      	sub	sp, #24
   2eaa8:	af00      	add	r7, sp, #0
   2eaaa:	60f8      	str	r0, [r7, #12]
   2eaac:	60b9      	str	r1, [r7, #8]
   2eaae:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2eab0:	2301      	movs	r3, #1
   2eab2:	425b      	negs	r3, r3
   2eab4:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2eab6:	687b      	ldr	r3, [r7, #4]
   2eab8:	0018      	movs	r0, r3
   2eaba:	4b0b      	ldr	r3, [pc, #44]	; (2eae8 <waitfor+0x44>)
   2eabc:	4798      	blx	r3
   2eabe:	1e03      	subs	r3, r0, #0
   2eac0:	d10c      	bne.n	2eadc <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2eac2:	687a      	ldr	r2, [r7, #4]
   2eac4:	68fb      	ldr	r3, [r7, #12]
   2eac6:	0011      	movs	r1, r2
   2eac8:	0018      	movs	r0, r3
   2eaca:	4b08      	ldr	r3, [pc, #32]	; (2eaec <waitfor+0x48>)
   2eacc:	4798      	blx	r3
   2eace:	0003      	movs	r3, r0
   2ead0:	617b      	str	r3, [r7, #20]
   2ead2:	697a      	ldr	r2, [r7, #20]
   2ead4:	68bb      	ldr	r3, [r7, #8]
   2ead6:	429a      	cmp	r2, r3
   2ead8:	d1ed      	bne.n	2eab6 <waitfor+0x12>
   2eada:	e000      	b.n	2eade <waitfor+0x3a>
            break; // we timed out
   2eadc:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2eade:	697b      	ldr	r3, [r7, #20]
}
   2eae0:	0018      	movs	r0, r3
   2eae2:	46bd      	mov	sp, r7
   2eae4:	b006      	add	sp, #24
   2eae6:	bd80      	pop	{r7, pc}
   2eae8:	0002f121 	.word	0x0002f121
   2eaec:	0002e845 	.word	0x0002e845

0002eaf0 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2eaf0:	b590      	push	{r4, r7, lr}
   2eaf2:	b09f      	sub	sp, #124	; 0x7c
   2eaf4:	af00      	add	r7, sp, #0
   2eaf6:	6078      	str	r0, [r7, #4]
   2eaf8:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2eafa:	2301      	movs	r3, #1
   2eafc:	425b      	negs	r3, r3
   2eafe:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2eb00:	230c      	movs	r3, #12
   2eb02:	18fa      	adds	r2, r7, r3
   2eb04:	4b41      	ldr	r3, [pc, #260]	; (2ec0c <MQTTConnect+0x11c>)
   2eb06:	0010      	movs	r0, r2
   2eb08:	0019      	movs	r1, r3
   2eb0a:	2358      	movs	r3, #88	; 0x58
   2eb0c:	001a      	movs	r2, r3
   2eb0e:	4b40      	ldr	r3, [pc, #256]	; (2ec10 <MQTTConnect+0x120>)
   2eb10:	4798      	blx	r3
    int len = 0;
   2eb12:	2300      	movs	r3, #0
   2eb14:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2eb16:	687b      	ldr	r3, [r7, #4]
   2eb18:	6a1b      	ldr	r3, [r3, #32]
   2eb1a:	2b00      	cmp	r3, #0
   2eb1c:	d166      	bne.n	2ebec <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2eb1e:	2364      	movs	r3, #100	; 0x64
   2eb20:	18fb      	adds	r3, r7, r3
   2eb22:	0018      	movs	r0, r3
   2eb24:	4b3b      	ldr	r3, [pc, #236]	; (2ec14 <MQTTConnect+0x124>)
   2eb26:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2eb28:	687b      	ldr	r3, [r7, #4]
   2eb2a:	685a      	ldr	r2, [r3, #4]
   2eb2c:	2364      	movs	r3, #100	; 0x64
   2eb2e:	18fb      	adds	r3, r7, r3
   2eb30:	0011      	movs	r1, r2
   2eb32:	0018      	movs	r0, r3
   2eb34:	4b38      	ldr	r3, [pc, #224]	; (2ec18 <MQTTConnect+0x128>)
   2eb36:	4798      	blx	r3

    if (options == 0)
   2eb38:	683b      	ldr	r3, [r7, #0]
   2eb3a:	2b00      	cmp	r3, #0
   2eb3c:	d102      	bne.n	2eb44 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2eb3e:	230c      	movs	r3, #12
   2eb40:	18fb      	adds	r3, r7, r3
   2eb42:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2eb44:	683b      	ldr	r3, [r7, #0]
   2eb46:	8b1b      	ldrh	r3, [r3, #24]
   2eb48:	001a      	movs	r2, r3
   2eb4a:	687b      	ldr	r3, [r7, #4]
   2eb4c:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2eb4e:	687b      	ldr	r3, [r7, #4]
   2eb50:	3354      	adds	r3, #84	; 0x54
   2eb52:	001a      	movs	r2, r3
   2eb54:	687b      	ldr	r3, [r7, #4]
   2eb56:	699b      	ldr	r3, [r3, #24]
   2eb58:	0019      	movs	r1, r3
   2eb5a:	0010      	movs	r0, r2
   2eb5c:	4b2f      	ldr	r3, [pc, #188]	; (2ec1c <MQTTConnect+0x12c>)
   2eb5e:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2eb60:	687b      	ldr	r3, [r7, #4]
   2eb62:	6918      	ldr	r0, [r3, #16]
   2eb64:	687b      	ldr	r3, [r7, #4]
   2eb66:	689b      	ldr	r3, [r3, #8]
   2eb68:	0019      	movs	r1, r3
   2eb6a:	683b      	ldr	r3, [r7, #0]
   2eb6c:	001a      	movs	r2, r3
   2eb6e:	4b2c      	ldr	r3, [pc, #176]	; (2ec20 <MQTTConnect+0x130>)
   2eb70:	4798      	blx	r3
   2eb72:	0003      	movs	r3, r0
   2eb74:	673b      	str	r3, [r7, #112]	; 0x70
   2eb76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2eb78:	2b00      	cmp	r3, #0
   2eb7a:	dd39      	ble.n	2ebf0 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2eb7c:	2364      	movs	r3, #100	; 0x64
   2eb7e:	18fa      	adds	r2, r7, r3
   2eb80:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2eb82:	687b      	ldr	r3, [r7, #4]
   2eb84:	0018      	movs	r0, r3
   2eb86:	4b27      	ldr	r3, [pc, #156]	; (2ec24 <MQTTConnect+0x134>)
   2eb88:	4798      	blx	r3
   2eb8a:	0003      	movs	r3, r0
   2eb8c:	677b      	str	r3, [r7, #116]	; 0x74
   2eb8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2eb90:	2b00      	cmp	r3, #0
   2eb92:	d12f      	bne.n	2ebf4 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2eb94:	2364      	movs	r3, #100	; 0x64
   2eb96:	18fa      	adds	r2, r7, r3
   2eb98:	687b      	ldr	r3, [r7, #4]
   2eb9a:	2102      	movs	r1, #2
   2eb9c:	0018      	movs	r0, r3
   2eb9e:	4b22      	ldr	r3, [pc, #136]	; (2ec28 <MQTTConnect+0x138>)
   2eba0:	4798      	blx	r3
   2eba2:	0003      	movs	r3, r0
   2eba4:	2b02      	cmp	r3, #2
   2eba6:	d11d      	bne.n	2ebe4 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2eba8:	230b      	movs	r3, #11
   2ebaa:	18fb      	adds	r3, r7, r3
   2ebac:	22ff      	movs	r2, #255	; 0xff
   2ebae:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2ebb0:	230a      	movs	r3, #10
   2ebb2:	18fb      	adds	r3, r7, r3
   2ebb4:	2200      	movs	r2, #0
   2ebb6:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2ebb8:	687b      	ldr	r3, [r7, #4]
   2ebba:	695a      	ldr	r2, [r3, #20]
   2ebbc:	687b      	ldr	r3, [r7, #4]
   2ebbe:	68db      	ldr	r3, [r3, #12]
   2ebc0:	210b      	movs	r1, #11
   2ebc2:	1879      	adds	r1, r7, r1
   2ebc4:	200a      	movs	r0, #10
   2ebc6:	1838      	adds	r0, r7, r0
   2ebc8:	4c18      	ldr	r4, [pc, #96]	; (2ec2c <MQTTConnect+0x13c>)
   2ebca:	47a0      	blx	r4
   2ebcc:	0003      	movs	r3, r0
   2ebce:	2b01      	cmp	r3, #1
   2ebd0:	d104      	bne.n	2ebdc <MQTTConnect+0xec>
            rc = connack_rc;
   2ebd2:	230b      	movs	r3, #11
   2ebd4:	18fb      	adds	r3, r7, r3
   2ebd6:	781b      	ldrb	r3, [r3, #0]
   2ebd8:	677b      	str	r3, [r7, #116]	; 0x74
   2ebda:	e00c      	b.n	2ebf6 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2ebdc:	2301      	movs	r3, #1
   2ebde:	425b      	negs	r3, r3
   2ebe0:	677b      	str	r3, [r7, #116]	; 0x74
   2ebe2:	e008      	b.n	2ebf6 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2ebe4:	2301      	movs	r3, #1
   2ebe6:	425b      	negs	r3, r3
   2ebe8:	677b      	str	r3, [r7, #116]	; 0x74
   2ebea:	e004      	b.n	2ebf6 <MQTTConnect+0x106>
		goto exit;
   2ebec:	46c0      	nop			; (mov r8, r8)
   2ebee:	e002      	b.n	2ebf6 <MQTTConnect+0x106>
        goto exit;
   2ebf0:	46c0      	nop			; (mov r8, r8)
   2ebf2:	e000      	b.n	2ebf6 <MQTTConnect+0x106>
        goto exit; // there was a problem
   2ebf4:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2ebf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2ebf8:	2b00      	cmp	r3, #0
   2ebfa:	d102      	bne.n	2ec02 <MQTTConnect+0x112>
        c->isconnected = 1;
   2ebfc:	687b      	ldr	r3, [r7, #4]
   2ebfe:	2201      	movs	r2, #1
   2ec00:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2ec02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2ec04:	0018      	movs	r0, r3
   2ec06:	46bd      	mov	sp, r7
   2ec08:	b01f      	add	sp, #124	; 0x7c
   2ec0a:	bd90      	pop	{r4, r7, pc}
   2ec0c:	00039b54 	.word	0x00039b54
   2ec10:	0003484d 	.word	0x0003484d
   2ec14:	0002f1c5 	.word	0x0002f1c5
   2ec18:	0002f14d 	.word	0x0002f14d
   2ec1c:	0002f175 	.word	0x0002f175
   2ec20:	0002f9a1 	.word	0x0002f9a1
   2ec24:	0002e33d 	.word	0x0002e33d
   2ec28:	0002eaa5 	.word	0x0002eaa5
   2ec2c:	0002fc1d 	.word	0x0002fc1d

0002ec30 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2ec30:	b5b0      	push	{r4, r5, r7, lr}
   2ec32:	b096      	sub	sp, #88	; 0x58
   2ec34:	af04      	add	r7, sp, #16
   2ec36:	60f8      	str	r0, [r7, #12]
   2ec38:	60b9      	str	r1, [r7, #8]
   2ec3a:	603b      	str	r3, [r7, #0]
   2ec3c:	1dfb      	adds	r3, r7, #7
   2ec3e:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2ec40:	2301      	movs	r3, #1
   2ec42:	425b      	negs	r3, r3
   2ec44:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2ec46:	2300      	movs	r3, #0
   2ec48:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2ec4a:	2324      	movs	r3, #36	; 0x24
   2ec4c:	18fb      	adds	r3, r7, r3
   2ec4e:	2200      	movs	r2, #0
   2ec50:	601a      	str	r2, [r3, #0]
   2ec52:	2324      	movs	r3, #36	; 0x24
   2ec54:	18fb      	adds	r3, r7, r3
   2ec56:	2200      	movs	r2, #0
   2ec58:	605a      	str	r2, [r3, #4]
   2ec5a:	2324      	movs	r3, #36	; 0x24
   2ec5c:	18fb      	adds	r3, r7, r3
   2ec5e:	2200      	movs	r2, #0
   2ec60:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2ec62:	1dfb      	adds	r3, r7, #7
   2ec64:	781b      	ldrb	r3, [r3, #0]
   2ec66:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2ec68:	2324      	movs	r3, #36	; 0x24
   2ec6a:	18fb      	adds	r3, r7, r3
   2ec6c:	68ba      	ldr	r2, [r7, #8]
   2ec6e:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2ec70:	68fb      	ldr	r3, [r7, #12]
   2ec72:	6a1b      	ldr	r3, [r3, #32]
   2ec74:	2b00      	cmp	r3, #0
   2ec76:	d100      	bne.n	2ec7a <MQTTSubscribe+0x4a>
   2ec78:	e088      	b.n	2ed8c <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2ec7a:	2330      	movs	r3, #48	; 0x30
   2ec7c:	18fb      	adds	r3, r7, r3
   2ec7e:	0018      	movs	r0, r3
   2ec80:	4b47      	ldr	r3, [pc, #284]	; (2eda0 <MQTTSubscribe+0x170>)
   2ec82:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2ec84:	68fb      	ldr	r3, [r7, #12]
   2ec86:	685a      	ldr	r2, [r3, #4]
   2ec88:	2330      	movs	r3, #48	; 0x30
   2ec8a:	18fb      	adds	r3, r7, r3
   2ec8c:	0011      	movs	r1, r2
   2ec8e:	0018      	movs	r0, r3
   2ec90:	4b44      	ldr	r3, [pc, #272]	; (2eda4 <MQTTSubscribe+0x174>)
   2ec92:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2ec94:	68fb      	ldr	r3, [r7, #12]
   2ec96:	691c      	ldr	r4, [r3, #16]
   2ec98:	68fb      	ldr	r3, [r7, #12]
   2ec9a:	689b      	ldr	r3, [r3, #8]
   2ec9c:	001d      	movs	r5, r3
   2ec9e:	68fb      	ldr	r3, [r7, #12]
   2eca0:	0018      	movs	r0, r3
   2eca2:	4b41      	ldr	r3, [pc, #260]	; (2eda8 <MQTTSubscribe+0x178>)
   2eca4:	4798      	blx	r3
   2eca6:	0003      	movs	r3, r0
   2eca8:	b29a      	uxth	r2, r3
   2ecaa:	2320      	movs	r3, #32
   2ecac:	18fb      	adds	r3, r7, r3
   2ecae:	9302      	str	r3, [sp, #8]
   2ecb0:	2324      	movs	r3, #36	; 0x24
   2ecb2:	18fb      	adds	r3, r7, r3
   2ecb4:	9301      	str	r3, [sp, #4]
   2ecb6:	2301      	movs	r3, #1
   2ecb8:	9300      	str	r3, [sp, #0]
   2ecba:	0013      	movs	r3, r2
   2ecbc:	2200      	movs	r2, #0
   2ecbe:	0029      	movs	r1, r5
   2ecc0:	0020      	movs	r0, r4
   2ecc2:	4c3a      	ldr	r4, [pc, #232]	; (2edac <MQTTSubscribe+0x17c>)
   2ecc4:	47a0      	blx	r4
   2ecc6:	0003      	movs	r3, r0
   2ecc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2ecca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2eccc:	2b00      	cmp	r3, #0
   2ecce:	dd5f      	ble.n	2ed90 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2ecd0:	2330      	movs	r3, #48	; 0x30
   2ecd2:	18fa      	adds	r2, r7, r3
   2ecd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2ecd6:	68fb      	ldr	r3, [r7, #12]
   2ecd8:	0018      	movs	r0, r3
   2ecda:	4b35      	ldr	r3, [pc, #212]	; (2edb0 <MQTTSubscribe+0x180>)
   2ecdc:	4798      	blx	r3
   2ecde:	0003      	movs	r3, r0
   2ece0:	647b      	str	r3, [r7, #68]	; 0x44
   2ece2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2ece4:	2b00      	cmp	r3, #0
   2ece6:	d155      	bne.n	2ed94 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2ece8:	2330      	movs	r3, #48	; 0x30
   2ecea:	18fa      	adds	r2, r7, r3
   2ecec:	68fb      	ldr	r3, [r7, #12]
   2ecee:	2109      	movs	r1, #9
   2ecf0:	0018      	movs	r0, r3
   2ecf2:	4b30      	ldr	r3, [pc, #192]	; (2edb4 <MQTTSubscribe+0x184>)
   2ecf4:	4798      	blx	r3
   2ecf6:	0003      	movs	r3, r0
   2ecf8:	2b09      	cmp	r3, #9
   2ecfa:	d143      	bne.n	2ed84 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2ecfc:	2300      	movs	r3, #0
   2ecfe:	61fb      	str	r3, [r7, #28]
   2ed00:	2301      	movs	r3, #1
   2ed02:	425b      	negs	r3, r3
   2ed04:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2ed06:	68fb      	ldr	r3, [r7, #12]
   2ed08:	695a      	ldr	r2, [r3, #20]
   2ed0a:	68fb      	ldr	r3, [r7, #12]
   2ed0c:	68db      	ldr	r3, [r3, #12]
   2ed0e:	001c      	movs	r4, r3
   2ed10:	2318      	movs	r3, #24
   2ed12:	18fb      	adds	r3, r7, r3
   2ed14:	211c      	movs	r1, #28
   2ed16:	1879      	adds	r1, r7, r1
   2ed18:	2016      	movs	r0, #22
   2ed1a:	1838      	adds	r0, r7, r0
   2ed1c:	9401      	str	r4, [sp, #4]
   2ed1e:	9200      	str	r2, [sp, #0]
   2ed20:	000a      	movs	r2, r1
   2ed22:	2101      	movs	r1, #1
   2ed24:	4c24      	ldr	r4, [pc, #144]	; (2edb8 <MQTTSubscribe+0x188>)
   2ed26:	47a0      	blx	r4
   2ed28:	0003      	movs	r3, r0
   2ed2a:	2b01      	cmp	r3, #1
   2ed2c:	d101      	bne.n	2ed32 <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2ed2e:	69bb      	ldr	r3, [r7, #24]
   2ed30:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2ed32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2ed34:	2b80      	cmp	r3, #128	; 0x80
   2ed36:	d02e      	beq.n	2ed96 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2ed38:	2300      	movs	r3, #0
   2ed3a:	643b      	str	r3, [r7, #64]	; 0x40
   2ed3c:	e01e      	b.n	2ed7c <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2ed3e:	68fa      	ldr	r2, [r7, #12]
   2ed40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ed42:	3304      	adds	r3, #4
   2ed44:	00db      	lsls	r3, r3, #3
   2ed46:	18d3      	adds	r3, r2, r3
   2ed48:	3304      	adds	r3, #4
   2ed4a:	681b      	ldr	r3, [r3, #0]
   2ed4c:	2b00      	cmp	r3, #0
   2ed4e:	d112      	bne.n	2ed76 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2ed50:	68fa      	ldr	r2, [r7, #12]
   2ed52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ed54:	3304      	adds	r3, #4
   2ed56:	00db      	lsls	r3, r3, #3
   2ed58:	18d3      	adds	r3, r2, r3
   2ed5a:	3304      	adds	r3, #4
   2ed5c:	68ba      	ldr	r2, [r7, #8]
   2ed5e:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2ed60:	68fa      	ldr	r2, [r7, #12]
   2ed62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ed64:	3304      	adds	r3, #4
   2ed66:	00db      	lsls	r3, r3, #3
   2ed68:	18d3      	adds	r3, r2, r3
   2ed6a:	3308      	adds	r3, #8
   2ed6c:	683a      	ldr	r2, [r7, #0]
   2ed6e:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2ed70:	2300      	movs	r3, #0
   2ed72:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2ed74:	e00f      	b.n	2ed96 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2ed76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ed78:	3301      	adds	r3, #1
   2ed7a:	643b      	str	r3, [r7, #64]	; 0x40
   2ed7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ed7e:	2b04      	cmp	r3, #4
   2ed80:	dddd      	ble.n	2ed3e <MQTTSubscribe+0x10e>
   2ed82:	e008      	b.n	2ed96 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2ed84:	2301      	movs	r3, #1
   2ed86:	425b      	negs	r3, r3
   2ed88:	647b      	str	r3, [r7, #68]	; 0x44
   2ed8a:	e004      	b.n	2ed96 <MQTTSubscribe+0x166>
		goto exit;
   2ed8c:	46c0      	nop			; (mov r8, r8)
   2ed8e:	e002      	b.n	2ed96 <MQTTSubscribe+0x166>
        goto exit;
   2ed90:	46c0      	nop			; (mov r8, r8)
   2ed92:	e000      	b.n	2ed96 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2ed94:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2ed96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2ed98:	0018      	movs	r0, r3
   2ed9a:	46bd      	mov	sp, r7
   2ed9c:	b012      	add	sp, #72	; 0x48
   2ed9e:	bdb0      	pop	{r4, r5, r7, pc}
   2eda0:	0002f1c5 	.word	0x0002f1c5
   2eda4:	0002f14d 	.word	0x0002f14d
   2eda8:	0002e30d 	.word	0x0002e30d
   2edac:	000306fd 	.word	0x000306fd
   2edb0:	0002e33d 	.word	0x0002e33d
   2edb4:	0002eaa5 	.word	0x0002eaa5
   2edb8:	0003084d 	.word	0x0003084d

0002edbc <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2edbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2edbe:	46ce      	mov	lr, r9
   2edc0:	4647      	mov	r7, r8
   2edc2:	b580      	push	{r7, lr}
   2edc4:	b097      	sub	sp, #92	; 0x5c
   2edc6:	af08      	add	r7, sp, #32
   2edc8:	60f8      	str	r0, [r7, #12]
   2edca:	60b9      	str	r1, [r7, #8]
   2edcc:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2edce:	2301      	movs	r3, #1
   2edd0:	425b      	negs	r3, r3
   2edd2:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2edd4:	2318      	movs	r3, #24
   2edd6:	18fb      	adds	r3, r7, r3
   2edd8:	2200      	movs	r2, #0
   2edda:	601a      	str	r2, [r3, #0]
   2eddc:	2318      	movs	r3, #24
   2edde:	18fb      	adds	r3, r7, r3
   2ede0:	2200      	movs	r2, #0
   2ede2:	605a      	str	r2, [r3, #4]
   2ede4:	2318      	movs	r3, #24
   2ede6:	18fb      	adds	r3, r7, r3
   2ede8:	2200      	movs	r2, #0
   2edea:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2edec:	2318      	movs	r3, #24
   2edee:	18fb      	adds	r3, r7, r3
   2edf0:	68ba      	ldr	r2, [r7, #8]
   2edf2:	601a      	str	r2, [r3, #0]
    int len = 0;
   2edf4:	2300      	movs	r3, #0
   2edf6:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2edf8:	68fb      	ldr	r3, [r7, #12]
   2edfa:	6a1b      	ldr	r3, [r3, #32]
   2edfc:	2b00      	cmp	r3, #0
   2edfe:	d100      	bne.n	2ee02 <MQTTPublish+0x46>
   2ee00:	e0a0      	b.n	2ef44 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2ee02:	2324      	movs	r3, #36	; 0x24
   2ee04:	18fb      	adds	r3, r7, r3
   2ee06:	0018      	movs	r0, r3
   2ee08:	4b55      	ldr	r3, [pc, #340]	; (2ef60 <MQTTPublish+0x1a4>)
   2ee0a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2ee0c:	68fb      	ldr	r3, [r7, #12]
   2ee0e:	685a      	ldr	r2, [r3, #4]
   2ee10:	2324      	movs	r3, #36	; 0x24
   2ee12:	18fb      	adds	r3, r7, r3
   2ee14:	0011      	movs	r1, r2
   2ee16:	0018      	movs	r0, r3
   2ee18:	4b52      	ldr	r3, [pc, #328]	; (2ef64 <MQTTPublish+0x1a8>)
   2ee1a:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2ee1c:	687b      	ldr	r3, [r7, #4]
   2ee1e:	781b      	ldrb	r3, [r3, #0]
   2ee20:	2b01      	cmp	r3, #1
   2ee22:	d003      	beq.n	2ee2c <MQTTPublish+0x70>
   2ee24:	687b      	ldr	r3, [r7, #4]
   2ee26:	781b      	ldrb	r3, [r3, #0]
   2ee28:	2b02      	cmp	r3, #2
   2ee2a:	d107      	bne.n	2ee3c <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2ee2c:	68fb      	ldr	r3, [r7, #12]
   2ee2e:	0018      	movs	r0, r3
   2ee30:	4b4d      	ldr	r3, [pc, #308]	; (2ef68 <MQTTPublish+0x1ac>)
   2ee32:	4798      	blx	r3
   2ee34:	0003      	movs	r3, r0
   2ee36:	b29a      	uxth	r2, r3
   2ee38:	687b      	ldr	r3, [r7, #4]
   2ee3a:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2ee3c:	68fb      	ldr	r3, [r7, #12]
   2ee3e:	691b      	ldr	r3, [r3, #16]
   2ee40:	469c      	mov	ip, r3
   2ee42:	68fb      	ldr	r3, [r7, #12]
   2ee44:	689b      	ldr	r3, [r3, #8]
   2ee46:	001d      	movs	r5, r3
   2ee48:	687b      	ldr	r3, [r7, #4]
   2ee4a:	781b      	ldrb	r3, [r3, #0]
   2ee4c:	001e      	movs	r6, r3
   2ee4e:	687b      	ldr	r3, [r7, #4]
   2ee50:	785b      	ldrb	r3, [r3, #1]
   2ee52:	4698      	mov	r8, r3
   2ee54:	687b      	ldr	r3, [r7, #4]
   2ee56:	889b      	ldrh	r3, [r3, #4]
   2ee58:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2ee5a:	687b      	ldr	r3, [r7, #4]
   2ee5c:	689a      	ldr	r2, [r3, #8]
   2ee5e:	687b      	ldr	r3, [r7, #4]
   2ee60:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2ee62:	9306      	str	r3, [sp, #24]
   2ee64:	9205      	str	r2, [sp, #20]
   2ee66:	2318      	movs	r3, #24
   2ee68:	18fa      	adds	r2, r7, r3
   2ee6a:	2308      	movs	r3, #8
   2ee6c:	446b      	add	r3, sp
   2ee6e:	ca13      	ldmia	r2!, {r0, r1, r4}
   2ee70:	c313      	stmia	r3!, {r0, r1, r4}
   2ee72:	464b      	mov	r3, r9
   2ee74:	9301      	str	r3, [sp, #4]
   2ee76:	4643      	mov	r3, r8
   2ee78:	9300      	str	r3, [sp, #0]
   2ee7a:	0033      	movs	r3, r6
   2ee7c:	2200      	movs	r2, #0
   2ee7e:	0029      	movs	r1, r5
   2ee80:	4660      	mov	r0, ip
   2ee82:	4c3a      	ldr	r4, [pc, #232]	; (2ef6c <MQTTPublish+0x1b0>)
   2ee84:	47a0      	blx	r4
   2ee86:	0003      	movs	r3, r0
   2ee88:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2ee8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ee8c:	2b00      	cmp	r3, #0
   2ee8e:	dd5b      	ble.n	2ef48 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2ee90:	2324      	movs	r3, #36	; 0x24
   2ee92:	18fa      	adds	r2, r7, r3
   2ee94:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2ee96:	68fb      	ldr	r3, [r7, #12]
   2ee98:	0018      	movs	r0, r3
   2ee9a:	4b35      	ldr	r3, [pc, #212]	; (2ef70 <MQTTPublish+0x1b4>)
   2ee9c:	4798      	blx	r3
   2ee9e:	0003      	movs	r3, r0
   2eea0:	637b      	str	r3, [r7, #52]	; 0x34
   2eea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2eea4:	2b00      	cmp	r3, #0
   2eea6:	d151      	bne.n	2ef4c <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2eea8:	687b      	ldr	r3, [r7, #4]
   2eeaa:	781b      	ldrb	r3, [r3, #0]
   2eeac:	2b01      	cmp	r3, #1
   2eeae:	d122      	bne.n	2eef6 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2eeb0:	2324      	movs	r3, #36	; 0x24
   2eeb2:	18fa      	adds	r2, r7, r3
   2eeb4:	68fb      	ldr	r3, [r7, #12]
   2eeb6:	2104      	movs	r1, #4
   2eeb8:	0018      	movs	r0, r3
   2eeba:	4b2e      	ldr	r3, [pc, #184]	; (2ef74 <MQTTPublish+0x1b8>)
   2eebc:	4798      	blx	r3
   2eebe:	0003      	movs	r3, r0
   2eec0:	2b04      	cmp	r3, #4
   2eec2:	d114      	bne.n	2eeee <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2eec4:	68fb      	ldr	r3, [r7, #12]
   2eec6:	695c      	ldr	r4, [r3, #20]
   2eec8:	68fb      	ldr	r3, [r7, #12]
   2eeca:	68db      	ldr	r3, [r3, #12]
   2eecc:	2216      	movs	r2, #22
   2eece:	18ba      	adds	r2, r7, r2
   2eed0:	2115      	movs	r1, #21
   2eed2:	1879      	adds	r1, r7, r1
   2eed4:	2014      	movs	r0, #20
   2eed6:	1838      	adds	r0, r7, r0
   2eed8:	9300      	str	r3, [sp, #0]
   2eeda:	0023      	movs	r3, r4
   2eedc:	4c26      	ldr	r4, [pc, #152]	; (2ef78 <MQTTPublish+0x1bc>)
   2eede:	47a0      	blx	r4
   2eee0:	0003      	movs	r3, r0
   2eee2:	2b01      	cmp	r3, #1
   2eee4:	d033      	beq.n	2ef4e <MQTTPublish+0x192>
                rc = FAILURE;
   2eee6:	2301      	movs	r3, #1
   2eee8:	425b      	negs	r3, r3
   2eeea:	637b      	str	r3, [r7, #52]	; 0x34
   2eeec:	e02f      	b.n	2ef4e <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2eeee:	2301      	movs	r3, #1
   2eef0:	425b      	negs	r3, r3
   2eef2:	637b      	str	r3, [r7, #52]	; 0x34
   2eef4:	e02b      	b.n	2ef4e <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2eef6:	687b      	ldr	r3, [r7, #4]
   2eef8:	781b      	ldrb	r3, [r3, #0]
   2eefa:	2b02      	cmp	r3, #2
   2eefc:	d127      	bne.n	2ef4e <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2eefe:	2324      	movs	r3, #36	; 0x24
   2ef00:	18fa      	adds	r2, r7, r3
   2ef02:	68fb      	ldr	r3, [r7, #12]
   2ef04:	2107      	movs	r1, #7
   2ef06:	0018      	movs	r0, r3
   2ef08:	4b1a      	ldr	r3, [pc, #104]	; (2ef74 <MQTTPublish+0x1b8>)
   2ef0a:	4798      	blx	r3
   2ef0c:	0003      	movs	r3, r0
   2ef0e:	2b07      	cmp	r3, #7
   2ef10:	d114      	bne.n	2ef3c <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2ef12:	68fb      	ldr	r3, [r7, #12]
   2ef14:	695c      	ldr	r4, [r3, #20]
   2ef16:	68fb      	ldr	r3, [r7, #12]
   2ef18:	68db      	ldr	r3, [r3, #12]
   2ef1a:	2212      	movs	r2, #18
   2ef1c:	18ba      	adds	r2, r7, r2
   2ef1e:	2111      	movs	r1, #17
   2ef20:	1879      	adds	r1, r7, r1
   2ef22:	2010      	movs	r0, #16
   2ef24:	1838      	adds	r0, r7, r0
   2ef26:	9300      	str	r3, [sp, #0]
   2ef28:	0023      	movs	r3, r4
   2ef2a:	4c13      	ldr	r4, [pc, #76]	; (2ef78 <MQTTPublish+0x1bc>)
   2ef2c:	47a0      	blx	r4
   2ef2e:	0003      	movs	r3, r0
   2ef30:	2b01      	cmp	r3, #1
   2ef32:	d00c      	beq.n	2ef4e <MQTTPublish+0x192>
                rc = FAILURE;
   2ef34:	2301      	movs	r3, #1
   2ef36:	425b      	negs	r3, r3
   2ef38:	637b      	str	r3, [r7, #52]	; 0x34
   2ef3a:	e008      	b.n	2ef4e <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2ef3c:	2301      	movs	r3, #1
   2ef3e:	425b      	negs	r3, r3
   2ef40:	637b      	str	r3, [r7, #52]	; 0x34
   2ef42:	e004      	b.n	2ef4e <MQTTPublish+0x192>
		goto exit;
   2ef44:	46c0      	nop			; (mov r8, r8)
   2ef46:	e002      	b.n	2ef4e <MQTTPublish+0x192>
        goto exit;
   2ef48:	46c0      	nop			; (mov r8, r8)
   2ef4a:	e000      	b.n	2ef4e <MQTTPublish+0x192>
        goto exit; // there was a problem
   2ef4c:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2ef4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2ef50:	0018      	movs	r0, r3
   2ef52:	46bd      	mov	sp, r7
   2ef54:	b00f      	add	sp, #60	; 0x3c
   2ef56:	bc0c      	pop	{r2, r3}
   2ef58:	4690      	mov	r8, r2
   2ef5a:	4699      	mov	r9, r3
   2ef5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ef5e:	46c0      	nop			; (mov r8, r8)
   2ef60:	0002f1c5 	.word	0x0002f1c5
   2ef64:	0002f14d 	.word	0x0002f14d
   2ef68:	0002e30d 	.word	0x0002e30d
   2ef6c:	00030449 	.word	0x00030449
   2ef70:	0002e33d 	.word	0x0002e33d
   2ef74:	0002eaa5 	.word	0x0002eaa5
   2ef78:	0002fec1 	.word	0x0002fec1

0002ef7c <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2ef7c:	b580      	push	{r7, lr}
   2ef7e:	b088      	sub	sp, #32
   2ef80:	af00      	add	r7, sp, #0
   2ef82:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2ef84:	2301      	movs	r3, #1
   2ef86:	425b      	negs	r3, r3
   2ef88:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2ef8a:	2300      	movs	r3, #0
   2ef8c:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2ef8e:	230c      	movs	r3, #12
   2ef90:	18fb      	adds	r3, r7, r3
   2ef92:	0018      	movs	r0, r3
   2ef94:	4b13      	ldr	r3, [pc, #76]	; (2efe4 <MQTTDisconnect+0x68>)
   2ef96:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2ef98:	687b      	ldr	r3, [r7, #4]
   2ef9a:	685a      	ldr	r2, [r3, #4]
   2ef9c:	230c      	movs	r3, #12
   2ef9e:	18fb      	adds	r3, r7, r3
   2efa0:	0011      	movs	r1, r2
   2efa2:	0018      	movs	r0, r3
   2efa4:	4b10      	ldr	r3, [pc, #64]	; (2efe8 <MQTTDisconnect+0x6c>)
   2efa6:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2efa8:	687b      	ldr	r3, [r7, #4]
   2efaa:	691a      	ldr	r2, [r3, #16]
   2efac:	687b      	ldr	r3, [r7, #4]
   2efae:	689b      	ldr	r3, [r3, #8]
   2efb0:	0019      	movs	r1, r3
   2efb2:	0010      	movs	r0, r2
   2efb4:	4b0d      	ldr	r3, [pc, #52]	; (2efec <MQTTDisconnect+0x70>)
   2efb6:	4798      	blx	r3
   2efb8:	0003      	movs	r3, r0
   2efba:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2efbc:	69bb      	ldr	r3, [r7, #24]
   2efbe:	2b00      	cmp	r3, #0
   2efc0:	dd08      	ble.n	2efd4 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2efc2:	230c      	movs	r3, #12
   2efc4:	18fa      	adds	r2, r7, r3
   2efc6:	69b9      	ldr	r1, [r7, #24]
   2efc8:	687b      	ldr	r3, [r7, #4]
   2efca:	0018      	movs	r0, r3
   2efcc:	4b08      	ldr	r3, [pc, #32]	; (2eff0 <MQTTDisconnect+0x74>)
   2efce:	4798      	blx	r3
   2efd0:	0003      	movs	r3, r0
   2efd2:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2efd4:	687b      	ldr	r3, [r7, #4]
   2efd6:	2200      	movs	r2, #0
   2efd8:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2efda:	69fb      	ldr	r3, [r7, #28]
}
   2efdc:	0018      	movs	r0, r3
   2efde:	46bd      	mov	sp, r7
   2efe0:	b008      	add	sp, #32
   2efe2:	bd80      	pop	{r7, pc}
   2efe4:	0002f1c5 	.word	0x0002f1c5
   2efe8:	0002f14d 	.word	0x0002f14d
   2efec:	0002fd75 	.word	0x0002fd75
   2eff0:	0002e33d 	.word	0x0002e33d

0002eff4 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2eff4:	b580      	push	{r7, lr}
   2eff6:	b084      	sub	sp, #16
   2eff8:	af00      	add	r7, sp, #0
   2effa:	0002      	movs	r2, r0
   2effc:	1dfb      	adds	r3, r7, #7
   2effe:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f000:	2300      	movs	r3, #0
   2f002:	60fb      	str	r3, [r7, #12]
   2f004:	e01c      	b.n	2f040 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2f006:	4a12      	ldr	r2, [pc, #72]	; (2f050 <isMQTTSocket+0x5c>)
   2f008:	68fb      	ldr	r3, [r7, #12]
   2f00a:	2164      	movs	r1, #100	; 0x64
   2f00c:	434b      	muls	r3, r1
   2f00e:	18d3      	adds	r3, r2, r3
   2f010:	3360      	adds	r3, #96	; 0x60
   2f012:	681b      	ldr	r3, [r3, #0]
   2f014:	2b00      	cmp	r3, #0
   2f016:	d010      	beq.n	2f03a <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2f018:	4a0d      	ldr	r2, [pc, #52]	; (2f050 <isMQTTSocket+0x5c>)
   2f01a:	68fb      	ldr	r3, [r7, #12]
   2f01c:	2164      	movs	r1, #100	; 0x64
   2f01e:	434b      	muls	r3, r1
   2f020:	18d3      	adds	r3, r2, r3
   2f022:	3360      	adds	r3, #96	; 0x60
   2f024:	681b      	ldr	r3, [r3, #0]
   2f026:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2f028:	68bb      	ldr	r3, [r7, #8]
   2f02a:	6a1a      	ldr	r2, [r3, #32]
   2f02c:	1dfb      	adds	r3, r7, #7
   2f02e:	781b      	ldrb	r3, [r3, #0]
   2f030:	b25b      	sxtb	r3, r3
   2f032:	429a      	cmp	r2, r3
   2f034:	d101      	bne.n	2f03a <isMQTTSocket+0x46>
				return true;
   2f036:	2301      	movs	r3, #1
   2f038:	e006      	b.n	2f048 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f03a:	68fb      	ldr	r3, [r7, #12]
   2f03c:	3301      	adds	r3, #1
   2f03e:	60fb      	str	r3, [r7, #12]
   2f040:	68fb      	ldr	r3, [r7, #12]
   2f042:	2b06      	cmp	r3, #6
   2f044:	d9df      	bls.n	2f006 <isMQTTSocket+0x12>
		}
	}
	return false;
   2f046:	2300      	movs	r3, #0
}
   2f048:	0018      	movs	r0, r3
   2f04a:	46bd      	mov	sp, r7
   2f04c:	b004      	add	sp, #16
   2f04e:	bd80      	pop	{r7, pc}
   2f050:	20004430 	.word	0x20004430

0002f054 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2f054:	b580      	push	{r7, lr}
   2f056:	b082      	sub	sp, #8
   2f058:	af00      	add	r7, sp, #0
   2f05a:	6078      	str	r0, [r7, #4]
   2f05c:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2f05e:	4b0d      	ldr	r3, [pc, #52]	; (2f094 <dnsResolveCallback+0x40>)
   2f060:	781b      	ldrb	r3, [r3, #0]
   2f062:	2201      	movs	r2, #1
   2f064:	4053      	eors	r3, r2
   2f066:	b2db      	uxtb	r3, r3
   2f068:	2b00      	cmp	r3, #0
   2f06a:	d00e      	beq.n	2f08a <dnsResolveCallback+0x36>
   2f06c:	4b0a      	ldr	r3, [pc, #40]	; (2f098 <dnsResolveCallback+0x44>)
   2f06e:	681b      	ldr	r3, [r3, #0]
   2f070:	687a      	ldr	r2, [r7, #4]
   2f072:	0011      	movs	r1, r2
   2f074:	0018      	movs	r0, r3
   2f076:	4b09      	ldr	r3, [pc, #36]	; (2f09c <dnsResolveCallback+0x48>)
   2f078:	4798      	blx	r3
   2f07a:	1e03      	subs	r3, r0, #0
   2f07c:	d105      	bne.n	2f08a <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2f07e:	683a      	ldr	r2, [r7, #0]
   2f080:	4b07      	ldr	r3, [pc, #28]	; (2f0a0 <dnsResolveCallback+0x4c>)
   2f082:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2f084:	4b03      	ldr	r3, [pc, #12]	; (2f094 <dnsResolveCallback+0x40>)
   2f086:	2201      	movs	r2, #1
   2f088:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2f08a:	46c0      	nop			; (mov r8, r8)
   2f08c:	46bd      	mov	sp, r7
   2f08e:	b002      	add	sp, #8
   2f090:	bd80      	pop	{r7, pc}
   2f092:	46c0      	nop			; (mov r8, r8)
   2f094:	20004320 	.word	0x20004320
   2f098:	2000442c 	.word	0x2000442c
   2f09c:	00034bdb 	.word	0x00034bdb
   2f0a0:	20004318 	.word	0x20004318

0002f0a4 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2f0a4:	b580      	push	{r7, lr}
   2f0a6:	b084      	sub	sp, #16
   2f0a8:	af00      	add	r7, sp, #0
   2f0aa:	603a      	str	r2, [r7, #0]
   2f0ac:	1dfb      	adds	r3, r7, #7
   2f0ae:	1c02      	adds	r2, r0, #0
   2f0b0:	701a      	strb	r2, [r3, #0]
   2f0b2:	1dbb      	adds	r3, r7, #6
   2f0b4:	1c0a      	adds	r2, r1, #0
   2f0b6:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2f0b8:	1dfb      	adds	r3, r7, #7
   2f0ba:	781b      	ldrb	r3, [r3, #0]
   2f0bc:	b25b      	sxtb	r3, r3
   2f0be:	0018      	movs	r0, r3
   2f0c0:	4b12      	ldr	r3, [pc, #72]	; (2f10c <tcpClientSocketEventHandler+0x68>)
   2f0c2:	4798      	blx	r3
   2f0c4:	1e03      	subs	r3, r0, #0
   2f0c6:	d01c      	beq.n	2f102 <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2f0c8:	1dbb      	adds	r3, r7, #6
   2f0ca:	781b      	ldrb	r3, [r3, #0]
   2f0cc:	2b06      	cmp	r3, #6
   2f0ce:	d00c      	beq.n	2f0ea <tcpClientSocketEventHandler+0x46>
   2f0d0:	2b07      	cmp	r3, #7
   2f0d2:	d006      	beq.n	2f0e2 <tcpClientSocketEventHandler+0x3e>
   2f0d4:	2b05      	cmp	r3, #5
   2f0d6:	d000      	beq.n	2f0da <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2f0d8:	e013      	b.n	2f102 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2f0da:	4b0d      	ldr	r3, [pc, #52]	; (2f110 <tcpClientSocketEventHandler+0x6c>)
   2f0dc:	2201      	movs	r2, #1
   2f0de:	701a      	strb	r2, [r3, #0]
			break;
   2f0e0:	e00f      	b.n	2f102 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2f0e2:	4b0c      	ldr	r3, [pc, #48]	; (2f114 <tcpClientSocketEventHandler+0x70>)
   2f0e4:	2201      	movs	r2, #1
   2f0e6:	701a      	strb	r2, [r3, #0]
			break;
   2f0e8:	e00b      	b.n	2f102 <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2f0ea:	683b      	ldr	r3, [r7, #0]
   2f0ec:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2f0ee:	68fb      	ldr	r3, [r7, #12]
   2f0f0:	2204      	movs	r2, #4
   2f0f2:	5e9b      	ldrsh	r3, [r3, r2]
   2f0f4:	001a      	movs	r2, r3
   2f0f6:	4b08      	ldr	r3, [pc, #32]	; (2f118 <tcpClientSocketEventHandler+0x74>)
   2f0f8:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2f0fa:	4b08      	ldr	r3, [pc, #32]	; (2f11c <tcpClientSocketEventHandler+0x78>)
   2f0fc:	2201      	movs	r2, #1
   2f0fe:	701a      	strb	r2, [r3, #0]
			break;
   2f100:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2f102:	46c0      	nop			; (mov r8, r8)
   2f104:	46bd      	mov	sp, r7
   2f106:	b004      	add	sp, #16
   2f108:	bd80      	pop	{r7, pc}
   2f10a:	46c0      	nop			; (mov r8, r8)
   2f10c:	0002eff5 	.word	0x0002eff5
   2f110:	20004321 	.word	0x20004321
   2f114:	20004322 	.word	0x20004322
   2f118:	2000431c 	.word	0x2000431c
   2f11c:	20004323 	.word	0x20004323

0002f120 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2f120:	b580      	push	{r7, lr}
   2f122:	b082      	sub	sp, #8
   2f124:	af00      	add	r7, sp, #0
   2f126:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2f128:	687b      	ldr	r3, [r7, #4]
   2f12a:	3304      	adds	r3, #4
   2f12c:	687a      	ldr	r2, [r7, #4]
   2f12e:	0011      	movs	r1, r2
   2f130:	0018      	movs	r0, r3
   2f132:	4b05      	ldr	r3, [pc, #20]	; (2f148 <TimerIsExpired+0x28>)
   2f134:	4798      	blx	r3
   2f136:	0003      	movs	r3, r0
   2f138:	3b01      	subs	r3, #1
   2f13a:	425a      	negs	r2, r3
   2f13c:	4153      	adcs	r3, r2
   2f13e:	b2db      	uxtb	r3, r3
}
   2f140:	0018      	movs	r0, r3
   2f142:	46bd      	mov	sp, r7
   2f144:	b002      	add	sp, #8
   2f146:	bd80      	pop	{r7, pc}
   2f148:	0001ca91 	.word	0x0001ca91

0002f14c <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2f14c:	b580      	push	{r7, lr}
   2f14e:	b082      	sub	sp, #8
   2f150:	af00      	add	r7, sp, #0
   2f152:	6078      	str	r0, [r7, #4]
   2f154:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2f156:	687b      	ldr	r3, [r7, #4]
   2f158:	683a      	ldr	r2, [r7, #0]
   2f15a:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2f15c:	687b      	ldr	r3, [r7, #4]
   2f15e:	3304      	adds	r3, #4
   2f160:	0018      	movs	r0, r3
   2f162:	4b03      	ldr	r3, [pc, #12]	; (2f170 <TimerCountdownMS+0x24>)
   2f164:	4798      	blx	r3
}
   2f166:	46c0      	nop			; (mov r8, r8)
   2f168:	46bd      	mov	sp, r7
   2f16a:	b002      	add	sp, #8
   2f16c:	bd80      	pop	{r7, pc}
   2f16e:	46c0      	nop			; (mov r8, r8)
   2f170:	0001ca25 	.word	0x0001ca25

0002f174 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2f174:	b580      	push	{r7, lr}
   2f176:	b082      	sub	sp, #8
   2f178:	af00      	add	r7, sp, #0
   2f17a:	6078      	str	r0, [r7, #4]
   2f17c:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2f17e:	683b      	ldr	r3, [r7, #0]
   2f180:	22fa      	movs	r2, #250	; 0xfa
   2f182:	0092      	lsls	r2, r2, #2
   2f184:	435a      	muls	r2, r3
   2f186:	687b      	ldr	r3, [r7, #4]
   2f188:	0011      	movs	r1, r2
   2f18a:	0018      	movs	r0, r3
   2f18c:	4b02      	ldr	r3, [pc, #8]	; (2f198 <TimerCountdown+0x24>)
   2f18e:	4798      	blx	r3
}
   2f190:	46c0      	nop			; (mov r8, r8)
   2f192:	46bd      	mov	sp, r7
   2f194:	b002      	add	sp, #8
   2f196:	bd80      	pop	{r7, pc}
   2f198:	0002f14d 	.word	0x0002f14d

0002f19c <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2f19c:	b580      	push	{r7, lr}
   2f19e:	b082      	sub	sp, #8
   2f1a0:	af00      	add	r7, sp, #0
   2f1a2:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2f1a4:	687b      	ldr	r3, [r7, #4]
   2f1a6:	3304      	adds	r3, #4
   2f1a8:	687a      	ldr	r2, [r7, #4]
   2f1aa:	0011      	movs	r1, r2
   2f1ac:	0018      	movs	r0, r3
   2f1ae:	4b04      	ldr	r3, [pc, #16]	; (2f1c0 <TimerLeftMS+0x24>)
   2f1b0:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2f1b2:	687b      	ldr	r3, [r7, #4]
   2f1b4:	681b      	ldr	r3, [r3, #0]
}
   2f1b6:	0018      	movs	r0, r3
   2f1b8:	46bd      	mov	sp, r7
   2f1ba:	b002      	add	sp, #8
   2f1bc:	bd80      	pop	{r7, pc}
   2f1be:	46c0      	nop			; (mov r8, r8)
   2f1c0:	0001ca91 	.word	0x0001ca91

0002f1c4 <TimerInit>:


void TimerInit(Timer* timer) {
   2f1c4:	b580      	push	{r7, lr}
   2f1c6:	b082      	sub	sp, #8
   2f1c8:	af00      	add	r7, sp, #0
   2f1ca:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2f1cc:	687b      	ldr	r3, [r7, #4]
   2f1ce:	2200      	movs	r2, #0
   2f1d0:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2f1d2:	687b      	ldr	r3, [r7, #4]
   2f1d4:	3304      	adds	r3, #4
   2f1d6:	2208      	movs	r2, #8
   2f1d8:	2100      	movs	r1, #0
   2f1da:	0018      	movs	r0, r3
   2f1dc:	4b02      	ldr	r3, [pc, #8]	; (2f1e8 <TimerInit+0x24>)
   2f1de:	4798      	blx	r3
}
   2f1e0:	46c0      	nop			; (mov r8, r8)
   2f1e2:	46bd      	mov	sp, r7
   2f1e4:	b002      	add	sp, #8
   2f1e6:	bd80      	pop	{r7, pc}
   2f1e8:	00034883 	.word	0x00034883

0002f1ec <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2f1ec:	b590      	push	{r4, r7, lr}
   2f1ee:	b085      	sub	sp, #20
   2f1f0:	af00      	add	r7, sp, #0
   2f1f2:	60f8      	str	r0, [r7, #12]
   2f1f4:	60b9      	str	r1, [r7, #8]
   2f1f6:	607a      	str	r2, [r7, #4]
   2f1f8:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2f1fa:	683b      	ldr	r3, [r7, #0]
   2f1fc:	2b00      	cmp	r3, #0
   2f1fe:	d101      	bne.n	2f204 <WINC1500_read+0x18>
   2f200:	230a      	movs	r3, #10
   2f202:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2f204:	4b2c      	ldr	r3, [pc, #176]	; (2f2b8 <WINC1500_read+0xcc>)
   2f206:	681b      	ldr	r3, [r3, #0]
   2f208:	2b00      	cmp	r3, #0
   2f20a:	d131      	bne.n	2f270 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2f20c:	4b2b      	ldr	r3, [pc, #172]	; (2f2bc <WINC1500_read+0xd0>)
   2f20e:	2200      	movs	r2, #0
   2f210:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2f212:	68fb      	ldr	r3, [r7, #12]
   2f214:	681b      	ldr	r3, [r3, #0]
   2f216:	b258      	sxtb	r0, r3
   2f218:	683c      	ldr	r4, [r7, #0]
   2f21a:	2380      	movs	r3, #128	; 0x80
   2f21c:	005a      	lsls	r2, r3, #1
   2f21e:	4928      	ldr	r1, [pc, #160]	; (2f2c0 <WINC1500_read+0xd4>)
   2f220:	0023      	movs	r3, r4
   2f222:	4c28      	ldr	r4, [pc, #160]	; (2f2c4 <WINC1500_read+0xd8>)
   2f224:	47a0      	blx	r4
   2f226:	1e03      	subs	r3, r0, #0
   2f228:	d005      	beq.n	2f236 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2f22a:	2301      	movs	r3, #1
   2f22c:	425b      	negs	r3, r3
   2f22e:	e03e      	b.n	2f2ae <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2f230:	2000      	movs	r0, #0
   2f232:	4b25      	ldr	r3, [pc, #148]	; (2f2c8 <WINC1500_read+0xdc>)
   2f234:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2f236:	4b21      	ldr	r3, [pc, #132]	; (2f2bc <WINC1500_read+0xd0>)
   2f238:	781b      	ldrb	r3, [r3, #0]
   2f23a:	2201      	movs	r2, #1
   2f23c:	4053      	eors	r3, r2
   2f23e:	b2db      	uxtb	r3, r3
   2f240:	2b00      	cmp	r3, #0
   2f242:	d1f5      	bne.n	2f230 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2f244:	4b21      	ldr	r3, [pc, #132]	; (2f2cc <WINC1500_read+0xe0>)
   2f246:	681b      	ldr	r3, [r3, #0]
   2f248:	2b00      	cmp	r3, #0
   2f24a:	dd08      	ble.n	2f25e <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2f24c:	4b1f      	ldr	r3, [pc, #124]	; (2f2cc <WINC1500_read+0xe0>)
   2f24e:	681b      	ldr	r3, [r3, #0]
   2f250:	001a      	movs	r2, r3
   2f252:	4b19      	ldr	r3, [pc, #100]	; (2f2b8 <WINC1500_read+0xcc>)
   2f254:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2f256:	4b1e      	ldr	r3, [pc, #120]	; (2f2d0 <WINC1500_read+0xe4>)
   2f258:	2200      	movs	r2, #0
   2f25a:	601a      	str	r2, [r3, #0]
   2f25c:	e008      	b.n	2f270 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2f25e:	4b16      	ldr	r3, [pc, #88]	; (2f2b8 <WINC1500_read+0xcc>)
   2f260:	2200      	movs	r2, #0
   2f262:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2f264:	4b1a      	ldr	r3, [pc, #104]	; (2f2d0 <WINC1500_read+0xe4>)
   2f266:	2200      	movs	r2, #0
   2f268:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2f26a:	4b18      	ldr	r3, [pc, #96]	; (2f2cc <WINC1500_read+0xe0>)
   2f26c:	681b      	ldr	r3, [r3, #0]
   2f26e:	e01e      	b.n	2f2ae <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2f270:	4b11      	ldr	r3, [pc, #68]	; (2f2b8 <WINC1500_read+0xcc>)
   2f272:	681b      	ldr	r3, [r3, #0]
   2f274:	001a      	movs	r2, r3
   2f276:	687b      	ldr	r3, [r7, #4]
   2f278:	4293      	cmp	r3, r2
   2f27a:	dd02      	ble.n	2f282 <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2f27c:	2301      	movs	r3, #1
   2f27e:	425b      	negs	r3, r3
   2f280:	e015      	b.n	2f2ae <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2f282:	4b13      	ldr	r3, [pc, #76]	; (2f2d0 <WINC1500_read+0xe4>)
   2f284:	681a      	ldr	r2, [r3, #0]
   2f286:	4b0e      	ldr	r3, [pc, #56]	; (2f2c0 <WINC1500_read+0xd4>)
   2f288:	18d1      	adds	r1, r2, r3
   2f28a:	687a      	ldr	r2, [r7, #4]
   2f28c:	68bb      	ldr	r3, [r7, #8]
   2f28e:	0018      	movs	r0, r3
   2f290:	4b10      	ldr	r3, [pc, #64]	; (2f2d4 <WINC1500_read+0xe8>)
   2f292:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2f294:	4b08      	ldr	r3, [pc, #32]	; (2f2b8 <WINC1500_read+0xcc>)
   2f296:	681a      	ldr	r2, [r3, #0]
   2f298:	687b      	ldr	r3, [r7, #4]
   2f29a:	1ad2      	subs	r2, r2, r3
   2f29c:	4b06      	ldr	r3, [pc, #24]	; (2f2b8 <WINC1500_read+0xcc>)
   2f29e:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2f2a0:	4b0b      	ldr	r3, [pc, #44]	; (2f2d0 <WINC1500_read+0xe4>)
   2f2a2:	681a      	ldr	r2, [r3, #0]
   2f2a4:	687b      	ldr	r3, [r7, #4]
   2f2a6:	18d2      	adds	r2, r2, r3
   2f2a8:	4b09      	ldr	r3, [pc, #36]	; (2f2d0 <WINC1500_read+0xe4>)
   2f2aa:	601a      	str	r2, [r3, #0]
  
  return len;
   2f2ac:	687b      	ldr	r3, [r7, #4]
}
   2f2ae:	0018      	movs	r0, r3
   2f2b0:	46bd      	mov	sp, r7
   2f2b2:	b005      	add	sp, #20
   2f2b4:	bd90      	pop	{r4, r7, pc}
   2f2b6:	46c0      	nop			; (mov r8, r8)
   2f2b8:	20004428 	.word	0x20004428
   2f2bc:	20004323 	.word	0x20004323
   2f2c0:	20004324 	.word	0x20004324
   2f2c4:	000258a1 	.word	0x000258a1
   2f2c8:	00021de9 	.word	0x00021de9
   2f2cc:	2000431c 	.word	0x2000431c
   2f2d0:	20004424 	.word	0x20004424
   2f2d4:	0003484d 	.word	0x0003484d

0002f2d8 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2f2d8:	b590      	push	{r4, r7, lr}
   2f2da:	b085      	sub	sp, #20
   2f2dc:	af00      	add	r7, sp, #0
   2f2de:	60f8      	str	r0, [r7, #12]
   2f2e0:	60b9      	str	r1, [r7, #8]
   2f2e2:	607a      	str	r2, [r7, #4]
   2f2e4:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2f2e6:	4b10      	ldr	r3, [pc, #64]	; (2f328 <WINC1500_write+0x50>)
   2f2e8:	2200      	movs	r2, #0
   2f2ea:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2f2ec:	68fb      	ldr	r3, [r7, #12]
   2f2ee:	681b      	ldr	r3, [r3, #0]
   2f2f0:	b258      	sxtb	r0, r3
   2f2f2:	687b      	ldr	r3, [r7, #4]
   2f2f4:	b29a      	uxth	r2, r3
   2f2f6:	68b9      	ldr	r1, [r7, #8]
   2f2f8:	2300      	movs	r3, #0
   2f2fa:	4c0c      	ldr	r4, [pc, #48]	; (2f32c <WINC1500_write+0x54>)
   2f2fc:	47a0      	blx	r4
   2f2fe:	1e03      	subs	r3, r0, #0
   2f300:	d005      	beq.n	2f30e <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2f302:	2301      	movs	r3, #1
   2f304:	425b      	negs	r3, r3
   2f306:	e00a      	b.n	2f31e <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2f308:	2000      	movs	r0, #0
   2f30a:	4b09      	ldr	r3, [pc, #36]	; (2f330 <WINC1500_write+0x58>)
   2f30c:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2f30e:	4b06      	ldr	r3, [pc, #24]	; (2f328 <WINC1500_write+0x50>)
   2f310:	781b      	ldrb	r3, [r3, #0]
   2f312:	2201      	movs	r2, #1
   2f314:	4053      	eors	r3, r2
   2f316:	b2db      	uxtb	r3, r3
   2f318:	2b00      	cmp	r3, #0
   2f31a:	d1f5      	bne.n	2f308 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2f31c:	687b      	ldr	r3, [r7, #4]
}
   2f31e:	0018      	movs	r0, r3
   2f320:	46bd      	mov	sp, r7
   2f322:	b005      	add	sp, #20
   2f324:	bd90      	pop	{r4, r7, pc}
   2f326:	46c0      	nop			; (mov r8, r8)
   2f328:	20004322 	.word	0x20004322
   2f32c:	0002573d 	.word	0x0002573d
   2f330:	00021de9 	.word	0x00021de9

0002f334 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2f334:	b580      	push	{r7, lr}
   2f336:	b082      	sub	sp, #8
   2f338:	af00      	add	r7, sp, #0
   2f33a:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2f33c:	687b      	ldr	r3, [r7, #4]
   2f33e:	681b      	ldr	r3, [r3, #0]
   2f340:	b25b      	sxtb	r3, r3
   2f342:	0018      	movs	r0, r3
   2f344:	4b06      	ldr	r3, [pc, #24]	; (2f360 <WINC1500_disconnect+0x2c>)
   2f346:	4798      	blx	r3
	n->socket=-1;
   2f348:	687b      	ldr	r3, [r7, #4]
   2f34a:	2201      	movs	r2, #1
   2f34c:	4252      	negs	r2, r2
   2f34e:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2f350:	4b04      	ldr	r3, [pc, #16]	; (2f364 <WINC1500_disconnect+0x30>)
   2f352:	2200      	movs	r2, #0
   2f354:	701a      	strb	r2, [r3, #0]
}
   2f356:	46c0      	nop			; (mov r8, r8)
   2f358:	46bd      	mov	sp, r7
   2f35a:	b002      	add	sp, #8
   2f35c:	bd80      	pop	{r7, pc}
   2f35e:	46c0      	nop			; (mov r8, r8)
   2f360:	00025a21 	.word	0x00025a21
   2f364:	20004321 	.word	0x20004321

0002f368 <NetworkInit>:


void NetworkInit(Network* n) {
   2f368:	b580      	push	{r7, lr}
   2f36a:	b082      	sub	sp, #8
   2f36c:	af00      	add	r7, sp, #0
   2f36e:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2f370:	687b      	ldr	r3, [r7, #4]
   2f372:	2201      	movs	r2, #1
   2f374:	4252      	negs	r2, r2
   2f376:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2f378:	687b      	ldr	r3, [r7, #4]
   2f37a:	4a06      	ldr	r2, [pc, #24]	; (2f394 <NetworkInit+0x2c>)
   2f37c:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2f37e:	687b      	ldr	r3, [r7, #4]
   2f380:	4a05      	ldr	r2, [pc, #20]	; (2f398 <NetworkInit+0x30>)
   2f382:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2f384:	687b      	ldr	r3, [r7, #4]
   2f386:	4a05      	ldr	r2, [pc, #20]	; (2f39c <NetworkInit+0x34>)
   2f388:	611a      	str	r2, [r3, #16]
}
   2f38a:	46c0      	nop			; (mov r8, r8)
   2f38c:	46bd      	mov	sp, r7
   2f38e:	b002      	add	sp, #8
   2f390:	bd80      	pop	{r7, pc}
   2f392:	46c0      	nop			; (mov r8, r8)
   2f394:	0002f1ed 	.word	0x0002f1ed
   2f398:	0002f2d9 	.word	0x0002f2d9
   2f39c:	0002f335 	.word	0x0002f335

0002f3a0 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2f3a0:	b580      	push	{r7, lr}
   2f3a2:	b088      	sub	sp, #32
   2f3a4:	af00      	add	r7, sp, #0
   2f3a6:	60f8      	str	r0, [r7, #12]
   2f3a8:	60b9      	str	r1, [r7, #8]
   2f3aa:	607a      	str	r2, [r7, #4]
   2f3ac:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2f3ae:	4b37      	ldr	r3, [pc, #220]	; (2f48c <ConnectNetwork+0xec>)
   2f3b0:	2200      	movs	r2, #0
   2f3b2:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2f3b4:	4b36      	ldr	r3, [pc, #216]	; (2f490 <ConnectNetwork+0xf0>)
   2f3b6:	68ba      	ldr	r2, [r7, #8]
   2f3b8:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2f3ba:	68bb      	ldr	r3, [r7, #8]
   2f3bc:	0018      	movs	r0, r3
   2f3be:	4b35      	ldr	r3, [pc, #212]	; (2f494 <ConnectNetwork+0xf4>)
   2f3c0:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2f3c2:	e002      	b.n	2f3ca <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2f3c4:	2000      	movs	r0, #0
   2f3c6:	4b34      	ldr	r3, [pc, #208]	; (2f498 <ConnectNetwork+0xf8>)
   2f3c8:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2f3ca:	4b30      	ldr	r3, [pc, #192]	; (2f48c <ConnectNetwork+0xec>)
   2f3cc:	781b      	ldrb	r3, [r3, #0]
   2f3ce:	2201      	movs	r2, #1
   2f3d0:	4053      	eors	r3, r2
   2f3d2:	b2db      	uxtb	r3, r3
   2f3d4:	2b00      	cmp	r3, #0
   2f3d6:	d1f5      	bne.n	2f3c4 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2f3d8:	4b30      	ldr	r3, [pc, #192]	; (2f49c <ConnectNetwork+0xfc>)
   2f3da:	681a      	ldr	r2, [r3, #0]
   2f3dc:	68fb      	ldr	r3, [r7, #12]
   2f3de:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2f3e0:	2310      	movs	r3, #16
   2f3e2:	18fb      	adds	r3, r7, r3
   2f3e4:	2202      	movs	r2, #2
   2f3e6:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2f3e8:	687b      	ldr	r3, [r7, #4]
   2f3ea:	b29b      	uxth	r3, r3
   2f3ec:	021b      	lsls	r3, r3, #8
   2f3ee:	b21a      	sxth	r2, r3
   2f3f0:	687b      	ldr	r3, [r7, #4]
   2f3f2:	b29b      	uxth	r3, r3
   2f3f4:	0a1b      	lsrs	r3, r3, #8
   2f3f6:	b29b      	uxth	r3, r3
   2f3f8:	b21b      	sxth	r3, r3
   2f3fa:	4313      	orrs	r3, r2
   2f3fc:	b21b      	sxth	r3, r3
   2f3fe:	b29a      	uxth	r2, r3
   2f400:	2310      	movs	r3, #16
   2f402:	18fb      	adds	r3, r7, r3
   2f404:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2f406:	4b25      	ldr	r3, [pc, #148]	; (2f49c <ConnectNetwork+0xfc>)
   2f408:	681b      	ldr	r3, [r3, #0]
   2f40a:	001a      	movs	r2, r3
   2f40c:	2310      	movs	r3, #16
   2f40e:	18fb      	adds	r3, r7, r3
   2f410:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2f412:	68fb      	ldr	r3, [r7, #12]
   2f414:	681b      	ldr	r3, [r3, #0]
   2f416:	2b00      	cmp	r3, #0
   2f418:	da0a      	bge.n	2f430 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2f41a:	683b      	ldr	r3, [r7, #0]
   2f41c:	b2db      	uxtb	r3, r3
   2f41e:	001a      	movs	r2, r3
   2f420:	2101      	movs	r1, #1
   2f422:	2002      	movs	r0, #2
   2f424:	4b1e      	ldr	r3, [pc, #120]	; (2f4a0 <ConnectNetwork+0x100>)
   2f426:	4798      	blx	r3
   2f428:	0003      	movs	r3, r0
   2f42a:	001a      	movs	r2, r3
   2f42c:	68fb      	ldr	r3, [r7, #12]
   2f42e:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2f430:	68fb      	ldr	r3, [r7, #12]
   2f432:	681b      	ldr	r3, [r3, #0]
   2f434:	3301      	adds	r3, #1
   2f436:	d108      	bne.n	2f44a <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2f438:	68fb      	ldr	r3, [r7, #12]
   2f43a:	681b      	ldr	r3, [r3, #0]
   2f43c:	b25b      	sxtb	r3, r3
   2f43e:	0018      	movs	r0, r3
   2f440:	4b18      	ldr	r3, [pc, #96]	; (2f4a4 <ConnectNetwork+0x104>)
   2f442:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2f444:	2309      	movs	r3, #9
   2f446:	425b      	negs	r3, r3
   2f448:	e01c      	b.n	2f484 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2f44a:	68fb      	ldr	r3, [r7, #12]
   2f44c:	681b      	ldr	r3, [r3, #0]
   2f44e:	b25b      	sxtb	r3, r3
   2f450:	2210      	movs	r2, #16
   2f452:	18b9      	adds	r1, r7, r2
   2f454:	2210      	movs	r2, #16
   2f456:	0018      	movs	r0, r3
   2f458:	4b13      	ldr	r3, [pc, #76]	; (2f4a8 <ConnectNetwork+0x108>)
   2f45a:	4798      	blx	r3
   2f45c:	1e03      	subs	r3, r0, #0
   2f45e:	d002      	beq.n	2f466 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2f460:	2309      	movs	r3, #9
   2f462:	425b      	negs	r3, r3
   2f464:	e00e      	b.n	2f484 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2f466:	4b11      	ldr	r3, [pc, #68]	; (2f4ac <ConnectNetwork+0x10c>)
   2f468:	2200      	movs	r2, #0
   2f46a:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2f46c:	e002      	b.n	2f474 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2f46e:	2000      	movs	r0, #0
   2f470:	4b09      	ldr	r3, [pc, #36]	; (2f498 <ConnectNetwork+0xf8>)
   2f472:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2f474:	4b0d      	ldr	r3, [pc, #52]	; (2f4ac <ConnectNetwork+0x10c>)
   2f476:	781b      	ldrb	r3, [r3, #0]
   2f478:	2201      	movs	r2, #1
   2f47a:	4053      	eors	r3, r2
   2f47c:	b2db      	uxtb	r3, r3
   2f47e:	2b00      	cmp	r3, #0
   2f480:	d1f5      	bne.n	2f46e <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2f482:	2300      	movs	r3, #0
   2f484:	0018      	movs	r0, r3
   2f486:	46bd      	mov	sp, r7
   2f488:	b008      	add	sp, #32
   2f48a:	bd80      	pop	{r7, pc}
   2f48c:	20004320 	.word	0x20004320
   2f490:	2000442c 	.word	0x2000442c
   2f494:	00025c69 	.word	0x00025c69
   2f498:	00021de9 	.word	0x00021de9
   2f49c:	20004318 	.word	0x20004318
   2f4a0:	00025415 	.word	0x00025415
   2f4a4:	00025a21 	.word	0x00025a21
   2f4a8:	00025629 	.word	0x00025629
   2f4ac:	20004321 	.word	0x20004321

0002f4b0 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2f4b0:	b580      	push	{r7, lr}
   2f4b2:	b084      	sub	sp, #16
   2f4b4:	af00      	add	r7, sp, #0
   2f4b6:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2f4b8:	687b      	ldr	r3, [r7, #4]
   2f4ba:	2b00      	cmp	r3, #0
   2f4bc:	d022      	beq.n	2f504 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f4be:	2300      	movs	r3, #0
   2f4c0:	60fb      	str	r3, [r7, #12]
   2f4c2:	e01b      	b.n	2f4fc <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2f4c4:	4a11      	ldr	r2, [pc, #68]	; (2f50c <allocateClient+0x5c>)
   2f4c6:	68fb      	ldr	r3, [r7, #12]
   2f4c8:	2164      	movs	r1, #100	; 0x64
   2f4ca:	434b      	muls	r3, r1
   2f4cc:	18d3      	adds	r3, r2, r3
   2f4ce:	3360      	adds	r3, #96	; 0x60
   2f4d0:	681b      	ldr	r3, [r3, #0]
   2f4d2:	2b00      	cmp	r3, #0
   2f4d4:	d10f      	bne.n	2f4f6 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2f4d6:	4a0d      	ldr	r2, [pc, #52]	; (2f50c <allocateClient+0x5c>)
   2f4d8:	68fb      	ldr	r3, [r7, #12]
   2f4da:	2164      	movs	r1, #100	; 0x64
   2f4dc:	434b      	muls	r3, r1
   2f4de:	18d3      	adds	r3, r2, r3
   2f4e0:	3360      	adds	r3, #96	; 0x60
   2f4e2:	687a      	ldr	r2, [r7, #4]
   2f4e4:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2f4e6:	68fb      	ldr	r3, [r7, #12]
   2f4e8:	2264      	movs	r2, #100	; 0x64
   2f4ea:	435a      	muls	r2, r3
   2f4ec:	4b07      	ldr	r3, [pc, #28]	; (2f50c <allocateClient+0x5c>)
   2f4ee:	18d2      	adds	r2, r2, r3
   2f4f0:	687b      	ldr	r3, [r7, #4]
   2f4f2:	61da      	str	r2, [r3, #28]
			return;
   2f4f4:	e007      	b.n	2f506 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f4f6:	68fb      	ldr	r3, [r7, #12]
   2f4f8:	3301      	adds	r3, #1
   2f4fa:	60fb      	str	r3, [r7, #12]
   2f4fc:	68fb      	ldr	r3, [r7, #12]
   2f4fe:	2b06      	cmp	r3, #6
   2f500:	d9e0      	bls.n	2f4c4 <allocateClient+0x14>
   2f502:	e000      	b.n	2f506 <allocateClient+0x56>
		return;
   2f504:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2f506:	46bd      	mov	sp, r7
   2f508:	b004      	add	sp, #16
   2f50a:	bd80      	pop	{r7, pc}
   2f50c:	20004430 	.word	0x20004430

0002f510 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2f510:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f512:	b089      	sub	sp, #36	; 0x24
   2f514:	af04      	add	r7, sp, #16
   2f516:	6078      	str	r0, [r7, #4]
   2f518:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2f51a:	687b      	ldr	r3, [r7, #4]
   2f51c:	2b00      	cmp	r3, #0
   2f51e:	d00a      	beq.n	2f536 <mqtt_init+0x26>
   2f520:	683b      	ldr	r3, [r7, #0]
   2f522:	2b00      	cmp	r3, #0
   2f524:	d007      	beq.n	2f536 <mqtt_init+0x26>
   2f526:	683b      	ldr	r3, [r7, #0]
   2f528:	691b      	ldr	r3, [r3, #16]
   2f52a:	2b00      	cmp	r3, #0
   2f52c:	d003      	beq.n	2f536 <mqtt_init+0x26>
   2f52e:	683b      	ldr	r3, [r7, #0]
   2f530:	689b      	ldr	r3, [r3, #8]
   2f532:	2b00      	cmp	r3, #0
   2f534:	d102      	bne.n	2f53c <mqtt_init+0x2c>
		return FAILURE;
   2f536:	2301      	movs	r3, #1
   2f538:	425b      	negs	r3, r3
   2f53a:	e034      	b.n	2f5a6 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2f53c:	683b      	ldr	r3, [r7, #0]
   2f53e:	889b      	ldrh	r3, [r3, #4]
   2f540:	001a      	movs	r2, r3
   2f542:	23fa      	movs	r3, #250	; 0xfa
   2f544:	009b      	lsls	r3, r3, #2
   2f546:	4353      	muls	r3, r2
   2f548:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2f54a:	687b      	ldr	r3, [r7, #4]
   2f54c:	3320      	adds	r3, #32
   2f54e:	0018      	movs	r0, r3
   2f550:	4b17      	ldr	r3, [pc, #92]	; (2f5b0 <mqtt_init+0xa0>)
   2f552:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2f554:	687b      	ldr	r3, [r7, #4]
   2f556:	3304      	adds	r3, #4
   2f558:	6839      	ldr	r1, [r7, #0]
   2f55a:	2218      	movs	r2, #24
   2f55c:	0018      	movs	r0, r3
   2f55e:	4b15      	ldr	r3, [pc, #84]	; (2f5b4 <mqtt_init+0xa4>)
   2f560:	4798      	blx	r3
	allocateClient(module);
   2f562:	687b      	ldr	r3, [r7, #4]
   2f564:	0018      	movs	r0, r3
   2f566:	4b14      	ldr	r3, [pc, #80]	; (2f5b8 <mqtt_init+0xa8>)
   2f568:	4798      	blx	r3
	
	if(module->client)
   2f56a:	687b      	ldr	r3, [r7, #4]
   2f56c:	69db      	ldr	r3, [r3, #28]
   2f56e:	2b00      	cmp	r3, #0
   2f570:	d017      	beq.n	2f5a2 <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2f572:	687b      	ldr	r3, [r7, #4]
   2f574:	69d8      	ldr	r0, [r3, #28]
   2f576:	687b      	ldr	r3, [r7, #4]
   2f578:	3320      	adds	r3, #32
   2f57a:	001c      	movs	r4, r3
   2f57c:	683b      	ldr	r3, [r7, #0]
   2f57e:	691e      	ldr	r6, [r3, #16]
   2f580:	683b      	ldr	r3, [r7, #0]
   2f582:	695a      	ldr	r2, [r3, #20]
   2f584:	683b      	ldr	r3, [r7, #0]
   2f586:	6899      	ldr	r1, [r3, #8]
   2f588:	683b      	ldr	r3, [r7, #0]
   2f58a:	68db      	ldr	r3, [r3, #12]
   2f58c:	68fd      	ldr	r5, [r7, #12]
   2f58e:	9302      	str	r3, [sp, #8]
   2f590:	9101      	str	r1, [sp, #4]
   2f592:	9200      	str	r2, [sp, #0]
   2f594:	0033      	movs	r3, r6
   2f596:	002a      	movs	r2, r5
   2f598:	0021      	movs	r1, r4
   2f59a:	4c08      	ldr	r4, [pc, #32]	; (2f5bc <mqtt_init+0xac>)
   2f59c:	47a0      	blx	r4
		return SUCCESS;
   2f59e:	2300      	movs	r3, #0
   2f5a0:	e001      	b.n	2f5a6 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2f5a2:	2301      	movs	r3, #1
   2f5a4:	425b      	negs	r3, r3
}
   2f5a6:	0018      	movs	r0, r3
   2f5a8:	46bd      	mov	sp, r7
   2f5aa:	b005      	add	sp, #20
   2f5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f5ae:	46c0      	nop			; (mov r8, r8)
   2f5b0:	0002f369 	.word	0x0002f369
   2f5b4:	0003484d 	.word	0x0003484d
   2f5b8:	0002f4b1 	.word	0x0002f4b1
   2f5bc:	0002e3e1 	.word	0x0002e3e1

0002f5c0 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2f5c0:	b580      	push	{r7, lr}
   2f5c2:	b082      	sub	sp, #8
   2f5c4:	af00      	add	r7, sp, #0
   2f5c6:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2f5c8:	687b      	ldr	r3, [r7, #4]
   2f5ca:	4a0c      	ldr	r2, [pc, #48]	; (2f5fc <mqtt_get_config_defaults+0x3c>)
   2f5cc:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2f5ce:	687b      	ldr	r3, [r7, #4]
   2f5d0:	2200      	movs	r2, #0
   2f5d2:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2f5d4:	687b      	ldr	r3, [r7, #4]
   2f5d6:	223c      	movs	r2, #60	; 0x3c
   2f5d8:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2f5da:	687b      	ldr	r3, [r7, #4]
   2f5dc:	2200      	movs	r2, #0
   2f5de:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2f5e0:	687b      	ldr	r3, [r7, #4]
   2f5e2:	2200      	movs	r2, #0
   2f5e4:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2f5e6:	687b      	ldr	r3, [r7, #4]
   2f5e8:	2200      	movs	r2, #0
   2f5ea:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2f5ec:	687b      	ldr	r3, [r7, #4]
   2f5ee:	2200      	movs	r2, #0
   2f5f0:	615a      	str	r2, [r3, #20]
}
   2f5f2:	46c0      	nop			; (mov r8, r8)
   2f5f4:	46bd      	mov	sp, r7
   2f5f6:	b002      	add	sp, #8
   2f5f8:	bd80      	pop	{r7, pc}
   2f5fa:	46c0      	nop			; (mov r8, r8)
   2f5fc:	0000075b 	.word	0x0000075b

0002f600 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2f600:	b580      	push	{r7, lr}
   2f602:	b082      	sub	sp, #8
   2f604:	af00      	add	r7, sp, #0
   2f606:	6078      	str	r0, [r7, #4]
   2f608:	6039      	str	r1, [r7, #0]
	if(module)
   2f60a:	687b      	ldr	r3, [r7, #4]
   2f60c:	2b00      	cmp	r3, #0
   2f60e:	d004      	beq.n	2f61a <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2f610:	687b      	ldr	r3, [r7, #4]
   2f612:	683a      	ldr	r2, [r7, #0]
   2f614:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2f616:	2300      	movs	r3, #0
   2f618:	e001      	b.n	2f61e <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2f61a:	2301      	movs	r3, #1
   2f61c:	425b      	negs	r3, r3
}
   2f61e:	0018      	movs	r0, r3
   2f620:	46bd      	mov	sp, r7
   2f622:	b002      	add	sp, #8
   2f624:	bd80      	pop	{r7, pc}
	...

0002f628 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2f628:	b580      	push	{r7, lr}
   2f62a:	b082      	sub	sp, #8
   2f62c:	af00      	add	r7, sp, #0
   2f62e:	603a      	str	r2, [r7, #0]
   2f630:	1dfb      	adds	r3, r7, #7
   2f632:	1c02      	adds	r2, r0, #0
   2f634:	701a      	strb	r2, [r3, #0]
   2f636:	1dbb      	adds	r3, r7, #6
   2f638:	1c0a      	adds	r2, r1, #0
   2f63a:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2f63c:	683a      	ldr	r2, [r7, #0]
   2f63e:	1dbb      	adds	r3, r7, #6
   2f640:	7819      	ldrb	r1, [r3, #0]
   2f642:	1dfb      	adds	r3, r7, #7
   2f644:	781b      	ldrb	r3, [r3, #0]
   2f646:	b25b      	sxtb	r3, r3
   2f648:	0018      	movs	r0, r3
   2f64a:	4b03      	ldr	r3, [pc, #12]	; (2f658 <mqtt_socket_event_handler+0x30>)
   2f64c:	4798      	blx	r3
}
   2f64e:	46c0      	nop			; (mov r8, r8)
   2f650:	46bd      	mov	sp, r7
   2f652:	b002      	add	sp, #8
   2f654:	bd80      	pop	{r7, pc}
   2f656:	46c0      	nop			; (mov r8, r8)
   2f658:	0002f0a5 	.word	0x0002f0a5

0002f65c <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2f65c:	b580      	push	{r7, lr}
   2f65e:	b082      	sub	sp, #8
   2f660:	af00      	add	r7, sp, #0
   2f662:	6078      	str	r0, [r7, #4]
   2f664:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2f666:	683a      	ldr	r2, [r7, #0]
   2f668:	687b      	ldr	r3, [r7, #4]
   2f66a:	0011      	movs	r1, r2
   2f66c:	0018      	movs	r0, r3
   2f66e:	4b03      	ldr	r3, [pc, #12]	; (2f67c <mqtt_socket_resolve_handler+0x20>)
   2f670:	4798      	blx	r3
}
   2f672:	46c0      	nop			; (mov r8, r8)
   2f674:	46bd      	mov	sp, r7
   2f676:	b002      	add	sp, #8
   2f678:	bd80      	pop	{r7, pc}
   2f67a:	46c0      	nop			; (mov r8, r8)
   2f67c:	0002f055 	.word	0x0002f055

0002f680 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2f680:	b590      	push	{r4, r7, lr}
   2f682:	b085      	sub	sp, #20
   2f684:	af00      	add	r7, sp, #0
   2f686:	6078      	str	r0, [r7, #4]
   2f688:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2f68a:	687b      	ldr	r3, [r7, #4]
   2f68c:	3320      	adds	r3, #32
   2f68e:	0018      	movs	r0, r3
   2f690:	687b      	ldr	r3, [r7, #4]
   2f692:	889b      	ldrh	r3, [r3, #4]
   2f694:	001a      	movs	r2, r3
   2f696:	687b      	ldr	r3, [r7, #4]
   2f698:	799b      	ldrb	r3, [r3, #6]
   2f69a:	6839      	ldr	r1, [r7, #0]
   2f69c:	4c09      	ldr	r4, [pc, #36]	; (2f6c4 <mqtt_connect+0x44>)
   2f69e:	47a0      	blx	r4
   2f6a0:	0003      	movs	r3, r0
   2f6a2:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2f6a4:	687b      	ldr	r3, [r7, #4]
   2f6a6:	681b      	ldr	r3, [r3, #0]
   2f6a8:	2b00      	cmp	r3, #0
   2f6aa:	d006      	beq.n	2f6ba <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2f6ac:	687b      	ldr	r3, [r7, #4]
   2f6ae:	681b      	ldr	r3, [r3, #0]
   2f6b0:	220c      	movs	r2, #12
   2f6b2:	18ba      	adds	r2, r7, r2
   2f6b4:	6878      	ldr	r0, [r7, #4]
   2f6b6:	2100      	movs	r1, #0
   2f6b8:	4798      	blx	r3
	return connResult.sock_connected.result;
   2f6ba:	68fb      	ldr	r3, [r7, #12]
}
   2f6bc:	0018      	movs	r0, r3
   2f6be:	46bd      	mov	sp, r7
   2f6c0:	b005      	add	sp, #20
   2f6c2:	bd90      	pop	{r4, r7, pc}
   2f6c4:	0002f3a1 	.word	0x0002f3a1

0002f6c8 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2f6c8:	b580      	push	{r7, lr}
   2f6ca:	b09c      	sub	sp, #112	; 0x70
   2f6cc:	af00      	add	r7, sp, #0
   2f6ce:	60f8      	str	r0, [r7, #12]
   2f6d0:	607a      	str	r2, [r7, #4]
   2f6d2:	603b      	str	r3, [r7, #0]
   2f6d4:	230b      	movs	r3, #11
   2f6d6:	18fb      	adds	r3, r7, r3
   2f6d8:	1c0a      	adds	r2, r1, #0
   2f6da:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2f6dc:	2310      	movs	r3, #16
   2f6de:	18fa      	adds	r2, r7, r3
   2f6e0:	4b31      	ldr	r3, [pc, #196]	; (2f7a8 <mqtt_connect_broker+0xe0>)
   2f6e2:	0010      	movs	r0, r2
   2f6e4:	0019      	movs	r1, r3
   2f6e6:	2358      	movs	r3, #88	; 0x58
   2f6e8:	001a      	movs	r2, r3
   2f6ea:	4b30      	ldr	r3, [pc, #192]	; (2f7ac <mqtt_connect_broker+0xe4>)
   2f6ec:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2f6ee:	2310      	movs	r3, #16
   2f6f0:	18fb      	adds	r3, r7, r3
   2f6f2:	2204      	movs	r2, #4
   2f6f4:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2f6f6:	2310      	movs	r3, #16
   2f6f8:	18fb      	adds	r3, r7, r3
   2f6fa:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2f6fc:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2f6fe:	2310      	movs	r3, #16
   2f700:	18fb      	adds	r3, r7, r3
   2f702:	687a      	ldr	r2, [r7, #4]
   2f704:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2f706:	2310      	movs	r3, #16
   2f708:	18fb      	adds	r3, r7, r3
   2f70a:	683a      	ldr	r2, [r7, #0]
   2f70c:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2f70e:	2310      	movs	r3, #16
   2f710:	18fb      	adds	r3, r7, r3
   2f712:	220b      	movs	r2, #11
   2f714:	18ba      	adds	r2, r7, r2
   2f716:	7812      	ldrb	r2, [r2, #0]
   2f718:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2f71a:	2310      	movs	r3, #16
   2f71c:	18fb      	adds	r3, r7, r3
   2f71e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2f720:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2f722:	2310      	movs	r3, #16
   2f724:	18fb      	adds	r3, r7, r3
   2f726:	2280      	movs	r2, #128	; 0x80
   2f728:	18ba      	adds	r2, r7, r2
   2f72a:	6812      	ldr	r2, [r2, #0]
   2f72c:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2f72e:	2310      	movs	r3, #16
   2f730:	18fb      	adds	r3, r7, r3
   2f732:	228c      	movs	r2, #140	; 0x8c
   2f734:	18ba      	adds	r2, r7, r2
   2f736:	213c      	movs	r1, #60	; 0x3c
   2f738:	7812      	ldrb	r2, [r2, #0]
   2f73a:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2f73c:	2310      	movs	r3, #16
   2f73e:	18fb      	adds	r3, r7, r3
   2f740:	2288      	movs	r2, #136	; 0x88
   2f742:	18ba      	adds	r2, r7, r2
   2f744:	213d      	movs	r1, #61	; 0x3d
   2f746:	7812      	ldrb	r2, [r2, #0]
   2f748:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2f74a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2f74c:	2b00      	cmp	r3, #0
   2f74e:	d008      	beq.n	2f762 <mqtt_connect_broker+0x9a>
   2f750:	2380      	movs	r3, #128	; 0x80
   2f752:	18fb      	adds	r3, r7, r3
   2f754:	681b      	ldr	r3, [r3, #0]
   2f756:	2b00      	cmp	r3, #0
   2f758:	d003      	beq.n	2f762 <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2f75a:	2310      	movs	r3, #16
   2f75c:	18fb      	adds	r3, r7, r3
   2f75e:	2201      	movs	r2, #1
   2f760:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2f762:	68fb      	ldr	r3, [r7, #12]
   2f764:	69db      	ldr	r3, [r3, #28]
   2f766:	2210      	movs	r2, #16
   2f768:	18ba      	adds	r2, r7, r2
   2f76a:	0011      	movs	r1, r2
   2f76c:	0018      	movs	r0, r3
   2f76e:	4b10      	ldr	r3, [pc, #64]	; (2f7b0 <mqtt_connect_broker+0xe8>)
   2f770:	4798      	blx	r3
   2f772:	0003      	movs	r3, r0
   2f774:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2f776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2f778:	b2da      	uxtb	r2, r3
   2f77a:	2368      	movs	r3, #104	; 0x68
   2f77c:	18fb      	adds	r3, r7, r3
   2f77e:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2f780:	68fb      	ldr	r3, [r7, #12]
   2f782:	681b      	ldr	r3, [r3, #0]
   2f784:	2b00      	cmp	r3, #0
   2f786:	d006      	beq.n	2f796 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2f788:	68fb      	ldr	r3, [r7, #12]
   2f78a:	681b      	ldr	r3, [r3, #0]
   2f78c:	2268      	movs	r2, #104	; 0x68
   2f78e:	18ba      	adds	r2, r7, r2
   2f790:	68f8      	ldr	r0, [r7, #12]
   2f792:	2101      	movs	r1, #1
   2f794:	4798      	blx	r3
	
	module->isConnected = true;
   2f796:	68fb      	ldr	r3, [r7, #12]
   2f798:	2234      	movs	r2, #52	; 0x34
   2f79a:	2101      	movs	r1, #1
   2f79c:	5499      	strb	r1, [r3, r2]
	return rc;
   2f79e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2f7a0:	0018      	movs	r0, r3
   2f7a2:	46bd      	mov	sp, r7
   2f7a4:	b01c      	add	sp, #112	; 0x70
   2f7a6:	bd80      	pop	{r7, pc}
   2f7a8:	00039bac 	.word	0x00039bac
   2f7ac:	0003484d 	.word	0x0003484d
   2f7b0:	0002eaf1 	.word	0x0002eaf1

0002f7b4 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2f7b4:	b580      	push	{r7, lr}
   2f7b6:	b084      	sub	sp, #16
   2f7b8:	af00      	add	r7, sp, #0
   2f7ba:	6078      	str	r0, [r7, #4]
   2f7bc:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2f7be:	687b      	ldr	r3, [r7, #4]
   2f7c0:	69db      	ldr	r3, [r3, #28]
   2f7c2:	0018      	movs	r0, r3
   2f7c4:	4b0c      	ldr	r3, [pc, #48]	; (2f7f8 <mqtt_disconnect+0x44>)
   2f7c6:	4798      	blx	r3
   2f7c8:	0003      	movs	r3, r0
   2f7ca:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2f7cc:	68fb      	ldr	r3, [r7, #12]
   2f7ce:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2f7d0:	687b      	ldr	r3, [r7, #4]
   2f7d2:	681b      	ldr	r3, [r3, #0]
   2f7d4:	2b00      	cmp	r3, #0
   2f7d6:	d006      	beq.n	2f7e6 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2f7d8:	687b      	ldr	r3, [r7, #4]
   2f7da:	681b      	ldr	r3, [r3, #0]
   2f7dc:	2208      	movs	r2, #8
   2f7de:	18ba      	adds	r2, r7, r2
   2f7e0:	6878      	ldr	r0, [r7, #4]
   2f7e2:	2105      	movs	r1, #5
   2f7e4:	4798      	blx	r3
	
	module->isConnected = false;
   2f7e6:	687b      	ldr	r3, [r7, #4]
   2f7e8:	2234      	movs	r2, #52	; 0x34
   2f7ea:	2100      	movs	r1, #0
   2f7ec:	5499      	strb	r1, [r3, r2]
	return rc;
   2f7ee:	68fb      	ldr	r3, [r7, #12]
}
   2f7f0:	0018      	movs	r0, r3
   2f7f2:	46bd      	mov	sp, r7
   2f7f4:	b004      	add	sp, #16
   2f7f6:	bd80      	pop	{r7, pc}
   2f7f8:	0002ef7d 	.word	0x0002ef7d

0002f7fc <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   2f7fc:	b580      	push	{r7, lr}
   2f7fe:	b08a      	sub	sp, #40	; 0x28
   2f800:	af00      	add	r7, sp, #0
   2f802:	60f8      	str	r0, [r7, #12]
   2f804:	60b9      	str	r1, [r7, #8]
   2f806:	607a      	str	r2, [r7, #4]
   2f808:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2f80a:	2314      	movs	r3, #20
   2f80c:	18fb      	adds	r3, r7, r3
   2f80e:	2230      	movs	r2, #48	; 0x30
   2f810:	18ba      	adds	r2, r7, r2
   2f812:	7812      	ldrb	r2, [r2, #0]
   2f814:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   2f816:	2314      	movs	r3, #20
   2f818:	18fb      	adds	r3, r7, r3
   2f81a:	687a      	ldr	r2, [r7, #4]
   2f81c:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   2f81e:	2314      	movs	r3, #20
   2f820:	18fb      	adds	r3, r7, r3
   2f822:	683a      	ldr	r2, [r7, #0]
   2f824:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   2f826:	2314      	movs	r3, #20
   2f828:	18fb      	adds	r3, r7, r3
   2f82a:	2234      	movs	r2, #52	; 0x34
   2f82c:	18ba      	adds	r2, r7, r2
   2f82e:	7812      	ldrb	r2, [r2, #0]
   2f830:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   2f832:	68fb      	ldr	r3, [r7, #12]
   2f834:	69db      	ldr	r3, [r3, #28]
   2f836:	2214      	movs	r2, #20
   2f838:	18ba      	adds	r2, r7, r2
   2f83a:	68b9      	ldr	r1, [r7, #8]
   2f83c:	0018      	movs	r0, r3
   2f83e:	4b09      	ldr	r3, [pc, #36]	; (2f864 <mqtt_publish+0x68>)
   2f840:	4798      	blx	r3
   2f842:	0003      	movs	r3, r0
   2f844:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   2f846:	68fb      	ldr	r3, [r7, #12]
   2f848:	681b      	ldr	r3, [r3, #0]
   2f84a:	2b00      	cmp	r3, #0
   2f84c:	d005      	beq.n	2f85a <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   2f84e:	68fb      	ldr	r3, [r7, #12]
   2f850:	681b      	ldr	r3, [r3, #0]
   2f852:	68f8      	ldr	r0, [r7, #12]
   2f854:	2200      	movs	r2, #0
   2f856:	2102      	movs	r1, #2
   2f858:	4798      	blx	r3
	
	return rc;
   2f85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f85c:	0018      	movs	r0, r3
   2f85e:	46bd      	mov	sp, r7
   2f860:	b00a      	add	sp, #40	; 0x28
   2f862:	bd80      	pop	{r7, pc}
   2f864:	0002edbd 	.word	0x0002edbd

0002f868 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2f868:	b590      	push	{r4, r7, lr}
   2f86a:	b087      	sub	sp, #28
   2f86c:	af00      	add	r7, sp, #0
   2f86e:	60f8      	str	r0, [r7, #12]
   2f870:	60b9      	str	r1, [r7, #8]
   2f872:	603b      	str	r3, [r7, #0]
   2f874:	1dfb      	adds	r3, r7, #7
   2f876:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2f878:	68fb      	ldr	r3, [r7, #12]
   2f87a:	69d8      	ldr	r0, [r3, #28]
   2f87c:	683c      	ldr	r4, [r7, #0]
   2f87e:	1dfb      	adds	r3, r7, #7
   2f880:	781a      	ldrb	r2, [r3, #0]
   2f882:	68b9      	ldr	r1, [r7, #8]
   2f884:	0023      	movs	r3, r4
   2f886:	4c09      	ldr	r4, [pc, #36]	; (2f8ac <mqtt_subscribe+0x44>)
   2f888:	47a0      	blx	r4
   2f88a:	0003      	movs	r3, r0
   2f88c:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   2f88e:	68fb      	ldr	r3, [r7, #12]
   2f890:	681b      	ldr	r3, [r3, #0]
   2f892:	2b00      	cmp	r3, #0
   2f894:	d005      	beq.n	2f8a2 <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2f896:	68fb      	ldr	r3, [r7, #12]
   2f898:	681b      	ldr	r3, [r3, #0]
   2f89a:	68f8      	ldr	r0, [r7, #12]
   2f89c:	2200      	movs	r2, #0
   2f89e:	2103      	movs	r1, #3
   2f8a0:	4798      	blx	r3
	
	return rc;
   2f8a2:	697b      	ldr	r3, [r7, #20]
}
   2f8a4:	0018      	movs	r0, r3
   2f8a6:	46bd      	mov	sp, r7
   2f8a8:	b007      	add	sp, #28
   2f8aa:	bd90      	pop	{r4, r7, pc}
   2f8ac:	0002ec31 	.word	0x0002ec31

0002f8b0 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2f8b0:	b580      	push	{r7, lr}
   2f8b2:	b082      	sub	sp, #8
   2f8b4:	af00      	add	r7, sp, #0
   2f8b6:	6078      	str	r0, [r7, #4]
   2f8b8:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   2f8ba:	687b      	ldr	r3, [r7, #4]
   2f8bc:	69db      	ldr	r3, [r3, #28]
   2f8be:	683a      	ldr	r2, [r7, #0]
   2f8c0:	0011      	movs	r1, r2
   2f8c2:	0018      	movs	r0, r3
   2f8c4:	4b03      	ldr	r3, [pc, #12]	; (2f8d4 <mqtt_yield+0x24>)
   2f8c6:	4798      	blx	r3
   2f8c8:	0003      	movs	r3, r0
   2f8ca:	0018      	movs	r0, r3
   2f8cc:	46bd      	mov	sp, r7
   2f8ce:	b002      	add	sp, #8
   2f8d0:	bd80      	pop	{r7, pc}
   2f8d2:	46c0      	nop			; (mov r8, r8)
   2f8d4:	0002ea39 	.word	0x0002ea39

0002f8d8 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   2f8d8:	b590      	push	{r4, r7, lr}
   2f8da:	b085      	sub	sp, #20
   2f8dc:	af00      	add	r7, sp, #0
   2f8de:	6078      	str	r0, [r7, #4]
	int len = 0;
   2f8e0:	2300      	movs	r3, #0
   2f8e2:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   2f8e4:	687b      	ldr	r3, [r7, #4]
   2f8e6:	7a1b      	ldrb	r3, [r3, #8]
   2f8e8:	2b03      	cmp	r3, #3
   2f8ea:	d102      	bne.n	2f8f2 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   2f8ec:	230c      	movs	r3, #12
   2f8ee:	60fb      	str	r3, [r7, #12]
   2f8f0:	e005      	b.n	2f8fe <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   2f8f2:	687b      	ldr	r3, [r7, #4]
   2f8f4:	7a1b      	ldrb	r3, [r3, #8]
   2f8f6:	2b04      	cmp	r3, #4
   2f8f8:	d101      	bne.n	2f8fe <MQTTSerialize_connectLength+0x26>
		len = 10;
   2f8fa:	230a      	movs	r3, #10
   2f8fc:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   2f8fe:	687b      	ldr	r3, [r7, #4]
   2f900:	68d8      	ldr	r0, [r3, #12]
   2f902:	6919      	ldr	r1, [r3, #16]
   2f904:	695a      	ldr	r2, [r3, #20]
   2f906:	4b25      	ldr	r3, [pc, #148]	; (2f99c <MQTTSerialize_connectLength+0xc4>)
   2f908:	4798      	blx	r3
   2f90a:	0003      	movs	r3, r0
   2f90c:	3302      	adds	r3, #2
   2f90e:	68fa      	ldr	r2, [r7, #12]
   2f910:	18d3      	adds	r3, r2, r3
   2f912:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   2f914:	687b      	ldr	r3, [r7, #4]
   2f916:	7edb      	ldrb	r3, [r3, #27]
   2f918:	2b00      	cmp	r3, #0
   2f91a:	d013      	beq.n	2f944 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   2f91c:	687b      	ldr	r3, [r7, #4]
   2f91e:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2f920:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2f922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2f924:	4b1d      	ldr	r3, [pc, #116]	; (2f99c <MQTTSerialize_connectLength+0xc4>)
   2f926:	4798      	blx	r3
   2f928:	0003      	movs	r3, r0
   2f92a:	1c9c      	adds	r4, r3, #2
   2f92c:	687b      	ldr	r3, [r7, #4]
   2f92e:	6b18      	ldr	r0, [r3, #48]	; 0x30
   2f930:	6b59      	ldr	r1, [r3, #52]	; 0x34
   2f932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2f934:	4b19      	ldr	r3, [pc, #100]	; (2f99c <MQTTSerialize_connectLength+0xc4>)
   2f936:	4798      	blx	r3
   2f938:	0003      	movs	r3, r0
   2f93a:	18e3      	adds	r3, r4, r3
   2f93c:	3302      	adds	r3, #2
   2f93e:	68fa      	ldr	r2, [r7, #12]
   2f940:	18d3      	adds	r3, r2, r3
   2f942:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   2f944:	687b      	ldr	r3, [r7, #4]
   2f946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2f948:	2b00      	cmp	r3, #0
   2f94a:	d103      	bne.n	2f954 <MQTTSerialize_connectLength+0x7c>
   2f94c:	687b      	ldr	r3, [r7, #4]
   2f94e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f950:	2b00      	cmp	r3, #0
   2f952:	d00a      	beq.n	2f96a <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   2f954:	687b      	ldr	r3, [r7, #4]
   2f956:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2f958:	6c59      	ldr	r1, [r3, #68]	; 0x44
   2f95a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2f95c:	4b0f      	ldr	r3, [pc, #60]	; (2f99c <MQTTSerialize_connectLength+0xc4>)
   2f95e:	4798      	blx	r3
   2f960:	0003      	movs	r3, r0
   2f962:	3302      	adds	r3, #2
   2f964:	68fa      	ldr	r2, [r7, #12]
   2f966:	18d3      	adds	r3, r2, r3
   2f968:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   2f96a:	687b      	ldr	r3, [r7, #4]
   2f96c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f96e:	2b00      	cmp	r3, #0
   2f970:	d103      	bne.n	2f97a <MQTTSerialize_connectLength+0xa2>
   2f972:	687b      	ldr	r3, [r7, #4]
   2f974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f976:	2b00      	cmp	r3, #0
   2f978:	d00a      	beq.n	2f990 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   2f97a:	687b      	ldr	r3, [r7, #4]
   2f97c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2f97e:	6d19      	ldr	r1, [r3, #80]	; 0x50
   2f980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2f982:	4b06      	ldr	r3, [pc, #24]	; (2f99c <MQTTSerialize_connectLength+0xc4>)
   2f984:	4798      	blx	r3
   2f986:	0003      	movs	r3, r0
   2f988:	3302      	adds	r3, #2
   2f98a:	68fa      	ldr	r2, [r7, #12]
   2f98c:	18d3      	adds	r3, r2, r3
   2f98e:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   2f990:	68fb      	ldr	r3, [r7, #12]
}
   2f992:	0018      	movs	r0, r3
   2f994:	46bd      	mov	sp, r7
   2f996:	b005      	add	sp, #20
   2f998:	bd90      	pop	{r4, r7, pc}
   2f99a:	46c0      	nop			; (mov r8, r8)
   2f99c:	00030349 	.word	0x00030349

0002f9a0 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   2f9a0:	b590      	push	{r4, r7, lr}
   2f9a2:	b08b      	sub	sp, #44	; 0x2c
   2f9a4:	af00      	add	r7, sp, #0
   2f9a6:	60f8      	str	r0, [r7, #12]
   2f9a8:	60b9      	str	r1, [r7, #8]
   2f9aa:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   2f9ac:	68fb      	ldr	r3, [r7, #12]
   2f9ae:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   2f9b0:	2300      	movs	r3, #0
   2f9b2:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   2f9b4:	2300      	movs	r3, #0
   2f9b6:	617b      	str	r3, [r7, #20]
	int len = 0;
   2f9b8:	2300      	movs	r3, #0
   2f9ba:	623b      	str	r3, [r7, #32]
	int rc = -1;
   2f9bc:	2301      	movs	r3, #1
   2f9be:	425b      	negs	r3, r3
   2f9c0:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   2f9c2:	687b      	ldr	r3, [r7, #4]
   2f9c4:	0018      	movs	r0, r3
   2f9c6:	4b8c      	ldr	r3, [pc, #560]	; (2fbf8 <MQTTSerialize_connect+0x258>)
   2f9c8:	4798      	blx	r3
   2f9ca:	0003      	movs	r3, r0
   2f9cc:	623b      	str	r3, [r7, #32]
   2f9ce:	6a3b      	ldr	r3, [r7, #32]
   2f9d0:	0018      	movs	r0, r3
   2f9d2:	4b8a      	ldr	r3, [pc, #552]	; (2fbfc <MQTTSerialize_connect+0x25c>)
   2f9d4:	4798      	blx	r3
   2f9d6:	0002      	movs	r2, r0
   2f9d8:	68bb      	ldr	r3, [r7, #8]
   2f9da:	429a      	cmp	r2, r3
   2f9dc:	dd03      	ble.n	2f9e6 <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f9de:	2302      	movs	r3, #2
   2f9e0:	425b      	negs	r3, r3
   2f9e2:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2f9e4:	e103      	b.n	2fbee <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   2f9e6:	2318      	movs	r3, #24
   2f9e8:	18fb      	adds	r3, r7, r3
   2f9ea:	2200      	movs	r2, #0
   2f9ec:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   2f9ee:	2318      	movs	r3, #24
   2f9f0:	18fb      	adds	r3, r7, r3
   2f9f2:	781a      	ldrb	r2, [r3, #0]
   2f9f4:	210f      	movs	r1, #15
   2f9f6:	400a      	ands	r2, r1
   2f9f8:	1c11      	adds	r1, r2, #0
   2f9fa:	2210      	movs	r2, #16
   2f9fc:	430a      	orrs	r2, r1
   2f9fe:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2fa00:	2318      	movs	r3, #24
   2fa02:	18fb      	adds	r3, r7, r3
   2fa04:	781a      	ldrb	r2, [r3, #0]
   2fa06:	231c      	movs	r3, #28
   2fa08:	18fb      	adds	r3, r7, r3
   2fa0a:	0011      	movs	r1, r2
   2fa0c:	0018      	movs	r0, r3
   2fa0e:	4b7c      	ldr	r3, [pc, #496]	; (2fc00 <MQTTSerialize_connect+0x260>)
   2fa10:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   2fa12:	69fb      	ldr	r3, [r7, #28]
   2fa14:	6a3a      	ldr	r2, [r7, #32]
   2fa16:	0011      	movs	r1, r2
   2fa18:	0018      	movs	r0, r3
   2fa1a:	4b7a      	ldr	r3, [pc, #488]	; (2fc04 <MQTTSerialize_connect+0x264>)
   2fa1c:	4798      	blx	r3
   2fa1e:	0002      	movs	r2, r0
   2fa20:	69fb      	ldr	r3, [r7, #28]
   2fa22:	189b      	adds	r3, r3, r2
   2fa24:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   2fa26:	687b      	ldr	r3, [r7, #4]
   2fa28:	7a1b      	ldrb	r3, [r3, #8]
   2fa2a:	2b04      	cmp	r3, #4
   2fa2c:	d10d      	bne.n	2fa4a <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   2fa2e:	4a76      	ldr	r2, [pc, #472]	; (2fc08 <MQTTSerialize_connect+0x268>)
   2fa30:	231c      	movs	r3, #28
   2fa32:	18fb      	adds	r3, r7, r3
   2fa34:	0011      	movs	r1, r2
   2fa36:	0018      	movs	r0, r3
   2fa38:	4b74      	ldr	r3, [pc, #464]	; (2fc0c <MQTTSerialize_connect+0x26c>)
   2fa3a:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   2fa3c:	231c      	movs	r3, #28
   2fa3e:	18fb      	adds	r3, r7, r3
   2fa40:	2104      	movs	r1, #4
   2fa42:	0018      	movs	r0, r3
   2fa44:	4b6e      	ldr	r3, [pc, #440]	; (2fc00 <MQTTSerialize_connect+0x260>)
   2fa46:	4798      	blx	r3
   2fa48:	e00c      	b.n	2fa64 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   2fa4a:	4a71      	ldr	r2, [pc, #452]	; (2fc10 <MQTTSerialize_connect+0x270>)
   2fa4c:	231c      	movs	r3, #28
   2fa4e:	18fb      	adds	r3, r7, r3
   2fa50:	0011      	movs	r1, r2
   2fa52:	0018      	movs	r0, r3
   2fa54:	4b6d      	ldr	r3, [pc, #436]	; (2fc0c <MQTTSerialize_connect+0x26c>)
   2fa56:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   2fa58:	231c      	movs	r3, #28
   2fa5a:	18fb      	adds	r3, r7, r3
   2fa5c:	2103      	movs	r1, #3
   2fa5e:	0018      	movs	r0, r3
   2fa60:	4b67      	ldr	r3, [pc, #412]	; (2fc00 <MQTTSerialize_connect+0x260>)
   2fa62:	4798      	blx	r3
	}

	flags.all = 0;
   2fa64:	2314      	movs	r3, #20
   2fa66:	18fb      	adds	r3, r7, r3
   2fa68:	2200      	movs	r2, #0
   2fa6a:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   2fa6c:	687b      	ldr	r3, [r7, #4]
   2fa6e:	7e9b      	ldrb	r3, [r3, #26]
   2fa70:	1c1a      	adds	r2, r3, #0
   2fa72:	2301      	movs	r3, #1
   2fa74:	4013      	ands	r3, r2
   2fa76:	b2da      	uxtb	r2, r3
   2fa78:	2314      	movs	r3, #20
   2fa7a:	18fb      	adds	r3, r7, r3
   2fa7c:	2101      	movs	r1, #1
   2fa7e:	400a      	ands	r2, r1
   2fa80:	1890      	adds	r0, r2, r2
   2fa82:	781a      	ldrb	r2, [r3, #0]
   2fa84:	2102      	movs	r1, #2
   2fa86:	438a      	bics	r2, r1
   2fa88:	1c11      	adds	r1, r2, #0
   2fa8a:	1c02      	adds	r2, r0, #0
   2fa8c:	430a      	orrs	r2, r1
   2fa8e:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   2fa90:	687b      	ldr	r3, [r7, #4]
   2fa92:	7edb      	ldrb	r3, [r3, #27]
   2fa94:	1e5a      	subs	r2, r3, #1
   2fa96:	4193      	sbcs	r3, r2
   2fa98:	b2da      	uxtb	r2, r3
   2fa9a:	2314      	movs	r3, #20
   2fa9c:	18fb      	adds	r3, r7, r3
   2fa9e:	2101      	movs	r1, #1
   2faa0:	400a      	ands	r2, r1
   2faa2:	0090      	lsls	r0, r2, #2
   2faa4:	781a      	ldrb	r2, [r3, #0]
   2faa6:	2104      	movs	r1, #4
   2faa8:	438a      	bics	r2, r1
   2faaa:	1c11      	adds	r1, r2, #0
   2faac:	1c02      	adds	r2, r0, #0
   2faae:	430a      	orrs	r2, r1
   2fab0:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   2fab2:	2314      	movs	r3, #20
   2fab4:	18fb      	adds	r3, r7, r3
   2fab6:	781b      	ldrb	r3, [r3, #0]
   2fab8:	2204      	movs	r2, #4
   2faba:	4013      	ands	r3, r2
   2fabc:	b2db      	uxtb	r3, r3
   2fabe:	2b00      	cmp	r3, #0
   2fac0:	d025      	beq.n	2fb0e <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   2fac2:	687b      	ldr	r3, [r7, #4]
   2fac4:	223d      	movs	r2, #61	; 0x3d
   2fac6:	5c9b      	ldrb	r3, [r3, r2]
   2fac8:	1c1a      	adds	r2, r3, #0
   2faca:	2303      	movs	r3, #3
   2facc:	4013      	ands	r3, r2
   2face:	b2da      	uxtb	r2, r3
   2fad0:	2314      	movs	r3, #20
   2fad2:	18fb      	adds	r3, r7, r3
   2fad4:	2103      	movs	r1, #3
   2fad6:	400a      	ands	r2, r1
   2fad8:	00d0      	lsls	r0, r2, #3
   2fada:	781a      	ldrb	r2, [r3, #0]
   2fadc:	2118      	movs	r1, #24
   2fade:	438a      	bics	r2, r1
   2fae0:	1c11      	adds	r1, r2, #0
   2fae2:	1c02      	adds	r2, r0, #0
   2fae4:	430a      	orrs	r2, r1
   2fae6:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   2fae8:	687b      	ldr	r3, [r7, #4]
   2faea:	223c      	movs	r2, #60	; 0x3c
   2faec:	5c9b      	ldrb	r3, [r3, r2]
   2faee:	1c1a      	adds	r2, r3, #0
   2faf0:	2301      	movs	r3, #1
   2faf2:	4013      	ands	r3, r2
   2faf4:	b2da      	uxtb	r2, r3
   2faf6:	2314      	movs	r3, #20
   2faf8:	18fb      	adds	r3, r7, r3
   2fafa:	2101      	movs	r1, #1
   2fafc:	400a      	ands	r2, r1
   2fafe:	0150      	lsls	r0, r2, #5
   2fb00:	781a      	ldrb	r2, [r3, #0]
   2fb02:	2120      	movs	r1, #32
   2fb04:	438a      	bics	r2, r1
   2fb06:	1c11      	adds	r1, r2, #0
   2fb08:	1c02      	adds	r2, r0, #0
   2fb0a:	430a      	orrs	r2, r1
   2fb0c:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   2fb0e:	687b      	ldr	r3, [r7, #4]
   2fb10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2fb12:	2b00      	cmp	r3, #0
   2fb14:	d103      	bne.n	2fb1e <MQTTSerialize_connect+0x17e>
   2fb16:	687b      	ldr	r3, [r7, #4]
   2fb18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2fb1a:	2b00      	cmp	r3, #0
   2fb1c:	d006      	beq.n	2fb2c <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   2fb1e:	2314      	movs	r3, #20
   2fb20:	18fb      	adds	r3, r7, r3
   2fb22:	781a      	ldrb	r2, [r3, #0]
   2fb24:	2180      	movs	r1, #128	; 0x80
   2fb26:	4249      	negs	r1, r1
   2fb28:	430a      	orrs	r2, r1
   2fb2a:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   2fb2c:	687b      	ldr	r3, [r7, #4]
   2fb2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fb30:	2b00      	cmp	r3, #0
   2fb32:	d103      	bne.n	2fb3c <MQTTSerialize_connect+0x19c>
   2fb34:	687b      	ldr	r3, [r7, #4]
   2fb36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2fb38:	2b00      	cmp	r3, #0
   2fb3a:	d005      	beq.n	2fb48 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   2fb3c:	2314      	movs	r3, #20
   2fb3e:	18fb      	adds	r3, r7, r3
   2fb40:	781a      	ldrb	r2, [r3, #0]
   2fb42:	2140      	movs	r1, #64	; 0x40
   2fb44:	430a      	orrs	r2, r1
   2fb46:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   2fb48:	2314      	movs	r3, #20
   2fb4a:	18fb      	adds	r3, r7, r3
   2fb4c:	781a      	ldrb	r2, [r3, #0]
   2fb4e:	231c      	movs	r3, #28
   2fb50:	18fb      	adds	r3, r7, r3
   2fb52:	0011      	movs	r1, r2
   2fb54:	0018      	movs	r0, r3
   2fb56:	4b2a      	ldr	r3, [pc, #168]	; (2fc00 <MQTTSerialize_connect+0x260>)
   2fb58:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   2fb5a:	687b      	ldr	r3, [r7, #4]
   2fb5c:	8b1b      	ldrh	r3, [r3, #24]
   2fb5e:	001a      	movs	r2, r3
   2fb60:	231c      	movs	r3, #28
   2fb62:	18fb      	adds	r3, r7, r3
   2fb64:	0011      	movs	r1, r2
   2fb66:	0018      	movs	r0, r3
   2fb68:	4b2a      	ldr	r3, [pc, #168]	; (2fc14 <MQTTSerialize_connect+0x274>)
   2fb6a:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   2fb6c:	687b      	ldr	r3, [r7, #4]
   2fb6e:	221c      	movs	r2, #28
   2fb70:	18b8      	adds	r0, r7, r2
   2fb72:	68d9      	ldr	r1, [r3, #12]
   2fb74:	691a      	ldr	r2, [r3, #16]
   2fb76:	695b      	ldr	r3, [r3, #20]
   2fb78:	4c27      	ldr	r4, [pc, #156]	; (2fc18 <MQTTSerialize_connect+0x278>)
   2fb7a:	47a0      	blx	r4
	if (options->willFlag)
   2fb7c:	687b      	ldr	r3, [r7, #4]
   2fb7e:	7edb      	ldrb	r3, [r3, #27]
   2fb80:	2b00      	cmp	r3, #0
   2fb82:	d00f      	beq.n	2fba4 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   2fb84:	687b      	ldr	r3, [r7, #4]
   2fb86:	221c      	movs	r2, #28
   2fb88:	18b8      	adds	r0, r7, r2
   2fb8a:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2fb8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2fb8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2fb90:	4c21      	ldr	r4, [pc, #132]	; (2fc18 <MQTTSerialize_connect+0x278>)
   2fb92:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   2fb94:	687b      	ldr	r3, [r7, #4]
   2fb96:	221c      	movs	r2, #28
   2fb98:	18b8      	adds	r0, r7, r2
   2fb9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2fb9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2fb9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2fba0:	4c1d      	ldr	r4, [pc, #116]	; (2fc18 <MQTTSerialize_connect+0x278>)
   2fba2:	47a0      	blx	r4
	}
	if (flags.bits.username)
   2fba4:	2314      	movs	r3, #20
   2fba6:	18fb      	adds	r3, r7, r3
   2fba8:	781b      	ldrb	r3, [r3, #0]
   2fbaa:	227f      	movs	r2, #127	; 0x7f
   2fbac:	4393      	bics	r3, r2
   2fbae:	b2db      	uxtb	r3, r3
   2fbb0:	2b00      	cmp	r3, #0
   2fbb2:	d007      	beq.n	2fbc4 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   2fbb4:	687b      	ldr	r3, [r7, #4]
   2fbb6:	221c      	movs	r2, #28
   2fbb8:	18b8      	adds	r0, r7, r2
   2fbba:	6c19      	ldr	r1, [r3, #64]	; 0x40
   2fbbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2fbbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2fbc0:	4c15      	ldr	r4, [pc, #84]	; (2fc18 <MQTTSerialize_connect+0x278>)
   2fbc2:	47a0      	blx	r4
	if (flags.bits.password)
   2fbc4:	2314      	movs	r3, #20
   2fbc6:	18fb      	adds	r3, r7, r3
   2fbc8:	781b      	ldrb	r3, [r3, #0]
   2fbca:	2240      	movs	r2, #64	; 0x40
   2fbcc:	4013      	ands	r3, r2
   2fbce:	b2db      	uxtb	r3, r3
   2fbd0:	2b00      	cmp	r3, #0
   2fbd2:	d007      	beq.n	2fbe4 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   2fbd4:	687b      	ldr	r3, [r7, #4]
   2fbd6:	221c      	movs	r2, #28
   2fbd8:	18b8      	adds	r0, r7, r2
   2fbda:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   2fbdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2fbde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2fbe0:	4c0d      	ldr	r4, [pc, #52]	; (2fc18 <MQTTSerialize_connect+0x278>)
   2fbe2:	47a0      	blx	r4

	rc = ptr - buf;
   2fbe4:	69fb      	ldr	r3, [r7, #28]
   2fbe6:	001a      	movs	r2, r3
   2fbe8:	68fb      	ldr	r3, [r7, #12]
   2fbea:	1ad3      	subs	r3, r2, r3
   2fbec:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   2fbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fbf0:	0018      	movs	r0, r3
   2fbf2:	46bd      	mov	sp, r7
   2fbf4:	b00b      	add	sp, #44	; 0x2c
   2fbf6:	bd90      	pop	{r4, r7, pc}
   2fbf8:	0002f8d9 	.word	0x0002f8d9
   2fbfc:	0003006d 	.word	0x0003006d
   2fc00:	0003018f 	.word	0x0003018f
   2fc04:	0002ff75 	.word	0x0002ff75
   2fc08:	00039c04 	.word	0x00039c04
   2fc0c:	00030211 	.word	0x00030211
   2fc10:	00039c0c 	.word	0x00039c0c
   2fc14:	000301b9 	.word	0x000301b9
   2fc18:	00030261 	.word	0x00030261

0002fc1c <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   2fc1c:	b580      	push	{r7, lr}
   2fc1e:	b08a      	sub	sp, #40	; 0x28
   2fc20:	af00      	add	r7, sp, #0
   2fc22:	60f8      	str	r0, [r7, #12]
   2fc24:	60b9      	str	r1, [r7, #8]
   2fc26:	607a      	str	r2, [r7, #4]
   2fc28:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2fc2a:	2300      	movs	r3, #0
   2fc2c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2fc2e:	687b      	ldr	r3, [r7, #4]
   2fc30:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2fc32:	2300      	movs	r3, #0
   2fc34:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2fc36:	2300      	movs	r3, #0
   2fc38:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   2fc3a:	2300      	movs	r3, #0
   2fc3c:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2fc3e:	2318      	movs	r3, #24
   2fc40:	18fb      	adds	r3, r7, r3
   2fc42:	0018      	movs	r0, r3
   2fc44:	4b25      	ldr	r3, [pc, #148]	; (2fcdc <MQTTDeserialize_connack+0xc0>)
   2fc46:	4798      	blx	r3
   2fc48:	0003      	movs	r3, r0
   2fc4a:	001a      	movs	r2, r3
   2fc4c:	231c      	movs	r3, #28
   2fc4e:	18fb      	adds	r3, r7, r3
   2fc50:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   2fc52:	231c      	movs	r3, #28
   2fc54:	18fb      	adds	r3, r7, r3
   2fc56:	781b      	ldrb	r3, [r3, #0]
   2fc58:	220f      	movs	r2, #15
   2fc5a:	4393      	bics	r3, r2
   2fc5c:	b2db      	uxtb	r3, r3
   2fc5e:	2b20      	cmp	r3, #32
   2fc60:	d134      	bne.n	2fccc <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2fc62:	69bb      	ldr	r3, [r7, #24]
   2fc64:	2214      	movs	r2, #20
   2fc66:	18ba      	adds	r2, r7, r2
   2fc68:	0011      	movs	r1, r2
   2fc6a:	0018      	movs	r0, r3
   2fc6c:	4b1c      	ldr	r3, [pc, #112]	; (2fce0 <MQTTDeserialize_connack+0xc4>)
   2fc6e:	4798      	blx	r3
   2fc70:	0003      	movs	r3, r0
   2fc72:	627b      	str	r3, [r7, #36]	; 0x24
   2fc74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2fc76:	69bb      	ldr	r3, [r7, #24]
   2fc78:	189b      	adds	r3, r3, r2
   2fc7a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2fc7c:	69bb      	ldr	r3, [r7, #24]
   2fc7e:	697a      	ldr	r2, [r7, #20]
   2fc80:	189b      	adds	r3, r3, r2
   2fc82:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2fc84:	6a3b      	ldr	r3, [r7, #32]
   2fc86:	69ba      	ldr	r2, [r7, #24]
   2fc88:	1a9b      	subs	r3, r3, r2
   2fc8a:	2b01      	cmp	r3, #1
   2fc8c:	dd20      	ble.n	2fcd0 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   2fc8e:	2318      	movs	r3, #24
   2fc90:	18fb      	adds	r3, r7, r3
   2fc92:	0018      	movs	r0, r3
   2fc94:	4b11      	ldr	r3, [pc, #68]	; (2fcdc <MQTTDeserialize_connack+0xc0>)
   2fc96:	4798      	blx	r3
   2fc98:	0003      	movs	r3, r0
   2fc9a:	001a      	movs	r2, r3
   2fc9c:	2310      	movs	r3, #16
   2fc9e:	18fb      	adds	r3, r7, r3
   2fca0:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   2fca2:	2310      	movs	r3, #16
   2fca4:	18fb      	adds	r3, r7, r3
   2fca6:	781b      	ldrb	r3, [r3, #0]
   2fca8:	061b      	lsls	r3, r3, #24
   2fcaa:	0fdb      	lsrs	r3, r3, #31
   2fcac:	b2db      	uxtb	r3, r3
   2fcae:	001a      	movs	r2, r3
   2fcb0:	68fb      	ldr	r3, [r7, #12]
   2fcb2:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   2fcb4:	2318      	movs	r3, #24
   2fcb6:	18fb      	adds	r3, r7, r3
   2fcb8:	0018      	movs	r0, r3
   2fcba:	4b08      	ldr	r3, [pc, #32]	; (2fcdc <MQTTDeserialize_connack+0xc0>)
   2fcbc:	4798      	blx	r3
   2fcbe:	0003      	movs	r3, r0
   2fcc0:	001a      	movs	r2, r3
   2fcc2:	68bb      	ldr	r3, [r7, #8]
   2fcc4:	701a      	strb	r2, [r3, #0]

	rc = 1;
   2fcc6:	2301      	movs	r3, #1
   2fcc8:	627b      	str	r3, [r7, #36]	; 0x24
   2fcca:	e002      	b.n	2fcd2 <MQTTDeserialize_connack+0xb6>
		goto exit;
   2fccc:	46c0      	nop			; (mov r8, r8)
   2fcce:	e000      	b.n	2fcd2 <MQTTDeserialize_connack+0xb6>
		goto exit;
   2fcd0:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fcd4:	0018      	movs	r0, r3
   2fcd6:	46bd      	mov	sp, r7
   2fcd8:	b00a      	add	sp, #40	; 0x28
   2fcda:	bd80      	pop	{r7, pc}
   2fcdc:	00030163 	.word	0x00030163
   2fce0:	000300fd 	.word	0x000300fd

0002fce4 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   2fce4:	b580      	push	{r7, lr}
   2fce6:	b088      	sub	sp, #32
   2fce8:	af00      	add	r7, sp, #0
   2fcea:	60f8      	str	r0, [r7, #12]
   2fcec:	60b9      	str	r1, [r7, #8]
   2fcee:	1dfb      	adds	r3, r7, #7
   2fcf0:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2fcf2:	2300      	movs	r3, #0
   2fcf4:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   2fcf6:	2301      	movs	r3, #1
   2fcf8:	425b      	negs	r3, r3
   2fcfa:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2fcfc:	68fb      	ldr	r3, [r7, #12]
   2fcfe:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   2fd00:	68bb      	ldr	r3, [r7, #8]
   2fd02:	2b01      	cmp	r3, #1
   2fd04:	dc03      	bgt.n	2fd0e <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2fd06:	2302      	movs	r3, #2
   2fd08:	425b      	negs	r3, r3
   2fd0a:	61fb      	str	r3, [r7, #28]
		goto exit;
   2fd0c:	e029      	b.n	2fd62 <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   2fd0e:	2318      	movs	r3, #24
   2fd10:	18fb      	adds	r3, r7, r3
   2fd12:	2200      	movs	r2, #0
   2fd14:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   2fd16:	1dfb      	adds	r3, r7, #7
   2fd18:	781b      	ldrb	r3, [r3, #0]
   2fd1a:	220f      	movs	r2, #15
   2fd1c:	4013      	ands	r3, r2
   2fd1e:	b2da      	uxtb	r2, r3
   2fd20:	2318      	movs	r3, #24
   2fd22:	18fb      	adds	r3, r7, r3
   2fd24:	0110      	lsls	r0, r2, #4
   2fd26:	781a      	ldrb	r2, [r3, #0]
   2fd28:	210f      	movs	r1, #15
   2fd2a:	400a      	ands	r2, r1
   2fd2c:	1c11      	adds	r1, r2, #0
   2fd2e:	1c02      	adds	r2, r0, #0
   2fd30:	430a      	orrs	r2, r1
   2fd32:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2fd34:	2318      	movs	r3, #24
   2fd36:	18fb      	adds	r3, r7, r3
   2fd38:	781a      	ldrb	r2, [r3, #0]
   2fd3a:	2314      	movs	r3, #20
   2fd3c:	18fb      	adds	r3, r7, r3
   2fd3e:	0011      	movs	r1, r2
   2fd40:	0018      	movs	r0, r3
   2fd42:	4b0a      	ldr	r3, [pc, #40]	; (2fd6c <MQTTSerialize_zero+0x88>)
   2fd44:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   2fd46:	697b      	ldr	r3, [r7, #20]
   2fd48:	2100      	movs	r1, #0
   2fd4a:	0018      	movs	r0, r3
   2fd4c:	4b08      	ldr	r3, [pc, #32]	; (2fd70 <MQTTSerialize_zero+0x8c>)
   2fd4e:	4798      	blx	r3
   2fd50:	0002      	movs	r2, r0
   2fd52:	697b      	ldr	r3, [r7, #20]
   2fd54:	189b      	adds	r3, r3, r2
   2fd56:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   2fd58:	697b      	ldr	r3, [r7, #20]
   2fd5a:	001a      	movs	r2, r3
   2fd5c:	68fb      	ldr	r3, [r7, #12]
   2fd5e:	1ad3      	subs	r3, r2, r3
   2fd60:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fd62:	69fb      	ldr	r3, [r7, #28]
}
   2fd64:	0018      	movs	r0, r3
   2fd66:	46bd      	mov	sp, r7
   2fd68:	b008      	add	sp, #32
   2fd6a:	bd80      	pop	{r7, pc}
   2fd6c:	0003018f 	.word	0x0003018f
   2fd70:	0002ff75 	.word	0x0002ff75

0002fd74 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   2fd74:	b580      	push	{r7, lr}
   2fd76:	b082      	sub	sp, #8
   2fd78:	af00      	add	r7, sp, #0
   2fd7a:	6078      	str	r0, [r7, #4]
   2fd7c:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   2fd7e:	6839      	ldr	r1, [r7, #0]
   2fd80:	687b      	ldr	r3, [r7, #4]
   2fd82:	220e      	movs	r2, #14
   2fd84:	0018      	movs	r0, r3
   2fd86:	4b03      	ldr	r3, [pc, #12]	; (2fd94 <MQTTSerialize_disconnect+0x20>)
   2fd88:	4798      	blx	r3
   2fd8a:	0003      	movs	r3, r0
}
   2fd8c:	0018      	movs	r0, r3
   2fd8e:	46bd      	mov	sp, r7
   2fd90:	b002      	add	sp, #8
   2fd92:	bd80      	pop	{r7, pc}
   2fd94:	0002fce5 	.word	0x0002fce5

0002fd98 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   2fd98:	b580      	push	{r7, lr}
   2fd9a:	b082      	sub	sp, #8
   2fd9c:	af00      	add	r7, sp, #0
   2fd9e:	6078      	str	r0, [r7, #4]
   2fda0:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   2fda2:	6839      	ldr	r1, [r7, #0]
   2fda4:	687b      	ldr	r3, [r7, #4]
   2fda6:	220c      	movs	r2, #12
   2fda8:	0018      	movs	r0, r3
   2fdaa:	4b03      	ldr	r3, [pc, #12]	; (2fdb8 <MQTTSerialize_pingreq+0x20>)
   2fdac:	4798      	blx	r3
   2fdae:	0003      	movs	r3, r0
}
   2fdb0:	0018      	movs	r0, r3
   2fdb2:	46bd      	mov	sp, r7
   2fdb4:	b002      	add	sp, #8
   2fdb6:	bd80      	pop	{r7, pc}
   2fdb8:	0002fce5 	.word	0x0002fce5

0002fdbc <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   2fdbc:	b580      	push	{r7, lr}
   2fdbe:	b08a      	sub	sp, #40	; 0x28
   2fdc0:	af00      	add	r7, sp, #0
   2fdc2:	60f8      	str	r0, [r7, #12]
   2fdc4:	60b9      	str	r1, [r7, #8]
   2fdc6:	607a      	str	r2, [r7, #4]
   2fdc8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2fdca:	2300      	movs	r3, #0
   2fdcc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2fdce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2fdd0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2fdd2:	2300      	movs	r3, #0
   2fdd4:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2fdd6:	2300      	movs	r3, #0
   2fdd8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   2fdda:	2300      	movs	r3, #0
   2fddc:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2fdde:	2318      	movs	r3, #24
   2fde0:	18fb      	adds	r3, r7, r3
   2fde2:	0018      	movs	r0, r3
   2fde4:	4b32      	ldr	r3, [pc, #200]	; (2feb0 <MQTTDeserialize_publish+0xf4>)
   2fde6:	4798      	blx	r3
   2fde8:	0003      	movs	r3, r0
   2fdea:	001a      	movs	r2, r3
   2fdec:	231c      	movs	r3, #28
   2fdee:	18fb      	adds	r3, r7, r3
   2fdf0:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   2fdf2:	231c      	movs	r3, #28
   2fdf4:	18fb      	adds	r3, r7, r3
   2fdf6:	781b      	ldrb	r3, [r3, #0]
   2fdf8:	220f      	movs	r2, #15
   2fdfa:	4393      	bics	r3, r2
   2fdfc:	b2db      	uxtb	r3, r3
   2fdfe:	2b30      	cmp	r3, #48	; 0x30
   2fe00:	d150      	bne.n	2fea4 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   2fe02:	231c      	movs	r3, #28
   2fe04:	18fb      	adds	r3, r7, r3
   2fe06:	781b      	ldrb	r3, [r3, #0]
   2fe08:	071b      	lsls	r3, r3, #28
   2fe0a:	0fdb      	lsrs	r3, r3, #31
   2fe0c:	b2db      	uxtb	r3, r3
   2fe0e:	001a      	movs	r2, r3
   2fe10:	68fb      	ldr	r3, [r7, #12]
   2fe12:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   2fe14:	231c      	movs	r3, #28
   2fe16:	18fb      	adds	r3, r7, r3
   2fe18:	781b      	ldrb	r3, [r3, #0]
   2fe1a:	075b      	lsls	r3, r3, #29
   2fe1c:	0f9b      	lsrs	r3, r3, #30
   2fe1e:	b2db      	uxtb	r3, r3
   2fe20:	001a      	movs	r2, r3
   2fe22:	68bb      	ldr	r3, [r7, #8]
   2fe24:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   2fe26:	231c      	movs	r3, #28
   2fe28:	18fb      	adds	r3, r7, r3
   2fe2a:	781b      	ldrb	r3, [r3, #0]
   2fe2c:	07db      	lsls	r3, r3, #31
   2fe2e:	0fdb      	lsrs	r3, r3, #31
   2fe30:	b2db      	uxtb	r3, r3
   2fe32:	001a      	movs	r2, r3
   2fe34:	687b      	ldr	r3, [r7, #4]
   2fe36:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2fe38:	69bb      	ldr	r3, [r7, #24]
   2fe3a:	2214      	movs	r2, #20
   2fe3c:	18ba      	adds	r2, r7, r2
   2fe3e:	0011      	movs	r1, r2
   2fe40:	0018      	movs	r0, r3
   2fe42:	4b1c      	ldr	r3, [pc, #112]	; (2feb4 <MQTTDeserialize_publish+0xf8>)
   2fe44:	4798      	blx	r3
   2fe46:	0003      	movs	r3, r0
   2fe48:	627b      	str	r3, [r7, #36]	; 0x24
   2fe4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2fe4c:	69bb      	ldr	r3, [r7, #24]
   2fe4e:	189b      	adds	r3, r3, r2
   2fe50:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2fe52:	69bb      	ldr	r3, [r7, #24]
   2fe54:	697a      	ldr	r2, [r7, #20]
   2fe56:	189b      	adds	r3, r3, r2
   2fe58:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2fe5a:	6a3a      	ldr	r2, [r7, #32]
   2fe5c:	2318      	movs	r3, #24
   2fe5e:	18f9      	adds	r1, r7, r3
   2fe60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2fe62:	0018      	movs	r0, r3
   2fe64:	4b14      	ldr	r3, [pc, #80]	; (2feb8 <MQTTDeserialize_publish+0xfc>)
   2fe66:	4798      	blx	r3
   2fe68:	1e03      	subs	r3, r0, #0
   2fe6a:	d01c      	beq.n	2fea6 <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   2fe6c:	6a3b      	ldr	r3, [r7, #32]
   2fe6e:	69ba      	ldr	r2, [r7, #24]
   2fe70:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2fe72:	d418      	bmi.n	2fea6 <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   2fe74:	68bb      	ldr	r3, [r7, #8]
   2fe76:	681b      	ldr	r3, [r3, #0]
   2fe78:	2b00      	cmp	r3, #0
   2fe7a:	dd08      	ble.n	2fe8e <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   2fe7c:	2318      	movs	r3, #24
   2fe7e:	18fb      	adds	r3, r7, r3
   2fe80:	0018      	movs	r0, r3
   2fe82:	4b0e      	ldr	r3, [pc, #56]	; (2febc <MQTTDeserialize_publish+0x100>)
   2fe84:	4798      	blx	r3
   2fe86:	0003      	movs	r3, r0
   2fe88:	b29a      	uxth	r2, r3
   2fe8a:	683b      	ldr	r3, [r7, #0]
   2fe8c:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   2fe8e:	6a3b      	ldr	r3, [r7, #32]
   2fe90:	69ba      	ldr	r2, [r7, #24]
   2fe92:	1a9a      	subs	r2, r3, r2
   2fe94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2fe96:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   2fe98:	69ba      	ldr	r2, [r7, #24]
   2fe9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2fe9c:	601a      	str	r2, [r3, #0]
	rc = 1;
   2fe9e:	2301      	movs	r3, #1
   2fea0:	627b      	str	r3, [r7, #36]	; 0x24
   2fea2:	e000      	b.n	2fea6 <MQTTDeserialize_publish+0xea>
		goto exit;
   2fea4:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fea8:	0018      	movs	r0, r3
   2feaa:	46bd      	mov	sp, r7
   2feac:	b00a      	add	sp, #40	; 0x28
   2feae:	bd80      	pop	{r7, pc}
   2feb0:	00030163 	.word	0x00030163
   2feb4:	000300fd 	.word	0x000300fd
   2feb8:	000302e1 	.word	0x000302e1
   2febc:	00030131 	.word	0x00030131

0002fec0 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   2fec0:	b580      	push	{r7, lr}
   2fec2:	b08a      	sub	sp, #40	; 0x28
   2fec4:	af00      	add	r7, sp, #0
   2fec6:	60f8      	str	r0, [r7, #12]
   2fec8:	60b9      	str	r1, [r7, #8]
   2feca:	607a      	str	r2, [r7, #4]
   2fecc:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2fece:	2300      	movs	r3, #0
   2fed0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2fed2:	683b      	ldr	r3, [r7, #0]
   2fed4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2fed6:	2300      	movs	r3, #0
   2fed8:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2feda:	2300      	movs	r3, #0
   2fedc:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2fede:	2318      	movs	r3, #24
   2fee0:	18fb      	adds	r3, r7, r3
   2fee2:	0018      	movs	r0, r3
   2fee4:	4b20      	ldr	r3, [pc, #128]	; (2ff68 <MQTTDeserialize_ack+0xa8>)
   2fee6:	4798      	blx	r3
   2fee8:	0003      	movs	r3, r0
   2feea:	001a      	movs	r2, r3
   2feec:	231c      	movs	r3, #28
   2feee:	18fb      	adds	r3, r7, r3
   2fef0:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   2fef2:	231c      	movs	r3, #28
   2fef4:	18fb      	adds	r3, r7, r3
   2fef6:	781b      	ldrb	r3, [r3, #0]
   2fef8:	071b      	lsls	r3, r3, #28
   2fefa:	0fdb      	lsrs	r3, r3, #31
   2fefc:	b2db      	uxtb	r3, r3
   2fefe:	001a      	movs	r2, r3
   2ff00:	68bb      	ldr	r3, [r7, #8]
   2ff02:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   2ff04:	231c      	movs	r3, #28
   2ff06:	18fb      	adds	r3, r7, r3
   2ff08:	781b      	ldrb	r3, [r3, #0]
   2ff0a:	061b      	lsls	r3, r3, #24
   2ff0c:	0f1b      	lsrs	r3, r3, #28
   2ff0e:	b2db      	uxtb	r3, r3
   2ff10:	001a      	movs	r2, r3
   2ff12:	68fb      	ldr	r3, [r7, #12]
   2ff14:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2ff16:	69bb      	ldr	r3, [r7, #24]
   2ff18:	2214      	movs	r2, #20
   2ff1a:	18ba      	adds	r2, r7, r2
   2ff1c:	0011      	movs	r1, r2
   2ff1e:	0018      	movs	r0, r3
   2ff20:	4b12      	ldr	r3, [pc, #72]	; (2ff6c <MQTTDeserialize_ack+0xac>)
   2ff22:	4798      	blx	r3
   2ff24:	0003      	movs	r3, r0
   2ff26:	627b      	str	r3, [r7, #36]	; 0x24
   2ff28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2ff2a:	69bb      	ldr	r3, [r7, #24]
   2ff2c:	189b      	adds	r3, r3, r2
   2ff2e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2ff30:	69bb      	ldr	r3, [r7, #24]
   2ff32:	697a      	ldr	r2, [r7, #20]
   2ff34:	189b      	adds	r3, r3, r2
   2ff36:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   2ff38:	6a3b      	ldr	r3, [r7, #32]
   2ff3a:	69ba      	ldr	r2, [r7, #24]
   2ff3c:	1a9b      	subs	r3, r3, r2
   2ff3e:	2b01      	cmp	r3, #1
   2ff40:	dd0b      	ble.n	2ff5a <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   2ff42:	2318      	movs	r3, #24
   2ff44:	18fb      	adds	r3, r7, r3
   2ff46:	0018      	movs	r0, r3
   2ff48:	4b09      	ldr	r3, [pc, #36]	; (2ff70 <MQTTDeserialize_ack+0xb0>)
   2ff4a:	4798      	blx	r3
   2ff4c:	0003      	movs	r3, r0
   2ff4e:	b29a      	uxth	r2, r3
   2ff50:	687b      	ldr	r3, [r7, #4]
   2ff52:	801a      	strh	r2, [r3, #0]

	rc = 1;
   2ff54:	2301      	movs	r3, #1
   2ff56:	627b      	str	r3, [r7, #36]	; 0x24
   2ff58:	e000      	b.n	2ff5c <MQTTDeserialize_ack+0x9c>
		goto exit;
   2ff5a:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2ff5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2ff5e:	0018      	movs	r0, r3
   2ff60:	46bd      	mov	sp, r7
   2ff62:	b00a      	add	sp, #40	; 0x28
   2ff64:	bd80      	pop	{r7, pc}
   2ff66:	46c0      	nop			; (mov r8, r8)
   2ff68:	00030163 	.word	0x00030163
   2ff6c:	000300fd 	.word	0x000300fd
   2ff70:	00030131 	.word	0x00030131

0002ff74 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   2ff74:	b580      	push	{r7, lr}
   2ff76:	b084      	sub	sp, #16
   2ff78:	af00      	add	r7, sp, #0
   2ff7a:	6078      	str	r0, [r7, #4]
   2ff7c:	6039      	str	r1, [r7, #0]
	int rc = 0;
   2ff7e:	2300      	movs	r3, #0
   2ff80:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   2ff82:	683b      	ldr	r3, [r7, #0]
   2ff84:	4a17      	ldr	r2, [pc, #92]	; (2ffe4 <MQTTPacket_encode+0x70>)
   2ff86:	4013      	ands	r3, r2
   2ff88:	d504      	bpl.n	2ff94 <MQTTPacket_encode+0x20>
   2ff8a:	3b01      	subs	r3, #1
   2ff8c:	2280      	movs	r2, #128	; 0x80
   2ff8e:	4252      	negs	r2, r2
   2ff90:	4313      	orrs	r3, r2
   2ff92:	3301      	adds	r3, #1
   2ff94:	001a      	movs	r2, r3
   2ff96:	230b      	movs	r3, #11
   2ff98:	18fb      	adds	r3, r7, r3
   2ff9a:	701a      	strb	r2, [r3, #0]
		length /= 128;
   2ff9c:	683b      	ldr	r3, [r7, #0]
   2ff9e:	2b00      	cmp	r3, #0
   2ffa0:	da00      	bge.n	2ffa4 <MQTTPacket_encode+0x30>
   2ffa2:	337f      	adds	r3, #127	; 0x7f
   2ffa4:	11db      	asrs	r3, r3, #7
   2ffa6:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   2ffa8:	683b      	ldr	r3, [r7, #0]
   2ffaa:	2b00      	cmp	r3, #0
   2ffac:	dd08      	ble.n	2ffc0 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   2ffae:	230b      	movs	r3, #11
   2ffb0:	18fb      	adds	r3, r7, r3
   2ffb2:	220b      	movs	r2, #11
   2ffb4:	18ba      	adds	r2, r7, r2
   2ffb6:	7812      	ldrb	r2, [r2, #0]
   2ffb8:	2180      	movs	r1, #128	; 0x80
   2ffba:	4249      	negs	r1, r1
   2ffbc:	430a      	orrs	r2, r1
   2ffbe:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   2ffc0:	68fb      	ldr	r3, [r7, #12]
   2ffc2:	1c5a      	adds	r2, r3, #1
   2ffc4:	60fa      	str	r2, [r7, #12]
   2ffc6:	001a      	movs	r2, r3
   2ffc8:	687b      	ldr	r3, [r7, #4]
   2ffca:	189b      	adds	r3, r3, r2
   2ffcc:	220b      	movs	r2, #11
   2ffce:	18ba      	adds	r2, r7, r2
   2ffd0:	7812      	ldrb	r2, [r2, #0]
   2ffd2:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   2ffd4:	683b      	ldr	r3, [r7, #0]
   2ffd6:	2b00      	cmp	r3, #0
   2ffd8:	dcd3      	bgt.n	2ff82 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   2ffda:	68fb      	ldr	r3, [r7, #12]
}
   2ffdc:	0018      	movs	r0, r3
   2ffde:	46bd      	mov	sp, r7
   2ffe0:	b004      	add	sp, #16
   2ffe2:	bd80      	pop	{r7, pc}
   2ffe4:	8000007f 	.word	0x8000007f

0002ffe8 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   2ffe8:	b580      	push	{r7, lr}
   2ffea:	b086      	sub	sp, #24
   2ffec:	af00      	add	r7, sp, #0
   2ffee:	6078      	str	r0, [r7, #4]
   2fff0:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   2fff2:	2301      	movs	r3, #1
   2fff4:	617b      	str	r3, [r7, #20]
	int len = 0;
   2fff6:	2300      	movs	r3, #0
   2fff8:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   2fffa:	683b      	ldr	r3, [r7, #0]
   2fffc:	2200      	movs	r2, #0
   2fffe:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   30000:	2301      	movs	r3, #1
   30002:	425b      	negs	r3, r3
   30004:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   30006:	693b      	ldr	r3, [r7, #16]
   30008:	3301      	adds	r3, #1
   3000a:	613b      	str	r3, [r7, #16]
   3000c:	693b      	ldr	r3, [r7, #16]
   3000e:	2b04      	cmp	r3, #4
   30010:	dd03      	ble.n	3001a <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   30012:	2301      	movs	r3, #1
   30014:	425b      	negs	r3, r3
   30016:	60fb      	str	r3, [r7, #12]
			goto exit;
   30018:	e022      	b.n	30060 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   3001a:	230b      	movs	r3, #11
   3001c:	18fa      	adds	r2, r7, r3
   3001e:	687b      	ldr	r3, [r7, #4]
   30020:	2101      	movs	r1, #1
   30022:	0010      	movs	r0, r2
   30024:	4798      	blx	r3
   30026:	0003      	movs	r3, r0
   30028:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   3002a:	68fb      	ldr	r3, [r7, #12]
   3002c:	2b01      	cmp	r3, #1
   3002e:	d116      	bne.n	3005e <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   30030:	683b      	ldr	r3, [r7, #0]
   30032:	681a      	ldr	r2, [r3, #0]
   30034:	230b      	movs	r3, #11
   30036:	18fb      	adds	r3, r7, r3
   30038:	781b      	ldrb	r3, [r3, #0]
   3003a:	0019      	movs	r1, r3
   3003c:	237f      	movs	r3, #127	; 0x7f
   3003e:	400b      	ands	r3, r1
   30040:	6979      	ldr	r1, [r7, #20]
   30042:	434b      	muls	r3, r1
   30044:	18d2      	adds	r2, r2, r3
   30046:	683b      	ldr	r3, [r7, #0]
   30048:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   3004a:	697b      	ldr	r3, [r7, #20]
   3004c:	01db      	lsls	r3, r3, #7
   3004e:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   30050:	230b      	movs	r3, #11
   30052:	18fb      	adds	r3, r7, r3
   30054:	781b      	ldrb	r3, [r3, #0]
   30056:	b25b      	sxtb	r3, r3
   30058:	2b00      	cmp	r3, #0
   3005a:	dbd1      	blt.n	30000 <MQTTPacket_decode+0x18>
   3005c:	e000      	b.n	30060 <MQTTPacket_decode+0x78>
			goto exit;
   3005e:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   30060:	693b      	ldr	r3, [r7, #16]
}
   30062:	0018      	movs	r0, r3
   30064:	46bd      	mov	sp, r7
   30066:	b006      	add	sp, #24
   30068:	bd80      	pop	{r7, pc}
	...

0003006c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   3006c:	b580      	push	{r7, lr}
   3006e:	b082      	sub	sp, #8
   30070:	af00      	add	r7, sp, #0
   30072:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   30074:	687b      	ldr	r3, [r7, #4]
   30076:	3301      	adds	r3, #1
   30078:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   3007a:	687b      	ldr	r3, [r7, #4]
   3007c:	2b7f      	cmp	r3, #127	; 0x7f
   3007e:	dc03      	bgt.n	30088 <MQTTPacket_len+0x1c>
		rem_len += 1;
   30080:	687b      	ldr	r3, [r7, #4]
   30082:	3301      	adds	r3, #1
   30084:	607b      	str	r3, [r7, #4]
   30086:	e012      	b.n	300ae <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   30088:	687b      	ldr	r3, [r7, #4]
   3008a:	4a0b      	ldr	r2, [pc, #44]	; (300b8 <MQTTPacket_len+0x4c>)
   3008c:	4293      	cmp	r3, r2
   3008e:	dc03      	bgt.n	30098 <MQTTPacket_len+0x2c>
		rem_len += 2;
   30090:	687b      	ldr	r3, [r7, #4]
   30092:	3302      	adds	r3, #2
   30094:	607b      	str	r3, [r7, #4]
   30096:	e00a      	b.n	300ae <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   30098:	687b      	ldr	r3, [r7, #4]
   3009a:	4a08      	ldr	r2, [pc, #32]	; (300bc <MQTTPacket_len+0x50>)
   3009c:	4293      	cmp	r3, r2
   3009e:	dc03      	bgt.n	300a8 <MQTTPacket_len+0x3c>
		rem_len += 3;
   300a0:	687b      	ldr	r3, [r7, #4]
   300a2:	3303      	adds	r3, #3
   300a4:	607b      	str	r3, [r7, #4]
   300a6:	e002      	b.n	300ae <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   300a8:	687b      	ldr	r3, [r7, #4]
   300aa:	3304      	adds	r3, #4
   300ac:	607b      	str	r3, [r7, #4]
	return rem_len;
   300ae:	687b      	ldr	r3, [r7, #4]
}
   300b0:	0018      	movs	r0, r3
   300b2:	46bd      	mov	sp, r7
   300b4:	b002      	add	sp, #8
   300b6:	bd80      	pop	{r7, pc}
   300b8:	00003fff 	.word	0x00003fff
   300bc:	001ffffe 	.word	0x001ffffe

000300c0 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   300c0:	b580      	push	{r7, lr}
   300c2:	b084      	sub	sp, #16
   300c4:	af00      	add	r7, sp, #0
   300c6:	6078      	str	r0, [r7, #4]
   300c8:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   300ca:	2300      	movs	r3, #0
   300cc:	60fb      	str	r3, [r7, #12]
   300ce:	e00a      	b.n	300e6 <bufchar+0x26>
		*c = *bufptr++;
   300d0:	4b09      	ldr	r3, [pc, #36]	; (300f8 <bufchar+0x38>)
   300d2:	681b      	ldr	r3, [r3, #0]
   300d4:	1c59      	adds	r1, r3, #1
   300d6:	4a08      	ldr	r2, [pc, #32]	; (300f8 <bufchar+0x38>)
   300d8:	6011      	str	r1, [r2, #0]
   300da:	781a      	ldrb	r2, [r3, #0]
   300dc:	687b      	ldr	r3, [r7, #4]
   300de:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   300e0:	68fb      	ldr	r3, [r7, #12]
   300e2:	3301      	adds	r3, #1
   300e4:	60fb      	str	r3, [r7, #12]
   300e6:	68fa      	ldr	r2, [r7, #12]
   300e8:	683b      	ldr	r3, [r7, #0]
   300ea:	429a      	cmp	r2, r3
   300ec:	dbf0      	blt.n	300d0 <bufchar+0x10>
	return count;
   300ee:	683b      	ldr	r3, [r7, #0]
}
   300f0:	0018      	movs	r0, r3
   300f2:	46bd      	mov	sp, r7
   300f4:	b004      	add	sp, #16
   300f6:	bd80      	pop	{r7, pc}
   300f8:	200046ec 	.word	0x200046ec

000300fc <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   300fc:	b580      	push	{r7, lr}
   300fe:	b082      	sub	sp, #8
   30100:	af00      	add	r7, sp, #0
   30102:	6078      	str	r0, [r7, #4]
   30104:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   30106:	4b07      	ldr	r3, [pc, #28]	; (30124 <MQTTPacket_decodeBuf+0x28>)
   30108:	687a      	ldr	r2, [r7, #4]
   3010a:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   3010c:	683a      	ldr	r2, [r7, #0]
   3010e:	4b06      	ldr	r3, [pc, #24]	; (30128 <MQTTPacket_decodeBuf+0x2c>)
   30110:	0011      	movs	r1, r2
   30112:	0018      	movs	r0, r3
   30114:	4b05      	ldr	r3, [pc, #20]	; (3012c <MQTTPacket_decodeBuf+0x30>)
   30116:	4798      	blx	r3
   30118:	0003      	movs	r3, r0
}
   3011a:	0018      	movs	r0, r3
   3011c:	46bd      	mov	sp, r7
   3011e:	b002      	add	sp, #8
   30120:	bd80      	pop	{r7, pc}
   30122:	46c0      	nop			; (mov r8, r8)
   30124:	200046ec 	.word	0x200046ec
   30128:	000300c1 	.word	0x000300c1
   3012c:	0002ffe9 	.word	0x0002ffe9

00030130 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   30130:	b580      	push	{r7, lr}
   30132:	b084      	sub	sp, #16
   30134:	af00      	add	r7, sp, #0
   30136:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   30138:	687b      	ldr	r3, [r7, #4]
   3013a:	681b      	ldr	r3, [r3, #0]
   3013c:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   3013e:	68fb      	ldr	r3, [r7, #12]
   30140:	781b      	ldrb	r3, [r3, #0]
   30142:	021b      	lsls	r3, r3, #8
   30144:	68fa      	ldr	r2, [r7, #12]
   30146:	3201      	adds	r2, #1
   30148:	7812      	ldrb	r2, [r2, #0]
   3014a:	189b      	adds	r3, r3, r2
   3014c:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   3014e:	687b      	ldr	r3, [r7, #4]
   30150:	681b      	ldr	r3, [r3, #0]
   30152:	1c9a      	adds	r2, r3, #2
   30154:	687b      	ldr	r3, [r7, #4]
   30156:	601a      	str	r2, [r3, #0]
	return len;
   30158:	68bb      	ldr	r3, [r7, #8]
}
   3015a:	0018      	movs	r0, r3
   3015c:	46bd      	mov	sp, r7
   3015e:	b004      	add	sp, #16
   30160:	bd80      	pop	{r7, pc}

00030162 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   30162:	b580      	push	{r7, lr}
   30164:	b084      	sub	sp, #16
   30166:	af00      	add	r7, sp, #0
   30168:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   3016a:	687b      	ldr	r3, [r7, #4]
   3016c:	681a      	ldr	r2, [r3, #0]
   3016e:	230f      	movs	r3, #15
   30170:	18fb      	adds	r3, r7, r3
   30172:	7812      	ldrb	r2, [r2, #0]
   30174:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   30176:	687b      	ldr	r3, [r7, #4]
   30178:	681b      	ldr	r3, [r3, #0]
   3017a:	1c5a      	adds	r2, r3, #1
   3017c:	687b      	ldr	r3, [r7, #4]
   3017e:	601a      	str	r2, [r3, #0]
	return c;
   30180:	230f      	movs	r3, #15
   30182:	18fb      	adds	r3, r7, r3
   30184:	781b      	ldrb	r3, [r3, #0]
}
   30186:	0018      	movs	r0, r3
   30188:	46bd      	mov	sp, r7
   3018a:	b004      	add	sp, #16
   3018c:	bd80      	pop	{r7, pc}

0003018e <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   3018e:	b580      	push	{r7, lr}
   30190:	b082      	sub	sp, #8
   30192:	af00      	add	r7, sp, #0
   30194:	6078      	str	r0, [r7, #4]
   30196:	000a      	movs	r2, r1
   30198:	1cfb      	adds	r3, r7, #3
   3019a:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   3019c:	687b      	ldr	r3, [r7, #4]
   3019e:	681b      	ldr	r3, [r3, #0]
   301a0:	1cfa      	adds	r2, r7, #3
   301a2:	7812      	ldrb	r2, [r2, #0]
   301a4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   301a6:	687b      	ldr	r3, [r7, #4]
   301a8:	681b      	ldr	r3, [r3, #0]
   301aa:	1c5a      	adds	r2, r3, #1
   301ac:	687b      	ldr	r3, [r7, #4]
   301ae:	601a      	str	r2, [r3, #0]
}
   301b0:	46c0      	nop			; (mov r8, r8)
   301b2:	46bd      	mov	sp, r7
   301b4:	b002      	add	sp, #8
   301b6:	bd80      	pop	{r7, pc}

000301b8 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   301b8:	b580      	push	{r7, lr}
   301ba:	b082      	sub	sp, #8
   301bc:	af00      	add	r7, sp, #0
   301be:	6078      	str	r0, [r7, #4]
   301c0:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   301c2:	687b      	ldr	r3, [r7, #4]
   301c4:	681a      	ldr	r2, [r3, #0]
   301c6:	683b      	ldr	r3, [r7, #0]
   301c8:	2b00      	cmp	r3, #0
   301ca:	da00      	bge.n	301ce <writeInt+0x16>
   301cc:	33ff      	adds	r3, #255	; 0xff
   301ce:	121b      	asrs	r3, r3, #8
   301d0:	b2db      	uxtb	r3, r3
   301d2:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   301d4:	687b      	ldr	r3, [r7, #4]
   301d6:	681b      	ldr	r3, [r3, #0]
   301d8:	1c5a      	adds	r2, r3, #1
   301da:	687b      	ldr	r3, [r7, #4]
   301dc:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   301de:	687b      	ldr	r3, [r7, #4]
   301e0:	681a      	ldr	r2, [r3, #0]
   301e2:	683b      	ldr	r3, [r7, #0]
   301e4:	4908      	ldr	r1, [pc, #32]	; (30208 <writeInt+0x50>)
   301e6:	400b      	ands	r3, r1
   301e8:	d503      	bpl.n	301f2 <writeInt+0x3a>
   301ea:	3b01      	subs	r3, #1
   301ec:	4907      	ldr	r1, [pc, #28]	; (3020c <writeInt+0x54>)
   301ee:	430b      	orrs	r3, r1
   301f0:	3301      	adds	r3, #1
   301f2:	b2db      	uxtb	r3, r3
   301f4:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   301f6:	687b      	ldr	r3, [r7, #4]
   301f8:	681b      	ldr	r3, [r3, #0]
   301fa:	1c5a      	adds	r2, r3, #1
   301fc:	687b      	ldr	r3, [r7, #4]
   301fe:	601a      	str	r2, [r3, #0]
}
   30200:	46c0      	nop			; (mov r8, r8)
   30202:	46bd      	mov	sp, r7
   30204:	b002      	add	sp, #8
   30206:	bd80      	pop	{r7, pc}
   30208:	800000ff 	.word	0x800000ff
   3020c:	ffffff00 	.word	0xffffff00

00030210 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   30210:	b580      	push	{r7, lr}
   30212:	b084      	sub	sp, #16
   30214:	af00      	add	r7, sp, #0
   30216:	6078      	str	r0, [r7, #4]
   30218:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   3021a:	683b      	ldr	r3, [r7, #0]
   3021c:	0018      	movs	r0, r3
   3021e:	4b0d      	ldr	r3, [pc, #52]	; (30254 <writeCString+0x44>)
   30220:	4798      	blx	r3
   30222:	0003      	movs	r3, r0
   30224:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   30226:	68fa      	ldr	r2, [r7, #12]
   30228:	687b      	ldr	r3, [r7, #4]
   3022a:	0011      	movs	r1, r2
   3022c:	0018      	movs	r0, r3
   3022e:	4b0a      	ldr	r3, [pc, #40]	; (30258 <writeCString+0x48>)
   30230:	4798      	blx	r3
	memcpy(*pptr, string, len);
   30232:	687b      	ldr	r3, [r7, #4]
   30234:	681b      	ldr	r3, [r3, #0]
   30236:	68fa      	ldr	r2, [r7, #12]
   30238:	6839      	ldr	r1, [r7, #0]
   3023a:	0018      	movs	r0, r3
   3023c:	4b07      	ldr	r3, [pc, #28]	; (3025c <writeCString+0x4c>)
   3023e:	4798      	blx	r3
	*pptr += len;
   30240:	687b      	ldr	r3, [r7, #4]
   30242:	681a      	ldr	r2, [r3, #0]
   30244:	68fb      	ldr	r3, [r7, #12]
   30246:	18d2      	adds	r2, r2, r3
   30248:	687b      	ldr	r3, [r7, #4]
   3024a:	601a      	str	r2, [r3, #0]
}
   3024c:	46c0      	nop			; (mov r8, r8)
   3024e:	46bd      	mov	sp, r7
   30250:	b004      	add	sp, #16
   30252:	bd80      	pop	{r7, pc}
   30254:	00034c3b 	.word	0x00034c3b
   30258:	000301b9 	.word	0x000301b9
   3025c:	0003484d 	.word	0x0003484d

00030260 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   30260:	b580      	push	{r7, lr}
   30262:	b084      	sub	sp, #16
   30264:	af00      	add	r7, sp, #0
   30266:	60f8      	str	r0, [r7, #12]
   30268:	0038      	movs	r0, r7
   3026a:	6001      	str	r1, [r0, #0]
   3026c:	6042      	str	r2, [r0, #4]
   3026e:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   30270:	003b      	movs	r3, r7
   30272:	685b      	ldr	r3, [r3, #4]
   30274:	2b00      	cmp	r3, #0
   30276:	dd17      	ble.n	302a8 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   30278:	003b      	movs	r3, r7
   3027a:	685a      	ldr	r2, [r3, #4]
   3027c:	68fb      	ldr	r3, [r7, #12]
   3027e:	0011      	movs	r1, r2
   30280:	0018      	movs	r0, r3
   30282:	4b14      	ldr	r3, [pc, #80]	; (302d4 <writeMQTTString+0x74>)
   30284:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   30286:	68fb      	ldr	r3, [r7, #12]
   30288:	6818      	ldr	r0, [r3, #0]
   3028a:	003b      	movs	r3, r7
   3028c:	6899      	ldr	r1, [r3, #8]
   3028e:	003b      	movs	r3, r7
   30290:	685b      	ldr	r3, [r3, #4]
   30292:	001a      	movs	r2, r3
   30294:	4b10      	ldr	r3, [pc, #64]	; (302d8 <writeMQTTString+0x78>)
   30296:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   30298:	68fb      	ldr	r3, [r7, #12]
   3029a:	681a      	ldr	r2, [r3, #0]
   3029c:	003b      	movs	r3, r7
   3029e:	685b      	ldr	r3, [r3, #4]
   302a0:	18d2      	adds	r2, r2, r3
   302a2:	68fb      	ldr	r3, [r7, #12]
   302a4:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   302a6:	e010      	b.n	302ca <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   302a8:	003b      	movs	r3, r7
   302aa:	681b      	ldr	r3, [r3, #0]
   302ac:	2b00      	cmp	r3, #0
   302ae:	d007      	beq.n	302c0 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   302b0:	003b      	movs	r3, r7
   302b2:	681a      	ldr	r2, [r3, #0]
   302b4:	68fb      	ldr	r3, [r7, #12]
   302b6:	0011      	movs	r1, r2
   302b8:	0018      	movs	r0, r3
   302ba:	4b08      	ldr	r3, [pc, #32]	; (302dc <writeMQTTString+0x7c>)
   302bc:	4798      	blx	r3
}
   302be:	e004      	b.n	302ca <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   302c0:	68fb      	ldr	r3, [r7, #12]
   302c2:	2100      	movs	r1, #0
   302c4:	0018      	movs	r0, r3
   302c6:	4b03      	ldr	r3, [pc, #12]	; (302d4 <writeMQTTString+0x74>)
   302c8:	4798      	blx	r3
}
   302ca:	46c0      	nop			; (mov r8, r8)
   302cc:	46bd      	mov	sp, r7
   302ce:	b004      	add	sp, #16
   302d0:	bd80      	pop	{r7, pc}
   302d2:	46c0      	nop			; (mov r8, r8)
   302d4:	000301b9 	.word	0x000301b9
   302d8:	0003484d 	.word	0x0003484d
   302dc:	00030211 	.word	0x00030211

000302e0 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   302e0:	b580      	push	{r7, lr}
   302e2:	b086      	sub	sp, #24
   302e4:	af00      	add	r7, sp, #0
   302e6:	60f8      	str	r0, [r7, #12]
   302e8:	60b9      	str	r1, [r7, #8]
   302ea:	607a      	str	r2, [r7, #4]
	int rc = 0;
   302ec:	2300      	movs	r3, #0
   302ee:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   302f0:	687a      	ldr	r2, [r7, #4]
   302f2:	68bb      	ldr	r3, [r7, #8]
   302f4:	681b      	ldr	r3, [r3, #0]
   302f6:	1ad3      	subs	r3, r2, r3
   302f8:	2b01      	cmp	r3, #1
   302fa:	dd1b      	ble.n	30334 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   302fc:	68bb      	ldr	r3, [r7, #8]
   302fe:	0018      	movs	r0, r3
   30300:	4b10      	ldr	r3, [pc, #64]	; (30344 <readMQTTLenString+0x64>)
   30302:	4798      	blx	r3
   30304:	0002      	movs	r2, r0
   30306:	68fb      	ldr	r3, [r7, #12]
   30308:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   3030a:	68bb      	ldr	r3, [r7, #8]
   3030c:	681a      	ldr	r2, [r3, #0]
   3030e:	68fb      	ldr	r3, [r7, #12]
   30310:	685b      	ldr	r3, [r3, #4]
   30312:	18d2      	adds	r2, r2, r3
   30314:	687b      	ldr	r3, [r7, #4]
   30316:	429a      	cmp	r2, r3
   30318:	d80c      	bhi.n	30334 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   3031a:	68bb      	ldr	r3, [r7, #8]
   3031c:	681a      	ldr	r2, [r3, #0]
   3031e:	68fb      	ldr	r3, [r7, #12]
   30320:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   30322:	68bb      	ldr	r3, [r7, #8]
   30324:	681a      	ldr	r2, [r3, #0]
   30326:	68fb      	ldr	r3, [r7, #12]
   30328:	685b      	ldr	r3, [r3, #4]
   3032a:	18d2      	adds	r2, r2, r3
   3032c:	68bb      	ldr	r3, [r7, #8]
   3032e:	601a      	str	r2, [r3, #0]
			rc = 1;
   30330:	2301      	movs	r3, #1
   30332:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   30334:	68fb      	ldr	r3, [r7, #12]
   30336:	2200      	movs	r2, #0
   30338:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   3033a:	697b      	ldr	r3, [r7, #20]
}
   3033c:	0018      	movs	r0, r3
   3033e:	46bd      	mov	sp, r7
   30340:	b006      	add	sp, #24
   30342:	bd80      	pop	{r7, pc}
   30344:	00030131 	.word	0x00030131

00030348 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   30348:	b580      	push	{r7, lr}
   3034a:	b086      	sub	sp, #24
   3034c:	af00      	add	r7, sp, #0
   3034e:	1d3b      	adds	r3, r7, #4
   30350:	6018      	str	r0, [r3, #0]
   30352:	6059      	str	r1, [r3, #4]
   30354:	609a      	str	r2, [r3, #8]
	int rc = 0;
   30356:	2300      	movs	r3, #0
   30358:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   3035a:	1d3b      	adds	r3, r7, #4
   3035c:	681b      	ldr	r3, [r3, #0]
   3035e:	2b00      	cmp	r3, #0
   30360:	d007      	beq.n	30372 <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   30362:	1d3b      	adds	r3, r7, #4
   30364:	681b      	ldr	r3, [r3, #0]
   30366:	0018      	movs	r0, r3
   30368:	4b06      	ldr	r3, [pc, #24]	; (30384 <MQTTstrlen+0x3c>)
   3036a:	4798      	blx	r3
   3036c:	0003      	movs	r3, r0
   3036e:	617b      	str	r3, [r7, #20]
   30370:	e002      	b.n	30378 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   30372:	1d3b      	adds	r3, r7, #4
   30374:	685b      	ldr	r3, [r3, #4]
   30376:	617b      	str	r3, [r7, #20]
	return rc;
   30378:	697b      	ldr	r3, [r7, #20]
}
   3037a:	0018      	movs	r0, r3
   3037c:	46bd      	mov	sp, r7
   3037e:	b006      	add	sp, #24
   30380:	bd80      	pop	{r7, pc}
   30382:	46c0      	nop			; (mov r8, r8)
   30384:	00034c3b 	.word	0x00034c3b

00030388 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   30388:	b580      	push	{r7, lr}
   3038a:	b086      	sub	sp, #24
   3038c:	af00      	add	r7, sp, #0
   3038e:	6078      	str	r0, [r7, #4]
   30390:	6039      	str	r1, [r7, #0]
	int alen = 0,
   30392:	2300      	movs	r3, #0
   30394:	617b      	str	r3, [r7, #20]
		blen = 0;
   30396:	2300      	movs	r3, #0
   30398:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   3039a:	687b      	ldr	r3, [r7, #4]
   3039c:	681b      	ldr	r3, [r3, #0]
   3039e:	2b00      	cmp	r3, #0
   303a0:	d00a      	beq.n	303b8 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   303a2:	687b      	ldr	r3, [r7, #4]
   303a4:	681b      	ldr	r3, [r3, #0]
   303a6:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   303a8:	687b      	ldr	r3, [r7, #4]
   303aa:	681b      	ldr	r3, [r3, #0]
   303ac:	0018      	movs	r0, r3
   303ae:	4b12      	ldr	r3, [pc, #72]	; (303f8 <MQTTPacket_equals+0x70>)
   303b0:	4798      	blx	r3
   303b2:	0003      	movs	r3, r0
   303b4:	617b      	str	r3, [r7, #20]
   303b6:	e005      	b.n	303c4 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   303b8:	687b      	ldr	r3, [r7, #4]
   303ba:	689b      	ldr	r3, [r3, #8]
   303bc:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   303be:	687b      	ldr	r3, [r7, #4]
   303c0:	685b      	ldr	r3, [r3, #4]
   303c2:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   303c4:	683b      	ldr	r3, [r7, #0]
   303c6:	0018      	movs	r0, r3
   303c8:	4b0b      	ldr	r3, [pc, #44]	; (303f8 <MQTTPacket_equals+0x70>)
   303ca:	4798      	blx	r3
   303cc:	0003      	movs	r3, r0
   303ce:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   303d0:	697a      	ldr	r2, [r7, #20]
   303d2:	68fb      	ldr	r3, [r7, #12]
   303d4:	429a      	cmp	r2, r3
   303d6:	d109      	bne.n	303ec <MQTTPacket_equals+0x64>
   303d8:	697a      	ldr	r2, [r7, #20]
   303da:	6839      	ldr	r1, [r7, #0]
   303dc:	693b      	ldr	r3, [r7, #16]
   303de:	0018      	movs	r0, r3
   303e0:	4b06      	ldr	r3, [pc, #24]	; (303fc <MQTTPacket_equals+0x74>)
   303e2:	4798      	blx	r3
   303e4:	1e03      	subs	r3, r0, #0
   303e6:	d101      	bne.n	303ec <MQTTPacket_equals+0x64>
   303e8:	2301      	movs	r3, #1
   303ea:	e000      	b.n	303ee <MQTTPacket_equals+0x66>
   303ec:	2300      	movs	r3, #0
}
   303ee:	0018      	movs	r0, r3
   303f0:	46bd      	mov	sp, r7
   303f2:	b006      	add	sp, #24
   303f4:	bd80      	pop	{r7, pc}
   303f6:	46c0      	nop			; (mov r8, r8)
   303f8:	00034c3b 	.word	0x00034c3b
   303fc:	00034c49 	.word	0x00034c49

00030400 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   30400:	b580      	push	{r7, lr}
   30402:	b086      	sub	sp, #24
   30404:	af00      	add	r7, sp, #0
   30406:	60f8      	str	r0, [r7, #12]
   30408:	0038      	movs	r0, r7
   3040a:	6001      	str	r1, [r0, #0]
   3040c:	6042      	str	r2, [r0, #4]
   3040e:	6083      	str	r3, [r0, #8]
	int len = 0;
   30410:	2300      	movs	r3, #0
   30412:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   30414:	003b      	movs	r3, r7
   30416:	6818      	ldr	r0, [r3, #0]
   30418:	6859      	ldr	r1, [r3, #4]
   3041a:	689a      	ldr	r2, [r3, #8]
   3041c:	4b09      	ldr	r3, [pc, #36]	; (30444 <MQTTSerialize_publishLength+0x44>)
   3041e:	4798      	blx	r3
   30420:	0003      	movs	r3, r0
   30422:	1c9a      	adds	r2, r3, #2
   30424:	6a3b      	ldr	r3, [r7, #32]
   30426:	18d3      	adds	r3, r2, r3
   30428:	697a      	ldr	r2, [r7, #20]
   3042a:	18d3      	adds	r3, r2, r3
   3042c:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   3042e:	68fb      	ldr	r3, [r7, #12]
   30430:	2b00      	cmp	r3, #0
   30432:	dd02      	ble.n	3043a <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   30434:	697b      	ldr	r3, [r7, #20]
   30436:	3302      	adds	r3, #2
   30438:	617b      	str	r3, [r7, #20]
	return len;
   3043a:	697b      	ldr	r3, [r7, #20]
}
   3043c:	0018      	movs	r0, r3
   3043e:	46bd      	mov	sp, r7
   30440:	b006      	add	sp, #24
   30442:	bd80      	pop	{r7, pc}
   30444:	00030349 	.word	0x00030349

00030448 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   30448:	b590      	push	{r4, r7, lr}
   3044a:	b08b      	sub	sp, #44	; 0x2c
   3044c:	af02      	add	r7, sp, #8
   3044e:	60f8      	str	r0, [r7, #12]
   30450:	60b9      	str	r1, [r7, #8]
   30452:	603b      	str	r3, [r7, #0]
   30454:	1dfb      	adds	r3, r7, #7
   30456:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   30458:	68fb      	ldr	r3, [r7, #12]
   3045a:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   3045c:	2300      	movs	r3, #0
   3045e:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   30460:	2300      	movs	r3, #0
   30462:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   30464:	2300      	movs	r3, #0
   30466:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   30468:	2308      	movs	r3, #8
   3046a:	2230      	movs	r2, #48	; 0x30
   3046c:	4694      	mov	ip, r2
   3046e:	44bc      	add	ip, r7
   30470:	4463      	add	r3, ip
   30472:	6838      	ldr	r0, [r7, #0]
   30474:	6cba      	ldr	r2, [r7, #72]	; 0x48
   30476:	9200      	str	r2, [sp, #0]
   30478:	6819      	ldr	r1, [r3, #0]
   3047a:	685a      	ldr	r2, [r3, #4]
   3047c:	689b      	ldr	r3, [r3, #8]
   3047e:	4c46      	ldr	r4, [pc, #280]	; (30598 <MQTTSerialize_publish+0x150>)
   30480:	47a0      	blx	r4
   30482:	0003      	movs	r3, r0
   30484:	61bb      	str	r3, [r7, #24]
   30486:	69bb      	ldr	r3, [r7, #24]
   30488:	0018      	movs	r0, r3
   3048a:	4b44      	ldr	r3, [pc, #272]	; (3059c <MQTTSerialize_publish+0x154>)
   3048c:	4798      	blx	r3
   3048e:	0002      	movs	r2, r0
   30490:	68bb      	ldr	r3, [r7, #8]
   30492:	429a      	cmp	r2, r3
   30494:	dd03      	ble.n	3049e <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30496:	2302      	movs	r3, #2
   30498:	425b      	negs	r3, r3
   3049a:	61fb      	str	r3, [r7, #28]
		goto exit;
   3049c:	e077      	b.n	3058e <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   3049e:	2310      	movs	r3, #16
   304a0:	18fb      	adds	r3, r7, r3
   304a2:	781a      	ldrb	r2, [r3, #0]
   304a4:	210f      	movs	r1, #15
   304a6:	400a      	ands	r2, r1
   304a8:	1c11      	adds	r1, r2, #0
   304aa:	2230      	movs	r2, #48	; 0x30
   304ac:	430a      	orrs	r2, r1
   304ae:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   304b0:	1dfb      	adds	r3, r7, #7
   304b2:	781b      	ldrb	r3, [r3, #0]
   304b4:	2201      	movs	r2, #1
   304b6:	4013      	ands	r3, r2
   304b8:	b2da      	uxtb	r2, r3
   304ba:	2310      	movs	r3, #16
   304bc:	18fb      	adds	r3, r7, r3
   304be:	2101      	movs	r1, #1
   304c0:	400a      	ands	r2, r1
   304c2:	00d0      	lsls	r0, r2, #3
   304c4:	781a      	ldrb	r2, [r3, #0]
   304c6:	2108      	movs	r1, #8
   304c8:	438a      	bics	r2, r1
   304ca:	1c11      	adds	r1, r2, #0
   304cc:	1c02      	adds	r2, r0, #0
   304ce:	430a      	orrs	r2, r1
   304d0:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   304d2:	683b      	ldr	r3, [r7, #0]
   304d4:	b2db      	uxtb	r3, r3
   304d6:	1c1a      	adds	r2, r3, #0
   304d8:	2303      	movs	r3, #3
   304da:	4013      	ands	r3, r2
   304dc:	b2da      	uxtb	r2, r3
   304de:	2310      	movs	r3, #16
   304e0:	18fb      	adds	r3, r7, r3
   304e2:	2103      	movs	r1, #3
   304e4:	400a      	ands	r2, r1
   304e6:	1890      	adds	r0, r2, r2
   304e8:	781a      	ldrb	r2, [r3, #0]
   304ea:	2106      	movs	r1, #6
   304ec:	438a      	bics	r2, r1
   304ee:	1c11      	adds	r1, r2, #0
   304f0:	1c02      	adds	r2, r0, #0
   304f2:	430a      	orrs	r2, r1
   304f4:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   304f6:	2330      	movs	r3, #48	; 0x30
   304f8:	18fb      	adds	r3, r7, r3
   304fa:	781b      	ldrb	r3, [r3, #0]
   304fc:	2201      	movs	r2, #1
   304fe:	4013      	ands	r3, r2
   30500:	b2da      	uxtb	r2, r3
   30502:	2310      	movs	r3, #16
   30504:	18fb      	adds	r3, r7, r3
   30506:	2101      	movs	r1, #1
   30508:	400a      	ands	r2, r1
   3050a:	0010      	movs	r0, r2
   3050c:	781a      	ldrb	r2, [r3, #0]
   3050e:	2101      	movs	r1, #1
   30510:	438a      	bics	r2, r1
   30512:	1c11      	adds	r1, r2, #0
   30514:	1c02      	adds	r2, r0, #0
   30516:	430a      	orrs	r2, r1
   30518:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   3051a:	2310      	movs	r3, #16
   3051c:	18fb      	adds	r3, r7, r3
   3051e:	781a      	ldrb	r2, [r3, #0]
   30520:	2314      	movs	r3, #20
   30522:	18fb      	adds	r3, r7, r3
   30524:	0011      	movs	r1, r2
   30526:	0018      	movs	r0, r3
   30528:	4b1d      	ldr	r3, [pc, #116]	; (305a0 <MQTTSerialize_publish+0x158>)
   3052a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   3052c:	697b      	ldr	r3, [r7, #20]
   3052e:	69ba      	ldr	r2, [r7, #24]
   30530:	0011      	movs	r1, r2
   30532:	0018      	movs	r0, r3
   30534:	4b1b      	ldr	r3, [pc, #108]	; (305a4 <MQTTSerialize_publish+0x15c>)
   30536:	4798      	blx	r3
   30538:	0002      	movs	r2, r0
   3053a:	697b      	ldr	r3, [r7, #20]
   3053c:	189b      	adds	r3, r3, r2
   3053e:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   30540:	2308      	movs	r3, #8
   30542:	2230      	movs	r2, #48	; 0x30
   30544:	4694      	mov	ip, r2
   30546:	44bc      	add	ip, r7
   30548:	4463      	add	r3, ip
   3054a:	2214      	movs	r2, #20
   3054c:	18b8      	adds	r0, r7, r2
   3054e:	6819      	ldr	r1, [r3, #0]
   30550:	685a      	ldr	r2, [r3, #4]
   30552:	689b      	ldr	r3, [r3, #8]
   30554:	4c14      	ldr	r4, [pc, #80]	; (305a8 <MQTTSerialize_publish+0x160>)
   30556:	47a0      	blx	r4

	if (qos > 0)
   30558:	683b      	ldr	r3, [r7, #0]
   3055a:	2b00      	cmp	r3, #0
   3055c:	dd08      	ble.n	30570 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   3055e:	2334      	movs	r3, #52	; 0x34
   30560:	18fb      	adds	r3, r7, r3
   30562:	881a      	ldrh	r2, [r3, #0]
   30564:	2314      	movs	r3, #20
   30566:	18fb      	adds	r3, r7, r3
   30568:	0011      	movs	r1, r2
   3056a:	0018      	movs	r0, r3
   3056c:	4b0f      	ldr	r3, [pc, #60]	; (305ac <MQTTSerialize_publish+0x164>)
   3056e:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   30570:	697b      	ldr	r3, [r7, #20]
   30572:	6cba      	ldr	r2, [r7, #72]	; 0x48
   30574:	6c79      	ldr	r1, [r7, #68]	; 0x44
   30576:	0018      	movs	r0, r3
   30578:	4b0d      	ldr	r3, [pc, #52]	; (305b0 <MQTTSerialize_publish+0x168>)
   3057a:	4798      	blx	r3
	ptr += payloadlen;
   3057c:	697a      	ldr	r2, [r7, #20]
   3057e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30580:	18d3      	adds	r3, r2, r3
   30582:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   30584:	697b      	ldr	r3, [r7, #20]
   30586:	001a      	movs	r2, r3
   30588:	68fb      	ldr	r3, [r7, #12]
   3058a:	1ad3      	subs	r3, r2, r3
   3058c:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3058e:	69fb      	ldr	r3, [r7, #28]
}
   30590:	0018      	movs	r0, r3
   30592:	46bd      	mov	sp, r7
   30594:	b009      	add	sp, #36	; 0x24
   30596:	bd90      	pop	{r4, r7, pc}
   30598:	00030401 	.word	0x00030401
   3059c:	0003006d 	.word	0x0003006d
   305a0:	0003018f 	.word	0x0003018f
   305a4:	0002ff75 	.word	0x0002ff75
   305a8:	00030261 	.word	0x00030261
   305ac:	000301b9 	.word	0x000301b9
   305b0:	0003484d 	.word	0x0003484d

000305b4 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   305b4:	b580      	push	{r7, lr}
   305b6:	b088      	sub	sp, #32
   305b8:	af00      	add	r7, sp, #0
   305ba:	60f8      	str	r0, [r7, #12]
   305bc:	60b9      	str	r1, [r7, #8]
   305be:	0019      	movs	r1, r3
   305c0:	1dfb      	adds	r3, r7, #7
   305c2:	701a      	strb	r2, [r3, #0]
   305c4:	1dbb      	adds	r3, r7, #6
   305c6:	1c0a      	adds	r2, r1, #0
   305c8:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   305ca:	2300      	movs	r3, #0
   305cc:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   305ce:	2300      	movs	r3, #0
   305d0:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   305d2:	68fb      	ldr	r3, [r7, #12]
   305d4:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   305d6:	68bb      	ldr	r3, [r7, #8]
   305d8:	2b03      	cmp	r3, #3
   305da:	dc03      	bgt.n	305e4 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   305dc:	2302      	movs	r3, #2
   305de:	425b      	negs	r3, r3
   305e0:	61fb      	str	r3, [r7, #28]
		goto exit;
   305e2:	e055      	b.n	30690 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   305e4:	1dfb      	adds	r3, r7, #7
   305e6:	781b      	ldrb	r3, [r3, #0]
   305e8:	220f      	movs	r2, #15
   305ea:	4013      	ands	r3, r2
   305ec:	b2da      	uxtb	r2, r3
   305ee:	2318      	movs	r3, #24
   305f0:	18fb      	adds	r3, r7, r3
   305f2:	0110      	lsls	r0, r2, #4
   305f4:	781a      	ldrb	r2, [r3, #0]
   305f6:	210f      	movs	r1, #15
   305f8:	400a      	ands	r2, r1
   305fa:	1c11      	adds	r1, r2, #0
   305fc:	1c02      	adds	r2, r0, #0
   305fe:	430a      	orrs	r2, r1
   30600:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   30602:	1dbb      	adds	r3, r7, #6
   30604:	781b      	ldrb	r3, [r3, #0]
   30606:	2201      	movs	r2, #1
   30608:	4013      	ands	r3, r2
   3060a:	b2da      	uxtb	r2, r3
   3060c:	2318      	movs	r3, #24
   3060e:	18fb      	adds	r3, r7, r3
   30610:	2101      	movs	r1, #1
   30612:	400a      	ands	r2, r1
   30614:	00d0      	lsls	r0, r2, #3
   30616:	781a      	ldrb	r2, [r3, #0]
   30618:	2108      	movs	r1, #8
   3061a:	438a      	bics	r2, r1
   3061c:	1c11      	adds	r1, r2, #0
   3061e:	1c02      	adds	r2, r0, #0
   30620:	430a      	orrs	r2, r1
   30622:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   30624:	1dfb      	adds	r3, r7, #7
   30626:	781b      	ldrb	r3, [r3, #0]
   30628:	3b06      	subs	r3, #6
   3062a:	425a      	negs	r2, r3
   3062c:	4153      	adcs	r3, r2
   3062e:	b2db      	uxtb	r3, r3
   30630:	1c1a      	adds	r2, r3, #0
   30632:	2303      	movs	r3, #3
   30634:	4013      	ands	r3, r2
   30636:	b2da      	uxtb	r2, r3
   30638:	2318      	movs	r3, #24
   3063a:	18fb      	adds	r3, r7, r3
   3063c:	2103      	movs	r1, #3
   3063e:	400a      	ands	r2, r1
   30640:	1890      	adds	r0, r2, r2
   30642:	781a      	ldrb	r2, [r3, #0]
   30644:	2106      	movs	r1, #6
   30646:	438a      	bics	r2, r1
   30648:	1c11      	adds	r1, r2, #0
   3064a:	1c02      	adds	r2, r0, #0
   3064c:	430a      	orrs	r2, r1
   3064e:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30650:	2318      	movs	r3, #24
   30652:	18fb      	adds	r3, r7, r3
   30654:	781a      	ldrb	r2, [r3, #0]
   30656:	2314      	movs	r3, #20
   30658:	18fb      	adds	r3, r7, r3
   3065a:	0011      	movs	r1, r2
   3065c:	0018      	movs	r0, r3
   3065e:	4b0f      	ldr	r3, [pc, #60]	; (3069c <MQTTSerialize_ack+0xe8>)
   30660:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   30662:	697b      	ldr	r3, [r7, #20]
   30664:	2102      	movs	r1, #2
   30666:	0018      	movs	r0, r3
   30668:	4b0d      	ldr	r3, [pc, #52]	; (306a0 <MQTTSerialize_ack+0xec>)
   3066a:	4798      	blx	r3
   3066c:	0002      	movs	r2, r0
   3066e:	697b      	ldr	r3, [r7, #20]
   30670:	189b      	adds	r3, r3, r2
   30672:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   30674:	2328      	movs	r3, #40	; 0x28
   30676:	18fb      	adds	r3, r7, r3
   30678:	881a      	ldrh	r2, [r3, #0]
   3067a:	2314      	movs	r3, #20
   3067c:	18fb      	adds	r3, r7, r3
   3067e:	0011      	movs	r1, r2
   30680:	0018      	movs	r0, r3
   30682:	4b08      	ldr	r3, [pc, #32]	; (306a4 <MQTTSerialize_ack+0xf0>)
   30684:	4798      	blx	r3
	rc = ptr - buf;
   30686:	697b      	ldr	r3, [r7, #20]
   30688:	001a      	movs	r2, r3
   3068a:	68fb      	ldr	r3, [r7, #12]
   3068c:	1ad3      	subs	r3, r2, r3
   3068e:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30690:	69fb      	ldr	r3, [r7, #28]
}
   30692:	0018      	movs	r0, r3
   30694:	46bd      	mov	sp, r7
   30696:	b008      	add	sp, #32
   30698:	bd80      	pop	{r7, pc}
   3069a:	46c0      	nop			; (mov r8, r8)
   3069c:	0003018f 	.word	0x0003018f
   306a0:	0002ff75 	.word	0x0002ff75
   306a4:	000301b9 	.word	0x000301b9

000306a8 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   306a8:	b580      	push	{r7, lr}
   306aa:	b084      	sub	sp, #16
   306ac:	af00      	add	r7, sp, #0
   306ae:	6078      	str	r0, [r7, #4]
   306b0:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   306b2:	2302      	movs	r3, #2
   306b4:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   306b6:	2300      	movs	r3, #0
   306b8:	60fb      	str	r3, [r7, #12]
   306ba:	e014      	b.n	306e6 <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   306bc:	68fa      	ldr	r2, [r7, #12]
   306be:	0013      	movs	r3, r2
   306c0:	005b      	lsls	r3, r3, #1
   306c2:	189b      	adds	r3, r3, r2
   306c4:	009b      	lsls	r3, r3, #2
   306c6:	001a      	movs	r2, r3
   306c8:	683b      	ldr	r3, [r7, #0]
   306ca:	189b      	adds	r3, r3, r2
   306cc:	6818      	ldr	r0, [r3, #0]
   306ce:	6859      	ldr	r1, [r3, #4]
   306d0:	689a      	ldr	r2, [r3, #8]
   306d2:	4b09      	ldr	r3, [pc, #36]	; (306f8 <MQTTSerialize_subscribeLength+0x50>)
   306d4:	4798      	blx	r3
   306d6:	0003      	movs	r3, r0
   306d8:	3303      	adds	r3, #3
   306da:	68ba      	ldr	r2, [r7, #8]
   306dc:	18d3      	adds	r3, r2, r3
   306de:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   306e0:	68fb      	ldr	r3, [r7, #12]
   306e2:	3301      	adds	r3, #1
   306e4:	60fb      	str	r3, [r7, #12]
   306e6:	68fa      	ldr	r2, [r7, #12]
   306e8:	687b      	ldr	r3, [r7, #4]
   306ea:	429a      	cmp	r2, r3
   306ec:	dbe6      	blt.n	306bc <MQTTSerialize_subscribeLength+0x14>
	return len;
   306ee:	68bb      	ldr	r3, [r7, #8]
}
   306f0:	0018      	movs	r0, r3
   306f2:	46bd      	mov	sp, r7
   306f4:	b004      	add	sp, #16
   306f6:	bd80      	pop	{r7, pc}
   306f8:	00030349 	.word	0x00030349

000306fc <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   306fc:	b590      	push	{r4, r7, lr}
   306fe:	b08b      	sub	sp, #44	; 0x2c
   30700:	af00      	add	r7, sp, #0
   30702:	60f8      	str	r0, [r7, #12]
   30704:	60b9      	str	r1, [r7, #8]
   30706:	0019      	movs	r1, r3
   30708:	1dfb      	adds	r3, r7, #7
   3070a:	701a      	strb	r2, [r3, #0]
   3070c:	1d3b      	adds	r3, r7, #4
   3070e:	1c0a      	adds	r2, r1, #0
   30710:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   30712:	68fb      	ldr	r3, [r7, #12]
   30714:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   30716:	2300      	movs	r3, #0
   30718:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   3071a:	2300      	movs	r3, #0
   3071c:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   3071e:	2300      	movs	r3, #0
   30720:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   30722:	2300      	movs	r3, #0
   30724:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   30726:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   30728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   3072a:	0011      	movs	r1, r2
   3072c:	0018      	movs	r0, r3
   3072e:	4b41      	ldr	r3, [pc, #260]	; (30834 <MQTTSerialize_subscribe+0x138>)
   30730:	4798      	blx	r3
   30732:	0003      	movs	r3, r0
   30734:	61fb      	str	r3, [r7, #28]
   30736:	69fb      	ldr	r3, [r7, #28]
   30738:	0018      	movs	r0, r3
   3073a:	4b3f      	ldr	r3, [pc, #252]	; (30838 <MQTTSerialize_subscribe+0x13c>)
   3073c:	4798      	blx	r3
   3073e:	0002      	movs	r2, r0
   30740:	68bb      	ldr	r3, [r7, #8]
   30742:	429a      	cmp	r2, r3
   30744:	dd03      	ble.n	3074e <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30746:	2302      	movs	r3, #2
   30748:	425b      	negs	r3, r3
   3074a:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   3074c:	e06c      	b.n	30828 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   3074e:	2314      	movs	r3, #20
   30750:	18fb      	adds	r3, r7, r3
   30752:	2200      	movs	r2, #0
   30754:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   30756:	2314      	movs	r3, #20
   30758:	18fb      	adds	r3, r7, r3
   3075a:	781a      	ldrb	r2, [r3, #0]
   3075c:	210f      	movs	r1, #15
   3075e:	400a      	ands	r2, r1
   30760:	1c11      	adds	r1, r2, #0
   30762:	2280      	movs	r2, #128	; 0x80
   30764:	4252      	negs	r2, r2
   30766:	430a      	orrs	r2, r1
   30768:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   3076a:	1dfb      	adds	r3, r7, #7
   3076c:	781b      	ldrb	r3, [r3, #0]
   3076e:	2201      	movs	r2, #1
   30770:	4013      	ands	r3, r2
   30772:	b2da      	uxtb	r2, r3
   30774:	2314      	movs	r3, #20
   30776:	18fb      	adds	r3, r7, r3
   30778:	2101      	movs	r1, #1
   3077a:	400a      	ands	r2, r1
   3077c:	00d0      	lsls	r0, r2, #3
   3077e:	781a      	ldrb	r2, [r3, #0]
   30780:	2108      	movs	r1, #8
   30782:	438a      	bics	r2, r1
   30784:	1c11      	adds	r1, r2, #0
   30786:	1c02      	adds	r2, r0, #0
   30788:	430a      	orrs	r2, r1
   3078a:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   3078c:	2314      	movs	r3, #20
   3078e:	18fb      	adds	r3, r7, r3
   30790:	781a      	ldrb	r2, [r3, #0]
   30792:	2106      	movs	r1, #6
   30794:	438a      	bics	r2, r1
   30796:	1c11      	adds	r1, r2, #0
   30798:	2202      	movs	r2, #2
   3079a:	430a      	orrs	r2, r1
   3079c:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   3079e:	2314      	movs	r3, #20
   307a0:	18fb      	adds	r3, r7, r3
   307a2:	781a      	ldrb	r2, [r3, #0]
   307a4:	2318      	movs	r3, #24
   307a6:	18fb      	adds	r3, r7, r3
   307a8:	0011      	movs	r1, r2
   307aa:	0018      	movs	r0, r3
   307ac:	4b23      	ldr	r3, [pc, #140]	; (3083c <MQTTSerialize_subscribe+0x140>)
   307ae:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   307b0:	69bb      	ldr	r3, [r7, #24]
   307b2:	69fa      	ldr	r2, [r7, #28]
   307b4:	0011      	movs	r1, r2
   307b6:	0018      	movs	r0, r3
   307b8:	4b21      	ldr	r3, [pc, #132]	; (30840 <MQTTSerialize_subscribe+0x144>)
   307ba:	4798      	blx	r3
   307bc:	0002      	movs	r2, r0
   307be:	69bb      	ldr	r3, [r7, #24]
   307c0:	189b      	adds	r3, r3, r2
   307c2:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   307c4:	1d3b      	adds	r3, r7, #4
   307c6:	881a      	ldrh	r2, [r3, #0]
   307c8:	2318      	movs	r3, #24
   307ca:	18fb      	adds	r3, r7, r3
   307cc:	0011      	movs	r1, r2
   307ce:	0018      	movs	r0, r3
   307d0:	4b1c      	ldr	r3, [pc, #112]	; (30844 <MQTTSerialize_subscribe+0x148>)
   307d2:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   307d4:	2300      	movs	r3, #0
   307d6:	623b      	str	r3, [r7, #32]
   307d8:	e01d      	b.n	30816 <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   307da:	6a3a      	ldr	r2, [r7, #32]
   307dc:	0013      	movs	r3, r2
   307de:	005b      	lsls	r3, r3, #1
   307e0:	189b      	adds	r3, r3, r2
   307e2:	009b      	lsls	r3, r3, #2
   307e4:	001a      	movs	r2, r3
   307e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   307e8:	189b      	adds	r3, r3, r2
   307ea:	2218      	movs	r2, #24
   307ec:	18b8      	adds	r0, r7, r2
   307ee:	6819      	ldr	r1, [r3, #0]
   307f0:	685a      	ldr	r2, [r3, #4]
   307f2:	689b      	ldr	r3, [r3, #8]
   307f4:	4c14      	ldr	r4, [pc, #80]	; (30848 <MQTTSerialize_subscribe+0x14c>)
   307f6:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   307f8:	6a3b      	ldr	r3, [r7, #32]
   307fa:	009b      	lsls	r3, r3, #2
   307fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   307fe:	18d3      	adds	r3, r2, r3
   30800:	681b      	ldr	r3, [r3, #0]
   30802:	b2da      	uxtb	r2, r3
   30804:	2318      	movs	r3, #24
   30806:	18fb      	adds	r3, r7, r3
   30808:	0011      	movs	r1, r2
   3080a:	0018      	movs	r0, r3
   3080c:	4b0b      	ldr	r3, [pc, #44]	; (3083c <MQTTSerialize_subscribe+0x140>)
   3080e:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   30810:	6a3b      	ldr	r3, [r7, #32]
   30812:	3301      	adds	r3, #1
   30814:	623b      	str	r3, [r7, #32]
   30816:	6a3a      	ldr	r2, [r7, #32]
   30818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   3081a:	429a      	cmp	r2, r3
   3081c:	dbdd      	blt.n	307da <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   3081e:	69bb      	ldr	r3, [r7, #24]
   30820:	001a      	movs	r2, r3
   30822:	68fb      	ldr	r3, [r7, #12]
   30824:	1ad3      	subs	r3, r2, r3
   30826:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   3082a:	0018      	movs	r0, r3
   3082c:	46bd      	mov	sp, r7
   3082e:	b00b      	add	sp, #44	; 0x2c
   30830:	bd90      	pop	{r4, r7, pc}
   30832:	46c0      	nop			; (mov r8, r8)
   30834:	000306a9 	.word	0x000306a9
   30838:	0003006d 	.word	0x0003006d
   3083c:	0003018f 	.word	0x0003018f
   30840:	0002ff75 	.word	0x0002ff75
   30844:	000301b9 	.word	0x000301b9
   30848:	00030261 	.word	0x00030261

0003084c <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   3084c:	b590      	push	{r4, r7, lr}
   3084e:	b08b      	sub	sp, #44	; 0x2c
   30850:	af00      	add	r7, sp, #0
   30852:	60f8      	str	r0, [r7, #12]
   30854:	60b9      	str	r1, [r7, #8]
   30856:	607a      	str	r2, [r7, #4]
   30858:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   3085a:	2300      	movs	r3, #0
   3085c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   3085e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30860:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30862:	2300      	movs	r3, #0
   30864:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30866:	2300      	movs	r3, #0
   30868:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   3086a:	2318      	movs	r3, #24
   3086c:	18fb      	adds	r3, r7, r3
   3086e:	0018      	movs	r0, r3
   30870:	4b2c      	ldr	r3, [pc, #176]	; (30924 <MQTTDeserialize_suback+0xd8>)
   30872:	4798      	blx	r3
   30874:	0003      	movs	r3, r0
   30876:	001a      	movs	r2, r3
   30878:	231c      	movs	r3, #28
   3087a:	18fb      	adds	r3, r7, r3
   3087c:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   3087e:	231c      	movs	r3, #28
   30880:	18fb      	adds	r3, r7, r3
   30882:	781b      	ldrb	r3, [r3, #0]
   30884:	220f      	movs	r2, #15
   30886:	4393      	bics	r3, r2
   30888:	b2db      	uxtb	r3, r3
   3088a:	2b90      	cmp	r3, #144	; 0x90
   3088c:	d142      	bne.n	30914 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   3088e:	69bb      	ldr	r3, [r7, #24]
   30890:	2214      	movs	r2, #20
   30892:	18ba      	adds	r2, r7, r2
   30894:	0011      	movs	r1, r2
   30896:	0018      	movs	r0, r3
   30898:	4b23      	ldr	r3, [pc, #140]	; (30928 <MQTTDeserialize_suback+0xdc>)
   3089a:	4798      	blx	r3
   3089c:	0003      	movs	r3, r0
   3089e:	627b      	str	r3, [r7, #36]	; 0x24
   308a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   308a2:	69bb      	ldr	r3, [r7, #24]
   308a4:	189b      	adds	r3, r3, r2
   308a6:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   308a8:	69bb      	ldr	r3, [r7, #24]
   308aa:	697a      	ldr	r2, [r7, #20]
   308ac:	189b      	adds	r3, r3, r2
   308ae:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   308b0:	6a3b      	ldr	r3, [r7, #32]
   308b2:	69ba      	ldr	r2, [r7, #24]
   308b4:	1a9b      	subs	r3, r3, r2
   308b6:	2b01      	cmp	r3, #1
   308b8:	dd2e      	ble.n	30918 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   308ba:	2318      	movs	r3, #24
   308bc:	18fb      	adds	r3, r7, r3
   308be:	0018      	movs	r0, r3
   308c0:	4b1a      	ldr	r3, [pc, #104]	; (3092c <MQTTDeserialize_suback+0xe0>)
   308c2:	4798      	blx	r3
   308c4:	0003      	movs	r3, r0
   308c6:	b29a      	uxth	r2, r3
   308c8:	68fb      	ldr	r3, [r7, #12]
   308ca:	801a      	strh	r2, [r3, #0]

	*count = 0;
   308cc:	687b      	ldr	r3, [r7, #4]
   308ce:	2200      	movs	r2, #0
   308d0:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   308d2:	e018      	b.n	30906 <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   308d4:	687b      	ldr	r3, [r7, #4]
   308d6:	681a      	ldr	r2, [r3, #0]
   308d8:	68bb      	ldr	r3, [r7, #8]
   308da:	429a      	cmp	r2, r3
   308dc:	dd03      	ble.n	308e6 <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   308de:	2301      	movs	r3, #1
   308e0:	425b      	negs	r3, r3
   308e2:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   308e4:	e019      	b.n	3091a <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   308e6:	687b      	ldr	r3, [r7, #4]
   308e8:	681a      	ldr	r2, [r3, #0]
   308ea:	1c51      	adds	r1, r2, #1
   308ec:	687b      	ldr	r3, [r7, #4]
   308ee:	6019      	str	r1, [r3, #0]
   308f0:	0013      	movs	r3, r2
   308f2:	009b      	lsls	r3, r3, #2
   308f4:	683a      	ldr	r2, [r7, #0]
   308f6:	18d4      	adds	r4, r2, r3
   308f8:	2318      	movs	r3, #24
   308fa:	18fb      	adds	r3, r7, r3
   308fc:	0018      	movs	r0, r3
   308fe:	4b09      	ldr	r3, [pc, #36]	; (30924 <MQTTDeserialize_suback+0xd8>)
   30900:	4798      	blx	r3
   30902:	0003      	movs	r3, r0
   30904:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   30906:	69ba      	ldr	r2, [r7, #24]
   30908:	6a3b      	ldr	r3, [r7, #32]
   3090a:	429a      	cmp	r2, r3
   3090c:	d3e2      	bcc.n	308d4 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   3090e:	2301      	movs	r3, #1
   30910:	627b      	str	r3, [r7, #36]	; 0x24
   30912:	e002      	b.n	3091a <MQTTDeserialize_suback+0xce>
		goto exit;
   30914:	46c0      	nop			; (mov r8, r8)
   30916:	e000      	b.n	3091a <MQTTDeserialize_suback+0xce>
		goto exit;
   30918:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   3091c:	0018      	movs	r0, r3
   3091e:	46bd      	mov	sp, r7
   30920:	b00b      	add	sp, #44	; 0x2c
   30922:	bd90      	pop	{r4, r7, pc}
   30924:	00030163 	.word	0x00030163
   30928:	000300fd 	.word	0x000300fd
   3092c:	00030131 	.word	0x00030131

00030930 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   30930:	b580      	push	{r7, lr}
   30932:	b082      	sub	sp, #8
   30934:	af00      	add	r7, sp, #0
   30936:	6078      	str	r0, [r7, #4]
	config->port = 80;
   30938:	687b      	ldr	r3, [r7, #4]
   3093a:	2250      	movs	r2, #80	; 0x50
   3093c:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   3093e:	687b      	ldr	r3, [r7, #4]
   30940:	2200      	movs	r2, #0
   30942:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   30944:	687b      	ldr	r3, [r7, #4]
   30946:	4a0b      	ldr	r2, [pc, #44]	; (30974 <http_client_get_config_defaults+0x44>)
   30948:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   3094a:	687b      	ldr	r3, [r7, #4]
   3094c:	2200      	movs	r2, #0
   3094e:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   30950:	687b      	ldr	r3, [r7, #4]
   30952:	2200      	movs	r2, #0
   30954:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   30956:	687b      	ldr	r3, [r7, #4]
   30958:	2280      	movs	r2, #128	; 0x80
   3095a:	0052      	lsls	r2, r2, #1
   3095c:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   3095e:	687b      	ldr	r3, [r7, #4]
   30960:	2252      	movs	r2, #82	; 0x52
   30962:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   30964:	687b      	ldr	r3, [r7, #4]
   30966:	4a04      	ldr	r2, [pc, #16]	; (30978 <http_client_get_config_defaults+0x48>)
   30968:	619a      	str	r2, [r3, #24]
}
   3096a:	46c0      	nop			; (mov r8, r8)
   3096c:	46bd      	mov	sp, r7
   3096e:	b002      	add	sp, #8
   30970:	bd80      	pop	{r7, pc}
   30972:	46c0      	nop			; (mov r8, r8)
   30974:	00004e20 	.word	0x00004e20
   30978:	00039c14 	.word	0x00039c14

0003097c <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   3097c:	b590      	push	{r4, r7, lr}
   3097e:	b083      	sub	sp, #12
   30980:	af00      	add	r7, sp, #0
   30982:	6078      	str	r0, [r7, #4]
   30984:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   30986:	687b      	ldr	r3, [r7, #4]
   30988:	2b00      	cmp	r3, #0
   3098a:	d002      	beq.n	30992 <http_client_init+0x16>
   3098c:	683b      	ldr	r3, [r7, #0]
   3098e:	2b00      	cmp	r3, #0
   30990:	d102      	bne.n	30998 <http_client_init+0x1c>
		return -EINVAL;
   30992:	2316      	movs	r3, #22
   30994:	425b      	negs	r3, r3
   30996:	e058      	b.n	30a4a <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   30998:	683b      	ldr	r3, [r7, #0]
   3099a:	691b      	ldr	r3, [r3, #16]
   3099c:	2b00      	cmp	r3, #0
   3099e:	d102      	bne.n	309a6 <http_client_init+0x2a>
		return -EINVAL;
   309a0:	2316      	movs	r3, #22
   309a2:	425b      	negs	r3, r3
   309a4:	e051      	b.n	30a4a <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   309a6:	683b      	ldr	r3, [r7, #0]
   309a8:	685b      	ldr	r3, [r3, #4]
   309aa:	2b00      	cmp	r3, #0
   309ac:	d102      	bne.n	309b4 <http_client_init+0x38>
		return -EINVAL;
   309ae:	2316      	movs	r3, #22
   309b0:	425b      	negs	r3, r3
   309b2:	e04a      	b.n	30a4a <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   309b4:	683b      	ldr	r3, [r7, #0]
   309b6:	695b      	ldr	r3, [r3, #20]
   309b8:	2b51      	cmp	r3, #81	; 0x51
   309ba:	d802      	bhi.n	309c2 <http_client_init+0x46>
		return -EINVAL;
   309bc:	2316      	movs	r3, #22
   309be:	425b      	negs	r3, r3
   309c0:	e043      	b.n	30a4a <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   309c2:	687b      	ldr	r3, [r7, #4]
   309c4:	22e8      	movs	r2, #232	; 0xe8
   309c6:	2100      	movs	r1, #0
   309c8:	0018      	movs	r0, r3
   309ca:	4b22      	ldr	r3, [pc, #136]	; (30a54 <http_client_init+0xd8>)
   309cc:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   309ce:	687b      	ldr	r3, [r7, #4]
   309d0:	3350      	adds	r3, #80	; 0x50
   309d2:	6839      	ldr	r1, [r7, #0]
   309d4:	221c      	movs	r2, #28
   309d6:	0018      	movs	r0, r3
   309d8:	4b1f      	ldr	r3, [pc, #124]	; (30a58 <http_client_init+0xdc>)
   309da:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   309dc:	687b      	ldr	r3, [r7, #4]
   309de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   309e0:	2b00      	cmp	r3, #0
   309e2:	d115      	bne.n	30a10 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   309e4:	683b      	ldr	r3, [r7, #0]
   309e6:	691b      	ldr	r3, [r3, #16]
   309e8:	0018      	movs	r0, r3
   309ea:	4b1c      	ldr	r3, [pc, #112]	; (30a5c <http_client_init+0xe0>)
   309ec:	4798      	blx	r3
   309ee:	0003      	movs	r3, r0
   309f0:	001a      	movs	r2, r3
   309f2:	687b      	ldr	r3, [r7, #4]
   309f4:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   309f6:	687b      	ldr	r3, [r7, #4]
   309f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   309fa:	2b00      	cmp	r3, #0
   309fc:	d102      	bne.n	30a04 <http_client_init+0x88>
			return -ENOMEM;
   309fe:	230c      	movs	r3, #12
   30a00:	425b      	negs	r3, r3
   30a02:	e022      	b.n	30a4a <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   30a04:	687b      	ldr	r3, [r7, #4]
   30a06:	2241      	movs	r2, #65	; 0x41
   30a08:	5c99      	ldrb	r1, [r3, r2]
   30a0a:	2004      	movs	r0, #4
   30a0c:	4301      	orrs	r1, r0
   30a0e:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   30a10:	683b      	ldr	r3, [r7, #0]
   30a12:	891b      	ldrh	r3, [r3, #8]
   30a14:	2b00      	cmp	r3, #0
   30a16:	d010      	beq.n	30a3a <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   30a18:	683b      	ldr	r3, [r7, #0]
   30a1a:	6858      	ldr	r0, [r3, #4]
   30a1c:	687a      	ldr	r2, [r7, #4]
   30a1e:	4910      	ldr	r1, [pc, #64]	; (30a60 <http_client_init+0xe4>)
   30a20:	2300      	movs	r3, #0
   30a22:	4c10      	ldr	r4, [pc, #64]	; (30a64 <http_client_init+0xe8>)
   30a24:	47a0      	blx	r4
   30a26:	0002      	movs	r2, r0
   30a28:	687b      	ldr	r3, [r7, #4]
   30a2a:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   30a2c:	687b      	ldr	r3, [r7, #4]
   30a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30a30:	2b00      	cmp	r3, #0
   30a32:	da02      	bge.n	30a3a <http_client_init+0xbe>
			return -ENOSPC;
   30a34:	231c      	movs	r3, #28
   30a36:	425b      	negs	r3, r3
   30a38:	e007      	b.n	30a4a <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   30a3a:	687b      	ldr	r3, [r7, #4]
   30a3c:	2200      	movs	r2, #0
   30a3e:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   30a40:	687b      	ldr	r3, [r7, #4]
   30a42:	22d8      	movs	r2, #216	; 0xd8
   30a44:	2100      	movs	r1, #0
   30a46:	5099      	str	r1, [r3, r2]

	return 0;
   30a48:	2300      	movs	r3, #0
}
   30a4a:	0018      	movs	r0, r3
   30a4c:	46bd      	mov	sp, r7
   30a4e:	b003      	add	sp, #12
   30a50:	bd90      	pop	{r4, r7, pc}
   30a52:	46c0      	nop			; (mov r8, r8)
   30a54:	00034883 	.word	0x00034883
   30a58:	0003484d 	.word	0x0003484d
   30a5c:	00034825 	.word	0x00034825
   30a60:	00030d2d 	.word	0x00030d2d
   30a64:	000323d1 	.word	0x000323d1

00030a68 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   30a68:	b580      	push	{r7, lr}
   30a6a:	b082      	sub	sp, #8
   30a6c:	af00      	add	r7, sp, #0
   30a6e:	6078      	str	r0, [r7, #4]
   30a70:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   30a72:	687b      	ldr	r3, [r7, #4]
   30a74:	2b00      	cmp	r3, #0
   30a76:	d102      	bne.n	30a7e <http_client_register_callback+0x16>
		return -EINVAL;
   30a78:	2316      	movs	r3, #22
   30a7a:	425b      	negs	r3, r3
   30a7c:	e003      	b.n	30a86 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   30a7e:	687b      	ldr	r3, [r7, #4]
   30a80:	683a      	ldr	r2, [r7, #0]
   30a82:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   30a84:	2300      	movs	r3, #0
}
   30a86:	0018      	movs	r0, r3
   30a88:	46bd      	mov	sp, r7
   30a8a:	b002      	add	sp, #8
   30a8c:	bd80      	pop	{r7, pc}
	...

00030a90 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   30a90:	b580      	push	{r7, lr}
   30a92:	b082      	sub	sp, #8
   30a94:	af00      	add	r7, sp, #0
   30a96:	6078      	str	r0, [r7, #4]
	switch (err) {
   30a98:	687b      	ldr	r3, [r7, #4]
   30a9a:	330e      	adds	r3, #14
   30a9c:	2b0e      	cmp	r3, #14
   30a9e:	d825      	bhi.n	30aec <_hwerr_to_stderr+0x5c>
   30aa0:	009a      	lsls	r2, r3, #2
   30aa2:	4b18      	ldr	r3, [pc, #96]	; (30b04 <_hwerr_to_stderr+0x74>)
   30aa4:	18d3      	adds	r3, r2, r3
   30aa6:	681b      	ldr	r3, [r3, #0]
   30aa8:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   30aaa:	2305      	movs	r3, #5
   30aac:	425b      	negs	r3, r3
   30aae:	e024      	b.n	30afa <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   30ab0:	2302      	movs	r3, #2
   30ab2:	425b      	negs	r3, r3
   30ab4:	e021      	b.n	30afa <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   30ab6:	2370      	movs	r3, #112	; 0x70
   30ab8:	425b      	negs	r3, r3
   30aba:	e01e      	b.n	30afa <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   30abc:	230c      	movs	r3, #12
   30abe:	425b      	negs	r3, r3
   30ac0:	e01b      	b.n	30afa <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   30ac2:	2316      	movs	r3, #22
   30ac4:	425b      	negs	r3, r3
   30ac6:	e018      	b.n	30afa <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   30ac8:	230c      	movs	r3, #12
   30aca:	425b      	negs	r3, r3
   30acc:	e015      	b.n	30afa <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   30ace:	2305      	movs	r3, #5
   30ad0:	425b      	negs	r3, r3
   30ad2:	e012      	b.n	30afa <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   30ad4:	2379      	movs	r3, #121	; 0x79
   30ad6:	425b      	negs	r3, r3
   30ad8:	e00f      	b.n	30afa <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   30ada:	2368      	movs	r3, #104	; 0x68
   30adc:	425b      	negs	r3, r3
   30ade:	e00c      	b.n	30afa <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   30ae0:	230b      	movs	r3, #11
   30ae2:	425b      	negs	r3, r3
   30ae4:	e009      	b.n	30afa <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   30ae6:	2310      	movs	r3, #16
   30ae8:	425b      	negs	r3, r3
   30aea:	e006      	b.n	30afa <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   30aec:	687b      	ldr	r3, [r7, #4]
   30aee:	2b00      	cmp	r3, #0
   30af0:	da02      	bge.n	30af8 <_hwerr_to_stderr+0x68>
				return -EIO;
   30af2:	2305      	movs	r3, #5
   30af4:	425b      	negs	r3, r3
   30af6:	e000      	b.n	30afa <_hwerr_to_stderr+0x6a>
			}
			return 0;
   30af8:	2300      	movs	r3, #0
	}
}
   30afa:	0018      	movs	r0, r3
   30afc:	46bd      	mov	sp, r7
   30afe:	b002      	add	sp, #8
   30b00:	bd80      	pop	{r7, pc}
   30b02:	46c0      	nop			; (mov r8, r8)
   30b04:	00039d50 	.word	0x00039d50

00030b08 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   30b08:	b580      	push	{r7, lr}
   30b0a:	b08a      	sub	sp, #40	; 0x28
   30b0c:	af00      	add	r7, sp, #0
   30b0e:	603a      	str	r2, [r7, #0]
   30b10:	1dfb      	adds	r3, r7, #7
   30b12:	1c02      	adds	r2, r0, #0
   30b14:	701a      	strb	r2, [r3, #0]
   30b16:	1dbb      	adds	r3, r7, #6
   30b18:	1c0a      	adds	r2, r1, #0
   30b1a:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   30b1c:	1dfb      	adds	r3, r7, #7
   30b1e:	2200      	movs	r2, #0
   30b20:	569a      	ldrsb	r2, [r3, r2]
   30b22:	4b4b      	ldr	r3, [pc, #300]	; (30c50 <http_client_socket_event_handler+0x148>)
   30b24:	0092      	lsls	r2, r2, #2
   30b26:	58d3      	ldr	r3, [r2, r3]
   30b28:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   30b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30b2c:	2b00      	cmp	r3, #0
   30b2e:	d100      	bne.n	30b32 <http_client_socket_event_handler+0x2a>
   30b30:	e08a      	b.n	30c48 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   30b32:	1dbb      	adds	r3, r7, #6
   30b34:	781b      	ldrb	r3, [r3, #0]
   30b36:	2b06      	cmp	r3, #6
   30b38:	d040      	beq.n	30bbc <http_client_socket_event_handler+0xb4>
   30b3a:	2b07      	cmp	r3, #7
   30b3c:	d060      	beq.n	30c00 <http_client_socket_event_handler+0xf8>
   30b3e:	2b05      	cmp	r3, #5
   30b40:	d000      	beq.n	30b44 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   30b42:	e082      	b.n	30c4a <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   30b44:	683b      	ldr	r3, [r7, #0]
   30b46:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   30b48:	6a3b      	ldr	r3, [r7, #32]
   30b4a:	785b      	ldrb	r3, [r3, #1]
   30b4c:	b25b      	sxtb	r3, r3
   30b4e:	001a      	movs	r2, r3
   30b50:	230c      	movs	r3, #12
   30b52:	18fb      	adds	r3, r7, r3
   30b54:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   30b56:	6a3b      	ldr	r3, [r7, #32]
   30b58:	785b      	ldrb	r3, [r3, #1]
   30b5a:	b25b      	sxtb	r3, r3
   30b5c:	2b00      	cmp	r3, #0
   30b5e:	da0c      	bge.n	30b7a <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   30b60:	6a3b      	ldr	r3, [r7, #32]
   30b62:	785b      	ldrb	r3, [r3, #1]
   30b64:	b25b      	sxtb	r3, r3
   30b66:	0018      	movs	r0, r3
   30b68:	4b3a      	ldr	r3, [pc, #232]	; (30c54 <http_client_socket_event_handler+0x14c>)
   30b6a:	4798      	blx	r3
   30b6c:	0002      	movs	r2, r0
   30b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30b70:	0011      	movs	r1, r2
   30b72:	0018      	movs	r0, r3
   30b74:	4b38      	ldr	r3, [pc, #224]	; (30c58 <http_client_socket_event_handler+0x150>)
   30b76:	4798      	blx	r3
    	break;
   30b78:	e067      	b.n	30c4a <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   30b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30b7e:	2b00      	cmp	r3, #0
   30b80:	d006      	beq.n	30b90 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   30b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30b86:	220c      	movs	r2, #12
   30b88:	18ba      	adds	r2, r7, r2
   30b8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   30b8c:	2100      	movs	r1, #0
   30b8e:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   30b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30b92:	2203      	movs	r2, #3
   30b94:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   30b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30b98:	6d58      	ldr	r0, [r3, #84]	; 0x54
   30b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30b9c:	6c99      	ldr	r1, [r3, #72]	; 0x48
   30b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30ba0:	2258      	movs	r2, #88	; 0x58
   30ba2:	5a9b      	ldrh	r3, [r3, r2]
   30ba4:	001a      	movs	r2, r3
   30ba6:	4b2d      	ldr	r3, [pc, #180]	; (30c5c <http_client_socket_event_handler+0x154>)
   30ba8:	4798      	blx	r3
    		_http_client_recv_packet(module);
   30baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30bac:	0018      	movs	r0, r3
   30bae:	4b2c      	ldr	r3, [pc, #176]	; (30c60 <http_client_socket_event_handler+0x158>)
   30bb0:	4798      	blx	r3
			_http_client_request(module);
   30bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30bb4:	0018      	movs	r0, r3
   30bb6:	4b2b      	ldr	r3, [pc, #172]	; (30c64 <http_client_socket_event_handler+0x15c>)
   30bb8:	4798      	blx	r3
    	break;
   30bba:	e046      	b.n	30c4a <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   30bbc:	683b      	ldr	r3, [r7, #0]
   30bbe:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   30bc0:	69fb      	ldr	r3, [r7, #28]
   30bc2:	2204      	movs	r2, #4
   30bc4:	5e9b      	ldrsh	r3, [r3, r2]
   30bc6:	2b00      	cmp	r3, #0
   30bc8:	dd09      	ble.n	30bde <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   30bca:	69fb      	ldr	r3, [r7, #28]
   30bcc:	2204      	movs	r2, #4
   30bce:	5e9b      	ldrsh	r3, [r3, r2]
   30bd0:	001a      	movs	r2, r3
   30bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30bd4:	0011      	movs	r1, r2
   30bd6:	0018      	movs	r0, r3
   30bd8:	4b23      	ldr	r3, [pc, #140]	; (30c68 <http_client_socket_event_handler+0x160>)
   30bda:	4798      	blx	r3
   30bdc:	e00b      	b.n	30bf6 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   30bde:	69fb      	ldr	r3, [r7, #28]
   30be0:	2204      	movs	r2, #4
   30be2:	5e9b      	ldrsh	r3, [r3, r2]
   30be4:	0018      	movs	r0, r3
   30be6:	4b1b      	ldr	r3, [pc, #108]	; (30c54 <http_client_socket_event_handler+0x14c>)
   30be8:	4798      	blx	r3
   30bea:	0002      	movs	r2, r0
   30bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30bee:	0011      	movs	r1, r2
   30bf0:	0018      	movs	r0, r3
   30bf2:	4b19      	ldr	r3, [pc, #100]	; (30c58 <http_client_socket_event_handler+0x150>)
   30bf4:	4798      	blx	r3
		_http_client_recv_packet(module);
   30bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30bf8:	0018      	movs	r0, r3
   30bfa:	4b19      	ldr	r3, [pc, #100]	; (30c60 <http_client_socket_event_handler+0x158>)
   30bfc:	4798      	blx	r3
		break;
   30bfe:	e024      	b.n	30c4a <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   30c00:	231a      	movs	r3, #26
   30c02:	18fb      	adds	r3, r7, r3
   30c04:	683a      	ldr	r2, [r7, #0]
   30c06:	8812      	ldrh	r2, [r2, #0]
   30c08:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   30c0a:	231a      	movs	r3, #26
   30c0c:	18fb      	adds	r3, r7, r3
   30c0e:	2200      	movs	r2, #0
   30c10:	5e9b      	ldrsh	r3, [r3, r2]
   30c12:	2b00      	cmp	r3, #0
   30c14:	da0d      	bge.n	30c32 <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   30c16:	231a      	movs	r3, #26
   30c18:	18fb      	adds	r3, r7, r3
   30c1a:	2200      	movs	r2, #0
   30c1c:	5e9b      	ldrsh	r3, [r3, r2]
   30c1e:	0018      	movs	r0, r3
   30c20:	4b0c      	ldr	r3, [pc, #48]	; (30c54 <http_client_socket_event_handler+0x14c>)
   30c22:	4798      	blx	r3
   30c24:	0002      	movs	r2, r0
   30c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30c28:	0011      	movs	r1, r2
   30c2a:	0018      	movs	r0, r3
   30c2c:	4b0a      	ldr	r3, [pc, #40]	; (30c58 <http_client_socket_event_handler+0x150>)
   30c2e:	4798      	blx	r3
   30c30:	e003      	b.n	30c3a <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   30c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30c34:	0018      	movs	r0, r3
   30c36:	4b0b      	ldr	r3, [pc, #44]	; (30c64 <http_client_socket_event_handler+0x15c>)
   30c38:	4798      	blx	r3
		module->sending = 0;
   30c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30c3c:	2241      	movs	r2, #65	; 0x41
   30c3e:	5c99      	ldrb	r1, [r3, r2]
   30c40:	2001      	movs	r0, #1
   30c42:	4381      	bics	r1, r0
   30c44:	5499      	strb	r1, [r3, r2]
    	break;
   30c46:	e000      	b.n	30c4a <http_client_socket_event_handler+0x142>
		return;
   30c48:	46c0      	nop			; (mov r8, r8)
	}

}
   30c4a:	46bd      	mov	sp, r7
   30c4c:	b00a      	add	sp, #40	; 0x28
   30c4e:	bd80      	pop	{r7, pc}
   30c50:	200046f0 	.word	0x200046f0
   30c54:	00030a91 	.word	0x00030a91
   30c58:	00031105 	.word	0x00031105
   30c5c:	00032461 	.word	0x00032461
   30c60:	00031991 	.word	0x00031991
   30c64:	00031259 	.word	0x00031259
   30c68:	000319f5 	.word	0x000319f5

00030c6c <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   30c6c:	b580      	push	{r7, lr}
   30c6e:	b088      	sub	sp, #32
   30c70:	af00      	add	r7, sp, #0
   30c72:	6078      	str	r0, [r7, #4]
   30c74:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   30c76:	2300      	movs	r3, #0
   30c78:	61fb      	str	r3, [r7, #28]
   30c7a:	e048      	b.n	30d0e <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   30c7c:	4b27      	ldr	r3, [pc, #156]	; (30d1c <http_client_socket_resolve_handler+0xb0>)
   30c7e:	69fa      	ldr	r2, [r7, #28]
   30c80:	0092      	lsls	r2, r2, #2
   30c82:	58d3      	ldr	r3, [r2, r3]
   30c84:	2b00      	cmp	r3, #0
   30c86:	d03f      	beq.n	30d08 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   30c88:	4b24      	ldr	r3, [pc, #144]	; (30d1c <http_client_socket_resolve_handler+0xb0>)
   30c8a:	69fa      	ldr	r2, [r7, #28]
   30c8c:	0092      	lsls	r2, r2, #2
   30c8e:	58d3      	ldr	r3, [r2, r3]
   30c90:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   30c92:	69bb      	ldr	r3, [r7, #24]
   30c94:	1c5a      	adds	r2, r3, #1
   30c96:	687b      	ldr	r3, [r7, #4]
   30c98:	0011      	movs	r1, r2
   30c9a:	0018      	movs	r0, r3
   30c9c:	4b20      	ldr	r3, [pc, #128]	; (30d20 <http_client_socket_resolve_handler+0xb4>)
   30c9e:	4798      	blx	r3
   30ca0:	1e03      	subs	r3, r0, #0
   30ca2:	d131      	bne.n	30d08 <http_client_socket_resolve_handler+0x9c>
   30ca4:	69bb      	ldr	r3, [r7, #24]
   30ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30ca8:	2b01      	cmp	r3, #1
   30caa:	d12d      	bne.n	30d08 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   30cac:	683b      	ldr	r3, [r7, #0]
   30cae:	2b00      	cmp	r3, #0
   30cb0:	d107      	bne.n	30cc2 <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   30cb2:	2376      	movs	r3, #118	; 0x76
   30cb4:	425a      	negs	r2, r3
   30cb6:	69bb      	ldr	r3, [r7, #24]
   30cb8:	0011      	movs	r1, r2
   30cba:	0018      	movs	r0, r3
   30cbc:	4b19      	ldr	r3, [pc, #100]	; (30d24 <http_client_socket_resolve_handler+0xb8>)
   30cbe:	4798      	blx	r3
					return;
   30cc0:	e028      	b.n	30d14 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   30cc2:	2308      	movs	r3, #8
   30cc4:	18fb      	adds	r3, r7, r3
   30cc6:	2202      	movs	r2, #2
   30cc8:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   30cca:	69bb      	ldr	r3, [r7, #24]
   30ccc:	2250      	movs	r2, #80	; 0x50
   30cce:	5a9b      	ldrh	r3, [r3, r2]
   30cd0:	021b      	lsls	r3, r3, #8
   30cd2:	b21a      	sxth	r2, r3
   30cd4:	69bb      	ldr	r3, [r7, #24]
   30cd6:	2150      	movs	r1, #80	; 0x50
   30cd8:	5a5b      	ldrh	r3, [r3, r1]
   30cda:	0a1b      	lsrs	r3, r3, #8
   30cdc:	b29b      	uxth	r3, r3
   30cde:	b21b      	sxth	r3, r3
   30ce0:	4313      	orrs	r3, r2
   30ce2:	b21b      	sxth	r3, r3
   30ce4:	b29a      	uxth	r2, r3
   30ce6:	2308      	movs	r3, #8
   30ce8:	18fb      	adds	r3, r7, r3
   30cea:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   30cec:	2308      	movs	r3, #8
   30cee:	18fb      	adds	r3, r7, r3
   30cf0:	683a      	ldr	r2, [r7, #0]
   30cf2:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   30cf4:	69bb      	ldr	r3, [r7, #24]
   30cf6:	781b      	ldrb	r3, [r3, #0]
   30cf8:	b25b      	sxtb	r3, r3
   30cfa:	2208      	movs	r2, #8
   30cfc:	18b9      	adds	r1, r7, r2
   30cfe:	2210      	movs	r2, #16
   30d00:	0018      	movs	r0, r3
   30d02:	4b09      	ldr	r3, [pc, #36]	; (30d28 <http_client_socket_resolve_handler+0xbc>)
   30d04:	4798      	blx	r3
				return;
   30d06:	e005      	b.n	30d14 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   30d08:	69fb      	ldr	r3, [r7, #28]
   30d0a:	3301      	adds	r3, #1
   30d0c:	61fb      	str	r3, [r7, #28]
   30d0e:	69fb      	ldr	r3, [r7, #28]
   30d10:	2b06      	cmp	r3, #6
   30d12:	ddb3      	ble.n	30c7c <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   30d14:	46bd      	mov	sp, r7
   30d16:	b008      	add	sp, #32
   30d18:	bd80      	pop	{r7, pc}
   30d1a:	46c0      	nop			; (mov r8, r8)
   30d1c:	200046f0 	.word	0x200046f0
   30d20:	00034bdb 	.word	0x00034bdb
   30d24:	00031105 	.word	0x00031105
   30d28:	00025629 	.word	0x00025629

00030d2c <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   30d2c:	b580      	push	{r7, lr}
   30d2e:	b086      	sub	sp, #24
   30d30:	af00      	add	r7, sp, #0
   30d32:	60f8      	str	r0, [r7, #12]
   30d34:	60b9      	str	r1, [r7, #8]
   30d36:	607a      	str	r2, [r7, #4]
   30d38:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   30d3a:	687b      	ldr	r3, [r7, #4]
   30d3c:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   30d3e:	697b      	ldr	r3, [r7, #20]
   30d40:	2b00      	cmp	r3, #0
   30d42:	d007      	beq.n	30d54 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   30d44:	233e      	movs	r3, #62	; 0x3e
   30d46:	425a      	negs	r2, r3
   30d48:	697b      	ldr	r3, [r7, #20]
   30d4a:	0011      	movs	r1, r2
   30d4c:	0018      	movs	r0, r3
   30d4e:	4b03      	ldr	r3, [pc, #12]	; (30d5c <http_client_timer_callback+0x30>)
   30d50:	4798      	blx	r3
   30d52:	e000      	b.n	30d56 <http_client_timer_callback+0x2a>
		return;
   30d54:	46c0      	nop			; (mov r8, r8)
}
   30d56:	46bd      	mov	sp, r7
   30d58:	b006      	add	sp, #24
   30d5a:	bd80      	pop	{r7, pc}
   30d5c:	00031105 	.word	0x00031105

00030d60 <_is_ip>:

static int _is_ip(const char *host)
{
   30d60:	b580      	push	{r7, lr}
   30d62:	b084      	sub	sp, #16
   30d64:	af00      	add	r7, sp, #0
   30d66:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   30d68:	2300      	movs	r3, #0
   30d6a:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   30d6c:	e03a      	b.n	30de4 <_is_ip+0x84>
		ch = *host++;
   30d6e:	687b      	ldr	r3, [r7, #4]
   30d70:	1c5a      	adds	r2, r3, #1
   30d72:	607a      	str	r2, [r7, #4]
   30d74:	220b      	movs	r2, #11
   30d76:	18ba      	adds	r2, r7, r2
   30d78:	781b      	ldrb	r3, [r3, #0]
   30d7a:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   30d7c:	230b      	movs	r3, #11
   30d7e:	18fb      	adds	r3, r7, r3
   30d80:	781b      	ldrb	r3, [r3, #0]
   30d82:	2b60      	cmp	r3, #96	; 0x60
   30d84:	d904      	bls.n	30d90 <_is_ip+0x30>
   30d86:	230b      	movs	r3, #11
   30d88:	18fb      	adds	r3, r7, r3
   30d8a:	781b      	ldrb	r3, [r3, #0]
   30d8c:	2b66      	cmp	r3, #102	; 0x66
   30d8e:	d913      	bls.n	30db8 <_is_ip+0x58>
   30d90:	230b      	movs	r3, #11
   30d92:	18fb      	adds	r3, r7, r3
   30d94:	781b      	ldrb	r3, [r3, #0]
   30d96:	2b40      	cmp	r3, #64	; 0x40
   30d98:	d904      	bls.n	30da4 <_is_ip+0x44>
   30d9a:	230b      	movs	r3, #11
   30d9c:	18fb      	adds	r3, r7, r3
   30d9e:	781b      	ldrb	r3, [r3, #0]
   30da0:	2b46      	cmp	r3, #70	; 0x46
   30da2:	d909      	bls.n	30db8 <_is_ip+0x58>
   30da4:	230b      	movs	r3, #11
   30da6:	18fb      	adds	r3, r7, r3
   30da8:	781b      	ldrb	r3, [r3, #0]
   30daa:	2b3a      	cmp	r3, #58	; 0x3a
   30dac:	d004      	beq.n	30db8 <_is_ip+0x58>
   30dae:	230b      	movs	r3, #11
   30db0:	18fb      	adds	r3, r7, r3
   30db2:	781b      	ldrb	r3, [r3, #0]
   30db4:	2b2f      	cmp	r3, #47	; 0x2f
   30db6:	d102      	bne.n	30dbe <_is_ip+0x5e>
			isv6 = 1;
   30db8:	2301      	movs	r3, #1
   30dba:	60fb      	str	r3, [r7, #12]
   30dbc:	e012      	b.n	30de4 <_is_ip+0x84>
		} else if (ch == '.') {
   30dbe:	230b      	movs	r3, #11
   30dc0:	18fb      	adds	r3, r7, r3
   30dc2:	781b      	ldrb	r3, [r3, #0]
   30dc4:	2b2e      	cmp	r3, #46	; 0x2e
   30dc6:	d104      	bne.n	30dd2 <_is_ip+0x72>
			if (isv6) {
   30dc8:	68fb      	ldr	r3, [r7, #12]
   30dca:	2b00      	cmp	r3, #0
   30dcc:	d00a      	beq.n	30de4 <_is_ip+0x84>
				return 0;
   30dce:	2300      	movs	r3, #0
   30dd0:	e00d      	b.n	30dee <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   30dd2:	230b      	movs	r3, #11
   30dd4:	18fb      	adds	r3, r7, r3
   30dd6:	781b      	ldrb	r3, [r3, #0]
   30dd8:	2230      	movs	r2, #48	; 0x30
   30dda:	4013      	ands	r3, r2
   30ddc:	2b30      	cmp	r3, #48	; 0x30
   30dde:	d001      	beq.n	30de4 <_is_ip+0x84>
			return 0;
   30de0:	2300      	movs	r3, #0
   30de2:	e004      	b.n	30dee <_is_ip+0x8e>
	while (*host != '\0') {
   30de4:	687b      	ldr	r3, [r7, #4]
   30de6:	781b      	ldrb	r3, [r3, #0]
   30de8:	2b00      	cmp	r3, #0
   30dea:	d1c0      	bne.n	30d6e <_is_ip+0xe>
		}
	}
	return 1;
   30dec:	2301      	movs	r3, #1
}
   30dee:	0018      	movs	r0, r3
   30df0:	46bd      	mov	sp, r7
   30df2:	b004      	add	sp, #16
   30df4:	bd80      	pop	{r7, pc}
	...

00030df8 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   30df8:	b5b0      	push	{r4, r5, r7, lr}
   30dfa:	b08e      	sub	sp, #56	; 0x38
   30dfc:	af00      	add	r7, sp, #0
   30dfe:	60f8      	str	r0, [r7, #12]
   30e00:	60b9      	str	r1, [r7, #8]
   30e02:	603b      	str	r3, [r7, #0]
   30e04:	1dfb      	adds	r3, r7, #7
   30e06:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   30e08:	2337      	movs	r3, #55	; 0x37
   30e0a:	18fb      	adds	r3, r7, r3
   30e0c:	2200      	movs	r2, #0
   30e0e:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   30e10:	2300      	movs	r3, #0
   30e12:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   30e14:	2300      	movs	r3, #0
   30e16:	633b      	str	r3, [r7, #48]	; 0x30
   30e18:	2300      	movs	r3, #0
   30e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   30e1c:	2300      	movs	r3, #0
   30e1e:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   30e20:	68fb      	ldr	r3, [r7, #12]
   30e22:	2b00      	cmp	r3, #0
   30e24:	d102      	bne.n	30e2c <http_client_send_request+0x34>
		return -EINVAL;
   30e26:	2316      	movs	r3, #22
   30e28:	425b      	negs	r3, r3
   30e2a:	e145      	b.n	310b8 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   30e2c:	68fb      	ldr	r3, [r7, #12]
   30e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30e30:	2b02      	cmp	r3, #2
   30e32:	d902      	bls.n	30e3a <http_client_send_request+0x42>
		return -EBUSY;
   30e34:	2310      	movs	r3, #16
   30e36:	425b      	negs	r3, r3
   30e38:	e13e      	b.n	310b8 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   30e3a:	49a1      	ldr	r1, [pc, #644]	; (310c0 <http_client_send_request+0x2c8>)
   30e3c:	68bb      	ldr	r3, [r7, #8]
   30e3e:	2207      	movs	r2, #7
   30e40:	0018      	movs	r0, r3
   30e42:	4ba0      	ldr	r3, [pc, #640]	; (310c4 <http_client_send_request+0x2cc>)
   30e44:	4798      	blx	r3
   30e46:	1e03      	subs	r3, r0, #0
   30e48:	d102      	bne.n	30e50 <http_client_send_request+0x58>
		i = 7;
   30e4a:	2307      	movs	r3, #7
   30e4c:	633b      	str	r3, [r7, #48]	; 0x30
   30e4e:	e009      	b.n	30e64 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   30e50:	499d      	ldr	r1, [pc, #628]	; (310c8 <http_client_send_request+0x2d0>)
   30e52:	68bb      	ldr	r3, [r7, #8]
   30e54:	2208      	movs	r2, #8
   30e56:	0018      	movs	r0, r3
   30e58:	4b9a      	ldr	r3, [pc, #616]	; (310c4 <http_client_send_request+0x2cc>)
   30e5a:	4798      	blx	r3
   30e5c:	1e03      	subs	r3, r0, #0
   30e5e:	d101      	bne.n	30e64 <http_client_send_request+0x6c>
		i = 8;
   30e60:	2308      	movs	r3, #8
   30e62:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   30e64:	68fb      	ldr	r3, [r7, #12]
   30e66:	1c5c      	adds	r4, r3, #1
   30e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30e6a:	68ba      	ldr	r2, [r7, #8]
   30e6c:	18d5      	adds	r5, r2, r3
   30e6e:	68fb      	ldr	r3, [r7, #12]
   30e70:	3301      	adds	r3, #1
   30e72:	0018      	movs	r0, r3
   30e74:	4b95      	ldr	r3, [pc, #596]	; (310cc <http_client_send_request+0x2d4>)
   30e76:	4798      	blx	r3
   30e78:	0003      	movs	r3, r0
   30e7a:	001a      	movs	r2, r3
   30e7c:	0029      	movs	r1, r5
   30e7e:	0020      	movs	r0, r4
   30e80:	4b90      	ldr	r3, [pc, #576]	; (310c4 <http_client_send_request+0x2cc>)
   30e82:	4798      	blx	r3
   30e84:	0003      	movs	r3, r0
   30e86:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   30e88:	e00d      	b.n	30ea6 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   30e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   30e8c:	1c5a      	adds	r2, r3, #1
   30e8e:	62fa      	str	r2, [r7, #44]	; 0x2c
   30e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   30e92:	68b9      	ldr	r1, [r7, #8]
   30e94:	188a      	adds	r2, r1, r2
   30e96:	7811      	ldrb	r1, [r2, #0]
   30e98:	68fa      	ldr	r2, [r7, #12]
   30e9a:	18d3      	adds	r3, r2, r3
   30e9c:	1c0a      	adds	r2, r1, #0
   30e9e:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   30ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30ea2:	3301      	adds	r3, #1
   30ea4:	633b      	str	r3, [r7, #48]	; 0x30
   30ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30ea8:	68ba      	ldr	r2, [r7, #8]
   30eaa:	18d3      	adds	r3, r2, r3
   30eac:	781b      	ldrb	r3, [r3, #0]
   30eae:	2b00      	cmp	r3, #0
   30eb0:	d005      	beq.n	30ebe <http_client_send_request+0xc6>
   30eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30eb4:	68ba      	ldr	r2, [r7, #8]
   30eb6:	18d3      	adds	r3, r2, r3
   30eb8:	781b      	ldrb	r3, [r3, #0]
   30eba:	2b2f      	cmp	r3, #47	; 0x2f
   30ebc:	d1e5      	bne.n	30e8a <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   30ebe:	68fa      	ldr	r2, [r7, #12]
   30ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   30ec2:	18d3      	adds	r3, r2, r3
   30ec4:	3301      	adds	r3, #1
   30ec6:	2200      	movs	r2, #0
   30ec8:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   30eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30ecc:	68ba      	ldr	r2, [r7, #8]
   30ece:	18d3      	adds	r3, r2, r3
   30ed0:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   30ed2:	68fb      	ldr	r3, [r7, #12]
   30ed4:	3301      	adds	r3, #1
   30ed6:	781b      	ldrb	r3, [r3, #0]
   30ed8:	2b00      	cmp	r3, #0
   30eda:	d102      	bne.n	30ee2 <http_client_send_request+0xea>
		return -EINVAL;
   30edc:	2316      	movs	r3, #22
   30ede:	425b      	negs	r3, r3
   30ee0:	e0ea      	b.n	310b8 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   30ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30ee4:	0018      	movs	r0, r3
   30ee6:	4b79      	ldr	r3, [pc, #484]	; (310cc <http_client_send_request+0x2d4>)
   30ee8:	4798      	blx	r3
   30eea:	0003      	movs	r3, r0
   30eec:	2b3f      	cmp	r3, #63	; 0x3f
   30eee:	d902      	bls.n	30ef6 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   30ef0:	235b      	movs	r3, #91	; 0x5b
   30ef2:	425b      	negs	r3, r3
   30ef4:	e0e0      	b.n	310b8 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   30ef6:	68fb      	ldr	r3, [r7, #12]
   30ef8:	22d4      	movs	r2, #212	; 0xd4
   30efa:	589b      	ldr	r3, [r3, r2]
   30efc:	2b00      	cmp	r3, #0
   30efe:	d005      	beq.n	30f0c <http_client_send_request+0x114>
		free(module->req.ext_header);
   30f00:	68fb      	ldr	r3, [r7, #12]
   30f02:	22d4      	movs	r2, #212	; 0xd4
   30f04:	589b      	ldr	r3, [r3, r2]
   30f06:	0018      	movs	r0, r3
   30f08:	4b71      	ldr	r3, [pc, #452]	; (310d0 <http_client_send_request+0x2d8>)
   30f0a:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   30f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30f0e:	2b00      	cmp	r3, #0
   30f10:	d010      	beq.n	30f34 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   30f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30f14:	0018      	movs	r0, r3
   30f16:	4b6f      	ldr	r3, [pc, #444]	; (310d4 <http_client_send_request+0x2dc>)
   30f18:	4798      	blx	r3
   30f1a:	0003      	movs	r3, r0
   30f1c:	0019      	movs	r1, r3
   30f1e:	68fb      	ldr	r3, [r7, #12]
   30f20:	22d4      	movs	r2, #212	; 0xd4
   30f22:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   30f24:	68fb      	ldr	r3, [r7, #12]
   30f26:	22d4      	movs	r2, #212	; 0xd4
   30f28:	589b      	ldr	r3, [r3, r2]
   30f2a:	2b00      	cmp	r3, #0
   30f2c:	d106      	bne.n	30f3c <http_client_send_request+0x144>
			return -ENOMEM;
   30f2e:	230c      	movs	r3, #12
   30f30:	425b      	negs	r3, r3
   30f32:	e0c1      	b.n	310b8 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   30f34:	68fb      	ldr	r3, [r7, #12]
   30f36:	22d4      	movs	r2, #212	; 0xd4
   30f38:	2100      	movs	r1, #0
   30f3a:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   30f3c:	68fb      	ldr	r3, [r7, #12]
   30f3e:	2241      	movs	r2, #65	; 0x41
   30f40:	5c99      	ldrb	r1, [r3, r2]
   30f42:	2001      	movs	r0, #1
   30f44:	4381      	bics	r1, r0
   30f46:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   30f48:	68fb      	ldr	r3, [r7, #12]
   30f4a:	2200      	movs	r2, #0
   30f4c:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   30f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30f50:	781b      	ldrb	r3, [r3, #0]
   30f52:	2b2f      	cmp	r3, #47	; 0x2f
   30f54:	d107      	bne.n	30f66 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   30f56:	68fb      	ldr	r3, [r7, #12]
   30f58:	3370      	adds	r3, #112	; 0x70
   30f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30f5c:	0011      	movs	r1, r2
   30f5e:	0018      	movs	r0, r3
   30f60:	4b5d      	ldr	r3, [pc, #372]	; (310d8 <http_client_send_request+0x2e0>)
   30f62:	4798      	blx	r3
   30f64:	e00f      	b.n	30f86 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   30f66:	68fb      	ldr	r3, [r7, #12]
   30f68:	2270      	movs	r2, #112	; 0x70
   30f6a:	212f      	movs	r1, #47	; 0x2f
   30f6c:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   30f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30f70:	781b      	ldrb	r3, [r3, #0]
   30f72:	2b00      	cmp	r3, #0
   30f74:	d007      	beq.n	30f86 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   30f76:	68fb      	ldr	r3, [r7, #12]
   30f78:	3370      	adds	r3, #112	; 0x70
   30f7a:	3301      	adds	r3, #1
   30f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30f7e:	0011      	movs	r1, r2
   30f80:	0018      	movs	r0, r3
   30f82:	4b55      	ldr	r3, [pc, #340]	; (310d8 <http_client_send_request+0x2e0>)
   30f84:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   30f86:	683b      	ldr	r3, [r7, #0]
   30f88:	2b00      	cmp	r3, #0
   30f8a:	d007      	beq.n	30f9c <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   30f8c:	68fb      	ldr	r3, [r7, #12]
   30f8e:	33b0      	adds	r3, #176	; 0xb0
   30f90:	6839      	ldr	r1, [r7, #0]
   30f92:	2218      	movs	r2, #24
   30f94:	0018      	movs	r0, r3
   30f96:	4b51      	ldr	r3, [pc, #324]	; (310dc <http_client_send_request+0x2e4>)
   30f98:	4798      	blx	r3
   30f9a:	e006      	b.n	30faa <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   30f9c:	68fb      	ldr	r3, [r7, #12]
   30f9e:	33b0      	adds	r3, #176	; 0xb0
   30fa0:	2218      	movs	r2, #24
   30fa2:	2100      	movs	r1, #0
   30fa4:	0018      	movs	r0, r3
   30fa6:	4b4e      	ldr	r3, [pc, #312]	; (310e0 <http_client_send_request+0x2e8>)
   30fa8:	4798      	blx	r3
	}

	module->req.method = method;
   30faa:	68fb      	ldr	r3, [r7, #12]
   30fac:	1dfa      	adds	r2, r7, #7
   30fae:	21c8      	movs	r1, #200	; 0xc8
   30fb0:	7812      	ldrb	r2, [r2, #0]
   30fb2:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   30fb4:	68fb      	ldr	r3, [r7, #12]
   30fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30fb8:	2b01      	cmp	r3, #1
   30fba:	d003      	beq.n	30fc4 <http_client_send_request+0x1cc>
   30fbc:	d316      	bcc.n	30fec <http_client_send_request+0x1f4>
   30fbe:	2b02      	cmp	r3, #2
   30fc0:	d004      	beq.n	30fcc <http_client_send_request+0x1d4>
   30fc2:	e074      	b.n	310ae <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   30fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30fc6:	2b00      	cmp	r3, #0
   30fc8:	d100      	bne.n	30fcc <http_client_send_request+0x1d4>
   30fca:	e073      	b.n	310b4 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   30fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30fce:	2b00      	cmp	r3, #0
   30fd0:	d107      	bne.n	30fe2 <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   30fd2:	68fb      	ldr	r3, [r7, #12]
   30fd4:	2203      	movs	r2, #3
   30fd6:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   30fd8:	68fb      	ldr	r3, [r7, #12]
   30fda:	0018      	movs	r0, r3
   30fdc:	4b41      	ldr	r3, [pc, #260]	; (310e4 <http_client_send_request+0x2ec>)
   30fde:	4798      	blx	r3
			break;
   30fe0:	e069      	b.n	310b6 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   30fe2:	68fb      	ldr	r3, [r7, #12]
   30fe4:	2100      	movs	r1, #0
   30fe6:	0018      	movs	r0, r3
   30fe8:	4b3f      	ldr	r3, [pc, #252]	; (310e8 <http_client_send_request+0x2f0>)
   30fea:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   30fec:	68fb      	ldr	r3, [r7, #12]
   30fee:	2252      	movs	r2, #82	; 0x52
   30ff0:	5c9b      	ldrb	r3, [r3, r2]
   30ff2:	2b00      	cmp	r3, #0
   30ff4:	d007      	beq.n	31006 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   30ff6:	2337      	movs	r3, #55	; 0x37
   30ff8:	18fb      	adds	r3, r7, r3
   30ffa:	2237      	movs	r2, #55	; 0x37
   30ffc:	18ba      	adds	r2, r7, r2
   30ffe:	7812      	ldrb	r2, [r2, #0]
   31000:	2101      	movs	r1, #1
   31002:	430a      	orrs	r2, r1
   31004:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   31006:	2337      	movs	r3, #55	; 0x37
   31008:	18fb      	adds	r3, r7, r3
   3100a:	781b      	ldrb	r3, [r3, #0]
   3100c:	001a      	movs	r2, r3
   3100e:	2101      	movs	r1, #1
   31010:	2002      	movs	r0, #2
   31012:	4b36      	ldr	r3, [pc, #216]	; (310ec <http_client_send_request+0x2f4>)
   31014:	4798      	blx	r3
   31016:	0003      	movs	r3, r0
   31018:	001a      	movs	r2, r3
   3101a:	68fb      	ldr	r3, [r7, #12]
   3101c:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   3101e:	68fb      	ldr	r3, [r7, #12]
   31020:	781b      	ldrb	r3, [r3, #0]
   31022:	b25b      	sxtb	r3, r3
   31024:	2b00      	cmp	r3, #0
   31026:	db3f      	blt.n	310a8 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   31028:	68fb      	ldr	r3, [r7, #12]
   3102a:	781b      	ldrb	r3, [r3, #0]
   3102c:	b25b      	sxtb	r3, r3
   3102e:	001a      	movs	r2, r3
   31030:	4b2f      	ldr	r3, [pc, #188]	; (310f0 <http_client_send_request+0x2f8>)
   31032:	0092      	lsls	r2, r2, #2
   31034:	68f9      	ldr	r1, [r7, #12]
   31036:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   31038:	68fb      	ldr	r3, [r7, #12]
   3103a:	3301      	adds	r3, #1
   3103c:	0018      	movs	r0, r3
   3103e:	4b2d      	ldr	r3, [pc, #180]	; (310f4 <http_client_send_request+0x2fc>)
   31040:	4798      	blx	r3
   31042:	1e03      	subs	r3, r0, #0
   31044:	d027      	beq.n	31096 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   31046:	2314      	movs	r3, #20
   31048:	18fb      	adds	r3, r7, r3
   3104a:	2202      	movs	r2, #2
   3104c:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   3104e:	68fb      	ldr	r3, [r7, #12]
   31050:	2250      	movs	r2, #80	; 0x50
   31052:	5a9b      	ldrh	r3, [r3, r2]
   31054:	021b      	lsls	r3, r3, #8
   31056:	b21a      	sxth	r2, r3
   31058:	68fb      	ldr	r3, [r7, #12]
   3105a:	2150      	movs	r1, #80	; 0x50
   3105c:	5a5b      	ldrh	r3, [r3, r1]
   3105e:	0a1b      	lsrs	r3, r3, #8
   31060:	b29b      	uxth	r3, r3
   31062:	b21b      	sxth	r3, r3
   31064:	4313      	orrs	r3, r2
   31066:	b21b      	sxth	r3, r3
   31068:	b29a      	uxth	r2, r3
   3106a:	2314      	movs	r3, #20
   3106c:	18fb      	adds	r3, r7, r3
   3106e:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   31070:	68fb      	ldr	r3, [r7, #12]
   31072:	3301      	adds	r3, #1
   31074:	0018      	movs	r0, r3
   31076:	4b20      	ldr	r3, [pc, #128]	; (310f8 <http_client_send_request+0x300>)
   31078:	4798      	blx	r3
   3107a:	0002      	movs	r2, r0
   3107c:	2314      	movs	r3, #20
   3107e:	18fb      	adds	r3, r7, r3
   31080:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   31082:	68fb      	ldr	r3, [r7, #12]
   31084:	781b      	ldrb	r3, [r3, #0]
   31086:	b25b      	sxtb	r3, r3
   31088:	2214      	movs	r2, #20
   3108a:	18b9      	adds	r1, r7, r2
   3108c:	2210      	movs	r2, #16
   3108e:	0018      	movs	r0, r3
   31090:	4b1a      	ldr	r3, [pc, #104]	; (310fc <http_client_send_request+0x304>)
   31092:	4798      	blx	r3
   31094:	e004      	b.n	310a0 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   31096:	68fb      	ldr	r3, [r7, #12]
   31098:	3301      	adds	r3, #1
   3109a:	0018      	movs	r0, r3
   3109c:	4b18      	ldr	r3, [pc, #96]	; (31100 <http_client_send_request+0x308>)
   3109e:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   310a0:	68fb      	ldr	r3, [r7, #12]
   310a2:	2201      	movs	r2, #1
   310a4:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   310a6:	e006      	b.n	310b6 <http_client_send_request+0x2be>
			return -ENOSPC;
   310a8:	231c      	movs	r3, #28
   310aa:	425b      	negs	r3, r3
   310ac:	e004      	b.n	310b8 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   310ae:	230b      	movs	r3, #11
   310b0:	425b      	negs	r3, r3
   310b2:	e001      	b.n	310b8 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   310b4:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   310b6:	2300      	movs	r3, #0
}
   310b8:	0018      	movs	r0, r3
   310ba:	46bd      	mov	sp, r7
   310bc:	b00e      	add	sp, #56	; 0x38
   310be:	bdb0      	pop	{r4, r5, r7, pc}
   310c0:	00039c20 	.word	0x00039c20
   310c4:	00034c49 	.word	0x00034c49
   310c8:	00039c28 	.word	0x00039c28
   310cc:	00034c3b 	.word	0x00034c3b
   310d0:	00034839 	.word	0x00034839
   310d4:	00034c01 	.word	0x00034c01
   310d8:	00034bef 	.word	0x00034bef
   310dc:	0003484d 	.word	0x0003484d
   310e0:	00034883 	.word	0x00034883
   310e4:	00031259 	.word	0x00031259
   310e8:	00031105 	.word	0x00031105
   310ec:	00025415 	.word	0x00025415
   310f0:	200046f0 	.word	0x200046f0
   310f4:	00030d61 	.word	0x00030d61
   310f8:	00025b61 	.word	0x00025b61
   310fc:	00025629 	.word	0x00025629
   31100:	00025c69 	.word	0x00025c69

00031104 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   31104:	b580      	push	{r7, lr}
   31106:	b086      	sub	sp, #24
   31108:	af00      	add	r7, sp, #0
   3110a:	6078      	str	r0, [r7, #4]
   3110c:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   3110e:	687b      	ldr	r3, [r7, #4]
   31110:	22c0      	movs	r2, #192	; 0xc0
   31112:	589b      	ldr	r3, [r3, r2]
   31114:	2b00      	cmp	r3, #0
   31116:	d007      	beq.n	31128 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   31118:	687b      	ldr	r3, [r7, #4]
   3111a:	22c0      	movs	r2, #192	; 0xc0
   3111c:	589b      	ldr	r3, [r3, r2]
   3111e:	687a      	ldr	r2, [r7, #4]
   31120:	21c4      	movs	r1, #196	; 0xc4
   31122:	5852      	ldr	r2, [r2, r1]
   31124:	0010      	movs	r0, r2
   31126:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   31128:	687b      	ldr	r3, [r7, #4]
   3112a:	33b0      	adds	r3, #176	; 0xb0
   3112c:	2218      	movs	r2, #24
   3112e:	2100      	movs	r1, #0
   31130:	0018      	movs	r0, r3
   31132:	4b24      	ldr	r3, [pc, #144]	; (311c4 <_http_client_clear_conn+0xc0>)
   31134:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   31136:	687b      	ldr	r3, [r7, #4]
   31138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   3113a:	2b00      	cmp	r3, #0
   3113c:	d005      	beq.n	3114a <_http_client_clear_conn+0x46>
		close(module->sock);
   3113e:	687b      	ldr	r3, [r7, #4]
   31140:	781b      	ldrb	r3, [r3, #0]
   31142:	b25b      	sxtb	r3, r3
   31144:	0018      	movs	r0, r3
   31146:	4b20      	ldr	r3, [pc, #128]	; (311c8 <_http_client_clear_conn+0xc4>)
   31148:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   3114a:	687b      	ldr	r3, [r7, #4]
   3114c:	781b      	ldrb	r3, [r3, #0]
   3114e:	b25b      	sxtb	r3, r3
   31150:	001a      	movs	r2, r3
   31152:	4b1e      	ldr	r3, [pc, #120]	; (311cc <_http_client_clear_conn+0xc8>)
   31154:	0092      	lsls	r2, r2, #2
   31156:	2100      	movs	r1, #0
   31158:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   3115a:	687b      	ldr	r3, [r7, #4]
   3115c:	336c      	adds	r3, #108	; 0x6c
   3115e:	226c      	movs	r2, #108	; 0x6c
   31160:	2100      	movs	r1, #0
   31162:	0018      	movs	r0, r3
   31164:	4b17      	ldr	r3, [pc, #92]	; (311c4 <_http_client_clear_conn+0xc0>)
   31166:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   31168:	687b      	ldr	r3, [r7, #4]
   3116a:	33d8      	adds	r3, #216	; 0xd8
   3116c:	2210      	movs	r2, #16
   3116e:	2100      	movs	r1, #0
   31170:	0018      	movs	r0, r3
   31172:	4b14      	ldr	r3, [pc, #80]	; (311c4 <_http_client_clear_conn+0xc0>)
   31174:	4798      	blx	r3
	module->req.state = STATE_INIT;
   31176:	687b      	ldr	r3, [r7, #4]
   31178:	2200      	movs	r2, #0
   3117a:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   3117c:	687b      	ldr	r3, [r7, #4]
   3117e:	22d8      	movs	r2, #216	; 0xd8
   31180:	2100      	movs	r1, #0
   31182:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   31184:	687b      	ldr	r3, [r7, #4]
   31186:	2241      	movs	r2, #65	; 0x41
   31188:	5c99      	ldrb	r1, [r3, r2]
   3118a:	2001      	movs	r0, #1
   3118c:	4381      	bics	r1, r0
   3118e:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   31190:	687b      	ldr	r3, [r7, #4]
   31192:	2241      	movs	r2, #65	; 0x41
   31194:	5c99      	ldrb	r1, [r3, r2]
   31196:	2002      	movs	r0, #2
   31198:	4381      	bics	r1, r0
   3119a:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   3119c:	230c      	movs	r3, #12
   3119e:	18fb      	adds	r3, r7, r3
   311a0:	683a      	ldr	r2, [r7, #0]
   311a2:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   311a4:	687b      	ldr	r3, [r7, #4]
   311a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   311a8:	2b00      	cmp	r3, #0
   311aa:	d006      	beq.n	311ba <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   311ac:	687b      	ldr	r3, [r7, #4]
   311ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   311b0:	220c      	movs	r2, #12
   311b2:	18ba      	adds	r2, r7, r2
   311b4:	6878      	ldr	r0, [r7, #4]
   311b6:	2104      	movs	r1, #4
   311b8:	4798      	blx	r3
	}
}
   311ba:	46c0      	nop			; (mov r8, r8)
   311bc:	46bd      	mov	sp, r7
   311be:	b006      	add	sp, #24
   311c0:	bd80      	pop	{r7, pc}
   311c2:	46c0      	nop			; (mov r8, r8)
   311c4:	00034883 	.word	0x00034883
   311c8:	00025a21 	.word	0x00025a21
   311cc:	200046f0 	.word	0x200046f0

000311d0 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   311d0:	b590      	push	{r4, r7, lr}
   311d2:	b087      	sub	sp, #28
   311d4:	af00      	add	r7, sp, #0
   311d6:	60f8      	str	r0, [r7, #12]
   311d8:	60b9      	str	r1, [r7, #8]
   311da:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   311dc:	68fb      	ldr	r3, [r7, #12]
   311de:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   311e0:	697b      	ldr	r3, [r7, #20]
   311e2:	2241      	movs	r2, #65	; 0x41
   311e4:	5c99      	ldrb	r1, [r3, r2]
   311e6:	2001      	movs	r0, #1
   311e8:	4301      	orrs	r1, r0
   311ea:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   311ec:	697b      	ldr	r3, [r7, #20]
   311ee:	2000      	movs	r0, #0
   311f0:	5618      	ldrsb	r0, [r3, r0]
   311f2:	687b      	ldr	r3, [r7, #4]
   311f4:	b29a      	uxth	r2, r3
   311f6:	68b9      	ldr	r1, [r7, #8]
   311f8:	2300      	movs	r3, #0
   311fa:	4c14      	ldr	r4, [pc, #80]	; (3124c <_http_client_send_wait+0x7c>)
   311fc:	47a0      	blx	r4
   311fe:	0003      	movs	r3, r0
   31200:	613b      	str	r3, [r7, #16]
   31202:	693b      	ldr	r3, [r7, #16]
   31204:	2b00      	cmp	r3, #0
   31206:	da0f      	bge.n	31228 <_http_client_send_wait+0x58>
		module->sending = 0;
   31208:	697b      	ldr	r3, [r7, #20]
   3120a:	2241      	movs	r2, #65	; 0x41
   3120c:	5c99      	ldrb	r1, [r3, r2]
   3120e:	2001      	movs	r0, #1
   31210:	4381      	bics	r1, r0
   31212:	5499      	strb	r1, [r3, r2]
		return result;
   31214:	693b      	ldr	r3, [r7, #16]
   31216:	e014      	b.n	31242 <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   31218:	2000      	movs	r0, #0
   3121a:	4b0d      	ldr	r3, [pc, #52]	; (31250 <_http_client_send_wait+0x80>)
   3121c:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   3121e:	697b      	ldr	r3, [r7, #20]
   31220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   31222:	0018      	movs	r0, r3
   31224:	4b0b      	ldr	r3, [pc, #44]	; (31254 <_http_client_send_wait+0x84>)
   31226:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   31228:	697b      	ldr	r3, [r7, #20]
   3122a:	2241      	movs	r2, #65	; 0x41
   3122c:	5c9b      	ldrb	r3, [r3, r2]
   3122e:	2201      	movs	r2, #1
   31230:	4013      	ands	r3, r2
   31232:	b2db      	uxtb	r3, r3
   31234:	2b00      	cmp	r3, #0
   31236:	d003      	beq.n	31240 <_http_client_send_wait+0x70>
   31238:	697b      	ldr	r3, [r7, #20]
   3123a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   3123c:	2b02      	cmp	r3, #2
   3123e:	d8eb      	bhi.n	31218 <_http_client_send_wait+0x48>
	}

	return 0;
   31240:	2300      	movs	r3, #0
}
   31242:	0018      	movs	r0, r3
   31244:	46bd      	mov	sp, r7
   31246:	b007      	add	sp, #28
   31248:	bd90      	pop	{r4, r7, pc}
   3124a:	46c0      	nop			; (mov r8, r8)
   3124c:	0002573d 	.word	0x0002573d
   31250:	00021de9 	.word	0x00021de9
   31254:	000324dd 	.word	0x000324dd

00031258 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   31258:	b5f0      	push	{r4, r5, r6, r7, lr}
   3125a:	46c6      	mov	lr, r8
   3125c:	b500      	push	{lr}
   3125e:	b0a0      	sub	sp, #128	; 0x80
   31260:	af02      	add	r7, sp, #8
   31262:	61f8      	str	r0, [r7, #28]
   31264:	4668      	mov	r0, sp
   31266:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   31268:	2318      	movs	r3, #24
   3126a:	2218      	movs	r2, #24
   3126c:	18ba      	adds	r2, r7, r2
   3126e:	18d0      	adds	r0, r2, r3
   31270:	4bbd      	ldr	r3, [pc, #756]	; (31568 <_http_client_request+0x310>)
   31272:	469c      	mov	ip, r3
   31274:	4663      	mov	r3, ip
   31276:	cb16      	ldmia	r3!, {r1, r2, r4}
   31278:	c016      	stmia	r0!, {r1, r2, r4}
   3127a:	469c      	mov	ip, r3
   3127c:	4663      	mov	r3, ip
   3127e:	681b      	ldr	r3, [r3, #0]
   31280:	469c      	mov	ip, r3
   31282:	4663      	mov	r3, ip
   31284:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   31286:	69f8      	ldr	r0, [r7, #28]
   31288:	6e40      	ldr	r0, [r0, #100]	; 0x64
   3128a:	4684      	mov	ip, r0
   3128c:	2301      	movs	r3, #1
   3128e:	425b      	negs	r3, r3
   31290:	4698      	mov	r8, r3
   31292:	44c4      	add	ip, r8
   31294:	4663      	mov	r3, ip
   31296:	66fb      	str	r3, [r7, #108]	; 0x6c
   31298:	6038      	str	r0, [r7, #0]
   3129a:	2300      	movs	r3, #0
   3129c:	607b      	str	r3, [r7, #4]
   3129e:	6839      	ldr	r1, [r7, #0]
   312a0:	687a      	ldr	r2, [r7, #4]
   312a2:	000b      	movs	r3, r1
   312a4:	0f5b      	lsrs	r3, r3, #29
   312a6:	469c      	mov	ip, r3
   312a8:	0013      	movs	r3, r2
   312aa:	00db      	lsls	r3, r3, #3
   312ac:	617b      	str	r3, [r7, #20]
   312ae:	4663      	mov	r3, ip
   312b0:	697c      	ldr	r4, [r7, #20]
   312b2:	431c      	orrs	r4, r3
   312b4:	617c      	str	r4, [r7, #20]
   312b6:	000b      	movs	r3, r1
   312b8:	00db      	lsls	r3, r3, #3
   312ba:	613b      	str	r3, [r7, #16]
   312bc:	0005      	movs	r5, r0
   312be:	2200      	movs	r2, #0
   312c0:	0016      	movs	r6, r2
   312c2:	0f6a      	lsrs	r2, r5, #29
   312c4:	00f3      	lsls	r3, r6, #3
   312c6:	60fb      	str	r3, [r7, #12]
   312c8:	68fb      	ldr	r3, [r7, #12]
   312ca:	4313      	orrs	r3, r2
   312cc:	60fb      	str	r3, [r7, #12]
   312ce:	00eb      	lsls	r3, r5, #3
   312d0:	60bb      	str	r3, [r7, #8]
   312d2:	1dc3      	adds	r3, r0, #7
   312d4:	08db      	lsrs	r3, r3, #3
   312d6:	00db      	lsls	r3, r3, #3
   312d8:	466a      	mov	r2, sp
   312da:	1ad3      	subs	r3, r2, r3
   312dc:	469d      	mov	sp, r3
   312de:	ab02      	add	r3, sp, #8
   312e0:	3300      	adds	r3, #0
   312e2:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   312e4:	69fb      	ldr	r3, [r7, #28]
   312e6:	2b00      	cmp	r3, #0
   312e8:	d100      	bne.n	312ec <_http_client_request+0x94>
   312ea:	e346      	b.n	3197a <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   312ec:	69fb      	ldr	r3, [r7, #28]
   312ee:	2241      	movs	r2, #65	; 0x41
   312f0:	5c9b      	ldrb	r3, [r3, r2]
   312f2:	2201      	movs	r2, #1
   312f4:	4013      	ands	r3, r2
   312f6:	b2db      	uxtb	r3, r3
   312f8:	2b00      	cmp	r3, #0
   312fa:	d000      	beq.n	312fe <_http_client_request+0xa6>
   312fc:	e33f      	b.n	3197e <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   312fe:	69fb      	ldr	r3, [r7, #28]
   31300:	33b0      	adds	r3, #176	; 0xb0
   31302:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   31304:	69fb      	ldr	r3, [r7, #28]
   31306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31308:	2b03      	cmp	r3, #3
   3130a:	d003      	beq.n	31314 <_http_client_request+0xbc>
   3130c:	2b04      	cmp	r3, #4
   3130e:	d100      	bne.n	31312 <_http_client_request+0xba>
   31310:	e1b3      	b.n	3167a <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   31312:	e32f      	b.n	31974 <_http_client_request+0x71c>
		module->req.content_length = 0;
   31314:	69fb      	ldr	r3, [r7, #28]
   31316:	22cc      	movs	r2, #204	; 0xcc
   31318:	2100      	movs	r1, #0
   3131a:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   3131c:	69fb      	ldr	r3, [r7, #28]
   3131e:	22d0      	movs	r2, #208	; 0xd0
   31320:	2100      	movs	r1, #0
   31322:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   31324:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   31326:	69fb      	ldr	r3, [r7, #28]
   31328:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   3132a:	4c90      	ldr	r4, [pc, #576]	; (3156c <_http_client_request+0x314>)
   3132c:	2334      	movs	r3, #52	; 0x34
   3132e:	2018      	movs	r0, #24
   31330:	1838      	adds	r0, r7, r0
   31332:	18c0      	adds	r0, r0, r3
   31334:	69fb      	ldr	r3, [r7, #28]
   31336:	9300      	str	r3, [sp, #0]
   31338:	0023      	movs	r3, r4
   3133a:	4c8d      	ldr	r4, [pc, #564]	; (31570 <_http_client_request+0x318>)
   3133c:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   3133e:	69fb      	ldr	r3, [r7, #28]
   31340:	22c8      	movs	r2, #200	; 0xc8
   31342:	5c9b      	ldrb	r3, [r3, r2]
   31344:	2b01      	cmp	r3, #1
   31346:	d10a      	bne.n	3135e <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   31348:	498a      	ldr	r1, [pc, #552]	; (31574 <_http_client_request+0x31c>)
   3134a:	2334      	movs	r3, #52	; 0x34
   3134c:	2218      	movs	r2, #24
   3134e:	4694      	mov	ip, r2
   31350:	44bc      	add	ip, r7
   31352:	4463      	add	r3, ip
   31354:	2204      	movs	r2, #4
   31356:	0018      	movs	r0, r3
   31358:	4b87      	ldr	r3, [pc, #540]	; (31578 <_http_client_request+0x320>)
   3135a:	4798      	blx	r3
   3135c:	e04e      	b.n	313fc <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   3135e:	69fb      	ldr	r3, [r7, #28]
   31360:	22c8      	movs	r2, #200	; 0xc8
   31362:	5c9b      	ldrb	r3, [r3, r2]
   31364:	2b02      	cmp	r3, #2
   31366:	d10a      	bne.n	3137e <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   31368:	4984      	ldr	r1, [pc, #528]	; (3157c <_http_client_request+0x324>)
   3136a:	2334      	movs	r3, #52	; 0x34
   3136c:	2218      	movs	r2, #24
   3136e:	4694      	mov	ip, r2
   31370:	44bc      	add	ip, r7
   31372:	4463      	add	r3, ip
   31374:	2205      	movs	r2, #5
   31376:	0018      	movs	r0, r3
   31378:	4b7f      	ldr	r3, [pc, #508]	; (31578 <_http_client_request+0x320>)
   3137a:	4798      	blx	r3
   3137c:	e03e      	b.n	313fc <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   3137e:	69fb      	ldr	r3, [r7, #28]
   31380:	22c8      	movs	r2, #200	; 0xc8
   31382:	5c9b      	ldrb	r3, [r3, r2]
   31384:	2b03      	cmp	r3, #3
   31386:	d10a      	bne.n	3139e <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   31388:	497d      	ldr	r1, [pc, #500]	; (31580 <_http_client_request+0x328>)
   3138a:	2334      	movs	r3, #52	; 0x34
   3138c:	2218      	movs	r2, #24
   3138e:	4694      	mov	ip, r2
   31390:	44bc      	add	ip, r7
   31392:	4463      	add	r3, ip
   31394:	2207      	movs	r2, #7
   31396:	0018      	movs	r0, r3
   31398:	4b77      	ldr	r3, [pc, #476]	; (31578 <_http_client_request+0x320>)
   3139a:	4798      	blx	r3
   3139c:	e02e      	b.n	313fc <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   3139e:	69fb      	ldr	r3, [r7, #28]
   313a0:	22c8      	movs	r2, #200	; 0xc8
   313a2:	5c9b      	ldrb	r3, [r3, r2]
   313a4:	2b04      	cmp	r3, #4
   313a6:	d10a      	bne.n	313be <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   313a8:	4976      	ldr	r1, [pc, #472]	; (31584 <_http_client_request+0x32c>)
   313aa:	2334      	movs	r3, #52	; 0x34
   313ac:	2218      	movs	r2, #24
   313ae:	4694      	mov	ip, r2
   313b0:	44bc      	add	ip, r7
   313b2:	4463      	add	r3, ip
   313b4:	2204      	movs	r2, #4
   313b6:	0018      	movs	r0, r3
   313b8:	4b6f      	ldr	r3, [pc, #444]	; (31578 <_http_client_request+0x320>)
   313ba:	4798      	blx	r3
   313bc:	e01e      	b.n	313fc <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   313be:	69fb      	ldr	r3, [r7, #28]
   313c0:	22c8      	movs	r2, #200	; 0xc8
   313c2:	5c9b      	ldrb	r3, [r3, r2]
   313c4:	2b05      	cmp	r3, #5
   313c6:	d10a      	bne.n	313de <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   313c8:	496f      	ldr	r1, [pc, #444]	; (31588 <_http_client_request+0x330>)
   313ca:	2334      	movs	r3, #52	; 0x34
   313cc:	2218      	movs	r2, #24
   313ce:	4694      	mov	ip, r2
   313d0:	44bc      	add	ip, r7
   313d2:	4463      	add	r3, ip
   313d4:	2208      	movs	r2, #8
   313d6:	0018      	movs	r0, r3
   313d8:	4b67      	ldr	r3, [pc, #412]	; (31578 <_http_client_request+0x320>)
   313da:	4798      	blx	r3
   313dc:	e00e      	b.n	313fc <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   313de:	69fb      	ldr	r3, [r7, #28]
   313e0:	22c8      	movs	r2, #200	; 0xc8
   313e2:	5c9b      	ldrb	r3, [r3, r2]
   313e4:	2b06      	cmp	r3, #6
   313e6:	d109      	bne.n	313fc <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   313e8:	4968      	ldr	r1, [pc, #416]	; (3158c <_http_client_request+0x334>)
   313ea:	2334      	movs	r3, #52	; 0x34
   313ec:	2218      	movs	r2, #24
   313ee:	4694      	mov	ip, r2
   313f0:	44bc      	add	ip, r7
   313f2:	4463      	add	r3, ip
   313f4:	2205      	movs	r2, #5
   313f6:	0018      	movs	r0, r3
   313f8:	4b5f      	ldr	r3, [pc, #380]	; (31578 <_http_client_request+0x320>)
   313fa:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   313fc:	69fb      	ldr	r3, [r7, #28]
   313fe:	3370      	adds	r3, #112	; 0x70
   31400:	001c      	movs	r4, r3
   31402:	69fb      	ldr	r3, [r7, #28]
   31404:	3370      	adds	r3, #112	; 0x70
   31406:	0018      	movs	r0, r3
   31408:	4b61      	ldr	r3, [pc, #388]	; (31590 <_http_client_request+0x338>)
   3140a:	4798      	blx	r3
   3140c:	0002      	movs	r2, r0
   3140e:	2334      	movs	r3, #52	; 0x34
   31410:	2118      	movs	r1, #24
   31412:	468c      	mov	ip, r1
   31414:	44bc      	add	ip, r7
   31416:	4463      	add	r3, ip
   31418:	0021      	movs	r1, r4
   3141a:	0018      	movs	r0, r3
   3141c:	4b56      	ldr	r3, [pc, #344]	; (31578 <_http_client_request+0x320>)
   3141e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   31420:	495c      	ldr	r1, [pc, #368]	; (31594 <_http_client_request+0x33c>)
   31422:	2334      	movs	r3, #52	; 0x34
   31424:	2218      	movs	r2, #24
   31426:	4694      	mov	ip, r2
   31428:	44bc      	add	ip, r7
   3142a:	4463      	add	r3, ip
   3142c:	220b      	movs	r2, #11
   3142e:	0018      	movs	r0, r3
   31430:	4b51      	ldr	r3, [pc, #324]	; (31578 <_http_client_request+0x320>)
   31432:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   31434:	4958      	ldr	r1, [pc, #352]	; (31598 <_http_client_request+0x340>)
   31436:	2334      	movs	r3, #52	; 0x34
   31438:	2218      	movs	r2, #24
   3143a:	4694      	mov	ip, r2
   3143c:	44bc      	add	ip, r7
   3143e:	4463      	add	r3, ip
   31440:	220c      	movs	r2, #12
   31442:	0018      	movs	r0, r3
   31444:	4b4c      	ldr	r3, [pc, #304]	; (31578 <_http_client_request+0x320>)
   31446:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   31448:	69fb      	ldr	r3, [r7, #28]
   3144a:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   3144c:	69fb      	ldr	r3, [r7, #28]
   3144e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   31450:	0018      	movs	r0, r3
   31452:	4b4f      	ldr	r3, [pc, #316]	; (31590 <_http_client_request+0x338>)
   31454:	4798      	blx	r3
   31456:	0002      	movs	r2, r0
   31458:	2334      	movs	r3, #52	; 0x34
   3145a:	2118      	movs	r1, #24
   3145c:	468c      	mov	ip, r1
   3145e:	44bc      	add	ip, r7
   31460:	4463      	add	r3, ip
   31462:	0021      	movs	r1, r4
   31464:	0018      	movs	r0, r3
   31466:	4b44      	ldr	r3, [pc, #272]	; (31578 <_http_client_request+0x320>)
   31468:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   3146a:	494c      	ldr	r1, [pc, #304]	; (3159c <_http_client_request+0x344>)
   3146c:	2334      	movs	r3, #52	; 0x34
   3146e:	2218      	movs	r2, #24
   31470:	4694      	mov	ip, r2
   31472:	44bc      	add	ip, r7
   31474:	4463      	add	r3, ip
   31476:	2202      	movs	r2, #2
   31478:	0018      	movs	r0, r3
   3147a:	4b3f      	ldr	r3, [pc, #252]	; (31578 <_http_client_request+0x320>)
   3147c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   3147e:	4948      	ldr	r1, [pc, #288]	; (315a0 <_http_client_request+0x348>)
   31480:	2334      	movs	r3, #52	; 0x34
   31482:	2218      	movs	r2, #24
   31484:	4694      	mov	ip, r2
   31486:	44bc      	add	ip, r7
   31488:	4463      	add	r3, ip
   3148a:	2206      	movs	r2, #6
   3148c:	0018      	movs	r0, r3
   3148e:	4b3a      	ldr	r3, [pc, #232]	; (31578 <_http_client_request+0x320>)
   31490:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   31492:	69fb      	ldr	r3, [r7, #28]
   31494:	1c5c      	adds	r4, r3, #1
   31496:	69fb      	ldr	r3, [r7, #28]
   31498:	3301      	adds	r3, #1
   3149a:	0018      	movs	r0, r3
   3149c:	4b3c      	ldr	r3, [pc, #240]	; (31590 <_http_client_request+0x338>)
   3149e:	4798      	blx	r3
   314a0:	0002      	movs	r2, r0
   314a2:	2334      	movs	r3, #52	; 0x34
   314a4:	2118      	movs	r1, #24
   314a6:	468c      	mov	ip, r1
   314a8:	44bc      	add	ip, r7
   314aa:	4463      	add	r3, ip
   314ac:	0021      	movs	r1, r4
   314ae:	0018      	movs	r0, r3
   314b0:	4b31      	ldr	r3, [pc, #196]	; (31578 <_http_client_request+0x320>)
   314b2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   314b4:	4939      	ldr	r1, [pc, #228]	; (3159c <_http_client_request+0x344>)
   314b6:	2334      	movs	r3, #52	; 0x34
   314b8:	2218      	movs	r2, #24
   314ba:	4694      	mov	ip, r2
   314bc:	44bc      	add	ip, r7
   314be:	4463      	add	r3, ip
   314c0:	2202      	movs	r2, #2
   314c2:	0018      	movs	r0, r3
   314c4:	4b2c      	ldr	r3, [pc, #176]	; (31578 <_http_client_request+0x320>)
   314c6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   314c8:	4936      	ldr	r1, [pc, #216]	; (315a4 <_http_client_request+0x34c>)
   314ca:	2334      	movs	r3, #52	; 0x34
   314cc:	2218      	movs	r2, #24
   314ce:	4694      	mov	ip, r2
   314d0:	44bc      	add	ip, r7
   314d2:	4463      	add	r3, ip
   314d4:	2218      	movs	r2, #24
   314d6:	0018      	movs	r0, r3
   314d8:	4b27      	ldr	r3, [pc, #156]	; (31578 <_http_client_request+0x320>)
   314da:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   314dc:	4932      	ldr	r1, [pc, #200]	; (315a8 <_http_client_request+0x350>)
   314de:	2334      	movs	r3, #52	; 0x34
   314e0:	2218      	movs	r2, #24
   314e2:	4694      	mov	ip, r2
   314e4:	44bc      	add	ip, r7
   314e6:	4463      	add	r3, ip
   314e8:	2213      	movs	r2, #19
   314ea:	0018      	movs	r0, r3
   314ec:	4b22      	ldr	r3, [pc, #136]	; (31578 <_http_client_request+0x320>)
   314ee:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   314f0:	492e      	ldr	r1, [pc, #184]	; (315ac <_http_client_request+0x354>)
   314f2:	2334      	movs	r3, #52	; 0x34
   314f4:	2218      	movs	r2, #24
   314f6:	4694      	mov	ip, r2
   314f8:	44bc      	add	ip, r7
   314fa:	4463      	add	r3, ip
   314fc:	2217      	movs	r2, #23
   314fe:	0018      	movs	r0, r3
   31500:	4b1d      	ldr	r3, [pc, #116]	; (31578 <_http_client_request+0x320>)
   31502:	4798      	blx	r3
		if (entity->read != NULL) {
   31504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31506:	68db      	ldr	r3, [r3, #12]
   31508:	2b00      	cmp	r3, #0
   3150a:	d100      	bne.n	3150e <_http_client_request+0x2b6>
   3150c:	e088      	b.n	31620 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   3150e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31510:	781b      	ldrb	r3, [r3, #0]
   31512:	2b00      	cmp	r3, #0
   31514:	d00f      	beq.n	31536 <_http_client_request+0x2de>
				module->req.content_length = -1;
   31516:	69fb      	ldr	r3, [r7, #28]
   31518:	21cc      	movs	r1, #204	; 0xcc
   3151a:	2201      	movs	r2, #1
   3151c:	4252      	negs	r2, r2
   3151e:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   31520:	4923      	ldr	r1, [pc, #140]	; (315b0 <_http_client_request+0x358>)
   31522:	2334      	movs	r3, #52	; 0x34
   31524:	2218      	movs	r2, #24
   31526:	4694      	mov	ip, r2
   31528:	44bc      	add	ip, r7
   3152a:	4463      	add	r3, ip
   3152c:	221c      	movs	r2, #28
   3152e:	0018      	movs	r0, r3
   31530:	4b11      	ldr	r3, [pc, #68]	; (31578 <_http_client_request+0x320>)
   31532:	4798      	blx	r3
   31534:	e074      	b.n	31620 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   31536:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31538:	689b      	ldr	r3, [r3, #8]
   3153a:	2b00      	cmp	r3, #0
   3153c:	d070      	beq.n	31620 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   3153e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31540:	689a      	ldr	r2, [r3, #8]
   31542:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31544:	695b      	ldr	r3, [r3, #20]
   31546:	0018      	movs	r0, r3
   31548:	4790      	blx	r2
   3154a:	0001      	movs	r1, r0
   3154c:	69fb      	ldr	r3, [r7, #28]
   3154e:	22cc      	movs	r2, #204	; 0xcc
   31550:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   31552:	69fb      	ldr	r3, [r7, #28]
   31554:	22cc      	movs	r2, #204	; 0xcc
   31556:	589b      	ldr	r3, [r3, r2]
   31558:	2b00      	cmp	r3, #0
   3155a:	da2b      	bge.n	315b4 <_http_client_request+0x35c>
					module->req.content_length = 0;
   3155c:	69fb      	ldr	r3, [r7, #28]
   3155e:	22cc      	movs	r2, #204	; 0xcc
   31560:	2100      	movs	r1, #0
   31562:	5099      	str	r1, [r3, r2]
   31564:	e05c      	b.n	31620 <_http_client_request+0x3c8>
   31566:	46c0      	nop			; (mov r8, r8)
   31568:	00039d10 	.word	0x00039d10
   3156c:	000311d1 	.word	0x000311d1
   31570:	00032139 	.word	0x00032139
   31574:	00039c34 	.word	0x00039c34
   31578:	000321b9 	.word	0x000321b9
   3157c:	00039c3c 	.word	0x00039c3c
   31580:	00039c44 	.word	0x00039c44
   31584:	00039c4c 	.word	0x00039c4c
   31588:	00039c54 	.word	0x00039c54
   3158c:	00039c60 	.word	0x00039c60
   31590:	00034c3b 	.word	0x00034c3b
   31594:	00039c68 	.word	0x00039c68
   31598:	00039c74 	.word	0x00039c74
   3159c:	00039c84 	.word	0x00039c84
   315a0:	00039c88 	.word	0x00039c88
   315a4:	00039c90 	.word	0x00039c90
   315a8:	00039cac 	.word	0x00039cac
   315ac:	00039cc0 	.word	0x00039cc0
   315b0:	00039cd8 	.word	0x00039cd8
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   315b4:	69fb      	ldr	r3, [r7, #28]
   315b6:	22cc      	movs	r2, #204	; 0xcc
   315b8:	589b      	ldr	r3, [r3, r2]
   315ba:	001a      	movs	r2, r3
   315bc:	49e0      	ldr	r1, [pc, #896]	; (31940 <_http_client_request+0x6e8>)
   315be:	2328      	movs	r3, #40	; 0x28
   315c0:	2018      	movs	r0, #24
   315c2:	4684      	mov	ip, r0
   315c4:	44bc      	add	ip, r7
   315c6:	4463      	add	r3, ip
   315c8:	0018      	movs	r0, r3
   315ca:	4bde      	ldr	r3, [pc, #888]	; (31944 <_http_client_request+0x6ec>)
   315cc:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   315ce:	49de      	ldr	r1, [pc, #888]	; (31948 <_http_client_request+0x6f0>)
   315d0:	2334      	movs	r3, #52	; 0x34
   315d2:	2218      	movs	r2, #24
   315d4:	4694      	mov	ip, r2
   315d6:	44bc      	add	ip, r7
   315d8:	4463      	add	r3, ip
   315da:	2210      	movs	r2, #16
   315dc:	0018      	movs	r0, r3
   315de:	4bdb      	ldr	r3, [pc, #876]	; (3194c <_http_client_request+0x6f4>)
   315e0:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   315e2:	2328      	movs	r3, #40	; 0x28
   315e4:	2218      	movs	r2, #24
   315e6:	4694      	mov	ip, r2
   315e8:	44bc      	add	ip, r7
   315ea:	4463      	add	r3, ip
   315ec:	0018      	movs	r0, r3
   315ee:	4bd8      	ldr	r3, [pc, #864]	; (31950 <_http_client_request+0x6f8>)
   315f0:	4798      	blx	r3
   315f2:	0002      	movs	r2, r0
   315f4:	2328      	movs	r3, #40	; 0x28
   315f6:	2118      	movs	r1, #24
   315f8:	1879      	adds	r1, r7, r1
   315fa:	18c9      	adds	r1, r1, r3
   315fc:	2334      	movs	r3, #52	; 0x34
   315fe:	2018      	movs	r0, #24
   31600:	4684      	mov	ip, r0
   31602:	44bc      	add	ip, r7
   31604:	4463      	add	r3, ip
   31606:	0018      	movs	r0, r3
   31608:	4bd0      	ldr	r3, [pc, #832]	; (3194c <_http_client_request+0x6f4>)
   3160a:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   3160c:	49d1      	ldr	r1, [pc, #836]	; (31954 <_http_client_request+0x6fc>)
   3160e:	2334      	movs	r3, #52	; 0x34
   31610:	2218      	movs	r2, #24
   31612:	4694      	mov	ip, r2
   31614:	44bc      	add	ip, r7
   31616:	4463      	add	r3, ip
   31618:	2202      	movs	r2, #2
   3161a:	0018      	movs	r0, r3
   3161c:	4bcb      	ldr	r3, [pc, #812]	; (3194c <_http_client_request+0x6f4>)
   3161e:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   31620:	69fb      	ldr	r3, [r7, #28]
   31622:	22d4      	movs	r2, #212	; 0xd4
   31624:	589b      	ldr	r3, [r3, r2]
   31626:	2b00      	cmp	r3, #0
   31628:	d012      	beq.n	31650 <_http_client_request+0x3f8>
				module->req.ext_header,
   3162a:	69fb      	ldr	r3, [r7, #28]
   3162c:	22d4      	movs	r2, #212	; 0xd4
   3162e:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   31630:	69fb      	ldr	r3, [r7, #28]
   31632:	22d4      	movs	r2, #212	; 0xd4
   31634:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   31636:	0018      	movs	r0, r3
   31638:	4bc5      	ldr	r3, [pc, #788]	; (31950 <_http_client_request+0x6f8>)
   3163a:	4798      	blx	r3
   3163c:	0002      	movs	r2, r0
   3163e:	2334      	movs	r3, #52	; 0x34
   31640:	2118      	movs	r1, #24
   31642:	468c      	mov	ip, r1
   31644:	44bc      	add	ip, r7
   31646:	4463      	add	r3, ip
   31648:	0021      	movs	r1, r4
   3164a:	0018      	movs	r0, r3
   3164c:	4bbf      	ldr	r3, [pc, #764]	; (3194c <_http_client_request+0x6f4>)
   3164e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31650:	49c0      	ldr	r1, [pc, #768]	; (31954 <_http_client_request+0x6fc>)
   31652:	2334      	movs	r3, #52	; 0x34
   31654:	2218      	movs	r2, #24
   31656:	4694      	mov	ip, r2
   31658:	44bc      	add	ip, r7
   3165a:	4463      	add	r3, ip
   3165c:	2202      	movs	r2, #2
   3165e:	0018      	movs	r0, r3
   31660:	4bba      	ldr	r3, [pc, #744]	; (3194c <_http_client_request+0x6f4>)
   31662:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   31664:	2334      	movs	r3, #52	; 0x34
   31666:	2218      	movs	r2, #24
   31668:	4694      	mov	ip, r2
   3166a:	44bc      	add	ip, r7
   3166c:	4463      	add	r3, ip
   3166e:	0018      	movs	r0, r3
   31670:	4bb9      	ldr	r3, [pc, #740]	; (31958 <_http_client_request+0x700>)
   31672:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   31674:	69fb      	ldr	r3, [r7, #28]
   31676:	2204      	movs	r2, #4
   31678:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   3167a:	69fb      	ldr	r3, [r7, #28]
   3167c:	22cc      	movs	r2, #204	; 0xcc
   3167e:	589b      	ldr	r3, [r3, r2]
   31680:	2b00      	cmp	r3, #0
   31682:	db00      	blt.n	31686 <_http_client_request+0x42e>
   31684:	e0c6      	b.n	31814 <_http_client_request+0x5bc>
   31686:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31688:	68db      	ldr	r3, [r3, #12]
   3168a:	2b00      	cmp	r3, #0
   3168c:	d100      	bne.n	31690 <_http_client_request+0x438>
   3168e:	e0c1      	b.n	31814 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   31690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31692:	68dc      	ldr	r4, [r3, #12]
   31694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31696:	6958      	ldr	r0, [r3, #20]
   31698:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3169a:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   3169c:	69fb      	ldr	r3, [r7, #28]
   3169e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   316a0:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   316a2:	69fb      	ldr	r3, [r7, #28]
   316a4:	22d0      	movs	r2, #208	; 0xd0
   316a6:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   316a8:	002a      	movs	r2, r5
   316aa:	47a0      	blx	r4
   316ac:	0003      	movs	r3, r0
   316ae:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   316b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   316b2:	2b00      	cmp	r3, #0
   316b4:	da01      	bge.n	316ba <_http_client_request+0x462>
				size = 0;
   316b6:	2300      	movs	r3, #0
   316b8:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   316ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   316bc:	220a      	movs	r2, #10
   316be:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   316c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   316c2:	220d      	movs	r2, #13
   316c4:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   316c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   316c8:	3305      	adds	r3, #5
   316ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
   316cc:	210d      	movs	r1, #13
   316ce:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   316d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   316d2:	3306      	adds	r3, #6
   316d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
   316d6:	210a      	movs	r1, #10
   316d8:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   316da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   316dc:	2b00      	cmp	r3, #0
   316de:	db14      	blt.n	3170a <_http_client_request+0x4b2>
				ptr = buffer + 2;
   316e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   316e2:	3302      	adds	r3, #2
   316e4:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   316e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   316e8:	4a9c      	ldr	r2, [pc, #624]	; (3195c <_http_client_request+0x704>)
   316ea:	4013      	ands	r3, r2
   316ec:	d504      	bpl.n	316f8 <_http_client_request+0x4a0>
   316ee:	3b01      	subs	r3, #1
   316f0:	2210      	movs	r2, #16
   316f2:	4252      	negs	r2, r2
   316f4:	4313      	orrs	r3, r2
   316f6:	3301      	adds	r3, #1
   316f8:	001a      	movs	r2, r3
   316fa:	2318      	movs	r3, #24
   316fc:	2118      	movs	r1, #24
   316fe:	468c      	mov	ip, r1
   31700:	44bc      	add	ip, r7
   31702:	4463      	add	r3, ip
   31704:	5c9a      	ldrb	r2, [r3, r2]
   31706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31708:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   3170a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3170c:	2b0f      	cmp	r3, #15
   3170e:	dd19      	ble.n	31744 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   31710:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31712:	3301      	adds	r3, #1
   31714:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   31716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31718:	2b00      	cmp	r3, #0
   3171a:	da00      	bge.n	3171e <_http_client_request+0x4c6>
   3171c:	330f      	adds	r3, #15
   3171e:	111b      	asrs	r3, r3, #4
   31720:	001a      	movs	r2, r3
   31722:	4b8e      	ldr	r3, [pc, #568]	; (3195c <_http_client_request+0x704>)
   31724:	4013      	ands	r3, r2
   31726:	d504      	bpl.n	31732 <_http_client_request+0x4da>
   31728:	3b01      	subs	r3, #1
   3172a:	2210      	movs	r2, #16
   3172c:	4252      	negs	r2, r2
   3172e:	4313      	orrs	r3, r2
   31730:	3301      	adds	r3, #1
   31732:	001a      	movs	r2, r3
   31734:	2318      	movs	r3, #24
   31736:	2118      	movs	r1, #24
   31738:	468c      	mov	ip, r1
   3173a:	44bc      	add	ip, r7
   3173c:	4463      	add	r3, ip
   3173e:	5c9a      	ldrb	r2, [r3, r2]
   31740:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31742:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   31744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31746:	2bff      	cmp	r3, #255	; 0xff
   31748:	dd18      	ble.n	3177c <_http_client_request+0x524>
				ptr = buffer;
   3174a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3174c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   3174e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31750:	2b00      	cmp	r3, #0
   31752:	da00      	bge.n	31756 <_http_client_request+0x4fe>
   31754:	33ff      	adds	r3, #255	; 0xff
   31756:	121b      	asrs	r3, r3, #8
   31758:	001a      	movs	r2, r3
   3175a:	4b80      	ldr	r3, [pc, #512]	; (3195c <_http_client_request+0x704>)
   3175c:	4013      	ands	r3, r2
   3175e:	d504      	bpl.n	3176a <_http_client_request+0x512>
   31760:	3b01      	subs	r3, #1
   31762:	2210      	movs	r2, #16
   31764:	4252      	negs	r2, r2
   31766:	4313      	orrs	r3, r2
   31768:	3301      	adds	r3, #1
   3176a:	001a      	movs	r2, r3
   3176c:	2318      	movs	r3, #24
   3176e:	2118      	movs	r1, #24
   31770:	468c      	mov	ip, r1
   31772:	44bc      	add	ip, r7
   31774:	4463      	add	r3, ip
   31776:	5c9a      	ldrb	r2, [r3, r2]
   31778:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3177a:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   3177c:	69fb      	ldr	r3, [r7, #28]
   3177e:	2000      	movs	r0, #0
   31780:	5618      	ldrsb	r0, [r3, r0]
   31782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31784:	3303      	adds	r3, #3
   31786:	001a      	movs	r2, r3
   31788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3178a:	1ad3      	subs	r3, r2, r3
   3178c:	b29a      	uxth	r2, r3
   3178e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31790:	b29b      	uxth	r3, r3
   31792:	18d3      	adds	r3, r2, r3
   31794:	b29b      	uxth	r3, r3
   31796:	3304      	adds	r3, #4
   31798:	b29a      	uxth	r2, r3
   3179a:	6f39      	ldr	r1, [r7, #112]	; 0x70
   3179c:	2300      	movs	r3, #0
   3179e:	4c70      	ldr	r4, [pc, #448]	; (31960 <_http_client_request+0x708>)
   317a0:	47a0      	blx	r4
   317a2:	0003      	movs	r3, r0
   317a4:	663b      	str	r3, [r7, #96]	; 0x60
   317a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   317a8:	2b00      	cmp	r3, #0
   317aa:	da07      	bge.n	317bc <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   317ac:	2305      	movs	r3, #5
   317ae:	425a      	negs	r2, r3
   317b0:	69fb      	ldr	r3, [r7, #28]
   317b2:	0011      	movs	r1, r2
   317b4:	0018      	movs	r0, r3
   317b6:	4b6b      	ldr	r3, [pc, #428]	; (31964 <_http_client_request+0x70c>)
   317b8:	4798      	blx	r3
				return;
   317ba:	e0e1      	b.n	31980 <_http_client_request+0x728>
			module->req.sent_length += size;
   317bc:	69fb      	ldr	r3, [r7, #28]
   317be:	22d0      	movs	r2, #208	; 0xd0
   317c0:	589a      	ldr	r2, [r3, r2]
   317c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   317c4:	18d2      	adds	r2, r2, r3
   317c6:	69fb      	ldr	r3, [r7, #28]
   317c8:	21d0      	movs	r1, #208	; 0xd0
   317ca:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   317cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   317ce:	2b00      	cmp	r3, #0
   317d0:	d000      	beq.n	317d4 <_http_client_request+0x57c>
   317d2:	e0c9      	b.n	31968 <_http_client_request+0x710>
				if (module->req.entity.close) {
   317d4:	69fb      	ldr	r3, [r7, #28]
   317d6:	22c0      	movs	r2, #192	; 0xc0
   317d8:	589b      	ldr	r3, [r3, r2]
   317da:	2b00      	cmp	r3, #0
   317dc:	d007      	beq.n	317ee <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   317de:	69fb      	ldr	r3, [r7, #28]
   317e0:	22c0      	movs	r2, #192	; 0xc0
   317e2:	589b      	ldr	r3, [r3, r2]
   317e4:	69fa      	ldr	r2, [r7, #28]
   317e6:	21c4      	movs	r1, #196	; 0xc4
   317e8:	5852      	ldr	r2, [r2, r1]
   317ea:	0010      	movs	r0, r2
   317ec:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   317ee:	69fb      	ldr	r3, [r7, #28]
   317f0:	2202      	movs	r2, #2
   317f2:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   317f4:	69fb      	ldr	r3, [r7, #28]
   317f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   317f8:	2b00      	cmp	r3, #0
   317fa:	d100      	bne.n	317fe <_http_client_request+0x5a6>
   317fc:	e0b5      	b.n	3196a <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   317fe:	69fb      	ldr	r3, [r7, #28]
   31800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31802:	220c      	movs	r2, #12
   31804:	2118      	movs	r1, #24
   31806:	468c      	mov	ip, r1
   31808:	44bc      	add	ip, r7
   3180a:	4462      	add	r2, ip
   3180c:	69f8      	ldr	r0, [r7, #28]
   3180e:	2101      	movs	r1, #1
   31810:	4798      	blx	r3
				break;
   31812:	e0aa      	b.n	3196a <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   31814:	69fb      	ldr	r3, [r7, #28]
   31816:	22cc      	movs	r2, #204	; 0xcc
   31818:	589b      	ldr	r3, [r3, r2]
   3181a:	2b00      	cmp	r3, #0
   3181c:	dc00      	bgt.n	31820 <_http_client_request+0x5c8>
   3181e:	e07c      	b.n	3191a <_http_client_request+0x6c2>
   31820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31822:	68db      	ldr	r3, [r3, #12]
   31824:	2b00      	cmp	r3, #0
   31826:	d100      	bne.n	3182a <_http_client_request+0x5d2>
   31828:	e077      	b.n	3191a <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   3182a:	69fb      	ldr	r3, [r7, #28]
   3182c:	22d0      	movs	r2, #208	; 0xd0
   3182e:	589a      	ldr	r2, [r3, r2]
   31830:	69fb      	ldr	r3, [r7, #28]
   31832:	21cc      	movs	r1, #204	; 0xcc
   31834:	585b      	ldr	r3, [r3, r1]
   31836:	429a      	cmp	r2, r3
   31838:	db1f      	blt.n	3187a <_http_client_request+0x622>
				if (module->req.entity.close) {
   3183a:	69fb      	ldr	r3, [r7, #28]
   3183c:	22c0      	movs	r2, #192	; 0xc0
   3183e:	589b      	ldr	r3, [r3, r2]
   31840:	2b00      	cmp	r3, #0
   31842:	d007      	beq.n	31854 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   31844:	69fb      	ldr	r3, [r7, #28]
   31846:	22c0      	movs	r2, #192	; 0xc0
   31848:	589b      	ldr	r3, [r3, r2]
   3184a:	69fa      	ldr	r2, [r7, #28]
   3184c:	21c4      	movs	r1, #196	; 0xc4
   3184e:	5852      	ldr	r2, [r2, r1]
   31850:	0010      	movs	r0, r2
   31852:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   31854:	69fb      	ldr	r3, [r7, #28]
   31856:	2202      	movs	r2, #2
   31858:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   3185a:	69fb      	ldr	r3, [r7, #28]
   3185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3185e:	2b00      	cmp	r3, #0
   31860:	d100      	bne.n	31864 <_http_client_request+0x60c>
   31862:	e084      	b.n	3196e <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   31864:	69fb      	ldr	r3, [r7, #28]
   31866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31868:	220c      	movs	r2, #12
   3186a:	2118      	movs	r1, #24
   3186c:	468c      	mov	ip, r1
   3186e:	44bc      	add	ip, r7
   31870:	4462      	add	r2, ip
   31872:	69f8      	ldr	r0, [r7, #28]
   31874:	2101      	movs	r1, #1
   31876:	4798      	blx	r3
				break;
   31878:	e079      	b.n	3196e <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   3187a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3187c:	68dc      	ldr	r4, [r3, #12]
   3187e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31880:	6958      	ldr	r0, [r3, #20]
   31882:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   31884:	69fb      	ldr	r3, [r7, #28]
   31886:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   31888:	69fb      	ldr	r3, [r7, #28]
   3188a:	22d0      	movs	r2, #208	; 0xd0
   3188c:	589b      	ldr	r3, [r3, r2]
   3188e:	002a      	movs	r2, r5
   31890:	47a0      	blx	r4
   31892:	0003      	movs	r3, r0
   31894:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   31896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31898:	2b00      	cmp	r3, #0
   3189a:	da0d      	bge.n	318b8 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   3189c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3189e:	2b00      	cmp	r3, #0
   318a0:	d102      	bne.n	318a8 <_http_client_request+0x650>
   318a2:	234d      	movs	r3, #77	; 0x4d
   318a4:	425b      	negs	r3, r3
   318a6:	e001      	b.n	318ac <_http_client_request+0x654>
   318a8:	2305      	movs	r3, #5
   318aa:	425b      	negs	r3, r3
   318ac:	69fa      	ldr	r2, [r7, #28]
   318ae:	0019      	movs	r1, r3
   318b0:	0010      	movs	r0, r2
   318b2:	4b2c      	ldr	r3, [pc, #176]	; (31964 <_http_client_request+0x70c>)
   318b4:	4798      	blx	r3
			if (size < 0) {
   318b6:	e057      	b.n	31968 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   318b8:	69fb      	ldr	r3, [r7, #28]
   318ba:	22cc      	movs	r2, #204	; 0xcc
   318bc:	589a      	ldr	r2, [r3, r2]
   318be:	69fb      	ldr	r3, [r7, #28]
   318c0:	21d0      	movs	r1, #208	; 0xd0
   318c2:	585b      	ldr	r3, [r3, r1]
   318c4:	1ad2      	subs	r2, r2, r3
   318c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   318c8:	429a      	cmp	r2, r3
   318ca:	da07      	bge.n	318dc <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   318cc:	69fb      	ldr	r3, [r7, #28]
   318ce:	22cc      	movs	r2, #204	; 0xcc
   318d0:	589a      	ldr	r2, [r3, r2]
   318d2:	69fb      	ldr	r3, [r7, #28]
   318d4:	21d0      	movs	r1, #208	; 0xd0
   318d6:	585b      	ldr	r3, [r3, r1]
   318d8:	1ad3      	subs	r3, r2, r3
   318da:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   318dc:	69fb      	ldr	r3, [r7, #28]
   318de:	2000      	movs	r0, #0
   318e0:	5618      	ldrsb	r0, [r3, r0]
   318e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   318e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   318e6:	b29a      	uxth	r2, r3
   318e8:	2300      	movs	r3, #0
   318ea:	4c1d      	ldr	r4, [pc, #116]	; (31960 <_http_client_request+0x708>)
   318ec:	47a0      	blx	r4
   318ee:	0003      	movs	r3, r0
   318f0:	663b      	str	r3, [r7, #96]	; 0x60
   318f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   318f4:	2b00      	cmp	r3, #0
   318f6:	da07      	bge.n	31908 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   318f8:	2305      	movs	r3, #5
   318fa:	425a      	negs	r2, r3
   318fc:	69fb      	ldr	r3, [r7, #28]
   318fe:	0011      	movs	r1, r2
   31900:	0018      	movs	r0, r3
   31902:	4b18      	ldr	r3, [pc, #96]	; (31964 <_http_client_request+0x70c>)
   31904:	4798      	blx	r3
					return;
   31906:	e03b      	b.n	31980 <_http_client_request+0x728>
				module->req.sent_length += size;
   31908:	69fb      	ldr	r3, [r7, #28]
   3190a:	22d0      	movs	r2, #208	; 0xd0
   3190c:	589a      	ldr	r2, [r3, r2]
   3190e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31910:	18d2      	adds	r2, r2, r3
   31912:	69fb      	ldr	r3, [r7, #28]
   31914:	21d0      	movs	r1, #208	; 0xd0
   31916:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   31918:	e026      	b.n	31968 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   3191a:	69fb      	ldr	r3, [r7, #28]
   3191c:	2202      	movs	r2, #2
   3191e:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   31920:	69fb      	ldr	r3, [r7, #28]
   31922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31924:	2b00      	cmp	r3, #0
   31926:	d024      	beq.n	31972 <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   31928:	69fb      	ldr	r3, [r7, #28]
   3192a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3192c:	220c      	movs	r2, #12
   3192e:	2118      	movs	r1, #24
   31930:	468c      	mov	ip, r1
   31932:	44bc      	add	ip, r7
   31934:	4462      	add	r2, ip
   31936:	69f8      	ldr	r0, [r7, #28]
   31938:	2101      	movs	r1, #1
   3193a:	4798      	blx	r3
			break;
   3193c:	e019      	b.n	31972 <_http_client_request+0x71a>
   3193e:	46c0      	nop			; (mov r8, r8)
   31940:	00039cf8 	.word	0x00039cf8
   31944:	00034b41 	.word	0x00034b41
   31948:	00039cfc 	.word	0x00039cfc
   3194c:	000321b9 	.word	0x000321b9
   31950:	00034c3b 	.word	0x00034c3b
   31954:	00039c84 	.word	0x00039c84
   31958:	000321f5 	.word	0x000321f5
   3195c:	8000000f 	.word	0x8000000f
   31960:	0002573d 	.word	0x0002573d
   31964:	00031105 	.word	0x00031105
		break;
   31968:	e004      	b.n	31974 <_http_client_request+0x71c>
				break;
   3196a:	46c0      	nop			; (mov r8, r8)
   3196c:	e002      	b.n	31974 <_http_client_request+0x71c>
				break;
   3196e:	46c0      	nop			; (mov r8, r8)
   31970:	e000      	b.n	31974 <_http_client_request+0x71c>
			break;
   31972:	46c0      	nop			; (mov r8, r8)
   31974:	69bb      	ldr	r3, [r7, #24]
   31976:	469d      	mov	sp, r3
   31978:	e004      	b.n	31984 <_http_client_request+0x72c>
		return;
   3197a:	46c0      	nop			; (mov r8, r8)
   3197c:	e000      	b.n	31980 <_http_client_request+0x728>
		return;
   3197e:	46c0      	nop			; (mov r8, r8)
   31980:	69bb      	ldr	r3, [r7, #24]
   31982:	469d      	mov	sp, r3
	}
}
   31984:	46bd      	mov	sp, r7
   31986:	b01e      	add	sp, #120	; 0x78
   31988:	bc04      	pop	{r2}
   3198a:	4690      	mov	r8, r2
   3198c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3198e:	46c0      	nop			; (mov r8, r8)

00031990 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   31990:	b590      	push	{r4, r7, lr}
   31992:	b083      	sub	sp, #12
   31994:	af00      	add	r7, sp, #0
   31996:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   31998:	687b      	ldr	r3, [r7, #4]
   3199a:	2b00      	cmp	r3, #0
   3199c:	d021      	beq.n	319e2 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   3199e:	687b      	ldr	r3, [r7, #4]
   319a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   319a2:	687b      	ldr	r3, [r7, #4]
   319a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   319a6:	429a      	cmp	r2, r3
   319a8:	d307      	bcc.n	319ba <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   319aa:	238b      	movs	r3, #139	; 0x8b
   319ac:	425a      	negs	r2, r3
   319ae:	687b      	ldr	r3, [r7, #4]
   319b0:	0011      	movs	r1, r2
   319b2:	0018      	movs	r0, r3
   319b4:	4b0d      	ldr	r3, [pc, #52]	; (319ec <_http_client_recv_packet+0x5c>)
   319b6:	4798      	blx	r3
		return;
   319b8:	e014      	b.n	319e4 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   319ba:	687b      	ldr	r3, [r7, #4]
   319bc:	2000      	movs	r0, #0
   319be:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   319c0:	687b      	ldr	r3, [r7, #4]
   319c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   319c4:	687b      	ldr	r3, [r7, #4]
   319c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   319c8:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   319ca:	687b      	ldr	r3, [r7, #4]
   319cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   319ce:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   319d0:	687b      	ldr	r3, [r7, #4]
   319d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   319d4:	b29b      	uxth	r3, r3
   319d6:	1ad3      	subs	r3, r2, r3
   319d8:	b29a      	uxth	r2, r3
   319da:	2300      	movs	r3, #0
   319dc:	4c04      	ldr	r4, [pc, #16]	; (319f0 <_http_client_recv_packet+0x60>)
   319de:	47a0      	blx	r4
   319e0:	e000      	b.n	319e4 <_http_client_recv_packet+0x54>
		return;
   319e2:	46c0      	nop			; (mov r8, r8)
}
   319e4:	46bd      	mov	sp, r7
   319e6:	b003      	add	sp, #12
   319e8:	bd90      	pop	{r4, r7, pc}
   319ea:	46c0      	nop			; (mov r8, r8)
   319ec:	00031105 	.word	0x00031105
   319f0:	000258a1 	.word	0x000258a1

000319f4 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   319f4:	b580      	push	{r7, lr}
   319f6:	b082      	sub	sp, #8
   319f8:	af00      	add	r7, sp, #0
   319fa:	6078      	str	r0, [r7, #4]
   319fc:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   319fe:	687b      	ldr	r3, [r7, #4]
   31a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   31a02:	683b      	ldr	r3, [r7, #0]
   31a04:	18d2      	adds	r2, r2, r3
   31a06:	687b      	ldr	r3, [r7, #4]
   31a08:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   31a0a:	687b      	ldr	r3, [r7, #4]
   31a0c:	2258      	movs	r2, #88	; 0x58
   31a0e:	5a9b      	ldrh	r3, [r3, r2]
   31a10:	2b00      	cmp	r3, #0
   31a12:	d007      	beq.n	31a24 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   31a14:	687b      	ldr	r3, [r7, #4]
   31a16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   31a18:	687b      	ldr	r3, [r7, #4]
   31a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   31a1c:	0019      	movs	r1, r3
   31a1e:	0010      	movs	r0, r2
   31a20:	4b06      	ldr	r3, [pc, #24]	; (31a3c <_http_client_recved_packet+0x48>)
   31a22:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   31a24:	46c0      	nop			; (mov r8, r8)
   31a26:	687b      	ldr	r3, [r7, #4]
   31a28:	0018      	movs	r0, r3
   31a2a:	4b05      	ldr	r3, [pc, #20]	; (31a40 <_http_client_recved_packet+0x4c>)
   31a2c:	4798      	blx	r3
   31a2e:	1e03      	subs	r3, r0, #0
   31a30:	d1f9      	bne.n	31a26 <_http_client_recved_packet+0x32>
}
   31a32:	46c0      	nop			; (mov r8, r8)
   31a34:	46bd      	mov	sp, r7
   31a36:	b002      	add	sp, #8
   31a38:	bd80      	pop	{r7, pc}
   31a3a:	46c0      	nop			; (mov r8, r8)
   31a3c:	000324b1 	.word	0x000324b1
   31a40:	00031a45 	.word	0x00031a45

00031a44 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   31a44:	b580      	push	{r7, lr}
   31a46:	b082      	sub	sp, #8
   31a48:	af00      	add	r7, sp, #0
   31a4a:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   31a4c:	687b      	ldr	r3, [r7, #4]
   31a4e:	22d8      	movs	r2, #216	; 0xd8
   31a50:	589b      	ldr	r3, [r3, r2]
   31a52:	2b00      	cmp	r3, #0
   31a54:	d002      	beq.n	31a5c <_http_client_handle_response+0x18>
   31a56:	2b01      	cmp	r3, #1
   31a58:	d006      	beq.n	31a68 <_http_client_handle_response+0x24>
   31a5a:	e00b      	b.n	31a74 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   31a5c:	687b      	ldr	r3, [r7, #4]
   31a5e:	0018      	movs	r0, r3
   31a60:	4b07      	ldr	r3, [pc, #28]	; (31a80 <_http_client_handle_response+0x3c>)
   31a62:	4798      	blx	r3
   31a64:	0003      	movs	r3, r0
   31a66:	e006      	b.n	31a76 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   31a68:	687b      	ldr	r3, [r7, #4]
   31a6a:	0018      	movs	r0, r3
   31a6c:	4b05      	ldr	r3, [pc, #20]	; (31a84 <_http_client_handle_response+0x40>)
   31a6e:	4798      	blx	r3
   31a70:	0003      	movs	r3, r0
   31a72:	e000      	b.n	31a76 <_http_client_handle_response+0x32>
	}
	return 0;
   31a74:	2300      	movs	r3, #0
}
   31a76:	0018      	movs	r0, r3
   31a78:	46bd      	mov	sp, r7
   31a7a:	b002      	add	sp, #8
   31a7c:	bd80      	pop	{r7, pc}
   31a7e:	46c0      	nop			; (mov r8, r8)
   31a80:	00031a89 	.word	0x00031a89
   31a84:	00031f41 	.word	0x00031f41

00031a88 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   31a88:	b590      	push	{r4, r7, lr}
   31a8a:	b08b      	sub	sp, #44	; 0x2c
   31a8c:	af00      	add	r7, sp, #0
   31a8e:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   31a90:	687b      	ldr	r3, [r7, #4]
   31a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31a94:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   31a96:	4b9a      	ldr	r3, [pc, #616]	; (31d00 <_http_client_handle_header+0x278>)
   31a98:	681a      	ldr	r2, [r3, #0]
   31a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a9c:	0011      	movs	r1, r2
   31a9e:	0018      	movs	r0, r3
   31aa0:	4b98      	ldr	r3, [pc, #608]	; (31d04 <_http_client_handle_header+0x27c>)
   31aa2:	4798      	blx	r3
   31aa4:	0003      	movs	r3, r0
   31aa6:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   31aa8:	69bb      	ldr	r3, [r7, #24]
   31aaa:	2b00      	cmp	r3, #0
   31aac:	d007      	beq.n	31abe <_http_client_handle_header+0x36>
   31aae:	687b      	ldr	r3, [r7, #4]
   31ab0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   31ab2:	687b      	ldr	r3, [r7, #4]
   31ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31ab6:	18d2      	adds	r2, r2, r3
   31ab8:	69bb      	ldr	r3, [r7, #24]
   31aba:	429a      	cmp	r2, r3
   31abc:	d807      	bhi.n	31ace <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   31abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   31ac0:	687b      	ldr	r3, [r7, #4]
   31ac2:	0011      	movs	r1, r2
   31ac4:	0018      	movs	r0, r3
   31ac6:	4b90      	ldr	r3, [pc, #576]	; (31d08 <_http_client_handle_header+0x280>)
   31ac8:	4798      	blx	r3
			return 0;
   31aca:	2300      	movs	r3, #0
   31acc:	e114      	b.n	31cf8 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   31ace:	4b8c      	ldr	r3, [pc, #560]	; (31d00 <_http_client_handle_header+0x278>)
   31ad0:	681c      	ldr	r4, [r3, #0]
   31ad2:	4b8b      	ldr	r3, [pc, #556]	; (31d00 <_http_client_handle_header+0x278>)
   31ad4:	681b      	ldr	r3, [r3, #0]
   31ad6:	0018      	movs	r0, r3
   31ad8:	4b8c      	ldr	r3, [pc, #560]	; (31d0c <_http_client_handle_header+0x284>)
   31ada:	4798      	blx	r3
   31adc:	0002      	movs	r2, r0
   31ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ae0:	0021      	movs	r1, r4
   31ae2:	0018      	movs	r0, r3
   31ae4:	4b8a      	ldr	r3, [pc, #552]	; (31d10 <_http_client_handle_header+0x288>)
   31ae6:	4798      	blx	r3
   31ae8:	1e03      	subs	r3, r0, #0
   31aea:	d15d      	bne.n	31ba8 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   31aec:	4b84      	ldr	r3, [pc, #528]	; (31d00 <_http_client_handle_header+0x278>)
   31aee:	681b      	ldr	r3, [r3, #0]
   31af0:	0018      	movs	r0, r3
   31af2:	4b86      	ldr	r3, [pc, #536]	; (31d0c <_http_client_handle_header+0x284>)
   31af4:	4798      	blx	r3
   31af6:	0002      	movs	r2, r0
   31af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31afa:	189a      	adds	r2, r3, r2
   31afc:	687b      	ldr	r3, [r7, #4]
   31afe:	0011      	movs	r1, r2
   31b00:	0018      	movs	r0, r3
   31b02:	4b81      	ldr	r3, [pc, #516]	; (31d08 <_http_client_handle_header+0x280>)
   31b04:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   31b06:	687b      	ldr	r3, [r7, #4]
   31b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31b0a:	2b00      	cmp	r3, #0
   31b0c:	d046      	beq.n	31b9c <_http_client_handle_header+0x114>
   31b0e:	687b      	ldr	r3, [r7, #4]
   31b10:	22e4      	movs	r2, #228	; 0xe4
   31b12:	5a9b      	ldrh	r3, [r3, r2]
   31b14:	2b00      	cmp	r3, #0
   31b16:	d041      	beq.n	31b9c <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   31b18:	687b      	ldr	r3, [r7, #4]
   31b1a:	22dc      	movs	r2, #220	; 0xdc
   31b1c:	589b      	ldr	r3, [r3, r2]
   31b1e:	2b00      	cmp	r3, #0
   31b20:	da19      	bge.n	31b56 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   31b22:	687b      	ldr	r3, [r7, #4]
   31b24:	22e4      	movs	r2, #228	; 0xe4
   31b26:	5a9a      	ldrh	r2, [r3, r2]
   31b28:	230c      	movs	r3, #12
   31b2a:	18fb      	adds	r3, r7, r3
   31b2c:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   31b2e:	230c      	movs	r3, #12
   31b30:	18fb      	adds	r3, r7, r3
   31b32:	2201      	movs	r2, #1
   31b34:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   31b36:	687b      	ldr	r3, [r7, #4]
   31b38:	22e0      	movs	r2, #224	; 0xe0
   31b3a:	2100      	movs	r1, #0
   31b3c:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   31b3e:	230c      	movs	r3, #12
   31b40:	18fb      	adds	r3, r7, r3
   31b42:	2200      	movs	r2, #0
   31b44:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   31b46:	687b      	ldr	r3, [r7, #4]
   31b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31b4a:	220c      	movs	r2, #12
   31b4c:	18ba      	adds	r2, r7, r2
   31b4e:	6878      	ldr	r0, [r7, #4]
   31b50:	2102      	movs	r1, #2
   31b52:	4798      	blx	r3
   31b54:	e022      	b.n	31b9c <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   31b56:	687b      	ldr	r3, [r7, #4]
   31b58:	22dc      	movs	r2, #220	; 0xdc
   31b5a:	589a      	ldr	r2, [r3, r2]
   31b5c:	687b      	ldr	r3, [r7, #4]
   31b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31b60:	429a      	cmp	r2, r3
   31b62:	dd1b      	ble.n	31b9c <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   31b64:	687b      	ldr	r3, [r7, #4]
   31b66:	22e4      	movs	r2, #228	; 0xe4
   31b68:	5a9a      	ldrh	r2, [r3, r2]
   31b6a:	230c      	movs	r3, #12
   31b6c:	18fb      	adds	r3, r7, r3
   31b6e:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   31b70:	687b      	ldr	r3, [r7, #4]
   31b72:	22dc      	movs	r2, #220	; 0xdc
   31b74:	589b      	ldr	r3, [r3, r2]
   31b76:	001a      	movs	r2, r3
   31b78:	230c      	movs	r3, #12
   31b7a:	18fb      	adds	r3, r7, r3
   31b7c:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   31b7e:	230c      	movs	r3, #12
   31b80:	18fb      	adds	r3, r7, r3
   31b82:	2200      	movs	r2, #0
   31b84:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   31b86:	687b      	ldr	r3, [r7, #4]
   31b88:	22e0      	movs	r2, #224	; 0xe0
   31b8a:	2100      	movs	r1, #0
   31b8c:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   31b8e:	687b      	ldr	r3, [r7, #4]
   31b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31b92:	220c      	movs	r2, #12
   31b94:	18ba      	adds	r2, r7, r2
   31b96:	6878      	ldr	r0, [r7, #4]
   31b98:	2102      	movs	r1, #2
   31b9a:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   31b9c:	687b      	ldr	r3, [r7, #4]
   31b9e:	22d8      	movs	r2, #216	; 0xd8
   31ba0:	2101      	movs	r1, #1
   31ba2:	5099      	str	r1, [r3, r2]
			return 1;
   31ba4:	2301      	movs	r3, #1
   31ba6:	e0a7      	b.n	31cf8 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   31ba8:	495a      	ldr	r1, [pc, #360]	; (31d14 <_http_client_handle_header+0x28c>)
   31baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31bac:	2210      	movs	r2, #16
   31bae:	0018      	movs	r0, r3
   31bb0:	4b57      	ldr	r3, [pc, #348]	; (31d10 <_http_client_handle_header+0x288>)
   31bb2:	4798      	blx	r3
   31bb4:	1e03      	subs	r3, r0, #0
   31bb6:	d109      	bne.n	31bcc <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   31bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31bba:	3310      	adds	r3, #16
   31bbc:	0018      	movs	r0, r3
   31bbe:	4b56      	ldr	r3, [pc, #344]	; (31d18 <_http_client_handle_header+0x290>)
   31bc0:	4798      	blx	r3
   31bc2:	0001      	movs	r1, r0
   31bc4:	687b      	ldr	r3, [r7, #4]
   31bc6:	22dc      	movs	r2, #220	; 0xdc
   31bc8:	5099      	str	r1, [r3, r2]
   31bca:	e08b      	b.n	31ce4 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   31bcc:	4953      	ldr	r1, [pc, #332]	; (31d1c <_http_client_handle_header+0x294>)
   31bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31bd0:	2213      	movs	r2, #19
   31bd2:	0018      	movs	r0, r3
   31bd4:	4b4e      	ldr	r3, [pc, #312]	; (31d10 <_http_client_handle_header+0x288>)
   31bd6:	4798      	blx	r3
   31bd8:	1e03      	subs	r3, r0, #0
   31bda:	d127      	bne.n	31c2c <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   31bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31bde:	3313      	adds	r3, #19
   31be0:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31be2:	e01e      	b.n	31c22 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   31be4:	6a3b      	ldr	r3, [r7, #32]
   31be6:	781b      	ldrb	r3, [r3, #0]
   31be8:	2b20      	cmp	r3, #32
   31bea:	d103      	bne.n	31bf4 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31bec:	6a3b      	ldr	r3, [r7, #32]
   31bee:	3301      	adds	r3, #1
   31bf0:	623b      	str	r3, [r7, #32]
   31bf2:	e016      	b.n	31c22 <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   31bf4:	6a3b      	ldr	r3, [r7, #32]
   31bf6:	781b      	ldrb	r3, [r3, #0]
   31bf8:	2b43      	cmp	r3, #67	; 0x43
   31bfa:	d003      	beq.n	31c04 <_http_client_handle_header+0x17c>
   31bfc:	6a3b      	ldr	r3, [r7, #32]
   31bfe:	781b      	ldrb	r3, [r3, #0]
   31c00:	2b63      	cmp	r3, #99	; 0x63
   31c02:	d105      	bne.n	31c10 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   31c04:	687b      	ldr	r3, [r7, #4]
   31c06:	21cc      	movs	r1, #204	; 0xcc
   31c08:	2201      	movs	r2, #1
   31c0a:	4252      	negs	r2, r2
   31c0c:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   31c0e:	e069      	b.n	31ce4 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   31c10:	2386      	movs	r3, #134	; 0x86
   31c12:	425a      	negs	r2, r3
   31c14:	687b      	ldr	r3, [r7, #4]
   31c16:	0011      	movs	r1, r2
   31c18:	0018      	movs	r0, r3
   31c1a:	4b41      	ldr	r3, [pc, #260]	; (31d20 <_http_client_handle_header+0x298>)
   31c1c:	4798      	blx	r3
					return 0;
   31c1e:	2300      	movs	r3, #0
   31c20:	e06a      	b.n	31cf8 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31c22:	69ba      	ldr	r2, [r7, #24]
   31c24:	6a3b      	ldr	r3, [r7, #32]
   31c26:	429a      	cmp	r2, r3
   31c28:	d8dc      	bhi.n	31be4 <_http_client_handle_header+0x15c>
   31c2a:	e05b      	b.n	31ce4 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   31c2c:	493d      	ldr	r1, [pc, #244]	; (31d24 <_http_client_handle_header+0x29c>)
   31c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31c30:	220c      	movs	r2, #12
   31c32:	0018      	movs	r0, r3
   31c34:	4b36      	ldr	r3, [pc, #216]	; (31d10 <_http_client_handle_header+0x288>)
   31c36:	4798      	blx	r3
   31c38:	1e03      	subs	r3, r0, #0
   31c3a:	d126      	bne.n	31c8a <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   31c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31c3e:	330c      	adds	r3, #12
   31c40:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31c42:	e01d      	b.n	31c80 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   31c44:	69fb      	ldr	r3, [r7, #28]
   31c46:	781b      	ldrb	r3, [r3, #0]
   31c48:	2b20      	cmp	r3, #32
   31c4a:	d103      	bne.n	31c54 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31c4c:	69fb      	ldr	r3, [r7, #28]
   31c4e:	3301      	adds	r3, #1
   31c50:	61fb      	str	r3, [r7, #28]
   31c52:	e015      	b.n	31c80 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   31c54:	69fb      	ldr	r3, [r7, #28]
   31c56:	781b      	ldrb	r3, [r3, #0]
   31c58:	2b4b      	cmp	r3, #75	; 0x4b
   31c5a:	d003      	beq.n	31c64 <_http_client_handle_header+0x1dc>
   31c5c:	69fb      	ldr	r3, [r7, #28]
   31c5e:	781b      	ldrb	r3, [r3, #0]
   31c60:	2b6b      	cmp	r3, #107	; 0x6b
   31c62:	d106      	bne.n	31c72 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   31c64:	687b      	ldr	r3, [r7, #4]
   31c66:	2241      	movs	r2, #65	; 0x41
   31c68:	5c99      	ldrb	r1, [r3, r2]
   31c6a:	2002      	movs	r0, #2
   31c6c:	4301      	orrs	r1, r0
   31c6e:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   31c70:	e038      	b.n	31ce4 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   31c72:	687b      	ldr	r3, [r7, #4]
   31c74:	2241      	movs	r2, #65	; 0x41
   31c76:	5c99      	ldrb	r1, [r3, r2]
   31c78:	2002      	movs	r0, #2
   31c7a:	4381      	bics	r1, r0
   31c7c:	5499      	strb	r1, [r3, r2]
				break;
   31c7e:	e031      	b.n	31ce4 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31c80:	69ba      	ldr	r2, [r7, #24]
   31c82:	69fb      	ldr	r3, [r7, #28]
   31c84:	429a      	cmp	r2, r3
   31c86:	d8dd      	bhi.n	31c44 <_http_client_handle_header+0x1bc>
   31c88:	e02c      	b.n	31ce4 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   31c8a:	4927      	ldr	r1, [pc, #156]	; (31d28 <_http_client_handle_header+0x2a0>)
   31c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31c8e:	2205      	movs	r2, #5
   31c90:	0018      	movs	r0, r3
   31c92:	4b1f      	ldr	r3, [pc, #124]	; (31d10 <_http_client_handle_header+0x288>)
   31c94:	4798      	blx	r3
   31c96:	1e03      	subs	r3, r0, #0
   31c98:	d124      	bne.n	31ce4 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   31c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31c9c:	3309      	adds	r3, #9
   31c9e:	0018      	movs	r0, r3
   31ca0:	4b1d      	ldr	r3, [pc, #116]	; (31d18 <_http_client_handle_header+0x290>)
   31ca2:	4798      	blx	r3
   31ca4:	0003      	movs	r3, r0
   31ca6:	b299      	uxth	r1, r3
   31ca8:	687b      	ldr	r3, [r7, #4]
   31caa:	22e4      	movs	r2, #228	; 0xe4
   31cac:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   31cae:	687b      	ldr	r3, [r7, #4]
   31cb0:	22dc      	movs	r2, #220	; 0xdc
   31cb2:	2100      	movs	r1, #0
   31cb4:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   31cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31cb8:	3305      	adds	r3, #5
   31cba:	781b      	ldrb	r3, [r3, #0]
   31cbc:	2b31      	cmp	r3, #49	; 0x31
   31cbe:	d804      	bhi.n	31cca <_http_client_handle_header+0x242>
   31cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31cc2:	3307      	adds	r3, #7
   31cc4:	781b      	ldrb	r3, [r3, #0]
   31cc6:	2b30      	cmp	r3, #48	; 0x30
   31cc8:	d906      	bls.n	31cd8 <_http_client_handle_header+0x250>
				module->permanent = 1;
   31cca:	687b      	ldr	r3, [r7, #4]
   31ccc:	2241      	movs	r2, #65	; 0x41
   31cce:	5c99      	ldrb	r1, [r3, r2]
   31cd0:	2002      	movs	r0, #2
   31cd2:	4301      	orrs	r1, r0
   31cd4:	5499      	strb	r1, [r3, r2]
   31cd6:	e005      	b.n	31ce4 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   31cd8:	687b      	ldr	r3, [r7, #4]
   31cda:	2241      	movs	r2, #65	; 0x41
   31cdc:	5c99      	ldrb	r1, [r3, r2]
   31cde:	2002      	movs	r0, #2
   31ce0:	4381      	bics	r1, r0
   31ce2:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   31ce4:	4b06      	ldr	r3, [pc, #24]	; (31d00 <_http_client_handle_header+0x278>)
   31ce6:	681b      	ldr	r3, [r3, #0]
   31ce8:	0018      	movs	r0, r3
   31cea:	4b08      	ldr	r3, [pc, #32]	; (31d0c <_http_client_handle_header+0x284>)
   31cec:	4798      	blx	r3
   31cee:	0002      	movs	r2, r0
   31cf0:	69bb      	ldr	r3, [r7, #24]
   31cf2:	189b      	adds	r3, r3, r2
   31cf4:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   31cf6:	e6ce      	b.n	31a96 <_http_client_handle_header+0xe>
	}
}
   31cf8:	0018      	movs	r0, r3
   31cfa:	46bd      	mov	sp, r7
   31cfc:	b00b      	add	sp, #44	; 0x2c
   31cfe:	bd90      	pop	{r4, r7, pc}
   31d00:	2000012c 	.word	0x2000012c
   31d04:	00034cb9 	.word	0x00034cb9
   31d08:	000320ed 	.word	0x000320ed
   31d0c:	00034c3b 	.word	0x00034c3b
   31d10:	00034c49 	.word	0x00034c49
   31d14:	00039cfc 	.word	0x00039cfc
   31d18:	000347d1 	.word	0x000347d1
   31d1c:	00039d20 	.word	0x00039d20
   31d20:	00031105 	.word	0x00031105
   31d24:	00039d34 	.word	0x00039d34
   31d28:	00039d44 	.word	0x00039d44

00031d2c <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   31d2c:	b580      	push	{r7, lr}
   31d2e:	b088      	sub	sp, #32
   31d30:	af00      	add	r7, sp, #0
   31d32:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   31d34:	687b      	ldr	r3, [r7, #4]
   31d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31d38:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   31d3a:	2300      	movs	r3, #0
   31d3c:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   31d3e:	687b      	ldr	r3, [r7, #4]
   31d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31d42:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   31d44:	687b      	ldr	r3, [r7, #4]
   31d46:	22e0      	movs	r2, #224	; 0xe0
   31d48:	589b      	ldr	r3, [r3, r2]
   31d4a:	2b00      	cmp	r3, #0
   31d4c:	db71      	blt.n	31e32 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   31d4e:	687b      	ldr	r3, [r7, #4]
   31d50:	22e0      	movs	r2, #224	; 0xe0
   31d52:	589b      	ldr	r3, [r3, r2]
   31d54:	2b00      	cmp	r3, #0
   31d56:	d134      	bne.n	31dc2 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   31d58:	687b      	ldr	r3, [r7, #4]
   31d5a:	22d8      	movs	r2, #216	; 0xd8
   31d5c:	2100      	movs	r1, #0
   31d5e:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   31d60:	687b      	ldr	r3, [r7, #4]
   31d62:	22e4      	movs	r2, #228	; 0xe4
   31d64:	2100      	movs	r1, #0
   31d66:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   31d68:	2308      	movs	r3, #8
   31d6a:	18fb      	adds	r3, r7, r3
   31d6c:	2201      	movs	r2, #1
   31d6e:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   31d70:	2308      	movs	r3, #8
   31d72:	18fb      	adds	r3, r7, r3
   31d74:	2200      	movs	r2, #0
   31d76:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   31d78:	2308      	movs	r3, #8
   31d7a:	18fb      	adds	r3, r7, r3
   31d7c:	2200      	movs	r2, #0
   31d7e:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   31d80:	687b      	ldr	r3, [r7, #4]
   31d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31d84:	2b00      	cmp	r3, #0
   31d86:	d006      	beq.n	31d96 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   31d88:	687b      	ldr	r3, [r7, #4]
   31d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31d8c:	2208      	movs	r2, #8
   31d8e:	18ba      	adds	r2, r7, r2
   31d90:	6878      	ldr	r0, [r7, #4]
   31d92:	2103      	movs	r1, #3
   31d94:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   31d96:	687b      	ldr	r3, [r7, #4]
   31d98:	2241      	movs	r2, #65	; 0x41
   31d9a:	5c9b      	ldrb	r3, [r3, r2]
   31d9c:	2202      	movs	r2, #2
   31d9e:	4013      	ands	r3, r2
   31da0:	b2db      	uxtb	r3, r3
   31da2:	2b00      	cmp	r3, #0
   31da4:	d105      	bne.n	31db2 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   31da6:	687b      	ldr	r3, [r7, #4]
   31da8:	2100      	movs	r1, #0
   31daa:	0018      	movs	r0, r3
   31dac:	4b62      	ldr	r3, [pc, #392]	; (31f38 <_http_client_read_chuked_entity+0x20c>)
   31dae:	4798      	blx	r3
					return;
   31db0:	e0bf      	b.n	31f32 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   31db2:	697b      	ldr	r3, [r7, #20]
   31db4:	1c9a      	adds	r2, r3, #2
   31db6:	687b      	ldr	r3, [r7, #4]
   31db8:	0011      	movs	r1, r2
   31dba:	0018      	movs	r0, r3
   31dbc:	4b5f      	ldr	r3, [pc, #380]	; (31f3c <_http_client_read_chuked_entity+0x210>)
   31dbe:	4798      	blx	r3
   31dc0:	e0b2      	b.n	31f28 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   31dc2:	687b      	ldr	r3, [r7, #4]
   31dc4:	22e0      	movs	r2, #224	; 0xe0
   31dc6:	589a      	ldr	r2, [r3, r2]
   31dc8:	69fb      	ldr	r3, [r7, #28]
   31dca:	429a      	cmp	r2, r3
   31dcc:	dd00      	ble.n	31dd0 <_http_client_read_chuked_entity+0xa4>
   31dce:	e0ab      	b.n	31f28 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   31dd0:	687b      	ldr	r3, [r7, #4]
   31dd2:	22e0      	movs	r2, #224	; 0xe0
   31dd4:	589b      	ldr	r3, [r3, r2]
   31dd6:	001a      	movs	r2, r3
   31dd8:	2308      	movs	r3, #8
   31dda:	18fb      	adds	r3, r7, r3
   31ddc:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   31dde:	2308      	movs	r3, #8
   31de0:	18fb      	adds	r3, r7, r3
   31de2:	697a      	ldr	r2, [r7, #20]
   31de4:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   31de6:	2308      	movs	r3, #8
   31de8:	18fb      	adds	r3, r7, r3
   31dea:	2200      	movs	r2, #0
   31dec:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   31dee:	687b      	ldr	r3, [r7, #4]
   31df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31df2:	2b00      	cmp	r3, #0
   31df4:	d006      	beq.n	31e04 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   31df6:	687b      	ldr	r3, [r7, #4]
   31df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31dfa:	2208      	movs	r2, #8
   31dfc:	18ba      	adds	r2, r7, r2
   31dfe:	6878      	ldr	r0, [r7, #4]
   31e00:	2103      	movs	r1, #3
   31e02:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   31e04:	687b      	ldr	r3, [r7, #4]
   31e06:	22e0      	movs	r2, #224	; 0xe0
   31e08:	589b      	ldr	r3, [r3, r2]
   31e0a:	3302      	adds	r3, #2
   31e0c:	697a      	ldr	r2, [r7, #20]
   31e0e:	18d2      	adds	r2, r2, r3
   31e10:	687b      	ldr	r3, [r7, #4]
   31e12:	0011      	movs	r1, r2
   31e14:	0018      	movs	r0, r3
   31e16:	4b49      	ldr	r3, [pc, #292]	; (31f3c <_http_client_read_chuked_entity+0x210>)
   31e18:	4798      	blx	r3
				length = (int)module->recved_size;
   31e1a:	687b      	ldr	r3, [r7, #4]
   31e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31e1e:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   31e20:	687b      	ldr	r3, [r7, #4]
   31e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31e24:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   31e26:	687b      	ldr	r3, [r7, #4]
   31e28:	21e0      	movs	r1, #224	; 0xe0
   31e2a:	2201      	movs	r2, #1
   31e2c:	4252      	negs	r2, r2
   31e2e:	505a      	str	r2, [r3, r1]
   31e30:	e07a      	b.n	31f28 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   31e32:	687b      	ldr	r3, [r7, #4]
   31e34:	22e0      	movs	r2, #224	; 0xe0
   31e36:	2100      	movs	r1, #0
   31e38:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   31e3a:	e05a      	b.n	31ef2 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   31e3c:	697b      	ldr	r3, [r7, #20]
   31e3e:	781b      	ldrb	r3, [r3, #0]
   31e40:	2b0a      	cmp	r3, #10
   31e42:	d106      	bne.n	31e52 <_http_client_read_chuked_entity+0x126>
					buffer++;
   31e44:	697b      	ldr	r3, [r7, #20]
   31e46:	3301      	adds	r3, #1
   31e48:	617b      	str	r3, [r7, #20]
					length--;
   31e4a:	69fb      	ldr	r3, [r7, #28]
   31e4c:	3b01      	subs	r3, #1
   31e4e:	61fb      	str	r3, [r7, #28]
					break;
   31e50:	e052      	b.n	31ef8 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   31e52:	69bb      	ldr	r3, [r7, #24]
   31e54:	2b00      	cmp	r3, #0
   31e56:	d145      	bne.n	31ee4 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   31e58:	697b      	ldr	r3, [r7, #20]
   31e5a:	781b      	ldrb	r3, [r3, #0]
   31e5c:	2b2f      	cmp	r3, #47	; 0x2f
   31e5e:	d910      	bls.n	31e82 <_http_client_read_chuked_entity+0x156>
   31e60:	697b      	ldr	r3, [r7, #20]
   31e62:	781b      	ldrb	r3, [r3, #0]
   31e64:	2b39      	cmp	r3, #57	; 0x39
   31e66:	d80c      	bhi.n	31e82 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   31e68:	687b      	ldr	r3, [r7, #4]
   31e6a:	22e0      	movs	r2, #224	; 0xe0
   31e6c:	589b      	ldr	r3, [r3, r2]
   31e6e:	011b      	lsls	r3, r3, #4
   31e70:	697a      	ldr	r2, [r7, #20]
   31e72:	7812      	ldrb	r2, [r2, #0]
   31e74:	189b      	adds	r3, r3, r2
   31e76:	3b30      	subs	r3, #48	; 0x30
   31e78:	001a      	movs	r2, r3
   31e7a:	687b      	ldr	r3, [r7, #4]
   31e7c:	21e0      	movs	r1, #224	; 0xe0
   31e7e:	505a      	str	r2, [r3, r1]
   31e80:	e031      	b.n	31ee6 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   31e82:	697b      	ldr	r3, [r7, #20]
   31e84:	781b      	ldrb	r3, [r3, #0]
   31e86:	2b60      	cmp	r3, #96	; 0x60
   31e88:	d910      	bls.n	31eac <_http_client_read_chuked_entity+0x180>
   31e8a:	697b      	ldr	r3, [r7, #20]
   31e8c:	781b      	ldrb	r3, [r3, #0]
   31e8e:	2b66      	cmp	r3, #102	; 0x66
   31e90:	d80c      	bhi.n	31eac <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   31e92:	687b      	ldr	r3, [r7, #4]
   31e94:	22e0      	movs	r2, #224	; 0xe0
   31e96:	589b      	ldr	r3, [r3, r2]
   31e98:	011b      	lsls	r3, r3, #4
   31e9a:	697a      	ldr	r2, [r7, #20]
   31e9c:	7812      	ldrb	r2, [r2, #0]
   31e9e:	189b      	adds	r3, r3, r2
   31ea0:	3b61      	subs	r3, #97	; 0x61
   31ea2:	001a      	movs	r2, r3
   31ea4:	687b      	ldr	r3, [r7, #4]
   31ea6:	21e0      	movs	r1, #224	; 0xe0
   31ea8:	505a      	str	r2, [r3, r1]
   31eaa:	e01c      	b.n	31ee6 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   31eac:	697b      	ldr	r3, [r7, #20]
   31eae:	781b      	ldrb	r3, [r3, #0]
   31eb0:	2b40      	cmp	r3, #64	; 0x40
   31eb2:	d910      	bls.n	31ed6 <_http_client_read_chuked_entity+0x1aa>
   31eb4:	697b      	ldr	r3, [r7, #20]
   31eb6:	781b      	ldrb	r3, [r3, #0]
   31eb8:	2b46      	cmp	r3, #70	; 0x46
   31eba:	d80c      	bhi.n	31ed6 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   31ebc:	687b      	ldr	r3, [r7, #4]
   31ebe:	22e0      	movs	r2, #224	; 0xe0
   31ec0:	589b      	ldr	r3, [r3, r2]
   31ec2:	011b      	lsls	r3, r3, #4
   31ec4:	697a      	ldr	r2, [r7, #20]
   31ec6:	7812      	ldrb	r2, [r2, #0]
   31ec8:	189b      	adds	r3, r3, r2
   31eca:	3b41      	subs	r3, #65	; 0x41
   31ecc:	001a      	movs	r2, r3
   31ece:	687b      	ldr	r3, [r7, #4]
   31ed0:	21e0      	movs	r1, #224	; 0xe0
   31ed2:	505a      	str	r2, [r3, r1]
   31ed4:	e007      	b.n	31ee6 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   31ed6:	697b      	ldr	r3, [r7, #20]
   31ed8:	781b      	ldrb	r3, [r3, #0]
   31eda:	2b3b      	cmp	r3, #59	; 0x3b
   31edc:	d103      	bne.n	31ee6 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   31ede:	2301      	movs	r3, #1
   31ee0:	61bb      	str	r3, [r7, #24]
   31ee2:	e000      	b.n	31ee6 <_http_client_read_chuked_entity+0x1ba>
					continue;
   31ee4:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   31ee6:	697b      	ldr	r3, [r7, #20]
   31ee8:	3301      	adds	r3, #1
   31eea:	617b      	str	r3, [r7, #20]
   31eec:	69fb      	ldr	r3, [r7, #28]
   31eee:	3b01      	subs	r3, #1
   31ef0:	61fb      	str	r3, [r7, #28]
   31ef2:	69fb      	ldr	r3, [r7, #28]
   31ef4:	2b00      	cmp	r3, #0
   31ef6:	dca1      	bgt.n	31e3c <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   31ef8:	687b      	ldr	r3, [r7, #4]
   31efa:	22e0      	movs	r2, #224	; 0xe0
   31efc:	589a      	ldr	r2, [r3, r2]
   31efe:	687b      	ldr	r3, [r7, #4]
   31f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31f02:	429a      	cmp	r2, r3
   31f04:	dd07      	ble.n	31f16 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   31f06:	238b      	movs	r3, #139	; 0x8b
   31f08:	425a      	negs	r2, r3
   31f0a:	687b      	ldr	r3, [r7, #4]
   31f0c:	0011      	movs	r1, r2
   31f0e:	0018      	movs	r0, r3
   31f10:	4b09      	ldr	r3, [pc, #36]	; (31f38 <_http_client_read_chuked_entity+0x20c>)
   31f12:	4798      	blx	r3
				return;
   31f14:	e00d      	b.n	31f32 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   31f16:	69fb      	ldr	r3, [r7, #28]
   31f18:	2b00      	cmp	r3, #0
   31f1a:	d105      	bne.n	31f28 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   31f1c:	687b      	ldr	r3, [r7, #4]
   31f1e:	21e0      	movs	r1, #224	; 0xe0
   31f20:	2201      	movs	r2, #1
   31f22:	4252      	negs	r2, r2
   31f24:	505a      	str	r2, [r3, r1]
				return;
   31f26:	e004      	b.n	31f32 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   31f28:	687b      	ldr	r3, [r7, #4]
   31f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31f2c:	2b00      	cmp	r3, #0
   31f2e:	d000      	beq.n	31f32 <_http_client_read_chuked_entity+0x206>
   31f30:	e708      	b.n	31d44 <_http_client_read_chuked_entity+0x18>
}
   31f32:	46bd      	mov	sp, r7
   31f34:	b008      	add	sp, #32
   31f36:	bd80      	pop	{r7, pc}
   31f38:	00031105 	.word	0x00031105
   31f3c:	000320ed 	.word	0x000320ed

00031f40 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   31f40:	b580      	push	{r7, lr}
   31f42:	b086      	sub	sp, #24
   31f44:	af00      	add	r7, sp, #0
   31f46:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   31f48:	687b      	ldr	r3, [r7, #4]
   31f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31f4c:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   31f4e:	687b      	ldr	r3, [r7, #4]
   31f50:	22dc      	movs	r2, #220	; 0xdc
   31f52:	589b      	ldr	r3, [r3, r2]
   31f54:	2b00      	cmp	r3, #0
   31f56:	db58      	blt.n	3200a <_http_client_handle_entity+0xca>
   31f58:	687b      	ldr	r3, [r7, #4]
   31f5a:	22dc      	movs	r2, #220	; 0xdc
   31f5c:	589a      	ldr	r2, [r3, r2]
   31f5e:	687b      	ldr	r3, [r7, #4]
   31f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31f62:	429a      	cmp	r2, r3
   31f64:	dc51      	bgt.n	3200a <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   31f66:	687b      	ldr	r3, [r7, #4]
   31f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31f6a:	0019      	movs	r1, r3
   31f6c:	687b      	ldr	r3, [r7, #4]
   31f6e:	22dc      	movs	r2, #220	; 0xdc
   31f70:	589b      	ldr	r3, [r3, r2]
   31f72:	4299      	cmp	r1, r3
   31f74:	da00      	bge.n	31f78 <_http_client_handle_entity+0x38>
   31f76:	e0a9      	b.n	320cc <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   31f78:	687b      	ldr	r3, [r7, #4]
   31f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31f7c:	2b00      	cmp	r3, #0
   31f7e:	d020      	beq.n	31fc2 <_http_client_handle_entity+0x82>
   31f80:	687b      	ldr	r3, [r7, #4]
   31f82:	22e4      	movs	r2, #228	; 0xe4
   31f84:	5a9b      	ldrh	r3, [r3, r2]
   31f86:	2b00      	cmp	r3, #0
   31f88:	d01b      	beq.n	31fc2 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   31f8a:	687b      	ldr	r3, [r7, #4]
   31f8c:	22e4      	movs	r2, #228	; 0xe4
   31f8e:	5a9a      	ldrh	r2, [r3, r2]
   31f90:	2308      	movs	r3, #8
   31f92:	18fb      	adds	r3, r7, r3
   31f94:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   31f96:	2308      	movs	r3, #8
   31f98:	18fb      	adds	r3, r7, r3
   31f9a:	2200      	movs	r2, #0
   31f9c:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   31f9e:	687b      	ldr	r3, [r7, #4]
   31fa0:	22dc      	movs	r2, #220	; 0xdc
   31fa2:	589b      	ldr	r3, [r3, r2]
   31fa4:	001a      	movs	r2, r3
   31fa6:	2308      	movs	r3, #8
   31fa8:	18fb      	adds	r3, r7, r3
   31faa:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   31fac:	2308      	movs	r3, #8
   31fae:	18fb      	adds	r3, r7, r3
   31fb0:	697a      	ldr	r2, [r7, #20]
   31fb2:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   31fb4:	687b      	ldr	r3, [r7, #4]
   31fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31fb8:	2208      	movs	r2, #8
   31fba:	18ba      	adds	r2, r7, r2
   31fbc:	6878      	ldr	r0, [r7, #4]
   31fbe:	2102      	movs	r1, #2
   31fc0:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   31fc2:	687b      	ldr	r3, [r7, #4]
   31fc4:	22d8      	movs	r2, #216	; 0xd8
   31fc6:	2100      	movs	r1, #0
   31fc8:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   31fca:	687b      	ldr	r3, [r7, #4]
   31fcc:	22e4      	movs	r2, #228	; 0xe4
   31fce:	2100      	movs	r1, #0
   31fd0:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   31fd2:	687b      	ldr	r3, [r7, #4]
   31fd4:	2241      	movs	r2, #65	; 0x41
   31fd6:	5c9b      	ldrb	r3, [r3, r2]
   31fd8:	2202      	movs	r2, #2
   31fda:	4013      	ands	r3, r2
   31fdc:	b2db      	uxtb	r3, r3
   31fde:	2b00      	cmp	r3, #0
   31fe0:	d105      	bne.n	31fee <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   31fe2:	687b      	ldr	r3, [r7, #4]
   31fe4:	2100      	movs	r1, #0
   31fe6:	0018      	movs	r0, r3
   31fe8:	4b3b      	ldr	r3, [pc, #236]	; (320d8 <_http_client_handle_entity+0x198>)
   31fea:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   31fec:	e06e      	b.n	320cc <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   31fee:	687b      	ldr	r3, [r7, #4]
   31ff0:	22dc      	movs	r2, #220	; 0xdc
   31ff2:	589b      	ldr	r3, [r3, r2]
   31ff4:	001a      	movs	r2, r3
   31ff6:	697b      	ldr	r3, [r7, #20]
   31ff8:	189a      	adds	r2, r3, r2
   31ffa:	687b      	ldr	r3, [r7, #4]
   31ffc:	0011      	movs	r1, r2
   31ffe:	0018      	movs	r0, r3
   32000:	4b36      	ldr	r3, [pc, #216]	; (320dc <_http_client_handle_entity+0x19c>)
   32002:	4798      	blx	r3
				return module->recved_size;
   32004:	687b      	ldr	r3, [r7, #4]
   32006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32008:	e061      	b.n	320ce <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   3200a:	687b      	ldr	r3, [r7, #4]
   3200c:	22dc      	movs	r2, #220	; 0xdc
   3200e:	589b      	ldr	r3, [r3, r2]
   32010:	2b00      	cmp	r3, #0
   32012:	db57      	blt.n	320c4 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   32014:	687b      	ldr	r3, [r7, #4]
   32016:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   32018:	2308      	movs	r3, #8
   3201a:	18fb      	adds	r3, r7, r3
   3201c:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   3201e:	2308      	movs	r3, #8
   32020:	18fb      	adds	r3, r7, r3
   32022:	697a      	ldr	r2, [r7, #20]
   32024:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   32026:	687b      	ldr	r3, [r7, #4]
   32028:	22e0      	movs	r2, #224	; 0xe0
   3202a:	589a      	ldr	r2, [r3, r2]
   3202c:	687b      	ldr	r3, [r7, #4]
   3202e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32030:	18d2      	adds	r2, r2, r3
   32032:	687b      	ldr	r3, [r7, #4]
   32034:	21e0      	movs	r1, #224	; 0xe0
   32036:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   32038:	687b      	ldr	r3, [r7, #4]
   3203a:	22dc      	movs	r2, #220	; 0xdc
   3203c:	589a      	ldr	r2, [r3, r2]
   3203e:	687b      	ldr	r3, [r7, #4]
   32040:	21e0      	movs	r1, #224	; 0xe0
   32042:	585b      	ldr	r3, [r3, r1]
   32044:	429a      	cmp	r2, r3
   32046:	dc0c      	bgt.n	32062 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   32048:	687b      	ldr	r3, [r7, #4]
   3204a:	22d8      	movs	r2, #216	; 0xd8
   3204c:	2100      	movs	r1, #0
   3204e:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   32050:	687b      	ldr	r3, [r7, #4]
   32052:	22e4      	movs	r2, #228	; 0xe4
   32054:	2100      	movs	r1, #0
   32056:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   32058:	2308      	movs	r3, #8
   3205a:	18fb      	adds	r3, r7, r3
   3205c:	2201      	movs	r2, #1
   3205e:	721a      	strb	r2, [r3, #8]
   32060:	e003      	b.n	3206a <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   32062:	2308      	movs	r3, #8
   32064:	18fb      	adds	r3, r7, r3
   32066:	2200      	movs	r2, #0
   32068:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   3206a:	687b      	ldr	r3, [r7, #4]
   3206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3206e:	2b00      	cmp	r3, #0
   32070:	d006      	beq.n	32080 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32072:	687b      	ldr	r3, [r7, #4]
   32074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32076:	2208      	movs	r2, #8
   32078:	18ba      	adds	r2, r7, r2
   3207a:	6878      	ldr	r0, [r7, #4]
   3207c:	2103      	movs	r1, #3
   3207e:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   32080:	2308      	movs	r3, #8
   32082:	18fb      	adds	r3, r7, r3
   32084:	7a1b      	ldrb	r3, [r3, #8]
   32086:	2b01      	cmp	r3, #1
   32088:	d112      	bne.n	320b0 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   3208a:	687b      	ldr	r3, [r7, #4]
   3208c:	2241      	movs	r2, #65	; 0x41
   3208e:	5c9b      	ldrb	r3, [r3, r2]
   32090:	2202      	movs	r2, #2
   32092:	4013      	ands	r3, r2
   32094:	b2db      	uxtb	r3, r3
   32096:	2b00      	cmp	r3, #0
   32098:	d10a      	bne.n	320b0 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   3209a:	4b11      	ldr	r3, [pc, #68]	; (320e0 <_http_client_handle_entity+0x1a0>)
   3209c:	0018      	movs	r0, r3
   3209e:	4b11      	ldr	r3, [pc, #68]	; (320e4 <_http_client_handle_entity+0x1a4>)
   320a0:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   320a2:	687b      	ldr	r3, [r7, #4]
   320a4:	2100      	movs	r1, #0
   320a6:	0018      	movs	r0, r3
   320a8:	4b0b      	ldr	r3, [pc, #44]	; (320d8 <_http_client_handle_entity+0x198>)
   320aa:	4798      	blx	r3
					return 0;
   320ac:	2300      	movs	r3, #0
   320ae:	e00e      	b.n	320ce <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   320b0:	687b      	ldr	r3, [r7, #4]
   320b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   320b4:	697a      	ldr	r2, [r7, #20]
   320b6:	18d2      	adds	r2, r2, r3
   320b8:	687b      	ldr	r3, [r7, #4]
   320ba:	0011      	movs	r1, r2
   320bc:	0018      	movs	r0, r3
   320be:	4b07      	ldr	r3, [pc, #28]	; (320dc <_http_client_handle_entity+0x19c>)
   320c0:	4798      	blx	r3
   320c2:	e003      	b.n	320cc <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   320c4:	687b      	ldr	r3, [r7, #4]
   320c6:	0018      	movs	r0, r3
   320c8:	4b07      	ldr	r3, [pc, #28]	; (320e8 <_http_client_handle_entity+0x1a8>)
   320ca:	4798      	blx	r3
		}
	}

	return 0;
   320cc:	2300      	movs	r3, #0
}
   320ce:	0018      	movs	r0, r3
   320d0:	46bd      	mov	sp, r7
   320d2:	b006      	add	sp, #24
   320d4:	bd80      	pop	{r7, pc}
   320d6:	46c0      	nop			; (mov r8, r8)
   320d8:	00031105 	.word	0x00031105
   320dc:	000320ed 	.word	0x000320ed
   320e0:	00039d4c 	.word	0x00039d4c
   320e4:	00034aa5 	.word	0x00034aa5
   320e8:	00031d2d 	.word	0x00031d2d

000320ec <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   320ec:	b580      	push	{r7, lr}
   320ee:	b084      	sub	sp, #16
   320f0:	af00      	add	r7, sp, #0
   320f2:	6078      	str	r0, [r7, #4]
   320f4:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   320f6:	687b      	ldr	r3, [r7, #4]
   320f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   320fa:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   320fc:	687b      	ldr	r3, [r7, #4]
   320fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32100:	001a      	movs	r2, r3
   32102:	683b      	ldr	r3, [r7, #0]
   32104:	1ad2      	subs	r2, r2, r3
   32106:	68fb      	ldr	r3, [r7, #12]
   32108:	18d3      	adds	r3, r2, r3
   3210a:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   3210c:	68bb      	ldr	r3, [r7, #8]
   3210e:	2b00      	cmp	r3, #0
   32110:	dd09      	ble.n	32126 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   32112:	68ba      	ldr	r2, [r7, #8]
   32114:	6839      	ldr	r1, [r7, #0]
   32116:	68fb      	ldr	r3, [r7, #12]
   32118:	0018      	movs	r0, r3
   3211a:	4b06      	ldr	r3, [pc, #24]	; (32134 <_http_client_move_buffer+0x48>)
   3211c:	4798      	blx	r3
		module->recved_size = remain;
   3211e:	68ba      	ldr	r2, [r7, #8]
   32120:	687b      	ldr	r3, [r7, #4]
   32122:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   32124:	e002      	b.n	3212c <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   32126:	687b      	ldr	r3, [r7, #4]
   32128:	2200      	movs	r2, #0
   3212a:	645a      	str	r2, [r3, #68]	; 0x44
}
   3212c:	46c0      	nop			; (mov r8, r8)
   3212e:	46bd      	mov	sp, r7
   32130:	b004      	add	sp, #16
   32132:	bd80      	pop	{r7, pc}
   32134:	0003485f 	.word	0x0003485f

00032138 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   32138:	b580      	push	{r7, lr}
   3213a:	b084      	sub	sp, #16
   3213c:	af00      	add	r7, sp, #0
   3213e:	60f8      	str	r0, [r7, #12]
   32140:	60b9      	str	r1, [r7, #8]
   32142:	607a      	str	r2, [r7, #4]
   32144:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   32146:	68fb      	ldr	r3, [r7, #12]
   32148:	687a      	ldr	r2, [r7, #4]
   3214a:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   3214c:	68fb      	ldr	r3, [r7, #12]
   3214e:	68ba      	ldr	r2, [r7, #8]
   32150:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   32152:	68fb      	ldr	r3, [r7, #12]
   32154:	2200      	movs	r2, #0
   32156:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   32158:	68fb      	ldr	r3, [r7, #12]
   3215a:	683a      	ldr	r2, [r7, #0]
   3215c:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   3215e:	68fb      	ldr	r3, [r7, #12]
   32160:	69ba      	ldr	r2, [r7, #24]
   32162:	60da      	str	r2, [r3, #12]
}
   32164:	46c0      	nop			; (mov r8, r8)
   32166:	46bd      	mov	sp, r7
   32168:	b004      	add	sp, #16
   3216a:	bd80      	pop	{r7, pc}

0003216c <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   3216c:	b580      	push	{r7, lr}
   3216e:	b084      	sub	sp, #16
   32170:	af00      	add	r7, sp, #0
   32172:	6078      	str	r0, [r7, #4]
   32174:	000a      	movs	r2, r1
   32176:	1cfb      	adds	r3, r7, #3
   32178:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   3217a:	687b      	ldr	r3, [r7, #4]
   3217c:	681a      	ldr	r2, [r3, #0]
   3217e:	687b      	ldr	r3, [r7, #4]
   32180:	685b      	ldr	r3, [r3, #4]
   32182:	1ad3      	subs	r3, r2, r3
   32184:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   32186:	68fb      	ldr	r3, [r7, #12]
   32188:	2b00      	cmp	r3, #0
   3218a:	dc03      	bgt.n	32194 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   3218c:	687b      	ldr	r3, [r7, #4]
   3218e:	0018      	movs	r0, r3
   32190:	4b08      	ldr	r3, [pc, #32]	; (321b4 <stream_writer_send_8+0x48>)
   32192:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   32194:	687b      	ldr	r3, [r7, #4]
   32196:	6919      	ldr	r1, [r3, #16]
   32198:	687b      	ldr	r3, [r7, #4]
   3219a:	685b      	ldr	r3, [r3, #4]
   3219c:	1c58      	adds	r0, r3, #1
   3219e:	687a      	ldr	r2, [r7, #4]
   321a0:	6050      	str	r0, [r2, #4]
   321a2:	18cb      	adds	r3, r1, r3
   321a4:	1cfa      	adds	r2, r7, #3
   321a6:	7812      	ldrb	r2, [r2, #0]
   321a8:	701a      	strb	r2, [r3, #0]
}
   321aa:	46c0      	nop			; (mov r8, r8)
   321ac:	46bd      	mov	sp, r7
   321ae:	b004      	add	sp, #16
   321b0:	bd80      	pop	{r7, pc}
   321b2:	46c0      	nop			; (mov r8, r8)
   321b4:	000321f5 	.word	0x000321f5

000321b8 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   321b8:	b580      	push	{r7, lr}
   321ba:	b084      	sub	sp, #16
   321bc:	af00      	add	r7, sp, #0
   321be:	60f8      	str	r0, [r7, #12]
   321c0:	60b9      	str	r1, [r7, #8]
   321c2:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   321c4:	e00d      	b.n	321e2 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   321c6:	68bb      	ldr	r3, [r7, #8]
   321c8:	781b      	ldrb	r3, [r3, #0]
   321ca:	b25a      	sxtb	r2, r3
   321cc:	68fb      	ldr	r3, [r7, #12]
   321ce:	0011      	movs	r1, r2
   321d0:	0018      	movs	r0, r3
   321d2:	4b07      	ldr	r3, [pc, #28]	; (321f0 <stream_writer_send_buffer+0x38>)
   321d4:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   321d6:	687b      	ldr	r3, [r7, #4]
   321d8:	3b01      	subs	r3, #1
   321da:	607b      	str	r3, [r7, #4]
   321dc:	68bb      	ldr	r3, [r7, #8]
   321de:	3301      	adds	r3, #1
   321e0:	60bb      	str	r3, [r7, #8]
   321e2:	687b      	ldr	r3, [r7, #4]
   321e4:	2b00      	cmp	r3, #0
   321e6:	d1ee      	bne.n	321c6 <stream_writer_send_buffer+0xe>
	}
}
   321e8:	46c0      	nop			; (mov r8, r8)
   321ea:	46bd      	mov	sp, r7
   321ec:	b004      	add	sp, #16
   321ee:	bd80      	pop	{r7, pc}
   321f0:	0003216d 	.word	0x0003216d

000321f4 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   321f4:	b590      	push	{r4, r7, lr}
   321f6:	b083      	sub	sp, #12
   321f8:	af00      	add	r7, sp, #0
   321fa:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   321fc:	687b      	ldr	r3, [r7, #4]
   321fe:	685b      	ldr	r3, [r3, #4]
   32200:	2b00      	cmp	r3, #0
   32202:	d00c      	beq.n	3221e <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   32204:	687b      	ldr	r3, [r7, #4]
   32206:	689c      	ldr	r4, [r3, #8]
   32208:	687b      	ldr	r3, [r7, #4]
   3220a:	68d8      	ldr	r0, [r3, #12]
   3220c:	687b      	ldr	r3, [r7, #4]
   3220e:	6919      	ldr	r1, [r3, #16]
   32210:	687b      	ldr	r3, [r7, #4]
   32212:	685b      	ldr	r3, [r3, #4]
   32214:	001a      	movs	r2, r3
   32216:	47a0      	blx	r4
		writer->written = 0;
   32218:	687b      	ldr	r3, [r7, #4]
   3221a:	2200      	movs	r2, #0
   3221c:	605a      	str	r2, [r3, #4]
	}
}
   3221e:	46c0      	nop			; (mov r8, r8)
   32220:	46bd      	mov	sp, r7
   32222:	b003      	add	sp, #12
   32224:	bd90      	pop	{r4, r7, pc}
	...

00032228 <system_cpu_clock_get_hz>:
{
   32228:	b580      	push	{r7, lr}
   3222a:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   3222c:	2000      	movs	r0, #0
   3222e:	4b05      	ldr	r3, [pc, #20]	; (32244 <system_cpu_clock_get_hz+0x1c>)
   32230:	4798      	blx	r3
   32232:	0002      	movs	r2, r0
   32234:	4b04      	ldr	r3, [pc, #16]	; (32248 <system_cpu_clock_get_hz+0x20>)
   32236:	7a1b      	ldrb	r3, [r3, #8]
   32238:	b2db      	uxtb	r3, r3
   3223a:	40da      	lsrs	r2, r3
   3223c:	0013      	movs	r3, r2
}
   3223e:	0018      	movs	r0, r3
   32240:	46bd      	mov	sp, r7
   32242:	bd80      	pop	{r7, pc}
   32244:	00029c09 	.word	0x00029c09
   32248:	40000400 	.word	0x40000400

0003224c <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   3224c:	b580      	push	{r7, lr}
   3224e:	b084      	sub	sp, #16
   32250:	af00      	add	r7, sp, #0
   32252:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   32254:	687b      	ldr	r3, [r7, #4]
   32256:	681b      	ldr	r3, [r3, #0]
   32258:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   3225a:	46c0      	nop			; (mov r8, r8)
   3225c:	68fb      	ldr	r3, [r7, #12]
   3225e:	689b      	ldr	r3, [r3, #8]
   32260:	2202      	movs	r2, #2
   32262:	4013      	ands	r3, r2
   32264:	d1fa      	bne.n	3225c <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   32266:	68fb      	ldr	r3, [r7, #12]
   32268:	681b      	ldr	r3, [r3, #0]
   3226a:	2202      	movs	r2, #2
   3226c:	431a      	orrs	r2, r3
   3226e:	68fb      	ldr	r3, [r7, #12]
   32270:	601a      	str	r2, [r3, #0]
}
   32272:	46c0      	nop			; (mov r8, r8)
   32274:	46bd      	mov	sp, r7
   32276:	b004      	add	sp, #16
   32278:	bd80      	pop	{r7, pc}
	...

0003227c <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   3227c:	b580      	push	{r7, lr}
   3227e:	b082      	sub	sp, #8
   32280:	af00      	add	r7, sp, #0
   32282:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   32284:	4b04      	ldr	r3, [pc, #16]	; (32298 <sw_timer_tcc_callback+0x1c>)
   32286:	681b      	ldr	r3, [r3, #0]
   32288:	1c5a      	adds	r2, r3, #1
   3228a:	4b03      	ldr	r3, [pc, #12]	; (32298 <sw_timer_tcc_callback+0x1c>)
   3228c:	601a      	str	r2, [r3, #0]
}
   3228e:	46c0      	nop			; (mov r8, r8)
   32290:	46bd      	mov	sp, r7
   32292:	b002      	add	sp, #8
   32294:	bd80      	pop	{r7, pc}
   32296:	46c0      	nop			; (mov r8, r8)
   32298:	2000470c 	.word	0x2000470c

0003229c <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   3229c:	b580      	push	{r7, lr}
   3229e:	b082      	sub	sp, #8
   322a0:	af00      	add	r7, sp, #0
   322a2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   322a4:	687b      	ldr	r3, [r7, #4]
   322a6:	2264      	movs	r2, #100	; 0x64
   322a8:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   322aa:	687b      	ldr	r3, [r7, #4]
   322ac:	2200      	movs	r2, #0
   322ae:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   322b0:	687b      	ldr	r3, [r7, #4]
   322b2:	2200      	movs	r2, #0
   322b4:	705a      	strb	r2, [r3, #1]
}
   322b6:	46c0      	nop			; (mov r8, r8)
   322b8:	46bd      	mov	sp, r7
   322ba:	b002      	add	sp, #8
   322bc:	bd80      	pop	{r7, pc}
	...

000322c0 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   322c0:	b590      	push	{r4, r7, lr}
   322c2:	b0b1      	sub	sp, #196	; 0xc4
   322c4:	af00      	add	r7, sp, #0
   322c6:	6078      	str	r0, [r7, #4]
   322c8:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   322ca:	230c      	movs	r3, #12
   322cc:	18fb      	adds	r3, r7, r3
   322ce:	4a2e      	ldr	r2, [pc, #184]	; (32388 <sw_timer_init+0xc8>)
   322d0:	ca13      	ldmia	r2!, {r0, r1, r4}
   322d2:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   322d4:	683b      	ldr	r3, [r7, #0]
   322d6:	885b      	ldrh	r3, [r3, #2]
   322d8:	001a      	movs	r2, r3
   322da:	687b      	ldr	r3, [r7, #4]
   322dc:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   322de:	687b      	ldr	r3, [r7, #4]
   322e0:	3314      	adds	r3, #20
   322e2:	22bc      	movs	r2, #188	; 0xbc
   322e4:	18ba      	adds	r2, r7, r2
   322e6:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   322e8:	683b      	ldr	r3, [r7, #0]
   322ea:	781b      	ldrb	r3, [r3, #0]
   322ec:	001a      	movs	r2, r3
   322ee:	230c      	movs	r3, #12
   322f0:	18fb      	adds	r3, r7, r3
   322f2:	0092      	lsls	r2, r2, #2
   322f4:	58d2      	ldr	r2, [r2, r3]
   322f6:	2318      	movs	r3, #24
   322f8:	18fb      	adds	r3, r7, r3
   322fa:	0011      	movs	r1, r2
   322fc:	0018      	movs	r0, r3
   322fe:	4b23      	ldr	r3, [pc, #140]	; (3238c <sw_timer_init+0xcc>)
   32300:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   32302:	4b23      	ldr	r3, [pc, #140]	; (32390 <sw_timer_init+0xd0>)
   32304:	4798      	blx	r3
   32306:	0004      	movs	r4, r0
   32308:	683b      	ldr	r3, [r7, #0]
   3230a:	885b      	ldrh	r3, [r3, #2]
   3230c:	001a      	movs	r2, r3
   3230e:	4b21      	ldr	r3, [pc, #132]	; (32394 <sw_timer_init+0xd4>)
   32310:	0011      	movs	r1, r2
   32312:	22fa      	movs	r2, #250	; 0xfa
   32314:	0210      	lsls	r0, r2, #8
   32316:	4798      	blx	r3
   32318:	0003      	movs	r3, r0
   3231a:	001a      	movs	r2, r3
   3231c:	4b1e      	ldr	r3, [pc, #120]	; (32398 <sw_timer_init+0xd8>)
   3231e:	0011      	movs	r1, r2
   32320:	0020      	movs	r0, r4
   32322:	4798      	blx	r3
   32324:	0003      	movs	r3, r0
   32326:	001a      	movs	r2, r3
   32328:	2318      	movs	r3, #24
   3232a:	18fb      	adds	r3, r7, r3
   3232c:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   3232e:	2318      	movs	r3, #24
   32330:	18fb      	adds	r3, r7, r3
   32332:	2205      	movs	r2, #5
   32334:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   32336:	683b      	ldr	r3, [r7, #0]
   32338:	781b      	ldrb	r3, [r3, #0]
   3233a:	001a      	movs	r2, r3
   3233c:	230c      	movs	r3, #12
   3233e:	18fb      	adds	r3, r7, r3
   32340:	0092      	lsls	r2, r2, #2
   32342:	58d1      	ldr	r1, [r2, r3]
   32344:	2318      	movs	r3, #24
   32346:	18fa      	adds	r2, r7, r3
   32348:	23bc      	movs	r3, #188	; 0xbc
   3234a:	18fb      	adds	r3, r7, r3
   3234c:	681b      	ldr	r3, [r3, #0]
   3234e:	0018      	movs	r0, r3
   32350:	4b12      	ldr	r3, [pc, #72]	; (3239c <sw_timer_init+0xdc>)
   32352:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   32354:	683b      	ldr	r3, [r7, #0]
   32356:	785b      	ldrb	r3, [r3, #1]
   32358:	3308      	adds	r3, #8
   3235a:	b2da      	uxtb	r2, r3
   3235c:	4910      	ldr	r1, [pc, #64]	; (323a0 <sw_timer_init+0xe0>)
   3235e:	23bc      	movs	r3, #188	; 0xbc
   32360:	18fb      	adds	r3, r7, r3
   32362:	681b      	ldr	r3, [r3, #0]
   32364:	0018      	movs	r0, r3
   32366:	4b0f      	ldr	r3, [pc, #60]	; (323a4 <sw_timer_init+0xe4>)
   32368:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   3236a:	683b      	ldr	r3, [r7, #0]
   3236c:	785b      	ldrb	r3, [r3, #1]
   3236e:	3308      	adds	r3, #8
   32370:	b2da      	uxtb	r2, r3
   32372:	23bc      	movs	r3, #188	; 0xbc
   32374:	18fb      	adds	r3, r7, r3
   32376:	681b      	ldr	r3, [r3, #0]
   32378:	0011      	movs	r1, r2
   3237a:	0018      	movs	r0, r3
   3237c:	4b0a      	ldr	r3, [pc, #40]	; (323a8 <sw_timer_init+0xe8>)
   3237e:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   32380:	46c0      	nop			; (mov r8, r8)
   32382:	46bd      	mov	sp, r7
   32384:	b031      	add	sp, #196	; 0xc4
   32386:	bd90      	pop	{r4, r7, pc}
   32388:	00039d8c 	.word	0x00039d8c
   3238c:	0002a1a1 	.word	0x0002a1a1
   32390:	00032229 	.word	0x00032229
   32394:	00032919 	.word	0x00032919
   32398:	00032805 	.word	0x00032805
   3239c:	0002a7fd 	.word	0x0002a7fd
   323a0:	0003227d 	.word	0x0003227d
   323a4:	0002ac15 	.word	0x0002ac15
   323a8:	0002ac55 	.word	0x0002ac55

000323ac <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   323ac:	b580      	push	{r7, lr}
   323ae:	b084      	sub	sp, #16
   323b0:	af00      	add	r7, sp, #0
   323b2:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   323b4:	687b      	ldr	r3, [r7, #4]
   323b6:	3314      	adds	r3, #20
   323b8:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   323ba:	68fb      	ldr	r3, [r7, #12]
   323bc:	0018      	movs	r0, r3
   323be:	4b03      	ldr	r3, [pc, #12]	; (323cc <sw_timer_enable+0x20>)
   323c0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   323c2:	46c0      	nop			; (mov r8, r8)
   323c4:	46bd      	mov	sp, r7
   323c6:	b004      	add	sp, #16
   323c8:	bd80      	pop	{r7, pc}
   323ca:	46c0      	nop			; (mov r8, r8)
   323cc:	0003224d 	.word	0x0003224d

000323d0 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   323d0:	b580      	push	{r7, lr}
   323d2:	b086      	sub	sp, #24
   323d4:	af00      	add	r7, sp, #0
   323d6:	60f8      	str	r0, [r7, #12]
   323d8:	60b9      	str	r1, [r7, #8]
   323da:	607a      	str	r2, [r7, #4]
   323dc:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   323de:	2300      	movs	r3, #0
   323e0:	617b      	str	r3, [r7, #20]
   323e2:	e032      	b.n	3244a <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   323e4:	68f9      	ldr	r1, [r7, #12]
   323e6:	697a      	ldr	r2, [r7, #20]
   323e8:	0013      	movs	r3, r2
   323ea:	009b      	lsls	r3, r3, #2
   323ec:	189b      	adds	r3, r3, r2
   323ee:	009b      	lsls	r3, r3, #2
   323f0:	5c5b      	ldrb	r3, [r3, r1]
   323f2:	07db      	lsls	r3, r3, #31
   323f4:	0fdb      	lsrs	r3, r3, #31
   323f6:	b2db      	uxtb	r3, r3
   323f8:	2b00      	cmp	r3, #0
   323fa:	d123      	bne.n	32444 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   323fc:	697a      	ldr	r2, [r7, #20]
   323fe:	0013      	movs	r3, r2
   32400:	009b      	lsls	r3, r3, #2
   32402:	189b      	adds	r3, r3, r2
   32404:	009b      	lsls	r3, r3, #2
   32406:	68fa      	ldr	r2, [r7, #12]
   32408:	18d3      	adds	r3, r2, r3
   3240a:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   3240c:	693b      	ldr	r3, [r7, #16]
   3240e:	68ba      	ldr	r2, [r7, #8]
   32410:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   32412:	693b      	ldr	r3, [r7, #16]
   32414:	781a      	ldrb	r2, [r3, #0]
   32416:	2102      	movs	r1, #2
   32418:	438a      	bics	r2, r1
   3241a:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   3241c:	693b      	ldr	r3, [r7, #16]
   3241e:	687a      	ldr	r2, [r7, #4]
   32420:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   32422:	68fb      	ldr	r3, [r7, #12]
   32424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   32426:	4b0d      	ldr	r3, [pc, #52]	; (3245c <sw_timer_register_callback+0x8c>)
   32428:	0011      	movs	r1, r2
   3242a:	6838      	ldr	r0, [r7, #0]
   3242c:	4798      	blx	r3
   3242e:	0003      	movs	r3, r0
   32430:	001a      	movs	r2, r3
   32432:	693b      	ldr	r3, [r7, #16]
   32434:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   32436:	693b      	ldr	r3, [r7, #16]
   32438:	781a      	ldrb	r2, [r3, #0]
   3243a:	2101      	movs	r1, #1
   3243c:	430a      	orrs	r2, r1
   3243e:	701a      	strb	r2, [r3, #0]
			return index;
   32440:	697b      	ldr	r3, [r7, #20]
   32442:	e007      	b.n	32454 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   32444:	697b      	ldr	r3, [r7, #20]
   32446:	3301      	adds	r3, #1
   32448:	617b      	str	r3, [r7, #20]
   3244a:	697b      	ldr	r3, [r7, #20]
   3244c:	2b00      	cmp	r3, #0
   3244e:	ddc9      	ble.n	323e4 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   32450:	2301      	movs	r3, #1
   32452:	425b      	negs	r3, r3
}
   32454:	0018      	movs	r0, r3
   32456:	46bd      	mov	sp, r7
   32458:	b006      	add	sp, #24
   3245a:	bd80      	pop	{r7, pc}
   3245c:	00032805 	.word	0x00032805

00032460 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   32460:	b580      	push	{r7, lr}
   32462:	b086      	sub	sp, #24
   32464:	af00      	add	r7, sp, #0
   32466:	60f8      	str	r0, [r7, #12]
   32468:	60b9      	str	r1, [r7, #8]
   3246a:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   3246c:	68ba      	ldr	r2, [r7, #8]
   3246e:	0013      	movs	r3, r2
   32470:	009b      	lsls	r3, r3, #2
   32472:	189b      	adds	r3, r3, r2
   32474:	009b      	lsls	r3, r3, #2
   32476:	68fa      	ldr	r2, [r7, #12]
   32478:	18d3      	adds	r3, r2, r3
   3247a:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   3247c:	697b      	ldr	r3, [r7, #20]
   3247e:	781a      	ldrb	r2, [r3, #0]
   32480:	2102      	movs	r1, #2
   32482:	430a      	orrs	r2, r1
   32484:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   32486:	68fb      	ldr	r3, [r7, #12]
   32488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   3248a:	4b07      	ldr	r3, [pc, #28]	; (324a8 <sw_timer_enable_callback+0x48>)
   3248c:	0011      	movs	r1, r2
   3248e:	6878      	ldr	r0, [r7, #4]
   32490:	4798      	blx	r3
   32492:	0003      	movs	r3, r0
   32494:	001a      	movs	r2, r3
   32496:	4b05      	ldr	r3, [pc, #20]	; (324ac <sw_timer_enable_callback+0x4c>)
   32498:	681b      	ldr	r3, [r3, #0]
   3249a:	18d2      	adds	r2, r2, r3
   3249c:	697b      	ldr	r3, [r7, #20]
   3249e:	611a      	str	r2, [r3, #16]
}
   324a0:	46c0      	nop			; (mov r8, r8)
   324a2:	46bd      	mov	sp, r7
   324a4:	b006      	add	sp, #24
   324a6:	bd80      	pop	{r7, pc}
   324a8:	00032805 	.word	0x00032805
   324ac:	2000470c 	.word	0x2000470c

000324b0 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   324b0:	b580      	push	{r7, lr}
   324b2:	b084      	sub	sp, #16
   324b4:	af00      	add	r7, sp, #0
   324b6:	6078      	str	r0, [r7, #4]
   324b8:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   324ba:	683a      	ldr	r2, [r7, #0]
   324bc:	0013      	movs	r3, r2
   324be:	009b      	lsls	r3, r3, #2
   324c0:	189b      	adds	r3, r3, r2
   324c2:	009b      	lsls	r3, r3, #2
   324c4:	687a      	ldr	r2, [r7, #4]
   324c6:	18d3      	adds	r3, r2, r3
   324c8:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   324ca:	68fb      	ldr	r3, [r7, #12]
   324cc:	781a      	ldrb	r2, [r3, #0]
   324ce:	2102      	movs	r1, #2
   324d0:	438a      	bics	r2, r1
   324d2:	701a      	strb	r2, [r3, #0]
}
   324d4:	46c0      	nop			; (mov r8, r8)
   324d6:	46bd      	mov	sp, r7
   324d8:	b004      	add	sp, #16
   324da:	bd80      	pop	{r7, pc}

000324dc <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   324dc:	b590      	push	{r4, r7, lr}
   324de:	b085      	sub	sp, #20
   324e0:	af00      	add	r7, sp, #0
   324e2:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   324e4:	2300      	movs	r3, #0
   324e6:	60fb      	str	r3, [r7, #12]
   324e8:	e053      	b.n	32592 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   324ea:	6879      	ldr	r1, [r7, #4]
   324ec:	68fa      	ldr	r2, [r7, #12]
   324ee:	0013      	movs	r3, r2
   324f0:	009b      	lsls	r3, r3, #2
   324f2:	189b      	adds	r3, r3, r2
   324f4:	009b      	lsls	r3, r3, #2
   324f6:	5c5b      	ldrb	r3, [r3, r1]
   324f8:	07db      	lsls	r3, r3, #31
   324fa:	0fdb      	lsrs	r3, r3, #31
   324fc:	b2db      	uxtb	r3, r3
   324fe:	2b00      	cmp	r3, #0
   32500:	d044      	beq.n	3258c <sw_timer_task+0xb0>
   32502:	6879      	ldr	r1, [r7, #4]
   32504:	68fa      	ldr	r2, [r7, #12]
   32506:	0013      	movs	r3, r2
   32508:	009b      	lsls	r3, r3, #2
   3250a:	189b      	adds	r3, r3, r2
   3250c:	009b      	lsls	r3, r3, #2
   3250e:	5c5b      	ldrb	r3, [r3, r1]
   32510:	079b      	lsls	r3, r3, #30
   32512:	0fdb      	lsrs	r3, r3, #31
   32514:	b2db      	uxtb	r3, r3
   32516:	2b00      	cmp	r3, #0
   32518:	d038      	beq.n	3258c <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   3251a:	68fa      	ldr	r2, [r7, #12]
   3251c:	0013      	movs	r3, r2
   3251e:	009b      	lsls	r3, r3, #2
   32520:	189b      	adds	r3, r3, r2
   32522:	009b      	lsls	r3, r3, #2
   32524:	687a      	ldr	r2, [r7, #4]
   32526:	18d3      	adds	r3, r2, r3
   32528:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   3252a:	68bb      	ldr	r3, [r7, #8]
   3252c:	691a      	ldr	r2, [r3, #16]
   3252e:	4b1c      	ldr	r3, [pc, #112]	; (325a0 <sw_timer_task+0xc4>)
   32530:	681b      	ldr	r3, [r3, #0]
   32532:	1ad3      	subs	r3, r2, r3
   32534:	d52a      	bpl.n	3258c <sw_timer_task+0xb0>
   32536:	68bb      	ldr	r3, [r7, #8]
   32538:	781b      	ldrb	r3, [r3, #0]
   3253a:	2204      	movs	r2, #4
   3253c:	4013      	ands	r3, r2
   3253e:	b2db      	uxtb	r3, r3
   32540:	2b00      	cmp	r3, #0
   32542:	d123      	bne.n	3258c <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   32544:	68bb      	ldr	r3, [r7, #8]
   32546:	781a      	ldrb	r2, [r3, #0]
   32548:	2104      	movs	r1, #4
   3254a:	430a      	orrs	r2, r1
   3254c:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   3254e:	68bb      	ldr	r3, [r7, #8]
   32550:	68db      	ldr	r3, [r3, #12]
   32552:	2b00      	cmp	r3, #0
   32554:	d007      	beq.n	32566 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   32556:	68bb      	ldr	r3, [r7, #8]
   32558:	68da      	ldr	r2, [r3, #12]
   3255a:	4b11      	ldr	r3, [pc, #68]	; (325a0 <sw_timer_task+0xc4>)
   3255c:	681b      	ldr	r3, [r3, #0]
   3255e:	18d2      	adds	r2, r2, r3
   32560:	68bb      	ldr	r3, [r7, #8]
   32562:	611a      	str	r2, [r3, #16]
   32564:	e004      	b.n	32570 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   32566:	68bb      	ldr	r3, [r7, #8]
   32568:	781a      	ldrb	r2, [r3, #0]
   3256a:	2102      	movs	r1, #2
   3256c:	438a      	bics	r2, r1
   3256e:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   32570:	68bb      	ldr	r3, [r7, #8]
   32572:	685c      	ldr	r4, [r3, #4]
   32574:	68bb      	ldr	r3, [r7, #8]
   32576:	689a      	ldr	r2, [r3, #8]
   32578:	68bb      	ldr	r3, [r7, #8]
   3257a:	68db      	ldr	r3, [r3, #12]
   3257c:	68f9      	ldr	r1, [r7, #12]
   3257e:	6878      	ldr	r0, [r7, #4]
   32580:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   32582:	68bb      	ldr	r3, [r7, #8]
   32584:	781a      	ldrb	r2, [r3, #0]
   32586:	2104      	movs	r1, #4
   32588:	438a      	bics	r2, r1
   3258a:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3258c:	68fb      	ldr	r3, [r7, #12]
   3258e:	3301      	adds	r3, #1
   32590:	60fb      	str	r3, [r7, #12]
   32592:	68fb      	ldr	r3, [r7, #12]
   32594:	2b00      	cmp	r3, #0
   32596:	dda8      	ble.n	324ea <sw_timer_task+0xe>
			}
		}
	}
}
   32598:	46c0      	nop			; (mov r8, r8)
   3259a:	46bd      	mov	sp, r7
   3259c:	b005      	add	sp, #20
   3259e:	bd90      	pop	{r4, r7, pc}
   325a0:	2000470c 	.word	0x2000470c

000325a4 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   325a4:	b580      	push	{r7, lr}
   325a6:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   325a8:	4b06      	ldr	r3, [pc, #24]	; (325c4 <main+0x20>)
   325aa:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   325ac:	4b06      	ldr	r3, [pc, #24]	; (325c8 <main+0x24>)
   325ae:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   325b0:	2001      	movs	r0, #1
   325b2:	4b06      	ldr	r3, [pc, #24]	; (325cc <main+0x28>)
   325b4:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   325b6:	4b06      	ldr	r3, [pc, #24]	; (325d0 <main+0x2c>)
   325b8:	4798      	blx	r3

    return 0;  // Will not get here
   325ba:	2300      	movs	r3, #0
}
   325bc:	0018      	movs	r0, r3
   325be:	46bd      	mov	sp, r7
   325c0:	bd80      	pop	{r7, pc}
   325c2:	46c0      	nop			; (mov r8, r8)
   325c4:	0002a095 	.word	0x0002a095
   325c8:	0001dc75 	.word	0x0001dc75
   325cc:	00018349 	.word	0x00018349
   325d0:	0001c2cd 	.word	0x0001c2cd

000325d4 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   325d4:	b580      	push	{r7, lr}
   325d6:	b082      	sub	sp, #8
   325d8:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n-----ESE516 Main Program-----\r\n");
   325da:	4b22      	ldr	r3, [pc, #136]	; (32664 <vApplicationDaemonTaskStartupHook+0x90>)
   325dc:	0018      	movs	r0, r3
   325de:	4b22      	ldr	r3, [pc, #136]	; (32668 <vApplicationDaemonTaskStartupHook+0x94>)
   325e0:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\nInitialize HW...\r\n");
   325e2:	4b22      	ldr	r3, [pc, #136]	; (3266c <vApplicationDaemonTaskStartupHook+0x98>)
   325e4:	0018      	movs	r0, r3
   325e6:	4b20      	ldr	r3, [pc, #128]	; (32668 <vApplicationDaemonTaskStartupHook+0x94>)
   325e8:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   325ea:	4b21      	ldr	r3, [pc, #132]	; (32670 <vApplicationDaemonTaskStartupHook+0x9c>)
   325ec:	4798      	blx	r3
   325ee:	1e03      	subs	r3, r0, #0
   325f0:	d004      	beq.n	325fc <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   325f2:	4b20      	ldr	r3, [pc, #128]	; (32674 <vApplicationDaemonTaskStartupHook+0xa0>)
   325f4:	0018      	movs	r0, r3
   325f6:	4b1c      	ldr	r3, [pc, #112]	; (32668 <vApplicationDaemonTaskStartupHook+0x94>)
   325f8:	4798      	blx	r3
   325fa:	e003      	b.n	32604 <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   325fc:	4b1e      	ldr	r3, [pc, #120]	; (32678 <vApplicationDaemonTaskStartupHook+0xa4>)
   325fe:	0018      	movs	r0, r3
   32600:	4b19      	ldr	r3, [pc, #100]	; (32668 <vApplicationDaemonTaskStartupHook+0x94>)
   32602:	4798      	blx	r3
        //SerialConsoleWriteString("Error initializing Seesaw!\r\n");
    //} else {
        //SerialConsoleWriteString("Initialized Seesaw!\r\n");
    //}

    uint8_t whoamI = 0;
   32604:	1dfb      	adds	r3, r7, #7
   32606:	2200      	movs	r2, #0
   32608:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   3260a:	4b1c      	ldr	r3, [pc, #112]	; (3267c <vApplicationDaemonTaskStartupHook+0xa8>)
   3260c:	4798      	blx	r3
   3260e:	0002      	movs	r2, r0
   32610:	1dfb      	adds	r3, r7, #7
   32612:	0019      	movs	r1, r3
   32614:	0010      	movs	r0, r2
   32616:	4b1a      	ldr	r3, [pc, #104]	; (32680 <vApplicationDaemonTaskStartupHook+0xac>)
   32618:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   3261a:	1dfb      	adds	r3, r7, #7
   3261c:	781b      	ldrb	r3, [r3, #0]
   3261e:	2b6c      	cmp	r3, #108	; 0x6c
   32620:	d004      	beq.n	3262c <vApplicationDaemonTaskStartupHook+0x58>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   32622:	4b18      	ldr	r3, [pc, #96]	; (32684 <vApplicationDaemonTaskStartupHook+0xb0>)
   32624:	0018      	movs	r0, r3
   32626:	4b10      	ldr	r3, [pc, #64]	; (32668 <vApplicationDaemonTaskStartupHook+0x94>)
   32628:	4798      	blx	r3
   3262a:	e010      	b.n	3264e <vApplicationDaemonTaskStartupHook+0x7a>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   3262c:	4b16      	ldr	r3, [pc, #88]	; (32688 <vApplicationDaemonTaskStartupHook+0xb4>)
   3262e:	0018      	movs	r0, r3
   32630:	4b0d      	ldr	r3, [pc, #52]	; (32668 <vApplicationDaemonTaskStartupHook+0x94>)
   32632:	4798      	blx	r3
        if (InitImu() == 0) {
   32634:	4b15      	ldr	r3, [pc, #84]	; (3268c <vApplicationDaemonTaskStartupHook+0xb8>)
   32636:	4798      	blx	r3
   32638:	1e03      	subs	r3, r0, #0
   3263a:	d104      	bne.n	32646 <vApplicationDaemonTaskStartupHook+0x72>
            SerialConsoleWriteString("IMU initialized!\r\n");
   3263c:	4b14      	ldr	r3, [pc, #80]	; (32690 <vApplicationDaemonTaskStartupHook+0xbc>)
   3263e:	0018      	movs	r0, r3
   32640:	4b09      	ldr	r3, [pc, #36]	; (32668 <vApplicationDaemonTaskStartupHook+0x94>)
   32642:	4798      	blx	r3
   32644:	e003      	b.n	3264e <vApplicationDaemonTaskStartupHook+0x7a>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   32646:	4b13      	ldr	r3, [pc, #76]	; (32694 <vApplicationDaemonTaskStartupHook+0xc0>)
   32648:	0018      	movs	r0, r3
   3264a:	4b07      	ldr	r3, [pc, #28]	; (32668 <vApplicationDaemonTaskStartupHook+0x94>)
   3264c:	4798      	blx	r3
	//commented by Derek
    //SerialConsoleWriteString("Initializing distance sensor\r\n");
    //InitializeDistanceSensor();
    //SerialConsoleWriteString("Distance sensor initialized\r\n");

    StartTasks();
   3264e:	4b12      	ldr	r3, [pc, #72]	; (32698 <vApplicationDaemonTaskStartupHook+0xc4>)
   32650:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   32652:	4b12      	ldr	r3, [pc, #72]	; (3269c <vApplicationDaemonTaskStartupHook+0xc8>)
   32654:	681b      	ldr	r3, [r3, #0]
   32656:	0018      	movs	r0, r3
   32658:	4b11      	ldr	r3, [pc, #68]	; (326a0 <vApplicationDaemonTaskStartupHook+0xcc>)
   3265a:	4798      	blx	r3
}
   3265c:	46c0      	nop			; (mov r8, r8)
   3265e:	46bd      	mov	sp, r7
   32660:	b002      	add	sp, #8
   32662:	bd80      	pop	{r7, pc}
   32664:	00039d98 	.word	0x00039d98
   32668:	0001dce5 	.word	0x0001dce5
   3266c:	00039dbc 	.word	0x00039dbc
   32670:	000142bd 	.word	0x000142bd
   32674:	00039dd4 	.word	0x00039dd4
   32678:	00039df8 	.word	0x00039df8
   3267c:	000154e5 	.word	0x000154e5
   32680:	00015029 	.word	0x00015029
   32684:	00039e14 	.word	0x00039e14
   32688:	00039e28 	.word	0x00039e28
   3268c:	000154f5 	.word	0x000154f5
   32690:	00039e38 	.word	0x00039e38
   32694:	00039e4c 	.word	0x00039e4c
   32698:	000326a5 	.word	0x000326a5
   3269c:	20004714 	.word	0x20004714
   326a0:	0001c171 	.word	0x0001c171

000326a4 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   326a4:	b590      	push	{r4, r7, lr}
   326a6:	b083      	sub	sp, #12
   326a8:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d", xPortGetFreeHeapSize());
   326aa:	4b35      	ldr	r3, [pc, #212]	; (32780 <StartTasks+0xdc>)
   326ac:	4798      	blx	r3
   326ae:	0003      	movs	r3, r0
   326b0:	4a34      	ldr	r2, [pc, #208]	; (32784 <StartTasks+0xe0>)
   326b2:	4835      	ldr	r0, [pc, #212]	; (32788 <StartTasks+0xe4>)
   326b4:	2140      	movs	r1, #64	; 0x40
   326b6:	4c35      	ldr	r4, [pc, #212]	; (3278c <StartTasks+0xe8>)
   326b8:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   326ba:	4b33      	ldr	r3, [pc, #204]	; (32788 <StartTasks+0xe4>)
   326bc:	0018      	movs	r0, r3
   326be:	4b34      	ldr	r3, [pc, #208]	; (32790 <StartTasks+0xec>)
   326c0:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   326c2:	23c8      	movs	r3, #200	; 0xc8
   326c4:	005a      	lsls	r2, r3, #1
   326c6:	4933      	ldr	r1, [pc, #204]	; (32794 <StartTasks+0xf0>)
   326c8:	4833      	ldr	r0, [pc, #204]	; (32798 <StartTasks+0xf4>)
   326ca:	4b34      	ldr	r3, [pc, #208]	; (3279c <StartTasks+0xf8>)
   326cc:	9301      	str	r3, [sp, #4]
   326ce:	2304      	movs	r3, #4
   326d0:	9300      	str	r3, [sp, #0]
   326d2:	2300      	movs	r3, #0
   326d4:	4c32      	ldr	r4, [pc, #200]	; (327a0 <StartTasks+0xfc>)
   326d6:	47a0      	blx	r4
   326d8:	0003      	movs	r3, r0
   326da:	2b01      	cmp	r3, #1
   326dc:	d003      	beq.n	326e6 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   326de:	4b31      	ldr	r3, [pc, #196]	; (327a4 <StartTasks+0x100>)
   326e0:	0018      	movs	r0, r3
   326e2:	4b2b      	ldr	r3, [pc, #172]	; (32790 <StartTasks+0xec>)
   326e4:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n\r\n", xPortGetFreeHeapSize());
   326e6:	4b26      	ldr	r3, [pc, #152]	; (32780 <StartTasks+0xdc>)
   326e8:	4798      	blx	r3
   326ea:	0003      	movs	r3, r0
   326ec:	4a2e      	ldr	r2, [pc, #184]	; (327a8 <StartTasks+0x104>)
   326ee:	4826      	ldr	r0, [pc, #152]	; (32788 <StartTasks+0xe4>)
   326f0:	2140      	movs	r1, #64	; 0x40
   326f2:	4c26      	ldr	r4, [pc, #152]	; (3278c <StartTasks+0xe8>)
   326f4:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   326f6:	4b24      	ldr	r3, [pc, #144]	; (32788 <StartTasks+0xe4>)
   326f8:	0018      	movs	r0, r3
   326fa:	4b25      	ldr	r3, [pc, #148]	; (32790 <StartTasks+0xec>)
   326fc:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   326fe:	23c8      	movs	r3, #200	; 0xc8
   32700:	005a      	lsls	r2, r3, #1
   32702:	492a      	ldr	r1, [pc, #168]	; (327ac <StartTasks+0x108>)
   32704:	482a      	ldr	r0, [pc, #168]	; (327b0 <StartTasks+0x10c>)
   32706:	4b2b      	ldr	r3, [pc, #172]	; (327b4 <StartTasks+0x110>)
   32708:	9301      	str	r3, [sp, #4]
   3270a:	2304      	movs	r3, #4
   3270c:	9300      	str	r3, [sp, #0]
   3270e:	2300      	movs	r3, #0
   32710:	4c23      	ldr	r4, [pc, #140]	; (327a0 <StartTasks+0xfc>)
   32712:	47a0      	blx	r4
   32714:	0003      	movs	r3, r0
   32716:	2b01      	cmp	r3, #1
   32718:	d003      	beq.n	32722 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   3271a:	4b27      	ldr	r3, [pc, #156]	; (327b8 <StartTasks+0x114>)
   3271c:	0018      	movs	r0, r3
   3271e:	4b1c      	ldr	r3, [pc, #112]	; (32790 <StartTasks+0xec>)
   32720:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n\r\n", xPortGetFreeHeapSize());
   32722:	4b17      	ldr	r3, [pc, #92]	; (32780 <StartTasks+0xdc>)
   32724:	4798      	blx	r3
   32726:	0003      	movs	r3, r0
   32728:	4a24      	ldr	r2, [pc, #144]	; (327bc <StartTasks+0x118>)
   3272a:	4817      	ldr	r0, [pc, #92]	; (32788 <StartTasks+0xe4>)
   3272c:	2140      	movs	r1, #64	; 0x40
   3272e:	4c17      	ldr	r4, [pc, #92]	; (3278c <StartTasks+0xe8>)
   32730:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32732:	4b15      	ldr	r3, [pc, #84]	; (32788 <StartTasks+0xe4>)
   32734:	0018      	movs	r0, r3
   32736:	4b16      	ldr	r3, [pc, #88]	; (32790 <StartTasks+0xec>)
   32738:	4798      	blx	r3
        //SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
    //}
    //snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n\r\n", xPortGetFreeHeapSize());
    //SerialConsoleWriteString(bufferPrint);
	
	if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   3273a:	23fa      	movs	r3, #250	; 0xfa
   3273c:	009a      	lsls	r2, r3, #2
   3273e:	4920      	ldr	r1, [pc, #128]	; (327c0 <StartTasks+0x11c>)
   32740:	4820      	ldr	r0, [pc, #128]	; (327c4 <StartTasks+0x120>)
   32742:	4b21      	ldr	r3, [pc, #132]	; (327c8 <StartTasks+0x124>)
   32744:	9301      	str	r3, [sp, #4]
   32746:	2303      	movs	r3, #3
   32748:	9300      	str	r3, [sp, #0]
   3274a:	2300      	movs	r3, #0
   3274c:	4c14      	ldr	r4, [pc, #80]	; (327a0 <StartTasks+0xfc>)
   3274e:	47a0      	blx	r4
   32750:	0003      	movs	r3, r0
   32752:	2b01      	cmp	r3, #1
   32754:	d003      	beq.n	3275e <StartTasks+0xba>
		SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   32756:	4b1d      	ldr	r3, [pc, #116]	; (327cc <StartTasks+0x128>)
   32758:	0018      	movs	r0, r3
   3275a:	4b0d      	ldr	r3, [pc, #52]	; (32790 <StartTasks+0xec>)
   3275c:	4798      	blx	r3
	}
	snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   3275e:	4b08      	ldr	r3, [pc, #32]	; (32780 <StartTasks+0xdc>)
   32760:	4798      	blx	r3
   32762:	0003      	movs	r3, r0
   32764:	4a1a      	ldr	r2, [pc, #104]	; (327d0 <StartTasks+0x12c>)
   32766:	4808      	ldr	r0, [pc, #32]	; (32788 <StartTasks+0xe4>)
   32768:	2140      	movs	r1, #64	; 0x40
   3276a:	4c08      	ldr	r4, [pc, #32]	; (3278c <StartTasks+0xe8>)
   3276c:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   3276e:	4b06      	ldr	r3, [pc, #24]	; (32788 <StartTasks+0xe4>)
   32770:	0018      	movs	r0, r3
   32772:	4b07      	ldr	r3, [pc, #28]	; (32790 <StartTasks+0xec>)
   32774:	4798      	blx	r3
}
   32776:	46c0      	nop			; (mov r8, r8)
   32778:	46bd      	mov	sp, r7
   3277a:	b001      	add	sp, #4
   3277c:	bd90      	pop	{r4, r7, pc}
   3277e:	46c0      	nop			; (mov r8, r8)
   32780:	0001a2b1 	.word	0x0001a2b1
   32784:	00039e68 	.word	0x00039e68
   32788:	20005c4c 	.word	0x20005c4c
   3278c:	00034add 	.word	0x00034add
   32790:	0001dce5 	.word	0x0001dce5
   32794:	00039e88 	.word	0x00039e88
   32798:	00013819 	.word	0x00013819
   3279c:	20004710 	.word	0x20004710
   327a0:	0001bcf5 	.word	0x0001bcf5
   327a4:	00039e94 	.word	0x00039e94
   327a8:	00039ec0 	.word	0x00039ec0
   327ac:	00039ee0 	.word	0x00039ee0
   327b0:	000157b1 	.word	0x000157b1
   327b4:	2000471c 	.word	0x2000471c
   327b8:	00039ee8 	.word	0x00039ee8
   327bc:	00039f14 	.word	0x00039f14
   327c0:	00039f38 	.word	0x00039f38
   327c4:	00017155 	.word	0x00017155
   327c8:	20004718 	.word	0x20004718
   327cc:	00039f44 	.word	0x00039f44
   327d0:	00039f70 	.word	0x00039f70

000327d4 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   327d4:	b580      	push	{r7, lr}
   327d6:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   327d8:	4b02      	ldr	r3, [pc, #8]	; (327e4 <vApplicationMallocFailedHook+0x10>)
   327da:	0018      	movs	r0, r3
   327dc:	4b02      	ldr	r3, [pc, #8]	; (327e8 <vApplicationMallocFailedHook+0x14>)
   327de:	4798      	blx	r3
    while (1)
   327e0:	e7fe      	b.n	327e0 <vApplicationMallocFailedHook+0xc>
   327e2:	46c0      	nop			; (mov r8, r8)
   327e4:	00039f90 	.word	0x00039f90
   327e8:	0001dce5 	.word	0x0001dce5

000327ec <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   327ec:	b580      	push	{r7, lr}
   327ee:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   327f0:	4b02      	ldr	r3, [pc, #8]	; (327fc <vApplicationStackOverflowHook+0x10>)
   327f2:	0018      	movs	r0, r3
   327f4:	4b02      	ldr	r3, [pc, #8]	; (32800 <vApplicationStackOverflowHook+0x14>)
   327f6:	4798      	blx	r3
    while (1)
   327f8:	e7fe      	b.n	327f8 <vApplicationStackOverflowHook+0xc>
   327fa:	46c0      	nop			; (mov r8, r8)
   327fc:	00039fbc 	.word	0x00039fbc
   32800:	0001dce5 	.word	0x0001dce5

00032804 <__udivsi3>:
   32804:	2200      	movs	r2, #0
   32806:	0843      	lsrs	r3, r0, #1
   32808:	428b      	cmp	r3, r1
   3280a:	d374      	bcc.n	328f6 <__udivsi3+0xf2>
   3280c:	0903      	lsrs	r3, r0, #4
   3280e:	428b      	cmp	r3, r1
   32810:	d35f      	bcc.n	328d2 <__udivsi3+0xce>
   32812:	0a03      	lsrs	r3, r0, #8
   32814:	428b      	cmp	r3, r1
   32816:	d344      	bcc.n	328a2 <__udivsi3+0x9e>
   32818:	0b03      	lsrs	r3, r0, #12
   3281a:	428b      	cmp	r3, r1
   3281c:	d328      	bcc.n	32870 <__udivsi3+0x6c>
   3281e:	0c03      	lsrs	r3, r0, #16
   32820:	428b      	cmp	r3, r1
   32822:	d30d      	bcc.n	32840 <__udivsi3+0x3c>
   32824:	22ff      	movs	r2, #255	; 0xff
   32826:	0209      	lsls	r1, r1, #8
   32828:	ba12      	rev	r2, r2
   3282a:	0c03      	lsrs	r3, r0, #16
   3282c:	428b      	cmp	r3, r1
   3282e:	d302      	bcc.n	32836 <__udivsi3+0x32>
   32830:	1212      	asrs	r2, r2, #8
   32832:	0209      	lsls	r1, r1, #8
   32834:	d065      	beq.n	32902 <__udivsi3+0xfe>
   32836:	0b03      	lsrs	r3, r0, #12
   32838:	428b      	cmp	r3, r1
   3283a:	d319      	bcc.n	32870 <__udivsi3+0x6c>
   3283c:	e000      	b.n	32840 <__udivsi3+0x3c>
   3283e:	0a09      	lsrs	r1, r1, #8
   32840:	0bc3      	lsrs	r3, r0, #15
   32842:	428b      	cmp	r3, r1
   32844:	d301      	bcc.n	3284a <__udivsi3+0x46>
   32846:	03cb      	lsls	r3, r1, #15
   32848:	1ac0      	subs	r0, r0, r3
   3284a:	4152      	adcs	r2, r2
   3284c:	0b83      	lsrs	r3, r0, #14
   3284e:	428b      	cmp	r3, r1
   32850:	d301      	bcc.n	32856 <__udivsi3+0x52>
   32852:	038b      	lsls	r3, r1, #14
   32854:	1ac0      	subs	r0, r0, r3
   32856:	4152      	adcs	r2, r2
   32858:	0b43      	lsrs	r3, r0, #13
   3285a:	428b      	cmp	r3, r1
   3285c:	d301      	bcc.n	32862 <__udivsi3+0x5e>
   3285e:	034b      	lsls	r3, r1, #13
   32860:	1ac0      	subs	r0, r0, r3
   32862:	4152      	adcs	r2, r2
   32864:	0b03      	lsrs	r3, r0, #12
   32866:	428b      	cmp	r3, r1
   32868:	d301      	bcc.n	3286e <__udivsi3+0x6a>
   3286a:	030b      	lsls	r3, r1, #12
   3286c:	1ac0      	subs	r0, r0, r3
   3286e:	4152      	adcs	r2, r2
   32870:	0ac3      	lsrs	r3, r0, #11
   32872:	428b      	cmp	r3, r1
   32874:	d301      	bcc.n	3287a <__udivsi3+0x76>
   32876:	02cb      	lsls	r3, r1, #11
   32878:	1ac0      	subs	r0, r0, r3
   3287a:	4152      	adcs	r2, r2
   3287c:	0a83      	lsrs	r3, r0, #10
   3287e:	428b      	cmp	r3, r1
   32880:	d301      	bcc.n	32886 <__udivsi3+0x82>
   32882:	028b      	lsls	r3, r1, #10
   32884:	1ac0      	subs	r0, r0, r3
   32886:	4152      	adcs	r2, r2
   32888:	0a43      	lsrs	r3, r0, #9
   3288a:	428b      	cmp	r3, r1
   3288c:	d301      	bcc.n	32892 <__udivsi3+0x8e>
   3288e:	024b      	lsls	r3, r1, #9
   32890:	1ac0      	subs	r0, r0, r3
   32892:	4152      	adcs	r2, r2
   32894:	0a03      	lsrs	r3, r0, #8
   32896:	428b      	cmp	r3, r1
   32898:	d301      	bcc.n	3289e <__udivsi3+0x9a>
   3289a:	020b      	lsls	r3, r1, #8
   3289c:	1ac0      	subs	r0, r0, r3
   3289e:	4152      	adcs	r2, r2
   328a0:	d2cd      	bcs.n	3283e <__udivsi3+0x3a>
   328a2:	09c3      	lsrs	r3, r0, #7
   328a4:	428b      	cmp	r3, r1
   328a6:	d301      	bcc.n	328ac <__udivsi3+0xa8>
   328a8:	01cb      	lsls	r3, r1, #7
   328aa:	1ac0      	subs	r0, r0, r3
   328ac:	4152      	adcs	r2, r2
   328ae:	0983      	lsrs	r3, r0, #6
   328b0:	428b      	cmp	r3, r1
   328b2:	d301      	bcc.n	328b8 <__udivsi3+0xb4>
   328b4:	018b      	lsls	r3, r1, #6
   328b6:	1ac0      	subs	r0, r0, r3
   328b8:	4152      	adcs	r2, r2
   328ba:	0943      	lsrs	r3, r0, #5
   328bc:	428b      	cmp	r3, r1
   328be:	d301      	bcc.n	328c4 <__udivsi3+0xc0>
   328c0:	014b      	lsls	r3, r1, #5
   328c2:	1ac0      	subs	r0, r0, r3
   328c4:	4152      	adcs	r2, r2
   328c6:	0903      	lsrs	r3, r0, #4
   328c8:	428b      	cmp	r3, r1
   328ca:	d301      	bcc.n	328d0 <__udivsi3+0xcc>
   328cc:	010b      	lsls	r3, r1, #4
   328ce:	1ac0      	subs	r0, r0, r3
   328d0:	4152      	adcs	r2, r2
   328d2:	08c3      	lsrs	r3, r0, #3
   328d4:	428b      	cmp	r3, r1
   328d6:	d301      	bcc.n	328dc <__udivsi3+0xd8>
   328d8:	00cb      	lsls	r3, r1, #3
   328da:	1ac0      	subs	r0, r0, r3
   328dc:	4152      	adcs	r2, r2
   328de:	0883      	lsrs	r3, r0, #2
   328e0:	428b      	cmp	r3, r1
   328e2:	d301      	bcc.n	328e8 <__udivsi3+0xe4>
   328e4:	008b      	lsls	r3, r1, #2
   328e6:	1ac0      	subs	r0, r0, r3
   328e8:	4152      	adcs	r2, r2
   328ea:	0843      	lsrs	r3, r0, #1
   328ec:	428b      	cmp	r3, r1
   328ee:	d301      	bcc.n	328f4 <__udivsi3+0xf0>
   328f0:	004b      	lsls	r3, r1, #1
   328f2:	1ac0      	subs	r0, r0, r3
   328f4:	4152      	adcs	r2, r2
   328f6:	1a41      	subs	r1, r0, r1
   328f8:	d200      	bcs.n	328fc <__udivsi3+0xf8>
   328fa:	4601      	mov	r1, r0
   328fc:	4152      	adcs	r2, r2
   328fe:	4610      	mov	r0, r2
   32900:	4770      	bx	lr
   32902:	e7ff      	b.n	32904 <__udivsi3+0x100>
   32904:	b501      	push	{r0, lr}
   32906:	2000      	movs	r0, #0
   32908:	f000 f8f0 	bl	32aec <__aeabi_idiv0>
   3290c:	bd02      	pop	{r1, pc}
   3290e:	46c0      	nop			; (mov r8, r8)

00032910 <__aeabi_uidivmod>:
   32910:	2900      	cmp	r1, #0
   32912:	d0f7      	beq.n	32904 <__udivsi3+0x100>
   32914:	e776      	b.n	32804 <__udivsi3>
   32916:	4770      	bx	lr

00032918 <__divsi3>:
   32918:	4603      	mov	r3, r0
   3291a:	430b      	orrs	r3, r1
   3291c:	d47f      	bmi.n	32a1e <__divsi3+0x106>
   3291e:	2200      	movs	r2, #0
   32920:	0843      	lsrs	r3, r0, #1
   32922:	428b      	cmp	r3, r1
   32924:	d374      	bcc.n	32a10 <__divsi3+0xf8>
   32926:	0903      	lsrs	r3, r0, #4
   32928:	428b      	cmp	r3, r1
   3292a:	d35f      	bcc.n	329ec <__divsi3+0xd4>
   3292c:	0a03      	lsrs	r3, r0, #8
   3292e:	428b      	cmp	r3, r1
   32930:	d344      	bcc.n	329bc <__divsi3+0xa4>
   32932:	0b03      	lsrs	r3, r0, #12
   32934:	428b      	cmp	r3, r1
   32936:	d328      	bcc.n	3298a <__divsi3+0x72>
   32938:	0c03      	lsrs	r3, r0, #16
   3293a:	428b      	cmp	r3, r1
   3293c:	d30d      	bcc.n	3295a <__divsi3+0x42>
   3293e:	22ff      	movs	r2, #255	; 0xff
   32940:	0209      	lsls	r1, r1, #8
   32942:	ba12      	rev	r2, r2
   32944:	0c03      	lsrs	r3, r0, #16
   32946:	428b      	cmp	r3, r1
   32948:	d302      	bcc.n	32950 <__divsi3+0x38>
   3294a:	1212      	asrs	r2, r2, #8
   3294c:	0209      	lsls	r1, r1, #8
   3294e:	d065      	beq.n	32a1c <__divsi3+0x104>
   32950:	0b03      	lsrs	r3, r0, #12
   32952:	428b      	cmp	r3, r1
   32954:	d319      	bcc.n	3298a <__divsi3+0x72>
   32956:	e000      	b.n	3295a <__divsi3+0x42>
   32958:	0a09      	lsrs	r1, r1, #8
   3295a:	0bc3      	lsrs	r3, r0, #15
   3295c:	428b      	cmp	r3, r1
   3295e:	d301      	bcc.n	32964 <__divsi3+0x4c>
   32960:	03cb      	lsls	r3, r1, #15
   32962:	1ac0      	subs	r0, r0, r3
   32964:	4152      	adcs	r2, r2
   32966:	0b83      	lsrs	r3, r0, #14
   32968:	428b      	cmp	r3, r1
   3296a:	d301      	bcc.n	32970 <__divsi3+0x58>
   3296c:	038b      	lsls	r3, r1, #14
   3296e:	1ac0      	subs	r0, r0, r3
   32970:	4152      	adcs	r2, r2
   32972:	0b43      	lsrs	r3, r0, #13
   32974:	428b      	cmp	r3, r1
   32976:	d301      	bcc.n	3297c <__divsi3+0x64>
   32978:	034b      	lsls	r3, r1, #13
   3297a:	1ac0      	subs	r0, r0, r3
   3297c:	4152      	adcs	r2, r2
   3297e:	0b03      	lsrs	r3, r0, #12
   32980:	428b      	cmp	r3, r1
   32982:	d301      	bcc.n	32988 <__divsi3+0x70>
   32984:	030b      	lsls	r3, r1, #12
   32986:	1ac0      	subs	r0, r0, r3
   32988:	4152      	adcs	r2, r2
   3298a:	0ac3      	lsrs	r3, r0, #11
   3298c:	428b      	cmp	r3, r1
   3298e:	d301      	bcc.n	32994 <__divsi3+0x7c>
   32990:	02cb      	lsls	r3, r1, #11
   32992:	1ac0      	subs	r0, r0, r3
   32994:	4152      	adcs	r2, r2
   32996:	0a83      	lsrs	r3, r0, #10
   32998:	428b      	cmp	r3, r1
   3299a:	d301      	bcc.n	329a0 <__divsi3+0x88>
   3299c:	028b      	lsls	r3, r1, #10
   3299e:	1ac0      	subs	r0, r0, r3
   329a0:	4152      	adcs	r2, r2
   329a2:	0a43      	lsrs	r3, r0, #9
   329a4:	428b      	cmp	r3, r1
   329a6:	d301      	bcc.n	329ac <__divsi3+0x94>
   329a8:	024b      	lsls	r3, r1, #9
   329aa:	1ac0      	subs	r0, r0, r3
   329ac:	4152      	adcs	r2, r2
   329ae:	0a03      	lsrs	r3, r0, #8
   329b0:	428b      	cmp	r3, r1
   329b2:	d301      	bcc.n	329b8 <__divsi3+0xa0>
   329b4:	020b      	lsls	r3, r1, #8
   329b6:	1ac0      	subs	r0, r0, r3
   329b8:	4152      	adcs	r2, r2
   329ba:	d2cd      	bcs.n	32958 <__divsi3+0x40>
   329bc:	09c3      	lsrs	r3, r0, #7
   329be:	428b      	cmp	r3, r1
   329c0:	d301      	bcc.n	329c6 <__divsi3+0xae>
   329c2:	01cb      	lsls	r3, r1, #7
   329c4:	1ac0      	subs	r0, r0, r3
   329c6:	4152      	adcs	r2, r2
   329c8:	0983      	lsrs	r3, r0, #6
   329ca:	428b      	cmp	r3, r1
   329cc:	d301      	bcc.n	329d2 <__divsi3+0xba>
   329ce:	018b      	lsls	r3, r1, #6
   329d0:	1ac0      	subs	r0, r0, r3
   329d2:	4152      	adcs	r2, r2
   329d4:	0943      	lsrs	r3, r0, #5
   329d6:	428b      	cmp	r3, r1
   329d8:	d301      	bcc.n	329de <__divsi3+0xc6>
   329da:	014b      	lsls	r3, r1, #5
   329dc:	1ac0      	subs	r0, r0, r3
   329de:	4152      	adcs	r2, r2
   329e0:	0903      	lsrs	r3, r0, #4
   329e2:	428b      	cmp	r3, r1
   329e4:	d301      	bcc.n	329ea <__divsi3+0xd2>
   329e6:	010b      	lsls	r3, r1, #4
   329e8:	1ac0      	subs	r0, r0, r3
   329ea:	4152      	adcs	r2, r2
   329ec:	08c3      	lsrs	r3, r0, #3
   329ee:	428b      	cmp	r3, r1
   329f0:	d301      	bcc.n	329f6 <__divsi3+0xde>
   329f2:	00cb      	lsls	r3, r1, #3
   329f4:	1ac0      	subs	r0, r0, r3
   329f6:	4152      	adcs	r2, r2
   329f8:	0883      	lsrs	r3, r0, #2
   329fa:	428b      	cmp	r3, r1
   329fc:	d301      	bcc.n	32a02 <__divsi3+0xea>
   329fe:	008b      	lsls	r3, r1, #2
   32a00:	1ac0      	subs	r0, r0, r3
   32a02:	4152      	adcs	r2, r2
   32a04:	0843      	lsrs	r3, r0, #1
   32a06:	428b      	cmp	r3, r1
   32a08:	d301      	bcc.n	32a0e <__divsi3+0xf6>
   32a0a:	004b      	lsls	r3, r1, #1
   32a0c:	1ac0      	subs	r0, r0, r3
   32a0e:	4152      	adcs	r2, r2
   32a10:	1a41      	subs	r1, r0, r1
   32a12:	d200      	bcs.n	32a16 <__divsi3+0xfe>
   32a14:	4601      	mov	r1, r0
   32a16:	4152      	adcs	r2, r2
   32a18:	4610      	mov	r0, r2
   32a1a:	4770      	bx	lr
   32a1c:	e05d      	b.n	32ada <__divsi3+0x1c2>
   32a1e:	0fca      	lsrs	r2, r1, #31
   32a20:	d000      	beq.n	32a24 <__divsi3+0x10c>
   32a22:	4249      	negs	r1, r1
   32a24:	1003      	asrs	r3, r0, #32
   32a26:	d300      	bcc.n	32a2a <__divsi3+0x112>
   32a28:	4240      	negs	r0, r0
   32a2a:	4053      	eors	r3, r2
   32a2c:	2200      	movs	r2, #0
   32a2e:	469c      	mov	ip, r3
   32a30:	0903      	lsrs	r3, r0, #4
   32a32:	428b      	cmp	r3, r1
   32a34:	d32d      	bcc.n	32a92 <__divsi3+0x17a>
   32a36:	0a03      	lsrs	r3, r0, #8
   32a38:	428b      	cmp	r3, r1
   32a3a:	d312      	bcc.n	32a62 <__divsi3+0x14a>
   32a3c:	22fc      	movs	r2, #252	; 0xfc
   32a3e:	0189      	lsls	r1, r1, #6
   32a40:	ba12      	rev	r2, r2
   32a42:	0a03      	lsrs	r3, r0, #8
   32a44:	428b      	cmp	r3, r1
   32a46:	d30c      	bcc.n	32a62 <__divsi3+0x14a>
   32a48:	0189      	lsls	r1, r1, #6
   32a4a:	1192      	asrs	r2, r2, #6
   32a4c:	428b      	cmp	r3, r1
   32a4e:	d308      	bcc.n	32a62 <__divsi3+0x14a>
   32a50:	0189      	lsls	r1, r1, #6
   32a52:	1192      	asrs	r2, r2, #6
   32a54:	428b      	cmp	r3, r1
   32a56:	d304      	bcc.n	32a62 <__divsi3+0x14a>
   32a58:	0189      	lsls	r1, r1, #6
   32a5a:	d03a      	beq.n	32ad2 <__divsi3+0x1ba>
   32a5c:	1192      	asrs	r2, r2, #6
   32a5e:	e000      	b.n	32a62 <__divsi3+0x14a>
   32a60:	0989      	lsrs	r1, r1, #6
   32a62:	09c3      	lsrs	r3, r0, #7
   32a64:	428b      	cmp	r3, r1
   32a66:	d301      	bcc.n	32a6c <__divsi3+0x154>
   32a68:	01cb      	lsls	r3, r1, #7
   32a6a:	1ac0      	subs	r0, r0, r3
   32a6c:	4152      	adcs	r2, r2
   32a6e:	0983      	lsrs	r3, r0, #6
   32a70:	428b      	cmp	r3, r1
   32a72:	d301      	bcc.n	32a78 <__divsi3+0x160>
   32a74:	018b      	lsls	r3, r1, #6
   32a76:	1ac0      	subs	r0, r0, r3
   32a78:	4152      	adcs	r2, r2
   32a7a:	0943      	lsrs	r3, r0, #5
   32a7c:	428b      	cmp	r3, r1
   32a7e:	d301      	bcc.n	32a84 <__divsi3+0x16c>
   32a80:	014b      	lsls	r3, r1, #5
   32a82:	1ac0      	subs	r0, r0, r3
   32a84:	4152      	adcs	r2, r2
   32a86:	0903      	lsrs	r3, r0, #4
   32a88:	428b      	cmp	r3, r1
   32a8a:	d301      	bcc.n	32a90 <__divsi3+0x178>
   32a8c:	010b      	lsls	r3, r1, #4
   32a8e:	1ac0      	subs	r0, r0, r3
   32a90:	4152      	adcs	r2, r2
   32a92:	08c3      	lsrs	r3, r0, #3
   32a94:	428b      	cmp	r3, r1
   32a96:	d301      	bcc.n	32a9c <__divsi3+0x184>
   32a98:	00cb      	lsls	r3, r1, #3
   32a9a:	1ac0      	subs	r0, r0, r3
   32a9c:	4152      	adcs	r2, r2
   32a9e:	0883      	lsrs	r3, r0, #2
   32aa0:	428b      	cmp	r3, r1
   32aa2:	d301      	bcc.n	32aa8 <__divsi3+0x190>
   32aa4:	008b      	lsls	r3, r1, #2
   32aa6:	1ac0      	subs	r0, r0, r3
   32aa8:	4152      	adcs	r2, r2
   32aaa:	d2d9      	bcs.n	32a60 <__divsi3+0x148>
   32aac:	0843      	lsrs	r3, r0, #1
   32aae:	428b      	cmp	r3, r1
   32ab0:	d301      	bcc.n	32ab6 <__divsi3+0x19e>
   32ab2:	004b      	lsls	r3, r1, #1
   32ab4:	1ac0      	subs	r0, r0, r3
   32ab6:	4152      	adcs	r2, r2
   32ab8:	1a41      	subs	r1, r0, r1
   32aba:	d200      	bcs.n	32abe <__divsi3+0x1a6>
   32abc:	4601      	mov	r1, r0
   32abe:	4663      	mov	r3, ip
   32ac0:	4152      	adcs	r2, r2
   32ac2:	105b      	asrs	r3, r3, #1
   32ac4:	4610      	mov	r0, r2
   32ac6:	d301      	bcc.n	32acc <__divsi3+0x1b4>
   32ac8:	4240      	negs	r0, r0
   32aca:	2b00      	cmp	r3, #0
   32acc:	d500      	bpl.n	32ad0 <__divsi3+0x1b8>
   32ace:	4249      	negs	r1, r1
   32ad0:	4770      	bx	lr
   32ad2:	4663      	mov	r3, ip
   32ad4:	105b      	asrs	r3, r3, #1
   32ad6:	d300      	bcc.n	32ada <__divsi3+0x1c2>
   32ad8:	4240      	negs	r0, r0
   32ada:	b501      	push	{r0, lr}
   32adc:	2000      	movs	r0, #0
   32ade:	f000 f805 	bl	32aec <__aeabi_idiv0>
   32ae2:	bd02      	pop	{r1, pc}

00032ae4 <__aeabi_idivmod>:
   32ae4:	2900      	cmp	r1, #0
   32ae6:	d0f8      	beq.n	32ada <__divsi3+0x1c2>
   32ae8:	e716      	b.n	32918 <__divsi3>
   32aea:	4770      	bx	lr

00032aec <__aeabi_idiv0>:
   32aec:	4770      	bx	lr
   32aee:	46c0      	nop			; (mov r8, r8)

00032af0 <__aeabi_lmul>:
   32af0:	b5f0      	push	{r4, r5, r6, r7, lr}
   32af2:	46ce      	mov	lr, r9
   32af4:	4647      	mov	r7, r8
   32af6:	0415      	lsls	r5, r2, #16
   32af8:	0c2d      	lsrs	r5, r5, #16
   32afa:	002e      	movs	r6, r5
   32afc:	b580      	push	{r7, lr}
   32afe:	0407      	lsls	r7, r0, #16
   32b00:	0c14      	lsrs	r4, r2, #16
   32b02:	0c3f      	lsrs	r7, r7, #16
   32b04:	4699      	mov	r9, r3
   32b06:	0c03      	lsrs	r3, r0, #16
   32b08:	437e      	muls	r6, r7
   32b0a:	435d      	muls	r5, r3
   32b0c:	4367      	muls	r7, r4
   32b0e:	4363      	muls	r3, r4
   32b10:	197f      	adds	r7, r7, r5
   32b12:	0c34      	lsrs	r4, r6, #16
   32b14:	19e4      	adds	r4, r4, r7
   32b16:	469c      	mov	ip, r3
   32b18:	42a5      	cmp	r5, r4
   32b1a:	d903      	bls.n	32b24 <__aeabi_lmul+0x34>
   32b1c:	2380      	movs	r3, #128	; 0x80
   32b1e:	025b      	lsls	r3, r3, #9
   32b20:	4698      	mov	r8, r3
   32b22:	44c4      	add	ip, r8
   32b24:	464b      	mov	r3, r9
   32b26:	4351      	muls	r1, r2
   32b28:	4343      	muls	r3, r0
   32b2a:	0436      	lsls	r6, r6, #16
   32b2c:	0c36      	lsrs	r6, r6, #16
   32b2e:	0c25      	lsrs	r5, r4, #16
   32b30:	0424      	lsls	r4, r4, #16
   32b32:	4465      	add	r5, ip
   32b34:	19a4      	adds	r4, r4, r6
   32b36:	1859      	adds	r1, r3, r1
   32b38:	1949      	adds	r1, r1, r5
   32b3a:	0020      	movs	r0, r4
   32b3c:	bc0c      	pop	{r2, r3}
   32b3e:	4690      	mov	r8, r2
   32b40:	4699      	mov	r9, r3
   32b42:	bdf0      	pop	{r4, r5, r6, r7, pc}

00032b44 <__aeabi_fmul>:
   32b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32b46:	4657      	mov	r7, sl
   32b48:	464e      	mov	r6, r9
   32b4a:	4645      	mov	r5, r8
   32b4c:	46de      	mov	lr, fp
   32b4e:	b5e0      	push	{r5, r6, r7, lr}
   32b50:	0247      	lsls	r7, r0, #9
   32b52:	0046      	lsls	r6, r0, #1
   32b54:	4688      	mov	r8, r1
   32b56:	0a7f      	lsrs	r7, r7, #9
   32b58:	0e36      	lsrs	r6, r6, #24
   32b5a:	0fc4      	lsrs	r4, r0, #31
   32b5c:	2e00      	cmp	r6, #0
   32b5e:	d047      	beq.n	32bf0 <__aeabi_fmul+0xac>
   32b60:	2eff      	cmp	r6, #255	; 0xff
   32b62:	d024      	beq.n	32bae <__aeabi_fmul+0x6a>
   32b64:	00fb      	lsls	r3, r7, #3
   32b66:	2780      	movs	r7, #128	; 0x80
   32b68:	04ff      	lsls	r7, r7, #19
   32b6a:	431f      	orrs	r7, r3
   32b6c:	2300      	movs	r3, #0
   32b6e:	4699      	mov	r9, r3
   32b70:	469a      	mov	sl, r3
   32b72:	3e7f      	subs	r6, #127	; 0x7f
   32b74:	4643      	mov	r3, r8
   32b76:	025d      	lsls	r5, r3, #9
   32b78:	0058      	lsls	r0, r3, #1
   32b7a:	0fdb      	lsrs	r3, r3, #31
   32b7c:	0a6d      	lsrs	r5, r5, #9
   32b7e:	0e00      	lsrs	r0, r0, #24
   32b80:	4698      	mov	r8, r3
   32b82:	d043      	beq.n	32c0c <__aeabi_fmul+0xc8>
   32b84:	28ff      	cmp	r0, #255	; 0xff
   32b86:	d03b      	beq.n	32c00 <__aeabi_fmul+0xbc>
   32b88:	00eb      	lsls	r3, r5, #3
   32b8a:	2580      	movs	r5, #128	; 0x80
   32b8c:	2200      	movs	r2, #0
   32b8e:	04ed      	lsls	r5, r5, #19
   32b90:	431d      	orrs	r5, r3
   32b92:	387f      	subs	r0, #127	; 0x7f
   32b94:	1836      	adds	r6, r6, r0
   32b96:	1c73      	adds	r3, r6, #1
   32b98:	4641      	mov	r1, r8
   32b9a:	469b      	mov	fp, r3
   32b9c:	464b      	mov	r3, r9
   32b9e:	4061      	eors	r1, r4
   32ba0:	4313      	orrs	r3, r2
   32ba2:	2b0f      	cmp	r3, #15
   32ba4:	d864      	bhi.n	32c70 <__aeabi_fmul+0x12c>
   32ba6:	4875      	ldr	r0, [pc, #468]	; (32d7c <__aeabi_fmul+0x238>)
   32ba8:	009b      	lsls	r3, r3, #2
   32baa:	58c3      	ldr	r3, [r0, r3]
   32bac:	469f      	mov	pc, r3
   32bae:	2f00      	cmp	r7, #0
   32bb0:	d142      	bne.n	32c38 <__aeabi_fmul+0xf4>
   32bb2:	2308      	movs	r3, #8
   32bb4:	4699      	mov	r9, r3
   32bb6:	3b06      	subs	r3, #6
   32bb8:	26ff      	movs	r6, #255	; 0xff
   32bba:	469a      	mov	sl, r3
   32bbc:	e7da      	b.n	32b74 <__aeabi_fmul+0x30>
   32bbe:	4641      	mov	r1, r8
   32bc0:	2a02      	cmp	r2, #2
   32bc2:	d028      	beq.n	32c16 <__aeabi_fmul+0xd2>
   32bc4:	2a03      	cmp	r2, #3
   32bc6:	d100      	bne.n	32bca <__aeabi_fmul+0x86>
   32bc8:	e0ce      	b.n	32d68 <__aeabi_fmul+0x224>
   32bca:	2a01      	cmp	r2, #1
   32bcc:	d000      	beq.n	32bd0 <__aeabi_fmul+0x8c>
   32bce:	e0ac      	b.n	32d2a <__aeabi_fmul+0x1e6>
   32bd0:	4011      	ands	r1, r2
   32bd2:	2000      	movs	r0, #0
   32bd4:	2200      	movs	r2, #0
   32bd6:	b2cc      	uxtb	r4, r1
   32bd8:	0240      	lsls	r0, r0, #9
   32bda:	05d2      	lsls	r2, r2, #23
   32bdc:	0a40      	lsrs	r0, r0, #9
   32bde:	07e4      	lsls	r4, r4, #31
   32be0:	4310      	orrs	r0, r2
   32be2:	4320      	orrs	r0, r4
   32be4:	bc3c      	pop	{r2, r3, r4, r5}
   32be6:	4690      	mov	r8, r2
   32be8:	4699      	mov	r9, r3
   32bea:	46a2      	mov	sl, r4
   32bec:	46ab      	mov	fp, r5
   32bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32bf0:	2f00      	cmp	r7, #0
   32bf2:	d115      	bne.n	32c20 <__aeabi_fmul+0xdc>
   32bf4:	2304      	movs	r3, #4
   32bf6:	4699      	mov	r9, r3
   32bf8:	3b03      	subs	r3, #3
   32bfa:	2600      	movs	r6, #0
   32bfc:	469a      	mov	sl, r3
   32bfe:	e7b9      	b.n	32b74 <__aeabi_fmul+0x30>
   32c00:	20ff      	movs	r0, #255	; 0xff
   32c02:	2202      	movs	r2, #2
   32c04:	2d00      	cmp	r5, #0
   32c06:	d0c5      	beq.n	32b94 <__aeabi_fmul+0x50>
   32c08:	2203      	movs	r2, #3
   32c0a:	e7c3      	b.n	32b94 <__aeabi_fmul+0x50>
   32c0c:	2d00      	cmp	r5, #0
   32c0e:	d119      	bne.n	32c44 <__aeabi_fmul+0x100>
   32c10:	2000      	movs	r0, #0
   32c12:	2201      	movs	r2, #1
   32c14:	e7be      	b.n	32b94 <__aeabi_fmul+0x50>
   32c16:	2401      	movs	r4, #1
   32c18:	22ff      	movs	r2, #255	; 0xff
   32c1a:	400c      	ands	r4, r1
   32c1c:	2000      	movs	r0, #0
   32c1e:	e7db      	b.n	32bd8 <__aeabi_fmul+0x94>
   32c20:	0038      	movs	r0, r7
   32c22:	f001 fdb7 	bl	34794 <__clzsi2>
   32c26:	2676      	movs	r6, #118	; 0x76
   32c28:	1f43      	subs	r3, r0, #5
   32c2a:	409f      	lsls	r7, r3
   32c2c:	2300      	movs	r3, #0
   32c2e:	4276      	negs	r6, r6
   32c30:	1a36      	subs	r6, r6, r0
   32c32:	4699      	mov	r9, r3
   32c34:	469a      	mov	sl, r3
   32c36:	e79d      	b.n	32b74 <__aeabi_fmul+0x30>
   32c38:	230c      	movs	r3, #12
   32c3a:	4699      	mov	r9, r3
   32c3c:	3b09      	subs	r3, #9
   32c3e:	26ff      	movs	r6, #255	; 0xff
   32c40:	469a      	mov	sl, r3
   32c42:	e797      	b.n	32b74 <__aeabi_fmul+0x30>
   32c44:	0028      	movs	r0, r5
   32c46:	f001 fda5 	bl	34794 <__clzsi2>
   32c4a:	1f43      	subs	r3, r0, #5
   32c4c:	409d      	lsls	r5, r3
   32c4e:	2376      	movs	r3, #118	; 0x76
   32c50:	425b      	negs	r3, r3
   32c52:	1a18      	subs	r0, r3, r0
   32c54:	2200      	movs	r2, #0
   32c56:	e79d      	b.n	32b94 <__aeabi_fmul+0x50>
   32c58:	2080      	movs	r0, #128	; 0x80
   32c5a:	2400      	movs	r4, #0
   32c5c:	03c0      	lsls	r0, r0, #15
   32c5e:	22ff      	movs	r2, #255	; 0xff
   32c60:	e7ba      	b.n	32bd8 <__aeabi_fmul+0x94>
   32c62:	003d      	movs	r5, r7
   32c64:	4652      	mov	r2, sl
   32c66:	e7ab      	b.n	32bc0 <__aeabi_fmul+0x7c>
   32c68:	003d      	movs	r5, r7
   32c6a:	0021      	movs	r1, r4
   32c6c:	4652      	mov	r2, sl
   32c6e:	e7a7      	b.n	32bc0 <__aeabi_fmul+0x7c>
   32c70:	0c3b      	lsrs	r3, r7, #16
   32c72:	469c      	mov	ip, r3
   32c74:	042a      	lsls	r2, r5, #16
   32c76:	0c12      	lsrs	r2, r2, #16
   32c78:	0c2b      	lsrs	r3, r5, #16
   32c7a:	0014      	movs	r4, r2
   32c7c:	4660      	mov	r0, ip
   32c7e:	4665      	mov	r5, ip
   32c80:	043f      	lsls	r7, r7, #16
   32c82:	0c3f      	lsrs	r7, r7, #16
   32c84:	437c      	muls	r4, r7
   32c86:	4342      	muls	r2, r0
   32c88:	435d      	muls	r5, r3
   32c8a:	437b      	muls	r3, r7
   32c8c:	0c27      	lsrs	r7, r4, #16
   32c8e:	189b      	adds	r3, r3, r2
   32c90:	18ff      	adds	r7, r7, r3
   32c92:	42ba      	cmp	r2, r7
   32c94:	d903      	bls.n	32c9e <__aeabi_fmul+0x15a>
   32c96:	2380      	movs	r3, #128	; 0x80
   32c98:	025b      	lsls	r3, r3, #9
   32c9a:	469c      	mov	ip, r3
   32c9c:	4465      	add	r5, ip
   32c9e:	0424      	lsls	r4, r4, #16
   32ca0:	043a      	lsls	r2, r7, #16
   32ca2:	0c24      	lsrs	r4, r4, #16
   32ca4:	1912      	adds	r2, r2, r4
   32ca6:	0193      	lsls	r3, r2, #6
   32ca8:	1e5c      	subs	r4, r3, #1
   32caa:	41a3      	sbcs	r3, r4
   32cac:	0c3f      	lsrs	r7, r7, #16
   32cae:	0e92      	lsrs	r2, r2, #26
   32cb0:	197d      	adds	r5, r7, r5
   32cb2:	431a      	orrs	r2, r3
   32cb4:	01ad      	lsls	r5, r5, #6
   32cb6:	4315      	orrs	r5, r2
   32cb8:	012b      	lsls	r3, r5, #4
   32cba:	d504      	bpl.n	32cc6 <__aeabi_fmul+0x182>
   32cbc:	2301      	movs	r3, #1
   32cbe:	465e      	mov	r6, fp
   32cc0:	086a      	lsrs	r2, r5, #1
   32cc2:	401d      	ands	r5, r3
   32cc4:	4315      	orrs	r5, r2
   32cc6:	0032      	movs	r2, r6
   32cc8:	327f      	adds	r2, #127	; 0x7f
   32cca:	2a00      	cmp	r2, #0
   32ccc:	dd25      	ble.n	32d1a <__aeabi_fmul+0x1d6>
   32cce:	076b      	lsls	r3, r5, #29
   32cd0:	d004      	beq.n	32cdc <__aeabi_fmul+0x198>
   32cd2:	230f      	movs	r3, #15
   32cd4:	402b      	ands	r3, r5
   32cd6:	2b04      	cmp	r3, #4
   32cd8:	d000      	beq.n	32cdc <__aeabi_fmul+0x198>
   32cda:	3504      	adds	r5, #4
   32cdc:	012b      	lsls	r3, r5, #4
   32cde:	d503      	bpl.n	32ce8 <__aeabi_fmul+0x1a4>
   32ce0:	0032      	movs	r2, r6
   32ce2:	4b27      	ldr	r3, [pc, #156]	; (32d80 <__aeabi_fmul+0x23c>)
   32ce4:	3280      	adds	r2, #128	; 0x80
   32ce6:	401d      	ands	r5, r3
   32ce8:	2afe      	cmp	r2, #254	; 0xfe
   32cea:	dc94      	bgt.n	32c16 <__aeabi_fmul+0xd2>
   32cec:	2401      	movs	r4, #1
   32cee:	01a8      	lsls	r0, r5, #6
   32cf0:	0a40      	lsrs	r0, r0, #9
   32cf2:	b2d2      	uxtb	r2, r2
   32cf4:	400c      	ands	r4, r1
   32cf6:	e76f      	b.n	32bd8 <__aeabi_fmul+0x94>
   32cf8:	2080      	movs	r0, #128	; 0x80
   32cfa:	03c0      	lsls	r0, r0, #15
   32cfc:	4207      	tst	r7, r0
   32cfe:	d007      	beq.n	32d10 <__aeabi_fmul+0x1cc>
   32d00:	4205      	tst	r5, r0
   32d02:	d105      	bne.n	32d10 <__aeabi_fmul+0x1cc>
   32d04:	4328      	orrs	r0, r5
   32d06:	0240      	lsls	r0, r0, #9
   32d08:	0a40      	lsrs	r0, r0, #9
   32d0a:	4644      	mov	r4, r8
   32d0c:	22ff      	movs	r2, #255	; 0xff
   32d0e:	e763      	b.n	32bd8 <__aeabi_fmul+0x94>
   32d10:	4338      	orrs	r0, r7
   32d12:	0240      	lsls	r0, r0, #9
   32d14:	0a40      	lsrs	r0, r0, #9
   32d16:	22ff      	movs	r2, #255	; 0xff
   32d18:	e75e      	b.n	32bd8 <__aeabi_fmul+0x94>
   32d1a:	2401      	movs	r4, #1
   32d1c:	1aa3      	subs	r3, r4, r2
   32d1e:	2b1b      	cmp	r3, #27
   32d20:	dd05      	ble.n	32d2e <__aeabi_fmul+0x1ea>
   32d22:	400c      	ands	r4, r1
   32d24:	2200      	movs	r2, #0
   32d26:	2000      	movs	r0, #0
   32d28:	e756      	b.n	32bd8 <__aeabi_fmul+0x94>
   32d2a:	465e      	mov	r6, fp
   32d2c:	e7cb      	b.n	32cc6 <__aeabi_fmul+0x182>
   32d2e:	002a      	movs	r2, r5
   32d30:	2020      	movs	r0, #32
   32d32:	40da      	lsrs	r2, r3
   32d34:	1ac3      	subs	r3, r0, r3
   32d36:	409d      	lsls	r5, r3
   32d38:	002b      	movs	r3, r5
   32d3a:	1e5d      	subs	r5, r3, #1
   32d3c:	41ab      	sbcs	r3, r5
   32d3e:	4313      	orrs	r3, r2
   32d40:	075a      	lsls	r2, r3, #29
   32d42:	d004      	beq.n	32d4e <__aeabi_fmul+0x20a>
   32d44:	220f      	movs	r2, #15
   32d46:	401a      	ands	r2, r3
   32d48:	2a04      	cmp	r2, #4
   32d4a:	d000      	beq.n	32d4e <__aeabi_fmul+0x20a>
   32d4c:	3304      	adds	r3, #4
   32d4e:	015a      	lsls	r2, r3, #5
   32d50:	d504      	bpl.n	32d5c <__aeabi_fmul+0x218>
   32d52:	2401      	movs	r4, #1
   32d54:	2201      	movs	r2, #1
   32d56:	400c      	ands	r4, r1
   32d58:	2000      	movs	r0, #0
   32d5a:	e73d      	b.n	32bd8 <__aeabi_fmul+0x94>
   32d5c:	2401      	movs	r4, #1
   32d5e:	019b      	lsls	r3, r3, #6
   32d60:	0a58      	lsrs	r0, r3, #9
   32d62:	400c      	ands	r4, r1
   32d64:	2200      	movs	r2, #0
   32d66:	e737      	b.n	32bd8 <__aeabi_fmul+0x94>
   32d68:	2080      	movs	r0, #128	; 0x80
   32d6a:	2401      	movs	r4, #1
   32d6c:	03c0      	lsls	r0, r0, #15
   32d6e:	4328      	orrs	r0, r5
   32d70:	0240      	lsls	r0, r0, #9
   32d72:	0a40      	lsrs	r0, r0, #9
   32d74:	400c      	ands	r4, r1
   32d76:	22ff      	movs	r2, #255	; 0xff
   32d78:	e72e      	b.n	32bd8 <__aeabi_fmul+0x94>
   32d7a:	46c0      	nop			; (mov r8, r8)
   32d7c:	00039fe4 	.word	0x00039fe4
   32d80:	f7ffffff 	.word	0xf7ffffff

00032d84 <__aeabi_f2iz>:
   32d84:	0241      	lsls	r1, r0, #9
   32d86:	0043      	lsls	r3, r0, #1
   32d88:	0fc2      	lsrs	r2, r0, #31
   32d8a:	0a49      	lsrs	r1, r1, #9
   32d8c:	0e1b      	lsrs	r3, r3, #24
   32d8e:	2000      	movs	r0, #0
   32d90:	2b7e      	cmp	r3, #126	; 0x7e
   32d92:	dd0d      	ble.n	32db0 <__aeabi_f2iz+0x2c>
   32d94:	2b9d      	cmp	r3, #157	; 0x9d
   32d96:	dc0c      	bgt.n	32db2 <__aeabi_f2iz+0x2e>
   32d98:	2080      	movs	r0, #128	; 0x80
   32d9a:	0400      	lsls	r0, r0, #16
   32d9c:	4301      	orrs	r1, r0
   32d9e:	2b95      	cmp	r3, #149	; 0x95
   32da0:	dc0a      	bgt.n	32db8 <__aeabi_f2iz+0x34>
   32da2:	2096      	movs	r0, #150	; 0x96
   32da4:	1ac3      	subs	r3, r0, r3
   32da6:	40d9      	lsrs	r1, r3
   32da8:	4248      	negs	r0, r1
   32daa:	2a00      	cmp	r2, #0
   32dac:	d100      	bne.n	32db0 <__aeabi_f2iz+0x2c>
   32dae:	0008      	movs	r0, r1
   32db0:	4770      	bx	lr
   32db2:	4b03      	ldr	r3, [pc, #12]	; (32dc0 <__aeabi_f2iz+0x3c>)
   32db4:	18d0      	adds	r0, r2, r3
   32db6:	e7fb      	b.n	32db0 <__aeabi_f2iz+0x2c>
   32db8:	3b96      	subs	r3, #150	; 0x96
   32dba:	4099      	lsls	r1, r3
   32dbc:	e7f4      	b.n	32da8 <__aeabi_f2iz+0x24>
   32dbe:	46c0      	nop			; (mov r8, r8)
   32dc0:	7fffffff 	.word	0x7fffffff

00032dc4 <__aeabi_i2f>:
   32dc4:	b570      	push	{r4, r5, r6, lr}
   32dc6:	2800      	cmp	r0, #0
   32dc8:	d030      	beq.n	32e2c <__aeabi_i2f+0x68>
   32dca:	17c3      	asrs	r3, r0, #31
   32dcc:	18c4      	adds	r4, r0, r3
   32dce:	405c      	eors	r4, r3
   32dd0:	0fc5      	lsrs	r5, r0, #31
   32dd2:	0020      	movs	r0, r4
   32dd4:	f001 fcde 	bl	34794 <__clzsi2>
   32dd8:	239e      	movs	r3, #158	; 0x9e
   32dda:	1a1b      	subs	r3, r3, r0
   32ddc:	2b96      	cmp	r3, #150	; 0x96
   32dde:	dc0d      	bgt.n	32dfc <__aeabi_i2f+0x38>
   32de0:	2296      	movs	r2, #150	; 0x96
   32de2:	1ad2      	subs	r2, r2, r3
   32de4:	4094      	lsls	r4, r2
   32de6:	002a      	movs	r2, r5
   32de8:	0264      	lsls	r4, r4, #9
   32dea:	0a64      	lsrs	r4, r4, #9
   32dec:	b2db      	uxtb	r3, r3
   32dee:	0264      	lsls	r4, r4, #9
   32df0:	05db      	lsls	r3, r3, #23
   32df2:	0a60      	lsrs	r0, r4, #9
   32df4:	07d2      	lsls	r2, r2, #31
   32df6:	4318      	orrs	r0, r3
   32df8:	4310      	orrs	r0, r2
   32dfa:	bd70      	pop	{r4, r5, r6, pc}
   32dfc:	2b99      	cmp	r3, #153	; 0x99
   32dfe:	dc19      	bgt.n	32e34 <__aeabi_i2f+0x70>
   32e00:	2299      	movs	r2, #153	; 0x99
   32e02:	1ad2      	subs	r2, r2, r3
   32e04:	2a00      	cmp	r2, #0
   32e06:	dd29      	ble.n	32e5c <__aeabi_i2f+0x98>
   32e08:	4094      	lsls	r4, r2
   32e0a:	0022      	movs	r2, r4
   32e0c:	4c14      	ldr	r4, [pc, #80]	; (32e60 <__aeabi_i2f+0x9c>)
   32e0e:	4014      	ands	r4, r2
   32e10:	0751      	lsls	r1, r2, #29
   32e12:	d004      	beq.n	32e1e <__aeabi_i2f+0x5a>
   32e14:	210f      	movs	r1, #15
   32e16:	400a      	ands	r2, r1
   32e18:	2a04      	cmp	r2, #4
   32e1a:	d000      	beq.n	32e1e <__aeabi_i2f+0x5a>
   32e1c:	3404      	adds	r4, #4
   32e1e:	0162      	lsls	r2, r4, #5
   32e20:	d413      	bmi.n	32e4a <__aeabi_i2f+0x86>
   32e22:	01a4      	lsls	r4, r4, #6
   32e24:	0a64      	lsrs	r4, r4, #9
   32e26:	b2db      	uxtb	r3, r3
   32e28:	002a      	movs	r2, r5
   32e2a:	e7e0      	b.n	32dee <__aeabi_i2f+0x2a>
   32e2c:	2200      	movs	r2, #0
   32e2e:	2300      	movs	r3, #0
   32e30:	2400      	movs	r4, #0
   32e32:	e7dc      	b.n	32dee <__aeabi_i2f+0x2a>
   32e34:	2205      	movs	r2, #5
   32e36:	0021      	movs	r1, r4
   32e38:	1a12      	subs	r2, r2, r0
   32e3a:	40d1      	lsrs	r1, r2
   32e3c:	22b9      	movs	r2, #185	; 0xb9
   32e3e:	1ad2      	subs	r2, r2, r3
   32e40:	4094      	lsls	r4, r2
   32e42:	1e62      	subs	r2, r4, #1
   32e44:	4194      	sbcs	r4, r2
   32e46:	430c      	orrs	r4, r1
   32e48:	e7da      	b.n	32e00 <__aeabi_i2f+0x3c>
   32e4a:	4b05      	ldr	r3, [pc, #20]	; (32e60 <__aeabi_i2f+0x9c>)
   32e4c:	002a      	movs	r2, r5
   32e4e:	401c      	ands	r4, r3
   32e50:	239f      	movs	r3, #159	; 0x9f
   32e52:	01a4      	lsls	r4, r4, #6
   32e54:	1a1b      	subs	r3, r3, r0
   32e56:	0a64      	lsrs	r4, r4, #9
   32e58:	b2db      	uxtb	r3, r3
   32e5a:	e7c8      	b.n	32dee <__aeabi_i2f+0x2a>
   32e5c:	0022      	movs	r2, r4
   32e5e:	e7d5      	b.n	32e0c <__aeabi_i2f+0x48>
   32e60:	fbffffff 	.word	0xfbffffff

00032e64 <__aeabi_dadd>:
   32e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32e66:	4645      	mov	r5, r8
   32e68:	46de      	mov	lr, fp
   32e6a:	4657      	mov	r7, sl
   32e6c:	464e      	mov	r6, r9
   32e6e:	030c      	lsls	r4, r1, #12
   32e70:	b5e0      	push	{r5, r6, r7, lr}
   32e72:	004e      	lsls	r6, r1, #1
   32e74:	0fc9      	lsrs	r1, r1, #31
   32e76:	4688      	mov	r8, r1
   32e78:	000d      	movs	r5, r1
   32e7a:	0a61      	lsrs	r1, r4, #9
   32e7c:	0f44      	lsrs	r4, r0, #29
   32e7e:	430c      	orrs	r4, r1
   32e80:	00c7      	lsls	r7, r0, #3
   32e82:	0319      	lsls	r1, r3, #12
   32e84:	0058      	lsls	r0, r3, #1
   32e86:	0fdb      	lsrs	r3, r3, #31
   32e88:	469b      	mov	fp, r3
   32e8a:	0a4b      	lsrs	r3, r1, #9
   32e8c:	0f51      	lsrs	r1, r2, #29
   32e8e:	430b      	orrs	r3, r1
   32e90:	0d76      	lsrs	r6, r6, #21
   32e92:	0d40      	lsrs	r0, r0, #21
   32e94:	0019      	movs	r1, r3
   32e96:	00d2      	lsls	r2, r2, #3
   32e98:	45d8      	cmp	r8, fp
   32e9a:	d100      	bne.n	32e9e <__aeabi_dadd+0x3a>
   32e9c:	e0ae      	b.n	32ffc <__aeabi_dadd+0x198>
   32e9e:	1a35      	subs	r5, r6, r0
   32ea0:	2d00      	cmp	r5, #0
   32ea2:	dc00      	bgt.n	32ea6 <__aeabi_dadd+0x42>
   32ea4:	e0f6      	b.n	33094 <__aeabi_dadd+0x230>
   32ea6:	2800      	cmp	r0, #0
   32ea8:	d10f      	bne.n	32eca <__aeabi_dadd+0x66>
   32eaa:	4313      	orrs	r3, r2
   32eac:	d100      	bne.n	32eb0 <__aeabi_dadd+0x4c>
   32eae:	e0db      	b.n	33068 <__aeabi_dadd+0x204>
   32eb0:	1e6b      	subs	r3, r5, #1
   32eb2:	2b00      	cmp	r3, #0
   32eb4:	d000      	beq.n	32eb8 <__aeabi_dadd+0x54>
   32eb6:	e137      	b.n	33128 <__aeabi_dadd+0x2c4>
   32eb8:	1aba      	subs	r2, r7, r2
   32eba:	4297      	cmp	r7, r2
   32ebc:	41bf      	sbcs	r7, r7
   32ebe:	1a64      	subs	r4, r4, r1
   32ec0:	427f      	negs	r7, r7
   32ec2:	1be4      	subs	r4, r4, r7
   32ec4:	2601      	movs	r6, #1
   32ec6:	0017      	movs	r7, r2
   32ec8:	e024      	b.n	32f14 <__aeabi_dadd+0xb0>
   32eca:	4bc6      	ldr	r3, [pc, #792]	; (331e4 <__aeabi_dadd+0x380>)
   32ecc:	429e      	cmp	r6, r3
   32ece:	d04d      	beq.n	32f6c <__aeabi_dadd+0x108>
   32ed0:	2380      	movs	r3, #128	; 0x80
   32ed2:	041b      	lsls	r3, r3, #16
   32ed4:	4319      	orrs	r1, r3
   32ed6:	2d38      	cmp	r5, #56	; 0x38
   32ed8:	dd00      	ble.n	32edc <__aeabi_dadd+0x78>
   32eda:	e107      	b.n	330ec <__aeabi_dadd+0x288>
   32edc:	2d1f      	cmp	r5, #31
   32ede:	dd00      	ble.n	32ee2 <__aeabi_dadd+0x7e>
   32ee0:	e138      	b.n	33154 <__aeabi_dadd+0x2f0>
   32ee2:	2020      	movs	r0, #32
   32ee4:	1b43      	subs	r3, r0, r5
   32ee6:	469a      	mov	sl, r3
   32ee8:	000b      	movs	r3, r1
   32eea:	4650      	mov	r0, sl
   32eec:	4083      	lsls	r3, r0
   32eee:	4699      	mov	r9, r3
   32ef0:	0013      	movs	r3, r2
   32ef2:	4648      	mov	r0, r9
   32ef4:	40eb      	lsrs	r3, r5
   32ef6:	4318      	orrs	r0, r3
   32ef8:	0003      	movs	r3, r0
   32efa:	4650      	mov	r0, sl
   32efc:	4082      	lsls	r2, r0
   32efe:	1e50      	subs	r0, r2, #1
   32f00:	4182      	sbcs	r2, r0
   32f02:	40e9      	lsrs	r1, r5
   32f04:	431a      	orrs	r2, r3
   32f06:	1aba      	subs	r2, r7, r2
   32f08:	1a61      	subs	r1, r4, r1
   32f0a:	4297      	cmp	r7, r2
   32f0c:	41a4      	sbcs	r4, r4
   32f0e:	0017      	movs	r7, r2
   32f10:	4264      	negs	r4, r4
   32f12:	1b0c      	subs	r4, r1, r4
   32f14:	0223      	lsls	r3, r4, #8
   32f16:	d562      	bpl.n	32fde <__aeabi_dadd+0x17a>
   32f18:	0264      	lsls	r4, r4, #9
   32f1a:	0a65      	lsrs	r5, r4, #9
   32f1c:	2d00      	cmp	r5, #0
   32f1e:	d100      	bne.n	32f22 <__aeabi_dadd+0xbe>
   32f20:	e0df      	b.n	330e2 <__aeabi_dadd+0x27e>
   32f22:	0028      	movs	r0, r5
   32f24:	f001 fc36 	bl	34794 <__clzsi2>
   32f28:	0003      	movs	r3, r0
   32f2a:	3b08      	subs	r3, #8
   32f2c:	2b1f      	cmp	r3, #31
   32f2e:	dd00      	ble.n	32f32 <__aeabi_dadd+0xce>
   32f30:	e0d2      	b.n	330d8 <__aeabi_dadd+0x274>
   32f32:	2220      	movs	r2, #32
   32f34:	003c      	movs	r4, r7
   32f36:	1ad2      	subs	r2, r2, r3
   32f38:	409d      	lsls	r5, r3
   32f3a:	40d4      	lsrs	r4, r2
   32f3c:	409f      	lsls	r7, r3
   32f3e:	4325      	orrs	r5, r4
   32f40:	429e      	cmp	r6, r3
   32f42:	dd00      	ble.n	32f46 <__aeabi_dadd+0xe2>
   32f44:	e0c4      	b.n	330d0 <__aeabi_dadd+0x26c>
   32f46:	1b9e      	subs	r6, r3, r6
   32f48:	1c73      	adds	r3, r6, #1
   32f4a:	2b1f      	cmp	r3, #31
   32f4c:	dd00      	ble.n	32f50 <__aeabi_dadd+0xec>
   32f4e:	e0f1      	b.n	33134 <__aeabi_dadd+0x2d0>
   32f50:	2220      	movs	r2, #32
   32f52:	0038      	movs	r0, r7
   32f54:	0029      	movs	r1, r5
   32f56:	1ad2      	subs	r2, r2, r3
   32f58:	40d8      	lsrs	r0, r3
   32f5a:	4091      	lsls	r1, r2
   32f5c:	4097      	lsls	r7, r2
   32f5e:	002c      	movs	r4, r5
   32f60:	4301      	orrs	r1, r0
   32f62:	1e78      	subs	r0, r7, #1
   32f64:	4187      	sbcs	r7, r0
   32f66:	40dc      	lsrs	r4, r3
   32f68:	2600      	movs	r6, #0
   32f6a:	430f      	orrs	r7, r1
   32f6c:	077b      	lsls	r3, r7, #29
   32f6e:	d009      	beq.n	32f84 <__aeabi_dadd+0x120>
   32f70:	230f      	movs	r3, #15
   32f72:	403b      	ands	r3, r7
   32f74:	2b04      	cmp	r3, #4
   32f76:	d005      	beq.n	32f84 <__aeabi_dadd+0x120>
   32f78:	1d3b      	adds	r3, r7, #4
   32f7a:	42bb      	cmp	r3, r7
   32f7c:	41bf      	sbcs	r7, r7
   32f7e:	427f      	negs	r7, r7
   32f80:	19e4      	adds	r4, r4, r7
   32f82:	001f      	movs	r7, r3
   32f84:	0223      	lsls	r3, r4, #8
   32f86:	d52c      	bpl.n	32fe2 <__aeabi_dadd+0x17e>
   32f88:	4b96      	ldr	r3, [pc, #600]	; (331e4 <__aeabi_dadd+0x380>)
   32f8a:	3601      	adds	r6, #1
   32f8c:	429e      	cmp	r6, r3
   32f8e:	d100      	bne.n	32f92 <__aeabi_dadd+0x12e>
   32f90:	e09a      	b.n	330c8 <__aeabi_dadd+0x264>
   32f92:	4645      	mov	r5, r8
   32f94:	4b94      	ldr	r3, [pc, #592]	; (331e8 <__aeabi_dadd+0x384>)
   32f96:	08ff      	lsrs	r7, r7, #3
   32f98:	401c      	ands	r4, r3
   32f9a:	0760      	lsls	r0, r4, #29
   32f9c:	0576      	lsls	r6, r6, #21
   32f9e:	0264      	lsls	r4, r4, #9
   32fa0:	4307      	orrs	r7, r0
   32fa2:	0b24      	lsrs	r4, r4, #12
   32fa4:	0d76      	lsrs	r6, r6, #21
   32fa6:	2100      	movs	r1, #0
   32fa8:	0324      	lsls	r4, r4, #12
   32faa:	0b23      	lsrs	r3, r4, #12
   32fac:	0d0c      	lsrs	r4, r1, #20
   32fae:	4a8f      	ldr	r2, [pc, #572]	; (331ec <__aeabi_dadd+0x388>)
   32fb0:	0524      	lsls	r4, r4, #20
   32fb2:	431c      	orrs	r4, r3
   32fb4:	4014      	ands	r4, r2
   32fb6:	0533      	lsls	r3, r6, #20
   32fb8:	4323      	orrs	r3, r4
   32fba:	005b      	lsls	r3, r3, #1
   32fbc:	07ed      	lsls	r5, r5, #31
   32fbe:	085b      	lsrs	r3, r3, #1
   32fc0:	432b      	orrs	r3, r5
   32fc2:	0038      	movs	r0, r7
   32fc4:	0019      	movs	r1, r3
   32fc6:	bc3c      	pop	{r2, r3, r4, r5}
   32fc8:	4690      	mov	r8, r2
   32fca:	4699      	mov	r9, r3
   32fcc:	46a2      	mov	sl, r4
   32fce:	46ab      	mov	fp, r5
   32fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32fd2:	4664      	mov	r4, ip
   32fd4:	4304      	orrs	r4, r0
   32fd6:	d100      	bne.n	32fda <__aeabi_dadd+0x176>
   32fd8:	e211      	b.n	333fe <__aeabi_dadd+0x59a>
   32fda:	0004      	movs	r4, r0
   32fdc:	4667      	mov	r7, ip
   32fde:	077b      	lsls	r3, r7, #29
   32fe0:	d1c6      	bne.n	32f70 <__aeabi_dadd+0x10c>
   32fe2:	4645      	mov	r5, r8
   32fe4:	0760      	lsls	r0, r4, #29
   32fe6:	08ff      	lsrs	r7, r7, #3
   32fe8:	4307      	orrs	r7, r0
   32fea:	08e4      	lsrs	r4, r4, #3
   32fec:	4b7d      	ldr	r3, [pc, #500]	; (331e4 <__aeabi_dadd+0x380>)
   32fee:	429e      	cmp	r6, r3
   32ff0:	d030      	beq.n	33054 <__aeabi_dadd+0x1f0>
   32ff2:	0324      	lsls	r4, r4, #12
   32ff4:	0576      	lsls	r6, r6, #21
   32ff6:	0b24      	lsrs	r4, r4, #12
   32ff8:	0d76      	lsrs	r6, r6, #21
   32ffa:	e7d4      	b.n	32fa6 <__aeabi_dadd+0x142>
   32ffc:	1a33      	subs	r3, r6, r0
   32ffe:	469a      	mov	sl, r3
   33000:	2b00      	cmp	r3, #0
   33002:	dd78      	ble.n	330f6 <__aeabi_dadd+0x292>
   33004:	2800      	cmp	r0, #0
   33006:	d031      	beq.n	3306c <__aeabi_dadd+0x208>
   33008:	4876      	ldr	r0, [pc, #472]	; (331e4 <__aeabi_dadd+0x380>)
   3300a:	4286      	cmp	r6, r0
   3300c:	d0ae      	beq.n	32f6c <__aeabi_dadd+0x108>
   3300e:	2080      	movs	r0, #128	; 0x80
   33010:	0400      	lsls	r0, r0, #16
   33012:	4301      	orrs	r1, r0
   33014:	4653      	mov	r3, sl
   33016:	2b38      	cmp	r3, #56	; 0x38
   33018:	dc00      	bgt.n	3301c <__aeabi_dadd+0x1b8>
   3301a:	e0e9      	b.n	331f0 <__aeabi_dadd+0x38c>
   3301c:	430a      	orrs	r2, r1
   3301e:	1e51      	subs	r1, r2, #1
   33020:	418a      	sbcs	r2, r1
   33022:	2100      	movs	r1, #0
   33024:	19d2      	adds	r2, r2, r7
   33026:	42ba      	cmp	r2, r7
   33028:	41bf      	sbcs	r7, r7
   3302a:	1909      	adds	r1, r1, r4
   3302c:	427c      	negs	r4, r7
   3302e:	0017      	movs	r7, r2
   33030:	190c      	adds	r4, r1, r4
   33032:	0223      	lsls	r3, r4, #8
   33034:	d5d3      	bpl.n	32fde <__aeabi_dadd+0x17a>
   33036:	4b6b      	ldr	r3, [pc, #428]	; (331e4 <__aeabi_dadd+0x380>)
   33038:	3601      	adds	r6, #1
   3303a:	429e      	cmp	r6, r3
   3303c:	d100      	bne.n	33040 <__aeabi_dadd+0x1dc>
   3303e:	e13a      	b.n	332b6 <__aeabi_dadd+0x452>
   33040:	2001      	movs	r0, #1
   33042:	4b69      	ldr	r3, [pc, #420]	; (331e8 <__aeabi_dadd+0x384>)
   33044:	401c      	ands	r4, r3
   33046:	087b      	lsrs	r3, r7, #1
   33048:	4007      	ands	r7, r0
   3304a:	431f      	orrs	r7, r3
   3304c:	07e0      	lsls	r0, r4, #31
   3304e:	4307      	orrs	r7, r0
   33050:	0864      	lsrs	r4, r4, #1
   33052:	e78b      	b.n	32f6c <__aeabi_dadd+0x108>
   33054:	0023      	movs	r3, r4
   33056:	433b      	orrs	r3, r7
   33058:	d100      	bne.n	3305c <__aeabi_dadd+0x1f8>
   3305a:	e1cb      	b.n	333f4 <__aeabi_dadd+0x590>
   3305c:	2280      	movs	r2, #128	; 0x80
   3305e:	0312      	lsls	r2, r2, #12
   33060:	4314      	orrs	r4, r2
   33062:	0324      	lsls	r4, r4, #12
   33064:	0b24      	lsrs	r4, r4, #12
   33066:	e79e      	b.n	32fa6 <__aeabi_dadd+0x142>
   33068:	002e      	movs	r6, r5
   3306a:	e77f      	b.n	32f6c <__aeabi_dadd+0x108>
   3306c:	0008      	movs	r0, r1
   3306e:	4310      	orrs	r0, r2
   33070:	d100      	bne.n	33074 <__aeabi_dadd+0x210>
   33072:	e0b4      	b.n	331de <__aeabi_dadd+0x37a>
   33074:	1e58      	subs	r0, r3, #1
   33076:	2800      	cmp	r0, #0
   33078:	d000      	beq.n	3307c <__aeabi_dadd+0x218>
   3307a:	e0de      	b.n	3323a <__aeabi_dadd+0x3d6>
   3307c:	18ba      	adds	r2, r7, r2
   3307e:	42ba      	cmp	r2, r7
   33080:	419b      	sbcs	r3, r3
   33082:	1864      	adds	r4, r4, r1
   33084:	425b      	negs	r3, r3
   33086:	18e4      	adds	r4, r4, r3
   33088:	0017      	movs	r7, r2
   3308a:	2601      	movs	r6, #1
   3308c:	0223      	lsls	r3, r4, #8
   3308e:	d5a6      	bpl.n	32fde <__aeabi_dadd+0x17a>
   33090:	2602      	movs	r6, #2
   33092:	e7d5      	b.n	33040 <__aeabi_dadd+0x1dc>
   33094:	2d00      	cmp	r5, #0
   33096:	d16e      	bne.n	33176 <__aeabi_dadd+0x312>
   33098:	1c70      	adds	r0, r6, #1
   3309a:	0540      	lsls	r0, r0, #21
   3309c:	0d40      	lsrs	r0, r0, #21
   3309e:	2801      	cmp	r0, #1
   330a0:	dc00      	bgt.n	330a4 <__aeabi_dadd+0x240>
   330a2:	e0f9      	b.n	33298 <__aeabi_dadd+0x434>
   330a4:	1ab8      	subs	r0, r7, r2
   330a6:	4684      	mov	ip, r0
   330a8:	4287      	cmp	r7, r0
   330aa:	4180      	sbcs	r0, r0
   330ac:	1ae5      	subs	r5, r4, r3
   330ae:	4240      	negs	r0, r0
   330b0:	1a2d      	subs	r5, r5, r0
   330b2:	0228      	lsls	r0, r5, #8
   330b4:	d400      	bmi.n	330b8 <__aeabi_dadd+0x254>
   330b6:	e089      	b.n	331cc <__aeabi_dadd+0x368>
   330b8:	1bd7      	subs	r7, r2, r7
   330ba:	42ba      	cmp	r2, r7
   330bc:	4192      	sbcs	r2, r2
   330be:	1b1c      	subs	r4, r3, r4
   330c0:	4252      	negs	r2, r2
   330c2:	1aa5      	subs	r5, r4, r2
   330c4:	46d8      	mov	r8, fp
   330c6:	e729      	b.n	32f1c <__aeabi_dadd+0xb8>
   330c8:	4645      	mov	r5, r8
   330ca:	2400      	movs	r4, #0
   330cc:	2700      	movs	r7, #0
   330ce:	e76a      	b.n	32fa6 <__aeabi_dadd+0x142>
   330d0:	4c45      	ldr	r4, [pc, #276]	; (331e8 <__aeabi_dadd+0x384>)
   330d2:	1af6      	subs	r6, r6, r3
   330d4:	402c      	ands	r4, r5
   330d6:	e749      	b.n	32f6c <__aeabi_dadd+0x108>
   330d8:	003d      	movs	r5, r7
   330da:	3828      	subs	r0, #40	; 0x28
   330dc:	4085      	lsls	r5, r0
   330de:	2700      	movs	r7, #0
   330e0:	e72e      	b.n	32f40 <__aeabi_dadd+0xdc>
   330e2:	0038      	movs	r0, r7
   330e4:	f001 fb56 	bl	34794 <__clzsi2>
   330e8:	3020      	adds	r0, #32
   330ea:	e71d      	b.n	32f28 <__aeabi_dadd+0xc4>
   330ec:	430a      	orrs	r2, r1
   330ee:	1e51      	subs	r1, r2, #1
   330f0:	418a      	sbcs	r2, r1
   330f2:	2100      	movs	r1, #0
   330f4:	e707      	b.n	32f06 <__aeabi_dadd+0xa2>
   330f6:	2b00      	cmp	r3, #0
   330f8:	d000      	beq.n	330fc <__aeabi_dadd+0x298>
   330fa:	e0f3      	b.n	332e4 <__aeabi_dadd+0x480>
   330fc:	1c70      	adds	r0, r6, #1
   330fe:	0543      	lsls	r3, r0, #21
   33100:	0d5b      	lsrs	r3, r3, #21
   33102:	2b01      	cmp	r3, #1
   33104:	dc00      	bgt.n	33108 <__aeabi_dadd+0x2a4>
   33106:	e0ad      	b.n	33264 <__aeabi_dadd+0x400>
   33108:	4b36      	ldr	r3, [pc, #216]	; (331e4 <__aeabi_dadd+0x380>)
   3310a:	4298      	cmp	r0, r3
   3310c:	d100      	bne.n	33110 <__aeabi_dadd+0x2ac>
   3310e:	e0d1      	b.n	332b4 <__aeabi_dadd+0x450>
   33110:	18ba      	adds	r2, r7, r2
   33112:	42ba      	cmp	r2, r7
   33114:	41bf      	sbcs	r7, r7
   33116:	1864      	adds	r4, r4, r1
   33118:	427f      	negs	r7, r7
   3311a:	19e4      	adds	r4, r4, r7
   3311c:	07e7      	lsls	r7, r4, #31
   3311e:	0852      	lsrs	r2, r2, #1
   33120:	4317      	orrs	r7, r2
   33122:	0864      	lsrs	r4, r4, #1
   33124:	0006      	movs	r6, r0
   33126:	e721      	b.n	32f6c <__aeabi_dadd+0x108>
   33128:	482e      	ldr	r0, [pc, #184]	; (331e4 <__aeabi_dadd+0x380>)
   3312a:	4285      	cmp	r5, r0
   3312c:	d100      	bne.n	33130 <__aeabi_dadd+0x2cc>
   3312e:	e093      	b.n	33258 <__aeabi_dadd+0x3f4>
   33130:	001d      	movs	r5, r3
   33132:	e6d0      	b.n	32ed6 <__aeabi_dadd+0x72>
   33134:	0029      	movs	r1, r5
   33136:	3e1f      	subs	r6, #31
   33138:	40f1      	lsrs	r1, r6
   3313a:	2b20      	cmp	r3, #32
   3313c:	d100      	bne.n	33140 <__aeabi_dadd+0x2dc>
   3313e:	e08d      	b.n	3325c <__aeabi_dadd+0x3f8>
   33140:	2240      	movs	r2, #64	; 0x40
   33142:	1ad3      	subs	r3, r2, r3
   33144:	409d      	lsls	r5, r3
   33146:	432f      	orrs	r7, r5
   33148:	1e7d      	subs	r5, r7, #1
   3314a:	41af      	sbcs	r7, r5
   3314c:	2400      	movs	r4, #0
   3314e:	430f      	orrs	r7, r1
   33150:	2600      	movs	r6, #0
   33152:	e744      	b.n	32fde <__aeabi_dadd+0x17a>
   33154:	002b      	movs	r3, r5
   33156:	0008      	movs	r0, r1
   33158:	3b20      	subs	r3, #32
   3315a:	40d8      	lsrs	r0, r3
   3315c:	0003      	movs	r3, r0
   3315e:	2d20      	cmp	r5, #32
   33160:	d100      	bne.n	33164 <__aeabi_dadd+0x300>
   33162:	e07d      	b.n	33260 <__aeabi_dadd+0x3fc>
   33164:	2040      	movs	r0, #64	; 0x40
   33166:	1b45      	subs	r5, r0, r5
   33168:	40a9      	lsls	r1, r5
   3316a:	430a      	orrs	r2, r1
   3316c:	1e51      	subs	r1, r2, #1
   3316e:	418a      	sbcs	r2, r1
   33170:	2100      	movs	r1, #0
   33172:	431a      	orrs	r2, r3
   33174:	e6c7      	b.n	32f06 <__aeabi_dadd+0xa2>
   33176:	2e00      	cmp	r6, #0
   33178:	d050      	beq.n	3321c <__aeabi_dadd+0x3b8>
   3317a:	4e1a      	ldr	r6, [pc, #104]	; (331e4 <__aeabi_dadd+0x380>)
   3317c:	42b0      	cmp	r0, r6
   3317e:	d057      	beq.n	33230 <__aeabi_dadd+0x3cc>
   33180:	2680      	movs	r6, #128	; 0x80
   33182:	426b      	negs	r3, r5
   33184:	4699      	mov	r9, r3
   33186:	0436      	lsls	r6, r6, #16
   33188:	4334      	orrs	r4, r6
   3318a:	464b      	mov	r3, r9
   3318c:	2b38      	cmp	r3, #56	; 0x38
   3318e:	dd00      	ble.n	33192 <__aeabi_dadd+0x32e>
   33190:	e0d6      	b.n	33340 <__aeabi_dadd+0x4dc>
   33192:	2b1f      	cmp	r3, #31
   33194:	dd00      	ble.n	33198 <__aeabi_dadd+0x334>
   33196:	e135      	b.n	33404 <__aeabi_dadd+0x5a0>
   33198:	2620      	movs	r6, #32
   3319a:	1af5      	subs	r5, r6, r3
   3319c:	0026      	movs	r6, r4
   3319e:	40ae      	lsls	r6, r5
   331a0:	46b2      	mov	sl, r6
   331a2:	003e      	movs	r6, r7
   331a4:	40de      	lsrs	r6, r3
   331a6:	46ac      	mov	ip, r5
   331a8:	0035      	movs	r5, r6
   331aa:	4656      	mov	r6, sl
   331ac:	432e      	orrs	r6, r5
   331ae:	4665      	mov	r5, ip
   331b0:	40af      	lsls	r7, r5
   331b2:	1e7d      	subs	r5, r7, #1
   331b4:	41af      	sbcs	r7, r5
   331b6:	40dc      	lsrs	r4, r3
   331b8:	4337      	orrs	r7, r6
   331ba:	1bd7      	subs	r7, r2, r7
   331bc:	42ba      	cmp	r2, r7
   331be:	4192      	sbcs	r2, r2
   331c0:	1b0c      	subs	r4, r1, r4
   331c2:	4252      	negs	r2, r2
   331c4:	1aa4      	subs	r4, r4, r2
   331c6:	0006      	movs	r6, r0
   331c8:	46d8      	mov	r8, fp
   331ca:	e6a3      	b.n	32f14 <__aeabi_dadd+0xb0>
   331cc:	4664      	mov	r4, ip
   331ce:	4667      	mov	r7, ip
   331d0:	432c      	orrs	r4, r5
   331d2:	d000      	beq.n	331d6 <__aeabi_dadd+0x372>
   331d4:	e6a2      	b.n	32f1c <__aeabi_dadd+0xb8>
   331d6:	2500      	movs	r5, #0
   331d8:	2600      	movs	r6, #0
   331da:	2700      	movs	r7, #0
   331dc:	e706      	b.n	32fec <__aeabi_dadd+0x188>
   331de:	001e      	movs	r6, r3
   331e0:	e6c4      	b.n	32f6c <__aeabi_dadd+0x108>
   331e2:	46c0      	nop			; (mov r8, r8)
   331e4:	000007ff 	.word	0x000007ff
   331e8:	ff7fffff 	.word	0xff7fffff
   331ec:	800fffff 	.word	0x800fffff
   331f0:	2b1f      	cmp	r3, #31
   331f2:	dc63      	bgt.n	332bc <__aeabi_dadd+0x458>
   331f4:	2020      	movs	r0, #32
   331f6:	1ac3      	subs	r3, r0, r3
   331f8:	0008      	movs	r0, r1
   331fa:	4098      	lsls	r0, r3
   331fc:	469c      	mov	ip, r3
   331fe:	4683      	mov	fp, r0
   33200:	4653      	mov	r3, sl
   33202:	0010      	movs	r0, r2
   33204:	40d8      	lsrs	r0, r3
   33206:	0003      	movs	r3, r0
   33208:	4658      	mov	r0, fp
   3320a:	4318      	orrs	r0, r3
   3320c:	4663      	mov	r3, ip
   3320e:	409a      	lsls	r2, r3
   33210:	1e53      	subs	r3, r2, #1
   33212:	419a      	sbcs	r2, r3
   33214:	4653      	mov	r3, sl
   33216:	4302      	orrs	r2, r0
   33218:	40d9      	lsrs	r1, r3
   3321a:	e703      	b.n	33024 <__aeabi_dadd+0x1c0>
   3321c:	0026      	movs	r6, r4
   3321e:	433e      	orrs	r6, r7
   33220:	d006      	beq.n	33230 <__aeabi_dadd+0x3cc>
   33222:	43eb      	mvns	r3, r5
   33224:	4699      	mov	r9, r3
   33226:	2b00      	cmp	r3, #0
   33228:	d0c7      	beq.n	331ba <__aeabi_dadd+0x356>
   3322a:	4e94      	ldr	r6, [pc, #592]	; (3347c <__aeabi_dadd+0x618>)
   3322c:	42b0      	cmp	r0, r6
   3322e:	d1ac      	bne.n	3318a <__aeabi_dadd+0x326>
   33230:	000c      	movs	r4, r1
   33232:	0017      	movs	r7, r2
   33234:	0006      	movs	r6, r0
   33236:	46d8      	mov	r8, fp
   33238:	e698      	b.n	32f6c <__aeabi_dadd+0x108>
   3323a:	4b90      	ldr	r3, [pc, #576]	; (3347c <__aeabi_dadd+0x618>)
   3323c:	459a      	cmp	sl, r3
   3323e:	d00b      	beq.n	33258 <__aeabi_dadd+0x3f4>
   33240:	4682      	mov	sl, r0
   33242:	e6e7      	b.n	33014 <__aeabi_dadd+0x1b0>
   33244:	2800      	cmp	r0, #0
   33246:	d000      	beq.n	3324a <__aeabi_dadd+0x3e6>
   33248:	e09e      	b.n	33388 <__aeabi_dadd+0x524>
   3324a:	0018      	movs	r0, r3
   3324c:	4310      	orrs	r0, r2
   3324e:	d100      	bne.n	33252 <__aeabi_dadd+0x3ee>
   33250:	e0e9      	b.n	33426 <__aeabi_dadd+0x5c2>
   33252:	001c      	movs	r4, r3
   33254:	0017      	movs	r7, r2
   33256:	46d8      	mov	r8, fp
   33258:	4e88      	ldr	r6, [pc, #544]	; (3347c <__aeabi_dadd+0x618>)
   3325a:	e687      	b.n	32f6c <__aeabi_dadd+0x108>
   3325c:	2500      	movs	r5, #0
   3325e:	e772      	b.n	33146 <__aeabi_dadd+0x2e2>
   33260:	2100      	movs	r1, #0
   33262:	e782      	b.n	3316a <__aeabi_dadd+0x306>
   33264:	0023      	movs	r3, r4
   33266:	433b      	orrs	r3, r7
   33268:	2e00      	cmp	r6, #0
   3326a:	d000      	beq.n	3326e <__aeabi_dadd+0x40a>
   3326c:	e0ab      	b.n	333c6 <__aeabi_dadd+0x562>
   3326e:	2b00      	cmp	r3, #0
   33270:	d100      	bne.n	33274 <__aeabi_dadd+0x410>
   33272:	e0e7      	b.n	33444 <__aeabi_dadd+0x5e0>
   33274:	000b      	movs	r3, r1
   33276:	4313      	orrs	r3, r2
   33278:	d100      	bne.n	3327c <__aeabi_dadd+0x418>
   3327a:	e677      	b.n	32f6c <__aeabi_dadd+0x108>
   3327c:	18ba      	adds	r2, r7, r2
   3327e:	42ba      	cmp	r2, r7
   33280:	41bf      	sbcs	r7, r7
   33282:	1864      	adds	r4, r4, r1
   33284:	427f      	negs	r7, r7
   33286:	19e4      	adds	r4, r4, r7
   33288:	0223      	lsls	r3, r4, #8
   3328a:	d400      	bmi.n	3328e <__aeabi_dadd+0x42a>
   3328c:	e0f2      	b.n	33474 <__aeabi_dadd+0x610>
   3328e:	4b7c      	ldr	r3, [pc, #496]	; (33480 <__aeabi_dadd+0x61c>)
   33290:	0017      	movs	r7, r2
   33292:	401c      	ands	r4, r3
   33294:	0006      	movs	r6, r0
   33296:	e669      	b.n	32f6c <__aeabi_dadd+0x108>
   33298:	0020      	movs	r0, r4
   3329a:	4338      	orrs	r0, r7
   3329c:	2e00      	cmp	r6, #0
   3329e:	d1d1      	bne.n	33244 <__aeabi_dadd+0x3e0>
   332a0:	2800      	cmp	r0, #0
   332a2:	d15b      	bne.n	3335c <__aeabi_dadd+0x4f8>
   332a4:	001c      	movs	r4, r3
   332a6:	4314      	orrs	r4, r2
   332a8:	d100      	bne.n	332ac <__aeabi_dadd+0x448>
   332aa:	e0a8      	b.n	333fe <__aeabi_dadd+0x59a>
   332ac:	001c      	movs	r4, r3
   332ae:	0017      	movs	r7, r2
   332b0:	46d8      	mov	r8, fp
   332b2:	e65b      	b.n	32f6c <__aeabi_dadd+0x108>
   332b4:	0006      	movs	r6, r0
   332b6:	2400      	movs	r4, #0
   332b8:	2700      	movs	r7, #0
   332ba:	e697      	b.n	32fec <__aeabi_dadd+0x188>
   332bc:	4650      	mov	r0, sl
   332be:	000b      	movs	r3, r1
   332c0:	3820      	subs	r0, #32
   332c2:	40c3      	lsrs	r3, r0
   332c4:	4699      	mov	r9, r3
   332c6:	4653      	mov	r3, sl
   332c8:	2b20      	cmp	r3, #32
   332ca:	d100      	bne.n	332ce <__aeabi_dadd+0x46a>
   332cc:	e095      	b.n	333fa <__aeabi_dadd+0x596>
   332ce:	2340      	movs	r3, #64	; 0x40
   332d0:	4650      	mov	r0, sl
   332d2:	1a1b      	subs	r3, r3, r0
   332d4:	4099      	lsls	r1, r3
   332d6:	430a      	orrs	r2, r1
   332d8:	1e51      	subs	r1, r2, #1
   332da:	418a      	sbcs	r2, r1
   332dc:	464b      	mov	r3, r9
   332de:	2100      	movs	r1, #0
   332e0:	431a      	orrs	r2, r3
   332e2:	e69f      	b.n	33024 <__aeabi_dadd+0x1c0>
   332e4:	2e00      	cmp	r6, #0
   332e6:	d130      	bne.n	3334a <__aeabi_dadd+0x4e6>
   332e8:	0026      	movs	r6, r4
   332ea:	433e      	orrs	r6, r7
   332ec:	d067      	beq.n	333be <__aeabi_dadd+0x55a>
   332ee:	43db      	mvns	r3, r3
   332f0:	469a      	mov	sl, r3
   332f2:	2b00      	cmp	r3, #0
   332f4:	d01c      	beq.n	33330 <__aeabi_dadd+0x4cc>
   332f6:	4e61      	ldr	r6, [pc, #388]	; (3347c <__aeabi_dadd+0x618>)
   332f8:	42b0      	cmp	r0, r6
   332fa:	d060      	beq.n	333be <__aeabi_dadd+0x55a>
   332fc:	4653      	mov	r3, sl
   332fe:	2b38      	cmp	r3, #56	; 0x38
   33300:	dd00      	ble.n	33304 <__aeabi_dadd+0x4a0>
   33302:	e096      	b.n	33432 <__aeabi_dadd+0x5ce>
   33304:	2b1f      	cmp	r3, #31
   33306:	dd00      	ble.n	3330a <__aeabi_dadd+0x4a6>
   33308:	e09f      	b.n	3344a <__aeabi_dadd+0x5e6>
   3330a:	2620      	movs	r6, #32
   3330c:	1af3      	subs	r3, r6, r3
   3330e:	0026      	movs	r6, r4
   33310:	409e      	lsls	r6, r3
   33312:	469c      	mov	ip, r3
   33314:	46b3      	mov	fp, r6
   33316:	4653      	mov	r3, sl
   33318:	003e      	movs	r6, r7
   3331a:	40de      	lsrs	r6, r3
   3331c:	0033      	movs	r3, r6
   3331e:	465e      	mov	r6, fp
   33320:	431e      	orrs	r6, r3
   33322:	4663      	mov	r3, ip
   33324:	409f      	lsls	r7, r3
   33326:	1e7b      	subs	r3, r7, #1
   33328:	419f      	sbcs	r7, r3
   3332a:	4653      	mov	r3, sl
   3332c:	40dc      	lsrs	r4, r3
   3332e:	4337      	orrs	r7, r6
   33330:	18bf      	adds	r7, r7, r2
   33332:	4297      	cmp	r7, r2
   33334:	4192      	sbcs	r2, r2
   33336:	1864      	adds	r4, r4, r1
   33338:	4252      	negs	r2, r2
   3333a:	18a4      	adds	r4, r4, r2
   3333c:	0006      	movs	r6, r0
   3333e:	e678      	b.n	33032 <__aeabi_dadd+0x1ce>
   33340:	4327      	orrs	r7, r4
   33342:	1e7c      	subs	r4, r7, #1
   33344:	41a7      	sbcs	r7, r4
   33346:	2400      	movs	r4, #0
   33348:	e737      	b.n	331ba <__aeabi_dadd+0x356>
   3334a:	4e4c      	ldr	r6, [pc, #304]	; (3347c <__aeabi_dadd+0x618>)
   3334c:	42b0      	cmp	r0, r6
   3334e:	d036      	beq.n	333be <__aeabi_dadd+0x55a>
   33350:	2680      	movs	r6, #128	; 0x80
   33352:	425b      	negs	r3, r3
   33354:	0436      	lsls	r6, r6, #16
   33356:	469a      	mov	sl, r3
   33358:	4334      	orrs	r4, r6
   3335a:	e7cf      	b.n	332fc <__aeabi_dadd+0x498>
   3335c:	0018      	movs	r0, r3
   3335e:	4310      	orrs	r0, r2
   33360:	d100      	bne.n	33364 <__aeabi_dadd+0x500>
   33362:	e603      	b.n	32f6c <__aeabi_dadd+0x108>
   33364:	1ab8      	subs	r0, r7, r2
   33366:	4684      	mov	ip, r0
   33368:	4567      	cmp	r7, ip
   3336a:	41ad      	sbcs	r5, r5
   3336c:	1ae0      	subs	r0, r4, r3
   3336e:	426d      	negs	r5, r5
   33370:	1b40      	subs	r0, r0, r5
   33372:	0205      	lsls	r5, r0, #8
   33374:	d400      	bmi.n	33378 <__aeabi_dadd+0x514>
   33376:	e62c      	b.n	32fd2 <__aeabi_dadd+0x16e>
   33378:	1bd7      	subs	r7, r2, r7
   3337a:	42ba      	cmp	r2, r7
   3337c:	4192      	sbcs	r2, r2
   3337e:	1b1c      	subs	r4, r3, r4
   33380:	4252      	negs	r2, r2
   33382:	1aa4      	subs	r4, r4, r2
   33384:	46d8      	mov	r8, fp
   33386:	e5f1      	b.n	32f6c <__aeabi_dadd+0x108>
   33388:	0018      	movs	r0, r3
   3338a:	4310      	orrs	r0, r2
   3338c:	d100      	bne.n	33390 <__aeabi_dadd+0x52c>
   3338e:	e763      	b.n	33258 <__aeabi_dadd+0x3f4>
   33390:	08f8      	lsrs	r0, r7, #3
   33392:	0767      	lsls	r7, r4, #29
   33394:	4307      	orrs	r7, r0
   33396:	2080      	movs	r0, #128	; 0x80
   33398:	08e4      	lsrs	r4, r4, #3
   3339a:	0300      	lsls	r0, r0, #12
   3339c:	4204      	tst	r4, r0
   3339e:	d008      	beq.n	333b2 <__aeabi_dadd+0x54e>
   333a0:	08dd      	lsrs	r5, r3, #3
   333a2:	4205      	tst	r5, r0
   333a4:	d105      	bne.n	333b2 <__aeabi_dadd+0x54e>
   333a6:	08d2      	lsrs	r2, r2, #3
   333a8:	0759      	lsls	r1, r3, #29
   333aa:	4311      	orrs	r1, r2
   333ac:	000f      	movs	r7, r1
   333ae:	002c      	movs	r4, r5
   333b0:	46d8      	mov	r8, fp
   333b2:	0f7b      	lsrs	r3, r7, #29
   333b4:	00e4      	lsls	r4, r4, #3
   333b6:	431c      	orrs	r4, r3
   333b8:	00ff      	lsls	r7, r7, #3
   333ba:	4e30      	ldr	r6, [pc, #192]	; (3347c <__aeabi_dadd+0x618>)
   333bc:	e5d6      	b.n	32f6c <__aeabi_dadd+0x108>
   333be:	000c      	movs	r4, r1
   333c0:	0017      	movs	r7, r2
   333c2:	0006      	movs	r6, r0
   333c4:	e5d2      	b.n	32f6c <__aeabi_dadd+0x108>
   333c6:	2b00      	cmp	r3, #0
   333c8:	d038      	beq.n	3343c <__aeabi_dadd+0x5d8>
   333ca:	000b      	movs	r3, r1
   333cc:	4313      	orrs	r3, r2
   333ce:	d100      	bne.n	333d2 <__aeabi_dadd+0x56e>
   333d0:	e742      	b.n	33258 <__aeabi_dadd+0x3f4>
   333d2:	08f8      	lsrs	r0, r7, #3
   333d4:	0767      	lsls	r7, r4, #29
   333d6:	4307      	orrs	r7, r0
   333d8:	2080      	movs	r0, #128	; 0x80
   333da:	08e4      	lsrs	r4, r4, #3
   333dc:	0300      	lsls	r0, r0, #12
   333de:	4204      	tst	r4, r0
   333e0:	d0e7      	beq.n	333b2 <__aeabi_dadd+0x54e>
   333e2:	08cb      	lsrs	r3, r1, #3
   333e4:	4203      	tst	r3, r0
   333e6:	d1e4      	bne.n	333b2 <__aeabi_dadd+0x54e>
   333e8:	08d2      	lsrs	r2, r2, #3
   333ea:	0749      	lsls	r1, r1, #29
   333ec:	4311      	orrs	r1, r2
   333ee:	000f      	movs	r7, r1
   333f0:	001c      	movs	r4, r3
   333f2:	e7de      	b.n	333b2 <__aeabi_dadd+0x54e>
   333f4:	2700      	movs	r7, #0
   333f6:	2400      	movs	r4, #0
   333f8:	e5d5      	b.n	32fa6 <__aeabi_dadd+0x142>
   333fa:	2100      	movs	r1, #0
   333fc:	e76b      	b.n	332d6 <__aeabi_dadd+0x472>
   333fe:	2500      	movs	r5, #0
   33400:	2700      	movs	r7, #0
   33402:	e5f3      	b.n	32fec <__aeabi_dadd+0x188>
   33404:	464e      	mov	r6, r9
   33406:	0025      	movs	r5, r4
   33408:	3e20      	subs	r6, #32
   3340a:	40f5      	lsrs	r5, r6
   3340c:	464b      	mov	r3, r9
   3340e:	002e      	movs	r6, r5
   33410:	2b20      	cmp	r3, #32
   33412:	d02d      	beq.n	33470 <__aeabi_dadd+0x60c>
   33414:	2540      	movs	r5, #64	; 0x40
   33416:	1aed      	subs	r5, r5, r3
   33418:	40ac      	lsls	r4, r5
   3341a:	4327      	orrs	r7, r4
   3341c:	1e7c      	subs	r4, r7, #1
   3341e:	41a7      	sbcs	r7, r4
   33420:	2400      	movs	r4, #0
   33422:	4337      	orrs	r7, r6
   33424:	e6c9      	b.n	331ba <__aeabi_dadd+0x356>
   33426:	2480      	movs	r4, #128	; 0x80
   33428:	2500      	movs	r5, #0
   3342a:	0324      	lsls	r4, r4, #12
   3342c:	4e13      	ldr	r6, [pc, #76]	; (3347c <__aeabi_dadd+0x618>)
   3342e:	2700      	movs	r7, #0
   33430:	e5dc      	b.n	32fec <__aeabi_dadd+0x188>
   33432:	4327      	orrs	r7, r4
   33434:	1e7c      	subs	r4, r7, #1
   33436:	41a7      	sbcs	r7, r4
   33438:	2400      	movs	r4, #0
   3343a:	e779      	b.n	33330 <__aeabi_dadd+0x4cc>
   3343c:	000c      	movs	r4, r1
   3343e:	0017      	movs	r7, r2
   33440:	4e0e      	ldr	r6, [pc, #56]	; (3347c <__aeabi_dadd+0x618>)
   33442:	e593      	b.n	32f6c <__aeabi_dadd+0x108>
   33444:	000c      	movs	r4, r1
   33446:	0017      	movs	r7, r2
   33448:	e590      	b.n	32f6c <__aeabi_dadd+0x108>
   3344a:	4656      	mov	r6, sl
   3344c:	0023      	movs	r3, r4
   3344e:	3e20      	subs	r6, #32
   33450:	40f3      	lsrs	r3, r6
   33452:	4699      	mov	r9, r3
   33454:	4653      	mov	r3, sl
   33456:	2b20      	cmp	r3, #32
   33458:	d00e      	beq.n	33478 <__aeabi_dadd+0x614>
   3345a:	2340      	movs	r3, #64	; 0x40
   3345c:	4656      	mov	r6, sl
   3345e:	1b9b      	subs	r3, r3, r6
   33460:	409c      	lsls	r4, r3
   33462:	4327      	orrs	r7, r4
   33464:	1e7c      	subs	r4, r7, #1
   33466:	41a7      	sbcs	r7, r4
   33468:	464b      	mov	r3, r9
   3346a:	2400      	movs	r4, #0
   3346c:	431f      	orrs	r7, r3
   3346e:	e75f      	b.n	33330 <__aeabi_dadd+0x4cc>
   33470:	2400      	movs	r4, #0
   33472:	e7d2      	b.n	3341a <__aeabi_dadd+0x5b6>
   33474:	0017      	movs	r7, r2
   33476:	e5b2      	b.n	32fde <__aeabi_dadd+0x17a>
   33478:	2400      	movs	r4, #0
   3347a:	e7f2      	b.n	33462 <__aeabi_dadd+0x5fe>
   3347c:	000007ff 	.word	0x000007ff
   33480:	ff7fffff 	.word	0xff7fffff

00033484 <__aeabi_ddiv>:
   33484:	b5f0      	push	{r4, r5, r6, r7, lr}
   33486:	4657      	mov	r7, sl
   33488:	4645      	mov	r5, r8
   3348a:	46de      	mov	lr, fp
   3348c:	464e      	mov	r6, r9
   3348e:	b5e0      	push	{r5, r6, r7, lr}
   33490:	004c      	lsls	r4, r1, #1
   33492:	030e      	lsls	r6, r1, #12
   33494:	b087      	sub	sp, #28
   33496:	4683      	mov	fp, r0
   33498:	4692      	mov	sl, r2
   3349a:	001d      	movs	r5, r3
   3349c:	4680      	mov	r8, r0
   3349e:	0b36      	lsrs	r6, r6, #12
   334a0:	0d64      	lsrs	r4, r4, #21
   334a2:	0fcf      	lsrs	r7, r1, #31
   334a4:	2c00      	cmp	r4, #0
   334a6:	d04f      	beq.n	33548 <__aeabi_ddiv+0xc4>
   334a8:	4b6f      	ldr	r3, [pc, #444]	; (33668 <__aeabi_ddiv+0x1e4>)
   334aa:	429c      	cmp	r4, r3
   334ac:	d035      	beq.n	3351a <__aeabi_ddiv+0x96>
   334ae:	2380      	movs	r3, #128	; 0x80
   334b0:	0f42      	lsrs	r2, r0, #29
   334b2:	041b      	lsls	r3, r3, #16
   334b4:	00f6      	lsls	r6, r6, #3
   334b6:	4313      	orrs	r3, r2
   334b8:	4333      	orrs	r3, r6
   334ba:	4699      	mov	r9, r3
   334bc:	00c3      	lsls	r3, r0, #3
   334be:	4698      	mov	r8, r3
   334c0:	4b6a      	ldr	r3, [pc, #424]	; (3366c <__aeabi_ddiv+0x1e8>)
   334c2:	2600      	movs	r6, #0
   334c4:	469c      	mov	ip, r3
   334c6:	2300      	movs	r3, #0
   334c8:	4464      	add	r4, ip
   334ca:	9303      	str	r3, [sp, #12]
   334cc:	032b      	lsls	r3, r5, #12
   334ce:	0b1b      	lsrs	r3, r3, #12
   334d0:	469b      	mov	fp, r3
   334d2:	006b      	lsls	r3, r5, #1
   334d4:	0fed      	lsrs	r5, r5, #31
   334d6:	4650      	mov	r0, sl
   334d8:	0d5b      	lsrs	r3, r3, #21
   334da:	9501      	str	r5, [sp, #4]
   334dc:	d05e      	beq.n	3359c <__aeabi_ddiv+0x118>
   334de:	4a62      	ldr	r2, [pc, #392]	; (33668 <__aeabi_ddiv+0x1e4>)
   334e0:	4293      	cmp	r3, r2
   334e2:	d053      	beq.n	3358c <__aeabi_ddiv+0x108>
   334e4:	465a      	mov	r2, fp
   334e6:	00d1      	lsls	r1, r2, #3
   334e8:	2280      	movs	r2, #128	; 0x80
   334ea:	0f40      	lsrs	r0, r0, #29
   334ec:	0412      	lsls	r2, r2, #16
   334ee:	4302      	orrs	r2, r0
   334f0:	430a      	orrs	r2, r1
   334f2:	4693      	mov	fp, r2
   334f4:	4652      	mov	r2, sl
   334f6:	00d1      	lsls	r1, r2, #3
   334f8:	4a5c      	ldr	r2, [pc, #368]	; (3366c <__aeabi_ddiv+0x1e8>)
   334fa:	4694      	mov	ip, r2
   334fc:	2200      	movs	r2, #0
   334fe:	4463      	add	r3, ip
   33500:	0038      	movs	r0, r7
   33502:	4068      	eors	r0, r5
   33504:	4684      	mov	ip, r0
   33506:	9002      	str	r0, [sp, #8]
   33508:	1ae4      	subs	r4, r4, r3
   3350a:	4316      	orrs	r6, r2
   3350c:	2e0f      	cmp	r6, #15
   3350e:	d900      	bls.n	33512 <__aeabi_ddiv+0x8e>
   33510:	e0b4      	b.n	3367c <__aeabi_ddiv+0x1f8>
   33512:	4b57      	ldr	r3, [pc, #348]	; (33670 <__aeabi_ddiv+0x1ec>)
   33514:	00b6      	lsls	r6, r6, #2
   33516:	599b      	ldr	r3, [r3, r6]
   33518:	469f      	mov	pc, r3
   3351a:	0003      	movs	r3, r0
   3351c:	4333      	orrs	r3, r6
   3351e:	4699      	mov	r9, r3
   33520:	d16c      	bne.n	335fc <__aeabi_ddiv+0x178>
   33522:	2300      	movs	r3, #0
   33524:	4698      	mov	r8, r3
   33526:	3302      	adds	r3, #2
   33528:	2608      	movs	r6, #8
   3352a:	9303      	str	r3, [sp, #12]
   3352c:	e7ce      	b.n	334cc <__aeabi_ddiv+0x48>
   3352e:	46cb      	mov	fp, r9
   33530:	4641      	mov	r1, r8
   33532:	9a03      	ldr	r2, [sp, #12]
   33534:	9701      	str	r7, [sp, #4]
   33536:	2a02      	cmp	r2, #2
   33538:	d165      	bne.n	33606 <__aeabi_ddiv+0x182>
   3353a:	9b01      	ldr	r3, [sp, #4]
   3353c:	4c4a      	ldr	r4, [pc, #296]	; (33668 <__aeabi_ddiv+0x1e4>)
   3353e:	469c      	mov	ip, r3
   33540:	2300      	movs	r3, #0
   33542:	2200      	movs	r2, #0
   33544:	4698      	mov	r8, r3
   33546:	e06b      	b.n	33620 <__aeabi_ddiv+0x19c>
   33548:	0003      	movs	r3, r0
   3354a:	4333      	orrs	r3, r6
   3354c:	4699      	mov	r9, r3
   3354e:	d04e      	beq.n	335ee <__aeabi_ddiv+0x16a>
   33550:	2e00      	cmp	r6, #0
   33552:	d100      	bne.n	33556 <__aeabi_ddiv+0xd2>
   33554:	e1bc      	b.n	338d0 <__aeabi_ddiv+0x44c>
   33556:	0030      	movs	r0, r6
   33558:	f001 f91c 	bl	34794 <__clzsi2>
   3355c:	0003      	movs	r3, r0
   3355e:	3b0b      	subs	r3, #11
   33560:	2b1c      	cmp	r3, #28
   33562:	dd00      	ble.n	33566 <__aeabi_ddiv+0xe2>
   33564:	e1ac      	b.n	338c0 <__aeabi_ddiv+0x43c>
   33566:	221d      	movs	r2, #29
   33568:	1ad3      	subs	r3, r2, r3
   3356a:	465a      	mov	r2, fp
   3356c:	0001      	movs	r1, r0
   3356e:	40da      	lsrs	r2, r3
   33570:	3908      	subs	r1, #8
   33572:	408e      	lsls	r6, r1
   33574:	0013      	movs	r3, r2
   33576:	4333      	orrs	r3, r6
   33578:	4699      	mov	r9, r3
   3357a:	465b      	mov	r3, fp
   3357c:	408b      	lsls	r3, r1
   3357e:	4698      	mov	r8, r3
   33580:	2300      	movs	r3, #0
   33582:	4c3c      	ldr	r4, [pc, #240]	; (33674 <__aeabi_ddiv+0x1f0>)
   33584:	2600      	movs	r6, #0
   33586:	1a24      	subs	r4, r4, r0
   33588:	9303      	str	r3, [sp, #12]
   3358a:	e79f      	b.n	334cc <__aeabi_ddiv+0x48>
   3358c:	4651      	mov	r1, sl
   3358e:	465a      	mov	r2, fp
   33590:	4311      	orrs	r1, r2
   33592:	d129      	bne.n	335e8 <__aeabi_ddiv+0x164>
   33594:	2200      	movs	r2, #0
   33596:	4693      	mov	fp, r2
   33598:	3202      	adds	r2, #2
   3359a:	e7b1      	b.n	33500 <__aeabi_ddiv+0x7c>
   3359c:	4659      	mov	r1, fp
   3359e:	4301      	orrs	r1, r0
   335a0:	d01e      	beq.n	335e0 <__aeabi_ddiv+0x15c>
   335a2:	465b      	mov	r3, fp
   335a4:	2b00      	cmp	r3, #0
   335a6:	d100      	bne.n	335aa <__aeabi_ddiv+0x126>
   335a8:	e19e      	b.n	338e8 <__aeabi_ddiv+0x464>
   335aa:	4658      	mov	r0, fp
   335ac:	f001 f8f2 	bl	34794 <__clzsi2>
   335b0:	0003      	movs	r3, r0
   335b2:	3b0b      	subs	r3, #11
   335b4:	2b1c      	cmp	r3, #28
   335b6:	dd00      	ble.n	335ba <__aeabi_ddiv+0x136>
   335b8:	e18f      	b.n	338da <__aeabi_ddiv+0x456>
   335ba:	0002      	movs	r2, r0
   335bc:	4659      	mov	r1, fp
   335be:	3a08      	subs	r2, #8
   335c0:	4091      	lsls	r1, r2
   335c2:	468b      	mov	fp, r1
   335c4:	211d      	movs	r1, #29
   335c6:	1acb      	subs	r3, r1, r3
   335c8:	4651      	mov	r1, sl
   335ca:	40d9      	lsrs	r1, r3
   335cc:	000b      	movs	r3, r1
   335ce:	4659      	mov	r1, fp
   335d0:	430b      	orrs	r3, r1
   335d2:	4651      	mov	r1, sl
   335d4:	469b      	mov	fp, r3
   335d6:	4091      	lsls	r1, r2
   335d8:	4b26      	ldr	r3, [pc, #152]	; (33674 <__aeabi_ddiv+0x1f0>)
   335da:	2200      	movs	r2, #0
   335dc:	1a1b      	subs	r3, r3, r0
   335de:	e78f      	b.n	33500 <__aeabi_ddiv+0x7c>
   335e0:	2300      	movs	r3, #0
   335e2:	2201      	movs	r2, #1
   335e4:	469b      	mov	fp, r3
   335e6:	e78b      	b.n	33500 <__aeabi_ddiv+0x7c>
   335e8:	4651      	mov	r1, sl
   335ea:	2203      	movs	r2, #3
   335ec:	e788      	b.n	33500 <__aeabi_ddiv+0x7c>
   335ee:	2300      	movs	r3, #0
   335f0:	4698      	mov	r8, r3
   335f2:	3301      	adds	r3, #1
   335f4:	2604      	movs	r6, #4
   335f6:	2400      	movs	r4, #0
   335f8:	9303      	str	r3, [sp, #12]
   335fa:	e767      	b.n	334cc <__aeabi_ddiv+0x48>
   335fc:	2303      	movs	r3, #3
   335fe:	46b1      	mov	r9, r6
   33600:	9303      	str	r3, [sp, #12]
   33602:	260c      	movs	r6, #12
   33604:	e762      	b.n	334cc <__aeabi_ddiv+0x48>
   33606:	2a03      	cmp	r2, #3
   33608:	d100      	bne.n	3360c <__aeabi_ddiv+0x188>
   3360a:	e25c      	b.n	33ac6 <__aeabi_ddiv+0x642>
   3360c:	9b01      	ldr	r3, [sp, #4]
   3360e:	2a01      	cmp	r2, #1
   33610:	d000      	beq.n	33614 <__aeabi_ddiv+0x190>
   33612:	e1e4      	b.n	339de <__aeabi_ddiv+0x55a>
   33614:	4013      	ands	r3, r2
   33616:	469c      	mov	ip, r3
   33618:	2300      	movs	r3, #0
   3361a:	2400      	movs	r4, #0
   3361c:	2200      	movs	r2, #0
   3361e:	4698      	mov	r8, r3
   33620:	2100      	movs	r1, #0
   33622:	0312      	lsls	r2, r2, #12
   33624:	0b13      	lsrs	r3, r2, #12
   33626:	0d0a      	lsrs	r2, r1, #20
   33628:	0512      	lsls	r2, r2, #20
   3362a:	431a      	orrs	r2, r3
   3362c:	0523      	lsls	r3, r4, #20
   3362e:	4c12      	ldr	r4, [pc, #72]	; (33678 <__aeabi_ddiv+0x1f4>)
   33630:	4640      	mov	r0, r8
   33632:	4022      	ands	r2, r4
   33634:	4313      	orrs	r3, r2
   33636:	4662      	mov	r2, ip
   33638:	005b      	lsls	r3, r3, #1
   3363a:	07d2      	lsls	r2, r2, #31
   3363c:	085b      	lsrs	r3, r3, #1
   3363e:	4313      	orrs	r3, r2
   33640:	0019      	movs	r1, r3
   33642:	b007      	add	sp, #28
   33644:	bc3c      	pop	{r2, r3, r4, r5}
   33646:	4690      	mov	r8, r2
   33648:	4699      	mov	r9, r3
   3364a:	46a2      	mov	sl, r4
   3364c:	46ab      	mov	fp, r5
   3364e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33650:	2300      	movs	r3, #0
   33652:	2280      	movs	r2, #128	; 0x80
   33654:	469c      	mov	ip, r3
   33656:	0312      	lsls	r2, r2, #12
   33658:	4698      	mov	r8, r3
   3365a:	4c03      	ldr	r4, [pc, #12]	; (33668 <__aeabi_ddiv+0x1e4>)
   3365c:	e7e0      	b.n	33620 <__aeabi_ddiv+0x19c>
   3365e:	2300      	movs	r3, #0
   33660:	4c01      	ldr	r4, [pc, #4]	; (33668 <__aeabi_ddiv+0x1e4>)
   33662:	2200      	movs	r2, #0
   33664:	4698      	mov	r8, r3
   33666:	e7db      	b.n	33620 <__aeabi_ddiv+0x19c>
   33668:	000007ff 	.word	0x000007ff
   3366c:	fffffc01 	.word	0xfffffc01
   33670:	0003a024 	.word	0x0003a024
   33674:	fffffc0d 	.word	0xfffffc0d
   33678:	800fffff 	.word	0x800fffff
   3367c:	45d9      	cmp	r9, fp
   3367e:	d900      	bls.n	33682 <__aeabi_ddiv+0x1fe>
   33680:	e139      	b.n	338f6 <__aeabi_ddiv+0x472>
   33682:	d100      	bne.n	33686 <__aeabi_ddiv+0x202>
   33684:	e134      	b.n	338f0 <__aeabi_ddiv+0x46c>
   33686:	2300      	movs	r3, #0
   33688:	4646      	mov	r6, r8
   3368a:	464d      	mov	r5, r9
   3368c:	469a      	mov	sl, r3
   3368e:	3c01      	subs	r4, #1
   33690:	465b      	mov	r3, fp
   33692:	0e0a      	lsrs	r2, r1, #24
   33694:	021b      	lsls	r3, r3, #8
   33696:	431a      	orrs	r2, r3
   33698:	020b      	lsls	r3, r1, #8
   3369a:	0c17      	lsrs	r7, r2, #16
   3369c:	9303      	str	r3, [sp, #12]
   3369e:	0413      	lsls	r3, r2, #16
   336a0:	0c1b      	lsrs	r3, r3, #16
   336a2:	0039      	movs	r1, r7
   336a4:	0028      	movs	r0, r5
   336a6:	4690      	mov	r8, r2
   336a8:	9301      	str	r3, [sp, #4]
   336aa:	f7ff f8ab 	bl	32804 <__udivsi3>
   336ae:	0002      	movs	r2, r0
   336b0:	9b01      	ldr	r3, [sp, #4]
   336b2:	4683      	mov	fp, r0
   336b4:	435a      	muls	r2, r3
   336b6:	0028      	movs	r0, r5
   336b8:	0039      	movs	r1, r7
   336ba:	4691      	mov	r9, r2
   336bc:	f7ff f928 	bl	32910 <__aeabi_uidivmod>
   336c0:	0c35      	lsrs	r5, r6, #16
   336c2:	0409      	lsls	r1, r1, #16
   336c4:	430d      	orrs	r5, r1
   336c6:	45a9      	cmp	r9, r5
   336c8:	d90d      	bls.n	336e6 <__aeabi_ddiv+0x262>
   336ca:	465b      	mov	r3, fp
   336cc:	4445      	add	r5, r8
   336ce:	3b01      	subs	r3, #1
   336d0:	45a8      	cmp	r8, r5
   336d2:	d900      	bls.n	336d6 <__aeabi_ddiv+0x252>
   336d4:	e13a      	b.n	3394c <__aeabi_ddiv+0x4c8>
   336d6:	45a9      	cmp	r9, r5
   336d8:	d800      	bhi.n	336dc <__aeabi_ddiv+0x258>
   336da:	e137      	b.n	3394c <__aeabi_ddiv+0x4c8>
   336dc:	2302      	movs	r3, #2
   336de:	425b      	negs	r3, r3
   336e0:	469c      	mov	ip, r3
   336e2:	4445      	add	r5, r8
   336e4:	44e3      	add	fp, ip
   336e6:	464b      	mov	r3, r9
   336e8:	1aeb      	subs	r3, r5, r3
   336ea:	0039      	movs	r1, r7
   336ec:	0018      	movs	r0, r3
   336ee:	9304      	str	r3, [sp, #16]
   336f0:	f7ff f888 	bl	32804 <__udivsi3>
   336f4:	9b01      	ldr	r3, [sp, #4]
   336f6:	0005      	movs	r5, r0
   336f8:	4343      	muls	r3, r0
   336fa:	0039      	movs	r1, r7
   336fc:	9804      	ldr	r0, [sp, #16]
   336fe:	4699      	mov	r9, r3
   33700:	f7ff f906 	bl	32910 <__aeabi_uidivmod>
   33704:	0433      	lsls	r3, r6, #16
   33706:	0409      	lsls	r1, r1, #16
   33708:	0c1b      	lsrs	r3, r3, #16
   3370a:	430b      	orrs	r3, r1
   3370c:	4599      	cmp	r9, r3
   3370e:	d909      	bls.n	33724 <__aeabi_ddiv+0x2a0>
   33710:	4443      	add	r3, r8
   33712:	1e6a      	subs	r2, r5, #1
   33714:	4598      	cmp	r8, r3
   33716:	d900      	bls.n	3371a <__aeabi_ddiv+0x296>
   33718:	e11a      	b.n	33950 <__aeabi_ddiv+0x4cc>
   3371a:	4599      	cmp	r9, r3
   3371c:	d800      	bhi.n	33720 <__aeabi_ddiv+0x29c>
   3371e:	e117      	b.n	33950 <__aeabi_ddiv+0x4cc>
   33720:	3d02      	subs	r5, #2
   33722:	4443      	add	r3, r8
   33724:	464a      	mov	r2, r9
   33726:	1a9b      	subs	r3, r3, r2
   33728:	465a      	mov	r2, fp
   3372a:	0412      	lsls	r2, r2, #16
   3372c:	432a      	orrs	r2, r5
   3372e:	9903      	ldr	r1, [sp, #12]
   33730:	4693      	mov	fp, r2
   33732:	0c10      	lsrs	r0, r2, #16
   33734:	0c0a      	lsrs	r2, r1, #16
   33736:	4691      	mov	r9, r2
   33738:	0409      	lsls	r1, r1, #16
   3373a:	465a      	mov	r2, fp
   3373c:	0c09      	lsrs	r1, r1, #16
   3373e:	464e      	mov	r6, r9
   33740:	000d      	movs	r5, r1
   33742:	0412      	lsls	r2, r2, #16
   33744:	0c12      	lsrs	r2, r2, #16
   33746:	4345      	muls	r5, r0
   33748:	9105      	str	r1, [sp, #20]
   3374a:	4351      	muls	r1, r2
   3374c:	4372      	muls	r2, r6
   3374e:	4370      	muls	r0, r6
   33750:	1952      	adds	r2, r2, r5
   33752:	0c0e      	lsrs	r6, r1, #16
   33754:	18b2      	adds	r2, r6, r2
   33756:	4295      	cmp	r5, r2
   33758:	d903      	bls.n	33762 <__aeabi_ddiv+0x2de>
   3375a:	2580      	movs	r5, #128	; 0x80
   3375c:	026d      	lsls	r5, r5, #9
   3375e:	46ac      	mov	ip, r5
   33760:	4460      	add	r0, ip
   33762:	0c15      	lsrs	r5, r2, #16
   33764:	0409      	lsls	r1, r1, #16
   33766:	0412      	lsls	r2, r2, #16
   33768:	0c09      	lsrs	r1, r1, #16
   3376a:	1828      	adds	r0, r5, r0
   3376c:	1852      	adds	r2, r2, r1
   3376e:	4283      	cmp	r3, r0
   33770:	d200      	bcs.n	33774 <__aeabi_ddiv+0x2f0>
   33772:	e0ce      	b.n	33912 <__aeabi_ddiv+0x48e>
   33774:	d100      	bne.n	33778 <__aeabi_ddiv+0x2f4>
   33776:	e0c8      	b.n	3390a <__aeabi_ddiv+0x486>
   33778:	1a1d      	subs	r5, r3, r0
   3377a:	4653      	mov	r3, sl
   3377c:	1a9e      	subs	r6, r3, r2
   3377e:	45b2      	cmp	sl, r6
   33780:	4192      	sbcs	r2, r2
   33782:	4252      	negs	r2, r2
   33784:	1aab      	subs	r3, r5, r2
   33786:	469a      	mov	sl, r3
   33788:	4598      	cmp	r8, r3
   3378a:	d100      	bne.n	3378e <__aeabi_ddiv+0x30a>
   3378c:	e117      	b.n	339be <__aeabi_ddiv+0x53a>
   3378e:	0039      	movs	r1, r7
   33790:	0018      	movs	r0, r3
   33792:	f7ff f837 	bl	32804 <__udivsi3>
   33796:	9b01      	ldr	r3, [sp, #4]
   33798:	0005      	movs	r5, r0
   3379a:	4343      	muls	r3, r0
   3379c:	0039      	movs	r1, r7
   3379e:	4650      	mov	r0, sl
   337a0:	9304      	str	r3, [sp, #16]
   337a2:	f7ff f8b5 	bl	32910 <__aeabi_uidivmod>
   337a6:	9804      	ldr	r0, [sp, #16]
   337a8:	040b      	lsls	r3, r1, #16
   337aa:	0c31      	lsrs	r1, r6, #16
   337ac:	4319      	orrs	r1, r3
   337ae:	4288      	cmp	r0, r1
   337b0:	d909      	bls.n	337c6 <__aeabi_ddiv+0x342>
   337b2:	4441      	add	r1, r8
   337b4:	1e6b      	subs	r3, r5, #1
   337b6:	4588      	cmp	r8, r1
   337b8:	d900      	bls.n	337bc <__aeabi_ddiv+0x338>
   337ba:	e107      	b.n	339cc <__aeabi_ddiv+0x548>
   337bc:	4288      	cmp	r0, r1
   337be:	d800      	bhi.n	337c2 <__aeabi_ddiv+0x33e>
   337c0:	e104      	b.n	339cc <__aeabi_ddiv+0x548>
   337c2:	3d02      	subs	r5, #2
   337c4:	4441      	add	r1, r8
   337c6:	9b04      	ldr	r3, [sp, #16]
   337c8:	1acb      	subs	r3, r1, r3
   337ca:	0018      	movs	r0, r3
   337cc:	0039      	movs	r1, r7
   337ce:	9304      	str	r3, [sp, #16]
   337d0:	f7ff f818 	bl	32804 <__udivsi3>
   337d4:	9b01      	ldr	r3, [sp, #4]
   337d6:	4682      	mov	sl, r0
   337d8:	4343      	muls	r3, r0
   337da:	0039      	movs	r1, r7
   337dc:	9804      	ldr	r0, [sp, #16]
   337de:	9301      	str	r3, [sp, #4]
   337e0:	f7ff f896 	bl	32910 <__aeabi_uidivmod>
   337e4:	9801      	ldr	r0, [sp, #4]
   337e6:	040b      	lsls	r3, r1, #16
   337e8:	0431      	lsls	r1, r6, #16
   337ea:	0c09      	lsrs	r1, r1, #16
   337ec:	4319      	orrs	r1, r3
   337ee:	4288      	cmp	r0, r1
   337f0:	d90d      	bls.n	3380e <__aeabi_ddiv+0x38a>
   337f2:	4653      	mov	r3, sl
   337f4:	4441      	add	r1, r8
   337f6:	3b01      	subs	r3, #1
   337f8:	4588      	cmp	r8, r1
   337fa:	d900      	bls.n	337fe <__aeabi_ddiv+0x37a>
   337fc:	e0e8      	b.n	339d0 <__aeabi_ddiv+0x54c>
   337fe:	4288      	cmp	r0, r1
   33800:	d800      	bhi.n	33804 <__aeabi_ddiv+0x380>
   33802:	e0e5      	b.n	339d0 <__aeabi_ddiv+0x54c>
   33804:	2302      	movs	r3, #2
   33806:	425b      	negs	r3, r3
   33808:	469c      	mov	ip, r3
   3380a:	4441      	add	r1, r8
   3380c:	44e2      	add	sl, ip
   3380e:	9b01      	ldr	r3, [sp, #4]
   33810:	042d      	lsls	r5, r5, #16
   33812:	1ace      	subs	r6, r1, r3
   33814:	4651      	mov	r1, sl
   33816:	4329      	orrs	r1, r5
   33818:	9d05      	ldr	r5, [sp, #20]
   3381a:	464f      	mov	r7, r9
   3381c:	002a      	movs	r2, r5
   3381e:	040b      	lsls	r3, r1, #16
   33820:	0c08      	lsrs	r0, r1, #16
   33822:	0c1b      	lsrs	r3, r3, #16
   33824:	435a      	muls	r2, r3
   33826:	4345      	muls	r5, r0
   33828:	437b      	muls	r3, r7
   3382a:	4378      	muls	r0, r7
   3382c:	195b      	adds	r3, r3, r5
   3382e:	0c17      	lsrs	r7, r2, #16
   33830:	18fb      	adds	r3, r7, r3
   33832:	429d      	cmp	r5, r3
   33834:	d903      	bls.n	3383e <__aeabi_ddiv+0x3ba>
   33836:	2580      	movs	r5, #128	; 0x80
   33838:	026d      	lsls	r5, r5, #9
   3383a:	46ac      	mov	ip, r5
   3383c:	4460      	add	r0, ip
   3383e:	0c1d      	lsrs	r5, r3, #16
   33840:	0412      	lsls	r2, r2, #16
   33842:	041b      	lsls	r3, r3, #16
   33844:	0c12      	lsrs	r2, r2, #16
   33846:	1828      	adds	r0, r5, r0
   33848:	189b      	adds	r3, r3, r2
   3384a:	4286      	cmp	r6, r0
   3384c:	d200      	bcs.n	33850 <__aeabi_ddiv+0x3cc>
   3384e:	e093      	b.n	33978 <__aeabi_ddiv+0x4f4>
   33850:	d100      	bne.n	33854 <__aeabi_ddiv+0x3d0>
   33852:	e08e      	b.n	33972 <__aeabi_ddiv+0x4ee>
   33854:	2301      	movs	r3, #1
   33856:	4319      	orrs	r1, r3
   33858:	4ba0      	ldr	r3, [pc, #640]	; (33adc <__aeabi_ddiv+0x658>)
   3385a:	18e3      	adds	r3, r4, r3
   3385c:	2b00      	cmp	r3, #0
   3385e:	dc00      	bgt.n	33862 <__aeabi_ddiv+0x3de>
   33860:	e099      	b.n	33996 <__aeabi_ddiv+0x512>
   33862:	074a      	lsls	r2, r1, #29
   33864:	d000      	beq.n	33868 <__aeabi_ddiv+0x3e4>
   33866:	e09e      	b.n	339a6 <__aeabi_ddiv+0x522>
   33868:	465a      	mov	r2, fp
   3386a:	01d2      	lsls	r2, r2, #7
   3386c:	d506      	bpl.n	3387c <__aeabi_ddiv+0x3f8>
   3386e:	465a      	mov	r2, fp
   33870:	4b9b      	ldr	r3, [pc, #620]	; (33ae0 <__aeabi_ddiv+0x65c>)
   33872:	401a      	ands	r2, r3
   33874:	2380      	movs	r3, #128	; 0x80
   33876:	4693      	mov	fp, r2
   33878:	00db      	lsls	r3, r3, #3
   3387a:	18e3      	adds	r3, r4, r3
   3387c:	4a99      	ldr	r2, [pc, #612]	; (33ae4 <__aeabi_ddiv+0x660>)
   3387e:	4293      	cmp	r3, r2
   33880:	dd68      	ble.n	33954 <__aeabi_ddiv+0x4d0>
   33882:	2301      	movs	r3, #1
   33884:	9a02      	ldr	r2, [sp, #8]
   33886:	4c98      	ldr	r4, [pc, #608]	; (33ae8 <__aeabi_ddiv+0x664>)
   33888:	401a      	ands	r2, r3
   3388a:	2300      	movs	r3, #0
   3388c:	4694      	mov	ip, r2
   3388e:	4698      	mov	r8, r3
   33890:	2200      	movs	r2, #0
   33892:	e6c5      	b.n	33620 <__aeabi_ddiv+0x19c>
   33894:	2280      	movs	r2, #128	; 0x80
   33896:	464b      	mov	r3, r9
   33898:	0312      	lsls	r2, r2, #12
   3389a:	4213      	tst	r3, r2
   3389c:	d00a      	beq.n	338b4 <__aeabi_ddiv+0x430>
   3389e:	465b      	mov	r3, fp
   338a0:	4213      	tst	r3, r2
   338a2:	d106      	bne.n	338b2 <__aeabi_ddiv+0x42e>
   338a4:	431a      	orrs	r2, r3
   338a6:	0312      	lsls	r2, r2, #12
   338a8:	0b12      	lsrs	r2, r2, #12
   338aa:	46ac      	mov	ip, r5
   338ac:	4688      	mov	r8, r1
   338ae:	4c8e      	ldr	r4, [pc, #568]	; (33ae8 <__aeabi_ddiv+0x664>)
   338b0:	e6b6      	b.n	33620 <__aeabi_ddiv+0x19c>
   338b2:	464b      	mov	r3, r9
   338b4:	431a      	orrs	r2, r3
   338b6:	0312      	lsls	r2, r2, #12
   338b8:	0b12      	lsrs	r2, r2, #12
   338ba:	46bc      	mov	ip, r7
   338bc:	4c8a      	ldr	r4, [pc, #552]	; (33ae8 <__aeabi_ddiv+0x664>)
   338be:	e6af      	b.n	33620 <__aeabi_ddiv+0x19c>
   338c0:	0003      	movs	r3, r0
   338c2:	465a      	mov	r2, fp
   338c4:	3b28      	subs	r3, #40	; 0x28
   338c6:	409a      	lsls	r2, r3
   338c8:	2300      	movs	r3, #0
   338ca:	4691      	mov	r9, r2
   338cc:	4698      	mov	r8, r3
   338ce:	e657      	b.n	33580 <__aeabi_ddiv+0xfc>
   338d0:	4658      	mov	r0, fp
   338d2:	f000 ff5f 	bl	34794 <__clzsi2>
   338d6:	3020      	adds	r0, #32
   338d8:	e640      	b.n	3355c <__aeabi_ddiv+0xd8>
   338da:	0003      	movs	r3, r0
   338dc:	4652      	mov	r2, sl
   338de:	3b28      	subs	r3, #40	; 0x28
   338e0:	409a      	lsls	r2, r3
   338e2:	2100      	movs	r1, #0
   338e4:	4693      	mov	fp, r2
   338e6:	e677      	b.n	335d8 <__aeabi_ddiv+0x154>
   338e8:	f000 ff54 	bl	34794 <__clzsi2>
   338ec:	3020      	adds	r0, #32
   338ee:	e65f      	b.n	335b0 <__aeabi_ddiv+0x12c>
   338f0:	4588      	cmp	r8, r1
   338f2:	d200      	bcs.n	338f6 <__aeabi_ddiv+0x472>
   338f4:	e6c7      	b.n	33686 <__aeabi_ddiv+0x202>
   338f6:	464b      	mov	r3, r9
   338f8:	07de      	lsls	r6, r3, #31
   338fa:	085d      	lsrs	r5, r3, #1
   338fc:	4643      	mov	r3, r8
   338fe:	085b      	lsrs	r3, r3, #1
   33900:	431e      	orrs	r6, r3
   33902:	4643      	mov	r3, r8
   33904:	07db      	lsls	r3, r3, #31
   33906:	469a      	mov	sl, r3
   33908:	e6c2      	b.n	33690 <__aeabi_ddiv+0x20c>
   3390a:	2500      	movs	r5, #0
   3390c:	4592      	cmp	sl, r2
   3390e:	d300      	bcc.n	33912 <__aeabi_ddiv+0x48e>
   33910:	e733      	b.n	3377a <__aeabi_ddiv+0x2f6>
   33912:	9e03      	ldr	r6, [sp, #12]
   33914:	4659      	mov	r1, fp
   33916:	46b4      	mov	ip, r6
   33918:	44e2      	add	sl, ip
   3391a:	45b2      	cmp	sl, r6
   3391c:	41ad      	sbcs	r5, r5
   3391e:	426d      	negs	r5, r5
   33920:	4445      	add	r5, r8
   33922:	18eb      	adds	r3, r5, r3
   33924:	3901      	subs	r1, #1
   33926:	4598      	cmp	r8, r3
   33928:	d207      	bcs.n	3393a <__aeabi_ddiv+0x4b6>
   3392a:	4298      	cmp	r0, r3
   3392c:	d900      	bls.n	33930 <__aeabi_ddiv+0x4ac>
   3392e:	e07f      	b.n	33a30 <__aeabi_ddiv+0x5ac>
   33930:	d100      	bne.n	33934 <__aeabi_ddiv+0x4b0>
   33932:	e0bc      	b.n	33aae <__aeabi_ddiv+0x62a>
   33934:	1a1d      	subs	r5, r3, r0
   33936:	468b      	mov	fp, r1
   33938:	e71f      	b.n	3377a <__aeabi_ddiv+0x2f6>
   3393a:	4598      	cmp	r8, r3
   3393c:	d1fa      	bne.n	33934 <__aeabi_ddiv+0x4b0>
   3393e:	9d03      	ldr	r5, [sp, #12]
   33940:	4555      	cmp	r5, sl
   33942:	d9f2      	bls.n	3392a <__aeabi_ddiv+0x4a6>
   33944:	4643      	mov	r3, r8
   33946:	468b      	mov	fp, r1
   33948:	1a1d      	subs	r5, r3, r0
   3394a:	e716      	b.n	3377a <__aeabi_ddiv+0x2f6>
   3394c:	469b      	mov	fp, r3
   3394e:	e6ca      	b.n	336e6 <__aeabi_ddiv+0x262>
   33950:	0015      	movs	r5, r2
   33952:	e6e7      	b.n	33724 <__aeabi_ddiv+0x2a0>
   33954:	465a      	mov	r2, fp
   33956:	08c9      	lsrs	r1, r1, #3
   33958:	0752      	lsls	r2, r2, #29
   3395a:	430a      	orrs	r2, r1
   3395c:	055b      	lsls	r3, r3, #21
   3395e:	4690      	mov	r8, r2
   33960:	0d5c      	lsrs	r4, r3, #21
   33962:	465a      	mov	r2, fp
   33964:	2301      	movs	r3, #1
   33966:	9902      	ldr	r1, [sp, #8]
   33968:	0252      	lsls	r2, r2, #9
   3396a:	4019      	ands	r1, r3
   3396c:	0b12      	lsrs	r2, r2, #12
   3396e:	468c      	mov	ip, r1
   33970:	e656      	b.n	33620 <__aeabi_ddiv+0x19c>
   33972:	2b00      	cmp	r3, #0
   33974:	d100      	bne.n	33978 <__aeabi_ddiv+0x4f4>
   33976:	e76f      	b.n	33858 <__aeabi_ddiv+0x3d4>
   33978:	4446      	add	r6, r8
   3397a:	1e4a      	subs	r2, r1, #1
   3397c:	45b0      	cmp	r8, r6
   3397e:	d929      	bls.n	339d4 <__aeabi_ddiv+0x550>
   33980:	0011      	movs	r1, r2
   33982:	4286      	cmp	r6, r0
   33984:	d000      	beq.n	33988 <__aeabi_ddiv+0x504>
   33986:	e765      	b.n	33854 <__aeabi_ddiv+0x3d0>
   33988:	9a03      	ldr	r2, [sp, #12]
   3398a:	4293      	cmp	r3, r2
   3398c:	d000      	beq.n	33990 <__aeabi_ddiv+0x50c>
   3398e:	e761      	b.n	33854 <__aeabi_ddiv+0x3d0>
   33990:	e762      	b.n	33858 <__aeabi_ddiv+0x3d4>
   33992:	2101      	movs	r1, #1
   33994:	4249      	negs	r1, r1
   33996:	2001      	movs	r0, #1
   33998:	1ac2      	subs	r2, r0, r3
   3399a:	2a38      	cmp	r2, #56	; 0x38
   3399c:	dd21      	ble.n	339e2 <__aeabi_ddiv+0x55e>
   3399e:	9b02      	ldr	r3, [sp, #8]
   339a0:	4003      	ands	r3, r0
   339a2:	469c      	mov	ip, r3
   339a4:	e638      	b.n	33618 <__aeabi_ddiv+0x194>
   339a6:	220f      	movs	r2, #15
   339a8:	400a      	ands	r2, r1
   339aa:	2a04      	cmp	r2, #4
   339ac:	d100      	bne.n	339b0 <__aeabi_ddiv+0x52c>
   339ae:	e75b      	b.n	33868 <__aeabi_ddiv+0x3e4>
   339b0:	000a      	movs	r2, r1
   339b2:	1d11      	adds	r1, r2, #4
   339b4:	4291      	cmp	r1, r2
   339b6:	4192      	sbcs	r2, r2
   339b8:	4252      	negs	r2, r2
   339ba:	4493      	add	fp, r2
   339bc:	e754      	b.n	33868 <__aeabi_ddiv+0x3e4>
   339be:	4b47      	ldr	r3, [pc, #284]	; (33adc <__aeabi_ddiv+0x658>)
   339c0:	18e3      	adds	r3, r4, r3
   339c2:	2b00      	cmp	r3, #0
   339c4:	dde5      	ble.n	33992 <__aeabi_ddiv+0x50e>
   339c6:	2201      	movs	r2, #1
   339c8:	4252      	negs	r2, r2
   339ca:	e7f2      	b.n	339b2 <__aeabi_ddiv+0x52e>
   339cc:	001d      	movs	r5, r3
   339ce:	e6fa      	b.n	337c6 <__aeabi_ddiv+0x342>
   339d0:	469a      	mov	sl, r3
   339d2:	e71c      	b.n	3380e <__aeabi_ddiv+0x38a>
   339d4:	42b0      	cmp	r0, r6
   339d6:	d839      	bhi.n	33a4c <__aeabi_ddiv+0x5c8>
   339d8:	d06e      	beq.n	33ab8 <__aeabi_ddiv+0x634>
   339da:	0011      	movs	r1, r2
   339dc:	e73a      	b.n	33854 <__aeabi_ddiv+0x3d0>
   339de:	9302      	str	r3, [sp, #8]
   339e0:	e73a      	b.n	33858 <__aeabi_ddiv+0x3d4>
   339e2:	2a1f      	cmp	r2, #31
   339e4:	dc3c      	bgt.n	33a60 <__aeabi_ddiv+0x5dc>
   339e6:	2320      	movs	r3, #32
   339e8:	1a9b      	subs	r3, r3, r2
   339ea:	000c      	movs	r4, r1
   339ec:	4658      	mov	r0, fp
   339ee:	4099      	lsls	r1, r3
   339f0:	4098      	lsls	r0, r3
   339f2:	1e4b      	subs	r3, r1, #1
   339f4:	4199      	sbcs	r1, r3
   339f6:	465b      	mov	r3, fp
   339f8:	40d4      	lsrs	r4, r2
   339fa:	40d3      	lsrs	r3, r2
   339fc:	4320      	orrs	r0, r4
   339fe:	4308      	orrs	r0, r1
   33a00:	001a      	movs	r2, r3
   33a02:	0743      	lsls	r3, r0, #29
   33a04:	d009      	beq.n	33a1a <__aeabi_ddiv+0x596>
   33a06:	230f      	movs	r3, #15
   33a08:	4003      	ands	r3, r0
   33a0a:	2b04      	cmp	r3, #4
   33a0c:	d005      	beq.n	33a1a <__aeabi_ddiv+0x596>
   33a0e:	0001      	movs	r1, r0
   33a10:	1d08      	adds	r0, r1, #4
   33a12:	4288      	cmp	r0, r1
   33a14:	419b      	sbcs	r3, r3
   33a16:	425b      	negs	r3, r3
   33a18:	18d2      	adds	r2, r2, r3
   33a1a:	0213      	lsls	r3, r2, #8
   33a1c:	d53a      	bpl.n	33a94 <__aeabi_ddiv+0x610>
   33a1e:	2301      	movs	r3, #1
   33a20:	9a02      	ldr	r2, [sp, #8]
   33a22:	2401      	movs	r4, #1
   33a24:	401a      	ands	r2, r3
   33a26:	2300      	movs	r3, #0
   33a28:	4694      	mov	ip, r2
   33a2a:	4698      	mov	r8, r3
   33a2c:	2200      	movs	r2, #0
   33a2e:	e5f7      	b.n	33620 <__aeabi_ddiv+0x19c>
   33a30:	2102      	movs	r1, #2
   33a32:	4249      	negs	r1, r1
   33a34:	468c      	mov	ip, r1
   33a36:	9d03      	ldr	r5, [sp, #12]
   33a38:	44e3      	add	fp, ip
   33a3a:	46ac      	mov	ip, r5
   33a3c:	44e2      	add	sl, ip
   33a3e:	45aa      	cmp	sl, r5
   33a40:	41ad      	sbcs	r5, r5
   33a42:	426d      	negs	r5, r5
   33a44:	4445      	add	r5, r8
   33a46:	18ed      	adds	r5, r5, r3
   33a48:	1a2d      	subs	r5, r5, r0
   33a4a:	e696      	b.n	3377a <__aeabi_ddiv+0x2f6>
   33a4c:	1e8a      	subs	r2, r1, #2
   33a4e:	9903      	ldr	r1, [sp, #12]
   33a50:	004d      	lsls	r5, r1, #1
   33a52:	428d      	cmp	r5, r1
   33a54:	4189      	sbcs	r1, r1
   33a56:	4249      	negs	r1, r1
   33a58:	4441      	add	r1, r8
   33a5a:	1876      	adds	r6, r6, r1
   33a5c:	9503      	str	r5, [sp, #12]
   33a5e:	e78f      	b.n	33980 <__aeabi_ddiv+0x4fc>
   33a60:	201f      	movs	r0, #31
   33a62:	4240      	negs	r0, r0
   33a64:	1ac3      	subs	r3, r0, r3
   33a66:	4658      	mov	r0, fp
   33a68:	40d8      	lsrs	r0, r3
   33a6a:	0003      	movs	r3, r0
   33a6c:	2a20      	cmp	r2, #32
   33a6e:	d028      	beq.n	33ac2 <__aeabi_ddiv+0x63e>
   33a70:	2040      	movs	r0, #64	; 0x40
   33a72:	465d      	mov	r5, fp
   33a74:	1a82      	subs	r2, r0, r2
   33a76:	4095      	lsls	r5, r2
   33a78:	4329      	orrs	r1, r5
   33a7a:	1e4a      	subs	r2, r1, #1
   33a7c:	4191      	sbcs	r1, r2
   33a7e:	4319      	orrs	r1, r3
   33a80:	2307      	movs	r3, #7
   33a82:	2200      	movs	r2, #0
   33a84:	400b      	ands	r3, r1
   33a86:	d009      	beq.n	33a9c <__aeabi_ddiv+0x618>
   33a88:	230f      	movs	r3, #15
   33a8a:	2200      	movs	r2, #0
   33a8c:	400b      	ands	r3, r1
   33a8e:	0008      	movs	r0, r1
   33a90:	2b04      	cmp	r3, #4
   33a92:	d1bd      	bne.n	33a10 <__aeabi_ddiv+0x58c>
   33a94:	0001      	movs	r1, r0
   33a96:	0753      	lsls	r3, r2, #29
   33a98:	0252      	lsls	r2, r2, #9
   33a9a:	0b12      	lsrs	r2, r2, #12
   33a9c:	08c9      	lsrs	r1, r1, #3
   33a9e:	4319      	orrs	r1, r3
   33aa0:	2301      	movs	r3, #1
   33aa2:	4688      	mov	r8, r1
   33aa4:	9902      	ldr	r1, [sp, #8]
   33aa6:	2400      	movs	r4, #0
   33aa8:	4019      	ands	r1, r3
   33aaa:	468c      	mov	ip, r1
   33aac:	e5b8      	b.n	33620 <__aeabi_ddiv+0x19c>
   33aae:	4552      	cmp	r2, sl
   33ab0:	d8be      	bhi.n	33a30 <__aeabi_ddiv+0x5ac>
   33ab2:	468b      	mov	fp, r1
   33ab4:	2500      	movs	r5, #0
   33ab6:	e660      	b.n	3377a <__aeabi_ddiv+0x2f6>
   33ab8:	9d03      	ldr	r5, [sp, #12]
   33aba:	429d      	cmp	r5, r3
   33abc:	d3c6      	bcc.n	33a4c <__aeabi_ddiv+0x5c8>
   33abe:	0011      	movs	r1, r2
   33ac0:	e762      	b.n	33988 <__aeabi_ddiv+0x504>
   33ac2:	2500      	movs	r5, #0
   33ac4:	e7d8      	b.n	33a78 <__aeabi_ddiv+0x5f4>
   33ac6:	2280      	movs	r2, #128	; 0x80
   33ac8:	465b      	mov	r3, fp
   33aca:	0312      	lsls	r2, r2, #12
   33acc:	431a      	orrs	r2, r3
   33ace:	9b01      	ldr	r3, [sp, #4]
   33ad0:	0312      	lsls	r2, r2, #12
   33ad2:	0b12      	lsrs	r2, r2, #12
   33ad4:	469c      	mov	ip, r3
   33ad6:	4688      	mov	r8, r1
   33ad8:	4c03      	ldr	r4, [pc, #12]	; (33ae8 <__aeabi_ddiv+0x664>)
   33ada:	e5a1      	b.n	33620 <__aeabi_ddiv+0x19c>
   33adc:	000003ff 	.word	0x000003ff
   33ae0:	feffffff 	.word	0xfeffffff
   33ae4:	000007fe 	.word	0x000007fe
   33ae8:	000007ff 	.word	0x000007ff

00033aec <__aeabi_dmul>:
   33aec:	b5f0      	push	{r4, r5, r6, r7, lr}
   33aee:	4657      	mov	r7, sl
   33af0:	4645      	mov	r5, r8
   33af2:	46de      	mov	lr, fp
   33af4:	464e      	mov	r6, r9
   33af6:	b5e0      	push	{r5, r6, r7, lr}
   33af8:	030c      	lsls	r4, r1, #12
   33afa:	4698      	mov	r8, r3
   33afc:	004e      	lsls	r6, r1, #1
   33afe:	0b23      	lsrs	r3, r4, #12
   33b00:	b087      	sub	sp, #28
   33b02:	0007      	movs	r7, r0
   33b04:	4692      	mov	sl, r2
   33b06:	469b      	mov	fp, r3
   33b08:	0d76      	lsrs	r6, r6, #21
   33b0a:	0fcd      	lsrs	r5, r1, #31
   33b0c:	2e00      	cmp	r6, #0
   33b0e:	d06b      	beq.n	33be8 <__aeabi_dmul+0xfc>
   33b10:	4b6d      	ldr	r3, [pc, #436]	; (33cc8 <__aeabi_dmul+0x1dc>)
   33b12:	429e      	cmp	r6, r3
   33b14:	d035      	beq.n	33b82 <__aeabi_dmul+0x96>
   33b16:	2480      	movs	r4, #128	; 0x80
   33b18:	465b      	mov	r3, fp
   33b1a:	0f42      	lsrs	r2, r0, #29
   33b1c:	0424      	lsls	r4, r4, #16
   33b1e:	00db      	lsls	r3, r3, #3
   33b20:	4314      	orrs	r4, r2
   33b22:	431c      	orrs	r4, r3
   33b24:	00c3      	lsls	r3, r0, #3
   33b26:	4699      	mov	r9, r3
   33b28:	4b68      	ldr	r3, [pc, #416]	; (33ccc <__aeabi_dmul+0x1e0>)
   33b2a:	46a3      	mov	fp, r4
   33b2c:	469c      	mov	ip, r3
   33b2e:	2300      	movs	r3, #0
   33b30:	2700      	movs	r7, #0
   33b32:	4466      	add	r6, ip
   33b34:	9302      	str	r3, [sp, #8]
   33b36:	4643      	mov	r3, r8
   33b38:	031c      	lsls	r4, r3, #12
   33b3a:	005a      	lsls	r2, r3, #1
   33b3c:	0fdb      	lsrs	r3, r3, #31
   33b3e:	4650      	mov	r0, sl
   33b40:	0b24      	lsrs	r4, r4, #12
   33b42:	0d52      	lsrs	r2, r2, #21
   33b44:	4698      	mov	r8, r3
   33b46:	d100      	bne.n	33b4a <__aeabi_dmul+0x5e>
   33b48:	e076      	b.n	33c38 <__aeabi_dmul+0x14c>
   33b4a:	4b5f      	ldr	r3, [pc, #380]	; (33cc8 <__aeabi_dmul+0x1dc>)
   33b4c:	429a      	cmp	r2, r3
   33b4e:	d06d      	beq.n	33c2c <__aeabi_dmul+0x140>
   33b50:	2380      	movs	r3, #128	; 0x80
   33b52:	0f41      	lsrs	r1, r0, #29
   33b54:	041b      	lsls	r3, r3, #16
   33b56:	430b      	orrs	r3, r1
   33b58:	495c      	ldr	r1, [pc, #368]	; (33ccc <__aeabi_dmul+0x1e0>)
   33b5a:	00e4      	lsls	r4, r4, #3
   33b5c:	468c      	mov	ip, r1
   33b5e:	431c      	orrs	r4, r3
   33b60:	00c3      	lsls	r3, r0, #3
   33b62:	2000      	movs	r0, #0
   33b64:	4462      	add	r2, ip
   33b66:	4641      	mov	r1, r8
   33b68:	18b6      	adds	r6, r6, r2
   33b6a:	4069      	eors	r1, r5
   33b6c:	1c72      	adds	r2, r6, #1
   33b6e:	9101      	str	r1, [sp, #4]
   33b70:	4694      	mov	ip, r2
   33b72:	4307      	orrs	r7, r0
   33b74:	2f0f      	cmp	r7, #15
   33b76:	d900      	bls.n	33b7a <__aeabi_dmul+0x8e>
   33b78:	e0b0      	b.n	33cdc <__aeabi_dmul+0x1f0>
   33b7a:	4a55      	ldr	r2, [pc, #340]	; (33cd0 <__aeabi_dmul+0x1e4>)
   33b7c:	00bf      	lsls	r7, r7, #2
   33b7e:	59d2      	ldr	r2, [r2, r7]
   33b80:	4697      	mov	pc, r2
   33b82:	465b      	mov	r3, fp
   33b84:	4303      	orrs	r3, r0
   33b86:	4699      	mov	r9, r3
   33b88:	d000      	beq.n	33b8c <__aeabi_dmul+0xa0>
   33b8a:	e087      	b.n	33c9c <__aeabi_dmul+0x1b0>
   33b8c:	2300      	movs	r3, #0
   33b8e:	469b      	mov	fp, r3
   33b90:	3302      	adds	r3, #2
   33b92:	2708      	movs	r7, #8
   33b94:	9302      	str	r3, [sp, #8]
   33b96:	e7ce      	b.n	33b36 <__aeabi_dmul+0x4a>
   33b98:	4642      	mov	r2, r8
   33b9a:	9201      	str	r2, [sp, #4]
   33b9c:	2802      	cmp	r0, #2
   33b9e:	d067      	beq.n	33c70 <__aeabi_dmul+0x184>
   33ba0:	2803      	cmp	r0, #3
   33ba2:	d100      	bne.n	33ba6 <__aeabi_dmul+0xba>
   33ba4:	e20e      	b.n	33fc4 <__aeabi_dmul+0x4d8>
   33ba6:	2801      	cmp	r0, #1
   33ba8:	d000      	beq.n	33bac <__aeabi_dmul+0xc0>
   33baa:	e162      	b.n	33e72 <__aeabi_dmul+0x386>
   33bac:	2300      	movs	r3, #0
   33bae:	2400      	movs	r4, #0
   33bb0:	2200      	movs	r2, #0
   33bb2:	4699      	mov	r9, r3
   33bb4:	9901      	ldr	r1, [sp, #4]
   33bb6:	4001      	ands	r1, r0
   33bb8:	b2cd      	uxtb	r5, r1
   33bba:	2100      	movs	r1, #0
   33bbc:	0312      	lsls	r2, r2, #12
   33bbe:	0d0b      	lsrs	r3, r1, #20
   33bc0:	0b12      	lsrs	r2, r2, #12
   33bc2:	051b      	lsls	r3, r3, #20
   33bc4:	4313      	orrs	r3, r2
   33bc6:	4a43      	ldr	r2, [pc, #268]	; (33cd4 <__aeabi_dmul+0x1e8>)
   33bc8:	0524      	lsls	r4, r4, #20
   33bca:	4013      	ands	r3, r2
   33bcc:	431c      	orrs	r4, r3
   33bce:	0064      	lsls	r4, r4, #1
   33bd0:	07ed      	lsls	r5, r5, #31
   33bd2:	0864      	lsrs	r4, r4, #1
   33bd4:	432c      	orrs	r4, r5
   33bd6:	4648      	mov	r0, r9
   33bd8:	0021      	movs	r1, r4
   33bda:	b007      	add	sp, #28
   33bdc:	bc3c      	pop	{r2, r3, r4, r5}
   33bde:	4690      	mov	r8, r2
   33be0:	4699      	mov	r9, r3
   33be2:	46a2      	mov	sl, r4
   33be4:	46ab      	mov	fp, r5
   33be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33be8:	4303      	orrs	r3, r0
   33bea:	4699      	mov	r9, r3
   33bec:	d04f      	beq.n	33c8e <__aeabi_dmul+0x1a2>
   33bee:	465b      	mov	r3, fp
   33bf0:	2b00      	cmp	r3, #0
   33bf2:	d100      	bne.n	33bf6 <__aeabi_dmul+0x10a>
   33bf4:	e189      	b.n	33f0a <__aeabi_dmul+0x41e>
   33bf6:	4658      	mov	r0, fp
   33bf8:	f000 fdcc 	bl	34794 <__clzsi2>
   33bfc:	0003      	movs	r3, r0
   33bfe:	3b0b      	subs	r3, #11
   33c00:	2b1c      	cmp	r3, #28
   33c02:	dd00      	ble.n	33c06 <__aeabi_dmul+0x11a>
   33c04:	e17a      	b.n	33efc <__aeabi_dmul+0x410>
   33c06:	221d      	movs	r2, #29
   33c08:	1ad3      	subs	r3, r2, r3
   33c0a:	003a      	movs	r2, r7
   33c0c:	0001      	movs	r1, r0
   33c0e:	465c      	mov	r4, fp
   33c10:	40da      	lsrs	r2, r3
   33c12:	3908      	subs	r1, #8
   33c14:	408c      	lsls	r4, r1
   33c16:	0013      	movs	r3, r2
   33c18:	408f      	lsls	r7, r1
   33c1a:	4323      	orrs	r3, r4
   33c1c:	469b      	mov	fp, r3
   33c1e:	46b9      	mov	r9, r7
   33c20:	2300      	movs	r3, #0
   33c22:	4e2d      	ldr	r6, [pc, #180]	; (33cd8 <__aeabi_dmul+0x1ec>)
   33c24:	2700      	movs	r7, #0
   33c26:	1a36      	subs	r6, r6, r0
   33c28:	9302      	str	r3, [sp, #8]
   33c2a:	e784      	b.n	33b36 <__aeabi_dmul+0x4a>
   33c2c:	4653      	mov	r3, sl
   33c2e:	4323      	orrs	r3, r4
   33c30:	d12a      	bne.n	33c88 <__aeabi_dmul+0x19c>
   33c32:	2400      	movs	r4, #0
   33c34:	2002      	movs	r0, #2
   33c36:	e796      	b.n	33b66 <__aeabi_dmul+0x7a>
   33c38:	4653      	mov	r3, sl
   33c3a:	4323      	orrs	r3, r4
   33c3c:	d020      	beq.n	33c80 <__aeabi_dmul+0x194>
   33c3e:	2c00      	cmp	r4, #0
   33c40:	d100      	bne.n	33c44 <__aeabi_dmul+0x158>
   33c42:	e157      	b.n	33ef4 <__aeabi_dmul+0x408>
   33c44:	0020      	movs	r0, r4
   33c46:	f000 fda5 	bl	34794 <__clzsi2>
   33c4a:	0003      	movs	r3, r0
   33c4c:	3b0b      	subs	r3, #11
   33c4e:	2b1c      	cmp	r3, #28
   33c50:	dd00      	ble.n	33c54 <__aeabi_dmul+0x168>
   33c52:	e149      	b.n	33ee8 <__aeabi_dmul+0x3fc>
   33c54:	211d      	movs	r1, #29
   33c56:	1acb      	subs	r3, r1, r3
   33c58:	4651      	mov	r1, sl
   33c5a:	0002      	movs	r2, r0
   33c5c:	40d9      	lsrs	r1, r3
   33c5e:	4653      	mov	r3, sl
   33c60:	3a08      	subs	r2, #8
   33c62:	4094      	lsls	r4, r2
   33c64:	4093      	lsls	r3, r2
   33c66:	430c      	orrs	r4, r1
   33c68:	4a1b      	ldr	r2, [pc, #108]	; (33cd8 <__aeabi_dmul+0x1ec>)
   33c6a:	1a12      	subs	r2, r2, r0
   33c6c:	2000      	movs	r0, #0
   33c6e:	e77a      	b.n	33b66 <__aeabi_dmul+0x7a>
   33c70:	2501      	movs	r5, #1
   33c72:	9b01      	ldr	r3, [sp, #4]
   33c74:	4c14      	ldr	r4, [pc, #80]	; (33cc8 <__aeabi_dmul+0x1dc>)
   33c76:	401d      	ands	r5, r3
   33c78:	2300      	movs	r3, #0
   33c7a:	2200      	movs	r2, #0
   33c7c:	4699      	mov	r9, r3
   33c7e:	e79c      	b.n	33bba <__aeabi_dmul+0xce>
   33c80:	2400      	movs	r4, #0
   33c82:	2200      	movs	r2, #0
   33c84:	2001      	movs	r0, #1
   33c86:	e76e      	b.n	33b66 <__aeabi_dmul+0x7a>
   33c88:	4653      	mov	r3, sl
   33c8a:	2003      	movs	r0, #3
   33c8c:	e76b      	b.n	33b66 <__aeabi_dmul+0x7a>
   33c8e:	2300      	movs	r3, #0
   33c90:	469b      	mov	fp, r3
   33c92:	3301      	adds	r3, #1
   33c94:	2704      	movs	r7, #4
   33c96:	2600      	movs	r6, #0
   33c98:	9302      	str	r3, [sp, #8]
   33c9a:	e74c      	b.n	33b36 <__aeabi_dmul+0x4a>
   33c9c:	2303      	movs	r3, #3
   33c9e:	4681      	mov	r9, r0
   33ca0:	270c      	movs	r7, #12
   33ca2:	9302      	str	r3, [sp, #8]
   33ca4:	e747      	b.n	33b36 <__aeabi_dmul+0x4a>
   33ca6:	2280      	movs	r2, #128	; 0x80
   33ca8:	2300      	movs	r3, #0
   33caa:	2500      	movs	r5, #0
   33cac:	0312      	lsls	r2, r2, #12
   33cae:	4699      	mov	r9, r3
   33cb0:	4c05      	ldr	r4, [pc, #20]	; (33cc8 <__aeabi_dmul+0x1dc>)
   33cb2:	e782      	b.n	33bba <__aeabi_dmul+0xce>
   33cb4:	465c      	mov	r4, fp
   33cb6:	464b      	mov	r3, r9
   33cb8:	9802      	ldr	r0, [sp, #8]
   33cba:	e76f      	b.n	33b9c <__aeabi_dmul+0xb0>
   33cbc:	465c      	mov	r4, fp
   33cbe:	464b      	mov	r3, r9
   33cc0:	9501      	str	r5, [sp, #4]
   33cc2:	9802      	ldr	r0, [sp, #8]
   33cc4:	e76a      	b.n	33b9c <__aeabi_dmul+0xb0>
   33cc6:	46c0      	nop			; (mov r8, r8)
   33cc8:	000007ff 	.word	0x000007ff
   33ccc:	fffffc01 	.word	0xfffffc01
   33cd0:	0003a064 	.word	0x0003a064
   33cd4:	800fffff 	.word	0x800fffff
   33cd8:	fffffc0d 	.word	0xfffffc0d
   33cdc:	464a      	mov	r2, r9
   33cde:	4649      	mov	r1, r9
   33ce0:	0c17      	lsrs	r7, r2, #16
   33ce2:	0c1a      	lsrs	r2, r3, #16
   33ce4:	041b      	lsls	r3, r3, #16
   33ce6:	0c1b      	lsrs	r3, r3, #16
   33ce8:	0408      	lsls	r0, r1, #16
   33cea:	0019      	movs	r1, r3
   33cec:	0c00      	lsrs	r0, r0, #16
   33cee:	4341      	muls	r1, r0
   33cf0:	0015      	movs	r5, r2
   33cf2:	4688      	mov	r8, r1
   33cf4:	0019      	movs	r1, r3
   33cf6:	437d      	muls	r5, r7
   33cf8:	4379      	muls	r1, r7
   33cfa:	9503      	str	r5, [sp, #12]
   33cfc:	4689      	mov	r9, r1
   33cfe:	0029      	movs	r1, r5
   33d00:	0015      	movs	r5, r2
   33d02:	4345      	muls	r5, r0
   33d04:	444d      	add	r5, r9
   33d06:	9502      	str	r5, [sp, #8]
   33d08:	4645      	mov	r5, r8
   33d0a:	0c2d      	lsrs	r5, r5, #16
   33d0c:	46aa      	mov	sl, r5
   33d0e:	9d02      	ldr	r5, [sp, #8]
   33d10:	4455      	add	r5, sl
   33d12:	45a9      	cmp	r9, r5
   33d14:	d906      	bls.n	33d24 <__aeabi_dmul+0x238>
   33d16:	468a      	mov	sl, r1
   33d18:	2180      	movs	r1, #128	; 0x80
   33d1a:	0249      	lsls	r1, r1, #9
   33d1c:	4689      	mov	r9, r1
   33d1e:	44ca      	add	sl, r9
   33d20:	4651      	mov	r1, sl
   33d22:	9103      	str	r1, [sp, #12]
   33d24:	0c29      	lsrs	r1, r5, #16
   33d26:	9104      	str	r1, [sp, #16]
   33d28:	4641      	mov	r1, r8
   33d2a:	0409      	lsls	r1, r1, #16
   33d2c:	042d      	lsls	r5, r5, #16
   33d2e:	0c09      	lsrs	r1, r1, #16
   33d30:	4688      	mov	r8, r1
   33d32:	0029      	movs	r1, r5
   33d34:	0c25      	lsrs	r5, r4, #16
   33d36:	0424      	lsls	r4, r4, #16
   33d38:	4441      	add	r1, r8
   33d3a:	0c24      	lsrs	r4, r4, #16
   33d3c:	9105      	str	r1, [sp, #20]
   33d3e:	0021      	movs	r1, r4
   33d40:	4341      	muls	r1, r0
   33d42:	4688      	mov	r8, r1
   33d44:	0021      	movs	r1, r4
   33d46:	4379      	muls	r1, r7
   33d48:	468a      	mov	sl, r1
   33d4a:	4368      	muls	r0, r5
   33d4c:	4641      	mov	r1, r8
   33d4e:	4450      	add	r0, sl
   33d50:	4681      	mov	r9, r0
   33d52:	0c08      	lsrs	r0, r1, #16
   33d54:	4448      	add	r0, r9
   33d56:	436f      	muls	r7, r5
   33d58:	4582      	cmp	sl, r0
   33d5a:	d903      	bls.n	33d64 <__aeabi_dmul+0x278>
   33d5c:	2180      	movs	r1, #128	; 0x80
   33d5e:	0249      	lsls	r1, r1, #9
   33d60:	4689      	mov	r9, r1
   33d62:	444f      	add	r7, r9
   33d64:	0c01      	lsrs	r1, r0, #16
   33d66:	4689      	mov	r9, r1
   33d68:	0039      	movs	r1, r7
   33d6a:	4449      	add	r1, r9
   33d6c:	9102      	str	r1, [sp, #8]
   33d6e:	4641      	mov	r1, r8
   33d70:	040f      	lsls	r7, r1, #16
   33d72:	9904      	ldr	r1, [sp, #16]
   33d74:	0c3f      	lsrs	r7, r7, #16
   33d76:	4688      	mov	r8, r1
   33d78:	0400      	lsls	r0, r0, #16
   33d7a:	19c0      	adds	r0, r0, r7
   33d7c:	4480      	add	r8, r0
   33d7e:	4641      	mov	r1, r8
   33d80:	9104      	str	r1, [sp, #16]
   33d82:	4659      	mov	r1, fp
   33d84:	0c0f      	lsrs	r7, r1, #16
   33d86:	0409      	lsls	r1, r1, #16
   33d88:	0c09      	lsrs	r1, r1, #16
   33d8a:	4688      	mov	r8, r1
   33d8c:	4359      	muls	r1, r3
   33d8e:	468a      	mov	sl, r1
   33d90:	0039      	movs	r1, r7
   33d92:	4351      	muls	r1, r2
   33d94:	4689      	mov	r9, r1
   33d96:	4641      	mov	r1, r8
   33d98:	434a      	muls	r2, r1
   33d9a:	4651      	mov	r1, sl
   33d9c:	0c09      	lsrs	r1, r1, #16
   33d9e:	468b      	mov	fp, r1
   33da0:	437b      	muls	r3, r7
   33da2:	18d2      	adds	r2, r2, r3
   33da4:	445a      	add	r2, fp
   33da6:	4293      	cmp	r3, r2
   33da8:	d903      	bls.n	33db2 <__aeabi_dmul+0x2c6>
   33daa:	2380      	movs	r3, #128	; 0x80
   33dac:	025b      	lsls	r3, r3, #9
   33dae:	469b      	mov	fp, r3
   33db0:	44d9      	add	r9, fp
   33db2:	4651      	mov	r1, sl
   33db4:	0409      	lsls	r1, r1, #16
   33db6:	0c09      	lsrs	r1, r1, #16
   33db8:	468a      	mov	sl, r1
   33dba:	4641      	mov	r1, r8
   33dbc:	4361      	muls	r1, r4
   33dbe:	437c      	muls	r4, r7
   33dc0:	0c13      	lsrs	r3, r2, #16
   33dc2:	0412      	lsls	r2, r2, #16
   33dc4:	444b      	add	r3, r9
   33dc6:	4452      	add	r2, sl
   33dc8:	46a1      	mov	r9, r4
   33dca:	468a      	mov	sl, r1
   33dcc:	003c      	movs	r4, r7
   33dce:	4641      	mov	r1, r8
   33dd0:	436c      	muls	r4, r5
   33dd2:	434d      	muls	r5, r1
   33dd4:	4651      	mov	r1, sl
   33dd6:	444d      	add	r5, r9
   33dd8:	0c0f      	lsrs	r7, r1, #16
   33dda:	197d      	adds	r5, r7, r5
   33ddc:	45a9      	cmp	r9, r5
   33dde:	d903      	bls.n	33de8 <__aeabi_dmul+0x2fc>
   33de0:	2180      	movs	r1, #128	; 0x80
   33de2:	0249      	lsls	r1, r1, #9
   33de4:	4688      	mov	r8, r1
   33de6:	4444      	add	r4, r8
   33de8:	9f04      	ldr	r7, [sp, #16]
   33dea:	9903      	ldr	r1, [sp, #12]
   33dec:	46b8      	mov	r8, r7
   33dee:	4441      	add	r1, r8
   33df0:	468b      	mov	fp, r1
   33df2:	4583      	cmp	fp, r0
   33df4:	4180      	sbcs	r0, r0
   33df6:	4241      	negs	r1, r0
   33df8:	4688      	mov	r8, r1
   33dfa:	4651      	mov	r1, sl
   33dfc:	0408      	lsls	r0, r1, #16
   33dfe:	042f      	lsls	r7, r5, #16
   33e00:	0c00      	lsrs	r0, r0, #16
   33e02:	183f      	adds	r7, r7, r0
   33e04:	4658      	mov	r0, fp
   33e06:	9902      	ldr	r1, [sp, #8]
   33e08:	1810      	adds	r0, r2, r0
   33e0a:	4689      	mov	r9, r1
   33e0c:	4290      	cmp	r0, r2
   33e0e:	4192      	sbcs	r2, r2
   33e10:	444f      	add	r7, r9
   33e12:	46ba      	mov	sl, r7
   33e14:	4252      	negs	r2, r2
   33e16:	4699      	mov	r9, r3
   33e18:	4693      	mov	fp, r2
   33e1a:	44c2      	add	sl, r8
   33e1c:	44d1      	add	r9, sl
   33e1e:	44cb      	add	fp, r9
   33e20:	428f      	cmp	r7, r1
   33e22:	41bf      	sbcs	r7, r7
   33e24:	45c2      	cmp	sl, r8
   33e26:	4189      	sbcs	r1, r1
   33e28:	4599      	cmp	r9, r3
   33e2a:	419b      	sbcs	r3, r3
   33e2c:	4593      	cmp	fp, r2
   33e2e:	4192      	sbcs	r2, r2
   33e30:	427f      	negs	r7, r7
   33e32:	4249      	negs	r1, r1
   33e34:	0c2d      	lsrs	r5, r5, #16
   33e36:	4252      	negs	r2, r2
   33e38:	430f      	orrs	r7, r1
   33e3a:	425b      	negs	r3, r3
   33e3c:	4313      	orrs	r3, r2
   33e3e:	197f      	adds	r7, r7, r5
   33e40:	18ff      	adds	r7, r7, r3
   33e42:	465b      	mov	r3, fp
   33e44:	193c      	adds	r4, r7, r4
   33e46:	0ddb      	lsrs	r3, r3, #23
   33e48:	9a05      	ldr	r2, [sp, #20]
   33e4a:	0264      	lsls	r4, r4, #9
   33e4c:	431c      	orrs	r4, r3
   33e4e:	0243      	lsls	r3, r0, #9
   33e50:	4313      	orrs	r3, r2
   33e52:	1e5d      	subs	r5, r3, #1
   33e54:	41ab      	sbcs	r3, r5
   33e56:	465a      	mov	r2, fp
   33e58:	0dc0      	lsrs	r0, r0, #23
   33e5a:	4303      	orrs	r3, r0
   33e5c:	0252      	lsls	r2, r2, #9
   33e5e:	4313      	orrs	r3, r2
   33e60:	01e2      	lsls	r2, r4, #7
   33e62:	d556      	bpl.n	33f12 <__aeabi_dmul+0x426>
   33e64:	2001      	movs	r0, #1
   33e66:	085a      	lsrs	r2, r3, #1
   33e68:	4003      	ands	r3, r0
   33e6a:	4313      	orrs	r3, r2
   33e6c:	07e2      	lsls	r2, r4, #31
   33e6e:	4313      	orrs	r3, r2
   33e70:	0864      	lsrs	r4, r4, #1
   33e72:	485a      	ldr	r0, [pc, #360]	; (33fdc <__aeabi_dmul+0x4f0>)
   33e74:	4460      	add	r0, ip
   33e76:	2800      	cmp	r0, #0
   33e78:	dd4d      	ble.n	33f16 <__aeabi_dmul+0x42a>
   33e7a:	075a      	lsls	r2, r3, #29
   33e7c:	d009      	beq.n	33e92 <__aeabi_dmul+0x3a6>
   33e7e:	220f      	movs	r2, #15
   33e80:	401a      	ands	r2, r3
   33e82:	2a04      	cmp	r2, #4
   33e84:	d005      	beq.n	33e92 <__aeabi_dmul+0x3a6>
   33e86:	1d1a      	adds	r2, r3, #4
   33e88:	429a      	cmp	r2, r3
   33e8a:	419b      	sbcs	r3, r3
   33e8c:	425b      	negs	r3, r3
   33e8e:	18e4      	adds	r4, r4, r3
   33e90:	0013      	movs	r3, r2
   33e92:	01e2      	lsls	r2, r4, #7
   33e94:	d504      	bpl.n	33ea0 <__aeabi_dmul+0x3b4>
   33e96:	2080      	movs	r0, #128	; 0x80
   33e98:	4a51      	ldr	r2, [pc, #324]	; (33fe0 <__aeabi_dmul+0x4f4>)
   33e9a:	00c0      	lsls	r0, r0, #3
   33e9c:	4014      	ands	r4, r2
   33e9e:	4460      	add	r0, ip
   33ea0:	4a50      	ldr	r2, [pc, #320]	; (33fe4 <__aeabi_dmul+0x4f8>)
   33ea2:	4290      	cmp	r0, r2
   33ea4:	dd00      	ble.n	33ea8 <__aeabi_dmul+0x3bc>
   33ea6:	e6e3      	b.n	33c70 <__aeabi_dmul+0x184>
   33ea8:	2501      	movs	r5, #1
   33eaa:	08db      	lsrs	r3, r3, #3
   33eac:	0762      	lsls	r2, r4, #29
   33eae:	431a      	orrs	r2, r3
   33eb0:	0264      	lsls	r4, r4, #9
   33eb2:	9b01      	ldr	r3, [sp, #4]
   33eb4:	4691      	mov	r9, r2
   33eb6:	0b22      	lsrs	r2, r4, #12
   33eb8:	0544      	lsls	r4, r0, #21
   33eba:	0d64      	lsrs	r4, r4, #21
   33ebc:	401d      	ands	r5, r3
   33ebe:	e67c      	b.n	33bba <__aeabi_dmul+0xce>
   33ec0:	2280      	movs	r2, #128	; 0x80
   33ec2:	4659      	mov	r1, fp
   33ec4:	0312      	lsls	r2, r2, #12
   33ec6:	4211      	tst	r1, r2
   33ec8:	d008      	beq.n	33edc <__aeabi_dmul+0x3f0>
   33eca:	4214      	tst	r4, r2
   33ecc:	d106      	bne.n	33edc <__aeabi_dmul+0x3f0>
   33ece:	4322      	orrs	r2, r4
   33ed0:	0312      	lsls	r2, r2, #12
   33ed2:	0b12      	lsrs	r2, r2, #12
   33ed4:	4645      	mov	r5, r8
   33ed6:	4699      	mov	r9, r3
   33ed8:	4c43      	ldr	r4, [pc, #268]	; (33fe8 <__aeabi_dmul+0x4fc>)
   33eda:	e66e      	b.n	33bba <__aeabi_dmul+0xce>
   33edc:	465b      	mov	r3, fp
   33ede:	431a      	orrs	r2, r3
   33ee0:	0312      	lsls	r2, r2, #12
   33ee2:	0b12      	lsrs	r2, r2, #12
   33ee4:	4c40      	ldr	r4, [pc, #256]	; (33fe8 <__aeabi_dmul+0x4fc>)
   33ee6:	e668      	b.n	33bba <__aeabi_dmul+0xce>
   33ee8:	0003      	movs	r3, r0
   33eea:	4654      	mov	r4, sl
   33eec:	3b28      	subs	r3, #40	; 0x28
   33eee:	409c      	lsls	r4, r3
   33ef0:	2300      	movs	r3, #0
   33ef2:	e6b9      	b.n	33c68 <__aeabi_dmul+0x17c>
   33ef4:	f000 fc4e 	bl	34794 <__clzsi2>
   33ef8:	3020      	adds	r0, #32
   33efa:	e6a6      	b.n	33c4a <__aeabi_dmul+0x15e>
   33efc:	0003      	movs	r3, r0
   33efe:	3b28      	subs	r3, #40	; 0x28
   33f00:	409f      	lsls	r7, r3
   33f02:	2300      	movs	r3, #0
   33f04:	46bb      	mov	fp, r7
   33f06:	4699      	mov	r9, r3
   33f08:	e68a      	b.n	33c20 <__aeabi_dmul+0x134>
   33f0a:	f000 fc43 	bl	34794 <__clzsi2>
   33f0e:	3020      	adds	r0, #32
   33f10:	e674      	b.n	33bfc <__aeabi_dmul+0x110>
   33f12:	46b4      	mov	ip, r6
   33f14:	e7ad      	b.n	33e72 <__aeabi_dmul+0x386>
   33f16:	2501      	movs	r5, #1
   33f18:	1a2a      	subs	r2, r5, r0
   33f1a:	2a38      	cmp	r2, #56	; 0x38
   33f1c:	dd06      	ble.n	33f2c <__aeabi_dmul+0x440>
   33f1e:	9b01      	ldr	r3, [sp, #4]
   33f20:	2400      	movs	r4, #0
   33f22:	401d      	ands	r5, r3
   33f24:	2300      	movs	r3, #0
   33f26:	2200      	movs	r2, #0
   33f28:	4699      	mov	r9, r3
   33f2a:	e646      	b.n	33bba <__aeabi_dmul+0xce>
   33f2c:	2a1f      	cmp	r2, #31
   33f2e:	dc21      	bgt.n	33f74 <__aeabi_dmul+0x488>
   33f30:	2520      	movs	r5, #32
   33f32:	0020      	movs	r0, r4
   33f34:	1aad      	subs	r5, r5, r2
   33f36:	001e      	movs	r6, r3
   33f38:	40ab      	lsls	r3, r5
   33f3a:	40a8      	lsls	r0, r5
   33f3c:	40d6      	lsrs	r6, r2
   33f3e:	1e5d      	subs	r5, r3, #1
   33f40:	41ab      	sbcs	r3, r5
   33f42:	4330      	orrs	r0, r6
   33f44:	4318      	orrs	r0, r3
   33f46:	40d4      	lsrs	r4, r2
   33f48:	0743      	lsls	r3, r0, #29
   33f4a:	d009      	beq.n	33f60 <__aeabi_dmul+0x474>
   33f4c:	230f      	movs	r3, #15
   33f4e:	4003      	ands	r3, r0
   33f50:	2b04      	cmp	r3, #4
   33f52:	d005      	beq.n	33f60 <__aeabi_dmul+0x474>
   33f54:	0003      	movs	r3, r0
   33f56:	1d18      	adds	r0, r3, #4
   33f58:	4298      	cmp	r0, r3
   33f5a:	419b      	sbcs	r3, r3
   33f5c:	425b      	negs	r3, r3
   33f5e:	18e4      	adds	r4, r4, r3
   33f60:	0223      	lsls	r3, r4, #8
   33f62:	d521      	bpl.n	33fa8 <__aeabi_dmul+0x4bc>
   33f64:	2501      	movs	r5, #1
   33f66:	9b01      	ldr	r3, [sp, #4]
   33f68:	2401      	movs	r4, #1
   33f6a:	401d      	ands	r5, r3
   33f6c:	2300      	movs	r3, #0
   33f6e:	2200      	movs	r2, #0
   33f70:	4699      	mov	r9, r3
   33f72:	e622      	b.n	33bba <__aeabi_dmul+0xce>
   33f74:	251f      	movs	r5, #31
   33f76:	0021      	movs	r1, r4
   33f78:	426d      	negs	r5, r5
   33f7a:	1a28      	subs	r0, r5, r0
   33f7c:	40c1      	lsrs	r1, r0
   33f7e:	0008      	movs	r0, r1
   33f80:	2a20      	cmp	r2, #32
   33f82:	d01d      	beq.n	33fc0 <__aeabi_dmul+0x4d4>
   33f84:	355f      	adds	r5, #95	; 0x5f
   33f86:	1aaa      	subs	r2, r5, r2
   33f88:	4094      	lsls	r4, r2
   33f8a:	4323      	orrs	r3, r4
   33f8c:	1e5c      	subs	r4, r3, #1
   33f8e:	41a3      	sbcs	r3, r4
   33f90:	2507      	movs	r5, #7
   33f92:	4303      	orrs	r3, r0
   33f94:	401d      	ands	r5, r3
   33f96:	2200      	movs	r2, #0
   33f98:	2d00      	cmp	r5, #0
   33f9a:	d009      	beq.n	33fb0 <__aeabi_dmul+0x4c4>
   33f9c:	220f      	movs	r2, #15
   33f9e:	2400      	movs	r4, #0
   33fa0:	401a      	ands	r2, r3
   33fa2:	0018      	movs	r0, r3
   33fa4:	2a04      	cmp	r2, #4
   33fa6:	d1d6      	bne.n	33f56 <__aeabi_dmul+0x46a>
   33fa8:	0003      	movs	r3, r0
   33faa:	0765      	lsls	r5, r4, #29
   33fac:	0264      	lsls	r4, r4, #9
   33fae:	0b22      	lsrs	r2, r4, #12
   33fb0:	08db      	lsrs	r3, r3, #3
   33fb2:	432b      	orrs	r3, r5
   33fb4:	2501      	movs	r5, #1
   33fb6:	4699      	mov	r9, r3
   33fb8:	9b01      	ldr	r3, [sp, #4]
   33fba:	2400      	movs	r4, #0
   33fbc:	401d      	ands	r5, r3
   33fbe:	e5fc      	b.n	33bba <__aeabi_dmul+0xce>
   33fc0:	2400      	movs	r4, #0
   33fc2:	e7e2      	b.n	33f8a <__aeabi_dmul+0x49e>
   33fc4:	2280      	movs	r2, #128	; 0x80
   33fc6:	2501      	movs	r5, #1
   33fc8:	0312      	lsls	r2, r2, #12
   33fca:	4322      	orrs	r2, r4
   33fcc:	9901      	ldr	r1, [sp, #4]
   33fce:	0312      	lsls	r2, r2, #12
   33fd0:	0b12      	lsrs	r2, r2, #12
   33fd2:	400d      	ands	r5, r1
   33fd4:	4699      	mov	r9, r3
   33fd6:	4c04      	ldr	r4, [pc, #16]	; (33fe8 <__aeabi_dmul+0x4fc>)
   33fd8:	e5ef      	b.n	33bba <__aeabi_dmul+0xce>
   33fda:	46c0      	nop			; (mov r8, r8)
   33fdc:	000003ff 	.word	0x000003ff
   33fe0:	feffffff 	.word	0xfeffffff
   33fe4:	000007fe 	.word	0x000007fe
   33fe8:	000007ff 	.word	0x000007ff

00033fec <__aeabi_dsub>:
   33fec:	b5f0      	push	{r4, r5, r6, r7, lr}
   33fee:	4646      	mov	r6, r8
   33ff0:	46d6      	mov	lr, sl
   33ff2:	464f      	mov	r7, r9
   33ff4:	030c      	lsls	r4, r1, #12
   33ff6:	b5c0      	push	{r6, r7, lr}
   33ff8:	0fcd      	lsrs	r5, r1, #31
   33ffa:	004e      	lsls	r6, r1, #1
   33ffc:	0a61      	lsrs	r1, r4, #9
   33ffe:	0f44      	lsrs	r4, r0, #29
   34000:	430c      	orrs	r4, r1
   34002:	00c1      	lsls	r1, r0, #3
   34004:	0058      	lsls	r0, r3, #1
   34006:	0d40      	lsrs	r0, r0, #21
   34008:	4684      	mov	ip, r0
   3400a:	468a      	mov	sl, r1
   3400c:	000f      	movs	r7, r1
   3400e:	0319      	lsls	r1, r3, #12
   34010:	0f50      	lsrs	r0, r2, #29
   34012:	0a49      	lsrs	r1, r1, #9
   34014:	4301      	orrs	r1, r0
   34016:	48c6      	ldr	r0, [pc, #792]	; (34330 <__aeabi_dsub+0x344>)
   34018:	0d76      	lsrs	r6, r6, #21
   3401a:	46a8      	mov	r8, r5
   3401c:	0fdb      	lsrs	r3, r3, #31
   3401e:	00d2      	lsls	r2, r2, #3
   34020:	4584      	cmp	ip, r0
   34022:	d100      	bne.n	34026 <__aeabi_dsub+0x3a>
   34024:	e0d8      	b.n	341d8 <__aeabi_dsub+0x1ec>
   34026:	2001      	movs	r0, #1
   34028:	4043      	eors	r3, r0
   3402a:	42ab      	cmp	r3, r5
   3402c:	d100      	bne.n	34030 <__aeabi_dsub+0x44>
   3402e:	e0a6      	b.n	3417e <__aeabi_dsub+0x192>
   34030:	4660      	mov	r0, ip
   34032:	1a35      	subs	r5, r6, r0
   34034:	2d00      	cmp	r5, #0
   34036:	dc00      	bgt.n	3403a <__aeabi_dsub+0x4e>
   34038:	e105      	b.n	34246 <__aeabi_dsub+0x25a>
   3403a:	2800      	cmp	r0, #0
   3403c:	d110      	bne.n	34060 <__aeabi_dsub+0x74>
   3403e:	000b      	movs	r3, r1
   34040:	4313      	orrs	r3, r2
   34042:	d100      	bne.n	34046 <__aeabi_dsub+0x5a>
   34044:	e0d7      	b.n	341f6 <__aeabi_dsub+0x20a>
   34046:	1e6b      	subs	r3, r5, #1
   34048:	2b00      	cmp	r3, #0
   3404a:	d000      	beq.n	3404e <__aeabi_dsub+0x62>
   3404c:	e14b      	b.n	342e6 <__aeabi_dsub+0x2fa>
   3404e:	4653      	mov	r3, sl
   34050:	1a9f      	subs	r7, r3, r2
   34052:	45ba      	cmp	sl, r7
   34054:	4180      	sbcs	r0, r0
   34056:	1a64      	subs	r4, r4, r1
   34058:	4240      	negs	r0, r0
   3405a:	1a24      	subs	r4, r4, r0
   3405c:	2601      	movs	r6, #1
   3405e:	e01e      	b.n	3409e <__aeabi_dsub+0xb2>
   34060:	4bb3      	ldr	r3, [pc, #716]	; (34330 <__aeabi_dsub+0x344>)
   34062:	429e      	cmp	r6, r3
   34064:	d048      	beq.n	340f8 <__aeabi_dsub+0x10c>
   34066:	2380      	movs	r3, #128	; 0x80
   34068:	041b      	lsls	r3, r3, #16
   3406a:	4319      	orrs	r1, r3
   3406c:	2d38      	cmp	r5, #56	; 0x38
   3406e:	dd00      	ble.n	34072 <__aeabi_dsub+0x86>
   34070:	e119      	b.n	342a6 <__aeabi_dsub+0x2ba>
   34072:	2d1f      	cmp	r5, #31
   34074:	dd00      	ble.n	34078 <__aeabi_dsub+0x8c>
   34076:	e14c      	b.n	34312 <__aeabi_dsub+0x326>
   34078:	2320      	movs	r3, #32
   3407a:	000f      	movs	r7, r1
   3407c:	1b5b      	subs	r3, r3, r5
   3407e:	0010      	movs	r0, r2
   34080:	409a      	lsls	r2, r3
   34082:	409f      	lsls	r7, r3
   34084:	40e8      	lsrs	r0, r5
   34086:	1e53      	subs	r3, r2, #1
   34088:	419a      	sbcs	r2, r3
   3408a:	40e9      	lsrs	r1, r5
   3408c:	4307      	orrs	r7, r0
   3408e:	4317      	orrs	r7, r2
   34090:	4653      	mov	r3, sl
   34092:	1bdf      	subs	r7, r3, r7
   34094:	1a61      	subs	r1, r4, r1
   34096:	45ba      	cmp	sl, r7
   34098:	41a4      	sbcs	r4, r4
   3409a:	4264      	negs	r4, r4
   3409c:	1b0c      	subs	r4, r1, r4
   3409e:	0223      	lsls	r3, r4, #8
   340a0:	d400      	bmi.n	340a4 <__aeabi_dsub+0xb8>
   340a2:	e0c5      	b.n	34230 <__aeabi_dsub+0x244>
   340a4:	0264      	lsls	r4, r4, #9
   340a6:	0a65      	lsrs	r5, r4, #9
   340a8:	2d00      	cmp	r5, #0
   340aa:	d100      	bne.n	340ae <__aeabi_dsub+0xc2>
   340ac:	e0f6      	b.n	3429c <__aeabi_dsub+0x2b0>
   340ae:	0028      	movs	r0, r5
   340b0:	f000 fb70 	bl	34794 <__clzsi2>
   340b4:	0003      	movs	r3, r0
   340b6:	3b08      	subs	r3, #8
   340b8:	2b1f      	cmp	r3, #31
   340ba:	dd00      	ble.n	340be <__aeabi_dsub+0xd2>
   340bc:	e0e9      	b.n	34292 <__aeabi_dsub+0x2a6>
   340be:	2220      	movs	r2, #32
   340c0:	003c      	movs	r4, r7
   340c2:	1ad2      	subs	r2, r2, r3
   340c4:	409d      	lsls	r5, r3
   340c6:	40d4      	lsrs	r4, r2
   340c8:	409f      	lsls	r7, r3
   340ca:	4325      	orrs	r5, r4
   340cc:	429e      	cmp	r6, r3
   340ce:	dd00      	ble.n	340d2 <__aeabi_dsub+0xe6>
   340d0:	e0db      	b.n	3428a <__aeabi_dsub+0x29e>
   340d2:	1b9e      	subs	r6, r3, r6
   340d4:	1c73      	adds	r3, r6, #1
   340d6:	2b1f      	cmp	r3, #31
   340d8:	dd00      	ble.n	340dc <__aeabi_dsub+0xf0>
   340da:	e10a      	b.n	342f2 <__aeabi_dsub+0x306>
   340dc:	2220      	movs	r2, #32
   340de:	0038      	movs	r0, r7
   340e0:	1ad2      	subs	r2, r2, r3
   340e2:	0029      	movs	r1, r5
   340e4:	4097      	lsls	r7, r2
   340e6:	002c      	movs	r4, r5
   340e8:	4091      	lsls	r1, r2
   340ea:	40d8      	lsrs	r0, r3
   340ec:	1e7a      	subs	r2, r7, #1
   340ee:	4197      	sbcs	r7, r2
   340f0:	40dc      	lsrs	r4, r3
   340f2:	2600      	movs	r6, #0
   340f4:	4301      	orrs	r1, r0
   340f6:	430f      	orrs	r7, r1
   340f8:	077b      	lsls	r3, r7, #29
   340fa:	d009      	beq.n	34110 <__aeabi_dsub+0x124>
   340fc:	230f      	movs	r3, #15
   340fe:	403b      	ands	r3, r7
   34100:	2b04      	cmp	r3, #4
   34102:	d005      	beq.n	34110 <__aeabi_dsub+0x124>
   34104:	1d3b      	adds	r3, r7, #4
   34106:	42bb      	cmp	r3, r7
   34108:	41bf      	sbcs	r7, r7
   3410a:	427f      	negs	r7, r7
   3410c:	19e4      	adds	r4, r4, r7
   3410e:	001f      	movs	r7, r3
   34110:	0223      	lsls	r3, r4, #8
   34112:	d525      	bpl.n	34160 <__aeabi_dsub+0x174>
   34114:	4b86      	ldr	r3, [pc, #536]	; (34330 <__aeabi_dsub+0x344>)
   34116:	3601      	adds	r6, #1
   34118:	429e      	cmp	r6, r3
   3411a:	d100      	bne.n	3411e <__aeabi_dsub+0x132>
   3411c:	e0af      	b.n	3427e <__aeabi_dsub+0x292>
   3411e:	4b85      	ldr	r3, [pc, #532]	; (34334 <__aeabi_dsub+0x348>)
   34120:	2501      	movs	r5, #1
   34122:	401c      	ands	r4, r3
   34124:	4643      	mov	r3, r8
   34126:	0762      	lsls	r2, r4, #29
   34128:	08ff      	lsrs	r7, r7, #3
   3412a:	0264      	lsls	r4, r4, #9
   3412c:	0576      	lsls	r6, r6, #21
   3412e:	4317      	orrs	r7, r2
   34130:	0b24      	lsrs	r4, r4, #12
   34132:	0d76      	lsrs	r6, r6, #21
   34134:	401d      	ands	r5, r3
   34136:	2100      	movs	r1, #0
   34138:	0324      	lsls	r4, r4, #12
   3413a:	0b23      	lsrs	r3, r4, #12
   3413c:	0d0c      	lsrs	r4, r1, #20
   3413e:	4a7e      	ldr	r2, [pc, #504]	; (34338 <__aeabi_dsub+0x34c>)
   34140:	0524      	lsls	r4, r4, #20
   34142:	431c      	orrs	r4, r3
   34144:	4014      	ands	r4, r2
   34146:	0533      	lsls	r3, r6, #20
   34148:	4323      	orrs	r3, r4
   3414a:	005b      	lsls	r3, r3, #1
   3414c:	07ed      	lsls	r5, r5, #31
   3414e:	085b      	lsrs	r3, r3, #1
   34150:	432b      	orrs	r3, r5
   34152:	0038      	movs	r0, r7
   34154:	0019      	movs	r1, r3
   34156:	bc1c      	pop	{r2, r3, r4}
   34158:	4690      	mov	r8, r2
   3415a:	4699      	mov	r9, r3
   3415c:	46a2      	mov	sl, r4
   3415e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34160:	2501      	movs	r5, #1
   34162:	4643      	mov	r3, r8
   34164:	0762      	lsls	r2, r4, #29
   34166:	08ff      	lsrs	r7, r7, #3
   34168:	4317      	orrs	r7, r2
   3416a:	08e4      	lsrs	r4, r4, #3
   3416c:	401d      	ands	r5, r3
   3416e:	4b70      	ldr	r3, [pc, #448]	; (34330 <__aeabi_dsub+0x344>)
   34170:	429e      	cmp	r6, r3
   34172:	d036      	beq.n	341e2 <__aeabi_dsub+0x1f6>
   34174:	0324      	lsls	r4, r4, #12
   34176:	0576      	lsls	r6, r6, #21
   34178:	0b24      	lsrs	r4, r4, #12
   3417a:	0d76      	lsrs	r6, r6, #21
   3417c:	e7db      	b.n	34136 <__aeabi_dsub+0x14a>
   3417e:	4663      	mov	r3, ip
   34180:	1af3      	subs	r3, r6, r3
   34182:	2b00      	cmp	r3, #0
   34184:	dc00      	bgt.n	34188 <__aeabi_dsub+0x19c>
   34186:	e094      	b.n	342b2 <__aeabi_dsub+0x2c6>
   34188:	4660      	mov	r0, ip
   3418a:	2800      	cmp	r0, #0
   3418c:	d035      	beq.n	341fa <__aeabi_dsub+0x20e>
   3418e:	4868      	ldr	r0, [pc, #416]	; (34330 <__aeabi_dsub+0x344>)
   34190:	4286      	cmp	r6, r0
   34192:	d0b1      	beq.n	340f8 <__aeabi_dsub+0x10c>
   34194:	2780      	movs	r7, #128	; 0x80
   34196:	043f      	lsls	r7, r7, #16
   34198:	4339      	orrs	r1, r7
   3419a:	2b38      	cmp	r3, #56	; 0x38
   3419c:	dc00      	bgt.n	341a0 <__aeabi_dsub+0x1b4>
   3419e:	e0fd      	b.n	3439c <__aeabi_dsub+0x3b0>
   341a0:	430a      	orrs	r2, r1
   341a2:	0017      	movs	r7, r2
   341a4:	2100      	movs	r1, #0
   341a6:	1e7a      	subs	r2, r7, #1
   341a8:	4197      	sbcs	r7, r2
   341aa:	4457      	add	r7, sl
   341ac:	4557      	cmp	r7, sl
   341ae:	4180      	sbcs	r0, r0
   341b0:	1909      	adds	r1, r1, r4
   341b2:	4244      	negs	r4, r0
   341b4:	190c      	adds	r4, r1, r4
   341b6:	0223      	lsls	r3, r4, #8
   341b8:	d53a      	bpl.n	34230 <__aeabi_dsub+0x244>
   341ba:	4b5d      	ldr	r3, [pc, #372]	; (34330 <__aeabi_dsub+0x344>)
   341bc:	3601      	adds	r6, #1
   341be:	429e      	cmp	r6, r3
   341c0:	d100      	bne.n	341c4 <__aeabi_dsub+0x1d8>
   341c2:	e14b      	b.n	3445c <__aeabi_dsub+0x470>
   341c4:	2201      	movs	r2, #1
   341c6:	4b5b      	ldr	r3, [pc, #364]	; (34334 <__aeabi_dsub+0x348>)
   341c8:	401c      	ands	r4, r3
   341ca:	087b      	lsrs	r3, r7, #1
   341cc:	4017      	ands	r7, r2
   341ce:	431f      	orrs	r7, r3
   341d0:	07e2      	lsls	r2, r4, #31
   341d2:	4317      	orrs	r7, r2
   341d4:	0864      	lsrs	r4, r4, #1
   341d6:	e78f      	b.n	340f8 <__aeabi_dsub+0x10c>
   341d8:	0008      	movs	r0, r1
   341da:	4310      	orrs	r0, r2
   341dc:	d000      	beq.n	341e0 <__aeabi_dsub+0x1f4>
   341de:	e724      	b.n	3402a <__aeabi_dsub+0x3e>
   341e0:	e721      	b.n	34026 <__aeabi_dsub+0x3a>
   341e2:	0023      	movs	r3, r4
   341e4:	433b      	orrs	r3, r7
   341e6:	d100      	bne.n	341ea <__aeabi_dsub+0x1fe>
   341e8:	e1b9      	b.n	3455e <__aeabi_dsub+0x572>
   341ea:	2280      	movs	r2, #128	; 0x80
   341ec:	0312      	lsls	r2, r2, #12
   341ee:	4314      	orrs	r4, r2
   341f0:	0324      	lsls	r4, r4, #12
   341f2:	0b24      	lsrs	r4, r4, #12
   341f4:	e79f      	b.n	34136 <__aeabi_dsub+0x14a>
   341f6:	002e      	movs	r6, r5
   341f8:	e77e      	b.n	340f8 <__aeabi_dsub+0x10c>
   341fa:	0008      	movs	r0, r1
   341fc:	4310      	orrs	r0, r2
   341fe:	d100      	bne.n	34202 <__aeabi_dsub+0x216>
   34200:	e0ca      	b.n	34398 <__aeabi_dsub+0x3ac>
   34202:	1e58      	subs	r0, r3, #1
   34204:	4684      	mov	ip, r0
   34206:	2800      	cmp	r0, #0
   34208:	d000      	beq.n	3420c <__aeabi_dsub+0x220>
   3420a:	e0e7      	b.n	343dc <__aeabi_dsub+0x3f0>
   3420c:	4452      	add	r2, sl
   3420e:	4552      	cmp	r2, sl
   34210:	4180      	sbcs	r0, r0
   34212:	1864      	adds	r4, r4, r1
   34214:	4240      	negs	r0, r0
   34216:	1824      	adds	r4, r4, r0
   34218:	0017      	movs	r7, r2
   3421a:	2601      	movs	r6, #1
   3421c:	0223      	lsls	r3, r4, #8
   3421e:	d507      	bpl.n	34230 <__aeabi_dsub+0x244>
   34220:	2602      	movs	r6, #2
   34222:	e7cf      	b.n	341c4 <__aeabi_dsub+0x1d8>
   34224:	4664      	mov	r4, ip
   34226:	432c      	orrs	r4, r5
   34228:	d100      	bne.n	3422c <__aeabi_dsub+0x240>
   3422a:	e1b3      	b.n	34594 <__aeabi_dsub+0x5a8>
   3422c:	002c      	movs	r4, r5
   3422e:	4667      	mov	r7, ip
   34230:	077b      	lsls	r3, r7, #29
   34232:	d000      	beq.n	34236 <__aeabi_dsub+0x24a>
   34234:	e762      	b.n	340fc <__aeabi_dsub+0x110>
   34236:	0763      	lsls	r3, r4, #29
   34238:	08ff      	lsrs	r7, r7, #3
   3423a:	431f      	orrs	r7, r3
   3423c:	2501      	movs	r5, #1
   3423e:	4643      	mov	r3, r8
   34240:	08e4      	lsrs	r4, r4, #3
   34242:	401d      	ands	r5, r3
   34244:	e793      	b.n	3416e <__aeabi_dsub+0x182>
   34246:	2d00      	cmp	r5, #0
   34248:	d178      	bne.n	3433c <__aeabi_dsub+0x350>
   3424a:	1c75      	adds	r5, r6, #1
   3424c:	056d      	lsls	r5, r5, #21
   3424e:	0d6d      	lsrs	r5, r5, #21
   34250:	2d01      	cmp	r5, #1
   34252:	dc00      	bgt.n	34256 <__aeabi_dsub+0x26a>
   34254:	e0f2      	b.n	3443c <__aeabi_dsub+0x450>
   34256:	4650      	mov	r0, sl
   34258:	1a80      	subs	r0, r0, r2
   3425a:	4582      	cmp	sl, r0
   3425c:	41bf      	sbcs	r7, r7
   3425e:	1a65      	subs	r5, r4, r1
   34260:	427f      	negs	r7, r7
   34262:	1bed      	subs	r5, r5, r7
   34264:	4684      	mov	ip, r0
   34266:	0228      	lsls	r0, r5, #8
   34268:	d400      	bmi.n	3426c <__aeabi_dsub+0x280>
   3426a:	e08c      	b.n	34386 <__aeabi_dsub+0x39a>
   3426c:	4650      	mov	r0, sl
   3426e:	1a17      	subs	r7, r2, r0
   34270:	42ba      	cmp	r2, r7
   34272:	4192      	sbcs	r2, r2
   34274:	1b0c      	subs	r4, r1, r4
   34276:	4255      	negs	r5, r2
   34278:	1b65      	subs	r5, r4, r5
   3427a:	4698      	mov	r8, r3
   3427c:	e714      	b.n	340a8 <__aeabi_dsub+0xbc>
   3427e:	2501      	movs	r5, #1
   34280:	4643      	mov	r3, r8
   34282:	2400      	movs	r4, #0
   34284:	401d      	ands	r5, r3
   34286:	2700      	movs	r7, #0
   34288:	e755      	b.n	34136 <__aeabi_dsub+0x14a>
   3428a:	4c2a      	ldr	r4, [pc, #168]	; (34334 <__aeabi_dsub+0x348>)
   3428c:	1af6      	subs	r6, r6, r3
   3428e:	402c      	ands	r4, r5
   34290:	e732      	b.n	340f8 <__aeabi_dsub+0x10c>
   34292:	003d      	movs	r5, r7
   34294:	3828      	subs	r0, #40	; 0x28
   34296:	4085      	lsls	r5, r0
   34298:	2700      	movs	r7, #0
   3429a:	e717      	b.n	340cc <__aeabi_dsub+0xe0>
   3429c:	0038      	movs	r0, r7
   3429e:	f000 fa79 	bl	34794 <__clzsi2>
   342a2:	3020      	adds	r0, #32
   342a4:	e706      	b.n	340b4 <__aeabi_dsub+0xc8>
   342a6:	430a      	orrs	r2, r1
   342a8:	0017      	movs	r7, r2
   342aa:	2100      	movs	r1, #0
   342ac:	1e7a      	subs	r2, r7, #1
   342ae:	4197      	sbcs	r7, r2
   342b0:	e6ee      	b.n	34090 <__aeabi_dsub+0xa4>
   342b2:	2b00      	cmp	r3, #0
   342b4:	d000      	beq.n	342b8 <__aeabi_dsub+0x2cc>
   342b6:	e0e5      	b.n	34484 <__aeabi_dsub+0x498>
   342b8:	1c73      	adds	r3, r6, #1
   342ba:	469c      	mov	ip, r3
   342bc:	055b      	lsls	r3, r3, #21
   342be:	0d5b      	lsrs	r3, r3, #21
   342c0:	2b01      	cmp	r3, #1
   342c2:	dc00      	bgt.n	342c6 <__aeabi_dsub+0x2da>
   342c4:	e09f      	b.n	34406 <__aeabi_dsub+0x41a>
   342c6:	4b1a      	ldr	r3, [pc, #104]	; (34330 <__aeabi_dsub+0x344>)
   342c8:	459c      	cmp	ip, r3
   342ca:	d100      	bne.n	342ce <__aeabi_dsub+0x2e2>
   342cc:	e0c5      	b.n	3445a <__aeabi_dsub+0x46e>
   342ce:	4452      	add	r2, sl
   342d0:	4552      	cmp	r2, sl
   342d2:	4180      	sbcs	r0, r0
   342d4:	1864      	adds	r4, r4, r1
   342d6:	4240      	negs	r0, r0
   342d8:	1824      	adds	r4, r4, r0
   342da:	07e7      	lsls	r7, r4, #31
   342dc:	0852      	lsrs	r2, r2, #1
   342de:	4317      	orrs	r7, r2
   342e0:	0864      	lsrs	r4, r4, #1
   342e2:	4666      	mov	r6, ip
   342e4:	e708      	b.n	340f8 <__aeabi_dsub+0x10c>
   342e6:	4812      	ldr	r0, [pc, #72]	; (34330 <__aeabi_dsub+0x344>)
   342e8:	4285      	cmp	r5, r0
   342ea:	d100      	bne.n	342ee <__aeabi_dsub+0x302>
   342ec:	e085      	b.n	343fa <__aeabi_dsub+0x40e>
   342ee:	001d      	movs	r5, r3
   342f0:	e6bc      	b.n	3406c <__aeabi_dsub+0x80>
   342f2:	0029      	movs	r1, r5
   342f4:	3e1f      	subs	r6, #31
   342f6:	40f1      	lsrs	r1, r6
   342f8:	2b20      	cmp	r3, #32
   342fa:	d100      	bne.n	342fe <__aeabi_dsub+0x312>
   342fc:	e07f      	b.n	343fe <__aeabi_dsub+0x412>
   342fe:	2240      	movs	r2, #64	; 0x40
   34300:	1ad3      	subs	r3, r2, r3
   34302:	409d      	lsls	r5, r3
   34304:	432f      	orrs	r7, r5
   34306:	1e7d      	subs	r5, r7, #1
   34308:	41af      	sbcs	r7, r5
   3430a:	2400      	movs	r4, #0
   3430c:	430f      	orrs	r7, r1
   3430e:	2600      	movs	r6, #0
   34310:	e78e      	b.n	34230 <__aeabi_dsub+0x244>
   34312:	002b      	movs	r3, r5
   34314:	000f      	movs	r7, r1
   34316:	3b20      	subs	r3, #32
   34318:	40df      	lsrs	r7, r3
   3431a:	2d20      	cmp	r5, #32
   3431c:	d071      	beq.n	34402 <__aeabi_dsub+0x416>
   3431e:	2340      	movs	r3, #64	; 0x40
   34320:	1b5d      	subs	r5, r3, r5
   34322:	40a9      	lsls	r1, r5
   34324:	430a      	orrs	r2, r1
   34326:	1e51      	subs	r1, r2, #1
   34328:	418a      	sbcs	r2, r1
   3432a:	2100      	movs	r1, #0
   3432c:	4317      	orrs	r7, r2
   3432e:	e6af      	b.n	34090 <__aeabi_dsub+0xa4>
   34330:	000007ff 	.word	0x000007ff
   34334:	ff7fffff 	.word	0xff7fffff
   34338:	800fffff 	.word	0x800fffff
   3433c:	2e00      	cmp	r6, #0
   3433e:	d03e      	beq.n	343be <__aeabi_dsub+0x3d2>
   34340:	4eb3      	ldr	r6, [pc, #716]	; (34610 <__aeabi_dsub+0x624>)
   34342:	45b4      	cmp	ip, r6
   34344:	d045      	beq.n	343d2 <__aeabi_dsub+0x3e6>
   34346:	2680      	movs	r6, #128	; 0x80
   34348:	0436      	lsls	r6, r6, #16
   3434a:	426d      	negs	r5, r5
   3434c:	4334      	orrs	r4, r6
   3434e:	2d38      	cmp	r5, #56	; 0x38
   34350:	dd00      	ble.n	34354 <__aeabi_dsub+0x368>
   34352:	e0a8      	b.n	344a6 <__aeabi_dsub+0x4ba>
   34354:	2d1f      	cmp	r5, #31
   34356:	dd00      	ble.n	3435a <__aeabi_dsub+0x36e>
   34358:	e11f      	b.n	3459a <__aeabi_dsub+0x5ae>
   3435a:	2620      	movs	r6, #32
   3435c:	0027      	movs	r7, r4
   3435e:	4650      	mov	r0, sl
   34360:	1b76      	subs	r6, r6, r5
   34362:	40b7      	lsls	r7, r6
   34364:	40e8      	lsrs	r0, r5
   34366:	4307      	orrs	r7, r0
   34368:	4650      	mov	r0, sl
   3436a:	40b0      	lsls	r0, r6
   3436c:	1e46      	subs	r6, r0, #1
   3436e:	41b0      	sbcs	r0, r6
   34370:	40ec      	lsrs	r4, r5
   34372:	4338      	orrs	r0, r7
   34374:	1a17      	subs	r7, r2, r0
   34376:	42ba      	cmp	r2, r7
   34378:	4192      	sbcs	r2, r2
   3437a:	1b0c      	subs	r4, r1, r4
   3437c:	4252      	negs	r2, r2
   3437e:	1aa4      	subs	r4, r4, r2
   34380:	4666      	mov	r6, ip
   34382:	4698      	mov	r8, r3
   34384:	e68b      	b.n	3409e <__aeabi_dsub+0xb2>
   34386:	4664      	mov	r4, ip
   34388:	4667      	mov	r7, ip
   3438a:	432c      	orrs	r4, r5
   3438c:	d000      	beq.n	34390 <__aeabi_dsub+0x3a4>
   3438e:	e68b      	b.n	340a8 <__aeabi_dsub+0xbc>
   34390:	2500      	movs	r5, #0
   34392:	2600      	movs	r6, #0
   34394:	2700      	movs	r7, #0
   34396:	e6ea      	b.n	3416e <__aeabi_dsub+0x182>
   34398:	001e      	movs	r6, r3
   3439a:	e6ad      	b.n	340f8 <__aeabi_dsub+0x10c>
   3439c:	2b1f      	cmp	r3, #31
   3439e:	dc60      	bgt.n	34462 <__aeabi_dsub+0x476>
   343a0:	2720      	movs	r7, #32
   343a2:	1af8      	subs	r0, r7, r3
   343a4:	000f      	movs	r7, r1
   343a6:	4684      	mov	ip, r0
   343a8:	4087      	lsls	r7, r0
   343aa:	0010      	movs	r0, r2
   343ac:	40d8      	lsrs	r0, r3
   343ae:	4307      	orrs	r7, r0
   343b0:	4660      	mov	r0, ip
   343b2:	4082      	lsls	r2, r0
   343b4:	1e50      	subs	r0, r2, #1
   343b6:	4182      	sbcs	r2, r0
   343b8:	40d9      	lsrs	r1, r3
   343ba:	4317      	orrs	r7, r2
   343bc:	e6f5      	b.n	341aa <__aeabi_dsub+0x1be>
   343be:	0026      	movs	r6, r4
   343c0:	4650      	mov	r0, sl
   343c2:	4306      	orrs	r6, r0
   343c4:	d005      	beq.n	343d2 <__aeabi_dsub+0x3e6>
   343c6:	43ed      	mvns	r5, r5
   343c8:	2d00      	cmp	r5, #0
   343ca:	d0d3      	beq.n	34374 <__aeabi_dsub+0x388>
   343cc:	4e90      	ldr	r6, [pc, #576]	; (34610 <__aeabi_dsub+0x624>)
   343ce:	45b4      	cmp	ip, r6
   343d0:	d1bd      	bne.n	3434e <__aeabi_dsub+0x362>
   343d2:	000c      	movs	r4, r1
   343d4:	0017      	movs	r7, r2
   343d6:	4666      	mov	r6, ip
   343d8:	4698      	mov	r8, r3
   343da:	e68d      	b.n	340f8 <__aeabi_dsub+0x10c>
   343dc:	488c      	ldr	r0, [pc, #560]	; (34610 <__aeabi_dsub+0x624>)
   343de:	4283      	cmp	r3, r0
   343e0:	d00b      	beq.n	343fa <__aeabi_dsub+0x40e>
   343e2:	4663      	mov	r3, ip
   343e4:	e6d9      	b.n	3419a <__aeabi_dsub+0x1ae>
   343e6:	2d00      	cmp	r5, #0
   343e8:	d000      	beq.n	343ec <__aeabi_dsub+0x400>
   343ea:	e096      	b.n	3451a <__aeabi_dsub+0x52e>
   343ec:	0008      	movs	r0, r1
   343ee:	4310      	orrs	r0, r2
   343f0:	d100      	bne.n	343f4 <__aeabi_dsub+0x408>
   343f2:	e0e2      	b.n	345ba <__aeabi_dsub+0x5ce>
   343f4:	000c      	movs	r4, r1
   343f6:	0017      	movs	r7, r2
   343f8:	4698      	mov	r8, r3
   343fa:	4e85      	ldr	r6, [pc, #532]	; (34610 <__aeabi_dsub+0x624>)
   343fc:	e67c      	b.n	340f8 <__aeabi_dsub+0x10c>
   343fe:	2500      	movs	r5, #0
   34400:	e780      	b.n	34304 <__aeabi_dsub+0x318>
   34402:	2100      	movs	r1, #0
   34404:	e78e      	b.n	34324 <__aeabi_dsub+0x338>
   34406:	0023      	movs	r3, r4
   34408:	4650      	mov	r0, sl
   3440a:	4303      	orrs	r3, r0
   3440c:	2e00      	cmp	r6, #0
   3440e:	d000      	beq.n	34412 <__aeabi_dsub+0x426>
   34410:	e0a8      	b.n	34564 <__aeabi_dsub+0x578>
   34412:	2b00      	cmp	r3, #0
   34414:	d100      	bne.n	34418 <__aeabi_dsub+0x42c>
   34416:	e0de      	b.n	345d6 <__aeabi_dsub+0x5ea>
   34418:	000b      	movs	r3, r1
   3441a:	4313      	orrs	r3, r2
   3441c:	d100      	bne.n	34420 <__aeabi_dsub+0x434>
   3441e:	e66b      	b.n	340f8 <__aeabi_dsub+0x10c>
   34420:	4452      	add	r2, sl
   34422:	4552      	cmp	r2, sl
   34424:	4180      	sbcs	r0, r0
   34426:	1864      	adds	r4, r4, r1
   34428:	4240      	negs	r0, r0
   3442a:	1824      	adds	r4, r4, r0
   3442c:	0017      	movs	r7, r2
   3442e:	0223      	lsls	r3, r4, #8
   34430:	d400      	bmi.n	34434 <__aeabi_dsub+0x448>
   34432:	e6fd      	b.n	34230 <__aeabi_dsub+0x244>
   34434:	4b77      	ldr	r3, [pc, #476]	; (34614 <__aeabi_dsub+0x628>)
   34436:	4666      	mov	r6, ip
   34438:	401c      	ands	r4, r3
   3443a:	e65d      	b.n	340f8 <__aeabi_dsub+0x10c>
   3443c:	0025      	movs	r5, r4
   3443e:	4650      	mov	r0, sl
   34440:	4305      	orrs	r5, r0
   34442:	2e00      	cmp	r6, #0
   34444:	d1cf      	bne.n	343e6 <__aeabi_dsub+0x3fa>
   34446:	2d00      	cmp	r5, #0
   34448:	d14f      	bne.n	344ea <__aeabi_dsub+0x4fe>
   3444a:	000c      	movs	r4, r1
   3444c:	4314      	orrs	r4, r2
   3444e:	d100      	bne.n	34452 <__aeabi_dsub+0x466>
   34450:	e0a0      	b.n	34594 <__aeabi_dsub+0x5a8>
   34452:	000c      	movs	r4, r1
   34454:	0017      	movs	r7, r2
   34456:	4698      	mov	r8, r3
   34458:	e64e      	b.n	340f8 <__aeabi_dsub+0x10c>
   3445a:	4666      	mov	r6, ip
   3445c:	2400      	movs	r4, #0
   3445e:	2700      	movs	r7, #0
   34460:	e685      	b.n	3416e <__aeabi_dsub+0x182>
   34462:	001f      	movs	r7, r3
   34464:	0008      	movs	r0, r1
   34466:	3f20      	subs	r7, #32
   34468:	40f8      	lsrs	r0, r7
   3446a:	0007      	movs	r7, r0
   3446c:	2b20      	cmp	r3, #32
   3446e:	d100      	bne.n	34472 <__aeabi_dsub+0x486>
   34470:	e08e      	b.n	34590 <__aeabi_dsub+0x5a4>
   34472:	2040      	movs	r0, #64	; 0x40
   34474:	1ac3      	subs	r3, r0, r3
   34476:	4099      	lsls	r1, r3
   34478:	430a      	orrs	r2, r1
   3447a:	1e51      	subs	r1, r2, #1
   3447c:	418a      	sbcs	r2, r1
   3447e:	2100      	movs	r1, #0
   34480:	4317      	orrs	r7, r2
   34482:	e692      	b.n	341aa <__aeabi_dsub+0x1be>
   34484:	2e00      	cmp	r6, #0
   34486:	d114      	bne.n	344b2 <__aeabi_dsub+0x4c6>
   34488:	0026      	movs	r6, r4
   3448a:	4650      	mov	r0, sl
   3448c:	4306      	orrs	r6, r0
   3448e:	d062      	beq.n	34556 <__aeabi_dsub+0x56a>
   34490:	43db      	mvns	r3, r3
   34492:	2b00      	cmp	r3, #0
   34494:	d15c      	bne.n	34550 <__aeabi_dsub+0x564>
   34496:	1887      	adds	r7, r0, r2
   34498:	4297      	cmp	r7, r2
   3449a:	4192      	sbcs	r2, r2
   3449c:	1864      	adds	r4, r4, r1
   3449e:	4252      	negs	r2, r2
   344a0:	18a4      	adds	r4, r4, r2
   344a2:	4666      	mov	r6, ip
   344a4:	e687      	b.n	341b6 <__aeabi_dsub+0x1ca>
   344a6:	4650      	mov	r0, sl
   344a8:	4320      	orrs	r0, r4
   344aa:	1e44      	subs	r4, r0, #1
   344ac:	41a0      	sbcs	r0, r4
   344ae:	2400      	movs	r4, #0
   344b0:	e760      	b.n	34374 <__aeabi_dsub+0x388>
   344b2:	4e57      	ldr	r6, [pc, #348]	; (34610 <__aeabi_dsub+0x624>)
   344b4:	45b4      	cmp	ip, r6
   344b6:	d04e      	beq.n	34556 <__aeabi_dsub+0x56a>
   344b8:	2680      	movs	r6, #128	; 0x80
   344ba:	0436      	lsls	r6, r6, #16
   344bc:	425b      	negs	r3, r3
   344be:	4334      	orrs	r4, r6
   344c0:	2b38      	cmp	r3, #56	; 0x38
   344c2:	dd00      	ble.n	344c6 <__aeabi_dsub+0x4da>
   344c4:	e07f      	b.n	345c6 <__aeabi_dsub+0x5da>
   344c6:	2b1f      	cmp	r3, #31
   344c8:	dd00      	ble.n	344cc <__aeabi_dsub+0x4e0>
   344ca:	e08b      	b.n	345e4 <__aeabi_dsub+0x5f8>
   344cc:	2620      	movs	r6, #32
   344ce:	0027      	movs	r7, r4
   344d0:	4650      	mov	r0, sl
   344d2:	1af6      	subs	r6, r6, r3
   344d4:	40b7      	lsls	r7, r6
   344d6:	40d8      	lsrs	r0, r3
   344d8:	4307      	orrs	r7, r0
   344da:	4650      	mov	r0, sl
   344dc:	40b0      	lsls	r0, r6
   344de:	1e46      	subs	r6, r0, #1
   344e0:	41b0      	sbcs	r0, r6
   344e2:	4307      	orrs	r7, r0
   344e4:	40dc      	lsrs	r4, r3
   344e6:	18bf      	adds	r7, r7, r2
   344e8:	e7d6      	b.n	34498 <__aeabi_dsub+0x4ac>
   344ea:	000d      	movs	r5, r1
   344ec:	4315      	orrs	r5, r2
   344ee:	d100      	bne.n	344f2 <__aeabi_dsub+0x506>
   344f0:	e602      	b.n	340f8 <__aeabi_dsub+0x10c>
   344f2:	4650      	mov	r0, sl
   344f4:	1a80      	subs	r0, r0, r2
   344f6:	4582      	cmp	sl, r0
   344f8:	41bf      	sbcs	r7, r7
   344fa:	1a65      	subs	r5, r4, r1
   344fc:	427f      	negs	r7, r7
   344fe:	1bed      	subs	r5, r5, r7
   34500:	4684      	mov	ip, r0
   34502:	0228      	lsls	r0, r5, #8
   34504:	d400      	bmi.n	34508 <__aeabi_dsub+0x51c>
   34506:	e68d      	b.n	34224 <__aeabi_dsub+0x238>
   34508:	4650      	mov	r0, sl
   3450a:	1a17      	subs	r7, r2, r0
   3450c:	42ba      	cmp	r2, r7
   3450e:	4192      	sbcs	r2, r2
   34510:	1b0c      	subs	r4, r1, r4
   34512:	4252      	negs	r2, r2
   34514:	1aa4      	subs	r4, r4, r2
   34516:	4698      	mov	r8, r3
   34518:	e5ee      	b.n	340f8 <__aeabi_dsub+0x10c>
   3451a:	000d      	movs	r5, r1
   3451c:	4315      	orrs	r5, r2
   3451e:	d100      	bne.n	34522 <__aeabi_dsub+0x536>
   34520:	e76b      	b.n	343fa <__aeabi_dsub+0x40e>
   34522:	4650      	mov	r0, sl
   34524:	0767      	lsls	r7, r4, #29
   34526:	08c0      	lsrs	r0, r0, #3
   34528:	4307      	orrs	r7, r0
   3452a:	2080      	movs	r0, #128	; 0x80
   3452c:	08e4      	lsrs	r4, r4, #3
   3452e:	0300      	lsls	r0, r0, #12
   34530:	4204      	tst	r4, r0
   34532:	d007      	beq.n	34544 <__aeabi_dsub+0x558>
   34534:	08cd      	lsrs	r5, r1, #3
   34536:	4205      	tst	r5, r0
   34538:	d104      	bne.n	34544 <__aeabi_dsub+0x558>
   3453a:	002c      	movs	r4, r5
   3453c:	4698      	mov	r8, r3
   3453e:	08d7      	lsrs	r7, r2, #3
   34540:	0749      	lsls	r1, r1, #29
   34542:	430f      	orrs	r7, r1
   34544:	0f7b      	lsrs	r3, r7, #29
   34546:	00e4      	lsls	r4, r4, #3
   34548:	431c      	orrs	r4, r3
   3454a:	00ff      	lsls	r7, r7, #3
   3454c:	4e30      	ldr	r6, [pc, #192]	; (34610 <__aeabi_dsub+0x624>)
   3454e:	e5d3      	b.n	340f8 <__aeabi_dsub+0x10c>
   34550:	4e2f      	ldr	r6, [pc, #188]	; (34610 <__aeabi_dsub+0x624>)
   34552:	45b4      	cmp	ip, r6
   34554:	d1b4      	bne.n	344c0 <__aeabi_dsub+0x4d4>
   34556:	000c      	movs	r4, r1
   34558:	0017      	movs	r7, r2
   3455a:	4666      	mov	r6, ip
   3455c:	e5cc      	b.n	340f8 <__aeabi_dsub+0x10c>
   3455e:	2700      	movs	r7, #0
   34560:	2400      	movs	r4, #0
   34562:	e5e8      	b.n	34136 <__aeabi_dsub+0x14a>
   34564:	2b00      	cmp	r3, #0
   34566:	d039      	beq.n	345dc <__aeabi_dsub+0x5f0>
   34568:	000b      	movs	r3, r1
   3456a:	4313      	orrs	r3, r2
   3456c:	d100      	bne.n	34570 <__aeabi_dsub+0x584>
   3456e:	e744      	b.n	343fa <__aeabi_dsub+0x40e>
   34570:	08c0      	lsrs	r0, r0, #3
   34572:	0767      	lsls	r7, r4, #29
   34574:	4307      	orrs	r7, r0
   34576:	2080      	movs	r0, #128	; 0x80
   34578:	08e4      	lsrs	r4, r4, #3
   3457a:	0300      	lsls	r0, r0, #12
   3457c:	4204      	tst	r4, r0
   3457e:	d0e1      	beq.n	34544 <__aeabi_dsub+0x558>
   34580:	08cb      	lsrs	r3, r1, #3
   34582:	4203      	tst	r3, r0
   34584:	d1de      	bne.n	34544 <__aeabi_dsub+0x558>
   34586:	08d7      	lsrs	r7, r2, #3
   34588:	0749      	lsls	r1, r1, #29
   3458a:	430f      	orrs	r7, r1
   3458c:	001c      	movs	r4, r3
   3458e:	e7d9      	b.n	34544 <__aeabi_dsub+0x558>
   34590:	2100      	movs	r1, #0
   34592:	e771      	b.n	34478 <__aeabi_dsub+0x48c>
   34594:	2500      	movs	r5, #0
   34596:	2700      	movs	r7, #0
   34598:	e5e9      	b.n	3416e <__aeabi_dsub+0x182>
   3459a:	002e      	movs	r6, r5
   3459c:	0027      	movs	r7, r4
   3459e:	3e20      	subs	r6, #32
   345a0:	40f7      	lsrs	r7, r6
   345a2:	2d20      	cmp	r5, #32
   345a4:	d02f      	beq.n	34606 <__aeabi_dsub+0x61a>
   345a6:	2640      	movs	r6, #64	; 0x40
   345a8:	1b75      	subs	r5, r6, r5
   345aa:	40ac      	lsls	r4, r5
   345ac:	4650      	mov	r0, sl
   345ae:	4320      	orrs	r0, r4
   345b0:	1e44      	subs	r4, r0, #1
   345b2:	41a0      	sbcs	r0, r4
   345b4:	2400      	movs	r4, #0
   345b6:	4338      	orrs	r0, r7
   345b8:	e6dc      	b.n	34374 <__aeabi_dsub+0x388>
   345ba:	2480      	movs	r4, #128	; 0x80
   345bc:	2500      	movs	r5, #0
   345be:	0324      	lsls	r4, r4, #12
   345c0:	4e13      	ldr	r6, [pc, #76]	; (34610 <__aeabi_dsub+0x624>)
   345c2:	2700      	movs	r7, #0
   345c4:	e5d3      	b.n	3416e <__aeabi_dsub+0x182>
   345c6:	4650      	mov	r0, sl
   345c8:	4320      	orrs	r0, r4
   345ca:	0007      	movs	r7, r0
   345cc:	1e78      	subs	r0, r7, #1
   345ce:	4187      	sbcs	r7, r0
   345d0:	2400      	movs	r4, #0
   345d2:	18bf      	adds	r7, r7, r2
   345d4:	e760      	b.n	34498 <__aeabi_dsub+0x4ac>
   345d6:	000c      	movs	r4, r1
   345d8:	0017      	movs	r7, r2
   345da:	e58d      	b.n	340f8 <__aeabi_dsub+0x10c>
   345dc:	000c      	movs	r4, r1
   345de:	0017      	movs	r7, r2
   345e0:	4e0b      	ldr	r6, [pc, #44]	; (34610 <__aeabi_dsub+0x624>)
   345e2:	e589      	b.n	340f8 <__aeabi_dsub+0x10c>
   345e4:	001e      	movs	r6, r3
   345e6:	0027      	movs	r7, r4
   345e8:	3e20      	subs	r6, #32
   345ea:	40f7      	lsrs	r7, r6
   345ec:	2b20      	cmp	r3, #32
   345ee:	d00c      	beq.n	3460a <__aeabi_dsub+0x61e>
   345f0:	2640      	movs	r6, #64	; 0x40
   345f2:	1af3      	subs	r3, r6, r3
   345f4:	409c      	lsls	r4, r3
   345f6:	4650      	mov	r0, sl
   345f8:	4320      	orrs	r0, r4
   345fa:	1e44      	subs	r4, r0, #1
   345fc:	41a0      	sbcs	r0, r4
   345fe:	4307      	orrs	r7, r0
   34600:	2400      	movs	r4, #0
   34602:	18bf      	adds	r7, r7, r2
   34604:	e748      	b.n	34498 <__aeabi_dsub+0x4ac>
   34606:	2400      	movs	r4, #0
   34608:	e7d0      	b.n	345ac <__aeabi_dsub+0x5c0>
   3460a:	2400      	movs	r4, #0
   3460c:	e7f3      	b.n	345f6 <__aeabi_dsub+0x60a>
   3460e:	46c0      	nop			; (mov r8, r8)
   34610:	000007ff 	.word	0x000007ff
   34614:	ff7fffff 	.word	0xff7fffff

00034618 <__aeabi_d2iz>:
   34618:	b530      	push	{r4, r5, lr}
   3461a:	4d13      	ldr	r5, [pc, #76]	; (34668 <__aeabi_d2iz+0x50>)
   3461c:	030a      	lsls	r2, r1, #12
   3461e:	004b      	lsls	r3, r1, #1
   34620:	0b12      	lsrs	r2, r2, #12
   34622:	0d5b      	lsrs	r3, r3, #21
   34624:	0fc9      	lsrs	r1, r1, #31
   34626:	2400      	movs	r4, #0
   34628:	42ab      	cmp	r3, r5
   3462a:	dd10      	ble.n	3464e <__aeabi_d2iz+0x36>
   3462c:	4c0f      	ldr	r4, [pc, #60]	; (3466c <__aeabi_d2iz+0x54>)
   3462e:	42a3      	cmp	r3, r4
   34630:	dc0f      	bgt.n	34652 <__aeabi_d2iz+0x3a>
   34632:	2480      	movs	r4, #128	; 0x80
   34634:	4d0e      	ldr	r5, [pc, #56]	; (34670 <__aeabi_d2iz+0x58>)
   34636:	0364      	lsls	r4, r4, #13
   34638:	4322      	orrs	r2, r4
   3463a:	1aed      	subs	r5, r5, r3
   3463c:	2d1f      	cmp	r5, #31
   3463e:	dd0b      	ble.n	34658 <__aeabi_d2iz+0x40>
   34640:	480c      	ldr	r0, [pc, #48]	; (34674 <__aeabi_d2iz+0x5c>)
   34642:	1ac3      	subs	r3, r0, r3
   34644:	40da      	lsrs	r2, r3
   34646:	4254      	negs	r4, r2
   34648:	2900      	cmp	r1, #0
   3464a:	d100      	bne.n	3464e <__aeabi_d2iz+0x36>
   3464c:	0014      	movs	r4, r2
   3464e:	0020      	movs	r0, r4
   34650:	bd30      	pop	{r4, r5, pc}
   34652:	4b09      	ldr	r3, [pc, #36]	; (34678 <__aeabi_d2iz+0x60>)
   34654:	18cc      	adds	r4, r1, r3
   34656:	e7fa      	b.n	3464e <__aeabi_d2iz+0x36>
   34658:	4c08      	ldr	r4, [pc, #32]	; (3467c <__aeabi_d2iz+0x64>)
   3465a:	40e8      	lsrs	r0, r5
   3465c:	46a4      	mov	ip, r4
   3465e:	4463      	add	r3, ip
   34660:	409a      	lsls	r2, r3
   34662:	4302      	orrs	r2, r0
   34664:	e7ef      	b.n	34646 <__aeabi_d2iz+0x2e>
   34666:	46c0      	nop			; (mov r8, r8)
   34668:	000003fe 	.word	0x000003fe
   3466c:	0000041d 	.word	0x0000041d
   34670:	00000433 	.word	0x00000433
   34674:	00000413 	.word	0x00000413
   34678:	7fffffff 	.word	0x7fffffff
   3467c:	fffffbed 	.word	0xfffffbed

00034680 <__aeabi_ui2d>:
   34680:	b510      	push	{r4, lr}
   34682:	1e04      	subs	r4, r0, #0
   34684:	d028      	beq.n	346d8 <__aeabi_ui2d+0x58>
   34686:	f000 f885 	bl	34794 <__clzsi2>
   3468a:	4b15      	ldr	r3, [pc, #84]	; (346e0 <__aeabi_ui2d+0x60>)
   3468c:	4a15      	ldr	r2, [pc, #84]	; (346e4 <__aeabi_ui2d+0x64>)
   3468e:	1a1b      	subs	r3, r3, r0
   34690:	1ad2      	subs	r2, r2, r3
   34692:	2a1f      	cmp	r2, #31
   34694:	dd15      	ble.n	346c2 <__aeabi_ui2d+0x42>
   34696:	4a14      	ldr	r2, [pc, #80]	; (346e8 <__aeabi_ui2d+0x68>)
   34698:	1ad2      	subs	r2, r2, r3
   3469a:	4094      	lsls	r4, r2
   3469c:	2200      	movs	r2, #0
   3469e:	0324      	lsls	r4, r4, #12
   346a0:	055b      	lsls	r3, r3, #21
   346a2:	0b24      	lsrs	r4, r4, #12
   346a4:	0d5b      	lsrs	r3, r3, #21
   346a6:	2100      	movs	r1, #0
   346a8:	0010      	movs	r0, r2
   346aa:	0324      	lsls	r4, r4, #12
   346ac:	0d0a      	lsrs	r2, r1, #20
   346ae:	0b24      	lsrs	r4, r4, #12
   346b0:	0512      	lsls	r2, r2, #20
   346b2:	4322      	orrs	r2, r4
   346b4:	4c0d      	ldr	r4, [pc, #52]	; (346ec <__aeabi_ui2d+0x6c>)
   346b6:	051b      	lsls	r3, r3, #20
   346b8:	4022      	ands	r2, r4
   346ba:	4313      	orrs	r3, r2
   346bc:	005b      	lsls	r3, r3, #1
   346be:	0859      	lsrs	r1, r3, #1
   346c0:	bd10      	pop	{r4, pc}
   346c2:	0021      	movs	r1, r4
   346c4:	4091      	lsls	r1, r2
   346c6:	000a      	movs	r2, r1
   346c8:	210b      	movs	r1, #11
   346ca:	1a08      	subs	r0, r1, r0
   346cc:	40c4      	lsrs	r4, r0
   346ce:	055b      	lsls	r3, r3, #21
   346d0:	0324      	lsls	r4, r4, #12
   346d2:	0b24      	lsrs	r4, r4, #12
   346d4:	0d5b      	lsrs	r3, r3, #21
   346d6:	e7e6      	b.n	346a6 <__aeabi_ui2d+0x26>
   346d8:	2300      	movs	r3, #0
   346da:	2400      	movs	r4, #0
   346dc:	2200      	movs	r2, #0
   346de:	e7e2      	b.n	346a6 <__aeabi_ui2d+0x26>
   346e0:	0000041e 	.word	0x0000041e
   346e4:	00000433 	.word	0x00000433
   346e8:	00000413 	.word	0x00000413
   346ec:	800fffff 	.word	0x800fffff

000346f0 <__aeabi_f2d>:
   346f0:	0041      	lsls	r1, r0, #1
   346f2:	0e09      	lsrs	r1, r1, #24
   346f4:	1c4b      	adds	r3, r1, #1
   346f6:	b570      	push	{r4, r5, r6, lr}
   346f8:	b2db      	uxtb	r3, r3
   346fa:	0246      	lsls	r6, r0, #9
   346fc:	0a75      	lsrs	r5, r6, #9
   346fe:	0fc4      	lsrs	r4, r0, #31
   34700:	2b01      	cmp	r3, #1
   34702:	dd14      	ble.n	3472e <__aeabi_f2d+0x3e>
   34704:	23e0      	movs	r3, #224	; 0xe0
   34706:	009b      	lsls	r3, r3, #2
   34708:	076d      	lsls	r5, r5, #29
   3470a:	0b36      	lsrs	r6, r6, #12
   3470c:	18cb      	adds	r3, r1, r3
   3470e:	2100      	movs	r1, #0
   34710:	0d0a      	lsrs	r2, r1, #20
   34712:	0028      	movs	r0, r5
   34714:	0512      	lsls	r2, r2, #20
   34716:	4d1c      	ldr	r5, [pc, #112]	; (34788 <__aeabi_f2d+0x98>)
   34718:	4332      	orrs	r2, r6
   3471a:	055b      	lsls	r3, r3, #21
   3471c:	402a      	ands	r2, r5
   3471e:	085b      	lsrs	r3, r3, #1
   34720:	4313      	orrs	r3, r2
   34722:	005b      	lsls	r3, r3, #1
   34724:	07e4      	lsls	r4, r4, #31
   34726:	085b      	lsrs	r3, r3, #1
   34728:	4323      	orrs	r3, r4
   3472a:	0019      	movs	r1, r3
   3472c:	bd70      	pop	{r4, r5, r6, pc}
   3472e:	2900      	cmp	r1, #0
   34730:	d114      	bne.n	3475c <__aeabi_f2d+0x6c>
   34732:	2d00      	cmp	r5, #0
   34734:	d01e      	beq.n	34774 <__aeabi_f2d+0x84>
   34736:	0028      	movs	r0, r5
   34738:	f000 f82c 	bl	34794 <__clzsi2>
   3473c:	280a      	cmp	r0, #10
   3473e:	dc1c      	bgt.n	3477a <__aeabi_f2d+0x8a>
   34740:	230b      	movs	r3, #11
   34742:	002a      	movs	r2, r5
   34744:	1a1b      	subs	r3, r3, r0
   34746:	40da      	lsrs	r2, r3
   34748:	0003      	movs	r3, r0
   3474a:	3315      	adds	r3, #21
   3474c:	409d      	lsls	r5, r3
   3474e:	4b0f      	ldr	r3, [pc, #60]	; (3478c <__aeabi_f2d+0x9c>)
   34750:	0312      	lsls	r2, r2, #12
   34752:	1a1b      	subs	r3, r3, r0
   34754:	055b      	lsls	r3, r3, #21
   34756:	0b16      	lsrs	r6, r2, #12
   34758:	0d5b      	lsrs	r3, r3, #21
   3475a:	e7d8      	b.n	3470e <__aeabi_f2d+0x1e>
   3475c:	2d00      	cmp	r5, #0
   3475e:	d006      	beq.n	3476e <__aeabi_f2d+0x7e>
   34760:	0b32      	lsrs	r2, r6, #12
   34762:	2680      	movs	r6, #128	; 0x80
   34764:	0336      	lsls	r6, r6, #12
   34766:	076d      	lsls	r5, r5, #29
   34768:	4316      	orrs	r6, r2
   3476a:	4b09      	ldr	r3, [pc, #36]	; (34790 <__aeabi_f2d+0xa0>)
   3476c:	e7cf      	b.n	3470e <__aeabi_f2d+0x1e>
   3476e:	4b08      	ldr	r3, [pc, #32]	; (34790 <__aeabi_f2d+0xa0>)
   34770:	2600      	movs	r6, #0
   34772:	e7cc      	b.n	3470e <__aeabi_f2d+0x1e>
   34774:	2300      	movs	r3, #0
   34776:	2600      	movs	r6, #0
   34778:	e7c9      	b.n	3470e <__aeabi_f2d+0x1e>
   3477a:	0003      	movs	r3, r0
   3477c:	002a      	movs	r2, r5
   3477e:	3b0b      	subs	r3, #11
   34780:	409a      	lsls	r2, r3
   34782:	2500      	movs	r5, #0
   34784:	e7e3      	b.n	3474e <__aeabi_f2d+0x5e>
   34786:	46c0      	nop			; (mov r8, r8)
   34788:	800fffff 	.word	0x800fffff
   3478c:	00000389 	.word	0x00000389
   34790:	000007ff 	.word	0x000007ff

00034794 <__clzsi2>:
   34794:	211c      	movs	r1, #28
   34796:	2301      	movs	r3, #1
   34798:	041b      	lsls	r3, r3, #16
   3479a:	4298      	cmp	r0, r3
   3479c:	d301      	bcc.n	347a2 <__clzsi2+0xe>
   3479e:	0c00      	lsrs	r0, r0, #16
   347a0:	3910      	subs	r1, #16
   347a2:	0a1b      	lsrs	r3, r3, #8
   347a4:	4298      	cmp	r0, r3
   347a6:	d301      	bcc.n	347ac <__clzsi2+0x18>
   347a8:	0a00      	lsrs	r0, r0, #8
   347aa:	3908      	subs	r1, #8
   347ac:	091b      	lsrs	r3, r3, #4
   347ae:	4298      	cmp	r0, r3
   347b0:	d301      	bcc.n	347b6 <__clzsi2+0x22>
   347b2:	0900      	lsrs	r0, r0, #4
   347b4:	3904      	subs	r1, #4
   347b6:	a202      	add	r2, pc, #8	; (adr r2, 347c0 <__clzsi2+0x2c>)
   347b8:	5c10      	ldrb	r0, [r2, r0]
   347ba:	1840      	adds	r0, r0, r1
   347bc:	4770      	bx	lr
   347be:	46c0      	nop			; (mov r8, r8)
   347c0:	02020304 	.word	0x02020304
   347c4:	01010101 	.word	0x01010101
	...

000347d0 <atoi>:
   347d0:	b510      	push	{r4, lr}
   347d2:	220a      	movs	r2, #10
   347d4:	2100      	movs	r1, #0
   347d6:	f000 fb0d 	bl	34df4 <strtol>
   347da:	bd10      	pop	{r4, pc}

000347dc <__libc_init_array>:
   347dc:	b570      	push	{r4, r5, r6, lr}
   347de:	2600      	movs	r6, #0
   347e0:	4d0c      	ldr	r5, [pc, #48]	; (34814 <__libc_init_array+0x38>)
   347e2:	4c0d      	ldr	r4, [pc, #52]	; (34818 <__libc_init_array+0x3c>)
   347e4:	1b64      	subs	r4, r4, r5
   347e6:	10a4      	asrs	r4, r4, #2
   347e8:	42a6      	cmp	r6, r4
   347ea:	d109      	bne.n	34800 <__libc_init_array+0x24>
   347ec:	2600      	movs	r6, #0
   347ee:	f005 fd2b 	bl	3a248 <_init>
   347f2:	4d0a      	ldr	r5, [pc, #40]	; (3481c <__libc_init_array+0x40>)
   347f4:	4c0a      	ldr	r4, [pc, #40]	; (34820 <__libc_init_array+0x44>)
   347f6:	1b64      	subs	r4, r4, r5
   347f8:	10a4      	asrs	r4, r4, #2
   347fa:	42a6      	cmp	r6, r4
   347fc:	d105      	bne.n	3480a <__libc_init_array+0x2e>
   347fe:	bd70      	pop	{r4, r5, r6, pc}
   34800:	00b3      	lsls	r3, r6, #2
   34802:	58eb      	ldr	r3, [r5, r3]
   34804:	4798      	blx	r3
   34806:	3601      	adds	r6, #1
   34808:	e7ee      	b.n	347e8 <__libc_init_array+0xc>
   3480a:	00b3      	lsls	r3, r6, #2
   3480c:	58eb      	ldr	r3, [r5, r3]
   3480e:	4798      	blx	r3
   34810:	3601      	adds	r6, #1
   34812:	e7f2      	b.n	347fa <__libc_init_array+0x1e>
   34814:	0003a254 	.word	0x0003a254
   34818:	0003a254 	.word	0x0003a254
   3481c:	0003a254 	.word	0x0003a254
   34820:	0003a258 	.word	0x0003a258

00034824 <malloc>:
   34824:	b510      	push	{r4, lr}
   34826:	4b03      	ldr	r3, [pc, #12]	; (34834 <malloc+0x10>)
   34828:	0001      	movs	r1, r0
   3482a:	6818      	ldr	r0, [r3, #0]
   3482c:	f000 f87c 	bl	34928 <_malloc_r>
   34830:	bd10      	pop	{r4, pc}
   34832:	46c0      	nop			; (mov r8, r8)
   34834:	20000130 	.word	0x20000130

00034838 <free>:
   34838:	b510      	push	{r4, lr}
   3483a:	4b03      	ldr	r3, [pc, #12]	; (34848 <free+0x10>)
   3483c:	0001      	movs	r1, r0
   3483e:	6818      	ldr	r0, [r3, #0]
   34840:	f000 f828 	bl	34894 <_free_r>
   34844:	bd10      	pop	{r4, pc}
   34846:	46c0      	nop			; (mov r8, r8)
   34848:	20000130 	.word	0x20000130

0003484c <memcpy>:
   3484c:	2300      	movs	r3, #0
   3484e:	b510      	push	{r4, lr}
   34850:	429a      	cmp	r2, r3
   34852:	d100      	bne.n	34856 <memcpy+0xa>
   34854:	bd10      	pop	{r4, pc}
   34856:	5ccc      	ldrb	r4, [r1, r3]
   34858:	54c4      	strb	r4, [r0, r3]
   3485a:	3301      	adds	r3, #1
   3485c:	e7f8      	b.n	34850 <memcpy+0x4>

0003485e <memmove>:
   3485e:	b510      	push	{r4, lr}
   34860:	4288      	cmp	r0, r1
   34862:	d902      	bls.n	3486a <memmove+0xc>
   34864:	188b      	adds	r3, r1, r2
   34866:	4298      	cmp	r0, r3
   34868:	d308      	bcc.n	3487c <memmove+0x1e>
   3486a:	2300      	movs	r3, #0
   3486c:	429a      	cmp	r2, r3
   3486e:	d007      	beq.n	34880 <memmove+0x22>
   34870:	5ccc      	ldrb	r4, [r1, r3]
   34872:	54c4      	strb	r4, [r0, r3]
   34874:	3301      	adds	r3, #1
   34876:	e7f9      	b.n	3486c <memmove+0xe>
   34878:	5c8b      	ldrb	r3, [r1, r2]
   3487a:	5483      	strb	r3, [r0, r2]
   3487c:	3a01      	subs	r2, #1
   3487e:	d2fb      	bcs.n	34878 <memmove+0x1a>
   34880:	bd10      	pop	{r4, pc}

00034882 <memset>:
   34882:	0003      	movs	r3, r0
   34884:	1882      	adds	r2, r0, r2
   34886:	4293      	cmp	r3, r2
   34888:	d100      	bne.n	3488c <memset+0xa>
   3488a:	4770      	bx	lr
   3488c:	7019      	strb	r1, [r3, #0]
   3488e:	3301      	adds	r3, #1
   34890:	e7f9      	b.n	34886 <memset+0x4>
	...

00034894 <_free_r>:
   34894:	b570      	push	{r4, r5, r6, lr}
   34896:	0005      	movs	r5, r0
   34898:	2900      	cmp	r1, #0
   3489a:	d010      	beq.n	348be <_free_r+0x2a>
   3489c:	1f0c      	subs	r4, r1, #4
   3489e:	6823      	ldr	r3, [r4, #0]
   348a0:	2b00      	cmp	r3, #0
   348a2:	da00      	bge.n	348a6 <_free_r+0x12>
   348a4:	18e4      	adds	r4, r4, r3
   348a6:	0028      	movs	r0, r5
   348a8:	f000 fdd8 	bl	3545c <__malloc_lock>
   348ac:	4a1d      	ldr	r2, [pc, #116]	; (34924 <_free_r+0x90>)
   348ae:	6813      	ldr	r3, [r2, #0]
   348b0:	2b00      	cmp	r3, #0
   348b2:	d105      	bne.n	348c0 <_free_r+0x2c>
   348b4:	6063      	str	r3, [r4, #4]
   348b6:	6014      	str	r4, [r2, #0]
   348b8:	0028      	movs	r0, r5
   348ba:	f000 fdd0 	bl	3545e <__malloc_unlock>
   348be:	bd70      	pop	{r4, r5, r6, pc}
   348c0:	42a3      	cmp	r3, r4
   348c2:	d909      	bls.n	348d8 <_free_r+0x44>
   348c4:	6821      	ldr	r1, [r4, #0]
   348c6:	1860      	adds	r0, r4, r1
   348c8:	4283      	cmp	r3, r0
   348ca:	d1f3      	bne.n	348b4 <_free_r+0x20>
   348cc:	6818      	ldr	r0, [r3, #0]
   348ce:	685b      	ldr	r3, [r3, #4]
   348d0:	1841      	adds	r1, r0, r1
   348d2:	6021      	str	r1, [r4, #0]
   348d4:	e7ee      	b.n	348b4 <_free_r+0x20>
   348d6:	0013      	movs	r3, r2
   348d8:	685a      	ldr	r2, [r3, #4]
   348da:	2a00      	cmp	r2, #0
   348dc:	d001      	beq.n	348e2 <_free_r+0x4e>
   348de:	42a2      	cmp	r2, r4
   348e0:	d9f9      	bls.n	348d6 <_free_r+0x42>
   348e2:	6819      	ldr	r1, [r3, #0]
   348e4:	1858      	adds	r0, r3, r1
   348e6:	42a0      	cmp	r0, r4
   348e8:	d10b      	bne.n	34902 <_free_r+0x6e>
   348ea:	6820      	ldr	r0, [r4, #0]
   348ec:	1809      	adds	r1, r1, r0
   348ee:	1858      	adds	r0, r3, r1
   348f0:	6019      	str	r1, [r3, #0]
   348f2:	4282      	cmp	r2, r0
   348f4:	d1e0      	bne.n	348b8 <_free_r+0x24>
   348f6:	6810      	ldr	r0, [r2, #0]
   348f8:	6852      	ldr	r2, [r2, #4]
   348fa:	1841      	adds	r1, r0, r1
   348fc:	6019      	str	r1, [r3, #0]
   348fe:	605a      	str	r2, [r3, #4]
   34900:	e7da      	b.n	348b8 <_free_r+0x24>
   34902:	42a0      	cmp	r0, r4
   34904:	d902      	bls.n	3490c <_free_r+0x78>
   34906:	230c      	movs	r3, #12
   34908:	602b      	str	r3, [r5, #0]
   3490a:	e7d5      	b.n	348b8 <_free_r+0x24>
   3490c:	6821      	ldr	r1, [r4, #0]
   3490e:	1860      	adds	r0, r4, r1
   34910:	4282      	cmp	r2, r0
   34912:	d103      	bne.n	3491c <_free_r+0x88>
   34914:	6810      	ldr	r0, [r2, #0]
   34916:	6852      	ldr	r2, [r2, #4]
   34918:	1841      	adds	r1, r0, r1
   3491a:	6021      	str	r1, [r4, #0]
   3491c:	6062      	str	r2, [r4, #4]
   3491e:	605c      	str	r4, [r3, #4]
   34920:	e7ca      	b.n	348b8 <_free_r+0x24>
   34922:	46c0      	nop			; (mov r8, r8)
   34924:	20004720 	.word	0x20004720

00034928 <_malloc_r>:
   34928:	2303      	movs	r3, #3
   3492a:	b570      	push	{r4, r5, r6, lr}
   3492c:	1ccd      	adds	r5, r1, #3
   3492e:	439d      	bics	r5, r3
   34930:	3508      	adds	r5, #8
   34932:	0006      	movs	r6, r0
   34934:	2d0c      	cmp	r5, #12
   34936:	d21e      	bcs.n	34976 <_malloc_r+0x4e>
   34938:	250c      	movs	r5, #12
   3493a:	42a9      	cmp	r1, r5
   3493c:	d81d      	bhi.n	3497a <_malloc_r+0x52>
   3493e:	0030      	movs	r0, r6
   34940:	f000 fd8c 	bl	3545c <__malloc_lock>
   34944:	4a25      	ldr	r2, [pc, #148]	; (349dc <_malloc_r+0xb4>)
   34946:	6814      	ldr	r4, [r2, #0]
   34948:	0021      	movs	r1, r4
   3494a:	2900      	cmp	r1, #0
   3494c:	d119      	bne.n	34982 <_malloc_r+0x5a>
   3494e:	4c24      	ldr	r4, [pc, #144]	; (349e0 <_malloc_r+0xb8>)
   34950:	6823      	ldr	r3, [r4, #0]
   34952:	2b00      	cmp	r3, #0
   34954:	d103      	bne.n	3495e <_malloc_r+0x36>
   34956:	0030      	movs	r0, r6
   34958:	f000 f8ae 	bl	34ab8 <_sbrk_r>
   3495c:	6020      	str	r0, [r4, #0]
   3495e:	0029      	movs	r1, r5
   34960:	0030      	movs	r0, r6
   34962:	f000 f8a9 	bl	34ab8 <_sbrk_r>
   34966:	1c43      	adds	r3, r0, #1
   34968:	d12c      	bne.n	349c4 <_malloc_r+0x9c>
   3496a:	230c      	movs	r3, #12
   3496c:	0030      	movs	r0, r6
   3496e:	6033      	str	r3, [r6, #0]
   34970:	f000 fd75 	bl	3545e <__malloc_unlock>
   34974:	e003      	b.n	3497e <_malloc_r+0x56>
   34976:	2d00      	cmp	r5, #0
   34978:	dadf      	bge.n	3493a <_malloc_r+0x12>
   3497a:	230c      	movs	r3, #12
   3497c:	6033      	str	r3, [r6, #0]
   3497e:	2000      	movs	r0, #0
   34980:	bd70      	pop	{r4, r5, r6, pc}
   34982:	680b      	ldr	r3, [r1, #0]
   34984:	1b5b      	subs	r3, r3, r5
   34986:	d41a      	bmi.n	349be <_malloc_r+0x96>
   34988:	2b0b      	cmp	r3, #11
   3498a:	d903      	bls.n	34994 <_malloc_r+0x6c>
   3498c:	600b      	str	r3, [r1, #0]
   3498e:	18cc      	adds	r4, r1, r3
   34990:	6025      	str	r5, [r4, #0]
   34992:	e003      	b.n	3499c <_malloc_r+0x74>
   34994:	428c      	cmp	r4, r1
   34996:	d10e      	bne.n	349b6 <_malloc_r+0x8e>
   34998:	6863      	ldr	r3, [r4, #4]
   3499a:	6013      	str	r3, [r2, #0]
   3499c:	0030      	movs	r0, r6
   3499e:	f000 fd5e 	bl	3545e <__malloc_unlock>
   349a2:	0020      	movs	r0, r4
   349a4:	2207      	movs	r2, #7
   349a6:	300b      	adds	r0, #11
   349a8:	1d23      	adds	r3, r4, #4
   349aa:	4390      	bics	r0, r2
   349ac:	1ac3      	subs	r3, r0, r3
   349ae:	d0e7      	beq.n	34980 <_malloc_r+0x58>
   349b0:	425a      	negs	r2, r3
   349b2:	50e2      	str	r2, [r4, r3]
   349b4:	e7e4      	b.n	34980 <_malloc_r+0x58>
   349b6:	684b      	ldr	r3, [r1, #4]
   349b8:	6063      	str	r3, [r4, #4]
   349ba:	000c      	movs	r4, r1
   349bc:	e7ee      	b.n	3499c <_malloc_r+0x74>
   349be:	000c      	movs	r4, r1
   349c0:	6849      	ldr	r1, [r1, #4]
   349c2:	e7c2      	b.n	3494a <_malloc_r+0x22>
   349c4:	2303      	movs	r3, #3
   349c6:	1cc4      	adds	r4, r0, #3
   349c8:	439c      	bics	r4, r3
   349ca:	42a0      	cmp	r0, r4
   349cc:	d0e0      	beq.n	34990 <_malloc_r+0x68>
   349ce:	1a21      	subs	r1, r4, r0
   349d0:	0030      	movs	r0, r6
   349d2:	f000 f871 	bl	34ab8 <_sbrk_r>
   349d6:	1c43      	adds	r3, r0, #1
   349d8:	d1da      	bne.n	34990 <_malloc_r+0x68>
   349da:	e7c6      	b.n	3496a <_malloc_r+0x42>
   349dc:	20004720 	.word	0x20004720
   349e0:	20004724 	.word	0x20004724

000349e4 <_puts_r>:
   349e4:	b570      	push	{r4, r5, r6, lr}
   349e6:	0005      	movs	r5, r0
   349e8:	000e      	movs	r6, r1
   349ea:	2800      	cmp	r0, #0
   349ec:	d004      	beq.n	349f8 <_puts_r+0x14>
   349ee:	6983      	ldr	r3, [r0, #24]
   349f0:	2b00      	cmp	r3, #0
   349f2:	d101      	bne.n	349f8 <_puts_r+0x14>
   349f4:	f000 fc0e 	bl	35214 <__sinit>
   349f8:	69ab      	ldr	r3, [r5, #24]
   349fa:	68ac      	ldr	r4, [r5, #8]
   349fc:	2b00      	cmp	r3, #0
   349fe:	d102      	bne.n	34a06 <_puts_r+0x22>
   34a00:	0028      	movs	r0, r5
   34a02:	f000 fc07 	bl	35214 <__sinit>
   34a06:	4b24      	ldr	r3, [pc, #144]	; (34a98 <_puts_r+0xb4>)
   34a08:	429c      	cmp	r4, r3
   34a0a:	d10f      	bne.n	34a2c <_puts_r+0x48>
   34a0c:	686c      	ldr	r4, [r5, #4]
   34a0e:	89a3      	ldrh	r3, [r4, #12]
   34a10:	071b      	lsls	r3, r3, #28
   34a12:	d502      	bpl.n	34a1a <_puts_r+0x36>
   34a14:	6923      	ldr	r3, [r4, #16]
   34a16:	2b00      	cmp	r3, #0
   34a18:	d120      	bne.n	34a5c <_puts_r+0x78>
   34a1a:	0021      	movs	r1, r4
   34a1c:	0028      	movs	r0, r5
   34a1e:	f000 fa8b 	bl	34f38 <__swsetup_r>
   34a22:	2800      	cmp	r0, #0
   34a24:	d01a      	beq.n	34a5c <_puts_r+0x78>
   34a26:	2001      	movs	r0, #1
   34a28:	4240      	negs	r0, r0
   34a2a:	bd70      	pop	{r4, r5, r6, pc}
   34a2c:	4b1b      	ldr	r3, [pc, #108]	; (34a9c <_puts_r+0xb8>)
   34a2e:	429c      	cmp	r4, r3
   34a30:	d101      	bne.n	34a36 <_puts_r+0x52>
   34a32:	68ac      	ldr	r4, [r5, #8]
   34a34:	e7eb      	b.n	34a0e <_puts_r+0x2a>
   34a36:	4b1a      	ldr	r3, [pc, #104]	; (34aa0 <_puts_r+0xbc>)
   34a38:	429c      	cmp	r4, r3
   34a3a:	d1e8      	bne.n	34a0e <_puts_r+0x2a>
   34a3c:	68ec      	ldr	r4, [r5, #12]
   34a3e:	e7e6      	b.n	34a0e <_puts_r+0x2a>
   34a40:	3b01      	subs	r3, #1
   34a42:	3601      	adds	r6, #1
   34a44:	60a3      	str	r3, [r4, #8]
   34a46:	2b00      	cmp	r3, #0
   34a48:	da04      	bge.n	34a54 <_puts_r+0x70>
   34a4a:	69a2      	ldr	r2, [r4, #24]
   34a4c:	4293      	cmp	r3, r2
   34a4e:	db16      	blt.n	34a7e <_puts_r+0x9a>
   34a50:	290a      	cmp	r1, #10
   34a52:	d014      	beq.n	34a7e <_puts_r+0x9a>
   34a54:	6823      	ldr	r3, [r4, #0]
   34a56:	1c5a      	adds	r2, r3, #1
   34a58:	6022      	str	r2, [r4, #0]
   34a5a:	7019      	strb	r1, [r3, #0]
   34a5c:	7831      	ldrb	r1, [r6, #0]
   34a5e:	68a3      	ldr	r3, [r4, #8]
   34a60:	2900      	cmp	r1, #0
   34a62:	d1ed      	bne.n	34a40 <_puts_r+0x5c>
   34a64:	3b01      	subs	r3, #1
   34a66:	60a3      	str	r3, [r4, #8]
   34a68:	2b00      	cmp	r3, #0
   34a6a:	da0f      	bge.n	34a8c <_puts_r+0xa8>
   34a6c:	0022      	movs	r2, r4
   34a6e:	310a      	adds	r1, #10
   34a70:	0028      	movs	r0, r5
   34a72:	f000 fa0b 	bl	34e8c <__swbuf_r>
   34a76:	1c43      	adds	r3, r0, #1
   34a78:	d0d5      	beq.n	34a26 <_puts_r+0x42>
   34a7a:	200a      	movs	r0, #10
   34a7c:	e7d5      	b.n	34a2a <_puts_r+0x46>
   34a7e:	0022      	movs	r2, r4
   34a80:	0028      	movs	r0, r5
   34a82:	f000 fa03 	bl	34e8c <__swbuf_r>
   34a86:	1c43      	adds	r3, r0, #1
   34a88:	d1e8      	bne.n	34a5c <_puts_r+0x78>
   34a8a:	e7cc      	b.n	34a26 <_puts_r+0x42>
   34a8c:	200a      	movs	r0, #10
   34a8e:	6823      	ldr	r3, [r4, #0]
   34a90:	1c5a      	adds	r2, r3, #1
   34a92:	6022      	str	r2, [r4, #0]
   34a94:	7018      	strb	r0, [r3, #0]
   34a96:	e7c8      	b.n	34a2a <_puts_r+0x46>
   34a98:	0003a0c8 	.word	0x0003a0c8
   34a9c:	0003a0e8 	.word	0x0003a0e8
   34aa0:	0003a0a8 	.word	0x0003a0a8

00034aa4 <puts>:
   34aa4:	b510      	push	{r4, lr}
   34aa6:	4b03      	ldr	r3, [pc, #12]	; (34ab4 <puts+0x10>)
   34aa8:	0001      	movs	r1, r0
   34aaa:	6818      	ldr	r0, [r3, #0]
   34aac:	f7ff ff9a 	bl	349e4 <_puts_r>
   34ab0:	bd10      	pop	{r4, pc}
   34ab2:	46c0      	nop			; (mov r8, r8)
   34ab4:	20000130 	.word	0x20000130

00034ab8 <_sbrk_r>:
   34ab8:	2300      	movs	r3, #0
   34aba:	b570      	push	{r4, r5, r6, lr}
   34abc:	4c06      	ldr	r4, [pc, #24]	; (34ad8 <_sbrk_r+0x20>)
   34abe:	0005      	movs	r5, r0
   34ac0:	0008      	movs	r0, r1
   34ac2:	6023      	str	r3, [r4, #0]
   34ac4:	f7f6 fa82 	bl	2afcc <_sbrk>
   34ac8:	1c43      	adds	r3, r0, #1
   34aca:	d103      	bne.n	34ad4 <_sbrk_r+0x1c>
   34acc:	6823      	ldr	r3, [r4, #0]
   34ace:	2b00      	cmp	r3, #0
   34ad0:	d000      	beq.n	34ad4 <_sbrk_r+0x1c>
   34ad2:	602b      	str	r3, [r5, #0]
   34ad4:	bd70      	pop	{r4, r5, r6, pc}
   34ad6:	46c0      	nop			; (mov r8, r8)
   34ad8:	20005c8c 	.word	0x20005c8c

00034adc <sniprintf>:
   34adc:	b40c      	push	{r2, r3}
   34ade:	b530      	push	{r4, r5, lr}
   34ae0:	4b16      	ldr	r3, [pc, #88]	; (34b3c <sniprintf+0x60>)
   34ae2:	b09d      	sub	sp, #116	; 0x74
   34ae4:	1e0c      	subs	r4, r1, #0
   34ae6:	681d      	ldr	r5, [r3, #0]
   34ae8:	da08      	bge.n	34afc <sniprintf+0x20>
   34aea:	238b      	movs	r3, #139	; 0x8b
   34aec:	2001      	movs	r0, #1
   34aee:	602b      	str	r3, [r5, #0]
   34af0:	4240      	negs	r0, r0
   34af2:	b01d      	add	sp, #116	; 0x74
   34af4:	bc30      	pop	{r4, r5}
   34af6:	bc08      	pop	{r3}
   34af8:	b002      	add	sp, #8
   34afa:	4718      	bx	r3
   34afc:	2382      	movs	r3, #130	; 0x82
   34afe:	a902      	add	r1, sp, #8
   34b00:	009b      	lsls	r3, r3, #2
   34b02:	818b      	strh	r3, [r1, #12]
   34b04:	2300      	movs	r3, #0
   34b06:	9002      	str	r0, [sp, #8]
   34b08:	6108      	str	r0, [r1, #16]
   34b0a:	429c      	cmp	r4, r3
   34b0c:	d000      	beq.n	34b10 <sniprintf+0x34>
   34b0e:	1e63      	subs	r3, r4, #1
   34b10:	608b      	str	r3, [r1, #8]
   34b12:	614b      	str	r3, [r1, #20]
   34b14:	2301      	movs	r3, #1
   34b16:	425b      	negs	r3, r3
   34b18:	81cb      	strh	r3, [r1, #14]
   34b1a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   34b1c:	ab21      	add	r3, sp, #132	; 0x84
   34b1e:	0028      	movs	r0, r5
   34b20:	9301      	str	r3, [sp, #4]
   34b22:	f000 fcff 	bl	35524 <_svfiprintf_r>
   34b26:	1c43      	adds	r3, r0, #1
   34b28:	da01      	bge.n	34b2e <sniprintf+0x52>
   34b2a:	238b      	movs	r3, #139	; 0x8b
   34b2c:	602b      	str	r3, [r5, #0]
   34b2e:	2c00      	cmp	r4, #0
   34b30:	d0df      	beq.n	34af2 <sniprintf+0x16>
   34b32:	2300      	movs	r3, #0
   34b34:	9a02      	ldr	r2, [sp, #8]
   34b36:	7013      	strb	r3, [r2, #0]
   34b38:	e7db      	b.n	34af2 <sniprintf+0x16>
   34b3a:	46c0      	nop			; (mov r8, r8)
   34b3c:	20000130 	.word	0x20000130

00034b40 <siprintf>:
   34b40:	b40e      	push	{r1, r2, r3}
   34b42:	b510      	push	{r4, lr}
   34b44:	b09d      	sub	sp, #116	; 0x74
   34b46:	a902      	add	r1, sp, #8
   34b48:	9002      	str	r0, [sp, #8]
   34b4a:	6108      	str	r0, [r1, #16]
   34b4c:	480b      	ldr	r0, [pc, #44]	; (34b7c <siprintf+0x3c>)
   34b4e:	2482      	movs	r4, #130	; 0x82
   34b50:	6088      	str	r0, [r1, #8]
   34b52:	6148      	str	r0, [r1, #20]
   34b54:	2001      	movs	r0, #1
   34b56:	4240      	negs	r0, r0
   34b58:	ab1f      	add	r3, sp, #124	; 0x7c
   34b5a:	81c8      	strh	r0, [r1, #14]
   34b5c:	4808      	ldr	r0, [pc, #32]	; (34b80 <siprintf+0x40>)
   34b5e:	cb04      	ldmia	r3!, {r2}
   34b60:	00a4      	lsls	r4, r4, #2
   34b62:	6800      	ldr	r0, [r0, #0]
   34b64:	9301      	str	r3, [sp, #4]
   34b66:	818c      	strh	r4, [r1, #12]
   34b68:	f000 fcdc 	bl	35524 <_svfiprintf_r>
   34b6c:	2300      	movs	r3, #0
   34b6e:	9a02      	ldr	r2, [sp, #8]
   34b70:	7013      	strb	r3, [r2, #0]
   34b72:	b01d      	add	sp, #116	; 0x74
   34b74:	bc10      	pop	{r4}
   34b76:	bc08      	pop	{r3}
   34b78:	b003      	add	sp, #12
   34b7a:	4718      	bx	r3
   34b7c:	7fffffff 	.word	0x7fffffff
   34b80:	20000130 	.word	0x20000130

00034b84 <strcasecmp>:
   34b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34b86:	0007      	movs	r7, r0
   34b88:	000e      	movs	r6, r1
   34b8a:	783c      	ldrb	r4, [r7, #0]
   34b8c:	f000 fbda 	bl	35344 <__locale_ctype_ptr>
   34b90:	2203      	movs	r2, #3
   34b92:	1900      	adds	r0, r0, r4
   34b94:	7843      	ldrb	r3, [r0, #1]
   34b96:	4013      	ands	r3, r2
   34b98:	2b01      	cmp	r3, #1
   34b9a:	d100      	bne.n	34b9e <strcasecmp+0x1a>
   34b9c:	3420      	adds	r4, #32
   34b9e:	7835      	ldrb	r5, [r6, #0]
   34ba0:	f000 fbd0 	bl	35344 <__locale_ctype_ptr>
   34ba4:	2203      	movs	r2, #3
   34ba6:	1940      	adds	r0, r0, r5
   34ba8:	7843      	ldrb	r3, [r0, #1]
   34baa:	4013      	ands	r3, r2
   34bac:	2b01      	cmp	r3, #1
   34bae:	d100      	bne.n	34bb2 <strcasecmp+0x2e>
   34bb0:	3520      	adds	r5, #32
   34bb2:	1b60      	subs	r0, r4, r5
   34bb4:	d103      	bne.n	34bbe <strcasecmp+0x3a>
   34bb6:	3701      	adds	r7, #1
   34bb8:	3601      	adds	r6, #1
   34bba:	2d00      	cmp	r5, #0
   34bbc:	d1e5      	bne.n	34b8a <strcasecmp+0x6>
   34bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00034bc0 <strcat>:
   34bc0:	0002      	movs	r2, r0
   34bc2:	b510      	push	{r4, lr}
   34bc4:	7813      	ldrb	r3, [r2, #0]
   34bc6:	2b00      	cmp	r3, #0
   34bc8:	d105      	bne.n	34bd6 <strcat+0x16>
   34bca:	5ccc      	ldrb	r4, [r1, r3]
   34bcc:	54d4      	strb	r4, [r2, r3]
   34bce:	3301      	adds	r3, #1
   34bd0:	2c00      	cmp	r4, #0
   34bd2:	d1fa      	bne.n	34bca <strcat+0xa>
   34bd4:	bd10      	pop	{r4, pc}
   34bd6:	3201      	adds	r2, #1
   34bd8:	e7f4      	b.n	34bc4 <strcat+0x4>

00034bda <strcmp>:
   34bda:	7802      	ldrb	r2, [r0, #0]
   34bdc:	780b      	ldrb	r3, [r1, #0]
   34bde:	2a00      	cmp	r2, #0
   34be0:	d003      	beq.n	34bea <strcmp+0x10>
   34be2:	3001      	adds	r0, #1
   34be4:	3101      	adds	r1, #1
   34be6:	429a      	cmp	r2, r3
   34be8:	d0f7      	beq.n	34bda <strcmp>
   34bea:	1ad0      	subs	r0, r2, r3
   34bec:	4770      	bx	lr

00034bee <strcpy>:
   34bee:	1c03      	adds	r3, r0, #0
   34bf0:	780a      	ldrb	r2, [r1, #0]
   34bf2:	3101      	adds	r1, #1
   34bf4:	701a      	strb	r2, [r3, #0]
   34bf6:	3301      	adds	r3, #1
   34bf8:	2a00      	cmp	r2, #0
   34bfa:	d1f9      	bne.n	34bf0 <strcpy+0x2>
   34bfc:	4770      	bx	lr
	...

00034c00 <strdup>:
   34c00:	b510      	push	{r4, lr}
   34c02:	4b03      	ldr	r3, [pc, #12]	; (34c10 <strdup+0x10>)
   34c04:	0001      	movs	r1, r0
   34c06:	6818      	ldr	r0, [r3, #0]
   34c08:	f000 f804 	bl	34c14 <_strdup_r>
   34c0c:	bd10      	pop	{r4, pc}
   34c0e:	46c0      	nop			; (mov r8, r8)
   34c10:	20000130 	.word	0x20000130

00034c14 <_strdup_r>:
   34c14:	b570      	push	{r4, r5, r6, lr}
   34c16:	0005      	movs	r5, r0
   34c18:	0008      	movs	r0, r1
   34c1a:	000e      	movs	r6, r1
   34c1c:	f000 f80d 	bl	34c3a <strlen>
   34c20:	1c44      	adds	r4, r0, #1
   34c22:	0021      	movs	r1, r4
   34c24:	0028      	movs	r0, r5
   34c26:	f7ff fe7f 	bl	34928 <_malloc_r>
   34c2a:	1e05      	subs	r5, r0, #0
   34c2c:	d003      	beq.n	34c36 <_strdup_r+0x22>
   34c2e:	0022      	movs	r2, r4
   34c30:	0031      	movs	r1, r6
   34c32:	f7ff fe0b 	bl	3484c <memcpy>
   34c36:	0028      	movs	r0, r5
   34c38:	bd70      	pop	{r4, r5, r6, pc}

00034c3a <strlen>:
   34c3a:	2300      	movs	r3, #0
   34c3c:	5cc2      	ldrb	r2, [r0, r3]
   34c3e:	3301      	adds	r3, #1
   34c40:	2a00      	cmp	r2, #0
   34c42:	d1fb      	bne.n	34c3c <strlen+0x2>
   34c44:	1e58      	subs	r0, r3, #1
   34c46:	4770      	bx	lr

00034c48 <strncmp>:
   34c48:	2300      	movs	r3, #0
   34c4a:	b530      	push	{r4, r5, lr}
   34c4c:	429a      	cmp	r2, r3
   34c4e:	d00a      	beq.n	34c66 <strncmp+0x1e>
   34c50:	3a01      	subs	r2, #1
   34c52:	5cc4      	ldrb	r4, [r0, r3]
   34c54:	5ccd      	ldrb	r5, [r1, r3]
   34c56:	42ac      	cmp	r4, r5
   34c58:	d104      	bne.n	34c64 <strncmp+0x1c>
   34c5a:	429a      	cmp	r2, r3
   34c5c:	d002      	beq.n	34c64 <strncmp+0x1c>
   34c5e:	3301      	adds	r3, #1
   34c60:	2c00      	cmp	r4, #0
   34c62:	d1f6      	bne.n	34c52 <strncmp+0xa>
   34c64:	1b63      	subs	r3, r4, r5
   34c66:	0018      	movs	r0, r3
   34c68:	bd30      	pop	{r4, r5, pc}

00034c6a <strncpy>:
   34c6a:	b570      	push	{r4, r5, r6, lr}
   34c6c:	0004      	movs	r4, r0
   34c6e:	2a00      	cmp	r2, #0
   34c70:	d100      	bne.n	34c74 <strncpy+0xa>
   34c72:	bd70      	pop	{r4, r5, r6, pc}
   34c74:	780d      	ldrb	r5, [r1, #0]
   34c76:	1e56      	subs	r6, r2, #1
   34c78:	1c63      	adds	r3, r4, #1
   34c7a:	7025      	strb	r5, [r4, #0]
   34c7c:	3101      	adds	r1, #1
   34c7e:	2d00      	cmp	r5, #0
   34c80:	d105      	bne.n	34c8e <strncpy+0x24>
   34c82:	18a4      	adds	r4, r4, r2
   34c84:	429c      	cmp	r4, r3
   34c86:	d0f4      	beq.n	34c72 <strncpy+0x8>
   34c88:	701d      	strb	r5, [r3, #0]
   34c8a:	3301      	adds	r3, #1
   34c8c:	e7fa      	b.n	34c84 <strncpy+0x1a>
   34c8e:	001c      	movs	r4, r3
   34c90:	0032      	movs	r2, r6
   34c92:	e7ec      	b.n	34c6e <strncpy+0x4>

00034c94 <strrchr>:
   34c94:	b570      	push	{r4, r5, r6, lr}
   34c96:	000d      	movs	r5, r1
   34c98:	2400      	movs	r4, #0
   34c9a:	2900      	cmp	r1, #0
   34c9c:	d105      	bne.n	34caa <strrchr+0x16>
   34c9e:	f000 ff19 	bl	35ad4 <strchr>
   34ca2:	0004      	movs	r4, r0
   34ca4:	e006      	b.n	34cb4 <strrchr+0x20>
   34ca6:	001c      	movs	r4, r3
   34ca8:	1c58      	adds	r0, r3, #1
   34caa:	0029      	movs	r1, r5
   34cac:	f000 ff12 	bl	35ad4 <strchr>
   34cb0:	1e03      	subs	r3, r0, #0
   34cb2:	d1f8      	bne.n	34ca6 <strrchr+0x12>
   34cb4:	0020      	movs	r0, r4
   34cb6:	bd70      	pop	{r4, r5, r6, pc}

00034cb8 <strstr>:
   34cb8:	b510      	push	{r4, lr}
   34cba:	0002      	movs	r2, r0
   34cbc:	7800      	ldrb	r0, [r0, #0]
   34cbe:	2800      	cmp	r0, #0
   34cc0:	d104      	bne.n	34ccc <strstr+0x14>
   34cc2:	7809      	ldrb	r1, [r1, #0]
   34cc4:	2900      	cmp	r1, #0
   34cc6:	d00d      	beq.n	34ce4 <strstr+0x2c>
   34cc8:	bd10      	pop	{r4, pc}
   34cca:	3201      	adds	r2, #1
   34ccc:	7810      	ldrb	r0, [r2, #0]
   34cce:	2800      	cmp	r0, #0
   34cd0:	d0fa      	beq.n	34cc8 <strstr+0x10>
   34cd2:	2300      	movs	r3, #0
   34cd4:	5cc8      	ldrb	r0, [r1, r3]
   34cd6:	2800      	cmp	r0, #0
   34cd8:	d004      	beq.n	34ce4 <strstr+0x2c>
   34cda:	5cd4      	ldrb	r4, [r2, r3]
   34cdc:	4284      	cmp	r4, r0
   34cde:	d1f4      	bne.n	34cca <strstr+0x12>
   34ce0:	3301      	adds	r3, #1
   34ce2:	e7f7      	b.n	34cd4 <strstr+0x1c>
   34ce4:	0010      	movs	r0, r2
   34ce6:	e7ef      	b.n	34cc8 <strstr+0x10>

00034ce8 <_strtol_l.isra.0>:
   34ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
   34cea:	001f      	movs	r7, r3
   34cec:	000e      	movs	r6, r1
   34cee:	b087      	sub	sp, #28
   34cf0:	9005      	str	r0, [sp, #20]
   34cf2:	9103      	str	r1, [sp, #12]
   34cf4:	9202      	str	r2, [sp, #8]
   34cf6:	980c      	ldr	r0, [sp, #48]	; 0x30
   34cf8:	7834      	ldrb	r4, [r6, #0]
   34cfa:	f000 fb20 	bl	3533e <__locale_ctype_ptr_l>
   34cfe:	2208      	movs	r2, #8
   34d00:	1900      	adds	r0, r0, r4
   34d02:	7843      	ldrb	r3, [r0, #1]
   34d04:	1c75      	adds	r5, r6, #1
   34d06:	4013      	ands	r3, r2
   34d08:	d10c      	bne.n	34d24 <_strtol_l.isra.0+0x3c>
   34d0a:	2c2d      	cmp	r4, #45	; 0x2d
   34d0c:	d10c      	bne.n	34d28 <_strtol_l.isra.0+0x40>
   34d0e:	3301      	adds	r3, #1
   34d10:	782c      	ldrb	r4, [r5, #0]
   34d12:	9301      	str	r3, [sp, #4]
   34d14:	1cb5      	adds	r5, r6, #2
   34d16:	2f00      	cmp	r7, #0
   34d18:	d00c      	beq.n	34d34 <_strtol_l.isra.0+0x4c>
   34d1a:	2f10      	cmp	r7, #16
   34d1c:	d114      	bne.n	34d48 <_strtol_l.isra.0+0x60>
   34d1e:	2c30      	cmp	r4, #48	; 0x30
   34d20:	d00a      	beq.n	34d38 <_strtol_l.isra.0+0x50>
   34d22:	e011      	b.n	34d48 <_strtol_l.isra.0+0x60>
   34d24:	002e      	movs	r6, r5
   34d26:	e7e6      	b.n	34cf6 <_strtol_l.isra.0+0xe>
   34d28:	9301      	str	r3, [sp, #4]
   34d2a:	2c2b      	cmp	r4, #43	; 0x2b
   34d2c:	d1f3      	bne.n	34d16 <_strtol_l.isra.0+0x2e>
   34d2e:	782c      	ldrb	r4, [r5, #0]
   34d30:	1cb5      	adds	r5, r6, #2
   34d32:	e7f0      	b.n	34d16 <_strtol_l.isra.0+0x2e>
   34d34:	2c30      	cmp	r4, #48	; 0x30
   34d36:	d12f      	bne.n	34d98 <_strtol_l.isra.0+0xb0>
   34d38:	2220      	movs	r2, #32
   34d3a:	782b      	ldrb	r3, [r5, #0]
   34d3c:	4393      	bics	r3, r2
   34d3e:	2b58      	cmp	r3, #88	; 0x58
   34d40:	d151      	bne.n	34de6 <_strtol_l.isra.0+0xfe>
   34d42:	2710      	movs	r7, #16
   34d44:	786c      	ldrb	r4, [r5, #1]
   34d46:	3502      	adds	r5, #2
   34d48:	9b01      	ldr	r3, [sp, #4]
   34d4a:	4a29      	ldr	r2, [pc, #164]	; (34df0 <_strtol_l.isra.0+0x108>)
   34d4c:	0039      	movs	r1, r7
   34d4e:	189e      	adds	r6, r3, r2
   34d50:	0030      	movs	r0, r6
   34d52:	f7fd fddd 	bl	32910 <__aeabi_uidivmod>
   34d56:	0030      	movs	r0, r6
   34d58:	9104      	str	r1, [sp, #16]
   34d5a:	0039      	movs	r1, r7
   34d5c:	f7fd fd52 	bl	32804 <__udivsi3>
   34d60:	2101      	movs	r1, #1
   34d62:	2300      	movs	r3, #0
   34d64:	4249      	negs	r1, r1
   34d66:	0002      	movs	r2, r0
   34d68:	468c      	mov	ip, r1
   34d6a:	0018      	movs	r0, r3
   34d6c:	0021      	movs	r1, r4
   34d6e:	3930      	subs	r1, #48	; 0x30
   34d70:	2909      	cmp	r1, #9
   34d72:	d813      	bhi.n	34d9c <_strtol_l.isra.0+0xb4>
   34d74:	000c      	movs	r4, r1
   34d76:	42a7      	cmp	r7, r4
   34d78:	dd1c      	ble.n	34db4 <_strtol_l.isra.0+0xcc>
   34d7a:	1c59      	adds	r1, r3, #1
   34d7c:	d009      	beq.n	34d92 <_strtol_l.isra.0+0xaa>
   34d7e:	4663      	mov	r3, ip
   34d80:	4282      	cmp	r2, r0
   34d82:	d306      	bcc.n	34d92 <_strtol_l.isra.0+0xaa>
   34d84:	d102      	bne.n	34d8c <_strtol_l.isra.0+0xa4>
   34d86:	9904      	ldr	r1, [sp, #16]
   34d88:	42a1      	cmp	r1, r4
   34d8a:	db02      	blt.n	34d92 <_strtol_l.isra.0+0xaa>
   34d8c:	2301      	movs	r3, #1
   34d8e:	4378      	muls	r0, r7
   34d90:	1820      	adds	r0, r4, r0
   34d92:	782c      	ldrb	r4, [r5, #0]
   34d94:	3501      	adds	r5, #1
   34d96:	e7e9      	b.n	34d6c <_strtol_l.isra.0+0x84>
   34d98:	270a      	movs	r7, #10
   34d9a:	e7d5      	b.n	34d48 <_strtol_l.isra.0+0x60>
   34d9c:	0021      	movs	r1, r4
   34d9e:	3941      	subs	r1, #65	; 0x41
   34da0:	2919      	cmp	r1, #25
   34da2:	d801      	bhi.n	34da8 <_strtol_l.isra.0+0xc0>
   34da4:	3c37      	subs	r4, #55	; 0x37
   34da6:	e7e6      	b.n	34d76 <_strtol_l.isra.0+0x8e>
   34da8:	0021      	movs	r1, r4
   34daa:	3961      	subs	r1, #97	; 0x61
   34dac:	2919      	cmp	r1, #25
   34dae:	d801      	bhi.n	34db4 <_strtol_l.isra.0+0xcc>
   34db0:	3c57      	subs	r4, #87	; 0x57
   34db2:	e7e0      	b.n	34d76 <_strtol_l.isra.0+0x8e>
   34db4:	1c5a      	adds	r2, r3, #1
   34db6:	d108      	bne.n	34dca <_strtol_l.isra.0+0xe2>
   34db8:	9a05      	ldr	r2, [sp, #20]
   34dba:	3323      	adds	r3, #35	; 0x23
   34dbc:	6013      	str	r3, [r2, #0]
   34dbe:	9b02      	ldr	r3, [sp, #8]
   34dc0:	0030      	movs	r0, r6
   34dc2:	2b00      	cmp	r3, #0
   34dc4:	d10b      	bne.n	34dde <_strtol_l.isra.0+0xf6>
   34dc6:	b007      	add	sp, #28
   34dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34dca:	9a01      	ldr	r2, [sp, #4]
   34dcc:	2a00      	cmp	r2, #0
   34dce:	d000      	beq.n	34dd2 <_strtol_l.isra.0+0xea>
   34dd0:	4240      	negs	r0, r0
   34dd2:	9a02      	ldr	r2, [sp, #8]
   34dd4:	2a00      	cmp	r2, #0
   34dd6:	d0f6      	beq.n	34dc6 <_strtol_l.isra.0+0xde>
   34dd8:	9a03      	ldr	r2, [sp, #12]
   34dda:	2b00      	cmp	r3, #0
   34ddc:	d000      	beq.n	34de0 <_strtol_l.isra.0+0xf8>
   34dde:	1e6a      	subs	r2, r5, #1
   34de0:	9b02      	ldr	r3, [sp, #8]
   34de2:	601a      	str	r2, [r3, #0]
   34de4:	e7ef      	b.n	34dc6 <_strtol_l.isra.0+0xde>
   34de6:	2430      	movs	r4, #48	; 0x30
   34de8:	2f00      	cmp	r7, #0
   34dea:	d1ad      	bne.n	34d48 <_strtol_l.isra.0+0x60>
   34dec:	3708      	adds	r7, #8
   34dee:	e7ab      	b.n	34d48 <_strtol_l.isra.0+0x60>
   34df0:	7fffffff 	.word	0x7fffffff

00034df4 <strtol>:
   34df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   34df6:	0013      	movs	r3, r2
   34df8:	4a06      	ldr	r2, [pc, #24]	; (34e14 <strtol+0x20>)
   34dfa:	0005      	movs	r5, r0
   34dfc:	6810      	ldr	r0, [r2, #0]
   34dfe:	6a04      	ldr	r4, [r0, #32]
   34e00:	2c00      	cmp	r4, #0
   34e02:	d100      	bne.n	34e06 <strtol+0x12>
   34e04:	4c04      	ldr	r4, [pc, #16]	; (34e18 <strtol+0x24>)
   34e06:	000a      	movs	r2, r1
   34e08:	9400      	str	r4, [sp, #0]
   34e0a:	0029      	movs	r1, r5
   34e0c:	f7ff ff6c 	bl	34ce8 <_strtol_l.isra.0>
   34e10:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   34e12:	46c0      	nop			; (mov r8, r8)
   34e14:	20000130 	.word	0x20000130
   34e18:	20000194 	.word	0x20000194

00034e1c <_vsniprintf_r>:
   34e1c:	b530      	push	{r4, r5, lr}
   34e1e:	0014      	movs	r4, r2
   34e20:	b09b      	sub	sp, #108	; 0x6c
   34e22:	0005      	movs	r5, r0
   34e24:	001a      	movs	r2, r3
   34e26:	2c00      	cmp	r4, #0
   34e28:	da05      	bge.n	34e36 <_vsniprintf_r+0x1a>
   34e2a:	238b      	movs	r3, #139	; 0x8b
   34e2c:	6003      	str	r3, [r0, #0]
   34e2e:	2001      	movs	r0, #1
   34e30:	4240      	negs	r0, r0
   34e32:	b01b      	add	sp, #108	; 0x6c
   34e34:	bd30      	pop	{r4, r5, pc}
   34e36:	2382      	movs	r3, #130	; 0x82
   34e38:	4668      	mov	r0, sp
   34e3a:	009b      	lsls	r3, r3, #2
   34e3c:	8183      	strh	r3, [r0, #12]
   34e3e:	2300      	movs	r3, #0
   34e40:	9100      	str	r1, [sp, #0]
   34e42:	9104      	str	r1, [sp, #16]
   34e44:	429c      	cmp	r4, r3
   34e46:	d000      	beq.n	34e4a <_vsniprintf_r+0x2e>
   34e48:	1e63      	subs	r3, r4, #1
   34e4a:	9302      	str	r3, [sp, #8]
   34e4c:	9305      	str	r3, [sp, #20]
   34e4e:	2301      	movs	r3, #1
   34e50:	4669      	mov	r1, sp
   34e52:	425b      	negs	r3, r3
   34e54:	81cb      	strh	r3, [r1, #14]
   34e56:	0028      	movs	r0, r5
   34e58:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   34e5a:	f000 fb63 	bl	35524 <_svfiprintf_r>
   34e5e:	1c43      	adds	r3, r0, #1
   34e60:	da01      	bge.n	34e66 <_vsniprintf_r+0x4a>
   34e62:	238b      	movs	r3, #139	; 0x8b
   34e64:	602b      	str	r3, [r5, #0]
   34e66:	2c00      	cmp	r4, #0
   34e68:	d0e3      	beq.n	34e32 <_vsniprintf_r+0x16>
   34e6a:	2300      	movs	r3, #0
   34e6c:	9a00      	ldr	r2, [sp, #0]
   34e6e:	7013      	strb	r3, [r2, #0]
   34e70:	e7df      	b.n	34e32 <_vsniprintf_r+0x16>
	...

00034e74 <vsniprintf>:
   34e74:	b507      	push	{r0, r1, r2, lr}
   34e76:	9300      	str	r3, [sp, #0]
   34e78:	0013      	movs	r3, r2
   34e7a:	000a      	movs	r2, r1
   34e7c:	0001      	movs	r1, r0
   34e7e:	4802      	ldr	r0, [pc, #8]	; (34e88 <vsniprintf+0x14>)
   34e80:	6800      	ldr	r0, [r0, #0]
   34e82:	f7ff ffcb 	bl	34e1c <_vsniprintf_r>
   34e86:	bd0e      	pop	{r1, r2, r3, pc}
   34e88:	20000130 	.word	0x20000130

00034e8c <__swbuf_r>:
   34e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34e8e:	0005      	movs	r5, r0
   34e90:	000e      	movs	r6, r1
   34e92:	0014      	movs	r4, r2
   34e94:	2800      	cmp	r0, #0
   34e96:	d004      	beq.n	34ea2 <__swbuf_r+0x16>
   34e98:	6983      	ldr	r3, [r0, #24]
   34e9a:	2b00      	cmp	r3, #0
   34e9c:	d101      	bne.n	34ea2 <__swbuf_r+0x16>
   34e9e:	f000 f9b9 	bl	35214 <__sinit>
   34ea2:	4b22      	ldr	r3, [pc, #136]	; (34f2c <__swbuf_r+0xa0>)
   34ea4:	429c      	cmp	r4, r3
   34ea6:	d12d      	bne.n	34f04 <__swbuf_r+0x78>
   34ea8:	686c      	ldr	r4, [r5, #4]
   34eaa:	69a3      	ldr	r3, [r4, #24]
   34eac:	60a3      	str	r3, [r4, #8]
   34eae:	89a3      	ldrh	r3, [r4, #12]
   34eb0:	071b      	lsls	r3, r3, #28
   34eb2:	d531      	bpl.n	34f18 <__swbuf_r+0x8c>
   34eb4:	6923      	ldr	r3, [r4, #16]
   34eb6:	2b00      	cmp	r3, #0
   34eb8:	d02e      	beq.n	34f18 <__swbuf_r+0x8c>
   34eba:	6823      	ldr	r3, [r4, #0]
   34ebc:	6922      	ldr	r2, [r4, #16]
   34ebe:	b2f7      	uxtb	r7, r6
   34ec0:	1a98      	subs	r0, r3, r2
   34ec2:	6963      	ldr	r3, [r4, #20]
   34ec4:	b2f6      	uxtb	r6, r6
   34ec6:	4298      	cmp	r0, r3
   34ec8:	db05      	blt.n	34ed6 <__swbuf_r+0x4a>
   34eca:	0021      	movs	r1, r4
   34ecc:	0028      	movs	r0, r5
   34ece:	f000 f933 	bl	35138 <_fflush_r>
   34ed2:	2800      	cmp	r0, #0
   34ed4:	d126      	bne.n	34f24 <__swbuf_r+0x98>
   34ed6:	68a3      	ldr	r3, [r4, #8]
   34ed8:	3001      	adds	r0, #1
   34eda:	3b01      	subs	r3, #1
   34edc:	60a3      	str	r3, [r4, #8]
   34ede:	6823      	ldr	r3, [r4, #0]
   34ee0:	1c5a      	adds	r2, r3, #1
   34ee2:	6022      	str	r2, [r4, #0]
   34ee4:	701f      	strb	r7, [r3, #0]
   34ee6:	6963      	ldr	r3, [r4, #20]
   34ee8:	4298      	cmp	r0, r3
   34eea:	d004      	beq.n	34ef6 <__swbuf_r+0x6a>
   34eec:	89a3      	ldrh	r3, [r4, #12]
   34eee:	07db      	lsls	r3, r3, #31
   34ef0:	d51a      	bpl.n	34f28 <__swbuf_r+0x9c>
   34ef2:	2e0a      	cmp	r6, #10
   34ef4:	d118      	bne.n	34f28 <__swbuf_r+0x9c>
   34ef6:	0021      	movs	r1, r4
   34ef8:	0028      	movs	r0, r5
   34efa:	f000 f91d 	bl	35138 <_fflush_r>
   34efe:	2800      	cmp	r0, #0
   34f00:	d012      	beq.n	34f28 <__swbuf_r+0x9c>
   34f02:	e00f      	b.n	34f24 <__swbuf_r+0x98>
   34f04:	4b0a      	ldr	r3, [pc, #40]	; (34f30 <__swbuf_r+0xa4>)
   34f06:	429c      	cmp	r4, r3
   34f08:	d101      	bne.n	34f0e <__swbuf_r+0x82>
   34f0a:	68ac      	ldr	r4, [r5, #8]
   34f0c:	e7cd      	b.n	34eaa <__swbuf_r+0x1e>
   34f0e:	4b09      	ldr	r3, [pc, #36]	; (34f34 <__swbuf_r+0xa8>)
   34f10:	429c      	cmp	r4, r3
   34f12:	d1ca      	bne.n	34eaa <__swbuf_r+0x1e>
   34f14:	68ec      	ldr	r4, [r5, #12]
   34f16:	e7c8      	b.n	34eaa <__swbuf_r+0x1e>
   34f18:	0021      	movs	r1, r4
   34f1a:	0028      	movs	r0, r5
   34f1c:	f000 f80c 	bl	34f38 <__swsetup_r>
   34f20:	2800      	cmp	r0, #0
   34f22:	d0ca      	beq.n	34eba <__swbuf_r+0x2e>
   34f24:	2601      	movs	r6, #1
   34f26:	4276      	negs	r6, r6
   34f28:	0030      	movs	r0, r6
   34f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34f2c:	0003a0c8 	.word	0x0003a0c8
   34f30:	0003a0e8 	.word	0x0003a0e8
   34f34:	0003a0a8 	.word	0x0003a0a8

00034f38 <__swsetup_r>:
   34f38:	4b36      	ldr	r3, [pc, #216]	; (35014 <__swsetup_r+0xdc>)
   34f3a:	b570      	push	{r4, r5, r6, lr}
   34f3c:	681d      	ldr	r5, [r3, #0]
   34f3e:	0006      	movs	r6, r0
   34f40:	000c      	movs	r4, r1
   34f42:	2d00      	cmp	r5, #0
   34f44:	d005      	beq.n	34f52 <__swsetup_r+0x1a>
   34f46:	69ab      	ldr	r3, [r5, #24]
   34f48:	2b00      	cmp	r3, #0
   34f4a:	d102      	bne.n	34f52 <__swsetup_r+0x1a>
   34f4c:	0028      	movs	r0, r5
   34f4e:	f000 f961 	bl	35214 <__sinit>
   34f52:	4b31      	ldr	r3, [pc, #196]	; (35018 <__swsetup_r+0xe0>)
   34f54:	429c      	cmp	r4, r3
   34f56:	d10f      	bne.n	34f78 <__swsetup_r+0x40>
   34f58:	686c      	ldr	r4, [r5, #4]
   34f5a:	230c      	movs	r3, #12
   34f5c:	5ee2      	ldrsh	r2, [r4, r3]
   34f5e:	b293      	uxth	r3, r2
   34f60:	0719      	lsls	r1, r3, #28
   34f62:	d42d      	bmi.n	34fc0 <__swsetup_r+0x88>
   34f64:	06d9      	lsls	r1, r3, #27
   34f66:	d411      	bmi.n	34f8c <__swsetup_r+0x54>
   34f68:	2309      	movs	r3, #9
   34f6a:	2001      	movs	r0, #1
   34f6c:	6033      	str	r3, [r6, #0]
   34f6e:	3337      	adds	r3, #55	; 0x37
   34f70:	4313      	orrs	r3, r2
   34f72:	81a3      	strh	r3, [r4, #12]
   34f74:	4240      	negs	r0, r0
   34f76:	bd70      	pop	{r4, r5, r6, pc}
   34f78:	4b28      	ldr	r3, [pc, #160]	; (3501c <__swsetup_r+0xe4>)
   34f7a:	429c      	cmp	r4, r3
   34f7c:	d101      	bne.n	34f82 <__swsetup_r+0x4a>
   34f7e:	68ac      	ldr	r4, [r5, #8]
   34f80:	e7eb      	b.n	34f5a <__swsetup_r+0x22>
   34f82:	4b27      	ldr	r3, [pc, #156]	; (35020 <__swsetup_r+0xe8>)
   34f84:	429c      	cmp	r4, r3
   34f86:	d1e8      	bne.n	34f5a <__swsetup_r+0x22>
   34f88:	68ec      	ldr	r4, [r5, #12]
   34f8a:	e7e6      	b.n	34f5a <__swsetup_r+0x22>
   34f8c:	075b      	lsls	r3, r3, #29
   34f8e:	d513      	bpl.n	34fb8 <__swsetup_r+0x80>
   34f90:	6b61      	ldr	r1, [r4, #52]	; 0x34
   34f92:	2900      	cmp	r1, #0
   34f94:	d008      	beq.n	34fa8 <__swsetup_r+0x70>
   34f96:	0023      	movs	r3, r4
   34f98:	3344      	adds	r3, #68	; 0x44
   34f9a:	4299      	cmp	r1, r3
   34f9c:	d002      	beq.n	34fa4 <__swsetup_r+0x6c>
   34f9e:	0030      	movs	r0, r6
   34fa0:	f7ff fc78 	bl	34894 <_free_r>
   34fa4:	2300      	movs	r3, #0
   34fa6:	6363      	str	r3, [r4, #52]	; 0x34
   34fa8:	2224      	movs	r2, #36	; 0x24
   34faa:	89a3      	ldrh	r3, [r4, #12]
   34fac:	4393      	bics	r3, r2
   34fae:	81a3      	strh	r3, [r4, #12]
   34fb0:	2300      	movs	r3, #0
   34fb2:	6063      	str	r3, [r4, #4]
   34fb4:	6923      	ldr	r3, [r4, #16]
   34fb6:	6023      	str	r3, [r4, #0]
   34fb8:	2308      	movs	r3, #8
   34fba:	89a2      	ldrh	r2, [r4, #12]
   34fbc:	4313      	orrs	r3, r2
   34fbe:	81a3      	strh	r3, [r4, #12]
   34fc0:	6923      	ldr	r3, [r4, #16]
   34fc2:	2b00      	cmp	r3, #0
   34fc4:	d10b      	bne.n	34fde <__swsetup_r+0xa6>
   34fc6:	21a0      	movs	r1, #160	; 0xa0
   34fc8:	2280      	movs	r2, #128	; 0x80
   34fca:	89a3      	ldrh	r3, [r4, #12]
   34fcc:	0089      	lsls	r1, r1, #2
   34fce:	0092      	lsls	r2, r2, #2
   34fd0:	400b      	ands	r3, r1
   34fd2:	4293      	cmp	r3, r2
   34fd4:	d003      	beq.n	34fde <__swsetup_r+0xa6>
   34fd6:	0021      	movs	r1, r4
   34fd8:	0030      	movs	r0, r6
   34fda:	f000 f9e9 	bl	353b0 <__smakebuf_r>
   34fde:	2301      	movs	r3, #1
   34fe0:	89a2      	ldrh	r2, [r4, #12]
   34fe2:	4013      	ands	r3, r2
   34fe4:	d011      	beq.n	3500a <__swsetup_r+0xd2>
   34fe6:	2300      	movs	r3, #0
   34fe8:	60a3      	str	r3, [r4, #8]
   34fea:	6963      	ldr	r3, [r4, #20]
   34fec:	425b      	negs	r3, r3
   34fee:	61a3      	str	r3, [r4, #24]
   34ff0:	2000      	movs	r0, #0
   34ff2:	6923      	ldr	r3, [r4, #16]
   34ff4:	4283      	cmp	r3, r0
   34ff6:	d1be      	bne.n	34f76 <__swsetup_r+0x3e>
   34ff8:	230c      	movs	r3, #12
   34ffa:	5ee2      	ldrsh	r2, [r4, r3]
   34ffc:	0613      	lsls	r3, r2, #24
   34ffe:	d5ba      	bpl.n	34f76 <__swsetup_r+0x3e>
   35000:	2340      	movs	r3, #64	; 0x40
   35002:	4313      	orrs	r3, r2
   35004:	81a3      	strh	r3, [r4, #12]
   35006:	3801      	subs	r0, #1
   35008:	e7b5      	b.n	34f76 <__swsetup_r+0x3e>
   3500a:	0792      	lsls	r2, r2, #30
   3500c:	d400      	bmi.n	35010 <__swsetup_r+0xd8>
   3500e:	6963      	ldr	r3, [r4, #20]
   35010:	60a3      	str	r3, [r4, #8]
   35012:	e7ed      	b.n	34ff0 <__swsetup_r+0xb8>
   35014:	20000130 	.word	0x20000130
   35018:	0003a0c8 	.word	0x0003a0c8
   3501c:	0003a0e8 	.word	0x0003a0e8
   35020:	0003a0a8 	.word	0x0003a0a8

00035024 <__sflush_r>:
   35024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35026:	898a      	ldrh	r2, [r1, #12]
   35028:	0005      	movs	r5, r0
   3502a:	000c      	movs	r4, r1
   3502c:	0713      	lsls	r3, r2, #28
   3502e:	d460      	bmi.n	350f2 <__sflush_r+0xce>
   35030:	684b      	ldr	r3, [r1, #4]
   35032:	2b00      	cmp	r3, #0
   35034:	dc04      	bgt.n	35040 <__sflush_r+0x1c>
   35036:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   35038:	2b00      	cmp	r3, #0
   3503a:	dc01      	bgt.n	35040 <__sflush_r+0x1c>
   3503c:	2000      	movs	r0, #0
   3503e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   35040:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   35042:	2f00      	cmp	r7, #0
   35044:	d0fa      	beq.n	3503c <__sflush_r+0x18>
   35046:	2300      	movs	r3, #0
   35048:	682e      	ldr	r6, [r5, #0]
   3504a:	602b      	str	r3, [r5, #0]
   3504c:	2380      	movs	r3, #128	; 0x80
   3504e:	015b      	lsls	r3, r3, #5
   35050:	401a      	ands	r2, r3
   35052:	d034      	beq.n	350be <__sflush_r+0x9a>
   35054:	6d60      	ldr	r0, [r4, #84]	; 0x54
   35056:	89a3      	ldrh	r3, [r4, #12]
   35058:	075b      	lsls	r3, r3, #29
   3505a:	d506      	bpl.n	3506a <__sflush_r+0x46>
   3505c:	6863      	ldr	r3, [r4, #4]
   3505e:	1ac0      	subs	r0, r0, r3
   35060:	6b63      	ldr	r3, [r4, #52]	; 0x34
   35062:	2b00      	cmp	r3, #0
   35064:	d001      	beq.n	3506a <__sflush_r+0x46>
   35066:	6c23      	ldr	r3, [r4, #64]	; 0x40
   35068:	1ac0      	subs	r0, r0, r3
   3506a:	0002      	movs	r2, r0
   3506c:	6a21      	ldr	r1, [r4, #32]
   3506e:	2300      	movs	r3, #0
   35070:	0028      	movs	r0, r5
   35072:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   35074:	47b8      	blx	r7
   35076:	89a1      	ldrh	r1, [r4, #12]
   35078:	1c43      	adds	r3, r0, #1
   3507a:	d106      	bne.n	3508a <__sflush_r+0x66>
   3507c:	682b      	ldr	r3, [r5, #0]
   3507e:	2b1d      	cmp	r3, #29
   35080:	d831      	bhi.n	350e6 <__sflush_r+0xc2>
   35082:	4a2c      	ldr	r2, [pc, #176]	; (35134 <__sflush_r+0x110>)
   35084:	40da      	lsrs	r2, r3
   35086:	07d3      	lsls	r3, r2, #31
   35088:	d52d      	bpl.n	350e6 <__sflush_r+0xc2>
   3508a:	2300      	movs	r3, #0
   3508c:	6063      	str	r3, [r4, #4]
   3508e:	6923      	ldr	r3, [r4, #16]
   35090:	6023      	str	r3, [r4, #0]
   35092:	04cb      	lsls	r3, r1, #19
   35094:	d505      	bpl.n	350a2 <__sflush_r+0x7e>
   35096:	1c43      	adds	r3, r0, #1
   35098:	d102      	bne.n	350a0 <__sflush_r+0x7c>
   3509a:	682b      	ldr	r3, [r5, #0]
   3509c:	2b00      	cmp	r3, #0
   3509e:	d100      	bne.n	350a2 <__sflush_r+0x7e>
   350a0:	6560      	str	r0, [r4, #84]	; 0x54
   350a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   350a4:	602e      	str	r6, [r5, #0]
   350a6:	2900      	cmp	r1, #0
   350a8:	d0c8      	beq.n	3503c <__sflush_r+0x18>
   350aa:	0023      	movs	r3, r4
   350ac:	3344      	adds	r3, #68	; 0x44
   350ae:	4299      	cmp	r1, r3
   350b0:	d002      	beq.n	350b8 <__sflush_r+0x94>
   350b2:	0028      	movs	r0, r5
   350b4:	f7ff fbee 	bl	34894 <_free_r>
   350b8:	2000      	movs	r0, #0
   350ba:	6360      	str	r0, [r4, #52]	; 0x34
   350bc:	e7bf      	b.n	3503e <__sflush_r+0x1a>
   350be:	2301      	movs	r3, #1
   350c0:	6a21      	ldr	r1, [r4, #32]
   350c2:	0028      	movs	r0, r5
   350c4:	47b8      	blx	r7
   350c6:	1c43      	adds	r3, r0, #1
   350c8:	d1c5      	bne.n	35056 <__sflush_r+0x32>
   350ca:	682b      	ldr	r3, [r5, #0]
   350cc:	2b00      	cmp	r3, #0
   350ce:	d0c2      	beq.n	35056 <__sflush_r+0x32>
   350d0:	2b1d      	cmp	r3, #29
   350d2:	d001      	beq.n	350d8 <__sflush_r+0xb4>
   350d4:	2b16      	cmp	r3, #22
   350d6:	d101      	bne.n	350dc <__sflush_r+0xb8>
   350d8:	602e      	str	r6, [r5, #0]
   350da:	e7af      	b.n	3503c <__sflush_r+0x18>
   350dc:	2340      	movs	r3, #64	; 0x40
   350de:	89a2      	ldrh	r2, [r4, #12]
   350e0:	4313      	orrs	r3, r2
   350e2:	81a3      	strh	r3, [r4, #12]
   350e4:	e7ab      	b.n	3503e <__sflush_r+0x1a>
   350e6:	2340      	movs	r3, #64	; 0x40
   350e8:	430b      	orrs	r3, r1
   350ea:	2001      	movs	r0, #1
   350ec:	81a3      	strh	r3, [r4, #12]
   350ee:	4240      	negs	r0, r0
   350f0:	e7a5      	b.n	3503e <__sflush_r+0x1a>
   350f2:	690f      	ldr	r7, [r1, #16]
   350f4:	2f00      	cmp	r7, #0
   350f6:	d0a1      	beq.n	3503c <__sflush_r+0x18>
   350f8:	680b      	ldr	r3, [r1, #0]
   350fa:	600f      	str	r7, [r1, #0]
   350fc:	1bdb      	subs	r3, r3, r7
   350fe:	9301      	str	r3, [sp, #4]
   35100:	2300      	movs	r3, #0
   35102:	0792      	lsls	r2, r2, #30
   35104:	d100      	bne.n	35108 <__sflush_r+0xe4>
   35106:	694b      	ldr	r3, [r1, #20]
   35108:	60a3      	str	r3, [r4, #8]
   3510a:	9b01      	ldr	r3, [sp, #4]
   3510c:	2b00      	cmp	r3, #0
   3510e:	dc00      	bgt.n	35112 <__sflush_r+0xee>
   35110:	e794      	b.n	3503c <__sflush_r+0x18>
   35112:	9b01      	ldr	r3, [sp, #4]
   35114:	003a      	movs	r2, r7
   35116:	6a21      	ldr	r1, [r4, #32]
   35118:	0028      	movs	r0, r5
   3511a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   3511c:	47b0      	blx	r6
   3511e:	2800      	cmp	r0, #0
   35120:	dc03      	bgt.n	3512a <__sflush_r+0x106>
   35122:	2340      	movs	r3, #64	; 0x40
   35124:	89a2      	ldrh	r2, [r4, #12]
   35126:	4313      	orrs	r3, r2
   35128:	e7df      	b.n	350ea <__sflush_r+0xc6>
   3512a:	9b01      	ldr	r3, [sp, #4]
   3512c:	183f      	adds	r7, r7, r0
   3512e:	1a1b      	subs	r3, r3, r0
   35130:	9301      	str	r3, [sp, #4]
   35132:	e7ea      	b.n	3510a <__sflush_r+0xe6>
   35134:	20400001 	.word	0x20400001

00035138 <_fflush_r>:
   35138:	690b      	ldr	r3, [r1, #16]
   3513a:	b570      	push	{r4, r5, r6, lr}
   3513c:	0005      	movs	r5, r0
   3513e:	000c      	movs	r4, r1
   35140:	2b00      	cmp	r3, #0
   35142:	d101      	bne.n	35148 <_fflush_r+0x10>
   35144:	2000      	movs	r0, #0
   35146:	bd70      	pop	{r4, r5, r6, pc}
   35148:	2800      	cmp	r0, #0
   3514a:	d004      	beq.n	35156 <_fflush_r+0x1e>
   3514c:	6983      	ldr	r3, [r0, #24]
   3514e:	2b00      	cmp	r3, #0
   35150:	d101      	bne.n	35156 <_fflush_r+0x1e>
   35152:	f000 f85f 	bl	35214 <__sinit>
   35156:	4b0b      	ldr	r3, [pc, #44]	; (35184 <_fflush_r+0x4c>)
   35158:	429c      	cmp	r4, r3
   3515a:	d109      	bne.n	35170 <_fflush_r+0x38>
   3515c:	686c      	ldr	r4, [r5, #4]
   3515e:	220c      	movs	r2, #12
   35160:	5ea3      	ldrsh	r3, [r4, r2]
   35162:	2b00      	cmp	r3, #0
   35164:	d0ee      	beq.n	35144 <_fflush_r+0xc>
   35166:	0021      	movs	r1, r4
   35168:	0028      	movs	r0, r5
   3516a:	f7ff ff5b 	bl	35024 <__sflush_r>
   3516e:	e7ea      	b.n	35146 <_fflush_r+0xe>
   35170:	4b05      	ldr	r3, [pc, #20]	; (35188 <_fflush_r+0x50>)
   35172:	429c      	cmp	r4, r3
   35174:	d101      	bne.n	3517a <_fflush_r+0x42>
   35176:	68ac      	ldr	r4, [r5, #8]
   35178:	e7f1      	b.n	3515e <_fflush_r+0x26>
   3517a:	4b04      	ldr	r3, [pc, #16]	; (3518c <_fflush_r+0x54>)
   3517c:	429c      	cmp	r4, r3
   3517e:	d1ee      	bne.n	3515e <_fflush_r+0x26>
   35180:	68ec      	ldr	r4, [r5, #12]
   35182:	e7ec      	b.n	3515e <_fflush_r+0x26>
   35184:	0003a0c8 	.word	0x0003a0c8
   35188:	0003a0e8 	.word	0x0003a0e8
   3518c:	0003a0a8 	.word	0x0003a0a8

00035190 <_cleanup_r>:
   35190:	b510      	push	{r4, lr}
   35192:	4902      	ldr	r1, [pc, #8]	; (3519c <_cleanup_r+0xc>)
   35194:	f000 f8b2 	bl	352fc <_fwalk_reent>
   35198:	bd10      	pop	{r4, pc}
   3519a:	46c0      	nop			; (mov r8, r8)
   3519c:	00035139 	.word	0x00035139

000351a0 <std.isra.0>:
   351a0:	2300      	movs	r3, #0
   351a2:	b510      	push	{r4, lr}
   351a4:	0004      	movs	r4, r0
   351a6:	6003      	str	r3, [r0, #0]
   351a8:	6043      	str	r3, [r0, #4]
   351aa:	6083      	str	r3, [r0, #8]
   351ac:	8181      	strh	r1, [r0, #12]
   351ae:	6643      	str	r3, [r0, #100]	; 0x64
   351b0:	81c2      	strh	r2, [r0, #14]
   351b2:	6103      	str	r3, [r0, #16]
   351b4:	6143      	str	r3, [r0, #20]
   351b6:	6183      	str	r3, [r0, #24]
   351b8:	0019      	movs	r1, r3
   351ba:	2208      	movs	r2, #8
   351bc:	305c      	adds	r0, #92	; 0x5c
   351be:	f7ff fb60 	bl	34882 <memset>
   351c2:	4b05      	ldr	r3, [pc, #20]	; (351d8 <std.isra.0+0x38>)
   351c4:	6224      	str	r4, [r4, #32]
   351c6:	6263      	str	r3, [r4, #36]	; 0x24
   351c8:	4b04      	ldr	r3, [pc, #16]	; (351dc <std.isra.0+0x3c>)
   351ca:	62a3      	str	r3, [r4, #40]	; 0x28
   351cc:	4b04      	ldr	r3, [pc, #16]	; (351e0 <std.isra.0+0x40>)
   351ce:	62e3      	str	r3, [r4, #44]	; 0x2c
   351d0:	4b04      	ldr	r3, [pc, #16]	; (351e4 <std.isra.0+0x44>)
   351d2:	6323      	str	r3, [r4, #48]	; 0x30
   351d4:	bd10      	pop	{r4, pc}
   351d6:	46c0      	nop			; (mov r8, r8)
   351d8:	00035a3d 	.word	0x00035a3d
   351dc:	00035a65 	.word	0x00035a65
   351e0:	00035a9d 	.word	0x00035a9d
   351e4:	00035ac9 	.word	0x00035ac9

000351e8 <__sfmoreglue>:
   351e8:	b570      	push	{r4, r5, r6, lr}
   351ea:	2568      	movs	r5, #104	; 0x68
   351ec:	1e4a      	subs	r2, r1, #1
   351ee:	4355      	muls	r5, r2
   351f0:	000e      	movs	r6, r1
   351f2:	0029      	movs	r1, r5
   351f4:	3174      	adds	r1, #116	; 0x74
   351f6:	f7ff fb97 	bl	34928 <_malloc_r>
   351fa:	1e04      	subs	r4, r0, #0
   351fc:	d008      	beq.n	35210 <__sfmoreglue+0x28>
   351fe:	2100      	movs	r1, #0
   35200:	002a      	movs	r2, r5
   35202:	6001      	str	r1, [r0, #0]
   35204:	6046      	str	r6, [r0, #4]
   35206:	300c      	adds	r0, #12
   35208:	60a0      	str	r0, [r4, #8]
   3520a:	3268      	adds	r2, #104	; 0x68
   3520c:	f7ff fb39 	bl	34882 <memset>
   35210:	0020      	movs	r0, r4
   35212:	bd70      	pop	{r4, r5, r6, pc}

00035214 <__sinit>:
   35214:	6983      	ldr	r3, [r0, #24]
   35216:	b513      	push	{r0, r1, r4, lr}
   35218:	0004      	movs	r4, r0
   3521a:	2b00      	cmp	r3, #0
   3521c:	d128      	bne.n	35270 <__sinit+0x5c>
   3521e:	6483      	str	r3, [r0, #72]	; 0x48
   35220:	64c3      	str	r3, [r0, #76]	; 0x4c
   35222:	6503      	str	r3, [r0, #80]	; 0x50
   35224:	4b13      	ldr	r3, [pc, #76]	; (35274 <__sinit+0x60>)
   35226:	4a14      	ldr	r2, [pc, #80]	; (35278 <__sinit+0x64>)
   35228:	681b      	ldr	r3, [r3, #0]
   3522a:	6282      	str	r2, [r0, #40]	; 0x28
   3522c:	9301      	str	r3, [sp, #4]
   3522e:	4298      	cmp	r0, r3
   35230:	d101      	bne.n	35236 <__sinit+0x22>
   35232:	2301      	movs	r3, #1
   35234:	6183      	str	r3, [r0, #24]
   35236:	0020      	movs	r0, r4
   35238:	f000 f820 	bl	3527c <__sfp>
   3523c:	6060      	str	r0, [r4, #4]
   3523e:	0020      	movs	r0, r4
   35240:	f000 f81c 	bl	3527c <__sfp>
   35244:	60a0      	str	r0, [r4, #8]
   35246:	0020      	movs	r0, r4
   35248:	f000 f818 	bl	3527c <__sfp>
   3524c:	2200      	movs	r2, #0
   3524e:	60e0      	str	r0, [r4, #12]
   35250:	2104      	movs	r1, #4
   35252:	6860      	ldr	r0, [r4, #4]
   35254:	f7ff ffa4 	bl	351a0 <std.isra.0>
   35258:	2201      	movs	r2, #1
   3525a:	2109      	movs	r1, #9
   3525c:	68a0      	ldr	r0, [r4, #8]
   3525e:	f7ff ff9f 	bl	351a0 <std.isra.0>
   35262:	2202      	movs	r2, #2
   35264:	2112      	movs	r1, #18
   35266:	68e0      	ldr	r0, [r4, #12]
   35268:	f7ff ff9a 	bl	351a0 <std.isra.0>
   3526c:	2301      	movs	r3, #1
   3526e:	61a3      	str	r3, [r4, #24]
   35270:	bd13      	pop	{r0, r1, r4, pc}
   35272:	46c0      	nop			; (mov r8, r8)
   35274:	0003a0a4 	.word	0x0003a0a4
   35278:	00035191 	.word	0x00035191

0003527c <__sfp>:
   3527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3527e:	4b1e      	ldr	r3, [pc, #120]	; (352f8 <__sfp+0x7c>)
   35280:	0007      	movs	r7, r0
   35282:	681e      	ldr	r6, [r3, #0]
   35284:	69b3      	ldr	r3, [r6, #24]
   35286:	2b00      	cmp	r3, #0
   35288:	d102      	bne.n	35290 <__sfp+0x14>
   3528a:	0030      	movs	r0, r6
   3528c:	f7ff ffc2 	bl	35214 <__sinit>
   35290:	3648      	adds	r6, #72	; 0x48
   35292:	68b4      	ldr	r4, [r6, #8]
   35294:	6873      	ldr	r3, [r6, #4]
   35296:	3b01      	subs	r3, #1
   35298:	d504      	bpl.n	352a4 <__sfp+0x28>
   3529a:	6833      	ldr	r3, [r6, #0]
   3529c:	2b00      	cmp	r3, #0
   3529e:	d007      	beq.n	352b0 <__sfp+0x34>
   352a0:	6836      	ldr	r6, [r6, #0]
   352a2:	e7f6      	b.n	35292 <__sfp+0x16>
   352a4:	220c      	movs	r2, #12
   352a6:	5ea5      	ldrsh	r5, [r4, r2]
   352a8:	2d00      	cmp	r5, #0
   352aa:	d00d      	beq.n	352c8 <__sfp+0x4c>
   352ac:	3468      	adds	r4, #104	; 0x68
   352ae:	e7f2      	b.n	35296 <__sfp+0x1a>
   352b0:	2104      	movs	r1, #4
   352b2:	0038      	movs	r0, r7
   352b4:	f7ff ff98 	bl	351e8 <__sfmoreglue>
   352b8:	6030      	str	r0, [r6, #0]
   352ba:	2800      	cmp	r0, #0
   352bc:	d1f0      	bne.n	352a0 <__sfp+0x24>
   352be:	230c      	movs	r3, #12
   352c0:	0004      	movs	r4, r0
   352c2:	603b      	str	r3, [r7, #0]
   352c4:	0020      	movs	r0, r4
   352c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   352c8:	2301      	movs	r3, #1
   352ca:	0020      	movs	r0, r4
   352cc:	425b      	negs	r3, r3
   352ce:	81e3      	strh	r3, [r4, #14]
   352d0:	3302      	adds	r3, #2
   352d2:	81a3      	strh	r3, [r4, #12]
   352d4:	6665      	str	r5, [r4, #100]	; 0x64
   352d6:	6025      	str	r5, [r4, #0]
   352d8:	60a5      	str	r5, [r4, #8]
   352da:	6065      	str	r5, [r4, #4]
   352dc:	6125      	str	r5, [r4, #16]
   352de:	6165      	str	r5, [r4, #20]
   352e0:	61a5      	str	r5, [r4, #24]
   352e2:	2208      	movs	r2, #8
   352e4:	0029      	movs	r1, r5
   352e6:	305c      	adds	r0, #92	; 0x5c
   352e8:	f7ff facb 	bl	34882 <memset>
   352ec:	6365      	str	r5, [r4, #52]	; 0x34
   352ee:	63a5      	str	r5, [r4, #56]	; 0x38
   352f0:	64a5      	str	r5, [r4, #72]	; 0x48
   352f2:	64e5      	str	r5, [r4, #76]	; 0x4c
   352f4:	e7e6      	b.n	352c4 <__sfp+0x48>
   352f6:	46c0      	nop			; (mov r8, r8)
   352f8:	0003a0a4 	.word	0x0003a0a4

000352fc <_fwalk_reent>:
   352fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   352fe:	0004      	movs	r4, r0
   35300:	0007      	movs	r7, r0
   35302:	2600      	movs	r6, #0
   35304:	9101      	str	r1, [sp, #4]
   35306:	3448      	adds	r4, #72	; 0x48
   35308:	2c00      	cmp	r4, #0
   3530a:	d101      	bne.n	35310 <_fwalk_reent+0x14>
   3530c:	0030      	movs	r0, r6
   3530e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   35310:	6863      	ldr	r3, [r4, #4]
   35312:	68a5      	ldr	r5, [r4, #8]
   35314:	9300      	str	r3, [sp, #0]
   35316:	9b00      	ldr	r3, [sp, #0]
   35318:	3b01      	subs	r3, #1
   3531a:	9300      	str	r3, [sp, #0]
   3531c:	d501      	bpl.n	35322 <_fwalk_reent+0x26>
   3531e:	6824      	ldr	r4, [r4, #0]
   35320:	e7f2      	b.n	35308 <_fwalk_reent+0xc>
   35322:	89ab      	ldrh	r3, [r5, #12]
   35324:	2b01      	cmp	r3, #1
   35326:	d908      	bls.n	3533a <_fwalk_reent+0x3e>
   35328:	220e      	movs	r2, #14
   3532a:	5eab      	ldrsh	r3, [r5, r2]
   3532c:	3301      	adds	r3, #1
   3532e:	d004      	beq.n	3533a <_fwalk_reent+0x3e>
   35330:	0029      	movs	r1, r5
   35332:	0038      	movs	r0, r7
   35334:	9b01      	ldr	r3, [sp, #4]
   35336:	4798      	blx	r3
   35338:	4306      	orrs	r6, r0
   3533a:	3568      	adds	r5, #104	; 0x68
   3533c:	e7eb      	b.n	35316 <_fwalk_reent+0x1a>

0003533e <__locale_ctype_ptr_l>:
   3533e:	30ec      	adds	r0, #236	; 0xec
   35340:	6800      	ldr	r0, [r0, #0]
   35342:	4770      	bx	lr

00035344 <__locale_ctype_ptr>:
   35344:	4b04      	ldr	r3, [pc, #16]	; (35358 <__locale_ctype_ptr+0x14>)
   35346:	681b      	ldr	r3, [r3, #0]
   35348:	6a1b      	ldr	r3, [r3, #32]
   3534a:	2b00      	cmp	r3, #0
   3534c:	d100      	bne.n	35350 <__locale_ctype_ptr+0xc>
   3534e:	4b03      	ldr	r3, [pc, #12]	; (3535c <__locale_ctype_ptr+0x18>)
   35350:	33ec      	adds	r3, #236	; 0xec
   35352:	6818      	ldr	r0, [r3, #0]
   35354:	4770      	bx	lr
   35356:	46c0      	nop			; (mov r8, r8)
   35358:	20000130 	.word	0x20000130
   3535c:	20000194 	.word	0x20000194

00035360 <__swhatbuf_r>:
   35360:	b570      	push	{r4, r5, r6, lr}
   35362:	000e      	movs	r6, r1
   35364:	001d      	movs	r5, r3
   35366:	230e      	movs	r3, #14
   35368:	5ec9      	ldrsh	r1, [r1, r3]
   3536a:	b090      	sub	sp, #64	; 0x40
   3536c:	0014      	movs	r4, r2
   3536e:	2900      	cmp	r1, #0
   35370:	da07      	bge.n	35382 <__swhatbuf_r+0x22>
   35372:	2300      	movs	r3, #0
   35374:	602b      	str	r3, [r5, #0]
   35376:	89b3      	ldrh	r3, [r6, #12]
   35378:	061b      	lsls	r3, r3, #24
   3537a:	d411      	bmi.n	353a0 <__swhatbuf_r+0x40>
   3537c:	2380      	movs	r3, #128	; 0x80
   3537e:	00db      	lsls	r3, r3, #3
   35380:	e00f      	b.n	353a2 <__swhatbuf_r+0x42>
   35382:	aa01      	add	r2, sp, #4
   35384:	f000 fbe6 	bl	35b54 <_fstat_r>
   35388:	2800      	cmp	r0, #0
   3538a:	dbf2      	blt.n	35372 <__swhatbuf_r+0x12>
   3538c:	22f0      	movs	r2, #240	; 0xf0
   3538e:	9b02      	ldr	r3, [sp, #8]
   35390:	0212      	lsls	r2, r2, #8
   35392:	4013      	ands	r3, r2
   35394:	4a05      	ldr	r2, [pc, #20]	; (353ac <__swhatbuf_r+0x4c>)
   35396:	189b      	adds	r3, r3, r2
   35398:	425a      	negs	r2, r3
   3539a:	4153      	adcs	r3, r2
   3539c:	602b      	str	r3, [r5, #0]
   3539e:	e7ed      	b.n	3537c <__swhatbuf_r+0x1c>
   353a0:	2340      	movs	r3, #64	; 0x40
   353a2:	2000      	movs	r0, #0
   353a4:	6023      	str	r3, [r4, #0]
   353a6:	b010      	add	sp, #64	; 0x40
   353a8:	bd70      	pop	{r4, r5, r6, pc}
   353aa:	46c0      	nop			; (mov r8, r8)
   353ac:	ffffe000 	.word	0xffffe000

000353b0 <__smakebuf_r>:
   353b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   353b2:	2602      	movs	r6, #2
   353b4:	898b      	ldrh	r3, [r1, #12]
   353b6:	0005      	movs	r5, r0
   353b8:	000c      	movs	r4, r1
   353ba:	4233      	tst	r3, r6
   353bc:	d006      	beq.n	353cc <__smakebuf_r+0x1c>
   353be:	0023      	movs	r3, r4
   353c0:	3347      	adds	r3, #71	; 0x47
   353c2:	6023      	str	r3, [r4, #0]
   353c4:	6123      	str	r3, [r4, #16]
   353c6:	2301      	movs	r3, #1
   353c8:	6163      	str	r3, [r4, #20]
   353ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   353cc:	ab01      	add	r3, sp, #4
   353ce:	466a      	mov	r2, sp
   353d0:	f7ff ffc6 	bl	35360 <__swhatbuf_r>
   353d4:	9900      	ldr	r1, [sp, #0]
   353d6:	0007      	movs	r7, r0
   353d8:	0028      	movs	r0, r5
   353da:	f7ff faa5 	bl	34928 <_malloc_r>
   353de:	2800      	cmp	r0, #0
   353e0:	d108      	bne.n	353f4 <__smakebuf_r+0x44>
   353e2:	220c      	movs	r2, #12
   353e4:	5ea3      	ldrsh	r3, [r4, r2]
   353e6:	059a      	lsls	r2, r3, #22
   353e8:	d4ef      	bmi.n	353ca <__smakebuf_r+0x1a>
   353ea:	2203      	movs	r2, #3
   353ec:	4393      	bics	r3, r2
   353ee:	431e      	orrs	r6, r3
   353f0:	81a6      	strh	r6, [r4, #12]
   353f2:	e7e4      	b.n	353be <__smakebuf_r+0xe>
   353f4:	4b0f      	ldr	r3, [pc, #60]	; (35434 <__smakebuf_r+0x84>)
   353f6:	62ab      	str	r3, [r5, #40]	; 0x28
   353f8:	2380      	movs	r3, #128	; 0x80
   353fa:	89a2      	ldrh	r2, [r4, #12]
   353fc:	6020      	str	r0, [r4, #0]
   353fe:	4313      	orrs	r3, r2
   35400:	81a3      	strh	r3, [r4, #12]
   35402:	9b00      	ldr	r3, [sp, #0]
   35404:	6120      	str	r0, [r4, #16]
   35406:	6163      	str	r3, [r4, #20]
   35408:	9b01      	ldr	r3, [sp, #4]
   3540a:	2b00      	cmp	r3, #0
   3540c:	d00d      	beq.n	3542a <__smakebuf_r+0x7a>
   3540e:	230e      	movs	r3, #14
   35410:	5ee1      	ldrsh	r1, [r4, r3]
   35412:	0028      	movs	r0, r5
   35414:	f000 fbb0 	bl	35b78 <_isatty_r>
   35418:	2800      	cmp	r0, #0
   3541a:	d006      	beq.n	3542a <__smakebuf_r+0x7a>
   3541c:	2203      	movs	r2, #3
   3541e:	89a3      	ldrh	r3, [r4, #12]
   35420:	4393      	bics	r3, r2
   35422:	001a      	movs	r2, r3
   35424:	2301      	movs	r3, #1
   35426:	4313      	orrs	r3, r2
   35428:	81a3      	strh	r3, [r4, #12]
   3542a:	89a0      	ldrh	r0, [r4, #12]
   3542c:	4338      	orrs	r0, r7
   3542e:	81a0      	strh	r0, [r4, #12]
   35430:	e7cb      	b.n	353ca <__smakebuf_r+0x1a>
   35432:	46c0      	nop			; (mov r8, r8)
   35434:	00035191 	.word	0x00035191

00035438 <__ascii_mbtowc>:
   35438:	b082      	sub	sp, #8
   3543a:	2900      	cmp	r1, #0
   3543c:	d100      	bne.n	35440 <__ascii_mbtowc+0x8>
   3543e:	a901      	add	r1, sp, #4
   35440:	1e10      	subs	r0, r2, #0
   35442:	d006      	beq.n	35452 <__ascii_mbtowc+0x1a>
   35444:	2b00      	cmp	r3, #0
   35446:	d006      	beq.n	35456 <__ascii_mbtowc+0x1e>
   35448:	7813      	ldrb	r3, [r2, #0]
   3544a:	600b      	str	r3, [r1, #0]
   3544c:	7810      	ldrb	r0, [r2, #0]
   3544e:	1e43      	subs	r3, r0, #1
   35450:	4198      	sbcs	r0, r3
   35452:	b002      	add	sp, #8
   35454:	4770      	bx	lr
   35456:	2002      	movs	r0, #2
   35458:	4240      	negs	r0, r0
   3545a:	e7fa      	b.n	35452 <__ascii_mbtowc+0x1a>

0003545c <__malloc_lock>:
   3545c:	4770      	bx	lr

0003545e <__malloc_unlock>:
   3545e:	4770      	bx	lr

00035460 <__ssputs_r>:
   35460:	b5f0      	push	{r4, r5, r6, r7, lr}
   35462:	688e      	ldr	r6, [r1, #8]
   35464:	b085      	sub	sp, #20
   35466:	0007      	movs	r7, r0
   35468:	000c      	movs	r4, r1
   3546a:	9203      	str	r2, [sp, #12]
   3546c:	9301      	str	r3, [sp, #4]
   3546e:	429e      	cmp	r6, r3
   35470:	d839      	bhi.n	354e6 <__ssputs_r+0x86>
   35472:	2390      	movs	r3, #144	; 0x90
   35474:	898a      	ldrh	r2, [r1, #12]
   35476:	00db      	lsls	r3, r3, #3
   35478:	421a      	tst	r2, r3
   3547a:	d034      	beq.n	354e6 <__ssputs_r+0x86>
   3547c:	2503      	movs	r5, #3
   3547e:	6909      	ldr	r1, [r1, #16]
   35480:	6823      	ldr	r3, [r4, #0]
   35482:	1a5b      	subs	r3, r3, r1
   35484:	9302      	str	r3, [sp, #8]
   35486:	6963      	ldr	r3, [r4, #20]
   35488:	9802      	ldr	r0, [sp, #8]
   3548a:	435d      	muls	r5, r3
   3548c:	0feb      	lsrs	r3, r5, #31
   3548e:	195d      	adds	r5, r3, r5
   35490:	9b01      	ldr	r3, [sp, #4]
   35492:	106d      	asrs	r5, r5, #1
   35494:	3301      	adds	r3, #1
   35496:	181b      	adds	r3, r3, r0
   35498:	42ab      	cmp	r3, r5
   3549a:	d900      	bls.n	3549e <__ssputs_r+0x3e>
   3549c:	001d      	movs	r5, r3
   3549e:	0553      	lsls	r3, r2, #21
   354a0:	d532      	bpl.n	35508 <__ssputs_r+0xa8>
   354a2:	0029      	movs	r1, r5
   354a4:	0038      	movs	r0, r7
   354a6:	f7ff fa3f 	bl	34928 <_malloc_r>
   354aa:	1e06      	subs	r6, r0, #0
   354ac:	d109      	bne.n	354c2 <__ssputs_r+0x62>
   354ae:	230c      	movs	r3, #12
   354b0:	603b      	str	r3, [r7, #0]
   354b2:	2340      	movs	r3, #64	; 0x40
   354b4:	2001      	movs	r0, #1
   354b6:	89a2      	ldrh	r2, [r4, #12]
   354b8:	4240      	negs	r0, r0
   354ba:	4313      	orrs	r3, r2
   354bc:	81a3      	strh	r3, [r4, #12]
   354be:	b005      	add	sp, #20
   354c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   354c2:	9a02      	ldr	r2, [sp, #8]
   354c4:	6921      	ldr	r1, [r4, #16]
   354c6:	f7ff f9c1 	bl	3484c <memcpy>
   354ca:	89a3      	ldrh	r3, [r4, #12]
   354cc:	4a14      	ldr	r2, [pc, #80]	; (35520 <__ssputs_r+0xc0>)
   354ce:	401a      	ands	r2, r3
   354d0:	2380      	movs	r3, #128	; 0x80
   354d2:	4313      	orrs	r3, r2
   354d4:	81a3      	strh	r3, [r4, #12]
   354d6:	9b02      	ldr	r3, [sp, #8]
   354d8:	6126      	str	r6, [r4, #16]
   354da:	18f6      	adds	r6, r6, r3
   354dc:	6026      	str	r6, [r4, #0]
   354de:	6165      	str	r5, [r4, #20]
   354e0:	9e01      	ldr	r6, [sp, #4]
   354e2:	1aed      	subs	r5, r5, r3
   354e4:	60a5      	str	r5, [r4, #8]
   354e6:	9b01      	ldr	r3, [sp, #4]
   354e8:	42b3      	cmp	r3, r6
   354ea:	d200      	bcs.n	354ee <__ssputs_r+0x8e>
   354ec:	001e      	movs	r6, r3
   354ee:	0032      	movs	r2, r6
   354f0:	9903      	ldr	r1, [sp, #12]
   354f2:	6820      	ldr	r0, [r4, #0]
   354f4:	f7ff f9b3 	bl	3485e <memmove>
   354f8:	68a3      	ldr	r3, [r4, #8]
   354fa:	2000      	movs	r0, #0
   354fc:	1b9b      	subs	r3, r3, r6
   354fe:	60a3      	str	r3, [r4, #8]
   35500:	6823      	ldr	r3, [r4, #0]
   35502:	199e      	adds	r6, r3, r6
   35504:	6026      	str	r6, [r4, #0]
   35506:	e7da      	b.n	354be <__ssputs_r+0x5e>
   35508:	002a      	movs	r2, r5
   3550a:	0038      	movs	r0, r7
   3550c:	f000 fb65 	bl	35bda <_realloc_r>
   35510:	1e06      	subs	r6, r0, #0
   35512:	d1e0      	bne.n	354d6 <__ssputs_r+0x76>
   35514:	6921      	ldr	r1, [r4, #16]
   35516:	0038      	movs	r0, r7
   35518:	f7ff f9bc 	bl	34894 <_free_r>
   3551c:	e7c7      	b.n	354ae <__ssputs_r+0x4e>
   3551e:	46c0      	nop			; (mov r8, r8)
   35520:	fffffb7f 	.word	0xfffffb7f

00035524 <_svfiprintf_r>:
   35524:	b5f0      	push	{r4, r5, r6, r7, lr}
   35526:	b09f      	sub	sp, #124	; 0x7c
   35528:	9002      	str	r0, [sp, #8]
   3552a:	9305      	str	r3, [sp, #20]
   3552c:	898b      	ldrh	r3, [r1, #12]
   3552e:	000f      	movs	r7, r1
   35530:	0016      	movs	r6, r2
   35532:	061b      	lsls	r3, r3, #24
   35534:	d511      	bpl.n	3555a <_svfiprintf_r+0x36>
   35536:	690b      	ldr	r3, [r1, #16]
   35538:	2b00      	cmp	r3, #0
   3553a:	d10e      	bne.n	3555a <_svfiprintf_r+0x36>
   3553c:	2140      	movs	r1, #64	; 0x40
   3553e:	f7ff f9f3 	bl	34928 <_malloc_r>
   35542:	6038      	str	r0, [r7, #0]
   35544:	6138      	str	r0, [r7, #16]
   35546:	2800      	cmp	r0, #0
   35548:	d105      	bne.n	35556 <_svfiprintf_r+0x32>
   3554a:	230c      	movs	r3, #12
   3554c:	9a02      	ldr	r2, [sp, #8]
   3554e:	3801      	subs	r0, #1
   35550:	6013      	str	r3, [r2, #0]
   35552:	b01f      	add	sp, #124	; 0x7c
   35554:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35556:	2340      	movs	r3, #64	; 0x40
   35558:	617b      	str	r3, [r7, #20]
   3555a:	2300      	movs	r3, #0
   3555c:	ad06      	add	r5, sp, #24
   3555e:	616b      	str	r3, [r5, #20]
   35560:	3320      	adds	r3, #32
   35562:	766b      	strb	r3, [r5, #25]
   35564:	3310      	adds	r3, #16
   35566:	76ab      	strb	r3, [r5, #26]
   35568:	0034      	movs	r4, r6
   3556a:	7823      	ldrb	r3, [r4, #0]
   3556c:	2b00      	cmp	r3, #0
   3556e:	d147      	bne.n	35600 <_svfiprintf_r+0xdc>
   35570:	1ba3      	subs	r3, r4, r6
   35572:	9304      	str	r3, [sp, #16]
   35574:	d00d      	beq.n	35592 <_svfiprintf_r+0x6e>
   35576:	1ba3      	subs	r3, r4, r6
   35578:	0032      	movs	r2, r6
   3557a:	0039      	movs	r1, r7
   3557c:	9802      	ldr	r0, [sp, #8]
   3557e:	f7ff ff6f 	bl	35460 <__ssputs_r>
   35582:	1c43      	adds	r3, r0, #1
   35584:	d100      	bne.n	35588 <_svfiprintf_r+0x64>
   35586:	e0b5      	b.n	356f4 <_svfiprintf_r+0x1d0>
   35588:	696a      	ldr	r2, [r5, #20]
   3558a:	9b04      	ldr	r3, [sp, #16]
   3558c:	4694      	mov	ip, r2
   3558e:	4463      	add	r3, ip
   35590:	616b      	str	r3, [r5, #20]
   35592:	7823      	ldrb	r3, [r4, #0]
   35594:	2b00      	cmp	r3, #0
   35596:	d100      	bne.n	3559a <_svfiprintf_r+0x76>
   35598:	e0ac      	b.n	356f4 <_svfiprintf_r+0x1d0>
   3559a:	2201      	movs	r2, #1
   3559c:	2300      	movs	r3, #0
   3559e:	4252      	negs	r2, r2
   355a0:	606a      	str	r2, [r5, #4]
   355a2:	a902      	add	r1, sp, #8
   355a4:	3254      	adds	r2, #84	; 0x54
   355a6:	1852      	adds	r2, r2, r1
   355a8:	3401      	adds	r4, #1
   355aa:	602b      	str	r3, [r5, #0]
   355ac:	60eb      	str	r3, [r5, #12]
   355ae:	60ab      	str	r3, [r5, #8]
   355b0:	7013      	strb	r3, [r2, #0]
   355b2:	65ab      	str	r3, [r5, #88]	; 0x58
   355b4:	4e58      	ldr	r6, [pc, #352]	; (35718 <_svfiprintf_r+0x1f4>)
   355b6:	2205      	movs	r2, #5
   355b8:	7821      	ldrb	r1, [r4, #0]
   355ba:	0030      	movs	r0, r6
   355bc:	f000 fb02 	bl	35bc4 <memchr>
   355c0:	1c62      	adds	r2, r4, #1
   355c2:	2800      	cmp	r0, #0
   355c4:	d120      	bne.n	35608 <_svfiprintf_r+0xe4>
   355c6:	6829      	ldr	r1, [r5, #0]
   355c8:	06cb      	lsls	r3, r1, #27
   355ca:	d504      	bpl.n	355d6 <_svfiprintf_r+0xb2>
   355cc:	2353      	movs	r3, #83	; 0x53
   355ce:	ae02      	add	r6, sp, #8
   355d0:	3020      	adds	r0, #32
   355d2:	199b      	adds	r3, r3, r6
   355d4:	7018      	strb	r0, [r3, #0]
   355d6:	070b      	lsls	r3, r1, #28
   355d8:	d504      	bpl.n	355e4 <_svfiprintf_r+0xc0>
   355da:	2353      	movs	r3, #83	; 0x53
   355dc:	202b      	movs	r0, #43	; 0x2b
   355de:	ae02      	add	r6, sp, #8
   355e0:	199b      	adds	r3, r3, r6
   355e2:	7018      	strb	r0, [r3, #0]
   355e4:	7823      	ldrb	r3, [r4, #0]
   355e6:	2b2a      	cmp	r3, #42	; 0x2a
   355e8:	d016      	beq.n	35618 <_svfiprintf_r+0xf4>
   355ea:	2000      	movs	r0, #0
   355ec:	210a      	movs	r1, #10
   355ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   355f0:	7822      	ldrb	r2, [r4, #0]
   355f2:	3a30      	subs	r2, #48	; 0x30
   355f4:	2a09      	cmp	r2, #9
   355f6:	d955      	bls.n	356a4 <_svfiprintf_r+0x180>
   355f8:	2800      	cmp	r0, #0
   355fa:	d015      	beq.n	35628 <_svfiprintf_r+0x104>
   355fc:	9309      	str	r3, [sp, #36]	; 0x24
   355fe:	e013      	b.n	35628 <_svfiprintf_r+0x104>
   35600:	2b25      	cmp	r3, #37	; 0x25
   35602:	d0b5      	beq.n	35570 <_svfiprintf_r+0x4c>
   35604:	3401      	adds	r4, #1
   35606:	e7b0      	b.n	3556a <_svfiprintf_r+0x46>
   35608:	2301      	movs	r3, #1
   3560a:	1b80      	subs	r0, r0, r6
   3560c:	4083      	lsls	r3, r0
   3560e:	6829      	ldr	r1, [r5, #0]
   35610:	0014      	movs	r4, r2
   35612:	430b      	orrs	r3, r1
   35614:	602b      	str	r3, [r5, #0]
   35616:	e7cd      	b.n	355b4 <_svfiprintf_r+0x90>
   35618:	9b05      	ldr	r3, [sp, #20]
   3561a:	1d18      	adds	r0, r3, #4
   3561c:	681b      	ldr	r3, [r3, #0]
   3561e:	9005      	str	r0, [sp, #20]
   35620:	2b00      	cmp	r3, #0
   35622:	db39      	blt.n	35698 <_svfiprintf_r+0x174>
   35624:	9309      	str	r3, [sp, #36]	; 0x24
   35626:	0014      	movs	r4, r2
   35628:	7823      	ldrb	r3, [r4, #0]
   3562a:	2b2e      	cmp	r3, #46	; 0x2e
   3562c:	d10b      	bne.n	35646 <_svfiprintf_r+0x122>
   3562e:	7863      	ldrb	r3, [r4, #1]
   35630:	1c62      	adds	r2, r4, #1
   35632:	2b2a      	cmp	r3, #42	; 0x2a
   35634:	d13e      	bne.n	356b4 <_svfiprintf_r+0x190>
   35636:	9b05      	ldr	r3, [sp, #20]
   35638:	3402      	adds	r4, #2
   3563a:	1d1a      	adds	r2, r3, #4
   3563c:	681b      	ldr	r3, [r3, #0]
   3563e:	9205      	str	r2, [sp, #20]
   35640:	2b00      	cmp	r3, #0
   35642:	db34      	blt.n	356ae <_svfiprintf_r+0x18a>
   35644:	9307      	str	r3, [sp, #28]
   35646:	4e35      	ldr	r6, [pc, #212]	; (3571c <_svfiprintf_r+0x1f8>)
   35648:	7821      	ldrb	r1, [r4, #0]
   3564a:	2203      	movs	r2, #3
   3564c:	0030      	movs	r0, r6
   3564e:	f000 fab9 	bl	35bc4 <memchr>
   35652:	2800      	cmp	r0, #0
   35654:	d006      	beq.n	35664 <_svfiprintf_r+0x140>
   35656:	2340      	movs	r3, #64	; 0x40
   35658:	1b80      	subs	r0, r0, r6
   3565a:	4083      	lsls	r3, r0
   3565c:	682a      	ldr	r2, [r5, #0]
   3565e:	3401      	adds	r4, #1
   35660:	4313      	orrs	r3, r2
   35662:	602b      	str	r3, [r5, #0]
   35664:	7821      	ldrb	r1, [r4, #0]
   35666:	2206      	movs	r2, #6
   35668:	482d      	ldr	r0, [pc, #180]	; (35720 <_svfiprintf_r+0x1fc>)
   3566a:	1c66      	adds	r6, r4, #1
   3566c:	7629      	strb	r1, [r5, #24]
   3566e:	f000 faa9 	bl	35bc4 <memchr>
   35672:	2800      	cmp	r0, #0
   35674:	d046      	beq.n	35704 <_svfiprintf_r+0x1e0>
   35676:	4b2b      	ldr	r3, [pc, #172]	; (35724 <_svfiprintf_r+0x200>)
   35678:	2b00      	cmp	r3, #0
   3567a:	d12f      	bne.n	356dc <_svfiprintf_r+0x1b8>
   3567c:	6829      	ldr	r1, [r5, #0]
   3567e:	9b05      	ldr	r3, [sp, #20]
   35680:	2207      	movs	r2, #7
   35682:	05c9      	lsls	r1, r1, #23
   35684:	d528      	bpl.n	356d8 <_svfiprintf_r+0x1b4>
   35686:	189b      	adds	r3, r3, r2
   35688:	4393      	bics	r3, r2
   3568a:	3308      	adds	r3, #8
   3568c:	9305      	str	r3, [sp, #20]
   3568e:	696b      	ldr	r3, [r5, #20]
   35690:	9a03      	ldr	r2, [sp, #12]
   35692:	189b      	adds	r3, r3, r2
   35694:	616b      	str	r3, [r5, #20]
   35696:	e767      	b.n	35568 <_svfiprintf_r+0x44>
   35698:	425b      	negs	r3, r3
   3569a:	60eb      	str	r3, [r5, #12]
   3569c:	2302      	movs	r3, #2
   3569e:	430b      	orrs	r3, r1
   356a0:	602b      	str	r3, [r5, #0]
   356a2:	e7c0      	b.n	35626 <_svfiprintf_r+0x102>
   356a4:	434b      	muls	r3, r1
   356a6:	3401      	adds	r4, #1
   356a8:	189b      	adds	r3, r3, r2
   356aa:	2001      	movs	r0, #1
   356ac:	e7a0      	b.n	355f0 <_svfiprintf_r+0xcc>
   356ae:	2301      	movs	r3, #1
   356b0:	425b      	negs	r3, r3
   356b2:	e7c7      	b.n	35644 <_svfiprintf_r+0x120>
   356b4:	2300      	movs	r3, #0
   356b6:	0014      	movs	r4, r2
   356b8:	200a      	movs	r0, #10
   356ba:	001a      	movs	r2, r3
   356bc:	606b      	str	r3, [r5, #4]
   356be:	7821      	ldrb	r1, [r4, #0]
   356c0:	3930      	subs	r1, #48	; 0x30
   356c2:	2909      	cmp	r1, #9
   356c4:	d903      	bls.n	356ce <_svfiprintf_r+0x1aa>
   356c6:	2b00      	cmp	r3, #0
   356c8:	d0bd      	beq.n	35646 <_svfiprintf_r+0x122>
   356ca:	9207      	str	r2, [sp, #28]
   356cc:	e7bb      	b.n	35646 <_svfiprintf_r+0x122>
   356ce:	4342      	muls	r2, r0
   356d0:	3401      	adds	r4, #1
   356d2:	1852      	adds	r2, r2, r1
   356d4:	2301      	movs	r3, #1
   356d6:	e7f2      	b.n	356be <_svfiprintf_r+0x19a>
   356d8:	3307      	adds	r3, #7
   356da:	e7d5      	b.n	35688 <_svfiprintf_r+0x164>
   356dc:	ab05      	add	r3, sp, #20
   356de:	9300      	str	r3, [sp, #0]
   356e0:	003a      	movs	r2, r7
   356e2:	4b11      	ldr	r3, [pc, #68]	; (35728 <_svfiprintf_r+0x204>)
   356e4:	0029      	movs	r1, r5
   356e6:	9802      	ldr	r0, [sp, #8]
   356e8:	e000      	b.n	356ec <_svfiprintf_r+0x1c8>
   356ea:	bf00      	nop
   356ec:	9003      	str	r0, [sp, #12]
   356ee:	9b03      	ldr	r3, [sp, #12]
   356f0:	3301      	adds	r3, #1
   356f2:	d1cc      	bne.n	3568e <_svfiprintf_r+0x16a>
   356f4:	89bb      	ldrh	r3, [r7, #12]
   356f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   356f8:	065b      	lsls	r3, r3, #25
   356fa:	d400      	bmi.n	356fe <_svfiprintf_r+0x1da>
   356fc:	e729      	b.n	35552 <_svfiprintf_r+0x2e>
   356fe:	2001      	movs	r0, #1
   35700:	4240      	negs	r0, r0
   35702:	e726      	b.n	35552 <_svfiprintf_r+0x2e>
   35704:	ab05      	add	r3, sp, #20
   35706:	9300      	str	r3, [sp, #0]
   35708:	003a      	movs	r2, r7
   3570a:	4b07      	ldr	r3, [pc, #28]	; (35728 <_svfiprintf_r+0x204>)
   3570c:	0029      	movs	r1, r5
   3570e:	9802      	ldr	r0, [sp, #8]
   35710:	f000 f87a 	bl	35808 <_printf_i>
   35714:	e7ea      	b.n	356ec <_svfiprintf_r+0x1c8>
   35716:	46c0      	nop			; (mov r8, r8)
   35718:	0003a112 	.word	0x0003a112
   3571c:	0003a118 	.word	0x0003a118
   35720:	0003a11c 	.word	0x0003a11c
   35724:	00000000 	.word	0x00000000
   35728:	00035461 	.word	0x00035461

0003572c <_printf_common>:
   3572c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3572e:	0015      	movs	r5, r2
   35730:	9301      	str	r3, [sp, #4]
   35732:	688a      	ldr	r2, [r1, #8]
   35734:	690b      	ldr	r3, [r1, #16]
   35736:	9000      	str	r0, [sp, #0]
   35738:	000c      	movs	r4, r1
   3573a:	4293      	cmp	r3, r2
   3573c:	da00      	bge.n	35740 <_printf_common+0x14>
   3573e:	0013      	movs	r3, r2
   35740:	0022      	movs	r2, r4
   35742:	602b      	str	r3, [r5, #0]
   35744:	3243      	adds	r2, #67	; 0x43
   35746:	7812      	ldrb	r2, [r2, #0]
   35748:	2a00      	cmp	r2, #0
   3574a:	d001      	beq.n	35750 <_printf_common+0x24>
   3574c:	3301      	adds	r3, #1
   3574e:	602b      	str	r3, [r5, #0]
   35750:	6823      	ldr	r3, [r4, #0]
   35752:	069b      	lsls	r3, r3, #26
   35754:	d502      	bpl.n	3575c <_printf_common+0x30>
   35756:	682b      	ldr	r3, [r5, #0]
   35758:	3302      	adds	r3, #2
   3575a:	602b      	str	r3, [r5, #0]
   3575c:	2706      	movs	r7, #6
   3575e:	6823      	ldr	r3, [r4, #0]
   35760:	401f      	ands	r7, r3
   35762:	d027      	beq.n	357b4 <_printf_common+0x88>
   35764:	0023      	movs	r3, r4
   35766:	3343      	adds	r3, #67	; 0x43
   35768:	781b      	ldrb	r3, [r3, #0]
   3576a:	1e5a      	subs	r2, r3, #1
   3576c:	4193      	sbcs	r3, r2
   3576e:	6822      	ldr	r2, [r4, #0]
   35770:	0692      	lsls	r2, r2, #26
   35772:	d430      	bmi.n	357d6 <_printf_common+0xaa>
   35774:	0022      	movs	r2, r4
   35776:	9901      	ldr	r1, [sp, #4]
   35778:	3243      	adds	r2, #67	; 0x43
   3577a:	9800      	ldr	r0, [sp, #0]
   3577c:	9e08      	ldr	r6, [sp, #32]
   3577e:	47b0      	blx	r6
   35780:	1c43      	adds	r3, r0, #1
   35782:	d025      	beq.n	357d0 <_printf_common+0xa4>
   35784:	2306      	movs	r3, #6
   35786:	6820      	ldr	r0, [r4, #0]
   35788:	682a      	ldr	r2, [r5, #0]
   3578a:	68e1      	ldr	r1, [r4, #12]
   3578c:	4003      	ands	r3, r0
   3578e:	2500      	movs	r5, #0
   35790:	2b04      	cmp	r3, #4
   35792:	d103      	bne.n	3579c <_printf_common+0x70>
   35794:	1a8d      	subs	r5, r1, r2
   35796:	43eb      	mvns	r3, r5
   35798:	17db      	asrs	r3, r3, #31
   3579a:	401d      	ands	r5, r3
   3579c:	68a3      	ldr	r3, [r4, #8]
   3579e:	6922      	ldr	r2, [r4, #16]
   357a0:	4293      	cmp	r3, r2
   357a2:	dd01      	ble.n	357a8 <_printf_common+0x7c>
   357a4:	1a9b      	subs	r3, r3, r2
   357a6:	18ed      	adds	r5, r5, r3
   357a8:	2700      	movs	r7, #0
   357aa:	42bd      	cmp	r5, r7
   357ac:	d120      	bne.n	357f0 <_printf_common+0xc4>
   357ae:	2000      	movs	r0, #0
   357b0:	e010      	b.n	357d4 <_printf_common+0xa8>
   357b2:	3701      	adds	r7, #1
   357b4:	68e3      	ldr	r3, [r4, #12]
   357b6:	682a      	ldr	r2, [r5, #0]
   357b8:	1a9b      	subs	r3, r3, r2
   357ba:	429f      	cmp	r7, r3
   357bc:	dad2      	bge.n	35764 <_printf_common+0x38>
   357be:	0022      	movs	r2, r4
   357c0:	2301      	movs	r3, #1
   357c2:	3219      	adds	r2, #25
   357c4:	9901      	ldr	r1, [sp, #4]
   357c6:	9800      	ldr	r0, [sp, #0]
   357c8:	9e08      	ldr	r6, [sp, #32]
   357ca:	47b0      	blx	r6
   357cc:	1c43      	adds	r3, r0, #1
   357ce:	d1f0      	bne.n	357b2 <_printf_common+0x86>
   357d0:	2001      	movs	r0, #1
   357d2:	4240      	negs	r0, r0
   357d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   357d6:	2030      	movs	r0, #48	; 0x30
   357d8:	18e1      	adds	r1, r4, r3
   357da:	3143      	adds	r1, #67	; 0x43
   357dc:	7008      	strb	r0, [r1, #0]
   357de:	0021      	movs	r1, r4
   357e0:	1c5a      	adds	r2, r3, #1
   357e2:	3145      	adds	r1, #69	; 0x45
   357e4:	7809      	ldrb	r1, [r1, #0]
   357e6:	18a2      	adds	r2, r4, r2
   357e8:	3243      	adds	r2, #67	; 0x43
   357ea:	3302      	adds	r3, #2
   357ec:	7011      	strb	r1, [r2, #0]
   357ee:	e7c1      	b.n	35774 <_printf_common+0x48>
   357f0:	0022      	movs	r2, r4
   357f2:	2301      	movs	r3, #1
   357f4:	321a      	adds	r2, #26
   357f6:	9901      	ldr	r1, [sp, #4]
   357f8:	9800      	ldr	r0, [sp, #0]
   357fa:	9e08      	ldr	r6, [sp, #32]
   357fc:	47b0      	blx	r6
   357fe:	1c43      	adds	r3, r0, #1
   35800:	d0e6      	beq.n	357d0 <_printf_common+0xa4>
   35802:	3701      	adds	r7, #1
   35804:	e7d1      	b.n	357aa <_printf_common+0x7e>
	...

00035808 <_printf_i>:
   35808:	b5f0      	push	{r4, r5, r6, r7, lr}
   3580a:	b08b      	sub	sp, #44	; 0x2c
   3580c:	9206      	str	r2, [sp, #24]
   3580e:	000a      	movs	r2, r1
   35810:	3243      	adds	r2, #67	; 0x43
   35812:	9307      	str	r3, [sp, #28]
   35814:	9005      	str	r0, [sp, #20]
   35816:	9204      	str	r2, [sp, #16]
   35818:	7e0a      	ldrb	r2, [r1, #24]
   3581a:	000c      	movs	r4, r1
   3581c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3581e:	2a6e      	cmp	r2, #110	; 0x6e
   35820:	d100      	bne.n	35824 <_printf_i+0x1c>
   35822:	e08f      	b.n	35944 <_printf_i+0x13c>
   35824:	d817      	bhi.n	35856 <_printf_i+0x4e>
   35826:	2a63      	cmp	r2, #99	; 0x63
   35828:	d02c      	beq.n	35884 <_printf_i+0x7c>
   3582a:	d808      	bhi.n	3583e <_printf_i+0x36>
   3582c:	2a00      	cmp	r2, #0
   3582e:	d100      	bne.n	35832 <_printf_i+0x2a>
   35830:	e099      	b.n	35966 <_printf_i+0x15e>
   35832:	2a58      	cmp	r2, #88	; 0x58
   35834:	d054      	beq.n	358e0 <_printf_i+0xd8>
   35836:	0026      	movs	r6, r4
   35838:	3642      	adds	r6, #66	; 0x42
   3583a:	7032      	strb	r2, [r6, #0]
   3583c:	e029      	b.n	35892 <_printf_i+0x8a>
   3583e:	2a64      	cmp	r2, #100	; 0x64
   35840:	d001      	beq.n	35846 <_printf_i+0x3e>
   35842:	2a69      	cmp	r2, #105	; 0x69
   35844:	d1f7      	bne.n	35836 <_printf_i+0x2e>
   35846:	6821      	ldr	r1, [r4, #0]
   35848:	681a      	ldr	r2, [r3, #0]
   3584a:	0608      	lsls	r0, r1, #24
   3584c:	d523      	bpl.n	35896 <_printf_i+0x8e>
   3584e:	1d11      	adds	r1, r2, #4
   35850:	6019      	str	r1, [r3, #0]
   35852:	6815      	ldr	r5, [r2, #0]
   35854:	e025      	b.n	358a2 <_printf_i+0x9a>
   35856:	2a73      	cmp	r2, #115	; 0x73
   35858:	d100      	bne.n	3585c <_printf_i+0x54>
   3585a:	e088      	b.n	3596e <_printf_i+0x166>
   3585c:	d808      	bhi.n	35870 <_printf_i+0x68>
   3585e:	2a6f      	cmp	r2, #111	; 0x6f
   35860:	d029      	beq.n	358b6 <_printf_i+0xae>
   35862:	2a70      	cmp	r2, #112	; 0x70
   35864:	d1e7      	bne.n	35836 <_printf_i+0x2e>
   35866:	2220      	movs	r2, #32
   35868:	6809      	ldr	r1, [r1, #0]
   3586a:	430a      	orrs	r2, r1
   3586c:	6022      	str	r2, [r4, #0]
   3586e:	e003      	b.n	35878 <_printf_i+0x70>
   35870:	2a75      	cmp	r2, #117	; 0x75
   35872:	d020      	beq.n	358b6 <_printf_i+0xae>
   35874:	2a78      	cmp	r2, #120	; 0x78
   35876:	d1de      	bne.n	35836 <_printf_i+0x2e>
   35878:	0022      	movs	r2, r4
   3587a:	2178      	movs	r1, #120	; 0x78
   3587c:	3245      	adds	r2, #69	; 0x45
   3587e:	7011      	strb	r1, [r2, #0]
   35880:	4a6c      	ldr	r2, [pc, #432]	; (35a34 <_printf_i+0x22c>)
   35882:	e030      	b.n	358e6 <_printf_i+0xde>
   35884:	000e      	movs	r6, r1
   35886:	681a      	ldr	r2, [r3, #0]
   35888:	3642      	adds	r6, #66	; 0x42
   3588a:	1d11      	adds	r1, r2, #4
   3588c:	6019      	str	r1, [r3, #0]
   3588e:	6813      	ldr	r3, [r2, #0]
   35890:	7033      	strb	r3, [r6, #0]
   35892:	2301      	movs	r3, #1
   35894:	e079      	b.n	3598a <_printf_i+0x182>
   35896:	0649      	lsls	r1, r1, #25
   35898:	d5d9      	bpl.n	3584e <_printf_i+0x46>
   3589a:	1d11      	adds	r1, r2, #4
   3589c:	6019      	str	r1, [r3, #0]
   3589e:	2300      	movs	r3, #0
   358a0:	5ed5      	ldrsh	r5, [r2, r3]
   358a2:	2d00      	cmp	r5, #0
   358a4:	da03      	bge.n	358ae <_printf_i+0xa6>
   358a6:	232d      	movs	r3, #45	; 0x2d
   358a8:	9a04      	ldr	r2, [sp, #16]
   358aa:	426d      	negs	r5, r5
   358ac:	7013      	strb	r3, [r2, #0]
   358ae:	4b62      	ldr	r3, [pc, #392]	; (35a38 <_printf_i+0x230>)
   358b0:	270a      	movs	r7, #10
   358b2:	9303      	str	r3, [sp, #12]
   358b4:	e02f      	b.n	35916 <_printf_i+0x10e>
   358b6:	6820      	ldr	r0, [r4, #0]
   358b8:	6819      	ldr	r1, [r3, #0]
   358ba:	0605      	lsls	r5, r0, #24
   358bc:	d503      	bpl.n	358c6 <_printf_i+0xbe>
   358be:	1d08      	adds	r0, r1, #4
   358c0:	6018      	str	r0, [r3, #0]
   358c2:	680d      	ldr	r5, [r1, #0]
   358c4:	e005      	b.n	358d2 <_printf_i+0xca>
   358c6:	0640      	lsls	r0, r0, #25
   358c8:	d5f9      	bpl.n	358be <_printf_i+0xb6>
   358ca:	680d      	ldr	r5, [r1, #0]
   358cc:	1d08      	adds	r0, r1, #4
   358ce:	6018      	str	r0, [r3, #0]
   358d0:	b2ad      	uxth	r5, r5
   358d2:	4b59      	ldr	r3, [pc, #356]	; (35a38 <_printf_i+0x230>)
   358d4:	2708      	movs	r7, #8
   358d6:	9303      	str	r3, [sp, #12]
   358d8:	2a6f      	cmp	r2, #111	; 0x6f
   358da:	d018      	beq.n	3590e <_printf_i+0x106>
   358dc:	270a      	movs	r7, #10
   358de:	e016      	b.n	3590e <_printf_i+0x106>
   358e0:	3145      	adds	r1, #69	; 0x45
   358e2:	700a      	strb	r2, [r1, #0]
   358e4:	4a54      	ldr	r2, [pc, #336]	; (35a38 <_printf_i+0x230>)
   358e6:	9203      	str	r2, [sp, #12]
   358e8:	681a      	ldr	r2, [r3, #0]
   358ea:	6821      	ldr	r1, [r4, #0]
   358ec:	1d10      	adds	r0, r2, #4
   358ee:	6018      	str	r0, [r3, #0]
   358f0:	6815      	ldr	r5, [r2, #0]
   358f2:	0608      	lsls	r0, r1, #24
   358f4:	d522      	bpl.n	3593c <_printf_i+0x134>
   358f6:	07cb      	lsls	r3, r1, #31
   358f8:	d502      	bpl.n	35900 <_printf_i+0xf8>
   358fa:	2320      	movs	r3, #32
   358fc:	4319      	orrs	r1, r3
   358fe:	6021      	str	r1, [r4, #0]
   35900:	2710      	movs	r7, #16
   35902:	2d00      	cmp	r5, #0
   35904:	d103      	bne.n	3590e <_printf_i+0x106>
   35906:	2320      	movs	r3, #32
   35908:	6822      	ldr	r2, [r4, #0]
   3590a:	439a      	bics	r2, r3
   3590c:	6022      	str	r2, [r4, #0]
   3590e:	0023      	movs	r3, r4
   35910:	2200      	movs	r2, #0
   35912:	3343      	adds	r3, #67	; 0x43
   35914:	701a      	strb	r2, [r3, #0]
   35916:	6863      	ldr	r3, [r4, #4]
   35918:	60a3      	str	r3, [r4, #8]
   3591a:	2b00      	cmp	r3, #0
   3591c:	db5c      	blt.n	359d8 <_printf_i+0x1d0>
   3591e:	2204      	movs	r2, #4
   35920:	6821      	ldr	r1, [r4, #0]
   35922:	4391      	bics	r1, r2
   35924:	6021      	str	r1, [r4, #0]
   35926:	2d00      	cmp	r5, #0
   35928:	d158      	bne.n	359dc <_printf_i+0x1d4>
   3592a:	9e04      	ldr	r6, [sp, #16]
   3592c:	2b00      	cmp	r3, #0
   3592e:	d064      	beq.n	359fa <_printf_i+0x1f2>
   35930:	0026      	movs	r6, r4
   35932:	9b03      	ldr	r3, [sp, #12]
   35934:	3642      	adds	r6, #66	; 0x42
   35936:	781b      	ldrb	r3, [r3, #0]
   35938:	7033      	strb	r3, [r6, #0]
   3593a:	e05e      	b.n	359fa <_printf_i+0x1f2>
   3593c:	0648      	lsls	r0, r1, #25
   3593e:	d5da      	bpl.n	358f6 <_printf_i+0xee>
   35940:	b2ad      	uxth	r5, r5
   35942:	e7d8      	b.n	358f6 <_printf_i+0xee>
   35944:	6809      	ldr	r1, [r1, #0]
   35946:	681a      	ldr	r2, [r3, #0]
   35948:	0608      	lsls	r0, r1, #24
   3594a:	d505      	bpl.n	35958 <_printf_i+0x150>
   3594c:	1d11      	adds	r1, r2, #4
   3594e:	6019      	str	r1, [r3, #0]
   35950:	6813      	ldr	r3, [r2, #0]
   35952:	6962      	ldr	r2, [r4, #20]
   35954:	601a      	str	r2, [r3, #0]
   35956:	e006      	b.n	35966 <_printf_i+0x15e>
   35958:	0649      	lsls	r1, r1, #25
   3595a:	d5f7      	bpl.n	3594c <_printf_i+0x144>
   3595c:	1d11      	adds	r1, r2, #4
   3595e:	6019      	str	r1, [r3, #0]
   35960:	6813      	ldr	r3, [r2, #0]
   35962:	8aa2      	ldrh	r2, [r4, #20]
   35964:	801a      	strh	r2, [r3, #0]
   35966:	2300      	movs	r3, #0
   35968:	9e04      	ldr	r6, [sp, #16]
   3596a:	6123      	str	r3, [r4, #16]
   3596c:	e054      	b.n	35a18 <_printf_i+0x210>
   3596e:	681a      	ldr	r2, [r3, #0]
   35970:	1d11      	adds	r1, r2, #4
   35972:	6019      	str	r1, [r3, #0]
   35974:	6816      	ldr	r6, [r2, #0]
   35976:	2100      	movs	r1, #0
   35978:	6862      	ldr	r2, [r4, #4]
   3597a:	0030      	movs	r0, r6
   3597c:	f000 f922 	bl	35bc4 <memchr>
   35980:	2800      	cmp	r0, #0
   35982:	d001      	beq.n	35988 <_printf_i+0x180>
   35984:	1b80      	subs	r0, r0, r6
   35986:	6060      	str	r0, [r4, #4]
   35988:	6863      	ldr	r3, [r4, #4]
   3598a:	6123      	str	r3, [r4, #16]
   3598c:	2300      	movs	r3, #0
   3598e:	9a04      	ldr	r2, [sp, #16]
   35990:	7013      	strb	r3, [r2, #0]
   35992:	e041      	b.n	35a18 <_printf_i+0x210>
   35994:	6923      	ldr	r3, [r4, #16]
   35996:	0032      	movs	r2, r6
   35998:	9906      	ldr	r1, [sp, #24]
   3599a:	9805      	ldr	r0, [sp, #20]
   3599c:	9d07      	ldr	r5, [sp, #28]
   3599e:	47a8      	blx	r5
   359a0:	1c43      	adds	r3, r0, #1
   359a2:	d043      	beq.n	35a2c <_printf_i+0x224>
   359a4:	6823      	ldr	r3, [r4, #0]
   359a6:	2500      	movs	r5, #0
   359a8:	079b      	lsls	r3, r3, #30
   359aa:	d40f      	bmi.n	359cc <_printf_i+0x1c4>
   359ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   359ae:	68e0      	ldr	r0, [r4, #12]
   359b0:	4298      	cmp	r0, r3
   359b2:	da3d      	bge.n	35a30 <_printf_i+0x228>
   359b4:	0018      	movs	r0, r3
   359b6:	e03b      	b.n	35a30 <_printf_i+0x228>
   359b8:	0022      	movs	r2, r4
   359ba:	2301      	movs	r3, #1
   359bc:	3219      	adds	r2, #25
   359be:	9906      	ldr	r1, [sp, #24]
   359c0:	9805      	ldr	r0, [sp, #20]
   359c2:	9e07      	ldr	r6, [sp, #28]
   359c4:	47b0      	blx	r6
   359c6:	1c43      	adds	r3, r0, #1
   359c8:	d030      	beq.n	35a2c <_printf_i+0x224>
   359ca:	3501      	adds	r5, #1
   359cc:	68e3      	ldr	r3, [r4, #12]
   359ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
   359d0:	1a9b      	subs	r3, r3, r2
   359d2:	429d      	cmp	r5, r3
   359d4:	dbf0      	blt.n	359b8 <_printf_i+0x1b0>
   359d6:	e7e9      	b.n	359ac <_printf_i+0x1a4>
   359d8:	2d00      	cmp	r5, #0
   359da:	d0a9      	beq.n	35930 <_printf_i+0x128>
   359dc:	9e04      	ldr	r6, [sp, #16]
   359de:	0028      	movs	r0, r5
   359e0:	0039      	movs	r1, r7
   359e2:	f7fc ff95 	bl	32910 <__aeabi_uidivmod>
   359e6:	9b03      	ldr	r3, [sp, #12]
   359e8:	3e01      	subs	r6, #1
   359ea:	5c5b      	ldrb	r3, [r3, r1]
   359ec:	0028      	movs	r0, r5
   359ee:	7033      	strb	r3, [r6, #0]
   359f0:	0039      	movs	r1, r7
   359f2:	f7fc ff07 	bl	32804 <__udivsi3>
   359f6:	1e05      	subs	r5, r0, #0
   359f8:	d1f1      	bne.n	359de <_printf_i+0x1d6>
   359fa:	2f08      	cmp	r7, #8
   359fc:	d109      	bne.n	35a12 <_printf_i+0x20a>
   359fe:	6823      	ldr	r3, [r4, #0]
   35a00:	07db      	lsls	r3, r3, #31
   35a02:	d506      	bpl.n	35a12 <_printf_i+0x20a>
   35a04:	6863      	ldr	r3, [r4, #4]
   35a06:	6922      	ldr	r2, [r4, #16]
   35a08:	4293      	cmp	r3, r2
   35a0a:	dc02      	bgt.n	35a12 <_printf_i+0x20a>
   35a0c:	2330      	movs	r3, #48	; 0x30
   35a0e:	3e01      	subs	r6, #1
   35a10:	7033      	strb	r3, [r6, #0]
   35a12:	9b04      	ldr	r3, [sp, #16]
   35a14:	1b9b      	subs	r3, r3, r6
   35a16:	6123      	str	r3, [r4, #16]
   35a18:	9b07      	ldr	r3, [sp, #28]
   35a1a:	aa09      	add	r2, sp, #36	; 0x24
   35a1c:	9300      	str	r3, [sp, #0]
   35a1e:	0021      	movs	r1, r4
   35a20:	9b06      	ldr	r3, [sp, #24]
   35a22:	9805      	ldr	r0, [sp, #20]
   35a24:	f7ff fe82 	bl	3572c <_printf_common>
   35a28:	1c43      	adds	r3, r0, #1
   35a2a:	d1b3      	bne.n	35994 <_printf_i+0x18c>
   35a2c:	2001      	movs	r0, #1
   35a2e:	4240      	negs	r0, r0
   35a30:	b00b      	add	sp, #44	; 0x2c
   35a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35a34:	0003a134 	.word	0x0003a134
   35a38:	0003a123 	.word	0x0003a123

00035a3c <__sread>:
   35a3c:	b570      	push	{r4, r5, r6, lr}
   35a3e:	000c      	movs	r4, r1
   35a40:	250e      	movs	r5, #14
   35a42:	5f49      	ldrsh	r1, [r1, r5]
   35a44:	f000 f8f0 	bl	35c28 <_read_r>
   35a48:	2800      	cmp	r0, #0
   35a4a:	db03      	blt.n	35a54 <__sread+0x18>
   35a4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   35a4e:	181b      	adds	r3, r3, r0
   35a50:	6563      	str	r3, [r4, #84]	; 0x54
   35a52:	bd70      	pop	{r4, r5, r6, pc}
   35a54:	89a3      	ldrh	r3, [r4, #12]
   35a56:	4a02      	ldr	r2, [pc, #8]	; (35a60 <__sread+0x24>)
   35a58:	4013      	ands	r3, r2
   35a5a:	81a3      	strh	r3, [r4, #12]
   35a5c:	e7f9      	b.n	35a52 <__sread+0x16>
   35a5e:	46c0      	nop			; (mov r8, r8)
   35a60:	ffffefff 	.word	0xffffefff

00035a64 <__swrite>:
   35a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35a66:	001f      	movs	r7, r3
   35a68:	898b      	ldrh	r3, [r1, #12]
   35a6a:	0005      	movs	r5, r0
   35a6c:	000c      	movs	r4, r1
   35a6e:	0016      	movs	r6, r2
   35a70:	05db      	lsls	r3, r3, #23
   35a72:	d505      	bpl.n	35a80 <__swrite+0x1c>
   35a74:	230e      	movs	r3, #14
   35a76:	5ec9      	ldrsh	r1, [r1, r3]
   35a78:	2200      	movs	r2, #0
   35a7a:	2302      	movs	r3, #2
   35a7c:	f000 f88e 	bl	35b9c <_lseek_r>
   35a80:	89a3      	ldrh	r3, [r4, #12]
   35a82:	4a05      	ldr	r2, [pc, #20]	; (35a98 <__swrite+0x34>)
   35a84:	0028      	movs	r0, r5
   35a86:	4013      	ands	r3, r2
   35a88:	81a3      	strh	r3, [r4, #12]
   35a8a:	0032      	movs	r2, r6
   35a8c:	230e      	movs	r3, #14
   35a8e:	5ee1      	ldrsh	r1, [r4, r3]
   35a90:	003b      	movs	r3, r7
   35a92:	f000 f839 	bl	35b08 <_write_r>
   35a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35a98:	ffffefff 	.word	0xffffefff

00035a9c <__sseek>:
   35a9c:	b570      	push	{r4, r5, r6, lr}
   35a9e:	000c      	movs	r4, r1
   35aa0:	250e      	movs	r5, #14
   35aa2:	5f49      	ldrsh	r1, [r1, r5]
   35aa4:	f000 f87a 	bl	35b9c <_lseek_r>
   35aa8:	89a3      	ldrh	r3, [r4, #12]
   35aaa:	1c42      	adds	r2, r0, #1
   35aac:	d103      	bne.n	35ab6 <__sseek+0x1a>
   35aae:	4a05      	ldr	r2, [pc, #20]	; (35ac4 <__sseek+0x28>)
   35ab0:	4013      	ands	r3, r2
   35ab2:	81a3      	strh	r3, [r4, #12]
   35ab4:	bd70      	pop	{r4, r5, r6, pc}
   35ab6:	2280      	movs	r2, #128	; 0x80
   35ab8:	0152      	lsls	r2, r2, #5
   35aba:	4313      	orrs	r3, r2
   35abc:	81a3      	strh	r3, [r4, #12]
   35abe:	6560      	str	r0, [r4, #84]	; 0x54
   35ac0:	e7f8      	b.n	35ab4 <__sseek+0x18>
   35ac2:	46c0      	nop			; (mov r8, r8)
   35ac4:	ffffefff 	.word	0xffffefff

00035ac8 <__sclose>:
   35ac8:	b510      	push	{r4, lr}
   35aca:	230e      	movs	r3, #14
   35acc:	5ec9      	ldrsh	r1, [r1, r3]
   35ace:	f000 f82f 	bl	35b30 <_close_r>
   35ad2:	bd10      	pop	{r4, pc}

00035ad4 <strchr>:
   35ad4:	b2c9      	uxtb	r1, r1
   35ad6:	7803      	ldrb	r3, [r0, #0]
   35ad8:	2b00      	cmp	r3, #0
   35ada:	d004      	beq.n	35ae6 <strchr+0x12>
   35adc:	4299      	cmp	r1, r3
   35ade:	d100      	bne.n	35ae2 <strchr+0xe>
   35ae0:	4770      	bx	lr
   35ae2:	3001      	adds	r0, #1
   35ae4:	e7f7      	b.n	35ad6 <strchr+0x2>
   35ae6:	424b      	negs	r3, r1
   35ae8:	4159      	adcs	r1, r3
   35aea:	4249      	negs	r1, r1
   35aec:	4008      	ands	r0, r1
   35aee:	e7f7      	b.n	35ae0 <strchr+0xc>

00035af0 <__ascii_wctomb>:
   35af0:	1e0b      	subs	r3, r1, #0
   35af2:	d004      	beq.n	35afe <__ascii_wctomb+0xe>
   35af4:	2aff      	cmp	r2, #255	; 0xff
   35af6:	d904      	bls.n	35b02 <__ascii_wctomb+0x12>
   35af8:	238a      	movs	r3, #138	; 0x8a
   35afa:	6003      	str	r3, [r0, #0]
   35afc:	3b8b      	subs	r3, #139	; 0x8b
   35afe:	0018      	movs	r0, r3
   35b00:	4770      	bx	lr
   35b02:	700a      	strb	r2, [r1, #0]
   35b04:	2301      	movs	r3, #1
   35b06:	e7fa      	b.n	35afe <__ascii_wctomb+0xe>

00035b08 <_write_r>:
   35b08:	b570      	push	{r4, r5, r6, lr}
   35b0a:	0005      	movs	r5, r0
   35b0c:	0008      	movs	r0, r1
   35b0e:	0011      	movs	r1, r2
   35b10:	2200      	movs	r2, #0
   35b12:	4c06      	ldr	r4, [pc, #24]	; (35b2c <_write_r+0x24>)
   35b14:	6022      	str	r2, [r4, #0]
   35b16:	001a      	movs	r2, r3
   35b18:	f7f5 fa22 	bl	2af60 <_write>
   35b1c:	1c43      	adds	r3, r0, #1
   35b1e:	d103      	bne.n	35b28 <_write_r+0x20>
   35b20:	6823      	ldr	r3, [r4, #0]
   35b22:	2b00      	cmp	r3, #0
   35b24:	d000      	beq.n	35b28 <_write_r+0x20>
   35b26:	602b      	str	r3, [r5, #0]
   35b28:	bd70      	pop	{r4, r5, r6, pc}
   35b2a:	46c0      	nop			; (mov r8, r8)
   35b2c:	20005c8c 	.word	0x20005c8c

00035b30 <_close_r>:
   35b30:	2300      	movs	r3, #0
   35b32:	b570      	push	{r4, r5, r6, lr}
   35b34:	4c06      	ldr	r4, [pc, #24]	; (35b50 <_close_r+0x20>)
   35b36:	0005      	movs	r5, r0
   35b38:	0008      	movs	r0, r1
   35b3a:	6023      	str	r3, [r4, #0]
   35b3c:	f7f5 fa64 	bl	2b008 <_close>
   35b40:	1c43      	adds	r3, r0, #1
   35b42:	d103      	bne.n	35b4c <_close_r+0x1c>
   35b44:	6823      	ldr	r3, [r4, #0]
   35b46:	2b00      	cmp	r3, #0
   35b48:	d000      	beq.n	35b4c <_close_r+0x1c>
   35b4a:	602b      	str	r3, [r5, #0]
   35b4c:	bd70      	pop	{r4, r5, r6, pc}
   35b4e:	46c0      	nop			; (mov r8, r8)
   35b50:	20005c8c 	.word	0x20005c8c

00035b54 <_fstat_r>:
   35b54:	2300      	movs	r3, #0
   35b56:	b570      	push	{r4, r5, r6, lr}
   35b58:	4c06      	ldr	r4, [pc, #24]	; (35b74 <_fstat_r+0x20>)
   35b5a:	0005      	movs	r5, r0
   35b5c:	0008      	movs	r0, r1
   35b5e:	0011      	movs	r1, r2
   35b60:	6023      	str	r3, [r4, #0]
   35b62:	f7f5 fa5b 	bl	2b01c <_fstat>
   35b66:	1c43      	adds	r3, r0, #1
   35b68:	d103      	bne.n	35b72 <_fstat_r+0x1e>
   35b6a:	6823      	ldr	r3, [r4, #0]
   35b6c:	2b00      	cmp	r3, #0
   35b6e:	d000      	beq.n	35b72 <_fstat_r+0x1e>
   35b70:	602b      	str	r3, [r5, #0]
   35b72:	bd70      	pop	{r4, r5, r6, pc}
   35b74:	20005c8c 	.word	0x20005c8c

00035b78 <_isatty_r>:
   35b78:	2300      	movs	r3, #0
   35b7a:	b570      	push	{r4, r5, r6, lr}
   35b7c:	4c06      	ldr	r4, [pc, #24]	; (35b98 <_isatty_r+0x20>)
   35b7e:	0005      	movs	r5, r0
   35b80:	0008      	movs	r0, r1
   35b82:	6023      	str	r3, [r4, #0]
   35b84:	f7f5 fa58 	bl	2b038 <_isatty>
   35b88:	1c43      	adds	r3, r0, #1
   35b8a:	d103      	bne.n	35b94 <_isatty_r+0x1c>
   35b8c:	6823      	ldr	r3, [r4, #0]
   35b8e:	2b00      	cmp	r3, #0
   35b90:	d000      	beq.n	35b94 <_isatty_r+0x1c>
   35b92:	602b      	str	r3, [r5, #0]
   35b94:	bd70      	pop	{r4, r5, r6, pc}
   35b96:	46c0      	nop			; (mov r8, r8)
   35b98:	20005c8c 	.word	0x20005c8c

00035b9c <_lseek_r>:
   35b9c:	b570      	push	{r4, r5, r6, lr}
   35b9e:	0005      	movs	r5, r0
   35ba0:	0008      	movs	r0, r1
   35ba2:	0011      	movs	r1, r2
   35ba4:	2200      	movs	r2, #0
   35ba6:	4c06      	ldr	r4, [pc, #24]	; (35bc0 <_lseek_r+0x24>)
   35ba8:	6022      	str	r2, [r4, #0]
   35baa:	001a      	movs	r2, r3
   35bac:	f7f5 fa4d 	bl	2b04a <_lseek>
   35bb0:	1c43      	adds	r3, r0, #1
   35bb2:	d103      	bne.n	35bbc <_lseek_r+0x20>
   35bb4:	6823      	ldr	r3, [r4, #0]
   35bb6:	2b00      	cmp	r3, #0
   35bb8:	d000      	beq.n	35bbc <_lseek_r+0x20>
   35bba:	602b      	str	r3, [r5, #0]
   35bbc:	bd70      	pop	{r4, r5, r6, pc}
   35bbe:	46c0      	nop			; (mov r8, r8)
   35bc0:	20005c8c 	.word	0x20005c8c

00035bc4 <memchr>:
   35bc4:	b2c9      	uxtb	r1, r1
   35bc6:	1882      	adds	r2, r0, r2
   35bc8:	4290      	cmp	r0, r2
   35bca:	d101      	bne.n	35bd0 <memchr+0xc>
   35bcc:	2000      	movs	r0, #0
   35bce:	4770      	bx	lr
   35bd0:	7803      	ldrb	r3, [r0, #0]
   35bd2:	428b      	cmp	r3, r1
   35bd4:	d0fb      	beq.n	35bce <memchr+0xa>
   35bd6:	3001      	adds	r0, #1
   35bd8:	e7f6      	b.n	35bc8 <memchr+0x4>

00035bda <_realloc_r>:
   35bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35bdc:	0007      	movs	r7, r0
   35bde:	000d      	movs	r5, r1
   35be0:	0016      	movs	r6, r2
   35be2:	2900      	cmp	r1, #0
   35be4:	d105      	bne.n	35bf2 <_realloc_r+0x18>
   35be6:	0011      	movs	r1, r2
   35be8:	f7fe fe9e 	bl	34928 <_malloc_r>
   35bec:	0004      	movs	r4, r0
   35bee:	0020      	movs	r0, r4
   35bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35bf2:	2a00      	cmp	r2, #0
   35bf4:	d103      	bne.n	35bfe <_realloc_r+0x24>
   35bf6:	f7fe fe4d 	bl	34894 <_free_r>
   35bfa:	0034      	movs	r4, r6
   35bfc:	e7f7      	b.n	35bee <_realloc_r+0x14>
   35bfe:	f000 f827 	bl	35c50 <_malloc_usable_size_r>
   35c02:	002c      	movs	r4, r5
   35c04:	4286      	cmp	r6, r0
   35c06:	d9f2      	bls.n	35bee <_realloc_r+0x14>
   35c08:	0031      	movs	r1, r6
   35c0a:	0038      	movs	r0, r7
   35c0c:	f7fe fe8c 	bl	34928 <_malloc_r>
   35c10:	1e04      	subs	r4, r0, #0
   35c12:	d0ec      	beq.n	35bee <_realloc_r+0x14>
   35c14:	0029      	movs	r1, r5
   35c16:	0032      	movs	r2, r6
   35c18:	f7fe fe18 	bl	3484c <memcpy>
   35c1c:	0029      	movs	r1, r5
   35c1e:	0038      	movs	r0, r7
   35c20:	f7fe fe38 	bl	34894 <_free_r>
   35c24:	e7e3      	b.n	35bee <_realloc_r+0x14>
	...

00035c28 <_read_r>:
   35c28:	b570      	push	{r4, r5, r6, lr}
   35c2a:	0005      	movs	r5, r0
   35c2c:	0008      	movs	r0, r1
   35c2e:	0011      	movs	r1, r2
   35c30:	2200      	movs	r2, #0
   35c32:	4c06      	ldr	r4, [pc, #24]	; (35c4c <_read_r+0x24>)
   35c34:	6022      	str	r2, [r4, #0]
   35c36:	001a      	movs	r2, r3
   35c38:	f7f5 f968 	bl	2af0c <_read>
   35c3c:	1c43      	adds	r3, r0, #1
   35c3e:	d103      	bne.n	35c48 <_read_r+0x20>
   35c40:	6823      	ldr	r3, [r4, #0]
   35c42:	2b00      	cmp	r3, #0
   35c44:	d000      	beq.n	35c48 <_read_r+0x20>
   35c46:	602b      	str	r3, [r5, #0]
   35c48:	bd70      	pop	{r4, r5, r6, pc}
   35c4a:	46c0      	nop			; (mov r8, r8)
   35c4c:	20005c8c 	.word	0x20005c8c

00035c50 <_malloc_usable_size_r>:
   35c50:	1f0b      	subs	r3, r1, #4
   35c52:	681b      	ldr	r3, [r3, #0]
   35c54:	1f18      	subs	r0, r3, #4
   35c56:	2b00      	cmp	r3, #0
   35c58:	da01      	bge.n	35c5e <_malloc_usable_size_r+0xe>
   35c5a:	580b      	ldr	r3, [r1, r0]
   35c5c:	18c0      	adds	r0, r0, r3
   35c5e:	4770      	bx	lr

00035c60 <sysfont_glyphs>:
   35c60:	0000 0000 0000 2000 2020 2020 2000 5050     .......     . PP
   35c70:	0050 0000 5000 f850 f850 5050 7820 70a0     P....PP.P.PP x.p
   35c80:	f028 c020 10c8 4020 1898 9060 40a0 90a8     (. ... @..`..@..
   35c90:	6068 4020 0000 0000 2010 4040 2040 4010     h` @..... @@@ .@
   35ca0:	1020 1010 4020 5000 f820 5020 0000 2020      ... @.P . P..  
   35cb0:	20f8 0020 0000 0000 2060 0040 0000 00f8     .  .....` @.....
   35cc0:	0000 0000 0000 6000 0060 1008 4020 0080     .......``... @..
   35cd0:	8870 a898 88c8 2070 2060 2020 7020 8870     p.....p `    pp.
   35ce0:	1008 4020 f8f8 2010 0810 7088 3010 9050     .. @... ...p.0P.
   35cf0:	10f8 f810 f080 0808 7088 4030 f080 8888     .........p0@....
   35d00:	f870 1008 4020 4040 8870 7088 8888 7070     p... @@@p..p..pp
   35d10:	8888 0878 6010 6000 0060 6060 0000 6060     ..x..`.``.``..``
   35d20:	6000 4020 1008 4020 1020 0008 f800 f800     .` @.. @ .......
   35d30:	0000 4080 1020 4020 7080 0888 2010 2000     ...@ . @.p... . 
   35d40:	8870 6808 a8a8 7070 8888 f888 8888 88f0     p..h..pp........
   35d50:	f088 8888 70f0 8088 8080 7088 90e0 8888     .....p.....p....
   35d60:	9088 f8e0 8080 80f0 f880 80f8 e080 8080     ................
   35d70:	7080 8088 9880 7088 8888 f888 8888 7088     .p.....p.......p
   35d80:	2020 2020 7020 1038 1010 9010 8860 a090          p8.....`...
   35d90:	a0c0 8890 8080 8080 8080 88f8 a8d8 8888     ................
   35da0:	8888 8888 a8c8 8898 7088 8888 8888 7088     .........p.....p
   35db0:	88f0 f088 8080 7080 8888 a888 6890 88f0     .......p.....h..
   35dc0:	f088 90a0 7888 8080 0870 f008 20f8 2020     .....x..p....   
   35dd0:	2020 8820 8888 8888 7088 8888 8888 5088        ......p.....P
   35de0:	8820 8888 a8a8 88d8 8888 2050 8850 8888      .........P P...
   35df0:	5088 2020 2020 08f8 2010 8040 38f8 2020     .P    ... @..8  
   35e00:	2020 3820 8000 2040 0810 e000 2020 2020        8..@ ....    
   35e10:	e020 5020 0088 0000 0000 0000 0000 f800      . P............
   35e20:	2040 0010 0000 0000 7000 7808 7888 8080     @ .......p.x.x..
   35e30:	c8b0 8888 00f0 7000 8080 7088 0808 9868     .......p...p..h.
   35e40:	8888 0078 7000 f888 7080 4830 e040 4040     ..x..p...p0H@.@@
   35e50:	0040 7800 7888 3008 8080 c8b0 8888 2088     @..x.x.0....... 
   35e60:	6000 2020 7020 0010 1030 9010 4060 4840     .`   p..0...`@@H
   35e70:	6050 4850 2060 2020 2020 0070 d000 a8a8     P`PH`     p.....
   35e80:	8888 0000 c8b0 8888 0088 7000 8888 7088     ...........p...p
   35e90:	0000 88f0 80f0 0080 6800 7898 0808 0000     .........h.x....
   35ea0:	c8b0 8080 0080 7000 7080 f008 4040 40e0     .......p.p..@@.@
   35eb0:	4840 0030 8800 8888 6898 0000 8888 5088     @H0......h.....P
   35ec0:	0020 8800 a888 50a8 0000 5088 5020 0088      ......P...P P..
   35ed0:	8800 7888 7008 0000 10f8 4020 10f8 2020     ...x.p.... @..  
   35ee0:	2040 1020 2020 2020 2020 4020 2020 2010     @  .       @  . 
   35ef0:	4020 0000                                    @..

00035ef4 <pcWelcomeMessage>:
   35ef4:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   35f04:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   35f14:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   35f24:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   35f34:	000a 0000 6d69 0075 6d69 3a75 5220 7465     ....imu.imu: Ret
   35f44:	7275 736e 6320 7275 6572 746e 7820 202c     urns current x, 
   35f54:	2c79 7a20 6120 6363 6c65 7265 7461 6f69     y, z acceleratio
   35f64:	206e 7266 6d6f 7420 6568 4920 554d 0a0d     n from the IMU..
   35f74:	0000 0000 7766 0000 7766 203a 6f44 6e77     ....fw..fw: Down
   35f84:	6f6c 6461 6120 6620 6c69 2065 6e61 2064     load a file and 
   35f94:	6570 6672 726f 206d 6e61 4620 2057 7075     perform an FW up
   35fa4:	6164 6574 0a0d 0000 6572 6573 0074 0000     date....reset...
   35fb4:	6572 6573 3a74 5220 7365 7465 2073 6874     reset: Resets th
   35fc4:	2065 6564 6976 6563 0a0d 0000 3269 0063     e device....i2c.
   35fd4:	3269 3a63 5320 6163 736e 4920 4332 6220     i2c: Scans I2C b
   35fe4:	7375 0a0d 0000 0000 7067 0073 7067 3a73     us......gps.gps:
   35ff4:	5220 7465 7275 736e 6320 7275 6572 746e      Returns current
   36004:	6c20 7461 7469 6475 2065 6e61 2064 6f6c      latitude and lo
   36014:	676e 7469 6475 2065 7266 6d6f 7420 6568     ngitude from the
   36024:	4720 5350 0a0d 0a0d 0000 0000 6c63 0073      GPS........cls.
   36034:	6c63 3a73 4320 656c 7261 2073 6874 2065     cls: Clears the 
   36044:	6574 6d72 6e69 6c61 7320 7263 6565 0d6e     terminal screen.
   36054:	000a 0000 6f43 6c75 2064 6f6e 2074 6c61     ....Could not al
   36064:	6f6c 6163 6574 7320 6d65 7061 6f68 6572     locate semaphore
   36074:	0a0d 0000 0a0d 0000 616f 0000 6325 325b     ........oa..%c[2
   36084:	0d4b 003e 2008 0008 6341 6563 656c 6172     K.>.. ..Accelera
   36094:	6974 6e6f 5b20 676d 3a5d 2058 6425 5909     tion [mg]:X %d.Y
   360a4:	2520 0964 205a 6425 0a0d 0000 6f4e 6420      %d.Z %d....No d
   360b4:	7461 2061 6572 6461 2179 5320 6e65 6964     ata ready! Sendi
   360c4:	676e 6420 6d75 796d 6420 7461 2061 0a0d     ng dummy data ..
   360d4:	0000 0000 6325 325b 004a 0000 7453 6475     ....%c[2J...Stud
   360e4:	6e65 7374 7420 206f 6966 6c6c 6f20 7475     ents to fill out
   360f4:	0021 0000 7542 7474 6e6f 2320 6425 6920     !...Button #%d i
   36104:	2073 6572 656c 7361 6465 0a0d 0000 0000     s released......
   36114:	7542 7474 6e6f 2320 6425 6920 2073 7270     Button #%d is pr
   36124:	7365 6573 0d64 000a 6553 736e 726f 4520     essed...Sensor E
   36134:	7272 726f 2520 2164 0a0d 0000 6944 7473     rror %d!....Dist
   36144:	6e61 6563 203a 6425 6d20 0d6d 000a 0000     ance: %d mm.....
   36154:	6944 7473 6e61 6563 4420 7461 2061 514d     Distance Data MQ
   36164:	5454 5020 736f 0d74 000a 0000 7544 6d6d     TT Post.....Dumm
   36174:	2079 6147 656d 4420 7461 2061 514d 5454     y Game Data MQTT
   36184:	5020 736f 0d74 000a 2030 3120 2020 2032      Post...0  1  2 
   36194:	3320 2020 2034 3520 2020 2036 3720 2020      3  4  5  6  7  
   361a4:	2038 3920 2020 2061 6220 2020 2063 6420     8  9  a  b  c  d
   361b4:	2020 2065 6620 0a0d 0000 0000 3025 7832       e  f......%02x
   361c4:	203a 0000 3025 7832 0020 0000 6441 6564     : ..%02x ...Adde
   361d4:	2064 7962 4420 7265 6b65 202c 4254 2144     d by Derek, TBD!
   361e4:	0a0d 0a0d 0000 0000                         ........

000361ec <xImuGetCommand>:
   361ec:	5f38 0003 5f3c 0003 3b8d 0001 0000 0000     8_..<_...;......

000361fc <xOTAUCommand>:
   361fc:	5f78 0003 5f7c 0003 3d39 0001 0000 0000     x_..|_..9=......

0003620c <xResetCommand>:
   3620c:	5fac 0003 5fb4 0003 3d59 0001 0000 0000     ._..._..Y=......

0003621c <xI2cScan>:
   3621c:	5fd0 0003 5fd4 0003 3d79 0001 0000 0000     ._..._..y=......

0003622c <xGpsGetCommand>:
   3622c:	5fec 0003 5ff0 0003 3ea1 0001 0000 0000     ._..._...>......

0003623c <xClearScreen>:
   3623c:	6030 0003 6034 0003 3cf1 0001 0000 0000     0`..4`...<......

0003624c <msgKeypadGetCount>:
   3624c:	0410 0000 7245 6f72 2072 6e69 7469 6169     ....Error initia
   3625c:	696c 697a 676e 5320 6565 6173 2177 722f     lizing Seesaw!/r
   3626c:	6e2f 0000 7245 6f72 2f72 2f72 006e 0000     /n..Error/r/n...
   3627c:	6f46 6e75 2064 6553 7365 7761 2f21 2f72     Found Seesaw!/r/
   3628c:	006e 0000 6f43 6c75 2064 6f6e 2074 7277     n...Could not wr
   3629c:	7469 2065 6553 7365 7761 7020 6e69 2f21     ite Seesaw pin!/
   362ac:	2f72 006e 6f43 6c75 2064 6f6e 2074 6573     r/n.Could not se
   362bc:	2074 6573 7365 7761 4e20 6f65 6970 6578     t seesaw Neopixe
   362cc:	206c 7073 6565 2164 722f 6e2f 0000 0000     l speed!/r/n....
   362dc:	6f43 6c75 2064 6f6e 2074 6573 2074 6573     Could not set se
   362ec:	7365 7761 4e20 6f65 6970 6578 206c 756e     esaw Neopixel nu
   362fc:	626d 7265 6f20 2066 6564 6976 6563 2f73     mber of devices/
   3630c:	2f72 006e 7245 6f72 2072 6572 6461 6e69     r/n.Error readin
   3631c:	2067 6553 7365 7761 6320 756f 746e 2173     g Seesaw counts!
   3632c:	722f 6e2f 0000 0000 1010 0000 050e 0000     /r/n............
   3633c:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   3634c:	696c 657a 4b20 7965 6170 2164 722f 6e2f     lize Keypad!/r/n
   3635c:	0000 0000 4955 5420 7361 206b 7453 7261     ....UI Task Star
   3636c:	6574 2164 0a0d 0000 5345 3545 3631 0000     ted!....ESE516..
   3637c:	6f49 7254 6361 696b 676e 0000 6544 6572     IoTracking..Dere
   3638c:	206b 685a 756f 0000 6557 6869 6f61 4820     k Zhou..Weihao H
   3639c:	002e 0000                                   ....

000363a0 <main_mqtt_broker>:
   363a0:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   363b0:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   363c0:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   363d0:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   363e0:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   363f0:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   36400:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   36410:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   36420:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   36430:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   36440:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   36450:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   36460:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   36470:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   36480:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   36490:	2e2e 0d2e 000a 0000 7468 7074 3a73 2f2f     ........https://
   364a0:	7777 2e77 6573 7361 752e 6570 6e6e 652e     www.seas.upenn.e
   364b0:	7564 7e2f 6564 6572 7a6b 796d 432f 7061     du/~derekzmy/Cap
   364c0:	7574 6572 502e 474e 0000 0000 7473 726f     ture.PNG....stor
   364d0:	5f65 6966 656c 705f 6361 656b 3a74 6520     e_file_packet: e
   364e0:	706d 7974 6420 7461 2e61 0a0d 0000 0000     mpty data.......
   364f0:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   36500:	3a74 6620 6c69 2065 616e 656d 6920 2073     t: file name is 
   36510:	6e69 6176 696c 2e64 4420 776f 6c6e 616f     invalid. Downloa
   36520:	2064 6163 636e 6c65 6465 0d2e 000a 0000     d canceled......
   36530:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   36540:	3a74 6320 6572 7461 6e69 2067 6966 656c     t: creating file
   36550:	5b20 7325 0d5d 000a 7473 726f 5f65 6966      [%s]...store_fi
   36560:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   36570:	7263 6165 6974 6e6f 6520 7272 726f 2021     creation error! 
   36580:	6572 3a74 6425 0a0d 0000 0000 7473 726f     ret:%d......stor
   36590:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   365a0:	6c69 2065 7277 7469 2065 7265 6f72 2c72     ile write error,
   365b0:	6420 776f 6c6e 616f 2064 6163 636e 6c65      download cancel
   365c0:	6465 0d2e 000a 0000 7473 726f 5f65 6966     ed......store_fi
   365d0:	656c 705f 6361 656b 3a74 7220 6365 6965     le_packet: recei
   365e0:	6576 5b64 6c25 5d75 202c 6966 656c 7320     ved[%lu], file s
   365f0:	7a69 5b65 6c25 5d75 0a0d 0000 7473 726f     ize[%lu]....stor
   36600:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   36610:	6c69 2065 6f64 6e77 6f6c 6461 6465 7320     ile downloaded s
   36620:	6375 6563 7373 7566 6c6c 2e79 0a0d 0000     uccessfully.....
   36630:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   36640:	6162 6b63 203a 5448 5054 6320 696c 6e65     back: HTTP clien
   36650:	2074 6f73 6b63 7465 6320 6e6f 656e 7463     t socket connect
   36660:	6465 0d2e 000a 0000 7468 7074 635f 696c     ed......http_cli
   36670:	6e65 5f74 6163 6c6c 6162 6b63 203a 6572     ent_callback: re
   36680:	7571 7365 2074 6f63 706d 656c 6574 2e64     quest completed.
   36690:	0a0d 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   366a0:	6163 6c6c 6162 6b63 203a 6572 6563 7669     callback: receiv
   366b0:	6465 7220 7365 6f70 736e 2065 7525 6420     ed response %u d
   366c0:	7461 2061 6973 657a 2520 0d75 000a 0000     ata size %u.....
   366d0:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   366e0:	6162 6b63 203a 6964 6373 6e6f 656e 7463     back: disconnect
   366f0:	6f69 206e 6572 7361 6e6f 253a 0d64 000a     ion reason:%d...
   36700:	6572 6f73 766c 5f65 6263 203a 7325 4920     resolve_cb: %s I
   36710:	2050 6461 7264 7365 2073 7369 2520 2e64     P address is %d.
   36720:	6425 252e 2e64 6425 0a0d 0a0d 0000 0000     %d.%d.%d........
   36730:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
   36740:	5f49 4f43 4e4e 4345 4554 0d44 000a 0000     I_CONNECTED.....
   36750:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
   36760:	5f49 4944 4353 4e4f 454e 5443 4445 0a0d     I_DISCONNECTED..
   36770:	0000 0000 3931 3739 3131 3530 0000 0000     ....19971105....
   36780:	6564 6572 006b 0000 6977 6966 635f 3a62     derek...wifi_cb:
   36790:	4920 2050 6461 7264 7365 2073 7369 2520      IP address is %
   367a0:	2e75 7525 252e 2e75 7525 0a0d 0000 0000     u.%u.%u.%u......
   367b0:	7245 6f72 2072 6f63 6e6e 6365 6974 676e     Error connecting
   367c0:	7420 206f 514d 5454 4220 6f72 656b 2172      to MQTT Broker!
   367d0:	0a0d 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   367e0:	203a 6c70 6165 6573 7020 756c 2067 6e61     : please plug an
   367f0:	5320 2f44 4d4d 2043 6163 6472 6920 206e      SD/MMC card in 
   36800:	6c73 746f 2e2e 0d2e 000a 0000 6e69 7469     slot........init
   36810:	735f 6f74 6172 6567 203a 4453 4320 7261     _storage: SD Car
   36820:	2064 6e69 7473 6c61 206c 6166 6c69 6465     d install failed
   36830:	0d2e 000a 6e69 7469 735f 6f74 6172 6567     ....init_storage
   36840:	203a 7274 2079 6e75 6c70 6775 6120 646e     : try unplug and
   36850:	7220 2d65 6c70 6775 7420 6568 6320 7261      re-plug the car
   36860:	2e64 0a0d 0000 0000 6e69 7469 735f 6f74     d.......init_sto
   36870:	6172 6567 203a 6f6d 6e75 6974 676e 5320     rage: mounting S
   36880:	2044 6163 6472 2e2e 0d2e 000a 6e69 7469     D card......init
   36890:	735f 6f74 6172 6567 203a 4453 6320 7261     _storage: SD car
   368a0:	2064 6f6d 6e75 2074 6166 6c69 6465 2021     d mount failed! 
   368b0:	7228 7365 2520 2964 0a0d 0000 6e69 7469     (res %d)....init
   368c0:	735f 6f74 6172 6567 203a 4453 6320 7261     _storage: SD car
   368d0:	2064 6f6d 6e75 2074 4b4f 0d2e 000a 0000     d mount OK......
   368e0:	6f63 666e 6769 7275 5f65 7468 7074 635f     configure_http_c
   368f0:	696c 6e65 3a74 4820 5454 2050 6c63 6569     lient: HTTP clie
   36900:	746e 6920 696e 6974 6c61 7a69 7461 6f69     nt initializatio
   36910:	206e 6166 6c69 6465 2021 7228 7365 2520     n failed! (res %
   36920:	2964 0a0d 0000 0000 0a0d 2520 2a2e 0073     d)........ %.*s.
   36930:	6772 2862 0000 0000 0a0d 4752 2042 6425     rgb(......RGB %d
   36940:	2520 2064 6425 0a0d 0000 0000 227b 6167      %d %d......{"ga
   36950:	656d 3a22 005b 0000 0a0d 6147 656d 6d20     me":[.....Game m
   36960:	7365 6173 6567 7220 6365 6965 6576 2164     essage received!
   36970:	0a0d 0000 2e25 732a 0000 0000 0a0d 6150     ....%.*s......Pa
   36980:	7372 6465 4320 6d6f 616d 646e 203a 0000     rsed Command: ..
   36990:	6425 002c 0a0d 6553 746e 7020 616c 2079     %d,...Sent play 
   369a0:	6f74 6320 6e6f 7274 6c6f 0d21 000a 0000     to control!.....
   369b0:	0a0d 6147 656d 6d20 7365 6173 6567 7220     ..Game message r
   369c0:	6365 6965 6576 2064 7562 2074 6f6e 2074     eceived but not 
   369d0:	6e75 6564 7372 6f74 646f 0d21 000a 0000     understood!.....
   369e0:	4d49 2055 6f74 6970 2063 6572 6563 7669     IMU topic receiv
   369f0:	6465 2021 002d 0000 2e25 732a 0d20 0d0a     ed! -...%.*s ...
   36a00:	000a 0000 0a0d 6944 7473 6e61 6563 7420     ......Distance t
   36a10:	706f 6369 7220 6365 6965 6576 2164 0a0d     opic received!..
   36a20:	0000 0000 5047 2053 6f74 6970 2063 6572     ....GPS topic re
   36a30:	6563 7669 6465 2021 002d 0000 2e25 732a     ceived! -...%.*s
   36a40:	0d20 000a 3e20 203e 0000 0000 3150 4c5f      ... >> ....P1_L
   36a50:	4445 455f 4553 3135 5f36 3654 0000 0000     ED_ESE516_T6....
   36a60:	6166 736c 0065 0000 7274 6575 0000 0000     false...true....
   36a70:	0a0d 6f43 6e6e 6365 6974 676e 7420 206f     ..Connecting to 
   36a80:	7242 6b6f 7265 2e2e 002e 0000 7242 4a73     Broker......BrsJ
   36a90:	4e42 6f56 4251 376c 0000 0000 7472 7974     BNVoQBl7....rtty
   36aa0:	626f 6a65 0000 0000 514d 5454 2020 7245     obej....MQTT  Er
   36ab0:	6f72 2072 202d 4f4e 2054 6f43 6e6e 6365     ror - NOT Connec
   36ac0:	6574 2064 6f74 6220 6f72 656b 0d72 000a     ted to broker...
   36ad0:	514d 5454 4320 6e6f 656e 7463 6465 7420     MQTT Connected t
   36ae0:	206f 7262 6b6f 7265 0a0d 0a0d 0000 0000     o broker........
   36af0:	6f43 6e6e 6365 2074 6166 6c69 7420 206f     Connect fail to 
   36b00:	6573 7672 7265 2528 2973 2021 6572 7274     server(%s)! retr
   36b10:	2079 7469 6120 7475 6d6f 7461 6369 6c61     y it automatical
   36b20:	796c 0d2e 000a 0000 3150 475f 4d41 5f45     ly......P1_GAME_
   36b30:	5345 3545 3631 545f 0036 0000 6f49 7274     ESE516_T6...Iotr
   36b40:	6361 696b 676e 495f 554d 545f 0036 0000     acking_IMU_T6...
   36b50:	6f49 7274 6361 696b 676e 475f 5350 545f     Iotracking_GPS_T
   36b60:	0036 0000 514d 5454 4320 6e6f 656e 7463     6...MQTT Connect
   36b70:	6465 0a0d 0000 0000 514d 5454 6220 6f72     ed......MQTT bro
   36b80:	656b 2072 6564 6c63 6e69 2065 6f79 7275     ker decline your
   36b90:	6120 6363 7365 2173 6520 7272 726f 6320      access! error c
   36ba0:	646f 2065 6425 0a0d 0000 0000 514d 5454     ode %d......MQTT
   36bb0:	6420 7369 6f63 6e6e 6365 6574 0d64 000a      disconnected...
   36bc0:	514d 5454 6920 696e 6974 6c61 7a69 7461     MQTT initializat
   36bd0:	6f69 206e 6166 6c69 6465 202e 7245 6f72     ion failed. Erro
   36be0:	2072 6f63 6564 6920 2073 2528 2964 0a0d     r code is (%d)..
   36bf0:	0000 0000 514d 5454 7220 6765 7369 6574     ....MQTT registe
   36c00:	2072 6163 6c6c 6162 6b63 6620 6961 656c     r callback faile
   36c10:	2e64 4520 7272 726f 6320 646f 2065 7369     d. Error code is
   36c20:	2820 6425 0d29 000a 227b 2264 7b3a 7422      (%d)...{"d":{"t
   36c30:	6d65 2270 253a 7d64 007d 0000 465b 4941     emp":%d}}...[FAI
   36c40:	5d4c 7220 7365 2520 0d64 000a 6c46 6761     L] res %d...Flag
   36c50:	2e41 7874 2074 6461 6564 2164 0a0d 0000     A.txt added!....
   36c60:	3a30 6c46 6761 2e41 7874 0074 6f43 6e6e     0:FlagA.txt.Conn
   36c70:	6365 6574 2064 6f74 4d20 5451 2054 7242     ected to MQTT Br
   36c80:	6b6f 7265 0d21 0d0a 000a 0000 227b 6d69     oker!.......{"im
   36c90:	7875 3a22 6425 202c 6922 756d 2279 203a     ux":%d, "imuy": 
   36ca0:	6425 202c 6922 756d 227a 203a 6425 007d     %d, "imuz": %d}.
   36cb0:	227b 616e 656d 3a22 6422 7265 6b65 2c22     {"name":"derek",
   36cc0:	2220 616c 2274 203a 6625 202c 6c22 6e6f      "lat": %f, "lon
   36cd0:	3a22 2520 7d66 0000 6425 0000 7d5d 0000     ": %f}..%d..]}..
   36ce0:	0a0d 0000 3250 475f 4d41 5f45 5345 3545     ....P2_GAME_ESE5
   36cf0:	3631 545f 0036 0000 5245 4f52 2052 6e49     16_T6...ERROR In
   36d00:	7469 6169 696c 697a 676e 5720 6669 2069     itializing Wifi 
   36d10:	6144 6174 7120 6575 6575 2173 0a0d 0000     Data queues!....
   36d20:	5345 3545 3631 2d20 5720 6669 2069 6e49     ESE516 - Wifi In
   36d30:	7469 4320 646f 0d65 000a 0000 616d 6e69     it Code.....main
   36d40:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
   36d50:	6163 6c6c 6520 7272 726f 2021 7228 7365     call error! (res
   36d60:	2520 2964 0a0d 0000 616d 6e69 203a 6f63      %d)....main: co
   36d70:	6e6e 6365 6974 676e 7420 206f 6957 6946     nnecting to WiFi
   36d80:	4120 2050 7325 2e2e 0d2e 000a 3150 545f      AP %s......P1_T
   36d90:	4d45 4550 4152 5554 4552 455f 4553 3135     EMPERATURE_ESE51
   36da0:	5f36 3654 0000 0000 514d 5454 7320 6e65     6_T6....MQTT sen
   36db0:	2064 7325 0a0d 0000 61f0 0001 61fc 0001     d %s.....a...a..
   36dc0:	620e 0001 6264 0001 6284 0001 6568 706c     .b..db...b..help
   36dd0:	0000 0000 6568 706c 203a 694c 7473 2073     ....help: Lists 
   36de0:	6c61 206c 6874 2065 6572 6967 7473 7265     all the register
   36df0:	6465 6320 6d6f 616d 646e 0d73 0d0a 000a     ed commands.....
   36e00:	6e49 6f63 7272 6365 2074 6f63 6d6d 6e61     Incorrect comman
   36e10:	2064 6170 6172 656d 6574 2872 2973 202e     d parameter(s). 
   36e20:	4520 746e 7265 2220 6568 706c 2022 6f74      Enter "help" to
   36e30:	7620 6569 2077 2061 696c 7473 6f20 2066      view a list of 
   36e40:	7661 6961 616c 6c62 2065 6f63 6d6d 6e61     available comman
   36e50:	7364 0d2e 0d0a 000a 6f43 6d6d 6e61 2064     ds......Command 
   36e60:	6f6e 2074 6572 6f63 6e67 7369 6465 202e     not recognised. 
   36e70:	4520 746e 7265 2720 6568 706c 2027 6f74      Enter 'help' to
   36e80:	7620 6569 2077 2061 696c 7473 6f20 2066      view a list of 
   36e90:	7661 6961 616c 6c62 2065 6f63 6d6d 6e61     available comman
   36ea0:	7364 0d2e 0d0a 000a                         ds......

00036ea8 <xHelpCommand>:
   36ea8:	6dcc 0003 6dd4 0003 7f5d 0001 0000 0000     .m...m..].......
   36eb8:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   36ec8:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   36ed8:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   36ee8:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   36ef8:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   36f08:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   36f18:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   36f28:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   36f38:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   36f48:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   36f58:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   36f68:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   36f78:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   36f88:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   36f98:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   36fa8:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   36fb8:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   36fc8:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   36fd8:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   36fe8:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   36ff8:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   37008:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   37018:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   37028:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   37038:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   37048:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   37058:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   37068:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   37078:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   37088:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   37098:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   370a8:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   370b8:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   370c8:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   370d8:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   370e8:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   370f8:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   37108:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   37118:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   37128:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   37138:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   37148:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   37158:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   37168:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   37178:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   37188:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   37198:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   371a8:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   371b8:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   371c8:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   371d8:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   371e8:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   371f8:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   37208:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   37218:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   37228:	6365 6374 616c 7373 0021 0000 8682 0001     ectclass!.......
   37238:	867a 0001 867e 0001 8672 0001 8676 0001     z...~...r...v...
   37248:	8686 0001 868a 0001 868e 0001 8692 0001     ................
   37258:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   37268:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   37278:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   37288:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   37298:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   372a8:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   372b8:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   372c8:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   372d8:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   372e8:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   372f8:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   37308:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   37318:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   37328:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   37338:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   37348:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   37358:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   37368:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   37378:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   37388:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   37398:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   373a8:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   373b8:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   373c8:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   373d8:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   373e8:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   373f8:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   37408:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   37418:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   37428:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   37438:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   37448:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   37458:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   37468:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   37478:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   37488:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   37498:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   374a8:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   374b8:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   374c8:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   374d8:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   374e8:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   374f8:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   37508:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   37518:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   37528:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   37538:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   37548:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   37558:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   37568:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   37578:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   37588:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   37598:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   375a8:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   375b8:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   375c8:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   375d8:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   375e8:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   375f8:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   37608:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37618:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   37628:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   37638:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   37648:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   37658:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   37668:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   37678:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37688:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   37698:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   376a8:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   376b8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   376c8:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   376d8:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   376e8:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   376f8:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   37708:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   37718:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   37728:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37738:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37748:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37758:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   37768:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   37778:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   37788:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   37798:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   377a8:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   377b8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   377c8:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   377d8:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   377e8:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   377f8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37808:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37818:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   37828:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   37838:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   37848:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37858:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37868:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   37878:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   37888:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   37898:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   378a8:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   378b8:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   378c8:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   378d8:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   378e8:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   378f8:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   37908:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37918:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   37928:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   37938:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   37948:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   37958:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   37968:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   37978:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   37988:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   37998:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   379a8:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   379b8:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   379c8:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   379d8:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   379e8:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   379f8:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   37a08:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   37a18:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   37a28:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37a38:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37a48:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   37a58:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   37a68:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   37a78:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   37a88:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   37a98:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   37aa8:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   37ab8:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   37ac8:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   37ad8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37ae8:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   37af8:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   37b08:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   37b18:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   37b28:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   37b38:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   37b48:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   37b58:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   37b68:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   37b78:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37b88:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   37b98:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   37ba8:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   37bb8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37bc8:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   37bd8:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   37be8:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   37bf8:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37c08:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37c18:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   37c28:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   37c38:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   37c48:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37c58:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   37c68:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   37c78:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   37c88:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37c98:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   37ca8:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   37cb8:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   37cc8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37cd8:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   37ce8:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   37cf8:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   37d08:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37d18:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   37d28:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   37d38:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   37d48:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37d58:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   37d68:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   37d78:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   37d88:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   37d98:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   37da8:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   37db8:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   37dc8:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   37dd8:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   37de8:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   37df8:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   37e08:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   37e18:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   37e28:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   37e38:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   37e48:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   37e58:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   37e68:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   37e78:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   37e88:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37e98:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   37ea8:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   37eb8:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   37ec8:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   37ed8:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   37ee8:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   37ef8:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   37f08:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   37f18:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37f28:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   37f38:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   37f48:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   37f58:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   37f68:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   37f78:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   37f88:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37f98:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   37fa8:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   37fb8:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   37fc8:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   37fd8:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   37fe8:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   37ff8:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   38008:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   38018:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   38028:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   38038:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   38048:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   38058:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   38068:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   38078:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   38088:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   38098:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   380a8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   380b8:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   380c8:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   380d8:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   380e8:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   380f8:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   38108:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   38118:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   38128:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   38138:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   38148:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38158:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   38168:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   38178:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   38188:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   38198:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   381a8:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   381b8:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   381c8:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   381d8:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   381e8:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   381f8:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   38208:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   38218:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   38228:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   38238:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38248:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   38258:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   38268:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   38278:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   38288:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   38298:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   382a8:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   382b8:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   382c8:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   382d8:	0000 0000 6d54 2072 7653 0063 d718 0001     ....Tmr Svc.....
   382e8:	d718 0001 d718 0001 d7a6 0001 d770 0001     ............p...
   382f8:	d79a 0001 d718 0001 d718 0001 d7a6 0001     ................
   38308:	d770 0001                                   p...

0003830c <sd_mmc_trans_units>:
   3830c:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00038328 <sd_trans_multipliers>:
   38328:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   38338:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   38348:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   38358:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00038368 <mmc_trans_multipliers>:
   38368:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   38378:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   38388:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   38398:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   383a8:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   383b8:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   383c8:	746c 6320 646d 000a 000d 0000               lt cmd......

000383d4 <__FUNCTION__.17099>:
   383d4:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   383e4:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   383f4:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   38404:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   38414:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   38424:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   38434:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   38444:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   38454:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   38464:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   38474:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   38484:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   38494:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   384a4:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   384b4:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   384c4:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   384d4:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   384e4:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   384f4:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   38504:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   38514:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   38524:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   38534:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   38544:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   38554:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   38564:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   38574:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   38584:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   38594:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   385a4:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   385b4:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   385c4:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   385d4:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   385e4:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   385f4:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   38604:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   38614:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   38624:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   38634:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   38644:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   38654:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   38664:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   38674:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   38684:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   38694:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   386a4:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   386b4:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   386c4:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   386d4:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   386e4:	203f 6425 000a 0000 18b8 0002 1888 0002     ? %d............
   386f4:	1880 0002 1898 0002 1890 0002 18b0 0002     ................
   38704:	18a0 0002 18a8 0002                         ........

0003870c <__FUNCTION__.17967>:
   3870c:	6968 5f66 6573 646e 0000 0000               hif_send....

00038718 <__FUNCTION__.17977>:
   38718:	6968 5f66 7369 0072                         hif_isr.

00038720 <__FUNCTION__.17986>:
   38720:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00038730 <__FUNCTION__.17998>:
   38730:	6968 5f66 6572 6563 7669 0065               hif_receive.

0003873c <__FUNCTION__.18014>:
   3873c:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   3874c:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   3875c:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   3876c:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   3877c:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   3878c:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   3879c:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   387ac:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   387bc:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   387cc:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   387dc:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   387ec:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   387fc:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   3880c:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   3881c:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   3882c:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   3883c:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   3884c:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   3885c:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   3886c:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   3887c:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   3888c:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   3889c:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   388ac:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   388bc:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   388cc:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   388dc:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   388ec:	2064 000a 0a0d 0000 694d 6d73 7461 6863     d ......Mismatch
   388fc:	4620 7269 616d 7277 2065 6556 7372 6f69      Firmawre Versio
   3890c:	0a6e 0000 654b 2079 7369 6e20 746f 7620     n...Key is not v
   3891c:	6c61 6469 000a 0000 6e49 6176 696c 2064     alid....Invalid 
   3892c:	654b 0a79 0000 0000 5353 4449 4c20 4e45     Key.....SSID LEN
   3893c:	4920 564e 4c41 4449 000a 0000 4843 4920      INVALID....CH I
   3894c:	564e 4c41 4449 000a 6e49 6176 696c 2064     NVALID..Invalid 
   3895c:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
   3896c:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
   3897c:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
   3898c:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
   3899c:	2079 656c 676e 6874 000a 0000 6e75 6564     y length....unde
   389ac:	6966 656e 2064 6573 2063 7974 6570 000a     fined sec type..
   389bc:	505f 5f53 4553 5652 5245 205f 7369 6e20     _PS_SERVER_ is n
   389cc:	746f 6420 6665 6e69 6465 000a 694c 7473     ot defined..List
   389dc:	6e65 6320 6168 6e6e 6c65 7320 6f68 6c75     en channel shoul
   389ec:	2064 6e6f 796c 6220 2065 324d 5f4d 4957     d only be M2M_WI
   389fc:	4946 435f 5f48 2f31 2f36 3131 0a20 0000     FI_CH_1/6/11 ...
   38a0c:	4f50 4557 2052 4153 4556 2520 0a64 0000     POWER SAVE %d...
   38a1c:	4e49 4156 494c 2044 4f44 414d 4e49 4e20     INVALID DOMAIN N
   38a2c:	4d41 0a45 0000 0000 5250 474e 4220 6675     AME.....PRNG Buf
   38a3c:	6566 2072 7865 6563 6465 6465 6d20 7861     fer exceeded max
   38a4c:	6d69 6d75 7320 7a69 2065 6425 6f20 2072     imum size %d or 
   38a5c:	554e 4c4c 4220 6675 6566 0a72 0000 0000     NULL Buffer.....

00038a6c <__FUNCTION__.17949>:
   38a6c:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00038a78 <__FUNCTION__.17978>:
   38a78:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00038a88 <__FUNCTION__.18009>:
   38a88:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   38a98:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   38aa8:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   38ab8:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   38ac8:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   38ad8:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   38ae8:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   38af8:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   38b08:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   38b18:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

00038b28 <__FUNCTION__.17806>:
   38b28:	6863 7069 775f 6b61 0065 0000               chip_wake...

00038b34 <__FUNCTION__.17855>:
   38b34:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   38b44:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   38b54:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   38b64:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   38b74:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   38b84:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   38b94:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   38ba4:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   38bb4:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   38bc4:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   38bd4:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   38be4:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   38bf4:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   38c04:	6920 696e 2074 7562 0a73 0000                init bus...

00038c10 <__FUNCTION__.17853>:
   38c10:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00038c1c <__FUNCTION__.17860>:
   38c1c:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

00038c2c <crc7_syndrome_table>:
   38c2c:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   38c3c:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   38c4c:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   38c5c:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   38c6c:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   38c7c:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   38c8c:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   38c9c:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   38cac:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   38cbc:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   38ccc:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   38cdc:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   38cec:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   38cfc:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   38d0c:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   38d1c:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   38d2c:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   38d3c:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   38d4c:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   38d5c:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   38d6c:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38d7c:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   38d8c:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38d9c:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   38dac:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   38dbc:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   38dcc:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   38ddc:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   38dec:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   38dfc:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   38e0c:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   38e1c:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   38e2c:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   38e3c:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   38e4c:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   38e5c:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38e6c:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   38e7c:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   38e8c:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   38e9c:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   38eac:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   38ebc:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   38ecc:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   38edc:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   38eec:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   38efc:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   38f0c:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   38f1c:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   38f2c:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   38f3c:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   38f4c:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   38f5c:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   38f6c:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   38f7c:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   38f8c:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38f9c:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   38fac:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   38fbc:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   38fcc:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   38fdc:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   38fec:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   38ffc:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   3900c:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   3901c:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   3902c:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   3903c:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   3904c:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   3905c:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3906c:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   3907c:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   3908c:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   3909c:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   390ac:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   390bc:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   390cc:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   390dc:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   390ec:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   390fc:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   3910c:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3911c:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   3912c:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   3913c:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   3914c:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   3915c:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   3916c:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   3917c:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   3918c:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   3919c:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   391ac:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   391bc:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   391cc:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   391dc:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   391ec:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   391fc:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   3920c:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   3921c:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3922c:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3923c:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   3924c:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3925c:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   3926c:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   3927c:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   3928c:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   3929c:	2e2e 0a2e 0000 0000 3408 0002 3408 0002     .........4...4..
   392ac:	3498 0002 335c 0002 33a2 0002 33c4 0002     .4..\3...3...3..
   392bc:	344a 0002 344a 0002 3504 0002 3330 0002     J4..J4...5..03..
   392cc:	355e 0002 355e 0002 355e 0002 355e 0002     ^5..^5..^5..^5..
   392dc:	33e6 0002 3968 0002 3968 0002 39f0 0002     .3..h9..h9...9..
   392ec:	38cc 0002 390e 0002 392c 0002 39a6 0002     .8...9..,9...9..
   392fc:	39a6 0002 3a52 0002 38a4 0002 3aa2 0002     .9..R:...8...:..
   3930c:	3aa2 0002 3aa2 0002 3aa2 0002 394a 0002     .:...:...:..J9..

0003931c <__FUNCTION__.17128>:
   3931c:	7073 5f69 6d63 0064                         spi_cmd.

00039324 <__FUNCTION__.17135>:
   39324:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00039334 <__FUNCTION__.17144>:
   39334:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00039340 <__FUNCTION__.17177>:
   39340:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   39350:	0000 0000                                   ....

00039354 <__FUNCTION__.17223>:
   39354:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00039364 <__FUNCTION__.17235>:
   39364:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00039374 <__FUNCTION__.17246>:
   39374:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

00039384 <__FUNCTION__.17258>:
   39384:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

00039394 <__FUNCTION__.17269>:
   39394:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

000393a0 <__FUNCTION__.17290>:
   393a0:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   393b0:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   393c0:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   393d0:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   393e0:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   393f0:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   39400:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   39410:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   39420:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   39430:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   39440:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   39450:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   39460:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   39470:	2074 2230 0000 0000                         t 0"....

00039478 <lun_desc>:
   39478:	f13d 0001 f195 0001 f1e1 0001 f22d 0001     =...........-...
   39488:	f25d 0001 f2e1 0001 f371 0001 9460 0003     ].......q...`...
   39498:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   394a8:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   394b8:	9386 0002 9400 0002 9400 0002 93a4 0002     ................
   394c8:	939e 0002 93aa 0002 938c 0002 93b0 0002     ................
   394d8:	93e6 0002 95e8 0002 9638 0002 9638 0002     ........8...8...
   394e8:	9634 0002 95da 0002 95fa 0002 95ca 0002     4...............
   394f8:	960c 0002 961e 0002 9686 0002 96b4 0002     ................
   39508:	96b4 0002 96b0 0002 9680 0002 968c 0002     ................
   39518:	967a 0002 9692 0002 9698 0002               z...........

00039524 <tcc_modules>:
   39524:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

00039530 <_tcc_gclk_ids>:
   39530:	1a1a 001b                                   ....

00039534 <_tcc_apbcmasks>:
   39534:	0100 0000 0200 0000 0400 0000               ............

00039540 <_tcc_maxs>:
   39540:	ffff 00ff ffff 00ff ffff 0000               ............

0003954c <_tcc_cc_nums>:
   3954c:	0204 0002                                   ....

00039550 <_tcc_ow_nums>:
   39550:	0408 0002                                   ....

00039554 <_tcc_intflag>:
   39554:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   39564:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   39574:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00039584 <LfnOfs>:
   39584:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   39594:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   395a4:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   395b4:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   395c4:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   395d4:	5441 2020 2020 0020                         AT     .

000395dc <excvt.4558>:
   395dc:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   395ec:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   395fc:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   3960c:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   3961c:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   3962c:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   3963c:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   3964c:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

0003965c <Tbl>:
   3965c:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   3966c:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   3967c:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   3968c:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   3969c:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   396ac:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   396bc:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   396cc:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   396dc:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   396ec:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   396fc:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   3970c:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   3971c:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   3972c:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   3973c:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   3974c:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0003975c <tbl_lower.4308>:
   3975c:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   3976c:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   3977c:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   3978c:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   3979c:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   397ac:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   397bc:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   397cc:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   397dc:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   397ec:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   397fc:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   3980c:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   3981c:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   3982c:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   3983c:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   3984c:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   3985c:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   3986c:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   3987c:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   3988c:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   3989c:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   398ac:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   398bc:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   398cc:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   398dc:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   398ec:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   398fc:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   3990c:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   3991c:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   3992c:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0003993c <tbl_upper.4309>:
   3993c:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   3994c:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   3995c:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   3996c:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   3997c:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   3998c:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   3999c:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   399ac:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   399bc:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   399cc:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   399dc:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   399ec:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   399fc:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   39a0c:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   39a1c:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   39a2c:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   39a3c:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   39a4c:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   39a5c:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   39a6c:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   39a7c:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   39a8c:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   39a9c:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   39aac:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   39abc:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   39acc:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   39adc:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   39aec:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   39afc:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   39b0c:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   39b1c:	e9f2 0002 e9f2 0002 e9f2 0002 e880 0002     ................
   39b2c:	e9f2 0002 e96a 0002 e9f2 0002 e9f2 0002     ....j...........
   39b3c:	e9f2 0002 e9f2 0002 e9f2 0002 e9f2 0002     ................
   39b4c:	e9f2 0002 e9e4 0002 514d 4354 0000 0000     ........MQTC....
   39b5c:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   39b6c:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   39bac:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   39bc4:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   39c04:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   39c14:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   39c24:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   39c34:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   39c44:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   39c54:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   39c64:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   39c74:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   39c84:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   39c94:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   39ca4:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   39cb4:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   39cc4:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   39cd4:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   39ce4:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   39cf4:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   39d04:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   39d14:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   39d24:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   39d34:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   39d44:	5448 5054 002f 0000 0d31 0000 0ae6 0003     HTTP/...1.......
   39d54:	0ae0 0003 0ada 0003 0ad4 0003 0aec 0003     ................
   39d64:	0ace 0003 0aec 0003 0ac8 0003 0ac2 0003     ................
   39d74:	0aec 0003 0abc 0003 0abc 0003 0ab6 0003     ................
   39d84:	0ab0 0003 0aaa 0003 2000 4200 2400 4200     ......... .B.$.B
   39d94:	2800 4200 0a0d 2d2d 2d2d 452d 4553 3135     .(.B..-----ESE51
   39da4:	2036 614d 6e69 5020 6f72 7267 6d61 2d2d     6 Main Program--
   39db4:	2d2d 0d2d 000a 0000 0a0d 6e49 7469 6169     ---.......Initia
   39dc4:	696c 657a 4820 2e57 2e2e 0a0d 0000 0000     lize HW.........
   39dd4:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   39de4:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   39df4:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   39e04:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   39e14:	6143 6e6e 746f 6620 6e69 2064 4d49 2155     Cannot find IMU!
   39e24:	0a0d 0000 4d49 2055 6f66 6e75 2164 0a0d     ....IMU found!..
   39e34:	0000 0000 4d49 2055 6e69 7469 6169 696c     ....IMU initiali
   39e44:	657a 2164 0a0d 0000 6f43 6c75 2064 6f6e     zed!....Could no
   39e54:	2074 6e69 7469 6169 696c 657a 4920 554d     t initialize IMU
   39e64:	0a0d 0000 6548 7061 6220 6665 726f 2065     ....Heap before 
   39e74:	7473 7261 6974 676e 7420 7361 736b 203a     starting tasks: 
   39e84:	6425 0000 4c43 5f49 4154 4b53 0000 0000     %d..CLI_TASK....
   39e94:	5245 3a52 4320 494c 7420 7361 206b 6f63     ERR: CLI task co
   39ea4:	6c75 2064 6f6e 2074 6562 6920 696e 6974     uld not be initi
   39eb4:	6c61 7a69 6465 0d21 000a 0000 6548 7061     alized!.....Heap
   39ec4:	6120 7466 7265 7320 6174 7472 6e69 2067      after starting 
   39ed4:	4c43 3a49 2520 0d64 0d0a 000a 4955 5420     CLI: %d.....UI T
   39ee4:	7361 006b 5245 3a52 5520 2049 6174 6b73     ask.ERR: UI task
   39ef4:	6320 756f 646c 6e20 746f 6220 2065 6e69      could not be in
   39f04:	7469 6169 696c 657a 2164 0a0d 0000 0000     itialized!......
   39f14:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   39f24:	6e69 2067 4955 5420 7361 3a6b 2520 0d64     ing UI Task: %d.
   39f34:	0d0a 000a 4957 4946 545f 5341 004b 0000     ....WIFI_TASK...
   39f44:	5245 3a52 5720 4649 2049 6174 6b73 6320     ERR: WIFI task c
   39f54:	756f 646c 6e20 746f 6220 2065 6e69 7469     ould not be init
   39f64:	6169 696c 657a 2164 0a0d 0000 6548 7061     ialized!....Heap
   39f74:	6120 7466 7265 7320 6174 7472 6e69 2067      after starting 
   39f84:	4957 4946 203a 6425 0a0d 0000 7245 6f72     WIFI: %d....Erro
   39f94:	2072 6e6f 6d20 6d65 726f 2079 6c61 6f6c     r on memory allo
   39fa4:	6163 6974 6e6f 6f20 206e 5246 4545 5452     cation on FREERT
   39fb4:	534f 0d21 000a 0000 7245 6f72 2072 6e6f     OS!.....Error on
   39fc4:	7320 6174 6b63 6f20 6576 6672 6f6c 2077      stack overflow 
   39fd4:	6e6f 4620 4552 5245 4f54 2153 0a0d 0000     on FREERTOS!....
   39fe4:	2c70 0003 2bc0 0003 2bc0 0003 2bbe 0003     p,...+...+...+..
   39ff4:	2c62 0003 2c62 0003 2c58 0003 2bbe 0003     b,..b,..X,...+..
   3a004:	2c62 0003 2c58 0003 2c62 0003 2bbe 0003     b,..X,..b,...+..
   3a014:	2c68 0003 2c68 0003 2c68 0003 2cf8 0003     h,..h,..h,...,..
   3a024:	367c 0003 365e 0003 3618 0003 3536 0003     |6..^6...6..65..
   3a034:	3618 0003 3650 0003 3618 0003 3536 0003     .6..P6...6..65..
   3a044:	365e 0003 365e 0003 3650 0003 3536 0003     ^6..^6..P6..65..
   3a054:	352e 0003 352e 0003 352e 0003 3894 0003     .5...5...5...8..
   3a064:	3cdc 0003 3b9c 0003 3b9c 0003 3b98 0003     .<...;...;...;..
   3a074:	3cb4 0003 3cb4 0003 3ca6 0003 3b98 0003     .<...<...<...;..
   3a084:	3cb4 0003 3ca6 0003 3cb4 0003 3b98 0003     .<...<...<...;..
   3a094:	3cbc 0003 3cbc 0003 3cbc 0003 3ec0 0003     .<...<...<...>..

0003a0a4 <_global_impure_ptr>:
   3a0a4:	0134 2000                                   4.. 

0003a0a8 <__sf_fake_stderr>:
	...

0003a0c8 <__sf_fake_stdin>:
	...

0003a0e8 <__sf_fake_stdout>:
	...
   3a108:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   3a118:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   3a128:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   3a138:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0003a145 <_ctype_>:
   3a145:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   3a155:	2020 2020 2020 2020 2020 2020 2020 2020                     
   3a165:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   3a175:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   3a185:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   3a195:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   3a1a5:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   3a1b5:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   3a1c5:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0003a248 <_init>:
   3a248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a24a:	46c0      	nop			; (mov r8, r8)
   3a24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3a24e:	bc08      	pop	{r3}
   3a250:	469e      	mov	lr, r3
   3a252:	4770      	bx	lr

0003a254 <__init_array_start>:
   3a254:	000120dd 	.word	0x000120dd

0003a258 <_fini>:
   3a258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a25a:	46c0      	nop			; (mov r8, r8)
   3a25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3a25e:	bc08      	pop	{r3}
   3a260:	469e      	mov	lr, r3
   3a262:	4770      	bx	lr

0003a264 <__fini_array_start>:
   3a264:	000120b5 	.word	0x000120b5
