
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00027fb4  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002f4  20000000  00039fb4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000057c4  20000300  0003a2c0  00030300  2**4
                  ALLOC
  3 .stack        00002004  20005ac4  0003fa84  00030300  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000302f4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0003031c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00124bf2  00000000  00000000  00030375  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00010549  00000000  00000000  00154f67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00016835  00000000  00000000  001654b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003c38  00000000  00000000  0017bce5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000038d0  00000000  00000000  0017f91d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00028e0d  00000000  00000000  001831ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005ad39  00000000  00000000  001abffa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c386a  00000000  00000000  00206d33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000e3fc  00000000  00000000  002ca5a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	c8 7a 00 20 49 ab 02 00 41 ac 02 00 41 ac 02 00     .z. I...A...A...
	...
   1202c:	d9 9c 01 00 00 00 00 00 00 00 00 00 01 9e 01 00     ................
   1203c:	49 9e 01 00 41 ac 02 00 41 ac 02 00 41 ac 02 00     I...A...A...A...
   1204c:	99 6c 02 00 c5 61 02 00 41 ac 02 00 61 24 01 00     .l...a..A...a$..
   1205c:	41 ac 02 00 a5 25 01 00 3d 73 02 00 55 73 02 00     A....%..=s..Us..
   1206c:	6d 73 02 00 85 73 02 00 9d 73 02 00 b5 73 02 00     ms...s...s...s..
   1207c:	91 aa 02 00 a5 aa 02 00 b9 aa 02 00 c5 79 01 00     .............y..
   1208c:	d9 79 01 00 ed 79 01 00 00 00 00 00 00 00 00 00     .y...y..........
   1209c:	e9 22 01 00 41 ac 02 00 25 24 01 00 41 ac 02 00     ."..A...%$..A...
   120ac:	41 ac 02 00 00 00 00 00                             A.......

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000300 	.word	0x20000300
   120d4:	00000000 	.word	0x00000000
   120d8:	00039fb4 	.word	0x00039fb4

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000304 	.word	0x20000304
   12108:	00039fb4 	.word	0x00039fb4
   1210c:	00039fb4 	.word	0x00039fb4
   12110:	00000000 	.word	0x00000000

00012114 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12114:	b580      	push	{r7, lr}
   12116:	b084      	sub	sp, #16
   12118:	af00      	add	r7, sp, #0
   1211a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   1211c:	687b      	ldr	r3, [r7, #4]
   1211e:	681b      	ldr	r3, [r3, #0]
   12120:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12122:	68fb      	ldr	r3, [r7, #12]
   12124:	7e5b      	ldrb	r3, [r3, #25]
   12126:	b2db      	uxtb	r3, r3
   12128:	b25b      	sxtb	r3, r3
   1212a:	2b00      	cmp	r3, #0
   1212c:	da01      	bge.n	12132 <adc_is_syncing+0x1e>
		return true;
   1212e:	2301      	movs	r3, #1
   12130:	e000      	b.n	12134 <adc_is_syncing+0x20>
	}

	return false;
   12132:	2300      	movs	r3, #0
}
   12134:	0018      	movs	r0, r3
   12136:	46bd      	mov	sp, r7
   12138:	b004      	add	sp, #16
   1213a:	bd80      	pop	{r7, pc}

0001213c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   1213c:	b580      	push	{r7, lr}
   1213e:	b084      	sub	sp, #16
   12140:	af00      	add	r7, sp, #0
   12142:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12144:	687b      	ldr	r3, [r7, #4]
   12146:	681b      	ldr	r3, [r3, #0]
   12148:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   1214a:	46c0      	nop			; (mov r8, r8)
   1214c:	687b      	ldr	r3, [r7, #4]
   1214e:	0018      	movs	r0, r3
   12150:	4b0b      	ldr	r3, [pc, #44]	; (12180 <adc_start_conversion+0x44>)
   12152:	4798      	blx	r3
   12154:	1e03      	subs	r3, r0, #0
   12156:	d1f9      	bne.n	1214c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12158:	68fb      	ldr	r3, [r7, #12]
   1215a:	7b1b      	ldrb	r3, [r3, #12]
   1215c:	b2db      	uxtb	r3, r3
   1215e:	2202      	movs	r2, #2
   12160:	4313      	orrs	r3, r2
   12162:	b2da      	uxtb	r2, r3
   12164:	68fb      	ldr	r3, [r7, #12]
   12166:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12168:	46c0      	nop			; (mov r8, r8)
   1216a:	687b      	ldr	r3, [r7, #4]
   1216c:	0018      	movs	r0, r3
   1216e:	4b04      	ldr	r3, [pc, #16]	; (12180 <adc_start_conversion+0x44>)
   12170:	4798      	blx	r3
   12172:	1e03      	subs	r3, r0, #0
   12174:	d1f9      	bne.n	1216a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12176:	46c0      	nop			; (mov r8, r8)
   12178:	46bd      	mov	sp, r7
   1217a:	b004      	add	sp, #16
   1217c:	bd80      	pop	{r7, pc}
   1217e:	46c0      	nop			; (mov r8, r8)
   12180:	00012115 	.word	0x00012115

00012184 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12184:	b580      	push	{r7, lr}
   12186:	b084      	sub	sp, #16
   12188:	af00      	add	r7, sp, #0
   1218a:	6078      	str	r0, [r7, #4]
   1218c:	000a      	movs	r2, r1
   1218e:	1cfb      	adds	r3, r7, #3
   12190:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12192:	687b      	ldr	r3, [r7, #4]
   12194:	681b      	ldr	r3, [r3, #0]
   12196:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12198:	68fb      	ldr	r3, [r7, #12]
   1219a:	1cfa      	adds	r2, r7, #3
   1219c:	7812      	ldrb	r2, [r2, #0]
   1219e:	759a      	strb	r2, [r3, #22]
}
   121a0:	46c0      	nop			; (mov r8, r8)
   121a2:	46bd      	mov	sp, r7
   121a4:	b004      	add	sp, #16
   121a6:	bd80      	pop	{r7, pc}

000121a8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   121a8:	b580      	push	{r7, lr}
   121aa:	b084      	sub	sp, #16
   121ac:	af00      	add	r7, sp, #0
   121ae:	0002      	movs	r2, r0
   121b0:	1dfb      	adds	r3, r7, #7
   121b2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   121b4:	1dfb      	adds	r3, r7, #7
   121b6:	781a      	ldrb	r2, [r3, #0]
   121b8:	4b47      	ldr	r3, [pc, #284]	; (122d8 <_adc_interrupt_handler+0x130>)
   121ba:	0092      	lsls	r2, r2, #2
   121bc:	58d3      	ldr	r3, [r2, r3]
   121be:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   121c0:	68fb      	ldr	r3, [r7, #12]
   121c2:	681b      	ldr	r3, [r3, #0]
   121c4:	7e1b      	ldrb	r3, [r3, #24]
   121c6:	b2da      	uxtb	r2, r3
   121c8:	68fb      	ldr	r3, [r7, #12]
   121ca:	681b      	ldr	r3, [r3, #0]
   121cc:	7ddb      	ldrb	r3, [r3, #23]
   121ce:	b2db      	uxtb	r3, r3
   121d0:	4013      	ands	r3, r2
   121d2:	b2db      	uxtb	r3, r3
   121d4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   121d6:	68bb      	ldr	r3, [r7, #8]
   121d8:	2201      	movs	r2, #1
   121da:	4013      	ands	r3, r2
   121dc:	d045      	beq.n	1226a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   121de:	68fb      	ldr	r3, [r7, #12]
   121e0:	681b      	ldr	r3, [r3, #0]
   121e2:	2201      	movs	r2, #1
   121e4:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   121e6:	46c0      	nop			; (mov r8, r8)
   121e8:	68fb      	ldr	r3, [r7, #12]
   121ea:	0018      	movs	r0, r3
   121ec:	4b3b      	ldr	r3, [pc, #236]	; (122dc <_adc_interrupt_handler+0x134>)
   121ee:	4798      	blx	r3
   121f0:	1e03      	subs	r3, r0, #0
   121f2:	d1f9      	bne.n	121e8 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   121f4:	68fb      	ldr	r3, [r7, #12]
   121f6:	695b      	ldr	r3, [r3, #20]
   121f8:	1c99      	adds	r1, r3, #2
   121fa:	68fa      	ldr	r2, [r7, #12]
   121fc:	6151      	str	r1, [r2, #20]
   121fe:	68fa      	ldr	r2, [r7, #12]
   12200:	6812      	ldr	r2, [r2, #0]
   12202:	8b52      	ldrh	r2, [r2, #26]
   12204:	b292      	uxth	r2, r2
   12206:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12208:	68fb      	ldr	r3, [r7, #12]
   1220a:	8b1b      	ldrh	r3, [r3, #24]
   1220c:	b29b      	uxth	r3, r3
   1220e:	3b01      	subs	r3, #1
   12210:	b29b      	uxth	r3, r3
   12212:	68fa      	ldr	r2, [r7, #12]
   12214:	1c19      	adds	r1, r3, #0
   12216:	8311      	strh	r1, [r2, #24]
   12218:	2b00      	cmp	r3, #0
   1221a:	d008      	beq.n	1222e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1221c:	68fb      	ldr	r3, [r7, #12]
   1221e:	7f5b      	ldrb	r3, [r3, #29]
   12220:	2b00      	cmp	r3, #0
   12222:	d022      	beq.n	1226a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12224:	68fb      	ldr	r3, [r7, #12]
   12226:	0018      	movs	r0, r3
   12228:	4b2d      	ldr	r3, [pc, #180]	; (122e0 <_adc_interrupt_handler+0x138>)
   1222a:	4798      	blx	r3
   1222c:	e01d      	b.n	1226a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1222e:	68fb      	ldr	r3, [r7, #12]
   12230:	2101      	movs	r1, #1
   12232:	0018      	movs	r0, r3
   12234:	4b2b      	ldr	r3, [pc, #172]	; (122e4 <_adc_interrupt_handler+0x13c>)
   12236:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12238:	68fb      	ldr	r3, [r7, #12]
   1223a:	7f1b      	ldrb	r3, [r3, #28]
   1223c:	b2db      	uxtb	r3, r3
   1223e:	2b05      	cmp	r3, #5
   12240:	d113      	bne.n	1226a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12242:	68fb      	ldr	r3, [r7, #12]
   12244:	2200      	movs	r2, #0
   12246:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12248:	68fb      	ldr	r3, [r7, #12]
   1224a:	7edb      	ldrb	r3, [r3, #27]
   1224c:	001a      	movs	r2, r3
   1224e:	2301      	movs	r3, #1
   12250:	4013      	ands	r3, r2
   12252:	d00a      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12254:	68fb      	ldr	r3, [r7, #12]
   12256:	7e9b      	ldrb	r3, [r3, #26]
   12258:	001a      	movs	r2, r3
   1225a:	2301      	movs	r3, #1
   1225c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1225e:	d004      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12260:	68fb      	ldr	r3, [r7, #12]
   12262:	689b      	ldr	r3, [r3, #8]
   12264:	68fa      	ldr	r2, [r7, #12]
   12266:	0010      	movs	r0, r2
   12268:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1226a:	68bb      	ldr	r3, [r7, #8]
   1226c:	2204      	movs	r2, #4
   1226e:	4013      	ands	r3, r2
   12270:	d014      	beq.n	1229c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12272:	68fb      	ldr	r3, [r7, #12]
   12274:	681b      	ldr	r3, [r3, #0]
   12276:	2204      	movs	r2, #4
   12278:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1227a:	68fb      	ldr	r3, [r7, #12]
   1227c:	7edb      	ldrb	r3, [r3, #27]
   1227e:	001a      	movs	r2, r3
   12280:	2302      	movs	r3, #2
   12282:	4013      	ands	r3, r2
   12284:	d00a      	beq.n	1229c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12286:	68fb      	ldr	r3, [r7, #12]
   12288:	7e9b      	ldrb	r3, [r3, #26]
   1228a:	001a      	movs	r2, r3
   1228c:	2302      	movs	r3, #2
   1228e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12290:	d004      	beq.n	1229c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12292:	68fb      	ldr	r3, [r7, #12]
   12294:	68db      	ldr	r3, [r3, #12]
   12296:	68fa      	ldr	r2, [r7, #12]
   12298:	0010      	movs	r0, r2
   1229a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1229c:	68bb      	ldr	r3, [r7, #8]
   1229e:	2202      	movs	r2, #2
   122a0:	4013      	ands	r3, r2
   122a2:	d014      	beq.n	122ce <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   122a4:	68fb      	ldr	r3, [r7, #12]
   122a6:	681b      	ldr	r3, [r3, #0]
   122a8:	2202      	movs	r2, #2
   122aa:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122ac:	68fb      	ldr	r3, [r7, #12]
   122ae:	7edb      	ldrb	r3, [r3, #27]
   122b0:	001a      	movs	r2, r3
   122b2:	2304      	movs	r3, #4
   122b4:	4013      	ands	r3, r2
   122b6:	d00a      	beq.n	122ce <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   122b8:	68fb      	ldr	r3, [r7, #12]
   122ba:	7e9b      	ldrb	r3, [r3, #26]
   122bc:	001a      	movs	r2, r3
   122be:	2304      	movs	r3, #4
   122c0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122c2:	d004      	beq.n	122ce <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   122c4:	68fb      	ldr	r3, [r7, #12]
   122c6:	691b      	ldr	r3, [r3, #16]
   122c8:	68fa      	ldr	r2, [r7, #12]
   122ca:	0010      	movs	r0, r2
   122cc:	4798      	blx	r3
		}
	}
}
   122ce:	46c0      	nop			; (mov r8, r8)
   122d0:	46bd      	mov	sp, r7
   122d2:	b004      	add	sp, #16
   122d4:	bd80      	pop	{r7, pc}
   122d6:	46c0      	nop			; (mov r8, r8)
   122d8:	200045b0 	.word	0x200045b0
   122dc:	00012115 	.word	0x00012115
   122e0:	0001213d 	.word	0x0001213d
   122e4:	00012185 	.word	0x00012185

000122e8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   122e8:	b580      	push	{r7, lr}
   122ea:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   122ec:	2000      	movs	r0, #0
   122ee:	4b02      	ldr	r3, [pc, #8]	; (122f8 <ADC_Handler+0x10>)
   122f0:	4798      	blx	r3
}
   122f2:	46c0      	nop			; (mov r8, r8)
   122f4:	46bd      	mov	sp, r7
   122f6:	bd80      	pop	{r7, pc}
   122f8:	000121a9 	.word	0x000121a9

000122fc <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   122fc:	b580      	push	{r7, lr}
   122fe:	b082      	sub	sp, #8
   12300:	af00      	add	r7, sp, #0
   12302:	0002      	movs	r2, r0
   12304:	1dfb      	adds	r3, r7, #7
   12306:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12308:	4a07      	ldr	r2, [pc, #28]	; (12328 <system_interrupt_disable+0x2c>)
   1230a:	1dfb      	adds	r3, r7, #7
   1230c:	781b      	ldrb	r3, [r3, #0]
   1230e:	0019      	movs	r1, r3
   12310:	231f      	movs	r3, #31
   12312:	400b      	ands	r3, r1
   12314:	2101      	movs	r1, #1
   12316:	4099      	lsls	r1, r3
   12318:	000b      	movs	r3, r1
   1231a:	0019      	movs	r1, r3
   1231c:	2380      	movs	r3, #128	; 0x80
   1231e:	50d1      	str	r1, [r2, r3]
}
   12320:	46c0      	nop			; (mov r8, r8)
   12322:	46bd      	mov	sp, r7
   12324:	b002      	add	sp, #8
   12326:	bd80      	pop	{r7, pc}
   12328:	e000e100 	.word	0xe000e100

0001232c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1232c:	b580      	push	{r7, lr}
   1232e:	b084      	sub	sp, #16
   12330:	af00      	add	r7, sp, #0
   12332:	0002      	movs	r2, r0
   12334:	1dfb      	adds	r3, r7, #7
   12336:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12338:	1dfb      	adds	r3, r7, #7
   1233a:	781a      	ldrb	r2, [r3, #0]
   1233c:	4b37      	ldr	r3, [pc, #220]	; (1241c <_dac_interrupt_handler+0xf0>)
   1233e:	0092      	lsls	r2, r2, #2
   12340:	58d3      	ldr	r3, [r2, r3]
   12342:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12344:	68fb      	ldr	r3, [r7, #12]
   12346:	681b      	ldr	r3, [r3, #0]
   12348:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1234a:	68bb      	ldr	r3, [r7, #8]
   1234c:	799b      	ldrb	r3, [r3, #6]
   1234e:	b2db      	uxtb	r3, r3
   12350:	001a      	movs	r2, r3
   12352:	2301      	movs	r3, #1
   12354:	4013      	ands	r3, r2
   12356:	d00e      	beq.n	12376 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12358:	68bb      	ldr	r3, [r7, #8]
   1235a:	2201      	movs	r2, #1
   1235c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1235e:	68fb      	ldr	r3, [r7, #12]
   12360:	3314      	adds	r3, #20
   12362:	2b00      	cmp	r3, #0
   12364:	d007      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12366:	68fb      	ldr	r3, [r7, #12]
   12368:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1236a:	2b00      	cmp	r3, #0
   1236c:	d003      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1236e:	68fb      	ldr	r3, [r7, #12]
   12370:	699b      	ldr	r3, [r3, #24]
   12372:	2000      	movs	r0, #0
   12374:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12376:	68bb      	ldr	r3, [r7, #8]
   12378:	799b      	ldrb	r3, [r3, #6]
   1237a:	b2db      	uxtb	r3, r3
   1237c:	001a      	movs	r2, r3
   1237e:	2302      	movs	r3, #2
   12380:	4013      	ands	r3, r2
   12382:	d047      	beq.n	12414 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12384:	68bb      	ldr	r3, [r7, #8]
   12386:	2202      	movs	r2, #2
   12388:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1238a:	68fb      	ldr	r3, [r7, #12]
   1238c:	899b      	ldrh	r3, [r3, #12]
   1238e:	b29b      	uxth	r3, r3
   12390:	2b00      	cmp	r3, #0
   12392:	d033      	beq.n	123fc <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12394:	68fb      	ldr	r3, [r7, #12]
   12396:	689a      	ldr	r2, [r3, #8]
   12398:	68fb      	ldr	r3, [r7, #12]
   1239a:	89db      	ldrh	r3, [r3, #14]
   1239c:	b29b      	uxth	r3, r3
   1239e:	1c59      	adds	r1, r3, #1
   123a0:	b288      	uxth	r0, r1
   123a2:	68f9      	ldr	r1, [r7, #12]
   123a4:	81c8      	strh	r0, [r1, #14]
   123a6:	005b      	lsls	r3, r3, #1
   123a8:	18d3      	adds	r3, r2, r3
   123aa:	881b      	ldrh	r3, [r3, #0]
   123ac:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   123ae:	68bb      	ldr	r3, [r7, #8]
   123b0:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   123b2:	68fb      	ldr	r3, [r7, #12]
   123b4:	899b      	ldrh	r3, [r3, #12]
   123b6:	b29b      	uxth	r3, r3
   123b8:	3b01      	subs	r3, #1
   123ba:	b29a      	uxth	r2, r3
   123bc:	68fb      	ldr	r3, [r7, #12]
   123be:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   123c0:	68fb      	ldr	r3, [r7, #12]
   123c2:	899b      	ldrh	r3, [r3, #12]
   123c4:	b29b      	uxth	r3, r3
   123c6:	2b00      	cmp	r3, #0
   123c8:	d118      	bne.n	123fc <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   123ca:	68fb      	ldr	r3, [r7, #12]
   123cc:	2220      	movs	r2, #32
   123ce:	2100      	movs	r1, #0
   123d0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   123d2:	68bb      	ldr	r3, [r7, #8]
   123d4:	2202      	movs	r2, #2
   123d6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   123d8:	68bb      	ldr	r3, [r7, #8]
   123da:	2202      	movs	r2, #2
   123dc:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   123de:	2019      	movs	r0, #25
   123e0:	4b0f      	ldr	r3, [pc, #60]	; (12420 <_dac_interrupt_handler+0xf4>)
   123e2:	4798      	blx	r3

				if ((module->callback) &&
   123e4:	68fb      	ldr	r3, [r7, #12]
   123e6:	3314      	adds	r3, #20
   123e8:	2b00      	cmp	r3, #0
   123ea:	d007      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   123ec:	68fb      	ldr	r3, [r7, #12]
   123ee:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   123f0:	2b00      	cmp	r3, #0
   123f2:	d003      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   123f4:	68fb      	ldr	r3, [r7, #12]
   123f6:	69db      	ldr	r3, [r3, #28]
   123f8:	2000      	movs	r0, #0
   123fa:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   123fc:	68fb      	ldr	r3, [r7, #12]
   123fe:	3314      	adds	r3, #20
   12400:	2b00      	cmp	r3, #0
   12402:	d007      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12404:	68fb      	ldr	r3, [r7, #12]
   12406:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12408:	2b00      	cmp	r3, #0
   1240a:	d003      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1240c:	68fb      	ldr	r3, [r7, #12]
   1240e:	695b      	ldr	r3, [r3, #20]
   12410:	2000      	movs	r0, #0
   12412:	4798      	blx	r3
		}
	}
}
   12414:	46c0      	nop			; (mov r8, r8)
   12416:	46bd      	mov	sp, r7
   12418:	b004      	add	sp, #16
   1241a:	bd80      	pop	{r7, pc}
   1241c:	200045b4 	.word	0x200045b4
   12420:	000122fd 	.word	0x000122fd

00012424 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12424:	b580      	push	{r7, lr}
   12426:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12428:	2000      	movs	r0, #0
   1242a:	4b02      	ldr	r3, [pc, #8]	; (12434 <DAC_Handler+0x10>)
   1242c:	4798      	blx	r3
}
   1242e:	46c0      	nop			; (mov r8, r8)
   12430:	46bd      	mov	sp, r7
   12432:	bd80      	pop	{r7, pc}
   12434:	0001232d 	.word	0x0001232d

00012438 <system_interrupt_enter_critical_section>:
{
   12438:	b580      	push	{r7, lr}
   1243a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1243c:	4b02      	ldr	r3, [pc, #8]	; (12448 <system_interrupt_enter_critical_section+0x10>)
   1243e:	4798      	blx	r3
}
   12440:	46c0      	nop			; (mov r8, r8)
   12442:	46bd      	mov	sp, r7
   12444:	bd80      	pop	{r7, pc}
   12446:	46c0      	nop			; (mov r8, r8)
   12448:	00025e25 	.word	0x00025e25

0001244c <system_interrupt_leave_critical_section>:
{
   1244c:	b580      	push	{r7, lr}
   1244e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12450:	4b02      	ldr	r3, [pc, #8]	; (1245c <system_interrupt_leave_critical_section+0x10>)
   12452:	4798      	blx	r3
}
   12454:	46c0      	nop			; (mov r8, r8)
   12456:	46bd      	mov	sp, r7
   12458:	bd80      	pop	{r7, pc}
   1245a:	46c0      	nop			; (mov r8, r8)
   1245c:	00025e79 	.word	0x00025e79

00012460 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12460:	b580      	push	{r7, lr}
   12462:	b086      	sub	sp, #24
   12464:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12466:	4b49      	ldr	r3, [pc, #292]	; (1258c <DMAC_Handler+0x12c>)
   12468:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1246a:	4b49      	ldr	r3, [pc, #292]	; (12590 <DMAC_Handler+0x130>)
   1246c:	8c1b      	ldrh	r3, [r3, #32]
   1246e:	b29b      	uxth	r3, r3
   12470:	b2da      	uxtb	r2, r3
   12472:	2317      	movs	r3, #23
   12474:	18fb      	adds	r3, r7, r3
   12476:	210f      	movs	r1, #15
   12478:	400a      	ands	r2, r1
   1247a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1247c:	2317      	movs	r3, #23
   1247e:	18fb      	adds	r3, r7, r3
   12480:	781a      	ldrb	r2, [r3, #0]
   12482:	4b44      	ldr	r3, [pc, #272]	; (12594 <DMAC_Handler+0x134>)
   12484:	0092      	lsls	r2, r2, #2
   12486:	58d3      	ldr	r3, [r2, r3]
   12488:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1248a:	4a41      	ldr	r2, [pc, #260]	; (12590 <DMAC_Handler+0x130>)
   1248c:	693b      	ldr	r3, [r7, #16]
   1248e:	781b      	ldrb	r3, [r3, #0]
   12490:	210f      	movs	r1, #15
   12492:	400b      	ands	r3, r1
   12494:	b2d9      	uxtb	r1, r3
   12496:	233f      	movs	r3, #63	; 0x3f
   12498:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1249a:	493d      	ldr	r1, [pc, #244]	; (12590 <DMAC_Handler+0x130>)
   1249c:	230f      	movs	r3, #15
   1249e:	18fb      	adds	r3, r7, r3
   124a0:	224e      	movs	r2, #78	; 0x4e
   124a2:	5c8a      	ldrb	r2, [r1, r2]
   124a4:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   124a6:	693b      	ldr	r3, [r7, #16]
   124a8:	781b      	ldrb	r3, [r3, #0]
   124aa:	4a3b      	ldr	r2, [pc, #236]	; (12598 <DMAC_Handler+0x138>)
   124ac:	011b      	lsls	r3, r3, #4
   124ae:	18d3      	adds	r3, r2, r3
   124b0:	3302      	adds	r3, #2
   124b2:	881b      	ldrh	r3, [r3, #0]
   124b4:	b29b      	uxth	r3, r3
   124b6:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   124b8:	693b      	ldr	r3, [r7, #16]
   124ba:	781b      	ldrb	r3, [r3, #0]
   124bc:	4a37      	ldr	r2, [pc, #220]	; (1259c <DMAC_Handler+0x13c>)
   124be:	011b      	lsls	r3, r3, #4
   124c0:	18d3      	adds	r3, r2, r3
   124c2:	3302      	adds	r3, #2
   124c4:	881b      	ldrh	r3, [r3, #0]
   124c6:	b29b      	uxth	r3, r3
   124c8:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   124ca:	68ba      	ldr	r2, [r7, #8]
   124cc:	687b      	ldr	r3, [r7, #4]
   124ce:	1ad2      	subs	r2, r2, r3
   124d0:	693b      	ldr	r3, [r7, #16]
   124d2:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   124d4:	230f      	movs	r3, #15
   124d6:	18fb      	adds	r3, r7, r3
   124d8:	781b      	ldrb	r3, [r3, #0]
   124da:	2201      	movs	r2, #1
   124dc:	4013      	ands	r3, r2
   124de:	d016      	beq.n	1250e <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   124e0:	4a2b      	ldr	r2, [pc, #172]	; (12590 <DMAC_Handler+0x130>)
   124e2:	234e      	movs	r3, #78	; 0x4e
   124e4:	2101      	movs	r1, #1
   124e6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   124e8:	693b      	ldr	r3, [r7, #16]
   124ea:	2210      	movs	r2, #16
   124ec:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124ee:	693b      	ldr	r3, [r7, #16]
   124f0:	7c1b      	ldrb	r3, [r3, #16]
   124f2:	001a      	movs	r2, r3
   124f4:	2301      	movs	r3, #1
   124f6:	4013      	ands	r3, r2
   124f8:	d042      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   124fa:	693b      	ldr	r3, [r7, #16]
   124fc:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124fe:	2b00      	cmp	r3, #0
   12500:	d03e      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12502:	693b      	ldr	r3, [r7, #16]
   12504:	685b      	ldr	r3, [r3, #4]
   12506:	693a      	ldr	r2, [r7, #16]
   12508:	0010      	movs	r0, r2
   1250a:	4798      	blx	r3
   1250c:	e038      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1250e:	230f      	movs	r3, #15
   12510:	18fb      	adds	r3, r7, r3
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	2202      	movs	r2, #2
   12516:	4013      	ands	r3, r2
   12518:	d016      	beq.n	12548 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1251a:	4a1d      	ldr	r2, [pc, #116]	; (12590 <DMAC_Handler+0x130>)
   1251c:	234e      	movs	r3, #78	; 0x4e
   1251e:	2102      	movs	r1, #2
   12520:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12522:	693b      	ldr	r3, [r7, #16]
   12524:	2200      	movs	r2, #0
   12526:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12528:	693b      	ldr	r3, [r7, #16]
   1252a:	7c1b      	ldrb	r3, [r3, #16]
   1252c:	001a      	movs	r2, r3
   1252e:	2302      	movs	r3, #2
   12530:	4013      	ands	r3, r2
   12532:	d025      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12534:	693b      	ldr	r3, [r7, #16]
   12536:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12538:	2b00      	cmp	r3, #0
   1253a:	d021      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1253c:	693b      	ldr	r3, [r7, #16]
   1253e:	689b      	ldr	r3, [r3, #8]
   12540:	693a      	ldr	r2, [r7, #16]
   12542:	0010      	movs	r0, r2
   12544:	4798      	blx	r3
   12546:	e01b      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12548:	230f      	movs	r3, #15
   1254a:	18fb      	adds	r3, r7, r3
   1254c:	781b      	ldrb	r3, [r3, #0]
   1254e:	2204      	movs	r2, #4
   12550:	4013      	ands	r3, r2
   12552:	d015      	beq.n	12580 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12554:	4a0e      	ldr	r2, [pc, #56]	; (12590 <DMAC_Handler+0x130>)
   12556:	234e      	movs	r3, #78	; 0x4e
   12558:	2104      	movs	r1, #4
   1255a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1255c:	693b      	ldr	r3, [r7, #16]
   1255e:	2206      	movs	r2, #6
   12560:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12562:	693b      	ldr	r3, [r7, #16]
   12564:	7c1b      	ldrb	r3, [r3, #16]
   12566:	001a      	movs	r2, r3
   12568:	2304      	movs	r3, #4
   1256a:	4013      	ands	r3, r2
   1256c:	d008      	beq.n	12580 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1256e:	693b      	ldr	r3, [r7, #16]
   12570:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12572:	2b00      	cmp	r3, #0
   12574:	d004      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12576:	693b      	ldr	r3, [r7, #16]
   12578:	68db      	ldr	r3, [r3, #12]
   1257a:	693a      	ldr	r2, [r7, #16]
   1257c:	0010      	movs	r0, r2
   1257e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12580:	4b07      	ldr	r3, [pc, #28]	; (125a0 <DMAC_Handler+0x140>)
   12582:	4798      	blx	r3
}
   12584:	46c0      	nop			; (mov r8, r8)
   12586:	46bd      	mov	sp, r7
   12588:	b006      	add	sp, #24
   1258a:	bd80      	pop	{r7, pc}
   1258c:	00012439 	.word	0x00012439
   12590:	41004800 	.word	0x41004800
   12594:	20000370 	.word	0x20000370
   12598:	200045c0 	.word	0x200045c0
   1259c:	20000320 	.word	0x20000320
   125a0:	0001244d 	.word	0x0001244d

000125a4 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   125a4:	b580      	push	{r7, lr}
   125a6:	b082      	sub	sp, #8
   125a8:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   125aa:	4b15      	ldr	r3, [pc, #84]	; (12600 <EVSYS_Handler+0x5c>)
   125ac:	691b      	ldr	r3, [r3, #16]
   125ae:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   125b0:	4b14      	ldr	r3, [pc, #80]	; (12604 <EVSYS_Handler+0x60>)
   125b2:	699b      	ldr	r3, [r3, #24]
   125b4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   125b6:	4b12      	ldr	r3, [pc, #72]	; (12600 <EVSYS_Handler+0x5c>)
   125b8:	689a      	ldr	r2, [r3, #8]
   125ba:	683b      	ldr	r3, [r7, #0]
   125bc:	431a      	orrs	r2, r3
   125be:	4b10      	ldr	r3, [pc, #64]	; (12600 <EVSYS_Handler+0x5c>)
   125c0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   125c2:	4b10      	ldr	r3, [pc, #64]	; (12604 <EVSYS_Handler+0x60>)
   125c4:	4a10      	ldr	r2, [pc, #64]	; (12608 <EVSYS_Handler+0x64>)
   125c6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   125c8:	e008      	b.n	125dc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   125ca:	687b      	ldr	r3, [r7, #4]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	687b      	ldr	r3, [r7, #4]
   125d0:	681b      	ldr	r3, [r3, #0]
   125d2:	0018      	movs	r0, r3
   125d4:	4790      	blx	r2
		current_hook = current_hook->next;
   125d6:	687b      	ldr	r3, [r7, #4]
   125d8:	689b      	ldr	r3, [r3, #8]
   125da:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   125dc:	687b      	ldr	r3, [r7, #4]
   125de:	2b00      	cmp	r3, #0
   125e0:	d1f3      	bne.n	125ca <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   125e2:	4b07      	ldr	r3, [pc, #28]	; (12600 <EVSYS_Handler+0x5c>)
   125e4:	68db      	ldr	r3, [r3, #12]
   125e6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   125e8:	4b05      	ldr	r3, [pc, #20]	; (12600 <EVSYS_Handler+0x5c>)
   125ea:	689b      	ldr	r3, [r3, #8]
   125ec:	683a      	ldr	r2, [r7, #0]
   125ee:	43d2      	mvns	r2, r2
   125f0:	401a      	ands	r2, r3
   125f2:	4b03      	ldr	r3, [pc, #12]	; (12600 <EVSYS_Handler+0x5c>)
   125f4:	609a      	str	r2, [r3, #8]
}
   125f6:	46c0      	nop			; (mov r8, r8)
   125f8:	46bd      	mov	sp, r7
   125fa:	b002      	add	sp, #8
   125fc:	bd80      	pop	{r7, pc}
   125fe:	46c0      	nop			; (mov r8, r8)
   12600:	20000000 	.word	0x20000000
   12604:	42000400 	.word	0x42000400
   12608:	0f0fffff 	.word	0x0f0fffff

0001260c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1260c:	b580      	push	{r7, lr}
   1260e:	b082      	sub	sp, #8
   12610:	af00      	add	r7, sp, #0
   12612:	0002      	movs	r2, r0
   12614:	6039      	str	r1, [r7, #0]
   12616:	1dfb      	adds	r3, r7, #7
   12618:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1261a:	1dfb      	adds	r3, r7, #7
   1261c:	781b      	ldrb	r3, [r3, #0]
   1261e:	2b01      	cmp	r3, #1
   12620:	d00a      	beq.n	12638 <system_apb_clock_set_mask+0x2c>
   12622:	2b02      	cmp	r3, #2
   12624:	d00f      	beq.n	12646 <system_apb_clock_set_mask+0x3a>
   12626:	2b00      	cmp	r3, #0
   12628:	d114      	bne.n	12654 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1262a:	4b0e      	ldr	r3, [pc, #56]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262c:	4a0d      	ldr	r2, [pc, #52]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262e:	6991      	ldr	r1, [r2, #24]
   12630:	683a      	ldr	r2, [r7, #0]
   12632:	430a      	orrs	r2, r1
   12634:	619a      	str	r2, [r3, #24]
			break;
   12636:	e00f      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12638:	4b0a      	ldr	r3, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263a:	4a0a      	ldr	r2, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263c:	69d1      	ldr	r1, [r2, #28]
   1263e:	683a      	ldr	r2, [r7, #0]
   12640:	430a      	orrs	r2, r1
   12642:	61da      	str	r2, [r3, #28]
			break;
   12644:	e008      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12646:	4b07      	ldr	r3, [pc, #28]	; (12664 <system_apb_clock_set_mask+0x58>)
   12648:	4a06      	ldr	r2, [pc, #24]	; (12664 <system_apb_clock_set_mask+0x58>)
   1264a:	6a11      	ldr	r1, [r2, #32]
   1264c:	683a      	ldr	r2, [r7, #0]
   1264e:	430a      	orrs	r2, r1
   12650:	621a      	str	r2, [r3, #32]
			break;
   12652:	e001      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12654:	2317      	movs	r3, #23
   12656:	e000      	b.n	1265a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   12658:	2300      	movs	r3, #0
}
   1265a:	0018      	movs	r0, r3
   1265c:	46bd      	mov	sp, r7
   1265e:	b002      	add	sp, #8
   12660:	bd80      	pop	{r7, pc}
   12662:	46c0      	nop			; (mov r8, r8)
   12664:	40000400 	.word	0x40000400

00012668 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   12668:	b580      	push	{r7, lr}
   1266a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   1266c:	2102      	movs	r1, #2
   1266e:	2002      	movs	r0, #2
   12670:	4b07      	ldr	r3, [pc, #28]	; (12690 <_system_events_init+0x28>)
   12672:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   12674:	4b07      	ldr	r3, [pc, #28]	; (12694 <_system_events_init+0x2c>)
   12676:	2201      	movs	r2, #1
   12678:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   1267a:	46c0      	nop			; (mov r8, r8)
   1267c:	4b05      	ldr	r3, [pc, #20]	; (12694 <_system_events_init+0x2c>)
   1267e:	781b      	ldrb	r3, [r3, #0]
   12680:	b2db      	uxtb	r3, r3
   12682:	001a      	movs	r2, r3
   12684:	2301      	movs	r3, #1
   12686:	4013      	ands	r3, r2
   12688:	d1f8      	bne.n	1267c <_system_events_init+0x14>
	}
}
   1268a:	46c0      	nop			; (mov r8, r8)
   1268c:	46bd      	mov	sp, r7
   1268e:	bd80      	pop	{r7, pc}
   12690:	0001260d 	.word	0x0001260d
   12694:	42000400 	.word	0x42000400

00012698 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   12698:	b580      	push	{r7, lr}
   1269a:	b084      	sub	sp, #16
   1269c:	af00      	add	r7, sp, #0
   1269e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   126a0:	687b      	ldr	r3, [r7, #4]
   126a2:	681b      	ldr	r3, [r3, #0]
   126a4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   126a6:	68fb      	ldr	r3, [r7, #12]
   126a8:	69db      	ldr	r3, [r3, #28]
   126aa:	2207      	movs	r2, #7
   126ac:	4013      	ands	r3, r2
   126ae:	1e5a      	subs	r2, r3, #1
   126b0:	4193      	sbcs	r3, r2
   126b2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   126b4:	0018      	movs	r0, r3
   126b6:	46bd      	mov	sp, r7
   126b8:	b004      	add	sp, #16
   126ba:	bd80      	pop	{r7, pc}

000126bc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   126bc:	b580      	push	{r7, lr}
   126be:	b082      	sub	sp, #8
   126c0:	af00      	add	r7, sp, #0
   126c2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   126c4:	46c0      	nop			; (mov r8, r8)
   126c6:	687b      	ldr	r3, [r7, #4]
   126c8:	0018      	movs	r0, r3
   126ca:	4b04      	ldr	r3, [pc, #16]	; (126dc <_i2c_master_wait_for_sync+0x20>)
   126cc:	4798      	blx	r3
   126ce:	1e03      	subs	r3, r0, #0
   126d0:	d1f9      	bne.n	126c6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   126d2:	46c0      	nop			; (mov r8, r8)
   126d4:	46bd      	mov	sp, r7
   126d6:	b002      	add	sp, #8
   126d8:	bd80      	pop	{r7, pc}
   126da:	46c0      	nop			; (mov r8, r8)
   126dc:	00012699 	.word	0x00012699

000126e0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   126e0:	b580      	push	{r7, lr}
   126e2:	b084      	sub	sp, #16
   126e4:	af00      	add	r7, sp, #0
   126e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   126e8:	687b      	ldr	r3, [r7, #4]
   126ea:	681b      	ldr	r3, [r3, #0]
   126ec:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   126ee:	68fb      	ldr	r3, [r7, #12]
   126f0:	681b      	ldr	r3, [r3, #0]
   126f2:	011b      	lsls	r3, r3, #4
   126f4:	0fdb      	lsrs	r3, r3, #31
   126f6:	b2db      	uxtb	r3, r3
   126f8:	001a      	movs	r2, r3
   126fa:	230b      	movs	r3, #11
   126fc:	18fb      	adds	r3, r7, r3
   126fe:	1e51      	subs	r1, r2, #1
   12700:	418a      	sbcs	r2, r1
   12702:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   12704:	2308      	movs	r3, #8
   12706:	18fb      	adds	r3, r7, r3
   12708:	687a      	ldr	r2, [r7, #4]
   1270a:	8b52      	ldrh	r2, [r2, #26]
   1270c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   1270e:	687b      	ldr	r3, [r7, #4]
   12710:	8b9b      	ldrh	r3, [r3, #28]
   12712:	b29a      	uxth	r2, r3
   12714:	2308      	movs	r3, #8
   12716:	18fb      	adds	r3, r7, r3
   12718:	2108      	movs	r1, #8
   1271a:	1879      	adds	r1, r7, r1
   1271c:	8809      	ldrh	r1, [r1, #0]
   1271e:	1a8a      	subs	r2, r1, r2
   12720:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12722:	687b      	ldr	r3, [r7, #4]
   12724:	8b9b      	ldrh	r3, [r3, #28]
   12726:	b29b      	uxth	r3, r3
   12728:	3b01      	subs	r3, #1
   1272a:	b29a      	uxth	r2, r3
   1272c:	687b      	ldr	r3, [r7, #4]
   1272e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   12730:	230b      	movs	r3, #11
   12732:	18fb      	adds	r3, r7, r3
   12734:	781b      	ldrb	r3, [r3, #0]
   12736:	2b00      	cmp	r3, #0
   12738:	d010      	beq.n	1275c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   1273a:	687b      	ldr	r3, [r7, #4]
   1273c:	7adb      	ldrb	r3, [r3, #11]
   1273e:	2b00      	cmp	r3, #0
   12740:	d01c      	beq.n	1277c <_i2c_master_read+0x9c>
   12742:	687b      	ldr	r3, [r7, #4]
   12744:	8b9b      	ldrh	r3, [r3, #28]
   12746:	b29b      	uxth	r3, r3
   12748:	2b01      	cmp	r3, #1
   1274a:	d117      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1274c:	68fb      	ldr	r3, [r7, #12]
   1274e:	685b      	ldr	r3, [r3, #4]
   12750:	2280      	movs	r2, #128	; 0x80
   12752:	02d2      	lsls	r2, r2, #11
   12754:	431a      	orrs	r2, r3
   12756:	68fb      	ldr	r3, [r7, #12]
   12758:	605a      	str	r2, [r3, #4]
   1275a:	e00f      	b.n	1277c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   1275c:	687b      	ldr	r3, [r7, #4]
   1275e:	7adb      	ldrb	r3, [r3, #11]
   12760:	2b00      	cmp	r3, #0
   12762:	d00b      	beq.n	1277c <_i2c_master_read+0x9c>
   12764:	687b      	ldr	r3, [r7, #4]
   12766:	8b9b      	ldrh	r3, [r3, #28]
   12768:	b29b      	uxth	r3, r3
   1276a:	2b00      	cmp	r3, #0
   1276c:	d106      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1276e:	68fb      	ldr	r3, [r7, #12]
   12770:	685b      	ldr	r3, [r3, #4]
   12772:	2280      	movs	r2, #128	; 0x80
   12774:	02d2      	lsls	r2, r2, #11
   12776:	431a      	orrs	r2, r3
   12778:	68fb      	ldr	r3, [r7, #12]
   1277a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   1277c:	687b      	ldr	r3, [r7, #4]
   1277e:	8b9b      	ldrh	r3, [r3, #28]
   12780:	b29b      	uxth	r3, r3
   12782:	2b00      	cmp	r3, #0
   12784:	d10e      	bne.n	127a4 <_i2c_master_read+0xc4>
		if (module->send_stop) {
   12786:	687b      	ldr	r3, [r7, #4]
   12788:	7a9b      	ldrb	r3, [r3, #10]
   1278a:	2b00      	cmp	r3, #0
   1278c:	d00a      	beq.n	127a4 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1278e:	687b      	ldr	r3, [r7, #4]
   12790:	0018      	movs	r0, r3
   12792:	4b0e      	ldr	r3, [pc, #56]	; (127cc <_i2c_master_read+0xec>)
   12794:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12796:	68fb      	ldr	r3, [r7, #12]
   12798:	685b      	ldr	r3, [r3, #4]
   1279a:	22c0      	movs	r2, #192	; 0xc0
   1279c:	0292      	lsls	r2, r2, #10
   1279e:	431a      	orrs	r2, r3
   127a0:	68fb      	ldr	r3, [r7, #12]
   127a2:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   127a4:	687b      	ldr	r3, [r7, #4]
   127a6:	0018      	movs	r0, r3
   127a8:	4b08      	ldr	r3, [pc, #32]	; (127cc <_i2c_master_read+0xec>)
   127aa:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   127ac:	687b      	ldr	r3, [r7, #4]
   127ae:	6a1a      	ldr	r2, [r3, #32]
   127b0:	2308      	movs	r3, #8
   127b2:	18fb      	adds	r3, r7, r3
   127b4:	881b      	ldrh	r3, [r3, #0]
   127b6:	18d3      	adds	r3, r2, r3
   127b8:	68fa      	ldr	r2, [r7, #12]
   127ba:	2128      	movs	r1, #40	; 0x28
   127bc:	5c52      	ldrb	r2, [r2, r1]
   127be:	b2d2      	uxtb	r2, r2
   127c0:	701a      	strb	r2, [r3, #0]
}
   127c2:	46c0      	nop			; (mov r8, r8)
   127c4:	46bd      	mov	sp, r7
   127c6:	b004      	add	sp, #16
   127c8:	bd80      	pop	{r7, pc}
   127ca:	46c0      	nop			; (mov r8, r8)
   127cc:	000126bd 	.word	0x000126bd

000127d0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   127d0:	b580      	push	{r7, lr}
   127d2:	b084      	sub	sp, #16
   127d4:	af00      	add	r7, sp, #0
   127d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   127d8:	687b      	ldr	r3, [r7, #4]
   127da:	681b      	ldr	r3, [r3, #0]
   127dc:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   127de:	68fb      	ldr	r3, [r7, #12]
   127e0:	8b5b      	ldrh	r3, [r3, #26]
   127e2:	b29b      	uxth	r3, r3
   127e4:	001a      	movs	r2, r3
   127e6:	2304      	movs	r3, #4
   127e8:	4013      	ands	r3, r2
   127ea:	d004      	beq.n	127f6 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   127ec:	687b      	ldr	r3, [r7, #4]
   127ee:	2225      	movs	r2, #37	; 0x25
   127f0:	211e      	movs	r1, #30
   127f2:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   127f4:	e024      	b.n	12840 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   127f6:	230a      	movs	r3, #10
   127f8:	18fb      	adds	r3, r7, r3
   127fa:	687a      	ldr	r2, [r7, #4]
   127fc:	8b52      	ldrh	r2, [r2, #26]
   127fe:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   12800:	687b      	ldr	r3, [r7, #4]
   12802:	8b9b      	ldrh	r3, [r3, #28]
   12804:	b29a      	uxth	r2, r3
   12806:	230a      	movs	r3, #10
   12808:	18fb      	adds	r3, r7, r3
   1280a:	210a      	movs	r1, #10
   1280c:	1879      	adds	r1, r7, r1
   1280e:	8809      	ldrh	r1, [r1, #0]
   12810:	1a8a      	subs	r2, r1, r2
   12812:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12814:	687b      	ldr	r3, [r7, #4]
   12816:	8b9b      	ldrh	r3, [r3, #28]
   12818:	b29b      	uxth	r3, r3
   1281a:	3b01      	subs	r3, #1
   1281c:	b29a      	uxth	r2, r3
   1281e:	687b      	ldr	r3, [r7, #4]
   12820:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   12822:	687b      	ldr	r3, [r7, #4]
   12824:	0018      	movs	r0, r3
   12826:	4b08      	ldr	r3, [pc, #32]	; (12848 <_i2c_master_write+0x78>)
   12828:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   1282a:	687b      	ldr	r3, [r7, #4]
   1282c:	6a1a      	ldr	r2, [r3, #32]
   1282e:	230a      	movs	r3, #10
   12830:	18fb      	adds	r3, r7, r3
   12832:	881b      	ldrh	r3, [r3, #0]
   12834:	18d3      	adds	r3, r2, r3
   12836:	781b      	ldrb	r3, [r3, #0]
   12838:	b2d9      	uxtb	r1, r3
   1283a:	68fb      	ldr	r3, [r7, #12]
   1283c:	2228      	movs	r2, #40	; 0x28
   1283e:	5499      	strb	r1, [r3, r2]
}
   12840:	46bd      	mov	sp, r7
   12842:	b004      	add	sp, #16
   12844:	bd80      	pop	{r7, pc}
   12846:	46c0      	nop			; (mov r8, r8)
   12848:	000126bd 	.word	0x000126bd

0001284c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   1284c:	b580      	push	{r7, lr}
   1284e:	b084      	sub	sp, #16
   12850:	af00      	add	r7, sp, #0
   12852:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12854:	687b      	ldr	r3, [r7, #4]
   12856:	681b      	ldr	r3, [r3, #0]
   12858:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   1285a:	68fb      	ldr	r3, [r7, #12]
   1285c:	7e1b      	ldrb	r3, [r3, #24]
   1285e:	b2db      	uxtb	r3, r3
   12860:	001a      	movs	r2, r3
   12862:	2301      	movs	r3, #1
   12864:	4013      	ands	r3, r2
   12866:	d02b      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   12868:	68fb      	ldr	r3, [r7, #12]
   1286a:	2201      	movs	r2, #1
   1286c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1286e:	68fb      	ldr	r3, [r7, #12]
   12870:	8b5b      	ldrh	r3, [r3, #26]
   12872:	b29b      	uxth	r3, r3
   12874:	001a      	movs	r2, r3
   12876:	2302      	movs	r3, #2
   12878:	4013      	ands	r3, r2
   1287a:	d004      	beq.n	12886 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   1287c:	687b      	ldr	r3, [r7, #4]
   1287e:	2225      	movs	r2, #37	; 0x25
   12880:	2141      	movs	r1, #65	; 0x41
   12882:	5499      	strb	r1, [r3, r2]
   12884:	e01c      	b.n	128c0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   12886:	68fb      	ldr	r3, [r7, #12]
   12888:	8b5b      	ldrh	r3, [r3, #26]
   1288a:	b29b      	uxth	r3, r3
   1288c:	001a      	movs	r2, r3
   1288e:	2304      	movs	r3, #4
   12890:	4013      	ands	r3, r2
   12892:	d015      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   12894:	687b      	ldr	r3, [r7, #4]
   12896:	2225      	movs	r2, #37	; 0x25
   12898:	2118      	movs	r1, #24
   1289a:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   1289c:	687b      	ldr	r3, [r7, #4]
   1289e:	2200      	movs	r2, #0
   128a0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   128a2:	687b      	ldr	r3, [r7, #4]
   128a4:	7a9b      	ldrb	r3, [r3, #10]
   128a6:	2b00      	cmp	r3, #0
   128a8:	d00a      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   128aa:	687b      	ldr	r3, [r7, #4]
   128ac:	0018      	movs	r0, r3
   128ae:	4b13      	ldr	r3, [pc, #76]	; (128fc <_i2c_master_async_address_response+0xb0>)
   128b0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   128b2:	68fb      	ldr	r3, [r7, #12]
   128b4:	685b      	ldr	r3, [r3, #4]
   128b6:	22c0      	movs	r2, #192	; 0xc0
   128b8:	0292      	lsls	r2, r2, #10
   128ba:	431a      	orrs	r2, r3
   128bc:	68fb      	ldr	r3, [r7, #12]
   128be:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   128c0:	687b      	ldr	r3, [r7, #4]
   128c2:	8b9b      	ldrh	r3, [r3, #28]
   128c4:	b29a      	uxth	r2, r3
   128c6:	687b      	ldr	r3, [r7, #4]
   128c8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   128ca:	687b      	ldr	r3, [r7, #4]
   128cc:	2225      	movs	r2, #37	; 0x25
   128ce:	5c9b      	ldrb	r3, [r3, r2]
   128d0:	b2db      	uxtb	r3, r3
   128d2:	2b05      	cmp	r3, #5
   128d4:	d10e      	bne.n	128f4 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   128d6:	687b      	ldr	r3, [r7, #4]
   128d8:	2224      	movs	r2, #36	; 0x24
   128da:	5c9b      	ldrb	r3, [r3, r2]
   128dc:	b2db      	uxtb	r3, r3
   128de:	2b00      	cmp	r3, #0
   128e0:	d104      	bne.n	128ec <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   128e2:	687b      	ldr	r3, [r7, #4]
   128e4:	0018      	movs	r0, r3
   128e6:	4b06      	ldr	r3, [pc, #24]	; (12900 <_i2c_master_async_address_response+0xb4>)
   128e8:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   128ea:	e003      	b.n	128f4 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   128ec:	687b      	ldr	r3, [r7, #4]
   128ee:	0018      	movs	r0, r3
   128f0:	4b04      	ldr	r3, [pc, #16]	; (12904 <_i2c_master_async_address_response+0xb8>)
   128f2:	4798      	blx	r3
}
   128f4:	46c0      	nop			; (mov r8, r8)
   128f6:	46bd      	mov	sp, r7
   128f8:	b004      	add	sp, #16
   128fa:	bd80      	pop	{r7, pc}
   128fc:	000126bd 	.word	0x000126bd
   12900:	000127d1 	.word	0x000127d1
   12904:	000126e1 	.word	0x000126e1

00012908 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   12908:	b580      	push	{r7, lr}
   1290a:	b084      	sub	sp, #16
   1290c:	af00      	add	r7, sp, #0
   1290e:	60f8      	str	r0, [r7, #12]
   12910:	60b9      	str	r1, [r7, #8]
   12912:	1dfb      	adds	r3, r7, #7
   12914:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	68fa      	ldr	r2, [r7, #12]
   1291c:	3302      	adds	r3, #2
   1291e:	009b      	lsls	r3, r3, #2
   12920:	18d3      	adds	r3, r2, r3
   12922:	3304      	adds	r3, #4
   12924:	68ba      	ldr	r2, [r7, #8]
   12926:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   12928:	68fb      	ldr	r3, [r7, #12]
   1292a:	7e1b      	ldrb	r3, [r3, #24]
   1292c:	b2db      	uxtb	r3, r3
   1292e:	b25a      	sxtb	r2, r3
   12930:	1dfb      	adds	r3, r7, #7
   12932:	781b      	ldrb	r3, [r3, #0]
   12934:	2101      	movs	r1, #1
   12936:	4099      	lsls	r1, r3
   12938:	000b      	movs	r3, r1
   1293a:	b25b      	sxtb	r3, r3
   1293c:	4313      	orrs	r3, r2
   1293e:	b25b      	sxtb	r3, r3
   12940:	b2da      	uxtb	r2, r3
   12942:	68fb      	ldr	r3, [r7, #12]
   12944:	761a      	strb	r2, [r3, #24]
}
   12946:	46c0      	nop			; (mov r8, r8)
   12948:	46bd      	mov	sp, r7
   1294a:	b004      	add	sp, #16
   1294c:	bd80      	pop	{r7, pc}
	...

00012950 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12950:	b590      	push	{r4, r7, lr}
   12952:	b087      	sub	sp, #28
   12954:	af00      	add	r7, sp, #0
   12956:	6078      	str	r0, [r7, #4]
   12958:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1295a:	687b      	ldr	r3, [r7, #4]
   1295c:	681b      	ldr	r3, [r3, #0]
   1295e:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   12960:	683b      	ldr	r3, [r7, #0]
   12962:	685a      	ldr	r2, [r3, #4]
   12964:	687b      	ldr	r3, [r7, #4]
   12966:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12968:	683b      	ldr	r3, [r7, #0]
   1296a:	885a      	ldrh	r2, [r3, #2]
   1296c:	687b      	ldr	r3, [r7, #4]
   1296e:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   12970:	687b      	ldr	r3, [r7, #4]
   12972:	2224      	movs	r2, #36	; 0x24
   12974:	2101      	movs	r1, #1
   12976:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12978:	687b      	ldr	r3, [r7, #4]
   1297a:	2225      	movs	r2, #37	; 0x25
   1297c:	2105      	movs	r1, #5
   1297e:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12980:	693b      	ldr	r3, [r7, #16]
   12982:	681b      	ldr	r3, [r3, #0]
   12984:	011b      	lsls	r3, r3, #4
   12986:	0fdb      	lsrs	r3, r3, #31
   12988:	b2db      	uxtb	r3, r3
   1298a:	001a      	movs	r2, r3
   1298c:	230f      	movs	r3, #15
   1298e:	18fb      	adds	r3, r7, r3
   12990:	1e51      	subs	r1, r2, #1
   12992:	418a      	sbcs	r2, r1
   12994:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12996:	683b      	ldr	r3, [r7, #0]
   12998:	7a5b      	ldrb	r3, [r3, #9]
   1299a:	2b00      	cmp	r3, #0
   1299c:	d006      	beq.n	129ac <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   1299e:	683b      	ldr	r3, [r7, #0]
   129a0:	7a9a      	ldrb	r2, [r3, #10]
   129a2:	687b      	ldr	r3, [r7, #4]
   129a4:	0011      	movs	r1, r2
   129a6:	0018      	movs	r0, r3
   129a8:	4b3b      	ldr	r3, [pc, #236]	; (12a98 <_i2c_master_read_packet+0x148>)
   129aa:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	781b      	ldrb	r3, [r3, #0]
   129b2:	2b00      	cmp	r3, #0
   129b4:	d00b      	beq.n	129ce <_i2c_master_read_packet+0x7e>
   129b6:	683b      	ldr	r3, [r7, #0]
   129b8:	885b      	ldrh	r3, [r3, #2]
   129ba:	2b01      	cmp	r3, #1
   129bc:	d107      	bne.n	129ce <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   129be:	693b      	ldr	r3, [r7, #16]
   129c0:	685b      	ldr	r3, [r3, #4]
   129c2:	2280      	movs	r2, #128	; 0x80
   129c4:	02d2      	lsls	r2, r2, #11
   129c6:	431a      	orrs	r2, r3
   129c8:	693b      	ldr	r3, [r7, #16]
   129ca:	605a      	str	r2, [r3, #4]
   129cc:	e005      	b.n	129da <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   129ce:	693b      	ldr	r3, [r7, #16]
   129d0:	685b      	ldr	r3, [r3, #4]
   129d2:	4a32      	ldr	r2, [pc, #200]	; (12a9c <_i2c_master_read_packet+0x14c>)
   129d4:	401a      	ands	r2, r3
   129d6:	693b      	ldr	r3, [r7, #16]
   129d8:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   129da:	683b      	ldr	r3, [r7, #0]
   129dc:	7a1b      	ldrb	r3, [r3, #8]
   129de:	2b00      	cmp	r3, #0
   129e0:	d045      	beq.n	12a6e <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   129e2:	683b      	ldr	r3, [r7, #0]
   129e4:	881b      	ldrh	r3, [r3, #0]
   129e6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129e8:	683b      	ldr	r3, [r7, #0]
   129ea:	7a5b      	ldrb	r3, [r3, #9]
   129ec:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   129ee:	4313      	orrs	r3, r2
   129f0:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129f2:	2380      	movs	r3, #128	; 0x80
   129f4:	021b      	lsls	r3, r3, #8
   129f6:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   129f8:	693b      	ldr	r3, [r7, #16]
   129fa:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   129fc:	2317      	movs	r3, #23
   129fe:	18fc      	adds	r4, r7, r3
   12a00:	687b      	ldr	r3, [r7, #4]
   12a02:	0018      	movs	r0, r3
   12a04:	4b26      	ldr	r3, [pc, #152]	; (12aa0 <_i2c_master_read_packet+0x150>)
   12a06:	4798      	blx	r3
   12a08:	0003      	movs	r3, r0
   12a0a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12a0c:	693b      	ldr	r3, [r7, #16]
   12a0e:	685b      	ldr	r3, [r3, #4]
   12a10:	4a22      	ldr	r2, [pc, #136]	; (12a9c <_i2c_master_read_packet+0x14c>)
   12a12:	401a      	ands	r2, r3
   12a14:	693b      	ldr	r3, [r7, #16]
   12a16:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   12a18:	2317      	movs	r3, #23
   12a1a:	18fb      	adds	r3, r7, r3
   12a1c:	781b      	ldrb	r3, [r3, #0]
   12a1e:	2b00      	cmp	r3, #0
   12a20:	d107      	bne.n	12a32 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   12a22:	2317      	movs	r3, #23
   12a24:	18fc      	adds	r4, r7, r3
   12a26:	687b      	ldr	r3, [r7, #4]
   12a28:	0018      	movs	r0, r3
   12a2a:	4b1e      	ldr	r3, [pc, #120]	; (12aa4 <_i2c_master_read_packet+0x154>)
   12a2c:	4798      	blx	r3
   12a2e:	0003      	movs	r3, r0
   12a30:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   12a32:	2317      	movs	r3, #23
   12a34:	18fb      	adds	r3, r7, r3
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	2b00      	cmp	r3, #0
   12a3a:	d114      	bne.n	12a66 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   12a3c:	693b      	ldr	r3, [r7, #16]
   12a3e:	2203      	movs	r2, #3
   12a40:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a42:	683b      	ldr	r3, [r7, #0]
   12a44:	881b      	ldrh	r3, [r3, #0]
   12a46:	0a1b      	lsrs	r3, r3, #8
   12a48:	b29b      	uxth	r3, r3
   12a4a:	2278      	movs	r2, #120	; 0x78
   12a4c:	4313      	orrs	r3, r2
   12a4e:	b29b      	uxth	r3, r3
   12a50:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a52:	683b      	ldr	r3, [r7, #0]
   12a54:	7a5b      	ldrb	r3, [r3, #9]
   12a56:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a58:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a5a:	2201      	movs	r2, #1
   12a5c:	4313      	orrs	r3, r2
   12a5e:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a60:	693b      	ldr	r3, [r7, #16]
   12a62:	625a      	str	r2, [r3, #36]	; 0x24
   12a64:	e012      	b.n	12a8c <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   12a66:	2317      	movs	r3, #23
   12a68:	18fb      	adds	r3, r7, r3
   12a6a:	781b      	ldrb	r3, [r3, #0]
   12a6c:	e00f      	b.n	12a8e <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   12a6e:	693b      	ldr	r3, [r7, #16]
   12a70:	2203      	movs	r2, #3
   12a72:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a74:	683b      	ldr	r3, [r7, #0]
   12a76:	881b      	ldrh	r3, [r3, #0]
   12a78:	005b      	lsls	r3, r3, #1
   12a7a:	2201      	movs	r2, #1
   12a7c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12a7e:	683b      	ldr	r3, [r7, #0]
   12a80:	7a5b      	ldrb	r3, [r3, #9]
   12a82:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a84:	4313      	orrs	r3, r2
   12a86:	001a      	movs	r2, r3
   12a88:	693b      	ldr	r3, [r7, #16]
   12a8a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12a8c:	2300      	movs	r3, #0
}
   12a8e:	0018      	movs	r0, r3
   12a90:	46bd      	mov	sp, r7
   12a92:	b007      	add	sp, #28
   12a94:	bd90      	pop	{r4, r7, pc}
   12a96:	46c0      	nop			; (mov r8, r8)
   12a98:	00017971 	.word	0x00017971
   12a9c:	fffbffff 	.word	0xfffbffff
   12aa0:	00017913 	.word	0x00017913
   12aa4:	000178b5 	.word	0x000178b5

00012aa8 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12aa8:	b580      	push	{r7, lr}
   12aaa:	b082      	sub	sp, #8
   12aac:	af00      	add	r7, sp, #0
   12aae:	6078      	str	r0, [r7, #4]
   12ab0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   12ab2:	687b      	ldr	r3, [r7, #4]
   12ab4:	8b9b      	ldrh	r3, [r3, #28]
   12ab6:	b29b      	uxth	r3, r3
   12ab8:	2b00      	cmp	r3, #0
   12aba:	d001      	beq.n	12ac0 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   12abc:	2305      	movs	r3, #5
   12abe:	e00c      	b.n	12ada <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   12ac0:	687b      	ldr	r3, [r7, #4]
   12ac2:	2201      	movs	r2, #1
   12ac4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12ac6:	687b      	ldr	r3, [r7, #4]
   12ac8:	2201      	movs	r2, #1
   12aca:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   12acc:	683a      	ldr	r2, [r7, #0]
   12ace:	687b      	ldr	r3, [r7, #4]
   12ad0:	0011      	movs	r1, r2
   12ad2:	0018      	movs	r0, r3
   12ad4:	4b03      	ldr	r3, [pc, #12]	; (12ae4 <i2c_master_read_packet_job+0x3c>)
   12ad6:	4798      	blx	r3
   12ad8:	0003      	movs	r3, r0
}
   12ada:	0018      	movs	r0, r3
   12adc:	46bd      	mov	sp, r7
   12ade:	b002      	add	sp, #8
   12ae0:	bd80      	pop	{r7, pc}
   12ae2:	46c0      	nop			; (mov r8, r8)
   12ae4:	00012951 	.word	0x00012951

00012ae8 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12ae8:	b580      	push	{r7, lr}
   12aea:	b084      	sub	sp, #16
   12aec:	af00      	add	r7, sp, #0
   12aee:	6078      	str	r0, [r7, #4]
   12af0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12af2:	687b      	ldr	r3, [r7, #4]
   12af4:	681b      	ldr	r3, [r3, #0]
   12af6:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12af8:	683b      	ldr	r3, [r7, #0]
   12afa:	7a5b      	ldrb	r3, [r3, #9]
   12afc:	2b00      	cmp	r3, #0
   12afe:	d006      	beq.n	12b0e <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   12b00:	683b      	ldr	r3, [r7, #0]
   12b02:	7a9a      	ldrb	r2, [r3, #10]
   12b04:	687b      	ldr	r3, [r7, #4]
   12b06:	0011      	movs	r1, r2
   12b08:	0018      	movs	r0, r3
   12b0a:	4b1e      	ldr	r3, [pc, #120]	; (12b84 <_i2c_master_write_packet+0x9c>)
   12b0c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12b0e:	68fb      	ldr	r3, [r7, #12]
   12b10:	685b      	ldr	r3, [r3, #4]
   12b12:	4a1d      	ldr	r2, [pc, #116]	; (12b88 <_i2c_master_write_packet+0xa0>)
   12b14:	401a      	ands	r2, r3
   12b16:	68fb      	ldr	r3, [r7, #12]
   12b18:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   12b1a:	683b      	ldr	r3, [r7, #0]
   12b1c:	685a      	ldr	r2, [r3, #4]
   12b1e:	687b      	ldr	r3, [r7, #4]
   12b20:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12b22:	683b      	ldr	r3, [r7, #0]
   12b24:	885a      	ldrh	r2, [r3, #2]
   12b26:	687b      	ldr	r3, [r7, #4]
   12b28:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   12b2a:	687b      	ldr	r3, [r7, #4]
   12b2c:	2224      	movs	r2, #36	; 0x24
   12b2e:	2100      	movs	r1, #0
   12b30:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12b32:	687b      	ldr	r3, [r7, #4]
   12b34:	2225      	movs	r2, #37	; 0x25
   12b36:	2105      	movs	r1, #5
   12b38:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   12b3a:	68fb      	ldr	r3, [r7, #12]
   12b3c:	2203      	movs	r2, #3
   12b3e:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   12b40:	683b      	ldr	r3, [r7, #0]
   12b42:	7a1b      	ldrb	r3, [r3, #8]
   12b44:	2b00      	cmp	r3, #0
   12b46:	d00d      	beq.n	12b64 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b48:	683b      	ldr	r3, [r7, #0]
   12b4a:	881b      	ldrh	r3, [r3, #0]
   12b4c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b4e:	683b      	ldr	r3, [r7, #0]
   12b50:	7a5b      	ldrb	r3, [r3, #9]
   12b52:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b54:	4313      	orrs	r3, r2
   12b56:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b58:	2380      	movs	r3, #128	; 0x80
   12b5a:	021b      	lsls	r3, r3, #8
   12b5c:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b5e:	68fb      	ldr	r3, [r7, #12]
   12b60:	625a      	str	r2, [r3, #36]	; 0x24
   12b62:	e009      	b.n	12b78 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b64:	683b      	ldr	r3, [r7, #0]
   12b66:	881b      	ldrh	r3, [r3, #0]
   12b68:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12b6a:	683b      	ldr	r3, [r7, #0]
   12b6c:	7a5b      	ldrb	r3, [r3, #9]
   12b6e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b70:	4313      	orrs	r3, r2
   12b72:	001a      	movs	r2, r3
   12b74:	68fb      	ldr	r3, [r7, #12]
   12b76:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12b78:	2300      	movs	r3, #0
}
   12b7a:	0018      	movs	r0, r3
   12b7c:	46bd      	mov	sp, r7
   12b7e:	b004      	add	sp, #16
   12b80:	bd80      	pop	{r7, pc}
   12b82:	46c0      	nop			; (mov r8, r8)
   12b84:	00017971 	.word	0x00017971
   12b88:	fffbffff 	.word	0xfffbffff

00012b8c <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12b8c:	b580      	push	{r7, lr}
   12b8e:	b082      	sub	sp, #8
   12b90:	af00      	add	r7, sp, #0
   12b92:	6078      	str	r0, [r7, #4]
   12b94:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12b96:	687b      	ldr	r3, [r7, #4]
   12b98:	8b9b      	ldrh	r3, [r3, #28]
   12b9a:	b29b      	uxth	r3, r3
   12b9c:	2b00      	cmp	r3, #0
   12b9e:	d001      	beq.n	12ba4 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   12ba0:	2305      	movs	r3, #5
   12ba2:	e00c      	b.n	12bbe <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   12ba4:	687b      	ldr	r3, [r7, #4]
   12ba6:	2201      	movs	r2, #1
   12ba8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12baa:	687b      	ldr	r3, [r7, #4]
   12bac:	2201      	movs	r2, #1
   12bae:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   12bb0:	683a      	ldr	r2, [r7, #0]
   12bb2:	687b      	ldr	r3, [r7, #4]
   12bb4:	0011      	movs	r1, r2
   12bb6:	0018      	movs	r0, r3
   12bb8:	4b03      	ldr	r3, [pc, #12]	; (12bc8 <i2c_master_write_packet_job+0x3c>)
   12bba:	4798      	blx	r3
   12bbc:	0003      	movs	r3, r0
}
   12bbe:	0018      	movs	r0, r3
   12bc0:	46bd      	mov	sp, r7
   12bc2:	b002      	add	sp, #8
   12bc4:	bd80      	pop	{r7, pc}
   12bc6:	46c0      	nop			; (mov r8, r8)
   12bc8:	00012ae9 	.word	0x00012ae9

00012bcc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   12bcc:	b580      	push	{r7, lr}
   12bce:	b086      	sub	sp, #24
   12bd0:	af00      	add	r7, sp, #0
   12bd2:	0002      	movs	r2, r0
   12bd4:	1dfb      	adds	r3, r7, #7
   12bd6:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   12bd8:	1dfb      	adds	r3, r7, #7
   12bda:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   12bdc:	4b93      	ldr	r3, [pc, #588]	; (12e2c <_i2c_master_interrupt_handler+0x260>)
   12bde:	0092      	lsls	r2, r2, #2
   12be0:	58d3      	ldr	r3, [r2, r3]
   12be2:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12be4:	697b      	ldr	r3, [r7, #20]
   12be6:	681b      	ldr	r3, [r3, #0]
   12be8:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12bea:	693b      	ldr	r3, [r7, #16]
   12bec:	681b      	ldr	r3, [r3, #0]
   12bee:	011b      	lsls	r3, r3, #4
   12bf0:	0fdb      	lsrs	r3, r3, #31
   12bf2:	b2db      	uxtb	r3, r3
   12bf4:	001a      	movs	r2, r3
   12bf6:	230f      	movs	r3, #15
   12bf8:	18fb      	adds	r3, r7, r3
   12bfa:	1e51      	subs	r1, r2, #1
   12bfc:	418a      	sbcs	r2, r1
   12bfe:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   12c00:	230e      	movs	r3, #14
   12c02:	18fb      	adds	r3, r7, r3
   12c04:	697a      	ldr	r2, [r7, #20]
   12c06:	7e52      	ldrb	r2, [r2, #25]
   12c08:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   12c0a:	697b      	ldr	r3, [r7, #20]
   12c0c:	7e1b      	ldrb	r3, [r3, #24]
   12c0e:	b2da      	uxtb	r2, r3
   12c10:	230e      	movs	r3, #14
   12c12:	18fb      	adds	r3, r7, r3
   12c14:	210e      	movs	r1, #14
   12c16:	1879      	adds	r1, r7, r1
   12c18:	7809      	ldrb	r1, [r1, #0]
   12c1a:	400a      	ands	r2, r1
   12c1c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   12c1e:	697b      	ldr	r3, [r7, #20]
   12c20:	8b5b      	ldrh	r3, [r3, #26]
   12c22:	b29b      	uxth	r3, r3
   12c24:	2b00      	cmp	r3, #0
   12c26:	d109      	bne.n	12c3c <_i2c_master_interrupt_handler+0x70>
   12c28:	697b      	ldr	r3, [r7, #20]
   12c2a:	8b9b      	ldrh	r3, [r3, #28]
   12c2c:	b29b      	uxth	r3, r3
   12c2e:	2b00      	cmp	r3, #0
   12c30:	d004      	beq.n	12c3c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   12c32:	697b      	ldr	r3, [r7, #20]
   12c34:	0018      	movs	r0, r3
   12c36:	4b7e      	ldr	r3, [pc, #504]	; (12e30 <_i2c_master_interrupt_handler+0x264>)
   12c38:	4798      	blx	r3
   12c3a:	e070      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c3c:	697b      	ldr	r3, [r7, #20]
   12c3e:	8b5b      	ldrh	r3, [r3, #26]
   12c40:	b29b      	uxth	r3, r3
   12c42:	2b00      	cmp	r3, #0
   12c44:	d039      	beq.n	12cba <_i2c_master_interrupt_handler+0xee>
   12c46:	697b      	ldr	r3, [r7, #20]
   12c48:	8b9b      	ldrh	r3, [r3, #28]
   12c4a:	b29b      	uxth	r3, r3
   12c4c:	2b00      	cmp	r3, #0
   12c4e:	d134      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   12c50:	697b      	ldr	r3, [r7, #20]
   12c52:	2225      	movs	r2, #37	; 0x25
   12c54:	5c9b      	ldrb	r3, [r3, r2]
   12c56:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c58:	2b05      	cmp	r3, #5
   12c5a:	d12e      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12c5c:	697b      	ldr	r3, [r7, #20]
   12c5e:	2224      	movs	r2, #36	; 0x24
   12c60:	5c9b      	ldrb	r3, [r3, r2]
   12c62:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12c64:	2b00      	cmp	r3, #0
   12c66:	d128      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12c68:	693b      	ldr	r3, [r7, #16]
   12c6a:	2203      	movs	r2, #3
   12c6c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12c6e:	697b      	ldr	r3, [r7, #20]
   12c70:	2200      	movs	r2, #0
   12c72:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12c74:	697b      	ldr	r3, [r7, #20]
   12c76:	2225      	movs	r2, #37	; 0x25
   12c78:	2100      	movs	r1, #0
   12c7a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   12c7c:	697b      	ldr	r3, [r7, #20]
   12c7e:	7a9b      	ldrb	r3, [r3, #10]
   12c80:	2b00      	cmp	r3, #0
   12c82:	d00b      	beq.n	12c9c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   12c84:	697b      	ldr	r3, [r7, #20]
   12c86:	0018      	movs	r0, r3
   12c88:	4b6a      	ldr	r3, [pc, #424]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12c8a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12c8c:	693b      	ldr	r3, [r7, #16]
   12c8e:	685b      	ldr	r3, [r3, #4]
   12c90:	22c0      	movs	r2, #192	; 0xc0
   12c92:	0292      	lsls	r2, r2, #10
   12c94:	431a      	orrs	r2, r3
   12c96:	693b      	ldr	r3, [r7, #16]
   12c98:	605a      	str	r2, [r3, #4]
   12c9a:	e002      	b.n	12ca2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   12c9c:	693b      	ldr	r3, [r7, #16]
   12c9e:	2201      	movs	r2, #1
   12ca0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12ca2:	230e      	movs	r3, #14
   12ca4:	18fb      	adds	r3, r7, r3
   12ca6:	781b      	ldrb	r3, [r3, #0]
   12ca8:	2201      	movs	r2, #1
   12caa:	4013      	ands	r3, r2
   12cac:	d037      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12cae:	697b      	ldr	r3, [r7, #20]
   12cb0:	68db      	ldr	r3, [r3, #12]
   12cb2:	697a      	ldr	r2, [r7, #20]
   12cb4:	0010      	movs	r0, r2
   12cb6:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12cb8:	e031      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   12cba:	697b      	ldr	r3, [r7, #20]
   12cbc:	8b5b      	ldrh	r3, [r3, #26]
   12cbe:	b29b      	uxth	r3, r3
   12cc0:	2b00      	cmp	r3, #0
   12cc2:	d02c      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
   12cc4:	697b      	ldr	r3, [r7, #20]
   12cc6:	8b9b      	ldrh	r3, [r3, #28]
   12cc8:	b29b      	uxth	r3, r3
   12cca:	2b00      	cmp	r3, #0
   12ccc:	d027      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12cce:	693b      	ldr	r3, [r7, #16]
   12cd0:	8b5b      	ldrh	r3, [r3, #26]
   12cd2:	b29b      	uxth	r3, r3
   12cd4:	001a      	movs	r2, r3
   12cd6:	2320      	movs	r3, #32
   12cd8:	4013      	ands	r3, r2
   12cda:	d111      	bne.n	12d00 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cdc:	230f      	movs	r3, #15
   12cde:	18fb      	adds	r3, r7, r3
   12ce0:	781b      	ldrb	r3, [r3, #0]
   12ce2:	2201      	movs	r2, #1
   12ce4:	4053      	eors	r3, r2
   12ce6:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12ce8:	2b00      	cmp	r3, #0
   12cea:	d104      	bne.n	12cf6 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cec:	697b      	ldr	r3, [r7, #20]
   12cee:	8b9b      	ldrh	r3, [r3, #28]
   12cf0:	b29b      	uxth	r3, r3
   12cf2:	2b01      	cmp	r3, #1
   12cf4:	d004      	beq.n	12d00 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   12cf6:	697b      	ldr	r3, [r7, #20]
   12cf8:	2225      	movs	r2, #37	; 0x25
   12cfa:	2141      	movs	r1, #65	; 0x41
   12cfc:	5499      	strb	r1, [r3, r2]
   12cfe:	e00e      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12d00:	697b      	ldr	r3, [r7, #20]
   12d02:	2224      	movs	r2, #36	; 0x24
   12d04:	5c9b      	ldrb	r3, [r3, r2]
   12d06:	b2db      	uxtb	r3, r3
   12d08:	2b00      	cmp	r3, #0
   12d0a:	d104      	bne.n	12d16 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   12d0c:	697b      	ldr	r3, [r7, #20]
   12d0e:	0018      	movs	r0, r3
   12d10:	4b49      	ldr	r3, [pc, #292]	; (12e38 <_i2c_master_interrupt_handler+0x26c>)
   12d12:	4798      	blx	r3
   12d14:	e003      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   12d16:	697b      	ldr	r3, [r7, #20]
   12d18:	0018      	movs	r0, r3
   12d1a:	4b48      	ldr	r3, [pc, #288]	; (12e3c <_i2c_master_interrupt_handler+0x270>)
   12d1c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d1e:	697b      	ldr	r3, [r7, #20]
   12d20:	8b5b      	ldrh	r3, [r3, #26]
   12d22:	b29b      	uxth	r3, r3
   12d24:	2b00      	cmp	r3, #0
   12d26:	d047      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
   12d28:	697b      	ldr	r3, [r7, #20]
   12d2a:	8b9b      	ldrh	r3, [r3, #28]
   12d2c:	b29b      	uxth	r3, r3
   12d2e:	2b00      	cmp	r3, #0
   12d30:	d142      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   12d32:	697b      	ldr	r3, [r7, #20]
   12d34:	2225      	movs	r2, #37	; 0x25
   12d36:	5c9b      	ldrb	r3, [r3, r2]
   12d38:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d3a:	2b05      	cmp	r3, #5
   12d3c:	d13c      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   12d3e:	697b      	ldr	r3, [r7, #20]
   12d40:	2224      	movs	r2, #36	; 0x24
   12d42:	5c9b      	ldrb	r3, [r3, r2]
   12d44:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12d46:	2b01      	cmp	r3, #1
   12d48:	d136      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   12d4a:	693b      	ldr	r3, [r7, #16]
   12d4c:	7e1b      	ldrb	r3, [r3, #24]
   12d4e:	b2db      	uxtb	r3, r3
   12d50:	001a      	movs	r2, r3
   12d52:	2302      	movs	r3, #2
   12d54:	4013      	ands	r3, r2
   12d56:	d002      	beq.n	12d5e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   12d58:	693b      	ldr	r3, [r7, #16]
   12d5a:	2202      	movs	r2, #2
   12d5c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12d5e:	693b      	ldr	r3, [r7, #16]
   12d60:	2203      	movs	r2, #3
   12d62:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   12d64:	697b      	ldr	r3, [r7, #20]
   12d66:	2200      	movs	r2, #0
   12d68:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12d6a:	697b      	ldr	r3, [r7, #20]
   12d6c:	2225      	movs	r2, #37	; 0x25
   12d6e:	2100      	movs	r1, #0
   12d70:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   12d72:	230e      	movs	r3, #14
   12d74:	18fb      	adds	r3, r7, r3
   12d76:	781b      	ldrb	r3, [r3, #0]
   12d78:	2202      	movs	r2, #2
   12d7a:	4013      	ands	r3, r2
   12d7c:	d00b      	beq.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   12d7e:	697b      	ldr	r3, [r7, #20]
   12d80:	2224      	movs	r2, #36	; 0x24
   12d82:	5c9b      	ldrb	r3, [r3, r2]
   12d84:	b2db      	uxtb	r3, r3
   12d86:	2b01      	cmp	r3, #1
   12d88:	d105      	bne.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   12d8a:	697b      	ldr	r3, [r7, #20]
   12d8c:	691b      	ldr	r3, [r3, #16]
   12d8e:	697a      	ldr	r2, [r7, #20]
   12d90:	0010      	movs	r0, r2
   12d92:	4798      	blx	r3
   12d94:	e010      	b.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   12d96:	230e      	movs	r3, #14
   12d98:	18fb      	adds	r3, r7, r3
   12d9a:	781b      	ldrb	r3, [r3, #0]
   12d9c:	2201      	movs	r2, #1
   12d9e:	4013      	ands	r3, r2
   12da0:	d00a      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12da2:	697b      	ldr	r3, [r7, #20]
   12da4:	2224      	movs	r2, #36	; 0x24
   12da6:	5c9b      	ldrb	r3, [r3, r2]
   12da8:	b2db      	uxtb	r3, r3
   12daa:	2b00      	cmp	r3, #0
   12dac:	d104      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12dae:	697b      	ldr	r3, [r7, #20]
   12db0:	68db      	ldr	r3, [r3, #12]
   12db2:	697a      	ldr	r2, [r7, #20]
   12db4:	0010      	movs	r0, r2
   12db6:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   12db8:	697b      	ldr	r3, [r7, #20]
   12dba:	2225      	movs	r2, #37	; 0x25
   12dbc:	5c9b      	ldrb	r3, [r3, r2]
   12dbe:	b2db      	uxtb	r3, r3
   12dc0:	2b05      	cmp	r3, #5
   12dc2:	d02e      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
   12dc4:	697b      	ldr	r3, [r7, #20]
   12dc6:	2225      	movs	r2, #37	; 0x25
   12dc8:	5c9b      	ldrb	r3, [r3, r2]
   12dca:	b2db      	uxtb	r3, r3
   12dcc:	2b00      	cmp	r3, #0
   12dce:	d028      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   12dd0:	693b      	ldr	r3, [r7, #16]
   12dd2:	2203      	movs	r2, #3
   12dd4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12dd6:	697b      	ldr	r3, [r7, #20]
   12dd8:	2200      	movs	r2, #0
   12dda:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   12ddc:	697b      	ldr	r3, [r7, #20]
   12dde:	2200      	movs	r2, #0
   12de0:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12de2:	697b      	ldr	r3, [r7, #20]
   12de4:	2225      	movs	r2, #37	; 0x25
   12de6:	5c9b      	ldrb	r3, [r3, r2]
   12de8:	b2db      	uxtb	r3, r3
   12dea:	2b41      	cmp	r3, #65	; 0x41
   12dec:	d00e      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   12dee:	697b      	ldr	r3, [r7, #20]
   12df0:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12df2:	2b00      	cmp	r3, #0
   12df4:	d00a      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   12df6:	697b      	ldr	r3, [r7, #20]
   12df8:	0018      	movs	r0, r3
   12dfa:	4b0e      	ldr	r3, [pc, #56]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12dfc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   12dfe:	693b      	ldr	r3, [r7, #16]
   12e00:	685b      	ldr	r3, [r3, #4]
   12e02:	22e0      	movs	r2, #224	; 0xe0
   12e04:	02d2      	lsls	r2, r2, #11
   12e06:	431a      	orrs	r2, r3
   12e08:	693b      	ldr	r3, [r7, #16]
   12e0a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   12e0c:	230e      	movs	r3, #14
   12e0e:	18fb      	adds	r3, r7, r3
   12e10:	781b      	ldrb	r3, [r3, #0]
   12e12:	2204      	movs	r2, #4
   12e14:	4013      	ands	r3, r2
   12e16:	d004      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   12e18:	697b      	ldr	r3, [r7, #20]
   12e1a:	695b      	ldr	r3, [r3, #20]
   12e1c:	697a      	ldr	r2, [r7, #20]
   12e1e:	0010      	movs	r0, r2
   12e20:	4798      	blx	r3
		}
	}
}
   12e22:	46c0      	nop			; (mov r8, r8)
   12e24:	46bd      	mov	sp, r7
   12e26:	b006      	add	sp, #24
   12e28:	bd80      	pop	{r7, pc}
   12e2a:	46c0      	nop			; (mov r8, r8)
   12e2c:	20005a38 	.word	0x20005a38
   12e30:	0001284d 	.word	0x0001284d
   12e34:	000126bd 	.word	0x000126bd
   12e38:	000127d1 	.word	0x000127d1
   12e3c:	000126e1 	.word	0x000126e1

00012e40 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   12e40:	b580      	push	{r7, lr}
   12e42:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   12e44:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   12e48:	4b02      	ldr	r3, [pc, #8]	; (12e54 <NVIC_SystemReset+0x14>)
   12e4a:	4a03      	ldr	r2, [pc, #12]	; (12e58 <NVIC_SystemReset+0x18>)
   12e4c:	60da      	str	r2, [r3, #12]
   12e4e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   12e52:	e7fe      	b.n	12e52 <NVIC_SystemReset+0x12>
   12e54:	e000ed00 	.word	0xe000ed00
   12e58:	05fa0004 	.word	0x05fa0004

00012e5c <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   12e5c:	b580      	push	{r7, lr}
   12e5e:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   12e60:	4b02      	ldr	r3, [pc, #8]	; (12e6c <system_reset+0x10>)
   12e62:	4798      	blx	r3
}
   12e64:	46c0      	nop			; (mov r8, r8)
   12e66:	46bd      	mov	sp, r7
   12e68:	bd80      	pop	{r7, pc}
   12e6a:	46c0      	nop			; (mov r8, r8)
   12e6c:	00012e41 	.word	0x00012e41

00012e70 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   12e70:	b580      	push	{r7, lr}
   12e72:	b086      	sub	sp, #24
   12e74:	af00      	add	r7, sp, #0
   12e76:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   12e78:	4b9e      	ldr	r3, [pc, #632]	; (130f4 <vCommandConsoleTask+0x284>)
   12e7a:	0018      	movs	r0, r3
   12e7c:	4b9e      	ldr	r3, [pc, #632]	; (130f8 <vCommandConsoleTask+0x288>)
   12e7e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   12e80:	4b9e      	ldr	r3, [pc, #632]	; (130fc <vCommandConsoleTask+0x28c>)
   12e82:	0018      	movs	r0, r3
   12e84:	4b9c      	ldr	r3, [pc, #624]	; (130f8 <vCommandConsoleTask+0x288>)
   12e86:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   12e88:	4b9d      	ldr	r3, [pc, #628]	; (13100 <vCommandConsoleTask+0x290>)
   12e8a:	0018      	movs	r0, r3
   12e8c:	4b9a      	ldr	r3, [pc, #616]	; (130f8 <vCommandConsoleTask+0x288>)
   12e8e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   12e90:	4b9c      	ldr	r3, [pc, #624]	; (13104 <vCommandConsoleTask+0x294>)
   12e92:	0018      	movs	r0, r3
   12e94:	4b98      	ldr	r3, [pc, #608]	; (130f8 <vCommandConsoleTask+0x288>)
   12e96:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
   12e98:	4b9b      	ldr	r3, [pc, #620]	; (13108 <vCommandConsoleTask+0x298>)
   12e9a:	0018      	movs	r0, r3
   12e9c:	4b96      	ldr	r3, [pc, #600]	; (130f8 <vCommandConsoleTask+0x288>)
   12e9e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
   12ea0:	4b9a      	ldr	r3, [pc, #616]	; (1310c <vCommandConsoleTask+0x29c>)
   12ea2:	0018      	movs	r0, r3
   12ea4:	4b94      	ldr	r3, [pc, #592]	; (130f8 <vCommandConsoleTask+0x288>)
   12ea6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
   12ea8:	4b99      	ldr	r3, [pc, #612]	; (13110 <vCommandConsoleTask+0x2a0>)
   12eaa:	0018      	movs	r0, r3
   12eac:	4b92      	ldr	r3, [pc, #584]	; (130f8 <vCommandConsoleTask+0x288>)
   12eae:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
   12eb0:	4b98      	ldr	r3, [pc, #608]	; (13114 <vCommandConsoleTask+0x2a4>)
   12eb2:	0018      	movs	r0, r3
   12eb4:	4b90      	ldr	r3, [pc, #576]	; (130f8 <vCommandConsoleTask+0x288>)
   12eb6:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   12eb8:	4b97      	ldr	r3, [pc, #604]	; (13118 <vCommandConsoleTask+0x2a8>)
   12eba:	0018      	movs	r0, r3
   12ebc:	4b8e      	ldr	r3, [pc, #568]	; (130f8 <vCommandConsoleTask+0x288>)
   12ebe:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   12ec0:	2317      	movs	r3, #23
   12ec2:	18fb      	adds	r3, r7, r3
   12ec4:	2200      	movs	r2, #0
   12ec6:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   12ec8:	4b94      	ldr	r3, [pc, #592]	; (1311c <vCommandConsoleTask+0x2ac>)
   12eca:	0018      	movs	r0, r3
   12ecc:	4b94      	ldr	r3, [pc, #592]	; (13120 <vCommandConsoleTask+0x2b0>)
   12ece:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   12ed0:	2203      	movs	r2, #3
   12ed2:	2100      	movs	r1, #0
   12ed4:	2001      	movs	r0, #1
   12ed6:	4b93      	ldr	r3, [pc, #588]	; (13124 <vCommandConsoleTask+0x2b4>)
   12ed8:	4798      	blx	r3
   12eda:	0002      	movs	r2, r0
   12edc:	4b92      	ldr	r3, [pc, #584]	; (13128 <vCommandConsoleTask+0x2b8>)
   12ede:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   12ee0:	4b91      	ldr	r3, [pc, #580]	; (13128 <vCommandConsoleTask+0x2b8>)
   12ee2:	681b      	ldr	r3, [r3, #0]
   12ee4:	2b00      	cmp	r3, #0
   12ee6:	d107      	bne.n	12ef8 <vCommandConsoleTask+0x88>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   12ee8:	4b90      	ldr	r3, [pc, #576]	; (1312c <vCommandConsoleTask+0x2bc>)
   12eea:	0019      	movs	r1, r3
   12eec:	2003      	movs	r0, #3
   12eee:	4b90      	ldr	r3, [pc, #576]	; (13130 <vCommandConsoleTask+0x2c0>)
   12ef0:	4798      	blx	r3
        vTaskSuspend(NULL);
   12ef2:	2000      	movs	r0, #0
   12ef4:	4b8f      	ldr	r3, [pc, #572]	; (13134 <vCommandConsoleTask+0x2c4>)
   12ef6:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   12ef8:	230c      	movs	r3, #12
   12efa:	18fb      	adds	r3, r7, r3
   12efc:	0018      	movs	r0, r3
   12efe:	4b8e      	ldr	r3, [pc, #568]	; (13138 <vCommandConsoleTask+0x2c8>)
   12f00:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   12f02:	230c      	movs	r3, #12
   12f04:	18fb      	adds	r3, r7, r3
   12f06:	781b      	ldrb	r3, [r3, #0]
   12f08:	2b0a      	cmp	r3, #10
   12f0a:	d004      	beq.n	12f16 <vCommandConsoleTask+0xa6>
   12f0c:	230c      	movs	r3, #12
   12f0e:	18fb      	adds	r3, r7, r3
   12f10:	781b      	ldrb	r3, [r3, #0]
   12f12:	2b0d      	cmp	r3, #13
   12f14:	d137      	bne.n	12f86 <vCommandConsoleTask+0x116>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   12f16:	4b89      	ldr	r3, [pc, #548]	; (1313c <vCommandConsoleTask+0x2cc>)
   12f18:	0018      	movs	r0, r3
   12f1a:	4b81      	ldr	r3, [pc, #516]	; (13120 <vCommandConsoleTask+0x2b0>)
   12f1c:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   12f1e:	4b88      	ldr	r3, [pc, #544]	; (13140 <vCommandConsoleTask+0x2d0>)
   12f20:	2200      	movs	r2, #0
   12f22:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   12f24:	4b87      	ldr	r3, [pc, #540]	; (13144 <vCommandConsoleTask+0x2d4>)
   12f26:	2200      	movs	r2, #0
   12f28:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   12f2a:	4987      	ldr	r1, [pc, #540]	; (13148 <vCommandConsoleTask+0x2d8>)
   12f2c:	4b87      	ldr	r3, [pc, #540]	; (1314c <vCommandConsoleTask+0x2dc>)
   12f2e:	2231      	movs	r2, #49	; 0x31
   12f30:	0018      	movs	r0, r3
   12f32:	4b87      	ldr	r3, [pc, #540]	; (13150 <vCommandConsoleTask+0x2e0>)
   12f34:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   12f36:	4b85      	ldr	r3, [pc, #532]	; (1314c <vCommandConsoleTask+0x2dc>)
   12f38:	2231      	movs	r2, #49	; 0x31
   12f3a:	2100      	movs	r1, #0
   12f3c:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   12f3e:	4985      	ldr	r1, [pc, #532]	; (13154 <vCommandConsoleTask+0x2e4>)
   12f40:	4b81      	ldr	r3, [pc, #516]	; (13148 <vCommandConsoleTask+0x2d8>)
   12f42:	2264      	movs	r2, #100	; 0x64
   12f44:	0018      	movs	r0, r3
   12f46:	4b84      	ldr	r3, [pc, #528]	; (13158 <vCommandConsoleTask+0x2e8>)
   12f48:	4798      	blx	r3
   12f4a:	0003      	movs	r3, r0
   12f4c:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   12f4e:	4b81      	ldr	r3, [pc, #516]	; (13154 <vCommandConsoleTask+0x2e4>)
   12f50:	2263      	movs	r2, #99	; 0x63
   12f52:	2100      	movs	r1, #0
   12f54:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   12f56:	4b7f      	ldr	r3, [pc, #508]	; (13154 <vCommandConsoleTask+0x2e4>)
   12f58:	0018      	movs	r0, r3
   12f5a:	4b71      	ldr	r3, [pc, #452]	; (13120 <vCommandConsoleTask+0x2b0>)
   12f5c:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   12f5e:	693b      	ldr	r3, [r7, #16]
   12f60:	2b00      	cmp	r3, #0
   12f62:	d1ec      	bne.n	12f3e <vCommandConsoleTask+0xce>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   12f64:	2317      	movs	r3, #23
   12f66:	18fb      	adds	r3, r7, r3
   12f68:	2200      	movs	r2, #0
   12f6a:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   12f6c:	4b76      	ldr	r3, [pc, #472]	; (13148 <vCommandConsoleTask+0x2d8>)
   12f6e:	2232      	movs	r2, #50	; 0x32
   12f70:	2100      	movs	r1, #0
   12f72:	0018      	movs	r0, r3
   12f74:	4b79      	ldr	r3, [pc, #484]	; (1315c <vCommandConsoleTask+0x2ec>)
   12f76:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   12f78:	4b76      	ldr	r3, [pc, #472]	; (13154 <vCommandConsoleTask+0x2e4>)
   12f7a:	2264      	movs	r2, #100	; 0x64
   12f7c:	2100      	movs	r1, #0
   12f7e:	0018      	movs	r0, r3
   12f80:	4b76      	ldr	r3, [pc, #472]	; (1315c <vCommandConsoleTask+0x2ec>)
   12f82:	4798      	blx	r3
   12f84:	e0b5      	b.n	130f2 <vCommandConsoleTask+0x282>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   12f86:	4b6e      	ldr	r3, [pc, #440]	; (13140 <vCommandConsoleTask+0x2d0>)
   12f88:	781b      	ldrb	r3, [r3, #0]
   12f8a:	2b00      	cmp	r3, #0
   12f8c:	d059      	beq.n	13042 <vCommandConsoleTask+0x1d2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   12f8e:	4b6d      	ldr	r3, [pc, #436]	; (13144 <vCommandConsoleTask+0x2d4>)
   12f90:	781b      	ldrb	r3, [r3, #0]
   12f92:	2b03      	cmp	r3, #3
   12f94:	d80c      	bhi.n	12fb0 <vCommandConsoleTask+0x140>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   12f96:	4b6b      	ldr	r3, [pc, #428]	; (13144 <vCommandConsoleTask+0x2d4>)
   12f98:	781b      	ldrb	r3, [r3, #0]
   12f9a:	1c5a      	adds	r2, r3, #1
   12f9c:	b2d1      	uxtb	r1, r2
   12f9e:	4a69      	ldr	r2, [pc, #420]	; (13144 <vCommandConsoleTask+0x2d4>)
   12fa0:	7011      	strb	r1, [r2, #0]
   12fa2:	001a      	movs	r2, r3
   12fa4:	230c      	movs	r3, #12
   12fa6:	18fb      	adds	r3, r7, r3
   12fa8:	7819      	ldrb	r1, [r3, #0]
   12faa:	4b6d      	ldr	r3, [pc, #436]	; (13160 <vCommandConsoleTask+0x2f0>)
   12fac:	5499      	strb	r1, [r3, r2]
   12fae:	e005      	b.n	12fbc <vCommandConsoleTask+0x14c>
                } else {
                    isEscapeCode = false;
   12fb0:	4b63      	ldr	r3, [pc, #396]	; (13140 <vCommandConsoleTask+0x2d0>)
   12fb2:	2200      	movs	r2, #0
   12fb4:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   12fb6:	4b63      	ldr	r3, [pc, #396]	; (13144 <vCommandConsoleTask+0x2d4>)
   12fb8:	2200      	movs	r2, #0
   12fba:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   12fbc:	4b61      	ldr	r3, [pc, #388]	; (13144 <vCommandConsoleTask+0x2d4>)
   12fbe:	781b      	ldrb	r3, [r3, #0]
   12fc0:	2b01      	cmp	r3, #1
   12fc2:	d999      	bls.n	12ef8 <vCommandConsoleTask+0x88>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   12fc4:	4a67      	ldr	r2, [pc, #412]	; (13164 <vCommandConsoleTask+0x2f4>)
   12fc6:	4b66      	ldr	r3, [pc, #408]	; (13160 <vCommandConsoleTask+0x2f0>)
   12fc8:	0011      	movs	r1, r2
   12fca:	0018      	movs	r0, r3
   12fcc:	4b66      	ldr	r3, [pc, #408]	; (13168 <vCommandConsoleTask+0x2f8>)
   12fce:	4798      	blx	r3
   12fd0:	1e03      	subs	r3, r0, #0
   12fd2:	d02f      	beq.n	13034 <vCommandConsoleTask+0x1c4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   12fd4:	4965      	ldr	r1, [pc, #404]	; (1316c <vCommandConsoleTask+0x2fc>)
   12fd6:	4b5c      	ldr	r3, [pc, #368]	; (13148 <vCommandConsoleTask+0x2d8>)
   12fd8:	221b      	movs	r2, #27
   12fda:	0018      	movs	r0, r3
   12fdc:	4b64      	ldr	r3, [pc, #400]	; (13170 <vCommandConsoleTask+0x300>)
   12fde:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   12fe0:	4b59      	ldr	r3, [pc, #356]	; (13148 <vCommandConsoleTask+0x2d8>)
   12fe2:	0018      	movs	r0, r3
   12fe4:	4b4e      	ldr	r3, [pc, #312]	; (13120 <vCommandConsoleTask+0x2b0>)
   12fe6:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   12fe8:	2317      	movs	r3, #23
   12fea:	18fb      	adds	r3, r7, r3
   12fec:	2200      	movs	r2, #0
   12fee:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   12ff0:	4b55      	ldr	r3, [pc, #340]	; (13148 <vCommandConsoleTask+0x2d8>)
   12ff2:	2232      	movs	r2, #50	; 0x32
   12ff4:	2100      	movs	r1, #0
   12ff6:	0018      	movs	r0, r3
   12ff8:	4b58      	ldr	r3, [pc, #352]	; (1315c <vCommandConsoleTask+0x2ec>)
   12ffa:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   12ffc:	4953      	ldr	r1, [pc, #332]	; (1314c <vCommandConsoleTask+0x2dc>)
   12ffe:	4b52      	ldr	r3, [pc, #328]	; (13148 <vCommandConsoleTask+0x2d8>)
   13000:	2231      	movs	r2, #49	; 0x31
   13002:	0018      	movs	r0, r3
   13004:	4b52      	ldr	r3, [pc, #328]	; (13150 <vCommandConsoleTask+0x2e0>)
   13006:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   13008:	4b4f      	ldr	r3, [pc, #316]	; (13148 <vCommandConsoleTask+0x2d8>)
   1300a:	0018      	movs	r0, r3
   1300c:	4b59      	ldr	r3, [pc, #356]	; (13174 <vCommandConsoleTask+0x304>)
   1300e:	4798      	blx	r3
   13010:	0003      	movs	r3, r0
   13012:	2b30      	cmp	r3, #48	; 0x30
   13014:	d806      	bhi.n	13024 <vCommandConsoleTask+0x1b4>
   13016:	4b4d      	ldr	r3, [pc, #308]	; (1314c <vCommandConsoleTask+0x2dc>)
   13018:	0018      	movs	r0, r3
   1301a:	4b56      	ldr	r3, [pc, #344]	; (13174 <vCommandConsoleTask+0x304>)
   1301c:	4798      	blx	r3
   1301e:	0003      	movs	r3, r0
   13020:	b2da      	uxtb	r2, r3
   13022:	e000      	b.n	13026 <vCommandConsoleTask+0x1b6>
   13024:	2231      	movs	r2, #49	; 0x31
   13026:	2317      	movs	r3, #23
   13028:	18fb      	adds	r3, r7, r3
   1302a:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   1302c:	4b46      	ldr	r3, [pc, #280]	; (13148 <vCommandConsoleTask+0x2d8>)
   1302e:	0018      	movs	r0, r3
   13030:	4b3b      	ldr	r3, [pc, #236]	; (13120 <vCommandConsoleTask+0x2b0>)
   13032:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   13034:	4b42      	ldr	r3, [pc, #264]	; (13140 <vCommandConsoleTask+0x2d0>)
   13036:	2200      	movs	r2, #0
   13038:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   1303a:	4b42      	ldr	r3, [pc, #264]	; (13144 <vCommandConsoleTask+0x2d4>)
   1303c:	2200      	movs	r2, #0
   1303e:	701a      	strb	r2, [r3, #0]
   13040:	e75a      	b.n	12ef8 <vCommandConsoleTask+0x88>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   13042:	230c      	movs	r3, #12
   13044:	18fb      	adds	r3, r7, r3
   13046:	781b      	ldrb	r3, [r3, #0]
   13048:	2b0d      	cmp	r3, #13
   1304a:	d100      	bne.n	1304e <vCommandConsoleTask+0x1de>
   1304c:	e754      	b.n	12ef8 <vCommandConsoleTask+0x88>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   1304e:	230c      	movs	r3, #12
   13050:	18fb      	adds	r3, r7, r3
   13052:	781b      	ldrb	r3, [r3, #0]
   13054:	2b08      	cmp	r3, #8
   13056:	d004      	beq.n	13062 <vCommandConsoleTask+0x1f2>
   13058:	230c      	movs	r3, #12
   1305a:	18fb      	adds	r3, r7, r3
   1305c:	781b      	ldrb	r3, [r3, #0]
   1305e:	2b7f      	cmp	r3, #127	; 0x7f
   13060:	d11c      	bne.n	1309c <vCommandConsoleTask+0x22c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   13062:	2308      	movs	r3, #8
   13064:	18fb      	adds	r3, r7, r3
   13066:	4a44      	ldr	r2, [pc, #272]	; (13178 <vCommandConsoleTask+0x308>)
   13068:	6812      	ldr	r2, [r2, #0]
   1306a:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   1306c:	2308      	movs	r3, #8
   1306e:	18fb      	adds	r3, r7, r3
   13070:	0018      	movs	r0, r3
   13072:	4b2b      	ldr	r3, [pc, #172]	; (13120 <vCommandConsoleTask+0x2b0>)
   13074:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   13076:	2317      	movs	r3, #23
   13078:	18fb      	adds	r3, r7, r3
   1307a:	781b      	ldrb	r3, [r3, #0]
   1307c:	2b00      	cmp	r3, #0
   1307e:	d037      	beq.n	130f0 <vCommandConsoleTask+0x280>
                    cInputIndex--;
   13080:	2317      	movs	r3, #23
   13082:	18fb      	adds	r3, r7, r3
   13084:	781a      	ldrb	r2, [r3, #0]
   13086:	2317      	movs	r3, #23
   13088:	18fb      	adds	r3, r7, r3
   1308a:	3a01      	subs	r2, #1
   1308c:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   1308e:	2317      	movs	r3, #23
   13090:	18fb      	adds	r3, r7, r3
   13092:	781b      	ldrb	r3, [r3, #0]
   13094:	4a2c      	ldr	r2, [pc, #176]	; (13148 <vCommandConsoleTask+0x2d8>)
   13096:	2100      	movs	r1, #0
   13098:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   1309a:	e029      	b.n	130f0 <vCommandConsoleTask+0x280>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   1309c:	230c      	movs	r3, #12
   1309e:	18fb      	adds	r3, r7, r3
   130a0:	781b      	ldrb	r3, [r3, #0]
   130a2:	2b1b      	cmp	r3, #27
   130a4:	d106      	bne.n	130b4 <vCommandConsoleTask+0x244>
                isEscapeCode = true;  // Next characters will be code arguments
   130a6:	4b26      	ldr	r3, [pc, #152]	; (13140 <vCommandConsoleTask+0x2d0>)
   130a8:	2201      	movs	r2, #1
   130aa:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   130ac:	4b25      	ldr	r3, [pc, #148]	; (13144 <vCommandConsoleTask+0x2d4>)
   130ae:	2200      	movs	r2, #0
   130b0:	701a      	strb	r2, [r3, #0]
   130b2:	e721      	b.n	12ef8 <vCommandConsoleTask+0x88>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   130b4:	2317      	movs	r3, #23
   130b6:	18fb      	adds	r3, r7, r3
   130b8:	781b      	ldrb	r3, [r3, #0]
   130ba:	2b31      	cmp	r3, #49	; 0x31
   130bc:	d80e      	bhi.n	130dc <vCommandConsoleTask+0x26c>
                    pcInputString[cInputIndex] = cRxedChar[0];
   130be:	2317      	movs	r3, #23
   130c0:	18fb      	adds	r3, r7, r3
   130c2:	781b      	ldrb	r3, [r3, #0]
   130c4:	220c      	movs	r2, #12
   130c6:	18ba      	adds	r2, r7, r2
   130c8:	7811      	ldrb	r1, [r2, #0]
   130ca:	4a1f      	ldr	r2, [pc, #124]	; (13148 <vCommandConsoleTask+0x2d8>)
   130cc:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   130ce:	2317      	movs	r3, #23
   130d0:	18fb      	adds	r3, r7, r3
   130d2:	781a      	ldrb	r2, [r3, #0]
   130d4:	2317      	movs	r3, #23
   130d6:	18fb      	adds	r3, r7, r3
   130d8:	3201      	adds	r2, #1
   130da:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   130dc:	230c      	movs	r3, #12
   130de:	18fb      	adds	r3, r7, r3
   130e0:	2200      	movs	r2, #0
   130e2:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   130e4:	230c      	movs	r3, #12
   130e6:	18fb      	adds	r3, r7, r3
   130e8:	0018      	movs	r0, r3
   130ea:	4b0d      	ldr	r3, [pc, #52]	; (13120 <vCommandConsoleTask+0x2b0>)
   130ec:	4798      	blx	r3
   130ee:	e703      	b.n	12ef8 <vCommandConsoleTask+0x88>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   130f0:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   130f2:	e701      	b.n	12ef8 <vCommandConsoleTask+0x88>
   130f4:	00035db0 	.word	0x00035db0
   130f8:	00017ab9 	.word	0x00017ab9
   130fc:	00035da0 	.word	0x00035da0
   13100:	00035e20 	.word	0x00035e20
   13104:	00035dc0 	.word	0x00035dc0
   13108:	00035dd0 	.word	0x00035dd0
   1310c:	00035de0 	.word	0x00035de0
   13110:	00035df0 	.word	0x00035df0
   13114:	00035e00 	.word	0x00035e00
   13118:	00035e10 	.word	0x00035e10
   1311c:	00035a0c 	.word	0x00035a0c
   13120:	0001d9e5 	.word	0x0001d9e5
   13124:	0001a085 	.word	0x0001a085
   13128:	20004610 	.word	0x20004610
   1312c:	00035c28 	.word	0x00035c28
   13130:	0001dad1 	.word	0x0001dad1
   13134:	0001be71 	.word	0x0001be71
   13138:	0001317d 	.word	0x0001317d
   1313c:	00035c48 	.word	0x00035c48
   13140:	20000394 	.word	0x20000394
   13144:	20000395 	.word	0x20000395
   13148:	200003cc 	.word	0x200003cc
   1314c:	20000398 	.word	0x20000398
   13150:	00034a17 	.word	0x00034a17
   13154:	20000400 	.word	0x20000400
   13158:	00017b29 	.word	0x00017b29
   1315c:	0003462f 	.word	0x0003462f
   13160:	20000464 	.word	0x20000464
   13164:	00035c4c 	.word	0x00035c4c
   13168:	00034931 	.word	0x00034931
   1316c:	00035c50 	.word	0x00035c50
   13170:	000348ed 	.word	0x000348ed
   13174:	000349e7 	.word	0x000349e7
   13178:	00035c58 	.word	0x00035c58

0001317c <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   1317c:	b580      	push	{r7, lr}
   1317e:	b084      	sub	sp, #16
   13180:	af00      	add	r7, sp, #0
   13182:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   13184:	687b      	ldr	r3, [r7, #4]
   13186:	0018      	movs	r0, r3
   13188:	4b0c      	ldr	r3, [pc, #48]	; (131bc <FreeRTOS_read+0x40>)
   1318a:	4798      	blx	r3
   1318c:	0003      	movs	r3, r0
   1318e:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   13190:	e00d      	b.n	131ae <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   13192:	4b0b      	ldr	r3, [pc, #44]	; (131c0 <FreeRTOS_read+0x44>)
   13194:	681a      	ldr	r2, [r3, #0]
   13196:	2301      	movs	r3, #1
   13198:	425b      	negs	r3, r3
   1319a:	0019      	movs	r1, r3
   1319c:	0010      	movs	r0, r2
   1319e:	4b09      	ldr	r3, [pc, #36]	; (131c4 <FreeRTOS_read+0x48>)
   131a0:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   131a2:	687b      	ldr	r3, [r7, #4]
   131a4:	0018      	movs	r0, r3
   131a6:	4b05      	ldr	r3, [pc, #20]	; (131bc <FreeRTOS_read+0x40>)
   131a8:	4798      	blx	r3
   131aa:	0003      	movs	r3, r0
   131ac:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   131ae:	68fb      	ldr	r3, [r7, #12]
   131b0:	3301      	adds	r3, #1
   131b2:	d0ee      	beq.n	13192 <FreeRTOS_read+0x16>
    }
}
   131b4:	46c0      	nop			; (mov r8, r8)
   131b6:	46bd      	mov	sp, r7
   131b8:	b004      	add	sp, #16
   131ba:	bd80      	pop	{r7, pc}
   131bc:	0001da81 	.word	0x0001da81
   131c0:	20004610 	.word	0x20004610
   131c4:	0001b03d 	.word	0x0001b03d

000131c8 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   131c8:	b580      	push	{r7, lr}
   131ca:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   131cc:	4b0a      	ldr	r3, [pc, #40]	; (131f8 <CliCharReadySemaphoreGiveFromISR+0x30>)
   131ce:	2200      	movs	r2, #0
   131d0:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   131d2:	4b0a      	ldr	r3, [pc, #40]	; (131fc <CliCharReadySemaphoreGiveFromISR+0x34>)
   131d4:	681b      	ldr	r3, [r3, #0]
   131d6:	4a08      	ldr	r2, [pc, #32]	; (131f8 <CliCharReadySemaphoreGiveFromISR+0x30>)
   131d8:	0011      	movs	r1, r2
   131da:	0018      	movs	r0, r3
   131dc:	4b08      	ldr	r3, [pc, #32]	; (13200 <CliCharReadySemaphoreGiveFromISR+0x38>)
   131de:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   131e0:	4b05      	ldr	r3, [pc, #20]	; (131f8 <CliCharReadySemaphoreGiveFromISR+0x30>)
   131e2:	681b      	ldr	r3, [r3, #0]
   131e4:	2b00      	cmp	r3, #0
   131e6:	d003      	beq.n	131f0 <CliCharReadySemaphoreGiveFromISR+0x28>
   131e8:	4b06      	ldr	r3, [pc, #24]	; (13204 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   131ea:	2280      	movs	r2, #128	; 0x80
   131ec:	0552      	lsls	r2, r2, #21
   131ee:	601a      	str	r2, [r3, #0]
}
   131f0:	46c0      	nop			; (mov r8, r8)
   131f2:	46bd      	mov	sp, r7
   131f4:	bd80      	pop	{r7, pc}
   131f6:	46c0      	nop			; (mov r8, r8)
   131f8:	20000468 	.word	0x20000468
   131fc:	20004610 	.word	0x20004610
   13200:	0001a9b5 	.word	0x0001a9b5
   13204:	e000ed04 	.word	0xe000ed04

00013208 <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13208:	b5b0      	push	{r4, r5, r7, lr}
   1320a:	b08a      	sub	sp, #40	; 0x28
   1320c:	af02      	add	r7, sp, #8
   1320e:	60f8      	str	r0, [r7, #12]
   13210:	60b9      	str	r1, [r7, #8]
   13212:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   13214:	4b49      	ldr	r3, [pc, #292]	; (1333c <CLI_GetImuData+0x134>)
   13216:	4798      	blx	r3
   13218:	0003      	movs	r3, r0
   1321a:	61fb      	str	r3, [r7, #28]
	struct ImuDataPacket imuPacket;

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   1321c:	231b      	movs	r3, #27
   1321e:	18fa      	adds	r2, r7, r3
   13220:	69fb      	ldr	r3, [r7, #28]
   13222:	0011      	movs	r1, r2
   13224:	0018      	movs	r0, r3
   13226:	4b46      	ldr	r3, [pc, #280]	; (13340 <CLI_GetImuData+0x138>)
   13228:	4798      	blx	r3

    if (reg) {
   1322a:	231b      	movs	r3, #27
   1322c:	18fb      	adds	r3, r7, r3
   1322e:	781b      	ldrb	r3, [r3, #0]
   13230:	2b00      	cmp	r3, #0
   13232:	d064      	beq.n	132fe <CLI_GetImuData+0xf6>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   13234:	4b43      	ldr	r3, [pc, #268]	; (13344 <CLI_GetImuData+0x13c>)
   13236:	2206      	movs	r2, #6
   13238:	2100      	movs	r1, #0
   1323a:	0018      	movs	r0, r3
   1323c:	4b42      	ldr	r3, [pc, #264]	; (13348 <CLI_GetImuData+0x140>)
   1323e:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   13240:	4a40      	ldr	r2, [pc, #256]	; (13344 <CLI_GetImuData+0x13c>)
   13242:	69fb      	ldr	r3, [r7, #28]
   13244:	0011      	movs	r1, r2
   13246:	0018      	movs	r0, r3
   13248:	4b40      	ldr	r3, [pc, #256]	; (1334c <CLI_GetImuData+0x144>)
   1324a:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   1324c:	4b3d      	ldr	r3, [pc, #244]	; (13344 <CLI_GetImuData+0x13c>)
   1324e:	2200      	movs	r2, #0
   13250:	5e9b      	ldrsh	r3, [r3, r2]
   13252:	0018      	movs	r0, r3
   13254:	4b3e      	ldr	r3, [pc, #248]	; (13350 <CLI_GetImuData+0x148>)
   13256:	4798      	blx	r3
   13258:	1c02      	adds	r2, r0, #0
   1325a:	4b3e      	ldr	r3, [pc, #248]	; (13354 <CLI_GetImuData+0x14c>)
   1325c:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   1325e:	4b39      	ldr	r3, [pc, #228]	; (13344 <CLI_GetImuData+0x13c>)
   13260:	2202      	movs	r2, #2
   13262:	5e9b      	ldrsh	r3, [r3, r2]
   13264:	0018      	movs	r0, r3
   13266:	4b3a      	ldr	r3, [pc, #232]	; (13350 <CLI_GetImuData+0x148>)
   13268:	4798      	blx	r3
   1326a:	1c02      	adds	r2, r0, #0
   1326c:	4b39      	ldr	r3, [pc, #228]	; (13354 <CLI_GetImuData+0x14c>)
   1326e:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   13270:	4b34      	ldr	r3, [pc, #208]	; (13344 <CLI_GetImuData+0x13c>)
   13272:	2204      	movs	r2, #4
   13274:	5e9b      	ldrsh	r3, [r3, r2]
   13276:	0018      	movs	r0, r3
   13278:	4b35      	ldr	r3, [pc, #212]	; (13350 <CLI_GetImuData+0x148>)
   1327a:	4798      	blx	r3
   1327c:	1c02      	adds	r2, r0, #0
   1327e:	4b35      	ldr	r3, [pc, #212]	; (13354 <CLI_GetImuData+0x14c>)
   13280:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   13282:	4b34      	ldr	r3, [pc, #208]	; (13354 <CLI_GetImuData+0x14c>)
   13284:	681a      	ldr	r2, [r3, #0]
   13286:	4b34      	ldr	r3, [pc, #208]	; (13358 <CLI_GetImuData+0x150>)
   13288:	1c10      	adds	r0, r2, #0
   1328a:	4798      	blx	r3
   1328c:	0005      	movs	r5, r0
   1328e:	4b31      	ldr	r3, [pc, #196]	; (13354 <CLI_GetImuData+0x14c>)
   13290:	685a      	ldr	r2, [r3, #4]
   13292:	4b31      	ldr	r3, [pc, #196]	; (13358 <CLI_GetImuData+0x150>)
   13294:	1c10      	adds	r0, r2, #0
   13296:	4798      	blx	r3
   13298:	0004      	movs	r4, r0
   1329a:	4b2e      	ldr	r3, [pc, #184]	; (13354 <CLI_GetImuData+0x14c>)
   1329c:	689a      	ldr	r2, [r3, #8]
   1329e:	4b2e      	ldr	r3, [pc, #184]	; (13358 <CLI_GetImuData+0x150>)
   132a0:	1c10      	adds	r0, r2, #0
   132a2:	4798      	blx	r3
   132a4:	0003      	movs	r3, r0
   132a6:	4a2d      	ldr	r2, [pc, #180]	; (1335c <CLI_GetImuData+0x154>)
   132a8:	68b9      	ldr	r1, [r7, #8]
   132aa:	68f8      	ldr	r0, [r7, #12]
   132ac:	9301      	str	r3, [sp, #4]
   132ae:	9400      	str	r4, [sp, #0]
   132b0:	002b      	movs	r3, r5
   132b2:	4c2b      	ldr	r4, [pc, #172]	; (13360 <CLI_GetImuData+0x158>)
   132b4:	47a0      	blx	r4
		imuPacket.xmg = (int)acceleration_mg[0];
   132b6:	4b27      	ldr	r3, [pc, #156]	; (13354 <CLI_GetImuData+0x14c>)
   132b8:	681a      	ldr	r2, [r3, #0]
   132ba:	4b27      	ldr	r3, [pc, #156]	; (13358 <CLI_GetImuData+0x150>)
   132bc:	1c10      	adds	r0, r2, #0
   132be:	4798      	blx	r3
   132c0:	0003      	movs	r3, r0
   132c2:	b21a      	sxth	r2, r3
   132c4:	2314      	movs	r3, #20
   132c6:	18fb      	adds	r3, r7, r3
   132c8:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = (int)acceleration_mg[1];
   132ca:	4b22      	ldr	r3, [pc, #136]	; (13354 <CLI_GetImuData+0x14c>)
   132cc:	685a      	ldr	r2, [r3, #4]
   132ce:	4b22      	ldr	r3, [pc, #136]	; (13358 <CLI_GetImuData+0x150>)
   132d0:	1c10      	adds	r0, r2, #0
   132d2:	4798      	blx	r3
   132d4:	0003      	movs	r3, r0
   132d6:	b21a      	sxth	r2, r3
   132d8:	2314      	movs	r3, #20
   132da:	18fb      	adds	r3, r7, r3
   132dc:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = (int)acceleration_mg[2];
   132de:	4b1d      	ldr	r3, [pc, #116]	; (13354 <CLI_GetImuData+0x14c>)
   132e0:	689a      	ldr	r2, [r3, #8]
   132e2:	4b1d      	ldr	r3, [pc, #116]	; (13358 <CLI_GetImuData+0x150>)
   132e4:	1c10      	adds	r0, r2, #0
   132e6:	4798      	blx	r3
   132e8:	0003      	movs	r3, r0
   132ea:	b21a      	sxth	r2, r3
   132ec:	2314      	movs	r3, #20
   132ee:	18fb      	adds	r3, r7, r3
   132f0:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   132f2:	2314      	movs	r3, #20
   132f4:	18fb      	adds	r3, r7, r3
   132f6:	0018      	movs	r0, r3
   132f8:	4b1a      	ldr	r3, [pc, #104]	; (13364 <CLI_GetImuData+0x15c>)
   132fa:	4798      	blx	r3
   132fc:	e019      	b.n	13332 <CLI_GetImuData+0x12a>
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! Sending dummy data \r\n");
   132fe:	4a1a      	ldr	r2, [pc, #104]	; (13368 <CLI_GetImuData+0x160>)
   13300:	68b9      	ldr	r1, [r7, #8]
   13302:	68fb      	ldr	r3, [r7, #12]
   13304:	0018      	movs	r0, r3
   13306:	4b16      	ldr	r3, [pc, #88]	; (13360 <CLI_GetImuData+0x158>)
   13308:	4798      	blx	r3
		imuPacket.xmg = -1;
   1330a:	2314      	movs	r3, #20
   1330c:	18fb      	adds	r3, r7, r3
   1330e:	2201      	movs	r2, #1
   13310:	4252      	negs	r2, r2
   13312:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = -2;
   13314:	2314      	movs	r3, #20
   13316:	18fb      	adds	r3, r7, r3
   13318:	2202      	movs	r2, #2
   1331a:	4252      	negs	r2, r2
   1331c:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = -3;
   1331e:	2314      	movs	r3, #20
   13320:	18fb      	adds	r3, r7, r3
   13322:	2203      	movs	r2, #3
   13324:	4252      	negs	r2, r2
   13326:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   13328:	2314      	movs	r3, #20
   1332a:	18fb      	adds	r3, r7, r3
   1332c:	0018      	movs	r0, r3
   1332e:	4b0d      	ldr	r3, [pc, #52]	; (13364 <CLI_GetImuData+0x15c>)
   13330:	4798      	blx	r3
    }
    return pdFALSE;
   13332:	2300      	movs	r3, #0
}
   13334:	0018      	movs	r0, r3
   13336:	46bd      	mov	sp, r7
   13338:	b008      	add	sp, #32
   1333a:	bdb0      	pop	{r4, r5, r7, pc}
   1333c:	00014f41 	.word	0x00014f41
   13340:	000149ed 	.word	0x000149ed
   13344:	2000046c 	.word	0x2000046c
   13348:	0003462f 	.word	0x0003462f
   1334c:	00014a29 	.word	0x00014a29
   13350:	0001427d 	.word	0x0001427d
   13354:	20000474 	.word	0x20000474
   13358:	00032bd5 	.word	0x00032bd5
   1335c:	00035c5c 	.word	0x00035c5c
   13360:	00034889 	.word	0x00034889
   13364:	000170d1 	.word	0x000170d1
   13368:	00035c80 	.word	0x00035c80

0001336c <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1336c:	b590      	push	{r4, r7, lr}
   1336e:	b087      	sub	sp, #28
   13370:	af00      	add	r7, sp, #0
   13372:	60f8      	str	r0, [r7, #12]
   13374:	60b9      	str	r1, [r7, #8]
   13376:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13378:	2317      	movs	r3, #23
   1337a:	18fb      	adds	r3, r7, r3
   1337c:	221b      	movs	r2, #27
   1337e:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13380:	2317      	movs	r3, #23
   13382:	18fb      	adds	r3, r7, r3
   13384:	781b      	ldrb	r3, [r3, #0]
   13386:	4a08      	ldr	r2, [pc, #32]	; (133a8 <xCliClearTerminalScreen+0x3c>)
   13388:	4808      	ldr	r0, [pc, #32]	; (133ac <xCliClearTerminalScreen+0x40>)
   1338a:	210f      	movs	r1, #15
   1338c:	4c08      	ldr	r4, [pc, #32]	; (133b0 <xCliClearTerminalScreen+0x44>)
   1338e:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13390:	4a06      	ldr	r2, [pc, #24]	; (133ac <xCliClearTerminalScreen+0x40>)
   13392:	68b9      	ldr	r1, [r7, #8]
   13394:	68fb      	ldr	r3, [r7, #12]
   13396:	0018      	movs	r0, r3
   13398:	4b05      	ldr	r3, [pc, #20]	; (133b0 <xCliClearTerminalScreen+0x44>)
   1339a:	4798      	blx	r3
    return pdFALSE;
   1339c:	2300      	movs	r3, #0
}
   1339e:	0018      	movs	r0, r3
   133a0:	46bd      	mov	sp, r7
   133a2:	b007      	add	sp, #28
   133a4:	bd90      	pop	{r4, r7, pc}
   133a6:	46c0      	nop			; (mov r8, r8)
   133a8:	00035ca8 	.word	0x00035ca8
   133ac:	20000384 	.word	0x20000384
   133b0:	00034889 	.word	0x00034889

000133b4 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   133b4:	b580      	push	{r7, lr}
   133b6:	b084      	sub	sp, #16
   133b8:	af00      	add	r7, sp, #0
   133ba:	60f8      	str	r0, [r7, #12]
   133bc:	60b9      	str	r1, [r7, #8]
   133be:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   133c0:	2002      	movs	r0, #2
   133c2:	4b03      	ldr	r3, [pc, #12]	; (133d0 <CLI_OTAU+0x1c>)
   133c4:	4798      	blx	r3

    return pdFALSE;
   133c6:	2300      	movs	r3, #0
}
   133c8:	0018      	movs	r0, r3
   133ca:	46bd      	mov	sp, r7
   133cc:	b004      	add	sp, #16
   133ce:	bd80      	pop	{r7, pc}
   133d0:	0001709d 	.word	0x0001709d

000133d4 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   133d4:	b580      	push	{r7, lr}
   133d6:	b084      	sub	sp, #16
   133d8:	af00      	add	r7, sp, #0
   133da:	60f8      	str	r0, [r7, #12]
   133dc:	60b9      	str	r1, [r7, #8]
   133de:	607a      	str	r2, [r7, #4]
    system_reset();
   133e0:	4b03      	ldr	r3, [pc, #12]	; (133f0 <CLI_ResetDevice+0x1c>)
   133e2:	4798      	blx	r3
    return pdFALSE;
   133e4:	2300      	movs	r3, #0
}
   133e6:	0018      	movs	r0, r3
   133e8:	46bd      	mov	sp, r7
   133ea:	b004      	add	sp, #16
   133ec:	bd80      	pop	{r7, pc}
   133ee:	46c0      	nop			; (mov r8, r8)
   133f0:	00012e5d 	.word	0x00012e5d

000133f4 <CLI_NeotrellisSetLed>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellisSetLed(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   133f4:	b580      	push	{r7, lr}
   133f6:	b084      	sub	sp, #16
   133f8:	af00      	add	r7, sp, #0
   133fa:	60f8      	str	r0, [r7, #12]
   133fc:	60b9      	str	r1, [r7, #8]
   133fe:	607a      	str	r2, [r7, #4]
    snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Students to fill out!");
   13400:	4a05      	ldr	r2, [pc, #20]	; (13418 <CLI_NeotrellisSetLed+0x24>)
   13402:	68b9      	ldr	r1, [r7, #8]
   13404:	68fb      	ldr	r3, [r7, #12]
   13406:	0018      	movs	r0, r3
   13408:	4b04      	ldr	r3, [pc, #16]	; (1341c <CLI_NeotrellisSetLed+0x28>)
   1340a:	4798      	blx	r3
    // Check code SeesawSetLed and SeesawSetLed
    // How do you get parameters? Checl link in comments!
    // Check that the input is sanitized: Key between 0-15, RGB between 0-255. Print if there is an error!
    // return pdFalse to tell the FreeRTOS CLI your call is done and does not need to call again.
    // This function expects 4 arguments inside pcCommandString: key, R, G, B.
    return pdFALSE;
   1340c:	2300      	movs	r3, #0
}
   1340e:	0018      	movs	r0, r3
   13410:	46bd      	mov	sp, r7
   13412:	b004      	add	sp, #16
   13414:	bd80      	pop	{r7, pc}
   13416:	46c0      	nop			; (mov r8, r8)
   13418:	00035cb0 	.word	0x00035cb0
   1341c:	00034889 	.word	0x00034889

00013420 <CLI_NeotrellProcessButtonBuffer>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellProcessButtonBuffer(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13420:	b590      	push	{r4, r7, lr}
   13422:	b099      	sub	sp, #100	; 0x64
   13424:	af00      	add	r7, sp, #0
   13426:	60f8      	str	r0, [r7, #12]
   13428:	60b9      	str	r1, [r7, #8]
   1342a:	607a      	str	r2, [r7, #4]
    // snprintf(pcWriteBuffer,xWriteBufferLen, "count: %d\num_req_eve:%d\t\n",count,num_req_eve);
    // Print to pcWriteBuffer in order.
    // If the string is too long to print, print what you can.
    // The function you write will be useful in the future.
    uint8_t buffer[64];
    uint8_t count = SeesawGetKeypadCount();
   1342c:	235f      	movs	r3, #95	; 0x5f
   1342e:	18fc      	adds	r4, r7, r3
   13430:	4b36      	ldr	r3, [pc, #216]	; (1350c <CLI_NeotrellProcessButtonBuffer+0xec>)
   13432:	4798      	blx	r3
   13434:	0003      	movs	r3, r0
   13436:	7023      	strb	r3, [r4, #0]
    if (count >= 1) {
   13438:	235f      	movs	r3, #95	; 0x5f
   1343a:	18fb      	adds	r3, r7, r3
   1343c:	781b      	ldrb	r3, [r3, #0]
   1343e:	2b00      	cmp	r3, #0
   13440:	d05d      	beq.n	134fe <CLI_NeotrellProcessButtonBuffer+0xde>
        int32_t res = SeesawReadKeypad(buffer, 1);
   13442:	2310      	movs	r3, #16
   13444:	18fb      	adds	r3, r7, r3
   13446:	2101      	movs	r1, #1
   13448:	0018      	movs	r0, r3
   1344a:	4b31      	ldr	r3, [pc, #196]	; (13510 <CLI_NeotrellProcessButtonBuffer+0xf0>)
   1344c:	4798      	blx	r3
   1344e:	0003      	movs	r3, r0
   13450:	65bb      	str	r3, [r7, #88]	; 0x58
        if (res == 0) {
   13452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   13454:	2b00      	cmp	r3, #0
   13456:	d150      	bne.n	134fa <CLI_NeotrellProcessButtonBuffer+0xda>
            uint8_t pos, press;
            press = buffer[0] & 0x3;
   13458:	2310      	movs	r3, #16
   1345a:	18fb      	adds	r3, r7, r3
   1345c:	781a      	ldrb	r2, [r3, #0]
   1345e:	2357      	movs	r3, #87	; 0x57
   13460:	18fb      	adds	r3, r7, r3
   13462:	2103      	movs	r1, #3
   13464:	400a      	ands	r2, r1
   13466:	701a      	strb	r2, [r3, #0]
            pos = buffer[0] >> 2;
   13468:	2310      	movs	r3, #16
   1346a:	18fb      	adds	r3, r7, r3
   1346c:	781a      	ldrb	r2, [r3, #0]
   1346e:	2356      	movs	r3, #86	; 0x56
   13470:	18fb      	adds	r3, r7, r3
   13472:	0892      	lsrs	r2, r2, #2
   13474:	701a      	strb	r2, [r3, #0]
            int num = NEO_TRELLIS_SEESAW_KEY(pos);
   13476:	2356      	movs	r3, #86	; 0x56
   13478:	18fb      	adds	r3, r7, r3
   1347a:	781b      	ldrb	r3, [r3, #0]
   1347c:	08db      	lsrs	r3, r3, #3
   1347e:	b2db      	uxtb	r3, r3
   13480:	009a      	lsls	r2, r3, #2
   13482:	2356      	movs	r3, #86	; 0x56
   13484:	18fb      	adds	r3, r7, r3
   13486:	781b      	ldrb	r3, [r3, #0]
   13488:	2107      	movs	r1, #7
   1348a:	400b      	ands	r3, r1
   1348c:	18d3      	adds	r3, r2, r3
   1348e:	653b      	str	r3, [r7, #80]	; 0x50
            if (press == 0x2) {
   13490:	2357      	movs	r3, #87	; 0x57
   13492:	18fb      	adds	r3, r7, r3
   13494:	781b      	ldrb	r3, [r3, #0]
   13496:	2b02      	cmp	r3, #2
   13498:	d115      	bne.n	134c6 <CLI_NeotrellProcessButtonBuffer+0xa6>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is released\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   1349a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1349c:	2b00      	cmp	r3, #0
   1349e:	da00      	bge.n	134a2 <CLI_NeotrellProcessButtonBuffer+0x82>
   134a0:	3307      	adds	r3, #7
   134a2:	10db      	asrs	r3, r3, #3
   134a4:	009a      	lsls	r2, r3, #2
   134a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   134a8:	491a      	ldr	r1, [pc, #104]	; (13514 <CLI_NeotrellProcessButtonBuffer+0xf4>)
   134aa:	400b      	ands	r3, r1
   134ac:	d504      	bpl.n	134b8 <CLI_NeotrellProcessButtonBuffer+0x98>
   134ae:	3b01      	subs	r3, #1
   134b0:	2108      	movs	r1, #8
   134b2:	4249      	negs	r1, r1
   134b4:	430b      	orrs	r3, r1
   134b6:	3301      	adds	r3, #1
   134b8:	18d3      	adds	r3, r2, r3
   134ba:	4a17      	ldr	r2, [pc, #92]	; (13518 <CLI_NeotrellProcessButtonBuffer+0xf8>)
   134bc:	68b9      	ldr	r1, [r7, #8]
   134be:	68f8      	ldr	r0, [r7, #12]
   134c0:	4c16      	ldr	r4, [pc, #88]	; (1351c <CLI_NeotrellProcessButtonBuffer+0xfc>)
   134c2:	47a0      	blx	r4
   134c4:	e019      	b.n	134fa <CLI_NeotrellProcessButtonBuffer+0xda>
            } else if (press == 0x3) {
   134c6:	2357      	movs	r3, #87	; 0x57
   134c8:	18fb      	adds	r3, r7, r3
   134ca:	781b      	ldrb	r3, [r3, #0]
   134cc:	2b03      	cmp	r3, #3
   134ce:	d114      	bne.n	134fa <CLI_NeotrellProcessButtonBuffer+0xda>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is pressed\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   134d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   134d2:	2b00      	cmp	r3, #0
   134d4:	da00      	bge.n	134d8 <CLI_NeotrellProcessButtonBuffer+0xb8>
   134d6:	3307      	adds	r3, #7
   134d8:	10db      	asrs	r3, r3, #3
   134da:	009a      	lsls	r2, r3, #2
   134dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   134de:	490d      	ldr	r1, [pc, #52]	; (13514 <CLI_NeotrellProcessButtonBuffer+0xf4>)
   134e0:	400b      	ands	r3, r1
   134e2:	d504      	bpl.n	134ee <CLI_NeotrellProcessButtonBuffer+0xce>
   134e4:	3b01      	subs	r3, #1
   134e6:	2108      	movs	r1, #8
   134e8:	4249      	negs	r1, r1
   134ea:	430b      	orrs	r3, r1
   134ec:	3301      	adds	r3, #1
   134ee:	18d3      	adds	r3, r2, r3
   134f0:	4a0b      	ldr	r2, [pc, #44]	; (13520 <CLI_NeotrellProcessButtonBuffer+0x100>)
   134f2:	68b9      	ldr	r1, [r7, #8]
   134f4:	68f8      	ldr	r0, [r7, #12]
   134f6:	4c09      	ldr	r4, [pc, #36]	; (1351c <CLI_NeotrellProcessButtonBuffer+0xfc>)
   134f8:	47a0      	blx	r4
            }
        }
        return pdTRUE;
   134fa:	2301      	movs	r3, #1
   134fc:	e002      	b.n	13504 <CLI_NeotrellProcessButtonBuffer+0xe4>
    } else {
        pcWriteBuffer = 0;
   134fe:	2300      	movs	r3, #0
   13500:	60fb      	str	r3, [r7, #12]
        return pdFALSE;
   13502:	2300      	movs	r3, #0
    }
}
   13504:	0018      	movs	r0, r3
   13506:	46bd      	mov	sp, r7
   13508:	b019      	add	sp, #100	; 0x64
   1350a:	bd90      	pop	{r4, r7, pc}
   1350c:	00015141 	.word	0x00015141
   13510:	000151a9 	.word	0x000151a9
   13514:	80000007 	.word	0x80000007
   13518:	00035cc8 	.word	0x00035cc8
   1351c:	00034889 	.word	0x00034889
   13520:	00035ce4 	.word	0x00035ce4

00013524 <CLI_DistanceSensorGetDistance>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_DistanceSensorGetDistance(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13524:	b590      	push	{r4, r7, lr}
   13526:	b087      	sub	sp, #28
   13528:	af00      	add	r7, sp, #0
   1352a:	60f8      	str	r0, [r7, #12]
   1352c:	60b9      	str	r1, [r7, #8]
   1352e:	607a      	str	r2, [r7, #4]
    uint16_t distance = 0;
   13530:	2312      	movs	r3, #18
   13532:	18fb      	adds	r3, r7, r3
   13534:	2200      	movs	r2, #0
   13536:	801a      	strh	r2, [r3, #0]
    int error = DistanceSensorGetDistance(&distance, 100);
   13538:	2312      	movs	r3, #18
   1353a:	18fb      	adds	r3, r7, r3
   1353c:	2164      	movs	r1, #100	; 0x64
   1353e:	0018      	movs	r0, r3
   13540:	4b19      	ldr	r3, [pc, #100]	; (135a8 <CLI_DistanceSensorGetDistance+0x84>)
   13542:	4798      	blx	r3
   13544:	0003      	movs	r3, r0
   13546:	617b      	str	r3, [r7, #20]
    if (0 != error) {
   13548:	697b      	ldr	r3, [r7, #20]
   1354a:	2b00      	cmp	r3, #0
   1354c:	d006      	beq.n	1355c <CLI_DistanceSensorGetDistance+0x38>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Sensor Error %d!\r\n", error);
   1354e:	697b      	ldr	r3, [r7, #20]
   13550:	4a16      	ldr	r2, [pc, #88]	; (135ac <CLI_DistanceSensorGetDistance+0x88>)
   13552:	68b9      	ldr	r1, [r7, #8]
   13554:	68f8      	ldr	r0, [r7, #12]
   13556:	4c16      	ldr	r4, [pc, #88]	; (135b0 <CLI_DistanceSensorGetDistance+0x8c>)
   13558:	47a0      	blx	r4
   1355a:	e007      	b.n	1356c <CLI_DistanceSensorGetDistance+0x48>
    } else {
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Distance: %d mm\r\n", distance);
   1355c:	2312      	movs	r3, #18
   1355e:	18fb      	adds	r3, r7, r3
   13560:	881b      	ldrh	r3, [r3, #0]
   13562:	4a14      	ldr	r2, [pc, #80]	; (135b4 <CLI_DistanceSensorGetDistance+0x90>)
   13564:	68b9      	ldr	r1, [r7, #8]
   13566:	68f8      	ldr	r0, [r7, #12]
   13568:	4c11      	ldr	r4, [pc, #68]	; (135b0 <CLI_DistanceSensorGetDistance+0x8c>)
   1356a:	47a0      	blx	r4
    }

    error = WifiAddDistanceDataToQueue(&distance);
   1356c:	2312      	movs	r3, #18
   1356e:	18fb      	adds	r3, r7, r3
   13570:	0018      	movs	r0, r3
   13572:	4b11      	ldr	r3, [pc, #68]	; (135b8 <CLI_DistanceSensorGetDistance+0x94>)
   13574:	4798      	blx	r3
   13576:	0003      	movs	r3, r0
   13578:	617b      	str	r3, [r7, #20]
    if (error == pdTRUE) {
   1357a:	697b      	ldr	r3, [r7, #20]
   1357c:	2b01      	cmp	r3, #1
   1357e:	d10e      	bne.n	1359e <CLI_DistanceSensorGetDistance+0x7a>
        strcat((char *) pcWriteBuffer, "Distance Data MQTT Post\r\n");
   13580:	68fb      	ldr	r3, [r7, #12]
   13582:	0018      	movs	r0, r3
   13584:	4b0d      	ldr	r3, [pc, #52]	; (135bc <CLI_DistanceSensorGetDistance+0x98>)
   13586:	4798      	blx	r3
   13588:	0003      	movs	r3, r0
   1358a:	001a      	movs	r2, r3
   1358c:	68fb      	ldr	r3, [r7, #12]
   1358e:	189a      	adds	r2, r3, r2
   13590:	4b0b      	ldr	r3, [pc, #44]	; (135c0 <CLI_DistanceSensorGetDistance+0x9c>)
   13592:	0010      	movs	r0, r2
   13594:	0019      	movs	r1, r3
   13596:	231a      	movs	r3, #26
   13598:	001a      	movs	r2, r3
   1359a:	4b0a      	ldr	r3, [pc, #40]	; (135c4 <CLI_DistanceSensorGetDistance+0xa0>)
   1359c:	4798      	blx	r3
    }
    return pdFALSE;
   1359e:	2300      	movs	r3, #0
}
   135a0:	0018      	movs	r0, r3
   135a2:	46bd      	mov	sp, r7
   135a4:	b007      	add	sp, #28
   135a6:	bd90      	pop	{r4, r7, pc}
   135a8:	000138d1 	.word	0x000138d1
   135ac:	00035cfc 	.word	0x00035cfc
   135b0:	00034889 	.word	0x00034889
   135b4:	00035d10 	.word	0x00035d10
   135b8:	000170fd 	.word	0x000170fd
   135bc:	000349e7 	.word	0x000349e7
   135c0:	00035d24 	.word	0x00035d24
   135c4:	000345f9 	.word	0x000345f9

000135c8 <CLI_SendDummyGameData>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_SendDummyGameData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   135c8:	b580      	push	{r7, lr}
   135ca:	b08a      	sub	sp, #40	; 0x28
   135cc:	af00      	add	r7, sp, #0
   135ce:	60f8      	str	r0, [r7, #12]
   135d0:	60b9      	str	r1, [r7, #8]
   135d2:	607a      	str	r2, [r7, #4]
    struct GameDataPacket gamevar;

    gamevar.game[0] = 0;
   135d4:	2310      	movs	r3, #16
   135d6:	18fb      	adds	r3, r7, r3
   135d8:	2200      	movs	r2, #0
   135da:	701a      	strb	r2, [r3, #0]
    gamevar.game[1] = 1;
   135dc:	2310      	movs	r3, #16
   135de:	18fb      	adds	r3, r7, r3
   135e0:	2201      	movs	r2, #1
   135e2:	705a      	strb	r2, [r3, #1]
    gamevar.game[2] = 2;
   135e4:	2310      	movs	r3, #16
   135e6:	18fb      	adds	r3, r7, r3
   135e8:	2202      	movs	r2, #2
   135ea:	709a      	strb	r2, [r3, #2]
    gamevar.game[3] = 3;
   135ec:	2310      	movs	r3, #16
   135ee:	18fb      	adds	r3, r7, r3
   135f0:	2203      	movs	r2, #3
   135f2:	70da      	strb	r2, [r3, #3]
    gamevar.game[4] = 4;
   135f4:	2310      	movs	r3, #16
   135f6:	18fb      	adds	r3, r7, r3
   135f8:	2204      	movs	r2, #4
   135fa:	711a      	strb	r2, [r3, #4]
    gamevar.game[5] = 5;
   135fc:	2310      	movs	r3, #16
   135fe:	18fb      	adds	r3, r7, r3
   13600:	2205      	movs	r2, #5
   13602:	715a      	strb	r2, [r3, #5]
    gamevar.game[6] = 6;
   13604:	2310      	movs	r3, #16
   13606:	18fb      	adds	r3, r7, r3
   13608:	2206      	movs	r2, #6
   1360a:	719a      	strb	r2, [r3, #6]
    gamevar.game[7] = 7;
   1360c:	2310      	movs	r3, #16
   1360e:	18fb      	adds	r3, r7, r3
   13610:	2207      	movs	r2, #7
   13612:	71da      	strb	r2, [r3, #7]
    gamevar.game[8] = 8;
   13614:	2310      	movs	r3, #16
   13616:	18fb      	adds	r3, r7, r3
   13618:	2208      	movs	r2, #8
   1361a:	721a      	strb	r2, [r3, #8]
    gamevar.game[9] = 9;
   1361c:	2310      	movs	r3, #16
   1361e:	18fb      	adds	r3, r7, r3
   13620:	2209      	movs	r2, #9
   13622:	725a      	strb	r2, [r3, #9]
    gamevar.game[10] = 0xFF;
   13624:	2310      	movs	r3, #16
   13626:	18fb      	adds	r3, r7, r3
   13628:	22ff      	movs	r2, #255	; 0xff
   1362a:	729a      	strb	r2, [r3, #10]

    int error = WifiAddGameDataToQueue(&gamevar);
   1362c:	2310      	movs	r3, #16
   1362e:	18fb      	adds	r3, r7, r3
   13630:	0018      	movs	r0, r3
   13632:	4b09      	ldr	r3, [pc, #36]	; (13658 <CLI_SendDummyGameData+0x90>)
   13634:	4798      	blx	r3
   13636:	0003      	movs	r3, r0
   13638:	627b      	str	r3, [r7, #36]	; 0x24
    if (error == pdTRUE) {
   1363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1363c:	2b01      	cmp	r3, #1
   1363e:	d105      	bne.n	1364c <CLI_SendDummyGameData+0x84>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Dummy Game Data MQTT Post\r\n");
   13640:	4a06      	ldr	r2, [pc, #24]	; (1365c <CLI_SendDummyGameData+0x94>)
   13642:	68b9      	ldr	r1, [r7, #8]
   13644:	68fb      	ldr	r3, [r7, #12]
   13646:	0018      	movs	r0, r3
   13648:	4b05      	ldr	r3, [pc, #20]	; (13660 <CLI_SendDummyGameData+0x98>)
   1364a:	4798      	blx	r3
    }
    return pdFALSE;
   1364c:	2300      	movs	r3, #0
}
   1364e:	0018      	movs	r0, r3
   13650:	46bd      	mov	sp, r7
   13652:	b00a      	add	sp, #40	; 0x28
   13654:	bd80      	pop	{r7, pc}
   13656:	46c0      	nop			; (mov r8, r8)
   13658:	00017129 	.word	0x00017129
   1365c:	00035d40 	.word	0x00035d40
   13660:	00034889 	.word	0x00034889

00013664 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13664:	b590      	push	{r4, r7, lr}
   13666:	b08f      	sub	sp, #60	; 0x3c
   13668:	af00      	add	r7, sp, #0
   1366a:	60f8      	str	r0, [r7, #12]
   1366c:	60b9      	str	r1, [r7, #8]
   1366e:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   13670:	2318      	movs	r3, #24
   13672:	18fb      	adds	r3, r7, r3
   13674:	2200      	movs	r2, #0
   13676:	701a      	strb	r2, [r3, #0]
   13678:	2318      	movs	r3, #24
   1367a:	18fb      	adds	r3, r7, r3
   1367c:	2200      	movs	r2, #0
   1367e:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   13680:	2318      	movs	r3, #24
   13682:	18fb      	adds	r3, r7, r3
   13684:	2200      	movs	r2, #0
   13686:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   13688:	2318      	movs	r3, #24
   1368a:	18fb      	adds	r3, r7, r3
   1368c:	2200      	movs	r2, #0
   1368e:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   13690:	231c      	movs	r3, #28
   13692:	18fb      	adds	r3, r7, r3
   13694:	2200      	movs	r2, #0
   13696:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   13698:	231c      	movs	r3, #28
   1369a:	18fb      	adds	r3, r7, r3
   1369c:	2214      	movs	r2, #20
   1369e:	18ba      	adds	r2, r7, r2
   136a0:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   136a2:	231c      	movs	r3, #28
   136a4:	18fb      	adds	r3, r7, r3
   136a6:	2201      	movs	r2, #1
   136a8:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   136aa:	231c      	movs	r3, #28
   136ac:	18fb      	adds	r3, r7, r3
   136ae:	2218      	movs	r2, #24
   136b0:	18ba      	adds	r2, r7, r2
   136b2:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   136b4:	231c      	movs	r3, #28
   136b6:	18fb      	adds	r3, r7, r3
   136b8:	2201      	movs	r2, #1
   136ba:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   136bc:	4b2a      	ldr	r3, [pc, #168]	; (13768 <CLI_i2cScan+0x104>)
   136be:	0018      	movs	r0, r3
   136c0:	4b2a      	ldr	r3, [pc, #168]	; (1376c <CLI_i2cScan+0x108>)
   136c2:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   136c4:	2300      	movs	r3, #0
   136c6:	637b      	str	r3, [r7, #52]	; 0x34
   136c8:	e042      	b.n	13750 <CLI_i2cScan+0xec>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   136ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   136cc:	4a28      	ldr	r2, [pc, #160]	; (13770 <CLI_i2cScan+0x10c>)
   136ce:	4829      	ldr	r0, [pc, #164]	; (13774 <CLI_i2cScan+0x110>)
   136d0:	210f      	movs	r1, #15
   136d2:	4c29      	ldr	r4, [pc, #164]	; (13778 <CLI_i2cScan+0x114>)
   136d4:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   136d6:	4b27      	ldr	r3, [pc, #156]	; (13774 <CLI_i2cScan+0x110>)
   136d8:	0018      	movs	r0, r3
   136da:	4b24      	ldr	r3, [pc, #144]	; (1376c <CLI_i2cScan+0x108>)
   136dc:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   136de:	2300      	movs	r3, #0
   136e0:	633b      	str	r3, [r7, #48]	; 0x30
   136e2:	e02b      	b.n	1373c <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
   136e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   136e6:	b2da      	uxtb	r2, r3
   136e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   136ea:	b2db      	uxtb	r3, r3
   136ec:	18d3      	adds	r3, r2, r3
   136ee:	b2da      	uxtb	r2, r3
   136f0:	231c      	movs	r3, #28
   136f2:	18fb      	adds	r3, r7, r3
   136f4:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cReadDataWait(&i2cOled, 100, 100);
   136f6:	231c      	movs	r3, #28
   136f8:	18fb      	adds	r3, r7, r3
   136fa:	2264      	movs	r2, #100	; 0x64
   136fc:	2164      	movs	r1, #100	; 0x64
   136fe:	0018      	movs	r0, r3
   13700:	4b1e      	ldr	r3, [pc, #120]	; (1377c <CLI_i2cScan+0x118>)
   13702:	4798      	blx	r3
   13704:	0003      	movs	r3, r0
   13706:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   13708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1370a:	2b00      	cmp	r3, #0
   1370c:	d10c      	bne.n	13728 <CLI_i2cScan+0xc4>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
   1370e:	231c      	movs	r3, #28
   13710:	18fb      	adds	r3, r7, r3
   13712:	781b      	ldrb	r3, [r3, #0]
   13714:	4a1a      	ldr	r2, [pc, #104]	; (13780 <CLI_i2cScan+0x11c>)
   13716:	4817      	ldr	r0, [pc, #92]	; (13774 <CLI_i2cScan+0x110>)
   13718:	210f      	movs	r1, #15
   1371a:	4c17      	ldr	r4, [pc, #92]	; (13778 <CLI_i2cScan+0x114>)
   1371c:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   1371e:	4b15      	ldr	r3, [pc, #84]	; (13774 <CLI_i2cScan+0x110>)
   13720:	0018      	movs	r0, r3
   13722:	4b12      	ldr	r3, [pc, #72]	; (1376c <CLI_i2cScan+0x108>)
   13724:	4798      	blx	r3
   13726:	e006      	b.n	13736 <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
   13728:	4b12      	ldr	r3, [pc, #72]	; (13774 <CLI_i2cScan+0x110>)
   1372a:	4a16      	ldr	r2, [pc, #88]	; (13784 <CLI_i2cScan+0x120>)
   1372c:	601a      	str	r2, [r3, #0]
						SerialConsoleWriteString(bufCli);
   1372e:	4b11      	ldr	r3, [pc, #68]	; (13774 <CLI_i2cScan+0x110>)
   13730:	0018      	movs	r0, r3
   13732:	4b0e      	ldr	r3, [pc, #56]	; (1376c <CLI_i2cScan+0x108>)
   13734:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   13736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13738:	3301      	adds	r3, #1
   1373a:	633b      	str	r3, [r7, #48]	; 0x30
   1373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1373e:	2b0f      	cmp	r3, #15
   13740:	ddd0      	ble.n	136e4 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   13742:	4b11      	ldr	r3, [pc, #68]	; (13788 <CLI_i2cScan+0x124>)
   13744:	0018      	movs	r0, r3
   13746:	4b09      	ldr	r3, [pc, #36]	; (1376c <CLI_i2cScan+0x108>)
   13748:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   1374a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1374c:	3310      	adds	r3, #16
   1374e:	637b      	str	r3, [r7, #52]	; 0x34
   13750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13752:	2b7f      	cmp	r3, #127	; 0x7f
   13754:	ddb9      	ble.n	136ca <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   13756:	4b0c      	ldr	r3, [pc, #48]	; (13788 <CLI_i2cScan+0x124>)
   13758:	0018      	movs	r0, r3
   1375a:	4b04      	ldr	r3, [pc, #16]	; (1376c <CLI_i2cScan+0x108>)
   1375c:	4798      	blx	r3
			return pdFALSE;
   1375e:	2300      	movs	r3, #0

}
   13760:	0018      	movs	r0, r3
   13762:	46bd      	mov	sp, r7
   13764:	b00f      	add	sp, #60	; 0x3c
   13766:	bd90      	pop	{r4, r7, pc}
   13768:	00035d5c 	.word	0x00035d5c
   1376c:	0001d9e5 	.word	0x0001d9e5
   13770:	00035d90 	.word	0x00035d90
   13774:	20000384 	.word	0x20000384
   13778:	00034889 	.word	0x00034889
   1377c:	000140dd 	.word	0x000140dd
   13780:	00035d98 	.word	0x00035d98
   13784:	00202058 	.word	0x00202058
   13788:	00035c48 	.word	0x00035c48

0001378c <vControlHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vControlHandlerTask(void *pvParameters)
{
   1378c:	b580      	push	{r7, lr}
   1378e:	b088      	sub	sp, #32
   13790:	af00      	add	r7, sp, #0
   13792:	6078      	str	r0, [r7, #4]
    SerialConsoleWriteString((char *)"ESE516 - Control Init Code\r\n");
   13794:	4b33      	ldr	r3, [pc, #204]	; (13864 <vControlHandlerTask+0xd8>)
   13796:	0018      	movs	r0, r3
   13798:	4b33      	ldr	r3, [pc, #204]	; (13868 <vControlHandlerTask+0xdc>)
   1379a:	4798      	blx	r3

    // Initialize Queues
    xQueueGameBufferIn = xQueueCreate(2, sizeof(struct GameDataPacket));
   1379c:	2200      	movs	r2, #0
   1379e:	2114      	movs	r1, #20
   137a0:	2002      	movs	r0, #2
   137a2:	4b32      	ldr	r3, [pc, #200]	; (1386c <vControlHandlerTask+0xe0>)
   137a4:	4798      	blx	r3
   137a6:	0002      	movs	r2, r0
   137a8:	4b31      	ldr	r3, [pc, #196]	; (13870 <vControlHandlerTask+0xe4>)
   137aa:	601a      	str	r2, [r3, #0]
    xQueueRgbColorBuffer = xQueueCreate(2, sizeof(struct RgbColorPacket));
   137ac:	2200      	movs	r2, #0
   137ae:	2103      	movs	r1, #3
   137b0:	2002      	movs	r0, #2
   137b2:	4b2e      	ldr	r3, [pc, #184]	; (1386c <vControlHandlerTask+0xe0>)
   137b4:	4798      	blx	r3
   137b6:	0002      	movs	r2, r0
   137b8:	4b2e      	ldr	r3, [pc, #184]	; (13874 <vControlHandlerTask+0xe8>)
   137ba:	601a      	str	r2, [r3, #0]

    if (xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL) {
   137bc:	4b2c      	ldr	r3, [pc, #176]	; (13870 <vControlHandlerTask+0xe4>)
   137be:	681b      	ldr	r3, [r3, #0]
   137c0:	2b00      	cmp	r3, #0
   137c2:	d003      	beq.n	137cc <vControlHandlerTask+0x40>
   137c4:	4b2b      	ldr	r3, [pc, #172]	; (13874 <vControlHandlerTask+0xe8>)
   137c6:	681b      	ldr	r3, [r3, #0]
   137c8:	2b00      	cmp	r3, #0
   137ca:	d103      	bne.n	137d4 <vControlHandlerTask+0x48>
        SerialConsoleWriteString((char *)"ERROR Initializing Control Data queues!\r\n");
   137cc:	4b2a      	ldr	r3, [pc, #168]	; (13878 <vControlHandlerTask+0xec>)
   137ce:	0018      	movs	r0, r3
   137d0:	4b25      	ldr	r3, [pc, #148]	; (13868 <vControlHandlerTask+0xdc>)
   137d2:	4798      	blx	r3
    }
    controlState = CONTROL_WAIT_FOR_GAME;  // Initial state
   137d4:	4b29      	ldr	r3, [pc, #164]	; (1387c <vControlHandlerTask+0xf0>)
   137d6:	2200      	movs	r2, #0
   137d8:	701a      	strb	r2, [r3, #0]

    while (1) {
        switch (controlState) {
   137da:	4b28      	ldr	r3, [pc, #160]	; (1387c <vControlHandlerTask+0xf0>)
   137dc:	781b      	ldrb	r3, [r3, #0]
   137de:	2b01      	cmp	r3, #1
   137e0:	d01d      	beq.n	1381e <vControlHandlerTask+0x92>
   137e2:	2b02      	cmp	r3, #2
   137e4:	d035      	beq.n	13852 <vControlHandlerTask+0xc6>
   137e6:	2b00      	cmp	r3, #0
   137e8:	d12f      	bne.n	1384a <vControlHandlerTask+0xbe>
            case (CONTROL_WAIT_FOR_GAME): {  // Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
                struct GameDataPacket gamePacketIn;
                if (pdPASS == xQueueReceive(xQueueGameBufferIn, &gamePacketIn, 0)) {
   137ea:	4b21      	ldr	r3, [pc, #132]	; (13870 <vControlHandlerTask+0xe4>)
   137ec:	681b      	ldr	r3, [r3, #0]
   137ee:	220c      	movs	r2, #12
   137f0:	18b9      	adds	r1, r7, r2
   137f2:	2200      	movs	r2, #0
   137f4:	0018      	movs	r0, r3
   137f6:	4b22      	ldr	r3, [pc, #136]	; (13880 <vControlHandlerTask+0xf4>)
   137f8:	4798      	blx	r3
   137fa:	0003      	movs	r3, r0
   137fc:	2b01      	cmp	r3, #1
   137fe:	d12a      	bne.n	13856 <vControlHandlerTask+0xca>
                    LogMessage(LOG_DEBUG_LVL, "Control Thread: Consumed game packet!\r\n");
   13800:	4b20      	ldr	r3, [pc, #128]	; (13884 <vControlHandlerTask+0xf8>)
   13802:	0019      	movs	r1, r3
   13804:	2001      	movs	r0, #1
   13806:	4b20      	ldr	r3, [pc, #128]	; (13888 <vControlHandlerTask+0xfc>)
   13808:	4798      	blx	r3
                    UiOrderShowMoves(&gamePacketIn);
   1380a:	230c      	movs	r3, #12
   1380c:	18fb      	adds	r3, r7, r3
   1380e:	0018      	movs	r0, r3
   13810:	4b1e      	ldr	r3, [pc, #120]	; (1388c <vControlHandlerTask+0x100>)
   13812:	4798      	blx	r3
                    controlState = CONTROL_PLAYING_MOVE;
   13814:	4b19      	ldr	r3, [pc, #100]	; (1387c <vControlHandlerTask+0xf0>)
   13816:	2201      	movs	r2, #1
   13818:	701a      	strb	r2, [r3, #0]
                }

                break;
   1381a:	46c0      	nop			; (mov r8, r8)
   1381c:	e01b      	b.n	13856 <vControlHandlerTask+0xca>
            }

            case (CONTROL_PLAYING_MOVE): {  // Should wait until the UI thread has showed the move AND comes back with the play from the user. Should go back to CONTROL_WAIT_FOR_GAME
                // after posting the game to MQTT
                if (UiPlayIsDone() == true) {
   1381e:	4b1c      	ldr	r3, [pc, #112]	; (13890 <vControlHandlerTask+0x104>)
   13820:	4798      	blx	r3
   13822:	1e03      	subs	r3, r0, #0
   13824:	d019      	beq.n	1385a <vControlHandlerTask+0xce>
                    // Send back local game packet
                    if (pdTRUE != WifiAddGameDataToQueue(UiGetGamePacketOut())) {
   13826:	4b1b      	ldr	r3, [pc, #108]	; (13894 <vControlHandlerTask+0x108>)
   13828:	4798      	blx	r3
   1382a:	0003      	movs	r3, r0
   1382c:	0018      	movs	r0, r3
   1382e:	4b1a      	ldr	r3, [pc, #104]	; (13898 <vControlHandlerTask+0x10c>)
   13830:	4798      	blx	r3
   13832:	0003      	movs	r3, r0
   13834:	2b01      	cmp	r3, #1
   13836:	d004      	beq.n	13842 <vControlHandlerTask+0xb6>
                        LogMessage(LOG_DEBUG_LVL, "Control Thread: Could not send game packet!\r\n");
   13838:	4b18      	ldr	r3, [pc, #96]	; (1389c <vControlHandlerTask+0x110>)
   1383a:	0019      	movs	r1, r3
   1383c:	2001      	movs	r0, #1
   1383e:	4b12      	ldr	r3, [pc, #72]	; (13888 <vControlHandlerTask+0xfc>)
   13840:	4798      	blx	r3
                    }
                    controlState = CONTROL_WAIT_FOR_GAME;
   13842:	4b0e      	ldr	r3, [pc, #56]	; (1387c <vControlHandlerTask+0xf0>)
   13844:	2200      	movs	r2, #0
   13846:	701a      	strb	r2, [r3, #0]
                }

                break;
   13848:	e007      	b.n	1385a <vControlHandlerTask+0xce>
            case (CONTROL_END_GAME): {
                break;
            }

            default:
                controlState = CONTROL_WAIT_FOR_GAME;
   1384a:	4b0c      	ldr	r3, [pc, #48]	; (1387c <vControlHandlerTask+0xf0>)
   1384c:	2200      	movs	r2, #0
   1384e:	701a      	strb	r2, [r3, #0]
                break;
   13850:	e004      	b.n	1385c <vControlHandlerTask+0xd0>
                break;
   13852:	46c0      	nop			; (mov r8, r8)
   13854:	e002      	b.n	1385c <vControlHandlerTask+0xd0>
                break;
   13856:	46c0      	nop			; (mov r8, r8)
   13858:	e000      	b.n	1385c <vControlHandlerTask+0xd0>
                break;
   1385a:	46c0      	nop			; (mov r8, r8)
        }
        vTaskDelay(40);
   1385c:	2028      	movs	r0, #40	; 0x28
   1385e:	4b10      	ldr	r3, [pc, #64]	; (138a0 <vControlHandlerTask+0x114>)
   13860:	4798      	blx	r3
        switch (controlState) {
   13862:	e7ba      	b.n	137da <vControlHandlerTask+0x4e>
   13864:	00035e30 	.word	0x00035e30
   13868:	0001d9e5 	.word	0x0001d9e5
   1386c:	0001a085 	.word	0x0001a085
   13870:	20000480 	.word	0x20000480
   13874:	20000484 	.word	0x20000484
   13878:	00035e50 	.word	0x00035e50
   1387c:	20004614 	.word	0x20004614
   13880:	0001abe5 	.word	0x0001abe5
   13884:	00035e7c 	.word	0x00035e7c
   13888:	0001dad1 	.word	0x0001dad1
   1388c:	000157b1 	.word	0x000157b1
   13890:	000157ed 	.word	0x000157ed
   13894:	00015801 	.word	0x00015801
   13898:	00017129 	.word	0x00017129
   1389c:	00035ea4 	.word	0x00035ea4
   138a0:	0001bd91 	.word	0x0001bd91

000138a4 <ControlAddGameData>:
 * @return		Returns pdTrue if data can be added to queue, 0 if queue is full
 * @note

 */
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   138a4:	b590      	push	{r4, r7, lr}
   138a6:	b085      	sub	sp, #20
   138a8:	af00      	add	r7, sp, #0
   138aa:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBufferIn, gameIn, (TickType_t)10);
   138ac:	4b06      	ldr	r3, [pc, #24]	; (138c8 <ControlAddGameData+0x24>)
   138ae:	6818      	ldr	r0, [r3, #0]
   138b0:	6879      	ldr	r1, [r7, #4]
   138b2:	2300      	movs	r3, #0
   138b4:	220a      	movs	r2, #10
   138b6:	4c05      	ldr	r4, [pc, #20]	; (138cc <ControlAddGameData+0x28>)
   138b8:	47a0      	blx	r4
   138ba:	0003      	movs	r3, r0
   138bc:	60fb      	str	r3, [r7, #12]
    return error;
   138be:	68fb      	ldr	r3, [r7, #12]
}
   138c0:	0018      	movs	r0, r3
   138c2:	46bd      	mov	sp, r7
   138c4:	b005      	add	sp, #20
   138c6:	bd90      	pop	{r4, r7, pc}
   138c8:	20000480 	.word	0x20000480
   138cc:	0001a32d 	.word	0x0001a32d

000138d0 <DistanceSensorGetDistance>:
 * @fn			int32_t DistanceSensorGetDistance (uint16_t *distance)
 * @brief		Gets the distance from the distance sensor.
 * @note			Returns 0 if successful. -1 if an error occurred
 */
int32_t DistanceSensorGetDistance(uint16_t *distance, const TickType_t xMaxBlockTime)
{
   138d0:	b580      	push	{r7, lr}
   138d2:	b084      	sub	sp, #16
   138d4:	af00      	add	r7, sp, #0
   138d6:	6078      	str	r0, [r7, #4]
   138d8:	6039      	str	r1, [r7, #0]
    int error = ERROR_NONE;
   138da:	2300      	movs	r3, #0
   138dc:	60fb      	str	r3, [r7, #12]

    // 1. Get MUTEX. DistanceSensorGetMutex. If we cant get it, goto
    error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
   138de:	2396      	movs	r3, #150	; 0x96
   138e0:	005b      	lsls	r3, r3, #1
   138e2:	0018      	movs	r0, r3
   138e4:	4b25      	ldr	r3, [pc, #148]	; (1397c <DistanceSensorGetDistance+0xac>)
   138e6:	4798      	blx	r3
   138e8:	0003      	movs	r3, r0
   138ea:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exitf;
   138ec:	68fb      	ldr	r3, [r7, #12]
   138ee:	2b00      	cmp	r3, #0
   138f0:	d139      	bne.n	13966 <DistanceSensorGetDistance+0x96>

    //---2. Initiate sending data. First populate TX with the distance command. Use usart_write_buffer_job to transmit 1 character
    distTx = DISTANCE_US_100_CMD_READ_DISTANCE;
   138f2:	4b23      	ldr	r3, [pc, #140]	; (13980 <DistanceSensorGetDistance+0xb0>)
   138f4:	2255      	movs	r2, #85	; 0x55
   138f6:	701a      	strb	r2, [r3, #0]
    if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t *)&distTx, 1)) {
   138f8:	4921      	ldr	r1, [pc, #132]	; (13980 <DistanceSensorGetDistance+0xb0>)
   138fa:	4b22      	ldr	r3, [pc, #136]	; (13984 <DistanceSensorGetDistance+0xb4>)
   138fc:	2201      	movs	r2, #1
   138fe:	0018      	movs	r0, r3
   13900:	4b21      	ldr	r3, [pc, #132]	; (13988 <DistanceSensorGetDistance+0xb8>)
   13902:	4798      	blx	r3
   13904:	1e03      	subs	r3, r0, #0
   13906:	d130      	bne.n	1396a <DistanceSensorGetDistance+0x9a>
        goto exitf;
    }

    // 3. )Wait until the TX finished. TX should release the binary semaphore - so wait until semaphore
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   13908:	4b20      	ldr	r3, [pc, #128]	; (1398c <DistanceSensorGetDistance+0xbc>)
   1390a:	681b      	ldr	r3, [r3, #0]
   1390c:	683a      	ldr	r2, [r7, #0]
   1390e:	0011      	movs	r1, r2
   13910:	0018      	movs	r0, r3
   13912:	4b1f      	ldr	r3, [pc, #124]	; (13990 <DistanceSensorGetDistance+0xc0>)
   13914:	4798      	blx	r3
   13916:	0003      	movs	r3, r0
   13918:	2b01      	cmp	r3, #1
   1391a:	d003      	beq.n	13924 <DistanceSensorGetDistance+0x54>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */

    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   1391c:	2303      	movs	r3, #3
   1391e:	425b      	negs	r3, r3
   13920:	60fb      	str	r3, [r7, #12]
        goto exitf;
   13922:	e023      	b.n	1396c <DistanceSensorGetDistance+0x9c>
    }

    // 4. Initiate an rx job - usart_read_buffer_job - to read two characters. Read into variable latestRxDistance
    usart_read_buffer_job(&usart_instance_dist, (uint8_t *)&latestRxDistance, 2);  // Kicks off constant reading of characters
   13924:	491b      	ldr	r1, [pc, #108]	; (13994 <DistanceSensorGetDistance+0xc4>)
   13926:	4b17      	ldr	r3, [pc, #92]	; (13984 <DistanceSensorGetDistance+0xb4>)
   13928:	2202      	movs	r2, #2
   1392a:	0018      	movs	r0, r3
   1392c:	4b1a      	ldr	r3, [pc, #104]	; (13998 <DistanceSensorGetDistance+0xc8>)
   1392e:	4798      	blx	r3

    //---7. Wait for notification
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   13930:	4b16      	ldr	r3, [pc, #88]	; (1398c <DistanceSensorGetDistance+0xbc>)
   13932:	681b      	ldr	r3, [r3, #0]
   13934:	683a      	ldr	r2, [r7, #0]
   13936:	0011      	movs	r1, r2
   13938:	0018      	movs	r0, r3
   1393a:	4b15      	ldr	r3, [pc, #84]	; (13990 <DistanceSensorGetDistance+0xc0>)
   1393c:	4798      	blx	r3
   1393e:	0003      	movs	r3, r0
   13940:	2b01      	cmp	r3, #1
   13942:	d10c      	bne.n	1395e <DistanceSensorGetDistance+0x8e>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        *distance = (latestRxDistance[0] << 8) + latestRxDistance[1];
   13944:	4b13      	ldr	r3, [pc, #76]	; (13994 <DistanceSensorGetDistance+0xc4>)
   13946:	781b      	ldrb	r3, [r3, #0]
   13948:	b29b      	uxth	r3, r3
   1394a:	021b      	lsls	r3, r3, #8
   1394c:	b29a      	uxth	r2, r3
   1394e:	4b11      	ldr	r3, [pc, #68]	; (13994 <DistanceSensorGetDistance+0xc4>)
   13950:	785b      	ldrb	r3, [r3, #1]
   13952:	b29b      	uxth	r3, r3
   13954:	18d3      	adds	r3, r2, r3
   13956:	b29a      	uxth	r2, r3
   13958:	687b      	ldr	r3, [r7, #4]
   1395a:	801a      	strh	r2, [r3, #0]
   1395c:	e006      	b.n	1396c <DistanceSensorGetDistance+0x9c>
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   1395e:	2303      	movs	r3, #3
   13960:	425b      	negs	r3, r3
   13962:	60fb      	str	r3, [r7, #12]
        goto exitf;
   13964:	e002      	b.n	1396c <DistanceSensorGetDistance+0x9c>
    if (ERROR_NONE != error) goto exitf;
   13966:	46c0      	nop			; (mov r8, r8)
   13968:	e000      	b.n	1396c <DistanceSensorGetDistance+0x9c>
        goto exitf;
   1396a:	46c0      	nop			; (mov r8, r8)
    }

exitf:
    // Release mutex and return error
    DistanceSensorFreeMutex();
   1396c:	4b0b      	ldr	r3, [pc, #44]	; (1399c <DistanceSensorGetDistance+0xcc>)
   1396e:	4798      	blx	r3

    return error;
   13970:	68fb      	ldr	r3, [r7, #12]
}
   13972:	0018      	movs	r0, r3
   13974:	46bd      	mov	sp, r7
   13976:	b004      	add	sp, #16
   13978:	bd80      	pop	{r7, pc}
   1397a:	46c0      	nop			; (mov r8, r8)
   1397c:	000139d9 	.word	0x000139d9
   13980:	2000461a 	.word	0x2000461a
   13984:	20004624 	.word	0x20004624
   13988:	00028b59 	.word	0x00028b59
   1398c:	2000461c 	.word	0x2000461c
   13990:	0001b03d 	.word	0x0001b03d
   13994:	20004618 	.word	0x20004618
   13998:	00028ba1 	.word	0x00028ba1
   1399c:	000139a1 	.word	0x000139a1

000139a0 <DistanceSensorFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorFreeMutex(void)
{
   139a0:	b590      	push	{r4, r7, lr}
   139a2:	b083      	sub	sp, #12
   139a4:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   139a6:	2300      	movs	r3, #0
   139a8:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorDistanceMutexHandle) != pdTRUE) {
   139aa:	4b09      	ldr	r3, [pc, #36]	; (139d0 <DistanceSensorFreeMutex+0x30>)
   139ac:	6818      	ldr	r0, [r3, #0]
   139ae:	2300      	movs	r3, #0
   139b0:	2200      	movs	r2, #0
   139b2:	2100      	movs	r1, #0
   139b4:	4c07      	ldr	r4, [pc, #28]	; (139d4 <DistanceSensorFreeMutex+0x34>)
   139b6:	47a0      	blx	r4
   139b8:	0003      	movs	r3, r0
   139ba:	2b01      	cmp	r3, #1
   139bc:	d002      	beq.n	139c4 <DistanceSensorFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   139be:	2314      	movs	r3, #20
   139c0:	425b      	negs	r3, r3
   139c2:	607b      	str	r3, [r7, #4]
    }
    return error;
   139c4:	687b      	ldr	r3, [r7, #4]
}
   139c6:	0018      	movs	r0, r3
   139c8:	46bd      	mov	sp, r7
   139ca:	b003      	add	sp, #12
   139cc:	bd90      	pop	{r4, r7, pc}
   139ce:	46c0      	nop			; (mov r8, r8)
   139d0:	20004620 	.word	0x20004620
   139d4:	0001a32d 	.word	0x0001a32d

000139d8 <DistanceSensorGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorGetMutex(TickType_t waitTime)
{
   139d8:	b580      	push	{r7, lr}
   139da:	b084      	sub	sp, #16
   139dc:	af00      	add	r7, sp, #0
   139de:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   139e0:	2300      	movs	r3, #0
   139e2:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorDistanceMutexHandle, waitTime) != pdTRUE) {
   139e4:	4b08      	ldr	r3, [pc, #32]	; (13a08 <DistanceSensorGetMutex+0x30>)
   139e6:	681b      	ldr	r3, [r3, #0]
   139e8:	687a      	ldr	r2, [r7, #4]
   139ea:	0011      	movs	r1, r2
   139ec:	0018      	movs	r0, r3
   139ee:	4b07      	ldr	r3, [pc, #28]	; (13a0c <DistanceSensorGetMutex+0x34>)
   139f0:	4798      	blx	r3
   139f2:	0003      	movs	r3, r0
   139f4:	2b01      	cmp	r3, #1
   139f6:	d002      	beq.n	139fe <DistanceSensorGetMutex+0x26>
        error = ERROR_NOT_READY;
   139f8:	231d      	movs	r3, #29
   139fa:	425b      	negs	r3, r3
   139fc:	60fb      	str	r3, [r7, #12]
    }
    return error;
   139fe:	68fb      	ldr	r3, [r7, #12]
   13a00:	0018      	movs	r0, r3
   13a02:	46bd      	mov	sp, r7
   13a04:	b004      	add	sp, #16
   13a06:	bd80      	pop	{r7, pc}
   13a08:	20004620 	.word	0x20004620
   13a0c:	0001b03d 	.word	0x0001b03d

00013a10 <system_interrupt_enable>:
{
   13a10:	b580      	push	{r7, lr}
   13a12:	b082      	sub	sp, #8
   13a14:	af00      	add	r7, sp, #0
   13a16:	0002      	movs	r2, r0
   13a18:	1dfb      	adds	r3, r7, #7
   13a1a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13a1c:	4b06      	ldr	r3, [pc, #24]	; (13a38 <system_interrupt_enable+0x28>)
   13a1e:	1dfa      	adds	r2, r7, #7
   13a20:	7812      	ldrb	r2, [r2, #0]
   13a22:	0011      	movs	r1, r2
   13a24:	221f      	movs	r2, #31
   13a26:	400a      	ands	r2, r1
   13a28:	2101      	movs	r1, #1
   13a2a:	4091      	lsls	r1, r2
   13a2c:	000a      	movs	r2, r1
   13a2e:	601a      	str	r2, [r3, #0]
}
   13a30:	46c0      	nop			; (mov r8, r8)
   13a32:	46bd      	mov	sp, r7
   13a34:	b002      	add	sp, #8
   13a36:	bd80      	pop	{r7, pc}
   13a38:	e000e100 	.word	0xe000e100

00013a3c <i2c_master_is_syncing>:
{
   13a3c:	b580      	push	{r7, lr}
   13a3e:	b084      	sub	sp, #16
   13a40:	af00      	add	r7, sp, #0
   13a42:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13a44:	687b      	ldr	r3, [r7, #4]
   13a46:	681b      	ldr	r3, [r3, #0]
   13a48:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   13a4a:	68fb      	ldr	r3, [r7, #12]
   13a4c:	69db      	ldr	r3, [r3, #28]
   13a4e:	2207      	movs	r2, #7
   13a50:	4013      	ands	r3, r2
   13a52:	1e5a      	subs	r2, r3, #1
   13a54:	4193      	sbcs	r3, r2
   13a56:	b2db      	uxtb	r3, r3
}
   13a58:	0018      	movs	r0, r3
   13a5a:	46bd      	mov	sp, r7
   13a5c:	b004      	add	sp, #16
   13a5e:	bd80      	pop	{r7, pc}

00013a60 <_i2c_master_wait_for_sync>:
{
   13a60:	b580      	push	{r7, lr}
   13a62:	b082      	sub	sp, #8
   13a64:	af00      	add	r7, sp, #0
   13a66:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   13a68:	46c0      	nop			; (mov r8, r8)
   13a6a:	687b      	ldr	r3, [r7, #4]
   13a6c:	0018      	movs	r0, r3
   13a6e:	4b04      	ldr	r3, [pc, #16]	; (13a80 <_i2c_master_wait_for_sync+0x20>)
   13a70:	4798      	blx	r3
   13a72:	1e03      	subs	r3, r0, #0
   13a74:	d1f9      	bne.n	13a6a <_i2c_master_wait_for_sync+0xa>
}
   13a76:	46c0      	nop			; (mov r8, r8)
   13a78:	46bd      	mov	sp, r7
   13a7a:	b002      	add	sp, #8
   13a7c:	bd80      	pop	{r7, pc}
   13a7e:	46c0      	nop			; (mov r8, r8)
   13a80:	00013a3d 	.word	0x00013a3d

00013a84 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   13a84:	b580      	push	{r7, lr}
   13a86:	b082      	sub	sp, #8
   13a88:	af00      	add	r7, sp, #0
   13a8a:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   13a8c:	687b      	ldr	r3, [r7, #4]
   13a8e:	2264      	movs	r2, #100	; 0x64
   13a90:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   13a92:	687b      	ldr	r3, [r7, #4]
   13a94:	4a1b      	ldr	r2, [pc, #108]	; (13b04 <i2c_master_get_config_defaults+0x80>)
   13a96:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   13a98:	687b      	ldr	r3, [r7, #4]
   13a9a:	2200      	movs	r2, #0
   13a9c:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   13a9e:	687b      	ldr	r3, [r7, #4]
   13aa0:	2200      	movs	r2, #0
   13aa2:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   13aa4:	687b      	ldr	r3, [r7, #4]
   13aa6:	2200      	movs	r2, #0
   13aa8:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   13aaa:	687b      	ldr	r3, [r7, #4]
   13aac:	2280      	movs	r2, #128	; 0x80
   13aae:	0392      	lsls	r2, r2, #14
   13ab0:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   13ab2:	687b      	ldr	r3, [r7, #4]
   13ab4:	2201      	movs	r2, #1
   13ab6:	4252      	negs	r2, r2
   13ab8:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   13aba:	687b      	ldr	r3, [r7, #4]
   13abc:	2201      	movs	r2, #1
   13abe:	4252      	negs	r2, r2
   13ac0:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   13ac2:	687b      	ldr	r3, [r7, #4]
   13ac4:	2200      	movs	r2, #0
   13ac6:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   13ac8:	687b      	ldr	r3, [r7, #4]
   13aca:	2200      	movs	r2, #0
   13acc:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   13ace:	687b      	ldr	r3, [r7, #4]
   13ad0:	2224      	movs	r2, #36	; 0x24
   13ad2:	2100      	movs	r1, #0
   13ad4:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   13ad6:	687b      	ldr	r3, [r7, #4]
   13ad8:	2200      	movs	r2, #0
   13ada:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   13adc:	687b      	ldr	r3, [r7, #4]
   13ade:	222c      	movs	r2, #44	; 0x2c
   13ae0:	2100      	movs	r1, #0
   13ae2:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   13ae4:	687b      	ldr	r3, [r7, #4]
   13ae6:	222d      	movs	r2, #45	; 0x2d
   13ae8:	2100      	movs	r1, #0
   13aea:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   13aec:	687b      	ldr	r3, [r7, #4]
   13aee:	222e      	movs	r2, #46	; 0x2e
   13af0:	2100      	movs	r1, #0
   13af2:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   13af4:	687b      	ldr	r3, [r7, #4]
   13af6:	22d7      	movs	r2, #215	; 0xd7
   13af8:	861a      	strh	r2, [r3, #48]	; 0x30
}
   13afa:	46c0      	nop			; (mov r8, r8)
   13afc:	46bd      	mov	sp, r7
   13afe:	b002      	add	sp, #8
   13b00:	bd80      	pop	{r7, pc}
   13b02:	46c0      	nop			; (mov r8, r8)
   13b04:	00000d48 	.word	0x00000d48

00013b08 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   13b08:	b580      	push	{r7, lr}
   13b0a:	b084      	sub	sp, #16
   13b0c:	af00      	add	r7, sp, #0
   13b0e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13b10:	687b      	ldr	r3, [r7, #4]
   13b12:	681b      	ldr	r3, [r3, #0]
   13b14:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   13b16:	2300      	movs	r3, #0
   13b18:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   13b1a:	687b      	ldr	r3, [r7, #4]
   13b1c:	0018      	movs	r0, r3
   13b1e:	4b14      	ldr	r3, [pc, #80]	; (13b70 <i2c_master_enable+0x68>)
   13b20:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   13b22:	68bb      	ldr	r3, [r7, #8]
   13b24:	681b      	ldr	r3, [r3, #0]
   13b26:	2202      	movs	r2, #2
   13b28:	431a      	orrs	r2, r3
   13b2a:	68bb      	ldr	r3, [r7, #8]
   13b2c:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   13b2e:	687b      	ldr	r3, [r7, #4]
   13b30:	681b      	ldr	r3, [r3, #0]
   13b32:	0018      	movs	r0, r3
   13b34:	4b0f      	ldr	r3, [pc, #60]	; (13b74 <i2c_master_enable+0x6c>)
   13b36:	4798      	blx	r3
   13b38:	0003      	movs	r3, r0
   13b3a:	0018      	movs	r0, r3
   13b3c:	4b0e      	ldr	r3, [pc, #56]	; (13b78 <i2c_master_enable+0x70>)
   13b3e:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   13b40:	e00c      	b.n	13b5c <i2c_master_enable+0x54>
		timeout_counter++;
   13b42:	68fb      	ldr	r3, [r7, #12]
   13b44:	3301      	adds	r3, #1
   13b46:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   13b48:	687b      	ldr	r3, [r7, #4]
   13b4a:	88db      	ldrh	r3, [r3, #6]
   13b4c:	001a      	movs	r2, r3
   13b4e:	68fb      	ldr	r3, [r7, #12]
   13b50:	429a      	cmp	r2, r3
   13b52:	d803      	bhi.n	13b5c <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   13b54:	68bb      	ldr	r3, [r7, #8]
   13b56:	2210      	movs	r2, #16
   13b58:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   13b5a:	e006      	b.n	13b6a <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   13b5c:	68bb      	ldr	r3, [r7, #8]
   13b5e:	8b5b      	ldrh	r3, [r3, #26]
   13b60:	b29b      	uxth	r3, r3
   13b62:	001a      	movs	r2, r3
   13b64:	2310      	movs	r3, #16
   13b66:	4013      	ands	r3, r2
   13b68:	d0eb      	beq.n	13b42 <i2c_master_enable+0x3a>
		}
	}
}
   13b6a:	46bd      	mov	sp, r7
   13b6c:	b004      	add	sp, #16
   13b6e:	bd80      	pop	{r7, pc}
   13b70:	00013a61 	.word	0x00013a61
   13b74:	000272f9 	.word	0x000272f9
   13b78:	00013a11 	.word	0x00013a11

00013b7c <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   13b7c:	b580      	push	{r7, lr}
   13b7e:	b082      	sub	sp, #8
   13b80:	af00      	add	r7, sp, #0
   13b82:	6078      	str	r0, [r7, #4]
   13b84:	000a      	movs	r2, r1
   13b86:	1cfb      	adds	r3, r7, #3
   13b88:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   13b8a:	687b      	ldr	r3, [r7, #4]
   13b8c:	7e5b      	ldrb	r3, [r3, #25]
   13b8e:	b2db      	uxtb	r3, r3
   13b90:	b25a      	sxtb	r2, r3
   13b92:	1cfb      	adds	r3, r7, #3
   13b94:	781b      	ldrb	r3, [r3, #0]
   13b96:	2101      	movs	r1, #1
   13b98:	4099      	lsls	r1, r3
   13b9a:	000b      	movs	r3, r1
   13b9c:	b25b      	sxtb	r3, r3
   13b9e:	4313      	orrs	r3, r2
   13ba0:	b25b      	sxtb	r3, r3
   13ba2:	b2da      	uxtb	r2, r3
   13ba4:	687b      	ldr	r3, [r7, #4]
   13ba6:	765a      	strb	r2, [r3, #25]
}
   13ba8:	46c0      	nop			; (mov r8, r8)
   13baa:	46bd      	mov	sp, r7
   13bac:	b002      	add	sp, #8
   13bae:	bd80      	pop	{r7, pc}

00013bb0 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   13bb0:	b590      	push	{r4, r7, lr}
   13bb2:	b091      	sub	sp, #68	; 0x44
   13bb4:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   13bb6:	2300      	movs	r3, #0
   13bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   13bba:	233a      	movs	r3, #58	; 0x3a
   13bbc:	18fb      	adds	r3, r7, r3
   13bbe:	2200      	movs	r2, #0
   13bc0:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   13bc2:	1d3b      	adds	r3, r7, #4
   13bc4:	0018      	movs	r0, r3
   13bc6:	4b21      	ldr	r3, [pc, #132]	; (13c4c <I2cDriverConfigureSensorBus+0x9c>)
   13bc8:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   13bca:	1d3b      	adds	r3, r7, #4
   13bcc:	4a20      	ldr	r2, [pc, #128]	; (13c50 <I2cDriverConfigureSensorBus+0xa0>)
   13bce:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   13bd0:	1d3b      	adds	r3, r7, #4
   13bd2:	4a20      	ldr	r2, [pc, #128]	; (13c54 <I2cDriverConfigureSensorBus+0xa4>)
   13bd4:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   13bd6:	1d3b      	adds	r3, r7, #4
   13bd8:	22fa      	movs	r2, #250	; 0xfa
   13bda:	0092      	lsls	r2, r2, #2
   13bdc:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   13bde:	233b      	movs	r3, #59	; 0x3b
   13be0:	18fb      	adds	r3, r7, r3
   13be2:	2203      	movs	r2, #3
   13be4:	701a      	strb	r2, [r3, #0]
   13be6:	e01e      	b.n	13c26 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   13be8:	233a      	movs	r3, #58	; 0x3a
   13bea:	18fc      	adds	r4, r7, r3
   13bec:	1d3a      	adds	r2, r7, #4
   13bee:	491a      	ldr	r1, [pc, #104]	; (13c58 <I2cDriverConfigureSensorBus+0xa8>)
   13bf0:	4b1a      	ldr	r3, [pc, #104]	; (13c5c <I2cDriverConfigureSensorBus+0xac>)
   13bf2:	0018      	movs	r0, r3
   13bf4:	4b1a      	ldr	r3, [pc, #104]	; (13c60 <I2cDriverConfigureSensorBus+0xb0>)
   13bf6:	4798      	blx	r3
   13bf8:	0003      	movs	r3, r0
   13bfa:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   13bfc:	233a      	movs	r3, #58	; 0x3a
   13bfe:	18fb      	adds	r3, r7, r3
   13c00:	781b      	ldrb	r3, [r3, #0]
   13c02:	2b00      	cmp	r3, #0
   13c04:	d104      	bne.n	13c10 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   13c06:	233a      	movs	r3, #58	; 0x3a
   13c08:	18fb      	adds	r3, r7, r3
   13c0a:	781b      	ldrb	r3, [r3, #0]
   13c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   13c0e:	e00f      	b.n	13c30 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   13c10:	4b12      	ldr	r3, [pc, #72]	; (13c5c <I2cDriverConfigureSensorBus+0xac>)
   13c12:	0018      	movs	r0, r3
   13c14:	4b13      	ldr	r3, [pc, #76]	; (13c64 <I2cDriverConfigureSensorBus+0xb4>)
   13c16:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   13c18:	233b      	movs	r3, #59	; 0x3b
   13c1a:	18fb      	adds	r3, r7, r3
   13c1c:	781a      	ldrb	r2, [r3, #0]
   13c1e:	233b      	movs	r3, #59	; 0x3b
   13c20:	18fb      	adds	r3, r7, r3
   13c22:	3a01      	subs	r2, #1
   13c24:	701a      	strb	r2, [r3, #0]
   13c26:	233b      	movs	r3, #59	; 0x3b
   13c28:	18fb      	adds	r3, r7, r3
   13c2a:	781b      	ldrb	r3, [r3, #0]
   13c2c:	2b00      	cmp	r3, #0
   13c2e:	d1db      	bne.n	13be8 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   13c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13c32:	2b00      	cmp	r3, #0
   13c34:	d104      	bne.n	13c40 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   13c36:	4b09      	ldr	r3, [pc, #36]	; (13c5c <I2cDriverConfigureSensorBus+0xac>)
   13c38:	0018      	movs	r0, r3
   13c3a:	4b0b      	ldr	r3, [pc, #44]	; (13c68 <I2cDriverConfigureSensorBus+0xb8>)
   13c3c:	4798      	blx	r3
   13c3e:	e000      	b.n	13c42 <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   13c40:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   13c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   13c44:	0018      	movs	r0, r3
   13c46:	46bd      	mov	sp, r7
   13c48:	b011      	add	sp, #68	; 0x44
   13c4a:	bd90      	pop	{r4, r7, pc}
   13c4c:	00013a85 	.word	0x00013a85
   13c50:	00080002 	.word	0x00080002
   13c54:	00090002 	.word	0x00090002
   13c58:	42000800 	.word	0x42000800
   13c5c:	2000465c 	.word	0x2000465c
   13c60:	00017719 	.word	0x00017719
   13c64:	0001784d 	.word	0x0001784d
   13c68:	00013b09 	.word	0x00013b09

00013c6c <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   13c6c:	b580      	push	{r7, lr}
   13c6e:	b084      	sub	sp, #16
   13c70:	af00      	add	r7, sp, #0
   13c72:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13c74:	4b0e      	ldr	r3, [pc, #56]	; (13cb0 <I2cSensorsTxComplete+0x44>)
   13c76:	2200      	movs	r2, #0
   13c78:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   13c7a:	4b0d      	ldr	r3, [pc, #52]	; (13cb0 <I2cSensorsTxComplete+0x44>)
   13c7c:	2201      	movs	r2, #1
   13c7e:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13c80:	2300      	movs	r3, #0
   13c82:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13c84:	4b0b      	ldr	r3, [pc, #44]	; (13cb4 <I2cSensorsTxComplete+0x48>)
   13c86:	681b      	ldr	r3, [r3, #0]
   13c88:	220c      	movs	r2, #12
   13c8a:	18ba      	adds	r2, r7, r2
   13c8c:	0011      	movs	r1, r2
   13c8e:	0018      	movs	r0, r3
   13c90:	4b09      	ldr	r3, [pc, #36]	; (13cb8 <I2cSensorsTxComplete+0x4c>)
   13c92:	4798      	blx	r3
    sensorTransmitError = false;
   13c94:	4b09      	ldr	r3, [pc, #36]	; (13cbc <I2cSensorsTxComplete+0x50>)
   13c96:	2200      	movs	r2, #0
   13c98:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13c9a:	68fb      	ldr	r3, [r7, #12]
   13c9c:	2b00      	cmp	r3, #0
   13c9e:	d003      	beq.n	13ca8 <I2cSensorsTxComplete+0x3c>
   13ca0:	4b07      	ldr	r3, [pc, #28]	; (13cc0 <I2cSensorsTxComplete+0x54>)
   13ca2:	2280      	movs	r2, #128	; 0x80
   13ca4:	0552      	lsls	r2, r2, #21
   13ca6:	601a      	str	r2, [r3, #0]
}
   13ca8:	46c0      	nop			; (mov r8, r8)
   13caa:	46bd      	mov	sp, r7
   13cac:	b004      	add	sp, #16
   13cae:	bd80      	pop	{r7, pc}
   13cb0:	2000048c 	.word	0x2000048c
   13cb4:	20004684 	.word	0x20004684
   13cb8:	0001a9b5 	.word	0x0001a9b5
   13cbc:	20000488 	.word	0x20000488
   13cc0:	e000ed04 	.word	0xe000ed04

00013cc4 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   13cc4:	b580      	push	{r7, lr}
   13cc6:	b084      	sub	sp, #16
   13cc8:	af00      	add	r7, sp, #0
   13cca:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13ccc:	4b0e      	ldr	r3, [pc, #56]	; (13d08 <I2cSensorsRxComplete+0x44>)
   13cce:	2200      	movs	r2, #0
   13cd0:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   13cd2:	4b0d      	ldr	r3, [pc, #52]	; (13d08 <I2cSensorsRxComplete+0x44>)
   13cd4:	2201      	movs	r2, #1
   13cd6:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13cd8:	2300      	movs	r3, #0
   13cda:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13cdc:	4b0b      	ldr	r3, [pc, #44]	; (13d0c <I2cSensorsRxComplete+0x48>)
   13cde:	681b      	ldr	r3, [r3, #0]
   13ce0:	220c      	movs	r2, #12
   13ce2:	18ba      	adds	r2, r7, r2
   13ce4:	0011      	movs	r1, r2
   13ce6:	0018      	movs	r0, r3
   13ce8:	4b09      	ldr	r3, [pc, #36]	; (13d10 <I2cSensorsRxComplete+0x4c>)
   13cea:	4798      	blx	r3
    sensorTransmitError = false;
   13cec:	4b09      	ldr	r3, [pc, #36]	; (13d14 <I2cSensorsRxComplete+0x50>)
   13cee:	2200      	movs	r2, #0
   13cf0:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13cf2:	68fb      	ldr	r3, [r7, #12]
   13cf4:	2b00      	cmp	r3, #0
   13cf6:	d003      	beq.n	13d00 <I2cSensorsRxComplete+0x3c>
   13cf8:	4b07      	ldr	r3, [pc, #28]	; (13d18 <I2cSensorsRxComplete+0x54>)
   13cfa:	2280      	movs	r2, #128	; 0x80
   13cfc:	0552      	lsls	r2, r2, #21
   13cfe:	601a      	str	r2, [r3, #0]
}
   13d00:	46c0      	nop			; (mov r8, r8)
   13d02:	46bd      	mov	sp, r7
   13d04:	b004      	add	sp, #16
   13d06:	bd80      	pop	{r7, pc}
   13d08:	2000048c 	.word	0x2000048c
   13d0c:	20004684 	.word	0x20004684
   13d10:	0001a9b5 	.word	0x0001a9b5
   13d14:	20000488 	.word	0x20000488
   13d18:	e000ed04 	.word	0xe000ed04

00013d1c <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   13d1c:	b580      	push	{r7, lr}
   13d1e:	b084      	sub	sp, #16
   13d20:	af00      	add	r7, sp, #0
   13d22:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13d24:	4b0e      	ldr	r3, [pc, #56]	; (13d60 <I2cSensorsError+0x44>)
   13d26:	2200      	movs	r2, #0
   13d28:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   13d2a:	4b0d      	ldr	r3, [pc, #52]	; (13d60 <I2cSensorsError+0x44>)
   13d2c:	2201      	movs	r2, #1
   13d2e:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13d30:	2300      	movs	r3, #0
   13d32:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13d34:	4b0b      	ldr	r3, [pc, #44]	; (13d64 <I2cSensorsError+0x48>)
   13d36:	681b      	ldr	r3, [r3, #0]
   13d38:	220c      	movs	r2, #12
   13d3a:	18ba      	adds	r2, r7, r2
   13d3c:	0011      	movs	r1, r2
   13d3e:	0018      	movs	r0, r3
   13d40:	4b09      	ldr	r3, [pc, #36]	; (13d68 <I2cSensorsError+0x4c>)
   13d42:	4798      	blx	r3
    sensorTransmitError = true;
   13d44:	4b09      	ldr	r3, [pc, #36]	; (13d6c <I2cSensorsError+0x50>)
   13d46:	2201      	movs	r2, #1
   13d48:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13d4a:	68fb      	ldr	r3, [r7, #12]
   13d4c:	2b00      	cmp	r3, #0
   13d4e:	d003      	beq.n	13d58 <I2cSensorsError+0x3c>
   13d50:	4b07      	ldr	r3, [pc, #28]	; (13d70 <I2cSensorsError+0x54>)
   13d52:	2280      	movs	r2, #128	; 0x80
   13d54:	0552      	lsls	r2, r2, #21
   13d56:	601a      	str	r2, [r3, #0]
}
   13d58:	46c0      	nop			; (mov r8, r8)
   13d5a:	46bd      	mov	sp, r7
   13d5c:	b004      	add	sp, #16
   13d5e:	bd80      	pop	{r7, pc}
   13d60:	2000048c 	.word	0x2000048c
   13d64:	20004684 	.word	0x20004684
   13d68:	0001a9b5 	.word	0x0001a9b5
   13d6c:	20000488 	.word	0x20000488
   13d70:	e000ed04 	.word	0xe000ed04

00013d74 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   13d74:	b580      	push	{r7, lr}
   13d76:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   13d78:	4911      	ldr	r1, [pc, #68]	; (13dc0 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   13d7a:	4b12      	ldr	r3, [pc, #72]	; (13dc4 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13d7c:	2200      	movs	r2, #0
   13d7e:	0018      	movs	r0, r3
   13d80:	4b11      	ldr	r3, [pc, #68]	; (13dc8 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13d82:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   13d84:	4b0f      	ldr	r3, [pc, #60]	; (13dc4 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13d86:	2100      	movs	r1, #0
   13d88:	0018      	movs	r0, r3
   13d8a:	4b10      	ldr	r3, [pc, #64]	; (13dcc <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13d8c:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   13d8e:	4910      	ldr	r1, [pc, #64]	; (13dd0 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   13d90:	4b0c      	ldr	r3, [pc, #48]	; (13dc4 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13d92:	2201      	movs	r2, #1
   13d94:	0018      	movs	r0, r3
   13d96:	4b0c      	ldr	r3, [pc, #48]	; (13dc8 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13d98:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   13d9a:	4b0a      	ldr	r3, [pc, #40]	; (13dc4 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13d9c:	2101      	movs	r1, #1
   13d9e:	0018      	movs	r0, r3
   13da0:	4b0a      	ldr	r3, [pc, #40]	; (13dcc <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13da2:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   13da4:	490b      	ldr	r1, [pc, #44]	; (13dd4 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   13da6:	4b07      	ldr	r3, [pc, #28]	; (13dc4 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13da8:	2202      	movs	r2, #2
   13daa:	0018      	movs	r0, r3
   13dac:	4b06      	ldr	r3, [pc, #24]	; (13dc8 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13dae:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   13db0:	4b04      	ldr	r3, [pc, #16]	; (13dc4 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13db2:	2102      	movs	r1, #2
   13db4:	0018      	movs	r0, r3
   13db6:	4b05      	ldr	r3, [pc, #20]	; (13dcc <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13db8:	4798      	blx	r3
}
   13dba:	46c0      	nop			; (mov r8, r8)
   13dbc:	46bd      	mov	sp, r7
   13dbe:	bd80      	pop	{r7, pc}
   13dc0:	00013c6d 	.word	0x00013c6d
   13dc4:	2000465c 	.word	0x2000465c
   13dc8:	00012909 	.word	0x00012909
   13dcc:	00013b7d 	.word	0x00013b7d
   13dd0:	00013cc5 	.word	0x00013cc5
   13dd4:	00013d1d 	.word	0x00013d1d

00013dd8 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   13dd8:	b580      	push	{r7, lr}
   13dda:	b082      	sub	sp, #8
   13ddc:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   13dde:	2300      	movs	r3, #0
   13de0:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   13de2:	4b14      	ldr	r3, [pc, #80]	; (13e34 <I2cInitializeDriver+0x5c>)
   13de4:	4798      	blx	r3
   13de6:	0003      	movs	r3, r0
   13de8:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   13dea:	687b      	ldr	r3, [r7, #4]
   13dec:	2b00      	cmp	r3, #0
   13dee:	d11a      	bne.n	13e26 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   13df0:	4b11      	ldr	r3, [pc, #68]	; (13e38 <I2cInitializeDriver+0x60>)
   13df2:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   13df4:	2001      	movs	r0, #1
   13df6:	4b11      	ldr	r3, [pc, #68]	; (13e3c <I2cInitializeDriver+0x64>)
   13df8:	4798      	blx	r3
   13dfa:	0002      	movs	r2, r0
   13dfc:	4b10      	ldr	r3, [pc, #64]	; (13e40 <I2cInitializeDriver+0x68>)
   13dfe:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   13e00:	2203      	movs	r2, #3
   13e02:	2100      	movs	r1, #0
   13e04:	2001      	movs	r0, #1
   13e06:	4b0f      	ldr	r3, [pc, #60]	; (13e44 <I2cInitializeDriver+0x6c>)
   13e08:	4798      	blx	r3
   13e0a:	0002      	movs	r2, r0
   13e0c:	4b0e      	ldr	r3, [pc, #56]	; (13e48 <I2cInitializeDriver+0x70>)
   13e0e:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   13e10:	4b0b      	ldr	r3, [pc, #44]	; (13e40 <I2cInitializeDriver+0x68>)
   13e12:	681b      	ldr	r3, [r3, #0]
   13e14:	2b00      	cmp	r3, #0
   13e16:	d003      	beq.n	13e20 <I2cInitializeDriver+0x48>
   13e18:	4b0b      	ldr	r3, [pc, #44]	; (13e48 <I2cInitializeDriver+0x70>)
   13e1a:	681b      	ldr	r3, [r3, #0]
   13e1c:	2b00      	cmp	r3, #0
   13e1e:	d103      	bne.n	13e28 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   13e20:	2306      	movs	r3, #6
   13e22:	607b      	str	r3, [r7, #4]
        goto exit;
   13e24:	e000      	b.n	13e28 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   13e26:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13e28:	687b      	ldr	r3, [r7, #4]
}
   13e2a:	0018      	movs	r0, r3
   13e2c:	46bd      	mov	sp, r7
   13e2e:	b002      	add	sp, #8
   13e30:	bd80      	pop	{r7, pc}
   13e32:	46c0      	nop			; (mov r8, r8)
   13e34:	00013bb1 	.word	0x00013bb1
   13e38:	00013d75 	.word	0x00013d75
   13e3c:	0001a2ed 	.word	0x0001a2ed
   13e40:	20004658 	.word	0x20004658
   13e44:	0001a085 	.word	0x0001a085
   13e48:	20004684 	.word	0x20004684

00013e4c <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   13e4c:	b590      	push	{r4, r7, lr}
   13e4e:	b085      	sub	sp, #20
   13e50:	af00      	add	r7, sp, #0
   13e52:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13e54:	2300      	movs	r3, #0
   13e56:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   13e58:	687b      	ldr	r3, [r7, #4]
   13e5a:	2b00      	cmp	r3, #0
   13e5c:	d003      	beq.n	13e66 <I2cWriteData+0x1a>
   13e5e:	687b      	ldr	r3, [r7, #4]
   13e60:	685b      	ldr	r3, [r3, #4]
   13e62:	2b00      	cmp	r3, #0
   13e64:	d103      	bne.n	13e6e <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   13e66:	2308      	movs	r3, #8
   13e68:	425b      	negs	r3, r3
   13e6a:	60fb      	str	r3, [r7, #12]
        goto exit;
   13e6c:	e01f      	b.n	13eae <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   13e6e:	687b      	ldr	r3, [r7, #4]
   13e70:	781b      	ldrb	r3, [r3, #0]
   13e72:	b29a      	uxth	r2, r3
   13e74:	4b10      	ldr	r3, [pc, #64]	; (13eb8 <I2cWriteData+0x6c>)
   13e76:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   13e78:	687b      	ldr	r3, [r7, #4]
   13e7a:	685a      	ldr	r2, [r3, #4]
   13e7c:	4b0e      	ldr	r3, [pc, #56]	; (13eb8 <I2cWriteData+0x6c>)
   13e7e:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   13e80:	687b      	ldr	r3, [r7, #4]
   13e82:	89da      	ldrh	r2, [r3, #14]
   13e84:	4b0c      	ldr	r3, [pc, #48]	; (13eb8 <I2cWriteData+0x6c>)
   13e86:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   13e88:	230b      	movs	r3, #11
   13e8a:	18fc      	adds	r4, r7, r3
   13e8c:	4a0a      	ldr	r2, [pc, #40]	; (13eb8 <I2cWriteData+0x6c>)
   13e8e:	4b0b      	ldr	r3, [pc, #44]	; (13ebc <I2cWriteData+0x70>)
   13e90:	0011      	movs	r1, r2
   13e92:	0018      	movs	r0, r3
   13e94:	4b0a      	ldr	r3, [pc, #40]	; (13ec0 <I2cWriteData+0x74>)
   13e96:	4798      	blx	r3
   13e98:	0003      	movs	r3, r0
   13e9a:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   13e9c:	230b      	movs	r3, #11
   13e9e:	18fb      	adds	r3, r7, r3
   13ea0:	781b      	ldrb	r3, [r3, #0]
   13ea2:	2b00      	cmp	r3, #0
   13ea4:	d003      	beq.n	13eae <I2cWriteData+0x62>
        error = ERROR_IO;
   13ea6:	2306      	movs	r3, #6
   13ea8:	425b      	negs	r3, r3
   13eaa:	60fb      	str	r3, [r7, #12]
        goto exit;
   13eac:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13eae:	68fb      	ldr	r3, [r7, #12]
}
   13eb0:	0018      	movs	r0, r3
   13eb2:	46bd      	mov	sp, r7
   13eb4:	b005      	add	sp, #20
   13eb6:	bd90      	pop	{r4, r7, pc}
   13eb8:	20004688 	.word	0x20004688
   13ebc:	2000465c 	.word	0x2000465c
   13ec0:	00012b8d 	.word	0x00012b8d

00013ec4 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   13ec4:	b590      	push	{r4, r7, lr}
   13ec6:	b085      	sub	sp, #20
   13ec8:	af00      	add	r7, sp, #0
   13eca:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13ecc:	2300      	movs	r3, #0
   13ece:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   13ed0:	687b      	ldr	r3, [r7, #4]
   13ed2:	2b00      	cmp	r3, #0
   13ed4:	d003      	beq.n	13ede <I2cReadData+0x1a>
   13ed6:	687b      	ldr	r3, [r7, #4]
   13ed8:	685b      	ldr	r3, [r3, #4]
   13eda:	2b00      	cmp	r3, #0
   13edc:	d103      	bne.n	13ee6 <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   13ede:	2308      	movs	r3, #8
   13ee0:	425b      	negs	r3, r3
   13ee2:	60fb      	str	r3, [r7, #12]
        goto exit;
   13ee4:	e01f      	b.n	13f26 <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   13ee6:	687b      	ldr	r3, [r7, #4]
   13ee8:	781b      	ldrb	r3, [r3, #0]
   13eea:	b29a      	uxth	r2, r3
   13eec:	4b10      	ldr	r3, [pc, #64]	; (13f30 <I2cReadData+0x6c>)
   13eee:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   13ef0:	687b      	ldr	r3, [r7, #4]
   13ef2:	689a      	ldr	r2, [r3, #8]
   13ef4:	4b0e      	ldr	r3, [pc, #56]	; (13f30 <I2cReadData+0x6c>)
   13ef6:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   13ef8:	687b      	ldr	r3, [r7, #4]
   13efa:	899a      	ldrh	r2, [r3, #12]
   13efc:	4b0c      	ldr	r3, [pc, #48]	; (13f30 <I2cReadData+0x6c>)
   13efe:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   13f00:	230b      	movs	r3, #11
   13f02:	18fc      	adds	r4, r7, r3
   13f04:	4a0a      	ldr	r2, [pc, #40]	; (13f30 <I2cReadData+0x6c>)
   13f06:	4b0b      	ldr	r3, [pc, #44]	; (13f34 <I2cReadData+0x70>)
   13f08:	0011      	movs	r1, r2
   13f0a:	0018      	movs	r0, r3
   13f0c:	4b0a      	ldr	r3, [pc, #40]	; (13f38 <I2cReadData+0x74>)
   13f0e:	4798      	blx	r3
   13f10:	0003      	movs	r3, r0
   13f12:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   13f14:	230b      	movs	r3, #11
   13f16:	18fb      	adds	r3, r7, r3
   13f18:	781b      	ldrb	r3, [r3, #0]
   13f1a:	2b00      	cmp	r3, #0
   13f1c:	d003      	beq.n	13f26 <I2cReadData+0x62>
        error = ERROR_IO;
   13f1e:	2306      	movs	r3, #6
   13f20:	425b      	negs	r3, r3
   13f22:	60fb      	str	r3, [r7, #12]
        goto exit;
   13f24:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13f26:	68fb      	ldr	r3, [r7, #12]
}
   13f28:	0018      	movs	r0, r3
   13f2a:	46bd      	mov	sp, r7
   13f2c:	b005      	add	sp, #20
   13f2e:	bd90      	pop	{r4, r7, pc}
   13f30:	20004688 	.word	0x20004688
   13f34:	2000465c 	.word	0x2000465c
   13f38:	00012aa9 	.word	0x00012aa9

00013f3c <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   13f3c:	b590      	push	{r4, r7, lr}
   13f3e:	b083      	sub	sp, #12
   13f40:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   13f42:	2300      	movs	r3, #0
   13f44:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   13f46:	4b09      	ldr	r3, [pc, #36]	; (13f6c <I2cFreeMutex+0x30>)
   13f48:	6818      	ldr	r0, [r3, #0]
   13f4a:	2300      	movs	r3, #0
   13f4c:	2200      	movs	r2, #0
   13f4e:	2100      	movs	r1, #0
   13f50:	4c07      	ldr	r4, [pc, #28]	; (13f70 <I2cFreeMutex+0x34>)
   13f52:	47a0      	blx	r4
   13f54:	0003      	movs	r3, r0
   13f56:	2b01      	cmp	r3, #1
   13f58:	d002      	beq.n	13f60 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   13f5a:	2314      	movs	r3, #20
   13f5c:	425b      	negs	r3, r3
   13f5e:	607b      	str	r3, [r7, #4]
    }
    return error;
   13f60:	687b      	ldr	r3, [r7, #4]
}
   13f62:	0018      	movs	r0, r3
   13f64:	46bd      	mov	sp, r7
   13f66:	b003      	add	sp, #12
   13f68:	bd90      	pop	{r4, r7, pc}
   13f6a:	46c0      	nop			; (mov r8, r8)
   13f6c:	20004658 	.word	0x20004658
   13f70:	0001a32d 	.word	0x0001a32d

00013f74 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   13f74:	b580      	push	{r7, lr}
   13f76:	b084      	sub	sp, #16
   13f78:	af00      	add	r7, sp, #0
   13f7a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13f7c:	2300      	movs	r3, #0
   13f7e:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   13f80:	4b08      	ldr	r3, [pc, #32]	; (13fa4 <I2cGetMutex+0x30>)
   13f82:	681b      	ldr	r3, [r3, #0]
   13f84:	687a      	ldr	r2, [r7, #4]
   13f86:	0011      	movs	r1, r2
   13f88:	0018      	movs	r0, r3
   13f8a:	4b07      	ldr	r3, [pc, #28]	; (13fa8 <I2cGetMutex+0x34>)
   13f8c:	4798      	blx	r3
   13f8e:	0003      	movs	r3, r0
   13f90:	2b01      	cmp	r3, #1
   13f92:	d002      	beq.n	13f9a <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   13f94:	231d      	movs	r3, #29
   13f96:	425b      	negs	r3, r3
   13f98:	60fb      	str	r3, [r7, #12]
    }
    return error;
   13f9a:	68fb      	ldr	r3, [r7, #12]
}
   13f9c:	0018      	movs	r0, r3
   13f9e:	46bd      	mov	sp, r7
   13fa0:	b004      	add	sp, #16
   13fa2:	bd80      	pop	{r7, pc}
   13fa4:	20004658 	.word	0x20004658
   13fa8:	0001b03d 	.word	0x0001b03d

00013fac <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   13fac:	b580      	push	{r7, lr}
   13fae:	b084      	sub	sp, #16
   13fb0:	af00      	add	r7, sp, #0
   13fb2:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13fb4:	2300      	movs	r3, #0
   13fb6:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   13fb8:	4b04      	ldr	r3, [pc, #16]	; (13fcc <I2cGetSemaphoreHandle+0x20>)
   13fba:	681a      	ldr	r2, [r3, #0]
   13fbc:	687b      	ldr	r3, [r7, #4]
   13fbe:	601a      	str	r2, [r3, #0]
    return error;
   13fc0:	68fb      	ldr	r3, [r7, #12]
}
   13fc2:	0018      	movs	r0, r3
   13fc4:	46bd      	mov	sp, r7
   13fc6:	b004      	add	sp, #16
   13fc8:	bd80      	pop	{r7, pc}
   13fca:	46c0      	nop			; (mov r8, r8)
   13fcc:	20004684 	.word	0x20004684

00013fd0 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   13fd0:	b580      	push	{r7, lr}
   13fd2:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   13fd4:	4b02      	ldr	r3, [pc, #8]	; (13fe0 <I2cGetTaskErrorStatus+0x10>)
   13fd6:	781b      	ldrb	r3, [r3, #0]
}
   13fd8:	0018      	movs	r0, r3
   13fda:	46bd      	mov	sp, r7
   13fdc:	bd80      	pop	{r7, pc}
   13fde:	46c0      	nop			; (mov r8, r8)
   13fe0:	20000488 	.word	0x20000488

00013fe4 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   13fe4:	b580      	push	{r7, lr}
   13fe6:	b082      	sub	sp, #8
   13fe8:	af00      	add	r7, sp, #0
   13fea:	0002      	movs	r2, r0
   13fec:	1dfb      	adds	r3, r7, #7
   13fee:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   13ff0:	4b03      	ldr	r3, [pc, #12]	; (14000 <I2cSetTaskErrorStatus+0x1c>)
   13ff2:	1dfa      	adds	r2, r7, #7
   13ff4:	7812      	ldrb	r2, [r2, #0]
   13ff6:	701a      	strb	r2, [r3, #0]
}
   13ff8:	46c0      	nop			; (mov r8, r8)
   13ffa:	46bd      	mov	sp, r7
   13ffc:	b002      	add	sp, #8
   13ffe:	bd80      	pop	{r7, pc}
   14000:	20000488 	.word	0x20000488

00014004 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   14004:	b580      	push	{r7, lr}
   14006:	b084      	sub	sp, #16
   14008:	af00      	add	r7, sp, #0
   1400a:	6078      	str	r0, [r7, #4]
   1400c:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   1400e:	2300      	movs	r3, #0
   14010:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   14012:	2300      	movs	r3, #0
   14014:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14016:	2396      	movs	r3, #150	; 0x96
   14018:	005b      	lsls	r3, r3, #1
   1401a:	0018      	movs	r0, r3
   1401c:	4b28      	ldr	r3, [pc, #160]	; (140c0 <I2cWriteDataWait+0xbc>)
   1401e:	4798      	blx	r3
   14020:	0003      	movs	r3, r0
   14022:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14024:	68fb      	ldr	r3, [r7, #12]
   14026:	2b00      	cmp	r3, #0
   14028:	d138      	bne.n	1409c <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   1402a:	2308      	movs	r3, #8
   1402c:	18fb      	adds	r3, r7, r3
   1402e:	0018      	movs	r0, r3
   14030:	4b24      	ldr	r3, [pc, #144]	; (140c4 <I2cWriteDataWait+0xc0>)
   14032:	4798      	blx	r3
   14034:	0003      	movs	r3, r0
   14036:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14038:	68fb      	ldr	r3, [r7, #12]
   1403a:	2b00      	cmp	r3, #0
   1403c:	d130      	bne.n	140a0 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   1403e:	687b      	ldr	r3, [r7, #4]
   14040:	0018      	movs	r0, r3
   14042:	4b21      	ldr	r3, [pc, #132]	; (140c8 <I2cWriteDataWait+0xc4>)
   14044:	4798      	blx	r3
   14046:	0003      	movs	r3, r0
   14048:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   1404a:	68fb      	ldr	r3, [r7, #12]
   1404c:	2b00      	cmp	r3, #0
   1404e:	d12a      	bne.n	140a6 <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14050:	68bb      	ldr	r3, [r7, #8]
   14052:	683a      	ldr	r2, [r7, #0]
   14054:	0011      	movs	r1, r2
   14056:	0018      	movs	r0, r3
   14058:	4b1c      	ldr	r3, [pc, #112]	; (140cc <I2cWriteDataWait+0xc8>)
   1405a:	4798      	blx	r3
   1405c:	0003      	movs	r3, r0
   1405e:	2b01      	cmp	r3, #1
   14060:	d111      	bne.n	14086 <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14062:	4b1b      	ldr	r3, [pc, #108]	; (140d0 <I2cWriteDataWait+0xcc>)
   14064:	4798      	blx	r3
   14066:	1e03      	subs	r3, r0, #0
   14068:	d011      	beq.n	1408e <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   1406a:	2000      	movs	r0, #0
   1406c:	4b19      	ldr	r3, [pc, #100]	; (140d4 <I2cWriteDataWait+0xd0>)
   1406e:	4798      	blx	r3
            if (error != ERROR_NONE) {
   14070:	68fb      	ldr	r3, [r7, #12]
   14072:	2b00      	cmp	r3, #0
   14074:	d003      	beq.n	1407e <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   14076:	2321      	movs	r3, #33	; 0x21
   14078:	425b      	negs	r3, r3
   1407a:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   1407c:	e014      	b.n	140a8 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   1407e:	2303      	movs	r3, #3
   14080:	425b      	negs	r3, r3
   14082:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   14084:	e010      	b.n	140a8 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14086:	2303      	movs	r3, #3
   14088:	425b      	negs	r3, r3
   1408a:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   1408c:	e00c      	b.n	140a8 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   1408e:	4b12      	ldr	r3, [pc, #72]	; (140d8 <I2cWriteDataWait+0xd4>)
   14090:	4798      	blx	r3
   14092:	0002      	movs	r2, r0
   14094:	68fb      	ldr	r3, [r7, #12]
   14096:	4313      	orrs	r3, r2
   14098:	60fb      	str	r3, [r7, #12]
   1409a:	e002      	b.n	140a2 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   1409c:	46c0      	nop			; (mov r8, r8)
   1409e:	e000      	b.n	140a2 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   140a0:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   140a2:	68fb      	ldr	r3, [r7, #12]
   140a4:	e007      	b.n	140b6 <I2cWriteDataWait+0xb2>
        goto exitError0;
   140a6:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   140a8:	4b0b      	ldr	r3, [pc, #44]	; (140d8 <I2cWriteDataWait+0xd4>)
   140aa:	4798      	blx	r3
   140ac:	0002      	movs	r2, r0
   140ae:	68fb      	ldr	r3, [r7, #12]
   140b0:	4313      	orrs	r3, r2
   140b2:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   140b4:	68fb      	ldr	r3, [r7, #12]
}
   140b6:	0018      	movs	r0, r3
   140b8:	46bd      	mov	sp, r7
   140ba:	b004      	add	sp, #16
   140bc:	bd80      	pop	{r7, pc}
   140be:	46c0      	nop			; (mov r8, r8)
   140c0:	00013f75 	.word	0x00013f75
   140c4:	00013fad 	.word	0x00013fad
   140c8:	00013e4d 	.word	0x00013e4d
   140cc:	0001b03d 	.word	0x0001b03d
   140d0:	00013fd1 	.word	0x00013fd1
   140d4:	00013fe5 	.word	0x00013fe5
   140d8:	00013f3d 	.word	0x00013f3d

000140dc <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   140dc:	b580      	push	{r7, lr}
   140de:	b086      	sub	sp, #24
   140e0:	af00      	add	r7, sp, #0
   140e2:	60f8      	str	r0, [r7, #12]
   140e4:	60b9      	str	r1, [r7, #8]
   140e6:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   140e8:	2300      	movs	r3, #0
   140ea:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   140ec:	2300      	movs	r3, #0
   140ee:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   140f0:	2396      	movs	r3, #150	; 0x96
   140f2:	005b      	lsls	r3, r3, #1
   140f4:	0018      	movs	r0, r3
   140f6:	4b35      	ldr	r3, [pc, #212]	; (141cc <I2cReadDataWait+0xf0>)
   140f8:	4798      	blx	r3
   140fa:	0003      	movs	r3, r0
   140fc:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   140fe:	697b      	ldr	r3, [r7, #20]
   14100:	2b00      	cmp	r3, #0
   14102:	d155      	bne.n	141b0 <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14104:	2310      	movs	r3, #16
   14106:	18fb      	adds	r3, r7, r3
   14108:	0018      	movs	r0, r3
   1410a:	4b31      	ldr	r3, [pc, #196]	; (141d0 <I2cReadDataWait+0xf4>)
   1410c:	4798      	blx	r3
   1410e:	0003      	movs	r3, r0
   14110:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14112:	697b      	ldr	r3, [r7, #20]
   14114:	2b00      	cmp	r3, #0
   14116:	d14d      	bne.n	141b4 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14118:	68fb      	ldr	r3, [r7, #12]
   1411a:	0018      	movs	r0, r3
   1411c:	4b2d      	ldr	r3, [pc, #180]	; (141d4 <I2cReadDataWait+0xf8>)
   1411e:	4798      	blx	r3
   14120:	0003      	movs	r3, r0
   14122:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14124:	697b      	ldr	r3, [r7, #20]
   14126:	2b00      	cmp	r3, #0
   14128:	d147      	bne.n	141ba <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1412a:	693b      	ldr	r3, [r7, #16]
   1412c:	687a      	ldr	r2, [r7, #4]
   1412e:	0011      	movs	r1, r2
   14130:	0018      	movs	r0, r3
   14132:	4b29      	ldr	r3, [pc, #164]	; (141d8 <I2cReadDataWait+0xfc>)
   14134:	4798      	blx	r3
   14136:	0003      	movs	r3, r0
   14138:	2b01      	cmp	r3, #1
   1413a:	d118      	bne.n	1416e <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   1413c:	4b27      	ldr	r3, [pc, #156]	; (141dc <I2cReadDataWait+0x100>)
   1413e:	4798      	blx	r3
   14140:	1e03      	subs	r3, r0, #0
   14142:	d006      	beq.n	14152 <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   14144:	2000      	movs	r0, #0
   14146:	4b26      	ldr	r3, [pc, #152]	; (141e0 <I2cReadDataWait+0x104>)
   14148:	4798      	blx	r3
            error = ERROR_ABORTED;
   1414a:	2303      	movs	r3, #3
   1414c:	425b      	negs	r3, r3
   1414e:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14150:	e034      	b.n	141bc <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   14152:	68bb      	ldr	r3, [r7, #8]
   14154:	0018      	movs	r0, r3
   14156:	4b23      	ldr	r3, [pc, #140]	; (141e4 <I2cReadDataWait+0x108>)
   14158:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   1415a:	68fb      	ldr	r3, [r7, #12]
   1415c:	0018      	movs	r0, r3
   1415e:	4b22      	ldr	r3, [pc, #136]	; (141e8 <I2cReadDataWait+0x10c>)
   14160:	4798      	blx	r3
   14162:	0003      	movs	r3, r0
   14164:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14166:	697b      	ldr	r3, [r7, #20]
   14168:	2b00      	cmp	r3, #0
   1416a:	d004      	beq.n	14176 <I2cReadDataWait+0x9a>
        goto exitError0;
   1416c:	e026      	b.n	141bc <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   1416e:	2303      	movs	r3, #3
   14170:	425b      	negs	r3, r3
   14172:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14174:	e022      	b.n	141bc <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14176:	693b      	ldr	r3, [r7, #16]
   14178:	687a      	ldr	r2, [r7, #4]
   1417a:	0011      	movs	r1, r2
   1417c:	0018      	movs	r0, r3
   1417e:	4b16      	ldr	r3, [pc, #88]	; (141d8 <I2cReadDataWait+0xfc>)
   14180:	4798      	blx	r3
   14182:	0003      	movs	r3, r0
   14184:	2b01      	cmp	r3, #1
   14186:	d10a      	bne.n	1419e <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14188:	4b14      	ldr	r3, [pc, #80]	; (141dc <I2cReadDataWait+0x100>)
   1418a:	4798      	blx	r3
   1418c:	1e03      	subs	r3, r0, #0
   1418e:	d00a      	beq.n	141a6 <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   14190:	2000      	movs	r0, #0
   14192:	4b13      	ldr	r3, [pc, #76]	; (141e0 <I2cReadDataWait+0x104>)
   14194:	4798      	blx	r3
            error = ERROR_ABORTED;
   14196:	2303      	movs	r3, #3
   14198:	425b      	negs	r3, r3
   1419a:	617b      	str	r3, [r7, #20]
            goto exitError0;
   1419c:	e00e      	b.n	141bc <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   1419e:	2303      	movs	r3, #3
   141a0:	425b      	negs	r3, r3
   141a2:	617b      	str	r3, [r7, #20]
        goto exitError0;
   141a4:	e00a      	b.n	141bc <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   141a6:	4b11      	ldr	r3, [pc, #68]	; (141ec <I2cReadDataWait+0x110>)
   141a8:	4798      	blx	r3
   141aa:	0003      	movs	r3, r0
   141ac:	617b      	str	r3, [r7, #20]
   141ae:	e002      	b.n	141b6 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   141b0:	46c0      	nop			; (mov r8, r8)
   141b2:	e000      	b.n	141b6 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   141b4:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   141b6:	697b      	ldr	r3, [r7, #20]
   141b8:	e003      	b.n	141c2 <I2cReadDataWait+0xe6>
        goto exitError0;
   141ba:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   141bc:	4b0b      	ldr	r3, [pc, #44]	; (141ec <I2cReadDataWait+0x110>)
   141be:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   141c0:	697b      	ldr	r3, [r7, #20]
}
   141c2:	0018      	movs	r0, r3
   141c4:	46bd      	mov	sp, r7
   141c6:	b006      	add	sp, #24
   141c8:	bd80      	pop	{r7, pc}
   141ca:	46c0      	nop			; (mov r8, r8)
   141cc:	00013f75 	.word	0x00013f75
   141d0:	00013fad 	.word	0x00013fad
   141d4:	00013e4d 	.word	0x00013e4d
   141d8:	0001b03d 	.word	0x0001b03d
   141dc:	00013fd1 	.word	0x00013fd1
   141e0:	00013fe5 	.word	0x00013fe5
   141e4:	0001bd91 	.word	0x0001bd91
   141e8:	00013ec5 	.word	0x00013ec5
   141ec:	00013f3d 	.word	0x00013f3d

000141f0 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   141f0:	b5b0      	push	{r4, r5, r7, lr}
   141f2:	b086      	sub	sp, #24
   141f4:	af00      	add	r7, sp, #0
   141f6:	60f8      	str	r0, [r7, #12]
   141f8:	0008      	movs	r0, r1
   141fa:	607a      	str	r2, [r7, #4]
   141fc:	0019      	movs	r1, r3
   141fe:	230b      	movs	r3, #11
   14200:	18fb      	adds	r3, r7, r3
   14202:	1c02      	adds	r2, r0, #0
   14204:	701a      	strb	r2, [r3, #0]
   14206:	2308      	movs	r3, #8
   14208:	18fb      	adds	r3, r7, r3
   1420a:	1c0a      	adds	r2, r1, #0
   1420c:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   1420e:	68fb      	ldr	r3, [r7, #12]
   14210:	685c      	ldr	r4, [r3, #4]
   14212:	68fb      	ldr	r3, [r7, #12]
   14214:	6898      	ldr	r0, [r3, #8]
   14216:	2308      	movs	r3, #8
   14218:	18fb      	adds	r3, r7, r3
   1421a:	881d      	ldrh	r5, [r3, #0]
   1421c:	687a      	ldr	r2, [r7, #4]
   1421e:	230b      	movs	r3, #11
   14220:	18fb      	adds	r3, r7, r3
   14222:	7819      	ldrb	r1, [r3, #0]
   14224:	002b      	movs	r3, r5
   14226:	47a0      	blx	r4
   14228:	0003      	movs	r3, r0
   1422a:	617b      	str	r3, [r7, #20]

  return ret;
   1422c:	697b      	ldr	r3, [r7, #20]
}
   1422e:	0018      	movs	r0, r3
   14230:	46bd      	mov	sp, r7
   14232:	b006      	add	sp, #24
   14234:	bdb0      	pop	{r4, r5, r7, pc}

00014236 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   14236:	b5b0      	push	{r4, r5, r7, lr}
   14238:	b086      	sub	sp, #24
   1423a:	af00      	add	r7, sp, #0
   1423c:	60f8      	str	r0, [r7, #12]
   1423e:	0008      	movs	r0, r1
   14240:	607a      	str	r2, [r7, #4]
   14242:	0019      	movs	r1, r3
   14244:	230b      	movs	r3, #11
   14246:	18fb      	adds	r3, r7, r3
   14248:	1c02      	adds	r2, r0, #0
   1424a:	701a      	strb	r2, [r3, #0]
   1424c:	2308      	movs	r3, #8
   1424e:	18fb      	adds	r3, r7, r3
   14250:	1c0a      	adds	r2, r1, #0
   14252:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   14254:	68fb      	ldr	r3, [r7, #12]
   14256:	681c      	ldr	r4, [r3, #0]
   14258:	68fb      	ldr	r3, [r7, #12]
   1425a:	6898      	ldr	r0, [r3, #8]
   1425c:	2308      	movs	r3, #8
   1425e:	18fb      	adds	r3, r7, r3
   14260:	881d      	ldrh	r5, [r3, #0]
   14262:	687a      	ldr	r2, [r7, #4]
   14264:	230b      	movs	r3, #11
   14266:	18fb      	adds	r3, r7, r3
   14268:	7819      	ldrb	r1, [r3, #0]
   1426a:	002b      	movs	r3, r5
   1426c:	47a0      	blx	r4
   1426e:	0003      	movs	r3, r0
   14270:	617b      	str	r3, [r7, #20]

  return ret;
   14272:	697b      	ldr	r3, [r7, #20]
}
   14274:	0018      	movs	r0, r3
   14276:	46bd      	mov	sp, r7
   14278:	b006      	add	sp, #24
   1427a:	bdb0      	pop	{r4, r5, r7, pc}

0001427c <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
   1427c:	b580      	push	{r7, lr}
   1427e:	b082      	sub	sp, #8
   14280:	af00      	add	r7, sp, #0
   14282:	0002      	movs	r2, r0
   14284:	1dbb      	adds	r3, r7, #6
   14286:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
   14288:	1dbb      	adds	r3, r7, #6
   1428a:	2200      	movs	r2, #0
   1428c:	5e9a      	ldrsh	r2, [r3, r2]
   1428e:	4b06      	ldr	r3, [pc, #24]	; (142a8 <lsm6dso_from_fs2_to_mg+0x2c>)
   14290:	0010      	movs	r0, r2
   14292:	4798      	blx	r3
   14294:	1c02      	adds	r2, r0, #0
   14296:	4b05      	ldr	r3, [pc, #20]	; (142ac <lsm6dso_from_fs2_to_mg+0x30>)
   14298:	4905      	ldr	r1, [pc, #20]	; (142b0 <lsm6dso_from_fs2_to_mg+0x34>)
   1429a:	1c10      	adds	r0, r2, #0
   1429c:	4798      	blx	r3
   1429e:	1c03      	adds	r3, r0, #0
}
   142a0:	1c18      	adds	r0, r3, #0
   142a2:	46bd      	mov	sp, r7
   142a4:	b002      	add	sp, #8
   142a6:	bd80      	pop	{r7, pc}
   142a8:	00032c15 	.word	0x00032c15
   142ac:	00032995 	.word	0x00032995
   142b0:	3d79db23 	.word	0x3d79db23

000142b4 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
   142b4:	b590      	push	{r4, r7, lr}
   142b6:	b085      	sub	sp, #20
   142b8:	af00      	add	r7, sp, #0
   142ba:	6078      	str	r0, [r7, #4]
   142bc:	000a      	movs	r2, r1
   142be:	1cfb      	adds	r3, r7, #3
   142c0:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   142c2:	2308      	movs	r3, #8
   142c4:	18fa      	adds	r2, r7, r3
   142c6:	6878      	ldr	r0, [r7, #4]
   142c8:	2301      	movs	r3, #1
   142ca:	2110      	movs	r1, #16
   142cc:	4c12      	ldr	r4, [pc, #72]	; (14318 <lsm6dso_xl_full_scale_set+0x64>)
   142ce:	47a0      	blx	r4
   142d0:	0003      	movs	r3, r0
   142d2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   142d4:	68fb      	ldr	r3, [r7, #12]
   142d6:	2b00      	cmp	r3, #0
   142d8:	d119      	bne.n	1430e <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
   142da:	1cfb      	adds	r3, r7, #3
   142dc:	781b      	ldrb	r3, [r3, #0]
   142de:	2203      	movs	r2, #3
   142e0:	4013      	ands	r3, r2
   142e2:	b2da      	uxtb	r2, r3
   142e4:	2308      	movs	r3, #8
   142e6:	18fb      	adds	r3, r7, r3
   142e8:	2103      	movs	r1, #3
   142ea:	400a      	ands	r2, r1
   142ec:	0090      	lsls	r0, r2, #2
   142ee:	781a      	ldrb	r2, [r3, #0]
   142f0:	210c      	movs	r1, #12
   142f2:	438a      	bics	r2, r1
   142f4:	1c11      	adds	r1, r2, #0
   142f6:	1c02      	adds	r2, r0, #0
   142f8:	430a      	orrs	r2, r1
   142fa:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   142fc:	2308      	movs	r3, #8
   142fe:	18fa      	adds	r2, r7, r3
   14300:	6878      	ldr	r0, [r7, #4]
   14302:	2301      	movs	r3, #1
   14304:	2110      	movs	r1, #16
   14306:	4c05      	ldr	r4, [pc, #20]	; (1431c <lsm6dso_xl_full_scale_set+0x68>)
   14308:	47a0      	blx	r4
   1430a:	0003      	movs	r3, r0
   1430c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1430e:	68fb      	ldr	r3, [r7, #12]
}
   14310:	0018      	movs	r0, r3
   14312:	46bd      	mov	sp, r7
   14314:	b005      	add	sp, #20
   14316:	bd90      	pop	{r4, r7, pc}
   14318:	000141f1 	.word	0x000141f1
   1431c:	00014237 	.word	0x00014237

00014320 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
   14320:	b590      	push	{r4, r7, lr}
   14322:	b087      	sub	sp, #28
   14324:	af00      	add	r7, sp, #0
   14326:	6078      	str	r0, [r7, #4]
   14328:	000a      	movs	r2, r1
   1432a:	1cfb      	adds	r3, r7, #3
   1432c:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
   1432e:	2317      	movs	r3, #23
   14330:	18fb      	adds	r3, r7, r3
   14332:	1cfa      	adds	r2, r7, #3
   14334:	7812      	ldrb	r2, [r2, #0]
   14336:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   14338:	230c      	movs	r3, #12
   1433a:	18fa      	adds	r2, r7, r3
   1433c:	687b      	ldr	r3, [r7, #4]
   1433e:	0011      	movs	r1, r2
   14340:	0018      	movs	r0, r3
   14342:	4ba4      	ldr	r3, [pc, #656]	; (145d4 <lsm6dso_xl_data_rate_set+0x2b4>)
   14344:	4798      	blx	r3
   14346:	0003      	movs	r3, r0
   14348:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   1434a:	693b      	ldr	r3, [r7, #16]
   1434c:	2b00      	cmp	r3, #0
   1434e:	d000      	beq.n	14352 <lsm6dso_xl_data_rate_set+0x32>
   14350:	e113      	b.n	1457a <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14352:	230c      	movs	r3, #12
   14354:	18fb      	adds	r3, r7, r3
   14356:	781b      	ldrb	r3, [r3, #0]
   14358:	07db      	lsls	r3, r3, #31
   1435a:	0fdb      	lsrs	r3, r3, #31
   1435c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1435e:	230c      	movs	r3, #12
   14360:	18fb      	adds	r3, r7, r3
   14362:	781b      	ldrb	r3, [r3, #0]
   14364:	079b      	lsls	r3, r3, #30
   14366:	0fdb      	lsrs	r3, r3, #31
   14368:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1436a:	4313      	orrs	r3, r2
   1436c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   1436e:	230c      	movs	r3, #12
   14370:	18fb      	adds	r3, r7, r3
   14372:	781b      	ldrb	r3, [r3, #0]
   14374:	075b      	lsls	r3, r3, #29
   14376:	0fdb      	lsrs	r3, r3, #31
   14378:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1437a:	4313      	orrs	r3, r2
   1437c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   1437e:	230c      	movs	r3, #12
   14380:	18fb      	adds	r3, r7, r3
   14382:	781b      	ldrb	r3, [r3, #0]
   14384:	071b      	lsls	r3, r3, #28
   14386:	0fdb      	lsrs	r3, r3, #31
   14388:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   1438a:	4313      	orrs	r3, r2
   1438c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   1438e:	230c      	movs	r3, #12
   14390:	18fb      	adds	r3, r7, r3
   14392:	781b      	ldrb	r3, [r3, #0]
   14394:	06db      	lsls	r3, r3, #27
   14396:	0fdb      	lsrs	r3, r3, #31
   14398:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   1439a:	4313      	orrs	r3, r2
   1439c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   1439e:	230c      	movs	r3, #12
   143a0:	18fb      	adds	r3, r7, r3
   143a2:	781b      	ldrb	r3, [r3, #0]
   143a4:	069b      	lsls	r3, r3, #26
   143a6:	0fdb      	lsrs	r3, r3, #31
   143a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   143aa:	4313      	orrs	r3, r2
   143ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   143ae:	230c      	movs	r3, #12
   143b0:	18fb      	adds	r3, r7, r3
   143b2:	781b      	ldrb	r3, [r3, #0]
   143b4:	065b      	lsls	r3, r3, #25
   143b6:	0fdb      	lsrs	r3, r3, #31
   143b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   143ba:	4313      	orrs	r3, r2
   143bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   143be:	230c      	movs	r3, #12
   143c0:	18fb      	adds	r3, r7, r3
   143c2:	781b      	ldrb	r3, [r3, #0]
   143c4:	061b      	lsls	r3, r3, #24
   143c6:	0fdb      	lsrs	r3, r3, #31
   143c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   143ca:	4313      	orrs	r3, r2
   143cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   143ce:	230c      	movs	r3, #12
   143d0:	18fb      	adds	r3, r7, r3
   143d2:	785b      	ldrb	r3, [r3, #1]
   143d4:	07db      	lsls	r3, r3, #31
   143d6:	0fdb      	lsrs	r3, r3, #31
   143d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   143da:	4313      	orrs	r3, r2
   143dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   143de:	230c      	movs	r3, #12
   143e0:	18fb      	adds	r3, r7, r3
   143e2:	785b      	ldrb	r3, [r3, #1]
   143e4:	079b      	lsls	r3, r3, #30
   143e6:	0fdb      	lsrs	r3, r3, #31
   143e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   143ea:	4313      	orrs	r3, r2
   143ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   143ee:	230c      	movs	r3, #12
   143f0:	18fb      	adds	r3, r7, r3
   143f2:	785b      	ldrb	r3, [r3, #1]
   143f4:	075b      	lsls	r3, r3, #29
   143f6:	0fdb      	lsrs	r3, r3, #31
   143f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   143fa:	4313      	orrs	r3, r2
   143fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   143fe:	230c      	movs	r3, #12
   14400:	18fb      	adds	r3, r7, r3
   14402:	785b      	ldrb	r3, [r3, #1]
   14404:	071b      	lsls	r3, r3, #28
   14406:	0fdb      	lsrs	r3, r3, #31
   14408:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   1440a:	4313      	orrs	r3, r2
   1440c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   1440e:	230c      	movs	r3, #12
   14410:	18fb      	adds	r3, r7, r3
   14412:	785b      	ldrb	r3, [r3, #1]
   14414:	06db      	lsls	r3, r3, #27
   14416:	0fdb      	lsrs	r3, r3, #31
   14418:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   1441a:	4313      	orrs	r3, r2
   1441c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   1441e:	230c      	movs	r3, #12
   14420:	18fb      	adds	r3, r7, r3
   14422:	785b      	ldrb	r3, [r3, #1]
   14424:	069b      	lsls	r3, r3, #26
   14426:	0fdb      	lsrs	r3, r3, #31
   14428:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   1442a:	4313      	orrs	r3, r2
   1442c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   1442e:	230c      	movs	r3, #12
   14430:	18fb      	adds	r3, r7, r3
   14432:	785b      	ldrb	r3, [r3, #1]
   14434:	065b      	lsls	r3, r3, #25
   14436:	0fdb      	lsrs	r3, r3, #31
   14438:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   1443a:	4313      	orrs	r3, r2
   1443c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   1443e:	230c      	movs	r3, #12
   14440:	18fb      	adds	r3, r7, r3
   14442:	785b      	ldrb	r3, [r3, #1]
   14444:	061b      	lsls	r3, r3, #24
   14446:	0fdb      	lsrs	r3, r3, #31
   14448:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   1444a:	4313      	orrs	r3, r2
   1444c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1444e:	2b01      	cmp	r3, #1
   14450:	d000      	beq.n	14454 <lsm6dso_xl_data_rate_set+0x134>
   14452:	e092      	b.n	1457a <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   14454:	230b      	movs	r3, #11
   14456:	18fa      	adds	r2, r7, r3
   14458:	687b      	ldr	r3, [r7, #4]
   1445a:	0011      	movs	r1, r2
   1445c:	0018      	movs	r0, r3
   1445e:	4b5e      	ldr	r3, [pc, #376]	; (145d8 <lsm6dso_xl_data_rate_set+0x2b8>)
   14460:	4798      	blx	r3
   14462:	0003      	movs	r3, r0
   14464:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   14466:	693b      	ldr	r3, [r7, #16]
   14468:	2b00      	cmp	r3, #0
   1446a:	d000      	beq.n	1446e <lsm6dso_xl_data_rate_set+0x14e>
   1446c:	e085      	b.n	1457a <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   1446e:	230b      	movs	r3, #11
   14470:	18fb      	adds	r3, r7, r3
   14472:	781b      	ldrb	r3, [r3, #0]
   14474:	2b01      	cmp	r3, #1
   14476:	d017      	beq.n	144a8 <lsm6dso_xl_data_rate_set+0x188>
   14478:	dc02      	bgt.n	14480 <lsm6dso_xl_data_rate_set+0x160>
   1447a:	2b00      	cmp	r3, #0
   1447c:	d005      	beq.n	1448a <lsm6dso_xl_data_rate_set+0x16a>
   1447e:	e076      	b.n	1456e <lsm6dso_xl_data_rate_set+0x24e>
   14480:	2b02      	cmp	r3, #2
   14482:	d029      	beq.n	144d8 <lsm6dso_xl_data_rate_set+0x1b8>
   14484:	2b03      	cmp	r3, #3
   14486:	d048      	beq.n	1451a <lsm6dso_xl_data_rate_set+0x1fa>
   14488:	e071      	b.n	1456e <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
   1448a:	1cfb      	adds	r3, r7, #3
   1448c:	781b      	ldrb	r3, [r3, #0]
   1448e:	2b00      	cmp	r3, #0
   14490:	d104      	bne.n	1449c <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
   14492:	2317      	movs	r3, #23
   14494:	18fb      	adds	r3, r7, r3
   14496:	2201      	movs	r2, #1
   14498:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   1449a:	e06e      	b.n	1457a <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   1449c:	2317      	movs	r3, #23
   1449e:	18fb      	adds	r3, r7, r3
   144a0:	1cfa      	adds	r2, r7, #3
   144a2:	7812      	ldrb	r2, [r2, #0]
   144a4:	701a      	strb	r2, [r3, #0]
            break;
   144a6:	e068      	b.n	1457a <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   144a8:	1cfb      	adds	r3, r7, #3
   144aa:	781b      	ldrb	r3, [r3, #0]
   144ac:	2b00      	cmp	r3, #0
   144ae:	d104      	bne.n	144ba <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   144b0:	2317      	movs	r3, #23
   144b2:	18fb      	adds	r3, r7, r3
   144b4:	2202      	movs	r2, #2
   144b6:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   144b8:	e05f      	b.n	1457a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   144ba:	1cfb      	adds	r3, r7, #3
   144bc:	781b      	ldrb	r3, [r3, #0]
   144be:	2b01      	cmp	r3, #1
   144c0:	d104      	bne.n	144cc <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   144c2:	2317      	movs	r3, #23
   144c4:	18fb      	adds	r3, r7, r3
   144c6:	2202      	movs	r2, #2
   144c8:	701a      	strb	r2, [r3, #0]
            break;
   144ca:	e056      	b.n	1457a <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   144cc:	2317      	movs	r3, #23
   144ce:	18fb      	adds	r3, r7, r3
   144d0:	1cfa      	adds	r2, r7, #3
   144d2:	7812      	ldrb	r2, [r2, #0]
   144d4:	701a      	strb	r2, [r3, #0]
            break;
   144d6:	e050      	b.n	1457a <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   144d8:	1cfb      	adds	r3, r7, #3
   144da:	781b      	ldrb	r3, [r3, #0]
   144dc:	2b00      	cmp	r3, #0
   144de:	d104      	bne.n	144ea <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   144e0:	2317      	movs	r3, #23
   144e2:	18fb      	adds	r3, r7, r3
   144e4:	2203      	movs	r2, #3
   144e6:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   144e8:	e047      	b.n	1457a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   144ea:	1cfb      	adds	r3, r7, #3
   144ec:	781b      	ldrb	r3, [r3, #0]
   144ee:	2b01      	cmp	r3, #1
   144f0:	d104      	bne.n	144fc <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   144f2:	2317      	movs	r3, #23
   144f4:	18fb      	adds	r3, r7, r3
   144f6:	2203      	movs	r2, #3
   144f8:	701a      	strb	r2, [r3, #0]
            break;
   144fa:	e03e      	b.n	1457a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   144fc:	1cfb      	adds	r3, r7, #3
   144fe:	781b      	ldrb	r3, [r3, #0]
   14500:	2b02      	cmp	r3, #2
   14502:	d104      	bne.n	1450e <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14504:	2317      	movs	r3, #23
   14506:	18fb      	adds	r3, r7, r3
   14508:	2203      	movs	r2, #3
   1450a:	701a      	strb	r2, [r3, #0]
            break;
   1450c:	e035      	b.n	1457a <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   1450e:	2317      	movs	r3, #23
   14510:	18fb      	adds	r3, r7, r3
   14512:	1cfa      	adds	r2, r7, #3
   14514:	7812      	ldrb	r2, [r2, #0]
   14516:	701a      	strb	r2, [r3, #0]
            break;
   14518:	e02f      	b.n	1457a <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   1451a:	1cfb      	adds	r3, r7, #3
   1451c:	781b      	ldrb	r3, [r3, #0]
   1451e:	2b00      	cmp	r3, #0
   14520:	d104      	bne.n	1452c <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14522:	2317      	movs	r3, #23
   14524:	18fb      	adds	r3, r7, r3
   14526:	2204      	movs	r2, #4
   14528:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   1452a:	e026      	b.n	1457a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   1452c:	1cfb      	adds	r3, r7, #3
   1452e:	781b      	ldrb	r3, [r3, #0]
   14530:	2b01      	cmp	r3, #1
   14532:	d104      	bne.n	1453e <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14534:	2317      	movs	r3, #23
   14536:	18fb      	adds	r3, r7, r3
   14538:	2204      	movs	r2, #4
   1453a:	701a      	strb	r2, [r3, #0]
            break;
   1453c:	e01d      	b.n	1457a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   1453e:	1cfb      	adds	r3, r7, #3
   14540:	781b      	ldrb	r3, [r3, #0]
   14542:	2b02      	cmp	r3, #2
   14544:	d104      	bne.n	14550 <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14546:	2317      	movs	r3, #23
   14548:	18fb      	adds	r3, r7, r3
   1454a:	2204      	movs	r2, #4
   1454c:	701a      	strb	r2, [r3, #0]
            break;
   1454e:	e014      	b.n	1457a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
   14550:	1cfb      	adds	r3, r7, #3
   14552:	781b      	ldrb	r3, [r3, #0]
   14554:	2b03      	cmp	r3, #3
   14556:	d104      	bne.n	14562 <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14558:	2317      	movs	r3, #23
   1455a:	18fb      	adds	r3, r7, r3
   1455c:	2204      	movs	r2, #4
   1455e:	701a      	strb	r2, [r3, #0]
            break;
   14560:	e00b      	b.n	1457a <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14562:	2317      	movs	r3, #23
   14564:	18fb      	adds	r3, r7, r3
   14566:	1cfa      	adds	r2, r7, #3
   14568:	7812      	ldrb	r2, [r2, #0]
   1456a:	701a      	strb	r2, [r3, #0]
            break;
   1456c:	e005      	b.n	1457a <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
   1456e:	2317      	movs	r3, #23
   14570:	18fb      	adds	r3, r7, r3
   14572:	1cfa      	adds	r2, r7, #3
   14574:	7812      	ldrb	r2, [r2, #0]
   14576:	701a      	strb	r2, [r3, #0]
            break;
   14578:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   1457a:	693b      	ldr	r3, [r7, #16]
   1457c:	2b00      	cmp	r3, #0
   1457e:	d108      	bne.n	14592 <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14580:	2308      	movs	r3, #8
   14582:	18fa      	adds	r2, r7, r3
   14584:	6878      	ldr	r0, [r7, #4]
   14586:	2301      	movs	r3, #1
   14588:	2110      	movs	r1, #16
   1458a:	4c14      	ldr	r4, [pc, #80]	; (145dc <lsm6dso_xl_data_rate_set+0x2bc>)
   1458c:	47a0      	blx	r4
   1458e:	0003      	movs	r3, r0
   14590:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   14592:	693b      	ldr	r3, [r7, #16]
   14594:	2b00      	cmp	r3, #0
   14596:	d118      	bne.n	145ca <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
   14598:	2317      	movs	r3, #23
   1459a:	18fb      	adds	r3, r7, r3
   1459c:	781b      	ldrb	r3, [r3, #0]
   1459e:	220f      	movs	r2, #15
   145a0:	4013      	ands	r3, r2
   145a2:	b2da      	uxtb	r2, r3
   145a4:	2308      	movs	r3, #8
   145a6:	18fb      	adds	r3, r7, r3
   145a8:	0110      	lsls	r0, r2, #4
   145aa:	781a      	ldrb	r2, [r3, #0]
   145ac:	210f      	movs	r1, #15
   145ae:	400a      	ands	r2, r1
   145b0:	1c11      	adds	r1, r2, #0
   145b2:	1c02      	adds	r2, r0, #0
   145b4:	430a      	orrs	r2, r1
   145b6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   145b8:	2308      	movs	r3, #8
   145ba:	18fa      	adds	r2, r7, r3
   145bc:	6878      	ldr	r0, [r7, #4]
   145be:	2301      	movs	r3, #1
   145c0:	2110      	movs	r1, #16
   145c2:	4c07      	ldr	r4, [pc, #28]	; (145e0 <lsm6dso_xl_data_rate_set+0x2c0>)
   145c4:	47a0      	blx	r4
   145c6:	0003      	movs	r3, r0
   145c8:	613b      	str	r3, [r7, #16]
  }

  return ret;
   145ca:	693b      	ldr	r3, [r7, #16]
}
   145cc:	0018      	movs	r0, r3
   145ce:	46bd      	mov	sp, r7
   145d0:	b007      	add	sp, #28
   145d2:	bd90      	pop	{r4, r7, pc}
   145d4:	00014dfd 	.word	0x00014dfd
   145d8:	00014e51 	.word	0x00014e51
   145dc:	000141f1 	.word	0x000141f1
   145e0:	00014237 	.word	0x00014237

000145e4 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
   145e4:	b590      	push	{r4, r7, lr}
   145e6:	b085      	sub	sp, #20
   145e8:	af00      	add	r7, sp, #0
   145ea:	6078      	str	r0, [r7, #4]
   145ec:	000a      	movs	r2, r1
   145ee:	1cfb      	adds	r3, r7, #3
   145f0:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   145f2:	2308      	movs	r3, #8
   145f4:	18fa      	adds	r2, r7, r3
   145f6:	6878      	ldr	r0, [r7, #4]
   145f8:	2301      	movs	r3, #1
   145fa:	2111      	movs	r1, #17
   145fc:	4c12      	ldr	r4, [pc, #72]	; (14648 <lsm6dso_gy_full_scale_set+0x64>)
   145fe:	47a0      	blx	r4
   14600:	0003      	movs	r3, r0
   14602:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14604:	68fb      	ldr	r3, [r7, #12]
   14606:	2b00      	cmp	r3, #0
   14608:	d119      	bne.n	1463e <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
   1460a:	1cfb      	adds	r3, r7, #3
   1460c:	781b      	ldrb	r3, [r3, #0]
   1460e:	2207      	movs	r2, #7
   14610:	4013      	ands	r3, r2
   14612:	b2da      	uxtb	r2, r3
   14614:	2308      	movs	r3, #8
   14616:	18fb      	adds	r3, r7, r3
   14618:	2107      	movs	r1, #7
   1461a:	400a      	ands	r2, r1
   1461c:	1890      	adds	r0, r2, r2
   1461e:	781a      	ldrb	r2, [r3, #0]
   14620:	210e      	movs	r1, #14
   14622:	438a      	bics	r2, r1
   14624:	1c11      	adds	r1, r2, #0
   14626:	1c02      	adds	r2, r0, #0
   14628:	430a      	orrs	r2, r1
   1462a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   1462c:	2308      	movs	r3, #8
   1462e:	18fa      	adds	r2, r7, r3
   14630:	6878      	ldr	r0, [r7, #4]
   14632:	2301      	movs	r3, #1
   14634:	2111      	movs	r1, #17
   14636:	4c05      	ldr	r4, [pc, #20]	; (1464c <lsm6dso_gy_full_scale_set+0x68>)
   14638:	47a0      	blx	r4
   1463a:	0003      	movs	r3, r0
   1463c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1463e:	68fb      	ldr	r3, [r7, #12]
}
   14640:	0018      	movs	r0, r3
   14642:	46bd      	mov	sp, r7
   14644:	b005      	add	sp, #20
   14646:	bd90      	pop	{r4, r7, pc}
   14648:	000141f1 	.word	0x000141f1
   1464c:	00014237 	.word	0x00014237

00014650 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
   14650:	b590      	push	{r4, r7, lr}
   14652:	b087      	sub	sp, #28
   14654:	af00      	add	r7, sp, #0
   14656:	6078      	str	r0, [r7, #4]
   14658:	000a      	movs	r2, r1
   1465a:	1cfb      	adds	r3, r7, #3
   1465c:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
   1465e:	2317      	movs	r3, #23
   14660:	18fb      	adds	r3, r7, r3
   14662:	1cfa      	adds	r2, r7, #3
   14664:	7812      	ldrb	r2, [r2, #0]
   14666:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   14668:	230c      	movs	r3, #12
   1466a:	18fa      	adds	r2, r7, r3
   1466c:	687b      	ldr	r3, [r7, #4]
   1466e:	0011      	movs	r1, r2
   14670:	0018      	movs	r0, r3
   14672:	4ba4      	ldr	r3, [pc, #656]	; (14904 <lsm6dso_gy_data_rate_set+0x2b4>)
   14674:	4798      	blx	r3
   14676:	0003      	movs	r3, r0
   14678:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   1467a:	693b      	ldr	r3, [r7, #16]
   1467c:	2b00      	cmp	r3, #0
   1467e:	d000      	beq.n	14682 <lsm6dso_gy_data_rate_set+0x32>
   14680:	e113      	b.n	148aa <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14682:	230c      	movs	r3, #12
   14684:	18fb      	adds	r3, r7, r3
   14686:	781b      	ldrb	r3, [r3, #0]
   14688:	07db      	lsls	r3, r3, #31
   1468a:	0fdb      	lsrs	r3, r3, #31
   1468c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1468e:	230c      	movs	r3, #12
   14690:	18fb      	adds	r3, r7, r3
   14692:	781b      	ldrb	r3, [r3, #0]
   14694:	079b      	lsls	r3, r3, #30
   14696:	0fdb      	lsrs	r3, r3, #31
   14698:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1469a:	4313      	orrs	r3, r2
   1469c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   1469e:	230c      	movs	r3, #12
   146a0:	18fb      	adds	r3, r7, r3
   146a2:	781b      	ldrb	r3, [r3, #0]
   146a4:	075b      	lsls	r3, r3, #29
   146a6:	0fdb      	lsrs	r3, r3, #31
   146a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   146aa:	4313      	orrs	r3, r2
   146ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   146ae:	230c      	movs	r3, #12
   146b0:	18fb      	adds	r3, r7, r3
   146b2:	781b      	ldrb	r3, [r3, #0]
   146b4:	071b      	lsls	r3, r3, #28
   146b6:	0fdb      	lsrs	r3, r3, #31
   146b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   146ba:	4313      	orrs	r3, r2
   146bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   146be:	230c      	movs	r3, #12
   146c0:	18fb      	adds	r3, r7, r3
   146c2:	781b      	ldrb	r3, [r3, #0]
   146c4:	06db      	lsls	r3, r3, #27
   146c6:	0fdb      	lsrs	r3, r3, #31
   146c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   146ca:	4313      	orrs	r3, r2
   146cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   146ce:	230c      	movs	r3, #12
   146d0:	18fb      	adds	r3, r7, r3
   146d2:	781b      	ldrb	r3, [r3, #0]
   146d4:	069b      	lsls	r3, r3, #26
   146d6:	0fdb      	lsrs	r3, r3, #31
   146d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   146da:	4313      	orrs	r3, r2
   146dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   146de:	230c      	movs	r3, #12
   146e0:	18fb      	adds	r3, r7, r3
   146e2:	781b      	ldrb	r3, [r3, #0]
   146e4:	065b      	lsls	r3, r3, #25
   146e6:	0fdb      	lsrs	r3, r3, #31
   146e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   146ea:	4313      	orrs	r3, r2
   146ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   146ee:	230c      	movs	r3, #12
   146f0:	18fb      	adds	r3, r7, r3
   146f2:	781b      	ldrb	r3, [r3, #0]
   146f4:	061b      	lsls	r3, r3, #24
   146f6:	0fdb      	lsrs	r3, r3, #31
   146f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   146fa:	4313      	orrs	r3, r2
   146fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   146fe:	230c      	movs	r3, #12
   14700:	18fb      	adds	r3, r7, r3
   14702:	785b      	ldrb	r3, [r3, #1]
   14704:	07db      	lsls	r3, r3, #31
   14706:	0fdb      	lsrs	r3, r3, #31
   14708:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   1470a:	4313      	orrs	r3, r2
   1470c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   1470e:	230c      	movs	r3, #12
   14710:	18fb      	adds	r3, r7, r3
   14712:	785b      	ldrb	r3, [r3, #1]
   14714:	079b      	lsls	r3, r3, #30
   14716:	0fdb      	lsrs	r3, r3, #31
   14718:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   1471a:	4313      	orrs	r3, r2
   1471c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   1471e:	230c      	movs	r3, #12
   14720:	18fb      	adds	r3, r7, r3
   14722:	785b      	ldrb	r3, [r3, #1]
   14724:	075b      	lsls	r3, r3, #29
   14726:	0fdb      	lsrs	r3, r3, #31
   14728:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   1472a:	4313      	orrs	r3, r2
   1472c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   1472e:	230c      	movs	r3, #12
   14730:	18fb      	adds	r3, r7, r3
   14732:	785b      	ldrb	r3, [r3, #1]
   14734:	071b      	lsls	r3, r3, #28
   14736:	0fdb      	lsrs	r3, r3, #31
   14738:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   1473a:	4313      	orrs	r3, r2
   1473c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   1473e:	230c      	movs	r3, #12
   14740:	18fb      	adds	r3, r7, r3
   14742:	785b      	ldrb	r3, [r3, #1]
   14744:	06db      	lsls	r3, r3, #27
   14746:	0fdb      	lsrs	r3, r3, #31
   14748:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   1474a:	4313      	orrs	r3, r2
   1474c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   1474e:	230c      	movs	r3, #12
   14750:	18fb      	adds	r3, r7, r3
   14752:	785b      	ldrb	r3, [r3, #1]
   14754:	069b      	lsls	r3, r3, #26
   14756:	0fdb      	lsrs	r3, r3, #31
   14758:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   1475a:	4313      	orrs	r3, r2
   1475c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   1475e:	230c      	movs	r3, #12
   14760:	18fb      	adds	r3, r7, r3
   14762:	785b      	ldrb	r3, [r3, #1]
   14764:	065b      	lsls	r3, r3, #25
   14766:	0fdb      	lsrs	r3, r3, #31
   14768:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   1476a:	4313      	orrs	r3, r2
   1476c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   1476e:	230c      	movs	r3, #12
   14770:	18fb      	adds	r3, r7, r3
   14772:	785b      	ldrb	r3, [r3, #1]
   14774:	061b      	lsls	r3, r3, #24
   14776:	0fdb      	lsrs	r3, r3, #31
   14778:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   1477a:	4313      	orrs	r3, r2
   1477c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1477e:	2b01      	cmp	r3, #1
   14780:	d000      	beq.n	14784 <lsm6dso_gy_data_rate_set+0x134>
   14782:	e092      	b.n	148aa <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   14784:	230b      	movs	r3, #11
   14786:	18fa      	adds	r2, r7, r3
   14788:	687b      	ldr	r3, [r7, #4]
   1478a:	0011      	movs	r1, r2
   1478c:	0018      	movs	r0, r3
   1478e:	4b5e      	ldr	r3, [pc, #376]	; (14908 <lsm6dso_gy_data_rate_set+0x2b8>)
   14790:	4798      	blx	r3
   14792:	0003      	movs	r3, r0
   14794:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   14796:	693b      	ldr	r3, [r7, #16]
   14798:	2b00      	cmp	r3, #0
   1479a:	d000      	beq.n	1479e <lsm6dso_gy_data_rate_set+0x14e>
   1479c:	e085      	b.n	148aa <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   1479e:	230b      	movs	r3, #11
   147a0:	18fb      	adds	r3, r7, r3
   147a2:	781b      	ldrb	r3, [r3, #0]
   147a4:	2b01      	cmp	r3, #1
   147a6:	d017      	beq.n	147d8 <lsm6dso_gy_data_rate_set+0x188>
   147a8:	dc02      	bgt.n	147b0 <lsm6dso_gy_data_rate_set+0x160>
   147aa:	2b00      	cmp	r3, #0
   147ac:	d005      	beq.n	147ba <lsm6dso_gy_data_rate_set+0x16a>
   147ae:	e076      	b.n	1489e <lsm6dso_gy_data_rate_set+0x24e>
   147b0:	2b02      	cmp	r3, #2
   147b2:	d029      	beq.n	14808 <lsm6dso_gy_data_rate_set+0x1b8>
   147b4:	2b03      	cmp	r3, #3
   147b6:	d048      	beq.n	1484a <lsm6dso_gy_data_rate_set+0x1fa>
   147b8:	e071      	b.n	1489e <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
   147ba:	1cfb      	adds	r3, r7, #3
   147bc:	781b      	ldrb	r3, [r3, #0]
   147be:	2b00      	cmp	r3, #0
   147c0:	d104      	bne.n	147cc <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
   147c2:	2317      	movs	r3, #23
   147c4:	18fb      	adds	r3, r7, r3
   147c6:	2201      	movs	r2, #1
   147c8:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   147ca:	e06e      	b.n	148aa <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   147cc:	2317      	movs	r3, #23
   147ce:	18fb      	adds	r3, r7, r3
   147d0:	1cfa      	adds	r2, r7, #3
   147d2:	7812      	ldrb	r2, [r2, #0]
   147d4:	701a      	strb	r2, [r3, #0]
            break;
   147d6:	e068      	b.n	148aa <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   147d8:	1cfb      	adds	r3, r7, #3
   147da:	781b      	ldrb	r3, [r3, #0]
   147dc:	2b00      	cmp	r3, #0
   147de:	d104      	bne.n	147ea <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   147e0:	2317      	movs	r3, #23
   147e2:	18fb      	adds	r3, r7, r3
   147e4:	2202      	movs	r2, #2
   147e6:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   147e8:	e05f      	b.n	148aa <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   147ea:	1cfb      	adds	r3, r7, #3
   147ec:	781b      	ldrb	r3, [r3, #0]
   147ee:	2b01      	cmp	r3, #1
   147f0:	d104      	bne.n	147fc <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   147f2:	2317      	movs	r3, #23
   147f4:	18fb      	adds	r3, r7, r3
   147f6:	2202      	movs	r2, #2
   147f8:	701a      	strb	r2, [r3, #0]
            break;
   147fa:	e056      	b.n	148aa <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   147fc:	2317      	movs	r3, #23
   147fe:	18fb      	adds	r3, r7, r3
   14800:	1cfa      	adds	r2, r7, #3
   14802:	7812      	ldrb	r2, [r2, #0]
   14804:	701a      	strb	r2, [r3, #0]
            break;
   14806:	e050      	b.n	148aa <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   14808:	1cfb      	adds	r3, r7, #3
   1480a:	781b      	ldrb	r3, [r3, #0]
   1480c:	2b00      	cmp	r3, #0
   1480e:	d104      	bne.n	1481a <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   14810:	2317      	movs	r3, #23
   14812:	18fb      	adds	r3, r7, r3
   14814:	2203      	movs	r2, #3
   14816:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   14818:	e047      	b.n	148aa <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   1481a:	1cfb      	adds	r3, r7, #3
   1481c:	781b      	ldrb	r3, [r3, #0]
   1481e:	2b01      	cmp	r3, #1
   14820:	d104      	bne.n	1482c <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   14822:	2317      	movs	r3, #23
   14824:	18fb      	adds	r3, r7, r3
   14826:	2203      	movs	r2, #3
   14828:	701a      	strb	r2, [r3, #0]
            break;
   1482a:	e03e      	b.n	148aa <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   1482c:	1cfb      	adds	r3, r7, #3
   1482e:	781b      	ldrb	r3, [r3, #0]
   14830:	2b02      	cmp	r3, #2
   14832:	d104      	bne.n	1483e <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   14834:	2317      	movs	r3, #23
   14836:	18fb      	adds	r3, r7, r3
   14838:	2203      	movs	r2, #3
   1483a:	701a      	strb	r2, [r3, #0]
            break;
   1483c:	e035      	b.n	148aa <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   1483e:	2317      	movs	r3, #23
   14840:	18fb      	adds	r3, r7, r3
   14842:	1cfa      	adds	r2, r7, #3
   14844:	7812      	ldrb	r2, [r2, #0]
   14846:	701a      	strb	r2, [r3, #0]
            break;
   14848:	e02f      	b.n	148aa <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   1484a:	1cfb      	adds	r3, r7, #3
   1484c:	781b      	ldrb	r3, [r3, #0]
   1484e:	2b00      	cmp	r3, #0
   14850:	d104      	bne.n	1485c <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   14852:	2317      	movs	r3, #23
   14854:	18fb      	adds	r3, r7, r3
   14856:	2204      	movs	r2, #4
   14858:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   1485a:	e026      	b.n	148aa <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   1485c:	1cfb      	adds	r3, r7, #3
   1485e:	781b      	ldrb	r3, [r3, #0]
   14860:	2b01      	cmp	r3, #1
   14862:	d104      	bne.n	1486e <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   14864:	2317      	movs	r3, #23
   14866:	18fb      	adds	r3, r7, r3
   14868:	2204      	movs	r2, #4
   1486a:	701a      	strb	r2, [r3, #0]
            break;
   1486c:	e01d      	b.n	148aa <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   1486e:	1cfb      	adds	r3, r7, #3
   14870:	781b      	ldrb	r3, [r3, #0]
   14872:	2b02      	cmp	r3, #2
   14874:	d104      	bne.n	14880 <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   14876:	2317      	movs	r3, #23
   14878:	18fb      	adds	r3, r7, r3
   1487a:	2204      	movs	r2, #4
   1487c:	701a      	strb	r2, [r3, #0]
            break;
   1487e:	e014      	b.n	148aa <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
   14880:	1cfb      	adds	r3, r7, #3
   14882:	781b      	ldrb	r3, [r3, #0]
   14884:	2b03      	cmp	r3, #3
   14886:	d104      	bne.n	14892 <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   14888:	2317      	movs	r3, #23
   1488a:	18fb      	adds	r3, r7, r3
   1488c:	2204      	movs	r2, #4
   1488e:	701a      	strb	r2, [r3, #0]
            break;
   14890:	e00b      	b.n	148aa <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   14892:	2317      	movs	r3, #23
   14894:	18fb      	adds	r3, r7, r3
   14896:	1cfa      	adds	r2, r7, #3
   14898:	7812      	ldrb	r2, [r2, #0]
   1489a:	701a      	strb	r2, [r3, #0]
            break;
   1489c:	e005      	b.n	148aa <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
   1489e:	2317      	movs	r3, #23
   148a0:	18fb      	adds	r3, r7, r3
   148a2:	1cfa      	adds	r2, r7, #3
   148a4:	7812      	ldrb	r2, [r2, #0]
   148a6:	701a      	strb	r2, [r3, #0]
            break;
   148a8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   148aa:	693b      	ldr	r3, [r7, #16]
   148ac:	2b00      	cmp	r3, #0
   148ae:	d108      	bne.n	148c2 <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   148b0:	2308      	movs	r3, #8
   148b2:	18fa      	adds	r2, r7, r3
   148b4:	6878      	ldr	r0, [r7, #4]
   148b6:	2301      	movs	r3, #1
   148b8:	2111      	movs	r1, #17
   148ba:	4c14      	ldr	r4, [pc, #80]	; (1490c <lsm6dso_gy_data_rate_set+0x2bc>)
   148bc:	47a0      	blx	r4
   148be:	0003      	movs	r3, r0
   148c0:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   148c2:	693b      	ldr	r3, [r7, #16]
   148c4:	2b00      	cmp	r3, #0
   148c6:	d118      	bne.n	148fa <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
   148c8:	2317      	movs	r3, #23
   148ca:	18fb      	adds	r3, r7, r3
   148cc:	781b      	ldrb	r3, [r3, #0]
   148ce:	220f      	movs	r2, #15
   148d0:	4013      	ands	r3, r2
   148d2:	b2da      	uxtb	r2, r3
   148d4:	2308      	movs	r3, #8
   148d6:	18fb      	adds	r3, r7, r3
   148d8:	0110      	lsls	r0, r2, #4
   148da:	781a      	ldrb	r2, [r3, #0]
   148dc:	210f      	movs	r1, #15
   148de:	400a      	ands	r2, r1
   148e0:	1c11      	adds	r1, r2, #0
   148e2:	1c02      	adds	r2, r0, #0
   148e4:	430a      	orrs	r2, r1
   148e6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   148e8:	2308      	movs	r3, #8
   148ea:	18fa      	adds	r2, r7, r3
   148ec:	6878      	ldr	r0, [r7, #4]
   148ee:	2301      	movs	r3, #1
   148f0:	2111      	movs	r1, #17
   148f2:	4c07      	ldr	r4, [pc, #28]	; (14910 <lsm6dso_gy_data_rate_set+0x2c0>)
   148f4:	47a0      	blx	r4
   148f6:	0003      	movs	r3, r0
   148f8:	613b      	str	r3, [r7, #16]
  }

  return ret;
   148fa:	693b      	ldr	r3, [r7, #16]
}
   148fc:	0018      	movs	r0, r3
   148fe:	46bd      	mov	sp, r7
   14900:	b007      	add	sp, #28
   14902:	bd90      	pop	{r4, r7, pc}
   14904:	00014dfd 	.word	0x00014dfd
   14908:	00014e51 	.word	0x00014e51
   1490c:	000141f1 	.word	0x000141f1
   14910:	00014237 	.word	0x00014237

00014914 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   14914:	b590      	push	{r4, r7, lr}
   14916:	b085      	sub	sp, #20
   14918:	af00      	add	r7, sp, #0
   1491a:	6078      	str	r0, [r7, #4]
   1491c:	000a      	movs	r2, r1
   1491e:	1cfb      	adds	r3, r7, #3
   14920:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   14922:	2308      	movs	r3, #8
   14924:	18fa      	adds	r2, r7, r3
   14926:	6878      	ldr	r0, [r7, #4]
   14928:	2301      	movs	r3, #1
   1492a:	2112      	movs	r1, #18
   1492c:	4c12      	ldr	r4, [pc, #72]	; (14978 <lsm6dso_block_data_update_set+0x64>)
   1492e:	47a0      	blx	r4
   14930:	0003      	movs	r3, r0
   14932:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14934:	68fb      	ldr	r3, [r7, #12]
   14936:	2b00      	cmp	r3, #0
   14938:	d119      	bne.n	1496e <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
   1493a:	1cfb      	adds	r3, r7, #3
   1493c:	781b      	ldrb	r3, [r3, #0]
   1493e:	2201      	movs	r2, #1
   14940:	4013      	ands	r3, r2
   14942:	b2da      	uxtb	r2, r3
   14944:	2308      	movs	r3, #8
   14946:	18fb      	adds	r3, r7, r3
   14948:	2101      	movs	r1, #1
   1494a:	400a      	ands	r2, r1
   1494c:	0190      	lsls	r0, r2, #6
   1494e:	781a      	ldrb	r2, [r3, #0]
   14950:	2140      	movs	r1, #64	; 0x40
   14952:	438a      	bics	r2, r1
   14954:	1c11      	adds	r1, r2, #0
   14956:	1c02      	adds	r2, r0, #0
   14958:	430a      	orrs	r2, r1
   1495a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   1495c:	2308      	movs	r3, #8
   1495e:	18fa      	adds	r2, r7, r3
   14960:	6878      	ldr	r0, [r7, #4]
   14962:	2301      	movs	r3, #1
   14964:	2112      	movs	r1, #18
   14966:	4c05      	ldr	r4, [pc, #20]	; (1497c <lsm6dso_block_data_update_set+0x68>)
   14968:	47a0      	blx	r4
   1496a:	0003      	movs	r3, r0
   1496c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1496e:	68fb      	ldr	r3, [r7, #12]
}
   14970:	0018      	movs	r0, r3
   14972:	46bd      	mov	sp, r7
   14974:	b005      	add	sp, #20
   14976:	bd90      	pop	{r4, r7, pc}
   14978:	000141f1 	.word	0x000141f1
   1497c:	00014237 	.word	0x00014237

00014980 <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
   14980:	b590      	push	{r4, r7, lr}
   14982:	b085      	sub	sp, #20
   14984:	af00      	add	r7, sp, #0
   14986:	6078      	str	r0, [r7, #4]
   14988:	000a      	movs	r2, r1
   1498a:	1cfb      	adds	r3, r7, #3
   1498c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   1498e:	2308      	movs	r3, #8
   14990:	18fa      	adds	r2, r7, r3
   14992:	6878      	ldr	r0, [r7, #4]
   14994:	2301      	movs	r3, #1
   14996:	2115      	movs	r1, #21
   14998:	4c12      	ldr	r4, [pc, #72]	; (149e4 <lsm6dso_xl_offset_weight_set+0x64>)
   1499a:	47a0      	blx	r4
   1499c:	0003      	movs	r3, r0
   1499e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   149a0:	68fb      	ldr	r3, [r7, #12]
   149a2:	2b00      	cmp	r3, #0
   149a4:	d119      	bne.n	149da <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
   149a6:	1cfb      	adds	r3, r7, #3
   149a8:	781b      	ldrb	r3, [r3, #0]
   149aa:	2201      	movs	r2, #1
   149ac:	4013      	ands	r3, r2
   149ae:	b2da      	uxtb	r2, r3
   149b0:	2308      	movs	r3, #8
   149b2:	18fb      	adds	r3, r7, r3
   149b4:	2101      	movs	r1, #1
   149b6:	400a      	ands	r2, r1
   149b8:	00d0      	lsls	r0, r2, #3
   149ba:	781a      	ldrb	r2, [r3, #0]
   149bc:	2108      	movs	r1, #8
   149be:	438a      	bics	r2, r1
   149c0:	1c11      	adds	r1, r2, #0
   149c2:	1c02      	adds	r2, r0, #0
   149c4:	430a      	orrs	r2, r1
   149c6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   149c8:	2308      	movs	r3, #8
   149ca:	18fa      	adds	r2, r7, r3
   149cc:	6878      	ldr	r0, [r7, #4]
   149ce:	2301      	movs	r3, #1
   149d0:	2115      	movs	r1, #21
   149d2:	4c05      	ldr	r4, [pc, #20]	; (149e8 <lsm6dso_xl_offset_weight_set+0x68>)
   149d4:	47a0      	blx	r4
   149d6:	0003      	movs	r3, r0
   149d8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   149da:	68fb      	ldr	r3, [r7, #12]
}
   149dc:	0018      	movs	r0, r3
   149de:	46bd      	mov	sp, r7
   149e0:	b005      	add	sp, #20
   149e2:	bd90      	pop	{r4, r7, pc}
   149e4:	000141f1 	.word	0x000141f1
   149e8:	00014237 	.word	0x00014237

000149ec <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
   149ec:	b590      	push	{r4, r7, lr}
   149ee:	b085      	sub	sp, #20
   149f0:	af00      	add	r7, sp, #0
   149f2:	6078      	str	r0, [r7, #4]
   149f4:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
   149f6:	2308      	movs	r3, #8
   149f8:	18fa      	adds	r2, r7, r3
   149fa:	6878      	ldr	r0, [r7, #4]
   149fc:	2301      	movs	r3, #1
   149fe:	211e      	movs	r1, #30
   14a00:	4c08      	ldr	r4, [pc, #32]	; (14a24 <lsm6dso_xl_flag_data_ready_get+0x38>)
   14a02:	47a0      	blx	r4
   14a04:	0003      	movs	r3, r0
   14a06:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
   14a08:	2308      	movs	r3, #8
   14a0a:	18fb      	adds	r3, r7, r3
   14a0c:	781b      	ldrb	r3, [r3, #0]
   14a0e:	07db      	lsls	r3, r3, #31
   14a10:	0fdb      	lsrs	r3, r3, #31
   14a12:	b2db      	uxtb	r3, r3
   14a14:	001a      	movs	r2, r3
   14a16:	683b      	ldr	r3, [r7, #0]
   14a18:	701a      	strb	r2, [r3, #0]

  return ret;
   14a1a:	68fb      	ldr	r3, [r7, #12]
}
   14a1c:	0018      	movs	r0, r3
   14a1e:	46bd      	mov	sp, r7
   14a20:	b005      	add	sp, #20
   14a22:	bd90      	pop	{r4, r7, pc}
   14a24:	000141f1 	.word	0x000141f1

00014a28 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   14a28:	b590      	push	{r4, r7, lr}
   14a2a:	b087      	sub	sp, #28
   14a2c:	af00      	add	r7, sp, #0
   14a2e:	6078      	str	r0, [r7, #4]
   14a30:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
   14a32:	230c      	movs	r3, #12
   14a34:	18fa      	adds	r2, r7, r3
   14a36:	6878      	ldr	r0, [r7, #4]
   14a38:	2306      	movs	r3, #6
   14a3a:	2128      	movs	r1, #40	; 0x28
   14a3c:	4c26      	ldr	r4, [pc, #152]	; (14ad8 <lsm6dso_acceleration_raw_get+0xb0>)
   14a3e:	47a0      	blx	r4
   14a40:	0003      	movs	r3, r0
   14a42:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   14a44:	230c      	movs	r3, #12
   14a46:	18fb      	adds	r3, r7, r3
   14a48:	785b      	ldrb	r3, [r3, #1]
   14a4a:	b21a      	sxth	r2, r3
   14a4c:	683b      	ldr	r3, [r7, #0]
   14a4e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   14a50:	683b      	ldr	r3, [r7, #0]
   14a52:	2200      	movs	r2, #0
   14a54:	5e9b      	ldrsh	r3, [r3, r2]
   14a56:	b29b      	uxth	r3, r3
   14a58:	021b      	lsls	r3, r3, #8
   14a5a:	b29a      	uxth	r2, r3
   14a5c:	230c      	movs	r3, #12
   14a5e:	18fb      	adds	r3, r7, r3
   14a60:	781b      	ldrb	r3, [r3, #0]
   14a62:	b29b      	uxth	r3, r3
   14a64:	18d3      	adds	r3, r2, r3
   14a66:	b29b      	uxth	r3, r3
   14a68:	b21a      	sxth	r2, r3
   14a6a:	683b      	ldr	r3, [r7, #0]
   14a6c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   14a6e:	683b      	ldr	r3, [r7, #0]
   14a70:	3302      	adds	r3, #2
   14a72:	220c      	movs	r2, #12
   14a74:	18ba      	adds	r2, r7, r2
   14a76:	78d2      	ldrb	r2, [r2, #3]
   14a78:	b212      	sxth	r2, r2
   14a7a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   14a7c:	683b      	ldr	r3, [r7, #0]
   14a7e:	3302      	adds	r3, #2
   14a80:	683a      	ldr	r2, [r7, #0]
   14a82:	3202      	adds	r2, #2
   14a84:	2100      	movs	r1, #0
   14a86:	5e52      	ldrsh	r2, [r2, r1]
   14a88:	b292      	uxth	r2, r2
   14a8a:	0212      	lsls	r2, r2, #8
   14a8c:	b291      	uxth	r1, r2
   14a8e:	220c      	movs	r2, #12
   14a90:	18ba      	adds	r2, r7, r2
   14a92:	7892      	ldrb	r2, [r2, #2]
   14a94:	b292      	uxth	r2, r2
   14a96:	188a      	adds	r2, r1, r2
   14a98:	b292      	uxth	r2, r2
   14a9a:	b212      	sxth	r2, r2
   14a9c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   14a9e:	683b      	ldr	r3, [r7, #0]
   14aa0:	3304      	adds	r3, #4
   14aa2:	220c      	movs	r2, #12
   14aa4:	18ba      	adds	r2, r7, r2
   14aa6:	7952      	ldrb	r2, [r2, #5]
   14aa8:	b212      	sxth	r2, r2
   14aaa:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   14aac:	683b      	ldr	r3, [r7, #0]
   14aae:	3304      	adds	r3, #4
   14ab0:	683a      	ldr	r2, [r7, #0]
   14ab2:	3204      	adds	r2, #4
   14ab4:	2100      	movs	r1, #0
   14ab6:	5e52      	ldrsh	r2, [r2, r1]
   14ab8:	b292      	uxth	r2, r2
   14aba:	0212      	lsls	r2, r2, #8
   14abc:	b291      	uxth	r1, r2
   14abe:	220c      	movs	r2, #12
   14ac0:	18ba      	adds	r2, r7, r2
   14ac2:	7912      	ldrb	r2, [r2, #4]
   14ac4:	b292      	uxth	r2, r2
   14ac6:	188a      	adds	r2, r1, r2
   14ac8:	b292      	uxth	r2, r2
   14aca:	b212      	sxth	r2, r2
   14acc:	801a      	strh	r2, [r3, #0]

  return ret;
   14ace:	697b      	ldr	r3, [r7, #20]
}
   14ad0:	0018      	movs	r0, r3
   14ad2:	46bd      	mov	sp, r7
   14ad4:	b007      	add	sp, #28
   14ad6:	bd90      	pop	{r4, r7, pc}
   14ad8:	000141f1 	.word	0x000141f1

00014adc <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
   14adc:	b590      	push	{r4, r7, lr}
   14ade:	b085      	sub	sp, #20
   14ae0:	af00      	add	r7, sp, #0
   14ae2:	6078      	str	r0, [r7, #4]
   14ae4:	000a      	movs	r2, r1
   14ae6:	1cfb      	adds	r3, r7, #3
   14ae8:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   14aea:	2308      	movs	r3, #8
   14aec:	18fa      	adds	r2, r7, r3
   14aee:	6878      	ldr	r0, [r7, #4]
   14af0:	2301      	movs	r3, #1
   14af2:	2101      	movs	r1, #1
   14af4:	4c11      	ldr	r4, [pc, #68]	; (14b3c <lsm6dso_mem_bank_set+0x60>)
   14af6:	47a0      	blx	r4
   14af8:	0003      	movs	r3, r0
   14afa:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14afc:	68fb      	ldr	r3, [r7, #12]
   14afe:	2b00      	cmp	r3, #0
   14b00:	d117      	bne.n	14b32 <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
   14b02:	1cfb      	adds	r3, r7, #3
   14b04:	781b      	ldrb	r3, [r3, #0]
   14b06:	2203      	movs	r2, #3
   14b08:	4013      	ands	r3, r2
   14b0a:	b2da      	uxtb	r2, r3
   14b0c:	2308      	movs	r3, #8
   14b0e:	18fb      	adds	r3, r7, r3
   14b10:	0190      	lsls	r0, r2, #6
   14b12:	781a      	ldrb	r2, [r3, #0]
   14b14:	213f      	movs	r1, #63	; 0x3f
   14b16:	400a      	ands	r2, r1
   14b18:	1c11      	adds	r1, r2, #0
   14b1a:	1c02      	adds	r2, r0, #0
   14b1c:	430a      	orrs	r2, r1
   14b1e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   14b20:	2308      	movs	r3, #8
   14b22:	18fa      	adds	r2, r7, r3
   14b24:	6878      	ldr	r0, [r7, #4]
   14b26:	2301      	movs	r3, #1
   14b28:	2101      	movs	r1, #1
   14b2a:	4c05      	ldr	r4, [pc, #20]	; (14b40 <lsm6dso_mem_bank_set+0x64>)
   14b2c:	47a0      	blx	r4
   14b2e:	0003      	movs	r3, r0
   14b30:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14b32:	68fb      	ldr	r3, [r7, #12]
}
   14b34:	0018      	movs	r0, r3
   14b36:	46bd      	mov	sp, r7
   14b38:	b005      	add	sp, #20
   14b3a:	bd90      	pop	{r4, r7, pc}
   14b3c:	000141f1 	.word	0x000141f1
   14b40:	00014237 	.word	0x00014237

00014b44 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   14b44:	b590      	push	{r4, r7, lr}
   14b46:	b085      	sub	sp, #20
   14b48:	af00      	add	r7, sp, #0
   14b4a:	6078      	str	r0, [r7, #4]
   14b4c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
   14b4e:	683a      	ldr	r2, [r7, #0]
   14b50:	6878      	ldr	r0, [r7, #4]
   14b52:	2301      	movs	r3, #1
   14b54:	210f      	movs	r1, #15
   14b56:	4c04      	ldr	r4, [pc, #16]	; (14b68 <lsm6dso_device_id_get+0x24>)
   14b58:	47a0      	blx	r4
   14b5a:	0003      	movs	r3, r0
   14b5c:	60fb      	str	r3, [r7, #12]

  return ret;
   14b5e:	68fb      	ldr	r3, [r7, #12]
}
   14b60:	0018      	movs	r0, r3
   14b62:	46bd      	mov	sp, r7
   14b64:	b005      	add	sp, #20
   14b66:	bd90      	pop	{r4, r7, pc}
   14b68:	000141f1 	.word	0x000141f1

00014b6c <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
   14b6c:	b590      	push	{r4, r7, lr}
   14b6e:	b085      	sub	sp, #20
   14b70:	af00      	add	r7, sp, #0
   14b72:	6078      	str	r0, [r7, #4]
   14b74:	000a      	movs	r2, r1
   14b76:	1cfb      	adds	r3, r7, #3
   14b78:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   14b7a:	2308      	movs	r3, #8
   14b7c:	18fa      	adds	r2, r7, r3
   14b7e:	6878      	ldr	r0, [r7, #4]
   14b80:	2301      	movs	r3, #1
   14b82:	2112      	movs	r1, #18
   14b84:	4c12      	ldr	r4, [pc, #72]	; (14bd0 <lsm6dso_reset_set+0x64>)
   14b86:	47a0      	blx	r4
   14b88:	0003      	movs	r3, r0
   14b8a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14b8c:	68fb      	ldr	r3, [r7, #12]
   14b8e:	2b00      	cmp	r3, #0
   14b90:	d119      	bne.n	14bc6 <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
   14b92:	1cfb      	adds	r3, r7, #3
   14b94:	781b      	ldrb	r3, [r3, #0]
   14b96:	2201      	movs	r2, #1
   14b98:	4013      	ands	r3, r2
   14b9a:	b2da      	uxtb	r2, r3
   14b9c:	2308      	movs	r3, #8
   14b9e:	18fb      	adds	r3, r7, r3
   14ba0:	2101      	movs	r1, #1
   14ba2:	400a      	ands	r2, r1
   14ba4:	0010      	movs	r0, r2
   14ba6:	781a      	ldrb	r2, [r3, #0]
   14ba8:	2101      	movs	r1, #1
   14baa:	438a      	bics	r2, r1
   14bac:	1c11      	adds	r1, r2, #0
   14bae:	1c02      	adds	r2, r0, #0
   14bb0:	430a      	orrs	r2, r1
   14bb2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   14bb4:	2308      	movs	r3, #8
   14bb6:	18fa      	adds	r2, r7, r3
   14bb8:	6878      	ldr	r0, [r7, #4]
   14bba:	2301      	movs	r3, #1
   14bbc:	2112      	movs	r1, #18
   14bbe:	4c05      	ldr	r4, [pc, #20]	; (14bd4 <lsm6dso_reset_set+0x68>)
   14bc0:	47a0      	blx	r4
   14bc2:	0003      	movs	r3, r0
   14bc4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14bc6:	68fb      	ldr	r3, [r7, #12]
}
   14bc8:	0018      	movs	r0, r3
   14bca:	46bd      	mov	sp, r7
   14bcc:	b005      	add	sp, #20
   14bce:	bd90      	pop	{r4, r7, pc}
   14bd0:	000141f1 	.word	0x000141f1
   14bd4:	00014237 	.word	0x00014237

00014bd8 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   14bd8:	b590      	push	{r4, r7, lr}
   14bda:	b085      	sub	sp, #20
   14bdc:	af00      	add	r7, sp, #0
   14bde:	6078      	str	r0, [r7, #4]
   14be0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   14be2:	2308      	movs	r3, #8
   14be4:	18fa      	adds	r2, r7, r3
   14be6:	6878      	ldr	r0, [r7, #4]
   14be8:	2301      	movs	r3, #1
   14bea:	2112      	movs	r1, #18
   14bec:	4c08      	ldr	r4, [pc, #32]	; (14c10 <lsm6dso_reset_get+0x38>)
   14bee:	47a0      	blx	r4
   14bf0:	0003      	movs	r3, r0
   14bf2:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
   14bf4:	2308      	movs	r3, #8
   14bf6:	18fb      	adds	r3, r7, r3
   14bf8:	781b      	ldrb	r3, [r3, #0]
   14bfa:	07db      	lsls	r3, r3, #31
   14bfc:	0fdb      	lsrs	r3, r3, #31
   14bfe:	b2db      	uxtb	r3, r3
   14c00:	001a      	movs	r2, r3
   14c02:	683b      	ldr	r3, [r7, #0]
   14c04:	701a      	strb	r2, [r3, #0]

  return ret;
   14c06:	68fb      	ldr	r3, [r7, #12]
}
   14c08:	0018      	movs	r0, r3
   14c0a:	46bd      	mov	sp, r7
   14c0c:	b005      	add	sp, #20
   14c0e:	bd90      	pop	{r4, r7, pc}
   14c10:	000141f1 	.word	0x000141f1

00014c14 <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
   14c14:	b590      	push	{r4, r7, lr}
   14c16:	b085      	sub	sp, #20
   14c18:	af00      	add	r7, sp, #0
   14c1a:	6078      	str	r0, [r7, #4]
   14c1c:	000a      	movs	r2, r1
   14c1e:	1cfb      	adds	r3, r7, #3
   14c20:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14c22:	2308      	movs	r3, #8
   14c24:	18fa      	adds	r2, r7, r3
   14c26:	6878      	ldr	r0, [r7, #4]
   14c28:	2301      	movs	r3, #1
   14c2a:	2110      	movs	r1, #16
   14c2c:	4c12      	ldr	r4, [pc, #72]	; (14c78 <lsm6dso_xl_filter_lp2_set+0x64>)
   14c2e:	47a0      	blx	r4
   14c30:	0003      	movs	r3, r0
   14c32:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14c34:	68fb      	ldr	r3, [r7, #12]
   14c36:	2b00      	cmp	r3, #0
   14c38:	d119      	bne.n	14c6e <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
   14c3a:	1cfb      	adds	r3, r7, #3
   14c3c:	781b      	ldrb	r3, [r3, #0]
   14c3e:	2201      	movs	r2, #1
   14c40:	4013      	ands	r3, r2
   14c42:	b2da      	uxtb	r2, r3
   14c44:	2308      	movs	r3, #8
   14c46:	18fb      	adds	r3, r7, r3
   14c48:	2101      	movs	r1, #1
   14c4a:	400a      	ands	r2, r1
   14c4c:	1890      	adds	r0, r2, r2
   14c4e:	781a      	ldrb	r2, [r3, #0]
   14c50:	2102      	movs	r1, #2
   14c52:	438a      	bics	r2, r1
   14c54:	1c11      	adds	r1, r2, #0
   14c56:	1c02      	adds	r2, r0, #0
   14c58:	430a      	orrs	r2, r1
   14c5a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14c5c:	2308      	movs	r3, #8
   14c5e:	18fa      	adds	r2, r7, r3
   14c60:	6878      	ldr	r0, [r7, #4]
   14c62:	2301      	movs	r3, #1
   14c64:	2110      	movs	r1, #16
   14c66:	4c05      	ldr	r4, [pc, #20]	; (14c7c <lsm6dso_xl_filter_lp2_set+0x68>)
   14c68:	47a0      	blx	r4
   14c6a:	0003      	movs	r3, r0
   14c6c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14c6e:	68fb      	ldr	r3, [r7, #12]
}
   14c70:	0018      	movs	r0, r3
   14c72:	46bd      	mov	sp, r7
   14c74:	b005      	add	sp, #20
   14c76:	bd90      	pop	{r4, r7, pc}
   14c78:	000141f1 	.word	0x000141f1
   14c7c:	00014237 	.word	0x00014237

00014c80 <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
   14c80:	b590      	push	{r4, r7, lr}
   14c82:	b085      	sub	sp, #20
   14c84:	af00      	add	r7, sp, #0
   14c86:	6078      	str	r0, [r7, #4]
   14c88:	000a      	movs	r2, r1
   14c8a:	1cfb      	adds	r3, r7, #3
   14c8c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   14c8e:	2308      	movs	r3, #8
   14c90:	18fa      	adds	r2, r7, r3
   14c92:	6878      	ldr	r0, [r7, #4]
   14c94:	2301      	movs	r3, #1
   14c96:	2117      	movs	r1, #23
   14c98:	4c25      	ldr	r4, [pc, #148]	; (14d30 <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   14c9a:	47a0      	blx	r4
   14c9c:	0003      	movs	r3, r0
   14c9e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14ca0:	68fb      	ldr	r3, [r7, #12]
   14ca2:	2b00      	cmp	r3, #0
   14ca4:	d13f      	bne.n	14d26 <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
   14ca6:	1cfb      	adds	r3, r7, #3
   14ca8:	781b      	ldrb	r3, [r3, #0]
   14caa:	091b      	lsrs	r3, r3, #4
   14cac:	b2db      	uxtb	r3, r3
   14cae:	1c1a      	adds	r2, r3, #0
   14cb0:	2301      	movs	r3, #1
   14cb2:	4013      	ands	r3, r2
   14cb4:	b2da      	uxtb	r2, r3
   14cb6:	2308      	movs	r3, #8
   14cb8:	18fb      	adds	r3, r7, r3
   14cba:	2101      	movs	r1, #1
   14cbc:	400a      	ands	r2, r1
   14cbe:	0090      	lsls	r0, r2, #2
   14cc0:	781a      	ldrb	r2, [r3, #0]
   14cc2:	2104      	movs	r1, #4
   14cc4:	438a      	bics	r2, r1
   14cc6:	1c11      	adds	r1, r2, #0
   14cc8:	1c02      	adds	r2, r0, #0
   14cca:	430a      	orrs	r2, r1
   14ccc:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
   14cce:	1cfb      	adds	r3, r7, #3
   14cd0:	781b      	ldrb	r3, [r3, #0]
   14cd2:	095b      	lsrs	r3, r3, #5
   14cd4:	b2db      	uxtb	r3, r3
   14cd6:	1c1a      	adds	r2, r3, #0
   14cd8:	2301      	movs	r3, #1
   14cda:	4013      	ands	r3, r2
   14cdc:	b2da      	uxtb	r2, r3
   14cde:	2308      	movs	r3, #8
   14ce0:	18fb      	adds	r3, r7, r3
   14ce2:	2101      	movs	r1, #1
   14ce4:	400a      	ands	r2, r1
   14ce6:	0110      	lsls	r0, r2, #4
   14ce8:	781a      	ldrb	r2, [r3, #0]
   14cea:	2110      	movs	r1, #16
   14cec:	438a      	bics	r2, r1
   14cee:	1c11      	adds	r1, r2, #0
   14cf0:	1c02      	adds	r2, r0, #0
   14cf2:	430a      	orrs	r2, r1
   14cf4:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
   14cf6:	1cfb      	adds	r3, r7, #3
   14cf8:	781b      	ldrb	r3, [r3, #0]
   14cfa:	2207      	movs	r2, #7
   14cfc:	4013      	ands	r3, r2
   14cfe:	b2da      	uxtb	r2, r3
   14d00:	2308      	movs	r3, #8
   14d02:	18fb      	adds	r3, r7, r3
   14d04:	0150      	lsls	r0, r2, #5
   14d06:	781a      	ldrb	r2, [r3, #0]
   14d08:	211f      	movs	r1, #31
   14d0a:	400a      	ands	r2, r1
   14d0c:	1c11      	adds	r1, r2, #0
   14d0e:	1c02      	adds	r2, r0, #0
   14d10:	430a      	orrs	r2, r1
   14d12:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   14d14:	2308      	movs	r3, #8
   14d16:	18fa      	adds	r2, r7, r3
   14d18:	6878      	ldr	r0, [r7, #4]
   14d1a:	2301      	movs	r3, #1
   14d1c:	2117      	movs	r1, #23
   14d1e:	4c05      	ldr	r4, [pc, #20]	; (14d34 <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   14d20:	47a0      	blx	r4
   14d22:	0003      	movs	r3, r0
   14d24:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14d26:	68fb      	ldr	r3, [r7, #12]
}
   14d28:	0018      	movs	r0, r3
   14d2a:	46bd      	mov	sp, r7
   14d2c:	b005      	add	sp, #20
   14d2e:	bd90      	pop	{r4, r7, pc}
   14d30:	000141f1 	.word	0x000141f1
   14d34:	00014237 	.word	0x00014237

00014d38 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
   14d38:	b590      	push	{r4, r7, lr}
   14d3a:	b087      	sub	sp, #28
   14d3c:	af00      	add	r7, sp, #0
   14d3e:	6078      	str	r0, [r7, #4]
   14d40:	000a      	movs	r2, r1
   14d42:	1cfb      	adds	r3, r7, #3
   14d44:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   14d46:	230c      	movs	r3, #12
   14d48:	18fa      	adds	r2, r7, r3
   14d4a:	6878      	ldr	r0, [r7, #4]
   14d4c:	2301      	movs	r3, #1
   14d4e:	2118      	movs	r1, #24
   14d50:	4c28      	ldr	r4, [pc, #160]	; (14df4 <lsm6dso_i3c_disable_set+0xbc>)
   14d52:	47a0      	blx	r4
   14d54:	0003      	movs	r3, r0
   14d56:	617b      	str	r3, [r7, #20]

  if (ret == 0)
   14d58:	697b      	ldr	r3, [r7, #20]
   14d5a:	2b00      	cmp	r3, #0
   14d5c:	d11c      	bne.n	14d98 <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
   14d5e:	1cfb      	adds	r3, r7, #3
   14d60:	781b      	ldrb	r3, [r3, #0]
   14d62:	09db      	lsrs	r3, r3, #7
   14d64:	b2db      	uxtb	r3, r3
   14d66:	1c1a      	adds	r2, r3, #0
   14d68:	2301      	movs	r3, #1
   14d6a:	4013      	ands	r3, r2
   14d6c:	b2da      	uxtb	r2, r3
   14d6e:	230c      	movs	r3, #12
   14d70:	18fb      	adds	r3, r7, r3
   14d72:	2101      	movs	r1, #1
   14d74:	400a      	ands	r2, r1
   14d76:	1890      	adds	r0, r2, r2
   14d78:	781a      	ldrb	r2, [r3, #0]
   14d7a:	2102      	movs	r1, #2
   14d7c:	438a      	bics	r2, r1
   14d7e:	1c11      	adds	r1, r2, #0
   14d80:	1c02      	adds	r2, r0, #0
   14d82:	430a      	orrs	r2, r1
   14d84:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   14d86:	230c      	movs	r3, #12
   14d88:	18fa      	adds	r2, r7, r3
   14d8a:	6878      	ldr	r0, [r7, #4]
   14d8c:	2301      	movs	r3, #1
   14d8e:	2118      	movs	r1, #24
   14d90:	4c19      	ldr	r4, [pc, #100]	; (14df8 <lsm6dso_i3c_disable_set+0xc0>)
   14d92:	47a0      	blx	r4
   14d94:	0003      	movs	r3, r0
   14d96:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
   14d98:	697b      	ldr	r3, [r7, #20]
   14d9a:	2b00      	cmp	r3, #0
   14d9c:	d108      	bne.n	14db0 <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   14d9e:	2310      	movs	r3, #16
   14da0:	18fa      	adds	r2, r7, r3
   14da2:	6878      	ldr	r0, [r7, #4]
   14da4:	2301      	movs	r3, #1
   14da6:	2162      	movs	r1, #98	; 0x62
   14da8:	4c12      	ldr	r4, [pc, #72]	; (14df4 <lsm6dso_i3c_disable_set+0xbc>)
   14daa:	47a0      	blx	r4
   14dac:	0003      	movs	r3, r0
   14dae:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
   14db0:	697b      	ldr	r3, [r7, #20]
   14db2:	2b00      	cmp	r3, #0
   14db4:	d119      	bne.n	14dea <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
   14db6:	1cfb      	adds	r3, r7, #3
   14db8:	781b      	ldrb	r3, [r3, #0]
   14dba:	2203      	movs	r2, #3
   14dbc:	4013      	ands	r3, r2
   14dbe:	b2da      	uxtb	r2, r3
   14dc0:	2310      	movs	r3, #16
   14dc2:	18fb      	adds	r3, r7, r3
   14dc4:	2103      	movs	r1, #3
   14dc6:	400a      	ands	r2, r1
   14dc8:	00d0      	lsls	r0, r2, #3
   14dca:	781a      	ldrb	r2, [r3, #0]
   14dcc:	2118      	movs	r1, #24
   14dce:	438a      	bics	r2, r1
   14dd0:	1c11      	adds	r1, r2, #0
   14dd2:	1c02      	adds	r2, r0, #0
   14dd4:	430a      	orrs	r2, r1
   14dd6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   14dd8:	2310      	movs	r3, #16
   14dda:	18fa      	adds	r2, r7, r3
   14ddc:	6878      	ldr	r0, [r7, #4]
   14dde:	2301      	movs	r3, #1
   14de0:	2162      	movs	r1, #98	; 0x62
   14de2:	4c05      	ldr	r4, [pc, #20]	; (14df8 <lsm6dso_i3c_disable_set+0xc0>)
   14de4:	47a0      	blx	r4
   14de6:	0003      	movs	r3, r0
   14de8:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
   14dea:	697b      	ldr	r3, [r7, #20]
}
   14dec:	0018      	movs	r0, r3
   14dee:	46bd      	mov	sp, r7
   14df0:	b007      	add	sp, #28
   14df2:	bd90      	pop	{r4, r7, pc}
   14df4:	000141f1 	.word	0x000141f1
   14df8:	00014237 	.word	0x00014237

00014dfc <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
   14dfc:	b590      	push	{r4, r7, lr}
   14dfe:	b085      	sub	sp, #20
   14e00:	af00      	add	r7, sp, #0
   14e02:	6078      	str	r0, [r7, #4]
   14e04:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   14e06:	687b      	ldr	r3, [r7, #4]
   14e08:	2102      	movs	r1, #2
   14e0a:	0018      	movs	r0, r3
   14e0c:	4b0e      	ldr	r3, [pc, #56]	; (14e48 <lsm6dso_fsm_enable_get+0x4c>)
   14e0e:	4798      	blx	r3
   14e10:	0003      	movs	r3, r0
   14e12:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14e14:	68fb      	ldr	r3, [r7, #12]
   14e16:	2b00      	cmp	r3, #0
   14e18:	d107      	bne.n	14e2a <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
   14e1a:	683a      	ldr	r2, [r7, #0]
   14e1c:	6878      	ldr	r0, [r7, #4]
   14e1e:	2302      	movs	r3, #2
   14e20:	2146      	movs	r1, #70	; 0x46
   14e22:	4c0a      	ldr	r4, [pc, #40]	; (14e4c <lsm6dso_fsm_enable_get+0x50>)
   14e24:	47a0      	blx	r4
   14e26:	0003      	movs	r3, r0
   14e28:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
   14e2a:	68fb      	ldr	r3, [r7, #12]
   14e2c:	2b00      	cmp	r3, #0
   14e2e:	d106      	bne.n	14e3e <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   14e30:	687b      	ldr	r3, [r7, #4]
   14e32:	2100      	movs	r1, #0
   14e34:	0018      	movs	r0, r3
   14e36:	4b04      	ldr	r3, [pc, #16]	; (14e48 <lsm6dso_fsm_enable_get+0x4c>)
   14e38:	4798      	blx	r3
   14e3a:	0003      	movs	r3, r0
   14e3c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14e3e:	68fb      	ldr	r3, [r7, #12]
}
   14e40:	0018      	movs	r0, r3
   14e42:	46bd      	mov	sp, r7
   14e44:	b005      	add	sp, #20
   14e46:	bd90      	pop	{r4, r7, pc}
   14e48:	00014add 	.word	0x00014add
   14e4c:	000141f1 	.word	0x000141f1

00014e50 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
   14e50:	b590      	push	{r4, r7, lr}
   14e52:	b085      	sub	sp, #20
   14e54:	af00      	add	r7, sp, #0
   14e56:	6078      	str	r0, [r7, #4]
   14e58:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   14e5a:	687b      	ldr	r3, [r7, #4]
   14e5c:	2102      	movs	r1, #2
   14e5e:	0018      	movs	r0, r3
   14e60:	4b21      	ldr	r3, [pc, #132]	; (14ee8 <lsm6dso_fsm_data_rate_get+0x98>)
   14e62:	4798      	blx	r3
   14e64:	0003      	movs	r3, r0
   14e66:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14e68:	68fb      	ldr	r3, [r7, #12]
   14e6a:	2b00      	cmp	r3, #0
   14e6c:	d108      	bne.n	14e80 <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
   14e6e:	2308      	movs	r3, #8
   14e70:	18fa      	adds	r2, r7, r3
   14e72:	6878      	ldr	r0, [r7, #4]
   14e74:	2301      	movs	r3, #1
   14e76:	215f      	movs	r1, #95	; 0x5f
   14e78:	4c1c      	ldr	r4, [pc, #112]	; (14eec <lsm6dso_fsm_data_rate_get+0x9c>)
   14e7a:	47a0      	blx	r4
   14e7c:	0003      	movs	r3, r0
   14e7e:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
   14e80:	68fb      	ldr	r3, [r7, #12]
   14e82:	2b00      	cmp	r3, #0
   14e84:	d12b      	bne.n	14ede <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
   14e86:	2308      	movs	r3, #8
   14e88:	18fb      	adds	r3, r7, r3
   14e8a:	781b      	ldrb	r3, [r3, #0]
   14e8c:	06db      	lsls	r3, r3, #27
   14e8e:	0f9b      	lsrs	r3, r3, #30
   14e90:	b2db      	uxtb	r3, r3
   14e92:	2b01      	cmp	r3, #1
   14e94:	d00c      	beq.n	14eb0 <lsm6dso_fsm_data_rate_get+0x60>
   14e96:	dc02      	bgt.n	14e9e <lsm6dso_fsm_data_rate_get+0x4e>
   14e98:	2b00      	cmp	r3, #0
   14e9a:	d005      	beq.n	14ea8 <lsm6dso_fsm_data_rate_get+0x58>
   14e9c:	e014      	b.n	14ec8 <lsm6dso_fsm_data_rate_get+0x78>
   14e9e:	2b02      	cmp	r3, #2
   14ea0:	d00a      	beq.n	14eb8 <lsm6dso_fsm_data_rate_get+0x68>
   14ea2:	2b03      	cmp	r3, #3
   14ea4:	d00c      	beq.n	14ec0 <lsm6dso_fsm_data_rate_get+0x70>
   14ea6:	e00f      	b.n	14ec8 <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   14ea8:	683b      	ldr	r3, [r7, #0]
   14eaa:	2200      	movs	r2, #0
   14eac:	701a      	strb	r2, [r3, #0]
        break;
   14eae:	e00f      	b.n	14ed0 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
   14eb0:	683b      	ldr	r3, [r7, #0]
   14eb2:	2201      	movs	r2, #1
   14eb4:	701a      	strb	r2, [r3, #0]
        break;
   14eb6:	e00b      	b.n	14ed0 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
   14eb8:	683b      	ldr	r3, [r7, #0]
   14eba:	2202      	movs	r2, #2
   14ebc:	701a      	strb	r2, [r3, #0]
        break;
   14ebe:	e007      	b.n	14ed0 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
   14ec0:	683b      	ldr	r3, [r7, #0]
   14ec2:	2203      	movs	r2, #3
   14ec4:	701a      	strb	r2, [r3, #0]
        break;
   14ec6:	e003      	b.n	14ed0 <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   14ec8:	683b      	ldr	r3, [r7, #0]
   14eca:	2200      	movs	r2, #0
   14ecc:	701a      	strb	r2, [r3, #0]
        break;
   14ece:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   14ed0:	687b      	ldr	r3, [r7, #4]
   14ed2:	2100      	movs	r1, #0
   14ed4:	0018      	movs	r0, r3
   14ed6:	4b04      	ldr	r3, [pc, #16]	; (14ee8 <lsm6dso_fsm_data_rate_get+0x98>)
   14ed8:	4798      	blx	r3
   14eda:	0003      	movs	r3, r0
   14edc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14ede:	68fb      	ldr	r3, [r7, #12]
}
   14ee0:	0018      	movs	r0, r3
   14ee2:	46bd      	mov	sp, r7
   14ee4:	b005      	add	sp, #20
   14ee6:	bd90      	pop	{r4, r7, pc}
   14ee8:	00014add 	.word	0x00014add
   14eec:	000141f1 	.word	0x000141f1

00014ef0 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   14ef0:	b580      	push	{r7, lr}
   14ef2:	b084      	sub	sp, #16
   14ef4:	af00      	add	r7, sp, #0
   14ef6:	60f8      	str	r0, [r7, #12]
   14ef8:	0008      	movs	r0, r1
   14efa:	607a      	str	r2, [r7, #4]
   14efc:	0019      	movs	r1, r3
   14efe:	230b      	movs	r3, #11
   14f00:	18fb      	adds	r3, r7, r3
   14f02:	1c02      	adds	r2, r0, #0
   14f04:	701a      	strb	r2, [r3, #0]
   14f06:	2308      	movs	r3, #8
   14f08:	18fb      	adds	r3, r7, r3
   14f0a:	1c0a      	adds	r2, r1, #0
   14f0c:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
return 0;
   14f0e:	2300      	movs	r3, #0

}
   14f10:	0018      	movs	r0, r3
   14f12:	46bd      	mov	sp, r7
   14f14:	b004      	add	sp, #16
   14f16:	bd80      	pop	{r7, pc}

00014f18 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   14f18:	b580      	push	{r7, lr}
   14f1a:	b084      	sub	sp, #16
   14f1c:	af00      	add	r7, sp, #0
   14f1e:	60f8      	str	r0, [r7, #12]
   14f20:	0008      	movs	r0, r1
   14f22:	607a      	str	r2, [r7, #4]
   14f24:	0019      	movs	r1, r3
   14f26:	230b      	movs	r3, #11
   14f28:	18fb      	adds	r3, r7, r3
   14f2a:	1c02      	adds	r2, r0, #0
   14f2c:	701a      	strb	r2, [r3, #0]
   14f2e:	2308      	movs	r3, #8
   14f30:	18fb      	adds	r3, r7, r3
   14f32:	1c0a      	adds	r2, r1, #0
   14f34:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
return 0;
   14f36:	2300      	movs	r3, #0


}
   14f38:	0018      	movs	r0, r3
   14f3a:	46bd      	mov	sp, r7
   14f3c:	b004      	add	sp, #16
   14f3e:	bd80      	pop	{r7, pc}

00014f40 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   14f40:	b580      	push	{r7, lr}
   14f42:	af00      	add	r7, sp, #0
return &dev_ctx;
   14f44:	4b01      	ldr	r3, [pc, #4]	; (14f4c <GetImuStruct+0xc>)
}
   14f46:	0018      	movs	r0, r3
   14f48:	46bd      	mov	sp, r7
   14f4a:	bd80      	pop	{r7, pc}
   14f4c:	20000014 	.word	0x20000014

00014f50 <InitImu>:



int32_t InitImu(void)
{
   14f50:	b580      	push	{r7, lr}
   14f52:	b082      	sub	sp, #8
   14f54:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
   14f56:	2300      	movs	r3, #0
   14f58:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
   14f5a:	4b23      	ldr	r3, [pc, #140]	; (14fe8 <InitImu+0x98>)
   14f5c:	2101      	movs	r1, #1
   14f5e:	0018      	movs	r0, r3
   14f60:	4b22      	ldr	r3, [pc, #136]	; (14fec <InitImu+0x9c>)
   14f62:	4798      	blx	r3
   14f64:	0003      	movs	r3, r0
   14f66:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
   14f68:	1cfa      	adds	r2, r7, #3
   14f6a:	4b1f      	ldr	r3, [pc, #124]	; (14fe8 <InitImu+0x98>)
   14f6c:	0011      	movs	r1, r2
   14f6e:	0018      	movs	r0, r3
   14f70:	4b1f      	ldr	r3, [pc, #124]	; (14ff0 <InitImu+0xa0>)
   14f72:	4798      	blx	r3
   14f74:	0002      	movs	r2, r0
   14f76:	687b      	ldr	r3, [r7, #4]
   14f78:	4313      	orrs	r3, r2
   14f7a:	607b      	str	r3, [r7, #4]
  } while (rst);
   14f7c:	1cfb      	adds	r3, r7, #3
   14f7e:	781b      	ldrb	r3, [r3, #0]
   14f80:	2b00      	cmp	r3, #0
   14f82:	d1f1      	bne.n	14f68 <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
   14f84:	4b18      	ldr	r3, [pc, #96]	; (14fe8 <InitImu+0x98>)
   14f86:	2180      	movs	r1, #128	; 0x80
   14f88:	0018      	movs	r0, r3
   14f8a:	4b1a      	ldr	r3, [pc, #104]	; (14ff4 <InitImu+0xa4>)
   14f8c:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   14f8e:	4b16      	ldr	r3, [pc, #88]	; (14fe8 <InitImu+0x98>)
   14f90:	2101      	movs	r1, #1
   14f92:	0018      	movs	r0, r3
   14f94:	4b18      	ldr	r3, [pc, #96]	; (14ff8 <InitImu+0xa8>)
   14f96:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
   14f98:	4b13      	ldr	r3, [pc, #76]	; (14fe8 <InitImu+0x98>)
   14f9a:	2100      	movs	r1, #0
   14f9c:	0018      	movs	r0, r3
   14f9e:	4b17      	ldr	r3, [pc, #92]	; (14ffc <InitImu+0xac>)
   14fa0:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
   14fa2:	4b11      	ldr	r3, [pc, #68]	; (14fe8 <InitImu+0x98>)
   14fa4:	2101      	movs	r1, #1
   14fa6:	0018      	movs	r0, r3
   14fa8:	4b15      	ldr	r3, [pc, #84]	; (15000 <InitImu+0xb0>)
   14faa:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
   14fac:	4b0e      	ldr	r3, [pc, #56]	; (14fe8 <InitImu+0x98>)
   14fae:	2101      	movs	r1, #1
   14fb0:	0018      	movs	r0, r3
   14fb2:	4b14      	ldr	r3, [pc, #80]	; (15004 <InitImu+0xb4>)
   14fb4:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
   14fb6:	4b0c      	ldr	r3, [pc, #48]	; (14fe8 <InitImu+0x98>)
   14fb8:	2100      	movs	r1, #0
   14fba:	0018      	movs	r0, r3
   14fbc:	4b12      	ldr	r3, [pc, #72]	; (15008 <InitImu+0xb8>)
   14fbe:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
   14fc0:	4b09      	ldr	r3, [pc, #36]	; (14fe8 <InitImu+0x98>)
   14fc2:	2106      	movs	r1, #6
   14fc4:	0018      	movs	r0, r3
   14fc6:	4b11      	ldr	r3, [pc, #68]	; (1500c <InitImu+0xbc>)
   14fc8:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
   14fca:	4b07      	ldr	r3, [pc, #28]	; (14fe8 <InitImu+0x98>)
   14fcc:	2104      	movs	r1, #4
   14fce:	0018      	movs	r0, r3
   14fd0:	4b0f      	ldr	r3, [pc, #60]	; (15010 <InitImu+0xc0>)
   14fd2:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
   14fd4:	4b04      	ldr	r3, [pc, #16]	; (14fe8 <InitImu+0x98>)
   14fd6:	2101      	movs	r1, #1
   14fd8:	0018      	movs	r0, r3
   14fda:	4b0e      	ldr	r3, [pc, #56]	; (15014 <InitImu+0xc4>)
   14fdc:	4798      	blx	r3

  return error;
   14fde:	687b      	ldr	r3, [r7, #4]
}
   14fe0:	0018      	movs	r0, r3
   14fe2:	46bd      	mov	sp, r7
   14fe4:	b002      	add	sp, #8
   14fe6:	bd80      	pop	{r7, pc}
   14fe8:	20000014 	.word	0x20000014
   14fec:	00014b6d 	.word	0x00014b6d
   14ff0:	00014bd9 	.word	0x00014bd9
   14ff4:	00014d39 	.word	0x00014d39
   14ff8:	00014915 	.word	0x00014915
   14ffc:	00014981 	.word	0x00014981
   15000:	00014321 	.word	0x00014321
   15004:	00014651 	.word	0x00014651
   15008:	000142b5 	.word	0x000142b5
   1500c:	000145e5 	.word	0x000145e5
   15010:	00014c81 	.word	0x00014c81
   15014:	00014c15 	.word	0x00014c15

00015018 <InitializeSeesaw>:

 * @return		Returns 0 if no errors.
 * @note
 */
int InitializeSeesaw(void)
{
   15018:	b580      	push	{r7, lr}
   1501a:	b082      	sub	sp, #8
   1501c:	af00      	add	r7, sp, #0
    uint8_t readData[2];
    seesawData.address = NEO_TRELLIS_ADDR;
   1501e:	4b38      	ldr	r3, [pc, #224]	; (15100 <InitializeSeesaw+0xe8>)
   15020:	222e      	movs	r2, #46	; 0x2e
   15022:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgBaseGetHWID[0];
   15024:	4b36      	ldr	r3, [pc, #216]	; (15100 <InitializeSeesaw+0xe8>)
   15026:	4a37      	ldr	r2, [pc, #220]	; (15104 <InitializeSeesaw+0xec>)
   15028:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgBaseGetHWID);
   1502a:	4b35      	ldr	r3, [pc, #212]	; (15100 <InitializeSeesaw+0xe8>)
   1502c:	2202      	movs	r2, #2
   1502e:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &readData[0];
   15030:	4b33      	ldr	r3, [pc, #204]	; (15100 <InitializeSeesaw+0xe8>)
   15032:	003a      	movs	r2, r7
   15034:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   15036:	4b32      	ldr	r3, [pc, #200]	; (15100 <InitializeSeesaw+0xe8>)
   15038:	2201      	movs	r2, #1
   1503a:	819a      	strh	r2, [r3, #12]

    // Check if device is on the line - it should answer with its HW ID

    int error = I2cReadDataWait(&seesawData, 0, 100);
   1503c:	4b30      	ldr	r3, [pc, #192]	; (15100 <InitializeSeesaw+0xe8>)
   1503e:	2264      	movs	r2, #100	; 0x64
   15040:	2100      	movs	r1, #0
   15042:	0018      	movs	r0, r3
   15044:	4b30      	ldr	r3, [pc, #192]	; (15108 <InitializeSeesaw+0xf0>)
   15046:	4798      	blx	r3
   15048:	0003      	movs	r3, r0
   1504a:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   1504c:	687b      	ldr	r3, [r7, #4]
   1504e:	2b00      	cmp	r3, #0
   15050:	d004      	beq.n	1505c <InitializeSeesaw+0x44>
        SerialConsoleWriteString("Error initializing Seesaw!/r/n");
   15052:	4b2e      	ldr	r3, [pc, #184]	; (1510c <InitializeSeesaw+0xf4>)
   15054:	0018      	movs	r0, r3
   15056:	4b2e      	ldr	r3, [pc, #184]	; (15110 <InitializeSeesaw+0xf8>)
   15058:	4798      	blx	r3
   1505a:	e00c      	b.n	15076 <InitializeSeesaw+0x5e>
    } else {
        if (readData[0] != SEESAW_HW_ID_CODE) {
   1505c:	003b      	movs	r3, r7
   1505e:	781b      	ldrb	r3, [r3, #0]
   15060:	2b55      	cmp	r3, #85	; 0x55
   15062:	d004      	beq.n	1506e <InitializeSeesaw+0x56>
            SerialConsoleWriteString("Error/r/n");
   15064:	4b2b      	ldr	r3, [pc, #172]	; (15114 <InitializeSeesaw+0xfc>)
   15066:	0018      	movs	r0, r3
   15068:	4b29      	ldr	r3, [pc, #164]	; (15110 <InitializeSeesaw+0xf8>)
   1506a:	4798      	blx	r3
   1506c:	e003      	b.n	15076 <InitializeSeesaw+0x5e>
        } else {
            SerialConsoleWriteString("Found Seesaw!/r/n");
   1506e:	4b2a      	ldr	r3, [pc, #168]	; (15118 <InitializeSeesaw+0x100>)
   15070:	0018      	movs	r0, r3
   15072:	4b27      	ldr	r3, [pc, #156]	; (15110 <InitializeSeesaw+0xf8>)
   15074:	4798      	blx	r3
        }
    }

    // Tell the Seesaw which pins to use
    seesawData.msgOut = &msgNeopixelPin[0];
   15076:	4b22      	ldr	r3, [pc, #136]	; (15100 <InitializeSeesaw+0xe8>)
   15078:	4a28      	ldr	r2, [pc, #160]	; (1511c <InitializeSeesaw+0x104>)
   1507a:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelPin);
   1507c:	4b20      	ldr	r3, [pc, #128]	; (15100 <InitializeSeesaw+0xe8>)
   1507e:	2203      	movs	r2, #3
   15080:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   15082:	4b1f      	ldr	r3, [pc, #124]	; (15100 <InitializeSeesaw+0xe8>)
   15084:	2164      	movs	r1, #100	; 0x64
   15086:	0018      	movs	r0, r3
   15088:	4b25      	ldr	r3, [pc, #148]	; (15120 <InitializeSeesaw+0x108>)
   1508a:	4798      	blx	r3
   1508c:	0003      	movs	r3, r0
   1508e:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   15090:	687b      	ldr	r3, [r7, #4]
   15092:	2b00      	cmp	r3, #0
   15094:	d003      	beq.n	1509e <InitializeSeesaw+0x86>
        SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
   15096:	4b23      	ldr	r3, [pc, #140]	; (15124 <InitializeSeesaw+0x10c>)
   15098:	0018      	movs	r0, r3
   1509a:	4b1d      	ldr	r3, [pc, #116]	; (15110 <InitializeSeesaw+0xf8>)
   1509c:	4798      	blx	r3
    }

    // Set seesaw Neopixel speed
    seesawData.msgOut = &msgNeopixelSpeed[0];
   1509e:	4b18      	ldr	r3, [pc, #96]	; (15100 <InitializeSeesaw+0xe8>)
   150a0:	4a21      	ldr	r2, [pc, #132]	; (15128 <InitializeSeesaw+0x110>)
   150a2:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelSpeed);
   150a4:	4b16      	ldr	r3, [pc, #88]	; (15100 <InitializeSeesaw+0xe8>)
   150a6:	2203      	movs	r2, #3
   150a8:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   150aa:	4b15      	ldr	r3, [pc, #84]	; (15100 <InitializeSeesaw+0xe8>)
   150ac:	2164      	movs	r1, #100	; 0x64
   150ae:	0018      	movs	r0, r3
   150b0:	4b1b      	ldr	r3, [pc, #108]	; (15120 <InitializeSeesaw+0x108>)
   150b2:	4798      	blx	r3
   150b4:	0003      	movs	r3, r0
   150b6:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   150b8:	687b      	ldr	r3, [r7, #4]
   150ba:	2b00      	cmp	r3, #0
   150bc:	d003      	beq.n	150c6 <InitializeSeesaw+0xae>
        SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
   150be:	4b1b      	ldr	r3, [pc, #108]	; (1512c <InitializeSeesaw+0x114>)
   150c0:	0018      	movs	r0, r3
   150c2:	4b13      	ldr	r3, [pc, #76]	; (15110 <InitializeSeesaw+0xf8>)
   150c4:	4798      	blx	r3
    }

    // Set seesaw Neopixel number of devices
    seesawData.msgOut = &msgNeopixelBufLength[0];
   150c6:	4b0e      	ldr	r3, [pc, #56]	; (15100 <InitializeSeesaw+0xe8>)
   150c8:	4a19      	ldr	r2, [pc, #100]	; (15130 <InitializeSeesaw+0x118>)
   150ca:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelBufLength);
   150cc:	4b0c      	ldr	r3, [pc, #48]	; (15100 <InitializeSeesaw+0xe8>)
   150ce:	2204      	movs	r2, #4
   150d0:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   150d2:	4b0b      	ldr	r3, [pc, #44]	; (15100 <InitializeSeesaw+0xe8>)
   150d4:	2164      	movs	r1, #100	; 0x64
   150d6:	0018      	movs	r0, r3
   150d8:	4b11      	ldr	r3, [pc, #68]	; (15120 <InitializeSeesaw+0x108>)
   150da:	4798      	blx	r3
   150dc:	0003      	movs	r3, r0
   150de:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   150e0:	687b      	ldr	r3, [r7, #4]
   150e2:	2b00      	cmp	r3, #0
   150e4:	d003      	beq.n	150ee <InitializeSeesaw+0xd6>
        SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
   150e6:	4b13      	ldr	r3, [pc, #76]	; (15134 <InitializeSeesaw+0x11c>)
   150e8:	0018      	movs	r0, r3
   150ea:	4b09      	ldr	r3, [pc, #36]	; (15110 <InitializeSeesaw+0xf8>)
   150ec:	4798      	blx	r3
    }

    SeesawTurnOnLedTest();
   150ee:	4b12      	ldr	r3, [pc, #72]	; (15138 <InitializeSeesaw+0x120>)
   150f0:	4798      	blx	r3

    SeesawInitializeKeypad();
   150f2:	4b12      	ldr	r3, [pc, #72]	; (1513c <InitializeSeesaw+0x124>)
   150f4:	4798      	blx	r3
    return error;
   150f6:	687b      	ldr	r3, [r7, #4]
}
   150f8:	0018      	movs	r0, r3
   150fa:	46bd      	mov	sp, r7
   150fc:	b002      	add	sp, #8
   150fe:	bd80      	pop	{r7, pc}
   15100:	20004694 	.word	0x20004694
   15104:	00035ed4 	.word	0x00035ed4
   15108:	000140dd 	.word	0x000140dd
   1510c:	00035eec 	.word	0x00035eec
   15110:	0001d9e5 	.word	0x0001d9e5
   15114:	00035f0c 	.word	0x00035f0c
   15118:	00035f18 	.word	0x00035f18
   1511c:	00035ed8 	.word	0x00035ed8
   15120:	00014005 	.word	0x00014005
   15124:	00035f2c 	.word	0x00035f2c
   15128:	00035edc 	.word	0x00035edc
   1512c:	00035f4c 	.word	0x00035f4c
   15130:	00035ee0 	.word	0x00035ee0
   15134:	00035f78 	.word	0x00035f78
   15138:	000154ed 	.word	0x000154ed
   1513c:	000153fd 	.word	0x000153fd

00015140 <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(void)
{
   15140:	b580      	push	{r7, lr}
   15142:	b082      	sub	sp, #8
   15144:	af00      	add	r7, sp, #0
    uint8_t count = 0;
   15146:	1cfb      	adds	r3, r7, #3
   15148:	2200      	movs	r2, #0
   1514a:	701a      	strb	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   1514c:	4b11      	ldr	r3, [pc, #68]	; (15194 <SeesawGetKeypadCount+0x54>)
   1514e:	222e      	movs	r2, #46	; 0x2e
   15150:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   15152:	4b10      	ldr	r3, [pc, #64]	; (15194 <SeesawGetKeypadCount+0x54>)
   15154:	4a10      	ldr	r2, [pc, #64]	; (15198 <SeesawGetKeypadCount+0x58>)
   15156:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   15158:	4b0e      	ldr	r3, [pc, #56]	; (15194 <SeesawGetKeypadCount+0x54>)
   1515a:	2202      	movs	r2, #2
   1515c:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   1515e:	4b0d      	ldr	r3, [pc, #52]	; (15194 <SeesawGetKeypadCount+0x54>)
   15160:	1cfa      	adds	r2, r7, #3
   15162:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   15164:	4b0b      	ldr	r3, [pc, #44]	; (15194 <SeesawGetKeypadCount+0x54>)
   15166:	2201      	movs	r2, #1
   15168:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   1516a:	4b0a      	ldr	r3, [pc, #40]	; (15194 <SeesawGetKeypadCount+0x54>)
   1516c:	2264      	movs	r2, #100	; 0x64
   1516e:	2100      	movs	r1, #0
   15170:	0018      	movs	r0, r3
   15172:	4b0a      	ldr	r3, [pc, #40]	; (1519c <SeesawGetKeypadCount+0x5c>)
   15174:	4798      	blx	r3
   15176:	0003      	movs	r3, r0
   15178:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   1517a:	687b      	ldr	r3, [r7, #4]
   1517c:	2b00      	cmp	r3, #0
   1517e:	d003      	beq.n	15188 <SeesawGetKeypadCount+0x48>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   15180:	4b07      	ldr	r3, [pc, #28]	; (151a0 <SeesawGetKeypadCount+0x60>)
   15182:	0018      	movs	r0, r3
   15184:	4b07      	ldr	r3, [pc, #28]	; (151a4 <SeesawGetKeypadCount+0x64>)
   15186:	4798      	blx	r3
    }
    return count;
   15188:	1cfb      	adds	r3, r7, #3
   1518a:	781b      	ldrb	r3, [r3, #0]
}
   1518c:	0018      	movs	r0, r3
   1518e:	46bd      	mov	sp, r7
   15190:	b002      	add	sp, #8
   15192:	bd80      	pop	{r7, pc}
   15194:	20004694 	.word	0x20004694
   15198:	00035ee8 	.word	0x00035ee8
   1519c:	000140dd 	.word	0x000140dd
   151a0:	00035fac 	.word	0x00035fac
   151a4:	0001d9e5 	.word	0x0001d9e5

000151a8 <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
{
   151a8:	b580      	push	{r7, lr}
   151aa:	b084      	sub	sp, #16
   151ac:	af00      	add	r7, sp, #0
   151ae:	6078      	str	r0, [r7, #4]
   151b0:	000a      	movs	r2, r1
   151b2:	1cfb      	adds	r3, r7, #3
   151b4:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   151b6:	1cfb      	adds	r3, r7, #3
   151b8:	781b      	ldrb	r3, [r3, #0]
   151ba:	2b00      	cmp	r3, #0
   151bc:	d101      	bne.n	151c2 <SeesawReadKeypad+0x1a>
   151be:	2300      	movs	r3, #0
   151c0:	e026      	b.n	15210 <SeesawReadKeypad+0x68>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   151c2:	2308      	movs	r3, #8
   151c4:	18fb      	adds	r3, r7, r3
   151c6:	4a14      	ldr	r2, [pc, #80]	; (15218 <SeesawReadKeypad+0x70>)
   151c8:	8812      	ldrh	r2, [r2, #0]
   151ca:	801a      	strh	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   151cc:	4b13      	ldr	r3, [pc, #76]	; (1521c <SeesawReadKeypad+0x74>)
   151ce:	222e      	movs	r2, #46	; 0x2e
   151d0:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   151d2:	4b12      	ldr	r3, [pc, #72]	; (1521c <SeesawReadKeypad+0x74>)
   151d4:	2208      	movs	r2, #8
   151d6:	18ba      	adds	r2, r7, r2
   151d8:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   151da:	4b10      	ldr	r3, [pc, #64]	; (1521c <SeesawReadKeypad+0x74>)
   151dc:	2202      	movs	r2, #2
   151de:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   151e0:	4b0e      	ldr	r3, [pc, #56]	; (1521c <SeesawReadKeypad+0x74>)
   151e2:	687a      	ldr	r2, [r7, #4]
   151e4:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   151e6:	1cfb      	adds	r3, r7, #3
   151e8:	781b      	ldrb	r3, [r3, #0]
   151ea:	b29a      	uxth	r2, r3
   151ec:	4b0b      	ldr	r3, [pc, #44]	; (1521c <SeesawReadKeypad+0x74>)
   151ee:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   151f0:	4b0a      	ldr	r3, [pc, #40]	; (1521c <SeesawReadKeypad+0x74>)
   151f2:	2264      	movs	r2, #100	; 0x64
   151f4:	2100      	movs	r1, #0
   151f6:	0018      	movs	r0, r3
   151f8:	4b09      	ldr	r3, [pc, #36]	; (15220 <SeesawReadKeypad+0x78>)
   151fa:	4798      	blx	r3
   151fc:	0003      	movs	r3, r0
   151fe:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   15200:	68fb      	ldr	r3, [r7, #12]
   15202:	2b00      	cmp	r3, #0
   15204:	d003      	beq.n	1520e <SeesawReadKeypad+0x66>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   15206:	4b07      	ldr	r3, [pc, #28]	; (15224 <SeesawReadKeypad+0x7c>)
   15208:	0018      	movs	r0, r3
   1520a:	4b07      	ldr	r3, [pc, #28]	; (15228 <SeesawReadKeypad+0x80>)
   1520c:	4798      	blx	r3
    }
    return error;
   1520e:	68fb      	ldr	r3, [r7, #12]
}
   15210:	0018      	movs	r0, r3
   15212:	46bd      	mov	sp, r7
   15214:	b004      	add	sp, #16
   15216:	bd80      	pop	{r7, pc}
   15218:	00035fd0 	.word	0x00035fd0
   1521c:	20004694 	.word	0x20004694
   15220:	000140dd 	.word	0x000140dd
   15224:	00035fac 	.word	0x00035fac
   15228:	0001d9e5 	.word	0x0001d9e5

0001522c <SeesawActivateKey>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note
*/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
{
   1522c:	b590      	push	{r4, r7, lr}
   1522e:	b087      	sub	sp, #28
   15230:	af00      	add	r7, sp, #0
   15232:	0004      	movs	r4, r0
   15234:	0008      	movs	r0, r1
   15236:	0011      	movs	r1, r2
   15238:	1dfb      	adds	r3, r7, #7
   1523a:	1c22      	adds	r2, r4, #0
   1523c:	701a      	strb	r2, [r3, #0]
   1523e:	1dbb      	adds	r3, r7, #6
   15240:	1c02      	adds	r2, r0, #0
   15242:	701a      	strb	r2, [r3, #0]
   15244:	1d7b      	adds	r3, r7, #5
   15246:	1c0a      	adds	r2, r1, #0
   15248:	701a      	strb	r2, [r3, #0]
    union keyState ks;
    ks.bit.STATE = enable;
   1524a:	2310      	movs	r3, #16
   1524c:	18fb      	adds	r3, r7, r3
   1524e:	1d7a      	adds	r2, r7, #5
   15250:	7812      	ldrb	r2, [r2, #0]
   15252:	2101      	movs	r1, #1
   15254:	0010      	movs	r0, r2
   15256:	4008      	ands	r0, r1
   15258:	781a      	ldrb	r2, [r3, #0]
   1525a:	2101      	movs	r1, #1
   1525c:	438a      	bics	r2, r1
   1525e:	1c11      	adds	r1, r2, #0
   15260:	1c02      	adds	r2, r0, #0
   15262:	430a      	orrs	r2, r1
   15264:	701a      	strb	r2, [r3, #0]
    ks.bit.ACTIVE = (1 << edge);
   15266:	1dbb      	adds	r3, r7, #6
   15268:	781b      	ldrb	r3, [r3, #0]
   1526a:	2201      	movs	r2, #1
   1526c:	409a      	lsls	r2, r3
   1526e:	0013      	movs	r3, r2
   15270:	b2db      	uxtb	r3, r3
   15272:	1c1a      	adds	r2, r3, #0
   15274:	230f      	movs	r3, #15
   15276:	4013      	ands	r3, r2
   15278:	b2da      	uxtb	r2, r3
   1527a:	2310      	movs	r3, #16
   1527c:	18fb      	adds	r3, r7, r3
   1527e:	210f      	movs	r1, #15
   15280:	400a      	ands	r2, r1
   15282:	1890      	adds	r0, r2, r2
   15284:	781a      	ldrb	r2, [r3, #0]
   15286:	211e      	movs	r1, #30
   15288:	438a      	bics	r2, r1
   1528a:	1c11      	adds	r1, r2, #0
   1528c:	1c02      	adds	r2, r0, #0
   1528e:	430a      	orrs	r2, r1
   15290:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
   15292:	230c      	movs	r3, #12
   15294:	18fb      	adds	r3, r7, r3
   15296:	2210      	movs	r2, #16
   15298:	701a      	strb	r2, [r3, #0]
   1529a:	230c      	movs	r3, #12
   1529c:	18fb      	adds	r3, r7, r3
   1529e:	2201      	movs	r2, #1
   152a0:	705a      	strb	r2, [r3, #1]
   152a2:	230c      	movs	r3, #12
   152a4:	18fb      	adds	r3, r7, r3
   152a6:	1dfa      	adds	r2, r7, #7
   152a8:	7812      	ldrb	r2, [r2, #0]
   152aa:	709a      	strb	r2, [r3, #2]
   152ac:	2310      	movs	r3, #16
   152ae:	18fb      	adds	r3, r7, r3
   152b0:	781a      	ldrb	r2, [r3, #0]
   152b2:	230c      	movs	r3, #12
   152b4:	18fb      	adds	r3, r7, r3
   152b6:	70da      	strb	r2, [r3, #3]

    seesawData.address = NEO_TRELLIS_ADDR;
   152b8:	4b0c      	ldr	r3, [pc, #48]	; (152ec <SeesawActivateKey+0xc0>)
   152ba:	222e      	movs	r2, #46	; 0x2e
   152bc:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t *) &cmd[0];
   152be:	4b0b      	ldr	r3, [pc, #44]	; (152ec <SeesawActivateKey+0xc0>)
   152c0:	220c      	movs	r2, #12
   152c2:	18ba      	adds	r2, r7, r2
   152c4:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   152c6:	4b09      	ldr	r3, [pc, #36]	; (152ec <SeesawActivateKey+0xc0>)
   152c8:	2204      	movs	r2, #4
   152ca:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   152cc:	4b07      	ldr	r3, [pc, #28]	; (152ec <SeesawActivateKey+0xc0>)
   152ce:	2200      	movs	r2, #0
   152d0:	819a      	strh	r2, [r3, #12]
    int32_t error = I2cWriteDataWait(&seesawData, 100);
   152d2:	4b06      	ldr	r3, [pc, #24]	; (152ec <SeesawActivateKey+0xc0>)
   152d4:	2164      	movs	r1, #100	; 0x64
   152d6:	0018      	movs	r0, r3
   152d8:	4b05      	ldr	r3, [pc, #20]	; (152f0 <SeesawActivateKey+0xc4>)
   152da:	4798      	blx	r3
   152dc:	0003      	movs	r3, r0
   152de:	617b      	str	r3, [r7, #20]
    return error;
   152e0:	697b      	ldr	r3, [r7, #20]
}
   152e2:	0018      	movs	r0, r3
   152e4:	46bd      	mov	sp, r7
   152e6:	b007      	add	sp, #28
   152e8:	bd90      	pop	{r4, r7, pc}
   152ea:	46c0      	nop			; (mov r8, r8)
   152ec:	20004694 	.word	0x20004694
   152f0:	00014005 	.word	0x00014005

000152f4 <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   152f4:	b5b0      	push	{r4, r5, r7, lr}
   152f6:	b086      	sub	sp, #24
   152f8:	af00      	add	r7, sp, #0
   152fa:	0005      	movs	r5, r0
   152fc:	000c      	movs	r4, r1
   152fe:	0010      	movs	r0, r2
   15300:	0019      	movs	r1, r3
   15302:	1dfb      	adds	r3, r7, #7
   15304:	1c2a      	adds	r2, r5, #0
   15306:	701a      	strb	r2, [r3, #0]
   15308:	1dbb      	adds	r3, r7, #6
   1530a:	1c22      	adds	r2, r4, #0
   1530c:	701a      	strb	r2, [r3, #0]
   1530e:	1d7b      	adds	r3, r7, #5
   15310:	1c02      	adds	r2, r0, #0
   15312:	701a      	strb	r2, [r3, #0]
   15314:	1d3b      	adds	r3, r7, #4
   15316:	1c0a      	adds	r2, r1, #0
   15318:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   1531a:	2308      	movs	r3, #8
   1531c:	18fb      	adds	r3, r7, r3
   1531e:	220e      	movs	r2, #14
   15320:	701a      	strb	r2, [r3, #0]
   15322:	2308      	movs	r3, #8
   15324:	18fb      	adds	r3, r7, r3
   15326:	2204      	movs	r2, #4
   15328:	705a      	strb	r2, [r3, #1]
   1532a:	2308      	movs	r3, #8
   1532c:	18fb      	adds	r3, r7, r3
   1532e:	2200      	movs	r2, #0
   15330:	709a      	strb	r2, [r3, #2]
   15332:	2308      	movs	r3, #8
   15334:	18fb      	adds	r3, r7, r3
   15336:	2200      	movs	r2, #0
   15338:	70da      	strb	r2, [r3, #3]
   1533a:	2308      	movs	r3, #8
   1533c:	18fb      	adds	r3, r7, r3
   1533e:	1d7a      	adds	r2, r7, #5
   15340:	7812      	ldrb	r2, [r2, #0]
   15342:	711a      	strb	r2, [r3, #4]
   15344:	2308      	movs	r3, #8
   15346:	18fb      	adds	r3, r7, r3
   15348:	1dba      	adds	r2, r7, #6
   1534a:	7812      	ldrb	r2, [r2, #0]
   1534c:	715a      	strb	r2, [r3, #5]
   1534e:	2308      	movs	r3, #8
   15350:	18fb      	adds	r3, r7, r3
   15352:	1d3a      	adds	r2, r7, #4
   15354:	7812      	ldrb	r2, [r2, #0]
   15356:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   15358:	1dfb      	adds	r3, r7, #7
   1535a:	781b      	ldrb	r3, [r3, #0]
   1535c:	b29b      	uxth	r3, r3
   1535e:	2216      	movs	r2, #22
   15360:	18ba      	adds	r2, r7, r2
   15362:	1c19      	adds	r1, r3, #0
   15364:	1c0b      	adds	r3, r1, #0
   15366:	18db      	adds	r3, r3, r3
   15368:	185b      	adds	r3, r3, r1
   1536a:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   1536c:	2316      	movs	r3, #22
   1536e:	18fb      	adds	r3, r7, r3
   15370:	881b      	ldrh	r3, [r3, #0]
   15372:	0a1b      	lsrs	r3, r3, #8
   15374:	b29b      	uxth	r3, r3
   15376:	b2da      	uxtb	r2, r3
   15378:	2308      	movs	r3, #8
   1537a:	18fb      	adds	r3, r7, r3
   1537c:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   1537e:	2316      	movs	r3, #22
   15380:	18fb      	adds	r3, r7, r3
   15382:	881b      	ldrh	r3, [r3, #0]
   15384:	b2da      	uxtb	r2, r3
   15386:	2308      	movs	r3, #8
   15388:	18fb      	adds	r3, r7, r3
   1538a:	70da      	strb	r2, [r3, #3]

    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   1538c:	4b09      	ldr	r3, [pc, #36]	; (153b4 <SeesawSetLed+0xc0>)
   1538e:	2208      	movs	r2, #8
   15390:	18ba      	adds	r2, r7, r2
   15392:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   15394:	4b07      	ldr	r3, [pc, #28]	; (153b4 <SeesawSetLed+0xc0>)
   15396:	2207      	movs	r2, #7
   15398:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   1539a:	4b06      	ldr	r3, [pc, #24]	; (153b4 <SeesawSetLed+0xc0>)
   1539c:	2164      	movs	r1, #100	; 0x64
   1539e:	0018      	movs	r0, r3
   153a0:	4b05      	ldr	r3, [pc, #20]	; (153b8 <SeesawSetLed+0xc4>)
   153a2:	4798      	blx	r3
   153a4:	0003      	movs	r3, r0
   153a6:	613b      	str	r3, [r7, #16]
    return error;
   153a8:	693b      	ldr	r3, [r7, #16]
}
   153aa:	0018      	movs	r0, r3
   153ac:	46bd      	mov	sp, r7
   153ae:	b006      	add	sp, #24
   153b0:	bdb0      	pop	{r4, r5, r7, pc}
   153b2:	46c0      	nop			; (mov r8, r8)
   153b4:	20004694 	.word	0x20004694
   153b8:	00014005 	.word	0x00014005

000153bc <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(void)
{
   153bc:	b580      	push	{r7, lr}
   153be:	b082      	sub	sp, #8
   153c0:	af00      	add	r7, sp, #0
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   153c2:	003b      	movs	r3, r7
   153c4:	4a0a      	ldr	r2, [pc, #40]	; (153f0 <SeesawOrderLedUpdate+0x34>)
   153c6:	8812      	ldrh	r2, [r2, #0]
   153c8:	801a      	strh	r2, [r3, #0]

    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   153ca:	4b0a      	ldr	r3, [pc, #40]	; (153f4 <SeesawOrderLedUpdate+0x38>)
   153cc:	003a      	movs	r2, r7
   153ce:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   153d0:	4b08      	ldr	r3, [pc, #32]	; (153f4 <SeesawOrderLedUpdate+0x38>)
   153d2:	2202      	movs	r2, #2
   153d4:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   153d6:	4b07      	ldr	r3, [pc, #28]	; (153f4 <SeesawOrderLedUpdate+0x38>)
   153d8:	2164      	movs	r1, #100	; 0x64
   153da:	0018      	movs	r0, r3
   153dc:	4b06      	ldr	r3, [pc, #24]	; (153f8 <SeesawOrderLedUpdate+0x3c>)
   153de:	4798      	blx	r3
   153e0:	0003      	movs	r3, r0
   153e2:	607b      	str	r3, [r7, #4]
    return error;
   153e4:	687b      	ldr	r3, [r7, #4]
}
   153e6:	0018      	movs	r0, r3
   153e8:	46bd      	mov	sp, r7
   153ea:	b002      	add	sp, #8
   153ec:	bd80      	pop	{r7, pc}
   153ee:	46c0      	nop			; (mov r8, r8)
   153f0:	00035fd4 	.word	0x00035fd4
   153f4:	20004694 	.word	0x20004694
   153f8:	00014005 	.word	0x00014005

000153fc <SeesawInitializeKeypad>:
/*****************************************************************************************
 *  @brief     Activates a given key on the keypad
 *  @return     Returns any error code found when executing task.
 ****************************************************************************************/
static void SeesawInitializeKeypad(void)
{
   153fc:	b580      	push	{r7, lr}
   153fe:	b082      	sub	sp, #8
   15400:	af00      	add	r7, sp, #0
    seesawData.address = NEO_TRELLIS_ADDR;
   15402:	4b33      	ldr	r3, [pc, #204]	; (154d0 <SeesawInitializeKeypad+0xd4>)
   15404:	222e      	movs	r2, #46	; 0x2e
   15406:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadEnableInt[0];
   15408:	4b31      	ldr	r3, [pc, #196]	; (154d0 <SeesawInitializeKeypad+0xd4>)
   1540a:	4a32      	ldr	r2, [pc, #200]	; (154d4 <SeesawInitializeKeypad+0xd8>)
   1540c:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadEnableInt);
   1540e:	4b30      	ldr	r3, [pc, #192]	; (154d0 <SeesawInitializeKeypad+0xd4>)
   15410:	2203      	movs	r2, #3
   15412:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   15414:	4b2e      	ldr	r3, [pc, #184]	; (154d0 <SeesawInitializeKeypad+0xd4>)
   15416:	2200      	movs	r2, #0
   15418:	819a      	strh	r2, [r3, #12]

    int32_t error = I2cWriteDataWait(&seesawData, 100);
   1541a:	4b2d      	ldr	r3, [pc, #180]	; (154d0 <SeesawInitializeKeypad+0xd4>)
   1541c:	2164      	movs	r1, #100	; 0x64
   1541e:	0018      	movs	r0, r3
   15420:	4b2d      	ldr	r3, [pc, #180]	; (154d8 <SeesawInitializeKeypad+0xdc>)
   15422:	4798      	blx	r3
   15424:	0003      	movs	r3, r0
   15426:	603b      	str	r3, [r7, #0]
    if (ERROR_NONE != error) {
   15428:	683b      	ldr	r3, [r7, #0]
   1542a:	2b00      	cmp	r3, #0
   1542c:	d003      	beq.n	15436 <SeesawInitializeKeypad+0x3a>
        SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   1542e:	4b2b      	ldr	r3, [pc, #172]	; (154dc <SeesawInitializeKeypad+0xe0>)
   15430:	0018      	movs	r0, r3
   15432:	4b2b      	ldr	r3, [pc, #172]	; (154e0 <SeesawInitializeKeypad+0xe4>)
   15434:	4798      	blx	r3
    }

    // Initialize all buttons to register an event for both press and release
    for (int i = 0; i < 16; i++) {
   15436:	2300      	movs	r3, #0
   15438:	607b      	str	r3, [r7, #4]
   1543a:	e041      	b.n	154c0 <SeesawInitializeKeypad+0xc4>
        error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   1543c:	687b      	ldr	r3, [r7, #4]
   1543e:	2b00      	cmp	r3, #0
   15440:	da00      	bge.n	15444 <SeesawInitializeKeypad+0x48>
   15442:	3303      	adds	r3, #3
   15444:	109b      	asrs	r3, r3, #2
   15446:	b2db      	uxtb	r3, r3
   15448:	00db      	lsls	r3, r3, #3
   1544a:	b2da      	uxtb	r2, r3
   1544c:	687b      	ldr	r3, [r7, #4]
   1544e:	4925      	ldr	r1, [pc, #148]	; (154e4 <SeesawInitializeKeypad+0xe8>)
   15450:	400b      	ands	r3, r1
   15452:	d504      	bpl.n	1545e <SeesawInitializeKeypad+0x62>
   15454:	3b01      	subs	r3, #1
   15456:	2104      	movs	r1, #4
   15458:	4249      	negs	r1, r1
   1545a:	430b      	orrs	r3, r1
   1545c:	3301      	adds	r3, #1
   1545e:	b2db      	uxtb	r3, r3
   15460:	18d3      	adds	r3, r2, r3
   15462:	b2db      	uxtb	r3, r3
   15464:	2201      	movs	r2, #1
   15466:	2103      	movs	r1, #3
   15468:	0018      	movs	r0, r3
   1546a:	4b1f      	ldr	r3, [pc, #124]	; (154e8 <SeesawInitializeKeypad+0xec>)
   1546c:	4798      	blx	r3
   1546e:	0003      	movs	r3, r0
   15470:	603b      	str	r3, [r7, #0]
        error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
   15472:	687b      	ldr	r3, [r7, #4]
   15474:	2b00      	cmp	r3, #0
   15476:	da00      	bge.n	1547a <SeesawInitializeKeypad+0x7e>
   15478:	3303      	adds	r3, #3
   1547a:	109b      	asrs	r3, r3, #2
   1547c:	b2db      	uxtb	r3, r3
   1547e:	00db      	lsls	r3, r3, #3
   15480:	b2da      	uxtb	r2, r3
   15482:	687b      	ldr	r3, [r7, #4]
   15484:	4917      	ldr	r1, [pc, #92]	; (154e4 <SeesawInitializeKeypad+0xe8>)
   15486:	400b      	ands	r3, r1
   15488:	d504      	bpl.n	15494 <SeesawInitializeKeypad+0x98>
   1548a:	3b01      	subs	r3, #1
   1548c:	2104      	movs	r1, #4
   1548e:	4249      	negs	r1, r1
   15490:	430b      	orrs	r3, r1
   15492:	3301      	adds	r3, #1
   15494:	b2db      	uxtb	r3, r3
   15496:	18d3      	adds	r3, r2, r3
   15498:	b2db      	uxtb	r3, r3
   1549a:	2201      	movs	r2, #1
   1549c:	2102      	movs	r1, #2
   1549e:	0018      	movs	r0, r3
   154a0:	4b11      	ldr	r3, [pc, #68]	; (154e8 <SeesawInitializeKeypad+0xec>)
   154a2:	4798      	blx	r3
   154a4:	0002      	movs	r2, r0
   154a6:	683b      	ldr	r3, [r7, #0]
   154a8:	4313      	orrs	r3, r2
   154aa:	603b      	str	r3, [r7, #0]
        if (ERROR_NONE != error) {
   154ac:	683b      	ldr	r3, [r7, #0]
   154ae:	2b00      	cmp	r3, #0
   154b0:	d003      	beq.n	154ba <SeesawInitializeKeypad+0xbe>
            SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   154b2:	4b0a      	ldr	r3, [pc, #40]	; (154dc <SeesawInitializeKeypad+0xe0>)
   154b4:	0018      	movs	r0, r3
   154b6:	4b0a      	ldr	r3, [pc, #40]	; (154e0 <SeesawInitializeKeypad+0xe4>)
   154b8:	4798      	blx	r3
    for (int i = 0; i < 16; i++) {
   154ba:	687b      	ldr	r3, [r7, #4]
   154bc:	3301      	adds	r3, #1
   154be:	607b      	str	r3, [r7, #4]
   154c0:	687b      	ldr	r3, [r7, #4]
   154c2:	2b0f      	cmp	r3, #15
   154c4:	ddba      	ble.n	1543c <SeesawInitializeKeypad+0x40>
        }
    }
}
   154c6:	46c0      	nop			; (mov r8, r8)
   154c8:	46bd      	mov	sp, r7
   154ca:	b002      	add	sp, #8
   154cc:	bd80      	pop	{r7, pc}
   154ce:	46c0      	nop			; (mov r8, r8)
   154d0:	20004694 	.word	0x20004694
   154d4:	00035ee4 	.word	0x00035ee4
   154d8:	00014005 	.word	0x00014005
   154dc:	00035fd8 	.word	0x00035fd8
   154e0:	0001d9e5 	.word	0x0001d9e5
   154e4:	80000003 	.word	0x80000003
   154e8:	0001522d 	.word	0x0001522d

000154ec <SeesawTurnOnLedTest>:

static void SeesawTurnOnLedTest(void)
{
   154ec:	b5b0      	push	{r4, r5, r7, lr}
   154ee:	af00      	add	r7, sp, #0
    SeesawSetLed(15, 255, 255, 255);
   154f0:	23ff      	movs	r3, #255	; 0xff
   154f2:	22ff      	movs	r2, #255	; 0xff
   154f4:	21ff      	movs	r1, #255	; 0xff
   154f6:	200f      	movs	r0, #15
   154f8:	4c09      	ldr	r4, [pc, #36]	; (15520 <SeesawTurnOnLedTest+0x34>)
   154fa:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   154fc:	4b09      	ldr	r3, [pc, #36]	; (15524 <SeesawTurnOnLedTest+0x38>)
   154fe:	4798      	blx	r3
    vTaskDelay(400);
   15500:	23c8      	movs	r3, #200	; 0xc8
   15502:	005b      	lsls	r3, r3, #1
   15504:	0018      	movs	r0, r3
   15506:	4b08      	ldr	r3, [pc, #32]	; (15528 <SeesawTurnOnLedTest+0x3c>)
   15508:	4798      	blx	r3

    SeesawSetLed(15, 0, 0, 0);
   1550a:	2300      	movs	r3, #0
   1550c:	2200      	movs	r2, #0
   1550e:	2100      	movs	r1, #0
   15510:	200f      	movs	r0, #15
   15512:	4c03      	ldr	r4, [pc, #12]	; (15520 <SeesawTurnOnLedTest+0x34>)
   15514:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   15516:	4b03      	ldr	r3, [pc, #12]	; (15524 <SeesawTurnOnLedTest+0x38>)
   15518:	4798      	blx	r3
   1551a:	46c0      	nop			; (mov r8, r8)
   1551c:	46bd      	mov	sp, r7
   1551e:	bdb0      	pop	{r4, r5, r7, pc}
   15520:	000152f5 	.word	0x000152f5
   15524:	000153bd 	.word	0x000153bd
   15528:	0001bd91 	.word	0x0001bd91

0001552c <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   1552c:	b590      	push	{r4, r7, lr}
   1552e:	b087      	sub	sp, #28
   15530:	af00      	add	r7, sp, #0
   15532:	6078      	str	r0, [r7, #4]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!");
   15534:	4b8d      	ldr	r3, [pc, #564]	; (1576c <vUiHandlerTask+0x240>)
   15536:	0018      	movs	r0, r3
   15538:	4b8d      	ldr	r3, [pc, #564]	; (15770 <vUiHandlerTask+0x244>)
   1553a:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   1553c:	4b8d      	ldr	r3, [pc, #564]	; (15774 <vUiHandlerTask+0x248>)
   1553e:	2201      	movs	r2, #1
   15540:	701a      	strb	r2, [r3, #0]
	gfx_mono_draw_string("ESE516",0,0, &sysfont);
	*/

    // Here we start the loop for the UI State Machine
    while (1) {
        switch (uiState) {
   15542:	4b8c      	ldr	r3, [pc, #560]	; (15774 <vUiHandlerTask+0x248>)
   15544:	781b      	ldrb	r3, [r3, #0]
   15546:	2b01      	cmp	r3, #1
   15548:	d100      	bne.n	1554c <vUiHandlerTask+0x20>
   1554a:	e107      	b.n	1575c <vUiHandlerTask+0x230>
   1554c:	2b02      	cmp	r3, #2
   1554e:	d002      	beq.n	15556 <vUiHandlerTask+0x2a>
   15550:	2b00      	cmp	r3, #0
   15552:	d06e      	beq.n	15632 <vUiHandlerTask+0x106>
   15554:	e0fe      	b.n	15754 <vUiHandlerTask+0x228>
            }

            case (UI_STATE_SHOW_MOVES): {
                // Set initial state variable that will be used on the
                // UI_STATE_Handle_Buttons and need to be initialized once
                pressedKeys = 0;  // Set number of keys pressed by player to 0.
   15556:	4b88      	ldr	r3, [pc, #544]	; (15778 <vUiHandlerTask+0x24c>)
   15558:	2200      	movs	r2, #0
   1555a:	701a      	strb	r2, [r3, #0]
                keysToPress = 1;  // Set as an example to 1. STUDENTS should change this
   1555c:	4b87      	ldr	r3, [pc, #540]	; (1577c <vUiHandlerTask+0x250>)
   1555e:	2201      	movs	r2, #1
   15560:	701a      	strb	r2, [r3, #0]
                                  // to the number of key presses needed.
                memset(gamePacketOut.game, 0xff,
   15562:	4b87      	ldr	r3, [pc, #540]	; (15780 <vUiHandlerTask+0x254>)
   15564:	2214      	movs	r2, #20
   15566:	21ff      	movs	r1, #255	; 0xff
   15568:	0018      	movs	r0, r3
   1556a:	4b86      	ldr	r3, [pc, #536]	; (15784 <vUiHandlerTask+0x258>)
   1556c:	4798      	blx	r3
                       sizeof(gamePacketOut.game));  // Erase gamePacketOut to an initial state
                playIsDone = false;                  // Set play to false
   1556e:	4b86      	ldr	r3, [pc, #536]	; (15788 <vUiHandlerTask+0x25c>)
   15570:	2200      	movs	r2, #0
   15572:	701a      	strb	r2, [r3, #0]
                uint8_t presses = SeesawGetKeypadCount();
   15574:	2317      	movs	r3, #23
   15576:	18fc      	adds	r4, r7, r3
   15578:	4b84      	ldr	r3, [pc, #528]	; (1578c <vUiHandlerTask+0x260>)
   1557a:	4798      	blx	r3
   1557c:	0003      	movs	r3, r0
   1557e:	7023      	strb	r3, [r4, #0]
                if (presses >= BUTTON_PRESSES_MAX) presses = BUTTON_PRESSES_MAX;
   15580:	2317      	movs	r3, #23
   15582:	18fb      	adds	r3, r7, r3
   15584:	781b      	ldrb	r3, [r3, #0]
   15586:	2b0f      	cmp	r3, #15
   15588:	d903      	bls.n	15592 <vUiHandlerTask+0x66>
   1558a:	2317      	movs	r3, #23
   1558c:	18fb      	adds	r3, r7, r3
   1558e:	2210      	movs	r2, #16
   15590:	701a      	strb	r2, [r3, #0]
                if (presses != 0)
   15592:	2317      	movs	r3, #23
   15594:	18fb      	adds	r3, r7, r3
   15596:	781b      	ldrb	r3, [r3, #0]
   15598:	2b00      	cmp	r3, #0
   1559a:	d007      	beq.n	155ac <vUiHandlerTask+0x80>
                    SeesawReadKeypad(buttons,
   1559c:	2317      	movs	r3, #23
   1559e:	18fb      	adds	r3, r7, r3
   155a0:	781a      	ldrb	r2, [r3, #0]
   155a2:	4b7b      	ldr	r3, [pc, #492]	; (15790 <vUiHandlerTask+0x264>)
   155a4:	0011      	movs	r1, r2
   155a6:	0018      	movs	r0, r3
   155a8:	4b7a      	ldr	r3, [pc, #488]	; (15794 <vUiHandlerTask+0x268>)
   155aa:	4798      	blx	r3
                                     presses);  // Empty Seesaw buffer just in case
                                                // it has latent presses on it!
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   155ac:	4b78      	ldr	r3, [pc, #480]	; (15790 <vUiHandlerTask+0x264>)
   155ae:	2210      	movs	r2, #16
   155b0:	2100      	movs	r1, #0
   155b2:	0018      	movs	r0, r3
   155b4:	4b73      	ldr	r3, [pc, #460]	; (15784 <vUiHandlerTask+0x258>)
   155b6:	4798      	blx	r3
                // the message gets longer might be more fun! After you finish showing
                // the move should go to state UI_STATE_HANDLE_BUTTONS

                // In the beginner example we turn LED0 and LED15 will turn on for 500
                // ms then we go to UI_STATE_HANDLE_BUTTONS
                SeesawSetLed(0, red, green, blue);  // Turn button 1 on
   155b8:	4b77      	ldr	r3, [pc, #476]	; (15798 <vUiHandlerTask+0x26c>)
   155ba:	781b      	ldrb	r3, [r3, #0]
   155bc:	b2d9      	uxtb	r1, r3
   155be:	4b77      	ldr	r3, [pc, #476]	; (1579c <vUiHandlerTask+0x270>)
   155c0:	781b      	ldrb	r3, [r3, #0]
   155c2:	b2da      	uxtb	r2, r3
   155c4:	4b76      	ldr	r3, [pc, #472]	; (157a0 <vUiHandlerTask+0x274>)
   155c6:	781b      	ldrb	r3, [r3, #0]
   155c8:	b2db      	uxtb	r3, r3
   155ca:	2000      	movs	r0, #0
   155cc:	4c75      	ldr	r4, [pc, #468]	; (157a4 <vUiHandlerTask+0x278>)
   155ce:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   155d0:	4b75      	ldr	r3, [pc, #468]	; (157a8 <vUiHandlerTask+0x27c>)
   155d2:	4798      	blx	r3
                vTaskDelay(1000);
   155d4:	23fa      	movs	r3, #250	; 0xfa
   155d6:	009b      	lsls	r3, r3, #2
   155d8:	0018      	movs	r0, r3
   155da:	4b74      	ldr	r3, [pc, #464]	; (157ac <vUiHandlerTask+0x280>)
   155dc:	4798      	blx	r3
                SeesawSetLed(0, 0, 0, 0);            // Turn button 0 off
   155de:	2300      	movs	r3, #0
   155e0:	2200      	movs	r2, #0
   155e2:	2100      	movs	r1, #0
   155e4:	2000      	movs	r0, #0
   155e6:	4c6f      	ldr	r4, [pc, #444]	; (157a4 <vUiHandlerTask+0x278>)
   155e8:	47a0      	blx	r4
                SeesawSetLed(15, red, green, blue);  // Turn button 15 on
   155ea:	4b6b      	ldr	r3, [pc, #428]	; (15798 <vUiHandlerTask+0x26c>)
   155ec:	781b      	ldrb	r3, [r3, #0]
   155ee:	b2d9      	uxtb	r1, r3
   155f0:	4b6a      	ldr	r3, [pc, #424]	; (1579c <vUiHandlerTask+0x270>)
   155f2:	781b      	ldrb	r3, [r3, #0]
   155f4:	b2da      	uxtb	r2, r3
   155f6:	4b6a      	ldr	r3, [pc, #424]	; (157a0 <vUiHandlerTask+0x274>)
   155f8:	781b      	ldrb	r3, [r3, #0]
   155fa:	b2db      	uxtb	r3, r3
   155fc:	200f      	movs	r0, #15
   155fe:	4c69      	ldr	r4, [pc, #420]	; (157a4 <vUiHandlerTask+0x278>)
   15600:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   15602:	4b69      	ldr	r3, [pc, #420]	; (157a8 <vUiHandlerTask+0x27c>)
   15604:	4798      	blx	r3
                vTaskDelay(1000);
   15606:	23fa      	movs	r3, #250	; 0xfa
   15608:	009b      	lsls	r3, r3, #2
   1560a:	0018      	movs	r0, r3
   1560c:	4b67      	ldr	r3, [pc, #412]	; (157ac <vUiHandlerTask+0x280>)
   1560e:	4798      	blx	r3
                SeesawSetLed(15, 0, 0, 0);  // Turn button 15 off
   15610:	2300      	movs	r3, #0
   15612:	2200      	movs	r2, #0
   15614:	2100      	movs	r1, #0
   15616:	200f      	movs	r0, #15
   15618:	4c62      	ldr	r4, [pc, #392]	; (157a4 <vUiHandlerTask+0x278>)
   1561a:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   1561c:	4b62      	ldr	r3, [pc, #392]	; (157a8 <vUiHandlerTask+0x27c>)
   1561e:	4798      	blx	r3
                vTaskDelay(1000);
   15620:	23fa      	movs	r3, #250	; 0xfa
   15622:	009b      	lsls	r3, r3, #2
   15624:	0018      	movs	r0, r3
   15626:	4b61      	ldr	r3, [pc, #388]	; (157ac <vUiHandlerTask+0x280>)
   15628:	4798      	blx	r3
                uiState = UI_STATE_HANDLE_BUTTONS;
   1562a:	4b52      	ldr	r3, [pc, #328]	; (15774 <vUiHandlerTask+0x248>)
   1562c:	2200      	movs	r2, #0
   1562e:	701a      	strb	r2, [r3, #0]

                break;
   15630:	e097      	b.n	15762 <vUiHandlerTask+0x236>
                // should be stored on "gamePacketOut". The keypresses that should count
                // are when the player RELEASES the button.

                // In this example, we return after only one button press!

                uint8_t numPresses = SeesawGetKeypadCount();
   15632:	2316      	movs	r3, #22
   15634:	18fc      	adds	r4, r7, r3
   15636:	4b55      	ldr	r3, [pc, #340]	; (1578c <vUiHandlerTask+0x260>)
   15638:	4798      	blx	r3
   1563a:	0003      	movs	r3, r0
   1563c:	7023      	strb	r3, [r4, #0]
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   1563e:	4b54      	ldr	r3, [pc, #336]	; (15790 <vUiHandlerTask+0x264>)
   15640:	2210      	movs	r2, #16
   15642:	2100      	movs	r1, #0
   15644:	0018      	movs	r0, r3
   15646:	4b4f      	ldr	r3, [pc, #316]	; (15784 <vUiHandlerTask+0x258>)
   15648:	4798      	blx	r3

                if (numPresses >= BUTTON_PRESSES_MAX) {
   1564a:	2316      	movs	r3, #22
   1564c:	18fb      	adds	r3, r7, r3
   1564e:	781b      	ldrb	r3, [r3, #0]
   15650:	2b0f      	cmp	r3, #15
   15652:	d903      	bls.n	1565c <vUiHandlerTask+0x130>
                    numPresses = BUTTON_PRESSES_MAX;
   15654:	2316      	movs	r3, #22
   15656:	18fb      	adds	r3, r7, r3
   15658:	2210      	movs	r2, #16
   1565a:	701a      	strb	r2, [r3, #0]
                }
                if (numPresses != 0 && ERROR_NONE == SeesawReadKeypad(buttons, numPresses)) {
   1565c:	2316      	movs	r3, #22
   1565e:	18fb      	adds	r3, r7, r3
   15660:	781b      	ldrb	r3, [r3, #0]
   15662:	2b00      	cmp	r3, #0
   15664:	d065      	beq.n	15732 <vUiHandlerTask+0x206>
   15666:	2316      	movs	r3, #22
   15668:	18fb      	adds	r3, r7, r3
   1566a:	781a      	ldrb	r2, [r3, #0]
   1566c:	4b48      	ldr	r3, [pc, #288]	; (15790 <vUiHandlerTask+0x264>)
   1566e:	0011      	movs	r1, r2
   15670:	0018      	movs	r0, r3
   15672:	4b48      	ldr	r3, [pc, #288]	; (15794 <vUiHandlerTask+0x268>)
   15674:	4798      	blx	r3
   15676:	1e03      	subs	r3, r0, #0
   15678:	d15b      	bne.n	15732 <vUiHandlerTask+0x206>
                    // Process Buttons
                    for (int iter = 0; iter < numPresses; iter++) {
   1567a:	2300      	movs	r3, #0
   1567c:	613b      	str	r3, [r7, #16]
   1567e:	e050      	b.n	15722 <vUiHandlerTask+0x1f6>
                        uint8_t keynum = NEO_TRELLIS_SEESAW_KEY((buttons[iter] & 0xFD) >> 2);
   15680:	4a43      	ldr	r2, [pc, #268]	; (15790 <vUiHandlerTask+0x264>)
   15682:	693b      	ldr	r3, [r7, #16]
   15684:	18d3      	adds	r3, r2, r3
   15686:	781b      	ldrb	r3, [r3, #0]
   15688:	089b      	lsrs	r3, r3, #2
   1568a:	b2db      	uxtb	r3, r3
   1568c:	2b00      	cmp	r3, #0
   1568e:	da00      	bge.n	15692 <vUiHandlerTask+0x166>
   15690:	3307      	adds	r3, #7
   15692:	10db      	asrs	r3, r3, #3
   15694:	b2db      	uxtb	r3, r3
   15696:	009b      	lsls	r3, r3, #2
   15698:	b2d9      	uxtb	r1, r3
   1569a:	4a3d      	ldr	r2, [pc, #244]	; (15790 <vUiHandlerTask+0x264>)
   1569c:	693b      	ldr	r3, [r7, #16]
   1569e:	18d3      	adds	r3, r2, r3
   156a0:	781b      	ldrb	r3, [r3, #0]
   156a2:	089b      	lsrs	r3, r3, #2
   156a4:	b2db      	uxtb	r3, r3
   156a6:	2207      	movs	r2, #7
   156a8:	4013      	ands	r3, r2
   156aa:	b2da      	uxtb	r2, r3
   156ac:	230f      	movs	r3, #15
   156ae:	18fb      	adds	r3, r7, r3
   156b0:	188a      	adds	r2, r1, r2
   156b2:	701a      	strb	r2, [r3, #0]
                        uint8_t actionButton = buttons[iter] & 0x03;
   156b4:	4a36      	ldr	r2, [pc, #216]	; (15790 <vUiHandlerTask+0x264>)
   156b6:	693b      	ldr	r3, [r7, #16]
   156b8:	18d3      	adds	r3, r2, r3
   156ba:	781a      	ldrb	r2, [r3, #0]
   156bc:	230e      	movs	r3, #14
   156be:	18fb      	adds	r3, r7, r3
   156c0:	2103      	movs	r1, #3
   156c2:	400a      	ands	r2, r1
   156c4:	701a      	strb	r2, [r3, #0]
                        if (actionButton == 0x03) {
   156c6:	230e      	movs	r3, #14
   156c8:	18fb      	adds	r3, r7, r3
   156ca:	781b      	ldrb	r3, [r3, #0]
   156cc:	2b03      	cmp	r3, #3
   156ce:	d10f      	bne.n	156f0 <vUiHandlerTask+0x1c4>
                            SeesawSetLed(keynum, red, green, blue);
   156d0:	4b31      	ldr	r3, [pc, #196]	; (15798 <vUiHandlerTask+0x26c>)
   156d2:	781b      	ldrb	r3, [r3, #0]
   156d4:	b2d9      	uxtb	r1, r3
   156d6:	4b31      	ldr	r3, [pc, #196]	; (1579c <vUiHandlerTask+0x270>)
   156d8:	781b      	ldrb	r3, [r3, #0]
   156da:	b2da      	uxtb	r2, r3
   156dc:	4b30      	ldr	r3, [pc, #192]	; (157a0 <vUiHandlerTask+0x274>)
   156de:	781b      	ldrb	r3, [r3, #0]
   156e0:	b2dc      	uxtb	r4, r3
   156e2:	230f      	movs	r3, #15
   156e4:	18fb      	adds	r3, r7, r3
   156e6:	7818      	ldrb	r0, [r3, #0]
   156e8:	0023      	movs	r3, r4
   156ea:	4c2e      	ldr	r4, [pc, #184]	; (157a4 <vUiHandlerTask+0x278>)
   156ec:	47a0      	blx	r4
   156ee:	e015      	b.n	1571c <vUiHandlerTask+0x1f0>
                        } else {
                            SeesawSetLed(keynum, 0, 0, 0);
   156f0:	230f      	movs	r3, #15
   156f2:	18fb      	adds	r3, r7, r3
   156f4:	7818      	ldrb	r0, [r3, #0]
   156f6:	2300      	movs	r3, #0
   156f8:	2200      	movs	r2, #0
   156fa:	2100      	movs	r1, #0
   156fc:	4c29      	ldr	r4, [pc, #164]	; (157a4 <vUiHandlerTask+0x278>)
   156fe:	47a0      	blx	r4
                            // Button released! Count this into the buttons pressed by user.
                            gamePacketOut.game[pressedKeys] = keynum;
   15700:	4b1d      	ldr	r3, [pc, #116]	; (15778 <vUiHandlerTask+0x24c>)
   15702:	781b      	ldrb	r3, [r3, #0]
   15704:	0019      	movs	r1, r3
   15706:	4b1e      	ldr	r3, [pc, #120]	; (15780 <vUiHandlerTask+0x254>)
   15708:	220f      	movs	r2, #15
   1570a:	18ba      	adds	r2, r7, r2
   1570c:	7812      	ldrb	r2, [r2, #0]
   1570e:	545a      	strb	r2, [r3, r1]
                            pressedKeys++;
   15710:	4b19      	ldr	r3, [pc, #100]	; (15778 <vUiHandlerTask+0x24c>)
   15712:	781b      	ldrb	r3, [r3, #0]
   15714:	3301      	adds	r3, #1
   15716:	b2da      	uxtb	r2, r3
   15718:	4b17      	ldr	r3, [pc, #92]	; (15778 <vUiHandlerTask+0x24c>)
   1571a:	701a      	strb	r2, [r3, #0]
                    for (int iter = 0; iter < numPresses; iter++) {
   1571c:	693b      	ldr	r3, [r7, #16]
   1571e:	3301      	adds	r3, #1
   15720:	613b      	str	r3, [r7, #16]
   15722:	2316      	movs	r3, #22
   15724:	18fb      	adds	r3, r7, r3
   15726:	781a      	ldrb	r2, [r3, #0]
   15728:	693b      	ldr	r3, [r7, #16]
   1572a:	429a      	cmp	r2, r3
   1572c:	dca8      	bgt.n	15680 <vUiHandlerTask+0x154>
                        }
                    }
                    SeesawOrderLedUpdate();
   1572e:	4b1e      	ldr	r3, [pc, #120]	; (157a8 <vUiHandlerTask+0x27c>)
   15730:	4798      	blx	r3
                }

                // Check if we are done!
                if (pressedKeys >= keysToPress || pressedKeys >= GAME_SIZE) {
   15732:	4b11      	ldr	r3, [pc, #68]	; (15778 <vUiHandlerTask+0x24c>)
   15734:	781a      	ldrb	r2, [r3, #0]
   15736:	4b11      	ldr	r3, [pc, #68]	; (1577c <vUiHandlerTask+0x250>)
   15738:	781b      	ldrb	r3, [r3, #0]
   1573a:	429a      	cmp	r2, r3
   1573c:	d203      	bcs.n	15746 <vUiHandlerTask+0x21a>
   1573e:	4b0e      	ldr	r3, [pc, #56]	; (15778 <vUiHandlerTask+0x24c>)
   15740:	781b      	ldrb	r3, [r3, #0]
   15742:	2b13      	cmp	r3, #19
   15744:	d90c      	bls.n	15760 <vUiHandlerTask+0x234>
                    // Tell control gamePacketOut is ready to be send out AND go back to
                    // UI_STATE_IGNORE_PRESSES
                    playIsDone = true;
   15746:	4b10      	ldr	r3, [pc, #64]	; (15788 <vUiHandlerTask+0x25c>)
   15748:	2201      	movs	r2, #1
   1574a:	701a      	strb	r2, [r3, #0]
                    uiState = UI_STATE_IGNORE_PRESSES;
   1574c:	4b09      	ldr	r3, [pc, #36]	; (15774 <vUiHandlerTask+0x248>)
   1574e:	2201      	movs	r2, #1
   15750:	701a      	strb	r2, [r3, #0]
                }

                break;
   15752:	e005      	b.n	15760 <vUiHandlerTask+0x234>
            }

            default:  // In case of unforseen error, it is always good to sent state
                      // machine to an initial state.
                uiState = UI_STATE_HANDLE_BUTTONS;
   15754:	4b07      	ldr	r3, [pc, #28]	; (15774 <vUiHandlerTask+0x248>)
   15756:	2200      	movs	r2, #0
   15758:	701a      	strb	r2, [r3, #0]
                break;
   1575a:	e002      	b.n	15762 <vUiHandlerTask+0x236>
                break;
   1575c:	46c0      	nop			; (mov r8, r8)
   1575e:	e000      	b.n	15762 <vUiHandlerTask+0x236>
                break;
   15760:	46c0      	nop			; (mov r8, r8)
        }

        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   15762:	2032      	movs	r0, #50	; 0x32
   15764:	4b11      	ldr	r3, [pc, #68]	; (157ac <vUiHandlerTask+0x280>)
   15766:	4798      	blx	r3
        switch (uiState) {
   15768:	e6eb      	b.n	15542 <vUiHandlerTask+0x16>
   1576a:	46c0      	nop			; (mov r8, r8)
   1576c:	00035ffc 	.word	0x00035ffc
   15770:	0001d9e5 	.word	0x0001d9e5
   15774:	200046dc 	.word	0x200046dc
   15778:	200004a1 	.word	0x200004a1
   1577c:	200004a2 	.word	0x200004a2
   15780:	200046a4 	.word	0x200046a4
   15784:	0003462f 	.word	0x0003462f
   15788:	200004a3 	.word	0x200004a3
   1578c:	00015141 	.word	0x00015141
   15790:	200046cc 	.word	0x200046cc
   15794:	000151a9 	.word	0x000151a9
   15798:	200004a0 	.word	0x200004a0
   1579c:	20000020 	.word	0x20000020
   157a0:	20000021 	.word	0x20000021
   157a4:	000152f5 	.word	0x000152f5
   157a8:	000153bd 	.word	0x000153bd
   157ac:	0001bd91 	.word	0x0001bd91

000157b0 <UiOrderShowMoves>:

/******************************************************************************
 * Functions
 ******************************************************************************/
void UiOrderShowMoves(struct GameDataPacket *packetIn)
{
   157b0:	b580      	push	{r7, lr}
   157b2:	b082      	sub	sp, #8
   157b4:	af00      	add	r7, sp, #0
   157b6:	6078      	str	r0, [r7, #4]
    memcpy(&gamePacketIn, packetIn, sizeof(gamePacketIn));
   157b8:	4a08      	ldr	r2, [pc, #32]	; (157dc <UiOrderShowMoves+0x2c>)
   157ba:	687b      	ldr	r3, [r7, #4]
   157bc:	0010      	movs	r0, r2
   157be:	0019      	movs	r1, r3
   157c0:	2314      	movs	r3, #20
   157c2:	001a      	movs	r2, r3
   157c4:	4b06      	ldr	r3, [pc, #24]	; (157e0 <UiOrderShowMoves+0x30>)
   157c6:	4798      	blx	r3
    uiState = UI_STATE_SHOW_MOVES;
   157c8:	4b06      	ldr	r3, [pc, #24]	; (157e4 <UiOrderShowMoves+0x34>)
   157ca:	2202      	movs	r2, #2
   157cc:	701a      	strb	r2, [r3, #0]
    playIsDone = false;  // Set play to false
   157ce:	4b06      	ldr	r3, [pc, #24]	; (157e8 <UiOrderShowMoves+0x38>)
   157d0:	2200      	movs	r2, #0
   157d2:	701a      	strb	r2, [r3, #0]
}
   157d4:	46c0      	nop			; (mov r8, r8)
   157d6:	46bd      	mov	sp, r7
   157d8:	b002      	add	sp, #8
   157da:	bd80      	pop	{r7, pc}
   157dc:	200046b8 	.word	0x200046b8
   157e0:	000345f9 	.word	0x000345f9
   157e4:	200046dc 	.word	0x200046dc
   157e8:	200004a3 	.word	0x200004a3

000157ec <UiPlayIsDone>:

bool UiPlayIsDone(void)
{
   157ec:	b580      	push	{r7, lr}
   157ee:	af00      	add	r7, sp, #0
    return playIsDone;
   157f0:	4b02      	ldr	r3, [pc, #8]	; (157fc <UiPlayIsDone+0x10>)
   157f2:	781b      	ldrb	r3, [r3, #0]
}
   157f4:	0018      	movs	r0, r3
   157f6:	46bd      	mov	sp, r7
   157f8:	bd80      	pop	{r7, pc}
   157fa:	46c0      	nop			; (mov r8, r8)
   157fc:	200004a3 	.word	0x200004a3

00015800 <UiGetGamePacketOut>:

struct GameDataPacket *UiGetGamePacketOut(void)
{
   15800:	b580      	push	{r7, lr}
   15802:	af00      	add	r7, sp, #0
    return &gamePacketOut;
   15804:	4b01      	ldr	r3, [pc, #4]	; (1580c <UiGetGamePacketOut+0xc>)
}
   15806:	0018      	movs	r0, r3
   15808:	46bd      	mov	sp, r7
   1580a:	bd80      	pop	{r7, pc}
   1580c:	200046a4 	.word	0x200046a4

00015810 <UIChangeColors>:
 * @return
 * @note

*/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   15810:	b590      	push	{r4, r7, lr}
   15812:	b083      	sub	sp, #12
   15814:	af00      	add	r7, sp, #0
   15816:	0004      	movs	r4, r0
   15818:	0008      	movs	r0, r1
   1581a:	0011      	movs	r1, r2
   1581c:	1dfb      	adds	r3, r7, #7
   1581e:	1c22      	adds	r2, r4, #0
   15820:	701a      	strb	r2, [r3, #0]
   15822:	1dbb      	adds	r3, r7, #6
   15824:	1c02      	adds	r2, r0, #0
   15826:	701a      	strb	r2, [r3, #0]
   15828:	1d7b      	adds	r3, r7, #5
   1582a:	1c0a      	adds	r2, r1, #0
   1582c:	701a      	strb	r2, [r3, #0]
    red = r;
   1582e:	4b08      	ldr	r3, [pc, #32]	; (15850 <UIChangeColors+0x40>)
   15830:	1dfa      	adds	r2, r7, #7
   15832:	7812      	ldrb	r2, [r2, #0]
   15834:	701a      	strb	r2, [r3, #0]
    green = g;
   15836:	4b07      	ldr	r3, [pc, #28]	; (15854 <UIChangeColors+0x44>)
   15838:	1dba      	adds	r2, r7, #6
   1583a:	7812      	ldrb	r2, [r2, #0]
   1583c:	701a      	strb	r2, [r3, #0]
    blue = b;
   1583e:	4b06      	ldr	r3, [pc, #24]	; (15858 <UIChangeColors+0x48>)
   15840:	1d7a      	adds	r2, r7, #5
   15842:	7812      	ldrb	r2, [r2, #0]
   15844:	701a      	strb	r2, [r3, #0]
}
   15846:	46c0      	nop			; (mov r8, r8)
   15848:	46bd      	mov	sp, r7
   1584a:	b003      	add	sp, #12
   1584c:	bd90      	pop	{r4, r7, pc}
   1584e:	46c0      	nop			; (mov r8, r8)
   15850:	200004a0 	.word	0x200004a0
   15854:	20000020 	.word	0x20000020
   15858:	20000021 	.word	0x20000021

0001585c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   1585c:	b580      	push	{r7, lr}
   1585e:	b084      	sub	sp, #16
   15860:	af00      	add	r7, sp, #0
   15862:	0002      	movs	r2, r0
   15864:	1dfb      	adds	r3, r7, #7
   15866:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   15868:	230f      	movs	r3, #15
   1586a:	18fb      	adds	r3, r7, r3
   1586c:	1dfa      	adds	r2, r7, #7
   1586e:	7812      	ldrb	r2, [r2, #0]
   15870:	09d2      	lsrs	r2, r2, #7
   15872:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   15874:	230e      	movs	r3, #14
   15876:	18fb      	adds	r3, r7, r3
   15878:	1dfa      	adds	r2, r7, #7
   1587a:	7812      	ldrb	r2, [r2, #0]
   1587c:	0952      	lsrs	r2, r2, #5
   1587e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   15880:	4b0d      	ldr	r3, [pc, #52]	; (158b8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   15882:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   15884:	230f      	movs	r3, #15
   15886:	18fb      	adds	r3, r7, r3
   15888:	781b      	ldrb	r3, [r3, #0]
   1588a:	2b00      	cmp	r3, #0
   1588c:	d10f      	bne.n	158ae <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1588e:	230f      	movs	r3, #15
   15890:	18fb      	adds	r3, r7, r3
   15892:	781b      	ldrb	r3, [r3, #0]
   15894:	009b      	lsls	r3, r3, #2
   15896:	2210      	movs	r2, #16
   15898:	4694      	mov	ip, r2
   1589a:	44bc      	add	ip, r7
   1589c:	4463      	add	r3, ip
   1589e:	3b08      	subs	r3, #8
   158a0:	681a      	ldr	r2, [r3, #0]
   158a2:	230e      	movs	r3, #14
   158a4:	18fb      	adds	r3, r7, r3
   158a6:	781b      	ldrb	r3, [r3, #0]
   158a8:	01db      	lsls	r3, r3, #7
   158aa:	18d3      	adds	r3, r2, r3
   158ac:	e000      	b.n	158b0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   158ae:	2300      	movs	r3, #0
	}
}
   158b0:	0018      	movs	r0, r3
   158b2:	46bd      	mov	sp, r7
   158b4:	b004      	add	sp, #16
   158b6:	bd80      	pop	{r7, pc}
   158b8:	41004400 	.word	0x41004400

000158bc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   158bc:	b580      	push	{r7, lr}
   158be:	b082      	sub	sp, #8
   158c0:	af00      	add	r7, sp, #0
   158c2:	0002      	movs	r2, r0
   158c4:	1dfb      	adds	r3, r7, #7
   158c6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   158c8:	1dfb      	adds	r3, r7, #7
   158ca:	781b      	ldrb	r3, [r3, #0]
   158cc:	0018      	movs	r0, r3
   158ce:	4b03      	ldr	r3, [pc, #12]	; (158dc <port_get_group_from_gpio_pin+0x20>)
   158d0:	4798      	blx	r3
   158d2:	0003      	movs	r3, r0
}
   158d4:	0018      	movs	r0, r3
   158d6:	46bd      	mov	sp, r7
   158d8:	b002      	add	sp, #8
   158da:	bd80      	pop	{r7, pc}
   158dc:	0001585d 	.word	0x0001585d

000158e0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   158e0:	b580      	push	{r7, lr}
   158e2:	b084      	sub	sp, #16
   158e4:	af00      	add	r7, sp, #0
   158e6:	0002      	movs	r2, r0
   158e8:	1dfb      	adds	r3, r7, #7
   158ea:	701a      	strb	r2, [r3, #0]
   158ec:	1dbb      	adds	r3, r7, #6
   158ee:	1c0a      	adds	r2, r1, #0
   158f0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   158f2:	1dfb      	adds	r3, r7, #7
   158f4:	781b      	ldrb	r3, [r3, #0]
   158f6:	0018      	movs	r0, r3
   158f8:	4b0d      	ldr	r3, [pc, #52]	; (15930 <port_pin_set_output_level+0x50>)
   158fa:	4798      	blx	r3
   158fc:	0003      	movs	r3, r0
   158fe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   15900:	1dfb      	adds	r3, r7, #7
   15902:	781b      	ldrb	r3, [r3, #0]
   15904:	221f      	movs	r2, #31
   15906:	4013      	ands	r3, r2
   15908:	2201      	movs	r2, #1
   1590a:	409a      	lsls	r2, r3
   1590c:	0013      	movs	r3, r2
   1590e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   15910:	1dbb      	adds	r3, r7, #6
   15912:	781b      	ldrb	r3, [r3, #0]
   15914:	2b00      	cmp	r3, #0
   15916:	d003      	beq.n	15920 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   15918:	68fb      	ldr	r3, [r7, #12]
   1591a:	68ba      	ldr	r2, [r7, #8]
   1591c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   1591e:	e002      	b.n	15926 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   15920:	68fb      	ldr	r3, [r7, #12]
   15922:	68ba      	ldr	r2, [r7, #8]
   15924:	615a      	str	r2, [r3, #20]
}
   15926:	46c0      	nop			; (mov r8, r8)
   15928:	46bd      	mov	sp, r7
   1592a:	b004      	add	sp, #16
   1592c:	bd80      	pop	{r7, pc}
   1592e:	46c0      	nop			; (mov r8, r8)
   15930:	000158bd 	.word	0x000158bd

00015934 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   15934:	b580      	push	{r7, lr}
   15936:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   15938:	4b02      	ldr	r3, [pc, #8]	; (15944 <init_state+0x10>)
   1593a:	2200      	movs	r2, #0
   1593c:	701a      	strb	r2, [r3, #0]
}
   1593e:	46c0      	nop			; (mov r8, r8)
   15940:	46bd      	mov	sp, r7
   15942:	bd80      	pop	{r7, pc}
   15944:	200004b9 	.word	0x200004b9

00015948 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   15948:	b580      	push	{r7, lr}
   1594a:	b082      	sub	sp, #8
   1594c:	af00      	add	r7, sp, #0
   1594e:	0002      	movs	r2, r0
   15950:	1dfb      	adds	r3, r7, #7
   15952:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   15954:	1dfb      	adds	r3, r7, #7
   15956:	781b      	ldrb	r3, [r3, #0]
   15958:	b25b      	sxtb	r3, r3
   1595a:	43db      	mvns	r3, r3
   1595c:	b25b      	sxtb	r3, r3
   1595e:	4a06      	ldr	r2, [pc, #24]	; (15978 <clear_state+0x30>)
   15960:	7812      	ldrb	r2, [r2, #0]
   15962:	b252      	sxtb	r2, r2
   15964:	4013      	ands	r3, r2
   15966:	b25b      	sxtb	r3, r3
   15968:	b2da      	uxtb	r2, r3
   1596a:	4b03      	ldr	r3, [pc, #12]	; (15978 <clear_state+0x30>)
   1596c:	701a      	strb	r2, [r3, #0]
}
   1596e:	46c0      	nop			; (mov r8, r8)
   15970:	46bd      	mov	sp, r7
   15972:	b002      	add	sp, #8
   15974:	bd80      	pop	{r7, pc}
   15976:	46c0      	nop			; (mov r8, r8)
   15978:	200004b9 	.word	0x200004b9

0001597c <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   1597c:	b580      	push	{r7, lr}
   1597e:	b082      	sub	sp, #8
   15980:	af00      	add	r7, sp, #0
   15982:	0002      	movs	r2, r0
   15984:	1dfb      	adds	r3, r7, #7
   15986:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   15988:	4b05      	ldr	r3, [pc, #20]	; (159a0 <add_state+0x24>)
   1598a:	781a      	ldrb	r2, [r3, #0]
   1598c:	1dfb      	adds	r3, r7, #7
   1598e:	781b      	ldrb	r3, [r3, #0]
   15990:	4313      	orrs	r3, r2
   15992:	b2da      	uxtb	r2, r3
   15994:	4b02      	ldr	r3, [pc, #8]	; (159a0 <add_state+0x24>)
   15996:	701a      	strb	r2, [r3, #0]
}
   15998:	46c0      	nop			; (mov r8, r8)
   1599a:	46bd      	mov	sp, r7
   1599c:	b002      	add	sp, #8
   1599e:	bd80      	pop	{r7, pc}
   159a0:	200004b9 	.word	0x200004b9

000159a4 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   159a4:	b580      	push	{r7, lr}
   159a6:	b082      	sub	sp, #8
   159a8:	af00      	add	r7, sp, #0
   159aa:	0002      	movs	r2, r0
   159ac:	1dfb      	adds	r3, r7, #7
   159ae:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   159b0:	4b06      	ldr	r3, [pc, #24]	; (159cc <is_state_set+0x28>)
   159b2:	781b      	ldrb	r3, [r3, #0]
   159b4:	1dfa      	adds	r2, r7, #7
   159b6:	7812      	ldrb	r2, [r2, #0]
   159b8:	4013      	ands	r3, r2
   159ba:	b2db      	uxtb	r3, r3
   159bc:	1e5a      	subs	r2, r3, #1
   159be:	4193      	sbcs	r3, r2
   159c0:	b2db      	uxtb	r3, r3
}
   159c2:	0018      	movs	r0, r3
   159c4:	46bd      	mov	sp, r7
   159c6:	b002      	add	sp, #8
   159c8:	bd80      	pop	{r7, pc}
   159ca:	46c0      	nop			; (mov r8, r8)
   159cc:	200004b9 	.word	0x200004b9

000159d0 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   159d0:	b590      	push	{r4, r7, lr}
   159d2:	b085      	sub	sp, #20
   159d4:	af00      	add	r7, sp, #0
   159d6:	6078      	str	r0, [r7, #4]
   159d8:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   159da:	687b      	ldr	r3, [r7, #4]
   159dc:	2b00      	cmp	r3, #0
   159de:	d002      	beq.n	159e6 <is_exist_file+0x16>
   159e0:	683b      	ldr	r3, [r7, #0]
   159e2:	2b00      	cmp	r3, #0
   159e4:	d101      	bne.n	159ea <is_exist_file+0x1a>
        return false;
   159e6:	2300      	movs	r3, #0
   159e8:	e013      	b.n	15a12 <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   159ea:	230f      	movs	r3, #15
   159ec:	18fc      	adds	r4, r7, r3
   159ee:	6839      	ldr	r1, [r7, #0]
   159f0:	4b0a      	ldr	r3, [pc, #40]	; (15a1c <is_exist_file+0x4c>)
   159f2:	2200      	movs	r2, #0
   159f4:	0018      	movs	r0, r3
   159f6:	4b0a      	ldr	r3, [pc, #40]	; (15a20 <is_exist_file+0x50>)
   159f8:	4798      	blx	r3
   159fa:	0003      	movs	r3, r0
   159fc:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   159fe:	4b07      	ldr	r3, [pc, #28]	; (15a1c <is_exist_file+0x4c>)
   15a00:	0018      	movs	r0, r3
   15a02:	4b08      	ldr	r3, [pc, #32]	; (15a24 <is_exist_file+0x54>)
   15a04:	4798      	blx	r3
    return (ret == FR_OK);
   15a06:	230f      	movs	r3, #15
   15a08:	18fb      	adds	r3, r7, r3
   15a0a:	781b      	ldrb	r3, [r3, #0]
   15a0c:	425a      	negs	r2, r3
   15a0e:	4153      	adcs	r3, r2
   15a10:	b2db      	uxtb	r3, r3
}
   15a12:	0018      	movs	r0, r3
   15a14:	46bd      	mov	sp, r7
   15a16:	b005      	add	sp, #20
   15a18:	bd90      	pop	{r4, r7, pc}
   15a1a:	46c0      	nop			; (mov r8, r8)
   15a1c:	200006ec 	.word	0x200006ec
   15a20:	0002d57d 	.word	0x0002d57d
   15a24:	0002df7d 	.word	0x0002df7d

00015a28 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   15a28:	b580      	push	{r7, lr}
   15a2a:	b09e      	sub	sp, #120	; 0x78
   15a2c:	af00      	add	r7, sp, #0
   15a2e:	60f8      	str	r0, [r7, #12]
   15a30:	60b9      	str	r1, [r7, #8]
   15a32:	1dfb      	adds	r3, r7, #7
   15a34:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   15a36:	2376      	movs	r3, #118	; 0x76
   15a38:	18fb      	adds	r3, r7, r3
   15a3a:	2201      	movs	r2, #1
   15a3c:	801a      	strh	r2, [r3, #0]
   15a3e:	2374      	movs	r3, #116	; 0x74
   15a40:	18fb      	adds	r3, r7, r3
   15a42:	2200      	movs	r2, #0
   15a44:	801a      	strh	r2, [r3, #0]
   15a46:	236e      	movs	r3, #110	; 0x6e
   15a48:	18fb      	adds	r3, r7, r3
   15a4a:	2200      	movs	r2, #0
   15a4c:	801a      	strh	r2, [r3, #0]
   15a4e:	2372      	movs	r3, #114	; 0x72
   15a50:	18fb      	adds	r3, r7, r3
   15a52:	2200      	movs	r2, #0
   15a54:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   15a56:	2324      	movs	r3, #36	; 0x24
   15a58:	18fb      	adds	r3, r7, r3
   15a5a:	0018      	movs	r0, r3
   15a5c:	2341      	movs	r3, #65	; 0x41
   15a5e:	001a      	movs	r2, r3
   15a60:	2100      	movs	r1, #0
   15a62:	4b92      	ldr	r3, [pc, #584]	; (15cac <rename_to_unique+0x284>)
   15a64:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   15a66:	2318      	movs	r3, #24
   15a68:	18fb      	adds	r3, r7, r3
   15a6a:	0018      	movs	r0, r3
   15a6c:	2309      	movs	r3, #9
   15a6e:	001a      	movs	r2, r3
   15a70:	2100      	movs	r1, #0
   15a72:	4b8e      	ldr	r3, [pc, #568]	; (15cac <rename_to_unique+0x284>)
   15a74:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   15a76:	2314      	movs	r3, #20
   15a78:	18fb      	adds	r3, r7, r3
   15a7a:	2200      	movs	r2, #0
   15a7c:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   15a7e:	2300      	movs	r3, #0
   15a80:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   15a82:	2371      	movs	r3, #113	; 0x71
   15a84:	18fb      	adds	r3, r7, r3
   15a86:	2200      	movs	r2, #0
   15a88:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   15a8a:	68bb      	ldr	r3, [r7, #8]
   15a8c:	2b00      	cmp	r3, #0
   15a8e:	d101      	bne.n	15a94 <rename_to_unique+0x6c>
        return false;
   15a90:	2300      	movs	r3, #0
   15a92:	e106      	b.n	15ca2 <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   15a94:	68ba      	ldr	r2, [r7, #8]
   15a96:	68fb      	ldr	r3, [r7, #12]
   15a98:	0011      	movs	r1, r2
   15a9a:	0018      	movs	r0, r3
   15a9c:	4b84      	ldr	r3, [pc, #528]	; (15cb0 <rename_to_unique+0x288>)
   15a9e:	4798      	blx	r3
   15aa0:	0003      	movs	r3, r0
   15aa2:	001a      	movs	r2, r3
   15aa4:	2301      	movs	r3, #1
   15aa6:	4053      	eors	r3, r2
   15aa8:	b2db      	uxtb	r3, r3
   15aaa:	2b00      	cmp	r3, #0
   15aac:	d001      	beq.n	15ab2 <rename_to_unique+0x8a>
        return true;
   15aae:	2301      	movs	r3, #1
   15ab0:	e0f7      	b.n	15ca2 <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   15ab2:	68bb      	ldr	r3, [r7, #8]
   15ab4:	0018      	movs	r0, r3
   15ab6:	4b7f      	ldr	r3, [pc, #508]	; (15cb4 <rename_to_unique+0x28c>)
   15ab8:	4798      	blx	r3
   15aba:	0003      	movs	r3, r0
   15abc:	2b40      	cmp	r3, #64	; 0x40
   15abe:	d901      	bls.n	15ac4 <rename_to_unique+0x9c>
        return false;
   15ac0:	2300      	movs	r3, #0
   15ac2:	e0ee      	b.n	15ca2 <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   15ac4:	68bb      	ldr	r3, [r7, #8]
   15ac6:	212e      	movs	r1, #46	; 0x2e
   15ac8:	0018      	movs	r0, r3
   15aca:	4b7b      	ldr	r3, [pc, #492]	; (15cb8 <rename_to_unique+0x290>)
   15acc:	4798      	blx	r3
   15ace:	0003      	movs	r3, r0
   15ad0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   15ad2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   15ad4:	2b00      	cmp	r3, #0
   15ad6:	d052      	beq.n	15b7e <rename_to_unique+0x156>
        ext_len = strlen(p);
   15ad8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   15ada:	0018      	movs	r0, r3
   15adc:	4b75      	ldr	r3, [pc, #468]	; (15cb4 <rename_to_unique+0x28c>)
   15ade:	4798      	blx	r3
   15ae0:	0002      	movs	r2, r0
   15ae2:	236e      	movs	r3, #110	; 0x6e
   15ae4:	18fb      	adds	r3, r7, r3
   15ae6:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   15ae8:	236e      	movs	r3, #110	; 0x6e
   15aea:	18fb      	adds	r3, r7, r3
   15aec:	881b      	ldrh	r3, [r3, #0]
   15aee:	2b07      	cmp	r3, #7
   15af0:	d837      	bhi.n	15b62 <rename_to_unique+0x13a>
            valid_ext = true;
   15af2:	2371      	movs	r3, #113	; 0x71
   15af4:	18fb      	adds	r3, r7, r3
   15af6:	2201      	movs	r2, #1
   15af8:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   15afa:	6eba      	ldr	r2, [r7, #104]	; 0x68
   15afc:	2318      	movs	r3, #24
   15afe:	18fb      	adds	r3, r7, r3
   15b00:	0011      	movs	r1, r2
   15b02:	0018      	movs	r0, r3
   15b04:	4b6d      	ldr	r3, [pc, #436]	; (15cbc <rename_to_unique+0x294>)
   15b06:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   15b08:	68bb      	ldr	r3, [r7, #8]
   15b0a:	0018      	movs	r0, r3
   15b0c:	4b69      	ldr	r3, [pc, #420]	; (15cb4 <rename_to_unique+0x28c>)
   15b0e:	4798      	blx	r3
   15b10:	0002      	movs	r2, r0
   15b12:	236e      	movs	r3, #110	; 0x6e
   15b14:	18fb      	adds	r3, r7, r3
   15b16:	881b      	ldrh	r3, [r3, #0]
   15b18:	1ad3      	subs	r3, r2, r3
   15b1a:	2b3c      	cmp	r3, #60	; 0x3c
   15b1c:	d911      	bls.n	15b42 <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   15b1e:	2374      	movs	r3, #116	; 0x74
   15b20:	18fb      	adds	r3, r7, r3
   15b22:	226e      	movs	r2, #110	; 0x6e
   15b24:	18ba      	adds	r2, r7, r2
   15b26:	8812      	ldrh	r2, [r2, #0]
   15b28:	213c      	movs	r1, #60	; 0x3c
   15b2a:	1a8a      	subs	r2, r1, r2
   15b2c:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   15b2e:	2374      	movs	r3, #116	; 0x74
   15b30:	18fb      	adds	r3, r7, r3
   15b32:	881a      	ldrh	r2, [r3, #0]
   15b34:	68b9      	ldr	r1, [r7, #8]
   15b36:	2324      	movs	r3, #36	; 0x24
   15b38:	18fb      	adds	r3, r7, r3
   15b3a:	0018      	movs	r0, r3
   15b3c:	4b60      	ldr	r3, [pc, #384]	; (15cc0 <rename_to_unique+0x298>)
   15b3e:	4798      	blx	r3
   15b40:	e02a      	b.n	15b98 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   15b42:	6eba      	ldr	r2, [r7, #104]	; 0x68
   15b44:	68bb      	ldr	r3, [r7, #8]
   15b46:	1ad2      	subs	r2, r2, r3
   15b48:	2374      	movs	r3, #116	; 0x74
   15b4a:	18fb      	adds	r3, r7, r3
   15b4c:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   15b4e:	2374      	movs	r3, #116	; 0x74
   15b50:	18fb      	adds	r3, r7, r3
   15b52:	881a      	ldrh	r2, [r3, #0]
   15b54:	68b9      	ldr	r1, [r7, #8]
   15b56:	2324      	movs	r3, #36	; 0x24
   15b58:	18fb      	adds	r3, r7, r3
   15b5a:	0018      	movs	r0, r3
   15b5c:	4b58      	ldr	r3, [pc, #352]	; (15cc0 <rename_to_unique+0x298>)
   15b5e:	4798      	blx	r3
   15b60:	e01a      	b.n	15b98 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   15b62:	2374      	movs	r3, #116	; 0x74
   15b64:	18fb      	adds	r3, r7, r3
   15b66:	223c      	movs	r2, #60	; 0x3c
   15b68:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   15b6a:	2374      	movs	r3, #116	; 0x74
   15b6c:	18fb      	adds	r3, r7, r3
   15b6e:	881a      	ldrh	r2, [r3, #0]
   15b70:	68b9      	ldr	r1, [r7, #8]
   15b72:	2324      	movs	r3, #36	; 0x24
   15b74:	18fb      	adds	r3, r7, r3
   15b76:	0018      	movs	r0, r3
   15b78:	4b51      	ldr	r3, [pc, #324]	; (15cc0 <rename_to_unique+0x298>)
   15b7a:	4798      	blx	r3
   15b7c:	e00c      	b.n	15b98 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   15b7e:	2374      	movs	r3, #116	; 0x74
   15b80:	18fb      	adds	r3, r7, r3
   15b82:	223c      	movs	r2, #60	; 0x3c
   15b84:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   15b86:	2374      	movs	r3, #116	; 0x74
   15b88:	18fb      	adds	r3, r7, r3
   15b8a:	881a      	ldrh	r2, [r3, #0]
   15b8c:	68b9      	ldr	r1, [r7, #8]
   15b8e:	2324      	movs	r3, #36	; 0x24
   15b90:	18fb      	adds	r3, r7, r3
   15b92:	0018      	movs	r0, r3
   15b94:	4b4a      	ldr	r3, [pc, #296]	; (15cc0 <rename_to_unique+0x298>)
   15b96:	4798      	blx	r3
    }

    name[name_len++] = '-';
   15b98:	2374      	movs	r3, #116	; 0x74
   15b9a:	18fb      	adds	r3, r7, r3
   15b9c:	881b      	ldrh	r3, [r3, #0]
   15b9e:	2274      	movs	r2, #116	; 0x74
   15ba0:	18ba      	adds	r2, r7, r2
   15ba2:	1c59      	adds	r1, r3, #1
   15ba4:	8011      	strh	r1, [r2, #0]
   15ba6:	001a      	movs	r2, r3
   15ba8:	2324      	movs	r3, #36	; 0x24
   15baa:	18fb      	adds	r3, r7, r3
   15bac:	212d      	movs	r1, #45	; 0x2d
   15bae:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   15bb0:	2376      	movs	r3, #118	; 0x76
   15bb2:	18fb      	adds	r3, r7, r3
   15bb4:	2200      	movs	r2, #0
   15bb6:	801a      	strh	r2, [r3, #0]
   15bb8:	2372      	movs	r3, #114	; 0x72
   15bba:	18fb      	adds	r3, r7, r3
   15bbc:	2201      	movs	r2, #1
   15bbe:	801a      	strh	r2, [r3, #0]
   15bc0:	e010      	b.n	15be4 <rename_to_unique+0x1bc>
        count *= 10;
   15bc2:	2372      	movs	r3, #114	; 0x72
   15bc4:	18fa      	adds	r2, r7, r3
   15bc6:	2372      	movs	r3, #114	; 0x72
   15bc8:	18fb      	adds	r3, r7, r3
   15bca:	881b      	ldrh	r3, [r3, #0]
   15bcc:	1c19      	adds	r1, r3, #0
   15bce:	0089      	lsls	r1, r1, #2
   15bd0:	18cb      	adds	r3, r1, r3
   15bd2:	18db      	adds	r3, r3, r3
   15bd4:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   15bd6:	2376      	movs	r3, #118	; 0x76
   15bd8:	18fb      	adds	r3, r7, r3
   15bda:	881a      	ldrh	r2, [r3, #0]
   15bdc:	2376      	movs	r3, #118	; 0x76
   15bde:	18fb      	adds	r3, r7, r3
   15be0:	3201      	adds	r2, #1
   15be2:	801a      	strh	r2, [r3, #0]
   15be4:	2376      	movs	r3, #118	; 0x76
   15be6:	18fb      	adds	r3, r7, r3
   15be8:	881b      	ldrh	r3, [r3, #0]
   15bea:	2b02      	cmp	r3, #2
   15bec:	d9e9      	bls.n	15bc2 <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   15bee:	2376      	movs	r3, #118	; 0x76
   15bf0:	18fb      	adds	r3, r7, r3
   15bf2:	2201      	movs	r2, #1
   15bf4:	801a      	strh	r2, [r3, #0]
   15bf6:	e04b      	b.n	15c90 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   15bf8:	2376      	movs	r3, #118	; 0x76
   15bfa:	18fb      	adds	r3, r7, r3
   15bfc:	881a      	ldrh	r2, [r3, #0]
   15bfe:	4931      	ldr	r1, [pc, #196]	; (15cc4 <rename_to_unique+0x29c>)
   15c00:	2314      	movs	r3, #20
   15c02:	18fb      	adds	r3, r7, r3
   15c04:	0018      	movs	r0, r3
   15c06:	4b30      	ldr	r3, [pc, #192]	; (15cc8 <rename_to_unique+0x2a0>)
   15c08:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   15c0a:	2374      	movs	r3, #116	; 0x74
   15c0c:	18fb      	adds	r3, r7, r3
   15c0e:	881b      	ldrh	r3, [r3, #0]
   15c10:	2224      	movs	r2, #36	; 0x24
   15c12:	18ba      	adds	r2, r7, r2
   15c14:	18d3      	adds	r3, r2, r3
   15c16:	2214      	movs	r2, #20
   15c18:	18b9      	adds	r1, r7, r2
   15c1a:	2203      	movs	r2, #3
   15c1c:	0018      	movs	r0, r3
   15c1e:	4b28      	ldr	r3, [pc, #160]	; (15cc0 <rename_to_unique+0x298>)
   15c20:	4798      	blx	r3
        if (valid_ext) {
   15c22:	2371      	movs	r3, #113	; 0x71
   15c24:	18fb      	adds	r3, r7, r3
   15c26:	781b      	ldrb	r3, [r3, #0]
   15c28:	2b00      	cmp	r3, #0
   15c2a:	d00c      	beq.n	15c46 <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   15c2c:	2374      	movs	r3, #116	; 0x74
   15c2e:	18fb      	adds	r3, r7, r3
   15c30:	881b      	ldrh	r3, [r3, #0]
   15c32:	3303      	adds	r3, #3
   15c34:	2224      	movs	r2, #36	; 0x24
   15c36:	18ba      	adds	r2, r7, r2
   15c38:	18d3      	adds	r3, r2, r3
   15c3a:	2218      	movs	r2, #24
   15c3c:	18ba      	adds	r2, r7, r2
   15c3e:	0011      	movs	r1, r2
   15c40:	0018      	movs	r0, r3
   15c42:	4b1e      	ldr	r3, [pc, #120]	; (15cbc <rename_to_unique+0x294>)
   15c44:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   15c46:	2324      	movs	r3, #36	; 0x24
   15c48:	18fa      	adds	r2, r7, r3
   15c4a:	68fb      	ldr	r3, [r7, #12]
   15c4c:	0011      	movs	r1, r2
   15c4e:	0018      	movs	r0, r3
   15c50:	4b17      	ldr	r3, [pc, #92]	; (15cb0 <rename_to_unique+0x288>)
   15c52:	4798      	blx	r3
   15c54:	0003      	movs	r3, r0
   15c56:	001a      	movs	r2, r3
   15c58:	2301      	movs	r3, #1
   15c5a:	4053      	eors	r3, r2
   15c5c:	b2db      	uxtb	r3, r3
   15c5e:	2b00      	cmp	r3, #0
   15c60:	d00f      	beq.n	15c82 <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   15c62:	1dfb      	adds	r3, r7, #7
   15c64:	781a      	ldrb	r2, [r3, #0]
   15c66:	68bb      	ldr	r3, [r7, #8]
   15c68:	2100      	movs	r1, #0
   15c6a:	0018      	movs	r0, r3
   15c6c:	4b0f      	ldr	r3, [pc, #60]	; (15cac <rename_to_unique+0x284>)
   15c6e:	4798      	blx	r3
            strcpy(file_path_name, name);
   15c70:	2324      	movs	r3, #36	; 0x24
   15c72:	18fa      	adds	r2, r7, r3
   15c74:	68bb      	ldr	r3, [r7, #8]
   15c76:	0011      	movs	r1, r2
   15c78:	0018      	movs	r0, r3
   15c7a:	4b10      	ldr	r3, [pc, #64]	; (15cbc <rename_to_unique+0x294>)
   15c7c:	4798      	blx	r3
            return true;
   15c7e:	2301      	movs	r3, #1
   15c80:	e00f      	b.n	15ca2 <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   15c82:	2376      	movs	r3, #118	; 0x76
   15c84:	18fb      	adds	r3, r7, r3
   15c86:	881a      	ldrh	r2, [r3, #0]
   15c88:	2376      	movs	r3, #118	; 0x76
   15c8a:	18fb      	adds	r3, r7, r3
   15c8c:	3201      	adds	r2, #1
   15c8e:	801a      	strh	r2, [r3, #0]
   15c90:	2376      	movs	r3, #118	; 0x76
   15c92:	18fa      	adds	r2, r7, r3
   15c94:	2372      	movs	r3, #114	; 0x72
   15c96:	18fb      	adds	r3, r7, r3
   15c98:	8812      	ldrh	r2, [r2, #0]
   15c9a:	881b      	ldrh	r3, [r3, #0]
   15c9c:	429a      	cmp	r2, r3
   15c9e:	d3ab      	bcc.n	15bf8 <rename_to_unique+0x1d0>
        }
    }
    return false;
   15ca0:	2300      	movs	r3, #0
}
   15ca2:	0018      	movs	r0, r3
   15ca4:	46bd      	mov	sp, r7
   15ca6:	b01e      	add	sp, #120	; 0x78
   15ca8:	bd80      	pop	{r7, pc}
   15caa:	46c0      	nop			; (mov r8, r8)
   15cac:	0003462f 	.word	0x0003462f
   15cb0:	000159d1 	.word	0x000159d1
   15cb4:	000349e7 	.word	0x000349e7
   15cb8:	00034a41 	.word	0x00034a41
   15cbc:	0003499b 	.word	0x0003499b
   15cc0:	00034a17 	.word	0x00034a17
   15cc4:	00036024 	.word	0x00036024
   15cc8:	000348ed 	.word	0x000348ed

00015ccc <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   15ccc:	b590      	push	{r4, r7, lr}
   15cce:	b083      	sub	sp, #12
   15cd0:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   15cd2:	2001      	movs	r0, #1
   15cd4:	4b22      	ldr	r3, [pc, #136]	; (15d60 <start_download+0x94>)
   15cd6:	4798      	blx	r3
   15cd8:	0003      	movs	r3, r0
   15cda:	001a      	movs	r2, r3
   15cdc:	2301      	movs	r3, #1
   15cde:	4053      	eors	r3, r2
   15ce0:	b2db      	uxtb	r3, r3
   15ce2:	2b00      	cmp	r3, #0
   15ce4:	d005      	beq.n	15cf2 <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   15ce6:	4b1f      	ldr	r3, [pc, #124]	; (15d64 <start_download+0x98>)
   15ce8:	0019      	movs	r1, r3
   15cea:	2001      	movs	r0, #1
   15cec:	4b1e      	ldr	r3, [pc, #120]	; (15d68 <start_download+0x9c>)
   15cee:	4798      	blx	r3
        return;
   15cf0:	e032      	b.n	15d58 <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   15cf2:	2002      	movs	r0, #2
   15cf4:	4b1a      	ldr	r3, [pc, #104]	; (15d60 <start_download+0x94>)
   15cf6:	4798      	blx	r3
   15cf8:	0003      	movs	r3, r0
   15cfa:	001a      	movs	r2, r3
   15cfc:	2301      	movs	r3, #1
   15cfe:	4053      	eors	r3, r2
   15d00:	b2db      	uxtb	r3, r3
   15d02:	2b00      	cmp	r3, #0
   15d04:	d005      	beq.n	15d12 <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   15d06:	4b19      	ldr	r3, [pc, #100]	; (15d6c <start_download+0xa0>)
   15d08:	0019      	movs	r1, r3
   15d0a:	2001      	movs	r0, #1
   15d0c:	4b16      	ldr	r3, [pc, #88]	; (15d68 <start_download+0x9c>)
   15d0e:	4798      	blx	r3
        return;
   15d10:	e022      	b.n	15d58 <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   15d12:	2004      	movs	r0, #4
   15d14:	4b12      	ldr	r3, [pc, #72]	; (15d60 <start_download+0x94>)
   15d16:	4798      	blx	r3
   15d18:	1e03      	subs	r3, r0, #0
   15d1a:	d005      	beq.n	15d28 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   15d1c:	4b14      	ldr	r3, [pc, #80]	; (15d70 <start_download+0xa4>)
   15d1e:	0019      	movs	r1, r3
   15d20:	2001      	movs	r0, #1
   15d22:	4b11      	ldr	r3, [pc, #68]	; (15d68 <start_download+0x9c>)
   15d24:	4798      	blx	r3
        return;
   15d26:	e017      	b.n	15d58 <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   15d28:	2008      	movs	r0, #8
   15d2a:	4b0d      	ldr	r3, [pc, #52]	; (15d60 <start_download+0x94>)
   15d2c:	4798      	blx	r3
   15d2e:	1e03      	subs	r3, r0, #0
   15d30:	d005      	beq.n	15d3e <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   15d32:	4b10      	ldr	r3, [pc, #64]	; (15d74 <start_download+0xa8>)
   15d34:	0019      	movs	r1, r3
   15d36:	2001      	movs	r0, #1
   15d38:	4b0b      	ldr	r3, [pc, #44]	; (15d68 <start_download+0x9c>)
   15d3a:	4798      	blx	r3
        return;
   15d3c:	e00c      	b.n	15d58 <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   15d3e:	4b0e      	ldr	r3, [pc, #56]	; (15d78 <start_download+0xac>)
   15d40:	0019      	movs	r1, r3
   15d42:	2001      	movs	r0, #1
   15d44:	4b08      	ldr	r3, [pc, #32]	; (15d68 <start_download+0x9c>)
   15d46:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   15d48:	490c      	ldr	r1, [pc, #48]	; (15d7c <start_download+0xb0>)
   15d4a:	480d      	ldr	r0, [pc, #52]	; (15d80 <start_download+0xb4>)
   15d4c:	2300      	movs	r3, #0
   15d4e:	9300      	str	r3, [sp, #0]
   15d50:	2300      	movs	r3, #0
   15d52:	2201      	movs	r2, #1
   15d54:	4c0b      	ldr	r4, [pc, #44]	; (15d84 <start_download+0xb8>)
   15d56:	47a0      	blx	r4
}
   15d58:	46bd      	mov	sp, r7
   15d5a:	b001      	add	sp, #4
   15d5c:	bd90      	pop	{r4, r7, pc}
   15d5e:	46c0      	nop			; (mov r8, r8)
   15d60:	000159a5 	.word	0x000159a5
   15d64:	0003602c 	.word	0x0003602c
   15d68:	0001dad1 	.word	0x0001dad1
   15d6c:	00036058 	.word	0x00036058
   15d70:	00036084 	.word	0x00036084
   15d74:	000360b0 	.word	0x000360b0
   15d78:	000360dc 	.word	0x000360dc
   15d7c:	00036108 	.word	0x00036108
   15d80:	20004738 	.word	0x20004738
   15d84:	00030bd1 	.word	0x00030bd1

00015d88 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   15d88:	b5b0      	push	{r4, r5, r7, lr}
   15d8a:	b086      	sub	sp, #24
   15d8c:	af00      	add	r7, sp, #0
   15d8e:	6078      	str	r0, [r7, #4]
   15d90:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   15d92:	687b      	ldr	r3, [r7, #4]
   15d94:	2b00      	cmp	r3, #0
   15d96:	d002      	beq.n	15d9e <store_file_packet+0x16>
   15d98:	683b      	ldr	r3, [r7, #0]
   15d9a:	2b00      	cmp	r3, #0
   15d9c:	d105      	bne.n	15daa <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   15d9e:	4b58      	ldr	r3, [pc, #352]	; (15f00 <store_file_packet+0x178>)
   15da0:	0019      	movs	r1, r3
   15da2:	2001      	movs	r0, #1
   15da4:	4b57      	ldr	r3, [pc, #348]	; (15f04 <store_file_packet+0x17c>)
   15da6:	4798      	blx	r3
        return;
   15da8:	e0a6      	b.n	15ef8 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   15daa:	2008      	movs	r0, #8
   15dac:	4b56      	ldr	r3, [pc, #344]	; (15f08 <store_file_packet+0x180>)
   15dae:	4798      	blx	r3
   15db0:	0003      	movs	r3, r0
   15db2:	001a      	movs	r2, r3
   15db4:	2301      	movs	r3, #1
   15db6:	4053      	eors	r3, r2
   15db8:	b2db      	uxtb	r3, r3
   15dba:	2b00      	cmp	r3, #0
   15dbc:	d055      	beq.n	15e6a <store_file_packet+0xe2>
        char *cp = NULL;
   15dbe:	2300      	movs	r3, #0
   15dc0:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   15dc2:	4b52      	ldr	r3, [pc, #328]	; (15f0c <store_file_packet+0x184>)
   15dc4:	2230      	movs	r2, #48	; 0x30
   15dc6:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   15dc8:	4b50      	ldr	r3, [pc, #320]	; (15f0c <store_file_packet+0x184>)
   15dca:	223a      	movs	r2, #58	; 0x3a
   15dcc:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   15dce:	4b50      	ldr	r3, [pc, #320]	; (15f10 <store_file_packet+0x188>)
   15dd0:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   15dd2:	e002      	b.n	15dda <store_file_packet+0x52>
            cp--;
   15dd4:	697b      	ldr	r3, [r7, #20]
   15dd6:	3b01      	subs	r3, #1
   15dd8:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   15dda:	697b      	ldr	r3, [r7, #20]
   15ddc:	781b      	ldrb	r3, [r3, #0]
   15dde:	2b2f      	cmp	r3, #47	; 0x2f
   15de0:	d1f8      	bne.n	15dd4 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   15de2:	697b      	ldr	r3, [r7, #20]
   15de4:	0018      	movs	r0, r3
   15de6:	4b4b      	ldr	r3, [pc, #300]	; (15f14 <store_file_packet+0x18c>)
   15de8:	4798      	blx	r3
   15dea:	0003      	movs	r3, r0
   15dec:	2b01      	cmp	r3, #1
   15dee:	d924      	bls.n	15e3a <store_file_packet+0xb2>
            cp++;
   15df0:	697b      	ldr	r3, [r7, #20]
   15df2:	3301      	adds	r3, #1
   15df4:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   15df6:	697a      	ldr	r2, [r7, #20]
   15df8:	4b47      	ldr	r3, [pc, #284]	; (15f18 <store_file_packet+0x190>)
   15dfa:	0011      	movs	r1, r2
   15dfc:	0018      	movs	r0, r3
   15dfe:	4b47      	ldr	r3, [pc, #284]	; (15f1c <store_file_packet+0x194>)
   15e00:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   15e02:	4942      	ldr	r1, [pc, #264]	; (15f0c <store_file_packet+0x184>)
   15e04:	4b46      	ldr	r3, [pc, #280]	; (15f20 <store_file_packet+0x198>)
   15e06:	2240      	movs	r2, #64	; 0x40
   15e08:	0018      	movs	r0, r3
   15e0a:	4b46      	ldr	r3, [pc, #280]	; (15f24 <store_file_packet+0x19c>)
   15e0c:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   15e0e:	4a3f      	ldr	r2, [pc, #252]	; (15f0c <store_file_packet+0x184>)
   15e10:	4b45      	ldr	r3, [pc, #276]	; (15f28 <store_file_packet+0x1a0>)
   15e12:	0019      	movs	r1, r3
   15e14:	2001      	movs	r0, #1
   15e16:	4b3b      	ldr	r3, [pc, #236]	; (15f04 <store_file_packet+0x17c>)
   15e18:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   15e1a:	2313      	movs	r3, #19
   15e1c:	18fc      	adds	r4, r7, r3
   15e1e:	493b      	ldr	r1, [pc, #236]	; (15f0c <store_file_packet+0x184>)
   15e20:	4b3f      	ldr	r3, [pc, #252]	; (15f20 <store_file_packet+0x198>)
   15e22:	220a      	movs	r2, #10
   15e24:	0018      	movs	r0, r3
   15e26:	4b41      	ldr	r3, [pc, #260]	; (15f2c <store_file_packet+0x1a4>)
   15e28:	4798      	blx	r3
   15e2a:	0003      	movs	r3, r0
   15e2c:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   15e2e:	2313      	movs	r3, #19
   15e30:	18fb      	adds	r3, r7, r3
   15e32:	781b      	ldrb	r3, [r3, #0]
   15e34:	2b00      	cmp	r3, #0
   15e36:	d012      	beq.n	15e5e <store_file_packet+0xd6>
   15e38:	e008      	b.n	15e4c <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   15e3a:	4b3d      	ldr	r3, [pc, #244]	; (15f30 <store_file_packet+0x1a8>)
   15e3c:	0019      	movs	r1, r3
   15e3e:	2001      	movs	r0, #1
   15e40:	4b30      	ldr	r3, [pc, #192]	; (15f04 <store_file_packet+0x17c>)
   15e42:	4798      	blx	r3
            add_state(CANCELED);
   15e44:	2020      	movs	r0, #32
   15e46:	4b3b      	ldr	r3, [pc, #236]	; (15f34 <store_file_packet+0x1ac>)
   15e48:	4798      	blx	r3
            return;
   15e4a:	e055      	b.n	15ef8 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   15e4c:	2313      	movs	r3, #19
   15e4e:	18fb      	adds	r3, r7, r3
   15e50:	781a      	ldrb	r2, [r3, #0]
   15e52:	4b39      	ldr	r3, [pc, #228]	; (15f38 <store_file_packet+0x1b0>)
   15e54:	0019      	movs	r1, r3
   15e56:	2001      	movs	r0, #1
   15e58:	4b2a      	ldr	r3, [pc, #168]	; (15f04 <store_file_packet+0x17c>)
   15e5a:	4798      	blx	r3
            return;
   15e5c:	e04c      	b.n	15ef8 <store_file_packet+0x170>
        }

        received_file_size = 0;
   15e5e:	4b37      	ldr	r3, [pc, #220]	; (15f3c <store_file_packet+0x1b4>)
   15e60:	2200      	movs	r2, #0
   15e62:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   15e64:	2008      	movs	r0, #8
   15e66:	4b33      	ldr	r3, [pc, #204]	; (15f34 <store_file_packet+0x1ac>)
   15e68:	4798      	blx	r3
    }

    if (data != NULL) {
   15e6a:	687b      	ldr	r3, [r7, #4]
   15e6c:	2b00      	cmp	r3, #0
   15e6e:	d043      	beq.n	15ef8 <store_file_packet+0x170>
        UINT wsize = 0;
   15e70:	2300      	movs	r3, #0
   15e72:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   15e74:	2313      	movs	r3, #19
   15e76:	18fc      	adds	r4, r7, r3
   15e78:	230c      	movs	r3, #12
   15e7a:	18fb      	adds	r3, r7, r3
   15e7c:	683a      	ldr	r2, [r7, #0]
   15e7e:	6879      	ldr	r1, [r7, #4]
   15e80:	4827      	ldr	r0, [pc, #156]	; (15f20 <store_file_packet+0x198>)
   15e82:	4d2f      	ldr	r5, [pc, #188]	; (15f40 <store_file_packet+0x1b8>)
   15e84:	47a8      	blx	r5
   15e86:	0003      	movs	r3, r0
   15e88:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   15e8a:	2313      	movs	r3, #19
   15e8c:	18fb      	adds	r3, r7, r3
   15e8e:	781b      	ldrb	r3, [r3, #0]
   15e90:	2b00      	cmp	r3, #0
   15e92:	d00c      	beq.n	15eae <store_file_packet+0x126>
            f_close(&file_object);
   15e94:	4b22      	ldr	r3, [pc, #136]	; (15f20 <store_file_packet+0x198>)
   15e96:	0018      	movs	r0, r3
   15e98:	4b2a      	ldr	r3, [pc, #168]	; (15f44 <store_file_packet+0x1bc>)
   15e9a:	4798      	blx	r3
            add_state(CANCELED);
   15e9c:	2020      	movs	r0, #32
   15e9e:	4b25      	ldr	r3, [pc, #148]	; (15f34 <store_file_packet+0x1ac>)
   15ea0:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   15ea2:	4b29      	ldr	r3, [pc, #164]	; (15f48 <store_file_packet+0x1c0>)
   15ea4:	0019      	movs	r1, r3
   15ea6:	2001      	movs	r0, #1
   15ea8:	4b16      	ldr	r3, [pc, #88]	; (15f04 <store_file_packet+0x17c>)
   15eaa:	4798      	blx	r3
            return;
   15eac:	e024      	b.n	15ef8 <store_file_packet+0x170>
        }

        received_file_size += wsize;
   15eae:	4b23      	ldr	r3, [pc, #140]	; (15f3c <store_file_packet+0x1b4>)
   15eb0:	681a      	ldr	r2, [r3, #0]
   15eb2:	68fb      	ldr	r3, [r7, #12]
   15eb4:	18d2      	adds	r2, r2, r3
   15eb6:	4b21      	ldr	r3, [pc, #132]	; (15f3c <store_file_packet+0x1b4>)
   15eb8:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   15eba:	4b20      	ldr	r3, [pc, #128]	; (15f3c <store_file_packet+0x1b4>)
   15ebc:	681a      	ldr	r2, [r3, #0]
   15ebe:	4b23      	ldr	r3, [pc, #140]	; (15f4c <store_file_packet+0x1c4>)
   15ec0:	681b      	ldr	r3, [r3, #0]
   15ec2:	4923      	ldr	r1, [pc, #140]	; (15f50 <store_file_packet+0x1c8>)
   15ec4:	2001      	movs	r0, #1
   15ec6:	4c0f      	ldr	r4, [pc, #60]	; (15f04 <store_file_packet+0x17c>)
   15ec8:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   15eca:	4b1c      	ldr	r3, [pc, #112]	; (15f3c <store_file_packet+0x1b4>)
   15ecc:	681a      	ldr	r2, [r3, #0]
   15ece:	4b1f      	ldr	r3, [pc, #124]	; (15f4c <store_file_packet+0x1c4>)
   15ed0:	681b      	ldr	r3, [r3, #0]
   15ed2:	429a      	cmp	r2, r3
   15ed4:	d310      	bcc.n	15ef8 <store_file_packet+0x170>
            f_close(&file_object);
   15ed6:	4b12      	ldr	r3, [pc, #72]	; (15f20 <store_file_packet+0x198>)
   15ed8:	0018      	movs	r0, r3
   15eda:	4b1a      	ldr	r3, [pc, #104]	; (15f44 <store_file_packet+0x1bc>)
   15edc:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   15ede:	4b1d      	ldr	r3, [pc, #116]	; (15f54 <store_file_packet+0x1cc>)
   15ee0:	0019      	movs	r1, r3
   15ee2:	2001      	movs	r0, #1
   15ee4:	4b07      	ldr	r3, [pc, #28]	; (15f04 <store_file_packet+0x17c>)
   15ee6:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   15ee8:	2100      	movs	r1, #0
   15eea:	2017      	movs	r0, #23
   15eec:	4b1a      	ldr	r3, [pc, #104]	; (15f58 <store_file_packet+0x1d0>)
   15eee:	4798      	blx	r3
            add_state(COMPLETED);
   15ef0:	2010      	movs	r0, #16
   15ef2:	4b10      	ldr	r3, [pc, #64]	; (15f34 <store_file_packet+0x1ac>)
   15ef4:	4798      	blx	r3
            return;
   15ef6:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   15ef8:	46bd      	mov	sp, r7
   15efa:	b006      	add	sp, #24
   15efc:	bdb0      	pop	{r4, r5, r7, pc}
   15efe:	46c0      	nop			; (mov r8, r8)
   15f00:	00036134 	.word	0x00036134
   15f04:	0001dad1 	.word	0x0001dad1
   15f08:	000159a5 	.word	0x000159a5
   15f0c:	200000a8 	.word	0x200000a8
   15f10:	00036132 	.word	0x00036132
   15f14:	000349e7 	.word	0x000349e7
   15f18:	200000aa 	.word	0x200000aa
   15f1c:	0003499b 	.word	0x0003499b
   15f20:	200006ec 	.word	0x200006ec
   15f24:	00015a29 	.word	0x00015a29
   15f28:	00036198 	.word	0x00036198
   15f2c:	0002d57d 	.word	0x0002d57d
   15f30:	00036158 	.word	0x00036158
   15f34:	0001597d 	.word	0x0001597d
   15f38:	000361c0 	.word	0x000361c0
   15f3c:	20000714 	.word	0x20000714
   15f40:	0002daad 	.word	0x0002daad
   15f44:	0002df7d 	.word	0x0002df7d
   15f48:	000361f4 	.word	0x000361f4
   15f4c:	20000710 	.word	0x20000710
   15f50:	00036230 	.word	0x00036230
   15f54:	00036264 	.word	0x00036264
   15f58:	000158e1 	.word	0x000158e1

00015f5c <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   15f5c:	b590      	push	{r4, r7, lr}
   15f5e:	b085      	sub	sp, #20
   15f60:	af00      	add	r7, sp, #0
   15f62:	60f8      	str	r0, [r7, #12]
   15f64:	60b9      	str	r1, [r7, #8]
   15f66:	607a      	str	r2, [r7, #4]
    switch (type) {
   15f68:	68bb      	ldr	r3, [r7, #8]
   15f6a:	2b04      	cmp	r3, #4
   15f6c:	d900      	bls.n	15f70 <http_client_callback+0x14>
   15f6e:	e077      	b.n	16060 <http_client_callback+0x104>
   15f70:	68bb      	ldr	r3, [r7, #8]
   15f72:	009a      	lsls	r2, r3, #2
   15f74:	4b3c      	ldr	r3, [pc, #240]	; (16068 <http_client_callback+0x10c>)
   15f76:	18d3      	adds	r3, r2, r3
   15f78:	681b      	ldr	r3, [r3, #0]
   15f7a:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   15f7c:	4b3b      	ldr	r3, [pc, #236]	; (1606c <http_client_callback+0x110>)
   15f7e:	0019      	movs	r1, r3
   15f80:	2001      	movs	r0, #1
   15f82:	4b3b      	ldr	r3, [pc, #236]	; (16070 <http_client_callback+0x114>)
   15f84:	4798      	blx	r3
            break;
   15f86:	e06b      	b.n	16060 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   15f88:	4b3a      	ldr	r3, [pc, #232]	; (16074 <http_client_callback+0x118>)
   15f8a:	0019      	movs	r1, r3
   15f8c:	2001      	movs	r0, #1
   15f8e:	4b38      	ldr	r3, [pc, #224]	; (16070 <http_client_callback+0x114>)
   15f90:	4798      	blx	r3
            add_state(GET_REQUESTED);
   15f92:	2004      	movs	r0, #4
   15f94:	4b38      	ldr	r3, [pc, #224]	; (16078 <http_client_callback+0x11c>)
   15f96:	4798      	blx	r3
            break;
   15f98:	e062      	b.n	16060 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   15f9a:	687b      	ldr	r3, [r7, #4]
   15f9c:	881b      	ldrh	r3, [r3, #0]
   15f9e:	001a      	movs	r2, r3
   15fa0:	687b      	ldr	r3, [r7, #4]
   15fa2:	685b      	ldr	r3, [r3, #4]
   15fa4:	4935      	ldr	r1, [pc, #212]	; (1607c <http_client_callback+0x120>)
   15fa6:	2001      	movs	r0, #1
   15fa8:	4c31      	ldr	r4, [pc, #196]	; (16070 <http_client_callback+0x114>)
   15faa:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   15fac:	687b      	ldr	r3, [r7, #4]
   15fae:	881b      	ldrh	r3, [r3, #0]
   15fb0:	2bc8      	cmp	r3, #200	; 0xc8
   15fb2:	d10d      	bne.n	15fd0 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   15fb4:	687b      	ldr	r3, [r7, #4]
   15fb6:	685a      	ldr	r2, [r3, #4]
   15fb8:	4b31      	ldr	r3, [pc, #196]	; (16080 <http_client_callback+0x124>)
   15fba:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   15fbc:	4b31      	ldr	r3, [pc, #196]	; (16084 <http_client_callback+0x128>)
   15fbe:	2200      	movs	r2, #0
   15fc0:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   15fc2:	687b      	ldr	r3, [r7, #4]
   15fc4:	685a      	ldr	r2, [r3, #4]
   15fc6:	2380      	movs	r3, #128	; 0x80
   15fc8:	009b      	lsls	r3, r3, #2
   15fca:	429a      	cmp	r2, r3
   15fcc:	d843      	bhi.n	16056 <http_client_callback+0xfa>
   15fce:	e003      	b.n	15fd8 <http_client_callback+0x7c>
                add_state(CANCELED);
   15fd0:	2020      	movs	r0, #32
   15fd2:	4b29      	ldr	r3, [pc, #164]	; (16078 <http_client_callback+0x11c>)
   15fd4:	4798      	blx	r3
                return;
   15fd6:	e043      	b.n	16060 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   15fd8:	687b      	ldr	r3, [r7, #4]
   15fda:	689a      	ldr	r2, [r3, #8]
   15fdc:	687b      	ldr	r3, [r7, #4]
   15fde:	685b      	ldr	r3, [r3, #4]
   15fe0:	0019      	movs	r1, r3
   15fe2:	0010      	movs	r0, r2
   15fe4:	4b28      	ldr	r3, [pc, #160]	; (16088 <http_client_callback+0x12c>)
   15fe6:	4798      	blx	r3
                add_state(COMPLETED);
   15fe8:	2010      	movs	r0, #16
   15fea:	4b23      	ldr	r3, [pc, #140]	; (16078 <http_client_callback+0x11c>)
   15fec:	4798      	blx	r3
            }
            break;
   15fee:	e032      	b.n	16056 <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   15ff0:	687b      	ldr	r3, [r7, #4]
   15ff2:	685a      	ldr	r2, [r3, #4]
   15ff4:	687b      	ldr	r3, [r7, #4]
   15ff6:	681b      	ldr	r3, [r3, #0]
   15ff8:	0019      	movs	r1, r3
   15ffa:	0010      	movs	r0, r2
   15ffc:	4b22      	ldr	r3, [pc, #136]	; (16088 <http_client_callback+0x12c>)
   15ffe:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   16000:	687b      	ldr	r3, [r7, #4]
   16002:	7a1b      	ldrb	r3, [r3, #8]
   16004:	2b00      	cmp	r3, #0
   16006:	d028      	beq.n	1605a <http_client_callback+0xfe>
                add_state(COMPLETED);
   16008:	2010      	movs	r0, #16
   1600a:	4b1b      	ldr	r3, [pc, #108]	; (16078 <http_client_callback+0x11c>)
   1600c:	4798      	blx	r3
            }

            break;
   1600e:	e024      	b.n	1605a <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   16010:	687b      	ldr	r3, [r7, #4]
   16012:	681a      	ldr	r2, [r3, #0]
   16014:	4b1d      	ldr	r3, [pc, #116]	; (1608c <http_client_callback+0x130>)
   16016:	0019      	movs	r1, r3
   16018:	2001      	movs	r0, #1
   1601a:	4b15      	ldr	r3, [pc, #84]	; (16070 <http_client_callback+0x114>)
   1601c:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   1601e:	687b      	ldr	r3, [r7, #4]
   16020:	681b      	ldr	r3, [r3, #0]
   16022:	330b      	adds	r3, #11
   16024:	d11b      	bne.n	1605e <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   16026:	2008      	movs	r0, #8
   16028:	4b19      	ldr	r3, [pc, #100]	; (16090 <http_client_callback+0x134>)
   1602a:	4798      	blx	r3
   1602c:	1e03      	subs	r3, r0, #0
   1602e:	d006      	beq.n	1603e <http_client_callback+0xe2>
                    f_close(&file_object);
   16030:	4b18      	ldr	r3, [pc, #96]	; (16094 <http_client_callback+0x138>)
   16032:	0018      	movs	r0, r3
   16034:	4b18      	ldr	r3, [pc, #96]	; (16098 <http_client_callback+0x13c>)
   16036:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   16038:	2008      	movs	r0, #8
   1603a:	4b18      	ldr	r3, [pc, #96]	; (1609c <http_client_callback+0x140>)
   1603c:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   1603e:	2004      	movs	r0, #4
   16040:	4b13      	ldr	r3, [pc, #76]	; (16090 <http_client_callback+0x134>)
   16042:	4798      	blx	r3
   16044:	1e03      	subs	r3, r0, #0
   16046:	d002      	beq.n	1604e <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   16048:	2004      	movs	r0, #4
   1604a:	4b14      	ldr	r3, [pc, #80]	; (1609c <http_client_callback+0x140>)
   1604c:	4798      	blx	r3
                }

                start_download();
   1604e:	4b14      	ldr	r3, [pc, #80]	; (160a0 <http_client_callback+0x144>)
   16050:	4798      	blx	r3
            }

            break;
   16052:	46c0      	nop			; (mov r8, r8)
   16054:	e003      	b.n	1605e <http_client_callback+0x102>
            break;
   16056:	46c0      	nop			; (mov r8, r8)
   16058:	e002      	b.n	16060 <http_client_callback+0x104>
            break;
   1605a:	46c0      	nop			; (mov r8, r8)
   1605c:	e000      	b.n	16060 <http_client_callback+0x104>
            break;
   1605e:	46c0      	nop			; (mov r8, r8)
    }
}
   16060:	46bd      	mov	sp, r7
   16062:	b005      	add	sp, #20
   16064:	bd90      	pop	{r4, r7, pc}
   16066:	46c0      	nop			; (mov r8, r8)
   16068:	000369b0 	.word	0x000369b0
   1606c:	00036298 	.word	0x00036298
   16070:	0001dad1 	.word	0x0001dad1
   16074:	000362d0 	.word	0x000362d0
   16078:	0001597d 	.word	0x0001597d
   1607c:	000362fc 	.word	0x000362fc
   16080:	20000710 	.word	0x20000710
   16084:	20000714 	.word	0x20000714
   16088:	00015d89 	.word	0x00015d89
   1608c:	00036338 	.word	0x00036338
   16090:	000159a5 	.word	0x000159a5
   16094:	200006ec 	.word	0x200006ec
   16098:	0002df7d 	.word	0x0002df7d
   1609c:	00015949 	.word	0x00015949
   160a0:	00015ccd 	.word	0x00015ccd

000160a4 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   160a4:	b580      	push	{r7, lr}
   160a6:	b082      	sub	sp, #8
   160a8:	af00      	add	r7, sp, #0
   160aa:	603a      	str	r2, [r7, #0]
   160ac:	1dfb      	adds	r3, r7, #7
   160ae:	1c02      	adds	r2, r0, #0
   160b0:	701a      	strb	r2, [r3, #0]
   160b2:	1dbb      	adds	r3, r7, #6
   160b4:	1c0a      	adds	r2, r1, #0
   160b6:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   160b8:	683a      	ldr	r2, [r7, #0]
   160ba:	1dbb      	adds	r3, r7, #6
   160bc:	7819      	ldrb	r1, [r3, #0]
   160be:	1dfb      	adds	r3, r7, #7
   160c0:	781b      	ldrb	r3, [r3, #0]
   160c2:	b25b      	sxtb	r3, r3
   160c4:	0018      	movs	r0, r3
   160c6:	4b03      	ldr	r3, [pc, #12]	; (160d4 <socket_cb+0x30>)
   160c8:	4798      	blx	r3
}
   160ca:	46c0      	nop			; (mov r8, r8)
   160cc:	46bd      	mov	sp, r7
   160ce:	b002      	add	sp, #8
   160d0:	bd80      	pop	{r7, pc}
   160d2:	46c0      	nop			; (mov r8, r8)
   160d4:	000308e1 	.word	0x000308e1

000160d8 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   160d8:	b5b0      	push	{r4, r5, r7, lr}
   160da:	b086      	sub	sp, #24
   160dc:	af04      	add	r7, sp, #16
   160de:	6078      	str	r0, [r7, #4]
   160e0:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   160e2:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   160e4:	22ff      	movs	r2, #255	; 0xff
   160e6:	4013      	ands	r3, r2
   160e8:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   160ea:	683b      	ldr	r3, [r7, #0]
   160ec:	0a1b      	lsrs	r3, r3, #8
   160ee:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   160f0:	23ff      	movs	r3, #255	; 0xff
   160f2:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   160f4:	683a      	ldr	r2, [r7, #0]
   160f6:	0c12      	lsrs	r2, r2, #16
   160f8:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   160fa:	22ff      	movs	r2, #255	; 0xff
   160fc:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   160fe:	6839      	ldr	r1, [r7, #0]
   16100:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   16102:	000d      	movs	r5, r1
   16104:	6878      	ldr	r0, [r7, #4]
   16106:	4909      	ldr	r1, [pc, #36]	; (1612c <resolve_cb+0x54>)
   16108:	9502      	str	r5, [sp, #8]
   1610a:	9201      	str	r2, [sp, #4]
   1610c:	9300      	str	r3, [sp, #0]
   1610e:	0023      	movs	r3, r4
   16110:	0002      	movs	r2, r0
   16112:	2001      	movs	r0, #1
   16114:	4c06      	ldr	r4, [pc, #24]	; (16130 <resolve_cb+0x58>)
   16116:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   16118:	683a      	ldr	r2, [r7, #0]
   1611a:	687b      	ldr	r3, [r7, #4]
   1611c:	0011      	movs	r1, r2
   1611e:	0018      	movs	r0, r3
   16120:	4b04      	ldr	r3, [pc, #16]	; (16134 <resolve_cb+0x5c>)
   16122:	4798      	blx	r3
}
   16124:	46c0      	nop			; (mov r8, r8)
   16126:	46bd      	mov	sp, r7
   16128:	b002      	add	sp, #8
   1612a:	bdb0      	pop	{r4, r5, r7, pc}
   1612c:	00036368 	.word	0x00036368
   16130:	0001dad1 	.word	0x0001dad1
   16134:	00030a45 	.word	0x00030a45

00016138 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   16138:	b590      	push	{r4, r7, lr}
   1613a:	b087      	sub	sp, #28
   1613c:	af02      	add	r7, sp, #8
   1613e:	0002      	movs	r2, r0
   16140:	6039      	str	r1, [r7, #0]
   16142:	1dfb      	adds	r3, r7, #7
   16144:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   16146:	1dfb      	adds	r3, r7, #7
   16148:	781b      	ldrb	r3, [r3, #0]
   1614a:	2b2c      	cmp	r3, #44	; 0x2c
   1614c:	d002      	beq.n	16154 <wifi_cb+0x1c>
   1614e:	2b32      	cmp	r3, #50	; 0x32
   16150:	d03d      	beq.n	161ce <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   16152:	e06f      	b.n	16234 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   16154:	683b      	ldr	r3, [r7, #0]
   16156:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   16158:	68fb      	ldr	r3, [r7, #12]
   1615a:	781b      	ldrb	r3, [r3, #0]
   1615c:	2b01      	cmp	r3, #1
   1615e:	d107      	bne.n	16170 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   16160:	4b36      	ldr	r3, [pc, #216]	; (1623c <wifi_cb+0x104>)
   16162:	0019      	movs	r1, r3
   16164:	2001      	movs	r0, #1
   16166:	4b36      	ldr	r3, [pc, #216]	; (16240 <wifi_cb+0x108>)
   16168:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   1616a:	4b36      	ldr	r3, [pc, #216]	; (16244 <wifi_cb+0x10c>)
   1616c:	4798      	blx	r3
            break;
   1616e:	e05e      	b.n	1622e <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   16170:	68fb      	ldr	r3, [r7, #12]
   16172:	781b      	ldrb	r3, [r3, #0]
   16174:	2b00      	cmp	r3, #0
   16176:	d15a      	bne.n	1622e <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   16178:	4b33      	ldr	r3, [pc, #204]	; (16248 <wifi_cb+0x110>)
   1617a:	0019      	movs	r1, r3
   1617c:	2001      	movs	r0, #1
   1617e:	4b30      	ldr	r3, [pc, #192]	; (16240 <wifi_cb+0x108>)
   16180:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   16182:	2002      	movs	r0, #2
   16184:	4b31      	ldr	r3, [pc, #196]	; (1624c <wifi_cb+0x114>)
   16186:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   16188:	2008      	movs	r0, #8
   1618a:	4b31      	ldr	r3, [pc, #196]	; (16250 <wifi_cb+0x118>)
   1618c:	4798      	blx	r3
   1618e:	1e03      	subs	r3, r0, #0
   16190:	d006      	beq.n	161a0 <wifi_cb+0x68>
                    f_close(&file_object);
   16192:	4b30      	ldr	r3, [pc, #192]	; (16254 <wifi_cb+0x11c>)
   16194:	0018      	movs	r0, r3
   16196:	4b30      	ldr	r3, [pc, #192]	; (16258 <wifi_cb+0x120>)
   16198:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   1619a:	2008      	movs	r0, #8
   1619c:	4b2b      	ldr	r3, [pc, #172]	; (1624c <wifi_cb+0x114>)
   1619e:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   161a0:	2004      	movs	r0, #4
   161a2:	4b2b      	ldr	r3, [pc, #172]	; (16250 <wifi_cb+0x118>)
   161a4:	4798      	blx	r3
   161a6:	1e03      	subs	r3, r0, #0
   161a8:	d002      	beq.n	161b0 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   161aa:	2004      	movs	r0, #4
   161ac:	4b27      	ldr	r3, [pc, #156]	; (1624c <wifi_cb+0x114>)
   161ae:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   161b0:	4b2a      	ldr	r3, [pc, #168]	; (1625c <wifi_cb+0x124>)
   161b2:	2101      	movs	r1, #1
   161b4:	0018      	movs	r0, r3
   161b6:	4b2a      	ldr	r3, [pc, #168]	; (16260 <wifi_cb+0x128>)
   161b8:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   161ba:	4a2a      	ldr	r2, [pc, #168]	; (16264 <wifi_cb+0x12c>)
   161bc:	482a      	ldr	r0, [pc, #168]	; (16268 <wifi_cb+0x130>)
   161be:	23ff      	movs	r3, #255	; 0xff
   161c0:	9300      	str	r3, [sp, #0]
   161c2:	0013      	movs	r3, r2
   161c4:	2202      	movs	r2, #2
   161c6:	2107      	movs	r1, #7
   161c8:	4c28      	ldr	r4, [pc, #160]	; (1626c <wifi_cb+0x134>)
   161ca:	47a0      	blx	r4
            break;
   161cc:	e02f      	b.n	1622e <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   161ce:	683b      	ldr	r3, [r7, #0]
   161d0:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   161d2:	68bb      	ldr	r3, [r7, #8]
   161d4:	781b      	ldrb	r3, [r3, #0]
   161d6:	0018      	movs	r0, r3
   161d8:	68bb      	ldr	r3, [r7, #8]
   161da:	3301      	adds	r3, #1
   161dc:	781b      	ldrb	r3, [r3, #0]
   161de:	001c      	movs	r4, r3
   161e0:	68bb      	ldr	r3, [r7, #8]
   161e2:	3302      	adds	r3, #2
   161e4:	781b      	ldrb	r3, [r3, #0]
   161e6:	001a      	movs	r2, r3
   161e8:	68bb      	ldr	r3, [r7, #8]
   161ea:	3303      	adds	r3, #3
   161ec:	781b      	ldrb	r3, [r3, #0]
   161ee:	4920      	ldr	r1, [pc, #128]	; (16270 <wifi_cb+0x138>)
   161f0:	9301      	str	r3, [sp, #4]
   161f2:	9200      	str	r2, [sp, #0]
   161f4:	0023      	movs	r3, r4
   161f6:	0002      	movs	r2, r0
   161f8:	2001      	movs	r0, #1
   161fa:	4c11      	ldr	r4, [pc, #68]	; (16240 <wifi_cb+0x108>)
   161fc:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   161fe:	2002      	movs	r0, #2
   16200:	4b1c      	ldr	r3, [pc, #112]	; (16274 <wifi_cb+0x13c>)
   16202:	4798      	blx	r3
            if (do_download_flag == 1) {
   16204:	4b1c      	ldr	r3, [pc, #112]	; (16278 <wifi_cb+0x140>)
   16206:	781b      	ldrb	r3, [r3, #0]
   16208:	2b01      	cmp	r3, #1
   1620a:	d102      	bne.n	16212 <wifi_cb+0xda>
                start_download();
   1620c:	4b1b      	ldr	r3, [pc, #108]	; (1627c <wifi_cb+0x144>)
   1620e:	4798      	blx	r3
        } break;
   16210:	e00f      	b.n	16232 <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   16212:	4a1b      	ldr	r2, [pc, #108]	; (16280 <wifi_cb+0x148>)
   16214:	4b11      	ldr	r3, [pc, #68]	; (1625c <wifi_cb+0x124>)
   16216:	0011      	movs	r1, r2
   16218:	0018      	movs	r0, r3
   1621a:	4b1a      	ldr	r3, [pc, #104]	; (16284 <wifi_cb+0x14c>)
   1621c:	4798      	blx	r3
   1621e:	1e03      	subs	r3, r0, #0
   16220:	d007      	beq.n	16232 <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   16222:	4b19      	ldr	r3, [pc, #100]	; (16288 <wifi_cb+0x150>)
   16224:	0019      	movs	r1, r3
   16226:	2001      	movs	r0, #1
   16228:	4b05      	ldr	r3, [pc, #20]	; (16240 <wifi_cb+0x108>)
   1622a:	4798      	blx	r3
        } break;
   1622c:	e001      	b.n	16232 <wifi_cb+0xfa>
            break;
   1622e:	46c0      	nop			; (mov r8, r8)
   16230:	e000      	b.n	16234 <wifi_cb+0xfc>
        } break;
   16232:	46c0      	nop			; (mov r8, r8)
    }
}
   16234:	46c0      	nop			; (mov r8, r8)
   16236:	46bd      	mov	sp, r7
   16238:	b005      	add	sp, #20
   1623a:	bd90      	pop	{r4, r7, pc}
   1623c:	00036398 	.word	0x00036398
   16240:	0001dad1 	.word	0x0001dad1
   16244:	000220b1 	.word	0x000220b1
   16248:	000363b8 	.word	0x000363b8
   1624c:	00015949 	.word	0x00015949
   16250:	000159a5 	.word	0x000159a5
   16254:	200006ec 	.word	0x200006ec
   16258:	0002df7d 	.word	0x0002df7d
   1625c:	20000718 	.word	0x20000718
   16260:	0002f58d 	.word	0x0002f58d
   16264:	000363dc 	.word	0x000363dc
   16268:	000363e8 	.word	0x000363e8
   1626c:	00021bdd 	.word	0x00021bdd
   16270:	000363f0 	.word	0x000363f0
   16274:	0001597d 	.word	0x0001597d
   16278:	200004b8 	.word	0x200004b8
   1627c:	00015ccd 	.word	0x00015ccd
   16280:	00036010 	.word	0x00036010
   16284:	0002f459 	.word	0x0002f459
   16288:	00036418 	.word	0x00036418

0001628c <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   1628c:	b590      	push	{r4, r7, lr}
   1628e:	b083      	sub	sp, #12
   16290:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   16292:	4b29      	ldr	r3, [pc, #164]	; (16338 <init_storage+0xac>)
   16294:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   16296:	4b29      	ldr	r3, [pc, #164]	; (1633c <init_storage+0xb0>)
   16298:	0019      	movs	r1, r3
   1629a:	2001      	movs	r0, #1
   1629c:	4b28      	ldr	r3, [pc, #160]	; (16340 <init_storage+0xb4>)
   1629e:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   162a0:	1dfc      	adds	r4, r7, #7
   162a2:	2000      	movs	r0, #0
   162a4:	4b27      	ldr	r3, [pc, #156]	; (16344 <init_storage+0xb8>)
   162a6:	4798      	blx	r3
   162a8:	0003      	movs	r3, r0
   162aa:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   162ac:	1dfb      	adds	r3, r7, #7
   162ae:	781b      	ldrb	r3, [r3, #0]
   162b0:	2b01      	cmp	r3, #1
   162b2:	d110      	bne.n	162d6 <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   162b4:	4b24      	ldr	r3, [pc, #144]	; (16348 <init_storage+0xbc>)
   162b6:	0019      	movs	r1, r3
   162b8:	2001      	movs	r0, #1
   162ba:	4b21      	ldr	r3, [pc, #132]	; (16340 <init_storage+0xb4>)
   162bc:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   162be:	4b23      	ldr	r3, [pc, #140]	; (1634c <init_storage+0xc0>)
   162c0:	0019      	movs	r1, r3
   162c2:	2001      	movs	r0, #1
   162c4:	4b1e      	ldr	r3, [pc, #120]	; (16340 <init_storage+0xb4>)
   162c6:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   162c8:	46c0      	nop			; (mov r8, r8)
   162ca:	2000      	movs	r0, #0
   162cc:	4b20      	ldr	r3, [pc, #128]	; (16350 <init_storage+0xc4>)
   162ce:	4798      	blx	r3
   162d0:	0003      	movs	r3, r0
   162d2:	2b02      	cmp	r3, #2
   162d4:	d1f9      	bne.n	162ca <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   162d6:	1dfb      	adds	r3, r7, #7
   162d8:	781b      	ldrb	r3, [r3, #0]
   162da:	2b00      	cmp	r3, #0
   162dc:	d1e0      	bne.n	162a0 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   162de:	4b1d      	ldr	r3, [pc, #116]	; (16354 <init_storage+0xc8>)
   162e0:	0019      	movs	r1, r3
   162e2:	2001      	movs	r0, #1
   162e4:	4b16      	ldr	r3, [pc, #88]	; (16340 <init_storage+0xb4>)
   162e6:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   162e8:	238c      	movs	r3, #140	; 0x8c
   162ea:	009a      	lsls	r2, r3, #2
   162ec:	4b1a      	ldr	r3, [pc, #104]	; (16358 <init_storage+0xcc>)
   162ee:	2100      	movs	r1, #0
   162f0:	0018      	movs	r0, r3
   162f2:	4b1a      	ldr	r3, [pc, #104]	; (1635c <init_storage+0xd0>)
   162f4:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   162f6:	1dbc      	adds	r4, r7, #6
   162f8:	4b17      	ldr	r3, [pc, #92]	; (16358 <init_storage+0xcc>)
   162fa:	0019      	movs	r1, r3
   162fc:	2000      	movs	r0, #0
   162fe:	4b18      	ldr	r3, [pc, #96]	; (16360 <init_storage+0xd4>)
   16300:	4798      	blx	r3
   16302:	0003      	movs	r3, r0
   16304:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   16306:	1dbb      	adds	r3, r7, #6
   16308:	781b      	ldrb	r3, [r3, #0]
   1630a:	2b0b      	cmp	r3, #11
   1630c:	d107      	bne.n	1631e <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   1630e:	1dbb      	adds	r3, r7, #6
   16310:	781a      	ldrb	r2, [r3, #0]
   16312:	4b14      	ldr	r3, [pc, #80]	; (16364 <init_storage+0xd8>)
   16314:	0019      	movs	r1, r3
   16316:	2001      	movs	r0, #1
   16318:	4b09      	ldr	r3, [pc, #36]	; (16340 <init_storage+0xb4>)
   1631a:	4798      	blx	r3
            return;
   1631c:	e008      	b.n	16330 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   1631e:	4b12      	ldr	r3, [pc, #72]	; (16368 <init_storage+0xdc>)
   16320:	0019      	movs	r1, r3
   16322:	2001      	movs	r0, #1
   16324:	4b06      	ldr	r3, [pc, #24]	; (16340 <init_storage+0xb4>)
   16326:	4798      	blx	r3
        add_state(STORAGE_READY);
   16328:	2001      	movs	r0, #1
   1632a:	4b10      	ldr	r3, [pc, #64]	; (1636c <init_storage+0xe0>)
   1632c:	4798      	blx	r3
        return;
   1632e:	46c0      	nop			; (mov r8, r8)
    }
}
   16330:	46bd      	mov	sp, r7
   16332:	b003      	add	sp, #12
   16334:	bd90      	pop	{r4, r7, pc}
   16336:	46c0      	nop			; (mov r8, r8)
   16338:	0001e8e9 	.word	0x0001e8e9
   1633c:	0003643c 	.word	0x0003643c
   16340:	0001dad1 	.word	0x0001dad1
   16344:	0001edc5 	.word	0x0001edc5
   16348:	00036474 	.word	0x00036474
   1634c:	0003649c 	.word	0x0003649c
   16350:	0001e939 	.word	0x0001e939
   16354:	000364d0 	.word	0x000364d0
   16358:	200004bc 	.word	0x200004bc
   1635c:	0003462f 	.word	0x0003462f
   16360:	0002d525 	.word	0x0002d525
   16364:	000364f4 	.word	0x000364f4
   16368:	00036524 	.word	0x00036524
   1636c:	0001597d 	.word	0x0001597d

00016370 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   16370:	b580      	push	{r7, lr}
   16372:	b082      	sub	sp, #8
   16374:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   16376:	1d3b      	adds	r3, r7, #4
   16378:	0018      	movs	r0, r3
   1637a:	4b08      	ldr	r3, [pc, #32]	; (1639c <configure_timer+0x2c>)
   1637c:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   1637e:	1d3a      	adds	r2, r7, #4
   16380:	4b07      	ldr	r3, [pc, #28]	; (163a0 <configure_timer+0x30>)
   16382:	0011      	movs	r1, r2
   16384:	0018      	movs	r0, r3
   16386:	4b07      	ldr	r3, [pc, #28]	; (163a4 <configure_timer+0x34>)
   16388:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   1638a:	4b05      	ldr	r3, [pc, #20]	; (163a0 <configure_timer+0x30>)
   1638c:	0018      	movs	r0, r3
   1638e:	4b06      	ldr	r3, [pc, #24]	; (163a8 <configure_timer+0x38>)
   16390:	4798      	blx	r3
}
   16392:	46c0      	nop			; (mov r8, r8)
   16394:	46bd      	mov	sp, r7
   16396:	b002      	add	sp, #8
   16398:	bd80      	pop	{r7, pc}
   1639a:	46c0      	nop			; (mov r8, r8)
   1639c:	00032075 	.word	0x00032075
   163a0:	200046e0 	.word	0x200046e0
   163a4:	00032099 	.word	0x00032099
   163a8:	00032185 	.word	0x00032185

000163ac <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   163ac:	b580      	push	{r7, lr}
   163ae:	b088      	sub	sp, #32
   163b0:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   163b2:	003b      	movs	r3, r7
   163b4:	0018      	movs	r0, r3
   163b6:	4b16      	ldr	r3, [pc, #88]	; (16410 <configure_http_client+0x64>)
   163b8:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   163ba:	003b      	movs	r3, r7
   163bc:	2280      	movs	r2, #128	; 0x80
   163be:	0092      	lsls	r2, r2, #2
   163c0:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   163c2:	003b      	movs	r3, r7
   163c4:	4a13      	ldr	r2, [pc, #76]	; (16414 <configure_http_client+0x68>)
   163c6:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 443;
   163c8:	003b      	movs	r3, r7
   163ca:	22bc      	movs	r2, #188	; 0xbc
   163cc:	32ff      	adds	r2, #255	; 0xff
   163ce:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 1;
   163d0:	003b      	movs	r3, r7
   163d2:	2201      	movs	r2, #1
   163d4:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   163d6:	003a      	movs	r2, r7
   163d8:	4b0f      	ldr	r3, [pc, #60]	; (16418 <configure_http_client+0x6c>)
   163da:	0011      	movs	r1, r2
   163dc:	0018      	movs	r0, r3
   163de:	4b0f      	ldr	r3, [pc, #60]	; (1641c <configure_http_client+0x70>)
   163e0:	4798      	blx	r3
   163e2:	0003      	movs	r3, r0
   163e4:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   163e6:	69fb      	ldr	r3, [r7, #28]
   163e8:	2b00      	cmp	r3, #0
   163ea:	da06      	bge.n	163fa <configure_http_client+0x4e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   163ec:	69fa      	ldr	r2, [r7, #28]
   163ee:	4b0c      	ldr	r3, [pc, #48]	; (16420 <configure_http_client+0x74>)
   163f0:	0019      	movs	r1, r3
   163f2:	2001      	movs	r0, #1
   163f4:	4b0b      	ldr	r3, [pc, #44]	; (16424 <configure_http_client+0x78>)
   163f6:	4798      	blx	r3
        while (1) {
   163f8:	e7fe      	b.n	163f8 <configure_http_client+0x4c>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   163fa:	4a0b      	ldr	r2, [pc, #44]	; (16428 <configure_http_client+0x7c>)
   163fc:	4b06      	ldr	r3, [pc, #24]	; (16418 <configure_http_client+0x6c>)
   163fe:	0011      	movs	r1, r2
   16400:	0018      	movs	r0, r3
   16402:	4b0a      	ldr	r3, [pc, #40]	; (1642c <configure_http_client+0x80>)
   16404:	4798      	blx	r3
}
   16406:	46c0      	nop			; (mov r8, r8)
   16408:	46bd      	mov	sp, r7
   1640a:	b008      	add	sp, #32
   1640c:	bd80      	pop	{r7, pc}
   1640e:	46c0      	nop			; (mov r8, r8)
   16410:	00030709 	.word	0x00030709
   16414:	200046e0 	.word	0x200046e0
   16418:	20004738 	.word	0x20004738
   1641c:	00030755 	.word	0x00030755
   16420:	00036548 	.word	0x00036548
   16424:	0001dad1 	.word	0x0001dad1
   16428:	00015f5d 	.word	0x00015f5d
   1642c:	00030841 	.word	0x00030841

00016430 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   16430:	b580      	push	{r7, lr}
   16432:	b082      	sub	sp, #8
   16434:	af00      	add	r7, sp, #0
   16436:	603a      	str	r2, [r7, #0]
   16438:	1dfb      	adds	r3, r7, #7
   1643a:	1c02      	adds	r2, r0, #0
   1643c:	701a      	strb	r2, [r3, #0]
   1643e:	1dbb      	adds	r3, r7, #6
   16440:	1c0a      	adds	r2, r1, #0
   16442:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   16444:	683a      	ldr	r2, [r7, #0]
   16446:	1dbb      	adds	r3, r7, #6
   16448:	7819      	ldrb	r1, [r3, #0]
   1644a:	1dfb      	adds	r3, r7, #7
   1644c:	781b      	ldrb	r3, [r3, #0]
   1644e:	b25b      	sxtb	r3, r3
   16450:	0018      	movs	r0, r3
   16452:	4b03      	ldr	r3, [pc, #12]	; (16460 <socket_event_handler+0x30>)
   16454:	4798      	blx	r3
}
   16456:	46c0      	nop			; (mov r8, r8)
   16458:	46bd      	mov	sp, r7
   1645a:	b002      	add	sp, #8
   1645c:	bd80      	pop	{r7, pc}
   1645e:	46c0      	nop			; (mov r8, r8)
   16460:	0002f401 	.word	0x0002f401

00016464 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   16464:	b580      	push	{r7, lr}
   16466:	b082      	sub	sp, #8
   16468:	af00      	add	r7, sp, #0
   1646a:	6078      	str	r0, [r7, #4]
   1646c:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   1646e:	683a      	ldr	r2, [r7, #0]
   16470:	687b      	ldr	r3, [r7, #4]
   16472:	0011      	movs	r1, r2
   16474:	0018      	movs	r0, r3
   16476:	4b03      	ldr	r3, [pc, #12]	; (16484 <socket_resolve_handler+0x20>)
   16478:	4798      	blx	r3
}
   1647a:	46c0      	nop			; (mov r8, r8)
   1647c:	46bd      	mov	sp, r7
   1647e:	b002      	add	sp, #8
   16480:	bd80      	pop	{r7, pc}
   16482:	46c0      	nop			; (mov r8, r8)
   16484:	0002f435 	.word	0x0002f435

00016488 <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   16488:	b590      	push	{r4, r7, lr}
   1648a:	b089      	sub	sp, #36	; 0x24
   1648c:	af02      	add	r7, sp, #8
   1648e:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
   16490:	2310      	movs	r3, #16
   16492:	18fb      	adds	r3, r7, r3
   16494:	2200      	movs	r2, #0
   16496:	701a      	strb	r2, [r3, #0]
   16498:	2310      	movs	r3, #16
   1649a:	18fb      	adds	r3, r7, r3
   1649c:	2200      	movs	r2, #0
   1649e:	705a      	strb	r2, [r3, #1]
   164a0:	2310      	movs	r3, #16
   164a2:	18fb      	adds	r3, r7, r3
   164a4:	2200      	movs	r2, #0
   164a6:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   164a8:	687b      	ldr	r3, [r7, #4]
   164aa:	685b      	ldr	r3, [r3, #4]
   164ac:	685a      	ldr	r2, [r3, #4]
   164ae:	687b      	ldr	r3, [r7, #4]
   164b0:	685b      	ldr	r3, [r3, #4]
   164b2:	689b      	ldr	r3, [r3, #8]
   164b4:	492a      	ldr	r1, [pc, #168]	; (16560 <SubscribeHandlerLedTopic+0xd8>)
   164b6:	2001      	movs	r0, #1
   164b8:	4c2a      	ldr	r4, [pc, #168]	; (16564 <SubscribeHandlerLedTopic+0xdc>)
   164ba:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   164bc:	687b      	ldr	r3, [r7, #4]
   164be:	681b      	ldr	r3, [r3, #0]
   164c0:	689b      	ldr	r3, [r3, #8]
   164c2:	4929      	ldr	r1, [pc, #164]	; (16568 <SubscribeHandlerLedTopic+0xe0>)
   164c4:	2204      	movs	r2, #4
   164c6:	0018      	movs	r0, r3
   164c8:	4b28      	ldr	r3, [pc, #160]	; (1656c <SubscribeHandlerLedTopic+0xe4>)
   164ca:	4798      	blx	r3
   164cc:	1e03      	subs	r3, r0, #0
   164ce:	d143      	bne.n	16558 <SubscribeHandlerLedTopic+0xd0>
        char *p = (char *)&msgData->message->payload[4];
   164d0:	687b      	ldr	r3, [r7, #4]
   164d2:	681b      	ldr	r3, [r3, #0]
   164d4:	689b      	ldr	r3, [r3, #8]
   164d6:	3304      	adds	r3, #4
   164d8:	60fb      	str	r3, [r7, #12]
        int nb = 0;
   164da:	2300      	movs	r3, #0
   164dc:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
   164de:	e015      	b.n	1650c <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
   164e0:	697c      	ldr	r4, [r7, #20]
   164e2:	1c63      	adds	r3, r4, #1
   164e4:	617b      	str	r3, [r7, #20]
   164e6:	68fb      	ldr	r3, [r7, #12]
   164e8:	220c      	movs	r2, #12
   164ea:	18b9      	adds	r1, r7, r2
   164ec:	220a      	movs	r2, #10
   164ee:	0018      	movs	r0, r3
   164f0:	4b1f      	ldr	r3, [pc, #124]	; (16570 <SubscribeHandlerLedTopic+0xe8>)
   164f2:	4798      	blx	r3
   164f4:	0003      	movs	r3, r0
   164f6:	b2da      	uxtb	r2, r3
   164f8:	2310      	movs	r3, #16
   164fa:	18fb      	adds	r3, r7, r3
   164fc:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   164fe:	68fb      	ldr	r3, [r7, #12]
   16500:	781b      	ldrb	r3, [r3, #0]
   16502:	2b2c      	cmp	r3, #44	; 0x2c
   16504:	d10a      	bne.n	1651c <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
   16506:	68fb      	ldr	r3, [r7, #12]
   16508:	3301      	adds	r3, #1
   1650a:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
   1650c:	697b      	ldr	r3, [r7, #20]
   1650e:	2b02      	cmp	r3, #2
   16510:	dc05      	bgt.n	1651e <SubscribeHandlerLedTopic+0x96>
   16512:	68fb      	ldr	r3, [r7, #12]
   16514:	781b      	ldrb	r3, [r3, #0]
   16516:	2b00      	cmp	r3, #0
   16518:	d1e2      	bne.n	164e0 <SubscribeHandlerLedTopic+0x58>
   1651a:	e000      	b.n	1651e <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
   1651c:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   1651e:	2310      	movs	r3, #16
   16520:	18fb      	adds	r3, r7, r3
   16522:	781b      	ldrb	r3, [r3, #0]
   16524:	001a      	movs	r2, r3
   16526:	2310      	movs	r3, #16
   16528:	18fb      	adds	r3, r7, r3
   1652a:	785b      	ldrb	r3, [r3, #1]
   1652c:	0018      	movs	r0, r3
   1652e:	2310      	movs	r3, #16
   16530:	18fb      	adds	r3, r7, r3
   16532:	789b      	ldrb	r3, [r3, #2]
   16534:	490f      	ldr	r1, [pc, #60]	; (16574 <SubscribeHandlerLedTopic+0xec>)
   16536:	9300      	str	r3, [sp, #0]
   16538:	0003      	movs	r3, r0
   1653a:	2001      	movs	r0, #1
   1653c:	4c09      	ldr	r4, [pc, #36]	; (16564 <SubscribeHandlerLedTopic+0xdc>)
   1653e:	47a0      	blx	r4
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
   16540:	2310      	movs	r3, #16
   16542:	18fb      	adds	r3, r7, r3
   16544:	7818      	ldrb	r0, [r3, #0]
   16546:	2310      	movs	r3, #16
   16548:	18fb      	adds	r3, r7, r3
   1654a:	7859      	ldrb	r1, [r3, #1]
   1654c:	2310      	movs	r3, #16
   1654e:	18fb      	adds	r3, r7, r3
   16550:	789b      	ldrb	r3, [r3, #2]
   16552:	001a      	movs	r2, r3
   16554:	4b08      	ldr	r3, [pc, #32]	; (16578 <SubscribeHandlerLedTopic+0xf0>)
   16556:	4798      	blx	r3
    }
}
   16558:	46c0      	nop			; (mov r8, r8)
   1655a:	46bd      	mov	sp, r7
   1655c:	b007      	add	sp, #28
   1655e:	bd90      	pop	{r4, r7, pc}
   16560:	00036590 	.word	0x00036590
   16564:	0001dad1 	.word	0x0001dad1
   16568:	00036598 	.word	0x00036598
   1656c:	000349f5 	.word	0x000349f5
   16570:	00034ba1 	.word	0x00034ba1
   16574:	000365a0 	.word	0x000365a0
   16578:	00015811 	.word	0x00015811

0001657c <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   1657c:	b590      	push	{r4, r7, lr}
   1657e:	b08b      	sub	sp, #44	; 0x2c
   16580:	af00      	add	r7, sp, #0
   16582:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
   16584:	230c      	movs	r3, #12
   16586:	18fb      	adds	r3, r7, r3
   16588:	2214      	movs	r2, #20
   1658a:	21ff      	movs	r1, #255	; 0xff
   1658c:	0018      	movs	r0, r3
   1658e:	4b48      	ldr	r3, [pc, #288]	; (166b0 <SubscribeHandlerGameTopic+0x134>)
   16590:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   16592:	687b      	ldr	r3, [r7, #4]
   16594:	681b      	ldr	r3, [r3, #0]
   16596:	689b      	ldr	r3, [r3, #8]
   16598:	4946      	ldr	r1, [pc, #280]	; (166b4 <SubscribeHandlerGameTopic+0x138>)
   1659a:	2209      	movs	r2, #9
   1659c:	0018      	movs	r0, r3
   1659e:	4b46      	ldr	r3, [pc, #280]	; (166b8 <SubscribeHandlerGameTopic+0x13c>)
   165a0:	4798      	blx	r3
   165a2:	1e03      	subs	r3, r0, #0
   165a4:	d166      	bne.n	16674 <SubscribeHandlerGameTopic+0xf8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   165a6:	4b45      	ldr	r3, [pc, #276]	; (166bc <SubscribeHandlerGameTopic+0x140>)
   165a8:	0019      	movs	r1, r3
   165aa:	2001      	movs	r0, #1
   165ac:	4b44      	ldr	r3, [pc, #272]	; (166c0 <SubscribeHandlerGameTopic+0x144>)
   165ae:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   165b0:	687b      	ldr	r3, [r7, #4]
   165b2:	685b      	ldr	r3, [r3, #4]
   165b4:	685a      	ldr	r2, [r3, #4]
   165b6:	687b      	ldr	r3, [r7, #4]
   165b8:	685b      	ldr	r3, [r3, #4]
   165ba:	689b      	ldr	r3, [r3, #8]
   165bc:	4941      	ldr	r1, [pc, #260]	; (166c4 <SubscribeHandlerGameTopic+0x148>)
   165be:	2001      	movs	r0, #1
   165c0:	4c3f      	ldr	r4, [pc, #252]	; (166c0 <SubscribeHandlerGameTopic+0x144>)
   165c2:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   165c4:	687b      	ldr	r3, [r7, #4]
   165c6:	681b      	ldr	r3, [r3, #0]
   165c8:	68da      	ldr	r2, [r3, #12]
   165ca:	687b      	ldr	r3, [r7, #4]
   165cc:	681b      	ldr	r3, [r3, #0]
   165ce:	689b      	ldr	r3, [r3, #8]
   165d0:	493d      	ldr	r1, [pc, #244]	; (166c8 <SubscribeHandlerGameTopic+0x14c>)
   165d2:	2001      	movs	r0, #1
   165d4:	4c3a      	ldr	r4, [pc, #232]	; (166c0 <SubscribeHandlerGameTopic+0x144>)
   165d6:	47a0      	blx	r4

        int nb = 0;
   165d8:	2300      	movs	r3, #0
   165da:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
   165dc:	687b      	ldr	r3, [r7, #4]
   165de:	681b      	ldr	r3, [r3, #0]
   165e0:	689b      	ldr	r3, [r3, #8]
   165e2:	3309      	adds	r3, #9
   165e4:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   165e6:	e015      	b.n	16614 <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
   165e8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   165ea:	1c63      	adds	r3, r4, #1
   165ec:	627b      	str	r3, [r7, #36]	; 0x24
   165ee:	68bb      	ldr	r3, [r7, #8]
   165f0:	2208      	movs	r2, #8
   165f2:	18b9      	adds	r1, r7, r2
   165f4:	220a      	movs	r2, #10
   165f6:	0018      	movs	r0, r3
   165f8:	4b34      	ldr	r3, [pc, #208]	; (166cc <SubscribeHandlerGameTopic+0x150>)
   165fa:	4798      	blx	r3
   165fc:	0003      	movs	r3, r0
   165fe:	b2da      	uxtb	r2, r3
   16600:	230c      	movs	r3, #12
   16602:	18fb      	adds	r3, r7, r3
   16604:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   16606:	68bb      	ldr	r3, [r7, #8]
   16608:	781b      	ldrb	r3, [r3, #0]
   1660a:	2b2c      	cmp	r3, #44	; 0x2c
   1660c:	d10a      	bne.n	16624 <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
   1660e:	68bb      	ldr	r3, [r7, #8]
   16610:	3301      	adds	r3, #1
   16612:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   16614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16616:	2b13      	cmp	r3, #19
   16618:	dc05      	bgt.n	16626 <SubscribeHandlerGameTopic+0xaa>
   1661a:	68bb      	ldr	r3, [r7, #8]
   1661c:	781b      	ldrb	r3, [r3, #0]
   1661e:	2b00      	cmp	r3, #0
   16620:	d1e2      	bne.n	165e8 <SubscribeHandlerGameTopic+0x6c>
   16622:	e000      	b.n	16626 <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
   16624:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   16626:	4b2a      	ldr	r3, [pc, #168]	; (166d0 <SubscribeHandlerGameTopic+0x154>)
   16628:	0019      	movs	r1, r3
   1662a:	2001      	movs	r0, #1
   1662c:	4b24      	ldr	r3, [pc, #144]	; (166c0 <SubscribeHandlerGameTopic+0x144>)
   1662e:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   16630:	2300      	movs	r3, #0
   16632:	623b      	str	r3, [r7, #32]
   16634:	e00d      	b.n	16652 <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   16636:	230c      	movs	r3, #12
   16638:	18fa      	adds	r2, r7, r3
   1663a:	6a3b      	ldr	r3, [r7, #32]
   1663c:	18d3      	adds	r3, r2, r3
   1663e:	781b      	ldrb	r3, [r3, #0]
   16640:	001a      	movs	r2, r3
   16642:	4b24      	ldr	r3, [pc, #144]	; (166d4 <SubscribeHandlerGameTopic+0x158>)
   16644:	0019      	movs	r1, r3
   16646:	2001      	movs	r0, #1
   16648:	4b1d      	ldr	r3, [pc, #116]	; (166c0 <SubscribeHandlerGameTopic+0x144>)
   1664a:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   1664c:	6a3b      	ldr	r3, [r7, #32]
   1664e:	3301      	adds	r3, #1
   16650:	623b      	str	r3, [r7, #32]
   16652:	6a3b      	ldr	r3, [r7, #32]
   16654:	2b13      	cmp	r3, #19
   16656:	ddee      	ble.n	16636 <SubscribeHandlerGameTopic+0xba>
        }

        if (pdTRUE == ControlAddGameData(&game)) {
   16658:	230c      	movs	r3, #12
   1665a:	18fb      	adds	r3, r7, r3
   1665c:	0018      	movs	r0, r3
   1665e:	4b1e      	ldr	r3, [pc, #120]	; (166d8 <SubscribeHandlerGameTopic+0x15c>)
   16660:	4798      	blx	r3
   16662:	0003      	movs	r3, r0
   16664:	2b01      	cmp	r3, #1
   16666:	d11e      	bne.n	166a6 <SubscribeHandlerGameTopic+0x12a>
            LogMessage(LOG_DEBUG_LVL, "\r\nSent play to control!\r\n");
   16668:	4b1c      	ldr	r3, [pc, #112]	; (166dc <SubscribeHandlerGameTopic+0x160>)
   1666a:	0019      	movs	r1, r3
   1666c:	2001      	movs	r0, #1
   1666e:	4b14      	ldr	r3, [pc, #80]	; (166c0 <SubscribeHandlerGameTopic+0x144>)
   16670:	4798      	blx	r3
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
   16672:	e018      	b.n	166a6 <SubscribeHandlerGameTopic+0x12a>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   16674:	4b1a      	ldr	r3, [pc, #104]	; (166e0 <SubscribeHandlerGameTopic+0x164>)
   16676:	0019      	movs	r1, r3
   16678:	2001      	movs	r0, #1
   1667a:	4b11      	ldr	r3, [pc, #68]	; (166c0 <SubscribeHandlerGameTopic+0x144>)
   1667c:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   1667e:	687b      	ldr	r3, [r7, #4]
   16680:	685b      	ldr	r3, [r3, #4]
   16682:	685a      	ldr	r2, [r3, #4]
   16684:	687b      	ldr	r3, [r7, #4]
   16686:	685b      	ldr	r3, [r3, #4]
   16688:	689b      	ldr	r3, [r3, #8]
   1668a:	490e      	ldr	r1, [pc, #56]	; (166c4 <SubscribeHandlerGameTopic+0x148>)
   1668c:	2001      	movs	r0, #1
   1668e:	4c0c      	ldr	r4, [pc, #48]	; (166c0 <SubscribeHandlerGameTopic+0x144>)
   16690:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   16692:	687b      	ldr	r3, [r7, #4]
   16694:	681b      	ldr	r3, [r3, #0]
   16696:	68da      	ldr	r2, [r3, #12]
   16698:	687b      	ldr	r3, [r7, #4]
   1669a:	681b      	ldr	r3, [r3, #0]
   1669c:	689b      	ldr	r3, [r3, #8]
   1669e:	490a      	ldr	r1, [pc, #40]	; (166c8 <SubscribeHandlerGameTopic+0x14c>)
   166a0:	2001      	movs	r0, #1
   166a2:	4c07      	ldr	r4, [pc, #28]	; (166c0 <SubscribeHandlerGameTopic+0x144>)
   166a4:	47a0      	blx	r4
}
   166a6:	46c0      	nop			; (mov r8, r8)
   166a8:	46bd      	mov	sp, r7
   166aa:	b00b      	add	sp, #44	; 0x2c
   166ac:	bd90      	pop	{r4, r7, pc}
   166ae:	46c0      	nop			; (mov r8, r8)
   166b0:	0003462f 	.word	0x0003462f
   166b4:	000365b4 	.word	0x000365b4
   166b8:	000349f5 	.word	0x000349f5
   166bc:	000365c0 	.word	0x000365c0
   166c0:	0001dad1 	.word	0x0001dad1
   166c4:	00036590 	.word	0x00036590
   166c8:	000365dc 	.word	0x000365dc
   166cc:	00034ba1 	.word	0x00034ba1
   166d0:	000365e4 	.word	0x000365e4
   166d4:	000365f8 	.word	0x000365f8
   166d8:	000138a5 	.word	0x000138a5
   166dc:	000365fc 	.word	0x000365fc
   166e0:	00036618 	.word	0x00036618

000166e4 <SubscribeHandlerImuTopic>:

void SubscribeHandlerImuTopic(MessageData *msgData)
{
   166e4:	b590      	push	{r4, r7, lr}
   166e6:	b083      	sub	sp, #12
   166e8:	af00      	add	r7, sp, #0
   166ea:	6078      	str	r0, [r7, #4]
	LogMessage(LOG_DEBUG_LVL, "\r\nIMU topic received!\r\n");
   166ec:	4b09      	ldr	r3, [pc, #36]	; (16714 <SubscribeHandlerImuTopic+0x30>)
   166ee:	0019      	movs	r1, r3
   166f0:	2001      	movs	r0, #1
   166f2:	4b09      	ldr	r3, [pc, #36]	; (16718 <SubscribeHandlerImuTopic+0x34>)
   166f4:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   166f6:	687b      	ldr	r3, [r7, #4]
   166f8:	685b      	ldr	r3, [r3, #4]
   166fa:	685a      	ldr	r2, [r3, #4]
   166fc:	687b      	ldr	r3, [r7, #4]
   166fe:	685b      	ldr	r3, [r3, #4]
   16700:	689b      	ldr	r3, [r3, #8]
   16702:	4906      	ldr	r1, [pc, #24]	; (1671c <SubscribeHandlerImuTopic+0x38>)
   16704:	2001      	movs	r0, #1
   16706:	4c04      	ldr	r4, [pc, #16]	; (16718 <SubscribeHandlerImuTopic+0x34>)
   16708:	47a0      	blx	r4
}
   1670a:	46c0      	nop			; (mov r8, r8)
   1670c:	46bd      	mov	sp, r7
   1670e:	b003      	add	sp, #12
   16710:	bd90      	pop	{r4, r7, pc}
   16712:	46c0      	nop			; (mov r8, r8)
   16714:	00036648 	.word	0x00036648
   16718:	0001dad1 	.word	0x0001dad1
   1671c:	00036590 	.word	0x00036590

00016720 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   16720:	b590      	push	{r4, r7, lr}
   16722:	b08b      	sub	sp, #44	; 0x2c
   16724:	af06      	add	r7, sp, #24
   16726:	60f8      	str	r0, [r7, #12]
   16728:	60b9      	str	r1, [r7, #8]
   1672a:	607a      	str	r2, [r7, #4]
    switch (type) {
   1672c:	68bb      	ldr	r3, [r7, #8]
   1672e:	2b01      	cmp	r3, #1
   16730:	d03b      	beq.n	167aa <mqtt_callback+0x8a>
   16732:	2b05      	cmp	r3, #5
   16734:	d05e      	beq.n	167f4 <mqtt_callback+0xd4>
   16736:	2b00      	cmp	r3, #0
   16738:	d000      	beq.n	1673c <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   1673a:	e061      	b.n	16800 <mqtt_callback+0xe0>
            if (data->sock_connected.result >= 0) {
   1673c:	687b      	ldr	r3, [r7, #4]
   1673e:	681b      	ldr	r3, [r3, #0]
   16740:	2b00      	cmp	r3, #0
   16742:	db25      	blt.n	16790 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   16744:	4b30      	ldr	r3, [pc, #192]	; (16808 <mqtt_callback+0xe8>)
   16746:	0019      	movs	r1, r3
   16748:	2001      	movs	r0, #1
   1674a:	4b30      	ldr	r3, [pc, #192]	; (1680c <mqtt_callback+0xec>)
   1674c:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   1674e:	4930      	ldr	r1, [pc, #192]	; (16810 <mqtt_callback+0xf0>)
   16750:	4a30      	ldr	r2, [pc, #192]	; (16814 <mqtt_callback+0xf4>)
   16752:	68f8      	ldr	r0, [r7, #12]
   16754:	2300      	movs	r3, #0
   16756:	9305      	str	r3, [sp, #20]
   16758:	2300      	movs	r3, #0
   1675a:	9304      	str	r3, [sp, #16]
   1675c:	2300      	movs	r3, #0
   1675e:	9303      	str	r3, [sp, #12]
   16760:	2300      	movs	r3, #0
   16762:	9302      	str	r3, [sp, #8]
   16764:	2300      	movs	r3, #0
   16766:	9301      	str	r3, [sp, #4]
   16768:	4b2a      	ldr	r3, [pc, #168]	; (16814 <mqtt_callback+0xf4>)
   1676a:	9300      	str	r3, [sp, #0]
   1676c:	000b      	movs	r3, r1
   1676e:	2101      	movs	r1, #1
   16770:	4c29      	ldr	r4, [pc, #164]	; (16818 <mqtt_callback+0xf8>)
   16772:	47a0      	blx	r4
   16774:	1e03      	subs	r3, r0, #0
   16776:	d005      	beq.n	16784 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   16778:	4b28      	ldr	r3, [pc, #160]	; (1681c <mqtt_callback+0xfc>)
   1677a:	0019      	movs	r1, r3
   1677c:	2001      	movs	r0, #1
   1677e:	4b23      	ldr	r3, [pc, #140]	; (1680c <mqtt_callback+0xec>)
   16780:	4798      	blx	r3
        } break;
   16782:	e03d      	b.n	16800 <mqtt_callback+0xe0>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   16784:	4b26      	ldr	r3, [pc, #152]	; (16820 <mqtt_callback+0x100>)
   16786:	0019      	movs	r1, r3
   16788:	2001      	movs	r0, #1
   1678a:	4b20      	ldr	r3, [pc, #128]	; (1680c <mqtt_callback+0xec>)
   1678c:	4798      	blx	r3
        } break;
   1678e:	e037      	b.n	16800 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   16790:	4a24      	ldr	r2, [pc, #144]	; (16824 <mqtt_callback+0x104>)
   16792:	4b25      	ldr	r3, [pc, #148]	; (16828 <mqtt_callback+0x108>)
   16794:	0019      	movs	r1, r3
   16796:	2001      	movs	r0, #1
   16798:	4b1c      	ldr	r3, [pc, #112]	; (1680c <mqtt_callback+0xec>)
   1679a:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   1679c:	4a21      	ldr	r2, [pc, #132]	; (16824 <mqtt_callback+0x104>)
   1679e:	68fb      	ldr	r3, [r7, #12]
   167a0:	0011      	movs	r1, r2
   167a2:	0018      	movs	r0, r3
   167a4:	4b21      	ldr	r3, [pc, #132]	; (1682c <mqtt_callback+0x10c>)
   167a6:	4798      	blx	r3
        } break;
   167a8:	e02a      	b.n	16800 <mqtt_callback+0xe0>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   167aa:	687b      	ldr	r3, [r7, #4]
   167ac:	781b      	ldrb	r3, [r3, #0]
   167ae:	2b00      	cmp	r3, #0
   167b0:	d117      	bne.n	167e2 <mqtt_callback+0xc2>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   167b2:	4b1f      	ldr	r3, [pc, #124]	; (16830 <mqtt_callback+0x110>)
   167b4:	491f      	ldr	r1, [pc, #124]	; (16834 <mqtt_callback+0x114>)
   167b6:	68f8      	ldr	r0, [r7, #12]
   167b8:	2202      	movs	r2, #2
   167ba:	4c1f      	ldr	r4, [pc, #124]	; (16838 <mqtt_callback+0x118>)
   167bc:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   167be:	4b1f      	ldr	r3, [pc, #124]	; (1683c <mqtt_callback+0x11c>)
   167c0:	491f      	ldr	r1, [pc, #124]	; (16840 <mqtt_callback+0x120>)
   167c2:	68f8      	ldr	r0, [r7, #12]
   167c4:	2202      	movs	r2, #2
   167c6:	4c1c      	ldr	r4, [pc, #112]	; (16838 <mqtt_callback+0x118>)
   167c8:	47a0      	blx	r4
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
   167ca:	4b1e      	ldr	r3, [pc, #120]	; (16844 <mqtt_callback+0x124>)
   167cc:	491e      	ldr	r1, [pc, #120]	; (16848 <mqtt_callback+0x128>)
   167ce:	68f8      	ldr	r0, [r7, #12]
   167d0:	2202      	movs	r2, #2
   167d2:	4c19      	ldr	r4, [pc, #100]	; (16838 <mqtt_callback+0x118>)
   167d4:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   167d6:	4b1d      	ldr	r3, [pc, #116]	; (1684c <mqtt_callback+0x12c>)
   167d8:	0019      	movs	r1, r3
   167da:	2001      	movs	r0, #1
   167dc:	4b0b      	ldr	r3, [pc, #44]	; (1680c <mqtt_callback+0xec>)
   167de:	4798      	blx	r3
            break;
   167e0:	e00e      	b.n	16800 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   167e2:	687b      	ldr	r3, [r7, #4]
   167e4:	781b      	ldrb	r3, [r3, #0]
   167e6:	001a      	movs	r2, r3
   167e8:	4b19      	ldr	r3, [pc, #100]	; (16850 <mqtt_callback+0x130>)
   167ea:	0019      	movs	r1, r3
   167ec:	2001      	movs	r0, #1
   167ee:	4b07      	ldr	r3, [pc, #28]	; (1680c <mqtt_callback+0xec>)
   167f0:	4798      	blx	r3
            break;
   167f2:	e005      	b.n	16800 <mqtt_callback+0xe0>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   167f4:	4b17      	ldr	r3, [pc, #92]	; (16854 <mqtt_callback+0x134>)
   167f6:	0019      	movs	r1, r3
   167f8:	2001      	movs	r0, #1
   167fa:	4b04      	ldr	r3, [pc, #16]	; (1680c <mqtt_callback+0xec>)
   167fc:	4798      	blx	r3
            break;
   167fe:	46c0      	nop			; (mov r8, r8)
}
   16800:	46c0      	nop			; (mov r8, r8)
   16802:	46bd      	mov	sp, r7
   16804:	b005      	add	sp, #20
   16806:	bd90      	pop	{r4, r7, pc}
   16808:	000366ac 	.word	0x000366ac
   1680c:	0001dad1 	.word	0x0001dad1
   16810:	000366c8 	.word	0x000366c8
   16814:	000366d8 	.word	0x000366d8
   16818:	0002f4a1 	.word	0x0002f4a1
   1681c:	000366e4 	.word	0x000366e4
   16820:	0003670c 	.word	0x0003670c
   16824:	00036010 	.word	0x00036010
   16828:	00036728 	.word	0x00036728
   1682c:	0002f459 	.word	0x0002f459
   16830:	0001657d 	.word	0x0001657d
   16834:	00036760 	.word	0x00036760
   16838:	0002f641 	.word	0x0002f641
   1683c:	00016489 	.word	0x00016489
   16840:	00036688 	.word	0x00036688
   16844:	000166e5 	.word	0x000166e5
   16848:	00036774 	.word	0x00036774
   1684c:	00036788 	.word	0x00036788
   16850:	0003679c 	.word	0x0003679c
   16854:	000367d0 	.word	0x000367d0

00016858 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   16858:	b580      	push	{r7, lr}
   1685a:	b088      	sub	sp, #32
   1685c:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   1685e:	1d3b      	adds	r3, r7, #4
   16860:	0018      	movs	r0, r3
   16862:	4b1f      	ldr	r3, [pc, #124]	; (168e0 <configure_mqtt+0x88>)
   16864:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   16866:	1d3b      	adds	r3, r7, #4
   16868:	4a1e      	ldr	r2, [pc, #120]	; (168e4 <configure_mqtt+0x8c>)
   1686a:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1686c:	1d3b      	adds	r3, r7, #4
   1686e:	2280      	movs	r2, #128	; 0x80
   16870:	0092      	lsls	r2, r2, #2
   16872:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   16874:	1d3b      	adds	r3, r7, #4
   16876:	4a1c      	ldr	r2, [pc, #112]	; (168e8 <configure_mqtt+0x90>)
   16878:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1687a:	1d3b      	adds	r3, r7, #4
   1687c:	2280      	movs	r2, #128	; 0x80
   1687e:	0092      	lsls	r2, r2, #2
   16880:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   16882:	1d3b      	adds	r3, r7, #4
   16884:	4a19      	ldr	r2, [pc, #100]	; (168ec <configure_mqtt+0x94>)
   16886:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   16888:	1d3b      	adds	r3, r7, #4
   1688a:	4a19      	ldr	r2, [pc, #100]	; (168f0 <configure_mqtt+0x98>)
   1688c:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   1688e:	1d3a      	adds	r2, r7, #4
   16890:	4b18      	ldr	r3, [pc, #96]	; (168f4 <configure_mqtt+0x9c>)
   16892:	0011      	movs	r1, r2
   16894:	0018      	movs	r0, r3
   16896:	4b18      	ldr	r3, [pc, #96]	; (168f8 <configure_mqtt+0xa0>)
   16898:	4798      	blx	r3
   1689a:	0003      	movs	r3, r0
   1689c:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   1689e:	69fb      	ldr	r3, [r7, #28]
   168a0:	2b00      	cmp	r3, #0
   168a2:	da06      	bge.n	168b2 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   168a4:	69fa      	ldr	r2, [r7, #28]
   168a6:	4b15      	ldr	r3, [pc, #84]	; (168fc <configure_mqtt+0xa4>)
   168a8:	0019      	movs	r1, r3
   168aa:	2001      	movs	r0, #1
   168ac:	4b14      	ldr	r3, [pc, #80]	; (16900 <configure_mqtt+0xa8>)
   168ae:	4798      	blx	r3
        while (1) {
   168b0:	e7fe      	b.n	168b0 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   168b2:	4a14      	ldr	r2, [pc, #80]	; (16904 <configure_mqtt+0xac>)
   168b4:	4b0f      	ldr	r3, [pc, #60]	; (168f4 <configure_mqtt+0x9c>)
   168b6:	0011      	movs	r1, r2
   168b8:	0018      	movs	r0, r3
   168ba:	4b13      	ldr	r3, [pc, #76]	; (16908 <configure_mqtt+0xb0>)
   168bc:	4798      	blx	r3
   168be:	0003      	movs	r3, r0
   168c0:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   168c2:	69fb      	ldr	r3, [r7, #28]
   168c4:	2b00      	cmp	r3, #0
   168c6:	da06      	bge.n	168d6 <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   168c8:	69fa      	ldr	r2, [r7, #28]
   168ca:	4b10      	ldr	r3, [pc, #64]	; (1690c <configure_mqtt+0xb4>)
   168cc:	0019      	movs	r1, r3
   168ce:	2001      	movs	r0, #1
   168d0:	4b0b      	ldr	r3, [pc, #44]	; (16900 <configure_mqtt+0xa8>)
   168d2:	4798      	blx	r3
        while (1) {
   168d4:	e7fe      	b.n	168d4 <configure_mqtt+0x7c>
        }
    }
}
   168d6:	46c0      	nop			; (mov r8, r8)
   168d8:	46bd      	mov	sp, r7
   168da:	b008      	add	sp, #32
   168dc:	bd80      	pop	{r7, pc}
   168de:	46c0      	nop			; (mov r8, r8)
   168e0:	0002f399 	.word	0x0002f399
   168e4:	20000750 	.word	0x20000750
   168e8:	20000950 	.word	0x20000950
   168ec:	0000075b 	.word	0x0000075b
   168f0:	00001770 	.word	0x00001770
   168f4:	20000718 	.word	0x20000718
   168f8:	0002f2e9 	.word	0x0002f2e9
   168fc:	000367e4 	.word	0x000367e4
   16900:	0001dad1 	.word	0x0001dad1
   16904:	00016721 	.word	0x00016721
   16908:	0002f3d9 	.word	0x0002f3d9
   1690c:	00036818 	.word	0x00036818

00016910 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   16910:	b580      	push	{r7, lr}
   16912:	b084      	sub	sp, #16
   16914:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   16916:	1d3b      	adds	r3, r7, #4
   16918:	0018      	movs	r0, r3
   1691a:	4b0b      	ldr	r3, [pc, #44]	; (16948 <configure_extint_channel+0x38>)
   1691c:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   1691e:	1d3b      	adds	r3, r7, #4
   16920:	2237      	movs	r2, #55	; 0x37
   16922:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   16924:	1d3b      	adds	r3, r7, #4
   16926:	2200      	movs	r2, #0
   16928:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1692a:	1d3b      	adds	r3, r7, #4
   1692c:	2201      	movs	r2, #1
   1692e:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   16930:	1d3b      	adds	r3, r7, #4
   16932:	2202      	movs	r2, #2
   16934:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   16936:	1d3b      	adds	r3, r7, #4
   16938:	0019      	movs	r1, r3
   1693a:	2007      	movs	r0, #7
   1693c:	4b03      	ldr	r3, [pc, #12]	; (1694c <configure_extint_channel+0x3c>)
   1693e:	4798      	blx	r3
}
   16940:	46c0      	nop			; (mov r8, r8)
   16942:	46bd      	mov	sp, r7
   16944:	b004      	add	sp, #16
   16946:	bd80      	pop	{r7, pc}
   16948:	000264d1 	.word	0x000264d1
   1694c:	00026505 	.word	0x00026505

00016950 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   16950:	b580      	push	{r7, lr}
   16952:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   16954:	4b06      	ldr	r3, [pc, #24]	; (16970 <configure_extint_callbacks+0x20>)
   16956:	2200      	movs	r2, #0
   16958:	2107      	movs	r1, #7
   1695a:	0018      	movs	r0, r3
   1695c:	4b05      	ldr	r3, [pc, #20]	; (16974 <configure_extint_callbacks+0x24>)
   1695e:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   16960:	2100      	movs	r1, #0
   16962:	2007      	movs	r0, #7
   16964:	4b04      	ldr	r3, [pc, #16]	; (16978 <configure_extint_callbacks+0x28>)
   16966:	4798      	blx	r3
}
   16968:	46c0      	nop			; (mov r8, r8)
   1696a:	46bd      	mov	sp, r7
   1696c:	bd80      	pop	{r7, pc}
   1696e:	46c0      	nop			; (mov r8, r8)
   16970:	0001697d 	.word	0x0001697d
   16974:	000260d1 	.word	0x000260d1
   16978:	00026135 	.word	0x00026135

0001697c <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   1697c:	b5b0      	push	{r4, r5, r7, lr}
   1697e:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   16980:	4b0c      	ldr	r3, [pc, #48]	; (169b4 <extint_detection_callback+0x38>)
   16982:	681b      	ldr	r3, [r3, #0]
   16984:	1c5a      	adds	r2, r3, #1
   16986:	4b0b      	ldr	r3, [pc, #44]	; (169b4 <extint_detection_callback+0x38>)
   16988:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   1698a:	4b0a      	ldr	r3, [pc, #40]	; (169b4 <extint_detection_callback+0x38>)
   1698c:	681b      	ldr	r3, [r3, #0]
   1698e:	2b28      	cmp	r3, #40	; 0x28
   16990:	d902      	bls.n	16998 <extint_detection_callback+0x1c>
   16992:	4b08      	ldr	r3, [pc, #32]	; (169b4 <extint_detection_callback+0x38>)
   16994:	2201      	movs	r2, #1
   16996:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   16998:	4b06      	ldr	r3, [pc, #24]	; (169b4 <extint_detection_callback+0x38>)
   1699a:	681b      	ldr	r3, [r3, #0]
   1699c:	4a06      	ldr	r2, [pc, #24]	; (169b8 <extint_detection_callback+0x3c>)
   1699e:	4807      	ldr	r0, [pc, #28]	; (169bc <extint_detection_callback+0x40>)
   169a0:	213f      	movs	r1, #63	; 0x3f
   169a2:	4c07      	ldr	r4, [pc, #28]	; (169c0 <extint_detection_callback+0x44>)
   169a4:	47a0      	blx	r4
    isPressed = true;
   169a6:	4b07      	ldr	r3, [pc, #28]	; (169c4 <extint_detection_callback+0x48>)
   169a8:	2201      	movs	r2, #1
   169aa:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   169ac:	46c0      	nop			; (mov r8, r8)
   169ae:	46bd      	mov	sp, r7
   169b0:	bdb0      	pop	{r4, r5, r7, pc}
   169b2:	46c0      	nop			; (mov r8, r8)
   169b4:	200000a4 	.word	0x200000a4
   169b8:	0003684c 	.word	0x0003684c
   169bc:	20000064 	.word	0x20000064
   169c0:	00034889 	.word	0x00034889
   169c4:	20000b50 	.word	0x20000b50

000169c8 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   169c8:	b580      	push	{r7, lr}
   169ca:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   169cc:	4a15      	ldr	r2, [pc, #84]	; (16a24 <HTTP_DownloadFileInit+0x5c>)
   169ce:	4b16      	ldr	r3, [pc, #88]	; (16a28 <HTTP_DownloadFileInit+0x60>)
   169d0:	0011      	movs	r1, r2
   169d2:	0018      	movs	r0, r3
   169d4:	4b15      	ldr	r3, [pc, #84]	; (16a2c <HTTP_DownloadFileInit+0x64>)
   169d6:	4798      	blx	r3
   169d8:	1e03      	subs	r3, r0, #0
   169da:	d008      	beq.n	169ee <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   169dc:	4b14      	ldr	r3, [pc, #80]	; (16a30 <HTTP_DownloadFileInit+0x68>)
   169de:	0019      	movs	r1, r3
   169e0:	2001      	movs	r0, #1
   169e2:	4b14      	ldr	r3, [pc, #80]	; (16a34 <HTTP_DownloadFileInit+0x6c>)
   169e4:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   169e6:	e002      	b.n	169ee <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   169e8:	2000      	movs	r0, #0
   169ea:	4b13      	ldr	r3, [pc, #76]	; (16a38 <HTTP_DownloadFileInit+0x70>)
   169ec:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   169ee:	4b0e      	ldr	r3, [pc, #56]	; (16a28 <HTTP_DownloadFileInit+0x60>)
   169f0:	2234      	movs	r2, #52	; 0x34
   169f2:	5c9b      	ldrb	r3, [r3, r2]
   169f4:	2b00      	cmp	r3, #0
   169f6:	d1f7      	bne.n	169e8 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   169f8:	4b10      	ldr	r3, [pc, #64]	; (16a3c <HTTP_DownloadFileInit+0x74>)
   169fa:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   169fc:	4b10      	ldr	r3, [pc, #64]	; (16a40 <HTTP_DownloadFileInit+0x78>)
   169fe:	2201      	movs	r2, #1
   16a00:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   16a02:	4a10      	ldr	r2, [pc, #64]	; (16a44 <HTTP_DownloadFileInit+0x7c>)
   16a04:	4b10      	ldr	r3, [pc, #64]	; (16a48 <HTTP_DownloadFileInit+0x80>)
   16a06:	0011      	movs	r1, r2
   16a08:	0018      	movs	r0, r3
   16a0a:	4b10      	ldr	r3, [pc, #64]	; (16a4c <HTTP_DownloadFileInit+0x84>)
   16a0c:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   16a0e:	4b10      	ldr	r3, [pc, #64]	; (16a50 <HTTP_DownloadFileInit+0x88>)
   16a10:	4798      	blx	r3

    start_download();
   16a12:	4b10      	ldr	r3, [pc, #64]	; (16a54 <HTTP_DownloadFileInit+0x8c>)
   16a14:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   16a16:	4b10      	ldr	r3, [pc, #64]	; (16a58 <HTTP_DownloadFileInit+0x90>)
   16a18:	2203      	movs	r2, #3
   16a1a:	701a      	strb	r2, [r3, #0]
}
   16a1c:	46c0      	nop			; (mov r8, r8)
   16a1e:	46bd      	mov	sp, r7
   16a20:	bd80      	pop	{r7, pc}
   16a22:	46c0      	nop			; (mov r8, r8)
   16a24:	00036010 	.word	0x00036010
   16a28:	20000718 	.word	0x20000718
   16a2c:	0002f58d 	.word	0x0002f58d
   16a30:	00036418 	.word	0x00036418
   16a34:	0001dad1 	.word	0x0001dad1
   16a38:	00021bc1 	.word	0x00021bc1
   16a3c:	0002517d 	.word	0x0002517d
   16a40:	200004b8 	.word	0x200004b8
   16a44:	000160d9 	.word	0x000160d9
   16a48:	000160a5 	.word	0x000160a5
   16a4c:	000251c5 	.word	0x000251c5
   16a50:	0002512d 	.word	0x0002512d
   16a54:	00015ccd 	.word	0x00015ccd
   16a58:	200004a4 	.word	0x200004a4

00016a5c <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   16a5c:	b590      	push	{r4, r7, lr}
   16a5e:	b085      	sub	sp, #20
   16a60:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16a62:	e009      	b.n	16a78 <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   16a64:	2000      	movs	r0, #0
   16a66:	4b2a      	ldr	r3, [pc, #168]	; (16b10 <HTTP_DownloadFileTransaction+0xb4>)
   16a68:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   16a6a:	4b2a      	ldr	r3, [pc, #168]	; (16b14 <HTTP_DownloadFileTransaction+0xb8>)
   16a6c:	0018      	movs	r0, r3
   16a6e:	4b2a      	ldr	r3, [pc, #168]	; (16b18 <HTTP_DownloadFileTransaction+0xbc>)
   16a70:	4798      	blx	r3
        vTaskDelay(5);
   16a72:	2005      	movs	r0, #5
   16a74:	4b29      	ldr	r3, [pc, #164]	; (16b1c <HTTP_DownloadFileTransaction+0xc0>)
   16a76:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16a78:	2010      	movs	r0, #16
   16a7a:	4b29      	ldr	r3, [pc, #164]	; (16b20 <HTTP_DownloadFileTransaction+0xc4>)
   16a7c:	4798      	blx	r3
   16a7e:	0003      	movs	r3, r0
   16a80:	001a      	movs	r2, r3
   16a82:	2301      	movs	r3, #1
   16a84:	4053      	eors	r3, r2
   16a86:	b2db      	uxtb	r3, r3
   16a88:	2b00      	cmp	r3, #0
   16a8a:	d009      	beq.n	16aa0 <HTTP_DownloadFileTransaction+0x44>
   16a8c:	2020      	movs	r0, #32
   16a8e:	4b24      	ldr	r3, [pc, #144]	; (16b20 <HTTP_DownloadFileTransaction+0xc4>)
   16a90:	4798      	blx	r3
   16a92:	0003      	movs	r3, r0
   16a94:	001a      	movs	r2, r3
   16a96:	2301      	movs	r3, #1
   16a98:	4053      	eors	r3, r2
   16a9a:	b2db      	uxtb	r3, r3
   16a9c:	2b00      	cmp	r3, #0
   16a9e:	d1e1      	bne.n	16a64 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   16aa0:	4b20      	ldr	r3, [pc, #128]	; (16b24 <HTTP_DownloadFileTransaction+0xc8>)
   16aa2:	4798      	blx	r3
    vTaskDelay(1000);
   16aa4:	23fa      	movs	r3, #250	; 0xfa
   16aa6:	009b      	lsls	r3, r3, #2
   16aa8:	0018      	movs	r0, r3
   16aaa:	4b1c      	ldr	r3, [pc, #112]	; (16b1c <HTTP_DownloadFileTransaction+0xc0>)
   16aac:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   16aae:	4b1e      	ldr	r3, [pc, #120]	; (16b28 <HTTP_DownloadFileTransaction+0xcc>)
   16ab0:	2200      	movs	r2, #0
   16ab2:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   16ab4:	003b      	movs	r3, r7
   16ab6:	4a1d      	ldr	r2, [pc, #116]	; (16b2c <HTTP_DownloadFileTransaction+0xd0>)
   16ab8:	ca13      	ldmia	r2!, {r0, r1, r4}
   16aba:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16abc:	003b      	movs	r3, r7
   16abe:	2230      	movs	r2, #48	; 0x30
   16ac0:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   16ac2:	230f      	movs	r3, #15
   16ac4:	18fc      	adds	r4, r7, r3
   16ac6:	0039      	movs	r1, r7
   16ac8:	4b19      	ldr	r3, [pc, #100]	; (16b30 <HTTP_DownloadFileTransaction+0xd4>)
   16aca:	220a      	movs	r2, #10
   16acc:	0018      	movs	r0, r3
   16ace:	4b19      	ldr	r3, [pc, #100]	; (16b34 <HTTP_DownloadFileTransaction+0xd8>)
   16ad0:	4798      	blx	r3
   16ad2:	0003      	movs	r3, r0
   16ad4:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   16ad6:	230f      	movs	r3, #15
   16ad8:	18fb      	adds	r3, r7, r3
   16ada:	781b      	ldrb	r3, [r3, #0]
   16adc:	2b00      	cmp	r3, #0
   16ade:	d008      	beq.n	16af2 <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   16ae0:	230f      	movs	r3, #15
   16ae2:	18fb      	adds	r3, r7, r3
   16ae4:	781a      	ldrb	r2, [r3, #0]
   16ae6:	4b14      	ldr	r3, [pc, #80]	; (16b38 <HTTP_DownloadFileTransaction+0xdc>)
   16ae8:	0019      	movs	r1, r3
   16aea:	2000      	movs	r0, #0
   16aec:	4b13      	ldr	r3, [pc, #76]	; (16b3c <HTTP_DownloadFileTransaction+0xe0>)
   16aee:	4798      	blx	r3
   16af0:	e003      	b.n	16afa <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   16af2:	4b13      	ldr	r3, [pc, #76]	; (16b40 <HTTP_DownloadFileTransaction+0xe4>)
   16af4:	0018      	movs	r0, r3
   16af6:	4b13      	ldr	r3, [pc, #76]	; (16b44 <HTTP_DownloadFileTransaction+0xe8>)
   16af8:	4798      	blx	r3
    }
	
	f_close(&file_object);
   16afa:	4b0d      	ldr	r3, [pc, #52]	; (16b30 <HTTP_DownloadFileTransaction+0xd4>)
   16afc:	0018      	movs	r0, r3
   16afe:	4b12      	ldr	r3, [pc, #72]	; (16b48 <HTTP_DownloadFileTransaction+0xec>)
   16b00:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   16b02:	4b12      	ldr	r3, [pc, #72]	; (16b4c <HTTP_DownloadFileTransaction+0xf0>)
   16b04:	2200      	movs	r2, #0
   16b06:	701a      	strb	r2, [r3, #0]
}
   16b08:	46c0      	nop			; (mov r8, r8)
   16b0a:	46bd      	mov	sp, r7
   16b0c:	b005      	add	sp, #20
   16b0e:	bd90      	pop	{r4, r7, pc}
   16b10:	00021bc1 	.word	0x00021bc1
   16b14:	200046e0 	.word	0x200046e0
   16b18:	000322b5 	.word	0x000322b5
   16b1c:	0001bd91 	.word	0x0001bd91
   16b20:	000159a5 	.word	0x000159a5
   16b24:	0002517d 	.word	0x0002517d
   16b28:	200004b8 	.word	0x200004b8
   16b2c:	00036884 	.word	0x00036884
   16b30:	200006ec 	.word	0x200006ec
   16b34:	0002d57d 	.word	0x0002d57d
   16b38:	00036860 	.word	0x00036860
   16b3c:	0001dad1 	.word	0x0001dad1
   16b40:	00036870 	.word	0x00036870
   16b44:	0001d9e5 	.word	0x0001d9e5
   16b48:	0002df7d 	.word	0x0002df7d
   16b4c:	200004a4 	.word	0x200004a4

00016b50 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   16b50:	b580      	push	{r7, lr}
   16b52:	af00      	add	r7, sp, #0
    socketDeinit();
   16b54:	4b18      	ldr	r3, [pc, #96]	; (16bb8 <MQTT_InitRoutine+0x68>)
   16b56:	4798      	blx	r3
    configure_mqtt();
   16b58:	4b18      	ldr	r3, [pc, #96]	; (16bbc <MQTT_InitRoutine+0x6c>)
   16b5a:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   16b5c:	4a18      	ldr	r2, [pc, #96]	; (16bc0 <MQTT_InitRoutine+0x70>)
   16b5e:	4b19      	ldr	r3, [pc, #100]	; (16bc4 <MQTT_InitRoutine+0x74>)
   16b60:	0011      	movs	r1, r2
   16b62:	0018      	movs	r0, r3
   16b64:	4b18      	ldr	r3, [pc, #96]	; (16bc8 <MQTT_InitRoutine+0x78>)
   16b66:	4798      	blx	r3
    socketInit();
   16b68:	4b18      	ldr	r3, [pc, #96]	; (16bcc <MQTT_InitRoutine+0x7c>)
   16b6a:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   16b6c:	4b18      	ldr	r3, [pc, #96]	; (16bd0 <MQTT_InitRoutine+0x80>)
   16b6e:	2234      	movs	r2, #52	; 0x34
   16b70:	5c9b      	ldrb	r3, [r3, r2]
   16b72:	2201      	movs	r2, #1
   16b74:	4053      	eors	r3, r2
   16b76:	b2db      	uxtb	r3, r3
   16b78:	2b00      	cmp	r3, #0
   16b7a:	d00c      	beq.n	16b96 <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   16b7c:	4a15      	ldr	r2, [pc, #84]	; (16bd4 <MQTT_InitRoutine+0x84>)
   16b7e:	4b14      	ldr	r3, [pc, #80]	; (16bd0 <MQTT_InitRoutine+0x80>)
   16b80:	0011      	movs	r1, r2
   16b82:	0018      	movs	r0, r3
   16b84:	4b14      	ldr	r3, [pc, #80]	; (16bd8 <MQTT_InitRoutine+0x88>)
   16b86:	4798      	blx	r3
   16b88:	1e03      	subs	r3, r0, #0
   16b8a:	d004      	beq.n	16b96 <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   16b8c:	4b13      	ldr	r3, [pc, #76]	; (16bdc <MQTT_InitRoutine+0x8c>)
   16b8e:	0019      	movs	r1, r3
   16b90:	2001      	movs	r0, #1
   16b92:	4b13      	ldr	r3, [pc, #76]	; (16be0 <MQTT_InitRoutine+0x90>)
   16b94:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   16b96:	4b0e      	ldr	r3, [pc, #56]	; (16bd0 <MQTT_InitRoutine+0x80>)
   16b98:	2234      	movs	r2, #52	; 0x34
   16b9a:	5c9b      	ldrb	r3, [r3, r2]
   16b9c:	2b00      	cmp	r3, #0
   16b9e:	d004      	beq.n	16baa <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   16ba0:	4b10      	ldr	r3, [pc, #64]	; (16be4 <MQTT_InitRoutine+0x94>)
   16ba2:	0019      	movs	r1, r3
   16ba4:	2001      	movs	r0, #1
   16ba6:	4b0e      	ldr	r3, [pc, #56]	; (16be0 <MQTT_InitRoutine+0x90>)
   16ba8:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   16baa:	4b0f      	ldr	r3, [pc, #60]	; (16be8 <MQTT_InitRoutine+0x98>)
   16bac:	2201      	movs	r2, #1
   16bae:	701a      	strb	r2, [r3, #0]
}
   16bb0:	46c0      	nop			; (mov r8, r8)
   16bb2:	46bd      	mov	sp, r7
   16bb4:	bd80      	pop	{r7, pc}
   16bb6:	46c0      	nop			; (mov r8, r8)
   16bb8:	0002517d 	.word	0x0002517d
   16bbc:	00016859 	.word	0x00016859
   16bc0:	00016465 	.word	0x00016465
   16bc4:	00016431 	.word	0x00016431
   16bc8:	000251c5 	.word	0x000251c5
   16bcc:	0002512d 	.word	0x0002512d
   16bd0:	20000718 	.word	0x20000718
   16bd4:	00036010 	.word	0x00036010
   16bd8:	0002f459 	.word	0x0002f459
   16bdc:	00036418 	.word	0x00036418
   16be0:	0001dad1 	.word	0x0001dad1
   16be4:	00036890 	.word	0x00036890
   16be8:	200004a4 	.word	0x200004a4

00016bec <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   16bec:	b580      	push	{r7, lr}
   16bee:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   16bf0:	2000      	movs	r0, #0
   16bf2:	4b0b      	ldr	r3, [pc, #44]	; (16c20 <MQTT_HandleTransactions+0x34>)
   16bf4:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   16bf6:	4b0b      	ldr	r3, [pc, #44]	; (16c24 <MQTT_HandleTransactions+0x38>)
   16bf8:	0018      	movs	r0, r3
   16bfa:	4b0b      	ldr	r3, [pc, #44]	; (16c28 <MQTT_HandleTransactions+0x3c>)
   16bfc:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   16bfe:	4b0b      	ldr	r3, [pc, #44]	; (16c2c <MQTT_HandleTransactions+0x40>)
   16c00:	4798      	blx	r3
    MQTT_HandleImuMessages();
   16c02:	4b0b      	ldr	r3, [pc, #44]	; (16c30 <MQTT_HandleTransactions+0x44>)
   16c04:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   16c06:	4b0b      	ldr	r3, [pc, #44]	; (16c34 <MQTT_HandleTransactions+0x48>)
   16c08:	2234      	movs	r2, #52	; 0x34
   16c0a:	5c9b      	ldrb	r3, [r3, r2]
   16c0c:	2b00      	cmp	r3, #0
   16c0e:	d004      	beq.n	16c1a <MQTT_HandleTransactions+0x2e>
   16c10:	4b08      	ldr	r3, [pc, #32]	; (16c34 <MQTT_HandleTransactions+0x48>)
   16c12:	2164      	movs	r1, #100	; 0x64
   16c14:	0018      	movs	r0, r3
   16c16:	4b08      	ldr	r3, [pc, #32]	; (16c38 <MQTT_HandleTransactions+0x4c>)
   16c18:	4798      	blx	r3
}
   16c1a:	46c0      	nop			; (mov r8, r8)
   16c1c:	46bd      	mov	sp, r7
   16c1e:	bd80      	pop	{r7, pc}
   16c20:	00021bc1 	.word	0x00021bc1
   16c24:	200046e0 	.word	0x200046e0
   16c28:	000322b5 	.word	0x000322b5
   16c2c:	00016cc9 	.word	0x00016cc9
   16c30:	00016c3d 	.word	0x00016c3d
   16c34:	20000718 	.word	0x20000718
   16c38:	0002f689 	.word	0x0002f689

00016c3c <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   16c3c:	b590      	push	{r4, r7, lr}
   16c3e:	b085      	sub	sp, #20
   16c40:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   16c42:	4b18      	ldr	r3, [pc, #96]	; (16ca4 <MQTT_HandleImuMessages+0x68>)
   16c44:	681b      	ldr	r3, [r3, #0]
   16c46:	0039      	movs	r1, r7
   16c48:	2200      	movs	r2, #0
   16c4a:	0018      	movs	r0, r3
   16c4c:	4b16      	ldr	r3, [pc, #88]	; (16ca8 <MQTT_HandleImuMessages+0x6c>)
   16c4e:	4798      	blx	r3
   16c50:	0003      	movs	r3, r0
   16c52:	2b01      	cmp	r3, #1
   16c54:	d121      	bne.n	16c9a <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   16c56:	003b      	movs	r3, r7
   16c58:	2200      	movs	r2, #0
   16c5a:	5e9b      	ldrsh	r3, [r3, r2]
   16c5c:	001c      	movs	r4, r3
   16c5e:	003b      	movs	r3, r7
   16c60:	2202      	movs	r2, #2
   16c62:	5e9b      	ldrsh	r3, [r3, r2]
   16c64:	0019      	movs	r1, r3
   16c66:	003b      	movs	r3, r7
   16c68:	2204      	movs	r2, #4
   16c6a:	5e9b      	ldrsh	r3, [r3, r2]
   16c6c:	4a0f      	ldr	r2, [pc, #60]	; (16cac <MQTT_HandleImuMessages+0x70>)
   16c6e:	4810      	ldr	r0, [pc, #64]	; (16cb0 <MQTT_HandleImuMessages+0x74>)
   16c70:	9301      	str	r3, [sp, #4]
   16c72:	9100      	str	r1, [sp, #0]
   16c74:	0023      	movs	r3, r4
   16c76:	213f      	movs	r1, #63	; 0x3f
   16c78:	4c0e      	ldr	r4, [pc, #56]	; (16cb4 <MQTT_HandleImuMessages+0x78>)
   16c7a:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   16c7c:	4b0c      	ldr	r3, [pc, #48]	; (16cb0 <MQTT_HandleImuMessages+0x74>)
   16c7e:	0018      	movs	r0, r3
   16c80:	4b0d      	ldr	r3, [pc, #52]	; (16cb8 <MQTT_HandleImuMessages+0x7c>)
   16c82:	4798      	blx	r3
   16c84:	0004      	movs	r4, r0
   16c86:	4a0a      	ldr	r2, [pc, #40]	; (16cb0 <MQTT_HandleImuMessages+0x74>)
   16c88:	490c      	ldr	r1, [pc, #48]	; (16cbc <MQTT_HandleImuMessages+0x80>)
   16c8a:	480d      	ldr	r0, [pc, #52]	; (16cc0 <MQTT_HandleImuMessages+0x84>)
   16c8c:	2300      	movs	r3, #0
   16c8e:	9301      	str	r3, [sp, #4]
   16c90:	2301      	movs	r3, #1
   16c92:	9300      	str	r3, [sp, #0]
   16c94:	0023      	movs	r3, r4
   16c96:	4c0b      	ldr	r4, [pc, #44]	; (16cc4 <MQTT_HandleImuMessages+0x88>)
   16c98:	47a0      	blx	r4
    }
}
   16c9a:	46c0      	nop			; (mov r8, r8)
   16c9c:	46bd      	mov	sp, r7
   16c9e:	b003      	add	sp, #12
   16ca0:	bd90      	pop	{r4, r7, pc}
   16ca2:	46c0      	nop			; (mov r8, r8)
   16ca4:	200004b0 	.word	0x200004b0
   16ca8:	0001abe5 	.word	0x0001abe5
   16cac:	000368ac 	.word	0x000368ac
   16cb0:	20000024 	.word	0x20000024
   16cb4:	00034889 	.word	0x00034889
   16cb8:	000349e7 	.word	0x000349e7
   16cbc:	00036774 	.word	0x00036774
   16cc0:	20000718 	.word	0x20000718
   16cc4:	0002f5d5 	.word	0x0002f5d5

00016cc8 <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
   16cc8:	b590      	push	{r4, r7, lr}
   16cca:	b08b      	sub	sp, #44	; 0x2c
   16ccc:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   16cce:	4b39      	ldr	r3, [pc, #228]	; (16db4 <MQTT_HandleGameMessages+0xec>)
   16cd0:	681b      	ldr	r3, [r3, #0]
   16cd2:	2208      	movs	r2, #8
   16cd4:	18b9      	adds	r1, r7, r2
   16cd6:	2200      	movs	r2, #0
   16cd8:	0018      	movs	r0, r3
   16cda:	4b37      	ldr	r3, [pc, #220]	; (16db8 <MQTT_HandleGameMessages+0xf0>)
   16cdc:	4798      	blx	r3
   16cde:	0003      	movs	r3, r0
   16ce0:	2b01      	cmp	r3, #1
   16ce2:	d163      	bne.n	16dac <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   16ce4:	4b35      	ldr	r3, [pc, #212]	; (16dbc <MQTT_HandleGameMessages+0xf4>)
   16ce6:	4a36      	ldr	r2, [pc, #216]	; (16dc0 <MQTT_HandleGameMessages+0xf8>)
   16ce8:	ca03      	ldmia	r2!, {r0, r1}
   16cea:	c303      	stmia	r3!, {r0, r1}
   16cec:	8812      	ldrh	r2, [r2, #0]
   16cee:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   16cf0:	2300      	movs	r3, #0
   16cf2:	61fb      	str	r3, [r7, #28]
   16cf4:	e02d      	b.n	16d52 <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   16cf6:	2308      	movs	r3, #8
   16cf8:	18fa      	adds	r2, r7, r3
   16cfa:	69fb      	ldr	r3, [r7, #28]
   16cfc:	18d3      	adds	r3, r2, r3
   16cfe:	781b      	ldrb	r3, [r3, #0]
   16d00:	2bff      	cmp	r3, #255	; 0xff
   16d02:	d02a      	beq.n	16d5a <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   16d04:	2308      	movs	r3, #8
   16d06:	18fa      	adds	r2, r7, r3
   16d08:	69fb      	ldr	r3, [r7, #28]
   16d0a:	18d3      	adds	r3, r2, r3
   16d0c:	781b      	ldrb	r3, [r3, #0]
   16d0e:	4a2d      	ldr	r2, [pc, #180]	; (16dc4 <MQTT_HandleGameMessages+0xfc>)
   16d10:	0038      	movs	r0, r7
   16d12:	2103      	movs	r1, #3
   16d14:	4c2c      	ldr	r4, [pc, #176]	; (16dc8 <MQTT_HandleGameMessages+0x100>)
   16d16:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   16d18:	003a      	movs	r2, r7
   16d1a:	4b28      	ldr	r3, [pc, #160]	; (16dbc <MQTT_HandleGameMessages+0xf4>)
   16d1c:	0011      	movs	r1, r2
   16d1e:	0018      	movs	r0, r3
   16d20:	4b2a      	ldr	r3, [pc, #168]	; (16dcc <MQTT_HandleGameMessages+0x104>)
   16d22:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   16d24:	69fb      	ldr	r3, [r7, #28]
   16d26:	3301      	adds	r3, #1
   16d28:	2208      	movs	r2, #8
   16d2a:	18ba      	adds	r2, r7, r2
   16d2c:	5cd3      	ldrb	r3, [r2, r3]
   16d2e:	2bff      	cmp	r3, #255	; 0xff
   16d30:	d00c      	beq.n	16d4c <MQTT_HandleGameMessages+0x84>
   16d32:	69fb      	ldr	r3, [r7, #28]
   16d34:	3301      	adds	r3, #1
   16d36:	2b13      	cmp	r3, #19
   16d38:	dc08      	bgt.n	16d4c <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   16d3a:	003b      	movs	r3, r7
   16d3c:	222c      	movs	r2, #44	; 0x2c
   16d3e:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   16d40:	003a      	movs	r2, r7
   16d42:	4b1e      	ldr	r3, [pc, #120]	; (16dbc <MQTT_HandleGameMessages+0xf4>)
   16d44:	0011      	movs	r1, r2
   16d46:	0018      	movs	r0, r3
   16d48:	4b20      	ldr	r3, [pc, #128]	; (16dcc <MQTT_HandleGameMessages+0x104>)
   16d4a:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   16d4c:	69fb      	ldr	r3, [r7, #28]
   16d4e:	3301      	adds	r3, #1
   16d50:	61fb      	str	r3, [r7, #28]
   16d52:	69fb      	ldr	r3, [r7, #28]
   16d54:	2b13      	cmp	r3, #19
   16d56:	ddce      	ble.n	16cf6 <MQTT_HandleGameMessages+0x2e>
   16d58:	e000      	b.n	16d5c <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   16d5a:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   16d5c:	4b17      	ldr	r3, [pc, #92]	; (16dbc <MQTT_HandleGameMessages+0xf4>)
   16d5e:	0018      	movs	r0, r3
   16d60:	4b1b      	ldr	r3, [pc, #108]	; (16dd0 <MQTT_HandleGameMessages+0x108>)
   16d62:	4798      	blx	r3
   16d64:	0003      	movs	r3, r0
   16d66:	001a      	movs	r2, r3
   16d68:	4b14      	ldr	r3, [pc, #80]	; (16dbc <MQTT_HandleGameMessages+0xf4>)
   16d6a:	18d2      	adds	r2, r2, r3
   16d6c:	4b19      	ldr	r3, [pc, #100]	; (16dd4 <MQTT_HandleGameMessages+0x10c>)
   16d6e:	0010      	movs	r0, r2
   16d70:	0019      	movs	r1, r3
   16d72:	2303      	movs	r3, #3
   16d74:	001a      	movs	r2, r3
   16d76:	4b18      	ldr	r3, [pc, #96]	; (16dd8 <MQTT_HandleGameMessages+0x110>)
   16d78:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   16d7a:	4b10      	ldr	r3, [pc, #64]	; (16dbc <MQTT_HandleGameMessages+0xf4>)
   16d7c:	0019      	movs	r1, r3
   16d7e:	2001      	movs	r0, #1
   16d80:	4b16      	ldr	r3, [pc, #88]	; (16ddc <MQTT_HandleGameMessages+0x114>)
   16d82:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   16d84:	4b16      	ldr	r3, [pc, #88]	; (16de0 <MQTT_HandleGameMessages+0x118>)
   16d86:	0019      	movs	r1, r3
   16d88:	2001      	movs	r0, #1
   16d8a:	4b14      	ldr	r3, [pc, #80]	; (16ddc <MQTT_HandleGameMessages+0x114>)
   16d8c:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   16d8e:	4b0b      	ldr	r3, [pc, #44]	; (16dbc <MQTT_HandleGameMessages+0xf4>)
   16d90:	0018      	movs	r0, r3
   16d92:	4b0f      	ldr	r3, [pc, #60]	; (16dd0 <MQTT_HandleGameMessages+0x108>)
   16d94:	4798      	blx	r3
   16d96:	0004      	movs	r4, r0
   16d98:	4a08      	ldr	r2, [pc, #32]	; (16dbc <MQTT_HandleGameMessages+0xf4>)
   16d9a:	4912      	ldr	r1, [pc, #72]	; (16de4 <MQTT_HandleGameMessages+0x11c>)
   16d9c:	4812      	ldr	r0, [pc, #72]	; (16de8 <MQTT_HandleGameMessages+0x120>)
   16d9e:	2300      	movs	r3, #0
   16da0:	9301      	str	r3, [sp, #4]
   16da2:	2301      	movs	r3, #1
   16da4:	9300      	str	r3, [sp, #0]
   16da6:	0023      	movs	r3, r4
   16da8:	4c10      	ldr	r4, [pc, #64]	; (16dec <MQTT_HandleGameMessages+0x124>)
   16daa:	47a0      	blx	r4
    }
}
   16dac:	46c0      	nop			; (mov r8, r8)
   16dae:	46bd      	mov	sp, r7
   16db0:	b009      	add	sp, #36	; 0x24
   16db2:	bd90      	pop	{r4, r7, pc}
   16db4:	200004ac 	.word	0x200004ac
   16db8:	0001abe5 	.word	0x0001abe5
   16dbc:	20000024 	.word	0x20000024
   16dc0:	000365b4 	.word	0x000365b4
   16dc4:	000368d0 	.word	0x000368d0
   16dc8:	00034889 	.word	0x00034889
   16dcc:	0003496d 	.word	0x0003496d
   16dd0:	000349e7 	.word	0x000349e7
   16dd4:	000368d4 	.word	0x000368d4
   16dd8:	000345f9 	.word	0x000345f9
   16ddc:	0001dad1 	.word	0x0001dad1
   16de0:	000368d8 	.word	0x000368d8
   16de4:	000368dc 	.word	0x000368dc
   16de8:	20000718 	.word	0x20000718
   16dec:	0002f5d5 	.word	0x0002f5d5

00016df0 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   16df0:	b590      	push	{r4, r7, lr}
   16df2:	b08d      	sub	sp, #52	; 0x34
   16df4:	af02      	add	r7, sp, #8
   16df6:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   16df8:	2064      	movs	r0, #100	; 0x64
   16dfa:	4b79      	ldr	r3, [pc, #484]	; (16fe0 <vWifiTask+0x1f0>)
   16dfc:	4798      	blx	r3
    init_state();
   16dfe:	4b79      	ldr	r3, [pc, #484]	; (16fe4 <vWifiTask+0x1f4>)
   16e00:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   16e02:	2200      	movs	r2, #0
   16e04:	2104      	movs	r1, #4
   16e06:	2005      	movs	r0, #5
   16e08:	4b77      	ldr	r3, [pc, #476]	; (16fe8 <vWifiTask+0x1f8>)
   16e0a:	4798      	blx	r3
   16e0c:	0002      	movs	r2, r0
   16e0e:	4b77      	ldr	r3, [pc, #476]	; (16fec <vWifiTask+0x1fc>)
   16e10:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   16e12:	2200      	movs	r2, #0
   16e14:	2106      	movs	r1, #6
   16e16:	2005      	movs	r0, #5
   16e18:	4b73      	ldr	r3, [pc, #460]	; (16fe8 <vWifiTask+0x1f8>)
   16e1a:	4798      	blx	r3
   16e1c:	0002      	movs	r2, r0
   16e1e:	4b74      	ldr	r3, [pc, #464]	; (16ff0 <vWifiTask+0x200>)
   16e20:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   16e22:	2200      	movs	r2, #0
   16e24:	2114      	movs	r1, #20
   16e26:	2002      	movs	r0, #2
   16e28:	4b6f      	ldr	r3, [pc, #444]	; (16fe8 <vWifiTask+0x1f8>)
   16e2a:	4798      	blx	r3
   16e2c:	0002      	movs	r2, r0
   16e2e:	4b71      	ldr	r3, [pc, #452]	; (16ff4 <vWifiTask+0x204>)
   16e30:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   16e32:	2200      	movs	r2, #0
   16e34:	2102      	movs	r1, #2
   16e36:	2005      	movs	r0, #5
   16e38:	4b6b      	ldr	r3, [pc, #428]	; (16fe8 <vWifiTask+0x1f8>)
   16e3a:	4798      	blx	r3
   16e3c:	0002      	movs	r2, r0
   16e3e:	4b6e      	ldr	r3, [pc, #440]	; (16ff8 <vWifiTask+0x208>)
   16e40:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
   16e42:	4b6a      	ldr	r3, [pc, #424]	; (16fec <vWifiTask+0x1fc>)
   16e44:	681b      	ldr	r3, [r3, #0]
   16e46:	2b00      	cmp	r3, #0
   16e48:	d00b      	beq.n	16e62 <vWifiTask+0x72>
   16e4a:	4b69      	ldr	r3, [pc, #420]	; (16ff0 <vWifiTask+0x200>)
   16e4c:	681b      	ldr	r3, [r3, #0]
   16e4e:	2b00      	cmp	r3, #0
   16e50:	d007      	beq.n	16e62 <vWifiTask+0x72>
   16e52:	4b68      	ldr	r3, [pc, #416]	; (16ff4 <vWifiTask+0x204>)
   16e54:	681b      	ldr	r3, [r3, #0]
   16e56:	2b00      	cmp	r3, #0
   16e58:	d003      	beq.n	16e62 <vWifiTask+0x72>
   16e5a:	4b67      	ldr	r3, [pc, #412]	; (16ff8 <vWifiTask+0x208>)
   16e5c:	681b      	ldr	r3, [r3, #0]
   16e5e:	2b00      	cmp	r3, #0
   16e60:	d103      	bne.n	16e6a <vWifiTask+0x7a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   16e62:	4b66      	ldr	r3, [pc, #408]	; (16ffc <vWifiTask+0x20c>)
   16e64:	0018      	movs	r0, r3
   16e66:	4b66      	ldr	r3, [pc, #408]	; (17000 <vWifiTask+0x210>)
   16e68:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   16e6a:	4b66      	ldr	r3, [pc, #408]	; (17004 <vWifiTask+0x214>)
   16e6c:	0018      	movs	r0, r3
   16e6e:	4b64      	ldr	r3, [pc, #400]	; (17000 <vWifiTask+0x210>)
   16e70:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   16e72:	4b65      	ldr	r3, [pc, #404]	; (17008 <vWifiTask+0x218>)
   16e74:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   16e76:	4b65      	ldr	r3, [pc, #404]	; (1700c <vWifiTask+0x21c>)
   16e78:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   16e7a:	4b65      	ldr	r3, [pc, #404]	; (17010 <vWifiTask+0x220>)
   16e7c:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   16e7e:	4b65      	ldr	r3, [pc, #404]	; (17014 <vWifiTask+0x224>)
   16e80:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   16e82:	4b65      	ldr	r3, [pc, #404]	; (17018 <vWifiTask+0x228>)
   16e84:	4798      	blx	r3
    configure_extint_callbacks();
   16e86:	4b65      	ldr	r3, [pc, #404]	; (1701c <vWifiTask+0x22c>)
   16e88:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   16e8a:	230c      	movs	r3, #12
   16e8c:	18fb      	adds	r3, r7, r3
   16e8e:	2218      	movs	r2, #24
   16e90:	2100      	movs	r1, #0
   16e92:	0018      	movs	r0, r3
   16e94:	4b62      	ldr	r3, [pc, #392]	; (17020 <vWifiTask+0x230>)
   16e96:	4798      	blx	r3

    nm_bsp_init();
   16e98:	4b62      	ldr	r3, [pc, #392]	; (17024 <vWifiTask+0x234>)
   16e9a:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   16e9c:	230c      	movs	r3, #12
   16e9e:	18fb      	adds	r3, r7, r3
   16ea0:	4a61      	ldr	r2, [pc, #388]	; (17028 <vWifiTask+0x238>)
   16ea2:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   16ea4:	2327      	movs	r3, #39	; 0x27
   16ea6:	18fc      	adds	r4, r7, r3
   16ea8:	230c      	movs	r3, #12
   16eaa:	18fb      	adds	r3, r7, r3
   16eac:	0018      	movs	r0, r3
   16eae:	4b5f      	ldr	r3, [pc, #380]	; (1702c <vWifiTask+0x23c>)
   16eb0:	4798      	blx	r3
   16eb2:	0003      	movs	r3, r0
   16eb4:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   16eb6:	2327      	movs	r3, #39	; 0x27
   16eb8:	18fb      	adds	r3, r7, r3
   16eba:	781b      	ldrb	r3, [r3, #0]
   16ebc:	b25b      	sxtb	r3, r3
   16ebe:	2b00      	cmp	r3, #0
   16ec0:	d009      	beq.n	16ed6 <vWifiTask+0xe6>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   16ec2:	2327      	movs	r3, #39	; 0x27
   16ec4:	18fb      	adds	r3, r7, r3
   16ec6:	2200      	movs	r2, #0
   16ec8:	569a      	ldrsb	r2, [r3, r2]
   16eca:	4b59      	ldr	r3, [pc, #356]	; (17030 <vWifiTask+0x240>)
   16ecc:	0019      	movs	r1, r3
   16ece:	2001      	movs	r0, #1
   16ed0:	4b58      	ldr	r3, [pc, #352]	; (17034 <vWifiTask+0x244>)
   16ed2:	4798      	blx	r3
        while (1) {
   16ed4:	e7fe      	b.n	16ed4 <vWifiTask+0xe4>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   16ed6:	4a58      	ldr	r2, [pc, #352]	; (17038 <vWifiTask+0x248>)
   16ed8:	4b58      	ldr	r3, [pc, #352]	; (1703c <vWifiTask+0x24c>)
   16eda:	0019      	movs	r1, r3
   16edc:	2001      	movs	r0, #1
   16ede:	4b55      	ldr	r3, [pc, #340]	; (17034 <vWifiTask+0x244>)
   16ee0:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   16ee2:	4b57      	ldr	r3, [pc, #348]	; (17040 <vWifiTask+0x250>)
   16ee4:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   16ee6:	4a57      	ldr	r2, [pc, #348]	; (17044 <vWifiTask+0x254>)
   16ee8:	4b57      	ldr	r3, [pc, #348]	; (17048 <vWifiTask+0x258>)
   16eea:	0011      	movs	r1, r2
   16eec:	0018      	movs	r0, r3
   16eee:	4b57      	ldr	r3, [pc, #348]	; (1704c <vWifiTask+0x25c>)
   16ef0:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   16ef2:	4a57      	ldr	r2, [pc, #348]	; (17050 <vWifiTask+0x260>)
   16ef4:	4850      	ldr	r0, [pc, #320]	; (17038 <vWifiTask+0x248>)
   16ef6:	23ff      	movs	r3, #255	; 0xff
   16ef8:	9300      	str	r3, [sp, #0]
   16efa:	0013      	movs	r3, r2
   16efc:	2202      	movs	r2, #2
   16efe:	2107      	movs	r1, #7
   16f00:	4c54      	ldr	r4, [pc, #336]	; (17054 <vWifiTask+0x264>)
   16f02:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   16f04:	e006      	b.n	16f14 <vWifiTask+0x124>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   16f06:	2000      	movs	r0, #0
   16f08:	4b53      	ldr	r3, [pc, #332]	; (17058 <vWifiTask+0x268>)
   16f0a:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   16f0c:	4b53      	ldr	r3, [pc, #332]	; (1705c <vWifiTask+0x26c>)
   16f0e:	0018      	movs	r0, r3
   16f10:	4b53      	ldr	r3, [pc, #332]	; (17060 <vWifiTask+0x270>)
   16f12:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   16f14:	2002      	movs	r0, #2
   16f16:	4b53      	ldr	r3, [pc, #332]	; (17064 <vWifiTask+0x274>)
   16f18:	4798      	blx	r3
   16f1a:	0003      	movs	r3, r0
   16f1c:	001a      	movs	r2, r3
   16f1e:	2301      	movs	r3, #1
   16f20:	4053      	eors	r3, r2
   16f22:	b2db      	uxtb	r3, r3
   16f24:	2b00      	cmp	r3, #0
   16f26:	d1ee      	bne.n	16f06 <vWifiTask+0x116>
    }

    vTaskDelay(1000);
   16f28:	23fa      	movs	r3, #250	; 0xfa
   16f2a:	009b      	lsls	r3, r3, #2
   16f2c:	0018      	movs	r0, r3
   16f2e:	4b2c      	ldr	r3, [pc, #176]	; (16fe0 <vWifiTask+0x1f0>)
   16f30:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   16f32:	4b4d      	ldr	r3, [pc, #308]	; (17068 <vWifiTask+0x278>)
   16f34:	2201      	movs	r2, #1
   16f36:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   16f38:	4b4b      	ldr	r3, [pc, #300]	; (17068 <vWifiTask+0x278>)
   16f3a:	781b      	ldrb	r3, [r3, #0]
   16f3c:	b25b      	sxtb	r3, r3
   16f3e:	2b01      	cmp	r3, #1
   16f40:	d00b      	beq.n	16f5a <vWifiTask+0x16a>
   16f42:	dc02      	bgt.n	16f4a <vWifiTask+0x15a>
   16f44:	2b00      	cmp	r3, #0
   16f46:	d005      	beq.n	16f54 <vWifiTask+0x164>
   16f48:	e010      	b.n	16f6c <vWifiTask+0x17c>
   16f4a:	2b02      	cmp	r3, #2
   16f4c:	d008      	beq.n	16f60 <vWifiTask+0x170>
   16f4e:	2b03      	cmp	r3, #3
   16f50:	d009      	beq.n	16f66 <vWifiTask+0x176>
   16f52:	e00b      	b.n	16f6c <vWifiTask+0x17c>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   16f54:	4b45      	ldr	r3, [pc, #276]	; (1706c <vWifiTask+0x27c>)
   16f56:	4798      	blx	r3

                break;
   16f58:	e00c      	b.n	16f74 <vWifiTask+0x184>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   16f5a:	4b45      	ldr	r3, [pc, #276]	; (17070 <vWifiTask+0x280>)
   16f5c:	4798      	blx	r3
                break;
   16f5e:	e009      	b.n	16f74 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   16f60:	4b44      	ldr	r3, [pc, #272]	; (17074 <vWifiTask+0x284>)
   16f62:	4798      	blx	r3
                break;
   16f64:	e006      	b.n	16f74 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   16f66:	4b44      	ldr	r3, [pc, #272]	; (17078 <vWifiTask+0x288>)
   16f68:	4798      	blx	r3
                break;
   16f6a:	e003      	b.n	16f74 <vWifiTask+0x184>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   16f6c:	4b3e      	ldr	r3, [pc, #248]	; (17068 <vWifiTask+0x278>)
   16f6e:	2200      	movs	r2, #0
   16f70:	701a      	strb	r2, [r3, #0]
                break;
   16f72:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   16f74:	230b      	movs	r3, #11
   16f76:	18fb      	adds	r3, r7, r3
   16f78:	2200      	movs	r2, #0
   16f7a:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   16f7c:	4b1b      	ldr	r3, [pc, #108]	; (16fec <vWifiTask+0x1fc>)
   16f7e:	681b      	ldr	r3, [r3, #0]
   16f80:	220b      	movs	r2, #11
   16f82:	18b9      	adds	r1, r7, r2
   16f84:	2200      	movs	r2, #0
   16f86:	0018      	movs	r0, r3
   16f88:	4b3c      	ldr	r3, [pc, #240]	; (1707c <vWifiTask+0x28c>)
   16f8a:	4798      	blx	r3
   16f8c:	0003      	movs	r3, r0
   16f8e:	2b01      	cmp	r3, #1
   16f90:	d105      	bne.n	16f9e <vWifiTask+0x1ae>
            wifiStateMachine = DataToReceive;  // Update new state
   16f92:	230b      	movs	r3, #11
   16f94:	18fb      	adds	r3, r7, r3
   16f96:	781b      	ldrb	r3, [r3, #0]
   16f98:	b25a      	sxtb	r2, r3
   16f9a:	4b33      	ldr	r3, [pc, #204]	; (17068 <vWifiTask+0x278>)
   16f9c:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   16f9e:	4b38      	ldr	r3, [pc, #224]	; (17080 <vWifiTask+0x290>)
   16fa0:	781b      	ldrb	r3, [r3, #0]
   16fa2:	b2db      	uxtb	r3, r3
   16fa4:	2b00      	cmp	r3, #0
   16fa6:	d017      	beq.n	16fd8 <vWifiTask+0x1e8>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   16fa8:	4b36      	ldr	r3, [pc, #216]	; (17084 <vWifiTask+0x294>)
   16faa:	0018      	movs	r0, r3
   16fac:	4b36      	ldr	r3, [pc, #216]	; (17088 <vWifiTask+0x298>)
   16fae:	4798      	blx	r3
   16fb0:	0004      	movs	r4, r0
   16fb2:	4a34      	ldr	r2, [pc, #208]	; (17084 <vWifiTask+0x294>)
   16fb4:	4935      	ldr	r1, [pc, #212]	; (1708c <vWifiTask+0x29c>)
   16fb6:	4836      	ldr	r0, [pc, #216]	; (17090 <vWifiTask+0x2a0>)
   16fb8:	2300      	movs	r3, #0
   16fba:	9301      	str	r3, [sp, #4]
   16fbc:	2301      	movs	r3, #1
   16fbe:	9300      	str	r3, [sp, #0]
   16fc0:	0023      	movs	r3, r4
   16fc2:	4c34      	ldr	r4, [pc, #208]	; (17094 <vWifiTask+0x2a4>)
   16fc4:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   16fc6:	4a2f      	ldr	r2, [pc, #188]	; (17084 <vWifiTask+0x294>)
   16fc8:	4b33      	ldr	r3, [pc, #204]	; (17098 <vWifiTask+0x2a8>)
   16fca:	0019      	movs	r1, r3
   16fcc:	2001      	movs	r0, #1
   16fce:	4b19      	ldr	r3, [pc, #100]	; (17034 <vWifiTask+0x244>)
   16fd0:	4798      	blx	r3
            isPressed = false;
   16fd2:	4b2b      	ldr	r3, [pc, #172]	; (17080 <vWifiTask+0x290>)
   16fd4:	2200      	movs	r2, #0
   16fd6:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   16fd8:	2064      	movs	r0, #100	; 0x64
   16fda:	4b01      	ldr	r3, [pc, #4]	; (16fe0 <vWifiTask+0x1f0>)
   16fdc:	4798      	blx	r3
    while (1) {
   16fde:	e7ab      	b.n	16f38 <vWifiTask+0x148>
   16fe0:	0001bd91 	.word	0x0001bd91
   16fe4:	00015935 	.word	0x00015935
   16fe8:	0001a085 	.word	0x0001a085
   16fec:	200004a8 	.word	0x200004a8
   16ff0:	200004b0 	.word	0x200004b0
   16ff4:	200004ac 	.word	0x200004ac
   16ff8:	200004b4 	.word	0x200004b4
   16ffc:	000368f0 	.word	0x000368f0
   17000:	0001d9e5 	.word	0x0001d9e5
   17004:	00036918 	.word	0x00036918
   17008:	00016371 	.word	0x00016371
   1700c:	000163ad 	.word	0x000163ad
   17010:	00016859 	.word	0x00016859
   17014:	0001628d 	.word	0x0001628d
   17018:	00016911 	.word	0x00016911
   1701c:	00016951 	.word	0x00016951
   17020:	0003462f 	.word	0x0003462f
   17024:	0001fef5 	.word	0x0001fef5
   17028:	00016139 	.word	0x00016139
   1702c:	000219cd 	.word	0x000219cd
   17030:	00036934 	.word	0x00036934
   17034:	0001dad1 	.word	0x0001dad1
   17038:	000363e8 	.word	0x000363e8
   1703c:	00036960 	.word	0x00036960
   17040:	0002512d 	.word	0x0002512d
   17044:	00016465 	.word	0x00016465
   17048:	00016431 	.word	0x00016431
   1704c:	000251c5 	.word	0x000251c5
   17050:	000363dc 	.word	0x000363dc
   17054:	00021bdd 	.word	0x00021bdd
   17058:	00021bc1 	.word	0x00021bc1
   1705c:	200046e0 	.word	0x200046e0
   17060:	000322b5 	.word	0x000322b5
   17064:	000159a5 	.word	0x000159a5
   17068:	200004a4 	.word	0x200004a4
   1706c:	00016b51 	.word	0x00016b51
   17070:	00016bed 	.word	0x00016bed
   17074:	000169c9 	.word	0x000169c9
   17078:	00016a5d 	.word	0x00016a5d
   1707c:	0001abe5 	.word	0x0001abe5
   17080:	20000b50 	.word	0x20000b50
   17084:	20000064 	.word	0x20000064
   17088:	000349e7 	.word	0x000349e7
   1708c:	00036984 	.word	0x00036984
   17090:	20000718 	.word	0x20000718
   17094:	0002f5d5 	.word	0x0002f5d5
   17098:	000369a0 	.word	0x000369a0

0001709c <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   1709c:	b590      	push	{r4, r7, lr}
   1709e:	b083      	sub	sp, #12
   170a0:	af00      	add	r7, sp, #0
   170a2:	0002      	movs	r2, r0
   170a4:	1dfb      	adds	r3, r7, #7
   170a6:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   170a8:	1dfb      	adds	r3, r7, #7
   170aa:	781b      	ldrb	r3, [r3, #0]
   170ac:	2b03      	cmp	r3, #3
   170ae:	d806      	bhi.n	170be <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   170b0:	4b05      	ldr	r3, [pc, #20]	; (170c8 <WifiHandlerSetState+0x2c>)
   170b2:	6818      	ldr	r0, [r3, #0]
   170b4:	1df9      	adds	r1, r7, #7
   170b6:	2300      	movs	r3, #0
   170b8:	220a      	movs	r2, #10
   170ba:	4c04      	ldr	r4, [pc, #16]	; (170cc <WifiHandlerSetState+0x30>)
   170bc:	47a0      	blx	r4
    }
}
   170be:	46c0      	nop			; (mov r8, r8)
   170c0:	46bd      	mov	sp, r7
   170c2:	b003      	add	sp, #12
   170c4:	bd90      	pop	{r4, r7, pc}
   170c6:	46c0      	nop			; (mov r8, r8)
   170c8:	200004a8 	.word	0x200004a8
   170cc:	0001a32d 	.word	0x0001a32d

000170d0 <WifiAddImuDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddImuDataToQueue(struct ImuDataPacket *imuPacket)
{
   170d0:	b590      	push	{r4, r7, lr}
   170d2:	b085      	sub	sp, #20
   170d4:	af00      	add	r7, sp, #0
   170d6:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueImuBuffer, imuPacket, (TickType_t)10);
   170d8:	4b06      	ldr	r3, [pc, #24]	; (170f4 <WifiAddImuDataToQueue+0x24>)
   170da:	6818      	ldr	r0, [r3, #0]
   170dc:	6879      	ldr	r1, [r7, #4]
   170de:	2300      	movs	r3, #0
   170e0:	220a      	movs	r2, #10
   170e2:	4c05      	ldr	r4, [pc, #20]	; (170f8 <WifiAddImuDataToQueue+0x28>)
   170e4:	47a0      	blx	r4
   170e6:	0003      	movs	r3, r0
   170e8:	60fb      	str	r3, [r7, #12]
    return error;
   170ea:	68fb      	ldr	r3, [r7, #12]
}
   170ec:	0018      	movs	r0, r3
   170ee:	46bd      	mov	sp, r7
   170f0:	b005      	add	sp, #20
   170f2:	bd90      	pop	{r4, r7, pc}
   170f4:	200004b0 	.word	0x200004b0
   170f8:	0001a32d 	.word	0x0001a32d

000170fc <WifiAddDistanceDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddDistanceDataToQueue(uint16_t *distance)
{
   170fc:	b590      	push	{r4, r7, lr}
   170fe:	b085      	sub	sp, #20
   17100:	af00      	add	r7, sp, #0
   17102:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueDistanceBuffer, distance, (TickType_t)10);
   17104:	4b06      	ldr	r3, [pc, #24]	; (17120 <WifiAddDistanceDataToQueue+0x24>)
   17106:	6818      	ldr	r0, [r3, #0]
   17108:	6879      	ldr	r1, [r7, #4]
   1710a:	2300      	movs	r3, #0
   1710c:	220a      	movs	r2, #10
   1710e:	4c05      	ldr	r4, [pc, #20]	; (17124 <WifiAddDistanceDataToQueue+0x28>)
   17110:	47a0      	blx	r4
   17112:	0003      	movs	r3, r0
   17114:	60fb      	str	r3, [r7, #12]
    return error;
   17116:	68fb      	ldr	r3, [r7, #12]
}
   17118:	0018      	movs	r0, r3
   1711a:	46bd      	mov	sp, r7
   1711c:	b005      	add	sp, #20
   1711e:	bd90      	pop	{r4, r7, pc}
   17120:	200004b4 	.word	0x200004b4
   17124:	0001a32d 	.word	0x0001a32d

00017128 <WifiAddGameDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   17128:	b590      	push	{r4, r7, lr}
   1712a:	b085      	sub	sp, #20
   1712c:	af00      	add	r7, sp, #0
   1712e:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBuffer, game, (TickType_t)10);
   17130:	4b06      	ldr	r3, [pc, #24]	; (1714c <WifiAddGameDataToQueue+0x24>)
   17132:	6818      	ldr	r0, [r3, #0]
   17134:	6879      	ldr	r1, [r7, #4]
   17136:	2300      	movs	r3, #0
   17138:	220a      	movs	r2, #10
   1713a:	4c05      	ldr	r4, [pc, #20]	; (17150 <WifiAddGameDataToQueue+0x28>)
   1713c:	47a0      	blx	r4
   1713e:	0003      	movs	r3, r0
   17140:	60fb      	str	r3, [r7, #12]
    return error;
   17142:	68fb      	ldr	r3, [r7, #12]
}
   17144:	0018      	movs	r0, r3
   17146:	46bd      	mov	sp, r7
   17148:	b005      	add	sp, #20
   1714a:	bd90      	pop	{r4, r7, pc}
   1714c:	200004ac 	.word	0x200004ac
   17150:	0001a32d 	.word	0x0001a32d

00017154 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   17154:	b580      	push	{r7, lr}
   17156:	b082      	sub	sp, #8
   17158:	af00      	add	r7, sp, #0
   1715a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1715c:	687b      	ldr	r3, [r7, #4]
   1715e:	2200      	movs	r2, #0
   17160:	701a      	strb	r2, [r3, #0]
}
   17162:	46c0      	nop			; (mov r8, r8)
   17164:	46bd      	mov	sp, r7
   17166:	b002      	add	sp, #8
   17168:	bd80      	pop	{r7, pc}
	...

0001716c <system_apb_clock_set_mask>:
{
   1716c:	b580      	push	{r7, lr}
   1716e:	b082      	sub	sp, #8
   17170:	af00      	add	r7, sp, #0
   17172:	0002      	movs	r2, r0
   17174:	6039      	str	r1, [r7, #0]
   17176:	1dfb      	adds	r3, r7, #7
   17178:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1717a:	1dfb      	adds	r3, r7, #7
   1717c:	781b      	ldrb	r3, [r3, #0]
   1717e:	2b01      	cmp	r3, #1
   17180:	d00a      	beq.n	17198 <system_apb_clock_set_mask+0x2c>
   17182:	2b02      	cmp	r3, #2
   17184:	d00f      	beq.n	171a6 <system_apb_clock_set_mask+0x3a>
   17186:	2b00      	cmp	r3, #0
   17188:	d114      	bne.n	171b4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1718a:	4b0e      	ldr	r3, [pc, #56]	; (171c4 <system_apb_clock_set_mask+0x58>)
   1718c:	4a0d      	ldr	r2, [pc, #52]	; (171c4 <system_apb_clock_set_mask+0x58>)
   1718e:	6991      	ldr	r1, [r2, #24]
   17190:	683a      	ldr	r2, [r7, #0]
   17192:	430a      	orrs	r2, r1
   17194:	619a      	str	r2, [r3, #24]
			break;
   17196:	e00f      	b.n	171b8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   17198:	4b0a      	ldr	r3, [pc, #40]	; (171c4 <system_apb_clock_set_mask+0x58>)
   1719a:	4a0a      	ldr	r2, [pc, #40]	; (171c4 <system_apb_clock_set_mask+0x58>)
   1719c:	69d1      	ldr	r1, [r2, #28]
   1719e:	683a      	ldr	r2, [r7, #0]
   171a0:	430a      	orrs	r2, r1
   171a2:	61da      	str	r2, [r3, #28]
			break;
   171a4:	e008      	b.n	171b8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   171a6:	4b07      	ldr	r3, [pc, #28]	; (171c4 <system_apb_clock_set_mask+0x58>)
   171a8:	4a06      	ldr	r2, [pc, #24]	; (171c4 <system_apb_clock_set_mask+0x58>)
   171aa:	6a11      	ldr	r1, [r2, #32]
   171ac:	683a      	ldr	r2, [r7, #0]
   171ae:	430a      	orrs	r2, r1
   171b0:	621a      	str	r2, [r3, #32]
			break;
   171b2:	e001      	b.n	171b8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   171b4:	2317      	movs	r3, #23
   171b6:	e000      	b.n	171ba <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   171b8:	2300      	movs	r3, #0
}
   171ba:	0018      	movs	r0, r3
   171bc:	46bd      	mov	sp, r7
   171be:	b002      	add	sp, #8
   171c0:	bd80      	pop	{r7, pc}
   171c2:	46c0      	nop			; (mov r8, r8)
   171c4:	40000400 	.word	0x40000400

000171c8 <system_pinmux_get_config_defaults>:
{
   171c8:	b580      	push	{r7, lr}
   171ca:	b082      	sub	sp, #8
   171cc:	af00      	add	r7, sp, #0
   171ce:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   171d0:	687b      	ldr	r3, [r7, #4]
   171d2:	2280      	movs	r2, #128	; 0x80
   171d4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   171d6:	687b      	ldr	r3, [r7, #4]
   171d8:	2200      	movs	r2, #0
   171da:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   171dc:	687b      	ldr	r3, [r7, #4]
   171de:	2201      	movs	r2, #1
   171e0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   171e2:	687b      	ldr	r3, [r7, #4]
   171e4:	2200      	movs	r2, #0
   171e6:	70da      	strb	r2, [r3, #3]
}
   171e8:	46c0      	nop			; (mov r8, r8)
   171ea:	46bd      	mov	sp, r7
   171ec:	b002      	add	sp, #8
   171ee:	bd80      	pop	{r7, pc}

000171f0 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   171f0:	b580      	push	{r7, lr}
   171f2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   171f4:	4b05      	ldr	r3, [pc, #20]	; (1720c <system_is_debugger_present+0x1c>)
   171f6:	789b      	ldrb	r3, [r3, #2]
   171f8:	b2db      	uxtb	r3, r3
   171fa:	001a      	movs	r2, r3
   171fc:	2302      	movs	r3, #2
   171fe:	4013      	ands	r3, r2
   17200:	1e5a      	subs	r2, r3, #1
   17202:	4193      	sbcs	r3, r2
   17204:	b2db      	uxtb	r3, r3
}
   17206:	0018      	movs	r0, r3
   17208:	46bd      	mov	sp, r7
   1720a:	bd80      	pop	{r7, pc}
   1720c:	41002000 	.word	0x41002000

00017210 <system_interrupt_enter_critical_section>:
{
   17210:	b580      	push	{r7, lr}
   17212:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   17214:	4b02      	ldr	r3, [pc, #8]	; (17220 <system_interrupt_enter_critical_section+0x10>)
   17216:	4798      	blx	r3
}
   17218:	46c0      	nop			; (mov r8, r8)
   1721a:	46bd      	mov	sp, r7
   1721c:	bd80      	pop	{r7, pc}
   1721e:	46c0      	nop			; (mov r8, r8)
   17220:	00025e25 	.word	0x00025e25

00017224 <system_interrupt_leave_critical_section>:
{
   17224:	b580      	push	{r7, lr}
   17226:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   17228:	4b02      	ldr	r3, [pc, #8]	; (17234 <system_interrupt_leave_critical_section+0x10>)
   1722a:	4798      	blx	r3
}
   1722c:	46c0      	nop			; (mov r8, r8)
   1722e:	46bd      	mov	sp, r7
   17230:	bd80      	pop	{r7, pc}
   17232:	46c0      	nop			; (mov r8, r8)
   17234:	00025e79 	.word	0x00025e79

00017238 <system_interrupt_disable>:
{
   17238:	b580      	push	{r7, lr}
   1723a:	b082      	sub	sp, #8
   1723c:	af00      	add	r7, sp, #0
   1723e:	0002      	movs	r2, r0
   17240:	1dfb      	adds	r3, r7, #7
   17242:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   17244:	4a07      	ldr	r2, [pc, #28]	; (17264 <system_interrupt_disable+0x2c>)
   17246:	1dfb      	adds	r3, r7, #7
   17248:	781b      	ldrb	r3, [r3, #0]
   1724a:	0019      	movs	r1, r3
   1724c:	231f      	movs	r3, #31
   1724e:	400b      	ands	r3, r1
   17250:	2101      	movs	r1, #1
   17252:	4099      	lsls	r1, r3
   17254:	000b      	movs	r3, r1
   17256:	0019      	movs	r1, r3
   17258:	2380      	movs	r3, #128	; 0x80
   1725a:	50d1      	str	r1, [r2, r3]
}
   1725c:	46c0      	nop			; (mov r8, r8)
   1725e:	46bd      	mov	sp, r7
   17260:	b002      	add	sp, #8
   17262:	bd80      	pop	{r7, pc}
   17264:	e000e100 	.word	0xe000e100

00017268 <i2c_master_is_syncing>:
{
   17268:	b580      	push	{r7, lr}
   1726a:	b084      	sub	sp, #16
   1726c:	af00      	add	r7, sp, #0
   1726e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   17270:	687b      	ldr	r3, [r7, #4]
   17272:	681b      	ldr	r3, [r3, #0]
   17274:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   17276:	68fb      	ldr	r3, [r7, #12]
   17278:	69db      	ldr	r3, [r3, #28]
   1727a:	2207      	movs	r2, #7
   1727c:	4013      	ands	r3, r2
   1727e:	1e5a      	subs	r2, r3, #1
   17280:	4193      	sbcs	r3, r2
   17282:	b2db      	uxtb	r3, r3
}
   17284:	0018      	movs	r0, r3
   17286:	46bd      	mov	sp, r7
   17288:	b004      	add	sp, #16
   1728a:	bd80      	pop	{r7, pc}

0001728c <_i2c_master_wait_for_sync>:
{
   1728c:	b580      	push	{r7, lr}
   1728e:	b082      	sub	sp, #8
   17290:	af00      	add	r7, sp, #0
   17292:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   17294:	46c0      	nop			; (mov r8, r8)
   17296:	687b      	ldr	r3, [r7, #4]
   17298:	0018      	movs	r0, r3
   1729a:	4b04      	ldr	r3, [pc, #16]	; (172ac <_i2c_master_wait_for_sync+0x20>)
   1729c:	4798      	blx	r3
   1729e:	1e03      	subs	r3, r0, #0
   172a0:	d1f9      	bne.n	17296 <_i2c_master_wait_for_sync+0xa>
}
   172a2:	46c0      	nop			; (mov r8, r8)
   172a4:	46bd      	mov	sp, r7
   172a6:	b002      	add	sp, #8
   172a8:	bd80      	pop	{r7, pc}
   172aa:	46c0      	nop			; (mov r8, r8)
   172ac:	00017269 	.word	0x00017269

000172b0 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   172b0:	b580      	push	{r7, lr}
   172b2:	b084      	sub	sp, #16
   172b4:	af00      	add	r7, sp, #0
   172b6:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   172b8:	687b      	ldr	r3, [r7, #4]
   172ba:	681b      	ldr	r3, [r3, #0]
   172bc:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   172be:	687b      	ldr	r3, [r7, #4]
   172c0:	681b      	ldr	r3, [r3, #0]
   172c2:	0018      	movs	r0, r3
   172c4:	4b0d      	ldr	r3, [pc, #52]	; (172fc <i2c_master_disable+0x4c>)
   172c6:	4798      	blx	r3
   172c8:	0003      	movs	r3, r0
   172ca:	0018      	movs	r0, r3
   172cc:	4b0c      	ldr	r3, [pc, #48]	; (17300 <i2c_master_disable+0x50>)
   172ce:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   172d0:	687b      	ldr	r3, [r7, #4]
   172d2:	0018      	movs	r0, r3
   172d4:	4b0b      	ldr	r3, [pc, #44]	; (17304 <i2c_master_disable+0x54>)
   172d6:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   172d8:	68fb      	ldr	r3, [r7, #12]
   172da:	2283      	movs	r2, #131	; 0x83
   172dc:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   172de:	68fb      	ldr	r3, [r7, #12]
   172e0:	2283      	movs	r2, #131	; 0x83
   172e2:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   172e4:	68fb      	ldr	r3, [r7, #12]
   172e6:	681b      	ldr	r3, [r3, #0]
   172e8:	2202      	movs	r2, #2
   172ea:	4393      	bics	r3, r2
   172ec:	001a      	movs	r2, r3
   172ee:	68fb      	ldr	r3, [r7, #12]
   172f0:	601a      	str	r2, [r3, #0]

}
   172f2:	46c0      	nop			; (mov r8, r8)
   172f4:	46bd      	mov	sp, r7
   172f6:	b004      	add	sp, #16
   172f8:	bd80      	pop	{r7, pc}
   172fa:	46c0      	nop			; (mov r8, r8)
   172fc:	000272f9 	.word	0x000272f9
   17300:	00017239 	.word	0x00017239
   17304:	0001728d 	.word	0x0001728d

00017308 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   17308:	b5f0      	push	{r4, r5, r6, r7, lr}
   1730a:	b097      	sub	sp, #92	; 0x5c
   1730c:	af00      	add	r7, sp, #0
   1730e:	6178      	str	r0, [r7, #20]
   17310:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   17312:	2300      	movs	r3, #0
   17314:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   17316:	2300      	movs	r3, #0
   17318:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   1731a:	2300      	movs	r3, #0
   1731c:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   1731e:	233b      	movs	r3, #59	; 0x3b
   17320:	2210      	movs	r2, #16
   17322:	4694      	mov	ip, r2
   17324:	44bc      	add	ip, r7
   17326:	4463      	add	r3, ip
   17328:	2200      	movs	r2, #0
   1732a:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1732c:	697b      	ldr	r3, [r7, #20]
   1732e:	681b      	ldr	r3, [r3, #0]
   17330:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   17332:	697b      	ldr	r3, [r7, #20]
   17334:	681b      	ldr	r3, [r3, #0]
   17336:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   17338:	2323      	movs	r3, #35	; 0x23
   1733a:	2210      	movs	r2, #16
   1733c:	18ba      	adds	r2, r7, r2
   1733e:	18d4      	adds	r4, r2, r3
   17340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17342:	0018      	movs	r0, r3
   17344:	4bc0      	ldr	r3, [pc, #768]	; (17648 <_i2c_master_set_config+0x340>)
   17346:	4798      	blx	r3
   17348:	0003      	movs	r3, r0
   1734a:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   1734c:	230c      	movs	r3, #12
   1734e:	2210      	movs	r2, #16
   17350:	4694      	mov	ip, r2
   17352:	44bc      	add	ip, r7
   17354:	4463      	add	r3, ip
   17356:	0018      	movs	r0, r3
   17358:	4bbc      	ldr	r3, [pc, #752]	; (1764c <_i2c_master_set_config+0x344>)
   1735a:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   1735c:	693b      	ldr	r3, [r7, #16]
   1735e:	69db      	ldr	r3, [r3, #28]
   17360:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   17362:	693b      	ldr	r3, [r7, #16]
   17364:	6a1b      	ldr	r3, [r3, #32]
   17366:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   17368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1736a:	2b00      	cmp	r3, #0
   1736c:	d106      	bne.n	1737c <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   1736e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17370:	2100      	movs	r1, #0
   17372:	0018      	movs	r0, r3
   17374:	4bb6      	ldr	r3, [pc, #728]	; (17650 <_i2c_master_set_config+0x348>)
   17376:	4798      	blx	r3
   17378:	0003      	movs	r3, r0
   1737a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   1737c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1737e:	b2da      	uxtb	r2, r3
   17380:	230c      	movs	r3, #12
   17382:	2110      	movs	r1, #16
   17384:	468c      	mov	ip, r1
   17386:	44bc      	add	ip, r7
   17388:	4463      	add	r3, ip
   1738a:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   1738c:	230c      	movs	r3, #12
   1738e:	2210      	movs	r2, #16
   17390:	4694      	mov	ip, r2
   17392:	44bc      	add	ip, r7
   17394:	4463      	add	r3, ip
   17396:	2202      	movs	r2, #2
   17398:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   1739a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1739c:	0c1b      	lsrs	r3, r3, #16
   1739e:	b2db      	uxtb	r3, r3
   173a0:	220c      	movs	r2, #12
   173a2:	2110      	movs	r1, #16
   173a4:	468c      	mov	ip, r1
   173a6:	44bc      	add	ip, r7
   173a8:	4462      	add	r2, ip
   173aa:	0011      	movs	r1, r2
   173ac:	0018      	movs	r0, r3
   173ae:	4ba9      	ldr	r3, [pc, #676]	; (17654 <_i2c_master_set_config+0x34c>)
   173b0:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   173b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   173b4:	2b00      	cmp	r3, #0
   173b6:	d106      	bne.n	173c6 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   173b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   173ba:	2101      	movs	r1, #1
   173bc:	0018      	movs	r0, r3
   173be:	4ba4      	ldr	r3, [pc, #656]	; (17650 <_i2c_master_set_config+0x348>)
   173c0:	4798      	blx	r3
   173c2:	0003      	movs	r3, r0
   173c4:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   173c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   173c8:	b2da      	uxtb	r2, r3
   173ca:	230c      	movs	r3, #12
   173cc:	2110      	movs	r1, #16
   173ce:	468c      	mov	ip, r1
   173d0:	44bc      	add	ip, r7
   173d2:	4463      	add	r3, ip
   173d4:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   173d6:	230c      	movs	r3, #12
   173d8:	2210      	movs	r2, #16
   173da:	4694      	mov	ip, r2
   173dc:	44bc      	add	ip, r7
   173de:	4463      	add	r3, ip
   173e0:	2202      	movs	r2, #2
   173e2:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   173e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   173e6:	0c1b      	lsrs	r3, r3, #16
   173e8:	b2db      	uxtb	r3, r3
   173ea:	220c      	movs	r2, #12
   173ec:	2110      	movs	r1, #16
   173ee:	468c      	mov	ip, r1
   173f0:	44bc      	add	ip, r7
   173f2:	4462      	add	r2, ip
   173f4:	0011      	movs	r1, r2
   173f6:	0018      	movs	r0, r3
   173f8:	4b96      	ldr	r3, [pc, #600]	; (17654 <_i2c_master_set_config+0x34c>)
   173fa:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   173fc:	693b      	ldr	r3, [r7, #16]
   173fe:	8a9a      	ldrh	r2, [r3, #20]
   17400:	697b      	ldr	r3, [r7, #20]
   17402:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   17404:	693b      	ldr	r3, [r7, #16]
   17406:	8ada      	ldrh	r2, [r3, #22]
   17408:	697b      	ldr	r3, [r7, #20]
   1740a:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   1740c:	693b      	ldr	r3, [r7, #16]
   1740e:	7e1b      	ldrb	r3, [r3, #24]
   17410:	2b00      	cmp	r3, #0
   17412:	d103      	bne.n	1741c <_i2c_master_set_config+0x114>
   17414:	4b90      	ldr	r3, [pc, #576]	; (17658 <_i2c_master_set_config+0x350>)
   17416:	4798      	blx	r3
   17418:	1e03      	subs	r3, r0, #0
   1741a:	d002      	beq.n	17422 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   1741c:	2380      	movs	r3, #128	; 0x80
   1741e:	657b      	str	r3, [r7, #84]	; 0x54
   17420:	e001      	b.n	17426 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   17422:	2300      	movs	r3, #0
   17424:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   17426:	693b      	ldr	r3, [r7, #16]
   17428:	691b      	ldr	r3, [r3, #16]
   1742a:	2b00      	cmp	r3, #0
   1742c:	d004      	beq.n	17438 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   1742e:	693b      	ldr	r3, [r7, #16]
   17430:	691b      	ldr	r3, [r3, #16]
   17432:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   17434:	4313      	orrs	r3, r2
   17436:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   17438:	693b      	ldr	r3, [r7, #16]
   1743a:	689b      	ldr	r3, [r3, #8]
   1743c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1743e:	4313      	orrs	r3, r2
   17440:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   17442:	693b      	ldr	r3, [r7, #16]
   17444:	2224      	movs	r2, #36	; 0x24
   17446:	5c9b      	ldrb	r3, [r3, r2]
   17448:	2b00      	cmp	r3, #0
   1744a:	d004      	beq.n	17456 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   1744c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1744e:	2280      	movs	r2, #128	; 0x80
   17450:	05d2      	lsls	r2, r2, #23
   17452:	4313      	orrs	r3, r2
   17454:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   17456:	693b      	ldr	r3, [r7, #16]
   17458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1745a:	2b00      	cmp	r3, #0
   1745c:	d004      	beq.n	17468 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   1745e:	693b      	ldr	r3, [r7, #16]
   17460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17462:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   17464:	4313      	orrs	r3, r2
   17466:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   17468:	693b      	ldr	r3, [r7, #16]
   1746a:	222c      	movs	r2, #44	; 0x2c
   1746c:	5c9b      	ldrb	r3, [r3, r2]
   1746e:	2b00      	cmp	r3, #0
   17470:	d105      	bne.n	1747e <_i2c_master_set_config+0x176>
   17472:	693b      	ldr	r3, [r7, #16]
   17474:	689a      	ldr	r2, [r3, #8]
   17476:	2380      	movs	r3, #128	; 0x80
   17478:	049b      	lsls	r3, r3, #18
   1747a:	429a      	cmp	r2, r3
   1747c:	d104      	bne.n	17488 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   1747e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17480:	2280      	movs	r2, #128	; 0x80
   17482:	0512      	lsls	r2, r2, #20
   17484:	4313      	orrs	r3, r2
   17486:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   17488:	693b      	ldr	r3, [r7, #16]
   1748a:	222d      	movs	r2, #45	; 0x2d
   1748c:	5c9b      	ldrb	r3, [r3, r2]
   1748e:	2b00      	cmp	r3, #0
   17490:	d004      	beq.n	1749c <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   17492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17494:	2280      	movs	r2, #128	; 0x80
   17496:	0412      	lsls	r2, r2, #16
   17498:	4313      	orrs	r3, r2
   1749a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   1749c:	693b      	ldr	r3, [r7, #16]
   1749e:	222e      	movs	r2, #46	; 0x2e
   174a0:	5c9b      	ldrb	r3, [r3, r2]
   174a2:	2b00      	cmp	r3, #0
   174a4:	d004      	beq.n	174b0 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   174a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   174a8:	2280      	movs	r2, #128	; 0x80
   174aa:	03d2      	lsls	r2, r2, #15
   174ac:	4313      	orrs	r3, r2
   174ae:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   174b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   174b2:	681a      	ldr	r2, [r3, #0]
   174b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   174b6:	431a      	orrs	r2, r3
   174b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   174ba:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   174bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   174be:	2280      	movs	r2, #128	; 0x80
   174c0:	0052      	lsls	r2, r2, #1
   174c2:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   174c4:	2323      	movs	r3, #35	; 0x23
   174c6:	2210      	movs	r2, #16
   174c8:	4694      	mov	ip, r2
   174ca:	44bc      	add	ip, r7
   174cc:	4463      	add	r3, ip
   174ce:	781b      	ldrb	r3, [r3, #0]
   174d0:	3314      	adds	r3, #20
   174d2:	b2db      	uxtb	r3, r3
   174d4:	0018      	movs	r0, r3
   174d6:	4b61      	ldr	r3, [pc, #388]	; (1765c <_i2c_master_set_config+0x354>)
   174d8:	4798      	blx	r3
   174da:	0003      	movs	r3, r0
   174dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   174de:	693b      	ldr	r3, [r7, #16]
   174e0:	681b      	ldr	r3, [r3, #0]
   174e2:	22fa      	movs	r2, #250	; 0xfa
   174e4:	0092      	lsls	r2, r2, #2
   174e6:	4353      	muls	r3, r2
   174e8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   174ea:	693b      	ldr	r3, [r7, #16]
   174ec:	685b      	ldr	r3, [r3, #4]
   174ee:	22fa      	movs	r2, #250	; 0xfa
   174f0:	0092      	lsls	r2, r2, #2
   174f2:	4353      	muls	r3, r2
   174f4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   174f6:	693b      	ldr	r3, [r7, #16]
   174f8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   174fa:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   174fc:	4b58      	ldr	r3, [pc, #352]	; (17660 <_i2c_master_set_config+0x358>)
   174fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17500:	4798      	blx	r3
   17502:	0005      	movs	r5, r0
   17504:	000e      	movs	r6, r1
   17506:	4b56      	ldr	r3, [pc, #344]	; (17660 <_i2c_master_set_config+0x358>)
   17508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1750a:	4798      	blx	r3
   1750c:	60b8      	str	r0, [r7, #8]
   1750e:	60f9      	str	r1, [r7, #12]
   17510:	4b53      	ldr	r3, [pc, #332]	; (17660 <_i2c_master_set_config+0x358>)
   17512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17514:	4798      	blx	r3
   17516:	4c53      	ldr	r4, [pc, #332]	; (17664 <_i2c_master_set_config+0x35c>)
   17518:	4a53      	ldr	r2, [pc, #332]	; (17668 <_i2c_master_set_config+0x360>)
   1751a:	4b54      	ldr	r3, [pc, #336]	; (1766c <_i2c_master_set_config+0x364>)
   1751c:	47a0      	blx	r4
   1751e:	0003      	movs	r3, r0
   17520:	000c      	movs	r4, r1
   17522:	603b      	str	r3, [r7, #0]
   17524:	607c      	str	r4, [r7, #4]
   17526:	4b4e      	ldr	r3, [pc, #312]	; (17660 <_i2c_master_set_config+0x358>)
   17528:	6a38      	ldr	r0, [r7, #32]
   1752a:	4798      	blx	r3
   1752c:	0002      	movs	r2, r0
   1752e:	000b      	movs	r3, r1
   17530:	4c4c      	ldr	r4, [pc, #304]	; (17664 <_i2c_master_set_config+0x35c>)
   17532:	6838      	ldr	r0, [r7, #0]
   17534:	6879      	ldr	r1, [r7, #4]
   17536:	47a0      	blx	r4
   17538:	0003      	movs	r3, r0
   1753a:	000c      	movs	r4, r1
   1753c:	0018      	movs	r0, r3
   1753e:	0021      	movs	r1, r4
   17540:	4c4b      	ldr	r4, [pc, #300]	; (17670 <_i2c_master_set_config+0x368>)
   17542:	2200      	movs	r2, #0
   17544:	4b4b      	ldr	r3, [pc, #300]	; (17674 <_i2c_master_set_config+0x36c>)
   17546:	47a0      	blx	r4
   17548:	0003      	movs	r3, r0
   1754a:	000c      	movs	r4, r1
   1754c:	001a      	movs	r2, r3
   1754e:	0023      	movs	r3, r4
   17550:	4c44      	ldr	r4, [pc, #272]	; (17664 <_i2c_master_set_config+0x35c>)
   17552:	68b8      	ldr	r0, [r7, #8]
   17554:	68f9      	ldr	r1, [r7, #12]
   17556:	47a0      	blx	r4
   17558:	0003      	movs	r3, r0
   1755a:	000c      	movs	r4, r1
   1755c:	001a      	movs	r2, r3
   1755e:	0023      	movs	r3, r4
   17560:	4c45      	ldr	r4, [pc, #276]	; (17678 <_i2c_master_set_config+0x370>)
   17562:	0028      	movs	r0, r5
   17564:	0031      	movs	r1, r6
   17566:	47a0      	blx	r4
   17568:	0003      	movs	r3, r0
   1756a:	000c      	movs	r4, r1
   1756c:	001d      	movs	r5, r3
   1756e:	0026      	movs	r6, r4
   17570:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17572:	005a      	lsls	r2, r3, #1
   17574:	4b3a      	ldr	r3, [pc, #232]	; (17660 <_i2c_master_set_config+0x358>)
   17576:	0010      	movs	r0, r2
   17578:	4798      	blx	r3
   1757a:	0002      	movs	r2, r0
   1757c:	000b      	movs	r3, r1
   1757e:	4c3c      	ldr	r4, [pc, #240]	; (17670 <_i2c_master_set_config+0x368>)
   17580:	0028      	movs	r0, r5
   17582:	0031      	movs	r1, r6
   17584:	47a0      	blx	r4
   17586:	0003      	movs	r3, r0
   17588:	000c      	movs	r4, r1
   1758a:	0018      	movs	r0, r3
   1758c:	0021      	movs	r1, r4
   1758e:	4c3a      	ldr	r4, [pc, #232]	; (17678 <_i2c_master_set_config+0x370>)
   17590:	2200      	movs	r2, #0
   17592:	4b3a      	ldr	r3, [pc, #232]	; (1767c <_i2c_master_set_config+0x374>)
   17594:	47a0      	blx	r4
   17596:	0003      	movs	r3, r0
   17598:	000c      	movs	r4, r1
   1759a:	001d      	movs	r5, r3
   1759c:	0026      	movs	r6, r4
   1759e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   175a0:	005a      	lsls	r2, r3, #1
   175a2:	4b2f      	ldr	r3, [pc, #188]	; (17660 <_i2c_master_set_config+0x358>)
   175a4:	0010      	movs	r0, r2
   175a6:	4798      	blx	r3
   175a8:	0002      	movs	r2, r0
   175aa:	000b      	movs	r3, r1
   175ac:	4c34      	ldr	r4, [pc, #208]	; (17680 <_i2c_master_set_config+0x378>)
   175ae:	0028      	movs	r0, r5
   175b0:	0031      	movs	r1, r6
   175b2:	47a0      	blx	r4
   175b4:	0003      	movs	r3, r0
   175b6:	000c      	movs	r4, r1
   175b8:	0019      	movs	r1, r3
   175ba:	0022      	movs	r2, r4
   175bc:	4b31      	ldr	r3, [pc, #196]	; (17684 <_i2c_master_set_config+0x37c>)
   175be:	0008      	movs	r0, r1
   175c0:	0011      	movs	r1, r2
   175c2:	4798      	blx	r3
   175c4:	0003      	movs	r3, r0
   175c6:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   175c8:	693b      	ldr	r3, [r7, #16]
   175ca:	689a      	ldr	r2, [r3, #8]
   175cc:	2380      	movs	r3, #128	; 0x80
   175ce:	049b      	lsls	r3, r3, #18
   175d0:	429a      	cmp	r2, r3
   175d2:	d16a      	bne.n	176aa <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   175d4:	4b22      	ldr	r3, [pc, #136]	; (17660 <_i2c_master_set_config+0x358>)
   175d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   175d8:	4798      	blx	r3
   175da:	4c25      	ldr	r4, [pc, #148]	; (17670 <_i2c_master_set_config+0x368>)
   175dc:	0002      	movs	r2, r0
   175de:	000b      	movs	r3, r1
   175e0:	47a0      	blx	r4
   175e2:	0003      	movs	r3, r0
   175e4:	000c      	movs	r4, r1
   175e6:	001d      	movs	r5, r3
   175e8:	0026      	movs	r6, r4
   175ea:	4b1d      	ldr	r3, [pc, #116]	; (17660 <_i2c_master_set_config+0x358>)
   175ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
   175ee:	4798      	blx	r3
   175f0:	4c1c      	ldr	r4, [pc, #112]	; (17664 <_i2c_master_set_config+0x35c>)
   175f2:	2200      	movs	r2, #0
   175f4:	4b24      	ldr	r3, [pc, #144]	; (17688 <_i2c_master_set_config+0x380>)
   175f6:	47a0      	blx	r4
   175f8:	0003      	movs	r3, r0
   175fa:	000c      	movs	r4, r1
   175fc:	001a      	movs	r2, r3
   175fe:	0023      	movs	r3, r4
   17600:	4c1f      	ldr	r4, [pc, #124]	; (17680 <_i2c_master_set_config+0x378>)
   17602:	0028      	movs	r0, r5
   17604:	0031      	movs	r1, r6
   17606:	47a0      	blx	r4
   17608:	0003      	movs	r3, r0
   1760a:	000c      	movs	r4, r1
   1760c:	0018      	movs	r0, r3
   1760e:	0021      	movs	r1, r4
   17610:	4c19      	ldr	r4, [pc, #100]	; (17678 <_i2c_master_set_config+0x370>)
   17612:	2200      	movs	r2, #0
   17614:	4b19      	ldr	r3, [pc, #100]	; (1767c <_i2c_master_set_config+0x374>)
   17616:	47a0      	blx	r4
   17618:	0003      	movs	r3, r0
   1761a:	000c      	movs	r4, r1
   1761c:	0019      	movs	r1, r3
   1761e:	0022      	movs	r2, r4
   17620:	4b18      	ldr	r3, [pc, #96]	; (17684 <_i2c_master_set_config+0x37c>)
   17622:	0008      	movs	r0, r1
   17624:	0011      	movs	r1, r2
   17626:	4798      	blx	r3
   17628:	0003      	movs	r3, r0
   1762a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   1762c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1762e:	2b00      	cmp	r3, #0
   17630:	d02e      	beq.n	17690 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   17632:	4b16      	ldr	r3, [pc, #88]	; (1768c <_i2c_master_set_config+0x384>)
   17634:	6a79      	ldr	r1, [r7, #36]	; 0x24
   17636:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17638:	4798      	blx	r3
   1763a:	0003      	movs	r3, r0
   1763c:	1e9a      	subs	r2, r3, #2
   1763e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17640:	1ad3      	subs	r3, r2, r3
   17642:	653b      	str	r3, [r7, #80]	; 0x50
   17644:	e031      	b.n	176aa <_i2c_master_set_config+0x3a2>
   17646:	46c0      	nop			; (mov r8, r8)
   17648:	00027229 	.word	0x00027229
   1764c:	000171c9 	.word	0x000171c9
   17650:	0002706d 	.word	0x0002706d
   17654:	00029e19 	.word	0x00029e19
   17658:	000171f1 	.word	0x000171f1
   1765c:	00029bdd 	.word	0x00029bdd
   17660:	000344d1 	.word	0x000344d1
   17664:	0003393d 	.word	0x0003393d
   17668:	e826d695 	.word	0xe826d695
   1766c:	3e112e0b 	.word	0x3e112e0b
   17670:	00032cb5 	.word	0x00032cb5
   17674:	40240000 	.word	0x40240000
   17678:	00033e3d 	.word	0x00033e3d
   1767c:	3ff00000 	.word	0x3ff00000
   17680:	000332d5 	.word	0x000332d5
   17684:	00034469 	.word	0x00034469
   17688:	40080000 	.word	0x40080000
   1768c:	00032655 	.word	0x00032655
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   17690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17692:	005a      	lsls	r2, r3, #1
   17694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17696:	18d3      	adds	r3, r2, r3
   17698:	1e5a      	subs	r2, r3, #1
   1769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1769c:	0059      	lsls	r1, r3, #1
   1769e:	4b1d      	ldr	r3, [pc, #116]	; (17714 <_i2c_master_set_config+0x40c>)
   176a0:	0010      	movs	r0, r2
   176a2:	4798      	blx	r3
   176a4:	0003      	movs	r3, r0
   176a6:	3b01      	subs	r3, #1
   176a8:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   176aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   176ac:	2bff      	cmp	r3, #255	; 0xff
   176ae:	dc08      	bgt.n	176c2 <_i2c_master_set_config+0x3ba>
   176b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   176b2:	2b00      	cmp	r3, #0
   176b4:	db05      	blt.n	176c2 <_i2c_master_set_config+0x3ba>
   176b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   176b8:	2bff      	cmp	r3, #255	; 0xff
   176ba:	dc02      	bgt.n	176c2 <_i2c_master_set_config+0x3ba>
   176bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   176be:	2b00      	cmp	r3, #0
   176c0:	da06      	bge.n	176d0 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   176c2:	233b      	movs	r3, #59	; 0x3b
   176c4:	2210      	movs	r2, #16
   176c6:	4694      	mov	ip, r2
   176c8:	44bc      	add	ip, r7
   176ca:	4463      	add	r3, ip
   176cc:	2240      	movs	r2, #64	; 0x40
   176ce:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   176d0:	233b      	movs	r3, #59	; 0x3b
   176d2:	2210      	movs	r2, #16
   176d4:	4694      	mov	ip, r2
   176d6:	44bc      	add	ip, r7
   176d8:	4463      	add	r3, ip
   176da:	781b      	ldrb	r3, [r3, #0]
   176dc:	2b40      	cmp	r3, #64	; 0x40
   176de:	d00e      	beq.n	176fe <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   176e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   176e2:	22ff      	movs	r2, #255	; 0xff
   176e4:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   176e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   176e8:	041b      	lsls	r3, r3, #16
   176ea:	0019      	movs	r1, r3
   176ec:	23ff      	movs	r3, #255	; 0xff
   176ee:	041b      	lsls	r3, r3, #16
   176f0:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   176f2:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   176f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   176f6:	0612      	lsls	r2, r2, #24
   176f8:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   176fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   176fc:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   176fe:	233b      	movs	r3, #59	; 0x3b
   17700:	2210      	movs	r2, #16
   17702:	4694      	mov	ip, r2
   17704:	44bc      	add	ip, r7
   17706:	4463      	add	r3, ip
   17708:	781b      	ldrb	r3, [r3, #0]
}
   1770a:	0018      	movs	r0, r3
   1770c:	46bd      	mov	sp, r7
   1770e:	b017      	add	sp, #92	; 0x5c
   17710:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17712:	46c0      	nop			; (mov r8, r8)
   17714:	00032655 	.word	0x00032655

00017718 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   17718:	b590      	push	{r4, r7, lr}
   1771a:	b08b      	sub	sp, #44	; 0x2c
   1771c:	af00      	add	r7, sp, #0
   1771e:	60f8      	str	r0, [r7, #12]
   17720:	60b9      	str	r1, [r7, #8]
   17722:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   17724:	68fb      	ldr	r3, [r7, #12]
   17726:	68ba      	ldr	r2, [r7, #8]
   17728:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1772a:	68fb      	ldr	r3, [r7, #12]
   1772c:	681b      	ldr	r3, [r3, #0]
   1772e:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   17730:	68fb      	ldr	r3, [r7, #12]
   17732:	681b      	ldr	r3, [r3, #0]
   17734:	0018      	movs	r0, r3
   17736:	4b3b      	ldr	r3, [pc, #236]	; (17824 <i2c_master_init+0x10c>)
   17738:	4798      	blx	r3
   1773a:	0003      	movs	r3, r0
   1773c:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1773e:	6a3b      	ldr	r3, [r7, #32]
   17740:	3302      	adds	r3, #2
   17742:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   17744:	6a3b      	ldr	r3, [r7, #32]
   17746:	3314      	adds	r3, #20
   17748:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1774a:	2201      	movs	r2, #1
   1774c:	69fb      	ldr	r3, [r7, #28]
   1774e:	409a      	lsls	r2, r3
   17750:	0013      	movs	r3, r2
   17752:	0019      	movs	r1, r3
   17754:	2002      	movs	r0, #2
   17756:	4b34      	ldr	r3, [pc, #208]	; (17828 <i2c_master_init+0x110>)
   17758:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1775a:	2314      	movs	r3, #20
   1775c:	18fb      	adds	r3, r7, r3
   1775e:	0018      	movs	r0, r3
   17760:	4b32      	ldr	r3, [pc, #200]	; (1782c <i2c_master_init+0x114>)
   17762:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   17764:	687b      	ldr	r3, [r7, #4]
   17766:	7b1a      	ldrb	r2, [r3, #12]
   17768:	2314      	movs	r3, #20
   1776a:	18fb      	adds	r3, r7, r3
   1776c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1776e:	69bb      	ldr	r3, [r7, #24]
   17770:	b2db      	uxtb	r3, r3
   17772:	2214      	movs	r2, #20
   17774:	18ba      	adds	r2, r7, r2
   17776:	0011      	movs	r1, r2
   17778:	0018      	movs	r0, r3
   1777a:	4b2d      	ldr	r3, [pc, #180]	; (17830 <i2c_master_init+0x118>)
   1777c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1777e:	69bb      	ldr	r3, [r7, #24]
   17780:	b2db      	uxtb	r3, r3
   17782:	0018      	movs	r0, r3
   17784:	4b2b      	ldr	r3, [pc, #172]	; (17834 <i2c_master_init+0x11c>)
   17786:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   17788:	687b      	ldr	r3, [r7, #4]
   1778a:	7b1b      	ldrb	r3, [r3, #12]
   1778c:	2100      	movs	r1, #0
   1778e:	0018      	movs	r0, r3
   17790:	4b29      	ldr	r3, [pc, #164]	; (17838 <i2c_master_init+0x120>)
   17792:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   17794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17796:	681b      	ldr	r3, [r3, #0]
   17798:	2202      	movs	r2, #2
   1779a:	4013      	ands	r3, r2
   1779c:	d001      	beq.n	177a2 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   1779e:	231c      	movs	r3, #28
   177a0:	e03b      	b.n	1781a <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   177a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   177a4:	681b      	ldr	r3, [r3, #0]
   177a6:	2201      	movs	r2, #1
   177a8:	4013      	ands	r3, r2
   177aa:	d001      	beq.n	177b0 <i2c_master_init+0x98>
		return STATUS_BUSY;
   177ac:	2305      	movs	r3, #5
   177ae:	e034      	b.n	1781a <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   177b0:	68fb      	ldr	r3, [r7, #12]
   177b2:	681b      	ldr	r3, [r3, #0]
   177b4:	2217      	movs	r2, #23
   177b6:	18bc      	adds	r4, r7, r2
   177b8:	0018      	movs	r0, r3
   177ba:	4b1a      	ldr	r3, [pc, #104]	; (17824 <i2c_master_init+0x10c>)
   177bc:	4798      	blx	r3
   177be:	0003      	movs	r3, r0
   177c0:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   177c2:	4a1e      	ldr	r2, [pc, #120]	; (1783c <i2c_master_init+0x124>)
   177c4:	2317      	movs	r3, #23
   177c6:	18fb      	adds	r3, r7, r3
   177c8:	781b      	ldrb	r3, [r3, #0]
   177ca:	0011      	movs	r1, r2
   177cc:	0018      	movs	r0, r3
   177ce:	4b1c      	ldr	r3, [pc, #112]	; (17840 <i2c_master_init+0x128>)
   177d0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   177d2:	2317      	movs	r3, #23
   177d4:	18fb      	adds	r3, r7, r3
   177d6:	781a      	ldrb	r2, [r3, #0]
   177d8:	4b1a      	ldr	r3, [pc, #104]	; (17844 <i2c_master_init+0x12c>)
   177da:	0092      	lsls	r2, r2, #2
   177dc:	68f9      	ldr	r1, [r7, #12]
   177de:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   177e0:	68fb      	ldr	r3, [r7, #12]
   177e2:	2200      	movs	r2, #0
   177e4:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   177e6:	68fb      	ldr	r3, [r7, #12]
   177e8:	2200      	movs	r2, #0
   177ea:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   177ec:	68fb      	ldr	r3, [r7, #12]
   177ee:	2200      	movs	r2, #0
   177f0:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   177f2:	68fb      	ldr	r3, [r7, #12]
   177f4:	2200      	movs	r2, #0
   177f6:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   177f8:	68fb      	ldr	r3, [r7, #12]
   177fa:	2225      	movs	r2, #37	; 0x25
   177fc:	2100      	movs	r1, #0
   177fe:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   17800:	68fb      	ldr	r3, [r7, #12]
   17802:	2200      	movs	r2, #0
   17804:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   17806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17808:	2214      	movs	r2, #20
   1780a:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   1780c:	687a      	ldr	r2, [r7, #4]
   1780e:	68fb      	ldr	r3, [r7, #12]
   17810:	0011      	movs	r1, r2
   17812:	0018      	movs	r0, r3
   17814:	4b0c      	ldr	r3, [pc, #48]	; (17848 <i2c_master_init+0x130>)
   17816:	4798      	blx	r3
   17818:	0003      	movs	r3, r0
}
   1781a:	0018      	movs	r0, r3
   1781c:	46bd      	mov	sp, r7
   1781e:	b00b      	add	sp, #44	; 0x2c
   17820:	bd90      	pop	{r4, r7, pc}
   17822:	46c0      	nop			; (mov r8, r8)
   17824:	00027229 	.word	0x00027229
   17828:	0001716d 	.word	0x0001716d
   1782c:	00017155 	.word	0x00017155
   17830:	00029ab9 	.word	0x00029ab9
   17834:	00029afd 	.word	0x00029afd
   17838:	00026fe1 	.word	0x00026fe1
   1783c:	00012bcd 	.word	0x00012bcd
   17840:	0002728d 	.word	0x0002728d
   17844:	20005a38 	.word	0x20005a38
   17848:	00017309 	.word	0x00017309

0001784c <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   1784c:	b580      	push	{r7, lr}
   1784e:	b084      	sub	sp, #16
   17850:	af00      	add	r7, sp, #0
   17852:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17854:	687b      	ldr	r3, [r7, #4]
   17856:	681b      	ldr	r3, [r3, #0]
   17858:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   1785a:	687b      	ldr	r3, [r7, #4]
   1785c:	0018      	movs	r0, r3
   1785e:	4b0f      	ldr	r3, [pc, #60]	; (1789c <i2c_master_reset+0x50>)
   17860:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   17862:	687b      	ldr	r3, [r7, #4]
   17864:	0018      	movs	r0, r3
   17866:	4b0e      	ldr	r3, [pc, #56]	; (178a0 <i2c_master_reset+0x54>)
   17868:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   1786a:	4b0e      	ldr	r3, [pc, #56]	; (178a4 <i2c_master_reset+0x58>)
   1786c:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   1786e:	687b      	ldr	r3, [r7, #4]
   17870:	681b      	ldr	r3, [r3, #0]
   17872:	0018      	movs	r0, r3
   17874:	4b0c      	ldr	r3, [pc, #48]	; (178a8 <i2c_master_reset+0x5c>)
   17876:	4798      	blx	r3
   17878:	0003      	movs	r3, r0
   1787a:	0018      	movs	r0, r3
   1787c:	4b0b      	ldr	r3, [pc, #44]	; (178ac <i2c_master_reset+0x60>)
   1787e:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   17880:	4b0b      	ldr	r3, [pc, #44]	; (178b0 <i2c_master_reset+0x64>)
   17882:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   17884:	687b      	ldr	r3, [r7, #4]
   17886:	0018      	movs	r0, r3
   17888:	4b04      	ldr	r3, [pc, #16]	; (1789c <i2c_master_reset+0x50>)
   1788a:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   1788c:	68fb      	ldr	r3, [r7, #12]
   1788e:	2201      	movs	r2, #1
   17890:	601a      	str	r2, [r3, #0]
}
   17892:	46c0      	nop			; (mov r8, r8)
   17894:	46bd      	mov	sp, r7
   17896:	b004      	add	sp, #16
   17898:	bd80      	pop	{r7, pc}
   1789a:	46c0      	nop			; (mov r8, r8)
   1789c:	0001728d 	.word	0x0001728d
   178a0:	000172b1 	.word	0x000172b1
   178a4:	00017211 	.word	0x00017211
   178a8:	000272f9 	.word	0x000272f9
   178ac:	00029c35 	.word	0x00029c35
   178b0:	00017225 	.word	0x00017225

000178b4 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   178b4:	b580      	push	{r7, lr}
   178b6:	b084      	sub	sp, #16
   178b8:	af00      	add	r7, sp, #0
   178ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   178bc:	687b      	ldr	r3, [r7, #4]
   178be:	681b      	ldr	r3, [r3, #0]
   178c0:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   178c2:	68fb      	ldr	r3, [r7, #12]
   178c4:	7e1b      	ldrb	r3, [r3, #24]
   178c6:	b2db      	uxtb	r3, r3
   178c8:	001a      	movs	r2, r3
   178ca:	2302      	movs	r3, #2
   178cc:	4013      	ands	r3, r2
   178ce:	d00b      	beq.n	178e8 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   178d0:	68fb      	ldr	r3, [r7, #12]
   178d2:	2202      	movs	r2, #2
   178d4:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   178d6:	68fb      	ldr	r3, [r7, #12]
   178d8:	8b5b      	ldrh	r3, [r3, #26]
   178da:	b29b      	uxth	r3, r3
   178dc:	001a      	movs	r2, r3
   178de:	2302      	movs	r3, #2
   178e0:	4013      	ands	r3, r2
   178e2:	d011      	beq.n	17908 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   178e4:	2341      	movs	r3, #65	; 0x41
   178e6:	e010      	b.n	1790a <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   178e8:	68fb      	ldr	r3, [r7, #12]
   178ea:	8b5b      	ldrh	r3, [r3, #26]
   178ec:	b29b      	uxth	r3, r3
   178ee:	001a      	movs	r2, r3
   178f0:	2304      	movs	r3, #4
   178f2:	4013      	ands	r3, r2
   178f4:	d008      	beq.n	17908 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   178f6:	68fb      	ldr	r3, [r7, #12]
   178f8:	685b      	ldr	r3, [r3, #4]
   178fa:	22c0      	movs	r2, #192	; 0xc0
   178fc:	0292      	lsls	r2, r2, #10
   178fe:	431a      	orrs	r2, r3
   17900:	68fb      	ldr	r3, [r7, #12]
   17902:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   17904:	2318      	movs	r3, #24
   17906:	e000      	b.n	1790a <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   17908:	2300      	movs	r3, #0
}
   1790a:	0018      	movs	r0, r3
   1790c:	46bd      	mov	sp, r7
   1790e:	b004      	add	sp, #16
   17910:	bd80      	pop	{r7, pc}

00017912 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   17912:	b580      	push	{r7, lr}
   17914:	b084      	sub	sp, #16
   17916:	af00      	add	r7, sp, #0
   17918:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1791a:	687b      	ldr	r3, [r7, #4]
   1791c:	681b      	ldr	r3, [r3, #0]
   1791e:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   17920:	230e      	movs	r3, #14
   17922:	18fb      	adds	r3, r7, r3
   17924:	2200      	movs	r2, #0
   17926:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   17928:	e00f      	b.n	1794a <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   1792a:	230e      	movs	r3, #14
   1792c:	18fb      	adds	r3, r7, r3
   1792e:	220e      	movs	r2, #14
   17930:	18ba      	adds	r2, r7, r2
   17932:	8812      	ldrh	r2, [r2, #0]
   17934:	3201      	adds	r2, #1
   17936:	801a      	strh	r2, [r3, #0]
   17938:	687b      	ldr	r3, [r7, #4]
   1793a:	891b      	ldrh	r3, [r3, #8]
   1793c:	220e      	movs	r2, #14
   1793e:	18ba      	adds	r2, r7, r2
   17940:	8812      	ldrh	r2, [r2, #0]
   17942:	429a      	cmp	r2, r3
   17944:	d301      	bcc.n	1794a <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   17946:	2312      	movs	r3, #18
   17948:	e00e      	b.n	17968 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1794a:	68bb      	ldr	r3, [r7, #8]
   1794c:	7e1b      	ldrb	r3, [r3, #24]
   1794e:	b2db      	uxtb	r3, r3
   17950:	001a      	movs	r2, r3
   17952:	2301      	movs	r3, #1
   17954:	4013      	ands	r3, r2
   17956:	d106      	bne.n	17966 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   17958:	68bb      	ldr	r3, [r7, #8]
   1795a:	7e1b      	ldrb	r3, [r3, #24]
   1795c:	b2db      	uxtb	r3, r3
   1795e:	001a      	movs	r2, r3
   17960:	2302      	movs	r3, #2
   17962:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   17964:	d0e1      	beq.n	1792a <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   17966:	2300      	movs	r3, #0
}
   17968:	0018      	movs	r0, r3
   1796a:	46bd      	mov	sp, r7
   1796c:	b004      	add	sp, #16
   1796e:	bd80      	pop	{r7, pc}

00017970 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   17970:	b590      	push	{r4, r7, lr}
   17972:	b085      	sub	sp, #20
   17974:	af00      	add	r7, sp, #0
   17976:	6078      	str	r0, [r7, #4]
   17978:	000a      	movs	r2, r1
   1797a:	1cfb      	adds	r3, r7, #3
   1797c:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1797e:	687b      	ldr	r3, [r7, #4]
   17980:	681b      	ldr	r3, [r3, #0]
   17982:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   17984:	68fb      	ldr	r3, [r7, #12]
   17986:	685b      	ldr	r3, [r3, #4]
   17988:	2280      	movs	r2, #128	; 0x80
   1798a:	02d2      	lsls	r2, r2, #11
   1798c:	431a      	orrs	r2, r3
   1798e:	68fb      	ldr	r3, [r7, #12]
   17990:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   17992:	1cfb      	adds	r3, r7, #3
   17994:	781a      	ldrb	r2, [r3, #0]
   17996:	68fb      	ldr	r3, [r7, #12]
   17998:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   1799a:	230b      	movs	r3, #11
   1799c:	18fc      	adds	r4, r7, r3
   1799e:	687b      	ldr	r3, [r7, #4]
   179a0:	0018      	movs	r0, r3
   179a2:	4b07      	ldr	r3, [pc, #28]	; (179c0 <_i2c_master_send_hs_master_code+0x50>)
   179a4:	4798      	blx	r3
   179a6:	0003      	movs	r3, r0
   179a8:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   179aa:	68fb      	ldr	r3, [r7, #12]
   179ac:	2201      	movs	r2, #1
   179ae:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   179b0:	230b      	movs	r3, #11
   179b2:	18fb      	adds	r3, r7, r3
   179b4:	781b      	ldrb	r3, [r3, #0]
}
   179b6:	0018      	movs	r0, r3
   179b8:	46bd      	mov	sp, r7
   179ba:	b005      	add	sp, #20
   179bc:	bd90      	pop	{r4, r7, pc}
   179be:	46c0      	nop			; (mov r8, r8)
   179c0:	00017913 	.word	0x00017913

000179c4 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   179c4:	b580      	push	{r7, lr}
   179c6:	af00      	add	r7, sp, #0
   179c8:	2000      	movs	r0, #0
   179ca:	4b02      	ldr	r3, [pc, #8]	; (179d4 <TC3_Handler+0x10>)
   179cc:	4798      	blx	r3
   179ce:	46c0      	nop			; (mov r8, r8)
   179d0:	46bd      	mov	sp, r7
   179d2:	bd80      	pop	{r7, pc}
   179d4:	00017a01 	.word	0x00017a01

000179d8 <TC4_Handler>:
   179d8:	b580      	push	{r7, lr}
   179da:	af00      	add	r7, sp, #0
   179dc:	2001      	movs	r0, #1
   179de:	4b02      	ldr	r3, [pc, #8]	; (179e8 <TC4_Handler+0x10>)
   179e0:	4798      	blx	r3
   179e2:	46c0      	nop			; (mov r8, r8)
   179e4:	46bd      	mov	sp, r7
   179e6:	bd80      	pop	{r7, pc}
   179e8:	00017a01 	.word	0x00017a01

000179ec <TC5_Handler>:
   179ec:	b580      	push	{r7, lr}
   179ee:	af00      	add	r7, sp, #0
   179f0:	2002      	movs	r0, #2
   179f2:	4b02      	ldr	r3, [pc, #8]	; (179fc <TC5_Handler+0x10>)
   179f4:	4798      	blx	r3
   179f6:	46c0      	nop			; (mov r8, r8)
   179f8:	46bd      	mov	sp, r7
   179fa:	bd80      	pop	{r7, pc}
   179fc:	00017a01 	.word	0x00017a01

00017a00 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   17a00:	b580      	push	{r7, lr}
   17a02:	b084      	sub	sp, #16
   17a04:	af00      	add	r7, sp, #0
   17a06:	0002      	movs	r2, r0
   17a08:	1dfb      	adds	r3, r7, #7
   17a0a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   17a0c:	1dfb      	adds	r3, r7, #7
   17a0e:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   17a10:	4b28      	ldr	r3, [pc, #160]	; (17ab4 <_tc_interrupt_handler+0xb4>)
   17a12:	0092      	lsls	r2, r2, #2
   17a14:	58d3      	ldr	r3, [r2, r3]
   17a16:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17a18:	68fb      	ldr	r3, [r7, #12]
   17a1a:	681b      	ldr	r3, [r3, #0]
   17a1c:	7b9b      	ldrb	r3, [r3, #14]
   17a1e:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   17a20:	68fa      	ldr	r2, [r7, #12]
   17a22:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17a24:	4013      	ands	r3, r2
   17a26:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   17a28:	68fb      	ldr	r3, [r7, #12]
   17a2a:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17a2c:	230b      	movs	r3, #11
   17a2e:	18fb      	adds	r3, r7, r3
   17a30:	400a      	ands	r2, r1
   17a32:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   17a34:	230b      	movs	r3, #11
   17a36:	18fb      	adds	r3, r7, r3
   17a38:	781b      	ldrb	r3, [r3, #0]
   17a3a:	2201      	movs	r2, #1
   17a3c:	4013      	ands	r3, r2
   17a3e:	d008      	beq.n	17a52 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   17a40:	68fb      	ldr	r3, [r7, #12]
   17a42:	689b      	ldr	r3, [r3, #8]
   17a44:	68fa      	ldr	r2, [r7, #12]
   17a46:	0010      	movs	r0, r2
   17a48:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   17a4a:	68fb      	ldr	r3, [r7, #12]
   17a4c:	681b      	ldr	r3, [r3, #0]
   17a4e:	2201      	movs	r2, #1
   17a50:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   17a52:	230b      	movs	r3, #11
   17a54:	18fb      	adds	r3, r7, r3
   17a56:	781b      	ldrb	r3, [r3, #0]
   17a58:	2202      	movs	r2, #2
   17a5a:	4013      	ands	r3, r2
   17a5c:	d008      	beq.n	17a70 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   17a5e:	68fb      	ldr	r3, [r7, #12]
   17a60:	68db      	ldr	r3, [r3, #12]
   17a62:	68fa      	ldr	r2, [r7, #12]
   17a64:	0010      	movs	r0, r2
   17a66:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   17a68:	68fb      	ldr	r3, [r7, #12]
   17a6a:	681b      	ldr	r3, [r3, #0]
   17a6c:	2202      	movs	r2, #2
   17a6e:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   17a70:	230b      	movs	r3, #11
   17a72:	18fb      	adds	r3, r7, r3
   17a74:	781b      	ldrb	r3, [r3, #0]
   17a76:	2210      	movs	r2, #16
   17a78:	4013      	ands	r3, r2
   17a7a:	d008      	beq.n	17a8e <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   17a7c:	68fb      	ldr	r3, [r7, #12]
   17a7e:	691b      	ldr	r3, [r3, #16]
   17a80:	68fa      	ldr	r2, [r7, #12]
   17a82:	0010      	movs	r0, r2
   17a84:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   17a86:	68fb      	ldr	r3, [r7, #12]
   17a88:	681b      	ldr	r3, [r3, #0]
   17a8a:	2210      	movs	r2, #16
   17a8c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   17a8e:	230b      	movs	r3, #11
   17a90:	18fb      	adds	r3, r7, r3
   17a92:	781b      	ldrb	r3, [r3, #0]
   17a94:	2220      	movs	r2, #32
   17a96:	4013      	ands	r3, r2
   17a98:	d008      	beq.n	17aac <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   17a9a:	68fb      	ldr	r3, [r7, #12]
   17a9c:	695b      	ldr	r3, [r3, #20]
   17a9e:	68fa      	ldr	r2, [r7, #12]
   17aa0:	0010      	movs	r0, r2
   17aa2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   17aa4:	68fb      	ldr	r3, [r7, #12]
   17aa6:	681b      	ldr	r3, [r3, #0]
   17aa8:	2220      	movs	r2, #32
   17aaa:	739a      	strb	r2, [r3, #14]
	}
}
   17aac:	46c0      	nop			; (mov r8, r8)
   17aae:	46bd      	mov	sp, r7
   17ab0:	b004      	add	sp, #16
   17ab2:	bd80      	pop	{r7, pc}
   17ab4:	20004820 	.word	0x20004820

00017ab8 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   17ab8:	b580      	push	{r7, lr}
   17aba:	b084      	sub	sp, #16
   17abc:	af00      	add	r7, sp, #0
   17abe:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   17ac0:	2300      	movs	r3, #0
   17ac2:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   17ac4:	687b      	ldr	r3, [r7, #4]
   17ac6:	2b00      	cmp	r3, #0
   17ac8:	d101      	bne.n	17ace <FreeRTOS_CLIRegisterCommand+0x16>
   17aca:	b672      	cpsid	i
   17acc:	e7fe      	b.n	17acc <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   17ace:	2008      	movs	r0, #8
   17ad0:	4b11      	ldr	r3, [pc, #68]	; (17b18 <FreeRTOS_CLIRegisterCommand+0x60>)
   17ad2:	4798      	blx	r3
   17ad4:	0003      	movs	r3, r0
   17ad6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   17ad8:	68bb      	ldr	r3, [r7, #8]
   17ada:	2b00      	cmp	r3, #0
   17adc:	d101      	bne.n	17ae2 <FreeRTOS_CLIRegisterCommand+0x2a>
   17ade:	b672      	cpsid	i
   17ae0:	e7fe      	b.n	17ae0 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   17ae2:	68bb      	ldr	r3, [r7, #8]
   17ae4:	2b00      	cmp	r3, #0
   17ae6:	d012      	beq.n	17b0e <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   17ae8:	4b0c      	ldr	r3, [pc, #48]	; (17b1c <FreeRTOS_CLIRegisterCommand+0x64>)
   17aea:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   17aec:	68bb      	ldr	r3, [r7, #8]
   17aee:	687a      	ldr	r2, [r7, #4]
   17af0:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   17af2:	68bb      	ldr	r3, [r7, #8]
   17af4:	2200      	movs	r2, #0
   17af6:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   17af8:	4b09      	ldr	r3, [pc, #36]	; (17b20 <FreeRTOS_CLIRegisterCommand+0x68>)
   17afa:	681b      	ldr	r3, [r3, #0]
   17afc:	68ba      	ldr	r2, [r7, #8]
   17afe:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   17b00:	4b07      	ldr	r3, [pc, #28]	; (17b20 <FreeRTOS_CLIRegisterCommand+0x68>)
   17b02:	68ba      	ldr	r2, [r7, #8]
   17b04:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   17b06:	4b07      	ldr	r3, [pc, #28]	; (17b24 <FreeRTOS_CLIRegisterCommand+0x6c>)
   17b08:	4798      	blx	r3

		xReturn = pdPASS;
   17b0a:	2301      	movs	r3, #1
   17b0c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   17b0e:	68fb      	ldr	r3, [r7, #12]
}
   17b10:	0018      	movs	r0, r3
   17b12:	46bd      	mov	sp, r7
   17b14:	b004      	add	sp, #16
   17b16:	bd80      	pop	{r7, pc}
   17b18:	00019ed1 	.word	0x00019ed1
   17b1c:	00019d99 	.word	0x00019d99
   17b20:	200000f4 	.word	0x200000f4
   17b24:	00019dbd 	.word	0x00019dbd

00017b28 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   17b28:	b580      	push	{r7, lr}
   17b2a:	b088      	sub	sp, #32
   17b2c:	af00      	add	r7, sp, #0
   17b2e:	60f8      	str	r0, [r7, #12]
   17b30:	60b9      	str	r1, [r7, #8]
   17b32:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   17b34:	2301      	movs	r3, #1
   17b36:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   17b38:	4b3d      	ldr	r3, [pc, #244]	; (17c30 <FreeRTOS_CLIProcessCommand+0x108>)
   17b3a:	681b      	ldr	r3, [r3, #0]
   17b3c:	2b00      	cmp	r3, #0
   17b3e:	d144      	bne.n	17bca <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   17b40:	4b3b      	ldr	r3, [pc, #236]	; (17c30 <FreeRTOS_CLIProcessCommand+0x108>)
   17b42:	4a3c      	ldr	r2, [pc, #240]	; (17c34 <FreeRTOS_CLIProcessCommand+0x10c>)
   17b44:	601a      	str	r2, [r3, #0]
   17b46:	e03a      	b.n	17bbe <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   17b48:	4b39      	ldr	r3, [pc, #228]	; (17c30 <FreeRTOS_CLIProcessCommand+0x108>)
   17b4a:	681b      	ldr	r3, [r3, #0]
   17b4c:	681b      	ldr	r3, [r3, #0]
   17b4e:	681b      	ldr	r3, [r3, #0]
   17b50:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   17b52:	69bb      	ldr	r3, [r7, #24]
   17b54:	0018      	movs	r0, r3
   17b56:	4b38      	ldr	r3, [pc, #224]	; (17c38 <FreeRTOS_CLIProcessCommand+0x110>)
   17b58:	4798      	blx	r3
   17b5a:	0003      	movs	r3, r0
   17b5c:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   17b5e:	68fa      	ldr	r2, [r7, #12]
   17b60:	697b      	ldr	r3, [r7, #20]
   17b62:	18d3      	adds	r3, r2, r3
   17b64:	781b      	ldrb	r3, [r3, #0]
   17b66:	2b20      	cmp	r3, #32
   17b68:	d005      	beq.n	17b76 <FreeRTOS_CLIProcessCommand+0x4e>
   17b6a:	68fa      	ldr	r2, [r7, #12]
   17b6c:	697b      	ldr	r3, [r7, #20]
   17b6e:	18d3      	adds	r3, r2, r3
   17b70:	781b      	ldrb	r3, [r3, #0]
   17b72:	2b00      	cmp	r3, #0
   17b74:	d11e      	bne.n	17bb4 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   17b76:	697a      	ldr	r2, [r7, #20]
   17b78:	69b9      	ldr	r1, [r7, #24]
   17b7a:	68fb      	ldr	r3, [r7, #12]
   17b7c:	0018      	movs	r0, r3
   17b7e:	4b2f      	ldr	r3, [pc, #188]	; (17c3c <FreeRTOS_CLIProcessCommand+0x114>)
   17b80:	4798      	blx	r3
   17b82:	1e03      	subs	r3, r0, #0
   17b84:	d116      	bne.n	17bb4 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   17b86:	4b2a      	ldr	r3, [pc, #168]	; (17c30 <FreeRTOS_CLIProcessCommand+0x108>)
   17b88:	681b      	ldr	r3, [r3, #0]
   17b8a:	681b      	ldr	r3, [r3, #0]
   17b8c:	7b1b      	ldrb	r3, [r3, #12]
   17b8e:	b25b      	sxtb	r3, r3
   17b90:	2b00      	cmp	r3, #0
   17b92:	db19      	blt.n	17bc8 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   17b94:	68fb      	ldr	r3, [r7, #12]
   17b96:	0018      	movs	r0, r3
   17b98:	4b29      	ldr	r3, [pc, #164]	; (17c40 <FreeRTOS_CLIProcessCommand+0x118>)
   17b9a:	4798      	blx	r3
   17b9c:	0003      	movs	r3, r0
   17b9e:	001a      	movs	r2, r3
   17ba0:	4b23      	ldr	r3, [pc, #140]	; (17c30 <FreeRTOS_CLIProcessCommand+0x108>)
   17ba2:	681b      	ldr	r3, [r3, #0]
   17ba4:	681b      	ldr	r3, [r3, #0]
   17ba6:	7b1b      	ldrb	r3, [r3, #12]
   17ba8:	b25b      	sxtb	r3, r3
   17baa:	429a      	cmp	r2, r3
   17bac:	d00c      	beq.n	17bc8 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   17bae:	2300      	movs	r3, #0
   17bb0:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   17bb2:	e009      	b.n	17bc8 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   17bb4:	4b1e      	ldr	r3, [pc, #120]	; (17c30 <FreeRTOS_CLIProcessCommand+0x108>)
   17bb6:	681b      	ldr	r3, [r3, #0]
   17bb8:	685a      	ldr	r2, [r3, #4]
   17bba:	4b1d      	ldr	r3, [pc, #116]	; (17c30 <FreeRTOS_CLIProcessCommand+0x108>)
   17bbc:	601a      	str	r2, [r3, #0]
   17bbe:	4b1c      	ldr	r3, [pc, #112]	; (17c30 <FreeRTOS_CLIProcessCommand+0x108>)
   17bc0:	681b      	ldr	r3, [r3, #0]
   17bc2:	2b00      	cmp	r3, #0
   17bc4:	d1c0      	bne.n	17b48 <FreeRTOS_CLIProcessCommand+0x20>
   17bc6:	e000      	b.n	17bca <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   17bc8:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   17bca:	4b19      	ldr	r3, [pc, #100]	; (17c30 <FreeRTOS_CLIProcessCommand+0x108>)
   17bcc:	681b      	ldr	r3, [r3, #0]
   17bce:	2b00      	cmp	r3, #0
   17bd0:	d00c      	beq.n	17bec <FreeRTOS_CLIProcessCommand+0xc4>
   17bd2:	69fb      	ldr	r3, [r7, #28]
   17bd4:	2b00      	cmp	r3, #0
   17bd6:	d109      	bne.n	17bec <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   17bd8:	687a      	ldr	r2, [r7, #4]
   17bda:	491a      	ldr	r1, [pc, #104]	; (17c44 <FreeRTOS_CLIProcessCommand+0x11c>)
   17bdc:	68bb      	ldr	r3, [r7, #8]
   17bde:	0018      	movs	r0, r3
   17be0:	4b19      	ldr	r3, [pc, #100]	; (17c48 <FreeRTOS_CLIProcessCommand+0x120>)
   17be2:	4798      	blx	r3
		pxCommand = NULL;
   17be4:	4b12      	ldr	r3, [pc, #72]	; (17c30 <FreeRTOS_CLIProcessCommand+0x108>)
   17be6:	2200      	movs	r2, #0
   17be8:	601a      	str	r2, [r3, #0]
   17bea:	e01c      	b.n	17c26 <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   17bec:	4b10      	ldr	r3, [pc, #64]	; (17c30 <FreeRTOS_CLIProcessCommand+0x108>)
   17bee:	681b      	ldr	r3, [r3, #0]
   17bf0:	2b00      	cmp	r3, #0
   17bf2:	d010      	beq.n	17c16 <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   17bf4:	4b0e      	ldr	r3, [pc, #56]	; (17c30 <FreeRTOS_CLIProcessCommand+0x108>)
   17bf6:	681b      	ldr	r3, [r3, #0]
   17bf8:	681b      	ldr	r3, [r3, #0]
   17bfa:	689b      	ldr	r3, [r3, #8]
   17bfc:	68fa      	ldr	r2, [r7, #12]
   17bfe:	6879      	ldr	r1, [r7, #4]
   17c00:	68b8      	ldr	r0, [r7, #8]
   17c02:	4798      	blx	r3
   17c04:	0003      	movs	r3, r0
   17c06:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   17c08:	69fb      	ldr	r3, [r7, #28]
   17c0a:	2b00      	cmp	r3, #0
   17c0c:	d10b      	bne.n	17c26 <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   17c0e:	4b08      	ldr	r3, [pc, #32]	; (17c30 <FreeRTOS_CLIProcessCommand+0x108>)
   17c10:	2200      	movs	r2, #0
   17c12:	601a      	str	r2, [r3, #0]
   17c14:	e007      	b.n	17c26 <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   17c16:	687a      	ldr	r2, [r7, #4]
   17c18:	490c      	ldr	r1, [pc, #48]	; (17c4c <FreeRTOS_CLIProcessCommand+0x124>)
   17c1a:	68bb      	ldr	r3, [r7, #8]
   17c1c:	0018      	movs	r0, r3
   17c1e:	4b0a      	ldr	r3, [pc, #40]	; (17c48 <FreeRTOS_CLIProcessCommand+0x120>)
   17c20:	4798      	blx	r3
		xReturn = pdFALSE;
   17c22:	2300      	movs	r3, #0
   17c24:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   17c26:	69fb      	ldr	r3, [r7, #28]
}
   17c28:	0018      	movs	r0, r3
   17c2a:	46bd      	mov	sp, r7
   17c2c:	b008      	add	sp, #32
   17c2e:	bd80      	pop	{r7, pc}
   17c30:	20000b54 	.word	0x20000b54
   17c34:	200000ec 	.word	0x200000ec
   17c38:	000349e7 	.word	0x000349e7
   17c3c:	000349f5 	.word	0x000349f5
   17c40:	00017cb1 	.word	0x00017cb1
   17c44:	000369fc 	.word	0x000369fc
   17c48:	00034a17 	.word	0x00034a17
   17c4c:	00036a54 	.word	0x00036a54

00017c50 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   17c50:	b580      	push	{r7, lr}
   17c52:	b086      	sub	sp, #24
   17c54:	af00      	add	r7, sp, #0
   17c56:	60f8      	str	r0, [r7, #12]
   17c58:	60b9      	str	r1, [r7, #8]
   17c5a:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   17c5c:	4b11      	ldr	r3, [pc, #68]	; (17ca4 <prvHelpCommand+0x54>)
   17c5e:	681b      	ldr	r3, [r3, #0]
   17c60:	2b00      	cmp	r3, #0
   17c62:	d102      	bne.n	17c6a <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   17c64:	4b0f      	ldr	r3, [pc, #60]	; (17ca4 <prvHelpCommand+0x54>)
   17c66:	4a10      	ldr	r2, [pc, #64]	; (17ca8 <prvHelpCommand+0x58>)
   17c68:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   17c6a:	4b0e      	ldr	r3, [pc, #56]	; (17ca4 <prvHelpCommand+0x54>)
   17c6c:	681b      	ldr	r3, [r3, #0]
   17c6e:	681b      	ldr	r3, [r3, #0]
   17c70:	6859      	ldr	r1, [r3, #4]
   17c72:	68ba      	ldr	r2, [r7, #8]
   17c74:	68fb      	ldr	r3, [r7, #12]
   17c76:	0018      	movs	r0, r3
   17c78:	4b0c      	ldr	r3, [pc, #48]	; (17cac <prvHelpCommand+0x5c>)
   17c7a:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   17c7c:	4b09      	ldr	r3, [pc, #36]	; (17ca4 <prvHelpCommand+0x54>)
   17c7e:	681b      	ldr	r3, [r3, #0]
   17c80:	685a      	ldr	r2, [r3, #4]
   17c82:	4b08      	ldr	r3, [pc, #32]	; (17ca4 <prvHelpCommand+0x54>)
   17c84:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   17c86:	4b07      	ldr	r3, [pc, #28]	; (17ca4 <prvHelpCommand+0x54>)
   17c88:	681b      	ldr	r3, [r3, #0]
   17c8a:	2b00      	cmp	r3, #0
   17c8c:	d102      	bne.n	17c94 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   17c8e:	2300      	movs	r3, #0
   17c90:	617b      	str	r3, [r7, #20]
   17c92:	e001      	b.n	17c98 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   17c94:	2301      	movs	r3, #1
   17c96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   17c98:	697b      	ldr	r3, [r7, #20]
}
   17c9a:	0018      	movs	r0, r3
   17c9c:	46bd      	mov	sp, r7
   17c9e:	b006      	add	sp, #24
   17ca0:	bd80      	pop	{r7, pc}
   17ca2:	46c0      	nop			; (mov r8, r8)
   17ca4:	20000b58 	.word	0x20000b58
   17ca8:	200000ec 	.word	0x200000ec
   17cac:	00034a17 	.word	0x00034a17

00017cb0 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   17cb0:	b580      	push	{r7, lr}
   17cb2:	b084      	sub	sp, #16
   17cb4:	af00      	add	r7, sp, #0
   17cb6:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   17cb8:	230f      	movs	r3, #15
   17cba:	18fb      	adds	r3, r7, r3
   17cbc:	2200      	movs	r2, #0
   17cbe:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   17cc0:	2300      	movs	r3, #0
   17cc2:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   17cc4:	e018      	b.n	17cf8 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   17cc6:	687b      	ldr	r3, [r7, #4]
   17cc8:	781b      	ldrb	r3, [r3, #0]
   17cca:	2b20      	cmp	r3, #32
   17ccc:	d10f      	bne.n	17cee <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   17cce:	68bb      	ldr	r3, [r7, #8]
   17cd0:	2b01      	cmp	r3, #1
   17cd2:	d00e      	beq.n	17cf2 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   17cd4:	230f      	movs	r3, #15
   17cd6:	18fb      	adds	r3, r7, r3
   17cd8:	781b      	ldrb	r3, [r3, #0]
   17cda:	b25b      	sxtb	r3, r3
   17cdc:	b2db      	uxtb	r3, r3
   17cde:	3301      	adds	r3, #1
   17ce0:	b2da      	uxtb	r2, r3
   17ce2:	230f      	movs	r3, #15
   17ce4:	18fb      	adds	r3, r7, r3
   17ce6:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   17ce8:	2301      	movs	r3, #1
   17cea:	60bb      	str	r3, [r7, #8]
   17cec:	e001      	b.n	17cf2 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   17cee:	2300      	movs	r3, #0
   17cf0:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   17cf2:	687b      	ldr	r3, [r7, #4]
   17cf4:	3301      	adds	r3, #1
   17cf6:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   17cf8:	687b      	ldr	r3, [r7, #4]
   17cfa:	781b      	ldrb	r3, [r3, #0]
   17cfc:	2b00      	cmp	r3, #0
   17cfe:	d1e2      	bne.n	17cc6 <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   17d00:	68bb      	ldr	r3, [r7, #8]
   17d02:	2b01      	cmp	r3, #1
   17d04:	d109      	bne.n	17d1a <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   17d06:	230f      	movs	r3, #15
   17d08:	18fb      	adds	r3, r7, r3
   17d0a:	781b      	ldrb	r3, [r3, #0]
   17d0c:	b25b      	sxtb	r3, r3
   17d0e:	b2db      	uxtb	r3, r3
   17d10:	3b01      	subs	r3, #1
   17d12:	b2da      	uxtb	r2, r3
   17d14:	230f      	movs	r3, #15
   17d16:	18fb      	adds	r3, r7, r3
   17d18:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   17d1a:	230f      	movs	r3, #15
   17d1c:	18fb      	adds	r3, r7, r3
   17d1e:	781b      	ldrb	r3, [r3, #0]
   17d20:	b25b      	sxtb	r3, r3
}
   17d22:	0018      	movs	r0, r3
   17d24:	46bd      	mov	sp, r7
   17d26:	b004      	add	sp, #16
   17d28:	bd80      	pop	{r7, pc}
	...

00017d2c <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   17d2c:	b580      	push	{r7, lr}
   17d2e:	b082      	sub	sp, #8
   17d30:	af00      	add	r7, sp, #0
   17d32:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   17d34:	687b      	ldr	r3, [r7, #4]
   17d36:	0018      	movs	r0, r3
   17d38:	4b03      	ldr	r3, [pc, #12]	; (17d48 <prvTraceGetQueueNumber+0x1c>)
   17d3a:	4798      	blx	r3
   17d3c:	0003      	movs	r3, r0
}
   17d3e:	0018      	movs	r0, r3
   17d40:	46bd      	mov	sp, r7
   17d42:	b002      	add	sp, #8
   17d44:	bd80      	pop	{r7, pc}
   17d46:	46c0      	nop			; (mov r8, r8)
   17d48:	0001b4f5 	.word	0x0001b4f5

00017d4c <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   17d4c:	b580      	push	{r7, lr}
   17d4e:	b082      	sub	sp, #8
   17d50:	af00      	add	r7, sp, #0
   17d52:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   17d54:	687b      	ldr	r3, [r7, #4]
   17d56:	0018      	movs	r0, r3
   17d58:	4b03      	ldr	r3, [pc, #12]	; (17d68 <prvTraceGetQueueType+0x1c>)
   17d5a:	4798      	blx	r3
   17d5c:	0003      	movs	r3, r0
}
   17d5e:	0018      	movs	r0, r3
   17d60:	46bd      	mov	sp, r7
   17d62:	b002      	add	sp, #8
   17d64:	bd80      	pop	{r7, pc}
   17d66:	46c0      	nop			; (mov r8, r8)
   17d68:	0001b521 	.word	0x0001b521

00017d6c <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   17d6c:	b580      	push	{r7, lr}
   17d6e:	b082      	sub	sp, #8
   17d70:	af00      	add	r7, sp, #0
   17d72:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   17d74:	687b      	ldr	r3, [r7, #4]
   17d76:	0018      	movs	r0, r3
   17d78:	4b03      	ldr	r3, [pc, #12]	; (17d88 <prvTraceGetTaskNumberLow16+0x1c>)
   17d7a:	4798      	blx	r3
   17d7c:	0003      	movs	r3, r0
   17d7e:	b29b      	uxth	r3, r3
}
   17d80:	0018      	movs	r0, r3
   17d82:	46bd      	mov	sp, r7
   17d84:	b002      	add	sp, #8
   17d86:	bd80      	pop	{r7, pc}
   17d88:	0001c851 	.word	0x0001c851

00017d8c <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   17d8c:	b580      	push	{r7, lr}
   17d8e:	b082      	sub	sp, #8
   17d90:	af00      	add	r7, sp, #0
   17d92:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   17d94:	687b      	ldr	r3, [r7, #4]
   17d96:	0018      	movs	r0, r3
   17d98:	4b04      	ldr	r3, [pc, #16]	; (17dac <prvTraceGetTaskNumberHigh16+0x20>)
   17d9a:	4798      	blx	r3
   17d9c:	0003      	movs	r3, r0
   17d9e:	0c1b      	lsrs	r3, r3, #16
   17da0:	b29b      	uxth	r3, r3
}
   17da2:	0018      	movs	r0, r3
   17da4:	46bd      	mov	sp, r7
   17da6:	b002      	add	sp, #8
   17da8:	bd80      	pop	{r7, pc}
   17daa:	46c0      	nop			; (mov r8, r8)
   17dac:	0001c851 	.word	0x0001c851

00017db0 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   17db0:	b580      	push	{r7, lr}
   17db2:	b082      	sub	sp, #8
   17db4:	af00      	add	r7, sp, #0
   17db6:	6078      	str	r0, [r7, #4]
   17db8:	000a      	movs	r2, r1
   17dba:	1cbb      	adds	r3, r7, #2
   17dbc:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   17dbe:	687b      	ldr	r3, [r7, #4]
   17dc0:	0018      	movs	r0, r3
   17dc2:	4b08      	ldr	r3, [pc, #32]	; (17de4 <prvTraceSetTaskNumberLow16+0x34>)
   17dc4:	4798      	blx	r3
   17dc6:	0003      	movs	r3, r0
   17dc8:	0c1b      	lsrs	r3, r3, #16
   17dca:	041a      	lsls	r2, r3, #16
   17dcc:	1cbb      	adds	r3, r7, #2
   17dce:	881b      	ldrh	r3, [r3, #0]
   17dd0:	431a      	orrs	r2, r3
   17dd2:	687b      	ldr	r3, [r7, #4]
   17dd4:	0011      	movs	r1, r2
   17dd6:	0018      	movs	r0, r3
   17dd8:	4b03      	ldr	r3, [pc, #12]	; (17de8 <prvTraceSetTaskNumberLow16+0x38>)
   17dda:	4798      	blx	r3
}
   17ddc:	46c0      	nop			; (mov r8, r8)
   17dde:	46bd      	mov	sp, r7
   17de0:	b002      	add	sp, #8
   17de2:	bd80      	pop	{r7, pc}
   17de4:	0001c851 	.word	0x0001c851
   17de8:	0001c879 	.word	0x0001c879

00017dec <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   17dec:	b580      	push	{r7, lr}
   17dee:	b082      	sub	sp, #8
   17df0:	af00      	add	r7, sp, #0
   17df2:	6078      	str	r0, [r7, #4]
   17df4:	000a      	movs	r2, r1
   17df6:	1cbb      	adds	r3, r7, #2
   17df8:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   17dfa:	687b      	ldr	r3, [r7, #4]
   17dfc:	0018      	movs	r0, r3
   17dfe:	4b09      	ldr	r3, [pc, #36]	; (17e24 <prvTraceSetTaskNumberHigh16+0x38>)
   17e00:	4798      	blx	r3
   17e02:	0003      	movs	r3, r0
   17e04:	041b      	lsls	r3, r3, #16
   17e06:	0c1a      	lsrs	r2, r3, #16
   17e08:	1cbb      	adds	r3, r7, #2
   17e0a:	881b      	ldrh	r3, [r3, #0]
   17e0c:	041b      	lsls	r3, r3, #16
   17e0e:	431a      	orrs	r2, r3
   17e10:	687b      	ldr	r3, [r7, #4]
   17e12:	0011      	movs	r1, r2
   17e14:	0018      	movs	r0, r3
   17e16:	4b04      	ldr	r3, [pc, #16]	; (17e28 <prvTraceSetTaskNumberHigh16+0x3c>)
   17e18:	4798      	blx	r3
}
   17e1a:	46c0      	nop			; (mov r8, r8)
   17e1c:	46bd      	mov	sp, r7
   17e1e:	b002      	add	sp, #8
   17e20:	bd80      	pop	{r7, pc}
   17e22:	46c0      	nop			; (mov r8, r8)
   17e24:	0001c851 	.word	0x0001c851
   17e28:	0001c879 	.word	0x0001c879

00017e2c <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   17e2c:	b580      	push	{r7, lr}
   17e2e:	b082      	sub	sp, #8
   17e30:	af00      	add	r7, sp, #0
   17e32:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   17e34:	687b      	ldr	r3, [r7, #4]
   17e36:	0018      	movs	r0, r3
   17e38:	4b03      	ldr	r3, [pc, #12]	; (17e48 <prvTraceGetQueueNumberLow16+0x1c>)
   17e3a:	4798      	blx	r3
   17e3c:	0003      	movs	r3, r0
   17e3e:	b29b      	uxth	r3, r3
}
   17e40:	0018      	movs	r0, r3
   17e42:	46bd      	mov	sp, r7
   17e44:	b002      	add	sp, #8
   17e46:	bd80      	pop	{r7, pc}
   17e48:	00017d2d 	.word	0x00017d2d

00017e4c <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   17e4c:	b580      	push	{r7, lr}
   17e4e:	b082      	sub	sp, #8
   17e50:	af00      	add	r7, sp, #0
   17e52:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   17e54:	687b      	ldr	r3, [r7, #4]
   17e56:	0018      	movs	r0, r3
   17e58:	4b04      	ldr	r3, [pc, #16]	; (17e6c <prvTraceGetQueueNumberHigh16+0x20>)
   17e5a:	4798      	blx	r3
   17e5c:	0003      	movs	r3, r0
   17e5e:	0c1b      	lsrs	r3, r3, #16
   17e60:	b29b      	uxth	r3, r3
}
   17e62:	0018      	movs	r0, r3
   17e64:	46bd      	mov	sp, r7
   17e66:	b002      	add	sp, #8
   17e68:	bd80      	pop	{r7, pc}
   17e6a:	46c0      	nop			; (mov r8, r8)
   17e6c:	00017d2d 	.word	0x00017d2d

00017e70 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   17e70:	b580      	push	{r7, lr}
   17e72:	b082      	sub	sp, #8
   17e74:	af00      	add	r7, sp, #0
   17e76:	6078      	str	r0, [r7, #4]
   17e78:	000a      	movs	r2, r1
   17e7a:	1cbb      	adds	r3, r7, #2
   17e7c:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   17e7e:	687b      	ldr	r3, [r7, #4]
   17e80:	0018      	movs	r0, r3
   17e82:	4b08      	ldr	r3, [pc, #32]	; (17ea4 <prvTraceSetQueueNumberLow16+0x34>)
   17e84:	4798      	blx	r3
   17e86:	0003      	movs	r3, r0
   17e88:	0c1b      	lsrs	r3, r3, #16
   17e8a:	041a      	lsls	r2, r3, #16
   17e8c:	1cbb      	adds	r3, r7, #2
   17e8e:	881b      	ldrh	r3, [r3, #0]
   17e90:	431a      	orrs	r2, r3
   17e92:	687b      	ldr	r3, [r7, #4]
   17e94:	0011      	movs	r1, r2
   17e96:	0018      	movs	r0, r3
   17e98:	4b03      	ldr	r3, [pc, #12]	; (17ea8 <prvTraceSetQueueNumberLow16+0x38>)
   17e9a:	4798      	blx	r3
}
   17e9c:	46c0      	nop			; (mov r8, r8)
   17e9e:	46bd      	mov	sp, r7
   17ea0:	b002      	add	sp, #8
   17ea2:	bd80      	pop	{r7, pc}
   17ea4:	00017d2d 	.word	0x00017d2d
   17ea8:	0001b509 	.word	0x0001b509

00017eac <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   17eac:	b580      	push	{r7, lr}
   17eae:	b082      	sub	sp, #8
   17eb0:	af00      	add	r7, sp, #0
   17eb2:	6078      	str	r0, [r7, #4]
   17eb4:	000a      	movs	r2, r1
   17eb6:	1cbb      	adds	r3, r7, #2
   17eb8:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   17eba:	687b      	ldr	r3, [r7, #4]
   17ebc:	0018      	movs	r0, r3
   17ebe:	4b09      	ldr	r3, [pc, #36]	; (17ee4 <prvTraceSetQueueNumberHigh16+0x38>)
   17ec0:	4798      	blx	r3
   17ec2:	0003      	movs	r3, r0
   17ec4:	041b      	lsls	r3, r3, #16
   17ec6:	0c1a      	lsrs	r2, r3, #16
   17ec8:	1cbb      	adds	r3, r7, #2
   17eca:	881b      	ldrh	r3, [r3, #0]
   17ecc:	041b      	lsls	r3, r3, #16
   17ece:	431a      	orrs	r2, r3
   17ed0:	687b      	ldr	r3, [r7, #4]
   17ed2:	0011      	movs	r1, r2
   17ed4:	0018      	movs	r0, r3
   17ed6:	4b04      	ldr	r3, [pc, #16]	; (17ee8 <prvTraceSetQueueNumberHigh16+0x3c>)
   17ed8:	4798      	blx	r3
}
   17eda:	46c0      	nop			; (mov r8, r8)
   17edc:	46bd      	mov	sp, r7
   17ede:	b002      	add	sp, #8
   17ee0:	bd80      	pop	{r7, pc}
   17ee2:	46c0      	nop			; (mov r8, r8)
   17ee4:	00017d2d 	.word	0x00017d2d
   17ee8:	0001b509 	.word	0x0001b509

00017eec <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   17eec:	b580      	push	{r7, lr}
   17eee:	b084      	sub	sp, #16
   17ef0:	af00      	add	r7, sp, #0
   17ef2:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   17ef4:	2300      	movs	r3, #0
   17ef6:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   17ef8:	2300      	movs	r3, #0
   17efa:	60bb      	str	r3, [r7, #8]
   17efc:	e018      	b.n	17f30 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   17efe:	4b14      	ldr	r3, [pc, #80]	; (17f50 <prvAddTaskToStackMonitor+0x64>)
   17f00:	68ba      	ldr	r2, [r7, #8]
   17f02:	00d2      	lsls	r2, r2, #3
   17f04:	58d3      	ldr	r3, [r2, r3]
   17f06:	2b00      	cmp	r3, #0
   17f08:	d10f      	bne.n	17f2a <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   17f0a:	4b11      	ldr	r3, [pc, #68]	; (17f50 <prvAddTaskToStackMonitor+0x64>)
   17f0c:	68ba      	ldr	r2, [r7, #8]
   17f0e:	00d2      	lsls	r2, r2, #3
   17f10:	6879      	ldr	r1, [r7, #4]
   17f12:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   17f14:	4a0e      	ldr	r2, [pc, #56]	; (17f50 <prvAddTaskToStackMonitor+0x64>)
   17f16:	68bb      	ldr	r3, [r7, #8]
   17f18:	00db      	lsls	r3, r3, #3
   17f1a:	18d3      	adds	r3, r2, r3
   17f1c:	3304      	adds	r3, #4
   17f1e:	2201      	movs	r2, #1
   17f20:	4252      	negs	r2, r2
   17f22:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   17f24:	2301      	movs	r3, #1
   17f26:	60fb      	str	r3, [r7, #12]
			break;
   17f28:	e005      	b.n	17f36 <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   17f2a:	68bb      	ldr	r3, [r7, #8]
   17f2c:	3301      	adds	r3, #1
   17f2e:	60bb      	str	r3, [r7, #8]
   17f30:	68bb      	ldr	r3, [r7, #8]
   17f32:	2b09      	cmp	r3, #9
   17f34:	dde3      	ble.n	17efe <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   17f36:	68fb      	ldr	r3, [r7, #12]
   17f38:	2b00      	cmp	r3, #0
   17f3a:	d104      	bne.n	17f46 <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   17f3c:	4b05      	ldr	r3, [pc, #20]	; (17f54 <prvAddTaskToStackMonitor+0x68>)
   17f3e:	681b      	ldr	r3, [r3, #0]
   17f40:	1c5a      	adds	r2, r3, #1
   17f42:	4b04      	ldr	r3, [pc, #16]	; (17f54 <prvAddTaskToStackMonitor+0x68>)
   17f44:	601a      	str	r2, [r3, #0]
	}
}
   17f46:	46c0      	nop			; (mov r8, r8)
   17f48:	46bd      	mov	sp, r7
   17f4a:	b004      	add	sp, #16
   17f4c:	bd80      	pop	{r7, pc}
   17f4e:	46c0      	nop			; (mov r8, r8)
   17f50:	20000b60 	.word	0x20000b60
   17f54:	20000bb0 	.word	0x20000bb0

00017f58 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   17f58:	b590      	push	{r4, r7, lr}
   17f5a:	b085      	sub	sp, #20
   17f5c:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   17f5e:	2300      	movs	r3, #0
   17f60:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   17f62:	4b2b      	ldr	r3, [pc, #172]	; (18010 <prvReportStackUsage+0xb8>)
   17f64:	681b      	ldr	r3, [r3, #0]
   17f66:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   17f68:	4b29      	ldr	r3, [pc, #164]	; (18010 <prvReportStackUsage+0xb8>)
   17f6a:	681a      	ldr	r2, [r3, #0]
   17f6c:	4b29      	ldr	r3, [pc, #164]	; (18014 <prvReportStackUsage+0xbc>)
   17f6e:	00d2      	lsls	r2, r2, #3
   17f70:	58d3      	ldr	r3, [r2, r3]
   17f72:	2b00      	cmp	r3, #0
   17f74:	d035      	beq.n	17fe2 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   17f76:	4b26      	ldr	r3, [pc, #152]	; (18010 <prvReportStackUsage+0xb8>)
   17f78:	681a      	ldr	r2, [r3, #0]
   17f7a:	4b26      	ldr	r3, [pc, #152]	; (18014 <prvReportStackUsage+0xbc>)
   17f7c:	00d2      	lsls	r2, r2, #3
   17f7e:	58d3      	ldr	r3, [r2, r3]
   17f80:	0018      	movs	r0, r3
   17f82:	4b25      	ldr	r3, [pc, #148]	; (18018 <prvReportStackUsage+0xc0>)
   17f84:	4798      	blx	r3
   17f86:	0003      	movs	r3, r0
   17f88:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   17f8a:	4b21      	ldr	r3, [pc, #132]	; (18010 <prvReportStackUsage+0xb8>)
   17f8c:	681b      	ldr	r3, [r3, #0]
   17f8e:	4a21      	ldr	r2, [pc, #132]	; (18014 <prvReportStackUsage+0xbc>)
   17f90:	00db      	lsls	r3, r3, #3
   17f92:	18d3      	adds	r3, r2, r3
   17f94:	3304      	adds	r3, #4
   17f96:	681a      	ldr	r2, [r3, #0]
   17f98:	687b      	ldr	r3, [r7, #4]
   17f9a:	429a      	cmp	r2, r3
   17f9c:	d907      	bls.n	17fae <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   17f9e:	4b1c      	ldr	r3, [pc, #112]	; (18010 <prvReportStackUsage+0xb8>)
   17fa0:	681b      	ldr	r3, [r3, #0]
   17fa2:	4a1c      	ldr	r2, [pc, #112]	; (18014 <prvReportStackUsage+0xbc>)
   17fa4:	00db      	lsls	r3, r3, #3
   17fa6:	18d3      	adds	r3, r2, r3
   17fa8:	3304      	adds	r3, #4
   17faa:	687a      	ldr	r2, [r7, #4]
   17fac:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   17fae:	4b18      	ldr	r3, [pc, #96]	; (18010 <prvReportStackUsage+0xb8>)
   17fb0:	681a      	ldr	r2, [r3, #0]
   17fb2:	4b18      	ldr	r3, [pc, #96]	; (18014 <prvReportStackUsage+0xbc>)
   17fb4:	00d2      	lsls	r2, r2, #3
   17fb6:	58d3      	ldr	r3, [r2, r3]
   17fb8:	0018      	movs	r0, r3
   17fba:	4b18      	ldr	r3, [pc, #96]	; (1801c <prvReportStackUsage+0xc4>)
   17fbc:	4798      	blx	r3
   17fbe:	0003      	movs	r3, r0
   17fc0:	b2db      	uxtb	r3, r3
   17fc2:	0019      	movs	r1, r3
   17fc4:	4b12      	ldr	r3, [pc, #72]	; (18010 <prvReportStackUsage+0xb8>)
   17fc6:	681b      	ldr	r3, [r3, #0]
   17fc8:	4a12      	ldr	r2, [pc, #72]	; (18014 <prvReportStackUsage+0xbc>)
   17fca:	00db      	lsls	r3, r3, #3
   17fcc:	18d3      	adds	r3, r2, r3
   17fce:	3304      	adds	r3, #4
   17fd0:	681b      	ldr	r3, [r3, #0]
   17fd2:	000a      	movs	r2, r1
   17fd4:	2103      	movs	r1, #3
   17fd6:	20ea      	movs	r0, #234	; 0xea
   17fd8:	4c11      	ldr	r4, [pc, #68]	; (18020 <prvReportStackUsage+0xc8>)
   17fda:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   17fdc:	68fb      	ldr	r3, [r7, #12]
   17fde:	3301      	adds	r3, #1
   17fe0:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   17fe2:	4b0b      	ldr	r3, [pc, #44]	; (18010 <prvReportStackUsage+0xb8>)
   17fe4:	681b      	ldr	r3, [r3, #0]
   17fe6:	1c5a      	adds	r2, r3, #1
   17fe8:	4b0e      	ldr	r3, [pc, #56]	; (18024 <prvReportStackUsage+0xcc>)
   17fea:	210a      	movs	r1, #10
   17fec:	0010      	movs	r0, r2
   17fee:	4798      	blx	r3
   17ff0:	000b      	movs	r3, r1
   17ff2:	001a      	movs	r2, r3
   17ff4:	4b06      	ldr	r3, [pc, #24]	; (18010 <prvReportStackUsage+0xb8>)
   17ff6:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   17ff8:	68fb      	ldr	r3, [r7, #12]
   17ffa:	2b00      	cmp	r3, #0
   17ffc:	dc04      	bgt.n	18008 <prvReportStackUsage+0xb0>
   17ffe:	4b04      	ldr	r3, [pc, #16]	; (18010 <prvReportStackUsage+0xb8>)
   18000:	681a      	ldr	r2, [r3, #0]
   18002:	68bb      	ldr	r3, [r7, #8]
   18004:	429a      	cmp	r2, r3
   18006:	d1af      	bne.n	17f68 <prvReportStackUsage+0x10>
}
   18008:	46c0      	nop			; (mov r8, r8)
   1800a:	46bd      	mov	sp, r7
   1800c:	b005      	add	sp, #20
   1800e:	bd90      	pop	{r4, r7, pc}
   18010:	20000bb4 	.word	0x20000bb4
   18014:	20000b60 	.word	0x20000b60
   18018:	0001c9f1 	.word	0x0001c9f1
   1801c:	00017d6d 	.word	0x00017d6d
   18020:	000188b5 	.word	0x000188b5
   18024:	00032935 	.word	0x00032935

00018028 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   18028:	b580      	push	{r7, lr}
   1802a:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   1802c:	4b02      	ldr	r3, [pc, #8]	; (18038 <prvTraceGetCurrentTaskHandle+0x10>)
   1802e:	4798      	blx	r3
   18030:	0003      	movs	r3, r0
}
   18032:	0018      	movs	r0, r3
   18034:	46bd      	mov	sp, r7
   18036:	bd80      	pop	{r7, pc}
   18038:	0001ca9d 	.word	0x0001ca9d

0001803c <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   1803c:	b590      	push	{r4, r7, lr}
   1803e:	b085      	sub	sp, #20
   18040:	af02      	add	r7, sp, #8
   18042:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   18044:	4b14      	ldr	r3, [pc, #80]	; (18098 <vTraceEnable+0x5c>)
   18046:	4798      	blx	r3

	if (startOption == TRC_START)
   18048:	687b      	ldr	r3, [r7, #4]
   1804a:	2b01      	cmp	r3, #1
   1804c:	d102      	bne.n	18054 <vTraceEnable+0x18>
	{
		vTraceStart();
   1804e:	4b13      	ldr	r3, [pc, #76]	; (1809c <vTraceEnable+0x60>)
   18050:	4798      	blx	r3
   18052:	e00e      	b.n	18072 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   18054:	687b      	ldr	r3, [r7, #4]
   18056:	2b02      	cmp	r3, #2
   18058:	d104      	bne.n	18064 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   1805a:	4b11      	ldr	r3, [pc, #68]	; (180a0 <vTraceEnable+0x64>)
   1805c:	0018      	movs	r0, r3
   1805e:	4b11      	ldr	r3, [pc, #68]	; (180a4 <vTraceEnable+0x68>)
   18060:	4798      	blx	r3
   18062:	e006      	b.n	18072 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   18064:	687b      	ldr	r3, [r7, #4]
   18066:	2b00      	cmp	r3, #0
   18068:	d003      	beq.n	18072 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   1806a:	4b0f      	ldr	r3, [pc, #60]	; (180a8 <vTraceEnable+0x6c>)
   1806c:	0018      	movs	r0, r3
   1806e:	4b0d      	ldr	r3, [pc, #52]	; (180a4 <vTraceEnable+0x68>)
   18070:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   18072:	4b0e      	ldr	r3, [pc, #56]	; (180ac <vTraceEnable+0x70>)
   18074:	681b      	ldr	r3, [r3, #0]
   18076:	2b00      	cmp	r3, #0
   18078:	d10a      	bne.n	18090 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   1807a:	2396      	movs	r3, #150	; 0x96
   1807c:	005a      	lsls	r2, r3, #1
   1807e:	490c      	ldr	r1, [pc, #48]	; (180b0 <vTraceEnable+0x74>)
   18080:	480c      	ldr	r0, [pc, #48]	; (180b4 <vTraceEnable+0x78>)
   18082:	4b0a      	ldr	r3, [pc, #40]	; (180ac <vTraceEnable+0x70>)
   18084:	9301      	str	r3, [sp, #4]
   18086:	2304      	movs	r3, #4
   18088:	9300      	str	r3, [sp, #0]
   1808a:	2300      	movs	r3, #0
   1808c:	4c0a      	ldr	r4, [pc, #40]	; (180b8 <vTraceEnable+0x7c>)
   1808e:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   18090:	46c0      	nop			; (mov r8, r8)
   18092:	46bd      	mov	sp, r7
   18094:	b003      	add	sp, #12
   18096:	bd90      	pop	{r4, r7, pc}
   18098:	00018f81 	.word	0x00018f81
   1809c:	000184d9 	.word	0x000184d9
   180a0:	00036ab4 	.word	0x00036ab4
   180a4:	00019629 	.word	0x00019629
   180a8:	00036af4 	.word	0x00036af4
   180ac:	20000b5c 	.word	0x20000b5c
   180b0:	00036b28 	.word	0x00036b28
   180b4:	000180bd 	.word	0x000180bd
   180b8:	0001b9f5 	.word	0x0001b9f5

000180bc <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   180bc:	b580      	push	{r7, lr}
   180be:	b082      	sub	sp, #8
   180c0:	af00      	add	r7, sp, #0
   180c2:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   180c4:	4b04      	ldr	r3, [pc, #16]	; (180d8 <TzCtrl+0x1c>)
   180c6:	4798      	blx	r3
   180c8:	1e03      	subs	r3, r0, #0
   180ca:	d001      	beq.n	180d0 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   180cc:	4b03      	ldr	r3, [pc, #12]	; (180dc <TzCtrl+0x20>)
   180ce:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   180d0:	2004      	movs	r0, #4
   180d2:	4b03      	ldr	r3, [pc, #12]	; (180e0 <TzCtrl+0x24>)
   180d4:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   180d6:	e7f5      	b.n	180c4 <TzCtrl+0x8>
   180d8:	0001851d 	.word	0x0001851d
   180dc:	00017f59 	.word	0x00017f59
   180e0:	0001bd91 	.word	0x0001bd91

000180e4 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   180e4:	b580      	push	{r7, lr}
   180e6:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   180e8:	4b60      	ldr	r3, [pc, #384]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   180ea:	681b      	ldr	r3, [r3, #0]
   180ec:	2209      	movs	r2, #9
   180ee:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   180f0:	4b5e      	ldr	r3, [pc, #376]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   180f2:	681b      	ldr	r3, [r3, #0]
   180f4:	2264      	movs	r2, #100	; 0x64
   180f6:	210a      	movs	r1, #10
   180f8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   180fa:	4b5c      	ldr	r3, [pc, #368]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   180fc:	681b      	ldr	r3, [r3, #0]
   180fe:	2265      	movs	r2, #101	; 0x65
   18100:	210a      	movs	r1, #10
   18102:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   18104:	4b59      	ldr	r3, [pc, #356]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   18106:	681b      	ldr	r3, [r3, #0]
   18108:	2266      	movs	r2, #102	; 0x66
   1810a:	210a      	movs	r1, #10
   1810c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   1810e:	4b57      	ldr	r3, [pc, #348]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   18110:	681b      	ldr	r3, [r3, #0]
   18112:	2267      	movs	r2, #103	; 0x67
   18114:	210f      	movs	r1, #15
   18116:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   18118:	4b54      	ldr	r3, [pc, #336]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   1811a:	681b      	ldr	r3, [r3, #0]
   1811c:	2268      	movs	r2, #104	; 0x68
   1811e:	2105      	movs	r1, #5
   18120:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   18122:	4b52      	ldr	r3, [pc, #328]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   18124:	681b      	ldr	r3, [r3, #0]
   18126:	2269      	movs	r2, #105	; 0x69
   18128:	2105      	movs	r1, #5
   1812a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   1812c:	4b4f      	ldr	r3, [pc, #316]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   1812e:	681b      	ldr	r3, [r3, #0]
   18130:	226a      	movs	r2, #106	; 0x6a
   18132:	2105      	movs	r1, #5
   18134:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   18136:	4b4d      	ldr	r3, [pc, #308]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   18138:	681b      	ldr	r3, [r3, #0]
   1813a:	226b      	movs	r2, #107	; 0x6b
   1813c:	2105      	movs	r1, #5
   1813e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   18140:	4b4a      	ldr	r3, [pc, #296]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   18142:	681b      	ldr	r3, [r3, #0]
   18144:	226c      	movs	r2, #108	; 0x6c
   18146:	2105      	movs	r1, #5
   18148:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   1814a:	4b48      	ldr	r3, [pc, #288]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   1814c:	681b      	ldr	r3, [r3, #0]
   1814e:	2270      	movs	r2, #112	; 0x70
   18150:	210f      	movs	r1, #15
   18152:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   18154:	4b45      	ldr	r3, [pc, #276]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   18156:	681b      	ldr	r3, [r3, #0]
   18158:	2271      	movs	r2, #113	; 0x71
   1815a:	210f      	movs	r1, #15
   1815c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   1815e:	4b43      	ldr	r3, [pc, #268]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   18160:	681b      	ldr	r3, [r3, #0]
   18162:	2272      	movs	r2, #114	; 0x72
   18164:	210f      	movs	r1, #15
   18166:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   18168:	4b40      	ldr	r3, [pc, #256]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   1816a:	681b      	ldr	r3, [r3, #0]
   1816c:	2273      	movs	r2, #115	; 0x73
   1816e:	210f      	movs	r1, #15
   18170:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   18172:	4b3e      	ldr	r3, [pc, #248]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   18174:	681b      	ldr	r3, [r3, #0]
   18176:	2274      	movs	r2, #116	; 0x74
   18178:	210f      	movs	r1, #15
   1817a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   1817c:	4b3b      	ldr	r3, [pc, #236]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   1817e:	681b      	ldr	r3, [r3, #0]
   18180:	2275      	movs	r2, #117	; 0x75
   18182:	210f      	movs	r1, #15
   18184:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   18186:	4b39      	ldr	r3, [pc, #228]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   18188:	681b      	ldr	r3, [r3, #0]
   1818a:	2276      	movs	r2, #118	; 0x76
   1818c:	210f      	movs	r1, #15
   1818e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   18190:	4b36      	ldr	r3, [pc, #216]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   18192:	681b      	ldr	r3, [r3, #0]
   18194:	2277      	movs	r2, #119	; 0x77
   18196:	210f      	movs	r1, #15
   18198:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   1819a:	4b34      	ldr	r3, [pc, #208]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   1819c:	681b      	ldr	r3, [r3, #0]
   1819e:	2278      	movs	r2, #120	; 0x78
   181a0:	210f      	movs	r1, #15
   181a2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   181a4:	4b31      	ldr	r3, [pc, #196]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   181a6:	681b      	ldr	r3, [r3, #0]
   181a8:	227c      	movs	r2, #124	; 0x7c
   181aa:	2110      	movs	r1, #16
   181ac:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   181ae:	4b2f      	ldr	r3, [pc, #188]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   181b0:	681b      	ldr	r3, [r3, #0]
   181b2:	227d      	movs	r2, #125	; 0x7d
   181b4:	2110      	movs	r1, #16
   181b6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   181b8:	4b2c      	ldr	r3, [pc, #176]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   181ba:	681b      	ldr	r3, [r3, #0]
   181bc:	227e      	movs	r2, #126	; 0x7e
   181be:	2110      	movs	r1, #16
   181c0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   181c2:	4b2a      	ldr	r3, [pc, #168]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   181c4:	681b      	ldr	r3, [r3, #0]
   181c6:	227f      	movs	r2, #127	; 0x7f
   181c8:	2113      	movs	r1, #19
   181ca:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   181cc:	4b27      	ldr	r3, [pc, #156]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   181ce:	681b      	ldr	r3, [r3, #0]
   181d0:	2280      	movs	r2, #128	; 0x80
   181d2:	2111      	movs	r1, #17
   181d4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   181d6:	4b25      	ldr	r3, [pc, #148]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   181d8:	681b      	ldr	r3, [r3, #0]
   181da:	2281      	movs	r2, #129	; 0x81
   181dc:	2110      	movs	r1, #16
   181de:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   181e0:	4b22      	ldr	r3, [pc, #136]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   181e2:	681b      	ldr	r3, [r3, #0]
   181e4:	2282      	movs	r2, #130	; 0x82
   181e6:	2113      	movs	r1, #19
   181e8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   181ea:	4b20      	ldr	r3, [pc, #128]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   181ec:	681b      	ldr	r3, [r3, #0]
   181ee:	2283      	movs	r2, #131	; 0x83
   181f0:	2113      	movs	r1, #19
   181f2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   181f4:	4b1d      	ldr	r3, [pc, #116]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   181f6:	681b      	ldr	r3, [r3, #0]
   181f8:	2284      	movs	r2, #132	; 0x84
   181fa:	2113      	movs	r1, #19
   181fc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   181fe:	4b1b      	ldr	r3, [pc, #108]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   18200:	681b      	ldr	r3, [r3, #0]
   18202:	2288      	movs	r2, #136	; 0x88
   18204:	2100      	movs	r1, #0
   18206:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   18208:	4b18      	ldr	r3, [pc, #96]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   1820a:	681b      	ldr	r3, [r3, #0]
   1820c:	228a      	movs	r2, #138	; 0x8a
   1820e:	21a0      	movs	r1, #160	; 0xa0
   18210:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   18212:	4b16      	ldr	r3, [pc, #88]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   18214:	681b      	ldr	r3, [r3, #0]
   18216:	228c      	movs	r2, #140	; 0x8c
   18218:	21a0      	movs	r1, #160	; 0xa0
   1821a:	0049      	lsls	r1, r1, #1
   1821c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   1821e:	4b13      	ldr	r3, [pc, #76]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   18220:	681b      	ldr	r3, [r3, #0]
   18222:	228e      	movs	r2, #142	; 0x8e
   18224:	21f0      	movs	r1, #240	; 0xf0
   18226:	0049      	lsls	r1, r1, #1
   18228:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   1822a:	4b10      	ldr	r3, [pc, #64]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   1822c:	681b      	ldr	r3, [r3, #0]
   1822e:	2290      	movs	r2, #144	; 0x90
   18230:	490f      	ldr	r1, [pc, #60]	; (18270 <vTraceInitObjectPropertyTable+0x18c>)
   18232:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   18234:	4b0d      	ldr	r3, [pc, #52]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   18236:	681b      	ldr	r3, [r3, #0]
   18238:	2292      	movs	r2, #146	; 0x92
   1823a:	490e      	ldr	r1, [pc, #56]	; (18274 <vTraceInitObjectPropertyTable+0x190>)
   1823c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   1823e:	4b0b      	ldr	r3, [pc, #44]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   18240:	681b      	ldr	r3, [r3, #0]
   18242:	2294      	movs	r2, #148	; 0x94
   18244:	490c      	ldr	r1, [pc, #48]	; (18278 <vTraceInitObjectPropertyTable+0x194>)
   18246:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   18248:	4b08      	ldr	r3, [pc, #32]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   1824a:	681b      	ldr	r3, [r3, #0]
   1824c:	2296      	movs	r2, #150	; 0x96
   1824e:	490b      	ldr	r1, [pc, #44]	; (1827c <vTraceInitObjectPropertyTable+0x198>)
   18250:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   18252:	4b06      	ldr	r3, [pc, #24]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   18254:	681b      	ldr	r3, [r3, #0]
   18256:	2298      	movs	r2, #152	; 0x98
   18258:	218c      	movs	r1, #140	; 0x8c
   1825a:	00c9      	lsls	r1, r1, #3
   1825c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   1825e:	4b03      	ldr	r3, [pc, #12]	; (1826c <vTraceInitObjectPropertyTable+0x188>)
   18260:	681b      	ldr	r3, [r3, #0]
   18262:	4a07      	ldr	r2, [pc, #28]	; (18280 <vTraceInitObjectPropertyTable+0x19c>)
   18264:	661a      	str	r2, [r3, #96]	; 0x60
}
   18266:	46c0      	nop			; (mov r8, r8)
   18268:	46bd      	mov	sp, r7
   1826a:	bd80      	pop	{r7, pc}
   1826c:	20000c74 	.word	0x20000c74
   18270:	000002fd 	.word	0x000002fd
   18274:	00000352 	.word	0x00000352
   18278:	000003a2 	.word	0x000003a2
   1827c:	00000401 	.word	0x00000401
   18280:	000004bf 	.word	0x000004bf

00018284 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   18284:	b580      	push	{r7, lr}
   18286:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   18288:	4b2e      	ldr	r3, [pc, #184]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   1828a:	2200      	movs	r2, #0
   1828c:	825a      	strh	r2, [r3, #18]
   1828e:	4b2d      	ldr	r3, [pc, #180]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   18290:	8a5a      	ldrh	r2, [r3, #18]
   18292:	4b2c      	ldr	r3, [pc, #176]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   18294:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   18296:	4b2b      	ldr	r3, [pc, #172]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   18298:	220a      	movs	r2, #10
   1829a:	829a      	strh	r2, [r3, #20]
   1829c:	4b29      	ldr	r3, [pc, #164]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   1829e:	8a9a      	ldrh	r2, [r3, #20]
   182a0:	4b28      	ldr	r3, [pc, #160]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   182a2:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   182a4:	4b27      	ldr	r3, [pc, #156]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   182a6:	2214      	movs	r2, #20
   182a8:	82da      	strh	r2, [r3, #22]
   182aa:	4b26      	ldr	r3, [pc, #152]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   182ac:	8ada      	ldrh	r2, [r3, #22]
   182ae:	4b25      	ldr	r3, [pc, #148]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   182b0:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   182b2:	4b24      	ldr	r3, [pc, #144]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   182b4:	221e      	movs	r2, #30
   182b6:	831a      	strh	r2, [r3, #24]
   182b8:	4b22      	ldr	r3, [pc, #136]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   182ba:	8b1a      	ldrh	r2, [r3, #24]
   182bc:	4b21      	ldr	r3, [pc, #132]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   182be:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   182c0:	4b20      	ldr	r3, [pc, #128]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   182c2:	222d      	movs	r2, #45	; 0x2d
   182c4:	835a      	strh	r2, [r3, #26]
   182c6:	4b1f      	ldr	r3, [pc, #124]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   182c8:	8b5a      	ldrh	r2, [r3, #26]
   182ca:	4b1e      	ldr	r3, [pc, #120]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   182cc:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   182ce:	4b1d      	ldr	r3, [pc, #116]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   182d0:	2232      	movs	r2, #50	; 0x32
   182d2:	839a      	strh	r2, [r3, #28]
   182d4:	4b1b      	ldr	r3, [pc, #108]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   182d6:	8b9a      	ldrh	r2, [r3, #28]
   182d8:	4b1a      	ldr	r3, [pc, #104]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   182da:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   182dc:	4b19      	ldr	r3, [pc, #100]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   182de:	2237      	movs	r2, #55	; 0x37
   182e0:	83da      	strh	r2, [r3, #30]
   182e2:	4b18      	ldr	r3, [pc, #96]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   182e4:	8bda      	ldrh	r2, [r3, #30]
   182e6:	4b17      	ldr	r3, [pc, #92]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   182e8:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   182ea:	4b16      	ldr	r3, [pc, #88]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   182ec:	223c      	movs	r2, #60	; 0x3c
   182ee:	841a      	strh	r2, [r3, #32]
   182f0:	4b14      	ldr	r3, [pc, #80]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   182f2:	8c1a      	ldrh	r2, [r3, #32]
   182f4:	4b13      	ldr	r3, [pc, #76]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   182f6:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   182f8:	4b12      	ldr	r3, [pc, #72]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   182fa:	2241      	movs	r2, #65	; 0x41
   182fc:	845a      	strh	r2, [r3, #34]	; 0x22
   182fe:	4b11      	ldr	r3, [pc, #68]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   18300:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   18302:	4b10      	ldr	r3, [pc, #64]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   18304:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   18306:	4b0f      	ldr	r3, [pc, #60]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   18308:	2209      	movs	r2, #9
   1830a:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   1830c:	4b0d      	ldr	r3, [pc, #52]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   1830e:	2213      	movs	r2, #19
   18310:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   18312:	4b0c      	ldr	r3, [pc, #48]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   18314:	221d      	movs	r2, #29
   18316:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   18318:	4b0a      	ldr	r3, [pc, #40]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   1831a:	222c      	movs	r2, #44	; 0x2c
   1831c:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   1831e:	4b09      	ldr	r3, [pc, #36]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   18320:	2231      	movs	r2, #49	; 0x31
   18322:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   18324:	4b07      	ldr	r3, [pc, #28]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   18326:	2236      	movs	r2, #54	; 0x36
   18328:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   1832a:	4b06      	ldr	r3, [pc, #24]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   1832c:	223b      	movs	r2, #59	; 0x3b
   1832e:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   18330:	4b04      	ldr	r3, [pc, #16]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   18332:	2240      	movs	r2, #64	; 0x40
   18334:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   18336:	4b03      	ldr	r3, [pc, #12]	; (18344 <vTraceInitObjectHandleStack+0xc0>)
   18338:	2245      	movs	r2, #69	; 0x45
   1833a:	869a      	strh	r2, [r3, #52]	; 0x34
}
   1833c:	46c0      	nop			; (mov r8, r8)
   1833e:	46bd      	mov	sp, r7
   18340:	bd80      	pop	{r7, pc}
   18342:	46c0      	nop			; (mov r8, r8)
   18344:	20000be4 	.word	0x20000be4

00018348 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   18348:	b580      	push	{r7, lr}
   1834a:	b082      	sub	sp, #8
   1834c:	af00      	add	r7, sp, #0
   1834e:	0002      	movs	r2, r0
   18350:	1dfb      	adds	r3, r7, #7
   18352:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   18354:	1dfb      	adds	r3, r7, #7
   18356:	781b      	ldrb	r3, [r3, #0]
   18358:	2b08      	cmp	r3, #8
   1835a:	d816      	bhi.n	1838a <pszTraceGetErrorNotEnoughHandles+0x42>
   1835c:	009a      	lsls	r2, r3, #2
   1835e:	4b0d      	ldr	r3, [pc, #52]	; (18394 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   18360:	18d3      	adds	r3, r2, r3
   18362:	681b      	ldr	r3, [r3, #0]
   18364:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   18366:	4b0c      	ldr	r3, [pc, #48]	; (18398 <pszTraceGetErrorNotEnoughHandles+0x50>)
   18368:	e010      	b.n	1838c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   1836a:	4b0c      	ldr	r3, [pc, #48]	; (1839c <pszTraceGetErrorNotEnoughHandles+0x54>)
   1836c:	e00e      	b.n	1838c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   1836e:	4b0c      	ldr	r3, [pc, #48]	; (183a0 <pszTraceGetErrorNotEnoughHandles+0x58>)
   18370:	e00c      	b.n	1838c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   18372:	4b0c      	ldr	r3, [pc, #48]	; (183a4 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   18374:	e00a      	b.n	1838c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   18376:	4b0c      	ldr	r3, [pc, #48]	; (183a8 <pszTraceGetErrorNotEnoughHandles+0x60>)
   18378:	e008      	b.n	1838c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   1837a:	4b0c      	ldr	r3, [pc, #48]	; (183ac <pszTraceGetErrorNotEnoughHandles+0x64>)
   1837c:	e006      	b.n	1838c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   1837e:	4b0c      	ldr	r3, [pc, #48]	; (183b0 <pszTraceGetErrorNotEnoughHandles+0x68>)
   18380:	e004      	b.n	1838c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   18382:	4b0c      	ldr	r3, [pc, #48]	; (183b4 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   18384:	e002      	b.n	1838c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   18386:	4b0c      	ldr	r3, [pc, #48]	; (183b8 <pszTraceGetErrorNotEnoughHandles+0x70>)
   18388:	e000      	b.n	1838c <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   1838a:	4b0c      	ldr	r3, [pc, #48]	; (183bc <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   1838c:	0018      	movs	r0, r3
   1838e:	46bd      	mov	sp, r7
   18390:	b002      	add	sp, #8
   18392:	bd80      	pop	{r7, pc}
   18394:	00036e30 	.word	0x00036e30
   18398:	00036b30 	.word	0x00036b30
   1839c:	00036b78 	.word	0x00036b78
   183a0:	00036bc0 	.word	0x00036bc0
   183a4:	00036c14 	.word	0x00036c14
   183a8:	00036c60 	.word	0x00036c60
   183ac:	00036cac 	.word	0x00036cac
   183b0:	00036cf8 	.word	0x00036cf8
   183b4:	00036d4c 	.word	0x00036d4c
   183b8:	00036da4 	.word	0x00036da4
   183bc:	00036e00 	.word	0x00036e00

000183c0 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   183c0:	b590      	push	{r4, r7, lr}
   183c2:	b087      	sub	sp, #28
   183c4:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   183c6:	2317      	movs	r3, #23
   183c8:	18fb      	adds	r3, r7, r3
   183ca:	2200      	movs	r2, #0
   183cc:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   183ce:	4b36      	ldr	r3, [pc, #216]	; (184a8 <uiTraceStart+0xe8>)
   183d0:	681b      	ldr	r3, [r3, #0]
   183d2:	2b00      	cmp	r3, #0
   183d4:	d10b      	bne.n	183ee <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   183d6:	4b34      	ldr	r3, [pc, #208]	; (184a8 <uiTraceStart+0xe8>)
   183d8:	681b      	ldr	r3, [r3, #0]
   183da:	2b00      	cmp	r3, #0
   183dc:	d105      	bne.n	183ea <uiTraceStart+0x2a>
   183de:	4b33      	ldr	r3, [pc, #204]	; (184ac <uiTraceStart+0xec>)
   183e0:	0018      	movs	r0, r3
   183e2:	4b33      	ldr	r3, [pc, #204]	; (184b0 <uiTraceStart+0xf0>)
   183e4:	4798      	blx	r3
   183e6:	2300      	movs	r3, #0
   183e8:	e059      	b.n	1849e <uiTraceStart+0xde>
		return 0;
   183ea:	2300      	movs	r3, #0
   183ec:	e057      	b.n	1849e <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   183ee:	4b2e      	ldr	r3, [pc, #184]	; (184a8 <uiTraceStart+0xe8>)
   183f0:	681b      	ldr	r3, [r3, #0]
   183f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   183f4:	2b01      	cmp	r3, #1
   183f6:	d101      	bne.n	183fc <uiTraceStart+0x3c>
		return 1; /* Already running */
   183f8:	2301      	movs	r3, #1
   183fa:	e050      	b.n	1849e <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   183fc:	4b2d      	ldr	r3, [pc, #180]	; (184b4 <uiTraceStart+0xf4>)
   183fe:	681b      	ldr	r3, [r3, #0]
   18400:	2b00      	cmp	r3, #0
   18402:	d149      	bne.n	18498 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18404:	f3ef 8310 	mrs	r3, PRIMASK
   18408:	60bb      	str	r3, [r7, #8]
  return(result);
   1840a:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   1840c:	613b      	str	r3, [r7, #16]
   1840e:	2301      	movs	r3, #1
   18410:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18412:	68fb      	ldr	r3, [r7, #12]
   18414:	f383 8810 	msr	PRIMASK, r3
   18418:	4b27      	ldr	r3, [pc, #156]	; (184b8 <uiTraceStart+0xf8>)
   1841a:	681b      	ldr	r3, [r3, #0]
   1841c:	1c5a      	adds	r2, r3, #1
   1841e:	4b26      	ldr	r3, [pc, #152]	; (184b8 <uiTraceStart+0xf8>)
   18420:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   18422:	4b21      	ldr	r3, [pc, #132]	; (184a8 <uiTraceStart+0xe8>)
   18424:	681b      	ldr	r3, [r3, #0]
   18426:	2201      	movs	r2, #1
   18428:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   1842a:	4b24      	ldr	r3, [pc, #144]	; (184bc <uiTraceStart+0xfc>)
   1842c:	4798      	blx	r3
   1842e:	0003      	movs	r3, r0
   18430:	0018      	movs	r0, r3
   18432:	4b23      	ldr	r3, [pc, #140]	; (184c0 <uiTraceStart+0x100>)
   18434:	4798      	blx	r3
   18436:	0003      	movs	r3, r0
   18438:	001a      	movs	r2, r3
   1843a:	2317      	movs	r3, #23
   1843c:	18fb      	adds	r3, r7, r3
   1843e:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   18440:	2317      	movs	r3, #23
   18442:	18fb      	adds	r3, r7, r3
   18444:	781b      	ldrb	r3, [r3, #0]
   18446:	2b00      	cmp	r3, #0
   18448:	d116      	bne.n	18478 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   1844a:	2317      	movs	r3, #23
   1844c:	18fc      	adds	r4, r7, r3
   1844e:	2003      	movs	r0, #3
   18450:	4b1c      	ldr	r3, [pc, #112]	; (184c4 <uiTraceStart+0x104>)
   18452:	4798      	blx	r3
   18454:	0003      	movs	r3, r0
   18456:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   18458:	4a1b      	ldr	r2, [pc, #108]	; (184c8 <uiTraceStart+0x108>)
   1845a:	2317      	movs	r3, #23
   1845c:	18fb      	adds	r3, r7, r3
   1845e:	781b      	ldrb	r3, [r3, #0]
   18460:	0019      	movs	r1, r3
   18462:	2003      	movs	r0, #3
   18464:	4b19      	ldr	r3, [pc, #100]	; (184cc <uiTraceStart+0x10c>)
   18466:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   18468:	2317      	movs	r3, #23
   1846a:	18fb      	adds	r3, r7, r3
   1846c:	781b      	ldrb	r3, [r3, #0]
   1846e:	2200      	movs	r2, #0
   18470:	0019      	movs	r1, r3
   18472:	2003      	movs	r0, #3
   18474:	4b16      	ldr	r3, [pc, #88]	; (184d0 <uiTraceStart+0x110>)
   18476:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   18478:	2317      	movs	r3, #23
   1847a:	18fb      	adds	r3, r7, r3
   1847c:	781b      	ldrb	r3, [r3, #0]
   1847e:	0018      	movs	r0, r3
   18480:	4b14      	ldr	r3, [pc, #80]	; (184d4 <uiTraceStart+0x114>)
   18482:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   18484:	4b0c      	ldr	r3, [pc, #48]	; (184b8 <uiTraceStart+0xf8>)
   18486:	681b      	ldr	r3, [r3, #0]
   18488:	1e5a      	subs	r2, r3, #1
   1848a:	4b0b      	ldr	r3, [pc, #44]	; (184b8 <uiTraceStart+0xf8>)
   1848c:	601a      	str	r2, [r3, #0]
   1848e:	693b      	ldr	r3, [r7, #16]
   18490:	607b      	str	r3, [r7, #4]
   18492:	687b      	ldr	r3, [r7, #4]
   18494:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   18498:	4b03      	ldr	r3, [pc, #12]	; (184a8 <uiTraceStart+0xe8>)
   1849a:	681b      	ldr	r3, [r3, #0]
   1849c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   1849e:	0018      	movs	r0, r3
   184a0:	46bd      	mov	sp, r7
   184a2:	b007      	add	sp, #28
   184a4:	bd90      	pop	{r4, r7, pc}
   184a6:	46c0      	nop			; (mov r8, r8)
   184a8:	20000c74 	.word	0x20000c74
   184ac:	00036e54 	.word	0x00036e54
   184b0:	00019629 	.word	0x00019629
   184b4:	20000bd4 	.word	0x20000bd4
   184b8:	20000bcc 	.word	0x20000bcc
   184bc:	00018029 	.word	0x00018029
   184c0:	00017d6d 	.word	0x00017d6d
   184c4:	0001930d 	.word	0x0001930d
   184c8:	00036e98 	.word	0x00036e98
   184cc:	0001953d 	.word	0x0001953d
   184d0:	00018ca1 	.word	0x00018ca1
   184d4:	00018b89 	.word	0x00018b89

000184d8 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   184d8:	b580      	push	{r7, lr}
   184da:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   184dc:	4b02      	ldr	r3, [pc, #8]	; (184e8 <vTraceStart+0x10>)
   184de:	4798      	blx	r3
}
   184e0:	46c0      	nop			; (mov r8, r8)
   184e2:	46bd      	mov	sp, r7
   184e4:	bd80      	pop	{r7, pc}
   184e6:	46c0      	nop			; (mov r8, r8)
   184e8:	000183c1 	.word	0x000183c1

000184ec <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   184ec:	b580      	push	{r7, lr}
   184ee:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   184f0:	4b08      	ldr	r3, [pc, #32]	; (18514 <vTraceStop+0x28>)
   184f2:	681b      	ldr	r3, [r3, #0]
   184f4:	2b00      	cmp	r3, #0
   184f6:	d003      	beq.n	18500 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   184f8:	4b06      	ldr	r3, [pc, #24]	; (18514 <vTraceStop+0x28>)
   184fa:	681b      	ldr	r3, [r3, #0]
   184fc:	2200      	movs	r2, #0
   184fe:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   18500:	4b05      	ldr	r3, [pc, #20]	; (18518 <vTraceStop+0x2c>)
   18502:	681b      	ldr	r3, [r3, #0]
   18504:	2b00      	cmp	r3, #0
   18506:	d002      	beq.n	1850e <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   18508:	4b03      	ldr	r3, [pc, #12]	; (18518 <vTraceStop+0x2c>)
   1850a:	681b      	ldr	r3, [r3, #0]
   1850c:	4798      	blx	r3
	}
}
   1850e:	46c0      	nop			; (mov r8, r8)
   18510:	46bd      	mov	sp, r7
   18512:	bd80      	pop	{r7, pc}
   18514:	20000c74 	.word	0x20000c74
   18518:	20000bdc 	.word	0x20000bdc

0001851c <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   1851c:	b580      	push	{r7, lr}
   1851e:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   18520:	4b05      	ldr	r3, [pc, #20]	; (18538 <xTraceIsRecordingEnabled+0x1c>)
   18522:	681b      	ldr	r3, [r3, #0]
   18524:	2b00      	cmp	r3, #0
   18526:	d003      	beq.n	18530 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   18528:	4b03      	ldr	r3, [pc, #12]	; (18538 <xTraceIsRecordingEnabled+0x1c>)
   1852a:	681b      	ldr	r3, [r3, #0]
   1852c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1852e:	e000      	b.n	18532 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   18530:	2300      	movs	r3, #0
	}
}
   18532:	0018      	movs	r0, r3
   18534:	46bd      	mov	sp, r7
   18536:	bd80      	pop	{r7, pc}
   18538:	20000c74 	.word	0x20000c74

0001853c <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   1853c:	b590      	push	{r4, r7, lr}
   1853e:	b089      	sub	sp, #36	; 0x24
   18540:	af00      	add	r7, sp, #0
   18542:	0002      	movs	r2, r0
   18544:	1dfb      	adds	r3, r7, #7
   18546:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   18548:	1dfb      	adds	r3, r7, #7
   1854a:	781b      	ldrb	r3, [r3, #0]
   1854c:	2b00      	cmp	r3, #0
   1854e:	d057      	beq.n	18600 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   18550:	4b2e      	ldr	r3, [pc, #184]	; (1860c <prvTraceStoreTaskReady+0xd0>)
   18552:	681b      	ldr	r3, [r3, #0]
   18554:	2b00      	cmp	r3, #0
   18556:	d055      	beq.n	18604 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   18558:	1dfb      	adds	r3, r7, #7
   1855a:	781b      	ldrb	r3, [r3, #0]
   1855c:	2b0f      	cmp	r3, #15
   1855e:	d904      	bls.n	1856a <prvTraceStoreTaskReady+0x2e>
   18560:	4b2b      	ldr	r3, [pc, #172]	; (18610 <prvTraceStoreTaskReady+0xd4>)
   18562:	0018      	movs	r0, r3
   18564:	4b2b      	ldr	r3, [pc, #172]	; (18614 <prvTraceStoreTaskReady+0xd8>)
   18566:	4798      	blx	r3
   18568:	e04d      	b.n	18606 <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   1856a:	4b2b      	ldr	r3, [pc, #172]	; (18618 <prvTraceStoreTaskReady+0xdc>)
   1856c:	681b      	ldr	r3, [r3, #0]
   1856e:	2b00      	cmp	r3, #0
   18570:	d004      	beq.n	1857c <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   18572:	4b2a      	ldr	r3, [pc, #168]	; (1861c <prvTraceStoreTaskReady+0xe0>)
   18574:	0018      	movs	r0, r3
   18576:	4b27      	ldr	r3, [pc, #156]	; (18614 <prvTraceStoreTaskReady+0xd8>)
   18578:	4798      	blx	r3
		return;
   1857a:	e044      	b.n	18606 <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1857c:	f3ef 8310 	mrs	r3, PRIMASK
   18580:	60fb      	str	r3, [r7, #12]
  return(result);
   18582:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   18584:	61fb      	str	r3, [r7, #28]
   18586:	2301      	movs	r3, #1
   18588:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1858a:	693b      	ldr	r3, [r7, #16]
   1858c:	f383 8810 	msr	PRIMASK, r3
   18590:	4b21      	ldr	r3, [pc, #132]	; (18618 <prvTraceStoreTaskReady+0xdc>)
   18592:	681b      	ldr	r3, [r3, #0]
   18594:	1c5a      	adds	r2, r3, #1
   18596:	4b20      	ldr	r3, [pc, #128]	; (18618 <prvTraceStoreTaskReady+0xdc>)
   18598:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   1859a:	4b21      	ldr	r3, [pc, #132]	; (18620 <prvTraceStoreTaskReady+0xe4>)
   1859c:	681b      	ldr	r3, [r3, #0]
   1859e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   185a0:	2b00      	cmp	r3, #0
   185a2:	d022      	beq.n	185ea <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   185a4:	231a      	movs	r3, #26
   185a6:	18fc      	adds	r4, r7, r3
   185a8:	4b1e      	ldr	r3, [pc, #120]	; (18624 <prvTraceStoreTaskReady+0xe8>)
   185aa:	0018      	movs	r0, r3
   185ac:	4b1e      	ldr	r3, [pc, #120]	; (18628 <prvTraceStoreTaskReady+0xec>)
   185ae:	4798      	blx	r3
   185b0:	0003      	movs	r3, r0
   185b2:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   185b4:	2319      	movs	r3, #25
   185b6:	18fb      	adds	r3, r7, r3
   185b8:	1dfa      	adds	r2, r7, #7
   185ba:	7812      	ldrb	r2, [r2, #0]
   185bc:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   185be:	4b1b      	ldr	r3, [pc, #108]	; (1862c <prvTraceStoreTaskReady+0xf0>)
   185c0:	4798      	blx	r3
   185c2:	0003      	movs	r3, r0
   185c4:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   185c6:	697b      	ldr	r3, [r7, #20]
   185c8:	2b00      	cmp	r3, #0
   185ca:	d00e      	beq.n	185ea <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   185cc:	697b      	ldr	r3, [r7, #20]
   185ce:	2202      	movs	r2, #2
   185d0:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   185d2:	697b      	ldr	r3, [r7, #20]
   185d4:	221a      	movs	r2, #26
   185d6:	18ba      	adds	r2, r7, r2
   185d8:	8812      	ldrh	r2, [r2, #0]
   185da:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   185dc:	697b      	ldr	r3, [r7, #20]
   185de:	2219      	movs	r2, #25
   185e0:	18ba      	adds	r2, r7, r2
   185e2:	7812      	ldrb	r2, [r2, #0]
   185e4:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   185e6:	4b12      	ldr	r3, [pc, #72]	; (18630 <prvTraceStoreTaskReady+0xf4>)
   185e8:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   185ea:	4b0b      	ldr	r3, [pc, #44]	; (18618 <prvTraceStoreTaskReady+0xdc>)
   185ec:	681b      	ldr	r3, [r3, #0]
   185ee:	1e5a      	subs	r2, r3, #1
   185f0:	4b09      	ldr	r3, [pc, #36]	; (18618 <prvTraceStoreTaskReady+0xdc>)
   185f2:	601a      	str	r2, [r3, #0]
   185f4:	69fb      	ldr	r3, [r7, #28]
   185f6:	60bb      	str	r3, [r7, #8]
   185f8:	68bb      	ldr	r3, [r7, #8]
   185fa:	f383 8810 	msr	PRIMASK, r3
   185fe:	e002      	b.n	18606 <prvTraceStoreTaskReady+0xca>
		return;
   18600:	46c0      	nop			; (mov r8, r8)
   18602:	e000      	b.n	18606 <prvTraceStoreTaskReady+0xca>
		return;
   18604:	46c0      	nop			; (mov r8, r8)
}
   18606:	46bd      	mov	sp, r7
   18608:	b009      	add	sp, #36	; 0x24
   1860a:	bd90      	pop	{r4, r7, pc}
   1860c:	20000100 	.word	0x20000100
   18610:	00037200 	.word	0x00037200
   18614:	00019629 	.word	0x00019629
   18618:	20000bcc 	.word	0x20000bcc
   1861c:	00037240 	.word	0x00037240
   18620:	20000c74 	.word	0x20000c74
   18624:	0000ffff 	.word	0x0000ffff
   18628:	0001983d 	.word	0x0001983d
   1862c:	000191e1 	.word	0x000191e1
   18630:	000197e5 	.word	0x000197e5

00018634 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   18634:	b580      	push	{r7, lr}
   18636:	b08e      	sub	sp, #56	; 0x38
   18638:	af00      	add	r7, sp, #0
   1863a:	60f8      	str	r0, [r7, #12]
   1863c:	60b9      	str	r1, [r7, #8]
   1863e:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   18640:	4b48      	ldr	r3, [pc, #288]	; (18764 <vTraceStoreMemMangEvent+0x130>)
   18642:	681b      	ldr	r3, [r3, #0]
   18644:	2b00      	cmp	r3, #0
   18646:	d100      	bne.n	1864a <vTraceStoreMemMangEvent+0x16>
   18648:	e088      	b.n	1875c <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   1864a:	687b      	ldr	r3, [r7, #4]
   1864c:	2b00      	cmp	r3, #0
   1864e:	da03      	bge.n	18658 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   18650:	687b      	ldr	r3, [r7, #4]
   18652:	425b      	negs	r3, r3
   18654:	637b      	str	r3, [r7, #52]	; 0x34
   18656:	e001      	b.n	1865c <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   18658:	687b      	ldr	r3, [r7, #4]
   1865a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1865c:	f3ef 8310 	mrs	r3, PRIMASK
   18660:	61bb      	str	r3, [r7, #24]
  return(result);
   18662:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   18664:	633b      	str	r3, [r7, #48]	; 0x30
   18666:	2301      	movs	r3, #1
   18668:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1866a:	69fb      	ldr	r3, [r7, #28]
   1866c:	f383 8810 	msr	PRIMASK, r3
   18670:	4b3d      	ldr	r3, [pc, #244]	; (18768 <vTraceStoreMemMangEvent+0x134>)
   18672:	681b      	ldr	r3, [r3, #0]
   18674:	1c5a      	adds	r2, r3, #1
   18676:	4b3c      	ldr	r3, [pc, #240]	; (18768 <vTraceStoreMemMangEvent+0x134>)
   18678:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   1867a:	68bb      	ldr	r3, [r7, #8]
   1867c:	2b00      	cmp	r3, #0
   1867e:	d005      	beq.n	1868c <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   18680:	4b3a      	ldr	r3, [pc, #232]	; (1876c <vTraceStoreMemMangEvent+0x138>)
   18682:	681a      	ldr	r2, [r3, #0]
   18684:	687b      	ldr	r3, [r7, #4]
   18686:	18d2      	adds	r2, r2, r3
   18688:	4b38      	ldr	r3, [pc, #224]	; (1876c <vTraceStoreMemMangEvent+0x138>)
   1868a:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   1868c:	4b35      	ldr	r3, [pc, #212]	; (18764 <vTraceStoreMemMangEvent+0x130>)
   1868e:	681b      	ldr	r3, [r3, #0]
   18690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18692:	2b00      	cmp	r3, #0
   18694:	d057      	beq.n	18746 <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   18696:	20ff      	movs	r0, #255	; 0xff
   18698:	4b35      	ldr	r3, [pc, #212]	; (18770 <vTraceStoreMemMangEvent+0x13c>)
   1869a:	4798      	blx	r3
   1869c:	0003      	movs	r3, r0
   1869e:	001a      	movs	r2, r3
   186a0:	232f      	movs	r3, #47	; 0x2f
   186a2:	18fb      	adds	r3, r7, r3
   186a4:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   186a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   186a8:	4a32      	ldr	r2, [pc, #200]	; (18774 <vTraceStoreMemMangEvent+0x140>)
   186aa:	0019      	movs	r1, r3
   186ac:	0010      	movs	r0, r2
   186ae:	4b32      	ldr	r3, [pc, #200]	; (18778 <vTraceStoreMemMangEvent+0x144>)
   186b0:	4798      	blx	r3
   186b2:	0002      	movs	r2, r0
   186b4:	232c      	movs	r3, #44	; 0x2c
   186b6:	18fb      	adds	r3, r7, r3
   186b8:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   186ba:	4b30      	ldr	r3, [pc, #192]	; (1877c <vTraceStoreMemMangEvent+0x148>)
   186bc:	4798      	blx	r3
   186be:	0003      	movs	r3, r0
   186c0:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   186c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   186c4:	2b00      	cmp	r3, #0
   186c6:	d03e      	beq.n	18746 <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   186c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   186ca:	222f      	movs	r2, #47	; 0x2f
   186cc:	18ba      	adds	r2, r7, r2
   186ce:	7812      	ldrb	r2, [r2, #0]
   186d0:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   186d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   186d4:	2200      	movs	r2, #0
   186d6:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   186d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   186da:	222c      	movs	r2, #44	; 0x2c
   186dc:	18ba      	adds	r2, r7, r2
   186de:	8812      	ldrh	r2, [r2, #0]
   186e0:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   186e2:	4b27      	ldr	r3, [pc, #156]	; (18780 <vTraceStoreMemMangEvent+0x14c>)
   186e4:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   186e6:	68bb      	ldr	r3, [r7, #8]
   186e8:	4a22      	ldr	r2, [pc, #136]	; (18774 <vTraceStoreMemMangEvent+0x140>)
   186ea:	0019      	movs	r1, r3
   186ec:	0010      	movs	r0, r2
   186ee:	4b22      	ldr	r3, [pc, #136]	; (18778 <vTraceStoreMemMangEvent+0x144>)
   186f0:	4798      	blx	r3
   186f2:	0002      	movs	r2, r0
   186f4:	2326      	movs	r3, #38	; 0x26
   186f6:	18fb      	adds	r3, r7, r3
   186f8:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   186fa:	2325      	movs	r3, #37	; 0x25
   186fc:	18fb      	adds	r3, r7, r3
   186fe:	2200      	movs	r2, #0
   18700:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   18702:	4b1e      	ldr	r3, [pc, #120]	; (1877c <vTraceStoreMemMangEvent+0x148>)
   18704:	4798      	blx	r3
   18706:	0003      	movs	r3, r0
   18708:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   1870a:	6a3b      	ldr	r3, [r7, #32]
   1870c:	2b00      	cmp	r3, #0
   1870e:	d01a      	beq.n	18746 <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   18710:	6a3b      	ldr	r3, [r7, #32]
   18712:	2226      	movs	r2, #38	; 0x26
   18714:	18ba      	adds	r2, r7, r2
   18716:	8812      	ldrh	r2, [r2, #0]
   18718:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   1871a:	6a3b      	ldr	r3, [r7, #32]
   1871c:	2225      	movs	r2, #37	; 0x25
   1871e:	18ba      	adds	r2, r7, r2
   18720:	7812      	ldrb	r2, [r2, #0]
   18722:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   18724:	68fb      	ldr	r3, [r7, #12]
   18726:	b2db      	uxtb	r3, r3
   18728:	3301      	adds	r3, #1
   1872a:	b2da      	uxtb	r2, r3
   1872c:	6a3b      	ldr	r3, [r7, #32]
   1872e:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   18730:	68fb      	ldr	r3, [r7, #12]
   18732:	b2da      	uxtb	r2, r3
   18734:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18736:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   18738:	4b11      	ldr	r3, [pc, #68]	; (18780 <vTraceStoreMemMangEvent+0x14c>)
   1873a:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   1873c:	4b09      	ldr	r3, [pc, #36]	; (18764 <vTraceStoreMemMangEvent+0x130>)
   1873e:	681b      	ldr	r3, [r3, #0]
   18740:	4a0a      	ldr	r2, [pc, #40]	; (1876c <vTraceStoreMemMangEvent+0x138>)
   18742:	6812      	ldr	r2, [r2, #0]
   18744:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   18746:	4b08      	ldr	r3, [pc, #32]	; (18768 <vTraceStoreMemMangEvent+0x134>)
   18748:	681b      	ldr	r3, [r3, #0]
   1874a:	1e5a      	subs	r2, r3, #1
   1874c:	4b06      	ldr	r3, [pc, #24]	; (18768 <vTraceStoreMemMangEvent+0x134>)
   1874e:	601a      	str	r2, [r3, #0]
   18750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18752:	617b      	str	r3, [r7, #20]
   18754:	697b      	ldr	r3, [r7, #20]
   18756:	f383 8810 	msr	PRIMASK, r3
   1875a:	e000      	b.n	1875e <vTraceStoreMemMangEvent+0x12a>
		return;
   1875c:	46c0      	nop			; (mov r8, r8)
}
   1875e:	46bd      	mov	sp, r7
   18760:	b00e      	add	sp, #56	; 0x38
   18762:	bd80      	pop	{r7, pc}
   18764:	20000c74 	.word	0x20000c74
   18768:	20000bcc 	.word	0x20000bcc
   1876c:	20000be0 	.word	0x20000be0
   18770:	0001983d 	.word	0x0001983d
   18774:	0000ffff 	.word	0x0000ffff
   18778:	00018a01 	.word	0x00018a01
   1877c:	000191e1 	.word	0x000191e1
   18780:	000197e5 	.word	0x000197e5

00018784 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   18784:	b590      	push	{r4, r7, lr}
   18786:	b08b      	sub	sp, #44	; 0x2c
   18788:	af00      	add	r7, sp, #0
   1878a:	60f8      	str	r0, [r7, #12]
   1878c:	607a      	str	r2, [r7, #4]
   1878e:	230b      	movs	r3, #11
   18790:	18fb      	adds	r3, r7, r3
   18792:	1c0a      	adds	r2, r1, #0
   18794:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   18796:	68fb      	ldr	r3, [r7, #12]
   18798:	2bfe      	cmp	r3, #254	; 0xfe
   1879a:	d904      	bls.n	187a6 <prvTraceStoreKernelCall+0x22>
   1879c:	4b39      	ldr	r3, [pc, #228]	; (18884 <prvTraceStoreKernelCall+0x100>)
   1879e:	0018      	movs	r0, r3
   187a0:	4b39      	ldr	r3, [pc, #228]	; (18888 <prvTraceStoreKernelCall+0x104>)
   187a2:	4798      	blx	r3
   187a4:	e06b      	b.n	1887e <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   187a6:	230b      	movs	r3, #11
   187a8:	18fb      	adds	r3, r7, r3
   187aa:	781b      	ldrb	r3, [r3, #0]
   187ac:	2b08      	cmp	r3, #8
   187ae:	d904      	bls.n	187ba <prvTraceStoreKernelCall+0x36>
   187b0:	4b36      	ldr	r3, [pc, #216]	; (1888c <prvTraceStoreKernelCall+0x108>)
   187b2:	0018      	movs	r0, r3
   187b4:	4b34      	ldr	r3, [pc, #208]	; (18888 <prvTraceStoreKernelCall+0x104>)
   187b6:	4798      	blx	r3
   187b8:	e061      	b.n	1887e <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   187ba:	4b35      	ldr	r3, [pc, #212]	; (18890 <prvTraceStoreKernelCall+0x10c>)
   187bc:	681a      	ldr	r2, [r3, #0]
   187be:	230b      	movs	r3, #11
   187c0:	18fb      	adds	r3, r7, r3
   187c2:	781b      	ldrb	r3, [r3, #0]
   187c4:	2164      	movs	r1, #100	; 0x64
   187c6:	18d3      	adds	r3, r2, r3
   187c8:	185b      	adds	r3, r3, r1
   187ca:	781b      	ldrb	r3, [r3, #0]
   187cc:	001a      	movs	r2, r3
   187ce:	687b      	ldr	r3, [r7, #4]
   187d0:	429a      	cmp	r2, r3
   187d2:	d204      	bcs.n	187de <prvTraceStoreKernelCall+0x5a>
   187d4:	4b2f      	ldr	r3, [pc, #188]	; (18894 <prvTraceStoreKernelCall+0x110>)
   187d6:	0018      	movs	r0, r3
   187d8:	4b2b      	ldr	r3, [pc, #172]	; (18888 <prvTraceStoreKernelCall+0x104>)
   187da:	4798      	blx	r3
   187dc:	e04f      	b.n	1887e <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   187de:	4b2e      	ldr	r3, [pc, #184]	; (18898 <prvTraceStoreKernelCall+0x114>)
   187e0:	681b      	ldr	r3, [r3, #0]
   187e2:	2b00      	cmp	r3, #0
   187e4:	d004      	beq.n	187f0 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   187e6:	4b2d      	ldr	r3, [pc, #180]	; (1889c <prvTraceStoreKernelCall+0x118>)
   187e8:	0018      	movs	r0, r3
   187ea:	4b27      	ldr	r3, [pc, #156]	; (18888 <prvTraceStoreKernelCall+0x104>)
   187ec:	4798      	blx	r3
		return;
   187ee:	e046      	b.n	1887e <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   187f0:	4b2b      	ldr	r3, [pc, #172]	; (188a0 <prvTraceStoreKernelCall+0x11c>)
   187f2:	781b      	ldrb	r3, [r3, #0]
   187f4:	2b00      	cmp	r3, #0
   187f6:	d041      	beq.n	1887c <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   187f8:	f3ef 8310 	mrs	r3, PRIMASK
   187fc:	617b      	str	r3, [r7, #20]
  return(result);
   187fe:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   18800:	627b      	str	r3, [r7, #36]	; 0x24
   18802:	2301      	movs	r3, #1
   18804:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18806:	69bb      	ldr	r3, [r7, #24]
   18808:	f383 8810 	msr	PRIMASK, r3
   1880c:	4b22      	ldr	r3, [pc, #136]	; (18898 <prvTraceStoreKernelCall+0x114>)
   1880e:	681b      	ldr	r3, [r3, #0]
   18810:	1c5a      	adds	r2, r3, #1
   18812:	4b21      	ldr	r3, [pc, #132]	; (18898 <prvTraceStoreKernelCall+0x114>)
   18814:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   18816:	4b1e      	ldr	r3, [pc, #120]	; (18890 <prvTraceStoreKernelCall+0x10c>)
   18818:	681b      	ldr	r3, [r3, #0]
   1881a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1881c:	2b00      	cmp	r3, #0
   1881e:	d022      	beq.n	18866 <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   18820:	2322      	movs	r3, #34	; 0x22
   18822:	18fc      	adds	r4, r7, r3
   18824:	4b1f      	ldr	r3, [pc, #124]	; (188a4 <prvTraceStoreKernelCall+0x120>)
   18826:	0018      	movs	r0, r3
   18828:	4b1f      	ldr	r3, [pc, #124]	; (188a8 <prvTraceStoreKernelCall+0x124>)
   1882a:	4798      	blx	r3
   1882c:	0003      	movs	r3, r0
   1882e:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   18830:	2321      	movs	r3, #33	; 0x21
   18832:	18fb      	adds	r3, r7, r3
   18834:	687a      	ldr	r2, [r7, #4]
   18836:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   18838:	4b1c      	ldr	r3, [pc, #112]	; (188ac <prvTraceStoreKernelCall+0x128>)
   1883a:	4798      	blx	r3
   1883c:	0003      	movs	r3, r0
   1883e:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   18840:	69fb      	ldr	r3, [r7, #28]
   18842:	2b00      	cmp	r3, #0
   18844:	d00f      	beq.n	18866 <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   18846:	69fb      	ldr	r3, [r7, #28]
   18848:	2222      	movs	r2, #34	; 0x22
   1884a:	18ba      	adds	r2, r7, r2
   1884c:	8812      	ldrh	r2, [r2, #0]
   1884e:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   18850:	68fb      	ldr	r3, [r7, #12]
   18852:	b2da      	uxtb	r2, r3
   18854:	69fb      	ldr	r3, [r7, #28]
   18856:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   18858:	69fb      	ldr	r3, [r7, #28]
   1885a:	2221      	movs	r2, #33	; 0x21
   1885c:	18ba      	adds	r2, r7, r2
   1885e:	7812      	ldrb	r2, [r2, #0]
   18860:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   18862:	4b13      	ldr	r3, [pc, #76]	; (188b0 <prvTraceStoreKernelCall+0x12c>)
   18864:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18866:	4b0c      	ldr	r3, [pc, #48]	; (18898 <prvTraceStoreKernelCall+0x114>)
   18868:	681b      	ldr	r3, [r3, #0]
   1886a:	1e5a      	subs	r2, r3, #1
   1886c:	4b0a      	ldr	r3, [pc, #40]	; (18898 <prvTraceStoreKernelCall+0x114>)
   1886e:	601a      	str	r2, [r3, #0]
   18870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18872:	613b      	str	r3, [r7, #16]
   18874:	693b      	ldr	r3, [r7, #16]
   18876:	f383 8810 	msr	PRIMASK, r3
   1887a:	e000      	b.n	1887e <prvTraceStoreKernelCall+0xfa>
		return;
   1887c:	46c0      	nop			; (mov r8, r8)
}
   1887e:	46bd      	mov	sp, r7
   18880:	b00b      	add	sp, #44	; 0x2c
   18882:	bd90      	pop	{r4, r7, pc}
   18884:	000372b0 	.word	0x000372b0
   18888:	00019629 	.word	0x00019629
   1888c:	000372e8 	.word	0x000372e8
   18890:	20000c74 	.word	0x20000c74
   18894:	00037330 	.word	0x00037330
   18898:	20000bcc 	.word	0x20000bcc
   1889c:	00037378 	.word	0x00037378
   188a0:	20000bd8 	.word	0x20000bd8
   188a4:	0000ffff 	.word	0x0000ffff
   188a8:	0001983d 	.word	0x0001983d
   188ac:	000191e1 	.word	0x000191e1
   188b0:	000197e5 	.word	0x000197e5

000188b4 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   188b4:	b580      	push	{r7, lr}
   188b6:	b08a      	sub	sp, #40	; 0x28
   188b8:	af00      	add	r7, sp, #0
   188ba:	60f8      	str	r0, [r7, #12]
   188bc:	607a      	str	r2, [r7, #4]
   188be:	603b      	str	r3, [r7, #0]
   188c0:	230b      	movs	r3, #11
   188c2:	18fb      	adds	r3, r7, r3
   188c4:	1c0a      	adds	r2, r1, #0
   188c6:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   188c8:	68fb      	ldr	r3, [r7, #12]
   188ca:	2bfe      	cmp	r3, #254	; 0xfe
   188cc:	d904      	bls.n	188d8 <prvTraceStoreKernelCallWithParam+0x24>
   188ce:	4b40      	ldr	r3, [pc, #256]	; (189d0 <prvTraceStoreKernelCallWithParam+0x11c>)
   188d0:	0018      	movs	r0, r3
   188d2:	4b40      	ldr	r3, [pc, #256]	; (189d4 <prvTraceStoreKernelCallWithParam+0x120>)
   188d4:	4798      	blx	r3
   188d6:	e077      	b.n	189c8 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   188d8:	230b      	movs	r3, #11
   188da:	18fb      	adds	r3, r7, r3
   188dc:	781b      	ldrb	r3, [r3, #0]
   188de:	2b08      	cmp	r3, #8
   188e0:	d904      	bls.n	188ec <prvTraceStoreKernelCallWithParam+0x38>
   188e2:	4b3d      	ldr	r3, [pc, #244]	; (189d8 <prvTraceStoreKernelCallWithParam+0x124>)
   188e4:	0018      	movs	r0, r3
   188e6:	4b3b      	ldr	r3, [pc, #236]	; (189d4 <prvTraceStoreKernelCallWithParam+0x120>)
   188e8:	4798      	blx	r3
   188ea:	e06d      	b.n	189c8 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   188ec:	4b3b      	ldr	r3, [pc, #236]	; (189dc <prvTraceStoreKernelCallWithParam+0x128>)
   188ee:	681a      	ldr	r2, [r3, #0]
   188f0:	230b      	movs	r3, #11
   188f2:	18fb      	adds	r3, r7, r3
   188f4:	781b      	ldrb	r3, [r3, #0]
   188f6:	2164      	movs	r1, #100	; 0x64
   188f8:	18d3      	adds	r3, r2, r3
   188fa:	185b      	adds	r3, r3, r1
   188fc:	781b      	ldrb	r3, [r3, #0]
   188fe:	001a      	movs	r2, r3
   18900:	687b      	ldr	r3, [r7, #4]
   18902:	429a      	cmp	r2, r3
   18904:	d204      	bcs.n	18910 <prvTraceStoreKernelCallWithParam+0x5c>
   18906:	4b36      	ldr	r3, [pc, #216]	; (189e0 <prvTraceStoreKernelCallWithParam+0x12c>)
   18908:	0018      	movs	r0, r3
   1890a:	4b32      	ldr	r3, [pc, #200]	; (189d4 <prvTraceStoreKernelCallWithParam+0x120>)
   1890c:	4798      	blx	r3
   1890e:	e05b      	b.n	189c8 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   18910:	4b34      	ldr	r3, [pc, #208]	; (189e4 <prvTraceStoreKernelCallWithParam+0x130>)
   18912:	681b      	ldr	r3, [r3, #0]
   18914:	2b00      	cmp	r3, #0
   18916:	d004      	beq.n	18922 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   18918:	4b33      	ldr	r3, [pc, #204]	; (189e8 <prvTraceStoreKernelCallWithParam+0x134>)
   1891a:	0018      	movs	r0, r3
   1891c:	4b2d      	ldr	r3, [pc, #180]	; (189d4 <prvTraceStoreKernelCallWithParam+0x120>)
   1891e:	4798      	blx	r3
		return;
   18920:	e052      	b.n	189c8 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18922:	f3ef 8310 	mrs	r3, PRIMASK
   18926:	617b      	str	r3, [r7, #20]
  return(result);
   18928:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   1892a:	627b      	str	r3, [r7, #36]	; 0x24
   1892c:	2301      	movs	r3, #1
   1892e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18930:	69bb      	ldr	r3, [r7, #24]
   18932:	f383 8810 	msr	PRIMASK, r3
   18936:	4b2b      	ldr	r3, [pc, #172]	; (189e4 <prvTraceStoreKernelCallWithParam+0x130>)
   18938:	681b      	ldr	r3, [r3, #0]
   1893a:	1c5a      	adds	r2, r3, #1
   1893c:	4b29      	ldr	r3, [pc, #164]	; (189e4 <prvTraceStoreKernelCallWithParam+0x130>)
   1893e:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   18940:	4b26      	ldr	r3, [pc, #152]	; (189dc <prvTraceStoreKernelCallWithParam+0x128>)
   18942:	681b      	ldr	r3, [r3, #0]
   18944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18946:	2b00      	cmp	r3, #0
   18948:	d034      	beq.n	189b4 <prvTraceStoreKernelCallWithParam+0x100>
   1894a:	4b28      	ldr	r3, [pc, #160]	; (189ec <prvTraceStoreKernelCallWithParam+0x138>)
   1894c:	781b      	ldrb	r3, [r3, #0]
   1894e:	2b00      	cmp	r3, #0
   18950:	d030      	beq.n	189b4 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   18952:	20ff      	movs	r0, #255	; 0xff
   18954:	4b26      	ldr	r3, [pc, #152]	; (189f0 <prvTraceStoreKernelCallWithParam+0x13c>)
   18956:	4798      	blx	r3
   18958:	0003      	movs	r3, r0
   1895a:	001a      	movs	r2, r3
   1895c:	2323      	movs	r3, #35	; 0x23
   1895e:	18fb      	adds	r3, r7, r3
   18960:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   18962:	683b      	ldr	r3, [r7, #0]
   18964:	0019      	movs	r1, r3
   18966:	20ff      	movs	r0, #255	; 0xff
   18968:	4b22      	ldr	r3, [pc, #136]	; (189f4 <prvTraceStoreKernelCallWithParam+0x140>)
   1896a:	4798      	blx	r3
   1896c:	0002      	movs	r2, r0
   1896e:	2322      	movs	r3, #34	; 0x22
   18970:	18fb      	adds	r3, r7, r3
   18972:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   18974:	2321      	movs	r3, #33	; 0x21
   18976:	18fb      	adds	r3, r7, r3
   18978:	687a      	ldr	r2, [r7, #4]
   1897a:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   1897c:	4b1e      	ldr	r3, [pc, #120]	; (189f8 <prvTraceStoreKernelCallWithParam+0x144>)
   1897e:	4798      	blx	r3
   18980:	0003      	movs	r3, r0
   18982:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   18984:	69fb      	ldr	r3, [r7, #28]
   18986:	2b00      	cmp	r3, #0
   18988:	d014      	beq.n	189b4 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   1898a:	69fb      	ldr	r3, [r7, #28]
   1898c:	2223      	movs	r2, #35	; 0x23
   1898e:	18ba      	adds	r2, r7, r2
   18990:	7812      	ldrb	r2, [r2, #0]
   18992:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   18994:	68fb      	ldr	r3, [r7, #12]
   18996:	b2da      	uxtb	r2, r3
   18998:	69fb      	ldr	r3, [r7, #28]
   1899a:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   1899c:	69fb      	ldr	r3, [r7, #28]
   1899e:	2221      	movs	r2, #33	; 0x21
   189a0:	18ba      	adds	r2, r7, r2
   189a2:	7812      	ldrb	r2, [r2, #0]
   189a4:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   189a6:	69fb      	ldr	r3, [r7, #28]
   189a8:	2222      	movs	r2, #34	; 0x22
   189aa:	18ba      	adds	r2, r7, r2
   189ac:	7812      	ldrb	r2, [r2, #0]
   189ae:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   189b0:	4b12      	ldr	r3, [pc, #72]	; (189fc <prvTraceStoreKernelCallWithParam+0x148>)
   189b2:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   189b4:	4b0b      	ldr	r3, [pc, #44]	; (189e4 <prvTraceStoreKernelCallWithParam+0x130>)
   189b6:	681b      	ldr	r3, [r3, #0]
   189b8:	1e5a      	subs	r2, r3, #1
   189ba:	4b0a      	ldr	r3, [pc, #40]	; (189e4 <prvTraceStoreKernelCallWithParam+0x130>)
   189bc:	601a      	str	r2, [r3, #0]
   189be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   189c0:	613b      	str	r3, [r7, #16]
   189c2:	693b      	ldr	r3, [r7, #16]
   189c4:	f383 8810 	msr	PRIMASK, r3
}
   189c8:	46bd      	mov	sp, r7
   189ca:	b00a      	add	sp, #40	; 0x28
   189cc:	bd80      	pop	{r7, pc}
   189ce:	46c0      	nop			; (mov r8, r8)
   189d0:	000373b0 	.word	0x000373b0
   189d4:	00019629 	.word	0x00019629
   189d8:	000373f0 	.word	0x000373f0
   189dc:	20000c74 	.word	0x20000c74
   189e0:	00037440 	.word	0x00037440
   189e4:	20000bcc 	.word	0x20000bcc
   189e8:	00037490 	.word	0x00037490
   189ec:	20000bd8 	.word	0x20000bd8
   189f0:	0001983d 	.word	0x0001983d
   189f4:	00018a01 	.word	0x00018a01
   189f8:	000191e1 	.word	0x000191e1
   189fc:	000197e5 	.word	0x000197e5

00018a00 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   18a00:	b580      	push	{r7, lr}
   18a02:	b084      	sub	sp, #16
   18a04:	af00      	add	r7, sp, #0
   18a06:	6078      	str	r0, [r7, #4]
   18a08:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   18a0a:	687b      	ldr	r3, [r7, #4]
   18a0c:	2bff      	cmp	r3, #255	; 0xff
   18a0e:	d009      	beq.n	18a24 <prvTraceGetParam+0x24>
   18a10:	687b      	ldr	r3, [r7, #4]
   18a12:	4a19      	ldr	r2, [pc, #100]	; (18a78 <prvTraceGetParam+0x78>)
   18a14:	4293      	cmp	r3, r2
   18a16:	d005      	beq.n	18a24 <prvTraceGetParam+0x24>
   18a18:	4b18      	ldr	r3, [pc, #96]	; (18a7c <prvTraceGetParam+0x7c>)
   18a1a:	0018      	movs	r0, r3
   18a1c:	4b18      	ldr	r3, [pc, #96]	; (18a80 <prvTraceGetParam+0x80>)
   18a1e:	4798      	blx	r3
   18a20:	683b      	ldr	r3, [r7, #0]
   18a22:	e024      	b.n	18a6e <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   18a24:	683a      	ldr	r2, [r7, #0]
   18a26:	687b      	ldr	r3, [r7, #4]
   18a28:	429a      	cmp	r2, r3
   18a2a:	d801      	bhi.n	18a30 <prvTraceGetParam+0x30>
	{
		return param;
   18a2c:	683b      	ldr	r3, [r7, #0]
   18a2e:	e01e      	b.n	18a6e <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   18a30:	4b14      	ldr	r3, [pc, #80]	; (18a84 <prvTraceGetParam+0x84>)
   18a32:	4798      	blx	r3
   18a34:	0003      	movs	r3, r0
   18a36:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   18a38:	68fb      	ldr	r3, [r7, #12]
   18a3a:	2b00      	cmp	r3, #0
   18a3c:	d014      	beq.n	18a68 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   18a3e:	68fb      	ldr	r3, [r7, #12]
   18a40:	2201      	movs	r2, #1
   18a42:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   18a44:	687b      	ldr	r3, [r7, #4]
   18a46:	43db      	mvns	r3, r3
   18a48:	683a      	ldr	r2, [r7, #0]
   18a4a:	4013      	ands	r3, r2
   18a4c:	0a1b      	lsrs	r3, r3, #8
   18a4e:	b2da      	uxtb	r2, r3
   18a50:	68fb      	ldr	r3, [r7, #12]
   18a52:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   18a54:	687b      	ldr	r3, [r7, #4]
   18a56:	43db      	mvns	r3, r3
   18a58:	683a      	ldr	r2, [r7, #0]
   18a5a:	4013      	ands	r3, r2
   18a5c:	0c1b      	lsrs	r3, r3, #16
   18a5e:	b29a      	uxth	r2, r3
   18a60:	68fb      	ldr	r3, [r7, #12]
   18a62:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   18a64:	4b08      	ldr	r3, [pc, #32]	; (18a88 <prvTraceGetParam+0x88>)
   18a66:	4798      	blx	r3
		}

		return param & param_max;
   18a68:	683b      	ldr	r3, [r7, #0]
   18a6a:	687a      	ldr	r2, [r7, #4]
   18a6c:	4013      	ands	r3, r2
	}
}
   18a6e:	0018      	movs	r0, r3
   18a70:	46bd      	mov	sp, r7
   18a72:	b004      	add	sp, #16
   18a74:	bd80      	pop	{r7, pc}
   18a76:	46c0      	nop			; (mov r8, r8)
   18a78:	0000ffff 	.word	0x0000ffff
   18a7c:	000374c8 	.word	0x000374c8
   18a80:	00019629 	.word	0x00019629
   18a84:	000191e1 	.word	0x000191e1
   18a88:	000197e5 	.word	0x000197e5

00018a8c <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   18a8c:	b580      	push	{r7, lr}
   18a8e:	b08a      	sub	sp, #40	; 0x28
   18a90:	af00      	add	r7, sp, #0
   18a92:	6078      	str	r0, [r7, #4]
   18a94:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   18a96:	2326      	movs	r3, #38	; 0x26
   18a98:	18fb      	adds	r3, r7, r3
   18a9a:	2200      	movs	r2, #0
   18a9c:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   18a9e:	687b      	ldr	r3, [r7, #4]
   18aa0:	2bfe      	cmp	r3, #254	; 0xfe
   18aa2:	d904      	bls.n	18aae <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   18aa4:	4b2d      	ldr	r3, [pc, #180]	; (18b5c <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   18aa6:	0018      	movs	r0, r3
   18aa8:	4b2d      	ldr	r3, [pc, #180]	; (18b60 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   18aaa:	4798      	blx	r3
   18aac:	e053      	b.n	18b56 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   18aae:	4b2d      	ldr	r3, [pc, #180]	; (18b64 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18ab0:	681b      	ldr	r3, [r3, #0]
   18ab2:	2b00      	cmp	r3, #0
   18ab4:	d004      	beq.n	18ac0 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   18ab6:	4b2c      	ldr	r3, [pc, #176]	; (18b68 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   18ab8:	0018      	movs	r0, r3
   18aba:	4b29      	ldr	r3, [pc, #164]	; (18b60 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   18abc:	4798      	blx	r3
		return;
   18abe:	e04a      	b.n	18b56 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18ac0:	f3ef 8310 	mrs	r3, PRIMASK
   18ac4:	613b      	str	r3, [r7, #16]
  return(result);
   18ac6:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   18ac8:	623b      	str	r3, [r7, #32]
   18aca:	2301      	movs	r3, #1
   18acc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18ace:	697b      	ldr	r3, [r7, #20]
   18ad0:	f383 8810 	msr	PRIMASK, r3
   18ad4:	4b23      	ldr	r3, [pc, #140]	; (18b64 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18ad6:	681b      	ldr	r3, [r3, #0]
   18ad8:	1c5a      	adds	r2, r3, #1
   18ada:	4b22      	ldr	r3, [pc, #136]	; (18b64 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18adc:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   18ade:	4b23      	ldr	r3, [pc, #140]	; (18b6c <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   18ae0:	681b      	ldr	r3, [r3, #0]
   18ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18ae4:	2b00      	cmp	r3, #0
   18ae6:	d02c      	beq.n	18b42 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   18ae8:	4b21      	ldr	r3, [pc, #132]	; (18b70 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   18aea:	781b      	ldrb	r3, [r3, #0]
   18aec:	2b00      	cmp	r3, #0
   18aee:	d028      	beq.n	18b42 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   18af0:	20ff      	movs	r0, #255	; 0xff
   18af2:	4b20      	ldr	r3, [pc, #128]	; (18b74 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   18af4:	4798      	blx	r3
   18af6:	0003      	movs	r3, r0
   18af8:	001a      	movs	r2, r3
   18afa:	231f      	movs	r3, #31
   18afc:	18fb      	adds	r3, r7, r3
   18afe:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   18b00:	683b      	ldr	r3, [r7, #0]
   18b02:	4a1d      	ldr	r2, [pc, #116]	; (18b78 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   18b04:	0019      	movs	r1, r3
   18b06:	0010      	movs	r0, r2
   18b08:	4b1c      	ldr	r3, [pc, #112]	; (18b7c <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   18b0a:	4798      	blx	r3
   18b0c:	0002      	movs	r2, r0
   18b0e:	2326      	movs	r3, #38	; 0x26
   18b10:	18fb      	adds	r3, r7, r3
   18b12:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   18b14:	4b1a      	ldr	r3, [pc, #104]	; (18b80 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   18b16:	4798      	blx	r3
   18b18:	0003      	movs	r3, r0
   18b1a:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   18b1c:	69bb      	ldr	r3, [r7, #24]
   18b1e:	2b00      	cmp	r3, #0
   18b20:	d00f      	beq.n	18b42 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   18b22:	69bb      	ldr	r3, [r7, #24]
   18b24:	221f      	movs	r2, #31
   18b26:	18ba      	adds	r2, r7, r2
   18b28:	7812      	ldrb	r2, [r2, #0]
   18b2a:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   18b2c:	687b      	ldr	r3, [r7, #4]
   18b2e:	b2da      	uxtb	r2, r3
   18b30:	69bb      	ldr	r3, [r7, #24]
   18b32:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   18b34:	69bb      	ldr	r3, [r7, #24]
   18b36:	2226      	movs	r2, #38	; 0x26
   18b38:	18ba      	adds	r2, r7, r2
   18b3a:	8812      	ldrh	r2, [r2, #0]
   18b3c:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   18b3e:	4b11      	ldr	r3, [pc, #68]	; (18b84 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   18b40:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18b42:	4b08      	ldr	r3, [pc, #32]	; (18b64 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18b44:	681b      	ldr	r3, [r3, #0]
   18b46:	1e5a      	subs	r2, r3, #1
   18b48:	4b06      	ldr	r3, [pc, #24]	; (18b64 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18b4a:	601a      	str	r2, [r3, #0]
   18b4c:	6a3b      	ldr	r3, [r7, #32]
   18b4e:	60fb      	str	r3, [r7, #12]
   18b50:	68fb      	ldr	r3, [r7, #12]
   18b52:	f383 8810 	msr	PRIMASK, r3
}
   18b56:	46bd      	mov	sp, r7
   18b58:	b00a      	add	sp, #40	; 0x28
   18b5a:	bd80      	pop	{r7, pc}
   18b5c:	00037504 	.word	0x00037504
   18b60:	00019629 	.word	0x00019629
   18b64:	20000bcc 	.word	0x20000bcc
   18b68:	0003755c 	.word	0x0003755c
   18b6c:	20000c74 	.word	0x20000c74
   18b70:	20000bd8 	.word	0x20000bd8
   18b74:	0001983d 	.word	0x0001983d
   18b78:	0000ffff 	.word	0x0000ffff
   18b7c:	00018a01 	.word	0x00018a01
   18b80:	000191e1 	.word	0x000191e1
   18b84:	000197e5 	.word	0x000197e5

00018b88 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   18b88:	b590      	push	{r4, r7, lr}
   18b8a:	b089      	sub	sp, #36	; 0x24
   18b8c:	af00      	add	r7, sp, #0
   18b8e:	0002      	movs	r2, r0
   18b90:	1dfb      	adds	r3, r7, #7
   18b92:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   18b94:	1dfb      	adds	r3, r7, #7
   18b96:	781b      	ldrb	r3, [r3, #0]
   18b98:	2b0f      	cmp	r3, #15
   18b9a:	d904      	bls.n	18ba6 <prvTraceStoreTaskswitch+0x1e>
   18b9c:	4b34      	ldr	r3, [pc, #208]	; (18c70 <prvTraceStoreTaskswitch+0xe8>)
   18b9e:	0018      	movs	r0, r3
   18ba0:	4b34      	ldr	r3, [pc, #208]	; (18c74 <prvTraceStoreTaskswitch+0xec>)
   18ba2:	4798      	blx	r3
   18ba4:	e061      	b.n	18c6a <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18ba6:	f3ef 8310 	mrs	r3, PRIMASK
   18baa:	60fb      	str	r3, [r7, #12]
  return(result);
   18bac:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   18bae:	61fb      	str	r3, [r7, #28]
   18bb0:	2301      	movs	r3, #1
   18bb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18bb4:	693b      	ldr	r3, [r7, #16]
   18bb6:	f383 8810 	msr	PRIMASK, r3
   18bba:	4b2f      	ldr	r3, [pc, #188]	; (18c78 <prvTraceStoreTaskswitch+0xf0>)
   18bbc:	681b      	ldr	r3, [r3, #0]
   18bbe:	1c5a      	adds	r2, r3, #1
   18bc0:	4b2d      	ldr	r3, [pc, #180]	; (18c78 <prvTraceStoreTaskswitch+0xf0>)
   18bc2:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   18bc4:	4b2d      	ldr	r3, [pc, #180]	; (18c7c <prvTraceStoreTaskswitch+0xf4>)
   18bc6:	781b      	ldrb	r3, [r3, #0]
   18bc8:	1dfa      	adds	r2, r7, #7
   18bca:	7812      	ldrb	r2, [r2, #0]
   18bcc:	429a      	cmp	r2, r3
   18bce:	d042      	beq.n	18c56 <prvTraceStoreTaskswitch+0xce>
   18bd0:	4b2b      	ldr	r3, [pc, #172]	; (18c80 <prvTraceStoreTaskswitch+0xf8>)
   18bd2:	681b      	ldr	r3, [r3, #0]
   18bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18bd6:	2b00      	cmp	r3, #0
   18bd8:	d03d      	beq.n	18c56 <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   18bda:	4b2a      	ldr	r3, [pc, #168]	; (18c84 <prvTraceStoreTaskswitch+0xfc>)
   18bdc:	2200      	movs	r2, #0
   18bde:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   18be0:	231a      	movs	r3, #26
   18be2:	18fc      	adds	r4, r7, r3
   18be4:	4b28      	ldr	r3, [pc, #160]	; (18c88 <prvTraceStoreTaskswitch+0x100>)
   18be6:	0018      	movs	r0, r3
   18be8:	4b28      	ldr	r3, [pc, #160]	; (18c8c <prvTraceStoreTaskswitch+0x104>)
   18bea:	4798      	blx	r3
   18bec:	0003      	movs	r3, r0
   18bee:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   18bf0:	4b22      	ldr	r3, [pc, #136]	; (18c7c <prvTraceStoreTaskswitch+0xf4>)
   18bf2:	1dfa      	adds	r2, r7, #7
   18bf4:	7812      	ldrb	r2, [r2, #0]
   18bf6:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   18bf8:	2319      	movs	r3, #25
   18bfa:	18fb      	adds	r3, r7, r3
   18bfc:	4a1f      	ldr	r2, [pc, #124]	; (18c7c <prvTraceStoreTaskswitch+0xf4>)
   18bfe:	7812      	ldrb	r2, [r2, #0]
   18c00:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   18c02:	4b23      	ldr	r3, [pc, #140]	; (18c90 <prvTraceStoreTaskswitch+0x108>)
   18c04:	4798      	blx	r3
   18c06:	0003      	movs	r3, r0
   18c08:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   18c0a:	697b      	ldr	r3, [r7, #20]
   18c0c:	2b00      	cmp	r3, #0
   18c0e:	d022      	beq.n	18c56 <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   18c10:	4b1a      	ldr	r3, [pc, #104]	; (18c7c <prvTraceStoreTaskswitch+0xf4>)
   18c12:	781b      	ldrb	r3, [r3, #0]
   18c14:	0019      	movs	r1, r3
   18c16:	2003      	movs	r0, #3
   18c18:	4b1e      	ldr	r3, [pc, #120]	; (18c94 <prvTraceStoreTaskswitch+0x10c>)
   18c1a:	4798      	blx	r3
   18c1c:	0003      	movs	r3, r0
   18c1e:	2b01      	cmp	r3, #1
   18c20:	d103      	bne.n	18c2a <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   18c22:	697b      	ldr	r3, [r7, #20]
   18c24:	2207      	movs	r2, #7
   18c26:	701a      	strb	r2, [r3, #0]
   18c28:	e002      	b.n	18c30 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   18c2a:	697b      	ldr	r3, [r7, #20]
   18c2c:	2206      	movs	r2, #6
   18c2e:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   18c30:	697b      	ldr	r3, [r7, #20]
   18c32:	221a      	movs	r2, #26
   18c34:	18ba      	adds	r2, r7, r2
   18c36:	8812      	ldrh	r2, [r2, #0]
   18c38:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   18c3a:	697b      	ldr	r3, [r7, #20]
   18c3c:	2219      	movs	r2, #25
   18c3e:	18ba      	adds	r2, r7, r2
   18c40:	7812      	ldrb	r2, [r2, #0]
   18c42:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   18c44:	4b0d      	ldr	r3, [pc, #52]	; (18c7c <prvTraceStoreTaskswitch+0xf4>)
   18c46:	781b      	ldrb	r3, [r3, #0]
   18c48:	2201      	movs	r2, #1
   18c4a:	0019      	movs	r1, r3
   18c4c:	2003      	movs	r0, #3
   18c4e:	4b12      	ldr	r3, [pc, #72]	; (18c98 <prvTraceStoreTaskswitch+0x110>)
   18c50:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   18c52:	4b12      	ldr	r3, [pc, #72]	; (18c9c <prvTraceStoreTaskswitch+0x114>)
   18c54:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   18c56:	4b08      	ldr	r3, [pc, #32]	; (18c78 <prvTraceStoreTaskswitch+0xf0>)
   18c58:	681b      	ldr	r3, [r3, #0]
   18c5a:	1e5a      	subs	r2, r3, #1
   18c5c:	4b06      	ldr	r3, [pc, #24]	; (18c78 <prvTraceStoreTaskswitch+0xf0>)
   18c5e:	601a      	str	r2, [r3, #0]
   18c60:	69fb      	ldr	r3, [r7, #28]
   18c62:	60bb      	str	r3, [r7, #8]
   18c64:	68bb      	ldr	r3, [r7, #8]
   18c66:	f383 8810 	msr	PRIMASK, r3
}
   18c6a:	46bd      	mov	sp, r7
   18c6c:	b009      	add	sp, #36	; 0x24
   18c6e:	bd90      	pop	{r4, r7, pc}
   18c70:	00037594 	.word	0x00037594
   18c74:	00019629 	.word	0x00019629
   18c78:	20000bcc 	.word	0x20000bcc
   18c7c:	20000bd8 	.word	0x20000bd8
   18c80:	20000c74 	.word	0x20000c74
   18c84:	20000bb8 	.word	0x20000bb8
   18c88:	0000ffff 	.word	0x0000ffff
   18c8c:	0001983d 	.word	0x0001983d
   18c90:	000191e1 	.word	0x000191e1
   18c94:	00018e85 	.word	0x00018e85
   18c98:	00018de1 	.word	0x00018de1
   18c9c:	000197e5 	.word	0x000197e5

00018ca0 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   18ca0:	b590      	push	{r4, r7, lr}
   18ca2:	b083      	sub	sp, #12
   18ca4:	af00      	add	r7, sp, #0
   18ca6:	0004      	movs	r4, r0
   18ca8:	0008      	movs	r0, r1
   18caa:	0011      	movs	r1, r2
   18cac:	1dfb      	adds	r3, r7, #7
   18cae:	1c22      	adds	r2, r4, #0
   18cb0:	701a      	strb	r2, [r3, #0]
   18cb2:	1dbb      	adds	r3, r7, #6
   18cb4:	1c02      	adds	r2, r0, #0
   18cb6:	701a      	strb	r2, [r3, #0]
   18cb8:	1d7b      	adds	r3, r7, #5
   18cba:	1c0a      	adds	r2, r1, #0
   18cbc:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18cbe:	1dfb      	adds	r3, r7, #7
   18cc0:	781b      	ldrb	r3, [r3, #0]
   18cc2:	2b08      	cmp	r3, #8
   18cc4:	d904      	bls.n	18cd0 <prvTraceSetPriorityProperty+0x30>
   18cc6:	4b1a      	ldr	r3, [pc, #104]	; (18d30 <prvTraceSetPriorityProperty+0x90>)
   18cc8:	0018      	movs	r0, r3
   18cca:	4b1a      	ldr	r3, [pc, #104]	; (18d34 <prvTraceSetPriorityProperty+0x94>)
   18ccc:	4798      	blx	r3
   18cce:	e02c      	b.n	18d2a <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18cd0:	4b19      	ldr	r3, [pc, #100]	; (18d38 <prvTraceSetPriorityProperty+0x98>)
   18cd2:	681a      	ldr	r2, [r3, #0]
   18cd4:	1dfb      	adds	r3, r7, #7
   18cd6:	781b      	ldrb	r3, [r3, #0]
   18cd8:	2164      	movs	r1, #100	; 0x64
   18cda:	18d3      	adds	r3, r2, r3
   18cdc:	185b      	adds	r3, r3, r1
   18cde:	781b      	ldrb	r3, [r3, #0]
   18ce0:	1dba      	adds	r2, r7, #6
   18ce2:	7812      	ldrb	r2, [r2, #0]
   18ce4:	429a      	cmp	r2, r3
   18ce6:	d904      	bls.n	18cf2 <prvTraceSetPriorityProperty+0x52>
   18ce8:	4b14      	ldr	r3, [pc, #80]	; (18d3c <prvTraceSetPriorityProperty+0x9c>)
   18cea:	0018      	movs	r0, r3
   18cec:	4b11      	ldr	r3, [pc, #68]	; (18d34 <prvTraceSetPriorityProperty+0x94>)
   18cee:	4798      	blx	r3
   18cf0:	e01b      	b.n	18d2a <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   18cf2:	4b11      	ldr	r3, [pc, #68]	; (18d38 <prvTraceSetPriorityProperty+0x98>)
   18cf4:	681c      	ldr	r4, [r3, #0]
   18cf6:	1dfb      	adds	r3, r7, #7
   18cf8:	781a      	ldrb	r2, [r3, #0]
   18cfa:	1dbb      	adds	r3, r7, #6
   18cfc:	781b      	ldrb	r3, [r3, #0]
   18cfe:	0011      	movs	r1, r2
   18d00:	0018      	movs	r0, r3
   18d02:	4b0f      	ldr	r3, [pc, #60]	; (18d40 <prvTraceSetPriorityProperty+0xa0>)
   18d04:	4798      	blx	r3
   18d06:	0003      	movs	r3, r0
   18d08:	0018      	movs	r0, r3
   18d0a:	4b0b      	ldr	r3, [pc, #44]	; (18d38 <prvTraceSetPriorityProperty+0x98>)
   18d0c:	681a      	ldr	r2, [r3, #0]
   18d0e:	1dfb      	adds	r3, r7, #7
   18d10:	781b      	ldrb	r3, [r3, #0]
   18d12:	2170      	movs	r1, #112	; 0x70
   18d14:	18d3      	adds	r3, r2, r3
   18d16:	185b      	adds	r3, r3, r1
   18d18:	781b      	ldrb	r3, [r3, #0]
   18d1a:	18c3      	adds	r3, r0, r3
   18d1c:	3301      	adds	r3, #1
   18d1e:	229c      	movs	r2, #156	; 0x9c
   18d20:	18e3      	adds	r3, r4, r3
   18d22:	189b      	adds	r3, r3, r2
   18d24:	1d7a      	adds	r2, r7, #5
   18d26:	7812      	ldrb	r2, [r2, #0]
   18d28:	701a      	strb	r2, [r3, #0]
}
   18d2a:	46bd      	mov	sp, r7
   18d2c:	b003      	add	sp, #12
   18d2e:	bd90      	pop	{r4, r7, pc}
   18d30:	00037728 	.word	0x00037728
   18d34:	00019629 	.word	0x00019629
   18d38:	20000c74 	.word	0x20000c74
   18d3c:	00037774 	.word	0x00037774
   18d40:	00019235 	.word	0x00019235

00018d44 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   18d44:	b590      	push	{r4, r7, lr}
   18d46:	b083      	sub	sp, #12
   18d48:	af00      	add	r7, sp, #0
   18d4a:	0002      	movs	r2, r0
   18d4c:	1dfb      	adds	r3, r7, #7
   18d4e:	701a      	strb	r2, [r3, #0]
   18d50:	1dbb      	adds	r3, r7, #6
   18d52:	1c0a      	adds	r2, r1, #0
   18d54:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18d56:	1dfb      	adds	r3, r7, #7
   18d58:	781b      	ldrb	r3, [r3, #0]
   18d5a:	2b08      	cmp	r3, #8
   18d5c:	d905      	bls.n	18d6a <prvTraceGetPriorityProperty+0x26>
   18d5e:	4b1b      	ldr	r3, [pc, #108]	; (18dcc <prvTraceGetPriorityProperty+0x88>)
   18d60:	0018      	movs	r0, r3
   18d62:	4b1b      	ldr	r3, [pc, #108]	; (18dd0 <prvTraceGetPriorityProperty+0x8c>)
   18d64:	4798      	blx	r3
   18d66:	2300      	movs	r3, #0
   18d68:	e02b      	b.n	18dc2 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18d6a:	4b1a      	ldr	r3, [pc, #104]	; (18dd4 <prvTraceGetPriorityProperty+0x90>)
   18d6c:	681a      	ldr	r2, [r3, #0]
   18d6e:	1dfb      	adds	r3, r7, #7
   18d70:	781b      	ldrb	r3, [r3, #0]
   18d72:	2164      	movs	r1, #100	; 0x64
   18d74:	18d3      	adds	r3, r2, r3
   18d76:	185b      	adds	r3, r3, r1
   18d78:	781b      	ldrb	r3, [r3, #0]
   18d7a:	1dba      	adds	r2, r7, #6
   18d7c:	7812      	ldrb	r2, [r2, #0]
   18d7e:	429a      	cmp	r2, r3
   18d80:	d905      	bls.n	18d8e <prvTraceGetPriorityProperty+0x4a>
   18d82:	4b15      	ldr	r3, [pc, #84]	; (18dd8 <prvTraceGetPriorityProperty+0x94>)
   18d84:	0018      	movs	r0, r3
   18d86:	4b12      	ldr	r3, [pc, #72]	; (18dd0 <prvTraceGetPriorityProperty+0x8c>)
   18d88:	4798      	blx	r3
   18d8a:	2300      	movs	r3, #0
   18d8c:	e019      	b.n	18dc2 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   18d8e:	4b11      	ldr	r3, [pc, #68]	; (18dd4 <prvTraceGetPriorityProperty+0x90>)
   18d90:	681c      	ldr	r4, [r3, #0]
   18d92:	1dfb      	adds	r3, r7, #7
   18d94:	781a      	ldrb	r2, [r3, #0]
   18d96:	1dbb      	adds	r3, r7, #6
   18d98:	781b      	ldrb	r3, [r3, #0]
   18d9a:	0011      	movs	r1, r2
   18d9c:	0018      	movs	r0, r3
   18d9e:	4b0f      	ldr	r3, [pc, #60]	; (18ddc <prvTraceGetPriorityProperty+0x98>)
   18da0:	4798      	blx	r3
   18da2:	0003      	movs	r3, r0
   18da4:	0018      	movs	r0, r3
   18da6:	4b0b      	ldr	r3, [pc, #44]	; (18dd4 <prvTraceGetPriorityProperty+0x90>)
   18da8:	681a      	ldr	r2, [r3, #0]
   18daa:	1dfb      	adds	r3, r7, #7
   18dac:	781b      	ldrb	r3, [r3, #0]
   18dae:	2170      	movs	r1, #112	; 0x70
   18db0:	18d3      	adds	r3, r2, r3
   18db2:	185b      	adds	r3, r3, r1
   18db4:	781b      	ldrb	r3, [r3, #0]
   18db6:	18c3      	adds	r3, r0, r3
   18db8:	3301      	adds	r3, #1
   18dba:	229c      	movs	r2, #156	; 0x9c
   18dbc:	18e3      	adds	r3, r4, r3
   18dbe:	189b      	adds	r3, r3, r2
   18dc0:	781b      	ldrb	r3, [r3, #0]
}
   18dc2:	0018      	movs	r0, r3
   18dc4:	46bd      	mov	sp, r7
   18dc6:	b003      	add	sp, #12
   18dc8:	bd90      	pop	{r4, r7, pc}
   18dca:	46c0      	nop			; (mov r8, r8)
   18dcc:	000377b4 	.word	0x000377b4
   18dd0:	00019629 	.word	0x00019629
   18dd4:	20000c74 	.word	0x20000c74
   18dd8:	00037800 	.word	0x00037800
   18ddc:	00019235 	.word	0x00019235

00018de0 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   18de0:	b590      	push	{r4, r7, lr}
   18de2:	b083      	sub	sp, #12
   18de4:	af00      	add	r7, sp, #0
   18de6:	0004      	movs	r4, r0
   18de8:	0008      	movs	r0, r1
   18dea:	0011      	movs	r1, r2
   18dec:	1dfb      	adds	r3, r7, #7
   18dee:	1c22      	adds	r2, r4, #0
   18df0:	701a      	strb	r2, [r3, #0]
   18df2:	1dbb      	adds	r3, r7, #6
   18df4:	1c02      	adds	r2, r0, #0
   18df6:	701a      	strb	r2, [r3, #0]
   18df8:	1d7b      	adds	r3, r7, #5
   18dfa:	1c0a      	adds	r2, r1, #0
   18dfc:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18dfe:	1dfb      	adds	r3, r7, #7
   18e00:	781b      	ldrb	r3, [r3, #0]
   18e02:	2b08      	cmp	r3, #8
   18e04:	d904      	bls.n	18e10 <prvTraceSetObjectState+0x30>
   18e06:	4b1a      	ldr	r3, [pc, #104]	; (18e70 <prvTraceSetObjectState+0x90>)
   18e08:	0018      	movs	r0, r3
   18e0a:	4b1a      	ldr	r3, [pc, #104]	; (18e74 <prvTraceSetObjectState+0x94>)
   18e0c:	4798      	blx	r3
   18e0e:	e02b      	b.n	18e68 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18e10:	4b19      	ldr	r3, [pc, #100]	; (18e78 <prvTraceSetObjectState+0x98>)
   18e12:	681a      	ldr	r2, [r3, #0]
   18e14:	1dfb      	adds	r3, r7, #7
   18e16:	781b      	ldrb	r3, [r3, #0]
   18e18:	2164      	movs	r1, #100	; 0x64
   18e1a:	18d3      	adds	r3, r2, r3
   18e1c:	185b      	adds	r3, r3, r1
   18e1e:	781b      	ldrb	r3, [r3, #0]
   18e20:	1dba      	adds	r2, r7, #6
   18e22:	7812      	ldrb	r2, [r2, #0]
   18e24:	429a      	cmp	r2, r3
   18e26:	d904      	bls.n	18e32 <prvTraceSetObjectState+0x52>
   18e28:	4b14      	ldr	r3, [pc, #80]	; (18e7c <prvTraceSetObjectState+0x9c>)
   18e2a:	0018      	movs	r0, r3
   18e2c:	4b11      	ldr	r3, [pc, #68]	; (18e74 <prvTraceSetObjectState+0x94>)
   18e2e:	4798      	blx	r3
   18e30:	e01a      	b.n	18e68 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   18e32:	4b11      	ldr	r3, [pc, #68]	; (18e78 <prvTraceSetObjectState+0x98>)
   18e34:	681c      	ldr	r4, [r3, #0]
   18e36:	1dfb      	adds	r3, r7, #7
   18e38:	781a      	ldrb	r2, [r3, #0]
   18e3a:	1dbb      	adds	r3, r7, #6
   18e3c:	781b      	ldrb	r3, [r3, #0]
   18e3e:	0011      	movs	r1, r2
   18e40:	0018      	movs	r0, r3
   18e42:	4b0f      	ldr	r3, [pc, #60]	; (18e80 <prvTraceSetObjectState+0xa0>)
   18e44:	4798      	blx	r3
   18e46:	0003      	movs	r3, r0
   18e48:	0018      	movs	r0, r3
   18e4a:	4b0b      	ldr	r3, [pc, #44]	; (18e78 <prvTraceSetObjectState+0x98>)
   18e4c:	681a      	ldr	r2, [r3, #0]
   18e4e:	1dfb      	adds	r3, r7, #7
   18e50:	781b      	ldrb	r3, [r3, #0]
   18e52:	2170      	movs	r1, #112	; 0x70
   18e54:	18d3      	adds	r3, r2, r3
   18e56:	185b      	adds	r3, r3, r1
   18e58:	781b      	ldrb	r3, [r3, #0]
   18e5a:	18c3      	adds	r3, r0, r3
   18e5c:	229c      	movs	r2, #156	; 0x9c
   18e5e:	18e3      	adds	r3, r4, r3
   18e60:	189b      	adds	r3, r3, r2
   18e62:	1d7a      	adds	r2, r7, #5
   18e64:	7812      	ldrb	r2, [r2, #0]
   18e66:	701a      	strb	r2, [r3, #0]
}
   18e68:	46bd      	mov	sp, r7
   18e6a:	b003      	add	sp, #12
   18e6c:	bd90      	pop	{r4, r7, pc}
   18e6e:	46c0      	nop			; (mov r8, r8)
   18e70:	00037840 	.word	0x00037840
   18e74:	00019629 	.word	0x00019629
   18e78:	20000c74 	.word	0x20000c74
   18e7c:	00037884 	.word	0x00037884
   18e80:	00019235 	.word	0x00019235

00018e84 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   18e84:	b590      	push	{r4, r7, lr}
   18e86:	b083      	sub	sp, #12
   18e88:	af00      	add	r7, sp, #0
   18e8a:	0002      	movs	r2, r0
   18e8c:	1dfb      	adds	r3, r7, #7
   18e8e:	701a      	strb	r2, [r3, #0]
   18e90:	1dbb      	adds	r3, r7, #6
   18e92:	1c0a      	adds	r2, r1, #0
   18e94:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18e96:	1dfb      	adds	r3, r7, #7
   18e98:	781b      	ldrb	r3, [r3, #0]
   18e9a:	2b08      	cmp	r3, #8
   18e9c:	d905      	bls.n	18eaa <prvTraceGetObjectState+0x26>
   18e9e:	4b1a      	ldr	r3, [pc, #104]	; (18f08 <prvTraceGetObjectState+0x84>)
   18ea0:	0018      	movs	r0, r3
   18ea2:	4b1a      	ldr	r3, [pc, #104]	; (18f0c <prvTraceGetObjectState+0x88>)
   18ea4:	4798      	blx	r3
   18ea6:	2300      	movs	r3, #0
   18ea8:	e02a      	b.n	18f00 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18eaa:	4b19      	ldr	r3, [pc, #100]	; (18f10 <prvTraceGetObjectState+0x8c>)
   18eac:	681a      	ldr	r2, [r3, #0]
   18eae:	1dfb      	adds	r3, r7, #7
   18eb0:	781b      	ldrb	r3, [r3, #0]
   18eb2:	2164      	movs	r1, #100	; 0x64
   18eb4:	18d3      	adds	r3, r2, r3
   18eb6:	185b      	adds	r3, r3, r1
   18eb8:	781b      	ldrb	r3, [r3, #0]
   18eba:	1dba      	adds	r2, r7, #6
   18ebc:	7812      	ldrb	r2, [r2, #0]
   18ebe:	429a      	cmp	r2, r3
   18ec0:	d905      	bls.n	18ece <prvTraceGetObjectState+0x4a>
   18ec2:	4b14      	ldr	r3, [pc, #80]	; (18f14 <prvTraceGetObjectState+0x90>)
   18ec4:	0018      	movs	r0, r3
   18ec6:	4b11      	ldr	r3, [pc, #68]	; (18f0c <prvTraceGetObjectState+0x88>)
   18ec8:	4798      	blx	r3
   18eca:	2300      	movs	r3, #0
   18ecc:	e018      	b.n	18f00 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   18ece:	4b10      	ldr	r3, [pc, #64]	; (18f10 <prvTraceGetObjectState+0x8c>)
   18ed0:	681c      	ldr	r4, [r3, #0]
   18ed2:	1dfb      	adds	r3, r7, #7
   18ed4:	781a      	ldrb	r2, [r3, #0]
   18ed6:	1dbb      	adds	r3, r7, #6
   18ed8:	781b      	ldrb	r3, [r3, #0]
   18eda:	0011      	movs	r1, r2
   18edc:	0018      	movs	r0, r3
   18ede:	4b0e      	ldr	r3, [pc, #56]	; (18f18 <prvTraceGetObjectState+0x94>)
   18ee0:	4798      	blx	r3
   18ee2:	0003      	movs	r3, r0
   18ee4:	0018      	movs	r0, r3
   18ee6:	4b0a      	ldr	r3, [pc, #40]	; (18f10 <prvTraceGetObjectState+0x8c>)
   18ee8:	681a      	ldr	r2, [r3, #0]
   18eea:	1dfb      	adds	r3, r7, #7
   18eec:	781b      	ldrb	r3, [r3, #0]
   18eee:	2170      	movs	r1, #112	; 0x70
   18ef0:	18d3      	adds	r3, r2, r3
   18ef2:	185b      	adds	r3, r3, r1
   18ef4:	781b      	ldrb	r3, [r3, #0]
   18ef6:	18c3      	adds	r3, r0, r3
   18ef8:	229c      	movs	r2, #156	; 0x9c
   18efa:	18e3      	adds	r3, r4, r3
   18efc:	189b      	adds	r3, r3, r2
   18efe:	781b      	ldrb	r3, [r3, #0]
}
   18f00:	0018      	movs	r0, r3
   18f02:	46bd      	mov	sp, r7
   18f04:	b003      	add	sp, #12
   18f06:	bd90      	pop	{r4, r7, pc}
   18f08:	000378c0 	.word	0x000378c0
   18f0c:	00019629 	.word	0x00019629
   18f10:	20000c74 	.word	0x20000c74
   18f14:	00037904 	.word	0x00037904
   18f18:	00019235 	.word	0x00019235

00018f1c <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   18f1c:	b590      	push	{r4, r7, lr}
   18f1e:	b083      	sub	sp, #12
   18f20:	af00      	add	r7, sp, #0
   18f22:	0002      	movs	r2, r0
   18f24:	1dfb      	adds	r3, r7, #7
   18f26:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   18f28:	4b11      	ldr	r3, [pc, #68]	; (18f70 <prvTraceSetTaskInstanceFinished+0x54>)
   18f2a:	681b      	ldr	r3, [r3, #0]
   18f2c:	2267      	movs	r2, #103	; 0x67
   18f2e:	5c9b      	ldrb	r3, [r3, r2]
   18f30:	1dfa      	adds	r2, r7, #7
   18f32:	7812      	ldrb	r2, [r2, #0]
   18f34:	429a      	cmp	r2, r3
   18f36:	d904      	bls.n	18f42 <prvTraceSetTaskInstanceFinished+0x26>
   18f38:	4b0e      	ldr	r3, [pc, #56]	; (18f74 <prvTraceSetTaskInstanceFinished+0x58>)
   18f3a:	0018      	movs	r0, r3
   18f3c:	4b0e      	ldr	r3, [pc, #56]	; (18f78 <prvTraceSetTaskInstanceFinished+0x5c>)
   18f3e:	4798      	blx	r3
   18f40:	e013      	b.n	18f6a <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   18f42:	4b0b      	ldr	r3, [pc, #44]	; (18f70 <prvTraceSetTaskInstanceFinished+0x54>)
   18f44:	681c      	ldr	r4, [r3, #0]
   18f46:	1dfb      	adds	r3, r7, #7
   18f48:	781b      	ldrb	r3, [r3, #0]
   18f4a:	2103      	movs	r1, #3
   18f4c:	0018      	movs	r0, r3
   18f4e:	4b0b      	ldr	r3, [pc, #44]	; (18f7c <prvTraceSetTaskInstanceFinished+0x60>)
   18f50:	4798      	blx	r3
   18f52:	0003      	movs	r3, r0
   18f54:	0019      	movs	r1, r3
   18f56:	4b06      	ldr	r3, [pc, #24]	; (18f70 <prvTraceSetTaskInstanceFinished+0x54>)
   18f58:	681b      	ldr	r3, [r3, #0]
   18f5a:	2273      	movs	r2, #115	; 0x73
   18f5c:	5c9b      	ldrb	r3, [r3, r2]
   18f5e:	18cb      	adds	r3, r1, r3
   18f60:	229c      	movs	r2, #156	; 0x9c
   18f62:	18e3      	adds	r3, r4, r3
   18f64:	189b      	adds	r3, r3, r2
   18f66:	2200      	movs	r2, #0
   18f68:	701a      	strb	r2, [r3, #0]
#endif
}
   18f6a:	46bd      	mov	sp, r7
   18f6c:	b003      	add	sp, #12
   18f6e:	bd90      	pop	{r4, r7, pc}
   18f70:	20000c74 	.word	0x20000c74
   18f74:	00037940 	.word	0x00037940
   18f78:	00019629 	.word	0x00019629
   18f7c:	00019235 	.word	0x00019235

00018f80 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   18f80:	b580      	push	{r7, lr}
   18f82:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   18f84:	4b75      	ldr	r3, [pc, #468]	; (1915c <prvTraceInitTraceData+0x1dc>)
   18f86:	681b      	ldr	r3, [r3, #0]
   18f88:	2b00      	cmp	r3, #0
   18f8a:	d103      	bne.n	18f94 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   18f8c:	4b73      	ldr	r3, [pc, #460]	; (1915c <prvTraceInitTraceData+0x1dc>)
   18f8e:	4a74      	ldr	r2, [pc, #464]	; (19160 <prvTraceInitTraceData+0x1e0>)
   18f90:	601a      	str	r2, [r3, #0]
   18f92:	e006      	b.n	18fa2 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   18f94:	4b71      	ldr	r3, [pc, #452]	; (1915c <prvTraceInitTraceData+0x1dc>)
   18f96:	681b      	ldr	r3, [r3, #0]
   18f98:	781b      	ldrb	r3, [r3, #0]
   18f9a:	b2db      	uxtb	r3, r3
   18f9c:	2b01      	cmp	r3, #1
   18f9e:	d100      	bne.n	18fa2 <prvTraceInitTraceData+0x22>
   18fa0:	e0d8      	b.n	19154 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   18fa2:	4b70      	ldr	r3, [pc, #448]	; (19164 <prvTraceInitTraceData+0x1e4>)
   18fa4:	681a      	ldr	r2, [r3, #0]
   18fa6:	4b70      	ldr	r3, [pc, #448]	; (19168 <prvTraceInitTraceData+0x1e8>)
   18fa8:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   18faa:	4b6c      	ldr	r3, [pc, #432]	; (1915c <prvTraceInitTraceData+0x1dc>)
   18fac:	6818      	ldr	r0, [r3, #0]
   18fae:	23bd      	movs	r3, #189	; 0xbd
   18fb0:	011b      	lsls	r3, r3, #4
   18fb2:	001a      	movs	r2, r3
   18fb4:	2100      	movs	r1, #0
   18fb6:	4b6d      	ldr	r3, [pc, #436]	; (1916c <prvTraceInitTraceData+0x1ec>)
   18fb8:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   18fba:	4b68      	ldr	r3, [pc, #416]	; (1915c <prvTraceInitTraceData+0x1dc>)
   18fbc:	681b      	ldr	r3, [r3, #0]
   18fbe:	4a6c      	ldr	r2, [pc, #432]	; (19170 <prvTraceInitTraceData+0x1f0>)
   18fc0:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   18fc2:	4b66      	ldr	r3, [pc, #408]	; (1915c <prvTraceInitTraceData+0x1dc>)
   18fc4:	681b      	ldr	r3, [r3, #0]
   18fc6:	2205      	movs	r2, #5
   18fc8:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   18fca:	4b64      	ldr	r3, [pc, #400]	; (1915c <prvTraceInitTraceData+0x1dc>)
   18fcc:	681b      	ldr	r3, [r3, #0]
   18fce:	2200      	movs	r2, #0
   18fd0:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   18fd2:	4b62      	ldr	r3, [pc, #392]	; (1915c <prvTraceInitTraceData+0x1dc>)
   18fd4:	681b      	ldr	r3, [r3, #0]
   18fd6:	22bd      	movs	r2, #189	; 0xbd
   18fd8:	0112      	lsls	r2, r2, #4
   18fda:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   18fdc:	4b5f      	ldr	r3, [pc, #380]	; (1915c <prvTraceInitTraceData+0x1dc>)
   18fde:	681b      	ldr	r3, [r3, #0]
   18fe0:	2296      	movs	r2, #150	; 0x96
   18fe2:	0052      	lsls	r2, r2, #1
   18fe4:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   18fe6:	4b5d      	ldr	r3, [pc, #372]	; (1915c <prvTraceInitTraceData+0x1dc>)
   18fe8:	681b      	ldr	r3, [r3, #0]
   18fea:	4a62      	ldr	r2, [pc, #392]	; (19174 <prvTraceInitTraceData+0x1f4>)
   18fec:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   18fee:	4b5b      	ldr	r3, [pc, #364]	; (1915c <prvTraceInitTraceData+0x1dc>)
   18ff0:	681b      	ldr	r3, [r3, #0]
   18ff2:	2200      	movs	r2, #0
   18ff4:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   18ff6:	4b59      	ldr	r3, [pc, #356]	; (1915c <prvTraceInitTraceData+0x1dc>)
   18ff8:	681b      	ldr	r3, [r3, #0]
   18ffa:	2200      	movs	r2, #0
   18ffc:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   18ffe:	4b5e      	ldr	r3, [pc, #376]	; (19178 <prvTraceInitTraceData+0x1f8>)
   19000:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   19002:	4b56      	ldr	r3, [pc, #344]	; (1915c <prvTraceInitTraceData+0x1dc>)
   19004:	681b      	ldr	r3, [r3, #0]
   19006:	4a5d      	ldr	r2, [pc, #372]	; (1917c <prvTraceInitTraceData+0x1fc>)
   19008:	495d      	ldr	r1, [pc, #372]	; (19180 <prvTraceInitTraceData+0x200>)
   1900a:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   1900c:	4b53      	ldr	r3, [pc, #332]	; (1915c <prvTraceInitTraceData+0x1dc>)
   1900e:	681a      	ldr	r2, [r3, #0]
   19010:	23ac      	movs	r3, #172	; 0xac
   19012:	00db      	lsls	r3, r3, #3
   19014:	21c8      	movs	r1, #200	; 0xc8
   19016:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   19018:	4b50      	ldr	r3, [pc, #320]	; (1915c <prvTraceInitTraceData+0x1dc>)
   1901a:	681b      	ldr	r3, [r3, #0]
   1901c:	4a59      	ldr	r2, [pc, #356]	; (19184 <prvTraceInitTraceData+0x204>)
   1901e:	2101      	movs	r1, #1
   19020:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   19022:	4b4e      	ldr	r3, [pc, #312]	; (1915c <prvTraceInitTraceData+0x1dc>)
   19024:	681a      	ldr	r2, [r3, #0]
   19026:	23d7      	movs	r3, #215	; 0xd7
   19028:	00db      	lsls	r3, r3, #3
   1902a:	4957      	ldr	r1, [pc, #348]	; (19188 <prvTraceInitTraceData+0x208>)
   1902c:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   1902e:	4b4b      	ldr	r3, [pc, #300]	; (1915c <prvTraceInitTraceData+0x1dc>)
   19030:	681b      	ldr	r3, [r3, #0]
   19032:	4a56      	ldr	r2, [pc, #344]	; (1918c <prvTraceInitTraceData+0x20c>)
   19034:	4694      	mov	ip, r2
   19036:	4463      	add	r3, ip
   19038:	4955      	ldr	r1, [pc, #340]	; (19190 <prvTraceInitTraceData+0x210>)
   1903a:	2250      	movs	r2, #80	; 0x50
   1903c:	0018      	movs	r0, r3
   1903e:	4b55      	ldr	r3, [pc, #340]	; (19194 <prvTraceInitTraceData+0x214>)
   19040:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   19042:	4b46      	ldr	r3, [pc, #280]	; (1915c <prvTraceInitTraceData+0x1dc>)
   19044:	681b      	ldr	r3, [r3, #0]
   19046:	4a54      	ldr	r2, [pc, #336]	; (19198 <prvTraceInitTraceData+0x218>)
   19048:	4954      	ldr	r1, [pc, #336]	; (1919c <prvTraceInitTraceData+0x21c>)
   1904a:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   1904c:	4b43      	ldr	r3, [pc, #268]	; (1915c <prvTraceInitTraceData+0x1dc>)
   1904e:	681b      	ldr	r3, [r3, #0]
   19050:	4a53      	ldr	r2, [pc, #332]	; (191a0 <prvTraceInitTraceData+0x220>)
   19052:	210a      	movs	r1, #10
   19054:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   19056:	4b41      	ldr	r3, [pc, #260]	; (1915c <prvTraceInitTraceData+0x1dc>)
   19058:	681b      	ldr	r3, [r3, #0]
   1905a:	4a52      	ldr	r2, [pc, #328]	; (191a4 <prvTraceInitTraceData+0x224>)
   1905c:	210b      	movs	r1, #11
   1905e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   19060:	4b3e      	ldr	r3, [pc, #248]	; (1915c <prvTraceInitTraceData+0x1dc>)
   19062:	681b      	ldr	r3, [r3, #0]
   19064:	4a50      	ldr	r2, [pc, #320]	; (191a8 <prvTraceInitTraceData+0x228>)
   19066:	210c      	movs	r1, #12
   19068:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   1906a:	4b3c      	ldr	r3, [pc, #240]	; (1915c <prvTraceInitTraceData+0x1dc>)
   1906c:	681b      	ldr	r3, [r3, #0]
   1906e:	4a4f      	ldr	r2, [pc, #316]	; (191ac <prvTraceInitTraceData+0x22c>)
   19070:	210d      	movs	r1, #13
   19072:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   19074:	4b39      	ldr	r3, [pc, #228]	; (1915c <prvTraceInitTraceData+0x1dc>)
   19076:	681b      	ldr	r3, [r3, #0]
   19078:	4a4d      	ldr	r2, [pc, #308]	; (191b0 <prvTraceInitTraceData+0x230>)
   1907a:	2171      	movs	r1, #113	; 0x71
   1907c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   1907e:	4b37      	ldr	r3, [pc, #220]	; (1915c <prvTraceInitTraceData+0x1dc>)
   19080:	681b      	ldr	r3, [r3, #0]
   19082:	4a4c      	ldr	r2, [pc, #304]	; (191b4 <prvTraceInitTraceData+0x234>)
   19084:	2172      	movs	r1, #114	; 0x72
   19086:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   19088:	4b34      	ldr	r3, [pc, #208]	; (1915c <prvTraceInitTraceData+0x1dc>)
   1908a:	681b      	ldr	r3, [r3, #0]
   1908c:	4a4a      	ldr	r2, [pc, #296]	; (191b8 <prvTraceInitTraceData+0x238>)
   1908e:	2173      	movs	r1, #115	; 0x73
   19090:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   19092:	4b32      	ldr	r3, [pc, #200]	; (1915c <prvTraceInitTraceData+0x1dc>)
   19094:	681b      	ldr	r3, [r3, #0]
   19096:	4a49      	ldr	r2, [pc, #292]	; (191bc <prvTraceInitTraceData+0x23c>)
   19098:	2174      	movs	r1, #116	; 0x74
   1909a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   1909c:	4b2f      	ldr	r3, [pc, #188]	; (1915c <prvTraceInitTraceData+0x1dc>)
   1909e:	681b      	ldr	r3, [r3, #0]
   190a0:	4a47      	ldr	r2, [pc, #284]	; (191c0 <prvTraceInitTraceData+0x240>)
   190a2:	21f1      	movs	r1, #241	; 0xf1
   190a4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   190a6:	4b2d      	ldr	r3, [pc, #180]	; (1915c <prvTraceInitTraceData+0x1dc>)
   190a8:	681b      	ldr	r3, [r3, #0]
   190aa:	4a46      	ldr	r2, [pc, #280]	; (191c4 <prvTraceInitTraceData+0x244>)
   190ac:	21f2      	movs	r1, #242	; 0xf2
   190ae:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   190b0:	4b2a      	ldr	r3, [pc, #168]	; (1915c <prvTraceInitTraceData+0x1dc>)
   190b2:	681b      	ldr	r3, [r3, #0]
   190b4:	4a44      	ldr	r2, [pc, #272]	; (191c8 <prvTraceInitTraceData+0x248>)
   190b6:	21f3      	movs	r1, #243	; 0xf3
   190b8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   190ba:	4b28      	ldr	r3, [pc, #160]	; (1915c <prvTraceInitTraceData+0x1dc>)
   190bc:	681b      	ldr	r3, [r3, #0]
   190be:	4a43      	ldr	r2, [pc, #268]	; (191cc <prvTraceInitTraceData+0x24c>)
   190c0:	21f4      	movs	r1, #244	; 0xf4
   190c2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   190c4:	4b42      	ldr	r3, [pc, #264]	; (191d0 <prvTraceInitTraceData+0x250>)
   190c6:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   190c8:	4b24      	ldr	r3, [pc, #144]	; (1915c <prvTraceInitTraceData+0x1dc>)
   190ca:	681b      	ldr	r3, [r3, #0]
   190cc:	22f4      	movs	r2, #244	; 0xf4
   190ce:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   190d0:	4b22      	ldr	r3, [pc, #136]	; (1915c <prvTraceInitTraceData+0x1dc>)
   190d2:	681b      	ldr	r3, [r3, #0]
   190d4:	22f3      	movs	r2, #243	; 0xf3
   190d6:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   190d8:	4b20      	ldr	r3, [pc, #128]	; (1915c <prvTraceInitTraceData+0x1dc>)
   190da:	681b      	ldr	r3, [r3, #0]
   190dc:	22f2      	movs	r2, #242	; 0xf2
   190de:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   190e0:	4b1e      	ldr	r3, [pc, #120]	; (1915c <prvTraceInitTraceData+0x1dc>)
   190e2:	681b      	ldr	r3, [r3, #0]
   190e4:	22f1      	movs	r2, #241	; 0xf1
   190e6:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   190e8:	4b1c      	ldr	r3, [pc, #112]	; (1915c <prvTraceInitTraceData+0x1dc>)
   190ea:	681b      	ldr	r3, [r3, #0]
   190ec:	2274      	movs	r2, #116	; 0x74
   190ee:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   190f0:	4b1a      	ldr	r3, [pc, #104]	; (1915c <prvTraceInitTraceData+0x1dc>)
   190f2:	681b      	ldr	r3, [r3, #0]
   190f4:	2273      	movs	r2, #115	; 0x73
   190f6:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   190f8:	4b18      	ldr	r3, [pc, #96]	; (1915c <prvTraceInitTraceData+0x1dc>)
   190fa:	681b      	ldr	r3, [r3, #0]
   190fc:	2272      	movs	r2, #114	; 0x72
   190fe:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   19100:	4b16      	ldr	r3, [pc, #88]	; (1915c <prvTraceInitTraceData+0x1dc>)
   19102:	681b      	ldr	r3, [r3, #0]
   19104:	2271      	movs	r2, #113	; 0x71
   19106:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   19108:	4b14      	ldr	r3, [pc, #80]	; (1915c <prvTraceInitTraceData+0x1dc>)
   1910a:	681b      	ldr	r3, [r3, #0]
   1910c:	2204      	movs	r2, #4
   1910e:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   19110:	4b12      	ldr	r3, [pc, #72]	; (1915c <prvTraceInitTraceData+0x1dc>)
   19112:	681b      	ldr	r3, [r3, #0]
   19114:	2203      	movs	r2, #3
   19116:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   19118:	4b10      	ldr	r3, [pc, #64]	; (1915c <prvTraceInitTraceData+0x1dc>)
   1911a:	681b      	ldr	r3, [r3, #0]
   1911c:	2202      	movs	r2, #2
   1911e:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   19120:	4b0e      	ldr	r3, [pc, #56]	; (1915c <prvTraceInitTraceData+0x1dc>)
   19122:	681b      	ldr	r3, [r3, #0]
   19124:	2201      	movs	r2, #1
   19126:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   19128:	4b2a      	ldr	r3, [pc, #168]	; (191d4 <prvTraceInitTraceData+0x254>)
   1912a:	681b      	ldr	r3, [r3, #0]
   1912c:	2b00      	cmp	r3, #0
   1912e:	d012      	beq.n	19156 <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   19130:	4b0a      	ldr	r3, [pc, #40]	; (1915c <prvTraceInitTraceData+0x1dc>)
   19132:	681b      	ldr	r3, [r3, #0]
   19134:	4a15      	ldr	r2, [pc, #84]	; (1918c <prvTraceInitTraceData+0x20c>)
   19136:	1898      	adds	r0, r3, r2
   19138:	4b26      	ldr	r3, [pc, #152]	; (191d4 <prvTraceInitTraceData+0x254>)
   1913a:	681b      	ldr	r3, [r3, #0]
   1913c:	2250      	movs	r2, #80	; 0x50
   1913e:	0019      	movs	r1, r3
   19140:	4b14      	ldr	r3, [pc, #80]	; (19194 <prvTraceInitTraceData+0x214>)
   19142:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   19144:	4b05      	ldr	r3, [pc, #20]	; (1915c <prvTraceInitTraceData+0x1dc>)
   19146:	681b      	ldr	r3, [r3, #0]
   19148:	4a23      	ldr	r2, [pc, #140]	; (191d8 <prvTraceInitTraceData+0x258>)
   1914a:	2101      	movs	r1, #1
   1914c:	5099      	str	r1, [r3, r2]
		vTraceStop();
   1914e:	4b23      	ldr	r3, [pc, #140]	; (191dc <prvTraceInitTraceData+0x25c>)
   19150:	4798      	blx	r3
   19152:	e000      	b.n	19156 <prvTraceInitTraceData+0x1d6>
			return;
   19154:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   19156:	46bd      	mov	sp, r7
   19158:	bd80      	pop	{r7, pc}
   1915a:	46c0      	nop			; (mov r8, r8)
   1915c:	20000c74 	.word	0x20000c74
   19160:	2000482c 	.word	0x2000482c
   19164:	e000e018 	.word	0xe000e018
   19168:	200053fc 	.word	0x200053fc
   1916c:	0003462f 	.word	0x0003462f
   19170:	00001aa1 	.word	0x00001aa1
   19174:	f0f0f0f0 	.word	0xf0f0f0f0
   19178:	000180e5 	.word	0x000180e5
   1917c:	0000055c 	.word	0x0000055c
   19180:	f1f1f1f1 	.word	0xf1f1f1f1
   19184:	00000564 	.word	0x00000564
   19188:	f2f2f2f2 	.word	0xf2f2f2f2
   1918c:	000006bc 	.word	0x000006bc
   19190:	00037988 	.word	0x00037988
   19194:	000194f5 	.word	0x000194f5
   19198:	0000070c 	.word	0x0000070c
   1919c:	f3f3f3f3 	.word	0xf3f3f3f3
   191a0:	00000bc4 	.word	0x00000bc4
   191a4:	00000bc5 	.word	0x00000bc5
   191a8:	00000bc6 	.word	0x00000bc6
   191ac:	00000bc7 	.word	0x00000bc7
   191b0:	00000bc8 	.word	0x00000bc8
   191b4:	00000bc9 	.word	0x00000bc9
   191b8:	00000bca 	.word	0x00000bca
   191bc:	00000bcb 	.word	0x00000bcb
   191c0:	00000bcc 	.word	0x00000bcc
   191c4:	00000bcd 	.word	0x00000bcd
   191c8:	00000bce 	.word	0x00000bce
   191cc:	00000bcf 	.word	0x00000bcf
   191d0:	00018285 	.word	0x00018285
   191d4:	20000bd4 	.word	0x20000bd4
   191d8:	000006b4 	.word	0x000006b4
   191dc:	000184ed 	.word	0x000184ed

000191e0 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   191e0:	b580      	push	{r7, lr}
   191e2:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   191e4:	4b10      	ldr	r3, [pc, #64]	; (19228 <prvTraceNextFreeEventBufferSlot+0x48>)
   191e6:	681b      	ldr	r3, [r3, #0]
   191e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   191ea:	2b00      	cmp	r3, #0
   191ec:	d101      	bne.n	191f2 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   191ee:	2300      	movs	r3, #0
   191f0:	e017      	b.n	19222 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   191f2:	4b0d      	ldr	r3, [pc, #52]	; (19228 <prvTraceNextFreeEventBufferSlot+0x48>)
   191f4:	681b      	ldr	r3, [r3, #0]
   191f6:	69da      	ldr	r2, [r3, #28]
   191f8:	232c      	movs	r3, #44	; 0x2c
   191fa:	33ff      	adds	r3, #255	; 0xff
   191fc:	429a      	cmp	r2, r3
   191fe:	d905      	bls.n	1920c <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   19200:	4b0a      	ldr	r3, [pc, #40]	; (1922c <prvTraceNextFreeEventBufferSlot+0x4c>)
   19202:	0018      	movs	r0, r3
   19204:	4b0a      	ldr	r3, [pc, #40]	; (19230 <prvTraceNextFreeEventBufferSlot+0x50>)
   19206:	4798      	blx	r3
		return NULL;
   19208:	2300      	movs	r3, #0
   1920a:	e00a      	b.n	19222 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   1920c:	4b06      	ldr	r3, [pc, #24]	; (19228 <prvTraceNextFreeEventBufferSlot+0x48>)
   1920e:	681a      	ldr	r2, [r3, #0]
   19210:	4b05      	ldr	r3, [pc, #20]	; (19228 <prvTraceNextFreeEventBufferSlot+0x48>)
   19212:	681b      	ldr	r3, [r3, #0]
   19214:	69db      	ldr	r3, [r3, #28]
   19216:	009b      	lsls	r3, r3, #2
   19218:	21e2      	movs	r1, #226	; 0xe2
   1921a:	00c9      	lsls	r1, r1, #3
   1921c:	468c      	mov	ip, r1
   1921e:	4463      	add	r3, ip
   19220:	18d3      	adds	r3, r2, r3
}
   19222:	0018      	movs	r0, r3
   19224:	46bd      	mov	sp, r7
   19226:	bd80      	pop	{r7, pc}
   19228:	20000c74 	.word	0x20000c74
   1922c:	0003799c 	.word	0x0003799c
   19230:	00019629 	.word	0x00019629

00019234 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   19234:	b580      	push	{r7, lr}
   19236:	b082      	sub	sp, #8
   19238:	af00      	add	r7, sp, #0
   1923a:	0002      	movs	r2, r0
   1923c:	1dfb      	adds	r3, r7, #7
   1923e:	701a      	strb	r2, [r3, #0]
   19240:	1dbb      	adds	r3, r7, #6
   19242:	1c0a      	adds	r2, r1, #0
   19244:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   19246:	1dbb      	adds	r3, r7, #6
   19248:	781b      	ldrb	r3, [r3, #0]
   1924a:	2b08      	cmp	r3, #8
   1924c:	d905      	bls.n	1925a <uiIndexOfObject+0x26>
   1924e:	4b2a      	ldr	r3, [pc, #168]	; (192f8 <uiIndexOfObject+0xc4>)
   19250:	0018      	movs	r0, r3
   19252:	4b2a      	ldr	r3, [pc, #168]	; (192fc <uiIndexOfObject+0xc8>)
   19254:	4798      	blx	r3
   19256:	2300      	movs	r3, #0
   19258:	e049      	b.n	192ee <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   1925a:	1dfb      	adds	r3, r7, #7
   1925c:	781b      	ldrb	r3, [r3, #0]
   1925e:	2b00      	cmp	r3, #0
   19260:	d00b      	beq.n	1927a <uiIndexOfObject+0x46>
   19262:	4b27      	ldr	r3, [pc, #156]	; (19300 <uiIndexOfObject+0xcc>)
   19264:	681a      	ldr	r2, [r3, #0]
   19266:	1dbb      	adds	r3, r7, #6
   19268:	781b      	ldrb	r3, [r3, #0]
   1926a:	2164      	movs	r1, #100	; 0x64
   1926c:	18d3      	adds	r3, r2, r3
   1926e:	185b      	adds	r3, r3, r1
   19270:	781b      	ldrb	r3, [r3, #0]
   19272:	1dfa      	adds	r2, r7, #7
   19274:	7812      	ldrb	r2, [r2, #0]
   19276:	429a      	cmp	r2, r3
   19278:	d905      	bls.n	19286 <uiIndexOfObject+0x52>
   1927a:	4b22      	ldr	r3, [pc, #136]	; (19304 <uiIndexOfObject+0xd0>)
   1927c:	0018      	movs	r0, r3
   1927e:	4b1f      	ldr	r3, [pc, #124]	; (192fc <uiIndexOfObject+0xc8>)
   19280:	4798      	blx	r3
   19282:	2300      	movs	r3, #0
   19284:	e033      	b.n	192ee <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   19286:	1dbb      	adds	r3, r7, #6
   19288:	781b      	ldrb	r3, [r3, #0]
   1928a:	2b08      	cmp	r3, #8
   1928c:	d82a      	bhi.n	192e4 <uiIndexOfObject+0xb0>
   1928e:	1dfb      	adds	r3, r7, #7
   19290:	781b      	ldrb	r3, [r3, #0]
   19292:	2b00      	cmp	r3, #0
   19294:	d026      	beq.n	192e4 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   19296:	4b1a      	ldr	r3, [pc, #104]	; (19300 <uiIndexOfObject+0xcc>)
   19298:	681a      	ldr	r2, [r3, #0]
   1929a:	1dbb      	adds	r3, r7, #6
   1929c:	781b      	ldrb	r3, [r3, #0]
   1929e:	2164      	movs	r1, #100	; 0x64
   192a0:	18d3      	adds	r3, r2, r3
   192a2:	185b      	adds	r3, r3, r1
   192a4:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   192a6:	1dfa      	adds	r2, r7, #7
   192a8:	7812      	ldrb	r2, [r2, #0]
   192aa:	429a      	cmp	r2, r3
   192ac:	d81a      	bhi.n	192e4 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   192ae:	4b14      	ldr	r3, [pc, #80]	; (19300 <uiIndexOfObject+0xcc>)
   192b0:	681a      	ldr	r2, [r3, #0]
   192b2:	1dbb      	adds	r3, r7, #6
   192b4:	781b      	ldrb	r3, [r3, #0]
   192b6:	3340      	adds	r3, #64	; 0x40
   192b8:	005b      	lsls	r3, r3, #1
   192ba:	18d3      	adds	r3, r2, r3
   192bc:	3308      	adds	r3, #8
   192be:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   192c0:	4b0f      	ldr	r3, [pc, #60]	; (19300 <uiIndexOfObject+0xcc>)
   192c2:	6819      	ldr	r1, [r3, #0]
   192c4:	1dbb      	adds	r3, r7, #6
   192c6:	781b      	ldrb	r3, [r3, #0]
   192c8:	207c      	movs	r0, #124	; 0x7c
   192ca:	18cb      	adds	r3, r1, r3
   192cc:	181b      	adds	r3, r3, r0
   192ce:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   192d0:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   192d2:	1df9      	adds	r1, r7, #7
   192d4:	7809      	ldrb	r1, [r1, #0]
   192d6:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   192d8:	b289      	uxth	r1, r1
   192da:	434b      	muls	r3, r1
   192dc:	b29b      	uxth	r3, r3
   192de:	18d3      	adds	r3, r2, r3
   192e0:	b29b      	uxth	r3, r3
   192e2:	e004      	b.n	192ee <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   192e4:	4b08      	ldr	r3, [pc, #32]	; (19308 <uiIndexOfObject+0xd4>)
   192e6:	0018      	movs	r0, r3
   192e8:	4b04      	ldr	r3, [pc, #16]	; (192fc <uiIndexOfObject+0xc8>)
   192ea:	4798      	blx	r3
	return 0;
   192ec:	2300      	movs	r3, #0
}
   192ee:	0018      	movs	r0, r3
   192f0:	46bd      	mov	sp, r7
   192f2:	b002      	add	sp, #8
   192f4:	bd80      	pop	{r7, pc}
   192f6:	46c0      	nop			; (mov r8, r8)
   192f8:	000379c4 	.word	0x000379c4
   192fc:	00019629 	.word	0x00019629
   19300:	20000c74 	.word	0x20000c74
   19304:	00037a04 	.word	0x00037a04
   19308:	00037a44 	.word	0x00037a44

0001930c <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   1930c:	b580      	push	{r7, lr}
   1930e:	b088      	sub	sp, #32
   19310:	af00      	add	r7, sp, #0
   19312:	0002      	movs	r2, r0
   19314:	1dfb      	adds	r3, r7, #7
   19316:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   19318:	4b5a      	ldr	r3, [pc, #360]	; (19484 <prvTraceGetObjectHandle+0x178>)
   1931a:	681b      	ldr	r3, [r3, #0]
   1931c:	2b00      	cmp	r3, #0
   1931e:	d105      	bne.n	1932c <prvTraceGetObjectHandle+0x20>
   19320:	4b59      	ldr	r3, [pc, #356]	; (19488 <prvTraceGetObjectHandle+0x17c>)
   19322:	0018      	movs	r0, r3
   19324:	4b59      	ldr	r3, [pc, #356]	; (1948c <prvTraceGetObjectHandle+0x180>)
   19326:	4798      	blx	r3
   19328:	2300      	movs	r3, #0
   1932a:	e0a7      	b.n	1947c <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1932c:	1dfb      	adds	r3, r7, #7
   1932e:	781b      	ldrb	r3, [r3, #0]
   19330:	2b08      	cmp	r3, #8
   19332:	d905      	bls.n	19340 <prvTraceGetObjectHandle+0x34>
   19334:	4b56      	ldr	r3, [pc, #344]	; (19490 <prvTraceGetObjectHandle+0x184>)
   19336:	0018      	movs	r0, r3
   19338:	4b54      	ldr	r3, [pc, #336]	; (1948c <prvTraceGetObjectHandle+0x180>)
   1933a:	4798      	blx	r3
   1933c:	2300      	movs	r3, #0
   1933e:	e09d      	b.n	1947c <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19340:	f3ef 8310 	mrs	r3, PRIMASK
   19344:	60fb      	str	r3, [r7, #12]
  return(result);
   19346:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   19348:	61bb      	str	r3, [r7, #24]
   1934a:	2301      	movs	r3, #1
   1934c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1934e:	693b      	ldr	r3, [r7, #16]
   19350:	f383 8810 	msr	PRIMASK, r3
   19354:	4b4f      	ldr	r3, [pc, #316]	; (19494 <prvTraceGetObjectHandle+0x188>)
   19356:	681b      	ldr	r3, [r3, #0]
   19358:	1c5a      	adds	r2, r3, #1
   1935a:	4b4e      	ldr	r3, [pc, #312]	; (19494 <prvTraceGetObjectHandle+0x188>)
   1935c:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   1935e:	1dfb      	adds	r3, r7, #7
   19360:	781a      	ldrb	r2, [r3, #0]
   19362:	4b4d      	ldr	r3, [pc, #308]	; (19498 <prvTraceGetObjectHandle+0x18c>)
   19364:	0052      	lsls	r2, r2, #1
   19366:	5ad3      	ldrh	r3, [r2, r3]
   19368:	001a      	movs	r2, r3
   1936a:	4b4c      	ldr	r3, [pc, #304]	; (1949c <prvTraceGetObjectHandle+0x190>)
   1936c:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   1936e:	4b4b      	ldr	r3, [pc, #300]	; (1949c <prvTraceGetObjectHandle+0x190>)
   19370:	681b      	ldr	r3, [r3, #0]
   19372:	4a49      	ldr	r2, [pc, #292]	; (19498 <prvTraceGetObjectHandle+0x18c>)
   19374:	2148      	movs	r1, #72	; 0x48
   19376:	18d3      	adds	r3, r2, r3
   19378:	185b      	adds	r3, r3, r1
   1937a:	781b      	ldrb	r3, [r3, #0]
   1937c:	2b00      	cmp	r3, #0
   1937e:	d117      	bne.n	193b0 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   19380:	4b46      	ldr	r3, [pc, #280]	; (1949c <prvTraceGetObjectHandle+0x190>)
   19382:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   19384:	4b45      	ldr	r3, [pc, #276]	; (1949c <prvTraceGetObjectHandle+0x190>)
   19386:	681b      	ldr	r3, [r3, #0]
   19388:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   1938a:	1dfb      	adds	r3, r7, #7
   1938c:	781b      	ldrb	r3, [r3, #0]
   1938e:	4842      	ldr	r0, [pc, #264]	; (19498 <prvTraceGetObjectHandle+0x18c>)
   19390:	3308      	adds	r3, #8
   19392:	005b      	lsls	r3, r3, #1
   19394:	18c3      	adds	r3, r0, r3
   19396:	3302      	adds	r3, #2
   19398:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1939a:	b2db      	uxtb	r3, r3
   1939c:	1acb      	subs	r3, r1, r3
   1939e:	b2db      	uxtb	r3, r3
   193a0:	3301      	adds	r3, #1
   193a2:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   193a4:	4b3c      	ldr	r3, [pc, #240]	; (19498 <prvTraceGetObjectHandle+0x18c>)
   193a6:	2148      	movs	r1, #72	; 0x48
   193a8:	189b      	adds	r3, r3, r2
   193aa:	185b      	adds	r3, r3, r1
   193ac:	1c02      	adds	r2, r0, #0
   193ae:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   193b0:	4b3a      	ldr	r3, [pc, #232]	; (1949c <prvTraceGetObjectHandle+0x190>)
   193b2:	681a      	ldr	r2, [r3, #0]
   193b4:	231f      	movs	r3, #31
   193b6:	18fb      	adds	r3, r7, r3
   193b8:	4937      	ldr	r1, [pc, #220]	; (19498 <prvTraceGetObjectHandle+0x18c>)
   193ba:	2048      	movs	r0, #72	; 0x48
   193bc:	188a      	adds	r2, r1, r2
   193be:	1812      	adds	r2, r2, r0
   193c0:	7812      	ldrb	r2, [r2, #0]
   193c2:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   193c4:	1dfb      	adds	r3, r7, #7
   193c6:	781a      	ldrb	r2, [r3, #0]
   193c8:	4b33      	ldr	r3, [pc, #204]	; (19498 <prvTraceGetObjectHandle+0x18c>)
   193ca:	0052      	lsls	r2, r2, #1
   193cc:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   193ce:	1dfb      	adds	r3, r7, #7
   193d0:	781b      	ldrb	r3, [r3, #0]
   193d2:	4931      	ldr	r1, [pc, #196]	; (19498 <prvTraceGetObjectHandle+0x18c>)
   193d4:	3310      	adds	r3, #16
   193d6:	005b      	lsls	r3, r3, #1
   193d8:	18cb      	adds	r3, r1, r3
   193da:	3304      	adds	r3, #4
   193dc:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   193de:	429a      	cmp	r2, r3
   193e0:	d90d      	bls.n	193fe <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   193e2:	1dfb      	adds	r3, r7, #7
   193e4:	781b      	ldrb	r3, [r3, #0]
   193e6:	0018      	movs	r0, r3
   193e8:	4b2d      	ldr	r3, [pc, #180]	; (194a0 <prvTraceGetObjectHandle+0x194>)
   193ea:	4798      	blx	r3
   193ec:	0003      	movs	r3, r0
   193ee:	0018      	movs	r0, r3
   193f0:	4b26      	ldr	r3, [pc, #152]	; (1948c <prvTraceGetObjectHandle+0x180>)
   193f2:	4798      	blx	r3
		handle = 0;
   193f4:	231f      	movs	r3, #31
   193f6:	18fb      	adds	r3, r7, r3
   193f8:	2200      	movs	r2, #0
   193fa:	701a      	strb	r2, [r3, #0]
   193fc:	e031      	b.n	19462 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   193fe:	1dfb      	adds	r3, r7, #7
   19400:	781b      	ldrb	r3, [r3, #0]
   19402:	4a25      	ldr	r2, [pc, #148]	; (19498 <prvTraceGetObjectHandle+0x18c>)
   19404:	0059      	lsls	r1, r3, #1
   19406:	5a8a      	ldrh	r2, [r1, r2]
   19408:	3201      	adds	r2, #1
   1940a:	b291      	uxth	r1, r2
   1940c:	4a22      	ldr	r2, [pc, #136]	; (19498 <prvTraceGetObjectHandle+0x18c>)
   1940e:	005b      	lsls	r3, r3, #1
   19410:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   19412:	1dfb      	adds	r3, r7, #7
   19414:	781a      	ldrb	r2, [r3, #0]
   19416:	4b20      	ldr	r3, [pc, #128]	; (19498 <prvTraceGetObjectHandle+0x18c>)
   19418:	0052      	lsls	r2, r2, #1
   1941a:	5ad3      	ldrh	r3, [r2, r3]
   1941c:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   1941e:	1dfb      	adds	r3, r7, #7
   19420:	781b      	ldrb	r3, [r3, #0]
   19422:	4a1d      	ldr	r2, [pc, #116]	; (19498 <prvTraceGetObjectHandle+0x18c>)
   19424:	3308      	adds	r3, #8
   19426:	005b      	lsls	r3, r3, #1
   19428:	18d3      	adds	r3, r2, r3
   1942a:	3302      	adds	r3, #2
   1942c:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1942e:	1acb      	subs	r3, r1, r3
   19430:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   19432:	1dfb      	adds	r3, r7, #7
   19434:	781b      	ldrb	r3, [r3, #0]
   19436:	4a18      	ldr	r2, [pc, #96]	; (19498 <prvTraceGetObjectHandle+0x18c>)
   19438:	3318      	adds	r3, #24
   1943a:	005b      	lsls	r3, r3, #1
   1943c:	18d3      	adds	r3, r2, r3
   1943e:	3306      	adds	r3, #6
   19440:	881b      	ldrh	r3, [r3, #0]
   19442:	001a      	movs	r2, r3
		if (hndCount >
   19444:	697b      	ldr	r3, [r7, #20]
   19446:	429a      	cmp	r2, r3
   19448:	da0b      	bge.n	19462 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1944a:	1dfb      	adds	r3, r7, #7
   1944c:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   1944e:	697a      	ldr	r2, [r7, #20]
   19450:	b2d2      	uxtb	r2, r2
   19452:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   19454:	4a10      	ldr	r2, [pc, #64]	; (19498 <prvTraceGetObjectHandle+0x18c>)
   19456:	3318      	adds	r3, #24
   19458:	005b      	lsls	r3, r3, #1
   1945a:	18d3      	adds	r3, r2, r3
   1945c:	3306      	adds	r3, #6
   1945e:	1c0a      	adds	r2, r1, #0
   19460:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   19462:	4b0c      	ldr	r3, [pc, #48]	; (19494 <prvTraceGetObjectHandle+0x188>)
   19464:	681b      	ldr	r3, [r3, #0]
   19466:	1e5a      	subs	r2, r3, #1
   19468:	4b0a      	ldr	r3, [pc, #40]	; (19494 <prvTraceGetObjectHandle+0x188>)
   1946a:	601a      	str	r2, [r3, #0]
   1946c:	69bb      	ldr	r3, [r7, #24]
   1946e:	60bb      	str	r3, [r7, #8]
   19470:	68bb      	ldr	r3, [r7, #8]
   19472:	f383 8810 	msr	PRIMASK, r3

	return handle;
   19476:	231f      	movs	r3, #31
   19478:	18fb      	adds	r3, r7, r3
   1947a:	781b      	ldrb	r3, [r3, #0]
}
   1947c:	0018      	movs	r0, r3
   1947e:	46bd      	mov	sp, r7
   19480:	b008      	add	sp, #32
   19482:	bd80      	pop	{r7, pc}
   19484:	20000c74 	.word	0x20000c74
   19488:	00036ea4 	.word	0x00036ea4
   1948c:	00019629 	.word	0x00019629
   19490:	00037a84 	.word	0x00037a84
   19494:	20000bcc 	.word	0x20000bcc
   19498:	20000be4 	.word	0x20000be4
   1949c:	20000c78 	.word	0x20000c78
   194a0:	00018349 	.word	0x00018349

000194a4 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   194a4:	b590      	push	{r4, r7, lr}
   194a6:	b085      	sub	sp, #20
   194a8:	af00      	add	r7, sp, #0
   194aa:	0002      	movs	r2, r0
   194ac:	1dfb      	adds	r3, r7, #7
   194ae:	701a      	strb	r2, [r3, #0]
   194b0:	1dbb      	adds	r3, r7, #6
   194b2:	1c0a      	adds	r2, r1, #0
   194b4:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   194b6:	230e      	movs	r3, #14
   194b8:	18fc      	adds	r4, r7, r3
   194ba:	1dfb      	adds	r3, r7, #7
   194bc:	781a      	ldrb	r2, [r3, #0]
   194be:	1dbb      	adds	r3, r7, #6
   194c0:	781b      	ldrb	r3, [r3, #0]
   194c2:	0011      	movs	r1, r2
   194c4:	0018      	movs	r0, r3
   194c6:	4b09      	ldr	r3, [pc, #36]	; (194ec <prvMarkObjectAsUsed+0x48>)
   194c8:	4798      	blx	r3
   194ca:	0003      	movs	r3, r0
   194cc:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   194ce:	4b08      	ldr	r3, [pc, #32]	; (194f0 <prvMarkObjectAsUsed+0x4c>)
   194d0:	681a      	ldr	r2, [r3, #0]
   194d2:	230e      	movs	r3, #14
   194d4:	18fb      	adds	r3, r7, r3
   194d6:	881b      	ldrh	r3, [r3, #0]
   194d8:	219c      	movs	r1, #156	; 0x9c
   194da:	18d3      	adds	r3, r2, r3
   194dc:	185b      	adds	r3, r3, r1
   194de:	2201      	movs	r2, #1
   194e0:	701a      	strb	r2, [r3, #0]
}
   194e2:	46c0      	nop			; (mov r8, r8)
   194e4:	46bd      	mov	sp, r7
   194e6:	b005      	add	sp, #20
   194e8:	bd90      	pop	{r4, r7, pc}
   194ea:	46c0      	nop			; (mov r8, r8)
   194ec:	00019235 	.word	0x00019235
   194f0:	20000c74 	.word	0x20000c74

000194f4 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   194f4:	b580      	push	{r7, lr}
   194f6:	b086      	sub	sp, #24
   194f8:	af00      	add	r7, sp, #0
   194fa:	60f8      	str	r0, [r7, #12]
   194fc:	60b9      	str	r1, [r7, #8]
   194fe:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   19500:	2300      	movs	r3, #0
   19502:	617b      	str	r3, [r7, #20]
   19504:	e010      	b.n	19528 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   19506:	68fa      	ldr	r2, [r7, #12]
   19508:	697b      	ldr	r3, [r7, #20]
   1950a:	18d3      	adds	r3, r2, r3
   1950c:	68b9      	ldr	r1, [r7, #8]
   1950e:	697a      	ldr	r2, [r7, #20]
   19510:	188a      	adds	r2, r1, r2
   19512:	7812      	ldrb	r2, [r2, #0]
   19514:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   19516:	68ba      	ldr	r2, [r7, #8]
   19518:	697b      	ldr	r3, [r7, #20]
   1951a:	18d3      	adds	r3, r2, r3
   1951c:	781b      	ldrb	r3, [r3, #0]
   1951e:	2b00      	cmp	r3, #0
   19520:	d007      	beq.n	19532 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   19522:	697b      	ldr	r3, [r7, #20]
   19524:	3301      	adds	r3, #1
   19526:	617b      	str	r3, [r7, #20]
   19528:	697a      	ldr	r2, [r7, #20]
   1952a:	687b      	ldr	r3, [r7, #4]
   1952c:	429a      	cmp	r2, r3
   1952e:	d3ea      	bcc.n	19506 <prvStrncpy+0x12>
			break;
	}
}
   19530:	e000      	b.n	19534 <prvStrncpy+0x40>
			break;
   19532:	46c0      	nop			; (mov r8, r8)
}
   19534:	46c0      	nop			; (mov r8, r8)
   19536:	46bd      	mov	sp, r7
   19538:	b006      	add	sp, #24
   1953a:	bd80      	pop	{r7, pc}

0001953c <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   1953c:	b580      	push	{r7, lr}
   1953e:	b082      	sub	sp, #8
   19540:	af00      	add	r7, sp, #0
   19542:	603a      	str	r2, [r7, #0]
   19544:	1dfb      	adds	r3, r7, #7
   19546:	1c02      	adds	r2, r0, #0
   19548:	701a      	strb	r2, [r3, #0]
   1954a:	1dbb      	adds	r3, r7, #6
   1954c:	1c0a      	adds	r2, r1, #0
   1954e:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   19550:	683b      	ldr	r3, [r7, #0]
   19552:	2b00      	cmp	r3, #0
   19554:	d104      	bne.n	19560 <prvTraceSetObjectName+0x24>
   19556:	4b2a      	ldr	r3, [pc, #168]	; (19600 <prvTraceSetObjectName+0xc4>)
   19558:	0018      	movs	r0, r3
   1955a:	4b2a      	ldr	r3, [pc, #168]	; (19604 <prvTraceSetObjectName+0xc8>)
   1955c:	4798      	blx	r3
   1955e:	e04b      	b.n	195f8 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   19560:	1dfb      	adds	r3, r7, #7
   19562:	781b      	ldrb	r3, [r3, #0]
   19564:	2b08      	cmp	r3, #8
   19566:	d904      	bls.n	19572 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   19568:	4b27      	ldr	r3, [pc, #156]	; (19608 <prvTraceSetObjectName+0xcc>)
   1956a:	0018      	movs	r0, r3
   1956c:	4b25      	ldr	r3, [pc, #148]	; (19604 <prvTraceSetObjectName+0xc8>)
   1956e:	4798      	blx	r3
		return;
   19570:	e042      	b.n	195f8 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   19572:	1dbb      	adds	r3, r7, #6
   19574:	781b      	ldrb	r3, [r3, #0]
   19576:	2b00      	cmp	r3, #0
   19578:	d104      	bne.n	19584 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   1957a:	4b24      	ldr	r3, [pc, #144]	; (1960c <prvTraceSetObjectName+0xd0>)
   1957c:	0018      	movs	r0, r3
   1957e:	4b21      	ldr	r3, [pc, #132]	; (19604 <prvTraceSetObjectName+0xc8>)
   19580:	4798      	blx	r3
		return;
   19582:	e039      	b.n	195f8 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   19584:	4b22      	ldr	r3, [pc, #136]	; (19610 <prvTraceSetObjectName+0xd4>)
   19586:	681a      	ldr	r2, [r3, #0]
   19588:	1dfb      	adds	r3, r7, #7
   1958a:	781b      	ldrb	r3, [r3, #0]
   1958c:	2164      	movs	r1, #100	; 0x64
   1958e:	18d3      	adds	r3, r2, r3
   19590:	185b      	adds	r3, r3, r1
   19592:	781b      	ldrb	r3, [r3, #0]
   19594:	1dba      	adds	r2, r7, #6
   19596:	7812      	ldrb	r2, [r2, #0]
   19598:	429a      	cmp	r2, r3
   1959a:	d909      	bls.n	195b0 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1959c:	1dfb      	adds	r3, r7, #7
   1959e:	781b      	ldrb	r3, [r3, #0]
   195a0:	0018      	movs	r0, r3
   195a2:	4b1c      	ldr	r3, [pc, #112]	; (19614 <prvTraceSetObjectName+0xd8>)
   195a4:	4798      	blx	r3
   195a6:	0003      	movs	r3, r0
   195a8:	0018      	movs	r0, r3
   195aa:	4b16      	ldr	r3, [pc, #88]	; (19604 <prvTraceSetObjectName+0xc8>)
   195ac:	4798      	blx	r3
   195ae:	e023      	b.n	195f8 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   195b0:	1dfb      	adds	r3, r7, #7
   195b2:	781a      	ldrb	r2, [r3, #0]
   195b4:	1dbb      	adds	r3, r7, #6
   195b6:	781b      	ldrb	r3, [r3, #0]
   195b8:	0011      	movs	r1, r2
   195ba:	0018      	movs	r0, r3
   195bc:	4b16      	ldr	r3, [pc, #88]	; (19618 <prvTraceSetObjectName+0xdc>)
   195be:	4798      	blx	r3
   195c0:	0003      	movs	r3, r0
   195c2:	001a      	movs	r2, r3
   195c4:	4b15      	ldr	r3, [pc, #84]	; (1961c <prvTraceSetObjectName+0xe0>)
   195c6:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   195c8:	4b15      	ldr	r3, [pc, #84]	; (19620 <prvTraceSetObjectName+0xe4>)
   195ca:	681b      	ldr	r3, [r3, #0]
   195cc:	2b00      	cmp	r3, #0
   195ce:	d113      	bne.n	195f8 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   195d0:	4b0f      	ldr	r3, [pc, #60]	; (19610 <prvTraceSetObjectName+0xd4>)
   195d2:	681a      	ldr	r2, [r3, #0]
   195d4:	4b11      	ldr	r3, [pc, #68]	; (1961c <prvTraceSetObjectName+0xe0>)
   195d6:	881b      	ldrh	r3, [r3, #0]
   195d8:	3398      	adds	r3, #152	; 0x98
   195da:	18d3      	adds	r3, r2, r3
   195dc:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   195de:	4b0c      	ldr	r3, [pc, #48]	; (19610 <prvTraceSetObjectName+0xd4>)
   195e0:	681a      	ldr	r2, [r3, #0]
   195e2:	1dfb      	adds	r3, r7, #7
   195e4:	781b      	ldrb	r3, [r3, #0]
   195e6:	2170      	movs	r1, #112	; 0x70
   195e8:	18d3      	adds	r3, r2, r3
   195ea:	185b      	adds	r3, r3, r1
   195ec:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   195ee:	001a      	movs	r2, r3
   195f0:	683b      	ldr	r3, [r7, #0]
   195f2:	0019      	movs	r1, r3
   195f4:	4b0b      	ldr	r3, [pc, #44]	; (19624 <prvTraceSetObjectName+0xe8>)
   195f6:	4798      	blx	r3
		}
	}
}
   195f8:	46bd      	mov	sp, r7
   195fa:	b002      	add	sp, #8
   195fc:	bd80      	pop	{r7, pc}
   195fe:	46c0      	nop			; (mov r8, r8)
   19600:	00037b88 	.word	0x00037b88
   19604:	00019629 	.word	0x00019629
   19608:	00037bbc 	.word	0x00037bbc
   1960c:	00037bec 	.word	0x00037bec
   19610:	20000c74 	.word	0x20000c74
   19614:	00018349 	.word	0x00018349
   19618:	00019235 	.word	0x00019235
   1961c:	20000c7c 	.word	0x20000c7c
   19620:	20000bd4 	.word	0x20000bd4
   19624:	000194f5 	.word	0x000194f5

00019628 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   19628:	b580      	push	{r7, lr}
   1962a:	b082      	sub	sp, #8
   1962c:	af00      	add	r7, sp, #0
   1962e:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   19630:	4b11      	ldr	r3, [pc, #68]	; (19678 <prvTraceError+0x50>)
   19632:	681b      	ldr	r3, [r3, #0]
   19634:	2b00      	cmp	r3, #0
   19636:	d001      	beq.n	1963c <prvTraceError+0x14>
	{
		vTraceStop();
   19638:	4b10      	ldr	r3, [pc, #64]	; (1967c <prvTraceError+0x54>)
   1963a:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   1963c:	4b10      	ldr	r3, [pc, #64]	; (19680 <prvTraceError+0x58>)
   1963e:	681b      	ldr	r3, [r3, #0]
   19640:	2b00      	cmp	r3, #0
   19642:	d115      	bne.n	19670 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   19644:	4b0e      	ldr	r3, [pc, #56]	; (19680 <prvTraceError+0x58>)
   19646:	687a      	ldr	r2, [r7, #4]
   19648:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   1964a:	4b0b      	ldr	r3, [pc, #44]	; (19678 <prvTraceError+0x50>)
   1964c:	681b      	ldr	r3, [r3, #0]
   1964e:	2b00      	cmp	r3, #0
   19650:	d00e      	beq.n	19670 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   19652:	4b09      	ldr	r3, [pc, #36]	; (19678 <prvTraceError+0x50>)
   19654:	681b      	ldr	r3, [r3, #0]
   19656:	4a0b      	ldr	r2, [pc, #44]	; (19684 <prvTraceError+0x5c>)
   19658:	1898      	adds	r0, r3, r2
   1965a:	4b09      	ldr	r3, [pc, #36]	; (19680 <prvTraceError+0x58>)
   1965c:	681b      	ldr	r3, [r3, #0]
   1965e:	2250      	movs	r2, #80	; 0x50
   19660:	0019      	movs	r1, r3
   19662:	4b09      	ldr	r3, [pc, #36]	; (19688 <prvTraceError+0x60>)
   19664:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   19666:	4b04      	ldr	r3, [pc, #16]	; (19678 <prvTraceError+0x50>)
   19668:	681b      	ldr	r3, [r3, #0]
   1966a:	4a08      	ldr	r2, [pc, #32]	; (1968c <prvTraceError+0x64>)
   1966c:	2101      	movs	r1, #1
   1966e:	5099      	str	r1, [r3, r2]
		}
	}
}
   19670:	46c0      	nop			; (mov r8, r8)
   19672:	46bd      	mov	sp, r7
   19674:	b002      	add	sp, #8
   19676:	bd80      	pop	{r7, pc}
   19678:	20000c74 	.word	0x20000c74
   1967c:	000184ed 	.word	0x000184ed
   19680:	20000bd4 	.word	0x20000bd4
   19684:	000006bc 	.word	0x000006bc
   19688:	000194f5 	.word	0x000194f5
   1968c:	000006b4 	.word	0x000006b4

00019690 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   19690:	b580      	push	{r7, lr}
   19692:	b086      	sub	sp, #24
   19694:	af00      	add	r7, sp, #0
   19696:	0002      	movs	r2, r0
   19698:	1dfb      	adds	r3, r7, #7
   1969a:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   1969c:	2300      	movs	r3, #0
   1969e:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   196a0:	2300      	movs	r3, #0
   196a2:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   196a4:	1dfb      	adds	r3, r7, #7
   196a6:	781b      	ldrb	r3, [r3, #0]
   196a8:	2b00      	cmp	r3, #0
   196aa:	d000      	beq.n	196ae <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   196ac:	e089      	b.n	197c2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   196ae:	4b49      	ldr	r3, [pc, #292]	; (197d4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   196b0:	0018      	movs	r0, r3
   196b2:	4b49      	ldr	r3, [pc, #292]	; (197d8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   196b4:	4798      	blx	r3
   196b6:	e08a      	b.n	197ce <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   196b8:	4b48      	ldr	r3, [pc, #288]	; (197dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   196ba:	681b      	ldr	r3, [r3, #0]
   196bc:	69da      	ldr	r2, [r3, #28]
   196be:	697b      	ldr	r3, [r7, #20]
   196c0:	18d3      	adds	r3, r2, r3
   196c2:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   196c4:	4b45      	ldr	r3, [pc, #276]	; (197dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   196c6:	6819      	ldr	r1, [r3, #0]
   196c8:	693b      	ldr	r3, [r7, #16]
   196ca:	009a      	lsls	r2, r3, #2
   196cc:	23e2      	movs	r3, #226	; 0xe2
   196ce:	00db      	lsls	r3, r3, #3
   196d0:	188a      	adds	r2, r1, r2
   196d2:	18d3      	adds	r3, r2, r3
   196d4:	781b      	ldrb	r3, [r3, #0]
   196d6:	2b98      	cmp	r3, #152	; 0x98
   196d8:	d934      	bls.n	19744 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   196da:	4b40      	ldr	r3, [pc, #256]	; (197dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   196dc:	6819      	ldr	r1, [r3, #0]
   196de:	693b      	ldr	r3, [r7, #16]
   196e0:	009a      	lsls	r2, r3, #2
   196e2:	23e2      	movs	r3, #226	; 0xe2
   196e4:	00db      	lsls	r3, r3, #3
   196e6:	188a      	adds	r2, r1, r2
   196e8:	18d3      	adds	r3, r2, r3
   196ea:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   196ec:	2ba7      	cmp	r3, #167	; 0xa7
   196ee:	d829      	bhi.n	19744 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   196f0:	4b3a      	ldr	r3, [pc, #232]	; (197dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   196f2:	6819      	ldr	r1, [r3, #0]
   196f4:	693b      	ldr	r3, [r7, #16]
   196f6:	009a      	lsls	r2, r3, #2
   196f8:	23e2      	movs	r3, #226	; 0xe2
   196fa:	00db      	lsls	r3, r3, #3
   196fc:	188a      	adds	r2, r1, r2
   196fe:	18d3      	adds	r3, r2, r3
   19700:	781a      	ldrb	r2, [r3, #0]
   19702:	230f      	movs	r3, #15
   19704:	18fb      	adds	r3, r7, r3
   19706:	3268      	adds	r2, #104	; 0x68
   19708:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   1970a:	230f      	movs	r3, #15
   1970c:	18fb      	adds	r3, r7, r3
   1970e:	781a      	ldrb	r2, [r3, #0]
   19710:	693b      	ldr	r3, [r7, #16]
   19712:	18d2      	adds	r2, r2, r3
   19714:	4b31      	ldr	r3, [pc, #196]	; (197dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19716:	681b      	ldr	r3, [r3, #0]
   19718:	699b      	ldr	r3, [r3, #24]
   1971a:	429a      	cmp	r2, r3
   1971c:	d24d      	bcs.n	197ba <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   1971e:	4b2f      	ldr	r3, [pc, #188]	; (197dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19720:	681a      	ldr	r2, [r3, #0]
   19722:	693b      	ldr	r3, [r7, #16]
   19724:	009b      	lsls	r3, r3, #2
   19726:	21e2      	movs	r1, #226	; 0xe2
   19728:	00c9      	lsls	r1, r1, #3
   1972a:	468c      	mov	ip, r1
   1972c:	4463      	add	r3, ip
   1972e:	18d0      	adds	r0, r2, r3
   19730:	230f      	movs	r3, #15
   19732:	18fb      	adds	r3, r7, r3
   19734:	781b      	ldrb	r3, [r3, #0]
   19736:	3301      	adds	r3, #1
   19738:	009b      	lsls	r3, r3, #2
   1973a:	001a      	movs	r2, r3
   1973c:	2100      	movs	r1, #0
   1973e:	4b28      	ldr	r3, [pc, #160]	; (197e0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   19740:	4798      	blx	r3
		{
   19742:	e03a      	b.n	197ba <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   19744:	4b25      	ldr	r3, [pc, #148]	; (197dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19746:	6819      	ldr	r1, [r3, #0]
   19748:	693b      	ldr	r3, [r7, #16]
   1974a:	009a      	lsls	r2, r3, #2
   1974c:	23e2      	movs	r3, #226	; 0xe2
   1974e:	00db      	lsls	r3, r3, #3
   19750:	188a      	adds	r2, r1, r2
   19752:	18d3      	adds	r3, r2, r3
   19754:	781b      	ldrb	r3, [r3, #0]
   19756:	2b01      	cmp	r3, #1
   19758:	d130      	bne.n	197bc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   1975a:	693b      	ldr	r3, [r7, #16]
   1975c:	1c5a      	adds	r2, r3, #1
   1975e:	4b1f      	ldr	r3, [pc, #124]	; (197dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19760:	681b      	ldr	r3, [r3, #0]
   19762:	699b      	ldr	r3, [r3, #24]
   19764:	429a      	cmp	r2, r3
   19766:	d20e      	bcs.n	19786 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   19768:	4b1c      	ldr	r3, [pc, #112]	; (197dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1976a:	681a      	ldr	r2, [r3, #0]
   1976c:	693b      	ldr	r3, [r7, #16]
   1976e:	009b      	lsls	r3, r3, #2
   19770:	21e2      	movs	r1, #226	; 0xe2
   19772:	00c9      	lsls	r1, r1, #3
   19774:	468c      	mov	ip, r1
   19776:	4463      	add	r3, ip
   19778:	18d3      	adds	r3, r2, r3
   1977a:	2208      	movs	r2, #8
   1977c:	2100      	movs	r1, #0
   1977e:	0018      	movs	r0, r3
   19780:	4b17      	ldr	r3, [pc, #92]	; (197e0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   19782:	4798      	blx	r3
   19784:	e01a      	b.n	197bc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   19786:	4b15      	ldr	r3, [pc, #84]	; (197dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19788:	681b      	ldr	r3, [r3, #0]
   1978a:	22e2      	movs	r2, #226	; 0xe2
   1978c:	00d2      	lsls	r2, r2, #3
   1978e:	4694      	mov	ip, r2
   19790:	4463      	add	r3, ip
   19792:	2204      	movs	r2, #4
   19794:	2100      	movs	r1, #0
   19796:	0018      	movs	r0, r3
   19798:	4b11      	ldr	r3, [pc, #68]	; (197e0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1979a:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   1979c:	4b0f      	ldr	r3, [pc, #60]	; (197dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1979e:	681a      	ldr	r2, [r3, #0]
   197a0:	693b      	ldr	r3, [r7, #16]
   197a2:	009b      	lsls	r3, r3, #2
   197a4:	21e2      	movs	r1, #226	; 0xe2
   197a6:	00c9      	lsls	r1, r1, #3
   197a8:	468c      	mov	ip, r1
   197aa:	4463      	add	r3, ip
   197ac:	18d3      	adds	r3, r2, r3
   197ae:	2204      	movs	r2, #4
   197b0:	2100      	movs	r1, #0
   197b2:	0018      	movs	r0, r3
   197b4:	4b0a      	ldr	r3, [pc, #40]	; (197e0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   197b6:	4798      	blx	r3
   197b8:	e000      	b.n	197bc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   197ba:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   197bc:	697b      	ldr	r3, [r7, #20]
   197be:	3301      	adds	r3, #1
   197c0:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   197c2:	1dfb      	adds	r3, r7, #7
   197c4:	781a      	ldrb	r2, [r3, #0]
   197c6:	697b      	ldr	r3, [r7, #20]
   197c8:	429a      	cmp	r2, r3
   197ca:	d900      	bls.n	197ce <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   197cc:	e774      	b.n	196b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   197ce:	46bd      	mov	sp, r7
   197d0:	b006      	add	sp, #24
   197d2:	bd80      	pop	{r7, pc}
   197d4:	00037c4c 	.word	0x00037c4c
   197d8:	00019629 	.word	0x00019629
   197dc:	20000c74 	.word	0x20000c74
   197e0:	0003462f 	.word	0x0003462f

000197e4 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   197e4:	b580      	push	{r7, lr}
   197e6:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   197e8:	4b12      	ldr	r3, [pc, #72]	; (19834 <prvTraceUpdateCounters+0x50>)
   197ea:	681b      	ldr	r3, [r3, #0]
   197ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   197ee:	2b00      	cmp	r3, #0
   197f0:	d01c      	beq.n	1982c <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   197f2:	4b10      	ldr	r3, [pc, #64]	; (19834 <prvTraceUpdateCounters+0x50>)
   197f4:	681b      	ldr	r3, [r3, #0]
   197f6:	695a      	ldr	r2, [r3, #20]
   197f8:	3201      	adds	r2, #1
   197fa:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   197fc:	4b0d      	ldr	r3, [pc, #52]	; (19834 <prvTraceUpdateCounters+0x50>)
   197fe:	681b      	ldr	r3, [r3, #0]
   19800:	69da      	ldr	r2, [r3, #28]
   19802:	3201      	adds	r2, #1
   19804:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   19806:	4b0b      	ldr	r3, [pc, #44]	; (19834 <prvTraceUpdateCounters+0x50>)
   19808:	681b      	ldr	r3, [r3, #0]
   1980a:	69da      	ldr	r2, [r3, #28]
   1980c:	232c      	movs	r3, #44	; 0x2c
   1980e:	33ff      	adds	r3, #255	; 0xff
   19810:	429a      	cmp	r2, r3
   19812:	d907      	bls.n	19824 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   19814:	4b07      	ldr	r3, [pc, #28]	; (19834 <prvTraceUpdateCounters+0x50>)
   19816:	681b      	ldr	r3, [r3, #0]
   19818:	2201      	movs	r2, #1
   1981a:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   1981c:	4b05      	ldr	r3, [pc, #20]	; (19834 <prvTraceUpdateCounters+0x50>)
   1981e:	681b      	ldr	r3, [r3, #0]
   19820:	2200      	movs	r2, #0
   19822:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   19824:	2001      	movs	r0, #1
   19826:	4b04      	ldr	r3, [pc, #16]	; (19838 <prvTraceUpdateCounters+0x54>)
   19828:	4798      	blx	r3
   1982a:	e000      	b.n	1982e <prvTraceUpdateCounters+0x4a>
		return;
   1982c:	46c0      	nop			; (mov r8, r8)
#endif
}
   1982e:	46bd      	mov	sp, r7
   19830:	bd80      	pop	{r7, pc}
   19832:	46c0      	nop			; (mov r8, r8)
   19834:	20000c74 	.word	0x20000c74
   19838:	00019691 	.word	0x00019691

0001983c <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   1983c:	b5b0      	push	{r4, r5, r7, lr}
   1983e:	b086      	sub	sp, #24
   19840:	af00      	add	r7, sp, #0
   19842:	0002      	movs	r2, r0
   19844:	1dbb      	adds	r3, r7, #6
   19846:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   19848:	2300      	movs	r3, #0
   1984a:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   1984c:	2300      	movs	r3, #0
   1984e:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   19850:	2300      	movs	r3, #0
   19852:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   19854:	1dbb      	adds	r3, r7, #6
   19856:	881b      	ldrh	r3, [r3, #0]
   19858:	2bff      	cmp	r3, #255	; 0xff
   1985a:	d00a      	beq.n	19872 <prvTraceGetDTS+0x36>
   1985c:	1dbb      	adds	r3, r7, #6
   1985e:	881b      	ldrh	r3, [r3, #0]
   19860:	4a60      	ldr	r2, [pc, #384]	; (199e4 <prvTraceGetDTS+0x1a8>)
   19862:	4293      	cmp	r3, r2
   19864:	d005      	beq.n	19872 <prvTraceGetDTS+0x36>
   19866:	4b60      	ldr	r3, [pc, #384]	; (199e8 <prvTraceGetDTS+0x1ac>)
   19868:	0018      	movs	r0, r3
   1986a:	4b60      	ldr	r3, [pc, #384]	; (199ec <prvTraceGetDTS+0x1b0>)
   1986c:	4798      	blx	r3
   1986e:	2300      	movs	r3, #0
   19870:	e0b3      	b.n	199da <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   19872:	4b5f      	ldr	r3, [pc, #380]	; (199f0 <prvTraceGetDTS+0x1b4>)
   19874:	681b      	ldr	r3, [r3, #0]
   19876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19878:	2b00      	cmp	r3, #0
   1987a:	d118      	bne.n	198ae <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   1987c:	4b5d      	ldr	r3, [pc, #372]	; (199f4 <prvTraceGetDTS+0x1b8>)
   1987e:	681b      	ldr	r3, [r3, #0]
   19880:	2b00      	cmp	r3, #0
   19882:	d006      	beq.n	19892 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   19884:	4b5a      	ldr	r3, [pc, #360]	; (199f0 <prvTraceGetDTS+0x1b4>)
   19886:	681b      	ldr	r3, [r3, #0]
   19888:	4a5a      	ldr	r2, [pc, #360]	; (199f4 <prvTraceGetDTS+0x1b8>)
   1988a:	6812      	ldr	r2, [r2, #0]
   1988c:	0892      	lsrs	r2, r2, #2
   1988e:	625a      	str	r2, [r3, #36]	; 0x24
   19890:	e00d      	b.n	198ae <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   19892:	4b59      	ldr	r3, [pc, #356]	; (199f8 <prvTraceGetDTS+0x1bc>)
   19894:	681a      	ldr	r2, [r3, #0]
   19896:	4b59      	ldr	r3, [pc, #356]	; (199fc <prvTraceGetDTS+0x1c0>)
   19898:	681b      	ldr	r3, [r3, #0]
   1989a:	429a      	cmp	r2, r3
   1989c:	d007      	beq.n	198ae <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   1989e:	4b54      	ldr	r3, [pc, #336]	; (199f0 <prvTraceGetDTS+0x1b4>)
   198a0:	681c      	ldr	r4, [r3, #0]
   198a2:	2000      	movs	r0, #0
   198a4:	4b56      	ldr	r3, [pc, #344]	; (19a00 <prvTraceGetDTS+0x1c4>)
   198a6:	4798      	blx	r3
   198a8:	0003      	movs	r3, r0
   198aa:	089b      	lsrs	r3, r3, #2
   198ac:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   198ae:	230c      	movs	r3, #12
   198b0:	18fb      	adds	r3, r7, r3
   198b2:	0018      	movs	r0, r3
   198b4:	4b53      	ldr	r3, [pc, #332]	; (19a04 <prvTraceGetDTS+0x1c8>)
   198b6:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   198b8:	68fa      	ldr	r2, [r7, #12]
   198ba:	4b53      	ldr	r3, [pc, #332]	; (19a08 <prvTraceGetDTS+0x1cc>)
   198bc:	681b      	ldr	r3, [r3, #0]
   198be:	1ad3      	subs	r3, r2, r3
   198c0:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   198c2:	68fa      	ldr	r2, [r7, #12]
   198c4:	4b50      	ldr	r3, [pc, #320]	; (19a08 <prvTraceGetDTS+0x1cc>)
   198c6:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   198c8:	4b49      	ldr	r3, [pc, #292]	; (199f0 <prvTraceGetDTS+0x1b4>)
   198ca:	681b      	ldr	r3, [r3, #0]
   198cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   198ce:	2b00      	cmp	r3, #0
   198d0:	d044      	beq.n	1995c <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   198d2:	4b47      	ldr	r3, [pc, #284]	; (199f0 <prvTraceGetDTS+0x1b4>)
   198d4:	681b      	ldr	r3, [r3, #0]
   198d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   198d8:	693b      	ldr	r3, [r7, #16]
   198da:	429a      	cmp	r2, r3
   198dc:	d21e      	bcs.n	1991c <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   198de:	4b44      	ldr	r3, [pc, #272]	; (199f0 <prvTraceGetDTS+0x1b4>)
   198e0:	681c      	ldr	r4, [r3, #0]
   198e2:	4b43      	ldr	r3, [pc, #268]	; (199f0 <prvTraceGetDTS+0x1b4>)
   198e4:	681b      	ldr	r3, [r3, #0]
   198e6:	6add      	ldr	r5, [r3, #44]	; 0x2c
   198e8:	4b41      	ldr	r3, [pc, #260]	; (199f0 <prvTraceGetDTS+0x1b4>)
   198ea:	681b      	ldr	r3, [r3, #0]
   198ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   198ee:	4b47      	ldr	r3, [pc, #284]	; (19a0c <prvTraceGetDTS+0x1d0>)
   198f0:	0011      	movs	r1, r2
   198f2:	6938      	ldr	r0, [r7, #16]
   198f4:	4798      	blx	r3
   198f6:	0003      	movs	r3, r0
   198f8:	18eb      	adds	r3, r5, r3
   198fa:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   198fc:	4b3c      	ldr	r3, [pc, #240]	; (199f0 <prvTraceGetDTS+0x1b4>)
   198fe:	681c      	ldr	r4, [r3, #0]
   19900:	4b3b      	ldr	r3, [pc, #236]	; (199f0 <prvTraceGetDTS+0x1b4>)
   19902:	681b      	ldr	r3, [r3, #0]
   19904:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   19906:	4b3a      	ldr	r3, [pc, #232]	; (199f0 <prvTraceGetDTS+0x1b4>)
   19908:	681b      	ldr	r3, [r3, #0]
   1990a:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1990c:	693a      	ldr	r2, [r7, #16]
   1990e:	4b40      	ldr	r3, [pc, #256]	; (19a10 <prvTraceGetDTS+0x1d4>)
   19910:	0010      	movs	r0, r2
   19912:	4798      	blx	r3
   19914:	000b      	movs	r3, r1
   19916:	18eb      	adds	r3, r5, r3
   19918:	62a3      	str	r3, [r4, #40]	; 0x28
   1991a:	e007      	b.n	1992c <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   1991c:	4b34      	ldr	r3, [pc, #208]	; (199f0 <prvTraceGetDTS+0x1b4>)
   1991e:	681b      	ldr	r3, [r3, #0]
   19920:	4a33      	ldr	r2, [pc, #204]	; (199f0 <prvTraceGetDTS+0x1b4>)
   19922:	6812      	ldr	r2, [r2, #0]
   19924:	6a91      	ldr	r1, [r2, #40]	; 0x28
   19926:	693a      	ldr	r2, [r7, #16]
   19928:	188a      	adds	r2, r1, r2
   1992a:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   1992c:	4b30      	ldr	r3, [pc, #192]	; (199f0 <prvTraceGetDTS+0x1b4>)
   1992e:	681b      	ldr	r3, [r3, #0]
   19930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   19932:	4b2f      	ldr	r3, [pc, #188]	; (199f0 <prvTraceGetDTS+0x1b4>)
   19934:	681b      	ldr	r3, [r3, #0]
   19936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19938:	429a      	cmp	r2, r3
   1993a:	d313      	bcc.n	19964 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   1993c:	4b2c      	ldr	r3, [pc, #176]	; (199f0 <prvTraceGetDTS+0x1b4>)
   1993e:	681b      	ldr	r3, [r3, #0]
   19940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19942:	3201      	adds	r2, #1
   19944:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   19946:	4b2a      	ldr	r3, [pc, #168]	; (199f0 <prvTraceGetDTS+0x1b4>)
   19948:	681b      	ldr	r3, [r3, #0]
   1994a:	4a29      	ldr	r2, [pc, #164]	; (199f0 <prvTraceGetDTS+0x1b4>)
   1994c:	6812      	ldr	r2, [r2, #0]
   1994e:	6a91      	ldr	r1, [r2, #40]	; 0x28
   19950:	4a27      	ldr	r2, [pc, #156]	; (199f0 <prvTraceGetDTS+0x1b4>)
   19952:	6812      	ldr	r2, [r2, #0]
   19954:	6a52      	ldr	r2, [r2, #36]	; 0x24
   19956:	1a8a      	subs	r2, r1, r2
   19958:	629a      	str	r2, [r3, #40]	; 0x28
   1995a:	e003      	b.n	19964 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   1995c:	4b24      	ldr	r3, [pc, #144]	; (199f0 <prvTraceGetDTS+0x1b4>)
   1995e:	681b      	ldr	r3, [r3, #0]
   19960:	68fa      	ldr	r2, [r7, #12]
   19962:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   19964:	1dbb      	adds	r3, r7, #6
   19966:	881a      	ldrh	r2, [r3, #0]
   19968:	693b      	ldr	r3, [r7, #16]
   1996a:	429a      	cmp	r2, r3
   1996c:	d22f      	bcs.n	199ce <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   1996e:	4b29      	ldr	r3, [pc, #164]	; (19a14 <prvTraceGetDTS+0x1d8>)
   19970:	4798      	blx	r3
   19972:	0003      	movs	r3, r0
   19974:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   19976:	697b      	ldr	r3, [r7, #20]
   19978:	2b00      	cmp	r3, #0
   1997a:	d028      	beq.n	199ce <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   1997c:	1dbb      	adds	r3, r7, #6
   1997e:	881b      	ldrh	r3, [r3, #0]
   19980:	4a18      	ldr	r2, [pc, #96]	; (199e4 <prvTraceGetDTS+0x1a8>)
   19982:	4293      	cmp	r3, r2
   19984:	d10b      	bne.n	1999e <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   19986:	697b      	ldr	r3, [r7, #20]
   19988:	22a9      	movs	r2, #169	; 0xa9
   1998a:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   1998c:	693b      	ldr	r3, [r7, #16]
   1998e:	0c1b      	lsrs	r3, r3, #16
   19990:	b29a      	uxth	r2, r3
   19992:	697b      	ldr	r3, [r7, #20]
   19994:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   19996:	697b      	ldr	r3, [r7, #20]
   19998:	2200      	movs	r2, #0
   1999a:	705a      	strb	r2, [r3, #1]
   1999c:	e015      	b.n	199ca <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   1999e:	1dbb      	adds	r3, r7, #6
   199a0:	881b      	ldrh	r3, [r3, #0]
   199a2:	2bff      	cmp	r3, #255	; 0xff
   199a4:	d10d      	bne.n	199c2 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   199a6:	697b      	ldr	r3, [r7, #20]
   199a8:	22a8      	movs	r2, #168	; 0xa8
   199aa:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   199ac:	693b      	ldr	r3, [r7, #16]
   199ae:	0a1b      	lsrs	r3, r3, #8
   199b0:	b29a      	uxth	r2, r3
   199b2:	697b      	ldr	r3, [r7, #20]
   199b4:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   199b6:	693b      	ldr	r3, [r7, #16]
   199b8:	0e1b      	lsrs	r3, r3, #24
   199ba:	b2da      	uxtb	r2, r3
   199bc:	697b      	ldr	r3, [r7, #20]
   199be:	705a      	strb	r2, [r3, #1]
   199c0:	e003      	b.n	199ca <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   199c2:	4b15      	ldr	r3, [pc, #84]	; (19a18 <prvTraceGetDTS+0x1dc>)
   199c4:	0018      	movs	r0, r3
   199c6:	4b09      	ldr	r3, [pc, #36]	; (199ec <prvTraceGetDTS+0x1b0>)
   199c8:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   199ca:	4b14      	ldr	r3, [pc, #80]	; (19a1c <prvTraceGetDTS+0x1e0>)
   199cc:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   199ce:	693b      	ldr	r3, [r7, #16]
   199d0:	b29b      	uxth	r3, r3
   199d2:	1dba      	adds	r2, r7, #6
   199d4:	8812      	ldrh	r2, [r2, #0]
   199d6:	4013      	ands	r3, r2
   199d8:	b29b      	uxth	r3, r3
}
   199da:	0018      	movs	r0, r3
   199dc:	46bd      	mov	sp, r7
   199de:	b006      	add	sp, #24
   199e0:	bdb0      	pop	{r4, r5, r7, pc}
   199e2:	46c0      	nop			; (mov r8, r8)
   199e4:	0000ffff 	.word	0x0000ffff
   199e8:	00037ca4 	.word	0x00037ca4
   199ec:	00019629 	.word	0x00019629
   199f0:	20000c74 	.word	0x20000c74
   199f4:	20000bd0 	.word	0x20000bd0
   199f8:	e000e018 	.word	0xe000e018
   199fc:	200053fc 	.word	0x200053fc
   19a00:	000299e1 	.word	0x000299e1
   19a04:	00019a21 	.word	0x00019a21
   19a08:	20000c80 	.word	0x20000c80
   19a0c:	00032655 	.word	0x00032655
   19a10:	00032761 	.word	0x00032761
   19a14:	000191e1 	.word	0x000191e1
   19a18:	00037ce4 	.word	0x00037ce4
   19a1c:	000197e5 	.word	0x000197e5

00019a20 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   19a20:	b580      	push	{r7, lr}
   19a22:	b084      	sub	sp, #16
   19a24:	af00      	add	r7, sp, #0
   19a26:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   19a28:	2300      	movs	r3, #0
   19a2a:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   19a2c:	2300      	movs	r3, #0
   19a2e:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   19a30:	4b2d      	ldr	r3, [pc, #180]	; (19ae8 <prvTracePortGetTimeStamp+0xc8>)
   19a32:	681b      	ldr	r3, [r3, #0]
   19a34:	2b01      	cmp	r3, #1
   19a36:	d107      	bne.n	19a48 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   19a38:	687b      	ldr	r3, [r7, #4]
   19a3a:	2b00      	cmp	r3, #0
   19a3c:	d04f      	beq.n	19ade <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   19a3e:	4b2b      	ldr	r3, [pc, #172]	; (19aec <prvTracePortGetTimeStamp+0xcc>)
   19a40:	681a      	ldr	r2, [r3, #0]
   19a42:	687b      	ldr	r3, [r7, #4]
   19a44:	601a      	str	r2, [r3, #0]
		return;
   19a46:	e04a      	b.n	19ade <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   19a48:	4b29      	ldr	r3, [pc, #164]	; (19af0 <prvTracePortGetTimeStamp+0xd0>)
   19a4a:	681a      	ldr	r2, [r3, #0]
   19a4c:	4b29      	ldr	r3, [pc, #164]	; (19af4 <prvTracePortGetTimeStamp+0xd4>)
   19a4e:	681b      	ldr	r3, [r3, #0]
   19a50:	1ad3      	subs	r3, r2, r3
   19a52:	3301      	adds	r3, #1
   19a54:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   19a56:	4b28      	ldr	r3, [pc, #160]	; (19af8 <prvTracePortGetTimeStamp+0xd8>)
   19a58:	681a      	ldr	r2, [r3, #0]
   19a5a:	4b28      	ldr	r3, [pc, #160]	; (19afc <prvTracePortGetTimeStamp+0xdc>)
   19a5c:	681b      	ldr	r3, [r3, #0]
   19a5e:	1ad3      	subs	r3, r2, r3
   19a60:	3b01      	subs	r3, #1
   19a62:	2b00      	cmp	r3, #0
   19a64:	db03      	blt.n	19a6e <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   19a66:	4b24      	ldr	r3, [pc, #144]	; (19af8 <prvTracePortGetTimeStamp+0xd8>)
   19a68:	681b      	ldr	r3, [r3, #0]
   19a6a:	60fb      	str	r3, [r7, #12]
   19a6c:	e002      	b.n	19a74 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   19a6e:	4b23      	ldr	r3, [pc, #140]	; (19afc <prvTracePortGetTimeStamp+0xdc>)
   19a70:	681b      	ldr	r3, [r3, #0]
   19a72:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   19a74:	4b20      	ldr	r3, [pc, #128]	; (19af8 <prvTracePortGetTimeStamp+0xd8>)
   19a76:	681b      	ldr	r3, [r3, #0]
   19a78:	68fa      	ldr	r2, [r7, #12]
   19a7a:	429a      	cmp	r2, r3
   19a7c:	d107      	bne.n	19a8e <prvTracePortGetTimeStamp+0x6e>
   19a7e:	4b20      	ldr	r3, [pc, #128]	; (19b00 <prvTracePortGetTimeStamp+0xe0>)
   19a80:	681b      	ldr	r3, [r3, #0]
   19a82:	68ba      	ldr	r2, [r7, #8]
   19a84:	429a      	cmp	r2, r3
   19a86:	d202      	bcs.n	19a8e <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   19a88:	68fb      	ldr	r3, [r7, #12]
   19a8a:	3301      	adds	r3, #1
   19a8c:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   19a8e:	687b      	ldr	r3, [r7, #4]
   19a90:	2b00      	cmp	r3, #0
   19a92:	d016      	beq.n	19ac2 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   19a94:	4b16      	ldr	r3, [pc, #88]	; (19af0 <prvTracePortGetTimeStamp+0xd0>)
   19a96:	681b      	ldr	r3, [r3, #0]
   19a98:	3301      	adds	r3, #1
   19a9a:	089b      	lsrs	r3, r3, #2
   19a9c:	68fa      	ldr	r2, [r7, #12]
   19a9e:	435a      	muls	r2, r3
   19aa0:	4b12      	ldr	r3, [pc, #72]	; (19aec <prvTracePortGetTimeStamp+0xcc>)
   19aa2:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   19aa4:	4b12      	ldr	r3, [pc, #72]	; (19af0 <prvTracePortGetTimeStamp+0xd0>)
   19aa6:	681b      	ldr	r3, [r3, #0]
   19aa8:	3301      	adds	r3, #1
   19aaa:	2203      	movs	r2, #3
   19aac:	4013      	ands	r3, r2
   19aae:	68fa      	ldr	r2, [r7, #12]
   19ab0:	435a      	muls	r2, r3
   19ab2:	68bb      	ldr	r3, [r7, #8]
   19ab4:	18d3      	adds	r3, r2, r3
   19ab6:	089a      	lsrs	r2, r3, #2
   19ab8:	4b0c      	ldr	r3, [pc, #48]	; (19aec <prvTracePortGetTimeStamp+0xcc>)
   19aba:	681b      	ldr	r3, [r3, #0]
   19abc:	18d2      	adds	r2, r2, r3
   19abe:	4b0b      	ldr	r3, [pc, #44]	; (19aec <prvTracePortGetTimeStamp+0xcc>)
   19ac0:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   19ac2:	4b0d      	ldr	r3, [pc, #52]	; (19af8 <prvTracePortGetTimeStamp+0xd8>)
   19ac4:	68fa      	ldr	r2, [r7, #12]
   19ac6:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   19ac8:	687b      	ldr	r3, [r7, #4]
   19aca:	2b00      	cmp	r3, #0
   19acc:	d003      	beq.n	19ad6 <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   19ace:	4b07      	ldr	r3, [pc, #28]	; (19aec <prvTracePortGetTimeStamp+0xcc>)
   19ad0:	681a      	ldr	r2, [r3, #0]
   19ad2:	687b      	ldr	r3, [r7, #4]
   19ad4:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   19ad6:	4b0a      	ldr	r3, [pc, #40]	; (19b00 <prvTracePortGetTimeStamp+0xe0>)
   19ad8:	68ba      	ldr	r2, [r7, #8]
   19ada:	601a      	str	r2, [r3, #0]
   19adc:	e000      	b.n	19ae0 <prvTracePortGetTimeStamp+0xc0>
		return;
   19ade:	46c0      	nop			; (mov r8, r8)
}
   19ae0:	46bd      	mov	sp, r7
   19ae2:	b004      	add	sp, #16
   19ae4:	bd80      	pop	{r7, pc}
   19ae6:	46c0      	nop			; (mov r8, r8)
   19ae8:	20000bc0 	.word	0x20000bc0
   19aec:	20000bc4 	.word	0x20000bc4
   19af0:	e000e014 	.word	0xe000e014
   19af4:	e000e018 	.word	0xe000e018
   19af8:	20000c84 	.word	0x20000c84
   19afc:	20000bbc 	.word	0x20000bbc
   19b00:	20000c88 	.word	0x20000c88

00019b04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   19b04:	b580      	push	{r7, lr}
   19b06:	b082      	sub	sp, #8
   19b08:	af00      	add	r7, sp, #0
   19b0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19b0c:	687b      	ldr	r3, [r7, #4]
   19b0e:	3308      	adds	r3, #8
   19b10:	001a      	movs	r2, r3
   19b12:	687b      	ldr	r3, [r7, #4]
   19b14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   19b16:	687b      	ldr	r3, [r7, #4]
   19b18:	2201      	movs	r2, #1
   19b1a:	4252      	negs	r2, r2
   19b1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19b1e:	687b      	ldr	r3, [r7, #4]
   19b20:	3308      	adds	r3, #8
   19b22:	001a      	movs	r2, r3
   19b24:	687b      	ldr	r3, [r7, #4]
   19b26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19b28:	687b      	ldr	r3, [r7, #4]
   19b2a:	3308      	adds	r3, #8
   19b2c:	001a      	movs	r2, r3
   19b2e:	687b      	ldr	r3, [r7, #4]
   19b30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   19b32:	687b      	ldr	r3, [r7, #4]
   19b34:	2200      	movs	r2, #0
   19b36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   19b38:	46c0      	nop			; (mov r8, r8)
   19b3a:	46bd      	mov	sp, r7
   19b3c:	b002      	add	sp, #8
   19b3e:	bd80      	pop	{r7, pc}

00019b40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   19b40:	b580      	push	{r7, lr}
   19b42:	b082      	sub	sp, #8
   19b44:	af00      	add	r7, sp, #0
   19b46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   19b48:	687b      	ldr	r3, [r7, #4]
   19b4a:	2200      	movs	r2, #0
   19b4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   19b4e:	46c0      	nop			; (mov r8, r8)
   19b50:	46bd      	mov	sp, r7
   19b52:	b002      	add	sp, #8
   19b54:	bd80      	pop	{r7, pc}

00019b56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   19b56:	b580      	push	{r7, lr}
   19b58:	b084      	sub	sp, #16
   19b5a:	af00      	add	r7, sp, #0
   19b5c:	6078      	str	r0, [r7, #4]
   19b5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   19b60:	687b      	ldr	r3, [r7, #4]
   19b62:	685b      	ldr	r3, [r3, #4]
   19b64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   19b66:	683b      	ldr	r3, [r7, #0]
   19b68:	68fa      	ldr	r2, [r7, #12]
   19b6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   19b6c:	68fb      	ldr	r3, [r7, #12]
   19b6e:	689a      	ldr	r2, [r3, #8]
   19b70:	683b      	ldr	r3, [r7, #0]
   19b72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   19b74:	68fb      	ldr	r3, [r7, #12]
   19b76:	689b      	ldr	r3, [r3, #8]
   19b78:	683a      	ldr	r2, [r7, #0]
   19b7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   19b7c:	68fb      	ldr	r3, [r7, #12]
   19b7e:	683a      	ldr	r2, [r7, #0]
   19b80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   19b82:	683b      	ldr	r3, [r7, #0]
   19b84:	687a      	ldr	r2, [r7, #4]
   19b86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   19b88:	687b      	ldr	r3, [r7, #4]
   19b8a:	681b      	ldr	r3, [r3, #0]
   19b8c:	1c5a      	adds	r2, r3, #1
   19b8e:	687b      	ldr	r3, [r7, #4]
   19b90:	601a      	str	r2, [r3, #0]
}
   19b92:	46c0      	nop			; (mov r8, r8)
   19b94:	46bd      	mov	sp, r7
   19b96:	b004      	add	sp, #16
   19b98:	bd80      	pop	{r7, pc}

00019b9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   19b9a:	b580      	push	{r7, lr}
   19b9c:	b084      	sub	sp, #16
   19b9e:	af00      	add	r7, sp, #0
   19ba0:	6078      	str	r0, [r7, #4]
   19ba2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   19ba4:	683b      	ldr	r3, [r7, #0]
   19ba6:	681b      	ldr	r3, [r3, #0]
   19ba8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   19baa:	68bb      	ldr	r3, [r7, #8]
   19bac:	3301      	adds	r3, #1
   19bae:	d103      	bne.n	19bb8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   19bb0:	687b      	ldr	r3, [r7, #4]
   19bb2:	691b      	ldr	r3, [r3, #16]
   19bb4:	60fb      	str	r3, [r7, #12]
   19bb6:	e00c      	b.n	19bd2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19bb8:	687b      	ldr	r3, [r7, #4]
   19bba:	3308      	adds	r3, #8
   19bbc:	60fb      	str	r3, [r7, #12]
   19bbe:	e002      	b.n	19bc6 <vListInsert+0x2c>
   19bc0:	68fb      	ldr	r3, [r7, #12]
   19bc2:	685b      	ldr	r3, [r3, #4]
   19bc4:	60fb      	str	r3, [r7, #12]
   19bc6:	68fb      	ldr	r3, [r7, #12]
   19bc8:	685b      	ldr	r3, [r3, #4]
   19bca:	681a      	ldr	r2, [r3, #0]
   19bcc:	68bb      	ldr	r3, [r7, #8]
   19bce:	429a      	cmp	r2, r3
   19bd0:	d9f6      	bls.n	19bc0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   19bd2:	68fb      	ldr	r3, [r7, #12]
   19bd4:	685a      	ldr	r2, [r3, #4]
   19bd6:	683b      	ldr	r3, [r7, #0]
   19bd8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   19bda:	683b      	ldr	r3, [r7, #0]
   19bdc:	685b      	ldr	r3, [r3, #4]
   19bde:	683a      	ldr	r2, [r7, #0]
   19be0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   19be2:	683b      	ldr	r3, [r7, #0]
   19be4:	68fa      	ldr	r2, [r7, #12]
   19be6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   19be8:	68fb      	ldr	r3, [r7, #12]
   19bea:	683a      	ldr	r2, [r7, #0]
   19bec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   19bee:	683b      	ldr	r3, [r7, #0]
   19bf0:	687a      	ldr	r2, [r7, #4]
   19bf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   19bf4:	687b      	ldr	r3, [r7, #4]
   19bf6:	681b      	ldr	r3, [r3, #0]
   19bf8:	1c5a      	adds	r2, r3, #1
   19bfa:	687b      	ldr	r3, [r7, #4]
   19bfc:	601a      	str	r2, [r3, #0]
}
   19bfe:	46c0      	nop			; (mov r8, r8)
   19c00:	46bd      	mov	sp, r7
   19c02:	b004      	add	sp, #16
   19c04:	bd80      	pop	{r7, pc}

00019c06 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   19c06:	b580      	push	{r7, lr}
   19c08:	b084      	sub	sp, #16
   19c0a:	af00      	add	r7, sp, #0
   19c0c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   19c0e:	687b      	ldr	r3, [r7, #4]
   19c10:	691b      	ldr	r3, [r3, #16]
   19c12:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   19c14:	687b      	ldr	r3, [r7, #4]
   19c16:	685b      	ldr	r3, [r3, #4]
   19c18:	687a      	ldr	r2, [r7, #4]
   19c1a:	6892      	ldr	r2, [r2, #8]
   19c1c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   19c1e:	687b      	ldr	r3, [r7, #4]
   19c20:	689b      	ldr	r3, [r3, #8]
   19c22:	687a      	ldr	r2, [r7, #4]
   19c24:	6852      	ldr	r2, [r2, #4]
   19c26:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   19c28:	68fb      	ldr	r3, [r7, #12]
   19c2a:	685a      	ldr	r2, [r3, #4]
   19c2c:	687b      	ldr	r3, [r7, #4]
   19c2e:	429a      	cmp	r2, r3
   19c30:	d103      	bne.n	19c3a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   19c32:	687b      	ldr	r3, [r7, #4]
   19c34:	689a      	ldr	r2, [r3, #8]
   19c36:	68fb      	ldr	r3, [r7, #12]
   19c38:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   19c3a:	687b      	ldr	r3, [r7, #4]
   19c3c:	2200      	movs	r2, #0
   19c3e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   19c40:	68fb      	ldr	r3, [r7, #12]
   19c42:	681b      	ldr	r3, [r3, #0]
   19c44:	1e5a      	subs	r2, r3, #1
   19c46:	68fb      	ldr	r3, [r7, #12]
   19c48:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   19c4a:	68fb      	ldr	r3, [r7, #12]
   19c4c:	681b      	ldr	r3, [r3, #0]
}
   19c4e:	0018      	movs	r0, r3
   19c50:	46bd      	mov	sp, r7
   19c52:	b004      	add	sp, #16
   19c54:	bd80      	pop	{r7, pc}
	...

00019c58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   19c58:	b580      	push	{r7, lr}
   19c5a:	b084      	sub	sp, #16
   19c5c:	af00      	add	r7, sp, #0
   19c5e:	60f8      	str	r0, [r7, #12]
   19c60:	60b9      	str	r1, [r7, #8]
   19c62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   19c64:	68fb      	ldr	r3, [r7, #12]
   19c66:	3b04      	subs	r3, #4
   19c68:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   19c6a:	68fb      	ldr	r3, [r7, #12]
   19c6c:	2280      	movs	r2, #128	; 0x80
   19c6e:	0452      	lsls	r2, r2, #17
   19c70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   19c72:	68fb      	ldr	r3, [r7, #12]
   19c74:	3b04      	subs	r3, #4
   19c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   19c78:	68ba      	ldr	r2, [r7, #8]
   19c7a:	68fb      	ldr	r3, [r7, #12]
   19c7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   19c7e:	68fb      	ldr	r3, [r7, #12]
   19c80:	3b04      	subs	r3, #4
   19c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   19c84:	4a08      	ldr	r2, [pc, #32]	; (19ca8 <pxPortInitialiseStack+0x50>)
   19c86:	68fb      	ldr	r3, [r7, #12]
   19c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   19c8a:	68fb      	ldr	r3, [r7, #12]
   19c8c:	3b14      	subs	r3, #20
   19c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   19c90:	687a      	ldr	r2, [r7, #4]
   19c92:	68fb      	ldr	r3, [r7, #12]
   19c94:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   19c96:	68fb      	ldr	r3, [r7, #12]
   19c98:	3b20      	subs	r3, #32
   19c9a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   19c9c:	68fb      	ldr	r3, [r7, #12]
}
   19c9e:	0018      	movs	r0, r3
   19ca0:	46bd      	mov	sp, r7
   19ca2:	b004      	add	sp, #16
   19ca4:	bd80      	pop	{r7, pc}
   19ca6:	46c0      	nop			; (mov r8, r8)
   19ca8:	00019cad 	.word	0x00019cad

00019cac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   19cac:	b580      	push	{r7, lr}
   19cae:	b082      	sub	sp, #8
   19cb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   19cb2:	2300      	movs	r3, #0
   19cb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   19cb6:	4b07      	ldr	r3, [pc, #28]	; (19cd4 <prvTaskExitError+0x28>)
   19cb8:	681b      	ldr	r3, [r3, #0]
   19cba:	3301      	adds	r3, #1
   19cbc:	d001      	beq.n	19cc2 <prvTaskExitError+0x16>
   19cbe:	b672      	cpsid	i
   19cc0:	e7fe      	b.n	19cc0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   19cc2:	b672      	cpsid	i
	while( ulDummy == 0 )
   19cc4:	46c0      	nop			; (mov r8, r8)
   19cc6:	687b      	ldr	r3, [r7, #4]
   19cc8:	2b00      	cmp	r3, #0
   19cca:	d0fc      	beq.n	19cc6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   19ccc:	46c0      	nop			; (mov r8, r8)
   19cce:	46bd      	mov	sp, r7
   19cd0:	b002      	add	sp, #8
   19cd2:	bd80      	pop	{r7, pc}
   19cd4:	20000108 	.word	0x20000108

00019cd8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   19cd8:	b580      	push	{r7, lr}
   19cda:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   19cdc:	46c0      	nop			; (mov r8, r8)
   19cde:	46bd      	mov	sp, r7
   19ce0:	bd80      	pop	{r7, pc}
	...

00019cf0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   19cf0:	4a0b      	ldr	r2, [pc, #44]	; (19d20 <pxCurrentTCBConst2>)
   19cf2:	6813      	ldr	r3, [r2, #0]
   19cf4:	6818      	ldr	r0, [r3, #0]
   19cf6:	3020      	adds	r0, #32
   19cf8:	f380 8809 	msr	PSP, r0
   19cfc:	2002      	movs	r0, #2
   19cfe:	f380 8814 	msr	CONTROL, r0
   19d02:	f3bf 8f6f 	isb	sy
   19d06:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   19d08:	46ae      	mov	lr, r5
   19d0a:	bc08      	pop	{r3}
   19d0c:	bc04      	pop	{r2}
   19d0e:	b662      	cpsie	i
   19d10:	4718      	bx	r3
   19d12:	46c0      	nop			; (mov r8, r8)
   19d14:	46c0      	nop			; (mov r8, r8)
   19d16:	46c0      	nop			; (mov r8, r8)
   19d18:	46c0      	nop			; (mov r8, r8)
   19d1a:	46c0      	nop			; (mov r8, r8)
   19d1c:	46c0      	nop			; (mov r8, r8)
   19d1e:	46c0      	nop			; (mov r8, r8)

00019d20 <pxCurrentTCBConst2>:
   19d20:	20003f5c 	.word	0x20003f5c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   19d24:	46c0      	nop			; (mov r8, r8)
   19d26:	46c0      	nop			; (mov r8, r8)

00019d28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   19d28:	b580      	push	{r7, lr}
   19d2a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   19d2c:	4b0e      	ldr	r3, [pc, #56]	; (19d68 <xPortStartScheduler+0x40>)
   19d2e:	4a0e      	ldr	r2, [pc, #56]	; (19d68 <xPortStartScheduler+0x40>)
   19d30:	6812      	ldr	r2, [r2, #0]
   19d32:	21ff      	movs	r1, #255	; 0xff
   19d34:	0409      	lsls	r1, r1, #16
   19d36:	430a      	orrs	r2, r1
   19d38:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   19d3a:	4b0b      	ldr	r3, [pc, #44]	; (19d68 <xPortStartScheduler+0x40>)
   19d3c:	4a0a      	ldr	r2, [pc, #40]	; (19d68 <xPortStartScheduler+0x40>)
   19d3e:	6812      	ldr	r2, [r2, #0]
   19d40:	21ff      	movs	r1, #255	; 0xff
   19d42:	0609      	lsls	r1, r1, #24
   19d44:	430a      	orrs	r2, r1
   19d46:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   19d48:	4b08      	ldr	r3, [pc, #32]	; (19d6c <xPortStartScheduler+0x44>)
   19d4a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   19d4c:	4b08      	ldr	r3, [pc, #32]	; (19d70 <xPortStartScheduler+0x48>)
   19d4e:	2200      	movs	r2, #0
   19d50:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   19d52:	4b08      	ldr	r3, [pc, #32]	; (19d74 <xPortStartScheduler+0x4c>)
   19d54:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   19d56:	4b08      	ldr	r3, [pc, #32]	; (19d78 <xPortStartScheduler+0x50>)
   19d58:	4798      	blx	r3
	prvTaskExitError();
   19d5a:	4b08      	ldr	r3, [pc, #32]	; (19d7c <xPortStartScheduler+0x54>)
   19d5c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   19d5e:	2300      	movs	r3, #0
}
   19d60:	0018      	movs	r0, r3
   19d62:	46bd      	mov	sp, r7
   19d64:	bd80      	pop	{r7, pc}
   19d66:	46c0      	nop			; (mov r8, r8)
   19d68:	e000ed20 	.word	0xe000ed20
   19d6c:	00019e89 	.word	0x00019e89
   19d70:	20000108 	.word	0x20000108
   19d74:	00019cf1 	.word	0x00019cf1
   19d78:	0001c3e5 	.word	0x0001c3e5
   19d7c:	00019cad 	.word	0x00019cad

00019d80 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   19d80:	b580      	push	{r7, lr}
   19d82:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   19d84:	4b03      	ldr	r3, [pc, #12]	; (19d94 <vPortYield+0x14>)
   19d86:	2280      	movs	r2, #128	; 0x80
   19d88:	0552      	lsls	r2, r2, #21
   19d8a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   19d8c:	46c0      	nop			; (mov r8, r8)
   19d8e:	46bd      	mov	sp, r7
   19d90:	bd80      	pop	{r7, pc}
   19d92:	46c0      	nop			; (mov r8, r8)
   19d94:	e000ed04 	.word	0xe000ed04

00019d98 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   19d98:	b580      	push	{r7, lr}
   19d9a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   19d9c:	b672      	cpsid	i
    uxCriticalNesting++;
   19d9e:	4b06      	ldr	r3, [pc, #24]	; (19db8 <vPortEnterCritical+0x20>)
   19da0:	681b      	ldr	r3, [r3, #0]
   19da2:	1c5a      	adds	r2, r3, #1
   19da4:	4b04      	ldr	r3, [pc, #16]	; (19db8 <vPortEnterCritical+0x20>)
   19da6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   19da8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   19dac:	f3bf 8f6f 	isb	sy
}
   19db0:	46c0      	nop			; (mov r8, r8)
   19db2:	46bd      	mov	sp, r7
   19db4:	bd80      	pop	{r7, pc}
   19db6:	46c0      	nop			; (mov r8, r8)
   19db8:	20000108 	.word	0x20000108

00019dbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   19dbc:	b580      	push	{r7, lr}
   19dbe:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   19dc0:	4b09      	ldr	r3, [pc, #36]	; (19de8 <vPortExitCritical+0x2c>)
   19dc2:	681b      	ldr	r3, [r3, #0]
   19dc4:	2b00      	cmp	r3, #0
   19dc6:	d101      	bne.n	19dcc <vPortExitCritical+0x10>
   19dc8:	b672      	cpsid	i
   19dca:	e7fe      	b.n	19dca <vPortExitCritical+0xe>
    uxCriticalNesting--;
   19dcc:	4b06      	ldr	r3, [pc, #24]	; (19de8 <vPortExitCritical+0x2c>)
   19dce:	681b      	ldr	r3, [r3, #0]
   19dd0:	1e5a      	subs	r2, r3, #1
   19dd2:	4b05      	ldr	r3, [pc, #20]	; (19de8 <vPortExitCritical+0x2c>)
   19dd4:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   19dd6:	4b04      	ldr	r3, [pc, #16]	; (19de8 <vPortExitCritical+0x2c>)
   19dd8:	681b      	ldr	r3, [r3, #0]
   19dda:	2b00      	cmp	r3, #0
   19ddc:	d100      	bne.n	19de0 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   19dde:	b662      	cpsie	i
    }
}
   19de0:	46c0      	nop			; (mov r8, r8)
   19de2:	46bd      	mov	sp, r7
   19de4:	bd80      	pop	{r7, pc}
   19de6:	46c0      	nop			; (mov r8, r8)
   19de8:	20000108 	.word	0x20000108

00019dec <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   19dec:	f3ef 8010 	mrs	r0, PRIMASK
   19df0:	b672      	cpsid	i
   19df2:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   19df4:	46c0      	nop			; (mov r8, r8)
   19df6:	0018      	movs	r0, r3

00019df8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   19df8:	f380 8810 	msr	PRIMASK, r0
   19dfc:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   19dfe:	46c0      	nop			; (mov r8, r8)

00019e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   19e00:	f3ef 8009 	mrs	r0, PSP
   19e04:	4b0e      	ldr	r3, [pc, #56]	; (19e40 <pxCurrentTCBConst>)
   19e06:	681a      	ldr	r2, [r3, #0]
   19e08:	3820      	subs	r0, #32
   19e0a:	6010      	str	r0, [r2, #0]
   19e0c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   19e0e:	4644      	mov	r4, r8
   19e10:	464d      	mov	r5, r9
   19e12:	4656      	mov	r6, sl
   19e14:	465f      	mov	r7, fp
   19e16:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   19e18:	b508      	push	{r3, lr}
   19e1a:	b672      	cpsid	i
   19e1c:	f002 fae2 	bl	1c3e4 <vTaskSwitchContext>
   19e20:	b662      	cpsie	i
   19e22:	bc0c      	pop	{r2, r3}
   19e24:	6811      	ldr	r1, [r2, #0]
   19e26:	6808      	ldr	r0, [r1, #0]
   19e28:	3010      	adds	r0, #16
   19e2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   19e2c:	46a0      	mov	r8, r4
   19e2e:	46a9      	mov	r9, r5
   19e30:	46b2      	mov	sl, r6
   19e32:	46bb      	mov	fp, r7
   19e34:	f380 8809 	msr	PSP, r0
   19e38:	3820      	subs	r0, #32
   19e3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   19e3c:	4718      	bx	r3
   19e3e:	46c0      	nop			; (mov r8, r8)

00019e40 <pxCurrentTCBConst>:
   19e40:	20003f5c 	.word	0x20003f5c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   19e44:	46c0      	nop			; (mov r8, r8)
   19e46:	46c0      	nop			; (mov r8, r8)

00019e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   19e48:	b580      	push	{r7, lr}
   19e4a:	b082      	sub	sp, #8
   19e4c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   19e4e:	4b0a      	ldr	r3, [pc, #40]	; (19e78 <SysTick_Handler+0x30>)
   19e50:	4798      	blx	r3
   19e52:	0003      	movs	r3, r0
   19e54:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   19e56:	4b09      	ldr	r3, [pc, #36]	; (19e7c <SysTick_Handler+0x34>)
   19e58:	4798      	blx	r3
   19e5a:	1e03      	subs	r3, r0, #0
   19e5c:	d003      	beq.n	19e66 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   19e5e:	4b08      	ldr	r3, [pc, #32]	; (19e80 <SysTick_Handler+0x38>)
   19e60:	2280      	movs	r2, #128	; 0x80
   19e62:	0552      	lsls	r2, r2, #21
   19e64:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   19e66:	687b      	ldr	r3, [r7, #4]
   19e68:	0018      	movs	r0, r3
   19e6a:	4b06      	ldr	r3, [pc, #24]	; (19e84 <SysTick_Handler+0x3c>)
   19e6c:	4798      	blx	r3
}
   19e6e:	46c0      	nop			; (mov r8, r8)
   19e70:	46bd      	mov	sp, r7
   19e72:	b002      	add	sp, #8
   19e74:	bd80      	pop	{r7, pc}
   19e76:	46c0      	nop			; (mov r8, r8)
   19e78:	00019ded 	.word	0x00019ded
   19e7c:	0001c1f5 	.word	0x0001c1f5
   19e80:	e000ed04 	.word	0xe000ed04
   19e84:	00019df9 	.word	0x00019df9

00019e88 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   19e88:	b5b0      	push	{r4, r5, r7, lr}
   19e8a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   19e8c:	4b0b      	ldr	r3, [pc, #44]	; (19ebc <prvSetupTimerInterrupt+0x34>)
   19e8e:	2200      	movs	r2, #0
   19e90:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   19e92:	4b0b      	ldr	r3, [pc, #44]	; (19ec0 <prvSetupTimerInterrupt+0x38>)
   19e94:	2200      	movs	r2, #0
   19e96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   19e98:	4c0a      	ldr	r4, [pc, #40]	; (19ec4 <prvSetupTimerInterrupt+0x3c>)
   19e9a:	2000      	movs	r0, #0
   19e9c:	4b0a      	ldr	r3, [pc, #40]	; (19ec8 <prvSetupTimerInterrupt+0x40>)
   19e9e:	4798      	blx	r3
   19ea0:	4b0a      	ldr	r3, [pc, #40]	; (19ecc <prvSetupTimerInterrupt+0x44>)
   19ea2:	22fa      	movs	r2, #250	; 0xfa
   19ea4:	0091      	lsls	r1, r2, #2
   19ea6:	4798      	blx	r3
   19ea8:	0003      	movs	r3, r0
   19eaa:	3b01      	subs	r3, #1
   19eac:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   19eae:	4b03      	ldr	r3, [pc, #12]	; (19ebc <prvSetupTimerInterrupt+0x34>)
   19eb0:	2207      	movs	r2, #7
   19eb2:	601a      	str	r2, [r3, #0]
}
   19eb4:	46c0      	nop			; (mov r8, r8)
   19eb6:	46bd      	mov	sp, r7
   19eb8:	bdb0      	pop	{r4, r5, r7, pc}
   19eba:	46c0      	nop			; (mov r8, r8)
   19ebc:	e000e010 	.word	0xe000e010
   19ec0:	e000e018 	.word	0xe000e018
   19ec4:	e000e014 	.word	0xe000e014
   19ec8:	000299e1 	.word	0x000299e1
   19ecc:	00032655 	.word	0x00032655

00019ed0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   19ed0:	b580      	push	{r7, lr}
   19ed2:	b084      	sub	sp, #16
   19ed4:	af00      	add	r7, sp, #0
   19ed6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   19ed8:	2300      	movs	r3, #0
   19eda:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   19edc:	687b      	ldr	r3, [r7, #4]
   19ede:	2207      	movs	r2, #7
   19ee0:	4013      	ands	r3, r2
   19ee2:	d004      	beq.n	19eee <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   19ee4:	687b      	ldr	r3, [r7, #4]
   19ee6:	2207      	movs	r2, #7
   19ee8:	4393      	bics	r3, r2
   19eea:	3308      	adds	r3, #8
   19eec:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   19eee:	4b21      	ldr	r3, [pc, #132]	; (19f74 <pvPortMalloc+0xa4>)
   19ef0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   19ef2:	4b21      	ldr	r3, [pc, #132]	; (19f78 <pvPortMalloc+0xa8>)
   19ef4:	681b      	ldr	r3, [r3, #0]
   19ef6:	2b00      	cmp	r3, #0
   19ef8:	d105      	bne.n	19f06 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   19efa:	4b20      	ldr	r3, [pc, #128]	; (19f7c <pvPortMalloc+0xac>)
   19efc:	2207      	movs	r2, #7
   19efe:	4393      	bics	r3, r2
   19f00:	001a      	movs	r2, r3
   19f02:	4b1d      	ldr	r3, [pc, #116]	; (19f78 <pvPortMalloc+0xa8>)
   19f04:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   19f06:	4b1e      	ldr	r3, [pc, #120]	; (19f80 <pvPortMalloc+0xb0>)
   19f08:	681a      	ldr	r2, [r3, #0]
   19f0a:	687b      	ldr	r3, [r7, #4]
   19f0c:	18d3      	adds	r3, r2, r3
   19f0e:	4a1d      	ldr	r2, [pc, #116]	; (19f84 <pvPortMalloc+0xb4>)
   19f10:	4293      	cmp	r3, r2
   19f12:	d813      	bhi.n	19f3c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   19f14:	4b1a      	ldr	r3, [pc, #104]	; (19f80 <pvPortMalloc+0xb0>)
   19f16:	681a      	ldr	r2, [r3, #0]
   19f18:	687b      	ldr	r3, [r7, #4]
   19f1a:	18d2      	adds	r2, r2, r3
   19f1c:	4b18      	ldr	r3, [pc, #96]	; (19f80 <pvPortMalloc+0xb0>)
   19f1e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   19f20:	429a      	cmp	r2, r3
   19f22:	d90b      	bls.n	19f3c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   19f24:	4b14      	ldr	r3, [pc, #80]	; (19f78 <pvPortMalloc+0xa8>)
   19f26:	681a      	ldr	r2, [r3, #0]
   19f28:	4b15      	ldr	r3, [pc, #84]	; (19f80 <pvPortMalloc+0xb0>)
   19f2a:	681b      	ldr	r3, [r3, #0]
   19f2c:	18d3      	adds	r3, r2, r3
   19f2e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   19f30:	4b13      	ldr	r3, [pc, #76]	; (19f80 <pvPortMalloc+0xb0>)
   19f32:	681a      	ldr	r2, [r3, #0]
   19f34:	687b      	ldr	r3, [r7, #4]
   19f36:	18d2      	adds	r2, r2, r3
   19f38:	4b11      	ldr	r3, [pc, #68]	; (19f80 <pvPortMalloc+0xb0>)
   19f3a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   19f3c:	68fb      	ldr	r3, [r7, #12]
   19f3e:	2b00      	cmp	r3, #0
   19f40:	d006      	beq.n	19f50 <pvPortMalloc+0x80>
   19f42:	68fb      	ldr	r3, [r7, #12]
   19f44:	687a      	ldr	r2, [r7, #4]
   19f46:	0019      	movs	r1, r3
   19f48:	2094      	movs	r0, #148	; 0x94
   19f4a:	4b0f      	ldr	r3, [pc, #60]	; (19f88 <pvPortMalloc+0xb8>)
   19f4c:	4798      	blx	r3
   19f4e:	e005      	b.n	19f5c <pvPortMalloc+0x8c>
   19f50:	68fb      	ldr	r3, [r7, #12]
   19f52:	687a      	ldr	r2, [r7, #4]
   19f54:	0019      	movs	r1, r3
   19f56:	20e8      	movs	r0, #232	; 0xe8
   19f58:	4b0b      	ldr	r3, [pc, #44]	; (19f88 <pvPortMalloc+0xb8>)
   19f5a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   19f5c:	4b0b      	ldr	r3, [pc, #44]	; (19f8c <pvPortMalloc+0xbc>)
   19f5e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   19f60:	68fb      	ldr	r3, [r7, #12]
   19f62:	2b00      	cmp	r3, #0
   19f64:	d101      	bne.n	19f6a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   19f66:	4b0a      	ldr	r3, [pc, #40]	; (19f90 <pvPortMalloc+0xc0>)
   19f68:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   19f6a:	68fb      	ldr	r3, [r7, #12]
}
   19f6c:	0018      	movs	r0, r3
   19f6e:	46bd      	mov	sp, r7
   19f70:	b004      	add	sp, #16
   19f72:	bd80      	pop	{r7, pc}
   19f74:	0001c051 	.word	0x0001c051
   19f78:	20003f58 	.word	0x20003f58
   19f7c:	20000c94 	.word	0x20000c94
   19f80:	20003f54 	.word	0x20003f54
   19f84:	000032bf 	.word	0x000032bf
   19f88:	00018635 	.word	0x00018635
   19f8c:	0001c069 	.word	0x0001c069
   19f90:	00032625 	.word	0x00032625

00019f94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   19f94:	b580      	push	{r7, lr}
   19f96:	b082      	sub	sp, #8
   19f98:	af00      	add	r7, sp, #0
   19f9a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   19f9c:	687b      	ldr	r3, [r7, #4]
   19f9e:	2b00      	cmp	r3, #0
   19fa0:	d001      	beq.n	19fa6 <vPortFree+0x12>
   19fa2:	b672      	cpsid	i
   19fa4:	e7fe      	b.n	19fa4 <vPortFree+0x10>
}
   19fa6:	46c0      	nop			; (mov r8, r8)
   19fa8:	46bd      	mov	sp, r7
   19faa:	b002      	add	sp, #8
   19fac:	bd80      	pop	{r7, pc}
	...

00019fb0 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   19fb0:	b580      	push	{r7, lr}
   19fb2:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   19fb4:	4b03      	ldr	r3, [pc, #12]	; (19fc4 <xPortGetFreeHeapSize+0x14>)
   19fb6:	681b      	ldr	r3, [r3, #0]
   19fb8:	22cb      	movs	r2, #203	; 0xcb
   19fba:	0192      	lsls	r2, r2, #6
   19fbc:	1ad3      	subs	r3, r2, r3
}
   19fbe:	0018      	movs	r0, r3
   19fc0:	46bd      	mov	sp, r7
   19fc2:	bd80      	pop	{r7, pc}
   19fc4:	20003f54 	.word	0x20003f54

00019fc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   19fc8:	b580      	push	{r7, lr}
   19fca:	b084      	sub	sp, #16
   19fcc:	af00      	add	r7, sp, #0
   19fce:	6078      	str	r0, [r7, #4]
   19fd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19fd2:	687b      	ldr	r3, [r7, #4]
   19fd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   19fd6:	68fb      	ldr	r3, [r7, #12]
   19fd8:	2b00      	cmp	r3, #0
   19fda:	d101      	bne.n	19fe0 <xQueueGenericReset+0x18>
   19fdc:	b672      	cpsid	i
   19fde:	e7fe      	b.n	19fde <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   19fe0:	4b23      	ldr	r3, [pc, #140]	; (1a070 <xQueueGenericReset+0xa8>)
   19fe2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   19fe4:	68fb      	ldr	r3, [r7, #12]
   19fe6:	681a      	ldr	r2, [r3, #0]
   19fe8:	68fb      	ldr	r3, [r7, #12]
   19fea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   19fec:	68fb      	ldr	r3, [r7, #12]
   19fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19ff0:	434b      	muls	r3, r1
   19ff2:	18d2      	adds	r2, r2, r3
   19ff4:	68fb      	ldr	r3, [r7, #12]
   19ff6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   19ff8:	68fb      	ldr	r3, [r7, #12]
   19ffa:	2200      	movs	r2, #0
   19ffc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   19ffe:	68fb      	ldr	r3, [r7, #12]
   1a000:	681a      	ldr	r2, [r3, #0]
   1a002:	68fb      	ldr	r3, [r7, #12]
   1a004:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1a006:	68fb      	ldr	r3, [r7, #12]
   1a008:	681a      	ldr	r2, [r3, #0]
   1a00a:	68fb      	ldr	r3, [r7, #12]
   1a00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a00e:	1e59      	subs	r1, r3, #1
   1a010:	68fb      	ldr	r3, [r7, #12]
   1a012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a014:	434b      	muls	r3, r1
   1a016:	18d2      	adds	r2, r2, r3
   1a018:	68fb      	ldr	r3, [r7, #12]
   1a01a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1a01c:	68fb      	ldr	r3, [r7, #12]
   1a01e:	2244      	movs	r2, #68	; 0x44
   1a020:	21ff      	movs	r1, #255	; 0xff
   1a022:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1a024:	68fb      	ldr	r3, [r7, #12]
   1a026:	2245      	movs	r2, #69	; 0x45
   1a028:	21ff      	movs	r1, #255	; 0xff
   1a02a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1a02c:	683b      	ldr	r3, [r7, #0]
   1a02e:	2b00      	cmp	r3, #0
   1a030:	d10d      	bne.n	1a04e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a032:	68fb      	ldr	r3, [r7, #12]
   1a034:	691b      	ldr	r3, [r3, #16]
   1a036:	2b00      	cmp	r3, #0
   1a038:	d013      	beq.n	1a062 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a03a:	68fb      	ldr	r3, [r7, #12]
   1a03c:	3310      	adds	r3, #16
   1a03e:	0018      	movs	r0, r3
   1a040:	4b0c      	ldr	r3, [pc, #48]	; (1a074 <xQueueGenericReset+0xac>)
   1a042:	4798      	blx	r3
   1a044:	1e03      	subs	r3, r0, #0
   1a046:	d00c      	beq.n	1a062 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1a048:	4b0b      	ldr	r3, [pc, #44]	; (1a078 <xQueueGenericReset+0xb0>)
   1a04a:	4798      	blx	r3
   1a04c:	e009      	b.n	1a062 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1a04e:	68fb      	ldr	r3, [r7, #12]
   1a050:	3310      	adds	r3, #16
   1a052:	0018      	movs	r0, r3
   1a054:	4b09      	ldr	r3, [pc, #36]	; (1a07c <xQueueGenericReset+0xb4>)
   1a056:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1a058:	68fb      	ldr	r3, [r7, #12]
   1a05a:	3324      	adds	r3, #36	; 0x24
   1a05c:	0018      	movs	r0, r3
   1a05e:	4b07      	ldr	r3, [pc, #28]	; (1a07c <xQueueGenericReset+0xb4>)
   1a060:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1a062:	4b07      	ldr	r3, [pc, #28]	; (1a080 <xQueueGenericReset+0xb8>)
   1a064:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1a066:	2301      	movs	r3, #1
}
   1a068:	0018      	movs	r0, r3
   1a06a:	46bd      	mov	sp, r7
   1a06c:	b004      	add	sp, #16
   1a06e:	bd80      	pop	{r7, pc}
   1a070:	00019d99 	.word	0x00019d99
   1a074:	0001c629 	.word	0x0001c629
   1a078:	00019d81 	.word	0x00019d81
   1a07c:	00019b05 	.word	0x00019b05
   1a080:	00019dbd 	.word	0x00019dbd

0001a084 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1a084:	b590      	push	{r4, r7, lr}
   1a086:	b08b      	sub	sp, #44	; 0x2c
   1a088:	af02      	add	r7, sp, #8
   1a08a:	60f8      	str	r0, [r7, #12]
   1a08c:	60b9      	str	r1, [r7, #8]
   1a08e:	1dfb      	adds	r3, r7, #7
   1a090:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1a092:	68fb      	ldr	r3, [r7, #12]
   1a094:	2b00      	cmp	r3, #0
   1a096:	d101      	bne.n	1a09c <xQueueGenericCreate+0x18>
   1a098:	b672      	cpsid	i
   1a09a:	e7fe      	b.n	1a09a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1a09c:	68bb      	ldr	r3, [r7, #8]
   1a09e:	2b00      	cmp	r3, #0
   1a0a0:	d102      	bne.n	1a0a8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1a0a2:	2300      	movs	r3, #0
   1a0a4:	61fb      	str	r3, [r7, #28]
   1a0a6:	e003      	b.n	1a0b0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1a0a8:	68fb      	ldr	r3, [r7, #12]
   1a0aa:	68ba      	ldr	r2, [r7, #8]
   1a0ac:	4353      	muls	r3, r2
   1a0ae:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1a0b0:	69fb      	ldr	r3, [r7, #28]
   1a0b2:	3354      	adds	r3, #84	; 0x54
   1a0b4:	0018      	movs	r0, r3
   1a0b6:	4b19      	ldr	r3, [pc, #100]	; (1a11c <xQueueGenericCreate+0x98>)
   1a0b8:	4798      	blx	r3
   1a0ba:	0003      	movs	r3, r0
   1a0bc:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1a0be:	69bb      	ldr	r3, [r7, #24]
   1a0c0:	2b00      	cmp	r3, #0
   1a0c2:	d00d      	beq.n	1a0e0 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1a0c4:	69bb      	ldr	r3, [r7, #24]
   1a0c6:	3354      	adds	r3, #84	; 0x54
   1a0c8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1a0ca:	1dfb      	adds	r3, r7, #7
   1a0cc:	781c      	ldrb	r4, [r3, #0]
   1a0ce:	697a      	ldr	r2, [r7, #20]
   1a0d0:	68b9      	ldr	r1, [r7, #8]
   1a0d2:	68f8      	ldr	r0, [r7, #12]
   1a0d4:	69bb      	ldr	r3, [r7, #24]
   1a0d6:	9300      	str	r3, [sp, #0]
   1a0d8:	0023      	movs	r3, r4
   1a0da:	4c11      	ldr	r4, [pc, #68]	; (1a120 <xQueueGenericCreate+0x9c>)
   1a0dc:	47a0      	blx	r4
   1a0de:	e017      	b.n	1a110 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1a0e0:	4b10      	ldr	r3, [pc, #64]	; (1a124 <xQueueGenericCreate+0xa0>)
   1a0e2:	4798      	blx	r3
   1a0e4:	0003      	movs	r3, r0
   1a0e6:	0018      	movs	r0, r3
   1a0e8:	4b0f      	ldr	r3, [pc, #60]	; (1a128 <xQueueGenericCreate+0xa4>)
   1a0ea:	4798      	blx	r3
   1a0ec:	0003      	movs	r3, r0
   1a0ee:	001a      	movs	r2, r3
   1a0f0:	4b0e      	ldr	r3, [pc, #56]	; (1a12c <xQueueGenericCreate+0xa8>)
   1a0f2:	881b      	ldrh	r3, [r3, #0]
   1a0f4:	4013      	ands	r3, r2
   1a0f6:	b29b      	uxth	r3, r3
   1a0f8:	2b00      	cmp	r3, #0
   1a0fa:	d009      	beq.n	1a110 <xQueueGenericCreate+0x8c>
   1a0fc:	1dfb      	adds	r3, r7, #7
   1a0fe:	781b      	ldrb	r3, [r3, #0]
   1a100:	4a0b      	ldr	r2, [pc, #44]	; (1a130 <xQueueGenericCreate+0xac>)
   1a102:	5cd3      	ldrb	r3, [r2, r3]
   1a104:	3340      	adds	r3, #64	; 0x40
   1a106:	b2db      	uxtb	r3, r3
   1a108:	2100      	movs	r1, #0
   1a10a:	0018      	movs	r0, r3
   1a10c:	4b09      	ldr	r3, [pc, #36]	; (1a134 <xQueueGenericCreate+0xb0>)
   1a10e:	4798      	blx	r3
		}

		return pxNewQueue;
   1a110:	69bb      	ldr	r3, [r7, #24]
	}
   1a112:	0018      	movs	r0, r3
   1a114:	46bd      	mov	sp, r7
   1a116:	b009      	add	sp, #36	; 0x24
   1a118:	bd90      	pop	{r4, r7, pc}
   1a11a:	46c0      	nop			; (mov r8, r8)
   1a11c:	00019ed1 	.word	0x00019ed1
   1a120:	0001a139 	.word	0x0001a139
   1a124:	00018029 	.word	0x00018029
   1a128:	00017d8d 	.word	0x00017d8d
   1a12c:	20000104 	.word	0x20000104
   1a130:	200000f8 	.word	0x200000f8
   1a134:	00018a8d 	.word	0x00018a8d

0001a138 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1a138:	b5b0      	push	{r4, r5, r7, lr}
   1a13a:	b084      	sub	sp, #16
   1a13c:	af00      	add	r7, sp, #0
   1a13e:	60f8      	str	r0, [r7, #12]
   1a140:	60b9      	str	r1, [r7, #8]
   1a142:	607a      	str	r2, [r7, #4]
   1a144:	001a      	movs	r2, r3
   1a146:	1cfb      	adds	r3, r7, #3
   1a148:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1a14a:	68bb      	ldr	r3, [r7, #8]
   1a14c:	2b00      	cmp	r3, #0
   1a14e:	d103      	bne.n	1a158 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1a150:	6a3b      	ldr	r3, [r7, #32]
   1a152:	6a3a      	ldr	r2, [r7, #32]
   1a154:	601a      	str	r2, [r3, #0]
   1a156:	e002      	b.n	1a15e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1a158:	6a3b      	ldr	r3, [r7, #32]
   1a15a:	687a      	ldr	r2, [r7, #4]
   1a15c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1a15e:	6a3b      	ldr	r3, [r7, #32]
   1a160:	68fa      	ldr	r2, [r7, #12]
   1a162:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1a164:	6a3b      	ldr	r3, [r7, #32]
   1a166:	68ba      	ldr	r2, [r7, #8]
   1a168:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1a16a:	6a3b      	ldr	r3, [r7, #32]
   1a16c:	2101      	movs	r1, #1
   1a16e:	0018      	movs	r0, r3
   1a170:	4b41      	ldr	r3, [pc, #260]	; (1a278 <prvInitialiseNewQueue+0x140>)
   1a172:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1a174:	6a3b      	ldr	r3, [r7, #32]
   1a176:	1cfa      	adds	r2, r7, #3
   1a178:	2150      	movs	r1, #80	; 0x50
   1a17a:	7812      	ldrb	r2, [r2, #0]
   1a17c:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1a17e:	6a3b      	ldr	r3, [r7, #32]
   1a180:	2200      	movs	r2, #0
   1a182:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1a184:	6a3b      	ldr	r3, [r7, #32]
   1a186:	0018      	movs	r0, r3
   1a188:	4b3c      	ldr	r3, [pc, #240]	; (1a27c <prvInitialiseNewQueue+0x144>)
   1a18a:	4798      	blx	r3
   1a18c:	0003      	movs	r3, r0
   1a18e:	001a      	movs	r2, r3
   1a190:	4b3b      	ldr	r3, [pc, #236]	; (1a280 <prvInitialiseNewQueue+0x148>)
   1a192:	5c9b      	ldrb	r3, [r3, r2]
   1a194:	0018      	movs	r0, r3
   1a196:	4b3b      	ldr	r3, [pc, #236]	; (1a284 <prvInitialiseNewQueue+0x14c>)
   1a198:	4798      	blx	r3
   1a19a:	0003      	movs	r3, r0
   1a19c:	b29a      	uxth	r2, r3
   1a19e:	6a3b      	ldr	r3, [r7, #32]
   1a1a0:	0011      	movs	r1, r2
   1a1a2:	0018      	movs	r0, r3
   1a1a4:	4b38      	ldr	r3, [pc, #224]	; (1a288 <prvInitialiseNewQueue+0x150>)
   1a1a6:	4798      	blx	r3
   1a1a8:	4b38      	ldr	r3, [pc, #224]	; (1a28c <prvInitialiseNewQueue+0x154>)
   1a1aa:	881a      	ldrh	r2, [r3, #0]
   1a1ac:	6a3b      	ldr	r3, [r7, #32]
   1a1ae:	0011      	movs	r1, r2
   1a1b0:	0018      	movs	r0, r3
   1a1b2:	4b37      	ldr	r3, [pc, #220]	; (1a290 <prvInitialiseNewQueue+0x158>)
   1a1b4:	4798      	blx	r3
   1a1b6:	6a3b      	ldr	r3, [r7, #32]
   1a1b8:	0018      	movs	r0, r3
   1a1ba:	4b30      	ldr	r3, [pc, #192]	; (1a27c <prvInitialiseNewQueue+0x144>)
   1a1bc:	4798      	blx	r3
   1a1be:	0003      	movs	r3, r0
   1a1c0:	001a      	movs	r2, r3
   1a1c2:	4b2f      	ldr	r3, [pc, #188]	; (1a280 <prvInitialiseNewQueue+0x148>)
   1a1c4:	5c9c      	ldrb	r4, [r3, r2]
   1a1c6:	6a3b      	ldr	r3, [r7, #32]
   1a1c8:	0018      	movs	r0, r3
   1a1ca:	4b32      	ldr	r3, [pc, #200]	; (1a294 <prvInitialiseNewQueue+0x15c>)
   1a1cc:	4798      	blx	r3
   1a1ce:	0003      	movs	r3, r0
   1a1d0:	b2db      	uxtb	r3, r3
   1a1d2:	0019      	movs	r1, r3
   1a1d4:	0020      	movs	r0, r4
   1a1d6:	4b30      	ldr	r3, [pc, #192]	; (1a298 <prvInitialiseNewQueue+0x160>)
   1a1d8:	4798      	blx	r3
   1a1da:	4b30      	ldr	r3, [pc, #192]	; (1a29c <prvInitialiseNewQueue+0x164>)
   1a1dc:	4798      	blx	r3
   1a1de:	0003      	movs	r3, r0
   1a1e0:	0018      	movs	r0, r3
   1a1e2:	4b2f      	ldr	r3, [pc, #188]	; (1a2a0 <prvInitialiseNewQueue+0x168>)
   1a1e4:	4798      	blx	r3
   1a1e6:	0003      	movs	r3, r0
   1a1e8:	001a      	movs	r2, r3
   1a1ea:	4b2e      	ldr	r3, [pc, #184]	; (1a2a4 <prvInitialiseNewQueue+0x16c>)
   1a1ec:	881b      	ldrh	r3, [r3, #0]
   1a1ee:	4013      	ands	r3, r2
   1a1f0:	b29b      	uxth	r3, r3
   1a1f2:	2b00      	cmp	r3, #0
   1a1f4:	d029      	beq.n	1a24a <prvInitialiseNewQueue+0x112>
   1a1f6:	6a3b      	ldr	r3, [r7, #32]
   1a1f8:	0018      	movs	r0, r3
   1a1fa:	4b2b      	ldr	r3, [pc, #172]	; (1a2a8 <prvInitialiseNewQueue+0x170>)
   1a1fc:	4798      	blx	r3
   1a1fe:	0003      	movs	r3, r0
   1a200:	001a      	movs	r2, r3
   1a202:	4b28      	ldr	r3, [pc, #160]	; (1a2a4 <prvInitialiseNewQueue+0x16c>)
   1a204:	881b      	ldrh	r3, [r3, #0]
   1a206:	4013      	ands	r3, r2
   1a208:	b29b      	uxth	r3, r3
   1a20a:	2b00      	cmp	r3, #0
   1a20c:	d01d      	beq.n	1a24a <prvInitialiseNewQueue+0x112>
   1a20e:	6a3b      	ldr	r3, [r7, #32]
   1a210:	0018      	movs	r0, r3
   1a212:	4b1a      	ldr	r3, [pc, #104]	; (1a27c <prvInitialiseNewQueue+0x144>)
   1a214:	4798      	blx	r3
   1a216:	0003      	movs	r3, r0
   1a218:	001a      	movs	r2, r3
   1a21a:	4b19      	ldr	r3, [pc, #100]	; (1a280 <prvInitialiseNewQueue+0x148>)
   1a21c:	5c9b      	ldrb	r3, [r3, r2]
   1a21e:	3318      	adds	r3, #24
   1a220:	b2db      	uxtb	r3, r3
   1a222:	001d      	movs	r5, r3
   1a224:	6a3b      	ldr	r3, [r7, #32]
   1a226:	0018      	movs	r0, r3
   1a228:	4b14      	ldr	r3, [pc, #80]	; (1a27c <prvInitialiseNewQueue+0x144>)
   1a22a:	4798      	blx	r3
   1a22c:	0003      	movs	r3, r0
   1a22e:	001a      	movs	r2, r3
   1a230:	4b13      	ldr	r3, [pc, #76]	; (1a280 <prvInitialiseNewQueue+0x148>)
   1a232:	5c9c      	ldrb	r4, [r3, r2]
   1a234:	6a3b      	ldr	r3, [r7, #32]
   1a236:	0018      	movs	r0, r3
   1a238:	4b16      	ldr	r3, [pc, #88]	; (1a294 <prvInitialiseNewQueue+0x15c>)
   1a23a:	4798      	blx	r3
   1a23c:	0003      	movs	r3, r0
   1a23e:	b2db      	uxtb	r3, r3
   1a240:	001a      	movs	r2, r3
   1a242:	0021      	movs	r1, r4
   1a244:	0028      	movs	r0, r5
   1a246:	4b19      	ldr	r3, [pc, #100]	; (1a2ac <prvInitialiseNewQueue+0x174>)
   1a248:	4798      	blx	r3
   1a24a:	6a3b      	ldr	r3, [r7, #32]
   1a24c:	0018      	movs	r0, r3
   1a24e:	4b0b      	ldr	r3, [pc, #44]	; (1a27c <prvInitialiseNewQueue+0x144>)
   1a250:	4798      	blx	r3
   1a252:	0003      	movs	r3, r0
   1a254:	001a      	movs	r2, r3
   1a256:	4b0a      	ldr	r3, [pc, #40]	; (1a280 <prvInitialiseNewQueue+0x148>)
   1a258:	5c9c      	ldrb	r4, [r3, r2]
   1a25a:	6a3b      	ldr	r3, [r7, #32]
   1a25c:	0018      	movs	r0, r3
   1a25e:	4b0d      	ldr	r3, [pc, #52]	; (1a294 <prvInitialiseNewQueue+0x15c>)
   1a260:	4798      	blx	r3
   1a262:	0003      	movs	r3, r0
   1a264:	b2db      	uxtb	r3, r3
   1a266:	2200      	movs	r2, #0
   1a268:	0019      	movs	r1, r3
   1a26a:	0020      	movs	r0, r4
   1a26c:	4b10      	ldr	r3, [pc, #64]	; (1a2b0 <prvInitialiseNewQueue+0x178>)
   1a26e:	4798      	blx	r3
}
   1a270:	46c0      	nop			; (mov r8, r8)
   1a272:	46bd      	mov	sp, r7
   1a274:	b004      	add	sp, #16
   1a276:	bdb0      	pop	{r4, r5, r7, pc}
   1a278:	00019fc9 	.word	0x00019fc9
   1a27c:	00017d4d 	.word	0x00017d4d
   1a280:	200000f8 	.word	0x200000f8
   1a284:	0001930d 	.word	0x0001930d
   1a288:	00017e71 	.word	0x00017e71
   1a28c:	20000106 	.word	0x20000106
   1a290:	00017ead 	.word	0x00017ead
   1a294:	00017e2d 	.word	0x00017e2d
   1a298:	000194a5 	.word	0x000194a5
   1a29c:	00018029 	.word	0x00018029
   1a2a0:	00017d8d 	.word	0x00017d8d
   1a2a4:	20000104 	.word	0x20000104
   1a2a8:	00017e4d 	.word	0x00017e4d
   1a2ac:	00018785 	.word	0x00018785
   1a2b0:	00018de1 	.word	0x00018de1

0001a2b4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1a2b4:	b590      	push	{r4, r7, lr}
   1a2b6:	b083      	sub	sp, #12
   1a2b8:	af00      	add	r7, sp, #0
   1a2ba:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1a2bc:	687b      	ldr	r3, [r7, #4]
   1a2be:	2b00      	cmp	r3, #0
   1a2c0:	d00e      	beq.n	1a2e0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1a2c2:	687b      	ldr	r3, [r7, #4]
   1a2c4:	2200      	movs	r2, #0
   1a2c6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1a2c8:	687b      	ldr	r3, [r7, #4]
   1a2ca:	2200      	movs	r2, #0
   1a2cc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1a2ce:	687b      	ldr	r3, [r7, #4]
   1a2d0:	2200      	movs	r2, #0
   1a2d2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1a2d4:	6878      	ldr	r0, [r7, #4]
   1a2d6:	2300      	movs	r3, #0
   1a2d8:	2200      	movs	r2, #0
   1a2da:	2100      	movs	r1, #0
   1a2dc:	4c02      	ldr	r4, [pc, #8]	; (1a2e8 <prvInitialiseMutex+0x34>)
   1a2de:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1a2e0:	46c0      	nop			; (mov r8, r8)
   1a2e2:	46bd      	mov	sp, r7
   1a2e4:	b003      	add	sp, #12
   1a2e6:	bd90      	pop	{r4, r7, pc}
   1a2e8:	0001a32d 	.word	0x0001a32d

0001a2ec <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1a2ec:	b580      	push	{r7, lr}
   1a2ee:	b086      	sub	sp, #24
   1a2f0:	af00      	add	r7, sp, #0
   1a2f2:	0002      	movs	r2, r0
   1a2f4:	1dfb      	adds	r3, r7, #7
   1a2f6:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1a2f8:	2301      	movs	r3, #1
   1a2fa:	617b      	str	r3, [r7, #20]
   1a2fc:	2300      	movs	r3, #0
   1a2fe:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1a300:	1dfb      	adds	r3, r7, #7
   1a302:	781a      	ldrb	r2, [r3, #0]
   1a304:	6939      	ldr	r1, [r7, #16]
   1a306:	697b      	ldr	r3, [r7, #20]
   1a308:	0018      	movs	r0, r3
   1a30a:	4b06      	ldr	r3, [pc, #24]	; (1a324 <xQueueCreateMutex+0x38>)
   1a30c:	4798      	blx	r3
   1a30e:	0003      	movs	r3, r0
   1a310:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1a312:	68fb      	ldr	r3, [r7, #12]
   1a314:	0018      	movs	r0, r3
   1a316:	4b04      	ldr	r3, [pc, #16]	; (1a328 <xQueueCreateMutex+0x3c>)
   1a318:	4798      	blx	r3

		return pxNewQueue;
   1a31a:	68fb      	ldr	r3, [r7, #12]
	}
   1a31c:	0018      	movs	r0, r3
   1a31e:	46bd      	mov	sp, r7
   1a320:	b006      	add	sp, #24
   1a322:	bd80      	pop	{r7, pc}
   1a324:	0001a085 	.word	0x0001a085
   1a328:	0001a2b5 	.word	0x0001a2b5

0001a32c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1a32c:	b5b0      	push	{r4, r5, r7, lr}
   1a32e:	b08a      	sub	sp, #40	; 0x28
   1a330:	af00      	add	r7, sp, #0
   1a332:	60f8      	str	r0, [r7, #12]
   1a334:	60b9      	str	r1, [r7, #8]
   1a336:	607a      	str	r2, [r7, #4]
   1a338:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1a33a:	2300      	movs	r3, #0
   1a33c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a33e:	68fb      	ldr	r3, [r7, #12]
   1a340:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1a342:	6a3b      	ldr	r3, [r7, #32]
   1a344:	2b00      	cmp	r3, #0
   1a346:	d101      	bne.n	1a34c <xQueueGenericSend+0x20>
   1a348:	b672      	cpsid	i
   1a34a:	e7fe      	b.n	1a34a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a34c:	68bb      	ldr	r3, [r7, #8]
   1a34e:	2b00      	cmp	r3, #0
   1a350:	d103      	bne.n	1a35a <xQueueGenericSend+0x2e>
   1a352:	6a3b      	ldr	r3, [r7, #32]
   1a354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a356:	2b00      	cmp	r3, #0
   1a358:	d101      	bne.n	1a35e <xQueueGenericSend+0x32>
   1a35a:	2301      	movs	r3, #1
   1a35c:	e000      	b.n	1a360 <xQueueGenericSend+0x34>
   1a35e:	2300      	movs	r3, #0
   1a360:	2b00      	cmp	r3, #0
   1a362:	d101      	bne.n	1a368 <xQueueGenericSend+0x3c>
   1a364:	b672      	cpsid	i
   1a366:	e7fe      	b.n	1a366 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1a368:	683b      	ldr	r3, [r7, #0]
   1a36a:	2b02      	cmp	r3, #2
   1a36c:	d103      	bne.n	1a376 <xQueueGenericSend+0x4a>
   1a36e:	6a3b      	ldr	r3, [r7, #32]
   1a370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a372:	2b01      	cmp	r3, #1
   1a374:	d101      	bne.n	1a37a <xQueueGenericSend+0x4e>
   1a376:	2301      	movs	r3, #1
   1a378:	e000      	b.n	1a37c <xQueueGenericSend+0x50>
   1a37a:	2300      	movs	r3, #0
   1a37c:	2b00      	cmp	r3, #0
   1a37e:	d101      	bne.n	1a384 <xQueueGenericSend+0x58>
   1a380:	b672      	cpsid	i
   1a382:	e7fe      	b.n	1a382 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a384:	4bbc      	ldr	r3, [pc, #752]	; (1a678 <xQueueGenericSend+0x34c>)
   1a386:	4798      	blx	r3
   1a388:	1e03      	subs	r3, r0, #0
   1a38a:	d102      	bne.n	1a392 <xQueueGenericSend+0x66>
   1a38c:	687b      	ldr	r3, [r7, #4]
   1a38e:	2b00      	cmp	r3, #0
   1a390:	d101      	bne.n	1a396 <xQueueGenericSend+0x6a>
   1a392:	2301      	movs	r3, #1
   1a394:	e000      	b.n	1a398 <xQueueGenericSend+0x6c>
   1a396:	2300      	movs	r3, #0
   1a398:	2b00      	cmp	r3, #0
   1a39a:	d101      	bne.n	1a3a0 <xQueueGenericSend+0x74>
   1a39c:	b672      	cpsid	i
   1a39e:	e7fe      	b.n	1a39e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1a3a0:	4bb6      	ldr	r3, [pc, #728]	; (1a67c <xQueueGenericSend+0x350>)
   1a3a2:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1a3a4:	6a3b      	ldr	r3, [r7, #32]
   1a3a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a3a8:	6a3b      	ldr	r3, [r7, #32]
   1a3aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a3ac:	429a      	cmp	r2, r3
   1a3ae:	d303      	bcc.n	1a3b8 <xQueueGenericSend+0x8c>
   1a3b0:	683b      	ldr	r3, [r7, #0]
   1a3b2:	2b02      	cmp	r3, #2
   1a3b4:	d000      	beq.n	1a3b8 <xQueueGenericSend+0x8c>
   1a3b6:	e08e      	b.n	1a4d6 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1a3b8:	4bb1      	ldr	r3, [pc, #708]	; (1a680 <xQueueGenericSend+0x354>)
   1a3ba:	4798      	blx	r3
   1a3bc:	0003      	movs	r3, r0
   1a3be:	0018      	movs	r0, r3
   1a3c0:	4bb0      	ldr	r3, [pc, #704]	; (1a684 <xQueueGenericSend+0x358>)
   1a3c2:	4798      	blx	r3
   1a3c4:	0003      	movs	r3, r0
   1a3c6:	001a      	movs	r2, r3
   1a3c8:	4baf      	ldr	r3, [pc, #700]	; (1a688 <xQueueGenericSend+0x35c>)
   1a3ca:	881b      	ldrh	r3, [r3, #0]
   1a3cc:	4013      	ands	r3, r2
   1a3ce:	b29b      	uxth	r3, r3
   1a3d0:	2b00      	cmp	r3, #0
   1a3d2:	d02e      	beq.n	1a432 <xQueueGenericSend+0x106>
   1a3d4:	6a3b      	ldr	r3, [r7, #32]
   1a3d6:	0018      	movs	r0, r3
   1a3d8:	4bac      	ldr	r3, [pc, #688]	; (1a68c <xQueueGenericSend+0x360>)
   1a3da:	4798      	blx	r3
   1a3dc:	0003      	movs	r3, r0
   1a3de:	001a      	movs	r2, r3
   1a3e0:	4ba9      	ldr	r3, [pc, #676]	; (1a688 <xQueueGenericSend+0x35c>)
   1a3e2:	881b      	ldrh	r3, [r3, #0]
   1a3e4:	4013      	ands	r3, r2
   1a3e6:	b29b      	uxth	r3, r3
   1a3e8:	2b00      	cmp	r3, #0
   1a3ea:	d022      	beq.n	1a432 <xQueueGenericSend+0x106>
   1a3ec:	683b      	ldr	r3, [r7, #0]
   1a3ee:	2b00      	cmp	r3, #0
   1a3f0:	d10b      	bne.n	1a40a <xQueueGenericSend+0xde>
   1a3f2:	6a3b      	ldr	r3, [r7, #32]
   1a3f4:	0018      	movs	r0, r3
   1a3f6:	4ba6      	ldr	r3, [pc, #664]	; (1a690 <xQueueGenericSend+0x364>)
   1a3f8:	4798      	blx	r3
   1a3fa:	0003      	movs	r3, r0
   1a3fc:	001a      	movs	r2, r3
   1a3fe:	4ba5      	ldr	r3, [pc, #660]	; (1a694 <xQueueGenericSend+0x368>)
   1a400:	5c9b      	ldrb	r3, [r3, r2]
   1a402:	3320      	adds	r3, #32
   1a404:	b2db      	uxtb	r3, r3
   1a406:	001d      	movs	r5, r3
   1a408:	e000      	b.n	1a40c <xQueueGenericSend+0xe0>
   1a40a:	2525      	movs	r5, #37	; 0x25
   1a40c:	6a3b      	ldr	r3, [r7, #32]
   1a40e:	0018      	movs	r0, r3
   1a410:	4b9f      	ldr	r3, [pc, #636]	; (1a690 <xQueueGenericSend+0x364>)
   1a412:	4798      	blx	r3
   1a414:	0003      	movs	r3, r0
   1a416:	001a      	movs	r2, r3
   1a418:	4b9e      	ldr	r3, [pc, #632]	; (1a694 <xQueueGenericSend+0x368>)
   1a41a:	5c9c      	ldrb	r4, [r3, r2]
   1a41c:	6a3b      	ldr	r3, [r7, #32]
   1a41e:	0018      	movs	r0, r3
   1a420:	4b9d      	ldr	r3, [pc, #628]	; (1a698 <xQueueGenericSend+0x36c>)
   1a422:	4798      	blx	r3
   1a424:	0003      	movs	r3, r0
   1a426:	b2db      	uxtb	r3, r3
   1a428:	001a      	movs	r2, r3
   1a42a:	0021      	movs	r1, r4
   1a42c:	0028      	movs	r0, r5
   1a42e:	4b9b      	ldr	r3, [pc, #620]	; (1a69c <xQueueGenericSend+0x370>)
   1a430:	4798      	blx	r3
   1a432:	6a3b      	ldr	r3, [r7, #32]
   1a434:	0018      	movs	r0, r3
   1a436:	4b96      	ldr	r3, [pc, #600]	; (1a690 <xQueueGenericSend+0x364>)
   1a438:	4798      	blx	r3
   1a43a:	0003      	movs	r3, r0
   1a43c:	001a      	movs	r2, r3
   1a43e:	4b95      	ldr	r3, [pc, #596]	; (1a694 <xQueueGenericSend+0x368>)
   1a440:	5c9c      	ldrb	r4, [r3, r2]
   1a442:	6a3b      	ldr	r3, [r7, #32]
   1a444:	0018      	movs	r0, r3
   1a446:	4b94      	ldr	r3, [pc, #592]	; (1a698 <xQueueGenericSend+0x36c>)
   1a448:	4798      	blx	r3
   1a44a:	0003      	movs	r3, r0
   1a44c:	b2dd      	uxtb	r5, r3
   1a44e:	6a3b      	ldr	r3, [r7, #32]
   1a450:	0018      	movs	r0, r3
   1a452:	4b8f      	ldr	r3, [pc, #572]	; (1a690 <xQueueGenericSend+0x364>)
   1a454:	4798      	blx	r3
   1a456:	0003      	movs	r3, r0
   1a458:	001a      	movs	r2, r3
   1a45a:	4b8e      	ldr	r3, [pc, #568]	; (1a694 <xQueueGenericSend+0x368>)
   1a45c:	5c9b      	ldrb	r3, [r3, r2]
   1a45e:	2b02      	cmp	r3, #2
   1a460:	d005      	beq.n	1a46e <xQueueGenericSend+0x142>
   1a462:	6a3b      	ldr	r3, [r7, #32]
   1a464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a466:	b2db      	uxtb	r3, r3
   1a468:	3301      	adds	r3, #1
   1a46a:	b2db      	uxtb	r3, r3
   1a46c:	e000      	b.n	1a470 <xQueueGenericSend+0x144>
   1a46e:	2300      	movs	r3, #0
   1a470:	001a      	movs	r2, r3
   1a472:	0029      	movs	r1, r5
   1a474:	0020      	movs	r0, r4
   1a476:	4b8a      	ldr	r3, [pc, #552]	; (1a6a0 <xQueueGenericSend+0x374>)
   1a478:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1a47a:	683a      	ldr	r2, [r7, #0]
   1a47c:	68b9      	ldr	r1, [r7, #8]
   1a47e:	6a3b      	ldr	r3, [r7, #32]
   1a480:	0018      	movs	r0, r3
   1a482:	4b88      	ldr	r3, [pc, #544]	; (1a6a4 <xQueueGenericSend+0x378>)
   1a484:	4798      	blx	r3
   1a486:	0003      	movs	r3, r0
   1a488:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1a48a:	6a3b      	ldr	r3, [r7, #32]
   1a48c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a48e:	2b00      	cmp	r3, #0
   1a490:	d00a      	beq.n	1a4a8 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1a492:	683a      	ldr	r2, [r7, #0]
   1a494:	6a3b      	ldr	r3, [r7, #32]
   1a496:	0011      	movs	r1, r2
   1a498:	0018      	movs	r0, r3
   1a49a:	4b83      	ldr	r3, [pc, #524]	; (1a6a8 <xQueueGenericSend+0x37c>)
   1a49c:	4798      	blx	r3
   1a49e:	1e03      	subs	r3, r0, #0
   1a4a0:	d015      	beq.n	1a4ce <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1a4a2:	4b82      	ldr	r3, [pc, #520]	; (1a6ac <xQueueGenericSend+0x380>)
   1a4a4:	4798      	blx	r3
   1a4a6:	e012      	b.n	1a4ce <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a4a8:	6a3b      	ldr	r3, [r7, #32]
   1a4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a4ac:	2b00      	cmp	r3, #0
   1a4ae:	d009      	beq.n	1a4c4 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a4b0:	6a3b      	ldr	r3, [r7, #32]
   1a4b2:	3324      	adds	r3, #36	; 0x24
   1a4b4:	0018      	movs	r0, r3
   1a4b6:	4b7e      	ldr	r3, [pc, #504]	; (1a6b0 <xQueueGenericSend+0x384>)
   1a4b8:	4798      	blx	r3
   1a4ba:	1e03      	subs	r3, r0, #0
   1a4bc:	d007      	beq.n	1a4ce <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1a4be:	4b7b      	ldr	r3, [pc, #492]	; (1a6ac <xQueueGenericSend+0x380>)
   1a4c0:	4798      	blx	r3
   1a4c2:	e004      	b.n	1a4ce <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1a4c4:	69fb      	ldr	r3, [r7, #28]
   1a4c6:	2b00      	cmp	r3, #0
   1a4c8:	d001      	beq.n	1a4ce <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1a4ca:	4b78      	ldr	r3, [pc, #480]	; (1a6ac <xQueueGenericSend+0x380>)
   1a4cc:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1a4ce:	4b79      	ldr	r3, [pc, #484]	; (1a6b4 <xQueueGenericSend+0x388>)
   1a4d0:	4798      	blx	r3
				return pdPASS;
   1a4d2:	2301      	movs	r3, #1
   1a4d4:	e142      	b.n	1a75c <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1a4d6:	687b      	ldr	r3, [r7, #4]
   1a4d8:	2b00      	cmp	r3, #0
   1a4da:	d140      	bne.n	1a55e <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1a4dc:	4b75      	ldr	r3, [pc, #468]	; (1a6b4 <xQueueGenericSend+0x388>)
   1a4de:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1a4e0:	4b67      	ldr	r3, [pc, #412]	; (1a680 <xQueueGenericSend+0x354>)
   1a4e2:	4798      	blx	r3
   1a4e4:	0003      	movs	r3, r0
   1a4e6:	0018      	movs	r0, r3
   1a4e8:	4b66      	ldr	r3, [pc, #408]	; (1a684 <xQueueGenericSend+0x358>)
   1a4ea:	4798      	blx	r3
   1a4ec:	0003      	movs	r3, r0
   1a4ee:	001a      	movs	r2, r3
   1a4f0:	4b65      	ldr	r3, [pc, #404]	; (1a688 <xQueueGenericSend+0x35c>)
   1a4f2:	881b      	ldrh	r3, [r3, #0]
   1a4f4:	4013      	ands	r3, r2
   1a4f6:	b29b      	uxth	r3, r3
   1a4f8:	2b00      	cmp	r3, #0
   1a4fa:	d02e      	beq.n	1a55a <xQueueGenericSend+0x22e>
   1a4fc:	6a3b      	ldr	r3, [r7, #32]
   1a4fe:	0018      	movs	r0, r3
   1a500:	4b62      	ldr	r3, [pc, #392]	; (1a68c <xQueueGenericSend+0x360>)
   1a502:	4798      	blx	r3
   1a504:	0003      	movs	r3, r0
   1a506:	001a      	movs	r2, r3
   1a508:	4b5f      	ldr	r3, [pc, #380]	; (1a688 <xQueueGenericSend+0x35c>)
   1a50a:	881b      	ldrh	r3, [r3, #0]
   1a50c:	4013      	ands	r3, r2
   1a50e:	b29b      	uxth	r3, r3
   1a510:	2b00      	cmp	r3, #0
   1a512:	d022      	beq.n	1a55a <xQueueGenericSend+0x22e>
   1a514:	683b      	ldr	r3, [r7, #0]
   1a516:	2b00      	cmp	r3, #0
   1a518:	d10b      	bne.n	1a532 <xQueueGenericSend+0x206>
   1a51a:	6a3b      	ldr	r3, [r7, #32]
   1a51c:	0018      	movs	r0, r3
   1a51e:	4b5c      	ldr	r3, [pc, #368]	; (1a690 <xQueueGenericSend+0x364>)
   1a520:	4798      	blx	r3
   1a522:	0003      	movs	r3, r0
   1a524:	001a      	movs	r2, r3
   1a526:	4b5b      	ldr	r3, [pc, #364]	; (1a694 <xQueueGenericSend+0x368>)
   1a528:	5c9b      	ldrb	r3, [r3, r2]
   1a52a:	3348      	adds	r3, #72	; 0x48
   1a52c:	b2db      	uxtb	r3, r3
   1a52e:	001d      	movs	r5, r3
   1a530:	e000      	b.n	1a534 <xQueueGenericSend+0x208>
   1a532:	254d      	movs	r5, #77	; 0x4d
   1a534:	6a3b      	ldr	r3, [r7, #32]
   1a536:	0018      	movs	r0, r3
   1a538:	4b55      	ldr	r3, [pc, #340]	; (1a690 <xQueueGenericSend+0x364>)
   1a53a:	4798      	blx	r3
   1a53c:	0003      	movs	r3, r0
   1a53e:	001a      	movs	r2, r3
   1a540:	4b54      	ldr	r3, [pc, #336]	; (1a694 <xQueueGenericSend+0x368>)
   1a542:	5c9c      	ldrb	r4, [r3, r2]
   1a544:	6a3b      	ldr	r3, [r7, #32]
   1a546:	0018      	movs	r0, r3
   1a548:	4b53      	ldr	r3, [pc, #332]	; (1a698 <xQueueGenericSend+0x36c>)
   1a54a:	4798      	blx	r3
   1a54c:	0003      	movs	r3, r0
   1a54e:	b2db      	uxtb	r3, r3
   1a550:	001a      	movs	r2, r3
   1a552:	0021      	movs	r1, r4
   1a554:	0028      	movs	r0, r5
   1a556:	4b51      	ldr	r3, [pc, #324]	; (1a69c <xQueueGenericSend+0x370>)
   1a558:	4798      	blx	r3
					return errQUEUE_FULL;
   1a55a:	2300      	movs	r3, #0
   1a55c:	e0fe      	b.n	1a75c <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1a55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a560:	2b00      	cmp	r3, #0
   1a562:	d106      	bne.n	1a572 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1a564:	2314      	movs	r3, #20
   1a566:	18fb      	adds	r3, r7, r3
   1a568:	0018      	movs	r0, r3
   1a56a:	4b53      	ldr	r3, [pc, #332]	; (1a6b8 <xQueueGenericSend+0x38c>)
   1a56c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1a56e:	2301      	movs	r3, #1
   1a570:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1a572:	4b50      	ldr	r3, [pc, #320]	; (1a6b4 <xQueueGenericSend+0x388>)
   1a574:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1a576:	4b51      	ldr	r3, [pc, #324]	; (1a6bc <xQueueGenericSend+0x390>)
   1a578:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1a57a:	4b40      	ldr	r3, [pc, #256]	; (1a67c <xQueueGenericSend+0x350>)
   1a57c:	4798      	blx	r3
   1a57e:	6a3b      	ldr	r3, [r7, #32]
   1a580:	2244      	movs	r2, #68	; 0x44
   1a582:	5c9b      	ldrb	r3, [r3, r2]
   1a584:	b25b      	sxtb	r3, r3
   1a586:	3301      	adds	r3, #1
   1a588:	d103      	bne.n	1a592 <xQueueGenericSend+0x266>
   1a58a:	6a3b      	ldr	r3, [r7, #32]
   1a58c:	2244      	movs	r2, #68	; 0x44
   1a58e:	2100      	movs	r1, #0
   1a590:	5499      	strb	r1, [r3, r2]
   1a592:	6a3b      	ldr	r3, [r7, #32]
   1a594:	2245      	movs	r2, #69	; 0x45
   1a596:	5c9b      	ldrb	r3, [r3, r2]
   1a598:	b25b      	sxtb	r3, r3
   1a59a:	3301      	adds	r3, #1
   1a59c:	d103      	bne.n	1a5a6 <xQueueGenericSend+0x27a>
   1a59e:	6a3b      	ldr	r3, [r7, #32]
   1a5a0:	2245      	movs	r2, #69	; 0x45
   1a5a2:	2100      	movs	r1, #0
   1a5a4:	5499      	strb	r1, [r3, r2]
   1a5a6:	4b43      	ldr	r3, [pc, #268]	; (1a6b4 <xQueueGenericSend+0x388>)
   1a5a8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1a5aa:	1d3a      	adds	r2, r7, #4
   1a5ac:	2314      	movs	r3, #20
   1a5ae:	18fb      	adds	r3, r7, r3
   1a5b0:	0011      	movs	r1, r2
   1a5b2:	0018      	movs	r0, r3
   1a5b4:	4b42      	ldr	r3, [pc, #264]	; (1a6c0 <xQueueGenericSend+0x394>)
   1a5b6:	4798      	blx	r3
   1a5b8:	1e03      	subs	r3, r0, #0
   1a5ba:	d000      	beq.n	1a5be <xQueueGenericSend+0x292>
   1a5bc:	e08a      	b.n	1a6d4 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1a5be:	6a3b      	ldr	r3, [r7, #32]
   1a5c0:	0018      	movs	r0, r3
   1a5c2:	4b40      	ldr	r3, [pc, #256]	; (1a6c4 <xQueueGenericSend+0x398>)
   1a5c4:	4798      	blx	r3
   1a5c6:	1e03      	subs	r3, r0, #0
   1a5c8:	d04f      	beq.n	1a66a <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1a5ca:	4b2d      	ldr	r3, [pc, #180]	; (1a680 <xQueueGenericSend+0x354>)
   1a5cc:	4798      	blx	r3
   1a5ce:	0003      	movs	r3, r0
   1a5d0:	0018      	movs	r0, r3
   1a5d2:	4b2c      	ldr	r3, [pc, #176]	; (1a684 <xQueueGenericSend+0x358>)
   1a5d4:	4798      	blx	r3
   1a5d6:	0003      	movs	r3, r0
   1a5d8:	001a      	movs	r2, r3
   1a5da:	4b2b      	ldr	r3, [pc, #172]	; (1a688 <xQueueGenericSend+0x35c>)
   1a5dc:	881b      	ldrh	r3, [r3, #0]
   1a5de:	4013      	ands	r3, r2
   1a5e0:	b29b      	uxth	r3, r3
   1a5e2:	2b00      	cmp	r3, #0
   1a5e4:	d02e      	beq.n	1a644 <xQueueGenericSend+0x318>
   1a5e6:	6a3b      	ldr	r3, [r7, #32]
   1a5e8:	0018      	movs	r0, r3
   1a5ea:	4b28      	ldr	r3, [pc, #160]	; (1a68c <xQueueGenericSend+0x360>)
   1a5ec:	4798      	blx	r3
   1a5ee:	0003      	movs	r3, r0
   1a5f0:	001a      	movs	r2, r3
   1a5f2:	4b25      	ldr	r3, [pc, #148]	; (1a688 <xQueueGenericSend+0x35c>)
   1a5f4:	881b      	ldrh	r3, [r3, #0]
   1a5f6:	4013      	ands	r3, r2
   1a5f8:	b29b      	uxth	r3, r3
   1a5fa:	2b00      	cmp	r3, #0
   1a5fc:	d022      	beq.n	1a644 <xQueueGenericSend+0x318>
   1a5fe:	683b      	ldr	r3, [r7, #0]
   1a600:	2b00      	cmp	r3, #0
   1a602:	d10b      	bne.n	1a61c <xQueueGenericSend+0x2f0>
   1a604:	6a3b      	ldr	r3, [r7, #32]
   1a606:	0018      	movs	r0, r3
   1a608:	4b21      	ldr	r3, [pc, #132]	; (1a690 <xQueueGenericSend+0x364>)
   1a60a:	4798      	blx	r3
   1a60c:	0003      	movs	r3, r0
   1a60e:	001a      	movs	r2, r3
   1a610:	4b20      	ldr	r3, [pc, #128]	; (1a694 <xQueueGenericSend+0x368>)
   1a612:	5c9b      	ldrb	r3, [r3, r2]
   1a614:	3370      	adds	r3, #112	; 0x70
   1a616:	b2db      	uxtb	r3, r3
   1a618:	001d      	movs	r5, r3
   1a61a:	e000      	b.n	1a61e <xQueueGenericSend+0x2f2>
   1a61c:	2575      	movs	r5, #117	; 0x75
   1a61e:	6a3b      	ldr	r3, [r7, #32]
   1a620:	0018      	movs	r0, r3
   1a622:	4b1b      	ldr	r3, [pc, #108]	; (1a690 <xQueueGenericSend+0x364>)
   1a624:	4798      	blx	r3
   1a626:	0003      	movs	r3, r0
   1a628:	001a      	movs	r2, r3
   1a62a:	4b1a      	ldr	r3, [pc, #104]	; (1a694 <xQueueGenericSend+0x368>)
   1a62c:	5c9c      	ldrb	r4, [r3, r2]
   1a62e:	6a3b      	ldr	r3, [r7, #32]
   1a630:	0018      	movs	r0, r3
   1a632:	4b19      	ldr	r3, [pc, #100]	; (1a698 <xQueueGenericSend+0x36c>)
   1a634:	4798      	blx	r3
   1a636:	0003      	movs	r3, r0
   1a638:	b2db      	uxtb	r3, r3
   1a63a:	001a      	movs	r2, r3
   1a63c:	0021      	movs	r1, r4
   1a63e:	0028      	movs	r0, r5
   1a640:	4b16      	ldr	r3, [pc, #88]	; (1a69c <xQueueGenericSend+0x370>)
   1a642:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1a644:	6a3b      	ldr	r3, [r7, #32]
   1a646:	3310      	adds	r3, #16
   1a648:	687a      	ldr	r2, [r7, #4]
   1a64a:	0011      	movs	r1, r2
   1a64c:	0018      	movs	r0, r3
   1a64e:	4b1e      	ldr	r3, [pc, #120]	; (1a6c8 <xQueueGenericSend+0x39c>)
   1a650:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1a652:	6a3b      	ldr	r3, [r7, #32]
   1a654:	0018      	movs	r0, r3
   1a656:	4b1d      	ldr	r3, [pc, #116]	; (1a6cc <xQueueGenericSend+0x3a0>)
   1a658:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1a65a:	4b1d      	ldr	r3, [pc, #116]	; (1a6d0 <xQueueGenericSend+0x3a4>)
   1a65c:	4798      	blx	r3
   1a65e:	1e03      	subs	r3, r0, #0
   1a660:	d000      	beq.n	1a664 <xQueueGenericSend+0x338>
   1a662:	e69d      	b.n	1a3a0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1a664:	4b11      	ldr	r3, [pc, #68]	; (1a6ac <xQueueGenericSend+0x380>)
   1a666:	4798      	blx	r3
   1a668:	e69a      	b.n	1a3a0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1a66a:	6a3b      	ldr	r3, [r7, #32]
   1a66c:	0018      	movs	r0, r3
   1a66e:	4b17      	ldr	r3, [pc, #92]	; (1a6cc <xQueueGenericSend+0x3a0>)
   1a670:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1a672:	4b17      	ldr	r3, [pc, #92]	; (1a6d0 <xQueueGenericSend+0x3a4>)
   1a674:	4798      	blx	r3
   1a676:	e693      	b.n	1a3a0 <xQueueGenericSend+0x74>
   1a678:	0001cab9 	.word	0x0001cab9
   1a67c:	00019d99 	.word	0x00019d99
   1a680:	00018029 	.word	0x00018029
   1a684:	00017d8d 	.word	0x00017d8d
   1a688:	20000104 	.word	0x20000104
   1a68c:	00017e4d 	.word	0x00017e4d
   1a690:	00017d4d 	.word	0x00017d4d
   1a694:	200000f8 	.word	0x200000f8
   1a698:	00017e2d 	.word	0x00017e2d
   1a69c:	00018785 	.word	0x00018785
   1a6a0:	00018de1 	.word	0x00018de1
   1a6a4:	0001b565 	.word	0x0001b565
   1a6a8:	0001b869 	.word	0x0001b869
   1a6ac:	00019d81 	.word	0x00019d81
   1a6b0:	0001c629 	.word	0x0001c629
   1a6b4:	00019dbd 	.word	0x00019dbd
   1a6b8:	0001c769 	.word	0x0001c769
   1a6bc:	0001c051 	.word	0x0001c051
   1a6c0:	0001c791 	.word	0x0001c791
   1a6c4:	0001b7b9 	.word	0x0001b7b9
   1a6c8:	0001c505 	.word	0x0001c505
   1a6cc:	0001b695 	.word	0x0001b695
   1a6d0:	0001c069 	.word	0x0001c069
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1a6d4:	6a3b      	ldr	r3, [r7, #32]
   1a6d6:	0018      	movs	r0, r3
   1a6d8:	4b22      	ldr	r3, [pc, #136]	; (1a764 <xQueueGenericSend+0x438>)
   1a6da:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1a6dc:	4b22      	ldr	r3, [pc, #136]	; (1a768 <xQueueGenericSend+0x43c>)
   1a6de:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1a6e0:	4b22      	ldr	r3, [pc, #136]	; (1a76c <xQueueGenericSend+0x440>)
   1a6e2:	4798      	blx	r3
   1a6e4:	0003      	movs	r3, r0
   1a6e6:	0018      	movs	r0, r3
   1a6e8:	4b21      	ldr	r3, [pc, #132]	; (1a770 <xQueueGenericSend+0x444>)
   1a6ea:	4798      	blx	r3
   1a6ec:	0003      	movs	r3, r0
   1a6ee:	001a      	movs	r2, r3
   1a6f0:	4b20      	ldr	r3, [pc, #128]	; (1a774 <xQueueGenericSend+0x448>)
   1a6f2:	881b      	ldrh	r3, [r3, #0]
   1a6f4:	4013      	ands	r3, r2
   1a6f6:	b29b      	uxth	r3, r3
   1a6f8:	2b00      	cmp	r3, #0
   1a6fa:	d02e      	beq.n	1a75a <xQueueGenericSend+0x42e>
   1a6fc:	6a3b      	ldr	r3, [r7, #32]
   1a6fe:	0018      	movs	r0, r3
   1a700:	4b1d      	ldr	r3, [pc, #116]	; (1a778 <xQueueGenericSend+0x44c>)
   1a702:	4798      	blx	r3
   1a704:	0003      	movs	r3, r0
   1a706:	001a      	movs	r2, r3
   1a708:	4b1a      	ldr	r3, [pc, #104]	; (1a774 <xQueueGenericSend+0x448>)
   1a70a:	881b      	ldrh	r3, [r3, #0]
   1a70c:	4013      	ands	r3, r2
   1a70e:	b29b      	uxth	r3, r3
   1a710:	2b00      	cmp	r3, #0
   1a712:	d022      	beq.n	1a75a <xQueueGenericSend+0x42e>
   1a714:	683b      	ldr	r3, [r7, #0]
   1a716:	2b00      	cmp	r3, #0
   1a718:	d10b      	bne.n	1a732 <xQueueGenericSend+0x406>
   1a71a:	6a3b      	ldr	r3, [r7, #32]
   1a71c:	0018      	movs	r0, r3
   1a71e:	4b17      	ldr	r3, [pc, #92]	; (1a77c <xQueueGenericSend+0x450>)
   1a720:	4798      	blx	r3
   1a722:	0003      	movs	r3, r0
   1a724:	001a      	movs	r2, r3
   1a726:	4b16      	ldr	r3, [pc, #88]	; (1a780 <xQueueGenericSend+0x454>)
   1a728:	5c9b      	ldrb	r3, [r3, r2]
   1a72a:	3348      	adds	r3, #72	; 0x48
   1a72c:	b2db      	uxtb	r3, r3
   1a72e:	001d      	movs	r5, r3
   1a730:	e000      	b.n	1a734 <xQueueGenericSend+0x408>
   1a732:	254d      	movs	r5, #77	; 0x4d
   1a734:	6a3b      	ldr	r3, [r7, #32]
   1a736:	0018      	movs	r0, r3
   1a738:	4b10      	ldr	r3, [pc, #64]	; (1a77c <xQueueGenericSend+0x450>)
   1a73a:	4798      	blx	r3
   1a73c:	0003      	movs	r3, r0
   1a73e:	001a      	movs	r2, r3
   1a740:	4b0f      	ldr	r3, [pc, #60]	; (1a780 <xQueueGenericSend+0x454>)
   1a742:	5c9c      	ldrb	r4, [r3, r2]
   1a744:	6a3b      	ldr	r3, [r7, #32]
   1a746:	0018      	movs	r0, r3
   1a748:	4b0e      	ldr	r3, [pc, #56]	; (1a784 <xQueueGenericSend+0x458>)
   1a74a:	4798      	blx	r3
   1a74c:	0003      	movs	r3, r0
   1a74e:	b2db      	uxtb	r3, r3
   1a750:	001a      	movs	r2, r3
   1a752:	0021      	movs	r1, r4
   1a754:	0028      	movs	r0, r5
   1a756:	4b0c      	ldr	r3, [pc, #48]	; (1a788 <xQueueGenericSend+0x45c>)
   1a758:	4798      	blx	r3
			return errQUEUE_FULL;
   1a75a:	2300      	movs	r3, #0
		}
	}
}
   1a75c:	0018      	movs	r0, r3
   1a75e:	46bd      	mov	sp, r7
   1a760:	b00a      	add	sp, #40	; 0x28
   1a762:	bdb0      	pop	{r4, r5, r7, pc}
   1a764:	0001b695 	.word	0x0001b695
   1a768:	0001c069 	.word	0x0001c069
   1a76c:	00018029 	.word	0x00018029
   1a770:	00017d8d 	.word	0x00017d8d
   1a774:	20000104 	.word	0x20000104
   1a778:	00017e4d 	.word	0x00017e4d
   1a77c:	00017d4d 	.word	0x00017d4d
   1a780:	200000f8 	.word	0x200000f8
   1a784:	00017e2d 	.word	0x00017e2d
   1a788:	00018785 	.word	0x00018785

0001a78c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1a78c:	b5b0      	push	{r4, r5, r7, lr}
   1a78e:	b088      	sub	sp, #32
   1a790:	af00      	add	r7, sp, #0
   1a792:	60f8      	str	r0, [r7, #12]
   1a794:	60b9      	str	r1, [r7, #8]
   1a796:	607a      	str	r2, [r7, #4]
   1a798:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a79a:	68fb      	ldr	r3, [r7, #12]
   1a79c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1a79e:	69bb      	ldr	r3, [r7, #24]
   1a7a0:	2b00      	cmp	r3, #0
   1a7a2:	d101      	bne.n	1a7a8 <xQueueGenericSendFromISR+0x1c>
   1a7a4:	b672      	cpsid	i
   1a7a6:	e7fe      	b.n	1a7a6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a7a8:	68bb      	ldr	r3, [r7, #8]
   1a7aa:	2b00      	cmp	r3, #0
   1a7ac:	d103      	bne.n	1a7b6 <xQueueGenericSendFromISR+0x2a>
   1a7ae:	69bb      	ldr	r3, [r7, #24]
   1a7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a7b2:	2b00      	cmp	r3, #0
   1a7b4:	d101      	bne.n	1a7ba <xQueueGenericSendFromISR+0x2e>
   1a7b6:	2301      	movs	r3, #1
   1a7b8:	e000      	b.n	1a7bc <xQueueGenericSendFromISR+0x30>
   1a7ba:	2300      	movs	r3, #0
   1a7bc:	2b00      	cmp	r3, #0
   1a7be:	d101      	bne.n	1a7c4 <xQueueGenericSendFromISR+0x38>
   1a7c0:	b672      	cpsid	i
   1a7c2:	e7fe      	b.n	1a7c2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1a7c4:	683b      	ldr	r3, [r7, #0]
   1a7c6:	2b02      	cmp	r3, #2
   1a7c8:	d103      	bne.n	1a7d2 <xQueueGenericSendFromISR+0x46>
   1a7ca:	69bb      	ldr	r3, [r7, #24]
   1a7cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a7ce:	2b01      	cmp	r3, #1
   1a7d0:	d101      	bne.n	1a7d6 <xQueueGenericSendFromISR+0x4a>
   1a7d2:	2301      	movs	r3, #1
   1a7d4:	e000      	b.n	1a7d8 <xQueueGenericSendFromISR+0x4c>
   1a7d6:	2300      	movs	r3, #0
   1a7d8:	2b00      	cmp	r3, #0
   1a7da:	d101      	bne.n	1a7e0 <xQueueGenericSendFromISR+0x54>
   1a7dc:	b672      	cpsid	i
   1a7de:	e7fe      	b.n	1a7de <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1a7e0:	4b68      	ldr	r3, [pc, #416]	; (1a984 <xQueueGenericSendFromISR+0x1f8>)
   1a7e2:	4798      	blx	r3
   1a7e4:	0003      	movs	r3, r0
   1a7e6:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1a7e8:	69bb      	ldr	r3, [r7, #24]
   1a7ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a7ec:	69bb      	ldr	r3, [r7, #24]
   1a7ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a7f0:	429a      	cmp	r2, r3
   1a7f2:	d303      	bcc.n	1a7fc <xQueueGenericSendFromISR+0x70>
   1a7f4:	683b      	ldr	r3, [r7, #0]
   1a7f6:	2b02      	cmp	r3, #2
   1a7f8:	d000      	beq.n	1a7fc <xQueueGenericSendFromISR+0x70>
   1a7fa:	e088      	b.n	1a90e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1a7fc:	2313      	movs	r3, #19
   1a7fe:	18fb      	adds	r3, r7, r3
   1a800:	69ba      	ldr	r2, [r7, #24]
   1a802:	2145      	movs	r1, #69	; 0x45
   1a804:	5c52      	ldrb	r2, [r2, r1]
   1a806:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1a808:	69bb      	ldr	r3, [r7, #24]
   1a80a:	0018      	movs	r0, r3
   1a80c:	4b5e      	ldr	r3, [pc, #376]	; (1a988 <xQueueGenericSendFromISR+0x1fc>)
   1a80e:	4798      	blx	r3
   1a810:	0003      	movs	r3, r0
   1a812:	001a      	movs	r2, r3
   1a814:	4b5d      	ldr	r3, [pc, #372]	; (1a98c <xQueueGenericSendFromISR+0x200>)
   1a816:	881b      	ldrh	r3, [r3, #0]
   1a818:	4013      	ands	r3, r2
   1a81a:	b29b      	uxth	r3, r3
   1a81c:	2b00      	cmp	r3, #0
   1a81e:	d022      	beq.n	1a866 <xQueueGenericSendFromISR+0xda>
   1a820:	683b      	ldr	r3, [r7, #0]
   1a822:	2b00      	cmp	r3, #0
   1a824:	d10b      	bne.n	1a83e <xQueueGenericSendFromISR+0xb2>
   1a826:	69bb      	ldr	r3, [r7, #24]
   1a828:	0018      	movs	r0, r3
   1a82a:	4b59      	ldr	r3, [pc, #356]	; (1a990 <xQueueGenericSendFromISR+0x204>)
   1a82c:	4798      	blx	r3
   1a82e:	0003      	movs	r3, r0
   1a830:	001a      	movs	r2, r3
   1a832:	4b58      	ldr	r3, [pc, #352]	; (1a994 <xQueueGenericSendFromISR+0x208>)
   1a834:	5c9b      	ldrb	r3, [r3, r2]
   1a836:	3330      	adds	r3, #48	; 0x30
   1a838:	b2db      	uxtb	r3, r3
   1a83a:	001d      	movs	r5, r3
   1a83c:	e000      	b.n	1a840 <xQueueGenericSendFromISR+0xb4>
   1a83e:	2535      	movs	r5, #53	; 0x35
   1a840:	69bb      	ldr	r3, [r7, #24]
   1a842:	0018      	movs	r0, r3
   1a844:	4b52      	ldr	r3, [pc, #328]	; (1a990 <xQueueGenericSendFromISR+0x204>)
   1a846:	4798      	blx	r3
   1a848:	0003      	movs	r3, r0
   1a84a:	001a      	movs	r2, r3
   1a84c:	4b51      	ldr	r3, [pc, #324]	; (1a994 <xQueueGenericSendFromISR+0x208>)
   1a84e:	5c9c      	ldrb	r4, [r3, r2]
   1a850:	69bb      	ldr	r3, [r7, #24]
   1a852:	0018      	movs	r0, r3
   1a854:	4b50      	ldr	r3, [pc, #320]	; (1a998 <xQueueGenericSendFromISR+0x20c>)
   1a856:	4798      	blx	r3
   1a858:	0003      	movs	r3, r0
   1a85a:	b2db      	uxtb	r3, r3
   1a85c:	001a      	movs	r2, r3
   1a85e:	0021      	movs	r1, r4
   1a860:	0028      	movs	r0, r5
   1a862:	4b4e      	ldr	r3, [pc, #312]	; (1a99c <xQueueGenericSendFromISR+0x210>)
   1a864:	4798      	blx	r3
   1a866:	69bb      	ldr	r3, [r7, #24]
   1a868:	0018      	movs	r0, r3
   1a86a:	4b49      	ldr	r3, [pc, #292]	; (1a990 <xQueueGenericSendFromISR+0x204>)
   1a86c:	4798      	blx	r3
   1a86e:	0003      	movs	r3, r0
   1a870:	001a      	movs	r2, r3
   1a872:	4b48      	ldr	r3, [pc, #288]	; (1a994 <xQueueGenericSendFromISR+0x208>)
   1a874:	5c9c      	ldrb	r4, [r3, r2]
   1a876:	69bb      	ldr	r3, [r7, #24]
   1a878:	0018      	movs	r0, r3
   1a87a:	4b47      	ldr	r3, [pc, #284]	; (1a998 <xQueueGenericSendFromISR+0x20c>)
   1a87c:	4798      	blx	r3
   1a87e:	0003      	movs	r3, r0
   1a880:	b2d9      	uxtb	r1, r3
   1a882:	69bb      	ldr	r3, [r7, #24]
   1a884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a886:	b2db      	uxtb	r3, r3
   1a888:	3301      	adds	r3, #1
   1a88a:	b2db      	uxtb	r3, r3
   1a88c:	001a      	movs	r2, r3
   1a88e:	0020      	movs	r0, r4
   1a890:	4b43      	ldr	r3, [pc, #268]	; (1a9a0 <xQueueGenericSendFromISR+0x214>)
   1a892:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1a894:	683a      	ldr	r2, [r7, #0]
   1a896:	68b9      	ldr	r1, [r7, #8]
   1a898:	69bb      	ldr	r3, [r7, #24]
   1a89a:	0018      	movs	r0, r3
   1a89c:	4b41      	ldr	r3, [pc, #260]	; (1a9a4 <xQueueGenericSendFromISR+0x218>)
   1a89e:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1a8a0:	2313      	movs	r3, #19
   1a8a2:	18fb      	adds	r3, r7, r3
   1a8a4:	781b      	ldrb	r3, [r3, #0]
   1a8a6:	b25b      	sxtb	r3, r3
   1a8a8:	3301      	adds	r3, #1
   1a8aa:	d124      	bne.n	1a8f6 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1a8ac:	69bb      	ldr	r3, [r7, #24]
   1a8ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a8b0:	2b00      	cmp	r3, #0
   1a8b2:	d00e      	beq.n	1a8d2 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1a8b4:	683a      	ldr	r2, [r7, #0]
   1a8b6:	69bb      	ldr	r3, [r7, #24]
   1a8b8:	0011      	movs	r1, r2
   1a8ba:	0018      	movs	r0, r3
   1a8bc:	4b3a      	ldr	r3, [pc, #232]	; (1a9a8 <xQueueGenericSendFromISR+0x21c>)
   1a8be:	4798      	blx	r3
   1a8c0:	1e03      	subs	r3, r0, #0
   1a8c2:	d021      	beq.n	1a908 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1a8c4:	687b      	ldr	r3, [r7, #4]
   1a8c6:	2b00      	cmp	r3, #0
   1a8c8:	d01e      	beq.n	1a908 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1a8ca:	687b      	ldr	r3, [r7, #4]
   1a8cc:	2201      	movs	r2, #1
   1a8ce:	601a      	str	r2, [r3, #0]
   1a8d0:	e01a      	b.n	1a908 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a8d2:	69bb      	ldr	r3, [r7, #24]
   1a8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a8d6:	2b00      	cmp	r3, #0
   1a8d8:	d016      	beq.n	1a908 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a8da:	69bb      	ldr	r3, [r7, #24]
   1a8dc:	3324      	adds	r3, #36	; 0x24
   1a8de:	0018      	movs	r0, r3
   1a8e0:	4b32      	ldr	r3, [pc, #200]	; (1a9ac <xQueueGenericSendFromISR+0x220>)
   1a8e2:	4798      	blx	r3
   1a8e4:	1e03      	subs	r3, r0, #0
   1a8e6:	d00f      	beq.n	1a908 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1a8e8:	687b      	ldr	r3, [r7, #4]
   1a8ea:	2b00      	cmp	r3, #0
   1a8ec:	d00c      	beq.n	1a908 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1a8ee:	687b      	ldr	r3, [r7, #4]
   1a8f0:	2201      	movs	r2, #1
   1a8f2:	601a      	str	r2, [r3, #0]
   1a8f4:	e008      	b.n	1a908 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1a8f6:	2313      	movs	r3, #19
   1a8f8:	18fb      	adds	r3, r7, r3
   1a8fa:	781b      	ldrb	r3, [r3, #0]
   1a8fc:	3301      	adds	r3, #1
   1a8fe:	b2db      	uxtb	r3, r3
   1a900:	b259      	sxtb	r1, r3
   1a902:	69bb      	ldr	r3, [r7, #24]
   1a904:	2245      	movs	r2, #69	; 0x45
   1a906:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1a908:	2301      	movs	r3, #1
   1a90a:	61fb      	str	r3, [r7, #28]
		{
   1a90c:	e030      	b.n	1a970 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1a90e:	69bb      	ldr	r3, [r7, #24]
   1a910:	0018      	movs	r0, r3
   1a912:	4b1d      	ldr	r3, [pc, #116]	; (1a988 <xQueueGenericSendFromISR+0x1fc>)
   1a914:	4798      	blx	r3
   1a916:	0003      	movs	r3, r0
   1a918:	001a      	movs	r2, r3
   1a91a:	4b1c      	ldr	r3, [pc, #112]	; (1a98c <xQueueGenericSendFromISR+0x200>)
   1a91c:	881b      	ldrh	r3, [r3, #0]
   1a91e:	4013      	ands	r3, r2
   1a920:	b29b      	uxth	r3, r3
   1a922:	2b00      	cmp	r3, #0
   1a924:	d022      	beq.n	1a96c <xQueueGenericSendFromISR+0x1e0>
   1a926:	683b      	ldr	r3, [r7, #0]
   1a928:	2b00      	cmp	r3, #0
   1a92a:	d10b      	bne.n	1a944 <xQueueGenericSendFromISR+0x1b8>
   1a92c:	69bb      	ldr	r3, [r7, #24]
   1a92e:	0018      	movs	r0, r3
   1a930:	4b17      	ldr	r3, [pc, #92]	; (1a990 <xQueueGenericSendFromISR+0x204>)
   1a932:	4798      	blx	r3
   1a934:	0003      	movs	r3, r0
   1a936:	001a      	movs	r2, r3
   1a938:	4b16      	ldr	r3, [pc, #88]	; (1a994 <xQueueGenericSendFromISR+0x208>)
   1a93a:	5c9b      	ldrb	r3, [r3, r2]
   1a93c:	3358      	adds	r3, #88	; 0x58
   1a93e:	b2db      	uxtb	r3, r3
   1a940:	001d      	movs	r5, r3
   1a942:	e000      	b.n	1a946 <xQueueGenericSendFromISR+0x1ba>
   1a944:	255d      	movs	r5, #93	; 0x5d
   1a946:	69bb      	ldr	r3, [r7, #24]
   1a948:	0018      	movs	r0, r3
   1a94a:	4b11      	ldr	r3, [pc, #68]	; (1a990 <xQueueGenericSendFromISR+0x204>)
   1a94c:	4798      	blx	r3
   1a94e:	0003      	movs	r3, r0
   1a950:	001a      	movs	r2, r3
   1a952:	4b10      	ldr	r3, [pc, #64]	; (1a994 <xQueueGenericSendFromISR+0x208>)
   1a954:	5c9c      	ldrb	r4, [r3, r2]
   1a956:	69bb      	ldr	r3, [r7, #24]
   1a958:	0018      	movs	r0, r3
   1a95a:	4b0f      	ldr	r3, [pc, #60]	; (1a998 <xQueueGenericSendFromISR+0x20c>)
   1a95c:	4798      	blx	r3
   1a95e:	0003      	movs	r3, r0
   1a960:	b2db      	uxtb	r3, r3
   1a962:	001a      	movs	r2, r3
   1a964:	0021      	movs	r1, r4
   1a966:	0028      	movs	r0, r5
   1a968:	4b0c      	ldr	r3, [pc, #48]	; (1a99c <xQueueGenericSendFromISR+0x210>)
   1a96a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1a96c:	2300      	movs	r3, #0
   1a96e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1a970:	697b      	ldr	r3, [r7, #20]
   1a972:	0018      	movs	r0, r3
   1a974:	4b0e      	ldr	r3, [pc, #56]	; (1a9b0 <xQueueGenericSendFromISR+0x224>)
   1a976:	4798      	blx	r3

	return xReturn;
   1a978:	69fb      	ldr	r3, [r7, #28]
}
   1a97a:	0018      	movs	r0, r3
   1a97c:	46bd      	mov	sp, r7
   1a97e:	b008      	add	sp, #32
   1a980:	bdb0      	pop	{r4, r5, r7, pc}
   1a982:	46c0      	nop			; (mov r8, r8)
   1a984:	00019ded 	.word	0x00019ded
   1a988:	00017e4d 	.word	0x00017e4d
   1a98c:	20000104 	.word	0x20000104
   1a990:	00017d4d 	.word	0x00017d4d
   1a994:	200000f8 	.word	0x200000f8
   1a998:	00017e2d 	.word	0x00017e2d
   1a99c:	00018785 	.word	0x00018785
   1a9a0:	00018de1 	.word	0x00018de1
   1a9a4:	0001b565 	.word	0x0001b565
   1a9a8:	0001b869 	.word	0x0001b869
   1a9ac:	0001c629 	.word	0x0001c629
   1a9b0:	00019df9 	.word	0x00019df9

0001a9b4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1a9b4:	b580      	push	{r7, lr}
   1a9b6:	b082      	sub	sp, #8
   1a9b8:	af00      	add	r7, sp, #0
   1a9ba:	6078      	str	r0, [r7, #4]
   1a9bc:	6039      	str	r1, [r7, #0]
   1a9be:	6839      	ldr	r1, [r7, #0]
   1a9c0:	687b      	ldr	r3, [r7, #4]
   1a9c2:	2200      	movs	r2, #0
   1a9c4:	0018      	movs	r0, r3
   1a9c6:	4b03      	ldr	r3, [pc, #12]	; (1a9d4 <xQueueGiveFromISR+0x20>)
   1a9c8:	4798      	blx	r3
   1a9ca:	0003      	movs	r3, r0
   1a9cc:	0018      	movs	r0, r3
   1a9ce:	46bd      	mov	sp, r7
   1a9d0:	b002      	add	sp, #8
   1a9d2:	bd80      	pop	{r7, pc}
   1a9d4:	0001a9d9 	.word	0x0001a9d9

0001a9d8 <MyWrapper>:
{
   1a9d8:	b5b0      	push	{r4, r5, r7, lr}
   1a9da:	b08a      	sub	sp, #40	; 0x28
   1a9dc:	af00      	add	r7, sp, #0
   1a9de:	60f8      	str	r0, [r7, #12]
   1a9e0:	60b9      	str	r1, [r7, #8]
   1a9e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a9e4:	68fb      	ldr	r3, [r7, #12]
   1a9e6:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1a9e8:	6a3b      	ldr	r3, [r7, #32]
   1a9ea:	2b00      	cmp	r3, #0
   1a9ec:	d101      	bne.n	1a9f2 <MyWrapper+0x1a>
   1a9ee:	b672      	cpsid	i
   1a9f0:	e7fe      	b.n	1a9f0 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1a9f2:	6a3b      	ldr	r3, [r7, #32]
   1a9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a9f6:	2b00      	cmp	r3, #0
   1a9f8:	d001      	beq.n	1a9fe <MyWrapper+0x26>
   1a9fa:	b672      	cpsid	i
   1a9fc:	e7fe      	b.n	1a9fc <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1a9fe:	6a3b      	ldr	r3, [r7, #32]
   1aa00:	681b      	ldr	r3, [r3, #0]
   1aa02:	2b00      	cmp	r3, #0
   1aa04:	d103      	bne.n	1aa0e <MyWrapper+0x36>
   1aa06:	6a3b      	ldr	r3, [r7, #32]
   1aa08:	685b      	ldr	r3, [r3, #4]
   1aa0a:	2b00      	cmp	r3, #0
   1aa0c:	d101      	bne.n	1aa12 <MyWrapper+0x3a>
   1aa0e:	2301      	movs	r3, #1
   1aa10:	e000      	b.n	1aa14 <MyWrapper+0x3c>
   1aa12:	2300      	movs	r3, #0
   1aa14:	2b00      	cmp	r3, #0
   1aa16:	d101      	bne.n	1aa1c <MyWrapper+0x44>
   1aa18:	b672      	cpsid	i
   1aa1a:	e7fe      	b.n	1aa1a <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1aa1c:	4b66      	ldr	r3, [pc, #408]	; (1abb8 <MyWrapper+0x1e0>)
   1aa1e:	4798      	blx	r3
   1aa20:	0003      	movs	r3, r0
   1aa22:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1aa24:	6a3b      	ldr	r3, [r7, #32]
   1aa26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1aa28:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1aa2a:	6a3b      	ldr	r3, [r7, #32]
   1aa2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1aa2e:	69bb      	ldr	r3, [r7, #24]
   1aa30:	429a      	cmp	r2, r3
   1aa32:	d800      	bhi.n	1aa36 <MyWrapper+0x5e>
   1aa34:	e085      	b.n	1ab42 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1aa36:	2317      	movs	r3, #23
   1aa38:	18fb      	adds	r3, r7, r3
   1aa3a:	6a3a      	ldr	r2, [r7, #32]
   1aa3c:	2145      	movs	r1, #69	; 0x45
   1aa3e:	5c52      	ldrb	r2, [r2, r1]
   1aa40:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1aa42:	6a3b      	ldr	r3, [r7, #32]
   1aa44:	0018      	movs	r0, r3
   1aa46:	4b5d      	ldr	r3, [pc, #372]	; (1abbc <MyWrapper+0x1e4>)
   1aa48:	4798      	blx	r3
   1aa4a:	0003      	movs	r3, r0
   1aa4c:	001a      	movs	r2, r3
   1aa4e:	4b5c      	ldr	r3, [pc, #368]	; (1abc0 <MyWrapper+0x1e8>)
   1aa50:	881b      	ldrh	r3, [r3, #0]
   1aa52:	4013      	ands	r3, r2
   1aa54:	b29b      	uxth	r3, r3
   1aa56:	2b00      	cmp	r3, #0
   1aa58:	d022      	beq.n	1aaa0 <MyWrapper+0xc8>
   1aa5a:	687b      	ldr	r3, [r7, #4]
   1aa5c:	2b00      	cmp	r3, #0
   1aa5e:	d10b      	bne.n	1aa78 <MyWrapper+0xa0>
   1aa60:	6a3b      	ldr	r3, [r7, #32]
   1aa62:	0018      	movs	r0, r3
   1aa64:	4b57      	ldr	r3, [pc, #348]	; (1abc4 <MyWrapper+0x1ec>)
   1aa66:	4798      	blx	r3
   1aa68:	0003      	movs	r3, r0
   1aa6a:	001a      	movs	r2, r3
   1aa6c:	4b56      	ldr	r3, [pc, #344]	; (1abc8 <MyWrapper+0x1f0>)
   1aa6e:	5c9b      	ldrb	r3, [r3, r2]
   1aa70:	3330      	adds	r3, #48	; 0x30
   1aa72:	b2db      	uxtb	r3, r3
   1aa74:	001d      	movs	r5, r3
   1aa76:	e000      	b.n	1aa7a <MyWrapper+0xa2>
   1aa78:	2535      	movs	r5, #53	; 0x35
   1aa7a:	6a3b      	ldr	r3, [r7, #32]
   1aa7c:	0018      	movs	r0, r3
   1aa7e:	4b51      	ldr	r3, [pc, #324]	; (1abc4 <MyWrapper+0x1ec>)
   1aa80:	4798      	blx	r3
   1aa82:	0003      	movs	r3, r0
   1aa84:	001a      	movs	r2, r3
   1aa86:	4b50      	ldr	r3, [pc, #320]	; (1abc8 <MyWrapper+0x1f0>)
   1aa88:	5c9c      	ldrb	r4, [r3, r2]
   1aa8a:	6a3b      	ldr	r3, [r7, #32]
   1aa8c:	0018      	movs	r0, r3
   1aa8e:	4b4f      	ldr	r3, [pc, #316]	; (1abcc <MyWrapper+0x1f4>)
   1aa90:	4798      	blx	r3
   1aa92:	0003      	movs	r3, r0
   1aa94:	b2db      	uxtb	r3, r3
   1aa96:	001a      	movs	r2, r3
   1aa98:	0021      	movs	r1, r4
   1aa9a:	0028      	movs	r0, r5
   1aa9c:	4b4c      	ldr	r3, [pc, #304]	; (1abd0 <MyWrapper+0x1f8>)
   1aa9e:	4798      	blx	r3
   1aaa0:	6a3b      	ldr	r3, [r7, #32]
   1aaa2:	0018      	movs	r0, r3
   1aaa4:	4b47      	ldr	r3, [pc, #284]	; (1abc4 <MyWrapper+0x1ec>)
   1aaa6:	4798      	blx	r3
   1aaa8:	0003      	movs	r3, r0
   1aaaa:	001a      	movs	r2, r3
   1aaac:	4b46      	ldr	r3, [pc, #280]	; (1abc8 <MyWrapper+0x1f0>)
   1aaae:	5c9c      	ldrb	r4, [r3, r2]
   1aab0:	6a3b      	ldr	r3, [r7, #32]
   1aab2:	0018      	movs	r0, r3
   1aab4:	4b45      	ldr	r3, [pc, #276]	; (1abcc <MyWrapper+0x1f4>)
   1aab6:	4798      	blx	r3
   1aab8:	0003      	movs	r3, r0
   1aaba:	b2d9      	uxtb	r1, r3
   1aabc:	6a3b      	ldr	r3, [r7, #32]
   1aabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1aac0:	b2db      	uxtb	r3, r3
   1aac2:	3301      	adds	r3, #1
   1aac4:	b2db      	uxtb	r3, r3
   1aac6:	001a      	movs	r2, r3
   1aac8:	0020      	movs	r0, r4
   1aaca:	4b42      	ldr	r3, [pc, #264]	; (1abd4 <MyWrapper+0x1fc>)
   1aacc:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1aace:	69bb      	ldr	r3, [r7, #24]
   1aad0:	1c5a      	adds	r2, r3, #1
   1aad2:	6a3b      	ldr	r3, [r7, #32]
   1aad4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1aad6:	2317      	movs	r3, #23
   1aad8:	18fb      	adds	r3, r7, r3
   1aada:	781b      	ldrb	r3, [r3, #0]
   1aadc:	b25b      	sxtb	r3, r3
   1aade:	3301      	adds	r3, #1
   1aae0:	d123      	bne.n	1ab2a <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1aae2:	6a3b      	ldr	r3, [r7, #32]
   1aae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1aae6:	2b00      	cmp	r3, #0
   1aae8:	d00d      	beq.n	1ab06 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1aaea:	6a3b      	ldr	r3, [r7, #32]
   1aaec:	2100      	movs	r1, #0
   1aaee:	0018      	movs	r0, r3
   1aaf0:	4b39      	ldr	r3, [pc, #228]	; (1abd8 <MyWrapper+0x200>)
   1aaf2:	4798      	blx	r3
   1aaf4:	1e03      	subs	r3, r0, #0
   1aaf6:	d021      	beq.n	1ab3c <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1aaf8:	68bb      	ldr	r3, [r7, #8]
   1aafa:	2b00      	cmp	r3, #0
   1aafc:	d01e      	beq.n	1ab3c <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1aafe:	68bb      	ldr	r3, [r7, #8]
   1ab00:	2201      	movs	r2, #1
   1ab02:	601a      	str	r2, [r3, #0]
   1ab04:	e01a      	b.n	1ab3c <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1ab06:	6a3b      	ldr	r3, [r7, #32]
   1ab08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ab0a:	2b00      	cmp	r3, #0
   1ab0c:	d016      	beq.n	1ab3c <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ab0e:	6a3b      	ldr	r3, [r7, #32]
   1ab10:	3324      	adds	r3, #36	; 0x24
   1ab12:	0018      	movs	r0, r3
   1ab14:	4b31      	ldr	r3, [pc, #196]	; (1abdc <MyWrapper+0x204>)
   1ab16:	4798      	blx	r3
   1ab18:	1e03      	subs	r3, r0, #0
   1ab1a:	d00f      	beq.n	1ab3c <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1ab1c:	68bb      	ldr	r3, [r7, #8]
   1ab1e:	2b00      	cmp	r3, #0
   1ab20:	d00c      	beq.n	1ab3c <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1ab22:	68bb      	ldr	r3, [r7, #8]
   1ab24:	2201      	movs	r2, #1
   1ab26:	601a      	str	r2, [r3, #0]
   1ab28:	e008      	b.n	1ab3c <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1ab2a:	2317      	movs	r3, #23
   1ab2c:	18fb      	adds	r3, r7, r3
   1ab2e:	781b      	ldrb	r3, [r3, #0]
   1ab30:	3301      	adds	r3, #1
   1ab32:	b2db      	uxtb	r3, r3
   1ab34:	b259      	sxtb	r1, r3
   1ab36:	6a3b      	ldr	r3, [r7, #32]
   1ab38:	2245      	movs	r2, #69	; 0x45
   1ab3a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1ab3c:	2301      	movs	r3, #1
   1ab3e:	627b      	str	r3, [r7, #36]	; 0x24
   1ab40:	e030      	b.n	1aba4 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1ab42:	6a3b      	ldr	r3, [r7, #32]
   1ab44:	0018      	movs	r0, r3
   1ab46:	4b1d      	ldr	r3, [pc, #116]	; (1abbc <MyWrapper+0x1e4>)
   1ab48:	4798      	blx	r3
   1ab4a:	0003      	movs	r3, r0
   1ab4c:	001a      	movs	r2, r3
   1ab4e:	4b1c      	ldr	r3, [pc, #112]	; (1abc0 <MyWrapper+0x1e8>)
   1ab50:	881b      	ldrh	r3, [r3, #0]
   1ab52:	4013      	ands	r3, r2
   1ab54:	b29b      	uxth	r3, r3
   1ab56:	2b00      	cmp	r3, #0
   1ab58:	d022      	beq.n	1aba0 <MyWrapper+0x1c8>
   1ab5a:	687b      	ldr	r3, [r7, #4]
   1ab5c:	2b00      	cmp	r3, #0
   1ab5e:	d10b      	bne.n	1ab78 <MyWrapper+0x1a0>
   1ab60:	6a3b      	ldr	r3, [r7, #32]
   1ab62:	0018      	movs	r0, r3
   1ab64:	4b17      	ldr	r3, [pc, #92]	; (1abc4 <MyWrapper+0x1ec>)
   1ab66:	4798      	blx	r3
   1ab68:	0003      	movs	r3, r0
   1ab6a:	001a      	movs	r2, r3
   1ab6c:	4b16      	ldr	r3, [pc, #88]	; (1abc8 <MyWrapper+0x1f0>)
   1ab6e:	5c9b      	ldrb	r3, [r3, r2]
   1ab70:	3358      	adds	r3, #88	; 0x58
   1ab72:	b2db      	uxtb	r3, r3
   1ab74:	001d      	movs	r5, r3
   1ab76:	e000      	b.n	1ab7a <MyWrapper+0x1a2>
   1ab78:	255d      	movs	r5, #93	; 0x5d
   1ab7a:	6a3b      	ldr	r3, [r7, #32]
   1ab7c:	0018      	movs	r0, r3
   1ab7e:	4b11      	ldr	r3, [pc, #68]	; (1abc4 <MyWrapper+0x1ec>)
   1ab80:	4798      	blx	r3
   1ab82:	0003      	movs	r3, r0
   1ab84:	001a      	movs	r2, r3
   1ab86:	4b10      	ldr	r3, [pc, #64]	; (1abc8 <MyWrapper+0x1f0>)
   1ab88:	5c9c      	ldrb	r4, [r3, r2]
   1ab8a:	6a3b      	ldr	r3, [r7, #32]
   1ab8c:	0018      	movs	r0, r3
   1ab8e:	4b0f      	ldr	r3, [pc, #60]	; (1abcc <MyWrapper+0x1f4>)
   1ab90:	4798      	blx	r3
   1ab92:	0003      	movs	r3, r0
   1ab94:	b2db      	uxtb	r3, r3
   1ab96:	001a      	movs	r2, r3
   1ab98:	0021      	movs	r1, r4
   1ab9a:	0028      	movs	r0, r5
   1ab9c:	4b0c      	ldr	r3, [pc, #48]	; (1abd0 <MyWrapper+0x1f8>)
   1ab9e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1aba0:	2300      	movs	r3, #0
   1aba2:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1aba4:	69fb      	ldr	r3, [r7, #28]
   1aba6:	0018      	movs	r0, r3
   1aba8:	4b0d      	ldr	r3, [pc, #52]	; (1abe0 <MyWrapper+0x208>)
   1abaa:	4798      	blx	r3

	return xReturn;
   1abac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1abae:	0018      	movs	r0, r3
   1abb0:	46bd      	mov	sp, r7
   1abb2:	b00a      	add	sp, #40	; 0x28
   1abb4:	bdb0      	pop	{r4, r5, r7, pc}
   1abb6:	46c0      	nop			; (mov r8, r8)
   1abb8:	00019ded 	.word	0x00019ded
   1abbc:	00017e4d 	.word	0x00017e4d
   1abc0:	20000104 	.word	0x20000104
   1abc4:	00017d4d 	.word	0x00017d4d
   1abc8:	200000f8 	.word	0x200000f8
   1abcc:	00017e2d 	.word	0x00017e2d
   1abd0:	00018785 	.word	0x00018785
   1abd4:	00018de1 	.word	0x00018de1
   1abd8:	0001b869 	.word	0x0001b869
   1abdc:	0001c629 	.word	0x0001c629
   1abe0:	00019df9 	.word	0x00019df9

0001abe4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1abe4:	b5b0      	push	{r4, r5, r7, lr}
   1abe6:	b08a      	sub	sp, #40	; 0x28
   1abe8:	af00      	add	r7, sp, #0
   1abea:	60f8      	str	r0, [r7, #12]
   1abec:	60b9      	str	r1, [r7, #8]
   1abee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1abf0:	2300      	movs	r3, #0
   1abf2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1abf4:	68fb      	ldr	r3, [r7, #12]
   1abf6:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1abf8:	6a3b      	ldr	r3, [r7, #32]
   1abfa:	2b00      	cmp	r3, #0
   1abfc:	d101      	bne.n	1ac02 <xQueueReceive+0x1e>
   1abfe:	b672      	cpsid	i
   1ac00:	e7fe      	b.n	1ac00 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1ac02:	68bb      	ldr	r3, [r7, #8]
   1ac04:	2b00      	cmp	r3, #0
   1ac06:	d103      	bne.n	1ac10 <xQueueReceive+0x2c>
   1ac08:	6a3b      	ldr	r3, [r7, #32]
   1ac0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ac0c:	2b00      	cmp	r3, #0
   1ac0e:	d101      	bne.n	1ac14 <xQueueReceive+0x30>
   1ac10:	2301      	movs	r3, #1
   1ac12:	e000      	b.n	1ac16 <xQueueReceive+0x32>
   1ac14:	2300      	movs	r3, #0
   1ac16:	2b00      	cmp	r3, #0
   1ac18:	d101      	bne.n	1ac1e <xQueueReceive+0x3a>
   1ac1a:	b672      	cpsid	i
   1ac1c:	e7fe      	b.n	1ac1c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1ac1e:	4bbf      	ldr	r3, [pc, #764]	; (1af1c <xQueueReceive+0x338>)
   1ac20:	4798      	blx	r3
   1ac22:	1e03      	subs	r3, r0, #0
   1ac24:	d102      	bne.n	1ac2c <xQueueReceive+0x48>
   1ac26:	687b      	ldr	r3, [r7, #4]
   1ac28:	2b00      	cmp	r3, #0
   1ac2a:	d101      	bne.n	1ac30 <xQueueReceive+0x4c>
   1ac2c:	2301      	movs	r3, #1
   1ac2e:	e000      	b.n	1ac32 <xQueueReceive+0x4e>
   1ac30:	2300      	movs	r3, #0
   1ac32:	2b00      	cmp	r3, #0
   1ac34:	d101      	bne.n	1ac3a <xQueueReceive+0x56>
   1ac36:	b672      	cpsid	i
   1ac38:	e7fe      	b.n	1ac38 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1ac3a:	4bb9      	ldr	r3, [pc, #740]	; (1af20 <xQueueReceive+0x33c>)
   1ac3c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1ac3e:	6a3b      	ldr	r3, [r7, #32]
   1ac40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ac42:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1ac44:	69fb      	ldr	r3, [r7, #28]
   1ac46:	2b00      	cmp	r3, #0
   1ac48:	d100      	bne.n	1ac4c <xQueueReceive+0x68>
   1ac4a:	e07d      	b.n	1ad48 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1ac4c:	68ba      	ldr	r2, [r7, #8]
   1ac4e:	6a3b      	ldr	r3, [r7, #32]
   1ac50:	0011      	movs	r1, r2
   1ac52:	0018      	movs	r0, r3
   1ac54:	4bb3      	ldr	r3, [pc, #716]	; (1af24 <xQueueReceive+0x340>)
   1ac56:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1ac58:	4bb3      	ldr	r3, [pc, #716]	; (1af28 <xQueueReceive+0x344>)
   1ac5a:	4798      	blx	r3
   1ac5c:	0003      	movs	r3, r0
   1ac5e:	0018      	movs	r0, r3
   1ac60:	4bb2      	ldr	r3, [pc, #712]	; (1af2c <xQueueReceive+0x348>)
   1ac62:	4798      	blx	r3
   1ac64:	0003      	movs	r3, r0
   1ac66:	001a      	movs	r2, r3
   1ac68:	4bb1      	ldr	r3, [pc, #708]	; (1af30 <xQueueReceive+0x34c>)
   1ac6a:	881b      	ldrh	r3, [r3, #0]
   1ac6c:	4013      	ands	r3, r2
   1ac6e:	b29b      	uxth	r3, r3
   1ac70:	2b00      	cmp	r3, #0
   1ac72:	d029      	beq.n	1acc8 <xQueueReceive+0xe4>
   1ac74:	6a3b      	ldr	r3, [r7, #32]
   1ac76:	0018      	movs	r0, r3
   1ac78:	4bae      	ldr	r3, [pc, #696]	; (1af34 <xQueueReceive+0x350>)
   1ac7a:	4798      	blx	r3
   1ac7c:	0003      	movs	r3, r0
   1ac7e:	001a      	movs	r2, r3
   1ac80:	4bab      	ldr	r3, [pc, #684]	; (1af30 <xQueueReceive+0x34c>)
   1ac82:	881b      	ldrh	r3, [r3, #0]
   1ac84:	4013      	ands	r3, r2
   1ac86:	b29b      	uxth	r3, r3
   1ac88:	2b00      	cmp	r3, #0
   1ac8a:	d01d      	beq.n	1acc8 <xQueueReceive+0xe4>
   1ac8c:	6a3b      	ldr	r3, [r7, #32]
   1ac8e:	0018      	movs	r0, r3
   1ac90:	4ba9      	ldr	r3, [pc, #676]	; (1af38 <xQueueReceive+0x354>)
   1ac92:	4798      	blx	r3
   1ac94:	0003      	movs	r3, r0
   1ac96:	001a      	movs	r2, r3
   1ac98:	4ba8      	ldr	r3, [pc, #672]	; (1af3c <xQueueReceive+0x358>)
   1ac9a:	5c9b      	ldrb	r3, [r3, r2]
   1ac9c:	3328      	adds	r3, #40	; 0x28
   1ac9e:	b2db      	uxtb	r3, r3
   1aca0:	001d      	movs	r5, r3
   1aca2:	6a3b      	ldr	r3, [r7, #32]
   1aca4:	0018      	movs	r0, r3
   1aca6:	4ba4      	ldr	r3, [pc, #656]	; (1af38 <xQueueReceive+0x354>)
   1aca8:	4798      	blx	r3
   1acaa:	0003      	movs	r3, r0
   1acac:	001a      	movs	r2, r3
   1acae:	4ba3      	ldr	r3, [pc, #652]	; (1af3c <xQueueReceive+0x358>)
   1acb0:	5c9c      	ldrb	r4, [r3, r2]
   1acb2:	6a3b      	ldr	r3, [r7, #32]
   1acb4:	0018      	movs	r0, r3
   1acb6:	4ba2      	ldr	r3, [pc, #648]	; (1af40 <xQueueReceive+0x35c>)
   1acb8:	4798      	blx	r3
   1acba:	0003      	movs	r3, r0
   1acbc:	b2db      	uxtb	r3, r3
   1acbe:	001a      	movs	r2, r3
   1acc0:	0021      	movs	r1, r4
   1acc2:	0028      	movs	r0, r5
   1acc4:	4b9f      	ldr	r3, [pc, #636]	; (1af44 <xQueueReceive+0x360>)
   1acc6:	4798      	blx	r3
   1acc8:	6a3b      	ldr	r3, [r7, #32]
   1acca:	0018      	movs	r0, r3
   1accc:	4b9a      	ldr	r3, [pc, #616]	; (1af38 <xQueueReceive+0x354>)
   1acce:	4798      	blx	r3
   1acd0:	0003      	movs	r3, r0
   1acd2:	001a      	movs	r2, r3
   1acd4:	4b99      	ldr	r3, [pc, #612]	; (1af3c <xQueueReceive+0x358>)
   1acd6:	5c9c      	ldrb	r4, [r3, r2]
   1acd8:	6a3b      	ldr	r3, [r7, #32]
   1acda:	0018      	movs	r0, r3
   1acdc:	4b98      	ldr	r3, [pc, #608]	; (1af40 <xQueueReceive+0x35c>)
   1acde:	4798      	blx	r3
   1ace0:	0003      	movs	r3, r0
   1ace2:	b2dd      	uxtb	r5, r3
   1ace4:	6a3b      	ldr	r3, [r7, #32]
   1ace6:	0018      	movs	r0, r3
   1ace8:	4b93      	ldr	r3, [pc, #588]	; (1af38 <xQueueReceive+0x354>)
   1acea:	4798      	blx	r3
   1acec:	0003      	movs	r3, r0
   1acee:	001a      	movs	r2, r3
   1acf0:	4b92      	ldr	r3, [pc, #584]	; (1af3c <xQueueReceive+0x358>)
   1acf2:	5c9b      	ldrb	r3, [r3, r2]
   1acf4:	2b02      	cmp	r3, #2
   1acf6:	d108      	bne.n	1ad0a <xQueueReceive+0x126>
   1acf8:	4b8b      	ldr	r3, [pc, #556]	; (1af28 <xQueueReceive+0x344>)
   1acfa:	4798      	blx	r3
   1acfc:	0003      	movs	r3, r0
   1acfe:	0018      	movs	r0, r3
   1ad00:	4b91      	ldr	r3, [pc, #580]	; (1af48 <xQueueReceive+0x364>)
   1ad02:	4798      	blx	r3
   1ad04:	0003      	movs	r3, r0
   1ad06:	b2db      	uxtb	r3, r3
   1ad08:	e004      	b.n	1ad14 <xQueueReceive+0x130>
   1ad0a:	6a3b      	ldr	r3, [r7, #32]
   1ad0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ad0e:	b2db      	uxtb	r3, r3
   1ad10:	3b01      	subs	r3, #1
   1ad12:	b2db      	uxtb	r3, r3
   1ad14:	001a      	movs	r2, r3
   1ad16:	0029      	movs	r1, r5
   1ad18:	0020      	movs	r0, r4
   1ad1a:	4b8c      	ldr	r3, [pc, #560]	; (1af4c <xQueueReceive+0x368>)
   1ad1c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1ad1e:	69fb      	ldr	r3, [r7, #28]
   1ad20:	1e5a      	subs	r2, r3, #1
   1ad22:	6a3b      	ldr	r3, [r7, #32]
   1ad24:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1ad26:	6a3b      	ldr	r3, [r7, #32]
   1ad28:	691b      	ldr	r3, [r3, #16]
   1ad2a:	2b00      	cmp	r3, #0
   1ad2c:	d008      	beq.n	1ad40 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1ad2e:	6a3b      	ldr	r3, [r7, #32]
   1ad30:	3310      	adds	r3, #16
   1ad32:	0018      	movs	r0, r3
   1ad34:	4b86      	ldr	r3, [pc, #536]	; (1af50 <xQueueReceive+0x36c>)
   1ad36:	4798      	blx	r3
   1ad38:	1e03      	subs	r3, r0, #0
   1ad3a:	d001      	beq.n	1ad40 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1ad3c:	4b85      	ldr	r3, [pc, #532]	; (1af54 <xQueueReceive+0x370>)
   1ad3e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1ad40:	4b85      	ldr	r3, [pc, #532]	; (1af58 <xQueueReceive+0x374>)
   1ad42:	4798      	blx	r3
				return pdPASS;
   1ad44:	2301      	movs	r3, #1
   1ad46:	e15f      	b.n	1b008 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1ad48:	687b      	ldr	r3, [r7, #4]
   1ad4a:	2b00      	cmp	r3, #0
   1ad4c:	d13b      	bne.n	1adc6 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1ad4e:	4b82      	ldr	r3, [pc, #520]	; (1af58 <xQueueReceive+0x374>)
   1ad50:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1ad52:	4b75      	ldr	r3, [pc, #468]	; (1af28 <xQueueReceive+0x344>)
   1ad54:	4798      	blx	r3
   1ad56:	0003      	movs	r3, r0
   1ad58:	0018      	movs	r0, r3
   1ad5a:	4b74      	ldr	r3, [pc, #464]	; (1af2c <xQueueReceive+0x348>)
   1ad5c:	4798      	blx	r3
   1ad5e:	0003      	movs	r3, r0
   1ad60:	001a      	movs	r2, r3
   1ad62:	4b73      	ldr	r3, [pc, #460]	; (1af30 <xQueueReceive+0x34c>)
   1ad64:	881b      	ldrh	r3, [r3, #0]
   1ad66:	4013      	ands	r3, r2
   1ad68:	b29b      	uxth	r3, r3
   1ad6a:	2b00      	cmp	r3, #0
   1ad6c:	d029      	beq.n	1adc2 <xQueueReceive+0x1de>
   1ad6e:	6a3b      	ldr	r3, [r7, #32]
   1ad70:	0018      	movs	r0, r3
   1ad72:	4b70      	ldr	r3, [pc, #448]	; (1af34 <xQueueReceive+0x350>)
   1ad74:	4798      	blx	r3
   1ad76:	0003      	movs	r3, r0
   1ad78:	001a      	movs	r2, r3
   1ad7a:	4b6d      	ldr	r3, [pc, #436]	; (1af30 <xQueueReceive+0x34c>)
   1ad7c:	881b      	ldrh	r3, [r3, #0]
   1ad7e:	4013      	ands	r3, r2
   1ad80:	b29b      	uxth	r3, r3
   1ad82:	2b00      	cmp	r3, #0
   1ad84:	d01d      	beq.n	1adc2 <xQueueReceive+0x1de>
   1ad86:	6a3b      	ldr	r3, [r7, #32]
   1ad88:	0018      	movs	r0, r3
   1ad8a:	4b6b      	ldr	r3, [pc, #428]	; (1af38 <xQueueReceive+0x354>)
   1ad8c:	4798      	blx	r3
   1ad8e:	0003      	movs	r3, r0
   1ad90:	001a      	movs	r2, r3
   1ad92:	4b6a      	ldr	r3, [pc, #424]	; (1af3c <xQueueReceive+0x358>)
   1ad94:	5c9b      	ldrb	r3, [r3, r2]
   1ad96:	3350      	adds	r3, #80	; 0x50
   1ad98:	b2db      	uxtb	r3, r3
   1ad9a:	001d      	movs	r5, r3
   1ad9c:	6a3b      	ldr	r3, [r7, #32]
   1ad9e:	0018      	movs	r0, r3
   1ada0:	4b65      	ldr	r3, [pc, #404]	; (1af38 <xQueueReceive+0x354>)
   1ada2:	4798      	blx	r3
   1ada4:	0003      	movs	r3, r0
   1ada6:	001a      	movs	r2, r3
   1ada8:	4b64      	ldr	r3, [pc, #400]	; (1af3c <xQueueReceive+0x358>)
   1adaa:	5c9c      	ldrb	r4, [r3, r2]
   1adac:	6a3b      	ldr	r3, [r7, #32]
   1adae:	0018      	movs	r0, r3
   1adb0:	4b63      	ldr	r3, [pc, #396]	; (1af40 <xQueueReceive+0x35c>)
   1adb2:	4798      	blx	r3
   1adb4:	0003      	movs	r3, r0
   1adb6:	b2db      	uxtb	r3, r3
   1adb8:	001a      	movs	r2, r3
   1adba:	0021      	movs	r1, r4
   1adbc:	0028      	movs	r0, r5
   1adbe:	4b61      	ldr	r3, [pc, #388]	; (1af44 <xQueueReceive+0x360>)
   1adc0:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1adc2:	2300      	movs	r3, #0
   1adc4:	e120      	b.n	1b008 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1adc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1adc8:	2b00      	cmp	r3, #0
   1adca:	d106      	bne.n	1adda <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1adcc:	2314      	movs	r3, #20
   1adce:	18fb      	adds	r3, r7, r3
   1add0:	0018      	movs	r0, r3
   1add2:	4b62      	ldr	r3, [pc, #392]	; (1af5c <xQueueReceive+0x378>)
   1add4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1add6:	2301      	movs	r3, #1
   1add8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1adda:	4b5f      	ldr	r3, [pc, #380]	; (1af58 <xQueueReceive+0x374>)
   1addc:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1adde:	4b60      	ldr	r3, [pc, #384]	; (1af60 <xQueueReceive+0x37c>)
   1ade0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1ade2:	4b4f      	ldr	r3, [pc, #316]	; (1af20 <xQueueReceive+0x33c>)
   1ade4:	4798      	blx	r3
   1ade6:	6a3b      	ldr	r3, [r7, #32]
   1ade8:	2244      	movs	r2, #68	; 0x44
   1adea:	5c9b      	ldrb	r3, [r3, r2]
   1adec:	b25b      	sxtb	r3, r3
   1adee:	3301      	adds	r3, #1
   1adf0:	d103      	bne.n	1adfa <xQueueReceive+0x216>
   1adf2:	6a3b      	ldr	r3, [r7, #32]
   1adf4:	2244      	movs	r2, #68	; 0x44
   1adf6:	2100      	movs	r1, #0
   1adf8:	5499      	strb	r1, [r3, r2]
   1adfa:	6a3b      	ldr	r3, [r7, #32]
   1adfc:	2245      	movs	r2, #69	; 0x45
   1adfe:	5c9b      	ldrb	r3, [r3, r2]
   1ae00:	b25b      	sxtb	r3, r3
   1ae02:	3301      	adds	r3, #1
   1ae04:	d103      	bne.n	1ae0e <xQueueReceive+0x22a>
   1ae06:	6a3b      	ldr	r3, [r7, #32]
   1ae08:	2245      	movs	r2, #69	; 0x45
   1ae0a:	2100      	movs	r1, #0
   1ae0c:	5499      	strb	r1, [r3, r2]
   1ae0e:	4b52      	ldr	r3, [pc, #328]	; (1af58 <xQueueReceive+0x374>)
   1ae10:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1ae12:	1d3a      	adds	r2, r7, #4
   1ae14:	2314      	movs	r3, #20
   1ae16:	18fb      	adds	r3, r7, r3
   1ae18:	0011      	movs	r1, r2
   1ae1a:	0018      	movs	r0, r3
   1ae1c:	4b51      	ldr	r3, [pc, #324]	; (1af64 <xQueueReceive+0x380>)
   1ae1e:	4798      	blx	r3
   1ae20:	1e03      	subs	r3, r0, #0
   1ae22:	d000      	beq.n	1ae26 <xQueueReceive+0x242>
   1ae24:	e0aa      	b.n	1af7c <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1ae26:	6a3b      	ldr	r3, [r7, #32]
   1ae28:	0018      	movs	r0, r3
   1ae2a:	4b4f      	ldr	r3, [pc, #316]	; (1af68 <xQueueReceive+0x384>)
   1ae2c:	4798      	blx	r3
   1ae2e:	1e03      	subs	r3, r0, #0
   1ae30:	d06d      	beq.n	1af0e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1ae32:	4b3d      	ldr	r3, [pc, #244]	; (1af28 <xQueueReceive+0x344>)
   1ae34:	4798      	blx	r3
   1ae36:	0003      	movs	r3, r0
   1ae38:	0018      	movs	r0, r3
   1ae3a:	4b3c      	ldr	r3, [pc, #240]	; (1af2c <xQueueReceive+0x348>)
   1ae3c:	4798      	blx	r3
   1ae3e:	0003      	movs	r3, r0
   1ae40:	001a      	movs	r2, r3
   1ae42:	4b3b      	ldr	r3, [pc, #236]	; (1af30 <xQueueReceive+0x34c>)
   1ae44:	881b      	ldrh	r3, [r3, #0]
   1ae46:	4013      	ands	r3, r2
   1ae48:	b29b      	uxth	r3, r3
   1ae4a:	2b00      	cmp	r3, #0
   1ae4c:	d029      	beq.n	1aea2 <xQueueReceive+0x2be>
   1ae4e:	6a3b      	ldr	r3, [r7, #32]
   1ae50:	0018      	movs	r0, r3
   1ae52:	4b38      	ldr	r3, [pc, #224]	; (1af34 <xQueueReceive+0x350>)
   1ae54:	4798      	blx	r3
   1ae56:	0003      	movs	r3, r0
   1ae58:	001a      	movs	r2, r3
   1ae5a:	4b35      	ldr	r3, [pc, #212]	; (1af30 <xQueueReceive+0x34c>)
   1ae5c:	881b      	ldrh	r3, [r3, #0]
   1ae5e:	4013      	ands	r3, r2
   1ae60:	b29b      	uxth	r3, r3
   1ae62:	2b00      	cmp	r3, #0
   1ae64:	d01d      	beq.n	1aea2 <xQueueReceive+0x2be>
   1ae66:	6a3b      	ldr	r3, [r7, #32]
   1ae68:	0018      	movs	r0, r3
   1ae6a:	4b33      	ldr	r3, [pc, #204]	; (1af38 <xQueueReceive+0x354>)
   1ae6c:	4798      	blx	r3
   1ae6e:	0003      	movs	r3, r0
   1ae70:	001a      	movs	r2, r3
   1ae72:	4b32      	ldr	r3, [pc, #200]	; (1af3c <xQueueReceive+0x358>)
   1ae74:	5c9b      	ldrb	r3, [r3, r2]
   1ae76:	3368      	adds	r3, #104	; 0x68
   1ae78:	b2db      	uxtb	r3, r3
   1ae7a:	001d      	movs	r5, r3
   1ae7c:	6a3b      	ldr	r3, [r7, #32]
   1ae7e:	0018      	movs	r0, r3
   1ae80:	4b2d      	ldr	r3, [pc, #180]	; (1af38 <xQueueReceive+0x354>)
   1ae82:	4798      	blx	r3
   1ae84:	0003      	movs	r3, r0
   1ae86:	001a      	movs	r2, r3
   1ae88:	4b2c      	ldr	r3, [pc, #176]	; (1af3c <xQueueReceive+0x358>)
   1ae8a:	5c9c      	ldrb	r4, [r3, r2]
   1ae8c:	6a3b      	ldr	r3, [r7, #32]
   1ae8e:	0018      	movs	r0, r3
   1ae90:	4b2b      	ldr	r3, [pc, #172]	; (1af40 <xQueueReceive+0x35c>)
   1ae92:	4798      	blx	r3
   1ae94:	0003      	movs	r3, r0
   1ae96:	b2db      	uxtb	r3, r3
   1ae98:	001a      	movs	r2, r3
   1ae9a:	0021      	movs	r1, r4
   1ae9c:	0028      	movs	r0, r5
   1ae9e:	4b29      	ldr	r3, [pc, #164]	; (1af44 <xQueueReceive+0x360>)
   1aea0:	4798      	blx	r3
   1aea2:	6a3b      	ldr	r3, [r7, #32]
   1aea4:	0018      	movs	r0, r3
   1aea6:	4b24      	ldr	r3, [pc, #144]	; (1af38 <xQueueReceive+0x354>)
   1aea8:	4798      	blx	r3
   1aeaa:	0003      	movs	r3, r0
   1aeac:	001a      	movs	r2, r3
   1aeae:	4b23      	ldr	r3, [pc, #140]	; (1af3c <xQueueReceive+0x358>)
   1aeb0:	5c9b      	ldrb	r3, [r3, r2]
   1aeb2:	2b02      	cmp	r3, #2
   1aeb4:	d018      	beq.n	1aee8 <xQueueReceive+0x304>
   1aeb6:	4b1c      	ldr	r3, [pc, #112]	; (1af28 <xQueueReceive+0x344>)
   1aeb8:	4798      	blx	r3
   1aeba:	0003      	movs	r3, r0
   1aebc:	0018      	movs	r0, r3
   1aebe:	4b1b      	ldr	r3, [pc, #108]	; (1af2c <xQueueReceive+0x348>)
   1aec0:	4798      	blx	r3
   1aec2:	0003      	movs	r3, r0
   1aec4:	001a      	movs	r2, r3
   1aec6:	4b1a      	ldr	r3, [pc, #104]	; (1af30 <xQueueReceive+0x34c>)
   1aec8:	881b      	ldrh	r3, [r3, #0]
   1aeca:	4013      	ands	r3, r2
   1aecc:	b29b      	uxth	r3, r3
   1aece:	2b00      	cmp	r3, #0
   1aed0:	d00a      	beq.n	1aee8 <xQueueReceive+0x304>
   1aed2:	4b15      	ldr	r3, [pc, #84]	; (1af28 <xQueueReceive+0x344>)
   1aed4:	4798      	blx	r3
   1aed6:	0003      	movs	r3, r0
   1aed8:	0018      	movs	r0, r3
   1aeda:	4b1b      	ldr	r3, [pc, #108]	; (1af48 <xQueueReceive+0x364>)
   1aedc:	4798      	blx	r3
   1aede:	0003      	movs	r3, r0
   1aee0:	b2db      	uxtb	r3, r3
   1aee2:	0018      	movs	r0, r3
   1aee4:	4b21      	ldr	r3, [pc, #132]	; (1af6c <xQueueReceive+0x388>)
   1aee6:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1aee8:	6a3b      	ldr	r3, [r7, #32]
   1aeea:	3324      	adds	r3, #36	; 0x24
   1aeec:	687a      	ldr	r2, [r7, #4]
   1aeee:	0011      	movs	r1, r2
   1aef0:	0018      	movs	r0, r3
   1aef2:	4b1f      	ldr	r3, [pc, #124]	; (1af70 <xQueueReceive+0x38c>)
   1aef4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1aef6:	6a3b      	ldr	r3, [r7, #32]
   1aef8:	0018      	movs	r0, r3
   1aefa:	4b1e      	ldr	r3, [pc, #120]	; (1af74 <xQueueReceive+0x390>)
   1aefc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1aefe:	4b1e      	ldr	r3, [pc, #120]	; (1af78 <xQueueReceive+0x394>)
   1af00:	4798      	blx	r3
   1af02:	1e03      	subs	r3, r0, #0
   1af04:	d000      	beq.n	1af08 <xQueueReceive+0x324>
   1af06:	e698      	b.n	1ac3a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1af08:	4b12      	ldr	r3, [pc, #72]	; (1af54 <xQueueReceive+0x370>)
   1af0a:	4798      	blx	r3
   1af0c:	e695      	b.n	1ac3a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1af0e:	6a3b      	ldr	r3, [r7, #32]
   1af10:	0018      	movs	r0, r3
   1af12:	4b18      	ldr	r3, [pc, #96]	; (1af74 <xQueueReceive+0x390>)
   1af14:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1af16:	4b18      	ldr	r3, [pc, #96]	; (1af78 <xQueueReceive+0x394>)
   1af18:	4798      	blx	r3
   1af1a:	e68e      	b.n	1ac3a <xQueueReceive+0x56>
   1af1c:	0001cab9 	.word	0x0001cab9
   1af20:	00019d99 	.word	0x00019d99
   1af24:	0001b645 	.word	0x0001b645
   1af28:	00018029 	.word	0x00018029
   1af2c:	00017d8d 	.word	0x00017d8d
   1af30:	20000104 	.word	0x20000104
   1af34:	00017e4d 	.word	0x00017e4d
   1af38:	00017d4d 	.word	0x00017d4d
   1af3c:	200000f8 	.word	0x200000f8
   1af40:	00017e2d 	.word	0x00017e2d
   1af44:	00018785 	.word	0x00018785
   1af48:	00017d6d 	.word	0x00017d6d
   1af4c:	00018de1 	.word	0x00018de1
   1af50:	0001c629 	.word	0x0001c629
   1af54:	00019d81 	.word	0x00019d81
   1af58:	00019dbd 	.word	0x00019dbd
   1af5c:	0001c769 	.word	0x0001c769
   1af60:	0001c051 	.word	0x0001c051
   1af64:	0001c791 	.word	0x0001c791
   1af68:	0001b785 	.word	0x0001b785
   1af6c:	00018f1d 	.word	0x00018f1d
   1af70:	0001c505 	.word	0x0001c505
   1af74:	0001b695 	.word	0x0001b695
   1af78:	0001c069 	.word	0x0001c069
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1af7c:	6a3b      	ldr	r3, [r7, #32]
   1af7e:	0018      	movs	r0, r3
   1af80:	4b23      	ldr	r3, [pc, #140]	; (1b010 <xQueueReceive+0x42c>)
   1af82:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1af84:	4b23      	ldr	r3, [pc, #140]	; (1b014 <xQueueReceive+0x430>)
   1af86:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1af88:	6a3b      	ldr	r3, [r7, #32]
   1af8a:	0018      	movs	r0, r3
   1af8c:	4b22      	ldr	r3, [pc, #136]	; (1b018 <xQueueReceive+0x434>)
   1af8e:	4798      	blx	r3
   1af90:	1e03      	subs	r3, r0, #0
   1af92:	d100      	bne.n	1af96 <xQueueReceive+0x3b2>
   1af94:	e651      	b.n	1ac3a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1af96:	4b21      	ldr	r3, [pc, #132]	; (1b01c <xQueueReceive+0x438>)
   1af98:	4798      	blx	r3
   1af9a:	0003      	movs	r3, r0
   1af9c:	0018      	movs	r0, r3
   1af9e:	4b20      	ldr	r3, [pc, #128]	; (1b020 <xQueueReceive+0x43c>)
   1afa0:	4798      	blx	r3
   1afa2:	0003      	movs	r3, r0
   1afa4:	001a      	movs	r2, r3
   1afa6:	4b1f      	ldr	r3, [pc, #124]	; (1b024 <xQueueReceive+0x440>)
   1afa8:	881b      	ldrh	r3, [r3, #0]
   1afaa:	4013      	ands	r3, r2
   1afac:	b29b      	uxth	r3, r3
   1afae:	2b00      	cmp	r3, #0
   1afb0:	d029      	beq.n	1b006 <xQueueReceive+0x422>
   1afb2:	6a3b      	ldr	r3, [r7, #32]
   1afb4:	0018      	movs	r0, r3
   1afb6:	4b1c      	ldr	r3, [pc, #112]	; (1b028 <xQueueReceive+0x444>)
   1afb8:	4798      	blx	r3
   1afba:	0003      	movs	r3, r0
   1afbc:	001a      	movs	r2, r3
   1afbe:	4b19      	ldr	r3, [pc, #100]	; (1b024 <xQueueReceive+0x440>)
   1afc0:	881b      	ldrh	r3, [r3, #0]
   1afc2:	4013      	ands	r3, r2
   1afc4:	b29b      	uxth	r3, r3
   1afc6:	2b00      	cmp	r3, #0
   1afc8:	d01d      	beq.n	1b006 <xQueueReceive+0x422>
   1afca:	6a3b      	ldr	r3, [r7, #32]
   1afcc:	0018      	movs	r0, r3
   1afce:	4b17      	ldr	r3, [pc, #92]	; (1b02c <xQueueReceive+0x448>)
   1afd0:	4798      	blx	r3
   1afd2:	0003      	movs	r3, r0
   1afd4:	001a      	movs	r2, r3
   1afd6:	4b16      	ldr	r3, [pc, #88]	; (1b030 <xQueueReceive+0x44c>)
   1afd8:	5c9b      	ldrb	r3, [r3, r2]
   1afda:	3350      	adds	r3, #80	; 0x50
   1afdc:	b2db      	uxtb	r3, r3
   1afde:	001d      	movs	r5, r3
   1afe0:	6a3b      	ldr	r3, [r7, #32]
   1afe2:	0018      	movs	r0, r3
   1afe4:	4b11      	ldr	r3, [pc, #68]	; (1b02c <xQueueReceive+0x448>)
   1afe6:	4798      	blx	r3
   1afe8:	0003      	movs	r3, r0
   1afea:	001a      	movs	r2, r3
   1afec:	4b10      	ldr	r3, [pc, #64]	; (1b030 <xQueueReceive+0x44c>)
   1afee:	5c9c      	ldrb	r4, [r3, r2]
   1aff0:	6a3b      	ldr	r3, [r7, #32]
   1aff2:	0018      	movs	r0, r3
   1aff4:	4b0f      	ldr	r3, [pc, #60]	; (1b034 <xQueueReceive+0x450>)
   1aff6:	4798      	blx	r3
   1aff8:	0003      	movs	r3, r0
   1affa:	b2db      	uxtb	r3, r3
   1affc:	001a      	movs	r2, r3
   1affe:	0021      	movs	r1, r4
   1b000:	0028      	movs	r0, r5
   1b002:	4b0d      	ldr	r3, [pc, #52]	; (1b038 <xQueueReceive+0x454>)
   1b004:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1b006:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1b008:	0018      	movs	r0, r3
   1b00a:	46bd      	mov	sp, r7
   1b00c:	b00a      	add	sp, #40	; 0x28
   1b00e:	bdb0      	pop	{r4, r5, r7, pc}
   1b010:	0001b695 	.word	0x0001b695
   1b014:	0001c069 	.word	0x0001c069
   1b018:	0001b785 	.word	0x0001b785
   1b01c:	00018029 	.word	0x00018029
   1b020:	00017d8d 	.word	0x00017d8d
   1b024:	20000104 	.word	0x20000104
   1b028:	00017e4d 	.word	0x00017e4d
   1b02c:	00017d4d 	.word	0x00017d4d
   1b030:	200000f8 	.word	0x200000f8
   1b034:	00017e2d 	.word	0x00017e2d
   1b038:	00018785 	.word	0x00018785

0001b03c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1b03c:	b5b0      	push	{r4, r5, r7, lr}
   1b03e:	b08a      	sub	sp, #40	; 0x28
   1b040:	af00      	add	r7, sp, #0
   1b042:	6078      	str	r0, [r7, #4]
   1b044:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1b046:	2300      	movs	r3, #0
   1b048:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b04a:	687b      	ldr	r3, [r7, #4]
   1b04c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1b04e:	2300      	movs	r3, #0
   1b050:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1b052:	69fb      	ldr	r3, [r7, #28]
   1b054:	2b00      	cmp	r3, #0
   1b056:	d101      	bne.n	1b05c <xQueueSemaphoreTake+0x20>
   1b058:	b672      	cpsid	i
   1b05a:	e7fe      	b.n	1b05a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1b05c:	69fb      	ldr	r3, [r7, #28]
   1b05e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b060:	2b00      	cmp	r3, #0
   1b062:	d001      	beq.n	1b068 <xQueueSemaphoreTake+0x2c>
   1b064:	b672      	cpsid	i
   1b066:	e7fe      	b.n	1b066 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b068:	4bcb      	ldr	r3, [pc, #812]	; (1b398 <xQueueSemaphoreTake+0x35c>)
   1b06a:	4798      	blx	r3
   1b06c:	1e03      	subs	r3, r0, #0
   1b06e:	d102      	bne.n	1b076 <xQueueSemaphoreTake+0x3a>
   1b070:	683b      	ldr	r3, [r7, #0]
   1b072:	2b00      	cmp	r3, #0
   1b074:	d101      	bne.n	1b07a <xQueueSemaphoreTake+0x3e>
   1b076:	2301      	movs	r3, #1
   1b078:	e000      	b.n	1b07c <xQueueSemaphoreTake+0x40>
   1b07a:	2300      	movs	r3, #0
   1b07c:	2b00      	cmp	r3, #0
   1b07e:	d101      	bne.n	1b084 <xQueueSemaphoreTake+0x48>
   1b080:	b672      	cpsid	i
   1b082:	e7fe      	b.n	1b082 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1b084:	4bc5      	ldr	r3, [pc, #788]	; (1b39c <xQueueSemaphoreTake+0x360>)
   1b086:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1b088:	69fb      	ldr	r3, [r7, #28]
   1b08a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b08c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1b08e:	69bb      	ldr	r3, [r7, #24]
   1b090:	2b00      	cmp	r3, #0
   1b092:	d100      	bne.n	1b096 <xQueueSemaphoreTake+0x5a>
   1b094:	e080      	b.n	1b198 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1b096:	4bc2      	ldr	r3, [pc, #776]	; (1b3a0 <xQueueSemaphoreTake+0x364>)
   1b098:	4798      	blx	r3
   1b09a:	0003      	movs	r3, r0
   1b09c:	0018      	movs	r0, r3
   1b09e:	4bc1      	ldr	r3, [pc, #772]	; (1b3a4 <xQueueSemaphoreTake+0x368>)
   1b0a0:	4798      	blx	r3
   1b0a2:	0003      	movs	r3, r0
   1b0a4:	001a      	movs	r2, r3
   1b0a6:	4bc0      	ldr	r3, [pc, #768]	; (1b3a8 <xQueueSemaphoreTake+0x36c>)
   1b0a8:	881b      	ldrh	r3, [r3, #0]
   1b0aa:	4013      	ands	r3, r2
   1b0ac:	b29b      	uxth	r3, r3
   1b0ae:	2b00      	cmp	r3, #0
   1b0b0:	d029      	beq.n	1b106 <xQueueSemaphoreTake+0xca>
   1b0b2:	69fb      	ldr	r3, [r7, #28]
   1b0b4:	0018      	movs	r0, r3
   1b0b6:	4bbd      	ldr	r3, [pc, #756]	; (1b3ac <xQueueSemaphoreTake+0x370>)
   1b0b8:	4798      	blx	r3
   1b0ba:	0003      	movs	r3, r0
   1b0bc:	001a      	movs	r2, r3
   1b0be:	4bba      	ldr	r3, [pc, #744]	; (1b3a8 <xQueueSemaphoreTake+0x36c>)
   1b0c0:	881b      	ldrh	r3, [r3, #0]
   1b0c2:	4013      	ands	r3, r2
   1b0c4:	b29b      	uxth	r3, r3
   1b0c6:	2b00      	cmp	r3, #0
   1b0c8:	d01d      	beq.n	1b106 <xQueueSemaphoreTake+0xca>
   1b0ca:	69fb      	ldr	r3, [r7, #28]
   1b0cc:	0018      	movs	r0, r3
   1b0ce:	4bb8      	ldr	r3, [pc, #736]	; (1b3b0 <xQueueSemaphoreTake+0x374>)
   1b0d0:	4798      	blx	r3
   1b0d2:	0003      	movs	r3, r0
   1b0d4:	001a      	movs	r2, r3
   1b0d6:	4bb7      	ldr	r3, [pc, #732]	; (1b3b4 <xQueueSemaphoreTake+0x378>)
   1b0d8:	5c9b      	ldrb	r3, [r3, r2]
   1b0da:	3328      	adds	r3, #40	; 0x28
   1b0dc:	b2db      	uxtb	r3, r3
   1b0de:	001d      	movs	r5, r3
   1b0e0:	69fb      	ldr	r3, [r7, #28]
   1b0e2:	0018      	movs	r0, r3
   1b0e4:	4bb2      	ldr	r3, [pc, #712]	; (1b3b0 <xQueueSemaphoreTake+0x374>)
   1b0e6:	4798      	blx	r3
   1b0e8:	0003      	movs	r3, r0
   1b0ea:	001a      	movs	r2, r3
   1b0ec:	4bb1      	ldr	r3, [pc, #708]	; (1b3b4 <xQueueSemaphoreTake+0x378>)
   1b0ee:	5c9c      	ldrb	r4, [r3, r2]
   1b0f0:	69fb      	ldr	r3, [r7, #28]
   1b0f2:	0018      	movs	r0, r3
   1b0f4:	4bb0      	ldr	r3, [pc, #704]	; (1b3b8 <xQueueSemaphoreTake+0x37c>)
   1b0f6:	4798      	blx	r3
   1b0f8:	0003      	movs	r3, r0
   1b0fa:	b2db      	uxtb	r3, r3
   1b0fc:	001a      	movs	r2, r3
   1b0fe:	0021      	movs	r1, r4
   1b100:	0028      	movs	r0, r5
   1b102:	4bae      	ldr	r3, [pc, #696]	; (1b3bc <xQueueSemaphoreTake+0x380>)
   1b104:	4798      	blx	r3
   1b106:	69fb      	ldr	r3, [r7, #28]
   1b108:	0018      	movs	r0, r3
   1b10a:	4ba9      	ldr	r3, [pc, #676]	; (1b3b0 <xQueueSemaphoreTake+0x374>)
   1b10c:	4798      	blx	r3
   1b10e:	0003      	movs	r3, r0
   1b110:	001a      	movs	r2, r3
   1b112:	4ba8      	ldr	r3, [pc, #672]	; (1b3b4 <xQueueSemaphoreTake+0x378>)
   1b114:	5c9c      	ldrb	r4, [r3, r2]
   1b116:	69fb      	ldr	r3, [r7, #28]
   1b118:	0018      	movs	r0, r3
   1b11a:	4ba7      	ldr	r3, [pc, #668]	; (1b3b8 <xQueueSemaphoreTake+0x37c>)
   1b11c:	4798      	blx	r3
   1b11e:	0003      	movs	r3, r0
   1b120:	b2dd      	uxtb	r5, r3
   1b122:	69fb      	ldr	r3, [r7, #28]
   1b124:	0018      	movs	r0, r3
   1b126:	4ba2      	ldr	r3, [pc, #648]	; (1b3b0 <xQueueSemaphoreTake+0x374>)
   1b128:	4798      	blx	r3
   1b12a:	0003      	movs	r3, r0
   1b12c:	001a      	movs	r2, r3
   1b12e:	4ba1      	ldr	r3, [pc, #644]	; (1b3b4 <xQueueSemaphoreTake+0x378>)
   1b130:	5c9b      	ldrb	r3, [r3, r2]
   1b132:	2b02      	cmp	r3, #2
   1b134:	d108      	bne.n	1b148 <xQueueSemaphoreTake+0x10c>
   1b136:	4b9a      	ldr	r3, [pc, #616]	; (1b3a0 <xQueueSemaphoreTake+0x364>)
   1b138:	4798      	blx	r3
   1b13a:	0003      	movs	r3, r0
   1b13c:	0018      	movs	r0, r3
   1b13e:	4ba0      	ldr	r3, [pc, #640]	; (1b3c0 <xQueueSemaphoreTake+0x384>)
   1b140:	4798      	blx	r3
   1b142:	0003      	movs	r3, r0
   1b144:	b2db      	uxtb	r3, r3
   1b146:	e004      	b.n	1b152 <xQueueSemaphoreTake+0x116>
   1b148:	69fb      	ldr	r3, [r7, #28]
   1b14a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b14c:	b2db      	uxtb	r3, r3
   1b14e:	3b01      	subs	r3, #1
   1b150:	b2db      	uxtb	r3, r3
   1b152:	001a      	movs	r2, r3
   1b154:	0029      	movs	r1, r5
   1b156:	0020      	movs	r0, r4
   1b158:	4b9a      	ldr	r3, [pc, #616]	; (1b3c4 <xQueueSemaphoreTake+0x388>)
   1b15a:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1b15c:	69bb      	ldr	r3, [r7, #24]
   1b15e:	1e5a      	subs	r2, r3, #1
   1b160:	69fb      	ldr	r3, [r7, #28]
   1b162:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b164:	69fb      	ldr	r3, [r7, #28]
   1b166:	681b      	ldr	r3, [r3, #0]
   1b168:	2b00      	cmp	r3, #0
   1b16a:	d104      	bne.n	1b176 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1b16c:	4b96      	ldr	r3, [pc, #600]	; (1b3c8 <xQueueSemaphoreTake+0x38c>)
   1b16e:	4798      	blx	r3
   1b170:	0002      	movs	r2, r0
   1b172:	69fb      	ldr	r3, [r7, #28]
   1b174:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b176:	69fb      	ldr	r3, [r7, #28]
   1b178:	691b      	ldr	r3, [r3, #16]
   1b17a:	2b00      	cmp	r3, #0
   1b17c:	d008      	beq.n	1b190 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b17e:	69fb      	ldr	r3, [r7, #28]
   1b180:	3310      	adds	r3, #16
   1b182:	0018      	movs	r0, r3
   1b184:	4b91      	ldr	r3, [pc, #580]	; (1b3cc <xQueueSemaphoreTake+0x390>)
   1b186:	4798      	blx	r3
   1b188:	1e03      	subs	r3, r0, #0
   1b18a:	d001      	beq.n	1b190 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1b18c:	4b90      	ldr	r3, [pc, #576]	; (1b3d0 <xQueueSemaphoreTake+0x394>)
   1b18e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1b190:	4b90      	ldr	r3, [pc, #576]	; (1b3d4 <xQueueSemaphoreTake+0x398>)
   1b192:	4798      	blx	r3
				return pdPASS;
   1b194:	2301      	movs	r3, #1
   1b196:	e18b      	b.n	1b4b0 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b198:	683b      	ldr	r3, [r7, #0]
   1b19a:	2b00      	cmp	r3, #0
   1b19c:	d140      	bne.n	1b220 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1b19e:	6a3b      	ldr	r3, [r7, #32]
   1b1a0:	2b00      	cmp	r3, #0
   1b1a2:	d001      	beq.n	1b1a8 <xQueueSemaphoreTake+0x16c>
   1b1a4:	b672      	cpsid	i
   1b1a6:	e7fe      	b.n	1b1a6 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1b1a8:	4b8a      	ldr	r3, [pc, #552]	; (1b3d4 <xQueueSemaphoreTake+0x398>)
   1b1aa:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b1ac:	4b7c      	ldr	r3, [pc, #496]	; (1b3a0 <xQueueSemaphoreTake+0x364>)
   1b1ae:	4798      	blx	r3
   1b1b0:	0003      	movs	r3, r0
   1b1b2:	0018      	movs	r0, r3
   1b1b4:	4b7b      	ldr	r3, [pc, #492]	; (1b3a4 <xQueueSemaphoreTake+0x368>)
   1b1b6:	4798      	blx	r3
   1b1b8:	0003      	movs	r3, r0
   1b1ba:	001a      	movs	r2, r3
   1b1bc:	4b7a      	ldr	r3, [pc, #488]	; (1b3a8 <xQueueSemaphoreTake+0x36c>)
   1b1be:	881b      	ldrh	r3, [r3, #0]
   1b1c0:	4013      	ands	r3, r2
   1b1c2:	b29b      	uxth	r3, r3
   1b1c4:	2b00      	cmp	r3, #0
   1b1c6:	d029      	beq.n	1b21c <xQueueSemaphoreTake+0x1e0>
   1b1c8:	69fb      	ldr	r3, [r7, #28]
   1b1ca:	0018      	movs	r0, r3
   1b1cc:	4b77      	ldr	r3, [pc, #476]	; (1b3ac <xQueueSemaphoreTake+0x370>)
   1b1ce:	4798      	blx	r3
   1b1d0:	0003      	movs	r3, r0
   1b1d2:	001a      	movs	r2, r3
   1b1d4:	4b74      	ldr	r3, [pc, #464]	; (1b3a8 <xQueueSemaphoreTake+0x36c>)
   1b1d6:	881b      	ldrh	r3, [r3, #0]
   1b1d8:	4013      	ands	r3, r2
   1b1da:	b29b      	uxth	r3, r3
   1b1dc:	2b00      	cmp	r3, #0
   1b1de:	d01d      	beq.n	1b21c <xQueueSemaphoreTake+0x1e0>
   1b1e0:	69fb      	ldr	r3, [r7, #28]
   1b1e2:	0018      	movs	r0, r3
   1b1e4:	4b72      	ldr	r3, [pc, #456]	; (1b3b0 <xQueueSemaphoreTake+0x374>)
   1b1e6:	4798      	blx	r3
   1b1e8:	0003      	movs	r3, r0
   1b1ea:	001a      	movs	r2, r3
   1b1ec:	4b71      	ldr	r3, [pc, #452]	; (1b3b4 <xQueueSemaphoreTake+0x378>)
   1b1ee:	5c9b      	ldrb	r3, [r3, r2]
   1b1f0:	3350      	adds	r3, #80	; 0x50
   1b1f2:	b2db      	uxtb	r3, r3
   1b1f4:	001d      	movs	r5, r3
   1b1f6:	69fb      	ldr	r3, [r7, #28]
   1b1f8:	0018      	movs	r0, r3
   1b1fa:	4b6d      	ldr	r3, [pc, #436]	; (1b3b0 <xQueueSemaphoreTake+0x374>)
   1b1fc:	4798      	blx	r3
   1b1fe:	0003      	movs	r3, r0
   1b200:	001a      	movs	r2, r3
   1b202:	4b6c      	ldr	r3, [pc, #432]	; (1b3b4 <xQueueSemaphoreTake+0x378>)
   1b204:	5c9c      	ldrb	r4, [r3, r2]
   1b206:	69fb      	ldr	r3, [r7, #28]
   1b208:	0018      	movs	r0, r3
   1b20a:	4b6b      	ldr	r3, [pc, #428]	; (1b3b8 <xQueueSemaphoreTake+0x37c>)
   1b20c:	4798      	blx	r3
   1b20e:	0003      	movs	r3, r0
   1b210:	b2db      	uxtb	r3, r3
   1b212:	001a      	movs	r2, r3
   1b214:	0021      	movs	r1, r4
   1b216:	0028      	movs	r0, r5
   1b218:	4b68      	ldr	r3, [pc, #416]	; (1b3bc <xQueueSemaphoreTake+0x380>)
   1b21a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1b21c:	2300      	movs	r3, #0
   1b21e:	e147      	b.n	1b4b0 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b222:	2b00      	cmp	r3, #0
   1b224:	d106      	bne.n	1b234 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b226:	230c      	movs	r3, #12
   1b228:	18fb      	adds	r3, r7, r3
   1b22a:	0018      	movs	r0, r3
   1b22c:	4b6a      	ldr	r3, [pc, #424]	; (1b3d8 <xQueueSemaphoreTake+0x39c>)
   1b22e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b230:	2301      	movs	r3, #1
   1b232:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b234:	4b67      	ldr	r3, [pc, #412]	; (1b3d4 <xQueueSemaphoreTake+0x398>)
   1b236:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b238:	4b68      	ldr	r3, [pc, #416]	; (1b3dc <xQueueSemaphoreTake+0x3a0>)
   1b23a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b23c:	4b57      	ldr	r3, [pc, #348]	; (1b39c <xQueueSemaphoreTake+0x360>)
   1b23e:	4798      	blx	r3
   1b240:	69fb      	ldr	r3, [r7, #28]
   1b242:	2244      	movs	r2, #68	; 0x44
   1b244:	5c9b      	ldrb	r3, [r3, r2]
   1b246:	b25b      	sxtb	r3, r3
   1b248:	3301      	adds	r3, #1
   1b24a:	d103      	bne.n	1b254 <xQueueSemaphoreTake+0x218>
   1b24c:	69fb      	ldr	r3, [r7, #28]
   1b24e:	2244      	movs	r2, #68	; 0x44
   1b250:	2100      	movs	r1, #0
   1b252:	5499      	strb	r1, [r3, r2]
   1b254:	69fb      	ldr	r3, [r7, #28]
   1b256:	2245      	movs	r2, #69	; 0x45
   1b258:	5c9b      	ldrb	r3, [r3, r2]
   1b25a:	b25b      	sxtb	r3, r3
   1b25c:	3301      	adds	r3, #1
   1b25e:	d103      	bne.n	1b268 <xQueueSemaphoreTake+0x22c>
   1b260:	69fb      	ldr	r3, [r7, #28]
   1b262:	2245      	movs	r2, #69	; 0x45
   1b264:	2100      	movs	r1, #0
   1b266:	5499      	strb	r1, [r3, r2]
   1b268:	4b5a      	ldr	r3, [pc, #360]	; (1b3d4 <xQueueSemaphoreTake+0x398>)
   1b26a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b26c:	003a      	movs	r2, r7
   1b26e:	230c      	movs	r3, #12
   1b270:	18fb      	adds	r3, r7, r3
   1b272:	0011      	movs	r1, r2
   1b274:	0018      	movs	r0, r3
   1b276:	4b5a      	ldr	r3, [pc, #360]	; (1b3e0 <xQueueSemaphoreTake+0x3a4>)
   1b278:	4798      	blx	r3
   1b27a:	1e03      	subs	r3, r0, #0
   1b27c:	d000      	beq.n	1b280 <xQueueSemaphoreTake+0x244>
   1b27e:	e0bd      	b.n	1b3fc <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b280:	69fb      	ldr	r3, [r7, #28]
   1b282:	0018      	movs	r0, r3
   1b284:	4b57      	ldr	r3, [pc, #348]	; (1b3e4 <xQueueSemaphoreTake+0x3a8>)
   1b286:	4798      	blx	r3
   1b288:	1e03      	subs	r3, r0, #0
   1b28a:	d100      	bne.n	1b28e <xQueueSemaphoreTake+0x252>
   1b28c:	e07c      	b.n	1b388 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1b28e:	4b44      	ldr	r3, [pc, #272]	; (1b3a0 <xQueueSemaphoreTake+0x364>)
   1b290:	4798      	blx	r3
   1b292:	0003      	movs	r3, r0
   1b294:	0018      	movs	r0, r3
   1b296:	4b43      	ldr	r3, [pc, #268]	; (1b3a4 <xQueueSemaphoreTake+0x368>)
   1b298:	4798      	blx	r3
   1b29a:	0003      	movs	r3, r0
   1b29c:	001a      	movs	r2, r3
   1b29e:	4b42      	ldr	r3, [pc, #264]	; (1b3a8 <xQueueSemaphoreTake+0x36c>)
   1b2a0:	881b      	ldrh	r3, [r3, #0]
   1b2a2:	4013      	ands	r3, r2
   1b2a4:	b29b      	uxth	r3, r3
   1b2a6:	2b00      	cmp	r3, #0
   1b2a8:	d029      	beq.n	1b2fe <xQueueSemaphoreTake+0x2c2>
   1b2aa:	69fb      	ldr	r3, [r7, #28]
   1b2ac:	0018      	movs	r0, r3
   1b2ae:	4b3f      	ldr	r3, [pc, #252]	; (1b3ac <xQueueSemaphoreTake+0x370>)
   1b2b0:	4798      	blx	r3
   1b2b2:	0003      	movs	r3, r0
   1b2b4:	001a      	movs	r2, r3
   1b2b6:	4b3c      	ldr	r3, [pc, #240]	; (1b3a8 <xQueueSemaphoreTake+0x36c>)
   1b2b8:	881b      	ldrh	r3, [r3, #0]
   1b2ba:	4013      	ands	r3, r2
   1b2bc:	b29b      	uxth	r3, r3
   1b2be:	2b00      	cmp	r3, #0
   1b2c0:	d01d      	beq.n	1b2fe <xQueueSemaphoreTake+0x2c2>
   1b2c2:	69fb      	ldr	r3, [r7, #28]
   1b2c4:	0018      	movs	r0, r3
   1b2c6:	4b3a      	ldr	r3, [pc, #232]	; (1b3b0 <xQueueSemaphoreTake+0x374>)
   1b2c8:	4798      	blx	r3
   1b2ca:	0003      	movs	r3, r0
   1b2cc:	001a      	movs	r2, r3
   1b2ce:	4b39      	ldr	r3, [pc, #228]	; (1b3b4 <xQueueSemaphoreTake+0x378>)
   1b2d0:	5c9b      	ldrb	r3, [r3, r2]
   1b2d2:	3368      	adds	r3, #104	; 0x68
   1b2d4:	b2db      	uxtb	r3, r3
   1b2d6:	001d      	movs	r5, r3
   1b2d8:	69fb      	ldr	r3, [r7, #28]
   1b2da:	0018      	movs	r0, r3
   1b2dc:	4b34      	ldr	r3, [pc, #208]	; (1b3b0 <xQueueSemaphoreTake+0x374>)
   1b2de:	4798      	blx	r3
   1b2e0:	0003      	movs	r3, r0
   1b2e2:	001a      	movs	r2, r3
   1b2e4:	4b33      	ldr	r3, [pc, #204]	; (1b3b4 <xQueueSemaphoreTake+0x378>)
   1b2e6:	5c9c      	ldrb	r4, [r3, r2]
   1b2e8:	69fb      	ldr	r3, [r7, #28]
   1b2ea:	0018      	movs	r0, r3
   1b2ec:	4b32      	ldr	r3, [pc, #200]	; (1b3b8 <xQueueSemaphoreTake+0x37c>)
   1b2ee:	4798      	blx	r3
   1b2f0:	0003      	movs	r3, r0
   1b2f2:	b2db      	uxtb	r3, r3
   1b2f4:	001a      	movs	r2, r3
   1b2f6:	0021      	movs	r1, r4
   1b2f8:	0028      	movs	r0, r5
   1b2fa:	4b30      	ldr	r3, [pc, #192]	; (1b3bc <xQueueSemaphoreTake+0x380>)
   1b2fc:	4798      	blx	r3
   1b2fe:	69fb      	ldr	r3, [r7, #28]
   1b300:	0018      	movs	r0, r3
   1b302:	4b2b      	ldr	r3, [pc, #172]	; (1b3b0 <xQueueSemaphoreTake+0x374>)
   1b304:	4798      	blx	r3
   1b306:	0003      	movs	r3, r0
   1b308:	001a      	movs	r2, r3
   1b30a:	4b2a      	ldr	r3, [pc, #168]	; (1b3b4 <xQueueSemaphoreTake+0x378>)
   1b30c:	5c9b      	ldrb	r3, [r3, r2]
   1b30e:	2b02      	cmp	r3, #2
   1b310:	d018      	beq.n	1b344 <xQueueSemaphoreTake+0x308>
   1b312:	4b23      	ldr	r3, [pc, #140]	; (1b3a0 <xQueueSemaphoreTake+0x364>)
   1b314:	4798      	blx	r3
   1b316:	0003      	movs	r3, r0
   1b318:	0018      	movs	r0, r3
   1b31a:	4b22      	ldr	r3, [pc, #136]	; (1b3a4 <xQueueSemaphoreTake+0x368>)
   1b31c:	4798      	blx	r3
   1b31e:	0003      	movs	r3, r0
   1b320:	001a      	movs	r2, r3
   1b322:	4b21      	ldr	r3, [pc, #132]	; (1b3a8 <xQueueSemaphoreTake+0x36c>)
   1b324:	881b      	ldrh	r3, [r3, #0]
   1b326:	4013      	ands	r3, r2
   1b328:	b29b      	uxth	r3, r3
   1b32a:	2b00      	cmp	r3, #0
   1b32c:	d00a      	beq.n	1b344 <xQueueSemaphoreTake+0x308>
   1b32e:	4b1c      	ldr	r3, [pc, #112]	; (1b3a0 <xQueueSemaphoreTake+0x364>)
   1b330:	4798      	blx	r3
   1b332:	0003      	movs	r3, r0
   1b334:	0018      	movs	r0, r3
   1b336:	4b22      	ldr	r3, [pc, #136]	; (1b3c0 <xQueueSemaphoreTake+0x384>)
   1b338:	4798      	blx	r3
   1b33a:	0003      	movs	r3, r0
   1b33c:	b2db      	uxtb	r3, r3
   1b33e:	0018      	movs	r0, r3
   1b340:	4b29      	ldr	r3, [pc, #164]	; (1b3e8 <xQueueSemaphoreTake+0x3ac>)
   1b342:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b344:	69fb      	ldr	r3, [r7, #28]
   1b346:	681b      	ldr	r3, [r3, #0]
   1b348:	2b00      	cmp	r3, #0
   1b34a:	d10a      	bne.n	1b362 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1b34c:	4b13      	ldr	r3, [pc, #76]	; (1b39c <xQueueSemaphoreTake+0x360>)
   1b34e:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1b350:	69fb      	ldr	r3, [r7, #28]
   1b352:	685b      	ldr	r3, [r3, #4]
   1b354:	0018      	movs	r0, r3
   1b356:	4b25      	ldr	r3, [pc, #148]	; (1b3ec <xQueueSemaphoreTake+0x3b0>)
   1b358:	4798      	blx	r3
   1b35a:	0003      	movs	r3, r0
   1b35c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1b35e:	4b1d      	ldr	r3, [pc, #116]	; (1b3d4 <xQueueSemaphoreTake+0x398>)
   1b360:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1b362:	69fb      	ldr	r3, [r7, #28]
   1b364:	3324      	adds	r3, #36	; 0x24
   1b366:	683a      	ldr	r2, [r7, #0]
   1b368:	0011      	movs	r1, r2
   1b36a:	0018      	movs	r0, r3
   1b36c:	4b20      	ldr	r3, [pc, #128]	; (1b3f0 <xQueueSemaphoreTake+0x3b4>)
   1b36e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1b370:	69fb      	ldr	r3, [r7, #28]
   1b372:	0018      	movs	r0, r3
   1b374:	4b1f      	ldr	r3, [pc, #124]	; (1b3f4 <xQueueSemaphoreTake+0x3b8>)
   1b376:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1b378:	4b1f      	ldr	r3, [pc, #124]	; (1b3f8 <xQueueSemaphoreTake+0x3bc>)
   1b37a:	4798      	blx	r3
   1b37c:	1e03      	subs	r3, r0, #0
   1b37e:	d000      	beq.n	1b382 <xQueueSemaphoreTake+0x346>
   1b380:	e680      	b.n	1b084 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1b382:	4b13      	ldr	r3, [pc, #76]	; (1b3d0 <xQueueSemaphoreTake+0x394>)
   1b384:	4798      	blx	r3
   1b386:	e67d      	b.n	1b084 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1b388:	69fb      	ldr	r3, [r7, #28]
   1b38a:	0018      	movs	r0, r3
   1b38c:	4b19      	ldr	r3, [pc, #100]	; (1b3f4 <xQueueSemaphoreTake+0x3b8>)
   1b38e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b390:	4b19      	ldr	r3, [pc, #100]	; (1b3f8 <xQueueSemaphoreTake+0x3bc>)
   1b392:	4798      	blx	r3
   1b394:	e676      	b.n	1b084 <xQueueSemaphoreTake+0x48>
   1b396:	46c0      	nop			; (mov r8, r8)
   1b398:	0001cab9 	.word	0x0001cab9
   1b39c:	00019d99 	.word	0x00019d99
   1b3a0:	00018029 	.word	0x00018029
   1b3a4:	00017d8d 	.word	0x00017d8d
   1b3a8:	20000104 	.word	0x20000104
   1b3ac:	00017e4d 	.word	0x00017e4d
   1b3b0:	00017d4d 	.word	0x00017d4d
   1b3b4:	200000f8 	.word	0x200000f8
   1b3b8:	00017e2d 	.word	0x00017e2d
   1b3bc:	00018785 	.word	0x00018785
   1b3c0:	00017d6d 	.word	0x00017d6d
   1b3c4:	00018de1 	.word	0x00018de1
   1b3c8:	0001cf85 	.word	0x0001cf85
   1b3cc:	0001c629 	.word	0x0001c629
   1b3d0:	00019d81 	.word	0x00019d81
   1b3d4:	00019dbd 	.word	0x00019dbd
   1b3d8:	0001c769 	.word	0x0001c769
   1b3dc:	0001c051 	.word	0x0001c051
   1b3e0:	0001c791 	.word	0x0001c791
   1b3e4:	0001b785 	.word	0x0001b785
   1b3e8:	00018f1d 	.word	0x00018f1d
   1b3ec:	0001caf1 	.word	0x0001caf1
   1b3f0:	0001c505 	.word	0x0001c505
   1b3f4:	0001b695 	.word	0x0001b695
   1b3f8:	0001c069 	.word	0x0001c069
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1b3fc:	69fb      	ldr	r3, [r7, #28]
   1b3fe:	0018      	movs	r0, r3
   1b400:	4b2d      	ldr	r3, [pc, #180]	; (1b4b8 <xQueueSemaphoreTake+0x47c>)
   1b402:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b404:	4b2d      	ldr	r3, [pc, #180]	; (1b4bc <xQueueSemaphoreTake+0x480>)
   1b406:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b408:	69fb      	ldr	r3, [r7, #28]
   1b40a:	0018      	movs	r0, r3
   1b40c:	4b2c      	ldr	r3, [pc, #176]	; (1b4c0 <xQueueSemaphoreTake+0x484>)
   1b40e:	4798      	blx	r3
   1b410:	1e03      	subs	r3, r0, #0
   1b412:	d100      	bne.n	1b416 <xQueueSemaphoreTake+0x3da>
   1b414:	e636      	b.n	1b084 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1b416:	6a3b      	ldr	r3, [r7, #32]
   1b418:	2b00      	cmp	r3, #0
   1b41a:	d010      	beq.n	1b43e <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1b41c:	4b29      	ldr	r3, [pc, #164]	; (1b4c4 <xQueueSemaphoreTake+0x488>)
   1b41e:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1b420:	69fb      	ldr	r3, [r7, #28]
   1b422:	0018      	movs	r0, r3
   1b424:	4b28      	ldr	r3, [pc, #160]	; (1b4c8 <xQueueSemaphoreTake+0x48c>)
   1b426:	4798      	blx	r3
   1b428:	0003      	movs	r3, r0
   1b42a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1b42c:	69fb      	ldr	r3, [r7, #28]
   1b42e:	685b      	ldr	r3, [r3, #4]
   1b430:	697a      	ldr	r2, [r7, #20]
   1b432:	0011      	movs	r1, r2
   1b434:	0018      	movs	r0, r3
   1b436:	4b25      	ldr	r3, [pc, #148]	; (1b4cc <xQueueSemaphoreTake+0x490>)
   1b438:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1b43a:	4b25      	ldr	r3, [pc, #148]	; (1b4d0 <xQueueSemaphoreTake+0x494>)
   1b43c:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b43e:	4b25      	ldr	r3, [pc, #148]	; (1b4d4 <xQueueSemaphoreTake+0x498>)
   1b440:	4798      	blx	r3
   1b442:	0003      	movs	r3, r0
   1b444:	0018      	movs	r0, r3
   1b446:	4b24      	ldr	r3, [pc, #144]	; (1b4d8 <xQueueSemaphoreTake+0x49c>)
   1b448:	4798      	blx	r3
   1b44a:	0003      	movs	r3, r0
   1b44c:	001a      	movs	r2, r3
   1b44e:	4b23      	ldr	r3, [pc, #140]	; (1b4dc <xQueueSemaphoreTake+0x4a0>)
   1b450:	881b      	ldrh	r3, [r3, #0]
   1b452:	4013      	ands	r3, r2
   1b454:	b29b      	uxth	r3, r3
   1b456:	2b00      	cmp	r3, #0
   1b458:	d029      	beq.n	1b4ae <xQueueSemaphoreTake+0x472>
   1b45a:	69fb      	ldr	r3, [r7, #28]
   1b45c:	0018      	movs	r0, r3
   1b45e:	4b20      	ldr	r3, [pc, #128]	; (1b4e0 <xQueueSemaphoreTake+0x4a4>)
   1b460:	4798      	blx	r3
   1b462:	0003      	movs	r3, r0
   1b464:	001a      	movs	r2, r3
   1b466:	4b1d      	ldr	r3, [pc, #116]	; (1b4dc <xQueueSemaphoreTake+0x4a0>)
   1b468:	881b      	ldrh	r3, [r3, #0]
   1b46a:	4013      	ands	r3, r2
   1b46c:	b29b      	uxth	r3, r3
   1b46e:	2b00      	cmp	r3, #0
   1b470:	d01d      	beq.n	1b4ae <xQueueSemaphoreTake+0x472>
   1b472:	69fb      	ldr	r3, [r7, #28]
   1b474:	0018      	movs	r0, r3
   1b476:	4b1b      	ldr	r3, [pc, #108]	; (1b4e4 <xQueueSemaphoreTake+0x4a8>)
   1b478:	4798      	blx	r3
   1b47a:	0003      	movs	r3, r0
   1b47c:	001a      	movs	r2, r3
   1b47e:	4b1a      	ldr	r3, [pc, #104]	; (1b4e8 <xQueueSemaphoreTake+0x4ac>)
   1b480:	5c9b      	ldrb	r3, [r3, r2]
   1b482:	3350      	adds	r3, #80	; 0x50
   1b484:	b2db      	uxtb	r3, r3
   1b486:	001d      	movs	r5, r3
   1b488:	69fb      	ldr	r3, [r7, #28]
   1b48a:	0018      	movs	r0, r3
   1b48c:	4b15      	ldr	r3, [pc, #84]	; (1b4e4 <xQueueSemaphoreTake+0x4a8>)
   1b48e:	4798      	blx	r3
   1b490:	0003      	movs	r3, r0
   1b492:	001a      	movs	r2, r3
   1b494:	4b14      	ldr	r3, [pc, #80]	; (1b4e8 <xQueueSemaphoreTake+0x4ac>)
   1b496:	5c9c      	ldrb	r4, [r3, r2]
   1b498:	69fb      	ldr	r3, [r7, #28]
   1b49a:	0018      	movs	r0, r3
   1b49c:	4b13      	ldr	r3, [pc, #76]	; (1b4ec <xQueueSemaphoreTake+0x4b0>)
   1b49e:	4798      	blx	r3
   1b4a0:	0003      	movs	r3, r0
   1b4a2:	b2db      	uxtb	r3, r3
   1b4a4:	001a      	movs	r2, r3
   1b4a6:	0021      	movs	r1, r4
   1b4a8:	0028      	movs	r0, r5
   1b4aa:	4b11      	ldr	r3, [pc, #68]	; (1b4f0 <xQueueSemaphoreTake+0x4b4>)
   1b4ac:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1b4ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1b4b0:	0018      	movs	r0, r3
   1b4b2:	46bd      	mov	sp, r7
   1b4b4:	b00a      	add	sp, #40	; 0x28
   1b4b6:	bdb0      	pop	{r4, r5, r7, pc}
   1b4b8:	0001b695 	.word	0x0001b695
   1b4bc:	0001c069 	.word	0x0001c069
   1b4c0:	0001b785 	.word	0x0001b785
   1b4c4:	00019d99 	.word	0x00019d99
   1b4c8:	0001b537 	.word	0x0001b537
   1b4cc:	0001cde9 	.word	0x0001cde9
   1b4d0:	00019dbd 	.word	0x00019dbd
   1b4d4:	00018029 	.word	0x00018029
   1b4d8:	00017d8d 	.word	0x00017d8d
   1b4dc:	20000104 	.word	0x20000104
   1b4e0:	00017e4d 	.word	0x00017e4d
   1b4e4:	00017d4d 	.word	0x00017d4d
   1b4e8:	200000f8 	.word	0x200000f8
   1b4ec:	00017e2d 	.word	0x00017e2d
   1b4f0:	00018785 	.word	0x00018785

0001b4f4 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1b4f4:	b580      	push	{r7, lr}
   1b4f6:	b082      	sub	sp, #8
   1b4f8:	af00      	add	r7, sp, #0
   1b4fa:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1b4fc:	687b      	ldr	r3, [r7, #4]
   1b4fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1b500:	0018      	movs	r0, r3
   1b502:	46bd      	mov	sp, r7
   1b504:	b002      	add	sp, #8
   1b506:	bd80      	pop	{r7, pc}

0001b508 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1b508:	b580      	push	{r7, lr}
   1b50a:	b082      	sub	sp, #8
   1b50c:	af00      	add	r7, sp, #0
   1b50e:	6078      	str	r0, [r7, #4]
   1b510:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1b512:	687b      	ldr	r3, [r7, #4]
   1b514:	683a      	ldr	r2, [r7, #0]
   1b516:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1b518:	46c0      	nop			; (mov r8, r8)
   1b51a:	46bd      	mov	sp, r7
   1b51c:	b002      	add	sp, #8
   1b51e:	bd80      	pop	{r7, pc}

0001b520 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1b520:	b580      	push	{r7, lr}
   1b522:	b082      	sub	sp, #8
   1b524:	af00      	add	r7, sp, #0
   1b526:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1b528:	687b      	ldr	r3, [r7, #4]
   1b52a:	2250      	movs	r2, #80	; 0x50
   1b52c:	5c9b      	ldrb	r3, [r3, r2]
	}
   1b52e:	0018      	movs	r0, r3
   1b530:	46bd      	mov	sp, r7
   1b532:	b002      	add	sp, #8
   1b534:	bd80      	pop	{r7, pc}

0001b536 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1b536:	b580      	push	{r7, lr}
   1b538:	b084      	sub	sp, #16
   1b53a:	af00      	add	r7, sp, #0
   1b53c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1b53e:	687b      	ldr	r3, [r7, #4]
   1b540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b542:	2b00      	cmp	r3, #0
   1b544:	d006      	beq.n	1b554 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1b546:	687b      	ldr	r3, [r7, #4]
   1b548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b54a:	681b      	ldr	r3, [r3, #0]
   1b54c:	2205      	movs	r2, #5
   1b54e:	1ad3      	subs	r3, r2, r3
   1b550:	60fb      	str	r3, [r7, #12]
   1b552:	e001      	b.n	1b558 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1b554:	2300      	movs	r3, #0
   1b556:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1b558:	68fb      	ldr	r3, [r7, #12]
	}
   1b55a:	0018      	movs	r0, r3
   1b55c:	46bd      	mov	sp, r7
   1b55e:	b004      	add	sp, #16
   1b560:	bd80      	pop	{r7, pc}
	...

0001b564 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1b564:	b580      	push	{r7, lr}
   1b566:	b086      	sub	sp, #24
   1b568:	af00      	add	r7, sp, #0
   1b56a:	60f8      	str	r0, [r7, #12]
   1b56c:	60b9      	str	r1, [r7, #8]
   1b56e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1b570:	2300      	movs	r3, #0
   1b572:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b574:	68fb      	ldr	r3, [r7, #12]
   1b576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b578:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1b57a:	68fb      	ldr	r3, [r7, #12]
   1b57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b57e:	2b00      	cmp	r3, #0
   1b580:	d10e      	bne.n	1b5a0 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b582:	68fb      	ldr	r3, [r7, #12]
   1b584:	681b      	ldr	r3, [r3, #0]
   1b586:	2b00      	cmp	r3, #0
   1b588:	d14e      	bne.n	1b628 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1b58a:	68fb      	ldr	r3, [r7, #12]
   1b58c:	685b      	ldr	r3, [r3, #4]
   1b58e:	0018      	movs	r0, r3
   1b590:	4b2a      	ldr	r3, [pc, #168]	; (1b63c <prvCopyDataToQueue+0xd8>)
   1b592:	4798      	blx	r3
   1b594:	0003      	movs	r3, r0
   1b596:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1b598:	68fb      	ldr	r3, [r7, #12]
   1b59a:	2200      	movs	r2, #0
   1b59c:	605a      	str	r2, [r3, #4]
   1b59e:	e043      	b.n	1b628 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1b5a0:	687b      	ldr	r3, [r7, #4]
   1b5a2:	2b00      	cmp	r3, #0
   1b5a4:	d119      	bne.n	1b5da <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1b5a6:	68fb      	ldr	r3, [r7, #12]
   1b5a8:	6898      	ldr	r0, [r3, #8]
   1b5aa:	68fb      	ldr	r3, [r7, #12]
   1b5ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b5ae:	68bb      	ldr	r3, [r7, #8]
   1b5b0:	0019      	movs	r1, r3
   1b5b2:	4b23      	ldr	r3, [pc, #140]	; (1b640 <prvCopyDataToQueue+0xdc>)
   1b5b4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1b5b6:	68fb      	ldr	r3, [r7, #12]
   1b5b8:	689a      	ldr	r2, [r3, #8]
   1b5ba:	68fb      	ldr	r3, [r7, #12]
   1b5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b5be:	18d2      	adds	r2, r2, r3
   1b5c0:	68fb      	ldr	r3, [r7, #12]
   1b5c2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1b5c4:	68fb      	ldr	r3, [r7, #12]
   1b5c6:	689a      	ldr	r2, [r3, #8]
   1b5c8:	68fb      	ldr	r3, [r7, #12]
   1b5ca:	685b      	ldr	r3, [r3, #4]
   1b5cc:	429a      	cmp	r2, r3
   1b5ce:	d32b      	bcc.n	1b628 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1b5d0:	68fb      	ldr	r3, [r7, #12]
   1b5d2:	681a      	ldr	r2, [r3, #0]
   1b5d4:	68fb      	ldr	r3, [r7, #12]
   1b5d6:	609a      	str	r2, [r3, #8]
   1b5d8:	e026      	b.n	1b628 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b5da:	68fb      	ldr	r3, [r7, #12]
   1b5dc:	68d8      	ldr	r0, [r3, #12]
   1b5de:	68fb      	ldr	r3, [r7, #12]
   1b5e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b5e2:	68bb      	ldr	r3, [r7, #8]
   1b5e4:	0019      	movs	r1, r3
   1b5e6:	4b16      	ldr	r3, [pc, #88]	; (1b640 <prvCopyDataToQueue+0xdc>)
   1b5e8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1b5ea:	68fb      	ldr	r3, [r7, #12]
   1b5ec:	68da      	ldr	r2, [r3, #12]
   1b5ee:	68fb      	ldr	r3, [r7, #12]
   1b5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b5f2:	425b      	negs	r3, r3
   1b5f4:	18d2      	adds	r2, r2, r3
   1b5f6:	68fb      	ldr	r3, [r7, #12]
   1b5f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1b5fa:	68fb      	ldr	r3, [r7, #12]
   1b5fc:	68da      	ldr	r2, [r3, #12]
   1b5fe:	68fb      	ldr	r3, [r7, #12]
   1b600:	681b      	ldr	r3, [r3, #0]
   1b602:	429a      	cmp	r2, r3
   1b604:	d207      	bcs.n	1b616 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1b606:	68fb      	ldr	r3, [r7, #12]
   1b608:	685a      	ldr	r2, [r3, #4]
   1b60a:	68fb      	ldr	r3, [r7, #12]
   1b60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b60e:	425b      	negs	r3, r3
   1b610:	18d2      	adds	r2, r2, r3
   1b612:	68fb      	ldr	r3, [r7, #12]
   1b614:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1b616:	687b      	ldr	r3, [r7, #4]
   1b618:	2b02      	cmp	r3, #2
   1b61a:	d105      	bne.n	1b628 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1b61c:	693b      	ldr	r3, [r7, #16]
   1b61e:	2b00      	cmp	r3, #0
   1b620:	d002      	beq.n	1b628 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1b622:	693b      	ldr	r3, [r7, #16]
   1b624:	3b01      	subs	r3, #1
   1b626:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1b628:	693b      	ldr	r3, [r7, #16]
   1b62a:	1c5a      	adds	r2, r3, #1
   1b62c:	68fb      	ldr	r3, [r7, #12]
   1b62e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1b630:	697b      	ldr	r3, [r7, #20]
}
   1b632:	0018      	movs	r0, r3
   1b634:	46bd      	mov	sp, r7
   1b636:	b006      	add	sp, #24
   1b638:	bd80      	pop	{r7, pc}
   1b63a:	46c0      	nop			; (mov r8, r8)
   1b63c:	0001cc81 	.word	0x0001cc81
   1b640:	000345f9 	.word	0x000345f9

0001b644 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1b644:	b580      	push	{r7, lr}
   1b646:	b082      	sub	sp, #8
   1b648:	af00      	add	r7, sp, #0
   1b64a:	6078      	str	r0, [r7, #4]
   1b64c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1b64e:	687b      	ldr	r3, [r7, #4]
   1b650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b652:	2b00      	cmp	r3, #0
   1b654:	d018      	beq.n	1b688 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1b656:	687b      	ldr	r3, [r7, #4]
   1b658:	68da      	ldr	r2, [r3, #12]
   1b65a:	687b      	ldr	r3, [r7, #4]
   1b65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b65e:	18d2      	adds	r2, r2, r3
   1b660:	687b      	ldr	r3, [r7, #4]
   1b662:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1b664:	687b      	ldr	r3, [r7, #4]
   1b666:	68da      	ldr	r2, [r3, #12]
   1b668:	687b      	ldr	r3, [r7, #4]
   1b66a:	685b      	ldr	r3, [r3, #4]
   1b66c:	429a      	cmp	r2, r3
   1b66e:	d303      	bcc.n	1b678 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1b670:	687b      	ldr	r3, [r7, #4]
   1b672:	681a      	ldr	r2, [r3, #0]
   1b674:	687b      	ldr	r3, [r7, #4]
   1b676:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1b678:	687b      	ldr	r3, [r7, #4]
   1b67a:	68d9      	ldr	r1, [r3, #12]
   1b67c:	687b      	ldr	r3, [r7, #4]
   1b67e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b680:	683b      	ldr	r3, [r7, #0]
   1b682:	0018      	movs	r0, r3
   1b684:	4b02      	ldr	r3, [pc, #8]	; (1b690 <prvCopyDataFromQueue+0x4c>)
   1b686:	4798      	blx	r3
	}
}
   1b688:	46c0      	nop			; (mov r8, r8)
   1b68a:	46bd      	mov	sp, r7
   1b68c:	b002      	add	sp, #8
   1b68e:	bd80      	pop	{r7, pc}
   1b690:	000345f9 	.word	0x000345f9

0001b694 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1b694:	b580      	push	{r7, lr}
   1b696:	b084      	sub	sp, #16
   1b698:	af00      	add	r7, sp, #0
   1b69a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1b69c:	4b34      	ldr	r3, [pc, #208]	; (1b770 <prvUnlockQueue+0xdc>)
   1b69e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1b6a0:	230f      	movs	r3, #15
   1b6a2:	18fb      	adds	r3, r7, r3
   1b6a4:	687a      	ldr	r2, [r7, #4]
   1b6a6:	2145      	movs	r1, #69	; 0x45
   1b6a8:	5c52      	ldrb	r2, [r2, r1]
   1b6aa:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1b6ac:	e022      	b.n	1b6f4 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1b6ae:	687b      	ldr	r3, [r7, #4]
   1b6b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b6b2:	2b00      	cmp	r3, #0
   1b6b4:	d009      	beq.n	1b6ca <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1b6b6:	687b      	ldr	r3, [r7, #4]
   1b6b8:	2100      	movs	r1, #0
   1b6ba:	0018      	movs	r0, r3
   1b6bc:	4b2d      	ldr	r3, [pc, #180]	; (1b774 <prvUnlockQueue+0xe0>)
   1b6be:	4798      	blx	r3
   1b6c0:	1e03      	subs	r3, r0, #0
   1b6c2:	d00f      	beq.n	1b6e4 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1b6c4:	4b2c      	ldr	r3, [pc, #176]	; (1b778 <prvUnlockQueue+0xe4>)
   1b6c6:	4798      	blx	r3
   1b6c8:	e00c      	b.n	1b6e4 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b6ca:	687b      	ldr	r3, [r7, #4]
   1b6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b6ce:	2b00      	cmp	r3, #0
   1b6d0:	d017      	beq.n	1b702 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b6d2:	687b      	ldr	r3, [r7, #4]
   1b6d4:	3324      	adds	r3, #36	; 0x24
   1b6d6:	0018      	movs	r0, r3
   1b6d8:	4b28      	ldr	r3, [pc, #160]	; (1b77c <prvUnlockQueue+0xe8>)
   1b6da:	4798      	blx	r3
   1b6dc:	1e03      	subs	r3, r0, #0
   1b6de:	d001      	beq.n	1b6e4 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1b6e0:	4b25      	ldr	r3, [pc, #148]	; (1b778 <prvUnlockQueue+0xe4>)
   1b6e2:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1b6e4:	230f      	movs	r3, #15
   1b6e6:	18fb      	adds	r3, r7, r3
   1b6e8:	781b      	ldrb	r3, [r3, #0]
   1b6ea:	3b01      	subs	r3, #1
   1b6ec:	b2da      	uxtb	r2, r3
   1b6ee:	230f      	movs	r3, #15
   1b6f0:	18fb      	adds	r3, r7, r3
   1b6f2:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1b6f4:	230f      	movs	r3, #15
   1b6f6:	18fb      	adds	r3, r7, r3
   1b6f8:	781b      	ldrb	r3, [r3, #0]
   1b6fa:	b25b      	sxtb	r3, r3
   1b6fc:	2b00      	cmp	r3, #0
   1b6fe:	dcd6      	bgt.n	1b6ae <prvUnlockQueue+0x1a>
   1b700:	e000      	b.n	1b704 <prvUnlockQueue+0x70>
						break;
   1b702:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1b704:	687b      	ldr	r3, [r7, #4]
   1b706:	2245      	movs	r2, #69	; 0x45
   1b708:	21ff      	movs	r1, #255	; 0xff
   1b70a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1b70c:	4b1c      	ldr	r3, [pc, #112]	; (1b780 <prvUnlockQueue+0xec>)
   1b70e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1b710:	4b17      	ldr	r3, [pc, #92]	; (1b770 <prvUnlockQueue+0xdc>)
   1b712:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1b714:	230e      	movs	r3, #14
   1b716:	18fb      	adds	r3, r7, r3
   1b718:	687a      	ldr	r2, [r7, #4]
   1b71a:	2144      	movs	r1, #68	; 0x44
   1b71c:	5c52      	ldrb	r2, [r2, r1]
   1b71e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1b720:	e014      	b.n	1b74c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b722:	687b      	ldr	r3, [r7, #4]
   1b724:	691b      	ldr	r3, [r3, #16]
   1b726:	2b00      	cmp	r3, #0
   1b728:	d017      	beq.n	1b75a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b72a:	687b      	ldr	r3, [r7, #4]
   1b72c:	3310      	adds	r3, #16
   1b72e:	0018      	movs	r0, r3
   1b730:	4b12      	ldr	r3, [pc, #72]	; (1b77c <prvUnlockQueue+0xe8>)
   1b732:	4798      	blx	r3
   1b734:	1e03      	subs	r3, r0, #0
   1b736:	d001      	beq.n	1b73c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1b738:	4b0f      	ldr	r3, [pc, #60]	; (1b778 <prvUnlockQueue+0xe4>)
   1b73a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1b73c:	230e      	movs	r3, #14
   1b73e:	18fb      	adds	r3, r7, r3
   1b740:	781b      	ldrb	r3, [r3, #0]
   1b742:	3b01      	subs	r3, #1
   1b744:	b2da      	uxtb	r2, r3
   1b746:	230e      	movs	r3, #14
   1b748:	18fb      	adds	r3, r7, r3
   1b74a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1b74c:	230e      	movs	r3, #14
   1b74e:	18fb      	adds	r3, r7, r3
   1b750:	781b      	ldrb	r3, [r3, #0]
   1b752:	b25b      	sxtb	r3, r3
   1b754:	2b00      	cmp	r3, #0
   1b756:	dce4      	bgt.n	1b722 <prvUnlockQueue+0x8e>
   1b758:	e000      	b.n	1b75c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1b75a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1b75c:	687b      	ldr	r3, [r7, #4]
   1b75e:	2244      	movs	r2, #68	; 0x44
   1b760:	21ff      	movs	r1, #255	; 0xff
   1b762:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1b764:	4b06      	ldr	r3, [pc, #24]	; (1b780 <prvUnlockQueue+0xec>)
   1b766:	4798      	blx	r3
}
   1b768:	46c0      	nop			; (mov r8, r8)
   1b76a:	46bd      	mov	sp, r7
   1b76c:	b004      	add	sp, #16
   1b76e:	bd80      	pop	{r7, pc}
   1b770:	00019d99 	.word	0x00019d99
   1b774:	0001b869 	.word	0x0001b869
   1b778:	0001c83d 	.word	0x0001c83d
   1b77c:	0001c629 	.word	0x0001c629
   1b780:	00019dbd 	.word	0x00019dbd

0001b784 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1b784:	b580      	push	{r7, lr}
   1b786:	b084      	sub	sp, #16
   1b788:	af00      	add	r7, sp, #0
   1b78a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1b78c:	4b08      	ldr	r3, [pc, #32]	; (1b7b0 <prvIsQueueEmpty+0x2c>)
   1b78e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1b790:	687b      	ldr	r3, [r7, #4]
   1b792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b794:	2b00      	cmp	r3, #0
   1b796:	d102      	bne.n	1b79e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1b798:	2301      	movs	r3, #1
   1b79a:	60fb      	str	r3, [r7, #12]
   1b79c:	e001      	b.n	1b7a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1b79e:	2300      	movs	r3, #0
   1b7a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1b7a2:	4b04      	ldr	r3, [pc, #16]	; (1b7b4 <prvIsQueueEmpty+0x30>)
   1b7a4:	4798      	blx	r3

	return xReturn;
   1b7a6:	68fb      	ldr	r3, [r7, #12]
}
   1b7a8:	0018      	movs	r0, r3
   1b7aa:	46bd      	mov	sp, r7
   1b7ac:	b004      	add	sp, #16
   1b7ae:	bd80      	pop	{r7, pc}
   1b7b0:	00019d99 	.word	0x00019d99
   1b7b4:	00019dbd 	.word	0x00019dbd

0001b7b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1b7b8:	b580      	push	{r7, lr}
   1b7ba:	b084      	sub	sp, #16
   1b7bc:	af00      	add	r7, sp, #0
   1b7be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1b7c0:	4b09      	ldr	r3, [pc, #36]	; (1b7e8 <prvIsQueueFull+0x30>)
   1b7c2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1b7c4:	687b      	ldr	r3, [r7, #4]
   1b7c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b7c8:	687b      	ldr	r3, [r7, #4]
   1b7ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b7cc:	429a      	cmp	r2, r3
   1b7ce:	d102      	bne.n	1b7d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1b7d0:	2301      	movs	r3, #1
   1b7d2:	60fb      	str	r3, [r7, #12]
   1b7d4:	e001      	b.n	1b7da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1b7d6:	2300      	movs	r3, #0
   1b7d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1b7da:	4b04      	ldr	r3, [pc, #16]	; (1b7ec <prvIsQueueFull+0x34>)
   1b7dc:	4798      	blx	r3

	return xReturn;
   1b7de:	68fb      	ldr	r3, [r7, #12]
}
   1b7e0:	0018      	movs	r0, r3
   1b7e2:	46bd      	mov	sp, r7
   1b7e4:	b004      	add	sp, #16
   1b7e6:	bd80      	pop	{r7, pc}
   1b7e8:	00019d99 	.word	0x00019d99
   1b7ec:	00019dbd 	.word	0x00019dbd

0001b7f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1b7f0:	b580      	push	{r7, lr}
   1b7f2:	b086      	sub	sp, #24
   1b7f4:	af00      	add	r7, sp, #0
   1b7f6:	60f8      	str	r0, [r7, #12]
   1b7f8:	60b9      	str	r1, [r7, #8]
   1b7fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b7fc:	68fb      	ldr	r3, [r7, #12]
   1b7fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1b800:	4b15      	ldr	r3, [pc, #84]	; (1b858 <vQueueWaitForMessageRestricted+0x68>)
   1b802:	4798      	blx	r3
   1b804:	697b      	ldr	r3, [r7, #20]
   1b806:	2244      	movs	r2, #68	; 0x44
   1b808:	5c9b      	ldrb	r3, [r3, r2]
   1b80a:	b25b      	sxtb	r3, r3
   1b80c:	3301      	adds	r3, #1
   1b80e:	d103      	bne.n	1b818 <vQueueWaitForMessageRestricted+0x28>
   1b810:	697b      	ldr	r3, [r7, #20]
   1b812:	2244      	movs	r2, #68	; 0x44
   1b814:	2100      	movs	r1, #0
   1b816:	5499      	strb	r1, [r3, r2]
   1b818:	697b      	ldr	r3, [r7, #20]
   1b81a:	2245      	movs	r2, #69	; 0x45
   1b81c:	5c9b      	ldrb	r3, [r3, r2]
   1b81e:	b25b      	sxtb	r3, r3
   1b820:	3301      	adds	r3, #1
   1b822:	d103      	bne.n	1b82c <vQueueWaitForMessageRestricted+0x3c>
   1b824:	697b      	ldr	r3, [r7, #20]
   1b826:	2245      	movs	r2, #69	; 0x45
   1b828:	2100      	movs	r1, #0
   1b82a:	5499      	strb	r1, [r3, r2]
   1b82c:	4b0b      	ldr	r3, [pc, #44]	; (1b85c <vQueueWaitForMessageRestricted+0x6c>)
   1b82e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1b830:	697b      	ldr	r3, [r7, #20]
   1b832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b834:	2b00      	cmp	r3, #0
   1b836:	d106      	bne.n	1b846 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1b838:	697b      	ldr	r3, [r7, #20]
   1b83a:	3324      	adds	r3, #36	; 0x24
   1b83c:	687a      	ldr	r2, [r7, #4]
   1b83e:	68b9      	ldr	r1, [r7, #8]
   1b840:	0018      	movs	r0, r3
   1b842:	4b07      	ldr	r3, [pc, #28]	; (1b860 <vQueueWaitForMessageRestricted+0x70>)
   1b844:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1b846:	697b      	ldr	r3, [r7, #20]
   1b848:	0018      	movs	r0, r3
   1b84a:	4b06      	ldr	r3, [pc, #24]	; (1b864 <vQueueWaitForMessageRestricted+0x74>)
   1b84c:	4798      	blx	r3
	}
   1b84e:	46c0      	nop			; (mov r8, r8)
   1b850:	46bd      	mov	sp, r7
   1b852:	b006      	add	sp, #24
   1b854:	bd80      	pop	{r7, pc}
   1b856:	46c0      	nop			; (mov r8, r8)
   1b858:	00019d99 	.word	0x00019d99
   1b85c:	00019dbd 	.word	0x00019dbd
   1b860:	0001c549 	.word	0x0001c549
   1b864:	0001b695 	.word	0x0001b695

0001b868 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1b868:	b5b0      	push	{r4, r5, r7, lr}
   1b86a:	b086      	sub	sp, #24
   1b86c:	af00      	add	r7, sp, #0
   1b86e:	6078      	str	r0, [r7, #4]
   1b870:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1b872:	687b      	ldr	r3, [r7, #4]
   1b874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b876:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1b878:	2300      	movs	r3, #0
   1b87a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1b87c:	693b      	ldr	r3, [r7, #16]
   1b87e:	2b00      	cmp	r3, #0
   1b880:	d101      	bne.n	1b886 <prvNotifyQueueSetContainer+0x1e>
   1b882:	b672      	cpsid	i
   1b884:	e7fe      	b.n	1b884 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1b886:	693b      	ldr	r3, [r7, #16]
   1b888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b88a:	693b      	ldr	r3, [r7, #16]
   1b88c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b88e:	429a      	cmp	r2, r3
   1b890:	d301      	bcc.n	1b896 <prvNotifyQueueSetContainer+0x2e>
   1b892:	b672      	cpsid	i
   1b894:	e7fe      	b.n	1b894 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1b896:	693b      	ldr	r3, [r7, #16]
   1b898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b89a:	693b      	ldr	r3, [r7, #16]
   1b89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b89e:	429a      	cmp	r2, r3
   1b8a0:	d300      	bcc.n	1b8a4 <prvNotifyQueueSetContainer+0x3c>
   1b8a2:	e08b      	b.n	1b9bc <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1b8a4:	230f      	movs	r3, #15
   1b8a6:	18fb      	adds	r3, r7, r3
   1b8a8:	693a      	ldr	r2, [r7, #16]
   1b8aa:	2145      	movs	r1, #69	; 0x45
   1b8ac:	5c52      	ldrb	r2, [r2, r1]
   1b8ae:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1b8b0:	4b45      	ldr	r3, [pc, #276]	; (1b9c8 <prvNotifyQueueSetContainer+0x160>)
   1b8b2:	4798      	blx	r3
   1b8b4:	0003      	movs	r3, r0
   1b8b6:	0018      	movs	r0, r3
   1b8b8:	4b44      	ldr	r3, [pc, #272]	; (1b9cc <prvNotifyQueueSetContainer+0x164>)
   1b8ba:	4798      	blx	r3
   1b8bc:	0003      	movs	r3, r0
   1b8be:	001a      	movs	r2, r3
   1b8c0:	4b43      	ldr	r3, [pc, #268]	; (1b9d0 <prvNotifyQueueSetContainer+0x168>)
   1b8c2:	881b      	ldrh	r3, [r3, #0]
   1b8c4:	4013      	ands	r3, r2
   1b8c6:	b29b      	uxth	r3, r3
   1b8c8:	2b00      	cmp	r3, #0
   1b8ca:	d02e      	beq.n	1b92a <prvNotifyQueueSetContainer+0xc2>
   1b8cc:	693b      	ldr	r3, [r7, #16]
   1b8ce:	0018      	movs	r0, r3
   1b8d0:	4b40      	ldr	r3, [pc, #256]	; (1b9d4 <prvNotifyQueueSetContainer+0x16c>)
   1b8d2:	4798      	blx	r3
   1b8d4:	0003      	movs	r3, r0
   1b8d6:	001a      	movs	r2, r3
   1b8d8:	4b3d      	ldr	r3, [pc, #244]	; (1b9d0 <prvNotifyQueueSetContainer+0x168>)
   1b8da:	881b      	ldrh	r3, [r3, #0]
   1b8dc:	4013      	ands	r3, r2
   1b8de:	b29b      	uxth	r3, r3
   1b8e0:	2b00      	cmp	r3, #0
   1b8e2:	d022      	beq.n	1b92a <prvNotifyQueueSetContainer+0xc2>
   1b8e4:	683b      	ldr	r3, [r7, #0]
   1b8e6:	2b00      	cmp	r3, #0
   1b8e8:	d10b      	bne.n	1b902 <prvNotifyQueueSetContainer+0x9a>
   1b8ea:	693b      	ldr	r3, [r7, #16]
   1b8ec:	0018      	movs	r0, r3
   1b8ee:	4b3a      	ldr	r3, [pc, #232]	; (1b9d8 <prvNotifyQueueSetContainer+0x170>)
   1b8f0:	4798      	blx	r3
   1b8f2:	0003      	movs	r3, r0
   1b8f4:	001a      	movs	r2, r3
   1b8f6:	4b39      	ldr	r3, [pc, #228]	; (1b9dc <prvNotifyQueueSetContainer+0x174>)
   1b8f8:	5c9b      	ldrb	r3, [r3, r2]
   1b8fa:	3320      	adds	r3, #32
   1b8fc:	b2db      	uxtb	r3, r3
   1b8fe:	001d      	movs	r5, r3
   1b900:	e000      	b.n	1b904 <prvNotifyQueueSetContainer+0x9c>
   1b902:	2525      	movs	r5, #37	; 0x25
   1b904:	693b      	ldr	r3, [r7, #16]
   1b906:	0018      	movs	r0, r3
   1b908:	4b33      	ldr	r3, [pc, #204]	; (1b9d8 <prvNotifyQueueSetContainer+0x170>)
   1b90a:	4798      	blx	r3
   1b90c:	0003      	movs	r3, r0
   1b90e:	001a      	movs	r2, r3
   1b910:	4b32      	ldr	r3, [pc, #200]	; (1b9dc <prvNotifyQueueSetContainer+0x174>)
   1b912:	5c9c      	ldrb	r4, [r3, r2]
   1b914:	693b      	ldr	r3, [r7, #16]
   1b916:	0018      	movs	r0, r3
   1b918:	4b31      	ldr	r3, [pc, #196]	; (1b9e0 <prvNotifyQueueSetContainer+0x178>)
   1b91a:	4798      	blx	r3
   1b91c:	0003      	movs	r3, r0
   1b91e:	b2db      	uxtb	r3, r3
   1b920:	001a      	movs	r2, r3
   1b922:	0021      	movs	r1, r4
   1b924:	0028      	movs	r0, r5
   1b926:	4b2f      	ldr	r3, [pc, #188]	; (1b9e4 <prvNotifyQueueSetContainer+0x17c>)
   1b928:	4798      	blx	r3
   1b92a:	693b      	ldr	r3, [r7, #16]
   1b92c:	0018      	movs	r0, r3
   1b92e:	4b2a      	ldr	r3, [pc, #168]	; (1b9d8 <prvNotifyQueueSetContainer+0x170>)
   1b930:	4798      	blx	r3
   1b932:	0003      	movs	r3, r0
   1b934:	001a      	movs	r2, r3
   1b936:	4b29      	ldr	r3, [pc, #164]	; (1b9dc <prvNotifyQueueSetContainer+0x174>)
   1b938:	5c9c      	ldrb	r4, [r3, r2]
   1b93a:	693b      	ldr	r3, [r7, #16]
   1b93c:	0018      	movs	r0, r3
   1b93e:	4b28      	ldr	r3, [pc, #160]	; (1b9e0 <prvNotifyQueueSetContainer+0x178>)
   1b940:	4798      	blx	r3
   1b942:	0003      	movs	r3, r0
   1b944:	b2dd      	uxtb	r5, r3
   1b946:	693b      	ldr	r3, [r7, #16]
   1b948:	0018      	movs	r0, r3
   1b94a:	4b23      	ldr	r3, [pc, #140]	; (1b9d8 <prvNotifyQueueSetContainer+0x170>)
   1b94c:	4798      	blx	r3
   1b94e:	0003      	movs	r3, r0
   1b950:	001a      	movs	r2, r3
   1b952:	4b22      	ldr	r3, [pc, #136]	; (1b9dc <prvNotifyQueueSetContainer+0x174>)
   1b954:	5c9b      	ldrb	r3, [r3, r2]
   1b956:	2b02      	cmp	r3, #2
   1b958:	d005      	beq.n	1b966 <prvNotifyQueueSetContainer+0xfe>
   1b95a:	693b      	ldr	r3, [r7, #16]
   1b95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b95e:	b2db      	uxtb	r3, r3
   1b960:	3301      	adds	r3, #1
   1b962:	b2db      	uxtb	r3, r3
   1b964:	e000      	b.n	1b968 <prvNotifyQueueSetContainer+0x100>
   1b966:	2300      	movs	r3, #0
   1b968:	001a      	movs	r2, r3
   1b96a:	0029      	movs	r1, r5
   1b96c:	0020      	movs	r0, r4
   1b96e:	4b1e      	ldr	r3, [pc, #120]	; (1b9e8 <prvNotifyQueueSetContainer+0x180>)
   1b970:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1b972:	683a      	ldr	r2, [r7, #0]
   1b974:	1d39      	adds	r1, r7, #4
   1b976:	693b      	ldr	r3, [r7, #16]
   1b978:	0018      	movs	r0, r3
   1b97a:	4b1c      	ldr	r3, [pc, #112]	; (1b9ec <prvNotifyQueueSetContainer+0x184>)
   1b97c:	4798      	blx	r3
   1b97e:	0003      	movs	r3, r0
   1b980:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1b982:	230f      	movs	r3, #15
   1b984:	18fb      	adds	r3, r7, r3
   1b986:	781b      	ldrb	r3, [r3, #0]
   1b988:	b25b      	sxtb	r3, r3
   1b98a:	3301      	adds	r3, #1
   1b98c:	d10d      	bne.n	1b9aa <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1b98e:	693b      	ldr	r3, [r7, #16]
   1b990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b992:	2b00      	cmp	r3, #0
   1b994:	d012      	beq.n	1b9bc <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1b996:	693b      	ldr	r3, [r7, #16]
   1b998:	3324      	adds	r3, #36	; 0x24
   1b99a:	0018      	movs	r0, r3
   1b99c:	4b14      	ldr	r3, [pc, #80]	; (1b9f0 <prvNotifyQueueSetContainer+0x188>)
   1b99e:	4798      	blx	r3
   1b9a0:	1e03      	subs	r3, r0, #0
   1b9a2:	d00b      	beq.n	1b9bc <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1b9a4:	2301      	movs	r3, #1
   1b9a6:	617b      	str	r3, [r7, #20]
   1b9a8:	e008      	b.n	1b9bc <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1b9aa:	230f      	movs	r3, #15
   1b9ac:	18fb      	adds	r3, r7, r3
   1b9ae:	781b      	ldrb	r3, [r3, #0]
   1b9b0:	3301      	adds	r3, #1
   1b9b2:	b2db      	uxtb	r3, r3
   1b9b4:	b259      	sxtb	r1, r3
   1b9b6:	693b      	ldr	r3, [r7, #16]
   1b9b8:	2245      	movs	r2, #69	; 0x45
   1b9ba:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1b9bc:	697b      	ldr	r3, [r7, #20]
	}
   1b9be:	0018      	movs	r0, r3
   1b9c0:	46bd      	mov	sp, r7
   1b9c2:	b006      	add	sp, #24
   1b9c4:	bdb0      	pop	{r4, r5, r7, pc}
   1b9c6:	46c0      	nop			; (mov r8, r8)
   1b9c8:	00018029 	.word	0x00018029
   1b9cc:	00017d8d 	.word	0x00017d8d
   1b9d0:	20000104 	.word	0x20000104
   1b9d4:	00017e4d 	.word	0x00017e4d
   1b9d8:	00017d4d 	.word	0x00017d4d
   1b9dc:	200000f8 	.word	0x200000f8
   1b9e0:	00017e2d 	.word	0x00017e2d
   1b9e4:	00018785 	.word	0x00018785
   1b9e8:	00018de1 	.word	0x00018de1
   1b9ec:	0001b565 	.word	0x0001b565
   1b9f0:	0001c629 	.word	0x0001c629

0001b9f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1b9f4:	b590      	push	{r4, r7, lr}
   1b9f6:	b08d      	sub	sp, #52	; 0x34
   1b9f8:	af04      	add	r7, sp, #16
   1b9fa:	60f8      	str	r0, [r7, #12]
   1b9fc:	60b9      	str	r1, [r7, #8]
   1b9fe:	603b      	str	r3, [r7, #0]
   1ba00:	1dbb      	adds	r3, r7, #6
   1ba02:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ba04:	1dbb      	adds	r3, r7, #6
   1ba06:	881b      	ldrh	r3, [r3, #0]
   1ba08:	009b      	lsls	r3, r3, #2
   1ba0a:	0018      	movs	r0, r3
   1ba0c:	4b1d      	ldr	r3, [pc, #116]	; (1ba84 <xTaskCreate+0x90>)
   1ba0e:	4798      	blx	r3
   1ba10:	0003      	movs	r3, r0
   1ba12:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1ba14:	697b      	ldr	r3, [r7, #20]
   1ba16:	2b00      	cmp	r3, #0
   1ba18:	d010      	beq.n	1ba3c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1ba1a:	2054      	movs	r0, #84	; 0x54
   1ba1c:	4b19      	ldr	r3, [pc, #100]	; (1ba84 <xTaskCreate+0x90>)
   1ba1e:	4798      	blx	r3
   1ba20:	0003      	movs	r3, r0
   1ba22:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1ba24:	69fb      	ldr	r3, [r7, #28]
   1ba26:	2b00      	cmp	r3, #0
   1ba28:	d003      	beq.n	1ba32 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1ba2a:	69fb      	ldr	r3, [r7, #28]
   1ba2c:	697a      	ldr	r2, [r7, #20]
   1ba2e:	631a      	str	r2, [r3, #48]	; 0x30
   1ba30:	e006      	b.n	1ba40 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1ba32:	697b      	ldr	r3, [r7, #20]
   1ba34:	0018      	movs	r0, r3
   1ba36:	4b14      	ldr	r3, [pc, #80]	; (1ba88 <xTaskCreate+0x94>)
   1ba38:	4798      	blx	r3
   1ba3a:	e001      	b.n	1ba40 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1ba3c:	2300      	movs	r3, #0
   1ba3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1ba40:	69fb      	ldr	r3, [r7, #28]
   1ba42:	2b00      	cmp	r3, #0
   1ba44:	d016      	beq.n	1ba74 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1ba46:	1dbb      	adds	r3, r7, #6
   1ba48:	881a      	ldrh	r2, [r3, #0]
   1ba4a:	683c      	ldr	r4, [r7, #0]
   1ba4c:	68b9      	ldr	r1, [r7, #8]
   1ba4e:	68f8      	ldr	r0, [r7, #12]
   1ba50:	2300      	movs	r3, #0
   1ba52:	9303      	str	r3, [sp, #12]
   1ba54:	69fb      	ldr	r3, [r7, #28]
   1ba56:	9302      	str	r3, [sp, #8]
   1ba58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ba5a:	9301      	str	r3, [sp, #4]
   1ba5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ba5e:	9300      	str	r3, [sp, #0]
   1ba60:	0023      	movs	r3, r4
   1ba62:	4c0a      	ldr	r4, [pc, #40]	; (1ba8c <xTaskCreate+0x98>)
   1ba64:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1ba66:	69fb      	ldr	r3, [r7, #28]
   1ba68:	0018      	movs	r0, r3
   1ba6a:	4b09      	ldr	r3, [pc, #36]	; (1ba90 <xTaskCreate+0x9c>)
   1ba6c:	4798      	blx	r3
			xReturn = pdPASS;
   1ba6e:	2301      	movs	r3, #1
   1ba70:	61bb      	str	r3, [r7, #24]
   1ba72:	e002      	b.n	1ba7a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1ba74:	2301      	movs	r3, #1
   1ba76:	425b      	negs	r3, r3
   1ba78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1ba7a:	69bb      	ldr	r3, [r7, #24]
	}
   1ba7c:	0018      	movs	r0, r3
   1ba7e:	46bd      	mov	sp, r7
   1ba80:	b009      	add	sp, #36	; 0x24
   1ba82:	bd90      	pop	{r4, r7, pc}
   1ba84:	00019ed1 	.word	0x00019ed1
   1ba88:	00019f95 	.word	0x00019f95
   1ba8c:	0001ba95 	.word	0x0001ba95
   1ba90:	0001bba5 	.word	0x0001bba5

0001ba94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1ba94:	b580      	push	{r7, lr}
   1ba96:	b086      	sub	sp, #24
   1ba98:	af00      	add	r7, sp, #0
   1ba9a:	60f8      	str	r0, [r7, #12]
   1ba9c:	60b9      	str	r1, [r7, #8]
   1ba9e:	607a      	str	r2, [r7, #4]
   1baa0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1baa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1baa4:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1baa6:	687b      	ldr	r3, [r7, #4]
   1baa8:	009b      	lsls	r3, r3, #2
   1baaa:	001a      	movs	r2, r3
   1baac:	21a5      	movs	r1, #165	; 0xa5
   1baae:	4b39      	ldr	r3, [pc, #228]	; (1bb94 <prvInitialiseNewTask+0x100>)
   1bab0:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1bab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1bab6:	687b      	ldr	r3, [r7, #4]
   1bab8:	4937      	ldr	r1, [pc, #220]	; (1bb98 <prvInitialiseNewTask+0x104>)
   1baba:	468c      	mov	ip, r1
   1babc:	4463      	add	r3, ip
   1babe:	009b      	lsls	r3, r3, #2
   1bac0:	18d3      	adds	r3, r2, r3
   1bac2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1bac4:	693b      	ldr	r3, [r7, #16]
   1bac6:	2207      	movs	r2, #7
   1bac8:	4393      	bics	r3, r2
   1baca:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1bacc:	693b      	ldr	r3, [r7, #16]
   1bace:	2207      	movs	r2, #7
   1bad0:	4013      	ands	r3, r2
   1bad2:	d001      	beq.n	1bad8 <prvInitialiseNewTask+0x44>
   1bad4:	b672      	cpsid	i
   1bad6:	e7fe      	b.n	1bad6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1bad8:	2300      	movs	r3, #0
   1bada:	617b      	str	r3, [r7, #20]
   1badc:	e013      	b.n	1bb06 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1bade:	68ba      	ldr	r2, [r7, #8]
   1bae0:	697b      	ldr	r3, [r7, #20]
   1bae2:	18d3      	adds	r3, r2, r3
   1bae4:	7818      	ldrb	r0, [r3, #0]
   1bae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bae8:	2134      	movs	r1, #52	; 0x34
   1baea:	697b      	ldr	r3, [r7, #20]
   1baec:	18d3      	adds	r3, r2, r3
   1baee:	185b      	adds	r3, r3, r1
   1baf0:	1c02      	adds	r2, r0, #0
   1baf2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1baf4:	68ba      	ldr	r2, [r7, #8]
   1baf6:	697b      	ldr	r3, [r7, #20]
   1baf8:	18d3      	adds	r3, r2, r3
   1bafa:	781b      	ldrb	r3, [r3, #0]
   1bafc:	2b00      	cmp	r3, #0
   1bafe:	d006      	beq.n	1bb0e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1bb00:	697b      	ldr	r3, [r7, #20]
   1bb02:	3301      	adds	r3, #1
   1bb04:	617b      	str	r3, [r7, #20]
   1bb06:	697b      	ldr	r3, [r7, #20]
   1bb08:	2b07      	cmp	r3, #7
   1bb0a:	d9e8      	bls.n	1bade <prvInitialiseNewTask+0x4a>
   1bb0c:	e000      	b.n	1bb10 <prvInitialiseNewTask+0x7c>
		{
			break;
   1bb0e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1bb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb12:	223b      	movs	r2, #59	; 0x3b
   1bb14:	2100      	movs	r1, #0
   1bb16:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1bb18:	6a3b      	ldr	r3, [r7, #32]
   1bb1a:	2b04      	cmp	r3, #4
   1bb1c:	d901      	bls.n	1bb22 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1bb1e:	2304      	movs	r3, #4
   1bb20:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1bb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb24:	6a3a      	ldr	r2, [r7, #32]
   1bb26:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1bb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb2a:	6a3a      	ldr	r2, [r7, #32]
   1bb2c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1bb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb30:	2200      	movs	r2, #0
   1bb32:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1bb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb36:	3304      	adds	r3, #4
   1bb38:	0018      	movs	r0, r3
   1bb3a:	4b18      	ldr	r3, [pc, #96]	; (1bb9c <prvInitialiseNewTask+0x108>)
   1bb3c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1bb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb40:	3318      	adds	r3, #24
   1bb42:	0018      	movs	r0, r3
   1bb44:	4b15      	ldr	r3, [pc, #84]	; (1bb9c <prvInitialiseNewTask+0x108>)
   1bb46:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1bb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bb4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1bb4e:	6a3b      	ldr	r3, [r7, #32]
   1bb50:	2205      	movs	r2, #5
   1bb52:	1ad2      	subs	r2, r2, r3
   1bb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1bb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bb5c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1bb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb60:	2200      	movs	r2, #0
   1bb62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1bb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb66:	2250      	movs	r2, #80	; 0x50
   1bb68:	2100      	movs	r1, #0
   1bb6a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1bb6c:	683a      	ldr	r2, [r7, #0]
   1bb6e:	68f9      	ldr	r1, [r7, #12]
   1bb70:	693b      	ldr	r3, [r7, #16]
   1bb72:	0018      	movs	r0, r3
   1bb74:	4b0a      	ldr	r3, [pc, #40]	; (1bba0 <prvInitialiseNewTask+0x10c>)
   1bb76:	4798      	blx	r3
   1bb78:	0002      	movs	r2, r0
   1bb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb7c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1bb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bb80:	2b00      	cmp	r3, #0
   1bb82:	d002      	beq.n	1bb8a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1bb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bb86:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bb88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1bb8a:	46c0      	nop			; (mov r8, r8)
   1bb8c:	46bd      	mov	sp, r7
   1bb8e:	b006      	add	sp, #24
   1bb90:	bd80      	pop	{r7, pc}
   1bb92:	46c0      	nop			; (mov r8, r8)
   1bb94:	0003462f 	.word	0x0003462f
   1bb98:	3fffffff 	.word	0x3fffffff
   1bb9c:	00019b41 	.word	0x00019b41
   1bba0:	00019c59 	.word	0x00019c59

0001bba4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1bba4:	b580      	push	{r7, lr}
   1bba6:	b082      	sub	sp, #8
   1bba8:	af00      	add	r7, sp, #0
   1bbaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1bbac:	4b60      	ldr	r3, [pc, #384]	; (1bd30 <prvAddNewTaskToReadyList+0x18c>)
   1bbae:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1bbb0:	4b60      	ldr	r3, [pc, #384]	; (1bd34 <prvAddNewTaskToReadyList+0x190>)
   1bbb2:	681b      	ldr	r3, [r3, #0]
   1bbb4:	1c5a      	adds	r2, r3, #1
   1bbb6:	4b5f      	ldr	r3, [pc, #380]	; (1bd34 <prvAddNewTaskToReadyList+0x190>)
   1bbb8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1bbba:	4b5f      	ldr	r3, [pc, #380]	; (1bd38 <prvAddNewTaskToReadyList+0x194>)
   1bbbc:	681b      	ldr	r3, [r3, #0]
   1bbbe:	2b00      	cmp	r3, #0
   1bbc0:	d109      	bne.n	1bbd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1bbc2:	4b5d      	ldr	r3, [pc, #372]	; (1bd38 <prvAddNewTaskToReadyList+0x194>)
   1bbc4:	687a      	ldr	r2, [r7, #4]
   1bbc6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1bbc8:	4b5a      	ldr	r3, [pc, #360]	; (1bd34 <prvAddNewTaskToReadyList+0x190>)
   1bbca:	681b      	ldr	r3, [r3, #0]
   1bbcc:	2b01      	cmp	r3, #1
   1bbce:	d110      	bne.n	1bbf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1bbd0:	4b5a      	ldr	r3, [pc, #360]	; (1bd3c <prvAddNewTaskToReadyList+0x198>)
   1bbd2:	4798      	blx	r3
   1bbd4:	e00d      	b.n	1bbf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1bbd6:	4b5a      	ldr	r3, [pc, #360]	; (1bd40 <prvAddNewTaskToReadyList+0x19c>)
   1bbd8:	681b      	ldr	r3, [r3, #0]
   1bbda:	2b00      	cmp	r3, #0
   1bbdc:	d109      	bne.n	1bbf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1bbde:	4b56      	ldr	r3, [pc, #344]	; (1bd38 <prvAddNewTaskToReadyList+0x194>)
   1bbe0:	681b      	ldr	r3, [r3, #0]
   1bbe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bbe4:	687b      	ldr	r3, [r7, #4]
   1bbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bbe8:	429a      	cmp	r2, r3
   1bbea:	d802      	bhi.n	1bbf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1bbec:	4b52      	ldr	r3, [pc, #328]	; (1bd38 <prvAddNewTaskToReadyList+0x194>)
   1bbee:	687a      	ldr	r2, [r7, #4]
   1bbf0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1bbf2:	4b54      	ldr	r3, [pc, #336]	; (1bd44 <prvAddNewTaskToReadyList+0x1a0>)
   1bbf4:	681b      	ldr	r3, [r3, #0]
   1bbf6:	1c5a      	adds	r2, r3, #1
   1bbf8:	4b52      	ldr	r3, [pc, #328]	; (1bd44 <prvAddNewTaskToReadyList+0x1a0>)
   1bbfa:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1bbfc:	4b51      	ldr	r3, [pc, #324]	; (1bd44 <prvAddNewTaskToReadyList+0x1a0>)
   1bbfe:	681a      	ldr	r2, [r3, #0]
   1bc00:	687b      	ldr	r3, [r7, #4]
   1bc02:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1bc04:	687b      	ldr	r3, [r7, #4]
   1bc06:	2b00      	cmp	r3, #0
   1bc08:	d052      	beq.n	1bcb0 <prvAddNewTaskToReadyList+0x10c>
   1bc0a:	2003      	movs	r0, #3
   1bc0c:	4b4e      	ldr	r3, [pc, #312]	; (1bd48 <prvAddNewTaskToReadyList+0x1a4>)
   1bc0e:	4798      	blx	r3
   1bc10:	0003      	movs	r3, r0
   1bc12:	b29a      	uxth	r2, r3
   1bc14:	687b      	ldr	r3, [r7, #4]
   1bc16:	0011      	movs	r1, r2
   1bc18:	0018      	movs	r0, r3
   1bc1a:	4b4c      	ldr	r3, [pc, #304]	; (1bd4c <prvAddNewTaskToReadyList+0x1a8>)
   1bc1c:	4798      	blx	r3
   1bc1e:	4b4c      	ldr	r3, [pc, #304]	; (1bd50 <prvAddNewTaskToReadyList+0x1ac>)
   1bc20:	881a      	ldrh	r2, [r3, #0]
   1bc22:	687b      	ldr	r3, [r7, #4]
   1bc24:	0011      	movs	r1, r2
   1bc26:	0018      	movs	r0, r3
   1bc28:	4b4a      	ldr	r3, [pc, #296]	; (1bd54 <prvAddNewTaskToReadyList+0x1b0>)
   1bc2a:	4798      	blx	r3
   1bc2c:	687b      	ldr	r3, [r7, #4]
   1bc2e:	0018      	movs	r0, r3
   1bc30:	4b49      	ldr	r3, [pc, #292]	; (1bd58 <prvAddNewTaskToReadyList+0x1b4>)
   1bc32:	4798      	blx	r3
   1bc34:	0003      	movs	r3, r0
   1bc36:	b2d9      	uxtb	r1, r3
   1bc38:	687b      	ldr	r3, [r7, #4]
   1bc3a:	3334      	adds	r3, #52	; 0x34
   1bc3c:	001a      	movs	r2, r3
   1bc3e:	2003      	movs	r0, #3
   1bc40:	4b46      	ldr	r3, [pc, #280]	; (1bd5c <prvAddNewTaskToReadyList+0x1b8>)
   1bc42:	4798      	blx	r3
   1bc44:	687b      	ldr	r3, [r7, #4]
   1bc46:	0018      	movs	r0, r3
   1bc48:	4b43      	ldr	r3, [pc, #268]	; (1bd58 <prvAddNewTaskToReadyList+0x1b4>)
   1bc4a:	4798      	blx	r3
   1bc4c:	0003      	movs	r3, r0
   1bc4e:	b2d9      	uxtb	r1, r3
   1bc50:	687b      	ldr	r3, [r7, #4]
   1bc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bc54:	b2db      	uxtb	r3, r3
   1bc56:	001a      	movs	r2, r3
   1bc58:	2003      	movs	r0, #3
   1bc5a:	4b41      	ldr	r3, [pc, #260]	; (1bd60 <prvAddNewTaskToReadyList+0x1bc>)
   1bc5c:	4798      	blx	r3
   1bc5e:	4b41      	ldr	r3, [pc, #260]	; (1bd64 <prvAddNewTaskToReadyList+0x1c0>)
   1bc60:	4798      	blx	r3
   1bc62:	0003      	movs	r3, r0
   1bc64:	0018      	movs	r0, r3
   1bc66:	4b40      	ldr	r3, [pc, #256]	; (1bd68 <prvAddNewTaskToReadyList+0x1c4>)
   1bc68:	4798      	blx	r3
   1bc6a:	0003      	movs	r3, r0
   1bc6c:	001a      	movs	r2, r3
   1bc6e:	4b3f      	ldr	r3, [pc, #252]	; (1bd6c <prvAddNewTaskToReadyList+0x1c8>)
   1bc70:	881b      	ldrh	r3, [r3, #0]
   1bc72:	4013      	ands	r3, r2
   1bc74:	b29b      	uxth	r3, r3
   1bc76:	2b00      	cmp	r3, #0
   1bc78:	d016      	beq.n	1bca8 <prvAddNewTaskToReadyList+0x104>
   1bc7a:	687b      	ldr	r3, [r7, #4]
   1bc7c:	0018      	movs	r0, r3
   1bc7e:	4b3a      	ldr	r3, [pc, #232]	; (1bd68 <prvAddNewTaskToReadyList+0x1c4>)
   1bc80:	4798      	blx	r3
   1bc82:	0003      	movs	r3, r0
   1bc84:	001a      	movs	r2, r3
   1bc86:	4b39      	ldr	r3, [pc, #228]	; (1bd6c <prvAddNewTaskToReadyList+0x1c8>)
   1bc88:	881b      	ldrh	r3, [r3, #0]
   1bc8a:	4013      	ands	r3, r2
   1bc8c:	b29b      	uxth	r3, r3
   1bc8e:	2b00      	cmp	r3, #0
   1bc90:	d00a      	beq.n	1bca8 <prvAddNewTaskToReadyList+0x104>
   1bc92:	687b      	ldr	r3, [r7, #4]
   1bc94:	0018      	movs	r0, r3
   1bc96:	4b30      	ldr	r3, [pc, #192]	; (1bd58 <prvAddNewTaskToReadyList+0x1b4>)
   1bc98:	4798      	blx	r3
   1bc9a:	0003      	movs	r3, r0
   1bc9c:	b2db      	uxtb	r3, r3
   1bc9e:	001a      	movs	r2, r3
   1bca0:	2103      	movs	r1, #3
   1bca2:	201b      	movs	r0, #27
   1bca4:	4b32      	ldr	r3, [pc, #200]	; (1bd70 <prvAddNewTaskToReadyList+0x1cc>)
   1bca6:	4798      	blx	r3
   1bca8:	687b      	ldr	r3, [r7, #4]
   1bcaa:	0018      	movs	r0, r3
   1bcac:	4b31      	ldr	r3, [pc, #196]	; (1bd74 <prvAddNewTaskToReadyList+0x1d0>)
   1bcae:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1bcb0:	687b      	ldr	r3, [r7, #4]
   1bcb2:	0018      	movs	r0, r3
   1bcb4:	4b2c      	ldr	r3, [pc, #176]	; (1bd68 <prvAddNewTaskToReadyList+0x1c4>)
   1bcb6:	4798      	blx	r3
   1bcb8:	0003      	movs	r3, r0
   1bcba:	001a      	movs	r2, r3
   1bcbc:	4b2b      	ldr	r3, [pc, #172]	; (1bd6c <prvAddNewTaskToReadyList+0x1c8>)
   1bcbe:	881b      	ldrh	r3, [r3, #0]
   1bcc0:	4013      	ands	r3, r2
   1bcc2:	b29b      	uxth	r3, r3
   1bcc4:	2b00      	cmp	r3, #0
   1bcc6:	d008      	beq.n	1bcda <prvAddNewTaskToReadyList+0x136>
   1bcc8:	687b      	ldr	r3, [r7, #4]
   1bcca:	0018      	movs	r0, r3
   1bccc:	4b22      	ldr	r3, [pc, #136]	; (1bd58 <prvAddNewTaskToReadyList+0x1b4>)
   1bcce:	4798      	blx	r3
   1bcd0:	0003      	movs	r3, r0
   1bcd2:	b2db      	uxtb	r3, r3
   1bcd4:	0018      	movs	r0, r3
   1bcd6:	4b28      	ldr	r3, [pc, #160]	; (1bd78 <prvAddNewTaskToReadyList+0x1d4>)
   1bcd8:	4798      	blx	r3
   1bcda:	687b      	ldr	r3, [r7, #4]
   1bcdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bcde:	4b27      	ldr	r3, [pc, #156]	; (1bd7c <prvAddNewTaskToReadyList+0x1d8>)
   1bce0:	681b      	ldr	r3, [r3, #0]
   1bce2:	429a      	cmp	r2, r3
   1bce4:	d903      	bls.n	1bcee <prvAddNewTaskToReadyList+0x14a>
   1bce6:	687b      	ldr	r3, [r7, #4]
   1bce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bcea:	4b24      	ldr	r3, [pc, #144]	; (1bd7c <prvAddNewTaskToReadyList+0x1d8>)
   1bcec:	601a      	str	r2, [r3, #0]
   1bcee:	687b      	ldr	r3, [r7, #4]
   1bcf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bcf2:	0013      	movs	r3, r2
   1bcf4:	009b      	lsls	r3, r3, #2
   1bcf6:	189b      	adds	r3, r3, r2
   1bcf8:	009b      	lsls	r3, r3, #2
   1bcfa:	4a21      	ldr	r2, [pc, #132]	; (1bd80 <prvAddNewTaskToReadyList+0x1dc>)
   1bcfc:	189a      	adds	r2, r3, r2
   1bcfe:	687b      	ldr	r3, [r7, #4]
   1bd00:	3304      	adds	r3, #4
   1bd02:	0019      	movs	r1, r3
   1bd04:	0010      	movs	r0, r2
   1bd06:	4b1f      	ldr	r3, [pc, #124]	; (1bd84 <prvAddNewTaskToReadyList+0x1e0>)
   1bd08:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1bd0a:	4b1f      	ldr	r3, [pc, #124]	; (1bd88 <prvAddNewTaskToReadyList+0x1e4>)
   1bd0c:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1bd0e:	4b0c      	ldr	r3, [pc, #48]	; (1bd40 <prvAddNewTaskToReadyList+0x19c>)
   1bd10:	681b      	ldr	r3, [r3, #0]
   1bd12:	2b00      	cmp	r3, #0
   1bd14:	d008      	beq.n	1bd28 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1bd16:	4b08      	ldr	r3, [pc, #32]	; (1bd38 <prvAddNewTaskToReadyList+0x194>)
   1bd18:	681b      	ldr	r3, [r3, #0]
   1bd1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bd1c:	687b      	ldr	r3, [r7, #4]
   1bd1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bd20:	429a      	cmp	r2, r3
   1bd22:	d201      	bcs.n	1bd28 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1bd24:	4b19      	ldr	r3, [pc, #100]	; (1bd8c <prvAddNewTaskToReadyList+0x1e8>)
   1bd26:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1bd28:	46c0      	nop			; (mov r8, r8)
   1bd2a:	46bd      	mov	sp, r7
   1bd2c:	b002      	add	sp, #8
   1bd2e:	bd80      	pop	{r7, pc}
   1bd30:	00019d99 	.word	0x00019d99
   1bd34:	20004034 	.word	0x20004034
   1bd38:	20003f5c 	.word	0x20003f5c
   1bd3c:	0001c8c5 	.word	0x0001c8c5
   1bd40:	20004040 	.word	0x20004040
   1bd44:	20004050 	.word	0x20004050
   1bd48:	0001930d 	.word	0x0001930d
   1bd4c:	00017db1 	.word	0x00017db1
   1bd50:	20000106 	.word	0x20000106
   1bd54:	00017ded 	.word	0x00017ded
   1bd58:	00017d6d 	.word	0x00017d6d
   1bd5c:	0001953d 	.word	0x0001953d
   1bd60:	00018ca1 	.word	0x00018ca1
   1bd64:	00018029 	.word	0x00018029
   1bd68:	00017d8d 	.word	0x00017d8d
   1bd6c:	20000104 	.word	0x20000104
   1bd70:	00018785 	.word	0x00018785
   1bd74:	00017eed 	.word	0x00017eed
   1bd78:	0001853d 	.word	0x0001853d
   1bd7c:	2000403c 	.word	0x2000403c
   1bd80:	20003f60 	.word	0x20003f60
   1bd84:	00019b57 	.word	0x00019b57
   1bd88:	00019dbd 	.word	0x00019dbd
   1bd8c:	00019d81 	.word	0x00019d81

0001bd90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1bd90:	b580      	push	{r7, lr}
   1bd92:	b084      	sub	sp, #16
   1bd94:	af00      	add	r7, sp, #0
   1bd96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1bd98:	2300      	movs	r3, #0
   1bd9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1bd9c:	687b      	ldr	r3, [r7, #4]
   1bd9e:	2b00      	cmp	r3, #0
   1bda0:	d045      	beq.n	1be2e <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1bda2:	4b27      	ldr	r3, [pc, #156]	; (1be40 <vTaskDelay+0xb0>)
   1bda4:	681b      	ldr	r3, [r3, #0]
   1bda6:	2b00      	cmp	r3, #0
   1bda8:	d001      	beq.n	1bdae <vTaskDelay+0x1e>
   1bdaa:	b672      	cpsid	i
   1bdac:	e7fe      	b.n	1bdac <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1bdae:	4b25      	ldr	r3, [pc, #148]	; (1be44 <vTaskDelay+0xb4>)
   1bdb0:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1bdb2:	4b25      	ldr	r3, [pc, #148]	; (1be48 <vTaskDelay+0xb8>)
   1bdb4:	681b      	ldr	r3, [r3, #0]
   1bdb6:	0018      	movs	r0, r3
   1bdb8:	4b24      	ldr	r3, [pc, #144]	; (1be4c <vTaskDelay+0xbc>)
   1bdba:	4798      	blx	r3
   1bdbc:	0003      	movs	r3, r0
   1bdbe:	001a      	movs	r2, r3
   1bdc0:	4b23      	ldr	r3, [pc, #140]	; (1be50 <vTaskDelay+0xc0>)
   1bdc2:	881b      	ldrh	r3, [r3, #0]
   1bdc4:	4013      	ands	r3, r2
   1bdc6:	b29b      	uxth	r3, r3
   1bdc8:	2b00      	cmp	r3, #0
   1bdca:	d00e      	beq.n	1bdea <vTaskDelay+0x5a>
   1bdcc:	687b      	ldr	r3, [r7, #4]
   1bdce:	0019      	movs	r1, r3
   1bdd0:	2089      	movs	r0, #137	; 0x89
   1bdd2:	4b20      	ldr	r3, [pc, #128]	; (1be54 <vTaskDelay+0xc4>)
   1bdd4:	4798      	blx	r3
   1bdd6:	4b1c      	ldr	r3, [pc, #112]	; (1be48 <vTaskDelay+0xb8>)
   1bdd8:	681b      	ldr	r3, [r3, #0]
   1bdda:	0018      	movs	r0, r3
   1bddc:	4b1e      	ldr	r3, [pc, #120]	; (1be58 <vTaskDelay+0xc8>)
   1bdde:	4798      	blx	r3
   1bde0:	0003      	movs	r3, r0
   1bde2:	b2db      	uxtb	r3, r3
   1bde4:	0018      	movs	r0, r3
   1bde6:	4b1d      	ldr	r3, [pc, #116]	; (1be5c <vTaskDelay+0xcc>)
   1bde8:	4798      	blx	r3
   1bdea:	4b1d      	ldr	r3, [pc, #116]	; (1be60 <vTaskDelay+0xd0>)
   1bdec:	4798      	blx	r3
   1bdee:	0003      	movs	r3, r0
   1bdf0:	0018      	movs	r0, r3
   1bdf2:	4b16      	ldr	r3, [pc, #88]	; (1be4c <vTaskDelay+0xbc>)
   1bdf4:	4798      	blx	r3
   1bdf6:	0003      	movs	r3, r0
   1bdf8:	001a      	movs	r2, r3
   1bdfa:	4b15      	ldr	r3, [pc, #84]	; (1be50 <vTaskDelay+0xc0>)
   1bdfc:	881b      	ldrh	r3, [r3, #0]
   1bdfe:	4013      	ands	r3, r2
   1be00:	b29b      	uxth	r3, r3
   1be02:	2b00      	cmp	r3, #0
   1be04:	d00a      	beq.n	1be1c <vTaskDelay+0x8c>
   1be06:	4b16      	ldr	r3, [pc, #88]	; (1be60 <vTaskDelay+0xd0>)
   1be08:	4798      	blx	r3
   1be0a:	0003      	movs	r3, r0
   1be0c:	0018      	movs	r0, r3
   1be0e:	4b12      	ldr	r3, [pc, #72]	; (1be58 <vTaskDelay+0xc8>)
   1be10:	4798      	blx	r3
   1be12:	0003      	movs	r3, r0
   1be14:	b2db      	uxtb	r3, r3
   1be16:	0018      	movs	r0, r3
   1be18:	4b10      	ldr	r3, [pc, #64]	; (1be5c <vTaskDelay+0xcc>)
   1be1a:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1be1c:	687b      	ldr	r3, [r7, #4]
   1be1e:	2100      	movs	r1, #0
   1be20:	0018      	movs	r0, r3
   1be22:	4b10      	ldr	r3, [pc, #64]	; (1be64 <vTaskDelay+0xd4>)
   1be24:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1be26:	4b10      	ldr	r3, [pc, #64]	; (1be68 <vTaskDelay+0xd8>)
   1be28:	4798      	blx	r3
   1be2a:	0003      	movs	r3, r0
   1be2c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1be2e:	68fb      	ldr	r3, [r7, #12]
   1be30:	2b00      	cmp	r3, #0
   1be32:	d101      	bne.n	1be38 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1be34:	4b0d      	ldr	r3, [pc, #52]	; (1be6c <vTaskDelay+0xdc>)
   1be36:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1be38:	46c0      	nop			; (mov r8, r8)
   1be3a:	46bd      	mov	sp, r7
   1be3c:	b004      	add	sp, #16
   1be3e:	bd80      	pop	{r7, pc}
   1be40:	2000405c 	.word	0x2000405c
   1be44:	0001c051 	.word	0x0001c051
   1be48:	20003f5c 	.word	0x20003f5c
   1be4c:	00017d8d 	.word	0x00017d8d
   1be50:	20000104 	.word	0x20000104
   1be54:	00018a8d 	.word	0x00018a8d
   1be58:	00017d6d 	.word	0x00017d6d
   1be5c:	00018f1d 	.word	0x00018f1d
   1be60:	00018029 	.word	0x00018029
   1be64:	0001cfa9 	.word	0x0001cfa9
   1be68:	0001c069 	.word	0x0001c069
   1be6c:	00019d81 	.word	0x00019d81

0001be70 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1be70:	b580      	push	{r7, lr}
   1be72:	b084      	sub	sp, #16
   1be74:	af00      	add	r7, sp, #0
   1be76:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1be78:	4b42      	ldr	r3, [pc, #264]	; (1bf84 <vTaskSuspend+0x114>)
   1be7a:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1be7c:	687b      	ldr	r3, [r7, #4]
   1be7e:	2b00      	cmp	r3, #0
   1be80:	d102      	bne.n	1be88 <vTaskSuspend+0x18>
   1be82:	4b41      	ldr	r3, [pc, #260]	; (1bf88 <vTaskSuspend+0x118>)
   1be84:	681b      	ldr	r3, [r3, #0]
   1be86:	e000      	b.n	1be8a <vTaskSuspend+0x1a>
   1be88:	687b      	ldr	r3, [r7, #4]
   1be8a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1be8c:	4b3f      	ldr	r3, [pc, #252]	; (1bf8c <vTaskSuspend+0x11c>)
   1be8e:	4798      	blx	r3
   1be90:	0003      	movs	r3, r0
   1be92:	0018      	movs	r0, r3
   1be94:	4b3e      	ldr	r3, [pc, #248]	; (1bf90 <vTaskSuspend+0x120>)
   1be96:	4798      	blx	r3
   1be98:	0003      	movs	r3, r0
   1be9a:	001a      	movs	r2, r3
   1be9c:	4b3d      	ldr	r3, [pc, #244]	; (1bf94 <vTaskSuspend+0x124>)
   1be9e:	881b      	ldrh	r3, [r3, #0]
   1bea0:	4013      	ands	r3, r2
   1bea2:	b29b      	uxth	r3, r3
   1bea4:	2b00      	cmp	r3, #0
   1bea6:	d016      	beq.n	1bed6 <vTaskSuspend+0x66>
   1bea8:	68fb      	ldr	r3, [r7, #12]
   1beaa:	0018      	movs	r0, r3
   1beac:	4b38      	ldr	r3, [pc, #224]	; (1bf90 <vTaskSuspend+0x120>)
   1beae:	4798      	blx	r3
   1beb0:	0003      	movs	r3, r0
   1beb2:	001a      	movs	r2, r3
   1beb4:	4b37      	ldr	r3, [pc, #220]	; (1bf94 <vTaskSuspend+0x124>)
   1beb6:	881b      	ldrh	r3, [r3, #0]
   1beb8:	4013      	ands	r3, r2
   1beba:	b29b      	uxth	r3, r3
   1bebc:	2b00      	cmp	r3, #0
   1bebe:	d00a      	beq.n	1bed6 <vTaskSuspend+0x66>
   1bec0:	68fb      	ldr	r3, [r7, #12]
   1bec2:	0018      	movs	r0, r3
   1bec4:	4b34      	ldr	r3, [pc, #208]	; (1bf98 <vTaskSuspend+0x128>)
   1bec6:	4798      	blx	r3
   1bec8:	0003      	movs	r3, r0
   1beca:	b2db      	uxtb	r3, r3
   1becc:	001a      	movs	r2, r3
   1bece:	2103      	movs	r1, #3
   1bed0:	208a      	movs	r0, #138	; 0x8a
   1bed2:	4b32      	ldr	r3, [pc, #200]	; (1bf9c <vTaskSuspend+0x12c>)
   1bed4:	4798      	blx	r3
   1bed6:	68fb      	ldr	r3, [r7, #12]
   1bed8:	0018      	movs	r0, r3
   1beda:	4b2f      	ldr	r3, [pc, #188]	; (1bf98 <vTaskSuspend+0x128>)
   1bedc:	4798      	blx	r3
   1bede:	0003      	movs	r3, r0
   1bee0:	b2db      	uxtb	r3, r3
   1bee2:	0018      	movs	r0, r3
   1bee4:	4b2e      	ldr	r3, [pc, #184]	; (1bfa0 <vTaskSuspend+0x130>)
   1bee6:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1bee8:	68fb      	ldr	r3, [r7, #12]
   1beea:	3304      	adds	r3, #4
   1beec:	0018      	movs	r0, r3
   1beee:	4b2d      	ldr	r3, [pc, #180]	; (1bfa4 <vTaskSuspend+0x134>)
   1bef0:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1bef2:	68fb      	ldr	r3, [r7, #12]
   1bef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bef6:	2b00      	cmp	r3, #0
   1bef8:	d004      	beq.n	1bf04 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1befa:	68fb      	ldr	r3, [r7, #12]
   1befc:	3318      	adds	r3, #24
   1befe:	0018      	movs	r0, r3
   1bf00:	4b28      	ldr	r3, [pc, #160]	; (1bfa4 <vTaskSuspend+0x134>)
   1bf02:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1bf04:	68fb      	ldr	r3, [r7, #12]
   1bf06:	1d1a      	adds	r2, r3, #4
   1bf08:	4b27      	ldr	r3, [pc, #156]	; (1bfa8 <vTaskSuspend+0x138>)
   1bf0a:	0011      	movs	r1, r2
   1bf0c:	0018      	movs	r0, r3
   1bf0e:	4b27      	ldr	r3, [pc, #156]	; (1bfac <vTaskSuspend+0x13c>)
   1bf10:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1bf12:	68fb      	ldr	r3, [r7, #12]
   1bf14:	2250      	movs	r2, #80	; 0x50
   1bf16:	5c9b      	ldrb	r3, [r3, r2]
   1bf18:	b2db      	uxtb	r3, r3
   1bf1a:	2b01      	cmp	r3, #1
   1bf1c:	d103      	bne.n	1bf26 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1bf1e:	68fb      	ldr	r3, [r7, #12]
   1bf20:	2250      	movs	r2, #80	; 0x50
   1bf22:	2100      	movs	r1, #0
   1bf24:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1bf26:	4b22      	ldr	r3, [pc, #136]	; (1bfb0 <vTaskSuspend+0x140>)
   1bf28:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1bf2a:	4b22      	ldr	r3, [pc, #136]	; (1bfb4 <vTaskSuspend+0x144>)
   1bf2c:	681b      	ldr	r3, [r3, #0]
   1bf2e:	2b00      	cmp	r3, #0
   1bf30:	d005      	beq.n	1bf3e <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1bf32:	4b14      	ldr	r3, [pc, #80]	; (1bf84 <vTaskSuspend+0x114>)
   1bf34:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1bf36:	4b20      	ldr	r3, [pc, #128]	; (1bfb8 <vTaskSuspend+0x148>)
   1bf38:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1bf3a:	4b1d      	ldr	r3, [pc, #116]	; (1bfb0 <vTaskSuspend+0x140>)
   1bf3c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1bf3e:	4b12      	ldr	r3, [pc, #72]	; (1bf88 <vTaskSuspend+0x118>)
   1bf40:	681b      	ldr	r3, [r3, #0]
   1bf42:	68fa      	ldr	r2, [r7, #12]
   1bf44:	429a      	cmp	r2, r3
   1bf46:	d118      	bne.n	1bf7a <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1bf48:	4b1a      	ldr	r3, [pc, #104]	; (1bfb4 <vTaskSuspend+0x144>)
   1bf4a:	681b      	ldr	r3, [r3, #0]
   1bf4c:	2b00      	cmp	r3, #0
   1bf4e:	d008      	beq.n	1bf62 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1bf50:	4b1a      	ldr	r3, [pc, #104]	; (1bfbc <vTaskSuspend+0x14c>)
   1bf52:	681b      	ldr	r3, [r3, #0]
   1bf54:	2b00      	cmp	r3, #0
   1bf56:	d001      	beq.n	1bf5c <vTaskSuspend+0xec>
   1bf58:	b672      	cpsid	i
   1bf5a:	e7fe      	b.n	1bf5a <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1bf5c:	4b18      	ldr	r3, [pc, #96]	; (1bfc0 <vTaskSuspend+0x150>)
   1bf5e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1bf60:	e00b      	b.n	1bf7a <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1bf62:	4b11      	ldr	r3, [pc, #68]	; (1bfa8 <vTaskSuspend+0x138>)
   1bf64:	681a      	ldr	r2, [r3, #0]
   1bf66:	4b17      	ldr	r3, [pc, #92]	; (1bfc4 <vTaskSuspend+0x154>)
   1bf68:	681b      	ldr	r3, [r3, #0]
   1bf6a:	429a      	cmp	r2, r3
   1bf6c:	d103      	bne.n	1bf76 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1bf6e:	4b06      	ldr	r3, [pc, #24]	; (1bf88 <vTaskSuspend+0x118>)
   1bf70:	2200      	movs	r2, #0
   1bf72:	601a      	str	r2, [r3, #0]
	}
   1bf74:	e001      	b.n	1bf7a <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1bf76:	4b14      	ldr	r3, [pc, #80]	; (1bfc8 <vTaskSuspend+0x158>)
   1bf78:	4798      	blx	r3
	}
   1bf7a:	46c0      	nop			; (mov r8, r8)
   1bf7c:	46bd      	mov	sp, r7
   1bf7e:	b004      	add	sp, #16
   1bf80:	bd80      	pop	{r7, pc}
   1bf82:	46c0      	nop			; (mov r8, r8)
   1bf84:	00019d99 	.word	0x00019d99
   1bf88:	20003f5c 	.word	0x20003f5c
   1bf8c:	00018029 	.word	0x00018029
   1bf90:	00017d8d 	.word	0x00017d8d
   1bf94:	20000104 	.word	0x20000104
   1bf98:	00017d6d 	.word	0x00017d6d
   1bf9c:	00018785 	.word	0x00018785
   1bfa0:	00018f1d 	.word	0x00018f1d
   1bfa4:	00019c07 	.word	0x00019c07
   1bfa8:	20004020 	.word	0x20004020
   1bfac:	00019b57 	.word	0x00019b57
   1bfb0:	00019dbd 	.word	0x00019dbd
   1bfb4:	20004040 	.word	0x20004040
   1bfb8:	0001ca55 	.word	0x0001ca55
   1bfbc:	2000405c 	.word	0x2000405c
   1bfc0:	00019d81 	.word	0x00019d81
   1bfc4:	20004034 	.word	0x20004034
   1bfc8:	0001c3e5 	.word	0x0001c3e5

0001bfcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1bfcc:	b590      	push	{r4, r7, lr}
   1bfce:	b085      	sub	sp, #20
   1bfd0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1bfd2:	4916      	ldr	r1, [pc, #88]	; (1c02c <vTaskStartScheduler+0x60>)
   1bfd4:	4816      	ldr	r0, [pc, #88]	; (1c030 <vTaskStartScheduler+0x64>)
   1bfd6:	4b17      	ldr	r3, [pc, #92]	; (1c034 <vTaskStartScheduler+0x68>)
   1bfd8:	9301      	str	r3, [sp, #4]
   1bfda:	2300      	movs	r3, #0
   1bfdc:	9300      	str	r3, [sp, #0]
   1bfde:	2300      	movs	r3, #0
   1bfe0:	2296      	movs	r2, #150	; 0x96
   1bfe2:	4c15      	ldr	r4, [pc, #84]	; (1c038 <vTaskStartScheduler+0x6c>)
   1bfe4:	47a0      	blx	r4
   1bfe6:	0003      	movs	r3, r0
   1bfe8:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1bfea:	687b      	ldr	r3, [r7, #4]
   1bfec:	2b01      	cmp	r3, #1
   1bfee:	d103      	bne.n	1bff8 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1bff0:	4b12      	ldr	r3, [pc, #72]	; (1c03c <vTaskStartScheduler+0x70>)
   1bff2:	4798      	blx	r3
   1bff4:	0003      	movs	r3, r0
   1bff6:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1bff8:	687b      	ldr	r3, [r7, #4]
   1bffa:	2b01      	cmp	r3, #1
   1bffc:	d10d      	bne.n	1c01a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1bffe:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1c000:	4b0f      	ldr	r3, [pc, #60]	; (1c040 <vTaskStartScheduler+0x74>)
   1c002:	2201      	movs	r2, #1
   1c004:	4252      	negs	r2, r2
   1c006:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1c008:	4b0e      	ldr	r3, [pc, #56]	; (1c044 <vTaskStartScheduler+0x78>)
   1c00a:	2201      	movs	r2, #1
   1c00c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1c00e:	4b0e      	ldr	r3, [pc, #56]	; (1c048 <vTaskStartScheduler+0x7c>)
   1c010:	2200      	movs	r2, #0
   1c012:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1c014:	4b0d      	ldr	r3, [pc, #52]	; (1c04c <vTaskStartScheduler+0x80>)
   1c016:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1c018:	e004      	b.n	1c024 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1c01a:	687b      	ldr	r3, [r7, #4]
   1c01c:	3301      	adds	r3, #1
   1c01e:	d101      	bne.n	1c024 <vTaskStartScheduler+0x58>
   1c020:	b672      	cpsid	i
   1c022:	e7fe      	b.n	1c022 <vTaskStartScheduler+0x56>
}
   1c024:	46c0      	nop			; (mov r8, r8)
   1c026:	46bd      	mov	sp, r7
   1c028:	b003      	add	sp, #12
   1c02a:	bd90      	pop	{r4, r7, pc}
   1c02c:	00037ed0 	.word	0x00037ed0
   1c030:	0001c89d 	.word	0x0001c89d
   1c034:	20004058 	.word	0x20004058
   1c038:	0001b9f5 	.word	0x0001b9f5
   1c03c:	0001d05d 	.word	0x0001d05d
   1c040:	20004054 	.word	0x20004054
   1c044:	20004040 	.word	0x20004040
   1c048:	20004038 	.word	0x20004038
   1c04c:	00019d29 	.word	0x00019d29

0001c050 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1c050:	b580      	push	{r7, lr}
   1c052:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1c054:	4b03      	ldr	r3, [pc, #12]	; (1c064 <vTaskSuspendAll+0x14>)
   1c056:	681b      	ldr	r3, [r3, #0]
   1c058:	1c5a      	adds	r2, r3, #1
   1c05a:	4b02      	ldr	r3, [pc, #8]	; (1c064 <vTaskSuspendAll+0x14>)
   1c05c:	601a      	str	r2, [r3, #0]
}
   1c05e:	46c0      	nop			; (mov r8, r8)
   1c060:	46bd      	mov	sp, r7
   1c062:	bd80      	pop	{r7, pc}
   1c064:	2000405c 	.word	0x2000405c

0001c068 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1c068:	b580      	push	{r7, lr}
   1c06a:	b084      	sub	sp, #16
   1c06c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1c06e:	2300      	movs	r3, #0
   1c070:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1c072:	2300      	movs	r3, #0
   1c074:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1c076:	4b45      	ldr	r3, [pc, #276]	; (1c18c <xTaskResumeAll+0x124>)
   1c078:	681b      	ldr	r3, [r3, #0]
   1c07a:	2b00      	cmp	r3, #0
   1c07c:	d101      	bne.n	1c082 <xTaskResumeAll+0x1a>
   1c07e:	b672      	cpsid	i
   1c080:	e7fe      	b.n	1c080 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1c082:	4b43      	ldr	r3, [pc, #268]	; (1c190 <xTaskResumeAll+0x128>)
   1c084:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1c086:	4b41      	ldr	r3, [pc, #260]	; (1c18c <xTaskResumeAll+0x124>)
   1c088:	681b      	ldr	r3, [r3, #0]
   1c08a:	1e5a      	subs	r2, r3, #1
   1c08c:	4b3f      	ldr	r3, [pc, #252]	; (1c18c <xTaskResumeAll+0x124>)
   1c08e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c090:	4b3e      	ldr	r3, [pc, #248]	; (1c18c <xTaskResumeAll+0x124>)
   1c092:	681b      	ldr	r3, [r3, #0]
   1c094:	2b00      	cmp	r3, #0
   1c096:	d000      	beq.n	1c09a <xTaskResumeAll+0x32>
   1c098:	e071      	b.n	1c17e <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1c09a:	4b3e      	ldr	r3, [pc, #248]	; (1c194 <xTaskResumeAll+0x12c>)
   1c09c:	681b      	ldr	r3, [r3, #0]
   1c09e:	2b00      	cmp	r3, #0
   1c0a0:	d100      	bne.n	1c0a4 <xTaskResumeAll+0x3c>
   1c0a2:	e06c      	b.n	1c17e <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1c0a4:	e044      	b.n	1c130 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1c0a6:	4b3c      	ldr	r3, [pc, #240]	; (1c198 <xTaskResumeAll+0x130>)
   1c0a8:	68db      	ldr	r3, [r3, #12]
   1c0aa:	68db      	ldr	r3, [r3, #12]
   1c0ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c0ae:	68fb      	ldr	r3, [r7, #12]
   1c0b0:	3318      	adds	r3, #24
   1c0b2:	0018      	movs	r0, r3
   1c0b4:	4b39      	ldr	r3, [pc, #228]	; (1c19c <xTaskResumeAll+0x134>)
   1c0b6:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c0b8:	68fb      	ldr	r3, [r7, #12]
   1c0ba:	3304      	adds	r3, #4
   1c0bc:	0018      	movs	r0, r3
   1c0be:	4b37      	ldr	r3, [pc, #220]	; (1c19c <xTaskResumeAll+0x134>)
   1c0c0:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1c0c2:	68fb      	ldr	r3, [r7, #12]
   1c0c4:	0018      	movs	r0, r3
   1c0c6:	4b36      	ldr	r3, [pc, #216]	; (1c1a0 <xTaskResumeAll+0x138>)
   1c0c8:	4798      	blx	r3
   1c0ca:	0003      	movs	r3, r0
   1c0cc:	001a      	movs	r2, r3
   1c0ce:	4b35      	ldr	r3, [pc, #212]	; (1c1a4 <xTaskResumeAll+0x13c>)
   1c0d0:	881b      	ldrh	r3, [r3, #0]
   1c0d2:	4013      	ands	r3, r2
   1c0d4:	b29b      	uxth	r3, r3
   1c0d6:	2b00      	cmp	r3, #0
   1c0d8:	d008      	beq.n	1c0ec <xTaskResumeAll+0x84>
   1c0da:	68fb      	ldr	r3, [r7, #12]
   1c0dc:	0018      	movs	r0, r3
   1c0de:	4b32      	ldr	r3, [pc, #200]	; (1c1a8 <xTaskResumeAll+0x140>)
   1c0e0:	4798      	blx	r3
   1c0e2:	0003      	movs	r3, r0
   1c0e4:	b2db      	uxtb	r3, r3
   1c0e6:	0018      	movs	r0, r3
   1c0e8:	4b30      	ldr	r3, [pc, #192]	; (1c1ac <xTaskResumeAll+0x144>)
   1c0ea:	4798      	blx	r3
   1c0ec:	68fb      	ldr	r3, [r7, #12]
   1c0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c0f0:	4b2f      	ldr	r3, [pc, #188]	; (1c1b0 <xTaskResumeAll+0x148>)
   1c0f2:	681b      	ldr	r3, [r3, #0]
   1c0f4:	429a      	cmp	r2, r3
   1c0f6:	d903      	bls.n	1c100 <xTaskResumeAll+0x98>
   1c0f8:	68fb      	ldr	r3, [r7, #12]
   1c0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c0fc:	4b2c      	ldr	r3, [pc, #176]	; (1c1b0 <xTaskResumeAll+0x148>)
   1c0fe:	601a      	str	r2, [r3, #0]
   1c100:	68fb      	ldr	r3, [r7, #12]
   1c102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c104:	0013      	movs	r3, r2
   1c106:	009b      	lsls	r3, r3, #2
   1c108:	189b      	adds	r3, r3, r2
   1c10a:	009b      	lsls	r3, r3, #2
   1c10c:	4a29      	ldr	r2, [pc, #164]	; (1c1b4 <xTaskResumeAll+0x14c>)
   1c10e:	189a      	adds	r2, r3, r2
   1c110:	68fb      	ldr	r3, [r7, #12]
   1c112:	3304      	adds	r3, #4
   1c114:	0019      	movs	r1, r3
   1c116:	0010      	movs	r0, r2
   1c118:	4b27      	ldr	r3, [pc, #156]	; (1c1b8 <xTaskResumeAll+0x150>)
   1c11a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1c11c:	68fb      	ldr	r3, [r7, #12]
   1c11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c120:	4b26      	ldr	r3, [pc, #152]	; (1c1bc <xTaskResumeAll+0x154>)
   1c122:	681b      	ldr	r3, [r3, #0]
   1c124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c126:	429a      	cmp	r2, r3
   1c128:	d302      	bcc.n	1c130 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1c12a:	4b25      	ldr	r3, [pc, #148]	; (1c1c0 <xTaskResumeAll+0x158>)
   1c12c:	2201      	movs	r2, #1
   1c12e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1c130:	4b19      	ldr	r3, [pc, #100]	; (1c198 <xTaskResumeAll+0x130>)
   1c132:	681b      	ldr	r3, [r3, #0]
   1c134:	2b00      	cmp	r3, #0
   1c136:	d1b6      	bne.n	1c0a6 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1c138:	68fb      	ldr	r3, [r7, #12]
   1c13a:	2b00      	cmp	r3, #0
   1c13c:	d001      	beq.n	1c142 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1c13e:	4b21      	ldr	r3, [pc, #132]	; (1c1c4 <xTaskResumeAll+0x15c>)
   1c140:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1c142:	4b21      	ldr	r3, [pc, #132]	; (1c1c8 <xTaskResumeAll+0x160>)
   1c144:	681b      	ldr	r3, [r3, #0]
   1c146:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1c148:	687b      	ldr	r3, [r7, #4]
   1c14a:	2b00      	cmp	r3, #0
   1c14c:	d00f      	beq.n	1c16e <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1c14e:	4b1f      	ldr	r3, [pc, #124]	; (1c1cc <xTaskResumeAll+0x164>)
   1c150:	4798      	blx	r3
   1c152:	1e03      	subs	r3, r0, #0
   1c154:	d002      	beq.n	1c15c <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1c156:	4b1a      	ldr	r3, [pc, #104]	; (1c1c0 <xTaskResumeAll+0x158>)
   1c158:	2201      	movs	r2, #1
   1c15a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1c15c:	687b      	ldr	r3, [r7, #4]
   1c15e:	3b01      	subs	r3, #1
   1c160:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1c162:	687b      	ldr	r3, [r7, #4]
   1c164:	2b00      	cmp	r3, #0
   1c166:	d1f2      	bne.n	1c14e <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1c168:	4b17      	ldr	r3, [pc, #92]	; (1c1c8 <xTaskResumeAll+0x160>)
   1c16a:	2200      	movs	r2, #0
   1c16c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1c16e:	4b14      	ldr	r3, [pc, #80]	; (1c1c0 <xTaskResumeAll+0x158>)
   1c170:	681b      	ldr	r3, [r3, #0]
   1c172:	2b00      	cmp	r3, #0
   1c174:	d003      	beq.n	1c17e <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1c176:	2301      	movs	r3, #1
   1c178:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1c17a:	4b15      	ldr	r3, [pc, #84]	; (1c1d0 <xTaskResumeAll+0x168>)
   1c17c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1c17e:	4b15      	ldr	r3, [pc, #84]	; (1c1d4 <xTaskResumeAll+0x16c>)
   1c180:	4798      	blx	r3

	return xAlreadyYielded;
   1c182:	68bb      	ldr	r3, [r7, #8]
}
   1c184:	0018      	movs	r0, r3
   1c186:	46bd      	mov	sp, r7
   1c188:	b004      	add	sp, #16
   1c18a:	bd80      	pop	{r7, pc}
   1c18c:	2000405c 	.word	0x2000405c
   1c190:	00019d99 	.word	0x00019d99
   1c194:	20004034 	.word	0x20004034
   1c198:	20003ff4 	.word	0x20003ff4
   1c19c:	00019c07 	.word	0x00019c07
   1c1a0:	00017d8d 	.word	0x00017d8d
   1c1a4:	20000104 	.word	0x20000104
   1c1a8:	00017d6d 	.word	0x00017d6d
   1c1ac:	0001853d 	.word	0x0001853d
   1c1b0:	2000403c 	.word	0x2000403c
   1c1b4:	20003f60 	.word	0x20003f60
   1c1b8:	00019b57 	.word	0x00019b57
   1c1bc:	20003f5c 	.word	0x20003f5c
   1c1c0:	20004048 	.word	0x20004048
   1c1c4:	0001ca55 	.word	0x0001ca55
   1c1c8:	20004044 	.word	0x20004044
   1c1cc:	0001c1f5 	.word	0x0001c1f5
   1c1d0:	00019d81 	.word	0x00019d81
   1c1d4:	00019dbd 	.word	0x00019dbd

0001c1d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1c1d8:	b580      	push	{r7, lr}
   1c1da:	b082      	sub	sp, #8
   1c1dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1c1de:	4b04      	ldr	r3, [pc, #16]	; (1c1f0 <xTaskGetTickCount+0x18>)
   1c1e0:	681b      	ldr	r3, [r3, #0]
   1c1e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1c1e4:	687b      	ldr	r3, [r7, #4]
}
   1c1e6:	0018      	movs	r0, r3
   1c1e8:	46bd      	mov	sp, r7
   1c1ea:	b002      	add	sp, #8
   1c1ec:	bd80      	pop	{r7, pc}
   1c1ee:	46c0      	nop			; (mov r8, r8)
   1c1f0:	20004038 	.word	0x20004038

0001c1f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1c1f4:	b580      	push	{r7, lr}
   1c1f6:	b086      	sub	sp, #24
   1c1f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1c1fa:	2300      	movs	r3, #0
   1c1fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1c1fe:	4b64      	ldr	r3, [pc, #400]	; (1c390 <xTaskIncrementTick+0x19c>)
   1c200:	681b      	ldr	r3, [r3, #0]
   1c202:	2b01      	cmp	r3, #1
   1c204:	d003      	beq.n	1c20e <xTaskIncrementTick+0x1a>
   1c206:	4b63      	ldr	r3, [pc, #396]	; (1c394 <xTaskIncrementTick+0x1a0>)
   1c208:	681b      	ldr	r3, [r3, #0]
   1c20a:	2b00      	cmp	r3, #0
   1c20c:	d107      	bne.n	1c21e <xTaskIncrementTick+0x2a>
   1c20e:	4b62      	ldr	r3, [pc, #392]	; (1c398 <xTaskIncrementTick+0x1a4>)
   1c210:	681b      	ldr	r3, [r3, #0]
   1c212:	1c5a      	adds	r2, r3, #1
   1c214:	4b60      	ldr	r3, [pc, #384]	; (1c398 <xTaskIncrementTick+0x1a4>)
   1c216:	601a      	str	r2, [r3, #0]
   1c218:	2000      	movs	r0, #0
   1c21a:	4b60      	ldr	r3, [pc, #384]	; (1c39c <xTaskIncrementTick+0x1a8>)
   1c21c:	4798      	blx	r3
   1c21e:	4b5c      	ldr	r3, [pc, #368]	; (1c390 <xTaskIncrementTick+0x19c>)
   1c220:	681b      	ldr	r3, [r3, #0]
   1c222:	2b00      	cmp	r3, #0
   1c224:	d106      	bne.n	1c234 <xTaskIncrementTick+0x40>
   1c226:	4b5e      	ldr	r3, [pc, #376]	; (1c3a0 <xTaskIncrementTick+0x1ac>)
   1c228:	681b      	ldr	r3, [r3, #0]
   1c22a:	3301      	adds	r3, #1
   1c22c:	0019      	movs	r1, r3
   1c22e:	2003      	movs	r0, #3
   1c230:	4b5c      	ldr	r3, [pc, #368]	; (1c3a4 <xTaskIncrementTick+0x1b0>)
   1c232:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c234:	4b56      	ldr	r3, [pc, #344]	; (1c390 <xTaskIncrementTick+0x19c>)
   1c236:	681b      	ldr	r3, [r3, #0]
   1c238:	2b00      	cmp	r3, #0
   1c23a:	d000      	beq.n	1c23e <xTaskIncrementTick+0x4a>
   1c23c:	e098      	b.n	1c370 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1c23e:	4b58      	ldr	r3, [pc, #352]	; (1c3a0 <xTaskIncrementTick+0x1ac>)
   1c240:	681b      	ldr	r3, [r3, #0]
   1c242:	3301      	adds	r3, #1
   1c244:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1c246:	4b56      	ldr	r3, [pc, #344]	; (1c3a0 <xTaskIncrementTick+0x1ac>)
   1c248:	693a      	ldr	r2, [r7, #16]
   1c24a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1c24c:	693b      	ldr	r3, [r7, #16]
   1c24e:	2b00      	cmp	r3, #0
   1c250:	d117      	bne.n	1c282 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1c252:	4b55      	ldr	r3, [pc, #340]	; (1c3a8 <xTaskIncrementTick+0x1b4>)
   1c254:	681b      	ldr	r3, [r3, #0]
   1c256:	681b      	ldr	r3, [r3, #0]
   1c258:	2b00      	cmp	r3, #0
   1c25a:	d001      	beq.n	1c260 <xTaskIncrementTick+0x6c>
   1c25c:	b672      	cpsid	i
   1c25e:	e7fe      	b.n	1c25e <xTaskIncrementTick+0x6a>
   1c260:	4b51      	ldr	r3, [pc, #324]	; (1c3a8 <xTaskIncrementTick+0x1b4>)
   1c262:	681b      	ldr	r3, [r3, #0]
   1c264:	60fb      	str	r3, [r7, #12]
   1c266:	4b51      	ldr	r3, [pc, #324]	; (1c3ac <xTaskIncrementTick+0x1b8>)
   1c268:	681a      	ldr	r2, [r3, #0]
   1c26a:	4b4f      	ldr	r3, [pc, #316]	; (1c3a8 <xTaskIncrementTick+0x1b4>)
   1c26c:	601a      	str	r2, [r3, #0]
   1c26e:	4b4f      	ldr	r3, [pc, #316]	; (1c3ac <xTaskIncrementTick+0x1b8>)
   1c270:	68fa      	ldr	r2, [r7, #12]
   1c272:	601a      	str	r2, [r3, #0]
   1c274:	4b4e      	ldr	r3, [pc, #312]	; (1c3b0 <xTaskIncrementTick+0x1bc>)
   1c276:	681b      	ldr	r3, [r3, #0]
   1c278:	1c5a      	adds	r2, r3, #1
   1c27a:	4b4d      	ldr	r3, [pc, #308]	; (1c3b0 <xTaskIncrementTick+0x1bc>)
   1c27c:	601a      	str	r2, [r3, #0]
   1c27e:	4b4d      	ldr	r3, [pc, #308]	; (1c3b4 <xTaskIncrementTick+0x1c0>)
   1c280:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1c282:	4b4d      	ldr	r3, [pc, #308]	; (1c3b8 <xTaskIncrementTick+0x1c4>)
   1c284:	681b      	ldr	r3, [r3, #0]
   1c286:	693a      	ldr	r2, [r7, #16]
   1c288:	429a      	cmp	r2, r3
   1c28a:	d363      	bcc.n	1c354 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1c28c:	4b46      	ldr	r3, [pc, #280]	; (1c3a8 <xTaskIncrementTick+0x1b4>)
   1c28e:	681b      	ldr	r3, [r3, #0]
   1c290:	681b      	ldr	r3, [r3, #0]
   1c292:	2b00      	cmp	r3, #0
   1c294:	d101      	bne.n	1c29a <xTaskIncrementTick+0xa6>
   1c296:	2301      	movs	r3, #1
   1c298:	e000      	b.n	1c29c <xTaskIncrementTick+0xa8>
   1c29a:	2300      	movs	r3, #0
   1c29c:	2b00      	cmp	r3, #0
   1c29e:	d004      	beq.n	1c2aa <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c2a0:	4b45      	ldr	r3, [pc, #276]	; (1c3b8 <xTaskIncrementTick+0x1c4>)
   1c2a2:	2201      	movs	r2, #1
   1c2a4:	4252      	negs	r2, r2
   1c2a6:	601a      	str	r2, [r3, #0]
					break;
   1c2a8:	e054      	b.n	1c354 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1c2aa:	4b3f      	ldr	r3, [pc, #252]	; (1c3a8 <xTaskIncrementTick+0x1b4>)
   1c2ac:	681b      	ldr	r3, [r3, #0]
   1c2ae:	68db      	ldr	r3, [r3, #12]
   1c2b0:	68db      	ldr	r3, [r3, #12]
   1c2b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1c2b4:	68bb      	ldr	r3, [r7, #8]
   1c2b6:	685b      	ldr	r3, [r3, #4]
   1c2b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1c2ba:	693a      	ldr	r2, [r7, #16]
   1c2bc:	687b      	ldr	r3, [r7, #4]
   1c2be:	429a      	cmp	r2, r3
   1c2c0:	d203      	bcs.n	1c2ca <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1c2c2:	4b3d      	ldr	r3, [pc, #244]	; (1c3b8 <xTaskIncrementTick+0x1c4>)
   1c2c4:	687a      	ldr	r2, [r7, #4]
   1c2c6:	601a      	str	r2, [r3, #0]
						break;
   1c2c8:	e044      	b.n	1c354 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c2ca:	68bb      	ldr	r3, [r7, #8]
   1c2cc:	3304      	adds	r3, #4
   1c2ce:	0018      	movs	r0, r3
   1c2d0:	4b3a      	ldr	r3, [pc, #232]	; (1c3bc <xTaskIncrementTick+0x1c8>)
   1c2d2:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1c2d4:	68bb      	ldr	r3, [r7, #8]
   1c2d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c2d8:	2b00      	cmp	r3, #0
   1c2da:	d004      	beq.n	1c2e6 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c2dc:	68bb      	ldr	r3, [r7, #8]
   1c2de:	3318      	adds	r3, #24
   1c2e0:	0018      	movs	r0, r3
   1c2e2:	4b36      	ldr	r3, [pc, #216]	; (1c3bc <xTaskIncrementTick+0x1c8>)
   1c2e4:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1c2e6:	68bb      	ldr	r3, [r7, #8]
   1c2e8:	0018      	movs	r0, r3
   1c2ea:	4b35      	ldr	r3, [pc, #212]	; (1c3c0 <xTaskIncrementTick+0x1cc>)
   1c2ec:	4798      	blx	r3
   1c2ee:	0003      	movs	r3, r0
   1c2f0:	001a      	movs	r2, r3
   1c2f2:	4b34      	ldr	r3, [pc, #208]	; (1c3c4 <xTaskIncrementTick+0x1d0>)
   1c2f4:	881b      	ldrh	r3, [r3, #0]
   1c2f6:	4013      	ands	r3, r2
   1c2f8:	b29b      	uxth	r3, r3
   1c2fa:	2b00      	cmp	r3, #0
   1c2fc:	d008      	beq.n	1c310 <xTaskIncrementTick+0x11c>
   1c2fe:	68bb      	ldr	r3, [r7, #8]
   1c300:	0018      	movs	r0, r3
   1c302:	4b31      	ldr	r3, [pc, #196]	; (1c3c8 <xTaskIncrementTick+0x1d4>)
   1c304:	4798      	blx	r3
   1c306:	0003      	movs	r3, r0
   1c308:	b2db      	uxtb	r3, r3
   1c30a:	0018      	movs	r0, r3
   1c30c:	4b2f      	ldr	r3, [pc, #188]	; (1c3cc <xTaskIncrementTick+0x1d8>)
   1c30e:	4798      	blx	r3
   1c310:	68bb      	ldr	r3, [r7, #8]
   1c312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c314:	4b2e      	ldr	r3, [pc, #184]	; (1c3d0 <xTaskIncrementTick+0x1dc>)
   1c316:	681b      	ldr	r3, [r3, #0]
   1c318:	429a      	cmp	r2, r3
   1c31a:	d903      	bls.n	1c324 <xTaskIncrementTick+0x130>
   1c31c:	68bb      	ldr	r3, [r7, #8]
   1c31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c320:	4b2b      	ldr	r3, [pc, #172]	; (1c3d0 <xTaskIncrementTick+0x1dc>)
   1c322:	601a      	str	r2, [r3, #0]
   1c324:	68bb      	ldr	r3, [r7, #8]
   1c326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c328:	0013      	movs	r3, r2
   1c32a:	009b      	lsls	r3, r3, #2
   1c32c:	189b      	adds	r3, r3, r2
   1c32e:	009b      	lsls	r3, r3, #2
   1c330:	4a28      	ldr	r2, [pc, #160]	; (1c3d4 <xTaskIncrementTick+0x1e0>)
   1c332:	189a      	adds	r2, r3, r2
   1c334:	68bb      	ldr	r3, [r7, #8]
   1c336:	3304      	adds	r3, #4
   1c338:	0019      	movs	r1, r3
   1c33a:	0010      	movs	r0, r2
   1c33c:	4b26      	ldr	r3, [pc, #152]	; (1c3d8 <xTaskIncrementTick+0x1e4>)
   1c33e:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1c340:	68bb      	ldr	r3, [r7, #8]
   1c342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c344:	4b25      	ldr	r3, [pc, #148]	; (1c3dc <xTaskIncrementTick+0x1e8>)
   1c346:	681b      	ldr	r3, [r3, #0]
   1c348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c34a:	429a      	cmp	r2, r3
   1c34c:	d39e      	bcc.n	1c28c <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1c34e:	2301      	movs	r3, #1
   1c350:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1c352:	e79b      	b.n	1c28c <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1c354:	4b21      	ldr	r3, [pc, #132]	; (1c3dc <xTaskIncrementTick+0x1e8>)
   1c356:	681b      	ldr	r3, [r3, #0]
   1c358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c35a:	491e      	ldr	r1, [pc, #120]	; (1c3d4 <xTaskIncrementTick+0x1e0>)
   1c35c:	0013      	movs	r3, r2
   1c35e:	009b      	lsls	r3, r3, #2
   1c360:	189b      	adds	r3, r3, r2
   1c362:	009b      	lsls	r3, r3, #2
   1c364:	585b      	ldr	r3, [r3, r1]
   1c366:	2b01      	cmp	r3, #1
   1c368:	d907      	bls.n	1c37a <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1c36a:	2301      	movs	r3, #1
   1c36c:	617b      	str	r3, [r7, #20]
   1c36e:	e004      	b.n	1c37a <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1c370:	4b08      	ldr	r3, [pc, #32]	; (1c394 <xTaskIncrementTick+0x1a0>)
   1c372:	681b      	ldr	r3, [r3, #0]
   1c374:	1c5a      	adds	r2, r3, #1
   1c376:	4b07      	ldr	r3, [pc, #28]	; (1c394 <xTaskIncrementTick+0x1a0>)
   1c378:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1c37a:	4b19      	ldr	r3, [pc, #100]	; (1c3e0 <xTaskIncrementTick+0x1ec>)
   1c37c:	681b      	ldr	r3, [r3, #0]
   1c37e:	2b00      	cmp	r3, #0
   1c380:	d001      	beq.n	1c386 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1c382:	2301      	movs	r3, #1
   1c384:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1c386:	697b      	ldr	r3, [r7, #20]
}
   1c388:	0018      	movs	r0, r3
   1c38a:	46bd      	mov	sp, r7
   1c38c:	b006      	add	sp, #24
   1c38e:	bd80      	pop	{r7, pc}
   1c390:	2000405c 	.word	0x2000405c
   1c394:	20004044 	.word	0x20004044
   1c398:	20000bbc 	.word	0x20000bbc
   1c39c:	00019a21 	.word	0x00019a21
   1c3a0:	20004038 	.word	0x20004038
   1c3a4:	00018a8d 	.word	0x00018a8d
   1c3a8:	20003fec 	.word	0x20003fec
   1c3ac:	20003ff0 	.word	0x20003ff0
   1c3b0:	2000404c 	.word	0x2000404c
   1c3b4:	0001ca55 	.word	0x0001ca55
   1c3b8:	20004054 	.word	0x20004054
   1c3bc:	00019c07 	.word	0x00019c07
   1c3c0:	00017d8d 	.word	0x00017d8d
   1c3c4:	20000104 	.word	0x20000104
   1c3c8:	00017d6d 	.word	0x00017d6d
   1c3cc:	0001853d 	.word	0x0001853d
   1c3d0:	2000403c 	.word	0x2000403c
   1c3d4:	20003f60 	.word	0x20003f60
   1c3d8:	00019b57 	.word	0x00019b57
   1c3dc:	20003f5c 	.word	0x20003f5c
   1c3e0:	20004048 	.word	0x20004048

0001c3e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1c3e4:	b580      	push	{r7, lr}
   1c3e6:	b082      	sub	sp, #8
   1c3e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1c3ea:	4b3a      	ldr	r3, [pc, #232]	; (1c4d4 <vTaskSwitchContext+0xf0>)
   1c3ec:	681b      	ldr	r3, [r3, #0]
   1c3ee:	2b00      	cmp	r3, #0
   1c3f0:	d003      	beq.n	1c3fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1c3f2:	4b39      	ldr	r3, [pc, #228]	; (1c4d8 <vTaskSwitchContext+0xf4>)
   1c3f4:	2201      	movs	r2, #1
   1c3f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1c3f8:	e067      	b.n	1c4ca <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1c3fa:	4b37      	ldr	r3, [pc, #220]	; (1c4d8 <vTaskSwitchContext+0xf4>)
   1c3fc:	2200      	movs	r2, #0
   1c3fe:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1c400:	4b36      	ldr	r3, [pc, #216]	; (1c4dc <vTaskSwitchContext+0xf8>)
   1c402:	681b      	ldr	r3, [r3, #0]
   1c404:	681a      	ldr	r2, [r3, #0]
   1c406:	4b35      	ldr	r3, [pc, #212]	; (1c4dc <vTaskSwitchContext+0xf8>)
   1c408:	681b      	ldr	r3, [r3, #0]
   1c40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c40c:	429a      	cmp	r2, r3
   1c40e:	d808      	bhi.n	1c422 <vTaskSwitchContext+0x3e>
   1c410:	4b32      	ldr	r3, [pc, #200]	; (1c4dc <vTaskSwitchContext+0xf8>)
   1c412:	681a      	ldr	r2, [r3, #0]
   1c414:	4b31      	ldr	r3, [pc, #196]	; (1c4dc <vTaskSwitchContext+0xf8>)
   1c416:	681b      	ldr	r3, [r3, #0]
   1c418:	3334      	adds	r3, #52	; 0x34
   1c41a:	0019      	movs	r1, r3
   1c41c:	0010      	movs	r0, r2
   1c41e:	4b30      	ldr	r3, [pc, #192]	; (1c4e0 <vTaskSwitchContext+0xfc>)
   1c420:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1c422:	4b30      	ldr	r3, [pc, #192]	; (1c4e4 <vTaskSwitchContext+0x100>)
   1c424:	681b      	ldr	r3, [r3, #0]
   1c426:	607b      	str	r3, [r7, #4]
   1c428:	e007      	b.n	1c43a <vTaskSwitchContext+0x56>
   1c42a:	687b      	ldr	r3, [r7, #4]
   1c42c:	2b00      	cmp	r3, #0
   1c42e:	d101      	bne.n	1c434 <vTaskSwitchContext+0x50>
   1c430:	b672      	cpsid	i
   1c432:	e7fe      	b.n	1c432 <vTaskSwitchContext+0x4e>
   1c434:	687b      	ldr	r3, [r7, #4]
   1c436:	3b01      	subs	r3, #1
   1c438:	607b      	str	r3, [r7, #4]
   1c43a:	492b      	ldr	r1, [pc, #172]	; (1c4e8 <vTaskSwitchContext+0x104>)
   1c43c:	687a      	ldr	r2, [r7, #4]
   1c43e:	0013      	movs	r3, r2
   1c440:	009b      	lsls	r3, r3, #2
   1c442:	189b      	adds	r3, r3, r2
   1c444:	009b      	lsls	r3, r3, #2
   1c446:	585b      	ldr	r3, [r3, r1]
   1c448:	2b00      	cmp	r3, #0
   1c44a:	d0ee      	beq.n	1c42a <vTaskSwitchContext+0x46>
   1c44c:	687a      	ldr	r2, [r7, #4]
   1c44e:	0013      	movs	r3, r2
   1c450:	009b      	lsls	r3, r3, #2
   1c452:	189b      	adds	r3, r3, r2
   1c454:	009b      	lsls	r3, r3, #2
   1c456:	4a24      	ldr	r2, [pc, #144]	; (1c4e8 <vTaskSwitchContext+0x104>)
   1c458:	189b      	adds	r3, r3, r2
   1c45a:	603b      	str	r3, [r7, #0]
   1c45c:	683b      	ldr	r3, [r7, #0]
   1c45e:	685b      	ldr	r3, [r3, #4]
   1c460:	685a      	ldr	r2, [r3, #4]
   1c462:	683b      	ldr	r3, [r7, #0]
   1c464:	605a      	str	r2, [r3, #4]
   1c466:	683b      	ldr	r3, [r7, #0]
   1c468:	685a      	ldr	r2, [r3, #4]
   1c46a:	683b      	ldr	r3, [r7, #0]
   1c46c:	3308      	adds	r3, #8
   1c46e:	429a      	cmp	r2, r3
   1c470:	d104      	bne.n	1c47c <vTaskSwitchContext+0x98>
   1c472:	683b      	ldr	r3, [r7, #0]
   1c474:	685b      	ldr	r3, [r3, #4]
   1c476:	685a      	ldr	r2, [r3, #4]
   1c478:	683b      	ldr	r3, [r7, #0]
   1c47a:	605a      	str	r2, [r3, #4]
   1c47c:	683b      	ldr	r3, [r7, #0]
   1c47e:	685b      	ldr	r3, [r3, #4]
   1c480:	68da      	ldr	r2, [r3, #12]
   1c482:	4b16      	ldr	r3, [pc, #88]	; (1c4dc <vTaskSwitchContext+0xf8>)
   1c484:	601a      	str	r2, [r3, #0]
   1c486:	4b17      	ldr	r3, [pc, #92]	; (1c4e4 <vTaskSwitchContext+0x100>)
   1c488:	687a      	ldr	r2, [r7, #4]
   1c48a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1c48c:	4b17      	ldr	r3, [pc, #92]	; (1c4ec <vTaskSwitchContext+0x108>)
   1c48e:	2201      	movs	r2, #1
   1c490:	601a      	str	r2, [r3, #0]
   1c492:	4b17      	ldr	r3, [pc, #92]	; (1c4f0 <vTaskSwitchContext+0x10c>)
   1c494:	4798      	blx	r3
   1c496:	0003      	movs	r3, r0
   1c498:	0018      	movs	r0, r3
   1c49a:	4b16      	ldr	r3, [pc, #88]	; (1c4f4 <vTaskSwitchContext+0x110>)
   1c49c:	4798      	blx	r3
   1c49e:	0003      	movs	r3, r0
   1c4a0:	001a      	movs	r2, r3
   1c4a2:	4b15      	ldr	r3, [pc, #84]	; (1c4f8 <vTaskSwitchContext+0x114>)
   1c4a4:	881b      	ldrh	r3, [r3, #0]
   1c4a6:	4013      	ands	r3, r2
   1c4a8:	b29b      	uxth	r3, r3
   1c4aa:	2b00      	cmp	r3, #0
   1c4ac:	d00a      	beq.n	1c4c4 <vTaskSwitchContext+0xe0>
   1c4ae:	4b10      	ldr	r3, [pc, #64]	; (1c4f0 <vTaskSwitchContext+0x10c>)
   1c4b0:	4798      	blx	r3
   1c4b2:	0003      	movs	r3, r0
   1c4b4:	0018      	movs	r0, r3
   1c4b6:	4b11      	ldr	r3, [pc, #68]	; (1c4fc <vTaskSwitchContext+0x118>)
   1c4b8:	4798      	blx	r3
   1c4ba:	0003      	movs	r3, r0
   1c4bc:	b2db      	uxtb	r3, r3
   1c4be:	0018      	movs	r0, r3
   1c4c0:	4b0f      	ldr	r3, [pc, #60]	; (1c500 <vTaskSwitchContext+0x11c>)
   1c4c2:	4798      	blx	r3
   1c4c4:	4b09      	ldr	r3, [pc, #36]	; (1c4ec <vTaskSwitchContext+0x108>)
   1c4c6:	2202      	movs	r2, #2
   1c4c8:	601a      	str	r2, [r3, #0]
}
   1c4ca:	46c0      	nop			; (mov r8, r8)
   1c4cc:	46bd      	mov	sp, r7
   1c4ce:	b002      	add	sp, #8
   1c4d0:	bd80      	pop	{r7, pc}
   1c4d2:	46c0      	nop			; (mov r8, r8)
   1c4d4:	2000405c 	.word	0x2000405c
   1c4d8:	20004048 	.word	0x20004048
   1c4dc:	20003f5c 	.word	0x20003f5c
   1c4e0:	0003263d 	.word	0x0003263d
   1c4e4:	2000403c 	.word	0x2000403c
   1c4e8:	20003f60 	.word	0x20003f60
   1c4ec:	20000bc8 	.word	0x20000bc8
   1c4f0:	00018029 	.word	0x00018029
   1c4f4:	00017d8d 	.word	0x00017d8d
   1c4f8:	20000104 	.word	0x20000104
   1c4fc:	00017d6d 	.word	0x00017d6d
   1c500:	00018b89 	.word	0x00018b89

0001c504 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1c504:	b580      	push	{r7, lr}
   1c506:	b082      	sub	sp, #8
   1c508:	af00      	add	r7, sp, #0
   1c50a:	6078      	str	r0, [r7, #4]
   1c50c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1c50e:	687b      	ldr	r3, [r7, #4]
   1c510:	2b00      	cmp	r3, #0
   1c512:	d101      	bne.n	1c518 <vTaskPlaceOnEventList+0x14>
   1c514:	b672      	cpsid	i
   1c516:	e7fe      	b.n	1c516 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1c518:	4b08      	ldr	r3, [pc, #32]	; (1c53c <vTaskPlaceOnEventList+0x38>)
   1c51a:	681b      	ldr	r3, [r3, #0]
   1c51c:	3318      	adds	r3, #24
   1c51e:	001a      	movs	r2, r3
   1c520:	687b      	ldr	r3, [r7, #4]
   1c522:	0011      	movs	r1, r2
   1c524:	0018      	movs	r0, r3
   1c526:	4b06      	ldr	r3, [pc, #24]	; (1c540 <vTaskPlaceOnEventList+0x3c>)
   1c528:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1c52a:	683b      	ldr	r3, [r7, #0]
   1c52c:	2101      	movs	r1, #1
   1c52e:	0018      	movs	r0, r3
   1c530:	4b04      	ldr	r3, [pc, #16]	; (1c544 <vTaskPlaceOnEventList+0x40>)
   1c532:	4798      	blx	r3
}
   1c534:	46c0      	nop			; (mov r8, r8)
   1c536:	46bd      	mov	sp, r7
   1c538:	b002      	add	sp, #8
   1c53a:	bd80      	pop	{r7, pc}
   1c53c:	20003f5c 	.word	0x20003f5c
   1c540:	00019b9b 	.word	0x00019b9b
   1c544:	0001cfa9 	.word	0x0001cfa9

0001c548 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1c548:	b580      	push	{r7, lr}
   1c54a:	b084      	sub	sp, #16
   1c54c:	af00      	add	r7, sp, #0
   1c54e:	60f8      	str	r0, [r7, #12]
   1c550:	60b9      	str	r1, [r7, #8]
   1c552:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1c554:	68fb      	ldr	r3, [r7, #12]
   1c556:	2b00      	cmp	r3, #0
   1c558:	d101      	bne.n	1c55e <vTaskPlaceOnEventListRestricted+0x16>
   1c55a:	b672      	cpsid	i
   1c55c:	e7fe      	b.n	1c55c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1c55e:	4b28      	ldr	r3, [pc, #160]	; (1c600 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c560:	681b      	ldr	r3, [r3, #0]
   1c562:	3318      	adds	r3, #24
   1c564:	001a      	movs	r2, r3
   1c566:	68fb      	ldr	r3, [r7, #12]
   1c568:	0011      	movs	r1, r2
   1c56a:	0018      	movs	r0, r3
   1c56c:	4b25      	ldr	r3, [pc, #148]	; (1c604 <vTaskPlaceOnEventListRestricted+0xbc>)
   1c56e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1c570:	687b      	ldr	r3, [r7, #4]
   1c572:	2b00      	cmp	r3, #0
   1c574:	d002      	beq.n	1c57c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1c576:	2301      	movs	r3, #1
   1c578:	425b      	negs	r3, r3
   1c57a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1c57c:	4b20      	ldr	r3, [pc, #128]	; (1c600 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c57e:	681b      	ldr	r3, [r3, #0]
   1c580:	0018      	movs	r0, r3
   1c582:	4b21      	ldr	r3, [pc, #132]	; (1c608 <vTaskPlaceOnEventListRestricted+0xc0>)
   1c584:	4798      	blx	r3
   1c586:	0003      	movs	r3, r0
   1c588:	001a      	movs	r2, r3
   1c58a:	4b20      	ldr	r3, [pc, #128]	; (1c60c <vTaskPlaceOnEventListRestricted+0xc4>)
   1c58c:	881b      	ldrh	r3, [r3, #0]
   1c58e:	4013      	ands	r3, r2
   1c590:	b29b      	uxth	r3, r3
   1c592:	2b00      	cmp	r3, #0
   1c594:	d011      	beq.n	1c5ba <vTaskPlaceOnEventListRestricted+0x72>
   1c596:	4b1e      	ldr	r3, [pc, #120]	; (1c610 <vTaskPlaceOnEventListRestricted+0xc8>)
   1c598:	681a      	ldr	r2, [r3, #0]
   1c59a:	68bb      	ldr	r3, [r7, #8]
   1c59c:	18d3      	adds	r3, r2, r3
   1c59e:	0019      	movs	r1, r3
   1c5a0:	2088      	movs	r0, #136	; 0x88
   1c5a2:	4b1c      	ldr	r3, [pc, #112]	; (1c614 <vTaskPlaceOnEventListRestricted+0xcc>)
   1c5a4:	4798      	blx	r3
   1c5a6:	4b16      	ldr	r3, [pc, #88]	; (1c600 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c5a8:	681b      	ldr	r3, [r3, #0]
   1c5aa:	0018      	movs	r0, r3
   1c5ac:	4b1a      	ldr	r3, [pc, #104]	; (1c618 <vTaskPlaceOnEventListRestricted+0xd0>)
   1c5ae:	4798      	blx	r3
   1c5b0:	0003      	movs	r3, r0
   1c5b2:	b2db      	uxtb	r3, r3
   1c5b4:	0018      	movs	r0, r3
   1c5b6:	4b19      	ldr	r3, [pc, #100]	; (1c61c <vTaskPlaceOnEventListRestricted+0xd4>)
   1c5b8:	4798      	blx	r3
   1c5ba:	4b19      	ldr	r3, [pc, #100]	; (1c620 <vTaskPlaceOnEventListRestricted+0xd8>)
   1c5bc:	4798      	blx	r3
   1c5be:	0003      	movs	r3, r0
   1c5c0:	0018      	movs	r0, r3
   1c5c2:	4b11      	ldr	r3, [pc, #68]	; (1c608 <vTaskPlaceOnEventListRestricted+0xc0>)
   1c5c4:	4798      	blx	r3
   1c5c6:	0003      	movs	r3, r0
   1c5c8:	001a      	movs	r2, r3
   1c5ca:	4b10      	ldr	r3, [pc, #64]	; (1c60c <vTaskPlaceOnEventListRestricted+0xc4>)
   1c5cc:	881b      	ldrh	r3, [r3, #0]
   1c5ce:	4013      	ands	r3, r2
   1c5d0:	b29b      	uxth	r3, r3
   1c5d2:	2b00      	cmp	r3, #0
   1c5d4:	d00a      	beq.n	1c5ec <vTaskPlaceOnEventListRestricted+0xa4>
   1c5d6:	4b12      	ldr	r3, [pc, #72]	; (1c620 <vTaskPlaceOnEventListRestricted+0xd8>)
   1c5d8:	4798      	blx	r3
   1c5da:	0003      	movs	r3, r0
   1c5dc:	0018      	movs	r0, r3
   1c5de:	4b0e      	ldr	r3, [pc, #56]	; (1c618 <vTaskPlaceOnEventListRestricted+0xd0>)
   1c5e0:	4798      	blx	r3
   1c5e2:	0003      	movs	r3, r0
   1c5e4:	b2db      	uxtb	r3, r3
   1c5e6:	0018      	movs	r0, r3
   1c5e8:	4b0c      	ldr	r3, [pc, #48]	; (1c61c <vTaskPlaceOnEventListRestricted+0xd4>)
   1c5ea:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1c5ec:	687a      	ldr	r2, [r7, #4]
   1c5ee:	68bb      	ldr	r3, [r7, #8]
   1c5f0:	0011      	movs	r1, r2
   1c5f2:	0018      	movs	r0, r3
   1c5f4:	4b0b      	ldr	r3, [pc, #44]	; (1c624 <vTaskPlaceOnEventListRestricted+0xdc>)
   1c5f6:	4798      	blx	r3
	}
   1c5f8:	46c0      	nop			; (mov r8, r8)
   1c5fa:	46bd      	mov	sp, r7
   1c5fc:	b004      	add	sp, #16
   1c5fe:	bd80      	pop	{r7, pc}
   1c600:	20003f5c 	.word	0x20003f5c
   1c604:	00019b57 	.word	0x00019b57
   1c608:	00017d8d 	.word	0x00017d8d
   1c60c:	20000104 	.word	0x20000104
   1c610:	20004038 	.word	0x20004038
   1c614:	00018a8d 	.word	0x00018a8d
   1c618:	00017d6d 	.word	0x00017d6d
   1c61c:	00018f1d 	.word	0x00018f1d
   1c620:	00018029 	.word	0x00018029
   1c624:	0001cfa9 	.word	0x0001cfa9

0001c628 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1c628:	b580      	push	{r7, lr}
   1c62a:	b084      	sub	sp, #16
   1c62c:	af00      	add	r7, sp, #0
   1c62e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1c630:	687b      	ldr	r3, [r7, #4]
   1c632:	68db      	ldr	r3, [r3, #12]
   1c634:	68db      	ldr	r3, [r3, #12]
   1c636:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1c638:	68bb      	ldr	r3, [r7, #8]
   1c63a:	2b00      	cmp	r3, #0
   1c63c:	d101      	bne.n	1c642 <xTaskRemoveFromEventList+0x1a>
   1c63e:	b672      	cpsid	i
   1c640:	e7fe      	b.n	1c640 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1c642:	68bb      	ldr	r3, [r7, #8]
   1c644:	3318      	adds	r3, #24
   1c646:	0018      	movs	r0, r3
   1c648:	4b2a      	ldr	r3, [pc, #168]	; (1c6f4 <xTaskRemoveFromEventList+0xcc>)
   1c64a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c64c:	4b2a      	ldr	r3, [pc, #168]	; (1c6f8 <xTaskRemoveFromEventList+0xd0>)
   1c64e:	681b      	ldr	r3, [r3, #0]
   1c650:	2b00      	cmp	r3, #0
   1c652:	d132      	bne.n	1c6ba <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1c654:	68bb      	ldr	r3, [r7, #8]
   1c656:	3304      	adds	r3, #4
   1c658:	0018      	movs	r0, r3
   1c65a:	4b26      	ldr	r3, [pc, #152]	; (1c6f4 <xTaskRemoveFromEventList+0xcc>)
   1c65c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1c65e:	68bb      	ldr	r3, [r7, #8]
   1c660:	0018      	movs	r0, r3
   1c662:	4b26      	ldr	r3, [pc, #152]	; (1c6fc <xTaskRemoveFromEventList+0xd4>)
   1c664:	4798      	blx	r3
   1c666:	0003      	movs	r3, r0
   1c668:	001a      	movs	r2, r3
   1c66a:	4b25      	ldr	r3, [pc, #148]	; (1c700 <xTaskRemoveFromEventList+0xd8>)
   1c66c:	881b      	ldrh	r3, [r3, #0]
   1c66e:	4013      	ands	r3, r2
   1c670:	b29b      	uxth	r3, r3
   1c672:	2b00      	cmp	r3, #0
   1c674:	d008      	beq.n	1c688 <xTaskRemoveFromEventList+0x60>
   1c676:	68bb      	ldr	r3, [r7, #8]
   1c678:	0018      	movs	r0, r3
   1c67a:	4b22      	ldr	r3, [pc, #136]	; (1c704 <xTaskRemoveFromEventList+0xdc>)
   1c67c:	4798      	blx	r3
   1c67e:	0003      	movs	r3, r0
   1c680:	b2db      	uxtb	r3, r3
   1c682:	0018      	movs	r0, r3
   1c684:	4b20      	ldr	r3, [pc, #128]	; (1c708 <xTaskRemoveFromEventList+0xe0>)
   1c686:	4798      	blx	r3
   1c688:	68bb      	ldr	r3, [r7, #8]
   1c68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c68c:	4b1f      	ldr	r3, [pc, #124]	; (1c70c <xTaskRemoveFromEventList+0xe4>)
   1c68e:	681b      	ldr	r3, [r3, #0]
   1c690:	429a      	cmp	r2, r3
   1c692:	d903      	bls.n	1c69c <xTaskRemoveFromEventList+0x74>
   1c694:	68bb      	ldr	r3, [r7, #8]
   1c696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c698:	4b1c      	ldr	r3, [pc, #112]	; (1c70c <xTaskRemoveFromEventList+0xe4>)
   1c69a:	601a      	str	r2, [r3, #0]
   1c69c:	68bb      	ldr	r3, [r7, #8]
   1c69e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c6a0:	0013      	movs	r3, r2
   1c6a2:	009b      	lsls	r3, r3, #2
   1c6a4:	189b      	adds	r3, r3, r2
   1c6a6:	009b      	lsls	r3, r3, #2
   1c6a8:	4a19      	ldr	r2, [pc, #100]	; (1c710 <xTaskRemoveFromEventList+0xe8>)
   1c6aa:	189a      	adds	r2, r3, r2
   1c6ac:	68bb      	ldr	r3, [r7, #8]
   1c6ae:	3304      	adds	r3, #4
   1c6b0:	0019      	movs	r1, r3
   1c6b2:	0010      	movs	r0, r2
   1c6b4:	4b17      	ldr	r3, [pc, #92]	; (1c714 <xTaskRemoveFromEventList+0xec>)
   1c6b6:	4798      	blx	r3
   1c6b8:	e007      	b.n	1c6ca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1c6ba:	68bb      	ldr	r3, [r7, #8]
   1c6bc:	3318      	adds	r3, #24
   1c6be:	001a      	movs	r2, r3
   1c6c0:	4b15      	ldr	r3, [pc, #84]	; (1c718 <xTaskRemoveFromEventList+0xf0>)
   1c6c2:	0011      	movs	r1, r2
   1c6c4:	0018      	movs	r0, r3
   1c6c6:	4b13      	ldr	r3, [pc, #76]	; (1c714 <xTaskRemoveFromEventList+0xec>)
   1c6c8:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1c6ca:	68bb      	ldr	r3, [r7, #8]
   1c6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c6ce:	4b13      	ldr	r3, [pc, #76]	; (1c71c <xTaskRemoveFromEventList+0xf4>)
   1c6d0:	681b      	ldr	r3, [r3, #0]
   1c6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c6d4:	429a      	cmp	r2, r3
   1c6d6:	d905      	bls.n	1c6e4 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1c6d8:	2301      	movs	r3, #1
   1c6da:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1c6dc:	4b10      	ldr	r3, [pc, #64]	; (1c720 <xTaskRemoveFromEventList+0xf8>)
   1c6de:	2201      	movs	r2, #1
   1c6e0:	601a      	str	r2, [r3, #0]
   1c6e2:	e001      	b.n	1c6e8 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1c6e4:	2300      	movs	r3, #0
   1c6e6:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1c6e8:	68fb      	ldr	r3, [r7, #12]
}
   1c6ea:	0018      	movs	r0, r3
   1c6ec:	46bd      	mov	sp, r7
   1c6ee:	b004      	add	sp, #16
   1c6f0:	bd80      	pop	{r7, pc}
   1c6f2:	46c0      	nop			; (mov r8, r8)
   1c6f4:	00019c07 	.word	0x00019c07
   1c6f8:	2000405c 	.word	0x2000405c
   1c6fc:	00017d8d 	.word	0x00017d8d
   1c700:	20000104 	.word	0x20000104
   1c704:	00017d6d 	.word	0x00017d6d
   1c708:	0001853d 	.word	0x0001853d
   1c70c:	2000403c 	.word	0x2000403c
   1c710:	20003f60 	.word	0x20003f60
   1c714:	00019b57 	.word	0x00019b57
   1c718:	20003ff4 	.word	0x20003ff4
   1c71c:	20003f5c 	.word	0x20003f5c
   1c720:	20004048 	.word	0x20004048

0001c724 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1c724:	b580      	push	{r7, lr}
   1c726:	b082      	sub	sp, #8
   1c728:	af00      	add	r7, sp, #0
   1c72a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1c72c:	687b      	ldr	r3, [r7, #4]
   1c72e:	2b00      	cmp	r3, #0
   1c730:	d101      	bne.n	1c736 <vTaskSetTimeOutState+0x12>
   1c732:	b672      	cpsid	i
   1c734:	e7fe      	b.n	1c734 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1c736:	4b08      	ldr	r3, [pc, #32]	; (1c758 <vTaskSetTimeOutState+0x34>)
   1c738:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1c73a:	4b08      	ldr	r3, [pc, #32]	; (1c75c <vTaskSetTimeOutState+0x38>)
   1c73c:	681a      	ldr	r2, [r3, #0]
   1c73e:	687b      	ldr	r3, [r7, #4]
   1c740:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1c742:	4b07      	ldr	r3, [pc, #28]	; (1c760 <vTaskSetTimeOutState+0x3c>)
   1c744:	681a      	ldr	r2, [r3, #0]
   1c746:	687b      	ldr	r3, [r7, #4]
   1c748:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1c74a:	4b06      	ldr	r3, [pc, #24]	; (1c764 <vTaskSetTimeOutState+0x40>)
   1c74c:	4798      	blx	r3
}
   1c74e:	46c0      	nop			; (mov r8, r8)
   1c750:	46bd      	mov	sp, r7
   1c752:	b002      	add	sp, #8
   1c754:	bd80      	pop	{r7, pc}
   1c756:	46c0      	nop			; (mov r8, r8)
   1c758:	00019d99 	.word	0x00019d99
   1c75c:	2000404c 	.word	0x2000404c
   1c760:	20004038 	.word	0x20004038
   1c764:	00019dbd 	.word	0x00019dbd

0001c768 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1c768:	b580      	push	{r7, lr}
   1c76a:	b082      	sub	sp, #8
   1c76c:	af00      	add	r7, sp, #0
   1c76e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1c770:	4b05      	ldr	r3, [pc, #20]	; (1c788 <vTaskInternalSetTimeOutState+0x20>)
   1c772:	681a      	ldr	r2, [r3, #0]
   1c774:	687b      	ldr	r3, [r7, #4]
   1c776:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1c778:	4b04      	ldr	r3, [pc, #16]	; (1c78c <vTaskInternalSetTimeOutState+0x24>)
   1c77a:	681a      	ldr	r2, [r3, #0]
   1c77c:	687b      	ldr	r3, [r7, #4]
   1c77e:	605a      	str	r2, [r3, #4]
}
   1c780:	46c0      	nop			; (mov r8, r8)
   1c782:	46bd      	mov	sp, r7
   1c784:	b002      	add	sp, #8
   1c786:	bd80      	pop	{r7, pc}
   1c788:	2000404c 	.word	0x2000404c
   1c78c:	20004038 	.word	0x20004038

0001c790 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1c790:	b580      	push	{r7, lr}
   1c792:	b086      	sub	sp, #24
   1c794:	af00      	add	r7, sp, #0
   1c796:	6078      	str	r0, [r7, #4]
   1c798:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1c79a:	687b      	ldr	r3, [r7, #4]
   1c79c:	2b00      	cmp	r3, #0
   1c79e:	d101      	bne.n	1c7a4 <xTaskCheckForTimeOut+0x14>
   1c7a0:	b672      	cpsid	i
   1c7a2:	e7fe      	b.n	1c7a2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1c7a4:	683b      	ldr	r3, [r7, #0]
   1c7a6:	2b00      	cmp	r3, #0
   1c7a8:	d101      	bne.n	1c7ae <xTaskCheckForTimeOut+0x1e>
   1c7aa:	b672      	cpsid	i
   1c7ac:	e7fe      	b.n	1c7ac <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1c7ae:	4b1e      	ldr	r3, [pc, #120]	; (1c828 <xTaskCheckForTimeOut+0x98>)
   1c7b0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1c7b2:	4b1e      	ldr	r3, [pc, #120]	; (1c82c <xTaskCheckForTimeOut+0x9c>)
   1c7b4:	681b      	ldr	r3, [r3, #0]
   1c7b6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1c7b8:	687b      	ldr	r3, [r7, #4]
   1c7ba:	685b      	ldr	r3, [r3, #4]
   1c7bc:	693a      	ldr	r2, [r7, #16]
   1c7be:	1ad3      	subs	r3, r2, r3
   1c7c0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1c7c2:	683b      	ldr	r3, [r7, #0]
   1c7c4:	681b      	ldr	r3, [r3, #0]
   1c7c6:	3301      	adds	r3, #1
   1c7c8:	d102      	bne.n	1c7d0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1c7ca:	2300      	movs	r3, #0
   1c7cc:	617b      	str	r3, [r7, #20]
   1c7ce:	e024      	b.n	1c81a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1c7d0:	687b      	ldr	r3, [r7, #4]
   1c7d2:	681a      	ldr	r2, [r3, #0]
   1c7d4:	4b16      	ldr	r3, [pc, #88]	; (1c830 <xTaskCheckForTimeOut+0xa0>)
   1c7d6:	681b      	ldr	r3, [r3, #0]
   1c7d8:	429a      	cmp	r2, r3
   1c7da:	d007      	beq.n	1c7ec <xTaskCheckForTimeOut+0x5c>
   1c7dc:	687b      	ldr	r3, [r7, #4]
   1c7de:	685a      	ldr	r2, [r3, #4]
   1c7e0:	693b      	ldr	r3, [r7, #16]
   1c7e2:	429a      	cmp	r2, r3
   1c7e4:	d802      	bhi.n	1c7ec <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1c7e6:	2301      	movs	r3, #1
   1c7e8:	617b      	str	r3, [r7, #20]
   1c7ea:	e016      	b.n	1c81a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1c7ec:	683b      	ldr	r3, [r7, #0]
   1c7ee:	681a      	ldr	r2, [r3, #0]
   1c7f0:	68fb      	ldr	r3, [r7, #12]
   1c7f2:	429a      	cmp	r2, r3
   1c7f4:	d90c      	bls.n	1c810 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1c7f6:	683b      	ldr	r3, [r7, #0]
   1c7f8:	681a      	ldr	r2, [r3, #0]
   1c7fa:	68fb      	ldr	r3, [r7, #12]
   1c7fc:	1ad2      	subs	r2, r2, r3
   1c7fe:	683b      	ldr	r3, [r7, #0]
   1c800:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1c802:	687b      	ldr	r3, [r7, #4]
   1c804:	0018      	movs	r0, r3
   1c806:	4b0b      	ldr	r3, [pc, #44]	; (1c834 <xTaskCheckForTimeOut+0xa4>)
   1c808:	4798      	blx	r3
			xReturn = pdFALSE;
   1c80a:	2300      	movs	r3, #0
   1c80c:	617b      	str	r3, [r7, #20]
   1c80e:	e004      	b.n	1c81a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1c810:	683b      	ldr	r3, [r7, #0]
   1c812:	2200      	movs	r2, #0
   1c814:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1c816:	2301      	movs	r3, #1
   1c818:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1c81a:	4b07      	ldr	r3, [pc, #28]	; (1c838 <xTaskCheckForTimeOut+0xa8>)
   1c81c:	4798      	blx	r3

	return xReturn;
   1c81e:	697b      	ldr	r3, [r7, #20]
}
   1c820:	0018      	movs	r0, r3
   1c822:	46bd      	mov	sp, r7
   1c824:	b006      	add	sp, #24
   1c826:	bd80      	pop	{r7, pc}
   1c828:	00019d99 	.word	0x00019d99
   1c82c:	20004038 	.word	0x20004038
   1c830:	2000404c 	.word	0x2000404c
   1c834:	0001c769 	.word	0x0001c769
   1c838:	00019dbd 	.word	0x00019dbd

0001c83c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1c83c:	b580      	push	{r7, lr}
   1c83e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1c840:	4b02      	ldr	r3, [pc, #8]	; (1c84c <vTaskMissedYield+0x10>)
   1c842:	2201      	movs	r2, #1
   1c844:	601a      	str	r2, [r3, #0]
}
   1c846:	46c0      	nop			; (mov r8, r8)
   1c848:	46bd      	mov	sp, r7
   1c84a:	bd80      	pop	{r7, pc}
   1c84c:	20004048 	.word	0x20004048

0001c850 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1c850:	b580      	push	{r7, lr}
   1c852:	b084      	sub	sp, #16
   1c854:	af00      	add	r7, sp, #0
   1c856:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1c858:	687b      	ldr	r3, [r7, #4]
   1c85a:	2b00      	cmp	r3, #0
   1c85c:	d005      	beq.n	1c86a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1c85e:	687b      	ldr	r3, [r7, #4]
   1c860:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1c862:	68bb      	ldr	r3, [r7, #8]
   1c864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c866:	60fb      	str	r3, [r7, #12]
   1c868:	e001      	b.n	1c86e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1c86a:	2300      	movs	r3, #0
   1c86c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1c86e:	68fb      	ldr	r3, [r7, #12]
	}
   1c870:	0018      	movs	r0, r3
   1c872:	46bd      	mov	sp, r7
   1c874:	b004      	add	sp, #16
   1c876:	bd80      	pop	{r7, pc}

0001c878 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1c878:	b580      	push	{r7, lr}
   1c87a:	b084      	sub	sp, #16
   1c87c:	af00      	add	r7, sp, #0
   1c87e:	6078      	str	r0, [r7, #4]
   1c880:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1c882:	687b      	ldr	r3, [r7, #4]
   1c884:	2b00      	cmp	r3, #0
   1c886:	d004      	beq.n	1c892 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1c888:	687b      	ldr	r3, [r7, #4]
   1c88a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1c88c:	68fb      	ldr	r3, [r7, #12]
   1c88e:	683a      	ldr	r2, [r7, #0]
   1c890:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1c892:	46c0      	nop			; (mov r8, r8)
   1c894:	46bd      	mov	sp, r7
   1c896:	b004      	add	sp, #16
   1c898:	bd80      	pop	{r7, pc}
	...

0001c89c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1c89c:	b580      	push	{r7, lr}
   1c89e:	b082      	sub	sp, #8
   1c8a0:	af00      	add	r7, sp, #0
   1c8a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1c8a4:	4b04      	ldr	r3, [pc, #16]	; (1c8b8 <prvIdleTask+0x1c>)
   1c8a6:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1c8a8:	4b04      	ldr	r3, [pc, #16]	; (1c8bc <prvIdleTask+0x20>)
   1c8aa:	681b      	ldr	r3, [r3, #0]
   1c8ac:	2b01      	cmp	r3, #1
   1c8ae:	d9f9      	bls.n	1c8a4 <prvIdleTask+0x8>
			{
				taskYIELD();
   1c8b0:	4b03      	ldr	r3, [pc, #12]	; (1c8c0 <prvIdleTask+0x24>)
   1c8b2:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1c8b4:	e7f6      	b.n	1c8a4 <prvIdleTask+0x8>
   1c8b6:	46c0      	nop			; (mov r8, r8)
   1c8b8:	0001c951 	.word	0x0001c951
   1c8bc:	20003f60 	.word	0x20003f60
   1c8c0:	00019d81 	.word	0x00019d81

0001c8c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1c8c4:	b580      	push	{r7, lr}
   1c8c6:	b082      	sub	sp, #8
   1c8c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1c8ca:	2300      	movs	r3, #0
   1c8cc:	607b      	str	r3, [r7, #4]
   1c8ce:	e00c      	b.n	1c8ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1c8d0:	687a      	ldr	r2, [r7, #4]
   1c8d2:	0013      	movs	r3, r2
   1c8d4:	009b      	lsls	r3, r3, #2
   1c8d6:	189b      	adds	r3, r3, r2
   1c8d8:	009b      	lsls	r3, r3, #2
   1c8da:	4a14      	ldr	r2, [pc, #80]	; (1c92c <prvInitialiseTaskLists+0x68>)
   1c8dc:	189b      	adds	r3, r3, r2
   1c8de:	0018      	movs	r0, r3
   1c8e0:	4b13      	ldr	r3, [pc, #76]	; (1c930 <prvInitialiseTaskLists+0x6c>)
   1c8e2:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1c8e4:	687b      	ldr	r3, [r7, #4]
   1c8e6:	3301      	adds	r3, #1
   1c8e8:	607b      	str	r3, [r7, #4]
   1c8ea:	687b      	ldr	r3, [r7, #4]
   1c8ec:	2b04      	cmp	r3, #4
   1c8ee:	d9ef      	bls.n	1c8d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1c8f0:	4b10      	ldr	r3, [pc, #64]	; (1c934 <prvInitialiseTaskLists+0x70>)
   1c8f2:	0018      	movs	r0, r3
   1c8f4:	4b0e      	ldr	r3, [pc, #56]	; (1c930 <prvInitialiseTaskLists+0x6c>)
   1c8f6:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1c8f8:	4b0f      	ldr	r3, [pc, #60]	; (1c938 <prvInitialiseTaskLists+0x74>)
   1c8fa:	0018      	movs	r0, r3
   1c8fc:	4b0c      	ldr	r3, [pc, #48]	; (1c930 <prvInitialiseTaskLists+0x6c>)
   1c8fe:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1c900:	4b0e      	ldr	r3, [pc, #56]	; (1c93c <prvInitialiseTaskLists+0x78>)
   1c902:	0018      	movs	r0, r3
   1c904:	4b0a      	ldr	r3, [pc, #40]	; (1c930 <prvInitialiseTaskLists+0x6c>)
   1c906:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1c908:	4b0d      	ldr	r3, [pc, #52]	; (1c940 <prvInitialiseTaskLists+0x7c>)
   1c90a:	0018      	movs	r0, r3
   1c90c:	4b08      	ldr	r3, [pc, #32]	; (1c930 <prvInitialiseTaskLists+0x6c>)
   1c90e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1c910:	4b0c      	ldr	r3, [pc, #48]	; (1c944 <prvInitialiseTaskLists+0x80>)
   1c912:	0018      	movs	r0, r3
   1c914:	4b06      	ldr	r3, [pc, #24]	; (1c930 <prvInitialiseTaskLists+0x6c>)
   1c916:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1c918:	4b0b      	ldr	r3, [pc, #44]	; (1c948 <prvInitialiseTaskLists+0x84>)
   1c91a:	4a06      	ldr	r2, [pc, #24]	; (1c934 <prvInitialiseTaskLists+0x70>)
   1c91c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1c91e:	4b0b      	ldr	r3, [pc, #44]	; (1c94c <prvInitialiseTaskLists+0x88>)
   1c920:	4a05      	ldr	r2, [pc, #20]	; (1c938 <prvInitialiseTaskLists+0x74>)
   1c922:	601a      	str	r2, [r3, #0]
}
   1c924:	46c0      	nop			; (mov r8, r8)
   1c926:	46bd      	mov	sp, r7
   1c928:	b002      	add	sp, #8
   1c92a:	bd80      	pop	{r7, pc}
   1c92c:	20003f60 	.word	0x20003f60
   1c930:	00019b05 	.word	0x00019b05
   1c934:	20003fc4 	.word	0x20003fc4
   1c938:	20003fd8 	.word	0x20003fd8
   1c93c:	20003ff4 	.word	0x20003ff4
   1c940:	20004008 	.word	0x20004008
   1c944:	20004020 	.word	0x20004020
   1c948:	20003fec 	.word	0x20003fec
   1c94c:	20003ff0 	.word	0x20003ff0

0001c950 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1c950:	b580      	push	{r7, lr}
   1c952:	b082      	sub	sp, #8
   1c954:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1c956:	e01a      	b.n	1c98e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1c958:	4b11      	ldr	r3, [pc, #68]	; (1c9a0 <prvCheckTasksWaitingTermination+0x50>)
   1c95a:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1c95c:	4b11      	ldr	r3, [pc, #68]	; (1c9a4 <prvCheckTasksWaitingTermination+0x54>)
   1c95e:	68db      	ldr	r3, [r3, #12]
   1c960:	68db      	ldr	r3, [r3, #12]
   1c962:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c964:	687b      	ldr	r3, [r7, #4]
   1c966:	3304      	adds	r3, #4
   1c968:	0018      	movs	r0, r3
   1c96a:	4b0f      	ldr	r3, [pc, #60]	; (1c9a8 <prvCheckTasksWaitingTermination+0x58>)
   1c96c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1c96e:	4b0f      	ldr	r3, [pc, #60]	; (1c9ac <prvCheckTasksWaitingTermination+0x5c>)
   1c970:	681b      	ldr	r3, [r3, #0]
   1c972:	1e5a      	subs	r2, r3, #1
   1c974:	4b0d      	ldr	r3, [pc, #52]	; (1c9ac <prvCheckTasksWaitingTermination+0x5c>)
   1c976:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1c978:	4b0d      	ldr	r3, [pc, #52]	; (1c9b0 <prvCheckTasksWaitingTermination+0x60>)
   1c97a:	681b      	ldr	r3, [r3, #0]
   1c97c:	1e5a      	subs	r2, r3, #1
   1c97e:	4b0c      	ldr	r3, [pc, #48]	; (1c9b0 <prvCheckTasksWaitingTermination+0x60>)
   1c980:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1c982:	4b0c      	ldr	r3, [pc, #48]	; (1c9b4 <prvCheckTasksWaitingTermination+0x64>)
   1c984:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1c986:	687b      	ldr	r3, [r7, #4]
   1c988:	0018      	movs	r0, r3
   1c98a:	4b0b      	ldr	r3, [pc, #44]	; (1c9b8 <prvCheckTasksWaitingTermination+0x68>)
   1c98c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1c98e:	4b08      	ldr	r3, [pc, #32]	; (1c9b0 <prvCheckTasksWaitingTermination+0x60>)
   1c990:	681b      	ldr	r3, [r3, #0]
   1c992:	2b00      	cmp	r3, #0
   1c994:	d1e0      	bne.n	1c958 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1c996:	46c0      	nop			; (mov r8, r8)
   1c998:	46bd      	mov	sp, r7
   1c99a:	b002      	add	sp, #8
   1c99c:	bd80      	pop	{r7, pc}
   1c99e:	46c0      	nop			; (mov r8, r8)
   1c9a0:	00019d99 	.word	0x00019d99
   1c9a4:	20004008 	.word	0x20004008
   1c9a8:	00019c07 	.word	0x00019c07
   1c9ac:	20004034 	.word	0x20004034
   1c9b0:	2000401c 	.word	0x2000401c
   1c9b4:	00019dbd 	.word	0x00019dbd
   1c9b8:	0001ca2d 	.word	0x0001ca2d

0001c9bc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1c9bc:	b580      	push	{r7, lr}
   1c9be:	b084      	sub	sp, #16
   1c9c0:	af00      	add	r7, sp, #0
   1c9c2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1c9c4:	2300      	movs	r3, #0
   1c9c6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1c9c8:	e005      	b.n	1c9d6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1c9ca:	687b      	ldr	r3, [r7, #4]
   1c9cc:	3301      	adds	r3, #1
   1c9ce:	607b      	str	r3, [r7, #4]
			ulCount++;
   1c9d0:	68fb      	ldr	r3, [r7, #12]
   1c9d2:	3301      	adds	r3, #1
   1c9d4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1c9d6:	687b      	ldr	r3, [r7, #4]
   1c9d8:	781b      	ldrb	r3, [r3, #0]
   1c9da:	2ba5      	cmp	r3, #165	; 0xa5
   1c9dc:	d0f5      	beq.n	1c9ca <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1c9de:	68fb      	ldr	r3, [r7, #12]
   1c9e0:	089b      	lsrs	r3, r3, #2
   1c9e2:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1c9e4:	68fb      	ldr	r3, [r7, #12]
   1c9e6:	b29b      	uxth	r3, r3
	}
   1c9e8:	0018      	movs	r0, r3
   1c9ea:	46bd      	mov	sp, r7
   1c9ec:	b004      	add	sp, #16
   1c9ee:	bd80      	pop	{r7, pc}

0001c9f0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1c9f0:	b580      	push	{r7, lr}
   1c9f2:	b086      	sub	sp, #24
   1c9f4:	af00      	add	r7, sp, #0
   1c9f6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1c9f8:	687b      	ldr	r3, [r7, #4]
   1c9fa:	2b00      	cmp	r3, #0
   1c9fc:	d102      	bne.n	1ca04 <uxTaskGetStackHighWaterMark+0x14>
   1c9fe:	4b09      	ldr	r3, [pc, #36]	; (1ca24 <uxTaskGetStackHighWaterMark+0x34>)
   1ca00:	681b      	ldr	r3, [r3, #0]
   1ca02:	e000      	b.n	1ca06 <uxTaskGetStackHighWaterMark+0x16>
   1ca04:	687b      	ldr	r3, [r7, #4]
   1ca06:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1ca08:	697b      	ldr	r3, [r7, #20]
   1ca0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ca0c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1ca0e:	693b      	ldr	r3, [r7, #16]
   1ca10:	0018      	movs	r0, r3
   1ca12:	4b05      	ldr	r3, [pc, #20]	; (1ca28 <uxTaskGetStackHighWaterMark+0x38>)
   1ca14:	4798      	blx	r3
   1ca16:	0003      	movs	r3, r0
   1ca18:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1ca1a:	68fb      	ldr	r3, [r7, #12]
	}
   1ca1c:	0018      	movs	r0, r3
   1ca1e:	46bd      	mov	sp, r7
   1ca20:	b006      	add	sp, #24
   1ca22:	bd80      	pop	{r7, pc}
   1ca24:	20003f5c 	.word	0x20003f5c
   1ca28:	0001c9bd 	.word	0x0001c9bd

0001ca2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1ca2c:	b580      	push	{r7, lr}
   1ca2e:	b082      	sub	sp, #8
   1ca30:	af00      	add	r7, sp, #0
   1ca32:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1ca34:	687b      	ldr	r3, [r7, #4]
   1ca36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ca38:	0018      	movs	r0, r3
   1ca3a:	4b05      	ldr	r3, [pc, #20]	; (1ca50 <prvDeleteTCB+0x24>)
   1ca3c:	4798      	blx	r3
			vPortFree( pxTCB );
   1ca3e:	687b      	ldr	r3, [r7, #4]
   1ca40:	0018      	movs	r0, r3
   1ca42:	4b03      	ldr	r3, [pc, #12]	; (1ca50 <prvDeleteTCB+0x24>)
   1ca44:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1ca46:	46c0      	nop			; (mov r8, r8)
   1ca48:	46bd      	mov	sp, r7
   1ca4a:	b002      	add	sp, #8
   1ca4c:	bd80      	pop	{r7, pc}
   1ca4e:	46c0      	nop			; (mov r8, r8)
   1ca50:	00019f95 	.word	0x00019f95

0001ca54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1ca54:	b580      	push	{r7, lr}
   1ca56:	b082      	sub	sp, #8
   1ca58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1ca5a:	4b0e      	ldr	r3, [pc, #56]	; (1ca94 <prvResetNextTaskUnblockTime+0x40>)
   1ca5c:	681b      	ldr	r3, [r3, #0]
   1ca5e:	681b      	ldr	r3, [r3, #0]
   1ca60:	2b00      	cmp	r3, #0
   1ca62:	d101      	bne.n	1ca68 <prvResetNextTaskUnblockTime+0x14>
   1ca64:	2301      	movs	r3, #1
   1ca66:	e000      	b.n	1ca6a <prvResetNextTaskUnblockTime+0x16>
   1ca68:	2300      	movs	r3, #0
   1ca6a:	2b00      	cmp	r3, #0
   1ca6c:	d004      	beq.n	1ca78 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1ca6e:	4b0a      	ldr	r3, [pc, #40]	; (1ca98 <prvResetNextTaskUnblockTime+0x44>)
   1ca70:	2201      	movs	r2, #1
   1ca72:	4252      	negs	r2, r2
   1ca74:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1ca76:	e008      	b.n	1ca8a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1ca78:	4b06      	ldr	r3, [pc, #24]	; (1ca94 <prvResetNextTaskUnblockTime+0x40>)
   1ca7a:	681b      	ldr	r3, [r3, #0]
   1ca7c:	68db      	ldr	r3, [r3, #12]
   1ca7e:	68db      	ldr	r3, [r3, #12]
   1ca80:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1ca82:	687b      	ldr	r3, [r7, #4]
   1ca84:	685a      	ldr	r2, [r3, #4]
   1ca86:	4b04      	ldr	r3, [pc, #16]	; (1ca98 <prvResetNextTaskUnblockTime+0x44>)
   1ca88:	601a      	str	r2, [r3, #0]
}
   1ca8a:	46c0      	nop			; (mov r8, r8)
   1ca8c:	46bd      	mov	sp, r7
   1ca8e:	b002      	add	sp, #8
   1ca90:	bd80      	pop	{r7, pc}
   1ca92:	46c0      	nop			; (mov r8, r8)
   1ca94:	20003fec 	.word	0x20003fec
   1ca98:	20004054 	.word	0x20004054

0001ca9c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1ca9c:	b580      	push	{r7, lr}
   1ca9e:	b082      	sub	sp, #8
   1caa0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1caa2:	4b04      	ldr	r3, [pc, #16]	; (1cab4 <xTaskGetCurrentTaskHandle+0x18>)
   1caa4:	681b      	ldr	r3, [r3, #0]
   1caa6:	607b      	str	r3, [r7, #4]

		return xReturn;
   1caa8:	687b      	ldr	r3, [r7, #4]
	}
   1caaa:	0018      	movs	r0, r3
   1caac:	46bd      	mov	sp, r7
   1caae:	b002      	add	sp, #8
   1cab0:	bd80      	pop	{r7, pc}
   1cab2:	46c0      	nop			; (mov r8, r8)
   1cab4:	20003f5c 	.word	0x20003f5c

0001cab8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1cab8:	b580      	push	{r7, lr}
   1caba:	b082      	sub	sp, #8
   1cabc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1cabe:	4b0a      	ldr	r3, [pc, #40]	; (1cae8 <xTaskGetSchedulerState+0x30>)
   1cac0:	681b      	ldr	r3, [r3, #0]
   1cac2:	2b00      	cmp	r3, #0
   1cac4:	d102      	bne.n	1cacc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1cac6:	2301      	movs	r3, #1
   1cac8:	607b      	str	r3, [r7, #4]
   1caca:	e008      	b.n	1cade <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1cacc:	4b07      	ldr	r3, [pc, #28]	; (1caec <xTaskGetSchedulerState+0x34>)
   1cace:	681b      	ldr	r3, [r3, #0]
   1cad0:	2b00      	cmp	r3, #0
   1cad2:	d102      	bne.n	1cada <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1cad4:	2302      	movs	r3, #2
   1cad6:	607b      	str	r3, [r7, #4]
   1cad8:	e001      	b.n	1cade <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1cada:	2300      	movs	r3, #0
   1cadc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1cade:	687b      	ldr	r3, [r7, #4]
	}
   1cae0:	0018      	movs	r0, r3
   1cae2:	46bd      	mov	sp, r7
   1cae4:	b002      	add	sp, #8
   1cae6:	bd80      	pop	{r7, pc}
   1cae8:	20004040 	.word	0x20004040
   1caec:	2000405c 	.word	0x2000405c

0001caf0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1caf0:	b590      	push	{r4, r7, lr}
   1caf2:	b085      	sub	sp, #20
   1caf4:	af00      	add	r7, sp, #0
   1caf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1caf8:	687b      	ldr	r3, [r7, #4]
   1cafa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1cafc:	2300      	movs	r3, #0
   1cafe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1cb00:	687b      	ldr	r3, [r7, #4]
   1cb02:	2b00      	cmp	r3, #0
   1cb04:	d100      	bne.n	1cb08 <xTaskPriorityInherit+0x18>
   1cb06:	e09d      	b.n	1cc44 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1cb08:	68bb      	ldr	r3, [r7, #8]
   1cb0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cb0c:	4b50      	ldr	r3, [pc, #320]	; (1cc50 <xTaskPriorityInherit+0x160>)
   1cb0e:	681b      	ldr	r3, [r3, #0]
   1cb10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cb12:	429a      	cmp	r2, r3
   1cb14:	d300      	bcc.n	1cb18 <xTaskPriorityInherit+0x28>
   1cb16:	e08c      	b.n	1cc32 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1cb18:	68bb      	ldr	r3, [r7, #8]
   1cb1a:	699b      	ldr	r3, [r3, #24]
   1cb1c:	2b00      	cmp	r3, #0
   1cb1e:	db06      	blt.n	1cb2e <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cb20:	4b4b      	ldr	r3, [pc, #300]	; (1cc50 <xTaskPriorityInherit+0x160>)
   1cb22:	681b      	ldr	r3, [r3, #0]
   1cb24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cb26:	2205      	movs	r2, #5
   1cb28:	1ad2      	subs	r2, r2, r3
   1cb2a:	68bb      	ldr	r3, [r7, #8]
   1cb2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1cb2e:	68bb      	ldr	r3, [r7, #8]
   1cb30:	6959      	ldr	r1, [r3, #20]
   1cb32:	68bb      	ldr	r3, [r7, #8]
   1cb34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cb36:	0013      	movs	r3, r2
   1cb38:	009b      	lsls	r3, r3, #2
   1cb3a:	189b      	adds	r3, r3, r2
   1cb3c:	009b      	lsls	r3, r3, #2
   1cb3e:	4a45      	ldr	r2, [pc, #276]	; (1cc54 <xTaskPriorityInherit+0x164>)
   1cb40:	189b      	adds	r3, r3, r2
   1cb42:	4299      	cmp	r1, r3
   1cb44:	d101      	bne.n	1cb4a <xTaskPriorityInherit+0x5a>
   1cb46:	2301      	movs	r3, #1
   1cb48:	e000      	b.n	1cb4c <xTaskPriorityInherit+0x5c>
   1cb4a:	2300      	movs	r3, #0
   1cb4c:	2b00      	cmp	r3, #0
   1cb4e:	d037      	beq.n	1cbc0 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1cb50:	68bb      	ldr	r3, [r7, #8]
   1cb52:	3304      	adds	r3, #4
   1cb54:	0018      	movs	r0, r3
   1cb56:	4b40      	ldr	r3, [pc, #256]	; (1cc58 <xTaskPriorityInherit+0x168>)
   1cb58:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1cb5a:	4b3d      	ldr	r3, [pc, #244]	; (1cc50 <xTaskPriorityInherit+0x160>)
   1cb5c:	681b      	ldr	r3, [r3, #0]
   1cb5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cb60:	68bb      	ldr	r3, [r7, #8]
   1cb62:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1cb64:	68bb      	ldr	r3, [r7, #8]
   1cb66:	0018      	movs	r0, r3
   1cb68:	4b3c      	ldr	r3, [pc, #240]	; (1cc5c <xTaskPriorityInherit+0x16c>)
   1cb6a:	4798      	blx	r3
   1cb6c:	0003      	movs	r3, r0
   1cb6e:	001a      	movs	r2, r3
   1cb70:	4b3b      	ldr	r3, [pc, #236]	; (1cc60 <xTaskPriorityInherit+0x170>)
   1cb72:	881b      	ldrh	r3, [r3, #0]
   1cb74:	4013      	ands	r3, r2
   1cb76:	b29b      	uxth	r3, r3
   1cb78:	2b00      	cmp	r3, #0
   1cb7a:	d008      	beq.n	1cb8e <xTaskPriorityInherit+0x9e>
   1cb7c:	68bb      	ldr	r3, [r7, #8]
   1cb7e:	0018      	movs	r0, r3
   1cb80:	4b38      	ldr	r3, [pc, #224]	; (1cc64 <xTaskPriorityInherit+0x174>)
   1cb82:	4798      	blx	r3
   1cb84:	0003      	movs	r3, r0
   1cb86:	b2db      	uxtb	r3, r3
   1cb88:	0018      	movs	r0, r3
   1cb8a:	4b37      	ldr	r3, [pc, #220]	; (1cc68 <xTaskPriorityInherit+0x178>)
   1cb8c:	4798      	blx	r3
   1cb8e:	68bb      	ldr	r3, [r7, #8]
   1cb90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cb92:	4b36      	ldr	r3, [pc, #216]	; (1cc6c <xTaskPriorityInherit+0x17c>)
   1cb94:	681b      	ldr	r3, [r3, #0]
   1cb96:	429a      	cmp	r2, r3
   1cb98:	d903      	bls.n	1cba2 <xTaskPriorityInherit+0xb2>
   1cb9a:	68bb      	ldr	r3, [r7, #8]
   1cb9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cb9e:	4b33      	ldr	r3, [pc, #204]	; (1cc6c <xTaskPriorityInherit+0x17c>)
   1cba0:	601a      	str	r2, [r3, #0]
   1cba2:	68bb      	ldr	r3, [r7, #8]
   1cba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cba6:	0013      	movs	r3, r2
   1cba8:	009b      	lsls	r3, r3, #2
   1cbaa:	189b      	adds	r3, r3, r2
   1cbac:	009b      	lsls	r3, r3, #2
   1cbae:	4a29      	ldr	r2, [pc, #164]	; (1cc54 <xTaskPriorityInherit+0x164>)
   1cbb0:	189a      	adds	r2, r3, r2
   1cbb2:	68bb      	ldr	r3, [r7, #8]
   1cbb4:	3304      	adds	r3, #4
   1cbb6:	0019      	movs	r1, r3
   1cbb8:	0010      	movs	r0, r2
   1cbba:	4b2d      	ldr	r3, [pc, #180]	; (1cc70 <xTaskPriorityInherit+0x180>)
   1cbbc:	4798      	blx	r3
   1cbbe:	e004      	b.n	1cbca <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1cbc0:	4b23      	ldr	r3, [pc, #140]	; (1cc50 <xTaskPriorityInherit+0x160>)
   1cbc2:	681b      	ldr	r3, [r3, #0]
   1cbc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cbc6:	68bb      	ldr	r3, [r7, #8]
   1cbc8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1cbca:	68bb      	ldr	r3, [r7, #8]
   1cbcc:	0018      	movs	r0, r3
   1cbce:	4b23      	ldr	r3, [pc, #140]	; (1cc5c <xTaskPriorityInherit+0x16c>)
   1cbd0:	4798      	blx	r3
   1cbd2:	0003      	movs	r3, r0
   1cbd4:	001a      	movs	r2, r3
   1cbd6:	4b22      	ldr	r3, [pc, #136]	; (1cc60 <xTaskPriorityInherit+0x170>)
   1cbd8:	881b      	ldrh	r3, [r3, #0]
   1cbda:	4013      	ands	r3, r2
   1cbdc:	b29b      	uxth	r3, r3
   1cbde:	2b00      	cmp	r3, #0
   1cbe0:	d024      	beq.n	1cc2c <xTaskPriorityInherit+0x13c>
   1cbe2:	68bb      	ldr	r3, [r7, #8]
   1cbe4:	0018      	movs	r0, r3
   1cbe6:	4b1f      	ldr	r3, [pc, #124]	; (1cc64 <xTaskPriorityInherit+0x174>)
   1cbe8:	4798      	blx	r3
   1cbea:	0003      	movs	r3, r0
   1cbec:	b2db      	uxtb	r3, r3
   1cbee:	001c      	movs	r4, r3
   1cbf0:	68bb      	ldr	r3, [r7, #8]
   1cbf2:	0018      	movs	r0, r3
   1cbf4:	4b1b      	ldr	r3, [pc, #108]	; (1cc64 <xTaskPriorityInherit+0x174>)
   1cbf6:	4798      	blx	r3
   1cbf8:	0003      	movs	r3, r0
   1cbfa:	b2db      	uxtb	r3, r3
   1cbfc:	0019      	movs	r1, r3
   1cbfe:	2003      	movs	r0, #3
   1cc00:	4b1c      	ldr	r3, [pc, #112]	; (1cc74 <xTaskPriorityInherit+0x184>)
   1cc02:	4798      	blx	r3
   1cc04:	0003      	movs	r3, r0
   1cc06:	0022      	movs	r2, r4
   1cc08:	2103      	movs	r1, #3
   1cc0a:	208e      	movs	r0, #142	; 0x8e
   1cc0c:	4c1a      	ldr	r4, [pc, #104]	; (1cc78 <xTaskPriorityInherit+0x188>)
   1cc0e:	47a0      	blx	r4
   1cc10:	68bb      	ldr	r3, [r7, #8]
   1cc12:	0018      	movs	r0, r3
   1cc14:	4b13      	ldr	r3, [pc, #76]	; (1cc64 <xTaskPriorityInherit+0x174>)
   1cc16:	4798      	blx	r3
   1cc18:	0003      	movs	r3, r0
   1cc1a:	b2d9      	uxtb	r1, r3
   1cc1c:	4b0c      	ldr	r3, [pc, #48]	; (1cc50 <xTaskPriorityInherit+0x160>)
   1cc1e:	681b      	ldr	r3, [r3, #0]
   1cc20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cc22:	b2db      	uxtb	r3, r3
   1cc24:	001a      	movs	r2, r3
   1cc26:	2003      	movs	r0, #3
   1cc28:	4b14      	ldr	r3, [pc, #80]	; (1cc7c <xTaskPriorityInherit+0x18c>)
   1cc2a:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1cc2c:	2301      	movs	r3, #1
   1cc2e:	60fb      	str	r3, [r7, #12]
   1cc30:	e008      	b.n	1cc44 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1cc32:	68bb      	ldr	r3, [r7, #8]
   1cc34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1cc36:	4b06      	ldr	r3, [pc, #24]	; (1cc50 <xTaskPriorityInherit+0x160>)
   1cc38:	681b      	ldr	r3, [r3, #0]
   1cc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cc3c:	429a      	cmp	r2, r3
   1cc3e:	d201      	bcs.n	1cc44 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1cc40:	2301      	movs	r3, #1
   1cc42:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1cc44:	68fb      	ldr	r3, [r7, #12]
	}
   1cc46:	0018      	movs	r0, r3
   1cc48:	46bd      	mov	sp, r7
   1cc4a:	b005      	add	sp, #20
   1cc4c:	bd90      	pop	{r4, r7, pc}
   1cc4e:	46c0      	nop			; (mov r8, r8)
   1cc50:	20003f5c 	.word	0x20003f5c
   1cc54:	20003f60 	.word	0x20003f60
   1cc58:	00019c07 	.word	0x00019c07
   1cc5c:	00017d8d 	.word	0x00017d8d
   1cc60:	20000104 	.word	0x20000104
   1cc64:	00017d6d 	.word	0x00017d6d
   1cc68:	0001853d 	.word	0x0001853d
   1cc6c:	2000403c 	.word	0x2000403c
   1cc70:	00019b57 	.word	0x00019b57
   1cc74:	00018d45 	.word	0x00018d45
   1cc78:	000188b5 	.word	0x000188b5
   1cc7c:	00018ca1 	.word	0x00018ca1

0001cc80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1cc80:	b590      	push	{r4, r7, lr}
   1cc82:	b085      	sub	sp, #20
   1cc84:	af00      	add	r7, sp, #0
   1cc86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1cc88:	687b      	ldr	r3, [r7, #4]
   1cc8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1cc8c:	2300      	movs	r3, #0
   1cc8e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1cc90:	687b      	ldr	r3, [r7, #4]
   1cc92:	2b00      	cmp	r3, #0
   1cc94:	d100      	bne.n	1cc98 <xTaskPriorityDisinherit+0x18>
   1cc96:	e089      	b.n	1cdac <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1cc98:	4b47      	ldr	r3, [pc, #284]	; (1cdb8 <xTaskPriorityDisinherit+0x138>)
   1cc9a:	681b      	ldr	r3, [r3, #0]
   1cc9c:	68ba      	ldr	r2, [r7, #8]
   1cc9e:	429a      	cmp	r2, r3
   1cca0:	d001      	beq.n	1cca6 <xTaskPriorityDisinherit+0x26>
   1cca2:	b672      	cpsid	i
   1cca4:	e7fe      	b.n	1cca4 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1cca6:	68bb      	ldr	r3, [r7, #8]
   1cca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ccaa:	2b00      	cmp	r3, #0
   1ccac:	d101      	bne.n	1ccb2 <xTaskPriorityDisinherit+0x32>
   1ccae:	b672      	cpsid	i
   1ccb0:	e7fe      	b.n	1ccb0 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1ccb2:	68bb      	ldr	r3, [r7, #8]
   1ccb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ccb6:	1e5a      	subs	r2, r3, #1
   1ccb8:	68bb      	ldr	r3, [r7, #8]
   1ccba:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1ccbc:	68bb      	ldr	r3, [r7, #8]
   1ccbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ccc0:	68bb      	ldr	r3, [r7, #8]
   1ccc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ccc4:	429a      	cmp	r2, r3
   1ccc6:	d071      	beq.n	1cdac <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1ccc8:	68bb      	ldr	r3, [r7, #8]
   1ccca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1cccc:	2b00      	cmp	r3, #0
   1ccce:	d16d      	bne.n	1cdac <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1ccd0:	68bb      	ldr	r3, [r7, #8]
   1ccd2:	3304      	adds	r3, #4
   1ccd4:	0018      	movs	r0, r3
   1ccd6:	4b39      	ldr	r3, [pc, #228]	; (1cdbc <xTaskPriorityDisinherit+0x13c>)
   1ccd8:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1ccda:	68bb      	ldr	r3, [r7, #8]
   1ccdc:	0018      	movs	r0, r3
   1ccde:	4b38      	ldr	r3, [pc, #224]	; (1cdc0 <xTaskPriorityDisinherit+0x140>)
   1cce0:	4798      	blx	r3
   1cce2:	0003      	movs	r3, r0
   1cce4:	001a      	movs	r2, r3
   1cce6:	4b37      	ldr	r3, [pc, #220]	; (1cdc4 <xTaskPriorityDisinherit+0x144>)
   1cce8:	881b      	ldrh	r3, [r3, #0]
   1ccea:	4013      	ands	r3, r2
   1ccec:	b29b      	uxth	r3, r3
   1ccee:	2b00      	cmp	r3, #0
   1ccf0:	d023      	beq.n	1cd3a <xTaskPriorityDisinherit+0xba>
   1ccf2:	68bb      	ldr	r3, [r7, #8]
   1ccf4:	0018      	movs	r0, r3
   1ccf6:	4b34      	ldr	r3, [pc, #208]	; (1cdc8 <xTaskPriorityDisinherit+0x148>)
   1ccf8:	4798      	blx	r3
   1ccfa:	0003      	movs	r3, r0
   1ccfc:	b2db      	uxtb	r3, r3
   1ccfe:	001c      	movs	r4, r3
   1cd00:	68bb      	ldr	r3, [r7, #8]
   1cd02:	0018      	movs	r0, r3
   1cd04:	4b30      	ldr	r3, [pc, #192]	; (1cdc8 <xTaskPriorityDisinherit+0x148>)
   1cd06:	4798      	blx	r3
   1cd08:	0003      	movs	r3, r0
   1cd0a:	b2db      	uxtb	r3, r3
   1cd0c:	0019      	movs	r1, r3
   1cd0e:	2003      	movs	r0, #3
   1cd10:	4b2e      	ldr	r3, [pc, #184]	; (1cdcc <xTaskPriorityDisinherit+0x14c>)
   1cd12:	4798      	blx	r3
   1cd14:	0003      	movs	r3, r0
   1cd16:	0022      	movs	r2, r4
   1cd18:	2103      	movs	r1, #3
   1cd1a:	208f      	movs	r0, #143	; 0x8f
   1cd1c:	4c2c      	ldr	r4, [pc, #176]	; (1cdd0 <xTaskPriorityDisinherit+0x150>)
   1cd1e:	47a0      	blx	r4
   1cd20:	68bb      	ldr	r3, [r7, #8]
   1cd22:	0018      	movs	r0, r3
   1cd24:	4b28      	ldr	r3, [pc, #160]	; (1cdc8 <xTaskPriorityDisinherit+0x148>)
   1cd26:	4798      	blx	r3
   1cd28:	0003      	movs	r3, r0
   1cd2a:	b2d9      	uxtb	r1, r3
   1cd2c:	68bb      	ldr	r3, [r7, #8]
   1cd2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cd30:	b2db      	uxtb	r3, r3
   1cd32:	001a      	movs	r2, r3
   1cd34:	2003      	movs	r0, #3
   1cd36:	4b27      	ldr	r3, [pc, #156]	; (1cdd4 <xTaskPriorityDisinherit+0x154>)
   1cd38:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1cd3a:	68bb      	ldr	r3, [r7, #8]
   1cd3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1cd3e:	68bb      	ldr	r3, [r7, #8]
   1cd40:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cd42:	68bb      	ldr	r3, [r7, #8]
   1cd44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cd46:	2205      	movs	r2, #5
   1cd48:	1ad2      	subs	r2, r2, r3
   1cd4a:	68bb      	ldr	r3, [r7, #8]
   1cd4c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1cd4e:	68bb      	ldr	r3, [r7, #8]
   1cd50:	0018      	movs	r0, r3
   1cd52:	4b1b      	ldr	r3, [pc, #108]	; (1cdc0 <xTaskPriorityDisinherit+0x140>)
   1cd54:	4798      	blx	r3
   1cd56:	0003      	movs	r3, r0
   1cd58:	001a      	movs	r2, r3
   1cd5a:	4b1a      	ldr	r3, [pc, #104]	; (1cdc4 <xTaskPriorityDisinherit+0x144>)
   1cd5c:	881b      	ldrh	r3, [r3, #0]
   1cd5e:	4013      	ands	r3, r2
   1cd60:	b29b      	uxth	r3, r3
   1cd62:	2b00      	cmp	r3, #0
   1cd64:	d008      	beq.n	1cd78 <xTaskPriorityDisinherit+0xf8>
   1cd66:	68bb      	ldr	r3, [r7, #8]
   1cd68:	0018      	movs	r0, r3
   1cd6a:	4b17      	ldr	r3, [pc, #92]	; (1cdc8 <xTaskPriorityDisinherit+0x148>)
   1cd6c:	4798      	blx	r3
   1cd6e:	0003      	movs	r3, r0
   1cd70:	b2db      	uxtb	r3, r3
   1cd72:	0018      	movs	r0, r3
   1cd74:	4b18      	ldr	r3, [pc, #96]	; (1cdd8 <xTaskPriorityDisinherit+0x158>)
   1cd76:	4798      	blx	r3
   1cd78:	68bb      	ldr	r3, [r7, #8]
   1cd7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd7c:	4b17      	ldr	r3, [pc, #92]	; (1cddc <xTaskPriorityDisinherit+0x15c>)
   1cd7e:	681b      	ldr	r3, [r3, #0]
   1cd80:	429a      	cmp	r2, r3
   1cd82:	d903      	bls.n	1cd8c <xTaskPriorityDisinherit+0x10c>
   1cd84:	68bb      	ldr	r3, [r7, #8]
   1cd86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd88:	4b14      	ldr	r3, [pc, #80]	; (1cddc <xTaskPriorityDisinherit+0x15c>)
   1cd8a:	601a      	str	r2, [r3, #0]
   1cd8c:	68bb      	ldr	r3, [r7, #8]
   1cd8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd90:	0013      	movs	r3, r2
   1cd92:	009b      	lsls	r3, r3, #2
   1cd94:	189b      	adds	r3, r3, r2
   1cd96:	009b      	lsls	r3, r3, #2
   1cd98:	4a11      	ldr	r2, [pc, #68]	; (1cde0 <xTaskPriorityDisinherit+0x160>)
   1cd9a:	189a      	adds	r2, r3, r2
   1cd9c:	68bb      	ldr	r3, [r7, #8]
   1cd9e:	3304      	adds	r3, #4
   1cda0:	0019      	movs	r1, r3
   1cda2:	0010      	movs	r0, r2
   1cda4:	4b0f      	ldr	r3, [pc, #60]	; (1cde4 <xTaskPriorityDisinherit+0x164>)
   1cda6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1cda8:	2301      	movs	r3, #1
   1cdaa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1cdac:	68fb      	ldr	r3, [r7, #12]
	}
   1cdae:	0018      	movs	r0, r3
   1cdb0:	46bd      	mov	sp, r7
   1cdb2:	b005      	add	sp, #20
   1cdb4:	bd90      	pop	{r4, r7, pc}
   1cdb6:	46c0      	nop			; (mov r8, r8)
   1cdb8:	20003f5c 	.word	0x20003f5c
   1cdbc:	00019c07 	.word	0x00019c07
   1cdc0:	00017d8d 	.word	0x00017d8d
   1cdc4:	20000104 	.word	0x20000104
   1cdc8:	00017d6d 	.word	0x00017d6d
   1cdcc:	00018d45 	.word	0x00018d45
   1cdd0:	000188b5 	.word	0x000188b5
   1cdd4:	00018ca1 	.word	0x00018ca1
   1cdd8:	0001853d 	.word	0x0001853d
   1cddc:	2000403c 	.word	0x2000403c
   1cde0:	20003f60 	.word	0x20003f60
   1cde4:	00019b57 	.word	0x00019b57

0001cde8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1cde8:	b590      	push	{r4, r7, lr}
   1cdea:	b087      	sub	sp, #28
   1cdec:	af00      	add	r7, sp, #0
   1cdee:	6078      	str	r0, [r7, #4]
   1cdf0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1cdf2:	687b      	ldr	r3, [r7, #4]
   1cdf4:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1cdf6:	2301      	movs	r3, #1
   1cdf8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1cdfa:	687b      	ldr	r3, [r7, #4]
   1cdfc:	2b00      	cmp	r3, #0
   1cdfe:	d100      	bne.n	1ce02 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1ce00:	e0a4      	b.n	1cf4c <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1ce02:	693b      	ldr	r3, [r7, #16]
   1ce04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ce06:	2b00      	cmp	r3, #0
   1ce08:	d101      	bne.n	1ce0e <vTaskPriorityDisinheritAfterTimeout+0x26>
   1ce0a:	b672      	cpsid	i
   1ce0c:	e7fe      	b.n	1ce0c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1ce0e:	693b      	ldr	r3, [r7, #16]
   1ce10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1ce12:	683b      	ldr	r3, [r7, #0]
   1ce14:	429a      	cmp	r2, r3
   1ce16:	d202      	bcs.n	1ce1e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1ce18:	683b      	ldr	r3, [r7, #0]
   1ce1a:	617b      	str	r3, [r7, #20]
   1ce1c:	e002      	b.n	1ce24 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1ce1e:	693b      	ldr	r3, [r7, #16]
   1ce20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ce22:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1ce24:	693b      	ldr	r3, [r7, #16]
   1ce26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ce28:	697b      	ldr	r3, [r7, #20]
   1ce2a:	429a      	cmp	r2, r3
   1ce2c:	d100      	bne.n	1ce30 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1ce2e:	e08d      	b.n	1cf4c <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1ce30:	693b      	ldr	r3, [r7, #16]
   1ce32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1ce34:	68fb      	ldr	r3, [r7, #12]
   1ce36:	429a      	cmp	r2, r3
   1ce38:	d000      	beq.n	1ce3c <vTaskPriorityDisinheritAfterTimeout+0x54>
   1ce3a:	e087      	b.n	1cf4c <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1ce3c:	4b45      	ldr	r3, [pc, #276]	; (1cf54 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1ce3e:	681b      	ldr	r3, [r3, #0]
   1ce40:	693a      	ldr	r2, [r7, #16]
   1ce42:	429a      	cmp	r2, r3
   1ce44:	d101      	bne.n	1ce4a <vTaskPriorityDisinheritAfterTimeout+0x62>
   1ce46:	b672      	cpsid	i
   1ce48:	e7fe      	b.n	1ce48 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1ce4a:	693b      	ldr	r3, [r7, #16]
   1ce4c:	0018      	movs	r0, r3
   1ce4e:	4b42      	ldr	r3, [pc, #264]	; (1cf58 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1ce50:	4798      	blx	r3
   1ce52:	0003      	movs	r3, r0
   1ce54:	001a      	movs	r2, r3
   1ce56:	4b41      	ldr	r3, [pc, #260]	; (1cf5c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1ce58:	881b      	ldrh	r3, [r3, #0]
   1ce5a:	4013      	ands	r3, r2
   1ce5c:	b29b      	uxth	r3, r3
   1ce5e:	2b00      	cmp	r3, #0
   1ce60:	d023      	beq.n	1ceaa <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1ce62:	693b      	ldr	r3, [r7, #16]
   1ce64:	0018      	movs	r0, r3
   1ce66:	4b3e      	ldr	r3, [pc, #248]	; (1cf60 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1ce68:	4798      	blx	r3
   1ce6a:	0003      	movs	r3, r0
   1ce6c:	b2db      	uxtb	r3, r3
   1ce6e:	001c      	movs	r4, r3
   1ce70:	693b      	ldr	r3, [r7, #16]
   1ce72:	0018      	movs	r0, r3
   1ce74:	4b3a      	ldr	r3, [pc, #232]	; (1cf60 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1ce76:	4798      	blx	r3
   1ce78:	0003      	movs	r3, r0
   1ce7a:	b2db      	uxtb	r3, r3
   1ce7c:	0019      	movs	r1, r3
   1ce7e:	2003      	movs	r0, #3
   1ce80:	4b38      	ldr	r3, [pc, #224]	; (1cf64 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1ce82:	4798      	blx	r3
   1ce84:	0003      	movs	r3, r0
   1ce86:	0022      	movs	r2, r4
   1ce88:	2103      	movs	r1, #3
   1ce8a:	208f      	movs	r0, #143	; 0x8f
   1ce8c:	4c36      	ldr	r4, [pc, #216]	; (1cf68 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1ce8e:	47a0      	blx	r4
   1ce90:	693b      	ldr	r3, [r7, #16]
   1ce92:	0018      	movs	r0, r3
   1ce94:	4b32      	ldr	r3, [pc, #200]	; (1cf60 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1ce96:	4798      	blx	r3
   1ce98:	0003      	movs	r3, r0
   1ce9a:	b2d9      	uxtb	r1, r3
   1ce9c:	693b      	ldr	r3, [r7, #16]
   1ce9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cea0:	b2db      	uxtb	r3, r3
   1cea2:	001a      	movs	r2, r3
   1cea4:	2003      	movs	r0, #3
   1cea6:	4b31      	ldr	r3, [pc, #196]	; (1cf6c <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1cea8:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1ceaa:	693b      	ldr	r3, [r7, #16]
   1ceac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ceae:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1ceb0:	693b      	ldr	r3, [r7, #16]
   1ceb2:	697a      	ldr	r2, [r7, #20]
   1ceb4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1ceb6:	693b      	ldr	r3, [r7, #16]
   1ceb8:	699b      	ldr	r3, [r3, #24]
   1ceba:	2b00      	cmp	r3, #0
   1cebc:	db04      	blt.n	1cec8 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cebe:	697b      	ldr	r3, [r7, #20]
   1cec0:	2205      	movs	r2, #5
   1cec2:	1ad2      	subs	r2, r2, r3
   1cec4:	693b      	ldr	r3, [r7, #16]
   1cec6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1cec8:	693b      	ldr	r3, [r7, #16]
   1ceca:	6959      	ldr	r1, [r3, #20]
   1cecc:	68ba      	ldr	r2, [r7, #8]
   1cece:	0013      	movs	r3, r2
   1ced0:	009b      	lsls	r3, r3, #2
   1ced2:	189b      	adds	r3, r3, r2
   1ced4:	009b      	lsls	r3, r3, #2
   1ced6:	4a26      	ldr	r2, [pc, #152]	; (1cf70 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1ced8:	189b      	adds	r3, r3, r2
   1ceda:	4299      	cmp	r1, r3
   1cedc:	d101      	bne.n	1cee2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1cede:	2301      	movs	r3, #1
   1cee0:	e000      	b.n	1cee4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1cee2:	2300      	movs	r3, #0
   1cee4:	2b00      	cmp	r3, #0
   1cee6:	d031      	beq.n	1cf4c <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1cee8:	693b      	ldr	r3, [r7, #16]
   1ceea:	3304      	adds	r3, #4
   1ceec:	0018      	movs	r0, r3
   1ceee:	4b21      	ldr	r3, [pc, #132]	; (1cf74 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1cef0:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1cef2:	693b      	ldr	r3, [r7, #16]
   1cef4:	0018      	movs	r0, r3
   1cef6:	4b18      	ldr	r3, [pc, #96]	; (1cf58 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1cef8:	4798      	blx	r3
   1cefa:	0003      	movs	r3, r0
   1cefc:	001a      	movs	r2, r3
   1cefe:	4b17      	ldr	r3, [pc, #92]	; (1cf5c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1cf00:	881b      	ldrh	r3, [r3, #0]
   1cf02:	4013      	ands	r3, r2
   1cf04:	b29b      	uxth	r3, r3
   1cf06:	2b00      	cmp	r3, #0
   1cf08:	d008      	beq.n	1cf1c <vTaskPriorityDisinheritAfterTimeout+0x134>
   1cf0a:	693b      	ldr	r3, [r7, #16]
   1cf0c:	0018      	movs	r0, r3
   1cf0e:	4b14      	ldr	r3, [pc, #80]	; (1cf60 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1cf10:	4798      	blx	r3
   1cf12:	0003      	movs	r3, r0
   1cf14:	b2db      	uxtb	r3, r3
   1cf16:	0018      	movs	r0, r3
   1cf18:	4b17      	ldr	r3, [pc, #92]	; (1cf78 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1cf1a:	4798      	blx	r3
   1cf1c:	693b      	ldr	r3, [r7, #16]
   1cf1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf20:	4b16      	ldr	r3, [pc, #88]	; (1cf7c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1cf22:	681b      	ldr	r3, [r3, #0]
   1cf24:	429a      	cmp	r2, r3
   1cf26:	d903      	bls.n	1cf30 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1cf28:	693b      	ldr	r3, [r7, #16]
   1cf2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf2c:	4b13      	ldr	r3, [pc, #76]	; (1cf7c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1cf2e:	601a      	str	r2, [r3, #0]
   1cf30:	693b      	ldr	r3, [r7, #16]
   1cf32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf34:	0013      	movs	r3, r2
   1cf36:	009b      	lsls	r3, r3, #2
   1cf38:	189b      	adds	r3, r3, r2
   1cf3a:	009b      	lsls	r3, r3, #2
   1cf3c:	4a0c      	ldr	r2, [pc, #48]	; (1cf70 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1cf3e:	189a      	adds	r2, r3, r2
   1cf40:	693b      	ldr	r3, [r7, #16]
   1cf42:	3304      	adds	r3, #4
   1cf44:	0019      	movs	r1, r3
   1cf46:	0010      	movs	r0, r2
   1cf48:	4b0d      	ldr	r3, [pc, #52]	; (1cf80 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1cf4a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1cf4c:	46c0      	nop			; (mov r8, r8)
   1cf4e:	46bd      	mov	sp, r7
   1cf50:	b007      	add	sp, #28
   1cf52:	bd90      	pop	{r4, r7, pc}
   1cf54:	20003f5c 	.word	0x20003f5c
   1cf58:	00017d8d 	.word	0x00017d8d
   1cf5c:	20000104 	.word	0x20000104
   1cf60:	00017d6d 	.word	0x00017d6d
   1cf64:	00018d45 	.word	0x00018d45
   1cf68:	000188b5 	.word	0x000188b5
   1cf6c:	00018ca1 	.word	0x00018ca1
   1cf70:	20003f60 	.word	0x20003f60
   1cf74:	00019c07 	.word	0x00019c07
   1cf78:	0001853d 	.word	0x0001853d
   1cf7c:	2000403c 	.word	0x2000403c
   1cf80:	00019b57 	.word	0x00019b57

0001cf84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1cf84:	b580      	push	{r7, lr}
   1cf86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1cf88:	4b06      	ldr	r3, [pc, #24]	; (1cfa4 <pvTaskIncrementMutexHeldCount+0x20>)
   1cf8a:	681b      	ldr	r3, [r3, #0]
   1cf8c:	2b00      	cmp	r3, #0
   1cf8e:	d004      	beq.n	1cf9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1cf90:	4b04      	ldr	r3, [pc, #16]	; (1cfa4 <pvTaskIncrementMutexHeldCount+0x20>)
   1cf92:	681b      	ldr	r3, [r3, #0]
   1cf94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1cf96:	3201      	adds	r2, #1
   1cf98:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1cf9a:	4b02      	ldr	r3, [pc, #8]	; (1cfa4 <pvTaskIncrementMutexHeldCount+0x20>)
   1cf9c:	681b      	ldr	r3, [r3, #0]
	}
   1cf9e:	0018      	movs	r0, r3
   1cfa0:	46bd      	mov	sp, r7
   1cfa2:	bd80      	pop	{r7, pc}
   1cfa4:	20003f5c 	.word	0x20003f5c

0001cfa8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1cfa8:	b580      	push	{r7, lr}
   1cfaa:	b084      	sub	sp, #16
   1cfac:	af00      	add	r7, sp, #0
   1cfae:	6078      	str	r0, [r7, #4]
   1cfb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1cfb2:	4b21      	ldr	r3, [pc, #132]	; (1d038 <prvAddCurrentTaskToDelayedList+0x90>)
   1cfb4:	681b      	ldr	r3, [r3, #0]
   1cfb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1cfb8:	4b20      	ldr	r3, [pc, #128]	; (1d03c <prvAddCurrentTaskToDelayedList+0x94>)
   1cfba:	681b      	ldr	r3, [r3, #0]
   1cfbc:	3304      	adds	r3, #4
   1cfbe:	0018      	movs	r0, r3
   1cfc0:	4b1f      	ldr	r3, [pc, #124]	; (1d040 <prvAddCurrentTaskToDelayedList+0x98>)
   1cfc2:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1cfc4:	687b      	ldr	r3, [r7, #4]
   1cfc6:	3301      	adds	r3, #1
   1cfc8:	d10b      	bne.n	1cfe2 <prvAddCurrentTaskToDelayedList+0x3a>
   1cfca:	683b      	ldr	r3, [r7, #0]
   1cfcc:	2b00      	cmp	r3, #0
   1cfce:	d008      	beq.n	1cfe2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1cfd0:	4b1a      	ldr	r3, [pc, #104]	; (1d03c <prvAddCurrentTaskToDelayedList+0x94>)
   1cfd2:	681b      	ldr	r3, [r3, #0]
   1cfd4:	1d1a      	adds	r2, r3, #4
   1cfd6:	4b1b      	ldr	r3, [pc, #108]	; (1d044 <prvAddCurrentTaskToDelayedList+0x9c>)
   1cfd8:	0011      	movs	r1, r2
   1cfda:	0018      	movs	r0, r3
   1cfdc:	4b1a      	ldr	r3, [pc, #104]	; (1d048 <prvAddCurrentTaskToDelayedList+0xa0>)
   1cfde:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1cfe0:	e026      	b.n	1d030 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1cfe2:	68fa      	ldr	r2, [r7, #12]
   1cfe4:	687b      	ldr	r3, [r7, #4]
   1cfe6:	18d3      	adds	r3, r2, r3
   1cfe8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1cfea:	4b14      	ldr	r3, [pc, #80]	; (1d03c <prvAddCurrentTaskToDelayedList+0x94>)
   1cfec:	681b      	ldr	r3, [r3, #0]
   1cfee:	68ba      	ldr	r2, [r7, #8]
   1cff0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1cff2:	68ba      	ldr	r2, [r7, #8]
   1cff4:	68fb      	ldr	r3, [r7, #12]
   1cff6:	429a      	cmp	r2, r3
   1cff8:	d209      	bcs.n	1d00e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1cffa:	4b14      	ldr	r3, [pc, #80]	; (1d04c <prvAddCurrentTaskToDelayedList+0xa4>)
   1cffc:	681a      	ldr	r2, [r3, #0]
   1cffe:	4b0f      	ldr	r3, [pc, #60]	; (1d03c <prvAddCurrentTaskToDelayedList+0x94>)
   1d000:	681b      	ldr	r3, [r3, #0]
   1d002:	3304      	adds	r3, #4
   1d004:	0019      	movs	r1, r3
   1d006:	0010      	movs	r0, r2
   1d008:	4b11      	ldr	r3, [pc, #68]	; (1d050 <prvAddCurrentTaskToDelayedList+0xa8>)
   1d00a:	4798      	blx	r3
}
   1d00c:	e010      	b.n	1d030 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d00e:	4b11      	ldr	r3, [pc, #68]	; (1d054 <prvAddCurrentTaskToDelayedList+0xac>)
   1d010:	681a      	ldr	r2, [r3, #0]
   1d012:	4b0a      	ldr	r3, [pc, #40]	; (1d03c <prvAddCurrentTaskToDelayedList+0x94>)
   1d014:	681b      	ldr	r3, [r3, #0]
   1d016:	3304      	adds	r3, #4
   1d018:	0019      	movs	r1, r3
   1d01a:	0010      	movs	r0, r2
   1d01c:	4b0c      	ldr	r3, [pc, #48]	; (1d050 <prvAddCurrentTaskToDelayedList+0xa8>)
   1d01e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1d020:	4b0d      	ldr	r3, [pc, #52]	; (1d058 <prvAddCurrentTaskToDelayedList+0xb0>)
   1d022:	681b      	ldr	r3, [r3, #0]
   1d024:	68ba      	ldr	r2, [r7, #8]
   1d026:	429a      	cmp	r2, r3
   1d028:	d202      	bcs.n	1d030 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1d02a:	4b0b      	ldr	r3, [pc, #44]	; (1d058 <prvAddCurrentTaskToDelayedList+0xb0>)
   1d02c:	68ba      	ldr	r2, [r7, #8]
   1d02e:	601a      	str	r2, [r3, #0]
}
   1d030:	46c0      	nop			; (mov r8, r8)
   1d032:	46bd      	mov	sp, r7
   1d034:	b004      	add	sp, #16
   1d036:	bd80      	pop	{r7, pc}
   1d038:	20004038 	.word	0x20004038
   1d03c:	20003f5c 	.word	0x20003f5c
   1d040:	00019c07 	.word	0x00019c07
   1d044:	20004020 	.word	0x20004020
   1d048:	00019b57 	.word	0x00019b57
   1d04c:	20003ff0 	.word	0x20003ff0
   1d050:	00019b9b 	.word	0x00019b9b
   1d054:	20003fec 	.word	0x20003fec
   1d058:	20004054 	.word	0x20004054

0001d05c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1d05c:	b590      	push	{r4, r7, lr}
   1d05e:	b085      	sub	sp, #20
   1d060:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1d062:	2300      	movs	r3, #0
   1d064:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1d066:	4b0e      	ldr	r3, [pc, #56]	; (1d0a0 <xTimerCreateTimerTask+0x44>)
   1d068:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1d06a:	4b0e      	ldr	r3, [pc, #56]	; (1d0a4 <xTimerCreateTimerTask+0x48>)
   1d06c:	681b      	ldr	r3, [r3, #0]
   1d06e:	2b00      	cmp	r3, #0
   1d070:	d00b      	beq.n	1d08a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1d072:	490d      	ldr	r1, [pc, #52]	; (1d0a8 <xTimerCreateTimerTask+0x4c>)
   1d074:	480d      	ldr	r0, [pc, #52]	; (1d0ac <xTimerCreateTimerTask+0x50>)
   1d076:	4b0e      	ldr	r3, [pc, #56]	; (1d0b0 <xTimerCreateTimerTask+0x54>)
   1d078:	9301      	str	r3, [sp, #4]
   1d07a:	2302      	movs	r3, #2
   1d07c:	9300      	str	r3, [sp, #0]
   1d07e:	2300      	movs	r3, #0
   1d080:	2280      	movs	r2, #128	; 0x80
   1d082:	4c0c      	ldr	r4, [pc, #48]	; (1d0b4 <xTimerCreateTimerTask+0x58>)
   1d084:	47a0      	blx	r4
   1d086:	0003      	movs	r3, r0
   1d088:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1d08a:	687b      	ldr	r3, [r7, #4]
   1d08c:	2b00      	cmp	r3, #0
   1d08e:	d101      	bne.n	1d094 <xTimerCreateTimerTask+0x38>
   1d090:	b672      	cpsid	i
   1d092:	e7fe      	b.n	1d092 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1d094:	687b      	ldr	r3, [r7, #4]
}
   1d096:	0018      	movs	r0, r3
   1d098:	46bd      	mov	sp, r7
   1d09a:	b003      	add	sp, #12
   1d09c:	bd90      	pop	{r4, r7, pc}
   1d09e:	46c0      	nop			; (mov r8, r8)
   1d0a0:	0001d5a5 	.word	0x0001d5a5
   1d0a4:	20004090 	.word	0x20004090
   1d0a8:	00037ed8 	.word	0x00037ed8
   1d0ac:	0001d1dd 	.word	0x0001d1dd
   1d0b0:	20004094 	.word	0x20004094
   1d0b4:	0001b9f5 	.word	0x0001b9f5

0001d0b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1d0b8:	b590      	push	{r4, r7, lr}
   1d0ba:	b089      	sub	sp, #36	; 0x24
   1d0bc:	af00      	add	r7, sp, #0
   1d0be:	60f8      	str	r0, [r7, #12]
   1d0c0:	60b9      	str	r1, [r7, #8]
   1d0c2:	607a      	str	r2, [r7, #4]
   1d0c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1d0c6:	2300      	movs	r3, #0
   1d0c8:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1d0ca:	68fb      	ldr	r3, [r7, #12]
   1d0cc:	2b00      	cmp	r3, #0
   1d0ce:	d101      	bne.n	1d0d4 <xTimerGenericCommand+0x1c>
   1d0d0:	b672      	cpsid	i
   1d0d2:	e7fe      	b.n	1d0d2 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1d0d4:	4b1e      	ldr	r3, [pc, #120]	; (1d150 <xTimerGenericCommand+0x98>)
   1d0d6:	681b      	ldr	r3, [r3, #0]
   1d0d8:	2b00      	cmp	r3, #0
   1d0da:	d033      	beq.n	1d144 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1d0dc:	2310      	movs	r3, #16
   1d0de:	18fb      	adds	r3, r7, r3
   1d0e0:	68ba      	ldr	r2, [r7, #8]
   1d0e2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1d0e4:	2310      	movs	r3, #16
   1d0e6:	18fb      	adds	r3, r7, r3
   1d0e8:	687a      	ldr	r2, [r7, #4]
   1d0ea:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1d0ec:	2310      	movs	r3, #16
   1d0ee:	18fb      	adds	r3, r7, r3
   1d0f0:	68fa      	ldr	r2, [r7, #12]
   1d0f2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1d0f4:	68bb      	ldr	r3, [r7, #8]
   1d0f6:	2b05      	cmp	r3, #5
   1d0f8:	dc1a      	bgt.n	1d130 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1d0fa:	4b16      	ldr	r3, [pc, #88]	; (1d154 <xTimerGenericCommand+0x9c>)
   1d0fc:	4798      	blx	r3
   1d0fe:	0003      	movs	r3, r0
   1d100:	2b02      	cmp	r3, #2
   1d102:	d10a      	bne.n	1d11a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1d104:	4b12      	ldr	r3, [pc, #72]	; (1d150 <xTimerGenericCommand+0x98>)
   1d106:	6818      	ldr	r0, [r3, #0]
   1d108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1d10a:	2310      	movs	r3, #16
   1d10c:	18f9      	adds	r1, r7, r3
   1d10e:	2300      	movs	r3, #0
   1d110:	4c11      	ldr	r4, [pc, #68]	; (1d158 <xTimerGenericCommand+0xa0>)
   1d112:	47a0      	blx	r4
   1d114:	0003      	movs	r3, r0
   1d116:	61fb      	str	r3, [r7, #28]
   1d118:	e014      	b.n	1d144 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1d11a:	4b0d      	ldr	r3, [pc, #52]	; (1d150 <xTimerGenericCommand+0x98>)
   1d11c:	6818      	ldr	r0, [r3, #0]
   1d11e:	2310      	movs	r3, #16
   1d120:	18f9      	adds	r1, r7, r3
   1d122:	2300      	movs	r3, #0
   1d124:	2200      	movs	r2, #0
   1d126:	4c0c      	ldr	r4, [pc, #48]	; (1d158 <xTimerGenericCommand+0xa0>)
   1d128:	47a0      	blx	r4
   1d12a:	0003      	movs	r3, r0
   1d12c:	61fb      	str	r3, [r7, #28]
   1d12e:	e009      	b.n	1d144 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1d130:	4b07      	ldr	r3, [pc, #28]	; (1d150 <xTimerGenericCommand+0x98>)
   1d132:	6818      	ldr	r0, [r3, #0]
   1d134:	683a      	ldr	r2, [r7, #0]
   1d136:	2310      	movs	r3, #16
   1d138:	18f9      	adds	r1, r7, r3
   1d13a:	2300      	movs	r3, #0
   1d13c:	4c07      	ldr	r4, [pc, #28]	; (1d15c <xTimerGenericCommand+0xa4>)
   1d13e:	47a0      	blx	r4
   1d140:	0003      	movs	r3, r0
   1d142:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1d144:	69fb      	ldr	r3, [r7, #28]
}
   1d146:	0018      	movs	r0, r3
   1d148:	46bd      	mov	sp, r7
   1d14a:	b009      	add	sp, #36	; 0x24
   1d14c:	bd90      	pop	{r4, r7, pc}
   1d14e:	46c0      	nop			; (mov r8, r8)
   1d150:	20004090 	.word	0x20004090
   1d154:	0001cab9 	.word	0x0001cab9
   1d158:	0001a32d 	.word	0x0001a32d
   1d15c:	0001a78d 	.word	0x0001a78d

0001d160 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1d160:	b590      	push	{r4, r7, lr}
   1d162:	b087      	sub	sp, #28
   1d164:	af02      	add	r7, sp, #8
   1d166:	6078      	str	r0, [r7, #4]
   1d168:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d16a:	4b18      	ldr	r3, [pc, #96]	; (1d1cc <prvProcessExpiredTimer+0x6c>)
   1d16c:	681b      	ldr	r3, [r3, #0]
   1d16e:	68db      	ldr	r3, [r3, #12]
   1d170:	68db      	ldr	r3, [r3, #12]
   1d172:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d174:	68fb      	ldr	r3, [r7, #12]
   1d176:	3304      	adds	r3, #4
   1d178:	0018      	movs	r0, r3
   1d17a:	4b15      	ldr	r3, [pc, #84]	; (1d1d0 <prvProcessExpiredTimer+0x70>)
   1d17c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d17e:	68fb      	ldr	r3, [r7, #12]
   1d180:	69db      	ldr	r3, [r3, #28]
   1d182:	2b01      	cmp	r3, #1
   1d184:	d119      	bne.n	1d1ba <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1d186:	68fb      	ldr	r3, [r7, #12]
   1d188:	699a      	ldr	r2, [r3, #24]
   1d18a:	687b      	ldr	r3, [r7, #4]
   1d18c:	18d1      	adds	r1, r2, r3
   1d18e:	687b      	ldr	r3, [r7, #4]
   1d190:	683a      	ldr	r2, [r7, #0]
   1d192:	68f8      	ldr	r0, [r7, #12]
   1d194:	4c0f      	ldr	r4, [pc, #60]	; (1d1d4 <prvProcessExpiredTimer+0x74>)
   1d196:	47a0      	blx	r4
   1d198:	1e03      	subs	r3, r0, #0
   1d19a:	d00e      	beq.n	1d1ba <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1d19c:	687a      	ldr	r2, [r7, #4]
   1d19e:	68f8      	ldr	r0, [r7, #12]
   1d1a0:	2300      	movs	r3, #0
   1d1a2:	9300      	str	r3, [sp, #0]
   1d1a4:	2300      	movs	r3, #0
   1d1a6:	2100      	movs	r1, #0
   1d1a8:	4c0b      	ldr	r4, [pc, #44]	; (1d1d8 <prvProcessExpiredTimer+0x78>)
   1d1aa:	47a0      	blx	r4
   1d1ac:	0003      	movs	r3, r0
   1d1ae:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1d1b0:	68bb      	ldr	r3, [r7, #8]
   1d1b2:	2b00      	cmp	r3, #0
   1d1b4:	d101      	bne.n	1d1ba <prvProcessExpiredTimer+0x5a>
   1d1b6:	b672      	cpsid	i
   1d1b8:	e7fe      	b.n	1d1b8 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d1ba:	68fb      	ldr	r3, [r7, #12]
   1d1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d1be:	68fa      	ldr	r2, [r7, #12]
   1d1c0:	0010      	movs	r0, r2
   1d1c2:	4798      	blx	r3
}
   1d1c4:	46c0      	nop			; (mov r8, r8)
   1d1c6:	46bd      	mov	sp, r7
   1d1c8:	b005      	add	sp, #20
   1d1ca:	bd90      	pop	{r4, r7, pc}
   1d1cc:	20004088 	.word	0x20004088
   1d1d0:	00019c07 	.word	0x00019c07
   1d1d4:	0001d345 	.word	0x0001d345
   1d1d8:	0001d0b9 	.word	0x0001d0b9

0001d1dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1d1dc:	b580      	push	{r7, lr}
   1d1de:	b084      	sub	sp, #16
   1d1e0:	af00      	add	r7, sp, #0
   1d1e2:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1d1e4:	4b08      	ldr	r3, [pc, #32]	; (1d208 <prvTimerTask+0x2c>)
   1d1e6:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1d1e8:	2308      	movs	r3, #8
   1d1ea:	18fb      	adds	r3, r7, r3
   1d1ec:	0018      	movs	r0, r3
   1d1ee:	4b07      	ldr	r3, [pc, #28]	; (1d20c <prvTimerTask+0x30>)
   1d1f0:	4798      	blx	r3
   1d1f2:	0003      	movs	r3, r0
   1d1f4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1d1f6:	68ba      	ldr	r2, [r7, #8]
   1d1f8:	68fb      	ldr	r3, [r7, #12]
   1d1fa:	0011      	movs	r1, r2
   1d1fc:	0018      	movs	r0, r3
   1d1fe:	4b04      	ldr	r3, [pc, #16]	; (1d210 <prvTimerTask+0x34>)
   1d200:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1d202:	4b04      	ldr	r3, [pc, #16]	; (1d214 <prvTimerTask+0x38>)
   1d204:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1d206:	e7ef      	b.n	1d1e8 <prvTimerTask+0xc>
   1d208:	000323ad 	.word	0x000323ad
   1d20c:	0001d2bd 	.word	0x0001d2bd
   1d210:	0001d219 	.word	0x0001d219
   1d214:	0001d3cd 	.word	0x0001d3cd

0001d218 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1d218:	b580      	push	{r7, lr}
   1d21a:	b084      	sub	sp, #16
   1d21c:	af00      	add	r7, sp, #0
   1d21e:	6078      	str	r0, [r7, #4]
   1d220:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1d222:	4b1e      	ldr	r3, [pc, #120]	; (1d29c <prvProcessTimerOrBlockTask+0x84>)
   1d224:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1d226:	2308      	movs	r3, #8
   1d228:	18fb      	adds	r3, r7, r3
   1d22a:	0018      	movs	r0, r3
   1d22c:	4b1c      	ldr	r3, [pc, #112]	; (1d2a0 <prvProcessTimerOrBlockTask+0x88>)
   1d22e:	4798      	blx	r3
   1d230:	0003      	movs	r3, r0
   1d232:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1d234:	68bb      	ldr	r3, [r7, #8]
   1d236:	2b00      	cmp	r3, #0
   1d238:	d129      	bne.n	1d28e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1d23a:	683b      	ldr	r3, [r7, #0]
   1d23c:	2b00      	cmp	r3, #0
   1d23e:	d10c      	bne.n	1d25a <prvProcessTimerOrBlockTask+0x42>
   1d240:	687a      	ldr	r2, [r7, #4]
   1d242:	68fb      	ldr	r3, [r7, #12]
   1d244:	429a      	cmp	r2, r3
   1d246:	d808      	bhi.n	1d25a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1d248:	4b16      	ldr	r3, [pc, #88]	; (1d2a4 <prvProcessTimerOrBlockTask+0x8c>)
   1d24a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1d24c:	68fa      	ldr	r2, [r7, #12]
   1d24e:	687b      	ldr	r3, [r7, #4]
   1d250:	0011      	movs	r1, r2
   1d252:	0018      	movs	r0, r3
   1d254:	4b14      	ldr	r3, [pc, #80]	; (1d2a8 <prvProcessTimerOrBlockTask+0x90>)
   1d256:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1d258:	e01b      	b.n	1d292 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1d25a:	683b      	ldr	r3, [r7, #0]
   1d25c:	2b00      	cmp	r3, #0
   1d25e:	d006      	beq.n	1d26e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1d260:	4b12      	ldr	r3, [pc, #72]	; (1d2ac <prvProcessTimerOrBlockTask+0x94>)
   1d262:	681b      	ldr	r3, [r3, #0]
   1d264:	681b      	ldr	r3, [r3, #0]
   1d266:	425a      	negs	r2, r3
   1d268:	4153      	adcs	r3, r2
   1d26a:	b2db      	uxtb	r3, r3
   1d26c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1d26e:	4b10      	ldr	r3, [pc, #64]	; (1d2b0 <prvProcessTimerOrBlockTask+0x98>)
   1d270:	6818      	ldr	r0, [r3, #0]
   1d272:	687a      	ldr	r2, [r7, #4]
   1d274:	68fb      	ldr	r3, [r7, #12]
   1d276:	1ad3      	subs	r3, r2, r3
   1d278:	683a      	ldr	r2, [r7, #0]
   1d27a:	0019      	movs	r1, r3
   1d27c:	4b0d      	ldr	r3, [pc, #52]	; (1d2b4 <prvProcessTimerOrBlockTask+0x9c>)
   1d27e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1d280:	4b08      	ldr	r3, [pc, #32]	; (1d2a4 <prvProcessTimerOrBlockTask+0x8c>)
   1d282:	4798      	blx	r3
   1d284:	1e03      	subs	r3, r0, #0
   1d286:	d104      	bne.n	1d292 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1d288:	4b0b      	ldr	r3, [pc, #44]	; (1d2b8 <prvProcessTimerOrBlockTask+0xa0>)
   1d28a:	4798      	blx	r3
}
   1d28c:	e001      	b.n	1d292 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1d28e:	4b05      	ldr	r3, [pc, #20]	; (1d2a4 <prvProcessTimerOrBlockTask+0x8c>)
   1d290:	4798      	blx	r3
}
   1d292:	46c0      	nop			; (mov r8, r8)
   1d294:	46bd      	mov	sp, r7
   1d296:	b004      	add	sp, #16
   1d298:	bd80      	pop	{r7, pc}
   1d29a:	46c0      	nop			; (mov r8, r8)
   1d29c:	0001c051 	.word	0x0001c051
   1d2a0:	0001d2fd 	.word	0x0001d2fd
   1d2a4:	0001c069 	.word	0x0001c069
   1d2a8:	0001d161 	.word	0x0001d161
   1d2ac:	2000408c 	.word	0x2000408c
   1d2b0:	20004090 	.word	0x20004090
   1d2b4:	0001b7f1 	.word	0x0001b7f1
   1d2b8:	00019d81 	.word	0x00019d81

0001d2bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1d2bc:	b580      	push	{r7, lr}
   1d2be:	b084      	sub	sp, #16
   1d2c0:	af00      	add	r7, sp, #0
   1d2c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1d2c4:	4b0c      	ldr	r3, [pc, #48]	; (1d2f8 <prvGetNextExpireTime+0x3c>)
   1d2c6:	681b      	ldr	r3, [r3, #0]
   1d2c8:	681b      	ldr	r3, [r3, #0]
   1d2ca:	425a      	negs	r2, r3
   1d2cc:	4153      	adcs	r3, r2
   1d2ce:	b2db      	uxtb	r3, r3
   1d2d0:	001a      	movs	r2, r3
   1d2d2:	687b      	ldr	r3, [r7, #4]
   1d2d4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1d2d6:	687b      	ldr	r3, [r7, #4]
   1d2d8:	681b      	ldr	r3, [r3, #0]
   1d2da:	2b00      	cmp	r3, #0
   1d2dc:	d105      	bne.n	1d2ea <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d2de:	4b06      	ldr	r3, [pc, #24]	; (1d2f8 <prvGetNextExpireTime+0x3c>)
   1d2e0:	681b      	ldr	r3, [r3, #0]
   1d2e2:	68db      	ldr	r3, [r3, #12]
   1d2e4:	681b      	ldr	r3, [r3, #0]
   1d2e6:	60fb      	str	r3, [r7, #12]
   1d2e8:	e001      	b.n	1d2ee <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1d2ea:	2300      	movs	r3, #0
   1d2ec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1d2ee:	68fb      	ldr	r3, [r7, #12]
}
   1d2f0:	0018      	movs	r0, r3
   1d2f2:	46bd      	mov	sp, r7
   1d2f4:	b004      	add	sp, #16
   1d2f6:	bd80      	pop	{r7, pc}
   1d2f8:	20004088 	.word	0x20004088

0001d2fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1d2fc:	b580      	push	{r7, lr}
   1d2fe:	b084      	sub	sp, #16
   1d300:	af00      	add	r7, sp, #0
   1d302:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1d304:	4b0c      	ldr	r3, [pc, #48]	; (1d338 <prvSampleTimeNow+0x3c>)
   1d306:	4798      	blx	r3
   1d308:	0003      	movs	r3, r0
   1d30a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1d30c:	4b0b      	ldr	r3, [pc, #44]	; (1d33c <prvSampleTimeNow+0x40>)
   1d30e:	681b      	ldr	r3, [r3, #0]
   1d310:	68fa      	ldr	r2, [r7, #12]
   1d312:	429a      	cmp	r2, r3
   1d314:	d205      	bcs.n	1d322 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1d316:	4b0a      	ldr	r3, [pc, #40]	; (1d340 <prvSampleTimeNow+0x44>)
   1d318:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1d31a:	687b      	ldr	r3, [r7, #4]
   1d31c:	2201      	movs	r2, #1
   1d31e:	601a      	str	r2, [r3, #0]
   1d320:	e002      	b.n	1d328 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1d322:	687b      	ldr	r3, [r7, #4]
   1d324:	2200      	movs	r2, #0
   1d326:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1d328:	4b04      	ldr	r3, [pc, #16]	; (1d33c <prvSampleTimeNow+0x40>)
   1d32a:	68fa      	ldr	r2, [r7, #12]
   1d32c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1d32e:	68fb      	ldr	r3, [r7, #12]
}
   1d330:	0018      	movs	r0, r3
   1d332:	46bd      	mov	sp, r7
   1d334:	b004      	add	sp, #16
   1d336:	bd80      	pop	{r7, pc}
   1d338:	0001c1d9 	.word	0x0001c1d9
   1d33c:	20004098 	.word	0x20004098
   1d340:	0001d4e5 	.word	0x0001d4e5

0001d344 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1d344:	b580      	push	{r7, lr}
   1d346:	b086      	sub	sp, #24
   1d348:	af00      	add	r7, sp, #0
   1d34a:	60f8      	str	r0, [r7, #12]
   1d34c:	60b9      	str	r1, [r7, #8]
   1d34e:	607a      	str	r2, [r7, #4]
   1d350:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1d352:	2300      	movs	r3, #0
   1d354:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1d356:	68fb      	ldr	r3, [r7, #12]
   1d358:	68ba      	ldr	r2, [r7, #8]
   1d35a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1d35c:	68fb      	ldr	r3, [r7, #12]
   1d35e:	68fa      	ldr	r2, [r7, #12]
   1d360:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1d362:	68ba      	ldr	r2, [r7, #8]
   1d364:	687b      	ldr	r3, [r7, #4]
   1d366:	429a      	cmp	r2, r3
   1d368:	d812      	bhi.n	1d390 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d36a:	687a      	ldr	r2, [r7, #4]
   1d36c:	683b      	ldr	r3, [r7, #0]
   1d36e:	1ad2      	subs	r2, r2, r3
   1d370:	68fb      	ldr	r3, [r7, #12]
   1d372:	699b      	ldr	r3, [r3, #24]
   1d374:	429a      	cmp	r2, r3
   1d376:	d302      	bcc.n	1d37e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1d378:	2301      	movs	r3, #1
   1d37a:	617b      	str	r3, [r7, #20]
   1d37c:	e01b      	b.n	1d3b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1d37e:	4b10      	ldr	r3, [pc, #64]	; (1d3c0 <prvInsertTimerInActiveList+0x7c>)
   1d380:	681a      	ldr	r2, [r3, #0]
   1d382:	68fb      	ldr	r3, [r7, #12]
   1d384:	3304      	adds	r3, #4
   1d386:	0019      	movs	r1, r3
   1d388:	0010      	movs	r0, r2
   1d38a:	4b0e      	ldr	r3, [pc, #56]	; (1d3c4 <prvInsertTimerInActiveList+0x80>)
   1d38c:	4798      	blx	r3
   1d38e:	e012      	b.n	1d3b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1d390:	687a      	ldr	r2, [r7, #4]
   1d392:	683b      	ldr	r3, [r7, #0]
   1d394:	429a      	cmp	r2, r3
   1d396:	d206      	bcs.n	1d3a6 <prvInsertTimerInActiveList+0x62>
   1d398:	68ba      	ldr	r2, [r7, #8]
   1d39a:	683b      	ldr	r3, [r7, #0]
   1d39c:	429a      	cmp	r2, r3
   1d39e:	d302      	bcc.n	1d3a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1d3a0:	2301      	movs	r3, #1
   1d3a2:	617b      	str	r3, [r7, #20]
   1d3a4:	e007      	b.n	1d3b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1d3a6:	4b08      	ldr	r3, [pc, #32]	; (1d3c8 <prvInsertTimerInActiveList+0x84>)
   1d3a8:	681a      	ldr	r2, [r3, #0]
   1d3aa:	68fb      	ldr	r3, [r7, #12]
   1d3ac:	3304      	adds	r3, #4
   1d3ae:	0019      	movs	r1, r3
   1d3b0:	0010      	movs	r0, r2
   1d3b2:	4b04      	ldr	r3, [pc, #16]	; (1d3c4 <prvInsertTimerInActiveList+0x80>)
   1d3b4:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1d3b6:	697b      	ldr	r3, [r7, #20]
}
   1d3b8:	0018      	movs	r0, r3
   1d3ba:	46bd      	mov	sp, r7
   1d3bc:	b006      	add	sp, #24
   1d3be:	bd80      	pop	{r7, pc}
   1d3c0:	2000408c 	.word	0x2000408c
   1d3c4:	00019b9b 	.word	0x00019b9b
   1d3c8:	20004088 	.word	0x20004088

0001d3cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1d3cc:	b590      	push	{r4, r7, lr}
   1d3ce:	b08b      	sub	sp, #44	; 0x2c
   1d3d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1d3d2:	e068      	b.n	1d4a6 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1d3d4:	2308      	movs	r3, #8
   1d3d6:	18fb      	adds	r3, r7, r3
   1d3d8:	681b      	ldr	r3, [r3, #0]
   1d3da:	2b00      	cmp	r3, #0
   1d3dc:	db63      	blt.n	1d4a6 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1d3de:	2308      	movs	r3, #8
   1d3e0:	18fb      	adds	r3, r7, r3
   1d3e2:	689b      	ldr	r3, [r3, #8]
   1d3e4:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1d3e6:	69fb      	ldr	r3, [r7, #28]
   1d3e8:	695b      	ldr	r3, [r3, #20]
   1d3ea:	2b00      	cmp	r3, #0
   1d3ec:	d004      	beq.n	1d3f8 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d3ee:	69fb      	ldr	r3, [r7, #28]
   1d3f0:	3304      	adds	r3, #4
   1d3f2:	0018      	movs	r0, r3
   1d3f4:	4b33      	ldr	r3, [pc, #204]	; (1d4c4 <prvProcessReceivedCommands+0xf8>)
   1d3f6:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1d3f8:	1d3b      	adds	r3, r7, #4
   1d3fa:	0018      	movs	r0, r3
   1d3fc:	4b32      	ldr	r3, [pc, #200]	; (1d4c8 <prvProcessReceivedCommands+0xfc>)
   1d3fe:	4798      	blx	r3
   1d400:	0003      	movs	r3, r0
   1d402:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1d404:	2308      	movs	r3, #8
   1d406:	18fb      	adds	r3, r7, r3
   1d408:	681b      	ldr	r3, [r3, #0]
   1d40a:	2b09      	cmp	r3, #9
   1d40c:	d84a      	bhi.n	1d4a4 <prvProcessReceivedCommands+0xd8>
   1d40e:	009a      	lsls	r2, r3, #2
   1d410:	4b2e      	ldr	r3, [pc, #184]	; (1d4cc <prvProcessReceivedCommands+0x100>)
   1d412:	18d3      	adds	r3, r2, r3
   1d414:	681b      	ldr	r3, [r3, #0]
   1d416:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1d418:	2308      	movs	r3, #8
   1d41a:	18fb      	adds	r3, r7, r3
   1d41c:	685a      	ldr	r2, [r3, #4]
   1d41e:	69fb      	ldr	r3, [r7, #28]
   1d420:	699b      	ldr	r3, [r3, #24]
   1d422:	18d1      	adds	r1, r2, r3
   1d424:	2308      	movs	r3, #8
   1d426:	18fb      	adds	r3, r7, r3
   1d428:	685b      	ldr	r3, [r3, #4]
   1d42a:	69ba      	ldr	r2, [r7, #24]
   1d42c:	69f8      	ldr	r0, [r7, #28]
   1d42e:	4c28      	ldr	r4, [pc, #160]	; (1d4d0 <prvProcessReceivedCommands+0x104>)
   1d430:	47a0      	blx	r4
   1d432:	1e03      	subs	r3, r0, #0
   1d434:	d037      	beq.n	1d4a6 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d436:	69fb      	ldr	r3, [r7, #28]
   1d438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d43a:	69fa      	ldr	r2, [r7, #28]
   1d43c:	0010      	movs	r0, r2
   1d43e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d440:	69fb      	ldr	r3, [r7, #28]
   1d442:	69db      	ldr	r3, [r3, #28]
   1d444:	2b01      	cmp	r3, #1
   1d446:	d12e      	bne.n	1d4a6 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1d448:	2308      	movs	r3, #8
   1d44a:	18fb      	adds	r3, r7, r3
   1d44c:	685a      	ldr	r2, [r3, #4]
   1d44e:	69fb      	ldr	r3, [r7, #28]
   1d450:	699b      	ldr	r3, [r3, #24]
   1d452:	18d2      	adds	r2, r2, r3
   1d454:	69f8      	ldr	r0, [r7, #28]
   1d456:	2300      	movs	r3, #0
   1d458:	9300      	str	r3, [sp, #0]
   1d45a:	2300      	movs	r3, #0
   1d45c:	2100      	movs	r1, #0
   1d45e:	4c1d      	ldr	r4, [pc, #116]	; (1d4d4 <prvProcessReceivedCommands+0x108>)
   1d460:	47a0      	blx	r4
   1d462:	0003      	movs	r3, r0
   1d464:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1d466:	697b      	ldr	r3, [r7, #20]
   1d468:	2b00      	cmp	r3, #0
   1d46a:	d11c      	bne.n	1d4a6 <prvProcessReceivedCommands+0xda>
   1d46c:	b672      	cpsid	i
   1d46e:	e7fe      	b.n	1d46e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1d470:	2308      	movs	r3, #8
   1d472:	18fb      	adds	r3, r7, r3
   1d474:	685a      	ldr	r2, [r3, #4]
   1d476:	69fb      	ldr	r3, [r7, #28]
   1d478:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1d47a:	69fb      	ldr	r3, [r7, #28]
   1d47c:	699b      	ldr	r3, [r3, #24]
   1d47e:	2b00      	cmp	r3, #0
   1d480:	d101      	bne.n	1d486 <prvProcessReceivedCommands+0xba>
   1d482:	b672      	cpsid	i
   1d484:	e7fe      	b.n	1d484 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1d486:	69fb      	ldr	r3, [r7, #28]
   1d488:	699a      	ldr	r2, [r3, #24]
   1d48a:	69bb      	ldr	r3, [r7, #24]
   1d48c:	18d1      	adds	r1, r2, r3
   1d48e:	69bb      	ldr	r3, [r7, #24]
   1d490:	69ba      	ldr	r2, [r7, #24]
   1d492:	69f8      	ldr	r0, [r7, #28]
   1d494:	4c0e      	ldr	r4, [pc, #56]	; (1d4d0 <prvProcessReceivedCommands+0x104>)
   1d496:	47a0      	blx	r4
					break;
   1d498:	e005      	b.n	1d4a6 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1d49a:	69fb      	ldr	r3, [r7, #28]
   1d49c:	0018      	movs	r0, r3
   1d49e:	4b0e      	ldr	r3, [pc, #56]	; (1d4d8 <prvProcessReceivedCommands+0x10c>)
   1d4a0:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1d4a2:	e000      	b.n	1d4a6 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1d4a4:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1d4a6:	4b0d      	ldr	r3, [pc, #52]	; (1d4dc <prvProcessReceivedCommands+0x110>)
   1d4a8:	681b      	ldr	r3, [r3, #0]
   1d4aa:	2208      	movs	r2, #8
   1d4ac:	18b9      	adds	r1, r7, r2
   1d4ae:	2200      	movs	r2, #0
   1d4b0:	0018      	movs	r0, r3
   1d4b2:	4b0b      	ldr	r3, [pc, #44]	; (1d4e0 <prvProcessReceivedCommands+0x114>)
   1d4b4:	4798      	blx	r3
   1d4b6:	1e03      	subs	r3, r0, #0
   1d4b8:	d18c      	bne.n	1d3d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1d4ba:	46c0      	nop			; (mov r8, r8)
   1d4bc:	46bd      	mov	sp, r7
   1d4be:	b009      	add	sp, #36	; 0x24
   1d4c0:	bd90      	pop	{r4, r7, pc}
   1d4c2:	46c0      	nop			; (mov r8, r8)
   1d4c4:	00019c07 	.word	0x00019c07
   1d4c8:	0001d2fd 	.word	0x0001d2fd
   1d4cc:	00037ee0 	.word	0x00037ee0
   1d4d0:	0001d345 	.word	0x0001d345
   1d4d4:	0001d0b9 	.word	0x0001d0b9
   1d4d8:	00019f95 	.word	0x00019f95
   1d4dc:	20004090 	.word	0x20004090
   1d4e0:	0001abe5 	.word	0x0001abe5

0001d4e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1d4e4:	b590      	push	{r4, r7, lr}
   1d4e6:	b089      	sub	sp, #36	; 0x24
   1d4e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1d4ea:	e03e      	b.n	1d56a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d4ec:	4b28      	ldr	r3, [pc, #160]	; (1d590 <prvSwitchTimerLists+0xac>)
   1d4ee:	681b      	ldr	r3, [r3, #0]
   1d4f0:	68db      	ldr	r3, [r3, #12]
   1d4f2:	681b      	ldr	r3, [r3, #0]
   1d4f4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d4f6:	4b26      	ldr	r3, [pc, #152]	; (1d590 <prvSwitchTimerLists+0xac>)
   1d4f8:	681b      	ldr	r3, [r3, #0]
   1d4fa:	68db      	ldr	r3, [r3, #12]
   1d4fc:	68db      	ldr	r3, [r3, #12]
   1d4fe:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d500:	693b      	ldr	r3, [r7, #16]
   1d502:	3304      	adds	r3, #4
   1d504:	0018      	movs	r0, r3
   1d506:	4b23      	ldr	r3, [pc, #140]	; (1d594 <prvSwitchTimerLists+0xb0>)
   1d508:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d50a:	693b      	ldr	r3, [r7, #16]
   1d50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d50e:	693a      	ldr	r2, [r7, #16]
   1d510:	0010      	movs	r0, r2
   1d512:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d514:	693b      	ldr	r3, [r7, #16]
   1d516:	69db      	ldr	r3, [r3, #28]
   1d518:	2b01      	cmp	r3, #1
   1d51a:	d126      	bne.n	1d56a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1d51c:	693b      	ldr	r3, [r7, #16]
   1d51e:	699a      	ldr	r2, [r3, #24]
   1d520:	697b      	ldr	r3, [r7, #20]
   1d522:	18d3      	adds	r3, r2, r3
   1d524:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1d526:	68fa      	ldr	r2, [r7, #12]
   1d528:	697b      	ldr	r3, [r7, #20]
   1d52a:	429a      	cmp	r2, r3
   1d52c:	d90e      	bls.n	1d54c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1d52e:	693b      	ldr	r3, [r7, #16]
   1d530:	68fa      	ldr	r2, [r7, #12]
   1d532:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1d534:	693b      	ldr	r3, [r7, #16]
   1d536:	693a      	ldr	r2, [r7, #16]
   1d538:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1d53a:	4b15      	ldr	r3, [pc, #84]	; (1d590 <prvSwitchTimerLists+0xac>)
   1d53c:	681a      	ldr	r2, [r3, #0]
   1d53e:	693b      	ldr	r3, [r7, #16]
   1d540:	3304      	adds	r3, #4
   1d542:	0019      	movs	r1, r3
   1d544:	0010      	movs	r0, r2
   1d546:	4b14      	ldr	r3, [pc, #80]	; (1d598 <prvSwitchTimerLists+0xb4>)
   1d548:	4798      	blx	r3
   1d54a:	e00e      	b.n	1d56a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1d54c:	697a      	ldr	r2, [r7, #20]
   1d54e:	6938      	ldr	r0, [r7, #16]
   1d550:	2300      	movs	r3, #0
   1d552:	9300      	str	r3, [sp, #0]
   1d554:	2300      	movs	r3, #0
   1d556:	2100      	movs	r1, #0
   1d558:	4c10      	ldr	r4, [pc, #64]	; (1d59c <prvSwitchTimerLists+0xb8>)
   1d55a:	47a0      	blx	r4
   1d55c:	0003      	movs	r3, r0
   1d55e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1d560:	68bb      	ldr	r3, [r7, #8]
   1d562:	2b00      	cmp	r3, #0
   1d564:	d101      	bne.n	1d56a <prvSwitchTimerLists+0x86>
   1d566:	b672      	cpsid	i
   1d568:	e7fe      	b.n	1d568 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1d56a:	4b09      	ldr	r3, [pc, #36]	; (1d590 <prvSwitchTimerLists+0xac>)
   1d56c:	681b      	ldr	r3, [r3, #0]
   1d56e:	681b      	ldr	r3, [r3, #0]
   1d570:	2b00      	cmp	r3, #0
   1d572:	d1bb      	bne.n	1d4ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1d574:	4b06      	ldr	r3, [pc, #24]	; (1d590 <prvSwitchTimerLists+0xac>)
   1d576:	681b      	ldr	r3, [r3, #0]
   1d578:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1d57a:	4b09      	ldr	r3, [pc, #36]	; (1d5a0 <prvSwitchTimerLists+0xbc>)
   1d57c:	681a      	ldr	r2, [r3, #0]
   1d57e:	4b04      	ldr	r3, [pc, #16]	; (1d590 <prvSwitchTimerLists+0xac>)
   1d580:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1d582:	4b07      	ldr	r3, [pc, #28]	; (1d5a0 <prvSwitchTimerLists+0xbc>)
   1d584:	687a      	ldr	r2, [r7, #4]
   1d586:	601a      	str	r2, [r3, #0]
}
   1d588:	46c0      	nop			; (mov r8, r8)
   1d58a:	46bd      	mov	sp, r7
   1d58c:	b007      	add	sp, #28
   1d58e:	bd90      	pop	{r4, r7, pc}
   1d590:	20004088 	.word	0x20004088
   1d594:	00019c07 	.word	0x00019c07
   1d598:	00019b9b 	.word	0x00019b9b
   1d59c:	0001d0b9 	.word	0x0001d0b9
   1d5a0:	2000408c 	.word	0x2000408c

0001d5a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1d5a4:	b580      	push	{r7, lr}
   1d5a6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1d5a8:	4b10      	ldr	r3, [pc, #64]	; (1d5ec <prvCheckForValidListAndQueue+0x48>)
   1d5aa:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1d5ac:	4b10      	ldr	r3, [pc, #64]	; (1d5f0 <prvCheckForValidListAndQueue+0x4c>)
   1d5ae:	681b      	ldr	r3, [r3, #0]
   1d5b0:	2b00      	cmp	r3, #0
   1d5b2:	d115      	bne.n	1d5e0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1d5b4:	4b0f      	ldr	r3, [pc, #60]	; (1d5f4 <prvCheckForValidListAndQueue+0x50>)
   1d5b6:	0018      	movs	r0, r3
   1d5b8:	4b0f      	ldr	r3, [pc, #60]	; (1d5f8 <prvCheckForValidListAndQueue+0x54>)
   1d5ba:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1d5bc:	4b0f      	ldr	r3, [pc, #60]	; (1d5fc <prvCheckForValidListAndQueue+0x58>)
   1d5be:	0018      	movs	r0, r3
   1d5c0:	4b0d      	ldr	r3, [pc, #52]	; (1d5f8 <prvCheckForValidListAndQueue+0x54>)
   1d5c2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1d5c4:	4b0e      	ldr	r3, [pc, #56]	; (1d600 <prvCheckForValidListAndQueue+0x5c>)
   1d5c6:	4a0b      	ldr	r2, [pc, #44]	; (1d5f4 <prvCheckForValidListAndQueue+0x50>)
   1d5c8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1d5ca:	4b0e      	ldr	r3, [pc, #56]	; (1d604 <prvCheckForValidListAndQueue+0x60>)
   1d5cc:	4a0b      	ldr	r2, [pc, #44]	; (1d5fc <prvCheckForValidListAndQueue+0x58>)
   1d5ce:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1d5d0:	2200      	movs	r2, #0
   1d5d2:	210c      	movs	r1, #12
   1d5d4:	2005      	movs	r0, #5
   1d5d6:	4b0c      	ldr	r3, [pc, #48]	; (1d608 <prvCheckForValidListAndQueue+0x64>)
   1d5d8:	4798      	blx	r3
   1d5da:	0002      	movs	r2, r0
   1d5dc:	4b04      	ldr	r3, [pc, #16]	; (1d5f0 <prvCheckForValidListAndQueue+0x4c>)
   1d5de:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1d5e0:	4b0a      	ldr	r3, [pc, #40]	; (1d60c <prvCheckForValidListAndQueue+0x68>)
   1d5e2:	4798      	blx	r3
}
   1d5e4:	46c0      	nop			; (mov r8, r8)
   1d5e6:	46bd      	mov	sp, r7
   1d5e8:	bd80      	pop	{r7, pc}
   1d5ea:	46c0      	nop			; (mov r8, r8)
   1d5ec:	00019d99 	.word	0x00019d99
   1d5f0:	20004090 	.word	0x20004090
   1d5f4:	20004060 	.word	0x20004060
   1d5f8:	00019b05 	.word	0x00019b05
   1d5fc:	20004074 	.word	0x20004074
   1d600:	20004088 	.word	0x20004088
   1d604:	2000408c 	.word	0x2000408c
   1d608:	0001a085 	.word	0x0001a085
   1d60c:	00019dbd 	.word	0x00019dbd

0001d610 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1d610:	b580      	push	{r7, lr}
   1d612:	b082      	sub	sp, #8
   1d614:	af00      	add	r7, sp, #0
   1d616:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1d618:	687b      	ldr	r3, [r7, #4]
   1d61a:	7c1b      	ldrb	r3, [r3, #16]
   1d61c:	2b00      	cmp	r3, #0
   1d61e:	d00b      	beq.n	1d638 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1d620:	687b      	ldr	r3, [r7, #4]
   1d622:	689b      	ldr	r3, [r3, #8]
   1d624:	1c5a      	adds	r2, r3, #1
   1d626:	687b      	ldr	r3, [r7, #4]
   1d628:	68d9      	ldr	r1, [r3, #12]
   1d62a:	4b10      	ldr	r3, [pc, #64]	; (1d66c <advance_pointer+0x5c>)
   1d62c:	0010      	movs	r0, r2
   1d62e:	4798      	blx	r3
   1d630:	000b      	movs	r3, r1
   1d632:	001a      	movs	r2, r3
   1d634:	687b      	ldr	r3, [r7, #4]
   1d636:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1d638:	687b      	ldr	r3, [r7, #4]
   1d63a:	685b      	ldr	r3, [r3, #4]
   1d63c:	1c5a      	adds	r2, r3, #1
   1d63e:	687b      	ldr	r3, [r7, #4]
   1d640:	68d9      	ldr	r1, [r3, #12]
   1d642:	4b0a      	ldr	r3, [pc, #40]	; (1d66c <advance_pointer+0x5c>)
   1d644:	0010      	movs	r0, r2
   1d646:	4798      	blx	r3
   1d648:	000b      	movs	r3, r1
   1d64a:	001a      	movs	r2, r3
   1d64c:	687b      	ldr	r3, [r7, #4]
   1d64e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1d650:	687b      	ldr	r3, [r7, #4]
   1d652:	685a      	ldr	r2, [r3, #4]
   1d654:	687b      	ldr	r3, [r7, #4]
   1d656:	689b      	ldr	r3, [r3, #8]
   1d658:	1ad3      	subs	r3, r2, r3
   1d65a:	425a      	negs	r2, r3
   1d65c:	4153      	adcs	r3, r2
   1d65e:	b2da      	uxtb	r2, r3
   1d660:	687b      	ldr	r3, [r7, #4]
   1d662:	741a      	strb	r2, [r3, #16]
 }
   1d664:	46c0      	nop			; (mov r8, r8)
   1d666:	46bd      	mov	sp, r7
   1d668:	b002      	add	sp, #8
   1d66a:	bd80      	pop	{r7, pc}
   1d66c:	00032761 	.word	0x00032761

0001d670 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1d670:	b580      	push	{r7, lr}
   1d672:	b082      	sub	sp, #8
   1d674:	af00      	add	r7, sp, #0
   1d676:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1d678:	687b      	ldr	r3, [r7, #4]
   1d67a:	2200      	movs	r2, #0
   1d67c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1d67e:	687b      	ldr	r3, [r7, #4]
   1d680:	689b      	ldr	r3, [r3, #8]
   1d682:	1c5a      	adds	r2, r3, #1
   1d684:	687b      	ldr	r3, [r7, #4]
   1d686:	68d9      	ldr	r1, [r3, #12]
   1d688:	4b05      	ldr	r3, [pc, #20]	; (1d6a0 <retreat_pointer+0x30>)
   1d68a:	0010      	movs	r0, r2
   1d68c:	4798      	blx	r3
   1d68e:	000b      	movs	r3, r1
   1d690:	001a      	movs	r2, r3
   1d692:	687b      	ldr	r3, [r7, #4]
   1d694:	609a      	str	r2, [r3, #8]
 }
   1d696:	46c0      	nop			; (mov r8, r8)
   1d698:	46bd      	mov	sp, r7
   1d69a:	b002      	add	sp, #8
   1d69c:	bd80      	pop	{r7, pc}
   1d69e:	46c0      	nop			; (mov r8, r8)
   1d6a0:	00032761 	.word	0x00032761

0001d6a4 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1d6a4:	b580      	push	{r7, lr}
   1d6a6:	b084      	sub	sp, #16
   1d6a8:	af00      	add	r7, sp, #0
   1d6aa:	6078      	str	r0, [r7, #4]
   1d6ac:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1d6ae:	2014      	movs	r0, #20
   1d6b0:	4b09      	ldr	r3, [pc, #36]	; (1d6d8 <circular_buf_init+0x34>)
   1d6b2:	4798      	blx	r3
   1d6b4:	0003      	movs	r3, r0
   1d6b6:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1d6b8:	68fb      	ldr	r3, [r7, #12]
   1d6ba:	687a      	ldr	r2, [r7, #4]
   1d6bc:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1d6be:	68fb      	ldr	r3, [r7, #12]
   1d6c0:	683a      	ldr	r2, [r7, #0]
   1d6c2:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1d6c4:	68fb      	ldr	r3, [r7, #12]
   1d6c6:	0018      	movs	r0, r3
   1d6c8:	4b04      	ldr	r3, [pc, #16]	; (1d6dc <circular_buf_init+0x38>)
   1d6ca:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1d6cc:	68fb      	ldr	r3, [r7, #12]
 }
   1d6ce:	0018      	movs	r0, r3
   1d6d0:	46bd      	mov	sp, r7
   1d6d2:	b004      	add	sp, #16
   1d6d4:	bd80      	pop	{r7, pc}
   1d6d6:	46c0      	nop			; (mov r8, r8)
   1d6d8:	000345d1 	.word	0x000345d1
   1d6dc:	0001d6e1 	.word	0x0001d6e1

0001d6e0 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1d6e0:	b580      	push	{r7, lr}
   1d6e2:	b082      	sub	sp, #8
   1d6e4:	af00      	add	r7, sp, #0
   1d6e6:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1d6e8:	687b      	ldr	r3, [r7, #4]
   1d6ea:	2200      	movs	r2, #0
   1d6ec:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1d6ee:	687b      	ldr	r3, [r7, #4]
   1d6f0:	2200      	movs	r2, #0
   1d6f2:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1d6f4:	687b      	ldr	r3, [r7, #4]
   1d6f6:	2200      	movs	r2, #0
   1d6f8:	741a      	strb	r2, [r3, #16]
 }
   1d6fa:	46c0      	nop			; (mov r8, r8)
   1d6fc:	46bd      	mov	sp, r7
   1d6fe:	b002      	add	sp, #8
   1d700:	bd80      	pop	{r7, pc}
	...

0001d704 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1d704:	b580      	push	{r7, lr}
   1d706:	b082      	sub	sp, #8
   1d708:	af00      	add	r7, sp, #0
   1d70a:	6078      	str	r0, [r7, #4]
   1d70c:	000a      	movs	r2, r1
   1d70e:	1cfb      	adds	r3, r7, #3
   1d710:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1d712:	687b      	ldr	r3, [r7, #4]
   1d714:	681a      	ldr	r2, [r3, #0]
   1d716:	687b      	ldr	r3, [r7, #4]
   1d718:	685b      	ldr	r3, [r3, #4]
   1d71a:	18d3      	adds	r3, r2, r3
   1d71c:	1cfa      	adds	r2, r7, #3
   1d71e:	7812      	ldrb	r2, [r2, #0]
   1d720:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1d722:	687b      	ldr	r3, [r7, #4]
   1d724:	0018      	movs	r0, r3
   1d726:	4b03      	ldr	r3, [pc, #12]	; (1d734 <circular_buf_put+0x30>)
   1d728:	4798      	blx	r3
 }
   1d72a:	46c0      	nop			; (mov r8, r8)
   1d72c:	46bd      	mov	sp, r7
   1d72e:	b002      	add	sp, #8
   1d730:	bd80      	pop	{r7, pc}
   1d732:	46c0      	nop			; (mov r8, r8)
   1d734:	0001d611 	.word	0x0001d611

0001d738 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1d738:	b580      	push	{r7, lr}
   1d73a:	b084      	sub	sp, #16
   1d73c:	af00      	add	r7, sp, #0
   1d73e:	6078      	str	r0, [r7, #4]
   1d740:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1d742:	2301      	movs	r3, #1
   1d744:	425b      	negs	r3, r3
   1d746:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1d748:	687b      	ldr	r3, [r7, #4]
   1d74a:	0018      	movs	r0, r3
   1d74c:	4b0d      	ldr	r3, [pc, #52]	; (1d784 <circular_buf_get+0x4c>)
   1d74e:	4798      	blx	r3
   1d750:	0003      	movs	r3, r0
   1d752:	001a      	movs	r2, r3
   1d754:	2301      	movs	r3, #1
   1d756:	4053      	eors	r3, r2
   1d758:	b2db      	uxtb	r3, r3
   1d75a:	2b00      	cmp	r3, #0
   1d75c:	d00d      	beq.n	1d77a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1d75e:	687b      	ldr	r3, [r7, #4]
   1d760:	681a      	ldr	r2, [r3, #0]
   1d762:	687b      	ldr	r3, [r7, #4]
   1d764:	689b      	ldr	r3, [r3, #8]
   1d766:	18d3      	adds	r3, r2, r3
   1d768:	781a      	ldrb	r2, [r3, #0]
   1d76a:	683b      	ldr	r3, [r7, #0]
   1d76c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1d76e:	687b      	ldr	r3, [r7, #4]
   1d770:	0018      	movs	r0, r3
   1d772:	4b05      	ldr	r3, [pc, #20]	; (1d788 <circular_buf_get+0x50>)
   1d774:	4798      	blx	r3

		 r = 0;
   1d776:	2300      	movs	r3, #0
   1d778:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1d77a:	68fb      	ldr	r3, [r7, #12]
 }
   1d77c:	0018      	movs	r0, r3
   1d77e:	46bd      	mov	sp, r7
   1d780:	b004      	add	sp, #16
   1d782:	bd80      	pop	{r7, pc}
   1d784:	0001d78d 	.word	0x0001d78d
   1d788:	0001d671 	.word	0x0001d671

0001d78c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1d78c:	b580      	push	{r7, lr}
   1d78e:	b082      	sub	sp, #8
   1d790:	af00      	add	r7, sp, #0
   1d792:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1d794:	687b      	ldr	r3, [r7, #4]
   1d796:	7c1b      	ldrb	r3, [r3, #16]
   1d798:	2201      	movs	r2, #1
   1d79a:	4053      	eors	r3, r2
   1d79c:	b2db      	uxtb	r3, r3
   1d79e:	2b00      	cmp	r3, #0
   1d7a0:	d007      	beq.n	1d7b2 <circular_buf_empty+0x26>
   1d7a2:	687b      	ldr	r3, [r7, #4]
   1d7a4:	685a      	ldr	r2, [r3, #4]
   1d7a6:	687b      	ldr	r3, [r7, #4]
   1d7a8:	689b      	ldr	r3, [r3, #8]
   1d7aa:	429a      	cmp	r2, r3
   1d7ac:	d101      	bne.n	1d7b2 <circular_buf_empty+0x26>
   1d7ae:	2301      	movs	r3, #1
   1d7b0:	e000      	b.n	1d7b4 <circular_buf_empty+0x28>
   1d7b2:	2300      	movs	r3, #0
   1d7b4:	1c1a      	adds	r2, r3, #0
   1d7b6:	2301      	movs	r3, #1
   1d7b8:	4013      	ands	r3, r2
   1d7ba:	b2db      	uxtb	r3, r3
 }
   1d7bc:	0018      	movs	r0, r3
   1d7be:	46bd      	mov	sp, r7
   1d7c0:	b002      	add	sp, #8
   1d7c2:	bd80      	pop	{r7, pc}

0001d7c4 <system_interrupt_enable>:
{
   1d7c4:	b580      	push	{r7, lr}
   1d7c6:	b082      	sub	sp, #8
   1d7c8:	af00      	add	r7, sp, #0
   1d7ca:	0002      	movs	r2, r0
   1d7cc:	1dfb      	adds	r3, r7, #7
   1d7ce:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1d7d0:	4b06      	ldr	r3, [pc, #24]	; (1d7ec <system_interrupt_enable+0x28>)
   1d7d2:	1dfa      	adds	r2, r7, #7
   1d7d4:	7812      	ldrb	r2, [r2, #0]
   1d7d6:	0011      	movs	r1, r2
   1d7d8:	221f      	movs	r2, #31
   1d7da:	400a      	ands	r2, r1
   1d7dc:	2101      	movs	r1, #1
   1d7de:	4091      	lsls	r1, r2
   1d7e0:	000a      	movs	r2, r1
   1d7e2:	601a      	str	r2, [r3, #0]
}
   1d7e4:	46c0      	nop			; (mov r8, r8)
   1d7e6:	46bd      	mov	sp, r7
   1d7e8:	b002      	add	sp, #8
   1d7ea:	bd80      	pop	{r7, pc}
   1d7ec:	e000e100 	.word	0xe000e100

0001d7f0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1d7f0:	b580      	push	{r7, lr}
   1d7f2:	b084      	sub	sp, #16
   1d7f4:	af00      	add	r7, sp, #0
   1d7f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1d7f8:	687b      	ldr	r3, [r7, #4]
   1d7fa:	681b      	ldr	r3, [r3, #0]
   1d7fc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1d7fe:	68fb      	ldr	r3, [r7, #12]
   1d800:	69db      	ldr	r3, [r3, #28]
   1d802:	1e5a      	subs	r2, r3, #1
   1d804:	4193      	sbcs	r3, r2
   1d806:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1d808:	0018      	movs	r0, r3
   1d80a:	46bd      	mov	sp, r7
   1d80c:	b004      	add	sp, #16
   1d80e:	bd80      	pop	{r7, pc}

0001d810 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1d810:	b580      	push	{r7, lr}
   1d812:	b082      	sub	sp, #8
   1d814:	af00      	add	r7, sp, #0
   1d816:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1d818:	46c0      	nop			; (mov r8, r8)
   1d81a:	687b      	ldr	r3, [r7, #4]
   1d81c:	0018      	movs	r0, r3
   1d81e:	4b04      	ldr	r3, [pc, #16]	; (1d830 <_usart_wait_for_sync+0x20>)
   1d820:	4798      	blx	r3
   1d822:	1e03      	subs	r3, r0, #0
   1d824:	d1f9      	bne.n	1d81a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1d826:	46c0      	nop			; (mov r8, r8)
   1d828:	46bd      	mov	sp, r7
   1d82a:	b002      	add	sp, #8
   1d82c:	bd80      	pop	{r7, pc}
   1d82e:	46c0      	nop			; (mov r8, r8)
   1d830:	0001d7f1 	.word	0x0001d7f1

0001d834 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1d834:	b580      	push	{r7, lr}
   1d836:	b082      	sub	sp, #8
   1d838:	af00      	add	r7, sp, #0
   1d83a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1d83c:	687b      	ldr	r3, [r7, #4]
   1d83e:	2280      	movs	r2, #128	; 0x80
   1d840:	05d2      	lsls	r2, r2, #23
   1d842:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1d844:	687b      	ldr	r3, [r7, #4]
   1d846:	2200      	movs	r2, #0
   1d848:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1d84a:	687b      	ldr	r3, [r7, #4]
   1d84c:	22ff      	movs	r2, #255	; 0xff
   1d84e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1d850:	687b      	ldr	r3, [r7, #4]
   1d852:	2200      	movs	r2, #0
   1d854:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1d856:	687b      	ldr	r3, [r7, #4]
   1d858:	2200      	movs	r2, #0
   1d85a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1d85c:	687b      	ldr	r3, [r7, #4]
   1d85e:	2296      	movs	r2, #150	; 0x96
   1d860:	0192      	lsls	r2, r2, #6
   1d862:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1d864:	687b      	ldr	r3, [r7, #4]
   1d866:	2224      	movs	r2, #36	; 0x24
   1d868:	2101      	movs	r1, #1
   1d86a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1d86c:	687b      	ldr	r3, [r7, #4]
   1d86e:	2225      	movs	r2, #37	; 0x25
   1d870:	2101      	movs	r1, #1
   1d872:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1d874:	687b      	ldr	r3, [r7, #4]
   1d876:	2226      	movs	r2, #38	; 0x26
   1d878:	2100      	movs	r1, #0
   1d87a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1d87c:	687b      	ldr	r3, [r7, #4]
   1d87e:	2227      	movs	r2, #39	; 0x27
   1d880:	2100      	movs	r1, #0
   1d882:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1d884:	687b      	ldr	r3, [r7, #4]
   1d886:	2200      	movs	r2, #0
   1d888:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1d88a:	687b      	ldr	r3, [r7, #4]
   1d88c:	2288      	movs	r2, #136	; 0x88
   1d88e:	0352      	lsls	r2, r2, #13
   1d890:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1d892:	687b      	ldr	r3, [r7, #4]
   1d894:	222c      	movs	r2, #44	; 0x2c
   1d896:	2100      	movs	r1, #0
   1d898:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1d89a:	687b      	ldr	r3, [r7, #4]
   1d89c:	222d      	movs	r2, #45	; 0x2d
   1d89e:	2100      	movs	r1, #0
   1d8a0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1d8a2:	687b      	ldr	r3, [r7, #4]
   1d8a4:	2200      	movs	r2, #0
   1d8a6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1d8a8:	687b      	ldr	r3, [r7, #4]
   1d8aa:	2200      	movs	r2, #0
   1d8ac:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1d8ae:	687b      	ldr	r3, [r7, #4]
   1d8b0:	2200      	movs	r2, #0
   1d8b2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1d8b4:	687b      	ldr	r3, [r7, #4]
   1d8b6:	2200      	movs	r2, #0
   1d8b8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1d8ba:	687b      	ldr	r3, [r7, #4]
   1d8bc:	2200      	movs	r2, #0
   1d8be:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1d8c0:	687b      	ldr	r3, [r7, #4]
   1d8c2:	2200      	movs	r2, #0
   1d8c4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1d8c6:	687b      	ldr	r3, [r7, #4]
   1d8c8:	2200      	movs	r2, #0
   1d8ca:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1d8cc:	687b      	ldr	r3, [r7, #4]
   1d8ce:	2200      	movs	r2, #0
   1d8d0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1d8d2:	687b      	ldr	r3, [r7, #4]
   1d8d4:	2200      	movs	r2, #0
   1d8d6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1d8d8:	687b      	ldr	r3, [r7, #4]
   1d8da:	2200      	movs	r2, #0
   1d8dc:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1d8de:	687b      	ldr	r3, [r7, #4]
   1d8e0:	2213      	movs	r2, #19
   1d8e2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1d8e4:	687b      	ldr	r3, [r7, #4]
   1d8e6:	2200      	movs	r2, #0
   1d8e8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1d8ea:	46c0      	nop			; (mov r8, r8)
   1d8ec:	46bd      	mov	sp, r7
   1d8ee:	b002      	add	sp, #8
   1d8f0:	bd80      	pop	{r7, pc}
	...

0001d8f4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1d8f4:	b580      	push	{r7, lr}
   1d8f6:	b084      	sub	sp, #16
   1d8f8:	af00      	add	r7, sp, #0
   1d8fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1d8fc:	687b      	ldr	r3, [r7, #4]
   1d8fe:	681b      	ldr	r3, [r3, #0]
   1d900:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1d902:	687b      	ldr	r3, [r7, #4]
   1d904:	681b      	ldr	r3, [r3, #0]
   1d906:	0018      	movs	r0, r3
   1d908:	4b09      	ldr	r3, [pc, #36]	; (1d930 <usart_enable+0x3c>)
   1d90a:	4798      	blx	r3
   1d90c:	0003      	movs	r3, r0
   1d90e:	0018      	movs	r0, r3
   1d910:	4b08      	ldr	r3, [pc, #32]	; (1d934 <usart_enable+0x40>)
   1d912:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1d914:	687b      	ldr	r3, [r7, #4]
   1d916:	0018      	movs	r0, r3
   1d918:	4b07      	ldr	r3, [pc, #28]	; (1d938 <usart_enable+0x44>)
   1d91a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1d91c:	68fb      	ldr	r3, [r7, #12]
   1d91e:	681b      	ldr	r3, [r3, #0]
   1d920:	2202      	movs	r2, #2
   1d922:	431a      	orrs	r2, r3
   1d924:	68fb      	ldr	r3, [r7, #12]
   1d926:	601a      	str	r2, [r3, #0]
}
   1d928:	46c0      	nop			; (mov r8, r8)
   1d92a:	46bd      	mov	sp, r7
   1d92c:	b004      	add	sp, #16
   1d92e:	bd80      	pop	{r7, pc}
   1d930:	000272f9 	.word	0x000272f9
   1d934:	0001d7c5 	.word	0x0001d7c5
   1d938:	0001d811 	.word	0x0001d811

0001d93c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1d93c:	b580      	push	{r7, lr}
   1d93e:	b082      	sub	sp, #8
   1d940:	af00      	add	r7, sp, #0
   1d942:	6078      	str	r0, [r7, #4]
   1d944:	000a      	movs	r2, r1
   1d946:	1cfb      	adds	r3, r7, #3
   1d948:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1d94a:	687b      	ldr	r3, [r7, #4]
   1d94c:	2231      	movs	r2, #49	; 0x31
   1d94e:	5c9b      	ldrb	r3, [r3, r2]
   1d950:	b25a      	sxtb	r2, r3
   1d952:	1cfb      	adds	r3, r7, #3
   1d954:	781b      	ldrb	r3, [r3, #0]
   1d956:	2101      	movs	r1, #1
   1d958:	4099      	lsls	r1, r3
   1d95a:	000b      	movs	r3, r1
   1d95c:	b25b      	sxtb	r3, r3
   1d95e:	4313      	orrs	r3, r2
   1d960:	b25b      	sxtb	r3, r3
   1d962:	b2d9      	uxtb	r1, r3
   1d964:	687b      	ldr	r3, [r7, #4]
   1d966:	2231      	movs	r2, #49	; 0x31
   1d968:	5499      	strb	r1, [r3, r2]

}
   1d96a:	46c0      	nop			; (mov r8, r8)
   1d96c:	46bd      	mov	sp, r7
   1d96e:	b002      	add	sp, #8
   1d970:	bd80      	pop	{r7, pc}
	...

0001d974 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1d974:	b580      	push	{r7, lr}
   1d976:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1d978:	2380      	movs	r3, #128	; 0x80
   1d97a:	009a      	lsls	r2, r3, #2
   1d97c:	4b0f      	ldr	r3, [pc, #60]	; (1d9bc <InitializeSerialConsole+0x48>)
   1d97e:	0011      	movs	r1, r2
   1d980:	0018      	movs	r0, r3
   1d982:	4b0f      	ldr	r3, [pc, #60]	; (1d9c0 <InitializeSerialConsole+0x4c>)
   1d984:	4798      	blx	r3
   1d986:	0002      	movs	r2, r0
   1d988:	4b0e      	ldr	r3, [pc, #56]	; (1d9c4 <InitializeSerialConsole+0x50>)
   1d98a:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1d98c:	2380      	movs	r3, #128	; 0x80
   1d98e:	009a      	lsls	r2, r3, #2
   1d990:	4b0d      	ldr	r3, [pc, #52]	; (1d9c8 <InitializeSerialConsole+0x54>)
   1d992:	0011      	movs	r1, r2
   1d994:	0018      	movs	r0, r3
   1d996:	4b0a      	ldr	r3, [pc, #40]	; (1d9c0 <InitializeSerialConsole+0x4c>)
   1d998:	4798      	blx	r3
   1d99a:	0002      	movs	r2, r0
   1d99c:	4b0b      	ldr	r3, [pc, #44]	; (1d9cc <InitializeSerialConsole+0x58>)
   1d99e:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1d9a0:	4b0b      	ldr	r3, [pc, #44]	; (1d9d0 <InitializeSerialConsole+0x5c>)
   1d9a2:	4798      	blx	r3
    configure_usart_callbacks();
   1d9a4:	4b0b      	ldr	r3, [pc, #44]	; (1d9d4 <InitializeSerialConsole+0x60>)
   1d9a6:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1d9a8:	490b      	ldr	r1, [pc, #44]	; (1d9d8 <InitializeSerialConsole+0x64>)
   1d9aa:	4b0c      	ldr	r3, [pc, #48]	; (1d9dc <InitializeSerialConsole+0x68>)
   1d9ac:	2201      	movs	r2, #1
   1d9ae:	0018      	movs	r0, r3
   1d9b0:	4b0b      	ldr	r3, [pc, #44]	; (1d9e0 <InitializeSerialConsole+0x6c>)
   1d9b2:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1d9b4:	46c0      	nop			; (mov r8, r8)
   1d9b6:	46bd      	mov	sp, r7
   1d9b8:	bd80      	pop	{r7, pc}
   1d9ba:	46c0      	nop			; (mov r8, r8)
   1d9bc:	200056bc 	.word	0x200056bc
   1d9c0:	0001d6a5 	.word	0x0001d6a5
   1d9c4:	200054b4 	.word	0x200054b4
   1d9c8:	200054bc 	.word	0x200054bc
   1d9cc:	200058c0 	.word	0x200058c0
   1d9d0:	0001db49 	.word	0x0001db49
   1d9d4:	0001dbc1 	.word	0x0001dbc1
   1d9d8:	200054b8 	.word	0x200054b8
   1d9dc:	20005480 	.word	0x20005480
   1d9e0:	00028ba1 	.word	0x00028ba1

0001d9e4 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1d9e4:	b580      	push	{r7, lr}
   1d9e6:	b084      	sub	sp, #16
   1d9e8:	af00      	add	r7, sp, #0
   1d9ea:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1d9ec:	4b1a      	ldr	r3, [pc, #104]	; (1da58 <SerialConsoleWriteString+0x74>)
   1d9ee:	4798      	blx	r3
    if (string != NULL) {
   1d9f0:	687b      	ldr	r3, [r7, #4]
   1d9f2:	2b00      	cmp	r3, #0
   1d9f4:	d02a      	beq.n	1da4c <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1d9f6:	2300      	movs	r3, #0
   1d9f8:	60fb      	str	r3, [r7, #12]
   1d9fa:	e00b      	b.n	1da14 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1d9fc:	4b17      	ldr	r3, [pc, #92]	; (1da5c <SerialConsoleWriteString+0x78>)
   1d9fe:	6818      	ldr	r0, [r3, #0]
   1da00:	687a      	ldr	r2, [r7, #4]
   1da02:	68fb      	ldr	r3, [r7, #12]
   1da04:	18d3      	adds	r3, r2, r3
   1da06:	781b      	ldrb	r3, [r3, #0]
   1da08:	0019      	movs	r1, r3
   1da0a:	4b15      	ldr	r3, [pc, #84]	; (1da60 <SerialConsoleWriteString+0x7c>)
   1da0c:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1da0e:	68fb      	ldr	r3, [r7, #12]
   1da10:	3301      	adds	r3, #1
   1da12:	60fb      	str	r3, [r7, #12]
   1da14:	687b      	ldr	r3, [r7, #4]
   1da16:	0018      	movs	r0, r3
   1da18:	4b12      	ldr	r3, [pc, #72]	; (1da64 <SerialConsoleWriteString+0x80>)
   1da1a:	4798      	blx	r3
   1da1c:	0002      	movs	r2, r0
   1da1e:	68fb      	ldr	r3, [r7, #12]
   1da20:	429a      	cmp	r2, r3
   1da22:	d8eb      	bhi.n	1d9fc <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1da24:	4b10      	ldr	r3, [pc, #64]	; (1da68 <SerialConsoleWriteString+0x84>)
   1da26:	2101      	movs	r1, #1
   1da28:	0018      	movs	r0, r3
   1da2a:	4b10      	ldr	r3, [pc, #64]	; (1da6c <SerialConsoleWriteString+0x88>)
   1da2c:	4798      	blx	r3
   1da2e:	1e03      	subs	r3, r0, #0
   1da30:	d10c      	bne.n	1da4c <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1da32:	4b0a      	ldr	r3, [pc, #40]	; (1da5c <SerialConsoleWriteString+0x78>)
   1da34:	681b      	ldr	r3, [r3, #0]
   1da36:	4a0e      	ldr	r2, [pc, #56]	; (1da70 <SerialConsoleWriteString+0x8c>)
   1da38:	0011      	movs	r1, r2
   1da3a:	0018      	movs	r0, r3
   1da3c:	4b0d      	ldr	r3, [pc, #52]	; (1da74 <SerialConsoleWriteString+0x90>)
   1da3e:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1da40:	490b      	ldr	r1, [pc, #44]	; (1da70 <SerialConsoleWriteString+0x8c>)
   1da42:	4b09      	ldr	r3, [pc, #36]	; (1da68 <SerialConsoleWriteString+0x84>)
   1da44:	2201      	movs	r2, #1
   1da46:	0018      	movs	r0, r3
   1da48:	4b0b      	ldr	r3, [pc, #44]	; (1da78 <SerialConsoleWriteString+0x94>)
   1da4a:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1da4c:	4b0b      	ldr	r3, [pc, #44]	; (1da7c <SerialConsoleWriteString+0x98>)
   1da4e:	4798      	blx	r3
}
   1da50:	46c0      	nop			; (mov r8, r8)
   1da52:	46bd      	mov	sp, r7
   1da54:	b004      	add	sp, #16
   1da56:	bd80      	pop	{r7, pc}
   1da58:	0001c051 	.word	0x0001c051
   1da5c:	200058c0 	.word	0x200058c0
   1da60:	0001d705 	.word	0x0001d705
   1da64:	000349e7 	.word	0x000349e7
   1da68:	20005480 	.word	0x20005480
   1da6c:	00028be9 	.word	0x00028be9
   1da70:	200058bc 	.word	0x200058bc
   1da74:	0001d739 	.word	0x0001d739
   1da78:	00028b59 	.word	0x00028b59
   1da7c:	0001c069 	.word	0x0001c069

0001da80 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1da80:	b580      	push	{r7, lr}
   1da82:	b084      	sub	sp, #16
   1da84:	af00      	add	r7, sp, #0
   1da86:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1da88:	4b08      	ldr	r3, [pc, #32]	; (1daac <SerialConsoleReadCharacter+0x2c>)
   1da8a:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1da8c:	4b08      	ldr	r3, [pc, #32]	; (1dab0 <SerialConsoleReadCharacter+0x30>)
   1da8e:	681b      	ldr	r3, [r3, #0]
   1da90:	687a      	ldr	r2, [r7, #4]
   1da92:	0011      	movs	r1, r2
   1da94:	0018      	movs	r0, r3
   1da96:	4b07      	ldr	r3, [pc, #28]	; (1dab4 <SerialConsoleReadCharacter+0x34>)
   1da98:	4798      	blx	r3
   1da9a:	0003      	movs	r3, r0
   1da9c:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1da9e:	4b06      	ldr	r3, [pc, #24]	; (1dab8 <SerialConsoleReadCharacter+0x38>)
   1daa0:	4798      	blx	r3
    return a;
   1daa2:	68fb      	ldr	r3, [r7, #12]
}
   1daa4:	0018      	movs	r0, r3
   1daa6:	46bd      	mov	sp, r7
   1daa8:	b004      	add	sp, #16
   1daaa:	bd80      	pop	{r7, pc}
   1daac:	0001c051 	.word	0x0001c051
   1dab0:	200054b4 	.word	0x200054b4
   1dab4:	0001d739 	.word	0x0001d739
   1dab8:	0001c069 	.word	0x0001c069

0001dabc <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1dabc:	b580      	push	{r7, lr}
   1dabe:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1dac0:	4b02      	ldr	r3, [pc, #8]	; (1dacc <getLogLevel+0x10>)
   1dac2:	781b      	ldrb	r3, [r3, #0]
}
   1dac4:	0018      	movs	r0, r3
   1dac6:	46bd      	mov	sp, r7
   1dac8:	bd80      	pop	{r7, pc}
   1daca:	46c0      	nop			; (mov r8, r8)
   1dacc:	2000409c 	.word	0x2000409c

0001dad0 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1dad0:	b40e      	push	{r1, r2, r3}
   1dad2:	b590      	push	{r4, r7, lr}
   1dad4:	b084      	sub	sp, #16
   1dad6:	af00      	add	r7, sp, #0
   1dad8:	0002      	movs	r2, r0
   1dada:	1dfb      	adds	r3, r7, #7
   1dadc:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1dade:	4b0e      	ldr	r3, [pc, #56]	; (1db18 <LogMessage+0x48>)
   1dae0:	4798      	blx	r3
   1dae2:	0003      	movs	r3, r0
   1dae4:	001a      	movs	r2, r3
   1dae6:	1dfb      	adds	r3, r7, #7
   1dae8:	781b      	ldrb	r3, [r3, #0]
   1daea:	4293      	cmp	r3, r2
   1daec:	d30c      	bcc.n	1db08 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1daee:	2320      	movs	r3, #32
   1daf0:	18fb      	adds	r3, r7, r3
   1daf2:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1daf4:	68fb      	ldr	r3, [r7, #12]
   1daf6:	69fa      	ldr	r2, [r7, #28]
   1daf8:	4808      	ldr	r0, [pc, #32]	; (1db1c <LogMessage+0x4c>)
   1dafa:	217f      	movs	r1, #127	; 0x7f
   1dafc:	4c08      	ldr	r4, [pc, #32]	; (1db20 <LogMessage+0x50>)
   1dafe:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1db00:	4b06      	ldr	r3, [pc, #24]	; (1db1c <LogMessage+0x4c>)
   1db02:	0018      	movs	r0, r3
   1db04:	4b07      	ldr	r3, [pc, #28]	; (1db24 <LogMessage+0x54>)
   1db06:	4798      	blx	r3
        va_end(ap);
    }
};
   1db08:	46c0      	nop			; (mov r8, r8)
   1db0a:	46bd      	mov	sp, r7
   1db0c:	b004      	add	sp, #16
   1db0e:	bc90      	pop	{r4, r7}
   1db10:	bc08      	pop	{r3}
   1db12:	b003      	add	sp, #12
   1db14:	4718      	bx	r3
   1db16:	46c0      	nop			; (mov r8, r8)
   1db18:	0001dabd 	.word	0x0001dabd
   1db1c:	20005400 	.word	0x20005400
   1db20:	00034c21 	.word	0x00034c21
   1db24:	0001d9e5 	.word	0x0001d9e5

0001db28 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1db28:	b40f      	push	{r0, r1, r2, r3}
   1db2a:	b580      	push	{r7, lr}
   1db2c:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1db2e:	68bb      	ldr	r3, [r7, #8]
   1db30:	0019      	movs	r1, r3
   1db32:	2001      	movs	r0, #1
   1db34:	4b03      	ldr	r3, [pc, #12]	; (1db44 <LogMessageDebug+0x1c>)
   1db36:	4798      	blx	r3
};
   1db38:	46c0      	nop			; (mov r8, r8)
   1db3a:	46bd      	mov	sp, r7
   1db3c:	bc80      	pop	{r7}
   1db3e:	bc08      	pop	{r3}
   1db40:	b004      	add	sp, #16
   1db42:	4718      	bx	r3
   1db44:	0001dad1 	.word	0x0001dad1

0001db48 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1db48:	b580      	push	{r7, lr}
   1db4a:	b090      	sub	sp, #64	; 0x40
   1db4c:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1db4e:	003b      	movs	r3, r7
   1db50:	0018      	movs	r0, r3
   1db52:	4b14      	ldr	r3, [pc, #80]	; (1dba4 <configure_usart+0x5c>)
   1db54:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1db56:	003b      	movs	r3, r7
   1db58:	22e1      	movs	r2, #225	; 0xe1
   1db5a:	0252      	lsls	r2, r2, #9
   1db5c:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1db5e:	003b      	movs	r3, r7
   1db60:	22c4      	movs	r2, #196	; 0xc4
   1db62:	0392      	lsls	r2, r2, #14
   1db64:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1db66:	003b      	movs	r3, r7
   1db68:	2201      	movs	r2, #1
   1db6a:	4252      	negs	r2, r2
   1db6c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1db6e:	003b      	movs	r3, r7
   1db70:	2201      	movs	r2, #1
   1db72:	4252      	negs	r2, r2
   1db74:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1db76:	003b      	movs	r3, r7
   1db78:	4a0b      	ldr	r2, [pc, #44]	; (1dba8 <configure_usart+0x60>)
   1db7a:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1db7c:	003b      	movs	r3, r7
   1db7e:	4a0b      	ldr	r2, [pc, #44]	; (1dbac <configure_usart+0x64>)
   1db80:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1db82:	46c0      	nop			; (mov r8, r8)
   1db84:	003a      	movs	r2, r7
   1db86:	490a      	ldr	r1, [pc, #40]	; (1dbb0 <configure_usart+0x68>)
   1db88:	4b0a      	ldr	r3, [pc, #40]	; (1dbb4 <configure_usart+0x6c>)
   1db8a:	0018      	movs	r0, r3
   1db8c:	4b0a      	ldr	r3, [pc, #40]	; (1dbb8 <configure_usart+0x70>)
   1db8e:	4798      	blx	r3
   1db90:	1e03      	subs	r3, r0, #0
   1db92:	d1f7      	bne.n	1db84 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1db94:	4b07      	ldr	r3, [pc, #28]	; (1dbb4 <configure_usart+0x6c>)
   1db96:	0018      	movs	r0, r3
   1db98:	4b08      	ldr	r3, [pc, #32]	; (1dbbc <configure_usart+0x74>)
   1db9a:	4798      	blx	r3
}
   1db9c:	46c0      	nop			; (mov r8, r8)
   1db9e:	46bd      	mov	sp, r7
   1dba0:	b010      	add	sp, #64	; 0x40
   1dba2:	bd80      	pop	{r7, pc}
   1dba4:	0001d835 	.word	0x0001d835
   1dba8:	002a0003 	.word	0x002a0003
   1dbac:	002b0003 	.word	0x002b0003
   1dbb0:	42001800 	.word	0x42001800
   1dbb4:	20005480 	.word	0x20005480
   1dbb8:	0002875d 	.word	0x0002875d
   1dbbc:	0001d8f5 	.word	0x0001d8f5

0001dbc0 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1dbc0:	b580      	push	{r7, lr}
   1dbc2:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1dbc4:	490c      	ldr	r1, [pc, #48]	; (1dbf8 <configure_usart_callbacks+0x38>)
   1dbc6:	4b0d      	ldr	r3, [pc, #52]	; (1dbfc <configure_usart_callbacks+0x3c>)
   1dbc8:	2200      	movs	r2, #0
   1dbca:	0018      	movs	r0, r3
   1dbcc:	4b0c      	ldr	r3, [pc, #48]	; (1dc00 <configure_usart_callbacks+0x40>)
   1dbce:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1dbd0:	490c      	ldr	r1, [pc, #48]	; (1dc04 <configure_usart_callbacks+0x44>)
   1dbd2:	4b0a      	ldr	r3, [pc, #40]	; (1dbfc <configure_usart_callbacks+0x3c>)
   1dbd4:	2201      	movs	r2, #1
   1dbd6:	0018      	movs	r0, r3
   1dbd8:	4b09      	ldr	r3, [pc, #36]	; (1dc00 <configure_usart_callbacks+0x40>)
   1dbda:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1dbdc:	4b07      	ldr	r3, [pc, #28]	; (1dbfc <configure_usart_callbacks+0x3c>)
   1dbde:	2100      	movs	r1, #0
   1dbe0:	0018      	movs	r0, r3
   1dbe2:	4b09      	ldr	r3, [pc, #36]	; (1dc08 <configure_usart_callbacks+0x48>)
   1dbe4:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1dbe6:	4b05      	ldr	r3, [pc, #20]	; (1dbfc <configure_usart_callbacks+0x3c>)
   1dbe8:	2101      	movs	r1, #1
   1dbea:	0018      	movs	r0, r3
   1dbec:	4b06      	ldr	r3, [pc, #24]	; (1dc08 <configure_usart_callbacks+0x48>)
   1dbee:	4798      	blx	r3
}
   1dbf0:	46c0      	nop			; (mov r8, r8)
   1dbf2:	46bd      	mov	sp, r7
   1dbf4:	bd80      	pop	{r7, pc}
   1dbf6:	46c0      	nop			; (mov r8, r8)
   1dbf8:	0001dc55 	.word	0x0001dc55
   1dbfc:	20005480 	.word	0x20005480
   1dc00:	00028b11 	.word	0x00028b11
   1dc04:	0001dc0d 	.word	0x0001dc0d
   1dc08:	0001d93d 	.word	0x0001d93d

0001dc0c <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1dc0c:	b580      	push	{r7, lr}
   1dc0e:	b082      	sub	sp, #8
   1dc10:	af00      	add	r7, sp, #0
   1dc12:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1dc14:	4b09      	ldr	r3, [pc, #36]	; (1dc3c <usart_read_callback+0x30>)
   1dc16:	681a      	ldr	r2, [r3, #0]
   1dc18:	4b09      	ldr	r3, [pc, #36]	; (1dc40 <usart_read_callback+0x34>)
   1dc1a:	781b      	ldrb	r3, [r3, #0]
   1dc1c:	0019      	movs	r1, r3
   1dc1e:	0010      	movs	r0, r2
   1dc20:	4b08      	ldr	r3, [pc, #32]	; (1dc44 <usart_read_callback+0x38>)
   1dc22:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1dc24:	4906      	ldr	r1, [pc, #24]	; (1dc40 <usart_read_callback+0x34>)
   1dc26:	4b08      	ldr	r3, [pc, #32]	; (1dc48 <usart_read_callback+0x3c>)
   1dc28:	2201      	movs	r2, #1
   1dc2a:	0018      	movs	r0, r3
   1dc2c:	4b07      	ldr	r3, [pc, #28]	; (1dc4c <usart_read_callback+0x40>)
   1dc2e:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1dc30:	4b07      	ldr	r3, [pc, #28]	; (1dc50 <usart_read_callback+0x44>)
   1dc32:	4798      	blx	r3
}
   1dc34:	46c0      	nop			; (mov r8, r8)
   1dc36:	46bd      	mov	sp, r7
   1dc38:	b002      	add	sp, #8
   1dc3a:	bd80      	pop	{r7, pc}
   1dc3c:	200054b4 	.word	0x200054b4
   1dc40:	200054b8 	.word	0x200054b8
   1dc44:	0001d705 	.word	0x0001d705
   1dc48:	20005480 	.word	0x20005480
   1dc4c:	00028ba1 	.word	0x00028ba1
   1dc50:	000131c9 	.word	0x000131c9

0001dc54 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1dc54:	b580      	push	{r7, lr}
   1dc56:	b082      	sub	sp, #8
   1dc58:	af00      	add	r7, sp, #0
   1dc5a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1dc5c:	4b09      	ldr	r3, [pc, #36]	; (1dc84 <usart_write_callback+0x30>)
   1dc5e:	681b      	ldr	r3, [r3, #0]
   1dc60:	4a09      	ldr	r2, [pc, #36]	; (1dc88 <usart_write_callback+0x34>)
   1dc62:	0011      	movs	r1, r2
   1dc64:	0018      	movs	r0, r3
   1dc66:	4b09      	ldr	r3, [pc, #36]	; (1dc8c <usart_write_callback+0x38>)
   1dc68:	4798      	blx	r3
   1dc6a:	0003      	movs	r3, r0
   1dc6c:	3301      	adds	r3, #1
   1dc6e:	d005      	beq.n	1dc7c <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1dc70:	4905      	ldr	r1, [pc, #20]	; (1dc88 <usart_write_callback+0x34>)
   1dc72:	4b07      	ldr	r3, [pc, #28]	; (1dc90 <usart_write_callback+0x3c>)
   1dc74:	2201      	movs	r2, #1
   1dc76:	0018      	movs	r0, r3
   1dc78:	4b06      	ldr	r3, [pc, #24]	; (1dc94 <usart_write_callback+0x40>)
   1dc7a:	4798      	blx	r3
    }
}
   1dc7c:	46c0      	nop			; (mov r8, r8)
   1dc7e:	46bd      	mov	sp, r7
   1dc80:	b002      	add	sp, #8
   1dc82:	bd80      	pop	{r7, pc}
   1dc84:	200058c0 	.word	0x200058c0
   1dc88:	200058bc 	.word	0x200058bc
   1dc8c:	0001d739 	.word	0x0001d739
   1dc90:	20005480 	.word	0x20005480
   1dc94:	00028b59 	.word	0x00028b59

0001dc98 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1dc98:	b590      	push	{r4, r7, lr}
   1dc9a:	b087      	sub	sp, #28
   1dc9c:	af00      	add	r7, sp, #0
   1dc9e:	60f8      	str	r0, [r7, #12]
   1dca0:	000c      	movs	r4, r1
   1dca2:	0010      	movs	r0, r2
   1dca4:	0019      	movs	r1, r3
   1dca6:	230a      	movs	r3, #10
   1dca8:	18fb      	adds	r3, r7, r3
   1dcaa:	1c22      	adds	r2, r4, #0
   1dcac:	801a      	strh	r2, [r3, #0]
   1dcae:	2308      	movs	r3, #8
   1dcb0:	18fb      	adds	r3, r7, r3
   1dcb2:	1c02      	adds	r2, r0, #0
   1dcb4:	801a      	strh	r2, [r3, #0]
   1dcb6:	1dfb      	adds	r3, r7, #7
   1dcb8:	1c0a      	adds	r2, r1, #0
   1dcba:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1dcbc:	230a      	movs	r3, #10
   1dcbe:	18fb      	adds	r3, r7, r3
   1dcc0:	881a      	ldrh	r2, [r3, #0]
   1dcc2:	2308      	movs	r3, #8
   1dcc4:	18fb      	adds	r3, r7, r3
   1dcc6:	881b      	ldrh	r3, [r3, #0]
   1dcc8:	1ad3      	subs	r3, r2, r3
   1dcca:	3307      	adds	r3, #7
   1dccc:	2b00      	cmp	r3, #0
   1dcce:	da00      	bge.n	1dcd2 <SDMMC_UNSTUFF_BITS+0x3a>
   1dcd0:	3307      	adds	r3, #7
   1dcd2:	10db      	asrs	r3, r3, #3
   1dcd4:	3b01      	subs	r3, #1
   1dcd6:	68fa      	ldr	r2, [r7, #12]
   1dcd8:	18d3      	adds	r3, r2, r3
   1dcda:	781b      	ldrb	r3, [r3, #0]
   1dcdc:	0019      	movs	r1, r3
   1dcde:	2308      	movs	r3, #8
   1dce0:	18fb      	adds	r3, r7, r3
   1dce2:	881b      	ldrh	r3, [r3, #0]
   1dce4:	2207      	movs	r2, #7
   1dce6:	4013      	ands	r3, r2
   1dce8:	4119      	asrs	r1, r3
   1dcea:	000b      	movs	r3, r1
   1dcec:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1dcee:	2308      	movs	r3, #8
   1dcf0:	18fb      	adds	r3, r7, r3
   1dcf2:	881b      	ldrh	r3, [r3, #0]
   1dcf4:	2207      	movs	r2, #7
   1dcf6:	401a      	ands	r2, r3
   1dcf8:	1dfb      	adds	r3, r7, #7
   1dcfa:	781b      	ldrb	r3, [r3, #0]
   1dcfc:	18d3      	adds	r3, r2, r3
   1dcfe:	2b08      	cmp	r3, #8
   1dd00:	dd1c      	ble.n	1dd3c <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1dd02:	230a      	movs	r3, #10
   1dd04:	18fb      	adds	r3, r7, r3
   1dd06:	881a      	ldrh	r2, [r3, #0]
   1dd08:	2308      	movs	r3, #8
   1dd0a:	18fb      	adds	r3, r7, r3
   1dd0c:	881b      	ldrh	r3, [r3, #0]
   1dd0e:	1ad3      	subs	r3, r2, r3
   1dd10:	3307      	adds	r3, #7
   1dd12:	2b00      	cmp	r3, #0
   1dd14:	da00      	bge.n	1dd18 <SDMMC_UNSTUFF_BITS+0x80>
   1dd16:	3307      	adds	r3, #7
   1dd18:	10db      	asrs	r3, r3, #3
   1dd1a:	3b02      	subs	r3, #2
   1dd1c:	68fa      	ldr	r2, [r7, #12]
   1dd1e:	18d3      	adds	r3, r2, r3
   1dd20:	781b      	ldrb	r3, [r3, #0]
   1dd22:	0019      	movs	r1, r3
   1dd24:	2308      	movs	r3, #8
   1dd26:	18fb      	adds	r3, r7, r3
   1dd28:	881b      	ldrh	r3, [r3, #0]
   1dd2a:	2207      	movs	r2, #7
   1dd2c:	4013      	ands	r3, r2
   1dd2e:	2208      	movs	r2, #8
   1dd30:	1ad3      	subs	r3, r2, r3
   1dd32:	4099      	lsls	r1, r3
   1dd34:	000b      	movs	r3, r1
   1dd36:	697a      	ldr	r2, [r7, #20]
   1dd38:	4313      	orrs	r3, r2
   1dd3a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1dd3c:	2308      	movs	r3, #8
   1dd3e:	18fb      	adds	r3, r7, r3
   1dd40:	881b      	ldrh	r3, [r3, #0]
   1dd42:	2207      	movs	r2, #7
   1dd44:	401a      	ands	r2, r3
   1dd46:	1dfb      	adds	r3, r7, #7
   1dd48:	781b      	ldrb	r3, [r3, #0]
   1dd4a:	18d3      	adds	r3, r2, r3
   1dd4c:	2b10      	cmp	r3, #16
   1dd4e:	dd1c      	ble.n	1dd8a <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1dd50:	230a      	movs	r3, #10
   1dd52:	18fb      	adds	r3, r7, r3
   1dd54:	881a      	ldrh	r2, [r3, #0]
   1dd56:	2308      	movs	r3, #8
   1dd58:	18fb      	adds	r3, r7, r3
   1dd5a:	881b      	ldrh	r3, [r3, #0]
   1dd5c:	1ad3      	subs	r3, r2, r3
   1dd5e:	3307      	adds	r3, #7
   1dd60:	2b00      	cmp	r3, #0
   1dd62:	da00      	bge.n	1dd66 <SDMMC_UNSTUFF_BITS+0xce>
   1dd64:	3307      	adds	r3, #7
   1dd66:	10db      	asrs	r3, r3, #3
   1dd68:	3b03      	subs	r3, #3
   1dd6a:	68fa      	ldr	r2, [r7, #12]
   1dd6c:	18d3      	adds	r3, r2, r3
   1dd6e:	781b      	ldrb	r3, [r3, #0]
   1dd70:	0019      	movs	r1, r3
   1dd72:	2308      	movs	r3, #8
   1dd74:	18fb      	adds	r3, r7, r3
   1dd76:	881b      	ldrh	r3, [r3, #0]
   1dd78:	2207      	movs	r2, #7
   1dd7a:	4013      	ands	r3, r2
   1dd7c:	2210      	movs	r2, #16
   1dd7e:	1ad3      	subs	r3, r2, r3
   1dd80:	4099      	lsls	r1, r3
   1dd82:	000b      	movs	r3, r1
   1dd84:	697a      	ldr	r2, [r7, #20]
   1dd86:	4313      	orrs	r3, r2
   1dd88:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1dd8a:	2308      	movs	r3, #8
   1dd8c:	18fb      	adds	r3, r7, r3
   1dd8e:	881b      	ldrh	r3, [r3, #0]
   1dd90:	2207      	movs	r2, #7
   1dd92:	401a      	ands	r2, r3
   1dd94:	1dfb      	adds	r3, r7, #7
   1dd96:	781b      	ldrb	r3, [r3, #0]
   1dd98:	18d3      	adds	r3, r2, r3
   1dd9a:	2b10      	cmp	r3, #16
   1dd9c:	dd1c      	ble.n	1ddd8 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1dd9e:	230a      	movs	r3, #10
   1dda0:	18fb      	adds	r3, r7, r3
   1dda2:	881a      	ldrh	r2, [r3, #0]
   1dda4:	2308      	movs	r3, #8
   1dda6:	18fb      	adds	r3, r7, r3
   1dda8:	881b      	ldrh	r3, [r3, #0]
   1ddaa:	1ad3      	subs	r3, r2, r3
   1ddac:	3307      	adds	r3, #7
   1ddae:	2b00      	cmp	r3, #0
   1ddb0:	da00      	bge.n	1ddb4 <SDMMC_UNSTUFF_BITS+0x11c>
   1ddb2:	3307      	adds	r3, #7
   1ddb4:	10db      	asrs	r3, r3, #3
   1ddb6:	3b03      	subs	r3, #3
   1ddb8:	68fa      	ldr	r2, [r7, #12]
   1ddba:	18d3      	adds	r3, r2, r3
   1ddbc:	781b      	ldrb	r3, [r3, #0]
   1ddbe:	0019      	movs	r1, r3
   1ddc0:	2308      	movs	r3, #8
   1ddc2:	18fb      	adds	r3, r7, r3
   1ddc4:	881b      	ldrh	r3, [r3, #0]
   1ddc6:	2207      	movs	r2, #7
   1ddc8:	4013      	ands	r3, r2
   1ddca:	2210      	movs	r2, #16
   1ddcc:	1ad3      	subs	r3, r2, r3
   1ddce:	4099      	lsls	r1, r3
   1ddd0:	000b      	movs	r3, r1
   1ddd2:	697a      	ldr	r2, [r7, #20]
   1ddd4:	4313      	orrs	r3, r2
   1ddd6:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1ddd8:	1dfb      	adds	r3, r7, #7
   1ddda:	781b      	ldrb	r3, [r3, #0]
   1dddc:	2201      	movs	r2, #1
   1ddde:	409a      	lsls	r2, r3
   1dde0:	0013      	movs	r3, r2
   1dde2:	1e5a      	subs	r2, r3, #1
   1dde4:	697b      	ldr	r3, [r7, #20]
   1dde6:	4013      	ands	r3, r2
   1dde8:	617b      	str	r3, [r7, #20]
	return value;
   1ddea:	697b      	ldr	r3, [r7, #20]
}
   1ddec:	0018      	movs	r0, r3
   1ddee:	46bd      	mov	sp, r7
   1ddf0:	b007      	add	sp, #28
   1ddf2:	bd90      	pop	{r4, r7, pc}

0001ddf4 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1ddf4:	b580      	push	{r7, lr}
   1ddf6:	b082      	sub	sp, #8
   1ddf8:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1ddfa:	4b23      	ldr	r3, [pc, #140]	; (1de88 <mmc_spi_op_cond+0x94>)
   1ddfc:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1ddfe:	4b23      	ldr	r3, [pc, #140]	; (1de8c <mmc_spi_op_cond+0x98>)
   1de00:	2100      	movs	r1, #0
   1de02:	0018      	movs	r0, r3
   1de04:	4b22      	ldr	r3, [pc, #136]	; (1de90 <mmc_spi_op_cond+0x9c>)
   1de06:	4798      	blx	r3
   1de08:	0003      	movs	r3, r0
   1de0a:	001a      	movs	r2, r3
   1de0c:	2301      	movs	r3, #1
   1de0e:	4053      	eors	r3, r2
   1de10:	b2db      	uxtb	r3, r3
   1de12:	2b00      	cmp	r3, #0
   1de14:	d001      	beq.n	1de1a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1de16:	2300      	movs	r3, #0
   1de18:	e031      	b.n	1de7e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1de1a:	4b1e      	ldr	r3, [pc, #120]	; (1de94 <mmc_spi_op_cond+0xa0>)
   1de1c:	4798      	blx	r3
   1de1e:	0003      	movs	r3, r0
   1de20:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1de22:	683b      	ldr	r3, [r7, #0]
   1de24:	2201      	movs	r2, #1
   1de26:	4013      	ands	r3, r2
   1de28:	d006      	beq.n	1de38 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1de2a:	687b      	ldr	r3, [r7, #4]
   1de2c:	1e5a      	subs	r2, r3, #1
   1de2e:	607a      	str	r2, [r7, #4]
   1de30:	2b00      	cmp	r3, #0
   1de32:	d1e4      	bne.n	1ddfe <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1de34:	2300      	movs	r3, #0
   1de36:	e022      	b.n	1de7e <mmc_spi_op_cond+0x8a>
			break;
   1de38:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1de3a:	4b17      	ldr	r3, [pc, #92]	; (1de98 <mmc_spi_op_cond+0xa4>)
   1de3c:	2100      	movs	r1, #0
   1de3e:	0018      	movs	r0, r3
   1de40:	4b13      	ldr	r3, [pc, #76]	; (1de90 <mmc_spi_op_cond+0x9c>)
   1de42:	4798      	blx	r3
   1de44:	0003      	movs	r3, r0
   1de46:	001a      	movs	r2, r3
   1de48:	2301      	movs	r3, #1
   1de4a:	4053      	eors	r3, r2
   1de4c:	b2db      	uxtb	r3, r3
   1de4e:	2b00      	cmp	r3, #0
   1de50:	d001      	beq.n	1de56 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1de52:	2300      	movs	r3, #0
   1de54:	e013      	b.n	1de7e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1de56:	4b0f      	ldr	r3, [pc, #60]	; (1de94 <mmc_spi_op_cond+0xa0>)
   1de58:	4798      	blx	r3
   1de5a:	0002      	movs	r2, r0
   1de5c:	23c0      	movs	r3, #192	; 0xc0
   1de5e:	05db      	lsls	r3, r3, #23
   1de60:	401a      	ands	r2, r3
   1de62:	2380      	movs	r3, #128	; 0x80
   1de64:	05db      	lsls	r3, r3, #23
   1de66:	429a      	cmp	r2, r3
   1de68:	d108      	bne.n	1de7c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1de6a:	4b0c      	ldr	r3, [pc, #48]	; (1de9c <mmc_spi_op_cond+0xa8>)
   1de6c:	681a      	ldr	r2, [r3, #0]
   1de6e:	4b0b      	ldr	r3, [pc, #44]	; (1de9c <mmc_spi_op_cond+0xa8>)
   1de70:	681b      	ldr	r3, [r3, #0]
   1de72:	7adb      	ldrb	r3, [r3, #11]
   1de74:	2108      	movs	r1, #8
   1de76:	430b      	orrs	r3, r1
   1de78:	b2db      	uxtb	r3, r3
   1de7a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1de7c:	2301      	movs	r3, #1
}
   1de7e:	0018      	movs	r0, r3
   1de80:	46bd      	mov	sp, r7
   1de82:	b002      	add	sp, #8
   1de84:	bd80      	pop	{r7, pc}
   1de86:	46c0      	nop			; (mov r8, r8)
   1de88:	00001bee 	.word	0x00001bee
   1de8c:	00001101 	.word	0x00001101
   1de90:	0001f871 	.word	0x0001f871
   1de94:	0001fab1 	.word	0x0001fab1
   1de98:	0000053a 	.word	0x0000053a
   1de9c:	200040c4 	.word	0x200040c4

0001dea0 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1dea0:	b580      	push	{r7, lr}
   1dea2:	b086      	sub	sp, #24
   1dea4:	af00      	add	r7, sp, #0
   1dea6:	0002      	movs	r2, r0
   1dea8:	1dfb      	adds	r3, r7, #7
   1deaa:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1deac:	4b2e      	ldr	r3, [pc, #184]	; (1df68 <sd_spi_op_cond+0xc8>)
   1deae:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1deb0:	4b2e      	ldr	r3, [pc, #184]	; (1df6c <sd_spi_op_cond+0xcc>)
   1deb2:	2100      	movs	r1, #0
   1deb4:	0018      	movs	r0, r3
   1deb6:	4b2e      	ldr	r3, [pc, #184]	; (1df70 <sd_spi_op_cond+0xd0>)
   1deb8:	4798      	blx	r3
   1deba:	0003      	movs	r3, r0
   1debc:	001a      	movs	r2, r3
   1debe:	2301      	movs	r3, #1
   1dec0:	4053      	eors	r3, r2
   1dec2:	b2db      	uxtb	r3, r3
   1dec4:	2b00      	cmp	r3, #0
   1dec6:	d001      	beq.n	1decc <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1dec8:	2300      	movs	r3, #0
   1deca:	e048      	b.n	1df5e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1decc:	2300      	movs	r3, #0
   1dece:	617b      	str	r3, [r7, #20]
		if (v2) {
   1ded0:	1dfb      	adds	r3, r7, #7
   1ded2:	781b      	ldrb	r3, [r3, #0]
   1ded4:	2b00      	cmp	r3, #0
   1ded6:	d004      	beq.n	1dee2 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1ded8:	697b      	ldr	r3, [r7, #20]
   1deda:	2280      	movs	r2, #128	; 0x80
   1dedc:	05d2      	lsls	r2, r2, #23
   1dede:	4313      	orrs	r3, r2
   1dee0:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1dee2:	697b      	ldr	r3, [r7, #20]
   1dee4:	4a23      	ldr	r2, [pc, #140]	; (1df74 <sd_spi_op_cond+0xd4>)
   1dee6:	0019      	movs	r1, r3
   1dee8:	0010      	movs	r0, r2
   1deea:	4b21      	ldr	r3, [pc, #132]	; (1df70 <sd_spi_op_cond+0xd0>)
   1deec:	4798      	blx	r3
   1deee:	0003      	movs	r3, r0
   1def0:	001a      	movs	r2, r3
   1def2:	2301      	movs	r3, #1
   1def4:	4053      	eors	r3, r2
   1def6:	b2db      	uxtb	r3, r3
   1def8:	2b00      	cmp	r3, #0
   1defa:	d001      	beq.n	1df00 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1defc:	2300      	movs	r3, #0
   1defe:	e02e      	b.n	1df5e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1df00:	4b1d      	ldr	r3, [pc, #116]	; (1df78 <sd_spi_op_cond+0xd8>)
   1df02:	4798      	blx	r3
   1df04:	0003      	movs	r3, r0
   1df06:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1df08:	68fb      	ldr	r3, [r7, #12]
   1df0a:	2201      	movs	r2, #1
   1df0c:	4013      	ands	r3, r2
   1df0e:	d006      	beq.n	1df1e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1df10:	693b      	ldr	r3, [r7, #16]
   1df12:	1e5a      	subs	r2, r3, #1
   1df14:	613a      	str	r2, [r7, #16]
   1df16:	2b00      	cmp	r3, #0
   1df18:	d1ca      	bne.n	1deb0 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1df1a:	2300      	movs	r3, #0
   1df1c:	e01f      	b.n	1df5e <sd_spi_op_cond+0xbe>
			break;
   1df1e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1df20:	4b16      	ldr	r3, [pc, #88]	; (1df7c <sd_spi_op_cond+0xdc>)
   1df22:	2100      	movs	r1, #0
   1df24:	0018      	movs	r0, r3
   1df26:	4b12      	ldr	r3, [pc, #72]	; (1df70 <sd_spi_op_cond+0xd0>)
   1df28:	4798      	blx	r3
   1df2a:	0003      	movs	r3, r0
   1df2c:	001a      	movs	r2, r3
   1df2e:	2301      	movs	r3, #1
   1df30:	4053      	eors	r3, r2
   1df32:	b2db      	uxtb	r3, r3
   1df34:	2b00      	cmp	r3, #0
   1df36:	d001      	beq.n	1df3c <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1df38:	2300      	movs	r3, #0
   1df3a:	e010      	b.n	1df5e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1df3c:	4b0e      	ldr	r3, [pc, #56]	; (1df78 <sd_spi_op_cond+0xd8>)
   1df3e:	4798      	blx	r3
   1df40:	0002      	movs	r2, r0
   1df42:	2380      	movs	r3, #128	; 0x80
   1df44:	05db      	lsls	r3, r3, #23
   1df46:	4013      	ands	r3, r2
   1df48:	d008      	beq.n	1df5c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1df4a:	4b0d      	ldr	r3, [pc, #52]	; (1df80 <sd_spi_op_cond+0xe0>)
   1df4c:	681a      	ldr	r2, [r3, #0]
   1df4e:	4b0c      	ldr	r3, [pc, #48]	; (1df80 <sd_spi_op_cond+0xe0>)
   1df50:	681b      	ldr	r3, [r3, #0]
   1df52:	7adb      	ldrb	r3, [r3, #11]
   1df54:	2108      	movs	r1, #8
   1df56:	430b      	orrs	r3, r1
   1df58:	b2db      	uxtb	r3, r3
   1df5a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1df5c:	2301      	movs	r3, #1
}
   1df5e:	0018      	movs	r0, r3
   1df60:	46bd      	mov	sp, r7
   1df62:	b006      	add	sp, #24
   1df64:	bd80      	pop	{r7, pc}
   1df66:	46c0      	nop			; (mov r8, r8)
   1df68:	00001bee 	.word	0x00001bee
   1df6c:	00001137 	.word	0x00001137
   1df70:	0001f871 	.word	0x0001f871
   1df74:	00001129 	.word	0x00001129
   1df78:	0001fab1 	.word	0x0001fab1
   1df7c:	0000053a 	.word	0x0000053a
   1df80:	200040c4 	.word	0x200040c4

0001df84 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1df84:	b580      	push	{r7, lr}
   1df86:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1df88:	2301      	movs	r3, #1
}
   1df8a:	0018      	movs	r0, r3
   1df8c:	46bd      	mov	sp, r7
   1df8e:	bd80      	pop	{r7, pc}

0001df90 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1df90:	b580      	push	{r7, lr}
   1df92:	b084      	sub	sp, #16
   1df94:	af00      	add	r7, sp, #0
   1df96:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1df98:	687b      	ldr	r3, [r7, #4]
   1df9a:	2200      	movs	r2, #0
   1df9c:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1df9e:	23d5      	movs	r3, #213	; 0xd5
   1dfa0:	005b      	lsls	r3, r3, #1
   1dfa2:	4a14      	ldr	r2, [pc, #80]	; (1dff4 <sd_cmd8+0x64>)
   1dfa4:	0019      	movs	r1, r3
   1dfa6:	0010      	movs	r0, r2
   1dfa8:	4b13      	ldr	r3, [pc, #76]	; (1dff8 <sd_cmd8+0x68>)
   1dfaa:	4798      	blx	r3
   1dfac:	0003      	movs	r3, r0
   1dfae:	001a      	movs	r2, r3
   1dfb0:	2301      	movs	r3, #1
   1dfb2:	4053      	eors	r3, r2
   1dfb4:	b2db      	uxtb	r3, r3
   1dfb6:	2b00      	cmp	r3, #0
   1dfb8:	d001      	beq.n	1dfbe <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1dfba:	2301      	movs	r3, #1
   1dfbc:	e015      	b.n	1dfea <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1dfbe:	4b0f      	ldr	r3, [pc, #60]	; (1dffc <sd_cmd8+0x6c>)
   1dfc0:	4798      	blx	r3
   1dfc2:	0003      	movs	r3, r0
   1dfc4:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1dfc6:	68fb      	ldr	r3, [r7, #12]
   1dfc8:	3301      	adds	r3, #1
   1dfca:	d101      	bne.n	1dfd0 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1dfcc:	2301      	movs	r3, #1
   1dfce:	e00c      	b.n	1dfea <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1dfd0:	68fb      	ldr	r3, [r7, #12]
   1dfd2:	051b      	lsls	r3, r3, #20
   1dfd4:	0d1a      	lsrs	r2, r3, #20
   1dfd6:	23d5      	movs	r3, #213	; 0xd5
   1dfd8:	005b      	lsls	r3, r3, #1
   1dfda:	429a      	cmp	r2, r3
   1dfdc:	d001      	beq.n	1dfe2 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1dfde:	2300      	movs	r3, #0
   1dfe0:	e003      	b.n	1dfea <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1dfe2:	687b      	ldr	r3, [r7, #4]
   1dfe4:	2201      	movs	r2, #1
   1dfe6:	701a      	strb	r2, [r3, #0]
	return true;
   1dfe8:	2301      	movs	r3, #1
}
   1dfea:	0018      	movs	r0, r3
   1dfec:	46bd      	mov	sp, r7
   1dfee:	b004      	add	sp, #16
   1dff0:	bd80      	pop	{r7, pc}
   1dff2:	46c0      	nop			; (mov r8, r8)
   1dff4:	00005508 	.word	0x00005508
   1dff8:	0001f871 	.word	0x0001f871
   1dffc:	0001fab1 	.word	0x0001fab1

0001e000 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1e000:	b590      	push	{r4, r7, lr}
   1e002:	b089      	sub	sp, #36	; 0x24
   1e004:	af02      	add	r7, sp, #8
   1e006:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1e008:	2380      	movs	r3, #128	; 0x80
   1e00a:	009a      	lsls	r2, r3, #2
   1e00c:	4841      	ldr	r0, [pc, #260]	; (1e114 <mmc_cmd8+0x114>)
   1e00e:	2300      	movs	r3, #0
   1e010:	9300      	str	r3, [sp, #0]
   1e012:	2301      	movs	r3, #1
   1e014:	2100      	movs	r1, #0
   1e016:	4c40      	ldr	r4, [pc, #256]	; (1e118 <mmc_cmd8+0x118>)
   1e018:	47a0      	blx	r4
   1e01a:	0003      	movs	r3, r0
   1e01c:	001a      	movs	r2, r3
   1e01e:	2301      	movs	r3, #1
   1e020:	4053      	eors	r3, r2
   1e022:	b2db      	uxtb	r3, r3
   1e024:	2b00      	cmp	r3, #0
   1e026:	d001      	beq.n	1e02c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1e028:	2300      	movs	r3, #0
   1e02a:	e06e      	b.n	1e10a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1e02c:	2316      	movs	r3, #22
   1e02e:	18fb      	adds	r3, r7, r3
   1e030:	2200      	movs	r2, #0
   1e032:	801a      	strh	r2, [r3, #0]
   1e034:	e014      	b.n	1e060 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1e036:	2310      	movs	r3, #16
   1e038:	18fb      	adds	r3, r7, r3
   1e03a:	0018      	movs	r0, r3
   1e03c:	4b37      	ldr	r3, [pc, #220]	; (1e11c <mmc_cmd8+0x11c>)
   1e03e:	4798      	blx	r3
   1e040:	0003      	movs	r3, r0
   1e042:	001a      	movs	r2, r3
   1e044:	2301      	movs	r3, #1
   1e046:	4053      	eors	r3, r2
   1e048:	b2db      	uxtb	r3, r3
   1e04a:	2b00      	cmp	r3, #0
   1e04c:	d001      	beq.n	1e052 <mmc_cmd8+0x52>
			return false;
   1e04e:	2300      	movs	r3, #0
   1e050:	e05b      	b.n	1e10a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1e052:	2316      	movs	r3, #22
   1e054:	18fb      	adds	r3, r7, r3
   1e056:	881a      	ldrh	r2, [r3, #0]
   1e058:	2316      	movs	r3, #22
   1e05a:	18fb      	adds	r3, r7, r3
   1e05c:	3201      	adds	r2, #1
   1e05e:	801a      	strh	r2, [r3, #0]
   1e060:	2316      	movs	r3, #22
   1e062:	18fb      	adds	r3, r7, r3
   1e064:	881b      	ldrh	r3, [r3, #0]
   1e066:	2b31      	cmp	r3, #49	; 0x31
   1e068:	d9e5      	bls.n	1e036 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1e06a:	693b      	ldr	r3, [r7, #16]
   1e06c:	b2db      	uxtb	r3, r3
   1e06e:	2202      	movs	r2, #2
   1e070:	4013      	ands	r3, r2
   1e072:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1e074:	687b      	ldr	r3, [r7, #4]
   1e076:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1e078:	4b29      	ldr	r3, [pc, #164]	; (1e120 <mmc_cmd8+0x120>)
   1e07a:	681b      	ldr	r3, [r3, #0]
   1e07c:	330e      	adds	r3, #14
   1e07e:	0018      	movs	r0, r3
   1e080:	230c      	movs	r3, #12
   1e082:	223e      	movs	r2, #62	; 0x3e
   1e084:	2180      	movs	r1, #128	; 0x80
   1e086:	4c27      	ldr	r4, [pc, #156]	; (1e124 <mmc_cmd8+0x124>)
   1e088:	47a0      	blx	r4
   1e08a:	0002      	movs	r2, r0
   1e08c:	4b26      	ldr	r3, [pc, #152]	; (1e128 <mmc_cmd8+0x128>)
   1e08e:	429a      	cmp	r2, r3
   1e090:	d135      	bne.n	1e0fe <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1e092:	e014      	b.n	1e0be <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1e094:	230c      	movs	r3, #12
   1e096:	18fb      	adds	r3, r7, r3
   1e098:	0018      	movs	r0, r3
   1e09a:	4b20      	ldr	r3, [pc, #128]	; (1e11c <mmc_cmd8+0x11c>)
   1e09c:	4798      	blx	r3
   1e09e:	0003      	movs	r3, r0
   1e0a0:	001a      	movs	r2, r3
   1e0a2:	2301      	movs	r3, #1
   1e0a4:	4053      	eors	r3, r2
   1e0a6:	b2db      	uxtb	r3, r3
   1e0a8:	2b00      	cmp	r3, #0
   1e0aa:	d001      	beq.n	1e0b0 <mmc_cmd8+0xb0>
				return false;
   1e0ac:	2300      	movs	r3, #0
   1e0ae:	e02c      	b.n	1e10a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1e0b0:	2316      	movs	r3, #22
   1e0b2:	18fb      	adds	r3, r7, r3
   1e0b4:	881a      	ldrh	r2, [r3, #0]
   1e0b6:	2316      	movs	r3, #22
   1e0b8:	18fb      	adds	r3, r7, r3
   1e0ba:	3201      	adds	r2, #1
   1e0bc:	801a      	strh	r2, [r3, #0]
   1e0be:	2316      	movs	r3, #22
   1e0c0:	18fb      	adds	r3, r7, r3
   1e0c2:	881b      	ldrh	r3, [r3, #0]
   1e0c4:	2b35      	cmp	r3, #53	; 0x35
   1e0c6:	d9e5      	bls.n	1e094 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1e0c8:	4b15      	ldr	r3, [pc, #84]	; (1e120 <mmc_cmd8+0x120>)
   1e0ca:	681b      	ldr	r3, [r3, #0]
   1e0cc:	68fa      	ldr	r2, [r7, #12]
   1e0ce:	0852      	lsrs	r2, r2, #1
   1e0d0:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1e0d2:	e014      	b.n	1e0fe <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1e0d4:	230c      	movs	r3, #12
   1e0d6:	18fb      	adds	r3, r7, r3
   1e0d8:	0018      	movs	r0, r3
   1e0da:	4b10      	ldr	r3, [pc, #64]	; (1e11c <mmc_cmd8+0x11c>)
   1e0dc:	4798      	blx	r3
   1e0de:	0003      	movs	r3, r0
   1e0e0:	001a      	movs	r2, r3
   1e0e2:	2301      	movs	r3, #1
   1e0e4:	4053      	eors	r3, r2
   1e0e6:	b2db      	uxtb	r3, r3
   1e0e8:	2b00      	cmp	r3, #0
   1e0ea:	d001      	beq.n	1e0f0 <mmc_cmd8+0xf0>
			return false;
   1e0ec:	2300      	movs	r3, #0
   1e0ee:	e00c      	b.n	1e10a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1e0f0:	2316      	movs	r3, #22
   1e0f2:	18fb      	adds	r3, r7, r3
   1e0f4:	881a      	ldrh	r2, [r3, #0]
   1e0f6:	2316      	movs	r3, #22
   1e0f8:	18fb      	adds	r3, r7, r3
   1e0fa:	3201      	adds	r2, #1
   1e0fc:	801a      	strh	r2, [r3, #0]
   1e0fe:	2316      	movs	r3, #22
   1e100:	18fb      	adds	r3, r7, r3
   1e102:	881b      	ldrh	r3, [r3, #0]
   1e104:	2b7f      	cmp	r3, #127	; 0x7f
   1e106:	d9e5      	bls.n	1e0d4 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1e108:	2301      	movs	r3, #1
}
   1e10a:	0018      	movs	r0, r3
   1e10c:	46bd      	mov	sp, r7
   1e10e:	b007      	add	sp, #28
   1e110:	bd90      	pop	{r4, r7, pc}
   1e112:	46c0      	nop			; (mov r8, r8)
   1e114:	00081108 	.word	0x00081108
   1e118:	0001f899 	.word	0x0001f899
   1e11c:	0001fac5 	.word	0x0001fac5
   1e120:	200040c4 	.word	0x200040c4
   1e124:	0001dc99 	.word	0x0001dc99
   1e128:	00000fff 	.word	0x00000fff

0001e12c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1e12c:	b590      	push	{r4, r7, lr}
   1e12e:	b083      	sub	sp, #12
   1e130:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1e132:	4b15      	ldr	r3, [pc, #84]	; (1e188 <sd_mmc_cmd9_spi+0x5c>)
   1e134:	681b      	ldr	r3, [r3, #0]
   1e136:	891b      	ldrh	r3, [r3, #8]
   1e138:	0419      	lsls	r1, r3, #16
   1e13a:	4814      	ldr	r0, [pc, #80]	; (1e18c <sd_mmc_cmd9_spi+0x60>)
   1e13c:	2301      	movs	r3, #1
   1e13e:	9300      	str	r3, [sp, #0]
   1e140:	2301      	movs	r3, #1
   1e142:	2210      	movs	r2, #16
   1e144:	4c12      	ldr	r4, [pc, #72]	; (1e190 <sd_mmc_cmd9_spi+0x64>)
   1e146:	47a0      	blx	r4
   1e148:	0003      	movs	r3, r0
   1e14a:	001a      	movs	r2, r3
   1e14c:	2301      	movs	r3, #1
   1e14e:	4053      	eors	r3, r2
   1e150:	b2db      	uxtb	r3, r3
   1e152:	2b00      	cmp	r3, #0
   1e154:	d001      	beq.n	1e15a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1e156:	2300      	movs	r3, #0
   1e158:	e012      	b.n	1e180 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1e15a:	4b0b      	ldr	r3, [pc, #44]	; (1e188 <sd_mmc_cmd9_spi+0x5c>)
   1e15c:	681b      	ldr	r3, [r3, #0]
   1e15e:	330e      	adds	r3, #14
   1e160:	2101      	movs	r1, #1
   1e162:	0018      	movs	r0, r3
   1e164:	4b0b      	ldr	r3, [pc, #44]	; (1e194 <sd_mmc_cmd9_spi+0x68>)
   1e166:	4798      	blx	r3
   1e168:	0003      	movs	r3, r0
   1e16a:	001a      	movs	r2, r3
   1e16c:	2301      	movs	r3, #1
   1e16e:	4053      	eors	r3, r2
   1e170:	b2db      	uxtb	r3, r3
   1e172:	2b00      	cmp	r3, #0
   1e174:	d001      	beq.n	1e17a <sd_mmc_cmd9_spi+0x4e>
		return false;
   1e176:	2300      	movs	r3, #0
   1e178:	e002      	b.n	1e180 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1e17a:	4b07      	ldr	r3, [pc, #28]	; (1e198 <sd_mmc_cmd9_spi+0x6c>)
   1e17c:	4798      	blx	r3
   1e17e:	0003      	movs	r3, r0
}
   1e180:	0018      	movs	r0, r3
   1e182:	46bd      	mov	sp, r7
   1e184:	b001      	add	sp, #4
   1e186:	bd90      	pop	{r4, r7, pc}
   1e188:	200040c4 	.word	0x200040c4
   1e18c:	00081109 	.word	0x00081109
   1e190:	0001f899 	.word	0x0001f899
   1e194:	0001fb69 	.word	0x0001fb69
   1e198:	0001fc0d 	.word	0x0001fc0d

0001e19c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1e19c:	b5b0      	push	{r4, r5, r7, lr}
   1e19e:	b084      	sub	sp, #16
   1e1a0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1e1a2:	4b45      	ldr	r3, [pc, #276]	; (1e2b8 <mmc_decode_csd+0x11c>)
   1e1a4:	681b      	ldr	r3, [r3, #0]
   1e1a6:	330e      	adds	r3, #14
   1e1a8:	0018      	movs	r0, r3
   1e1aa:	2304      	movs	r3, #4
   1e1ac:	227a      	movs	r2, #122	; 0x7a
   1e1ae:	2180      	movs	r1, #128	; 0x80
   1e1b0:	4c42      	ldr	r4, [pc, #264]	; (1e2bc <mmc_decode_csd+0x120>)
   1e1b2:	47a0      	blx	r4
   1e1b4:	0003      	movs	r3, r0
   1e1b6:	2b02      	cmp	r3, #2
   1e1b8:	d011      	beq.n	1e1de <mmc_decode_csd+0x42>
   1e1ba:	d802      	bhi.n	1e1c2 <mmc_decode_csd+0x26>
   1e1bc:	2b01      	cmp	r3, #1
   1e1be:	d009      	beq.n	1e1d4 <mmc_decode_csd+0x38>
   1e1c0:	e003      	b.n	1e1ca <mmc_decode_csd+0x2e>
   1e1c2:	2b03      	cmp	r3, #3
   1e1c4:	d010      	beq.n	1e1e8 <mmc_decode_csd+0x4c>
   1e1c6:	2b04      	cmp	r3, #4
   1e1c8:	d013      	beq.n	1e1f2 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1e1ca:	4b3b      	ldr	r3, [pc, #236]	; (1e2b8 <mmc_decode_csd+0x11c>)
   1e1cc:	681b      	ldr	r3, [r3, #0]
   1e1ce:	2212      	movs	r2, #18
   1e1d0:	731a      	strb	r2, [r3, #12]
		break;
   1e1d2:	e013      	b.n	1e1fc <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1e1d4:	4b38      	ldr	r3, [pc, #224]	; (1e2b8 <mmc_decode_csd+0x11c>)
   1e1d6:	681b      	ldr	r3, [r3, #0]
   1e1d8:	2214      	movs	r2, #20
   1e1da:	731a      	strb	r2, [r3, #12]
		break;
   1e1dc:	e00e      	b.n	1e1fc <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1e1de:	4b36      	ldr	r3, [pc, #216]	; (1e2b8 <mmc_decode_csd+0x11c>)
   1e1e0:	681b      	ldr	r3, [r3, #0]
   1e1e2:	2222      	movs	r2, #34	; 0x22
   1e1e4:	731a      	strb	r2, [r3, #12]
		break;
   1e1e6:	e009      	b.n	1e1fc <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1e1e8:	4b33      	ldr	r3, [pc, #204]	; (1e2b8 <mmc_decode_csd+0x11c>)
   1e1ea:	681b      	ldr	r3, [r3, #0]
   1e1ec:	2230      	movs	r2, #48	; 0x30
   1e1ee:	731a      	strb	r2, [r3, #12]
		break;
   1e1f0:	e004      	b.n	1e1fc <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1e1f2:	4b31      	ldr	r3, [pc, #196]	; (1e2b8 <mmc_decode_csd+0x11c>)
   1e1f4:	681b      	ldr	r3, [r3, #0]
   1e1f6:	2240      	movs	r2, #64	; 0x40
   1e1f8:	731a      	strb	r2, [r3, #12]
		break;
   1e1fa:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1e1fc:	4b2e      	ldr	r3, [pc, #184]	; (1e2b8 <mmc_decode_csd+0x11c>)
   1e1fe:	681b      	ldr	r3, [r3, #0]
   1e200:	330e      	adds	r3, #14
   1e202:	0018      	movs	r0, r3
   1e204:	2308      	movs	r3, #8
   1e206:	2260      	movs	r2, #96	; 0x60
   1e208:	2180      	movs	r1, #128	; 0x80
   1e20a:	4c2c      	ldr	r4, [pc, #176]	; (1e2bc <mmc_decode_csd+0x120>)
   1e20c:	47a0      	blx	r4
   1e20e:	0003      	movs	r3, r0
   1e210:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1e212:	68fb      	ldr	r3, [r7, #12]
   1e214:	2207      	movs	r2, #7
   1e216:	401a      	ands	r2, r3
   1e218:	4b29      	ldr	r3, [pc, #164]	; (1e2c0 <mmc_decode_csd+0x124>)
   1e21a:	0092      	lsls	r2, r2, #2
   1e21c:	58d3      	ldr	r3, [r2, r3]
   1e21e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1e220:	68fb      	ldr	r3, [r7, #12]
   1e222:	08db      	lsrs	r3, r3, #3
   1e224:	220f      	movs	r2, #15
   1e226:	401a      	ands	r2, r3
   1e228:	4b26      	ldr	r3, [pc, #152]	; (1e2c4 <mmc_decode_csd+0x128>)
   1e22a:	0092      	lsls	r2, r2, #2
   1e22c:	58d3      	ldr	r3, [r2, r3]
   1e22e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1e230:	4b21      	ldr	r3, [pc, #132]	; (1e2b8 <mmc_decode_csd+0x11c>)
   1e232:	681b      	ldr	r3, [r3, #0]
   1e234:	68ba      	ldr	r2, [r7, #8]
   1e236:	6879      	ldr	r1, [r7, #4]
   1e238:	434a      	muls	r2, r1
   1e23a:	21fa      	movs	r1, #250	; 0xfa
   1e23c:	0089      	lsls	r1, r1, #2
   1e23e:	434a      	muls	r2, r1
   1e240:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1e242:	4b1d      	ldr	r3, [pc, #116]	; (1e2b8 <mmc_decode_csd+0x11c>)
   1e244:	681b      	ldr	r3, [r3, #0]
   1e246:	330e      	adds	r3, #14
   1e248:	0018      	movs	r0, r3
   1e24a:	230c      	movs	r3, #12
   1e24c:	223e      	movs	r2, #62	; 0x3e
   1e24e:	2180      	movs	r1, #128	; 0x80
   1e250:	4c1a      	ldr	r4, [pc, #104]	; (1e2bc <mmc_decode_csd+0x120>)
   1e252:	47a0      	blx	r4
   1e254:	0002      	movs	r2, r0
   1e256:	4b1c      	ldr	r3, [pc, #112]	; (1e2c8 <mmc_decode_csd+0x12c>)
   1e258:	429a      	cmp	r2, r3
   1e25a:	d028      	beq.n	1e2ae <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1e25c:	4b16      	ldr	r3, [pc, #88]	; (1e2b8 <mmc_decode_csd+0x11c>)
   1e25e:	681b      	ldr	r3, [r3, #0]
   1e260:	330e      	adds	r3, #14
   1e262:	0018      	movs	r0, r3
   1e264:	230c      	movs	r3, #12
   1e266:	223e      	movs	r2, #62	; 0x3e
   1e268:	2180      	movs	r1, #128	; 0x80
   1e26a:	4c14      	ldr	r4, [pc, #80]	; (1e2bc <mmc_decode_csd+0x120>)
   1e26c:	47a0      	blx	r4
   1e26e:	0003      	movs	r3, r0
   1e270:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1e272:	4b11      	ldr	r3, [pc, #68]	; (1e2b8 <mmc_decode_csd+0x11c>)
   1e274:	681b      	ldr	r3, [r3, #0]
   1e276:	330e      	adds	r3, #14
   1e278:	0018      	movs	r0, r3
   1e27a:	2303      	movs	r3, #3
   1e27c:	222f      	movs	r2, #47	; 0x2f
   1e27e:	2180      	movs	r1, #128	; 0x80
   1e280:	4d0e      	ldr	r5, [pc, #56]	; (1e2bc <mmc_decode_csd+0x120>)
   1e282:	47a8      	blx	r5
   1e284:	0003      	movs	r3, r0
   1e286:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1e288:	409c      	lsls	r4, r3
   1e28a:	0023      	movs	r3, r4
   1e28c:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1e28e:	4b0a      	ldr	r3, [pc, #40]	; (1e2b8 <mmc_decode_csd+0x11c>)
   1e290:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1e292:	4b09      	ldr	r3, [pc, #36]	; (1e2b8 <mmc_decode_csd+0x11c>)
   1e294:	681b      	ldr	r3, [r3, #0]
   1e296:	330e      	adds	r3, #14
   1e298:	0018      	movs	r0, r3
   1e29a:	2304      	movs	r3, #4
   1e29c:	2250      	movs	r2, #80	; 0x50
   1e29e:	2180      	movs	r1, #128	; 0x80
   1e2a0:	4d06      	ldr	r5, [pc, #24]	; (1e2bc <mmc_decode_csd+0x120>)
   1e2a2:	47a8      	blx	r5
   1e2a4:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1e2a6:	683b      	ldr	r3, [r7, #0]
   1e2a8:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1e2aa:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1e2ac:	6063      	str	r3, [r4, #4]
	}
}
   1e2ae:	46c0      	nop			; (mov r8, r8)
   1e2b0:	46bd      	mov	sp, r7
   1e2b2:	b004      	add	sp, #16
   1e2b4:	bdb0      	pop	{r4, r5, r7, pc}
   1e2b6:	46c0      	nop			; (mov r8, r8)
   1e2b8:	200040c4 	.word	0x200040c4
   1e2bc:	0001dc99 	.word	0x0001dc99
   1e2c0:	00037f08 	.word	0x00037f08
   1e2c4:	00037f64 	.word	0x00037f64
   1e2c8:	00000fff 	.word	0x00000fff

0001e2cc <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1e2cc:	b5b0      	push	{r4, r5, r7, lr}
   1e2ce:	b084      	sub	sp, #16
   1e2d0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1e2d2:	4b35      	ldr	r3, [pc, #212]	; (1e3a8 <sd_decode_csd+0xdc>)
   1e2d4:	681b      	ldr	r3, [r3, #0]
   1e2d6:	330e      	adds	r3, #14
   1e2d8:	0018      	movs	r0, r3
   1e2da:	2308      	movs	r3, #8
   1e2dc:	2260      	movs	r2, #96	; 0x60
   1e2de:	2180      	movs	r1, #128	; 0x80
   1e2e0:	4c32      	ldr	r4, [pc, #200]	; (1e3ac <sd_decode_csd+0xe0>)
   1e2e2:	47a0      	blx	r4
   1e2e4:	0003      	movs	r3, r0
   1e2e6:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1e2e8:	68fb      	ldr	r3, [r7, #12]
   1e2ea:	2207      	movs	r2, #7
   1e2ec:	401a      	ands	r2, r3
   1e2ee:	4b30      	ldr	r3, [pc, #192]	; (1e3b0 <sd_decode_csd+0xe4>)
   1e2f0:	0092      	lsls	r2, r2, #2
   1e2f2:	58d3      	ldr	r3, [r2, r3]
   1e2f4:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1e2f6:	68fb      	ldr	r3, [r7, #12]
   1e2f8:	08db      	lsrs	r3, r3, #3
   1e2fa:	220f      	movs	r2, #15
   1e2fc:	401a      	ands	r2, r3
   1e2fe:	4b2d      	ldr	r3, [pc, #180]	; (1e3b4 <sd_decode_csd+0xe8>)
   1e300:	0092      	lsls	r2, r2, #2
   1e302:	58d3      	ldr	r3, [r2, r3]
   1e304:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1e306:	4b28      	ldr	r3, [pc, #160]	; (1e3a8 <sd_decode_csd+0xdc>)
   1e308:	681b      	ldr	r3, [r3, #0]
   1e30a:	68ba      	ldr	r2, [r7, #8]
   1e30c:	6879      	ldr	r1, [r7, #4]
   1e30e:	434a      	muls	r2, r1
   1e310:	21fa      	movs	r1, #250	; 0xfa
   1e312:	0089      	lsls	r1, r1, #2
   1e314:	434a      	muls	r2, r1
   1e316:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1e318:	4b23      	ldr	r3, [pc, #140]	; (1e3a8 <sd_decode_csd+0xdc>)
   1e31a:	681b      	ldr	r3, [r3, #0]
   1e31c:	330e      	adds	r3, #14
   1e31e:	0018      	movs	r0, r3
   1e320:	2302      	movs	r3, #2
   1e322:	227e      	movs	r2, #126	; 0x7e
   1e324:	2180      	movs	r1, #128	; 0x80
   1e326:	4c21      	ldr	r4, [pc, #132]	; (1e3ac <sd_decode_csd+0xe0>)
   1e328:	47a0      	blx	r4
   1e32a:	1e03      	subs	r3, r0, #0
   1e32c:	d00f      	beq.n	1e34e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1e32e:	4b1e      	ldr	r3, [pc, #120]	; (1e3a8 <sd_decode_csd+0xdc>)
   1e330:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1e332:	4b1d      	ldr	r3, [pc, #116]	; (1e3a8 <sd_decode_csd+0xdc>)
   1e334:	681b      	ldr	r3, [r3, #0]
   1e336:	330e      	adds	r3, #14
   1e338:	0018      	movs	r0, r3
   1e33a:	2316      	movs	r3, #22
   1e33c:	2230      	movs	r2, #48	; 0x30
   1e33e:	2180      	movs	r1, #128	; 0x80
   1e340:	4d1a      	ldr	r5, [pc, #104]	; (1e3ac <sd_decode_csd+0xe0>)
   1e342:	47a8      	blx	r5
   1e344:	0003      	movs	r3, r0
				* 512;
   1e346:	3301      	adds	r3, #1
   1e348:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1e34a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1e34c:	e028      	b.n	1e3a0 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1e34e:	4b16      	ldr	r3, [pc, #88]	; (1e3a8 <sd_decode_csd+0xdc>)
   1e350:	681b      	ldr	r3, [r3, #0]
   1e352:	330e      	adds	r3, #14
   1e354:	0018      	movs	r0, r3
   1e356:	230c      	movs	r3, #12
   1e358:	223e      	movs	r2, #62	; 0x3e
   1e35a:	2180      	movs	r1, #128	; 0x80
   1e35c:	4c13      	ldr	r4, [pc, #76]	; (1e3ac <sd_decode_csd+0xe0>)
   1e35e:	47a0      	blx	r4
   1e360:	0003      	movs	r3, r0
   1e362:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1e364:	4b10      	ldr	r3, [pc, #64]	; (1e3a8 <sd_decode_csd+0xdc>)
   1e366:	681b      	ldr	r3, [r3, #0]
   1e368:	330e      	adds	r3, #14
   1e36a:	0018      	movs	r0, r3
   1e36c:	2303      	movs	r3, #3
   1e36e:	222f      	movs	r2, #47	; 0x2f
   1e370:	2180      	movs	r1, #128	; 0x80
   1e372:	4d0e      	ldr	r5, [pc, #56]	; (1e3ac <sd_decode_csd+0xe0>)
   1e374:	47a8      	blx	r5
   1e376:	0003      	movs	r3, r0
   1e378:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1e37a:	409c      	lsls	r4, r3
   1e37c:	0023      	movs	r3, r4
   1e37e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1e380:	4b09      	ldr	r3, [pc, #36]	; (1e3a8 <sd_decode_csd+0xdc>)
   1e382:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1e384:	4b08      	ldr	r3, [pc, #32]	; (1e3a8 <sd_decode_csd+0xdc>)
   1e386:	681b      	ldr	r3, [r3, #0]
   1e388:	330e      	adds	r3, #14
   1e38a:	0018      	movs	r0, r3
   1e38c:	2304      	movs	r3, #4
   1e38e:	2250      	movs	r2, #80	; 0x50
   1e390:	2180      	movs	r1, #128	; 0x80
   1e392:	4d06      	ldr	r5, [pc, #24]	; (1e3ac <sd_decode_csd+0xe0>)
   1e394:	47a8      	blx	r5
   1e396:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1e398:	683b      	ldr	r3, [r7, #0]
   1e39a:	4093      	lsls	r3, r2
				/ 1024;
   1e39c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1e39e:	6063      	str	r3, [r4, #4]
}
   1e3a0:	46c0      	nop			; (mov r8, r8)
   1e3a2:	46bd      	mov	sp, r7
   1e3a4:	b004      	add	sp, #16
   1e3a6:	bdb0      	pop	{r4, r5, r7, pc}
   1e3a8:	200040c4 	.word	0x200040c4
   1e3ac:	0001dc99 	.word	0x0001dc99
   1e3b0:	00037f08 	.word	0x00037f08
   1e3b4:	00037f24 	.word	0x00037f24

0001e3b8 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1e3b8:	b580      	push	{r7, lr}
   1e3ba:	b082      	sub	sp, #8
   1e3bc:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1e3be:	4b11      	ldr	r3, [pc, #68]	; (1e404 <sd_mmc_cmd13+0x4c>)
   1e3c0:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1e3c2:	4b11      	ldr	r3, [pc, #68]	; (1e408 <sd_mmc_cmd13+0x50>)
   1e3c4:	2100      	movs	r1, #0
   1e3c6:	0018      	movs	r0, r3
   1e3c8:	4b10      	ldr	r3, [pc, #64]	; (1e40c <sd_mmc_cmd13+0x54>)
   1e3ca:	4798      	blx	r3
   1e3cc:	0003      	movs	r3, r0
   1e3ce:	001a      	movs	r2, r3
   1e3d0:	2301      	movs	r3, #1
   1e3d2:	4053      	eors	r3, r2
   1e3d4:	b2db      	uxtb	r3, r3
   1e3d6:	2b00      	cmp	r3, #0
   1e3d8:	d001      	beq.n	1e3de <sd_mmc_cmd13+0x26>
				return false;
   1e3da:	2300      	movs	r3, #0
   1e3dc:	e00e      	b.n	1e3fc <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1e3de:	4b0c      	ldr	r3, [pc, #48]	; (1e410 <sd_mmc_cmd13+0x58>)
   1e3e0:	4798      	blx	r3
   1e3e2:	0002      	movs	r2, r0
   1e3e4:	23ff      	movs	r3, #255	; 0xff
   1e3e6:	4013      	ands	r3, r2
   1e3e8:	d006      	beq.n	1e3f8 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1e3ea:	687b      	ldr	r3, [r7, #4]
   1e3ec:	1e5a      	subs	r2, r3, #1
   1e3ee:	607a      	str	r2, [r7, #4]
   1e3f0:	2b00      	cmp	r3, #0
   1e3f2:	d1e6      	bne.n	1e3c2 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1e3f4:	2300      	movs	r3, #0
   1e3f6:	e001      	b.n	1e3fc <sd_mmc_cmd13+0x44>
				break;
   1e3f8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1e3fa:	2301      	movs	r3, #1
}
   1e3fc:	0018      	movs	r0, r3
   1e3fe:	46bd      	mov	sp, r7
   1e400:	b002      	add	sp, #8
   1e402:	bd80      	pop	{r7, pc}
   1e404:	00030d40 	.word	0x00030d40
   1e408:	00001b0d 	.word	0x00001b0d
   1e40c:	0001f871 	.word	0x0001f871
   1e410:	0001fab1 	.word	0x0001fab1

0001e414 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1e414:	b590      	push	{r4, r7, lr}
   1e416:	b085      	sub	sp, #20
   1e418:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1e41a:	4b38      	ldr	r3, [pc, #224]	; (1e4fc <sd_acmd51+0xe8>)
   1e41c:	681b      	ldr	r3, [r3, #0]
   1e41e:	891b      	ldrh	r3, [r3, #8]
   1e420:	041b      	lsls	r3, r3, #16
   1e422:	4a37      	ldr	r2, [pc, #220]	; (1e500 <sd_acmd51+0xec>)
   1e424:	0019      	movs	r1, r3
   1e426:	0010      	movs	r0, r2
   1e428:	4b36      	ldr	r3, [pc, #216]	; (1e504 <sd_acmd51+0xf0>)
   1e42a:	4798      	blx	r3
   1e42c:	0003      	movs	r3, r0
   1e42e:	001a      	movs	r2, r3
   1e430:	2301      	movs	r3, #1
   1e432:	4053      	eors	r3, r2
   1e434:	b2db      	uxtb	r3, r3
   1e436:	2b00      	cmp	r3, #0
   1e438:	d001      	beq.n	1e43e <sd_acmd51+0x2a>
		return false;
   1e43a:	2300      	movs	r3, #0
   1e43c:	e059      	b.n	1e4f2 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1e43e:	4832      	ldr	r0, [pc, #200]	; (1e508 <sd_acmd51+0xf4>)
   1e440:	2301      	movs	r3, #1
   1e442:	9300      	str	r3, [sp, #0]
   1e444:	2301      	movs	r3, #1
   1e446:	2208      	movs	r2, #8
   1e448:	2100      	movs	r1, #0
   1e44a:	4c30      	ldr	r4, [pc, #192]	; (1e50c <sd_acmd51+0xf8>)
   1e44c:	47a0      	blx	r4
   1e44e:	0003      	movs	r3, r0
   1e450:	001a      	movs	r2, r3
   1e452:	2301      	movs	r3, #1
   1e454:	4053      	eors	r3, r2
   1e456:	b2db      	uxtb	r3, r3
   1e458:	2b00      	cmp	r3, #0
   1e45a:	d001      	beq.n	1e460 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1e45c:	2300      	movs	r3, #0
   1e45e:	e048      	b.n	1e4f2 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1e460:	003b      	movs	r3, r7
   1e462:	2101      	movs	r1, #1
   1e464:	0018      	movs	r0, r3
   1e466:	4b2a      	ldr	r3, [pc, #168]	; (1e510 <sd_acmd51+0xfc>)
   1e468:	4798      	blx	r3
   1e46a:	0003      	movs	r3, r0
   1e46c:	001a      	movs	r2, r3
   1e46e:	2301      	movs	r3, #1
   1e470:	4053      	eors	r3, r2
   1e472:	b2db      	uxtb	r3, r3
   1e474:	2b00      	cmp	r3, #0
   1e476:	d001      	beq.n	1e47c <sd_acmd51+0x68>
		return false;
   1e478:	2300      	movs	r3, #0
   1e47a:	e03a      	b.n	1e4f2 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1e47c:	4b25      	ldr	r3, [pc, #148]	; (1e514 <sd_acmd51+0x100>)
   1e47e:	4798      	blx	r3
   1e480:	0003      	movs	r3, r0
   1e482:	001a      	movs	r2, r3
   1e484:	2301      	movs	r3, #1
   1e486:	4053      	eors	r3, r2
   1e488:	b2db      	uxtb	r3, r3
   1e48a:	2b00      	cmp	r3, #0
   1e48c:	d001      	beq.n	1e492 <sd_acmd51+0x7e>
		return false;
   1e48e:	2300      	movs	r3, #0
   1e490:	e02f      	b.n	1e4f2 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1e492:	0038      	movs	r0, r7
   1e494:	2304      	movs	r3, #4
   1e496:	2238      	movs	r2, #56	; 0x38
   1e498:	2140      	movs	r1, #64	; 0x40
   1e49a:	4c1f      	ldr	r4, [pc, #124]	; (1e518 <sd_acmd51+0x104>)
   1e49c:	47a0      	blx	r4
   1e49e:	0003      	movs	r3, r0
   1e4a0:	2b01      	cmp	r3, #1
   1e4a2:	d008      	beq.n	1e4b6 <sd_acmd51+0xa2>
   1e4a4:	d302      	bcc.n	1e4ac <sd_acmd51+0x98>
   1e4a6:	2b02      	cmp	r3, #2
   1e4a8:	d00a      	beq.n	1e4c0 <sd_acmd51+0xac>
   1e4aa:	e01c      	b.n	1e4e6 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1e4ac:	4b13      	ldr	r3, [pc, #76]	; (1e4fc <sd_acmd51+0xe8>)
   1e4ae:	681b      	ldr	r3, [r3, #0]
   1e4b0:	2210      	movs	r2, #16
   1e4b2:	731a      	strb	r2, [r3, #12]
		break;
   1e4b4:	e01c      	b.n	1e4f0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1e4b6:	4b11      	ldr	r3, [pc, #68]	; (1e4fc <sd_acmd51+0xe8>)
   1e4b8:	681b      	ldr	r3, [r3, #0]
   1e4ba:	221a      	movs	r2, #26
   1e4bc:	731a      	strb	r2, [r3, #12]
		break;
   1e4be:	e017      	b.n	1e4f0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1e4c0:	0038      	movs	r0, r7
   1e4c2:	2301      	movs	r3, #1
   1e4c4:	222f      	movs	r2, #47	; 0x2f
   1e4c6:	2140      	movs	r1, #64	; 0x40
   1e4c8:	4c13      	ldr	r4, [pc, #76]	; (1e518 <sd_acmd51+0x104>)
   1e4ca:	47a0      	blx	r4
   1e4cc:	0003      	movs	r3, r0
   1e4ce:	2b01      	cmp	r3, #1
   1e4d0:	d104      	bne.n	1e4dc <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1e4d2:	4b0a      	ldr	r3, [pc, #40]	; (1e4fc <sd_acmd51+0xe8>)
   1e4d4:	681b      	ldr	r3, [r3, #0]
   1e4d6:	2230      	movs	r2, #48	; 0x30
   1e4d8:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1e4da:	e009      	b.n	1e4f0 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1e4dc:	4b07      	ldr	r3, [pc, #28]	; (1e4fc <sd_acmd51+0xe8>)
   1e4de:	681b      	ldr	r3, [r3, #0]
   1e4e0:	2220      	movs	r2, #32
   1e4e2:	731a      	strb	r2, [r3, #12]
		break;
   1e4e4:	e004      	b.n	1e4f0 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1e4e6:	4b05      	ldr	r3, [pc, #20]	; (1e4fc <sd_acmd51+0xe8>)
   1e4e8:	681b      	ldr	r3, [r3, #0]
   1e4ea:	2210      	movs	r2, #16
   1e4ec:	731a      	strb	r2, [r3, #12]
		break;
   1e4ee:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1e4f0:	2301      	movs	r3, #1
}
   1e4f2:	0018      	movs	r0, r3
   1e4f4:	46bd      	mov	sp, r7
   1e4f6:	b003      	add	sp, #12
   1e4f8:	bd90      	pop	{r4, r7, pc}
   1e4fa:	46c0      	nop			; (mov r8, r8)
   1e4fc:	200040c4 	.word	0x200040c4
   1e500:	00001137 	.word	0x00001137
   1e504:	0001f871 	.word	0x0001f871
   1e508:	00081133 	.word	0x00081133
   1e50c:	0001f899 	.word	0x0001f899
   1e510:	0001fb69 	.word	0x0001fb69
   1e514:	0001fc0d 	.word	0x0001fc0d
   1e518:	0001dc99 	.word	0x0001dc99

0001e51c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1e51c:	b580      	push	{r7, lr}
   1e51e:	b082      	sub	sp, #8
   1e520:	af00      	add	r7, sp, #0
   1e522:	0002      	movs	r2, r0
   1e524:	1dfb      	adds	r3, r7, #7
   1e526:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1e528:	1dfb      	adds	r3, r7, #7
   1e52a:	781b      	ldrb	r3, [r3, #0]
   1e52c:	2b00      	cmp	r3, #0
   1e52e:	d001      	beq.n	1e534 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1e530:	2304      	movs	r3, #4
   1e532:	e047      	b.n	1e5c4 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1e534:	1dfb      	adds	r3, r7, #7
   1e536:	781b      	ldrb	r3, [r3, #0]
   1e538:	4a24      	ldr	r2, [pc, #144]	; (1e5cc <sd_mmc_select_slot+0xb0>)
   1e53a:	015b      	lsls	r3, r3, #5
   1e53c:	18d3      	adds	r3, r2, r3
   1e53e:	330a      	adds	r3, #10
   1e540:	781b      	ldrb	r3, [r3, #0]
   1e542:	2b04      	cmp	r3, #4
   1e544:	d008      	beq.n	1e558 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1e546:	1dfb      	adds	r3, r7, #7
   1e548:	781b      	ldrb	r3, [r3, #0]
   1e54a:	4a20      	ldr	r2, [pc, #128]	; (1e5cc <sd_mmc_select_slot+0xb0>)
   1e54c:	015b      	lsls	r3, r3, #5
   1e54e:	18d3      	adds	r3, r2, r3
   1e550:	330a      	adds	r3, #10
   1e552:	781b      	ldrb	r3, [r3, #0]
   1e554:	2b03      	cmp	r3, #3
   1e556:	d11d      	bne.n	1e594 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1e558:	1dfb      	adds	r3, r7, #7
   1e55a:	781b      	ldrb	r3, [r3, #0]
   1e55c:	4a1b      	ldr	r2, [pc, #108]	; (1e5cc <sd_mmc_select_slot+0xb0>)
   1e55e:	015b      	lsls	r3, r3, #5
   1e560:	18d3      	adds	r3, r2, r3
   1e562:	330a      	adds	r3, #10
   1e564:	2202      	movs	r2, #2
   1e566:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1e568:	1dfb      	adds	r3, r7, #7
   1e56a:	781a      	ldrb	r2, [r3, #0]
   1e56c:	4b17      	ldr	r3, [pc, #92]	; (1e5cc <sd_mmc_select_slot+0xb0>)
   1e56e:	0152      	lsls	r2, r2, #5
   1e570:	4917      	ldr	r1, [pc, #92]	; (1e5d0 <sd_mmc_select_slot+0xb4>)
   1e572:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1e574:	1dfb      	adds	r3, r7, #7
   1e576:	781b      	ldrb	r3, [r3, #0]
   1e578:	4a14      	ldr	r2, [pc, #80]	; (1e5cc <sd_mmc_select_slot+0xb0>)
   1e57a:	015b      	lsls	r3, r3, #5
   1e57c:	18d3      	adds	r3, r2, r3
   1e57e:	330d      	adds	r3, #13
   1e580:	2201      	movs	r2, #1
   1e582:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1e584:	1dfb      	adds	r3, r7, #7
   1e586:	781b      	ldrb	r3, [r3, #0]
   1e588:	4a10      	ldr	r2, [pc, #64]	; (1e5cc <sd_mmc_select_slot+0xb0>)
   1e58a:	015b      	lsls	r3, r3, #5
   1e58c:	18d3      	adds	r3, r2, r3
   1e58e:	331e      	adds	r3, #30
   1e590:	2200      	movs	r2, #0
   1e592:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1e594:	4b0f      	ldr	r3, [pc, #60]	; (1e5d4 <sd_mmc_select_slot+0xb8>)
   1e596:	1dfa      	adds	r2, r7, #7
   1e598:	7812      	ldrb	r2, [r2, #0]
   1e59a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1e59c:	1dfb      	adds	r3, r7, #7
   1e59e:	781b      	ldrb	r3, [r3, #0]
   1e5a0:	015a      	lsls	r2, r3, #5
   1e5a2:	4b0a      	ldr	r3, [pc, #40]	; (1e5cc <sd_mmc_select_slot+0xb0>)
   1e5a4:	18d2      	adds	r2, r2, r3
   1e5a6:	4b0c      	ldr	r3, [pc, #48]	; (1e5d8 <sd_mmc_select_slot+0xbc>)
   1e5a8:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1e5aa:	4b0c      	ldr	r3, [pc, #48]	; (1e5dc <sd_mmc_select_slot+0xc0>)
   1e5ac:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1e5ae:	1dfb      	adds	r3, r7, #7
   1e5b0:	781b      	ldrb	r3, [r3, #0]
   1e5b2:	4a06      	ldr	r2, [pc, #24]	; (1e5cc <sd_mmc_select_slot+0xb0>)
   1e5b4:	015b      	lsls	r3, r3, #5
   1e5b6:	18d3      	adds	r3, r2, r3
   1e5b8:	330a      	adds	r3, #10
   1e5ba:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1e5bc:	3b02      	subs	r3, #2
   1e5be:	425a      	negs	r2, r3
   1e5c0:	4153      	adcs	r3, r2
   1e5c2:	b2db      	uxtb	r3, r3
}
   1e5c4:	0018      	movs	r0, r3
   1e5c6:	46bd      	mov	sp, r7
   1e5c8:	b002      	add	sp, #8
   1e5ca:	bd80      	pop	{r7, pc}
   1e5cc:	200040a0 	.word	0x200040a0
   1e5d0:	00061a80 	.word	0x00061a80
   1e5d4:	200040c0 	.word	0x200040c0
   1e5d8:	200040c4 	.word	0x200040c4
   1e5dc:	0001e5e1 	.word	0x0001e5e1

0001e5e0 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1e5e0:	b5b0      	push	{r4, r5, r7, lr}
   1e5e2:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1e5e4:	4b09      	ldr	r3, [pc, #36]	; (1e60c <sd_mmc_configure_slot+0x2c>)
   1e5e6:	7818      	ldrb	r0, [r3, #0]
   1e5e8:	4b09      	ldr	r3, [pc, #36]	; (1e610 <sd_mmc_configure_slot+0x30>)
   1e5ea:	681b      	ldr	r3, [r3, #0]
   1e5ec:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1e5ee:	4b08      	ldr	r3, [pc, #32]	; (1e610 <sd_mmc_configure_slot+0x30>)
   1e5f0:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1e5f2:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1e5f4:	4b06      	ldr	r3, [pc, #24]	; (1e610 <sd_mmc_configure_slot+0x30>)
   1e5f6:	681b      	ldr	r3, [r3, #0]
   1e5f8:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1e5fa:	1e5c      	subs	r4, r3, #1
   1e5fc:	41a3      	sbcs	r3, r4
   1e5fe:	b2db      	uxtb	r3, r3
   1e600:	4c04      	ldr	r4, [pc, #16]	; (1e614 <sd_mmc_configure_slot+0x34>)
   1e602:	47a0      	blx	r4
}
   1e604:	46c0      	nop			; (mov r8, r8)
   1e606:	46bd      	mov	sp, r7
   1e608:	bdb0      	pop	{r4, r5, r7, pc}
   1e60a:	46c0      	nop			; (mov r8, r8)
   1e60c:	200040c0 	.word	0x200040c0
   1e610:	200040c4 	.word	0x200040c4
   1e614:	0001f759 	.word	0x0001f759

0001e618 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1e618:	b580      	push	{r7, lr}
   1e61a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1e61c:	4b05      	ldr	r3, [pc, #20]	; (1e634 <sd_mmc_deselect_slot+0x1c>)
   1e61e:	781b      	ldrb	r3, [r3, #0]
   1e620:	2b00      	cmp	r3, #0
   1e622:	d104      	bne.n	1e62e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1e624:	4b03      	ldr	r3, [pc, #12]	; (1e634 <sd_mmc_deselect_slot+0x1c>)
   1e626:	781b      	ldrb	r3, [r3, #0]
   1e628:	0018      	movs	r0, r3
   1e62a:	4b03      	ldr	r3, [pc, #12]	; (1e638 <sd_mmc_deselect_slot+0x20>)
   1e62c:	4798      	blx	r3
	}
}
   1e62e:	46c0      	nop			; (mov r8, r8)
   1e630:	46bd      	mov	sp, r7
   1e632:	bd80      	pop	{r7, pc}
   1e634:	200040c0 	.word	0x200040c0
   1e638:	0001f7e1 	.word	0x0001f7e1

0001e63c <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1e63c:	b580      	push	{r7, lr}
   1e63e:	b082      	sub	sp, #8
   1e640:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1e642:	1dfb      	adds	r3, r7, #7
   1e644:	2200      	movs	r2, #0
   1e646:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1e648:	4b59      	ldr	r3, [pc, #356]	; (1e7b0 <sd_mmc_spi_card_init+0x174>)
   1e64a:	681b      	ldr	r3, [r3, #0]
   1e64c:	2201      	movs	r2, #1
   1e64e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1e650:	4b57      	ldr	r3, [pc, #348]	; (1e7b0 <sd_mmc_spi_card_init+0x174>)
   1e652:	681b      	ldr	r3, [r3, #0]
   1e654:	2200      	movs	r2, #0
   1e656:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1e658:	4b55      	ldr	r3, [pc, #340]	; (1e7b0 <sd_mmc_spi_card_init+0x174>)
   1e65a:	681b      	ldr	r3, [r3, #0]
   1e65c:	2200      	movs	r2, #0
   1e65e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1e660:	4b54      	ldr	r3, [pc, #336]	; (1e7b4 <sd_mmc_spi_card_init+0x178>)
   1e662:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1e664:	2388      	movs	r3, #136	; 0x88
   1e666:	015b      	lsls	r3, r3, #5
   1e668:	2100      	movs	r1, #0
   1e66a:	0018      	movs	r0, r3
   1e66c:	4b52      	ldr	r3, [pc, #328]	; (1e7b8 <sd_mmc_spi_card_init+0x17c>)
   1e66e:	4798      	blx	r3
   1e670:	0003      	movs	r3, r0
   1e672:	001a      	movs	r2, r3
   1e674:	2301      	movs	r3, #1
   1e676:	4053      	eors	r3, r2
   1e678:	b2db      	uxtb	r3, r3
   1e67a:	2b00      	cmp	r3, #0
   1e67c:	d001      	beq.n	1e682 <sd_mmc_spi_card_init+0x46>
		return false;
   1e67e:	2300      	movs	r3, #0
   1e680:	e092      	b.n	1e7a8 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1e682:	1dfb      	adds	r3, r7, #7
   1e684:	0018      	movs	r0, r3
   1e686:	4b4d      	ldr	r3, [pc, #308]	; (1e7bc <sd_mmc_spi_card_init+0x180>)
   1e688:	4798      	blx	r3
   1e68a:	0003      	movs	r3, r0
   1e68c:	001a      	movs	r2, r3
   1e68e:	2301      	movs	r3, #1
   1e690:	4053      	eors	r3, r2
   1e692:	b2db      	uxtb	r3, r3
   1e694:	2b00      	cmp	r3, #0
   1e696:	d001      	beq.n	1e69c <sd_mmc_spi_card_init+0x60>
		return false;
   1e698:	2300      	movs	r3, #0
   1e69a:	e085      	b.n	1e7a8 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1e69c:	4b48      	ldr	r3, [pc, #288]	; (1e7c0 <sd_mmc_spi_card_init+0x184>)
   1e69e:	4798      	blx	r3
   1e6a0:	0003      	movs	r3, r0
   1e6a2:	001a      	movs	r2, r3
   1e6a4:	2301      	movs	r3, #1
   1e6a6:	4053      	eors	r3, r2
   1e6a8:	b2db      	uxtb	r3, r3
   1e6aa:	2b00      	cmp	r3, #0
   1e6ac:	d001      	beq.n	1e6b2 <sd_mmc_spi_card_init+0x76>
		return false;
   1e6ae:	2300      	movs	r3, #0
   1e6b0:	e07a      	b.n	1e7a8 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1e6b2:	4b3f      	ldr	r3, [pc, #252]	; (1e7b0 <sd_mmc_spi_card_init+0x174>)
   1e6b4:	681b      	ldr	r3, [r3, #0]
   1e6b6:	7adb      	ldrb	r3, [r3, #11]
   1e6b8:	001a      	movs	r2, r3
   1e6ba:	2301      	movs	r3, #1
   1e6bc:	4013      	ands	r3, r2
   1e6be:	d021      	beq.n	1e704 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1e6c0:	1dfb      	adds	r3, r7, #7
   1e6c2:	781b      	ldrb	r3, [r3, #0]
   1e6c4:	0018      	movs	r0, r3
   1e6c6:	4b3f      	ldr	r3, [pc, #252]	; (1e7c4 <sd_mmc_spi_card_init+0x188>)
   1e6c8:	4798      	blx	r3
   1e6ca:	0003      	movs	r3, r0
   1e6cc:	001a      	movs	r2, r3
   1e6ce:	2301      	movs	r3, #1
   1e6d0:	4053      	eors	r3, r2
   1e6d2:	b2db      	uxtb	r3, r3
   1e6d4:	2b00      	cmp	r3, #0
   1e6d6:	d007      	beq.n	1e6e8 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1e6d8:	4b35      	ldr	r3, [pc, #212]	; (1e7b0 <sd_mmc_spi_card_init+0x174>)
   1e6da:	681b      	ldr	r3, [r3, #0]
   1e6dc:	2202      	movs	r2, #2
   1e6de:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1e6e0:	4b39      	ldr	r3, [pc, #228]	; (1e7c8 <sd_mmc_spi_card_init+0x18c>)
   1e6e2:	4798      	blx	r3
   1e6e4:	0003      	movs	r3, r0
   1e6e6:	e05f      	b.n	1e7a8 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1e6e8:	4b38      	ldr	r3, [pc, #224]	; (1e7cc <sd_mmc_spi_card_init+0x190>)
   1e6ea:	2100      	movs	r1, #0
   1e6ec:	0018      	movs	r0, r3
   1e6ee:	4b32      	ldr	r3, [pc, #200]	; (1e7b8 <sd_mmc_spi_card_init+0x17c>)
   1e6f0:	4798      	blx	r3
   1e6f2:	0003      	movs	r3, r0
   1e6f4:	001a      	movs	r2, r3
   1e6f6:	2301      	movs	r3, #1
   1e6f8:	4053      	eors	r3, r2
   1e6fa:	b2db      	uxtb	r3, r3
   1e6fc:	2b00      	cmp	r3, #0
   1e6fe:	d001      	beq.n	1e704 <sd_mmc_spi_card_init+0xc8>
			return false;
   1e700:	2300      	movs	r3, #0
   1e702:	e051      	b.n	1e7a8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1e704:	4b2a      	ldr	r3, [pc, #168]	; (1e7b0 <sd_mmc_spi_card_init+0x174>)
   1e706:	681b      	ldr	r3, [r3, #0]
   1e708:	7adb      	ldrb	r3, [r3, #11]
   1e70a:	001a      	movs	r2, r3
   1e70c:	2301      	movs	r3, #1
   1e70e:	4013      	ands	r3, r2
   1e710:	d017      	beq.n	1e742 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1e712:	4b2f      	ldr	r3, [pc, #188]	; (1e7d0 <sd_mmc_spi_card_init+0x194>)
   1e714:	4798      	blx	r3
   1e716:	0003      	movs	r3, r0
   1e718:	001a      	movs	r2, r3
   1e71a:	2301      	movs	r3, #1
   1e71c:	4053      	eors	r3, r2
   1e71e:	b2db      	uxtb	r3, r3
   1e720:	2b00      	cmp	r3, #0
   1e722:	d001      	beq.n	1e728 <sd_mmc_spi_card_init+0xec>
			return false;
   1e724:	2300      	movs	r3, #0
   1e726:	e03f      	b.n	1e7a8 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1e728:	4b2a      	ldr	r3, [pc, #168]	; (1e7d4 <sd_mmc_spi_card_init+0x198>)
   1e72a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1e72c:	4b2a      	ldr	r3, [pc, #168]	; (1e7d8 <sd_mmc_spi_card_init+0x19c>)
   1e72e:	4798      	blx	r3
   1e730:	0003      	movs	r3, r0
   1e732:	001a      	movs	r2, r3
   1e734:	2301      	movs	r3, #1
   1e736:	4053      	eors	r3, r2
   1e738:	b2db      	uxtb	r3, r3
   1e73a:	2b00      	cmp	r3, #0
   1e73c:	d001      	beq.n	1e742 <sd_mmc_spi_card_init+0x106>
			return false;
   1e73e:	2300      	movs	r3, #0
   1e740:	e032      	b.n	1e7a8 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1e742:	4b1b      	ldr	r3, [pc, #108]	; (1e7b0 <sd_mmc_spi_card_init+0x174>)
   1e744:	681b      	ldr	r3, [r3, #0]
   1e746:	7adb      	ldrb	r3, [r3, #11]
   1e748:	001a      	movs	r2, r3
   1e74a:	2301      	movs	r3, #1
   1e74c:	4013      	ands	r3, r2
   1e74e:	d016      	beq.n	1e77e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1e750:	4b17      	ldr	r3, [pc, #92]	; (1e7b0 <sd_mmc_spi_card_init+0x174>)
   1e752:	681b      	ldr	r3, [r3, #0]
   1e754:	7adb      	ldrb	r3, [r3, #11]
   1e756:	001a      	movs	r2, r3
   1e758:	2308      	movs	r3, #8
   1e75a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1e75c:	d10f      	bne.n	1e77e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1e75e:	2380      	movs	r3, #128	; 0x80
   1e760:	009b      	lsls	r3, r3, #2
   1e762:	4a1e      	ldr	r2, [pc, #120]	; (1e7dc <sd_mmc_spi_card_init+0x1a0>)
   1e764:	0019      	movs	r1, r3
   1e766:	0010      	movs	r0, r2
   1e768:	4b13      	ldr	r3, [pc, #76]	; (1e7b8 <sd_mmc_spi_card_init+0x17c>)
   1e76a:	4798      	blx	r3
   1e76c:	0003      	movs	r3, r0
   1e76e:	001a      	movs	r2, r3
   1e770:	2301      	movs	r3, #1
   1e772:	4053      	eors	r3, r2
   1e774:	b2db      	uxtb	r3, r3
   1e776:	2b00      	cmp	r3, #0
   1e778:	d001      	beq.n	1e77e <sd_mmc_spi_card_init+0x142>
			return false;
   1e77a:	2300      	movs	r3, #0
   1e77c:	e014      	b.n	1e7a8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1e77e:	4b0c      	ldr	r3, [pc, #48]	; (1e7b0 <sd_mmc_spi_card_init+0x174>)
   1e780:	681b      	ldr	r3, [r3, #0]
   1e782:	7adb      	ldrb	r3, [r3, #11]
   1e784:	001a      	movs	r2, r3
   1e786:	2301      	movs	r3, #1
   1e788:	4013      	ands	r3, r2
   1e78a:	d00a      	beq.n	1e7a2 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1e78c:	4b14      	ldr	r3, [pc, #80]	; (1e7e0 <sd_mmc_spi_card_init+0x1a4>)
   1e78e:	4798      	blx	r3
   1e790:	0003      	movs	r3, r0
   1e792:	001a      	movs	r2, r3
   1e794:	2301      	movs	r3, #1
   1e796:	4053      	eors	r3, r2
   1e798:	b2db      	uxtb	r3, r3
   1e79a:	2b00      	cmp	r3, #0
   1e79c:	d001      	beq.n	1e7a2 <sd_mmc_spi_card_init+0x166>
			return false;
   1e79e:	2300      	movs	r3, #0
   1e7a0:	e002      	b.n	1e7a8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1e7a2:	4b10      	ldr	r3, [pc, #64]	; (1e7e4 <sd_mmc_spi_card_init+0x1a8>)
   1e7a4:	4798      	blx	r3
	return true;
   1e7a6:	2301      	movs	r3, #1
}
   1e7a8:	0018      	movs	r0, r3
   1e7aa:	46bd      	mov	sp, r7
   1e7ac:	b002      	add	sp, #8
   1e7ae:	bd80      	pop	{r7, pc}
   1e7b0:	200040c4 	.word	0x200040c4
   1e7b4:	0001f825 	.word	0x0001f825
   1e7b8:	0001f871 	.word	0x0001f871
   1e7bc:	0001df91 	.word	0x0001df91
   1e7c0:	0001df85 	.word	0x0001df85
   1e7c4:	0001dea1 	.word	0x0001dea1
   1e7c8:	0001e7e9 	.word	0x0001e7e9
   1e7cc:	0000113b 	.word	0x0000113b
   1e7d0:	0001e12d 	.word	0x0001e12d
   1e7d4:	0001e2cd 	.word	0x0001e2cd
   1e7d8:	0001e415 	.word	0x0001e415
   1e7dc:	00001110 	.word	0x00001110
   1e7e0:	0001e3b9 	.word	0x0001e3b9
   1e7e4:	0001e5e1 	.word	0x0001e5e1

0001e7e8 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1e7e8:	b580      	push	{r7, lr}
   1e7ea:	b082      	sub	sp, #8
   1e7ec:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1e7ee:	2388      	movs	r3, #136	; 0x88
   1e7f0:	015b      	lsls	r3, r3, #5
   1e7f2:	2100      	movs	r1, #0
   1e7f4:	0018      	movs	r0, r3
   1e7f6:	4b32      	ldr	r3, [pc, #200]	; (1e8c0 <sd_mmc_spi_install_mmc+0xd8>)
   1e7f8:	4798      	blx	r3
   1e7fa:	0003      	movs	r3, r0
   1e7fc:	001a      	movs	r2, r3
   1e7fe:	2301      	movs	r3, #1
   1e800:	4053      	eors	r3, r2
   1e802:	b2db      	uxtb	r3, r3
   1e804:	2b00      	cmp	r3, #0
   1e806:	d001      	beq.n	1e80c <sd_mmc_spi_install_mmc+0x24>
		return false;
   1e808:	2300      	movs	r3, #0
   1e80a:	e055      	b.n	1e8b8 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1e80c:	4b2d      	ldr	r3, [pc, #180]	; (1e8c4 <sd_mmc_spi_install_mmc+0xdc>)
   1e80e:	4798      	blx	r3
   1e810:	0003      	movs	r3, r0
   1e812:	001a      	movs	r2, r3
   1e814:	2301      	movs	r3, #1
   1e816:	4053      	eors	r3, r2
   1e818:	b2db      	uxtb	r3, r3
   1e81a:	2b00      	cmp	r3, #0
   1e81c:	d001      	beq.n	1e822 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1e81e:	2300      	movs	r3, #0
   1e820:	e04a      	b.n	1e8b8 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1e822:	4b29      	ldr	r3, [pc, #164]	; (1e8c8 <sd_mmc_spi_install_mmc+0xe0>)
   1e824:	2100      	movs	r1, #0
   1e826:	0018      	movs	r0, r3
   1e828:	4b25      	ldr	r3, [pc, #148]	; (1e8c0 <sd_mmc_spi_install_mmc+0xd8>)
   1e82a:	4798      	blx	r3
   1e82c:	0003      	movs	r3, r0
   1e82e:	001a      	movs	r2, r3
   1e830:	2301      	movs	r3, #1
   1e832:	4053      	eors	r3, r2
   1e834:	b2db      	uxtb	r3, r3
   1e836:	2b00      	cmp	r3, #0
   1e838:	d001      	beq.n	1e83e <sd_mmc_spi_install_mmc+0x56>
		return false;
   1e83a:	2300      	movs	r3, #0
   1e83c:	e03c      	b.n	1e8b8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1e83e:	4b23      	ldr	r3, [pc, #140]	; (1e8cc <sd_mmc_spi_install_mmc+0xe4>)
   1e840:	4798      	blx	r3
   1e842:	0003      	movs	r3, r0
   1e844:	001a      	movs	r2, r3
   1e846:	2301      	movs	r3, #1
   1e848:	4053      	eors	r3, r2
   1e84a:	b2db      	uxtb	r3, r3
   1e84c:	2b00      	cmp	r3, #0
   1e84e:	d001      	beq.n	1e854 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1e850:	2300      	movs	r3, #0
   1e852:	e031      	b.n	1e8b8 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1e854:	4b1e      	ldr	r3, [pc, #120]	; (1e8d0 <sd_mmc_spi_install_mmc+0xe8>)
   1e856:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1e858:	4b1e      	ldr	r3, [pc, #120]	; (1e8d4 <sd_mmc_spi_install_mmc+0xec>)
   1e85a:	681b      	ldr	r3, [r3, #0]
   1e85c:	7b1b      	ldrb	r3, [r3, #12]
   1e85e:	2b3f      	cmp	r3, #63	; 0x3f
   1e860:	d90c      	bls.n	1e87c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1e862:	1dfb      	adds	r3, r7, #7
   1e864:	0018      	movs	r0, r3
   1e866:	4b1c      	ldr	r3, [pc, #112]	; (1e8d8 <sd_mmc_spi_install_mmc+0xf0>)
   1e868:	4798      	blx	r3
   1e86a:	0003      	movs	r3, r0
   1e86c:	001a      	movs	r2, r3
   1e86e:	2301      	movs	r3, #1
   1e870:	4053      	eors	r3, r2
   1e872:	b2db      	uxtb	r3, r3
   1e874:	2b00      	cmp	r3, #0
   1e876:	d001      	beq.n	1e87c <sd_mmc_spi_install_mmc+0x94>
			return false;
   1e878:	2300      	movs	r3, #0
   1e87a:	e01d      	b.n	1e8b8 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1e87c:	2380      	movs	r3, #128	; 0x80
   1e87e:	009b      	lsls	r3, r3, #2
   1e880:	4a16      	ldr	r2, [pc, #88]	; (1e8dc <sd_mmc_spi_install_mmc+0xf4>)
   1e882:	0019      	movs	r1, r3
   1e884:	0010      	movs	r0, r2
   1e886:	4b0e      	ldr	r3, [pc, #56]	; (1e8c0 <sd_mmc_spi_install_mmc+0xd8>)
   1e888:	4798      	blx	r3
   1e88a:	0003      	movs	r3, r0
   1e88c:	001a      	movs	r2, r3
   1e88e:	2301      	movs	r3, #1
   1e890:	4053      	eors	r3, r2
   1e892:	b2db      	uxtb	r3, r3
   1e894:	2b00      	cmp	r3, #0
   1e896:	d001      	beq.n	1e89c <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1e898:	2300      	movs	r3, #0
   1e89a:	e00d      	b.n	1e8b8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1e89c:	4b10      	ldr	r3, [pc, #64]	; (1e8e0 <sd_mmc_spi_install_mmc+0xf8>)
   1e89e:	4798      	blx	r3
   1e8a0:	0003      	movs	r3, r0
   1e8a2:	001a      	movs	r2, r3
   1e8a4:	2301      	movs	r3, #1
   1e8a6:	4053      	eors	r3, r2
   1e8a8:	b2db      	uxtb	r3, r3
   1e8aa:	2b00      	cmp	r3, #0
   1e8ac:	d001      	beq.n	1e8b2 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1e8ae:	2300      	movs	r3, #0
   1e8b0:	e002      	b.n	1e8b8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1e8b2:	4b0c      	ldr	r3, [pc, #48]	; (1e8e4 <sd_mmc_spi_install_mmc+0xfc>)
   1e8b4:	4798      	blx	r3
	return true;
   1e8b6:	2301      	movs	r3, #1
}
   1e8b8:	0018      	movs	r0, r3
   1e8ba:	46bd      	mov	sp, r7
   1e8bc:	b002      	add	sp, #8
   1e8be:	bd80      	pop	{r7, pc}
   1e8c0:	0001f871 	.word	0x0001f871
   1e8c4:	0001ddf5 	.word	0x0001ddf5
   1e8c8:	0000113b 	.word	0x0000113b
   1e8cc:	0001e12d 	.word	0x0001e12d
   1e8d0:	0001e19d 	.word	0x0001e19d
   1e8d4:	200040c4 	.word	0x200040c4
   1e8d8:	0001e001 	.word	0x0001e001
   1e8dc:	00001110 	.word	0x00001110
   1e8e0:	0001e3b9 	.word	0x0001e3b9
   1e8e4:	0001e5e1 	.word	0x0001e5e1

0001e8e8 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1e8e8:	b580      	push	{r7, lr}
   1e8ea:	b082      	sub	sp, #8
   1e8ec:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1e8ee:	1dfb      	adds	r3, r7, #7
   1e8f0:	2200      	movs	r2, #0
   1e8f2:	701a      	strb	r2, [r3, #0]
   1e8f4:	e00c      	b.n	1e910 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1e8f6:	1dfb      	adds	r3, r7, #7
   1e8f8:	781b      	ldrb	r3, [r3, #0]
   1e8fa:	4a0c      	ldr	r2, [pc, #48]	; (1e92c <sd_mmc_init+0x44>)
   1e8fc:	015b      	lsls	r3, r3, #5
   1e8fe:	18d3      	adds	r3, r2, r3
   1e900:	330a      	adds	r3, #10
   1e902:	2204      	movs	r2, #4
   1e904:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1e906:	1dfb      	adds	r3, r7, #7
   1e908:	781a      	ldrb	r2, [r3, #0]
   1e90a:	1dfb      	adds	r3, r7, #7
   1e90c:	3201      	adds	r2, #1
   1e90e:	701a      	strb	r2, [r3, #0]
   1e910:	1dfb      	adds	r3, r7, #7
   1e912:	781b      	ldrb	r3, [r3, #0]
   1e914:	2b00      	cmp	r3, #0
   1e916:	d0ee      	beq.n	1e8f6 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1e918:	4b05      	ldr	r3, [pc, #20]	; (1e930 <sd_mmc_init+0x48>)
   1e91a:	22ff      	movs	r2, #255	; 0xff
   1e91c:	701a      	strb	r2, [r3, #0]
	driver_init();
   1e91e:	4b05      	ldr	r3, [pc, #20]	; (1e934 <sd_mmc_init+0x4c>)
   1e920:	4798      	blx	r3
}
   1e922:	46c0      	nop			; (mov r8, r8)
   1e924:	46bd      	mov	sp, r7
   1e926:	b002      	add	sp, #8
   1e928:	bd80      	pop	{r7, pc}
   1e92a:	46c0      	nop			; (mov r8, r8)
   1e92c:	200040a0 	.word	0x200040a0
   1e930:	200040c0 	.word	0x200040c0
   1e934:	0001f691 	.word	0x0001f691

0001e938 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1e938:	b590      	push	{r4, r7, lr}
   1e93a:	b085      	sub	sp, #20
   1e93c:	af00      	add	r7, sp, #0
   1e93e:	0002      	movs	r2, r0
   1e940:	1dfb      	adds	r3, r7, #7
   1e942:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1e944:	230f      	movs	r3, #15
   1e946:	18fc      	adds	r4, r7, r3
   1e948:	1dfb      	adds	r3, r7, #7
   1e94a:	781b      	ldrb	r3, [r3, #0]
   1e94c:	0018      	movs	r0, r3
   1e94e:	4b13      	ldr	r3, [pc, #76]	; (1e99c <sd_mmc_check+0x64>)
   1e950:	4798      	blx	r3
   1e952:	0003      	movs	r3, r0
   1e954:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1e956:	230f      	movs	r3, #15
   1e958:	18fb      	adds	r3, r7, r3
   1e95a:	781b      	ldrb	r3, [r3, #0]
   1e95c:	2b01      	cmp	r3, #1
   1e95e:	d005      	beq.n	1e96c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1e960:	4b0f      	ldr	r3, [pc, #60]	; (1e9a0 <sd_mmc_check+0x68>)
   1e962:	4798      	blx	r3
		return sd_mmc_err;
   1e964:	230f      	movs	r3, #15
   1e966:	18fb      	adds	r3, r7, r3
   1e968:	781b      	ldrb	r3, [r3, #0]
   1e96a:	e012      	b.n	1e992 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1e96c:	4b0d      	ldr	r3, [pc, #52]	; (1e9a4 <sd_mmc_check+0x6c>)
   1e96e:	4798      	blx	r3
   1e970:	1e03      	subs	r3, r0, #0
   1e972:	d007      	beq.n	1e984 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1e974:	4b0c      	ldr	r3, [pc, #48]	; (1e9a8 <sd_mmc_check+0x70>)
   1e976:	681b      	ldr	r3, [r3, #0]
   1e978:	2200      	movs	r2, #0
   1e97a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1e97c:	4b08      	ldr	r3, [pc, #32]	; (1e9a0 <sd_mmc_check+0x68>)
   1e97e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1e980:	2301      	movs	r3, #1
   1e982:	e006      	b.n	1e992 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1e984:	4b08      	ldr	r3, [pc, #32]	; (1e9a8 <sd_mmc_check+0x70>)
   1e986:	681b      	ldr	r3, [r3, #0]
   1e988:	2203      	movs	r2, #3
   1e98a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1e98c:	4b04      	ldr	r3, [pc, #16]	; (1e9a0 <sd_mmc_check+0x68>)
   1e98e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1e990:	2303      	movs	r3, #3
}
   1e992:	0018      	movs	r0, r3
   1e994:	46bd      	mov	sp, r7
   1e996:	b005      	add	sp, #20
   1e998:	bd90      	pop	{r4, r7, pc}
   1e99a:	46c0      	nop			; (mov r8, r8)
   1e99c:	0001e51d 	.word	0x0001e51d
   1e9a0:	0001e619 	.word	0x0001e619
   1e9a4:	0001e63d 	.word	0x0001e63d
   1e9a8:	200040c4 	.word	0x200040c4

0001e9ac <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1e9ac:	b580      	push	{r7, lr}
   1e9ae:	b082      	sub	sp, #8
   1e9b0:	af00      	add	r7, sp, #0
   1e9b2:	0002      	movs	r2, r0
   1e9b4:	1dfb      	adds	r3, r7, #7
   1e9b6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1e9b8:	1dfb      	adds	r3, r7, #7
   1e9ba:	781b      	ldrb	r3, [r3, #0]
   1e9bc:	0018      	movs	r0, r3
   1e9be:	4b07      	ldr	r3, [pc, #28]	; (1e9dc <sd_mmc_get_type+0x30>)
   1e9c0:	4798      	blx	r3
   1e9c2:	1e03      	subs	r3, r0, #0
   1e9c4:	d001      	beq.n	1e9ca <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1e9c6:	2300      	movs	r3, #0
   1e9c8:	e004      	b.n	1e9d4 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1e9ca:	4b05      	ldr	r3, [pc, #20]	; (1e9e0 <sd_mmc_get_type+0x34>)
   1e9cc:	4798      	blx	r3
	return sd_mmc_card->type;
   1e9ce:	4b05      	ldr	r3, [pc, #20]	; (1e9e4 <sd_mmc_get_type+0x38>)
   1e9d0:	681b      	ldr	r3, [r3, #0]
   1e9d2:	7adb      	ldrb	r3, [r3, #11]
}
   1e9d4:	0018      	movs	r0, r3
   1e9d6:	46bd      	mov	sp, r7
   1e9d8:	b002      	add	sp, #8
   1e9da:	bd80      	pop	{r7, pc}
   1e9dc:	0001e51d 	.word	0x0001e51d
   1e9e0:	0001e619 	.word	0x0001e619
   1e9e4:	200040c4 	.word	0x200040c4

0001e9e8 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1e9e8:	b580      	push	{r7, lr}
   1e9ea:	b082      	sub	sp, #8
   1e9ec:	af00      	add	r7, sp, #0
   1e9ee:	0002      	movs	r2, r0
   1e9f0:	1dfb      	adds	r3, r7, #7
   1e9f2:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1e9f4:	1dfb      	adds	r3, r7, #7
   1e9f6:	781b      	ldrb	r3, [r3, #0]
   1e9f8:	0018      	movs	r0, r3
   1e9fa:	4b07      	ldr	r3, [pc, #28]	; (1ea18 <sd_mmc_get_capacity+0x30>)
   1e9fc:	4798      	blx	r3
   1e9fe:	1e03      	subs	r3, r0, #0
   1ea00:	d001      	beq.n	1ea06 <sd_mmc_get_capacity+0x1e>
		return 0;
   1ea02:	2300      	movs	r3, #0
   1ea04:	e004      	b.n	1ea10 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1ea06:	4b05      	ldr	r3, [pc, #20]	; (1ea1c <sd_mmc_get_capacity+0x34>)
   1ea08:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1ea0a:	4b05      	ldr	r3, [pc, #20]	; (1ea20 <sd_mmc_get_capacity+0x38>)
   1ea0c:	681b      	ldr	r3, [r3, #0]
   1ea0e:	685b      	ldr	r3, [r3, #4]
}
   1ea10:	0018      	movs	r0, r3
   1ea12:	46bd      	mov	sp, r7
   1ea14:	b002      	add	sp, #8
   1ea16:	bd80      	pop	{r7, pc}
   1ea18:	0001e51d 	.word	0x0001e51d
   1ea1c:	0001e619 	.word	0x0001e619
   1ea20:	200040c4 	.word	0x200040c4

0001ea24 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1ea24:	b580      	push	{r7, lr}
   1ea26:	b082      	sub	sp, #8
   1ea28:	af00      	add	r7, sp, #0
   1ea2a:	0002      	movs	r2, r0
   1ea2c:	1dfb      	adds	r3, r7, #7
   1ea2e:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1ea30:	2300      	movs	r3, #0
}
   1ea32:	0018      	movs	r0, r3
   1ea34:	46bd      	mov	sp, r7
   1ea36:	b002      	add	sp, #8
   1ea38:	bd80      	pop	{r7, pc}
	...

0001ea3c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1ea3c:	b590      	push	{r4, r7, lr}
   1ea3e:	b089      	sub	sp, #36	; 0x24
   1ea40:	af02      	add	r7, sp, #8
   1ea42:	6039      	str	r1, [r7, #0]
   1ea44:	0011      	movs	r1, r2
   1ea46:	1dfb      	adds	r3, r7, #7
   1ea48:	1c02      	adds	r2, r0, #0
   1ea4a:	701a      	strb	r2, [r3, #0]
   1ea4c:	1d3b      	adds	r3, r7, #4
   1ea4e:	1c0a      	adds	r2, r1, #0
   1ea50:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1ea52:	230f      	movs	r3, #15
   1ea54:	18fc      	adds	r4, r7, r3
   1ea56:	1dfb      	adds	r3, r7, #7
   1ea58:	781b      	ldrb	r3, [r3, #0]
   1ea5a:	0018      	movs	r0, r3
   1ea5c:	4b29      	ldr	r3, [pc, #164]	; (1eb04 <sd_mmc_init_read_blocks+0xc8>)
   1ea5e:	4798      	blx	r3
   1ea60:	0003      	movs	r3, r0
   1ea62:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1ea64:	230f      	movs	r3, #15
   1ea66:	18fb      	adds	r3, r7, r3
   1ea68:	781b      	ldrb	r3, [r3, #0]
   1ea6a:	2b00      	cmp	r3, #0
   1ea6c:	d003      	beq.n	1ea76 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1ea6e:	230f      	movs	r3, #15
   1ea70:	18fb      	adds	r3, r7, r3
   1ea72:	781b      	ldrb	r3, [r3, #0]
   1ea74:	e041      	b.n	1eafa <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1ea76:	4b24      	ldr	r3, [pc, #144]	; (1eb08 <sd_mmc_init_read_blocks+0xcc>)
   1ea78:	4798      	blx	r3
   1ea7a:	0003      	movs	r3, r0
   1ea7c:	001a      	movs	r2, r3
   1ea7e:	2301      	movs	r3, #1
   1ea80:	4053      	eors	r3, r2
   1ea82:	b2db      	uxtb	r3, r3
   1ea84:	2b00      	cmp	r3, #0
   1ea86:	d003      	beq.n	1ea90 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1ea88:	4b20      	ldr	r3, [pc, #128]	; (1eb0c <sd_mmc_init_read_blocks+0xd0>)
   1ea8a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1ea8c:	2305      	movs	r3, #5
   1ea8e:	e034      	b.n	1eafa <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1ea90:	1d3b      	adds	r3, r7, #4
   1ea92:	881b      	ldrh	r3, [r3, #0]
   1ea94:	2b01      	cmp	r3, #1
   1ea96:	d902      	bls.n	1ea9e <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1ea98:	4b1d      	ldr	r3, [pc, #116]	; (1eb10 <sd_mmc_init_read_blocks+0xd4>)
   1ea9a:	617b      	str	r3, [r7, #20]
   1ea9c:	e001      	b.n	1eaa2 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1ea9e:	4b1d      	ldr	r3, [pc, #116]	; (1eb14 <sd_mmc_init_read_blocks+0xd8>)
   1eaa0:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1eaa2:	4b1d      	ldr	r3, [pc, #116]	; (1eb18 <sd_mmc_init_read_blocks+0xdc>)
   1eaa4:	681b      	ldr	r3, [r3, #0]
   1eaa6:	7adb      	ldrb	r3, [r3, #11]
   1eaa8:	001a      	movs	r2, r3
   1eaaa:	2308      	movs	r3, #8
   1eaac:	4013      	ands	r3, r2
   1eaae:	d002      	beq.n	1eab6 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1eab0:	683b      	ldr	r3, [r7, #0]
   1eab2:	613b      	str	r3, [r7, #16]
   1eab4:	e002      	b.n	1eabc <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1eab6:	683b      	ldr	r3, [r7, #0]
   1eab8:	025b      	lsls	r3, r3, #9
   1eaba:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1eabc:	1d3b      	adds	r3, r7, #4
   1eabe:	881c      	ldrh	r4, [r3, #0]
   1eac0:	2380      	movs	r3, #128	; 0x80
   1eac2:	009a      	lsls	r2, r3, #2
   1eac4:	6939      	ldr	r1, [r7, #16]
   1eac6:	6978      	ldr	r0, [r7, #20]
   1eac8:	2301      	movs	r3, #1
   1eaca:	9300      	str	r3, [sp, #0]
   1eacc:	0023      	movs	r3, r4
   1eace:	4c13      	ldr	r4, [pc, #76]	; (1eb1c <sd_mmc_init_read_blocks+0xe0>)
   1ead0:	47a0      	blx	r4
   1ead2:	0003      	movs	r3, r0
   1ead4:	001a      	movs	r2, r3
   1ead6:	2301      	movs	r3, #1
   1ead8:	4053      	eors	r3, r2
   1eada:	b2db      	uxtb	r3, r3
   1eadc:	2b00      	cmp	r3, #0
   1eade:	d003      	beq.n	1eae8 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1eae0:	4b0a      	ldr	r3, [pc, #40]	; (1eb0c <sd_mmc_init_read_blocks+0xd0>)
   1eae2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1eae4:	2305      	movs	r3, #5
   1eae6:	e008      	b.n	1eafa <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1eae8:	4b0d      	ldr	r3, [pc, #52]	; (1eb20 <sd_mmc_init_read_blocks+0xe4>)
   1eaea:	1d3a      	adds	r2, r7, #4
   1eaec:	8812      	ldrh	r2, [r2, #0]
   1eaee:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1eaf0:	4b0c      	ldr	r3, [pc, #48]	; (1eb24 <sd_mmc_init_read_blocks+0xe8>)
   1eaf2:	1d3a      	adds	r2, r7, #4
   1eaf4:	8812      	ldrh	r2, [r2, #0]
   1eaf6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1eaf8:	2300      	movs	r3, #0
}
   1eafa:	0018      	movs	r0, r3
   1eafc:	46bd      	mov	sp, r7
   1eafe:	b007      	add	sp, #28
   1eb00:	bd90      	pop	{r4, r7, pc}
   1eb02:	46c0      	nop			; (mov r8, r8)
   1eb04:	0001e51d 	.word	0x0001e51d
   1eb08:	0001e3b9 	.word	0x0001e3b9
   1eb0c:	0001e619 	.word	0x0001e619
   1eb10:	00101112 	.word	0x00101112
   1eb14:	00081111 	.word	0x00081111
   1eb18:	200040c4 	.word	0x200040c4
   1eb1c:	0001f899 	.word	0x0001f899
   1eb20:	200040ca 	.word	0x200040ca
   1eb24:	200040c8 	.word	0x200040c8

0001eb28 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1eb28:	b580      	push	{r7, lr}
   1eb2a:	b082      	sub	sp, #8
   1eb2c:	af00      	add	r7, sp, #0
   1eb2e:	6078      	str	r0, [r7, #4]
   1eb30:	000a      	movs	r2, r1
   1eb32:	1cbb      	adds	r3, r7, #2
   1eb34:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1eb36:	1cbb      	adds	r3, r7, #2
   1eb38:	881a      	ldrh	r2, [r3, #0]
   1eb3a:	687b      	ldr	r3, [r7, #4]
   1eb3c:	0011      	movs	r1, r2
   1eb3e:	0018      	movs	r0, r3
   1eb40:	4b0d      	ldr	r3, [pc, #52]	; (1eb78 <sd_mmc_start_read_blocks+0x50>)
   1eb42:	4798      	blx	r3
   1eb44:	0003      	movs	r3, r0
   1eb46:	001a      	movs	r2, r3
   1eb48:	2301      	movs	r3, #1
   1eb4a:	4053      	eors	r3, r2
   1eb4c:	b2db      	uxtb	r3, r3
   1eb4e:	2b00      	cmp	r3, #0
   1eb50:	d004      	beq.n	1eb5c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1eb52:	4b0a      	ldr	r3, [pc, #40]	; (1eb7c <sd_mmc_start_read_blocks+0x54>)
   1eb54:	2200      	movs	r2, #0
   1eb56:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1eb58:	2305      	movs	r3, #5
   1eb5a:	e008      	b.n	1eb6e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1eb5c:	4b07      	ldr	r3, [pc, #28]	; (1eb7c <sd_mmc_start_read_blocks+0x54>)
   1eb5e:	881a      	ldrh	r2, [r3, #0]
   1eb60:	1cbb      	adds	r3, r7, #2
   1eb62:	881b      	ldrh	r3, [r3, #0]
   1eb64:	1ad3      	subs	r3, r2, r3
   1eb66:	b29a      	uxth	r2, r3
   1eb68:	4b04      	ldr	r3, [pc, #16]	; (1eb7c <sd_mmc_start_read_blocks+0x54>)
   1eb6a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1eb6c:	2300      	movs	r3, #0
}
   1eb6e:	0018      	movs	r0, r3
   1eb70:	46bd      	mov	sp, r7
   1eb72:	b002      	add	sp, #8
   1eb74:	bd80      	pop	{r7, pc}
   1eb76:	46c0      	nop			; (mov r8, r8)
   1eb78:	0001fb69 	.word	0x0001fb69
   1eb7c:	200040ca 	.word	0x200040ca

0001eb80 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1eb80:	b580      	push	{r7, lr}
   1eb82:	b082      	sub	sp, #8
   1eb84:	af00      	add	r7, sp, #0
   1eb86:	0002      	movs	r2, r0
   1eb88:	1dfb      	adds	r3, r7, #7
   1eb8a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1eb8c:	4b1c      	ldr	r3, [pc, #112]	; (1ec00 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1eb8e:	4798      	blx	r3
   1eb90:	0003      	movs	r3, r0
   1eb92:	001a      	movs	r2, r3
   1eb94:	2301      	movs	r3, #1
   1eb96:	4053      	eors	r3, r2
   1eb98:	b2db      	uxtb	r3, r3
   1eb9a:	2b00      	cmp	r3, #0
   1eb9c:	d001      	beq.n	1eba2 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1eb9e:	2305      	movs	r3, #5
   1eba0:	e029      	b.n	1ebf6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1eba2:	1dfb      	adds	r3, r7, #7
   1eba4:	781b      	ldrb	r3, [r3, #0]
   1eba6:	2b00      	cmp	r3, #0
   1eba8:	d003      	beq.n	1ebb2 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1ebaa:	4b16      	ldr	r3, [pc, #88]	; (1ec04 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1ebac:	2200      	movs	r2, #0
   1ebae:	801a      	strh	r2, [r3, #0]
   1ebb0:	e005      	b.n	1ebbe <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1ebb2:	4b14      	ldr	r3, [pc, #80]	; (1ec04 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1ebb4:	881b      	ldrh	r3, [r3, #0]
   1ebb6:	2b00      	cmp	r3, #0
   1ebb8:	d001      	beq.n	1ebbe <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1ebba:	2300      	movs	r3, #0
   1ebbc:	e01b      	b.n	1ebf6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1ebbe:	4b12      	ldr	r3, [pc, #72]	; (1ec08 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1ebc0:	881b      	ldrh	r3, [r3, #0]
   1ebc2:	2b01      	cmp	r3, #1
   1ebc4:	d103      	bne.n	1ebce <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1ebc6:	4b11      	ldr	r3, [pc, #68]	; (1ec0c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1ebc8:	4798      	blx	r3
		return SD_MMC_OK;
   1ebca:	2300      	movs	r3, #0
   1ebcc:	e013      	b.n	1ebf6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1ebce:	4b10      	ldr	r3, [pc, #64]	; (1ec10 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1ebd0:	2100      	movs	r1, #0
   1ebd2:	0018      	movs	r0, r3
   1ebd4:	4b0f      	ldr	r3, [pc, #60]	; (1ec14 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1ebd6:	4798      	blx	r3
   1ebd8:	0003      	movs	r3, r0
   1ebda:	001a      	movs	r2, r3
   1ebdc:	2301      	movs	r3, #1
   1ebde:	4053      	eors	r3, r2
   1ebe0:	b2db      	uxtb	r3, r3
   1ebe2:	2b00      	cmp	r3, #0
   1ebe4:	d004      	beq.n	1ebf0 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1ebe6:	4b0a      	ldr	r3, [pc, #40]	; (1ec10 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1ebe8:	2100      	movs	r1, #0
   1ebea:	0018      	movs	r0, r3
   1ebec:	4b09      	ldr	r3, [pc, #36]	; (1ec14 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1ebee:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1ebf0:	4b06      	ldr	r3, [pc, #24]	; (1ec0c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1ebf2:	4798      	blx	r3
	return SD_MMC_OK;
   1ebf4:	2300      	movs	r3, #0
}
   1ebf6:	0018      	movs	r0, r3
   1ebf8:	46bd      	mov	sp, r7
   1ebfa:	b002      	add	sp, #8
   1ebfc:	bd80      	pop	{r7, pc}
   1ebfe:	46c0      	nop			; (mov r8, r8)
   1ec00:	0001fc0d 	.word	0x0001fc0d
   1ec04:	200040ca 	.word	0x200040ca
   1ec08:	200040c8 	.word	0x200040c8
   1ec0c:	0001e619 	.word	0x0001e619
   1ec10:	0000310c 	.word	0x0000310c
   1ec14:	0001f871 	.word	0x0001f871

0001ec18 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1ec18:	b590      	push	{r4, r7, lr}
   1ec1a:	b089      	sub	sp, #36	; 0x24
   1ec1c:	af02      	add	r7, sp, #8
   1ec1e:	6039      	str	r1, [r7, #0]
   1ec20:	0011      	movs	r1, r2
   1ec22:	1dfb      	adds	r3, r7, #7
   1ec24:	1c02      	adds	r2, r0, #0
   1ec26:	701a      	strb	r2, [r3, #0]
   1ec28:	1d3b      	adds	r3, r7, #4
   1ec2a:	1c0a      	adds	r2, r1, #0
   1ec2c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1ec2e:	230f      	movs	r3, #15
   1ec30:	18fc      	adds	r4, r7, r3
   1ec32:	1dfb      	adds	r3, r7, #7
   1ec34:	781b      	ldrb	r3, [r3, #0]
   1ec36:	0018      	movs	r0, r3
   1ec38:	4b28      	ldr	r3, [pc, #160]	; (1ecdc <sd_mmc_init_write_blocks+0xc4>)
   1ec3a:	4798      	blx	r3
   1ec3c:	0003      	movs	r3, r0
   1ec3e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1ec40:	230f      	movs	r3, #15
   1ec42:	18fb      	adds	r3, r7, r3
   1ec44:	781b      	ldrb	r3, [r3, #0]
   1ec46:	2b00      	cmp	r3, #0
   1ec48:	d003      	beq.n	1ec52 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1ec4a:	230f      	movs	r3, #15
   1ec4c:	18fb      	adds	r3, r7, r3
   1ec4e:	781b      	ldrb	r3, [r3, #0]
   1ec50:	e03f      	b.n	1ecd2 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1ec52:	1dfb      	adds	r3, r7, #7
   1ec54:	781b      	ldrb	r3, [r3, #0]
   1ec56:	0018      	movs	r0, r3
   1ec58:	4b21      	ldr	r3, [pc, #132]	; (1ece0 <sd_mmc_init_write_blocks+0xc8>)
   1ec5a:	4798      	blx	r3
   1ec5c:	1e03      	subs	r3, r0, #0
   1ec5e:	d003      	beq.n	1ec68 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1ec60:	4b20      	ldr	r3, [pc, #128]	; (1ece4 <sd_mmc_init_write_blocks+0xcc>)
   1ec62:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1ec64:	2307      	movs	r3, #7
   1ec66:	e034      	b.n	1ecd2 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1ec68:	1d3b      	adds	r3, r7, #4
   1ec6a:	881b      	ldrh	r3, [r3, #0]
   1ec6c:	2b01      	cmp	r3, #1
   1ec6e:	d902      	bls.n	1ec76 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1ec70:	4b1d      	ldr	r3, [pc, #116]	; (1ece8 <sd_mmc_init_write_blocks+0xd0>)
   1ec72:	617b      	str	r3, [r7, #20]
   1ec74:	e001      	b.n	1ec7a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1ec76:	4b1d      	ldr	r3, [pc, #116]	; (1ecec <sd_mmc_init_write_blocks+0xd4>)
   1ec78:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1ec7a:	4b1d      	ldr	r3, [pc, #116]	; (1ecf0 <sd_mmc_init_write_blocks+0xd8>)
   1ec7c:	681b      	ldr	r3, [r3, #0]
   1ec7e:	7adb      	ldrb	r3, [r3, #11]
   1ec80:	001a      	movs	r2, r3
   1ec82:	2308      	movs	r3, #8
   1ec84:	4013      	ands	r3, r2
   1ec86:	d002      	beq.n	1ec8e <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1ec88:	683b      	ldr	r3, [r7, #0]
   1ec8a:	613b      	str	r3, [r7, #16]
   1ec8c:	e002      	b.n	1ec94 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1ec8e:	683b      	ldr	r3, [r7, #0]
   1ec90:	025b      	lsls	r3, r3, #9
   1ec92:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1ec94:	1d3b      	adds	r3, r7, #4
   1ec96:	881c      	ldrh	r4, [r3, #0]
   1ec98:	2380      	movs	r3, #128	; 0x80
   1ec9a:	009a      	lsls	r2, r3, #2
   1ec9c:	6939      	ldr	r1, [r7, #16]
   1ec9e:	6978      	ldr	r0, [r7, #20]
   1eca0:	2301      	movs	r3, #1
   1eca2:	9300      	str	r3, [sp, #0]
   1eca4:	0023      	movs	r3, r4
   1eca6:	4c13      	ldr	r4, [pc, #76]	; (1ecf4 <sd_mmc_init_write_blocks+0xdc>)
   1eca8:	47a0      	blx	r4
   1ecaa:	0003      	movs	r3, r0
   1ecac:	001a      	movs	r2, r3
   1ecae:	2301      	movs	r3, #1
   1ecb0:	4053      	eors	r3, r2
   1ecb2:	b2db      	uxtb	r3, r3
   1ecb4:	2b00      	cmp	r3, #0
   1ecb6:	d003      	beq.n	1ecc0 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1ecb8:	4b0a      	ldr	r3, [pc, #40]	; (1ece4 <sd_mmc_init_write_blocks+0xcc>)
   1ecba:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1ecbc:	2305      	movs	r3, #5
   1ecbe:	e008      	b.n	1ecd2 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1ecc0:	4b0d      	ldr	r3, [pc, #52]	; (1ecf8 <sd_mmc_init_write_blocks+0xe0>)
   1ecc2:	1d3a      	adds	r2, r7, #4
   1ecc4:	8812      	ldrh	r2, [r2, #0]
   1ecc6:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1ecc8:	4b0c      	ldr	r3, [pc, #48]	; (1ecfc <sd_mmc_init_write_blocks+0xe4>)
   1ecca:	1d3a      	adds	r2, r7, #4
   1eccc:	8812      	ldrh	r2, [r2, #0]
   1ecce:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1ecd0:	2300      	movs	r3, #0
}
   1ecd2:	0018      	movs	r0, r3
   1ecd4:	46bd      	mov	sp, r7
   1ecd6:	b007      	add	sp, #28
   1ecd8:	bd90      	pop	{r4, r7, pc}
   1ecda:	46c0      	nop			; (mov r8, r8)
   1ecdc:	0001e51d 	.word	0x0001e51d
   1ece0:	0001ea25 	.word	0x0001ea25
   1ece4:	0001e619 	.word	0x0001e619
   1ece8:	00109119 	.word	0x00109119
   1ecec:	00089118 	.word	0x00089118
   1ecf0:	200040c4 	.word	0x200040c4
   1ecf4:	0001f899 	.word	0x0001f899
   1ecf8:	200040ca 	.word	0x200040ca
   1ecfc:	200040c8 	.word	0x200040c8

0001ed00 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1ed00:	b580      	push	{r7, lr}
   1ed02:	b082      	sub	sp, #8
   1ed04:	af00      	add	r7, sp, #0
   1ed06:	6078      	str	r0, [r7, #4]
   1ed08:	000a      	movs	r2, r1
   1ed0a:	1cbb      	adds	r3, r7, #2
   1ed0c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1ed0e:	1cbb      	adds	r3, r7, #2
   1ed10:	881a      	ldrh	r2, [r3, #0]
   1ed12:	687b      	ldr	r3, [r7, #4]
   1ed14:	0011      	movs	r1, r2
   1ed16:	0018      	movs	r0, r3
   1ed18:	4b0d      	ldr	r3, [pc, #52]	; (1ed50 <sd_mmc_start_write_blocks+0x50>)
   1ed1a:	4798      	blx	r3
   1ed1c:	0003      	movs	r3, r0
   1ed1e:	001a      	movs	r2, r3
   1ed20:	2301      	movs	r3, #1
   1ed22:	4053      	eors	r3, r2
   1ed24:	b2db      	uxtb	r3, r3
   1ed26:	2b00      	cmp	r3, #0
   1ed28:	d004      	beq.n	1ed34 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1ed2a:	4b0a      	ldr	r3, [pc, #40]	; (1ed54 <sd_mmc_start_write_blocks+0x54>)
   1ed2c:	2200      	movs	r2, #0
   1ed2e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1ed30:	2305      	movs	r3, #5
   1ed32:	e008      	b.n	1ed46 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1ed34:	4b07      	ldr	r3, [pc, #28]	; (1ed54 <sd_mmc_start_write_blocks+0x54>)
   1ed36:	881a      	ldrh	r2, [r3, #0]
   1ed38:	1cbb      	adds	r3, r7, #2
   1ed3a:	881b      	ldrh	r3, [r3, #0]
   1ed3c:	1ad3      	subs	r3, r2, r3
   1ed3e:	b29a      	uxth	r2, r3
   1ed40:	4b04      	ldr	r3, [pc, #16]	; (1ed54 <sd_mmc_start_write_blocks+0x54>)
   1ed42:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1ed44:	2300      	movs	r3, #0
}
   1ed46:	0018      	movs	r0, r3
   1ed48:	46bd      	mov	sp, r7
   1ed4a:	b002      	add	sp, #8
   1ed4c:	bd80      	pop	{r7, pc}
   1ed4e:	46c0      	nop			; (mov r8, r8)
   1ed50:	0001fc19 	.word	0x0001fc19
   1ed54:	200040ca 	.word	0x200040ca

0001ed58 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1ed58:	b580      	push	{r7, lr}
   1ed5a:	b082      	sub	sp, #8
   1ed5c:	af00      	add	r7, sp, #0
   1ed5e:	0002      	movs	r2, r0
   1ed60:	1dfb      	adds	r3, r7, #7
   1ed62:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1ed64:	4b13      	ldr	r3, [pc, #76]	; (1edb4 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1ed66:	4798      	blx	r3
   1ed68:	0003      	movs	r3, r0
   1ed6a:	001a      	movs	r2, r3
   1ed6c:	2301      	movs	r3, #1
   1ed6e:	4053      	eors	r3, r2
   1ed70:	b2db      	uxtb	r3, r3
   1ed72:	2b00      	cmp	r3, #0
   1ed74:	d001      	beq.n	1ed7a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1ed76:	2305      	movs	r3, #5
   1ed78:	e018      	b.n	1edac <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1ed7a:	1dfb      	adds	r3, r7, #7
   1ed7c:	781b      	ldrb	r3, [r3, #0]
   1ed7e:	2b00      	cmp	r3, #0
   1ed80:	d003      	beq.n	1ed8a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1ed82:	4b0d      	ldr	r3, [pc, #52]	; (1edb8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1ed84:	2200      	movs	r2, #0
   1ed86:	801a      	strh	r2, [r3, #0]
   1ed88:	e005      	b.n	1ed96 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1ed8a:	4b0b      	ldr	r3, [pc, #44]	; (1edb8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1ed8c:	881b      	ldrh	r3, [r3, #0]
   1ed8e:	2b00      	cmp	r3, #0
   1ed90:	d001      	beq.n	1ed96 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1ed92:	2300      	movs	r3, #0
   1ed94:	e00a      	b.n	1edac <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1ed96:	4b09      	ldr	r3, [pc, #36]	; (1edbc <sd_mmc_wait_end_of_write_blocks+0x64>)
   1ed98:	881b      	ldrh	r3, [r3, #0]
   1ed9a:	2b01      	cmp	r3, #1
   1ed9c:	d103      	bne.n	1eda6 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1ed9e:	4b08      	ldr	r3, [pc, #32]	; (1edc0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1eda0:	4798      	blx	r3
		return SD_MMC_OK;
   1eda2:	2300      	movs	r3, #0
   1eda4:	e002      	b.n	1edac <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1eda6:	4b06      	ldr	r3, [pc, #24]	; (1edc0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1eda8:	4798      	blx	r3
	return SD_MMC_OK;
   1edaa:	2300      	movs	r3, #0
}
   1edac:	0018      	movs	r0, r3
   1edae:	46bd      	mov	sp, r7
   1edb0:	b002      	add	sp, #8
   1edb2:	bd80      	pop	{r7, pc}
   1edb4:	0001fcd9 	.word	0x0001fcd9
   1edb8:	200040ca 	.word	0x200040ca
   1edbc:	200040c8 	.word	0x200040c8
   1edc0:	0001e619 	.word	0x0001e619

0001edc4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1edc4:	b580      	push	{r7, lr}
   1edc6:	b082      	sub	sp, #8
   1edc8:	af00      	add	r7, sp, #0
   1edca:	0002      	movs	r2, r0
   1edcc:	1dfb      	adds	r3, r7, #7
   1edce:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1edd0:	1dfb      	adds	r3, r7, #7
   1edd2:	781b      	ldrb	r3, [r3, #0]
   1edd4:	0018      	movs	r0, r3
   1edd6:	4b16      	ldr	r3, [pc, #88]	; (1ee30 <sd_mmc_test_unit_ready+0x6c>)
   1edd8:	4798      	blx	r3
   1edda:	0003      	movs	r3, r0
   1eddc:	2b01      	cmp	r3, #1
   1edde:	d019      	beq.n	1ee14 <sd_mmc_test_unit_ready+0x50>
   1ede0:	2b02      	cmp	r3, #2
   1ede2:	d019      	beq.n	1ee18 <sd_mmc_test_unit_ready+0x54>
   1ede4:	2b00      	cmp	r3, #0
   1ede6:	d11e      	bne.n	1ee26 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1ede8:	1dfb      	adds	r3, r7, #7
   1edea:	781b      	ldrb	r3, [r3, #0]
   1edec:	4a11      	ldr	r2, [pc, #68]	; (1ee34 <sd_mmc_test_unit_ready+0x70>)
   1edee:	5cd3      	ldrb	r3, [r2, r3]
   1edf0:	2b00      	cmp	r3, #0
   1edf2:	d001      	beq.n	1edf8 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1edf4:	2302      	movs	r3, #2
   1edf6:	e017      	b.n	1ee28 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1edf8:	1dfb      	adds	r3, r7, #7
   1edfa:	781b      	ldrb	r3, [r3, #0]
   1edfc:	0018      	movs	r0, r3
   1edfe:	4b0e      	ldr	r3, [pc, #56]	; (1ee38 <sd_mmc_test_unit_ready+0x74>)
   1ee00:	4798      	blx	r3
   1ee02:	0003      	movs	r3, r0
   1ee04:	001a      	movs	r2, r3
   1ee06:	2303      	movs	r3, #3
   1ee08:	4013      	ands	r3, r2
   1ee0a:	d001      	beq.n	1ee10 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1ee0c:	2300      	movs	r3, #0
   1ee0e:	e00b      	b.n	1ee28 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1ee10:	2302      	movs	r3, #2
   1ee12:	e009      	b.n	1ee28 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1ee14:	2303      	movs	r3, #3
   1ee16:	e007      	b.n	1ee28 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1ee18:	1dfb      	adds	r3, r7, #7
   1ee1a:	781b      	ldrb	r3, [r3, #0]
   1ee1c:	4a05      	ldr	r2, [pc, #20]	; (1ee34 <sd_mmc_test_unit_ready+0x70>)
   1ee1e:	2100      	movs	r1, #0
   1ee20:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1ee22:	2302      	movs	r3, #2
   1ee24:	e000      	b.n	1ee28 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1ee26:	2301      	movs	r3, #1
	}
}
   1ee28:	0018      	movs	r0, r3
   1ee2a:	46bd      	mov	sp, r7
   1ee2c:	b002      	add	sp, #8
   1ee2e:	bd80      	pop	{r7, pc}
   1ee30:	0001e939 	.word	0x0001e939
   1ee34:	200040cc 	.word	0x200040cc
   1ee38:	0001e9ad 	.word	0x0001e9ad

0001ee3c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1ee3c:	b580      	push	{r7, lr}
   1ee3e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1ee40:	2000      	movs	r0, #0
   1ee42:	4b03      	ldr	r3, [pc, #12]	; (1ee50 <sd_mmc_test_unit_ready_0+0x14>)
   1ee44:	4798      	blx	r3
   1ee46:	0003      	movs	r3, r0
}
   1ee48:	0018      	movs	r0, r3
   1ee4a:	46bd      	mov	sp, r7
   1ee4c:	bd80      	pop	{r7, pc}
   1ee4e:	46c0      	nop			; (mov r8, r8)
   1ee50:	0001edc5 	.word	0x0001edc5

0001ee54 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1ee54:	b580      	push	{r7, lr}
   1ee56:	b082      	sub	sp, #8
   1ee58:	af00      	add	r7, sp, #0
   1ee5a:	0002      	movs	r2, r0
   1ee5c:	6039      	str	r1, [r7, #0]
   1ee5e:	1dfb      	adds	r3, r7, #7
   1ee60:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1ee62:	1dfb      	adds	r3, r7, #7
   1ee64:	781b      	ldrb	r3, [r3, #0]
   1ee66:	0018      	movs	r0, r3
   1ee68:	4b08      	ldr	r3, [pc, #32]	; (1ee8c <sd_mmc_read_capacity+0x38>)
   1ee6a:	4798      	blx	r3
   1ee6c:	0003      	movs	r3, r0
   1ee6e:	005b      	lsls	r3, r3, #1
   1ee70:	1e5a      	subs	r2, r3, #1
   1ee72:	683b      	ldr	r3, [r7, #0]
   1ee74:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1ee76:	1dfb      	adds	r3, r7, #7
   1ee78:	781b      	ldrb	r3, [r3, #0]
   1ee7a:	0018      	movs	r0, r3
   1ee7c:	4b04      	ldr	r3, [pc, #16]	; (1ee90 <sd_mmc_read_capacity+0x3c>)
   1ee7e:	4798      	blx	r3
   1ee80:	0003      	movs	r3, r0
}
   1ee82:	0018      	movs	r0, r3
   1ee84:	46bd      	mov	sp, r7
   1ee86:	b002      	add	sp, #8
   1ee88:	bd80      	pop	{r7, pc}
   1ee8a:	46c0      	nop			; (mov r8, r8)
   1ee8c:	0001e9e9 	.word	0x0001e9e9
   1ee90:	0001edc5 	.word	0x0001edc5

0001ee94 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1ee94:	b580      	push	{r7, lr}
   1ee96:	b082      	sub	sp, #8
   1ee98:	af00      	add	r7, sp, #0
   1ee9a:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1ee9c:	687b      	ldr	r3, [r7, #4]
   1ee9e:	0019      	movs	r1, r3
   1eea0:	2000      	movs	r0, #0
   1eea2:	4b03      	ldr	r3, [pc, #12]	; (1eeb0 <sd_mmc_read_capacity_0+0x1c>)
   1eea4:	4798      	blx	r3
   1eea6:	0003      	movs	r3, r0
}
   1eea8:	0018      	movs	r0, r3
   1eeaa:	46bd      	mov	sp, r7
   1eeac:	b002      	add	sp, #8
   1eeae:	bd80      	pop	{r7, pc}
   1eeb0:	0001ee55 	.word	0x0001ee55

0001eeb4 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1eeb4:	b580      	push	{r7, lr}
   1eeb6:	b082      	sub	sp, #8
   1eeb8:	af00      	add	r7, sp, #0
   1eeba:	0002      	movs	r2, r0
   1eebc:	1dfb      	adds	r3, r7, #7
   1eebe:	701a      	strb	r2, [r3, #0]
   1eec0:	1dbb      	adds	r3, r7, #6
   1eec2:	1c0a      	adds	r2, r1, #0
   1eec4:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1eec6:	1dfb      	adds	r3, r7, #7
   1eec8:	781b      	ldrb	r3, [r3, #0]
   1eeca:	4a04      	ldr	r2, [pc, #16]	; (1eedc <sd_mmc_unload+0x28>)
   1eecc:	1db9      	adds	r1, r7, #6
   1eece:	7809      	ldrb	r1, [r1, #0]
   1eed0:	54d1      	strb	r1, [r2, r3]
	return true;
   1eed2:	2301      	movs	r3, #1
}
   1eed4:	0018      	movs	r0, r3
   1eed6:	46bd      	mov	sp, r7
   1eed8:	b002      	add	sp, #8
   1eeda:	bd80      	pop	{r7, pc}
   1eedc:	200040cc 	.word	0x200040cc

0001eee0 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1eee0:	b580      	push	{r7, lr}
   1eee2:	b082      	sub	sp, #8
   1eee4:	af00      	add	r7, sp, #0
   1eee6:	0002      	movs	r2, r0
   1eee8:	1dfb      	adds	r3, r7, #7
   1eeea:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1eeec:	1dfb      	adds	r3, r7, #7
   1eeee:	781b      	ldrb	r3, [r3, #0]
   1eef0:	0019      	movs	r1, r3
   1eef2:	2000      	movs	r0, #0
   1eef4:	4b03      	ldr	r3, [pc, #12]	; (1ef04 <sd_mmc_unload_0+0x24>)
   1eef6:	4798      	blx	r3
   1eef8:	0003      	movs	r3, r0
}
   1eefa:	0018      	movs	r0, r3
   1eefc:	46bd      	mov	sp, r7
   1eefe:	b002      	add	sp, #8
   1ef00:	bd80      	pop	{r7, pc}
   1ef02:	46c0      	nop			; (mov r8, r8)
   1ef04:	0001eeb5 	.word	0x0001eeb5

0001ef08 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1ef08:	b580      	push	{r7, lr}
   1ef0a:	b082      	sub	sp, #8
   1ef0c:	af00      	add	r7, sp, #0
   1ef0e:	0002      	movs	r2, r0
   1ef10:	1dfb      	adds	r3, r7, #7
   1ef12:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1ef14:	1dfb      	adds	r3, r7, #7
   1ef16:	781b      	ldrb	r3, [r3, #0]
   1ef18:	0018      	movs	r0, r3
   1ef1a:	4b03      	ldr	r3, [pc, #12]	; (1ef28 <sd_mmc_wr_protect+0x20>)
   1ef1c:	4798      	blx	r3
   1ef1e:	0003      	movs	r3, r0
}
   1ef20:	0018      	movs	r0, r3
   1ef22:	46bd      	mov	sp, r7
   1ef24:	b002      	add	sp, #8
   1ef26:	bd80      	pop	{r7, pc}
   1ef28:	0001ea25 	.word	0x0001ea25

0001ef2c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1ef2c:	b580      	push	{r7, lr}
   1ef2e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1ef30:	2000      	movs	r0, #0
   1ef32:	4b03      	ldr	r3, [pc, #12]	; (1ef40 <sd_mmc_wr_protect_0+0x14>)
   1ef34:	4798      	blx	r3
   1ef36:	0003      	movs	r3, r0
}
   1ef38:	0018      	movs	r0, r3
   1ef3a:	46bd      	mov	sp, r7
   1ef3c:	bd80      	pop	{r7, pc}
   1ef3e:	46c0      	nop			; (mov r8, r8)
   1ef40:	0001ef09 	.word	0x0001ef09

0001ef44 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1ef44:	b580      	push	{r7, lr}
   1ef46:	b082      	sub	sp, #8
   1ef48:	af00      	add	r7, sp, #0
   1ef4a:	0002      	movs	r2, r0
   1ef4c:	1dfb      	adds	r3, r7, #7
   1ef4e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1ef50:	2301      	movs	r3, #1
}
   1ef52:	0018      	movs	r0, r3
   1ef54:	46bd      	mov	sp, r7
   1ef56:	b002      	add	sp, #8
   1ef58:	bd80      	pop	{r7, pc}
	...

0001ef5c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1ef5c:	b580      	push	{r7, lr}
   1ef5e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1ef60:	2000      	movs	r0, #0
   1ef62:	4b03      	ldr	r3, [pc, #12]	; (1ef70 <sd_mmc_removal_0+0x14>)
   1ef64:	4798      	blx	r3
   1ef66:	0003      	movs	r3, r0
}
   1ef68:	0018      	movs	r0, r3
   1ef6a:	46bd      	mov	sp, r7
   1ef6c:	bd80      	pop	{r7, pc}
   1ef6e:	46c0      	nop			; (mov r8, r8)
   1ef70:	0001ef45 	.word	0x0001ef45

0001ef74 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1ef74:	b580      	push	{r7, lr}
   1ef76:	b084      	sub	sp, #16
   1ef78:	af00      	add	r7, sp, #0
   1ef7a:	60b9      	str	r1, [r7, #8]
   1ef7c:	607a      	str	r2, [r7, #4]
   1ef7e:	230f      	movs	r3, #15
   1ef80:	18fb      	adds	r3, r7, r3
   1ef82:	1c02      	adds	r2, r0, #0
   1ef84:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1ef86:	68b9      	ldr	r1, [r7, #8]
   1ef88:	230f      	movs	r3, #15
   1ef8a:	18fb      	adds	r3, r7, r3
   1ef8c:	781b      	ldrb	r3, [r3, #0]
   1ef8e:	2201      	movs	r2, #1
   1ef90:	0018      	movs	r0, r3
   1ef92:	4b10      	ldr	r3, [pc, #64]	; (1efd4 <sd_mmc_mem_2_ram+0x60>)
   1ef94:	4798      	blx	r3
   1ef96:	1e03      	subs	r3, r0, #0
   1ef98:	d005      	beq.n	1efa6 <sd_mmc_mem_2_ram+0x32>
   1ef9a:	2b02      	cmp	r3, #2
   1ef9c:	d101      	bne.n	1efa2 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1ef9e:	2302      	movs	r3, #2
   1efa0:	e013      	b.n	1efca <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1efa2:	2301      	movs	r3, #1
   1efa4:	e011      	b.n	1efca <sd_mmc_mem_2_ram+0x56>
		break;
   1efa6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1efa8:	687b      	ldr	r3, [r7, #4]
   1efaa:	2101      	movs	r1, #1
   1efac:	0018      	movs	r0, r3
   1efae:	4b0a      	ldr	r3, [pc, #40]	; (1efd8 <sd_mmc_mem_2_ram+0x64>)
   1efb0:	4798      	blx	r3
   1efb2:	1e03      	subs	r3, r0, #0
   1efb4:	d001      	beq.n	1efba <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1efb6:	2301      	movs	r3, #1
   1efb8:	e007      	b.n	1efca <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1efba:	2000      	movs	r0, #0
   1efbc:	4b07      	ldr	r3, [pc, #28]	; (1efdc <sd_mmc_mem_2_ram+0x68>)
   1efbe:	4798      	blx	r3
   1efc0:	1e03      	subs	r3, r0, #0
   1efc2:	d001      	beq.n	1efc8 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1efc4:	2301      	movs	r3, #1
   1efc6:	e000      	b.n	1efca <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1efc8:	2300      	movs	r3, #0
}
   1efca:	0018      	movs	r0, r3
   1efcc:	46bd      	mov	sp, r7
   1efce:	b004      	add	sp, #16
   1efd0:	bd80      	pop	{r7, pc}
   1efd2:	46c0      	nop			; (mov r8, r8)
   1efd4:	0001ea3d 	.word	0x0001ea3d
   1efd8:	0001eb29 	.word	0x0001eb29
   1efdc:	0001eb81 	.word	0x0001eb81

0001efe0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1efe0:	b580      	push	{r7, lr}
   1efe2:	b082      	sub	sp, #8
   1efe4:	af00      	add	r7, sp, #0
   1efe6:	6078      	str	r0, [r7, #4]
   1efe8:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1efea:	683a      	ldr	r2, [r7, #0]
   1efec:	687b      	ldr	r3, [r7, #4]
   1efee:	0019      	movs	r1, r3
   1eff0:	2000      	movs	r0, #0
   1eff2:	4b03      	ldr	r3, [pc, #12]	; (1f000 <sd_mmc_mem_2_ram_0+0x20>)
   1eff4:	4798      	blx	r3
   1eff6:	0003      	movs	r3, r0
}
   1eff8:	0018      	movs	r0, r3
   1effa:	46bd      	mov	sp, r7
   1effc:	b002      	add	sp, #8
   1effe:	bd80      	pop	{r7, pc}
   1f000:	0001ef75 	.word	0x0001ef75

0001f004 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1f004:	b580      	push	{r7, lr}
   1f006:	b084      	sub	sp, #16
   1f008:	af00      	add	r7, sp, #0
   1f00a:	60b9      	str	r1, [r7, #8]
   1f00c:	607a      	str	r2, [r7, #4]
   1f00e:	230f      	movs	r3, #15
   1f010:	18fb      	adds	r3, r7, r3
   1f012:	1c02      	adds	r2, r0, #0
   1f014:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1f016:	68b9      	ldr	r1, [r7, #8]
   1f018:	230f      	movs	r3, #15
   1f01a:	18fb      	adds	r3, r7, r3
   1f01c:	781b      	ldrb	r3, [r3, #0]
   1f01e:	2201      	movs	r2, #1
   1f020:	0018      	movs	r0, r3
   1f022:	4b10      	ldr	r3, [pc, #64]	; (1f064 <sd_mmc_ram_2_mem+0x60>)
   1f024:	4798      	blx	r3
   1f026:	1e03      	subs	r3, r0, #0
   1f028:	d005      	beq.n	1f036 <sd_mmc_ram_2_mem+0x32>
   1f02a:	2b02      	cmp	r3, #2
   1f02c:	d101      	bne.n	1f032 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1f02e:	2302      	movs	r3, #2
   1f030:	e013      	b.n	1f05a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1f032:	2301      	movs	r3, #1
   1f034:	e011      	b.n	1f05a <sd_mmc_ram_2_mem+0x56>
		break;
   1f036:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1f038:	687b      	ldr	r3, [r7, #4]
   1f03a:	2101      	movs	r1, #1
   1f03c:	0018      	movs	r0, r3
   1f03e:	4b0a      	ldr	r3, [pc, #40]	; (1f068 <sd_mmc_ram_2_mem+0x64>)
   1f040:	4798      	blx	r3
   1f042:	1e03      	subs	r3, r0, #0
   1f044:	d001      	beq.n	1f04a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1f046:	2301      	movs	r3, #1
   1f048:	e007      	b.n	1f05a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1f04a:	2000      	movs	r0, #0
   1f04c:	4b07      	ldr	r3, [pc, #28]	; (1f06c <sd_mmc_ram_2_mem+0x68>)
   1f04e:	4798      	blx	r3
   1f050:	1e03      	subs	r3, r0, #0
   1f052:	d001      	beq.n	1f058 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1f054:	2301      	movs	r3, #1
   1f056:	e000      	b.n	1f05a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1f058:	2300      	movs	r3, #0
}
   1f05a:	0018      	movs	r0, r3
   1f05c:	46bd      	mov	sp, r7
   1f05e:	b004      	add	sp, #16
   1f060:	bd80      	pop	{r7, pc}
   1f062:	46c0      	nop			; (mov r8, r8)
   1f064:	0001ec19 	.word	0x0001ec19
   1f068:	0001ed01 	.word	0x0001ed01
   1f06c:	0001ed59 	.word	0x0001ed59

0001f070 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1f070:	b580      	push	{r7, lr}
   1f072:	b082      	sub	sp, #8
   1f074:	af00      	add	r7, sp, #0
   1f076:	6078      	str	r0, [r7, #4]
   1f078:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1f07a:	683a      	ldr	r2, [r7, #0]
   1f07c:	687b      	ldr	r3, [r7, #4]
   1f07e:	0019      	movs	r1, r3
   1f080:	2000      	movs	r0, #0
   1f082:	4b03      	ldr	r3, [pc, #12]	; (1f090 <sd_mmc_ram_2_mem_0+0x20>)
   1f084:	4798      	blx	r3
   1f086:	0003      	movs	r3, r0
}
   1f088:	0018      	movs	r0, r3
   1f08a:	46bd      	mov	sp, r7
   1f08c:	b002      	add	sp, #8
   1f08e:	bd80      	pop	{r7, pc}
   1f090:	0001f005 	.word	0x0001f005

0001f094 <system_pinmux_get_group_from_gpio_pin>:
{
   1f094:	b580      	push	{r7, lr}
   1f096:	b084      	sub	sp, #16
   1f098:	af00      	add	r7, sp, #0
   1f09a:	0002      	movs	r2, r0
   1f09c:	1dfb      	adds	r3, r7, #7
   1f09e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1f0a0:	230f      	movs	r3, #15
   1f0a2:	18fb      	adds	r3, r7, r3
   1f0a4:	1dfa      	adds	r2, r7, #7
   1f0a6:	7812      	ldrb	r2, [r2, #0]
   1f0a8:	09d2      	lsrs	r2, r2, #7
   1f0aa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1f0ac:	230e      	movs	r3, #14
   1f0ae:	18fb      	adds	r3, r7, r3
   1f0b0:	1dfa      	adds	r2, r7, #7
   1f0b2:	7812      	ldrb	r2, [r2, #0]
   1f0b4:	0952      	lsrs	r2, r2, #5
   1f0b6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1f0b8:	4b0d      	ldr	r3, [pc, #52]	; (1f0f0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1f0ba:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1f0bc:	230f      	movs	r3, #15
   1f0be:	18fb      	adds	r3, r7, r3
   1f0c0:	781b      	ldrb	r3, [r3, #0]
   1f0c2:	2b00      	cmp	r3, #0
   1f0c4:	d10f      	bne.n	1f0e6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1f0c6:	230f      	movs	r3, #15
   1f0c8:	18fb      	adds	r3, r7, r3
   1f0ca:	781b      	ldrb	r3, [r3, #0]
   1f0cc:	009b      	lsls	r3, r3, #2
   1f0ce:	2210      	movs	r2, #16
   1f0d0:	4694      	mov	ip, r2
   1f0d2:	44bc      	add	ip, r7
   1f0d4:	4463      	add	r3, ip
   1f0d6:	3b08      	subs	r3, #8
   1f0d8:	681a      	ldr	r2, [r3, #0]
   1f0da:	230e      	movs	r3, #14
   1f0dc:	18fb      	adds	r3, r7, r3
   1f0de:	781b      	ldrb	r3, [r3, #0]
   1f0e0:	01db      	lsls	r3, r3, #7
   1f0e2:	18d3      	adds	r3, r2, r3
   1f0e4:	e000      	b.n	1f0e8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1f0e6:	2300      	movs	r3, #0
}
   1f0e8:	0018      	movs	r0, r3
   1f0ea:	46bd      	mov	sp, r7
   1f0ec:	b004      	add	sp, #16
   1f0ee:	bd80      	pop	{r7, pc}
   1f0f0:	41004400 	.word	0x41004400

0001f0f4 <system_interrupt_enable>:
{
   1f0f4:	b580      	push	{r7, lr}
   1f0f6:	b082      	sub	sp, #8
   1f0f8:	af00      	add	r7, sp, #0
   1f0fa:	0002      	movs	r2, r0
   1f0fc:	1dfb      	adds	r3, r7, #7
   1f0fe:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1f100:	4b06      	ldr	r3, [pc, #24]	; (1f11c <system_interrupt_enable+0x28>)
   1f102:	1dfa      	adds	r2, r7, #7
   1f104:	7812      	ldrb	r2, [r2, #0]
   1f106:	0011      	movs	r1, r2
   1f108:	221f      	movs	r2, #31
   1f10a:	400a      	ands	r2, r1
   1f10c:	2101      	movs	r1, #1
   1f10e:	4091      	lsls	r1, r2
   1f110:	000a      	movs	r2, r1
   1f112:	601a      	str	r2, [r3, #0]
}
   1f114:	46c0      	nop			; (mov r8, r8)
   1f116:	46bd      	mov	sp, r7
   1f118:	b002      	add	sp, #8
   1f11a:	bd80      	pop	{r7, pc}
   1f11c:	e000e100 	.word	0xe000e100

0001f120 <port_get_group_from_gpio_pin>:
{
   1f120:	b580      	push	{r7, lr}
   1f122:	b082      	sub	sp, #8
   1f124:	af00      	add	r7, sp, #0
   1f126:	0002      	movs	r2, r0
   1f128:	1dfb      	adds	r3, r7, #7
   1f12a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1f12c:	1dfb      	adds	r3, r7, #7
   1f12e:	781b      	ldrb	r3, [r3, #0]
   1f130:	0018      	movs	r0, r3
   1f132:	4b03      	ldr	r3, [pc, #12]	; (1f140 <port_get_group_from_gpio_pin+0x20>)
   1f134:	4798      	blx	r3
   1f136:	0003      	movs	r3, r0
}
   1f138:	0018      	movs	r0, r3
   1f13a:	46bd      	mov	sp, r7
   1f13c:	b002      	add	sp, #8
   1f13e:	bd80      	pop	{r7, pc}
   1f140:	0001f095 	.word	0x0001f095

0001f144 <port_get_config_defaults>:
{
   1f144:	b580      	push	{r7, lr}
   1f146:	b082      	sub	sp, #8
   1f148:	af00      	add	r7, sp, #0
   1f14a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1f14c:	687b      	ldr	r3, [r7, #4]
   1f14e:	2200      	movs	r2, #0
   1f150:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1f152:	687b      	ldr	r3, [r7, #4]
   1f154:	2201      	movs	r2, #1
   1f156:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1f158:	687b      	ldr	r3, [r7, #4]
   1f15a:	2200      	movs	r2, #0
   1f15c:	709a      	strb	r2, [r3, #2]
}
   1f15e:	46c0      	nop			; (mov r8, r8)
   1f160:	46bd      	mov	sp, r7
   1f162:	b002      	add	sp, #8
   1f164:	bd80      	pop	{r7, pc}
	...

0001f168 <port_pin_set_output_level>:
{
   1f168:	b580      	push	{r7, lr}
   1f16a:	b084      	sub	sp, #16
   1f16c:	af00      	add	r7, sp, #0
   1f16e:	0002      	movs	r2, r0
   1f170:	1dfb      	adds	r3, r7, #7
   1f172:	701a      	strb	r2, [r3, #0]
   1f174:	1dbb      	adds	r3, r7, #6
   1f176:	1c0a      	adds	r2, r1, #0
   1f178:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1f17a:	1dfb      	adds	r3, r7, #7
   1f17c:	781b      	ldrb	r3, [r3, #0]
   1f17e:	0018      	movs	r0, r3
   1f180:	4b0d      	ldr	r3, [pc, #52]	; (1f1b8 <port_pin_set_output_level+0x50>)
   1f182:	4798      	blx	r3
   1f184:	0003      	movs	r3, r0
   1f186:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1f188:	1dfb      	adds	r3, r7, #7
   1f18a:	781b      	ldrb	r3, [r3, #0]
   1f18c:	221f      	movs	r2, #31
   1f18e:	4013      	ands	r3, r2
   1f190:	2201      	movs	r2, #1
   1f192:	409a      	lsls	r2, r3
   1f194:	0013      	movs	r3, r2
   1f196:	60bb      	str	r3, [r7, #8]
	if (level) {
   1f198:	1dbb      	adds	r3, r7, #6
   1f19a:	781b      	ldrb	r3, [r3, #0]
   1f19c:	2b00      	cmp	r3, #0
   1f19e:	d003      	beq.n	1f1a8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1f1a0:	68fb      	ldr	r3, [r7, #12]
   1f1a2:	68ba      	ldr	r2, [r7, #8]
   1f1a4:	619a      	str	r2, [r3, #24]
}
   1f1a6:	e002      	b.n	1f1ae <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1f1a8:	68fb      	ldr	r3, [r7, #12]
   1f1aa:	68ba      	ldr	r2, [r7, #8]
   1f1ac:	615a      	str	r2, [r3, #20]
}
   1f1ae:	46c0      	nop			; (mov r8, r8)
   1f1b0:	46bd      	mov	sp, r7
   1f1b2:	b004      	add	sp, #16
   1f1b4:	bd80      	pop	{r7, pc}
   1f1b6:	46c0      	nop			; (mov r8, r8)
   1f1b8:	0001f121 	.word	0x0001f121

0001f1bc <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   1f1bc:	b580      	push	{r7, lr}
   1f1be:	b084      	sub	sp, #16
   1f1c0:	af00      	add	r7, sp, #0
   1f1c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f1c4:	687b      	ldr	r3, [r7, #4]
   1f1c6:	681b      	ldr	r3, [r3, #0]
   1f1c8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   1f1ca:	68fb      	ldr	r3, [r7, #12]
   1f1cc:	69db      	ldr	r3, [r3, #28]
   1f1ce:	1e5a      	subs	r2, r3, #1
   1f1d0:	4193      	sbcs	r3, r2
   1f1d2:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   1f1d4:	0018      	movs	r0, r3
   1f1d6:	46bd      	mov	sp, r7
   1f1d8:	b004      	add	sp, #16
   1f1da:	bd80      	pop	{r7, pc}

0001f1dc <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   1f1dc:	b580      	push	{r7, lr}
   1f1de:	b082      	sub	sp, #8
   1f1e0:	af00      	add	r7, sp, #0
   1f1e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   1f1e4:	687b      	ldr	r3, [r7, #4]
   1f1e6:	2201      	movs	r2, #1
   1f1e8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1f1ea:	687b      	ldr	r3, [r7, #4]
   1f1ec:	2200      	movs	r2, #0
   1f1ee:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1f1f0:	687b      	ldr	r3, [r7, #4]
   1f1f2:	2200      	movs	r2, #0
   1f1f4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1f1f6:	687b      	ldr	r3, [r7, #4]
   1f1f8:	22c0      	movs	r2, #192	; 0xc0
   1f1fa:	0392      	lsls	r2, r2, #14
   1f1fc:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1f1fe:	687b      	ldr	r3, [r7, #4]
   1f200:	2200      	movs	r2, #0
   1f202:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1f204:	687b      	ldr	r3, [r7, #4]
   1f206:	2200      	movs	r2, #0
   1f208:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1f20a:	687b      	ldr	r3, [r7, #4]
   1f20c:	2201      	movs	r2, #1
   1f20e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   1f210:	687b      	ldr	r3, [r7, #4]
   1f212:	2201      	movs	r2, #1
   1f214:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   1f216:	687b      	ldr	r3, [r7, #4]
   1f218:	2200      	movs	r2, #0
   1f21a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   1f21c:	687b      	ldr	r3, [r7, #4]
   1f21e:	2224      	movs	r2, #36	; 0x24
   1f220:	2100      	movs	r1, #0
   1f222:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1f224:	687b      	ldr	r3, [r7, #4]
   1f226:	3318      	adds	r3, #24
   1f228:	220c      	movs	r2, #12
   1f22a:	2100      	movs	r1, #0
   1f22c:	0018      	movs	r0, r3
   1f22e:	4b0a      	ldr	r3, [pc, #40]	; (1f258 <spi_get_config_defaults+0x7c>)
   1f230:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   1f232:	687b      	ldr	r3, [r7, #4]
   1f234:	4a09      	ldr	r2, [pc, #36]	; (1f25c <spi_get_config_defaults+0x80>)
   1f236:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1f238:	687b      	ldr	r3, [r7, #4]
   1f23a:	2200      	movs	r2, #0
   1f23c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1f23e:	687b      	ldr	r3, [r7, #4]
   1f240:	2200      	movs	r2, #0
   1f242:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1f244:	687b      	ldr	r3, [r7, #4]
   1f246:	2200      	movs	r2, #0
   1f248:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1f24a:	687b      	ldr	r3, [r7, #4]
   1f24c:	2200      	movs	r2, #0
   1f24e:	635a      	str	r2, [r3, #52]	; 0x34

};
   1f250:	46c0      	nop			; (mov r8, r8)
   1f252:	46bd      	mov	sp, r7
   1f254:	b002      	add	sp, #8
   1f256:	bd80      	pop	{r7, pc}
   1f258:	0003462f 	.word	0x0003462f
   1f25c:	000186a0 	.word	0x000186a0

0001f260 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   1f260:	b580      	push	{r7, lr}
   1f262:	b082      	sub	sp, #8
   1f264:	af00      	add	r7, sp, #0
   1f266:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   1f268:	687b      	ldr	r3, [r7, #4]
   1f26a:	220a      	movs	r2, #10
   1f26c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1f26e:	687b      	ldr	r3, [r7, #4]
   1f270:	2200      	movs	r2, #0
   1f272:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1f274:	687b      	ldr	r3, [r7, #4]
   1f276:	2200      	movs	r2, #0
   1f278:	709a      	strb	r2, [r3, #2]
}
   1f27a:	46c0      	nop			; (mov r8, r8)
   1f27c:	46bd      	mov	sp, r7
   1f27e:	b002      	add	sp, #8
   1f280:	bd80      	pop	{r7, pc}
	...

0001f284 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   1f284:	b580      	push	{r7, lr}
   1f286:	b084      	sub	sp, #16
   1f288:	af00      	add	r7, sp, #0
   1f28a:	6078      	str	r0, [r7, #4]
   1f28c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1f28e:	683b      	ldr	r3, [r7, #0]
   1f290:	781a      	ldrb	r2, [r3, #0]
   1f292:	687b      	ldr	r3, [r7, #4]
   1f294:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1f296:	683b      	ldr	r3, [r7, #0]
   1f298:	785a      	ldrb	r2, [r3, #1]
   1f29a:	687b      	ldr	r3, [r7, #4]
   1f29c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1f29e:	683b      	ldr	r3, [r7, #0]
   1f2a0:	789a      	ldrb	r2, [r3, #2]
   1f2a2:	687b      	ldr	r3, [r7, #4]
   1f2a4:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1f2a6:	230c      	movs	r3, #12
   1f2a8:	18fb      	adds	r3, r7, r3
   1f2aa:	0018      	movs	r0, r3
   1f2ac:	4b0b      	ldr	r3, [pc, #44]	; (1f2dc <spi_attach_slave+0x58>)
   1f2ae:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1f2b0:	230c      	movs	r3, #12
   1f2b2:	18fb      	adds	r3, r7, r3
   1f2b4:	2201      	movs	r2, #1
   1f2b6:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1f2b8:	687b      	ldr	r3, [r7, #4]
   1f2ba:	781b      	ldrb	r3, [r3, #0]
   1f2bc:	220c      	movs	r2, #12
   1f2be:	18ba      	adds	r2, r7, r2
   1f2c0:	0011      	movs	r1, r2
   1f2c2:	0018      	movs	r0, r3
   1f2c4:	4b06      	ldr	r3, [pc, #24]	; (1f2e0 <spi_attach_slave+0x5c>)
   1f2c6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1f2c8:	687b      	ldr	r3, [r7, #4]
   1f2ca:	781b      	ldrb	r3, [r3, #0]
   1f2cc:	2101      	movs	r1, #1
   1f2ce:	0018      	movs	r0, r3
   1f2d0:	4b04      	ldr	r3, [pc, #16]	; (1f2e4 <spi_attach_slave+0x60>)
   1f2d2:	4798      	blx	r3
}
   1f2d4:	46c0      	nop			; (mov r8, r8)
   1f2d6:	46bd      	mov	sp, r7
   1f2d8:	b004      	add	sp, #16
   1f2da:	bd80      	pop	{r7, pc}
   1f2dc:	0001f145 	.word	0x0001f145
   1f2e0:	00026629 	.word	0x00026629
   1f2e4:	0001f169 	.word	0x0001f169

0001f2e8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   1f2e8:	b580      	push	{r7, lr}
   1f2ea:	b084      	sub	sp, #16
   1f2ec:	af00      	add	r7, sp, #0
   1f2ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f2f0:	687b      	ldr	r3, [r7, #4]
   1f2f2:	681b      	ldr	r3, [r3, #0]
   1f2f4:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1f2f6:	687b      	ldr	r3, [r7, #4]
   1f2f8:	681b      	ldr	r3, [r3, #0]
   1f2fa:	0018      	movs	r0, r3
   1f2fc:	4b0b      	ldr	r3, [pc, #44]	; (1f32c <spi_enable+0x44>)
   1f2fe:	4798      	blx	r3
   1f300:	0003      	movs	r3, r0
   1f302:	0018      	movs	r0, r3
   1f304:	4b0a      	ldr	r3, [pc, #40]	; (1f330 <spi_enable+0x48>)
   1f306:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1f308:	46c0      	nop			; (mov r8, r8)
   1f30a:	687b      	ldr	r3, [r7, #4]
   1f30c:	0018      	movs	r0, r3
   1f30e:	4b09      	ldr	r3, [pc, #36]	; (1f334 <spi_enable+0x4c>)
   1f310:	4798      	blx	r3
   1f312:	1e03      	subs	r3, r0, #0
   1f314:	d1f9      	bne.n	1f30a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1f316:	68fb      	ldr	r3, [r7, #12]
   1f318:	681b      	ldr	r3, [r3, #0]
   1f31a:	2202      	movs	r2, #2
   1f31c:	431a      	orrs	r2, r3
   1f31e:	68fb      	ldr	r3, [r7, #12]
   1f320:	601a      	str	r2, [r3, #0]
}
   1f322:	46c0      	nop			; (mov r8, r8)
   1f324:	46bd      	mov	sp, r7
   1f326:	b004      	add	sp, #16
   1f328:	bd80      	pop	{r7, pc}
   1f32a:	46c0      	nop			; (mov r8, r8)
   1f32c:	000272f9 	.word	0x000272f9
   1f330:	0001f0f5 	.word	0x0001f0f5
   1f334:	0001f1bd 	.word	0x0001f1bd

0001f338 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1f338:	b580      	push	{r7, lr}
   1f33a:	b084      	sub	sp, #16
   1f33c:	af00      	add	r7, sp, #0
   1f33e:	6078      	str	r0, [r7, #4]
   1f340:	000a      	movs	r2, r1
   1f342:	1cfb      	adds	r3, r7, #3
   1f344:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1f346:	230f      	movs	r3, #15
   1f348:	18fb      	adds	r3, r7, r3
   1f34a:	2200      	movs	r2, #0
   1f34c:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1f34e:	e038      	b.n	1f3c2 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1f350:	687b      	ldr	r3, [r7, #4]
   1f352:	1c5a      	adds	r2, r3, #1
   1f354:	607a      	str	r2, [r7, #4]
   1f356:	220e      	movs	r2, #14
   1f358:	18ba      	adds	r2, r7, r2
   1f35a:	781b      	ldrb	r3, [r3, #0]
   1f35c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1f35e:	230d      	movs	r3, #13
   1f360:	18fb      	adds	r3, r7, r3
   1f362:	2200      	movs	r2, #0
   1f364:	701a      	strb	r2, [r3, #0]
   1f366:	e027      	b.n	1f3b8 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1f368:	230f      	movs	r3, #15
   1f36a:	18fa      	adds	r2, r7, r3
   1f36c:	230f      	movs	r3, #15
   1f36e:	18fb      	adds	r3, r7, r3
   1f370:	781b      	ldrb	r3, [r3, #0]
   1f372:	18db      	adds	r3, r3, r3
   1f374:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1f376:	230e      	movs	r3, #14
   1f378:	18fa      	adds	r2, r7, r3
   1f37a:	230f      	movs	r3, #15
   1f37c:	18fb      	adds	r3, r7, r3
   1f37e:	7812      	ldrb	r2, [r2, #0]
   1f380:	781b      	ldrb	r3, [r3, #0]
   1f382:	4053      	eors	r3, r2
   1f384:	b2db      	uxtb	r3, r3
   1f386:	b25b      	sxtb	r3, r3
   1f388:	2b00      	cmp	r3, #0
   1f38a:	da07      	bge.n	1f39c <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1f38c:	230f      	movs	r3, #15
   1f38e:	18fb      	adds	r3, r7, r3
   1f390:	220f      	movs	r2, #15
   1f392:	18ba      	adds	r2, r7, r2
   1f394:	7812      	ldrb	r2, [r2, #0]
   1f396:	2109      	movs	r1, #9
   1f398:	404a      	eors	r2, r1
   1f39a:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1f39c:	230e      	movs	r3, #14
   1f39e:	18fa      	adds	r2, r7, r3
   1f3a0:	230e      	movs	r3, #14
   1f3a2:	18fb      	adds	r3, r7, r3
   1f3a4:	781b      	ldrb	r3, [r3, #0]
   1f3a6:	18db      	adds	r3, r3, r3
   1f3a8:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1f3aa:	230d      	movs	r3, #13
   1f3ac:	18fb      	adds	r3, r7, r3
   1f3ae:	781a      	ldrb	r2, [r3, #0]
   1f3b0:	230d      	movs	r3, #13
   1f3b2:	18fb      	adds	r3, r7, r3
   1f3b4:	3201      	adds	r2, #1
   1f3b6:	701a      	strb	r2, [r3, #0]
   1f3b8:	230d      	movs	r3, #13
   1f3ba:	18fb      	adds	r3, r7, r3
   1f3bc:	781b      	ldrb	r3, [r3, #0]
   1f3be:	2b07      	cmp	r3, #7
   1f3c0:	d9d2      	bls.n	1f368 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1f3c2:	1cfb      	adds	r3, r7, #3
   1f3c4:	781b      	ldrb	r3, [r3, #0]
   1f3c6:	1cfa      	adds	r2, r7, #3
   1f3c8:	1e59      	subs	r1, r3, #1
   1f3ca:	7011      	strb	r1, [r2, #0]
   1f3cc:	2b00      	cmp	r3, #0
   1f3ce:	d1bf      	bne.n	1f350 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1f3d0:	230f      	movs	r3, #15
   1f3d2:	18fb      	adds	r3, r7, r3
   1f3d4:	781b      	ldrb	r3, [r3, #0]
   1f3d6:	005b      	lsls	r3, r3, #1
   1f3d8:	b25b      	sxtb	r3, r3
   1f3da:	2201      	movs	r2, #1
   1f3dc:	4313      	orrs	r3, r2
   1f3de:	b25a      	sxtb	r2, r3
   1f3e0:	230f      	movs	r3, #15
   1f3e2:	18fb      	adds	r3, r7, r3
   1f3e4:	701a      	strb	r2, [r3, #0]
	return crc;
   1f3e6:	230f      	movs	r3, #15
   1f3e8:	18fb      	adds	r3, r7, r3
   1f3ea:	781b      	ldrb	r3, [r3, #0]
}
   1f3ec:	0018      	movs	r0, r3
   1f3ee:	46bd      	mov	sp, r7
   1f3f0:	b004      	add	sp, #16
   1f3f2:	bd80      	pop	{r7, pc}

0001f3f4 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1f3f4:	b590      	push	{r4, r7, lr}
   1f3f6:	b083      	sub	sp, #12
   1f3f8:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1f3fa:	1c7b      	adds	r3, r7, #1
   1f3fc:	22ff      	movs	r2, #255	; 0xff
   1f3fe:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1f400:	1cbb      	adds	r3, r7, #2
   1f402:	22ff      	movs	r2, #255	; 0xff
   1f404:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f406:	1cbb      	adds	r3, r7, #2
   1f408:	881b      	ldrh	r3, [r3, #0]
   1f40a:	1c79      	adds	r1, r7, #1
   1f40c:	4811      	ldr	r0, [pc, #68]	; (1f454 <sd_mmc_spi_wait_busy+0x60>)
   1f40e:	2201      	movs	r2, #1
   1f410:	4c11      	ldr	r4, [pc, #68]	; (1f458 <sd_mmc_spi_wait_busy+0x64>)
   1f412:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1f414:	4b11      	ldr	r3, [pc, #68]	; (1f45c <sd_mmc_spi_wait_busy+0x68>)
   1f416:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f418:	1cbb      	adds	r3, r7, #2
   1f41a:	881b      	ldrh	r3, [r3, #0]
   1f41c:	1c79      	adds	r1, r7, #1
   1f41e:	480d      	ldr	r0, [pc, #52]	; (1f454 <sd_mmc_spi_wait_busy+0x60>)
   1f420:	2201      	movs	r2, #1
   1f422:	4c0d      	ldr	r4, [pc, #52]	; (1f458 <sd_mmc_spi_wait_busy+0x64>)
   1f424:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f426:	1cbb      	adds	r3, r7, #2
   1f428:	881b      	ldrh	r3, [r3, #0]
   1f42a:	1c79      	adds	r1, r7, #1
   1f42c:	4809      	ldr	r0, [pc, #36]	; (1f454 <sd_mmc_spi_wait_busy+0x60>)
   1f42e:	2201      	movs	r2, #1
   1f430:	4c09      	ldr	r4, [pc, #36]	; (1f458 <sd_mmc_spi_wait_busy+0x64>)
   1f432:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1f434:	687b      	ldr	r3, [r7, #4]
   1f436:	1e5a      	subs	r2, r3, #1
   1f438:	607a      	str	r2, [r7, #4]
   1f43a:	2b00      	cmp	r3, #0
   1f43c:	d101      	bne.n	1f442 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1f43e:	2300      	movs	r3, #0
   1f440:	e004      	b.n	1f44c <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1f442:	1c7b      	adds	r3, r7, #1
   1f444:	781b      	ldrb	r3, [r3, #0]
   1f446:	2bff      	cmp	r3, #255	; 0xff
   1f448:	d1ed      	bne.n	1f426 <sd_mmc_spi_wait_busy+0x32>
	return true;
   1f44a:	2301      	movs	r3, #1
}
   1f44c:	0018      	movs	r0, r3
   1f44e:	46bd      	mov	sp, r7
   1f450:	b003      	add	sp, #12
   1f452:	bd90      	pop	{r4, r7, pc}
   1f454:	200040d0 	.word	0x200040d0
   1f458:	00027c39 	.word	0x00027c39
   1f45c:	00030d40 	.word	0x00030d40

0001f460 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1f460:	b590      	push	{r4, r7, lr}
   1f462:	b083      	sub	sp, #12
   1f464:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1f466:	1cbb      	adds	r3, r7, #2
   1f468:	22ff      	movs	r2, #255	; 0xff
   1f46a:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1f46c:	1c7b      	adds	r3, r7, #1
   1f46e:	2200      	movs	r2, #0
   1f470:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1f472:	4b18      	ldr	r3, [pc, #96]	; (1f4d4 <sd_mmc_spi_start_read_block+0x74>)
   1f474:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1f476:	687b      	ldr	r3, [r7, #4]
   1f478:	1e5a      	subs	r2, r3, #1
   1f47a:	607a      	str	r2, [r7, #4]
   1f47c:	2b00      	cmp	r3, #0
   1f47e:	d104      	bne.n	1f48a <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1f480:	4b15      	ldr	r3, [pc, #84]	; (1f4d8 <sd_mmc_spi_start_read_block+0x78>)
   1f482:	2204      	movs	r2, #4
   1f484:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1f486:	2300      	movs	r3, #0
   1f488:	e020      	b.n	1f4cc <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1f48a:	1cbb      	adds	r3, r7, #2
   1f48c:	881b      	ldrh	r3, [r3, #0]
   1f48e:	1c79      	adds	r1, r7, #1
   1f490:	4812      	ldr	r0, [pc, #72]	; (1f4dc <sd_mmc_spi_start_read_block+0x7c>)
   1f492:	2201      	movs	r2, #1
   1f494:	4c12      	ldr	r4, [pc, #72]	; (1f4e0 <sd_mmc_spi_start_read_block+0x80>)
   1f496:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1f498:	1c7b      	adds	r3, r7, #1
   1f49a:	781b      	ldrb	r3, [r3, #0]
   1f49c:	001a      	movs	r2, r3
   1f49e:	23f0      	movs	r3, #240	; 0xf0
   1f4a0:	4013      	ands	r3, r2
   1f4a2:	d10e      	bne.n	1f4c2 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1f4a4:	1c7b      	adds	r3, r7, #1
   1f4a6:	781b      	ldrb	r3, [r3, #0]
   1f4a8:	001a      	movs	r2, r3
   1f4aa:	2307      	movs	r3, #7
   1f4ac:	4013      	ands	r3, r2
   1f4ae:	d003      	beq.n	1f4b8 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1f4b0:	4b09      	ldr	r3, [pc, #36]	; (1f4d8 <sd_mmc_spi_start_read_block+0x78>)
   1f4b2:	2207      	movs	r2, #7
   1f4b4:	701a      	strb	r2, [r3, #0]
   1f4b6:	e002      	b.n	1f4be <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1f4b8:	4b07      	ldr	r3, [pc, #28]	; (1f4d8 <sd_mmc_spi_start_read_block+0x78>)
   1f4ba:	220b      	movs	r2, #11
   1f4bc:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1f4be:	2300      	movs	r3, #0
   1f4c0:	e004      	b.n	1f4cc <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1f4c2:	1c7b      	adds	r3, r7, #1
   1f4c4:	781b      	ldrb	r3, [r3, #0]
   1f4c6:	2bfe      	cmp	r3, #254	; 0xfe
   1f4c8:	d1d5      	bne.n	1f476 <sd_mmc_spi_start_read_block+0x16>

	return true;
   1f4ca:	2301      	movs	r3, #1
}
   1f4cc:	0018      	movs	r0, r3
   1f4ce:	46bd      	mov	sp, r7
   1f4d0:	b003      	add	sp, #12
   1f4d2:	bd90      	pop	{r4, r7, pc}
   1f4d4:	0007a120 	.word	0x0007a120
   1f4d8:	20004113 	.word	0x20004113
   1f4dc:	200040d0 	.word	0x200040d0
   1f4e0:	00027c39 	.word	0x00027c39

0001f4e4 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1f4e4:	b590      	push	{r4, r7, lr}
   1f4e6:	b083      	sub	sp, #12
   1f4e8:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1f4ea:	1dbb      	adds	r3, r7, #6
   1f4ec:	22ff      	movs	r2, #255	; 0xff
   1f4ee:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1f4f0:	1dbb      	adds	r3, r7, #6
   1f4f2:	881b      	ldrh	r3, [r3, #0]
   1f4f4:	1d39      	adds	r1, r7, #4
   1f4f6:	4804      	ldr	r0, [pc, #16]	; (1f508 <sd_mmc_spi_stop_read_block+0x24>)
   1f4f8:	2202      	movs	r2, #2
   1f4fa:	4c04      	ldr	r4, [pc, #16]	; (1f50c <sd_mmc_spi_stop_read_block+0x28>)
   1f4fc:	47a0      	blx	r4
			dummy);
}
   1f4fe:	46c0      	nop			; (mov r8, r8)
   1f500:	46bd      	mov	sp, r7
   1f502:	b003      	add	sp, #12
   1f504:	bd90      	pop	{r4, r7, pc}
   1f506:	46c0      	nop			; (mov r8, r8)
   1f508:	200040d0 	.word	0x200040d0
   1f50c:	00027c39 	.word	0x00027c39

0001f510 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1f510:	b580      	push	{r7, lr}
   1f512:	b082      	sub	sp, #8
   1f514:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   1f516:	1dfb      	adds	r3, r7, #7
   1f518:	22ff      	movs	r2, #255	; 0xff
   1f51a:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   1f51c:	1df9      	adds	r1, r7, #7
   1f51e:	4b0d      	ldr	r3, [pc, #52]	; (1f554 <sd_mmc_spi_start_write_block+0x44>)
   1f520:	2201      	movs	r2, #1
   1f522:	0018      	movs	r0, r3
   1f524:	4b0c      	ldr	r3, [pc, #48]	; (1f558 <sd_mmc_spi_start_write_block+0x48>)
   1f526:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   1f528:	4b0c      	ldr	r3, [pc, #48]	; (1f55c <sd_mmc_spi_start_write_block+0x4c>)
   1f52a:	881b      	ldrh	r3, [r3, #0]
   1f52c:	2b01      	cmp	r3, #1
   1f52e:	d103      	bne.n	1f538 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   1f530:	1dbb      	adds	r3, r7, #6
   1f532:	22fe      	movs	r2, #254	; 0xfe
   1f534:	701a      	strb	r2, [r3, #0]
   1f536:	e002      	b.n	1f53e <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   1f538:	1dbb      	adds	r3, r7, #6
   1f53a:	22fc      	movs	r2, #252	; 0xfc
   1f53c:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1f53e:	1db9      	adds	r1, r7, #6
   1f540:	4b04      	ldr	r3, [pc, #16]	; (1f554 <sd_mmc_spi_start_write_block+0x44>)
   1f542:	2201      	movs	r2, #1
   1f544:	0018      	movs	r0, r3
   1f546:	4b04      	ldr	r3, [pc, #16]	; (1f558 <sd_mmc_spi_start_write_block+0x48>)
   1f548:	4798      	blx	r3
}
   1f54a:	46c0      	nop			; (mov r8, r8)
   1f54c:	46bd      	mov	sp, r7
   1f54e:	b002      	add	sp, #8
   1f550:	bd80      	pop	{r7, pc}
   1f552:	46c0      	nop			; (mov r8, r8)
   1f554:	200040d0 	.word	0x200040d0
   1f558:	00027e5d 	.word	0x00027e5d
   1f55c:	2000411e 	.word	0x2000411e

0001f560 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   1f560:	b590      	push	{r4, r7, lr}
   1f562:	b083      	sub	sp, #12
   1f564:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   1f566:	1dbb      	adds	r3, r7, #6
   1f568:	22ff      	movs	r2, #255	; 0xff
   1f56a:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   1f56c:	1cbb      	adds	r3, r7, #2
   1f56e:	2201      	movs	r2, #1
   1f570:	4252      	negs	r2, r2
   1f572:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   1f574:	1cb9      	adds	r1, r7, #2
   1f576:	4b1b      	ldr	r3, [pc, #108]	; (1f5e4 <sd_mmc_spi_stop_write_block+0x84>)
   1f578:	2202      	movs	r2, #2
   1f57a:	0018      	movs	r0, r3
   1f57c:	4b1a      	ldr	r3, [pc, #104]	; (1f5e8 <sd_mmc_spi_stop_write_block+0x88>)
   1f57e:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1f580:	1dbb      	adds	r3, r7, #6
   1f582:	881b      	ldrh	r3, [r3, #0]
   1f584:	1d79      	adds	r1, r7, #5
   1f586:	4817      	ldr	r0, [pc, #92]	; (1f5e4 <sd_mmc_spi_stop_write_block+0x84>)
   1f588:	2201      	movs	r2, #1
   1f58a:	4c18      	ldr	r4, [pc, #96]	; (1f5ec <sd_mmc_spi_stop_write_block+0x8c>)
   1f58c:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1f58e:	1d7b      	adds	r3, r7, #5
   1f590:	781b      	ldrb	r3, [r3, #0]
   1f592:	001a      	movs	r2, r3
   1f594:	2310      	movs	r3, #16
   1f596:	4013      	ands	r3, r2
   1f598:	d105      	bne.n	1f5a6 <sd_mmc_spi_stop_write_block+0x46>
   1f59a:	1d7b      	adds	r3, r7, #5
   1f59c:	781b      	ldrb	r3, [r3, #0]
   1f59e:	001a      	movs	r2, r3
   1f5a0:	2301      	movs	r3, #1
   1f5a2:	4013      	ands	r3, r2
   1f5a4:	d104      	bne.n	1f5b0 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1f5a6:	4b12      	ldr	r3, [pc, #72]	; (1f5f0 <sd_mmc_spi_stop_write_block+0x90>)
   1f5a8:	2201      	movs	r2, #1
   1f5aa:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   1f5ac:	2300      	movs	r3, #0
   1f5ae:	e014      	b.n	1f5da <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1f5b0:	1d7b      	adds	r3, r7, #5
   1f5b2:	781b      	ldrb	r3, [r3, #0]
   1f5b4:	001a      	movs	r2, r3
   1f5b6:	231e      	movs	r3, #30
   1f5b8:	4013      	ands	r3, r2
   1f5ba:	2b04      	cmp	r3, #4
   1f5bc:	d00b      	beq.n	1f5d6 <sd_mmc_spi_stop_write_block+0x76>
   1f5be:	2b0a      	cmp	r3, #10
   1f5c0:	d104      	bne.n	1f5cc <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1f5c2:	4b0b      	ldr	r3, [pc, #44]	; (1f5f0 <sd_mmc_spi_stop_write_block+0x90>)
   1f5c4:	2208      	movs	r2, #8
   1f5c6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1f5c8:	2300      	movs	r3, #0
   1f5ca:	e006      	b.n	1f5da <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1f5cc:	4b08      	ldr	r3, [pc, #32]	; (1f5f0 <sd_mmc_spi_stop_write_block+0x90>)
   1f5ce:	220a      	movs	r2, #10
   1f5d0:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1f5d2:	2300      	movs	r3, #0
   1f5d4:	e001      	b.n	1f5da <sd_mmc_spi_stop_write_block+0x7a>
		break;
   1f5d6:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1f5d8:	2301      	movs	r3, #1
}
   1f5da:	0018      	movs	r0, r3
   1f5dc:	46bd      	mov	sp, r7
   1f5de:	b003      	add	sp, #12
   1f5e0:	bd90      	pop	{r4, r7, pc}
   1f5e2:	46c0      	nop			; (mov r8, r8)
   1f5e4:	200040d0 	.word	0x200040d0
   1f5e8:	00027e5d 	.word	0x00027e5d
   1f5ec:	00027c39 	.word	0x00027c39
   1f5f0:	20004113 	.word	0x20004113

0001f5f4 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   1f5f4:	b590      	push	{r4, r7, lr}
   1f5f6:	b083      	sub	sp, #12
   1f5f8:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   1f5fa:	4b1d      	ldr	r3, [pc, #116]	; (1f670 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1f5fc:	881b      	ldrh	r3, [r3, #0]
   1f5fe:	2b01      	cmp	r3, #1
   1f600:	d101      	bne.n	1f606 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   1f602:	2301      	movs	r3, #1
   1f604:	e030      	b.n	1f668 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   1f606:	4b1a      	ldr	r3, [pc, #104]	; (1f670 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1f608:	881b      	ldrh	r3, [r3, #0]
   1f60a:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1f60c:	4b19      	ldr	r3, [pc, #100]	; (1f674 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   1f60e:	681a      	ldr	r2, [r3, #0]
   1f610:	4b19      	ldr	r3, [pc, #100]	; (1f678 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   1f612:	881b      	ldrh	r3, [r3, #0]
   1f614:	0019      	movs	r1, r3
   1f616:	4b19      	ldr	r3, [pc, #100]	; (1f67c <sd_mmc_spi_stop_multiwrite_block+0x88>)
   1f618:	0010      	movs	r0, r2
   1f61a:	4798      	blx	r3
   1f61c:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   1f61e:	429c      	cmp	r4, r3
   1f620:	d901      	bls.n	1f626 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   1f622:	2301      	movs	r3, #1
   1f624:	e020      	b.n	1f668 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   1f626:	1dfb      	adds	r3, r7, #7
   1f628:	22ff      	movs	r2, #255	; 0xff
   1f62a:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1f62c:	1df9      	adds	r1, r7, #7
   1f62e:	4b14      	ldr	r3, [pc, #80]	; (1f680 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1f630:	2201      	movs	r2, #1
   1f632:	0018      	movs	r0, r3
   1f634:	4b13      	ldr	r3, [pc, #76]	; (1f684 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1f636:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   1f638:	1dfb      	adds	r3, r7, #7
   1f63a:	22fd      	movs	r2, #253	; 0xfd
   1f63c:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1f63e:	1df9      	adds	r1, r7, #7
   1f640:	4b0f      	ldr	r3, [pc, #60]	; (1f680 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1f642:	2201      	movs	r2, #1
   1f644:	0018      	movs	r0, r3
   1f646:	4b0f      	ldr	r3, [pc, #60]	; (1f684 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1f648:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   1f64a:	4b0f      	ldr	r3, [pc, #60]	; (1f688 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   1f64c:	4798      	blx	r3
   1f64e:	0003      	movs	r3, r0
   1f650:	001a      	movs	r2, r3
   1f652:	2301      	movs	r3, #1
   1f654:	4053      	eors	r3, r2
   1f656:	b2db      	uxtb	r3, r3
   1f658:	2b00      	cmp	r3, #0
   1f65a:	d004      	beq.n	1f666 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1f65c:	4b0b      	ldr	r3, [pc, #44]	; (1f68c <sd_mmc_spi_stop_multiwrite_block+0x98>)
   1f65e:	2205      	movs	r2, #5
   1f660:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   1f662:	2300      	movs	r3, #0
   1f664:	e000      	b.n	1f668 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   1f666:	2301      	movs	r3, #1
}
   1f668:	0018      	movs	r0, r3
   1f66a:	46bd      	mov	sp, r7
   1f66c:	b003      	add	sp, #12
   1f66e:	bd90      	pop	{r4, r7, pc}
   1f670:	2000411e 	.word	0x2000411e
   1f674:	20004118 	.word	0x20004118
   1f678:	2000411c 	.word	0x2000411c
   1f67c:	00032655 	.word	0x00032655
   1f680:	200040d0 	.word	0x200040d0
   1f684:	00027e5d 	.word	0x00027e5d
   1f688:	0001f3f5 	.word	0x0001f3f5
   1f68c:	20004113 	.word	0x20004113

0001f690 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   1f690:	b580      	push	{r7, lr}
   1f692:	b090      	sub	sp, #64	; 0x40
   1f694:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f696:	4b1f      	ldr	r3, [pc, #124]	; (1f714 <sd_mmc_spi_init+0x84>)
   1f698:	2200      	movs	r2, #0
   1f69a:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1f69c:	233c      	movs	r3, #60	; 0x3c
   1f69e:	18fb      	adds	r3, r7, r3
   1f6a0:	0018      	movs	r0, r3
   1f6a2:	4b1d      	ldr	r3, [pc, #116]	; (1f718 <sd_mmc_spi_init+0x88>)
   1f6a4:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   1f6a6:	1d3b      	adds	r3, r7, #4
   1f6a8:	0018      	movs	r0, r3
   1f6aa:	4b1c      	ldr	r3, [pc, #112]	; (1f71c <sd_mmc_spi_init+0x8c>)
   1f6ac:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   1f6ae:	1d3b      	adds	r3, r7, #4
   1f6b0:	2280      	movs	r2, #128	; 0x80
   1f6b2:	0252      	lsls	r2, r2, #9
   1f6b4:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   1f6b6:	1d3b      	adds	r3, r7, #4
   1f6b8:	4a19      	ldr	r2, [pc, #100]	; (1f720 <sd_mmc_spi_init+0x90>)
   1f6ba:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   1f6bc:	1d3b      	adds	r3, r7, #4
   1f6be:	4a19      	ldr	r2, [pc, #100]	; (1f724 <sd_mmc_spi_init+0x94>)
   1f6c0:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   1f6c2:	1d3b      	adds	r3, r7, #4
   1f6c4:	4a18      	ldr	r2, [pc, #96]	; (1f728 <sd_mmc_spi_init+0x98>)
   1f6c6:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   1f6c8:	1d3b      	adds	r3, r7, #4
   1f6ca:	4a18      	ldr	r2, [pc, #96]	; (1f72c <sd_mmc_spi_init+0x9c>)
   1f6cc:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   1f6ce:	1d3b      	adds	r3, r7, #4
   1f6d0:	2224      	movs	r2, #36	; 0x24
   1f6d2:	2100      	movs	r1, #0
   1f6d4:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   1f6d6:	1d3b      	adds	r3, r7, #4
   1f6d8:	4a15      	ldr	r2, [pc, #84]	; (1f730 <sd_mmc_spi_init+0xa0>)
   1f6da:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   1f6dc:	1d3a      	adds	r2, r7, #4
   1f6de:	4915      	ldr	r1, [pc, #84]	; (1f734 <sd_mmc_spi_init+0xa4>)
   1f6e0:	4b15      	ldr	r3, [pc, #84]	; (1f738 <sd_mmc_spi_init+0xa8>)
   1f6e2:	0018      	movs	r0, r3
   1f6e4:	4b15      	ldr	r3, [pc, #84]	; (1f73c <sd_mmc_spi_init+0xac>)
   1f6e6:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   1f6e8:	4b13      	ldr	r3, [pc, #76]	; (1f738 <sd_mmc_spi_init+0xa8>)
   1f6ea:	0018      	movs	r0, r3
   1f6ec:	4b14      	ldr	r3, [pc, #80]	; (1f740 <sd_mmc_spi_init+0xb0>)
   1f6ee:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   1f6f0:	4b14      	ldr	r3, [pc, #80]	; (1f744 <sd_mmc_spi_init+0xb4>)
   1f6f2:	0018      	movs	r0, r3
   1f6f4:	4b14      	ldr	r3, [pc, #80]	; (1f748 <sd_mmc_spi_init+0xb8>)
   1f6f6:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   1f6f8:	4b14      	ldr	r3, [pc, #80]	; (1f74c <sd_mmc_spi_init+0xbc>)
   1f6fa:	781a      	ldrb	r2, [r3, #0]
   1f6fc:	4b11      	ldr	r3, [pc, #68]	; (1f744 <sd_mmc_spi_init+0xb4>)
   1f6fe:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   1f700:	4a10      	ldr	r2, [pc, #64]	; (1f744 <sd_mmc_spi_init+0xb4>)
   1f702:	4b13      	ldr	r3, [pc, #76]	; (1f750 <sd_mmc_spi_init+0xc0>)
   1f704:	0011      	movs	r1, r2
   1f706:	0018      	movs	r0, r3
   1f708:	4b12      	ldr	r3, [pc, #72]	; (1f754 <sd_mmc_spi_init+0xc4>)
   1f70a:	4798      	blx	r3
}
   1f70c:	46c0      	nop			; (mov r8, r8)
   1f70e:	46bd      	mov	sp, r7
   1f710:	b010      	add	sp, #64	; 0x40
   1f712:	bd80      	pop	{r7, pc}
   1f714:	20004113 	.word	0x20004113
   1f718:	0001f145 	.word	0x0001f145
   1f71c:	0001f1dd 	.word	0x0001f1dd
   1f720:	00100002 	.word	0x00100002
   1f724:	00110002 	.word	0x00110002
   1f728:	00120002 	.word	0x00120002
   1f72c:	00130002 	.word	0x00130002
   1f730:	00061a80 	.word	0x00061a80
   1f734:	42000c00 	.word	0x42000c00
   1f738:	200040d0 	.word	0x200040d0
   1f73c:	00027aa9 	.word	0x00027aa9
   1f740:	0001f2e9 	.word	0x0001f2e9
   1f744:	20004110 	.word	0x20004110
   1f748:	0001f261 	.word	0x0001f261
   1f74c:	2000010c 	.word	0x2000010c
   1f750:	2000410c 	.word	0x2000410c
   1f754:	0001f285 	.word	0x0001f285

0001f758 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   1f758:	b590      	push	{r4, r7, lr}
   1f75a:	b083      	sub	sp, #12
   1f75c:	af00      	add	r7, sp, #0
   1f75e:	0004      	movs	r4, r0
   1f760:	6039      	str	r1, [r7, #0]
   1f762:	0010      	movs	r0, r2
   1f764:	0019      	movs	r1, r3
   1f766:	1dfb      	adds	r3, r7, #7
   1f768:	1c22      	adds	r2, r4, #0
   1f76a:	701a      	strb	r2, [r3, #0]
   1f76c:	1dbb      	adds	r3, r7, #6
   1f76e:	1c02      	adds	r2, r0, #0
   1f770:	701a      	strb	r2, [r3, #0]
   1f772:	1d7b      	adds	r3, r7, #5
   1f774:	1c0a      	adds	r2, r1, #0
   1f776:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f778:	4b13      	ldr	r3, [pc, #76]	; (1f7c8 <sd_mmc_spi_select_device+0x70>)
   1f77a:	2200      	movs	r2, #0
   1f77c:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   1f77e:	683b      	ldr	r3, [r7, #0]
   1f780:	4a12      	ldr	r2, [pc, #72]	; (1f7cc <sd_mmc_spi_select_device+0x74>)
   1f782:	4293      	cmp	r3, r2
   1f784:	d907      	bls.n	1f796 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   1f786:	4b11      	ldr	r3, [pc, #68]	; (1f7cc <sd_mmc_spi_select_device+0x74>)
   1f788:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1f78a:	e004      	b.n	1f796 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   1f78c:	683b      	ldr	r3, [r7, #0]
   1f78e:	08db      	lsrs	r3, r3, #3
   1f790:	683a      	ldr	r2, [r7, #0]
   1f792:	1ad3      	subs	r3, r2, r3
   1f794:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1f796:	683a      	ldr	r2, [r7, #0]
   1f798:	4b0d      	ldr	r3, [pc, #52]	; (1f7d0 <sd_mmc_spi_select_device+0x78>)
   1f79a:	0011      	movs	r1, r2
   1f79c:	0018      	movs	r0, r3
   1f79e:	4b0d      	ldr	r3, [pc, #52]	; (1f7d4 <sd_mmc_spi_select_device+0x7c>)
   1f7a0:	4798      	blx	r3
   1f7a2:	0003      	movs	r3, r0
   1f7a4:	2b17      	cmp	r3, #23
   1f7a6:	d0f1      	beq.n	1f78c <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   1f7a8:	1dfb      	adds	r3, r7, #7
   1f7aa:	781a      	ldrb	r2, [r3, #0]
   1f7ac:	0013      	movs	r3, r2
   1f7ae:	005b      	lsls	r3, r3, #1
   1f7b0:	189b      	adds	r3, r3, r2
   1f7b2:	4a09      	ldr	r2, [pc, #36]	; (1f7d8 <sd_mmc_spi_select_device+0x80>)
   1f7b4:	1899      	adds	r1, r3, r2
   1f7b6:	4b06      	ldr	r3, [pc, #24]	; (1f7d0 <sd_mmc_spi_select_device+0x78>)
   1f7b8:	2201      	movs	r2, #1
   1f7ba:	0018      	movs	r0, r3
   1f7bc:	4b07      	ldr	r3, [pc, #28]	; (1f7dc <sd_mmc_spi_select_device+0x84>)
   1f7be:	4798      	blx	r3
}
   1f7c0:	46c0      	nop			; (mov r8, r8)
   1f7c2:	46bd      	mov	sp, r7
   1f7c4:	b003      	add	sp, #12
   1f7c6:	bd90      	pop	{r4, r7, pc}
   1f7c8:	20004113 	.word	0x20004113
   1f7cc:	00989680 	.word	0x00989680
   1f7d0:	200040d0 	.word	0x200040d0
   1f7d4:	000277d1 	.word	0x000277d1
   1f7d8:	2000410c 	.word	0x2000410c
   1f7dc:	00027d6d 	.word	0x00027d6d

0001f7e0 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   1f7e0:	b580      	push	{r7, lr}
   1f7e2:	b082      	sub	sp, #8
   1f7e4:	af00      	add	r7, sp, #0
   1f7e6:	0002      	movs	r2, r0
   1f7e8:	1dfb      	adds	r3, r7, #7
   1f7ea:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f7ec:	4b09      	ldr	r3, [pc, #36]	; (1f814 <sd_mmc_spi_deselect_device+0x34>)
   1f7ee:	2200      	movs	r2, #0
   1f7f0:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   1f7f2:	1dfb      	adds	r3, r7, #7
   1f7f4:	781a      	ldrb	r2, [r3, #0]
   1f7f6:	0013      	movs	r3, r2
   1f7f8:	005b      	lsls	r3, r3, #1
   1f7fa:	189b      	adds	r3, r3, r2
   1f7fc:	4a06      	ldr	r2, [pc, #24]	; (1f818 <sd_mmc_spi_deselect_device+0x38>)
   1f7fe:	1899      	adds	r1, r3, r2
   1f800:	4b06      	ldr	r3, [pc, #24]	; (1f81c <sd_mmc_spi_deselect_device+0x3c>)
   1f802:	2200      	movs	r2, #0
   1f804:	0018      	movs	r0, r3
   1f806:	4b06      	ldr	r3, [pc, #24]	; (1f820 <sd_mmc_spi_deselect_device+0x40>)
   1f808:	4798      	blx	r3
}
   1f80a:	46c0      	nop			; (mov r8, r8)
   1f80c:	46bd      	mov	sp, r7
   1f80e:	b002      	add	sp, #8
   1f810:	bd80      	pop	{r7, pc}
   1f812:	46c0      	nop			; (mov r8, r8)
   1f814:	20004113 	.word	0x20004113
   1f818:	2000410c 	.word	0x2000410c
   1f81c:	200040d0 	.word	0x200040d0
   1f820:	00027d6d 	.word	0x00027d6d

0001f824 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   1f824:	b580      	push	{r7, lr}
   1f826:	b082      	sub	sp, #8
   1f828:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   1f82a:	1dbb      	adds	r3, r7, #6
   1f82c:	22ff      	movs	r2, #255	; 0xff
   1f82e:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f830:	4b0c      	ldr	r3, [pc, #48]	; (1f864 <sd_mmc_spi_send_clock+0x40>)
   1f832:	2200      	movs	r2, #0
   1f834:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   1f836:	1dfb      	adds	r3, r7, #7
   1f838:	2200      	movs	r2, #0
   1f83a:	701a      	strb	r2, [r3, #0]
   1f83c:	e00a      	b.n	1f854 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   1f83e:	1db9      	adds	r1, r7, #6
   1f840:	4b09      	ldr	r3, [pc, #36]	; (1f868 <sd_mmc_spi_send_clock+0x44>)
   1f842:	2201      	movs	r2, #1
   1f844:	0018      	movs	r0, r3
   1f846:	4b09      	ldr	r3, [pc, #36]	; (1f86c <sd_mmc_spi_send_clock+0x48>)
   1f848:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   1f84a:	1dfb      	adds	r3, r7, #7
   1f84c:	781a      	ldrb	r2, [r3, #0]
   1f84e:	1dfb      	adds	r3, r7, #7
   1f850:	3201      	adds	r2, #1
   1f852:	701a      	strb	r2, [r3, #0]
   1f854:	1dfb      	adds	r3, r7, #7
   1f856:	781b      	ldrb	r3, [r3, #0]
   1f858:	2b09      	cmp	r3, #9
   1f85a:	d9f0      	bls.n	1f83e <sd_mmc_spi_send_clock+0x1a>
	}
}
   1f85c:	46c0      	nop			; (mov r8, r8)
   1f85e:	46bd      	mov	sp, r7
   1f860:	b002      	add	sp, #8
   1f862:	bd80      	pop	{r7, pc}
   1f864:	20004113 	.word	0x20004113
   1f868:	200040d0 	.word	0x200040d0
   1f86c:	00027e5d 	.word	0x00027e5d

0001f870 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   1f870:	b590      	push	{r4, r7, lr}
   1f872:	b085      	sub	sp, #20
   1f874:	af02      	add	r7, sp, #8
   1f876:	6078      	str	r0, [r7, #4]
   1f878:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   1f87a:	6839      	ldr	r1, [r7, #0]
   1f87c:	6878      	ldr	r0, [r7, #4]
   1f87e:	2300      	movs	r3, #0
   1f880:	9300      	str	r3, [sp, #0]
   1f882:	2300      	movs	r3, #0
   1f884:	2200      	movs	r2, #0
   1f886:	4c03      	ldr	r4, [pc, #12]	; (1f894 <sd_mmc_spi_send_cmd+0x24>)
   1f888:	47a0      	blx	r4
   1f88a:	0003      	movs	r3, r0
}
   1f88c:	0018      	movs	r0, r3
   1f88e:	46bd      	mov	sp, r7
   1f890:	b003      	add	sp, #12
   1f892:	bd90      	pop	{r4, r7, pc}
   1f894:	0001f899 	.word	0x0001f899

0001f898 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   1f898:	b590      	push	{r4, r7, lr}
   1f89a:	b089      	sub	sp, #36	; 0x24
   1f89c:	af00      	add	r7, sp, #0
   1f89e:	60f8      	str	r0, [r7, #12]
   1f8a0:	60b9      	str	r1, [r7, #8]
   1f8a2:	0019      	movs	r1, r3
   1f8a4:	1dbb      	adds	r3, r7, #6
   1f8a6:	801a      	strh	r2, [r3, #0]
   1f8a8:	1d3b      	adds	r3, r7, #4
   1f8aa:	1c0a      	adds	r2, r1, #0
   1f8ac:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   1f8ae:	231b      	movs	r3, #27
   1f8b0:	18fb      	adds	r3, r7, r3
   1f8b2:	22ff      	movs	r2, #255	; 0xff
   1f8b4:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   1f8b6:	231c      	movs	r3, #28
   1f8b8:	18fb      	adds	r3, r7, r3
   1f8ba:	22ff      	movs	r2, #255	; 0xff
   1f8bc:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f8be:	4b72      	ldr	r3, [pc, #456]	; (1fa88 <sd_mmc_spi_adtc_start+0x1f0>)
   1f8c0:	2200      	movs	r2, #0
   1f8c2:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   1f8c4:	68fb      	ldr	r3, [r7, #12]
   1f8c6:	b2db      	uxtb	r3, r3
   1f8c8:	223f      	movs	r2, #63	; 0x3f
   1f8ca:	4013      	ands	r3, r2
   1f8cc:	b2db      	uxtb	r3, r3
   1f8ce:	2240      	movs	r2, #64	; 0x40
   1f8d0:	4313      	orrs	r3, r2
   1f8d2:	b2da      	uxtb	r2, r3
   1f8d4:	2314      	movs	r3, #20
   1f8d6:	18fb      	adds	r3, r7, r3
   1f8d8:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   1f8da:	68bb      	ldr	r3, [r7, #8]
   1f8dc:	0e1b      	lsrs	r3, r3, #24
   1f8de:	b2da      	uxtb	r2, r3
   1f8e0:	2314      	movs	r3, #20
   1f8e2:	18fb      	adds	r3, r7, r3
   1f8e4:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   1f8e6:	68bb      	ldr	r3, [r7, #8]
   1f8e8:	0c1b      	lsrs	r3, r3, #16
   1f8ea:	b2da      	uxtb	r2, r3
   1f8ec:	2314      	movs	r3, #20
   1f8ee:	18fb      	adds	r3, r7, r3
   1f8f0:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   1f8f2:	68bb      	ldr	r3, [r7, #8]
   1f8f4:	0a1b      	lsrs	r3, r3, #8
   1f8f6:	b2da      	uxtb	r2, r3
   1f8f8:	2314      	movs	r3, #20
   1f8fa:	18fb      	adds	r3, r7, r3
   1f8fc:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   1f8fe:	68bb      	ldr	r3, [r7, #8]
   1f900:	b2da      	uxtb	r2, r3
   1f902:	2314      	movs	r3, #20
   1f904:	18fb      	adds	r3, r7, r3
   1f906:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   1f908:	2314      	movs	r3, #20
   1f90a:	18fb      	adds	r3, r7, r3
   1f90c:	2105      	movs	r1, #5
   1f90e:	0018      	movs	r0, r3
   1f910:	4b5e      	ldr	r3, [pc, #376]	; (1fa8c <sd_mmc_spi_adtc_start+0x1f4>)
   1f912:	4798      	blx	r3
   1f914:	0003      	movs	r3, r0
   1f916:	001a      	movs	r2, r3
   1f918:	2314      	movs	r3, #20
   1f91a:	18fb      	adds	r3, r7, r3
   1f91c:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   1f91e:	231b      	movs	r3, #27
   1f920:	18f9      	adds	r1, r7, r3
   1f922:	4b5b      	ldr	r3, [pc, #364]	; (1fa90 <sd_mmc_spi_adtc_start+0x1f8>)
   1f924:	2201      	movs	r2, #1
   1f926:	0018      	movs	r0, r3
   1f928:	4b5a      	ldr	r3, [pc, #360]	; (1fa94 <sd_mmc_spi_adtc_start+0x1fc>)
   1f92a:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   1f92c:	2314      	movs	r3, #20
   1f92e:	18f9      	adds	r1, r7, r3
   1f930:	4b57      	ldr	r3, [pc, #348]	; (1fa90 <sd_mmc_spi_adtc_start+0x1f8>)
   1f932:	2206      	movs	r2, #6
   1f934:	0018      	movs	r0, r3
   1f936:	4b57      	ldr	r3, [pc, #348]	; (1fa94 <sd_mmc_spi_adtc_start+0x1fc>)
   1f938:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   1f93a:	2313      	movs	r3, #19
   1f93c:	18fb      	adds	r3, r7, r3
   1f93e:	22ff      	movs	r2, #255	; 0xff
   1f940:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1f942:	231c      	movs	r3, #28
   1f944:	18fb      	adds	r3, r7, r3
   1f946:	881b      	ldrh	r3, [r3, #0]
   1f948:	2213      	movs	r2, #19
   1f94a:	18b9      	adds	r1, r7, r2
   1f94c:	4850      	ldr	r0, [pc, #320]	; (1fa90 <sd_mmc_spi_adtc_start+0x1f8>)
   1f94e:	2201      	movs	r2, #1
   1f950:	4c51      	ldr	r4, [pc, #324]	; (1fa98 <sd_mmc_spi_adtc_start+0x200>)
   1f952:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   1f954:	231f      	movs	r3, #31
   1f956:	18fb      	adds	r3, r7, r3
   1f958:	2207      	movs	r2, #7
   1f95a:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1f95c:	231c      	movs	r3, #28
   1f95e:	18fb      	adds	r3, r7, r3
   1f960:	881b      	ldrh	r3, [r3, #0]
   1f962:	2213      	movs	r2, #19
   1f964:	18b9      	adds	r1, r7, r2
   1f966:	484a      	ldr	r0, [pc, #296]	; (1fa90 <sd_mmc_spi_adtc_start+0x1f8>)
   1f968:	2201      	movs	r2, #1
   1f96a:	4c4b      	ldr	r4, [pc, #300]	; (1fa98 <sd_mmc_spi_adtc_start+0x200>)
   1f96c:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   1f96e:	2313      	movs	r3, #19
   1f970:	18fb      	adds	r3, r7, r3
   1f972:	781b      	ldrb	r3, [r3, #0]
   1f974:	b25b      	sxtb	r3, r3
   1f976:	2b00      	cmp	r3, #0
   1f978:	da10      	bge.n	1f99c <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   1f97a:	231f      	movs	r3, #31
   1f97c:	18fb      	adds	r3, r7, r3
   1f97e:	221f      	movs	r2, #31
   1f980:	18ba      	adds	r2, r7, r2
   1f982:	7812      	ldrb	r2, [r2, #0]
   1f984:	3a01      	subs	r2, #1
   1f986:	701a      	strb	r2, [r3, #0]
   1f988:	231f      	movs	r3, #31
   1f98a:	18fb      	adds	r3, r7, r3
   1f98c:	781b      	ldrb	r3, [r3, #0]
   1f98e:	2b00      	cmp	r3, #0
   1f990:	d1e4      	bne.n	1f95c <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   1f992:	4b3d      	ldr	r3, [pc, #244]	; (1fa88 <sd_mmc_spi_adtc_start+0x1f0>)
   1f994:	2202      	movs	r2, #2
   1f996:	701a      	strb	r2, [r3, #0]
			return false;
   1f998:	2300      	movs	r3, #0
   1f99a:	e070      	b.n	1fa7e <sd_mmc_spi_adtc_start+0x1e6>
			break;
   1f99c:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   1f99e:	2313      	movs	r3, #19
   1f9a0:	18fb      	adds	r3, r7, r3
   1f9a2:	781b      	ldrb	r3, [r3, #0]
   1f9a4:	001a      	movs	r2, r3
   1f9a6:	4b3d      	ldr	r3, [pc, #244]	; (1fa9c <sd_mmc_spi_adtc_start+0x204>)
   1f9a8:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   1f9aa:	2313      	movs	r3, #19
   1f9ac:	18fb      	adds	r3, r7, r3
   1f9ae:	781b      	ldrb	r3, [r3, #0]
   1f9b0:	001a      	movs	r2, r3
   1f9b2:	2308      	movs	r3, #8
   1f9b4:	4013      	ands	r3, r2
   1f9b6:	d004      	beq.n	1f9c2 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   1f9b8:	4b33      	ldr	r3, [pc, #204]	; (1fa88 <sd_mmc_spi_adtc_start+0x1f0>)
   1f9ba:	2206      	movs	r2, #6
   1f9bc:	701a      	strb	r2, [r3, #0]
		return false;
   1f9be:	2300      	movs	r3, #0
   1f9c0:	e05d      	b.n	1fa7e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   1f9c2:	2313      	movs	r3, #19
   1f9c4:	18fb      	adds	r3, r7, r3
   1f9c6:	781b      	ldrb	r3, [r3, #0]
   1f9c8:	001a      	movs	r2, r3
   1f9ca:	2304      	movs	r3, #4
   1f9cc:	4013      	ands	r3, r2
   1f9ce:	d004      	beq.n	1f9da <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   1f9d0:	4b2d      	ldr	r3, [pc, #180]	; (1fa88 <sd_mmc_spi_adtc_start+0x1f0>)
   1f9d2:	2209      	movs	r2, #9
   1f9d4:	701a      	strb	r2, [r3, #0]
		return false;
   1f9d6:	2300      	movs	r3, #0
   1f9d8:	e051      	b.n	1fa7e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   1f9da:	2313      	movs	r3, #19
   1f9dc:	18fb      	adds	r3, r7, r3
   1f9de:	781b      	ldrb	r3, [r3, #0]
   1f9e0:	001a      	movs	r2, r3
   1f9e2:	2301      	movs	r3, #1
   1f9e4:	439a      	bics	r2, r3
   1f9e6:	1e13      	subs	r3, r2, #0
   1f9e8:	d004      	beq.n	1f9f4 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1f9ea:	4b27      	ldr	r3, [pc, #156]	; (1fa88 <sd_mmc_spi_adtc_start+0x1f0>)
   1f9ec:	2201      	movs	r2, #1
   1f9ee:	701a      	strb	r2, [r3, #0]
		return false;
   1f9f0:	2300      	movs	r3, #0
   1f9f2:	e044      	b.n	1fa7e <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   1f9f4:	68fa      	ldr	r2, [r7, #12]
   1f9f6:	2380      	movs	r3, #128	; 0x80
   1f9f8:	019b      	lsls	r3, r3, #6
   1f9fa:	4013      	ands	r3, r2
   1f9fc:	d00d      	beq.n	1fa1a <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   1f9fe:	4b28      	ldr	r3, [pc, #160]	; (1faa0 <sd_mmc_spi_adtc_start+0x208>)
   1fa00:	4798      	blx	r3
   1fa02:	0003      	movs	r3, r0
   1fa04:	001a      	movs	r2, r3
   1fa06:	2301      	movs	r3, #1
   1fa08:	4053      	eors	r3, r2
   1fa0a:	b2db      	uxtb	r3, r3
   1fa0c:	2b00      	cmp	r3, #0
   1fa0e:	d004      	beq.n	1fa1a <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   1fa10:	4b1d      	ldr	r3, [pc, #116]	; (1fa88 <sd_mmc_spi_adtc_start+0x1f0>)
   1fa12:	2203      	movs	r2, #3
   1fa14:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   1fa16:	2300      	movs	r3, #0
   1fa18:	e031      	b.n	1fa7e <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   1fa1a:	68fa      	ldr	r2, [r7, #12]
   1fa1c:	2380      	movs	r3, #128	; 0x80
   1fa1e:	009b      	lsls	r3, r3, #2
   1fa20:	4013      	ands	r3, r2
   1fa22:	d00e      	beq.n	1fa42 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   1fa24:	4b1d      	ldr	r3, [pc, #116]	; (1fa9c <sd_mmc_spi_adtc_start+0x204>)
   1fa26:	2200      	movs	r2, #0
   1fa28:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   1fa2a:	231c      	movs	r3, #28
   1fa2c:	18fb      	adds	r3, r7, r3
   1fa2e:	881b      	ldrh	r3, [r3, #0]
   1fa30:	491a      	ldr	r1, [pc, #104]	; (1fa9c <sd_mmc_spi_adtc_start+0x204>)
   1fa32:	4817      	ldr	r0, [pc, #92]	; (1fa90 <sd_mmc_spi_adtc_start+0x1f8>)
   1fa34:	2201      	movs	r2, #1
   1fa36:	4c18      	ldr	r4, [pc, #96]	; (1fa98 <sd_mmc_spi_adtc_start+0x200>)
   1fa38:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   1fa3a:	4b18      	ldr	r3, [pc, #96]	; (1fa9c <sd_mmc_spi_adtc_start+0x204>)
   1fa3c:	681a      	ldr	r2, [r3, #0]
   1fa3e:	4b17      	ldr	r3, [pc, #92]	; (1fa9c <sd_mmc_spi_adtc_start+0x204>)
   1fa40:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   1fa42:	68fa      	ldr	r2, [r7, #12]
   1fa44:	2380      	movs	r3, #128	; 0x80
   1fa46:	00db      	lsls	r3, r3, #3
   1fa48:	4013      	ands	r3, r2
   1fa4a:	d00c      	beq.n	1fa66 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   1fa4c:	231c      	movs	r3, #28
   1fa4e:	18fb      	adds	r3, r7, r3
   1fa50:	881b      	ldrh	r3, [r3, #0]
   1fa52:	4912      	ldr	r1, [pc, #72]	; (1fa9c <sd_mmc_spi_adtc_start+0x204>)
   1fa54:	480e      	ldr	r0, [pc, #56]	; (1fa90 <sd_mmc_spi_adtc_start+0x1f8>)
   1fa56:	2204      	movs	r2, #4
   1fa58:	4c0f      	ldr	r4, [pc, #60]	; (1fa98 <sd_mmc_spi_adtc_start+0x200>)
   1fa5a:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   1fa5c:	4b0f      	ldr	r3, [pc, #60]	; (1fa9c <sd_mmc_spi_adtc_start+0x204>)
   1fa5e:	681b      	ldr	r3, [r3, #0]
   1fa60:	ba1a      	rev	r2, r3
   1fa62:	4b0e      	ldr	r3, [pc, #56]	; (1fa9c <sd_mmc_spi_adtc_start+0x204>)
   1fa64:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   1fa66:	4b0f      	ldr	r3, [pc, #60]	; (1faa4 <sd_mmc_spi_adtc_start+0x20c>)
   1fa68:	1dba      	adds	r2, r7, #6
   1fa6a:	8812      	ldrh	r2, [r2, #0]
   1fa6c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   1fa6e:	4b0e      	ldr	r3, [pc, #56]	; (1faa8 <sd_mmc_spi_adtc_start+0x210>)
   1fa70:	1d3a      	adds	r2, r7, #4
   1fa72:	8812      	ldrh	r2, [r2, #0]
   1fa74:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   1fa76:	4b0d      	ldr	r3, [pc, #52]	; (1faac <sd_mmc_spi_adtc_start+0x214>)
   1fa78:	2200      	movs	r2, #0
   1fa7a:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   1fa7c:	2301      	movs	r3, #1
}
   1fa7e:	0018      	movs	r0, r3
   1fa80:	46bd      	mov	sp, r7
   1fa82:	b009      	add	sp, #36	; 0x24
   1fa84:	bd90      	pop	{r4, r7, pc}
   1fa86:	46c0      	nop			; (mov r8, r8)
   1fa88:	20004113 	.word	0x20004113
   1fa8c:	0001f339 	.word	0x0001f339
   1fa90:	200040d0 	.word	0x200040d0
   1fa94:	00027e5d 	.word	0x00027e5d
   1fa98:	00027c39 	.word	0x00027c39
   1fa9c:	20004114 	.word	0x20004114
   1faa0:	0001f3f5 	.word	0x0001f3f5
   1faa4:	2000411c 	.word	0x2000411c
   1faa8:	2000411e 	.word	0x2000411e
   1faac:	20004118 	.word	0x20004118

0001fab0 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   1fab0:	b580      	push	{r7, lr}
   1fab2:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   1fab4:	4b02      	ldr	r3, [pc, #8]	; (1fac0 <sd_mmc_spi_get_response+0x10>)
   1fab6:	681b      	ldr	r3, [r3, #0]
}
   1fab8:	0018      	movs	r0, r3
   1faba:	46bd      	mov	sp, r7
   1fabc:	bd80      	pop	{r7, pc}
   1fabe:	46c0      	nop			; (mov r8, r8)
   1fac0:	20004114 	.word	0x20004114

0001fac4 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   1fac4:	b590      	push	{r4, r7, lr}
   1fac6:	b085      	sub	sp, #20
   1fac8:	af00      	add	r7, sp, #0
   1faca:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   1facc:	230e      	movs	r3, #14
   1face:	18fb      	adds	r3, r7, r3
   1fad0:	22ff      	movs	r2, #255	; 0xff
   1fad2:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fad4:	4b1c      	ldr	r3, [pc, #112]	; (1fb48 <sd_mmc_spi_read_word+0x84>)
   1fad6:	2200      	movs	r2, #0
   1fad8:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1fada:	4b1c      	ldr	r3, [pc, #112]	; (1fb4c <sd_mmc_spi_read_word+0x88>)
   1fadc:	681a      	ldr	r2, [r3, #0]
   1fade:	4b1c      	ldr	r3, [pc, #112]	; (1fb50 <sd_mmc_spi_read_word+0x8c>)
   1fae0:	881b      	ldrh	r3, [r3, #0]
   1fae2:	0019      	movs	r1, r3
   1fae4:	4b1b      	ldr	r3, [pc, #108]	; (1fb54 <sd_mmc_spi_read_word+0x90>)
   1fae6:	0010      	movs	r0, r2
   1fae8:	4798      	blx	r3
   1faea:	1e0b      	subs	r3, r1, #0
   1faec:	d10a      	bne.n	1fb04 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   1faee:	4b1a      	ldr	r3, [pc, #104]	; (1fb58 <sd_mmc_spi_read_word+0x94>)
   1faf0:	4798      	blx	r3
   1faf2:	0003      	movs	r3, r0
   1faf4:	001a      	movs	r2, r3
   1faf6:	2301      	movs	r3, #1
   1faf8:	4053      	eors	r3, r2
   1fafa:	b2db      	uxtb	r3, r3
   1fafc:	2b00      	cmp	r3, #0
   1fafe:	d001      	beq.n	1fb04 <sd_mmc_spi_read_word+0x40>
			return false;
   1fb00:	2300      	movs	r3, #0
   1fb02:	e01d      	b.n	1fb40 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   1fb04:	230e      	movs	r3, #14
   1fb06:	18fb      	adds	r3, r7, r3
   1fb08:	881b      	ldrh	r3, [r3, #0]
   1fb0a:	1d39      	adds	r1, r7, #4
   1fb0c:	4813      	ldr	r0, [pc, #76]	; (1fb5c <sd_mmc_spi_read_word+0x98>)
   1fb0e:	2204      	movs	r2, #4
   1fb10:	4c13      	ldr	r4, [pc, #76]	; (1fb60 <sd_mmc_spi_read_word+0x9c>)
   1fb12:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   1fb14:	687b      	ldr	r3, [r7, #4]
   1fb16:	687a      	ldr	r2, [r7, #4]
   1fb18:	6812      	ldr	r2, [r2, #0]
   1fb1a:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   1fb1c:	4b0b      	ldr	r3, [pc, #44]	; (1fb4c <sd_mmc_spi_read_word+0x88>)
   1fb1e:	681b      	ldr	r3, [r3, #0]
   1fb20:	1d1a      	adds	r2, r3, #4
   1fb22:	4b0a      	ldr	r3, [pc, #40]	; (1fb4c <sd_mmc_spi_read_word+0x88>)
   1fb24:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1fb26:	4b09      	ldr	r3, [pc, #36]	; (1fb4c <sd_mmc_spi_read_word+0x88>)
   1fb28:	681a      	ldr	r2, [r3, #0]
   1fb2a:	4b09      	ldr	r3, [pc, #36]	; (1fb50 <sd_mmc_spi_read_word+0x8c>)
   1fb2c:	881b      	ldrh	r3, [r3, #0]
   1fb2e:	0019      	movs	r1, r3
   1fb30:	4b08      	ldr	r3, [pc, #32]	; (1fb54 <sd_mmc_spi_read_word+0x90>)
   1fb32:	0010      	movs	r0, r2
   1fb34:	4798      	blx	r3
   1fb36:	1e0b      	subs	r3, r1, #0
   1fb38:	d101      	bne.n	1fb3e <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   1fb3a:	4b0a      	ldr	r3, [pc, #40]	; (1fb64 <sd_mmc_spi_read_word+0xa0>)
   1fb3c:	4798      	blx	r3
	}
	return true;
   1fb3e:	2301      	movs	r3, #1
}
   1fb40:	0018      	movs	r0, r3
   1fb42:	46bd      	mov	sp, r7
   1fb44:	b005      	add	sp, #20
   1fb46:	bd90      	pop	{r4, r7, pc}
   1fb48:	20004113 	.word	0x20004113
   1fb4c:	20004118 	.word	0x20004118
   1fb50:	2000411c 	.word	0x2000411c
   1fb54:	00032761 	.word	0x00032761
   1fb58:	0001f461 	.word	0x0001f461
   1fb5c:	200040d0 	.word	0x200040d0
   1fb60:	00027c39 	.word	0x00027c39
   1fb64:	0001f4e5 	.word	0x0001f4e5

0001fb68 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   1fb68:	b590      	push	{r4, r7, lr}
   1fb6a:	b085      	sub	sp, #20
   1fb6c:	af00      	add	r7, sp, #0
   1fb6e:	6078      	str	r0, [r7, #4]
   1fb70:	000a      	movs	r2, r1
   1fb72:	1cbb      	adds	r3, r7, #2
   1fb74:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   1fb76:	230a      	movs	r3, #10
   1fb78:	18fb      	adds	r3, r7, r3
   1fb7a:	22ff      	movs	r2, #255	; 0xff
   1fb7c:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fb7e:	4b1c      	ldr	r3, [pc, #112]	; (1fbf0 <sd_mmc_spi_start_read_blocks+0x88>)
   1fb80:	2200      	movs	r2, #0
   1fb82:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1fb84:	2300      	movs	r3, #0
   1fb86:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1fb88:	e025      	b.n	1fbd6 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   1fb8a:	4b1a      	ldr	r3, [pc, #104]	; (1fbf4 <sd_mmc_spi_start_read_blocks+0x8c>)
   1fb8c:	4798      	blx	r3
   1fb8e:	0003      	movs	r3, r0
   1fb90:	001a      	movs	r2, r3
   1fb92:	2301      	movs	r3, #1
   1fb94:	4053      	eors	r3, r2
   1fb96:	b2db      	uxtb	r3, r3
   1fb98:	2b00      	cmp	r3, #0
   1fb9a:	d001      	beq.n	1fba0 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   1fb9c:	2300      	movs	r3, #0
   1fb9e:	e022      	b.n	1fbe6 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1fba0:	687a      	ldr	r2, [r7, #4]
   1fba2:	68fb      	ldr	r3, [r7, #12]
   1fba4:	18d1      	adds	r1, r2, r3
   1fba6:	4b14      	ldr	r3, [pc, #80]	; (1fbf8 <sd_mmc_spi_start_read_blocks+0x90>)
   1fba8:	881a      	ldrh	r2, [r3, #0]
   1fbaa:	230a      	movs	r3, #10
   1fbac:	18fb      	adds	r3, r7, r3
   1fbae:	881b      	ldrh	r3, [r3, #0]
   1fbb0:	4812      	ldr	r0, [pc, #72]	; (1fbfc <sd_mmc_spi_start_read_blocks+0x94>)
   1fbb2:	4c13      	ldr	r4, [pc, #76]	; (1fc00 <sd_mmc_spi_start_read_blocks+0x98>)
   1fbb4:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   1fbb6:	4b10      	ldr	r3, [pc, #64]	; (1fbf8 <sd_mmc_spi_start_read_blocks+0x90>)
   1fbb8:	881b      	ldrh	r3, [r3, #0]
   1fbba:	001a      	movs	r2, r3
   1fbbc:	68fb      	ldr	r3, [r7, #12]
   1fbbe:	189b      	adds	r3, r3, r2
   1fbc0:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1fbc2:	4b0d      	ldr	r3, [pc, #52]	; (1fbf8 <sd_mmc_spi_start_read_blocks+0x90>)
   1fbc4:	881b      	ldrh	r3, [r3, #0]
   1fbc6:	001a      	movs	r2, r3
   1fbc8:	4b0e      	ldr	r3, [pc, #56]	; (1fc04 <sd_mmc_spi_start_read_blocks+0x9c>)
   1fbca:	681b      	ldr	r3, [r3, #0]
   1fbcc:	18d2      	adds	r2, r2, r3
   1fbce:	4b0d      	ldr	r3, [pc, #52]	; (1fc04 <sd_mmc_spi_start_read_blocks+0x9c>)
   1fbd0:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   1fbd2:	4b0d      	ldr	r3, [pc, #52]	; (1fc08 <sd_mmc_spi_start_read_blocks+0xa0>)
   1fbd4:	4798      	blx	r3
	while (nb_block--) {
   1fbd6:	1cbb      	adds	r3, r7, #2
   1fbd8:	881b      	ldrh	r3, [r3, #0]
   1fbda:	1cba      	adds	r2, r7, #2
   1fbdc:	1e59      	subs	r1, r3, #1
   1fbde:	8011      	strh	r1, [r2, #0]
   1fbe0:	2b00      	cmp	r3, #0
   1fbe2:	d1d2      	bne.n	1fb8a <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   1fbe4:	2301      	movs	r3, #1
}
   1fbe6:	0018      	movs	r0, r3
   1fbe8:	46bd      	mov	sp, r7
   1fbea:	b005      	add	sp, #20
   1fbec:	bd90      	pop	{r4, r7, pc}
   1fbee:	46c0      	nop			; (mov r8, r8)
   1fbf0:	20004113 	.word	0x20004113
   1fbf4:	0001f461 	.word	0x0001f461
   1fbf8:	2000411c 	.word	0x2000411c
   1fbfc:	200040d0 	.word	0x200040d0
   1fc00:	00027c39 	.word	0x00027c39
   1fc04:	20004118 	.word	0x20004118
   1fc08:	0001f4e5 	.word	0x0001f4e5

0001fc0c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   1fc0c:	b580      	push	{r7, lr}
   1fc0e:	af00      	add	r7, sp, #0
	return true;
   1fc10:	2301      	movs	r3, #1
}
   1fc12:	0018      	movs	r0, r3
   1fc14:	46bd      	mov	sp, r7
   1fc16:	bd80      	pop	{r7, pc}

0001fc18 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   1fc18:	b580      	push	{r7, lr}
   1fc1a:	b084      	sub	sp, #16
   1fc1c:	af00      	add	r7, sp, #0
   1fc1e:	6078      	str	r0, [r7, #4]
   1fc20:	000a      	movs	r2, r1
   1fc22:	1cbb      	adds	r3, r7, #2
   1fc24:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fc26:	4b24      	ldr	r3, [pc, #144]	; (1fcb8 <sd_mmc_spi_start_write_blocks+0xa0>)
   1fc28:	2200      	movs	r2, #0
   1fc2a:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1fc2c:	2300      	movs	r3, #0
   1fc2e:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1fc30:	e035      	b.n	1fc9e <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   1fc32:	4b22      	ldr	r3, [pc, #136]	; (1fcbc <sd_mmc_spi_start_write_blocks+0xa4>)
   1fc34:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1fc36:	687a      	ldr	r2, [r7, #4]
   1fc38:	68fb      	ldr	r3, [r7, #12]
   1fc3a:	18d1      	adds	r1, r2, r3
   1fc3c:	4b20      	ldr	r3, [pc, #128]	; (1fcc0 <sd_mmc_spi_start_write_blocks+0xa8>)
   1fc3e:	881a      	ldrh	r2, [r3, #0]
   1fc40:	4b20      	ldr	r3, [pc, #128]	; (1fcc4 <sd_mmc_spi_start_write_blocks+0xac>)
   1fc42:	0018      	movs	r0, r3
   1fc44:	4b20      	ldr	r3, [pc, #128]	; (1fcc8 <sd_mmc_spi_start_write_blocks+0xb0>)
   1fc46:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   1fc48:	4b1d      	ldr	r3, [pc, #116]	; (1fcc0 <sd_mmc_spi_start_write_blocks+0xa8>)
   1fc4a:	881b      	ldrh	r3, [r3, #0]
   1fc4c:	001a      	movs	r2, r3
   1fc4e:	68fb      	ldr	r3, [r7, #12]
   1fc50:	189b      	adds	r3, r3, r2
   1fc52:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1fc54:	4b1a      	ldr	r3, [pc, #104]	; (1fcc0 <sd_mmc_spi_start_write_blocks+0xa8>)
   1fc56:	881b      	ldrh	r3, [r3, #0]
   1fc58:	001a      	movs	r2, r3
   1fc5a:	4b1c      	ldr	r3, [pc, #112]	; (1fccc <sd_mmc_spi_start_write_blocks+0xb4>)
   1fc5c:	681b      	ldr	r3, [r3, #0]
   1fc5e:	18d2      	adds	r2, r2, r3
   1fc60:	4b1a      	ldr	r3, [pc, #104]	; (1fccc <sd_mmc_spi_start_write_blocks+0xb4>)
   1fc62:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   1fc64:	4b1a      	ldr	r3, [pc, #104]	; (1fcd0 <sd_mmc_spi_start_write_blocks+0xb8>)
   1fc66:	4798      	blx	r3
   1fc68:	0003      	movs	r3, r0
   1fc6a:	001a      	movs	r2, r3
   1fc6c:	2301      	movs	r3, #1
   1fc6e:	4053      	eors	r3, r2
   1fc70:	b2db      	uxtb	r3, r3
   1fc72:	2b00      	cmp	r3, #0
   1fc74:	d001      	beq.n	1fc7a <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   1fc76:	2300      	movs	r3, #0
   1fc78:	e019      	b.n	1fcae <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   1fc7a:	1cbb      	adds	r3, r7, #2
   1fc7c:	881b      	ldrh	r3, [r3, #0]
   1fc7e:	2b00      	cmp	r3, #0
   1fc80:	d00d      	beq.n	1fc9e <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   1fc82:	4b14      	ldr	r3, [pc, #80]	; (1fcd4 <sd_mmc_spi_start_write_blocks+0xbc>)
   1fc84:	4798      	blx	r3
   1fc86:	0003      	movs	r3, r0
   1fc88:	001a      	movs	r2, r3
   1fc8a:	2301      	movs	r3, #1
   1fc8c:	4053      	eors	r3, r2
   1fc8e:	b2db      	uxtb	r3, r3
   1fc90:	2b00      	cmp	r3, #0
   1fc92:	d004      	beq.n	1fc9e <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1fc94:	4b08      	ldr	r3, [pc, #32]	; (1fcb8 <sd_mmc_spi_start_write_blocks+0xa0>)
   1fc96:	2205      	movs	r2, #5
   1fc98:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1fc9a:	2300      	movs	r3, #0
   1fc9c:	e007      	b.n	1fcae <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   1fc9e:	1cbb      	adds	r3, r7, #2
   1fca0:	881b      	ldrh	r3, [r3, #0]
   1fca2:	1cba      	adds	r2, r7, #2
   1fca4:	1e59      	subs	r1, r3, #1
   1fca6:	8011      	strh	r1, [r2, #0]
   1fca8:	2b00      	cmp	r3, #0
   1fcaa:	d1c2      	bne.n	1fc32 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   1fcac:	2301      	movs	r3, #1
}
   1fcae:	0018      	movs	r0, r3
   1fcb0:	46bd      	mov	sp, r7
   1fcb2:	b004      	add	sp, #16
   1fcb4:	bd80      	pop	{r7, pc}
   1fcb6:	46c0      	nop			; (mov r8, r8)
   1fcb8:	20004113 	.word	0x20004113
   1fcbc:	0001f511 	.word	0x0001f511
   1fcc0:	2000411c 	.word	0x2000411c
   1fcc4:	200040d0 	.word	0x200040d0
   1fcc8:	00027e5d 	.word	0x00027e5d
   1fccc:	20004118 	.word	0x20004118
   1fcd0:	0001f561 	.word	0x0001f561
   1fcd4:	0001f3f5 	.word	0x0001f3f5

0001fcd8 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   1fcd8:	b580      	push	{r7, lr}
   1fcda:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   1fcdc:	4b09      	ldr	r3, [pc, #36]	; (1fd04 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   1fcde:	4798      	blx	r3
   1fce0:	0003      	movs	r3, r0
   1fce2:	001a      	movs	r2, r3
   1fce4:	2301      	movs	r3, #1
   1fce6:	4053      	eors	r3, r2
   1fce8:	b2db      	uxtb	r3, r3
   1fcea:	2b00      	cmp	r3, #0
   1fcec:	d004      	beq.n	1fcf8 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1fcee:	4b06      	ldr	r3, [pc, #24]	; (1fd08 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   1fcf0:	2205      	movs	r2, #5
   1fcf2:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   1fcf4:	2300      	movs	r3, #0
   1fcf6:	e002      	b.n	1fcfe <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   1fcf8:	4b04      	ldr	r3, [pc, #16]	; (1fd0c <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   1fcfa:	4798      	blx	r3
   1fcfc:	0003      	movs	r3, r0
}
   1fcfe:	0018      	movs	r0, r3
   1fd00:	46bd      	mov	sp, r7
   1fd02:	bd80      	pop	{r7, pc}
   1fd04:	0001f3f5 	.word	0x0001f3f5
   1fd08:	20004113 	.word	0x20004113
   1fd0c:	0001f5f5 	.word	0x0001f5f5

0001fd10 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   1fd10:	b580      	push	{r7, lr}
   1fd12:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1fd14:	2000      	movs	r0, #0
   1fd16:	4b0f      	ldr	r3, [pc, #60]	; (1fd54 <delay_init+0x44>)
   1fd18:	4798      	blx	r3
   1fd1a:	0002      	movs	r2, r0
   1fd1c:	4b0e      	ldr	r3, [pc, #56]	; (1fd58 <delay_init+0x48>)
   1fd1e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   1fd20:	4b0d      	ldr	r3, [pc, #52]	; (1fd58 <delay_init+0x48>)
   1fd22:	6818      	ldr	r0, [r3, #0]
   1fd24:	4b0d      	ldr	r3, [pc, #52]	; (1fd5c <delay_init+0x4c>)
   1fd26:	22fa      	movs	r2, #250	; 0xfa
   1fd28:	0091      	lsls	r1, r2, #2
   1fd2a:	4798      	blx	r3
   1fd2c:	0003      	movs	r3, r0
   1fd2e:	001a      	movs	r2, r3
   1fd30:	4b09      	ldr	r3, [pc, #36]	; (1fd58 <delay_init+0x48>)
   1fd32:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   1fd34:	4b08      	ldr	r3, [pc, #32]	; (1fd58 <delay_init+0x48>)
   1fd36:	6818      	ldr	r0, [r3, #0]
   1fd38:	4b08      	ldr	r3, [pc, #32]	; (1fd5c <delay_init+0x4c>)
   1fd3a:	22fa      	movs	r2, #250	; 0xfa
   1fd3c:	0091      	lsls	r1, r2, #2
   1fd3e:	4798      	blx	r3
   1fd40:	0003      	movs	r3, r0
   1fd42:	001a      	movs	r2, r3
   1fd44:	4b06      	ldr	r3, [pc, #24]	; (1fd60 <delay_init+0x50>)
   1fd46:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1fd48:	4b06      	ldr	r3, [pc, #24]	; (1fd64 <delay_init+0x54>)
   1fd4a:	2205      	movs	r2, #5
   1fd4c:	601a      	str	r2, [r3, #0]
}
   1fd4e:	46c0      	nop			; (mov r8, r8)
   1fd50:	46bd      	mov	sp, r7
   1fd52:	bd80      	pop	{r7, pc}
   1fd54:	000299e1 	.word	0x000299e1
   1fd58:	20000110 	.word	0x20000110
   1fd5c:	00032655 	.word	0x00032655
   1fd60:	20000114 	.word	0x20000114
   1fd64:	e000e010 	.word	0xe000e010

0001fd68 <system_pinmux_get_group_from_gpio_pin>:
{
   1fd68:	b580      	push	{r7, lr}
   1fd6a:	b084      	sub	sp, #16
   1fd6c:	af00      	add	r7, sp, #0
   1fd6e:	0002      	movs	r2, r0
   1fd70:	1dfb      	adds	r3, r7, #7
   1fd72:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1fd74:	230f      	movs	r3, #15
   1fd76:	18fb      	adds	r3, r7, r3
   1fd78:	1dfa      	adds	r2, r7, #7
   1fd7a:	7812      	ldrb	r2, [r2, #0]
   1fd7c:	09d2      	lsrs	r2, r2, #7
   1fd7e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1fd80:	230e      	movs	r3, #14
   1fd82:	18fb      	adds	r3, r7, r3
   1fd84:	1dfa      	adds	r2, r7, #7
   1fd86:	7812      	ldrb	r2, [r2, #0]
   1fd88:	0952      	lsrs	r2, r2, #5
   1fd8a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1fd8c:	4b0d      	ldr	r3, [pc, #52]	; (1fdc4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1fd8e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1fd90:	230f      	movs	r3, #15
   1fd92:	18fb      	adds	r3, r7, r3
   1fd94:	781b      	ldrb	r3, [r3, #0]
   1fd96:	2b00      	cmp	r3, #0
   1fd98:	d10f      	bne.n	1fdba <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1fd9a:	230f      	movs	r3, #15
   1fd9c:	18fb      	adds	r3, r7, r3
   1fd9e:	781b      	ldrb	r3, [r3, #0]
   1fda0:	009b      	lsls	r3, r3, #2
   1fda2:	2210      	movs	r2, #16
   1fda4:	4694      	mov	ip, r2
   1fda6:	44bc      	add	ip, r7
   1fda8:	4463      	add	r3, ip
   1fdaa:	3b08      	subs	r3, #8
   1fdac:	681a      	ldr	r2, [r3, #0]
   1fdae:	230e      	movs	r3, #14
   1fdb0:	18fb      	adds	r3, r7, r3
   1fdb2:	781b      	ldrb	r3, [r3, #0]
   1fdb4:	01db      	lsls	r3, r3, #7
   1fdb6:	18d3      	adds	r3, r2, r3
   1fdb8:	e000      	b.n	1fdbc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1fdba:	2300      	movs	r3, #0
}
   1fdbc:	0018      	movs	r0, r3
   1fdbe:	46bd      	mov	sp, r7
   1fdc0:	b004      	add	sp, #16
   1fdc2:	bd80      	pop	{r7, pc}
   1fdc4:	41004400 	.word	0x41004400

0001fdc8 <system_interrupt_enable_global>:
{
   1fdc8:	b580      	push	{r7, lr}
   1fdca:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   1fdcc:	4b04      	ldr	r3, [pc, #16]	; (1fde0 <system_interrupt_enable_global+0x18>)
   1fdce:	2201      	movs	r2, #1
   1fdd0:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1fdd2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1fdd6:	b662      	cpsie	i
}
   1fdd8:	46c0      	nop			; (mov r8, r8)
   1fdda:	46bd      	mov	sp, r7
   1fddc:	bd80      	pop	{r7, pc}
   1fdde:	46c0      	nop			; (mov r8, r8)
   1fde0:	2000011a 	.word	0x2000011a

0001fde4 <port_get_group_from_gpio_pin>:
{
   1fde4:	b580      	push	{r7, lr}
   1fde6:	b082      	sub	sp, #8
   1fde8:	af00      	add	r7, sp, #0
   1fdea:	0002      	movs	r2, r0
   1fdec:	1dfb      	adds	r3, r7, #7
   1fdee:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1fdf0:	1dfb      	adds	r3, r7, #7
   1fdf2:	781b      	ldrb	r3, [r3, #0]
   1fdf4:	0018      	movs	r0, r3
   1fdf6:	4b03      	ldr	r3, [pc, #12]	; (1fe04 <port_get_group_from_gpio_pin+0x20>)
   1fdf8:	4798      	blx	r3
   1fdfa:	0003      	movs	r3, r0
}
   1fdfc:	0018      	movs	r0, r3
   1fdfe:	46bd      	mov	sp, r7
   1fe00:	b002      	add	sp, #8
   1fe02:	bd80      	pop	{r7, pc}
   1fe04:	0001fd69 	.word	0x0001fd69

0001fe08 <port_get_config_defaults>:
{
   1fe08:	b580      	push	{r7, lr}
   1fe0a:	b082      	sub	sp, #8
   1fe0c:	af00      	add	r7, sp, #0
   1fe0e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1fe10:	687b      	ldr	r3, [r7, #4]
   1fe12:	2200      	movs	r2, #0
   1fe14:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1fe16:	687b      	ldr	r3, [r7, #4]
   1fe18:	2201      	movs	r2, #1
   1fe1a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1fe1c:	687b      	ldr	r3, [r7, #4]
   1fe1e:	2200      	movs	r2, #0
   1fe20:	709a      	strb	r2, [r3, #2]
}
   1fe22:	46c0      	nop			; (mov r8, r8)
   1fe24:	46bd      	mov	sp, r7
   1fe26:	b002      	add	sp, #8
   1fe28:	bd80      	pop	{r7, pc}
	...

0001fe2c <port_pin_set_output_level>:
{
   1fe2c:	b580      	push	{r7, lr}
   1fe2e:	b084      	sub	sp, #16
   1fe30:	af00      	add	r7, sp, #0
   1fe32:	0002      	movs	r2, r0
   1fe34:	1dfb      	adds	r3, r7, #7
   1fe36:	701a      	strb	r2, [r3, #0]
   1fe38:	1dbb      	adds	r3, r7, #6
   1fe3a:	1c0a      	adds	r2, r1, #0
   1fe3c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1fe3e:	1dfb      	adds	r3, r7, #7
   1fe40:	781b      	ldrb	r3, [r3, #0]
   1fe42:	0018      	movs	r0, r3
   1fe44:	4b0d      	ldr	r3, [pc, #52]	; (1fe7c <port_pin_set_output_level+0x50>)
   1fe46:	4798      	blx	r3
   1fe48:	0003      	movs	r3, r0
   1fe4a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1fe4c:	1dfb      	adds	r3, r7, #7
   1fe4e:	781b      	ldrb	r3, [r3, #0]
   1fe50:	221f      	movs	r2, #31
   1fe52:	4013      	ands	r3, r2
   1fe54:	2201      	movs	r2, #1
   1fe56:	409a      	lsls	r2, r3
   1fe58:	0013      	movs	r3, r2
   1fe5a:	60bb      	str	r3, [r7, #8]
	if (level) {
   1fe5c:	1dbb      	adds	r3, r7, #6
   1fe5e:	781b      	ldrb	r3, [r3, #0]
   1fe60:	2b00      	cmp	r3, #0
   1fe62:	d003      	beq.n	1fe6c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1fe64:	68fb      	ldr	r3, [r7, #12]
   1fe66:	68ba      	ldr	r2, [r7, #8]
   1fe68:	619a      	str	r2, [r3, #24]
}
   1fe6a:	e002      	b.n	1fe72 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1fe6c:	68fb      	ldr	r3, [r7, #12]
   1fe6e:	68ba      	ldr	r2, [r7, #8]
   1fe70:	615a      	str	r2, [r3, #20]
}
   1fe72:	46c0      	nop			; (mov r8, r8)
   1fe74:	46bd      	mov	sp, r7
   1fe76:	b004      	add	sp, #16
   1fe78:	bd80      	pop	{r7, pc}
   1fe7a:	46c0      	nop			; (mov r8, r8)
   1fe7c:	0001fde5 	.word	0x0001fde5

0001fe80 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   1fe80:	b580      	push	{r7, lr}
   1fe82:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   1fe84:	4b04      	ldr	r3, [pc, #16]	; (1fe98 <chip_isr+0x18>)
   1fe86:	681b      	ldr	r3, [r3, #0]
   1fe88:	2b00      	cmp	r3, #0
   1fe8a:	d002      	beq.n	1fe92 <chip_isr+0x12>
		gpfIsr();
   1fe8c:	4b02      	ldr	r3, [pc, #8]	; (1fe98 <chip_isr+0x18>)
   1fe8e:	681b      	ldr	r3, [r3, #0]
   1fe90:	4798      	blx	r3
	}
}
   1fe92:	46c0      	nop			; (mov r8, r8)
   1fe94:	46bd      	mov	sp, r7
   1fe96:	bd80      	pop	{r7, pc}
   1fe98:	20004120 	.word	0x20004120

0001fe9c <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   1fe9c:	b580      	push	{r7, lr}
   1fe9e:	b082      	sub	sp, #8
   1fea0:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   1fea2:	1d3b      	adds	r3, r7, #4
   1fea4:	0018      	movs	r0, r3
   1fea6:	4b10      	ldr	r3, [pc, #64]	; (1fee8 <init_chip_pins+0x4c>)
   1fea8:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1feaa:	1d3b      	adds	r3, r7, #4
   1feac:	2201      	movs	r2, #1
   1feae:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   1feb0:	1d3b      	adds	r3, r7, #4
   1feb2:	0019      	movs	r1, r3
   1feb4:	201b      	movs	r0, #27
   1feb6:	4b0d      	ldr	r3, [pc, #52]	; (1feec <init_chip_pins+0x50>)
   1feb8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   1feba:	1d3b      	adds	r3, r7, #4
   1febc:	0019      	movs	r1, r3
   1febe:	201c      	movs	r0, #28
   1fec0:	4b0a      	ldr	r3, [pc, #40]	; (1feec <init_chip_pins+0x50>)
   1fec2:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   1fec4:	1d3b      	adds	r3, r7, #4
   1fec6:	0019      	movs	r1, r3
   1fec8:	2028      	movs	r0, #40	; 0x28
   1feca:	4b08      	ldr	r3, [pc, #32]	; (1feec <init_chip_pins+0x50>)
   1fecc:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1fece:	2100      	movs	r1, #0
   1fed0:	201c      	movs	r0, #28
   1fed2:	4b07      	ldr	r3, [pc, #28]	; (1fef0 <init_chip_pins+0x54>)
   1fed4:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1fed6:	2100      	movs	r1, #0
   1fed8:	201b      	movs	r0, #27
   1feda:	4b05      	ldr	r3, [pc, #20]	; (1fef0 <init_chip_pins+0x54>)
   1fedc:	4798      	blx	r3
}
   1fede:	46c0      	nop			; (mov r8, r8)
   1fee0:	46bd      	mov	sp, r7
   1fee2:	b002      	add	sp, #8
   1fee4:	bd80      	pop	{r7, pc}
   1fee6:	46c0      	nop			; (mov r8, r8)
   1fee8:	0001fe09 	.word	0x0001fe09
   1feec:	00026629 	.word	0x00026629
   1fef0:	0001fe2d 	.word	0x0001fe2d

0001fef4 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   1fef4:	b580      	push	{r7, lr}
   1fef6:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   1fef8:	4b0b      	ldr	r3, [pc, #44]	; (1ff28 <nm_bsp_init+0x34>)
   1fefa:	2200      	movs	r2, #0
   1fefc:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   1fefe:	4b0b      	ldr	r3, [pc, #44]	; (1ff2c <nm_bsp_init+0x38>)
   1ff00:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   1ff02:	4b0b      	ldr	r3, [pc, #44]	; (1ff30 <nm_bsp_init+0x3c>)
   1ff04:	681b      	ldr	r3, [r3, #0]
   1ff06:	2201      	movs	r2, #1
   1ff08:	4013      	ands	r3, r2
   1ff0a:	d004      	beq.n	1ff16 <nm_bsp_init+0x22>
   1ff0c:	4b08      	ldr	r3, [pc, #32]	; (1ff30 <nm_bsp_init+0x3c>)
   1ff0e:	681b      	ldr	r3, [r3, #0]
   1ff10:	2202      	movs	r2, #2
   1ff12:	4013      	ands	r3, r2
   1ff14:	d101      	bne.n	1ff1a <nm_bsp_init+0x26>
	    delay_init();
   1ff16:	4b07      	ldr	r3, [pc, #28]	; (1ff34 <nm_bsp_init+0x40>)
   1ff18:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   1ff1a:	4b07      	ldr	r3, [pc, #28]	; (1ff38 <nm_bsp_init+0x44>)
   1ff1c:	4798      	blx	r3

	return M2M_SUCCESS;
   1ff1e:	2300      	movs	r3, #0
}
   1ff20:	0018      	movs	r0, r3
   1ff22:	46bd      	mov	sp, r7
   1ff24:	bd80      	pop	{r7, pc}
   1ff26:	46c0      	nop			; (mov r8, r8)
   1ff28:	20004120 	.word	0x20004120
   1ff2c:	0001fe9d 	.word	0x0001fe9d
   1ff30:	e000e010 	.word	0xe000e010
   1ff34:	0001fd11 	.word	0x0001fd11
   1ff38:	0001fdc9 	.word	0x0001fdc9

0001ff3c <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   1ff3c:	b580      	push	{r7, lr}
   1ff3e:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1ff40:	2100      	movs	r1, #0
   1ff42:	201c      	movs	r0, #28
   1ff44:	4b0b      	ldr	r3, [pc, #44]	; (1ff74 <nm_bsp_reset+0x38>)
   1ff46:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1ff48:	2100      	movs	r1, #0
   1ff4a:	201b      	movs	r0, #27
   1ff4c:	4b09      	ldr	r3, [pc, #36]	; (1ff74 <nm_bsp_reset+0x38>)
   1ff4e:	4798      	blx	r3
	nm_bsp_sleep(1);
   1ff50:	2001      	movs	r0, #1
   1ff52:	4b09      	ldr	r3, [pc, #36]	; (1ff78 <nm_bsp_reset+0x3c>)
   1ff54:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   1ff56:	2101      	movs	r1, #1
   1ff58:	201c      	movs	r0, #28
   1ff5a:	4b06      	ldr	r3, [pc, #24]	; (1ff74 <nm_bsp_reset+0x38>)
   1ff5c:	4798      	blx	r3
	nm_bsp_sleep(10);
   1ff5e:	200a      	movs	r0, #10
   1ff60:	4b05      	ldr	r3, [pc, #20]	; (1ff78 <nm_bsp_reset+0x3c>)
   1ff62:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   1ff64:	2101      	movs	r1, #1
   1ff66:	201b      	movs	r0, #27
   1ff68:	4b02      	ldr	r3, [pc, #8]	; (1ff74 <nm_bsp_reset+0x38>)
   1ff6a:	4798      	blx	r3
}
   1ff6c:	46c0      	nop			; (mov r8, r8)
   1ff6e:	46bd      	mov	sp, r7
   1ff70:	bd80      	pop	{r7, pc}
   1ff72:	46c0      	nop			; (mov r8, r8)
   1ff74:	0001fe2d 	.word	0x0001fe2d
   1ff78:	0001ff7d 	.word	0x0001ff7d

0001ff7c <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   1ff7c:	b580      	push	{r7, lr}
   1ff7e:	b082      	sub	sp, #8
   1ff80:	af00      	add	r7, sp, #0
   1ff82:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   1ff84:	687b      	ldr	r3, [r7, #4]
   1ff86:	0018      	movs	r0, r3
   1ff88:	4b02      	ldr	r3, [pc, #8]	; (1ff94 <nm_bsp_sleep+0x18>)
   1ff8a:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   1ff8c:	46c0      	nop			; (mov r8, r8)
   1ff8e:	46bd      	mov	sp, r7
   1ff90:	b002      	add	sp, #8
   1ff92:	bd80      	pop	{r7, pc}
   1ff94:	0001bd91 	.word	0x0001bd91

0001ff98 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   1ff98:	b580      	push	{r7, lr}
   1ff9a:	b086      	sub	sp, #24
   1ff9c:	af00      	add	r7, sp, #0
   1ff9e:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   1ffa0:	4b15      	ldr	r3, [pc, #84]	; (1fff8 <nm_bsp_register_isr+0x60>)
   1ffa2:	687a      	ldr	r2, [r7, #4]
   1ffa4:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   1ffa6:	230c      	movs	r3, #12
   1ffa8:	18fb      	adds	r3, r7, r3
   1ffaa:	0018      	movs	r0, r3
   1ffac:	4b13      	ldr	r3, [pc, #76]	; (1fffc <nm_bsp_register_isr+0x64>)
   1ffae:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   1ffb0:	230c      	movs	r3, #12
   1ffb2:	18fb      	adds	r3, r7, r3
   1ffb4:	2229      	movs	r2, #41	; 0x29
   1ffb6:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   1ffb8:	230c      	movs	r3, #12
   1ffba:	18fb      	adds	r3, r7, r3
   1ffbc:	2200      	movs	r2, #0
   1ffbe:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1ffc0:	230c      	movs	r3, #12
   1ffc2:	18fb      	adds	r3, r7, r3
   1ffc4:	2201      	movs	r2, #1
   1ffc6:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1ffc8:	230c      	movs	r3, #12
   1ffca:	18fb      	adds	r3, r7, r3
   1ffcc:	2202      	movs	r2, #2
   1ffce:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   1ffd0:	230c      	movs	r3, #12
   1ffd2:	18fb      	adds	r3, r7, r3
   1ffd4:	0019      	movs	r1, r3
   1ffd6:	2009      	movs	r0, #9
   1ffd8:	4b09      	ldr	r3, [pc, #36]	; (20000 <nm_bsp_register_isr+0x68>)
   1ffda:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   1ffdc:	4b09      	ldr	r3, [pc, #36]	; (20004 <nm_bsp_register_isr+0x6c>)
   1ffde:	2200      	movs	r2, #0
   1ffe0:	2109      	movs	r1, #9
   1ffe2:	0018      	movs	r0, r3
   1ffe4:	4b08      	ldr	r3, [pc, #32]	; (20008 <nm_bsp_register_isr+0x70>)
   1ffe6:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1ffe8:	2100      	movs	r1, #0
   1ffea:	2009      	movs	r0, #9
   1ffec:	4b07      	ldr	r3, [pc, #28]	; (2000c <nm_bsp_register_isr+0x74>)
   1ffee:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   1fff0:	46c0      	nop			; (mov r8, r8)
   1fff2:	46bd      	mov	sp, r7
   1fff4:	b006      	add	sp, #24
   1fff6:	bd80      	pop	{r7, pc}
   1fff8:	20004120 	.word	0x20004120
   1fffc:	000264d1 	.word	0x000264d1
   20000:	00026505 	.word	0x00026505
   20004:	0001fe81 	.word	0x0001fe81
   20008:	000260d1 	.word	0x000260d1
   2000c:	00026135 	.word	0x00026135

00020010 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   20010:	b580      	push	{r7, lr}
   20012:	b082      	sub	sp, #8
   20014:	af00      	add	r7, sp, #0
   20016:	0002      	movs	r2, r0
   20018:	1dfb      	adds	r3, r7, #7
   2001a:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   2001c:	1dfb      	adds	r3, r7, #7
   2001e:	781b      	ldrb	r3, [r3, #0]
   20020:	2b00      	cmp	r3, #0
   20022:	d004      	beq.n	2002e <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   20024:	2100      	movs	r1, #0
   20026:	2009      	movs	r0, #9
   20028:	4b05      	ldr	r3, [pc, #20]	; (20040 <nm_bsp_interrupt_ctrl+0x30>)
   2002a:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   2002c:	e003      	b.n	20036 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   2002e:	2100      	movs	r1, #0
   20030:	2009      	movs	r0, #9
   20032:	4b04      	ldr	r3, [pc, #16]	; (20044 <nm_bsp_interrupt_ctrl+0x34>)
   20034:	4798      	blx	r3
}
   20036:	46c0      	nop			; (mov r8, r8)
   20038:	46bd      	mov	sp, r7
   2003a:	b002      	add	sp, #8
   2003c:	bd80      	pop	{r7, pc}
   2003e:	46c0      	nop			; (mov r8, r8)
   20040:	00026135 	.word	0x00026135
   20044:	0002617d 	.word	0x0002617d

00020048 <system_pinmux_get_group_from_gpio_pin>:
{
   20048:	b580      	push	{r7, lr}
   2004a:	b084      	sub	sp, #16
   2004c:	af00      	add	r7, sp, #0
   2004e:	0002      	movs	r2, r0
   20050:	1dfb      	adds	r3, r7, #7
   20052:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20054:	230f      	movs	r3, #15
   20056:	18fb      	adds	r3, r7, r3
   20058:	1dfa      	adds	r2, r7, #7
   2005a:	7812      	ldrb	r2, [r2, #0]
   2005c:	09d2      	lsrs	r2, r2, #7
   2005e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20060:	230e      	movs	r3, #14
   20062:	18fb      	adds	r3, r7, r3
   20064:	1dfa      	adds	r2, r7, #7
   20066:	7812      	ldrb	r2, [r2, #0]
   20068:	0952      	lsrs	r2, r2, #5
   2006a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2006c:	4b0d      	ldr	r3, [pc, #52]	; (200a4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2006e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   20070:	230f      	movs	r3, #15
   20072:	18fb      	adds	r3, r7, r3
   20074:	781b      	ldrb	r3, [r3, #0]
   20076:	2b00      	cmp	r3, #0
   20078:	d10f      	bne.n	2009a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2007a:	230f      	movs	r3, #15
   2007c:	18fb      	adds	r3, r7, r3
   2007e:	781b      	ldrb	r3, [r3, #0]
   20080:	009b      	lsls	r3, r3, #2
   20082:	2210      	movs	r2, #16
   20084:	4694      	mov	ip, r2
   20086:	44bc      	add	ip, r7
   20088:	4463      	add	r3, ip
   2008a:	3b08      	subs	r3, #8
   2008c:	681a      	ldr	r2, [r3, #0]
   2008e:	230e      	movs	r3, #14
   20090:	18fb      	adds	r3, r7, r3
   20092:	781b      	ldrb	r3, [r3, #0]
   20094:	01db      	lsls	r3, r3, #7
   20096:	18d3      	adds	r3, r2, r3
   20098:	e000      	b.n	2009c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2009a:	2300      	movs	r3, #0
}
   2009c:	0018      	movs	r0, r3
   2009e:	46bd      	mov	sp, r7
   200a0:	b004      	add	sp, #16
   200a2:	bd80      	pop	{r7, pc}
   200a4:	41004400 	.word	0x41004400

000200a8 <system_interrupt_enable>:
{
   200a8:	b580      	push	{r7, lr}
   200aa:	b082      	sub	sp, #8
   200ac:	af00      	add	r7, sp, #0
   200ae:	0002      	movs	r2, r0
   200b0:	1dfb      	adds	r3, r7, #7
   200b2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   200b4:	4b06      	ldr	r3, [pc, #24]	; (200d0 <system_interrupt_enable+0x28>)
   200b6:	1dfa      	adds	r2, r7, #7
   200b8:	7812      	ldrb	r2, [r2, #0]
   200ba:	0011      	movs	r1, r2
   200bc:	221f      	movs	r2, #31
   200be:	400a      	ands	r2, r1
   200c0:	2101      	movs	r1, #1
   200c2:	4091      	lsls	r1, r2
   200c4:	000a      	movs	r2, r1
   200c6:	601a      	str	r2, [r3, #0]
}
   200c8:	46c0      	nop			; (mov r8, r8)
   200ca:	46bd      	mov	sp, r7
   200cc:	b002      	add	sp, #8
   200ce:	bd80      	pop	{r7, pc}
   200d0:	e000e100 	.word	0xe000e100

000200d4 <system_interrupt_disable>:
{
   200d4:	b580      	push	{r7, lr}
   200d6:	b082      	sub	sp, #8
   200d8:	af00      	add	r7, sp, #0
   200da:	0002      	movs	r2, r0
   200dc:	1dfb      	adds	r3, r7, #7
   200de:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   200e0:	4a07      	ldr	r2, [pc, #28]	; (20100 <system_interrupt_disable+0x2c>)
   200e2:	1dfb      	adds	r3, r7, #7
   200e4:	781b      	ldrb	r3, [r3, #0]
   200e6:	0019      	movs	r1, r3
   200e8:	231f      	movs	r3, #31
   200ea:	400b      	ands	r3, r1
   200ec:	2101      	movs	r1, #1
   200ee:	4099      	lsls	r1, r3
   200f0:	000b      	movs	r3, r1
   200f2:	0019      	movs	r1, r3
   200f4:	2380      	movs	r3, #128	; 0x80
   200f6:	50d1      	str	r1, [r2, r3]
}
   200f8:	46c0      	nop			; (mov r8, r8)
   200fa:	46bd      	mov	sp, r7
   200fc:	b002      	add	sp, #8
   200fe:	bd80      	pop	{r7, pc}
   20100:	e000e100 	.word	0xe000e100

00020104 <port_get_group_from_gpio_pin>:
{
   20104:	b580      	push	{r7, lr}
   20106:	b082      	sub	sp, #8
   20108:	af00      	add	r7, sp, #0
   2010a:	0002      	movs	r2, r0
   2010c:	1dfb      	adds	r3, r7, #7
   2010e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20110:	1dfb      	adds	r3, r7, #7
   20112:	781b      	ldrb	r3, [r3, #0]
   20114:	0018      	movs	r0, r3
   20116:	4b03      	ldr	r3, [pc, #12]	; (20124 <port_get_group_from_gpio_pin+0x20>)
   20118:	4798      	blx	r3
   2011a:	0003      	movs	r3, r0
}
   2011c:	0018      	movs	r0, r3
   2011e:	46bd      	mov	sp, r7
   20120:	b002      	add	sp, #8
   20122:	bd80      	pop	{r7, pc}
   20124:	00020049 	.word	0x00020049

00020128 <port_get_config_defaults>:
{
   20128:	b580      	push	{r7, lr}
   2012a:	b082      	sub	sp, #8
   2012c:	af00      	add	r7, sp, #0
   2012e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   20130:	687b      	ldr	r3, [r7, #4]
   20132:	2200      	movs	r2, #0
   20134:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   20136:	687b      	ldr	r3, [r7, #4]
   20138:	2201      	movs	r2, #1
   2013a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   2013c:	687b      	ldr	r3, [r7, #4]
   2013e:	2200      	movs	r2, #0
   20140:	709a      	strb	r2, [r3, #2]
}
   20142:	46c0      	nop			; (mov r8, r8)
   20144:	46bd      	mov	sp, r7
   20146:	b002      	add	sp, #8
   20148:	bd80      	pop	{r7, pc}
	...

0002014c <port_pin_set_output_level>:
{
   2014c:	b580      	push	{r7, lr}
   2014e:	b084      	sub	sp, #16
   20150:	af00      	add	r7, sp, #0
   20152:	0002      	movs	r2, r0
   20154:	1dfb      	adds	r3, r7, #7
   20156:	701a      	strb	r2, [r3, #0]
   20158:	1dbb      	adds	r3, r7, #6
   2015a:	1c0a      	adds	r2, r1, #0
   2015c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2015e:	1dfb      	adds	r3, r7, #7
   20160:	781b      	ldrb	r3, [r3, #0]
   20162:	0018      	movs	r0, r3
   20164:	4b0d      	ldr	r3, [pc, #52]	; (2019c <port_pin_set_output_level+0x50>)
   20166:	4798      	blx	r3
   20168:	0003      	movs	r3, r0
   2016a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2016c:	1dfb      	adds	r3, r7, #7
   2016e:	781b      	ldrb	r3, [r3, #0]
   20170:	221f      	movs	r2, #31
   20172:	4013      	ands	r3, r2
   20174:	2201      	movs	r2, #1
   20176:	409a      	lsls	r2, r3
   20178:	0013      	movs	r3, r2
   2017a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2017c:	1dbb      	adds	r3, r7, #6
   2017e:	781b      	ldrb	r3, [r3, #0]
   20180:	2b00      	cmp	r3, #0
   20182:	d003      	beq.n	2018c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   20184:	68fb      	ldr	r3, [r7, #12]
   20186:	68ba      	ldr	r2, [r7, #8]
   20188:	619a      	str	r2, [r3, #24]
}
   2018a:	e002      	b.n	20192 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2018c:	68fb      	ldr	r3, [r7, #12]
   2018e:	68ba      	ldr	r2, [r7, #8]
   20190:	615a      	str	r2, [r3, #20]
}
   20192:	46c0      	nop			; (mov r8, r8)
   20194:	46bd      	mov	sp, r7
   20196:	b004      	add	sp, #16
   20198:	bd80      	pop	{r7, pc}
   2019a:	46c0      	nop			; (mov r8, r8)
   2019c:	00020105 	.word	0x00020105

000201a0 <spi_is_syncing>:
{
   201a0:	b580      	push	{r7, lr}
   201a2:	b084      	sub	sp, #16
   201a4:	af00      	add	r7, sp, #0
   201a6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   201a8:	687b      	ldr	r3, [r7, #4]
   201aa:	681b      	ldr	r3, [r3, #0]
   201ac:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   201ae:	68fb      	ldr	r3, [r7, #12]
   201b0:	69db      	ldr	r3, [r3, #28]
   201b2:	1e5a      	subs	r2, r3, #1
   201b4:	4193      	sbcs	r3, r2
   201b6:	b2db      	uxtb	r3, r3
}
   201b8:	0018      	movs	r0, r3
   201ba:	46bd      	mov	sp, r7
   201bc:	b004      	add	sp, #16
   201be:	bd80      	pop	{r7, pc}

000201c0 <spi_get_config_defaults>:
{
   201c0:	b580      	push	{r7, lr}
   201c2:	b082      	sub	sp, #8
   201c4:	af00      	add	r7, sp, #0
   201c6:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   201c8:	687b      	ldr	r3, [r7, #4]
   201ca:	2201      	movs	r2, #1
   201cc:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   201ce:	687b      	ldr	r3, [r7, #4]
   201d0:	2200      	movs	r2, #0
   201d2:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   201d4:	687b      	ldr	r3, [r7, #4]
   201d6:	2200      	movs	r2, #0
   201d8:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   201da:	687b      	ldr	r3, [r7, #4]
   201dc:	22c0      	movs	r2, #192	; 0xc0
   201de:	0392      	lsls	r2, r2, #14
   201e0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   201e2:	687b      	ldr	r3, [r7, #4]
   201e4:	2200      	movs	r2, #0
   201e6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   201e8:	687b      	ldr	r3, [r7, #4]
   201ea:	2200      	movs	r2, #0
   201ec:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   201ee:	687b      	ldr	r3, [r7, #4]
   201f0:	2201      	movs	r2, #1
   201f2:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   201f4:	687b      	ldr	r3, [r7, #4]
   201f6:	2201      	movs	r2, #1
   201f8:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   201fa:	687b      	ldr	r3, [r7, #4]
   201fc:	2200      	movs	r2, #0
   201fe:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   20200:	687b      	ldr	r3, [r7, #4]
   20202:	2224      	movs	r2, #36	; 0x24
   20204:	2100      	movs	r1, #0
   20206:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   20208:	687b      	ldr	r3, [r7, #4]
   2020a:	3318      	adds	r3, #24
   2020c:	220c      	movs	r2, #12
   2020e:	2100      	movs	r1, #0
   20210:	0018      	movs	r0, r3
   20212:	4b0a      	ldr	r3, [pc, #40]	; (2023c <spi_get_config_defaults+0x7c>)
   20214:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   20216:	687b      	ldr	r3, [r7, #4]
   20218:	4a09      	ldr	r2, [pc, #36]	; (20240 <spi_get_config_defaults+0x80>)
   2021a:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   2021c:	687b      	ldr	r3, [r7, #4]
   2021e:	2200      	movs	r2, #0
   20220:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   20222:	687b      	ldr	r3, [r7, #4]
   20224:	2200      	movs	r2, #0
   20226:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   20228:	687b      	ldr	r3, [r7, #4]
   2022a:	2200      	movs	r2, #0
   2022c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   2022e:	687b      	ldr	r3, [r7, #4]
   20230:	2200      	movs	r2, #0
   20232:	635a      	str	r2, [r3, #52]	; 0x34
};
   20234:	46c0      	nop			; (mov r8, r8)
   20236:	46bd      	mov	sp, r7
   20238:	b002      	add	sp, #8
   2023a:	bd80      	pop	{r7, pc}
   2023c:	0003462f 	.word	0x0003462f
   20240:	000186a0 	.word	0x000186a0

00020244 <spi_slave_inst_get_config_defaults>:
{
   20244:	b580      	push	{r7, lr}
   20246:	b082      	sub	sp, #8
   20248:	af00      	add	r7, sp, #0
   2024a:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   2024c:	687b      	ldr	r3, [r7, #4]
   2024e:	220a      	movs	r2, #10
   20250:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   20252:	687b      	ldr	r3, [r7, #4]
   20254:	2200      	movs	r2, #0
   20256:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   20258:	687b      	ldr	r3, [r7, #4]
   2025a:	2200      	movs	r2, #0
   2025c:	709a      	strb	r2, [r3, #2]
}
   2025e:	46c0      	nop			; (mov r8, r8)
   20260:	46bd      	mov	sp, r7
   20262:	b002      	add	sp, #8
   20264:	bd80      	pop	{r7, pc}
	...

00020268 <spi_attach_slave>:
{
   20268:	b580      	push	{r7, lr}
   2026a:	b084      	sub	sp, #16
   2026c:	af00      	add	r7, sp, #0
   2026e:	6078      	str	r0, [r7, #4]
   20270:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   20272:	683b      	ldr	r3, [r7, #0]
   20274:	781a      	ldrb	r2, [r3, #0]
   20276:	687b      	ldr	r3, [r7, #4]
   20278:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   2027a:	683b      	ldr	r3, [r7, #0]
   2027c:	785a      	ldrb	r2, [r3, #1]
   2027e:	687b      	ldr	r3, [r7, #4]
   20280:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   20282:	683b      	ldr	r3, [r7, #0]
   20284:	789a      	ldrb	r2, [r3, #2]
   20286:	687b      	ldr	r3, [r7, #4]
   20288:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   2028a:	230c      	movs	r3, #12
   2028c:	18fb      	adds	r3, r7, r3
   2028e:	0018      	movs	r0, r3
   20290:	4b0b      	ldr	r3, [pc, #44]	; (202c0 <spi_attach_slave+0x58>)
   20292:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   20294:	230c      	movs	r3, #12
   20296:	18fb      	adds	r3, r7, r3
   20298:	2201      	movs	r2, #1
   2029a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   2029c:	687b      	ldr	r3, [r7, #4]
   2029e:	781b      	ldrb	r3, [r3, #0]
   202a0:	220c      	movs	r2, #12
   202a2:	18ba      	adds	r2, r7, r2
   202a4:	0011      	movs	r1, r2
   202a6:	0018      	movs	r0, r3
   202a8:	4b06      	ldr	r3, [pc, #24]	; (202c4 <spi_attach_slave+0x5c>)
   202aa:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   202ac:	687b      	ldr	r3, [r7, #4]
   202ae:	781b      	ldrb	r3, [r3, #0]
   202b0:	2101      	movs	r1, #1
   202b2:	0018      	movs	r0, r3
   202b4:	4b04      	ldr	r3, [pc, #16]	; (202c8 <spi_attach_slave+0x60>)
   202b6:	4798      	blx	r3
}
   202b8:	46c0      	nop			; (mov r8, r8)
   202ba:	46bd      	mov	sp, r7
   202bc:	b004      	add	sp, #16
   202be:	bd80      	pop	{r7, pc}
   202c0:	00020129 	.word	0x00020129
   202c4:	00026629 	.word	0x00026629
   202c8:	0002014d 	.word	0x0002014d

000202cc <spi_enable>:
{
   202cc:	b580      	push	{r7, lr}
   202ce:	b084      	sub	sp, #16
   202d0:	af00      	add	r7, sp, #0
   202d2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   202d4:	687b      	ldr	r3, [r7, #4]
   202d6:	681b      	ldr	r3, [r3, #0]
   202d8:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   202da:	687b      	ldr	r3, [r7, #4]
   202dc:	681b      	ldr	r3, [r3, #0]
   202de:	0018      	movs	r0, r3
   202e0:	4b0b      	ldr	r3, [pc, #44]	; (20310 <spi_enable+0x44>)
   202e2:	4798      	blx	r3
   202e4:	0003      	movs	r3, r0
   202e6:	0018      	movs	r0, r3
   202e8:	4b0a      	ldr	r3, [pc, #40]	; (20314 <spi_enable+0x48>)
   202ea:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   202ec:	46c0      	nop			; (mov r8, r8)
   202ee:	687b      	ldr	r3, [r7, #4]
   202f0:	0018      	movs	r0, r3
   202f2:	4b09      	ldr	r3, [pc, #36]	; (20318 <spi_enable+0x4c>)
   202f4:	4798      	blx	r3
   202f6:	1e03      	subs	r3, r0, #0
   202f8:	d1f9      	bne.n	202ee <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   202fa:	68fb      	ldr	r3, [r7, #12]
   202fc:	681b      	ldr	r3, [r3, #0]
   202fe:	2202      	movs	r2, #2
   20300:	431a      	orrs	r2, r3
   20302:	68fb      	ldr	r3, [r7, #12]
   20304:	601a      	str	r2, [r3, #0]
}
   20306:	46c0      	nop			; (mov r8, r8)
   20308:	46bd      	mov	sp, r7
   2030a:	b004      	add	sp, #16
   2030c:	bd80      	pop	{r7, pc}
   2030e:	46c0      	nop			; (mov r8, r8)
   20310:	000272f9 	.word	0x000272f9
   20314:	000200a9 	.word	0x000200a9
   20318:	000201a1 	.word	0x000201a1

0002031c <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   2031c:	b580      	push	{r7, lr}
   2031e:	b084      	sub	sp, #16
   20320:	af00      	add	r7, sp, #0
   20322:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20324:	687b      	ldr	r3, [r7, #4]
   20326:	681b      	ldr	r3, [r3, #0]
   20328:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   2032a:	687b      	ldr	r3, [r7, #4]
   2032c:	681b      	ldr	r3, [r3, #0]
   2032e:	0018      	movs	r0, r3
   20330:	4b0e      	ldr	r3, [pc, #56]	; (2036c <spi_disable+0x50>)
   20332:	4798      	blx	r3
   20334:	0003      	movs	r3, r0
   20336:	0018      	movs	r0, r3
   20338:	4b0d      	ldr	r3, [pc, #52]	; (20370 <spi_disable+0x54>)
   2033a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   2033c:	46c0      	nop			; (mov r8, r8)
   2033e:	687b      	ldr	r3, [r7, #4]
   20340:	0018      	movs	r0, r3
   20342:	4b0c      	ldr	r3, [pc, #48]	; (20374 <spi_disable+0x58>)
   20344:	4798      	blx	r3
   20346:	1e03      	subs	r3, r0, #0
   20348:	d1f9      	bne.n	2033e <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2034a:	68fb      	ldr	r3, [r7, #12]
   2034c:	228f      	movs	r2, #143	; 0x8f
   2034e:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   20350:	68fb      	ldr	r3, [r7, #12]
   20352:	228f      	movs	r2, #143	; 0x8f
   20354:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   20356:	68fb      	ldr	r3, [r7, #12]
   20358:	681b      	ldr	r3, [r3, #0]
   2035a:	2202      	movs	r2, #2
   2035c:	4393      	bics	r3, r2
   2035e:	001a      	movs	r2, r3
   20360:	68fb      	ldr	r3, [r7, #12]
   20362:	601a      	str	r2, [r3, #0]
}
   20364:	46c0      	nop			; (mov r8, r8)
   20366:	46bd      	mov	sp, r7
   20368:	b004      	add	sp, #16
   2036a:	bd80      	pop	{r7, pc}
   2036c:	000272f9 	.word	0x000272f9
   20370:	000200d5 	.word	0x000200d5
   20374:	000201a1 	.word	0x000201a1

00020378 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   20378:	b580      	push	{r7, lr}
   2037a:	b084      	sub	sp, #16
   2037c:	af00      	add	r7, sp, #0
   2037e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20380:	687b      	ldr	r3, [r7, #4]
   20382:	681b      	ldr	r3, [r3, #0]
   20384:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   20386:	68fb      	ldr	r3, [r7, #12]
   20388:	7e1b      	ldrb	r3, [r3, #24]
   2038a:	b2db      	uxtb	r3, r3
   2038c:	001a      	movs	r2, r3
   2038e:	2302      	movs	r3, #2
   20390:	4013      	ands	r3, r2
   20392:	1e5a      	subs	r2, r3, #1
   20394:	4193      	sbcs	r3, r2
   20396:	b2db      	uxtb	r3, r3
}
   20398:	0018      	movs	r0, r3
   2039a:	46bd      	mov	sp, r7
   2039c:	b004      	add	sp, #16
   2039e:	bd80      	pop	{r7, pc}

000203a0 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   203a0:	b580      	push	{r7, lr}
   203a2:	b084      	sub	sp, #16
   203a4:	af00      	add	r7, sp, #0
   203a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   203a8:	687b      	ldr	r3, [r7, #4]
   203aa:	681b      	ldr	r3, [r3, #0]
   203ac:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   203ae:	68fb      	ldr	r3, [r7, #12]
   203b0:	7e1b      	ldrb	r3, [r3, #24]
   203b2:	b2db      	uxtb	r3, r3
   203b4:	001a      	movs	r2, r3
   203b6:	2301      	movs	r3, #1
   203b8:	4013      	ands	r3, r2
   203ba:	1e5a      	subs	r2, r3, #1
   203bc:	4193      	sbcs	r3, r2
   203be:	b2db      	uxtb	r3, r3
}
   203c0:	0018      	movs	r0, r3
   203c2:	46bd      	mov	sp, r7
   203c4:	b004      	add	sp, #16
   203c6:	bd80      	pop	{r7, pc}

000203c8 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   203c8:	b580      	push	{r7, lr}
   203ca:	b084      	sub	sp, #16
   203cc:	af00      	add	r7, sp, #0
   203ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   203d0:	687b      	ldr	r3, [r7, #4]
   203d2:	681b      	ldr	r3, [r3, #0]
   203d4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   203d6:	68fb      	ldr	r3, [r7, #12]
   203d8:	7e1b      	ldrb	r3, [r3, #24]
   203da:	b2db      	uxtb	r3, r3
   203dc:	001a      	movs	r2, r3
   203de:	2304      	movs	r3, #4
   203e0:	4013      	ands	r3, r2
   203e2:	1e5a      	subs	r2, r3, #1
   203e4:	4193      	sbcs	r3, r2
   203e6:	b2db      	uxtb	r3, r3
}
   203e8:	0018      	movs	r0, r3
   203ea:	46bd      	mov	sp, r7
   203ec:	b004      	add	sp, #16
   203ee:	bd80      	pop	{r7, pc}

000203f0 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   203f0:	b580      	push	{r7, lr}
   203f2:	b084      	sub	sp, #16
   203f4:	af00      	add	r7, sp, #0
   203f6:	6078      	str	r0, [r7, #4]
   203f8:	000a      	movs	r2, r1
   203fa:	1cbb      	adds	r3, r7, #2
   203fc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   203fe:	687b      	ldr	r3, [r7, #4]
   20400:	681b      	ldr	r3, [r3, #0]
   20402:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   20404:	687b      	ldr	r3, [r7, #4]
   20406:	0018      	movs	r0, r3
   20408:	4b0a      	ldr	r3, [pc, #40]	; (20434 <spi_write+0x44>)
   2040a:	4798      	blx	r3
   2040c:	0003      	movs	r3, r0
   2040e:	001a      	movs	r2, r3
   20410:	2301      	movs	r3, #1
   20412:	4053      	eors	r3, r2
   20414:	b2db      	uxtb	r3, r3
   20416:	2b00      	cmp	r3, #0
   20418:	d001      	beq.n	2041e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   2041a:	2305      	movs	r3, #5
   2041c:	e006      	b.n	2042c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   2041e:	1cbb      	adds	r3, r7, #2
   20420:	881b      	ldrh	r3, [r3, #0]
   20422:	05db      	lsls	r3, r3, #23
   20424:	0dda      	lsrs	r2, r3, #23
   20426:	68fb      	ldr	r3, [r7, #12]
   20428:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   2042a:	2300      	movs	r3, #0
}
   2042c:	0018      	movs	r0, r3
   2042e:	46bd      	mov	sp, r7
   20430:	b004      	add	sp, #16
   20432:	bd80      	pop	{r7, pc}
   20434:	000203a1 	.word	0x000203a1

00020438 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   20438:	b580      	push	{r7, lr}
   2043a:	b084      	sub	sp, #16
   2043c:	af00      	add	r7, sp, #0
   2043e:	6078      	str	r0, [r7, #4]
   20440:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20442:	687b      	ldr	r3, [r7, #4]
   20444:	681b      	ldr	r3, [r3, #0]
   20446:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   20448:	687b      	ldr	r3, [r7, #4]
   2044a:	0018      	movs	r0, r3
   2044c:	4b1b      	ldr	r3, [pc, #108]	; (204bc <spi_read+0x84>)
   2044e:	4798      	blx	r3
   20450:	0003      	movs	r3, r0
   20452:	001a      	movs	r2, r3
   20454:	2301      	movs	r3, #1
   20456:	4053      	eors	r3, r2
   20458:	b2db      	uxtb	r3, r3
   2045a:	2b00      	cmp	r3, #0
   2045c:	d001      	beq.n	20462 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   2045e:	2310      	movs	r3, #16
   20460:	e027      	b.n	204b2 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   20462:	230f      	movs	r3, #15
   20464:	18fb      	adds	r3, r7, r3
   20466:	2200      	movs	r2, #0
   20468:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2046a:	68bb      	ldr	r3, [r7, #8]
   2046c:	8b5b      	ldrh	r3, [r3, #26]
   2046e:	b29b      	uxth	r3, r3
   20470:	001a      	movs	r2, r3
   20472:	2304      	movs	r3, #4
   20474:	4013      	ands	r3, r2
   20476:	d006      	beq.n	20486 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   20478:	230f      	movs	r3, #15
   2047a:	18fb      	adds	r3, r7, r3
   2047c:	221e      	movs	r2, #30
   2047e:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   20480:	68bb      	ldr	r3, [r7, #8]
   20482:	2204      	movs	r2, #4
   20484:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   20486:	687b      	ldr	r3, [r7, #4]
   20488:	799b      	ldrb	r3, [r3, #6]
   2048a:	2b01      	cmp	r3, #1
   2048c:	d108      	bne.n	204a0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   2048e:	68bb      	ldr	r3, [r7, #8]
   20490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20492:	b29b      	uxth	r3, r3
   20494:	05db      	lsls	r3, r3, #23
   20496:	0ddb      	lsrs	r3, r3, #23
   20498:	b29a      	uxth	r2, r3
   2049a:	683b      	ldr	r3, [r7, #0]
   2049c:	801a      	strh	r2, [r3, #0]
   2049e:	e005      	b.n	204ac <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   204a0:	68bb      	ldr	r3, [r7, #8]
   204a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   204a4:	b2db      	uxtb	r3, r3
   204a6:	b29a      	uxth	r2, r3
   204a8:	683b      	ldr	r3, [r7, #0]
   204aa:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   204ac:	230f      	movs	r3, #15
   204ae:	18fb      	adds	r3, r7, r3
   204b0:	781b      	ldrb	r3, [r3, #0]
}
   204b2:	0018      	movs	r0, r3
   204b4:	46bd      	mov	sp, r7
   204b6:	b004      	add	sp, #16
   204b8:	bd80      	pop	{r7, pc}
   204ba:	46c0      	nop			; (mov r8, r8)
   204bc:	000203c9 	.word	0x000203c9

000204c0 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   204c0:	b580      	push	{r7, lr}
   204c2:	b086      	sub	sp, #24
   204c4:	af00      	add	r7, sp, #0
   204c6:	60f8      	str	r0, [r7, #12]
   204c8:	60b9      	str	r1, [r7, #8]
   204ca:	1dbb      	adds	r3, r7, #6
   204cc:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   204ce:	2313      	movs	r3, #19
   204d0:	18fb      	adds	r3, r7, r3
   204d2:	22ff      	movs	r2, #255	; 0xff
   204d4:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   204d6:	2317      	movs	r3, #23
   204d8:	18fb      	adds	r3, r7, r3
   204da:	2200      	movs	r2, #0
   204dc:	701a      	strb	r2, [r3, #0]
   204de:	2316      	movs	r3, #22
   204e0:	18fb      	adds	r3, r7, r3
   204e2:	2200      	movs	r2, #0
   204e4:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   204e6:	2314      	movs	r3, #20
   204e8:	18fb      	adds	r3, r7, r3
   204ea:	2200      	movs	r2, #0
   204ec:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   204ee:	2310      	movs	r3, #16
   204f0:	18fb      	adds	r3, r7, r3
   204f2:	2200      	movs	r2, #0
   204f4:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   204f6:	68bb      	ldr	r3, [r7, #8]
   204f8:	2b00      	cmp	r3, #0
   204fa:	d102      	bne.n	20502 <spi_rw+0x42>
   204fc:	68fb      	ldr	r3, [r7, #12]
   204fe:	2b00      	cmp	r3, #0
   20500:	d003      	beq.n	2050a <spi_rw+0x4a>
   20502:	1dbb      	adds	r3, r7, #6
   20504:	881b      	ldrh	r3, [r3, #0]
   20506:	2b00      	cmp	r3, #0
   20508:	d102      	bne.n	20510 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   2050a:	230f      	movs	r3, #15
   2050c:	425b      	negs	r3, r3
   2050e:	e07e      	b.n	2060e <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   20510:	68fb      	ldr	r3, [r7, #12]
   20512:	2b00      	cmp	r3, #0
   20514:	d106      	bne.n	20524 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   20516:	2313      	movs	r3, #19
   20518:	18fb      	adds	r3, r7, r3
   2051a:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   2051c:	2317      	movs	r3, #23
   2051e:	18fb      	adds	r3, r7, r3
   20520:	2201      	movs	r2, #1
   20522:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   20524:	68bb      	ldr	r3, [r7, #8]
   20526:	2b00      	cmp	r3, #0
   20528:	d106      	bne.n	20538 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   2052a:	2313      	movs	r3, #19
   2052c:	18fb      	adds	r3, r7, r3
   2052e:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   20530:	2316      	movs	r3, #22
   20532:	18fb      	adds	r3, r7, r3
   20534:	2201      	movs	r2, #1
   20536:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   20538:	4937      	ldr	r1, [pc, #220]	; (20618 <spi_rw+0x158>)
   2053a:	4b38      	ldr	r3, [pc, #224]	; (2061c <spi_rw+0x15c>)
   2053c:	2201      	movs	r2, #1
   2053e:	0018      	movs	r0, r3
   20540:	4b37      	ldr	r3, [pc, #220]	; (20620 <spi_rw+0x160>)
   20542:	4798      	blx	r3

	while (u16Sz) {
   20544:	e04c      	b.n	205e0 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   20546:	68fb      	ldr	r3, [r7, #12]
   20548:	781a      	ldrb	r2, [r3, #0]
   2054a:	2314      	movs	r3, #20
   2054c:	18fb      	adds	r3, r7, r3
   2054e:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   20550:	46c0      	nop			; (mov r8, r8)
   20552:	4b32      	ldr	r3, [pc, #200]	; (2061c <spi_rw+0x15c>)
   20554:	0018      	movs	r0, r3
   20556:	4b33      	ldr	r3, [pc, #204]	; (20624 <spi_rw+0x164>)
   20558:	4798      	blx	r3
   2055a:	0003      	movs	r3, r0
   2055c:	001a      	movs	r2, r3
   2055e:	2301      	movs	r3, #1
   20560:	4053      	eors	r3, r2
   20562:	b2db      	uxtb	r3, r3
   20564:	2b00      	cmp	r3, #0
   20566:	d1f4      	bne.n	20552 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   20568:	46c0      	nop			; (mov r8, r8)
   2056a:	2314      	movs	r3, #20
   2056c:	18fb      	adds	r3, r7, r3
   2056e:	881a      	ldrh	r2, [r3, #0]
   20570:	4b2a      	ldr	r3, [pc, #168]	; (2061c <spi_rw+0x15c>)
   20572:	0011      	movs	r1, r2
   20574:	0018      	movs	r0, r3
   20576:	4b2c      	ldr	r3, [pc, #176]	; (20628 <spi_rw+0x168>)
   20578:	4798      	blx	r3
   2057a:	1e03      	subs	r3, r0, #0
   2057c:	d1f5      	bne.n	2056a <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   2057e:	46c0      	nop			; (mov r8, r8)
   20580:	4b26      	ldr	r3, [pc, #152]	; (2061c <spi_rw+0x15c>)
   20582:	0018      	movs	r0, r3
   20584:	4b29      	ldr	r3, [pc, #164]	; (2062c <spi_rw+0x16c>)
   20586:	4798      	blx	r3
   20588:	0003      	movs	r3, r0
   2058a:	001a      	movs	r2, r3
   2058c:	2301      	movs	r3, #1
   2058e:	4053      	eors	r3, r2
   20590:	b2db      	uxtb	r3, r3
   20592:	2b00      	cmp	r3, #0
   20594:	d1f4      	bne.n	20580 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   20596:	46c0      	nop			; (mov r8, r8)
   20598:	2310      	movs	r3, #16
   2059a:	18fa      	adds	r2, r7, r3
   2059c:	4b1f      	ldr	r3, [pc, #124]	; (2061c <spi_rw+0x15c>)
   2059e:	0011      	movs	r1, r2
   205a0:	0018      	movs	r0, r3
   205a2:	4b23      	ldr	r3, [pc, #140]	; (20630 <spi_rw+0x170>)
   205a4:	4798      	blx	r3
   205a6:	1e03      	subs	r3, r0, #0
   205a8:	d1f6      	bne.n	20598 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   205aa:	2310      	movs	r3, #16
   205ac:	18fb      	adds	r3, r7, r3
   205ae:	881b      	ldrh	r3, [r3, #0]
   205b0:	b2da      	uxtb	r2, r3
   205b2:	68bb      	ldr	r3, [r7, #8]
   205b4:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   205b6:	1dbb      	adds	r3, r7, #6
   205b8:	881a      	ldrh	r2, [r3, #0]
   205ba:	1dbb      	adds	r3, r7, #6
   205bc:	3a01      	subs	r2, #1
   205be:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   205c0:	2316      	movs	r3, #22
   205c2:	18fb      	adds	r3, r7, r3
   205c4:	781b      	ldrb	r3, [r3, #0]
   205c6:	2b00      	cmp	r3, #0
   205c8:	d102      	bne.n	205d0 <spi_rw+0x110>
			pu8Miso++;
   205ca:	68bb      	ldr	r3, [r7, #8]
   205cc:	3301      	adds	r3, #1
   205ce:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   205d0:	2317      	movs	r3, #23
   205d2:	18fb      	adds	r3, r7, r3
   205d4:	781b      	ldrb	r3, [r3, #0]
   205d6:	2b00      	cmp	r3, #0
   205d8:	d102      	bne.n	205e0 <spi_rw+0x120>
			pu8Mosi++;
   205da:	68fb      	ldr	r3, [r7, #12]
   205dc:	3301      	adds	r3, #1
   205de:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   205e0:	1dbb      	adds	r3, r7, #6
   205e2:	881b      	ldrh	r3, [r3, #0]
   205e4:	2b00      	cmp	r3, #0
   205e6:	d1ae      	bne.n	20546 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   205e8:	46c0      	nop			; (mov r8, r8)
   205ea:	4b0c      	ldr	r3, [pc, #48]	; (2061c <spi_rw+0x15c>)
   205ec:	0018      	movs	r0, r3
   205ee:	4b11      	ldr	r3, [pc, #68]	; (20634 <spi_rw+0x174>)
   205f0:	4798      	blx	r3
   205f2:	0003      	movs	r3, r0
   205f4:	001a      	movs	r2, r3
   205f6:	2301      	movs	r3, #1
   205f8:	4053      	eors	r3, r2
   205fa:	b2db      	uxtb	r3, r3
   205fc:	2b00      	cmp	r3, #0
   205fe:	d1f4      	bne.n	205ea <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   20600:	4905      	ldr	r1, [pc, #20]	; (20618 <spi_rw+0x158>)
   20602:	4b06      	ldr	r3, [pc, #24]	; (2061c <spi_rw+0x15c>)
   20604:	2200      	movs	r2, #0
   20606:	0018      	movs	r0, r3
   20608:	4b05      	ldr	r3, [pc, #20]	; (20620 <spi_rw+0x160>)
   2060a:	4798      	blx	r3

	return M2M_SUCCESS;
   2060c:	2300      	movs	r3, #0
}
   2060e:	0018      	movs	r0, r3
   20610:	46bd      	mov	sp, r7
   20612:	b006      	add	sp, #24
   20614:	bd80      	pop	{r7, pc}
   20616:	46c0      	nop			; (mov r8, r8)
   20618:	200058c4 	.word	0x200058c4
   2061c:	200058c8 	.word	0x200058c8
   20620:	00027d6d 	.word	0x00027d6d
   20624:	000203a1 	.word	0x000203a1
   20628:	000203f1 	.word	0x000203f1
   2062c:	000203c9 	.word	0x000203c9
   20630:	00020439 	.word	0x00020439
   20634:	00020379 	.word	0x00020379

00020638 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   20638:	b580      	push	{r7, lr}
   2063a:	b092      	sub	sp, #72	; 0x48
   2063c:	af00      	add	r7, sp, #0
   2063e:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   20640:	2347      	movs	r3, #71	; 0x47
   20642:	18fb      	adds	r3, r7, r3
   20644:	2200      	movs	r2, #0
   20646:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   20648:	2308      	movs	r3, #8
   2064a:	18fb      	adds	r3, r7, r3
   2064c:	0018      	movs	r0, r3
   2064e:	4b26      	ldr	r3, [pc, #152]	; (206e8 <nm_bus_init+0xb0>)
   20650:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   20652:	2308      	movs	r3, #8
   20654:	18fb      	adds	r3, r7, r3
   20656:	220e      	movs	r2, #14
   20658:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   2065a:	2308      	movs	r3, #8
   2065c:	18fa      	adds	r2, r7, r3
   2065e:	4b23      	ldr	r3, [pc, #140]	; (206ec <nm_bus_init+0xb4>)
   20660:	0011      	movs	r1, r2
   20662:	0018      	movs	r0, r3
   20664:	4b22      	ldr	r3, [pc, #136]	; (206f0 <nm_bus_init+0xb8>)
   20666:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   20668:	230c      	movs	r3, #12
   2066a:	18fb      	adds	r3, r7, r3
   2066c:	0018      	movs	r0, r3
   2066e:	4b21      	ldr	r3, [pc, #132]	; (206f4 <nm_bus_init+0xbc>)
   20670:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   20672:	230c      	movs	r3, #12
   20674:	18fb      	adds	r3, r7, r3
   20676:	22c0      	movs	r2, #192	; 0xc0
   20678:	0392      	lsls	r2, r2, #14
   2067a:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   2067c:	230c      	movs	r3, #12
   2067e:	18fb      	adds	r3, r7, r3
   20680:	4a1d      	ldr	r2, [pc, #116]	; (206f8 <nm_bus_init+0xc0>)
   20682:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   20684:	230c      	movs	r3, #12
   20686:	18fb      	adds	r3, r7, r3
   20688:	4a1c      	ldr	r2, [pc, #112]	; (206fc <nm_bus_init+0xc4>)
   2068a:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   2068c:	230c      	movs	r3, #12
   2068e:	18fb      	adds	r3, r7, r3
   20690:	2201      	movs	r2, #1
   20692:	4252      	negs	r2, r2
   20694:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   20696:	230c      	movs	r3, #12
   20698:	18fb      	adds	r3, r7, r3
   2069a:	4a19      	ldr	r2, [pc, #100]	; (20700 <nm_bus_init+0xc8>)
   2069c:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   2069e:	230c      	movs	r3, #12
   206a0:	18fb      	adds	r3, r7, r3
   206a2:	2200      	movs	r2, #0
   206a4:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   206a6:	230c      	movs	r3, #12
   206a8:	18fb      	adds	r3, r7, r3
   206aa:	4a16      	ldr	r2, [pc, #88]	; (20704 <nm_bus_init+0xcc>)
   206ac:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   206ae:	230c      	movs	r3, #12
   206b0:	18fa      	adds	r2, r7, r3
   206b2:	4915      	ldr	r1, [pc, #84]	; (20708 <nm_bus_init+0xd0>)
   206b4:	4b15      	ldr	r3, [pc, #84]	; (2070c <nm_bus_init+0xd4>)
   206b6:	0018      	movs	r0, r3
   206b8:	4b15      	ldr	r3, [pc, #84]	; (20710 <nm_bus_init+0xd8>)
   206ba:	4798      	blx	r3
   206bc:	1e03      	subs	r3, r0, #0
   206be:	d002      	beq.n	206c6 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   206c0:	2306      	movs	r3, #6
   206c2:	425b      	negs	r3, r3
   206c4:	e00c      	b.n	206e0 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   206c6:	4b11      	ldr	r3, [pc, #68]	; (2070c <nm_bus_init+0xd4>)
   206c8:	0018      	movs	r0, r3
   206ca:	4b12      	ldr	r3, [pc, #72]	; (20714 <nm_bus_init+0xdc>)
   206cc:	4798      	blx	r3

	nm_bsp_reset();
   206ce:	4b12      	ldr	r3, [pc, #72]	; (20718 <nm_bus_init+0xe0>)
   206d0:	4798      	blx	r3
	nm_bsp_sleep(1);
   206d2:	2001      	movs	r0, #1
   206d4:	4b11      	ldr	r3, [pc, #68]	; (2071c <nm_bus_init+0xe4>)
   206d6:	4798      	blx	r3
#endif
	return result;
   206d8:	2347      	movs	r3, #71	; 0x47
   206da:	18fb      	adds	r3, r7, r3
   206dc:	781b      	ldrb	r3, [r3, #0]
   206de:	b25b      	sxtb	r3, r3
}
   206e0:	0018      	movs	r0, r3
   206e2:	46bd      	mov	sp, r7
   206e4:	b012      	add	sp, #72	; 0x48
   206e6:	bd80      	pop	{r7, pc}
   206e8:	00020245 	.word	0x00020245
   206ec:	200058c4 	.word	0x200058c4
   206f0:	00020269 	.word	0x00020269
   206f4:	000201c1 	.word	0x000201c1
   206f8:	000c0002 	.word	0x000c0002
   206fc:	000d0002 	.word	0x000d0002
   20700:	000f0002 	.word	0x000f0002
   20704:	00124f80 	.word	0x00124f80
   20708:	42001000 	.word	0x42001000
   2070c:	200058c8 	.word	0x200058c8
   20710:	00027aa9 	.word	0x00027aa9
   20714:	000202cd 	.word	0x000202cd
   20718:	0001ff3d 	.word	0x0001ff3d
   2071c:	0001ff7d 	.word	0x0001ff7d

00020720 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   20720:	b590      	push	{r4, r7, lr}
   20722:	b085      	sub	sp, #20
   20724:	af00      	add	r7, sp, #0
   20726:	0002      	movs	r2, r0
   20728:	6039      	str	r1, [r7, #0]
   2072a:	1dfb      	adds	r3, r7, #7
   2072c:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   2072e:	230f      	movs	r3, #15
   20730:	18fb      	adds	r3, r7, r3
   20732:	2200      	movs	r2, #0
   20734:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   20736:	1dfb      	adds	r3, r7, #7
   20738:	781b      	ldrb	r3, [r3, #0]
   2073a:	2b03      	cmp	r3, #3
   2073c:	d10f      	bne.n	2075e <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   2073e:	683b      	ldr	r3, [r7, #0]
   20740:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   20742:	68bb      	ldr	r3, [r7, #8]
   20744:	6818      	ldr	r0, [r3, #0]
   20746:	68bb      	ldr	r3, [r7, #8]
   20748:	6859      	ldr	r1, [r3, #4]
   2074a:	68bb      	ldr	r3, [r7, #8]
   2074c:	891b      	ldrh	r3, [r3, #8]
   2074e:	220f      	movs	r2, #15
   20750:	18bc      	adds	r4, r7, r2
   20752:	001a      	movs	r2, r3
   20754:	4b10      	ldr	r3, [pc, #64]	; (20798 <nm_bus_ioctl+0x78>)
   20756:	4798      	blx	r3
   20758:	0003      	movs	r3, r0
   2075a:	7023      	strb	r3, [r4, #0]
		}
		break;
   2075c:	e013      	b.n	20786 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   2075e:	230f      	movs	r3, #15
   20760:	18fb      	adds	r3, r7, r3
   20762:	22ff      	movs	r2, #255	; 0xff
   20764:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   20766:	2383      	movs	r3, #131	; 0x83
   20768:	005a      	lsls	r2, r3, #1
   2076a:	490c      	ldr	r1, [pc, #48]	; (2079c <nm_bus_ioctl+0x7c>)
   2076c:	4b0c      	ldr	r3, [pc, #48]	; (207a0 <nm_bus_ioctl+0x80>)
   2076e:	0018      	movs	r0, r3
   20770:	4b0c      	ldr	r3, [pc, #48]	; (207a4 <nm_bus_ioctl+0x84>)
   20772:	4798      	blx	r3
   20774:	4b0c      	ldr	r3, [pc, #48]	; (207a8 <nm_bus_ioctl+0x88>)
   20776:	0018      	movs	r0, r3
   20778:	4b0a      	ldr	r3, [pc, #40]	; (207a4 <nm_bus_ioctl+0x84>)
   2077a:	4798      	blx	r3
   2077c:	4b0b      	ldr	r3, [pc, #44]	; (207ac <nm_bus_ioctl+0x8c>)
   2077e:	0018      	movs	r0, r3
   20780:	4b08      	ldr	r3, [pc, #32]	; (207a4 <nm_bus_ioctl+0x84>)
   20782:	4798      	blx	r3
			break;
   20784:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   20786:	230f      	movs	r3, #15
   20788:	18fb      	adds	r3, r7, r3
   2078a:	781b      	ldrb	r3, [r3, #0]
   2078c:	b25b      	sxtb	r3, r3
}
   2078e:	0018      	movs	r0, r3
   20790:	46bd      	mov	sp, r7
   20792:	b005      	add	sp, #20
   20794:	bd90      	pop	{r4, r7, pc}
   20796:	46c0      	nop			; (mov r8, r8)
   20798:	000204c1 	.word	0x000204c1
   2079c:	00037fd0 	.word	0x00037fd0
   207a0:	00037fa4 	.word	0x00037fa4
   207a4:	0001db29 	.word	0x0001db29
   207a8:	00037fb8 	.word	0x00037fb8
   207ac:	00037fcc 	.word	0x00037fcc

000207b0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   207b0:	b580      	push	{r7, lr}
   207b2:	b082      	sub	sp, #8
   207b4:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   207b6:	1dfb      	adds	r3, r7, #7
   207b8:	2200      	movs	r2, #0
   207ba:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   207bc:	1d3b      	adds	r3, r7, #4
   207be:	0018      	movs	r0, r3
   207c0:	4b13      	ldr	r3, [pc, #76]	; (20810 <nm_bus_deinit+0x60>)
   207c2:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   207c4:	1d3b      	adds	r3, r7, #4
   207c6:	2200      	movs	r2, #0
   207c8:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   207ca:	1d3b      	adds	r3, r7, #4
   207cc:	2200      	movs	r2, #0
   207ce:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   207d0:	4b10      	ldr	r3, [pc, #64]	; (20814 <nm_bus_deinit+0x64>)
   207d2:	0018      	movs	r0, r3
   207d4:	4b10      	ldr	r3, [pc, #64]	; (20818 <nm_bus_deinit+0x68>)
   207d6:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   207d8:	1d3b      	adds	r3, r7, #4
   207da:	0019      	movs	r1, r3
   207dc:	200c      	movs	r0, #12
   207de:	4b0f      	ldr	r3, [pc, #60]	; (2081c <nm_bus_deinit+0x6c>)
   207e0:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   207e2:	1d3b      	adds	r3, r7, #4
   207e4:	0019      	movs	r1, r3
   207e6:	200f      	movs	r0, #15
   207e8:	4b0c      	ldr	r3, [pc, #48]	; (2081c <nm_bus_deinit+0x6c>)
   207ea:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   207ec:	1d3b      	adds	r3, r7, #4
   207ee:	0019      	movs	r1, r3
   207f0:	200d      	movs	r0, #13
   207f2:	4b0a      	ldr	r3, [pc, #40]	; (2081c <nm_bus_deinit+0x6c>)
   207f4:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   207f6:	1d3b      	adds	r3, r7, #4
   207f8:	0019      	movs	r1, r3
   207fa:	200e      	movs	r0, #14
   207fc:	4b07      	ldr	r3, [pc, #28]	; (2081c <nm_bus_deinit+0x6c>)
   207fe:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   20800:	1dfb      	adds	r3, r7, #7
   20802:	781b      	ldrb	r3, [r3, #0]
   20804:	b25b      	sxtb	r3, r3
}
   20806:	0018      	movs	r0, r3
   20808:	46bd      	mov	sp, r7
   2080a:	b002      	add	sp, #8
   2080c:	bd80      	pop	{r7, pc}
   2080e:	46c0      	nop			; (mov r8, r8)
   20810:	00020129 	.word	0x00020129
   20814:	200058c8 	.word	0x200058c8
   20818:	0002031d 	.word	0x0002031d
   2081c:	00026629 	.word	0x00026629

00020820 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   20820:	b580      	push	{r7, lr}
   20822:	b084      	sub	sp, #16
   20824:	af00      	add	r7, sp, #0
   20826:	60f8      	str	r0, [r7, #12]
   20828:	60b9      	str	r1, [r7, #8]
   2082a:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   2082c:	687b      	ldr	r3, [r7, #4]
   2082e:	2b00      	cmp	r3, #0
   20830:	d010      	beq.n	20854 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   20832:	68bb      	ldr	r3, [r7, #8]
   20834:	781a      	ldrb	r2, [r3, #0]
   20836:	68fb      	ldr	r3, [r7, #12]
   20838:	701a      	strb	r2, [r3, #0]
		pDst++;
   2083a:	68fb      	ldr	r3, [r7, #12]
   2083c:	3301      	adds	r3, #1
   2083e:	60fb      	str	r3, [r7, #12]
		pSrc++;
   20840:	68bb      	ldr	r3, [r7, #8]
   20842:	3301      	adds	r3, #1
   20844:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   20846:	687b      	ldr	r3, [r7, #4]
   20848:	3b01      	subs	r3, #1
   2084a:	607b      	str	r3, [r7, #4]
   2084c:	687b      	ldr	r3, [r7, #4]
   2084e:	2b00      	cmp	r3, #0
   20850:	d1ef      	bne.n	20832 <m2m_memcpy+0x12>
   20852:	e000      	b.n	20856 <m2m_memcpy+0x36>
	if(sz == 0) return;
   20854:	46c0      	nop			; (mov r8, r8)
}
   20856:	46bd      	mov	sp, r7
   20858:	b004      	add	sp, #16
   2085a:	bd80      	pop	{r7, pc}

0002085c <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   2085c:	b580      	push	{r7, lr}
   2085e:	b084      	sub	sp, #16
   20860:	af00      	add	r7, sp, #0
   20862:	60f8      	str	r0, [r7, #12]
   20864:	607a      	str	r2, [r7, #4]
   20866:	230b      	movs	r3, #11
   20868:	18fb      	adds	r3, r7, r3
   2086a:	1c0a      	adds	r2, r1, #0
   2086c:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   2086e:	687b      	ldr	r3, [r7, #4]
   20870:	2b00      	cmp	r3, #0
   20872:	d00e      	beq.n	20892 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   20874:	68fb      	ldr	r3, [r7, #12]
   20876:	220b      	movs	r2, #11
   20878:	18ba      	adds	r2, r7, r2
   2087a:	7812      	ldrb	r2, [r2, #0]
   2087c:	701a      	strb	r2, [r3, #0]
		pBuf++;
   2087e:	68fb      	ldr	r3, [r7, #12]
   20880:	3301      	adds	r3, #1
   20882:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   20884:	687b      	ldr	r3, [r7, #4]
   20886:	3b01      	subs	r3, #1
   20888:	607b      	str	r3, [r7, #4]
   2088a:	687b      	ldr	r3, [r7, #4]
   2088c:	2b00      	cmp	r3, #0
   2088e:	d1f1      	bne.n	20874 <m2m_memset+0x18>
   20890:	e000      	b.n	20894 <m2m_memset+0x38>
	if(sz == 0) return;
   20892:	46c0      	nop			; (mov r8, r8)
}
   20894:	46bd      	mov	sp, r7
   20896:	b004      	add	sp, #16
   20898:	bd80      	pop	{r7, pc}

0002089a <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   2089a:	b580      	push	{r7, lr}
   2089c:	b084      	sub	sp, #16
   2089e:	af00      	add	r7, sp, #0
   208a0:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   208a2:	230e      	movs	r3, #14
   208a4:	18fb      	adds	r3, r7, r3
   208a6:	2200      	movs	r2, #0
   208a8:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   208aa:	e009      	b.n	208c0 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   208ac:	230e      	movs	r3, #14
   208ae:	18fb      	adds	r3, r7, r3
   208b0:	881a      	ldrh	r2, [r3, #0]
   208b2:	230e      	movs	r3, #14
   208b4:	18fb      	adds	r3, r7, r3
   208b6:	3201      	adds	r2, #1
   208b8:	801a      	strh	r2, [r3, #0]
		pcStr++;
   208ba:	687b      	ldr	r3, [r7, #4]
   208bc:	3301      	adds	r3, #1
   208be:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   208c0:	687b      	ldr	r3, [r7, #4]
   208c2:	781b      	ldrb	r3, [r3, #0]
   208c4:	2b00      	cmp	r3, #0
   208c6:	d1f1      	bne.n	208ac <m2m_strlen+0x12>
	}
	return u16StrLen;
   208c8:	230e      	movs	r3, #14
   208ca:	18fb      	adds	r3, r7, r3
   208cc:	881b      	ldrh	r3, [r3, #0]
}
   208ce:	0018      	movs	r0, r3
   208d0:	46bd      	mov	sp, r7
   208d2:	b004      	add	sp, #16
   208d4:	bd80      	pop	{r7, pc}
	...

000208d8 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   208d8:	b580      	push	{r7, lr}
   208da:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   208dc:	4b04      	ldr	r3, [pc, #16]	; (208f0 <isr+0x18>)
   208de:	78db      	ldrb	r3, [r3, #3]
   208e0:	b2db      	uxtb	r3, r3
   208e2:	3301      	adds	r3, #1
   208e4:	b2da      	uxtb	r2, r3
   208e6:	4b02      	ldr	r3, [pc, #8]	; (208f0 <isr+0x18>)
   208e8:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   208ea:	46c0      	nop			; (mov r8, r8)
   208ec:	46bd      	mov	sp, r7
   208ee:	bd80      	pop	{r7, pc}
   208f0:	20005904 	.word	0x20005904

000208f4 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   208f4:	b590      	push	{r4, r7, lr}
   208f6:	b083      	sub	sp, #12
   208f8:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   208fa:	1dfb      	adds	r3, r7, #7
   208fc:	2200      	movs	r2, #0
   208fe:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   20900:	4b14      	ldr	r3, [pc, #80]	; (20954 <hif_set_rx_done+0x60>)
   20902:	2200      	movs	r2, #0
   20904:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   20906:	2001      	movs	r0, #1
   20908:	4b13      	ldr	r3, [pc, #76]	; (20958 <hif_set_rx_done+0x64>)
   2090a:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   2090c:	1dfc      	adds	r4, r7, #7
   2090e:	003b      	movs	r3, r7
   20910:	4a12      	ldr	r2, [pc, #72]	; (2095c <hif_set_rx_done+0x68>)
   20912:	0019      	movs	r1, r3
   20914:	0010      	movs	r0, r2
   20916:	4b12      	ldr	r3, [pc, #72]	; (20960 <hif_set_rx_done+0x6c>)
   20918:	4798      	blx	r3
   2091a:	0003      	movs	r3, r0
   2091c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2091e:	1dfb      	adds	r3, r7, #7
   20920:	781b      	ldrb	r3, [r3, #0]
   20922:	b25b      	sxtb	r3, r3
   20924:	2b00      	cmp	r3, #0
   20926:	d10d      	bne.n	20944 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   20928:	683b      	ldr	r3, [r7, #0]
   2092a:	2202      	movs	r2, #2
   2092c:	4313      	orrs	r3, r2
   2092e:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   20930:	683b      	ldr	r3, [r7, #0]
   20932:	1dfc      	adds	r4, r7, #7
   20934:	4a09      	ldr	r2, [pc, #36]	; (2095c <hif_set_rx_done+0x68>)
   20936:	0019      	movs	r1, r3
   20938:	0010      	movs	r0, r2
   2093a:	4b0a      	ldr	r3, [pc, #40]	; (20964 <hif_set_rx_done+0x70>)
   2093c:	4798      	blx	r3
   2093e:	0003      	movs	r3, r0
   20940:	7023      	strb	r3, [r4, #0]
   20942:	e000      	b.n	20946 <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   20944:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   20946:	1dfb      	adds	r3, r7, #7
   20948:	781b      	ldrb	r3, [r3, #0]
   2094a:	b25b      	sxtb	r3, r3

}
   2094c:	0018      	movs	r0, r3
   2094e:	46bd      	mov	sp, r7
   20950:	b003      	add	sp, #12
   20952:	bd90      	pop	{r4, r7, pc}
   20954:	20005904 	.word	0x20005904
   20958:	00020011 	.word	0x00020011
   2095c:	00001070 	.word	0x00001070
   20960:	000228ed 	.word	0x000228ed
   20964:	00022911 	.word	0x00022911

00020968 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   20968:	b580      	push	{r7, lr}
   2096a:	b082      	sub	sp, #8
   2096c:	af00      	add	r7, sp, #0
   2096e:	603a      	str	r2, [r7, #0]
   20970:	1dfb      	adds	r3, r7, #7
   20972:	1c02      	adds	r2, r0, #0
   20974:	701a      	strb	r2, [r3, #0]
   20976:	1d3b      	adds	r3, r7, #4
   20978:	1c0a      	adds	r2, r1, #0
   2097a:	801a      	strh	r2, [r3, #0]


}
   2097c:	46c0      	nop			; (mov r8, r8)
   2097e:	46bd      	mov	sp, r7
   20980:	b002      	add	sp, #8
   20982:	bd80      	pop	{r7, pc}

00020984 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   20984:	b590      	push	{r4, r7, lr}
   20986:	b083      	sub	sp, #12
   20988:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2098a:	1dfb      	adds	r3, r7, #7
   2098c:	2200      	movs	r2, #0
   2098e:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   20990:	4b16      	ldr	r3, [pc, #88]	; (209ec <hif_chip_wake+0x68>)
   20992:	789b      	ldrb	r3, [r3, #2]
   20994:	b2db      	uxtb	r3, r3
   20996:	2b00      	cmp	r3, #0
   20998:	d003      	beq.n	209a2 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   2099a:	1dfb      	adds	r3, r7, #7
   2099c:	781b      	ldrb	r3, [r3, #0]
   2099e:	b25b      	sxtb	r3, r3
   209a0:	e01f      	b.n	209e2 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   209a2:	4b12      	ldr	r3, [pc, #72]	; (209ec <hif_chip_wake+0x68>)
   209a4:	785b      	ldrb	r3, [r3, #1]
   209a6:	b2db      	uxtb	r3, r3
   209a8:	2b00      	cmp	r3, #0
   209aa:	d10e      	bne.n	209ca <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   209ac:	4b0f      	ldr	r3, [pc, #60]	; (209ec <hif_chip_wake+0x68>)
   209ae:	781b      	ldrb	r3, [r3, #0]
   209b0:	b2db      	uxtb	r3, r3
   209b2:	2b00      	cmp	r3, #0
   209b4:	d009      	beq.n	209ca <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   209b6:	1dfc      	adds	r4, r7, #7
   209b8:	4b0d      	ldr	r3, [pc, #52]	; (209f0 <hif_chip_wake+0x6c>)
   209ba:	4798      	blx	r3
   209bc:	0003      	movs	r3, r0
   209be:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   209c0:	1dfb      	adds	r3, r7, #7
   209c2:	781b      	ldrb	r3, [r3, #0]
   209c4:	b25b      	sxtb	r3, r3
   209c6:	2b00      	cmp	r3, #0
   209c8:	d107      	bne.n	209da <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   209ca:	4b08      	ldr	r3, [pc, #32]	; (209ec <hif_chip_wake+0x68>)
   209cc:	785b      	ldrb	r3, [r3, #1]
   209ce:	b2db      	uxtb	r3, r3
   209d0:	3301      	adds	r3, #1
   209d2:	b2da      	uxtb	r2, r3
   209d4:	4b05      	ldr	r3, [pc, #20]	; (209ec <hif_chip_wake+0x68>)
   209d6:	705a      	strb	r2, [r3, #1]
   209d8:	e000      	b.n	209dc <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   209da:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   209dc:	1dfb      	adds	r3, r7, #7
   209de:	781b      	ldrb	r3, [r3, #0]
   209e0:	b25b      	sxtb	r3, r3
}
   209e2:	0018      	movs	r0, r3
   209e4:	46bd      	mov	sp, r7
   209e6:	b003      	add	sp, #12
   209e8:	bd90      	pop	{r4, r7, pc}
   209ea:	46c0      	nop			; (mov r8, r8)
   209ec:	20005904 	.word	0x20005904
   209f0:	000223bd 	.word	0x000223bd

000209f4 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   209f4:	b580      	push	{r7, lr}
   209f6:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   209f8:	4b07      	ldr	r3, [pc, #28]	; (20a18 <hif_chip_sleep_sc+0x24>)
   209fa:	785b      	ldrb	r3, [r3, #1]
   209fc:	b2db      	uxtb	r3, r3
   209fe:	2b00      	cmp	r3, #0
   20a00:	d006      	beq.n	20a10 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   20a02:	4b05      	ldr	r3, [pc, #20]	; (20a18 <hif_chip_sleep_sc+0x24>)
   20a04:	785b      	ldrb	r3, [r3, #1]
   20a06:	b2db      	uxtb	r3, r3
   20a08:	3b01      	subs	r3, #1
   20a0a:	b2da      	uxtb	r2, r3
   20a0c:	4b02      	ldr	r3, [pc, #8]	; (20a18 <hif_chip_sleep_sc+0x24>)
   20a0e:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   20a10:	2300      	movs	r3, #0
}
   20a12:	0018      	movs	r0, r3
   20a14:	46bd      	mov	sp, r7
   20a16:	bd80      	pop	{r7, pc}
   20a18:	20005904 	.word	0x20005904

00020a1c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   20a1c:	b590      	push	{r4, r7, lr}
   20a1e:	b083      	sub	sp, #12
   20a20:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   20a22:	1dfb      	adds	r3, r7, #7
   20a24:	2200      	movs	r2, #0
   20a26:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   20a28:	4b10      	ldr	r3, [pc, #64]	; (20a6c <hif_chip_sleep+0x50>)
   20a2a:	785b      	ldrb	r3, [r3, #1]
   20a2c:	b2db      	uxtb	r3, r3
   20a2e:	2b00      	cmp	r3, #0
   20a30:	d006      	beq.n	20a40 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   20a32:	4b0e      	ldr	r3, [pc, #56]	; (20a6c <hif_chip_sleep+0x50>)
   20a34:	785b      	ldrb	r3, [r3, #1]
   20a36:	b2db      	uxtb	r3, r3
   20a38:	3b01      	subs	r3, #1
   20a3a:	b2da      	uxtb	r2, r3
   20a3c:	4b0b      	ldr	r3, [pc, #44]	; (20a6c <hif_chip_sleep+0x50>)
   20a3e:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   20a40:	4b0a      	ldr	r3, [pc, #40]	; (20a6c <hif_chip_sleep+0x50>)
   20a42:	785b      	ldrb	r3, [r3, #1]
   20a44:	b2db      	uxtb	r3, r3
   20a46:	2b00      	cmp	r3, #0
   20a48:	d109      	bne.n	20a5e <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   20a4a:	4b08      	ldr	r3, [pc, #32]	; (20a6c <hif_chip_sleep+0x50>)
   20a4c:	781b      	ldrb	r3, [r3, #0]
   20a4e:	b2db      	uxtb	r3, r3
   20a50:	2b00      	cmp	r3, #0
   20a52:	d004      	beq.n	20a5e <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   20a54:	1dfc      	adds	r4, r7, #7
   20a56:	4b06      	ldr	r3, [pc, #24]	; (20a70 <hif_chip_sleep+0x54>)
   20a58:	4798      	blx	r3
   20a5a:	0003      	movs	r3, r0
   20a5c:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   20a5e:	1dfb      	adds	r3, r7, #7
   20a60:	781b      	ldrb	r3, [r3, #0]
   20a62:	b25b      	sxtb	r3, r3
}
   20a64:	0018      	movs	r0, r3
   20a66:	46bd      	mov	sp, r7
   20a68:	b003      	add	sp, #12
   20a6a:	bd90      	pop	{r4, r7, pc}
   20a6c:	20005904 	.word	0x20005904
   20a70:	000222e5 	.word	0x000222e5

00020a74 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   20a74:	b580      	push	{r7, lr}
   20a76:	b082      	sub	sp, #8
   20a78:	af00      	add	r7, sp, #0
   20a7a:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   20a7c:	4b09      	ldr	r3, [pc, #36]	; (20aa4 <hif_init+0x30>)
   20a7e:	222c      	movs	r2, #44	; 0x2c
   20a80:	2100      	movs	r1, #0
   20a82:	0018      	movs	r0, r3
   20a84:	4b08      	ldr	r3, [pc, #32]	; (20aa8 <hif_init+0x34>)
   20a86:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   20a88:	4b08      	ldr	r3, [pc, #32]	; (20aac <hif_init+0x38>)
   20a8a:	0018      	movs	r0, r3
   20a8c:	4b08      	ldr	r3, [pc, #32]	; (20ab0 <hif_init+0x3c>)
   20a8e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   20a90:	4b08      	ldr	r3, [pc, #32]	; (20ab4 <hif_init+0x40>)
   20a92:	0019      	movs	r1, r3
   20a94:	2003      	movs	r0, #3
   20a96:	4b08      	ldr	r3, [pc, #32]	; (20ab8 <hif_init+0x44>)
   20a98:	4798      	blx	r3
	return M2M_SUCCESS;
   20a9a:	2300      	movs	r3, #0
}
   20a9c:	0018      	movs	r0, r3
   20a9e:	46bd      	mov	sp, r7
   20aa0:	b002      	add	sp, #8
   20aa2:	bd80      	pop	{r7, pc}
   20aa4:	20005904 	.word	0x20005904
   20aa8:	0002085d 	.word	0x0002085d
   20aac:	000208d9 	.word	0x000208d9
   20ab0:	0001ff99 	.word	0x0001ff99
   20ab4:	00020969 	.word	0x00020969
   20ab8:	00021559 	.word	0x00021559

00020abc <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   20abc:	b590      	push	{r4, r7, lr}
   20abe:	b089      	sub	sp, #36	; 0x24
   20ac0:	af00      	add	r7, sp, #0
   20ac2:	0004      	movs	r4, r0
   20ac4:	0008      	movs	r0, r1
   20ac6:	603a      	str	r2, [r7, #0]
   20ac8:	0019      	movs	r1, r3
   20aca:	1dfb      	adds	r3, r7, #7
   20acc:	1c22      	adds	r2, r4, #0
   20ace:	701a      	strb	r2, [r3, #0]
   20ad0:	1dbb      	adds	r3, r7, #6
   20ad2:	1c02      	adds	r2, r0, #0
   20ad4:	701a      	strb	r2, [r3, #0]
   20ad6:	1d3b      	adds	r3, r7, #4
   20ad8:	1c0a      	adds	r2, r1, #0
   20ada:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   20adc:	231f      	movs	r3, #31
   20ade:	18fb      	adds	r3, r7, r3
   20ae0:	22ff      	movs	r2, #255	; 0xff
   20ae2:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   20ae4:	1dbb      	adds	r3, r7, #6
   20ae6:	781b      	ldrb	r3, [r3, #0]
   20ae8:	227f      	movs	r2, #127	; 0x7f
   20aea:	4013      	ands	r3, r2
   20aec:	b2da      	uxtb	r2, r3
   20aee:	2318      	movs	r3, #24
   20af0:	18fb      	adds	r3, r7, r3
   20af2:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   20af4:	2318      	movs	r3, #24
   20af6:	18fb      	adds	r3, r7, r3
   20af8:	1dfa      	adds	r2, r7, #7
   20afa:	7812      	ldrb	r2, [r2, #0]
   20afc:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   20afe:	2318      	movs	r3, #24
   20b00:	18fb      	adds	r3, r7, r3
   20b02:	2208      	movs	r2, #8
   20b04:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   20b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20b08:	2b00      	cmp	r3, #0
   20b0a:	d011      	beq.n	20b30 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   20b0c:	2318      	movs	r3, #24
   20b0e:	18fb      	adds	r3, r7, r3
   20b10:	885b      	ldrh	r3, [r3, #2]
   20b12:	b29a      	uxth	r2, r3
   20b14:	2338      	movs	r3, #56	; 0x38
   20b16:	18f9      	adds	r1, r7, r3
   20b18:	2334      	movs	r3, #52	; 0x34
   20b1a:	18fb      	adds	r3, r7, r3
   20b1c:	8809      	ldrh	r1, [r1, #0]
   20b1e:	881b      	ldrh	r3, [r3, #0]
   20b20:	18cb      	adds	r3, r1, r3
   20b22:	b29b      	uxth	r3, r3
   20b24:	18d3      	adds	r3, r2, r3
   20b26:	b29a      	uxth	r2, r3
   20b28:	2318      	movs	r3, #24
   20b2a:	18fb      	adds	r3, r7, r3
   20b2c:	805a      	strh	r2, [r3, #2]
   20b2e:	e00a      	b.n	20b46 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   20b30:	2318      	movs	r3, #24
   20b32:	18fb      	adds	r3, r7, r3
   20b34:	885b      	ldrh	r3, [r3, #2]
   20b36:	b29a      	uxth	r2, r3
   20b38:	1d3b      	adds	r3, r7, #4
   20b3a:	881b      	ldrh	r3, [r3, #0]
   20b3c:	18d3      	adds	r3, r2, r3
   20b3e:	b29a      	uxth	r2, r3
   20b40:	2318      	movs	r3, #24
   20b42:	18fb      	adds	r3, r7, r3
   20b44:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   20b46:	231f      	movs	r3, #31
   20b48:	18fc      	adds	r4, r7, r3
   20b4a:	4bb2      	ldr	r3, [pc, #712]	; (20e14 <hif_send+0x358>)
   20b4c:	4798      	blx	r3
   20b4e:	0003      	movs	r3, r0
   20b50:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   20b52:	231f      	movs	r3, #31
   20b54:	18fb      	adds	r3, r7, r3
   20b56:	781b      	ldrb	r3, [r3, #0]
   20b58:	b25b      	sxtb	r3, r3
   20b5a:	2b00      	cmp	r3, #0
   20b5c:	d000      	beq.n	20b60 <hif_send+0xa4>
   20b5e:	e129      	b.n	20db4 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   20b60:	2300      	movs	r3, #0
   20b62:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   20b64:	230e      	movs	r3, #14
   20b66:	18fb      	adds	r3, r7, r3
   20b68:	2200      	movs	r2, #0
   20b6a:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   20b6c:	2300      	movs	r3, #0
   20b6e:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   20b70:	1dfb      	adds	r3, r7, #7
   20b72:	781a      	ldrb	r2, [r3, #0]
   20b74:	697b      	ldr	r3, [r7, #20]
   20b76:	4313      	orrs	r3, r2
   20b78:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   20b7a:	1dbb      	adds	r3, r7, #6
   20b7c:	781b      	ldrb	r3, [r3, #0]
   20b7e:	021a      	lsls	r2, r3, #8
   20b80:	697b      	ldr	r3, [r7, #20]
   20b82:	4313      	orrs	r3, r2
   20b84:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   20b86:	2318      	movs	r3, #24
   20b88:	18fb      	adds	r3, r7, r3
   20b8a:	885b      	ldrh	r3, [r3, #2]
   20b8c:	b29b      	uxth	r3, r3
   20b8e:	041a      	lsls	r2, r3, #16
   20b90:	697b      	ldr	r3, [r7, #20]
   20b92:	4313      	orrs	r3, r2
   20b94:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   20b96:	697b      	ldr	r3, [r7, #20]
   20b98:	221f      	movs	r2, #31
   20b9a:	18bc      	adds	r4, r7, r2
   20b9c:	4a9e      	ldr	r2, [pc, #632]	; (20e18 <hif_send+0x35c>)
   20b9e:	0019      	movs	r1, r3
   20ba0:	0010      	movs	r0, r2
   20ba2:	4b9e      	ldr	r3, [pc, #632]	; (20e1c <hif_send+0x360>)
   20ba4:	4798      	blx	r3
   20ba6:	0003      	movs	r3, r0
   20ba8:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   20baa:	231f      	movs	r3, #31
   20bac:	18fb      	adds	r3, r7, r3
   20bae:	781b      	ldrb	r3, [r3, #0]
   20bb0:	b25b      	sxtb	r3, r3
   20bb2:	2b00      	cmp	r3, #0
   20bb4:	d000      	beq.n	20bb8 <hif_send+0xfc>
   20bb6:	e119      	b.n	20dec <hif_send+0x330>

		reg = 0UL;
   20bb8:	2300      	movs	r3, #0
   20bba:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   20bbc:	697b      	ldr	r3, [r7, #20]
   20bbe:	2202      	movs	r2, #2
   20bc0:	4313      	orrs	r3, r2
   20bc2:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   20bc4:	697b      	ldr	r3, [r7, #20]
   20bc6:	221f      	movs	r2, #31
   20bc8:	18bc      	adds	r4, r7, r2
   20bca:	4a95      	ldr	r2, [pc, #596]	; (20e20 <hif_send+0x364>)
   20bcc:	0019      	movs	r1, r3
   20bce:	0010      	movs	r0, r2
   20bd0:	4b92      	ldr	r3, [pc, #584]	; (20e1c <hif_send+0x360>)
   20bd2:	4798      	blx	r3
   20bd4:	0003      	movs	r3, r0
   20bd6:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   20bd8:	231f      	movs	r3, #31
   20bda:	18fb      	adds	r3, r7, r3
   20bdc:	781b      	ldrb	r3, [r3, #0]
   20bde:	b25b      	sxtb	r3, r3
   20be0:	2b00      	cmp	r3, #0
   20be2:	d000      	beq.n	20be6 <hif_send+0x12a>
   20be4:	e104      	b.n	20df0 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   20be6:	2300      	movs	r3, #0
   20be8:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   20bea:	230e      	movs	r3, #14
   20bec:	18fb      	adds	r3, r7, r3
   20bee:	2200      	movs	r2, #0
   20bf0:	801a      	strh	r2, [r3, #0]
   20bf2:	e050      	b.n	20c96 <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   20bf4:	231f      	movs	r3, #31
   20bf6:	18fc      	adds	r4, r7, r3
   20bf8:	2314      	movs	r3, #20
   20bfa:	18fb      	adds	r3, r7, r3
   20bfc:	4a88      	ldr	r2, [pc, #544]	; (20e20 <hif_send+0x364>)
   20bfe:	0019      	movs	r1, r3
   20c00:	0010      	movs	r0, r2
   20c02:	4b88      	ldr	r3, [pc, #544]	; (20e24 <hif_send+0x368>)
   20c04:	4798      	blx	r3
   20c06:	0003      	movs	r3, r0
   20c08:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   20c0a:	231f      	movs	r3, #31
   20c0c:	18fb      	adds	r3, r7, r3
   20c0e:	781b      	ldrb	r3, [r3, #0]
   20c10:	b25b      	sxtb	r3, r3
   20c12:	2b00      	cmp	r3, #0
   20c14:	d147      	bne.n	20ca6 <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   20c16:	230e      	movs	r3, #14
   20c18:	18fb      	adds	r3, r7, r3
   20c1a:	881b      	ldrh	r3, [r3, #0]
   20c1c:	b29a      	uxth	r2, r3
   20c1e:	23f4      	movs	r3, #244	; 0xf4
   20c20:	33ff      	adds	r3, #255	; 0xff
   20c22:	429a      	cmp	r2, r3
   20c24:	d916      	bls.n	20c54 <hif_send+0x198>
				if(cnt < 501) {
   20c26:	230e      	movs	r3, #14
   20c28:	18fb      	adds	r3, r7, r3
   20c2a:	881b      	ldrh	r3, [r3, #0]
   20c2c:	b29a      	uxth	r2, r3
   20c2e:	23fa      	movs	r3, #250	; 0xfa
   20c30:	005b      	lsls	r3, r3, #1
   20c32:	429a      	cmp	r2, r3
   20c34:	d80b      	bhi.n	20c4e <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   20c36:	4b7c      	ldr	r3, [pc, #496]	; (20e28 <hif_send+0x36c>)
   20c38:	0018      	movs	r0, r3
   20c3a:	4b7c      	ldr	r3, [pc, #496]	; (20e2c <hif_send+0x370>)
   20c3c:	4798      	blx	r3
   20c3e:	4b7c      	ldr	r3, [pc, #496]	; (20e30 <hif_send+0x374>)
   20c40:	0018      	movs	r0, r3
   20c42:	4b7a      	ldr	r3, [pc, #488]	; (20e2c <hif_send+0x370>)
   20c44:	4798      	blx	r3
   20c46:	4b7b      	ldr	r3, [pc, #492]	; (20e34 <hif_send+0x378>)
   20c48:	0018      	movs	r0, r3
   20c4a:	4b78      	ldr	r3, [pc, #480]	; (20e2c <hif_send+0x370>)
   20c4c:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   20c4e:	2001      	movs	r0, #1
   20c50:	4b79      	ldr	r3, [pc, #484]	; (20e38 <hif_send+0x37c>)
   20c52:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   20c54:	697b      	ldr	r3, [r7, #20]
   20c56:	2202      	movs	r2, #2
   20c58:	4013      	ands	r3, r2
   20c5a:	d113      	bne.n	20c84 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   20c5c:	231f      	movs	r3, #31
   20c5e:	18fc      	adds	r4, r7, r3
   20c60:	2310      	movs	r3, #16
   20c62:	18fb      	adds	r3, r7, r3
   20c64:	4a75      	ldr	r2, [pc, #468]	; (20e3c <hif_send+0x380>)
   20c66:	0019      	movs	r1, r3
   20c68:	0010      	movs	r0, r2
   20c6a:	4b6e      	ldr	r3, [pc, #440]	; (20e24 <hif_send+0x368>)
   20c6c:	4798      	blx	r3
   20c6e:	0003      	movs	r3, r0
   20c70:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   20c72:	231f      	movs	r3, #31
   20c74:	18fb      	adds	r3, r7, r3
   20c76:	781b      	ldrb	r3, [r3, #0]
   20c78:	b25b      	sxtb	r3, r3
   20c7a:	2b00      	cmp	r3, #0
   20c7c:	d015      	beq.n	20caa <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   20c7e:	2300      	movs	r3, #0
   20c80:	613b      	str	r3, [r7, #16]
					goto ERR1;
   20c82:	e0bc      	b.n	20dfe <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   20c84:	230e      	movs	r3, #14
   20c86:	18fb      	adds	r3, r7, r3
   20c88:	881b      	ldrh	r3, [r3, #0]
   20c8a:	b29b      	uxth	r3, r3
   20c8c:	3301      	adds	r3, #1
   20c8e:	b29a      	uxth	r2, r3
   20c90:	230e      	movs	r3, #14
   20c92:	18fb      	adds	r3, r7, r3
   20c94:	801a      	strh	r2, [r3, #0]
   20c96:	230e      	movs	r3, #14
   20c98:	18fb      	adds	r3, r7, r3
   20c9a:	881b      	ldrh	r3, [r3, #0]
   20c9c:	b29b      	uxth	r3, r3
   20c9e:	4a68      	ldr	r2, [pc, #416]	; (20e40 <hif_send+0x384>)
   20ca0:	4293      	cmp	r3, r2
   20ca2:	d9a7      	bls.n	20bf4 <hif_send+0x138>
   20ca4:	e002      	b.n	20cac <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   20ca6:	46c0      	nop			; (mov r8, r8)
   20ca8:	e000      	b.n	20cac <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   20caa:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   20cac:	693b      	ldr	r3, [r7, #16]
   20cae:	2b00      	cmp	r3, #0
   20cb0:	d100      	bne.n	20cb4 <hif_send+0x1f8>
   20cb2:	e074      	b.n	20d9e <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   20cb4:	693b      	ldr	r3, [r7, #16]
   20cb6:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   20cb8:	2318      	movs	r3, #24
   20cba:	18fb      	adds	r3, r7, r3
   20cbc:	885b      	ldrh	r3, [r3, #2]
   20cbe:	b29a      	uxth	r2, r3
   20cc0:	2318      	movs	r3, #24
   20cc2:	18fb      	adds	r3, r7, r3
   20cc4:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   20cc6:	68bb      	ldr	r3, [r7, #8]
   20cc8:	221f      	movs	r2, #31
   20cca:	18bc      	adds	r4, r7, r2
   20ccc:	2218      	movs	r2, #24
   20cce:	18b9      	adds	r1, r7, r2
   20cd0:	2208      	movs	r2, #8
   20cd2:	0018      	movs	r0, r3
   20cd4:	4b5b      	ldr	r3, [pc, #364]	; (20e44 <hif_send+0x388>)
   20cd6:	4798      	blx	r3
   20cd8:	0003      	movs	r3, r0
   20cda:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   20cdc:	231f      	movs	r3, #31
   20cde:	18fb      	adds	r3, r7, r3
   20ce0:	781b      	ldrb	r3, [r3, #0]
   20ce2:	b25b      	sxtb	r3, r3
   20ce4:	2b00      	cmp	r3, #0
   20ce6:	d000      	beq.n	20cea <hif_send+0x22e>
   20ce8:	e084      	b.n	20df4 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   20cea:	68bb      	ldr	r3, [r7, #8]
   20cec:	3308      	adds	r3, #8
   20cee:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   20cf0:	683b      	ldr	r3, [r7, #0]
   20cf2:	2b00      	cmp	r3, #0
   20cf4:	d016      	beq.n	20d24 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   20cf6:	68b8      	ldr	r0, [r7, #8]
   20cf8:	1d3b      	adds	r3, r7, #4
   20cfa:	881a      	ldrh	r2, [r3, #0]
   20cfc:	231f      	movs	r3, #31
   20cfe:	18fc      	adds	r4, r7, r3
   20d00:	683b      	ldr	r3, [r7, #0]
   20d02:	0019      	movs	r1, r3
   20d04:	4b4f      	ldr	r3, [pc, #316]	; (20e44 <hif_send+0x388>)
   20d06:	4798      	blx	r3
   20d08:	0003      	movs	r3, r0
   20d0a:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   20d0c:	231f      	movs	r3, #31
   20d0e:	18fb      	adds	r3, r7, r3
   20d10:	781b      	ldrb	r3, [r3, #0]
   20d12:	b25b      	sxtb	r3, r3
   20d14:	2b00      	cmp	r3, #0
   20d16:	d000      	beq.n	20d1a <hif_send+0x25e>
   20d18:	e06e      	b.n	20df8 <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   20d1a:	1d3b      	adds	r3, r7, #4
   20d1c:	881a      	ldrh	r2, [r3, #0]
   20d1e:	68bb      	ldr	r3, [r7, #8]
   20d20:	18d3      	adds	r3, r2, r3
   20d22:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   20d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20d26:	2b00      	cmp	r3, #0
   20d28:	d021      	beq.n	20d6e <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   20d2a:	2338      	movs	r3, #56	; 0x38
   20d2c:	18fb      	adds	r3, r7, r3
   20d2e:	881a      	ldrh	r2, [r3, #0]
   20d30:	1d3b      	adds	r3, r7, #4
   20d32:	881b      	ldrh	r3, [r3, #0]
   20d34:	1ad3      	subs	r3, r2, r3
   20d36:	001a      	movs	r2, r3
   20d38:	68bb      	ldr	r3, [r7, #8]
   20d3a:	18d3      	adds	r3, r2, r3
   20d3c:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   20d3e:	68b8      	ldr	r0, [r7, #8]
   20d40:	2334      	movs	r3, #52	; 0x34
   20d42:	18fb      	adds	r3, r7, r3
   20d44:	881a      	ldrh	r2, [r3, #0]
   20d46:	231f      	movs	r3, #31
   20d48:	18fc      	adds	r4, r7, r3
   20d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20d4c:	0019      	movs	r1, r3
   20d4e:	4b3d      	ldr	r3, [pc, #244]	; (20e44 <hif_send+0x388>)
   20d50:	4798      	blx	r3
   20d52:	0003      	movs	r3, r0
   20d54:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   20d56:	231f      	movs	r3, #31
   20d58:	18fb      	adds	r3, r7, r3
   20d5a:	781b      	ldrb	r3, [r3, #0]
   20d5c:	b25b      	sxtb	r3, r3
   20d5e:	2b00      	cmp	r3, #0
   20d60:	d14c      	bne.n	20dfc <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   20d62:	2334      	movs	r3, #52	; 0x34
   20d64:	18fb      	adds	r3, r7, r3
   20d66:	881a      	ldrh	r2, [r3, #0]
   20d68:	68bb      	ldr	r3, [r7, #8]
   20d6a:	18d3      	adds	r3, r2, r3
   20d6c:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   20d6e:	693b      	ldr	r3, [r7, #16]
   20d70:	009b      	lsls	r3, r3, #2
   20d72:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   20d74:	697b      	ldr	r3, [r7, #20]
   20d76:	2202      	movs	r2, #2
   20d78:	4313      	orrs	r3, r2
   20d7a:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   20d7c:	697b      	ldr	r3, [r7, #20]
   20d7e:	221f      	movs	r2, #31
   20d80:	18bc      	adds	r4, r7, r2
   20d82:	4a31      	ldr	r2, [pc, #196]	; (20e48 <hif_send+0x38c>)
   20d84:	0019      	movs	r1, r3
   20d86:	0010      	movs	r0, r2
   20d88:	4b24      	ldr	r3, [pc, #144]	; (20e1c <hif_send+0x360>)
   20d8a:	4798      	blx	r3
   20d8c:	0003      	movs	r3, r0
   20d8e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   20d90:	231f      	movs	r3, #31
   20d92:	18fb      	adds	r3, r7, r3
   20d94:	781b      	ldrb	r3, [r3, #0]
   20d96:	b25b      	sxtb	r3, r3
   20d98:	2b00      	cmp	r3, #0
   20d9a:	d01c      	beq.n	20dd6 <hif_send+0x31a>
   20d9c:	e02f      	b.n	20dfe <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   20d9e:	231f      	movs	r3, #31
   20da0:	18fc      	adds	r4, r7, r3
   20da2:	4b2a      	ldr	r3, [pc, #168]	; (20e4c <hif_send+0x390>)
   20da4:	4798      	blx	r3
   20da6:	0003      	movs	r3, r0
   20da8:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   20daa:	231f      	movs	r3, #31
   20dac:	18fb      	adds	r3, r7, r3
   20dae:	22fd      	movs	r2, #253	; 0xfd
   20db0:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   20db2:	e026      	b.n	20e02 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   20db4:	2398      	movs	r3, #152	; 0x98
   20db6:	33ff      	adds	r3, #255	; 0xff
   20db8:	001a      	movs	r2, r3
   20dba:	4925      	ldr	r1, [pc, #148]	; (20e50 <hif_send+0x394>)
   20dbc:	4b25      	ldr	r3, [pc, #148]	; (20e54 <hif_send+0x398>)
   20dbe:	0018      	movs	r0, r3
   20dc0:	4b1a      	ldr	r3, [pc, #104]	; (20e2c <hif_send+0x370>)
   20dc2:	4798      	blx	r3
   20dc4:	4b24      	ldr	r3, [pc, #144]	; (20e58 <hif_send+0x39c>)
   20dc6:	0018      	movs	r0, r3
   20dc8:	4b18      	ldr	r3, [pc, #96]	; (20e2c <hif_send+0x370>)
   20dca:	4798      	blx	r3
   20dcc:	4b19      	ldr	r3, [pc, #100]	; (20e34 <hif_send+0x378>)
   20dce:	0018      	movs	r0, r3
   20dd0:	4b16      	ldr	r3, [pc, #88]	; (20e2c <hif_send+0x370>)
   20dd2:	4798      	blx	r3
		goto ERR2;
   20dd4:	e015      	b.n	20e02 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   20dd6:	231f      	movs	r3, #31
   20dd8:	18fc      	adds	r4, r7, r3
   20dda:	4b1c      	ldr	r3, [pc, #112]	; (20e4c <hif_send+0x390>)
   20ddc:	4798      	blx	r3
   20dde:	0003      	movs	r3, r0
   20de0:	7023      	strb	r3, [r4, #0]
	return ret;
   20de2:	231f      	movs	r3, #31
   20de4:	18fb      	adds	r3, r7, r3
   20de6:	781b      	ldrb	r3, [r3, #0]
   20de8:	b25b      	sxtb	r3, r3
   20dea:	e00e      	b.n	20e0a <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   20dec:	46c0      	nop			; (mov r8, r8)
   20dee:	e006      	b.n	20dfe <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   20df0:	46c0      	nop			; (mov r8, r8)
   20df2:	e004      	b.n	20dfe <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   20df4:	46c0      	nop			; (mov r8, r8)
   20df6:	e002      	b.n	20dfe <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   20df8:	46c0      	nop			; (mov r8, r8)
   20dfa:	e000      	b.n	20dfe <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   20dfc:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   20dfe:	4b17      	ldr	r3, [pc, #92]	; (20e5c <hif_send+0x3a0>)
   20e00:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   20e02:	231f      	movs	r3, #31
   20e04:	18fb      	adds	r3, r7, r3
   20e06:	781b      	ldrb	r3, [r3, #0]
   20e08:	b25b      	sxtb	r3, r3
}
   20e0a:	0018      	movs	r0, r3
   20e0c:	46bd      	mov	sp, r7
   20e0e:	b009      	add	sp, #36	; 0x24
   20e10:	bd90      	pop	{r4, r7, pc}
   20e12:	46c0      	nop			; (mov r8, r8)
   20e14:	00020985 	.word	0x00020985
   20e18:	0000108c 	.word	0x0000108c
   20e1c:	00022911 	.word	0x00022911
   20e20:	00001078 	.word	0x00001078
   20e24:	000228ed 	.word	0x000228ed
   20e28:	00037fe0 	.word	0x00037fe0
   20e2c:	0001db29 	.word	0x0001db29
   20e30:	00037fec 	.word	0x00037fec
   20e34:	00038000 	.word	0x00038000
   20e38:	0001ff7d 	.word	0x0001ff7d
   20e3c:	00150400 	.word	0x00150400
   20e40:	000003e7 	.word	0x000003e7
   20e44:	00022a59 	.word	0x00022a59
   20e48:	0000106c 	.word	0x0000106c
   20e4c:	00020a1d 	.word	0x00020a1d
   20e50:	00038308 	.word	0x00038308
   20e54:	00038004 	.word	0x00038004
   20e58:	00038018 	.word	0x00038018
   20e5c:	000209f5 	.word	0x000209f5

00020e60 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   20e60:	b590      	push	{r4, r7, lr}
   20e62:	b087      	sub	sp, #28
   20e64:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   20e66:	230f      	movs	r3, #15
   20e68:	18fb      	adds	r3, r7, r3
   20e6a:	2200      	movs	r2, #0
   20e6c:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   20e6e:	230f      	movs	r3, #15
   20e70:	18fc      	adds	r4, r7, r3
   20e72:	2308      	movs	r3, #8
   20e74:	18fb      	adds	r3, r7, r3
   20e76:	4adc      	ldr	r2, [pc, #880]	; (211e8 <hif_isr+0x388>)
   20e78:	0019      	movs	r1, r3
   20e7a:	0010      	movs	r0, r2
   20e7c:	4bdb      	ldr	r3, [pc, #876]	; (211ec <hif_isr+0x38c>)
   20e7e:	4798      	blx	r3
   20e80:	0003      	movs	r3, r0
   20e82:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   20e84:	230f      	movs	r3, #15
   20e86:	18fb      	adds	r3, r7, r3
   20e88:	781b      	ldrb	r3, [r3, #0]
   20e8a:	b25b      	sxtb	r3, r3
   20e8c:	2b00      	cmp	r3, #0
   20e8e:	d000      	beq.n	20e92 <hif_isr+0x32>
   20e90:	e21e      	b.n	212d0 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   20e92:	68bb      	ldr	r3, [r7, #8]
   20e94:	2201      	movs	r2, #1
   20e96:	4013      	ands	r3, r2
   20e98:	d100      	bne.n	20e9c <hif_isr+0x3c>
   20e9a:	e204      	b.n	212a6 <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   20e9c:	2000      	movs	r0, #0
   20e9e:	4bd4      	ldr	r3, [pc, #848]	; (211f0 <hif_isr+0x390>)
   20ea0:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   20ea2:	68bb      	ldr	r3, [r7, #8]
   20ea4:	2201      	movs	r2, #1
   20ea6:	4393      	bics	r3, r2
   20ea8:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   20eaa:	68bb      	ldr	r3, [r7, #8]
   20eac:	220f      	movs	r2, #15
   20eae:	18bc      	adds	r4, r7, r2
   20eb0:	4acd      	ldr	r2, [pc, #820]	; (211e8 <hif_isr+0x388>)
   20eb2:	0019      	movs	r1, r3
   20eb4:	0010      	movs	r0, r2
   20eb6:	4bcf      	ldr	r3, [pc, #828]	; (211f4 <hif_isr+0x394>)
   20eb8:	4798      	blx	r3
   20eba:	0003      	movs	r3, r0
   20ebc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   20ebe:	230f      	movs	r3, #15
   20ec0:	18fb      	adds	r3, r7, r3
   20ec2:	781b      	ldrb	r3, [r3, #0]
   20ec4:	b25b      	sxtb	r3, r3
   20ec6:	2b00      	cmp	r3, #0
   20ec8:	d000      	beq.n	20ecc <hif_isr+0x6c>
   20eca:	e210      	b.n	212ee <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   20ecc:	4bca      	ldr	r3, [pc, #808]	; (211f8 <hif_isr+0x398>)
   20ece:	2201      	movs	r2, #1
   20ed0:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   20ed2:	68bb      	ldr	r3, [r7, #8]
   20ed4:	089b      	lsrs	r3, r3, #2
   20ed6:	b29a      	uxth	r2, r3
   20ed8:	230c      	movs	r3, #12
   20eda:	18fb      	adds	r3, r7, r3
   20edc:	0512      	lsls	r2, r2, #20
   20ede:	0d12      	lsrs	r2, r2, #20
   20ee0:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   20ee2:	230c      	movs	r3, #12
   20ee4:	18fb      	adds	r3, r7, r3
   20ee6:	881b      	ldrh	r3, [r3, #0]
   20ee8:	2b00      	cmp	r3, #0
   20eea:	d100      	bne.n	20eee <hif_isr+0x8e>
   20eec:	e1c8      	b.n	21280 <hif_isr+0x420>
				uint32 address = 0;
   20eee:	2300      	movs	r3, #0
   20ef0:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   20ef2:	230f      	movs	r3, #15
   20ef4:	18fc      	adds	r4, r7, r3
   20ef6:	003b      	movs	r3, r7
   20ef8:	4ac0      	ldr	r2, [pc, #768]	; (211fc <hif_isr+0x39c>)
   20efa:	0019      	movs	r1, r3
   20efc:	0010      	movs	r0, r2
   20efe:	4bbb      	ldr	r3, [pc, #748]	; (211ec <hif_isr+0x38c>)
   20f00:	4798      	blx	r3
   20f02:	0003      	movs	r3, r0
   20f04:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   20f06:	230f      	movs	r3, #15
   20f08:	18fb      	adds	r3, r7, r3
   20f0a:	781b      	ldrb	r3, [r3, #0]
   20f0c:	b25b      	sxtb	r3, r3
   20f0e:	2b00      	cmp	r3, #0
   20f10:	d012      	beq.n	20f38 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   20f12:	23e4      	movs	r3, #228	; 0xe4
   20f14:	005a      	lsls	r2, r3, #1
   20f16:	49ba      	ldr	r1, [pc, #744]	; (21200 <hif_isr+0x3a0>)
   20f18:	4bba      	ldr	r3, [pc, #744]	; (21204 <hif_isr+0x3a4>)
   20f1a:	0018      	movs	r0, r3
   20f1c:	4bba      	ldr	r3, [pc, #744]	; (21208 <hif_isr+0x3a8>)
   20f1e:	4798      	blx	r3
   20f20:	4bba      	ldr	r3, [pc, #744]	; (2120c <hif_isr+0x3ac>)
   20f22:	0018      	movs	r0, r3
   20f24:	4bb8      	ldr	r3, [pc, #736]	; (21208 <hif_isr+0x3a8>)
   20f26:	4798      	blx	r3
   20f28:	4bb9      	ldr	r3, [pc, #740]	; (21210 <hif_isr+0x3b0>)
   20f2a:	0018      	movs	r0, r3
   20f2c:	4bb6      	ldr	r3, [pc, #728]	; (21208 <hif_isr+0x3a8>)
   20f2e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   20f30:	2001      	movs	r0, #1
   20f32:	4baf      	ldr	r3, [pc, #700]	; (211f0 <hif_isr+0x390>)
   20f34:	4798      	blx	r3
					goto ERR1;
   20f36:	e1db      	b.n	212f0 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   20f38:	683a      	ldr	r2, [r7, #0]
   20f3a:	4baf      	ldr	r3, [pc, #700]	; (211f8 <hif_isr+0x398>)
   20f3c:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   20f3e:	230c      	movs	r3, #12
   20f40:	18fb      	adds	r3, r7, r3
   20f42:	881a      	ldrh	r2, [r3, #0]
   20f44:	4bac      	ldr	r3, [pc, #688]	; (211f8 <hif_isr+0x398>)
   20f46:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   20f48:	683b      	ldr	r3, [r7, #0]
   20f4a:	220f      	movs	r2, #15
   20f4c:	18bc      	adds	r4, r7, r2
   20f4e:	1d39      	adds	r1, r7, #4
   20f50:	2204      	movs	r2, #4
   20f52:	0018      	movs	r0, r3
   20f54:	4baf      	ldr	r3, [pc, #700]	; (21214 <hif_isr+0x3b4>)
   20f56:	4798      	blx	r3
   20f58:	0003      	movs	r3, r0
   20f5a:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   20f5c:	1d3b      	adds	r3, r7, #4
   20f5e:	885b      	ldrh	r3, [r3, #2]
   20f60:	b29a      	uxth	r2, r3
   20f62:	1d3b      	adds	r3, r7, #4
   20f64:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   20f66:	230f      	movs	r3, #15
   20f68:	18fb      	adds	r3, r7, r3
   20f6a:	781b      	ldrb	r3, [r3, #0]
   20f6c:	b25b      	sxtb	r3, r3
   20f6e:	2b00      	cmp	r3, #0
   20f70:	d012      	beq.n	20f98 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   20f72:	23e9      	movs	r3, #233	; 0xe9
   20f74:	005a      	lsls	r2, r3, #1
   20f76:	49a2      	ldr	r1, [pc, #648]	; (21200 <hif_isr+0x3a0>)
   20f78:	4ba2      	ldr	r3, [pc, #648]	; (21204 <hif_isr+0x3a4>)
   20f7a:	0018      	movs	r0, r3
   20f7c:	4ba2      	ldr	r3, [pc, #648]	; (21208 <hif_isr+0x3a8>)
   20f7e:	4798      	blx	r3
   20f80:	4ba5      	ldr	r3, [pc, #660]	; (21218 <hif_isr+0x3b8>)
   20f82:	0018      	movs	r0, r3
   20f84:	4ba0      	ldr	r3, [pc, #640]	; (21208 <hif_isr+0x3a8>)
   20f86:	4798      	blx	r3
   20f88:	4ba1      	ldr	r3, [pc, #644]	; (21210 <hif_isr+0x3b0>)
   20f8a:	0018      	movs	r0, r3
   20f8c:	4b9e      	ldr	r3, [pc, #632]	; (21208 <hif_isr+0x3a8>)
   20f8e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   20f90:	2001      	movs	r0, #1
   20f92:	4b97      	ldr	r3, [pc, #604]	; (211f0 <hif_isr+0x390>)
   20f94:	4798      	blx	r3
					goto ERR1;
   20f96:	e1ab      	b.n	212f0 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   20f98:	1d3b      	adds	r3, r7, #4
   20f9a:	885b      	ldrh	r3, [r3, #2]
   20f9c:	b29b      	uxth	r3, r3
   20f9e:	220c      	movs	r2, #12
   20fa0:	18ba      	adds	r2, r7, r2
   20fa2:	8812      	ldrh	r2, [r2, #0]
   20fa4:	429a      	cmp	r2, r3
   20fa6:	d02f      	beq.n	21008 <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   20fa8:	230c      	movs	r3, #12
   20faa:	18fb      	adds	r3, r7, r3
   20fac:	881b      	ldrh	r3, [r3, #0]
   20fae:	1d3a      	adds	r2, r7, #4
   20fb0:	8852      	ldrh	r2, [r2, #2]
   20fb2:	b292      	uxth	r2, r2
   20fb4:	1a9b      	subs	r3, r3, r2
   20fb6:	2b04      	cmp	r3, #4
   20fb8:	dd26      	ble.n	21008 <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   20fba:	23dc      	movs	r3, #220	; 0xdc
   20fbc:	33ff      	adds	r3, #255	; 0xff
   20fbe:	001a      	movs	r2, r3
   20fc0:	498f      	ldr	r1, [pc, #572]	; (21200 <hif_isr+0x3a0>)
   20fc2:	4b90      	ldr	r3, [pc, #576]	; (21204 <hif_isr+0x3a4>)
   20fc4:	0018      	movs	r0, r3
   20fc6:	4b90      	ldr	r3, [pc, #576]	; (21208 <hif_isr+0x3a8>)
   20fc8:	4798      	blx	r3
   20fca:	230c      	movs	r3, #12
   20fcc:	18fb      	adds	r3, r7, r3
   20fce:	8819      	ldrh	r1, [r3, #0]
   20fd0:	1d3b      	adds	r3, r7, #4
   20fd2:	885b      	ldrh	r3, [r3, #2]
   20fd4:	b29b      	uxth	r3, r3
   20fd6:	001a      	movs	r2, r3
   20fd8:	1d3b      	adds	r3, r7, #4
   20fda:	781b      	ldrb	r3, [r3, #0]
   20fdc:	b2db      	uxtb	r3, r3
   20fde:	001c      	movs	r4, r3
   20fe0:	1d3b      	adds	r3, r7, #4
   20fe2:	785b      	ldrb	r3, [r3, #1]
   20fe4:	b2db      	uxtb	r3, r3
   20fe6:	488d      	ldr	r0, [pc, #564]	; (2121c <hif_isr+0x3bc>)
   20fe8:	9300      	str	r3, [sp, #0]
   20fea:	0023      	movs	r3, r4
   20fec:	4c86      	ldr	r4, [pc, #536]	; (21208 <hif_isr+0x3a8>)
   20fee:	47a0      	blx	r4
   20ff0:	4b87      	ldr	r3, [pc, #540]	; (21210 <hif_isr+0x3b0>)
   20ff2:	0018      	movs	r0, r3
   20ff4:	4b84      	ldr	r3, [pc, #528]	; (21208 <hif_isr+0x3a8>)
   20ff6:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   20ff8:	2001      	movs	r0, #1
   20ffa:	4b7d      	ldr	r3, [pc, #500]	; (211f0 <hif_isr+0x390>)
   20ffc:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   20ffe:	230f      	movs	r3, #15
   21000:	18fb      	adds	r3, r7, r3
   21002:	22fa      	movs	r2, #250	; 0xfa
   21004:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   21006:	e173      	b.n	212f0 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   21008:	1d3b      	adds	r3, r7, #4
   2100a:	781b      	ldrb	r3, [r3, #0]
   2100c:	b2db      	uxtb	r3, r3
   2100e:	2b01      	cmp	r3, #1
   21010:	d122      	bne.n	21058 <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   21012:	4b79      	ldr	r3, [pc, #484]	; (211f8 <hif_isr+0x398>)
   21014:	691b      	ldr	r3, [r3, #16]
   21016:	2b00      	cmp	r3, #0
   21018:	d00d      	beq.n	21036 <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2101a:	4b77      	ldr	r3, [pc, #476]	; (211f8 <hif_isr+0x398>)
   2101c:	691b      	ldr	r3, [r3, #16]
   2101e:	1d3a      	adds	r2, r7, #4
   21020:	7852      	ldrb	r2, [r2, #1]
   21022:	b2d0      	uxtb	r0, r2
   21024:	1d3a      	adds	r2, r7, #4
   21026:	8852      	ldrh	r2, [r2, #2]
   21028:	b292      	uxth	r2, r2
   2102a:	3a08      	subs	r2, #8
   2102c:	b291      	uxth	r1, r2
   2102e:	683a      	ldr	r2, [r7, #0]
   21030:	3208      	adds	r2, #8
   21032:	4798      	blx	r3
   21034:	e102      	b.n	2123c <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   21036:	23e8      	movs	r3, #232	; 0xe8
   21038:	33ff      	adds	r3, #255	; 0xff
   2103a:	001a      	movs	r2, r3
   2103c:	4970      	ldr	r1, [pc, #448]	; (21200 <hif_isr+0x3a0>)
   2103e:	4b71      	ldr	r3, [pc, #452]	; (21204 <hif_isr+0x3a4>)
   21040:	0018      	movs	r0, r3
   21042:	4b71      	ldr	r3, [pc, #452]	; (21208 <hif_isr+0x3a8>)
   21044:	4798      	blx	r3
   21046:	4b76      	ldr	r3, [pc, #472]	; (21220 <hif_isr+0x3c0>)
   21048:	0018      	movs	r0, r3
   2104a:	4b6f      	ldr	r3, [pc, #444]	; (21208 <hif_isr+0x3a8>)
   2104c:	4798      	blx	r3
   2104e:	4b70      	ldr	r3, [pc, #448]	; (21210 <hif_isr+0x3b0>)
   21050:	0018      	movs	r0, r3
   21052:	4b6d      	ldr	r3, [pc, #436]	; (21208 <hif_isr+0x3a8>)
   21054:	4798      	blx	r3
   21056:	e0f1      	b.n	2123c <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   21058:	1d3b      	adds	r3, r7, #4
   2105a:	781b      	ldrb	r3, [r3, #0]
   2105c:	b2db      	uxtb	r3, r3
   2105e:	2b02      	cmp	r3, #2
   21060:	d122      	bne.n	210a8 <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   21062:	4b65      	ldr	r3, [pc, #404]	; (211f8 <hif_isr+0x398>)
   21064:	695b      	ldr	r3, [r3, #20]
   21066:	2b00      	cmp	r3, #0
   21068:	d00d      	beq.n	21086 <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2106a:	4b63      	ldr	r3, [pc, #396]	; (211f8 <hif_isr+0x398>)
   2106c:	695b      	ldr	r3, [r3, #20]
   2106e:	1d3a      	adds	r2, r7, #4
   21070:	7852      	ldrb	r2, [r2, #1]
   21072:	b2d0      	uxtb	r0, r2
   21074:	1d3a      	adds	r2, r7, #4
   21076:	8852      	ldrh	r2, [r2, #2]
   21078:	b292      	uxth	r2, r2
   2107a:	3a08      	subs	r2, #8
   2107c:	b291      	uxth	r1, r2
   2107e:	683a      	ldr	r2, [r7, #0]
   21080:	3208      	adds	r2, #8
   21082:	4798      	blx	r3
   21084:	e0da      	b.n	2123c <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   21086:	23f0      	movs	r3, #240	; 0xf0
   21088:	33ff      	adds	r3, #255	; 0xff
   2108a:	001a      	movs	r2, r3
   2108c:	495c      	ldr	r1, [pc, #368]	; (21200 <hif_isr+0x3a0>)
   2108e:	4b5d      	ldr	r3, [pc, #372]	; (21204 <hif_isr+0x3a4>)
   21090:	0018      	movs	r0, r3
   21092:	4b5d      	ldr	r3, [pc, #372]	; (21208 <hif_isr+0x3a8>)
   21094:	4798      	blx	r3
   21096:	4b63      	ldr	r3, [pc, #396]	; (21224 <hif_isr+0x3c4>)
   21098:	0018      	movs	r0, r3
   2109a:	4b5b      	ldr	r3, [pc, #364]	; (21208 <hif_isr+0x3a8>)
   2109c:	4798      	blx	r3
   2109e:	4b5c      	ldr	r3, [pc, #368]	; (21210 <hif_isr+0x3b0>)
   210a0:	0018      	movs	r0, r3
   210a2:	4b59      	ldr	r3, [pc, #356]	; (21208 <hif_isr+0x3a8>)
   210a4:	4798      	blx	r3
   210a6:	e0c9      	b.n	2123c <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   210a8:	1d3b      	adds	r3, r7, #4
   210aa:	781b      	ldrb	r3, [r3, #0]
   210ac:	b2db      	uxtb	r3, r3
   210ae:	2b04      	cmp	r3, #4
   210b0:	d122      	bne.n	210f8 <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   210b2:	4b51      	ldr	r3, [pc, #324]	; (211f8 <hif_isr+0x398>)
   210b4:	699b      	ldr	r3, [r3, #24]
   210b6:	2b00      	cmp	r3, #0
   210b8:	d00d      	beq.n	210d6 <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   210ba:	4b4f      	ldr	r3, [pc, #316]	; (211f8 <hif_isr+0x398>)
   210bc:	699b      	ldr	r3, [r3, #24]
   210be:	1d3a      	adds	r2, r7, #4
   210c0:	7852      	ldrb	r2, [r2, #1]
   210c2:	b2d0      	uxtb	r0, r2
   210c4:	1d3a      	adds	r2, r7, #4
   210c6:	8852      	ldrh	r2, [r2, #2]
   210c8:	b292      	uxth	r2, r2
   210ca:	3a08      	subs	r2, #8
   210cc:	b291      	uxth	r1, r2
   210ce:	683a      	ldr	r2, [r7, #0]
   210d0:	3208      	adds	r2, #8
   210d2:	4798      	blx	r3
   210d4:	e0b2      	b.n	2123c <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   210d6:	23f8      	movs	r3, #248	; 0xf8
   210d8:	33ff      	adds	r3, #255	; 0xff
   210da:	001a      	movs	r2, r3
   210dc:	4948      	ldr	r1, [pc, #288]	; (21200 <hif_isr+0x3a0>)
   210de:	4b49      	ldr	r3, [pc, #292]	; (21204 <hif_isr+0x3a4>)
   210e0:	0018      	movs	r0, r3
   210e2:	4b49      	ldr	r3, [pc, #292]	; (21208 <hif_isr+0x3a8>)
   210e4:	4798      	blx	r3
   210e6:	4b50      	ldr	r3, [pc, #320]	; (21228 <hif_isr+0x3c8>)
   210e8:	0018      	movs	r0, r3
   210ea:	4b47      	ldr	r3, [pc, #284]	; (21208 <hif_isr+0x3a8>)
   210ec:	4798      	blx	r3
   210ee:	4b48      	ldr	r3, [pc, #288]	; (21210 <hif_isr+0x3b0>)
   210f0:	0018      	movs	r0, r3
   210f2:	4b45      	ldr	r3, [pc, #276]	; (21208 <hif_isr+0x3a8>)
   210f4:	4798      	blx	r3
   210f6:	e0a1      	b.n	2123c <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   210f8:	1d3b      	adds	r3, r7, #4
   210fa:	781b      	ldrb	r3, [r3, #0]
   210fc:	b2db      	uxtb	r3, r3
   210fe:	2b06      	cmp	r3, #6
   21100:	d121      	bne.n	21146 <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   21102:	4b3d      	ldr	r3, [pc, #244]	; (211f8 <hif_isr+0x398>)
   21104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21106:	2b00      	cmp	r3, #0
   21108:	d00d      	beq.n	21126 <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2110a:	4b3b      	ldr	r3, [pc, #236]	; (211f8 <hif_isr+0x398>)
   2110c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2110e:	1d3a      	adds	r2, r7, #4
   21110:	7852      	ldrb	r2, [r2, #1]
   21112:	b2d0      	uxtb	r0, r2
   21114:	1d3a      	adds	r2, r7, #4
   21116:	8852      	ldrh	r2, [r2, #2]
   21118:	b292      	uxth	r2, r2
   2111a:	3a08      	subs	r2, #8
   2111c:	b291      	uxth	r1, r2
   2111e:	683a      	ldr	r2, [r7, #0]
   21120:	3208      	adds	r2, #8
   21122:	4798      	blx	r3
   21124:	e08a      	b.n	2123c <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   21126:	2380      	movs	r3, #128	; 0x80
   21128:	009a      	lsls	r2, r3, #2
   2112a:	4935      	ldr	r1, [pc, #212]	; (21200 <hif_isr+0x3a0>)
   2112c:	4b35      	ldr	r3, [pc, #212]	; (21204 <hif_isr+0x3a4>)
   2112e:	0018      	movs	r0, r3
   21130:	4b35      	ldr	r3, [pc, #212]	; (21208 <hif_isr+0x3a8>)
   21132:	4798      	blx	r3
   21134:	4b3d      	ldr	r3, [pc, #244]	; (2122c <hif_isr+0x3cc>)
   21136:	0018      	movs	r0, r3
   21138:	4b33      	ldr	r3, [pc, #204]	; (21208 <hif_isr+0x3a8>)
   2113a:	4798      	blx	r3
   2113c:	4b34      	ldr	r3, [pc, #208]	; (21210 <hif_isr+0x3b0>)
   2113e:	0018      	movs	r0, r3
   21140:	4b31      	ldr	r3, [pc, #196]	; (21208 <hif_isr+0x3a8>)
   21142:	4798      	blx	r3
   21144:	e07a      	b.n	2123c <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   21146:	1d3b      	adds	r3, r7, #4
   21148:	781b      	ldrb	r3, [r3, #0]
   2114a:	b2db      	uxtb	r3, r3
   2114c:	2b07      	cmp	r3, #7
   2114e:	d120      	bne.n	21192 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   21150:	4b29      	ldr	r3, [pc, #164]	; (211f8 <hif_isr+0x398>)
   21152:	69db      	ldr	r3, [r3, #28]
   21154:	2b00      	cmp	r3, #0
   21156:	d00d      	beq.n	21174 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21158:	4b27      	ldr	r3, [pc, #156]	; (211f8 <hif_isr+0x398>)
   2115a:	69db      	ldr	r3, [r3, #28]
   2115c:	1d3a      	adds	r2, r7, #4
   2115e:	7852      	ldrb	r2, [r2, #1]
   21160:	b2d0      	uxtb	r0, r2
   21162:	1d3a      	adds	r2, r7, #4
   21164:	8852      	ldrh	r2, [r2, #2]
   21166:	b292      	uxth	r2, r2
   21168:	3a08      	subs	r2, #8
   2116a:	b291      	uxth	r1, r2
   2116c:	683a      	ldr	r2, [r7, #0]
   2116e:	3208      	adds	r2, #8
   21170:	4798      	blx	r3
   21172:	e063      	b.n	2123c <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   21174:	4a2e      	ldr	r2, [pc, #184]	; (21230 <hif_isr+0x3d0>)
   21176:	4922      	ldr	r1, [pc, #136]	; (21200 <hif_isr+0x3a0>)
   21178:	4b22      	ldr	r3, [pc, #136]	; (21204 <hif_isr+0x3a4>)
   2117a:	0018      	movs	r0, r3
   2117c:	4b22      	ldr	r3, [pc, #136]	; (21208 <hif_isr+0x3a8>)
   2117e:	4798      	blx	r3
   21180:	4b2c      	ldr	r3, [pc, #176]	; (21234 <hif_isr+0x3d4>)
   21182:	0018      	movs	r0, r3
   21184:	4b20      	ldr	r3, [pc, #128]	; (21208 <hif_isr+0x3a8>)
   21186:	4798      	blx	r3
   21188:	4b21      	ldr	r3, [pc, #132]	; (21210 <hif_isr+0x3b0>)
   2118a:	0018      	movs	r0, r3
   2118c:	4b1e      	ldr	r3, [pc, #120]	; (21208 <hif_isr+0x3a8>)
   2118e:	4798      	blx	r3
   21190:	e054      	b.n	2123c <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   21192:	1d3b      	adds	r3, r7, #4
   21194:	781b      	ldrb	r3, [r3, #0]
   21196:	b2db      	uxtb	r3, r3
   21198:	2b05      	cmp	r3, #5
   2119a:	d111      	bne.n	211c0 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   2119c:	4b16      	ldr	r3, [pc, #88]	; (211f8 <hif_isr+0x398>)
   2119e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   211a0:	2b00      	cmp	r3, #0
   211a2:	d04b      	beq.n	2123c <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   211a4:	4b14      	ldr	r3, [pc, #80]	; (211f8 <hif_isr+0x398>)
   211a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   211a8:	1d3a      	adds	r2, r7, #4
   211aa:	7852      	ldrb	r2, [r2, #1]
   211ac:	b2d0      	uxtb	r0, r2
   211ae:	1d3a      	adds	r2, r7, #4
   211b0:	8852      	ldrh	r2, [r2, #2]
   211b2:	b292      	uxth	r2, r2
   211b4:	3a08      	subs	r2, #8
   211b6:	b291      	uxth	r1, r2
   211b8:	683a      	ldr	r2, [r7, #0]
   211ba:	3208      	adds	r2, #8
   211bc:	4798      	blx	r3
   211be:	e03d      	b.n	2123c <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   211c0:	2384      	movs	r3, #132	; 0x84
   211c2:	009a      	lsls	r2, r3, #2
   211c4:	490e      	ldr	r1, [pc, #56]	; (21200 <hif_isr+0x3a0>)
   211c6:	4b0f      	ldr	r3, [pc, #60]	; (21204 <hif_isr+0x3a4>)
   211c8:	0018      	movs	r0, r3
   211ca:	4b0f      	ldr	r3, [pc, #60]	; (21208 <hif_isr+0x3a8>)
   211cc:	4798      	blx	r3
   211ce:	4b1a      	ldr	r3, [pc, #104]	; (21238 <hif_isr+0x3d8>)
   211d0:	0018      	movs	r0, r3
   211d2:	4b0d      	ldr	r3, [pc, #52]	; (21208 <hif_isr+0x3a8>)
   211d4:	4798      	blx	r3
   211d6:	4b0e      	ldr	r3, [pc, #56]	; (21210 <hif_isr+0x3b0>)
   211d8:	0018      	movs	r0, r3
   211da:	4b0b      	ldr	r3, [pc, #44]	; (21208 <hif_isr+0x3a8>)
   211dc:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   211de:	230f      	movs	r3, #15
   211e0:	18fb      	adds	r3, r7, r3
   211e2:	22fa      	movs	r2, #250	; 0xfa
   211e4:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   211e6:	e083      	b.n	212f0 <hif_isr+0x490>
   211e8:	00001070 	.word	0x00001070
   211ec:	000228ed 	.word	0x000228ed
   211f0:	00020011 	.word	0x00020011
   211f4:	00022911 	.word	0x00022911
   211f8:	20005904 	.word	0x20005904
   211fc:	00001084 	.word	0x00001084
   21200:	00038314 	.word	0x00038314
   21204:	00038004 	.word	0x00038004
   21208:	0001db29 	.word	0x0001db29
   2120c:	00038038 	.word	0x00038038
   21210:	00038000 	.word	0x00038000
   21214:	00022961 	.word	0x00022961
   21218:	00038060 	.word	0x00038060
   2121c:	00038078 	.word	0x00038078
   21220:	000380b8 	.word	0x000380b8
   21224:	000380dc 	.word	0x000380dc
   21228:	00038100 	.word	0x00038100
   2122c:	00038120 	.word	0x00038120
   21230:	00000207 	.word	0x00000207
   21234:	00038144 	.word	0x00038144
   21238:	00038168 	.word	0x00038168
				}
				if(gstrHifCxt.u8HifRXDone)
   2123c:	4b30      	ldr	r3, [pc, #192]	; (21300 <hif_isr+0x4a0>)
   2123e:	789b      	ldrb	r3, [r3, #2]
   21240:	b2db      	uxtb	r3, r3
   21242:	2b00      	cmp	r3, #0
   21244:	d054      	beq.n	212f0 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   21246:	4a2f      	ldr	r2, [pc, #188]	; (21304 <hif_isr+0x4a4>)
   21248:	492f      	ldr	r1, [pc, #188]	; (21308 <hif_isr+0x4a8>)
   2124a:	4b30      	ldr	r3, [pc, #192]	; (2130c <hif_isr+0x4ac>)
   2124c:	0018      	movs	r0, r3
   2124e:	4b30      	ldr	r3, [pc, #192]	; (21310 <hif_isr+0x4b0>)
   21250:	4798      	blx	r3
   21252:	1d3b      	adds	r3, r7, #4
   21254:	781b      	ldrb	r3, [r3, #0]
   21256:	b2db      	uxtb	r3, r3
   21258:	0019      	movs	r1, r3
   2125a:	1d3b      	adds	r3, r7, #4
   2125c:	785b      	ldrb	r3, [r3, #1]
   2125e:	b2db      	uxtb	r3, r3
   21260:	001a      	movs	r2, r3
   21262:	4b2c      	ldr	r3, [pc, #176]	; (21314 <hif_isr+0x4b4>)
   21264:	0018      	movs	r0, r3
   21266:	4b2a      	ldr	r3, [pc, #168]	; (21310 <hif_isr+0x4b0>)
   21268:	4798      	blx	r3
   2126a:	4b2b      	ldr	r3, [pc, #172]	; (21318 <hif_isr+0x4b8>)
   2126c:	0018      	movs	r0, r3
   2126e:	4b28      	ldr	r3, [pc, #160]	; (21310 <hif_isr+0x4b0>)
   21270:	4798      	blx	r3
					ret = hif_set_rx_done();
   21272:	230f      	movs	r3, #15
   21274:	18fc      	adds	r4, r7, r3
   21276:	4b29      	ldr	r3, [pc, #164]	; (2131c <hif_isr+0x4bc>)
   21278:	4798      	blx	r3
   2127a:	0003      	movs	r3, r0
   2127c:	7023      	strb	r3, [r4, #0]
   2127e:	e037      	b.n	212f0 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   21280:	4a27      	ldr	r2, [pc, #156]	; (21320 <hif_isr+0x4c0>)
   21282:	4921      	ldr	r1, [pc, #132]	; (21308 <hif_isr+0x4a8>)
   21284:	4b21      	ldr	r3, [pc, #132]	; (2130c <hif_isr+0x4ac>)
   21286:	0018      	movs	r0, r3
   21288:	4b21      	ldr	r3, [pc, #132]	; (21310 <hif_isr+0x4b0>)
   2128a:	4798      	blx	r3
   2128c:	4b25      	ldr	r3, [pc, #148]	; (21324 <hif_isr+0x4c4>)
   2128e:	0018      	movs	r0, r3
   21290:	4b1f      	ldr	r3, [pc, #124]	; (21310 <hif_isr+0x4b0>)
   21292:	4798      	blx	r3
   21294:	4b20      	ldr	r3, [pc, #128]	; (21318 <hif_isr+0x4b8>)
   21296:	0018      	movs	r0, r3
   21298:	4b1d      	ldr	r3, [pc, #116]	; (21310 <hif_isr+0x4b0>)
   2129a:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   2129c:	230f      	movs	r3, #15
   2129e:	18fb      	adds	r3, r7, r3
   212a0:	22fe      	movs	r2, #254	; 0xfe
   212a2:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   212a4:	e024      	b.n	212f0 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   212a6:	4a20      	ldr	r2, [pc, #128]	; (21328 <hif_isr+0x4c8>)
   212a8:	4917      	ldr	r1, [pc, #92]	; (21308 <hif_isr+0x4a8>)
   212aa:	4b18      	ldr	r3, [pc, #96]	; (2130c <hif_isr+0x4ac>)
   212ac:	0018      	movs	r0, r3
   212ae:	4b18      	ldr	r3, [pc, #96]	; (21310 <hif_isr+0x4b0>)
   212b0:	4798      	blx	r3
   212b2:	68ba      	ldr	r2, [r7, #8]
   212b4:	4b1d      	ldr	r3, [pc, #116]	; (2132c <hif_isr+0x4cc>)
   212b6:	0011      	movs	r1, r2
   212b8:	0018      	movs	r0, r3
   212ba:	4b15      	ldr	r3, [pc, #84]	; (21310 <hif_isr+0x4b0>)
   212bc:	4798      	blx	r3
   212be:	4b16      	ldr	r3, [pc, #88]	; (21318 <hif_isr+0x4b8>)
   212c0:	0018      	movs	r0, r3
   212c2:	4b13      	ldr	r3, [pc, #76]	; (21310 <hif_isr+0x4b0>)
   212c4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   212c6:	230f      	movs	r3, #15
   212c8:	18fb      	adds	r3, r7, r3
   212ca:	22f4      	movs	r2, #244	; 0xf4
   212cc:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   212ce:	e00f      	b.n	212f0 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   212d0:	4a17      	ldr	r2, [pc, #92]	; (21330 <hif_isr+0x4d0>)
   212d2:	490d      	ldr	r1, [pc, #52]	; (21308 <hif_isr+0x4a8>)
   212d4:	4b0d      	ldr	r3, [pc, #52]	; (2130c <hif_isr+0x4ac>)
   212d6:	0018      	movs	r0, r3
   212d8:	4b0d      	ldr	r3, [pc, #52]	; (21310 <hif_isr+0x4b0>)
   212da:	4798      	blx	r3
   212dc:	4b15      	ldr	r3, [pc, #84]	; (21334 <hif_isr+0x4d4>)
   212de:	0018      	movs	r0, r3
   212e0:	4b0b      	ldr	r3, [pc, #44]	; (21310 <hif_isr+0x4b0>)
   212e2:	4798      	blx	r3
   212e4:	4b0c      	ldr	r3, [pc, #48]	; (21318 <hif_isr+0x4b8>)
   212e6:	0018      	movs	r0, r3
   212e8:	4b09      	ldr	r3, [pc, #36]	; (21310 <hif_isr+0x4b0>)
   212ea:	4798      	blx	r3
		goto ERR1;
   212ec:	e000      	b.n	212f0 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   212ee:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   212f0:	230f      	movs	r3, #15
   212f2:	18fb      	adds	r3, r7, r3
   212f4:	781b      	ldrb	r3, [r3, #0]
   212f6:	b25b      	sxtb	r3, r3
}
   212f8:	0018      	movs	r0, r3
   212fa:	46bd      	mov	sp, r7
   212fc:	b005      	add	sp, #20
   212fe:	bd90      	pop	{r4, r7, pc}
   21300:	20005904 	.word	0x20005904
   21304:	00000216 	.word	0x00000216
   21308:	00038314 	.word	0x00038314
   2130c:	00038004 	.word	0x00038004
   21310:	0001db29 	.word	0x0001db29
   21314:	00038180 	.word	0x00038180
   21318:	00038000 	.word	0x00038000
   2131c:	000208f5 	.word	0x000208f5
   21320:	0000021d 	.word	0x0000021d
   21324:	000381ac 	.word	0x000381ac
   21328:	00000225 	.word	0x00000225
   2132c:	000381c0 	.word	0x000381c0
   21330:	0000022e 	.word	0x0000022e
   21334:	000381dc 	.word	0x000381dc

00021338 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   21338:	b590      	push	{r4, r7, lr}
   2133a:	b083      	sub	sp, #12
   2133c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   2133e:	1dfb      	adds	r3, r7, #7
   21340:	2200      	movs	r2, #0
   21342:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   21344:	4b1c      	ldr	r3, [pc, #112]	; (213b8 <hif_handle_isr+0x80>)
   21346:	2200      	movs	r2, #0
   21348:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2134a:	e024      	b.n	21396 <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   2134c:	4b1a      	ldr	r3, [pc, #104]	; (213b8 <hif_handle_isr+0x80>)
   2134e:	78db      	ldrb	r3, [r3, #3]
   21350:	b2db      	uxtb	r3, r3
   21352:	3b01      	subs	r3, #1
   21354:	b2da      	uxtb	r2, r3
   21356:	4b18      	ldr	r3, [pc, #96]	; (213b8 <hif_handle_isr+0x80>)
   21358:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   2135a:	1dfc      	adds	r4, r7, #7
   2135c:	4b17      	ldr	r3, [pc, #92]	; (213bc <hif_handle_isr+0x84>)
   2135e:	4798      	blx	r3
   21360:	0003      	movs	r3, r0
   21362:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   21364:	1dfb      	adds	r3, r7, #7
   21366:	781b      	ldrb	r3, [r3, #0]
   21368:	b25b      	sxtb	r3, r3
   2136a:	2b00      	cmp	r3, #0
   2136c:	d100      	bne.n	21370 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   2136e:	e012      	b.n	21396 <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   21370:	4a13      	ldr	r2, [pc, #76]	; (213c0 <hif_handle_isr+0x88>)
   21372:	4914      	ldr	r1, [pc, #80]	; (213c4 <hif_handle_isr+0x8c>)
   21374:	4b14      	ldr	r3, [pc, #80]	; (213c8 <hif_handle_isr+0x90>)
   21376:	0018      	movs	r0, r3
   21378:	4b14      	ldr	r3, [pc, #80]	; (213cc <hif_handle_isr+0x94>)
   2137a:	4798      	blx	r3
   2137c:	1dfb      	adds	r3, r7, #7
   2137e:	2200      	movs	r2, #0
   21380:	569a      	ldrsb	r2, [r3, r2]
   21382:	4b13      	ldr	r3, [pc, #76]	; (213d0 <hif_handle_isr+0x98>)
   21384:	0011      	movs	r1, r2
   21386:	0018      	movs	r0, r3
   21388:	4b10      	ldr	r3, [pc, #64]	; (213cc <hif_handle_isr+0x94>)
   2138a:	4798      	blx	r3
   2138c:	4b11      	ldr	r3, [pc, #68]	; (213d4 <hif_handle_isr+0x9c>)
   2138e:	0018      	movs	r0, r3
   21390:	4b0e      	ldr	r3, [pc, #56]	; (213cc <hif_handle_isr+0x94>)
   21392:	4798      	blx	r3
			ret = hif_isr();
   21394:	e7e1      	b.n	2135a <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   21396:	4b08      	ldr	r3, [pc, #32]	; (213b8 <hif_handle_isr+0x80>)
   21398:	78db      	ldrb	r3, [r3, #3]
   2139a:	b2db      	uxtb	r3, r3
   2139c:	2b00      	cmp	r3, #0
   2139e:	d004      	beq.n	213aa <hif_handle_isr+0x72>
   213a0:	4b05      	ldr	r3, [pc, #20]	; (213b8 <hif_handle_isr+0x80>)
   213a2:	791b      	ldrb	r3, [r3, #4]
   213a4:	b2db      	uxtb	r3, r3
   213a6:	2b00      	cmp	r3, #0
   213a8:	d0d0      	beq.n	2134c <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   213aa:	1dfb      	adds	r3, r7, #7
   213ac:	781b      	ldrb	r3, [r3, #0]
   213ae:	b25b      	sxtb	r3, r3
}
   213b0:	0018      	movs	r0, r3
   213b2:	46bd      	mov	sp, r7
   213b4:	b003      	add	sp, #12
   213b6:	bd90      	pop	{r4, r7, pc}
   213b8:	20005904 	.word	0x20005904
   213bc:	00020e61 	.word	0x00020e61
   213c0:	00000257 	.word	0x00000257
   213c4:	0003831c 	.word	0x0003831c
   213c8:	00038004 	.word	0x00038004
   213cc:	0001db29 	.word	0x0001db29
   213d0:	00038200 	.word	0x00038200
   213d4:	00038000 	.word	0x00038000

000213d8 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   213d8:	b590      	push	{r4, r7, lr}
   213da:	b087      	sub	sp, #28
   213dc:	af00      	add	r7, sp, #0
   213de:	60f8      	str	r0, [r7, #12]
   213e0:	60b9      	str	r1, [r7, #8]
   213e2:	0019      	movs	r1, r3
   213e4:	1dbb      	adds	r3, r7, #6
   213e6:	801a      	strh	r2, [r3, #0]
   213e8:	1d7b      	adds	r3, r7, #5
   213ea:	1c0a      	adds	r2, r1, #0
   213ec:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   213ee:	2317      	movs	r3, #23
   213f0:	18fb      	adds	r3, r7, r3
   213f2:	2200      	movs	r2, #0
   213f4:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   213f6:	68fb      	ldr	r3, [r7, #12]
   213f8:	2b00      	cmp	r3, #0
   213fa:	d006      	beq.n	2140a <hif_receive+0x32>
   213fc:	68bb      	ldr	r3, [r7, #8]
   213fe:	2b00      	cmp	r3, #0
   21400:	d003      	beq.n	2140a <hif_receive+0x32>
   21402:	1dbb      	adds	r3, r7, #6
   21404:	881b      	ldrh	r3, [r3, #0]
   21406:	2b00      	cmp	r3, #0
   21408:	d11e      	bne.n	21448 <hif_receive+0x70>
	{
		if(isDone)
   2140a:	1d7b      	adds	r3, r7, #5
   2140c:	781b      	ldrb	r3, [r3, #0]
   2140e:	2b00      	cmp	r3, #0
   21410:	d006      	beq.n	21420 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   21412:	2317      	movs	r3, #23
   21414:	18fc      	adds	r4, r7, r3
   21416:	4b45      	ldr	r3, [pc, #276]	; (2152c <hif_receive+0x154>)
   21418:	4798      	blx	r3
   2141a:	0003      	movs	r3, r0
   2141c:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   2141e:	e07c      	b.n	2151a <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   21420:	2317      	movs	r3, #23
   21422:	18fb      	adds	r3, r7, r3
   21424:	22f4      	movs	r2, #244	; 0xf4
   21426:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   21428:	239e      	movs	r3, #158	; 0x9e
   2142a:	009a      	lsls	r2, r3, #2
   2142c:	4940      	ldr	r1, [pc, #256]	; (21530 <hif_receive+0x158>)
   2142e:	4b41      	ldr	r3, [pc, #260]	; (21534 <hif_receive+0x15c>)
   21430:	0018      	movs	r0, r3
   21432:	4b41      	ldr	r3, [pc, #260]	; (21538 <hif_receive+0x160>)
   21434:	4798      	blx	r3
   21436:	4b41      	ldr	r3, [pc, #260]	; (2153c <hif_receive+0x164>)
   21438:	0018      	movs	r0, r3
   2143a:	4b3f      	ldr	r3, [pc, #252]	; (21538 <hif_receive+0x160>)
   2143c:	4798      	blx	r3
   2143e:	4b40      	ldr	r3, [pc, #256]	; (21540 <hif_receive+0x168>)
   21440:	0018      	movs	r0, r3
   21442:	4b3d      	ldr	r3, [pc, #244]	; (21538 <hif_receive+0x160>)
   21444:	4798      	blx	r3
		goto ERR1;
   21446:	e068      	b.n	2151a <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   21448:	1dbb      	adds	r3, r7, #6
   2144a:	881a      	ldrh	r2, [r3, #0]
   2144c:	4b3d      	ldr	r3, [pc, #244]	; (21544 <hif_receive+0x16c>)
   2144e:	68db      	ldr	r3, [r3, #12]
   21450:	429a      	cmp	r2, r3
   21452:	d917      	bls.n	21484 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   21454:	2317      	movs	r3, #23
   21456:	18fb      	adds	r3, r7, r3
   21458:	22f4      	movs	r2, #244	; 0xf4
   2145a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   2145c:	23a0      	movs	r3, #160	; 0xa0
   2145e:	009a      	lsls	r2, r3, #2
   21460:	4933      	ldr	r1, [pc, #204]	; (21530 <hif_receive+0x158>)
   21462:	4b34      	ldr	r3, [pc, #208]	; (21534 <hif_receive+0x15c>)
   21464:	0018      	movs	r0, r3
   21466:	4b34      	ldr	r3, [pc, #208]	; (21538 <hif_receive+0x160>)
   21468:	4798      	blx	r3
   2146a:	1dbb      	adds	r3, r7, #6
   2146c:	8819      	ldrh	r1, [r3, #0]
   2146e:	4b35      	ldr	r3, [pc, #212]	; (21544 <hif_receive+0x16c>)
   21470:	68da      	ldr	r2, [r3, #12]
   21472:	4b35      	ldr	r3, [pc, #212]	; (21548 <hif_receive+0x170>)
   21474:	0018      	movs	r0, r3
   21476:	4b30      	ldr	r3, [pc, #192]	; (21538 <hif_receive+0x160>)
   21478:	4798      	blx	r3
   2147a:	4b31      	ldr	r3, [pc, #196]	; (21540 <hif_receive+0x168>)
   2147c:	0018      	movs	r0, r3
   2147e:	4b2e      	ldr	r3, [pc, #184]	; (21538 <hif_receive+0x160>)
   21480:	4798      	blx	r3
		goto ERR1;
   21482:	e04a      	b.n	2151a <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   21484:	4b2f      	ldr	r3, [pc, #188]	; (21544 <hif_receive+0x16c>)
   21486:	689a      	ldr	r2, [r3, #8]
   21488:	68fb      	ldr	r3, [r7, #12]
   2148a:	429a      	cmp	r2, r3
   2148c:	d80a      	bhi.n	214a4 <hif_receive+0xcc>
   2148e:	1dbb      	adds	r3, r7, #6
   21490:	881a      	ldrh	r2, [r3, #0]
   21492:	68fb      	ldr	r3, [r7, #12]
   21494:	18d2      	adds	r2, r2, r3
   21496:	4b2b      	ldr	r3, [pc, #172]	; (21544 <hif_receive+0x16c>)
   21498:	6899      	ldr	r1, [r3, #8]
   2149a:	4b2a      	ldr	r3, [pc, #168]	; (21544 <hif_receive+0x16c>)
   2149c:	68db      	ldr	r3, [r3, #12]
   2149e:	18cb      	adds	r3, r1, r3
   214a0:	429a      	cmp	r2, r3
   214a2:	d912      	bls.n	214ca <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   214a4:	2317      	movs	r3, #23
   214a6:	18fb      	adds	r3, r7, r3
   214a8:	22f4      	movs	r2, #244	; 0xf4
   214aa:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   214ac:	4a27      	ldr	r2, [pc, #156]	; (2154c <hif_receive+0x174>)
   214ae:	4920      	ldr	r1, [pc, #128]	; (21530 <hif_receive+0x158>)
   214b0:	4b20      	ldr	r3, [pc, #128]	; (21534 <hif_receive+0x15c>)
   214b2:	0018      	movs	r0, r3
   214b4:	4b20      	ldr	r3, [pc, #128]	; (21538 <hif_receive+0x160>)
   214b6:	4798      	blx	r3
   214b8:	4b25      	ldr	r3, [pc, #148]	; (21550 <hif_receive+0x178>)
   214ba:	0018      	movs	r0, r3
   214bc:	4b1e      	ldr	r3, [pc, #120]	; (21538 <hif_receive+0x160>)
   214be:	4798      	blx	r3
   214c0:	4b1f      	ldr	r3, [pc, #124]	; (21540 <hif_receive+0x168>)
   214c2:	0018      	movs	r0, r3
   214c4:	4b1c      	ldr	r3, [pc, #112]	; (21538 <hif_receive+0x160>)
   214c6:	4798      	blx	r3
		goto ERR1;
   214c8:	e027      	b.n	2151a <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   214ca:	1dbb      	adds	r3, r7, #6
   214cc:	881a      	ldrh	r2, [r3, #0]
   214ce:	2317      	movs	r3, #23
   214d0:	18fc      	adds	r4, r7, r3
   214d2:	68b9      	ldr	r1, [r7, #8]
   214d4:	68fb      	ldr	r3, [r7, #12]
   214d6:	0018      	movs	r0, r3
   214d8:	4b1e      	ldr	r3, [pc, #120]	; (21554 <hif_receive+0x17c>)
   214da:	4798      	blx	r3
   214dc:	0003      	movs	r3, r0
   214de:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   214e0:	2317      	movs	r3, #23
   214e2:	18fb      	adds	r3, r7, r3
   214e4:	781b      	ldrb	r3, [r3, #0]
   214e6:	b25b      	sxtb	r3, r3
   214e8:	2b00      	cmp	r3, #0
   214ea:	d115      	bne.n	21518 <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   214ec:	4b15      	ldr	r3, [pc, #84]	; (21544 <hif_receive+0x16c>)
   214ee:	689a      	ldr	r2, [r3, #8]
   214f0:	4b14      	ldr	r3, [pc, #80]	; (21544 <hif_receive+0x16c>)
   214f2:	68db      	ldr	r3, [r3, #12]
   214f4:	18d2      	adds	r2, r2, r3
   214f6:	1dbb      	adds	r3, r7, #6
   214f8:	8819      	ldrh	r1, [r3, #0]
   214fa:	68fb      	ldr	r3, [r7, #12]
   214fc:	18cb      	adds	r3, r1, r3
   214fe:	429a      	cmp	r2, r3
   21500:	d003      	beq.n	2150a <hif_receive+0x132>
   21502:	1d7b      	adds	r3, r7, #5
   21504:	781b      	ldrb	r3, [r3, #0]
   21506:	2b00      	cmp	r3, #0
   21508:	d007      	beq.n	2151a <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   2150a:	2317      	movs	r3, #23
   2150c:	18fc      	adds	r4, r7, r3
   2150e:	4b07      	ldr	r3, [pc, #28]	; (2152c <hif_receive+0x154>)
   21510:	4798      	blx	r3
   21512:	0003      	movs	r3, r0
   21514:	7023      	strb	r3, [r4, #0]
   21516:	e000      	b.n	2151a <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   21518:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2151a:	2317      	movs	r3, #23
   2151c:	18fb      	adds	r3, r7, r3
   2151e:	781b      	ldrb	r3, [r3, #0]
   21520:	b25b      	sxtb	r3, r3
}
   21522:	0018      	movs	r0, r3
   21524:	46bd      	mov	sp, r7
   21526:	b007      	add	sp, #28
   21528:	bd90      	pop	{r4, r7, pc}
   2152a:	46c0      	nop			; (mov r8, r8)
   2152c:	000208f5 	.word	0x000208f5
   21530:	0003832c 	.word	0x0003832c
   21534:	00038004 	.word	0x00038004
   21538:	0001db29 	.word	0x0001db29
   2153c:	00038230 	.word	0x00038230
   21540:	00038000 	.word	0x00038000
   21544:	20005904 	.word	0x20005904
   21548:	00038250 	.word	0x00038250
   2154c:	00000286 	.word	0x00000286
   21550:	00038298 	.word	0x00038298
   21554:	00022961 	.word	0x00022961

00021558 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   21558:	b580      	push	{r7, lr}
   2155a:	b084      	sub	sp, #16
   2155c:	af00      	add	r7, sp, #0
   2155e:	0002      	movs	r2, r0
   21560:	6039      	str	r1, [r7, #0]
   21562:	1dfb      	adds	r3, r7, #7
   21564:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21566:	230f      	movs	r3, #15
   21568:	18fb      	adds	r3, r7, r3
   2156a:	2200      	movs	r2, #0
   2156c:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   2156e:	1dfb      	adds	r3, r7, #7
   21570:	781b      	ldrb	r3, [r3, #0]
   21572:	2b07      	cmp	r3, #7
   21574:	d820      	bhi.n	215b8 <hif_register_cb+0x60>
   21576:	009a      	lsls	r2, r3, #2
   21578:	4b1e      	ldr	r3, [pc, #120]	; (215f4 <hif_register_cb+0x9c>)
   2157a:	18d3      	adds	r3, r2, r3
   2157c:	681b      	ldr	r3, [r3, #0]
   2157e:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   21580:	4b1d      	ldr	r3, [pc, #116]	; (215f8 <hif_register_cb+0xa0>)
   21582:	683a      	ldr	r2, [r7, #0]
   21584:	615a      	str	r2, [r3, #20]
			break;
   21586:	e02d      	b.n	215e4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   21588:	4b1b      	ldr	r3, [pc, #108]	; (215f8 <hif_register_cb+0xa0>)
   2158a:	683a      	ldr	r2, [r7, #0]
   2158c:	611a      	str	r2, [r3, #16]
			break;
   2158e:	e029      	b.n	215e4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   21590:	4b19      	ldr	r3, [pc, #100]	; (215f8 <hif_register_cb+0xa0>)
   21592:	683a      	ldr	r2, [r7, #0]
   21594:	619a      	str	r2, [r3, #24]
			break;
   21596:	e025      	b.n	215e4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   21598:	4b17      	ldr	r3, [pc, #92]	; (215f8 <hif_register_cb+0xa0>)
   2159a:	683a      	ldr	r2, [r7, #0]
   2159c:	621a      	str	r2, [r3, #32]
			break;
   2159e:	e021      	b.n	215e4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   215a0:	4b15      	ldr	r3, [pc, #84]	; (215f8 <hif_register_cb+0xa0>)
   215a2:	683a      	ldr	r2, [r7, #0]
   215a4:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   215a6:	e01d      	b.n	215e4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   215a8:	4b13      	ldr	r3, [pc, #76]	; (215f8 <hif_register_cb+0xa0>)
   215aa:	683a      	ldr	r2, [r7, #0]
   215ac:	61da      	str	r2, [r3, #28]
			break;
   215ae:	e019      	b.n	215e4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   215b0:	4b11      	ldr	r3, [pc, #68]	; (215f8 <hif_register_cb+0xa0>)
   215b2:	683a      	ldr	r2, [r7, #0]
   215b4:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   215b6:	e015      	b.n	215e4 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   215b8:	4a10      	ldr	r2, [pc, #64]	; (215fc <hif_register_cb+0xa4>)
   215ba:	4911      	ldr	r1, [pc, #68]	; (21600 <hif_register_cb+0xa8>)
   215bc:	4b11      	ldr	r3, [pc, #68]	; (21604 <hif_register_cb+0xac>)
   215be:	0018      	movs	r0, r3
   215c0:	4b11      	ldr	r3, [pc, #68]	; (21608 <hif_register_cb+0xb0>)
   215c2:	4798      	blx	r3
   215c4:	1dfb      	adds	r3, r7, #7
   215c6:	781a      	ldrb	r2, [r3, #0]
   215c8:	4b10      	ldr	r3, [pc, #64]	; (2160c <hif_register_cb+0xb4>)
   215ca:	0011      	movs	r1, r2
   215cc:	0018      	movs	r0, r3
   215ce:	4b0e      	ldr	r3, [pc, #56]	; (21608 <hif_register_cb+0xb0>)
   215d0:	4798      	blx	r3
   215d2:	4b0f      	ldr	r3, [pc, #60]	; (21610 <hif_register_cb+0xb8>)
   215d4:	0018      	movs	r0, r3
   215d6:	4b0c      	ldr	r3, [pc, #48]	; (21608 <hif_register_cb+0xb0>)
   215d8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   215da:	230f      	movs	r3, #15
   215dc:	18fb      	adds	r3, r7, r3
   215de:	22f4      	movs	r2, #244	; 0xf4
   215e0:	701a      	strb	r2, [r3, #0]
			break;
   215e2:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   215e4:	230f      	movs	r3, #15
   215e6:	18fb      	adds	r3, r7, r3
   215e8:	781b      	ldrb	r3, [r3, #0]
   215ea:	b25b      	sxtb	r3, r3
}
   215ec:	0018      	movs	r0, r3
   215ee:	46bd      	mov	sp, r7
   215f0:	b004      	add	sp, #16
   215f2:	bd80      	pop	{r7, pc}
   215f4:	000382e8 	.word	0x000382e8
   215f8:	20005904 	.word	0x20005904
   215fc:	000002be 	.word	0x000002be
   21600:	00038338 	.word	0x00038338
   21604:	00038004 	.word	0x00038004
   21608:	0001db29 	.word	0x0001db29
   2160c:	000382dc 	.word	0x000382dc
   21610:	00038000 	.word	0x00038000

00021614 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   21614:	b590      	push	{r4, r7, lr}
   21616:	b0af      	sub	sp, #188	; 0xbc
   21618:	af02      	add	r7, sp, #8
   2161a:	603a      	str	r2, [r7, #0]
   2161c:	1dfb      	adds	r3, r7, #7
   2161e:	1c02      	adds	r2, r0, #0
   21620:	701a      	strb	r2, [r3, #0]
   21622:	1d3b      	adds	r3, r7, #4
   21624:	1c0a      	adds	r2, r1, #0
   21626:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   21628:	1dfb      	adds	r3, r7, #7
   2162a:	781b      	ldrb	r3, [r3, #0]
   2162c:	2b2c      	cmp	r3, #44	; 0x2c
   2162e:	d116      	bne.n	2165e <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   21630:	23a4      	movs	r3, #164	; 0xa4
   21632:	18f9      	adds	r1, r7, r3
   21634:	6838      	ldr	r0, [r7, #0]
   21636:	2300      	movs	r3, #0
   21638:	2204      	movs	r2, #4
   2163a:	4cca      	ldr	r4, [pc, #808]	; (21964 <m2m_wifi_cb+0x350>)
   2163c:	47a0      	blx	r4
   2163e:	1e03      	subs	r3, r0, #0
   21640:	d000      	beq.n	21644 <m2m_wifi_cb+0x30>
   21642:	e1b4      	b.n	219ae <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   21644:	4bc8      	ldr	r3, [pc, #800]	; (21968 <m2m_wifi_cb+0x354>)
   21646:	681b      	ldr	r3, [r3, #0]
   21648:	2b00      	cmp	r3, #0
   2164a:	d100      	bne.n	2164e <m2m_wifi_cb+0x3a>
   2164c:	e1af      	b.n	219ae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   2164e:	4bc6      	ldr	r3, [pc, #792]	; (21968 <m2m_wifi_cb+0x354>)
   21650:	681b      	ldr	r3, [r3, #0]
   21652:	22a4      	movs	r2, #164	; 0xa4
   21654:	18ba      	adds	r2, r7, r2
   21656:	0011      	movs	r1, r2
   21658:	202c      	movs	r0, #44	; 0x2c
   2165a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   2165c:	e1a7      	b.n	219ae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   2165e:	1dfb      	adds	r3, r7, #7
   21660:	781b      	ldrb	r3, [r3, #0]
   21662:	2b1b      	cmp	r3, #27
   21664:	d116      	bne.n	21694 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   21666:	239c      	movs	r3, #156	; 0x9c
   21668:	18f9      	adds	r1, r7, r3
   2166a:	6838      	ldr	r0, [r7, #0]
   2166c:	2300      	movs	r3, #0
   2166e:	2208      	movs	r2, #8
   21670:	4cbc      	ldr	r4, [pc, #752]	; (21964 <m2m_wifi_cb+0x350>)
   21672:	47a0      	blx	r4
   21674:	1e03      	subs	r3, r0, #0
   21676:	d000      	beq.n	2167a <m2m_wifi_cb+0x66>
   21678:	e199      	b.n	219ae <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2167a:	4bbb      	ldr	r3, [pc, #748]	; (21968 <m2m_wifi_cb+0x354>)
   2167c:	681b      	ldr	r3, [r3, #0]
   2167e:	2b00      	cmp	r3, #0
   21680:	d100      	bne.n	21684 <m2m_wifi_cb+0x70>
   21682:	e194      	b.n	219ae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   21684:	4bb8      	ldr	r3, [pc, #736]	; (21968 <m2m_wifi_cb+0x354>)
   21686:	681b      	ldr	r3, [r3, #0]
   21688:	229c      	movs	r2, #156	; 0x9c
   2168a:	18ba      	adds	r2, r7, r2
   2168c:	0011      	movs	r1, r2
   2168e:	201b      	movs	r0, #27
   21690:	4798      	blx	r3
}
   21692:	e18c      	b.n	219ae <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   21694:	1dfb      	adds	r3, r7, #7
   21696:	781b      	ldrb	r3, [r3, #0]
   21698:	2b06      	cmp	r3, #6
   2169a:	d116      	bne.n	216ca <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   2169c:	230c      	movs	r3, #12
   2169e:	18f9      	adds	r1, r7, r3
   216a0:	6838      	ldr	r0, [r7, #0]
   216a2:	2301      	movs	r3, #1
   216a4:	2230      	movs	r2, #48	; 0x30
   216a6:	4caf      	ldr	r4, [pc, #700]	; (21964 <m2m_wifi_cb+0x350>)
   216a8:	47a0      	blx	r4
   216aa:	1e03      	subs	r3, r0, #0
   216ac:	d000      	beq.n	216b0 <m2m_wifi_cb+0x9c>
   216ae:	e17e      	b.n	219ae <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   216b0:	4bad      	ldr	r3, [pc, #692]	; (21968 <m2m_wifi_cb+0x354>)
   216b2:	681b      	ldr	r3, [r3, #0]
   216b4:	2b00      	cmp	r3, #0
   216b6:	d100      	bne.n	216ba <m2m_wifi_cb+0xa6>
   216b8:	e179      	b.n	219ae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   216ba:	4bab      	ldr	r3, [pc, #684]	; (21968 <m2m_wifi_cb+0x354>)
   216bc:	681b      	ldr	r3, [r3, #0]
   216be:	220c      	movs	r2, #12
   216c0:	18ba      	adds	r2, r7, r2
   216c2:	0011      	movs	r1, r2
   216c4:	2006      	movs	r0, #6
   216c6:	4798      	blx	r3
}
   216c8:	e171      	b.n	219ae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   216ca:	1dfb      	adds	r3, r7, #7
   216cc:	781b      	ldrb	r3, [r3, #0]
   216ce:	2b0e      	cmp	r3, #14
   216d0:	d100      	bne.n	216d4 <m2m_wifi_cb+0xc0>
   216d2:	e16c      	b.n	219ae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   216d4:	1dfb      	adds	r3, r7, #7
   216d6:	781b      	ldrb	r3, [r3, #0]
   216d8:	2b32      	cmp	r3, #50	; 0x32
   216da:	d116      	bne.n	2170a <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   216dc:	2384      	movs	r3, #132	; 0x84
   216de:	18f9      	adds	r1, r7, r3
   216e0:	6838      	ldr	r0, [r7, #0]
   216e2:	2300      	movs	r3, #0
   216e4:	2218      	movs	r2, #24
   216e6:	4c9f      	ldr	r4, [pc, #636]	; (21964 <m2m_wifi_cb+0x350>)
   216e8:	47a0      	blx	r4
   216ea:	1e03      	subs	r3, r0, #0
   216ec:	d000      	beq.n	216f0 <m2m_wifi_cb+0xdc>
   216ee:	e15e      	b.n	219ae <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   216f0:	4b9d      	ldr	r3, [pc, #628]	; (21968 <m2m_wifi_cb+0x354>)
   216f2:	681b      	ldr	r3, [r3, #0]
   216f4:	2b00      	cmp	r3, #0
   216f6:	d100      	bne.n	216fa <m2m_wifi_cb+0xe6>
   216f8:	e159      	b.n	219ae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   216fa:	4b9b      	ldr	r3, [pc, #620]	; (21968 <m2m_wifi_cb+0x354>)
   216fc:	681b      	ldr	r3, [r3, #0]
   216fe:	2284      	movs	r2, #132	; 0x84
   21700:	18ba      	adds	r2, r7, r2
   21702:	0011      	movs	r1, r2
   21704:	2032      	movs	r0, #50	; 0x32
   21706:	4798      	blx	r3
}
   21708:	e151      	b.n	219ae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   2170a:	1dfb      	adds	r3, r7, #7
   2170c:	781b      	ldrb	r3, [r3, #0]
   2170e:	2b2f      	cmp	r3, #47	; 0x2f
   21710:	d11d      	bne.n	2174e <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   21712:	230c      	movs	r3, #12
   21714:	18fb      	adds	r3, r7, r3
   21716:	2264      	movs	r2, #100	; 0x64
   21718:	2100      	movs	r1, #0
   2171a:	0018      	movs	r0, r3
   2171c:	4b93      	ldr	r3, [pc, #588]	; (2196c <m2m_wifi_cb+0x358>)
   2171e:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   21720:	230c      	movs	r3, #12
   21722:	18f9      	adds	r1, r7, r3
   21724:	6838      	ldr	r0, [r7, #0]
   21726:	2300      	movs	r3, #0
   21728:	2264      	movs	r2, #100	; 0x64
   2172a:	4c8e      	ldr	r4, [pc, #568]	; (21964 <m2m_wifi_cb+0x350>)
   2172c:	47a0      	blx	r4
   2172e:	1e03      	subs	r3, r0, #0
   21730:	d000      	beq.n	21734 <m2m_wifi_cb+0x120>
   21732:	e13c      	b.n	219ae <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21734:	4b8c      	ldr	r3, [pc, #560]	; (21968 <m2m_wifi_cb+0x354>)
   21736:	681b      	ldr	r3, [r3, #0]
   21738:	2b00      	cmp	r3, #0
   2173a:	d100      	bne.n	2173e <m2m_wifi_cb+0x12a>
   2173c:	e137      	b.n	219ae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   2173e:	4b8a      	ldr	r3, [pc, #552]	; (21968 <m2m_wifi_cb+0x354>)
   21740:	681b      	ldr	r3, [r3, #0]
   21742:	220c      	movs	r2, #12
   21744:	18ba      	adds	r2, r7, r2
   21746:	0011      	movs	r1, r2
   21748:	202f      	movs	r0, #47	; 0x2f
   2174a:	4798      	blx	r3
}
   2174c:	e12f      	b.n	219ae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   2174e:	1dfb      	adds	r3, r7, #7
   21750:	781b      	ldrb	r3, [r3, #0]
   21752:	2b34      	cmp	r3, #52	; 0x34
   21754:	d137      	bne.n	217c6 <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   21756:	2380      	movs	r3, #128	; 0x80
   21758:	18f9      	adds	r1, r7, r3
   2175a:	6838      	ldr	r0, [r7, #0]
   2175c:	2300      	movs	r3, #0
   2175e:	2204      	movs	r2, #4
   21760:	4c80      	ldr	r4, [pc, #512]	; (21964 <m2m_wifi_cb+0x350>)
   21762:	47a0      	blx	r4
   21764:	1e03      	subs	r3, r0, #0
   21766:	d000      	beq.n	2176a <m2m_wifi_cb+0x156>
   21768:	e121      	b.n	219ae <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   2176a:	4b81      	ldr	r3, [pc, #516]	; (21970 <m2m_wifi_cb+0x35c>)
   2176c:	0018      	movs	r0, r3
   2176e:	4b81      	ldr	r3, [pc, #516]	; (21974 <m2m_wifi_cb+0x360>)
   21770:	4798      	blx	r3
   21772:	2380      	movs	r3, #128	; 0x80
   21774:	18fb      	adds	r3, r7, r3
   21776:	681b      	ldr	r3, [r3, #0]
   21778:	0e1b      	lsrs	r3, r3, #24
   2177a:	b2db      	uxtb	r3, r3
   2177c:	0019      	movs	r1, r3
   2177e:	2380      	movs	r3, #128	; 0x80
   21780:	18fb      	adds	r3, r7, r3
   21782:	681b      	ldr	r3, [r3, #0]
   21784:	0c1b      	lsrs	r3, r3, #16
   21786:	b2db      	uxtb	r3, r3
   21788:	001a      	movs	r2, r3
   2178a:	2380      	movs	r3, #128	; 0x80
   2178c:	18fb      	adds	r3, r7, r3
   2178e:	681b      	ldr	r3, [r3, #0]
   21790:	0a1b      	lsrs	r3, r3, #8
   21792:	b2db      	uxtb	r3, r3
   21794:	001c      	movs	r4, r3
   21796:	2380      	movs	r3, #128	; 0x80
   21798:	18fb      	adds	r3, r7, r3
   2179a:	681b      	ldr	r3, [r3, #0]
   2179c:	b2db      	uxtb	r3, r3
   2179e:	4876      	ldr	r0, [pc, #472]	; (21978 <m2m_wifi_cb+0x364>)
   217a0:	9300      	str	r3, [sp, #0]
   217a2:	0023      	movs	r3, r4
   217a4:	4c73      	ldr	r4, [pc, #460]	; (21974 <m2m_wifi_cb+0x360>)
   217a6:	47a0      	blx	r4
   217a8:	4b74      	ldr	r3, [pc, #464]	; (2197c <m2m_wifi_cb+0x368>)
   217aa:	0018      	movs	r0, r3
   217ac:	4b71      	ldr	r3, [pc, #452]	; (21974 <m2m_wifi_cb+0x360>)
   217ae:	4798      	blx	r3
			if (gpfAppWifiCb)
   217b0:	4b6d      	ldr	r3, [pc, #436]	; (21968 <m2m_wifi_cb+0x354>)
   217b2:	681b      	ldr	r3, [r3, #0]
   217b4:	2b00      	cmp	r3, #0
   217b6:	d100      	bne.n	217ba <m2m_wifi_cb+0x1a6>
   217b8:	e0f9      	b.n	219ae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   217ba:	4b6b      	ldr	r3, [pc, #428]	; (21968 <m2m_wifi_cb+0x354>)
   217bc:	681b      	ldr	r3, [r3, #0]
   217be:	2100      	movs	r1, #0
   217c0:	2034      	movs	r0, #52	; 0x34
   217c2:	4798      	blx	r3
}
   217c4:	e0f3      	b.n	219ae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   217c6:	1dfb      	adds	r3, r7, #7
   217c8:	781b      	ldrb	r3, [r3, #0]
   217ca:	2b11      	cmp	r3, #17
   217cc:	d11e      	bne.n	2180c <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   217ce:	4b6c      	ldr	r3, [pc, #432]	; (21980 <m2m_wifi_cb+0x36c>)
   217d0:	2200      	movs	r2, #0
   217d2:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   217d4:	237c      	movs	r3, #124	; 0x7c
   217d6:	18f9      	adds	r1, r7, r3
   217d8:	6838      	ldr	r0, [r7, #0]
   217da:	2300      	movs	r3, #0
   217dc:	2204      	movs	r2, #4
   217de:	4c61      	ldr	r4, [pc, #388]	; (21964 <m2m_wifi_cb+0x350>)
   217e0:	47a0      	blx	r4
   217e2:	1e03      	subs	r3, r0, #0
   217e4:	d000      	beq.n	217e8 <m2m_wifi_cb+0x1d4>
   217e6:	e0e2      	b.n	219ae <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   217e8:	237c      	movs	r3, #124	; 0x7c
   217ea:	18fb      	adds	r3, r7, r3
   217ec:	781a      	ldrb	r2, [r3, #0]
   217ee:	4b65      	ldr	r3, [pc, #404]	; (21984 <m2m_wifi_cb+0x370>)
   217f0:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   217f2:	4b5d      	ldr	r3, [pc, #372]	; (21968 <m2m_wifi_cb+0x354>)
   217f4:	681b      	ldr	r3, [r3, #0]
   217f6:	2b00      	cmp	r3, #0
   217f8:	d100      	bne.n	217fc <m2m_wifi_cb+0x1e8>
   217fa:	e0d8      	b.n	219ae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   217fc:	4b5a      	ldr	r3, [pc, #360]	; (21968 <m2m_wifi_cb+0x354>)
   217fe:	681b      	ldr	r3, [r3, #0]
   21800:	227c      	movs	r2, #124	; 0x7c
   21802:	18ba      	adds	r2, r7, r2
   21804:	0011      	movs	r1, r2
   21806:	2011      	movs	r0, #17
   21808:	4798      	blx	r3
}
   2180a:	e0d0      	b.n	219ae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   2180c:	1dfb      	adds	r3, r7, #7
   2180e:	781b      	ldrb	r3, [r3, #0]
   21810:	2b13      	cmp	r3, #19
   21812:	d116      	bne.n	21842 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   21814:	230c      	movs	r3, #12
   21816:	18f9      	adds	r1, r7, r3
   21818:	6838      	ldr	r0, [r7, #0]
   2181a:	2300      	movs	r3, #0
   2181c:	222c      	movs	r2, #44	; 0x2c
   2181e:	4c51      	ldr	r4, [pc, #324]	; (21964 <m2m_wifi_cb+0x350>)
   21820:	47a0      	blx	r4
   21822:	1e03      	subs	r3, r0, #0
   21824:	d000      	beq.n	21828 <m2m_wifi_cb+0x214>
   21826:	e0c2      	b.n	219ae <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21828:	4b4f      	ldr	r3, [pc, #316]	; (21968 <m2m_wifi_cb+0x354>)
   2182a:	681b      	ldr	r3, [r3, #0]
   2182c:	2b00      	cmp	r3, #0
   2182e:	d100      	bne.n	21832 <m2m_wifi_cb+0x21e>
   21830:	e0bd      	b.n	219ae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   21832:	4b4d      	ldr	r3, [pc, #308]	; (21968 <m2m_wifi_cb+0x354>)
   21834:	681b      	ldr	r3, [r3, #0]
   21836:	220c      	movs	r2, #12
   21838:	18ba      	adds	r2, r7, r2
   2183a:	0011      	movs	r1, r2
   2183c:	2013      	movs	r0, #19
   2183e:	4798      	blx	r3
}
   21840:	e0b5      	b.n	219ae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   21842:	1dfb      	adds	r3, r7, #7
   21844:	781b      	ldrb	r3, [r3, #0]
   21846:	2b04      	cmp	r3, #4
   21848:	d116      	bne.n	21878 <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   2184a:	23a8      	movs	r3, #168	; 0xa8
   2184c:	18f9      	adds	r1, r7, r3
   2184e:	6838      	ldr	r0, [r7, #0]
   21850:	2300      	movs	r3, #0
   21852:	2204      	movs	r2, #4
   21854:	4c43      	ldr	r4, [pc, #268]	; (21964 <m2m_wifi_cb+0x350>)
   21856:	47a0      	blx	r4
   21858:	1e03      	subs	r3, r0, #0
   2185a:	d000      	beq.n	2185e <m2m_wifi_cb+0x24a>
   2185c:	e0a7      	b.n	219ae <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2185e:	4b42      	ldr	r3, [pc, #264]	; (21968 <m2m_wifi_cb+0x354>)
   21860:	681b      	ldr	r3, [r3, #0]
   21862:	2b00      	cmp	r3, #0
   21864:	d100      	bne.n	21868 <m2m_wifi_cb+0x254>
   21866:	e0a2      	b.n	219ae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   21868:	4b3f      	ldr	r3, [pc, #252]	; (21968 <m2m_wifi_cb+0x354>)
   2186a:	681b      	ldr	r3, [r3, #0]
   2186c:	22a8      	movs	r2, #168	; 0xa8
   2186e:	18ba      	adds	r2, r7, r2
   21870:	0011      	movs	r1, r2
   21872:	2004      	movs	r0, #4
   21874:	4798      	blx	r3
}
   21876:	e09a      	b.n	219ae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   21878:	1dfb      	adds	r3, r7, #7
   2187a:	781b      	ldrb	r3, [r3, #0]
   2187c:	2b65      	cmp	r3, #101	; 0x65
   2187e:	d116      	bne.n	218ae <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   21880:	23a8      	movs	r3, #168	; 0xa8
   21882:	18f9      	adds	r1, r7, r3
   21884:	6838      	ldr	r0, [r7, #0]
   21886:	2300      	movs	r3, #0
   21888:	2204      	movs	r2, #4
   2188a:	4c36      	ldr	r4, [pc, #216]	; (21964 <m2m_wifi_cb+0x350>)
   2188c:	47a0      	blx	r4
   2188e:	1e03      	subs	r3, r0, #0
   21890:	d000      	beq.n	21894 <m2m_wifi_cb+0x280>
   21892:	e08c      	b.n	219ae <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21894:	4b34      	ldr	r3, [pc, #208]	; (21968 <m2m_wifi_cb+0x354>)
   21896:	681b      	ldr	r3, [r3, #0]
   21898:	2b00      	cmp	r3, #0
   2189a:	d100      	bne.n	2189e <m2m_wifi_cb+0x28a>
   2189c:	e087      	b.n	219ae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   2189e:	4b32      	ldr	r3, [pc, #200]	; (21968 <m2m_wifi_cb+0x354>)
   218a0:	681b      	ldr	r3, [r3, #0]
   218a2:	22a8      	movs	r2, #168	; 0xa8
   218a4:	18ba      	adds	r2, r7, r2
   218a6:	0011      	movs	r1, r2
   218a8:	2065      	movs	r0, #101	; 0x65
   218aa:	4798      	blx	r3
}
   218ac:	e07f      	b.n	219ae <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   218ae:	1dfb      	adds	r3, r7, #7
   218b0:	781b      	ldrb	r3, [r3, #0]
   218b2:	2b09      	cmp	r3, #9
   218b4:	d116      	bne.n	218e4 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   218b6:	230c      	movs	r3, #12
   218b8:	18f9      	adds	r1, r7, r3
   218ba:	6838      	ldr	r0, [r7, #0]
   218bc:	2301      	movs	r3, #1
   218be:	2264      	movs	r2, #100	; 0x64
   218c0:	4c28      	ldr	r4, [pc, #160]	; (21964 <m2m_wifi_cb+0x350>)
   218c2:	47a0      	blx	r4
   218c4:	1e03      	subs	r3, r0, #0
   218c6:	d000      	beq.n	218ca <m2m_wifi_cb+0x2b6>
   218c8:	e071      	b.n	219ae <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   218ca:	4b27      	ldr	r3, [pc, #156]	; (21968 <m2m_wifi_cb+0x354>)
   218cc:	681b      	ldr	r3, [r3, #0]
   218ce:	2b00      	cmp	r3, #0
   218d0:	d100      	bne.n	218d4 <m2m_wifi_cb+0x2c0>
   218d2:	e06c      	b.n	219ae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   218d4:	4b24      	ldr	r3, [pc, #144]	; (21968 <m2m_wifi_cb+0x354>)
   218d6:	681b      	ldr	r3, [r3, #0]
   218d8:	220c      	movs	r2, #12
   218da:	18ba      	adds	r2, r7, r2
   218dc:	0011      	movs	r1, r2
   218de:	2009      	movs	r0, #9
   218e0:	4798      	blx	r3
}
   218e2:	e064      	b.n	219ae <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   218e4:	1dfb      	adds	r3, r7, #7
   218e6:	781b      	ldrb	r3, [r3, #0]
   218e8:	2b2a      	cmp	r3, #42	; 0x2a
   218ea:	d114      	bne.n	21916 <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   218ec:	2378      	movs	r3, #120	; 0x78
   218ee:	18f9      	adds	r1, r7, r3
   218f0:	6838      	ldr	r0, [r7, #0]
   218f2:	2301      	movs	r3, #1
   218f4:	2204      	movs	r2, #4
   218f6:	4c1b      	ldr	r4, [pc, #108]	; (21964 <m2m_wifi_cb+0x350>)
   218f8:	47a0      	blx	r4
   218fa:	1e03      	subs	r3, r0, #0
   218fc:	d157      	bne.n	219ae <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   218fe:	4b1a      	ldr	r3, [pc, #104]	; (21968 <m2m_wifi_cb+0x354>)
   21900:	681b      	ldr	r3, [r3, #0]
   21902:	2b00      	cmp	r3, #0
   21904:	d053      	beq.n	219ae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   21906:	4b18      	ldr	r3, [pc, #96]	; (21968 <m2m_wifi_cb+0x354>)
   21908:	681b      	ldr	r3, [r3, #0]
   2190a:	2278      	movs	r2, #120	; 0x78
   2190c:	18ba      	adds	r2, r7, r2
   2190e:	0011      	movs	r1, r2
   21910:	202a      	movs	r0, #42	; 0x2a
   21912:	4798      	blx	r3
}
   21914:	e04b      	b.n	219ae <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   21916:	1dfb      	adds	r3, r7, #7
   21918:	781b      	ldrb	r3, [r3, #0]
   2191a:	2b20      	cmp	r3, #32
   2191c:	d134      	bne.n	21988 <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   2191e:	2370      	movs	r3, #112	; 0x70
   21920:	18f9      	adds	r1, r7, r3
   21922:	6838      	ldr	r0, [r7, #0]
   21924:	2300      	movs	r3, #0
   21926:	2208      	movs	r2, #8
   21928:	4c0e      	ldr	r4, [pc, #56]	; (21964 <m2m_wifi_cb+0x350>)
   2192a:	47a0      	blx	r4
   2192c:	1e03      	subs	r3, r0, #0
   2192e:	d13e      	bne.n	219ae <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   21930:	683b      	ldr	r3, [r7, #0]
   21932:	3308      	adds	r3, #8
   21934:	0018      	movs	r0, r3
   21936:	2370      	movs	r3, #112	; 0x70
   21938:	18fb      	adds	r3, r7, r3
   2193a:	6819      	ldr	r1, [r3, #0]
   2193c:	2370      	movs	r3, #112	; 0x70
   2193e:	18fb      	adds	r3, r7, r3
   21940:	889a      	ldrh	r2, [r3, #4]
   21942:	2301      	movs	r3, #1
   21944:	4c07      	ldr	r4, [pc, #28]	; (21964 <m2m_wifi_cb+0x350>)
   21946:	47a0      	blx	r4
   21948:	1e03      	subs	r3, r0, #0
   2194a:	d130      	bne.n	219ae <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   2194c:	4b06      	ldr	r3, [pc, #24]	; (21968 <m2m_wifi_cb+0x354>)
   2194e:	681b      	ldr	r3, [r3, #0]
   21950:	2b00      	cmp	r3, #0
   21952:	d02c      	beq.n	219ae <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   21954:	4b04      	ldr	r3, [pc, #16]	; (21968 <m2m_wifi_cb+0x354>)
   21956:	681b      	ldr	r3, [r3, #0]
   21958:	2270      	movs	r2, #112	; 0x70
   2195a:	18ba      	adds	r2, r7, r2
   2195c:	0011      	movs	r1, r2
   2195e:	2020      	movs	r0, #32
   21960:	4798      	blx	r3
}
   21962:	e024      	b.n	219ae <m2m_wifi_cb+0x39a>
   21964:	000213d9 	.word	0x000213d9
   21968:	20004128 	.word	0x20004128
   2196c:	0002085d 	.word	0x0002085d
   21970:	00038348 	.word	0x00038348
   21974:	0001db29 	.word	0x0001db29
   21978:	00038354 	.word	0x00038354
   2197c:	00038374 	.word	0x00038374
   21980:	20004125 	.word	0x20004125
   21984:	20004124 	.word	0x20004124
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   21988:	2324      	movs	r3, #36	; 0x24
   2198a:	33ff      	adds	r3, #255	; 0xff
   2198c:	001a      	movs	r2, r3
   2198e:	490a      	ldr	r1, [pc, #40]	; (219b8 <m2m_wifi_cb+0x3a4>)
   21990:	4b0a      	ldr	r3, [pc, #40]	; (219bc <m2m_wifi_cb+0x3a8>)
   21992:	0018      	movs	r0, r3
   21994:	4b0a      	ldr	r3, [pc, #40]	; (219c0 <m2m_wifi_cb+0x3ac>)
   21996:	4798      	blx	r3
   21998:	1dfb      	adds	r3, r7, #7
   2199a:	781a      	ldrb	r2, [r3, #0]
   2199c:	4b09      	ldr	r3, [pc, #36]	; (219c4 <m2m_wifi_cb+0x3b0>)
   2199e:	0011      	movs	r1, r2
   219a0:	0018      	movs	r0, r3
   219a2:	4b07      	ldr	r3, [pc, #28]	; (219c0 <m2m_wifi_cb+0x3ac>)
   219a4:	4798      	blx	r3
   219a6:	4b08      	ldr	r3, [pc, #32]	; (219c8 <m2m_wifi_cb+0x3b4>)
   219a8:	0018      	movs	r0, r3
   219aa:	4b05      	ldr	r3, [pc, #20]	; (219c0 <m2m_wifi_cb+0x3ac>)
   219ac:	4798      	blx	r3
}
   219ae:	46c0      	nop			; (mov r8, r8)
   219b0:	46bd      	mov	sp, r7
   219b2:	b02d      	add	sp, #180	; 0xb4
   219b4:	bd90      	pop	{r4, r7, pc}
   219b6:	46c0      	nop			; (mov r8, r8)
   219b8:	00038714 	.word	0x00038714
   219bc:	00038378 	.word	0x00038378
   219c0:	0001db29 	.word	0x0001db29
   219c4:	0003838c 	.word	0x0003838c
   219c8:	00038374 	.word	0x00038374

000219cc <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   219cc:	b590      	push	{r4, r7, lr}
   219ce:	b091      	sub	sp, #68	; 0x44
   219d0:	af02      	add	r7, sp, #8
   219d2:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   219d4:	2337      	movs	r3, #55	; 0x37
   219d6:	18fb      	adds	r3, r7, r3
   219d8:	2200      	movs	r2, #0
   219da:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   219dc:	230b      	movs	r3, #11
   219de:	18fb      	adds	r3, r7, r3
   219e0:	2201      	movs	r2, #1
   219e2:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   219e4:	687b      	ldr	r3, [r7, #4]
   219e6:	2b00      	cmp	r3, #0
   219e8:	d104      	bne.n	219f4 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   219ea:	2337      	movs	r3, #55	; 0x37
   219ec:	18fb      	adds	r3, r7, r3
   219ee:	22f4      	movs	r2, #244	; 0xf4
   219f0:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   219f2:	e0b3      	b.n	21b5c <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   219f4:	687b      	ldr	r3, [r7, #4]
   219f6:	681a      	ldr	r2, [r3, #0]
   219f8:	4b5c      	ldr	r3, [pc, #368]	; (21b6c <m2m_wifi_init+0x1a0>)
   219fa:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   219fc:	4b5c      	ldr	r3, [pc, #368]	; (21b70 <m2m_wifi_init+0x1a4>)
   219fe:	2200      	movs	r2, #0
   21a00:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   21a02:	2337      	movs	r3, #55	; 0x37
   21a04:	18fc      	adds	r4, r7, r3
   21a06:	230b      	movs	r3, #11
   21a08:	18fb      	adds	r3, r7, r3
   21a0a:	0018      	movs	r0, r3
   21a0c:	4b59      	ldr	r3, [pc, #356]	; (21b74 <m2m_wifi_init+0x1a8>)
   21a0e:	4798      	blx	r3
   21a10:	0003      	movs	r3, r0
   21a12:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   21a14:	2337      	movs	r3, #55	; 0x37
   21a16:	18fb      	adds	r3, r7, r3
   21a18:	781b      	ldrb	r3, [r3, #0]
   21a1a:	b25b      	sxtb	r3, r3
   21a1c:	2b00      	cmp	r3, #0
   21a1e:	d000      	beq.n	21a22 <m2m_wifi_init+0x56>
   21a20:	e099      	b.n	21b56 <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   21a22:	2337      	movs	r3, #55	; 0x37
   21a24:	18fc      	adds	r4, r7, r3
   21a26:	2000      	movs	r0, #0
   21a28:	4b53      	ldr	r3, [pc, #332]	; (21b78 <m2m_wifi_init+0x1ac>)
   21a2a:	4798      	blx	r3
   21a2c:	0003      	movs	r3, r0
   21a2e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   21a30:	2337      	movs	r3, #55	; 0x37
   21a32:	18fb      	adds	r3, r7, r3
   21a34:	781b      	ldrb	r3, [r3, #0]
   21a36:	b25b      	sxtb	r3, r3
   21a38:	2b00      	cmp	r3, #0
   21a3a:	d000      	beq.n	21a3e <m2m_wifi_init+0x72>
   21a3c:	e086      	b.n	21b4c <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   21a3e:	4b4f      	ldr	r3, [pc, #316]	; (21b7c <m2m_wifi_init+0x1b0>)
   21a40:	0019      	movs	r1, r3
   21a42:	2001      	movs	r0, #1
   21a44:	4b4e      	ldr	r3, [pc, #312]	; (21b80 <m2m_wifi_init+0x1b4>)
   21a46:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   21a48:	2337      	movs	r3, #55	; 0x37
   21a4a:	18fc      	adds	r4, r7, r3
   21a4c:	230c      	movs	r3, #12
   21a4e:	18fb      	adds	r3, r7, r3
   21a50:	0018      	movs	r0, r3
   21a52:	4b4c      	ldr	r3, [pc, #304]	; (21b84 <m2m_wifi_init+0x1b8>)
   21a54:	4798      	blx	r3
   21a56:	0003      	movs	r3, r0
   21a58:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   21a5a:	4b4b      	ldr	r3, [pc, #300]	; (21b88 <m2m_wifi_init+0x1bc>)
   21a5c:	0018      	movs	r0, r3
   21a5e:	4b4b      	ldr	r3, [pc, #300]	; (21b8c <m2m_wifi_init+0x1c0>)
   21a60:	4798      	blx	r3
   21a62:	230c      	movs	r3, #12
   21a64:	18fb      	adds	r3, r7, r3
   21a66:	791b      	ldrb	r3, [r3, #4]
   21a68:	0019      	movs	r1, r3
   21a6a:	230c      	movs	r3, #12
   21a6c:	18fb      	adds	r3, r7, r3
   21a6e:	795b      	ldrb	r3, [r3, #5]
   21a70:	001a      	movs	r2, r3
   21a72:	230c      	movs	r3, #12
   21a74:	18fb      	adds	r3, r7, r3
   21a76:	799b      	ldrb	r3, [r3, #6]
   21a78:	001c      	movs	r4, r3
   21a7a:	230c      	movs	r3, #12
   21a7c:	18fb      	adds	r3, r7, r3
   21a7e:	8c1b      	ldrh	r3, [r3, #32]
   21a80:	4843      	ldr	r0, [pc, #268]	; (21b90 <m2m_wifi_init+0x1c4>)
   21a82:	9300      	str	r3, [sp, #0]
   21a84:	0023      	movs	r3, r4
   21a86:	4c41      	ldr	r4, [pc, #260]	; (21b8c <m2m_wifi_init+0x1c0>)
   21a88:	47a0      	blx	r4
   21a8a:	4b42      	ldr	r3, [pc, #264]	; (21b94 <m2m_wifi_init+0x1c8>)
   21a8c:	0018      	movs	r0, r3
   21a8e:	4b3f      	ldr	r3, [pc, #252]	; (21b8c <m2m_wifi_init+0x1c0>)
   21a90:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   21a92:	4b3d      	ldr	r3, [pc, #244]	; (21b88 <m2m_wifi_init+0x1bc>)
   21a94:	0018      	movs	r0, r3
   21a96:	4b3d      	ldr	r3, [pc, #244]	; (21b8c <m2m_wifi_init+0x1c0>)
   21a98:	4798      	blx	r3
   21a9a:	230c      	movs	r3, #12
   21a9c:	18fb      	adds	r3, r7, r3
   21a9e:	3316      	adds	r3, #22
   21aa0:	001a      	movs	r2, r3
   21aa2:	230c      	movs	r3, #12
   21aa4:	18fb      	adds	r3, r7, r3
   21aa6:	330a      	adds	r3, #10
   21aa8:	0019      	movs	r1, r3
   21aaa:	4b3b      	ldr	r3, [pc, #236]	; (21b98 <m2m_wifi_init+0x1cc>)
   21aac:	0018      	movs	r0, r3
   21aae:	4b37      	ldr	r3, [pc, #220]	; (21b8c <m2m_wifi_init+0x1c0>)
   21ab0:	4798      	blx	r3
   21ab2:	4b38      	ldr	r3, [pc, #224]	; (21b94 <m2m_wifi_init+0x1c8>)
   21ab4:	0018      	movs	r0, r3
   21ab6:	4b35      	ldr	r3, [pc, #212]	; (21b8c <m2m_wifi_init+0x1c0>)
   21ab8:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   21aba:	4b33      	ldr	r3, [pc, #204]	; (21b88 <m2m_wifi_init+0x1bc>)
   21abc:	0018      	movs	r0, r3
   21abe:	4b33      	ldr	r3, [pc, #204]	; (21b8c <m2m_wifi_init+0x1c0>)
   21ac0:	4798      	blx	r3
   21ac2:	230c      	movs	r3, #12
   21ac4:	18fb      	adds	r3, r7, r3
   21ac6:	79db      	ldrb	r3, [r3, #7]
   21ac8:	0019      	movs	r1, r3
   21aca:	230c      	movs	r3, #12
   21acc:	18fb      	adds	r3, r7, r3
   21ace:	7a1b      	ldrb	r3, [r3, #8]
   21ad0:	001a      	movs	r2, r3
   21ad2:	230c      	movs	r3, #12
   21ad4:	18fb      	adds	r3, r7, r3
   21ad6:	7a5b      	ldrb	r3, [r3, #9]
   21ad8:	4830      	ldr	r0, [pc, #192]	; (21b9c <m2m_wifi_init+0x1d0>)
   21ada:	4c2c      	ldr	r4, [pc, #176]	; (21b8c <m2m_wifi_init+0x1c0>)
   21adc:	47a0      	blx	r4
   21ade:	4b2d      	ldr	r3, [pc, #180]	; (21b94 <m2m_wifi_init+0x1c8>)
   21ae0:	0018      	movs	r0, r3
   21ae2:	4b2a      	ldr	r3, [pc, #168]	; (21b8c <m2m_wifi_init+0x1c0>)
   21ae4:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   21ae6:	4b28      	ldr	r3, [pc, #160]	; (21b88 <m2m_wifi_init+0x1bc>)
   21ae8:	0018      	movs	r0, r3
   21aea:	4b28      	ldr	r3, [pc, #160]	; (21b8c <m2m_wifi_init+0x1c0>)
   21aec:	4798      	blx	r3
   21aee:	482c      	ldr	r0, [pc, #176]	; (21ba0 <m2m_wifi_init+0x1d4>)
   21af0:	2304      	movs	r3, #4
   21af2:	2205      	movs	r2, #5
   21af4:	2113      	movs	r1, #19
   21af6:	4c25      	ldr	r4, [pc, #148]	; (21b8c <m2m_wifi_init+0x1c0>)
   21af8:	47a0      	blx	r4
   21afa:	4b26      	ldr	r3, [pc, #152]	; (21b94 <m2m_wifi_init+0x1c8>)
   21afc:	0018      	movs	r0, r3
   21afe:	4b23      	ldr	r3, [pc, #140]	; (21b8c <m2m_wifi_init+0x1c0>)
   21b00:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   21b02:	4b21      	ldr	r3, [pc, #132]	; (21b88 <m2m_wifi_init+0x1bc>)
   21b04:	0018      	movs	r0, r3
   21b06:	4b21      	ldr	r3, [pc, #132]	; (21b8c <m2m_wifi_init+0x1c0>)
   21b08:	4798      	blx	r3
   21b0a:	4a26      	ldr	r2, [pc, #152]	; (21ba4 <m2m_wifi_init+0x1d8>)
   21b0c:	4926      	ldr	r1, [pc, #152]	; (21ba8 <m2m_wifi_init+0x1dc>)
   21b0e:	4b27      	ldr	r3, [pc, #156]	; (21bac <m2m_wifi_init+0x1e0>)
   21b10:	0018      	movs	r0, r3
   21b12:	4b1e      	ldr	r3, [pc, #120]	; (21b8c <m2m_wifi_init+0x1c0>)
   21b14:	4798      	blx	r3
   21b16:	4b1f      	ldr	r3, [pc, #124]	; (21b94 <m2m_wifi_init+0x1c8>)
   21b18:	0018      	movs	r0, r3
   21b1a:	4b1c      	ldr	r3, [pc, #112]	; (21b8c <m2m_wifi_init+0x1c0>)
   21b1c:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   21b1e:	2337      	movs	r3, #55	; 0x37
   21b20:	18fb      	adds	r3, r7, r3
   21b22:	781b      	ldrb	r3, [r3, #0]
   21b24:	b25b      	sxtb	r3, r3
   21b26:	330d      	adds	r3, #13
   21b28:	d117      	bne.n	21b5a <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   21b2a:	23e8      	movs	r3, #232	; 0xe8
   21b2c:	33ff      	adds	r3, #255	; 0xff
   21b2e:	001a      	movs	r2, r3
   21b30:	491f      	ldr	r1, [pc, #124]	; (21bb0 <m2m_wifi_init+0x1e4>)
   21b32:	4b20      	ldr	r3, [pc, #128]	; (21bb4 <m2m_wifi_init+0x1e8>)
   21b34:	0018      	movs	r0, r3
   21b36:	4b15      	ldr	r3, [pc, #84]	; (21b8c <m2m_wifi_init+0x1c0>)
   21b38:	4798      	blx	r3
   21b3a:	4b1f      	ldr	r3, [pc, #124]	; (21bb8 <m2m_wifi_init+0x1ec>)
   21b3c:	0018      	movs	r0, r3
   21b3e:	4b13      	ldr	r3, [pc, #76]	; (21b8c <m2m_wifi_init+0x1c0>)
   21b40:	4798      	blx	r3
   21b42:	4b14      	ldr	r3, [pc, #80]	; (21b94 <m2m_wifi_init+0x1c8>)
   21b44:	0018      	movs	r0, r3
   21b46:	4b11      	ldr	r3, [pc, #68]	; (21b8c <m2m_wifi_init+0x1c0>)
   21b48:	4798      	blx	r3
	}

	goto _EXIT0;
   21b4a:	e006      	b.n	21b5a <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   21b4c:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   21b4e:	2000      	movs	r0, #0
   21b50:	4b1a      	ldr	r3, [pc, #104]	; (21bbc <m2m_wifi_init+0x1f0>)
   21b52:	4798      	blx	r3
   21b54:	e002      	b.n	21b5c <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   21b56:	46c0      	nop			; (mov r8, r8)
   21b58:	e000      	b.n	21b5c <m2m_wifi_init+0x190>
	goto _EXIT0;
   21b5a:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   21b5c:	2337      	movs	r3, #55	; 0x37
   21b5e:	18fb      	adds	r3, r7, r3
   21b60:	781b      	ldrb	r3, [r3, #0]
   21b62:	b25b      	sxtb	r3, r3
}
   21b64:	0018      	movs	r0, r3
   21b66:	46bd      	mov	sp, r7
   21b68:	b00f      	add	sp, #60	; 0x3c
   21b6a:	bd90      	pop	{r4, r7, pc}
   21b6c:	20004128 	.word	0x20004128
   21b70:	20004125 	.word	0x20004125
   21b74:	00022cf1 	.word	0x00022cf1
   21b78:	00020a75 	.word	0x00020a75
   21b7c:	00021615 	.word	0x00021615
   21b80:	00021559 	.word	0x00021559
   21b84:	00022b25 	.word	0x00022b25
   21b88:	00038348 	.word	0x00038348
   21b8c:	0001db29 	.word	0x0001db29
   21b90:	000384ec 	.word	0x000384ec
   21b94:	00038374 	.word	0x00038374
   21b98:	00038514 	.word	0x00038514
   21b9c:	00038530 	.word	0x00038530
   21ba0:	00038554 	.word	0x00038554
   21ba4:	0003856c 	.word	0x0003856c
   21ba8:	00038578 	.word	0x00038578
   21bac:	00038584 	.word	0x00038584
   21bb0:	00038720 	.word	0x00038720
   21bb4:	00038378 	.word	0x00038378
   21bb8:	0003859c 	.word	0x0003859c
   21bbc:	00022e81 	.word	0x00022e81

00021bc0 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   21bc0:	b580      	push	{r7, lr}
   21bc2:	b082      	sub	sp, #8
   21bc4:	af00      	add	r7, sp, #0
   21bc6:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   21bc8:	4b03      	ldr	r3, [pc, #12]	; (21bd8 <m2m_wifi_handle_events+0x18>)
   21bca:	4798      	blx	r3
   21bcc:	0003      	movs	r3, r0
}
   21bce:	0018      	movs	r0, r3
   21bd0:	46bd      	mov	sp, r7
   21bd2:	b002      	add	sp, #8
   21bd4:	bd80      	pop	{r7, pc}
   21bd6:	46c0      	nop			; (mov r8, r8)
   21bd8:	00021339 	.word	0x00021339

00021bdc <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   21bdc:	b590      	push	{r4, r7, lr}
   21bde:	b087      	sub	sp, #28
   21be0:	af02      	add	r7, sp, #8
   21be2:	60f8      	str	r0, [r7, #12]
   21be4:	0008      	movs	r0, r1
   21be6:	0011      	movs	r1, r2
   21be8:	607b      	str	r3, [r7, #4]
   21bea:	230b      	movs	r3, #11
   21bec:	18fb      	adds	r3, r7, r3
   21bee:	1c02      	adds	r2, r0, #0
   21bf0:	701a      	strb	r2, [r3, #0]
   21bf2:	230a      	movs	r3, #10
   21bf4:	18fb      	adds	r3, r7, r3
   21bf6:	1c0a      	adds	r2, r1, #0
   21bf8:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   21bfa:	687c      	ldr	r4, [r7, #4]
   21bfc:	230a      	movs	r3, #10
   21bfe:	18fb      	adds	r3, r7, r3
   21c00:	781a      	ldrb	r2, [r3, #0]
   21c02:	230b      	movs	r3, #11
   21c04:	18fb      	adds	r3, r7, r3
   21c06:	7819      	ldrb	r1, [r3, #0]
   21c08:	68f8      	ldr	r0, [r7, #12]
   21c0a:	2300      	movs	r3, #0
   21c0c:	9301      	str	r3, [sp, #4]
   21c0e:	2320      	movs	r3, #32
   21c10:	18fb      	adds	r3, r7, r3
   21c12:	881b      	ldrh	r3, [r3, #0]
   21c14:	9300      	str	r3, [sp, #0]
   21c16:	0023      	movs	r3, r4
   21c18:	4c03      	ldr	r4, [pc, #12]	; (21c28 <m2m_wifi_connect+0x4c>)
   21c1a:	47a0      	blx	r4
   21c1c:	0003      	movs	r3, r0
}
   21c1e:	0018      	movs	r0, r3
   21c20:	46bd      	mov	sp, r7
   21c22:	b005      	add	sp, #20
   21c24:	bd90      	pop	{r4, r7, pc}
   21c26:	46c0      	nop			; (mov r8, r8)
   21c28:	00021c2d 	.word	0x00021c2d

00021c2c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   21c2c:	b5b0      	push	{r4, r5, r7, lr}
   21c2e:	b0aa      	sub	sp, #168	; 0xa8
   21c30:	af04      	add	r7, sp, #16
   21c32:	60f8      	str	r0, [r7, #12]
   21c34:	0008      	movs	r0, r1
   21c36:	0011      	movs	r1, r2
   21c38:	607b      	str	r3, [r7, #4]
   21c3a:	230b      	movs	r3, #11
   21c3c:	18fb      	adds	r3, r7, r3
   21c3e:	1c02      	adds	r2, r0, #0
   21c40:	701a      	strb	r2, [r3, #0]
   21c42:	230a      	movs	r3, #10
   21c44:	18fb      	adds	r3, r7, r3
   21c46:	1c0a      	adds	r2, r1, #0
   21c48:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   21c4a:	2397      	movs	r3, #151	; 0x97
   21c4c:	18fb      	adds	r3, r7, r3
   21c4e:	2200      	movs	r2, #0
   21c50:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   21c52:	230a      	movs	r3, #10
   21c54:	18fb      	adds	r3, r7, r3
   21c56:	781b      	ldrb	r3, [r3, #0]
   21c58:	2b01      	cmp	r3, #1
   21c5a:	d100      	bne.n	21c5e <m2m_wifi_connect_sc+0x32>
   21c5c:	e085      	b.n	21d6a <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   21c5e:	687b      	ldr	r3, [r7, #4]
   21c60:	2b00      	cmp	r3, #0
   21c62:	d112      	bne.n	21c8a <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   21c64:	4ad8      	ldr	r2, [pc, #864]	; (21fc8 <m2m_wifi_connect_sc+0x39c>)
   21c66:	49d9      	ldr	r1, [pc, #868]	; (21fcc <m2m_wifi_connect_sc+0x3a0>)
   21c68:	4bd9      	ldr	r3, [pc, #868]	; (21fd0 <m2m_wifi_connect_sc+0x3a4>)
   21c6a:	0018      	movs	r0, r3
   21c6c:	4bd9      	ldr	r3, [pc, #868]	; (21fd4 <m2m_wifi_connect_sc+0x3a8>)
   21c6e:	4798      	blx	r3
   21c70:	4bd9      	ldr	r3, [pc, #868]	; (21fd8 <m2m_wifi_connect_sc+0x3ac>)
   21c72:	0018      	movs	r0, r3
   21c74:	4bd7      	ldr	r3, [pc, #860]	; (21fd4 <m2m_wifi_connect_sc+0x3a8>)
   21c76:	4798      	blx	r3
   21c78:	4bd8      	ldr	r3, [pc, #864]	; (21fdc <m2m_wifi_connect_sc+0x3b0>)
   21c7a:	0018      	movs	r0, r3
   21c7c:	4bd5      	ldr	r3, [pc, #852]	; (21fd4 <m2m_wifi_connect_sc+0x3a8>)
   21c7e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21c80:	2397      	movs	r3, #151	; 0x97
   21c82:	18fb      	adds	r3, r7, r3
   21c84:	22f4      	movs	r2, #244	; 0xf4
   21c86:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21c88:	e1f9      	b.n	2207e <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   21c8a:	230a      	movs	r3, #10
   21c8c:	18fb      	adds	r3, r7, r3
   21c8e:	781b      	ldrb	r3, [r3, #0]
   21c90:	2b02      	cmp	r3, #2
   21c92:	d16a      	bne.n	21d6a <m2m_wifi_connect_sc+0x13e>
   21c94:	687b      	ldr	r3, [r7, #4]
   21c96:	0018      	movs	r0, r3
   21c98:	4bd1      	ldr	r3, [pc, #836]	; (21fe0 <m2m_wifi_connect_sc+0x3b4>)
   21c9a:	4798      	blx	r3
   21c9c:	0003      	movs	r3, r0
   21c9e:	2b40      	cmp	r3, #64	; 0x40
   21ca0:	d163      	bne.n	21d6a <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   21ca2:	2396      	movs	r3, #150	; 0x96
   21ca4:	18fb      	adds	r3, r7, r3
   21ca6:	2200      	movs	r2, #0
   21ca8:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   21caa:	687b      	ldr	r3, [r7, #4]
   21cac:	2290      	movs	r2, #144	; 0x90
   21cae:	18ba      	adds	r2, r7, r2
   21cb0:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   21cb2:	e055      	b.n	21d60 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   21cb4:	2396      	movs	r3, #150	; 0x96
   21cb6:	18fb      	adds	r3, r7, r3
   21cb8:	781b      	ldrb	r3, [r3, #0]
   21cba:	2290      	movs	r2, #144	; 0x90
   21cbc:	18ba      	adds	r2, r7, r2
   21cbe:	6812      	ldr	r2, [r2, #0]
   21cc0:	18d3      	adds	r3, r2, r3
   21cc2:	781b      	ldrb	r3, [r3, #0]
   21cc4:	2b2f      	cmp	r3, #47	; 0x2f
   21cc6:	d931      	bls.n	21d2c <m2m_wifi_connect_sc+0x100>
   21cc8:	2396      	movs	r3, #150	; 0x96
   21cca:	18fb      	adds	r3, r7, r3
   21ccc:	781b      	ldrb	r3, [r3, #0]
   21cce:	2290      	movs	r2, #144	; 0x90
   21cd0:	18ba      	adds	r2, r7, r2
   21cd2:	6812      	ldr	r2, [r2, #0]
   21cd4:	18d3      	adds	r3, r2, r3
   21cd6:	781b      	ldrb	r3, [r3, #0]
   21cd8:	2b39      	cmp	r3, #57	; 0x39
   21cda:	d909      	bls.n	21cf0 <m2m_wifi_connect_sc+0xc4>
   21cdc:	2396      	movs	r3, #150	; 0x96
   21cde:	18fb      	adds	r3, r7, r3
   21ce0:	781b      	ldrb	r3, [r3, #0]
   21ce2:	2290      	movs	r2, #144	; 0x90
   21ce4:	18ba      	adds	r2, r7, r2
   21ce6:	6812      	ldr	r2, [r2, #0]
   21ce8:	18d3      	adds	r3, r2, r3
   21cea:	781b      	ldrb	r3, [r3, #0]
   21cec:	2b40      	cmp	r3, #64	; 0x40
   21cee:	d91d      	bls.n	21d2c <m2m_wifi_connect_sc+0x100>
   21cf0:	2396      	movs	r3, #150	; 0x96
   21cf2:	18fb      	adds	r3, r7, r3
   21cf4:	781b      	ldrb	r3, [r3, #0]
   21cf6:	2290      	movs	r2, #144	; 0x90
   21cf8:	18ba      	adds	r2, r7, r2
   21cfa:	6812      	ldr	r2, [r2, #0]
   21cfc:	18d3      	adds	r3, r2, r3
   21cfe:	781b      	ldrb	r3, [r3, #0]
   21d00:	2b46      	cmp	r3, #70	; 0x46
   21d02:	d909      	bls.n	21d18 <m2m_wifi_connect_sc+0xec>
   21d04:	2396      	movs	r3, #150	; 0x96
   21d06:	18fb      	adds	r3, r7, r3
   21d08:	781b      	ldrb	r3, [r3, #0]
   21d0a:	2290      	movs	r2, #144	; 0x90
   21d0c:	18ba      	adds	r2, r7, r2
   21d0e:	6812      	ldr	r2, [r2, #0]
   21d10:	18d3      	adds	r3, r2, r3
   21d12:	781b      	ldrb	r3, [r3, #0]
   21d14:	2b60      	cmp	r3, #96	; 0x60
   21d16:	d909      	bls.n	21d2c <m2m_wifi_connect_sc+0x100>
   21d18:	2396      	movs	r3, #150	; 0x96
   21d1a:	18fb      	adds	r3, r7, r3
   21d1c:	781b      	ldrb	r3, [r3, #0]
   21d1e:	2290      	movs	r2, #144	; 0x90
   21d20:	18ba      	adds	r2, r7, r2
   21d22:	6812      	ldr	r2, [r2, #0]
   21d24:	18d3      	adds	r3, r2, r3
   21d26:	781b      	ldrb	r3, [r3, #0]
   21d28:	2b66      	cmp	r3, #102	; 0x66
   21d2a:	d912      	bls.n	21d52 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   21d2c:	4aad      	ldr	r2, [pc, #692]	; (21fe4 <m2m_wifi_connect_sc+0x3b8>)
   21d2e:	49a7      	ldr	r1, [pc, #668]	; (21fcc <m2m_wifi_connect_sc+0x3a0>)
   21d30:	4ba7      	ldr	r3, [pc, #668]	; (21fd0 <m2m_wifi_connect_sc+0x3a4>)
   21d32:	0018      	movs	r0, r3
   21d34:	4ba7      	ldr	r3, [pc, #668]	; (21fd4 <m2m_wifi_connect_sc+0x3a8>)
   21d36:	4798      	blx	r3
   21d38:	4bab      	ldr	r3, [pc, #684]	; (21fe8 <m2m_wifi_connect_sc+0x3bc>)
   21d3a:	0018      	movs	r0, r3
   21d3c:	4ba5      	ldr	r3, [pc, #660]	; (21fd4 <m2m_wifi_connect_sc+0x3a8>)
   21d3e:	4798      	blx	r3
   21d40:	4ba6      	ldr	r3, [pc, #664]	; (21fdc <m2m_wifi_connect_sc+0x3b0>)
   21d42:	0018      	movs	r0, r3
   21d44:	4ba3      	ldr	r3, [pc, #652]	; (21fd4 <m2m_wifi_connect_sc+0x3a8>)
   21d46:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   21d48:	2397      	movs	r3, #151	; 0x97
   21d4a:	18fb      	adds	r3, r7, r3
   21d4c:	22f4      	movs	r2, #244	; 0xf4
   21d4e:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   21d50:	e195      	b.n	2207e <m2m_wifi_connect_sc+0x452>
				}
				i++;
   21d52:	2396      	movs	r3, #150	; 0x96
   21d54:	18fb      	adds	r3, r7, r3
   21d56:	781a      	ldrb	r2, [r3, #0]
   21d58:	2396      	movs	r3, #150	; 0x96
   21d5a:	18fb      	adds	r3, r7, r3
   21d5c:	3201      	adds	r2, #1
   21d5e:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   21d60:	2396      	movs	r3, #150	; 0x96
   21d62:	18fb      	adds	r3, r7, r3
   21d64:	781b      	ldrb	r3, [r3, #0]
   21d66:	2b3f      	cmp	r3, #63	; 0x3f
   21d68:	d9a4      	bls.n	21cb4 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   21d6a:	230b      	movs	r3, #11
   21d6c:	18fb      	adds	r3, r7, r3
   21d6e:	781b      	ldrb	r3, [r3, #0]
   21d70:	2b00      	cmp	r3, #0
   21d72:	d004      	beq.n	21d7e <m2m_wifi_connect_sc+0x152>
   21d74:	230b      	movs	r3, #11
   21d76:	18fb      	adds	r3, r7, r3
   21d78:	781b      	ldrb	r3, [r3, #0]
   21d7a:	2b20      	cmp	r3, #32
   21d7c:	d913      	bls.n	21da6 <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   21d7e:	238c      	movs	r3, #140	; 0x8c
   21d80:	009a      	lsls	r2, r3, #2
   21d82:	4992      	ldr	r1, [pc, #584]	; (21fcc <m2m_wifi_connect_sc+0x3a0>)
   21d84:	4b92      	ldr	r3, [pc, #584]	; (21fd0 <m2m_wifi_connect_sc+0x3a4>)
   21d86:	0018      	movs	r0, r3
   21d88:	4b92      	ldr	r3, [pc, #584]	; (21fd4 <m2m_wifi_connect_sc+0x3a8>)
   21d8a:	4798      	blx	r3
   21d8c:	4b97      	ldr	r3, [pc, #604]	; (21fec <m2m_wifi_connect_sc+0x3c0>)
   21d8e:	0018      	movs	r0, r3
   21d90:	4b90      	ldr	r3, [pc, #576]	; (21fd4 <m2m_wifi_connect_sc+0x3a8>)
   21d92:	4798      	blx	r3
   21d94:	4b91      	ldr	r3, [pc, #580]	; (21fdc <m2m_wifi_connect_sc+0x3b0>)
   21d96:	0018      	movs	r0, r3
   21d98:	4b8e      	ldr	r3, [pc, #568]	; (21fd4 <m2m_wifi_connect_sc+0x3a8>)
   21d9a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   21d9c:	2397      	movs	r3, #151	; 0x97
   21d9e:	18fb      	adds	r3, r7, r3
   21da0:	22f4      	movs	r2, #244	; 0xf4
   21da2:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   21da4:	e16b      	b.n	2207e <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   21da6:	23a8      	movs	r3, #168	; 0xa8
   21da8:	18fb      	adds	r3, r7, r3
   21daa:	881b      	ldrh	r3, [r3, #0]
   21dac:	2b00      	cmp	r3, #0
   21dae:	d004      	beq.n	21dba <m2m_wifi_connect_sc+0x18e>
   21db0:	23a8      	movs	r3, #168	; 0xa8
   21db2:	18fb      	adds	r3, r7, r3
   21db4:	881b      	ldrh	r3, [r3, #0]
   21db6:	2b0e      	cmp	r3, #14
   21db8:	d917      	bls.n	21dea <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   21dba:	23a8      	movs	r3, #168	; 0xa8
   21dbc:	18fb      	adds	r3, r7, r3
   21dbe:	881b      	ldrh	r3, [r3, #0]
   21dc0:	2bff      	cmp	r3, #255	; 0xff
   21dc2:	d012      	beq.n	21dea <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   21dc4:	4a8a      	ldr	r2, [pc, #552]	; (21ff0 <m2m_wifi_connect_sc+0x3c4>)
   21dc6:	4981      	ldr	r1, [pc, #516]	; (21fcc <m2m_wifi_connect_sc+0x3a0>)
   21dc8:	4b81      	ldr	r3, [pc, #516]	; (21fd0 <m2m_wifi_connect_sc+0x3a4>)
   21dca:	0018      	movs	r0, r3
   21dcc:	4b81      	ldr	r3, [pc, #516]	; (21fd4 <m2m_wifi_connect_sc+0x3a8>)
   21dce:	4798      	blx	r3
   21dd0:	4b88      	ldr	r3, [pc, #544]	; (21ff4 <m2m_wifi_connect_sc+0x3c8>)
   21dd2:	0018      	movs	r0, r3
   21dd4:	4b7f      	ldr	r3, [pc, #508]	; (21fd4 <m2m_wifi_connect_sc+0x3a8>)
   21dd6:	4798      	blx	r3
   21dd8:	4b80      	ldr	r3, [pc, #512]	; (21fdc <m2m_wifi_connect_sc+0x3b0>)
   21dda:	0018      	movs	r0, r3
   21ddc:	4b7d      	ldr	r3, [pc, #500]	; (21fd4 <m2m_wifi_connect_sc+0x3a8>)
   21dde:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21de0:	2397      	movs	r3, #151	; 0x97
   21de2:	18fb      	adds	r3, r7, r3
   21de4:	22f4      	movs	r2, #244	; 0xf4
   21de6:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21de8:	e149      	b.n	2207e <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   21dea:	230b      	movs	r3, #11
   21dec:	18fb      	adds	r3, r7, r3
   21dee:	781a      	ldrb	r2, [r3, #0]
   21df0:	68f9      	ldr	r1, [r7, #12]
   21df2:	2314      	movs	r3, #20
   21df4:	18fb      	adds	r3, r7, r3
   21df6:	3346      	adds	r3, #70	; 0x46
   21df8:	0018      	movs	r0, r3
   21dfa:	4b7f      	ldr	r3, [pc, #508]	; (21ff8 <m2m_wifi_connect_sc+0x3cc>)
   21dfc:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   21dfe:	230b      	movs	r3, #11
   21e00:	18fb      	adds	r3, r7, r3
   21e02:	781b      	ldrb	r3, [r3, #0]
   21e04:	2214      	movs	r2, #20
   21e06:	18ba      	adds	r2, r7, r2
   21e08:	2146      	movs	r1, #70	; 0x46
   21e0a:	18d3      	adds	r3, r2, r3
   21e0c:	185b      	adds	r3, r3, r1
   21e0e:	2200      	movs	r2, #0
   21e10:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   21e12:	2314      	movs	r3, #20
   21e14:	18fb      	adds	r3, r7, r3
   21e16:	22a8      	movs	r2, #168	; 0xa8
   21e18:	18ba      	adds	r2, r7, r2
   21e1a:	2144      	movs	r1, #68	; 0x44
   21e1c:	8812      	ldrh	r2, [r2, #0]
   21e1e:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   21e20:	23ac      	movs	r3, #172	; 0xac
   21e22:	18fb      	adds	r3, r7, r3
   21e24:	781b      	ldrb	r3, [r3, #0]
   21e26:	1e5a      	subs	r2, r3, #1
   21e28:	4193      	sbcs	r3, r2
   21e2a:	b2db      	uxtb	r3, r3
   21e2c:	0019      	movs	r1, r3
   21e2e:	2314      	movs	r3, #20
   21e30:	18fb      	adds	r3, r7, r3
   21e32:	2267      	movs	r2, #103	; 0x67
   21e34:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   21e36:	2314      	movs	r3, #20
   21e38:	18fb      	adds	r3, r7, r3
   21e3a:	228c      	movs	r2, #140	; 0x8c
   21e3c:	18ba      	adds	r2, r7, r2
   21e3e:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   21e40:	238c      	movs	r3, #140	; 0x8c
   21e42:	18fb      	adds	r3, r7, r3
   21e44:	681b      	ldr	r3, [r3, #0]
   21e46:	220a      	movs	r2, #10
   21e48:	18ba      	adds	r2, r7, r2
   21e4a:	2141      	movs	r1, #65	; 0x41
   21e4c:	7812      	ldrb	r2, [r2, #0]
   21e4e:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   21e50:	230a      	movs	r3, #10
   21e52:	18fb      	adds	r3, r7, r3
   21e54:	781b      	ldrb	r3, [r3, #0]
   21e56:	2b03      	cmp	r3, #3
   21e58:	d000      	beq.n	21e5c <m2m_wifi_connect_sc+0x230>
   21e5a:	e07d      	b.n	21f58 <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   21e5c:	687b      	ldr	r3, [r7, #4]
   21e5e:	2288      	movs	r2, #136	; 0x88
   21e60:	18ba      	adds	r2, r7, r2
   21e62:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   21e64:	238c      	movs	r3, #140	; 0x8c
   21e66:	18fb      	adds	r3, r7, r3
   21e68:	681b      	ldr	r3, [r3, #0]
   21e6a:	2284      	movs	r2, #132	; 0x84
   21e6c:	18ba      	adds	r2, r7, r2
   21e6e:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   21e70:	2388      	movs	r3, #136	; 0x88
   21e72:	18fb      	adds	r3, r7, r3
   21e74:	681b      	ldr	r3, [r3, #0]
   21e76:	781b      	ldrb	r3, [r3, #0]
   21e78:	3b01      	subs	r3, #1
   21e7a:	b2da      	uxtb	r2, r3
   21e7c:	2384      	movs	r3, #132	; 0x84
   21e7e:	18fb      	adds	r3, r7, r3
   21e80:	681b      	ldr	r3, [r3, #0]
   21e82:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   21e84:	2384      	movs	r3, #132	; 0x84
   21e86:	18fb      	adds	r3, r7, r3
   21e88:	681b      	ldr	r3, [r3, #0]
   21e8a:	781b      	ldrb	r3, [r3, #0]
   21e8c:	2b03      	cmp	r3, #3
   21e8e:	d919      	bls.n	21ec4 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   21e90:	2394      	movs	r3, #148	; 0x94
   21e92:	009a      	lsls	r2, r3, #2
   21e94:	494d      	ldr	r1, [pc, #308]	; (21fcc <m2m_wifi_connect_sc+0x3a0>)
   21e96:	4b4e      	ldr	r3, [pc, #312]	; (21fd0 <m2m_wifi_connect_sc+0x3a4>)
   21e98:	0018      	movs	r0, r3
   21e9a:	4b4e      	ldr	r3, [pc, #312]	; (21fd4 <m2m_wifi_connect_sc+0x3a8>)
   21e9c:	4798      	blx	r3
   21e9e:	2384      	movs	r3, #132	; 0x84
   21ea0:	18fb      	adds	r3, r7, r3
   21ea2:	681b      	ldr	r3, [r3, #0]
   21ea4:	781b      	ldrb	r3, [r3, #0]
   21ea6:	001a      	movs	r2, r3
   21ea8:	4b54      	ldr	r3, [pc, #336]	; (21ffc <m2m_wifi_connect_sc+0x3d0>)
   21eaa:	0011      	movs	r1, r2
   21eac:	0018      	movs	r0, r3
   21eae:	4b49      	ldr	r3, [pc, #292]	; (21fd4 <m2m_wifi_connect_sc+0x3a8>)
   21eb0:	4798      	blx	r3
   21eb2:	4b4a      	ldr	r3, [pc, #296]	; (21fdc <m2m_wifi_connect_sc+0x3b0>)
   21eb4:	0018      	movs	r0, r3
   21eb6:	4b47      	ldr	r3, [pc, #284]	; (21fd4 <m2m_wifi_connect_sc+0x3a8>)
   21eb8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21eba:	2397      	movs	r3, #151	; 0x97
   21ebc:	18fb      	adds	r3, r7, r3
   21ebe:	22f4      	movs	r2, #244	; 0xf4
   21ec0:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21ec2:	e0dc      	b.n	2207e <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   21ec4:	2388      	movs	r3, #136	; 0x88
   21ec6:	18fb      	adds	r3, r7, r3
   21ec8:	681b      	ldr	r3, [r3, #0]
   21eca:	785b      	ldrb	r3, [r3, #1]
   21ecc:	3b01      	subs	r3, #1
   21ece:	b2da      	uxtb	r2, r3
   21ed0:	2384      	movs	r3, #132	; 0x84
   21ed2:	18fb      	adds	r3, r7, r3
   21ed4:	681b      	ldr	r3, [r3, #0]
   21ed6:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   21ed8:	2384      	movs	r3, #132	; 0x84
   21eda:	18fb      	adds	r3, r7, r3
   21edc:	681b      	ldr	r3, [r3, #0]
   21ede:	785b      	ldrb	r3, [r3, #1]
   21ee0:	2b0a      	cmp	r3, #10
   21ee2:	d01e      	beq.n	21f22 <m2m_wifi_connect_sc+0x2f6>
   21ee4:	2384      	movs	r3, #132	; 0x84
   21ee6:	18fb      	adds	r3, r7, r3
   21ee8:	681b      	ldr	r3, [r3, #0]
   21eea:	785b      	ldrb	r3, [r3, #1]
   21eec:	2b1a      	cmp	r3, #26
   21eee:	d018      	beq.n	21f22 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   21ef0:	4a43      	ldr	r2, [pc, #268]	; (22000 <m2m_wifi_connect_sc+0x3d4>)
   21ef2:	4936      	ldr	r1, [pc, #216]	; (21fcc <m2m_wifi_connect_sc+0x3a0>)
   21ef4:	4b36      	ldr	r3, [pc, #216]	; (21fd0 <m2m_wifi_connect_sc+0x3a4>)
   21ef6:	0018      	movs	r0, r3
   21ef8:	4b36      	ldr	r3, [pc, #216]	; (21fd4 <m2m_wifi_connect_sc+0x3a8>)
   21efa:	4798      	blx	r3
   21efc:	2384      	movs	r3, #132	; 0x84
   21efe:	18fb      	adds	r3, r7, r3
   21f00:	681b      	ldr	r3, [r3, #0]
   21f02:	785b      	ldrb	r3, [r3, #1]
   21f04:	001a      	movs	r2, r3
   21f06:	4b3f      	ldr	r3, [pc, #252]	; (22004 <m2m_wifi_connect_sc+0x3d8>)
   21f08:	0011      	movs	r1, r2
   21f0a:	0018      	movs	r0, r3
   21f0c:	4b31      	ldr	r3, [pc, #196]	; (21fd4 <m2m_wifi_connect_sc+0x3a8>)
   21f0e:	4798      	blx	r3
   21f10:	4b32      	ldr	r3, [pc, #200]	; (21fdc <m2m_wifi_connect_sc+0x3b0>)
   21f12:	0018      	movs	r0, r3
   21f14:	4b2f      	ldr	r3, [pc, #188]	; (21fd4 <m2m_wifi_connect_sc+0x3a8>)
   21f16:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21f18:	2397      	movs	r3, #151	; 0x97
   21f1a:	18fb      	adds	r3, r7, r3
   21f1c:	22f4      	movs	r2, #244	; 0xf4
   21f1e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21f20:	e0ad      	b.n	2207e <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   21f22:	2384      	movs	r3, #132	; 0x84
   21f24:	18fb      	adds	r3, r7, r3
   21f26:	681b      	ldr	r3, [r3, #0]
   21f28:	1c98      	adds	r0, r3, #2
   21f2a:	2388      	movs	r3, #136	; 0x88
   21f2c:	18fb      	adds	r3, r7, r3
   21f2e:	681b      	ldr	r3, [r3, #0]
   21f30:	1c99      	adds	r1, r3, #2
   21f32:	2388      	movs	r3, #136	; 0x88
   21f34:	18fb      	adds	r3, r7, r3
   21f36:	681b      	ldr	r3, [r3, #0]
   21f38:	785b      	ldrb	r3, [r3, #1]
   21f3a:	001a      	movs	r2, r3
   21f3c:	4b2e      	ldr	r3, [pc, #184]	; (21ff8 <m2m_wifi_connect_sc+0x3cc>)
   21f3e:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   21f40:	2388      	movs	r3, #136	; 0x88
   21f42:	18fb      	adds	r3, r7, r3
   21f44:	681b      	ldr	r3, [r3, #0]
   21f46:	785b      	ldrb	r3, [r3, #1]
   21f48:	001a      	movs	r2, r3
   21f4a:	2384      	movs	r3, #132	; 0x84
   21f4c:	18fb      	adds	r3, r7, r3
   21f4e:	681b      	ldr	r3, [r3, #0]
   21f50:	189b      	adds	r3, r3, r2
   21f52:	2200      	movs	r2, #0
   21f54:	709a      	strb	r2, [r3, #2]
   21f56:	e081      	b.n	2205c <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   21f58:	230a      	movs	r3, #10
   21f5a:	18fb      	adds	r3, r7, r3
   21f5c:	781b      	ldrb	r3, [r3, #0]
   21f5e:	2b02      	cmp	r3, #2
   21f60:	d156      	bne.n	22010 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   21f62:	2382      	movs	r3, #130	; 0x82
   21f64:	18fc      	adds	r4, r7, r3
   21f66:	687b      	ldr	r3, [r7, #4]
   21f68:	0018      	movs	r0, r3
   21f6a:	4b1d      	ldr	r3, [pc, #116]	; (21fe0 <m2m_wifi_connect_sc+0x3b4>)
   21f6c:	4798      	blx	r3
   21f6e:	0003      	movs	r3, r0
   21f70:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   21f72:	2382      	movs	r3, #130	; 0x82
   21f74:	18fb      	adds	r3, r7, r3
   21f76:	881b      	ldrh	r3, [r3, #0]
   21f78:	2b00      	cmp	r3, #0
   21f7a:	d004      	beq.n	21f86 <m2m_wifi_connect_sc+0x35a>
   21f7c:	2382      	movs	r3, #130	; 0x82
   21f7e:	18fb      	adds	r3, r7, r3
   21f80:	881b      	ldrh	r3, [r3, #0]
   21f82:	2b40      	cmp	r3, #64	; 0x40
   21f84:	d912      	bls.n	21fac <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   21f86:	4a20      	ldr	r2, [pc, #128]	; (22008 <m2m_wifi_connect_sc+0x3dc>)
   21f88:	4910      	ldr	r1, [pc, #64]	; (21fcc <m2m_wifi_connect_sc+0x3a0>)
   21f8a:	4b11      	ldr	r3, [pc, #68]	; (21fd0 <m2m_wifi_connect_sc+0x3a4>)
   21f8c:	0018      	movs	r0, r3
   21f8e:	4b11      	ldr	r3, [pc, #68]	; (21fd4 <m2m_wifi_connect_sc+0x3a8>)
   21f90:	4798      	blx	r3
   21f92:	4b1e      	ldr	r3, [pc, #120]	; (2200c <m2m_wifi_connect_sc+0x3e0>)
   21f94:	0018      	movs	r0, r3
   21f96:	4b0f      	ldr	r3, [pc, #60]	; (21fd4 <m2m_wifi_connect_sc+0x3a8>)
   21f98:	4798      	blx	r3
   21f9a:	4b10      	ldr	r3, [pc, #64]	; (21fdc <m2m_wifi_connect_sc+0x3b0>)
   21f9c:	0018      	movs	r0, r3
   21f9e:	4b0d      	ldr	r3, [pc, #52]	; (21fd4 <m2m_wifi_connect_sc+0x3a8>)
   21fa0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21fa2:	2397      	movs	r3, #151	; 0x97
   21fa4:	18fb      	adds	r3, r7, r3
   21fa6:	22f4      	movs	r2, #244	; 0xf4
   21fa8:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21faa:	e068      	b.n	2207e <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   21fac:	238c      	movs	r3, #140	; 0x8c
   21fae:	18fb      	adds	r3, r7, r3
   21fb0:	6818      	ldr	r0, [r3, #0]
   21fb2:	2382      	movs	r3, #130	; 0x82
   21fb4:	18fb      	adds	r3, r7, r3
   21fb6:	881b      	ldrh	r3, [r3, #0]
   21fb8:	3301      	adds	r3, #1
   21fba:	001a      	movs	r2, r3
   21fbc:	687b      	ldr	r3, [r7, #4]
   21fbe:	0019      	movs	r1, r3
   21fc0:	4b0d      	ldr	r3, [pc, #52]	; (21ff8 <m2m_wifi_connect_sc+0x3cc>)
   21fc2:	4798      	blx	r3
   21fc4:	e04a      	b.n	2205c <m2m_wifi_connect_sc+0x430>
   21fc6:	46c0      	nop			; (mov r8, r8)
   21fc8:	0000021a 	.word	0x0000021a
   21fcc:	00038730 	.word	0x00038730
   21fd0:	00038378 	.word	0x00038378
   21fd4:	0001db29 	.word	0x0001db29
   21fd8:	000385b8 	.word	0x000385b8
   21fdc:	00038374 	.word	0x00038374
   21fe0:	0002089b 	.word	0x0002089b
   21fe4:	00000226 	.word	0x00000226
   21fe8:	000385cc 	.word	0x000385cc
   21fec:	000385dc 	.word	0x000385dc
   21ff0:	00000239 	.word	0x00000239
   21ff4:	000385f0 	.word	0x000385f0
   21ff8:	00020821 	.word	0x00020821
   21ffc:	000385fc 	.word	0x000385fc
   22000:	00000257 	.word	0x00000257
   22004:	00038618 	.word	0x00038618
   22008:	00000266 	.word	0x00000266
   2200c:	00038634 	.word	0x00038634
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   22010:	230a      	movs	r3, #10
   22012:	18fb      	adds	r3, r7, r3
   22014:	781b      	ldrb	r3, [r3, #0]
   22016:	2b04      	cmp	r3, #4
   22018:	d108      	bne.n	2202c <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   2201a:	238c      	movs	r3, #140	; 0x8c
   2201c:	18fb      	adds	r3, r7, r3
   2201e:	681b      	ldr	r3, [r3, #0]
   22020:	6879      	ldr	r1, [r7, #4]
   22022:	223e      	movs	r2, #62	; 0x3e
   22024:	0018      	movs	r0, r3
   22026:	4b1a      	ldr	r3, [pc, #104]	; (22090 <m2m_wifi_connect_sc+0x464>)
   22028:	4798      	blx	r3
   2202a:	e017      	b.n	2205c <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   2202c:	230a      	movs	r3, #10
   2202e:	18fb      	adds	r3, r7, r3
   22030:	781b      	ldrb	r3, [r3, #0]
   22032:	2b01      	cmp	r3, #1
   22034:	d012      	beq.n	2205c <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   22036:	4a17      	ldr	r2, [pc, #92]	; (22094 <m2m_wifi_connect_sc+0x468>)
   22038:	4917      	ldr	r1, [pc, #92]	; (22098 <m2m_wifi_connect_sc+0x46c>)
   2203a:	4b18      	ldr	r3, [pc, #96]	; (2209c <m2m_wifi_connect_sc+0x470>)
   2203c:	0018      	movs	r0, r3
   2203e:	4b18      	ldr	r3, [pc, #96]	; (220a0 <m2m_wifi_connect_sc+0x474>)
   22040:	4798      	blx	r3
   22042:	4b18      	ldr	r3, [pc, #96]	; (220a4 <m2m_wifi_connect_sc+0x478>)
   22044:	0018      	movs	r0, r3
   22046:	4b16      	ldr	r3, [pc, #88]	; (220a0 <m2m_wifi_connect_sc+0x474>)
   22048:	4798      	blx	r3
   2204a:	4b17      	ldr	r3, [pc, #92]	; (220a8 <m2m_wifi_connect_sc+0x47c>)
   2204c:	0018      	movs	r0, r3
   2204e:	4b14      	ldr	r3, [pc, #80]	; (220a0 <m2m_wifi_connect_sc+0x474>)
   22050:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   22052:	2397      	movs	r3, #151	; 0x97
   22054:	18fb      	adds	r3, r7, r3
   22056:	22f4      	movs	r2, #244	; 0xf4
   22058:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   2205a:	e010      	b.n	2207e <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   2205c:	2397      	movs	r3, #151	; 0x97
   2205e:	18fc      	adds	r4, r7, r3
   22060:	2314      	movs	r3, #20
   22062:	18fa      	adds	r2, r7, r3
   22064:	2300      	movs	r3, #0
   22066:	9302      	str	r3, [sp, #8]
   22068:	2300      	movs	r3, #0
   2206a:	9301      	str	r3, [sp, #4]
   2206c:	2300      	movs	r3, #0
   2206e:	9300      	str	r3, [sp, #0]
   22070:	236c      	movs	r3, #108	; 0x6c
   22072:	2128      	movs	r1, #40	; 0x28
   22074:	2001      	movs	r0, #1
   22076:	4d0d      	ldr	r5, [pc, #52]	; (220ac <m2m_wifi_connect_sc+0x480>)
   22078:	47a8      	blx	r5
   2207a:	0003      	movs	r3, r0
   2207c:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   2207e:	2397      	movs	r3, #151	; 0x97
   22080:	18fb      	adds	r3, r7, r3
   22082:	781b      	ldrb	r3, [r3, #0]
   22084:	b25b      	sxtb	r3, r3
}
   22086:	0018      	movs	r0, r3
   22088:	46bd      	mov	sp, r7
   2208a:	b026      	add	sp, #152	; 0x98
   2208c:	bdb0      	pop	{r4, r5, r7, pc}
   2208e:	46c0      	nop			; (mov r8, r8)
   22090:	00020821 	.word	0x00020821
   22094:	00000276 	.word	0x00000276
   22098:	00038730 	.word	0x00038730
   2209c:	00038378 	.word	0x00038378
   220a0:	0001db29 	.word	0x0001db29
   220a4:	00038650 	.word	0x00038650
   220a8:	00038374 	.word	0x00038374
   220ac:	00020abd 	.word	0x00020abd

000220b0 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   220b0:	b580      	push	{r7, lr}
   220b2:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   220b4:	2300      	movs	r3, #0
}
   220b6:	0018      	movs	r0, r3
   220b8:	46bd      	mov	sp, r7
   220ba:	bd80      	pop	{r7, pc}

000220bc <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   220bc:	b590      	push	{r4, r7, lr}
   220be:	b087      	sub	sp, #28
   220c0:	af00      	add	r7, sp, #0
   220c2:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   220c4:	2317      	movs	r3, #23
   220c6:	18fb      	adds	r3, r7, r3
   220c8:	2200      	movs	r2, #0
   220ca:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   220cc:	687b      	ldr	r3, [r7, #4]
   220ce:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   220d0:	693b      	ldr	r3, [r7, #16]
   220d2:	2280      	movs	r2, #128	; 0x80
   220d4:	0052      	lsls	r2, r2, #1
   220d6:	4313      	orrs	r3, r2
   220d8:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   220da:	693a      	ldr	r2, [r7, #16]
   220dc:	23a5      	movs	r3, #165	; 0xa5
   220de:	015b      	lsls	r3, r3, #5
   220e0:	0011      	movs	r1, r2
   220e2:	0018      	movs	r0, r3
   220e4:	4b12      	ldr	r3, [pc, #72]	; (22130 <chip_apply_conf+0x74>)
   220e6:	4798      	blx	r3
		if(val32 != 0) {		
   220e8:	693b      	ldr	r3, [r7, #16]
   220ea:	2b00      	cmp	r3, #0
   220ec:	d018      	beq.n	22120 <chip_apply_conf+0x64>
			uint32 reg = 0;
   220ee:	2300      	movs	r3, #0
   220f0:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   220f2:	2317      	movs	r3, #23
   220f4:	18fc      	adds	r4, r7, r3
   220f6:	230c      	movs	r3, #12
   220f8:	18fa      	adds	r2, r7, r3
   220fa:	23a5      	movs	r3, #165	; 0xa5
   220fc:	015b      	lsls	r3, r3, #5
   220fe:	0011      	movs	r1, r2
   22100:	0018      	movs	r0, r3
   22102:	4b0c      	ldr	r3, [pc, #48]	; (22134 <chip_apply_conf+0x78>)
   22104:	4798      	blx	r3
   22106:	0003      	movs	r3, r0
   22108:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   2210a:	2317      	movs	r3, #23
   2210c:	18fb      	adds	r3, r7, r3
   2210e:	781b      	ldrb	r3, [r3, #0]
   22110:	b25b      	sxtb	r3, r3
   22112:	2b00      	cmp	r3, #0
   22114:	d1e1      	bne.n	220da <chip_apply_conf+0x1e>
				if(reg == val32)
   22116:	68fa      	ldr	r2, [r7, #12]
   22118:	693b      	ldr	r3, [r7, #16]
   2211a:	429a      	cmp	r2, r3
   2211c:	d002      	beq.n	22124 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   2211e:	e7dc      	b.n	220da <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   22120:	46c0      	nop			; (mov r8, r8)
   22122:	e000      	b.n	22126 <chip_apply_conf+0x6a>
					break;
   22124:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   22126:	2300      	movs	r3, #0
}
   22128:	0018      	movs	r0, r3
   2212a:	46bd      	mov	sp, r7
   2212c:	b007      	add	sp, #28
   2212e:	bd90      	pop	{r4, r7, pc}
   22130:	00022911 	.word	0x00022911
   22134:	000228ed 	.word	0x000228ed

00022138 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   22138:	b590      	push	{r4, r7, lr}
   2213a:	b083      	sub	sp, #12
   2213c:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   2213e:	2300      	movs	r3, #0
   22140:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   22142:	1dfb      	adds	r3, r7, #7
   22144:	2200      	movs	r2, #0
   22146:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   22148:	1dfc      	adds	r4, r7, #7
   2214a:	003b      	movs	r3, r7
   2214c:	4a24      	ldr	r2, [pc, #144]	; (221e0 <enable_interrupts+0xa8>)
   2214e:	0019      	movs	r1, r3
   22150:	0010      	movs	r0, r2
   22152:	4b24      	ldr	r3, [pc, #144]	; (221e4 <enable_interrupts+0xac>)
   22154:	4798      	blx	r3
   22156:	0003      	movs	r3, r0
   22158:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   2215a:	1dfb      	adds	r3, r7, #7
   2215c:	781b      	ldrb	r3, [r3, #0]
   2215e:	b25b      	sxtb	r3, r3
   22160:	2b00      	cmp	r3, #0
   22162:	d131      	bne.n	221c8 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   22164:	683b      	ldr	r3, [r7, #0]
   22166:	2280      	movs	r2, #128	; 0x80
   22168:	0052      	lsls	r2, r2, #1
   2216a:	4313      	orrs	r3, r2
   2216c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   2216e:	683b      	ldr	r3, [r7, #0]
   22170:	1dfc      	adds	r4, r7, #7
   22172:	4a1b      	ldr	r2, [pc, #108]	; (221e0 <enable_interrupts+0xa8>)
   22174:	0019      	movs	r1, r3
   22176:	0010      	movs	r0, r2
   22178:	4b1b      	ldr	r3, [pc, #108]	; (221e8 <enable_interrupts+0xb0>)
   2217a:	4798      	blx	r3
   2217c:	0003      	movs	r3, r0
   2217e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   22180:	1dfb      	adds	r3, r7, #7
   22182:	781b      	ldrb	r3, [r3, #0]
   22184:	b25b      	sxtb	r3, r3
   22186:	2b00      	cmp	r3, #0
   22188:	d120      	bne.n	221cc <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   2218a:	1dfc      	adds	r4, r7, #7
   2218c:	003a      	movs	r2, r7
   2218e:	23d0      	movs	r3, #208	; 0xd0
   22190:	015b      	lsls	r3, r3, #5
   22192:	0011      	movs	r1, r2
   22194:	0018      	movs	r0, r3
   22196:	4b13      	ldr	r3, [pc, #76]	; (221e4 <enable_interrupts+0xac>)
   22198:	4798      	blx	r3
   2219a:	0003      	movs	r3, r0
   2219c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   2219e:	1dfb      	adds	r3, r7, #7
   221a0:	781b      	ldrb	r3, [r3, #0]
   221a2:	b25b      	sxtb	r3, r3
   221a4:	2b00      	cmp	r3, #0
   221a6:	d113      	bne.n	221d0 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   221a8:	683b      	ldr	r3, [r7, #0]
   221aa:	2280      	movs	r2, #128	; 0x80
   221ac:	0252      	lsls	r2, r2, #9
   221ae:	4313      	orrs	r3, r2
   221b0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   221b2:	683a      	ldr	r2, [r7, #0]
   221b4:	1dfc      	adds	r4, r7, #7
   221b6:	23d0      	movs	r3, #208	; 0xd0
   221b8:	015b      	lsls	r3, r3, #5
   221ba:	0011      	movs	r1, r2
   221bc:	0018      	movs	r0, r3
   221be:	4b0a      	ldr	r3, [pc, #40]	; (221e8 <enable_interrupts+0xb0>)
   221c0:	4798      	blx	r3
   221c2:	0003      	movs	r3, r0
   221c4:	7023      	strb	r3, [r4, #0]
   221c6:	e004      	b.n	221d2 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   221c8:	46c0      	nop			; (mov r8, r8)
   221ca:	e002      	b.n	221d2 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   221cc:	46c0      	nop			; (mov r8, r8)
   221ce:	e000      	b.n	221d2 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   221d0:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   221d2:	1dfb      	adds	r3, r7, #7
   221d4:	781b      	ldrb	r3, [r3, #0]
   221d6:	b25b      	sxtb	r3, r3
}
   221d8:	0018      	movs	r0, r3
   221da:	46bd      	mov	sp, r7
   221dc:	b003      	add	sp, #12
   221de:	bd90      	pop	{r4, r7, pc}
   221e0:	00001408 	.word	0x00001408
   221e4:	000228ed 	.word	0x000228ed
   221e8:	00022911 	.word	0x00022911

000221ec <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   221ec:	b580      	push	{r7, lr}
   221ee:	b082      	sub	sp, #8
   221f0:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   221f2:	4b32      	ldr	r3, [pc, #200]	; (222bc <nmi_get_chipid+0xd0>)
   221f4:	681b      	ldr	r3, [r3, #0]
   221f6:	2b00      	cmp	r3, #0
   221f8:	d159      	bne.n	222ae <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   221fa:	4a30      	ldr	r2, [pc, #192]	; (222bc <nmi_get_chipid+0xd0>)
   221fc:	2380      	movs	r3, #128	; 0x80
   221fe:	015b      	lsls	r3, r3, #5
   22200:	0011      	movs	r1, r2
   22202:	0018      	movs	r0, r3
   22204:	4b2e      	ldr	r3, [pc, #184]	; (222c0 <nmi_get_chipid+0xd4>)
   22206:	4798      	blx	r3
   22208:	1e03      	subs	r3, r0, #0
   2220a:	d004      	beq.n	22216 <nmi_get_chipid+0x2a>
			chipid = 0;
   2220c:	4b2b      	ldr	r3, [pc, #172]	; (222bc <nmi_get_chipid+0xd0>)
   2220e:	2200      	movs	r2, #0
   22210:	601a      	str	r2, [r3, #0]
			return 0;
   22212:	2300      	movs	r3, #0
   22214:	e04d      	b.n	222b2 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   22216:	1d3b      	adds	r3, r7, #4
   22218:	4a2a      	ldr	r2, [pc, #168]	; (222c4 <nmi_get_chipid+0xd8>)
   2221a:	0019      	movs	r1, r3
   2221c:	0010      	movs	r0, r2
   2221e:	4b28      	ldr	r3, [pc, #160]	; (222c0 <nmi_get_chipid+0xd4>)
   22220:	4798      	blx	r3
   22222:	1e03      	subs	r3, r0, #0
   22224:	d004      	beq.n	22230 <nmi_get_chipid+0x44>
			chipid = 0;
   22226:	4b25      	ldr	r3, [pc, #148]	; (222bc <nmi_get_chipid+0xd0>)
   22228:	2200      	movs	r2, #0
   2222a:	601a      	str	r2, [r3, #0]
			return 0;
   2222c:	2300      	movs	r3, #0
   2222e:	e040      	b.n	222b2 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   22230:	4b22      	ldr	r3, [pc, #136]	; (222bc <nmi_get_chipid+0xd0>)
   22232:	681b      	ldr	r3, [r3, #0]
   22234:	4a24      	ldr	r2, [pc, #144]	; (222c8 <nmi_get_chipid+0xdc>)
   22236:	4293      	cmp	r3, r2
   22238:	d106      	bne.n	22248 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   2223a:	687b      	ldr	r3, [r7, #4]
   2223c:	2b01      	cmp	r3, #1
   2223e:	d029      	beq.n	22294 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   22240:	4b1e      	ldr	r3, [pc, #120]	; (222bc <nmi_get_chipid+0xd0>)
   22242:	4a22      	ldr	r2, [pc, #136]	; (222cc <nmi_get_chipid+0xe0>)
   22244:	601a      	str	r2, [r3, #0]
   22246:	e025      	b.n	22294 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   22248:	4b1c      	ldr	r3, [pc, #112]	; (222bc <nmi_get_chipid+0xd0>)
   2224a:	681b      	ldr	r3, [r3, #0]
   2224c:	4a20      	ldr	r2, [pc, #128]	; (222d0 <nmi_get_chipid+0xe4>)
   2224e:	4293      	cmp	r3, r2
   22250:	d10d      	bne.n	2226e <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   22252:	687b      	ldr	r3, [r7, #4]
   22254:	2b03      	cmp	r3, #3
   22256:	d01d      	beq.n	22294 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   22258:	687b      	ldr	r3, [r7, #4]
   2225a:	2b04      	cmp	r3, #4
   2225c:	d103      	bne.n	22266 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   2225e:	4b17      	ldr	r3, [pc, #92]	; (222bc <nmi_get_chipid+0xd0>)
   22260:	4a1c      	ldr	r2, [pc, #112]	; (222d4 <nmi_get_chipid+0xe8>)
   22262:	601a      	str	r2, [r3, #0]
   22264:	e016      	b.n	22294 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   22266:	4b15      	ldr	r3, [pc, #84]	; (222bc <nmi_get_chipid+0xd0>)
   22268:	4a1b      	ldr	r2, [pc, #108]	; (222d8 <nmi_get_chipid+0xec>)
   2226a:	601a      	str	r2, [r3, #0]
   2226c:	e012      	b.n	22294 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   2226e:	4b13      	ldr	r3, [pc, #76]	; (222bc <nmi_get_chipid+0xd0>)
   22270:	681b      	ldr	r3, [r3, #0]
   22272:	4a1a      	ldr	r2, [pc, #104]	; (222dc <nmi_get_chipid+0xf0>)
   22274:	4293      	cmp	r3, r2
   22276:	d10d      	bne.n	22294 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   22278:	4a10      	ldr	r2, [pc, #64]	; (222bc <nmi_get_chipid+0xd0>)
   2227a:	23ec      	movs	r3, #236	; 0xec
   2227c:	039b      	lsls	r3, r3, #14
   2227e:	0011      	movs	r1, r2
   22280:	0018      	movs	r0, r3
   22282:	4b0f      	ldr	r3, [pc, #60]	; (222c0 <nmi_get_chipid+0xd4>)
   22284:	4798      	blx	r3
   22286:	1e03      	subs	r3, r0, #0
   22288:	d004      	beq.n	22294 <nmi_get_chipid+0xa8>
			chipid = 0;
   2228a:	4b0c      	ldr	r3, [pc, #48]	; (222bc <nmi_get_chipid+0xd0>)
   2228c:	2200      	movs	r2, #0
   2228e:	601a      	str	r2, [r3, #0]
			return 0;
   22290:	2300      	movs	r3, #0
   22292:	e00e      	b.n	222b2 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   22294:	4b09      	ldr	r3, [pc, #36]	; (222bc <nmi_get_chipid+0xd0>)
   22296:	681b      	ldr	r3, [r3, #0]
   22298:	4a11      	ldr	r2, [pc, #68]	; (222e0 <nmi_get_chipid+0xf4>)
   2229a:	401a      	ands	r2, r3
   2229c:	4b07      	ldr	r3, [pc, #28]	; (222bc <nmi_get_chipid+0xd0>)
   2229e:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   222a0:	4b06      	ldr	r3, [pc, #24]	; (222bc <nmi_get_chipid+0xd0>)
   222a2:	681b      	ldr	r3, [r3, #0]
   222a4:	22a0      	movs	r2, #160	; 0xa0
   222a6:	02d2      	lsls	r2, r2, #11
   222a8:	431a      	orrs	r2, r3
   222aa:	4b04      	ldr	r3, [pc, #16]	; (222bc <nmi_get_chipid+0xd0>)
   222ac:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   222ae:	4b03      	ldr	r3, [pc, #12]	; (222bc <nmi_get_chipid+0xd0>)
   222b0:	681b      	ldr	r3, [r3, #0]
}
   222b2:	0018      	movs	r0, r3
   222b4:	46bd      	mov	sp, r7
   222b6:	b002      	add	sp, #8
   222b8:	bd80      	pop	{r7, pc}
   222ba:	46c0      	nop			; (mov r8, r8)
   222bc:	2000412c 	.word	0x2000412c
   222c0:	000228ed 	.word	0x000228ed
   222c4:	000013f4 	.word	0x000013f4
   222c8:	001002a0 	.word	0x001002a0
   222cc:	001002a1 	.word	0x001002a1
   222d0:	001002b0 	.word	0x001002b0
   222d4:	001002b1 	.word	0x001002b1
   222d8:	001002b2 	.word	0x001002b2
   222dc:	001000f0 	.word	0x001000f0
   222e0:	fff0ffff 	.word	0xfff0ffff

000222e4 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   222e4:	b590      	push	{r4, r7, lr}
   222e6:	b083      	sub	sp, #12
   222e8:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   222ea:	1dfb      	adds	r3, r7, #7
   222ec:	2200      	movs	r2, #0
   222ee:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   222f0:	1dfc      	adds	r4, r7, #7
   222f2:	003b      	movs	r3, r7
   222f4:	0019      	movs	r1, r3
   222f6:	2010      	movs	r0, #16
   222f8:	4b2e      	ldr	r3, [pc, #184]	; (223b4 <chip_sleep+0xd0>)
   222fa:	4798      	blx	r3
   222fc:	0003      	movs	r3, r0
   222fe:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   22300:	1dfb      	adds	r3, r7, #7
   22302:	781b      	ldrb	r3, [r3, #0]
   22304:	b25b      	sxtb	r3, r3
   22306:	2b00      	cmp	r3, #0
   22308:	d145      	bne.n	22396 <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   2230a:	683b      	ldr	r3, [r7, #0]
   2230c:	2201      	movs	r2, #1
   2230e:	4013      	ands	r3, r2
   22310:	d000      	beq.n	22314 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   22312:	e7ed      	b.n	222f0 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   22314:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   22316:	1dfc      	adds	r4, r7, #7
   22318:	003b      	movs	r3, r7
   2231a:	0019      	movs	r1, r3
   2231c:	2001      	movs	r0, #1
   2231e:	4b25      	ldr	r3, [pc, #148]	; (223b4 <chip_sleep+0xd0>)
   22320:	4798      	blx	r3
   22322:	0003      	movs	r3, r0
   22324:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   22326:	1dfb      	adds	r3, r7, #7
   22328:	781b      	ldrb	r3, [r3, #0]
   2232a:	b25b      	sxtb	r3, r3
   2232c:	2b00      	cmp	r3, #0
   2232e:	d134      	bne.n	2239a <chip_sleep+0xb6>
	if(reg & NBIT1)
   22330:	683b      	ldr	r3, [r7, #0]
   22332:	2202      	movs	r2, #2
   22334:	4013      	ands	r3, r2
   22336:	d010      	beq.n	2235a <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   22338:	683b      	ldr	r3, [r7, #0]
   2233a:	2202      	movs	r2, #2
   2233c:	4393      	bics	r3, r2
   2233e:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   22340:	683b      	ldr	r3, [r7, #0]
   22342:	1dfc      	adds	r4, r7, #7
   22344:	0019      	movs	r1, r3
   22346:	2001      	movs	r0, #1
   22348:	4b1b      	ldr	r3, [pc, #108]	; (223b8 <chip_sleep+0xd4>)
   2234a:	4798      	blx	r3
   2234c:	0003      	movs	r3, r0
   2234e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   22350:	1dfb      	adds	r3, r7, #7
   22352:	781b      	ldrb	r3, [r3, #0]
   22354:	b25b      	sxtb	r3, r3
   22356:	2b00      	cmp	r3, #0
   22358:	d121      	bne.n	2239e <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2235a:	1dfc      	adds	r4, r7, #7
   2235c:	003b      	movs	r3, r7
   2235e:	0019      	movs	r1, r3
   22360:	200b      	movs	r0, #11
   22362:	4b14      	ldr	r3, [pc, #80]	; (223b4 <chip_sleep+0xd0>)
   22364:	4798      	blx	r3
   22366:	0003      	movs	r3, r0
   22368:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2236a:	1dfb      	adds	r3, r7, #7
   2236c:	781b      	ldrb	r3, [r3, #0]
   2236e:	b25b      	sxtb	r3, r3
   22370:	2b00      	cmp	r3, #0
   22372:	d116      	bne.n	223a2 <chip_sleep+0xbe>
	if(reg & NBIT0)
   22374:	683b      	ldr	r3, [r7, #0]
   22376:	2201      	movs	r2, #1
   22378:	4013      	ands	r3, r2
   2237a:	d013      	beq.n	223a4 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   2237c:	683b      	ldr	r3, [r7, #0]
   2237e:	2201      	movs	r2, #1
   22380:	4393      	bics	r3, r2
   22382:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   22384:	683b      	ldr	r3, [r7, #0]
   22386:	1dfc      	adds	r4, r7, #7
   22388:	0019      	movs	r1, r3
   2238a:	200b      	movs	r0, #11
   2238c:	4b0a      	ldr	r3, [pc, #40]	; (223b8 <chip_sleep+0xd4>)
   2238e:	4798      	blx	r3
   22390:	0003      	movs	r3, r0
   22392:	7023      	strb	r3, [r4, #0]
   22394:	e006      	b.n	223a4 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   22396:	46c0      	nop			; (mov r8, r8)
   22398:	e004      	b.n	223a4 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   2239a:	46c0      	nop			; (mov r8, r8)
   2239c:	e002      	b.n	223a4 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   2239e:	46c0      	nop			; (mov r8, r8)
   223a0:	e000      	b.n	223a4 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   223a2:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   223a4:	1dfb      	adds	r3, r7, #7
   223a6:	781b      	ldrb	r3, [r3, #0]
   223a8:	b25b      	sxtb	r3, r3
}
   223aa:	0018      	movs	r0, r3
   223ac:	46bd      	mov	sp, r7
   223ae:	b003      	add	sp, #12
   223b0:	bd90      	pop	{r4, r7, pc}
   223b2:	46c0      	nop			; (mov r8, r8)
   223b4:	000228ed 	.word	0x000228ed
   223b8:	00022911 	.word	0x00022911

000223bc <chip_wake>:
sint8 chip_wake(void)
{
   223bc:	b590      	push	{r4, r7, lr}
   223be:	b085      	sub	sp, #20
   223c0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   223c2:	230f      	movs	r3, #15
   223c4:	18fb      	adds	r3, r7, r3
   223c6:	2200      	movs	r2, #0
   223c8:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   223ca:	2300      	movs	r3, #0
   223cc:	607b      	str	r3, [r7, #4]
   223ce:	2300      	movs	r3, #0
   223d0:	603b      	str	r3, [r7, #0]
   223d2:	2300      	movs	r3, #0
   223d4:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   223d6:	230f      	movs	r3, #15
   223d8:	18fc      	adds	r4, r7, r3
   223da:	1d3b      	adds	r3, r7, #4
   223dc:	0019      	movs	r1, r3
   223de:	200b      	movs	r0, #11
   223e0:	4b4e      	ldr	r3, [pc, #312]	; (2251c <chip_wake+0x160>)
   223e2:	4798      	blx	r3
   223e4:	0003      	movs	r3, r0
   223e6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   223e8:	230f      	movs	r3, #15
   223ea:	18fb      	adds	r3, r7, r3
   223ec:	781b      	ldrb	r3, [r3, #0]
   223ee:	b25b      	sxtb	r3, r3
   223f0:	2b00      	cmp	r3, #0
   223f2:	d000      	beq.n	223f6 <chip_wake+0x3a>
   223f4:	e082      	b.n	224fc <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   223f6:	687b      	ldr	r3, [r7, #4]
   223f8:	2201      	movs	r2, #1
   223fa:	4013      	ands	r3, r2
   223fc:	d111      	bne.n	22422 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   223fe:	687b      	ldr	r3, [r7, #4]
   22400:	2201      	movs	r2, #1
   22402:	4313      	orrs	r3, r2
   22404:	220f      	movs	r2, #15
   22406:	18bc      	adds	r4, r7, r2
   22408:	0019      	movs	r1, r3
   2240a:	200b      	movs	r0, #11
   2240c:	4b44      	ldr	r3, [pc, #272]	; (22520 <chip_wake+0x164>)
   2240e:	4798      	blx	r3
   22410:	0003      	movs	r3, r0
   22412:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22414:	230f      	movs	r3, #15
   22416:	18fb      	adds	r3, r7, r3
   22418:	781b      	ldrb	r3, [r3, #0]
   2241a:	b25b      	sxtb	r3, r3
   2241c:	2b00      	cmp	r3, #0
   2241e:	d000      	beq.n	22422 <chip_wake+0x66>
   22420:	e06e      	b.n	22500 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   22422:	230f      	movs	r3, #15
   22424:	18fc      	adds	r4, r7, r3
   22426:	1d3b      	adds	r3, r7, #4
   22428:	0019      	movs	r1, r3
   2242a:	2001      	movs	r0, #1
   2242c:	4b3b      	ldr	r3, [pc, #236]	; (2251c <chip_wake+0x160>)
   2242e:	4798      	blx	r3
   22430:	0003      	movs	r3, r0
   22432:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22434:	230f      	movs	r3, #15
   22436:	18fb      	adds	r3, r7, r3
   22438:	781b      	ldrb	r3, [r3, #0]
   2243a:	b25b      	sxtb	r3, r3
   2243c:	2b00      	cmp	r3, #0
   2243e:	d161      	bne.n	22504 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   22440:	687b      	ldr	r3, [r7, #4]
   22442:	2202      	movs	r2, #2
   22444:	4013      	ands	r3, r2
   22446:	d110      	bne.n	2246a <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   22448:	687b      	ldr	r3, [r7, #4]
   2244a:	2202      	movs	r2, #2
   2244c:	4313      	orrs	r3, r2
   2244e:	220f      	movs	r2, #15
   22450:	18bc      	adds	r4, r7, r2
   22452:	0019      	movs	r1, r3
   22454:	2001      	movs	r0, #1
   22456:	4b32      	ldr	r3, [pc, #200]	; (22520 <chip_wake+0x164>)
   22458:	4798      	blx	r3
   2245a:	0003      	movs	r3, r0
   2245c:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   2245e:	230f      	movs	r3, #15
   22460:	18fb      	adds	r3, r7, r3
   22462:	781b      	ldrb	r3, [r3, #0]
   22464:	b25b      	sxtb	r3, r3
   22466:	2b00      	cmp	r3, #0
   22468:	d14e      	bne.n	22508 <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   2246a:	230f      	movs	r3, #15
   2246c:	18fc      	adds	r4, r7, r3
   2246e:	003b      	movs	r3, r7
   22470:	0019      	movs	r1, r3
   22472:	200f      	movs	r0, #15
   22474:	4b29      	ldr	r3, [pc, #164]	; (2251c <chip_wake+0x160>)
   22476:	4798      	blx	r3
   22478:	0003      	movs	r3, r0
   2247a:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   2247c:	230f      	movs	r3, #15
   2247e:	18fb      	adds	r3, r7, r3
   22480:	781b      	ldrb	r3, [r3, #0]
   22482:	b25b      	sxtb	r3, r3
   22484:	2b00      	cmp	r3, #0
   22486:	d014      	beq.n	224b2 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   22488:	23a8      	movs	r3, #168	; 0xa8
   2248a:	005a      	lsls	r2, r3, #1
   2248c:	4925      	ldr	r1, [pc, #148]	; (22524 <chip_wake+0x168>)
   2248e:	4b26      	ldr	r3, [pc, #152]	; (22528 <chip_wake+0x16c>)
   22490:	0018      	movs	r0, r3
   22492:	4b26      	ldr	r3, [pc, #152]	; (2252c <chip_wake+0x170>)
   22494:	4798      	blx	r3
   22496:	230f      	movs	r3, #15
   22498:	18fb      	adds	r3, r7, r3
   2249a:	2100      	movs	r1, #0
   2249c:	5659      	ldrsb	r1, [r3, r1]
   2249e:	683a      	ldr	r2, [r7, #0]
   224a0:	4b23      	ldr	r3, [pc, #140]	; (22530 <chip_wake+0x174>)
   224a2:	0018      	movs	r0, r3
   224a4:	4b21      	ldr	r3, [pc, #132]	; (2252c <chip_wake+0x170>)
   224a6:	4798      	blx	r3
   224a8:	4b22      	ldr	r3, [pc, #136]	; (22534 <chip_wake+0x178>)
   224aa:	0018      	movs	r0, r3
   224ac:	4b1f      	ldr	r3, [pc, #124]	; (2252c <chip_wake+0x170>)
   224ae:	4798      	blx	r3
			goto _WAKE_EXIT;
   224b0:	e02b      	b.n	2250a <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   224b2:	683b      	ldr	r3, [r7, #0]
   224b4:	2204      	movs	r2, #4
   224b6:	4013      	ands	r3, r2
   224b8:	d11c      	bne.n	224f4 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   224ba:	2002      	movs	r0, #2
   224bc:	4b1e      	ldr	r3, [pc, #120]	; (22538 <chip_wake+0x17c>)
   224be:	4798      	blx	r3
		trials++;
   224c0:	68bb      	ldr	r3, [r7, #8]
   224c2:	3301      	adds	r3, #1
   224c4:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   224c6:	68bb      	ldr	r3, [r7, #8]
   224c8:	2b04      	cmp	r3, #4
   224ca:	d9ce      	bls.n	2246a <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   224cc:	23ad      	movs	r3, #173	; 0xad
   224ce:	005a      	lsls	r2, r3, #1
   224d0:	4914      	ldr	r1, [pc, #80]	; (22524 <chip_wake+0x168>)
   224d2:	4b15      	ldr	r3, [pc, #84]	; (22528 <chip_wake+0x16c>)
   224d4:	0018      	movs	r0, r3
   224d6:	4b15      	ldr	r3, [pc, #84]	; (2252c <chip_wake+0x170>)
   224d8:	4798      	blx	r3
   224da:	4b18      	ldr	r3, [pc, #96]	; (2253c <chip_wake+0x180>)
   224dc:	0018      	movs	r0, r3
   224de:	4b13      	ldr	r3, [pc, #76]	; (2252c <chip_wake+0x170>)
   224e0:	4798      	blx	r3
   224e2:	4b14      	ldr	r3, [pc, #80]	; (22534 <chip_wake+0x178>)
   224e4:	0018      	movs	r0, r3
   224e6:	4b11      	ldr	r3, [pc, #68]	; (2252c <chip_wake+0x170>)
   224e8:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   224ea:	230f      	movs	r3, #15
   224ec:	18fb      	adds	r3, r7, r3
   224ee:	22fc      	movs	r2, #252	; 0xfc
   224f0:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   224f2:	e00a      	b.n	2250a <chip_wake+0x14e>
			break;
   224f4:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   224f6:	4b12      	ldr	r3, [pc, #72]	; (22540 <chip_wake+0x184>)
   224f8:	4798      	blx	r3
   224fa:	e006      	b.n	2250a <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   224fc:	46c0      	nop			; (mov r8, r8)
   224fe:	e004      	b.n	2250a <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22500:	46c0      	nop			; (mov r8, r8)
   22502:	e002      	b.n	2250a <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22504:	46c0      	nop			; (mov r8, r8)
   22506:	e000      	b.n	2250a <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   22508:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   2250a:	230f      	movs	r3, #15
   2250c:	18fb      	adds	r3, r7, r3
   2250e:	781b      	ldrb	r3, [r3, #0]
   22510:	b25b      	sxtb	r3, r3
}
   22512:	0018      	movs	r0, r3
   22514:	46bd      	mov	sp, r7
   22516:	b005      	add	sp, #20
   22518:	bd90      	pop	{r4, r7, pc}
   2251a:	46c0      	nop			; (mov r8, r8)
   2251c:	000228ed 	.word	0x000228ed
   22520:	00022911 	.word	0x00022911
   22524:	000387d0 	.word	0x000387d0
   22528:	00038744 	.word	0x00038744
   2252c:	0001db29 	.word	0x0001db29
   22530:	00038758 	.word	0x00038758
   22534:	00038770 	.word	0x00038770
   22538:	0001ff7d 	.word	0x0001ff7d
   2253c:	00038774 	.word	0x00038774
   22540:	000228ad 	.word	0x000228ad

00022544 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   22544:	b580      	push	{r7, lr}
   22546:	b088      	sub	sp, #32
   22548:	af00      	add	r7, sp, #0
   2254a:	0002      	movs	r2, r0
   2254c:	1dfb      	adds	r3, r7, #7
   2254e:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22550:	2313      	movs	r3, #19
   22552:	18fb      	adds	r3, r7, r3
   22554:	2200      	movs	r2, #0
   22556:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   22558:	2300      	movs	r3, #0
   2255a:	61fb      	str	r3, [r7, #28]
   2255c:	2300      	movs	r3, #0
   2255e:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   22560:	2300      	movs	r3, #0
   22562:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   22564:	4b4a      	ldr	r3, [pc, #296]	; (22690 <wait_for_bootrom+0x14c>)
   22566:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   22568:	2300      	movs	r3, #0
   2256a:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   2256c:	4b49      	ldr	r3, [pc, #292]	; (22694 <wait_for_bootrom+0x150>)
   2256e:	0018      	movs	r0, r3
   22570:	4b49      	ldr	r3, [pc, #292]	; (22698 <wait_for_bootrom+0x154>)
   22572:	4798      	blx	r3
   22574:	0003      	movs	r3, r0
   22576:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   22578:	69fb      	ldr	r3, [r7, #28]
   2257a:	2b00      	cmp	r3, #0
   2257c:	db03      	blt.n	22586 <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   2257e:	2001      	movs	r0, #1
   22580:	4b46      	ldr	r3, [pc, #280]	; (2269c <wait_for_bootrom+0x158>)
   22582:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   22584:	e7f2      	b.n	2256c <wait_for_bootrom+0x28>
			break;
   22586:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   22588:	4b45      	ldr	r3, [pc, #276]	; (226a0 <wait_for_bootrom+0x15c>)
   2258a:	0018      	movs	r0, r3
   2258c:	4b42      	ldr	r3, [pc, #264]	; (22698 <wait_for_bootrom+0x154>)
   2258e:	4798      	blx	r3
   22590:	0003      	movs	r3, r0
   22592:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   22594:	69fb      	ldr	r3, [r7, #28]
   22596:	2201      	movs	r2, #1
   22598:	4013      	ands	r3, r2
   2259a:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   2259c:	69fb      	ldr	r3, [r7, #28]
   2259e:	2b00      	cmp	r3, #0
   225a0:	d112      	bne.n	225c8 <wait_for_bootrom+0x84>
	{
		reg = 0;
   225a2:	2300      	movs	r3, #0
   225a4:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   225a6:	e00b      	b.n	225c0 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   225a8:	2001      	movs	r0, #1
   225aa:	4b3c      	ldr	r3, [pc, #240]	; (2269c <wait_for_bootrom+0x158>)
   225ac:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   225ae:	4b3d      	ldr	r3, [pc, #244]	; (226a4 <wait_for_bootrom+0x160>)
   225b0:	0018      	movs	r0, r3
   225b2:	4b39      	ldr	r3, [pc, #228]	; (22698 <wait_for_bootrom+0x154>)
   225b4:	4798      	blx	r3
   225b6:	0003      	movs	r3, r0
   225b8:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   225ba:	69bb      	ldr	r3, [r7, #24]
   225bc:	3301      	adds	r3, #1
   225be:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   225c0:	69fb      	ldr	r3, [r7, #28]
   225c2:	4a39      	ldr	r2, [pc, #228]	; (226a8 <wait_for_bootrom+0x164>)
   225c4:	4293      	cmp	r3, r2
   225c6:	d1ef      	bne.n	225a8 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   225c8:	1dfb      	adds	r3, r7, #7
   225ca:	781b      	ldrb	r3, [r3, #0]
   225cc:	2b02      	cmp	r3, #2
   225ce:	d10d      	bne.n	225ec <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   225d0:	4a36      	ldr	r2, [pc, #216]	; (226ac <wait_for_bootrom+0x168>)
   225d2:	4b37      	ldr	r3, [pc, #220]	; (226b0 <wait_for_bootrom+0x16c>)
   225d4:	0011      	movs	r1, r2
   225d6:	0018      	movs	r0, r3
   225d8:	4b36      	ldr	r3, [pc, #216]	; (226b4 <wait_for_bootrom+0x170>)
   225da:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   225dc:	2380      	movs	r3, #128	; 0x80
   225de:	035b      	lsls	r3, r3, #13
   225e0:	4a35      	ldr	r2, [pc, #212]	; (226b8 <wait_for_bootrom+0x174>)
   225e2:	0019      	movs	r1, r3
   225e4:	0010      	movs	r0, r2
   225e6:	4b33      	ldr	r3, [pc, #204]	; (226b4 <wait_for_bootrom+0x170>)
   225e8:	4798      	blx	r3
   225ea:	e022      	b.n	22632 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   225ec:	1dfb      	adds	r3, r7, #7
   225ee:	781b      	ldrb	r3, [r3, #0]
   225f0:	2b03      	cmp	r3, #3
   225f2:	d10b      	bne.n	2260c <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   225f4:	4a2d      	ldr	r2, [pc, #180]	; (226ac <wait_for_bootrom+0x168>)
   225f6:	4b2e      	ldr	r3, [pc, #184]	; (226b0 <wait_for_bootrom+0x16c>)
   225f8:	0011      	movs	r1, r2
   225fa:	0018      	movs	r0, r3
   225fc:	4b2d      	ldr	r3, [pc, #180]	; (226b4 <wait_for_bootrom+0x170>)
   225fe:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   22600:	4b2d      	ldr	r3, [pc, #180]	; (226b8 <wait_for_bootrom+0x174>)
   22602:	2100      	movs	r1, #0
   22604:	0018      	movs	r0, r3
   22606:	4b2b      	ldr	r3, [pc, #172]	; (226b4 <wait_for_bootrom+0x170>)
   22608:	4798      	blx	r3
   2260a:	e012      	b.n	22632 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   2260c:	1dfb      	adds	r3, r7, #7
   2260e:	781b      	ldrb	r3, [r3, #0]
   22610:	2b04      	cmp	r3, #4
   22612:	d108      	bne.n	22626 <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   22614:	2380      	movs	r3, #128	; 0x80
   22616:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   22618:	68fb      	ldr	r3, [r7, #12]
   2261a:	4a27      	ldr	r2, [pc, #156]	; (226b8 <wait_for_bootrom+0x174>)
   2261c:	0019      	movs	r1, r3
   2261e:	0010      	movs	r0, r2
   22620:	4b24      	ldr	r3, [pc, #144]	; (226b4 <wait_for_bootrom+0x170>)
   22622:	4798      	blx	r3
   22624:	e005      	b.n	22632 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   22626:	68fb      	ldr	r3, [r7, #12]
   22628:	4a23      	ldr	r2, [pc, #140]	; (226b8 <wait_for_bootrom+0x174>)
   2262a:	0019      	movs	r1, r3
   2262c:	0010      	movs	r0, r2
   2262e:	4b21      	ldr	r3, [pc, #132]	; (226b4 <wait_for_bootrom+0x170>)
   22630:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   22632:	4b22      	ldr	r3, [pc, #136]	; (226bc <wait_for_bootrom+0x178>)
   22634:	4798      	blx	r3
   22636:	0003      	movs	r3, r0
   22638:	051b      	lsls	r3, r3, #20
   2263a:	0d1b      	lsrs	r3, r3, #20
   2263c:	4a20      	ldr	r2, [pc, #128]	; (226c0 <wait_for_bootrom+0x17c>)
   2263e:	4293      	cmp	r3, r2
   22640:	d906      	bls.n	22650 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   22642:	697b      	ldr	r3, [r7, #20]
   22644:	2202      	movs	r2, #2
   22646:	4313      	orrs	r3, r2
   22648:	0018      	movs	r0, r3
   2264a:	4b1e      	ldr	r3, [pc, #120]	; (226c4 <wait_for_bootrom+0x180>)
   2264c:	4798      	blx	r3
   2264e:	e003      	b.n	22658 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   22650:	697b      	ldr	r3, [r7, #20]
   22652:	0018      	movs	r0, r3
   22654:	4b1b      	ldr	r3, [pc, #108]	; (226c4 <wait_for_bootrom+0x180>)
   22656:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   22658:	4b1b      	ldr	r3, [pc, #108]	; (226c8 <wait_for_bootrom+0x184>)
   2265a:	0018      	movs	r0, r3
   2265c:	4b1b      	ldr	r3, [pc, #108]	; (226cc <wait_for_bootrom+0x188>)
   2265e:	4798      	blx	r3
   22660:	68fa      	ldr	r2, [r7, #12]
   22662:	4b1b      	ldr	r3, [pc, #108]	; (226d0 <wait_for_bootrom+0x18c>)
   22664:	0011      	movs	r1, r2
   22666:	0018      	movs	r0, r3
   22668:	4b18      	ldr	r3, [pc, #96]	; (226cc <wait_for_bootrom+0x188>)
   2266a:	4798      	blx	r3
   2266c:	4b19      	ldr	r3, [pc, #100]	; (226d4 <wait_for_bootrom+0x190>)
   2266e:	0018      	movs	r0, r3
   22670:	4b16      	ldr	r3, [pc, #88]	; (226cc <wait_for_bootrom+0x188>)
   22672:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   22674:	4a18      	ldr	r2, [pc, #96]	; (226d8 <wait_for_bootrom+0x194>)
   22676:	4b0b      	ldr	r3, [pc, #44]	; (226a4 <wait_for_bootrom+0x160>)
   22678:	0011      	movs	r1, r2
   2267a:	0018      	movs	r0, r3
   2267c:	4b0d      	ldr	r3, [pc, #52]	; (226b4 <wait_for_bootrom+0x170>)
   2267e:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   22680:	2313      	movs	r3, #19
   22682:	18fb      	adds	r3, r7, r3
   22684:	781b      	ldrb	r3, [r3, #0]
   22686:	b25b      	sxtb	r3, r3
}
   22688:	0018      	movs	r0, r3
   2268a:	46bd      	mov	sp, r7
   2268c:	b008      	add	sp, #32
   2268e:	bd80      	pop	{r7, pc}
   22690:	13301354 	.word	0x13301354
   22694:	00001014 	.word	0x00001014
   22698:	000228cd 	.word	0x000228cd
   2269c:	0001ff7d 	.word	0x0001ff7d
   226a0:	000207bc 	.word	0x000207bc
   226a4:	000c000c 	.word	0x000c000c
   226a8:	10add09e 	.word	0x10add09e
   226ac:	3c1cd57d 	.word	0x3c1cd57d
   226b0:	000207ac 	.word	0x000207ac
   226b4:	00022911 	.word	0x00022911
   226b8:	0000108c 	.word	0x0000108c
   226bc:	000221ed 	.word	0x000221ed
   226c0:	0000039f 	.word	0x0000039f
   226c4:	000220bd 	.word	0x000220bd
   226c8:	00038790 	.word	0x00038790
   226cc:	0001db29 	.word	0x0001db29
   226d0:	0003879c 	.word	0x0003879c
   226d4:	00038770 	.word	0x00038770
   226d8:	ef522f61 	.word	0xef522f61

000226dc <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   226dc:	b580      	push	{r7, lr}
   226de:	b088      	sub	sp, #32
   226e0:	af00      	add	r7, sp, #0
   226e2:	0002      	movs	r2, r0
   226e4:	1dfb      	adds	r3, r7, #7
   226e6:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   226e8:	231f      	movs	r3, #31
   226ea:	18fb      	adds	r3, r7, r3
   226ec:	2200      	movs	r2, #0
   226ee:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   226f0:	2300      	movs	r3, #0
   226f2:	61bb      	str	r3, [r7, #24]
   226f4:	2300      	movs	r3, #0
   226f6:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   226f8:	2301      	movs	r3, #1
   226fa:	425b      	negs	r3, r3
   226fc:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   226fe:	4b1d      	ldr	r3, [pc, #116]	; (22774 <wait_for_firmware_start+0x98>)
   22700:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   22702:	4b1d      	ldr	r3, [pc, #116]	; (22778 <wait_for_firmware_start+0x9c>)
   22704:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   22706:	1dfb      	adds	r3, r7, #7
   22708:	781b      	ldrb	r3, [r3, #0]
   2270a:	2b02      	cmp	r3, #2
   2270c:	d003      	beq.n	22716 <wait_for_firmware_start+0x3a>
   2270e:	1dfb      	adds	r3, r7, #7
   22710:	781b      	ldrb	r3, [r3, #0]
   22712:	2b03      	cmp	r3, #3
   22714:	d119      	bne.n	2274a <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   22716:	4b19      	ldr	r3, [pc, #100]	; (2277c <wait_for_firmware_start+0xa0>)
   22718:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   2271a:	4b19      	ldr	r3, [pc, #100]	; (22780 <wait_for_firmware_start+0xa4>)
   2271c:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   2271e:	e014      	b.n	2274a <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   22720:	2002      	movs	r0, #2
   22722:	4b18      	ldr	r3, [pc, #96]	; (22784 <wait_for_firmware_start+0xa8>)
   22724:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   22726:	68fb      	ldr	r3, [r7, #12]
   22728:	0018      	movs	r0, r3
   2272a:	4b17      	ldr	r3, [pc, #92]	; (22788 <wait_for_firmware_start+0xac>)
   2272c:	4798      	blx	r3
   2272e:	0003      	movs	r3, r0
   22730:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   22732:	697b      	ldr	r3, [r7, #20]
   22734:	3301      	adds	r3, #1
   22736:	617b      	str	r3, [r7, #20]
   22738:	697a      	ldr	r2, [r7, #20]
   2273a:	693b      	ldr	r3, [r7, #16]
   2273c:	429a      	cmp	r2, r3
   2273e:	d304      	bcc.n	2274a <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   22740:	231f      	movs	r3, #31
   22742:	18fb      	adds	r3, r7, r3
   22744:	22fb      	movs	r2, #251	; 0xfb
   22746:	701a      	strb	r2, [r3, #0]
			goto ERR;
   22748:	e00c      	b.n	22764 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   2274a:	68ba      	ldr	r2, [r7, #8]
   2274c:	69bb      	ldr	r3, [r7, #24]
   2274e:	429a      	cmp	r2, r3
   22750:	d1e6      	bne.n	22720 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   22752:	68bb      	ldr	r3, [r7, #8]
   22754:	4a08      	ldr	r2, [pc, #32]	; (22778 <wait_for_firmware_start+0x9c>)
   22756:	4293      	cmp	r3, r2
   22758:	d104      	bne.n	22764 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   2275a:	4b06      	ldr	r3, [pc, #24]	; (22774 <wait_for_firmware_start+0x98>)
   2275c:	2100      	movs	r1, #0
   2275e:	0018      	movs	r0, r3
   22760:	4b0a      	ldr	r3, [pc, #40]	; (2278c <wait_for_firmware_start+0xb0>)
   22762:	4798      	blx	r3
	}
ERR:
	return ret;
   22764:	231f      	movs	r3, #31
   22766:	18fb      	adds	r3, r7, r3
   22768:	781b      	ldrb	r3, [r3, #0]
   2276a:	b25b      	sxtb	r3, r3
}
   2276c:	0018      	movs	r0, r3
   2276e:	46bd      	mov	sp, r7
   22770:	b008      	add	sp, #32
   22772:	bd80      	pop	{r7, pc}
   22774:	0000108c 	.word	0x0000108c
   22778:	02532636 	.word	0x02532636
   2277c:	000207ac 	.word	0x000207ac
   22780:	d75dc1c3 	.word	0xd75dc1c3
   22784:	0001ff7d 	.word	0x0001ff7d
   22788:	000228cd 	.word	0x000228cd
   2278c:	00022911 	.word	0x00022911

00022790 <chip_deinit>:

sint8 chip_deinit(void)
{
   22790:	b590      	push	{r4, r7, lr}
   22792:	b083      	sub	sp, #12
   22794:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   22796:	2300      	movs	r3, #0
   22798:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   2279a:	1dfc      	adds	r4, r7, #7
   2279c:	003a      	movs	r2, r7
   2279e:	23a0      	movs	r3, #160	; 0xa0
   227a0:	015b      	lsls	r3, r3, #5
   227a2:	0011      	movs	r1, r2
   227a4:	0018      	movs	r0, r3
   227a6:	4b20      	ldr	r3, [pc, #128]	; (22828 <chip_deinit+0x98>)
   227a8:	4798      	blx	r3
   227aa:	0003      	movs	r3, r0
   227ac:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   227ae:	1dfb      	adds	r3, r7, #7
   227b0:	781b      	ldrb	r3, [r3, #0]
   227b2:	b25b      	sxtb	r3, r3
   227b4:	2b00      	cmp	r3, #0
   227b6:	d00e      	beq.n	227d6 <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   227b8:	4a1c      	ldr	r2, [pc, #112]	; (2282c <chip_deinit+0x9c>)
   227ba:	491d      	ldr	r1, [pc, #116]	; (22830 <chip_deinit+0xa0>)
   227bc:	4b1d      	ldr	r3, [pc, #116]	; (22834 <chip_deinit+0xa4>)
   227be:	0018      	movs	r0, r3
   227c0:	4b1d      	ldr	r3, [pc, #116]	; (22838 <chip_deinit+0xa8>)
   227c2:	4798      	blx	r3
   227c4:	4b1d      	ldr	r3, [pc, #116]	; (2283c <chip_deinit+0xac>)
   227c6:	0018      	movs	r0, r3
   227c8:	4b1b      	ldr	r3, [pc, #108]	; (22838 <chip_deinit+0xa8>)
   227ca:	4798      	blx	r3
   227cc:	4b1c      	ldr	r3, [pc, #112]	; (22840 <chip_deinit+0xb0>)
   227ce:	0018      	movs	r0, r3
   227d0:	4b19      	ldr	r3, [pc, #100]	; (22838 <chip_deinit+0xa8>)
   227d2:	4798      	blx	r3
		goto ERR1;
   227d4:	e021      	b.n	2281a <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   227d6:	683b      	ldr	r3, [r7, #0]
   227d8:	4a1a      	ldr	r2, [pc, #104]	; (22844 <chip_deinit+0xb4>)
   227da:	4013      	ands	r3, r2
   227dc:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   227de:	683a      	ldr	r2, [r7, #0]
   227e0:	1dfc      	adds	r4, r7, #7
   227e2:	23a0      	movs	r3, #160	; 0xa0
   227e4:	015b      	lsls	r3, r3, #5
   227e6:	0011      	movs	r1, r2
   227e8:	0018      	movs	r0, r3
   227ea:	4b17      	ldr	r3, [pc, #92]	; (22848 <chip_deinit+0xb8>)
   227ec:	4798      	blx	r3
   227ee:	0003      	movs	r3, r0
   227f0:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   227f2:	1dfb      	adds	r3, r7, #7
   227f4:	781b      	ldrb	r3, [r3, #0]
   227f6:	b25b      	sxtb	r3, r3
   227f8:	2b00      	cmp	r3, #0
   227fa:	d00e      	beq.n	2281a <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   227fc:	4a13      	ldr	r2, [pc, #76]	; (2284c <chip_deinit+0xbc>)
   227fe:	490c      	ldr	r1, [pc, #48]	; (22830 <chip_deinit+0xa0>)
   22800:	4b0c      	ldr	r3, [pc, #48]	; (22834 <chip_deinit+0xa4>)
   22802:	0018      	movs	r0, r3
   22804:	4b0c      	ldr	r3, [pc, #48]	; (22838 <chip_deinit+0xa8>)
   22806:	4798      	blx	r3
   22808:	4b0c      	ldr	r3, [pc, #48]	; (2283c <chip_deinit+0xac>)
   2280a:	0018      	movs	r0, r3
   2280c:	4b0a      	ldr	r3, [pc, #40]	; (22838 <chip_deinit+0xa8>)
   2280e:	4798      	blx	r3
   22810:	4b0b      	ldr	r3, [pc, #44]	; (22840 <chip_deinit+0xb0>)
   22812:	0018      	movs	r0, r3
   22814:	4b08      	ldr	r3, [pc, #32]	; (22838 <chip_deinit+0xa8>)
   22816:	4798      	blx	r3
		goto ERR1;
   22818:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2281a:	1dfb      	adds	r3, r7, #7
   2281c:	781b      	ldrb	r3, [r3, #0]
   2281e:	b25b      	sxtb	r3, r3
}
   22820:	0018      	movs	r0, r3
   22822:	46bd      	mov	sp, r7
   22824:	b003      	add	sp, #12
   22826:	bd90      	pop	{r4, r7, pc}
   22828:	000228ed 	.word	0x000228ed
   2282c:	00000201 	.word	0x00000201
   22830:	000387dc 	.word	0x000387dc
   22834:	00038744 	.word	0x00038744
   22838:	0001db29 	.word	0x0001db29
   2283c:	000387b4 	.word	0x000387b4
   22840:	00038770 	.word	0x00038770
   22844:	fffffbff 	.word	0xfffffbff
   22848:	00022911 	.word	0x00022911
   2284c:	00000207 	.word	0x00000207

00022850 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   22850:	b590      	push	{r4, r7, lr}
   22852:	b085      	sub	sp, #20
   22854:	af00      	add	r7, sp, #0
   22856:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22858:	230f      	movs	r3, #15
   2285a:	18fb      	adds	r3, r7, r3
   2285c:	2200      	movs	r2, #0
   2285e:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   22860:	230f      	movs	r3, #15
   22862:	18fc      	adds	r4, r7, r3
   22864:	687b      	ldr	r3, [r7, #4]
   22866:	0018      	movs	r0, r3
   22868:	4b05      	ldr	r3, [pc, #20]	; (22880 <nm_bus_iface_init+0x30>)
   2286a:	4798      	blx	r3
   2286c:	0003      	movs	r3, r0
   2286e:	7023      	strb	r3, [r4, #0]
	return ret;
   22870:	230f      	movs	r3, #15
   22872:	18fb      	adds	r3, r7, r3
   22874:	781b      	ldrb	r3, [r3, #0]
   22876:	b25b      	sxtb	r3, r3
}
   22878:	0018      	movs	r0, r3
   2287a:	46bd      	mov	sp, r7
   2287c:	b005      	add	sp, #20
   2287e:	bd90      	pop	{r4, r7, pc}
   22880:	00020639 	.word	0x00020639

00022884 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   22884:	b590      	push	{r4, r7, lr}
   22886:	b083      	sub	sp, #12
   22888:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2288a:	1dfb      	adds	r3, r7, #7
   2288c:	2200      	movs	r2, #0
   2288e:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   22890:	1dfc      	adds	r4, r7, #7
   22892:	4b05      	ldr	r3, [pc, #20]	; (228a8 <nm_bus_iface_deinit+0x24>)
   22894:	4798      	blx	r3
   22896:	0003      	movs	r3, r0
   22898:	7023      	strb	r3, [r4, #0]

	return ret;
   2289a:	1dfb      	adds	r3, r7, #7
   2289c:	781b      	ldrb	r3, [r3, #0]
   2289e:	b25b      	sxtb	r3, r3
}
   228a0:	0018      	movs	r0, r3
   228a2:	46bd      	mov	sp, r7
   228a4:	b003      	add	sp, #12
   228a6:	bd90      	pop	{r4, r7, pc}
   228a8:	000207b1 	.word	0x000207b1

000228ac <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   228ac:	b580      	push	{r7, lr}
   228ae:	b082      	sub	sp, #8
   228b0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   228b2:	1dfb      	adds	r3, r7, #7
   228b4:	2200      	movs	r2, #0
   228b6:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   228b8:	4b03      	ldr	r3, [pc, #12]	; (228c8 <nm_bus_reset+0x1c>)
   228ba:	4798      	blx	r3
   228bc:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   228be:	0018      	movs	r0, r3
   228c0:	46bd      	mov	sp, r7
   228c2:	b002      	add	sp, #8
   228c4:	bd80      	pop	{r7, pc}
   228c6:	46c0      	nop			; (mov r8, r8)
   228c8:	000246d9 	.word	0x000246d9

000228cc <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   228cc:	b580      	push	{r7, lr}
   228ce:	b082      	sub	sp, #8
   228d0:	af00      	add	r7, sp, #0
   228d2:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   228d4:	687b      	ldr	r3, [r7, #4]
   228d6:	0018      	movs	r0, r3
   228d8:	4b03      	ldr	r3, [pc, #12]	; (228e8 <nm_read_reg+0x1c>)
   228da:	4798      	blx	r3
   228dc:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   228de:	0018      	movs	r0, r3
   228e0:	46bd      	mov	sp, r7
   228e2:	b002      	add	sp, #8
   228e4:	bd80      	pop	{r7, pc}
   228e6:	46c0      	nop			; (mov r8, r8)
   228e8:	0002486d 	.word	0x0002486d

000228ec <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   228ec:	b580      	push	{r7, lr}
   228ee:	b082      	sub	sp, #8
   228f0:	af00      	add	r7, sp, #0
   228f2:	6078      	str	r0, [r7, #4]
   228f4:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   228f6:	683a      	ldr	r2, [r7, #0]
   228f8:	687b      	ldr	r3, [r7, #4]
   228fa:	0011      	movs	r1, r2
   228fc:	0018      	movs	r0, r3
   228fe:	4b03      	ldr	r3, [pc, #12]	; (2290c <nm_read_reg_with_ret+0x20>)
   22900:	4798      	blx	r3
   22902:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   22904:	0018      	movs	r0, r3
   22906:	46bd      	mov	sp, r7
   22908:	b002      	add	sp, #8
   2290a:	bd80      	pop	{r7, pc}
   2290c:	00024891 	.word	0x00024891

00022910 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   22910:	b580      	push	{r7, lr}
   22912:	b082      	sub	sp, #8
   22914:	af00      	add	r7, sp, #0
   22916:	6078      	str	r0, [r7, #4]
   22918:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   2291a:	683a      	ldr	r2, [r7, #0]
   2291c:	687b      	ldr	r3, [r7, #4]
   2291e:	0011      	movs	r1, r2
   22920:	0018      	movs	r0, r3
   22922:	4b03      	ldr	r3, [pc, #12]	; (22930 <nm_write_reg+0x20>)
   22924:	4798      	blx	r3
   22926:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   22928:	0018      	movs	r0, r3
   2292a:	46bd      	mov	sp, r7
   2292c:	b002      	add	sp, #8
   2292e:	bd80      	pop	{r7, pc}
   22930:	000248e1 	.word	0x000248e1

00022934 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   22934:	b580      	push	{r7, lr}
   22936:	b084      	sub	sp, #16
   22938:	af00      	add	r7, sp, #0
   2293a:	60f8      	str	r0, [r7, #12]
   2293c:	60b9      	str	r1, [r7, #8]
   2293e:	1dbb      	adds	r3, r7, #6
   22940:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   22942:	1dbb      	adds	r3, r7, #6
   22944:	881a      	ldrh	r2, [r3, #0]
   22946:	68b9      	ldr	r1, [r7, #8]
   22948:	68fb      	ldr	r3, [r7, #12]
   2294a:	0018      	movs	r0, r3
   2294c:	4b03      	ldr	r3, [pc, #12]	; (2295c <p_nm_read_block+0x28>)
   2294e:	4798      	blx	r3
   22950:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   22952:	0018      	movs	r0, r3
   22954:	46bd      	mov	sp, r7
   22956:	b004      	add	sp, #16
   22958:	bd80      	pop	{r7, pc}
   2295a:	46c0      	nop			; (mov r8, r8)
   2295c:	00024931 	.word	0x00024931

00022960 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   22960:	b580      	push	{r7, lr}
   22962:	b086      	sub	sp, #24
   22964:	af00      	add	r7, sp, #0
   22966:	60f8      	str	r0, [r7, #12]
   22968:	60b9      	str	r1, [r7, #8]
   2296a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   2296c:	4b2d      	ldr	r3, [pc, #180]	; (22a24 <nm_read_block+0xc4>)
   2296e:	881a      	ldrh	r2, [r3, #0]
   22970:	2310      	movs	r3, #16
   22972:	18fb      	adds	r3, r7, r3
   22974:	3a08      	subs	r2, #8
   22976:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   22978:	2300      	movs	r3, #0
   2297a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   2297c:	2313      	movs	r3, #19
   2297e:	18fb      	adds	r3, r7, r3
   22980:	2200      	movs	r2, #0
   22982:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   22984:	2310      	movs	r3, #16
   22986:	18fb      	adds	r3, r7, r3
   22988:	881a      	ldrh	r2, [r3, #0]
   2298a:	687b      	ldr	r3, [r7, #4]
   2298c:	429a      	cmp	r2, r3
   2298e:	d313      	bcc.n	229b8 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   22990:	68ba      	ldr	r2, [r7, #8]
   22992:	697b      	ldr	r3, [r7, #20]
   22994:	18d1      	adds	r1, r2, r3
   22996:	687b      	ldr	r3, [r7, #4]
   22998:	b29a      	uxth	r2, r3
   2299a:	68fb      	ldr	r3, [r7, #12]
   2299c:	0018      	movs	r0, r3
   2299e:	4b22      	ldr	r3, [pc, #136]	; (22a28 <nm_read_block+0xc8>)
   229a0:	4798      	blx	r3
   229a2:	0003      	movs	r3, r0
   229a4:	b2da      	uxtb	r2, r3
   229a6:	2313      	movs	r3, #19
   229a8:	18fb      	adds	r3, r7, r3
   229aa:	781b      	ldrb	r3, [r3, #0]
   229ac:	18d3      	adds	r3, r2, r3
   229ae:	b2da      	uxtb	r2, r3
   229b0:	2313      	movs	r3, #19
   229b2:	18fb      	adds	r3, r7, r3
   229b4:	701a      	strb	r2, [r3, #0]
			break;
   229b6:	e02d      	b.n	22a14 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   229b8:	68ba      	ldr	r2, [r7, #8]
   229ba:	697b      	ldr	r3, [r7, #20]
   229bc:	18d1      	adds	r1, r2, r3
   229be:	2310      	movs	r3, #16
   229c0:	18fb      	adds	r3, r7, r3
   229c2:	881a      	ldrh	r2, [r3, #0]
   229c4:	68fb      	ldr	r3, [r7, #12]
   229c6:	0018      	movs	r0, r3
   229c8:	4b17      	ldr	r3, [pc, #92]	; (22a28 <nm_read_block+0xc8>)
   229ca:	4798      	blx	r3
   229cc:	0003      	movs	r3, r0
   229ce:	b2da      	uxtb	r2, r3
   229d0:	2313      	movs	r3, #19
   229d2:	18fb      	adds	r3, r7, r3
   229d4:	781b      	ldrb	r3, [r3, #0]
   229d6:	18d3      	adds	r3, r2, r3
   229d8:	b2da      	uxtb	r2, r3
   229da:	2313      	movs	r3, #19
   229dc:	18fb      	adds	r3, r7, r3
   229de:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   229e0:	2313      	movs	r3, #19
   229e2:	18fb      	adds	r3, r7, r3
   229e4:	781b      	ldrb	r3, [r3, #0]
   229e6:	b25b      	sxtb	r3, r3
   229e8:	2b00      	cmp	r3, #0
   229ea:	d112      	bne.n	22a12 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   229ec:	2310      	movs	r3, #16
   229ee:	18fb      	adds	r3, r7, r3
   229f0:	881b      	ldrh	r3, [r3, #0]
   229f2:	687a      	ldr	r2, [r7, #4]
   229f4:	1ad3      	subs	r3, r2, r3
   229f6:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   229f8:	2310      	movs	r3, #16
   229fa:	18fb      	adds	r3, r7, r3
   229fc:	881b      	ldrh	r3, [r3, #0]
   229fe:	697a      	ldr	r2, [r7, #20]
   22a00:	18d3      	adds	r3, r2, r3
   22a02:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   22a04:	2310      	movs	r3, #16
   22a06:	18fb      	adds	r3, r7, r3
   22a08:	881b      	ldrh	r3, [r3, #0]
   22a0a:	68fa      	ldr	r2, [r7, #12]
   22a0c:	18d3      	adds	r3, r2, r3
   22a0e:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   22a10:	e7b8      	b.n	22984 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   22a12:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   22a14:	2313      	movs	r3, #19
   22a16:	18fb      	adds	r3, r7, r3
   22a18:	781b      	ldrb	r3, [r3, #0]
   22a1a:	b25b      	sxtb	r3, r3
}
   22a1c:	0018      	movs	r0, r3
   22a1e:	46bd      	mov	sp, r7
   22a20:	b006      	add	sp, #24
   22a22:	bd80      	pop	{r7, pc}
   22a24:	20000118 	.word	0x20000118
   22a28:	00022935 	.word	0x00022935

00022a2c <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   22a2c:	b580      	push	{r7, lr}
   22a2e:	b084      	sub	sp, #16
   22a30:	af00      	add	r7, sp, #0
   22a32:	60f8      	str	r0, [r7, #12]
   22a34:	60b9      	str	r1, [r7, #8]
   22a36:	1dbb      	adds	r3, r7, #6
   22a38:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   22a3a:	1dbb      	adds	r3, r7, #6
   22a3c:	881a      	ldrh	r2, [r3, #0]
   22a3e:	68b9      	ldr	r1, [r7, #8]
   22a40:	68fb      	ldr	r3, [r7, #12]
   22a42:	0018      	movs	r0, r3
   22a44:	4b03      	ldr	r3, [pc, #12]	; (22a54 <p_nm_write_block+0x28>)
   22a46:	4798      	blx	r3
   22a48:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   22a4a:	0018      	movs	r0, r3
   22a4c:	46bd      	mov	sp, r7
   22a4e:	b004      	add	sp, #16
   22a50:	bd80      	pop	{r7, pc}
   22a52:	46c0      	nop			; (mov r8, r8)
   22a54:	00024989 	.word	0x00024989

00022a58 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   22a58:	b580      	push	{r7, lr}
   22a5a:	b086      	sub	sp, #24
   22a5c:	af00      	add	r7, sp, #0
   22a5e:	60f8      	str	r0, [r7, #12]
   22a60:	60b9      	str	r1, [r7, #8]
   22a62:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   22a64:	4b2d      	ldr	r3, [pc, #180]	; (22b1c <nm_write_block+0xc4>)
   22a66:	881a      	ldrh	r2, [r3, #0]
   22a68:	2310      	movs	r3, #16
   22a6a:	18fb      	adds	r3, r7, r3
   22a6c:	3a08      	subs	r2, #8
   22a6e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   22a70:	2300      	movs	r3, #0
   22a72:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   22a74:	2313      	movs	r3, #19
   22a76:	18fb      	adds	r3, r7, r3
   22a78:	2200      	movs	r2, #0
   22a7a:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   22a7c:	2310      	movs	r3, #16
   22a7e:	18fb      	adds	r3, r7, r3
   22a80:	881a      	ldrh	r2, [r3, #0]
   22a82:	687b      	ldr	r3, [r7, #4]
   22a84:	429a      	cmp	r2, r3
   22a86:	d313      	bcc.n	22ab0 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   22a88:	68ba      	ldr	r2, [r7, #8]
   22a8a:	697b      	ldr	r3, [r7, #20]
   22a8c:	18d1      	adds	r1, r2, r3
   22a8e:	687b      	ldr	r3, [r7, #4]
   22a90:	b29a      	uxth	r2, r3
   22a92:	68fb      	ldr	r3, [r7, #12]
   22a94:	0018      	movs	r0, r3
   22a96:	4b22      	ldr	r3, [pc, #136]	; (22b20 <nm_write_block+0xc8>)
   22a98:	4798      	blx	r3
   22a9a:	0003      	movs	r3, r0
   22a9c:	b2da      	uxtb	r2, r3
   22a9e:	2313      	movs	r3, #19
   22aa0:	18fb      	adds	r3, r7, r3
   22aa2:	781b      	ldrb	r3, [r3, #0]
   22aa4:	18d3      	adds	r3, r2, r3
   22aa6:	b2da      	uxtb	r2, r3
   22aa8:	2313      	movs	r3, #19
   22aaa:	18fb      	adds	r3, r7, r3
   22aac:	701a      	strb	r2, [r3, #0]
			break;
   22aae:	e02d      	b.n	22b0c <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   22ab0:	68ba      	ldr	r2, [r7, #8]
   22ab2:	697b      	ldr	r3, [r7, #20]
   22ab4:	18d1      	adds	r1, r2, r3
   22ab6:	2310      	movs	r3, #16
   22ab8:	18fb      	adds	r3, r7, r3
   22aba:	881a      	ldrh	r2, [r3, #0]
   22abc:	68fb      	ldr	r3, [r7, #12]
   22abe:	0018      	movs	r0, r3
   22ac0:	4b17      	ldr	r3, [pc, #92]	; (22b20 <nm_write_block+0xc8>)
   22ac2:	4798      	blx	r3
   22ac4:	0003      	movs	r3, r0
   22ac6:	b2da      	uxtb	r2, r3
   22ac8:	2313      	movs	r3, #19
   22aca:	18fb      	adds	r3, r7, r3
   22acc:	781b      	ldrb	r3, [r3, #0]
   22ace:	18d3      	adds	r3, r2, r3
   22ad0:	b2da      	uxtb	r2, r3
   22ad2:	2313      	movs	r3, #19
   22ad4:	18fb      	adds	r3, r7, r3
   22ad6:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   22ad8:	2313      	movs	r3, #19
   22ada:	18fb      	adds	r3, r7, r3
   22adc:	781b      	ldrb	r3, [r3, #0]
   22ade:	b25b      	sxtb	r3, r3
   22ae0:	2b00      	cmp	r3, #0
   22ae2:	d112      	bne.n	22b0a <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   22ae4:	2310      	movs	r3, #16
   22ae6:	18fb      	adds	r3, r7, r3
   22ae8:	881b      	ldrh	r3, [r3, #0]
   22aea:	687a      	ldr	r2, [r7, #4]
   22aec:	1ad3      	subs	r3, r2, r3
   22aee:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   22af0:	2310      	movs	r3, #16
   22af2:	18fb      	adds	r3, r7, r3
   22af4:	881b      	ldrh	r3, [r3, #0]
   22af6:	697a      	ldr	r2, [r7, #20]
   22af8:	18d3      	adds	r3, r2, r3
   22afa:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   22afc:	2310      	movs	r3, #16
   22afe:	18fb      	adds	r3, r7, r3
   22b00:	881b      	ldrh	r3, [r3, #0]
   22b02:	68fa      	ldr	r2, [r7, #12]
   22b04:	18d3      	adds	r3, r2, r3
   22b06:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   22b08:	e7b8      	b.n	22a7c <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   22b0a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   22b0c:	2313      	movs	r3, #19
   22b0e:	18fb      	adds	r3, r7, r3
   22b10:	781b      	ldrb	r3, [r3, #0]
   22b12:	b25b      	sxtb	r3, r3
}
   22b14:	0018      	movs	r0, r3
   22b16:	46bd      	mov	sp, r7
   22b18:	b006      	add	sp, #24
   22b1a:	bd80      	pop	{r7, pc}
   22b1c:	20000118 	.word	0x20000118
   22b20:	00022a2d 	.word	0x00022a2d

00022b24 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   22b24:	b590      	push	{r4, r7, lr}
   22b26:	b089      	sub	sp, #36	; 0x24
   22b28:	af00      	add	r7, sp, #0
   22b2a:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   22b2c:	2300      	movs	r3, #0
   22b2e:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   22b30:	231f      	movs	r3, #31
   22b32:	18fb      	adds	r3, r7, r3
   22b34:	2200      	movs	r2, #0
   22b36:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   22b38:	230c      	movs	r3, #12
   22b3a:	18fb      	adds	r3, r7, r3
   22b3c:	0018      	movs	r0, r3
   22b3e:	2308      	movs	r3, #8
   22b40:	001a      	movs	r2, r3
   22b42:	2100      	movs	r1, #0
   22b44:	4b64      	ldr	r3, [pc, #400]	; (22cd8 <nm_get_firmware_full_info+0x1b4>)
   22b46:	4798      	blx	r3
	if (pstrRev != NULL)
   22b48:	687b      	ldr	r3, [r7, #4]
   22b4a:	2b00      	cmp	r3, #0
   22b4c:	d100      	bne.n	22b50 <nm_get_firmware_full_info+0x2c>
   22b4e:	e0ba      	b.n	22cc6 <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   22b50:	687b      	ldr	r3, [r7, #4]
   22b52:	2228      	movs	r2, #40	; 0x28
   22b54:	2100      	movs	r1, #0
   22b56:	0018      	movs	r0, r3
   22b58:	4b60      	ldr	r3, [pc, #384]	; (22cdc <nm_get_firmware_full_info+0x1b8>)
   22b5a:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   22b5c:	231f      	movs	r3, #31
   22b5e:	18fc      	adds	r4, r7, r3
   22b60:	2314      	movs	r3, #20
   22b62:	18fb      	adds	r3, r7, r3
   22b64:	4a5e      	ldr	r2, [pc, #376]	; (22ce0 <nm_get_firmware_full_info+0x1bc>)
   22b66:	0019      	movs	r1, r3
   22b68:	0010      	movs	r0, r2
   22b6a:	4b5e      	ldr	r3, [pc, #376]	; (22ce4 <nm_get_firmware_full_info+0x1c0>)
   22b6c:	4798      	blx	r3
   22b6e:	0003      	movs	r3, r0
   22b70:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   22b72:	231f      	movs	r3, #31
   22b74:	18fb      	adds	r3, r7, r3
   22b76:	781b      	ldrb	r3, [r3, #0]
   22b78:	b25b      	sxtb	r3, r3
   22b7a:	2b00      	cmp	r3, #0
   22b7c:	d000      	beq.n	22b80 <nm_get_firmware_full_info+0x5c>
   22b7e:	e0a2      	b.n	22cc6 <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   22b80:	697b      	ldr	r3, [r7, #20]
   22b82:	2b00      	cmp	r3, #0
   22b84:	d100      	bne.n	22b88 <nm_get_firmware_full_info+0x64>
   22b86:	e09a      	b.n	22cbe <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   22b88:	697b      	ldr	r3, [r7, #20]
   22b8a:	22c0      	movs	r2, #192	; 0xc0
   22b8c:	0292      	lsls	r2, r2, #10
   22b8e:	4313      	orrs	r3, r2
   22b90:	221f      	movs	r2, #31
   22b92:	18bc      	adds	r4, r7, r2
   22b94:	220c      	movs	r2, #12
   22b96:	18b9      	adds	r1, r7, r2
   22b98:	2208      	movs	r2, #8
   22b9a:	0018      	movs	r0, r3
   22b9c:	4b52      	ldr	r3, [pc, #328]	; (22ce8 <nm_get_firmware_full_info+0x1c4>)
   22b9e:	4798      	blx	r3
   22ba0:	0003      	movs	r3, r0
   22ba2:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   22ba4:	231f      	movs	r3, #31
   22ba6:	18fb      	adds	r3, r7, r3
   22ba8:	781b      	ldrb	r3, [r3, #0]
   22baa:	b25b      	sxtb	r3, r3
   22bac:	2b00      	cmp	r3, #0
   22bae:	d000      	beq.n	22bb2 <nm_get_firmware_full_info+0x8e>
   22bb0:	e089      	b.n	22cc6 <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   22bb2:	230c      	movs	r3, #12
   22bb4:	18fb      	adds	r3, r7, r3
   22bb6:	685b      	ldr	r3, [r3, #4]
   22bb8:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   22bba:	697b      	ldr	r3, [r7, #20]
   22bbc:	041b      	lsls	r3, r3, #16
   22bbe:	0c1b      	lsrs	r3, r3, #16
   22bc0:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   22bc2:	697b      	ldr	r3, [r7, #20]
   22bc4:	2b00      	cmp	r3, #0
   22bc6:	d100      	bne.n	22bca <nm_get_firmware_full_info+0xa6>
   22bc8:	e074      	b.n	22cb4 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   22bca:	697b      	ldr	r3, [r7, #20]
   22bcc:	22c0      	movs	r2, #192	; 0xc0
   22bce:	0292      	lsls	r2, r2, #10
   22bd0:	4313      	orrs	r3, r2
   22bd2:	221f      	movs	r2, #31
   22bd4:	18bc      	adds	r4, r7, r2
   22bd6:	6879      	ldr	r1, [r7, #4]
   22bd8:	2228      	movs	r2, #40	; 0x28
   22bda:	0018      	movs	r0, r3
   22bdc:	4b42      	ldr	r3, [pc, #264]	; (22ce8 <nm_get_firmware_full_info+0x1c4>)
   22bde:	4798      	blx	r3
   22be0:	0003      	movs	r3, r0
   22be2:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   22be4:	231f      	movs	r3, #31
   22be6:	18fb      	adds	r3, r7, r3
   22be8:	781b      	ldrb	r3, [r3, #0]
   22bea:	b25b      	sxtb	r3, r3
   22bec:	2b00      	cmp	r3, #0
   22bee:	d16a      	bne.n	22cc6 <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   22bf0:	687b      	ldr	r3, [r7, #4]
   22bf2:	791b      	ldrb	r3, [r3, #4]
   22bf4:	021b      	lsls	r3, r3, #8
   22bf6:	b21a      	sxth	r2, r3
   22bf8:	687b      	ldr	r3, [r7, #4]
   22bfa:	795b      	ldrb	r3, [r3, #5]
   22bfc:	011b      	lsls	r3, r3, #4
   22bfe:	b21b      	sxth	r3, r3
   22c00:	21ff      	movs	r1, #255	; 0xff
   22c02:	400b      	ands	r3, r1
   22c04:	b21b      	sxth	r3, r3
   22c06:	4313      	orrs	r3, r2
   22c08:	b21a      	sxth	r2, r3
   22c0a:	687b      	ldr	r3, [r7, #4]
   22c0c:	799b      	ldrb	r3, [r3, #6]
   22c0e:	b21b      	sxth	r3, r3
   22c10:	210f      	movs	r1, #15
   22c12:	400b      	ands	r3, r1
   22c14:	b21b      	sxth	r3, r3
   22c16:	4313      	orrs	r3, r2
   22c18:	b21a      	sxth	r2, r3
   22c1a:	231c      	movs	r3, #28
   22c1c:	18fb      	adds	r3, r7, r3
   22c1e:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   22c20:	231a      	movs	r3, #26
   22c22:	18fb      	adds	r3, r7, r3
   22c24:	4a31      	ldr	r2, [pc, #196]	; (22cec <nm_get_firmware_full_info+0x1c8>)
   22c26:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   22c28:	687b      	ldr	r3, [r7, #4]
   22c2a:	79db      	ldrb	r3, [r3, #7]
   22c2c:	021b      	lsls	r3, r3, #8
   22c2e:	b21a      	sxth	r2, r3
   22c30:	687b      	ldr	r3, [r7, #4]
   22c32:	7a1b      	ldrb	r3, [r3, #8]
   22c34:	011b      	lsls	r3, r3, #4
   22c36:	b21b      	sxth	r3, r3
   22c38:	21ff      	movs	r1, #255	; 0xff
   22c3a:	400b      	ands	r3, r1
   22c3c:	b21b      	sxth	r3, r3
   22c3e:	4313      	orrs	r3, r2
   22c40:	b21a      	sxth	r2, r3
   22c42:	687b      	ldr	r3, [r7, #4]
   22c44:	7a5b      	ldrb	r3, [r3, #9]
   22c46:	b21b      	sxth	r3, r3
   22c48:	210f      	movs	r1, #15
   22c4a:	400b      	ands	r3, r1
   22c4c:	b21b      	sxth	r3, r3
   22c4e:	4313      	orrs	r3, r2
   22c50:	b21a      	sxth	r2, r3
   22c52:	2318      	movs	r3, #24
   22c54:	18fb      	adds	r3, r7, r3
   22c56:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   22c58:	231c      	movs	r3, #28
   22c5a:	18fb      	adds	r3, r7, r3
   22c5c:	881b      	ldrh	r3, [r3, #0]
   22c5e:	2b00      	cmp	r3, #0
   22c60:	d009      	beq.n	22c76 <nm_get_firmware_full_info+0x152>
   22c62:	2318      	movs	r3, #24
   22c64:	18fb      	adds	r3, r7, r3
   22c66:	881b      	ldrh	r3, [r3, #0]
   22c68:	2b00      	cmp	r3, #0
   22c6a:	d004      	beq.n	22c76 <nm_get_firmware_full_info+0x152>
   22c6c:	2318      	movs	r3, #24
   22c6e:	18fb      	adds	r3, r7, r3
   22c70:	881b      	ldrh	r3, [r3, #0]
   22c72:	2b00      	cmp	r3, #0
   22c74:	d104      	bne.n	22c80 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   22c76:	231f      	movs	r3, #31
   22c78:	18fb      	adds	r3, r7, r3
   22c7a:	22f4      	movs	r2, #244	; 0xf4
   22c7c:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22c7e:	e022      	b.n	22cc6 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   22c80:	231a      	movs	r3, #26
   22c82:	18fa      	adds	r2, r7, r3
   22c84:	2318      	movs	r3, #24
   22c86:	18fb      	adds	r3, r7, r3
   22c88:	8812      	ldrh	r2, [r2, #0]
   22c8a:	881b      	ldrh	r3, [r3, #0]
   22c8c:	429a      	cmp	r2, r3
   22c8e:	d204      	bcs.n	22c9a <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   22c90:	231f      	movs	r3, #31
   22c92:	18fb      	adds	r3, r7, r3
   22c94:	22f3      	movs	r2, #243	; 0xf3
   22c96:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22c98:	e015      	b.n	22cc6 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   22c9a:	231a      	movs	r3, #26
   22c9c:	18fa      	adds	r2, r7, r3
   22c9e:	231c      	movs	r3, #28
   22ca0:	18fb      	adds	r3, r7, r3
   22ca2:	8812      	ldrh	r2, [r2, #0]
   22ca4:	881b      	ldrh	r3, [r3, #0]
   22ca6:	429a      	cmp	r2, r3
   22ca8:	d90d      	bls.n	22cc6 <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   22caa:	231f      	movs	r3, #31
   22cac:	18fb      	adds	r3, r7, r3
   22cae:	22f3      	movs	r2, #243	; 0xf3
   22cb0:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22cb2:	e008      	b.n	22cc6 <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   22cb4:	231f      	movs	r3, #31
   22cb6:	18fb      	adds	r3, r7, r3
   22cb8:	22f4      	movs	r2, #244	; 0xf4
   22cba:	701a      	strb	r2, [r3, #0]
   22cbc:	e003      	b.n	22cc6 <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   22cbe:	231f      	movs	r3, #31
   22cc0:	18fb      	adds	r3, r7, r3
   22cc2:	22f4      	movs	r2, #244	; 0xf4
   22cc4:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   22cc6:	231f      	movs	r3, #31
   22cc8:	18fb      	adds	r3, r7, r3
   22cca:	781b      	ldrb	r3, [r3, #0]
   22ccc:	b25b      	sxtb	r3, r3
}
   22cce:	0018      	movs	r0, r3
   22cd0:	46bd      	mov	sp, r7
   22cd2:	b009      	add	sp, #36	; 0x24
   22cd4:	bd90      	pop	{r4, r7, pc}
   22cd6:	46c0      	nop			; (mov r8, r8)
   22cd8:	0003462f 	.word	0x0003462f
   22cdc:	0002085d 	.word	0x0002085d
   22ce0:	000c0008 	.word	0x000c0008
   22ce4:	000228ed 	.word	0x000228ed
   22ce8:	00022961 	.word	0x00022961
   22cec:	00001354 	.word	0x00001354

00022cf0 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   22cf0:	b590      	push	{r4, r7, lr}
   22cf2:	b085      	sub	sp, #20
   22cf4:	af00      	add	r7, sp, #0
   22cf6:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22cf8:	230f      	movs	r3, #15
   22cfa:	18fb      	adds	r3, r7, r3
   22cfc:	2200      	movs	r2, #0
   22cfe:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   22d00:	687b      	ldr	r3, [r7, #4]
   22d02:	2b00      	cmp	r3, #0
   22d04:	d013      	beq.n	22d2e <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   22d06:	230e      	movs	r3, #14
   22d08:	18fb      	adds	r3, r7, r3
   22d0a:	687a      	ldr	r2, [r7, #4]
   22d0c:	7812      	ldrb	r2, [r2, #0]
   22d0e:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   22d10:	230e      	movs	r3, #14
   22d12:	18fb      	adds	r3, r7, r3
   22d14:	781b      	ldrb	r3, [r3, #0]
   22d16:	2b00      	cmp	r3, #0
   22d18:	d004      	beq.n	22d24 <nm_drv_init+0x34>
   22d1a:	230e      	movs	r3, #14
   22d1c:	18fb      	adds	r3, r7, r3
   22d1e:	781b      	ldrb	r3, [r3, #0]
   22d20:	2b04      	cmp	r3, #4
   22d22:	d908      	bls.n	22d36 <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   22d24:	230e      	movs	r3, #14
   22d26:	18fb      	adds	r3, r7, r3
   22d28:	2201      	movs	r2, #1
   22d2a:	701a      	strb	r2, [r3, #0]
   22d2c:	e003      	b.n	22d36 <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   22d2e:	230e      	movs	r3, #14
   22d30:	18fb      	adds	r3, r7, r3
   22d32:	2201      	movs	r2, #1
   22d34:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   22d36:	230f      	movs	r3, #15
   22d38:	18fc      	adds	r4, r7, r3
   22d3a:	2000      	movs	r0, #0
   22d3c:	4b41      	ldr	r3, [pc, #260]	; (22e44 <nm_drv_init+0x154>)
   22d3e:	4798      	blx	r3
   22d40:	0003      	movs	r3, r0
   22d42:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22d44:	230f      	movs	r3, #15
   22d46:	18fb      	adds	r3, r7, r3
   22d48:	781b      	ldrb	r3, [r3, #0]
   22d4a:	b25b      	sxtb	r3, r3
   22d4c:	2b00      	cmp	r3, #0
   22d4e:	d00f      	beq.n	22d70 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   22d50:	2390      	movs	r3, #144	; 0x90
   22d52:	005a      	lsls	r2, r3, #1
   22d54:	493c      	ldr	r1, [pc, #240]	; (22e48 <nm_drv_init+0x158>)
   22d56:	4b3d      	ldr	r3, [pc, #244]	; (22e4c <nm_drv_init+0x15c>)
   22d58:	0018      	movs	r0, r3
   22d5a:	4b3d      	ldr	r3, [pc, #244]	; (22e50 <nm_drv_init+0x160>)
   22d5c:	4798      	blx	r3
   22d5e:	4b3d      	ldr	r3, [pc, #244]	; (22e54 <nm_drv_init+0x164>)
   22d60:	0018      	movs	r0, r3
   22d62:	4b3b      	ldr	r3, [pc, #236]	; (22e50 <nm_drv_init+0x160>)
   22d64:	4798      	blx	r3
   22d66:	4b3c      	ldr	r3, [pc, #240]	; (22e58 <nm_drv_init+0x168>)
   22d68:	0018      	movs	r0, r3
   22d6a:	4b39      	ldr	r3, [pc, #228]	; (22e50 <nm_drv_init+0x160>)
   22d6c:	4798      	blx	r3
		goto ERR1;
   22d6e:	e061      	b.n	22e34 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   22d70:	4b3a      	ldr	r3, [pc, #232]	; (22e5c <nm_drv_init+0x16c>)
   22d72:	0018      	movs	r0, r3
   22d74:	4b36      	ldr	r3, [pc, #216]	; (22e50 <nm_drv_init+0x160>)
   22d76:	4798      	blx	r3
   22d78:	4b39      	ldr	r3, [pc, #228]	; (22e60 <nm_drv_init+0x170>)
   22d7a:	4798      	blx	r3
   22d7c:	0002      	movs	r2, r0
   22d7e:	4b39      	ldr	r3, [pc, #228]	; (22e64 <nm_drv_init+0x174>)
   22d80:	0011      	movs	r1, r2
   22d82:	0018      	movs	r0, r3
   22d84:	4b32      	ldr	r3, [pc, #200]	; (22e50 <nm_drv_init+0x160>)
   22d86:	4798      	blx	r3
   22d88:	4b33      	ldr	r3, [pc, #204]	; (22e58 <nm_drv_init+0x168>)
   22d8a:	0018      	movs	r0, r3
   22d8c:	4b30      	ldr	r3, [pc, #192]	; (22e50 <nm_drv_init+0x160>)
   22d8e:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   22d90:	4b35      	ldr	r3, [pc, #212]	; (22e68 <nm_drv_init+0x178>)
   22d92:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   22d94:	230f      	movs	r3, #15
   22d96:	18fc      	adds	r4, r7, r3
   22d98:	230e      	movs	r3, #14
   22d9a:	18fb      	adds	r3, r7, r3
   22d9c:	781b      	ldrb	r3, [r3, #0]
   22d9e:	0018      	movs	r0, r3
   22da0:	4b32      	ldr	r3, [pc, #200]	; (22e6c <nm_drv_init+0x17c>)
   22da2:	4798      	blx	r3
   22da4:	0003      	movs	r3, r0
   22da6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22da8:	230f      	movs	r3, #15
   22daa:	18fb      	adds	r3, r7, r3
   22dac:	781b      	ldrb	r3, [r3, #0]
   22dae:	b25b      	sxtb	r3, r3
   22db0:	2b00      	cmp	r3, #0
   22db2:	d13a      	bne.n	22e2a <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   22db4:	230f      	movs	r3, #15
   22db6:	18fc      	adds	r4, r7, r3
   22db8:	230e      	movs	r3, #14
   22dba:	18fb      	adds	r3, r7, r3
   22dbc:	781b      	ldrb	r3, [r3, #0]
   22dbe:	0018      	movs	r0, r3
   22dc0:	4b2b      	ldr	r3, [pc, #172]	; (22e70 <nm_drv_init+0x180>)
   22dc2:	4798      	blx	r3
   22dc4:	0003      	movs	r3, r0
   22dc6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22dc8:	230f      	movs	r3, #15
   22dca:	18fb      	adds	r3, r7, r3
   22dcc:	781b      	ldrb	r3, [r3, #0]
   22dce:	b25b      	sxtb	r3, r3
   22dd0:	2b00      	cmp	r3, #0
   22dd2:	d12c      	bne.n	22e2e <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   22dd4:	230e      	movs	r3, #14
   22dd6:	18fb      	adds	r3, r7, r3
   22dd8:	781b      	ldrb	r3, [r3, #0]
   22dda:	2b02      	cmp	r3, #2
   22ddc:	d02a      	beq.n	22e34 <nm_drv_init+0x144>
   22dde:	230e      	movs	r3, #14
   22de0:	18fb      	adds	r3, r7, r3
   22de2:	781b      	ldrb	r3, [r3, #0]
   22de4:	2b03      	cmp	r3, #3
   22de6:	d025      	beq.n	22e34 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   22de8:	230f      	movs	r3, #15
   22dea:	18fc      	adds	r4, r7, r3
   22dec:	4b21      	ldr	r3, [pc, #132]	; (22e74 <nm_drv_init+0x184>)
   22dee:	4798      	blx	r3
   22df0:	0003      	movs	r3, r0
   22df2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22df4:	230f      	movs	r3, #15
   22df6:	18fb      	adds	r3, r7, r3
   22df8:	781b      	ldrb	r3, [r3, #0]
   22dfa:	b25b      	sxtb	r3, r3
   22dfc:	2b00      	cmp	r3, #0
   22dfe:	d00f      	beq.n	22e20 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   22e00:	23a7      	movs	r3, #167	; 0xa7
   22e02:	005a      	lsls	r2, r3, #1
   22e04:	4910      	ldr	r1, [pc, #64]	; (22e48 <nm_drv_init+0x158>)
   22e06:	4b11      	ldr	r3, [pc, #68]	; (22e4c <nm_drv_init+0x15c>)
   22e08:	0018      	movs	r0, r3
   22e0a:	4b11      	ldr	r3, [pc, #68]	; (22e50 <nm_drv_init+0x160>)
   22e0c:	4798      	blx	r3
   22e0e:	4b1a      	ldr	r3, [pc, #104]	; (22e78 <nm_drv_init+0x188>)
   22e10:	0018      	movs	r0, r3
   22e12:	4b0f      	ldr	r3, [pc, #60]	; (22e50 <nm_drv_init+0x160>)
   22e14:	4798      	blx	r3
   22e16:	4b10      	ldr	r3, [pc, #64]	; (22e58 <nm_drv_init+0x168>)
   22e18:	0018      	movs	r0, r3
   22e1a:	4b0d      	ldr	r3, [pc, #52]	; (22e50 <nm_drv_init+0x160>)
   22e1c:	4798      	blx	r3
		goto ERR2;
   22e1e:	e007      	b.n	22e30 <nm_drv_init+0x140>
	}
	return ret;
   22e20:	230f      	movs	r3, #15
   22e22:	18fb      	adds	r3, r7, r3
   22e24:	781b      	ldrb	r3, [r3, #0]
   22e26:	b25b      	sxtb	r3, r3
   22e28:	e008      	b.n	22e3c <nm_drv_init+0x14c>
		goto ERR2;
   22e2a:	46c0      	nop			; (mov r8, r8)
   22e2c:	e000      	b.n	22e30 <nm_drv_init+0x140>
		goto ERR2;
   22e2e:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   22e30:	4b12      	ldr	r3, [pc, #72]	; (22e7c <nm_drv_init+0x18c>)
   22e32:	4798      	blx	r3
ERR1:
	return ret;
   22e34:	230f      	movs	r3, #15
   22e36:	18fb      	adds	r3, r7, r3
   22e38:	781b      	ldrb	r3, [r3, #0]
   22e3a:	b25b      	sxtb	r3, r3
}
   22e3c:	0018      	movs	r0, r3
   22e3e:	46bd      	mov	sp, r7
   22e40:	b005      	add	sp, #20
   22e42:	bd90      	pop	{r4, r7, pc}
   22e44:	00022851 	.word	0x00022851
   22e48:	000388b8 	.word	0x000388b8
   22e4c:	000387e8 	.word	0x000387e8
   22e50:	0001db29 	.word	0x0001db29
   22e54:	000387fc 	.word	0x000387fc
   22e58:	00038818 	.word	0x00038818
   22e5c:	0003881c 	.word	0x0003881c
   22e60:	000221ed 	.word	0x000221ed
   22e64:	00038828 	.word	0x00038828
   22e68:	00024709 	.word	0x00024709
   22e6c:	00022545 	.word	0x00022545
   22e70:	000226dd 	.word	0x000226dd
   22e74:	00022139 	.word	0x00022139
   22e78:	00038838 	.word	0x00038838
   22e7c:	00022885 	.word	0x00022885

00022e80 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   22e80:	b590      	push	{r4, r7, lr}
   22e82:	b085      	sub	sp, #20
   22e84:	af00      	add	r7, sp, #0
   22e86:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   22e88:	230f      	movs	r3, #15
   22e8a:	18fc      	adds	r4, r7, r3
   22e8c:	4b2e      	ldr	r3, [pc, #184]	; (22f48 <nm_drv_deinit+0xc8>)
   22e8e:	4798      	blx	r3
   22e90:	0003      	movs	r3, r0
   22e92:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22e94:	230f      	movs	r3, #15
   22e96:	18fb      	adds	r3, r7, r3
   22e98:	781b      	ldrb	r3, [r3, #0]
   22e9a:	b25b      	sxtb	r3, r3
   22e9c:	2b00      	cmp	r3, #0
   22e9e:	d010      	beq.n	22ec2 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   22ea0:	2366      	movs	r3, #102	; 0x66
   22ea2:	33ff      	adds	r3, #255	; 0xff
   22ea4:	001a      	movs	r2, r3
   22ea6:	4929      	ldr	r1, [pc, #164]	; (22f4c <nm_drv_deinit+0xcc>)
   22ea8:	4b29      	ldr	r3, [pc, #164]	; (22f50 <nm_drv_deinit+0xd0>)
   22eaa:	0018      	movs	r0, r3
   22eac:	4b29      	ldr	r3, [pc, #164]	; (22f54 <nm_drv_deinit+0xd4>)
   22eae:	4798      	blx	r3
   22eb0:	4b29      	ldr	r3, [pc, #164]	; (22f58 <nm_drv_deinit+0xd8>)
   22eb2:	0018      	movs	r0, r3
   22eb4:	4b27      	ldr	r3, [pc, #156]	; (22f54 <nm_drv_deinit+0xd4>)
   22eb6:	4798      	blx	r3
   22eb8:	4b28      	ldr	r3, [pc, #160]	; (22f5c <nm_drv_deinit+0xdc>)
   22eba:	0018      	movs	r0, r3
   22ebc:	4b25      	ldr	r3, [pc, #148]	; (22f54 <nm_drv_deinit+0xd4>)
   22ebe:	4798      	blx	r3
		goto ERR1;
   22ec0:	e03a      	b.n	22f38 <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   22ec2:	230f      	movs	r3, #15
   22ec4:	18fc      	adds	r4, r7, r3
   22ec6:	2000      	movs	r0, #0
   22ec8:	4b25      	ldr	r3, [pc, #148]	; (22f60 <nm_drv_deinit+0xe0>)
   22eca:	4798      	blx	r3
   22ecc:	0003      	movs	r3, r0
   22ece:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22ed0:	230f      	movs	r3, #15
   22ed2:	18fb      	adds	r3, r7, r3
   22ed4:	781b      	ldrb	r3, [r3, #0]
   22ed6:	b25b      	sxtb	r3, r3
   22ed8:	2b00      	cmp	r3, #0
   22eda:	d00f      	beq.n	22efc <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   22edc:	23b6      	movs	r3, #182	; 0xb6
   22ede:	005a      	lsls	r2, r3, #1
   22ee0:	491a      	ldr	r1, [pc, #104]	; (22f4c <nm_drv_deinit+0xcc>)
   22ee2:	4b1b      	ldr	r3, [pc, #108]	; (22f50 <nm_drv_deinit+0xd0>)
   22ee4:	0018      	movs	r0, r3
   22ee6:	4b1b      	ldr	r3, [pc, #108]	; (22f54 <nm_drv_deinit+0xd4>)
   22ee8:	4798      	blx	r3
   22eea:	4b1e      	ldr	r3, [pc, #120]	; (22f64 <nm_drv_deinit+0xe4>)
   22eec:	0018      	movs	r0, r3
   22eee:	4b19      	ldr	r3, [pc, #100]	; (22f54 <nm_drv_deinit+0xd4>)
   22ef0:	4798      	blx	r3
   22ef2:	4b1a      	ldr	r3, [pc, #104]	; (22f5c <nm_drv_deinit+0xdc>)
   22ef4:	0018      	movs	r0, r3
   22ef6:	4b17      	ldr	r3, [pc, #92]	; (22f54 <nm_drv_deinit+0xd4>)
   22ef8:	4798      	blx	r3
		goto ERR1;
   22efa:	e01d      	b.n	22f38 <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   22efc:	230f      	movs	r3, #15
   22efe:	18fc      	adds	r4, r7, r3
   22f00:	4b19      	ldr	r3, [pc, #100]	; (22f68 <nm_drv_deinit+0xe8>)
   22f02:	4798      	blx	r3
   22f04:	0003      	movs	r3, r0
   22f06:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22f08:	230f      	movs	r3, #15
   22f0a:	18fb      	adds	r3, r7, r3
   22f0c:	781b      	ldrb	r3, [r3, #0]
   22f0e:	b25b      	sxtb	r3, r3
   22f10:	2b00      	cmp	r3, #0
   22f12:	d00f      	beq.n	22f34 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   22f14:	23b9      	movs	r3, #185	; 0xb9
   22f16:	005a      	lsls	r2, r3, #1
   22f18:	490c      	ldr	r1, [pc, #48]	; (22f4c <nm_drv_deinit+0xcc>)
   22f1a:	4b0d      	ldr	r3, [pc, #52]	; (22f50 <nm_drv_deinit+0xd0>)
   22f1c:	0018      	movs	r0, r3
   22f1e:	4b0d      	ldr	r3, [pc, #52]	; (22f54 <nm_drv_deinit+0xd4>)
   22f20:	4798      	blx	r3
   22f22:	4b12      	ldr	r3, [pc, #72]	; (22f6c <nm_drv_deinit+0xec>)
   22f24:	0018      	movs	r0, r3
   22f26:	4b0b      	ldr	r3, [pc, #44]	; (22f54 <nm_drv_deinit+0xd4>)
   22f28:	4798      	blx	r3
   22f2a:	4b0c      	ldr	r3, [pc, #48]	; (22f5c <nm_drv_deinit+0xdc>)
   22f2c:	0018      	movs	r0, r3
   22f2e:	4b09      	ldr	r3, [pc, #36]	; (22f54 <nm_drv_deinit+0xd4>)
   22f30:	4798      	blx	r3
		goto ERR1;
   22f32:	e001      	b.n	22f38 <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   22f34:	4b0e      	ldr	r3, [pc, #56]	; (22f70 <nm_drv_deinit+0xf0>)
   22f36:	4798      	blx	r3
#endif

ERR1:
	return ret;
   22f38:	230f      	movs	r3, #15
   22f3a:	18fb      	adds	r3, r7, r3
   22f3c:	781b      	ldrb	r3, [r3, #0]
   22f3e:	b25b      	sxtb	r3, r3
}
   22f40:	0018      	movs	r0, r3
   22f42:	46bd      	mov	sp, r7
   22f44:	b005      	add	sp, #20
   22f46:	bd90      	pop	{r4, r7, pc}
   22f48:	00022791 	.word	0x00022791
   22f4c:	000388c4 	.word	0x000388c4
   22f50:	000387e8 	.word	0x000387e8
   22f54:	0001db29 	.word	0x0001db29
   22f58:	00038858 	.word	0x00038858
   22f5c:	00038818 	.word	0x00038818
   22f60:	00025bb1 	.word	0x00025bb1
   22f64:	00038878 	.word	0x00038878
   22f68:	00022885 	.word	0x00022885
   22f6c:	0003889c 	.word	0x0003889c
   22f70:	00024855 	.word	0x00024855

00022f74 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   22f74:	b580      	push	{r7, lr}
   22f76:	b086      	sub	sp, #24
   22f78:	af00      	add	r7, sp, #0
   22f7a:	6078      	str	r0, [r7, #4]
   22f7c:	000a      	movs	r2, r1
   22f7e:	1cbb      	adds	r3, r7, #2
   22f80:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   22f82:	230c      	movs	r3, #12
   22f84:	18fb      	adds	r3, r7, r3
   22f86:	2200      	movs	r2, #0
   22f88:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   22f8a:	230c      	movs	r3, #12
   22f8c:	18fb      	adds	r3, r7, r3
   22f8e:	687a      	ldr	r2, [r7, #4]
   22f90:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   22f92:	230c      	movs	r3, #12
   22f94:	18fb      	adds	r3, r7, r3
   22f96:	1cba      	adds	r2, r7, #2
   22f98:	8812      	ldrh	r2, [r2, #0]
   22f9a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   22f9c:	230c      	movs	r3, #12
   22f9e:	18fb      	adds	r3, r7, r3
   22fa0:	0019      	movs	r1, r3
   22fa2:	2003      	movs	r0, #3
   22fa4:	4b03      	ldr	r3, [pc, #12]	; (22fb4 <nmi_spi_read+0x40>)
   22fa6:	4798      	blx	r3
   22fa8:	0003      	movs	r3, r0
}
   22faa:	0018      	movs	r0, r3
   22fac:	46bd      	mov	sp, r7
   22fae:	b006      	add	sp, #24
   22fb0:	bd80      	pop	{r7, pc}
   22fb2:	46c0      	nop			; (mov r8, r8)
   22fb4:	00020721 	.word	0x00020721

00022fb8 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   22fb8:	b580      	push	{r7, lr}
   22fba:	b086      	sub	sp, #24
   22fbc:	af00      	add	r7, sp, #0
   22fbe:	6078      	str	r0, [r7, #4]
   22fc0:	000a      	movs	r2, r1
   22fc2:	1cbb      	adds	r3, r7, #2
   22fc4:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   22fc6:	230c      	movs	r3, #12
   22fc8:	18fb      	adds	r3, r7, r3
   22fca:	687a      	ldr	r2, [r7, #4]
   22fcc:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   22fce:	230c      	movs	r3, #12
   22fd0:	18fb      	adds	r3, r7, r3
   22fd2:	2200      	movs	r2, #0
   22fd4:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   22fd6:	230c      	movs	r3, #12
   22fd8:	18fb      	adds	r3, r7, r3
   22fda:	1cba      	adds	r2, r7, #2
   22fdc:	8812      	ldrh	r2, [r2, #0]
   22fde:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   22fe0:	230c      	movs	r3, #12
   22fe2:	18fb      	adds	r3, r7, r3
   22fe4:	0019      	movs	r1, r3
   22fe6:	2003      	movs	r0, #3
   22fe8:	4b03      	ldr	r3, [pc, #12]	; (22ff8 <nmi_spi_write+0x40>)
   22fea:	4798      	blx	r3
   22fec:	0003      	movs	r3, r0
}
   22fee:	0018      	movs	r0, r3
   22ff0:	46bd      	mov	sp, r7
   22ff2:	b006      	add	sp, #24
   22ff4:	bd80      	pop	{r7, pc}
   22ff6:	46c0      	nop			; (mov r8, r8)
   22ff8:	00020721 	.word	0x00020721

00022ffc <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   22ffc:	b580      	push	{r7, lr}
   22ffe:	b088      	sub	sp, #32
   23000:	af00      	add	r7, sp, #0
   23002:	60f8      	str	r0, [r7, #12]
   23004:	60b9      	str	r1, [r7, #8]
   23006:	1dbb      	adds	r3, r7, #6
   23008:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   2300a:	2314      	movs	r3, #20
   2300c:	18fb      	adds	r3, r7, r3
   2300e:	68fa      	ldr	r2, [r7, #12]
   23010:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   23012:	2314      	movs	r3, #20
   23014:	18fb      	adds	r3, r7, r3
   23016:	68ba      	ldr	r2, [r7, #8]
   23018:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2301a:	2314      	movs	r3, #20
   2301c:	18fb      	adds	r3, r7, r3
   2301e:	1dba      	adds	r2, r7, #6
   23020:	8812      	ldrh	r2, [r2, #0]
   23022:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   23024:	2314      	movs	r3, #20
   23026:	18fb      	adds	r3, r7, r3
   23028:	0019      	movs	r1, r3
   2302a:	2003      	movs	r0, #3
   2302c:	4b03      	ldr	r3, [pc, #12]	; (2303c <nmi_spi_rw+0x40>)
   2302e:	4798      	blx	r3
   23030:	0003      	movs	r3, r0
}
   23032:	0018      	movs	r0, r3
   23034:	46bd      	mov	sp, r7
   23036:	b008      	add	sp, #32
   23038:	bd80      	pop	{r7, pc}
   2303a:	46c0      	nop			; (mov r8, r8)
   2303c:	00020721 	.word	0x00020721

00023040 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   23040:	b580      	push	{r7, lr}
   23042:	b082      	sub	sp, #8
   23044:	af00      	add	r7, sp, #0
   23046:	0002      	movs	r2, r0
   23048:	1dfb      	adds	r3, r7, #7
   2304a:	701a      	strb	r2, [r3, #0]
   2304c:	1dbb      	adds	r3, r7, #6
   2304e:	1c0a      	adds	r2, r1, #0
   23050:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   23052:	1dfb      	adds	r3, r7, #7
   23054:	781b      	ldrb	r3, [r3, #0]
   23056:	005a      	lsls	r2, r3, #1
   23058:	1dbb      	adds	r3, r7, #6
   2305a:	781b      	ldrb	r3, [r3, #0]
   2305c:	4053      	eors	r3, r2
   2305e:	4a03      	ldr	r2, [pc, #12]	; (2306c <crc7_byte+0x2c>)
   23060:	5cd3      	ldrb	r3, [r2, r3]
}
   23062:	0018      	movs	r0, r3
   23064:	46bd      	mov	sp, r7
   23066:	b002      	add	sp, #8
   23068:	bd80      	pop	{r7, pc}
   2306a:	46c0      	nop			; (mov r8, r8)
   2306c:	000388d4 	.word	0x000388d4

00023070 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   23070:	b590      	push	{r4, r7, lr}
   23072:	b085      	sub	sp, #20
   23074:	af00      	add	r7, sp, #0
   23076:	60b9      	str	r1, [r7, #8]
   23078:	607a      	str	r2, [r7, #4]
   2307a:	230f      	movs	r3, #15
   2307c:	18fb      	adds	r3, r7, r3
   2307e:	1c02      	adds	r2, r0, #0
   23080:	701a      	strb	r2, [r3, #0]
	while (len--)
   23082:	e00e      	b.n	230a2 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   23084:	68bb      	ldr	r3, [r7, #8]
   23086:	1c5a      	adds	r2, r3, #1
   23088:	60ba      	str	r2, [r7, #8]
   2308a:	781a      	ldrb	r2, [r3, #0]
   2308c:	230f      	movs	r3, #15
   2308e:	18fc      	adds	r4, r7, r3
   23090:	230f      	movs	r3, #15
   23092:	18fb      	adds	r3, r7, r3
   23094:	781b      	ldrb	r3, [r3, #0]
   23096:	0011      	movs	r1, r2
   23098:	0018      	movs	r0, r3
   2309a:	4b08      	ldr	r3, [pc, #32]	; (230bc <crc7+0x4c>)
   2309c:	4798      	blx	r3
   2309e:	0003      	movs	r3, r0
   230a0:	7023      	strb	r3, [r4, #0]
	while (len--)
   230a2:	687b      	ldr	r3, [r7, #4]
   230a4:	1e5a      	subs	r2, r3, #1
   230a6:	607a      	str	r2, [r7, #4]
   230a8:	2b00      	cmp	r3, #0
   230aa:	d1eb      	bne.n	23084 <crc7+0x14>
	return crc;
   230ac:	230f      	movs	r3, #15
   230ae:	18fb      	adds	r3, r7, r3
   230b0:	781b      	ldrb	r3, [r3, #0]
}
   230b2:	0018      	movs	r0, r3
   230b4:	46bd      	mov	sp, r7
   230b6:	b005      	add	sp, #20
   230b8:	bd90      	pop	{r4, r7, pc}
   230ba:	46c0      	nop			; (mov r8, r8)
   230bc:	00023041 	.word	0x00023041

000230c0 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   230c0:	b590      	push	{r4, r7, lr}
   230c2:	b089      	sub	sp, #36	; 0x24
   230c4:	af00      	add	r7, sp, #0
   230c6:	60b9      	str	r1, [r7, #8]
   230c8:	607a      	str	r2, [r7, #4]
   230ca:	603b      	str	r3, [r7, #0]
   230cc:	230f      	movs	r3, #15
   230ce:	18fb      	adds	r3, r7, r3
   230d0:	1c02      	adds	r2, r0, #0
   230d2:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   230d4:	231f      	movs	r3, #31
   230d6:	18fb      	adds	r3, r7, r3
   230d8:	2205      	movs	r2, #5
   230da:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   230dc:	231e      	movs	r3, #30
   230de:	18fb      	adds	r3, r7, r3
   230e0:	2201      	movs	r2, #1
   230e2:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   230e4:	2314      	movs	r3, #20
   230e6:	18fb      	adds	r3, r7, r3
   230e8:	220f      	movs	r2, #15
   230ea:	18ba      	adds	r2, r7, r2
   230ec:	7812      	ldrb	r2, [r2, #0]
   230ee:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   230f0:	230f      	movs	r3, #15
   230f2:	18fb      	adds	r3, r7, r3
   230f4:	781b      	ldrb	r3, [r3, #0]
   230f6:	3bc1      	subs	r3, #193	; 0xc1
   230f8:	2b0e      	cmp	r3, #14
   230fa:	d900      	bls.n	230fe <spi_cmd+0x3e>
   230fc:	e11b      	b.n	23336 <spi_cmd+0x276>
   230fe:	009a      	lsls	r2, r3, #2
   23100:	4bb6      	ldr	r3, [pc, #728]	; (233dc <spi_cmd+0x31c>)
   23102:	18d3      	adds	r3, r2, r3
   23104:	681b      	ldr	r3, [r3, #0]
   23106:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   23108:	68bb      	ldr	r3, [r7, #8]
   2310a:	0c1b      	lsrs	r3, r3, #16
   2310c:	b2da      	uxtb	r2, r3
   2310e:	2314      	movs	r3, #20
   23110:	18fb      	adds	r3, r7, r3
   23112:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23114:	68bb      	ldr	r3, [r7, #8]
   23116:	0a1b      	lsrs	r3, r3, #8
   23118:	b2da      	uxtb	r2, r3
   2311a:	2314      	movs	r3, #20
   2311c:	18fb      	adds	r3, r7, r3
   2311e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   23120:	68bb      	ldr	r3, [r7, #8]
   23122:	b2da      	uxtb	r2, r3
   23124:	2314      	movs	r3, #20
   23126:	18fb      	adds	r3, r7, r3
   23128:	70da      	strb	r2, [r3, #3]
		len = 5;
   2312a:	231f      	movs	r3, #31
   2312c:	18fb      	adds	r3, r7, r3
   2312e:	2205      	movs	r2, #5
   23130:	701a      	strb	r2, [r3, #0]
		break;
   23132:	e105      	b.n	23340 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   23134:	68bb      	ldr	r3, [r7, #8]
   23136:	0a1b      	lsrs	r3, r3, #8
   23138:	b2da      	uxtb	r2, r3
   2313a:	2314      	movs	r3, #20
   2313c:	18fb      	adds	r3, r7, r3
   2313e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   23140:	2330      	movs	r3, #48	; 0x30
   23142:	18fb      	adds	r3, r7, r3
   23144:	781b      	ldrb	r3, [r3, #0]
   23146:	2b00      	cmp	r3, #0
   23148:	d009      	beq.n	2315e <spi_cmd+0x9e>
   2314a:	2314      	movs	r3, #20
   2314c:	18fb      	adds	r3, r7, r3
   2314e:	785b      	ldrb	r3, [r3, #1]
   23150:	2280      	movs	r2, #128	; 0x80
   23152:	4252      	negs	r2, r2
   23154:	4313      	orrs	r3, r2
   23156:	b2da      	uxtb	r2, r3
   23158:	2314      	movs	r3, #20
   2315a:	18fb      	adds	r3, r7, r3
   2315c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   2315e:	68bb      	ldr	r3, [r7, #8]
   23160:	b2da      	uxtb	r2, r3
   23162:	2314      	movs	r3, #20
   23164:	18fb      	adds	r3, r7, r3
   23166:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   23168:	2314      	movs	r3, #20
   2316a:	18fb      	adds	r3, r7, r3
   2316c:	2200      	movs	r2, #0
   2316e:	70da      	strb	r2, [r3, #3]
		len = 5;
   23170:	231f      	movs	r3, #31
   23172:	18fb      	adds	r3, r7, r3
   23174:	2205      	movs	r2, #5
   23176:	701a      	strb	r2, [r3, #0]
		break;
   23178:	e0e2      	b.n	23340 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   2317a:	2314      	movs	r3, #20
   2317c:	18fb      	adds	r3, r7, r3
   2317e:	2200      	movs	r2, #0
   23180:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   23182:	2314      	movs	r3, #20
   23184:	18fb      	adds	r3, r7, r3
   23186:	2200      	movs	r2, #0
   23188:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   2318a:	2314      	movs	r3, #20
   2318c:	18fb      	adds	r3, r7, r3
   2318e:	2200      	movs	r2, #0
   23190:	70da      	strb	r2, [r3, #3]
		len = 5;
   23192:	231f      	movs	r3, #31
   23194:	18fb      	adds	r3, r7, r3
   23196:	2205      	movs	r2, #5
   23198:	701a      	strb	r2, [r3, #0]
		break;
   2319a:	e0d1      	b.n	23340 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   2319c:	2314      	movs	r3, #20
   2319e:	18fb      	adds	r3, r7, r3
   231a0:	2200      	movs	r2, #0
   231a2:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   231a4:	2314      	movs	r3, #20
   231a6:	18fb      	adds	r3, r7, r3
   231a8:	2200      	movs	r2, #0
   231aa:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   231ac:	2314      	movs	r3, #20
   231ae:	18fb      	adds	r3, r7, r3
   231b0:	2200      	movs	r2, #0
   231b2:	70da      	strb	r2, [r3, #3]
		len = 5;
   231b4:	231f      	movs	r3, #31
   231b6:	18fb      	adds	r3, r7, r3
   231b8:	2205      	movs	r2, #5
   231ba:	701a      	strb	r2, [r3, #0]
		break;
   231bc:	e0c0      	b.n	23340 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   231be:	2314      	movs	r3, #20
   231c0:	18fb      	adds	r3, r7, r3
   231c2:	22ff      	movs	r2, #255	; 0xff
   231c4:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   231c6:	2314      	movs	r3, #20
   231c8:	18fb      	adds	r3, r7, r3
   231ca:	22ff      	movs	r2, #255	; 0xff
   231cc:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   231ce:	2314      	movs	r3, #20
   231d0:	18fb      	adds	r3, r7, r3
   231d2:	22ff      	movs	r2, #255	; 0xff
   231d4:	70da      	strb	r2, [r3, #3]
		len = 5;
   231d6:	231f      	movs	r3, #31
   231d8:	18fb      	adds	r3, r7, r3
   231da:	2205      	movs	r2, #5
   231dc:	701a      	strb	r2, [r3, #0]
		break;
   231de:	e0af      	b.n	23340 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   231e0:	68bb      	ldr	r3, [r7, #8]
   231e2:	0c1b      	lsrs	r3, r3, #16
   231e4:	b2da      	uxtb	r2, r3
   231e6:	2314      	movs	r3, #20
   231e8:	18fb      	adds	r3, r7, r3
   231ea:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   231ec:	68bb      	ldr	r3, [r7, #8]
   231ee:	0a1b      	lsrs	r3, r3, #8
   231f0:	b2da      	uxtb	r2, r3
   231f2:	2314      	movs	r3, #20
   231f4:	18fb      	adds	r3, r7, r3
   231f6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   231f8:	68bb      	ldr	r3, [r7, #8]
   231fa:	b2da      	uxtb	r2, r3
   231fc:	2314      	movs	r3, #20
   231fe:	18fb      	adds	r3, r7, r3
   23200:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   23202:	683b      	ldr	r3, [r7, #0]
   23204:	0a1b      	lsrs	r3, r3, #8
   23206:	b2da      	uxtb	r2, r3
   23208:	2314      	movs	r3, #20
   2320a:	18fb      	adds	r3, r7, r3
   2320c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   2320e:	683b      	ldr	r3, [r7, #0]
   23210:	b2da      	uxtb	r2, r3
   23212:	2314      	movs	r3, #20
   23214:	18fb      	adds	r3, r7, r3
   23216:	715a      	strb	r2, [r3, #5]
		len = 7;
   23218:	231f      	movs	r3, #31
   2321a:	18fb      	adds	r3, r7, r3
   2321c:	2207      	movs	r2, #7
   2321e:	701a      	strb	r2, [r3, #0]
		break;
   23220:	e08e      	b.n	23340 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   23222:	68bb      	ldr	r3, [r7, #8]
   23224:	0c1b      	lsrs	r3, r3, #16
   23226:	b2da      	uxtb	r2, r3
   23228:	2314      	movs	r3, #20
   2322a:	18fb      	adds	r3, r7, r3
   2322c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   2322e:	68bb      	ldr	r3, [r7, #8]
   23230:	0a1b      	lsrs	r3, r3, #8
   23232:	b2da      	uxtb	r2, r3
   23234:	2314      	movs	r3, #20
   23236:	18fb      	adds	r3, r7, r3
   23238:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   2323a:	68bb      	ldr	r3, [r7, #8]
   2323c:	b2da      	uxtb	r2, r3
   2323e:	2314      	movs	r3, #20
   23240:	18fb      	adds	r3, r7, r3
   23242:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   23244:	683b      	ldr	r3, [r7, #0]
   23246:	0c1b      	lsrs	r3, r3, #16
   23248:	b2da      	uxtb	r2, r3
   2324a:	2314      	movs	r3, #20
   2324c:	18fb      	adds	r3, r7, r3
   2324e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   23250:	683b      	ldr	r3, [r7, #0]
   23252:	0a1b      	lsrs	r3, r3, #8
   23254:	b2da      	uxtb	r2, r3
   23256:	2314      	movs	r3, #20
   23258:	18fb      	adds	r3, r7, r3
   2325a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   2325c:	683b      	ldr	r3, [r7, #0]
   2325e:	b2da      	uxtb	r2, r3
   23260:	2314      	movs	r3, #20
   23262:	18fb      	adds	r3, r7, r3
   23264:	719a      	strb	r2, [r3, #6]
		len = 8;
   23266:	231f      	movs	r3, #31
   23268:	18fb      	adds	r3, r7, r3
   2326a:	2208      	movs	r2, #8
   2326c:	701a      	strb	r2, [r3, #0]
		break;
   2326e:	e067      	b.n	23340 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   23270:	68bb      	ldr	r3, [r7, #8]
   23272:	0a1b      	lsrs	r3, r3, #8
   23274:	b2da      	uxtb	r2, r3
   23276:	2314      	movs	r3, #20
   23278:	18fb      	adds	r3, r7, r3
   2327a:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   2327c:	2330      	movs	r3, #48	; 0x30
   2327e:	18fb      	adds	r3, r7, r3
   23280:	781b      	ldrb	r3, [r3, #0]
   23282:	2b00      	cmp	r3, #0
   23284:	d009      	beq.n	2329a <spi_cmd+0x1da>
   23286:	2314      	movs	r3, #20
   23288:	18fb      	adds	r3, r7, r3
   2328a:	785b      	ldrb	r3, [r3, #1]
   2328c:	2280      	movs	r2, #128	; 0x80
   2328e:	4252      	negs	r2, r2
   23290:	4313      	orrs	r3, r2
   23292:	b2da      	uxtb	r2, r3
   23294:	2314      	movs	r3, #20
   23296:	18fb      	adds	r3, r7, r3
   23298:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   2329a:	68bb      	ldr	r3, [r7, #8]
   2329c:	b2da      	uxtb	r2, r3
   2329e:	2314      	movs	r3, #20
   232a0:	18fb      	adds	r3, r7, r3
   232a2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   232a4:	687b      	ldr	r3, [r7, #4]
   232a6:	0e1b      	lsrs	r3, r3, #24
   232a8:	b2da      	uxtb	r2, r3
   232aa:	2314      	movs	r3, #20
   232ac:	18fb      	adds	r3, r7, r3
   232ae:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   232b0:	687b      	ldr	r3, [r7, #4]
   232b2:	0c1b      	lsrs	r3, r3, #16
   232b4:	b2da      	uxtb	r2, r3
   232b6:	2314      	movs	r3, #20
   232b8:	18fb      	adds	r3, r7, r3
   232ba:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   232bc:	687b      	ldr	r3, [r7, #4]
   232be:	0a1b      	lsrs	r3, r3, #8
   232c0:	b2da      	uxtb	r2, r3
   232c2:	2314      	movs	r3, #20
   232c4:	18fb      	adds	r3, r7, r3
   232c6:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   232c8:	687b      	ldr	r3, [r7, #4]
   232ca:	b2da      	uxtb	r2, r3
   232cc:	2314      	movs	r3, #20
   232ce:	18fb      	adds	r3, r7, r3
   232d0:	719a      	strb	r2, [r3, #6]
		len = 8;
   232d2:	231f      	movs	r3, #31
   232d4:	18fb      	adds	r3, r7, r3
   232d6:	2208      	movs	r2, #8
   232d8:	701a      	strb	r2, [r3, #0]
		break;
   232da:	e031      	b.n	23340 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   232dc:	68bb      	ldr	r3, [r7, #8]
   232de:	0c1b      	lsrs	r3, r3, #16
   232e0:	b2da      	uxtb	r2, r3
   232e2:	2314      	movs	r3, #20
   232e4:	18fb      	adds	r3, r7, r3
   232e6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   232e8:	68bb      	ldr	r3, [r7, #8]
   232ea:	0a1b      	lsrs	r3, r3, #8
   232ec:	b2da      	uxtb	r2, r3
   232ee:	2314      	movs	r3, #20
   232f0:	18fb      	adds	r3, r7, r3
   232f2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   232f4:	68bb      	ldr	r3, [r7, #8]
   232f6:	b2da      	uxtb	r2, r3
   232f8:	2314      	movs	r3, #20
   232fa:	18fb      	adds	r3, r7, r3
   232fc:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   232fe:	687b      	ldr	r3, [r7, #4]
   23300:	0e1b      	lsrs	r3, r3, #24
   23302:	b2da      	uxtb	r2, r3
   23304:	2314      	movs	r3, #20
   23306:	18fb      	adds	r3, r7, r3
   23308:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   2330a:	687b      	ldr	r3, [r7, #4]
   2330c:	0c1b      	lsrs	r3, r3, #16
   2330e:	b2da      	uxtb	r2, r3
   23310:	2314      	movs	r3, #20
   23312:	18fb      	adds	r3, r7, r3
   23314:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   23316:	687b      	ldr	r3, [r7, #4]
   23318:	0a1b      	lsrs	r3, r3, #8
   2331a:	b2da      	uxtb	r2, r3
   2331c:	2314      	movs	r3, #20
   2331e:	18fb      	adds	r3, r7, r3
   23320:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   23322:	687b      	ldr	r3, [r7, #4]
   23324:	b2da      	uxtb	r2, r3
   23326:	2314      	movs	r3, #20
   23328:	18fb      	adds	r3, r7, r3
   2332a:	71da      	strb	r2, [r3, #7]
		len = 9;
   2332c:	231f      	movs	r3, #31
   2332e:	18fb      	adds	r3, r7, r3
   23330:	2209      	movs	r2, #9
   23332:	701a      	strb	r2, [r3, #0]
		break;
   23334:	e004      	b.n	23340 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   23336:	231e      	movs	r3, #30
   23338:	18fb      	adds	r3, r7, r3
   2333a:	2200      	movs	r2, #0
   2333c:	701a      	strb	r2, [r3, #0]
		break;
   2333e:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   23340:	231e      	movs	r3, #30
   23342:	18fb      	adds	r3, r7, r3
   23344:	781b      	ldrb	r3, [r3, #0]
   23346:	b25b      	sxtb	r3, r3
   23348:	2b00      	cmp	r3, #0
   2334a:	d03f      	beq.n	233cc <spi_cmd+0x30c>
		if (!gu8Crc_off)
   2334c:	4b24      	ldr	r3, [pc, #144]	; (233e0 <spi_cmd+0x320>)
   2334e:	781b      	ldrb	r3, [r3, #0]
   23350:	2b00      	cmp	r3, #0
   23352:	d115      	bne.n	23380 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   23354:	231f      	movs	r3, #31
   23356:	18fb      	adds	r3, r7, r3
   23358:	781b      	ldrb	r3, [r3, #0]
   2335a:	1e5c      	subs	r4, r3, #1
   2335c:	231f      	movs	r3, #31
   2335e:	18fb      	adds	r3, r7, r3
   23360:	781b      	ldrb	r3, [r3, #0]
   23362:	3b01      	subs	r3, #1
   23364:	001a      	movs	r2, r3
   23366:	2314      	movs	r3, #20
   23368:	18fb      	adds	r3, r7, r3
   2336a:	0019      	movs	r1, r3
   2336c:	207f      	movs	r0, #127	; 0x7f
   2336e:	4b1d      	ldr	r3, [pc, #116]	; (233e4 <spi_cmd+0x324>)
   23370:	4798      	blx	r3
   23372:	0003      	movs	r3, r0
   23374:	18db      	adds	r3, r3, r3
   23376:	b2da      	uxtb	r2, r3
   23378:	2314      	movs	r3, #20
   2337a:	18fb      	adds	r3, r7, r3
   2337c:	551a      	strb	r2, [r3, r4]
   2337e:	e006      	b.n	2338e <spi_cmd+0x2ce>
		else
			len-=1;
   23380:	231f      	movs	r3, #31
   23382:	18fb      	adds	r3, r7, r3
   23384:	221f      	movs	r2, #31
   23386:	18ba      	adds	r2, r7, r2
   23388:	7812      	ldrb	r2, [r2, #0]
   2338a:	3a01      	subs	r2, #1
   2338c:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   2338e:	231f      	movs	r3, #31
   23390:	18fb      	adds	r3, r7, r3
   23392:	781b      	ldrb	r3, [r3, #0]
   23394:	b29a      	uxth	r2, r3
   23396:	2314      	movs	r3, #20
   23398:	18fb      	adds	r3, r7, r3
   2339a:	0011      	movs	r1, r2
   2339c:	0018      	movs	r0, r3
   2339e:	4b12      	ldr	r3, [pc, #72]	; (233e8 <spi_cmd+0x328>)
   233a0:	4798      	blx	r3
   233a2:	1e03      	subs	r3, r0, #0
   233a4:	d012      	beq.n	233cc <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   233a6:	2390      	movs	r3, #144	; 0x90
   233a8:	005a      	lsls	r2, r3, #1
   233aa:	4910      	ldr	r1, [pc, #64]	; (233ec <spi_cmd+0x32c>)
   233ac:	4b10      	ldr	r3, [pc, #64]	; (233f0 <spi_cmd+0x330>)
   233ae:	0018      	movs	r0, r3
   233b0:	4b10      	ldr	r3, [pc, #64]	; (233f4 <spi_cmd+0x334>)
   233b2:	4798      	blx	r3
   233b4:	4b10      	ldr	r3, [pc, #64]	; (233f8 <spi_cmd+0x338>)
   233b6:	0018      	movs	r0, r3
   233b8:	4b0e      	ldr	r3, [pc, #56]	; (233f4 <spi_cmd+0x334>)
   233ba:	4798      	blx	r3
   233bc:	4b0f      	ldr	r3, [pc, #60]	; (233fc <spi_cmd+0x33c>)
   233be:	0018      	movs	r0, r3
   233c0:	4b0c      	ldr	r3, [pc, #48]	; (233f4 <spi_cmd+0x334>)
   233c2:	4798      	blx	r3
			result = N_FAIL;
   233c4:	231e      	movs	r3, #30
   233c6:	18fb      	adds	r3, r7, r3
   233c8:	2200      	movs	r2, #0
   233ca:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   233cc:	231e      	movs	r3, #30
   233ce:	18fb      	adds	r3, r7, r3
   233d0:	781b      	ldrb	r3, [r3, #0]
   233d2:	b25b      	sxtb	r3, r3
}
   233d4:	0018      	movs	r0, r3
   233d6:	46bd      	mov	sp, r7
   233d8:	b009      	add	sp, #36	; 0x24
   233da:	bd90      	pop	{r4, r7, pc}
   233dc:	00038f4c 	.word	0x00038f4c
   233e0:	20004130 	.word	0x20004130
   233e4:	00023071 	.word	0x00023071
   233e8:	00022fb9 	.word	0x00022fb9
   233ec:	00038fc4 	.word	0x00038fc4
   233f0:	000389d4 	.word	0x000389d4
   233f4:	0001db29 	.word	0x0001db29
   233f8:	000389e8 	.word	0x000389e8
   233fc:	00038a14 	.word	0x00038a14

00023400 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   23400:	b590      	push	{r4, r7, lr}
   23402:	b085      	sub	sp, #20
   23404:	af00      	add	r7, sp, #0
   23406:	0002      	movs	r2, r0
   23408:	1dfb      	adds	r3, r7, #7
   2340a:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   2340c:	230e      	movs	r3, #14
   2340e:	18fb      	adds	r3, r7, r3
   23410:	2201      	movs	r2, #1
   23412:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   23414:	4b32      	ldr	r3, [pc, #200]	; (234e0 <spi_data_rsp+0xe0>)
   23416:	781b      	ldrb	r3, [r3, #0]
   23418:	2b00      	cmp	r3, #0
   2341a:	d104      	bne.n	23426 <spi_data_rsp+0x26>
		len = 2;
   2341c:	230f      	movs	r3, #15
   2341e:	18fb      	adds	r3, r7, r3
   23420:	2202      	movs	r2, #2
   23422:	701a      	strb	r2, [r3, #0]
   23424:	e003      	b.n	2342e <spi_data_rsp+0x2e>
	else
		len = 3;
   23426:	230f      	movs	r3, #15
   23428:	18fb      	adds	r3, r7, r3
   2342a:	2203      	movs	r2, #3
   2342c:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   2342e:	230f      	movs	r3, #15
   23430:	18fb      	adds	r3, r7, r3
   23432:	781b      	ldrb	r3, [r3, #0]
   23434:	b29a      	uxth	r2, r3
   23436:	2308      	movs	r3, #8
   23438:	18fb      	adds	r3, r7, r3
   2343a:	0011      	movs	r1, r2
   2343c:	0018      	movs	r0, r3
   2343e:	4b29      	ldr	r3, [pc, #164]	; (234e4 <spi_data_rsp+0xe4>)
   23440:	4798      	blx	r3
   23442:	1e03      	subs	r3, r0, #0
   23444:	d013      	beq.n	2346e <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   23446:	239a      	movs	r3, #154	; 0x9a
   23448:	005a      	lsls	r2, r3, #1
   2344a:	4927      	ldr	r1, [pc, #156]	; (234e8 <spi_data_rsp+0xe8>)
   2344c:	4b27      	ldr	r3, [pc, #156]	; (234ec <spi_data_rsp+0xec>)
   2344e:	0018      	movs	r0, r3
   23450:	4b27      	ldr	r3, [pc, #156]	; (234f0 <spi_data_rsp+0xf0>)
   23452:	4798      	blx	r3
   23454:	4b27      	ldr	r3, [pc, #156]	; (234f4 <spi_data_rsp+0xf4>)
   23456:	0018      	movs	r0, r3
   23458:	4b25      	ldr	r3, [pc, #148]	; (234f0 <spi_data_rsp+0xf0>)
   2345a:	4798      	blx	r3
   2345c:	4b26      	ldr	r3, [pc, #152]	; (234f8 <spi_data_rsp+0xf8>)
   2345e:	0018      	movs	r0, r3
   23460:	4b23      	ldr	r3, [pc, #140]	; (234f0 <spi_data_rsp+0xf0>)
   23462:	4798      	blx	r3
		result = N_FAIL;
   23464:	230e      	movs	r3, #14
   23466:	18fb      	adds	r3, r7, r3
   23468:	2200      	movs	r2, #0
   2346a:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   2346c:	e030      	b.n	234d0 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   2346e:	230f      	movs	r3, #15
   23470:	18fb      	adds	r3, r7, r3
   23472:	781b      	ldrb	r3, [r3, #0]
   23474:	3b01      	subs	r3, #1
   23476:	2208      	movs	r2, #8
   23478:	18ba      	adds	r2, r7, r2
   2347a:	5cd3      	ldrb	r3, [r2, r3]
   2347c:	2b00      	cmp	r3, #0
   2347e:	d108      	bne.n	23492 <spi_data_rsp+0x92>
   23480:	230f      	movs	r3, #15
   23482:	18fb      	adds	r3, r7, r3
   23484:	781b      	ldrb	r3, [r3, #0]
   23486:	3b02      	subs	r3, #2
   23488:	2208      	movs	r2, #8
   2348a:	18ba      	adds	r2, r7, r2
   2348c:	5cd3      	ldrb	r3, [r2, r3]
   2348e:	2bc3      	cmp	r3, #195	; 0xc3
   23490:	d01e      	beq.n	234d0 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   23492:	233c      	movs	r3, #60	; 0x3c
   23494:	33ff      	adds	r3, #255	; 0xff
   23496:	001a      	movs	r2, r3
   23498:	4913      	ldr	r1, [pc, #76]	; (234e8 <spi_data_rsp+0xe8>)
   2349a:	4b14      	ldr	r3, [pc, #80]	; (234ec <spi_data_rsp+0xec>)
   2349c:	0018      	movs	r0, r3
   2349e:	4b14      	ldr	r3, [pc, #80]	; (234f0 <spi_data_rsp+0xf0>)
   234a0:	4798      	blx	r3
   234a2:	2308      	movs	r3, #8
   234a4:	18fb      	adds	r3, r7, r3
   234a6:	781b      	ldrb	r3, [r3, #0]
   234a8:	0019      	movs	r1, r3
   234aa:	2308      	movs	r3, #8
   234ac:	18fb      	adds	r3, r7, r3
   234ae:	785b      	ldrb	r3, [r3, #1]
   234b0:	001a      	movs	r2, r3
   234b2:	2308      	movs	r3, #8
   234b4:	18fb      	adds	r3, r7, r3
   234b6:	789b      	ldrb	r3, [r3, #2]
   234b8:	4810      	ldr	r0, [pc, #64]	; (234fc <spi_data_rsp+0xfc>)
   234ba:	4c0d      	ldr	r4, [pc, #52]	; (234f0 <spi_data_rsp+0xf0>)
   234bc:	47a0      	blx	r4
   234be:	4b0e      	ldr	r3, [pc, #56]	; (234f8 <spi_data_rsp+0xf8>)
   234c0:	0018      	movs	r0, r3
   234c2:	4b0b      	ldr	r3, [pc, #44]	; (234f0 <spi_data_rsp+0xf0>)
   234c4:	4798      	blx	r3
		result = N_FAIL;
   234c6:	230e      	movs	r3, #14
   234c8:	18fb      	adds	r3, r7, r3
   234ca:	2200      	movs	r2, #0
   234cc:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   234ce:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   234d0:	230e      	movs	r3, #14
   234d2:	18fb      	adds	r3, r7, r3
   234d4:	781b      	ldrb	r3, [r3, #0]
   234d6:	b25b      	sxtb	r3, r3
}
   234d8:	0018      	movs	r0, r3
   234da:	46bd      	mov	sp, r7
   234dc:	b005      	add	sp, #20
   234de:	bd90      	pop	{r4, r7, pc}
   234e0:	20004130 	.word	0x20004130
   234e4:	00022f75 	.word	0x00022f75
   234e8:	00038fcc 	.word	0x00038fcc
   234ec:	000389d4 	.word	0x000389d4
   234f0:	0001db29 	.word	0x0001db29
   234f4:	00038a18 	.word	0x00038a18
   234f8:	00038a14 	.word	0x00038a14
   234fc:	00038a38 	.word	0x00038a38

00023500 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   23500:	b580      	push	{r7, lr}
   23502:	b084      	sub	sp, #16
   23504:	af00      	add	r7, sp, #0
   23506:	0002      	movs	r2, r0
   23508:	1dfb      	adds	r3, r7, #7
   2350a:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   2350c:	230f      	movs	r3, #15
   2350e:	18fb      	adds	r3, r7, r3
   23510:	2201      	movs	r2, #1
   23512:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   23514:	1dfb      	adds	r3, r7, #7
   23516:	781b      	ldrb	r3, [r3, #0]
   23518:	2bcf      	cmp	r3, #207	; 0xcf
   2351a:	d007      	beq.n	2352c <spi_cmd_rsp+0x2c>
   2351c:	1dfb      	adds	r3, r7, #7
   2351e:	781b      	ldrb	r3, [r3, #0]
   23520:	2bc5      	cmp	r3, #197	; 0xc5
   23522:	d003      	beq.n	2352c <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   23524:	1dfb      	adds	r3, r7, #7
   23526:	781b      	ldrb	r3, [r3, #0]
   23528:	2bc6      	cmp	r3, #198	; 0xc6
   2352a:	d10c      	bne.n	23546 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   2352c:	230d      	movs	r3, #13
   2352e:	18fb      	adds	r3, r7, r3
   23530:	2101      	movs	r1, #1
   23532:	0018      	movs	r0, r3
   23534:	4b3b      	ldr	r3, [pc, #236]	; (23624 <spi_cmd_rsp+0x124>)
   23536:	4798      	blx	r3
   23538:	1e03      	subs	r3, r0, #0
   2353a:	d004      	beq.n	23546 <spi_cmd_rsp+0x46>
			result = N_FAIL;
   2353c:	230f      	movs	r3, #15
   2353e:	18fb      	adds	r3, r7, r3
   23540:	2200      	movs	r2, #0
   23542:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   23544:	e065      	b.n	23612 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   23546:	230e      	movs	r3, #14
   23548:	18fb      	adds	r3, r7, r3
   2354a:	220a      	movs	r2, #10
   2354c:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   2354e:	230d      	movs	r3, #13
   23550:	18fb      	adds	r3, r7, r3
   23552:	2101      	movs	r1, #1
   23554:	0018      	movs	r0, r3
   23556:	4b33      	ldr	r3, [pc, #204]	; (23624 <spi_cmd_rsp+0x124>)
   23558:	4798      	blx	r3
   2355a:	1e03      	subs	r3, r0, #0
   2355c:	d014      	beq.n	23588 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   2355e:	235c      	movs	r3, #92	; 0x5c
   23560:	33ff      	adds	r3, #255	; 0xff
   23562:	001a      	movs	r2, r3
   23564:	4930      	ldr	r1, [pc, #192]	; (23628 <spi_cmd_rsp+0x128>)
   23566:	4b31      	ldr	r3, [pc, #196]	; (2362c <spi_cmd_rsp+0x12c>)
   23568:	0018      	movs	r0, r3
   2356a:	4b31      	ldr	r3, [pc, #196]	; (23630 <spi_cmd_rsp+0x130>)
   2356c:	4798      	blx	r3
   2356e:	4b31      	ldr	r3, [pc, #196]	; (23634 <spi_cmd_rsp+0x134>)
   23570:	0018      	movs	r0, r3
   23572:	4b2f      	ldr	r3, [pc, #188]	; (23630 <spi_cmd_rsp+0x130>)
   23574:	4798      	blx	r3
   23576:	4b30      	ldr	r3, [pc, #192]	; (23638 <spi_cmd_rsp+0x138>)
   23578:	0018      	movs	r0, r3
   2357a:	4b2d      	ldr	r3, [pc, #180]	; (23630 <spi_cmd_rsp+0x130>)
   2357c:	4798      	blx	r3
			result = N_FAIL;
   2357e:	230f      	movs	r3, #15
   23580:	18fb      	adds	r3, r7, r3
   23582:	2200      	movs	r2, #0
   23584:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   23586:	e044      	b.n	23612 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   23588:	230d      	movs	r3, #13
   2358a:	18fb      	adds	r3, r7, r3
   2358c:	781b      	ldrb	r3, [r3, #0]
   2358e:	1dfa      	adds	r2, r7, #7
   23590:	7812      	ldrb	r2, [r2, #0]
   23592:	429a      	cmp	r2, r3
   23594:	d00b      	beq.n	235ae <spi_cmd_rsp+0xae>
   23596:	230e      	movs	r3, #14
   23598:	18fb      	adds	r3, r7, r3
   2359a:	781b      	ldrb	r3, [r3, #0]
   2359c:	b25b      	sxtb	r3, r3
   2359e:	b2da      	uxtb	r2, r3
   235a0:	3a01      	subs	r2, #1
   235a2:	b2d1      	uxtb	r1, r2
   235a4:	220e      	movs	r2, #14
   235a6:	18ba      	adds	r2, r7, r2
   235a8:	7011      	strb	r1, [r2, #0]
   235aa:	2b00      	cmp	r3, #0
   235ac:	dccf      	bgt.n	2354e <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   235ae:	230e      	movs	r3, #14
   235b0:	18fb      	adds	r3, r7, r3
   235b2:	220a      	movs	r2, #10
   235b4:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   235b6:	230d      	movs	r3, #13
   235b8:	18fb      	adds	r3, r7, r3
   235ba:	2101      	movs	r1, #1
   235bc:	0018      	movs	r0, r3
   235be:	4b19      	ldr	r3, [pc, #100]	; (23624 <spi_cmd_rsp+0x124>)
   235c0:	4798      	blx	r3
   235c2:	1e03      	subs	r3, r0, #0
   235c4:	d014      	beq.n	235f0 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   235c6:	236a      	movs	r3, #106	; 0x6a
   235c8:	33ff      	adds	r3, #255	; 0xff
   235ca:	001a      	movs	r2, r3
   235cc:	4916      	ldr	r1, [pc, #88]	; (23628 <spi_cmd_rsp+0x128>)
   235ce:	4b17      	ldr	r3, [pc, #92]	; (2362c <spi_cmd_rsp+0x12c>)
   235d0:	0018      	movs	r0, r3
   235d2:	4b17      	ldr	r3, [pc, #92]	; (23630 <spi_cmd_rsp+0x130>)
   235d4:	4798      	blx	r3
   235d6:	4b17      	ldr	r3, [pc, #92]	; (23634 <spi_cmd_rsp+0x134>)
   235d8:	0018      	movs	r0, r3
   235da:	4b15      	ldr	r3, [pc, #84]	; (23630 <spi_cmd_rsp+0x130>)
   235dc:	4798      	blx	r3
   235de:	4b16      	ldr	r3, [pc, #88]	; (23638 <spi_cmd_rsp+0x138>)
   235e0:	0018      	movs	r0, r3
   235e2:	4b13      	ldr	r3, [pc, #76]	; (23630 <spi_cmd_rsp+0x130>)
   235e4:	4798      	blx	r3
			result = N_FAIL;
   235e6:	230f      	movs	r3, #15
   235e8:	18fb      	adds	r3, r7, r3
   235ea:	2200      	movs	r2, #0
   235ec:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   235ee:	e010      	b.n	23612 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   235f0:	230d      	movs	r3, #13
   235f2:	18fb      	adds	r3, r7, r3
   235f4:	781b      	ldrb	r3, [r3, #0]
   235f6:	2b00      	cmp	r3, #0
   235f8:	d00b      	beq.n	23612 <spi_cmd_rsp+0x112>
   235fa:	230e      	movs	r3, #14
   235fc:	18fb      	adds	r3, r7, r3
   235fe:	781b      	ldrb	r3, [r3, #0]
   23600:	b25b      	sxtb	r3, r3
   23602:	b2da      	uxtb	r2, r3
   23604:	3a01      	subs	r2, #1
   23606:	b2d1      	uxtb	r1, r2
   23608:	220e      	movs	r2, #14
   2360a:	18ba      	adds	r2, r7, r2
   2360c:	7011      	strb	r1, [r2, #0]
   2360e:	2b00      	cmp	r3, #0
   23610:	dcd1      	bgt.n	235b6 <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   23612:	230f      	movs	r3, #15
   23614:	18fb      	adds	r3, r7, r3
   23616:	781b      	ldrb	r3, [r3, #0]
   23618:	b25b      	sxtb	r3, r3
}
   2361a:	0018      	movs	r0, r3
   2361c:	46bd      	mov	sp, r7
   2361e:	b004      	add	sp, #16
   23620:	bd80      	pop	{r7, pc}
   23622:	46c0      	nop			; (mov r8, r8)
   23624:	00022f75 	.word	0x00022f75
   23628:	00038fdc 	.word	0x00038fdc
   2362c:	000389d4 	.word	0x000389d4
   23630:	0001db29 	.word	0x0001db29
   23634:	00038a68 	.word	0x00038a68
   23638:	00038a14 	.word	0x00038a14

0002363c <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   2363c:	b590      	push	{r4, r7, lr}
   2363e:	b09f      	sub	sp, #124	; 0x7c
   23640:	af00      	add	r7, sp, #0
   23642:	60b9      	str	r1, [r7, #8]
   23644:	607a      	str	r2, [r7, #4]
   23646:	603b      	str	r3, [r7, #0]
   23648:	230f      	movs	r3, #15
   2364a:	18fb      	adds	r3, r7, r3
   2364c:	1c02      	adds	r2, r0, #0
   2364e:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   23650:	2300      	movs	r3, #0
   23652:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   23654:	2301      	movs	r3, #1
   23656:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   23658:	2338      	movs	r3, #56	; 0x38
   2365a:	18fb      	adds	r3, r7, r3
   2365c:	220f      	movs	r2, #15
   2365e:	18ba      	adds	r2, r7, r2
   23660:	7812      	ldrb	r2, [r2, #0]
   23662:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   23664:	230f      	movs	r3, #15
   23666:	18fb      	adds	r3, r7, r3
   23668:	781b      	ldrb	r3, [r3, #0]
   2366a:	3bc1      	subs	r3, #193	; 0xc1
   2366c:	2b0e      	cmp	r3, #14
   2366e:	d900      	bls.n	23672 <spi_cmd_complete+0x36>
   23670:	e103      	b.n	2387a <spi_cmd_complete+0x23e>
   23672:	009a      	lsls	r2, r3, #2
   23674:	4bd1      	ldr	r3, [pc, #836]	; (239bc <spi_cmd_complete+0x380>)
   23676:	18d3      	adds	r3, r2, r3
   23678:	681b      	ldr	r3, [r3, #0]
   2367a:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   2367c:	68bb      	ldr	r3, [r7, #8]
   2367e:	0c1b      	lsrs	r3, r3, #16
   23680:	b2da      	uxtb	r2, r3
   23682:	2338      	movs	r3, #56	; 0x38
   23684:	18fb      	adds	r3, r7, r3
   23686:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23688:	68bb      	ldr	r3, [r7, #8]
   2368a:	0a1b      	lsrs	r3, r3, #8
   2368c:	b2da      	uxtb	r2, r3
   2368e:	2338      	movs	r3, #56	; 0x38
   23690:	18fb      	adds	r3, r7, r3
   23692:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23694:	68bb      	ldr	r3, [r7, #8]
   23696:	b2da      	uxtb	r2, r3
   23698:	2338      	movs	r3, #56	; 0x38
   2369a:	18fb      	adds	r3, r7, r3
   2369c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2369e:	2305      	movs	r3, #5
   236a0:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   236a2:	e0ed      	b.n	23880 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   236a4:	68bb      	ldr	r3, [r7, #8]
   236a6:	0a1b      	lsrs	r3, r3, #8
   236a8:	b2da      	uxtb	r2, r3
   236aa:	2338      	movs	r3, #56	; 0x38
   236ac:	18fb      	adds	r3, r7, r3
   236ae:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   236b0:	2388      	movs	r3, #136	; 0x88
   236b2:	18fb      	adds	r3, r7, r3
   236b4:	781b      	ldrb	r3, [r3, #0]
   236b6:	2b01      	cmp	r3, #1
   236b8:	d109      	bne.n	236ce <spi_cmd_complete+0x92>
   236ba:	2338      	movs	r3, #56	; 0x38
   236bc:	18fb      	adds	r3, r7, r3
   236be:	785b      	ldrb	r3, [r3, #1]
   236c0:	2280      	movs	r2, #128	; 0x80
   236c2:	4252      	negs	r2, r2
   236c4:	4313      	orrs	r3, r2
   236c6:	b2da      	uxtb	r2, r3
   236c8:	2338      	movs	r3, #56	; 0x38
   236ca:	18fb      	adds	r3, r7, r3
   236cc:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   236ce:	68bb      	ldr	r3, [r7, #8]
   236d0:	b2da      	uxtb	r2, r3
   236d2:	2338      	movs	r3, #56	; 0x38
   236d4:	18fb      	adds	r3, r7, r3
   236d6:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   236d8:	2338      	movs	r3, #56	; 0x38
   236da:	18fb      	adds	r3, r7, r3
   236dc:	2200      	movs	r2, #0
   236de:	70da      	strb	r2, [r3, #3]
		len = 5;
   236e0:	2305      	movs	r3, #5
   236e2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   236e4:	e0cc      	b.n	23880 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   236e6:	2338      	movs	r3, #56	; 0x38
   236e8:	18fb      	adds	r3, r7, r3
   236ea:	2200      	movs	r2, #0
   236ec:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   236ee:	2338      	movs	r3, #56	; 0x38
   236f0:	18fb      	adds	r3, r7, r3
   236f2:	2200      	movs	r2, #0
   236f4:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   236f6:	2338      	movs	r3, #56	; 0x38
   236f8:	18fb      	adds	r3, r7, r3
   236fa:	2200      	movs	r2, #0
   236fc:	70da      	strb	r2, [r3, #3]
		len = 5;
   236fe:	2305      	movs	r3, #5
   23700:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23702:	e0bd      	b.n	23880 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   23704:	2338      	movs	r3, #56	; 0x38
   23706:	18fb      	adds	r3, r7, r3
   23708:	2200      	movs	r2, #0
   2370a:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   2370c:	2338      	movs	r3, #56	; 0x38
   2370e:	18fb      	adds	r3, r7, r3
   23710:	2200      	movs	r2, #0
   23712:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   23714:	2338      	movs	r3, #56	; 0x38
   23716:	18fb      	adds	r3, r7, r3
   23718:	2200      	movs	r2, #0
   2371a:	70da      	strb	r2, [r3, #3]
		len = 5;
   2371c:	2305      	movs	r3, #5
   2371e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23720:	e0ae      	b.n	23880 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   23722:	2338      	movs	r3, #56	; 0x38
   23724:	18fb      	adds	r3, r7, r3
   23726:	22ff      	movs	r2, #255	; 0xff
   23728:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   2372a:	2338      	movs	r3, #56	; 0x38
   2372c:	18fb      	adds	r3, r7, r3
   2372e:	22ff      	movs	r2, #255	; 0xff
   23730:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   23732:	2338      	movs	r3, #56	; 0x38
   23734:	18fb      	adds	r3, r7, r3
   23736:	22ff      	movs	r2, #255	; 0xff
   23738:	70da      	strb	r2, [r3, #3]
		len = 5;
   2373a:	2305      	movs	r3, #5
   2373c:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2373e:	e09f      	b.n	23880 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   23740:	68bb      	ldr	r3, [r7, #8]
   23742:	0c1b      	lsrs	r3, r3, #16
   23744:	b2da      	uxtb	r2, r3
   23746:	2338      	movs	r3, #56	; 0x38
   23748:	18fb      	adds	r3, r7, r3
   2374a:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2374c:	68bb      	ldr	r3, [r7, #8]
   2374e:	0a1b      	lsrs	r3, r3, #8
   23750:	b2da      	uxtb	r2, r3
   23752:	2338      	movs	r3, #56	; 0x38
   23754:	18fb      	adds	r3, r7, r3
   23756:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23758:	68bb      	ldr	r3, [r7, #8]
   2375a:	b2da      	uxtb	r2, r3
   2375c:	2338      	movs	r3, #56	; 0x38
   2375e:	18fb      	adds	r3, r7, r3
   23760:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   23762:	683b      	ldr	r3, [r7, #0]
   23764:	0a1b      	lsrs	r3, r3, #8
   23766:	b2da      	uxtb	r2, r3
   23768:	2338      	movs	r3, #56	; 0x38
   2376a:	18fb      	adds	r3, r7, r3
   2376c:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   2376e:	683b      	ldr	r3, [r7, #0]
   23770:	b2da      	uxtb	r2, r3
   23772:	2338      	movs	r3, #56	; 0x38
   23774:	18fb      	adds	r3, r7, r3
   23776:	715a      	strb	r2, [r3, #5]
		len = 7;
   23778:	2307      	movs	r3, #7
   2377a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2377c:	e080      	b.n	23880 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   2377e:	68bb      	ldr	r3, [r7, #8]
   23780:	0c1b      	lsrs	r3, r3, #16
   23782:	b2da      	uxtb	r2, r3
   23784:	2338      	movs	r3, #56	; 0x38
   23786:	18fb      	adds	r3, r7, r3
   23788:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2378a:	68bb      	ldr	r3, [r7, #8]
   2378c:	0a1b      	lsrs	r3, r3, #8
   2378e:	b2da      	uxtb	r2, r3
   23790:	2338      	movs	r3, #56	; 0x38
   23792:	18fb      	adds	r3, r7, r3
   23794:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23796:	68bb      	ldr	r3, [r7, #8]
   23798:	b2da      	uxtb	r2, r3
   2379a:	2338      	movs	r3, #56	; 0x38
   2379c:	18fb      	adds	r3, r7, r3
   2379e:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   237a0:	683b      	ldr	r3, [r7, #0]
   237a2:	0c1b      	lsrs	r3, r3, #16
   237a4:	b2da      	uxtb	r2, r3
   237a6:	2338      	movs	r3, #56	; 0x38
   237a8:	18fb      	adds	r3, r7, r3
   237aa:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   237ac:	683b      	ldr	r3, [r7, #0]
   237ae:	0a1b      	lsrs	r3, r3, #8
   237b0:	b2da      	uxtb	r2, r3
   237b2:	2338      	movs	r3, #56	; 0x38
   237b4:	18fb      	adds	r3, r7, r3
   237b6:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   237b8:	683b      	ldr	r3, [r7, #0]
   237ba:	b2da      	uxtb	r2, r3
   237bc:	2338      	movs	r3, #56	; 0x38
   237be:	18fb      	adds	r3, r7, r3
   237c0:	719a      	strb	r2, [r3, #6]
		len = 8;
   237c2:	2308      	movs	r3, #8
   237c4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   237c6:	e05b      	b.n	23880 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   237c8:	68bb      	ldr	r3, [r7, #8]
   237ca:	0a1b      	lsrs	r3, r3, #8
   237cc:	b2da      	uxtb	r2, r3
   237ce:	2338      	movs	r3, #56	; 0x38
   237d0:	18fb      	adds	r3, r7, r3
   237d2:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   237d4:	2388      	movs	r3, #136	; 0x88
   237d6:	18fb      	adds	r3, r7, r3
   237d8:	781b      	ldrb	r3, [r3, #0]
   237da:	2b01      	cmp	r3, #1
   237dc:	d109      	bne.n	237f2 <spi_cmd_complete+0x1b6>
   237de:	2338      	movs	r3, #56	; 0x38
   237e0:	18fb      	adds	r3, r7, r3
   237e2:	785b      	ldrb	r3, [r3, #1]
   237e4:	2280      	movs	r2, #128	; 0x80
   237e6:	4252      	negs	r2, r2
   237e8:	4313      	orrs	r3, r2
   237ea:	b2da      	uxtb	r2, r3
   237ec:	2338      	movs	r3, #56	; 0x38
   237ee:	18fb      	adds	r3, r7, r3
   237f0:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   237f2:	68bb      	ldr	r3, [r7, #8]
   237f4:	b2da      	uxtb	r2, r3
   237f6:	2338      	movs	r3, #56	; 0x38
   237f8:	18fb      	adds	r3, r7, r3
   237fa:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   237fc:	687b      	ldr	r3, [r7, #4]
   237fe:	78da      	ldrb	r2, [r3, #3]
   23800:	2338      	movs	r3, #56	; 0x38
   23802:	18fb      	adds	r3, r7, r3
   23804:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   23806:	687b      	ldr	r3, [r7, #4]
   23808:	789a      	ldrb	r2, [r3, #2]
   2380a:	2338      	movs	r3, #56	; 0x38
   2380c:	18fb      	adds	r3, r7, r3
   2380e:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   23810:	687b      	ldr	r3, [r7, #4]
   23812:	785a      	ldrb	r2, [r3, #1]
   23814:	2338      	movs	r3, #56	; 0x38
   23816:	18fb      	adds	r3, r7, r3
   23818:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   2381a:	687b      	ldr	r3, [r7, #4]
   2381c:	781a      	ldrb	r2, [r3, #0]
   2381e:	2338      	movs	r3, #56	; 0x38
   23820:	18fb      	adds	r3, r7, r3
   23822:	719a      	strb	r2, [r3, #6]
		len = 8;
   23824:	2308      	movs	r3, #8
   23826:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23828:	e02a      	b.n	23880 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   2382a:	68bb      	ldr	r3, [r7, #8]
   2382c:	0c1b      	lsrs	r3, r3, #16
   2382e:	b2da      	uxtb	r2, r3
   23830:	2338      	movs	r3, #56	; 0x38
   23832:	18fb      	adds	r3, r7, r3
   23834:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23836:	68bb      	ldr	r3, [r7, #8]
   23838:	0a1b      	lsrs	r3, r3, #8
   2383a:	b2da      	uxtb	r2, r3
   2383c:	2338      	movs	r3, #56	; 0x38
   2383e:	18fb      	adds	r3, r7, r3
   23840:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   23842:	68bb      	ldr	r3, [r7, #8]
   23844:	b2da      	uxtb	r2, r3
   23846:	2338      	movs	r3, #56	; 0x38
   23848:	18fb      	adds	r3, r7, r3
   2384a:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   2384c:	687b      	ldr	r3, [r7, #4]
   2384e:	78da      	ldrb	r2, [r3, #3]
   23850:	2338      	movs	r3, #56	; 0x38
   23852:	18fb      	adds	r3, r7, r3
   23854:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   23856:	687b      	ldr	r3, [r7, #4]
   23858:	789a      	ldrb	r2, [r3, #2]
   2385a:	2338      	movs	r3, #56	; 0x38
   2385c:	18fb      	adds	r3, r7, r3
   2385e:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   23860:	687b      	ldr	r3, [r7, #4]
   23862:	785a      	ldrb	r2, [r3, #1]
   23864:	2338      	movs	r3, #56	; 0x38
   23866:	18fb      	adds	r3, r7, r3
   23868:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   2386a:	687b      	ldr	r3, [r7, #4]
   2386c:	781a      	ldrb	r2, [r3, #0]
   2386e:	2338      	movs	r3, #56	; 0x38
   23870:	18fb      	adds	r3, r7, r3
   23872:	71da      	strb	r2, [r3, #7]
		len = 9;
   23874:	2309      	movs	r3, #9
   23876:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23878:	e002      	b.n	23880 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   2387a:	2300      	movs	r3, #0
   2387c:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   2387e:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   23880:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23882:	2b01      	cmp	r3, #1
   23884:	d001      	beq.n	2388a <spi_cmd_complete+0x24e>
		return result;
   23886:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23888:	e33a      	b.n	23f00 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   2388a:	4b4d      	ldr	r3, [pc, #308]	; (239c0 <spi_cmd_complete+0x384>)
   2388c:	781b      	ldrb	r3, [r3, #0]
   2388e:	2b00      	cmp	r3, #0
   23890:	d111      	bne.n	238b6 <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   23892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23894:	1e5c      	subs	r4, r3, #1
   23896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23898:	3b01      	subs	r3, #1
   2389a:	001a      	movs	r2, r3
   2389c:	2338      	movs	r3, #56	; 0x38
   2389e:	18fb      	adds	r3, r7, r3
   238a0:	0019      	movs	r1, r3
   238a2:	207f      	movs	r0, #127	; 0x7f
   238a4:	4b47      	ldr	r3, [pc, #284]	; (239c4 <spi_cmd_complete+0x388>)
   238a6:	4798      	blx	r3
   238a8:	0003      	movs	r3, r0
   238aa:	18db      	adds	r3, r3, r3
   238ac:	b2da      	uxtb	r2, r3
   238ae:	2338      	movs	r3, #56	; 0x38
   238b0:	18fb      	adds	r3, r7, r3
   238b2:	551a      	strb	r2, [r3, r4]
   238b4:	e002      	b.n	238bc <spi_cmd_complete+0x280>
	} else {
		len -=1;
   238b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   238b8:	3b01      	subs	r3, #1
   238ba:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   238bc:	230f      	movs	r3, #15
   238be:	18fb      	adds	r3, r7, r3
   238c0:	781b      	ldrb	r3, [r3, #0]
   238c2:	2bcf      	cmp	r3, #207	; 0xcf
   238c4:	d009      	beq.n	238da <spi_cmd_complete+0x29e>
   238c6:	230f      	movs	r3, #15
   238c8:	18fb      	adds	r3, r7, r3
   238ca:	781b      	ldrb	r3, [r3, #0]
   238cc:	2bc5      	cmp	r3, #197	; 0xc5
   238ce:	d004      	beq.n	238da <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   238d0:	230f      	movs	r3, #15
   238d2:	18fb      	adds	r3, r7, r3
   238d4:	781b      	ldrb	r3, [r3, #0]
   238d6:	2bc6      	cmp	r3, #198	; 0xc6
   238d8:	d103      	bne.n	238e2 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   238da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   238dc:	3306      	adds	r3, #6
   238de:	673b      	str	r3, [r7, #112]	; 0x70
   238e0:	e018      	b.n	23914 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   238e2:	230f      	movs	r3, #15
   238e4:	18fb      	adds	r3, r7, r3
   238e6:	781b      	ldrb	r3, [r3, #0]
   238e8:	2bc4      	cmp	r3, #196	; 0xc4
   238ea:	d004      	beq.n	238f6 <spi_cmd_complete+0x2ba>
   238ec:	230f      	movs	r3, #15
   238ee:	18fb      	adds	r3, r7, r3
   238f0:	781b      	ldrb	r3, [r3, #0]
   238f2:	2bca      	cmp	r3, #202	; 0xca
   238f4:	d10b      	bne.n	2390e <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   238f6:	4b32      	ldr	r3, [pc, #200]	; (239c0 <spi_cmd_complete+0x384>)
   238f8:	781b      	ldrb	r3, [r3, #0]
   238fa:	2b00      	cmp	r3, #0
   238fc:	d103      	bne.n	23906 <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   238fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23900:	330c      	adds	r3, #12
   23902:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   23904:	e006      	b.n	23914 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   23906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23908:	330a      	adds	r3, #10
   2390a:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   2390c:	e002      	b.n	23914 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   2390e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23910:	3305      	adds	r3, #5
   23912:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   23914:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23916:	2b20      	cmp	r3, #32
   23918:	d914      	bls.n	23944 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   2391a:	23f7      	movs	r3, #247	; 0xf7
   2391c:	005a      	lsls	r2, r3, #1
   2391e:	492a      	ldr	r1, [pc, #168]	; (239c8 <spi_cmd_complete+0x38c>)
   23920:	4b2a      	ldr	r3, [pc, #168]	; (239cc <spi_cmd_complete+0x390>)
   23922:	0018      	movs	r0, r3
   23924:	4b2a      	ldr	r3, [pc, #168]	; (239d0 <spi_cmd_complete+0x394>)
   23926:	4798      	blx	r3
   23928:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2392a:	4b2a      	ldr	r3, [pc, #168]	; (239d4 <spi_cmd_complete+0x398>)
   2392c:	2220      	movs	r2, #32
   2392e:	0018      	movs	r0, r3
   23930:	4b27      	ldr	r3, [pc, #156]	; (239d0 <spi_cmd_complete+0x394>)
   23932:	4798      	blx	r3
   23934:	4b28      	ldr	r3, [pc, #160]	; (239d8 <spi_cmd_complete+0x39c>)
   23936:	0018      	movs	r0, r3
   23938:	4b25      	ldr	r3, [pc, #148]	; (239d0 <spi_cmd_complete+0x394>)
   2393a:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   2393c:	2300      	movs	r3, #0
   2393e:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23940:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23942:	e2dd      	b.n	23f00 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   23944:	2377      	movs	r3, #119	; 0x77
   23946:	18fb      	adds	r3, r7, r3
   23948:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   2394a:	701a      	strb	r2, [r3, #0]
   2394c:	e00d      	b.n	2396a <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   2394e:	2377      	movs	r3, #119	; 0x77
   23950:	18fb      	adds	r3, r7, r3
   23952:	781b      	ldrb	r3, [r3, #0]
   23954:	2238      	movs	r2, #56	; 0x38
   23956:	18ba      	adds	r2, r7, r2
   23958:	2100      	movs	r1, #0
   2395a:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   2395c:	2377      	movs	r3, #119	; 0x77
   2395e:	18fb      	adds	r3, r7, r3
   23960:	781a      	ldrb	r2, [r3, #0]
   23962:	2377      	movs	r3, #119	; 0x77
   23964:	18fb      	adds	r3, r7, r3
   23966:	3201      	adds	r2, #1
   23968:	701a      	strb	r2, [r3, #0]
   2396a:	2377      	movs	r3, #119	; 0x77
   2396c:	18fb      	adds	r3, r7, r3
   2396e:	781a      	ldrb	r2, [r3, #0]
   23970:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23972:	429a      	cmp	r2, r3
   23974:	d3eb      	bcc.n	2394e <spi_cmd_complete+0x312>
	}
	rix = len;
   23976:	2376      	movs	r3, #118	; 0x76
   23978:	18fb      	adds	r3, r7, r3
   2397a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   2397c:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   2397e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23980:	b29a      	uxth	r2, r3
   23982:	2318      	movs	r3, #24
   23984:	18f9      	adds	r1, r7, r3
   23986:	2338      	movs	r3, #56	; 0x38
   23988:	18fb      	adds	r3, r7, r3
   2398a:	0018      	movs	r0, r3
   2398c:	4b13      	ldr	r3, [pc, #76]	; (239dc <spi_cmd_complete+0x3a0>)
   2398e:	4798      	blx	r3
   23990:	1e03      	subs	r3, r0, #0
   23992:	d027      	beq.n	239e4 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   23994:	23fa      	movs	r3, #250	; 0xfa
   23996:	33ff      	adds	r3, #255	; 0xff
   23998:	001a      	movs	r2, r3
   2399a:	490b      	ldr	r1, [pc, #44]	; (239c8 <spi_cmd_complete+0x38c>)
   2399c:	4b0b      	ldr	r3, [pc, #44]	; (239cc <spi_cmd_complete+0x390>)
   2399e:	0018      	movs	r0, r3
   239a0:	4b0b      	ldr	r3, [pc, #44]	; (239d0 <spi_cmd_complete+0x394>)
   239a2:	4798      	blx	r3
   239a4:	4b0e      	ldr	r3, [pc, #56]	; (239e0 <spi_cmd_complete+0x3a4>)
   239a6:	0018      	movs	r0, r3
   239a8:	4b09      	ldr	r3, [pc, #36]	; (239d0 <spi_cmd_complete+0x394>)
   239aa:	4798      	blx	r3
   239ac:	4b0a      	ldr	r3, [pc, #40]	; (239d8 <spi_cmd_complete+0x39c>)
   239ae:	0018      	movs	r0, r3
   239b0:	4b07      	ldr	r3, [pc, #28]	; (239d0 <spi_cmd_complete+0x394>)
   239b2:	4798      	blx	r3
		result = N_FAIL;
   239b4:	2300      	movs	r3, #0
   239b6:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   239b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   239ba:	e2a1      	b.n	23f00 <spi_cmd_complete+0x8c4>
   239bc:	00038f88 	.word	0x00038f88
   239c0:	20004130 	.word	0x20004130
   239c4:	00023071 	.word	0x00023071
   239c8:	00038fe8 	.word	0x00038fe8
   239cc:	000389d4 	.word	0x000389d4
   239d0:	0001db29 	.word	0x0001db29
   239d4:	00038a9c 	.word	0x00038a9c
   239d8:	00038a14 	.word	0x00038a14
   239dc:	00022ffd 	.word	0x00022ffd
   239e0:	000389e8 	.word	0x000389e8
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   239e4:	230f      	movs	r3, #15
   239e6:	18fb      	adds	r3, r7, r3
   239e8:	781b      	ldrb	r3, [r3, #0]
   239ea:	2bcf      	cmp	r3, #207	; 0xcf
   239ec:	d009      	beq.n	23a02 <spi_cmd_complete+0x3c6>
   239ee:	230f      	movs	r3, #15
   239f0:	18fb      	adds	r3, r7, r3
   239f2:	781b      	ldrb	r3, [r3, #0]
   239f4:	2bc5      	cmp	r3, #197	; 0xc5
   239f6:	d004      	beq.n	23a02 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   239f8:	230f      	movs	r3, #15
   239fa:	18fb      	adds	r3, r7, r3
   239fc:	781b      	ldrb	r3, [r3, #0]
   239fe:	2bc6      	cmp	r3, #198	; 0xc6
   23a00:	d106      	bne.n	23a10 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   23a02:	2376      	movs	r3, #118	; 0x76
   23a04:	18fb      	adds	r3, r7, r3
   23a06:	781a      	ldrb	r2, [r3, #0]
   23a08:	2376      	movs	r3, #118	; 0x76
   23a0a:	18fb      	adds	r3, r7, r3
   23a0c:	3201      	adds	r2, #1
   23a0e:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   23a10:	2376      	movs	r3, #118	; 0x76
   23a12:	18fb      	adds	r3, r7, r3
   23a14:	781b      	ldrb	r3, [r3, #0]
   23a16:	2276      	movs	r2, #118	; 0x76
   23a18:	18ba      	adds	r2, r7, r2
   23a1a:	1c59      	adds	r1, r3, #1
   23a1c:	7011      	strb	r1, [r2, #0]
   23a1e:	001a      	movs	r2, r3
   23a20:	2318      	movs	r3, #24
   23a22:	18fb      	adds	r3, r7, r3
   23a24:	5c9a      	ldrb	r2, [r3, r2]
   23a26:	2317      	movs	r3, #23
   23a28:	18fb      	adds	r3, r7, r3
   23a2a:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   23a2c:	2317      	movs	r3, #23
   23a2e:	18fb      	adds	r3, r7, r3
   23a30:	781b      	ldrb	r3, [r3, #0]
   23a32:	220f      	movs	r2, #15
   23a34:	18ba      	adds	r2, r7, r2
   23a36:	7812      	ldrb	r2, [r2, #0]
   23a38:	429a      	cmp	r2, r3
   23a3a:	d018      	beq.n	23a6e <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   23a3c:	4add      	ldr	r2, [pc, #884]	; (23db4 <spi_cmd_complete+0x778>)
   23a3e:	49de      	ldr	r1, [pc, #888]	; (23db8 <spi_cmd_complete+0x77c>)
   23a40:	4bde      	ldr	r3, [pc, #888]	; (23dbc <spi_cmd_complete+0x780>)
   23a42:	0018      	movs	r0, r3
   23a44:	4bde      	ldr	r3, [pc, #888]	; (23dc0 <spi_cmd_complete+0x784>)
   23a46:	4798      	blx	r3
   23a48:	230f      	movs	r3, #15
   23a4a:	18fb      	adds	r3, r7, r3
   23a4c:	7819      	ldrb	r1, [r3, #0]
   23a4e:	2317      	movs	r3, #23
   23a50:	18fb      	adds	r3, r7, r3
   23a52:	781b      	ldrb	r3, [r3, #0]
   23a54:	001a      	movs	r2, r3
   23a56:	4bdb      	ldr	r3, [pc, #876]	; (23dc4 <spi_cmd_complete+0x788>)
   23a58:	0018      	movs	r0, r3
   23a5a:	4bd9      	ldr	r3, [pc, #868]	; (23dc0 <spi_cmd_complete+0x784>)
   23a5c:	4798      	blx	r3
   23a5e:	4bda      	ldr	r3, [pc, #872]	; (23dc8 <spi_cmd_complete+0x78c>)
   23a60:	0018      	movs	r0, r3
   23a62:	4bd7      	ldr	r3, [pc, #860]	; (23dc0 <spi_cmd_complete+0x784>)
   23a64:	4798      	blx	r3
		result = N_FAIL;
   23a66:	2300      	movs	r3, #0
   23a68:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23a6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23a6c:	e248      	b.n	23f00 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   23a6e:	2376      	movs	r3, #118	; 0x76
   23a70:	18fb      	adds	r3, r7, r3
   23a72:	781b      	ldrb	r3, [r3, #0]
   23a74:	2276      	movs	r2, #118	; 0x76
   23a76:	18ba      	adds	r2, r7, r2
   23a78:	1c59      	adds	r1, r3, #1
   23a7a:	7011      	strb	r1, [r2, #0]
   23a7c:	001a      	movs	r2, r3
   23a7e:	2318      	movs	r3, #24
   23a80:	18fb      	adds	r3, r7, r3
   23a82:	5c9a      	ldrb	r2, [r3, r2]
   23a84:	2317      	movs	r3, #23
   23a86:	18fb      	adds	r3, r7, r3
   23a88:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   23a8a:	2317      	movs	r3, #23
   23a8c:	18fb      	adds	r3, r7, r3
   23a8e:	781b      	ldrb	r3, [r3, #0]
   23a90:	2b00      	cmp	r3, #0
   23a92:	d016      	beq.n	23ac2 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   23a94:	4acd      	ldr	r2, [pc, #820]	; (23dcc <spi_cmd_complete+0x790>)
   23a96:	49c8      	ldr	r1, [pc, #800]	; (23db8 <spi_cmd_complete+0x77c>)
   23a98:	4bc8      	ldr	r3, [pc, #800]	; (23dbc <spi_cmd_complete+0x780>)
   23a9a:	0018      	movs	r0, r3
   23a9c:	4bc8      	ldr	r3, [pc, #800]	; (23dc0 <spi_cmd_complete+0x784>)
   23a9e:	4798      	blx	r3
   23aa0:	2317      	movs	r3, #23
   23aa2:	18fb      	adds	r3, r7, r3
   23aa4:	781b      	ldrb	r3, [r3, #0]
   23aa6:	001a      	movs	r2, r3
   23aa8:	4bc9      	ldr	r3, [pc, #804]	; (23dd0 <spi_cmd_complete+0x794>)
   23aaa:	0011      	movs	r1, r2
   23aac:	0018      	movs	r0, r3
   23aae:	4bc4      	ldr	r3, [pc, #784]	; (23dc0 <spi_cmd_complete+0x784>)
   23ab0:	4798      	blx	r3
   23ab2:	4bc5      	ldr	r3, [pc, #788]	; (23dc8 <spi_cmd_complete+0x78c>)
   23ab4:	0018      	movs	r0, r3
   23ab6:	4bc2      	ldr	r3, [pc, #776]	; (23dc0 <spi_cmd_complete+0x784>)
   23ab8:	4798      	blx	r3
		result = N_FAIL;
   23aba:	2300      	movs	r3, #0
   23abc:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23abe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23ac0:	e21e      	b.n	23f00 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   23ac2:	230f      	movs	r3, #15
   23ac4:	18fb      	adds	r3, r7, r3
   23ac6:	781b      	ldrb	r3, [r3, #0]
   23ac8:	2bc4      	cmp	r3, #196	; 0xc4
   23aca:	d00f      	beq.n	23aec <spi_cmd_complete+0x4b0>
   23acc:	230f      	movs	r3, #15
   23ace:	18fb      	adds	r3, r7, r3
   23ad0:	781b      	ldrb	r3, [r3, #0]
   23ad2:	2bca      	cmp	r3, #202	; 0xca
   23ad4:	d00a      	beq.n	23aec <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   23ad6:	230f      	movs	r3, #15
   23ad8:	18fb      	adds	r3, r7, r3
   23ada:	781b      	ldrb	r3, [r3, #0]
   23adc:	2bc2      	cmp	r3, #194	; 0xc2
   23ade:	d005      	beq.n	23aec <spi_cmd_complete+0x4b0>
   23ae0:	230f      	movs	r3, #15
   23ae2:	18fb      	adds	r3, r7, r3
   23ae4:	781b      	ldrb	r3, [r3, #0]
   23ae6:	2bc8      	cmp	r3, #200	; 0xc8
   23ae8:	d000      	beq.n	23aec <spi_cmd_complete+0x4b0>
   23aea:	e208      	b.n	23efe <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   23aec:	230a      	movs	r3, #10
   23aee:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   23af0:	2376      	movs	r3, #118	; 0x76
   23af2:	18fb      	adds	r3, r7, r3
   23af4:	781a      	ldrb	r2, [r3, #0]
   23af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23af8:	429a      	cmp	r2, r3
   23afa:	d218      	bcs.n	23b2e <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   23afc:	2376      	movs	r3, #118	; 0x76
   23afe:	18fb      	adds	r3, r7, r3
   23b00:	781b      	ldrb	r3, [r3, #0]
   23b02:	2276      	movs	r2, #118	; 0x76
   23b04:	18ba      	adds	r2, r7, r2
   23b06:	1c59      	adds	r1, r3, #1
   23b08:	7011      	strb	r1, [r2, #0]
   23b0a:	001a      	movs	r2, r3
   23b0c:	2318      	movs	r3, #24
   23b0e:	18fb      	adds	r3, r7, r3
   23b10:	5c9a      	ldrb	r2, [r3, r2]
   23b12:	2317      	movs	r3, #23
   23b14:	18fb      	adds	r3, r7, r3
   23b16:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   23b18:	2317      	movs	r3, #23
   23b1a:	18fb      	adds	r3, r7, r3
   23b1c:	781b      	ldrb	r3, [r3, #0]
   23b1e:	091b      	lsrs	r3, r3, #4
   23b20:	b2db      	uxtb	r3, r3
   23b22:	001a      	movs	r2, r3
   23b24:	230f      	movs	r3, #15
   23b26:	4013      	ands	r3, r2
   23b28:	2b0f      	cmp	r3, #15
   23b2a:	d103      	bne.n	23b34 <spi_cmd_complete+0x4f8>
					break;
   23b2c:	e007      	b.n	23b3e <spi_cmd_complete+0x502>
					retry = 0;
   23b2e:	2300      	movs	r3, #0
   23b30:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   23b32:	e004      	b.n	23b3e <spi_cmd_complete+0x502>
			} while (retry--);
   23b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23b36:	1e5a      	subs	r2, r3, #1
   23b38:	667a      	str	r2, [r7, #100]	; 0x64
   23b3a:	2b00      	cmp	r3, #0
   23b3c:	d1d8      	bne.n	23af0 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   23b3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23b40:	2b00      	cmp	r3, #0
   23b42:	dc18      	bgt.n	23b76 <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   23b44:	2395      	movs	r3, #149	; 0x95
   23b46:	009a      	lsls	r2, r3, #2
   23b48:	499b      	ldr	r1, [pc, #620]	; (23db8 <spi_cmd_complete+0x77c>)
   23b4a:	4b9c      	ldr	r3, [pc, #624]	; (23dbc <spi_cmd_complete+0x780>)
   23b4c:	0018      	movs	r0, r3
   23b4e:	4b9c      	ldr	r3, [pc, #624]	; (23dc0 <spi_cmd_complete+0x784>)
   23b50:	4798      	blx	r3
   23b52:	2317      	movs	r3, #23
   23b54:	18fb      	adds	r3, r7, r3
   23b56:	781b      	ldrb	r3, [r3, #0]
   23b58:	001a      	movs	r2, r3
   23b5a:	4b9e      	ldr	r3, [pc, #632]	; (23dd4 <spi_cmd_complete+0x798>)
   23b5c:	0011      	movs	r1, r2
   23b5e:	0018      	movs	r0, r3
   23b60:	4b97      	ldr	r3, [pc, #604]	; (23dc0 <spi_cmd_complete+0x784>)
   23b62:	4798      	blx	r3
   23b64:	4b98      	ldr	r3, [pc, #608]	; (23dc8 <spi_cmd_complete+0x78c>)
   23b66:	0018      	movs	r0, r3
   23b68:	4b95      	ldr	r3, [pc, #596]	; (23dc0 <spi_cmd_complete+0x784>)
   23b6a:	4798      	blx	r3
				result = N_RESET;
   23b6c:	2301      	movs	r3, #1
   23b6e:	425b      	negs	r3, r3
   23b70:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   23b72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23b74:	e1c4      	b.n	23f00 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   23b76:	230f      	movs	r3, #15
   23b78:	18fb      	adds	r3, r7, r3
   23b7a:	781b      	ldrb	r3, [r3, #0]
   23b7c:	2bc4      	cmp	r3, #196	; 0xc4
   23b7e:	d005      	beq.n	23b8c <spi_cmd_complete+0x550>
   23b80:	230f      	movs	r3, #15
   23b82:	18fb      	adds	r3, r7, r3
   23b84:	781b      	ldrb	r3, [r3, #0]
   23b86:	2bca      	cmp	r3, #202	; 0xca
   23b88:	d000      	beq.n	23b8c <spi_cmd_complete+0x550>
   23b8a:	e08e      	b.n	23caa <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   23b8c:	2376      	movs	r3, #118	; 0x76
   23b8e:	18fb      	adds	r3, r7, r3
   23b90:	781b      	ldrb	r3, [r3, #0]
   23b92:	3303      	adds	r3, #3
   23b94:	001a      	movs	r2, r3
   23b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23b98:	429a      	cmp	r2, r3
   23b9a:	d23c      	bcs.n	23c16 <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   23b9c:	2376      	movs	r3, #118	; 0x76
   23b9e:	18fb      	adds	r3, r7, r3
   23ba0:	781b      	ldrb	r3, [r3, #0]
   23ba2:	2276      	movs	r2, #118	; 0x76
   23ba4:	18ba      	adds	r2, r7, r2
   23ba6:	1c59      	adds	r1, r3, #1
   23ba8:	7011      	strb	r1, [r2, #0]
   23baa:	001a      	movs	r2, r3
   23bac:	2318      	movs	r3, #24
   23bae:	18fb      	adds	r3, r7, r3
   23bb0:	5c9a      	ldrb	r2, [r3, r2]
   23bb2:	687b      	ldr	r3, [r7, #4]
   23bb4:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   23bb6:	687b      	ldr	r3, [r7, #4]
   23bb8:	1c5a      	adds	r2, r3, #1
   23bba:	2376      	movs	r3, #118	; 0x76
   23bbc:	18fb      	adds	r3, r7, r3
   23bbe:	781b      	ldrb	r3, [r3, #0]
   23bc0:	2176      	movs	r1, #118	; 0x76
   23bc2:	1879      	adds	r1, r7, r1
   23bc4:	1c58      	adds	r0, r3, #1
   23bc6:	7008      	strb	r0, [r1, #0]
   23bc8:	0019      	movs	r1, r3
   23bca:	2318      	movs	r3, #24
   23bcc:	18fb      	adds	r3, r7, r3
   23bce:	5c5b      	ldrb	r3, [r3, r1]
   23bd0:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   23bd2:	687b      	ldr	r3, [r7, #4]
   23bd4:	1c9a      	adds	r2, r3, #2
   23bd6:	2376      	movs	r3, #118	; 0x76
   23bd8:	18fb      	adds	r3, r7, r3
   23bda:	781b      	ldrb	r3, [r3, #0]
   23bdc:	2176      	movs	r1, #118	; 0x76
   23bde:	1879      	adds	r1, r7, r1
   23be0:	1c58      	adds	r0, r3, #1
   23be2:	7008      	strb	r0, [r1, #0]
   23be4:	0019      	movs	r1, r3
   23be6:	2318      	movs	r3, #24
   23be8:	18fb      	adds	r3, r7, r3
   23bea:	5c5b      	ldrb	r3, [r3, r1]
   23bec:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   23bee:	687b      	ldr	r3, [r7, #4]
   23bf0:	1cda      	adds	r2, r3, #3
   23bf2:	2376      	movs	r3, #118	; 0x76
   23bf4:	18fb      	adds	r3, r7, r3
   23bf6:	781b      	ldrb	r3, [r3, #0]
   23bf8:	2176      	movs	r1, #118	; 0x76
   23bfa:	1879      	adds	r1, r7, r1
   23bfc:	1c58      	adds	r0, r3, #1
   23bfe:	7008      	strb	r0, [r1, #0]
   23c00:	0019      	movs	r1, r3
   23c02:	2318      	movs	r3, #24
   23c04:	18fb      	adds	r3, r7, r3
   23c06:	5c5b      	ldrb	r3, [r3, r1]
   23c08:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   23c0a:	4b73      	ldr	r3, [pc, #460]	; (23dd8 <spi_cmd_complete+0x79c>)
   23c0c:	781b      	ldrb	r3, [r3, #0]
   23c0e:	2b00      	cmp	r3, #0
   23c10:	d000      	beq.n	23c14 <spi_cmd_complete+0x5d8>
   23c12:	e174      	b.n	23efe <spi_cmd_complete+0x8c2>
   23c14:	e011      	b.n	23c3a <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   23c16:	4a71      	ldr	r2, [pc, #452]	; (23ddc <spi_cmd_complete+0x7a0>)
   23c18:	4967      	ldr	r1, [pc, #412]	; (23db8 <spi_cmd_complete+0x77c>)
   23c1a:	4b68      	ldr	r3, [pc, #416]	; (23dbc <spi_cmd_complete+0x780>)
   23c1c:	0018      	movs	r0, r3
   23c1e:	4b68      	ldr	r3, [pc, #416]	; (23dc0 <spi_cmd_complete+0x784>)
   23c20:	4798      	blx	r3
   23c22:	4b6f      	ldr	r3, [pc, #444]	; (23de0 <spi_cmd_complete+0x7a4>)
   23c24:	0018      	movs	r0, r3
   23c26:	4b66      	ldr	r3, [pc, #408]	; (23dc0 <spi_cmd_complete+0x784>)
   23c28:	4798      	blx	r3
   23c2a:	4b67      	ldr	r3, [pc, #412]	; (23dc8 <spi_cmd_complete+0x78c>)
   23c2c:	0018      	movs	r0, r3
   23c2e:	4b64      	ldr	r3, [pc, #400]	; (23dc0 <spi_cmd_complete+0x784>)
   23c30:	4798      	blx	r3
					result = N_FAIL;
   23c32:	2300      	movs	r3, #0
   23c34:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   23c36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23c38:	e162      	b.n	23f00 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   23c3a:	2376      	movs	r3, #118	; 0x76
   23c3c:	18fb      	adds	r3, r7, r3
   23c3e:	781b      	ldrb	r3, [r3, #0]
   23c40:	3301      	adds	r3, #1
   23c42:	001a      	movs	r2, r3
   23c44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23c46:	429a      	cmp	r2, r3
   23c48:	d21c      	bcs.n	23c84 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   23c4a:	2376      	movs	r3, #118	; 0x76
   23c4c:	18fb      	adds	r3, r7, r3
   23c4e:	781b      	ldrb	r3, [r3, #0]
   23c50:	2276      	movs	r2, #118	; 0x76
   23c52:	18ba      	adds	r2, r7, r2
   23c54:	1c59      	adds	r1, r3, #1
   23c56:	7011      	strb	r1, [r2, #0]
   23c58:	001a      	movs	r2, r3
   23c5a:	2318      	movs	r3, #24
   23c5c:	18fb      	adds	r3, r7, r3
   23c5e:	5c9a      	ldrb	r2, [r3, r2]
   23c60:	2314      	movs	r3, #20
   23c62:	18fb      	adds	r3, r7, r3
   23c64:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   23c66:	2376      	movs	r3, #118	; 0x76
   23c68:	18fb      	adds	r3, r7, r3
   23c6a:	781b      	ldrb	r3, [r3, #0]
   23c6c:	2276      	movs	r2, #118	; 0x76
   23c6e:	18ba      	adds	r2, r7, r2
   23c70:	1c59      	adds	r1, r3, #1
   23c72:	7011      	strb	r1, [r2, #0]
   23c74:	001a      	movs	r2, r3
   23c76:	2318      	movs	r3, #24
   23c78:	18fb      	adds	r3, r7, r3
   23c7a:	5c9a      	ldrb	r2, [r3, r2]
   23c7c:	2314      	movs	r3, #20
   23c7e:	18fb      	adds	r3, r7, r3
   23c80:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   23c82:	e13c      	b.n	23efe <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   23c84:	239c      	movs	r3, #156	; 0x9c
   23c86:	009a      	lsls	r2, r3, #2
   23c88:	494b      	ldr	r1, [pc, #300]	; (23db8 <spi_cmd_complete+0x77c>)
   23c8a:	4b4c      	ldr	r3, [pc, #304]	; (23dbc <spi_cmd_complete+0x780>)
   23c8c:	0018      	movs	r0, r3
   23c8e:	4b4c      	ldr	r3, [pc, #304]	; (23dc0 <spi_cmd_complete+0x784>)
   23c90:	4798      	blx	r3
   23c92:	4b54      	ldr	r3, [pc, #336]	; (23de4 <spi_cmd_complete+0x7a8>)
   23c94:	0018      	movs	r0, r3
   23c96:	4b4a      	ldr	r3, [pc, #296]	; (23dc0 <spi_cmd_complete+0x784>)
   23c98:	4798      	blx	r3
   23c9a:	4b4b      	ldr	r3, [pc, #300]	; (23dc8 <spi_cmd_complete+0x78c>)
   23c9c:	0018      	movs	r0, r3
   23c9e:	4b48      	ldr	r3, [pc, #288]	; (23dc0 <spi_cmd_complete+0x784>)
   23ca0:	4798      	blx	r3
						result = N_FAIL;
   23ca2:	2300      	movs	r3, #0
   23ca4:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   23ca6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23ca8:	e12a      	b.n	23f00 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   23caa:	230f      	movs	r3, #15
   23cac:	18fb      	adds	r3, r7, r3
   23cae:	781b      	ldrb	r3, [r3, #0]
   23cb0:	2bc2      	cmp	r3, #194	; 0xc2
   23cb2:	d005      	beq.n	23cc0 <spi_cmd_complete+0x684>
   23cb4:	230f      	movs	r3, #15
   23cb6:	18fb      	adds	r3, r7, r3
   23cb8:	781b      	ldrb	r3, [r3, #0]
   23cba:	2bc8      	cmp	r3, #200	; 0xc8
   23cbc:	d000      	beq.n	23cc0 <spi_cmd_complete+0x684>
   23cbe:	e11e      	b.n	23efe <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   23cc0:	2300      	movs	r3, #0
   23cc2:	663b      	str	r3, [r7, #96]	; 0x60
   23cc4:	e011      	b.n	23cea <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   23cc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23cc8:	1c5a      	adds	r2, r3, #1
   23cca:	663a      	str	r2, [r7, #96]	; 0x60
   23ccc:	001a      	movs	r2, r3
   23cce:	687b      	ldr	r3, [r7, #4]
   23cd0:	189a      	adds	r2, r3, r2
   23cd2:	2376      	movs	r3, #118	; 0x76
   23cd4:	18fb      	adds	r3, r7, r3
   23cd6:	781b      	ldrb	r3, [r3, #0]
   23cd8:	2176      	movs	r1, #118	; 0x76
   23cda:	1879      	adds	r1, r7, r1
   23cdc:	1c58      	adds	r0, r3, #1
   23cde:	7008      	strb	r0, [r1, #0]
   23ce0:	0019      	movs	r1, r3
   23ce2:	2318      	movs	r3, #24
   23ce4:	18fb      	adds	r3, r7, r3
   23ce6:	5c5b      	ldrb	r3, [r3, r1]
   23ce8:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   23cea:	2376      	movs	r3, #118	; 0x76
   23cec:	18fb      	adds	r3, r7, r3
   23cee:	781a      	ldrb	r2, [r3, #0]
   23cf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23cf2:	429a      	cmp	r2, r3
   23cf4:	d203      	bcs.n	23cfe <spi_cmd_complete+0x6c2>
   23cf6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23cf8:	683b      	ldr	r3, [r7, #0]
   23cfa:	429a      	cmp	r2, r3
   23cfc:	d3e3      	bcc.n	23cc6 <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   23cfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23d00:	683a      	ldr	r2, [r7, #0]
   23d02:	1ad3      	subs	r3, r2, r3
   23d04:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   23d06:	683b      	ldr	r3, [r7, #0]
   23d08:	2b00      	cmp	r3, #0
   23d0a:	d100      	bne.n	23d0e <spi_cmd_complete+0x6d2>
   23d0c:	e0f1      	b.n	23ef2 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   23d0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23d10:	2280      	movs	r2, #128	; 0x80
   23d12:	0192      	lsls	r2, r2, #6
   23d14:	1ad3      	subs	r3, r2, r3
   23d16:	001a      	movs	r2, r3
   23d18:	683b      	ldr	r3, [r7, #0]
   23d1a:	429a      	cmp	r2, r3
   23d1c:	d302      	bcc.n	23d24 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   23d1e:	683b      	ldr	r3, [r7, #0]
   23d20:	65fb      	str	r3, [r7, #92]	; 0x5c
   23d22:	e004      	b.n	23d2e <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   23d24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23d26:	2280      	movs	r2, #128	; 0x80
   23d28:	0192      	lsls	r2, r2, #6
   23d2a:	1ad3      	subs	r3, r2, r3
   23d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   23d2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23d30:	687a      	ldr	r2, [r7, #4]
   23d32:	18d3      	adds	r3, r2, r3
   23d34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   23d36:	b292      	uxth	r2, r2
   23d38:	0011      	movs	r1, r2
   23d3a:	0018      	movs	r0, r3
   23d3c:	4b2a      	ldr	r3, [pc, #168]	; (23de8 <spi_cmd_complete+0x7ac>)
   23d3e:	4798      	blx	r3
   23d40:	1e03      	subs	r3, r0, #0
   23d42:	d010      	beq.n	23d66 <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   23d44:	4a29      	ldr	r2, [pc, #164]	; (23dec <spi_cmd_complete+0x7b0>)
   23d46:	491c      	ldr	r1, [pc, #112]	; (23db8 <spi_cmd_complete+0x77c>)
   23d48:	4b1c      	ldr	r3, [pc, #112]	; (23dbc <spi_cmd_complete+0x780>)
   23d4a:	0018      	movs	r0, r3
   23d4c:	4b1c      	ldr	r3, [pc, #112]	; (23dc0 <spi_cmd_complete+0x784>)
   23d4e:	4798      	blx	r3
   23d50:	4b27      	ldr	r3, [pc, #156]	; (23df0 <spi_cmd_complete+0x7b4>)
   23d52:	0018      	movs	r0, r3
   23d54:	4b1a      	ldr	r3, [pc, #104]	; (23dc0 <spi_cmd_complete+0x784>)
   23d56:	4798      	blx	r3
   23d58:	4b1b      	ldr	r3, [pc, #108]	; (23dc8 <spi_cmd_complete+0x78c>)
   23d5a:	0018      	movs	r0, r3
   23d5c:	4b18      	ldr	r3, [pc, #96]	; (23dc0 <spi_cmd_complete+0x784>)
   23d5e:	4798      	blx	r3
						result = N_FAIL;
   23d60:	2300      	movs	r3, #0
   23d62:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   23d64:	e0cb      	b.n	23efe <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   23d66:	4b1c      	ldr	r3, [pc, #112]	; (23dd8 <spi_cmd_complete+0x79c>)
   23d68:	781b      	ldrb	r3, [r3, #0]
   23d6a:	2b00      	cmp	r3, #0
   23d6c:	d119      	bne.n	23da2 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   23d6e:	2314      	movs	r3, #20
   23d70:	18fb      	adds	r3, r7, r3
   23d72:	2102      	movs	r1, #2
   23d74:	0018      	movs	r0, r3
   23d76:	4b1c      	ldr	r3, [pc, #112]	; (23de8 <spi_cmd_complete+0x7ac>)
   23d78:	4798      	blx	r3
   23d7a:	1e03      	subs	r3, r0, #0
   23d7c:	d011      	beq.n	23da2 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   23d7e:	23a6      	movs	r3, #166	; 0xa6
   23d80:	009a      	lsls	r2, r3, #2
   23d82:	490d      	ldr	r1, [pc, #52]	; (23db8 <spi_cmd_complete+0x77c>)
   23d84:	4b0d      	ldr	r3, [pc, #52]	; (23dbc <spi_cmd_complete+0x780>)
   23d86:	0018      	movs	r0, r3
   23d88:	4b0d      	ldr	r3, [pc, #52]	; (23dc0 <spi_cmd_complete+0x784>)
   23d8a:	4798      	blx	r3
   23d8c:	4b19      	ldr	r3, [pc, #100]	; (23df4 <spi_cmd_complete+0x7b8>)
   23d8e:	0018      	movs	r0, r3
   23d90:	4b0b      	ldr	r3, [pc, #44]	; (23dc0 <spi_cmd_complete+0x784>)
   23d92:	4798      	blx	r3
   23d94:	4b0c      	ldr	r3, [pc, #48]	; (23dc8 <spi_cmd_complete+0x78c>)
   23d96:	0018      	movs	r0, r3
   23d98:	4b09      	ldr	r3, [pc, #36]	; (23dc0 <spi_cmd_complete+0x784>)
   23d9a:	4798      	blx	r3
							result = N_FAIL;
   23d9c:	2300      	movs	r3, #0
   23d9e:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   23da0:	e0ad      	b.n	23efe <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   23da2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   23da6:	18d3      	adds	r3, r2, r3
   23da8:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   23daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   23dac:	683a      	ldr	r2, [r7, #0]
   23dae:	1ad3      	subs	r3, r2, r3
   23db0:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   23db2:	e09e      	b.n	23ef2 <spi_cmd_complete+0x8b6>
   23db4:	0000022f 	.word	0x0000022f
   23db8:	00038fe8 	.word	0x00038fe8
   23dbc:	000389d4 	.word	0x000389d4
   23dc0:	0001db29 	.word	0x0001db29
   23dc4:	00038acc 	.word	0x00038acc
   23dc8:	00038a14 	.word	0x00038a14
   23dcc:	00000239 	.word	0x00000239
   23dd0:	00038b08 	.word	0x00038b08
   23dd4:	00038b3c 	.word	0x00038b3c
   23dd8:	20004130 	.word	0x20004130
   23ddc:	00000263 	.word	0x00000263
   23de0:	00038b6c 	.word	0x00038b6c
   23de4:	00038b9c 	.word	0x00038b9c
   23de8:	00022f75 	.word	0x00022f75
   23dec:	0000028e 	.word	0x0000028e
   23df0:	00038bcc 	.word	0x00038bcc
   23df4:	00038c00 	.word	0x00038c00
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   23df8:	683a      	ldr	r2, [r7, #0]
   23dfa:	2380      	movs	r3, #128	; 0x80
   23dfc:	019b      	lsls	r3, r3, #6
   23dfe:	429a      	cmp	r2, r3
   23e00:	d802      	bhi.n	23e08 <spi_cmd_complete+0x7cc>
						nbytes = sz;
   23e02:	683b      	ldr	r3, [r7, #0]
   23e04:	65bb      	str	r3, [r7, #88]	; 0x58
   23e06:	e002      	b.n	23e0e <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   23e08:	2380      	movs	r3, #128	; 0x80
   23e0a:	019b      	lsls	r3, r3, #6
   23e0c:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   23e0e:	230a      	movs	r3, #10
   23e10:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   23e12:	2317      	movs	r3, #23
   23e14:	18fb      	adds	r3, r7, r3
   23e16:	2101      	movs	r1, #1
   23e18:	0018      	movs	r0, r3
   23e1a:	4b3b      	ldr	r3, [pc, #236]	; (23f08 <spi_cmd_complete+0x8cc>)
   23e1c:	4798      	blx	r3
   23e1e:	1e03      	subs	r3, r0, #0
   23e20:	d011      	beq.n	23e46 <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   23e22:	23ae      	movs	r3, #174	; 0xae
   23e24:	009a      	lsls	r2, r3, #2
   23e26:	4939      	ldr	r1, [pc, #228]	; (23f0c <spi_cmd_complete+0x8d0>)
   23e28:	4b39      	ldr	r3, [pc, #228]	; (23f10 <spi_cmd_complete+0x8d4>)
   23e2a:	0018      	movs	r0, r3
   23e2c:	4b39      	ldr	r3, [pc, #228]	; (23f14 <spi_cmd_complete+0x8d8>)
   23e2e:	4798      	blx	r3
   23e30:	4b39      	ldr	r3, [pc, #228]	; (23f18 <spi_cmd_complete+0x8dc>)
   23e32:	0018      	movs	r0, r3
   23e34:	4b37      	ldr	r3, [pc, #220]	; (23f14 <spi_cmd_complete+0x8d8>)
   23e36:	4798      	blx	r3
   23e38:	4b38      	ldr	r3, [pc, #224]	; (23f1c <spi_cmd_complete+0x8e0>)
   23e3a:	0018      	movs	r0, r3
   23e3c:	4b35      	ldr	r3, [pc, #212]	; (23f14 <spi_cmd_complete+0x8d8>)
   23e3e:	4798      	blx	r3
							result = N_FAIL;
   23e40:	2300      	movs	r3, #0
   23e42:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   23e44:	e010      	b.n	23e68 <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   23e46:	2317      	movs	r3, #23
   23e48:	18fb      	adds	r3, r7, r3
   23e4a:	781b      	ldrb	r3, [r3, #0]
   23e4c:	091b      	lsrs	r3, r3, #4
   23e4e:	b2db      	uxtb	r3, r3
   23e50:	001a      	movs	r2, r3
   23e52:	230f      	movs	r3, #15
   23e54:	4013      	ands	r3, r2
   23e56:	2b0f      	cmp	r3, #15
   23e58:	d005      	beq.n	23e66 <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   23e5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23e5c:	1e5a      	subs	r2, r3, #1
   23e5e:	667a      	str	r2, [r7, #100]	; 0x64
   23e60:	2b00      	cmp	r3, #0
   23e62:	d1d6      	bne.n	23e12 <spi_cmd_complete+0x7d6>
   23e64:	e000      	b.n	23e68 <spi_cmd_complete+0x82c>
							break;
   23e66:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   23e68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23e6a:	2b00      	cmp	r3, #0
   23e6c:	d046      	beq.n	23efc <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   23e6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23e70:	687a      	ldr	r2, [r7, #4]
   23e72:	18d3      	adds	r3, r2, r3
   23e74:	6dba      	ldr	r2, [r7, #88]	; 0x58
   23e76:	b292      	uxth	r2, r2
   23e78:	0011      	movs	r1, r2
   23e7a:	0018      	movs	r0, r3
   23e7c:	4b22      	ldr	r3, [pc, #136]	; (23f08 <spi_cmd_complete+0x8cc>)
   23e7e:	4798      	blx	r3
   23e80:	1e03      	subs	r3, r0, #0
   23e82:	d011      	beq.n	23ea8 <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   23e84:	23b2      	movs	r3, #178	; 0xb2
   23e86:	009a      	lsls	r2, r3, #2
   23e88:	4920      	ldr	r1, [pc, #128]	; (23f0c <spi_cmd_complete+0x8d0>)
   23e8a:	4b21      	ldr	r3, [pc, #132]	; (23f10 <spi_cmd_complete+0x8d4>)
   23e8c:	0018      	movs	r0, r3
   23e8e:	4b21      	ldr	r3, [pc, #132]	; (23f14 <spi_cmd_complete+0x8d8>)
   23e90:	4798      	blx	r3
   23e92:	4b23      	ldr	r3, [pc, #140]	; (23f20 <spi_cmd_complete+0x8e4>)
   23e94:	0018      	movs	r0, r3
   23e96:	4b1f      	ldr	r3, [pc, #124]	; (23f14 <spi_cmd_complete+0x8d8>)
   23e98:	4798      	blx	r3
   23e9a:	4b20      	ldr	r3, [pc, #128]	; (23f1c <spi_cmd_complete+0x8e0>)
   23e9c:	0018      	movs	r0, r3
   23e9e:	4b1d      	ldr	r3, [pc, #116]	; (23f14 <spi_cmd_complete+0x8d8>)
   23ea0:	4798      	blx	r3
						result = N_FAIL;
   23ea2:	2300      	movs	r3, #0
   23ea4:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   23ea6:	e02a      	b.n	23efe <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   23ea8:	4b1e      	ldr	r3, [pc, #120]	; (23f24 <spi_cmd_complete+0x8e8>)
   23eaa:	781b      	ldrb	r3, [r3, #0]
   23eac:	2b00      	cmp	r3, #0
   23eae:	d118      	bne.n	23ee2 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   23eb0:	2314      	movs	r3, #20
   23eb2:	18fb      	adds	r3, r7, r3
   23eb4:	2102      	movs	r1, #2
   23eb6:	0018      	movs	r0, r3
   23eb8:	4b13      	ldr	r3, [pc, #76]	; (23f08 <spi_cmd_complete+0x8cc>)
   23eba:	4798      	blx	r3
   23ebc:	1e03      	subs	r3, r0, #0
   23ebe:	d010      	beq.n	23ee2 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   23ec0:	4a19      	ldr	r2, [pc, #100]	; (23f28 <spi_cmd_complete+0x8ec>)
   23ec2:	4912      	ldr	r1, [pc, #72]	; (23f0c <spi_cmd_complete+0x8d0>)
   23ec4:	4b12      	ldr	r3, [pc, #72]	; (23f10 <spi_cmd_complete+0x8d4>)
   23ec6:	0018      	movs	r0, r3
   23ec8:	4b12      	ldr	r3, [pc, #72]	; (23f14 <spi_cmd_complete+0x8d8>)
   23eca:	4798      	blx	r3
   23ecc:	4b17      	ldr	r3, [pc, #92]	; (23f2c <spi_cmd_complete+0x8f0>)
   23ece:	0018      	movs	r0, r3
   23ed0:	4b10      	ldr	r3, [pc, #64]	; (23f14 <spi_cmd_complete+0x8d8>)
   23ed2:	4798      	blx	r3
   23ed4:	4b11      	ldr	r3, [pc, #68]	; (23f1c <spi_cmd_complete+0x8e0>)
   23ed6:	0018      	movs	r0, r3
   23ed8:	4b0e      	ldr	r3, [pc, #56]	; (23f14 <spi_cmd_complete+0x8d8>)
   23eda:	4798      	blx	r3
							result = N_FAIL;
   23edc:	2300      	movs	r3, #0
   23ede:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   23ee0:	e00d      	b.n	23efe <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   23ee2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23ee4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23ee6:	18d3      	adds	r3, r2, r3
   23ee8:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   23eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23eec:	683a      	ldr	r2, [r7, #0]
   23eee:	1ad3      	subs	r3, r2, r3
   23ef0:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   23ef2:	683b      	ldr	r3, [r7, #0]
   23ef4:	2b00      	cmp	r3, #0
   23ef6:	d000      	beq.n	23efa <spi_cmd_complete+0x8be>
   23ef8:	e77e      	b.n	23df8 <spi_cmd_complete+0x7bc>
   23efa:	e000      	b.n	23efe <spi_cmd_complete+0x8c2>
						break;
   23efc:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   23efe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   23f00:	0018      	movs	r0, r3
   23f02:	46bd      	mov	sp, r7
   23f04:	b01f      	add	sp, #124	; 0x7c
   23f06:	bd90      	pop	{r4, r7, pc}
   23f08:	00022f75 	.word	0x00022f75
   23f0c:	00038fe8 	.word	0x00038fe8
   23f10:	000389d4 	.word	0x000389d4
   23f14:	0001db29 	.word	0x0001db29
   23f18:	00038c38 	.word	0x00038c38
   23f1c:	00038a14 	.word	0x00038a14
   23f20:	00038bcc 	.word	0x00038bcc
   23f24:	20004130 	.word	0x20004130
   23f28:	000002d2 	.word	0x000002d2
   23f2c:	00038c00 	.word	0x00038c00

00023f30 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   23f30:	b580      	push	{r7, lr}
   23f32:	b086      	sub	sp, #24
   23f34:	af00      	add	r7, sp, #0
   23f36:	6078      	str	r0, [r7, #4]
   23f38:	000a      	movs	r2, r1
   23f3a:	1cbb      	adds	r3, r7, #2
   23f3c:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   23f3e:	2313      	movs	r3, #19
   23f40:	18fb      	adds	r3, r7, r3
   23f42:	2201      	movs	r2, #1
   23f44:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   23f46:	230c      	movs	r3, #12
   23f48:	18fb      	adds	r3, r7, r3
   23f4a:	2200      	movs	r2, #0
   23f4c:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   23f4e:	2316      	movs	r3, #22
   23f50:	18fb      	adds	r3, r7, r3
   23f52:	2200      	movs	r2, #0
   23f54:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   23f56:	1cbb      	adds	r3, r7, #2
   23f58:	881a      	ldrh	r2, [r3, #0]
   23f5a:	2380      	movs	r3, #128	; 0x80
   23f5c:	019b      	lsls	r3, r3, #6
   23f5e:	429a      	cmp	r2, r3
   23f60:	d805      	bhi.n	23f6e <spi_data_write+0x3e>
			nbytes = sz;
   23f62:	2314      	movs	r3, #20
   23f64:	18fb      	adds	r3, r7, r3
   23f66:	1cba      	adds	r2, r7, #2
   23f68:	8812      	ldrh	r2, [r2, #0]
   23f6a:	801a      	strh	r2, [r3, #0]
   23f6c:	e004      	b.n	23f78 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   23f6e:	2314      	movs	r3, #20
   23f70:	18fb      	adds	r3, r7, r3
   23f72:	2280      	movs	r2, #128	; 0x80
   23f74:	0192      	lsls	r2, r2, #6
   23f76:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   23f78:	2311      	movs	r3, #17
   23f7a:	18fb      	adds	r3, r7, r3
   23f7c:	22f0      	movs	r2, #240	; 0xf0
   23f7e:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   23f80:	2316      	movs	r3, #22
   23f82:	18fb      	adds	r3, r7, r3
   23f84:	2200      	movs	r2, #0
   23f86:	5e9b      	ldrsh	r3, [r3, r2]
   23f88:	2b00      	cmp	r3, #0
   23f8a:	d10f      	bne.n	23fac <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   23f8c:	1cbb      	adds	r3, r7, #2
   23f8e:	881a      	ldrh	r2, [r3, #0]
   23f90:	2380      	movs	r3, #128	; 0x80
   23f92:	019b      	lsls	r3, r3, #6
   23f94:	429a      	cmp	r2, r3
   23f96:	d804      	bhi.n	23fa2 <spi_data_write+0x72>
				order = 0x3;
   23f98:	2312      	movs	r3, #18
   23f9a:	18fb      	adds	r3, r7, r3
   23f9c:	2203      	movs	r2, #3
   23f9e:	701a      	strb	r2, [r3, #0]
   23fa0:	e013      	b.n	23fca <spi_data_write+0x9a>
			else
				order = 0x1;
   23fa2:	2312      	movs	r3, #18
   23fa4:	18fb      	adds	r3, r7, r3
   23fa6:	2201      	movs	r2, #1
   23fa8:	701a      	strb	r2, [r3, #0]
   23faa:	e00e      	b.n	23fca <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   23fac:	1cbb      	adds	r3, r7, #2
   23fae:	881a      	ldrh	r2, [r3, #0]
   23fb0:	2380      	movs	r3, #128	; 0x80
   23fb2:	019b      	lsls	r3, r3, #6
   23fb4:	429a      	cmp	r2, r3
   23fb6:	d804      	bhi.n	23fc2 <spi_data_write+0x92>
				order = 0x3;
   23fb8:	2312      	movs	r3, #18
   23fba:	18fb      	adds	r3, r7, r3
   23fbc:	2203      	movs	r2, #3
   23fbe:	701a      	strb	r2, [r3, #0]
   23fc0:	e003      	b.n	23fca <spi_data_write+0x9a>
			else
				order = 0x2;
   23fc2:	2312      	movs	r3, #18
   23fc4:	18fb      	adds	r3, r7, r3
   23fc6:	2202      	movs	r2, #2
   23fc8:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   23fca:	2311      	movs	r3, #17
   23fcc:	18fb      	adds	r3, r7, r3
   23fce:	781a      	ldrb	r2, [r3, #0]
   23fd0:	2312      	movs	r3, #18
   23fd2:	18fb      	adds	r3, r7, r3
   23fd4:	781b      	ldrb	r3, [r3, #0]
   23fd6:	4313      	orrs	r3, r2
   23fd8:	b2da      	uxtb	r2, r3
   23fda:	2311      	movs	r3, #17
   23fdc:	18fb      	adds	r3, r7, r3
   23fde:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   23fe0:	2311      	movs	r3, #17
   23fe2:	18fb      	adds	r3, r7, r3
   23fe4:	2101      	movs	r1, #1
   23fe6:	0018      	movs	r0, r3
   23fe8:	4b3c      	ldr	r3, [pc, #240]	; (240dc <spi_data_write+0x1ac>)
   23fea:	4798      	blx	r3
   23fec:	1e03      	subs	r3, r0, #0
   23fee:	d012      	beq.n	24016 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   23ff0:	4a3b      	ldr	r2, [pc, #236]	; (240e0 <spi_data_write+0x1b0>)
   23ff2:	493c      	ldr	r1, [pc, #240]	; (240e4 <spi_data_write+0x1b4>)
   23ff4:	4b3c      	ldr	r3, [pc, #240]	; (240e8 <spi_data_write+0x1b8>)
   23ff6:	0018      	movs	r0, r3
   23ff8:	4b3c      	ldr	r3, [pc, #240]	; (240ec <spi_data_write+0x1bc>)
   23ffa:	4798      	blx	r3
   23ffc:	4b3c      	ldr	r3, [pc, #240]	; (240f0 <spi_data_write+0x1c0>)
   23ffe:	0018      	movs	r0, r3
   24000:	4b3a      	ldr	r3, [pc, #232]	; (240ec <spi_data_write+0x1bc>)
   24002:	4798      	blx	r3
   24004:	4b3b      	ldr	r3, [pc, #236]	; (240f4 <spi_data_write+0x1c4>)
   24006:	0018      	movs	r0, r3
   24008:	4b38      	ldr	r3, [pc, #224]	; (240ec <spi_data_write+0x1bc>)
   2400a:	4798      	blx	r3
			result = N_FAIL;
   2400c:	2313      	movs	r3, #19
   2400e:	18fb      	adds	r3, r7, r3
   24010:	2200      	movs	r2, #0
   24012:	701a      	strb	r2, [r3, #0]
			break;
   24014:	e059      	b.n	240ca <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   24016:	2316      	movs	r3, #22
   24018:	18fb      	adds	r3, r7, r3
   2401a:	2200      	movs	r2, #0
   2401c:	5e9b      	ldrsh	r3, [r3, r2]
   2401e:	687a      	ldr	r2, [r7, #4]
   24020:	18d2      	adds	r2, r2, r3
   24022:	2314      	movs	r3, #20
   24024:	18fb      	adds	r3, r7, r3
   24026:	881b      	ldrh	r3, [r3, #0]
   24028:	0019      	movs	r1, r3
   2402a:	0010      	movs	r0, r2
   2402c:	4b2b      	ldr	r3, [pc, #172]	; (240dc <spi_data_write+0x1ac>)
   2402e:	4798      	blx	r3
   24030:	1e03      	subs	r3, r0, #0
   24032:	d012      	beq.n	2405a <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   24034:	4a30      	ldr	r2, [pc, #192]	; (240f8 <spi_data_write+0x1c8>)
   24036:	492b      	ldr	r1, [pc, #172]	; (240e4 <spi_data_write+0x1b4>)
   24038:	4b2b      	ldr	r3, [pc, #172]	; (240e8 <spi_data_write+0x1b8>)
   2403a:	0018      	movs	r0, r3
   2403c:	4b2b      	ldr	r3, [pc, #172]	; (240ec <spi_data_write+0x1bc>)
   2403e:	4798      	blx	r3
   24040:	4b2e      	ldr	r3, [pc, #184]	; (240fc <spi_data_write+0x1cc>)
   24042:	0018      	movs	r0, r3
   24044:	4b29      	ldr	r3, [pc, #164]	; (240ec <spi_data_write+0x1bc>)
   24046:	4798      	blx	r3
   24048:	4b2a      	ldr	r3, [pc, #168]	; (240f4 <spi_data_write+0x1c4>)
   2404a:	0018      	movs	r0, r3
   2404c:	4b27      	ldr	r3, [pc, #156]	; (240ec <spi_data_write+0x1bc>)
   2404e:	4798      	blx	r3
			result = N_FAIL;
   24050:	2313      	movs	r3, #19
   24052:	18fb      	adds	r3, r7, r3
   24054:	2200      	movs	r2, #0
   24056:	701a      	strb	r2, [r3, #0]
			break;
   24058:	e037      	b.n	240ca <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   2405a:	4b29      	ldr	r3, [pc, #164]	; (24100 <spi_data_write+0x1d0>)
   2405c:	781b      	ldrb	r3, [r3, #0]
   2405e:	2b00      	cmp	r3, #0
   24060:	d11b      	bne.n	2409a <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   24062:	230c      	movs	r3, #12
   24064:	18fb      	adds	r3, r7, r3
   24066:	2102      	movs	r1, #2
   24068:	0018      	movs	r0, r3
   2406a:	4b1c      	ldr	r3, [pc, #112]	; (240dc <spi_data_write+0x1ac>)
   2406c:	4798      	blx	r3
   2406e:	1e03      	subs	r3, r0, #0
   24070:	d013      	beq.n	2409a <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   24072:	23d7      	movs	r3, #215	; 0xd7
   24074:	009a      	lsls	r2, r3, #2
   24076:	491b      	ldr	r1, [pc, #108]	; (240e4 <spi_data_write+0x1b4>)
   24078:	4b1b      	ldr	r3, [pc, #108]	; (240e8 <spi_data_write+0x1b8>)
   2407a:	0018      	movs	r0, r3
   2407c:	4b1b      	ldr	r3, [pc, #108]	; (240ec <spi_data_write+0x1bc>)
   2407e:	4798      	blx	r3
   24080:	4b20      	ldr	r3, [pc, #128]	; (24104 <spi_data_write+0x1d4>)
   24082:	0018      	movs	r0, r3
   24084:	4b19      	ldr	r3, [pc, #100]	; (240ec <spi_data_write+0x1bc>)
   24086:	4798      	blx	r3
   24088:	4b1a      	ldr	r3, [pc, #104]	; (240f4 <spi_data_write+0x1c4>)
   2408a:	0018      	movs	r0, r3
   2408c:	4b17      	ldr	r3, [pc, #92]	; (240ec <spi_data_write+0x1bc>)
   2408e:	4798      	blx	r3
				result = N_FAIL;
   24090:	2313      	movs	r3, #19
   24092:	18fb      	adds	r3, r7, r3
   24094:	2200      	movs	r2, #0
   24096:	701a      	strb	r2, [r3, #0]
				break;
   24098:	e017      	b.n	240ca <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   2409a:	2316      	movs	r3, #22
   2409c:	18fb      	adds	r3, r7, r3
   2409e:	881a      	ldrh	r2, [r3, #0]
   240a0:	2314      	movs	r3, #20
   240a2:	18fb      	adds	r3, r7, r3
   240a4:	881b      	ldrh	r3, [r3, #0]
   240a6:	18d3      	adds	r3, r2, r3
   240a8:	b29a      	uxth	r2, r3
   240aa:	2316      	movs	r3, #22
   240ac:	18fb      	adds	r3, r7, r3
   240ae:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   240b0:	1cbb      	adds	r3, r7, #2
   240b2:	1cb9      	adds	r1, r7, #2
   240b4:	2214      	movs	r2, #20
   240b6:	18ba      	adds	r2, r7, r2
   240b8:	8809      	ldrh	r1, [r1, #0]
   240ba:	8812      	ldrh	r2, [r2, #0]
   240bc:	1a8a      	subs	r2, r1, r2
   240be:	801a      	strh	r2, [r3, #0]
	} while (sz);
   240c0:	1cbb      	adds	r3, r7, #2
   240c2:	881b      	ldrh	r3, [r3, #0]
   240c4:	2b00      	cmp	r3, #0
   240c6:	d000      	beq.n	240ca <spi_data_write+0x19a>
   240c8:	e745      	b.n	23f56 <spi_data_write+0x26>


	return result;
   240ca:	2313      	movs	r3, #19
   240cc:	18fb      	adds	r3, r7, r3
   240ce:	781b      	ldrb	r3, [r3, #0]
   240d0:	b25b      	sxtb	r3, r3
}
   240d2:	0018      	movs	r0, r3
   240d4:	46bd      	mov	sp, r7
   240d6:	b006      	add	sp, #24
   240d8:	bd80      	pop	{r7, pc}
   240da:	46c0      	nop			; (mov r8, r8)
   240dc:	00022fb9 	.word	0x00022fb9
   240e0:	00000349 	.word	0x00000349
   240e4:	00038ffc 	.word	0x00038ffc
   240e8:	000389d4 	.word	0x000389d4
   240ec:	0001db29 	.word	0x0001db29
   240f0:	00038c9c 	.word	0x00038c9c
   240f4:	00038a14 	.word	0x00038a14
   240f8:	00000352 	.word	0x00000352
   240fc:	00038cd4 	.word	0x00038cd4
   24100:	20004130 	.word	0x20004130
   24104:	00038d08 	.word	0x00038d08

00024108 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   24108:	b590      	push	{r4, r7, lr}
   2410a:	b087      	sub	sp, #28
   2410c:	af02      	add	r7, sp, #8
   2410e:	6078      	str	r0, [r7, #4]
   24110:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   24112:	230f      	movs	r3, #15
   24114:	18fb      	adds	r3, r7, r3
   24116:	220a      	movs	r2, #10
   24118:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   2411a:	230c      	movs	r3, #12
   2411c:	18fb      	adds	r3, r7, r3
   2411e:	2201      	movs	r2, #1
   24120:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   24122:	230e      	movs	r3, #14
   24124:	18fb      	adds	r3, r7, r3
   24126:	22c9      	movs	r2, #201	; 0xc9
   24128:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   2412a:	230d      	movs	r3, #13
   2412c:	18fb      	adds	r3, r7, r3
   2412e:	2200      	movs	r2, #0
   24130:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   24132:	687b      	ldr	r3, [r7, #4]
   24134:	2b30      	cmp	r3, #48	; 0x30
   24136:	d808      	bhi.n	2414a <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   24138:	230e      	movs	r3, #14
   2413a:	18fb      	adds	r3, r7, r3
   2413c:	22c3      	movs	r2, #195	; 0xc3
   2413e:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   24140:	230d      	movs	r3, #13
   24142:	18fb      	adds	r3, r7, r3
   24144:	2201      	movs	r2, #1
   24146:	701a      	strb	r2, [r3, #0]
   24148:	e007      	b.n	2415a <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   2414a:	230e      	movs	r3, #14
   2414c:	18fb      	adds	r3, r7, r3
   2414e:	22c9      	movs	r2, #201	; 0xc9
   24150:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   24152:	230d      	movs	r3, #13
   24154:	18fb      	adds	r3, r7, r3
   24156:	2200      	movs	r2, #0
   24158:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   2415a:	003a      	movs	r2, r7
   2415c:	6879      	ldr	r1, [r7, #4]
   2415e:	230e      	movs	r3, #14
   24160:	18fb      	adds	r3, r7, r3
   24162:	7818      	ldrb	r0, [r3, #0]
   24164:	230d      	movs	r3, #13
   24166:	18fb      	adds	r3, r7, r3
   24168:	781b      	ldrb	r3, [r3, #0]
   2416a:	9300      	str	r3, [sp, #0]
   2416c:	2304      	movs	r3, #4
   2416e:	4c2e      	ldr	r4, [pc, #184]	; (24228 <spi_write_reg+0x120>)
   24170:	47a0      	blx	r4
   24172:	0002      	movs	r2, r0
   24174:	230c      	movs	r3, #12
   24176:	18fb      	adds	r3, r7, r3
   24178:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2417a:	230c      	movs	r3, #12
   2417c:	18fb      	adds	r3, r7, r3
   2417e:	781b      	ldrb	r3, [r3, #0]
   24180:	b25b      	sxtb	r3, r3
   24182:	2b01      	cmp	r3, #1
   24184:	d010      	beq.n	241a8 <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   24186:	4a29      	ldr	r2, [pc, #164]	; (2422c <spi_write_reg+0x124>)
   24188:	4929      	ldr	r1, [pc, #164]	; (24230 <spi_write_reg+0x128>)
   2418a:	4b2a      	ldr	r3, [pc, #168]	; (24234 <spi_write_reg+0x12c>)
   2418c:	0018      	movs	r0, r3
   2418e:	4b2a      	ldr	r3, [pc, #168]	; (24238 <spi_write_reg+0x130>)
   24190:	4798      	blx	r3
   24192:	687a      	ldr	r2, [r7, #4]
   24194:	4b29      	ldr	r3, [pc, #164]	; (2423c <spi_write_reg+0x134>)
   24196:	0011      	movs	r1, r2
   24198:	0018      	movs	r0, r3
   2419a:	4b27      	ldr	r3, [pc, #156]	; (24238 <spi_write_reg+0x130>)
   2419c:	4798      	blx	r3
   2419e:	4b28      	ldr	r3, [pc, #160]	; (24240 <spi_write_reg+0x138>)
   241a0:	0018      	movs	r0, r3
   241a2:	4b25      	ldr	r3, [pc, #148]	; (24238 <spi_write_reg+0x130>)
   241a4:	4798      	blx	r3
		goto _FAIL_;
   241a6:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   241a8:	230c      	movs	r3, #12
   241aa:	18fb      	adds	r3, r7, r3
   241ac:	781b      	ldrb	r3, [r3, #0]
   241ae:	b25b      	sxtb	r3, r3
   241b0:	2b01      	cmp	r3, #1
   241b2:	d030      	beq.n	24216 <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   241b4:	2001      	movs	r0, #1
   241b6:	4b23      	ldr	r3, [pc, #140]	; (24244 <spi_write_reg+0x13c>)
   241b8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   241ba:	2300      	movs	r3, #0
   241bc:	9300      	str	r3, [sp, #0]
   241be:	2300      	movs	r3, #0
   241c0:	2200      	movs	r2, #0
   241c2:	2100      	movs	r1, #0
   241c4:	20cf      	movs	r0, #207	; 0xcf
   241c6:	4c20      	ldr	r4, [pc, #128]	; (24248 <spi_write_reg+0x140>)
   241c8:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   241ca:	20cf      	movs	r0, #207	; 0xcf
   241cc:	4b1f      	ldr	r3, [pc, #124]	; (2424c <spi_write_reg+0x144>)
   241ce:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   241d0:	23ea      	movs	r3, #234	; 0xea
   241d2:	009a      	lsls	r2, r3, #2
   241d4:	4916      	ldr	r1, [pc, #88]	; (24230 <spi_write_reg+0x128>)
   241d6:	4b17      	ldr	r3, [pc, #92]	; (24234 <spi_write_reg+0x12c>)
   241d8:	0018      	movs	r0, r3
   241da:	4b17      	ldr	r3, [pc, #92]	; (24238 <spi_write_reg+0x130>)
   241dc:	4798      	blx	r3
   241de:	230f      	movs	r3, #15
   241e0:	18fb      	adds	r3, r7, r3
   241e2:	7819      	ldrb	r1, [r3, #0]
   241e4:	683b      	ldr	r3, [r7, #0]
   241e6:	687a      	ldr	r2, [r7, #4]
   241e8:	4819      	ldr	r0, [pc, #100]	; (24250 <spi_write_reg+0x148>)
   241ea:	4c13      	ldr	r4, [pc, #76]	; (24238 <spi_write_reg+0x130>)
   241ec:	47a0      	blx	r4
   241ee:	4b14      	ldr	r3, [pc, #80]	; (24240 <spi_write_reg+0x138>)
   241f0:	0018      	movs	r0, r3
   241f2:	4b11      	ldr	r3, [pc, #68]	; (24238 <spi_write_reg+0x130>)
   241f4:	4798      	blx	r3
		nm_bsp_sleep(1);
   241f6:	2001      	movs	r0, #1
   241f8:	4b12      	ldr	r3, [pc, #72]	; (24244 <spi_write_reg+0x13c>)
   241fa:	4798      	blx	r3
		retry--;
   241fc:	230f      	movs	r3, #15
   241fe:	18fb      	adds	r3, r7, r3
   24200:	781a      	ldrb	r2, [r3, #0]
   24202:	230f      	movs	r3, #15
   24204:	18fb      	adds	r3, r7, r3
   24206:	3a01      	subs	r2, #1
   24208:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2420a:	230f      	movs	r3, #15
   2420c:	18fb      	adds	r3, r7, r3
   2420e:	781b      	ldrb	r3, [r3, #0]
   24210:	2b00      	cmp	r3, #0
   24212:	d000      	beq.n	24216 <spi_write_reg+0x10e>
   24214:	e78d      	b.n	24132 <spi_write_reg+0x2a>
	}

	return result;
   24216:	230c      	movs	r3, #12
   24218:	18fb      	adds	r3, r7, r3
   2421a:	781b      	ldrb	r3, [r3, #0]
   2421c:	b25b      	sxtb	r3, r3
}
   2421e:	0018      	movs	r0, r3
   24220:	46bd      	mov	sp, r7
   24222:	b005      	add	sp, #20
   24224:	bd90      	pop	{r4, r7, pc}
   24226:	46c0      	nop			; (mov r8, r8)
   24228:	0002363d 	.word	0x0002363d
   2422c:	0000039d 	.word	0x0000039d
   24230:	0003900c 	.word	0x0003900c
   24234:	000389d4 	.word	0x000389d4
   24238:	0001db29 	.word	0x0001db29
   2423c:	00038d40 	.word	0x00038d40
   24240:	00038a14 	.word	0x00038a14
   24244:	0001ff7d 	.word	0x0001ff7d
   24248:	000230c1 	.word	0x000230c1
   2424c:	00023501 	.word	0x00023501
   24250:	00038d6c 	.word	0x00038d6c

00024254 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   24254:	b590      	push	{r4, r7, lr}
   24256:	b089      	sub	sp, #36	; 0x24
   24258:	af02      	add	r7, sp, #8
   2425a:	60f8      	str	r0, [r7, #12]
   2425c:	60b9      	str	r1, [r7, #8]
   2425e:	1dbb      	adds	r3, r7, #6
   24260:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   24262:	2316      	movs	r3, #22
   24264:	18fb      	adds	r3, r7, r3
   24266:	220a      	movs	r2, #10
   24268:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   2426a:	2315      	movs	r3, #21
   2426c:	18fb      	adds	r3, r7, r3
   2426e:	22c7      	movs	r2, #199	; 0xc7
   24270:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   24272:	1dbb      	adds	r3, r7, #6
   24274:	881a      	ldrh	r2, [r3, #0]
   24276:	68f9      	ldr	r1, [r7, #12]
   24278:	2315      	movs	r3, #21
   2427a:	18fb      	adds	r3, r7, r3
   2427c:	7818      	ldrb	r0, [r3, #0]
   2427e:	2300      	movs	r3, #0
   24280:	9300      	str	r3, [sp, #0]
   24282:	0013      	movs	r3, r2
   24284:	2200      	movs	r2, #0
   24286:	4c4d      	ldr	r4, [pc, #308]	; (243bc <nm_spi_write+0x168>)
   24288:	47a0      	blx	r4
   2428a:	0002      	movs	r2, r0
   2428c:	2317      	movs	r3, #23
   2428e:	18fb      	adds	r3, r7, r3
   24290:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24292:	2317      	movs	r3, #23
   24294:	18fb      	adds	r3, r7, r3
   24296:	781b      	ldrb	r3, [r3, #0]
   24298:	b25b      	sxtb	r3, r3
   2429a:	2b01      	cmp	r3, #1
   2429c:	d010      	beq.n	242c0 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   2429e:	4a48      	ldr	r2, [pc, #288]	; (243c0 <nm_spi_write+0x16c>)
   242a0:	4948      	ldr	r1, [pc, #288]	; (243c4 <nm_spi_write+0x170>)
   242a2:	4b49      	ldr	r3, [pc, #292]	; (243c8 <nm_spi_write+0x174>)
   242a4:	0018      	movs	r0, r3
   242a6:	4b49      	ldr	r3, [pc, #292]	; (243cc <nm_spi_write+0x178>)
   242a8:	4798      	blx	r3
   242aa:	68fa      	ldr	r2, [r7, #12]
   242ac:	4b48      	ldr	r3, [pc, #288]	; (243d0 <nm_spi_write+0x17c>)
   242ae:	0011      	movs	r1, r2
   242b0:	0018      	movs	r0, r3
   242b2:	4b46      	ldr	r3, [pc, #280]	; (243cc <nm_spi_write+0x178>)
   242b4:	4798      	blx	r3
   242b6:	4b47      	ldr	r3, [pc, #284]	; (243d4 <nm_spi_write+0x180>)
   242b8:	0018      	movs	r0, r3
   242ba:	4b44      	ldr	r3, [pc, #272]	; (243cc <nm_spi_write+0x178>)
   242bc:	4798      	blx	r3
		goto _FAIL_;
   242be:	e03e      	b.n	2433e <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   242c0:	2317      	movs	r3, #23
   242c2:	18fc      	adds	r4, r7, r3
   242c4:	1dbb      	adds	r3, r7, #6
   242c6:	881a      	ldrh	r2, [r3, #0]
   242c8:	68bb      	ldr	r3, [r7, #8]
   242ca:	0011      	movs	r1, r2
   242cc:	0018      	movs	r0, r3
   242ce:	4b42      	ldr	r3, [pc, #264]	; (243d8 <nm_spi_write+0x184>)
   242d0:	4798      	blx	r3
   242d2:	0003      	movs	r3, r0
   242d4:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   242d6:	2317      	movs	r3, #23
   242d8:	18fb      	adds	r3, r7, r3
   242da:	781b      	ldrb	r3, [r3, #0]
   242dc:	b25b      	sxtb	r3, r3
   242de:	2b01      	cmp	r3, #1
   242e0:	d00e      	beq.n	24300 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   242e2:	4a3e      	ldr	r2, [pc, #248]	; (243dc <nm_spi_write+0x188>)
   242e4:	4937      	ldr	r1, [pc, #220]	; (243c4 <nm_spi_write+0x170>)
   242e6:	4b38      	ldr	r3, [pc, #224]	; (243c8 <nm_spi_write+0x174>)
   242e8:	0018      	movs	r0, r3
   242ea:	4b38      	ldr	r3, [pc, #224]	; (243cc <nm_spi_write+0x178>)
   242ec:	4798      	blx	r3
   242ee:	4b3c      	ldr	r3, [pc, #240]	; (243e0 <nm_spi_write+0x18c>)
   242f0:	0018      	movs	r0, r3
   242f2:	4b36      	ldr	r3, [pc, #216]	; (243cc <nm_spi_write+0x178>)
   242f4:	4798      	blx	r3
   242f6:	4b37      	ldr	r3, [pc, #220]	; (243d4 <nm_spi_write+0x180>)
   242f8:	0018      	movs	r0, r3
   242fa:	4b34      	ldr	r3, [pc, #208]	; (243cc <nm_spi_write+0x178>)
   242fc:	4798      	blx	r3
		goto _FAIL_;
   242fe:	e01e      	b.n	2433e <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   24300:	2317      	movs	r3, #23
   24302:	18fc      	adds	r4, r7, r3
   24304:	2315      	movs	r3, #21
   24306:	18fb      	adds	r3, r7, r3
   24308:	781b      	ldrb	r3, [r3, #0]
   2430a:	0018      	movs	r0, r3
   2430c:	4b35      	ldr	r3, [pc, #212]	; (243e4 <nm_spi_write+0x190>)
   2430e:	4798      	blx	r3
   24310:	0003      	movs	r3, r0
   24312:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   24314:	2317      	movs	r3, #23
   24316:	18fb      	adds	r3, r7, r3
   24318:	781b      	ldrb	r3, [r3, #0]
   2431a:	b25b      	sxtb	r3, r3
   2431c:	2b01      	cmp	r3, #1
   2431e:	d00e      	beq.n	2433e <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   24320:	4a31      	ldr	r2, [pc, #196]	; (243e8 <nm_spi_write+0x194>)
   24322:	4928      	ldr	r1, [pc, #160]	; (243c4 <nm_spi_write+0x170>)
   24324:	4b28      	ldr	r3, [pc, #160]	; (243c8 <nm_spi_write+0x174>)
   24326:	0018      	movs	r0, r3
   24328:	4b28      	ldr	r3, [pc, #160]	; (243cc <nm_spi_write+0x178>)
   2432a:	4798      	blx	r3
   2432c:	4b2c      	ldr	r3, [pc, #176]	; (243e0 <nm_spi_write+0x18c>)
   2432e:	0018      	movs	r0, r3
   24330:	4b26      	ldr	r3, [pc, #152]	; (243cc <nm_spi_write+0x178>)
   24332:	4798      	blx	r3
   24334:	4b27      	ldr	r3, [pc, #156]	; (243d4 <nm_spi_write+0x180>)
   24336:	0018      	movs	r0, r3
   24338:	4b24      	ldr	r3, [pc, #144]	; (243cc <nm_spi_write+0x178>)
   2433a:	4798      	blx	r3
		goto _FAIL_;
   2433c:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   2433e:	2317      	movs	r3, #23
   24340:	18fb      	adds	r3, r7, r3
   24342:	781b      	ldrb	r3, [r3, #0]
   24344:	b25b      	sxtb	r3, r3
   24346:	2b01      	cmp	r3, #1
   24348:	d030      	beq.n	243ac <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   2434a:	2001      	movs	r0, #1
   2434c:	4b27      	ldr	r3, [pc, #156]	; (243ec <nm_spi_write+0x198>)
   2434e:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24350:	2300      	movs	r3, #0
   24352:	9300      	str	r3, [sp, #0]
   24354:	2300      	movs	r3, #0
   24356:	2200      	movs	r2, #0
   24358:	2100      	movs	r1, #0
   2435a:	20cf      	movs	r0, #207	; 0xcf
   2435c:	4c24      	ldr	r4, [pc, #144]	; (243f0 <nm_spi_write+0x19c>)
   2435e:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24360:	20cf      	movs	r0, #207	; 0xcf
   24362:	4b24      	ldr	r3, [pc, #144]	; (243f4 <nm_spi_write+0x1a0>)
   24364:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   24366:	4a24      	ldr	r2, [pc, #144]	; (243f8 <nm_spi_write+0x1a4>)
   24368:	4916      	ldr	r1, [pc, #88]	; (243c4 <nm_spi_write+0x170>)
   2436a:	4b17      	ldr	r3, [pc, #92]	; (243c8 <nm_spi_write+0x174>)
   2436c:	0018      	movs	r0, r3
   2436e:	4b17      	ldr	r3, [pc, #92]	; (243cc <nm_spi_write+0x178>)
   24370:	4798      	blx	r3
   24372:	2316      	movs	r3, #22
   24374:	18fb      	adds	r3, r7, r3
   24376:	7819      	ldrb	r1, [r3, #0]
   24378:	1dbb      	adds	r3, r7, #6
   2437a:	881b      	ldrh	r3, [r3, #0]
   2437c:	68fa      	ldr	r2, [r7, #12]
   2437e:	481f      	ldr	r0, [pc, #124]	; (243fc <nm_spi_write+0x1a8>)
   24380:	4c12      	ldr	r4, [pc, #72]	; (243cc <nm_spi_write+0x178>)
   24382:	47a0      	blx	r4
   24384:	4b13      	ldr	r3, [pc, #76]	; (243d4 <nm_spi_write+0x180>)
   24386:	0018      	movs	r0, r3
   24388:	4b10      	ldr	r3, [pc, #64]	; (243cc <nm_spi_write+0x178>)
   2438a:	4798      	blx	r3
		nm_bsp_sleep(1);
   2438c:	2001      	movs	r0, #1
   2438e:	4b17      	ldr	r3, [pc, #92]	; (243ec <nm_spi_write+0x198>)
   24390:	4798      	blx	r3
		retry--;
   24392:	2316      	movs	r3, #22
   24394:	18fb      	adds	r3, r7, r3
   24396:	781a      	ldrb	r2, [r3, #0]
   24398:	2316      	movs	r3, #22
   2439a:	18fb      	adds	r3, r7, r3
   2439c:	3a01      	subs	r2, #1
   2439e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   243a0:	2316      	movs	r3, #22
   243a2:	18fb      	adds	r3, r7, r3
   243a4:	781b      	ldrb	r3, [r3, #0]
   243a6:	2b00      	cmp	r3, #0
   243a8:	d000      	beq.n	243ac <nm_spi_write+0x158>
   243aa:	e762      	b.n	24272 <nm_spi_write+0x1e>
	}


	return result;
   243ac:	2317      	movs	r3, #23
   243ae:	18fb      	adds	r3, r7, r3
   243b0:	781b      	ldrb	r3, [r3, #0]
   243b2:	b25b      	sxtb	r3, r3
}
   243b4:	0018      	movs	r0, r3
   243b6:	46bd      	mov	sp, r7
   243b8:	b007      	add	sp, #28
   243ba:	bd90      	pop	{r4, r7, pc}
   243bc:	0002363d 	.word	0x0002363d
   243c0:	000003cf 	.word	0x000003cf
   243c4:	0003901c 	.word	0x0003901c
   243c8:	000389d4 	.word	0x000389d4
   243cc:	0001db29 	.word	0x0001db29
   243d0:	00038d88 	.word	0x00038d88
   243d4:	00038a14 	.word	0x00038a14
   243d8:	00023f31 	.word	0x00023f31
   243dc:	000003d9 	.word	0x000003d9
   243e0:	00038db8 	.word	0x00038db8
   243e4:	00023401 	.word	0x00023401
   243e8:	000003e1 	.word	0x000003e1
   243ec:	0001ff7d 	.word	0x0001ff7d
   243f0:	000230c1 	.word	0x000230c1
   243f4:	00023501 	.word	0x00023501
   243f8:	000003eb 	.word	0x000003eb
   243fc:	00038de0 	.word	0x00038de0

00024400 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   24400:	b590      	push	{r4, r7, lr}
   24402:	b087      	sub	sp, #28
   24404:	af02      	add	r7, sp, #8
   24406:	6078      	str	r0, [r7, #4]
   24408:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   2440a:	230f      	movs	r3, #15
   2440c:	18fb      	adds	r3, r7, r3
   2440e:	220a      	movs	r2, #10
   24410:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   24412:	230c      	movs	r3, #12
   24414:	18fb      	adds	r3, r7, r3
   24416:	2201      	movs	r2, #1
   24418:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   2441a:	230e      	movs	r3, #14
   2441c:	18fb      	adds	r3, r7, r3
   2441e:	22ca      	movs	r2, #202	; 0xca
   24420:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   24422:	230d      	movs	r3, #13
   24424:	18fb      	adds	r3, r7, r3
   24426:	2200      	movs	r2, #0
   24428:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   2442a:	687b      	ldr	r3, [r7, #4]
   2442c:	2bff      	cmp	r3, #255	; 0xff
   2442e:	d808      	bhi.n	24442 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   24430:	230e      	movs	r3, #14
   24432:	18fb      	adds	r3, r7, r3
   24434:	22c4      	movs	r2, #196	; 0xc4
   24436:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   24438:	230d      	movs	r3, #13
   2443a:	18fb      	adds	r3, r7, r3
   2443c:	2201      	movs	r2, #1
   2443e:	701a      	strb	r2, [r3, #0]
   24440:	e007      	b.n	24452 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   24442:	230e      	movs	r3, #14
   24444:	18fb      	adds	r3, r7, r3
   24446:	22ca      	movs	r2, #202	; 0xca
   24448:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   2444a:	230d      	movs	r3, #13
   2444c:	18fb      	adds	r3, r7, r3
   2444e:	2200      	movs	r2, #0
   24450:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   24452:	2308      	movs	r3, #8
   24454:	18fa      	adds	r2, r7, r3
   24456:	6879      	ldr	r1, [r7, #4]
   24458:	230e      	movs	r3, #14
   2445a:	18fb      	adds	r3, r7, r3
   2445c:	7818      	ldrb	r0, [r3, #0]
   2445e:	230d      	movs	r3, #13
   24460:	18fb      	adds	r3, r7, r3
   24462:	781b      	ldrb	r3, [r3, #0]
   24464:	9300      	str	r3, [sp, #0]
   24466:	2304      	movs	r3, #4
   24468:	4c37      	ldr	r4, [pc, #220]	; (24548 <spi_read_reg+0x148>)
   2446a:	47a0      	blx	r4
   2446c:	0002      	movs	r2, r0
   2446e:	230c      	movs	r3, #12
   24470:	18fb      	adds	r3, r7, r3
   24472:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24474:	230c      	movs	r3, #12
   24476:	18fb      	adds	r3, r7, r3
   24478:	781b      	ldrb	r3, [r3, #0]
   2447a:	b25b      	sxtb	r3, r3
   2447c:	2b01      	cmp	r3, #1
   2447e:	d010      	beq.n	244a2 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   24480:	4a32      	ldr	r2, [pc, #200]	; (2454c <spi_read_reg+0x14c>)
   24482:	4933      	ldr	r1, [pc, #204]	; (24550 <spi_read_reg+0x150>)
   24484:	4b33      	ldr	r3, [pc, #204]	; (24554 <spi_read_reg+0x154>)
   24486:	0018      	movs	r0, r3
   24488:	4b33      	ldr	r3, [pc, #204]	; (24558 <spi_read_reg+0x158>)
   2448a:	4798      	blx	r3
   2448c:	687a      	ldr	r2, [r7, #4]
   2448e:	4b33      	ldr	r3, [pc, #204]	; (2455c <spi_read_reg+0x15c>)
   24490:	0011      	movs	r1, r2
   24492:	0018      	movs	r0, r3
   24494:	4b30      	ldr	r3, [pc, #192]	; (24558 <spi_read_reg+0x158>)
   24496:	4798      	blx	r3
   24498:	4b31      	ldr	r3, [pc, #196]	; (24560 <spi_read_reg+0x160>)
   2449a:	0018      	movs	r0, r3
   2449c:	4b2e      	ldr	r3, [pc, #184]	; (24558 <spi_read_reg+0x158>)
   2449e:	4798      	blx	r3
		goto _FAIL_;
   244a0:	e014      	b.n	244cc <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   244a2:	2308      	movs	r3, #8
   244a4:	18fb      	adds	r3, r7, r3
   244a6:	781b      	ldrb	r3, [r3, #0]
   244a8:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   244aa:	2308      	movs	r3, #8
   244ac:	18fb      	adds	r3, r7, r3
   244ae:	785b      	ldrb	r3, [r3, #1]
   244b0:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   244b2:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   244b4:	2308      	movs	r3, #8
   244b6:	18fb      	adds	r3, r7, r3
   244b8:	789b      	ldrb	r3, [r3, #2]
   244ba:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   244bc:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   244be:	2308      	movs	r3, #8
   244c0:	18fb      	adds	r3, r7, r3
   244c2:	78db      	ldrb	r3, [r3, #3]
   244c4:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   244c6:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   244c8:	683b      	ldr	r3, [r7, #0]
   244ca:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   244cc:	230c      	movs	r3, #12
   244ce:	18fb      	adds	r3, r7, r3
   244d0:	781b      	ldrb	r3, [r3, #0]
   244d2:	b25b      	sxtb	r3, r3
   244d4:	2b01      	cmp	r3, #1
   244d6:	d02f      	beq.n	24538 <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   244d8:	2001      	movs	r0, #1
   244da:	4b22      	ldr	r3, [pc, #136]	; (24564 <spi_read_reg+0x164>)
   244dc:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   244de:	2300      	movs	r3, #0
   244e0:	9300      	str	r3, [sp, #0]
   244e2:	2300      	movs	r3, #0
   244e4:	2200      	movs	r2, #0
   244e6:	2100      	movs	r1, #0
   244e8:	20cf      	movs	r0, #207	; 0xcf
   244ea:	4c1f      	ldr	r4, [pc, #124]	; (24568 <spi_read_reg+0x168>)
   244ec:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   244ee:	20cf      	movs	r0, #207	; 0xcf
   244f0:	4b1e      	ldr	r3, [pc, #120]	; (2456c <spi_read_reg+0x16c>)
   244f2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   244f4:	4a1e      	ldr	r2, [pc, #120]	; (24570 <spi_read_reg+0x170>)
   244f6:	4916      	ldr	r1, [pc, #88]	; (24550 <spi_read_reg+0x150>)
   244f8:	4b16      	ldr	r3, [pc, #88]	; (24554 <spi_read_reg+0x154>)
   244fa:	0018      	movs	r0, r3
   244fc:	4b16      	ldr	r3, [pc, #88]	; (24558 <spi_read_reg+0x158>)
   244fe:	4798      	blx	r3
   24500:	230f      	movs	r3, #15
   24502:	18fb      	adds	r3, r7, r3
   24504:	7819      	ldrb	r1, [r3, #0]
   24506:	687a      	ldr	r2, [r7, #4]
   24508:	4b1a      	ldr	r3, [pc, #104]	; (24574 <spi_read_reg+0x174>)
   2450a:	0018      	movs	r0, r3
   2450c:	4b12      	ldr	r3, [pc, #72]	; (24558 <spi_read_reg+0x158>)
   2450e:	4798      	blx	r3
   24510:	4b13      	ldr	r3, [pc, #76]	; (24560 <spi_read_reg+0x160>)
   24512:	0018      	movs	r0, r3
   24514:	4b10      	ldr	r3, [pc, #64]	; (24558 <spi_read_reg+0x158>)
   24516:	4798      	blx	r3
		nm_bsp_sleep(1);
   24518:	2001      	movs	r0, #1
   2451a:	4b12      	ldr	r3, [pc, #72]	; (24564 <spi_read_reg+0x164>)
   2451c:	4798      	blx	r3
		retry--;
   2451e:	230f      	movs	r3, #15
   24520:	18fb      	adds	r3, r7, r3
   24522:	781a      	ldrb	r2, [r3, #0]
   24524:	230f      	movs	r3, #15
   24526:	18fb      	adds	r3, r7, r3
   24528:	3a01      	subs	r2, #1
   2452a:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2452c:	230f      	movs	r3, #15
   2452e:	18fb      	adds	r3, r7, r3
   24530:	781b      	ldrb	r3, [r3, #0]
   24532:	2b00      	cmp	r3, #0
   24534:	d000      	beq.n	24538 <spi_read_reg+0x138>
   24536:	e778      	b.n	2442a <spi_read_reg+0x2a>
	}
		
	return result;
   24538:	230c      	movs	r3, #12
   2453a:	18fb      	adds	r3, r7, r3
   2453c:	781b      	ldrb	r3, [r3, #0]
   2453e:	b25b      	sxtb	r3, r3
}
   24540:	0018      	movs	r0, r3
   24542:	46bd      	mov	sp, r7
   24544:	b005      	add	sp, #20
   24546:	bd90      	pop	{r4, r7, pc}
   24548:	0002363d 	.word	0x0002363d
   2454c:	00000423 	.word	0x00000423
   24550:	0003902c 	.word	0x0003902c
   24554:	000389d4 	.word	0x000389d4
   24558:	0001db29 	.word	0x0001db29
   2455c:	00038dfc 	.word	0x00038dfc
   24560:	00038a14 	.word	0x00038a14
   24564:	0001ff7d 	.word	0x0001ff7d
   24568:	000230c1 	.word	0x000230c1
   2456c:	00023501 	.word	0x00023501
   24570:	00000435 	.word	0x00000435
   24574:	00038e28 	.word	0x00038e28

00024578 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   24578:	b590      	push	{r4, r7, lr}
   2457a:	b089      	sub	sp, #36	; 0x24
   2457c:	af02      	add	r7, sp, #8
   2457e:	60f8      	str	r0, [r7, #12]
   24580:	60b9      	str	r1, [r7, #8]
   24582:	1dbb      	adds	r3, r7, #6
   24584:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   24586:	2316      	movs	r3, #22
   24588:	18fb      	adds	r3, r7, r3
   2458a:	22c8      	movs	r2, #200	; 0xc8
   2458c:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   2458e:	2317      	movs	r3, #23
   24590:	18fb      	adds	r3, r7, r3
   24592:	220a      	movs	r2, #10
   24594:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   24596:	1dbb      	adds	r3, r7, #6
   24598:	881c      	ldrh	r4, [r3, #0]
   2459a:	68ba      	ldr	r2, [r7, #8]
   2459c:	68f9      	ldr	r1, [r7, #12]
   2459e:	2316      	movs	r3, #22
   245a0:	18fb      	adds	r3, r7, r3
   245a2:	7818      	ldrb	r0, [r3, #0]
   245a4:	2300      	movs	r3, #0
   245a6:	9300      	str	r3, [sp, #0]
   245a8:	0023      	movs	r3, r4
   245aa:	4c2e      	ldr	r4, [pc, #184]	; (24664 <nm_spi_read+0xec>)
   245ac:	47a0      	blx	r4
   245ae:	0002      	movs	r2, r0
   245b0:	2315      	movs	r3, #21
   245b2:	18fb      	adds	r3, r7, r3
   245b4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   245b6:	2315      	movs	r3, #21
   245b8:	18fb      	adds	r3, r7, r3
   245ba:	781b      	ldrb	r3, [r3, #0]
   245bc:	b25b      	sxtb	r3, r3
   245be:	2b01      	cmp	r3, #1
   245c0:	d010      	beq.n	245e4 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   245c2:	4a29      	ldr	r2, [pc, #164]	; (24668 <nm_spi_read+0xf0>)
   245c4:	4929      	ldr	r1, [pc, #164]	; (2466c <nm_spi_read+0xf4>)
   245c6:	4b2a      	ldr	r3, [pc, #168]	; (24670 <nm_spi_read+0xf8>)
   245c8:	0018      	movs	r0, r3
   245ca:	4b2a      	ldr	r3, [pc, #168]	; (24674 <nm_spi_read+0xfc>)
   245cc:	4798      	blx	r3
   245ce:	68fa      	ldr	r2, [r7, #12]
   245d0:	4b29      	ldr	r3, [pc, #164]	; (24678 <nm_spi_read+0x100>)
   245d2:	0011      	movs	r1, r2
   245d4:	0018      	movs	r0, r3
   245d6:	4b27      	ldr	r3, [pc, #156]	; (24674 <nm_spi_read+0xfc>)
   245d8:	4798      	blx	r3
   245da:	4b28      	ldr	r3, [pc, #160]	; (2467c <nm_spi_read+0x104>)
   245dc:	0018      	movs	r0, r3
   245de:	4b25      	ldr	r3, [pc, #148]	; (24674 <nm_spi_read+0xfc>)
   245e0:	4798      	blx	r3
		goto _FAIL_;
   245e2:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   245e4:	2315      	movs	r3, #21
   245e6:	18fb      	adds	r3, r7, r3
   245e8:	781b      	ldrb	r3, [r3, #0]
   245ea:	b25b      	sxtb	r3, r3
   245ec:	2b01      	cmp	r3, #1
   245ee:	d030      	beq.n	24652 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   245f0:	2001      	movs	r0, #1
   245f2:	4b23      	ldr	r3, [pc, #140]	; (24680 <nm_spi_read+0x108>)
   245f4:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   245f6:	2300      	movs	r3, #0
   245f8:	9300      	str	r3, [sp, #0]
   245fa:	2300      	movs	r3, #0
   245fc:	2200      	movs	r2, #0
   245fe:	2100      	movs	r1, #0
   24600:	20cf      	movs	r0, #207	; 0xcf
   24602:	4c20      	ldr	r4, [pc, #128]	; (24684 <nm_spi_read+0x10c>)
   24604:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24606:	20cf      	movs	r0, #207	; 0xcf
   24608:	4b1f      	ldr	r3, [pc, #124]	; (24688 <nm_spi_read+0x110>)
   2460a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   2460c:	4a1f      	ldr	r2, [pc, #124]	; (2468c <nm_spi_read+0x114>)
   2460e:	4917      	ldr	r1, [pc, #92]	; (2466c <nm_spi_read+0xf4>)
   24610:	4b17      	ldr	r3, [pc, #92]	; (24670 <nm_spi_read+0xf8>)
   24612:	0018      	movs	r0, r3
   24614:	4b17      	ldr	r3, [pc, #92]	; (24674 <nm_spi_read+0xfc>)
   24616:	4798      	blx	r3
   24618:	2317      	movs	r3, #23
   2461a:	18fb      	adds	r3, r7, r3
   2461c:	7819      	ldrb	r1, [r3, #0]
   2461e:	1dbb      	adds	r3, r7, #6
   24620:	881b      	ldrh	r3, [r3, #0]
   24622:	68fa      	ldr	r2, [r7, #12]
   24624:	481a      	ldr	r0, [pc, #104]	; (24690 <nm_spi_read+0x118>)
   24626:	4c13      	ldr	r4, [pc, #76]	; (24674 <nm_spi_read+0xfc>)
   24628:	47a0      	blx	r4
   2462a:	4b14      	ldr	r3, [pc, #80]	; (2467c <nm_spi_read+0x104>)
   2462c:	0018      	movs	r0, r3
   2462e:	4b11      	ldr	r3, [pc, #68]	; (24674 <nm_spi_read+0xfc>)
   24630:	4798      	blx	r3
		nm_bsp_sleep(1);
   24632:	2001      	movs	r0, #1
   24634:	4b12      	ldr	r3, [pc, #72]	; (24680 <nm_spi_read+0x108>)
   24636:	4798      	blx	r3
		retry--;
   24638:	2317      	movs	r3, #23
   2463a:	18fb      	adds	r3, r7, r3
   2463c:	781a      	ldrb	r2, [r3, #0]
   2463e:	2317      	movs	r3, #23
   24640:	18fb      	adds	r3, r7, r3
   24642:	3a01      	subs	r2, #1
   24644:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   24646:	2317      	movs	r3, #23
   24648:	18fb      	adds	r3, r7, r3
   2464a:	781b      	ldrb	r3, [r3, #0]
   2464c:	2b00      	cmp	r3, #0
   2464e:	d000      	beq.n	24652 <nm_spi_read+0xda>
   24650:	e7a1      	b.n	24596 <nm_spi_read+0x1e>
	}

	return result;
   24652:	2315      	movs	r3, #21
   24654:	18fb      	adds	r3, r7, r3
   24656:	781b      	ldrb	r3, [r3, #0]
   24658:	b25b      	sxtb	r3, r3
}
   2465a:	0018      	movs	r0, r3
   2465c:	46bd      	mov	sp, r7
   2465e:	b007      	add	sp, #28
   24660:	bd90      	pop	{r4, r7, pc}
   24662:	46c0      	nop			; (mov r8, r8)
   24664:	0002363d 	.word	0x0002363d
   24668:	00000472 	.word	0x00000472
   2466c:	0003903c 	.word	0x0003903c
   24670:	000389d4 	.word	0x000389d4
   24674:	0001db29 	.word	0x0001db29
   24678:	00038e40 	.word	0x00038e40
   2467c:	00038a14 	.word	0x00038a14
   24680:	0001ff7d 	.word	0x0001ff7d
   24684:	000230c1 	.word	0x000230c1
   24688:	00023501 	.word	0x00023501
   2468c:	0000047d 	.word	0x0000047d
   24690:	00038de0 	.word	0x00038de0

00024694 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   24694:	b580      	push	{r7, lr}
   24696:	b082      	sub	sp, #8
   24698:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   2469a:	4b0c      	ldr	r3, [pc, #48]	; (246cc <spi_init_pkt_sz+0x38>)
   2469c:	0018      	movs	r0, r3
   2469e:	4b0c      	ldr	r3, [pc, #48]	; (246d0 <spi_init_pkt_sz+0x3c>)
   246a0:	4798      	blx	r3
   246a2:	0003      	movs	r3, r0
   246a4:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   246a6:	687b      	ldr	r3, [r7, #4]
   246a8:	2270      	movs	r2, #112	; 0x70
   246aa:	4393      	bics	r3, r2
   246ac:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   246ae:	687b      	ldr	r3, [r7, #4]
   246b0:	2250      	movs	r2, #80	; 0x50
   246b2:	4313      	orrs	r3, r2
   246b4:	607b      	str	r3, [r7, #4]
   246b6:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   246b8:	687b      	ldr	r3, [r7, #4]
   246ba:	4a04      	ldr	r2, [pc, #16]	; (246cc <spi_init_pkt_sz+0x38>)
   246bc:	0019      	movs	r1, r3
   246be:	0010      	movs	r0, r2
   246c0:	4b04      	ldr	r3, [pc, #16]	; (246d4 <spi_init_pkt_sz+0x40>)
   246c2:	4798      	blx	r3
}
   246c4:	46c0      	nop			; (mov r8, r8)
   246c6:	46bd      	mov	sp, r7
   246c8:	b002      	add	sp, #8
   246ca:	bd80      	pop	{r7, pc}
   246cc:	0000e824 	.word	0x0000e824
   246d0:	0002486d 	.word	0x0002486d
   246d4:	000248e1 	.word	0x000248e1

000246d8 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   246d8:	b590      	push	{r4, r7, lr}
   246da:	b083      	sub	sp, #12
   246dc:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   246de:	2300      	movs	r3, #0
   246e0:	9300      	str	r3, [sp, #0]
   246e2:	2300      	movs	r3, #0
   246e4:	2200      	movs	r2, #0
   246e6:	2100      	movs	r1, #0
   246e8:	20cf      	movs	r0, #207	; 0xcf
   246ea:	4c05      	ldr	r4, [pc, #20]	; (24700 <nm_spi_reset+0x28>)
   246ec:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   246ee:	20cf      	movs	r0, #207	; 0xcf
   246f0:	4b04      	ldr	r3, [pc, #16]	; (24704 <nm_spi_reset+0x2c>)
   246f2:	4798      	blx	r3
	return M2M_SUCCESS;
   246f4:	2300      	movs	r3, #0
}
   246f6:	0018      	movs	r0, r3
   246f8:	46bd      	mov	sp, r7
   246fa:	b001      	add	sp, #4
   246fc:	bd90      	pop	{r4, r7, pc}
   246fe:	46c0      	nop			; (mov r8, r8)
   24700:	000230c1 	.word	0x000230c1
   24704:	00023501 	.word	0x00023501

00024708 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   24708:	b580      	push	{r7, lr}
   2470a:	b082      	sub	sp, #8
   2470c:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   2470e:	2300      	movs	r3, #0
   24710:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   24712:	4b40      	ldr	r3, [pc, #256]	; (24814 <nm_spi_init+0x10c>)
   24714:	2200      	movs	r2, #0
   24716:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   24718:	003b      	movs	r3, r7
   2471a:	4a3f      	ldr	r2, [pc, #252]	; (24818 <nm_spi_init+0x110>)
   2471c:	0019      	movs	r1, r3
   2471e:	0010      	movs	r0, r2
   24720:	4b3e      	ldr	r3, [pc, #248]	; (2481c <nm_spi_init+0x114>)
   24722:	4798      	blx	r3
   24724:	1e03      	subs	r3, r0, #0
   24726:	d129      	bne.n	2477c <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   24728:	4b3a      	ldr	r3, [pc, #232]	; (24814 <nm_spi_init+0x10c>)
   2472a:	2201      	movs	r2, #1
   2472c:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   2472e:	2398      	movs	r3, #152	; 0x98
   24730:	00da      	lsls	r2, r3, #3
   24732:	493b      	ldr	r1, [pc, #236]	; (24820 <nm_spi_init+0x118>)
   24734:	4b3b      	ldr	r3, [pc, #236]	; (24824 <nm_spi_init+0x11c>)
   24736:	0018      	movs	r0, r3
   24738:	4b3b      	ldr	r3, [pc, #236]	; (24828 <nm_spi_init+0x120>)
   2473a:	4798      	blx	r3
   2473c:	4b3b      	ldr	r3, [pc, #236]	; (2482c <nm_spi_init+0x124>)
   2473e:	0018      	movs	r0, r3
   24740:	4b39      	ldr	r3, [pc, #228]	; (24828 <nm_spi_init+0x120>)
   24742:	4798      	blx	r3
   24744:	4b3a      	ldr	r3, [pc, #232]	; (24830 <nm_spi_init+0x128>)
   24746:	0018      	movs	r0, r3
   24748:	4b37      	ldr	r3, [pc, #220]	; (24828 <nm_spi_init+0x120>)
   2474a:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   2474c:	003b      	movs	r3, r7
   2474e:	4a32      	ldr	r2, [pc, #200]	; (24818 <nm_spi_init+0x110>)
   24750:	0019      	movs	r1, r3
   24752:	0010      	movs	r0, r2
   24754:	4b31      	ldr	r3, [pc, #196]	; (2481c <nm_spi_init+0x114>)
   24756:	4798      	blx	r3
   24758:	1e03      	subs	r3, r0, #0
   2475a:	d10f      	bne.n	2477c <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   2475c:	4a35      	ldr	r2, [pc, #212]	; (24834 <nm_spi_init+0x12c>)
   2475e:	4930      	ldr	r1, [pc, #192]	; (24820 <nm_spi_init+0x118>)
   24760:	4b30      	ldr	r3, [pc, #192]	; (24824 <nm_spi_init+0x11c>)
   24762:	0018      	movs	r0, r3
   24764:	4b30      	ldr	r3, [pc, #192]	; (24828 <nm_spi_init+0x120>)
   24766:	4798      	blx	r3
   24768:	4b33      	ldr	r3, [pc, #204]	; (24838 <nm_spi_init+0x130>)
   2476a:	0018      	movs	r0, r3
   2476c:	4b2e      	ldr	r3, [pc, #184]	; (24828 <nm_spi_init+0x120>)
   2476e:	4798      	blx	r3
   24770:	4b2f      	ldr	r3, [pc, #188]	; (24830 <nm_spi_init+0x128>)
   24772:	0018      	movs	r0, r3
   24774:	4b2c      	ldr	r3, [pc, #176]	; (24828 <nm_spi_init+0x120>)
   24776:	4798      	blx	r3
			return 0;
   24778:	2300      	movs	r3, #0
   2477a:	e047      	b.n	2480c <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   2477c:	4b25      	ldr	r3, [pc, #148]	; (24814 <nm_spi_init+0x10c>)
   2477e:	781b      	ldrb	r3, [r3, #0]
   24780:	2b00      	cmp	r3, #0
   24782:	d126      	bne.n	247d2 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   24784:	683b      	ldr	r3, [r7, #0]
   24786:	220c      	movs	r2, #12
   24788:	4393      	bics	r3, r2
   2478a:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   2478c:	683b      	ldr	r3, [r7, #0]
   2478e:	2270      	movs	r2, #112	; 0x70
   24790:	4393      	bics	r3, r2
   24792:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   24794:	683b      	ldr	r3, [r7, #0]
   24796:	2250      	movs	r2, #80	; 0x50
   24798:	4313      	orrs	r3, r2
   2479a:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   2479c:	683b      	ldr	r3, [r7, #0]
   2479e:	4a1e      	ldr	r2, [pc, #120]	; (24818 <nm_spi_init+0x110>)
   247a0:	0019      	movs	r1, r3
   247a2:	0010      	movs	r0, r2
   247a4:	4b25      	ldr	r3, [pc, #148]	; (2483c <nm_spi_init+0x134>)
   247a6:	4798      	blx	r3
   247a8:	1e03      	subs	r3, r0, #0
   247aa:	d10f      	bne.n	247cc <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   247ac:	4a24      	ldr	r2, [pc, #144]	; (24840 <nm_spi_init+0x138>)
   247ae:	491c      	ldr	r1, [pc, #112]	; (24820 <nm_spi_init+0x118>)
   247b0:	4b1c      	ldr	r3, [pc, #112]	; (24824 <nm_spi_init+0x11c>)
   247b2:	0018      	movs	r0, r3
   247b4:	4b1c      	ldr	r3, [pc, #112]	; (24828 <nm_spi_init+0x120>)
   247b6:	4798      	blx	r3
   247b8:	4b22      	ldr	r3, [pc, #136]	; (24844 <nm_spi_init+0x13c>)
   247ba:	0018      	movs	r0, r3
   247bc:	4b1a      	ldr	r3, [pc, #104]	; (24828 <nm_spi_init+0x120>)
   247be:	4798      	blx	r3
   247c0:	4b1b      	ldr	r3, [pc, #108]	; (24830 <nm_spi_init+0x128>)
   247c2:	0018      	movs	r0, r3
   247c4:	4b18      	ldr	r3, [pc, #96]	; (24828 <nm_spi_init+0x120>)
   247c6:	4798      	blx	r3
			return 0;
   247c8:	2300      	movs	r3, #0
   247ca:	e01f      	b.n	2480c <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   247cc:	4b11      	ldr	r3, [pc, #68]	; (24814 <nm_spi_init+0x10c>)
   247ce:	2201      	movs	r2, #1
   247d0:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   247d2:	1d3a      	adds	r2, r7, #4
   247d4:	2380      	movs	r3, #128	; 0x80
   247d6:	015b      	lsls	r3, r3, #5
   247d8:	0011      	movs	r1, r2
   247da:	0018      	movs	r0, r3
   247dc:	4b0f      	ldr	r3, [pc, #60]	; (2481c <nm_spi_init+0x114>)
   247de:	4798      	blx	r3
   247e0:	1e03      	subs	r3, r0, #0
   247e2:	d110      	bne.n	24806 <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   247e4:	4a18      	ldr	r2, [pc, #96]	; (24848 <nm_spi_init+0x140>)
   247e6:	490e      	ldr	r1, [pc, #56]	; (24820 <nm_spi_init+0x118>)
   247e8:	4b0e      	ldr	r3, [pc, #56]	; (24824 <nm_spi_init+0x11c>)
   247ea:	0018      	movs	r0, r3
   247ec:	4b0e      	ldr	r3, [pc, #56]	; (24828 <nm_spi_init+0x120>)
   247ee:	4798      	blx	r3
   247f0:	4b16      	ldr	r3, [pc, #88]	; (2484c <nm_spi_init+0x144>)
   247f2:	0018      	movs	r0, r3
   247f4:	4b0c      	ldr	r3, [pc, #48]	; (24828 <nm_spi_init+0x120>)
   247f6:	4798      	blx	r3
   247f8:	4b0d      	ldr	r3, [pc, #52]	; (24830 <nm_spi_init+0x128>)
   247fa:	0018      	movs	r0, r3
   247fc:	4b0a      	ldr	r3, [pc, #40]	; (24828 <nm_spi_init+0x120>)
   247fe:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   24800:	2306      	movs	r3, #6
   24802:	425b      	negs	r3, r3
   24804:	e002      	b.n	2480c <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   24806:	4b12      	ldr	r3, [pc, #72]	; (24850 <nm_spi_init+0x148>)
   24808:	4798      	blx	r3


	return M2M_SUCCESS;
   2480a:	2300      	movs	r3, #0
}
   2480c:	0018      	movs	r0, r3
   2480e:	46bd      	mov	sp, r7
   24810:	b002      	add	sp, #8
   24812:	bd80      	pop	{r7, pc}
   24814:	20004130 	.word	0x20004130
   24818:	0000e824 	.word	0x0000e824
   2481c:	00024401 	.word	0x00024401
   24820:	00039048 	.word	0x00039048
   24824:	000389d4 	.word	0x000389d4
   24828:	0001db29 	.word	0x0001db29
   2482c:	00038e70 	.word	0x00038e70
   24830:	00038a14 	.word	0x00038a14
   24834:	000004c3 	.word	0x000004c3
   24838:	00038ec0 	.word	0x00038ec0
   2483c:	00024109 	.word	0x00024109
   24840:	000004cd 	.word	0x000004cd
   24844:	00038ef0 	.word	0x00038ef0
   24848:	000004d7 	.word	0x000004d7
   2484c:	00038f24 	.word	0x00038f24
   24850:	00024695 	.word	0x00024695

00024854 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   24854:	b580      	push	{r7, lr}
   24856:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   24858:	4b03      	ldr	r3, [pc, #12]	; (24868 <nm_spi_deinit+0x14>)
   2485a:	2200      	movs	r2, #0
   2485c:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   2485e:	2300      	movs	r3, #0
}
   24860:	0018      	movs	r0, r3
   24862:	46bd      	mov	sp, r7
   24864:	bd80      	pop	{r7, pc}
   24866:	46c0      	nop			; (mov r8, r8)
   24868:	20004130 	.word	0x20004130

0002486c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   2486c:	b580      	push	{r7, lr}
   2486e:	b084      	sub	sp, #16
   24870:	af00      	add	r7, sp, #0
   24872:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   24874:	230c      	movs	r3, #12
   24876:	18fa      	adds	r2, r7, r3
   24878:	687b      	ldr	r3, [r7, #4]
   2487a:	0011      	movs	r1, r2
   2487c:	0018      	movs	r0, r3
   2487e:	4b03      	ldr	r3, [pc, #12]	; (2488c <nm_spi_read_reg+0x20>)
   24880:	4798      	blx	r3

	return u32Val;
   24882:	68fb      	ldr	r3, [r7, #12]
}
   24884:	0018      	movs	r0, r3
   24886:	46bd      	mov	sp, r7
   24888:	b004      	add	sp, #16
   2488a:	bd80      	pop	{r7, pc}
   2488c:	00024401 	.word	0x00024401

00024890 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   24890:	b590      	push	{r4, r7, lr}
   24892:	b085      	sub	sp, #20
   24894:	af00      	add	r7, sp, #0
   24896:	6078      	str	r0, [r7, #4]
   24898:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   2489a:	230f      	movs	r3, #15
   2489c:	18fc      	adds	r4, r7, r3
   2489e:	683a      	ldr	r2, [r7, #0]
   248a0:	687b      	ldr	r3, [r7, #4]
   248a2:	0011      	movs	r1, r2
   248a4:	0018      	movs	r0, r3
   248a6:	4b0d      	ldr	r3, [pc, #52]	; (248dc <nm_spi_read_reg_with_ret+0x4c>)
   248a8:	4798      	blx	r3
   248aa:	0003      	movs	r3, r0
   248ac:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   248ae:	230f      	movs	r3, #15
   248b0:	18fb      	adds	r3, r7, r3
   248b2:	781b      	ldrb	r3, [r3, #0]
   248b4:	b25b      	sxtb	r3, r3
   248b6:	2b01      	cmp	r3, #1
   248b8:	d104      	bne.n	248c4 <nm_spi_read_reg_with_ret+0x34>
   248ba:	230f      	movs	r3, #15
   248bc:	18fb      	adds	r3, r7, r3
   248be:	2200      	movs	r2, #0
   248c0:	701a      	strb	r2, [r3, #0]
   248c2:	e003      	b.n	248cc <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   248c4:	230f      	movs	r3, #15
   248c6:	18fb      	adds	r3, r7, r3
   248c8:	22fa      	movs	r2, #250	; 0xfa
   248ca:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   248cc:	230f      	movs	r3, #15
   248ce:	18fb      	adds	r3, r7, r3
   248d0:	781b      	ldrb	r3, [r3, #0]
   248d2:	b25b      	sxtb	r3, r3
}
   248d4:	0018      	movs	r0, r3
   248d6:	46bd      	mov	sp, r7
   248d8:	b005      	add	sp, #20
   248da:	bd90      	pop	{r4, r7, pc}
   248dc:	00024401 	.word	0x00024401

000248e0 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   248e0:	b590      	push	{r4, r7, lr}
   248e2:	b085      	sub	sp, #20
   248e4:	af00      	add	r7, sp, #0
   248e6:	6078      	str	r0, [r7, #4]
   248e8:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   248ea:	230f      	movs	r3, #15
   248ec:	18fc      	adds	r4, r7, r3
   248ee:	683a      	ldr	r2, [r7, #0]
   248f0:	687b      	ldr	r3, [r7, #4]
   248f2:	0011      	movs	r1, r2
   248f4:	0018      	movs	r0, r3
   248f6:	4b0d      	ldr	r3, [pc, #52]	; (2492c <nm_spi_write_reg+0x4c>)
   248f8:	4798      	blx	r3
   248fa:	0003      	movs	r3, r0
   248fc:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   248fe:	230f      	movs	r3, #15
   24900:	18fb      	adds	r3, r7, r3
   24902:	781b      	ldrb	r3, [r3, #0]
   24904:	b25b      	sxtb	r3, r3
   24906:	2b01      	cmp	r3, #1
   24908:	d104      	bne.n	24914 <nm_spi_write_reg+0x34>
   2490a:	230f      	movs	r3, #15
   2490c:	18fb      	adds	r3, r7, r3
   2490e:	2200      	movs	r2, #0
   24910:	701a      	strb	r2, [r3, #0]
   24912:	e003      	b.n	2491c <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24914:	230f      	movs	r3, #15
   24916:	18fb      	adds	r3, r7, r3
   24918:	22fa      	movs	r2, #250	; 0xfa
   2491a:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   2491c:	230f      	movs	r3, #15
   2491e:	18fb      	adds	r3, r7, r3
   24920:	781b      	ldrb	r3, [r3, #0]
   24922:	b25b      	sxtb	r3, r3
}
   24924:	0018      	movs	r0, r3
   24926:	46bd      	mov	sp, r7
   24928:	b005      	add	sp, #20
   2492a:	bd90      	pop	{r4, r7, pc}
   2492c:	00024109 	.word	0x00024109

00024930 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   24930:	b590      	push	{r4, r7, lr}
   24932:	b087      	sub	sp, #28
   24934:	af00      	add	r7, sp, #0
   24936:	60f8      	str	r0, [r7, #12]
   24938:	60b9      	str	r1, [r7, #8]
   2493a:	1dbb      	adds	r3, r7, #6
   2493c:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   2493e:	2317      	movs	r3, #23
   24940:	18fc      	adds	r4, r7, r3
   24942:	1dbb      	adds	r3, r7, #6
   24944:	881a      	ldrh	r2, [r3, #0]
   24946:	68b9      	ldr	r1, [r7, #8]
   24948:	68fb      	ldr	r3, [r7, #12]
   2494a:	0018      	movs	r0, r3
   2494c:	4b0d      	ldr	r3, [pc, #52]	; (24984 <nm_spi_read_block+0x54>)
   2494e:	4798      	blx	r3
   24950:	0003      	movs	r3, r0
   24952:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24954:	2317      	movs	r3, #23
   24956:	18fb      	adds	r3, r7, r3
   24958:	781b      	ldrb	r3, [r3, #0]
   2495a:	b25b      	sxtb	r3, r3
   2495c:	2b01      	cmp	r3, #1
   2495e:	d104      	bne.n	2496a <nm_spi_read_block+0x3a>
   24960:	2317      	movs	r3, #23
   24962:	18fb      	adds	r3, r7, r3
   24964:	2200      	movs	r2, #0
   24966:	701a      	strb	r2, [r3, #0]
   24968:	e003      	b.n	24972 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2496a:	2317      	movs	r3, #23
   2496c:	18fb      	adds	r3, r7, r3
   2496e:	22fa      	movs	r2, #250	; 0xfa
   24970:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24972:	2317      	movs	r3, #23
   24974:	18fb      	adds	r3, r7, r3
   24976:	781b      	ldrb	r3, [r3, #0]
   24978:	b25b      	sxtb	r3, r3
}
   2497a:	0018      	movs	r0, r3
   2497c:	46bd      	mov	sp, r7
   2497e:	b007      	add	sp, #28
   24980:	bd90      	pop	{r4, r7, pc}
   24982:	46c0      	nop			; (mov r8, r8)
   24984:	00024579 	.word	0x00024579

00024988 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   24988:	b590      	push	{r4, r7, lr}
   2498a:	b087      	sub	sp, #28
   2498c:	af00      	add	r7, sp, #0
   2498e:	60f8      	str	r0, [r7, #12]
   24990:	60b9      	str	r1, [r7, #8]
   24992:	1dbb      	adds	r3, r7, #6
   24994:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   24996:	2317      	movs	r3, #23
   24998:	18fc      	adds	r4, r7, r3
   2499a:	1dbb      	adds	r3, r7, #6
   2499c:	881a      	ldrh	r2, [r3, #0]
   2499e:	68b9      	ldr	r1, [r7, #8]
   249a0:	68fb      	ldr	r3, [r7, #12]
   249a2:	0018      	movs	r0, r3
   249a4:	4b0d      	ldr	r3, [pc, #52]	; (249dc <nm_spi_write_block+0x54>)
   249a6:	4798      	blx	r3
   249a8:	0003      	movs	r3, r0
   249aa:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   249ac:	2317      	movs	r3, #23
   249ae:	18fb      	adds	r3, r7, r3
   249b0:	781b      	ldrb	r3, [r3, #0]
   249b2:	b25b      	sxtb	r3, r3
   249b4:	2b01      	cmp	r3, #1
   249b6:	d104      	bne.n	249c2 <nm_spi_write_block+0x3a>
   249b8:	2317      	movs	r3, #23
   249ba:	18fb      	adds	r3, r7, r3
   249bc:	2200      	movs	r2, #0
   249be:	701a      	strb	r2, [r3, #0]
   249c0:	e003      	b.n	249ca <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   249c2:	2317      	movs	r3, #23
   249c4:	18fb      	adds	r3, r7, r3
   249c6:	22fa      	movs	r2, #250	; 0xfa
   249c8:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   249ca:	2317      	movs	r3, #23
   249cc:	18fb      	adds	r3, r7, r3
   249ce:	781b      	ldrb	r3, [r3, #0]
   249d0:	b25b      	sxtb	r3, r3
}
   249d2:	0018      	movs	r0, r3
   249d4:	46bd      	mov	sp, r7
   249d6:	b007      	add	sp, #28
   249d8:	bd90      	pop	{r4, r7, pc}
   249da:	46c0      	nop			; (mov r8, r8)
   249dc:	00024255 	.word	0x00024255

000249e0 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   249e0:	b590      	push	{r4, r7, lr}
   249e2:	b089      	sub	sp, #36	; 0x24
   249e4:	af00      	add	r7, sp, #0
   249e6:	60b9      	str	r1, [r7, #8]
   249e8:	0011      	movs	r1, r2
   249ea:	607b      	str	r3, [r7, #4]
   249ec:	230f      	movs	r3, #15
   249ee:	18fb      	adds	r3, r7, r3
   249f0:	1c02      	adds	r2, r0, #0
   249f2:	701a      	strb	r2, [r3, #0]
   249f4:	230e      	movs	r3, #14
   249f6:	18fb      	adds	r3, r7, r3
   249f8:	1c0a      	adds	r2, r1, #0
   249fa:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   249fc:	2330      	movs	r3, #48	; 0x30
   249fe:	18fb      	adds	r3, r7, r3
   24a00:	881b      	ldrh	r3, [r3, #0]
   24a02:	2b00      	cmp	r3, #0
   24a04:	d100      	bne.n	24a08 <Socket_ReadSocketData+0x28>
   24a06:	e0d7      	b.n	24bb8 <Socket_ReadSocketData+0x1d8>
   24a08:	230f      	movs	r3, #15
   24a0a:	18fb      	adds	r3, r7, r3
   24a0c:	2200      	movs	r2, #0
   24a0e:	569a      	ldrsb	r2, [r3, r2]
   24a10:	4b6b      	ldr	r3, [pc, #428]	; (24bc0 <Socket_ReadSocketData+0x1e0>)
   24a12:	0112      	lsls	r2, r2, #4
   24a14:	58d3      	ldr	r3, [r2, r3]
   24a16:	2b00      	cmp	r3, #0
   24a18:	d100      	bne.n	24a1c <Socket_ReadSocketData+0x3c>
   24a1a:	e0cd      	b.n	24bb8 <Socket_ReadSocketData+0x1d8>
   24a1c:	230f      	movs	r3, #15
   24a1e:	18fb      	adds	r3, r7, r3
   24a20:	781b      	ldrb	r3, [r3, #0]
   24a22:	b25b      	sxtb	r3, r3
   24a24:	4a66      	ldr	r2, [pc, #408]	; (24bc0 <Socket_ReadSocketData+0x1e0>)
   24a26:	011b      	lsls	r3, r3, #4
   24a28:	18d3      	adds	r3, r2, r3
   24a2a:	3304      	adds	r3, #4
   24a2c:	881b      	ldrh	r3, [r3, #0]
   24a2e:	b29b      	uxth	r3, r3
   24a30:	2b00      	cmp	r3, #0
   24a32:	d100      	bne.n	24a36 <Socket_ReadSocketData+0x56>
   24a34:	e0c0      	b.n	24bb8 <Socket_ReadSocketData+0x1d8>
   24a36:	230f      	movs	r3, #15
   24a38:	18fb      	adds	r3, r7, r3
   24a3a:	781b      	ldrb	r3, [r3, #0]
   24a3c:	b25b      	sxtb	r3, r3
   24a3e:	4a60      	ldr	r2, [pc, #384]	; (24bc0 <Socket_ReadSocketData+0x1e0>)
   24a40:	011b      	lsls	r3, r3, #4
   24a42:	18d3      	adds	r3, r2, r3
   24a44:	330a      	adds	r3, #10
   24a46:	781b      	ldrb	r3, [r3, #0]
   24a48:	b2db      	uxtb	r3, r3
   24a4a:	2b01      	cmp	r3, #1
   24a4c:	d000      	beq.n	24a50 <Socket_ReadSocketData+0x70>
   24a4e:	e0b3      	b.n	24bb8 <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   24a50:	687b      	ldr	r3, [r7, #4]
   24a52:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   24a54:	68bb      	ldr	r3, [r7, #8]
   24a56:	2230      	movs	r2, #48	; 0x30
   24a58:	18ba      	adds	r2, r7, r2
   24a5a:	8812      	ldrh	r2, [r2, #0]
   24a5c:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   24a5e:	2319      	movs	r3, #25
   24a60:	18fb      	adds	r3, r7, r3
   24a62:	2201      	movs	r2, #1
   24a64:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   24a66:	231a      	movs	r3, #26
   24a68:	18fb      	adds	r3, r7, r3
   24a6a:	2230      	movs	r2, #48	; 0x30
   24a6c:	18ba      	adds	r2, r7, r2
   24a6e:	8812      	ldrh	r2, [r2, #0]
   24a70:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   24a72:	230f      	movs	r3, #15
   24a74:	18fb      	adds	r3, r7, r3
   24a76:	781b      	ldrb	r3, [r3, #0]
   24a78:	b25b      	sxtb	r3, r3
   24a7a:	4a51      	ldr	r2, [pc, #324]	; (24bc0 <Socket_ReadSocketData+0x1e0>)
   24a7c:	011b      	lsls	r3, r3, #4
   24a7e:	18d3      	adds	r3, r2, r3
   24a80:	3304      	adds	r3, #4
   24a82:	881b      	ldrh	r3, [r3, #0]
   24a84:	b29b      	uxth	r3, r3
   24a86:	221a      	movs	r2, #26
   24a88:	18ba      	adds	r2, r7, r2
   24a8a:	8812      	ldrh	r2, [r2, #0]
   24a8c:	1ad3      	subs	r3, r2, r3
   24a8e:	b29a      	uxth	r2, r3
   24a90:	2316      	movs	r3, #22
   24a92:	18fb      	adds	r3, r7, r3
   24a94:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   24a96:	2316      	movs	r3, #22
   24a98:	18fb      	adds	r3, r7, r3
   24a9a:	2200      	movs	r2, #0
   24a9c:	5e9b      	ldrsh	r3, [r3, r2]
   24a9e:	2b00      	cmp	r3, #0
   24aa0:	dd0f      	ble.n	24ac2 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   24aa2:	2319      	movs	r3, #25
   24aa4:	18fb      	adds	r3, r7, r3
   24aa6:	2200      	movs	r2, #0
   24aa8:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   24aaa:	230f      	movs	r3, #15
   24aac:	18fb      	adds	r3, r7, r3
   24aae:	2200      	movs	r2, #0
   24ab0:	569a      	ldrsb	r2, [r3, r2]
   24ab2:	231a      	movs	r3, #26
   24ab4:	18fb      	adds	r3, r7, r3
   24ab6:	4942      	ldr	r1, [pc, #264]	; (24bc0 <Socket_ReadSocketData+0x1e0>)
   24ab8:	0112      	lsls	r2, r2, #4
   24aba:	188a      	adds	r2, r1, r2
   24abc:	3204      	adds	r2, #4
   24abe:	8812      	ldrh	r2, [r2, #0]
   24ac0:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   24ac2:	230f      	movs	r3, #15
   24ac4:	18fb      	adds	r3, r7, r3
   24ac6:	2200      	movs	r2, #0
   24ac8:	569a      	ldrsb	r2, [r3, r2]
   24aca:	4b3d      	ldr	r3, [pc, #244]	; (24bc0 <Socket_ReadSocketData+0x1e0>)
   24acc:	0112      	lsls	r2, r2, #4
   24ace:	58d1      	ldr	r1, [r2, r3]
   24ad0:	2319      	movs	r3, #25
   24ad2:	18fb      	adds	r3, r7, r3
   24ad4:	781c      	ldrb	r4, [r3, #0]
   24ad6:	231a      	movs	r3, #26
   24ad8:	18fb      	adds	r3, r7, r3
   24ada:	881a      	ldrh	r2, [r3, #0]
   24adc:	69f8      	ldr	r0, [r7, #28]
   24ade:	0023      	movs	r3, r4
   24ae0:	4c38      	ldr	r4, [pc, #224]	; (24bc4 <Socket_ReadSocketData+0x1e4>)
   24ae2:	47a0      	blx	r4
   24ae4:	1e03      	subs	r3, r0, #0
   24ae6:	d14f      	bne.n	24b88 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   24ae8:	230f      	movs	r3, #15
   24aea:	18fb      	adds	r3, r7, r3
   24aec:	2200      	movs	r2, #0
   24aee:	569a      	ldrsb	r2, [r3, r2]
   24af0:	4b33      	ldr	r3, [pc, #204]	; (24bc0 <Socket_ReadSocketData+0x1e0>)
   24af2:	0112      	lsls	r2, r2, #4
   24af4:	58d2      	ldr	r2, [r2, r3]
   24af6:	68bb      	ldr	r3, [r7, #8]
   24af8:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   24afa:	231a      	movs	r3, #26
   24afc:	18fb      	adds	r3, r7, r3
   24afe:	2200      	movs	r2, #0
   24b00:	5e9a      	ldrsh	r2, [r3, r2]
   24b02:	68bb      	ldr	r3, [r7, #8]
   24b04:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   24b06:	68bb      	ldr	r3, [r7, #8]
   24b08:	88da      	ldrh	r2, [r3, #6]
   24b0a:	231a      	movs	r3, #26
   24b0c:	18fb      	adds	r3, r7, r3
   24b0e:	881b      	ldrh	r3, [r3, #0]
   24b10:	1ad3      	subs	r3, r2, r3
   24b12:	b29a      	uxth	r2, r3
   24b14:	68bb      	ldr	r3, [r7, #8]
   24b16:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   24b18:	4b2b      	ldr	r3, [pc, #172]	; (24bc8 <Socket_ReadSocketData+0x1e8>)
   24b1a:	681b      	ldr	r3, [r3, #0]
   24b1c:	2b00      	cmp	r3, #0
   24b1e:	d00b      	beq.n	24b38 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   24b20:	4b29      	ldr	r3, [pc, #164]	; (24bc8 <Socket_ReadSocketData+0x1e8>)
   24b22:	681b      	ldr	r3, [r3, #0]
   24b24:	68bc      	ldr	r4, [r7, #8]
   24b26:	220e      	movs	r2, #14
   24b28:	18ba      	adds	r2, r7, r2
   24b2a:	7811      	ldrb	r1, [r2, #0]
   24b2c:	220f      	movs	r2, #15
   24b2e:	18ba      	adds	r2, r7, r2
   24b30:	2000      	movs	r0, #0
   24b32:	5610      	ldrsb	r0, [r2, r0]
   24b34:	0022      	movs	r2, r4
   24b36:	4798      	blx	r3

				u16ReadCount -= u16Read;
   24b38:	2330      	movs	r3, #48	; 0x30
   24b3a:	18f9      	adds	r1, r7, r3
   24b3c:	2330      	movs	r3, #48	; 0x30
   24b3e:	18fa      	adds	r2, r7, r3
   24b40:	231a      	movs	r3, #26
   24b42:	18fb      	adds	r3, r7, r3
   24b44:	8812      	ldrh	r2, [r2, #0]
   24b46:	881b      	ldrh	r3, [r3, #0]
   24b48:	1ad3      	subs	r3, r2, r3
   24b4a:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   24b4c:	231a      	movs	r3, #26
   24b4e:	18fb      	adds	r3, r7, r3
   24b50:	881b      	ldrh	r3, [r3, #0]
   24b52:	69fa      	ldr	r2, [r7, #28]
   24b54:	18d3      	adds	r3, r2, r3
   24b56:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   24b58:	230f      	movs	r3, #15
   24b5a:	18fb      	adds	r3, r7, r3
   24b5c:	781b      	ldrb	r3, [r3, #0]
   24b5e:	b25b      	sxtb	r3, r3
   24b60:	4a17      	ldr	r2, [pc, #92]	; (24bc0 <Socket_ReadSocketData+0x1e0>)
   24b62:	011b      	lsls	r3, r3, #4
   24b64:	18d3      	adds	r3, r2, r3
   24b66:	330a      	adds	r3, #10
   24b68:	781b      	ldrb	r3, [r3, #0]
   24b6a:	b2db      	uxtb	r3, r3
   24b6c:	2b00      	cmp	r3, #0
   24b6e:	d11c      	bne.n	24baa <Socket_ReadSocketData+0x1ca>
   24b70:	2330      	movs	r3, #48	; 0x30
   24b72:	18fb      	adds	r3, r7, r3
   24b74:	881b      	ldrh	r3, [r3, #0]
   24b76:	2b00      	cmp	r3, #0
   24b78:	d017      	beq.n	24baa <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   24b7a:	2301      	movs	r3, #1
   24b7c:	2200      	movs	r2, #0
   24b7e:	2100      	movs	r1, #0
   24b80:	2000      	movs	r0, #0
   24b82:	4c10      	ldr	r4, [pc, #64]	; (24bc4 <Socket_ReadSocketData+0x1e4>)
   24b84:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   24b86:	e017      	b.n	24bb8 <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   24b88:	4b10      	ldr	r3, [pc, #64]	; (24bcc <Socket_ReadSocketData+0x1ec>)
   24b8a:	0018      	movs	r0, r3
   24b8c:	4b10      	ldr	r3, [pc, #64]	; (24bd0 <Socket_ReadSocketData+0x1f0>)
   24b8e:	4798      	blx	r3
   24b90:	2330      	movs	r3, #48	; 0x30
   24b92:	18fb      	adds	r3, r7, r3
   24b94:	881a      	ldrh	r2, [r3, #0]
   24b96:	4b0f      	ldr	r3, [pc, #60]	; (24bd4 <Socket_ReadSocketData+0x1f4>)
   24b98:	0011      	movs	r1, r2
   24b9a:	0018      	movs	r0, r3
   24b9c:	4b0c      	ldr	r3, [pc, #48]	; (24bd0 <Socket_ReadSocketData+0x1f0>)
   24b9e:	4798      	blx	r3
   24ba0:	4b0d      	ldr	r3, [pc, #52]	; (24bd8 <Socket_ReadSocketData+0x1f8>)
   24ba2:	0018      	movs	r0, r3
   24ba4:	4b0a      	ldr	r3, [pc, #40]	; (24bd0 <Socket_ReadSocketData+0x1f0>)
   24ba6:	4798      	blx	r3
				break;
   24ba8:	e006      	b.n	24bb8 <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   24baa:	2330      	movs	r3, #48	; 0x30
   24bac:	18fb      	adds	r3, r7, r3
   24bae:	881b      	ldrh	r3, [r3, #0]
   24bb0:	2b00      	cmp	r3, #0
   24bb2:	d000      	beq.n	24bb6 <Socket_ReadSocketData+0x1d6>
   24bb4:	e753      	b.n	24a5e <Socket_ReadSocketData+0x7e>
	}
}
   24bb6:	e7ff      	b.n	24bb8 <Socket_ReadSocketData+0x1d8>
   24bb8:	46c0      	nop			; (mov r8, r8)
   24bba:	46bd      	mov	sp, r7
   24bbc:	b009      	add	sp, #36	; 0x24
   24bbe:	bd90      	pop	{r4, r7, pc}
   24bc0:	20005934 	.word	0x20005934
   24bc4:	000213d9 	.word	0x000213d9
   24bc8:	200059e4 	.word	0x200059e4
   24bcc:	00039054 	.word	0x00039054
   24bd0:	0001db29 	.word	0x0001db29
   24bd4:	00039060 	.word	0x00039060
   24bd8:	00039074 	.word	0x00039074

00024bdc <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   24bdc:	b590      	push	{r4, r7, lr}
   24bde:	b0bb      	sub	sp, #236	; 0xec
   24be0:	af02      	add	r7, sp, #8
   24be2:	603a      	str	r2, [r7, #0]
   24be4:	1dfb      	adds	r3, r7, #7
   24be6:	1c02      	adds	r2, r0, #0
   24be8:	701a      	strb	r2, [r3, #0]
   24bea:	1d3b      	adds	r3, r7, #4
   24bec:	1c0a      	adds	r2, r1, #0
   24bee:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   24bf0:	1dfb      	adds	r3, r7, #7
   24bf2:	781b      	ldrb	r3, [r3, #0]
   24bf4:	2b41      	cmp	r3, #65	; 0x41
   24bf6:	d003      	beq.n	24c00 <m2m_ip_cb+0x24>
   24bf8:	1dfb      	adds	r3, r7, #7
   24bfa:	781b      	ldrb	r3, [r3, #0]
   24bfc:	2b54      	cmp	r3, #84	; 0x54
   24bfe:	d120      	bne.n	24c42 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   24c00:	23cc      	movs	r3, #204	; 0xcc
   24c02:	18f9      	adds	r1, r7, r3
   24c04:	6838      	ldr	r0, [r7, #0]
   24c06:	2300      	movs	r3, #0
   24c08:	2204      	movs	r2, #4
   24c0a:	4c98      	ldr	r4, [pc, #608]	; (24e6c <m2m_ip_cb+0x290>)
   24c0c:	47a0      	blx	r4
   24c0e:	1e03      	subs	r3, r0, #0
   24c10:	d000      	beq.n	24c14 <m2m_ip_cb+0x38>
   24c12:	e275      	b.n	25100 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   24c14:	23cc      	movs	r3, #204	; 0xcc
   24c16:	18fb      	adds	r3, r7, r3
   24c18:	2201      	movs	r2, #1
   24c1a:	569a      	ldrsb	r2, [r3, r2]
   24c1c:	23c8      	movs	r3, #200	; 0xc8
   24c1e:	18fb      	adds	r3, r7, r3
   24c20:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   24c22:	4b93      	ldr	r3, [pc, #588]	; (24e70 <m2m_ip_cb+0x294>)
   24c24:	681b      	ldr	r3, [r3, #0]
   24c26:	2b00      	cmp	r3, #0
   24c28:	d100      	bne.n	24c2c <m2m_ip_cb+0x50>
   24c2a:	e269      	b.n	25100 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   24c2c:	4b90      	ldr	r3, [pc, #576]	; (24e70 <m2m_ip_cb+0x294>)
   24c2e:	681b      	ldr	r3, [r3, #0]
   24c30:	22cc      	movs	r2, #204	; 0xcc
   24c32:	18ba      	adds	r2, r7, r2
   24c34:	2000      	movs	r0, #0
   24c36:	5610      	ldrsb	r0, [r2, r0]
   24c38:	22c8      	movs	r2, #200	; 0xc8
   24c3a:	18ba      	adds	r2, r7, r2
   24c3c:	2101      	movs	r1, #1
   24c3e:	4798      	blx	r3
	{
   24c40:	e25e      	b.n	25100 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   24c42:	1dfb      	adds	r3, r7, #7
   24c44:	781b      	ldrb	r3, [r3, #0]
   24c46:	2b42      	cmp	r3, #66	; 0x42
   24c48:	d120      	bne.n	24c8c <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   24c4a:	23c4      	movs	r3, #196	; 0xc4
   24c4c:	18f9      	adds	r1, r7, r3
   24c4e:	6838      	ldr	r0, [r7, #0]
   24c50:	2300      	movs	r3, #0
   24c52:	2204      	movs	r2, #4
   24c54:	4c85      	ldr	r4, [pc, #532]	; (24e6c <m2m_ip_cb+0x290>)
   24c56:	47a0      	blx	r4
   24c58:	1e03      	subs	r3, r0, #0
   24c5a:	d000      	beq.n	24c5e <m2m_ip_cb+0x82>
   24c5c:	e257      	b.n	2510e <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   24c5e:	23c4      	movs	r3, #196	; 0xc4
   24c60:	18fb      	adds	r3, r7, r3
   24c62:	2201      	movs	r2, #1
   24c64:	569a      	ldrsb	r2, [r3, r2]
   24c66:	23c0      	movs	r3, #192	; 0xc0
   24c68:	18fb      	adds	r3, r7, r3
   24c6a:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   24c6c:	4b80      	ldr	r3, [pc, #512]	; (24e70 <m2m_ip_cb+0x294>)
   24c6e:	681b      	ldr	r3, [r3, #0]
   24c70:	2b00      	cmp	r3, #0
   24c72:	d100      	bne.n	24c76 <m2m_ip_cb+0x9a>
   24c74:	e24b      	b.n	2510e <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   24c76:	4b7e      	ldr	r3, [pc, #504]	; (24e70 <m2m_ip_cb+0x294>)
   24c78:	681b      	ldr	r3, [r3, #0]
   24c7a:	22c4      	movs	r2, #196	; 0xc4
   24c7c:	18ba      	adds	r2, r7, r2
   24c7e:	2000      	movs	r0, #0
   24c80:	5610      	ldrsb	r0, [r2, r0]
   24c82:	22c0      	movs	r2, #192	; 0xc0
   24c84:	18ba      	adds	r2, r7, r2
   24c86:	2102      	movs	r1, #2
   24c88:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   24c8a:	e240      	b.n	2510e <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   24c8c:	1dfb      	adds	r3, r7, #7
   24c8e:	781b      	ldrb	r3, [r3, #0]
   24c90:	2b43      	cmp	r3, #67	; 0x43
   24c92:	d000      	beq.n	24c96 <m2m_ip_cb+0xba>
   24c94:	e086      	b.n	24da4 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   24c96:	23b4      	movs	r3, #180	; 0xb4
   24c98:	18f9      	adds	r1, r7, r3
   24c9a:	6838      	ldr	r0, [r7, #0]
   24c9c:	2300      	movs	r3, #0
   24c9e:	220c      	movs	r2, #12
   24ca0:	4c72      	ldr	r4, [pc, #456]	; (24e6c <m2m_ip_cb+0x290>)
   24ca2:	47a0      	blx	r4
   24ca4:	1e03      	subs	r3, r0, #0
   24ca6:	d000      	beq.n	24caa <m2m_ip_cb+0xce>
   24ca8:	e231      	b.n	2510e <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   24caa:	23b4      	movs	r3, #180	; 0xb4
   24cac:	18fb      	adds	r3, r7, r3
   24cae:	7a5b      	ldrb	r3, [r3, #9]
   24cb0:	b25b      	sxtb	r3, r3
   24cb2:	2b00      	cmp	r3, #0
   24cb4:	db4f      	blt.n	24d56 <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   24cb6:	23b4      	movs	r3, #180	; 0xb4
   24cb8:	18fb      	adds	r3, r7, r3
   24cba:	7a5b      	ldrb	r3, [r3, #9]
   24cbc:	b25b      	sxtb	r3, r3
   24cbe:	0018      	movs	r0, r3
   24cc0:	23b4      	movs	r3, #180	; 0xb4
   24cc2:	18fb      	adds	r3, r7, r3
   24cc4:	7a1b      	ldrb	r3, [r3, #8]
   24cc6:	b25b      	sxtb	r3, r3
   24cc8:	4a6a      	ldr	r2, [pc, #424]	; (24e74 <m2m_ip_cb+0x298>)
   24cca:	011b      	lsls	r3, r3, #4
   24ccc:	18d3      	adds	r3, r2, r3
   24cce:	330b      	adds	r3, #11
   24cd0:	781b      	ldrb	r3, [r3, #0]
   24cd2:	b2d9      	uxtb	r1, r3
   24cd4:	4a67      	ldr	r2, [pc, #412]	; (24e74 <m2m_ip_cb+0x298>)
   24cd6:	0103      	lsls	r3, r0, #4
   24cd8:	18d3      	adds	r3, r2, r3
   24cda:	330b      	adds	r3, #11
   24cdc:	1c0a      	adds	r2, r1, #0
   24cde:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   24ce0:	23b4      	movs	r3, #180	; 0xb4
   24ce2:	18fb      	adds	r3, r7, r3
   24ce4:	7a5b      	ldrb	r3, [r3, #9]
   24ce6:	b25b      	sxtb	r3, r3
   24ce8:	4a62      	ldr	r2, [pc, #392]	; (24e74 <m2m_ip_cb+0x298>)
   24cea:	011b      	lsls	r3, r3, #4
   24cec:	18d3      	adds	r3, r2, r3
   24cee:	330a      	adds	r3, #10
   24cf0:	2201      	movs	r2, #1
   24cf2:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   24cf4:	23b4      	movs	r3, #180	; 0xb4
   24cf6:	18fb      	adds	r3, r7, r3
   24cf8:	7a5b      	ldrb	r3, [r3, #9]
   24cfa:	b25b      	sxtb	r3, r3
   24cfc:	0018      	movs	r0, r3
   24cfe:	23b4      	movs	r3, #180	; 0xb4
   24d00:	18fb      	adds	r3, r7, r3
   24d02:	895b      	ldrh	r3, [r3, #10]
   24d04:	3b08      	subs	r3, #8
   24d06:	b299      	uxth	r1, r3
   24d08:	4a5a      	ldr	r2, [pc, #360]	; (24e74 <m2m_ip_cb+0x298>)
   24d0a:	0103      	lsls	r3, r0, #4
   24d0c:	18d3      	adds	r3, r2, r3
   24d0e:	3308      	adds	r3, #8
   24d10:	1c0a      	adds	r2, r1, #0
   24d12:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   24d14:	4b58      	ldr	r3, [pc, #352]	; (24e78 <m2m_ip_cb+0x29c>)
   24d16:	881b      	ldrh	r3, [r3, #0]
   24d18:	b29b      	uxth	r3, r3
   24d1a:	3301      	adds	r3, #1
   24d1c:	b29a      	uxth	r2, r3
   24d1e:	4b56      	ldr	r3, [pc, #344]	; (24e78 <m2m_ip_cb+0x29c>)
   24d20:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   24d22:	4b55      	ldr	r3, [pc, #340]	; (24e78 <m2m_ip_cb+0x29c>)
   24d24:	881b      	ldrh	r3, [r3, #0]
   24d26:	b29b      	uxth	r3, r3
   24d28:	2b00      	cmp	r3, #0
   24d2a:	d106      	bne.n	24d3a <m2m_ip_cb+0x15e>
					++gu16SessionID;
   24d2c:	4b52      	ldr	r3, [pc, #328]	; (24e78 <m2m_ip_cb+0x29c>)
   24d2e:	881b      	ldrh	r3, [r3, #0]
   24d30:	b29b      	uxth	r3, r3
   24d32:	3301      	adds	r3, #1
   24d34:	b29a      	uxth	r2, r3
   24d36:	4b50      	ldr	r3, [pc, #320]	; (24e78 <m2m_ip_cb+0x29c>)
   24d38:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   24d3a:	23b4      	movs	r3, #180	; 0xb4
   24d3c:	18fb      	adds	r3, r7, r3
   24d3e:	7a5b      	ldrb	r3, [r3, #9]
   24d40:	b25b      	sxtb	r3, r3
   24d42:	0018      	movs	r0, r3
   24d44:	4b4c      	ldr	r3, [pc, #304]	; (24e78 <m2m_ip_cb+0x29c>)
   24d46:	881b      	ldrh	r3, [r3, #0]
   24d48:	b299      	uxth	r1, r3
   24d4a:	4a4a      	ldr	r2, [pc, #296]	; (24e74 <m2m_ip_cb+0x298>)
   24d4c:	0103      	lsls	r3, r0, #4
   24d4e:	18d3      	adds	r3, r2, r3
   24d50:	3306      	adds	r3, #6
   24d52:	1c0a      	adds	r2, r1, #0
   24d54:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   24d56:	23b4      	movs	r3, #180	; 0xb4
   24d58:	18fb      	adds	r3, r7, r3
   24d5a:	2209      	movs	r2, #9
   24d5c:	569a      	ldrsb	r2, [r3, r2]
   24d5e:	23a0      	movs	r3, #160	; 0xa0
   24d60:	18fb      	adds	r3, r7, r3
   24d62:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   24d64:	23a0      	movs	r3, #160	; 0xa0
   24d66:	18fb      	adds	r3, r7, r3
   24d68:	2202      	movs	r2, #2
   24d6a:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   24d6c:	23b4      	movs	r3, #180	; 0xb4
   24d6e:	18fb      	adds	r3, r7, r3
   24d70:	885a      	ldrh	r2, [r3, #2]
   24d72:	23a0      	movs	r3, #160	; 0xa0
   24d74:	18fb      	adds	r3, r7, r3
   24d76:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   24d78:	23b4      	movs	r3, #180	; 0xb4
   24d7a:	18fb      	adds	r3, r7, r3
   24d7c:	685a      	ldr	r2, [r3, #4]
   24d7e:	23a0      	movs	r3, #160	; 0xa0
   24d80:	18fb      	adds	r3, r7, r3
   24d82:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   24d84:	4b3a      	ldr	r3, [pc, #232]	; (24e70 <m2m_ip_cb+0x294>)
   24d86:	681b      	ldr	r3, [r3, #0]
   24d88:	2b00      	cmp	r3, #0
   24d8a:	d100      	bne.n	24d8e <m2m_ip_cb+0x1b2>
   24d8c:	e1bf      	b.n	2510e <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   24d8e:	4b38      	ldr	r3, [pc, #224]	; (24e70 <m2m_ip_cb+0x294>)
   24d90:	681b      	ldr	r3, [r3, #0]
   24d92:	22b4      	movs	r2, #180	; 0xb4
   24d94:	18ba      	adds	r2, r7, r2
   24d96:	2008      	movs	r0, #8
   24d98:	5610      	ldrsb	r0, [r2, r0]
   24d9a:	22a0      	movs	r2, #160	; 0xa0
   24d9c:	18ba      	adds	r2, r7, r2
   24d9e:	2104      	movs	r1, #4
   24da0:	4798      	blx	r3
}
   24da2:	e1b4      	b.n	2510e <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   24da4:	1dfb      	adds	r3, r7, #7
   24da6:	781b      	ldrb	r3, [r3, #0]
   24da8:	2b44      	cmp	r3, #68	; 0x44
   24daa:	d003      	beq.n	24db4 <m2m_ip_cb+0x1d8>
   24dac:	1dfb      	adds	r3, r7, #7
   24dae:	781b      	ldrb	r3, [r3, #0]
   24db0:	2b4b      	cmp	r3, #75	; 0x4b
   24db2:	d13d      	bne.n	24e30 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   24db4:	239c      	movs	r3, #156	; 0x9c
   24db6:	18f9      	adds	r1, r7, r3
   24db8:	6838      	ldr	r0, [r7, #0]
   24dba:	2300      	movs	r3, #0
   24dbc:	2204      	movs	r2, #4
   24dbe:	4c2b      	ldr	r4, [pc, #172]	; (24e6c <m2m_ip_cb+0x290>)
   24dc0:	47a0      	blx	r4
   24dc2:	1e03      	subs	r3, r0, #0
   24dc4:	d000      	beq.n	24dc8 <m2m_ip_cb+0x1ec>
   24dc6:	e19d      	b.n	25104 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   24dc8:	239c      	movs	r3, #156	; 0x9c
   24dca:	18fb      	adds	r3, r7, r3
   24dcc:	2200      	movs	r2, #0
   24dce:	569a      	ldrsb	r2, [r3, r2]
   24dd0:	2398      	movs	r3, #152	; 0x98
   24dd2:	18fb      	adds	r3, r7, r3
   24dd4:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   24dd6:	239c      	movs	r3, #156	; 0x9c
   24dd8:	18fb      	adds	r3, r7, r3
   24dda:	2201      	movs	r2, #1
   24ddc:	569a      	ldrsb	r2, [r3, r2]
   24dde:	2398      	movs	r3, #152	; 0x98
   24de0:	18fb      	adds	r3, r7, r3
   24de2:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   24de4:	239c      	movs	r3, #156	; 0x9c
   24de6:	18fb      	adds	r3, r7, r3
   24de8:	785b      	ldrb	r3, [r3, #1]
   24dea:	b25b      	sxtb	r3, r3
   24dec:	2b00      	cmp	r3, #0
   24dee:	d10f      	bne.n	24e10 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   24df0:	239c      	movs	r3, #156	; 0x9c
   24df2:	18fb      	adds	r3, r7, r3
   24df4:	781b      	ldrb	r3, [r3, #0]
   24df6:	b25b      	sxtb	r3, r3
   24df8:	0018      	movs	r0, r3
   24dfa:	239c      	movs	r3, #156	; 0x9c
   24dfc:	18fb      	adds	r3, r7, r3
   24dfe:	885b      	ldrh	r3, [r3, #2]
   24e00:	3b08      	subs	r3, #8
   24e02:	b299      	uxth	r1, r3
   24e04:	4a1b      	ldr	r2, [pc, #108]	; (24e74 <m2m_ip_cb+0x298>)
   24e06:	0103      	lsls	r3, r0, #4
   24e08:	18d3      	adds	r3, r2, r3
   24e0a:	3308      	adds	r3, #8
   24e0c:	1c0a      	adds	r2, r1, #0
   24e0e:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   24e10:	4b17      	ldr	r3, [pc, #92]	; (24e70 <m2m_ip_cb+0x294>)
   24e12:	681b      	ldr	r3, [r3, #0]
   24e14:	2b00      	cmp	r3, #0
   24e16:	d100      	bne.n	24e1a <m2m_ip_cb+0x23e>
   24e18:	e174      	b.n	25104 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   24e1a:	4b15      	ldr	r3, [pc, #84]	; (24e70 <m2m_ip_cb+0x294>)
   24e1c:	681b      	ldr	r3, [r3, #0]
   24e1e:	229c      	movs	r2, #156	; 0x9c
   24e20:	18ba      	adds	r2, r7, r2
   24e22:	2000      	movs	r0, #0
   24e24:	5610      	ldrsb	r0, [r2, r0]
   24e26:	2298      	movs	r2, #152	; 0x98
   24e28:	18ba      	adds	r2, r7, r2
   24e2a:	2105      	movs	r1, #5
   24e2c:	4798      	blx	r3
	{
   24e2e:	e169      	b.n	25104 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   24e30:	1dfb      	adds	r3, r7, #7
   24e32:	781b      	ldrb	r3, [r3, #0]
   24e34:	2b4a      	cmp	r3, #74	; 0x4a
   24e36:	d123      	bne.n	24e80 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   24e38:	230c      	movs	r3, #12
   24e3a:	18f9      	adds	r1, r7, r3
   24e3c:	6838      	ldr	r0, [r7, #0]
   24e3e:	2300      	movs	r3, #0
   24e40:	2244      	movs	r2, #68	; 0x44
   24e42:	4c0a      	ldr	r4, [pc, #40]	; (24e6c <m2m_ip_cb+0x290>)
   24e44:	47a0      	blx	r4
   24e46:	1e03      	subs	r3, r0, #0
   24e48:	d000      	beq.n	24e4c <m2m_ip_cb+0x270>
   24e4a:	e160      	b.n	2510e <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   24e4c:	4b0b      	ldr	r3, [pc, #44]	; (24e7c <m2m_ip_cb+0x2a0>)
   24e4e:	681b      	ldr	r3, [r3, #0]
   24e50:	2b00      	cmp	r3, #0
   24e52:	d100      	bne.n	24e56 <m2m_ip_cb+0x27a>
   24e54:	e15b      	b.n	2510e <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   24e56:	4b09      	ldr	r3, [pc, #36]	; (24e7c <m2m_ip_cb+0x2a0>)
   24e58:	681a      	ldr	r2, [r3, #0]
   24e5a:	230c      	movs	r3, #12
   24e5c:	18fb      	adds	r3, r7, r3
   24e5e:	6c19      	ldr	r1, [r3, #64]	; 0x40
   24e60:	230c      	movs	r3, #12
   24e62:	18fb      	adds	r3, r7, r3
   24e64:	0018      	movs	r0, r3
   24e66:	4790      	blx	r2
}
   24e68:	e151      	b.n	2510e <m2m_ip_cb+0x532>
   24e6a:	46c0      	nop			; (mov r8, r8)
   24e6c:	000213d9 	.word	0x000213d9
   24e70:	200059e4 	.word	0x200059e4
   24e74:	20005934 	.word	0x20005934
   24e78:	20004132 	.word	0x20004132
   24e7c:	200059ec 	.word	0x200059ec
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   24e80:	1dfb      	adds	r3, r7, #7
   24e82:	781b      	ldrb	r3, [r3, #0]
   24e84:	2b46      	cmp	r3, #70	; 0x46
   24e86:	d008      	beq.n	24e9a <m2m_ip_cb+0x2be>
   24e88:	1dfb      	adds	r3, r7, #7
   24e8a:	781b      	ldrb	r3, [r3, #0]
   24e8c:	2b48      	cmp	r3, #72	; 0x48
   24e8e:	d004      	beq.n	24e9a <m2m_ip_cb+0x2be>
   24e90:	1dfb      	adds	r3, r7, #7
   24e92:	781b      	ldrb	r3, [r3, #0]
   24e94:	2b4d      	cmp	r3, #77	; 0x4d
   24e96:	d000      	beq.n	24e9a <m2m_ip_cb+0x2be>
   24e98:	e0b4      	b.n	25004 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   24e9a:	23df      	movs	r3, #223	; 0xdf
   24e9c:	18fb      	adds	r3, r7, r3
   24e9e:	2206      	movs	r2, #6
   24ea0:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   24ea2:	1dfb      	adds	r3, r7, #7
   24ea4:	781b      	ldrb	r3, [r3, #0]
   24ea6:	2b48      	cmp	r3, #72	; 0x48
   24ea8:	d103      	bne.n	24eb2 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   24eaa:	23df      	movs	r3, #223	; 0xdf
   24eac:	18fb      	adds	r3, r7, r3
   24eae:	2209      	movs	r2, #9
   24eb0:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   24eb2:	23d8      	movs	r3, #216	; 0xd8
   24eb4:	18fb      	adds	r3, r7, r3
   24eb6:	2210      	movs	r2, #16
   24eb8:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   24eba:	23d8      	movs	r3, #216	; 0xd8
   24ebc:	18fb      	adds	r3, r7, r3
   24ebe:	881a      	ldrh	r2, [r3, #0]
   24ec0:	2388      	movs	r3, #136	; 0x88
   24ec2:	18f9      	adds	r1, r7, r3
   24ec4:	6838      	ldr	r0, [r7, #0]
   24ec6:	2300      	movs	r3, #0
   24ec8:	4c93      	ldr	r4, [pc, #588]	; (25118 <m2m_ip_cb+0x53c>)
   24eca:	47a0      	blx	r4
   24ecc:	1e03      	subs	r3, r0, #0
   24ece:	d000      	beq.n	24ed2 <m2m_ip_cb+0x2f6>
   24ed0:	e11a      	b.n	25108 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   24ed2:	23d6      	movs	r3, #214	; 0xd6
   24ed4:	18fb      	adds	r3, r7, r3
   24ed6:	2200      	movs	r2, #0
   24ed8:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   24eda:	23d5      	movs	r3, #213	; 0xd5
   24edc:	18fb      	adds	r3, r7, r3
   24ede:	2288      	movs	r2, #136	; 0x88
   24ee0:	18ba      	adds	r2, r7, r2
   24ee2:	7b12      	ldrb	r2, [r2, #12]
   24ee4:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   24ee6:	23d6      	movs	r3, #214	; 0xd6
   24ee8:	18fb      	adds	r3, r7, r3
   24eea:	2288      	movs	r2, #136	; 0x88
   24eec:	18ba      	adds	r2, r7, r2
   24eee:	89d2      	ldrh	r2, [r2, #14]
   24ef0:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   24ef2:	23d5      	movs	r3, #213	; 0xd5
   24ef4:	18fb      	adds	r3, r7, r3
   24ef6:	781b      	ldrb	r3, [r3, #0]
   24ef8:	b25b      	sxtb	r3, r3
   24efa:	4a88      	ldr	r2, [pc, #544]	; (2511c <m2m_ip_cb+0x540>)
   24efc:	011b      	lsls	r3, r3, #4
   24efe:	18d3      	adds	r3, r2, r3
   24f00:	330c      	adds	r3, #12
   24f02:	2200      	movs	r2, #0
   24f04:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   24f06:	23d2      	movs	r3, #210	; 0xd2
   24f08:	18fb      	adds	r3, r7, r3
   24f0a:	2288      	movs	r2, #136	; 0x88
   24f0c:	18ba      	adds	r2, r7, r2
   24f0e:	8912      	ldrh	r2, [r2, #8]
   24f10:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   24f12:	23d0      	movs	r3, #208	; 0xd0
   24f14:	18fb      	adds	r3, r7, r3
   24f16:	2288      	movs	r2, #136	; 0x88
   24f18:	18ba      	adds	r2, r7, r2
   24f1a:	8952      	ldrh	r2, [r2, #10]
   24f1c:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   24f1e:	2388      	movs	r3, #136	; 0x88
   24f20:	18fb      	adds	r3, r7, r3
   24f22:	885a      	ldrh	r2, [r3, #2]
   24f24:	2370      	movs	r3, #112	; 0x70
   24f26:	18fb      	adds	r3, r7, r3
   24f28:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   24f2a:	2388      	movs	r3, #136	; 0x88
   24f2c:	18fb      	adds	r3, r7, r3
   24f2e:	685a      	ldr	r2, [r3, #4]
   24f30:	2370      	movs	r3, #112	; 0x70
   24f32:	18fb      	adds	r3, r7, r3
   24f34:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   24f36:	23d5      	movs	r3, #213	; 0xd5
   24f38:	18fb      	adds	r3, r7, r3
   24f3a:	781b      	ldrb	r3, [r3, #0]
   24f3c:	b25b      	sxtb	r3, r3
   24f3e:	4a77      	ldr	r2, [pc, #476]	; (2511c <m2m_ip_cb+0x540>)
   24f40:	011b      	lsls	r3, r3, #4
   24f42:	18d3      	adds	r3, r2, r3
   24f44:	3306      	adds	r3, #6
   24f46:	881b      	ldrh	r3, [r3, #0]
   24f48:	b29b      	uxth	r3, r3
   24f4a:	22d6      	movs	r2, #214	; 0xd6
   24f4c:	18ba      	adds	r2, r7, r2
   24f4e:	8812      	ldrh	r2, [r2, #0]
   24f50:	429a      	cmp	r2, r3
   24f52:	d148      	bne.n	24fe6 <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   24f54:	23d2      	movs	r3, #210	; 0xd2
   24f56:	18fb      	adds	r3, r7, r3
   24f58:	2200      	movs	r2, #0
   24f5a:	5e9b      	ldrsh	r3, [r3, r2]
   24f5c:	2b00      	cmp	r3, #0
   24f5e:	dd25      	ble.n	24fac <m2m_ip_cb+0x3d0>
   24f60:	23d2      	movs	r3, #210	; 0xd2
   24f62:	18fb      	adds	r3, r7, r3
   24f64:	2200      	movs	r2, #0
   24f66:	5e9a      	ldrsh	r2, [r3, r2]
   24f68:	1d3b      	adds	r3, r7, #4
   24f6a:	881b      	ldrh	r3, [r3, #0]
   24f6c:	429a      	cmp	r2, r3
   24f6e:	da1d      	bge.n	24fac <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   24f70:	23d0      	movs	r3, #208	; 0xd0
   24f72:	18fb      	adds	r3, r7, r3
   24f74:	881b      	ldrh	r3, [r3, #0]
   24f76:	683a      	ldr	r2, [r7, #0]
   24f78:	18d3      	adds	r3, r2, r3
   24f7a:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   24f7c:	23d8      	movs	r3, #216	; 0xd8
   24f7e:	18fb      	adds	r3, r7, r3
   24f80:	22d2      	movs	r2, #210	; 0xd2
   24f82:	18ba      	adds	r2, r7, r2
   24f84:	8812      	ldrh	r2, [r2, #0]
   24f86:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   24f88:	683c      	ldr	r4, [r7, #0]
   24f8a:	23df      	movs	r3, #223	; 0xdf
   24f8c:	18fb      	adds	r3, r7, r3
   24f8e:	781a      	ldrb	r2, [r3, #0]
   24f90:	2370      	movs	r3, #112	; 0x70
   24f92:	18f9      	adds	r1, r7, r3
   24f94:	23d5      	movs	r3, #213	; 0xd5
   24f96:	18fb      	adds	r3, r7, r3
   24f98:	2000      	movs	r0, #0
   24f9a:	5618      	ldrsb	r0, [r3, r0]
   24f9c:	23d8      	movs	r3, #216	; 0xd8
   24f9e:	18fb      	adds	r3, r7, r3
   24fa0:	881b      	ldrh	r3, [r3, #0]
   24fa2:	9300      	str	r3, [sp, #0]
   24fa4:	0023      	movs	r3, r4
   24fa6:	4c5e      	ldr	r4, [pc, #376]	; (25120 <m2m_ip_cb+0x544>)
   24fa8:	47a0      	blx	r4
	{
   24faa:	e0ad      	b.n	25108 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   24fac:	2370      	movs	r3, #112	; 0x70
   24fae:	18fb      	adds	r3, r7, r3
   24fb0:	22d2      	movs	r2, #210	; 0xd2
   24fb2:	18ba      	adds	r2, r7, r2
   24fb4:	8812      	ldrh	r2, [r2, #0]
   24fb6:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   24fb8:	2370      	movs	r3, #112	; 0x70
   24fba:	18fb      	adds	r3, r7, r3
   24fbc:	2200      	movs	r2, #0
   24fbe:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   24fc0:	4b58      	ldr	r3, [pc, #352]	; (25124 <m2m_ip_cb+0x548>)
   24fc2:	681b      	ldr	r3, [r3, #0]
   24fc4:	2b00      	cmp	r3, #0
   24fc6:	d100      	bne.n	24fca <m2m_ip_cb+0x3ee>
   24fc8:	e09e      	b.n	25108 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   24fca:	4b56      	ldr	r3, [pc, #344]	; (25124 <m2m_ip_cb+0x548>)
   24fcc:	681b      	ldr	r3, [r3, #0]
   24fce:	2270      	movs	r2, #112	; 0x70
   24fd0:	18bc      	adds	r4, r7, r2
   24fd2:	22df      	movs	r2, #223	; 0xdf
   24fd4:	18ba      	adds	r2, r7, r2
   24fd6:	7811      	ldrb	r1, [r2, #0]
   24fd8:	22d5      	movs	r2, #213	; 0xd5
   24fda:	18ba      	adds	r2, r7, r2
   24fdc:	2000      	movs	r0, #0
   24fde:	5610      	ldrsb	r0, [r2, r0]
   24fe0:	0022      	movs	r2, r4
   24fe2:	4798      	blx	r3
	{
   24fe4:	e090      	b.n	25108 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   24fe6:	23d8      	movs	r3, #216	; 0xd8
   24fe8:	18fa      	adds	r2, r7, r3
   24fea:	1d3b      	adds	r3, r7, #4
   24fec:	8812      	ldrh	r2, [r2, #0]
   24fee:	881b      	ldrh	r3, [r3, #0]
   24ff0:	429a      	cmp	r2, r3
   24ff2:	d300      	bcc.n	24ff6 <m2m_ip_cb+0x41a>
   24ff4:	e088      	b.n	25108 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   24ff6:	2301      	movs	r3, #1
   24ff8:	2200      	movs	r2, #0
   24ffa:	2100      	movs	r1, #0
   24ffc:	2000      	movs	r0, #0
   24ffe:	4c46      	ldr	r4, [pc, #280]	; (25118 <m2m_ip_cb+0x53c>)
   25000:	47a0      	blx	r4
	{
   25002:	e081      	b.n	25108 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   25004:	1dfb      	adds	r3, r7, #7
   25006:	781b      	ldrb	r3, [r3, #0]
   25008:	2b45      	cmp	r3, #69	; 0x45
   2500a:	d007      	beq.n	2501c <m2m_ip_cb+0x440>
   2500c:	1dfb      	adds	r3, r7, #7
   2500e:	781b      	ldrb	r3, [r3, #0]
   25010:	2b47      	cmp	r3, #71	; 0x47
   25012:	d003      	beq.n	2501c <m2m_ip_cb+0x440>
   25014:	1dfb      	adds	r3, r7, #7
   25016:	781b      	ldrb	r3, [r3, #0]
   25018:	2b4c      	cmp	r3, #76	; 0x4c
   2501a:	d14c      	bne.n	250b6 <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   2501c:	23de      	movs	r3, #222	; 0xde
   2501e:	18fb      	adds	r3, r7, r3
   25020:	2207      	movs	r2, #7
   25022:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   25024:	1dfb      	adds	r3, r7, #7
   25026:	781b      	ldrb	r3, [r3, #0]
   25028:	2b47      	cmp	r3, #71	; 0x47
   2502a:	d103      	bne.n	25034 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   2502c:	23de      	movs	r3, #222	; 0xde
   2502e:	18fb      	adds	r3, r7, r3
   25030:	2208      	movs	r2, #8
   25032:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   25034:	2364      	movs	r3, #100	; 0x64
   25036:	18f9      	adds	r1, r7, r3
   25038:	6838      	ldr	r0, [r7, #0]
   2503a:	2300      	movs	r3, #0
   2503c:	2208      	movs	r2, #8
   2503e:	4c36      	ldr	r4, [pc, #216]	; (25118 <m2m_ip_cb+0x53c>)
   25040:	47a0      	blx	r4
   25042:	1e03      	subs	r3, r0, #0
   25044:	d162      	bne.n	2510c <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   25046:	23dc      	movs	r3, #220	; 0xdc
   25048:	18fb      	adds	r3, r7, r3
   2504a:	2200      	movs	r2, #0
   2504c:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   2504e:	23db      	movs	r3, #219	; 0xdb
   25050:	18fb      	adds	r3, r7, r3
   25052:	2264      	movs	r2, #100	; 0x64
   25054:	18ba      	adds	r2, r7, r2
   25056:	7812      	ldrb	r2, [r2, #0]
   25058:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   2505a:	23dc      	movs	r3, #220	; 0xdc
   2505c:	18fb      	adds	r3, r7, r3
   2505e:	2264      	movs	r2, #100	; 0x64
   25060:	18ba      	adds	r2, r7, r2
   25062:	8892      	ldrh	r2, [r2, #4]
   25064:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   25066:	2364      	movs	r3, #100	; 0x64
   25068:	18fb      	adds	r3, r7, r3
   2506a:	2202      	movs	r2, #2
   2506c:	5e9a      	ldrsh	r2, [r3, r2]
   2506e:	236e      	movs	r3, #110	; 0x6e
   25070:	18fb      	adds	r3, r7, r3
   25072:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   25074:	23db      	movs	r3, #219	; 0xdb
   25076:	18fb      	adds	r3, r7, r3
   25078:	781b      	ldrb	r3, [r3, #0]
   2507a:	b25b      	sxtb	r3, r3
   2507c:	4a27      	ldr	r2, [pc, #156]	; (2511c <m2m_ip_cb+0x540>)
   2507e:	011b      	lsls	r3, r3, #4
   25080:	18d3      	adds	r3, r2, r3
   25082:	3306      	adds	r3, #6
   25084:	881b      	ldrh	r3, [r3, #0]
   25086:	b29b      	uxth	r3, r3
   25088:	22dc      	movs	r2, #220	; 0xdc
   2508a:	18ba      	adds	r2, r7, r2
   2508c:	8812      	ldrh	r2, [r2, #0]
   2508e:	429a      	cmp	r2, r3
   25090:	d13c      	bne.n	2510c <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   25092:	4b24      	ldr	r3, [pc, #144]	; (25124 <m2m_ip_cb+0x548>)
   25094:	681b      	ldr	r3, [r3, #0]
   25096:	2b00      	cmp	r3, #0
   25098:	d038      	beq.n	2510c <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   2509a:	4b22      	ldr	r3, [pc, #136]	; (25124 <m2m_ip_cb+0x548>)
   2509c:	681b      	ldr	r3, [r3, #0]
   2509e:	226e      	movs	r2, #110	; 0x6e
   250a0:	18bc      	adds	r4, r7, r2
   250a2:	22de      	movs	r2, #222	; 0xde
   250a4:	18ba      	adds	r2, r7, r2
   250a6:	7811      	ldrb	r1, [r2, #0]
   250a8:	22db      	movs	r2, #219	; 0xdb
   250aa:	18ba      	adds	r2, r7, r2
   250ac:	2000      	movs	r0, #0
   250ae:	5610      	ldrsb	r0, [r2, r0]
   250b0:	0022      	movs	r2, r4
   250b2:	4798      	blx	r3
	{
   250b4:	e02a      	b.n	2510c <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   250b6:	1dfb      	adds	r3, r7, #7
   250b8:	781b      	ldrb	r3, [r3, #0]
   250ba:	2b52      	cmp	r3, #82	; 0x52
   250bc:	d127      	bne.n	2510e <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   250be:	2350      	movs	r3, #80	; 0x50
   250c0:	18f9      	adds	r1, r7, r3
   250c2:	6838      	ldr	r0, [r7, #0]
   250c4:	2301      	movs	r3, #1
   250c6:	2214      	movs	r2, #20
   250c8:	4c13      	ldr	r4, [pc, #76]	; (25118 <m2m_ip_cb+0x53c>)
   250ca:	47a0      	blx	r4
   250cc:	1e03      	subs	r3, r0, #0
   250ce:	d11e      	bne.n	2510e <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   250d0:	2350      	movs	r3, #80	; 0x50
   250d2:	18fb      	adds	r3, r7, r3
   250d4:	685b      	ldr	r3, [r3, #4]
   250d6:	001a      	movs	r2, r3
   250d8:	4b13      	ldr	r3, [pc, #76]	; (25128 <m2m_ip_cb+0x54c>)
   250da:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   250dc:	4b12      	ldr	r3, [pc, #72]	; (25128 <m2m_ip_cb+0x54c>)
   250de:	681b      	ldr	r3, [r3, #0]
   250e0:	2b00      	cmp	r3, #0
   250e2:	d014      	beq.n	2510e <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   250e4:	4b10      	ldr	r3, [pc, #64]	; (25128 <m2m_ip_cb+0x54c>)
   250e6:	681c      	ldr	r4, [r3, #0]
   250e8:	2350      	movs	r3, #80	; 0x50
   250ea:	18fb      	adds	r3, r7, r3
   250ec:	6818      	ldr	r0, [r3, #0]
   250ee:	2350      	movs	r3, #80	; 0x50
   250f0:	18fb      	adds	r3, r7, r3
   250f2:	6899      	ldr	r1, [r3, #8]
   250f4:	2350      	movs	r3, #80	; 0x50
   250f6:	18fb      	adds	r3, r7, r3
   250f8:	7c1b      	ldrb	r3, [r3, #16]
   250fa:	001a      	movs	r2, r3
   250fc:	47a0      	blx	r4
}
   250fe:	e006      	b.n	2510e <m2m_ip_cb+0x532>
	{
   25100:	46c0      	nop			; (mov r8, r8)
   25102:	e004      	b.n	2510e <m2m_ip_cb+0x532>
	{
   25104:	46c0      	nop			; (mov r8, r8)
   25106:	e002      	b.n	2510e <m2m_ip_cb+0x532>
	{
   25108:	46c0      	nop			; (mov r8, r8)
   2510a:	e000      	b.n	2510e <m2m_ip_cb+0x532>
	{
   2510c:	46c0      	nop			; (mov r8, r8)
}
   2510e:	46c0      	nop			; (mov r8, r8)
   25110:	46bd      	mov	sp, r7
   25112:	b039      	add	sp, #228	; 0xe4
   25114:	bd90      	pop	{r4, r7, pc}
   25116:	46c0      	nop			; (mov r8, r8)
   25118:	000213d9 	.word	0x000213d9
   2511c:	20005934 	.word	0x20005934
   25120:	000249e1 	.word	0x000249e1
   25124:	200059e4 	.word	0x200059e4
   25128:	200059e8 	.word	0x200059e8

0002512c <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   2512c:	b580      	push	{r7, lr}
   2512e:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   25130:	4b0c      	ldr	r3, [pc, #48]	; (25164 <socketInit+0x38>)
   25132:	781b      	ldrb	r3, [r3, #0]
   25134:	b2db      	uxtb	r3, r3
   25136:	2b00      	cmp	r3, #0
   25138:	d110      	bne.n	2515c <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   2513a:	4b0b      	ldr	r3, [pc, #44]	; (25168 <socketInit+0x3c>)
   2513c:	22b0      	movs	r2, #176	; 0xb0
   2513e:	2100      	movs	r1, #0
   25140:	0018      	movs	r0, r3
   25142:	4b0a      	ldr	r3, [pc, #40]	; (2516c <socketInit+0x40>)
   25144:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   25146:	4b0a      	ldr	r3, [pc, #40]	; (25170 <socketInit+0x44>)
   25148:	0019      	movs	r1, r3
   2514a:	2002      	movs	r0, #2
   2514c:	4b09      	ldr	r3, [pc, #36]	; (25174 <socketInit+0x48>)
   2514e:	4798      	blx	r3
		gbSocketInit	= 1;
   25150:	4b04      	ldr	r3, [pc, #16]	; (25164 <socketInit+0x38>)
   25152:	2201      	movs	r2, #1
   25154:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   25156:	4b08      	ldr	r3, [pc, #32]	; (25178 <socketInit+0x4c>)
   25158:	2200      	movs	r2, #0
   2515a:	801a      	strh	r2, [r3, #0]
	}
}
   2515c:	46c0      	nop			; (mov r8, r8)
   2515e:	46bd      	mov	sp, r7
   25160:	bd80      	pop	{r7, pc}
   25162:	46c0      	nop			; (mov r8, r8)
   25164:	20004134 	.word	0x20004134
   25168:	20005934 	.word	0x20005934
   2516c:	0002085d 	.word	0x0002085d
   25170:	00024bdd 	.word	0x00024bdd
   25174:	00021559 	.word	0x00021559
   25178:	20004132 	.word	0x20004132

0002517c <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   2517c:	b580      	push	{r7, lr}
   2517e:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   25180:	4b0a      	ldr	r3, [pc, #40]	; (251ac <socketDeinit+0x30>)
   25182:	22b0      	movs	r2, #176	; 0xb0
   25184:	2100      	movs	r1, #0
   25186:	0018      	movs	r0, r3
   25188:	4b09      	ldr	r3, [pc, #36]	; (251b0 <socketDeinit+0x34>)
   2518a:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   2518c:	2100      	movs	r1, #0
   2518e:	2002      	movs	r0, #2
   25190:	4b08      	ldr	r3, [pc, #32]	; (251b4 <socketDeinit+0x38>)
   25192:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   25194:	4b08      	ldr	r3, [pc, #32]	; (251b8 <socketDeinit+0x3c>)
   25196:	2200      	movs	r2, #0
   25198:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   2519a:	4b08      	ldr	r3, [pc, #32]	; (251bc <socketDeinit+0x40>)
   2519c:	2200      	movs	r2, #0
   2519e:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   251a0:	4b07      	ldr	r3, [pc, #28]	; (251c0 <socketDeinit+0x44>)
   251a2:	2200      	movs	r2, #0
   251a4:	701a      	strb	r2, [r3, #0]
}
   251a6:	46c0      	nop			; (mov r8, r8)
   251a8:	46bd      	mov	sp, r7
   251aa:	bd80      	pop	{r7, pc}
   251ac:	20005934 	.word	0x20005934
   251b0:	0002085d 	.word	0x0002085d
   251b4:	00021559 	.word	0x00021559
   251b8:	200059e4 	.word	0x200059e4
   251bc:	200059ec 	.word	0x200059ec
   251c0:	20004134 	.word	0x20004134

000251c4 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   251c4:	b580      	push	{r7, lr}
   251c6:	b082      	sub	sp, #8
   251c8:	af00      	add	r7, sp, #0
   251ca:	6078      	str	r0, [r7, #4]
   251cc:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   251ce:	4b05      	ldr	r3, [pc, #20]	; (251e4 <registerSocketCallback+0x20>)
   251d0:	687a      	ldr	r2, [r7, #4]
   251d2:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   251d4:	4b04      	ldr	r3, [pc, #16]	; (251e8 <registerSocketCallback+0x24>)
   251d6:	683a      	ldr	r2, [r7, #0]
   251d8:	601a      	str	r2, [r3, #0]
}
   251da:	46c0      	nop			; (mov r8, r8)
   251dc:	46bd      	mov	sp, r7
   251de:	b002      	add	sp, #8
   251e0:	bd80      	pop	{r7, pc}
   251e2:	46c0      	nop			; (mov r8, r8)
   251e4:	200059e4 	.word	0x200059e4
   251e8:	200059ec 	.word	0x200059ec

000251ec <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   251ec:	b590      	push	{r4, r7, lr}
   251ee:	b08d      	sub	sp, #52	; 0x34
   251f0:	af04      	add	r7, sp, #16
   251f2:	0004      	movs	r4, r0
   251f4:	0008      	movs	r0, r1
   251f6:	0011      	movs	r1, r2
   251f8:	1dbb      	adds	r3, r7, #6
   251fa:	1c22      	adds	r2, r4, #0
   251fc:	801a      	strh	r2, [r3, #0]
   251fe:	1d7b      	adds	r3, r7, #5
   25200:	1c02      	adds	r2, r0, #0
   25202:	701a      	strb	r2, [r3, #0]
   25204:	1d3b      	adds	r3, r7, #4
   25206:	1c0a      	adds	r2, r1, #0
   25208:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   2520a:	231f      	movs	r3, #31
   2520c:	18fb      	adds	r3, r7, r3
   2520e:	22ff      	movs	r2, #255	; 0xff
   25210:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   25212:	1dbb      	adds	r3, r7, #6
   25214:	881b      	ldrh	r3, [r3, #0]
   25216:	2b02      	cmp	r3, #2
   25218:	d000      	beq.n	2521c <socket+0x30>
   2521a:	e0ce      	b.n	253ba <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   2521c:	1d7b      	adds	r3, r7, #5
   2521e:	781b      	ldrb	r3, [r3, #0]
   25220:	2b01      	cmp	r3, #1
   25222:	d135      	bne.n	25290 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   25224:	231e      	movs	r3, #30
   25226:	18fb      	adds	r3, r7, r3
   25228:	2200      	movs	r2, #0
   2522a:	701a      	strb	r2, [r3, #0]
   2522c:	e02a      	b.n	25284 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   2522e:	2317      	movs	r3, #23
   25230:	18fb      	adds	r3, r7, r3
   25232:	4a66      	ldr	r2, [pc, #408]	; (253cc <socket+0x1e0>)
   25234:	7812      	ldrb	r2, [r2, #0]
   25236:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   25238:	4b64      	ldr	r3, [pc, #400]	; (253cc <socket+0x1e0>)
   2523a:	781b      	ldrb	r3, [r3, #0]
   2523c:	b2db      	uxtb	r3, r3
   2523e:	011a      	lsls	r2, r3, #4
   25240:	4b63      	ldr	r3, [pc, #396]	; (253d0 <socket+0x1e4>)
   25242:	18d3      	adds	r3, r2, r3
   25244:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   25246:	4b61      	ldr	r3, [pc, #388]	; (253cc <socket+0x1e0>)
   25248:	781b      	ldrb	r3, [r3, #0]
   2524a:	b2db      	uxtb	r3, r3
   2524c:	1c5a      	adds	r2, r3, #1
   2524e:	4b61      	ldr	r3, [pc, #388]	; (253d4 <socket+0x1e8>)
   25250:	2107      	movs	r1, #7
   25252:	0010      	movs	r0, r2
   25254:	4798      	blx	r3
   25256:	000b      	movs	r3, r1
   25258:	b2da      	uxtb	r2, r3
   2525a:	4b5c      	ldr	r3, [pc, #368]	; (253cc <socket+0x1e0>)
   2525c:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   2525e:	69bb      	ldr	r3, [r7, #24]
   25260:	7a9b      	ldrb	r3, [r3, #10]
   25262:	b2db      	uxtb	r3, r3
   25264:	2b00      	cmp	r3, #0
   25266:	d106      	bne.n	25276 <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   25268:	231f      	movs	r3, #31
   2526a:	18fb      	adds	r3, r7, r3
   2526c:	2217      	movs	r2, #23
   2526e:	18ba      	adds	r2, r7, r2
   25270:	7812      	ldrb	r2, [r2, #0]
   25272:	701a      	strb	r2, [r3, #0]
					break;
   25274:	e04c      	b.n	25310 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   25276:	231e      	movs	r3, #30
   25278:	18fb      	adds	r3, r7, r3
   2527a:	781a      	ldrb	r2, [r3, #0]
   2527c:	231e      	movs	r3, #30
   2527e:	18fb      	adds	r3, r7, r3
   25280:	3201      	adds	r2, #1
   25282:	701a      	strb	r2, [r3, #0]
   25284:	231e      	movs	r3, #30
   25286:	18fb      	adds	r3, r7, r3
   25288:	781b      	ldrb	r3, [r3, #0]
   2528a:	2b06      	cmp	r3, #6
   2528c:	d9cf      	bls.n	2522e <socket+0x42>
   2528e:	e03f      	b.n	25310 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   25290:	1d7b      	adds	r3, r7, #5
   25292:	781b      	ldrb	r3, [r3, #0]
   25294:	2b02      	cmp	r3, #2
   25296:	d13b      	bne.n	25310 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   25298:	4b4f      	ldr	r3, [pc, #316]	; (253d8 <socket+0x1ec>)
   2529a:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   2529c:	231e      	movs	r3, #30
   2529e:	18fb      	adds	r3, r7, r3
   252a0:	2200      	movs	r2, #0
   252a2:	701a      	strb	r2, [r3, #0]
   252a4:	e02f      	b.n	25306 <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   252a6:	2317      	movs	r3, #23
   252a8:	18fb      	adds	r3, r7, r3
   252aa:	4a4c      	ldr	r2, [pc, #304]	; (253dc <socket+0x1f0>)
   252ac:	7812      	ldrb	r2, [r2, #0]
   252ae:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   252b0:	4b4a      	ldr	r3, [pc, #296]	; (253dc <socket+0x1f0>)
   252b2:	781b      	ldrb	r3, [r3, #0]
   252b4:	b2db      	uxtb	r3, r3
   252b6:	011b      	lsls	r3, r3, #4
   252b8:	693a      	ldr	r2, [r7, #16]
   252ba:	18d3      	adds	r3, r2, r3
   252bc:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   252be:	4b47      	ldr	r3, [pc, #284]	; (253dc <socket+0x1f0>)
   252c0:	781b      	ldrb	r3, [r3, #0]
   252c2:	b2db      	uxtb	r3, r3
   252c4:	3301      	adds	r3, #1
   252c6:	4a46      	ldr	r2, [pc, #280]	; (253e0 <socket+0x1f4>)
   252c8:	4013      	ands	r3, r2
   252ca:	d504      	bpl.n	252d6 <socket+0xea>
   252cc:	3b01      	subs	r3, #1
   252ce:	2204      	movs	r2, #4
   252d0:	4252      	negs	r2, r2
   252d2:	4313      	orrs	r3, r2
   252d4:	3301      	adds	r3, #1
   252d6:	b2da      	uxtb	r2, r3
   252d8:	4b40      	ldr	r3, [pc, #256]	; (253dc <socket+0x1f0>)
   252da:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   252dc:	69bb      	ldr	r3, [r7, #24]
   252de:	7a9b      	ldrb	r3, [r3, #10]
   252e0:	b2db      	uxtb	r3, r3
   252e2:	2b00      	cmp	r3, #0
   252e4:	d108      	bne.n	252f8 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   252e6:	2317      	movs	r3, #23
   252e8:	18fb      	adds	r3, r7, r3
   252ea:	781b      	ldrb	r3, [r3, #0]
   252ec:	3307      	adds	r3, #7
   252ee:	b2da      	uxtb	r2, r3
   252f0:	231f      	movs	r3, #31
   252f2:	18fb      	adds	r3, r7, r3
   252f4:	701a      	strb	r2, [r3, #0]
					break;
   252f6:	e00b      	b.n	25310 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   252f8:	231e      	movs	r3, #30
   252fa:	18fb      	adds	r3, r7, r3
   252fc:	781a      	ldrb	r2, [r3, #0]
   252fe:	231e      	movs	r3, #30
   25300:	18fb      	adds	r3, r7, r3
   25302:	3201      	adds	r2, #1
   25304:	701a      	strb	r2, [r3, #0]
   25306:	231e      	movs	r3, #30
   25308:	18fb      	adds	r3, r7, r3
   2530a:	781b      	ldrb	r3, [r3, #0]
   2530c:	2b03      	cmp	r3, #3
   2530e:	d9ca      	bls.n	252a6 <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   25310:	231f      	movs	r3, #31
   25312:	18fb      	adds	r3, r7, r3
   25314:	781b      	ldrb	r3, [r3, #0]
   25316:	2b7f      	cmp	r3, #127	; 0x7f
   25318:	d84f      	bhi.n	253ba <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   2531a:	69bb      	ldr	r3, [r7, #24]
   2531c:	2210      	movs	r2, #16
   2531e:	2100      	movs	r1, #0
   25320:	0018      	movs	r0, r3
   25322:	4b30      	ldr	r3, [pc, #192]	; (253e4 <socket+0x1f8>)
   25324:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   25326:	69bb      	ldr	r3, [r7, #24]
   25328:	2201      	movs	r2, #1
   2532a:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   2532c:	4b2e      	ldr	r3, [pc, #184]	; (253e8 <socket+0x1fc>)
   2532e:	881b      	ldrh	r3, [r3, #0]
   25330:	b29b      	uxth	r3, r3
   25332:	3301      	adds	r3, #1
   25334:	b29a      	uxth	r2, r3
   25336:	4b2c      	ldr	r3, [pc, #176]	; (253e8 <socket+0x1fc>)
   25338:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   2533a:	4b2b      	ldr	r3, [pc, #172]	; (253e8 <socket+0x1fc>)
   2533c:	881b      	ldrh	r3, [r3, #0]
   2533e:	b29b      	uxth	r3, r3
   25340:	2b00      	cmp	r3, #0
   25342:	d106      	bne.n	25352 <socket+0x166>
				++gu16SessionID;
   25344:	4b28      	ldr	r3, [pc, #160]	; (253e8 <socket+0x1fc>)
   25346:	881b      	ldrh	r3, [r3, #0]
   25348:	b29b      	uxth	r3, r3
   2534a:	3301      	adds	r3, #1
   2534c:	b29a      	uxth	r2, r3
   2534e:	4b26      	ldr	r3, [pc, #152]	; (253e8 <socket+0x1fc>)
   25350:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   25352:	4b25      	ldr	r3, [pc, #148]	; (253e8 <socket+0x1fc>)
   25354:	881b      	ldrh	r3, [r3, #0]
   25356:	b29a      	uxth	r2, r3
   25358:	69bb      	ldr	r3, [r7, #24]
   2535a:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   2535c:	4b23      	ldr	r3, [pc, #140]	; (253ec <socket+0x200>)
   2535e:	0018      	movs	r0, r3
   25360:	4b23      	ldr	r3, [pc, #140]	; (253f0 <socket+0x204>)
   25362:	4798      	blx	r3
   25364:	231f      	movs	r3, #31
   25366:	18fb      	adds	r3, r7, r3
   25368:	2100      	movs	r1, #0
   2536a:	5659      	ldrsb	r1, [r3, r1]
   2536c:	4b1e      	ldr	r3, [pc, #120]	; (253e8 <socket+0x1fc>)
   2536e:	881b      	ldrh	r3, [r3, #0]
   25370:	b29b      	uxth	r3, r3
   25372:	001a      	movs	r2, r3
   25374:	4b1f      	ldr	r3, [pc, #124]	; (253f4 <socket+0x208>)
   25376:	0018      	movs	r0, r3
   25378:	4b1d      	ldr	r3, [pc, #116]	; (253f0 <socket+0x204>)
   2537a:	4798      	blx	r3
   2537c:	4b1e      	ldr	r3, [pc, #120]	; (253f8 <socket+0x20c>)
   2537e:	0018      	movs	r0, r3
   25380:	4b1b      	ldr	r3, [pc, #108]	; (253f0 <socket+0x204>)
   25382:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   25384:	1d3b      	adds	r3, r7, #4
   25386:	781b      	ldrb	r3, [r3, #0]
   25388:	2201      	movs	r2, #1
   2538a:	4013      	ands	r3, r2
   2538c:	d015      	beq.n	253ba <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   2538e:	230c      	movs	r3, #12
   25390:	18fb      	adds	r3, r7, r3
   25392:	221f      	movs	r2, #31
   25394:	18ba      	adds	r2, r7, r2
   25396:	7812      	ldrb	r2, [r2, #0]
   25398:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   2539a:	69bb      	ldr	r3, [r7, #24]
   2539c:	2221      	movs	r2, #33	; 0x21
   2539e:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   253a0:	230c      	movs	r3, #12
   253a2:	18fa      	adds	r2, r7, r3
   253a4:	2300      	movs	r3, #0
   253a6:	9302      	str	r3, [sp, #8]
   253a8:	2300      	movs	r3, #0
   253aa:	9301      	str	r3, [sp, #4]
   253ac:	2300      	movs	r3, #0
   253ae:	9300      	str	r3, [sp, #0]
   253b0:	2304      	movs	r3, #4
   253b2:	2150      	movs	r1, #80	; 0x50
   253b4:	2002      	movs	r0, #2
   253b6:	4c11      	ldr	r4, [pc, #68]	; (253fc <socket+0x210>)
   253b8:	47a0      	blx	r4
			}
		}
	}
	return sock;
   253ba:	231f      	movs	r3, #31
   253bc:	18fb      	adds	r3, r7, r3
   253be:	781b      	ldrb	r3, [r3, #0]
   253c0:	b25b      	sxtb	r3, r3
}
   253c2:	0018      	movs	r0, r3
   253c4:	46bd      	mov	sp, r7
   253c6:	b009      	add	sp, #36	; 0x24
   253c8:	bd90      	pop	{r4, r7, pc}
   253ca:	46c0      	nop			; (mov r8, r8)
   253cc:	20004135 	.word	0x20004135
   253d0:	20005934 	.word	0x20005934
   253d4:	00032935 	.word	0x00032935
   253d8:	200059a4 	.word	0x200059a4
   253dc:	20004136 	.word	0x20004136
   253e0:	80000003 	.word	0x80000003
   253e4:	0002085d 	.word	0x0002085d
   253e8:	20004132 	.word	0x20004132
   253ec:	00039054 	.word	0x00039054
   253f0:	0001db29 	.word	0x0001db29
   253f4:	00039078 	.word	0x00039078
   253f8:	00039074 	.word	0x00039074
   253fc:	00020abd 	.word	0x00020abd

00025400 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   25400:	b5b0      	push	{r4, r5, r7, lr}
   25402:	b08a      	sub	sp, #40	; 0x28
   25404:	af04      	add	r7, sp, #16
   25406:	6039      	str	r1, [r7, #0]
   25408:	0011      	movs	r1, r2
   2540a:	1dfb      	adds	r3, r7, #7
   2540c:	1c02      	adds	r2, r0, #0
   2540e:	701a      	strb	r2, [r3, #0]
   25410:	1dbb      	adds	r3, r7, #6
   25412:	1c0a      	adds	r2, r1, #0
   25414:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   25416:	2317      	movs	r3, #23
   25418:	18fb      	adds	r3, r7, r3
   2541a:	22fa      	movs	r2, #250	; 0xfa
   2541c:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   2541e:	1dfb      	adds	r3, r7, #7
   25420:	781b      	ldrb	r3, [r3, #0]
   25422:	2b7f      	cmp	r3, #127	; 0x7f
   25424:	d867      	bhi.n	254f6 <connect+0xf6>
   25426:	683b      	ldr	r3, [r7, #0]
   25428:	2b00      	cmp	r3, #0
   2542a:	d064      	beq.n	254f6 <connect+0xf6>
   2542c:	1dfb      	adds	r3, r7, #7
   2542e:	781b      	ldrb	r3, [r3, #0]
   25430:	b25b      	sxtb	r3, r3
   25432:	4a35      	ldr	r2, [pc, #212]	; (25508 <connect+0x108>)
   25434:	011b      	lsls	r3, r3, #4
   25436:	18d3      	adds	r3, r2, r3
   25438:	330a      	adds	r3, #10
   2543a:	781b      	ldrb	r3, [r3, #0]
   2543c:	b2db      	uxtb	r3, r3
   2543e:	2b01      	cmp	r3, #1
   25440:	d159      	bne.n	254f6 <connect+0xf6>
   25442:	1dbb      	adds	r3, r7, #6
   25444:	781b      	ldrb	r3, [r3, #0]
   25446:	2b00      	cmp	r3, #0
   25448:	d055      	beq.n	254f6 <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   2544a:	2316      	movs	r3, #22
   2544c:	18fb      	adds	r3, r7, r3
   2544e:	2244      	movs	r2, #68	; 0x44
   25450:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   25452:	1dfb      	adds	r3, r7, #7
   25454:	781b      	ldrb	r3, [r3, #0]
   25456:	b25b      	sxtb	r3, r3
   25458:	4a2b      	ldr	r2, [pc, #172]	; (25508 <connect+0x108>)
   2545a:	011b      	lsls	r3, r3, #4
   2545c:	18d3      	adds	r3, r2, r3
   2545e:	330b      	adds	r3, #11
   25460:	781b      	ldrb	r3, [r3, #0]
   25462:	b2db      	uxtb	r3, r3
   25464:	001a      	movs	r2, r3
   25466:	2301      	movs	r3, #1
   25468:	4013      	ands	r3, r2
   2546a:	d00f      	beq.n	2548c <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   2546c:	2316      	movs	r3, #22
   2546e:	18fb      	adds	r3, r7, r3
   25470:	224b      	movs	r2, #75	; 0x4b
   25472:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   25474:	1dfb      	adds	r3, r7, #7
   25476:	781b      	ldrb	r3, [r3, #0]
   25478:	b25b      	sxtb	r3, r3
   2547a:	4a23      	ldr	r2, [pc, #140]	; (25508 <connect+0x108>)
   2547c:	011b      	lsls	r3, r3, #4
   2547e:	18d3      	adds	r3, r2, r3
   25480:	330b      	adds	r3, #11
   25482:	781b      	ldrb	r3, [r3, #0]
   25484:	b2da      	uxtb	r2, r3
   25486:	2308      	movs	r3, #8
   25488:	18fb      	adds	r3, r7, r3
   2548a:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   2548c:	2308      	movs	r3, #8
   2548e:	18fb      	adds	r3, r7, r3
   25490:	1dfa      	adds	r2, r7, #7
   25492:	7812      	ldrb	r2, [r2, #0]
   25494:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   25496:	6839      	ldr	r1, [r7, #0]
   25498:	2308      	movs	r3, #8
   2549a:	18fb      	adds	r3, r7, r3
   2549c:	2208      	movs	r2, #8
   2549e:	0018      	movs	r0, r3
   254a0:	4b1a      	ldr	r3, [pc, #104]	; (2550c <connect+0x10c>)
   254a2:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   254a4:	1dfb      	adds	r3, r7, #7
   254a6:	781b      	ldrb	r3, [r3, #0]
   254a8:	b25b      	sxtb	r3, r3
   254aa:	4a17      	ldr	r2, [pc, #92]	; (25508 <connect+0x108>)
   254ac:	011b      	lsls	r3, r3, #4
   254ae:	18d3      	adds	r3, r2, r3
   254b0:	3306      	adds	r3, #6
   254b2:	881b      	ldrh	r3, [r3, #0]
   254b4:	b29a      	uxth	r2, r3
   254b6:	2308      	movs	r3, #8
   254b8:	18fb      	adds	r3, r7, r3
   254ba:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   254bc:	2317      	movs	r3, #23
   254be:	18fc      	adds	r4, r7, r3
   254c0:	2308      	movs	r3, #8
   254c2:	18fa      	adds	r2, r7, r3
   254c4:	2316      	movs	r3, #22
   254c6:	18fb      	adds	r3, r7, r3
   254c8:	7819      	ldrb	r1, [r3, #0]
   254ca:	2300      	movs	r3, #0
   254cc:	9302      	str	r3, [sp, #8]
   254ce:	2300      	movs	r3, #0
   254d0:	9301      	str	r3, [sp, #4]
   254d2:	2300      	movs	r3, #0
   254d4:	9300      	str	r3, [sp, #0]
   254d6:	230c      	movs	r3, #12
   254d8:	2002      	movs	r0, #2
   254da:	4d0d      	ldr	r5, [pc, #52]	; (25510 <connect+0x110>)
   254dc:	47a8      	blx	r5
   254de:	0003      	movs	r3, r0
   254e0:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   254e2:	2317      	movs	r3, #23
   254e4:	18fb      	adds	r3, r7, r3
   254e6:	781b      	ldrb	r3, [r3, #0]
   254e8:	b25b      	sxtb	r3, r3
   254ea:	2b00      	cmp	r3, #0
   254ec:	d003      	beq.n	254f6 <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   254ee:	2317      	movs	r3, #23
   254f0:	18fb      	adds	r3, r7, r3
   254f2:	22f7      	movs	r2, #247	; 0xf7
   254f4:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   254f6:	2317      	movs	r3, #23
   254f8:	18fb      	adds	r3, r7, r3
   254fa:	781b      	ldrb	r3, [r3, #0]
   254fc:	b25b      	sxtb	r3, r3
}
   254fe:	0018      	movs	r0, r3
   25500:	46bd      	mov	sp, r7
   25502:	b006      	add	sp, #24
   25504:	bdb0      	pop	{r4, r5, r7, pc}
   25506:	46c0      	nop			; (mov r8, r8)
   25508:	20005934 	.word	0x20005934
   2550c:	00020821 	.word	0x00020821
   25510:	00020abd 	.word	0x00020abd

00025514 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   25514:	b590      	push	{r4, r7, lr}
   25516:	b08f      	sub	sp, #60	; 0x3c
   25518:	af04      	add	r7, sp, #16
   2551a:	0004      	movs	r4, r0
   2551c:	60b9      	str	r1, [r7, #8]
   2551e:	0010      	movs	r0, r2
   25520:	0019      	movs	r1, r3
   25522:	230f      	movs	r3, #15
   25524:	18fb      	adds	r3, r7, r3
   25526:	1c22      	adds	r2, r4, #0
   25528:	701a      	strb	r2, [r3, #0]
   2552a:	230c      	movs	r3, #12
   2552c:	18fb      	adds	r3, r7, r3
   2552e:	1c02      	adds	r2, r0, #0
   25530:	801a      	strh	r2, [r3, #0]
   25532:	1dbb      	adds	r3, r7, #6
   25534:	1c0a      	adds	r2, r1, #0
   25536:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   25538:	2326      	movs	r3, #38	; 0x26
   2553a:	18fb      	adds	r3, r7, r3
   2553c:	2206      	movs	r2, #6
   2553e:	4252      	negs	r2, r2
   25540:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   25542:	230f      	movs	r3, #15
   25544:	18fb      	adds	r3, r7, r3
   25546:	781b      	ldrb	r3, [r3, #0]
   25548:	2b7f      	cmp	r3, #127	; 0x7f
   2554a:	d900      	bls.n	2554e <send+0x3a>
   2554c:	e087      	b.n	2565e <send+0x14a>
   2554e:	68bb      	ldr	r3, [r7, #8]
   25550:	2b00      	cmp	r3, #0
   25552:	d100      	bne.n	25556 <send+0x42>
   25554:	e083      	b.n	2565e <send+0x14a>
   25556:	230c      	movs	r3, #12
   25558:	18fb      	adds	r3, r7, r3
   2555a:	881a      	ldrh	r2, [r3, #0]
   2555c:	23af      	movs	r3, #175	; 0xaf
   2555e:	00db      	lsls	r3, r3, #3
   25560:	429a      	cmp	r2, r3
   25562:	d900      	bls.n	25566 <send+0x52>
   25564:	e07b      	b.n	2565e <send+0x14a>
   25566:	230f      	movs	r3, #15
   25568:	18fb      	adds	r3, r7, r3
   2556a:	781b      	ldrb	r3, [r3, #0]
   2556c:	b25b      	sxtb	r3, r3
   2556e:	4a40      	ldr	r2, [pc, #256]	; (25670 <send+0x15c>)
   25570:	011b      	lsls	r3, r3, #4
   25572:	18d3      	adds	r3, r2, r3
   25574:	330a      	adds	r3, #10
   25576:	781b      	ldrb	r3, [r3, #0]
   25578:	b2db      	uxtb	r3, r3
   2557a:	2b01      	cmp	r3, #1
   2557c:	d16f      	bne.n	2565e <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   2557e:	2323      	movs	r3, #35	; 0x23
   25580:	18fb      	adds	r3, r7, r3
   25582:	2245      	movs	r2, #69	; 0x45
   25584:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   25586:	2324      	movs	r3, #36	; 0x24
   25588:	18fb      	adds	r3, r7, r3
   2558a:	2250      	movs	r2, #80	; 0x50
   2558c:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   2558e:	2310      	movs	r3, #16
   25590:	18fb      	adds	r3, r7, r3
   25592:	220f      	movs	r2, #15
   25594:	18ba      	adds	r2, r7, r2
   25596:	7812      	ldrb	r2, [r2, #0]
   25598:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   2559a:	2310      	movs	r3, #16
   2559c:	18fb      	adds	r3, r7, r3
   2559e:	220c      	movs	r2, #12
   255a0:	18ba      	adds	r2, r7, r2
   255a2:	8812      	ldrh	r2, [r2, #0]
   255a4:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   255a6:	230f      	movs	r3, #15
   255a8:	18fb      	adds	r3, r7, r3
   255aa:	781b      	ldrb	r3, [r3, #0]
   255ac:	b25b      	sxtb	r3, r3
   255ae:	4a30      	ldr	r2, [pc, #192]	; (25670 <send+0x15c>)
   255b0:	011b      	lsls	r3, r3, #4
   255b2:	18d3      	adds	r3, r2, r3
   255b4:	3306      	adds	r3, #6
   255b6:	881b      	ldrh	r3, [r3, #0]
   255b8:	b29a      	uxth	r2, r3
   255ba:	2310      	movs	r3, #16
   255bc:	18fb      	adds	r3, r7, r3
   255be:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   255c0:	230f      	movs	r3, #15
   255c2:	18fb      	adds	r3, r7, r3
   255c4:	781b      	ldrb	r3, [r3, #0]
   255c6:	b25b      	sxtb	r3, r3
   255c8:	2b06      	cmp	r3, #6
   255ca:	dd03      	ble.n	255d4 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   255cc:	2324      	movs	r3, #36	; 0x24
   255ce:	18fb      	adds	r3, r7, r3
   255d0:	2244      	movs	r2, #68	; 0x44
   255d2:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   255d4:	230f      	movs	r3, #15
   255d6:	18fb      	adds	r3, r7, r3
   255d8:	781b      	ldrb	r3, [r3, #0]
   255da:	b25b      	sxtb	r3, r3
   255dc:	4a24      	ldr	r2, [pc, #144]	; (25670 <send+0x15c>)
   255de:	011b      	lsls	r3, r3, #4
   255e0:	18d3      	adds	r3, r2, r3
   255e2:	330b      	adds	r3, #11
   255e4:	781b      	ldrb	r3, [r3, #0]
   255e6:	b2db      	uxtb	r3, r3
   255e8:	001a      	movs	r2, r3
   255ea:	2301      	movs	r3, #1
   255ec:	4013      	ands	r3, r2
   255ee:	d00f      	beq.n	25610 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   255f0:	2323      	movs	r3, #35	; 0x23
   255f2:	18fb      	adds	r3, r7, r3
   255f4:	224c      	movs	r2, #76	; 0x4c
   255f6:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   255f8:	230f      	movs	r3, #15
   255fa:	18fb      	adds	r3, r7, r3
   255fc:	2200      	movs	r2, #0
   255fe:	569a      	ldrsb	r2, [r3, r2]
   25600:	2324      	movs	r3, #36	; 0x24
   25602:	18fb      	adds	r3, r7, r3
   25604:	491a      	ldr	r1, [pc, #104]	; (25670 <send+0x15c>)
   25606:	0112      	lsls	r2, r2, #4
   25608:	188a      	adds	r2, r1, r2
   2560a:	3208      	adds	r2, #8
   2560c:	8812      	ldrh	r2, [r2, #0]
   2560e:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   25610:	2323      	movs	r3, #35	; 0x23
   25612:	18fb      	adds	r3, r7, r3
   25614:	781b      	ldrb	r3, [r3, #0]
   25616:	2280      	movs	r2, #128	; 0x80
   25618:	4252      	negs	r2, r2
   2561a:	4313      	orrs	r3, r2
   2561c:	b2d9      	uxtb	r1, r3
   2561e:	2310      	movs	r3, #16
   25620:	18fa      	adds	r2, r7, r3
   25622:	2324      	movs	r3, #36	; 0x24
   25624:	18fb      	adds	r3, r7, r3
   25626:	881b      	ldrh	r3, [r3, #0]
   25628:	9302      	str	r3, [sp, #8]
   2562a:	230c      	movs	r3, #12
   2562c:	18fb      	adds	r3, r7, r3
   2562e:	881b      	ldrh	r3, [r3, #0]
   25630:	9301      	str	r3, [sp, #4]
   25632:	68bb      	ldr	r3, [r7, #8]
   25634:	9300      	str	r3, [sp, #0]
   25636:	2310      	movs	r3, #16
   25638:	2002      	movs	r0, #2
   2563a:	4c0e      	ldr	r4, [pc, #56]	; (25674 <send+0x160>)
   2563c:	47a0      	blx	r4
   2563e:	0003      	movs	r3, r0
   25640:	001a      	movs	r2, r3
   25642:	2326      	movs	r3, #38	; 0x26
   25644:	18fb      	adds	r3, r7, r3
   25646:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   25648:	2326      	movs	r3, #38	; 0x26
   2564a:	18fb      	adds	r3, r7, r3
   2564c:	2200      	movs	r2, #0
   2564e:	5e9b      	ldrsh	r3, [r3, r2]
   25650:	2b00      	cmp	r3, #0
   25652:	d004      	beq.n	2565e <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   25654:	2326      	movs	r3, #38	; 0x26
   25656:	18fb      	adds	r3, r7, r3
   25658:	220e      	movs	r2, #14
   2565a:	4252      	negs	r2, r2
   2565c:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   2565e:	2326      	movs	r3, #38	; 0x26
   25660:	18fb      	adds	r3, r7, r3
   25662:	2200      	movs	r2, #0
   25664:	5e9b      	ldrsh	r3, [r3, r2]
}
   25666:	0018      	movs	r0, r3
   25668:	46bd      	mov	sp, r7
   2566a:	b00b      	add	sp, #44	; 0x2c
   2566c:	bd90      	pop	{r4, r7, pc}
   2566e:	46c0      	nop			; (mov r8, r8)
   25670:	20005934 	.word	0x20005934
   25674:	00020abd 	.word	0x00020abd

00025678 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   25678:	b590      	push	{r4, r7, lr}
   2567a:	b08d      	sub	sp, #52	; 0x34
   2567c:	af04      	add	r7, sp, #16
   2567e:	60b9      	str	r1, [r7, #8]
   25680:	0011      	movs	r1, r2
   25682:	607b      	str	r3, [r7, #4]
   25684:	230f      	movs	r3, #15
   25686:	18fb      	adds	r3, r7, r3
   25688:	1c02      	adds	r2, r0, #0
   2568a:	701a      	strb	r2, [r3, #0]
   2568c:	230c      	movs	r3, #12
   2568e:	18fb      	adds	r3, r7, r3
   25690:	1c0a      	adds	r2, r1, #0
   25692:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   25694:	231e      	movs	r3, #30
   25696:	18fb      	adds	r3, r7, r3
   25698:	2206      	movs	r2, #6
   2569a:	4252      	negs	r2, r2
   2569c:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   2569e:	230f      	movs	r3, #15
   256a0:	18fb      	adds	r3, r7, r3
   256a2:	781b      	ldrb	r3, [r3, #0]
   256a4:	2b7f      	cmp	r3, #127	; 0x7f
   256a6:	d900      	bls.n	256aa <recv+0x32>
   256a8:	e099      	b.n	257de <recv+0x166>
   256aa:	68bb      	ldr	r3, [r7, #8]
   256ac:	2b00      	cmp	r3, #0
   256ae:	d100      	bne.n	256b2 <recv+0x3a>
   256b0:	e095      	b.n	257de <recv+0x166>
   256b2:	230c      	movs	r3, #12
   256b4:	18fb      	adds	r3, r7, r3
   256b6:	881b      	ldrh	r3, [r3, #0]
   256b8:	2b00      	cmp	r3, #0
   256ba:	d100      	bne.n	256be <recv+0x46>
   256bc:	e08f      	b.n	257de <recv+0x166>
   256be:	230f      	movs	r3, #15
   256c0:	18fb      	adds	r3, r7, r3
   256c2:	781b      	ldrb	r3, [r3, #0]
   256c4:	b25b      	sxtb	r3, r3
   256c6:	4a4a      	ldr	r2, [pc, #296]	; (257f0 <recv+0x178>)
   256c8:	011b      	lsls	r3, r3, #4
   256ca:	18d3      	adds	r3, r2, r3
   256cc:	330a      	adds	r3, #10
   256ce:	781b      	ldrb	r3, [r3, #0]
   256d0:	b2db      	uxtb	r3, r3
   256d2:	2b01      	cmp	r3, #1
   256d4:	d000      	beq.n	256d8 <recv+0x60>
   256d6:	e082      	b.n	257de <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   256d8:	231e      	movs	r3, #30
   256da:	18fb      	adds	r3, r7, r3
   256dc:	2200      	movs	r2, #0
   256de:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   256e0:	230f      	movs	r3, #15
   256e2:	18fb      	adds	r3, r7, r3
   256e4:	2200      	movs	r2, #0
   256e6:	569a      	ldrsb	r2, [r3, r2]
   256e8:	4b41      	ldr	r3, [pc, #260]	; (257f0 <recv+0x178>)
   256ea:	0112      	lsls	r2, r2, #4
   256ec:	68b9      	ldr	r1, [r7, #8]
   256ee:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   256f0:	230f      	movs	r3, #15
   256f2:	18fb      	adds	r3, r7, r3
   256f4:	781b      	ldrb	r3, [r3, #0]
   256f6:	b25b      	sxtb	r3, r3
   256f8:	4a3d      	ldr	r2, [pc, #244]	; (257f0 <recv+0x178>)
   256fa:	011b      	lsls	r3, r3, #4
   256fc:	18d3      	adds	r3, r2, r3
   256fe:	3304      	adds	r3, #4
   25700:	220c      	movs	r2, #12
   25702:	18ba      	adds	r2, r7, r2
   25704:	8812      	ldrh	r2, [r2, #0]
   25706:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   25708:	230f      	movs	r3, #15
   2570a:	18fb      	adds	r3, r7, r3
   2570c:	781b      	ldrb	r3, [r3, #0]
   2570e:	b25b      	sxtb	r3, r3
   25710:	4a37      	ldr	r2, [pc, #220]	; (257f0 <recv+0x178>)
   25712:	011b      	lsls	r3, r3, #4
   25714:	18d3      	adds	r3, r2, r3
   25716:	330c      	adds	r3, #12
   25718:	781b      	ldrb	r3, [r3, #0]
   2571a:	b2db      	uxtb	r3, r3
   2571c:	2b00      	cmp	r3, #0
   2571e:	d15e      	bne.n	257de <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   25720:	231d      	movs	r3, #29
   25722:	18fb      	adds	r3, r7, r3
   25724:	2246      	movs	r2, #70	; 0x46
   25726:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   25728:	230f      	movs	r3, #15
   2572a:	18fb      	adds	r3, r7, r3
   2572c:	781b      	ldrb	r3, [r3, #0]
   2572e:	b25b      	sxtb	r3, r3
   25730:	4a2f      	ldr	r2, [pc, #188]	; (257f0 <recv+0x178>)
   25732:	011b      	lsls	r3, r3, #4
   25734:	18d3      	adds	r3, r2, r3
   25736:	330c      	adds	r3, #12
   25738:	2201      	movs	r2, #1
   2573a:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   2573c:	230f      	movs	r3, #15
   2573e:	18fb      	adds	r3, r7, r3
   25740:	781b      	ldrb	r3, [r3, #0]
   25742:	b25b      	sxtb	r3, r3
   25744:	4a2a      	ldr	r2, [pc, #168]	; (257f0 <recv+0x178>)
   25746:	011b      	lsls	r3, r3, #4
   25748:	18d3      	adds	r3, r2, r3
   2574a:	330b      	adds	r3, #11
   2574c:	781b      	ldrb	r3, [r3, #0]
   2574e:	b2db      	uxtb	r3, r3
   25750:	001a      	movs	r2, r3
   25752:	2301      	movs	r3, #1
   25754:	4013      	ands	r3, r2
   25756:	d003      	beq.n	25760 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   25758:	231d      	movs	r3, #29
   2575a:	18fb      	adds	r3, r7, r3
   2575c:	224d      	movs	r2, #77	; 0x4d
   2575e:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   25760:	687b      	ldr	r3, [r7, #4]
   25762:	2b00      	cmp	r3, #0
   25764:	d105      	bne.n	25772 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   25766:	2314      	movs	r3, #20
   25768:	18fb      	adds	r3, r7, r3
   2576a:	2201      	movs	r2, #1
   2576c:	4252      	negs	r2, r2
   2576e:	601a      	str	r2, [r3, #0]
   25770:	e003      	b.n	2577a <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   25772:	2314      	movs	r3, #20
   25774:	18fb      	adds	r3, r7, r3
   25776:	687a      	ldr	r2, [r7, #4]
   25778:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   2577a:	2314      	movs	r3, #20
   2577c:	18fb      	adds	r3, r7, r3
   2577e:	220f      	movs	r2, #15
   25780:	18ba      	adds	r2, r7, r2
   25782:	7812      	ldrb	r2, [r2, #0]
   25784:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   25786:	230f      	movs	r3, #15
   25788:	18fb      	adds	r3, r7, r3
   2578a:	781b      	ldrb	r3, [r3, #0]
   2578c:	b25b      	sxtb	r3, r3
   2578e:	4a18      	ldr	r2, [pc, #96]	; (257f0 <recv+0x178>)
   25790:	011b      	lsls	r3, r3, #4
   25792:	18d3      	adds	r3, r2, r3
   25794:	3306      	adds	r3, #6
   25796:	881b      	ldrh	r3, [r3, #0]
   25798:	b29a      	uxth	r2, r3
   2579a:	2314      	movs	r3, #20
   2579c:	18fb      	adds	r3, r7, r3
   2579e:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   257a0:	2314      	movs	r3, #20
   257a2:	18fa      	adds	r2, r7, r3
   257a4:	231d      	movs	r3, #29
   257a6:	18fb      	adds	r3, r7, r3
   257a8:	7819      	ldrb	r1, [r3, #0]
   257aa:	2300      	movs	r3, #0
   257ac:	9302      	str	r3, [sp, #8]
   257ae:	2300      	movs	r3, #0
   257b0:	9301      	str	r3, [sp, #4]
   257b2:	2300      	movs	r3, #0
   257b4:	9300      	str	r3, [sp, #0]
   257b6:	2308      	movs	r3, #8
   257b8:	2002      	movs	r0, #2
   257ba:	4c0e      	ldr	r4, [pc, #56]	; (257f4 <recv+0x17c>)
   257bc:	47a0      	blx	r4
   257be:	0003      	movs	r3, r0
   257c0:	001a      	movs	r2, r3
   257c2:	231e      	movs	r3, #30
   257c4:	18fb      	adds	r3, r7, r3
   257c6:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   257c8:	231e      	movs	r3, #30
   257ca:	18fb      	adds	r3, r7, r3
   257cc:	2200      	movs	r2, #0
   257ce:	5e9b      	ldrsh	r3, [r3, r2]
   257d0:	2b00      	cmp	r3, #0
   257d2:	d004      	beq.n	257de <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   257d4:	231e      	movs	r3, #30
   257d6:	18fb      	adds	r3, r7, r3
   257d8:	220e      	movs	r2, #14
   257da:	4252      	negs	r2, r2
   257dc:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   257de:	231e      	movs	r3, #30
   257e0:	18fb      	adds	r3, r7, r3
   257e2:	2200      	movs	r2, #0
   257e4:	5e9b      	ldrsh	r3, [r3, r2]
}
   257e6:	0018      	movs	r0, r3
   257e8:	46bd      	mov	sp, r7
   257ea:	b009      	add	sp, #36	; 0x24
   257ec:	bd90      	pop	{r4, r7, pc}
   257ee:	46c0      	nop			; (mov r8, r8)
   257f0:	20005934 	.word	0x20005934
   257f4:	00020abd 	.word	0x00020abd

000257f8 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   257f8:	b5b0      	push	{r4, r5, r7, lr}
   257fa:	b088      	sub	sp, #32
   257fc:	af04      	add	r7, sp, #16
   257fe:	0002      	movs	r2, r0
   25800:	1dfb      	adds	r3, r7, #7
   25802:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   25804:	230f      	movs	r3, #15
   25806:	18fb      	adds	r3, r7, r3
   25808:	22fa      	movs	r2, #250	; 0xfa
   2580a:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   2580c:	4b43      	ldr	r3, [pc, #268]	; (2591c <close+0x124>)
   2580e:	0018      	movs	r0, r3
   25810:	4b43      	ldr	r3, [pc, #268]	; (25920 <close+0x128>)
   25812:	4798      	blx	r3
   25814:	1dfb      	adds	r3, r7, #7
   25816:	2200      	movs	r2, #0
   25818:	569a      	ldrsb	r2, [r3, r2]
   2581a:	4b42      	ldr	r3, [pc, #264]	; (25924 <close+0x12c>)
   2581c:	0011      	movs	r1, r2
   2581e:	0018      	movs	r0, r3
   25820:	4b3f      	ldr	r3, [pc, #252]	; (25920 <close+0x128>)
   25822:	4798      	blx	r3
   25824:	4b40      	ldr	r3, [pc, #256]	; (25928 <close+0x130>)
   25826:	0018      	movs	r0, r3
   25828:	4b3d      	ldr	r3, [pc, #244]	; (25920 <close+0x128>)
   2582a:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   2582c:	1dfb      	adds	r3, r7, #7
   2582e:	781b      	ldrb	r3, [r3, #0]
   25830:	2b7f      	cmp	r3, #127	; 0x7f
   25832:	d86a      	bhi.n	2590a <close+0x112>
   25834:	1dfb      	adds	r3, r7, #7
   25836:	781b      	ldrb	r3, [r3, #0]
   25838:	b25b      	sxtb	r3, r3
   2583a:	4a3c      	ldr	r2, [pc, #240]	; (2592c <close+0x134>)
   2583c:	011b      	lsls	r3, r3, #4
   2583e:	18d3      	adds	r3, r2, r3
   25840:	330a      	adds	r3, #10
   25842:	781b      	ldrb	r3, [r3, #0]
   25844:	b2db      	uxtb	r3, r3
   25846:	2b01      	cmp	r3, #1
   25848:	d15f      	bne.n	2590a <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   2584a:	230e      	movs	r3, #14
   2584c:	18fb      	adds	r3, r7, r3
   2584e:	2249      	movs	r2, #73	; 0x49
   25850:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   25852:	2308      	movs	r3, #8
   25854:	18fb      	adds	r3, r7, r3
   25856:	1dfa      	adds	r2, r7, #7
   25858:	7812      	ldrb	r2, [r2, #0]
   2585a:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   2585c:	1dfb      	adds	r3, r7, #7
   2585e:	781b      	ldrb	r3, [r3, #0]
   25860:	b25b      	sxtb	r3, r3
   25862:	4a32      	ldr	r2, [pc, #200]	; (2592c <close+0x134>)
   25864:	011b      	lsls	r3, r3, #4
   25866:	18d3      	adds	r3, r2, r3
   25868:	3306      	adds	r3, #6
   2586a:	881b      	ldrh	r3, [r3, #0]
   2586c:	b29a      	uxth	r2, r3
   2586e:	2308      	movs	r3, #8
   25870:	18fb      	adds	r3, r7, r3
   25872:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   25874:	1dfb      	adds	r3, r7, #7
   25876:	781b      	ldrb	r3, [r3, #0]
   25878:	b25b      	sxtb	r3, r3
   2587a:	4a2c      	ldr	r2, [pc, #176]	; (2592c <close+0x134>)
   2587c:	011b      	lsls	r3, r3, #4
   2587e:	18d3      	adds	r3, r2, r3
   25880:	330a      	adds	r3, #10
   25882:	2200      	movs	r2, #0
   25884:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   25886:	1dfb      	adds	r3, r7, #7
   25888:	781b      	ldrb	r3, [r3, #0]
   2588a:	b25b      	sxtb	r3, r3
   2588c:	4a27      	ldr	r2, [pc, #156]	; (2592c <close+0x134>)
   2588e:	011b      	lsls	r3, r3, #4
   25890:	18d3      	adds	r3, r2, r3
   25892:	3306      	adds	r3, #6
   25894:	2200      	movs	r2, #0
   25896:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25898:	1dfb      	adds	r3, r7, #7
   2589a:	781b      	ldrb	r3, [r3, #0]
   2589c:	b25b      	sxtb	r3, r3
   2589e:	4a23      	ldr	r2, [pc, #140]	; (2592c <close+0x134>)
   258a0:	011b      	lsls	r3, r3, #4
   258a2:	18d3      	adds	r3, r2, r3
   258a4:	330b      	adds	r3, #11
   258a6:	781b      	ldrb	r3, [r3, #0]
   258a8:	b2db      	uxtb	r3, r3
   258aa:	001a      	movs	r2, r3
   258ac:	2301      	movs	r3, #1
   258ae:	4013      	ands	r3, r2
   258b0:	d003      	beq.n	258ba <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   258b2:	230e      	movs	r3, #14
   258b4:	18fb      	adds	r3, r7, r3
   258b6:	224e      	movs	r2, #78	; 0x4e
   258b8:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   258ba:	230f      	movs	r3, #15
   258bc:	18fc      	adds	r4, r7, r3
   258be:	2308      	movs	r3, #8
   258c0:	18fa      	adds	r2, r7, r3
   258c2:	230e      	movs	r3, #14
   258c4:	18fb      	adds	r3, r7, r3
   258c6:	7819      	ldrb	r1, [r3, #0]
   258c8:	2300      	movs	r3, #0
   258ca:	9302      	str	r3, [sp, #8]
   258cc:	2300      	movs	r3, #0
   258ce:	9301      	str	r3, [sp, #4]
   258d0:	2300      	movs	r3, #0
   258d2:	9300      	str	r3, [sp, #0]
   258d4:	2304      	movs	r3, #4
   258d6:	2002      	movs	r0, #2
   258d8:	4d15      	ldr	r5, [pc, #84]	; (25930 <close+0x138>)
   258da:	47a8      	blx	r5
   258dc:	0003      	movs	r3, r0
   258de:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   258e0:	230f      	movs	r3, #15
   258e2:	18fb      	adds	r3, r7, r3
   258e4:	781b      	ldrb	r3, [r3, #0]
   258e6:	b25b      	sxtb	r3, r3
   258e8:	2b00      	cmp	r3, #0
   258ea:	d003      	beq.n	258f4 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   258ec:	230f      	movs	r3, #15
   258ee:	18fb      	adds	r3, r7, r3
   258f0:	22f7      	movs	r2, #247	; 0xf7
   258f2:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   258f4:	1dfb      	adds	r3, r7, #7
   258f6:	781b      	ldrb	r3, [r3, #0]
   258f8:	b25b      	sxtb	r3, r3
   258fa:	011a      	lsls	r2, r3, #4
   258fc:	4b0b      	ldr	r3, [pc, #44]	; (2592c <close+0x134>)
   258fe:	18d3      	adds	r3, r2, r3
   25900:	2210      	movs	r2, #16
   25902:	2100      	movs	r1, #0
   25904:	0018      	movs	r0, r3
   25906:	4b0b      	ldr	r3, [pc, #44]	; (25934 <close+0x13c>)
   25908:	4798      	blx	r3
	}
	return s8Ret;
   2590a:	230f      	movs	r3, #15
   2590c:	18fb      	adds	r3, r7, r3
   2590e:	781b      	ldrb	r3, [r3, #0]
   25910:	b25b      	sxtb	r3, r3
}
   25912:	0018      	movs	r0, r3
   25914:	46bd      	mov	sp, r7
   25916:	b004      	add	sp, #16
   25918:	bdb0      	pop	{r4, r5, r7, pc}
   2591a:	46c0      	nop			; (mov r8, r8)
   2591c:	00039054 	.word	0x00039054
   25920:	0001db29 	.word	0x0001db29
   25924:	00039094 	.word	0x00039094
   25928:	00039074 	.word	0x00039074
   2592c:	20005934 	.word	0x20005934
   25930:	00020abd 	.word	0x00020abd
   25934:	0002085d 	.word	0x0002085d

00025938 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   25938:	b580      	push	{r7, lr}
   2593a:	b086      	sub	sp, #24
   2593c:	af00      	add	r7, sp, #0
   2593e:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   25940:	2300      	movs	r3, #0
   25942:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   25944:	2317      	movs	r3, #23
   25946:	18fb      	adds	r3, r7, r3
   25948:	2200      	movs	r2, #0
   2594a:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   2594c:	2316      	movs	r3, #22
   2594e:	18fb      	adds	r3, r7, r3
   25950:	2200      	movs	r2, #0
   25952:	701a      	strb	r2, [r3, #0]
   25954:	e060      	b.n	25a18 <nmi_inet_addr+0xe0>
	{
		j = 0;
   25956:	2315      	movs	r3, #21
   25958:	18fb      	adds	r3, r7, r3
   2595a:	2200      	movs	r2, #0
   2595c:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   2595e:	2314      	movs	r3, #20
   25960:	18fb      	adds	r3, r7, r3
   25962:	687a      	ldr	r2, [r7, #4]
   25964:	7812      	ldrb	r2, [r2, #0]
   25966:	701a      	strb	r2, [r3, #0]
			++j;
   25968:	2315      	movs	r3, #21
   2596a:	18fb      	adds	r3, r7, r3
   2596c:	2215      	movs	r2, #21
   2596e:	18ba      	adds	r2, r7, r2
   25970:	7812      	ldrb	r2, [r2, #0]
   25972:	3201      	adds	r2, #1
   25974:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   25976:	2315      	movs	r3, #21
   25978:	18fb      	adds	r3, r7, r3
   2597a:	781b      	ldrb	r3, [r3, #0]
   2597c:	2b04      	cmp	r3, #4
   2597e:	d901      	bls.n	25984 <nmi_inet_addr+0x4c>
			{
				return 0;
   25980:	2300      	movs	r3, #0
   25982:	e057      	b.n	25a34 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   25984:	2314      	movs	r3, #20
   25986:	18fb      	adds	r3, r7, r3
   25988:	781b      	ldrb	r3, [r3, #0]
   2598a:	2b2e      	cmp	r3, #46	; 0x2e
   2598c:	d004      	beq.n	25998 <nmi_inet_addr+0x60>
   2598e:	2314      	movs	r3, #20
   25990:	18fb      	adds	r3, r7, r3
   25992:	781b      	ldrb	r3, [r3, #0]
   25994:	2b00      	cmp	r3, #0
   25996:	d10d      	bne.n	259b4 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   25998:	2316      	movs	r3, #22
   2599a:	18fb      	adds	r3, r7, r3
   2599c:	781b      	ldrb	r3, [r3, #0]
   2599e:	220c      	movs	r2, #12
   259a0:	18ba      	adds	r2, r7, r2
   259a2:	2117      	movs	r1, #23
   259a4:	1879      	adds	r1, r7, r1
   259a6:	7809      	ldrb	r1, [r1, #0]
   259a8:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   259aa:	2317      	movs	r3, #23
   259ac:	18fb      	adds	r3, r7, r3
   259ae:	2200      	movs	r2, #0
   259b0:	701a      	strb	r2, [r3, #0]
   259b2:	e01d      	b.n	259f0 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   259b4:	2314      	movs	r3, #20
   259b6:	18fb      	adds	r3, r7, r3
   259b8:	781b      	ldrb	r3, [r3, #0]
   259ba:	2b2f      	cmp	r3, #47	; 0x2f
   259bc:	d916      	bls.n	259ec <nmi_inet_addr+0xb4>
   259be:	2314      	movs	r3, #20
   259c0:	18fb      	adds	r3, r7, r3
   259c2:	781b      	ldrb	r3, [r3, #0]
   259c4:	2b39      	cmp	r3, #57	; 0x39
   259c6:	d811      	bhi.n	259ec <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   259c8:	2317      	movs	r3, #23
   259ca:	18fb      	adds	r3, r7, r3
   259cc:	781b      	ldrb	r3, [r3, #0]
   259ce:	1c1a      	adds	r2, r3, #0
   259d0:	0092      	lsls	r2, r2, #2
   259d2:	18d3      	adds	r3, r2, r3
   259d4:	18db      	adds	r3, r3, r3
   259d6:	b2da      	uxtb	r2, r3
   259d8:	2314      	movs	r3, #20
   259da:	18fb      	adds	r3, r7, r3
   259dc:	781b      	ldrb	r3, [r3, #0]
   259de:	18d3      	adds	r3, r2, r3
   259e0:	b2da      	uxtb	r2, r3
   259e2:	2317      	movs	r3, #23
   259e4:	18fb      	adds	r3, r7, r3
   259e6:	3a30      	subs	r2, #48	; 0x30
   259e8:	701a      	strb	r2, [r3, #0]
   259ea:	e001      	b.n	259f0 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   259ec:	2300      	movs	r3, #0
   259ee:	e021      	b.n	25a34 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   259f0:	687b      	ldr	r3, [r7, #4]
   259f2:	3301      	adds	r3, #1
   259f4:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   259f6:	2314      	movs	r3, #20
   259f8:	18fb      	adds	r3, r7, r3
   259fa:	781b      	ldrb	r3, [r3, #0]
   259fc:	2b2e      	cmp	r3, #46	; 0x2e
   259fe:	d004      	beq.n	25a0a <nmi_inet_addr+0xd2>
   25a00:	2314      	movs	r3, #20
   25a02:	18fb      	adds	r3, r7, r3
   25a04:	781b      	ldrb	r3, [r3, #0]
   25a06:	2b00      	cmp	r3, #0
   25a08:	d1a9      	bne.n	2595e <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   25a0a:	2316      	movs	r3, #22
   25a0c:	18fb      	adds	r3, r7, r3
   25a0e:	2216      	movs	r2, #22
   25a10:	18ba      	adds	r2, r7, r2
   25a12:	7812      	ldrb	r2, [r2, #0]
   25a14:	3201      	adds	r2, #1
   25a16:	701a      	strb	r2, [r3, #0]
   25a18:	2316      	movs	r3, #22
   25a1a:	18fb      	adds	r3, r7, r3
   25a1c:	781b      	ldrb	r3, [r3, #0]
   25a1e:	2b03      	cmp	r3, #3
   25a20:	d999      	bls.n	25956 <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   25a22:	230c      	movs	r3, #12
   25a24:	18f9      	adds	r1, r7, r3
   25a26:	2310      	movs	r3, #16
   25a28:	18fb      	adds	r3, r7, r3
   25a2a:	2204      	movs	r2, #4
   25a2c:	0018      	movs	r0, r3
   25a2e:	4b03      	ldr	r3, [pc, #12]	; (25a3c <nmi_inet_addr+0x104>)
   25a30:	4798      	blx	r3
	return u32IP;
   25a32:	693b      	ldr	r3, [r7, #16]
}
   25a34:	0018      	movs	r0, r3
   25a36:	46bd      	mov	sp, r7
   25a38:	b006      	add	sp, #24
   25a3a:	bd80      	pop	{r7, pc}
   25a3c:	00020821 	.word	0x00020821

00025a40 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   25a40:	b5b0      	push	{r4, r5, r7, lr}
   25a42:	b088      	sub	sp, #32
   25a44:	af04      	add	r7, sp, #16
   25a46:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   25a48:	230f      	movs	r3, #15
   25a4a:	18fb      	adds	r3, r7, r3
   25a4c:	22fa      	movs	r2, #250	; 0xfa
   25a4e:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   25a50:	687b      	ldr	r3, [r7, #4]
   25a52:	0018      	movs	r0, r3
   25a54:	4b14      	ldr	r3, [pc, #80]	; (25aa8 <gethostbyname+0x68>)
   25a56:	4798      	blx	r3
   25a58:	0003      	movs	r3, r0
   25a5a:	001a      	movs	r2, r3
   25a5c:	230e      	movs	r3, #14
   25a5e:	18fb      	adds	r3, r7, r3
   25a60:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   25a62:	230e      	movs	r3, #14
   25a64:	18fb      	adds	r3, r7, r3
   25a66:	781b      	ldrb	r3, [r3, #0]
   25a68:	2b40      	cmp	r3, #64	; 0x40
   25a6a:	d815      	bhi.n	25a98 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   25a6c:	230e      	movs	r3, #14
   25a6e:	18fb      	adds	r3, r7, r3
   25a70:	781b      	ldrb	r3, [r3, #0]
   25a72:	b29b      	uxth	r3, r3
   25a74:	3301      	adds	r3, #1
   25a76:	b299      	uxth	r1, r3
   25a78:	230f      	movs	r3, #15
   25a7a:	18fc      	adds	r4, r7, r3
   25a7c:	687a      	ldr	r2, [r7, #4]
   25a7e:	2300      	movs	r3, #0
   25a80:	9302      	str	r3, [sp, #8]
   25a82:	2300      	movs	r3, #0
   25a84:	9301      	str	r3, [sp, #4]
   25a86:	2300      	movs	r3, #0
   25a88:	9300      	str	r3, [sp, #0]
   25a8a:	000b      	movs	r3, r1
   25a8c:	214a      	movs	r1, #74	; 0x4a
   25a8e:	2002      	movs	r0, #2
   25a90:	4d06      	ldr	r5, [pc, #24]	; (25aac <gethostbyname+0x6c>)
   25a92:	47a8      	blx	r5
   25a94:	0003      	movs	r3, r0
   25a96:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   25a98:	230f      	movs	r3, #15
   25a9a:	18fb      	adds	r3, r7, r3
   25a9c:	781b      	ldrb	r3, [r3, #0]
   25a9e:	b25b      	sxtb	r3, r3
}
   25aa0:	0018      	movs	r0, r3
   25aa2:	46bd      	mov	sp, r7
   25aa4:	b004      	add	sp, #16
   25aa6:	bdb0      	pop	{r4, r5, r7, pc}
   25aa8:	0002089b 	.word	0x0002089b
   25aac:	00020abd 	.word	0x00020abd

00025ab0 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   25ab0:	b580      	push	{r7, lr}
   25ab2:	b082      	sub	sp, #8
   25ab4:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   25ab6:	003b      	movs	r3, r7
   25ab8:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   25aba:	687b      	ldr	r3, [r7, #4]
   25abc:	22b9      	movs	r2, #185	; 0xb9
   25abe:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   25ac0:	4b13      	ldr	r3, [pc, #76]	; (25b10 <spi_flash_enter_low_power_mode+0x60>)
   25ac2:	2100      	movs	r1, #0
   25ac4:	0018      	movs	r0, r3
   25ac6:	4b13      	ldr	r3, [pc, #76]	; (25b14 <spi_flash_enter_low_power_mode+0x64>)
   25ac8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   25aca:	687b      	ldr	r3, [r7, #4]
   25acc:	781b      	ldrb	r3, [r3, #0]
   25ace:	001a      	movs	r2, r3
   25ad0:	4b11      	ldr	r3, [pc, #68]	; (25b18 <spi_flash_enter_low_power_mode+0x68>)
   25ad2:	0011      	movs	r1, r2
   25ad4:	0018      	movs	r0, r3
   25ad6:	4b0f      	ldr	r3, [pc, #60]	; (25b14 <spi_flash_enter_low_power_mode+0x64>)
   25ad8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   25ada:	4b10      	ldr	r3, [pc, #64]	; (25b1c <spi_flash_enter_low_power_mode+0x6c>)
   25adc:	2101      	movs	r1, #1
   25ade:	0018      	movs	r0, r3
   25ae0:	4b0c      	ldr	r3, [pc, #48]	; (25b14 <spi_flash_enter_low_power_mode+0x64>)
   25ae2:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   25ae4:	4b0e      	ldr	r3, [pc, #56]	; (25b20 <spi_flash_enter_low_power_mode+0x70>)
   25ae6:	2100      	movs	r1, #0
   25ae8:	0018      	movs	r0, r3
   25aea:	4b0a      	ldr	r3, [pc, #40]	; (25b14 <spi_flash_enter_low_power_mode+0x64>)
   25aec:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   25aee:	4b0d      	ldr	r3, [pc, #52]	; (25b24 <spi_flash_enter_low_power_mode+0x74>)
   25af0:	2181      	movs	r1, #129	; 0x81
   25af2:	0018      	movs	r0, r3
   25af4:	4b07      	ldr	r3, [pc, #28]	; (25b14 <spi_flash_enter_low_power_mode+0x64>)
   25af6:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   25af8:	46c0      	nop			; (mov r8, r8)
   25afa:	4b0b      	ldr	r3, [pc, #44]	; (25b28 <spi_flash_enter_low_power_mode+0x78>)
   25afc:	0018      	movs	r0, r3
   25afe:	4b0b      	ldr	r3, [pc, #44]	; (25b2c <spi_flash_enter_low_power_mode+0x7c>)
   25b00:	4798      	blx	r3
   25b02:	0003      	movs	r3, r0
   25b04:	2b01      	cmp	r3, #1
   25b06:	d1f8      	bne.n	25afa <spi_flash_enter_low_power_mode+0x4a>
}
   25b08:	46c0      	nop			; (mov r8, r8)
   25b0a:	46bd      	mov	sp, r7
   25b0c:	b002      	add	sp, #8
   25b0e:	bd80      	pop	{r7, pc}
   25b10:	00010208 	.word	0x00010208
   25b14:	00022911 	.word	0x00022911
   25b18:	0001020c 	.word	0x0001020c
   25b1c:	00010214 	.word	0x00010214
   25b20:	0001021c 	.word	0x0001021c
   25b24:	00010204 	.word	0x00010204
   25b28:	00010218 	.word	0x00010218
   25b2c:	000228cd 	.word	0x000228cd

00025b30 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   25b30:	b580      	push	{r7, lr}
   25b32:	b082      	sub	sp, #8
   25b34:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   25b36:	003b      	movs	r3, r7
   25b38:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   25b3a:	687b      	ldr	r3, [r7, #4]
   25b3c:	22ab      	movs	r2, #171	; 0xab
   25b3e:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   25b40:	4b13      	ldr	r3, [pc, #76]	; (25b90 <spi_flash_leave_low_power_mode+0x60>)
   25b42:	2100      	movs	r1, #0
   25b44:	0018      	movs	r0, r3
   25b46:	4b13      	ldr	r3, [pc, #76]	; (25b94 <spi_flash_leave_low_power_mode+0x64>)
   25b48:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   25b4a:	687b      	ldr	r3, [r7, #4]
   25b4c:	781b      	ldrb	r3, [r3, #0]
   25b4e:	001a      	movs	r2, r3
   25b50:	4b11      	ldr	r3, [pc, #68]	; (25b98 <spi_flash_leave_low_power_mode+0x68>)
   25b52:	0011      	movs	r1, r2
   25b54:	0018      	movs	r0, r3
   25b56:	4b0f      	ldr	r3, [pc, #60]	; (25b94 <spi_flash_leave_low_power_mode+0x64>)
   25b58:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   25b5a:	4b10      	ldr	r3, [pc, #64]	; (25b9c <spi_flash_leave_low_power_mode+0x6c>)
   25b5c:	2101      	movs	r1, #1
   25b5e:	0018      	movs	r0, r3
   25b60:	4b0c      	ldr	r3, [pc, #48]	; (25b94 <spi_flash_leave_low_power_mode+0x64>)
   25b62:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   25b64:	4b0e      	ldr	r3, [pc, #56]	; (25ba0 <spi_flash_leave_low_power_mode+0x70>)
   25b66:	2100      	movs	r1, #0
   25b68:	0018      	movs	r0, r3
   25b6a:	4b0a      	ldr	r3, [pc, #40]	; (25b94 <spi_flash_leave_low_power_mode+0x64>)
   25b6c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   25b6e:	4b0d      	ldr	r3, [pc, #52]	; (25ba4 <spi_flash_leave_low_power_mode+0x74>)
   25b70:	2181      	movs	r1, #129	; 0x81
   25b72:	0018      	movs	r0, r3
   25b74:	4b07      	ldr	r3, [pc, #28]	; (25b94 <spi_flash_leave_low_power_mode+0x64>)
   25b76:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   25b78:	46c0      	nop			; (mov r8, r8)
   25b7a:	4b0b      	ldr	r3, [pc, #44]	; (25ba8 <spi_flash_leave_low_power_mode+0x78>)
   25b7c:	0018      	movs	r0, r3
   25b7e:	4b0b      	ldr	r3, [pc, #44]	; (25bac <spi_flash_leave_low_power_mode+0x7c>)
   25b80:	4798      	blx	r3
   25b82:	0003      	movs	r3, r0
   25b84:	2b01      	cmp	r3, #1
   25b86:	d1f8      	bne.n	25b7a <spi_flash_leave_low_power_mode+0x4a>
}
   25b88:	46c0      	nop			; (mov r8, r8)
   25b8a:	46bd      	mov	sp, r7
   25b8c:	b002      	add	sp, #8
   25b8e:	bd80      	pop	{r7, pc}
   25b90:	00010208 	.word	0x00010208
   25b94:	00022911 	.word	0x00022911
   25b98:	0001020c 	.word	0x0001020c
   25b9c:	00010214 	.word	0x00010214
   25ba0:	0001021c 	.word	0x0001021c
   25ba4:	00010204 	.word	0x00010204
   25ba8:	00010218 	.word	0x00010218
   25bac:	000228cd 	.word	0x000228cd

00025bb0 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   25bb0:	b590      	push	{r4, r7, lr}
   25bb2:	b085      	sub	sp, #20
   25bb4:	af00      	add	r7, sp, #0
   25bb6:	0002      	movs	r2, r0
   25bb8:	1dfb      	adds	r3, r7, #7
   25bba:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   25bbc:	230f      	movs	r3, #15
   25bbe:	18fb      	adds	r3, r7, r3
   25bc0:	2200      	movs	r2, #0
   25bc2:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   25bc4:	4b24      	ldr	r3, [pc, #144]	; (25c58 <spi_flash_enable+0xa8>)
   25bc6:	4798      	blx	r3
   25bc8:	0003      	movs	r3, r0
   25bca:	051b      	lsls	r3, r3, #20
   25bcc:	0d1b      	lsrs	r3, r3, #20
   25bce:	4a23      	ldr	r2, [pc, #140]	; (25c5c <spi_flash_enable+0xac>)
   25bd0:	4293      	cmp	r3, r2
   25bd2:	d938      	bls.n	25c46 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   25bd4:	230f      	movs	r3, #15
   25bd6:	18fc      	adds	r4, r7, r3
   25bd8:	2308      	movs	r3, #8
   25bda:	18fb      	adds	r3, r7, r3
   25bdc:	4a20      	ldr	r2, [pc, #128]	; (25c60 <spi_flash_enable+0xb0>)
   25bde:	0019      	movs	r1, r3
   25be0:	0010      	movs	r0, r2
   25be2:	4b20      	ldr	r3, [pc, #128]	; (25c64 <spi_flash_enable+0xb4>)
   25be4:	4798      	blx	r3
   25be6:	0003      	movs	r3, r0
   25be8:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   25bea:	230f      	movs	r3, #15
   25bec:	18fb      	adds	r3, r7, r3
   25bee:	781b      	ldrb	r3, [r3, #0]
   25bf0:	b25b      	sxtb	r3, r3
   25bf2:	2b00      	cmp	r3, #0
   25bf4:	d126      	bne.n	25c44 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   25bf6:	68bb      	ldr	r3, [r7, #8]
   25bf8:	4a1b      	ldr	r2, [pc, #108]	; (25c68 <spi_flash_enable+0xb8>)
   25bfa:	4013      	ands	r3, r2
   25bfc:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   25bfe:	68bb      	ldr	r3, [r7, #8]
   25c00:	4a1a      	ldr	r2, [pc, #104]	; (25c6c <spi_flash_enable+0xbc>)
   25c02:	4313      	orrs	r3, r2
   25c04:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   25c06:	68bb      	ldr	r3, [r7, #8]
   25c08:	4a15      	ldr	r2, [pc, #84]	; (25c60 <spi_flash_enable+0xb0>)
   25c0a:	0019      	movs	r1, r3
   25c0c:	0010      	movs	r0, r2
   25c0e:	4b18      	ldr	r3, [pc, #96]	; (25c70 <spi_flash_enable+0xc0>)
   25c10:	4798      	blx	r3
		if(enable) {
   25c12:	1dfb      	adds	r3, r7, #7
   25c14:	781b      	ldrb	r3, [r3, #0]
   25c16:	2b00      	cmp	r3, #0
   25c18:	d002      	beq.n	25c20 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   25c1a:	4b16      	ldr	r3, [pc, #88]	; (25c74 <spi_flash_enable+0xc4>)
   25c1c:	4798      	blx	r3
   25c1e:	e001      	b.n	25c24 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   25c20:	4b15      	ldr	r3, [pc, #84]	; (25c78 <spi_flash_enable+0xc8>)
   25c22:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   25c24:	68bb      	ldr	r3, [r7, #8]
   25c26:	4a10      	ldr	r2, [pc, #64]	; (25c68 <spi_flash_enable+0xb8>)
   25c28:	4013      	ands	r3, r2
   25c2a:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   25c2c:	68bb      	ldr	r3, [r7, #8]
   25c2e:	2280      	movs	r2, #128	; 0x80
   25c30:	0252      	lsls	r2, r2, #9
   25c32:	4313      	orrs	r3, r2
   25c34:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   25c36:	68bb      	ldr	r3, [r7, #8]
   25c38:	4a09      	ldr	r2, [pc, #36]	; (25c60 <spi_flash_enable+0xb0>)
   25c3a:	0019      	movs	r1, r3
   25c3c:	0010      	movs	r0, r2
   25c3e:	4b0c      	ldr	r3, [pc, #48]	; (25c70 <spi_flash_enable+0xc0>)
   25c40:	4798      	blx	r3
   25c42:	e000      	b.n	25c46 <spi_flash_enable+0x96>
			goto ERR1;
   25c44:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   25c46:	230f      	movs	r3, #15
   25c48:	18fb      	adds	r3, r7, r3
   25c4a:	781b      	ldrb	r3, [r3, #0]
   25c4c:	b25b      	sxtb	r3, r3
}
   25c4e:	0018      	movs	r0, r3
   25c50:	46bd      	mov	sp, r7
   25c52:	b005      	add	sp, #20
   25c54:	bd90      	pop	{r4, r7, pc}
   25c56:	46c0      	nop			; (mov r8, r8)
   25c58:	000221ed 	.word	0x000221ed
   25c5c:	0000039f 	.word	0x0000039f
   25c60:	00001410 	.word	0x00001410
   25c64:	000228ed 	.word	0x000228ed
   25c68:	f8888fff 	.word	0xf8888fff
   25c6c:	01111000 	.word	0x01111000
   25c70:	00022911 	.word	0x00022911
   25c74:	00025b31 	.word	0x00025b31
   25c78:	00025ab1 	.word	0x00025ab1

00025c7c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   25c7c:	b580      	push	{r7, lr}
   25c7e:	b084      	sub	sp, #16
   25c80:	af00      	add	r7, sp, #0
   25c82:	0002      	movs	r2, r0
   25c84:	1dfb      	adds	r3, r7, #7
   25c86:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   25c88:	1dfb      	adds	r3, r7, #7
   25c8a:	781b      	ldrb	r3, [r3, #0]
   25c8c:	2b00      	cmp	r3, #0
   25c8e:	d108      	bne.n	25ca2 <mem_test_unit_ready+0x26>
   25c90:	1dfb      	adds	r3, r7, #7
   25c92:	781a      	ldrb	r2, [r3, #0]
   25c94:	4b08      	ldr	r3, [pc, #32]	; (25cb8 <mem_test_unit_ready+0x3c>)
   25c96:	0152      	lsls	r2, r2, #5
   25c98:	58d3      	ldr	r3, [r2, r3]
   25c9a:	4798      	blx	r3
   25c9c:	0003      	movs	r3, r0
   25c9e:	001a      	movs	r2, r3
   25ca0:	e000      	b.n	25ca4 <mem_test_unit_ready+0x28>
   25ca2:	2201      	movs	r2, #1
  status =
   25ca4:	230f      	movs	r3, #15
   25ca6:	18fb      	adds	r3, r7, r3
   25ca8:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   25caa:	230f      	movs	r3, #15
   25cac:	18fb      	adds	r3, r7, r3
   25cae:	781b      	ldrb	r3, [r3, #0]
}
   25cb0:	0018      	movs	r0, r3
   25cb2:	46bd      	mov	sp, r7
   25cb4:	b004      	add	sp, #16
   25cb6:	bd80      	pop	{r7, pc}
   25cb8:	00039120 	.word	0x00039120

00025cbc <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   25cbc:	b580      	push	{r7, lr}
   25cbe:	b084      	sub	sp, #16
   25cc0:	af00      	add	r7, sp, #0
   25cc2:	0002      	movs	r2, r0
   25cc4:	6039      	str	r1, [r7, #0]
   25cc6:	1dfb      	adds	r3, r7, #7
   25cc8:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   25cca:	1dfb      	adds	r3, r7, #7
   25ccc:	781b      	ldrb	r3, [r3, #0]
   25cce:	2b00      	cmp	r3, #0
   25cd0:	d10c      	bne.n	25cec <mem_read_capacity+0x30>
   25cd2:	1dfb      	adds	r3, r7, #7
   25cd4:	781b      	ldrb	r3, [r3, #0]
   25cd6:	4a0b      	ldr	r2, [pc, #44]	; (25d04 <mem_read_capacity+0x48>)
   25cd8:	015b      	lsls	r3, r3, #5
   25cda:	18d3      	adds	r3, r2, r3
   25cdc:	3304      	adds	r3, #4
   25cde:	681b      	ldr	r3, [r3, #0]
   25ce0:	683a      	ldr	r2, [r7, #0]
   25ce2:	0010      	movs	r0, r2
   25ce4:	4798      	blx	r3
   25ce6:	0003      	movs	r3, r0
   25ce8:	001a      	movs	r2, r3
   25cea:	e000      	b.n	25cee <mem_read_capacity+0x32>
   25cec:	2201      	movs	r2, #1
  status =
   25cee:	230f      	movs	r3, #15
   25cf0:	18fb      	adds	r3, r7, r3
   25cf2:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   25cf4:	230f      	movs	r3, #15
   25cf6:	18fb      	adds	r3, r7, r3
   25cf8:	781b      	ldrb	r3, [r3, #0]
}
   25cfa:	0018      	movs	r0, r3
   25cfc:	46bd      	mov	sp, r7
   25cfe:	b004      	add	sp, #16
   25d00:	bd80      	pop	{r7, pc}
   25d02:	46c0      	nop			; (mov r8, r8)
   25d04:	00039120 	.word	0x00039120

00025d08 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   25d08:	b580      	push	{r7, lr}
   25d0a:	b084      	sub	sp, #16
   25d0c:	af00      	add	r7, sp, #0
   25d0e:	0002      	movs	r2, r0
   25d10:	1dfb      	adds	r3, r7, #7
   25d12:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   25d14:	1dfb      	adds	r3, r7, #7
   25d16:	781b      	ldrb	r3, [r3, #0]
   25d18:	425a      	negs	r2, r3
   25d1a:	4153      	adcs	r3, r2
   25d1c:	b2da      	uxtb	r2, r3
  sector_size =
   25d1e:	230f      	movs	r3, #15
   25d20:	18fb      	adds	r3, r7, r3
   25d22:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   25d24:	230f      	movs	r3, #15
   25d26:	18fb      	adds	r3, r7, r3
   25d28:	781b      	ldrb	r3, [r3, #0]
}
   25d2a:	0018      	movs	r0, r3
   25d2c:	46bd      	mov	sp, r7
   25d2e:	b004      	add	sp, #16
   25d30:	bd80      	pop	{r7, pc}
	...

00025d34 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   25d34:	b580      	push	{r7, lr}
   25d36:	b084      	sub	sp, #16
   25d38:	af00      	add	r7, sp, #0
   25d3a:	0002      	movs	r2, r0
   25d3c:	1dfb      	adds	r3, r7, #7
   25d3e:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   25d40:	1dfb      	adds	r3, r7, #7
   25d42:	781b      	ldrb	r3, [r3, #0]
   25d44:	2b00      	cmp	r3, #0
   25d46:	d109      	bne.n	25d5c <mem_wr_protect+0x28>
   25d48:	1dfb      	adds	r3, r7, #7
   25d4a:	781b      	ldrb	r3, [r3, #0]
   25d4c:	4a0a      	ldr	r2, [pc, #40]	; (25d78 <mem_wr_protect+0x44>)
   25d4e:	015b      	lsls	r3, r3, #5
   25d50:	18d3      	adds	r3, r2, r3
   25d52:	330c      	adds	r3, #12
   25d54:	681b      	ldr	r3, [r3, #0]
   25d56:	4798      	blx	r3
   25d58:	1e03      	subs	r3, r0, #0
   25d5a:	d001      	beq.n	25d60 <mem_wr_protect+0x2c>
   25d5c:	2201      	movs	r2, #1
   25d5e:	e000      	b.n	25d62 <mem_wr_protect+0x2e>
   25d60:	2200      	movs	r2, #0
  wr_protect =
   25d62:	230f      	movs	r3, #15
   25d64:	18fb      	adds	r3, r7, r3
   25d66:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   25d68:	230f      	movs	r3, #15
   25d6a:	18fb      	adds	r3, r7, r3
   25d6c:	781b      	ldrb	r3, [r3, #0]
}
   25d6e:	0018      	movs	r0, r3
   25d70:	46bd      	mov	sp, r7
   25d72:	b004      	add	sp, #16
   25d74:	bd80      	pop	{r7, pc}
   25d76:	46c0      	nop			; (mov r8, r8)
   25d78:	00039120 	.word	0x00039120

00025d7c <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   25d7c:	b580      	push	{r7, lr}
   25d7e:	b086      	sub	sp, #24
   25d80:	af00      	add	r7, sp, #0
   25d82:	60b9      	str	r1, [r7, #8]
   25d84:	607a      	str	r2, [r7, #4]
   25d86:	230f      	movs	r3, #15
   25d88:	18fb      	adds	r3, r7, r3
   25d8a:	1c02      	adds	r2, r0, #0
   25d8c:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   25d8e:	230f      	movs	r3, #15
   25d90:	18fb      	adds	r3, r7, r3
   25d92:	781b      	ldrb	r3, [r3, #0]
   25d94:	2b00      	cmp	r3, #0
   25d96:	d10e      	bne.n	25db6 <memory_2_ram+0x3a>
   25d98:	230f      	movs	r3, #15
   25d9a:	18fb      	adds	r3, r7, r3
   25d9c:	781b      	ldrb	r3, [r3, #0]
   25d9e:	4a0b      	ldr	r2, [pc, #44]	; (25dcc <memory_2_ram+0x50>)
   25da0:	015b      	lsls	r3, r3, #5
   25da2:	18d3      	adds	r3, r2, r3
   25da4:	3314      	adds	r3, #20
   25da6:	681b      	ldr	r3, [r3, #0]
   25da8:	6879      	ldr	r1, [r7, #4]
   25daa:	68ba      	ldr	r2, [r7, #8]
   25dac:	0010      	movs	r0, r2
   25dae:	4798      	blx	r3
   25db0:	0003      	movs	r3, r0
   25db2:	001a      	movs	r2, r3
   25db4:	e000      	b.n	25db8 <memory_2_ram+0x3c>
   25db6:	2201      	movs	r2, #1
  status =
   25db8:	2317      	movs	r3, #23
   25dba:	18fb      	adds	r3, r7, r3
   25dbc:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   25dbe:	2317      	movs	r3, #23
   25dc0:	18fb      	adds	r3, r7, r3
   25dc2:	781b      	ldrb	r3, [r3, #0]
}
   25dc4:	0018      	movs	r0, r3
   25dc6:	46bd      	mov	sp, r7
   25dc8:	b006      	add	sp, #24
   25dca:	bd80      	pop	{r7, pc}
   25dcc:	00039120 	.word	0x00039120

00025dd0 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   25dd0:	b580      	push	{r7, lr}
   25dd2:	b086      	sub	sp, #24
   25dd4:	af00      	add	r7, sp, #0
   25dd6:	60b9      	str	r1, [r7, #8]
   25dd8:	607a      	str	r2, [r7, #4]
   25dda:	230f      	movs	r3, #15
   25ddc:	18fb      	adds	r3, r7, r3
   25dde:	1c02      	adds	r2, r0, #0
   25de0:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   25de2:	230f      	movs	r3, #15
   25de4:	18fb      	adds	r3, r7, r3
   25de6:	781b      	ldrb	r3, [r3, #0]
   25de8:	2b00      	cmp	r3, #0
   25dea:	d10e      	bne.n	25e0a <ram_2_memory+0x3a>
   25dec:	230f      	movs	r3, #15
   25dee:	18fb      	adds	r3, r7, r3
   25df0:	781b      	ldrb	r3, [r3, #0]
   25df2:	4a0b      	ldr	r2, [pc, #44]	; (25e20 <ram_2_memory+0x50>)
   25df4:	015b      	lsls	r3, r3, #5
   25df6:	18d3      	adds	r3, r2, r3
   25df8:	3318      	adds	r3, #24
   25dfa:	681b      	ldr	r3, [r3, #0]
   25dfc:	6879      	ldr	r1, [r7, #4]
   25dfe:	68ba      	ldr	r2, [r7, #8]
   25e00:	0010      	movs	r0, r2
   25e02:	4798      	blx	r3
   25e04:	0003      	movs	r3, r0
   25e06:	001a      	movs	r2, r3
   25e08:	e000      	b.n	25e0c <ram_2_memory+0x3c>
   25e0a:	2201      	movs	r2, #1
  status =
   25e0c:	2317      	movs	r3, #23
   25e0e:	18fb      	adds	r3, r7, r3
   25e10:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   25e12:	2317      	movs	r3, #23
   25e14:	18fb      	adds	r3, r7, r3
   25e16:	781b      	ldrb	r3, [r3, #0]
}
   25e18:	0018      	movs	r0, r3
   25e1a:	46bd      	mov	sp, r7
   25e1c:	b006      	add	sp, #24
   25e1e:	bd80      	pop	{r7, pc}
   25e20:	00039120 	.word	0x00039120

00025e24 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   25e24:	b580      	push	{r7, lr}
   25e26:	b082      	sub	sp, #8
   25e28:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   25e2a:	4b10      	ldr	r3, [pc, #64]	; (25e6c <cpu_irq_enter_critical+0x48>)
   25e2c:	681b      	ldr	r3, [r3, #0]
   25e2e:	2b00      	cmp	r3, #0
   25e30:	d112      	bne.n	25e58 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   25e32:	f3ef 8310 	mrs	r3, PRIMASK
   25e36:	607b      	str	r3, [r7, #4]
  return(result);
   25e38:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   25e3a:	2b00      	cmp	r3, #0
   25e3c:	d109      	bne.n	25e52 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   25e3e:	b672      	cpsid	i
   25e40:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   25e44:	4b0a      	ldr	r3, [pc, #40]	; (25e70 <cpu_irq_enter_critical+0x4c>)
   25e46:	2200      	movs	r2, #0
   25e48:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   25e4a:	4b0a      	ldr	r3, [pc, #40]	; (25e74 <cpu_irq_enter_critical+0x50>)
   25e4c:	2201      	movs	r2, #1
   25e4e:	701a      	strb	r2, [r3, #0]
   25e50:	e002      	b.n	25e58 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   25e52:	4b08      	ldr	r3, [pc, #32]	; (25e74 <cpu_irq_enter_critical+0x50>)
   25e54:	2200      	movs	r2, #0
   25e56:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   25e58:	4b04      	ldr	r3, [pc, #16]	; (25e6c <cpu_irq_enter_critical+0x48>)
   25e5a:	681b      	ldr	r3, [r3, #0]
   25e5c:	1c5a      	adds	r2, r3, #1
   25e5e:	4b03      	ldr	r3, [pc, #12]	; (25e6c <cpu_irq_enter_critical+0x48>)
   25e60:	601a      	str	r2, [r3, #0]
}
   25e62:	46c0      	nop			; (mov r8, r8)
   25e64:	46bd      	mov	sp, r7
   25e66:	b002      	add	sp, #8
   25e68:	bd80      	pop	{r7, pc}
   25e6a:	46c0      	nop			; (mov r8, r8)
   25e6c:	20004138 	.word	0x20004138
   25e70:	2000011a 	.word	0x2000011a
   25e74:	2000413c 	.word	0x2000413c

00025e78 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   25e78:	b580      	push	{r7, lr}
   25e7a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   25e7c:	4b0b      	ldr	r3, [pc, #44]	; (25eac <cpu_irq_leave_critical+0x34>)
   25e7e:	681b      	ldr	r3, [r3, #0]
   25e80:	1e5a      	subs	r2, r3, #1
   25e82:	4b0a      	ldr	r3, [pc, #40]	; (25eac <cpu_irq_leave_critical+0x34>)
   25e84:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   25e86:	4b09      	ldr	r3, [pc, #36]	; (25eac <cpu_irq_leave_critical+0x34>)
   25e88:	681b      	ldr	r3, [r3, #0]
   25e8a:	2b00      	cmp	r3, #0
   25e8c:	d10a      	bne.n	25ea4 <cpu_irq_leave_critical+0x2c>
   25e8e:	4b08      	ldr	r3, [pc, #32]	; (25eb0 <cpu_irq_leave_critical+0x38>)
   25e90:	781b      	ldrb	r3, [r3, #0]
   25e92:	b2db      	uxtb	r3, r3
   25e94:	2b00      	cmp	r3, #0
   25e96:	d005      	beq.n	25ea4 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   25e98:	4b06      	ldr	r3, [pc, #24]	; (25eb4 <cpu_irq_leave_critical+0x3c>)
   25e9a:	2201      	movs	r2, #1
   25e9c:	701a      	strb	r2, [r3, #0]
   25e9e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   25ea2:	b662      	cpsie	i
	}
}
   25ea4:	46c0      	nop			; (mov r8, r8)
   25ea6:	46bd      	mov	sp, r7
   25ea8:	bd80      	pop	{r7, pc}
   25eaa:	46c0      	nop			; (mov r8, r8)
   25eac:	20004138 	.word	0x20004138
   25eb0:	2000413c 	.word	0x2000413c
   25eb4:	2000011a 	.word	0x2000011a

00025eb8 <system_pinmux_get_group_from_gpio_pin>:
{
   25eb8:	b580      	push	{r7, lr}
   25eba:	b084      	sub	sp, #16
   25ebc:	af00      	add	r7, sp, #0
   25ebe:	0002      	movs	r2, r0
   25ec0:	1dfb      	adds	r3, r7, #7
   25ec2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   25ec4:	230f      	movs	r3, #15
   25ec6:	18fb      	adds	r3, r7, r3
   25ec8:	1dfa      	adds	r2, r7, #7
   25eca:	7812      	ldrb	r2, [r2, #0]
   25ecc:	09d2      	lsrs	r2, r2, #7
   25ece:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   25ed0:	230e      	movs	r3, #14
   25ed2:	18fb      	adds	r3, r7, r3
   25ed4:	1dfa      	adds	r2, r7, #7
   25ed6:	7812      	ldrb	r2, [r2, #0]
   25ed8:	0952      	lsrs	r2, r2, #5
   25eda:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   25edc:	4b0d      	ldr	r3, [pc, #52]	; (25f14 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   25ede:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   25ee0:	230f      	movs	r3, #15
   25ee2:	18fb      	adds	r3, r7, r3
   25ee4:	781b      	ldrb	r3, [r3, #0]
   25ee6:	2b00      	cmp	r3, #0
   25ee8:	d10f      	bne.n	25f0a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   25eea:	230f      	movs	r3, #15
   25eec:	18fb      	adds	r3, r7, r3
   25eee:	781b      	ldrb	r3, [r3, #0]
   25ef0:	009b      	lsls	r3, r3, #2
   25ef2:	2210      	movs	r2, #16
   25ef4:	4694      	mov	ip, r2
   25ef6:	44bc      	add	ip, r7
   25ef8:	4463      	add	r3, ip
   25efa:	3b08      	subs	r3, #8
   25efc:	681a      	ldr	r2, [r3, #0]
   25efe:	230e      	movs	r3, #14
   25f00:	18fb      	adds	r3, r7, r3
   25f02:	781b      	ldrb	r3, [r3, #0]
   25f04:	01db      	lsls	r3, r3, #7
   25f06:	18d3      	adds	r3, r2, r3
   25f08:	e000      	b.n	25f0c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   25f0a:	2300      	movs	r3, #0
}
   25f0c:	0018      	movs	r0, r3
   25f0e:	46bd      	mov	sp, r7
   25f10:	b004      	add	sp, #16
   25f12:	bd80      	pop	{r7, pc}
   25f14:	41004400 	.word	0x41004400

00025f18 <port_get_group_from_gpio_pin>:
{
   25f18:	b580      	push	{r7, lr}
   25f1a:	b082      	sub	sp, #8
   25f1c:	af00      	add	r7, sp, #0
   25f1e:	0002      	movs	r2, r0
   25f20:	1dfb      	adds	r3, r7, #7
   25f22:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   25f24:	1dfb      	adds	r3, r7, #7
   25f26:	781b      	ldrb	r3, [r3, #0]
   25f28:	0018      	movs	r0, r3
   25f2a:	4b03      	ldr	r3, [pc, #12]	; (25f38 <port_get_group_from_gpio_pin+0x20>)
   25f2c:	4798      	blx	r3
   25f2e:	0003      	movs	r3, r0
}
   25f30:	0018      	movs	r0, r3
   25f32:	46bd      	mov	sp, r7
   25f34:	b002      	add	sp, #8
   25f36:	bd80      	pop	{r7, pc}
   25f38:	00025eb9 	.word	0x00025eb9

00025f3c <port_get_config_defaults>:
{
   25f3c:	b580      	push	{r7, lr}
   25f3e:	b082      	sub	sp, #8
   25f40:	af00      	add	r7, sp, #0
   25f42:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   25f44:	687b      	ldr	r3, [r7, #4]
   25f46:	2200      	movs	r2, #0
   25f48:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   25f4a:	687b      	ldr	r3, [r7, #4]
   25f4c:	2201      	movs	r2, #1
   25f4e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   25f50:	687b      	ldr	r3, [r7, #4]
   25f52:	2200      	movs	r2, #0
   25f54:	709a      	strb	r2, [r3, #2]
}
   25f56:	46c0      	nop			; (mov r8, r8)
   25f58:	46bd      	mov	sp, r7
   25f5a:	b002      	add	sp, #8
   25f5c:	bd80      	pop	{r7, pc}
	...

00025f60 <port_pin_set_output_level>:
{
   25f60:	b580      	push	{r7, lr}
   25f62:	b084      	sub	sp, #16
   25f64:	af00      	add	r7, sp, #0
   25f66:	0002      	movs	r2, r0
   25f68:	1dfb      	adds	r3, r7, #7
   25f6a:	701a      	strb	r2, [r3, #0]
   25f6c:	1dbb      	adds	r3, r7, #6
   25f6e:	1c0a      	adds	r2, r1, #0
   25f70:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   25f72:	1dfb      	adds	r3, r7, #7
   25f74:	781b      	ldrb	r3, [r3, #0]
   25f76:	0018      	movs	r0, r3
   25f78:	4b0d      	ldr	r3, [pc, #52]	; (25fb0 <port_pin_set_output_level+0x50>)
   25f7a:	4798      	blx	r3
   25f7c:	0003      	movs	r3, r0
   25f7e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   25f80:	1dfb      	adds	r3, r7, #7
   25f82:	781b      	ldrb	r3, [r3, #0]
   25f84:	221f      	movs	r2, #31
   25f86:	4013      	ands	r3, r2
   25f88:	2201      	movs	r2, #1
   25f8a:	409a      	lsls	r2, r3
   25f8c:	0013      	movs	r3, r2
   25f8e:	60bb      	str	r3, [r7, #8]
	if (level) {
   25f90:	1dbb      	adds	r3, r7, #6
   25f92:	781b      	ldrb	r3, [r3, #0]
   25f94:	2b00      	cmp	r3, #0
   25f96:	d003      	beq.n	25fa0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   25f98:	68fb      	ldr	r3, [r7, #12]
   25f9a:	68ba      	ldr	r2, [r7, #8]
   25f9c:	619a      	str	r2, [r3, #24]
}
   25f9e:	e002      	b.n	25fa6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   25fa0:	68fb      	ldr	r3, [r7, #12]
   25fa2:	68ba      	ldr	r2, [r7, #8]
   25fa4:	615a      	str	r2, [r3, #20]
}
   25fa6:	46c0      	nop			; (mov r8, r8)
   25fa8:	46bd      	mov	sp, r7
   25faa:	b004      	add	sp, #16
   25fac:	bd80      	pop	{r7, pc}
   25fae:	46c0      	nop			; (mov r8, r8)
   25fb0:	00025f19 	.word	0x00025f19

00025fb4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   25fb4:	b580      	push	{r7, lr}
   25fb6:	b082      	sub	sp, #8
   25fb8:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   25fba:	1d3b      	adds	r3, r7, #4
   25fbc:	0018      	movs	r0, r3
   25fbe:	4b0e      	ldr	r3, [pc, #56]	; (25ff8 <system_board_init+0x44>)
   25fc0:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   25fc2:	1d3b      	adds	r3, r7, #4
   25fc4:	2201      	movs	r2, #1
   25fc6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   25fc8:	1d3b      	adds	r3, r7, #4
   25fca:	0019      	movs	r1, r3
   25fcc:	2017      	movs	r0, #23
   25fce:	4b0b      	ldr	r3, [pc, #44]	; (25ffc <system_board_init+0x48>)
   25fd0:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   25fd2:	2101      	movs	r1, #1
   25fd4:	2017      	movs	r0, #23
   25fd6:	4b0a      	ldr	r3, [pc, #40]	; (26000 <system_board_init+0x4c>)
   25fd8:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   25fda:	1d3b      	adds	r3, r7, #4
   25fdc:	2200      	movs	r2, #0
   25fde:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   25fe0:	1d3b      	adds	r3, r7, #4
   25fe2:	2201      	movs	r2, #1
   25fe4:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   25fe6:	1d3b      	adds	r3, r7, #4
   25fe8:	0019      	movs	r1, r3
   25fea:	2037      	movs	r0, #55	; 0x37
   25fec:	4b03      	ldr	r3, [pc, #12]	; (25ffc <system_board_init+0x48>)
   25fee:	4798      	blx	r3
}
   25ff0:	46c0      	nop			; (mov r8, r8)
   25ff2:	46bd      	mov	sp, r7
   25ff4:	b002      	add	sp, #8
   25ff6:	bd80      	pop	{r7, pc}
   25ff8:	00025f3d 	.word	0x00025f3d
   25ffc:	00026629 	.word	0x00026629
   26000:	00025f61 	.word	0x00025f61

00026004 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   26004:	b580      	push	{r7, lr}
   26006:	b084      	sub	sp, #16
   26008:	af00      	add	r7, sp, #0
   2600a:	0002      	movs	r2, r0
   2600c:	1dfb      	adds	r3, r7, #7
   2600e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   26010:	230f      	movs	r3, #15
   26012:	18fb      	adds	r3, r7, r3
   26014:	1dfa      	adds	r2, r7, #7
   26016:	7812      	ldrb	r2, [r2, #0]
   26018:	0952      	lsrs	r2, r2, #5
   2601a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   2601c:	230f      	movs	r3, #15
   2601e:	18fb      	adds	r3, r7, r3
   26020:	781b      	ldrb	r3, [r3, #0]
   26022:	2b00      	cmp	r3, #0
   26024:	d10c      	bne.n	26040 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26026:	4b09      	ldr	r3, [pc, #36]	; (2604c <_extint_get_eic_from_channel+0x48>)
   26028:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   2602a:	230f      	movs	r3, #15
   2602c:	18fb      	adds	r3, r7, r3
   2602e:	781b      	ldrb	r3, [r3, #0]
   26030:	009b      	lsls	r3, r3, #2
   26032:	2210      	movs	r2, #16
   26034:	4694      	mov	ip, r2
   26036:	44bc      	add	ip, r7
   26038:	4463      	add	r3, ip
   2603a:	3b08      	subs	r3, #8
   2603c:	681b      	ldr	r3, [r3, #0]
   2603e:	e000      	b.n	26042 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   26040:	2300      	movs	r3, #0
	}
}
   26042:	0018      	movs	r0, r3
   26044:	46bd      	mov	sp, r7
   26046:	b004      	add	sp, #16
   26048:	bd80      	pop	{r7, pc}
   2604a:	46c0      	nop			; (mov r8, r8)
   2604c:	40001800 	.word	0x40001800

00026050 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   26050:	b580      	push	{r7, lr}
   26052:	b084      	sub	sp, #16
   26054:	af00      	add	r7, sp, #0
   26056:	0002      	movs	r2, r0
   26058:	1dfb      	adds	r3, r7, #7
   2605a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   2605c:	1dfb      	adds	r3, r7, #7
   2605e:	781b      	ldrb	r3, [r3, #0]
   26060:	0018      	movs	r0, r3
   26062:	4b0b      	ldr	r3, [pc, #44]	; (26090 <extint_chan_is_detected+0x40>)
   26064:	4798      	blx	r3
   26066:	0003      	movs	r3, r0
   26068:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   2606a:	1dfb      	adds	r3, r7, #7
   2606c:	781b      	ldrb	r3, [r3, #0]
   2606e:	221f      	movs	r2, #31
   26070:	4013      	ands	r3, r2
   26072:	2201      	movs	r2, #1
   26074:	409a      	lsls	r2, r3
   26076:	0013      	movs	r3, r2
   26078:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   2607a:	68fb      	ldr	r3, [r7, #12]
   2607c:	691b      	ldr	r3, [r3, #16]
   2607e:	68ba      	ldr	r2, [r7, #8]
   26080:	4013      	ands	r3, r2
   26082:	1e5a      	subs	r2, r3, #1
   26084:	4193      	sbcs	r3, r2
   26086:	b2db      	uxtb	r3, r3
}
   26088:	0018      	movs	r0, r3
   2608a:	46bd      	mov	sp, r7
   2608c:	b004      	add	sp, #16
   2608e:	bd80      	pop	{r7, pc}
   26090:	00026005 	.word	0x00026005

00026094 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   26094:	b580      	push	{r7, lr}
   26096:	b084      	sub	sp, #16
   26098:	af00      	add	r7, sp, #0
   2609a:	0002      	movs	r2, r0
   2609c:	1dfb      	adds	r3, r7, #7
   2609e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   260a0:	1dfb      	adds	r3, r7, #7
   260a2:	781b      	ldrb	r3, [r3, #0]
   260a4:	0018      	movs	r0, r3
   260a6:	4b09      	ldr	r3, [pc, #36]	; (260cc <extint_chan_clear_detected+0x38>)
   260a8:	4798      	blx	r3
   260aa:	0003      	movs	r3, r0
   260ac:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   260ae:	1dfb      	adds	r3, r7, #7
   260b0:	781b      	ldrb	r3, [r3, #0]
   260b2:	221f      	movs	r2, #31
   260b4:	4013      	ands	r3, r2
   260b6:	2201      	movs	r2, #1
   260b8:	409a      	lsls	r2, r3
   260ba:	0013      	movs	r3, r2
   260bc:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   260be:	68fb      	ldr	r3, [r7, #12]
   260c0:	68ba      	ldr	r2, [r7, #8]
   260c2:	611a      	str	r2, [r3, #16]
}
   260c4:	46c0      	nop			; (mov r8, r8)
   260c6:	46bd      	mov	sp, r7
   260c8:	b004      	add	sp, #16
   260ca:	bd80      	pop	{r7, pc}
   260cc:	00026005 	.word	0x00026005

000260d0 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   260d0:	b580      	push	{r7, lr}
   260d2:	b082      	sub	sp, #8
   260d4:	af00      	add	r7, sp, #0
   260d6:	6078      	str	r0, [r7, #4]
   260d8:	0008      	movs	r0, r1
   260da:	0011      	movs	r1, r2
   260dc:	1cfb      	adds	r3, r7, #3
   260de:	1c02      	adds	r2, r0, #0
   260e0:	701a      	strb	r2, [r3, #0]
   260e2:	1cbb      	adds	r3, r7, #2
   260e4:	1c0a      	adds	r2, r1, #0
   260e6:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   260e8:	1cbb      	adds	r3, r7, #2
   260ea:	781b      	ldrb	r3, [r3, #0]
   260ec:	2b00      	cmp	r3, #0
   260ee:	d001      	beq.n	260f4 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   260f0:	2317      	movs	r3, #23
   260f2:	e019      	b.n	26128 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   260f4:	1cfb      	adds	r3, r7, #3
   260f6:	781a      	ldrb	r2, [r3, #0]
   260f8:	4b0d      	ldr	r3, [pc, #52]	; (26130 <extint_register_callback+0x60>)
   260fa:	0092      	lsls	r2, r2, #2
   260fc:	58d3      	ldr	r3, [r2, r3]
   260fe:	2b00      	cmp	r3, #0
   26100:	d107      	bne.n	26112 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   26102:	1cfb      	adds	r3, r7, #3
   26104:	781a      	ldrb	r2, [r3, #0]
   26106:	4b0a      	ldr	r3, [pc, #40]	; (26130 <extint_register_callback+0x60>)
   26108:	0092      	lsls	r2, r2, #2
   2610a:	6879      	ldr	r1, [r7, #4]
   2610c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   2610e:	2300      	movs	r3, #0
   26110:	e00a      	b.n	26128 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   26112:	1cfb      	adds	r3, r7, #3
   26114:	781a      	ldrb	r2, [r3, #0]
   26116:	4b06      	ldr	r3, [pc, #24]	; (26130 <extint_register_callback+0x60>)
   26118:	0092      	lsls	r2, r2, #2
   2611a:	58d2      	ldr	r2, [r2, r3]
   2611c:	687b      	ldr	r3, [r7, #4]
   2611e:	429a      	cmp	r2, r3
   26120:	d101      	bne.n	26126 <extint_register_callback+0x56>
		return STATUS_OK;
   26122:	2300      	movs	r3, #0
   26124:	e000      	b.n	26128 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   26126:	231d      	movs	r3, #29
}
   26128:	0018      	movs	r0, r3
   2612a:	46bd      	mov	sp, r7
   2612c:	b002      	add	sp, #8
   2612e:	bd80      	pop	{r7, pc}
   26130:	200059f4 	.word	0x200059f4

00026134 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   26134:	b580      	push	{r7, lr}
   26136:	b084      	sub	sp, #16
   26138:	af00      	add	r7, sp, #0
   2613a:	0002      	movs	r2, r0
   2613c:	1dfb      	adds	r3, r7, #7
   2613e:	701a      	strb	r2, [r3, #0]
   26140:	1dbb      	adds	r3, r7, #6
   26142:	1c0a      	adds	r2, r1, #0
   26144:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   26146:	1dbb      	adds	r3, r7, #6
   26148:	781b      	ldrb	r3, [r3, #0]
   2614a:	2b00      	cmp	r3, #0
   2614c:	d10e      	bne.n	2616c <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   2614e:	1dfb      	adds	r3, r7, #7
   26150:	781b      	ldrb	r3, [r3, #0]
   26152:	0018      	movs	r0, r3
   26154:	4b08      	ldr	r3, [pc, #32]	; (26178 <extint_chan_enable_callback+0x44>)
   26156:	4798      	blx	r3
   26158:	0003      	movs	r3, r0
   2615a:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   2615c:	1dfb      	adds	r3, r7, #7
   2615e:	781b      	ldrb	r3, [r3, #0]
   26160:	2201      	movs	r2, #1
   26162:	409a      	lsls	r2, r3
   26164:	68fb      	ldr	r3, [r7, #12]
   26166:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   26168:	2300      	movs	r3, #0
   2616a:	e000      	b.n	2616e <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   2616c:	2317      	movs	r3, #23
}
   2616e:	0018      	movs	r0, r3
   26170:	46bd      	mov	sp, r7
   26172:	b004      	add	sp, #16
   26174:	bd80      	pop	{r7, pc}
   26176:	46c0      	nop			; (mov r8, r8)
   26178:	00026005 	.word	0x00026005

0002617c <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   2617c:	b580      	push	{r7, lr}
   2617e:	b084      	sub	sp, #16
   26180:	af00      	add	r7, sp, #0
   26182:	0002      	movs	r2, r0
   26184:	1dfb      	adds	r3, r7, #7
   26186:	701a      	strb	r2, [r3, #0]
   26188:	1dbb      	adds	r3, r7, #6
   2618a:	1c0a      	adds	r2, r1, #0
   2618c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   2618e:	1dbb      	adds	r3, r7, #6
   26190:	781b      	ldrb	r3, [r3, #0]
   26192:	2b00      	cmp	r3, #0
   26194:	d10e      	bne.n	261b4 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   26196:	1dfb      	adds	r3, r7, #7
   26198:	781b      	ldrb	r3, [r3, #0]
   2619a:	0018      	movs	r0, r3
   2619c:	4b08      	ldr	r3, [pc, #32]	; (261c0 <extint_chan_disable_callback+0x44>)
   2619e:	4798      	blx	r3
   261a0:	0003      	movs	r3, r0
   261a2:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   261a4:	1dfb      	adds	r3, r7, #7
   261a6:	781b      	ldrb	r3, [r3, #0]
   261a8:	2201      	movs	r2, #1
   261aa:	409a      	lsls	r2, r3
   261ac:	68fb      	ldr	r3, [r7, #12]
   261ae:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   261b0:	2300      	movs	r3, #0
   261b2:	e000      	b.n	261b6 <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   261b4:	2317      	movs	r3, #23
}
   261b6:	0018      	movs	r0, r3
   261b8:	46bd      	mov	sp, r7
   261ba:	b004      	add	sp, #16
   261bc:	bd80      	pop	{r7, pc}
   261be:	46c0      	nop			; (mov r8, r8)
   261c0:	00026005 	.word	0x00026005

000261c4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   261c4:	b580      	push	{r7, lr}
   261c6:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   261c8:	4b15      	ldr	r3, [pc, #84]	; (26220 <EIC_Handler+0x5c>)
   261ca:	2200      	movs	r2, #0
   261cc:	701a      	strb	r2, [r3, #0]
   261ce:	e020      	b.n	26212 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   261d0:	4b13      	ldr	r3, [pc, #76]	; (26220 <EIC_Handler+0x5c>)
   261d2:	781b      	ldrb	r3, [r3, #0]
   261d4:	0018      	movs	r0, r3
   261d6:	4b13      	ldr	r3, [pc, #76]	; (26224 <EIC_Handler+0x60>)
   261d8:	4798      	blx	r3
   261da:	1e03      	subs	r3, r0, #0
   261dc:	d013      	beq.n	26206 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   261de:	4b10      	ldr	r3, [pc, #64]	; (26220 <EIC_Handler+0x5c>)
   261e0:	781b      	ldrb	r3, [r3, #0]
   261e2:	0018      	movs	r0, r3
   261e4:	4b10      	ldr	r3, [pc, #64]	; (26228 <EIC_Handler+0x64>)
   261e6:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   261e8:	4b0d      	ldr	r3, [pc, #52]	; (26220 <EIC_Handler+0x5c>)
   261ea:	781b      	ldrb	r3, [r3, #0]
   261ec:	001a      	movs	r2, r3
   261ee:	4b0f      	ldr	r3, [pc, #60]	; (2622c <EIC_Handler+0x68>)
   261f0:	0092      	lsls	r2, r2, #2
   261f2:	58d3      	ldr	r3, [r2, r3]
   261f4:	2b00      	cmp	r3, #0
   261f6:	d006      	beq.n	26206 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   261f8:	4b09      	ldr	r3, [pc, #36]	; (26220 <EIC_Handler+0x5c>)
   261fa:	781b      	ldrb	r3, [r3, #0]
   261fc:	001a      	movs	r2, r3
   261fe:	4b0b      	ldr	r3, [pc, #44]	; (2622c <EIC_Handler+0x68>)
   26200:	0092      	lsls	r2, r2, #2
   26202:	58d3      	ldr	r3, [r2, r3]
   26204:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   26206:	4b06      	ldr	r3, [pc, #24]	; (26220 <EIC_Handler+0x5c>)
   26208:	781b      	ldrb	r3, [r3, #0]
   2620a:	3301      	adds	r3, #1
   2620c:	b2da      	uxtb	r2, r3
   2620e:	4b04      	ldr	r3, [pc, #16]	; (26220 <EIC_Handler+0x5c>)
   26210:	701a      	strb	r2, [r3, #0]
   26212:	4b03      	ldr	r3, [pc, #12]	; (26220 <EIC_Handler+0x5c>)
   26214:	781b      	ldrb	r3, [r3, #0]
   26216:	2b0f      	cmp	r3, #15
   26218:	d9da      	bls.n	261d0 <EIC_Handler+0xc>
			}
		}
	}
}
   2621a:	46c0      	nop			; (mov r8, r8)
   2621c:	46bd      	mov	sp, r7
   2621e:	bd80      	pop	{r7, pc}
   26220:	200059f0 	.word	0x200059f0
   26224:	00026051 	.word	0x00026051
   26228:	00026095 	.word	0x00026095
   2622c:	200059f4 	.word	0x200059f4

00026230 <system_gclk_chan_get_config_defaults>:
{
   26230:	b580      	push	{r7, lr}
   26232:	b082      	sub	sp, #8
   26234:	af00      	add	r7, sp, #0
   26236:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26238:	687b      	ldr	r3, [r7, #4]
   2623a:	2200      	movs	r2, #0
   2623c:	701a      	strb	r2, [r3, #0]
}
   2623e:	46c0      	nop			; (mov r8, r8)
   26240:	46bd      	mov	sp, r7
   26242:	b002      	add	sp, #8
   26244:	bd80      	pop	{r7, pc}
	...

00026248 <system_apb_clock_set_mask>:
{
   26248:	b580      	push	{r7, lr}
   2624a:	b082      	sub	sp, #8
   2624c:	af00      	add	r7, sp, #0
   2624e:	0002      	movs	r2, r0
   26250:	6039      	str	r1, [r7, #0]
   26252:	1dfb      	adds	r3, r7, #7
   26254:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   26256:	1dfb      	adds	r3, r7, #7
   26258:	781b      	ldrb	r3, [r3, #0]
   2625a:	2b01      	cmp	r3, #1
   2625c:	d00a      	beq.n	26274 <system_apb_clock_set_mask+0x2c>
   2625e:	2b02      	cmp	r3, #2
   26260:	d00f      	beq.n	26282 <system_apb_clock_set_mask+0x3a>
   26262:	2b00      	cmp	r3, #0
   26264:	d114      	bne.n	26290 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   26266:	4b0e      	ldr	r3, [pc, #56]	; (262a0 <system_apb_clock_set_mask+0x58>)
   26268:	4a0d      	ldr	r2, [pc, #52]	; (262a0 <system_apb_clock_set_mask+0x58>)
   2626a:	6991      	ldr	r1, [r2, #24]
   2626c:	683a      	ldr	r2, [r7, #0]
   2626e:	430a      	orrs	r2, r1
   26270:	619a      	str	r2, [r3, #24]
			break;
   26272:	e00f      	b.n	26294 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   26274:	4b0a      	ldr	r3, [pc, #40]	; (262a0 <system_apb_clock_set_mask+0x58>)
   26276:	4a0a      	ldr	r2, [pc, #40]	; (262a0 <system_apb_clock_set_mask+0x58>)
   26278:	69d1      	ldr	r1, [r2, #28]
   2627a:	683a      	ldr	r2, [r7, #0]
   2627c:	430a      	orrs	r2, r1
   2627e:	61da      	str	r2, [r3, #28]
			break;
   26280:	e008      	b.n	26294 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   26282:	4b07      	ldr	r3, [pc, #28]	; (262a0 <system_apb_clock_set_mask+0x58>)
   26284:	4a06      	ldr	r2, [pc, #24]	; (262a0 <system_apb_clock_set_mask+0x58>)
   26286:	6a11      	ldr	r1, [r2, #32]
   26288:	683a      	ldr	r2, [r7, #0]
   2628a:	430a      	orrs	r2, r1
   2628c:	621a      	str	r2, [r3, #32]
			break;
   2628e:	e001      	b.n	26294 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   26290:	2317      	movs	r3, #23
   26292:	e000      	b.n	26296 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   26294:	2300      	movs	r3, #0
}
   26296:	0018      	movs	r0, r3
   26298:	46bd      	mov	sp, r7
   2629a:	b002      	add	sp, #8
   2629c:	bd80      	pop	{r7, pc}
   2629e:	46c0      	nop			; (mov r8, r8)
   262a0:	40000400 	.word	0x40000400

000262a4 <system_pinmux_get_config_defaults>:
{
   262a4:	b580      	push	{r7, lr}
   262a6:	b082      	sub	sp, #8
   262a8:	af00      	add	r7, sp, #0
   262aa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   262ac:	687b      	ldr	r3, [r7, #4]
   262ae:	2280      	movs	r2, #128	; 0x80
   262b0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   262b2:	687b      	ldr	r3, [r7, #4]
   262b4:	2200      	movs	r2, #0
   262b6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   262b8:	687b      	ldr	r3, [r7, #4]
   262ba:	2201      	movs	r2, #1
   262bc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   262be:	687b      	ldr	r3, [r7, #4]
   262c0:	2200      	movs	r2, #0
   262c2:	70da      	strb	r2, [r3, #3]
}
   262c4:	46c0      	nop			; (mov r8, r8)
   262c6:	46bd      	mov	sp, r7
   262c8:	b002      	add	sp, #8
   262ca:	bd80      	pop	{r7, pc}

000262cc <system_interrupt_enable>:
{
   262cc:	b580      	push	{r7, lr}
   262ce:	b082      	sub	sp, #8
   262d0:	af00      	add	r7, sp, #0
   262d2:	0002      	movs	r2, r0
   262d4:	1dfb      	adds	r3, r7, #7
   262d6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   262d8:	4b06      	ldr	r3, [pc, #24]	; (262f4 <system_interrupt_enable+0x28>)
   262da:	1dfa      	adds	r2, r7, #7
   262dc:	7812      	ldrb	r2, [r2, #0]
   262de:	0011      	movs	r1, r2
   262e0:	221f      	movs	r2, #31
   262e2:	400a      	ands	r2, r1
   262e4:	2101      	movs	r1, #1
   262e6:	4091      	lsls	r1, r2
   262e8:	000a      	movs	r2, r1
   262ea:	601a      	str	r2, [r3, #0]
}
   262ec:	46c0      	nop			; (mov r8, r8)
   262ee:	46bd      	mov	sp, r7
   262f0:	b002      	add	sp, #8
   262f2:	bd80      	pop	{r7, pc}
   262f4:	e000e100 	.word	0xe000e100

000262f8 <_extint_get_eic_from_channel>:
{
   262f8:	b580      	push	{r7, lr}
   262fa:	b084      	sub	sp, #16
   262fc:	af00      	add	r7, sp, #0
   262fe:	0002      	movs	r2, r0
   26300:	1dfb      	adds	r3, r7, #7
   26302:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   26304:	230f      	movs	r3, #15
   26306:	18fb      	adds	r3, r7, r3
   26308:	1dfa      	adds	r2, r7, #7
   2630a:	7812      	ldrb	r2, [r2, #0]
   2630c:	0952      	lsrs	r2, r2, #5
   2630e:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   26310:	230f      	movs	r3, #15
   26312:	18fb      	adds	r3, r7, r3
   26314:	781b      	ldrb	r3, [r3, #0]
   26316:	2b00      	cmp	r3, #0
   26318:	d10c      	bne.n	26334 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2631a:	4b09      	ldr	r3, [pc, #36]	; (26340 <_extint_get_eic_from_channel+0x48>)
   2631c:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   2631e:	230f      	movs	r3, #15
   26320:	18fb      	adds	r3, r7, r3
   26322:	781b      	ldrb	r3, [r3, #0]
   26324:	009b      	lsls	r3, r3, #2
   26326:	2210      	movs	r2, #16
   26328:	4694      	mov	ip, r2
   2632a:	44bc      	add	ip, r7
   2632c:	4463      	add	r3, ip
   2632e:	3b08      	subs	r3, #8
   26330:	681b      	ldr	r3, [r3, #0]
   26332:	e000      	b.n	26336 <_extint_get_eic_from_channel+0x3e>
		return NULL;
   26334:	2300      	movs	r3, #0
}
   26336:	0018      	movs	r0, r3
   26338:	46bd      	mov	sp, r7
   2633a:	b004      	add	sp, #16
   2633c:	bd80      	pop	{r7, pc}
   2633e:	46c0      	nop			; (mov r8, r8)
   26340:	40001800 	.word	0x40001800

00026344 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   26344:	b580      	push	{r7, lr}
   26346:	b082      	sub	sp, #8
   26348:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2634a:	4b0f      	ldr	r3, [pc, #60]	; (26388 <extint_is_syncing+0x44>)
   2634c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2634e:	2300      	movs	r3, #0
   26350:	607b      	str	r3, [r7, #4]
   26352:	e011      	b.n	26378 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   26354:	687b      	ldr	r3, [r7, #4]
   26356:	009b      	lsls	r3, r3, #2
   26358:	2208      	movs	r2, #8
   2635a:	4694      	mov	ip, r2
   2635c:	44bc      	add	ip, r7
   2635e:	4463      	add	r3, ip
   26360:	3b08      	subs	r3, #8
   26362:	681b      	ldr	r3, [r3, #0]
   26364:	785b      	ldrb	r3, [r3, #1]
   26366:	b2db      	uxtb	r3, r3
   26368:	b25b      	sxtb	r3, r3
   2636a:	2b00      	cmp	r3, #0
   2636c:	da01      	bge.n	26372 <extint_is_syncing+0x2e>
			return true;
   2636e:	2301      	movs	r3, #1
   26370:	e006      	b.n	26380 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26372:	687b      	ldr	r3, [r7, #4]
   26374:	3301      	adds	r3, #1
   26376:	607b      	str	r3, [r7, #4]
   26378:	687b      	ldr	r3, [r7, #4]
   2637a:	2b00      	cmp	r3, #0
   2637c:	d0ea      	beq.n	26354 <extint_is_syncing+0x10>
		}
	}
	return false;
   2637e:	2300      	movs	r3, #0
}
   26380:	0018      	movs	r0, r3
   26382:	46bd      	mov	sp, r7
   26384:	b002      	add	sp, #8
   26386:	bd80      	pop	{r7, pc}
   26388:	40001800 	.word	0x40001800

0002638c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   2638c:	b580      	push	{r7, lr}
   2638e:	b084      	sub	sp, #16
   26390:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26392:	4b2d      	ldr	r3, [pc, #180]	; (26448 <_system_extint_init+0xbc>)
   26394:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   26396:	2140      	movs	r1, #64	; 0x40
   26398:	2000      	movs	r0, #0
   2639a:	4b2c      	ldr	r3, [pc, #176]	; (2644c <_system_extint_init+0xc0>)
   2639c:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2639e:	003b      	movs	r3, r7
   263a0:	0018      	movs	r0, r3
   263a2:	4b2b      	ldr	r3, [pc, #172]	; (26450 <_system_extint_init+0xc4>)
   263a4:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   263a6:	003b      	movs	r3, r7
   263a8:	2200      	movs	r2, #0
   263aa:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   263ac:	003b      	movs	r3, r7
   263ae:	0019      	movs	r1, r3
   263b0:	2005      	movs	r0, #5
   263b2:	4b28      	ldr	r3, [pc, #160]	; (26454 <_system_extint_init+0xc8>)
   263b4:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   263b6:	2005      	movs	r0, #5
   263b8:	4b27      	ldr	r3, [pc, #156]	; (26458 <_system_extint_init+0xcc>)
   263ba:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   263bc:	2300      	movs	r3, #0
   263be:	60fb      	str	r3, [r7, #12]
   263c0:	e018      	b.n	263f4 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   263c2:	68fb      	ldr	r3, [r7, #12]
   263c4:	009b      	lsls	r3, r3, #2
   263c6:	2210      	movs	r2, #16
   263c8:	4694      	mov	ip, r2
   263ca:	44bc      	add	ip, r7
   263cc:	4463      	add	r3, ip
   263ce:	3b0c      	subs	r3, #12
   263d0:	681a      	ldr	r2, [r3, #0]
   263d2:	68fb      	ldr	r3, [r7, #12]
   263d4:	009b      	lsls	r3, r3, #2
   263d6:	2110      	movs	r1, #16
   263d8:	468c      	mov	ip, r1
   263da:	44bc      	add	ip, r7
   263dc:	4463      	add	r3, ip
   263de:	3b0c      	subs	r3, #12
   263e0:	681b      	ldr	r3, [r3, #0]
   263e2:	781b      	ldrb	r3, [r3, #0]
   263e4:	b2db      	uxtb	r3, r3
   263e6:	2101      	movs	r1, #1
   263e8:	430b      	orrs	r3, r1
   263ea:	b2db      	uxtb	r3, r3
   263ec:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   263ee:	68fb      	ldr	r3, [r7, #12]
   263f0:	3301      	adds	r3, #1
   263f2:	60fb      	str	r3, [r7, #12]
   263f4:	68fb      	ldr	r3, [r7, #12]
   263f6:	2b00      	cmp	r3, #0
   263f8:	d0e3      	beq.n	263c2 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   263fa:	46c0      	nop			; (mov r8, r8)
   263fc:	4b17      	ldr	r3, [pc, #92]	; (2645c <_system_extint_init+0xd0>)
   263fe:	4798      	blx	r3
   26400:	1e03      	subs	r3, r0, #0
   26402:	d1fb      	bne.n	263fc <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   26404:	230b      	movs	r3, #11
   26406:	18fb      	adds	r3, r7, r3
   26408:	2200      	movs	r2, #0
   2640a:	701a      	strb	r2, [r3, #0]
   2640c:	e00d      	b.n	2642a <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   2640e:	230b      	movs	r3, #11
   26410:	18fb      	adds	r3, r7, r3
   26412:	781a      	ldrb	r2, [r3, #0]
   26414:	4b12      	ldr	r3, [pc, #72]	; (26460 <_system_extint_init+0xd4>)
   26416:	0092      	lsls	r2, r2, #2
   26418:	2100      	movs	r1, #0
   2641a:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   2641c:	230b      	movs	r3, #11
   2641e:	18fb      	adds	r3, r7, r3
   26420:	781a      	ldrb	r2, [r3, #0]
   26422:	230b      	movs	r3, #11
   26424:	18fb      	adds	r3, r7, r3
   26426:	3201      	adds	r2, #1
   26428:	701a      	strb	r2, [r3, #0]
   2642a:	230b      	movs	r3, #11
   2642c:	18fb      	adds	r3, r7, r3
   2642e:	781b      	ldrb	r3, [r3, #0]
   26430:	2b0f      	cmp	r3, #15
   26432:	d9ec      	bls.n	2640e <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   26434:	2004      	movs	r0, #4
   26436:	4b0b      	ldr	r3, [pc, #44]	; (26464 <_system_extint_init+0xd8>)
   26438:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   2643a:	4b0b      	ldr	r3, [pc, #44]	; (26468 <_system_extint_init+0xdc>)
   2643c:	4798      	blx	r3
}
   2643e:	46c0      	nop			; (mov r8, r8)
   26440:	46bd      	mov	sp, r7
   26442:	b004      	add	sp, #16
   26444:	bd80      	pop	{r7, pc}
   26446:	46c0      	nop			; (mov r8, r8)
   26448:	40001800 	.word	0x40001800
   2644c:	00026249 	.word	0x00026249
   26450:	00026231 	.word	0x00026231
   26454:	00029ab9 	.word	0x00029ab9
   26458:	00029afd 	.word	0x00029afd
   2645c:	00026345 	.word	0x00026345
   26460:	200059f4 	.word	0x200059f4
   26464:	000262cd 	.word	0x000262cd
   26468:	0002646d 	.word	0x0002646d

0002646c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   2646c:	b580      	push	{r7, lr}
   2646e:	b082      	sub	sp, #8
   26470:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26472:	4b15      	ldr	r3, [pc, #84]	; (264c8 <_extint_enable+0x5c>)
   26474:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26476:	2300      	movs	r3, #0
   26478:	607b      	str	r3, [r7, #4]
   2647a:	e018      	b.n	264ae <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   2647c:	687b      	ldr	r3, [r7, #4]
   2647e:	009b      	lsls	r3, r3, #2
   26480:	2208      	movs	r2, #8
   26482:	4694      	mov	ip, r2
   26484:	44bc      	add	ip, r7
   26486:	4463      	add	r3, ip
   26488:	3b08      	subs	r3, #8
   2648a:	681a      	ldr	r2, [r3, #0]
   2648c:	687b      	ldr	r3, [r7, #4]
   2648e:	009b      	lsls	r3, r3, #2
   26490:	2108      	movs	r1, #8
   26492:	468c      	mov	ip, r1
   26494:	44bc      	add	ip, r7
   26496:	4463      	add	r3, ip
   26498:	3b08      	subs	r3, #8
   2649a:	681b      	ldr	r3, [r3, #0]
   2649c:	781b      	ldrb	r3, [r3, #0]
   2649e:	b2db      	uxtb	r3, r3
   264a0:	2102      	movs	r1, #2
   264a2:	430b      	orrs	r3, r1
   264a4:	b2db      	uxtb	r3, r3
   264a6:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   264a8:	687b      	ldr	r3, [r7, #4]
   264aa:	3301      	adds	r3, #1
   264ac:	607b      	str	r3, [r7, #4]
   264ae:	687b      	ldr	r3, [r7, #4]
   264b0:	2b00      	cmp	r3, #0
   264b2:	d0e3      	beq.n	2647c <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   264b4:	46c0      	nop			; (mov r8, r8)
   264b6:	4b05      	ldr	r3, [pc, #20]	; (264cc <_extint_enable+0x60>)
   264b8:	4798      	blx	r3
   264ba:	1e03      	subs	r3, r0, #0
   264bc:	d1fb      	bne.n	264b6 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   264be:	46c0      	nop			; (mov r8, r8)
   264c0:	46bd      	mov	sp, r7
   264c2:	b002      	add	sp, #8
   264c4:	bd80      	pop	{r7, pc}
   264c6:	46c0      	nop			; (mov r8, r8)
   264c8:	40001800 	.word	0x40001800
   264cc:	00026345 	.word	0x00026345

000264d0 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   264d0:	b580      	push	{r7, lr}
   264d2:	b082      	sub	sp, #8
   264d4:	af00      	add	r7, sp, #0
   264d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   264d8:	687b      	ldr	r3, [r7, #4]
   264da:	2200      	movs	r2, #0
   264dc:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   264de:	687b      	ldr	r3, [r7, #4]
   264e0:	2200      	movs	r2, #0
   264e2:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   264e4:	687b      	ldr	r3, [r7, #4]
   264e6:	2201      	movs	r2, #1
   264e8:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   264ea:	687b      	ldr	r3, [r7, #4]
   264ec:	2201      	movs	r2, #1
   264ee:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   264f0:	687b      	ldr	r3, [r7, #4]
   264f2:	2200      	movs	r2, #0
   264f4:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   264f6:	687b      	ldr	r3, [r7, #4]
   264f8:	2202      	movs	r2, #2
   264fa:	72da      	strb	r2, [r3, #11]
}
   264fc:	46c0      	nop			; (mov r8, r8)
   264fe:	46bd      	mov	sp, r7
   26500:	b002      	add	sp, #8
   26502:	bd80      	pop	{r7, pc}

00026504 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   26504:	b580      	push	{r7, lr}
   26506:	b086      	sub	sp, #24
   26508:	af00      	add	r7, sp, #0
   2650a:	0002      	movs	r2, r0
   2650c:	6039      	str	r1, [r7, #0]
   2650e:	1dfb      	adds	r3, r7, #7
   26510:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   26512:	2308      	movs	r3, #8
   26514:	18fb      	adds	r3, r7, r3
   26516:	0018      	movs	r0, r3
   26518:	4b36      	ldr	r3, [pc, #216]	; (265f4 <extint_chan_set_config+0xf0>)
   2651a:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   2651c:	683b      	ldr	r3, [r7, #0]
   2651e:	685b      	ldr	r3, [r3, #4]
   26520:	b2da      	uxtb	r2, r3
   26522:	2308      	movs	r3, #8
   26524:	18fb      	adds	r3, r7, r3
   26526:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26528:	2308      	movs	r3, #8
   2652a:	18fb      	adds	r3, r7, r3
   2652c:	2200      	movs	r2, #0
   2652e:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   26530:	683b      	ldr	r3, [r7, #0]
   26532:	7a1a      	ldrb	r2, [r3, #8]
   26534:	2308      	movs	r3, #8
   26536:	18fb      	adds	r3, r7, r3
   26538:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   2653a:	683b      	ldr	r3, [r7, #0]
   2653c:	681b      	ldr	r3, [r3, #0]
   2653e:	b2db      	uxtb	r3, r3
   26540:	2208      	movs	r2, #8
   26542:	18ba      	adds	r2, r7, r2
   26544:	0011      	movs	r1, r2
   26546:	0018      	movs	r0, r3
   26548:	4b2b      	ldr	r3, [pc, #172]	; (265f8 <extint_chan_set_config+0xf4>)
   2654a:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   2654c:	1dfb      	adds	r3, r7, #7
   2654e:	781b      	ldrb	r3, [r3, #0]
   26550:	0018      	movs	r0, r3
   26552:	4b2a      	ldr	r3, [pc, #168]	; (265fc <extint_chan_set_config+0xf8>)
   26554:	4798      	blx	r3
   26556:	0003      	movs	r3, r0
   26558:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   2655a:	1dfb      	adds	r3, r7, #7
   2655c:	781b      	ldrb	r3, [r3, #0]
   2655e:	2207      	movs	r2, #7
   26560:	4013      	ands	r3, r2
   26562:	009b      	lsls	r3, r3, #2
   26564:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   26566:	683b      	ldr	r3, [r7, #0]
   26568:	7adb      	ldrb	r3, [r3, #11]
   2656a:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   2656c:	683b      	ldr	r3, [r7, #0]
   2656e:	7a9b      	ldrb	r3, [r3, #10]
   26570:	2b00      	cmp	r3, #0
   26572:	d003      	beq.n	2657c <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   26574:	697b      	ldr	r3, [r7, #20]
   26576:	2208      	movs	r2, #8
   26578:	4313      	orrs	r3, r2
   2657a:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   2657c:	1dfb      	adds	r3, r7, #7
   2657e:	781b      	ldrb	r3, [r3, #0]
   26580:	08db      	lsrs	r3, r3, #3
   26582:	b2db      	uxtb	r3, r3
   26584:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   26586:	1dfb      	adds	r3, r7, #7
   26588:	781b      	ldrb	r3, [r3, #0]
   2658a:	08db      	lsrs	r3, r3, #3
   2658c:	b2db      	uxtb	r3, r3
   2658e:	001a      	movs	r2, r3
   26590:	693b      	ldr	r3, [r7, #16]
   26592:	3206      	adds	r2, #6
   26594:	0092      	lsls	r2, r2, #2
   26596:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   26598:	210f      	movs	r1, #15
   2659a:	68fa      	ldr	r2, [r7, #12]
   2659c:	4091      	lsls	r1, r2
   2659e:	000a      	movs	r2, r1
   265a0:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   265a2:	401a      	ands	r2, r3
			(new_config << config_pos);
   265a4:	6979      	ldr	r1, [r7, #20]
   265a6:	68fb      	ldr	r3, [r7, #12]
   265a8:	4099      	lsls	r1, r3
   265aa:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   265ac:	431a      	orrs	r2, r3
   265ae:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   265b0:	693b      	ldr	r3, [r7, #16]
   265b2:	1d82      	adds	r2, r0, #6
   265b4:	0092      	lsls	r2, r2, #2
   265b6:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   265b8:	683b      	ldr	r3, [r7, #0]
   265ba:	7a5b      	ldrb	r3, [r3, #9]
   265bc:	2b00      	cmp	r3, #0
   265be:	d00a      	beq.n	265d6 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   265c0:	693b      	ldr	r3, [r7, #16]
   265c2:	695a      	ldr	r2, [r3, #20]
   265c4:	1dfb      	adds	r3, r7, #7
   265c6:	781b      	ldrb	r3, [r3, #0]
   265c8:	2101      	movs	r1, #1
   265ca:	4099      	lsls	r1, r3
   265cc:	000b      	movs	r3, r1
   265ce:	431a      	orrs	r2, r3
   265d0:	693b      	ldr	r3, [r7, #16]
   265d2:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   265d4:	e00a      	b.n	265ec <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   265d6:	693b      	ldr	r3, [r7, #16]
   265d8:	695b      	ldr	r3, [r3, #20]
   265da:	1dfa      	adds	r2, r7, #7
   265dc:	7812      	ldrb	r2, [r2, #0]
   265de:	2101      	movs	r1, #1
   265e0:	4091      	lsls	r1, r2
   265e2:	000a      	movs	r2, r1
   265e4:	43d2      	mvns	r2, r2
   265e6:	401a      	ands	r2, r3
   265e8:	693b      	ldr	r3, [r7, #16]
   265ea:	615a      	str	r2, [r3, #20]
}
   265ec:	46c0      	nop			; (mov r8, r8)
   265ee:	46bd      	mov	sp, r7
   265f0:	b006      	add	sp, #24
   265f2:	bd80      	pop	{r7, pc}
   265f4:	000262a5 	.word	0x000262a5
   265f8:	00029e19 	.word	0x00029e19
   265fc:	000262f9 	.word	0x000262f9

00026600 <system_pinmux_get_config_defaults>:
{
   26600:	b580      	push	{r7, lr}
   26602:	b082      	sub	sp, #8
   26604:	af00      	add	r7, sp, #0
   26606:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   26608:	687b      	ldr	r3, [r7, #4]
   2660a:	2280      	movs	r2, #128	; 0x80
   2660c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2660e:	687b      	ldr	r3, [r7, #4]
   26610:	2200      	movs	r2, #0
   26612:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   26614:	687b      	ldr	r3, [r7, #4]
   26616:	2201      	movs	r2, #1
   26618:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2661a:	687b      	ldr	r3, [r7, #4]
   2661c:	2200      	movs	r2, #0
   2661e:	70da      	strb	r2, [r3, #3]
}
   26620:	46c0      	nop			; (mov r8, r8)
   26622:	46bd      	mov	sp, r7
   26624:	b002      	add	sp, #8
   26626:	bd80      	pop	{r7, pc}

00026628 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   26628:	b580      	push	{r7, lr}
   2662a:	b084      	sub	sp, #16
   2662c:	af00      	add	r7, sp, #0
   2662e:	0002      	movs	r2, r0
   26630:	6039      	str	r1, [r7, #0]
   26632:	1dfb      	adds	r3, r7, #7
   26634:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   26636:	230c      	movs	r3, #12
   26638:	18fb      	adds	r3, r7, r3
   2663a:	0018      	movs	r0, r3
   2663c:	4b10      	ldr	r3, [pc, #64]	; (26680 <port_pin_set_config+0x58>)
   2663e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   26640:	230c      	movs	r3, #12
   26642:	18fb      	adds	r3, r7, r3
   26644:	2280      	movs	r2, #128	; 0x80
   26646:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   26648:	683b      	ldr	r3, [r7, #0]
   2664a:	781a      	ldrb	r2, [r3, #0]
   2664c:	230c      	movs	r3, #12
   2664e:	18fb      	adds	r3, r7, r3
   26650:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   26652:	683b      	ldr	r3, [r7, #0]
   26654:	785a      	ldrb	r2, [r3, #1]
   26656:	230c      	movs	r3, #12
   26658:	18fb      	adds	r3, r7, r3
   2665a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   2665c:	683b      	ldr	r3, [r7, #0]
   2665e:	789a      	ldrb	r2, [r3, #2]
   26660:	230c      	movs	r3, #12
   26662:	18fb      	adds	r3, r7, r3
   26664:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   26666:	230c      	movs	r3, #12
   26668:	18fa      	adds	r2, r7, r3
   2666a:	1dfb      	adds	r3, r7, #7
   2666c:	781b      	ldrb	r3, [r3, #0]
   2666e:	0011      	movs	r1, r2
   26670:	0018      	movs	r0, r3
   26672:	4b04      	ldr	r3, [pc, #16]	; (26684 <port_pin_set_config+0x5c>)
   26674:	4798      	blx	r3
}
   26676:	46c0      	nop			; (mov r8, r8)
   26678:	46bd      	mov	sp, r7
   2667a:	b004      	add	sp, #16
   2667c:	bd80      	pop	{r7, pc}
   2667e:	46c0      	nop			; (mov r8, r8)
   26680:	00026601 	.word	0x00026601
   26684:	00029e19 	.word	0x00029e19

00026688 <system_gclk_chan_get_config_defaults>:
{
   26688:	b580      	push	{r7, lr}
   2668a:	b082      	sub	sp, #8
   2668c:	af00      	add	r7, sp, #0
   2668e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26690:	687b      	ldr	r3, [r7, #4]
   26692:	2200      	movs	r2, #0
   26694:	701a      	strb	r2, [r3, #0]
}
   26696:	46c0      	nop			; (mov r8, r8)
   26698:	46bd      	mov	sp, r7
   2669a:	b002      	add	sp, #8
   2669c:	bd80      	pop	{r7, pc}
	...

000266a0 <system_apb_clock_set_mask>:
{
   266a0:	b580      	push	{r7, lr}
   266a2:	b082      	sub	sp, #8
   266a4:	af00      	add	r7, sp, #0
   266a6:	0002      	movs	r2, r0
   266a8:	6039      	str	r1, [r7, #0]
   266aa:	1dfb      	adds	r3, r7, #7
   266ac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   266ae:	1dfb      	adds	r3, r7, #7
   266b0:	781b      	ldrb	r3, [r3, #0]
   266b2:	2b01      	cmp	r3, #1
   266b4:	d00a      	beq.n	266cc <system_apb_clock_set_mask+0x2c>
   266b6:	2b02      	cmp	r3, #2
   266b8:	d00f      	beq.n	266da <system_apb_clock_set_mask+0x3a>
   266ba:	2b00      	cmp	r3, #0
   266bc:	d114      	bne.n	266e8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   266be:	4b0e      	ldr	r3, [pc, #56]	; (266f8 <system_apb_clock_set_mask+0x58>)
   266c0:	4a0d      	ldr	r2, [pc, #52]	; (266f8 <system_apb_clock_set_mask+0x58>)
   266c2:	6991      	ldr	r1, [r2, #24]
   266c4:	683a      	ldr	r2, [r7, #0]
   266c6:	430a      	orrs	r2, r1
   266c8:	619a      	str	r2, [r3, #24]
			break;
   266ca:	e00f      	b.n	266ec <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   266cc:	4b0a      	ldr	r3, [pc, #40]	; (266f8 <system_apb_clock_set_mask+0x58>)
   266ce:	4a0a      	ldr	r2, [pc, #40]	; (266f8 <system_apb_clock_set_mask+0x58>)
   266d0:	69d1      	ldr	r1, [r2, #28]
   266d2:	683a      	ldr	r2, [r7, #0]
   266d4:	430a      	orrs	r2, r1
   266d6:	61da      	str	r2, [r3, #28]
			break;
   266d8:	e008      	b.n	266ec <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   266da:	4b07      	ldr	r3, [pc, #28]	; (266f8 <system_apb_clock_set_mask+0x58>)
   266dc:	4a06      	ldr	r2, [pc, #24]	; (266f8 <system_apb_clock_set_mask+0x58>)
   266de:	6a11      	ldr	r1, [r2, #32]
   266e0:	683a      	ldr	r2, [r7, #0]
   266e2:	430a      	orrs	r2, r1
   266e4:	621a      	str	r2, [r3, #32]
			break;
   266e6:	e001      	b.n	266ec <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   266e8:	2317      	movs	r3, #23
   266ea:	e000      	b.n	266ee <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   266ec:	2300      	movs	r3, #0
}
   266ee:	0018      	movs	r0, r3
   266f0:	46bd      	mov	sp, r7
   266f2:	b002      	add	sp, #8
   266f4:	bd80      	pop	{r7, pc}
   266f6:	46c0      	nop			; (mov r8, r8)
   266f8:	40000400 	.word	0x40000400

000266fc <system_interrupt_enable>:
{
   266fc:	b580      	push	{r7, lr}
   266fe:	b082      	sub	sp, #8
   26700:	af00      	add	r7, sp, #0
   26702:	0002      	movs	r2, r0
   26704:	1dfb      	adds	r3, r7, #7
   26706:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26708:	4b06      	ldr	r3, [pc, #24]	; (26724 <system_interrupt_enable+0x28>)
   2670a:	1dfa      	adds	r2, r7, #7
   2670c:	7812      	ldrb	r2, [r2, #0]
   2670e:	0011      	movs	r1, r2
   26710:	221f      	movs	r2, #31
   26712:	400a      	ands	r2, r1
   26714:	2101      	movs	r1, #1
   26716:	4091      	lsls	r1, r2
   26718:	000a      	movs	r2, r1
   2671a:	601a      	str	r2, [r3, #0]
}
   2671c:	46c0      	nop			; (mov r8, r8)
   2671e:	46bd      	mov	sp, r7
   26720:	b002      	add	sp, #8
   26722:	bd80      	pop	{r7, pc}
   26724:	e000e100 	.word	0xe000e100

00026728 <system_interrupt_disable>:
{
   26728:	b580      	push	{r7, lr}
   2672a:	b082      	sub	sp, #8
   2672c:	af00      	add	r7, sp, #0
   2672e:	0002      	movs	r2, r0
   26730:	1dfb      	adds	r3, r7, #7
   26732:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26734:	4a07      	ldr	r2, [pc, #28]	; (26754 <system_interrupt_disable+0x2c>)
   26736:	1dfb      	adds	r3, r7, #7
   26738:	781b      	ldrb	r3, [r3, #0]
   2673a:	0019      	movs	r1, r3
   2673c:	231f      	movs	r3, #31
   2673e:	400b      	ands	r3, r1
   26740:	2101      	movs	r1, #1
   26742:	4099      	lsls	r1, r3
   26744:	000b      	movs	r3, r1
   26746:	0019      	movs	r1, r3
   26748:	2380      	movs	r3, #128	; 0x80
   2674a:	50d1      	str	r1, [r2, r3]
}
   2674c:	46c0      	nop			; (mov r8, r8)
   2674e:	46bd      	mov	sp, r7
   26750:	b002      	add	sp, #8
   26752:	bd80      	pop	{r7, pc}
   26754:	e000e100 	.word	0xe000e100

00026758 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   26758:	b580      	push	{r7, lr}
   2675a:	b084      	sub	sp, #16
   2675c:	af00      	add	r7, sp, #0
   2675e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26760:	687b      	ldr	r3, [r7, #4]
   26762:	681b      	ldr	r3, [r3, #0]
   26764:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   26766:	68fb      	ldr	r3, [r7, #12]
   26768:	7a9b      	ldrb	r3, [r3, #10]
   2676a:	b2db      	uxtb	r3, r3
   2676c:	b25b      	sxtb	r3, r3
   2676e:	2b00      	cmp	r3, #0
   26770:	da01      	bge.n	26776 <rtc_calendar_is_syncing+0x1e>
                return true;
   26772:	2301      	movs	r3, #1
   26774:	e000      	b.n	26778 <rtc_calendar_is_syncing+0x20>
        }

        return false;
   26776:	2300      	movs	r3, #0
}
   26778:	0018      	movs	r0, r3
   2677a:	46bd      	mov	sp, r7
   2677c:	b004      	add	sp, #16
   2677e:	bd80      	pop	{r7, pc}

00026780 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   26780:	b580      	push	{r7, lr}
   26782:	b084      	sub	sp, #16
   26784:	af00      	add	r7, sp, #0
   26786:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26788:	687b      	ldr	r3, [r7, #4]
   2678a:	681b      	ldr	r3, [r3, #0]
   2678c:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   2678e:	2003      	movs	r0, #3
   26790:	4b0a      	ldr	r3, [pc, #40]	; (267bc <rtc_calendar_enable+0x3c>)
   26792:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   26794:	46c0      	nop			; (mov r8, r8)
   26796:	687b      	ldr	r3, [r7, #4]
   26798:	0018      	movs	r0, r3
   2679a:	4b09      	ldr	r3, [pc, #36]	; (267c0 <rtc_calendar_enable+0x40>)
   2679c:	4798      	blx	r3
   2679e:	1e03      	subs	r3, r0, #0
   267a0:	d1f9      	bne.n	26796 <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   267a2:	68fb      	ldr	r3, [r7, #12]
   267a4:	881b      	ldrh	r3, [r3, #0]
   267a6:	b29b      	uxth	r3, r3
   267a8:	2202      	movs	r2, #2
   267aa:	4313      	orrs	r3, r2
   267ac:	b29a      	uxth	r2, r3
   267ae:	68fb      	ldr	r3, [r7, #12]
   267b0:	801a      	strh	r2, [r3, #0]
}
   267b2:	46c0      	nop			; (mov r8, r8)
   267b4:	46bd      	mov	sp, r7
   267b6:	b004      	add	sp, #16
   267b8:	bd80      	pop	{r7, pc}
   267ba:	46c0      	nop			; (mov r8, r8)
   267bc:	000266fd 	.word	0x000266fd
   267c0:	00026759 	.word	0x00026759

000267c4 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   267c4:	b580      	push	{r7, lr}
   267c6:	b084      	sub	sp, #16
   267c8:	af00      	add	r7, sp, #0
   267ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   267cc:	687b      	ldr	r3, [r7, #4]
   267ce:	681b      	ldr	r3, [r3, #0]
   267d0:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   267d2:	2003      	movs	r0, #3
   267d4:	4b0d      	ldr	r3, [pc, #52]	; (2680c <rtc_calendar_disable+0x48>)
   267d6:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   267d8:	46c0      	nop			; (mov r8, r8)
   267da:	687b      	ldr	r3, [r7, #4]
   267dc:	0018      	movs	r0, r3
   267de:	4b0c      	ldr	r3, [pc, #48]	; (26810 <rtc_calendar_disable+0x4c>)
   267e0:	4798      	blx	r3
   267e2:	1e03      	subs	r3, r0, #0
   267e4:	d1f9      	bne.n	267da <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   267e6:	68fb      	ldr	r3, [r7, #12]
   267e8:	22c1      	movs	r2, #193	; 0xc1
   267ea:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   267ec:	68fb      	ldr	r3, [r7, #12]
   267ee:	22c1      	movs	r2, #193	; 0xc1
   267f0:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   267f2:	68fb      	ldr	r3, [r7, #12]
   267f4:	881b      	ldrh	r3, [r3, #0]
   267f6:	b29b      	uxth	r3, r3
   267f8:	2202      	movs	r2, #2
   267fa:	4393      	bics	r3, r2
   267fc:	b29a      	uxth	r2, r3
   267fe:	68fb      	ldr	r3, [r7, #12]
   26800:	801a      	strh	r2, [r3, #0]
}
   26802:	46c0      	nop			; (mov r8, r8)
   26804:	46bd      	mov	sp, r7
   26806:	b004      	add	sp, #16
   26808:	bd80      	pop	{r7, pc}
   2680a:	46c0      	nop			; (mov r8, r8)
   2680c:	00026729 	.word	0x00026729
   26810:	00026759 	.word	0x00026759

00026814 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   26814:	b580      	push	{r7, lr}
   26816:	b084      	sub	sp, #16
   26818:	af00      	add	r7, sp, #0
   2681a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2681c:	687b      	ldr	r3, [r7, #4]
   2681e:	681b      	ldr	r3, [r3, #0]
   26820:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   26822:	687b      	ldr	r3, [r7, #4]
   26824:	0018      	movs	r0, r3
   26826:	4b0d      	ldr	r3, [pc, #52]	; (2685c <rtc_calendar_reset+0x48>)
   26828:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   2682a:	687b      	ldr	r3, [r7, #4]
   2682c:	2200      	movs	r2, #0
   2682e:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   26830:	687b      	ldr	r3, [r7, #4]
   26832:	2200      	movs	r2, #0
   26834:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   26836:	46c0      	nop			; (mov r8, r8)
   26838:	687b      	ldr	r3, [r7, #4]
   2683a:	0018      	movs	r0, r3
   2683c:	4b08      	ldr	r3, [pc, #32]	; (26860 <rtc_calendar_reset+0x4c>)
   2683e:	4798      	blx	r3
   26840:	1e03      	subs	r3, r0, #0
   26842:	d1f9      	bne.n	26838 <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   26844:	68fb      	ldr	r3, [r7, #12]
   26846:	881b      	ldrh	r3, [r3, #0]
   26848:	b29b      	uxth	r3, r3
   2684a:	2201      	movs	r2, #1
   2684c:	4313      	orrs	r3, r2
   2684e:	b29a      	uxth	r2, r3
   26850:	68fb      	ldr	r3, [r7, #12]
   26852:	801a      	strh	r2, [r3, #0]
}
   26854:	46c0      	nop			; (mov r8, r8)
   26856:	46bd      	mov	sp, r7
   26858:	b004      	add	sp, #16
   2685a:	bd80      	pop	{r7, pc}
   2685c:	000267c5 	.word	0x000267c5
   26860:	00026759 	.word	0x00026759

00026864 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   26864:	b580      	push	{r7, lr}
   26866:	b084      	sub	sp, #16
   26868:	af00      	add	r7, sp, #0
   2686a:	6078      	str	r0, [r7, #4]
   2686c:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   2686e:	683b      	ldr	r3, [r7, #0]
   26870:	88db      	ldrh	r3, [r3, #6]
   26872:	001a      	movs	r2, r3
   26874:	687b      	ldr	r3, [r7, #4]
   26876:	88db      	ldrh	r3, [r3, #6]
   26878:	1ad3      	subs	r3, r2, r3
   2687a:	069b      	lsls	r3, r3, #26
   2687c:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   2687e:	683b      	ldr	r3, [r7, #0]
   26880:	795b      	ldrb	r3, [r3, #5]
   26882:	059b      	lsls	r3, r3, #22
   26884:	001a      	movs	r2, r3
   26886:	68fb      	ldr	r3, [r7, #12]
   26888:	4313      	orrs	r3, r2
   2688a:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   2688c:	683b      	ldr	r3, [r7, #0]
   2688e:	791b      	ldrb	r3, [r3, #4]
   26890:	045b      	lsls	r3, r3, #17
   26892:	001a      	movs	r2, r3
   26894:	68fb      	ldr	r3, [r7, #12]
   26896:	4313      	orrs	r3, r2
   26898:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   2689a:	683b      	ldr	r3, [r7, #0]
   2689c:	789b      	ldrb	r3, [r3, #2]
   2689e:	031b      	lsls	r3, r3, #12
   268a0:	001a      	movs	r2, r3
   268a2:	68fb      	ldr	r3, [r7, #12]
   268a4:	4313      	orrs	r3, r2
   268a6:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   268a8:	687b      	ldr	r3, [r7, #4]
   268aa:	791b      	ldrb	r3, [r3, #4]
   268ac:	2201      	movs	r2, #1
   268ae:	4053      	eors	r3, r2
   268b0:	b2db      	uxtb	r3, r3
   268b2:	2b00      	cmp	r3, #0
   268b4:	d008      	beq.n	268c8 <rtc_calendar_time_to_register_value+0x64>
   268b6:	683b      	ldr	r3, [r7, #0]
   268b8:	78db      	ldrb	r3, [r3, #3]
   268ba:	2b00      	cmp	r3, #0
   268bc:	d004      	beq.n	268c8 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   268be:	68fb      	ldr	r3, [r7, #12]
   268c0:	2280      	movs	r2, #128	; 0x80
   268c2:	0252      	lsls	r2, r2, #9
   268c4:	4313      	orrs	r3, r2
   268c6:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   268c8:	683b      	ldr	r3, [r7, #0]
   268ca:	785b      	ldrb	r3, [r3, #1]
   268cc:	019b      	lsls	r3, r3, #6
   268ce:	001a      	movs	r2, r3
   268d0:	68fb      	ldr	r3, [r7, #12]
   268d2:	4313      	orrs	r3, r2
   268d4:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   268d6:	683b      	ldr	r3, [r7, #0]
   268d8:	781b      	ldrb	r3, [r3, #0]
   268da:	001a      	movs	r2, r3
   268dc:	68fb      	ldr	r3, [r7, #12]
   268de:	4313      	orrs	r3, r2
   268e0:	60fb      	str	r3, [r7, #12]

	return register_value;
   268e2:	68fb      	ldr	r3, [r7, #12]
}
   268e4:	0018      	movs	r0, r3
   268e6:	46bd      	mov	sp, r7
   268e8:	b004      	add	sp, #16
   268ea:	bd80      	pop	{r7, pc}

000268ec <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   268ec:	b580      	push	{r7, lr}
   268ee:	b084      	sub	sp, #16
   268f0:	af00      	add	r7, sp, #0
   268f2:	60f8      	str	r0, [r7, #12]
   268f4:	60b9      	str	r1, [r7, #8]
   268f6:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   268f8:	68bb      	ldr	r3, [r7, #8]
   268fa:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   268fc:	b29a      	uxth	r2, r3
   268fe:	68fb      	ldr	r3, [r7, #12]
   26900:	88db      	ldrh	r3, [r3, #6]
   26902:	18d3      	adds	r3, r2, r3
   26904:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   26906:	687b      	ldr	r3, [r7, #4]
   26908:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   2690a:	68bb      	ldr	r3, [r7, #8]
   2690c:	0d9b      	lsrs	r3, r3, #22
   2690e:	b2db      	uxtb	r3, r3
   26910:	220f      	movs	r2, #15
   26912:	4013      	ands	r3, r2
   26914:	b2da      	uxtb	r2, r3
   26916:	687b      	ldr	r3, [r7, #4]
   26918:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   2691a:	68bb      	ldr	r3, [r7, #8]
   2691c:	0c5b      	lsrs	r3, r3, #17
   2691e:	b2db      	uxtb	r3, r3
   26920:	221f      	movs	r2, #31
   26922:	4013      	ands	r3, r2
   26924:	b2da      	uxtb	r2, r3
   26926:	687b      	ldr	r3, [r7, #4]
   26928:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   2692a:	68fb      	ldr	r3, [r7, #12]
   2692c:	791b      	ldrb	r3, [r3, #4]
   2692e:	2b00      	cmp	r3, #0
   26930:	d008      	beq.n	26944 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   26932:	68bb      	ldr	r3, [r7, #8]
   26934:	0b1b      	lsrs	r3, r3, #12
   26936:	b2db      	uxtb	r3, r3
   26938:	221f      	movs	r2, #31
   2693a:	4013      	ands	r3, r2
   2693c:	b2da      	uxtb	r2, r3
   2693e:	687b      	ldr	r3, [r7, #4]
   26940:	709a      	strb	r2, [r3, #2]
   26942:	e010      	b.n	26966 <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   26944:	68bb      	ldr	r3, [r7, #8]
   26946:	0b1b      	lsrs	r3, r3, #12
   26948:	b2db      	uxtb	r3, r3
   2694a:	220f      	movs	r2, #15
   2694c:	4013      	ands	r3, r2
   2694e:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   26950:	687b      	ldr	r3, [r7, #4]
   26952:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   26954:	68ba      	ldr	r2, [r7, #8]
   26956:	2380      	movs	r3, #128	; 0x80
   26958:	025b      	lsls	r3, r3, #9
   2695a:	4013      	ands	r3, r2
   2695c:	1e5a      	subs	r2, r3, #1
   2695e:	4193      	sbcs	r3, r2
   26960:	b2da      	uxtb	r2, r3
   26962:	687b      	ldr	r3, [r7, #4]
   26964:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   26966:	68bb      	ldr	r3, [r7, #8]
   26968:	099b      	lsrs	r3, r3, #6
   2696a:	b2db      	uxtb	r3, r3
   2696c:	223f      	movs	r2, #63	; 0x3f
   2696e:	4013      	ands	r3, r2
   26970:	b2da      	uxtb	r2, r3
   26972:	687b      	ldr	r3, [r7, #4]
   26974:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   26976:	68bb      	ldr	r3, [r7, #8]
   26978:	b2db      	uxtb	r3, r3
   2697a:	223f      	movs	r2, #63	; 0x3f
   2697c:	4013      	ands	r3, r2
   2697e:	b2da      	uxtb	r2, r3
   26980:	687b      	ldr	r3, [r7, #4]
   26982:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   26984:	46c0      	nop			; (mov r8, r8)
   26986:	46bd      	mov	sp, r7
   26988:	b004      	add	sp, #16
   2698a:	bd80      	pop	{r7, pc}

0002698c <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   2698c:	b580      	push	{r7, lr}
   2698e:	b084      	sub	sp, #16
   26990:	af00      	add	r7, sp, #0
   26992:	6078      	str	r0, [r7, #4]
   26994:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26996:	687b      	ldr	r3, [r7, #4]
   26998:	681b      	ldr	r3, [r3, #0]
   2699a:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   2699c:	683b      	ldr	r3, [r7, #0]
   2699e:	881a      	ldrh	r2, [r3, #0]
   269a0:	230e      	movs	r3, #14
   269a2:	18fb      	adds	r3, r7, r3
   269a4:	2108      	movs	r1, #8
   269a6:	430a      	orrs	r2, r1
   269a8:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   269aa:	683b      	ldr	r3, [r7, #0]
   269ac:	791b      	ldrb	r3, [r3, #4]
   269ae:	2201      	movs	r2, #1
   269b0:	4053      	eors	r3, r2
   269b2:	b2db      	uxtb	r3, r3
   269b4:	2b00      	cmp	r3, #0
   269b6:	d007      	beq.n	269c8 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   269b8:	230e      	movs	r3, #14
   269ba:	18fb      	adds	r3, r7, r3
   269bc:	220e      	movs	r2, #14
   269be:	18ba      	adds	r2, r7, r2
   269c0:	8812      	ldrh	r2, [r2, #0]
   269c2:	2140      	movs	r1, #64	; 0x40
   269c4:	430a      	orrs	r2, r1
   269c6:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   269c8:	683b      	ldr	r3, [r7, #0]
   269ca:	789b      	ldrb	r3, [r3, #2]
   269cc:	2b00      	cmp	r3, #0
   269ce:	d007      	beq.n	269e0 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   269d0:	230e      	movs	r3, #14
   269d2:	18fb      	adds	r3, r7, r3
   269d4:	220e      	movs	r2, #14
   269d6:	18ba      	adds	r2, r7, r2
   269d8:	8812      	ldrh	r2, [r2, #0]
   269da:	2180      	movs	r1, #128	; 0x80
   269dc:	430a      	orrs	r2, r1
   269de:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   269e0:	68bb      	ldr	r3, [r7, #8]
   269e2:	220e      	movs	r2, #14
   269e4:	18ba      	adds	r2, r7, r2
   269e6:	8812      	ldrh	r2, [r2, #0]
   269e8:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   269ea:	683b      	ldr	r3, [r7, #0]
   269ec:	78db      	ldrb	r3, [r3, #3]
   269ee:	2b00      	cmp	r3, #0
   269f0:	d008      	beq.n	26a04 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   269f2:	68bb      	ldr	r3, [r7, #8]
   269f4:	885b      	ldrh	r3, [r3, #2]
   269f6:	b29b      	uxth	r3, r3
   269f8:	2280      	movs	r2, #128	; 0x80
   269fa:	01d2      	lsls	r2, r2, #7
   269fc:	4313      	orrs	r3, r2
   269fe:	b29a      	uxth	r2, r3
   26a00:	68bb      	ldr	r3, [r7, #8]
   26a02:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   26a04:	230d      	movs	r3, #13
   26a06:	18fb      	adds	r3, r7, r3
   26a08:	2200      	movs	r2, #0
   26a0a:	701a      	strb	r2, [r3, #0]
   26a0c:	e017      	b.n	26a3e <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   26a0e:	230d      	movs	r3, #13
   26a10:	18fb      	adds	r3, r7, r3
   26a12:	781a      	ldrb	r2, [r3, #0]
   26a14:	0013      	movs	r3, r2
   26a16:	009b      	lsls	r3, r3, #2
   26a18:	189b      	adds	r3, r3, r2
   26a1a:	005b      	lsls	r3, r3, #1
   26a1c:	3308      	adds	r3, #8
   26a1e:	683a      	ldr	r2, [r7, #0]
   26a20:	18d1      	adds	r1, r2, r3
   26a22:	230d      	movs	r3, #13
   26a24:	18fb      	adds	r3, r7, r3
   26a26:	781a      	ldrb	r2, [r3, #0]
   26a28:	687b      	ldr	r3, [r7, #4]
   26a2a:	0018      	movs	r0, r3
   26a2c:	4b08      	ldr	r3, [pc, #32]	; (26a50 <_rtc_calendar_set_config+0xc4>)
   26a2e:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   26a30:	230d      	movs	r3, #13
   26a32:	18fb      	adds	r3, r7, r3
   26a34:	781a      	ldrb	r2, [r3, #0]
   26a36:	230d      	movs	r3, #13
   26a38:	18fb      	adds	r3, r7, r3
   26a3a:	3201      	adds	r2, #1
   26a3c:	701a      	strb	r2, [r3, #0]
   26a3e:	230d      	movs	r3, #13
   26a40:	18fb      	adds	r3, r7, r3
   26a42:	781b      	ldrb	r3, [r3, #0]
   26a44:	2b00      	cmp	r3, #0
   26a46:	d0e2      	beq.n	26a0e <_rtc_calendar_set_config+0x82>
	}
}
   26a48:	46c0      	nop			; (mov r8, r8)
   26a4a:	46bd      	mov	sp, r7
   26a4c:	b004      	add	sp, #16
   26a4e:	bd80      	pop	{r7, pc}
   26a50:	00026b75 	.word	0x00026b75

00026a54 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   26a54:	b580      	push	{r7, lr}
   26a56:	b086      	sub	sp, #24
   26a58:	af00      	add	r7, sp, #0
   26a5a:	60f8      	str	r0, [r7, #12]
   26a5c:	60b9      	str	r1, [r7, #8]
   26a5e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   26a60:	68fb      	ldr	r3, [r7, #12]
   26a62:	68ba      	ldr	r2, [r7, #8]
   26a64:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   26a66:	2120      	movs	r1, #32
   26a68:	2000      	movs	r0, #0
   26a6a:	4b18      	ldr	r3, [pc, #96]	; (26acc <rtc_calendar_init+0x78>)
   26a6c:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   26a6e:	2314      	movs	r3, #20
   26a70:	18fb      	adds	r3, r7, r3
   26a72:	0018      	movs	r0, r3
   26a74:	4b16      	ldr	r3, [pc, #88]	; (26ad0 <rtc_calendar_init+0x7c>)
   26a76:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   26a78:	2314      	movs	r3, #20
   26a7a:	18fb      	adds	r3, r7, r3
   26a7c:	2202      	movs	r2, #2
   26a7e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   26a80:	2314      	movs	r3, #20
   26a82:	18fb      	adds	r3, r7, r3
   26a84:	0019      	movs	r1, r3
   26a86:	2004      	movs	r0, #4
   26a88:	4b12      	ldr	r3, [pc, #72]	; (26ad4 <rtc_calendar_init+0x80>)
   26a8a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   26a8c:	2004      	movs	r0, #4
   26a8e:	4b12      	ldr	r3, [pc, #72]	; (26ad8 <rtc_calendar_init+0x84>)
   26a90:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   26a92:	68fb      	ldr	r3, [r7, #12]
   26a94:	0018      	movs	r0, r3
   26a96:	4b11      	ldr	r3, [pc, #68]	; (26adc <rtc_calendar_init+0x88>)
   26a98:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   26a9a:	687b      	ldr	r3, [r7, #4]
   26a9c:	791a      	ldrb	r2, [r3, #4]
   26a9e:	68fb      	ldr	r3, [r7, #12]
   26aa0:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   26aa2:	687b      	ldr	r3, [r7, #4]
   26aa4:	78da      	ldrb	r2, [r3, #3]
   26aa6:	68fb      	ldr	r3, [r7, #12]
   26aa8:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   26aaa:	687b      	ldr	r3, [r7, #4]
   26aac:	88da      	ldrh	r2, [r3, #6]
   26aae:	68fb      	ldr	r3, [r7, #12]
   26ab0:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   26ab2:	4b0b      	ldr	r3, [pc, #44]	; (26ae0 <rtc_calendar_init+0x8c>)
   26ab4:	68fa      	ldr	r2, [r7, #12]
   26ab6:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   26ab8:	687a      	ldr	r2, [r7, #4]
   26aba:	68fb      	ldr	r3, [r7, #12]
   26abc:	0011      	movs	r1, r2
   26abe:	0018      	movs	r0, r3
   26ac0:	4b08      	ldr	r3, [pc, #32]	; (26ae4 <rtc_calendar_init+0x90>)
   26ac2:	4798      	blx	r3
}
   26ac4:	46c0      	nop			; (mov r8, r8)
   26ac6:	46bd      	mov	sp, r7
   26ac8:	b006      	add	sp, #24
   26aca:	bd80      	pop	{r7, pc}
   26acc:	000266a1 	.word	0x000266a1
   26ad0:	00026689 	.word	0x00026689
   26ad4:	00029ab9 	.word	0x00029ab9
   26ad8:	00029afd 	.word	0x00029afd
   26adc:	00026815 	.word	0x00026815
   26ae0:	20005a34 	.word	0x20005a34
   26ae4:	0002698d 	.word	0x0002698d

00026ae8 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   26ae8:	b580      	push	{r7, lr}
   26aea:	b084      	sub	sp, #16
   26aec:	af00      	add	r7, sp, #0
   26aee:	6078      	str	r0, [r7, #4]
   26af0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26af2:	687b      	ldr	r3, [r7, #4]
   26af4:	681b      	ldr	r3, [r3, #0]
   26af6:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   26af8:	687b      	ldr	r3, [r7, #4]
   26afa:	795b      	ldrb	r3, [r3, #5]
   26afc:	2201      	movs	r2, #1
   26afe:	4053      	eors	r3, r2
   26b00:	b2db      	uxtb	r3, r3
   26b02:	2b00      	cmp	r3, #0
   26b04:	d00a      	beq.n	26b1c <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   26b06:	68fb      	ldr	r3, [r7, #12]
   26b08:	4a16      	ldr	r2, [pc, #88]	; (26b64 <rtc_calendar_get_time+0x7c>)
   26b0a:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   26b0c:	46c0      	nop			; (mov r8, r8)
   26b0e:	687b      	ldr	r3, [r7, #4]
   26b10:	0018      	movs	r0, r3
   26b12:	4b15      	ldr	r3, [pc, #84]	; (26b68 <rtc_calendar_get_time+0x80>)
   26b14:	4798      	blx	r3
   26b16:	1e03      	subs	r3, r0, #0
   26b18:	d1f9      	bne.n	26b0e <rtc_calendar_get_time+0x26>
   26b1a:	e016      	b.n	26b4a <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   26b1c:	68fb      	ldr	r3, [r7, #12]
   26b1e:	885b      	ldrh	r3, [r3, #2]
   26b20:	b29b      	uxth	r3, r3
   26b22:	001a      	movs	r2, r3
   26b24:	2380      	movs	r3, #128	; 0x80
   26b26:	01db      	lsls	r3, r3, #7
   26b28:	4013      	ands	r3, r2
   26b2a:	d10e      	bne.n	26b4a <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   26b2c:	68fb      	ldr	r3, [r7, #12]
   26b2e:	885b      	ldrh	r3, [r3, #2]
   26b30:	b29b      	uxth	r3, r3
   26b32:	4a0e      	ldr	r2, [pc, #56]	; (26b6c <rtc_calendar_get_time+0x84>)
   26b34:	4313      	orrs	r3, r2
   26b36:	b29a      	uxth	r2, r3
   26b38:	68fb      	ldr	r3, [r7, #12]
   26b3a:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   26b3c:	46c0      	nop			; (mov r8, r8)
   26b3e:	687b      	ldr	r3, [r7, #4]
   26b40:	0018      	movs	r0, r3
   26b42:	4b09      	ldr	r3, [pc, #36]	; (26b68 <rtc_calendar_get_time+0x80>)
   26b44:	4798      	blx	r3
   26b46:	1e03      	subs	r3, r0, #0
   26b48:	d1f9      	bne.n	26b3e <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   26b4a:	68fb      	ldr	r3, [r7, #12]
   26b4c:	691b      	ldr	r3, [r3, #16]
   26b4e:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   26b50:	683a      	ldr	r2, [r7, #0]
   26b52:	68b9      	ldr	r1, [r7, #8]
   26b54:	687b      	ldr	r3, [r7, #4]
   26b56:	0018      	movs	r0, r3
   26b58:	4b05      	ldr	r3, [pc, #20]	; (26b70 <rtc_calendar_get_time+0x88>)
   26b5a:	4798      	blx	r3
}
   26b5c:	46c0      	nop			; (mov r8, r8)
   26b5e:	46bd      	mov	sp, r7
   26b60:	b004      	add	sp, #16
   26b62:	bd80      	pop	{r7, pc}
   26b64:	ffff8000 	.word	0xffff8000
   26b68:	00026759 	.word	0x00026759
   26b6c:	ffffc000 	.word	0xffffc000
   26b70:	000268ed 	.word	0x000268ed

00026b74 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   26b74:	b580      	push	{r7, lr}
   26b76:	b086      	sub	sp, #24
   26b78:	af00      	add	r7, sp, #0
   26b7a:	60f8      	str	r0, [r7, #12]
   26b7c:	60b9      	str	r1, [r7, #8]
   26b7e:	1dfb      	adds	r3, r7, #7
   26b80:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26b82:	68fb      	ldr	r3, [r7, #12]
   26b84:	681b      	ldr	r3, [r3, #0]
   26b86:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   26b88:	1dfb      	adds	r3, r7, #7
   26b8a:	781b      	ldrb	r3, [r3, #0]
   26b8c:	2b01      	cmp	r3, #1
   26b8e:	d901      	bls.n	26b94 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   26b90:	2317      	movs	r3, #23
   26b92:	e021      	b.n	26bd8 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   26b94:	68ba      	ldr	r2, [r7, #8]
   26b96:	68fb      	ldr	r3, [r7, #12]
   26b98:	0011      	movs	r1, r2
   26b9a:	0018      	movs	r0, r3
   26b9c:	4b10      	ldr	r3, [pc, #64]	; (26be0 <rtc_calendar_set_alarm+0x6c>)
   26b9e:	4798      	blx	r3
   26ba0:	0003      	movs	r3, r0
   26ba2:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   26ba4:	46c0      	nop			; (mov r8, r8)
   26ba6:	68fb      	ldr	r3, [r7, #12]
   26ba8:	0018      	movs	r0, r3
   26baa:	4b0e      	ldr	r3, [pc, #56]	; (26be4 <rtc_calendar_set_alarm+0x70>)
   26bac:	4798      	blx	r3
   26bae:	1e03      	subs	r3, r0, #0
   26bb0:	d1f9      	bne.n	26ba6 <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   26bb2:	1dfb      	adds	r3, r7, #7
   26bb4:	781a      	ldrb	r2, [r3, #0]
   26bb6:	697b      	ldr	r3, [r7, #20]
   26bb8:	3203      	adds	r2, #3
   26bba:	00d2      	lsls	r2, r2, #3
   26bbc:	6939      	ldr	r1, [r7, #16]
   26bbe:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   26bc0:	1dfb      	adds	r3, r7, #7
   26bc2:	781b      	ldrb	r3, [r3, #0]
   26bc4:	68ba      	ldr	r2, [r7, #8]
   26bc6:	7a11      	ldrb	r1, [r2, #8]
   26bc8:	697a      	ldr	r2, [r7, #20]
   26bca:	3303      	adds	r3, #3
   26bcc:	00db      	lsls	r3, r3, #3
   26bce:	18d3      	adds	r3, r2, r3
   26bd0:	3304      	adds	r3, #4
   26bd2:	1c0a      	adds	r2, r1, #0
   26bd4:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   26bd6:	2300      	movs	r3, #0
}
   26bd8:	0018      	movs	r0, r3
   26bda:	46bd      	mov	sp, r7
   26bdc:	b006      	add	sp, #24
   26bde:	bd80      	pop	{r7, pc}
   26be0:	00026865 	.word	0x00026865
   26be4:	00026759 	.word	0x00026759

00026be8 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   26be8:	b580      	push	{r7, lr}
   26bea:	b086      	sub	sp, #24
   26bec:	af00      	add	r7, sp, #0
   26bee:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   26bf0:	4b28      	ldr	r3, [pc, #160]	; (26c94 <_rtc_interrupt_handler+0xac>)
   26bf2:	687a      	ldr	r2, [r7, #4]
   26bf4:	0092      	lsls	r2, r2, #2
   26bf6:	58d3      	ldr	r3, [r2, r3]
   26bf8:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   26bfa:	697b      	ldr	r3, [r7, #20]
   26bfc:	681b      	ldr	r3, [r3, #0]
   26bfe:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   26c00:	230e      	movs	r3, #14
   26c02:	18fb      	adds	r3, r7, r3
   26c04:	697a      	ldr	r2, [r7, #20]
   26c06:	8a52      	ldrh	r2, [r2, #18]
   26c08:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   26c0a:	697b      	ldr	r3, [r7, #20]
   26c0c:	8a1b      	ldrh	r3, [r3, #16]
   26c0e:	b29a      	uxth	r2, r3
   26c10:	230e      	movs	r3, #14
   26c12:	18fb      	adds	r3, r7, r3
   26c14:	210e      	movs	r1, #14
   26c16:	1879      	adds	r1, r7, r1
   26c18:	8809      	ldrh	r1, [r1, #0]
   26c1a:	400a      	ands	r2, r1
   26c1c:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   26c1e:	693b      	ldr	r3, [r7, #16]
   26c20:	7a1b      	ldrb	r3, [r3, #8]
   26c22:	b2da      	uxtb	r2, r3
   26c24:	230c      	movs	r3, #12
   26c26:	18fb      	adds	r3, r7, r3
   26c28:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   26c2a:	693b      	ldr	r3, [r7, #16]
   26c2c:	79db      	ldrb	r3, [r3, #7]
   26c2e:	b2db      	uxtb	r3, r3
   26c30:	b29a      	uxth	r2, r3
   26c32:	230c      	movs	r3, #12
   26c34:	18fb      	adds	r3, r7, r3
   26c36:	210c      	movs	r1, #12
   26c38:	1879      	adds	r1, r7, r1
   26c3a:	8809      	ldrh	r1, [r1, #0]
   26c3c:	400a      	ands	r2, r1
   26c3e:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   26c40:	230c      	movs	r3, #12
   26c42:	18fb      	adds	r3, r7, r3
   26c44:	881b      	ldrh	r3, [r3, #0]
   26c46:	2280      	movs	r2, #128	; 0x80
   26c48:	4013      	ands	r3, r2
   26c4a:	d00c      	beq.n	26c66 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   26c4c:	230e      	movs	r3, #14
   26c4e:	18fb      	adds	r3, r7, r3
   26c50:	881b      	ldrh	r3, [r3, #0]
   26c52:	2202      	movs	r2, #2
   26c54:	4013      	ands	r3, r2
   26c56:	d002      	beq.n	26c5e <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   26c58:	697b      	ldr	r3, [r7, #20]
   26c5a:	68db      	ldr	r3, [r3, #12]
   26c5c:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   26c5e:	693b      	ldr	r3, [r7, #16]
   26c60:	2280      	movs	r2, #128	; 0x80
   26c62:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   26c64:	e011      	b.n	26c8a <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   26c66:	230c      	movs	r3, #12
   26c68:	18fb      	adds	r3, r7, r3
   26c6a:	881b      	ldrh	r3, [r3, #0]
   26c6c:	2201      	movs	r2, #1
   26c6e:	4013      	ands	r3, r2
   26c70:	d00b      	beq.n	26c8a <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   26c72:	230e      	movs	r3, #14
   26c74:	18fb      	adds	r3, r7, r3
   26c76:	881b      	ldrh	r3, [r3, #0]
   26c78:	2201      	movs	r2, #1
   26c7a:	4013      	ands	r3, r2
   26c7c:	d002      	beq.n	26c84 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   26c7e:	697b      	ldr	r3, [r7, #20]
   26c80:	689b      	ldr	r3, [r3, #8]
   26c82:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   26c84:	693b      	ldr	r3, [r7, #16]
   26c86:	2201      	movs	r2, #1
   26c88:	721a      	strb	r2, [r3, #8]
}
   26c8a:	46c0      	nop			; (mov r8, r8)
   26c8c:	46bd      	mov	sp, r7
   26c8e:	b006      	add	sp, #24
   26c90:	bd80      	pop	{r7, pc}
   26c92:	46c0      	nop			; (mov r8, r8)
   26c94:	20005a34 	.word	0x20005a34

00026c98 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   26c98:	b580      	push	{r7, lr}
   26c9a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   26c9c:	2000      	movs	r0, #0
   26c9e:	4b02      	ldr	r3, [pc, #8]	; (26ca8 <RTC_Handler+0x10>)
   26ca0:	4798      	blx	r3
}
   26ca2:	46c0      	nop			; (mov r8, r8)
   26ca4:	46bd      	mov	sp, r7
   26ca6:	bd80      	pop	{r7, pc}
   26ca8:	00026be9 	.word	0x00026be9

00026cac <system_gclk_chan_get_config_defaults>:
{
   26cac:	b580      	push	{r7, lr}
   26cae:	b082      	sub	sp, #8
   26cb0:	af00      	add	r7, sp, #0
   26cb2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26cb4:	687b      	ldr	r3, [r7, #4]
   26cb6:	2200      	movs	r2, #0
   26cb8:	701a      	strb	r2, [r3, #0]
}
   26cba:	46c0      	nop			; (mov r8, r8)
   26cbc:	46bd      	mov	sp, r7
   26cbe:	b002      	add	sp, #8
   26cc0:	bd80      	pop	{r7, pc}

00026cc2 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   26cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
   26cc4:	b08d      	sub	sp, #52	; 0x34
   26cc6:	af00      	add	r7, sp, #0
   26cc8:	60b8      	str	r0, [r7, #8]
   26cca:	60f9      	str	r1, [r7, #12]
   26ccc:	603a      	str	r2, [r7, #0]
   26cce:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   26cd0:	2300      	movs	r3, #0
   26cd2:	2400      	movs	r4, #0
   26cd4:	623b      	str	r3, [r7, #32]
   26cd6:	627c      	str	r4, [r7, #36]	; 0x24
   26cd8:	2300      	movs	r3, #0
   26cda:	2400      	movs	r4, #0
   26cdc:	61bb      	str	r3, [r7, #24]
   26cde:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   26ce0:	233f      	movs	r3, #63	; 0x3f
   26ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
   26ce4:	e053      	b.n	26d8e <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   26ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26ce8:	3b20      	subs	r3, #32
   26cea:	2b00      	cmp	r3, #0
   26cec:	db04      	blt.n	26cf8 <long_division+0x36>
   26cee:	2201      	movs	r2, #1
   26cf0:	409a      	lsls	r2, r3
   26cf2:	0013      	movs	r3, r2
   26cf4:	617b      	str	r3, [r7, #20]
   26cf6:	e00b      	b.n	26d10 <long_division+0x4e>
   26cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26cfa:	2220      	movs	r2, #32
   26cfc:	1ad3      	subs	r3, r2, r3
   26cfe:	2201      	movs	r2, #1
   26d00:	40da      	lsrs	r2, r3
   26d02:	0013      	movs	r3, r2
   26d04:	2100      	movs	r1, #0
   26d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   26d08:	4091      	lsls	r1, r2
   26d0a:	000a      	movs	r2, r1
   26d0c:	4313      	orrs	r3, r2
   26d0e:	617b      	str	r3, [r7, #20]
   26d10:	2201      	movs	r2, #1
   26d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26d14:	409a      	lsls	r2, r3
   26d16:	0013      	movs	r3, r2
   26d18:	613b      	str	r3, [r7, #16]

		r = r << 1;
   26d1a:	69bb      	ldr	r3, [r7, #24]
   26d1c:	69fc      	ldr	r4, [r7, #28]
   26d1e:	18db      	adds	r3, r3, r3
   26d20:	4164      	adcs	r4, r4
   26d22:	61bb      	str	r3, [r7, #24]
   26d24:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   26d26:	68bb      	ldr	r3, [r7, #8]
   26d28:	693a      	ldr	r2, [r7, #16]
   26d2a:	401a      	ands	r2, r3
   26d2c:	0015      	movs	r5, r2
   26d2e:	68fb      	ldr	r3, [r7, #12]
   26d30:	697a      	ldr	r2, [r7, #20]
   26d32:	401a      	ands	r2, r3
   26d34:	0016      	movs	r6, r2
   26d36:	002b      	movs	r3, r5
   26d38:	4333      	orrs	r3, r6
   26d3a:	d007      	beq.n	26d4c <long_division+0x8a>
			r |= 0x01;
   26d3c:	69bb      	ldr	r3, [r7, #24]
   26d3e:	2201      	movs	r2, #1
   26d40:	4313      	orrs	r3, r2
   26d42:	61bb      	str	r3, [r7, #24]
   26d44:	69fb      	ldr	r3, [r7, #28]
   26d46:	2200      	movs	r2, #0
   26d48:	4313      	orrs	r3, r2
   26d4a:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   26d4c:	687a      	ldr	r2, [r7, #4]
   26d4e:	69fb      	ldr	r3, [r7, #28]
   26d50:	429a      	cmp	r2, r3
   26d52:	d819      	bhi.n	26d88 <long_division+0xc6>
   26d54:	687a      	ldr	r2, [r7, #4]
   26d56:	69fb      	ldr	r3, [r7, #28]
   26d58:	429a      	cmp	r2, r3
   26d5a:	d103      	bne.n	26d64 <long_division+0xa2>
   26d5c:	683a      	ldr	r2, [r7, #0]
   26d5e:	69bb      	ldr	r3, [r7, #24]
   26d60:	429a      	cmp	r2, r3
   26d62:	d811      	bhi.n	26d88 <long_division+0xc6>
			r = r - d;
   26d64:	69b9      	ldr	r1, [r7, #24]
   26d66:	69fa      	ldr	r2, [r7, #28]
   26d68:	683b      	ldr	r3, [r7, #0]
   26d6a:	687c      	ldr	r4, [r7, #4]
   26d6c:	1ac9      	subs	r1, r1, r3
   26d6e:	41a2      	sbcs	r2, r4
   26d70:	000b      	movs	r3, r1
   26d72:	0014      	movs	r4, r2
   26d74:	61bb      	str	r3, [r7, #24]
   26d76:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   26d78:	6a3a      	ldr	r2, [r7, #32]
   26d7a:	693b      	ldr	r3, [r7, #16]
   26d7c:	4313      	orrs	r3, r2
   26d7e:	623b      	str	r3, [r7, #32]
   26d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   26d82:	697b      	ldr	r3, [r7, #20]
   26d84:	4313      	orrs	r3, r2
   26d86:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   26d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26d8a:	3b01      	subs	r3, #1
   26d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   26d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26d90:	2b00      	cmp	r3, #0
   26d92:	daa8      	bge.n	26ce6 <long_division+0x24>
		}
	}

	return q;
   26d94:	6a3b      	ldr	r3, [r7, #32]
   26d96:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   26d98:	0018      	movs	r0, r3
   26d9a:	0021      	movs	r1, r4
   26d9c:	46bd      	mov	sp, r7
   26d9e:	b00d      	add	sp, #52	; 0x34
   26da0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026da2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   26da2:	b580      	push	{r7, lr}
   26da4:	b086      	sub	sp, #24
   26da6:	af00      	add	r7, sp, #0
   26da8:	60f8      	str	r0, [r7, #12]
   26daa:	60b9      	str	r1, [r7, #8]
   26dac:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   26dae:	2316      	movs	r3, #22
   26db0:	18fb      	adds	r3, r7, r3
   26db2:	2200      	movs	r2, #0
   26db4:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   26db6:	68bb      	ldr	r3, [r7, #8]
   26db8:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   26dba:	68bb      	ldr	r3, [r7, #8]
   26dbc:	085a      	lsrs	r2, r3, #1
   26dbe:	68fb      	ldr	r3, [r7, #12]
   26dc0:	429a      	cmp	r2, r3
   26dc2:	d201      	bcs.n	26dc8 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26dc4:	2340      	movs	r3, #64	; 0x40
   26dc6:	e026      	b.n	26e16 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   26dc8:	68bb      	ldr	r3, [r7, #8]
   26dca:	085b      	lsrs	r3, r3, #1
   26dcc:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   26dce:	e00a      	b.n	26de6 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   26dd0:	693a      	ldr	r2, [r7, #16]
   26dd2:	68fb      	ldr	r3, [r7, #12]
   26dd4:	1ad3      	subs	r3, r2, r3
   26dd6:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   26dd8:	2316      	movs	r3, #22
   26dda:	18fb      	adds	r3, r7, r3
   26ddc:	881a      	ldrh	r2, [r3, #0]
   26dde:	2316      	movs	r3, #22
   26de0:	18fb      	adds	r3, r7, r3
   26de2:	3201      	adds	r2, #1
   26de4:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   26de6:	693a      	ldr	r2, [r7, #16]
   26de8:	68fb      	ldr	r3, [r7, #12]
   26dea:	429a      	cmp	r2, r3
   26dec:	d2f0      	bcs.n	26dd0 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   26dee:	2316      	movs	r3, #22
   26df0:	18fb      	adds	r3, r7, r3
   26df2:	2216      	movs	r2, #22
   26df4:	18ba      	adds	r2, r7, r2
   26df6:	8812      	ldrh	r2, [r2, #0]
   26df8:	3a01      	subs	r2, #1
   26dfa:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   26dfc:	2316      	movs	r3, #22
   26dfe:	18fb      	adds	r3, r7, r3
   26e00:	881b      	ldrh	r3, [r3, #0]
   26e02:	2bff      	cmp	r3, #255	; 0xff
   26e04:	d901      	bls.n	26e0a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26e06:	2340      	movs	r3, #64	; 0x40
   26e08:	e005      	b.n	26e16 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   26e0a:	687b      	ldr	r3, [r7, #4]
   26e0c:	2216      	movs	r2, #22
   26e0e:	18ba      	adds	r2, r7, r2
   26e10:	8812      	ldrh	r2, [r2, #0]
   26e12:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   26e14:	2300      	movs	r3, #0
	}
}
   26e16:	0018      	movs	r0, r3
   26e18:	46bd      	mov	sp, r7
   26e1a:	b006      	add	sp, #24
   26e1c:	bd80      	pop	{r7, pc}
	...

00026e20 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   26e20:	b5f0      	push	{r4, r5, r6, r7, lr}
   26e22:	b0a1      	sub	sp, #132	; 0x84
   26e24:	af00      	add	r7, sp, #0
   26e26:	64f8      	str	r0, [r7, #76]	; 0x4c
   26e28:	64b9      	str	r1, [r7, #72]	; 0x48
   26e2a:	647a      	str	r2, [r7, #68]	; 0x44
   26e2c:	2243      	movs	r2, #67	; 0x43
   26e2e:	18ba      	adds	r2, r7, r2
   26e30:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   26e32:	2300      	movs	r3, #0
   26e34:	2400      	movs	r4, #0
   26e36:	673b      	str	r3, [r7, #112]	; 0x70
   26e38:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   26e3a:	2300      	movs	r3, #0
   26e3c:	2400      	movs	r4, #0
   26e3e:	66bb      	str	r3, [r7, #104]	; 0x68
   26e40:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   26e42:	2300      	movs	r3, #0
   26e44:	2400      	movs	r4, #0
   26e46:	67bb      	str	r3, [r7, #120]	; 0x78
   26e48:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   26e4a:	2300      	movs	r3, #0
   26e4c:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   26e4e:	2358      	movs	r3, #88	; 0x58
   26e50:	2240      	movs	r2, #64	; 0x40
   26e52:	4694      	mov	ip, r2
   26e54:	44bc      	add	ip, r7
   26e56:	4463      	add	r3, ip
   26e58:	781a      	ldrb	r2, [r3, #0]
   26e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   26e5c:	435a      	muls	r2, r3
   26e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26e60:	429a      	cmp	r2, r3
   26e62:	d901      	bls.n	26e68 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26e64:	2340      	movs	r3, #64	; 0x40
   26e66:	e0b3      	b.n	26fd0 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   26e68:	2343      	movs	r3, #67	; 0x43
   26e6a:	18fb      	adds	r3, r7, r3
   26e6c:	781b      	ldrb	r3, [r3, #0]
   26e6e:	2b00      	cmp	r3, #0
   26e70:	d13d      	bne.n	26eee <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   26e72:	2358      	movs	r3, #88	; 0x58
   26e74:	2240      	movs	r2, #64	; 0x40
   26e76:	4694      	mov	ip, r2
   26e78:	44bc      	add	ip, r7
   26e7a:	4463      	add	r3, ip
   26e7c:	781b      	ldrb	r3, [r3, #0]
   26e7e:	b2db      	uxtb	r3, r3
   26e80:	613b      	str	r3, [r7, #16]
   26e82:	2300      	movs	r3, #0
   26e84:	617b      	str	r3, [r7, #20]
   26e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   26e88:	60bb      	str	r3, [r7, #8]
   26e8a:	2300      	movs	r3, #0
   26e8c:	60fb      	str	r3, [r7, #12]
   26e8e:	4c52      	ldr	r4, [pc, #328]	; (26fd8 <_sercom_get_async_baud_val+0x1b8>)
   26e90:	68ba      	ldr	r2, [r7, #8]
   26e92:	68fb      	ldr	r3, [r7, #12]
   26e94:	6938      	ldr	r0, [r7, #16]
   26e96:	6979      	ldr	r1, [r7, #20]
   26e98:	47a0      	blx	r4
   26e9a:	0003      	movs	r3, r0
   26e9c:	000c      	movs	r4, r1
   26e9e:	001b      	movs	r3, r3
   26ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
   26ea2:	2300      	movs	r3, #0
   26ea4:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   26ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26ea8:	603b      	str	r3, [r7, #0]
   26eaa:	2300      	movs	r3, #0
   26eac:	607b      	str	r3, [r7, #4]
   26eae:	6db8      	ldr	r0, [r7, #88]	; 0x58
   26eb0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   26eb2:	683a      	ldr	r2, [r7, #0]
   26eb4:	687b      	ldr	r3, [r7, #4]
   26eb6:	4c49      	ldr	r4, [pc, #292]	; (26fdc <_sercom_get_async_baud_val+0x1bc>)
   26eb8:	47a0      	blx	r4
   26eba:	0003      	movs	r3, r0
   26ebc:	000c      	movs	r4, r1
   26ebe:	673b      	str	r3, [r7, #112]	; 0x70
   26ec0:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   26ec2:	2100      	movs	r1, #0
   26ec4:	2201      	movs	r2, #1
   26ec6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26ec8:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   26eca:	1ac9      	subs	r1, r1, r3
   26ecc:	41a2      	sbcs	r2, r4
   26ece:	000b      	movs	r3, r1
   26ed0:	0014      	movs	r4, r2
   26ed2:	66bb      	str	r3, [r7, #104]	; 0x68
   26ed4:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   26ed6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26ed8:	0c1b      	lsrs	r3, r3, #16
   26eda:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   26edc:	0416      	lsls	r6, r2, #16
   26ede:	431e      	orrs	r6, r3
   26ee0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26ee2:	041d      	lsls	r5, r3, #16
   26ee4:	0033      	movs	r3, r6
   26ee6:	67bb      	str	r3, [r7, #120]	; 0x78
   26ee8:	2300      	movs	r3, #0
   26eea:	67fb      	str	r3, [r7, #124]	; 0x7c
   26eec:	e06a      	b.n	26fc4 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   26eee:	2343      	movs	r3, #67	; 0x43
   26ef0:	18fb      	adds	r3, r7, r3
   26ef2:	781b      	ldrb	r3, [r3, #0]
   26ef4:	2b01      	cmp	r3, #1
   26ef6:	d165      	bne.n	26fc4 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   26ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   26efa:	633b      	str	r3, [r7, #48]	; 0x30
   26efc:	2300      	movs	r3, #0
   26efe:	637b      	str	r3, [r7, #52]	; 0x34
   26f00:	2358      	movs	r3, #88	; 0x58
   26f02:	2240      	movs	r2, #64	; 0x40
   26f04:	4694      	mov	ip, r2
   26f06:	44bc      	add	ip, r7
   26f08:	4463      	add	r3, ip
   26f0a:	781b      	ldrb	r3, [r3, #0]
   26f0c:	b2db      	uxtb	r3, r3
   26f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   26f10:	2300      	movs	r3, #0
   26f12:	62fb      	str	r3, [r7, #44]	; 0x2c
   26f14:	4c30      	ldr	r4, [pc, #192]	; (26fd8 <_sercom_get_async_baud_val+0x1b8>)
   26f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
   26f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26f1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   26f1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
   26f1e:	47a0      	blx	r4
   26f20:	0003      	movs	r3, r0
   26f22:	000c      	movs	r4, r1
   26f24:	65bb      	str	r3, [r7, #88]	; 0x58
   26f26:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   26f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26f2a:	623b      	str	r3, [r7, #32]
   26f2c:	2300      	movs	r3, #0
   26f2e:	627b      	str	r3, [r7, #36]	; 0x24
   26f30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26f32:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   26f34:	001a      	movs	r2, r3
   26f36:	0023      	movs	r3, r4
   26f38:	6a38      	ldr	r0, [r7, #32]
   26f3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
   26f3c:	4c27      	ldr	r4, [pc, #156]	; (26fdc <_sercom_get_async_baud_val+0x1bc>)
   26f3e:	47a0      	blx	r4
   26f40:	0003      	movs	r3, r0
   26f42:	000c      	movs	r4, r1
   26f44:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   26f46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   26f48:	2380      	movs	r3, #128	; 0x80
   26f4a:	019b      	lsls	r3, r3, #6
   26f4c:	429a      	cmp	r2, r3
   26f4e:	d901      	bls.n	26f54 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26f50:	2340      	movs	r3, #64	; 0x40
   26f52:	e03d      	b.n	26fd0 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   26f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26f56:	61bb      	str	r3, [r7, #24]
   26f58:	2300      	movs	r3, #0
   26f5a:	61fb      	str	r3, [r7, #28]
   26f5c:	69b9      	ldr	r1, [r7, #24]
   26f5e:	69fa      	ldr	r2, [r7, #28]
   26f60:	000b      	movs	r3, r1
   26f62:	0f5b      	lsrs	r3, r3, #29
   26f64:	0010      	movs	r0, r2
   26f66:	00c0      	lsls	r0, r0, #3
   26f68:	63f8      	str	r0, [r7, #60]	; 0x3c
   26f6a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   26f6c:	4318      	orrs	r0, r3
   26f6e:	63f8      	str	r0, [r7, #60]	; 0x3c
   26f70:	000b      	movs	r3, r1
   26f72:	00db      	lsls	r3, r3, #3
   26f74:	63bb      	str	r3, [r7, #56]	; 0x38
   26f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26f78:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   26f7a:	001a      	movs	r2, r3
   26f7c:	0023      	movs	r3, r4
   26f7e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   26f80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   26f82:	4c16      	ldr	r4, [pc, #88]	; (26fdc <_sercom_get_async_baud_val+0x1bc>)
   26f84:	47a0      	blx	r4
   26f86:	0003      	movs	r3, r0
   26f88:	000c      	movs	r4, r1
   26f8a:	65bb      	str	r3, [r7, #88]	; 0x58
   26f8c:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   26f8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26f90:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   26f92:	b2d9      	uxtb	r1, r3
   26f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   26f96:	b2db      	uxtb	r3, r3
   26f98:	00db      	lsls	r3, r3, #3
   26f9a:	b2da      	uxtb	r2, r3
   26f9c:	2317      	movs	r3, #23
   26f9e:	2040      	movs	r0, #64	; 0x40
   26fa0:	4684      	mov	ip, r0
   26fa2:	44bc      	add	ip, r7
   26fa4:	4463      	add	r3, ip
   26fa6:	1a8a      	subs	r2, r1, r2
   26fa8:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   26faa:	2317      	movs	r3, #23
   26fac:	2240      	movs	r2, #64	; 0x40
   26fae:	4694      	mov	ip, r2
   26fb0:	44bc      	add	ip, r7
   26fb2:	4463      	add	r3, ip
   26fb4:	781b      	ldrb	r3, [r3, #0]
   26fb6:	035b      	lsls	r3, r3, #13
   26fb8:	001a      	movs	r2, r3
   26fba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   26fbc:	4313      	orrs	r3, r2
   26fbe:	67bb      	str	r3, [r7, #120]	; 0x78
   26fc0:	2300      	movs	r3, #0
   26fc2:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   26fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   26fc6:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   26fc8:	b29a      	uxth	r2, r3
   26fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   26fcc:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   26fce:	2300      	movs	r3, #0
}
   26fd0:	0018      	movs	r0, r3
   26fd2:	46bd      	mov	sp, r7
   26fd4:	b021      	add	sp, #132	; 0x84
   26fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26fd8:	00032941 	.word	0x00032941
   26fdc:	00026cc3 	.word	0x00026cc3

00026fe0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   26fe0:	b580      	push	{r7, lr}
   26fe2:	b084      	sub	sp, #16
   26fe4:	af00      	add	r7, sp, #0
   26fe6:	0002      	movs	r2, r0
   26fe8:	1dfb      	adds	r3, r7, #7
   26fea:	701a      	strb	r2, [r3, #0]
   26fec:	1dbb      	adds	r3, r7, #6
   26fee:	1c0a      	adds	r2, r1, #0
   26ff0:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   26ff2:	4b1a      	ldr	r3, [pc, #104]	; (2705c <sercom_set_gclk_generator+0x7c>)
   26ff4:	781b      	ldrb	r3, [r3, #0]
   26ff6:	2201      	movs	r2, #1
   26ff8:	4053      	eors	r3, r2
   26ffa:	b2db      	uxtb	r3, r3
   26ffc:	2b00      	cmp	r3, #0
   26ffe:	d103      	bne.n	27008 <sercom_set_gclk_generator+0x28>
   27000:	1dbb      	adds	r3, r7, #6
   27002:	781b      	ldrb	r3, [r3, #0]
   27004:	2b00      	cmp	r3, #0
   27006:	d01b      	beq.n	27040 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27008:	230c      	movs	r3, #12
   2700a:	18fb      	adds	r3, r7, r3
   2700c:	0018      	movs	r0, r3
   2700e:	4b14      	ldr	r3, [pc, #80]	; (27060 <sercom_set_gclk_generator+0x80>)
   27010:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   27012:	230c      	movs	r3, #12
   27014:	18fb      	adds	r3, r7, r3
   27016:	1dfa      	adds	r2, r7, #7
   27018:	7812      	ldrb	r2, [r2, #0]
   2701a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   2701c:	230c      	movs	r3, #12
   2701e:	18fb      	adds	r3, r7, r3
   27020:	0019      	movs	r1, r3
   27022:	2013      	movs	r0, #19
   27024:	4b0f      	ldr	r3, [pc, #60]	; (27064 <sercom_set_gclk_generator+0x84>)
   27026:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   27028:	2013      	movs	r0, #19
   2702a:	4b0f      	ldr	r3, [pc, #60]	; (27068 <sercom_set_gclk_generator+0x88>)
   2702c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   2702e:	4b0b      	ldr	r3, [pc, #44]	; (2705c <sercom_set_gclk_generator+0x7c>)
   27030:	1dfa      	adds	r2, r7, #7
   27032:	7812      	ldrb	r2, [r2, #0]
   27034:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   27036:	4b09      	ldr	r3, [pc, #36]	; (2705c <sercom_set_gclk_generator+0x7c>)
   27038:	2201      	movs	r2, #1
   2703a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   2703c:	2300      	movs	r3, #0
   2703e:	e008      	b.n	27052 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   27040:	4b06      	ldr	r3, [pc, #24]	; (2705c <sercom_set_gclk_generator+0x7c>)
   27042:	785b      	ldrb	r3, [r3, #1]
   27044:	1dfa      	adds	r2, r7, #7
   27046:	7812      	ldrb	r2, [r2, #0]
   27048:	429a      	cmp	r2, r3
   2704a:	d101      	bne.n	27050 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   2704c:	2300      	movs	r3, #0
   2704e:	e000      	b.n	27052 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   27050:	231d      	movs	r3, #29
}
   27052:	0018      	movs	r0, r3
   27054:	46bd      	mov	sp, r7
   27056:	b004      	add	sp, #16
   27058:	bd80      	pop	{r7, pc}
   2705a:	46c0      	nop			; (mov r8, r8)
   2705c:	20004140 	.word	0x20004140
   27060:	00026cad 	.word	0x00026cad
   27064:	00029ab9 	.word	0x00029ab9
   27068:	00029afd 	.word	0x00029afd

0002706c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   2706c:	b580      	push	{r7, lr}
   2706e:	b082      	sub	sp, #8
   27070:	af00      	add	r7, sp, #0
   27072:	6078      	str	r0, [r7, #4]
   27074:	000a      	movs	r2, r1
   27076:	1cfb      	adds	r3, r7, #3
   27078:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   2707a:	687b      	ldr	r3, [r7, #4]
   2707c:	4a4d      	ldr	r2, [pc, #308]	; (271b4 <_sercom_get_default_pad+0x148>)
   2707e:	4293      	cmp	r3, r2
   27080:	d03f      	beq.n	27102 <_sercom_get_default_pad+0x96>
   27082:	4a4c      	ldr	r2, [pc, #304]	; (271b4 <_sercom_get_default_pad+0x148>)
   27084:	4293      	cmp	r3, r2
   27086:	d806      	bhi.n	27096 <_sercom_get_default_pad+0x2a>
   27088:	4a4b      	ldr	r2, [pc, #300]	; (271b8 <_sercom_get_default_pad+0x14c>)
   2708a:	4293      	cmp	r3, r2
   2708c:	d00f      	beq.n	270ae <_sercom_get_default_pad+0x42>
   2708e:	4a4b      	ldr	r2, [pc, #300]	; (271bc <_sercom_get_default_pad+0x150>)
   27090:	4293      	cmp	r3, r2
   27092:	d021      	beq.n	270d8 <_sercom_get_default_pad+0x6c>
   27094:	e089      	b.n	271aa <_sercom_get_default_pad+0x13e>
   27096:	4a4a      	ldr	r2, [pc, #296]	; (271c0 <_sercom_get_default_pad+0x154>)
   27098:	4293      	cmp	r3, r2
   2709a:	d100      	bne.n	2709e <_sercom_get_default_pad+0x32>
   2709c:	e05b      	b.n	27156 <_sercom_get_default_pad+0xea>
   2709e:	4a49      	ldr	r2, [pc, #292]	; (271c4 <_sercom_get_default_pad+0x158>)
   270a0:	4293      	cmp	r3, r2
   270a2:	d100      	bne.n	270a6 <_sercom_get_default_pad+0x3a>
   270a4:	e06c      	b.n	27180 <_sercom_get_default_pad+0x114>
   270a6:	4a48      	ldr	r2, [pc, #288]	; (271c8 <_sercom_get_default_pad+0x15c>)
   270a8:	4293      	cmp	r3, r2
   270aa:	d03f      	beq.n	2712c <_sercom_get_default_pad+0xc0>
   270ac:	e07d      	b.n	271aa <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   270ae:	1cfb      	adds	r3, r7, #3
   270b0:	781b      	ldrb	r3, [r3, #0]
   270b2:	2b01      	cmp	r3, #1
   270b4:	d00a      	beq.n	270cc <_sercom_get_default_pad+0x60>
   270b6:	dc02      	bgt.n	270be <_sercom_get_default_pad+0x52>
   270b8:	2b00      	cmp	r3, #0
   270ba:	d005      	beq.n	270c8 <_sercom_get_default_pad+0x5c>
   270bc:	e075      	b.n	271aa <_sercom_get_default_pad+0x13e>
   270be:	2b02      	cmp	r3, #2
   270c0:	d006      	beq.n	270d0 <_sercom_get_default_pad+0x64>
   270c2:	2b03      	cmp	r3, #3
   270c4:	d006      	beq.n	270d4 <_sercom_get_default_pad+0x68>
   270c6:	e070      	b.n	271aa <_sercom_get_default_pad+0x13e>
   270c8:	4b40      	ldr	r3, [pc, #256]	; (271cc <_sercom_get_default_pad+0x160>)
   270ca:	e06f      	b.n	271ac <_sercom_get_default_pad+0x140>
   270cc:	4b40      	ldr	r3, [pc, #256]	; (271d0 <_sercom_get_default_pad+0x164>)
   270ce:	e06d      	b.n	271ac <_sercom_get_default_pad+0x140>
   270d0:	4b40      	ldr	r3, [pc, #256]	; (271d4 <_sercom_get_default_pad+0x168>)
   270d2:	e06b      	b.n	271ac <_sercom_get_default_pad+0x140>
   270d4:	4b40      	ldr	r3, [pc, #256]	; (271d8 <_sercom_get_default_pad+0x16c>)
   270d6:	e069      	b.n	271ac <_sercom_get_default_pad+0x140>
   270d8:	1cfb      	adds	r3, r7, #3
   270da:	781b      	ldrb	r3, [r3, #0]
   270dc:	2b01      	cmp	r3, #1
   270de:	d00a      	beq.n	270f6 <_sercom_get_default_pad+0x8a>
   270e0:	dc02      	bgt.n	270e8 <_sercom_get_default_pad+0x7c>
   270e2:	2b00      	cmp	r3, #0
   270e4:	d005      	beq.n	270f2 <_sercom_get_default_pad+0x86>
   270e6:	e060      	b.n	271aa <_sercom_get_default_pad+0x13e>
   270e8:	2b02      	cmp	r3, #2
   270ea:	d006      	beq.n	270fa <_sercom_get_default_pad+0x8e>
   270ec:	2b03      	cmp	r3, #3
   270ee:	d006      	beq.n	270fe <_sercom_get_default_pad+0x92>
   270f0:	e05b      	b.n	271aa <_sercom_get_default_pad+0x13e>
   270f2:	2303      	movs	r3, #3
   270f4:	e05a      	b.n	271ac <_sercom_get_default_pad+0x140>
   270f6:	4b39      	ldr	r3, [pc, #228]	; (271dc <_sercom_get_default_pad+0x170>)
   270f8:	e058      	b.n	271ac <_sercom_get_default_pad+0x140>
   270fa:	4b39      	ldr	r3, [pc, #228]	; (271e0 <_sercom_get_default_pad+0x174>)
   270fc:	e056      	b.n	271ac <_sercom_get_default_pad+0x140>
   270fe:	4b39      	ldr	r3, [pc, #228]	; (271e4 <_sercom_get_default_pad+0x178>)
   27100:	e054      	b.n	271ac <_sercom_get_default_pad+0x140>
   27102:	1cfb      	adds	r3, r7, #3
   27104:	781b      	ldrb	r3, [r3, #0]
   27106:	2b01      	cmp	r3, #1
   27108:	d00a      	beq.n	27120 <_sercom_get_default_pad+0xb4>
   2710a:	dc02      	bgt.n	27112 <_sercom_get_default_pad+0xa6>
   2710c:	2b00      	cmp	r3, #0
   2710e:	d005      	beq.n	2711c <_sercom_get_default_pad+0xb0>
   27110:	e04b      	b.n	271aa <_sercom_get_default_pad+0x13e>
   27112:	2b02      	cmp	r3, #2
   27114:	d006      	beq.n	27124 <_sercom_get_default_pad+0xb8>
   27116:	2b03      	cmp	r3, #3
   27118:	d006      	beq.n	27128 <_sercom_get_default_pad+0xbc>
   2711a:	e046      	b.n	271aa <_sercom_get_default_pad+0x13e>
   2711c:	4b32      	ldr	r3, [pc, #200]	; (271e8 <_sercom_get_default_pad+0x17c>)
   2711e:	e045      	b.n	271ac <_sercom_get_default_pad+0x140>
   27120:	4b32      	ldr	r3, [pc, #200]	; (271ec <_sercom_get_default_pad+0x180>)
   27122:	e043      	b.n	271ac <_sercom_get_default_pad+0x140>
   27124:	4b32      	ldr	r3, [pc, #200]	; (271f0 <_sercom_get_default_pad+0x184>)
   27126:	e041      	b.n	271ac <_sercom_get_default_pad+0x140>
   27128:	4b32      	ldr	r3, [pc, #200]	; (271f4 <_sercom_get_default_pad+0x188>)
   2712a:	e03f      	b.n	271ac <_sercom_get_default_pad+0x140>
   2712c:	1cfb      	adds	r3, r7, #3
   2712e:	781b      	ldrb	r3, [r3, #0]
   27130:	2b01      	cmp	r3, #1
   27132:	d00a      	beq.n	2714a <_sercom_get_default_pad+0xde>
   27134:	dc02      	bgt.n	2713c <_sercom_get_default_pad+0xd0>
   27136:	2b00      	cmp	r3, #0
   27138:	d005      	beq.n	27146 <_sercom_get_default_pad+0xda>
   2713a:	e036      	b.n	271aa <_sercom_get_default_pad+0x13e>
   2713c:	2b02      	cmp	r3, #2
   2713e:	d006      	beq.n	2714e <_sercom_get_default_pad+0xe2>
   27140:	2b03      	cmp	r3, #3
   27142:	d006      	beq.n	27152 <_sercom_get_default_pad+0xe6>
   27144:	e031      	b.n	271aa <_sercom_get_default_pad+0x13e>
   27146:	4b2c      	ldr	r3, [pc, #176]	; (271f8 <_sercom_get_default_pad+0x18c>)
   27148:	e030      	b.n	271ac <_sercom_get_default_pad+0x140>
   2714a:	4b2c      	ldr	r3, [pc, #176]	; (271fc <_sercom_get_default_pad+0x190>)
   2714c:	e02e      	b.n	271ac <_sercom_get_default_pad+0x140>
   2714e:	4b2c      	ldr	r3, [pc, #176]	; (27200 <_sercom_get_default_pad+0x194>)
   27150:	e02c      	b.n	271ac <_sercom_get_default_pad+0x140>
   27152:	4b2c      	ldr	r3, [pc, #176]	; (27204 <_sercom_get_default_pad+0x198>)
   27154:	e02a      	b.n	271ac <_sercom_get_default_pad+0x140>
   27156:	1cfb      	adds	r3, r7, #3
   27158:	781b      	ldrb	r3, [r3, #0]
   2715a:	2b01      	cmp	r3, #1
   2715c:	d00a      	beq.n	27174 <_sercom_get_default_pad+0x108>
   2715e:	dc02      	bgt.n	27166 <_sercom_get_default_pad+0xfa>
   27160:	2b00      	cmp	r3, #0
   27162:	d005      	beq.n	27170 <_sercom_get_default_pad+0x104>
   27164:	e021      	b.n	271aa <_sercom_get_default_pad+0x13e>
   27166:	2b02      	cmp	r3, #2
   27168:	d006      	beq.n	27178 <_sercom_get_default_pad+0x10c>
   2716a:	2b03      	cmp	r3, #3
   2716c:	d006      	beq.n	2717c <_sercom_get_default_pad+0x110>
   2716e:	e01c      	b.n	271aa <_sercom_get_default_pad+0x13e>
   27170:	4b25      	ldr	r3, [pc, #148]	; (27208 <_sercom_get_default_pad+0x19c>)
   27172:	e01b      	b.n	271ac <_sercom_get_default_pad+0x140>
   27174:	4b25      	ldr	r3, [pc, #148]	; (2720c <_sercom_get_default_pad+0x1a0>)
   27176:	e019      	b.n	271ac <_sercom_get_default_pad+0x140>
   27178:	4b25      	ldr	r3, [pc, #148]	; (27210 <_sercom_get_default_pad+0x1a4>)
   2717a:	e017      	b.n	271ac <_sercom_get_default_pad+0x140>
   2717c:	4b25      	ldr	r3, [pc, #148]	; (27214 <_sercom_get_default_pad+0x1a8>)
   2717e:	e015      	b.n	271ac <_sercom_get_default_pad+0x140>
   27180:	1cfb      	adds	r3, r7, #3
   27182:	781b      	ldrb	r3, [r3, #0]
   27184:	2b01      	cmp	r3, #1
   27186:	d00a      	beq.n	2719e <_sercom_get_default_pad+0x132>
   27188:	dc02      	bgt.n	27190 <_sercom_get_default_pad+0x124>
   2718a:	2b00      	cmp	r3, #0
   2718c:	d005      	beq.n	2719a <_sercom_get_default_pad+0x12e>
   2718e:	e00c      	b.n	271aa <_sercom_get_default_pad+0x13e>
   27190:	2b02      	cmp	r3, #2
   27192:	d006      	beq.n	271a2 <_sercom_get_default_pad+0x136>
   27194:	2b03      	cmp	r3, #3
   27196:	d006      	beq.n	271a6 <_sercom_get_default_pad+0x13a>
   27198:	e007      	b.n	271aa <_sercom_get_default_pad+0x13e>
   2719a:	4b1f      	ldr	r3, [pc, #124]	; (27218 <_sercom_get_default_pad+0x1ac>)
   2719c:	e006      	b.n	271ac <_sercom_get_default_pad+0x140>
   2719e:	4b1f      	ldr	r3, [pc, #124]	; (2721c <_sercom_get_default_pad+0x1b0>)
   271a0:	e004      	b.n	271ac <_sercom_get_default_pad+0x140>
   271a2:	4b1f      	ldr	r3, [pc, #124]	; (27220 <_sercom_get_default_pad+0x1b4>)
   271a4:	e002      	b.n	271ac <_sercom_get_default_pad+0x140>
   271a6:	4b1f      	ldr	r3, [pc, #124]	; (27224 <_sercom_get_default_pad+0x1b8>)
   271a8:	e000      	b.n	271ac <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   271aa:	2300      	movs	r3, #0
}
   271ac:	0018      	movs	r0, r3
   271ae:	46bd      	mov	sp, r7
   271b0:	b002      	add	sp, #8
   271b2:	bd80      	pop	{r7, pc}
   271b4:	42001000 	.word	0x42001000
   271b8:	42000800 	.word	0x42000800
   271bc:	42000c00 	.word	0x42000c00
   271c0:	42001800 	.word	0x42001800
   271c4:	42001c00 	.word	0x42001c00
   271c8:	42001400 	.word	0x42001400
   271cc:	00040003 	.word	0x00040003
   271d0:	00050003 	.word	0x00050003
   271d4:	00060003 	.word	0x00060003
   271d8:	00070003 	.word	0x00070003
   271dc:	00010003 	.word	0x00010003
   271e0:	001e0003 	.word	0x001e0003
   271e4:	001f0003 	.word	0x001f0003
   271e8:	00080003 	.word	0x00080003
   271ec:	00090003 	.word	0x00090003
   271f0:	000a0003 	.word	0x000a0003
   271f4:	000b0003 	.word	0x000b0003
   271f8:	00100003 	.word	0x00100003
   271fc:	00110003 	.word	0x00110003
   27200:	00120003 	.word	0x00120003
   27204:	00130003 	.word	0x00130003
   27208:	000c0003 	.word	0x000c0003
   2720c:	000d0003 	.word	0x000d0003
   27210:	000e0003 	.word	0x000e0003
   27214:	000f0003 	.word	0x000f0003
   27218:	00160003 	.word	0x00160003
   2721c:	00170003 	.word	0x00170003
   27220:	00180003 	.word	0x00180003
   27224:	00190003 	.word	0x00190003

00027228 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   27228:	b590      	push	{r4, r7, lr}
   2722a:	b08b      	sub	sp, #44	; 0x2c
   2722c:	af00      	add	r7, sp, #0
   2722e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   27230:	230c      	movs	r3, #12
   27232:	18fb      	adds	r3, r7, r3
   27234:	4a0f      	ldr	r2, [pc, #60]	; (27274 <_sercom_get_sercom_inst_index+0x4c>)
   27236:	ca13      	ldmia	r2!, {r0, r1, r4}
   27238:	c313      	stmia	r3!, {r0, r1, r4}
   2723a:	ca13      	ldmia	r2!, {r0, r1, r4}
   2723c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2723e:	2300      	movs	r3, #0
   27240:	627b      	str	r3, [r7, #36]	; 0x24
   27242:	e00e      	b.n	27262 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   27244:	230c      	movs	r3, #12
   27246:	18fb      	adds	r3, r7, r3
   27248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2724a:	0092      	lsls	r2, r2, #2
   2724c:	58d3      	ldr	r3, [r2, r3]
   2724e:	001a      	movs	r2, r3
   27250:	687b      	ldr	r3, [r7, #4]
   27252:	429a      	cmp	r2, r3
   27254:	d102      	bne.n	2725c <_sercom_get_sercom_inst_index+0x34>
			return i;
   27256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27258:	b2db      	uxtb	r3, r3
   2725a:	e006      	b.n	2726a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2725e:	3301      	adds	r3, #1
   27260:	627b      	str	r3, [r7, #36]	; 0x24
   27262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27264:	2b05      	cmp	r3, #5
   27266:	d9ed      	bls.n	27244 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   27268:	2300      	movs	r3, #0
}
   2726a:	0018      	movs	r0, r3
   2726c:	46bd      	mov	sp, r7
   2726e:	b00b      	add	sp, #44	; 0x2c
   27270:	bd90      	pop	{r4, r7, pc}
   27272:	46c0      	nop			; (mov r8, r8)
   27274:	00039140 	.word	0x00039140

00027278 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   27278:	b580      	push	{r7, lr}
   2727a:	b082      	sub	sp, #8
   2727c:	af00      	add	r7, sp, #0
   2727e:	0002      	movs	r2, r0
   27280:	1dfb      	adds	r3, r7, #7
   27282:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   27284:	46c0      	nop			; (mov r8, r8)
   27286:	46bd      	mov	sp, r7
   27288:	b002      	add	sp, #8
   2728a:	bd80      	pop	{r7, pc}

0002728c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   2728c:	b580      	push	{r7, lr}
   2728e:	b084      	sub	sp, #16
   27290:	af00      	add	r7, sp, #0
   27292:	0002      	movs	r2, r0
   27294:	6039      	str	r1, [r7, #0]
   27296:	1dfb      	adds	r3, r7, #7
   27298:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   2729a:	4b13      	ldr	r3, [pc, #76]	; (272e8 <_sercom_set_handler+0x5c>)
   2729c:	781b      	ldrb	r3, [r3, #0]
   2729e:	2201      	movs	r2, #1
   272a0:	4053      	eors	r3, r2
   272a2:	b2db      	uxtb	r3, r3
   272a4:	2b00      	cmp	r3, #0
   272a6:	d015      	beq.n	272d4 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   272a8:	2300      	movs	r3, #0
   272aa:	60fb      	str	r3, [r7, #12]
   272ac:	e00c      	b.n	272c8 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   272ae:	4b0f      	ldr	r3, [pc, #60]	; (272ec <_sercom_set_handler+0x60>)
   272b0:	68fa      	ldr	r2, [r7, #12]
   272b2:	0092      	lsls	r2, r2, #2
   272b4:	490e      	ldr	r1, [pc, #56]	; (272f0 <_sercom_set_handler+0x64>)
   272b6:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   272b8:	4b0e      	ldr	r3, [pc, #56]	; (272f4 <_sercom_set_handler+0x68>)
   272ba:	68fa      	ldr	r2, [r7, #12]
   272bc:	0092      	lsls	r2, r2, #2
   272be:	2100      	movs	r1, #0
   272c0:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   272c2:	68fb      	ldr	r3, [r7, #12]
   272c4:	3301      	adds	r3, #1
   272c6:	60fb      	str	r3, [r7, #12]
   272c8:	68fb      	ldr	r3, [r7, #12]
   272ca:	2b05      	cmp	r3, #5
   272cc:	d9ef      	bls.n	272ae <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   272ce:	4b06      	ldr	r3, [pc, #24]	; (272e8 <_sercom_set_handler+0x5c>)
   272d0:	2201      	movs	r2, #1
   272d2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   272d4:	1dfb      	adds	r3, r7, #7
   272d6:	781a      	ldrb	r2, [r3, #0]
   272d8:	4b04      	ldr	r3, [pc, #16]	; (272ec <_sercom_set_handler+0x60>)
   272da:	0092      	lsls	r2, r2, #2
   272dc:	6839      	ldr	r1, [r7, #0]
   272de:	50d1      	str	r1, [r2, r3]
}
   272e0:	46c0      	nop			; (mov r8, r8)
   272e2:	46bd      	mov	sp, r7
   272e4:	b004      	add	sp, #16
   272e6:	bd80      	pop	{r7, pc}
   272e8:	20004142 	.word	0x20004142
   272ec:	20004144 	.word	0x20004144
   272f0:	00027279 	.word	0x00027279
   272f4:	20005a38 	.word	0x20005a38

000272f8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   272f8:	b590      	push	{r4, r7, lr}
   272fa:	b085      	sub	sp, #20
   272fc:	af00      	add	r7, sp, #0
   272fe:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   27300:	2308      	movs	r3, #8
   27302:	18fb      	adds	r3, r7, r3
   27304:	4a0b      	ldr	r2, [pc, #44]	; (27334 <_sercom_get_interrupt_vector+0x3c>)
   27306:	6811      	ldr	r1, [r2, #0]
   27308:	6019      	str	r1, [r3, #0]
   2730a:	8892      	ldrh	r2, [r2, #4]
   2730c:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   2730e:	230f      	movs	r3, #15
   27310:	18fc      	adds	r4, r7, r3
   27312:	687b      	ldr	r3, [r7, #4]
   27314:	0018      	movs	r0, r3
   27316:	4b08      	ldr	r3, [pc, #32]	; (27338 <_sercom_get_interrupt_vector+0x40>)
   27318:	4798      	blx	r3
   2731a:	0003      	movs	r3, r0
   2731c:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   2731e:	230f      	movs	r3, #15
   27320:	18fb      	adds	r3, r7, r3
   27322:	781b      	ldrb	r3, [r3, #0]
   27324:	2208      	movs	r2, #8
   27326:	18ba      	adds	r2, r7, r2
   27328:	5cd3      	ldrb	r3, [r2, r3]
   2732a:	b25b      	sxtb	r3, r3
}
   2732c:	0018      	movs	r0, r3
   2732e:	46bd      	mov	sp, r7
   27330:	b005      	add	sp, #20
   27332:	bd90      	pop	{r4, r7, pc}
   27334:	00039158 	.word	0x00039158
   27338:	00027229 	.word	0x00027229

0002733c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   2733c:	b580      	push	{r7, lr}
   2733e:	af00      	add	r7, sp, #0
   27340:	4b03      	ldr	r3, [pc, #12]	; (27350 <SERCOM0_Handler+0x14>)
   27342:	681b      	ldr	r3, [r3, #0]
   27344:	2000      	movs	r0, #0
   27346:	4798      	blx	r3
   27348:	46c0      	nop			; (mov r8, r8)
   2734a:	46bd      	mov	sp, r7
   2734c:	bd80      	pop	{r7, pc}
   2734e:	46c0      	nop			; (mov r8, r8)
   27350:	20004144 	.word	0x20004144

00027354 <SERCOM1_Handler>:
   27354:	b580      	push	{r7, lr}
   27356:	af00      	add	r7, sp, #0
   27358:	4b03      	ldr	r3, [pc, #12]	; (27368 <SERCOM1_Handler+0x14>)
   2735a:	685b      	ldr	r3, [r3, #4]
   2735c:	2001      	movs	r0, #1
   2735e:	4798      	blx	r3
   27360:	46c0      	nop			; (mov r8, r8)
   27362:	46bd      	mov	sp, r7
   27364:	bd80      	pop	{r7, pc}
   27366:	46c0      	nop			; (mov r8, r8)
   27368:	20004144 	.word	0x20004144

0002736c <SERCOM2_Handler>:
   2736c:	b580      	push	{r7, lr}
   2736e:	af00      	add	r7, sp, #0
   27370:	4b03      	ldr	r3, [pc, #12]	; (27380 <SERCOM2_Handler+0x14>)
   27372:	689b      	ldr	r3, [r3, #8]
   27374:	2002      	movs	r0, #2
   27376:	4798      	blx	r3
   27378:	46c0      	nop			; (mov r8, r8)
   2737a:	46bd      	mov	sp, r7
   2737c:	bd80      	pop	{r7, pc}
   2737e:	46c0      	nop			; (mov r8, r8)
   27380:	20004144 	.word	0x20004144

00027384 <SERCOM3_Handler>:
   27384:	b580      	push	{r7, lr}
   27386:	af00      	add	r7, sp, #0
   27388:	4b03      	ldr	r3, [pc, #12]	; (27398 <SERCOM3_Handler+0x14>)
   2738a:	68db      	ldr	r3, [r3, #12]
   2738c:	2003      	movs	r0, #3
   2738e:	4798      	blx	r3
   27390:	46c0      	nop			; (mov r8, r8)
   27392:	46bd      	mov	sp, r7
   27394:	bd80      	pop	{r7, pc}
   27396:	46c0      	nop			; (mov r8, r8)
   27398:	20004144 	.word	0x20004144

0002739c <SERCOM4_Handler>:
   2739c:	b580      	push	{r7, lr}
   2739e:	af00      	add	r7, sp, #0
   273a0:	4b03      	ldr	r3, [pc, #12]	; (273b0 <SERCOM4_Handler+0x14>)
   273a2:	691b      	ldr	r3, [r3, #16]
   273a4:	2004      	movs	r0, #4
   273a6:	4798      	blx	r3
   273a8:	46c0      	nop			; (mov r8, r8)
   273aa:	46bd      	mov	sp, r7
   273ac:	bd80      	pop	{r7, pc}
   273ae:	46c0      	nop			; (mov r8, r8)
   273b0:	20004144 	.word	0x20004144

000273b4 <SERCOM5_Handler>:
   273b4:	b580      	push	{r7, lr}
   273b6:	af00      	add	r7, sp, #0
   273b8:	4b03      	ldr	r3, [pc, #12]	; (273c8 <SERCOM5_Handler+0x14>)
   273ba:	695b      	ldr	r3, [r3, #20]
   273bc:	2005      	movs	r0, #5
   273be:	4798      	blx	r3
   273c0:	46c0      	nop			; (mov r8, r8)
   273c2:	46bd      	mov	sp, r7
   273c4:	bd80      	pop	{r7, pc}
   273c6:	46c0      	nop			; (mov r8, r8)
   273c8:	20004144 	.word	0x20004144

000273cc <system_pinmux_get_config_defaults>:
{
   273cc:	b580      	push	{r7, lr}
   273ce:	b082      	sub	sp, #8
   273d0:	af00      	add	r7, sp, #0
   273d2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   273d4:	687b      	ldr	r3, [r7, #4]
   273d6:	2280      	movs	r2, #128	; 0x80
   273d8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   273da:	687b      	ldr	r3, [r7, #4]
   273dc:	2200      	movs	r2, #0
   273de:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   273e0:	687b      	ldr	r3, [r7, #4]
   273e2:	2201      	movs	r2, #1
   273e4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   273e6:	687b      	ldr	r3, [r7, #4]
   273e8:	2200      	movs	r2, #0
   273ea:	70da      	strb	r2, [r3, #3]
}
   273ec:	46c0      	nop			; (mov r8, r8)
   273ee:	46bd      	mov	sp, r7
   273f0:	b002      	add	sp, #8
   273f2:	bd80      	pop	{r7, pc}

000273f4 <system_pinmux_get_group_from_gpio_pin>:
{
   273f4:	b580      	push	{r7, lr}
   273f6:	b084      	sub	sp, #16
   273f8:	af00      	add	r7, sp, #0
   273fa:	0002      	movs	r2, r0
   273fc:	1dfb      	adds	r3, r7, #7
   273fe:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   27400:	230f      	movs	r3, #15
   27402:	18fb      	adds	r3, r7, r3
   27404:	1dfa      	adds	r2, r7, #7
   27406:	7812      	ldrb	r2, [r2, #0]
   27408:	09d2      	lsrs	r2, r2, #7
   2740a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2740c:	230e      	movs	r3, #14
   2740e:	18fb      	adds	r3, r7, r3
   27410:	1dfa      	adds	r2, r7, #7
   27412:	7812      	ldrb	r2, [r2, #0]
   27414:	0952      	lsrs	r2, r2, #5
   27416:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   27418:	4b0d      	ldr	r3, [pc, #52]	; (27450 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2741a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2741c:	230f      	movs	r3, #15
   2741e:	18fb      	adds	r3, r7, r3
   27420:	781b      	ldrb	r3, [r3, #0]
   27422:	2b00      	cmp	r3, #0
   27424:	d10f      	bne.n	27446 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   27426:	230f      	movs	r3, #15
   27428:	18fb      	adds	r3, r7, r3
   2742a:	781b      	ldrb	r3, [r3, #0]
   2742c:	009b      	lsls	r3, r3, #2
   2742e:	2210      	movs	r2, #16
   27430:	4694      	mov	ip, r2
   27432:	44bc      	add	ip, r7
   27434:	4463      	add	r3, ip
   27436:	3b08      	subs	r3, #8
   27438:	681a      	ldr	r2, [r3, #0]
   2743a:	230e      	movs	r3, #14
   2743c:	18fb      	adds	r3, r7, r3
   2743e:	781b      	ldrb	r3, [r3, #0]
   27440:	01db      	lsls	r3, r3, #7
   27442:	18d3      	adds	r3, r2, r3
   27444:	e000      	b.n	27448 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   27446:	2300      	movs	r3, #0
}
   27448:	0018      	movs	r0, r3
   2744a:	46bd      	mov	sp, r7
   2744c:	b004      	add	sp, #16
   2744e:	bd80      	pop	{r7, pc}
   27450:	41004400 	.word	0x41004400

00027454 <port_get_group_from_gpio_pin>:
{
   27454:	b580      	push	{r7, lr}
   27456:	b082      	sub	sp, #8
   27458:	af00      	add	r7, sp, #0
   2745a:	0002      	movs	r2, r0
   2745c:	1dfb      	adds	r3, r7, #7
   2745e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   27460:	1dfb      	adds	r3, r7, #7
   27462:	781b      	ldrb	r3, [r3, #0]
   27464:	0018      	movs	r0, r3
   27466:	4b03      	ldr	r3, [pc, #12]	; (27474 <port_get_group_from_gpio_pin+0x20>)
   27468:	4798      	blx	r3
   2746a:	0003      	movs	r3, r0
}
   2746c:	0018      	movs	r0, r3
   2746e:	46bd      	mov	sp, r7
   27470:	b002      	add	sp, #8
   27472:	bd80      	pop	{r7, pc}
   27474:	000273f5 	.word	0x000273f5

00027478 <port_pin_set_output_level>:
{
   27478:	b580      	push	{r7, lr}
   2747a:	b084      	sub	sp, #16
   2747c:	af00      	add	r7, sp, #0
   2747e:	0002      	movs	r2, r0
   27480:	1dfb      	adds	r3, r7, #7
   27482:	701a      	strb	r2, [r3, #0]
   27484:	1dbb      	adds	r3, r7, #6
   27486:	1c0a      	adds	r2, r1, #0
   27488:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2748a:	1dfb      	adds	r3, r7, #7
   2748c:	781b      	ldrb	r3, [r3, #0]
   2748e:	0018      	movs	r0, r3
   27490:	4b0d      	ldr	r3, [pc, #52]	; (274c8 <port_pin_set_output_level+0x50>)
   27492:	4798      	blx	r3
   27494:	0003      	movs	r3, r0
   27496:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   27498:	1dfb      	adds	r3, r7, #7
   2749a:	781b      	ldrb	r3, [r3, #0]
   2749c:	221f      	movs	r2, #31
   2749e:	4013      	ands	r3, r2
   274a0:	2201      	movs	r2, #1
   274a2:	409a      	lsls	r2, r3
   274a4:	0013      	movs	r3, r2
   274a6:	60bb      	str	r3, [r7, #8]
	if (level) {
   274a8:	1dbb      	adds	r3, r7, #6
   274aa:	781b      	ldrb	r3, [r3, #0]
   274ac:	2b00      	cmp	r3, #0
   274ae:	d003      	beq.n	274b8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   274b0:	68fb      	ldr	r3, [r7, #12]
   274b2:	68ba      	ldr	r2, [r7, #8]
   274b4:	619a      	str	r2, [r3, #24]
}
   274b6:	e002      	b.n	274be <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   274b8:	68fb      	ldr	r3, [r7, #12]
   274ba:	68ba      	ldr	r2, [r7, #8]
   274bc:	615a      	str	r2, [r3, #20]
}
   274be:	46c0      	nop			; (mov r8, r8)
   274c0:	46bd      	mov	sp, r7
   274c2:	b004      	add	sp, #16
   274c4:	bd80      	pop	{r7, pc}
   274c6:	46c0      	nop			; (mov r8, r8)
   274c8:	00027455 	.word	0x00027455

000274cc <system_gclk_chan_get_config_defaults>:
{
   274cc:	b580      	push	{r7, lr}
   274ce:	b082      	sub	sp, #8
   274d0:	af00      	add	r7, sp, #0
   274d2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   274d4:	687b      	ldr	r3, [r7, #4]
   274d6:	2200      	movs	r2, #0
   274d8:	701a      	strb	r2, [r3, #0]
}
   274da:	46c0      	nop			; (mov r8, r8)
   274dc:	46bd      	mov	sp, r7
   274de:	b002      	add	sp, #8
   274e0:	bd80      	pop	{r7, pc}
	...

000274e4 <system_apb_clock_set_mask>:
{
   274e4:	b580      	push	{r7, lr}
   274e6:	b082      	sub	sp, #8
   274e8:	af00      	add	r7, sp, #0
   274ea:	0002      	movs	r2, r0
   274ec:	6039      	str	r1, [r7, #0]
   274ee:	1dfb      	adds	r3, r7, #7
   274f0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   274f2:	1dfb      	adds	r3, r7, #7
   274f4:	781b      	ldrb	r3, [r3, #0]
   274f6:	2b01      	cmp	r3, #1
   274f8:	d00a      	beq.n	27510 <system_apb_clock_set_mask+0x2c>
   274fa:	2b02      	cmp	r3, #2
   274fc:	d00f      	beq.n	2751e <system_apb_clock_set_mask+0x3a>
   274fe:	2b00      	cmp	r3, #0
   27500:	d114      	bne.n	2752c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   27502:	4b0e      	ldr	r3, [pc, #56]	; (2753c <system_apb_clock_set_mask+0x58>)
   27504:	4a0d      	ldr	r2, [pc, #52]	; (2753c <system_apb_clock_set_mask+0x58>)
   27506:	6991      	ldr	r1, [r2, #24]
   27508:	683a      	ldr	r2, [r7, #0]
   2750a:	430a      	orrs	r2, r1
   2750c:	619a      	str	r2, [r3, #24]
			break;
   2750e:	e00f      	b.n	27530 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27510:	4b0a      	ldr	r3, [pc, #40]	; (2753c <system_apb_clock_set_mask+0x58>)
   27512:	4a0a      	ldr	r2, [pc, #40]	; (2753c <system_apb_clock_set_mask+0x58>)
   27514:	69d1      	ldr	r1, [r2, #28]
   27516:	683a      	ldr	r2, [r7, #0]
   27518:	430a      	orrs	r2, r1
   2751a:	61da      	str	r2, [r3, #28]
			break;
   2751c:	e008      	b.n	27530 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2751e:	4b07      	ldr	r3, [pc, #28]	; (2753c <system_apb_clock_set_mask+0x58>)
   27520:	4a06      	ldr	r2, [pc, #24]	; (2753c <system_apb_clock_set_mask+0x58>)
   27522:	6a11      	ldr	r1, [r2, #32]
   27524:	683a      	ldr	r2, [r7, #0]
   27526:	430a      	orrs	r2, r1
   27528:	621a      	str	r2, [r3, #32]
			break;
   2752a:	e001      	b.n	27530 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2752c:	2317      	movs	r3, #23
   2752e:	e000      	b.n	27532 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   27530:	2300      	movs	r3, #0
}
   27532:	0018      	movs	r0, r3
   27534:	46bd      	mov	sp, r7
   27536:	b002      	add	sp, #8
   27538:	bd80      	pop	{r7, pc}
   2753a:	46c0      	nop			; (mov r8, r8)
   2753c:	40000400 	.word	0x40000400

00027540 <system_is_debugger_present>:
{
   27540:	b580      	push	{r7, lr}
   27542:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   27544:	4b05      	ldr	r3, [pc, #20]	; (2755c <system_is_debugger_present+0x1c>)
   27546:	789b      	ldrb	r3, [r3, #2]
   27548:	b2db      	uxtb	r3, r3
   2754a:	001a      	movs	r2, r3
   2754c:	2302      	movs	r3, #2
   2754e:	4013      	ands	r3, r2
   27550:	1e5a      	subs	r2, r3, #1
   27552:	4193      	sbcs	r3, r2
   27554:	b2db      	uxtb	r3, r3
}
   27556:	0018      	movs	r0, r3
   27558:	46bd      	mov	sp, r7
   2755a:	bd80      	pop	{r7, pc}
   2755c:	41002000 	.word	0x41002000

00027560 <system_interrupt_enable>:
{
   27560:	b580      	push	{r7, lr}
   27562:	b082      	sub	sp, #8
   27564:	af00      	add	r7, sp, #0
   27566:	0002      	movs	r2, r0
   27568:	1dfb      	adds	r3, r7, #7
   2756a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2756c:	4b06      	ldr	r3, [pc, #24]	; (27588 <system_interrupt_enable+0x28>)
   2756e:	1dfa      	adds	r2, r7, #7
   27570:	7812      	ldrb	r2, [r2, #0]
   27572:	0011      	movs	r1, r2
   27574:	221f      	movs	r2, #31
   27576:	400a      	ands	r2, r1
   27578:	2101      	movs	r1, #1
   2757a:	4091      	lsls	r1, r2
   2757c:	000a      	movs	r2, r1
   2757e:	601a      	str	r2, [r3, #0]
}
   27580:	46c0      	nop			; (mov r8, r8)
   27582:	46bd      	mov	sp, r7
   27584:	b002      	add	sp, #8
   27586:	bd80      	pop	{r7, pc}
   27588:	e000e100 	.word	0xe000e100

0002758c <system_interrupt_disable>:
{
   2758c:	b580      	push	{r7, lr}
   2758e:	b082      	sub	sp, #8
   27590:	af00      	add	r7, sp, #0
   27592:	0002      	movs	r2, r0
   27594:	1dfb      	adds	r3, r7, #7
   27596:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27598:	4a07      	ldr	r2, [pc, #28]	; (275b8 <system_interrupt_disable+0x2c>)
   2759a:	1dfb      	adds	r3, r7, #7
   2759c:	781b      	ldrb	r3, [r3, #0]
   2759e:	0019      	movs	r1, r3
   275a0:	231f      	movs	r3, #31
   275a2:	400b      	ands	r3, r1
   275a4:	2101      	movs	r1, #1
   275a6:	4099      	lsls	r1, r3
   275a8:	000b      	movs	r3, r1
   275aa:	0019      	movs	r1, r3
   275ac:	2380      	movs	r3, #128	; 0x80
   275ae:	50d1      	str	r1, [r2, r3]
}
   275b0:	46c0      	nop			; (mov r8, r8)
   275b2:	46bd      	mov	sp, r7
   275b4:	b002      	add	sp, #8
   275b6:	bd80      	pop	{r7, pc}
   275b8:	e000e100 	.word	0xe000e100

000275bc <spi_is_syncing>:
{
   275bc:	b580      	push	{r7, lr}
   275be:	b084      	sub	sp, #16
   275c0:	af00      	add	r7, sp, #0
   275c2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   275c4:	687b      	ldr	r3, [r7, #4]
   275c6:	681b      	ldr	r3, [r3, #0]
   275c8:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   275ca:	68fb      	ldr	r3, [r7, #12]
   275cc:	69db      	ldr	r3, [r3, #28]
   275ce:	1e5a      	subs	r2, r3, #1
   275d0:	4193      	sbcs	r3, r2
   275d2:	b2db      	uxtb	r3, r3
}
   275d4:	0018      	movs	r0, r3
   275d6:	46bd      	mov	sp, r7
   275d8:	b004      	add	sp, #16
   275da:	bd80      	pop	{r7, pc}

000275dc <spi_enable>:
{
   275dc:	b580      	push	{r7, lr}
   275de:	b084      	sub	sp, #16
   275e0:	af00      	add	r7, sp, #0
   275e2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   275e4:	687b      	ldr	r3, [r7, #4]
   275e6:	681b      	ldr	r3, [r3, #0]
   275e8:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   275ea:	687b      	ldr	r3, [r7, #4]
   275ec:	681b      	ldr	r3, [r3, #0]
   275ee:	0018      	movs	r0, r3
   275f0:	4b0b      	ldr	r3, [pc, #44]	; (27620 <spi_enable+0x44>)
   275f2:	4798      	blx	r3
   275f4:	0003      	movs	r3, r0
   275f6:	0018      	movs	r0, r3
   275f8:	4b0a      	ldr	r3, [pc, #40]	; (27624 <spi_enable+0x48>)
   275fa:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   275fc:	46c0      	nop			; (mov r8, r8)
   275fe:	687b      	ldr	r3, [r7, #4]
   27600:	0018      	movs	r0, r3
   27602:	4b09      	ldr	r3, [pc, #36]	; (27628 <spi_enable+0x4c>)
   27604:	4798      	blx	r3
   27606:	1e03      	subs	r3, r0, #0
   27608:	d1f9      	bne.n	275fe <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   2760a:	68fb      	ldr	r3, [r7, #12]
   2760c:	681b      	ldr	r3, [r3, #0]
   2760e:	2202      	movs	r2, #2
   27610:	431a      	orrs	r2, r3
   27612:	68fb      	ldr	r3, [r7, #12]
   27614:	601a      	str	r2, [r3, #0]
}
   27616:	46c0      	nop			; (mov r8, r8)
   27618:	46bd      	mov	sp, r7
   2761a:	b004      	add	sp, #16
   2761c:	bd80      	pop	{r7, pc}
   2761e:	46c0      	nop			; (mov r8, r8)
   27620:	000272f9 	.word	0x000272f9
   27624:	00027561 	.word	0x00027561
   27628:	000275bd 	.word	0x000275bd

0002762c <spi_disable>:
{
   2762c:	b580      	push	{r7, lr}
   2762e:	b084      	sub	sp, #16
   27630:	af00      	add	r7, sp, #0
   27632:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27634:	687b      	ldr	r3, [r7, #4]
   27636:	681b      	ldr	r3, [r3, #0]
   27638:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   2763a:	687b      	ldr	r3, [r7, #4]
   2763c:	681b      	ldr	r3, [r3, #0]
   2763e:	0018      	movs	r0, r3
   27640:	4b0e      	ldr	r3, [pc, #56]	; (2767c <spi_disable+0x50>)
   27642:	4798      	blx	r3
   27644:	0003      	movs	r3, r0
   27646:	0018      	movs	r0, r3
   27648:	4b0d      	ldr	r3, [pc, #52]	; (27680 <spi_disable+0x54>)
   2764a:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   2764c:	46c0      	nop			; (mov r8, r8)
   2764e:	687b      	ldr	r3, [r7, #4]
   27650:	0018      	movs	r0, r3
   27652:	4b0c      	ldr	r3, [pc, #48]	; (27684 <spi_disable+0x58>)
   27654:	4798      	blx	r3
   27656:	1e03      	subs	r3, r0, #0
   27658:	d1f9      	bne.n	2764e <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2765a:	68fb      	ldr	r3, [r7, #12]
   2765c:	228f      	movs	r2, #143	; 0x8f
   2765e:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   27660:	68fb      	ldr	r3, [r7, #12]
   27662:	228f      	movs	r2, #143	; 0x8f
   27664:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   27666:	68fb      	ldr	r3, [r7, #12]
   27668:	681b      	ldr	r3, [r3, #0]
   2766a:	2202      	movs	r2, #2
   2766c:	4393      	bics	r3, r2
   2766e:	001a      	movs	r2, r3
   27670:	68fb      	ldr	r3, [r7, #12]
   27672:	601a      	str	r2, [r3, #0]
}
   27674:	46c0      	nop			; (mov r8, r8)
   27676:	46bd      	mov	sp, r7
   27678:	b004      	add	sp, #16
   2767a:	bd80      	pop	{r7, pc}
   2767c:	000272f9 	.word	0x000272f9
   27680:	0002758d 	.word	0x0002758d
   27684:	000275bd 	.word	0x000275bd

00027688 <spi_is_write_complete>:
{
   27688:	b580      	push	{r7, lr}
   2768a:	b084      	sub	sp, #16
   2768c:	af00      	add	r7, sp, #0
   2768e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27690:	687b      	ldr	r3, [r7, #4]
   27692:	681b      	ldr	r3, [r3, #0]
   27694:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   27696:	68fb      	ldr	r3, [r7, #12]
   27698:	7e1b      	ldrb	r3, [r3, #24]
   2769a:	b2db      	uxtb	r3, r3
   2769c:	001a      	movs	r2, r3
   2769e:	2302      	movs	r3, #2
   276a0:	4013      	ands	r3, r2
   276a2:	1e5a      	subs	r2, r3, #1
   276a4:	4193      	sbcs	r3, r2
   276a6:	b2db      	uxtb	r3, r3
}
   276a8:	0018      	movs	r0, r3
   276aa:	46bd      	mov	sp, r7
   276ac:	b004      	add	sp, #16
   276ae:	bd80      	pop	{r7, pc}

000276b0 <spi_is_ready_to_write>:
{
   276b0:	b580      	push	{r7, lr}
   276b2:	b084      	sub	sp, #16
   276b4:	af00      	add	r7, sp, #0
   276b6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   276b8:	687b      	ldr	r3, [r7, #4]
   276ba:	681b      	ldr	r3, [r3, #0]
   276bc:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   276be:	68fb      	ldr	r3, [r7, #12]
   276c0:	7e1b      	ldrb	r3, [r3, #24]
   276c2:	b2db      	uxtb	r3, r3
   276c4:	001a      	movs	r2, r3
   276c6:	2301      	movs	r3, #1
   276c8:	4013      	ands	r3, r2
   276ca:	1e5a      	subs	r2, r3, #1
   276cc:	4193      	sbcs	r3, r2
   276ce:	b2db      	uxtb	r3, r3
}
   276d0:	0018      	movs	r0, r3
   276d2:	46bd      	mov	sp, r7
   276d4:	b004      	add	sp, #16
   276d6:	bd80      	pop	{r7, pc}

000276d8 <spi_is_ready_to_read>:
{
   276d8:	b580      	push	{r7, lr}
   276da:	b084      	sub	sp, #16
   276dc:	af00      	add	r7, sp, #0
   276de:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   276e0:	687b      	ldr	r3, [r7, #4]
   276e2:	681b      	ldr	r3, [r3, #0]
   276e4:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   276e6:	68fb      	ldr	r3, [r7, #12]
   276e8:	7e1b      	ldrb	r3, [r3, #24]
   276ea:	b2db      	uxtb	r3, r3
   276ec:	001a      	movs	r2, r3
   276ee:	2304      	movs	r3, #4
   276f0:	4013      	ands	r3, r2
   276f2:	1e5a      	subs	r2, r3, #1
   276f4:	4193      	sbcs	r3, r2
   276f6:	b2db      	uxtb	r3, r3
}
   276f8:	0018      	movs	r0, r3
   276fa:	46bd      	mov	sp, r7
   276fc:	b004      	add	sp, #16
   276fe:	bd80      	pop	{r7, pc}

00027700 <spi_write>:
{
   27700:	b580      	push	{r7, lr}
   27702:	b084      	sub	sp, #16
   27704:	af00      	add	r7, sp, #0
   27706:	6078      	str	r0, [r7, #4]
   27708:	000a      	movs	r2, r1
   2770a:	1cbb      	adds	r3, r7, #2
   2770c:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2770e:	687b      	ldr	r3, [r7, #4]
   27710:	681b      	ldr	r3, [r3, #0]
   27712:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   27714:	687b      	ldr	r3, [r7, #4]
   27716:	0018      	movs	r0, r3
   27718:	4b0a      	ldr	r3, [pc, #40]	; (27744 <spi_write+0x44>)
   2771a:	4798      	blx	r3
   2771c:	0003      	movs	r3, r0
   2771e:	001a      	movs	r2, r3
   27720:	2301      	movs	r3, #1
   27722:	4053      	eors	r3, r2
   27724:	b2db      	uxtb	r3, r3
   27726:	2b00      	cmp	r3, #0
   27728:	d001      	beq.n	2772e <spi_write+0x2e>
		return STATUS_BUSY;
   2772a:	2305      	movs	r3, #5
   2772c:	e006      	b.n	2773c <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   2772e:	1cbb      	adds	r3, r7, #2
   27730:	881b      	ldrh	r3, [r3, #0]
   27732:	05db      	lsls	r3, r3, #23
   27734:	0dda      	lsrs	r2, r3, #23
   27736:	68fb      	ldr	r3, [r7, #12]
   27738:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   2773a:	2300      	movs	r3, #0
}
   2773c:	0018      	movs	r0, r3
   2773e:	46bd      	mov	sp, r7
   27740:	b004      	add	sp, #16
   27742:	bd80      	pop	{r7, pc}
   27744:	000276b1 	.word	0x000276b1

00027748 <spi_read>:
{
   27748:	b580      	push	{r7, lr}
   2774a:	b084      	sub	sp, #16
   2774c:	af00      	add	r7, sp, #0
   2774e:	6078      	str	r0, [r7, #4]
   27750:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27752:	687b      	ldr	r3, [r7, #4]
   27754:	681b      	ldr	r3, [r3, #0]
   27756:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   27758:	687b      	ldr	r3, [r7, #4]
   2775a:	0018      	movs	r0, r3
   2775c:	4b1b      	ldr	r3, [pc, #108]	; (277cc <spi_read+0x84>)
   2775e:	4798      	blx	r3
   27760:	0003      	movs	r3, r0
   27762:	001a      	movs	r2, r3
   27764:	2301      	movs	r3, #1
   27766:	4053      	eors	r3, r2
   27768:	b2db      	uxtb	r3, r3
   2776a:	2b00      	cmp	r3, #0
   2776c:	d001      	beq.n	27772 <spi_read+0x2a>
		return STATUS_ERR_IO;
   2776e:	2310      	movs	r3, #16
   27770:	e027      	b.n	277c2 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   27772:	230f      	movs	r3, #15
   27774:	18fb      	adds	r3, r7, r3
   27776:	2200      	movs	r2, #0
   27778:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2777a:	68bb      	ldr	r3, [r7, #8]
   2777c:	8b5b      	ldrh	r3, [r3, #26]
   2777e:	b29b      	uxth	r3, r3
   27780:	001a      	movs	r2, r3
   27782:	2304      	movs	r3, #4
   27784:	4013      	ands	r3, r2
   27786:	d006      	beq.n	27796 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   27788:	230f      	movs	r3, #15
   2778a:	18fb      	adds	r3, r7, r3
   2778c:	221e      	movs	r2, #30
   2778e:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   27790:	68bb      	ldr	r3, [r7, #8]
   27792:	2204      	movs	r2, #4
   27794:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27796:	687b      	ldr	r3, [r7, #4]
   27798:	799b      	ldrb	r3, [r3, #6]
   2779a:	2b01      	cmp	r3, #1
   2779c:	d108      	bne.n	277b0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   2779e:	68bb      	ldr	r3, [r7, #8]
   277a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   277a2:	b29b      	uxth	r3, r3
   277a4:	05db      	lsls	r3, r3, #23
   277a6:	0ddb      	lsrs	r3, r3, #23
   277a8:	b29a      	uxth	r2, r3
   277aa:	683b      	ldr	r3, [r7, #0]
   277ac:	801a      	strh	r2, [r3, #0]
   277ae:	e005      	b.n	277bc <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   277b0:	68bb      	ldr	r3, [r7, #8]
   277b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   277b4:	b2db      	uxtb	r3, r3
   277b6:	b29a      	uxth	r2, r3
   277b8:	683b      	ldr	r3, [r7, #0]
   277ba:	801a      	strh	r2, [r3, #0]
	return retval;
   277bc:	230f      	movs	r3, #15
   277be:	18fb      	adds	r3, r7, r3
   277c0:	781b      	ldrb	r3, [r3, #0]
}
   277c2:	0018      	movs	r0, r3
   277c4:	46bd      	mov	sp, r7
   277c6:	b004      	add	sp, #16
   277c8:	bd80      	pop	{r7, pc}
   277ca:	46c0      	nop			; (mov r8, r8)
   277cc:	000276d9 	.word	0x000276d9

000277d0 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   277d0:	b590      	push	{r4, r7, lr}
   277d2:	b089      	sub	sp, #36	; 0x24
   277d4:	af00      	add	r7, sp, #0
   277d6:	6078      	str	r0, [r7, #4]
   277d8:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   277da:	230c      	movs	r3, #12
   277dc:	18fb      	adds	r3, r7, r3
   277de:	2200      	movs	r2, #0
   277e0:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   277e2:	687b      	ldr	r3, [r7, #4]
   277e4:	681b      	ldr	r3, [r3, #0]
   277e6:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   277e8:	687b      	ldr	r3, [r7, #4]
   277ea:	0018      	movs	r0, r3
   277ec:	4b24      	ldr	r3, [pc, #144]	; (27880 <spi_set_baudrate+0xb0>)
   277ee:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   277f0:	46c0      	nop			; (mov r8, r8)
   277f2:	687b      	ldr	r3, [r7, #4]
   277f4:	0018      	movs	r0, r3
   277f6:	4b23      	ldr	r3, [pc, #140]	; (27884 <spi_set_baudrate+0xb4>)
   277f8:	4798      	blx	r3
   277fa:	1e03      	subs	r3, r0, #0
   277fc:	d1f9      	bne.n	277f2 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   277fe:	687b      	ldr	r3, [r7, #4]
   27800:	681b      	ldr	r3, [r3, #0]
   27802:	0018      	movs	r0, r3
   27804:	4b20      	ldr	r3, [pc, #128]	; (27888 <spi_set_baudrate+0xb8>)
   27806:	4798      	blx	r3
   27808:	0003      	movs	r3, r0
   2780a:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2780c:	69bb      	ldr	r3, [r7, #24]
   2780e:	3314      	adds	r3, #20
   27810:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   27812:	697b      	ldr	r3, [r7, #20]
   27814:	b2db      	uxtb	r3, r3
   27816:	0018      	movs	r0, r3
   27818:	4b1c      	ldr	r3, [pc, #112]	; (2788c <spi_set_baudrate+0xbc>)
   2781a:	4798      	blx	r3
   2781c:	0003      	movs	r3, r0
   2781e:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   27820:	230f      	movs	r3, #15
   27822:	18fc      	adds	r4, r7, r3
   27824:	230c      	movs	r3, #12
   27826:	18fa      	adds	r2, r7, r3
   27828:	6939      	ldr	r1, [r7, #16]
   2782a:	683b      	ldr	r3, [r7, #0]
   2782c:	0018      	movs	r0, r3
   2782e:	4b18      	ldr	r3, [pc, #96]	; (27890 <spi_set_baudrate+0xc0>)
   27830:	4798      	blx	r3
   27832:	0003      	movs	r3, r0
   27834:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   27836:	230f      	movs	r3, #15
   27838:	18fb      	adds	r3, r7, r3
   2783a:	781b      	ldrb	r3, [r3, #0]
   2783c:	2b00      	cmp	r3, #0
   2783e:	d001      	beq.n	27844 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   27840:	2317      	movs	r3, #23
   27842:	e018      	b.n	27876 <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   27844:	230c      	movs	r3, #12
   27846:	18fb      	adds	r3, r7, r3
   27848:	881b      	ldrh	r3, [r3, #0]
   2784a:	b2da      	uxtb	r2, r3
   2784c:	69fb      	ldr	r3, [r7, #28]
   2784e:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   27850:	46c0      	nop			; (mov r8, r8)
   27852:	687b      	ldr	r3, [r7, #4]
   27854:	0018      	movs	r0, r3
   27856:	4b0b      	ldr	r3, [pc, #44]	; (27884 <spi_set_baudrate+0xb4>)
   27858:	4798      	blx	r3
   2785a:	1e03      	subs	r3, r0, #0
   2785c:	d1f9      	bne.n	27852 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   2785e:	687b      	ldr	r3, [r7, #4]
   27860:	0018      	movs	r0, r3
   27862:	4b0c      	ldr	r3, [pc, #48]	; (27894 <spi_set_baudrate+0xc4>)
   27864:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   27866:	46c0      	nop			; (mov r8, r8)
   27868:	687b      	ldr	r3, [r7, #4]
   2786a:	0018      	movs	r0, r3
   2786c:	4b05      	ldr	r3, [pc, #20]	; (27884 <spi_set_baudrate+0xb4>)
   2786e:	4798      	blx	r3
   27870:	1e03      	subs	r3, r0, #0
   27872:	d1f9      	bne.n	27868 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   27874:	2300      	movs	r3, #0
}
   27876:	0018      	movs	r0, r3
   27878:	46bd      	mov	sp, r7
   2787a:	b009      	add	sp, #36	; 0x24
   2787c:	bd90      	pop	{r4, r7, pc}
   2787e:	46c0      	nop			; (mov r8, r8)
   27880:	0002762d 	.word	0x0002762d
   27884:	000275bd 	.word	0x000275bd
   27888:	00027229 	.word	0x00027229
   2788c:	00029bdd 	.word	0x00029bdd
   27890:	00026da3 	.word	0x00026da3
   27894:	000275dd 	.word	0x000275dd

00027898 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   27898:	b590      	push	{r4, r7, lr}
   2789a:	b093      	sub	sp, #76	; 0x4c
   2789c:	af00      	add	r7, sp, #0
   2789e:	6078      	str	r0, [r7, #4]
   278a0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   278a2:	687b      	ldr	r3, [r7, #4]
   278a4:	681b      	ldr	r3, [r3, #0]
   278a6:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   278a8:	687b      	ldr	r3, [r7, #4]
   278aa:	681b      	ldr	r3, [r3, #0]
   278ac:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   278ae:	231c      	movs	r3, #28
   278b0:	18fb      	adds	r3, r7, r3
   278b2:	0018      	movs	r0, r3
   278b4:	4b75      	ldr	r3, [pc, #468]	; (27a8c <_spi_set_config+0x1f4>)
   278b6:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   278b8:	231c      	movs	r3, #28
   278ba:	18fb      	adds	r3, r7, r3
   278bc:	2200      	movs	r2, #0
   278be:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   278c0:	683b      	ldr	r3, [r7, #0]
   278c2:	781b      	ldrb	r3, [r3, #0]
   278c4:	2b00      	cmp	r3, #0
   278c6:	d103      	bne.n	278d0 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   278c8:	231c      	movs	r3, #28
   278ca:	18fb      	adds	r3, r7, r3
   278cc:	2200      	movs	r2, #0
   278ce:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   278d0:	683b      	ldr	r3, [r7, #0]
   278d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   278d4:	230c      	movs	r3, #12
   278d6:	18fb      	adds	r3, r7, r3
   278d8:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   278da:	683b      	ldr	r3, [r7, #0]
   278dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   278de:	230c      	movs	r3, #12
   278e0:	18fb      	adds	r3, r7, r3
   278e2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   278e4:	683b      	ldr	r3, [r7, #0]
   278e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   278e8:	230c      	movs	r3, #12
   278ea:	18fb      	adds	r3, r7, r3
   278ec:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   278ee:	683b      	ldr	r3, [r7, #0]
   278f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   278f2:	230c      	movs	r3, #12
   278f4:	18fb      	adds	r3, r7, r3
   278f6:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   278f8:	2347      	movs	r3, #71	; 0x47
   278fa:	18fb      	adds	r3, r7, r3
   278fc:	2200      	movs	r2, #0
   278fe:	701a      	strb	r2, [r3, #0]
   27900:	e02c      	b.n	2795c <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   27902:	2347      	movs	r3, #71	; 0x47
   27904:	18fb      	adds	r3, r7, r3
   27906:	781a      	ldrb	r2, [r3, #0]
   27908:	230c      	movs	r3, #12
   2790a:	18fb      	adds	r3, r7, r3
   2790c:	0092      	lsls	r2, r2, #2
   2790e:	58d3      	ldr	r3, [r2, r3]
   27910:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   27912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27914:	2b00      	cmp	r3, #0
   27916:	d109      	bne.n	2792c <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   27918:	2347      	movs	r3, #71	; 0x47
   2791a:	18fb      	adds	r3, r7, r3
   2791c:	781a      	ldrb	r2, [r3, #0]
   2791e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27920:	0011      	movs	r1, r2
   27922:	0018      	movs	r0, r3
   27924:	4b5a      	ldr	r3, [pc, #360]	; (27a90 <_spi_set_config+0x1f8>)
   27926:	4798      	blx	r3
   27928:	0003      	movs	r3, r0
   2792a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   2792c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2792e:	3301      	adds	r3, #1
   27930:	d00d      	beq.n	2794e <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   27932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27934:	b2da      	uxtb	r2, r3
   27936:	231c      	movs	r3, #28
   27938:	18fb      	adds	r3, r7, r3
   2793a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   2793c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2793e:	0c1b      	lsrs	r3, r3, #16
   27940:	b2db      	uxtb	r3, r3
   27942:	221c      	movs	r2, #28
   27944:	18ba      	adds	r2, r7, r2
   27946:	0011      	movs	r1, r2
   27948:	0018      	movs	r0, r3
   2794a:	4b52      	ldr	r3, [pc, #328]	; (27a94 <_spi_set_config+0x1fc>)
   2794c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   2794e:	2347      	movs	r3, #71	; 0x47
   27950:	18fb      	adds	r3, r7, r3
   27952:	781a      	ldrb	r2, [r3, #0]
   27954:	2347      	movs	r3, #71	; 0x47
   27956:	18fb      	adds	r3, r7, r3
   27958:	3201      	adds	r2, #1
   2795a:	701a      	strb	r2, [r3, #0]
   2795c:	2347      	movs	r3, #71	; 0x47
   2795e:	18fb      	adds	r3, r7, r3
   27960:	781b      	ldrb	r3, [r3, #0]
   27962:	2b03      	cmp	r3, #3
   27964:	d9cd      	bls.n	27902 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   27966:	683b      	ldr	r3, [r7, #0]
   27968:	781a      	ldrb	r2, [r3, #0]
   2796a:	687b      	ldr	r3, [r7, #4]
   2796c:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   2796e:	683b      	ldr	r3, [r7, #0]
   27970:	7c1a      	ldrb	r2, [r3, #16]
   27972:	687b      	ldr	r3, [r7, #4]
   27974:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   27976:	683b      	ldr	r3, [r7, #0]
   27978:	7c9a      	ldrb	r2, [r3, #18]
   2797a:	687b      	ldr	r3, [r7, #4]
   2797c:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   2797e:	683b      	ldr	r3, [r7, #0]
   27980:	7d1a      	ldrb	r2, [r3, #20]
   27982:	687b      	ldr	r3, [r7, #4]
   27984:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   27986:	230a      	movs	r3, #10
   27988:	18fb      	adds	r3, r7, r3
   2798a:	2200      	movs	r2, #0
   2798c:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   2798e:	2300      	movs	r3, #0
   27990:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   27992:	2300      	movs	r3, #0
   27994:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   27996:	683b      	ldr	r3, [r7, #0]
   27998:	781b      	ldrb	r3, [r3, #0]
   2799a:	2b01      	cmp	r3, #1
   2799c:	d129      	bne.n	279f2 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2799e:	687b      	ldr	r3, [r7, #4]
   279a0:	681b      	ldr	r3, [r3, #0]
   279a2:	0018      	movs	r0, r3
   279a4:	4b3c      	ldr	r3, [pc, #240]	; (27a98 <_spi_set_config+0x200>)
   279a6:	4798      	blx	r3
   279a8:	0003      	movs	r3, r0
   279aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   279ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   279ae:	3314      	adds	r3, #20
   279b0:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   279b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   279b4:	b2db      	uxtb	r3, r3
   279b6:	0018      	movs	r0, r3
   279b8:	4b38      	ldr	r3, [pc, #224]	; (27a9c <_spi_set_config+0x204>)
   279ba:	4798      	blx	r3
   279bc:	0003      	movs	r3, r0
   279be:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   279c0:	683b      	ldr	r3, [r7, #0]
   279c2:	699b      	ldr	r3, [r3, #24]
   279c4:	2223      	movs	r2, #35	; 0x23
   279c6:	18bc      	adds	r4, r7, r2
   279c8:	220a      	movs	r2, #10
   279ca:	18ba      	adds	r2, r7, r2
   279cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
   279ce:	0018      	movs	r0, r3
   279d0:	4b33      	ldr	r3, [pc, #204]	; (27aa0 <_spi_set_config+0x208>)
   279d2:	4798      	blx	r3
   279d4:	0003      	movs	r3, r0
   279d6:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   279d8:	2323      	movs	r3, #35	; 0x23
   279da:	18fb      	adds	r3, r7, r3
   279dc:	781b      	ldrb	r3, [r3, #0]
   279de:	2b00      	cmp	r3, #0
   279e0:	d001      	beq.n	279e6 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   279e2:	2317      	movs	r3, #23
   279e4:	e04e      	b.n	27a84 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   279e6:	230a      	movs	r3, #10
   279e8:	18fb      	adds	r3, r7, r3
   279ea:	881b      	ldrh	r3, [r3, #0]
   279ec:	b2da      	uxtb	r2, r3
   279ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   279f0:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   279f2:	683b      	ldr	r3, [r7, #0]
   279f4:	685b      	ldr	r3, [r3, #4]
   279f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   279f8:	4313      	orrs	r3, r2
   279fa:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   279fc:	683b      	ldr	r3, [r7, #0]
   279fe:	689b      	ldr	r3, [r3, #8]
   27a00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27a02:	4313      	orrs	r3, r2
   27a04:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   27a06:	683b      	ldr	r3, [r7, #0]
   27a08:	68db      	ldr	r3, [r3, #12]
   27a0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27a0c:	4313      	orrs	r3, r2
   27a0e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   27a10:	683b      	ldr	r3, [r7, #0]
   27a12:	7c1b      	ldrb	r3, [r3, #16]
   27a14:	001a      	movs	r2, r3
   27a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27a18:	4313      	orrs	r3, r2
   27a1a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   27a1c:	683b      	ldr	r3, [r7, #0]
   27a1e:	7c5b      	ldrb	r3, [r3, #17]
   27a20:	2b00      	cmp	r3, #0
   27a22:	d103      	bne.n	27a2c <_spi_set_config+0x194>
   27a24:	4b1f      	ldr	r3, [pc, #124]	; (27aa4 <_spi_set_config+0x20c>)
   27a26:	4798      	blx	r3
   27a28:	1e03      	subs	r3, r0, #0
   27a2a:	d003      	beq.n	27a34 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   27a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27a2e:	2280      	movs	r2, #128	; 0x80
   27a30:	4313      	orrs	r3, r2
   27a32:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   27a34:	683b      	ldr	r3, [r7, #0]
   27a36:	7c9b      	ldrb	r3, [r3, #18]
   27a38:	2b00      	cmp	r3, #0
   27a3a:	d004      	beq.n	27a46 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   27a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27a3e:	2280      	movs	r2, #128	; 0x80
   27a40:	0292      	lsls	r2, r2, #10
   27a42:	4313      	orrs	r3, r2
   27a44:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   27a46:	683b      	ldr	r3, [r7, #0]
   27a48:	7cdb      	ldrb	r3, [r3, #19]
   27a4a:	2b00      	cmp	r3, #0
   27a4c:	d004      	beq.n	27a58 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   27a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27a50:	2280      	movs	r2, #128	; 0x80
   27a52:	0092      	lsls	r2, r2, #2
   27a54:	4313      	orrs	r3, r2
   27a56:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   27a58:	683b      	ldr	r3, [r7, #0]
   27a5a:	7d1b      	ldrb	r3, [r3, #20]
   27a5c:	2b00      	cmp	r3, #0
   27a5e:	d004      	beq.n	27a6a <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   27a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27a62:	2280      	movs	r2, #128	; 0x80
   27a64:	0192      	lsls	r2, r2, #6
   27a66:	4313      	orrs	r3, r2
   27a68:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   27a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27a6c:	681a      	ldr	r2, [r3, #0]
   27a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27a70:	431a      	orrs	r2, r3
   27a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27a74:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   27a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27a78:	685a      	ldr	r2, [r3, #4]
   27a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27a7c:	431a      	orrs	r2, r3
   27a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27a80:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   27a82:	2300      	movs	r3, #0
}
   27a84:	0018      	movs	r0, r3
   27a86:	46bd      	mov	sp, r7
   27a88:	b013      	add	sp, #76	; 0x4c
   27a8a:	bd90      	pop	{r4, r7, pc}
   27a8c:	000273cd 	.word	0x000273cd
   27a90:	0002706d 	.word	0x0002706d
   27a94:	00029e19 	.word	0x00029e19
   27a98:	00027229 	.word	0x00027229
   27a9c:	00029bdd 	.word	0x00029bdd
   27aa0:	00026da3 	.word	0x00026da3
   27aa4:	00027541 	.word	0x00027541

00027aa8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   27aa8:	b590      	push	{r4, r7, lr}
   27aaa:	b08b      	sub	sp, #44	; 0x2c
   27aac:	af00      	add	r7, sp, #0
   27aae:	60f8      	str	r0, [r7, #12]
   27ab0:	60b9      	str	r1, [r7, #8]
   27ab2:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   27ab4:	68fb      	ldr	r3, [r7, #12]
   27ab6:	68ba      	ldr	r2, [r7, #8]
   27ab8:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   27aba:	68fb      	ldr	r3, [r7, #12]
   27abc:	681b      	ldr	r3, [r3, #0]
   27abe:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   27ac0:	6a3b      	ldr	r3, [r7, #32]
   27ac2:	681b      	ldr	r3, [r3, #0]
   27ac4:	2202      	movs	r2, #2
   27ac6:	4013      	ands	r3, r2
   27ac8:	d001      	beq.n	27ace <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   27aca:	231c      	movs	r3, #28
   27acc:	e09c      	b.n	27c08 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   27ace:	6a3b      	ldr	r3, [r7, #32]
   27ad0:	681b      	ldr	r3, [r3, #0]
   27ad2:	2201      	movs	r2, #1
   27ad4:	4013      	ands	r3, r2
   27ad6:	d001      	beq.n	27adc <spi_init+0x34>
		return STATUS_BUSY;
   27ad8:	2305      	movs	r3, #5
   27ada:	e095      	b.n	27c08 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27adc:	68fb      	ldr	r3, [r7, #12]
   27ade:	681b      	ldr	r3, [r3, #0]
   27ae0:	0018      	movs	r0, r3
   27ae2:	4b4b      	ldr	r3, [pc, #300]	; (27c10 <spi_init+0x168>)
   27ae4:	4798      	blx	r3
   27ae6:	0003      	movs	r3, r0
   27ae8:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   27aea:	69fb      	ldr	r3, [r7, #28]
   27aec:	3302      	adds	r3, #2
   27aee:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27af0:	69fb      	ldr	r3, [r7, #28]
   27af2:	3314      	adds	r3, #20
   27af4:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   27af6:	2201      	movs	r2, #1
   27af8:	69bb      	ldr	r3, [r7, #24]
   27afa:	409a      	lsls	r2, r3
   27afc:	0013      	movs	r3, r2
   27afe:	0019      	movs	r1, r3
   27b00:	2002      	movs	r0, #2
   27b02:	4b44      	ldr	r3, [pc, #272]	; (27c14 <spi_init+0x16c>)
   27b04:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27b06:	2310      	movs	r3, #16
   27b08:	18fb      	adds	r3, r7, r3
   27b0a:	0018      	movs	r0, r3
   27b0c:	4b42      	ldr	r3, [pc, #264]	; (27c18 <spi_init+0x170>)
   27b0e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   27b10:	687b      	ldr	r3, [r7, #4]
   27b12:	2224      	movs	r2, #36	; 0x24
   27b14:	5c9a      	ldrb	r2, [r3, r2]
   27b16:	2310      	movs	r3, #16
   27b18:	18fb      	adds	r3, r7, r3
   27b1a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   27b1c:	697b      	ldr	r3, [r7, #20]
   27b1e:	b2db      	uxtb	r3, r3
   27b20:	2210      	movs	r2, #16
   27b22:	18ba      	adds	r2, r7, r2
   27b24:	0011      	movs	r1, r2
   27b26:	0018      	movs	r0, r3
   27b28:	4b3c      	ldr	r3, [pc, #240]	; (27c1c <spi_init+0x174>)
   27b2a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   27b2c:	697b      	ldr	r3, [r7, #20]
   27b2e:	b2db      	uxtb	r3, r3
   27b30:	0018      	movs	r0, r3
   27b32:	4b3b      	ldr	r3, [pc, #236]	; (27c20 <spi_init+0x178>)
   27b34:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   27b36:	687b      	ldr	r3, [r7, #4]
   27b38:	2224      	movs	r2, #36	; 0x24
   27b3a:	5c9b      	ldrb	r3, [r3, r2]
   27b3c:	2100      	movs	r1, #0
   27b3e:	0018      	movs	r0, r3
   27b40:	4b38      	ldr	r3, [pc, #224]	; (27c24 <spi_init+0x17c>)
   27b42:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   27b44:	687b      	ldr	r3, [r7, #4]
   27b46:	781b      	ldrb	r3, [r3, #0]
   27b48:	2b01      	cmp	r3, #1
   27b4a:	d105      	bne.n	27b58 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   27b4c:	6a3b      	ldr	r3, [r7, #32]
   27b4e:	681b      	ldr	r3, [r3, #0]
   27b50:	220c      	movs	r2, #12
   27b52:	431a      	orrs	r2, r3
   27b54:	6a3b      	ldr	r3, [r7, #32]
   27b56:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   27b58:	2327      	movs	r3, #39	; 0x27
   27b5a:	18fb      	adds	r3, r7, r3
   27b5c:	2200      	movs	r2, #0
   27b5e:	701a      	strb	r2, [r3, #0]
   27b60:	e010      	b.n	27b84 <spi_init+0xdc>
		module->callback[i]        = NULL;
   27b62:	2327      	movs	r3, #39	; 0x27
   27b64:	18fb      	adds	r3, r7, r3
   27b66:	781b      	ldrb	r3, [r3, #0]
   27b68:	68fa      	ldr	r2, [r7, #12]
   27b6a:	3302      	adds	r3, #2
   27b6c:	009b      	lsls	r3, r3, #2
   27b6e:	18d3      	adds	r3, r2, r3
   27b70:	3304      	adds	r3, #4
   27b72:	2200      	movs	r2, #0
   27b74:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   27b76:	2327      	movs	r3, #39	; 0x27
   27b78:	18fb      	adds	r3, r7, r3
   27b7a:	781a      	ldrb	r2, [r3, #0]
   27b7c:	2327      	movs	r3, #39	; 0x27
   27b7e:	18fb      	adds	r3, r7, r3
   27b80:	3201      	adds	r2, #1
   27b82:	701a      	strb	r2, [r3, #0]
   27b84:	2327      	movs	r3, #39	; 0x27
   27b86:	18fb      	adds	r3, r7, r3
   27b88:	781b      	ldrb	r3, [r3, #0]
   27b8a:	2b06      	cmp	r3, #6
   27b8c:	d9e9      	bls.n	27b62 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   27b8e:	68fb      	ldr	r3, [r7, #12]
   27b90:	2200      	movs	r2, #0
   27b92:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   27b94:	68fb      	ldr	r3, [r7, #12]
   27b96:	2200      	movs	r2, #0
   27b98:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   27b9a:	68fb      	ldr	r3, [r7, #12]
   27b9c:	2200      	movs	r2, #0
   27b9e:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   27ba0:	68fb      	ldr	r3, [r7, #12]
   27ba2:	2200      	movs	r2, #0
   27ba4:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   27ba6:	68fb      	ldr	r3, [r7, #12]
   27ba8:	2236      	movs	r2, #54	; 0x36
   27baa:	2100      	movs	r1, #0
   27bac:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   27bae:	68fb      	ldr	r3, [r7, #12]
   27bb0:	2237      	movs	r2, #55	; 0x37
   27bb2:	2100      	movs	r1, #0
   27bb4:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   27bb6:	68fb      	ldr	r3, [r7, #12]
   27bb8:	2238      	movs	r2, #56	; 0x38
   27bba:	2100      	movs	r1, #0
   27bbc:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   27bbe:	68fb      	ldr	r3, [r7, #12]
   27bc0:	2203      	movs	r2, #3
   27bc2:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   27bc4:	68fb      	ldr	r3, [r7, #12]
   27bc6:	2200      	movs	r2, #0
   27bc8:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   27bca:	68fb      	ldr	r3, [r7, #12]
   27bcc:	681b      	ldr	r3, [r3, #0]
   27bce:	2213      	movs	r2, #19
   27bd0:	18bc      	adds	r4, r7, r2
   27bd2:	0018      	movs	r0, r3
   27bd4:	4b0e      	ldr	r3, [pc, #56]	; (27c10 <spi_init+0x168>)
   27bd6:	4798      	blx	r3
   27bd8:	0003      	movs	r3, r0
   27bda:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   27bdc:	4a12      	ldr	r2, [pc, #72]	; (27c28 <spi_init+0x180>)
   27bde:	2313      	movs	r3, #19
   27be0:	18fb      	adds	r3, r7, r3
   27be2:	781b      	ldrb	r3, [r3, #0]
   27be4:	0011      	movs	r1, r2
   27be6:	0018      	movs	r0, r3
   27be8:	4b10      	ldr	r3, [pc, #64]	; (27c2c <spi_init+0x184>)
   27bea:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   27bec:	2313      	movs	r3, #19
   27bee:	18fb      	adds	r3, r7, r3
   27bf0:	781a      	ldrb	r2, [r3, #0]
   27bf2:	4b0f      	ldr	r3, [pc, #60]	; (27c30 <spi_init+0x188>)
   27bf4:	0092      	lsls	r2, r2, #2
   27bf6:	68f9      	ldr	r1, [r7, #12]
   27bf8:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   27bfa:	687a      	ldr	r2, [r7, #4]
   27bfc:	68fb      	ldr	r3, [r7, #12]
   27bfe:	0011      	movs	r1, r2
   27c00:	0018      	movs	r0, r3
   27c02:	4b0c      	ldr	r3, [pc, #48]	; (27c34 <spi_init+0x18c>)
   27c04:	4798      	blx	r3
   27c06:	0003      	movs	r3, r0
}
   27c08:	0018      	movs	r0, r3
   27c0a:	46bd      	mov	sp, r7
   27c0c:	b00b      	add	sp, #44	; 0x2c
   27c0e:	bd90      	pop	{r4, r7, pc}
   27c10:	00027229 	.word	0x00027229
   27c14:	000274e5 	.word	0x000274e5
   27c18:	000274cd 	.word	0x000274cd
   27c1c:	00029ab9 	.word	0x00029ab9
   27c20:	00029afd 	.word	0x00029afd
   27c24:	00026fe1 	.word	0x00026fe1
   27c28:	00028101 	.word	0x00028101
   27c2c:	0002728d 	.word	0x0002728d
   27c30:	20005a38 	.word	0x20005a38
   27c34:	00027899 	.word	0x00027899

00027c38 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   27c38:	b590      	push	{r4, r7, lr}
   27c3a:	b087      	sub	sp, #28
   27c3c:	af00      	add	r7, sp, #0
   27c3e:	60f8      	str	r0, [r7, #12]
   27c40:	60b9      	str	r1, [r7, #8]
   27c42:	0019      	movs	r1, r3
   27c44:	1dbb      	adds	r3, r7, #6
   27c46:	801a      	strh	r2, [r3, #0]
   27c48:	1d3b      	adds	r3, r7, #4
   27c4a:	1c0a      	adds	r2, r1, #0
   27c4c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   27c4e:	68fb      	ldr	r3, [r7, #12]
   27c50:	2238      	movs	r2, #56	; 0x38
   27c52:	5c9b      	ldrb	r3, [r3, r2]
   27c54:	b2db      	uxtb	r3, r3
   27c56:	2b05      	cmp	r3, #5
   27c58:	d101      	bne.n	27c5e <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   27c5a:	2305      	movs	r3, #5
   27c5c:	e07a      	b.n	27d54 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   27c5e:	1dbb      	adds	r3, r7, #6
   27c60:	881b      	ldrh	r3, [r3, #0]
   27c62:	2b00      	cmp	r3, #0
   27c64:	d101      	bne.n	27c6a <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   27c66:	2317      	movs	r3, #23
   27c68:	e074      	b.n	27d54 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   27c6a:	68fb      	ldr	r3, [r7, #12]
   27c6c:	79db      	ldrb	r3, [r3, #7]
   27c6e:	2201      	movs	r2, #1
   27c70:	4053      	eors	r3, r2
   27c72:	b2db      	uxtb	r3, r3
   27c74:	2b00      	cmp	r3, #0
   27c76:	d001      	beq.n	27c7c <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   27c78:	231c      	movs	r3, #28
   27c7a:	e06b      	b.n	27d54 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   27c7c:	2316      	movs	r3, #22
   27c7e:	18fb      	adds	r3, r7, r3
   27c80:	2200      	movs	r2, #0
   27c82:	801a      	strh	r2, [r3, #0]

	while (length--) {
   27c84:	e05e      	b.n	27d44 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   27c86:	68fb      	ldr	r3, [r7, #12]
   27c88:	795b      	ldrb	r3, [r3, #5]
   27c8a:	2b01      	cmp	r3, #1
   27c8c:	d112      	bne.n	27cb4 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   27c8e:	46c0      	nop			; (mov r8, r8)
   27c90:	68fb      	ldr	r3, [r7, #12]
   27c92:	0018      	movs	r0, r3
   27c94:	4b31      	ldr	r3, [pc, #196]	; (27d5c <spi_read_buffer_wait+0x124>)
   27c96:	4798      	blx	r3
   27c98:	0003      	movs	r3, r0
   27c9a:	001a      	movs	r2, r3
   27c9c:	2301      	movs	r3, #1
   27c9e:	4053      	eors	r3, r2
   27ca0:	b2db      	uxtb	r3, r3
   27ca2:	2b00      	cmp	r3, #0
   27ca4:	d1f4      	bne.n	27c90 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   27ca6:	1d3b      	adds	r3, r7, #4
   27ca8:	881a      	ldrh	r2, [r3, #0]
   27caa:	68fb      	ldr	r3, [r7, #12]
   27cac:	0011      	movs	r1, r2
   27cae:	0018      	movs	r0, r3
   27cb0:	4b2b      	ldr	r3, [pc, #172]	; (27d60 <spi_read_buffer_wait+0x128>)
   27cb2:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   27cb4:	46c0      	nop			; (mov r8, r8)
   27cb6:	68fb      	ldr	r3, [r7, #12]
   27cb8:	0018      	movs	r0, r3
   27cba:	4b2a      	ldr	r3, [pc, #168]	; (27d64 <spi_read_buffer_wait+0x12c>)
   27cbc:	4798      	blx	r3
   27cbe:	0003      	movs	r3, r0
   27cc0:	001a      	movs	r2, r3
   27cc2:	2301      	movs	r3, #1
   27cc4:	4053      	eors	r3, r2
   27cc6:	b2db      	uxtb	r3, r3
   27cc8:	2b00      	cmp	r3, #0
   27cca:	d1f4      	bne.n	27cb6 <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   27ccc:	2312      	movs	r3, #18
   27cce:	18fb      	adds	r3, r7, r3
   27cd0:	2200      	movs	r2, #0
   27cd2:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   27cd4:	2315      	movs	r3, #21
   27cd6:	18fc      	adds	r4, r7, r3
   27cd8:	2312      	movs	r3, #18
   27cda:	18fa      	adds	r2, r7, r3
   27cdc:	68fb      	ldr	r3, [r7, #12]
   27cde:	0011      	movs	r1, r2
   27ce0:	0018      	movs	r0, r3
   27ce2:	4b21      	ldr	r3, [pc, #132]	; (27d68 <spi_read_buffer_wait+0x130>)
   27ce4:	4798      	blx	r3
   27ce6:	0003      	movs	r3, r0
   27ce8:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   27cea:	2315      	movs	r3, #21
   27cec:	18fb      	adds	r3, r7, r3
   27cee:	781b      	ldrb	r3, [r3, #0]
   27cf0:	2b00      	cmp	r3, #0
   27cf2:	d003      	beq.n	27cfc <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   27cf4:	2315      	movs	r3, #21
   27cf6:	18fb      	adds	r3, r7, r3
   27cf8:	781b      	ldrb	r3, [r3, #0]
   27cfa:	e02b      	b.n	27d54 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   27cfc:	2316      	movs	r3, #22
   27cfe:	18fb      	adds	r3, r7, r3
   27d00:	881b      	ldrh	r3, [r3, #0]
   27d02:	2216      	movs	r2, #22
   27d04:	18ba      	adds	r2, r7, r2
   27d06:	1c59      	adds	r1, r3, #1
   27d08:	8011      	strh	r1, [r2, #0]
   27d0a:	001a      	movs	r2, r3
   27d0c:	68bb      	ldr	r3, [r7, #8]
   27d0e:	189b      	adds	r3, r3, r2
   27d10:	2212      	movs	r2, #18
   27d12:	18ba      	adds	r2, r7, r2
   27d14:	8812      	ldrh	r2, [r2, #0]
   27d16:	b2d2      	uxtb	r2, r2
   27d18:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27d1a:	68fb      	ldr	r3, [r7, #12]
   27d1c:	799b      	ldrb	r3, [r3, #6]
   27d1e:	2b01      	cmp	r3, #1
   27d20:	d110      	bne.n	27d44 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   27d22:	2316      	movs	r3, #22
   27d24:	18fb      	adds	r3, r7, r3
   27d26:	881b      	ldrh	r3, [r3, #0]
   27d28:	2216      	movs	r2, #22
   27d2a:	18ba      	adds	r2, r7, r2
   27d2c:	1c59      	adds	r1, r3, #1
   27d2e:	8011      	strh	r1, [r2, #0]
   27d30:	001a      	movs	r2, r3
   27d32:	68bb      	ldr	r3, [r7, #8]
   27d34:	189b      	adds	r3, r3, r2
   27d36:	2212      	movs	r2, #18
   27d38:	18ba      	adds	r2, r7, r2
   27d3a:	8812      	ldrh	r2, [r2, #0]
   27d3c:	0a12      	lsrs	r2, r2, #8
   27d3e:	b292      	uxth	r2, r2
   27d40:	b2d2      	uxtb	r2, r2
   27d42:	701a      	strb	r2, [r3, #0]
	while (length--) {
   27d44:	1dbb      	adds	r3, r7, #6
   27d46:	881b      	ldrh	r3, [r3, #0]
   27d48:	1dba      	adds	r2, r7, #6
   27d4a:	1e59      	subs	r1, r3, #1
   27d4c:	8011      	strh	r1, [r2, #0]
   27d4e:	2b00      	cmp	r3, #0
   27d50:	d199      	bne.n	27c86 <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   27d52:	2300      	movs	r3, #0
}
   27d54:	0018      	movs	r0, r3
   27d56:	46bd      	mov	sp, r7
   27d58:	b007      	add	sp, #28
   27d5a:	bd90      	pop	{r4, r7, pc}
   27d5c:	000276b1 	.word	0x000276b1
   27d60:	00027701 	.word	0x00027701
   27d64:	000276d9 	.word	0x000276d9
   27d68:	00027749 	.word	0x00027749

00027d6c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   27d6c:	b580      	push	{r7, lr}
   27d6e:	b086      	sub	sp, #24
   27d70:	af00      	add	r7, sp, #0
   27d72:	60f8      	str	r0, [r7, #12]
   27d74:	60b9      	str	r1, [r7, #8]
   27d76:	1dfb      	adds	r3, r7, #7
   27d78:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   27d7a:	68fb      	ldr	r3, [r7, #12]
   27d7c:	795b      	ldrb	r3, [r3, #5]
   27d7e:	2b01      	cmp	r3, #1
   27d80:	d001      	beq.n	27d86 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   27d82:	2315      	movs	r3, #21
   27d84:	e05c      	b.n	27e40 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   27d86:	68fb      	ldr	r3, [r7, #12]
   27d88:	7a1b      	ldrb	r3, [r3, #8]
   27d8a:	2201      	movs	r2, #1
   27d8c:	4053      	eors	r3, r2
   27d8e:	b2db      	uxtb	r3, r3
   27d90:	2b00      	cmp	r3, #0
   27d92:	d054      	beq.n	27e3e <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   27d94:	1dfb      	adds	r3, r7, #7
   27d96:	781b      	ldrb	r3, [r3, #0]
   27d98:	2b00      	cmp	r3, #0
   27d9a:	d04a      	beq.n	27e32 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   27d9c:	68bb      	ldr	r3, [r7, #8]
   27d9e:	785b      	ldrb	r3, [r3, #1]
   27da0:	2b00      	cmp	r3, #0
   27da2:	d03f      	beq.n	27e24 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   27da4:	68fb      	ldr	r3, [r7, #12]
   27da6:	0018      	movs	r0, r3
   27da8:	4b27      	ldr	r3, [pc, #156]	; (27e48 <spi_select_slave+0xdc>)
   27daa:	4798      	blx	r3
   27dac:	0003      	movs	r3, r0
   27dae:	001a      	movs	r2, r3
   27db0:	2301      	movs	r3, #1
   27db2:	4053      	eors	r3, r2
   27db4:	b2db      	uxtb	r3, r3
   27db6:	2b00      	cmp	r3, #0
   27db8:	d007      	beq.n	27dca <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   27dba:	68bb      	ldr	r3, [r7, #8]
   27dbc:	781b      	ldrb	r3, [r3, #0]
   27dbe:	2101      	movs	r1, #1
   27dc0:	0018      	movs	r0, r3
   27dc2:	4b22      	ldr	r3, [pc, #136]	; (27e4c <spi_select_slave+0xe0>)
   27dc4:	4798      	blx	r3
					return STATUS_BUSY;
   27dc6:	2305      	movs	r3, #5
   27dc8:	e03a      	b.n	27e40 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   27dca:	68bb      	ldr	r3, [r7, #8]
   27dcc:	781b      	ldrb	r3, [r3, #0]
   27dce:	2100      	movs	r1, #0
   27dd0:	0018      	movs	r0, r3
   27dd2:	4b1e      	ldr	r3, [pc, #120]	; (27e4c <spi_select_slave+0xe0>)
   27dd4:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   27dd6:	68bb      	ldr	r3, [r7, #8]
   27dd8:	789b      	ldrb	r3, [r3, #2]
   27dda:	b29a      	uxth	r2, r3
   27ddc:	68fb      	ldr	r3, [r7, #12]
   27dde:	0011      	movs	r1, r2
   27de0:	0018      	movs	r0, r3
   27de2:	4b1b      	ldr	r3, [pc, #108]	; (27e50 <spi_select_slave+0xe4>)
   27de4:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   27de6:	68fb      	ldr	r3, [r7, #12]
   27de8:	79db      	ldrb	r3, [r3, #7]
   27dea:	2201      	movs	r2, #1
   27dec:	4053      	eors	r3, r2
   27dee:	b2db      	uxtb	r3, r3
   27df0:	2b00      	cmp	r3, #0
   27df2:	d024      	beq.n	27e3e <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   27df4:	46c0      	nop			; (mov r8, r8)
   27df6:	68fb      	ldr	r3, [r7, #12]
   27df8:	0018      	movs	r0, r3
   27dfa:	4b16      	ldr	r3, [pc, #88]	; (27e54 <spi_select_slave+0xe8>)
   27dfc:	4798      	blx	r3
   27dfe:	0003      	movs	r3, r0
   27e00:	001a      	movs	r2, r3
   27e02:	2301      	movs	r3, #1
   27e04:	4053      	eors	r3, r2
   27e06:	b2db      	uxtb	r3, r3
   27e08:	2b00      	cmp	r3, #0
   27e0a:	d1f4      	bne.n	27df6 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   27e0c:	2316      	movs	r3, #22
   27e0e:	18fb      	adds	r3, r7, r3
   27e10:	2200      	movs	r2, #0
   27e12:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   27e14:	2316      	movs	r3, #22
   27e16:	18fa      	adds	r2, r7, r3
   27e18:	68fb      	ldr	r3, [r7, #12]
   27e1a:	0011      	movs	r1, r2
   27e1c:	0018      	movs	r0, r3
   27e1e:	4b0e      	ldr	r3, [pc, #56]	; (27e58 <spi_select_slave+0xec>)
   27e20:	4798      	blx	r3
   27e22:	e00c      	b.n	27e3e <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   27e24:	68bb      	ldr	r3, [r7, #8]
   27e26:	781b      	ldrb	r3, [r3, #0]
   27e28:	2100      	movs	r1, #0
   27e2a:	0018      	movs	r0, r3
   27e2c:	4b07      	ldr	r3, [pc, #28]	; (27e4c <spi_select_slave+0xe0>)
   27e2e:	4798      	blx	r3
   27e30:	e005      	b.n	27e3e <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   27e32:	68bb      	ldr	r3, [r7, #8]
   27e34:	781b      	ldrb	r3, [r3, #0]
   27e36:	2101      	movs	r1, #1
   27e38:	0018      	movs	r0, r3
   27e3a:	4b04      	ldr	r3, [pc, #16]	; (27e4c <spi_select_slave+0xe0>)
   27e3c:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   27e3e:	2300      	movs	r3, #0
}
   27e40:	0018      	movs	r0, r3
   27e42:	46bd      	mov	sp, r7
   27e44:	b006      	add	sp, #24
   27e46:	bd80      	pop	{r7, pc}
   27e48:	000276b1 	.word	0x000276b1
   27e4c:	00027479 	.word	0x00027479
   27e50:	00027701 	.word	0x00027701
   27e54:	000276d9 	.word	0x000276d9
   27e58:	00027749 	.word	0x00027749

00027e5c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   27e5c:	b580      	push	{r7, lr}
   27e5e:	b086      	sub	sp, #24
   27e60:	af00      	add	r7, sp, #0
   27e62:	60f8      	str	r0, [r7, #12]
   27e64:	60b9      	str	r1, [r7, #8]
   27e66:	1dbb      	adds	r3, r7, #6
   27e68:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   27e6a:	68fb      	ldr	r3, [r7, #12]
   27e6c:	2238      	movs	r2, #56	; 0x38
   27e6e:	5c9b      	ldrb	r3, [r3, r2]
   27e70:	b2db      	uxtb	r3, r3
   27e72:	2b05      	cmp	r3, #5
   27e74:	d101      	bne.n	27e7a <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   27e76:	2305      	movs	r3, #5
   27e78:	e087      	b.n	27f8a <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   27e7a:	1dbb      	adds	r3, r7, #6
   27e7c:	881b      	ldrh	r3, [r3, #0]
   27e7e:	2b00      	cmp	r3, #0
   27e80:	d101      	bne.n	27e86 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   27e82:	2317      	movs	r3, #23
   27e84:	e081      	b.n	27f8a <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   27e86:	2316      	movs	r3, #22
   27e88:	18fb      	adds	r3, r7, r3
   27e8a:	2200      	movs	r2, #0
   27e8c:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   27e8e:	2314      	movs	r3, #20
   27e90:	18fb      	adds	r3, r7, r3
   27e92:	1dba      	adds	r2, r7, #6
   27e94:	8812      	ldrh	r2, [r2, #0]
   27e96:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   27e98:	e05f      	b.n	27f5a <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   27e9a:	46c0      	nop			; (mov r8, r8)
   27e9c:	68fb      	ldr	r3, [r7, #12]
   27e9e:	0018      	movs	r0, r3
   27ea0:	4b3c      	ldr	r3, [pc, #240]	; (27f94 <spi_write_buffer_wait+0x138>)
   27ea2:	4798      	blx	r3
   27ea4:	0003      	movs	r3, r0
   27ea6:	001a      	movs	r2, r3
   27ea8:	2301      	movs	r3, #1
   27eaa:	4053      	eors	r3, r2
   27eac:	b2db      	uxtb	r3, r3
   27eae:	2b00      	cmp	r3, #0
   27eb0:	d1f4      	bne.n	27e9c <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   27eb2:	2316      	movs	r3, #22
   27eb4:	18fb      	adds	r3, r7, r3
   27eb6:	881b      	ldrh	r3, [r3, #0]
   27eb8:	2216      	movs	r2, #22
   27eba:	18ba      	adds	r2, r7, r2
   27ebc:	1c59      	adds	r1, r3, #1
   27ebe:	8011      	strh	r1, [r2, #0]
   27ec0:	001a      	movs	r2, r3
   27ec2:	68bb      	ldr	r3, [r7, #8]
   27ec4:	189b      	adds	r3, r3, r2
   27ec6:	781a      	ldrb	r2, [r3, #0]
   27ec8:	2312      	movs	r3, #18
   27eca:	18fb      	adds	r3, r7, r3
   27ecc:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27ece:	68fb      	ldr	r3, [r7, #12]
   27ed0:	799b      	ldrb	r3, [r3, #6]
   27ed2:	2b01      	cmp	r3, #1
   27ed4:	d115      	bne.n	27f02 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   27ed6:	2316      	movs	r3, #22
   27ed8:	18fb      	adds	r3, r7, r3
   27eda:	881b      	ldrh	r3, [r3, #0]
   27edc:	2216      	movs	r2, #22
   27ede:	18ba      	adds	r2, r7, r2
   27ee0:	1c59      	adds	r1, r3, #1
   27ee2:	8011      	strh	r1, [r2, #0]
   27ee4:	001a      	movs	r2, r3
   27ee6:	68bb      	ldr	r3, [r7, #8]
   27ee8:	189b      	adds	r3, r3, r2
   27eea:	781b      	ldrb	r3, [r3, #0]
   27eec:	021b      	lsls	r3, r3, #8
   27eee:	b21a      	sxth	r2, r3
   27ef0:	2312      	movs	r3, #18
   27ef2:	18fb      	adds	r3, r7, r3
   27ef4:	2100      	movs	r1, #0
   27ef6:	5e5b      	ldrsh	r3, [r3, r1]
   27ef8:	4313      	orrs	r3, r2
   27efa:	b21a      	sxth	r2, r3
   27efc:	2312      	movs	r3, #18
   27efe:	18fb      	adds	r3, r7, r3
   27f00:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   27f02:	2312      	movs	r3, #18
   27f04:	18fb      	adds	r3, r7, r3
   27f06:	881a      	ldrh	r2, [r3, #0]
   27f08:	68fb      	ldr	r3, [r7, #12]
   27f0a:	0011      	movs	r1, r2
   27f0c:	0018      	movs	r0, r3
   27f0e:	4b22      	ldr	r3, [pc, #136]	; (27f98 <spi_write_buffer_wait+0x13c>)
   27f10:	4798      	blx	r3

		if (module->receiver_enabled) {
   27f12:	68fb      	ldr	r3, [r7, #12]
   27f14:	79db      	ldrb	r3, [r3, #7]
   27f16:	2214      	movs	r2, #20
   27f18:	18ba      	adds	r2, r7, r2
   27f1a:	2114      	movs	r1, #20
   27f1c:	1879      	adds	r1, r7, r1
   27f1e:	8809      	ldrh	r1, [r1, #0]
   27f20:	8011      	strh	r1, [r2, #0]
   27f22:	2b00      	cmp	r3, #0
   27f24:	d019      	beq.n	27f5a <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   27f26:	46c0      	nop			; (mov r8, r8)
   27f28:	68fb      	ldr	r3, [r7, #12]
   27f2a:	0018      	movs	r0, r3
   27f2c:	4b1b      	ldr	r3, [pc, #108]	; (27f9c <spi_write_buffer_wait+0x140>)
   27f2e:	4798      	blx	r3
   27f30:	0003      	movs	r3, r0
   27f32:	001a      	movs	r2, r3
   27f34:	2301      	movs	r3, #1
   27f36:	4053      	eors	r3, r2
   27f38:	b2db      	uxtb	r3, r3
   27f3a:	2b00      	cmp	r3, #0
   27f3c:	d1f4      	bne.n	27f28 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   27f3e:	2310      	movs	r3, #16
   27f40:	18fa      	adds	r2, r7, r3
   27f42:	68fb      	ldr	r3, [r7, #12]
   27f44:	0011      	movs	r1, r2
   27f46:	0018      	movs	r0, r3
   27f48:	4b15      	ldr	r3, [pc, #84]	; (27fa0 <spi_write_buffer_wait+0x144>)
   27f4a:	4798      	blx	r3
			flush_length--;
   27f4c:	2314      	movs	r3, #20
   27f4e:	18fb      	adds	r3, r7, r3
   27f50:	881a      	ldrh	r2, [r3, #0]
   27f52:	2314      	movs	r3, #20
   27f54:	18fb      	adds	r3, r7, r3
   27f56:	3a01      	subs	r2, #1
   27f58:	801a      	strh	r2, [r3, #0]
	while (length--) {
   27f5a:	1dbb      	adds	r3, r7, #6
   27f5c:	881b      	ldrh	r3, [r3, #0]
   27f5e:	1dba      	adds	r2, r7, #6
   27f60:	1e59      	subs	r1, r3, #1
   27f62:	8011      	strh	r1, [r2, #0]
   27f64:	2b00      	cmp	r3, #0
   27f66:	d198      	bne.n	27e9a <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   27f68:	68fb      	ldr	r3, [r7, #12]
   27f6a:	795b      	ldrb	r3, [r3, #5]
   27f6c:	2b01      	cmp	r3, #1
   27f6e:	d10b      	bne.n	27f88 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   27f70:	46c0      	nop			; (mov r8, r8)
   27f72:	68fb      	ldr	r3, [r7, #12]
   27f74:	0018      	movs	r0, r3
   27f76:	4b0b      	ldr	r3, [pc, #44]	; (27fa4 <spi_write_buffer_wait+0x148>)
   27f78:	4798      	blx	r3
   27f7a:	0003      	movs	r3, r0
   27f7c:	001a      	movs	r2, r3
   27f7e:	2301      	movs	r3, #1
   27f80:	4053      	eors	r3, r2
   27f82:	b2db      	uxtb	r3, r3
   27f84:	2b00      	cmp	r3, #0
   27f86:	d1f4      	bne.n	27f72 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   27f88:	2300      	movs	r3, #0
}
   27f8a:	0018      	movs	r0, r3
   27f8c:	46bd      	mov	sp, r7
   27f8e:	b006      	add	sp, #24
   27f90:	bd80      	pop	{r7, pc}
   27f92:	46c0      	nop			; (mov r8, r8)
   27f94:	000276b1 	.word	0x000276b1
   27f98:	00027701 	.word	0x00027701
   27f9c:	000276d9 	.word	0x000276d9
   27fa0:	00027749 	.word	0x00027749
   27fa4:	00027689 	.word	0x00027689

00027fa8 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   27fa8:	b580      	push	{r7, lr}
   27faa:	b084      	sub	sp, #16
   27fac:	af00      	add	r7, sp, #0
   27fae:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27fb0:	687b      	ldr	r3, [r7, #4]
   27fb2:	681b      	ldr	r3, [r3, #0]
   27fb4:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   27fb6:	687b      	ldr	r3, [r7, #4]
   27fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27fba:	781b      	ldrb	r3, [r3, #0]
   27fbc:	b2da      	uxtb	r2, r3
   27fbe:	230e      	movs	r3, #14
   27fc0:	18fb      	adds	r3, r7, r3
   27fc2:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   27fc4:	687b      	ldr	r3, [r7, #4]
   27fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27fc8:	1c5a      	adds	r2, r3, #1
   27fca:	687b      	ldr	r3, [r7, #4]
   27fcc:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27fce:	687b      	ldr	r3, [r7, #4]
   27fd0:	799b      	ldrb	r3, [r3, #6]
   27fd2:	2b01      	cmp	r3, #1
   27fd4:	d113      	bne.n	27ffe <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   27fd6:	687b      	ldr	r3, [r7, #4]
   27fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27fda:	781b      	ldrb	r3, [r3, #0]
   27fdc:	b2db      	uxtb	r3, r3
   27fde:	021b      	lsls	r3, r3, #8
   27fe0:	b21a      	sxth	r2, r3
   27fe2:	230e      	movs	r3, #14
   27fe4:	18fb      	adds	r3, r7, r3
   27fe6:	2100      	movs	r1, #0
   27fe8:	5e5b      	ldrsh	r3, [r3, r1]
   27fea:	4313      	orrs	r3, r2
   27fec:	b21a      	sxth	r2, r3
   27fee:	230e      	movs	r3, #14
   27ff0:	18fb      	adds	r3, r7, r3
   27ff2:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   27ff4:	687b      	ldr	r3, [r7, #4]
   27ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27ff8:	1c5a      	adds	r2, r3, #1
   27ffa:	687b      	ldr	r3, [r7, #4]
   27ffc:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   27ffe:	230e      	movs	r3, #14
   28000:	18fb      	adds	r3, r7, r3
   28002:	881b      	ldrh	r3, [r3, #0]
   28004:	05db      	lsls	r3, r3, #23
   28006:	0dda      	lsrs	r2, r3, #23
   28008:	68bb      	ldr	r3, [r7, #8]
   2800a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   2800c:	687b      	ldr	r3, [r7, #4]
   2800e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   28010:	b29b      	uxth	r3, r3
   28012:	3b01      	subs	r3, #1
   28014:	b29a      	uxth	r2, r3
   28016:	687b      	ldr	r3, [r7, #4]
   28018:	869a      	strh	r2, [r3, #52]	; 0x34
}
   2801a:	46c0      	nop			; (mov r8, r8)
   2801c:	46bd      	mov	sp, r7
   2801e:	b004      	add	sp, #16
   28020:	bd80      	pop	{r7, pc}
	...

00028024 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   28024:	b580      	push	{r7, lr}
   28026:	b084      	sub	sp, #16
   28028:	af00      	add	r7, sp, #0
   2802a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2802c:	687b      	ldr	r3, [r7, #4]
   2802e:	681b      	ldr	r3, [r3, #0]
   28030:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   28032:	4b08      	ldr	r3, [pc, #32]	; (28054 <_spi_write_dummy+0x30>)
   28034:	881b      	ldrh	r3, [r3, #0]
   28036:	001a      	movs	r2, r3
   28038:	68fb      	ldr	r3, [r7, #12]
   2803a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   2803c:	687b      	ldr	r3, [r7, #4]
   2803e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28040:	b29b      	uxth	r3, r3
   28042:	3b01      	subs	r3, #1
   28044:	b29a      	uxth	r2, r3
   28046:	687b      	ldr	r3, [r7, #4]
   28048:	865a      	strh	r2, [r3, #50]	; 0x32
}
   2804a:	46c0      	nop			; (mov r8, r8)
   2804c:	46bd      	mov	sp, r7
   2804e:	b004      	add	sp, #16
   28050:	bd80      	pop	{r7, pc}
   28052:	46c0      	nop			; (mov r8, r8)
   28054:	20005a50 	.word	0x20005a50

00028058 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   28058:	b580      	push	{r7, lr}
   2805a:	b084      	sub	sp, #16
   2805c:	af00      	add	r7, sp, #0
   2805e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28060:	687b      	ldr	r3, [r7, #4]
   28062:	681b      	ldr	r3, [r3, #0]
   28064:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   28066:	230a      	movs	r3, #10
   28068:	18fb      	adds	r3, r7, r3
   2806a:	2200      	movs	r2, #0
   2806c:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   2806e:	68fb      	ldr	r3, [r7, #12]
   28070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   28072:	230a      	movs	r3, #10
   28074:	18fb      	adds	r3, r7, r3
   28076:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   28078:	687b      	ldr	r3, [r7, #4]
   2807a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2807c:	b29b      	uxth	r3, r3
   2807e:	3b01      	subs	r3, #1
   28080:	b29a      	uxth	r2, r3
   28082:	687b      	ldr	r3, [r7, #4]
   28084:	865a      	strh	r2, [r3, #50]	; 0x32
}
   28086:	46c0      	nop			; (mov r8, r8)
   28088:	46bd      	mov	sp, r7
   2808a:	b004      	add	sp, #16
   2808c:	bd80      	pop	{r7, pc}

0002808e <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   2808e:	b580      	push	{r7, lr}
   28090:	b084      	sub	sp, #16
   28092:	af00      	add	r7, sp, #0
   28094:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28096:	687b      	ldr	r3, [r7, #4]
   28098:	681b      	ldr	r3, [r3, #0]
   2809a:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   2809c:	68fb      	ldr	r3, [r7, #12]
   2809e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   280a0:	b29a      	uxth	r2, r3
   280a2:	230a      	movs	r3, #10
   280a4:	18fb      	adds	r3, r7, r3
   280a6:	05d2      	lsls	r2, r2, #23
   280a8:	0dd2      	lsrs	r2, r2, #23
   280aa:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   280ac:	687b      	ldr	r3, [r7, #4]
   280ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   280b0:	220a      	movs	r2, #10
   280b2:	18ba      	adds	r2, r7, r2
   280b4:	8812      	ldrh	r2, [r2, #0]
   280b6:	b2d2      	uxtb	r2, r2
   280b8:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   280ba:	687b      	ldr	r3, [r7, #4]
   280bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   280be:	1c5a      	adds	r2, r3, #1
   280c0:	687b      	ldr	r3, [r7, #4]
   280c2:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   280c4:	687b      	ldr	r3, [r7, #4]
   280c6:	799b      	ldrb	r3, [r3, #6]
   280c8:	2b01      	cmp	r3, #1
   280ca:	d10d      	bne.n	280e8 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   280cc:	687b      	ldr	r3, [r7, #4]
   280ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   280d0:	220a      	movs	r2, #10
   280d2:	18ba      	adds	r2, r7, r2
   280d4:	8812      	ldrh	r2, [r2, #0]
   280d6:	0a12      	lsrs	r2, r2, #8
   280d8:	b292      	uxth	r2, r2
   280da:	b2d2      	uxtb	r2, r2
   280dc:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   280de:	687b      	ldr	r3, [r7, #4]
   280e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   280e2:	1c5a      	adds	r2, r3, #1
   280e4:	687b      	ldr	r3, [r7, #4]
   280e6:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   280e8:	687b      	ldr	r3, [r7, #4]
   280ea:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   280ec:	b29b      	uxth	r3, r3
   280ee:	3b01      	subs	r3, #1
   280f0:	b29a      	uxth	r2, r3
   280f2:	687b      	ldr	r3, [r7, #4]
   280f4:	861a      	strh	r2, [r3, #48]	; 0x30
}
   280f6:	46c0      	nop			; (mov r8, r8)
   280f8:	46bd      	mov	sp, r7
   280fa:	b004      	add	sp, #16
   280fc:	bd80      	pop	{r7, pc}
	...

00028100 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   28100:	b580      	push	{r7, lr}
   28102:	b086      	sub	sp, #24
   28104:	af00      	add	r7, sp, #0
   28106:	0002      	movs	r2, r0
   28108:	1dfb      	adds	r3, r7, #7
   2810a:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   2810c:	1dfb      	adds	r3, r7, #7
   2810e:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   28110:	4b96      	ldr	r3, [pc, #600]	; (2836c <_spi_interrupt_handler+0x26c>)
   28112:	0092      	lsls	r2, r2, #2
   28114:	58d3      	ldr	r3, [r2, r3]
   28116:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28118:	697b      	ldr	r3, [r7, #20]
   2811a:	681b      	ldr	r3, [r3, #0]
   2811c:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   2811e:	697b      	ldr	r3, [r7, #20]
   28120:	2237      	movs	r2, #55	; 0x37
   28122:	5c9a      	ldrb	r2, [r3, r2]
   28124:	697b      	ldr	r3, [r7, #20]
   28126:	2136      	movs	r1, #54	; 0x36
   28128:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   2812a:	230f      	movs	r3, #15
   2812c:	18fb      	adds	r3, r7, r3
   2812e:	400a      	ands	r2, r1
   28130:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   28132:	693b      	ldr	r3, [r7, #16]
   28134:	7e1b      	ldrb	r3, [r3, #24]
   28136:	b2da      	uxtb	r2, r3
   28138:	230c      	movs	r3, #12
   2813a:	18fb      	adds	r3, r7, r3
   2813c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   2813e:	693b      	ldr	r3, [r7, #16]
   28140:	7d9b      	ldrb	r3, [r3, #22]
   28142:	b2db      	uxtb	r3, r3
   28144:	b29a      	uxth	r2, r3
   28146:	230c      	movs	r3, #12
   28148:	18fb      	adds	r3, r7, r3
   2814a:	210c      	movs	r1, #12
   2814c:	1879      	adds	r1, r7, r1
   2814e:	8809      	ldrh	r1, [r1, #0]
   28150:	400a      	ands	r2, r1
   28152:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   28154:	230c      	movs	r3, #12
   28156:	18fb      	adds	r3, r7, r3
   28158:	881b      	ldrh	r3, [r3, #0]
   2815a:	2201      	movs	r2, #1
   2815c:	4013      	ands	r3, r2
   2815e:	d038      	beq.n	281d2 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   28160:	697b      	ldr	r3, [r7, #20]
   28162:	795b      	ldrb	r3, [r3, #5]
   28164:	2b01      	cmp	r3, #1
   28166:	d110      	bne.n	2818a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   28168:	697b      	ldr	r3, [r7, #20]
   2816a:	7a5b      	ldrb	r3, [r3, #9]
   2816c:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   2816e:	2b00      	cmp	r3, #0
   28170:	d10b      	bne.n	2818a <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   28172:	697b      	ldr	r3, [r7, #20]
   28174:	0018      	movs	r0, r3
   28176:	4b7e      	ldr	r3, [pc, #504]	; (28370 <_spi_interrupt_handler+0x270>)
   28178:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   2817a:	697b      	ldr	r3, [r7, #20]
   2817c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2817e:	b29b      	uxth	r3, r3
   28180:	2b00      	cmp	r3, #0
   28182:	d102      	bne.n	2818a <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   28184:	693b      	ldr	r3, [r7, #16]
   28186:	2201      	movs	r2, #1
   28188:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   2818a:	697b      	ldr	r3, [r7, #20]
   2818c:	795b      	ldrb	r3, [r3, #5]
		if (0
   2818e:	2b01      	cmp	r3, #1
   28190:	d11f      	bne.n	281d2 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   28192:	697b      	ldr	r3, [r7, #20]
   28194:	7a5b      	ldrb	r3, [r3, #9]
   28196:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   28198:	2b00      	cmp	r3, #0
   2819a:	d01a      	beq.n	281d2 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   2819c:	697b      	ldr	r3, [r7, #20]
   2819e:	0018      	movs	r0, r3
   281a0:	4b74      	ldr	r3, [pc, #464]	; (28374 <_spi_interrupt_handler+0x274>)
   281a2:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   281a4:	697b      	ldr	r3, [r7, #20]
   281a6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   281a8:	b29b      	uxth	r3, r3
   281aa:	2b00      	cmp	r3, #0
   281ac:	d111      	bne.n	281d2 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   281ae:	693b      	ldr	r3, [r7, #16]
   281b0:	2201      	movs	r2, #1
   281b2:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   281b4:	697b      	ldr	r3, [r7, #20]
   281b6:	7a5b      	ldrb	r3, [r3, #9]
   281b8:	b2db      	uxtb	r3, r3
   281ba:	2b01      	cmp	r3, #1
   281bc:	d109      	bne.n	281d2 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   281be:	697b      	ldr	r3, [r7, #20]
   281c0:	79db      	ldrb	r3, [r3, #7]
   281c2:	2201      	movs	r2, #1
   281c4:	4053      	eors	r3, r2
   281c6:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   281c8:	2b00      	cmp	r3, #0
   281ca:	d002      	beq.n	281d2 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   281cc:	693b      	ldr	r3, [r7, #16]
   281ce:	2202      	movs	r2, #2
   281d0:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   281d2:	230c      	movs	r3, #12
   281d4:	18fb      	adds	r3, r7, r3
   281d6:	881b      	ldrh	r3, [r3, #0]
   281d8:	2204      	movs	r2, #4
   281da:	4013      	ands	r3, r2
   281dc:	d100      	bne.n	281e0 <_spi_interrupt_handler+0xe0>
   281de:	e07e      	b.n	282de <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   281e0:	693b      	ldr	r3, [r7, #16]
   281e2:	8b5b      	ldrh	r3, [r3, #26]
   281e4:	b29b      	uxth	r3, r3
   281e6:	001a      	movs	r2, r3
   281e8:	2304      	movs	r3, #4
   281ea:	4013      	ands	r3, r2
   281ec:	d022      	beq.n	28234 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   281ee:	697b      	ldr	r3, [r7, #20]
   281f0:	7a5b      	ldrb	r3, [r3, #9]
   281f2:	b2db      	uxtb	r3, r3
   281f4:	2b01      	cmp	r3, #1
   281f6:	d014      	beq.n	28222 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   281f8:	697b      	ldr	r3, [r7, #20]
   281fa:	2238      	movs	r2, #56	; 0x38
   281fc:	211e      	movs	r1, #30
   281fe:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   28200:	697b      	ldr	r3, [r7, #20]
   28202:	2203      	movs	r2, #3
   28204:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   28206:	693b      	ldr	r3, [r7, #16]
   28208:	2205      	movs	r2, #5
   2820a:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   2820c:	230f      	movs	r3, #15
   2820e:	18fb      	adds	r3, r7, r3
   28210:	781b      	ldrb	r3, [r3, #0]
   28212:	2208      	movs	r2, #8
   28214:	4013      	ands	r3, r2
   28216:	d004      	beq.n	28222 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   28218:	697b      	ldr	r3, [r7, #20]
   2821a:	699b      	ldr	r3, [r3, #24]
   2821c:	697a      	ldr	r2, [r7, #20]
   2821e:	0010      	movs	r0, r2
   28220:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   28222:	693b      	ldr	r3, [r7, #16]
   28224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   28226:	230a      	movs	r3, #10
   28228:	18fb      	adds	r3, r7, r3
   2822a:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   2822c:	693b      	ldr	r3, [r7, #16]
   2822e:	2204      	movs	r2, #4
   28230:	835a      	strh	r2, [r3, #26]
   28232:	e054      	b.n	282de <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   28234:	697b      	ldr	r3, [r7, #20]
   28236:	7a5b      	ldrb	r3, [r3, #9]
   28238:	b2db      	uxtb	r3, r3
   2823a:	2b01      	cmp	r3, #1
   2823c:	d11e      	bne.n	2827c <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   2823e:	697b      	ldr	r3, [r7, #20]
   28240:	0018      	movs	r0, r3
   28242:	4b4d      	ldr	r3, [pc, #308]	; (28378 <_spi_interrupt_handler+0x278>)
   28244:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   28246:	697b      	ldr	r3, [r7, #20]
   28248:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2824a:	b29b      	uxth	r3, r3
   2824c:	2b00      	cmp	r3, #0
   2824e:	d146      	bne.n	282de <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   28250:	693b      	ldr	r3, [r7, #16]
   28252:	2204      	movs	r2, #4
   28254:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   28256:	697b      	ldr	r3, [r7, #20]
   28258:	2238      	movs	r2, #56	; 0x38
   2825a:	2100      	movs	r1, #0
   2825c:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   2825e:	697b      	ldr	r3, [r7, #20]
   28260:	2203      	movs	r2, #3
   28262:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   28264:	230f      	movs	r3, #15
   28266:	18fb      	adds	r3, r7, r3
   28268:	781b      	ldrb	r3, [r3, #0]
   2826a:	2201      	movs	r2, #1
   2826c:	4013      	ands	r3, r2
   2826e:	d036      	beq.n	282de <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   28270:	697b      	ldr	r3, [r7, #20]
   28272:	68db      	ldr	r3, [r3, #12]
   28274:	697a      	ldr	r2, [r7, #20]
   28276:	0010      	movs	r0, r2
   28278:	4798      	blx	r3
   2827a:	e030      	b.n	282de <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   2827c:	697b      	ldr	r3, [r7, #20]
   2827e:	0018      	movs	r0, r3
   28280:	4b3e      	ldr	r3, [pc, #248]	; (2837c <_spi_interrupt_handler+0x27c>)
   28282:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   28284:	697b      	ldr	r3, [r7, #20]
   28286:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   28288:	b29b      	uxth	r3, r3
   2828a:	2b00      	cmp	r3, #0
   2828c:	d127      	bne.n	282de <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   2828e:	697b      	ldr	r3, [r7, #20]
   28290:	2238      	movs	r2, #56	; 0x38
   28292:	2100      	movs	r1, #0
   28294:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   28296:	693b      	ldr	r3, [r7, #16]
   28298:	2204      	movs	r2, #4
   2829a:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   2829c:	697b      	ldr	r3, [r7, #20]
   2829e:	7a5b      	ldrb	r3, [r3, #9]
   282a0:	b2db      	uxtb	r3, r3
   282a2:	2b02      	cmp	r3, #2
   282a4:	d10b      	bne.n	282be <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   282a6:	230f      	movs	r3, #15
   282a8:	18fb      	adds	r3, r7, r3
   282aa:	781b      	ldrb	r3, [r3, #0]
   282ac:	2204      	movs	r2, #4
   282ae:	4013      	ands	r3, r2
   282b0:	d015      	beq.n	282de <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   282b2:	697b      	ldr	r3, [r7, #20]
   282b4:	695b      	ldr	r3, [r3, #20]
   282b6:	697a      	ldr	r2, [r7, #20]
   282b8:	0010      	movs	r0, r2
   282ba:	4798      	blx	r3
   282bc:	e00f      	b.n	282de <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   282be:	697b      	ldr	r3, [r7, #20]
   282c0:	7a5b      	ldrb	r3, [r3, #9]
   282c2:	b2db      	uxtb	r3, r3
   282c4:	2b00      	cmp	r3, #0
   282c6:	d10a      	bne.n	282de <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   282c8:	230f      	movs	r3, #15
   282ca:	18fb      	adds	r3, r7, r3
   282cc:	781b      	ldrb	r3, [r3, #0]
   282ce:	2202      	movs	r2, #2
   282d0:	4013      	ands	r3, r2
   282d2:	d004      	beq.n	282de <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   282d4:	697b      	ldr	r3, [r7, #20]
   282d6:	691b      	ldr	r3, [r3, #16]
   282d8:	697a      	ldr	r2, [r7, #20]
   282da:	0010      	movs	r0, r2
   282dc:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   282de:	230c      	movs	r3, #12
   282e0:	18fb      	adds	r3, r7, r3
   282e2:	881b      	ldrh	r3, [r3, #0]
   282e4:	2202      	movs	r2, #2
   282e6:	4013      	ands	r3, r2
   282e8:	d024      	beq.n	28334 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   282ea:	697b      	ldr	r3, [r7, #20]
   282ec:	795b      	ldrb	r3, [r3, #5]
   282ee:	2b01      	cmp	r3, #1
   282f0:	d120      	bne.n	28334 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   282f2:	697b      	ldr	r3, [r7, #20]
   282f4:	7a5b      	ldrb	r3, [r3, #9]
   282f6:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   282f8:	2b01      	cmp	r3, #1
   282fa:	d11b      	bne.n	28334 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   282fc:	697b      	ldr	r3, [r7, #20]
   282fe:	79db      	ldrb	r3, [r3, #7]
   28300:	2201      	movs	r2, #1
   28302:	4053      	eors	r3, r2
   28304:	b2db      	uxtb	r3, r3
   28306:	2b00      	cmp	r3, #0
   28308:	d014      	beq.n	28334 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   2830a:	693b      	ldr	r3, [r7, #16]
   2830c:	2202      	movs	r2, #2
   2830e:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   28310:	697b      	ldr	r3, [r7, #20]
   28312:	2203      	movs	r2, #3
   28314:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   28316:	697b      	ldr	r3, [r7, #20]
   28318:	2238      	movs	r2, #56	; 0x38
   2831a:	2100      	movs	r1, #0
   2831c:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   2831e:	230f      	movs	r3, #15
   28320:	18fb      	adds	r3, r7, r3
   28322:	781b      	ldrb	r3, [r3, #0]
   28324:	2201      	movs	r2, #1
   28326:	4013      	ands	r3, r2
   28328:	d004      	beq.n	28334 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   2832a:	697b      	ldr	r3, [r7, #20]
   2832c:	68db      	ldr	r3, [r3, #12]
   2832e:	697a      	ldr	r2, [r7, #20]
   28330:	0010      	movs	r0, r2
   28332:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   28334:	230c      	movs	r3, #12
   28336:	18fb      	adds	r3, r7, r3
   28338:	881b      	ldrh	r3, [r3, #0]
   2833a:	2280      	movs	r2, #128	; 0x80
   2833c:	4013      	ands	r3, r2
   2833e:	d010      	beq.n	28362 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   28340:	693b      	ldr	r3, [r7, #16]
   28342:	2280      	movs	r2, #128	; 0x80
   28344:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   28346:	693b      	ldr	r3, [r7, #16]
   28348:	2280      	movs	r2, #128	; 0x80
   2834a:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   2834c:	230f      	movs	r3, #15
   2834e:	18fb      	adds	r3, r7, r3
   28350:	781b      	ldrb	r3, [r3, #0]
   28352:	2240      	movs	r2, #64	; 0x40
   28354:	4013      	ands	r3, r2
   28356:	d004      	beq.n	28362 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   28358:	697b      	ldr	r3, [r7, #20]
   2835a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2835c:	697a      	ldr	r2, [r7, #20]
   2835e:	0010      	movs	r0, r2
   28360:	4798      	blx	r3
		}
	}
#  endif
}
   28362:	46c0      	nop			; (mov r8, r8)
   28364:	46bd      	mov	sp, r7
   28366:	b006      	add	sp, #24
   28368:	bd80      	pop	{r7, pc}
   2836a:	46c0      	nop			; (mov r8, r8)
   2836c:	20005a38 	.word	0x20005a38
   28370:	00028025 	.word	0x00028025
   28374:	00027fa9 	.word	0x00027fa9
   28378:	00028059 	.word	0x00028059
   2837c:	0002808f 	.word	0x0002808f

00028380 <system_gclk_chan_get_config_defaults>:
{
   28380:	b580      	push	{r7, lr}
   28382:	b082      	sub	sp, #8
   28384:	af00      	add	r7, sp, #0
   28386:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28388:	687b      	ldr	r3, [r7, #4]
   2838a:	2200      	movs	r2, #0
   2838c:	701a      	strb	r2, [r3, #0]
}
   2838e:	46c0      	nop			; (mov r8, r8)
   28390:	46bd      	mov	sp, r7
   28392:	b002      	add	sp, #8
   28394:	bd80      	pop	{r7, pc}
	...

00028398 <system_apb_clock_set_mask>:
{
   28398:	b580      	push	{r7, lr}
   2839a:	b082      	sub	sp, #8
   2839c:	af00      	add	r7, sp, #0
   2839e:	0002      	movs	r2, r0
   283a0:	6039      	str	r1, [r7, #0]
   283a2:	1dfb      	adds	r3, r7, #7
   283a4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   283a6:	1dfb      	adds	r3, r7, #7
   283a8:	781b      	ldrb	r3, [r3, #0]
   283aa:	2b01      	cmp	r3, #1
   283ac:	d00a      	beq.n	283c4 <system_apb_clock_set_mask+0x2c>
   283ae:	2b02      	cmp	r3, #2
   283b0:	d00f      	beq.n	283d2 <system_apb_clock_set_mask+0x3a>
   283b2:	2b00      	cmp	r3, #0
   283b4:	d114      	bne.n	283e0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   283b6:	4b0e      	ldr	r3, [pc, #56]	; (283f0 <system_apb_clock_set_mask+0x58>)
   283b8:	4a0d      	ldr	r2, [pc, #52]	; (283f0 <system_apb_clock_set_mask+0x58>)
   283ba:	6991      	ldr	r1, [r2, #24]
   283bc:	683a      	ldr	r2, [r7, #0]
   283be:	430a      	orrs	r2, r1
   283c0:	619a      	str	r2, [r3, #24]
			break;
   283c2:	e00f      	b.n	283e4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   283c4:	4b0a      	ldr	r3, [pc, #40]	; (283f0 <system_apb_clock_set_mask+0x58>)
   283c6:	4a0a      	ldr	r2, [pc, #40]	; (283f0 <system_apb_clock_set_mask+0x58>)
   283c8:	69d1      	ldr	r1, [r2, #28]
   283ca:	683a      	ldr	r2, [r7, #0]
   283cc:	430a      	orrs	r2, r1
   283ce:	61da      	str	r2, [r3, #28]
			break;
   283d0:	e008      	b.n	283e4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   283d2:	4b07      	ldr	r3, [pc, #28]	; (283f0 <system_apb_clock_set_mask+0x58>)
   283d4:	4a06      	ldr	r2, [pc, #24]	; (283f0 <system_apb_clock_set_mask+0x58>)
   283d6:	6a11      	ldr	r1, [r2, #32]
   283d8:	683a      	ldr	r2, [r7, #0]
   283da:	430a      	orrs	r2, r1
   283dc:	621a      	str	r2, [r3, #32]
			break;
   283de:	e001      	b.n	283e4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   283e0:	2317      	movs	r3, #23
   283e2:	e000      	b.n	283e6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   283e4:	2300      	movs	r3, #0
}
   283e6:	0018      	movs	r0, r3
   283e8:	46bd      	mov	sp, r7
   283ea:	b002      	add	sp, #8
   283ec:	bd80      	pop	{r7, pc}
   283ee:	46c0      	nop			; (mov r8, r8)
   283f0:	40000400 	.word	0x40000400

000283f4 <system_pinmux_get_config_defaults>:
{
   283f4:	b580      	push	{r7, lr}
   283f6:	b082      	sub	sp, #8
   283f8:	af00      	add	r7, sp, #0
   283fa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   283fc:	687b      	ldr	r3, [r7, #4]
   283fe:	2280      	movs	r2, #128	; 0x80
   28400:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28402:	687b      	ldr	r3, [r7, #4]
   28404:	2200      	movs	r2, #0
   28406:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   28408:	687b      	ldr	r3, [r7, #4]
   2840a:	2201      	movs	r2, #1
   2840c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2840e:	687b      	ldr	r3, [r7, #4]
   28410:	2200      	movs	r2, #0
   28412:	70da      	strb	r2, [r3, #3]
}
   28414:	46c0      	nop			; (mov r8, r8)
   28416:	46bd      	mov	sp, r7
   28418:	b002      	add	sp, #8
   2841a:	bd80      	pop	{r7, pc}

0002841c <system_is_debugger_present>:
{
   2841c:	b580      	push	{r7, lr}
   2841e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   28420:	4b05      	ldr	r3, [pc, #20]	; (28438 <system_is_debugger_present+0x1c>)
   28422:	789b      	ldrb	r3, [r3, #2]
   28424:	b2db      	uxtb	r3, r3
   28426:	001a      	movs	r2, r3
   28428:	2302      	movs	r3, #2
   2842a:	4013      	ands	r3, r2
   2842c:	1e5a      	subs	r2, r3, #1
   2842e:	4193      	sbcs	r3, r2
   28430:	b2db      	uxtb	r3, r3
}
   28432:	0018      	movs	r0, r3
   28434:	46bd      	mov	sp, r7
   28436:	bd80      	pop	{r7, pc}
   28438:	41002000 	.word	0x41002000

0002843c <usart_is_syncing>:
{
   2843c:	b580      	push	{r7, lr}
   2843e:	b084      	sub	sp, #16
   28440:	af00      	add	r7, sp, #0
   28442:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   28444:	687b      	ldr	r3, [r7, #4]
   28446:	681b      	ldr	r3, [r3, #0]
   28448:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   2844a:	68fb      	ldr	r3, [r7, #12]
   2844c:	69db      	ldr	r3, [r3, #28]
   2844e:	1e5a      	subs	r2, r3, #1
   28450:	4193      	sbcs	r3, r2
   28452:	b2db      	uxtb	r3, r3
}
   28454:	0018      	movs	r0, r3
   28456:	46bd      	mov	sp, r7
   28458:	b004      	add	sp, #16
   2845a:	bd80      	pop	{r7, pc}

0002845c <_usart_wait_for_sync>:
{
   2845c:	b580      	push	{r7, lr}
   2845e:	b082      	sub	sp, #8
   28460:	af00      	add	r7, sp, #0
   28462:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   28464:	46c0      	nop			; (mov r8, r8)
   28466:	687b      	ldr	r3, [r7, #4]
   28468:	0018      	movs	r0, r3
   2846a:	4b04      	ldr	r3, [pc, #16]	; (2847c <_usart_wait_for_sync+0x20>)
   2846c:	4798      	blx	r3
   2846e:	1e03      	subs	r3, r0, #0
   28470:	d1f9      	bne.n	28466 <_usart_wait_for_sync+0xa>
}
   28472:	46c0      	nop			; (mov r8, r8)
   28474:	46bd      	mov	sp, r7
   28476:	b002      	add	sp, #8
   28478:	bd80      	pop	{r7, pc}
   2847a:	46c0      	nop			; (mov r8, r8)
   2847c:	0002843d 	.word	0x0002843d

00028480 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   28480:	b5b0      	push	{r4, r5, r7, lr}
   28482:	b08c      	sub	sp, #48	; 0x30
   28484:	af02      	add	r7, sp, #8
   28486:	6078      	str	r0, [r7, #4]
   28488:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2848a:	687b      	ldr	r3, [r7, #4]
   2848c:	681b      	ldr	r3, [r3, #0]
   2848e:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28490:	687b      	ldr	r3, [r7, #4]
   28492:	681b      	ldr	r3, [r3, #0]
   28494:	0018      	movs	r0, r3
   28496:	4bab      	ldr	r3, [pc, #684]	; (28744 <_usart_set_config+0x2c4>)
   28498:	4798      	blx	r3
   2849a:	0003      	movs	r3, r0
   2849c:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2849e:	697b      	ldr	r3, [r7, #20]
   284a0:	3314      	adds	r3, #20
   284a2:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   284a4:	2300      	movs	r3, #0
   284a6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   284a8:	2300      	movs	r3, #0
   284aa:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   284ac:	230a      	movs	r3, #10
   284ae:	18fb      	adds	r3, r7, r3
   284b0:	2200      	movs	r2, #0
   284b2:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   284b4:	231f      	movs	r3, #31
   284b6:	18fb      	adds	r3, r7, r3
   284b8:	2200      	movs	r2, #0
   284ba:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   284bc:	231e      	movs	r3, #30
   284be:	18fb      	adds	r3, r7, r3
   284c0:	2210      	movs	r2, #16
   284c2:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   284c4:	683b      	ldr	r3, [r7, #0]
   284c6:	8a1b      	ldrh	r3, [r3, #16]
   284c8:	2280      	movs	r2, #128	; 0x80
   284ca:	01d2      	lsls	r2, r2, #7
   284cc:	4293      	cmp	r3, r2
   284ce:	d01c      	beq.n	2850a <_usart_set_config+0x8a>
   284d0:	2280      	movs	r2, #128	; 0x80
   284d2:	01d2      	lsls	r2, r2, #7
   284d4:	4293      	cmp	r3, r2
   284d6:	dc06      	bgt.n	284e6 <_usart_set_config+0x66>
   284d8:	2b00      	cmp	r3, #0
   284da:	d00d      	beq.n	284f8 <_usart_set_config+0x78>
   284dc:	2280      	movs	r2, #128	; 0x80
   284de:	0192      	lsls	r2, r2, #6
   284e0:	4293      	cmp	r3, r2
   284e2:	d024      	beq.n	2852e <_usart_set_config+0xae>
   284e4:	e035      	b.n	28552 <_usart_set_config+0xd2>
   284e6:	22c0      	movs	r2, #192	; 0xc0
   284e8:	01d2      	lsls	r2, r2, #7
   284ea:	4293      	cmp	r3, r2
   284ec:	d028      	beq.n	28540 <_usart_set_config+0xc0>
   284ee:	2280      	movs	r2, #128	; 0x80
   284f0:	0212      	lsls	r2, r2, #8
   284f2:	4293      	cmp	r3, r2
   284f4:	d012      	beq.n	2851c <_usart_set_config+0x9c>
   284f6:	e02c      	b.n	28552 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   284f8:	231f      	movs	r3, #31
   284fa:	18fb      	adds	r3, r7, r3
   284fc:	2200      	movs	r2, #0
   284fe:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   28500:	231e      	movs	r3, #30
   28502:	18fb      	adds	r3, r7, r3
   28504:	2210      	movs	r2, #16
   28506:	701a      	strb	r2, [r3, #0]
			break;
   28508:	e023      	b.n	28552 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2850a:	231f      	movs	r3, #31
   2850c:	18fb      	adds	r3, r7, r3
   2850e:	2200      	movs	r2, #0
   28510:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   28512:	231e      	movs	r3, #30
   28514:	18fb      	adds	r3, r7, r3
   28516:	2208      	movs	r2, #8
   28518:	701a      	strb	r2, [r3, #0]
			break;
   2851a:	e01a      	b.n	28552 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2851c:	231f      	movs	r3, #31
   2851e:	18fb      	adds	r3, r7, r3
   28520:	2200      	movs	r2, #0
   28522:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   28524:	231e      	movs	r3, #30
   28526:	18fb      	adds	r3, r7, r3
   28528:	2203      	movs	r2, #3
   2852a:	701a      	strb	r2, [r3, #0]
			break;
   2852c:	e011      	b.n	28552 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   2852e:	231f      	movs	r3, #31
   28530:	18fb      	adds	r3, r7, r3
   28532:	2201      	movs	r2, #1
   28534:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   28536:	231e      	movs	r3, #30
   28538:	18fb      	adds	r3, r7, r3
   2853a:	2210      	movs	r2, #16
   2853c:	701a      	strb	r2, [r3, #0]
			break;
   2853e:	e008      	b.n	28552 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   28540:	231f      	movs	r3, #31
   28542:	18fb      	adds	r3, r7, r3
   28544:	2201      	movs	r2, #1
   28546:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   28548:	231e      	movs	r3, #30
   2854a:	18fb      	adds	r3, r7, r3
   2854c:	2208      	movs	r2, #8
   2854e:	701a      	strb	r2, [r3, #0]
			break;
   28550:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   28552:	683b      	ldr	r3, [r7, #0]
   28554:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   28556:	683b      	ldr	r3, [r7, #0]
   28558:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   2855a:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   2855c:	683b      	ldr	r3, [r7, #0]
   2855e:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   28560:	4313      	orrs	r3, r2
		config->sample_rate |
   28562:	683a      	ldr	r2, [r7, #0]
   28564:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   28566:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   28568:	683a      	ldr	r2, [r7, #0]
   2856a:	7e12      	ldrb	r2, [r2, #24]
   2856c:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   2856e:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   28570:	683a      	ldr	r2, [r7, #0]
   28572:	2126      	movs	r1, #38	; 0x26
   28574:	5c52      	ldrb	r2, [r2, r1]
   28576:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   28578:	4313      	orrs	r3, r2
   2857a:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   2857c:	231d      	movs	r3, #29
   2857e:	18fb      	adds	r3, r7, r3
   28580:	2200      	movs	r2, #0
   28582:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   28584:	683b      	ldr	r3, [r7, #0]
   28586:	685b      	ldr	r3, [r3, #4]
   28588:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   2858a:	68fb      	ldr	r3, [r7, #12]
   2858c:	2b00      	cmp	r3, #0
   2858e:	d01e      	beq.n	285ce <_usart_set_config+0x14e>
   28590:	2280      	movs	r2, #128	; 0x80
   28592:	0552      	lsls	r2, r2, #21
   28594:	4293      	cmp	r3, r2
   28596:	d14f      	bne.n	28638 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   28598:	683b      	ldr	r3, [r7, #0]
   2859a:	2227      	movs	r2, #39	; 0x27
   2859c:	5c9b      	ldrb	r3, [r3, r2]
   2859e:	2201      	movs	r2, #1
   285a0:	4053      	eors	r3, r2
   285a2:	b2db      	uxtb	r3, r3
   285a4:	2b00      	cmp	r3, #0
   285a6:	d046      	beq.n	28636 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   285a8:	683b      	ldr	r3, [r7, #0]
   285aa:	6a1d      	ldr	r5, [r3, #32]
   285ac:	693b      	ldr	r3, [r7, #16]
   285ae:	b2db      	uxtb	r3, r3
   285b0:	0018      	movs	r0, r3
   285b2:	4b65      	ldr	r3, [pc, #404]	; (28748 <_usart_set_config+0x2c8>)
   285b4:	4798      	blx	r3
   285b6:	0001      	movs	r1, r0
   285b8:	231d      	movs	r3, #29
   285ba:	18fc      	adds	r4, r7, r3
   285bc:	230a      	movs	r3, #10
   285be:	18fb      	adds	r3, r7, r3
   285c0:	001a      	movs	r2, r3
   285c2:	0028      	movs	r0, r5
   285c4:	4b61      	ldr	r3, [pc, #388]	; (2874c <_usart_set_config+0x2cc>)
   285c6:	4798      	blx	r3
   285c8:	0003      	movs	r3, r0
   285ca:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   285cc:	e033      	b.n	28636 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   285ce:	683b      	ldr	r3, [r7, #0]
   285d0:	2227      	movs	r2, #39	; 0x27
   285d2:	5c9b      	ldrb	r3, [r3, r2]
   285d4:	2b00      	cmp	r3, #0
   285d6:	d014      	beq.n	28602 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   285d8:	683b      	ldr	r3, [r7, #0]
   285da:	6a18      	ldr	r0, [r3, #32]
   285dc:	683b      	ldr	r3, [r7, #0]
   285de:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   285e0:	231d      	movs	r3, #29
   285e2:	18fc      	adds	r4, r7, r3
   285e4:	231f      	movs	r3, #31
   285e6:	18fb      	adds	r3, r7, r3
   285e8:	781d      	ldrb	r5, [r3, #0]
   285ea:	230a      	movs	r3, #10
   285ec:	18fa      	adds	r2, r7, r3
   285ee:	231e      	movs	r3, #30
   285f0:	18fb      	adds	r3, r7, r3
   285f2:	781b      	ldrb	r3, [r3, #0]
   285f4:	9300      	str	r3, [sp, #0]
   285f6:	002b      	movs	r3, r5
   285f8:	4d55      	ldr	r5, [pc, #340]	; (28750 <_usart_set_config+0x2d0>)
   285fa:	47a8      	blx	r5
   285fc:	0003      	movs	r3, r0
   285fe:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   28600:	e01a      	b.n	28638 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   28602:	683b      	ldr	r3, [r7, #0]
   28604:	6a1d      	ldr	r5, [r3, #32]
   28606:	693b      	ldr	r3, [r7, #16]
   28608:	b2db      	uxtb	r3, r3
   2860a:	0018      	movs	r0, r3
   2860c:	4b4e      	ldr	r3, [pc, #312]	; (28748 <_usart_set_config+0x2c8>)
   2860e:	4798      	blx	r3
				status_code =
   28610:	231d      	movs	r3, #29
   28612:	18fc      	adds	r4, r7, r3
   28614:	231f      	movs	r3, #31
   28616:	18fb      	adds	r3, r7, r3
   28618:	7819      	ldrb	r1, [r3, #0]
   2861a:	230a      	movs	r3, #10
   2861c:	18fa      	adds	r2, r7, r3
   2861e:	231e      	movs	r3, #30
   28620:	18fb      	adds	r3, r7, r3
   28622:	781b      	ldrb	r3, [r3, #0]
   28624:	9300      	str	r3, [sp, #0]
   28626:	000b      	movs	r3, r1
   28628:	0001      	movs	r1, r0
   2862a:	0028      	movs	r0, r5
   2862c:	4d48      	ldr	r5, [pc, #288]	; (28750 <_usart_set_config+0x2d0>)
   2862e:	47a8      	blx	r5
   28630:	0003      	movs	r3, r0
   28632:	7023      	strb	r3, [r4, #0]
			break;
   28634:	e000      	b.n	28638 <_usart_set_config+0x1b8>
			break;
   28636:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   28638:	231d      	movs	r3, #29
   2863a:	18fb      	adds	r3, r7, r3
   2863c:	781b      	ldrb	r3, [r3, #0]
   2863e:	2b00      	cmp	r3, #0
   28640:	d003      	beq.n	2864a <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   28642:	231d      	movs	r3, #29
   28644:	18fb      	adds	r3, r7, r3
   28646:	781b      	ldrb	r3, [r3, #0]
   28648:	e077      	b.n	2873a <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   2864a:	683b      	ldr	r3, [r7, #0]
   2864c:	7e5b      	ldrb	r3, [r3, #25]
   2864e:	2b00      	cmp	r3, #0
   28650:	d003      	beq.n	2865a <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   28652:	683b      	ldr	r3, [r7, #0]
   28654:	7e9a      	ldrb	r2, [r3, #26]
   28656:	69bb      	ldr	r3, [r7, #24]
   28658:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2865a:	687b      	ldr	r3, [r7, #4]
   2865c:	0018      	movs	r0, r3
   2865e:	4b3d      	ldr	r3, [pc, #244]	; (28754 <_usart_set_config+0x2d4>)
   28660:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   28662:	230a      	movs	r3, #10
   28664:	18fb      	adds	r3, r7, r3
   28666:	881a      	ldrh	r2, [r3, #0]
   28668:	69bb      	ldr	r3, [r7, #24]
   2866a:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   2866c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2866e:	68fb      	ldr	r3, [r7, #12]
   28670:	4313      	orrs	r3, r2
   28672:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   28674:	683b      	ldr	r3, [r7, #0]
   28676:	2227      	movs	r2, #39	; 0x27
   28678:	5c9b      	ldrb	r3, [r3, r2]
   2867a:	2201      	movs	r2, #1
   2867c:	4053      	eors	r3, r2
   2867e:	b2db      	uxtb	r3, r3
   28680:	2b00      	cmp	r3, #0
   28682:	d003      	beq.n	2868c <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   28684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28686:	2204      	movs	r2, #4
   28688:	4313      	orrs	r3, r2
   2868a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2868c:	683b      	ldr	r3, [r7, #0]
   2868e:	7e5b      	ldrb	r3, [r3, #25]
   28690:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   28692:	683b      	ldr	r3, [r7, #0]
   28694:	7f1b      	ldrb	r3, [r3, #28]
   28696:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   28698:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2869a:	683b      	ldr	r3, [r7, #0]
   2869c:	7f5b      	ldrb	r3, [r3, #29]
   2869e:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   286a0:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   286a2:	683b      	ldr	r3, [r7, #0]
   286a4:	2124      	movs	r1, #36	; 0x24
   286a6:	5c5b      	ldrb	r3, [r3, r1]
   286a8:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   286aa:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   286ac:	683b      	ldr	r3, [r7, #0]
   286ae:	2125      	movs	r1, #37	; 0x25
   286b0:	5c5b      	ldrb	r3, [r3, r1]
   286b2:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   286b4:	4313      	orrs	r3, r2
	ctrlb =  
   286b6:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   286b8:	683b      	ldr	r3, [r7, #0]
   286ba:	7a9b      	ldrb	r3, [r3, #10]
   286bc:	001a      	movs	r2, r3
   286be:	6a3b      	ldr	r3, [r7, #32]
   286c0:	4313      	orrs	r3, r2
   286c2:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   286c4:	683b      	ldr	r3, [r7, #0]
   286c6:	7adb      	ldrb	r3, [r3, #11]
   286c8:	001a      	movs	r2, r3
   286ca:	6a3b      	ldr	r3, [r7, #32]
   286cc:	4313      	orrs	r3, r2
   286ce:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   286d0:	683b      	ldr	r3, [r7, #0]
   286d2:	891b      	ldrh	r3, [r3, #8]
   286d4:	2bff      	cmp	r3, #255	; 0xff
   286d6:	d00b      	beq.n	286f0 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   286d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   286da:	2280      	movs	r2, #128	; 0x80
   286dc:	0452      	lsls	r2, r2, #17
   286de:	4313      	orrs	r3, r2
   286e0:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   286e2:	683b      	ldr	r3, [r7, #0]
   286e4:	891b      	ldrh	r3, [r3, #8]
   286e6:	001a      	movs	r2, r3
   286e8:	6a3b      	ldr	r3, [r7, #32]
   286ea:	4313      	orrs	r3, r2
   286ec:	623b      	str	r3, [r7, #32]
   286ee:	e008      	b.n	28702 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   286f0:	683b      	ldr	r3, [r7, #0]
   286f2:	7edb      	ldrb	r3, [r3, #27]
   286f4:	2b00      	cmp	r3, #0
   286f6:	d004      	beq.n	28702 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   286f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   286fa:	2280      	movs	r2, #128	; 0x80
   286fc:	04d2      	lsls	r2, r2, #19
   286fe:	4313      	orrs	r3, r2
   28700:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   28702:	683b      	ldr	r3, [r7, #0]
   28704:	222c      	movs	r2, #44	; 0x2c
   28706:	5c9b      	ldrb	r3, [r3, r2]
   28708:	2b00      	cmp	r3, #0
   2870a:	d103      	bne.n	28714 <_usart_set_config+0x294>
   2870c:	4b12      	ldr	r3, [pc, #72]	; (28758 <_usart_set_config+0x2d8>)
   2870e:	4798      	blx	r3
   28710:	1e03      	subs	r3, r0, #0
   28712:	d003      	beq.n	2871c <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   28714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28716:	2280      	movs	r2, #128	; 0x80
   28718:	4313      	orrs	r3, r2
   2871a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2871c:	687b      	ldr	r3, [r7, #4]
   2871e:	0018      	movs	r0, r3
   28720:	4b0c      	ldr	r3, [pc, #48]	; (28754 <_usart_set_config+0x2d4>)
   28722:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   28724:	69bb      	ldr	r3, [r7, #24]
   28726:	6a3a      	ldr	r2, [r7, #32]
   28728:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2872a:	687b      	ldr	r3, [r7, #4]
   2872c:	0018      	movs	r0, r3
   2872e:	4b09      	ldr	r3, [pc, #36]	; (28754 <_usart_set_config+0x2d4>)
   28730:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   28732:	69bb      	ldr	r3, [r7, #24]
   28734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   28736:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   28738:	2300      	movs	r3, #0
}
   2873a:	0018      	movs	r0, r3
   2873c:	46bd      	mov	sp, r7
   2873e:	b00a      	add	sp, #40	; 0x28
   28740:	bdb0      	pop	{r4, r5, r7, pc}
   28742:	46c0      	nop			; (mov r8, r8)
   28744:	00027229 	.word	0x00027229
   28748:	00029bdd 	.word	0x00029bdd
   2874c:	00026da3 	.word	0x00026da3
   28750:	00026e21 	.word	0x00026e21
   28754:	0002845d 	.word	0x0002845d
   28758:	0002841d 	.word	0x0002841d

0002875c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   2875c:	b590      	push	{r4, r7, lr}
   2875e:	b093      	sub	sp, #76	; 0x4c
   28760:	af00      	add	r7, sp, #0
   28762:	60f8      	str	r0, [r7, #12]
   28764:	60b9      	str	r1, [r7, #8]
   28766:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   28768:	233b      	movs	r3, #59	; 0x3b
   2876a:	18fb      	adds	r3, r7, r3
   2876c:	2200      	movs	r2, #0
   2876e:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   28770:	68fb      	ldr	r3, [r7, #12]
   28772:	68ba      	ldr	r2, [r7, #8]
   28774:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28776:	68fb      	ldr	r3, [r7, #12]
   28778:	681b      	ldr	r3, [r3, #0]
   2877a:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2877c:	68fb      	ldr	r3, [r7, #12]
   2877e:	681b      	ldr	r3, [r3, #0]
   28780:	0018      	movs	r0, r3
   28782:	4b86      	ldr	r3, [pc, #536]	; (2899c <usart_init+0x240>)
   28784:	4798      	blx	r3
   28786:	0003      	movs	r3, r0
   28788:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2878a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2878c:	3302      	adds	r3, #2
   2878e:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28792:	3314      	adds	r3, #20
   28794:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   28796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28798:	681b      	ldr	r3, [r3, #0]
   2879a:	2201      	movs	r2, #1
   2879c:	4013      	ands	r3, r2
   2879e:	d001      	beq.n	287a4 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   287a0:	2305      	movs	r3, #5
   287a2:	e0f6      	b.n	28992 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   287a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   287a6:	681b      	ldr	r3, [r3, #0]
   287a8:	2202      	movs	r2, #2
   287aa:	4013      	ands	r3, r2
   287ac:	d001      	beq.n	287b2 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   287ae:	231c      	movs	r3, #28
   287b0:	e0ef      	b.n	28992 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   287b2:	2201      	movs	r2, #1
   287b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   287b6:	409a      	lsls	r2, r3
   287b8:	0013      	movs	r3, r2
   287ba:	0019      	movs	r1, r3
   287bc:	2002      	movs	r0, #2
   287be:	4b78      	ldr	r3, [pc, #480]	; (289a0 <usart_init+0x244>)
   287c0:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   287c2:	2324      	movs	r3, #36	; 0x24
   287c4:	18fb      	adds	r3, r7, r3
   287c6:	0018      	movs	r0, r3
   287c8:	4b76      	ldr	r3, [pc, #472]	; (289a4 <usart_init+0x248>)
   287ca:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   287cc:	687b      	ldr	r3, [r7, #4]
   287ce:	222d      	movs	r2, #45	; 0x2d
   287d0:	5c9a      	ldrb	r2, [r3, r2]
   287d2:	2324      	movs	r3, #36	; 0x24
   287d4:	18fb      	adds	r3, r7, r3
   287d6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   287d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   287da:	b2db      	uxtb	r3, r3
   287dc:	2224      	movs	r2, #36	; 0x24
   287de:	18ba      	adds	r2, r7, r2
   287e0:	0011      	movs	r1, r2
   287e2:	0018      	movs	r0, r3
   287e4:	4b70      	ldr	r3, [pc, #448]	; (289a8 <usart_init+0x24c>)
   287e6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   287e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   287ea:	b2db      	uxtb	r3, r3
   287ec:	0018      	movs	r0, r3
   287ee:	4b6f      	ldr	r3, [pc, #444]	; (289ac <usart_init+0x250>)
   287f0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   287f2:	687b      	ldr	r3, [r7, #4]
   287f4:	222d      	movs	r2, #45	; 0x2d
   287f6:	5c9b      	ldrb	r3, [r3, r2]
   287f8:	2100      	movs	r1, #0
   287fa:	0018      	movs	r0, r3
   287fc:	4b6c      	ldr	r3, [pc, #432]	; (289b0 <usart_init+0x254>)
   287fe:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   28800:	687b      	ldr	r3, [r7, #4]
   28802:	7ada      	ldrb	r2, [r3, #11]
   28804:	68fb      	ldr	r3, [r7, #12]
   28806:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   28808:	687b      	ldr	r3, [r7, #4]
   2880a:	2224      	movs	r2, #36	; 0x24
   2880c:	5c9a      	ldrb	r2, [r3, r2]
   2880e:	68fb      	ldr	r3, [r7, #12]
   28810:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   28812:	687b      	ldr	r3, [r7, #4]
   28814:	2225      	movs	r2, #37	; 0x25
   28816:	5c9a      	ldrb	r2, [r3, r2]
   28818:	68fb      	ldr	r3, [r7, #12]
   2881a:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   2881c:	687b      	ldr	r3, [r7, #4]
   2881e:	7eda      	ldrb	r2, [r3, #27]
   28820:	68fb      	ldr	r3, [r7, #12]
   28822:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   28824:	687b      	ldr	r3, [r7, #4]
   28826:	7f1a      	ldrb	r2, [r3, #28]
   28828:	68fb      	ldr	r3, [r7, #12]
   2882a:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   2882c:	233b      	movs	r3, #59	; 0x3b
   2882e:	18fc      	adds	r4, r7, r3
   28830:	687a      	ldr	r2, [r7, #4]
   28832:	68fb      	ldr	r3, [r7, #12]
   28834:	0011      	movs	r1, r2
   28836:	0018      	movs	r0, r3
   28838:	4b5e      	ldr	r3, [pc, #376]	; (289b4 <usart_init+0x258>)
   2883a:	4798      	blx	r3
   2883c:	0003      	movs	r3, r0
   2883e:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   28840:	233b      	movs	r3, #59	; 0x3b
   28842:	18fb      	adds	r3, r7, r3
   28844:	781b      	ldrb	r3, [r3, #0]
   28846:	2b00      	cmp	r3, #0
   28848:	d003      	beq.n	28852 <usart_init+0xf6>
		return status_code;
   2884a:	233b      	movs	r3, #59	; 0x3b
   2884c:	18fb      	adds	r3, r7, r3
   2884e:	781b      	ldrb	r3, [r3, #0]
   28850:	e09f      	b.n	28992 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   28852:	2320      	movs	r3, #32
   28854:	18fb      	adds	r3, r7, r3
   28856:	0018      	movs	r0, r3
   28858:	4b57      	ldr	r3, [pc, #348]	; (289b8 <usart_init+0x25c>)
   2885a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2885c:	2320      	movs	r3, #32
   2885e:	18fb      	adds	r3, r7, r3
   28860:	2200      	movs	r2, #0
   28862:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   28864:	2320      	movs	r3, #32
   28866:	18fb      	adds	r3, r7, r3
   28868:	2200      	movs	r2, #0
   2886a:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   2886c:	687b      	ldr	r3, [r7, #4]
   2886e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   28870:	2310      	movs	r3, #16
   28872:	18fb      	adds	r3, r7, r3
   28874:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   28876:	687b      	ldr	r3, [r7, #4]
   28878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2887a:	2310      	movs	r3, #16
   2887c:	18fb      	adds	r3, r7, r3
   2887e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   28880:	687b      	ldr	r3, [r7, #4]
   28882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   28884:	2310      	movs	r3, #16
   28886:	18fb      	adds	r3, r7, r3
   28888:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2888a:	687b      	ldr	r3, [r7, #4]
   2888c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   2888e:	2310      	movs	r3, #16
   28890:	18fb      	adds	r3, r7, r3
   28892:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   28894:	2347      	movs	r3, #71	; 0x47
   28896:	18fb      	adds	r3, r7, r3
   28898:	2200      	movs	r2, #0
   2889a:	701a      	strb	r2, [r3, #0]
   2889c:	e02c      	b.n	288f8 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   2889e:	2347      	movs	r3, #71	; 0x47
   288a0:	18fb      	adds	r3, r7, r3
   288a2:	781a      	ldrb	r2, [r3, #0]
   288a4:	2310      	movs	r3, #16
   288a6:	18fb      	adds	r3, r7, r3
   288a8:	0092      	lsls	r2, r2, #2
   288aa:	58d3      	ldr	r3, [r2, r3]
   288ac:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   288ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   288b0:	2b00      	cmp	r3, #0
   288b2:	d109      	bne.n	288c8 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   288b4:	2347      	movs	r3, #71	; 0x47
   288b6:	18fb      	adds	r3, r7, r3
   288b8:	781a      	ldrb	r2, [r3, #0]
   288ba:	68bb      	ldr	r3, [r7, #8]
   288bc:	0011      	movs	r1, r2
   288be:	0018      	movs	r0, r3
   288c0:	4b3e      	ldr	r3, [pc, #248]	; (289bc <usart_init+0x260>)
   288c2:	4798      	blx	r3
   288c4:	0003      	movs	r3, r0
   288c6:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   288c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   288ca:	3301      	adds	r3, #1
   288cc:	d00d      	beq.n	288ea <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   288ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   288d0:	b2da      	uxtb	r2, r3
   288d2:	2320      	movs	r3, #32
   288d4:	18fb      	adds	r3, r7, r3
   288d6:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   288d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   288da:	0c1b      	lsrs	r3, r3, #16
   288dc:	b2db      	uxtb	r3, r3
   288de:	2220      	movs	r2, #32
   288e0:	18ba      	adds	r2, r7, r2
   288e2:	0011      	movs	r1, r2
   288e4:	0018      	movs	r0, r3
   288e6:	4b36      	ldr	r3, [pc, #216]	; (289c0 <usart_init+0x264>)
   288e8:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   288ea:	2347      	movs	r3, #71	; 0x47
   288ec:	18fb      	adds	r3, r7, r3
   288ee:	781a      	ldrb	r2, [r3, #0]
   288f0:	2347      	movs	r3, #71	; 0x47
   288f2:	18fb      	adds	r3, r7, r3
   288f4:	3201      	adds	r2, #1
   288f6:	701a      	strb	r2, [r3, #0]
   288f8:	2347      	movs	r3, #71	; 0x47
   288fa:	18fb      	adds	r3, r7, r3
   288fc:	781b      	ldrb	r3, [r3, #0]
   288fe:	2b03      	cmp	r3, #3
   28900:	d9cd      	bls.n	2889e <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   28902:	2300      	movs	r3, #0
   28904:	63fb      	str	r3, [r7, #60]	; 0x3c
   28906:	e00a      	b.n	2891e <usart_init+0x1c2>
		module->callback[i]            = NULL;
   28908:	68fa      	ldr	r2, [r7, #12]
   2890a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2890c:	3302      	adds	r3, #2
   2890e:	009b      	lsls	r3, r3, #2
   28910:	18d3      	adds	r3, r2, r3
   28912:	3304      	adds	r3, #4
   28914:	2200      	movs	r2, #0
   28916:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   28918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2891a:	3301      	adds	r3, #1
   2891c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2891e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28920:	2b05      	cmp	r3, #5
   28922:	d9f1      	bls.n	28908 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   28924:	68fb      	ldr	r3, [r7, #12]
   28926:	2200      	movs	r2, #0
   28928:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   2892a:	68fb      	ldr	r3, [r7, #12]
   2892c:	2200      	movs	r2, #0
   2892e:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   28930:	68fb      	ldr	r3, [r7, #12]
   28932:	2200      	movs	r2, #0
   28934:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   28936:	68fb      	ldr	r3, [r7, #12]
   28938:	2200      	movs	r2, #0
   2893a:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   2893c:	68fb      	ldr	r3, [r7, #12]
   2893e:	2230      	movs	r2, #48	; 0x30
   28940:	2100      	movs	r1, #0
   28942:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   28944:	68fb      	ldr	r3, [r7, #12]
   28946:	2231      	movs	r2, #49	; 0x31
   28948:	2100      	movs	r1, #0
   2894a:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   2894c:	68fb      	ldr	r3, [r7, #12]
   2894e:	2232      	movs	r2, #50	; 0x32
   28950:	2100      	movs	r1, #0
   28952:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   28954:	68fb      	ldr	r3, [r7, #12]
   28956:	2233      	movs	r2, #51	; 0x33
   28958:	2100      	movs	r1, #0
   2895a:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   2895c:	68fb      	ldr	r3, [r7, #12]
   2895e:	681b      	ldr	r3, [r3, #0]
   28960:	2227      	movs	r2, #39	; 0x27
   28962:	18bc      	adds	r4, r7, r2
   28964:	0018      	movs	r0, r3
   28966:	4b0d      	ldr	r3, [pc, #52]	; (2899c <usart_init+0x240>)
   28968:	4798      	blx	r3
   2896a:	0003      	movs	r3, r0
   2896c:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   2896e:	4a15      	ldr	r2, [pc, #84]	; (289c4 <usart_init+0x268>)
   28970:	2327      	movs	r3, #39	; 0x27
   28972:	18fb      	adds	r3, r7, r3
   28974:	781b      	ldrb	r3, [r3, #0]
   28976:	0011      	movs	r1, r2
   28978:	0018      	movs	r0, r3
   2897a:	4b13      	ldr	r3, [pc, #76]	; (289c8 <usart_init+0x26c>)
   2897c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   2897e:	2327      	movs	r3, #39	; 0x27
   28980:	18fb      	adds	r3, r7, r3
   28982:	781a      	ldrb	r2, [r3, #0]
   28984:	4b11      	ldr	r3, [pc, #68]	; (289cc <usart_init+0x270>)
   28986:	0092      	lsls	r2, r2, #2
   28988:	68f9      	ldr	r1, [r7, #12]
   2898a:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   2898c:	233b      	movs	r3, #59	; 0x3b
   2898e:	18fb      	adds	r3, r7, r3
   28990:	781b      	ldrb	r3, [r3, #0]
}
   28992:	0018      	movs	r0, r3
   28994:	46bd      	mov	sp, r7
   28996:	b013      	add	sp, #76	; 0x4c
   28998:	bd90      	pop	{r4, r7, pc}
   2899a:	46c0      	nop			; (mov r8, r8)
   2899c:	00027229 	.word	0x00027229
   289a0:	00028399 	.word	0x00028399
   289a4:	00028381 	.word	0x00028381
   289a8:	00029ab9 	.word	0x00029ab9
   289ac:	00029afd 	.word	0x00029afd
   289b0:	00026fe1 	.word	0x00026fe1
   289b4:	00028481 	.word	0x00028481
   289b8:	000283f5 	.word	0x000283f5
   289bc:	0002706d 	.word	0x0002706d
   289c0:	00029e19 	.word	0x00029e19
   289c4:	00028c39 	.word	0x00028c39
   289c8:	0002728d 	.word	0x0002728d
   289cc:	20005a38 	.word	0x20005a38

000289d0 <system_interrupt_enter_critical_section>:
{
   289d0:	b580      	push	{r7, lr}
   289d2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   289d4:	4b02      	ldr	r3, [pc, #8]	; (289e0 <system_interrupt_enter_critical_section+0x10>)
   289d6:	4798      	blx	r3
}
   289d8:	46c0      	nop			; (mov r8, r8)
   289da:	46bd      	mov	sp, r7
   289dc:	bd80      	pop	{r7, pc}
   289de:	46c0      	nop			; (mov r8, r8)
   289e0:	00025e25 	.word	0x00025e25

000289e4 <system_interrupt_leave_critical_section>:
{
   289e4:	b580      	push	{r7, lr}
   289e6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   289e8:	4b02      	ldr	r3, [pc, #8]	; (289f4 <system_interrupt_leave_critical_section+0x10>)
   289ea:	4798      	blx	r3
}
   289ec:	46c0      	nop			; (mov r8, r8)
   289ee:	46bd      	mov	sp, r7
   289f0:	bd80      	pop	{r7, pc}
   289f2:	46c0      	nop			; (mov r8, r8)
   289f4:	00025e79 	.word	0x00025e79

000289f8 <usart_is_syncing>:
{
   289f8:	b580      	push	{r7, lr}
   289fa:	b084      	sub	sp, #16
   289fc:	af00      	add	r7, sp, #0
   289fe:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   28a00:	687b      	ldr	r3, [r7, #4]
   28a02:	681b      	ldr	r3, [r3, #0]
   28a04:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   28a06:	68fb      	ldr	r3, [r7, #12]
   28a08:	69db      	ldr	r3, [r3, #28]
   28a0a:	1e5a      	subs	r2, r3, #1
   28a0c:	4193      	sbcs	r3, r2
   28a0e:	b2db      	uxtb	r3, r3
}
   28a10:	0018      	movs	r0, r3
   28a12:	46bd      	mov	sp, r7
   28a14:	b004      	add	sp, #16
   28a16:	bd80      	pop	{r7, pc}

00028a18 <_usart_wait_for_sync>:
{
   28a18:	b580      	push	{r7, lr}
   28a1a:	b082      	sub	sp, #8
   28a1c:	af00      	add	r7, sp, #0
   28a1e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   28a20:	46c0      	nop			; (mov r8, r8)
   28a22:	687b      	ldr	r3, [r7, #4]
   28a24:	0018      	movs	r0, r3
   28a26:	4b04      	ldr	r3, [pc, #16]	; (28a38 <_usart_wait_for_sync+0x20>)
   28a28:	4798      	blx	r3
   28a2a:	1e03      	subs	r3, r0, #0
   28a2c:	d1f9      	bne.n	28a22 <_usart_wait_for_sync+0xa>
}
   28a2e:	46c0      	nop			; (mov r8, r8)
   28a30:	46bd      	mov	sp, r7
   28a32:	b002      	add	sp, #8
   28a34:	bd80      	pop	{r7, pc}
   28a36:	46c0      	nop			; (mov r8, r8)
   28a38:	000289f9 	.word	0x000289f9

00028a3c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   28a3c:	b580      	push	{r7, lr}
   28a3e:	b086      	sub	sp, #24
   28a40:	af00      	add	r7, sp, #0
   28a42:	60f8      	str	r0, [r7, #12]
   28a44:	60b9      	str	r1, [r7, #8]
   28a46:	1dbb      	adds	r3, r7, #6
   28a48:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28a4a:	68fb      	ldr	r3, [r7, #12]
   28a4c:	681b      	ldr	r3, [r3, #0]
   28a4e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   28a50:	4b0f      	ldr	r3, [pc, #60]	; (28a90 <_usart_write_buffer+0x54>)
   28a52:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   28a54:	68fb      	ldr	r3, [r7, #12]
   28a56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28a58:	b29b      	uxth	r3, r3
   28a5a:	2b00      	cmp	r3, #0
   28a5c:	d003      	beq.n	28a66 <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   28a5e:	4b0d      	ldr	r3, [pc, #52]	; (28a94 <_usart_write_buffer+0x58>)
   28a60:	4798      	blx	r3
		return STATUS_BUSY;
   28a62:	2305      	movs	r3, #5
   28a64:	e010      	b.n	28a88 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   28a66:	68fb      	ldr	r3, [r7, #12]
   28a68:	1dba      	adds	r2, r7, #6
   28a6a:	8812      	ldrh	r2, [r2, #0]
   28a6c:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   28a6e:	4b09      	ldr	r3, [pc, #36]	; (28a94 <_usart_write_buffer+0x58>)
   28a70:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   28a72:	68fb      	ldr	r3, [r7, #12]
   28a74:	68ba      	ldr	r2, [r7, #8]
   28a76:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   28a78:	68fb      	ldr	r3, [r7, #12]
   28a7a:	2233      	movs	r2, #51	; 0x33
   28a7c:	2105      	movs	r1, #5
   28a7e:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   28a80:	697b      	ldr	r3, [r7, #20]
   28a82:	2201      	movs	r2, #1
   28a84:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   28a86:	2300      	movs	r3, #0
}
   28a88:	0018      	movs	r0, r3
   28a8a:	46bd      	mov	sp, r7
   28a8c:	b006      	add	sp, #24
   28a8e:	bd80      	pop	{r7, pc}
   28a90:	000289d1 	.word	0x000289d1
   28a94:	000289e5 	.word	0x000289e5

00028a98 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   28a98:	b580      	push	{r7, lr}
   28a9a:	b086      	sub	sp, #24
   28a9c:	af00      	add	r7, sp, #0
   28a9e:	60f8      	str	r0, [r7, #12]
   28aa0:	60b9      	str	r1, [r7, #8]
   28aa2:	1dbb      	adds	r3, r7, #6
   28aa4:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28aa6:	68fb      	ldr	r3, [r7, #12]
   28aa8:	681b      	ldr	r3, [r3, #0]
   28aaa:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   28aac:	4b16      	ldr	r3, [pc, #88]	; (28b08 <_usart_read_buffer+0x70>)
   28aae:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   28ab0:	68fb      	ldr	r3, [r7, #12]
   28ab2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28ab4:	b29b      	uxth	r3, r3
   28ab6:	2b00      	cmp	r3, #0
   28ab8:	d003      	beq.n	28ac2 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   28aba:	4b14      	ldr	r3, [pc, #80]	; (28b0c <_usart_read_buffer+0x74>)
   28abc:	4798      	blx	r3
		return STATUS_BUSY;
   28abe:	2305      	movs	r3, #5
   28ac0:	e01e      	b.n	28b00 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   28ac2:	68fb      	ldr	r3, [r7, #12]
   28ac4:	1dba      	adds	r2, r7, #6
   28ac6:	8812      	ldrh	r2, [r2, #0]
   28ac8:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   28aca:	4b10      	ldr	r3, [pc, #64]	; (28b0c <_usart_read_buffer+0x74>)
   28acc:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   28ace:	68fb      	ldr	r3, [r7, #12]
   28ad0:	68ba      	ldr	r2, [r7, #8]
   28ad2:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   28ad4:	68fb      	ldr	r3, [r7, #12]
   28ad6:	2232      	movs	r2, #50	; 0x32
   28ad8:	2105      	movs	r1, #5
   28ada:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   28adc:	697b      	ldr	r3, [r7, #20]
   28ade:	2204      	movs	r2, #4
   28ae0:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   28ae2:	68fb      	ldr	r3, [r7, #12]
   28ae4:	7a1b      	ldrb	r3, [r3, #8]
   28ae6:	2b00      	cmp	r3, #0
   28ae8:	d002      	beq.n	28af0 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   28aea:	697b      	ldr	r3, [r7, #20]
   28aec:	2220      	movs	r2, #32
   28aee:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   28af0:	68fb      	ldr	r3, [r7, #12]
   28af2:	7a5b      	ldrb	r3, [r3, #9]
   28af4:	2b00      	cmp	r3, #0
   28af6:	d002      	beq.n	28afe <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   28af8:	697b      	ldr	r3, [r7, #20]
   28afa:	2208      	movs	r2, #8
   28afc:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   28afe:	2300      	movs	r3, #0
}
   28b00:	0018      	movs	r0, r3
   28b02:	46bd      	mov	sp, r7
   28b04:	b006      	add	sp, #24
   28b06:	bd80      	pop	{r7, pc}
   28b08:	000289d1 	.word	0x000289d1
   28b0c:	000289e5 	.word	0x000289e5

00028b10 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   28b10:	b580      	push	{r7, lr}
   28b12:	b084      	sub	sp, #16
   28b14:	af00      	add	r7, sp, #0
   28b16:	60f8      	str	r0, [r7, #12]
   28b18:	60b9      	str	r1, [r7, #8]
   28b1a:	1dfb      	adds	r3, r7, #7
   28b1c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   28b1e:	1dfb      	adds	r3, r7, #7
   28b20:	781b      	ldrb	r3, [r3, #0]
   28b22:	68fa      	ldr	r2, [r7, #12]
   28b24:	3302      	adds	r3, #2
   28b26:	009b      	lsls	r3, r3, #2
   28b28:	18d3      	adds	r3, r2, r3
   28b2a:	3304      	adds	r3, #4
   28b2c:	68ba      	ldr	r2, [r7, #8]
   28b2e:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   28b30:	68fb      	ldr	r3, [r7, #12]
   28b32:	2230      	movs	r2, #48	; 0x30
   28b34:	5c9b      	ldrb	r3, [r3, r2]
   28b36:	b25a      	sxtb	r2, r3
   28b38:	1dfb      	adds	r3, r7, #7
   28b3a:	781b      	ldrb	r3, [r3, #0]
   28b3c:	2101      	movs	r1, #1
   28b3e:	4099      	lsls	r1, r3
   28b40:	000b      	movs	r3, r1
   28b42:	b25b      	sxtb	r3, r3
   28b44:	4313      	orrs	r3, r2
   28b46:	b25b      	sxtb	r3, r3
   28b48:	b2d9      	uxtb	r1, r3
   28b4a:	68fb      	ldr	r3, [r7, #12]
   28b4c:	2230      	movs	r2, #48	; 0x30
   28b4e:	5499      	strb	r1, [r3, r2]
}
   28b50:	46c0      	nop			; (mov r8, r8)
   28b52:	46bd      	mov	sp, r7
   28b54:	b004      	add	sp, #16
   28b56:	bd80      	pop	{r7, pc}

00028b58 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   28b58:	b580      	push	{r7, lr}
   28b5a:	b084      	sub	sp, #16
   28b5c:	af00      	add	r7, sp, #0
   28b5e:	60f8      	str	r0, [r7, #12]
   28b60:	60b9      	str	r1, [r7, #8]
   28b62:	1dbb      	adds	r3, r7, #6
   28b64:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   28b66:	1dbb      	adds	r3, r7, #6
   28b68:	881b      	ldrh	r3, [r3, #0]
   28b6a:	2b00      	cmp	r3, #0
   28b6c:	d101      	bne.n	28b72 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   28b6e:	2317      	movs	r3, #23
   28b70:	e010      	b.n	28b94 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   28b72:	68fb      	ldr	r3, [r7, #12]
   28b74:	79db      	ldrb	r3, [r3, #7]
   28b76:	2201      	movs	r2, #1
   28b78:	4053      	eors	r3, r2
   28b7a:	b2db      	uxtb	r3, r3
   28b7c:	2b00      	cmp	r3, #0
   28b7e:	d001      	beq.n	28b84 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   28b80:	231c      	movs	r3, #28
   28b82:	e007      	b.n	28b94 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   28b84:	1dbb      	adds	r3, r7, #6
   28b86:	881a      	ldrh	r2, [r3, #0]
   28b88:	68b9      	ldr	r1, [r7, #8]
   28b8a:	68fb      	ldr	r3, [r7, #12]
   28b8c:	0018      	movs	r0, r3
   28b8e:	4b03      	ldr	r3, [pc, #12]	; (28b9c <usart_write_buffer_job+0x44>)
   28b90:	4798      	blx	r3
   28b92:	0003      	movs	r3, r0
}
   28b94:	0018      	movs	r0, r3
   28b96:	46bd      	mov	sp, r7
   28b98:	b004      	add	sp, #16
   28b9a:	bd80      	pop	{r7, pc}
   28b9c:	00028a3d 	.word	0x00028a3d

00028ba0 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   28ba0:	b580      	push	{r7, lr}
   28ba2:	b084      	sub	sp, #16
   28ba4:	af00      	add	r7, sp, #0
   28ba6:	60f8      	str	r0, [r7, #12]
   28ba8:	60b9      	str	r1, [r7, #8]
   28baa:	1dbb      	adds	r3, r7, #6
   28bac:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   28bae:	1dbb      	adds	r3, r7, #6
   28bb0:	881b      	ldrh	r3, [r3, #0]
   28bb2:	2b00      	cmp	r3, #0
   28bb4:	d101      	bne.n	28bba <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   28bb6:	2317      	movs	r3, #23
   28bb8:	e010      	b.n	28bdc <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   28bba:	68fb      	ldr	r3, [r7, #12]
   28bbc:	799b      	ldrb	r3, [r3, #6]
   28bbe:	2201      	movs	r2, #1
   28bc0:	4053      	eors	r3, r2
   28bc2:	b2db      	uxtb	r3, r3
   28bc4:	2b00      	cmp	r3, #0
   28bc6:	d001      	beq.n	28bcc <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   28bc8:	231c      	movs	r3, #28
   28bca:	e007      	b.n	28bdc <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   28bcc:	1dbb      	adds	r3, r7, #6
   28bce:	881a      	ldrh	r2, [r3, #0]
   28bd0:	68b9      	ldr	r1, [r7, #8]
   28bd2:	68fb      	ldr	r3, [r7, #12]
   28bd4:	0018      	movs	r0, r3
   28bd6:	4b03      	ldr	r3, [pc, #12]	; (28be4 <usart_read_buffer_job+0x44>)
   28bd8:	4798      	blx	r3
   28bda:	0003      	movs	r3, r0
}
   28bdc:	0018      	movs	r0, r3
   28bde:	46bd      	mov	sp, r7
   28be0:	b004      	add	sp, #16
   28be2:	bd80      	pop	{r7, pc}
   28be4:	00028a99 	.word	0x00028a99

00028be8 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   28be8:	b580      	push	{r7, lr}
   28bea:	b084      	sub	sp, #16
   28bec:	af00      	add	r7, sp, #0
   28bee:	6078      	str	r0, [r7, #4]
   28bf0:	000a      	movs	r2, r1
   28bf2:	1cfb      	adds	r3, r7, #3
   28bf4:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   28bf6:	1cfb      	adds	r3, r7, #3
   28bf8:	781b      	ldrb	r3, [r3, #0]
   28bfa:	2b00      	cmp	r3, #0
   28bfc:	d002      	beq.n	28c04 <usart_get_job_status+0x1c>
   28bfe:	2b01      	cmp	r3, #1
   28c00:	d007      	beq.n	28c12 <usart_get_job_status+0x2a>
   28c02:	e00d      	b.n	28c20 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   28c04:	230f      	movs	r3, #15
   28c06:	18fb      	adds	r3, r7, r3
   28c08:	687a      	ldr	r2, [r7, #4]
   28c0a:	2132      	movs	r1, #50	; 0x32
   28c0c:	5c52      	ldrb	r2, [r2, r1]
   28c0e:	701a      	strb	r2, [r3, #0]
			break;
   28c10:	e00b      	b.n	28c2a <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   28c12:	230f      	movs	r3, #15
   28c14:	18fb      	adds	r3, r7, r3
   28c16:	687a      	ldr	r2, [r7, #4]
   28c18:	2133      	movs	r1, #51	; 0x33
   28c1a:	5c52      	ldrb	r2, [r2, r1]
   28c1c:	701a      	strb	r2, [r3, #0]
			break;
   28c1e:	e004      	b.n	28c2a <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   28c20:	230f      	movs	r3, #15
   28c22:	18fb      	adds	r3, r7, r3
   28c24:	2217      	movs	r2, #23
   28c26:	701a      	strb	r2, [r3, #0]
			break;
   28c28:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   28c2a:	230f      	movs	r3, #15
   28c2c:	18fb      	adds	r3, r7, r3
   28c2e:	781b      	ldrb	r3, [r3, #0]
}
   28c30:	0018      	movs	r0, r3
   28c32:	46bd      	mov	sp, r7
   28c34:	b004      	add	sp, #16
   28c36:	bd80      	pop	{r7, pc}

00028c38 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   28c38:	b580      	push	{r7, lr}
   28c3a:	b088      	sub	sp, #32
   28c3c:	af00      	add	r7, sp, #0
   28c3e:	0002      	movs	r2, r0
   28c40:	1dfb      	adds	r3, r7, #7
   28c42:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   28c44:	1dfb      	adds	r3, r7, #7
   28c46:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   28c48:	4ba3      	ldr	r3, [pc, #652]	; (28ed8 <_usart_interrupt_handler+0x2a0>)
   28c4a:	0092      	lsls	r2, r2, #2
   28c4c:	58d3      	ldr	r3, [r2, r3]
   28c4e:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   28c50:	69bb      	ldr	r3, [r7, #24]
   28c52:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   28c54:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   28c56:	69bb      	ldr	r3, [r7, #24]
   28c58:	0018      	movs	r0, r3
   28c5a:	4ba0      	ldr	r3, [pc, #640]	; (28edc <_usart_interrupt_handler+0x2a4>)
   28c5c:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   28c5e:	697b      	ldr	r3, [r7, #20]
   28c60:	7e1b      	ldrb	r3, [r3, #24]
   28c62:	b2da      	uxtb	r2, r3
   28c64:	2312      	movs	r3, #18
   28c66:	18fb      	adds	r3, r7, r3
   28c68:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   28c6a:	697b      	ldr	r3, [r7, #20]
   28c6c:	7d9b      	ldrb	r3, [r3, #22]
   28c6e:	b2db      	uxtb	r3, r3
   28c70:	b29a      	uxth	r2, r3
   28c72:	2312      	movs	r3, #18
   28c74:	18fb      	adds	r3, r7, r3
   28c76:	2112      	movs	r1, #18
   28c78:	1879      	adds	r1, r7, r1
   28c7a:	8809      	ldrh	r1, [r1, #0]
   28c7c:	400a      	ands	r2, r1
   28c7e:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   28c80:	69bb      	ldr	r3, [r7, #24]
   28c82:	2230      	movs	r2, #48	; 0x30
   28c84:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   28c86:	69ba      	ldr	r2, [r7, #24]
   28c88:	2131      	movs	r1, #49	; 0x31
   28c8a:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   28c8c:	4013      	ands	r3, r2
   28c8e:	b2da      	uxtb	r2, r3
   28c90:	2310      	movs	r3, #16
   28c92:	18fb      	adds	r3, r7, r3
   28c94:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   28c96:	2312      	movs	r3, #18
   28c98:	18fb      	adds	r3, r7, r3
   28c9a:	881b      	ldrh	r3, [r3, #0]
   28c9c:	2201      	movs	r2, #1
   28c9e:	4013      	ands	r3, r2
   28ca0:	d044      	beq.n	28d2c <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   28ca2:	69bb      	ldr	r3, [r7, #24]
   28ca4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28ca6:	b29b      	uxth	r3, r3
   28ca8:	2b00      	cmp	r3, #0
   28caa:	d03c      	beq.n	28d26 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   28cac:	69bb      	ldr	r3, [r7, #24]
   28cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28cb0:	781b      	ldrb	r3, [r3, #0]
   28cb2:	b2da      	uxtb	r2, r3
   28cb4:	231c      	movs	r3, #28
   28cb6:	18fb      	adds	r3, r7, r3
   28cb8:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   28cba:	69bb      	ldr	r3, [r7, #24]
   28cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28cbe:	1c5a      	adds	r2, r3, #1
   28cc0:	69bb      	ldr	r3, [r7, #24]
   28cc2:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   28cc4:	69bb      	ldr	r3, [r7, #24]
   28cc6:	795b      	ldrb	r3, [r3, #5]
   28cc8:	2b01      	cmp	r3, #1
   28cca:	d113      	bne.n	28cf4 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   28ccc:	69bb      	ldr	r3, [r7, #24]
   28cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28cd0:	781b      	ldrb	r3, [r3, #0]
   28cd2:	b2db      	uxtb	r3, r3
   28cd4:	021b      	lsls	r3, r3, #8
   28cd6:	b21a      	sxth	r2, r3
   28cd8:	231c      	movs	r3, #28
   28cda:	18fb      	adds	r3, r7, r3
   28cdc:	2100      	movs	r1, #0
   28cde:	5e5b      	ldrsh	r3, [r3, r1]
   28ce0:	4313      	orrs	r3, r2
   28ce2:	b21a      	sxth	r2, r3
   28ce4:	231c      	movs	r3, #28
   28ce6:	18fb      	adds	r3, r7, r3
   28ce8:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   28cea:	69bb      	ldr	r3, [r7, #24]
   28cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28cee:	1c5a      	adds	r2, r3, #1
   28cf0:	69bb      	ldr	r3, [r7, #24]
   28cf2:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   28cf4:	231c      	movs	r3, #28
   28cf6:	18fb      	adds	r3, r7, r3
   28cf8:	881b      	ldrh	r3, [r3, #0]
   28cfa:	05db      	lsls	r3, r3, #23
   28cfc:	0ddb      	lsrs	r3, r3, #23
   28cfe:	b29a      	uxth	r2, r3
   28d00:	697b      	ldr	r3, [r7, #20]
   28d02:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   28d04:	69bb      	ldr	r3, [r7, #24]
   28d06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28d08:	b29b      	uxth	r3, r3
   28d0a:	3b01      	subs	r3, #1
   28d0c:	b29b      	uxth	r3, r3
   28d0e:	69ba      	ldr	r2, [r7, #24]
   28d10:	1c19      	adds	r1, r3, #0
   28d12:	85d1      	strh	r1, [r2, #46]	; 0x2e
   28d14:	2b00      	cmp	r3, #0
   28d16:	d109      	bne.n	28d2c <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   28d18:	697b      	ldr	r3, [r7, #20]
   28d1a:	2201      	movs	r2, #1
   28d1c:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   28d1e:	697b      	ldr	r3, [r7, #20]
   28d20:	2202      	movs	r2, #2
   28d22:	759a      	strb	r2, [r3, #22]
   28d24:	e002      	b.n	28d2c <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   28d26:	697b      	ldr	r3, [r7, #20]
   28d28:	2201      	movs	r2, #1
   28d2a:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   28d2c:	2312      	movs	r3, #18
   28d2e:	18fb      	adds	r3, r7, r3
   28d30:	881b      	ldrh	r3, [r3, #0]
   28d32:	2202      	movs	r2, #2
   28d34:	4013      	ands	r3, r2
   28d36:	d011      	beq.n	28d5c <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   28d38:	697b      	ldr	r3, [r7, #20]
   28d3a:	2202      	movs	r2, #2
   28d3c:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   28d3e:	69bb      	ldr	r3, [r7, #24]
   28d40:	2233      	movs	r2, #51	; 0x33
   28d42:	2100      	movs	r1, #0
   28d44:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   28d46:	2310      	movs	r3, #16
   28d48:	18fb      	adds	r3, r7, r3
   28d4a:	881b      	ldrh	r3, [r3, #0]
   28d4c:	2201      	movs	r2, #1
   28d4e:	4013      	ands	r3, r2
   28d50:	d004      	beq.n	28d5c <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   28d52:	69bb      	ldr	r3, [r7, #24]
   28d54:	68db      	ldr	r3, [r3, #12]
   28d56:	69ba      	ldr	r2, [r7, #24]
   28d58:	0010      	movs	r0, r2
   28d5a:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   28d5c:	2312      	movs	r3, #18
   28d5e:	18fb      	adds	r3, r7, r3
   28d60:	881b      	ldrh	r3, [r3, #0]
   28d62:	2204      	movs	r2, #4
   28d64:	4013      	ands	r3, r2
   28d66:	d100      	bne.n	28d6a <_usart_interrupt_handler+0x132>
   28d68:	e0bd      	b.n	28ee6 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   28d6a:	69bb      	ldr	r3, [r7, #24]
   28d6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28d6e:	b29b      	uxth	r3, r3
   28d70:	2b00      	cmp	r3, #0
   28d72:	d100      	bne.n	28d76 <_usart_interrupt_handler+0x13e>
   28d74:	e0b4      	b.n	28ee0 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   28d76:	697b      	ldr	r3, [r7, #20]
   28d78:	8b5b      	ldrh	r3, [r3, #26]
   28d7a:	b29b      	uxth	r3, r3
   28d7c:	b2da      	uxtb	r2, r3
   28d7e:	231f      	movs	r3, #31
   28d80:	18fb      	adds	r3, r7, r3
   28d82:	213f      	movs	r1, #63	; 0x3f
   28d84:	400a      	ands	r2, r1
   28d86:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   28d88:	231f      	movs	r3, #31
   28d8a:	18fb      	adds	r3, r7, r3
   28d8c:	781b      	ldrb	r3, [r3, #0]
   28d8e:	2208      	movs	r2, #8
   28d90:	4013      	ands	r3, r2
   28d92:	d007      	beq.n	28da4 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   28d94:	231f      	movs	r3, #31
   28d96:	18fb      	adds	r3, r7, r3
   28d98:	221f      	movs	r2, #31
   28d9a:	18ba      	adds	r2, r7, r2
   28d9c:	7812      	ldrb	r2, [r2, #0]
   28d9e:	2108      	movs	r1, #8
   28da0:	438a      	bics	r2, r1
   28da2:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   28da4:	231f      	movs	r3, #31
   28da6:	18fb      	adds	r3, r7, r3
   28da8:	781b      	ldrb	r3, [r3, #0]
   28daa:	2b00      	cmp	r3, #0
   28dac:	d050      	beq.n	28e50 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   28dae:	231f      	movs	r3, #31
   28db0:	18fb      	adds	r3, r7, r3
   28db2:	781b      	ldrb	r3, [r3, #0]
   28db4:	2202      	movs	r2, #2
   28db6:	4013      	ands	r3, r2
   28db8:	d007      	beq.n	28dca <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   28dba:	69bb      	ldr	r3, [r7, #24]
   28dbc:	2232      	movs	r2, #50	; 0x32
   28dbe:	211a      	movs	r1, #26
   28dc0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   28dc2:	697b      	ldr	r3, [r7, #20]
   28dc4:	2202      	movs	r2, #2
   28dc6:	835a      	strh	r2, [r3, #26]
   28dc8:	e036      	b.n	28e38 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   28dca:	231f      	movs	r3, #31
   28dcc:	18fb      	adds	r3, r7, r3
   28dce:	781b      	ldrb	r3, [r3, #0]
   28dd0:	2204      	movs	r2, #4
   28dd2:	4013      	ands	r3, r2
   28dd4:	d007      	beq.n	28de6 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   28dd6:	69bb      	ldr	r3, [r7, #24]
   28dd8:	2232      	movs	r2, #50	; 0x32
   28dda:	211e      	movs	r1, #30
   28ddc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   28dde:	697b      	ldr	r3, [r7, #20]
   28de0:	2204      	movs	r2, #4
   28de2:	835a      	strh	r2, [r3, #26]
   28de4:	e028      	b.n	28e38 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   28de6:	231f      	movs	r3, #31
   28de8:	18fb      	adds	r3, r7, r3
   28dea:	781b      	ldrb	r3, [r3, #0]
   28dec:	2201      	movs	r2, #1
   28dee:	4013      	ands	r3, r2
   28df0:	d007      	beq.n	28e02 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   28df2:	69bb      	ldr	r3, [r7, #24]
   28df4:	2232      	movs	r2, #50	; 0x32
   28df6:	2113      	movs	r1, #19
   28df8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   28dfa:	697b      	ldr	r3, [r7, #20]
   28dfc:	2201      	movs	r2, #1
   28dfe:	835a      	strh	r2, [r3, #26]
   28e00:	e01a      	b.n	28e38 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   28e02:	231f      	movs	r3, #31
   28e04:	18fb      	adds	r3, r7, r3
   28e06:	781b      	ldrb	r3, [r3, #0]
   28e08:	2210      	movs	r2, #16
   28e0a:	4013      	ands	r3, r2
   28e0c:	d007      	beq.n	28e1e <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   28e0e:	69bb      	ldr	r3, [r7, #24]
   28e10:	2232      	movs	r2, #50	; 0x32
   28e12:	2142      	movs	r1, #66	; 0x42
   28e14:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   28e16:	697b      	ldr	r3, [r7, #20]
   28e18:	2210      	movs	r2, #16
   28e1a:	835a      	strh	r2, [r3, #26]
   28e1c:	e00c      	b.n	28e38 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   28e1e:	231f      	movs	r3, #31
   28e20:	18fb      	adds	r3, r7, r3
   28e22:	781b      	ldrb	r3, [r3, #0]
   28e24:	2220      	movs	r2, #32
   28e26:	4013      	ands	r3, r2
   28e28:	d006      	beq.n	28e38 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   28e2a:	69bb      	ldr	r3, [r7, #24]
   28e2c:	2232      	movs	r2, #50	; 0x32
   28e2e:	2141      	movs	r1, #65	; 0x41
   28e30:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   28e32:	697b      	ldr	r3, [r7, #20]
   28e34:	2220      	movs	r2, #32
   28e36:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   28e38:	2310      	movs	r3, #16
   28e3a:	18fb      	adds	r3, r7, r3
   28e3c:	881b      	ldrh	r3, [r3, #0]
   28e3e:	2204      	movs	r2, #4
   28e40:	4013      	ands	r3, r2
				if (callback_status
   28e42:	d050      	beq.n	28ee6 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   28e44:	69bb      	ldr	r3, [r7, #24]
   28e46:	695b      	ldr	r3, [r3, #20]
   28e48:	69ba      	ldr	r2, [r7, #24]
   28e4a:	0010      	movs	r0, r2
   28e4c:	4798      	blx	r3
   28e4e:	e04a      	b.n	28ee6 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   28e50:	697b      	ldr	r3, [r7, #20]
   28e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   28e54:	b29a      	uxth	r2, r3
   28e56:	230e      	movs	r3, #14
   28e58:	18fb      	adds	r3, r7, r3
   28e5a:	05d2      	lsls	r2, r2, #23
   28e5c:	0dd2      	lsrs	r2, r2, #23
   28e5e:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   28e60:	69bb      	ldr	r3, [r7, #24]
   28e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28e64:	220e      	movs	r2, #14
   28e66:	18ba      	adds	r2, r7, r2
   28e68:	8812      	ldrh	r2, [r2, #0]
   28e6a:	b2d2      	uxtb	r2, r2
   28e6c:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   28e6e:	69bb      	ldr	r3, [r7, #24]
   28e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28e72:	1c5a      	adds	r2, r3, #1
   28e74:	69bb      	ldr	r3, [r7, #24]
   28e76:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   28e78:	69bb      	ldr	r3, [r7, #24]
   28e7a:	795b      	ldrb	r3, [r3, #5]
   28e7c:	2b01      	cmp	r3, #1
   28e7e:	d10d      	bne.n	28e9c <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   28e80:	69bb      	ldr	r3, [r7, #24]
   28e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28e84:	220e      	movs	r2, #14
   28e86:	18ba      	adds	r2, r7, r2
   28e88:	8812      	ldrh	r2, [r2, #0]
   28e8a:	0a12      	lsrs	r2, r2, #8
   28e8c:	b292      	uxth	r2, r2
   28e8e:	b2d2      	uxtb	r2, r2
   28e90:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   28e92:	69bb      	ldr	r3, [r7, #24]
   28e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28e96:	1c5a      	adds	r2, r3, #1
   28e98:	69bb      	ldr	r3, [r7, #24]
   28e9a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   28e9c:	69bb      	ldr	r3, [r7, #24]
   28e9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28ea0:	b29b      	uxth	r3, r3
   28ea2:	3b01      	subs	r3, #1
   28ea4:	b29b      	uxth	r3, r3
   28ea6:	69ba      	ldr	r2, [r7, #24]
   28ea8:	1c19      	adds	r1, r3, #0
   28eaa:	8591      	strh	r1, [r2, #44]	; 0x2c
   28eac:	2b00      	cmp	r3, #0
   28eae:	d11a      	bne.n	28ee6 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   28eb0:	697b      	ldr	r3, [r7, #20]
   28eb2:	2204      	movs	r2, #4
   28eb4:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   28eb6:	69bb      	ldr	r3, [r7, #24]
   28eb8:	2232      	movs	r2, #50	; 0x32
   28eba:	2100      	movs	r1, #0
   28ebc:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   28ebe:	2310      	movs	r3, #16
   28ec0:	18fb      	adds	r3, r7, r3
   28ec2:	881b      	ldrh	r3, [r3, #0]
   28ec4:	2202      	movs	r2, #2
   28ec6:	4013      	ands	r3, r2
					if (callback_status
   28ec8:	d00d      	beq.n	28ee6 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   28eca:	69bb      	ldr	r3, [r7, #24]
   28ecc:	691b      	ldr	r3, [r3, #16]
   28ece:	69ba      	ldr	r2, [r7, #24]
   28ed0:	0010      	movs	r0, r2
   28ed2:	4798      	blx	r3
   28ed4:	e007      	b.n	28ee6 <_usart_interrupt_handler+0x2ae>
   28ed6:	46c0      	nop			; (mov r8, r8)
   28ed8:	20005a38 	.word	0x20005a38
   28edc:	00028a19 	.word	0x00028a19
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   28ee0:	697b      	ldr	r3, [r7, #20]
   28ee2:	2204      	movs	r2, #4
   28ee4:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   28ee6:	2312      	movs	r3, #18
   28ee8:	18fb      	adds	r3, r7, r3
   28eea:	881b      	ldrh	r3, [r3, #0]
   28eec:	2210      	movs	r2, #16
   28eee:	4013      	ands	r3, r2
   28ef0:	d010      	beq.n	28f14 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   28ef2:	697b      	ldr	r3, [r7, #20]
   28ef4:	2210      	movs	r2, #16
   28ef6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   28ef8:	697b      	ldr	r3, [r7, #20]
   28efa:	2210      	movs	r2, #16
   28efc:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   28efe:	2310      	movs	r3, #16
   28f00:	18fb      	adds	r3, r7, r3
   28f02:	881b      	ldrh	r3, [r3, #0]
   28f04:	2210      	movs	r2, #16
   28f06:	4013      	ands	r3, r2
   28f08:	d004      	beq.n	28f14 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   28f0a:	69bb      	ldr	r3, [r7, #24]
   28f0c:	69db      	ldr	r3, [r3, #28]
   28f0e:	69ba      	ldr	r2, [r7, #24]
   28f10:	0010      	movs	r0, r2
   28f12:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   28f14:	2312      	movs	r3, #18
   28f16:	18fb      	adds	r3, r7, r3
   28f18:	881b      	ldrh	r3, [r3, #0]
   28f1a:	2220      	movs	r2, #32
   28f1c:	4013      	ands	r3, r2
   28f1e:	d010      	beq.n	28f42 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   28f20:	697b      	ldr	r3, [r7, #20]
   28f22:	2220      	movs	r2, #32
   28f24:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   28f26:	697b      	ldr	r3, [r7, #20]
   28f28:	2220      	movs	r2, #32
   28f2a:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   28f2c:	2310      	movs	r3, #16
   28f2e:	18fb      	adds	r3, r7, r3
   28f30:	881b      	ldrh	r3, [r3, #0]
   28f32:	2208      	movs	r2, #8
   28f34:	4013      	ands	r3, r2
   28f36:	d004      	beq.n	28f42 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   28f38:	69bb      	ldr	r3, [r7, #24]
   28f3a:	699b      	ldr	r3, [r3, #24]
   28f3c:	69ba      	ldr	r2, [r7, #24]
   28f3e:	0010      	movs	r0, r2
   28f40:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   28f42:	2312      	movs	r3, #18
   28f44:	18fb      	adds	r3, r7, r3
   28f46:	881b      	ldrh	r3, [r3, #0]
   28f48:	2208      	movs	r2, #8
   28f4a:	4013      	ands	r3, r2
   28f4c:	d010      	beq.n	28f70 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   28f4e:	697b      	ldr	r3, [r7, #20]
   28f50:	2208      	movs	r2, #8
   28f52:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   28f54:	697b      	ldr	r3, [r7, #20]
   28f56:	2208      	movs	r2, #8
   28f58:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   28f5a:	2310      	movs	r3, #16
   28f5c:	18fb      	adds	r3, r7, r3
   28f5e:	881b      	ldrh	r3, [r3, #0]
   28f60:	2220      	movs	r2, #32
   28f62:	4013      	ands	r3, r2
   28f64:	d004      	beq.n	28f70 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   28f66:	69bb      	ldr	r3, [r7, #24]
   28f68:	6a1b      	ldr	r3, [r3, #32]
   28f6a:	69ba      	ldr	r2, [r7, #24]
   28f6c:	0010      	movs	r0, r2
   28f6e:	4798      	blx	r3
		}
	}
#endif
}
   28f70:	46c0      	nop			; (mov r8, r8)
   28f72:	46bd      	mov	sp, r7
   28f74:	b008      	add	sp, #32
   28f76:	bd80      	pop	{r7, pc}

00028f78 <system_gclk_gen_get_config_defaults>:
{
   28f78:	b580      	push	{r7, lr}
   28f7a:	b082      	sub	sp, #8
   28f7c:	af00      	add	r7, sp, #0
   28f7e:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   28f80:	687b      	ldr	r3, [r7, #4]
   28f82:	2201      	movs	r2, #1
   28f84:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   28f86:	687b      	ldr	r3, [r7, #4]
   28f88:	2200      	movs	r2, #0
   28f8a:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   28f8c:	687b      	ldr	r3, [r7, #4]
   28f8e:	2206      	movs	r2, #6
   28f90:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   28f92:	687b      	ldr	r3, [r7, #4]
   28f94:	2200      	movs	r2, #0
   28f96:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   28f98:	687b      	ldr	r3, [r7, #4]
   28f9a:	2200      	movs	r2, #0
   28f9c:	725a      	strb	r2, [r3, #9]
}
   28f9e:	46c0      	nop			; (mov r8, r8)
   28fa0:	46bd      	mov	sp, r7
   28fa2:	b002      	add	sp, #8
   28fa4:	bd80      	pop	{r7, pc}

00028fa6 <system_gclk_chan_get_config_defaults>:
{
   28fa6:	b580      	push	{r7, lr}
   28fa8:	b082      	sub	sp, #8
   28faa:	af00      	add	r7, sp, #0
   28fac:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28fae:	687b      	ldr	r3, [r7, #4]
   28fb0:	2200      	movs	r2, #0
   28fb2:	701a      	strb	r2, [r3, #0]
}
   28fb4:	46c0      	nop			; (mov r8, r8)
   28fb6:	46bd      	mov	sp, r7
   28fb8:	b002      	add	sp, #8
   28fba:	bd80      	pop	{r7, pc}

00028fbc <system_clock_source_osc8m_get_config_defaults>:
{
   28fbc:	b580      	push	{r7, lr}
   28fbe:	b082      	sub	sp, #8
   28fc0:	af00      	add	r7, sp, #0
   28fc2:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   28fc4:	687b      	ldr	r3, [r7, #4]
   28fc6:	2203      	movs	r2, #3
   28fc8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   28fca:	687b      	ldr	r3, [r7, #4]
   28fcc:	2200      	movs	r2, #0
   28fce:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   28fd0:	687b      	ldr	r3, [r7, #4]
   28fd2:	2201      	movs	r2, #1
   28fd4:	709a      	strb	r2, [r3, #2]
}
   28fd6:	46c0      	nop			; (mov r8, r8)
   28fd8:	46bd      	mov	sp, r7
   28fda:	b002      	add	sp, #8
   28fdc:	bd80      	pop	{r7, pc}
	...

00028fe0 <system_cpu_clock_set_divider>:
{
   28fe0:	b580      	push	{r7, lr}
   28fe2:	b082      	sub	sp, #8
   28fe4:	af00      	add	r7, sp, #0
   28fe6:	0002      	movs	r2, r0
   28fe8:	1dfb      	adds	r3, r7, #7
   28fea:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   28fec:	4a03      	ldr	r2, [pc, #12]	; (28ffc <system_cpu_clock_set_divider+0x1c>)
   28fee:	1dfb      	adds	r3, r7, #7
   28ff0:	781b      	ldrb	r3, [r3, #0]
   28ff2:	7213      	strb	r3, [r2, #8]
}
   28ff4:	46c0      	nop			; (mov r8, r8)
   28ff6:	46bd      	mov	sp, r7
   28ff8:	b002      	add	sp, #8
   28ffa:	bd80      	pop	{r7, pc}
   28ffc:	40000400 	.word	0x40000400

00029000 <system_apb_clock_set_divider>:
{
   29000:	b580      	push	{r7, lr}
   29002:	b082      	sub	sp, #8
   29004:	af00      	add	r7, sp, #0
   29006:	0002      	movs	r2, r0
   29008:	1dfb      	adds	r3, r7, #7
   2900a:	701a      	strb	r2, [r3, #0]
   2900c:	1dbb      	adds	r3, r7, #6
   2900e:	1c0a      	adds	r2, r1, #0
   29010:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29012:	1dfb      	adds	r3, r7, #7
   29014:	781b      	ldrb	r3, [r3, #0]
   29016:	2b01      	cmp	r3, #1
   29018:	d008      	beq.n	2902c <system_apb_clock_set_divider+0x2c>
   2901a:	2b02      	cmp	r3, #2
   2901c:	d00b      	beq.n	29036 <system_apb_clock_set_divider+0x36>
   2901e:	2b00      	cmp	r3, #0
   29020:	d10e      	bne.n	29040 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   29022:	4a0b      	ldr	r2, [pc, #44]	; (29050 <system_apb_clock_set_divider+0x50>)
   29024:	1dbb      	adds	r3, r7, #6
   29026:	781b      	ldrb	r3, [r3, #0]
   29028:	7253      	strb	r3, [r2, #9]
			break;
   2902a:	e00b      	b.n	29044 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   2902c:	4a08      	ldr	r2, [pc, #32]	; (29050 <system_apb_clock_set_divider+0x50>)
   2902e:	1dbb      	adds	r3, r7, #6
   29030:	781b      	ldrb	r3, [r3, #0]
   29032:	7293      	strb	r3, [r2, #10]
			break;
   29034:	e006      	b.n	29044 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   29036:	4a06      	ldr	r2, [pc, #24]	; (29050 <system_apb_clock_set_divider+0x50>)
   29038:	1dbb      	adds	r3, r7, #6
   2903a:	781b      	ldrb	r3, [r3, #0]
   2903c:	72d3      	strb	r3, [r2, #11]
			break;
   2903e:	e001      	b.n	29044 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   29040:	2317      	movs	r3, #23
   29042:	e000      	b.n	29046 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   29044:	2300      	movs	r3, #0
}
   29046:	0018      	movs	r0, r3
   29048:	46bd      	mov	sp, r7
   2904a:	b002      	add	sp, #8
   2904c:	bd80      	pop	{r7, pc}
   2904e:	46c0      	nop			; (mov r8, r8)
   29050:	40000400 	.word	0x40000400

00029054 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   29054:	b580      	push	{r7, lr}
   29056:	b082      	sub	sp, #8
   29058:	af00      	add	r7, sp, #0
   2905a:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   2905c:	687b      	ldr	r3, [r7, #4]
   2905e:	2201      	movs	r2, #1
   29060:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   29062:	687b      	ldr	r3, [r7, #4]
   29064:	2200      	movs	r2, #0
   29066:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   29068:	687b      	ldr	r3, [r7, #4]
   2906a:	2200      	movs	r2, #0
   2906c:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   2906e:	687b      	ldr	r3, [r7, #4]
   29070:	2200      	movs	r2, #0
   29072:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   29074:	687b      	ldr	r3, [r7, #4]
   29076:	2200      	movs	r2, #0
   29078:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   2907a:	687b      	ldr	r3, [r7, #4]
   2907c:	4a0a      	ldr	r2, [pc, #40]	; (290a8 <system_clock_source_dpll_get_config_defaults+0x54>)
   2907e:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   29080:	687b      	ldr	r3, [r7, #4]
   29082:	2280      	movs	r2, #128	; 0x80
   29084:	0212      	lsls	r2, r2, #8
   29086:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   29088:	687b      	ldr	r3, [r7, #4]
   2908a:	2201      	movs	r2, #1
   2908c:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   2908e:	687b      	ldr	r3, [r7, #4]
   29090:	2200      	movs	r2, #0
   29092:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   29094:	687b      	ldr	r3, [r7, #4]
   29096:	2200      	movs	r2, #0
   29098:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   2909a:	687b      	ldr	r3, [r7, #4]
   2909c:	2200      	movs	r2, #0
   2909e:	749a      	strb	r2, [r3, #18]
};
   290a0:	46c0      	nop			; (mov r8, r8)
   290a2:	46bd      	mov	sp, r7
   290a4:	b002      	add	sp, #8
   290a6:	bd80      	pop	{r7, pc}
   290a8:	02dc6c00 	.word	0x02dc6c00

000290ac <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   290ac:	b580      	push	{r7, lr}
   290ae:	b082      	sub	sp, #8
   290b0:	af00      	add	r7, sp, #0
   290b2:	0002      	movs	r2, r0
   290b4:	1dfb      	adds	r3, r7, #7
   290b6:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   290b8:	4a08      	ldr	r2, [pc, #32]	; (290dc <system_flash_set_waitstates+0x30>)
   290ba:	1dfb      	adds	r3, r7, #7
   290bc:	781b      	ldrb	r3, [r3, #0]
   290be:	210f      	movs	r1, #15
   290c0:	400b      	ands	r3, r1
   290c2:	b2d9      	uxtb	r1, r3
   290c4:	6853      	ldr	r3, [r2, #4]
   290c6:	200f      	movs	r0, #15
   290c8:	4001      	ands	r1, r0
   290ca:	0049      	lsls	r1, r1, #1
   290cc:	201e      	movs	r0, #30
   290ce:	4383      	bics	r3, r0
   290d0:	430b      	orrs	r3, r1
   290d2:	6053      	str	r3, [r2, #4]
}
   290d4:	46c0      	nop			; (mov r8, r8)
   290d6:	46bd      	mov	sp, r7
   290d8:	b002      	add	sp, #8
   290da:	bd80      	pop	{r7, pc}
   290dc:	41004000 	.word	0x41004000

000290e0 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   290e0:	b580      	push	{r7, lr}
   290e2:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   290e4:	46c0      	nop			; (mov r8, r8)
   290e6:	4b04      	ldr	r3, [pc, #16]	; (290f8 <_system_dfll_wait_for_sync+0x18>)
   290e8:	68db      	ldr	r3, [r3, #12]
   290ea:	2210      	movs	r2, #16
   290ec:	4013      	ands	r3, r2
   290ee:	d0fa      	beq.n	290e6 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   290f0:	46c0      	nop			; (mov r8, r8)
   290f2:	46bd      	mov	sp, r7
   290f4:	bd80      	pop	{r7, pc}
   290f6:	46c0      	nop			; (mov r8, r8)
   290f8:	40000800 	.word	0x40000800

000290fc <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   290fc:	b580      	push	{r7, lr}
   290fe:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   29100:	4b0c      	ldr	r3, [pc, #48]	; (29134 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29102:	2202      	movs	r2, #2
   29104:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   29106:	4b0c      	ldr	r3, [pc, #48]	; (29138 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   29108:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   2910a:	4a0a      	ldr	r2, [pc, #40]	; (29134 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2910c:	4b0b      	ldr	r3, [pc, #44]	; (2913c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2910e:	689b      	ldr	r3, [r3, #8]
   29110:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   29112:	4a08      	ldr	r2, [pc, #32]	; (29134 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29114:	4b09      	ldr	r3, [pc, #36]	; (2913c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   29116:	685b      	ldr	r3, [r3, #4]
   29118:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   2911a:	4b06      	ldr	r3, [pc, #24]	; (29134 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2911c:	2200      	movs	r2, #0
   2911e:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   29120:	4b05      	ldr	r3, [pc, #20]	; (29138 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   29122:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   29124:	4a03      	ldr	r2, [pc, #12]	; (29134 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29126:	4b05      	ldr	r3, [pc, #20]	; (2913c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   29128:	681b      	ldr	r3, [r3, #0]
   2912a:	b29b      	uxth	r3, r3
   2912c:	8493      	strh	r3, [r2, #36]	; 0x24
}
   2912e:	46c0      	nop			; (mov r8, r8)
   29130:	46bd      	mov	sp, r7
   29132:	bd80      	pop	{r7, pc}
   29134:	40000800 	.word	0x40000800
   29138:	000290e1 	.word	0x000290e1
   2913c:	2000415c 	.word	0x2000415c

00029140 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   29140:	b580      	push	{r7, lr}
   29142:	b082      	sub	sp, #8
   29144:	af00      	add	r7, sp, #0
   29146:	0002      	movs	r2, r0
   29148:	1dfb      	adds	r3, r7, #7
   2914a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2914c:	1dfb      	adds	r3, r7, #7
   2914e:	781b      	ldrb	r3, [r3, #0]
   29150:	2b08      	cmp	r3, #8
   29152:	d841      	bhi.n	291d8 <system_clock_source_get_hz+0x98>
   29154:	009a      	lsls	r2, r3, #2
   29156:	4b23      	ldr	r3, [pc, #140]	; (291e4 <system_clock_source_get_hz+0xa4>)
   29158:	18d3      	adds	r3, r2, r3
   2915a:	681b      	ldr	r3, [r3, #0]
   2915c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   2915e:	4b22      	ldr	r3, [pc, #136]	; (291e8 <system_clock_source_get_hz+0xa8>)
   29160:	691b      	ldr	r3, [r3, #16]
   29162:	e03a      	b.n	291da <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   29164:	4b21      	ldr	r3, [pc, #132]	; (291ec <system_clock_source_get_hz+0xac>)
   29166:	6a1b      	ldr	r3, [r3, #32]
   29168:	059b      	lsls	r3, r3, #22
   2916a:	0f9b      	lsrs	r3, r3, #30
   2916c:	b2db      	uxtb	r3, r3
   2916e:	001a      	movs	r2, r3
   29170:	4b1f      	ldr	r3, [pc, #124]	; (291f0 <system_clock_source_get_hz+0xb0>)
   29172:	40d3      	lsrs	r3, r2
   29174:	e031      	b.n	291da <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   29176:	2380      	movs	r3, #128	; 0x80
   29178:	021b      	lsls	r3, r3, #8
   2917a:	e02e      	b.n	291da <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   2917c:	2380      	movs	r3, #128	; 0x80
   2917e:	021b      	lsls	r3, r3, #8
   29180:	e02b      	b.n	291da <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   29182:	4b19      	ldr	r3, [pc, #100]	; (291e8 <system_clock_source_get_hz+0xa8>)
   29184:	695b      	ldr	r3, [r3, #20]
   29186:	e028      	b.n	291da <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   29188:	4b17      	ldr	r3, [pc, #92]	; (291e8 <system_clock_source_get_hz+0xa8>)
   2918a:	681b      	ldr	r3, [r3, #0]
   2918c:	2202      	movs	r2, #2
   2918e:	4013      	ands	r3, r2
   29190:	d101      	bne.n	29196 <system_clock_source_get_hz+0x56>
			return 0;
   29192:	2300      	movs	r3, #0
   29194:	e021      	b.n	291da <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   29196:	4b17      	ldr	r3, [pc, #92]	; (291f4 <system_clock_source_get_hz+0xb4>)
   29198:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   2919a:	4b13      	ldr	r3, [pc, #76]	; (291e8 <system_clock_source_get_hz+0xa8>)
   2919c:	681b      	ldr	r3, [r3, #0]
   2919e:	2224      	movs	r2, #36	; 0x24
   291a0:	4013      	ands	r3, r2
   291a2:	2b04      	cmp	r3, #4
   291a4:	d109      	bne.n	291ba <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   291a6:	2000      	movs	r0, #0
   291a8:	4b13      	ldr	r3, [pc, #76]	; (291f8 <system_clock_source_get_hz+0xb8>)
   291aa:	4798      	blx	r3
   291ac:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   291ae:	4b0e      	ldr	r3, [pc, #56]	; (291e8 <system_clock_source_get_hz+0xa8>)
   291b0:	689b      	ldr	r3, [r3, #8]
   291b2:	041b      	lsls	r3, r3, #16
   291b4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   291b6:	4353      	muls	r3, r2
   291b8:	e00f      	b.n	291da <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   291ba:	4b10      	ldr	r3, [pc, #64]	; (291fc <system_clock_source_get_hz+0xbc>)
   291bc:	e00d      	b.n	291da <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   291be:	4a0b      	ldr	r2, [pc, #44]	; (291ec <system_clock_source_get_hz+0xac>)
   291c0:	2350      	movs	r3, #80	; 0x50
   291c2:	5cd3      	ldrb	r3, [r2, r3]
   291c4:	b2db      	uxtb	r3, r3
   291c6:	001a      	movs	r2, r3
   291c8:	2304      	movs	r3, #4
   291ca:	4013      	ands	r3, r2
   291cc:	d101      	bne.n	291d2 <system_clock_source_get_hz+0x92>
			return 0;
   291ce:	2300      	movs	r3, #0
   291d0:	e003      	b.n	291da <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   291d2:	4b05      	ldr	r3, [pc, #20]	; (291e8 <system_clock_source_get_hz+0xa8>)
   291d4:	68db      	ldr	r3, [r3, #12]
   291d6:	e000      	b.n	291da <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   291d8:	2300      	movs	r3, #0
	}
}
   291da:	0018      	movs	r0, r3
   291dc:	46bd      	mov	sp, r7
   291de:	b002      	add	sp, #8
   291e0:	bd80      	pop	{r7, pc}
   291e2:	46c0      	nop			; (mov r8, r8)
   291e4:	00039160 	.word	0x00039160
   291e8:	2000415c 	.word	0x2000415c
   291ec:	40000800 	.word	0x40000800
   291f0:	007a1200 	.word	0x007a1200
   291f4:	000290e1 	.word	0x000290e1
   291f8:	00029bdd 	.word	0x00029bdd
   291fc:	02dc6c00 	.word	0x02dc6c00

00029200 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   29200:	b580      	push	{r7, lr}
   29202:	b084      	sub	sp, #16
   29204:	af00      	add	r7, sp, #0
   29206:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   29208:	4b1a      	ldr	r3, [pc, #104]	; (29274 <system_clock_source_osc8m_set_config+0x74>)
   2920a:	6a1b      	ldr	r3, [r3, #32]
   2920c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   2920e:	687b      	ldr	r3, [r7, #4]
   29210:	781b      	ldrb	r3, [r3, #0]
   29212:	1c1a      	adds	r2, r3, #0
   29214:	2303      	movs	r3, #3
   29216:	4013      	ands	r3, r2
   29218:	b2da      	uxtb	r2, r3
   2921a:	230d      	movs	r3, #13
   2921c:	18fb      	adds	r3, r7, r3
   2921e:	2103      	movs	r1, #3
   29220:	400a      	ands	r2, r1
   29222:	0010      	movs	r0, r2
   29224:	781a      	ldrb	r2, [r3, #0]
   29226:	2103      	movs	r1, #3
   29228:	438a      	bics	r2, r1
   2922a:	1c11      	adds	r1, r2, #0
   2922c:	1c02      	adds	r2, r0, #0
   2922e:	430a      	orrs	r2, r1
   29230:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   29232:	687b      	ldr	r3, [r7, #4]
   29234:	789a      	ldrb	r2, [r3, #2]
   29236:	230c      	movs	r3, #12
   29238:	18fb      	adds	r3, r7, r3
   2923a:	01d0      	lsls	r0, r2, #7
   2923c:	781a      	ldrb	r2, [r3, #0]
   2923e:	217f      	movs	r1, #127	; 0x7f
   29240:	400a      	ands	r2, r1
   29242:	1c11      	adds	r1, r2, #0
   29244:	1c02      	adds	r2, r0, #0
   29246:	430a      	orrs	r2, r1
   29248:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   2924a:	687b      	ldr	r3, [r7, #4]
   2924c:	785a      	ldrb	r2, [r3, #1]
   2924e:	230c      	movs	r3, #12
   29250:	18fb      	adds	r3, r7, r3
   29252:	2101      	movs	r1, #1
   29254:	400a      	ands	r2, r1
   29256:	0190      	lsls	r0, r2, #6
   29258:	781a      	ldrb	r2, [r3, #0]
   2925a:	2140      	movs	r1, #64	; 0x40
   2925c:	438a      	bics	r2, r1
   2925e:	1c11      	adds	r1, r2, #0
   29260:	1c02      	adds	r2, r0, #0
   29262:	430a      	orrs	r2, r1
   29264:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   29266:	4b03      	ldr	r3, [pc, #12]	; (29274 <system_clock_source_osc8m_set_config+0x74>)
   29268:	68fa      	ldr	r2, [r7, #12]
   2926a:	621a      	str	r2, [r3, #32]
}
   2926c:	46c0      	nop			; (mov r8, r8)
   2926e:	46bd      	mov	sp, r7
   29270:	b004      	add	sp, #16
   29272:	bd80      	pop	{r7, pc}
   29274:	40000800 	.word	0x40000800

00029278 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   29278:	b580      	push	{r7, lr}
   2927a:	b086      	sub	sp, #24
   2927c:	af00      	add	r7, sp, #0
   2927e:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   29280:	687b      	ldr	r3, [r7, #4]
   29282:	68db      	ldr	r3, [r3, #12]
   29284:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   29286:	687b      	ldr	r3, [r7, #4]
   29288:	7d1b      	ldrb	r3, [r3, #20]
   2928a:	2b01      	cmp	r3, #1
   2928c:	d10a      	bne.n	292a4 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   2928e:	687b      	ldr	r3, [r7, #4]
   29290:	8a1b      	ldrh	r3, [r3, #16]
   29292:	3301      	adds	r3, #1
   29294:	005b      	lsls	r3, r3, #1
   29296:	001a      	movs	r2, r3
   29298:	4b36      	ldr	r3, [pc, #216]	; (29374 <system_clock_source_dpll_set_config+0xfc>)
   2929a:	0011      	movs	r1, r2
   2929c:	6978      	ldr	r0, [r7, #20]
   2929e:	4798      	blx	r3
   292a0:	0003      	movs	r3, r0
   292a2:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   292a4:	687b      	ldr	r3, [r7, #4]
   292a6:	689b      	ldr	r3, [r3, #8]
   292a8:	011a      	lsls	r2, r3, #4
   292aa:	4b32      	ldr	r3, [pc, #200]	; (29374 <system_clock_source_dpll_set_config+0xfc>)
   292ac:	6979      	ldr	r1, [r7, #20]
   292ae:	0010      	movs	r0, r2
   292b0:	4798      	blx	r3
   292b2:	0003      	movs	r3, r0
   292b4:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   292b6:	693b      	ldr	r3, [r7, #16]
   292b8:	b2da      	uxtb	r2, r3
   292ba:	230f      	movs	r3, #15
   292bc:	18fb      	adds	r3, r7, r3
   292be:	210f      	movs	r1, #15
   292c0:	400a      	ands	r2, r1
   292c2:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   292c4:	693b      	ldr	r3, [r7, #16]
   292c6:	091b      	lsrs	r3, r3, #4
   292c8:	3b01      	subs	r3, #1
   292ca:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   292cc:	492a      	ldr	r1, [pc, #168]	; (29378 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   292ce:	687b      	ldr	r3, [r7, #4]
   292d0:	781b      	ldrb	r3, [r3, #0]
   292d2:	01db      	lsls	r3, r3, #7
   292d4:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   292d6:	687b      	ldr	r3, [r7, #4]
   292d8:	785b      	ldrb	r3, [r3, #1]
   292da:	019b      	lsls	r3, r3, #6
   292dc:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   292de:	4313      	orrs	r3, r2
   292e0:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   292e2:	2344      	movs	r3, #68	; 0x44
   292e4:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   292e6:	4b24      	ldr	r3, [pc, #144]	; (29378 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   292e8:	220f      	movs	r2, #15
   292ea:	18ba      	adds	r2, r7, r2
   292ec:	7812      	ldrb	r2, [r2, #0]
   292ee:	0412      	lsls	r2, r2, #16
   292f0:	0011      	movs	r1, r2
   292f2:	22f0      	movs	r2, #240	; 0xf0
   292f4:	0312      	lsls	r2, r2, #12
   292f6:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   292f8:	693a      	ldr	r2, [r7, #16]
   292fa:	0512      	lsls	r2, r2, #20
   292fc:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   292fe:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   29300:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   29302:	4b1d      	ldr	r3, [pc, #116]	; (29378 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   29304:	687a      	ldr	r2, [r7, #4]
   29306:	8a12      	ldrh	r2, [r2, #16]
   29308:	0412      	lsls	r2, r2, #16
   2930a:	0011      	movs	r1, r2
   2930c:	4a1b      	ldr	r2, [pc, #108]	; (2937c <system_clock_source_dpll_set_config+0x104>)
   2930e:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   29310:	687a      	ldr	r2, [r7, #4]
   29312:	7892      	ldrb	r2, [r2, #2]
   29314:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   29316:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   29318:	687a      	ldr	r2, [r7, #4]
   2931a:	7cd2      	ldrb	r2, [r2, #19]
   2931c:	0212      	lsls	r2, r2, #8
   2931e:	0010      	movs	r0, r2
   29320:	22e0      	movs	r2, #224	; 0xe0
   29322:	00d2      	lsls	r2, r2, #3
   29324:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   29326:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   29328:	687a      	ldr	r2, [r7, #4]
   2932a:	7d12      	ldrb	r2, [r2, #20]
   2932c:	0112      	lsls	r2, r2, #4
   2932e:	0010      	movs	r0, r2
   29330:	2230      	movs	r2, #48	; 0x30
   29332:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   29334:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   29336:	687a      	ldr	r2, [r7, #4]
   29338:	78d2      	ldrb	r2, [r2, #3]
   2933a:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2933c:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2933e:	687a      	ldr	r2, [r7, #4]
   29340:	7912      	ldrb	r2, [r2, #4]
   29342:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   29344:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   29346:	687a      	ldr	r2, [r7, #4]
   29348:	7c92      	ldrb	r2, [r2, #18]
   2934a:	0010      	movs	r0, r2
   2934c:	2203      	movs	r2, #3
   2934e:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   29350:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   29352:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   29354:	693b      	ldr	r3, [r7, #16]
   29356:	3301      	adds	r3, #1
   29358:	011a      	lsls	r2, r3, #4
   2935a:	230f      	movs	r3, #15
   2935c:	18fb      	adds	r3, r7, r3
   2935e:	781b      	ldrb	r3, [r3, #0]
   29360:	18d3      	adds	r3, r2, r3
   29362:	697a      	ldr	r2, [r7, #20]
   29364:	4353      	muls	r3, r2
   29366:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   29368:	4b05      	ldr	r3, [pc, #20]	; (29380 <system_clock_source_dpll_set_config+0x108>)
   2936a:	60da      	str	r2, [r3, #12]
}
   2936c:	46c0      	nop			; (mov r8, r8)
   2936e:	46bd      	mov	sp, r7
   29370:	b006      	add	sp, #24
   29372:	bd80      	pop	{r7, pc}
   29374:	00032655 	.word	0x00032655
   29378:	40000800 	.word	0x40000800
   2937c:	07ff0000 	.word	0x07ff0000
   29380:	2000415c 	.word	0x2000415c

00029384 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   29384:	b580      	push	{r7, lr}
   29386:	b082      	sub	sp, #8
   29388:	af00      	add	r7, sp, #0
   2938a:	0002      	movs	r2, r0
   2938c:	1dfb      	adds	r3, r7, #7
   2938e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   29390:	1dfb      	adds	r3, r7, #7
   29392:	781b      	ldrb	r3, [r3, #0]
   29394:	2b08      	cmp	r3, #8
   29396:	d83b      	bhi.n	29410 <system_clock_source_enable+0x8c>
   29398:	009a      	lsls	r2, r3, #2
   2939a:	4b21      	ldr	r3, [pc, #132]	; (29420 <system_clock_source_enable+0x9c>)
   2939c:	18d3      	adds	r3, r2, r3
   2939e:	681b      	ldr	r3, [r3, #0]
   293a0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   293a2:	4b20      	ldr	r3, [pc, #128]	; (29424 <system_clock_source_enable+0xa0>)
   293a4:	4a1f      	ldr	r2, [pc, #124]	; (29424 <system_clock_source_enable+0xa0>)
   293a6:	6a12      	ldr	r2, [r2, #32]
   293a8:	2102      	movs	r1, #2
   293aa:	430a      	orrs	r2, r1
   293ac:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   293ae:	2300      	movs	r3, #0
   293b0:	e031      	b.n	29416 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   293b2:	4b1c      	ldr	r3, [pc, #112]	; (29424 <system_clock_source_enable+0xa0>)
   293b4:	4a1b      	ldr	r2, [pc, #108]	; (29424 <system_clock_source_enable+0xa0>)
   293b6:	6992      	ldr	r2, [r2, #24]
   293b8:	2102      	movs	r1, #2
   293ba:	430a      	orrs	r2, r1
   293bc:	619a      	str	r2, [r3, #24]
		break;
   293be:	e029      	b.n	29414 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   293c0:	4a18      	ldr	r2, [pc, #96]	; (29424 <system_clock_source_enable+0xa0>)
   293c2:	4b18      	ldr	r3, [pc, #96]	; (29424 <system_clock_source_enable+0xa0>)
   293c4:	8a1b      	ldrh	r3, [r3, #16]
   293c6:	b29b      	uxth	r3, r3
   293c8:	2102      	movs	r1, #2
   293ca:	430b      	orrs	r3, r1
   293cc:	b29b      	uxth	r3, r3
   293ce:	8213      	strh	r3, [r2, #16]
		break;
   293d0:	e020      	b.n	29414 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   293d2:	4a14      	ldr	r2, [pc, #80]	; (29424 <system_clock_source_enable+0xa0>)
   293d4:	4b13      	ldr	r3, [pc, #76]	; (29424 <system_clock_source_enable+0xa0>)
   293d6:	8a9b      	ldrh	r3, [r3, #20]
   293d8:	b29b      	uxth	r3, r3
   293da:	2102      	movs	r1, #2
   293dc:	430b      	orrs	r3, r1
   293de:	b29b      	uxth	r3, r3
   293e0:	8293      	strh	r3, [r2, #20]
		break;
   293e2:	e017      	b.n	29414 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   293e4:	4b10      	ldr	r3, [pc, #64]	; (29428 <system_clock_source_enable+0xa4>)
   293e6:	681b      	ldr	r3, [r3, #0]
   293e8:	2202      	movs	r2, #2
   293ea:	431a      	orrs	r2, r3
   293ec:	4b0e      	ldr	r3, [pc, #56]	; (29428 <system_clock_source_enable+0xa4>)
   293ee:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   293f0:	4b0e      	ldr	r3, [pc, #56]	; (2942c <system_clock_source_enable+0xa8>)
   293f2:	4798      	blx	r3
		break;
   293f4:	e00e      	b.n	29414 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   293f6:	4a0b      	ldr	r2, [pc, #44]	; (29424 <system_clock_source_enable+0xa0>)
   293f8:	490a      	ldr	r1, [pc, #40]	; (29424 <system_clock_source_enable+0xa0>)
   293fa:	2344      	movs	r3, #68	; 0x44
   293fc:	5ccb      	ldrb	r3, [r1, r3]
   293fe:	b2db      	uxtb	r3, r3
   29400:	2102      	movs	r1, #2
   29402:	430b      	orrs	r3, r1
   29404:	b2d9      	uxtb	r1, r3
   29406:	2344      	movs	r3, #68	; 0x44
   29408:	54d1      	strb	r1, [r2, r3]
		break;
   2940a:	e003      	b.n	29414 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   2940c:	2300      	movs	r3, #0
   2940e:	e002      	b.n	29416 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   29410:	2317      	movs	r3, #23
   29412:	e000      	b.n	29416 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   29414:	2300      	movs	r3, #0
}
   29416:	0018      	movs	r0, r3
   29418:	46bd      	mov	sp, r7
   2941a:	b002      	add	sp, #8
   2941c:	bd80      	pop	{r7, pc}
   2941e:	46c0      	nop			; (mov r8, r8)
   29420:	00039184 	.word	0x00039184
   29424:	40000800 	.word	0x40000800
   29428:	2000415c 	.word	0x2000415c
   2942c:	000290fd 	.word	0x000290fd

00029430 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   29430:	b580      	push	{r7, lr}
   29432:	b084      	sub	sp, #16
   29434:	af00      	add	r7, sp, #0
   29436:	0002      	movs	r2, r0
   29438:	1dfb      	adds	r3, r7, #7
   2943a:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   2943c:	2300      	movs	r3, #0
   2943e:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   29440:	1dfb      	adds	r3, r7, #7
   29442:	781b      	ldrb	r3, [r3, #0]
   29444:	2b08      	cmp	r3, #8
   29446:	d821      	bhi.n	2948c <system_clock_source_is_ready+0x5c>
   29448:	009a      	lsls	r2, r3, #2
   2944a:	4b18      	ldr	r3, [pc, #96]	; (294ac <system_clock_source_is_ready+0x7c>)
   2944c:	18d3      	adds	r3, r2, r3
   2944e:	681b      	ldr	r3, [r3, #0]
   29450:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   29452:	2308      	movs	r3, #8
   29454:	60fb      	str	r3, [r7, #12]
		break;
   29456:	e01b      	b.n	29490 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   29458:	2304      	movs	r3, #4
   2945a:	60fb      	str	r3, [r7, #12]
		break;
   2945c:	e018      	b.n	29490 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   2945e:	2301      	movs	r3, #1
   29460:	60fb      	str	r3, [r7, #12]
		break;
   29462:	e015      	b.n	29490 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   29464:	2302      	movs	r3, #2
   29466:	60fb      	str	r3, [r7, #12]
		break;
   29468:	e012      	b.n	29490 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2946a:	2310      	movs	r3, #16
   2946c:	60fb      	str	r3, [r7, #12]
		}
		break;
   2946e:	e00f      	b.n	29490 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   29470:	4a0f      	ldr	r2, [pc, #60]	; (294b0 <system_clock_source_is_ready+0x80>)
   29472:	2350      	movs	r3, #80	; 0x50
   29474:	5cd3      	ldrb	r3, [r2, r3]
   29476:	b2db      	uxtb	r3, r3
   29478:	001a      	movs	r2, r3
   2947a:	2303      	movs	r3, #3
   2947c:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   2947e:	3b03      	subs	r3, #3
   29480:	425a      	negs	r2, r3
   29482:	4153      	adcs	r3, r2
   29484:	b2db      	uxtb	r3, r3
   29486:	e00c      	b.n	294a2 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   29488:	2301      	movs	r3, #1
   2948a:	e00a      	b.n	294a2 <system_clock_source_is_ready+0x72>

	default:
		return false;
   2948c:	2300      	movs	r3, #0
   2948e:	e008      	b.n	294a2 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   29490:	4b07      	ldr	r3, [pc, #28]	; (294b0 <system_clock_source_is_ready+0x80>)
   29492:	68db      	ldr	r3, [r3, #12]
   29494:	68fa      	ldr	r2, [r7, #12]
   29496:	401a      	ands	r2, r3
   29498:	68fb      	ldr	r3, [r7, #12]
   2949a:	1ad3      	subs	r3, r2, r3
   2949c:	425a      	negs	r2, r3
   2949e:	4153      	adcs	r3, r2
   294a0:	b2db      	uxtb	r3, r3
}
   294a2:	0018      	movs	r0, r3
   294a4:	46bd      	mov	sp, r7
   294a6:	b004      	add	sp, #16
   294a8:	bd80      	pop	{r7, pc}
   294aa:	46c0      	nop			; (mov r8, r8)
   294ac:	000391a8 	.word	0x000391a8
   294b0:	40000800 	.word	0x40000800

000294b4 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   294b4:	b580      	push	{r7, lr}
   294b6:	b082      	sub	sp, #8
   294b8:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   294ba:	003b      	movs	r3, r7
   294bc:	2203      	movs	r2, #3
   294be:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   294c0:	2300      	movs	r3, #0
   294c2:	607b      	str	r3, [r7, #4]
   294c4:	e009      	b.n	294da <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   294c6:	687b      	ldr	r3, [r7, #4]
   294c8:	b2db      	uxtb	r3, r3
   294ca:	003a      	movs	r2, r7
   294cc:	0011      	movs	r1, r2
   294ce:	0018      	movs	r0, r3
   294d0:	4b05      	ldr	r3, [pc, #20]	; (294e8 <_switch_peripheral_gclk+0x34>)
   294d2:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   294d4:	687b      	ldr	r3, [r7, #4]
   294d6:	3301      	adds	r3, #1
   294d8:	607b      	str	r3, [r7, #4]
   294da:	687b      	ldr	r3, [r7, #4]
   294dc:	2b24      	cmp	r3, #36	; 0x24
   294de:	d9f2      	bls.n	294c6 <_switch_peripheral_gclk+0x12>
	}
}
   294e0:	46c0      	nop			; (mov r8, r8)
   294e2:	46bd      	mov	sp, r7
   294e4:	b002      	add	sp, #8
   294e6:	bd80      	pop	{r7, pc}
   294e8:	00029ab9 	.word	0x00029ab9

000294ec <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   294ec:	b580      	push	{r7, lr}
   294ee:	b0a6      	sub	sp, #152	; 0x98
   294f0:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   294f2:	4b92      	ldr	r3, [pc, #584]	; (2973c <system_clock_init+0x250>)
   294f4:	22c2      	movs	r2, #194	; 0xc2
   294f6:	00d2      	lsls	r2, r2, #3
   294f8:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   294fa:	2003      	movs	r0, #3
   294fc:	4b90      	ldr	r3, [pc, #576]	; (29740 <system_clock_init+0x254>)
   294fe:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   29500:	4b90      	ldr	r3, [pc, #576]	; (29744 <system_clock_init+0x258>)
   29502:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   29504:	2394      	movs	r3, #148	; 0x94
   29506:	18fb      	adds	r3, r7, r3
   29508:	0018      	movs	r0, r3
   2950a:	4b8f      	ldr	r3, [pc, #572]	; (29748 <system_clock_init+0x25c>)
   2950c:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   2950e:	2394      	movs	r3, #148	; 0x94
   29510:	18fb      	adds	r3, r7, r3
   29512:	2200      	movs	r2, #0
   29514:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   29516:	2394      	movs	r3, #148	; 0x94
   29518:	18fb      	adds	r3, r7, r3
   2951a:	2201      	movs	r2, #1
   2951c:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   2951e:	2394      	movs	r3, #148	; 0x94
   29520:	18fb      	adds	r3, r7, r3
   29522:	2200      	movs	r2, #0
   29524:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   29526:	2394      	movs	r3, #148	; 0x94
   29528:	18fb      	adds	r3, r7, r3
   2952a:	0018      	movs	r0, r3
   2952c:	4b87      	ldr	r3, [pc, #540]	; (2974c <system_clock_init+0x260>)
   2952e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   29530:	2006      	movs	r0, #6
   29532:	4b87      	ldr	r3, [pc, #540]	; (29750 <system_clock_init+0x264>)
   29534:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   29536:	4b87      	ldr	r3, [pc, #540]	; (29754 <system_clock_init+0x268>)
   29538:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   2953a:	2360      	movs	r3, #96	; 0x60
   2953c:	18fb      	adds	r3, r7, r3
   2953e:	0018      	movs	r0, r3
   29540:	4b85      	ldr	r3, [pc, #532]	; (29758 <system_clock_init+0x26c>)
   29542:	4798      	blx	r3
   29544:	2360      	movs	r3, #96	; 0x60
   29546:	18fb      	adds	r3, r7, r3
   29548:	2206      	movs	r2, #6
   2954a:	701a      	strb	r2, [r3, #0]
   2954c:	2360      	movs	r3, #96	; 0x60
   2954e:	18fb      	adds	r3, r7, r3
   29550:	2208      	movs	r2, #8
   29552:	605a      	str	r2, [r3, #4]
   29554:	2360      	movs	r3, #96	; 0x60
   29556:	18fb      	adds	r3, r7, r3
   29558:	2200      	movs	r2, #0
   2955a:	721a      	strb	r2, [r3, #8]
   2955c:	2360      	movs	r3, #96	; 0x60
   2955e:	18fb      	adds	r3, r7, r3
   29560:	2200      	movs	r2, #0
   29562:	725a      	strb	r2, [r3, #9]
   29564:	2360      	movs	r3, #96	; 0x60
   29566:	18fb      	adds	r3, r7, r3
   29568:	0019      	movs	r1, r3
   2956a:	2001      	movs	r0, #1
   2956c:	4b7b      	ldr	r3, [pc, #492]	; (2975c <system_clock_init+0x270>)
   2956e:	4798      	blx	r3
   29570:	2001      	movs	r0, #1
   29572:	4b7b      	ldr	r3, [pc, #492]	; (29760 <system_clock_init+0x274>)
   29574:	4798      	blx	r3
   29576:	2354      	movs	r3, #84	; 0x54
   29578:	18fb      	adds	r3, r7, r3
   2957a:	0018      	movs	r0, r3
   2957c:	4b76      	ldr	r3, [pc, #472]	; (29758 <system_clock_init+0x26c>)
   2957e:	4798      	blx	r3
   29580:	2354      	movs	r3, #84	; 0x54
   29582:	18fb      	adds	r3, r7, r3
   29584:	2203      	movs	r2, #3
   29586:	701a      	strb	r2, [r3, #0]
   29588:	2354      	movs	r3, #84	; 0x54
   2958a:	18fb      	adds	r3, r7, r3
   2958c:	2201      	movs	r2, #1
   2958e:	605a      	str	r2, [r3, #4]
   29590:	2354      	movs	r3, #84	; 0x54
   29592:	18fb      	adds	r3, r7, r3
   29594:	2201      	movs	r2, #1
   29596:	721a      	strb	r2, [r3, #8]
   29598:	2354      	movs	r3, #84	; 0x54
   2959a:	18fb      	adds	r3, r7, r3
   2959c:	2200      	movs	r2, #0
   2959e:	725a      	strb	r2, [r3, #9]
   295a0:	2354      	movs	r3, #84	; 0x54
   295a2:	18fb      	adds	r3, r7, r3
   295a4:	0019      	movs	r1, r3
   295a6:	2002      	movs	r0, #2
   295a8:	4b6c      	ldr	r3, [pc, #432]	; (2975c <system_clock_init+0x270>)
   295aa:	4798      	blx	r3
   295ac:	2002      	movs	r0, #2
   295ae:	4b6c      	ldr	r3, [pc, #432]	; (29760 <system_clock_init+0x274>)
   295b0:	4798      	blx	r3
   295b2:	233c      	movs	r3, #60	; 0x3c
   295b4:	18fb      	adds	r3, r7, r3
   295b6:	0018      	movs	r0, r3
   295b8:	4b67      	ldr	r3, [pc, #412]	; (29758 <system_clock_init+0x26c>)
   295ba:	4798      	blx	r3
   295bc:	233c      	movs	r3, #60	; 0x3c
   295be:	18fb      	adds	r3, r7, r3
   295c0:	2203      	movs	r2, #3
   295c2:	701a      	strb	r2, [r3, #0]
   295c4:	233c      	movs	r3, #60	; 0x3c
   295c6:	18fb      	adds	r3, r7, r3
   295c8:	2220      	movs	r2, #32
   295ca:	605a      	str	r2, [r3, #4]
   295cc:	233c      	movs	r3, #60	; 0x3c
   295ce:	18fb      	adds	r3, r7, r3
   295d0:	2200      	movs	r2, #0
   295d2:	721a      	strb	r2, [r3, #8]
   295d4:	233c      	movs	r3, #60	; 0x3c
   295d6:	18fb      	adds	r3, r7, r3
   295d8:	2200      	movs	r2, #0
   295da:	725a      	strb	r2, [r3, #9]
   295dc:	233c      	movs	r3, #60	; 0x3c
   295de:	18fb      	adds	r3, r7, r3
   295e0:	0019      	movs	r1, r3
   295e2:	2004      	movs	r0, #4
   295e4:	4b5d      	ldr	r3, [pc, #372]	; (2975c <system_clock_init+0x270>)
   295e6:	4798      	blx	r3
   295e8:	2004      	movs	r0, #4
   295ea:	4b5d      	ldr	r3, [pc, #372]	; (29760 <system_clock_init+0x274>)
   295ec:	4798      	blx	r3
   295ee:	2330      	movs	r3, #48	; 0x30
   295f0:	18fb      	adds	r3, r7, r3
   295f2:	0018      	movs	r0, r3
   295f4:	4b58      	ldr	r3, [pc, #352]	; (29758 <system_clock_init+0x26c>)
   295f6:	4798      	blx	r3
   295f8:	2330      	movs	r3, #48	; 0x30
   295fa:	18fb      	adds	r3, r7, r3
   295fc:	2206      	movs	r2, #6
   295fe:	701a      	strb	r2, [r3, #0]
   29600:	2330      	movs	r3, #48	; 0x30
   29602:	18fb      	adds	r3, r7, r3
   29604:	2201      	movs	r2, #1
   29606:	605a      	str	r2, [r3, #4]
   29608:	2330      	movs	r3, #48	; 0x30
   2960a:	18fb      	adds	r3, r7, r3
   2960c:	2200      	movs	r2, #0
   2960e:	721a      	strb	r2, [r3, #8]
   29610:	2330      	movs	r3, #48	; 0x30
   29612:	18fb      	adds	r3, r7, r3
   29614:	2200      	movs	r2, #0
   29616:	725a      	strb	r2, [r3, #9]
   29618:	2330      	movs	r3, #48	; 0x30
   2961a:	18fb      	adds	r3, r7, r3
   2961c:	0019      	movs	r1, r3
   2961e:	2005      	movs	r0, #5
   29620:	4b4e      	ldr	r3, [pc, #312]	; (2975c <system_clock_init+0x270>)
   29622:	4798      	blx	r3
   29624:	2005      	movs	r0, #5
   29626:	4b4e      	ldr	r3, [pc, #312]	; (29760 <system_clock_init+0x274>)
   29628:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   2962a:	2390      	movs	r3, #144	; 0x90
   2962c:	18fb      	adds	r3, r7, r3
   2962e:	0018      	movs	r0, r3
   29630:	4b4c      	ldr	r3, [pc, #304]	; (29764 <system_clock_init+0x278>)
   29632:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   29634:	2390      	movs	r3, #144	; 0x90
   29636:	18fb      	adds	r3, r7, r3
   29638:	2201      	movs	r2, #1
   2963a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   2963c:	2390      	movs	r3, #144	; 0x90
   2963e:	18fb      	adds	r3, r7, r3
   29640:	0019      	movs	r1, r3
   29642:	2001      	movs	r0, #1
   29644:	4b48      	ldr	r3, [pc, #288]	; (29768 <system_clock_init+0x27c>)
   29646:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   29648:	2001      	movs	r0, #1
   2964a:	4b48      	ldr	r3, [pc, #288]	; (2976c <system_clock_init+0x280>)
   2964c:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   2964e:	2378      	movs	r3, #120	; 0x78
   29650:	18fb      	adds	r3, r7, r3
   29652:	0018      	movs	r0, r3
   29654:	4b46      	ldr	r3, [pc, #280]	; (29770 <system_clock_init+0x284>)
   29656:	4798      	blx	r3

	dpll_config.on_demand        = false;
   29658:	2378      	movs	r3, #120	; 0x78
   2965a:	18fb      	adds	r3, r7, r3
   2965c:	2200      	movs	r2, #0
   2965e:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   29660:	2378      	movs	r3, #120	; 0x78
   29662:	18fb      	adds	r3, r7, r3
   29664:	2200      	movs	r2, #0
   29666:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   29668:	2378      	movs	r3, #120	; 0x78
   2966a:	18fb      	adds	r3, r7, r3
   2966c:	2200      	movs	r2, #0
   2966e:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   29670:	2378      	movs	r3, #120	; 0x78
   29672:	18fb      	adds	r3, r7, r3
   29674:	2200      	movs	r2, #0
   29676:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   29678:	2378      	movs	r3, #120	; 0x78
   2967a:	18fb      	adds	r3, r7, r3
   2967c:	2200      	movs	r2, #0
   2967e:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   29680:	2378      	movs	r3, #120	; 0x78
   29682:	18fb      	adds	r3, r7, r3
   29684:	2200      	movs	r2, #0
   29686:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   29688:	2378      	movs	r3, #120	; 0x78
   2968a:	18fb      	adds	r3, r7, r3
   2968c:	2200      	movs	r2, #0
   2968e:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   29690:	2378      	movs	r3, #120	; 0x78
   29692:	18fb      	adds	r3, r7, r3
   29694:	2202      	movs	r2, #2
   29696:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   29698:	2378      	movs	r3, #120	; 0x78
   2969a:	18fb      	adds	r3, r7, r3
   2969c:	4a35      	ldr	r2, [pc, #212]	; (29774 <system_clock_init+0x288>)
   2969e:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   296a0:	2378      	movs	r3, #120	; 0x78
   296a2:	18fb      	adds	r3, r7, r3
   296a4:	2201      	movs	r2, #1
   296a6:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   296a8:	2378      	movs	r3, #120	; 0x78
   296aa:	18fb      	adds	r3, r7, r3
   296ac:	4a32      	ldr	r2, [pc, #200]	; (29778 <system_clock_init+0x28c>)
   296ae:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   296b0:	2378      	movs	r3, #120	; 0x78
   296b2:	18fb      	adds	r3, r7, r3
   296b4:	0018      	movs	r0, r3
   296b6:	4b31      	ldr	r3, [pc, #196]	; (2977c <system_clock_init+0x290>)
   296b8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   296ba:	2008      	movs	r0, #8
   296bc:	4b24      	ldr	r3, [pc, #144]	; (29750 <system_clock_init+0x264>)
   296be:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   296c0:	46c0      	nop			; (mov r8, r8)
   296c2:	2008      	movs	r0, #8
   296c4:	4b2e      	ldr	r3, [pc, #184]	; (29780 <system_clock_init+0x294>)
   296c6:	4798      	blx	r3
   296c8:	0003      	movs	r3, r0
   296ca:	001a      	movs	r2, r3
   296cc:	2301      	movs	r3, #1
   296ce:	4053      	eors	r3, r2
   296d0:	b2db      	uxtb	r3, r3
   296d2:	2b00      	cmp	r3, #0
   296d4:	d1f5      	bne.n	296c2 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   296d6:	4919      	ldr	r1, [pc, #100]	; (2973c <system_clock_init+0x250>)
   296d8:	2244      	movs	r2, #68	; 0x44
   296da:	5c8b      	ldrb	r3, [r1, r2]
   296dc:	2080      	movs	r0, #128	; 0x80
   296de:	4240      	negs	r0, r0
   296e0:	4303      	orrs	r3, r0
   296e2:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   296e4:	2000      	movs	r0, #0
   296e6:	4b27      	ldr	r3, [pc, #156]	; (29784 <system_clock_init+0x298>)
   296e8:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   296ea:	2100      	movs	r1, #0
   296ec:	2000      	movs	r0, #0
   296ee:	4b26      	ldr	r3, [pc, #152]	; (29788 <system_clock_init+0x29c>)
   296f0:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   296f2:	2100      	movs	r1, #0
   296f4:	2001      	movs	r0, #1
   296f6:	4b24      	ldr	r3, [pc, #144]	; (29788 <system_clock_init+0x29c>)
   296f8:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   296fa:	2100      	movs	r1, #0
   296fc:	2002      	movs	r0, #2
   296fe:	4b22      	ldr	r3, [pc, #136]	; (29788 <system_clock_init+0x29c>)
   29700:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   29702:	003b      	movs	r3, r7
   29704:	0018      	movs	r0, r3
   29706:	4b14      	ldr	r3, [pc, #80]	; (29758 <system_clock_init+0x26c>)
   29708:	4798      	blx	r3
   2970a:	003b      	movs	r3, r7
   2970c:	2208      	movs	r2, #8
   2970e:	701a      	strb	r2, [r3, #0]
   29710:	003b      	movs	r3, r7
   29712:	2201      	movs	r2, #1
   29714:	605a      	str	r2, [r3, #4]
   29716:	003b      	movs	r3, r7
   29718:	2200      	movs	r2, #0
   2971a:	721a      	strb	r2, [r3, #8]
   2971c:	003b      	movs	r3, r7
   2971e:	2201      	movs	r2, #1
   29720:	725a      	strb	r2, [r3, #9]
   29722:	003b      	movs	r3, r7
   29724:	0019      	movs	r1, r3
   29726:	2000      	movs	r0, #0
   29728:	4b0c      	ldr	r3, [pc, #48]	; (2975c <system_clock_init+0x270>)
   2972a:	4798      	blx	r3
   2972c:	2000      	movs	r0, #0
   2972e:	4b0c      	ldr	r3, [pc, #48]	; (29760 <system_clock_init+0x274>)
   29730:	4798      	blx	r3
#endif
}
   29732:	46c0      	nop			; (mov r8, r8)
   29734:	46bd      	mov	sp, r7
   29736:	b026      	add	sp, #152	; 0x98
   29738:	bd80      	pop	{r7, pc}
   2973a:	46c0      	nop			; (mov r8, r8)
   2973c:	40000800 	.word	0x40000800
   29740:	000290ad 	.word	0x000290ad
   29744:	000294b5 	.word	0x000294b5
   29748:	00028fbd 	.word	0x00028fbd
   2974c:	00029201 	.word	0x00029201
   29750:	00029385 	.word	0x00029385
   29754:	00029831 	.word	0x00029831
   29758:	00028f79 	.word	0x00028f79
   2975c:	00029861 	.word	0x00029861
   29760:	00029985 	.word	0x00029985
   29764:	00028fa7 	.word	0x00028fa7
   29768:	00029ab9 	.word	0x00029ab9
   2976c:	00029afd 	.word	0x00029afd
   29770:	00029055 	.word	0x00029055
   29774:	000f4240 	.word	0x000f4240
   29778:	02dc6c00 	.word	0x02dc6c00
   2977c:	00029279 	.word	0x00029279
   29780:	00029431 	.word	0x00029431
   29784:	00028fe1 	.word	0x00028fe1
   29788:	00029001 	.word	0x00029001

0002978c <system_apb_clock_set_mask>:
{
   2978c:	b580      	push	{r7, lr}
   2978e:	b082      	sub	sp, #8
   29790:	af00      	add	r7, sp, #0
   29792:	0002      	movs	r2, r0
   29794:	6039      	str	r1, [r7, #0]
   29796:	1dfb      	adds	r3, r7, #7
   29798:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2979a:	1dfb      	adds	r3, r7, #7
   2979c:	781b      	ldrb	r3, [r3, #0]
   2979e:	2b01      	cmp	r3, #1
   297a0:	d00a      	beq.n	297b8 <system_apb_clock_set_mask+0x2c>
   297a2:	2b02      	cmp	r3, #2
   297a4:	d00f      	beq.n	297c6 <system_apb_clock_set_mask+0x3a>
   297a6:	2b00      	cmp	r3, #0
   297a8:	d114      	bne.n	297d4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   297aa:	4b0e      	ldr	r3, [pc, #56]	; (297e4 <system_apb_clock_set_mask+0x58>)
   297ac:	4a0d      	ldr	r2, [pc, #52]	; (297e4 <system_apb_clock_set_mask+0x58>)
   297ae:	6991      	ldr	r1, [r2, #24]
   297b0:	683a      	ldr	r2, [r7, #0]
   297b2:	430a      	orrs	r2, r1
   297b4:	619a      	str	r2, [r3, #24]
			break;
   297b6:	e00f      	b.n	297d8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   297b8:	4b0a      	ldr	r3, [pc, #40]	; (297e4 <system_apb_clock_set_mask+0x58>)
   297ba:	4a0a      	ldr	r2, [pc, #40]	; (297e4 <system_apb_clock_set_mask+0x58>)
   297bc:	69d1      	ldr	r1, [r2, #28]
   297be:	683a      	ldr	r2, [r7, #0]
   297c0:	430a      	orrs	r2, r1
   297c2:	61da      	str	r2, [r3, #28]
			break;
   297c4:	e008      	b.n	297d8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   297c6:	4b07      	ldr	r3, [pc, #28]	; (297e4 <system_apb_clock_set_mask+0x58>)
   297c8:	4a06      	ldr	r2, [pc, #24]	; (297e4 <system_apb_clock_set_mask+0x58>)
   297ca:	6a11      	ldr	r1, [r2, #32]
   297cc:	683a      	ldr	r2, [r7, #0]
   297ce:	430a      	orrs	r2, r1
   297d0:	621a      	str	r2, [r3, #32]
			break;
   297d2:	e001      	b.n	297d8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   297d4:	2317      	movs	r3, #23
   297d6:	e000      	b.n	297da <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   297d8:	2300      	movs	r3, #0
}
   297da:	0018      	movs	r0, r3
   297dc:	46bd      	mov	sp, r7
   297de:	b002      	add	sp, #8
   297e0:	bd80      	pop	{r7, pc}
   297e2:	46c0      	nop			; (mov r8, r8)
   297e4:	40000400 	.word	0x40000400

000297e8 <system_interrupt_enter_critical_section>:
{
   297e8:	b580      	push	{r7, lr}
   297ea:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   297ec:	4b02      	ldr	r3, [pc, #8]	; (297f8 <system_interrupt_enter_critical_section+0x10>)
   297ee:	4798      	blx	r3
}
   297f0:	46c0      	nop			; (mov r8, r8)
   297f2:	46bd      	mov	sp, r7
   297f4:	bd80      	pop	{r7, pc}
   297f6:	46c0      	nop			; (mov r8, r8)
   297f8:	00025e25 	.word	0x00025e25

000297fc <system_interrupt_leave_critical_section>:
{
   297fc:	b580      	push	{r7, lr}
   297fe:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   29800:	4b02      	ldr	r3, [pc, #8]	; (2980c <system_interrupt_leave_critical_section+0x10>)
   29802:	4798      	blx	r3
}
   29804:	46c0      	nop			; (mov r8, r8)
   29806:	46bd      	mov	sp, r7
   29808:	bd80      	pop	{r7, pc}
   2980a:	46c0      	nop			; (mov r8, r8)
   2980c:	00025e79 	.word	0x00025e79

00029810 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   29810:	b580      	push	{r7, lr}
   29812:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   29814:	4b05      	ldr	r3, [pc, #20]	; (2982c <system_gclk_is_syncing+0x1c>)
   29816:	785b      	ldrb	r3, [r3, #1]
   29818:	b2db      	uxtb	r3, r3
   2981a:	b25b      	sxtb	r3, r3
   2981c:	2b00      	cmp	r3, #0
   2981e:	da01      	bge.n	29824 <system_gclk_is_syncing+0x14>
		return true;
   29820:	2301      	movs	r3, #1
   29822:	e000      	b.n	29826 <system_gclk_is_syncing+0x16>
	}

	return false;
   29824:	2300      	movs	r3, #0
}
   29826:	0018      	movs	r0, r3
   29828:	46bd      	mov	sp, r7
   2982a:	bd80      	pop	{r7, pc}
   2982c:	40000c00 	.word	0x40000c00

00029830 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   29830:	b580      	push	{r7, lr}
   29832:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   29834:	2108      	movs	r1, #8
   29836:	2000      	movs	r0, #0
   29838:	4b07      	ldr	r3, [pc, #28]	; (29858 <system_gclk_init+0x28>)
   2983a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   2983c:	4b07      	ldr	r3, [pc, #28]	; (2985c <system_gclk_init+0x2c>)
   2983e:	2201      	movs	r2, #1
   29840:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   29842:	46c0      	nop			; (mov r8, r8)
   29844:	4b05      	ldr	r3, [pc, #20]	; (2985c <system_gclk_init+0x2c>)
   29846:	781b      	ldrb	r3, [r3, #0]
   29848:	b2db      	uxtb	r3, r3
   2984a:	001a      	movs	r2, r3
   2984c:	2301      	movs	r3, #1
   2984e:	4013      	ands	r3, r2
   29850:	d1f8      	bne.n	29844 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   29852:	46c0      	nop			; (mov r8, r8)
   29854:	46bd      	mov	sp, r7
   29856:	bd80      	pop	{r7, pc}
   29858:	0002978d 	.word	0x0002978d
   2985c:	40000c00 	.word	0x40000c00

00029860 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   29860:	b580      	push	{r7, lr}
   29862:	b086      	sub	sp, #24
   29864:	af00      	add	r7, sp, #0
   29866:	0002      	movs	r2, r0
   29868:	6039      	str	r1, [r7, #0]
   2986a:	1dfb      	adds	r3, r7, #7
   2986c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2986e:	1dfb      	adds	r3, r7, #7
   29870:	781b      	ldrb	r3, [r3, #0]
   29872:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   29874:	1dfb      	adds	r3, r7, #7
   29876:	781b      	ldrb	r3, [r3, #0]
   29878:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2987a:	683b      	ldr	r3, [r7, #0]
   2987c:	781b      	ldrb	r3, [r3, #0]
   2987e:	021b      	lsls	r3, r3, #8
   29880:	001a      	movs	r2, r3
   29882:	697b      	ldr	r3, [r7, #20]
   29884:	4313      	orrs	r3, r2
   29886:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   29888:	683b      	ldr	r3, [r7, #0]
   2988a:	785b      	ldrb	r3, [r3, #1]
   2988c:	2b00      	cmp	r3, #0
   2988e:	d004      	beq.n	2989a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   29890:	697b      	ldr	r3, [r7, #20]
   29892:	2280      	movs	r2, #128	; 0x80
   29894:	02d2      	lsls	r2, r2, #11
   29896:	4313      	orrs	r3, r2
   29898:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2989a:	683b      	ldr	r3, [r7, #0]
   2989c:	7a5b      	ldrb	r3, [r3, #9]
   2989e:	2b00      	cmp	r3, #0
   298a0:	d004      	beq.n	298ac <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   298a2:	697b      	ldr	r3, [r7, #20]
   298a4:	2280      	movs	r2, #128	; 0x80
   298a6:	0312      	lsls	r2, r2, #12
   298a8:	4313      	orrs	r3, r2
   298aa:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   298ac:	683b      	ldr	r3, [r7, #0]
   298ae:	685b      	ldr	r3, [r3, #4]
   298b0:	2b01      	cmp	r3, #1
   298b2:	d92c      	bls.n	2990e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   298b4:	683b      	ldr	r3, [r7, #0]
   298b6:	685a      	ldr	r2, [r3, #4]
   298b8:	683b      	ldr	r3, [r7, #0]
   298ba:	685b      	ldr	r3, [r3, #4]
   298bc:	3b01      	subs	r3, #1
   298be:	4013      	ands	r3, r2
   298c0:	d11a      	bne.n	298f8 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   298c2:	2300      	movs	r3, #0
   298c4:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   298c6:	2302      	movs	r3, #2
   298c8:	60bb      	str	r3, [r7, #8]
   298ca:	e005      	b.n	298d8 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   298cc:	68fb      	ldr	r3, [r7, #12]
   298ce:	3301      	adds	r3, #1
   298d0:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   298d2:	68bb      	ldr	r3, [r7, #8]
   298d4:	005b      	lsls	r3, r3, #1
   298d6:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   298d8:	683b      	ldr	r3, [r7, #0]
   298da:	685a      	ldr	r2, [r3, #4]
   298dc:	68bb      	ldr	r3, [r7, #8]
   298de:	429a      	cmp	r2, r3
   298e0:	d8f4      	bhi.n	298cc <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   298e2:	68fb      	ldr	r3, [r7, #12]
   298e4:	021b      	lsls	r3, r3, #8
   298e6:	693a      	ldr	r2, [r7, #16]
   298e8:	4313      	orrs	r3, r2
   298ea:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   298ec:	697b      	ldr	r3, [r7, #20]
   298ee:	2280      	movs	r2, #128	; 0x80
   298f0:	0352      	lsls	r2, r2, #13
   298f2:	4313      	orrs	r3, r2
   298f4:	617b      	str	r3, [r7, #20]
   298f6:	e00a      	b.n	2990e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   298f8:	683b      	ldr	r3, [r7, #0]
   298fa:	685b      	ldr	r3, [r3, #4]
   298fc:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   298fe:	693a      	ldr	r2, [r7, #16]
   29900:	4313      	orrs	r3, r2
   29902:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   29904:	697b      	ldr	r3, [r7, #20]
   29906:	2280      	movs	r2, #128	; 0x80
   29908:	0292      	lsls	r2, r2, #10
   2990a:	4313      	orrs	r3, r2
   2990c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2990e:	683b      	ldr	r3, [r7, #0]
   29910:	7a1b      	ldrb	r3, [r3, #8]
   29912:	2b00      	cmp	r3, #0
   29914:	d004      	beq.n	29920 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   29916:	697b      	ldr	r3, [r7, #20]
   29918:	2280      	movs	r2, #128	; 0x80
   2991a:	0392      	lsls	r2, r2, #14
   2991c:	4313      	orrs	r3, r2
   2991e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   29920:	46c0      	nop			; (mov r8, r8)
   29922:	4b13      	ldr	r3, [pc, #76]	; (29970 <system_gclk_gen_set_config+0x110>)
   29924:	4798      	blx	r3
   29926:	1e03      	subs	r3, r0, #0
   29928:	d1fb      	bne.n	29922 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2992a:	4b12      	ldr	r3, [pc, #72]	; (29974 <system_gclk_gen_set_config+0x114>)
   2992c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2992e:	4a12      	ldr	r2, [pc, #72]	; (29978 <system_gclk_gen_set_config+0x118>)
   29930:	1dfb      	adds	r3, r7, #7
   29932:	781b      	ldrb	r3, [r3, #0]
   29934:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   29936:	46c0      	nop			; (mov r8, r8)
   29938:	4b0d      	ldr	r3, [pc, #52]	; (29970 <system_gclk_gen_set_config+0x110>)
   2993a:	4798      	blx	r3
   2993c:	1e03      	subs	r3, r0, #0
   2993e:	d1fb      	bne.n	29938 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   29940:	4b0e      	ldr	r3, [pc, #56]	; (2997c <system_gclk_gen_set_config+0x11c>)
   29942:	693a      	ldr	r2, [r7, #16]
   29944:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   29946:	46c0      	nop			; (mov r8, r8)
   29948:	4b09      	ldr	r3, [pc, #36]	; (29970 <system_gclk_gen_set_config+0x110>)
   2994a:	4798      	blx	r3
   2994c:	1e03      	subs	r3, r0, #0
   2994e:	d1fb      	bne.n	29948 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   29950:	4b0a      	ldr	r3, [pc, #40]	; (2997c <system_gclk_gen_set_config+0x11c>)
   29952:	4a0a      	ldr	r2, [pc, #40]	; (2997c <system_gclk_gen_set_config+0x11c>)
   29954:	6851      	ldr	r1, [r2, #4]
   29956:	2280      	movs	r2, #128	; 0x80
   29958:	0252      	lsls	r2, r2, #9
   2995a:	4011      	ands	r1, r2
   2995c:	697a      	ldr	r2, [r7, #20]
   2995e:	430a      	orrs	r2, r1
   29960:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   29962:	4b07      	ldr	r3, [pc, #28]	; (29980 <system_gclk_gen_set_config+0x120>)
   29964:	4798      	blx	r3
}
   29966:	46c0      	nop			; (mov r8, r8)
   29968:	46bd      	mov	sp, r7
   2996a:	b006      	add	sp, #24
   2996c:	bd80      	pop	{r7, pc}
   2996e:	46c0      	nop			; (mov r8, r8)
   29970:	00029811 	.word	0x00029811
   29974:	000297e9 	.word	0x000297e9
   29978:	40000c08 	.word	0x40000c08
   2997c:	40000c00 	.word	0x40000c00
   29980:	000297fd 	.word	0x000297fd

00029984 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   29984:	b580      	push	{r7, lr}
   29986:	b082      	sub	sp, #8
   29988:	af00      	add	r7, sp, #0
   2998a:	0002      	movs	r2, r0
   2998c:	1dfb      	adds	r3, r7, #7
   2998e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   29990:	46c0      	nop			; (mov r8, r8)
   29992:	4b0e      	ldr	r3, [pc, #56]	; (299cc <system_gclk_gen_enable+0x48>)
   29994:	4798      	blx	r3
   29996:	1e03      	subs	r3, r0, #0
   29998:	d1fb      	bne.n	29992 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2999a:	4b0d      	ldr	r3, [pc, #52]	; (299d0 <system_gclk_gen_enable+0x4c>)
   2999c:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2999e:	4a0d      	ldr	r2, [pc, #52]	; (299d4 <system_gclk_gen_enable+0x50>)
   299a0:	1dfb      	adds	r3, r7, #7
   299a2:	781b      	ldrb	r3, [r3, #0]
   299a4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   299a6:	46c0      	nop			; (mov r8, r8)
   299a8:	4b08      	ldr	r3, [pc, #32]	; (299cc <system_gclk_gen_enable+0x48>)
   299aa:	4798      	blx	r3
   299ac:	1e03      	subs	r3, r0, #0
   299ae:	d1fb      	bne.n	299a8 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   299b0:	4b09      	ldr	r3, [pc, #36]	; (299d8 <system_gclk_gen_enable+0x54>)
   299b2:	4a09      	ldr	r2, [pc, #36]	; (299d8 <system_gclk_gen_enable+0x54>)
   299b4:	6852      	ldr	r2, [r2, #4]
   299b6:	2180      	movs	r1, #128	; 0x80
   299b8:	0249      	lsls	r1, r1, #9
   299ba:	430a      	orrs	r2, r1
   299bc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   299be:	4b07      	ldr	r3, [pc, #28]	; (299dc <system_gclk_gen_enable+0x58>)
   299c0:	4798      	blx	r3
}
   299c2:	46c0      	nop			; (mov r8, r8)
   299c4:	46bd      	mov	sp, r7
   299c6:	b002      	add	sp, #8
   299c8:	bd80      	pop	{r7, pc}
   299ca:	46c0      	nop			; (mov r8, r8)
   299cc:	00029811 	.word	0x00029811
   299d0:	000297e9 	.word	0x000297e9
   299d4:	40000c04 	.word	0x40000c04
   299d8:	40000c00 	.word	0x40000c00
   299dc:	000297fd 	.word	0x000297fd

000299e0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   299e0:	b580      	push	{r7, lr}
   299e2:	b086      	sub	sp, #24
   299e4:	af00      	add	r7, sp, #0
   299e6:	0002      	movs	r2, r0
   299e8:	1dfb      	adds	r3, r7, #7
   299ea:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   299ec:	46c0      	nop			; (mov r8, r8)
   299ee:	4b2a      	ldr	r3, [pc, #168]	; (29a98 <system_gclk_gen_get_hz+0xb8>)
   299f0:	4798      	blx	r3
   299f2:	1e03      	subs	r3, r0, #0
   299f4:	d1fb      	bne.n	299ee <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   299f6:	4b29      	ldr	r3, [pc, #164]	; (29a9c <system_gclk_gen_get_hz+0xbc>)
   299f8:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   299fa:	4a29      	ldr	r2, [pc, #164]	; (29aa0 <system_gclk_gen_get_hz+0xc0>)
   299fc:	1dfb      	adds	r3, r7, #7
   299fe:	781b      	ldrb	r3, [r3, #0]
   29a00:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29a02:	46c0      	nop			; (mov r8, r8)
   29a04:	4b24      	ldr	r3, [pc, #144]	; (29a98 <system_gclk_gen_get_hz+0xb8>)
   29a06:	4798      	blx	r3
   29a08:	1e03      	subs	r3, r0, #0
   29a0a:	d1fb      	bne.n	29a04 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   29a0c:	4b25      	ldr	r3, [pc, #148]	; (29aa4 <system_gclk_gen_get_hz+0xc4>)
   29a0e:	685b      	ldr	r3, [r3, #4]
   29a10:	04db      	lsls	r3, r3, #19
   29a12:	0edb      	lsrs	r3, r3, #27
   29a14:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   29a16:	0018      	movs	r0, r3
   29a18:	4b23      	ldr	r3, [pc, #140]	; (29aa8 <system_gclk_gen_get_hz+0xc8>)
   29a1a:	4798      	blx	r3
   29a1c:	0003      	movs	r3, r0
   29a1e:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   29a20:	4a1f      	ldr	r2, [pc, #124]	; (29aa0 <system_gclk_gen_get_hz+0xc0>)
   29a22:	1dfb      	adds	r3, r7, #7
   29a24:	781b      	ldrb	r3, [r3, #0]
   29a26:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   29a28:	4b1e      	ldr	r3, [pc, #120]	; (29aa4 <system_gclk_gen_get_hz+0xc4>)
   29a2a:	685b      	ldr	r3, [r3, #4]
   29a2c:	02db      	lsls	r3, r3, #11
   29a2e:	0fdb      	lsrs	r3, r3, #31
   29a30:	b2da      	uxtb	r2, r3
   29a32:	2313      	movs	r3, #19
   29a34:	18fb      	adds	r3, r7, r3
   29a36:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   29a38:	4a1c      	ldr	r2, [pc, #112]	; (29aac <system_gclk_gen_get_hz+0xcc>)
   29a3a:	1dfb      	adds	r3, r7, #7
   29a3c:	781b      	ldrb	r3, [r3, #0]
   29a3e:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29a40:	46c0      	nop			; (mov r8, r8)
   29a42:	4b15      	ldr	r3, [pc, #84]	; (29a98 <system_gclk_gen_get_hz+0xb8>)
   29a44:	4798      	blx	r3
   29a46:	1e03      	subs	r3, r0, #0
   29a48:	d1fb      	bne.n	29a42 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   29a4a:	4b16      	ldr	r3, [pc, #88]	; (29aa4 <system_gclk_gen_get_hz+0xc4>)
   29a4c:	689b      	ldr	r3, [r3, #8]
   29a4e:	021b      	lsls	r3, r3, #8
   29a50:	0c1b      	lsrs	r3, r3, #16
   29a52:	b29b      	uxth	r3, r3
   29a54:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   29a56:	4b16      	ldr	r3, [pc, #88]	; (29ab0 <system_gclk_gen_get_hz+0xd0>)
   29a58:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   29a5a:	2313      	movs	r3, #19
   29a5c:	18fb      	adds	r3, r7, r3
   29a5e:	781b      	ldrb	r3, [r3, #0]
   29a60:	2b00      	cmp	r3, #0
   29a62:	d109      	bne.n	29a78 <system_gclk_gen_get_hz+0x98>
   29a64:	68fb      	ldr	r3, [r7, #12]
   29a66:	2b01      	cmp	r3, #1
   29a68:	d906      	bls.n	29a78 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   29a6a:	4b12      	ldr	r3, [pc, #72]	; (29ab4 <system_gclk_gen_get_hz+0xd4>)
   29a6c:	68f9      	ldr	r1, [r7, #12]
   29a6e:	6978      	ldr	r0, [r7, #20]
   29a70:	4798      	blx	r3
   29a72:	0003      	movs	r3, r0
   29a74:	617b      	str	r3, [r7, #20]
   29a76:	e00a      	b.n	29a8e <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   29a78:	2313      	movs	r3, #19
   29a7a:	18fb      	adds	r3, r7, r3
   29a7c:	781b      	ldrb	r3, [r3, #0]
   29a7e:	2b00      	cmp	r3, #0
   29a80:	d005      	beq.n	29a8e <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   29a82:	68fb      	ldr	r3, [r7, #12]
   29a84:	3301      	adds	r3, #1
   29a86:	697a      	ldr	r2, [r7, #20]
   29a88:	40da      	lsrs	r2, r3
   29a8a:	0013      	movs	r3, r2
   29a8c:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   29a8e:	697b      	ldr	r3, [r7, #20]
}
   29a90:	0018      	movs	r0, r3
   29a92:	46bd      	mov	sp, r7
   29a94:	b006      	add	sp, #24
   29a96:	bd80      	pop	{r7, pc}
   29a98:	00029811 	.word	0x00029811
   29a9c:	000297e9 	.word	0x000297e9
   29aa0:	40000c04 	.word	0x40000c04
   29aa4:	40000c00 	.word	0x40000c00
   29aa8:	00029141 	.word	0x00029141
   29aac:	40000c08 	.word	0x40000c08
   29ab0:	000297fd 	.word	0x000297fd
   29ab4:	00032655 	.word	0x00032655

00029ab8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   29ab8:	b580      	push	{r7, lr}
   29aba:	b084      	sub	sp, #16
   29abc:	af00      	add	r7, sp, #0
   29abe:	0002      	movs	r2, r0
   29ac0:	6039      	str	r1, [r7, #0]
   29ac2:	1dfb      	adds	r3, r7, #7
   29ac4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   29ac6:	1dfb      	adds	r3, r7, #7
   29ac8:	781b      	ldrb	r3, [r3, #0]
   29aca:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   29acc:	683b      	ldr	r3, [r7, #0]
   29ace:	781b      	ldrb	r3, [r3, #0]
   29ad0:	021b      	lsls	r3, r3, #8
   29ad2:	001a      	movs	r2, r3
   29ad4:	68fb      	ldr	r3, [r7, #12]
   29ad6:	4313      	orrs	r3, r2
   29ad8:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   29ada:	1dfb      	adds	r3, r7, #7
   29adc:	781b      	ldrb	r3, [r3, #0]
   29ade:	0018      	movs	r0, r3
   29ae0:	4b04      	ldr	r3, [pc, #16]	; (29af4 <system_gclk_chan_set_config+0x3c>)
   29ae2:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   29ae4:	4b04      	ldr	r3, [pc, #16]	; (29af8 <system_gclk_chan_set_config+0x40>)
   29ae6:	68fa      	ldr	r2, [r7, #12]
   29ae8:	b292      	uxth	r2, r2
   29aea:	805a      	strh	r2, [r3, #2]
}
   29aec:	46c0      	nop			; (mov r8, r8)
   29aee:	46bd      	mov	sp, r7
   29af0:	b004      	add	sp, #16
   29af2:	bd80      	pop	{r7, pc}
   29af4:	00029b45 	.word	0x00029b45
   29af8:	40000c00 	.word	0x40000c00

00029afc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   29afc:	b580      	push	{r7, lr}
   29afe:	b082      	sub	sp, #8
   29b00:	af00      	add	r7, sp, #0
   29b02:	0002      	movs	r2, r0
   29b04:	1dfb      	adds	r3, r7, #7
   29b06:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   29b08:	4b0a      	ldr	r3, [pc, #40]	; (29b34 <system_gclk_chan_enable+0x38>)
   29b0a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   29b0c:	4a0a      	ldr	r2, [pc, #40]	; (29b38 <system_gclk_chan_enable+0x3c>)
   29b0e:	1dfb      	adds	r3, r7, #7
   29b10:	781b      	ldrb	r3, [r3, #0]
   29b12:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   29b14:	4909      	ldr	r1, [pc, #36]	; (29b3c <system_gclk_chan_enable+0x40>)
   29b16:	4b09      	ldr	r3, [pc, #36]	; (29b3c <system_gclk_chan_enable+0x40>)
   29b18:	885b      	ldrh	r3, [r3, #2]
   29b1a:	b29b      	uxth	r3, r3
   29b1c:	2280      	movs	r2, #128	; 0x80
   29b1e:	01d2      	lsls	r2, r2, #7
   29b20:	4313      	orrs	r3, r2
   29b22:	b29b      	uxth	r3, r3
   29b24:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   29b26:	4b06      	ldr	r3, [pc, #24]	; (29b40 <system_gclk_chan_enable+0x44>)
   29b28:	4798      	blx	r3
}
   29b2a:	46c0      	nop			; (mov r8, r8)
   29b2c:	46bd      	mov	sp, r7
   29b2e:	b002      	add	sp, #8
   29b30:	bd80      	pop	{r7, pc}
   29b32:	46c0      	nop			; (mov r8, r8)
   29b34:	000297e9 	.word	0x000297e9
   29b38:	40000c02 	.word	0x40000c02
   29b3c:	40000c00 	.word	0x40000c00
   29b40:	000297fd 	.word	0x000297fd

00029b44 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   29b44:	b580      	push	{r7, lr}
   29b46:	b084      	sub	sp, #16
   29b48:	af00      	add	r7, sp, #0
   29b4a:	0002      	movs	r2, r0
   29b4c:	1dfb      	adds	r3, r7, #7
   29b4e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   29b50:	4b1c      	ldr	r3, [pc, #112]	; (29bc4 <system_gclk_chan_disable+0x80>)
   29b52:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   29b54:	4a1c      	ldr	r2, [pc, #112]	; (29bc8 <system_gclk_chan_disable+0x84>)
   29b56:	1dfb      	adds	r3, r7, #7
   29b58:	781b      	ldrb	r3, [r3, #0]
   29b5a:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   29b5c:	4b1b      	ldr	r3, [pc, #108]	; (29bcc <system_gclk_chan_disable+0x88>)
   29b5e:	885b      	ldrh	r3, [r3, #2]
   29b60:	051b      	lsls	r3, r3, #20
   29b62:	0f1b      	lsrs	r3, r3, #28
   29b64:	b2db      	uxtb	r3, r3
   29b66:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   29b68:	4a18      	ldr	r2, [pc, #96]	; (29bcc <system_gclk_chan_disable+0x88>)
   29b6a:	8853      	ldrh	r3, [r2, #2]
   29b6c:	4918      	ldr	r1, [pc, #96]	; (29bd0 <system_gclk_chan_disable+0x8c>)
   29b6e:	400b      	ands	r3, r1
   29b70:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   29b72:	4a16      	ldr	r2, [pc, #88]	; (29bcc <system_gclk_chan_disable+0x88>)
   29b74:	4b15      	ldr	r3, [pc, #84]	; (29bcc <system_gclk_chan_disable+0x88>)
   29b76:	885b      	ldrh	r3, [r3, #2]
   29b78:	b29b      	uxth	r3, r3
   29b7a:	4916      	ldr	r1, [pc, #88]	; (29bd4 <system_gclk_chan_disable+0x90>)
   29b7c:	400b      	ands	r3, r1
   29b7e:	b29b      	uxth	r3, r3
   29b80:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   29b82:	46c0      	nop			; (mov r8, r8)
   29b84:	4b11      	ldr	r3, [pc, #68]	; (29bcc <system_gclk_chan_disable+0x88>)
   29b86:	885b      	ldrh	r3, [r3, #2]
   29b88:	b29b      	uxth	r3, r3
   29b8a:	001a      	movs	r2, r3
   29b8c:	2380      	movs	r3, #128	; 0x80
   29b8e:	01db      	lsls	r3, r3, #7
   29b90:	4013      	ands	r3, r2
   29b92:	d1f7      	bne.n	29b84 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   29b94:	4a0d      	ldr	r2, [pc, #52]	; (29bcc <system_gclk_chan_disable+0x88>)
   29b96:	68fb      	ldr	r3, [r7, #12]
   29b98:	b2db      	uxtb	r3, r3
   29b9a:	1c19      	adds	r1, r3, #0
   29b9c:	230f      	movs	r3, #15
   29b9e:	400b      	ands	r3, r1
   29ba0:	b2d9      	uxtb	r1, r3
   29ba2:	8853      	ldrh	r3, [r2, #2]
   29ba4:	1c08      	adds	r0, r1, #0
   29ba6:	210f      	movs	r1, #15
   29ba8:	4001      	ands	r1, r0
   29baa:	0208      	lsls	r0, r1, #8
   29bac:	4908      	ldr	r1, [pc, #32]	; (29bd0 <system_gclk_chan_disable+0x8c>)
   29bae:	400b      	ands	r3, r1
   29bb0:	1c19      	adds	r1, r3, #0
   29bb2:	1c03      	adds	r3, r0, #0
   29bb4:	430b      	orrs	r3, r1
   29bb6:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   29bb8:	4b07      	ldr	r3, [pc, #28]	; (29bd8 <system_gclk_chan_disable+0x94>)
   29bba:	4798      	blx	r3
}
   29bbc:	46c0      	nop			; (mov r8, r8)
   29bbe:	46bd      	mov	sp, r7
   29bc0:	b004      	add	sp, #16
   29bc2:	bd80      	pop	{r7, pc}
   29bc4:	000297e9 	.word	0x000297e9
   29bc8:	40000c02 	.word	0x40000c02
   29bcc:	40000c00 	.word	0x40000c00
   29bd0:	fffff0ff 	.word	0xfffff0ff
   29bd4:	ffffbfff 	.word	0xffffbfff
   29bd8:	000297fd 	.word	0x000297fd

00029bdc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   29bdc:	b580      	push	{r7, lr}
   29bde:	b084      	sub	sp, #16
   29be0:	af00      	add	r7, sp, #0
   29be2:	0002      	movs	r2, r0
   29be4:	1dfb      	adds	r3, r7, #7
   29be6:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   29be8:	4b0d      	ldr	r3, [pc, #52]	; (29c20 <system_gclk_chan_get_hz+0x44>)
   29bea:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   29bec:	4a0d      	ldr	r2, [pc, #52]	; (29c24 <system_gclk_chan_get_hz+0x48>)
   29bee:	1dfb      	adds	r3, r7, #7
   29bf0:	781b      	ldrb	r3, [r3, #0]
   29bf2:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   29bf4:	4b0c      	ldr	r3, [pc, #48]	; (29c28 <system_gclk_chan_get_hz+0x4c>)
   29bf6:	885b      	ldrh	r3, [r3, #2]
   29bf8:	051b      	lsls	r3, r3, #20
   29bfa:	0f1b      	lsrs	r3, r3, #28
   29bfc:	b2da      	uxtb	r2, r3
   29bfe:	230f      	movs	r3, #15
   29c00:	18fb      	adds	r3, r7, r3
   29c02:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   29c04:	4b09      	ldr	r3, [pc, #36]	; (29c2c <system_gclk_chan_get_hz+0x50>)
   29c06:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   29c08:	230f      	movs	r3, #15
   29c0a:	18fb      	adds	r3, r7, r3
   29c0c:	781b      	ldrb	r3, [r3, #0]
   29c0e:	0018      	movs	r0, r3
   29c10:	4b07      	ldr	r3, [pc, #28]	; (29c30 <system_gclk_chan_get_hz+0x54>)
   29c12:	4798      	blx	r3
   29c14:	0003      	movs	r3, r0
}
   29c16:	0018      	movs	r0, r3
   29c18:	46bd      	mov	sp, r7
   29c1a:	b004      	add	sp, #16
   29c1c:	bd80      	pop	{r7, pc}
   29c1e:	46c0      	nop			; (mov r8, r8)
   29c20:	000297e9 	.word	0x000297e9
   29c24:	40000c02 	.word	0x40000c02
   29c28:	40000c00 	.word	0x40000c00
   29c2c:	000297fd 	.word	0x000297fd
   29c30:	000299e1 	.word	0x000299e1

00029c34 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   29c34:	b580      	push	{r7, lr}
   29c36:	b084      	sub	sp, #16
   29c38:	af00      	add	r7, sp, #0
   29c3a:	0002      	movs	r2, r0
   29c3c:	1dfb      	adds	r3, r7, #7
   29c3e:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   29c40:	230f      	movs	r3, #15
   29c42:	18fb      	adds	r3, r7, r3
   29c44:	2200      	movs	r2, #0
   29c46:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   29c48:	1dfb      	adds	r3, r7, #7
   29c4a:	781b      	ldrb	r3, [r3, #0]
   29c4c:	2b7f      	cmp	r3, #127	; 0x7f
   29c4e:	d80b      	bhi.n	29c68 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   29c50:	4a13      	ldr	r2, [pc, #76]	; (29ca0 <system_interrupt_clear_pending+0x6c>)
   29c52:	1dfb      	adds	r3, r7, #7
   29c54:	781b      	ldrb	r3, [r3, #0]
   29c56:	b25b      	sxtb	r3, r3
   29c58:	2101      	movs	r1, #1
   29c5a:	4099      	lsls	r1, r3
   29c5c:	000b      	movs	r3, r1
   29c5e:	0019      	movs	r1, r3
   29c60:	23c0      	movs	r3, #192	; 0xc0
   29c62:	005b      	lsls	r3, r3, #1
   29c64:	50d1      	str	r1, [r2, r3]
   29c66:	e014      	b.n	29c92 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   29c68:	1dfb      	adds	r3, r7, #7
   29c6a:	781b      	ldrb	r3, [r3, #0]
   29c6c:	b25b      	sxtb	r3, r3
   29c6e:	330e      	adds	r3, #14
   29c70:	d101      	bne.n	29c76 <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   29c72:	2317      	movs	r3, #23
   29c74:	e010      	b.n	29c98 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   29c76:	1dfb      	adds	r3, r7, #7
   29c78:	781b      	ldrb	r3, [r3, #0]
   29c7a:	b25b      	sxtb	r3, r3
   29c7c:	3301      	adds	r3, #1
   29c7e:	d104      	bne.n	29c8a <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   29c80:	4b08      	ldr	r3, [pc, #32]	; (29ca4 <system_interrupt_clear_pending+0x70>)
   29c82:	2280      	movs	r2, #128	; 0x80
   29c84:	0492      	lsls	r2, r2, #18
   29c86:	605a      	str	r2, [r3, #4]
   29c88:	e003      	b.n	29c92 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   29c8a:	230f      	movs	r3, #15
   29c8c:	18fb      	adds	r3, r7, r3
   29c8e:	2217      	movs	r2, #23
   29c90:	701a      	strb	r2, [r3, #0]
	}

	return status;
   29c92:	230f      	movs	r3, #15
   29c94:	18fb      	adds	r3, r7, r3
   29c96:	781b      	ldrb	r3, [r3, #0]
}
   29c98:	0018      	movs	r0, r3
   29c9a:	46bd      	mov	sp, r7
   29c9c:	b004      	add	sp, #16
   29c9e:	bd80      	pop	{r7, pc}
   29ca0:	e000e100 	.word	0xe000e100
   29ca4:	e000ed00 	.word	0xe000ed00

00029ca8 <system_pinmux_get_group_from_gpio_pin>:
{
   29ca8:	b580      	push	{r7, lr}
   29caa:	b084      	sub	sp, #16
   29cac:	af00      	add	r7, sp, #0
   29cae:	0002      	movs	r2, r0
   29cb0:	1dfb      	adds	r3, r7, #7
   29cb2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   29cb4:	230f      	movs	r3, #15
   29cb6:	18fb      	adds	r3, r7, r3
   29cb8:	1dfa      	adds	r2, r7, #7
   29cba:	7812      	ldrb	r2, [r2, #0]
   29cbc:	09d2      	lsrs	r2, r2, #7
   29cbe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   29cc0:	230e      	movs	r3, #14
   29cc2:	18fb      	adds	r3, r7, r3
   29cc4:	1dfa      	adds	r2, r7, #7
   29cc6:	7812      	ldrb	r2, [r2, #0]
   29cc8:	0952      	lsrs	r2, r2, #5
   29cca:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   29ccc:	4b0d      	ldr	r3, [pc, #52]	; (29d04 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   29cce:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   29cd0:	230f      	movs	r3, #15
   29cd2:	18fb      	adds	r3, r7, r3
   29cd4:	781b      	ldrb	r3, [r3, #0]
   29cd6:	2b00      	cmp	r3, #0
   29cd8:	d10f      	bne.n	29cfa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   29cda:	230f      	movs	r3, #15
   29cdc:	18fb      	adds	r3, r7, r3
   29cde:	781b      	ldrb	r3, [r3, #0]
   29ce0:	009b      	lsls	r3, r3, #2
   29ce2:	2210      	movs	r2, #16
   29ce4:	4694      	mov	ip, r2
   29ce6:	44bc      	add	ip, r7
   29ce8:	4463      	add	r3, ip
   29cea:	3b08      	subs	r3, #8
   29cec:	681a      	ldr	r2, [r3, #0]
   29cee:	230e      	movs	r3, #14
   29cf0:	18fb      	adds	r3, r7, r3
   29cf2:	781b      	ldrb	r3, [r3, #0]
   29cf4:	01db      	lsls	r3, r3, #7
   29cf6:	18d3      	adds	r3, r2, r3
   29cf8:	e000      	b.n	29cfc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   29cfa:	2300      	movs	r3, #0
}
   29cfc:	0018      	movs	r0, r3
   29cfe:	46bd      	mov	sp, r7
   29d00:	b004      	add	sp, #16
   29d02:	bd80      	pop	{r7, pc}
   29d04:	41004400 	.word	0x41004400

00029d08 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   29d08:	b580      	push	{r7, lr}
   29d0a:	b088      	sub	sp, #32
   29d0c:	af00      	add	r7, sp, #0
   29d0e:	60f8      	str	r0, [r7, #12]
   29d10:	60b9      	str	r1, [r7, #8]
   29d12:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   29d14:	2300      	movs	r3, #0
   29d16:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   29d18:	687b      	ldr	r3, [r7, #4]
   29d1a:	78db      	ldrb	r3, [r3, #3]
   29d1c:	2201      	movs	r2, #1
   29d1e:	4053      	eors	r3, r2
   29d20:	b2db      	uxtb	r3, r3
   29d22:	2b00      	cmp	r3, #0
   29d24:	d035      	beq.n	29d92 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   29d26:	687b      	ldr	r3, [r7, #4]
   29d28:	781b      	ldrb	r3, [r3, #0]
   29d2a:	2b80      	cmp	r3, #128	; 0x80
   29d2c:	d00b      	beq.n	29d46 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   29d2e:	69fb      	ldr	r3, [r7, #28]
   29d30:	2280      	movs	r2, #128	; 0x80
   29d32:	0252      	lsls	r2, r2, #9
   29d34:	4313      	orrs	r3, r2
   29d36:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   29d38:	687b      	ldr	r3, [r7, #4]
   29d3a:	781b      	ldrb	r3, [r3, #0]
   29d3c:	061b      	lsls	r3, r3, #24
   29d3e:	001a      	movs	r2, r3
   29d40:	69fb      	ldr	r3, [r7, #28]
   29d42:	4313      	orrs	r3, r2
   29d44:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   29d46:	687b      	ldr	r3, [r7, #4]
   29d48:	785b      	ldrb	r3, [r3, #1]
   29d4a:	2b00      	cmp	r3, #0
   29d4c:	d003      	beq.n	29d56 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29d4e:	687b      	ldr	r3, [r7, #4]
   29d50:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   29d52:	2b02      	cmp	r3, #2
   29d54:	d110      	bne.n	29d78 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   29d56:	69fb      	ldr	r3, [r7, #28]
   29d58:	2280      	movs	r2, #128	; 0x80
   29d5a:	0292      	lsls	r2, r2, #10
   29d5c:	4313      	orrs	r3, r2
   29d5e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   29d60:	687b      	ldr	r3, [r7, #4]
   29d62:	789b      	ldrb	r3, [r3, #2]
   29d64:	2b00      	cmp	r3, #0
   29d66:	d004      	beq.n	29d72 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   29d68:	69fb      	ldr	r3, [r7, #28]
   29d6a:	2280      	movs	r2, #128	; 0x80
   29d6c:	02d2      	lsls	r2, r2, #11
   29d6e:	4313      	orrs	r3, r2
   29d70:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   29d72:	68fb      	ldr	r3, [r7, #12]
   29d74:	68ba      	ldr	r2, [r7, #8]
   29d76:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29d78:	687b      	ldr	r3, [r7, #4]
   29d7a:	785b      	ldrb	r3, [r3, #1]
   29d7c:	2b01      	cmp	r3, #1
   29d7e:	d003      	beq.n	29d88 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29d80:	687b      	ldr	r3, [r7, #4]
   29d82:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29d84:	2b02      	cmp	r3, #2
   29d86:	d107      	bne.n	29d98 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   29d88:	69fb      	ldr	r3, [r7, #28]
   29d8a:	4a22      	ldr	r2, [pc, #136]	; (29e14 <_system_pinmux_config+0x10c>)
   29d8c:	4013      	ands	r3, r2
   29d8e:	61fb      	str	r3, [r7, #28]
   29d90:	e002      	b.n	29d98 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   29d92:	68fb      	ldr	r3, [r7, #12]
   29d94:	68ba      	ldr	r2, [r7, #8]
   29d96:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   29d98:	68bb      	ldr	r3, [r7, #8]
   29d9a:	041b      	lsls	r3, r3, #16
   29d9c:	0c1b      	lsrs	r3, r3, #16
   29d9e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   29da0:	68bb      	ldr	r3, [r7, #8]
   29da2:	0c1b      	lsrs	r3, r3, #16
   29da4:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29da6:	69ba      	ldr	r2, [r7, #24]
   29da8:	69fb      	ldr	r3, [r7, #28]
   29daa:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   29dac:	22a0      	movs	r2, #160	; 0xa0
   29dae:	05d2      	lsls	r2, r2, #23
   29db0:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29db2:	68fb      	ldr	r3, [r7, #12]
   29db4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29db6:	697a      	ldr	r2, [r7, #20]
   29db8:	69fb      	ldr	r3, [r7, #28]
   29dba:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   29dbc:	22d0      	movs	r2, #208	; 0xd0
   29dbe:	0612      	lsls	r2, r2, #24
   29dc0:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29dc2:	68fb      	ldr	r3, [r7, #12]
   29dc4:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   29dc6:	687b      	ldr	r3, [r7, #4]
   29dc8:	78db      	ldrb	r3, [r3, #3]
   29dca:	2201      	movs	r2, #1
   29dcc:	4053      	eors	r3, r2
   29dce:	b2db      	uxtb	r3, r3
   29dd0:	2b00      	cmp	r3, #0
   29dd2:	d01a      	beq.n	29e0a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   29dd4:	69fa      	ldr	r2, [r7, #28]
   29dd6:	2380      	movs	r3, #128	; 0x80
   29dd8:	02db      	lsls	r3, r3, #11
   29dda:	4013      	ands	r3, r2
   29ddc:	d00a      	beq.n	29df4 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   29dde:	687b      	ldr	r3, [r7, #4]
   29de0:	789b      	ldrb	r3, [r3, #2]
   29de2:	2b01      	cmp	r3, #1
   29de4:	d103      	bne.n	29dee <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   29de6:	68fb      	ldr	r3, [r7, #12]
   29de8:	68ba      	ldr	r2, [r7, #8]
   29dea:	619a      	str	r2, [r3, #24]
   29dec:	e002      	b.n	29df4 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   29dee:	68fb      	ldr	r3, [r7, #12]
   29df0:	68ba      	ldr	r2, [r7, #8]
   29df2:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29df4:	687b      	ldr	r3, [r7, #4]
   29df6:	785b      	ldrb	r3, [r3, #1]
   29df8:	2b01      	cmp	r3, #1
   29dfa:	d003      	beq.n	29e04 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29dfc:	687b      	ldr	r3, [r7, #4]
   29dfe:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29e00:	2b02      	cmp	r3, #2
   29e02:	d102      	bne.n	29e0a <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   29e04:	68fb      	ldr	r3, [r7, #12]
   29e06:	68ba      	ldr	r2, [r7, #8]
   29e08:	609a      	str	r2, [r3, #8]
		}
	}
}
   29e0a:	46c0      	nop			; (mov r8, r8)
   29e0c:	46bd      	mov	sp, r7
   29e0e:	b008      	add	sp, #32
   29e10:	bd80      	pop	{r7, pc}
   29e12:	46c0      	nop			; (mov r8, r8)
   29e14:	fffbffff 	.word	0xfffbffff

00029e18 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   29e18:	b580      	push	{r7, lr}
   29e1a:	b084      	sub	sp, #16
   29e1c:	af00      	add	r7, sp, #0
   29e1e:	0002      	movs	r2, r0
   29e20:	6039      	str	r1, [r7, #0]
   29e22:	1dfb      	adds	r3, r7, #7
   29e24:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   29e26:	1dfb      	adds	r3, r7, #7
   29e28:	781b      	ldrb	r3, [r3, #0]
   29e2a:	0018      	movs	r0, r3
   29e2c:	4b0a      	ldr	r3, [pc, #40]	; (29e58 <system_pinmux_pin_set_config+0x40>)
   29e2e:	4798      	blx	r3
   29e30:	0003      	movs	r3, r0
   29e32:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   29e34:	1dfb      	adds	r3, r7, #7
   29e36:	781b      	ldrb	r3, [r3, #0]
   29e38:	221f      	movs	r2, #31
   29e3a:	4013      	ands	r3, r2
   29e3c:	2201      	movs	r2, #1
   29e3e:	409a      	lsls	r2, r3
   29e40:	0013      	movs	r3, r2
   29e42:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   29e44:	683a      	ldr	r2, [r7, #0]
   29e46:	68b9      	ldr	r1, [r7, #8]
   29e48:	68fb      	ldr	r3, [r7, #12]
   29e4a:	0018      	movs	r0, r3
   29e4c:	4b03      	ldr	r3, [pc, #12]	; (29e5c <system_pinmux_pin_set_config+0x44>)
   29e4e:	4798      	blx	r3
}
   29e50:	46c0      	nop			; (mov r8, r8)
   29e52:	46bd      	mov	sp, r7
   29e54:	b004      	add	sp, #16
   29e56:	bd80      	pop	{r7, pc}
   29e58:	00029ca9 	.word	0x00029ca9
   29e5c:	00029d09 	.word	0x00029d09

00029e60 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   29e60:	b580      	push	{r7, lr}
   29e62:	af00      	add	r7, sp, #0
	return;
   29e64:	46c0      	nop			; (mov r8, r8)
}
   29e66:	46bd      	mov	sp, r7
   29e68:	bd80      	pop	{r7, pc}
	...

00029e6c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   29e6c:	b580      	push	{r7, lr}
   29e6e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   29e70:	4b06      	ldr	r3, [pc, #24]	; (29e8c <system_init+0x20>)
   29e72:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   29e74:	4b06      	ldr	r3, [pc, #24]	; (29e90 <system_init+0x24>)
   29e76:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   29e78:	4b06      	ldr	r3, [pc, #24]	; (29e94 <system_init+0x28>)
   29e7a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   29e7c:	4b06      	ldr	r3, [pc, #24]	; (29e98 <system_init+0x2c>)
   29e7e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   29e80:	4b06      	ldr	r3, [pc, #24]	; (29e9c <system_init+0x30>)
   29e82:	4798      	blx	r3
}
   29e84:	46c0      	nop			; (mov r8, r8)
   29e86:	46bd      	mov	sp, r7
   29e88:	bd80      	pop	{r7, pc}
   29e8a:	46c0      	nop			; (mov r8, r8)
   29e8c:	000294ed 	.word	0x000294ed
   29e90:	00025fb5 	.word	0x00025fb5
   29e94:	00012669 	.word	0x00012669
   29e98:	0002638d 	.word	0x0002638d
   29e9c:	00029e61 	.word	0x00029e61

00029ea0 <system_gclk_chan_get_config_defaults>:
{
   29ea0:	b580      	push	{r7, lr}
   29ea2:	b082      	sub	sp, #8
   29ea4:	af00      	add	r7, sp, #0
   29ea6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29ea8:	687b      	ldr	r3, [r7, #4]
   29eaa:	2200      	movs	r2, #0
   29eac:	701a      	strb	r2, [r3, #0]
}
   29eae:	46c0      	nop			; (mov r8, r8)
   29eb0:	46bd      	mov	sp, r7
   29eb2:	b002      	add	sp, #8
   29eb4:	bd80      	pop	{r7, pc}
	...

00029eb8 <system_apb_clock_set_mask>:
{
   29eb8:	b580      	push	{r7, lr}
   29eba:	b082      	sub	sp, #8
   29ebc:	af00      	add	r7, sp, #0
   29ebe:	0002      	movs	r2, r0
   29ec0:	6039      	str	r1, [r7, #0]
   29ec2:	1dfb      	adds	r3, r7, #7
   29ec4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29ec6:	1dfb      	adds	r3, r7, #7
   29ec8:	781b      	ldrb	r3, [r3, #0]
   29eca:	2b01      	cmp	r3, #1
   29ecc:	d00a      	beq.n	29ee4 <system_apb_clock_set_mask+0x2c>
   29ece:	2b02      	cmp	r3, #2
   29ed0:	d00f      	beq.n	29ef2 <system_apb_clock_set_mask+0x3a>
   29ed2:	2b00      	cmp	r3, #0
   29ed4:	d114      	bne.n	29f00 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   29ed6:	4b0e      	ldr	r3, [pc, #56]	; (29f10 <system_apb_clock_set_mask+0x58>)
   29ed8:	4a0d      	ldr	r2, [pc, #52]	; (29f10 <system_apb_clock_set_mask+0x58>)
   29eda:	6991      	ldr	r1, [r2, #24]
   29edc:	683a      	ldr	r2, [r7, #0]
   29ede:	430a      	orrs	r2, r1
   29ee0:	619a      	str	r2, [r3, #24]
			break;
   29ee2:	e00f      	b.n	29f04 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29ee4:	4b0a      	ldr	r3, [pc, #40]	; (29f10 <system_apb_clock_set_mask+0x58>)
   29ee6:	4a0a      	ldr	r2, [pc, #40]	; (29f10 <system_apb_clock_set_mask+0x58>)
   29ee8:	69d1      	ldr	r1, [r2, #28]
   29eea:	683a      	ldr	r2, [r7, #0]
   29eec:	430a      	orrs	r2, r1
   29eee:	61da      	str	r2, [r3, #28]
			break;
   29ef0:	e008      	b.n	29f04 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29ef2:	4b07      	ldr	r3, [pc, #28]	; (29f10 <system_apb_clock_set_mask+0x58>)
   29ef4:	4a06      	ldr	r2, [pc, #24]	; (29f10 <system_apb_clock_set_mask+0x58>)
   29ef6:	6a11      	ldr	r1, [r2, #32]
   29ef8:	683a      	ldr	r2, [r7, #0]
   29efa:	430a      	orrs	r2, r1
   29efc:	621a      	str	r2, [r3, #32]
			break;
   29efe:	e001      	b.n	29f04 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29f00:	2317      	movs	r3, #23
   29f02:	e000      	b.n	29f06 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29f04:	2300      	movs	r3, #0
}
   29f06:	0018      	movs	r0, r3
   29f08:	46bd      	mov	sp, r7
   29f0a:	b002      	add	sp, #8
   29f0c:	bd80      	pop	{r7, pc}
   29f0e:	46c0      	nop			; (mov r8, r8)
   29f10:	40000400 	.word	0x40000400

00029f14 <system_pinmux_get_config_defaults>:
{
   29f14:	b580      	push	{r7, lr}
   29f16:	b082      	sub	sp, #8
   29f18:	af00      	add	r7, sp, #0
   29f1a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   29f1c:	687b      	ldr	r3, [r7, #4]
   29f1e:	2280      	movs	r2, #128	; 0x80
   29f20:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29f22:	687b      	ldr	r3, [r7, #4]
   29f24:	2200      	movs	r2, #0
   29f26:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   29f28:	687b      	ldr	r3, [r7, #4]
   29f2a:	2201      	movs	r2, #1
   29f2c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   29f2e:	687b      	ldr	r3, [r7, #4]
   29f30:	2200      	movs	r2, #0
   29f32:	70da      	strb	r2, [r3, #3]
}
   29f34:	46c0      	nop			; (mov r8, r8)
   29f36:	46bd      	mov	sp, r7
   29f38:	b002      	add	sp, #8
   29f3a:	bd80      	pop	{r7, pc}

00029f3c <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   29f3c:	b580      	push	{r7, lr}
   29f3e:	b084      	sub	sp, #16
   29f40:	af00      	add	r7, sp, #0
   29f42:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   29f44:	2300      	movs	r3, #0
   29f46:	60fb      	str	r3, [r7, #12]
   29f48:	e00c      	b.n	29f64 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   29f4a:	4b0a      	ldr	r3, [pc, #40]	; (29f74 <_tcc_get_inst_index+0x38>)
   29f4c:	68fa      	ldr	r2, [r7, #12]
   29f4e:	0092      	lsls	r2, r2, #2
   29f50:	58d2      	ldr	r2, [r2, r3]
   29f52:	687b      	ldr	r3, [r7, #4]
   29f54:	429a      	cmp	r2, r3
   29f56:	d102      	bne.n	29f5e <_tcc_get_inst_index+0x22>
			return i;
   29f58:	68fb      	ldr	r3, [r7, #12]
   29f5a:	b2db      	uxtb	r3, r3
   29f5c:	e006      	b.n	29f6c <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   29f5e:	68fb      	ldr	r3, [r7, #12]
   29f60:	3301      	adds	r3, #1
   29f62:	60fb      	str	r3, [r7, #12]
   29f64:	68fb      	ldr	r3, [r7, #12]
   29f66:	2b02      	cmp	r3, #2
   29f68:	d9ef      	bls.n	29f4a <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   29f6a:	2300      	movs	r3, #0
}
   29f6c:	0018      	movs	r0, r3
   29f6e:	46bd      	mov	sp, r7
   29f70:	b004      	add	sp, #16
   29f72:	bd80      	pop	{r7, pc}
   29f74:	000391cc 	.word	0x000391cc

00029f78 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   29f78:	b590      	push	{r4, r7, lr}
   29f7a:	b085      	sub	sp, #20
   29f7c:	af00      	add	r7, sp, #0
   29f7e:	6078      	str	r0, [r7, #4]
   29f80:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   29f82:	230f      	movs	r3, #15
   29f84:	18fc      	adds	r4, r7, r3
   29f86:	683b      	ldr	r3, [r7, #0]
   29f88:	0018      	movs	r0, r3
   29f8a:	4bad      	ldr	r3, [pc, #692]	; (2a240 <tcc_get_config_defaults+0x2c8>)
   29f8c:	4798      	blx	r3
   29f8e:	0003      	movs	r3, r0
   29f90:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   29f92:	687b      	ldr	r3, [r7, #4]
   29f94:	2200      	movs	r2, #0
   29f96:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   29f98:	230f      	movs	r3, #15
   29f9a:	18fb      	adds	r3, r7, r3
   29f9c:	781a      	ldrb	r2, [r3, #0]
   29f9e:	4ba9      	ldr	r3, [pc, #676]	; (2a244 <tcc_get_config_defaults+0x2cc>)
   29fa0:	0092      	lsls	r2, r2, #2
   29fa2:	58d2      	ldr	r2, [r2, r3]
   29fa4:	687b      	ldr	r3, [r7, #4]
   29fa6:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   29fa8:	687b      	ldr	r3, [r7, #4]
   29faa:	2200      	movs	r2, #0
   29fac:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   29fae:	687b      	ldr	r3, [r7, #4]
   29fb0:	2200      	movs	r2, #0
   29fb2:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   29fb4:	687b      	ldr	r3, [r7, #4]
   29fb6:	2200      	movs	r2, #0
   29fb8:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   29fba:	687b      	ldr	r3, [r7, #4]
   29fbc:	2200      	movs	r2, #0
   29fbe:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   29fc0:	687b      	ldr	r3, [r7, #4]
   29fc2:	2200      	movs	r2, #0
   29fc4:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   29fc6:	687b      	ldr	r3, [r7, #4]
   29fc8:	2200      	movs	r2, #0
   29fca:	61da      	str	r2, [r3, #28]
   29fcc:	687b      	ldr	r3, [r7, #4]
   29fce:	2200      	movs	r2, #0
   29fd0:	621a      	str	r2, [r3, #32]
   29fd2:	687b      	ldr	r3, [r7, #4]
   29fd4:	2200      	movs	r2, #0
   29fd6:	625a      	str	r2, [r3, #36]	; 0x24
   29fd8:	687b      	ldr	r3, [r7, #4]
   29fda:	2200      	movs	r2, #0
   29fdc:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   29fde:	687b      	ldr	r3, [r7, #4]
   29fe0:	2200      	movs	r2, #0
   29fe2:	751a      	strb	r2, [r3, #20]
   29fe4:	687b      	ldr	r3, [r7, #4]
   29fe6:	2200      	movs	r2, #0
   29fe8:	755a      	strb	r2, [r3, #21]
   29fea:	687b      	ldr	r3, [r7, #4]
   29fec:	2200      	movs	r2, #0
   29fee:	759a      	strb	r2, [r3, #22]
   29ff0:	687b      	ldr	r3, [r7, #4]
   29ff2:	2200      	movs	r2, #0
   29ff4:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   29ff6:	687b      	ldr	r3, [r7, #4]
   29ff8:	2200      	movs	r2, #0
   29ffa:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   29ffc:	687b      	ldr	r3, [r7, #4]
   29ffe:	2200      	movs	r2, #0
   2a000:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a002:	687b      	ldr	r3, [r7, #4]
   2a004:	2200      	movs	r2, #0
   2a006:	741a      	strb	r2, [r3, #16]
   2a008:	687b      	ldr	r3, [r7, #4]
   2a00a:	2200      	movs	r2, #0
   2a00c:	745a      	strb	r2, [r3, #17]
   2a00e:	687b      	ldr	r3, [r7, #4]
   2a010:	2200      	movs	r2, #0
   2a012:	749a      	strb	r2, [r3, #18]
   2a014:	687b      	ldr	r3, [r7, #4]
   2a016:	2200      	movs	r2, #0
   2a018:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2a01a:	687b      	ldr	r3, [r7, #4]
   2a01c:	222c      	movs	r2, #44	; 0x2c
   2a01e:	2100      	movs	r1, #0
   2a020:	5499      	strb	r1, [r3, r2]
   2a022:	687b      	ldr	r3, [r7, #4]
   2a024:	222d      	movs	r2, #45	; 0x2d
   2a026:	2100      	movs	r1, #0
   2a028:	5499      	strb	r1, [r3, r2]
   2a02a:	687b      	ldr	r3, [r7, #4]
   2a02c:	222e      	movs	r2, #46	; 0x2e
   2a02e:	2100      	movs	r1, #0
   2a030:	5499      	strb	r1, [r3, r2]
   2a032:	687b      	ldr	r3, [r7, #4]
   2a034:	222f      	movs	r2, #47	; 0x2f
   2a036:	2100      	movs	r1, #0
   2a038:	5499      	strb	r1, [r3, r2]
   2a03a:	687b      	ldr	r3, [r7, #4]
   2a03c:	2230      	movs	r2, #48	; 0x30
   2a03e:	2100      	movs	r1, #0
   2a040:	5499      	strb	r1, [r3, r2]
   2a042:	687b      	ldr	r3, [r7, #4]
   2a044:	2231      	movs	r2, #49	; 0x31
   2a046:	2100      	movs	r1, #0
   2a048:	5499      	strb	r1, [r3, r2]
   2a04a:	687b      	ldr	r3, [r7, #4]
   2a04c:	2232      	movs	r2, #50	; 0x32
   2a04e:	2100      	movs	r1, #0
   2a050:	5499      	strb	r1, [r3, r2]
   2a052:	687b      	ldr	r3, [r7, #4]
   2a054:	2233      	movs	r2, #51	; 0x33
   2a056:	2100      	movs	r1, #0
   2a058:	5499      	strb	r1, [r3, r2]
   2a05a:	687b      	ldr	r3, [r7, #4]
   2a05c:	2234      	movs	r2, #52	; 0x34
   2a05e:	2100      	movs	r1, #0
   2a060:	5499      	strb	r1, [r3, r2]
   2a062:	687b      	ldr	r3, [r7, #4]
   2a064:	2235      	movs	r2, #53	; 0x35
   2a066:	2100      	movs	r1, #0
   2a068:	5499      	strb	r1, [r3, r2]
   2a06a:	687b      	ldr	r3, [r7, #4]
   2a06c:	2236      	movs	r2, #54	; 0x36
   2a06e:	2100      	movs	r1, #0
   2a070:	5499      	strb	r1, [r3, r2]
   2a072:	687b      	ldr	r3, [r7, #4]
   2a074:	2237      	movs	r2, #55	; 0x37
   2a076:	2100      	movs	r1, #0
   2a078:	5499      	strb	r1, [r3, r2]
   2a07a:	687b      	ldr	r3, [r7, #4]
   2a07c:	2238      	movs	r2, #56	; 0x38
   2a07e:	2100      	movs	r1, #0
   2a080:	5499      	strb	r1, [r3, r2]
   2a082:	687b      	ldr	r3, [r7, #4]
   2a084:	2239      	movs	r2, #57	; 0x39
   2a086:	2100      	movs	r1, #0
   2a088:	5499      	strb	r1, [r3, r2]
   2a08a:	687b      	ldr	r3, [r7, #4]
   2a08c:	223a      	movs	r2, #58	; 0x3a
   2a08e:	2100      	movs	r1, #0
   2a090:	5499      	strb	r1, [r3, r2]
   2a092:	687b      	ldr	r3, [r7, #4]
   2a094:	223b      	movs	r2, #59	; 0x3b
   2a096:	2100      	movs	r1, #0
   2a098:	5499      	strb	r1, [r3, r2]
   2a09a:	687b      	ldr	r3, [r7, #4]
   2a09c:	223c      	movs	r2, #60	; 0x3c
   2a09e:	2100      	movs	r1, #0
   2a0a0:	5499      	strb	r1, [r3, r2]
   2a0a2:	687b      	ldr	r3, [r7, #4]
   2a0a4:	223d      	movs	r2, #61	; 0x3d
   2a0a6:	2100      	movs	r1, #0
   2a0a8:	5499      	strb	r1, [r3, r2]
   2a0aa:	687b      	ldr	r3, [r7, #4]
   2a0ac:	223e      	movs	r2, #62	; 0x3e
   2a0ae:	2100      	movs	r1, #0
   2a0b0:	5499      	strb	r1, [r3, r2]
   2a0b2:	687b      	ldr	r3, [r7, #4]
   2a0b4:	223f      	movs	r2, #63	; 0x3f
   2a0b6:	2100      	movs	r1, #0
   2a0b8:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2a0ba:	687b      	ldr	r3, [r7, #4]
   2a0bc:	2240      	movs	r2, #64	; 0x40
   2a0be:	2100      	movs	r1, #0
   2a0c0:	5499      	strb	r1, [r3, r2]
   2a0c2:	687b      	ldr	r3, [r7, #4]
   2a0c4:	2241      	movs	r2, #65	; 0x41
   2a0c6:	2100      	movs	r1, #0
   2a0c8:	5499      	strb	r1, [r3, r2]
   2a0ca:	687b      	ldr	r3, [r7, #4]
   2a0cc:	2242      	movs	r2, #66	; 0x42
   2a0ce:	2100      	movs	r1, #0
   2a0d0:	5499      	strb	r1, [r3, r2]
   2a0d2:	687b      	ldr	r3, [r7, #4]
   2a0d4:	2243      	movs	r2, #67	; 0x43
   2a0d6:	2100      	movs	r1, #0
   2a0d8:	5499      	strb	r1, [r3, r2]
   2a0da:	687b      	ldr	r3, [r7, #4]
   2a0dc:	2244      	movs	r2, #68	; 0x44
   2a0de:	2100      	movs	r1, #0
   2a0e0:	5499      	strb	r1, [r3, r2]
   2a0e2:	687b      	ldr	r3, [r7, #4]
   2a0e4:	2245      	movs	r2, #69	; 0x45
   2a0e6:	2100      	movs	r1, #0
   2a0e8:	5499      	strb	r1, [r3, r2]
   2a0ea:	687b      	ldr	r3, [r7, #4]
   2a0ec:	2246      	movs	r2, #70	; 0x46
   2a0ee:	2100      	movs	r1, #0
   2a0f0:	5499      	strb	r1, [r3, r2]
   2a0f2:	687b      	ldr	r3, [r7, #4]
   2a0f4:	2247      	movs	r2, #71	; 0x47
   2a0f6:	2100      	movs	r1, #0
   2a0f8:	5499      	strb	r1, [r3, r2]
   2a0fa:	687b      	ldr	r3, [r7, #4]
   2a0fc:	2248      	movs	r2, #72	; 0x48
   2a0fe:	2100      	movs	r1, #0
   2a100:	5499      	strb	r1, [r3, r2]
   2a102:	687b      	ldr	r3, [r7, #4]
   2a104:	2249      	movs	r2, #73	; 0x49
   2a106:	2100      	movs	r1, #0
   2a108:	5499      	strb	r1, [r3, r2]
   2a10a:	687b      	ldr	r3, [r7, #4]
   2a10c:	224a      	movs	r2, #74	; 0x4a
   2a10e:	2100      	movs	r1, #0
   2a110:	5499      	strb	r1, [r3, r2]
   2a112:	687b      	ldr	r3, [r7, #4]
   2a114:	224b      	movs	r2, #75	; 0x4b
   2a116:	2100      	movs	r1, #0
   2a118:	5499      	strb	r1, [r3, r2]
   2a11a:	687b      	ldr	r3, [r7, #4]
   2a11c:	224c      	movs	r2, #76	; 0x4c
   2a11e:	2100      	movs	r1, #0
   2a120:	5499      	strb	r1, [r3, r2]
   2a122:	687b      	ldr	r3, [r7, #4]
   2a124:	224d      	movs	r2, #77	; 0x4d
   2a126:	2100      	movs	r1, #0
   2a128:	5499      	strb	r1, [r3, r2]
   2a12a:	687b      	ldr	r3, [r7, #4]
   2a12c:	224e      	movs	r2, #78	; 0x4e
   2a12e:	2100      	movs	r1, #0
   2a130:	5499      	strb	r1, [r3, r2]
   2a132:	687b      	ldr	r3, [r7, #4]
   2a134:	224f      	movs	r2, #79	; 0x4f
   2a136:	2100      	movs	r1, #0
   2a138:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2a13a:	687b      	ldr	r3, [r7, #4]
   2a13c:	2250      	movs	r2, #80	; 0x50
   2a13e:	2100      	movs	r1, #0
   2a140:	5499      	strb	r1, [r3, r2]
   2a142:	687b      	ldr	r3, [r7, #4]
   2a144:	2251      	movs	r2, #81	; 0x51
   2a146:	2100      	movs	r1, #0
   2a148:	5499      	strb	r1, [r3, r2]
   2a14a:	687b      	ldr	r3, [r7, #4]
   2a14c:	2252      	movs	r2, #82	; 0x52
   2a14e:	2100      	movs	r1, #0
   2a150:	5499      	strb	r1, [r3, r2]
   2a152:	687b      	ldr	r3, [r7, #4]
   2a154:	2253      	movs	r2, #83	; 0x53
   2a156:	2100      	movs	r1, #0
   2a158:	5499      	strb	r1, [r3, r2]
   2a15a:	687b      	ldr	r3, [r7, #4]
   2a15c:	2254      	movs	r2, #84	; 0x54
   2a15e:	2100      	movs	r1, #0
   2a160:	5499      	strb	r1, [r3, r2]
   2a162:	687b      	ldr	r3, [r7, #4]
   2a164:	2255      	movs	r2, #85	; 0x55
   2a166:	2100      	movs	r1, #0
   2a168:	5499      	strb	r1, [r3, r2]
   2a16a:	687b      	ldr	r3, [r7, #4]
   2a16c:	2256      	movs	r2, #86	; 0x56
   2a16e:	2100      	movs	r1, #0
   2a170:	5499      	strb	r1, [r3, r2]
   2a172:	687b      	ldr	r3, [r7, #4]
   2a174:	2257      	movs	r2, #87	; 0x57
   2a176:	2100      	movs	r1, #0
   2a178:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2a17a:	687b      	ldr	r3, [r7, #4]
   2a17c:	2298      	movs	r2, #152	; 0x98
   2a17e:	2100      	movs	r1, #0
   2a180:	5499      	strb	r1, [r3, r2]
   2a182:	687b      	ldr	r3, [r7, #4]
   2a184:	2200      	movs	r2, #0
   2a186:	659a      	str	r2, [r3, #88]	; 0x58
   2a188:	687b      	ldr	r3, [r7, #4]
   2a18a:	2200      	movs	r2, #0
   2a18c:	679a      	str	r2, [r3, #120]	; 0x78
   2a18e:	687b      	ldr	r3, [r7, #4]
   2a190:	2299      	movs	r2, #153	; 0x99
   2a192:	2100      	movs	r1, #0
   2a194:	5499      	strb	r1, [r3, r2]
   2a196:	687b      	ldr	r3, [r7, #4]
   2a198:	2200      	movs	r2, #0
   2a19a:	65da      	str	r2, [r3, #92]	; 0x5c
   2a19c:	687b      	ldr	r3, [r7, #4]
   2a19e:	2200      	movs	r2, #0
   2a1a0:	67da      	str	r2, [r3, #124]	; 0x7c
   2a1a2:	687b      	ldr	r3, [r7, #4]
   2a1a4:	229a      	movs	r2, #154	; 0x9a
   2a1a6:	2100      	movs	r1, #0
   2a1a8:	5499      	strb	r1, [r3, r2]
   2a1aa:	687b      	ldr	r3, [r7, #4]
   2a1ac:	2200      	movs	r2, #0
   2a1ae:	661a      	str	r2, [r3, #96]	; 0x60
   2a1b0:	687b      	ldr	r3, [r7, #4]
   2a1b2:	2280      	movs	r2, #128	; 0x80
   2a1b4:	2100      	movs	r1, #0
   2a1b6:	5099      	str	r1, [r3, r2]
   2a1b8:	687b      	ldr	r3, [r7, #4]
   2a1ba:	229b      	movs	r2, #155	; 0x9b
   2a1bc:	2100      	movs	r1, #0
   2a1be:	5499      	strb	r1, [r3, r2]
   2a1c0:	687b      	ldr	r3, [r7, #4]
   2a1c2:	2200      	movs	r2, #0
   2a1c4:	665a      	str	r2, [r3, #100]	; 0x64
   2a1c6:	687b      	ldr	r3, [r7, #4]
   2a1c8:	2284      	movs	r2, #132	; 0x84
   2a1ca:	2100      	movs	r1, #0
   2a1cc:	5099      	str	r1, [r3, r2]
   2a1ce:	687b      	ldr	r3, [r7, #4]
   2a1d0:	229c      	movs	r2, #156	; 0x9c
   2a1d2:	2100      	movs	r1, #0
   2a1d4:	5499      	strb	r1, [r3, r2]
   2a1d6:	687b      	ldr	r3, [r7, #4]
   2a1d8:	2200      	movs	r2, #0
   2a1da:	669a      	str	r2, [r3, #104]	; 0x68
   2a1dc:	687b      	ldr	r3, [r7, #4]
   2a1de:	2288      	movs	r2, #136	; 0x88
   2a1e0:	2100      	movs	r1, #0
   2a1e2:	5099      	str	r1, [r3, r2]
   2a1e4:	687b      	ldr	r3, [r7, #4]
   2a1e6:	229d      	movs	r2, #157	; 0x9d
   2a1e8:	2100      	movs	r1, #0
   2a1ea:	5499      	strb	r1, [r3, r2]
   2a1ec:	687b      	ldr	r3, [r7, #4]
   2a1ee:	2200      	movs	r2, #0
   2a1f0:	66da      	str	r2, [r3, #108]	; 0x6c
   2a1f2:	687b      	ldr	r3, [r7, #4]
   2a1f4:	228c      	movs	r2, #140	; 0x8c
   2a1f6:	2100      	movs	r1, #0
   2a1f8:	5099      	str	r1, [r3, r2]
   2a1fa:	687b      	ldr	r3, [r7, #4]
   2a1fc:	229e      	movs	r2, #158	; 0x9e
   2a1fe:	2100      	movs	r1, #0
   2a200:	5499      	strb	r1, [r3, r2]
   2a202:	687b      	ldr	r3, [r7, #4]
   2a204:	2200      	movs	r2, #0
   2a206:	671a      	str	r2, [r3, #112]	; 0x70
   2a208:	687b      	ldr	r3, [r7, #4]
   2a20a:	2290      	movs	r2, #144	; 0x90
   2a20c:	2100      	movs	r1, #0
   2a20e:	5099      	str	r1, [r3, r2]
   2a210:	687b      	ldr	r3, [r7, #4]
   2a212:	229f      	movs	r2, #159	; 0x9f
   2a214:	2100      	movs	r1, #0
   2a216:	5499      	strb	r1, [r3, r2]
   2a218:	687b      	ldr	r3, [r7, #4]
   2a21a:	2200      	movs	r2, #0
   2a21c:	675a      	str	r2, [r3, #116]	; 0x74
   2a21e:	687b      	ldr	r3, [r7, #4]
   2a220:	2294      	movs	r2, #148	; 0x94
   2a222:	2100      	movs	r1, #0
   2a224:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2a226:	687b      	ldr	r3, [r7, #4]
   2a228:	22a0      	movs	r2, #160	; 0xa0
   2a22a:	2101      	movs	r1, #1
   2a22c:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2a22e:	687b      	ldr	r3, [r7, #4]
   2a230:	22a1      	movs	r2, #161	; 0xa1
   2a232:	2100      	movs	r1, #0
   2a234:	5499      	strb	r1, [r3, r2]
}
   2a236:	46c0      	nop			; (mov r8, r8)
   2a238:	46bd      	mov	sp, r7
   2a23a:	b005      	add	sp, #20
   2a23c:	bd90      	pop	{r4, r7, pc}
   2a23e:	46c0      	nop			; (mov r8, r8)
   2a240:	00029f3d 	.word	0x00029f3d
   2a244:	000391e8 	.word	0x000391e8

0002a248 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a248:	b580      	push	{r7, lr}
   2a24a:	b086      	sub	sp, #24
   2a24c:	af00      	add	r7, sp, #0
   2a24e:	60b9      	str	r1, [r7, #8]
   2a250:	607a      	str	r2, [r7, #4]
   2a252:	230f      	movs	r3, #15
   2a254:	18fb      	adds	r3, r7, r3
   2a256:	1c02      	adds	r2, r0, #0
   2a258:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2a25a:	2300      	movs	r3, #0
   2a25c:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a25e:	2300      	movs	r3, #0
   2a260:	613b      	str	r3, [r7, #16]
   2a262:	e01d      	b.n	2a2a0 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2a264:	68ba      	ldr	r2, [r7, #8]
   2a266:	693b      	ldr	r3, [r7, #16]
   2a268:	18d3      	adds	r3, r2, r3
   2a26a:	3310      	adds	r3, #16
   2a26c:	781b      	ldrb	r3, [r3, #0]
   2a26e:	2b01      	cmp	r3, #1
   2a270:	d113      	bne.n	2a29a <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2a272:	230f      	movs	r3, #15
   2a274:	18fb      	adds	r3, r7, r3
   2a276:	781b      	ldrb	r3, [r3, #0]
   2a278:	4a1b      	ldr	r2, [pc, #108]	; (2a2e8 <_tcc_build_ctrla+0xa0>)
   2a27a:	5cd3      	ldrb	r3, [r2, r3]
   2a27c:	001a      	movs	r2, r3
   2a27e:	693b      	ldr	r3, [r7, #16]
   2a280:	429a      	cmp	r2, r3
   2a282:	da01      	bge.n	2a288 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2a284:	2317      	movs	r3, #23
   2a286:	e02a      	b.n	2a2de <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2a288:	2380      	movs	r3, #128	; 0x80
   2a28a:	045a      	lsls	r2, r3, #17
   2a28c:	693b      	ldr	r3, [r7, #16]
   2a28e:	409a      	lsls	r2, r3
   2a290:	0013      	movs	r3, r2
   2a292:	001a      	movs	r2, r3
   2a294:	697b      	ldr	r3, [r7, #20]
   2a296:	4313      	orrs	r3, r2
   2a298:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a29a:	693b      	ldr	r3, [r7, #16]
   2a29c:	3301      	adds	r3, #1
   2a29e:	613b      	str	r3, [r7, #16]
   2a2a0:	693b      	ldr	r3, [r7, #16]
   2a2a2:	2b03      	cmp	r3, #3
   2a2a4:	ddde      	ble.n	2a264 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2a2a6:	68bb      	ldr	r3, [r7, #8]
   2a2a8:	22a1      	movs	r2, #161	; 0xa1
   2a2aa:	5c9b      	ldrb	r3, [r3, r2]
   2a2ac:	2b00      	cmp	r3, #0
   2a2ae:	d004      	beq.n	2a2ba <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2a2b0:	697b      	ldr	r3, [r7, #20]
   2a2b2:	2280      	movs	r2, #128	; 0x80
   2a2b4:	0112      	lsls	r2, r2, #4
   2a2b6:	4313      	orrs	r3, r2
   2a2b8:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2a2ba:	68bb      	ldr	r3, [r7, #8]
   2a2bc:	7b1b      	ldrb	r3, [r3, #12]
   2a2be:	031b      	lsls	r3, r3, #12
   2a2c0:	001a      	movs	r2, r3
   2a2c2:	697b      	ldr	r3, [r7, #20]
   2a2c4:	4313      	orrs	r3, r2
   2a2c6:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2a2c8:	68bb      	ldr	r3, [r7, #8]
   2a2ca:	7adb      	ldrb	r3, [r3, #11]
   2a2cc:	021b      	lsls	r3, r3, #8
   2a2ce:	001a      	movs	r2, r3
   2a2d0:	697b      	ldr	r3, [r7, #20]
   2a2d2:	4313      	orrs	r3, r2
   2a2d4:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2a2d6:	687b      	ldr	r3, [r7, #4]
   2a2d8:	697a      	ldr	r2, [r7, #20]
   2a2da:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2a2dc:	2300      	movs	r3, #0
}
   2a2de:	0018      	movs	r0, r3
   2a2e0:	46bd      	mov	sp, r7
   2a2e2:	b006      	add	sp, #24
   2a2e4:	bd80      	pop	{r7, pc}
   2a2e6:	46c0      	nop			; (mov r8, r8)
   2a2e8:	000391f4 	.word	0x000391f4

0002a2ec <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2a2ec:	b580      	push	{r7, lr}
   2a2ee:	b086      	sub	sp, #24
   2a2f0:	af00      	add	r7, sp, #0
   2a2f2:	60b9      	str	r1, [r7, #8]
   2a2f4:	607a      	str	r2, [r7, #4]
   2a2f6:	230f      	movs	r3, #15
   2a2f8:	18fb      	adds	r3, r7, r3
   2a2fa:	1c02      	adds	r2, r0, #0
   2a2fc:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2a2fe:	2317      	movs	r3, #23
   2a300:	18fb      	adds	r3, r7, r3
   2a302:	2200      	movs	r2, #0
   2a304:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2a306:	68bb      	ldr	r3, [r7, #8]
   2a308:	7a1b      	ldrb	r3, [r3, #8]
   2a30a:	2b00      	cmp	r3, #0
   2a30c:	d007      	beq.n	2a31e <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2a30e:	2317      	movs	r3, #23
   2a310:	18fb      	adds	r3, r7, r3
   2a312:	2217      	movs	r2, #23
   2a314:	18ba      	adds	r2, r7, r2
   2a316:	7812      	ldrb	r2, [r2, #0]
   2a318:	2104      	movs	r1, #4
   2a31a:	430a      	orrs	r2, r1
   2a31c:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2a31e:	68bb      	ldr	r3, [r7, #8]
   2a320:	7a5b      	ldrb	r3, [r3, #9]
   2a322:	2b01      	cmp	r3, #1
   2a324:	d107      	bne.n	2a336 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2a326:	2317      	movs	r3, #23
   2a328:	18fb      	adds	r3, r7, r3
   2a32a:	2217      	movs	r2, #23
   2a32c:	18ba      	adds	r2, r7, r2
   2a32e:	7812      	ldrb	r2, [r2, #0]
   2a330:	2101      	movs	r1, #1
   2a332:	430a      	orrs	r2, r1
   2a334:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2a336:	687b      	ldr	r3, [r7, #4]
   2a338:	2217      	movs	r2, #23
   2a33a:	18ba      	adds	r2, r7, r2
   2a33c:	7812      	ldrb	r2, [r2, #0]
   2a33e:	701a      	strb	r2, [r3, #0]
}
   2a340:	46c0      	nop			; (mov r8, r8)
   2a342:	46bd      	mov	sp, r7
   2a344:	b006      	add	sp, #24
   2a346:	bd80      	pop	{r7, pc}

0002a348 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a348:	b580      	push	{r7, lr}
   2a34a:	b088      	sub	sp, #32
   2a34c:	af00      	add	r7, sp, #0
   2a34e:	60b9      	str	r1, [r7, #8]
   2a350:	607a      	str	r2, [r7, #4]
   2a352:	230f      	movs	r3, #15
   2a354:	18fb      	adds	r3, r7, r3
   2a356:	1c02      	adds	r2, r0, #0
   2a358:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2a35a:	230f      	movs	r3, #15
   2a35c:	18fb      	adds	r3, r7, r3
   2a35e:	781a      	ldrb	r2, [r3, #0]
   2a360:	231b      	movs	r3, #27
   2a362:	18fb      	adds	r3, r7, r3
   2a364:	493e      	ldr	r1, [pc, #248]	; (2a460 <_tcc_build_faults+0x118>)
   2a366:	5c8a      	ldrb	r2, [r1, r2]
   2a368:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2a36a:	2300      	movs	r3, #0
   2a36c:	61fb      	str	r3, [r7, #28]
   2a36e:	e06e      	b.n	2a44e <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2a370:	69fa      	ldr	r2, [r7, #28]
   2a372:	0013      	movs	r3, r2
   2a374:	009b      	lsls	r3, r3, #2
   2a376:	189b      	adds	r3, r3, r2
   2a378:	005b      	lsls	r3, r3, #1
   2a37a:	3328      	adds	r3, #40	; 0x28
   2a37c:	68ba      	ldr	r2, [r7, #8]
   2a37e:	18d3      	adds	r3, r2, r3
   2a380:	3304      	adds	r3, #4
   2a382:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2a384:	697b      	ldr	r3, [r7, #20]
   2a386:	7a5b      	ldrb	r3, [r3, #9]
   2a388:	221b      	movs	r2, #27
   2a38a:	18ba      	adds	r2, r7, r2
   2a38c:	7812      	ldrb	r2, [r2, #0]
   2a38e:	429a      	cmp	r2, r3
   2a390:	d801      	bhi.n	2a396 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2a392:	2317      	movs	r3, #23
   2a394:	e05f      	b.n	2a456 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2a396:	697b      	ldr	r3, [r7, #20]
   2a398:	781b      	ldrb	r3, [r3, #0]
   2a39a:	2b0f      	cmp	r3, #15
   2a39c:	d901      	bls.n	2a3a2 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2a39e:	2317      	movs	r3, #23
   2a3a0:	e059      	b.n	2a456 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2a3a2:	697b      	ldr	r3, [r7, #20]
   2a3a4:	781b      	ldrb	r3, [r3, #0]
   2a3a6:	061b      	lsls	r3, r3, #24
   2a3a8:	001a      	movs	r2, r3
   2a3aa:	23f0      	movs	r3, #240	; 0xf0
   2a3ac:	051b      	lsls	r3, r3, #20
   2a3ae:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2a3b0:	697b      	ldr	r3, [r7, #20]
   2a3b2:	785b      	ldrb	r3, [r3, #1]
   2a3b4:	041b      	lsls	r3, r3, #16
   2a3b6:	0019      	movs	r1, r3
   2a3b8:	23ff      	movs	r3, #255	; 0xff
   2a3ba:	041b      	lsls	r3, r3, #16
   2a3bc:	400b      	ands	r3, r1
   2a3be:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2a3c0:	697b      	ldr	r3, [r7, #20]
   2a3c2:	789b      	ldrb	r3, [r3, #2]
   2a3c4:	2b00      	cmp	r3, #0
   2a3c6:	d001      	beq.n	2a3cc <_tcc_build_faults+0x84>
   2a3c8:	2380      	movs	r3, #128	; 0x80
   2a3ca:	e000      	b.n	2a3ce <_tcc_build_faults+0x86>
   2a3cc:	2300      	movs	r3, #0
   2a3ce:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2a3d0:	697b      	ldr	r3, [r7, #20]
   2a3d2:	78db      	ldrb	r3, [r3, #3]
   2a3d4:	2b00      	cmp	r3, #0
   2a3d6:	d001      	beq.n	2a3dc <_tcc_build_faults+0x94>
   2a3d8:	2308      	movs	r3, #8
   2a3da:	e000      	b.n	2a3de <_tcc_build_faults+0x96>
   2a3dc:	2300      	movs	r3, #0
   2a3de:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2a3e0:	697b      	ldr	r3, [r7, #20]
   2a3e2:	791b      	ldrb	r3, [r3, #4]
   2a3e4:	2b00      	cmp	r3, #0
   2a3e6:	d001      	beq.n	2a3ec <_tcc_build_faults+0xa4>
   2a3e8:	2310      	movs	r3, #16
   2a3ea:	e000      	b.n	2a3ee <_tcc_build_faults+0xa6>
   2a3ec:	2300      	movs	r3, #0
   2a3ee:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2a3f0:	697b      	ldr	r3, [r7, #20]
   2a3f2:	795b      	ldrb	r3, [r3, #5]
   2a3f4:	0019      	movs	r1, r3
   2a3f6:	2303      	movs	r3, #3
   2a3f8:	400b      	ands	r3, r1
   2a3fa:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2a3fc:	697b      	ldr	r3, [r7, #20]
   2a3fe:	799b      	ldrb	r3, [r3, #6]
   2a400:	015b      	lsls	r3, r3, #5
   2a402:	0019      	movs	r1, r3
   2a404:	2360      	movs	r3, #96	; 0x60
   2a406:	400b      	ands	r3, r1
   2a408:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2a40a:	697b      	ldr	r3, [r7, #20]
   2a40c:	79db      	ldrb	r3, [r3, #7]
   2a40e:	021b      	lsls	r3, r3, #8
   2a410:	0019      	movs	r1, r3
   2a412:	23c0      	movs	r3, #192	; 0xc0
   2a414:	009b      	lsls	r3, r3, #2
   2a416:	400b      	ands	r3, r1
   2a418:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2a41a:	697b      	ldr	r3, [r7, #20]
   2a41c:	7a1b      	ldrb	r3, [r3, #8]
   2a41e:	031b      	lsls	r3, r3, #12
   2a420:	0019      	movs	r1, r3
   2a422:	23e0      	movs	r3, #224	; 0xe0
   2a424:	01db      	lsls	r3, r3, #7
   2a426:	400b      	ands	r3, r1
   2a428:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2a42a:	697b      	ldr	r3, [r7, #20]
   2a42c:	7a5b      	ldrb	r3, [r3, #9]
   2a42e:	029b      	lsls	r3, r3, #10
   2a430:	0019      	movs	r1, r3
   2a432:	23c0      	movs	r3, #192	; 0xc0
   2a434:	011b      	lsls	r3, r3, #4
   2a436:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2a438:	4313      	orrs	r3, r2
   2a43a:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2a43c:	69fb      	ldr	r3, [r7, #28]
   2a43e:	009b      	lsls	r3, r3, #2
   2a440:	687a      	ldr	r2, [r7, #4]
   2a442:	18d3      	adds	r3, r2, r3
   2a444:	693a      	ldr	r2, [r7, #16]
   2a446:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2a448:	69fb      	ldr	r3, [r7, #28]
   2a44a:	3301      	adds	r3, #1
   2a44c:	61fb      	str	r3, [r7, #28]
   2a44e:	69fb      	ldr	r3, [r7, #28]
   2a450:	2b01      	cmp	r3, #1
   2a452:	dd8d      	ble.n	2a370 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2a454:	2300      	movs	r3, #0
}
   2a456:	0018      	movs	r0, r3
   2a458:	46bd      	mov	sp, r7
   2a45a:	b008      	add	sp, #32
   2a45c:	bd80      	pop	{r7, pc}
   2a45e:	46c0      	nop			; (mov r8, r8)
   2a460:	000391f4 	.word	0x000391f4

0002a464 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a464:	b580      	push	{r7, lr}
   2a466:	b088      	sub	sp, #32
   2a468:	af00      	add	r7, sp, #0
   2a46a:	60b9      	str	r1, [r7, #8]
   2a46c:	607a      	str	r2, [r7, #4]
   2a46e:	230f      	movs	r3, #15
   2a470:	18fb      	adds	r3, r7, r3
   2a472:	1c02      	adds	r2, r0, #0
   2a474:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2a476:	230f      	movs	r3, #15
   2a478:	18fb      	adds	r3, r7, r3
   2a47a:	781a      	ldrb	r2, [r3, #0]
   2a47c:	2317      	movs	r3, #23
   2a47e:	18fb      	adds	r3, r7, r3
   2a480:	492d      	ldr	r1, [pc, #180]	; (2a538 <_tcc_build_drvctrl+0xd4>)
   2a482:	5c8a      	ldrb	r2, [r1, r2]
   2a484:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2a486:	2300      	movs	r3, #0
   2a488:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a48a:	2300      	movs	r3, #0
   2a48c:	61fb      	str	r3, [r7, #28]
   2a48e:	e048      	b.n	2a522 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2a490:	68ba      	ldr	r2, [r7, #8]
   2a492:	2150      	movs	r1, #80	; 0x50
   2a494:	69fb      	ldr	r3, [r7, #28]
   2a496:	18d3      	adds	r3, r2, r3
   2a498:	185b      	adds	r3, r3, r1
   2a49a:	781b      	ldrb	r3, [r3, #0]
   2a49c:	2b00      	cmp	r3, #0
   2a49e:	d010      	beq.n	2a4c2 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2a4a0:	2317      	movs	r3, #23
   2a4a2:	18fb      	adds	r3, r7, r3
   2a4a4:	781a      	ldrb	r2, [r3, #0]
   2a4a6:	69fb      	ldr	r3, [r7, #28]
   2a4a8:	429a      	cmp	r2, r3
   2a4aa:	d801      	bhi.n	2a4b0 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2a4ac:	2317      	movs	r3, #23
   2a4ae:	e03f      	b.n	2a530 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2a4b0:	2380      	movs	r3, #128	; 0x80
   2a4b2:	025a      	lsls	r2, r3, #9
   2a4b4:	69fb      	ldr	r3, [r7, #28]
   2a4b6:	409a      	lsls	r2, r3
   2a4b8:	0013      	movs	r3, r2
   2a4ba:	001a      	movs	r2, r3
   2a4bc:	69bb      	ldr	r3, [r7, #24]
   2a4be:	4313      	orrs	r3, r2
   2a4c0:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2a4c2:	68ba      	ldr	r2, [r7, #8]
   2a4c4:	69fb      	ldr	r3, [r7, #28]
   2a4c6:	331c      	adds	r3, #28
   2a4c8:	005b      	lsls	r3, r3, #1
   2a4ca:	18d3      	adds	r3, r2, r3
   2a4cc:	3309      	adds	r3, #9
   2a4ce:	781b      	ldrb	r3, [r3, #0]
   2a4d0:	2b00      	cmp	r3, #0
   2a4d2:	d023      	beq.n	2a51c <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2a4d4:	2317      	movs	r3, #23
   2a4d6:	18fb      	adds	r3, r7, r3
   2a4d8:	781a      	ldrb	r2, [r3, #0]
   2a4da:	69fb      	ldr	r3, [r7, #28]
   2a4dc:	429a      	cmp	r2, r3
   2a4de:	d801      	bhi.n	2a4e4 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2a4e0:	2317      	movs	r3, #23
   2a4e2:	e025      	b.n	2a530 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2a4e4:	68ba      	ldr	r2, [r7, #8]
   2a4e6:	69fb      	ldr	r3, [r7, #28]
   2a4e8:	331c      	adds	r3, #28
   2a4ea:	005b      	lsls	r3, r3, #1
   2a4ec:	18d3      	adds	r3, r2, r3
   2a4ee:	3309      	adds	r3, #9
   2a4f0:	781b      	ldrb	r3, [r3, #0]
   2a4f2:	2b02      	cmp	r3, #2
   2a4f4:	d10a      	bne.n	2a50c <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2a4f6:	2302      	movs	r3, #2
   2a4f8:	33ff      	adds	r3, #255	; 0xff
   2a4fa:	001a      	movs	r2, r3
   2a4fc:	69fb      	ldr	r3, [r7, #28]
   2a4fe:	409a      	lsls	r2, r3
   2a500:	0013      	movs	r3, r2
   2a502:	001a      	movs	r2, r3
   2a504:	69bb      	ldr	r3, [r7, #24]
   2a506:	4313      	orrs	r3, r2
   2a508:	61bb      	str	r3, [r7, #24]
   2a50a:	e007      	b.n	2a51c <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2a50c:	2201      	movs	r2, #1
   2a50e:	69fb      	ldr	r3, [r7, #28]
   2a510:	409a      	lsls	r2, r3
   2a512:	0013      	movs	r3, r2
   2a514:	001a      	movs	r2, r3
   2a516:	69bb      	ldr	r3, [r7, #24]
   2a518:	4313      	orrs	r3, r2
   2a51a:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a51c:	69fb      	ldr	r3, [r7, #28]
   2a51e:	3301      	adds	r3, #1
   2a520:	61fb      	str	r3, [r7, #28]
   2a522:	69fb      	ldr	r3, [r7, #28]
   2a524:	2b07      	cmp	r3, #7
   2a526:	d9b3      	bls.n	2a490 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2a528:	687b      	ldr	r3, [r7, #4]
   2a52a:	69ba      	ldr	r2, [r7, #24]
   2a52c:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2a52e:	2300      	movs	r3, #0
}
   2a530:	0018      	movs	r0, r3
   2a532:	46bd      	mov	sp, r7
   2a534:	b008      	add	sp, #32
   2a536:	bd80      	pop	{r7, pc}
   2a538:	000391f8 	.word	0x000391f8

0002a53c <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a53c:	b580      	push	{r7, lr}
   2a53e:	b088      	sub	sp, #32
   2a540:	af00      	add	r7, sp, #0
   2a542:	60b9      	str	r1, [r7, #8]
   2a544:	607a      	str	r2, [r7, #4]
   2a546:	230f      	movs	r3, #15
   2a548:	18fb      	adds	r3, r7, r3
   2a54a:	1c02      	adds	r2, r0, #0
   2a54c:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2a54e:	230f      	movs	r3, #15
   2a550:	18fb      	adds	r3, r7, r3
   2a552:	781a      	ldrb	r2, [r3, #0]
   2a554:	2317      	movs	r3, #23
   2a556:	18fb      	adds	r3, r7, r3
   2a558:	491d      	ldr	r1, [pc, #116]	; (2a5d0 <_tcc_build_waves+0x94>)
   2a55a:	5c8a      	ldrb	r2, [r1, r2]
   2a55c:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2a55e:	68bb      	ldr	r3, [r7, #8]
   2a560:	3310      	adds	r3, #16
   2a562:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2a564:	693b      	ldr	r3, [r7, #16]
   2a566:	7a5b      	ldrb	r3, [r3, #9]
   2a568:	011b      	lsls	r3, r3, #4
   2a56a:	001a      	movs	r2, r3
   2a56c:	2330      	movs	r3, #48	; 0x30
   2a56e:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2a570:	693b      	ldr	r3, [r7, #16]
   2a572:	7a1b      	ldrb	r3, [r3, #8]
   2a574:	0019      	movs	r1, r3
   2a576:	2307      	movs	r3, #7
   2a578:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2a57a:	4313      	orrs	r3, r2
   2a57c:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2a57e:	2300      	movs	r3, #0
   2a580:	61fb      	str	r3, [r7, #28]
   2a582:	e01a      	b.n	2a5ba <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2a584:	693a      	ldr	r2, [r7, #16]
   2a586:	69fb      	ldr	r3, [r7, #28]
   2a588:	18d3      	adds	r3, r2, r3
   2a58a:	3304      	adds	r3, #4
   2a58c:	781b      	ldrb	r3, [r3, #0]
   2a58e:	2b00      	cmp	r3, #0
   2a590:	d010      	beq.n	2a5b4 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2a592:	2317      	movs	r3, #23
   2a594:	18fb      	adds	r3, r7, r3
   2a596:	781a      	ldrb	r2, [r3, #0]
   2a598:	69fb      	ldr	r3, [r7, #28]
   2a59a:	429a      	cmp	r2, r3
   2a59c:	dc01      	bgt.n	2a5a2 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2a59e:	2317      	movs	r3, #23
   2a5a0:	e012      	b.n	2a5c8 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2a5a2:	2380      	movs	r3, #128	; 0x80
   2a5a4:	025a      	lsls	r2, r3, #9
   2a5a6:	69fb      	ldr	r3, [r7, #28]
   2a5a8:	409a      	lsls	r2, r3
   2a5aa:	0013      	movs	r3, r2
   2a5ac:	001a      	movs	r2, r3
   2a5ae:	69bb      	ldr	r3, [r7, #24]
   2a5b0:	4313      	orrs	r3, r2
   2a5b2:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2a5b4:	69fb      	ldr	r3, [r7, #28]
   2a5b6:	3301      	adds	r3, #1
   2a5b8:	61fb      	str	r3, [r7, #28]
   2a5ba:	69fb      	ldr	r3, [r7, #28]
   2a5bc:	2b03      	cmp	r3, #3
   2a5be:	dde1      	ble.n	2a584 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2a5c0:	687b      	ldr	r3, [r7, #4]
   2a5c2:	69ba      	ldr	r2, [r7, #24]
   2a5c4:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2a5c6:	2300      	movs	r3, #0
}
   2a5c8:	0018      	movs	r0, r3
   2a5ca:	46bd      	mov	sp, r7
   2a5cc:	b008      	add	sp, #32
   2a5ce:	bd80      	pop	{r7, pc}
   2a5d0:	000391f4 	.word	0x000391f4

0002a5d4 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2a5d4:	b590      	push	{r4, r7, lr}
   2a5d6:	b091      	sub	sp, #68	; 0x44
   2a5d8:	af00      	add	r7, sp, #0
   2a5da:	60f8      	str	r0, [r7, #12]
   2a5dc:	60b9      	str	r1, [r7, #8]
   2a5de:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2a5e0:	233b      	movs	r3, #59	; 0x3b
   2a5e2:	18fc      	adds	r4, r7, r3
   2a5e4:	68bb      	ldr	r3, [r7, #8]
   2a5e6:	0018      	movs	r0, r3
   2a5e8:	4bc4      	ldr	r3, [pc, #784]	; (2a8fc <tcc_init+0x328>)
   2a5ea:	4798      	blx	r3
   2a5ec:	0003      	movs	r3, r0
   2a5ee:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2a5f0:	233b      	movs	r3, #59	; 0x3b
   2a5f2:	18fb      	adds	r3, r7, r3
   2a5f4:	781a      	ldrb	r2, [r3, #0]
   2a5f6:	4bc2      	ldr	r3, [pc, #776]	; (2a900 <tcc_init+0x32c>)
   2a5f8:	0092      	lsls	r2, r2, #2
   2a5fa:	58d3      	ldr	r3, [r2, r3]
   2a5fc:	0019      	movs	r1, r3
   2a5fe:	2002      	movs	r0, #2
   2a600:	4bc0      	ldr	r3, [pc, #768]	; (2a904 <tcc_init+0x330>)
   2a602:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2a604:	68bb      	ldr	r3, [r7, #8]
   2a606:	681b      	ldr	r3, [r3, #0]
   2a608:	2202      	movs	r2, #2
   2a60a:	4013      	ands	r3, r2
   2a60c:	d001      	beq.n	2a612 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2a60e:	231c      	movs	r3, #28
   2a610:	e1be      	b.n	2a990 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2a612:	68bb      	ldr	r3, [r7, #8]
   2a614:	681b      	ldr	r3, [r3, #0]
   2a616:	2201      	movs	r2, #1
   2a618:	4013      	ands	r3, r2
   2a61a:	d001      	beq.n	2a620 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2a61c:	231c      	movs	r3, #28
   2a61e:	e1b7      	b.n	2a990 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2a620:	233b      	movs	r3, #59	; 0x3b
   2a622:	18fb      	adds	r3, r7, r3
   2a624:	781a      	ldrb	r2, [r3, #0]
   2a626:	4bb8      	ldr	r3, [pc, #736]	; (2a908 <tcc_init+0x334>)
   2a628:	0092      	lsls	r2, r2, #2
   2a62a:	58d3      	ldr	r3, [r2, r3]
   2a62c:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2a62e:	687b      	ldr	r3, [r7, #4]
   2a630:	681a      	ldr	r2, [r3, #0]
   2a632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a634:	429a      	cmp	r2, r3
   2a636:	d804      	bhi.n	2a642 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2a638:	687b      	ldr	r3, [r7, #4]
   2a63a:	685a      	ldr	r2, [r3, #4]
   2a63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a63e:	429a      	cmp	r2, r3
   2a640:	d901      	bls.n	2a646 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2a642:	2317      	movs	r3, #23
   2a644:	e1a4      	b.n	2a990 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a646:	2300      	movs	r3, #0
   2a648:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a64a:	e00e      	b.n	2a66a <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2a64c:	687a      	ldr	r2, [r7, #4]
   2a64e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a650:	3306      	adds	r3, #6
   2a652:	009b      	lsls	r3, r3, #2
   2a654:	18d3      	adds	r3, r2, r3
   2a656:	3304      	adds	r3, #4
   2a658:	681a      	ldr	r2, [r3, #0]
   2a65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a65c:	429a      	cmp	r2, r3
   2a65e:	d901      	bls.n	2a664 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2a660:	2317      	movs	r3, #23
   2a662:	e195      	b.n	2a990 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a666:	3301      	adds	r3, #1
   2a668:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a66a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a66c:	2b03      	cmp	r3, #3
   2a66e:	dded      	ble.n	2a64c <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a670:	2300      	movs	r3, #0
   2a672:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a674:	e019      	b.n	2a6aa <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2a676:	687a      	ldr	r2, [r7, #4]
   2a678:	2198      	movs	r1, #152	; 0x98
   2a67a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a67c:	18d3      	adds	r3, r2, r3
   2a67e:	185b      	adds	r3, r3, r1
   2a680:	781b      	ldrb	r3, [r3, #0]
   2a682:	2201      	movs	r2, #1
   2a684:	4053      	eors	r3, r2
   2a686:	b2db      	uxtb	r3, r3
   2a688:	2b00      	cmp	r3, #0
   2a68a:	d10a      	bne.n	2a6a2 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2a68c:	233b      	movs	r3, #59	; 0x3b
   2a68e:	18fb      	adds	r3, r7, r3
   2a690:	781b      	ldrb	r3, [r3, #0]
   2a692:	4a9e      	ldr	r2, [pc, #632]	; (2a90c <tcc_init+0x338>)
   2a694:	5cd3      	ldrb	r3, [r2, r3]
   2a696:	001a      	movs	r2, r3
   2a698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a69a:	429a      	cmp	r2, r3
   2a69c:	dc02      	bgt.n	2a6a4 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2a69e:	2317      	movs	r3, #23
   2a6a0:	e176      	b.n	2a990 <tcc_init+0x3bc>
			continue;
   2a6a2:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a6a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a6a6:	3301      	adds	r3, #1
   2a6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a6aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a6ac:	2b07      	cmp	r3, #7
   2a6ae:	dde2      	ble.n	2a676 <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2a6b0:	2300      	movs	r3, #0
   2a6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2a6b4:	2333      	movs	r3, #51	; 0x33
   2a6b6:	18fc      	adds	r4, r7, r3
   2a6b8:	232c      	movs	r3, #44	; 0x2c
   2a6ba:	18fa      	adds	r2, r7, r3
   2a6bc:	6879      	ldr	r1, [r7, #4]
   2a6be:	233b      	movs	r3, #59	; 0x3b
   2a6c0:	18fb      	adds	r3, r7, r3
   2a6c2:	781b      	ldrb	r3, [r3, #0]
   2a6c4:	0018      	movs	r0, r3
   2a6c6:	4b92      	ldr	r3, [pc, #584]	; (2a910 <tcc_init+0x33c>)
   2a6c8:	4798      	blx	r3
   2a6ca:	0003      	movs	r3, r0
   2a6cc:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a6ce:	2333      	movs	r3, #51	; 0x33
   2a6d0:	18fb      	adds	r3, r7, r3
   2a6d2:	781b      	ldrb	r3, [r3, #0]
   2a6d4:	2b00      	cmp	r3, #0
   2a6d6:	d003      	beq.n	2a6e0 <tcc_init+0x10c>
		return status;
   2a6d8:	2333      	movs	r3, #51	; 0x33
   2a6da:	18fb      	adds	r3, r7, r3
   2a6dc:	781b      	ldrb	r3, [r3, #0]
   2a6de:	e157      	b.n	2a990 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2a6e0:	232b      	movs	r3, #43	; 0x2b
   2a6e2:	18fa      	adds	r2, r7, r3
   2a6e4:	6879      	ldr	r1, [r7, #4]
   2a6e6:	233b      	movs	r3, #59	; 0x3b
   2a6e8:	18fb      	adds	r3, r7, r3
   2a6ea:	781b      	ldrb	r3, [r3, #0]
   2a6ec:	0018      	movs	r0, r3
   2a6ee:	4b89      	ldr	r3, [pc, #548]	; (2a914 <tcc_init+0x340>)
   2a6f0:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2a6f2:	2333      	movs	r3, #51	; 0x33
   2a6f4:	18fc      	adds	r4, r7, r3
   2a6f6:	2320      	movs	r3, #32
   2a6f8:	18fa      	adds	r2, r7, r3
   2a6fa:	6879      	ldr	r1, [r7, #4]
   2a6fc:	233b      	movs	r3, #59	; 0x3b
   2a6fe:	18fb      	adds	r3, r7, r3
   2a700:	781b      	ldrb	r3, [r3, #0]
   2a702:	0018      	movs	r0, r3
   2a704:	4b84      	ldr	r3, [pc, #528]	; (2a918 <tcc_init+0x344>)
   2a706:	4798      	blx	r3
   2a708:	0003      	movs	r3, r0
   2a70a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a70c:	2333      	movs	r3, #51	; 0x33
   2a70e:	18fb      	adds	r3, r7, r3
   2a710:	781b      	ldrb	r3, [r3, #0]
   2a712:	2b00      	cmp	r3, #0
   2a714:	d003      	beq.n	2a71e <tcc_init+0x14a>
		return status;
   2a716:	2333      	movs	r3, #51	; 0x33
   2a718:	18fb      	adds	r3, r7, r3
   2a71a:	781b      	ldrb	r3, [r3, #0]
   2a71c:	e138      	b.n	2a990 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2a71e:	2300      	movs	r3, #0
   2a720:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2a722:	2333      	movs	r3, #51	; 0x33
   2a724:	18fc      	adds	r4, r7, r3
   2a726:	231c      	movs	r3, #28
   2a728:	18fa      	adds	r2, r7, r3
   2a72a:	6879      	ldr	r1, [r7, #4]
   2a72c:	233b      	movs	r3, #59	; 0x3b
   2a72e:	18fb      	adds	r3, r7, r3
   2a730:	781b      	ldrb	r3, [r3, #0]
   2a732:	0018      	movs	r0, r3
   2a734:	4b79      	ldr	r3, [pc, #484]	; (2a91c <tcc_init+0x348>)
   2a736:	4798      	blx	r3
   2a738:	0003      	movs	r3, r0
   2a73a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a73c:	2333      	movs	r3, #51	; 0x33
   2a73e:	18fb      	adds	r3, r7, r3
   2a740:	781b      	ldrb	r3, [r3, #0]
   2a742:	2b00      	cmp	r3, #0
   2a744:	d003      	beq.n	2a74e <tcc_init+0x17a>
		return status;
   2a746:	2333      	movs	r3, #51	; 0x33
   2a748:	18fb      	adds	r3, r7, r3
   2a74a:	781b      	ldrb	r3, [r3, #0]
   2a74c:	e120      	b.n	2a990 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2a74e:	2333      	movs	r3, #51	; 0x33
   2a750:	18fc      	adds	r4, r7, r3
   2a752:	2318      	movs	r3, #24
   2a754:	18fa      	adds	r2, r7, r3
   2a756:	6879      	ldr	r1, [r7, #4]
   2a758:	233b      	movs	r3, #59	; 0x3b
   2a75a:	18fb      	adds	r3, r7, r3
   2a75c:	781b      	ldrb	r3, [r3, #0]
   2a75e:	0018      	movs	r0, r3
   2a760:	4b6f      	ldr	r3, [pc, #444]	; (2a920 <tcc_init+0x34c>)
   2a762:	4798      	blx	r3
   2a764:	0003      	movs	r3, r0
   2a766:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a768:	2333      	movs	r3, #51	; 0x33
   2a76a:	18fb      	adds	r3, r7, r3
   2a76c:	781b      	ldrb	r3, [r3, #0]
   2a76e:	2b00      	cmp	r3, #0
   2a770:	d003      	beq.n	2a77a <tcc_init+0x1a6>
		return status;
   2a772:	2333      	movs	r3, #51	; 0x33
   2a774:	18fb      	adds	r3, r7, r3
   2a776:	781b      	ldrb	r3, [r3, #0]
   2a778:	e10a      	b.n	2a990 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a77a:	2300      	movs	r3, #0
   2a77c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a77e:	e009      	b.n	2a794 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2a780:	68fa      	ldr	r2, [r7, #12]
   2a782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a784:	009b      	lsls	r3, r3, #2
   2a786:	18d3      	adds	r3, r2, r3
   2a788:	3304      	adds	r3, #4
   2a78a:	2200      	movs	r2, #0
   2a78c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a78e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a790:	3301      	adds	r3, #1
   2a792:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a796:	2b0b      	cmp	r3, #11
   2a798:	ddf2      	ble.n	2a780 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2a79a:	68fb      	ldr	r3, [r7, #12]
   2a79c:	2200      	movs	r2, #0
   2a79e:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2a7a0:	68fb      	ldr	r3, [r7, #12]
   2a7a2:	2200      	movs	r2, #0
   2a7a4:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2a7a6:	233b      	movs	r3, #59	; 0x3b
   2a7a8:	18fb      	adds	r3, r7, r3
   2a7aa:	781a      	ldrb	r2, [r3, #0]
   2a7ac:	4b5d      	ldr	r3, [pc, #372]	; (2a924 <tcc_init+0x350>)
   2a7ae:	0092      	lsls	r2, r2, #2
   2a7b0:	68f9      	ldr	r1, [r7, #12]
   2a7b2:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2a7b4:	68fb      	ldr	r3, [r7, #12]
   2a7b6:	68ba      	ldr	r2, [r7, #8]
   2a7b8:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2a7ba:	687b      	ldr	r3, [r7, #4]
   2a7bc:	22a0      	movs	r2, #160	; 0xa0
   2a7be:	5c99      	ldrb	r1, [r3, r2]
   2a7c0:	68fb      	ldr	r3, [r7, #12]
   2a7c2:	223c      	movs	r2, #60	; 0x3c
   2a7c4:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2a7c6:	2314      	movs	r3, #20
   2a7c8:	18fb      	adds	r3, r7, r3
   2a7ca:	0018      	movs	r0, r3
   2a7cc:	4b56      	ldr	r3, [pc, #344]	; (2a928 <tcc_init+0x354>)
   2a7ce:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2a7d0:	687b      	ldr	r3, [r7, #4]
   2a7d2:	7a9a      	ldrb	r2, [r3, #10]
   2a7d4:	2314      	movs	r3, #20
   2a7d6:	18fb      	adds	r3, r7, r3
   2a7d8:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2a7da:	233b      	movs	r3, #59	; 0x3b
   2a7dc:	18fb      	adds	r3, r7, r3
   2a7de:	781b      	ldrb	r3, [r3, #0]
   2a7e0:	4a52      	ldr	r2, [pc, #328]	; (2a92c <tcc_init+0x358>)
   2a7e2:	5cd3      	ldrb	r3, [r2, r3]
   2a7e4:	2214      	movs	r2, #20
   2a7e6:	18ba      	adds	r2, r7, r2
   2a7e8:	0011      	movs	r1, r2
   2a7ea:	0018      	movs	r0, r3
   2a7ec:	4b50      	ldr	r3, [pc, #320]	; (2a930 <tcc_init+0x35c>)
   2a7ee:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2a7f0:	233b      	movs	r3, #59	; 0x3b
   2a7f2:	18fb      	adds	r3, r7, r3
   2a7f4:	781b      	ldrb	r3, [r3, #0]
   2a7f6:	4a4d      	ldr	r2, [pc, #308]	; (2a92c <tcc_init+0x358>)
   2a7f8:	5cd3      	ldrb	r3, [r2, r3]
   2a7fa:	0018      	movs	r0, r3
   2a7fc:	4b4d      	ldr	r3, [pc, #308]	; (2a934 <tcc_init+0x360>)
   2a7fe:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2a800:	2300      	movs	r3, #0
   2a802:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a804:	e02d      	b.n	2a862 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2a806:	687a      	ldr	r2, [r7, #4]
   2a808:	2198      	movs	r1, #152	; 0x98
   2a80a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a80c:	18d3      	adds	r3, r2, r3
   2a80e:	185b      	adds	r3, r3, r1
   2a810:	781b      	ldrb	r3, [r3, #0]
   2a812:	2201      	movs	r2, #1
   2a814:	4053      	eors	r3, r2
   2a816:	b2db      	uxtb	r3, r3
   2a818:	2b00      	cmp	r3, #0
   2a81a:	d11e      	bne.n	2a85a <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2a81c:	2310      	movs	r3, #16
   2a81e:	18fb      	adds	r3, r7, r3
   2a820:	0018      	movs	r0, r3
   2a822:	4b45      	ldr	r3, [pc, #276]	; (2a938 <tcc_init+0x364>)
   2a824:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2a826:	687b      	ldr	r3, [r7, #4]
   2a828:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a82a:	321e      	adds	r2, #30
   2a82c:	0092      	lsls	r2, r2, #2
   2a82e:	58d3      	ldr	r3, [r2, r3]
   2a830:	b2da      	uxtb	r2, r3
   2a832:	2310      	movs	r3, #16
   2a834:	18fb      	adds	r3, r7, r3
   2a836:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2a838:	2310      	movs	r3, #16
   2a83a:	18fb      	adds	r3, r7, r3
   2a83c:	2201      	movs	r2, #1
   2a83e:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2a840:	687b      	ldr	r3, [r7, #4]
   2a842:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a844:	3216      	adds	r2, #22
   2a846:	0092      	lsls	r2, r2, #2
   2a848:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2a84a:	b2db      	uxtb	r3, r3
   2a84c:	2210      	movs	r2, #16
   2a84e:	18ba      	adds	r2, r7, r2
   2a850:	0011      	movs	r1, r2
   2a852:	0018      	movs	r0, r3
   2a854:	4b39      	ldr	r3, [pc, #228]	; (2a93c <tcc_init+0x368>)
   2a856:	4798      	blx	r3
   2a858:	e000      	b.n	2a85c <tcc_init+0x288>
			continue;
   2a85a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2a85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a85e:	3301      	adds	r3, #1
   2a860:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a862:	233b      	movs	r3, #59	; 0x3b
   2a864:	18fb      	adds	r3, r7, r3
   2a866:	781b      	ldrb	r3, [r3, #0]
   2a868:	4a28      	ldr	r2, [pc, #160]	; (2a90c <tcc_init+0x338>)
   2a86a:	5cd3      	ldrb	r3, [r2, r3]
   2a86c:	001a      	movs	r2, r3
   2a86e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a870:	429a      	cmp	r2, r3
   2a872:	dcc8      	bgt.n	2a806 <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2a874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2a876:	68bb      	ldr	r3, [r7, #8]
   2a878:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2a87a:	46c0      	nop			; (mov r8, r8)
   2a87c:	68bb      	ldr	r3, [r7, #8]
   2a87e:	689b      	ldr	r3, [r3, #8]
   2a880:	2204      	movs	r2, #4
   2a882:	4013      	ands	r3, r2
   2a884:	d1fa      	bne.n	2a87c <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2a886:	68bb      	ldr	r3, [r7, #8]
   2a888:	22ff      	movs	r2, #255	; 0xff
   2a88a:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2a88c:	46c0      	nop			; (mov r8, r8)
   2a88e:	68bb      	ldr	r3, [r7, #8]
   2a890:	689b      	ldr	r3, [r3, #8]
   2a892:	2204      	movs	r2, #4
   2a894:	4013      	ands	r3, r2
   2a896:	d1fa      	bne.n	2a88e <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2a898:	232b      	movs	r3, #43	; 0x2b
   2a89a:	18fb      	adds	r3, r7, r3
   2a89c:	781a      	ldrb	r2, [r3, #0]
   2a89e:	68bb      	ldr	r3, [r7, #8]
   2a8a0:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2a8a2:	2320      	movs	r3, #32
   2a8a4:	18fb      	adds	r3, r7, r3
   2a8a6:	681a      	ldr	r2, [r3, #0]
   2a8a8:	68bb      	ldr	r3, [r7, #8]
   2a8aa:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2a8ac:	2320      	movs	r3, #32
   2a8ae:	18fb      	adds	r3, r7, r3
   2a8b0:	685a      	ldr	r2, [r3, #4]
   2a8b2:	68bb      	ldr	r3, [r7, #8]
   2a8b4:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2a8b6:	69fa      	ldr	r2, [r7, #28]
   2a8b8:	68bb      	ldr	r3, [r7, #8]
   2a8ba:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2a8bc:	46c0      	nop			; (mov r8, r8)
   2a8be:	68bb      	ldr	r3, [r7, #8]
   2a8c0:	689b      	ldr	r3, [r3, #8]
   2a8c2:	4a1f      	ldr	r2, [pc, #124]	; (2a940 <tcc_init+0x36c>)
   2a8c4:	4013      	ands	r3, r2
   2a8c6:	d1fa      	bne.n	2a8be <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2a8c8:	69ba      	ldr	r2, [r7, #24]
   2a8ca:	68bb      	ldr	r3, [r7, #8]
   2a8cc:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2a8ce:	46c0      	nop			; (mov r8, r8)
   2a8d0:	68bb      	ldr	r3, [r7, #8]
   2a8d2:	689b      	ldr	r3, [r3, #8]
   2a8d4:	2210      	movs	r2, #16
   2a8d6:	4013      	ands	r3, r2
   2a8d8:	d1fa      	bne.n	2a8d0 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2a8da:	687b      	ldr	r3, [r7, #4]
   2a8dc:	681a      	ldr	r2, [r3, #0]
   2a8de:	68bb      	ldr	r3, [r7, #8]
   2a8e0:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2a8e2:	46c0      	nop			; (mov r8, r8)
   2a8e4:	68bb      	ldr	r3, [r7, #8]
   2a8e6:	689b      	ldr	r3, [r3, #8]
   2a8e8:	4a16      	ldr	r2, [pc, #88]	; (2a944 <tcc_init+0x370>)
   2a8ea:	4013      	ands	r3, r2
   2a8ec:	d1fa      	bne.n	2a8e4 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2a8ee:	687b      	ldr	r3, [r7, #4]
   2a8f0:	685a      	ldr	r2, [r3, #4]
   2a8f2:	68bb      	ldr	r3, [r7, #8]
   2a8f4:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2a8f6:	2300      	movs	r3, #0
   2a8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a8fa:	e03f      	b.n	2a97c <tcc_init+0x3a8>
   2a8fc:	00029f3d 	.word	0x00029f3d
   2a900:	000391dc 	.word	0x000391dc
   2a904:	00029eb9 	.word	0x00029eb9
   2a908:	000391e8 	.word	0x000391e8
   2a90c:	000391f8 	.word	0x000391f8
   2a910:	0002a249 	.word	0x0002a249
   2a914:	0002a2ed 	.word	0x0002a2ed
   2a918:	0002a349 	.word	0x0002a349
   2a91c:	0002a465 	.word	0x0002a465
   2a920:	0002a53d 	.word	0x0002a53d
   2a924:	20005a54 	.word	0x20005a54
   2a928:	00029ea1 	.word	0x00029ea1
   2a92c:	000391d8 	.word	0x000391d8
   2a930:	00029ab9 	.word	0x00029ab9
   2a934:	00029afd 	.word	0x00029afd
   2a938:	00029f15 	.word	0x00029f15
   2a93c:	00029e19 	.word	0x00029e19
   2a940:	00020040 	.word	0x00020040
   2a944:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2a948:	46c0      	nop			; (mov r8, r8)
   2a94a:	68bb      	ldr	r3, [r7, #8]
   2a94c:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2a94e:	4912      	ldr	r1, [pc, #72]	; (2a998 <tcc_init+0x3c4>)
   2a950:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a952:	4091      	lsls	r1, r2
   2a954:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2a956:	4013      	ands	r3, r2
   2a958:	d1f7      	bne.n	2a94a <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2a95a:	687a      	ldr	r2, [r7, #4]
   2a95c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a95e:	3306      	adds	r3, #6
   2a960:	009b      	lsls	r3, r3, #2
   2a962:	18d3      	adds	r3, r2, r3
   2a964:	3304      	adds	r3, #4
   2a966:	681a      	ldr	r2, [r3, #0]
   2a968:	68b9      	ldr	r1, [r7, #8]
   2a96a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a96c:	3310      	adds	r3, #16
   2a96e:	009b      	lsls	r3, r3, #2
   2a970:	18cb      	adds	r3, r1, r3
   2a972:	3304      	adds	r3, #4
   2a974:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2a976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a978:	3301      	adds	r3, #1
   2a97a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a97c:	233b      	movs	r3, #59	; 0x3b
   2a97e:	18fb      	adds	r3, r7, r3
   2a980:	781b      	ldrb	r3, [r3, #0]
   2a982:	4a06      	ldr	r2, [pc, #24]	; (2a99c <tcc_init+0x3c8>)
   2a984:	5cd3      	ldrb	r3, [r2, r3]
   2a986:	001a      	movs	r2, r3
   2a988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a98a:	429a      	cmp	r2, r3
   2a98c:	dcdc      	bgt.n	2a948 <tcc_init+0x374>
	}

	return STATUS_OK;
   2a98e:	2300      	movs	r3, #0
}
   2a990:	0018      	movs	r0, r3
   2a992:	46bd      	mov	sp, r7
   2a994:	b011      	add	sp, #68	; 0x44
   2a996:	bd90      	pop	{r4, r7, pc}
   2a998:	00080100 	.word	0x00080100
   2a99c:	000391f4 	.word	0x000391f4

0002a9a0 <system_interrupt_enable>:
{
   2a9a0:	b580      	push	{r7, lr}
   2a9a2:	b082      	sub	sp, #8
   2a9a4:	af00      	add	r7, sp, #0
   2a9a6:	0002      	movs	r2, r0
   2a9a8:	1dfb      	adds	r3, r7, #7
   2a9aa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2a9ac:	4b06      	ldr	r3, [pc, #24]	; (2a9c8 <system_interrupt_enable+0x28>)
   2a9ae:	1dfa      	adds	r2, r7, #7
   2a9b0:	7812      	ldrb	r2, [r2, #0]
   2a9b2:	0011      	movs	r1, r2
   2a9b4:	221f      	movs	r2, #31
   2a9b6:	400a      	ands	r2, r1
   2a9b8:	2101      	movs	r1, #1
   2a9ba:	4091      	lsls	r1, r2
   2a9bc:	000a      	movs	r2, r1
   2a9be:	601a      	str	r2, [r3, #0]
}
   2a9c0:	46c0      	nop			; (mov r8, r8)
   2a9c2:	46bd      	mov	sp, r7
   2a9c4:	b002      	add	sp, #8
   2a9c6:	bd80      	pop	{r7, pc}
   2a9c8:	e000e100 	.word	0xe000e100

0002a9cc <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2a9cc:	b580      	push	{r7, lr}
   2a9ce:	b082      	sub	sp, #8
   2a9d0:	af00      	add	r7, sp, #0
   2a9d2:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2a9d4:	4a04      	ldr	r2, [pc, #16]	; (2a9e8 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2a9d6:	687b      	ldr	r3, [r7, #4]
   2a9d8:	18d3      	adds	r3, r2, r3
   2a9da:	781b      	ldrb	r3, [r3, #0]
   2a9dc:	b25b      	sxtb	r3, r3
}
   2a9de:	0018      	movs	r0, r3
   2a9e0:	46bd      	mov	sp, r7
   2a9e2:	b002      	add	sp, #8
   2a9e4:	bd80      	pop	{r7, pc}
   2a9e6:	46c0      	nop			; (mov r8, r8)
   2a9e8:	2000011c 	.word	0x2000011c

0002a9ec <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2a9ec:	b580      	push	{r7, lr}
   2a9ee:	b084      	sub	sp, #16
   2a9f0:	af00      	add	r7, sp, #0
   2a9f2:	60f8      	str	r0, [r7, #12]
   2a9f4:	60b9      	str	r1, [r7, #8]
   2a9f6:	1dfb      	adds	r3, r7, #7
   2a9f8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2a9fa:	1dfb      	adds	r3, r7, #7
   2a9fc:	781b      	ldrb	r3, [r3, #0]
   2a9fe:	68fa      	ldr	r2, [r7, #12]
   2aa00:	009b      	lsls	r3, r3, #2
   2aa02:	18d3      	adds	r3, r2, r3
   2aa04:	3304      	adds	r3, #4
   2aa06:	68ba      	ldr	r2, [r7, #8]
   2aa08:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2aa0a:	68fb      	ldr	r3, [r7, #12]
   2aa0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2aa0e:	1dfb      	adds	r3, r7, #7
   2aa10:	7819      	ldrb	r1, [r3, #0]
   2aa12:	4b05      	ldr	r3, [pc, #20]	; (2aa28 <tcc_register_callback+0x3c>)
   2aa14:	0089      	lsls	r1, r1, #2
   2aa16:	58cb      	ldr	r3, [r1, r3]
   2aa18:	431a      	orrs	r2, r3
   2aa1a:	68fb      	ldr	r3, [r7, #12]
   2aa1c:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2aa1e:	2300      	movs	r3, #0
}
   2aa20:	0018      	movs	r0, r3
   2aa22:	46bd      	mov	sp, r7
   2aa24:	b004      	add	sp, #16
   2aa26:	bd80      	pop	{r7, pc}
   2aa28:	000391fc 	.word	0x000391fc

0002aa2c <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2aa2c:	b580      	push	{r7, lr}
   2aa2e:	b082      	sub	sp, #8
   2aa30:	af00      	add	r7, sp, #0
   2aa32:	6078      	str	r0, [r7, #4]
   2aa34:	000a      	movs	r2, r1
   2aa36:	1cfb      	adds	r3, r7, #3
   2aa38:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2aa3a:	687b      	ldr	r3, [r7, #4]
   2aa3c:	681b      	ldr	r3, [r3, #0]
   2aa3e:	0018      	movs	r0, r3
   2aa40:	4b0f      	ldr	r3, [pc, #60]	; (2aa80 <tcc_enable_callback+0x54>)
   2aa42:	4798      	blx	r3
   2aa44:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2aa46:	0018      	movs	r0, r3
   2aa48:	4b0e      	ldr	r3, [pc, #56]	; (2aa84 <tcc_enable_callback+0x58>)
   2aa4a:	4798      	blx	r3
   2aa4c:	0003      	movs	r3, r0
   2aa4e:	0018      	movs	r0, r3
   2aa50:	4b0d      	ldr	r3, [pc, #52]	; (2aa88 <tcc_enable_callback+0x5c>)
   2aa52:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2aa54:	687b      	ldr	r3, [r7, #4]
   2aa56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2aa58:	1cfb      	adds	r3, r7, #3
   2aa5a:	7819      	ldrb	r1, [r3, #0]
   2aa5c:	4b0b      	ldr	r3, [pc, #44]	; (2aa8c <tcc_enable_callback+0x60>)
   2aa5e:	0089      	lsls	r1, r1, #2
   2aa60:	58cb      	ldr	r3, [r1, r3]
   2aa62:	431a      	orrs	r2, r3
   2aa64:	687b      	ldr	r3, [r7, #4]
   2aa66:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2aa68:	687b      	ldr	r3, [r7, #4]
   2aa6a:	681b      	ldr	r3, [r3, #0]
   2aa6c:	1cfa      	adds	r2, r7, #3
   2aa6e:	7811      	ldrb	r1, [r2, #0]
   2aa70:	4a06      	ldr	r2, [pc, #24]	; (2aa8c <tcc_enable_callback+0x60>)
   2aa72:	0089      	lsls	r1, r1, #2
   2aa74:	588a      	ldr	r2, [r1, r2]
   2aa76:	629a      	str	r2, [r3, #40]	; 0x28
}
   2aa78:	46c0      	nop			; (mov r8, r8)
   2aa7a:	46bd      	mov	sp, r7
   2aa7c:	b002      	add	sp, #8
   2aa7e:	bd80      	pop	{r7, pc}
   2aa80:	00029f3d 	.word	0x00029f3d
   2aa84:	0002a9cd 	.word	0x0002a9cd
   2aa88:	0002a9a1 	.word	0x0002a9a1
   2aa8c:	000391fc 	.word	0x000391fc

0002aa90 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2aa90:	b580      	push	{r7, lr}
   2aa92:	af00      	add	r7, sp, #0
   2aa94:	2000      	movs	r0, #0
   2aa96:	4b02      	ldr	r3, [pc, #8]	; (2aaa0 <TCC0_Handler+0x10>)
   2aa98:	4798      	blx	r3
   2aa9a:	46c0      	nop			; (mov r8, r8)
   2aa9c:	46bd      	mov	sp, r7
   2aa9e:	bd80      	pop	{r7, pc}
   2aaa0:	0002aacd 	.word	0x0002aacd

0002aaa4 <TCC1_Handler>:
   2aaa4:	b580      	push	{r7, lr}
   2aaa6:	af00      	add	r7, sp, #0
   2aaa8:	2001      	movs	r0, #1
   2aaaa:	4b02      	ldr	r3, [pc, #8]	; (2aab4 <TCC1_Handler+0x10>)
   2aaac:	4798      	blx	r3
   2aaae:	46c0      	nop			; (mov r8, r8)
   2aab0:	46bd      	mov	sp, r7
   2aab2:	bd80      	pop	{r7, pc}
   2aab4:	0002aacd 	.word	0x0002aacd

0002aab8 <TCC2_Handler>:
   2aab8:	b580      	push	{r7, lr}
   2aaba:	af00      	add	r7, sp, #0
   2aabc:	2002      	movs	r0, #2
   2aabe:	4b02      	ldr	r3, [pc, #8]	; (2aac8 <TCC2_Handler+0x10>)
   2aac0:	4798      	blx	r3
   2aac2:	46c0      	nop			; (mov r8, r8)
   2aac4:	46bd      	mov	sp, r7
   2aac6:	bd80      	pop	{r7, pc}
   2aac8:	0002aacd 	.word	0x0002aacd

0002aacc <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2aacc:	b580      	push	{r7, lr}
   2aace:	b086      	sub	sp, #24
   2aad0:	af00      	add	r7, sp, #0
   2aad2:	0002      	movs	r2, r0
   2aad4:	1dfb      	adds	r3, r7, #7
   2aad6:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2aad8:	1dfb      	adds	r3, r7, #7
   2aada:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2aadc:	4b18      	ldr	r3, [pc, #96]	; (2ab40 <_tcc_interrupt_handler+0x74>)
   2aade:	0092      	lsls	r2, r2, #2
   2aae0:	58d3      	ldr	r3, [r2, r3]
   2aae2:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2aae4:	693b      	ldr	r3, [r7, #16]
   2aae6:	681b      	ldr	r3, [r3, #0]
   2aae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2aaea:	693b      	ldr	r3, [r7, #16]
   2aaec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2aaee:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2aaf0:	693b      	ldr	r3, [r7, #16]
   2aaf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2aaf4:	4013      	ands	r3, r2
   2aaf6:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2aaf8:	2300      	movs	r3, #0
   2aafa:	617b      	str	r3, [r7, #20]
   2aafc:	e019      	b.n	2ab32 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2aafe:	4b11      	ldr	r3, [pc, #68]	; (2ab44 <_tcc_interrupt_handler+0x78>)
   2ab00:	697a      	ldr	r2, [r7, #20]
   2ab02:	0092      	lsls	r2, r2, #2
   2ab04:	58d3      	ldr	r3, [r2, r3]
   2ab06:	68fa      	ldr	r2, [r7, #12]
   2ab08:	4013      	ands	r3, r2
   2ab0a:	d00f      	beq.n	2ab2c <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2ab0c:	693a      	ldr	r2, [r7, #16]
   2ab0e:	697b      	ldr	r3, [r7, #20]
   2ab10:	009b      	lsls	r3, r3, #2
   2ab12:	18d3      	adds	r3, r2, r3
   2ab14:	3304      	adds	r3, #4
   2ab16:	681b      	ldr	r3, [r3, #0]
   2ab18:	693a      	ldr	r2, [r7, #16]
   2ab1a:	0010      	movs	r0, r2
   2ab1c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2ab1e:	693b      	ldr	r3, [r7, #16]
   2ab20:	681b      	ldr	r3, [r3, #0]
   2ab22:	4a08      	ldr	r2, [pc, #32]	; (2ab44 <_tcc_interrupt_handler+0x78>)
   2ab24:	6979      	ldr	r1, [r7, #20]
   2ab26:	0089      	lsls	r1, r1, #2
   2ab28:	588a      	ldr	r2, [r1, r2]
   2ab2a:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2ab2c:	697b      	ldr	r3, [r7, #20]
   2ab2e:	3301      	adds	r3, #1
   2ab30:	617b      	str	r3, [r7, #20]
   2ab32:	697b      	ldr	r3, [r7, #20]
   2ab34:	2b0b      	cmp	r3, #11
   2ab36:	dde2      	ble.n	2aafe <_tcc_interrupt_handler+0x32>
		}
	}
}
   2ab38:	46c0      	nop			; (mov r8, r8)
   2ab3a:	46bd      	mov	sp, r7
   2ab3c:	b006      	add	sp, #24
   2ab3e:	bd80      	pop	{r7, pc}
   2ab40:	20005a54 	.word	0x20005a54
   2ab44:	000391fc 	.word	0x000391fc

0002ab48 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2ab48:	b580      	push	{r7, lr}
   2ab4a:	b082      	sub	sp, #8
   2ab4c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2ab4e:	4b2f      	ldr	r3, [pc, #188]	; (2ac0c <Reset_Handler+0xc4>)
   2ab50:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2ab52:	4b2f      	ldr	r3, [pc, #188]	; (2ac10 <Reset_Handler+0xc8>)
   2ab54:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2ab56:	687a      	ldr	r2, [r7, #4]
   2ab58:	683b      	ldr	r3, [r7, #0]
   2ab5a:	429a      	cmp	r2, r3
   2ab5c:	d00c      	beq.n	2ab78 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2ab5e:	e007      	b.n	2ab70 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2ab60:	683b      	ldr	r3, [r7, #0]
   2ab62:	1d1a      	adds	r2, r3, #4
   2ab64:	603a      	str	r2, [r7, #0]
   2ab66:	687a      	ldr	r2, [r7, #4]
   2ab68:	1d11      	adds	r1, r2, #4
   2ab6a:	6079      	str	r1, [r7, #4]
   2ab6c:	6812      	ldr	r2, [r2, #0]
   2ab6e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2ab70:	683a      	ldr	r2, [r7, #0]
   2ab72:	4b28      	ldr	r3, [pc, #160]	; (2ac14 <Reset_Handler+0xcc>)
   2ab74:	429a      	cmp	r2, r3
   2ab76:	d3f3      	bcc.n	2ab60 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2ab78:	4b27      	ldr	r3, [pc, #156]	; (2ac18 <Reset_Handler+0xd0>)
   2ab7a:	603b      	str	r3, [r7, #0]
   2ab7c:	e004      	b.n	2ab88 <Reset_Handler+0x40>
                *pDest++ = 0;
   2ab7e:	683b      	ldr	r3, [r7, #0]
   2ab80:	1d1a      	adds	r2, r3, #4
   2ab82:	603a      	str	r2, [r7, #0]
   2ab84:	2200      	movs	r2, #0
   2ab86:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2ab88:	683a      	ldr	r2, [r7, #0]
   2ab8a:	4b24      	ldr	r3, [pc, #144]	; (2ac1c <Reset_Handler+0xd4>)
   2ab8c:	429a      	cmp	r2, r3
   2ab8e:	d3f6      	bcc.n	2ab7e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2ab90:	4b23      	ldr	r3, [pc, #140]	; (2ac20 <Reset_Handler+0xd8>)
   2ab92:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2ab94:	4b23      	ldr	r3, [pc, #140]	; (2ac24 <Reset_Handler+0xdc>)
   2ab96:	687a      	ldr	r2, [r7, #4]
   2ab98:	21ff      	movs	r1, #255	; 0xff
   2ab9a:	438a      	bics	r2, r1
   2ab9c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2ab9e:	4a22      	ldr	r2, [pc, #136]	; (2ac28 <Reset_Handler+0xe0>)
   2aba0:	2390      	movs	r3, #144	; 0x90
   2aba2:	005b      	lsls	r3, r3, #1
   2aba4:	2102      	movs	r1, #2
   2aba6:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2aba8:	4a20      	ldr	r2, [pc, #128]	; (2ac2c <Reset_Handler+0xe4>)
   2abaa:	78d3      	ldrb	r3, [r2, #3]
   2abac:	2103      	movs	r1, #3
   2abae:	438b      	bics	r3, r1
   2abb0:	1c19      	adds	r1, r3, #0
   2abb2:	2302      	movs	r3, #2
   2abb4:	430b      	orrs	r3, r1
   2abb6:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2abb8:	4a1c      	ldr	r2, [pc, #112]	; (2ac2c <Reset_Handler+0xe4>)
   2abba:	78d3      	ldrb	r3, [r2, #3]
   2abbc:	210c      	movs	r1, #12
   2abbe:	438b      	bics	r3, r1
   2abc0:	1c19      	adds	r1, r3, #0
   2abc2:	2308      	movs	r3, #8
   2abc4:	430b      	orrs	r3, r1
   2abc6:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2abc8:	4a19      	ldr	r2, [pc, #100]	; (2ac30 <Reset_Handler+0xe8>)
   2abca:	7b93      	ldrb	r3, [r2, #14]
   2abcc:	2130      	movs	r1, #48	; 0x30
   2abce:	438b      	bics	r3, r1
   2abd0:	1c19      	adds	r1, r3, #0
   2abd2:	2320      	movs	r3, #32
   2abd4:	430b      	orrs	r3, r1
   2abd6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2abd8:	4a15      	ldr	r2, [pc, #84]	; (2ac30 <Reset_Handler+0xe8>)
   2abda:	7b93      	ldrb	r3, [r2, #14]
   2abdc:	210c      	movs	r1, #12
   2abde:	438b      	bics	r3, r1
   2abe0:	1c19      	adds	r1, r3, #0
   2abe2:	2308      	movs	r3, #8
   2abe4:	430b      	orrs	r3, r1
   2abe6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2abe8:	4a11      	ldr	r2, [pc, #68]	; (2ac30 <Reset_Handler+0xe8>)
   2abea:	7b93      	ldrb	r3, [r2, #14]
   2abec:	2103      	movs	r1, #3
   2abee:	438b      	bics	r3, r1
   2abf0:	1c19      	adds	r1, r3, #0
   2abf2:	2302      	movs	r3, #2
   2abf4:	430b      	orrs	r3, r1
   2abf6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2abf8:	4a0e      	ldr	r2, [pc, #56]	; (2ac34 <Reset_Handler+0xec>)
   2abfa:	6853      	ldr	r3, [r2, #4]
   2abfc:	2180      	movs	r1, #128	; 0x80
   2abfe:	430b      	orrs	r3, r1
   2ac00:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2ac02:	4b0d      	ldr	r3, [pc, #52]	; (2ac38 <Reset_Handler+0xf0>)
   2ac04:	4798      	blx	r3

        /* Branch to main function */
        main();
   2ac06:	4b0d      	ldr	r3, [pc, #52]	; (2ac3c <Reset_Handler+0xf4>)
   2ac08:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2ac0a:	e7fe      	b.n	2ac0a <Reset_Handler+0xc2>
   2ac0c:	00039fb4 	.word	0x00039fb4
   2ac10:	20000000 	.word	0x20000000
   2ac14:	200002f4 	.word	0x200002f4
   2ac18:	20000300 	.word	0x20000300
   2ac1c:	20005ac4 	.word	0x20005ac4
   2ac20:	00012000 	.word	0x00012000
   2ac24:	e000ed00 	.word	0xe000ed00
   2ac28:	41007000 	.word	0x41007000
   2ac2c:	41005000 	.word	0x41005000
   2ac30:	41004800 	.word	0x41004800
   2ac34:	41004000 	.word	0x41004000
   2ac38:	00034589 	.word	0x00034589
   2ac3c:	0003237d 	.word	0x0003237d

0002ac40 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2ac40:	b580      	push	{r7, lr}
   2ac42:	af00      	add	r7, sp, #0
  __asm volatile (
   2ac44:	2004      	movs	r0, #4
   2ac46:	4671      	mov	r1, lr
   2ac48:	4208      	tst	r0, r1
   2ac4a:	d002      	beq.n	2ac52 <_MSP>
   2ac4c:	f3ef 8009 	mrs	r0, PSP
   2ac50:	e001      	b.n	2ac56 <_HALT>

0002ac52 <_MSP>:
   2ac52:	f3ef 8008 	mrs	r0, MSP

0002ac56 <_HALT>:
   2ac56:	6941      	ldr	r1, [r0, #20]
   2ac58:	e004      	b.n	2ac64 <HardFault_HandlerC>
   2ac5a:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2ac5c:	46c0      	nop			; (mov r8, r8)
   2ac5e:	46bd      	mov	sp, r7
   2ac60:	bd80      	pop	{r7, pc}
	...

0002ac64 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2ac64:	b580      	push	{r7, lr}
   2ac66:	b090      	sub	sp, #64	; 0x40
   2ac68:	af00      	add	r7, sp, #0
   2ac6a:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2ac6c:	687b      	ldr	r3, [r7, #4]
   2ac6e:	681b      	ldr	r3, [r3, #0]
   2ac70:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2ac72:	687b      	ldr	r3, [r7, #4]
   2ac74:	685b      	ldr	r3, [r3, #4]
   2ac76:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2ac78:	687b      	ldr	r3, [r7, #4]
   2ac7a:	689b      	ldr	r3, [r3, #8]
   2ac7c:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2ac7e:	687b      	ldr	r3, [r7, #4]
   2ac80:	68db      	ldr	r3, [r3, #12]
   2ac82:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2ac84:	687b      	ldr	r3, [r7, #4]
   2ac86:	691b      	ldr	r3, [r3, #16]
   2ac88:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2ac8a:	687b      	ldr	r3, [r7, #4]
   2ac8c:	695b      	ldr	r3, [r3, #20]
   2ac8e:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2ac90:	687b      	ldr	r3, [r7, #4]
   2ac92:	699b      	ldr	r3, [r3, #24]
   2ac94:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2ac96:	687b      	ldr	r3, [r7, #4]
   2ac98:	69db      	ldr	r3, [r3, #28]
   2ac9a:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2ac9c:	4b0b      	ldr	r3, [pc, #44]	; (2accc <HardFault_HandlerC+0x68>)
   2ac9e:	681b      	ldr	r3, [r3, #0]
   2aca0:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2aca2:	4b0b      	ldr	r3, [pc, #44]	; (2acd0 <HardFault_HandlerC+0x6c>)
   2aca4:	681b      	ldr	r3, [r3, #0]
   2aca6:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2aca8:	4b0a      	ldr	r3, [pc, #40]	; (2acd4 <HardFault_HandlerC+0x70>)
   2acaa:	681b      	ldr	r3, [r3, #0]
   2acac:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2acae:	4b0a      	ldr	r3, [pc, #40]	; (2acd8 <HardFault_HandlerC+0x74>)
   2acb0:	681b      	ldr	r3, [r3, #0]
   2acb2:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2acb4:	4b09      	ldr	r3, [pc, #36]	; (2acdc <HardFault_HandlerC+0x78>)
   2acb6:	681b      	ldr	r3, [r3, #0]
   2acb8:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2acba:	4b09      	ldr	r3, [pc, #36]	; (2ace0 <HardFault_HandlerC+0x7c>)
   2acbc:	681b      	ldr	r3, [r3, #0]
   2acbe:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2acc0:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2acc2:	46c0      	nop			; (mov r8, r8)
   2acc4:	46bd      	mov	sp, r7
   2acc6:	b010      	add	sp, #64	; 0x40
   2acc8:	bd80      	pop	{r7, pc}
   2acca:	46c0      	nop			; (mov r8, r8)
   2accc:	e000ed28 	.word	0xe000ed28
   2acd0:	e000ed2c 	.word	0xe000ed2c
   2acd4:	e000ed30 	.word	0xe000ed30
   2acd8:	e000ed3c 	.word	0xe000ed3c
   2acdc:	e000ed34 	.word	0xe000ed34
   2ace0:	e000ed38 	.word	0xe000ed38

0002ace4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2ace4:	b580      	push	{r7, lr}
   2ace6:	b086      	sub	sp, #24
   2ace8:	af00      	add	r7, sp, #0
   2acea:	60f8      	str	r0, [r7, #12]
   2acec:	60b9      	str	r1, [r7, #8]
   2acee:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2acf0:	2300      	movs	r3, #0
   2acf2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2acf4:	68fb      	ldr	r3, [r7, #12]
   2acf6:	2b00      	cmp	r3, #0
   2acf8:	d012      	beq.n	2ad20 <_read+0x3c>
		return -1;
   2acfa:	2301      	movs	r3, #1
   2acfc:	425b      	negs	r3, r3
   2acfe:	e013      	b.n	2ad28 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2ad00:	4b0b      	ldr	r3, [pc, #44]	; (2ad30 <_read+0x4c>)
   2ad02:	681a      	ldr	r2, [r3, #0]
   2ad04:	4b0b      	ldr	r3, [pc, #44]	; (2ad34 <_read+0x50>)
   2ad06:	681b      	ldr	r3, [r3, #0]
   2ad08:	68b9      	ldr	r1, [r7, #8]
   2ad0a:	0018      	movs	r0, r3
   2ad0c:	4790      	blx	r2
		ptr++;
   2ad0e:	68bb      	ldr	r3, [r7, #8]
   2ad10:	3301      	adds	r3, #1
   2ad12:	60bb      	str	r3, [r7, #8]
		nChars++;
   2ad14:	697b      	ldr	r3, [r7, #20]
   2ad16:	3301      	adds	r3, #1
   2ad18:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2ad1a:	687b      	ldr	r3, [r7, #4]
   2ad1c:	3b01      	subs	r3, #1
   2ad1e:	607b      	str	r3, [r7, #4]
   2ad20:	687b      	ldr	r3, [r7, #4]
   2ad22:	2b00      	cmp	r3, #0
   2ad24:	dcec      	bgt.n	2ad00 <_read+0x1c>
	}
	return nChars;
   2ad26:	697b      	ldr	r3, [r7, #20]
}
   2ad28:	0018      	movs	r0, r3
   2ad2a:	46bd      	mov	sp, r7
   2ad2c:	b006      	add	sp, #24
   2ad2e:	bd80      	pop	{r7, pc}
   2ad30:	20005a60 	.word	0x20005a60
   2ad34:	20005a68 	.word	0x20005a68

0002ad38 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2ad38:	b580      	push	{r7, lr}
   2ad3a:	b086      	sub	sp, #24
   2ad3c:	af00      	add	r7, sp, #0
   2ad3e:	60f8      	str	r0, [r7, #12]
   2ad40:	60b9      	str	r1, [r7, #8]
   2ad42:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2ad44:	2300      	movs	r3, #0
   2ad46:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2ad48:	68fb      	ldr	r3, [r7, #12]
   2ad4a:	2b01      	cmp	r3, #1
   2ad4c:	d01d      	beq.n	2ad8a <_write+0x52>
   2ad4e:	68fb      	ldr	r3, [r7, #12]
   2ad50:	2b02      	cmp	r3, #2
   2ad52:	d01a      	beq.n	2ad8a <_write+0x52>
   2ad54:	68fb      	ldr	r3, [r7, #12]
   2ad56:	2b03      	cmp	r3, #3
   2ad58:	d017      	beq.n	2ad8a <_write+0x52>
		return -1;
   2ad5a:	2301      	movs	r3, #1
   2ad5c:	425b      	negs	r3, r3
   2ad5e:	e018      	b.n	2ad92 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2ad60:	4b0e      	ldr	r3, [pc, #56]	; (2ad9c <_write+0x64>)
   2ad62:	681a      	ldr	r2, [r3, #0]
   2ad64:	4b0e      	ldr	r3, [pc, #56]	; (2ada0 <_write+0x68>)
   2ad66:	6818      	ldr	r0, [r3, #0]
   2ad68:	68bb      	ldr	r3, [r7, #8]
   2ad6a:	1c59      	adds	r1, r3, #1
   2ad6c:	60b9      	str	r1, [r7, #8]
   2ad6e:	781b      	ldrb	r3, [r3, #0]
   2ad70:	0019      	movs	r1, r3
   2ad72:	4790      	blx	r2
   2ad74:	1e03      	subs	r3, r0, #0
   2ad76:	da02      	bge.n	2ad7e <_write+0x46>
			return -1;
   2ad78:	2301      	movs	r3, #1
   2ad7a:	425b      	negs	r3, r3
   2ad7c:	e009      	b.n	2ad92 <_write+0x5a>
		}
		++nChars;
   2ad7e:	697b      	ldr	r3, [r7, #20]
   2ad80:	3301      	adds	r3, #1
   2ad82:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2ad84:	687b      	ldr	r3, [r7, #4]
   2ad86:	3b01      	subs	r3, #1
   2ad88:	607b      	str	r3, [r7, #4]
   2ad8a:	687b      	ldr	r3, [r7, #4]
   2ad8c:	2b00      	cmp	r3, #0
   2ad8e:	d1e7      	bne.n	2ad60 <_write+0x28>
	}
	return nChars;
   2ad90:	697b      	ldr	r3, [r7, #20]
}
   2ad92:	0018      	movs	r0, r3
   2ad94:	46bd      	mov	sp, r7
   2ad96:	b006      	add	sp, #24
   2ad98:	bd80      	pop	{r7, pc}
   2ad9a:	46c0      	nop			; (mov r8, r8)
   2ad9c:	20005a64 	.word	0x20005a64
   2ada0:	20005a68 	.word	0x20005a68

0002ada4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2ada4:	b580      	push	{r7, lr}
   2ada6:	b084      	sub	sp, #16
   2ada8:	af00      	add	r7, sp, #0
   2adaa:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2adac:	4b0a      	ldr	r3, [pc, #40]	; (2add8 <_sbrk+0x34>)
   2adae:	681b      	ldr	r3, [r3, #0]
   2adb0:	2b00      	cmp	r3, #0
   2adb2:	d102      	bne.n	2adba <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2adb4:	4b08      	ldr	r3, [pc, #32]	; (2add8 <_sbrk+0x34>)
   2adb6:	4a09      	ldr	r2, [pc, #36]	; (2addc <_sbrk+0x38>)
   2adb8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2adba:	4b07      	ldr	r3, [pc, #28]	; (2add8 <_sbrk+0x34>)
   2adbc:	681b      	ldr	r3, [r3, #0]
   2adbe:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2adc0:	4b05      	ldr	r3, [pc, #20]	; (2add8 <_sbrk+0x34>)
   2adc2:	681a      	ldr	r2, [r3, #0]
   2adc4:	687b      	ldr	r3, [r7, #4]
   2adc6:	18d2      	adds	r2, r2, r3
   2adc8:	4b03      	ldr	r3, [pc, #12]	; (2add8 <_sbrk+0x34>)
   2adca:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2adcc:	68fb      	ldr	r3, [r7, #12]
}
   2adce:	0018      	movs	r0, r3
   2add0:	46bd      	mov	sp, r7
   2add2:	b004      	add	sp, #16
   2add4:	bd80      	pop	{r7, pc}
   2add6:	46c0      	nop			; (mov r8, r8)
   2add8:	20004174 	.word	0x20004174
   2addc:	20007ac8 	.word	0x20007ac8

0002ade0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2ade0:	b580      	push	{r7, lr}
   2ade2:	b082      	sub	sp, #8
   2ade4:	af00      	add	r7, sp, #0
   2ade6:	6078      	str	r0, [r7, #4]
	return -1;
   2ade8:	2301      	movs	r3, #1
   2adea:	425b      	negs	r3, r3
}
   2adec:	0018      	movs	r0, r3
   2adee:	46bd      	mov	sp, r7
   2adf0:	b002      	add	sp, #8
   2adf2:	bd80      	pop	{r7, pc}

0002adf4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2adf4:	b580      	push	{r7, lr}
   2adf6:	b082      	sub	sp, #8
   2adf8:	af00      	add	r7, sp, #0
   2adfa:	6078      	str	r0, [r7, #4]
   2adfc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2adfe:	683b      	ldr	r3, [r7, #0]
   2ae00:	2280      	movs	r2, #128	; 0x80
   2ae02:	0192      	lsls	r2, r2, #6
   2ae04:	605a      	str	r2, [r3, #4]

	return 0;
   2ae06:	2300      	movs	r3, #0
}
   2ae08:	0018      	movs	r0, r3
   2ae0a:	46bd      	mov	sp, r7
   2ae0c:	b002      	add	sp, #8
   2ae0e:	bd80      	pop	{r7, pc}

0002ae10 <_isatty>:

extern int _isatty(int file)
{
   2ae10:	b580      	push	{r7, lr}
   2ae12:	b082      	sub	sp, #8
   2ae14:	af00      	add	r7, sp, #0
   2ae16:	6078      	str	r0, [r7, #4]
	return 1;
   2ae18:	2301      	movs	r3, #1
}
   2ae1a:	0018      	movs	r0, r3
   2ae1c:	46bd      	mov	sp, r7
   2ae1e:	b002      	add	sp, #8
   2ae20:	bd80      	pop	{r7, pc}

0002ae22 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2ae22:	b580      	push	{r7, lr}
   2ae24:	b084      	sub	sp, #16
   2ae26:	af00      	add	r7, sp, #0
   2ae28:	60f8      	str	r0, [r7, #12]
   2ae2a:	60b9      	str	r1, [r7, #8]
   2ae2c:	607a      	str	r2, [r7, #4]
	return 0;
   2ae2e:	2300      	movs	r3, #0
}
   2ae30:	0018      	movs	r0, r3
   2ae32:	46bd      	mov	sp, r7
   2ae34:	b004      	add	sp, #16
   2ae36:	bd80      	pop	{r7, pc}

0002ae38 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2ae38:	b580      	push	{r7, lr}
   2ae3a:	b082      	sub	sp, #8
   2ae3c:	af00      	add	r7, sp, #0
   2ae3e:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2ae40:	687b      	ldr	r3, [r7, #4]
   2ae42:	2200      	movs	r2, #0
   2ae44:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2ae46:	687b      	ldr	r3, [r7, #4]
   2ae48:	2200      	movs	r2, #0
   2ae4a:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2ae4c:	687b      	ldr	r3, [r7, #4]
   2ae4e:	2200      	movs	r2, #0
   2ae50:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2ae52:	687b      	ldr	r3, [r7, #4]
   2ae54:	2200      	movs	r2, #0
   2ae56:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2ae58:	687b      	ldr	r3, [r7, #4]
   2ae5a:	2201      	movs	r2, #1
   2ae5c:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2ae5e:	687b      	ldr	r3, [r7, #4]
   2ae60:	2201      	movs	r2, #1
   2ae62:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2ae64:	687b      	ldr	r3, [r7, #4]
   2ae66:	22fa      	movs	r2, #250	; 0xfa
   2ae68:	00d2      	lsls	r2, r2, #3
   2ae6a:	80da      	strh	r2, [r3, #6]
}
   2ae6c:	46c0      	nop			; (mov r8, r8)
   2ae6e:	46bd      	mov	sp, r7
   2ae70:	b002      	add	sp, #8
   2ae72:	bd80      	pop	{r7, pc}

0002ae74 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2ae74:	b580      	push	{r7, lr}
   2ae76:	b086      	sub	sp, #24
   2ae78:	af00      	add	r7, sp, #0
   2ae7a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2ae7c:	230c      	movs	r3, #12
   2ae7e:	18fb      	adds	r3, r7, r3
   2ae80:	0018      	movs	r0, r3
   2ae82:	4b23      	ldr	r3, [pc, #140]	; (2af10 <rtc_calendar_get_config_defaults+0x9c>)
   2ae84:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2ae86:	687b      	ldr	r3, [r7, #4]
   2ae88:	22a0      	movs	r2, #160	; 0xa0
   2ae8a:	0112      	lsls	r2, r2, #4
   2ae8c:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2ae8e:	687b      	ldr	r3, [r7, #4]
   2ae90:	2200      	movs	r2, #0
   2ae92:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2ae94:	687b      	ldr	r3, [r7, #4]
   2ae96:	2200      	movs	r2, #0
   2ae98:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2ae9a:	687b      	ldr	r3, [r7, #4]
   2ae9c:	2200      	movs	r2, #0
   2ae9e:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2aea0:	687b      	ldr	r3, [r7, #4]
   2aea2:	22fa      	movs	r2, #250	; 0xfa
   2aea4:	00d2      	lsls	r2, r2, #3
   2aea6:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2aea8:	2317      	movs	r3, #23
   2aeaa:	18fb      	adds	r3, r7, r3
   2aeac:	2200      	movs	r2, #0
   2aeae:	701a      	strb	r2, [r3, #0]
   2aeb0:	e025      	b.n	2aefe <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2aeb2:	2317      	movs	r3, #23
   2aeb4:	18fb      	adds	r3, r7, r3
   2aeb6:	781a      	ldrb	r2, [r3, #0]
   2aeb8:	6879      	ldr	r1, [r7, #4]
   2aeba:	2008      	movs	r0, #8
   2aebc:	0013      	movs	r3, r2
   2aebe:	009b      	lsls	r3, r3, #2
   2aec0:	189b      	adds	r3, r3, r2
   2aec2:	005b      	lsls	r3, r3, #1
   2aec4:	18cb      	adds	r3, r1, r3
   2aec6:	181a      	adds	r2, r3, r0
   2aec8:	230c      	movs	r3, #12
   2aeca:	18fb      	adds	r3, r7, r3
   2aecc:	0010      	movs	r0, r2
   2aece:	0019      	movs	r1, r3
   2aed0:	2308      	movs	r3, #8
   2aed2:	001a      	movs	r2, r3
   2aed4:	4b0f      	ldr	r3, [pc, #60]	; (2af14 <rtc_calendar_get_config_defaults+0xa0>)
   2aed6:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2aed8:	2317      	movs	r3, #23
   2aeda:	18fb      	adds	r3, r7, r3
   2aedc:	781a      	ldrb	r2, [r3, #0]
   2aede:	6879      	ldr	r1, [r7, #4]
   2aee0:	0013      	movs	r3, r2
   2aee2:	009b      	lsls	r3, r3, #2
   2aee4:	189b      	adds	r3, r3, r2
   2aee6:	005b      	lsls	r3, r3, #1
   2aee8:	18cb      	adds	r3, r1, r3
   2aeea:	3310      	adds	r3, #16
   2aeec:	2206      	movs	r2, #6
   2aeee:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2aef0:	2317      	movs	r3, #23
   2aef2:	18fb      	adds	r3, r7, r3
   2aef4:	781a      	ldrb	r2, [r3, #0]
   2aef6:	2317      	movs	r3, #23
   2aef8:	18fb      	adds	r3, r7, r3
   2aefa:	3201      	adds	r2, #1
   2aefc:	701a      	strb	r2, [r3, #0]
   2aefe:	2317      	movs	r3, #23
   2af00:	18fb      	adds	r3, r7, r3
   2af02:	781b      	ldrb	r3, [r3, #0]
   2af04:	2b00      	cmp	r3, #0
   2af06:	d0d4      	beq.n	2aeb2 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2af08:	46c0      	nop			; (mov r8, r8)
   2af0a:	46bd      	mov	sp, r7
   2af0c:	b006      	add	sp, #24
   2af0e:	bd80      	pop	{r7, pc}
   2af10:	0002ae39 	.word	0x0002ae39
   2af14:	000345f9 	.word	0x000345f9

0002af18 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2af18:	b580      	push	{r7, lr}
   2af1a:	b088      	sub	sp, #32
   2af1c:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2af1e:	230c      	movs	r3, #12
   2af20:	18fb      	adds	r3, r7, r3
   2af22:	0018      	movs	r0, r3
   2af24:	4b1a      	ldr	r3, [pc, #104]	; (2af90 <configure_rtc_calendar+0x78>)
   2af26:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2af28:	1d3b      	adds	r3, r7, #4
   2af2a:	0018      	movs	r0, r3
   2af2c:	4b19      	ldr	r3, [pc, #100]	; (2af94 <configure_rtc_calendar+0x7c>)
   2af2e:	4798      	blx	r3
	init_time.year   = 2014;
   2af30:	1d3b      	adds	r3, r7, #4
   2af32:	4a19      	ldr	r2, [pc, #100]	; (2af98 <configure_rtc_calendar+0x80>)
   2af34:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2af36:	1d3b      	adds	r3, r7, #4
   2af38:	2201      	movs	r2, #1
   2af3a:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2af3c:	1d3b      	adds	r3, r7, #4
   2af3e:	2201      	movs	r2, #1
   2af40:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2af42:	1d3b      	adds	r3, r7, #4
   2af44:	2200      	movs	r2, #0
   2af46:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2af48:	1d3b      	adds	r3, r7, #4
   2af4a:	2200      	movs	r2, #0
   2af4c:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2af4e:	1d3b      	adds	r3, r7, #4
   2af50:	2204      	movs	r2, #4
   2af52:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2af54:	230c      	movs	r3, #12
   2af56:	18fb      	adds	r3, r7, r3
   2af58:	2201      	movs	r2, #1
   2af5a:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2af5c:	230c      	movs	r3, #12
   2af5e:	18fb      	adds	r3, r7, r3
   2af60:	1d3a      	adds	r2, r7, #4
   2af62:	3308      	adds	r3, #8
   2af64:	ca03      	ldmia	r2!, {r0, r1}
   2af66:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2af68:	230c      	movs	r3, #12
   2af6a:	18fb      	adds	r3, r7, r3
   2af6c:	2206      	movs	r2, #6
   2af6e:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2af70:	230c      	movs	r3, #12
   2af72:	18fa      	adds	r2, r7, r3
   2af74:	4909      	ldr	r1, [pc, #36]	; (2af9c <configure_rtc_calendar+0x84>)
   2af76:	4b0a      	ldr	r3, [pc, #40]	; (2afa0 <configure_rtc_calendar+0x88>)
   2af78:	0018      	movs	r0, r3
   2af7a:	4b0a      	ldr	r3, [pc, #40]	; (2afa4 <configure_rtc_calendar+0x8c>)
   2af7c:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2af7e:	4b08      	ldr	r3, [pc, #32]	; (2afa0 <configure_rtc_calendar+0x88>)
   2af80:	0018      	movs	r0, r3
   2af82:	4b09      	ldr	r3, [pc, #36]	; (2afa8 <configure_rtc_calendar+0x90>)
   2af84:	4798      	blx	r3
}
   2af86:	46c0      	nop			; (mov r8, r8)
   2af88:	46bd      	mov	sp, r7
   2af8a:	b008      	add	sp, #32
   2af8c:	bd80      	pop	{r7, pc}
   2af8e:	46c0      	nop			; (mov r8, r8)
   2af90:	0002ae75 	.word	0x0002ae75
   2af94:	0002ae39 	.word	0x0002ae39
   2af98:	000007de 	.word	0x000007de
   2af9c:	40001400 	.word	0x40001400
   2afa0:	20005a6c 	.word	0x20005a6c
   2afa4:	00026a55 	.word	0x00026a55
   2afa8:	00026781 	.word	0x00026781

0002afac <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2afac:	b590      	push	{r4, r7, lr}
   2afae:	b085      	sub	sp, #20
   2afb0:	af00      	add	r7, sp, #0
   2afb2:	0002      	movs	r2, r0
   2afb4:	1dfb      	adds	r3, r7, #7
   2afb6:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2afb8:	4b1a      	ldr	r3, [pc, #104]	; (2b024 <disk_initialize+0x78>)
   2afba:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2afbc:	1dfb      	adds	r3, r7, #7
   2afbe:	781b      	ldrb	r3, [r3, #0]
   2afc0:	2b01      	cmp	r3, #1
   2afc2:	d901      	bls.n	2afc8 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2afc4:	2301      	movs	r3, #1
   2afc6:	e029      	b.n	2b01c <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2afc8:	2300      	movs	r3, #0
   2afca:	60fb      	str	r3, [r7, #12]
   2afcc:	e010      	b.n	2aff0 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2afce:	230b      	movs	r3, #11
   2afd0:	18fc      	adds	r4, r7, r3
   2afd2:	1dfb      	adds	r3, r7, #7
   2afd4:	781b      	ldrb	r3, [r3, #0]
   2afd6:	0018      	movs	r0, r3
   2afd8:	4b13      	ldr	r3, [pc, #76]	; (2b028 <disk_initialize+0x7c>)
   2afda:	4798      	blx	r3
   2afdc:	0003      	movs	r3, r0
   2afde:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2afe0:	230b      	movs	r3, #11
   2afe2:	18fb      	adds	r3, r7, r3
   2afe4:	781b      	ldrb	r3, [r3, #0]
   2afe6:	2b03      	cmp	r3, #3
   2afe8:	d106      	bne.n	2aff8 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2afea:	68fb      	ldr	r3, [r7, #12]
   2afec:	3301      	adds	r3, #1
   2afee:	60fb      	str	r3, [r7, #12]
   2aff0:	68fb      	ldr	r3, [r7, #12]
   2aff2:	2b01      	cmp	r3, #1
   2aff4:	ddeb      	ble.n	2afce <disk_initialize+0x22>
   2aff6:	e000      	b.n	2affa <disk_initialize+0x4e>
			break;
   2aff8:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2affa:	230b      	movs	r3, #11
   2affc:	18fb      	adds	r3, r7, r3
   2affe:	781b      	ldrb	r3, [r3, #0]
   2b000:	2b00      	cmp	r3, #0
   2b002:	d001      	beq.n	2b008 <disk_initialize+0x5c>
		return STA_NOINIT;
   2b004:	2301      	movs	r3, #1
   2b006:	e009      	b.n	2b01c <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2b008:	1dfb      	adds	r3, r7, #7
   2b00a:	781b      	ldrb	r3, [r3, #0]
   2b00c:	0018      	movs	r0, r3
   2b00e:	4b07      	ldr	r3, [pc, #28]	; (2b02c <disk_initialize+0x80>)
   2b010:	4798      	blx	r3
   2b012:	1e03      	subs	r3, r0, #0
   2b014:	d001      	beq.n	2b01a <disk_initialize+0x6e>
		return STA_PROTECT;
   2b016:	2304      	movs	r3, #4
   2b018:	e000      	b.n	2b01c <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2b01a:	2300      	movs	r3, #0
}
   2b01c:	0018      	movs	r0, r3
   2b01e:	46bd      	mov	sp, r7
   2b020:	b005      	add	sp, #20
   2b022:	bd90      	pop	{r4, r7, pc}
   2b024:	0002af19 	.word	0x0002af19
   2b028:	00025c7d 	.word	0x00025c7d
   2b02c:	00025d35 	.word	0x00025d35

0002b030 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2b030:	b580      	push	{r7, lr}
   2b032:	b082      	sub	sp, #8
   2b034:	af00      	add	r7, sp, #0
   2b036:	0002      	movs	r2, r0
   2b038:	1dfb      	adds	r3, r7, #7
   2b03a:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2b03c:	1dfb      	adds	r3, r7, #7
   2b03e:	781b      	ldrb	r3, [r3, #0]
   2b040:	0018      	movs	r0, r3
   2b042:	4b08      	ldr	r3, [pc, #32]	; (2b064 <disk_status+0x34>)
   2b044:	4798      	blx	r3
   2b046:	1e03      	subs	r3, r0, #0
   2b048:	d002      	beq.n	2b050 <disk_status+0x20>
   2b04a:	2b02      	cmp	r3, #2
   2b04c:	d002      	beq.n	2b054 <disk_status+0x24>
   2b04e:	e003      	b.n	2b058 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2b050:	2300      	movs	r3, #0
   2b052:	e002      	b.n	2b05a <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2b054:	2303      	movs	r3, #3
   2b056:	e000      	b.n	2b05a <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2b058:	2301      	movs	r3, #1
	}
}
   2b05a:	0018      	movs	r0, r3
   2b05c:	46bd      	mov	sp, r7
   2b05e:	b002      	add	sp, #8
   2b060:	bd80      	pop	{r7, pc}
   2b062:	46c0      	nop			; (mov r8, r8)
   2b064:	00025c7d 	.word	0x00025c7d

0002b068 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2b068:	b590      	push	{r4, r7, lr}
   2b06a:	b089      	sub	sp, #36	; 0x24
   2b06c:	af00      	add	r7, sp, #0
   2b06e:	60b9      	str	r1, [r7, #8]
   2b070:	607a      	str	r2, [r7, #4]
   2b072:	0019      	movs	r1, r3
   2b074:	230f      	movs	r3, #15
   2b076:	18fb      	adds	r3, r7, r3
   2b078:	1c02      	adds	r2, r0, #0
   2b07a:	701a      	strb	r2, [r3, #0]
   2b07c:	230e      	movs	r3, #14
   2b07e:	18fb      	adds	r3, r7, r3
   2b080:	1c0a      	adds	r2, r1, #0
   2b082:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2b084:	231b      	movs	r3, #27
   2b086:	18fc      	adds	r4, r7, r3
   2b088:	230f      	movs	r3, #15
   2b08a:	18fb      	adds	r3, r7, r3
   2b08c:	781b      	ldrb	r3, [r3, #0]
   2b08e:	0018      	movs	r0, r3
   2b090:	4b28      	ldr	r3, [pc, #160]	; (2b134 <disk_read+0xcc>)
   2b092:	4798      	blx	r3
   2b094:	0003      	movs	r3, r0
   2b096:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2b098:	231b      	movs	r3, #27
   2b09a:	18fb      	adds	r3, r7, r3
   2b09c:	781b      	ldrb	r3, [r3, #0]
   2b09e:	2b00      	cmp	r3, #0
   2b0a0:	d101      	bne.n	2b0a6 <disk_read+0x3e>
		return RES_ERROR;
   2b0a2:	2301      	movs	r3, #1
   2b0a4:	e042      	b.n	2b12c <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2b0a6:	2314      	movs	r3, #20
   2b0a8:	18fa      	adds	r2, r7, r3
   2b0aa:	230f      	movs	r3, #15
   2b0ac:	18fb      	adds	r3, r7, r3
   2b0ae:	781b      	ldrb	r3, [r3, #0]
   2b0b0:	0011      	movs	r1, r2
   2b0b2:	0018      	movs	r0, r3
   2b0b4:	4b20      	ldr	r3, [pc, #128]	; (2b138 <disk_read+0xd0>)
   2b0b6:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2b0b8:	230e      	movs	r3, #14
   2b0ba:	18fb      	adds	r3, r7, r3
   2b0bc:	781b      	ldrb	r3, [r3, #0]
   2b0be:	221b      	movs	r2, #27
   2b0c0:	18ba      	adds	r2, r7, r2
   2b0c2:	7812      	ldrb	r2, [r2, #0]
   2b0c4:	4353      	muls	r3, r2
   2b0c6:	001a      	movs	r2, r3
   2b0c8:	687b      	ldr	r3, [r7, #4]
   2b0ca:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2b0cc:	697b      	ldr	r3, [r7, #20]
   2b0ce:	3301      	adds	r3, #1
   2b0d0:	211b      	movs	r1, #27
   2b0d2:	1879      	adds	r1, r7, r1
   2b0d4:	7809      	ldrb	r1, [r1, #0]
   2b0d6:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2b0d8:	429a      	cmp	r2, r3
   2b0da:	d901      	bls.n	2b0e0 <disk_read+0x78>
		return RES_PARERR;
   2b0dc:	2304      	movs	r3, #4
   2b0de:	e025      	b.n	2b12c <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2b0e0:	2300      	movs	r3, #0
   2b0e2:	61fb      	str	r3, [r7, #28]
   2b0e4:	e01b      	b.n	2b11e <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2b0e6:	231b      	movs	r3, #27
   2b0e8:	18fb      	adds	r3, r7, r3
   2b0ea:	781b      	ldrb	r3, [r3, #0]
   2b0ec:	69fa      	ldr	r2, [r7, #28]
   2b0ee:	435a      	muls	r2, r3
   2b0f0:	687b      	ldr	r3, [r7, #4]
   2b0f2:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2b0f4:	231b      	movs	r3, #27
   2b0f6:	18fb      	adds	r3, r7, r3
   2b0f8:	781b      	ldrb	r3, [r3, #0]
   2b0fa:	69fa      	ldr	r2, [r7, #28]
   2b0fc:	4353      	muls	r3, r2
   2b0fe:	025b      	lsls	r3, r3, #9
   2b100:	68ba      	ldr	r2, [r7, #8]
   2b102:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2b104:	230f      	movs	r3, #15
   2b106:	18fb      	adds	r3, r7, r3
   2b108:	781b      	ldrb	r3, [r3, #0]
   2b10a:	0018      	movs	r0, r3
   2b10c:	4b0b      	ldr	r3, [pc, #44]	; (2b13c <disk_read+0xd4>)
   2b10e:	4798      	blx	r3
   2b110:	1e03      	subs	r3, r0, #0
   2b112:	d001      	beq.n	2b118 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2b114:	2301      	movs	r3, #1
   2b116:	e009      	b.n	2b12c <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2b118:	69fb      	ldr	r3, [r7, #28]
   2b11a:	3301      	adds	r3, #1
   2b11c:	61fb      	str	r3, [r7, #28]
   2b11e:	230e      	movs	r3, #14
   2b120:	18fb      	adds	r3, r7, r3
   2b122:	781a      	ldrb	r2, [r3, #0]
   2b124:	69fb      	ldr	r3, [r7, #28]
   2b126:	429a      	cmp	r2, r3
   2b128:	d8dd      	bhi.n	2b0e6 <disk_read+0x7e>
		}
	}

	return RES_OK;
   2b12a:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2b12c:	0018      	movs	r0, r3
   2b12e:	46bd      	mov	sp, r7
   2b130:	b009      	add	sp, #36	; 0x24
   2b132:	bd90      	pop	{r4, r7, pc}
   2b134:	00025d09 	.word	0x00025d09
   2b138:	00025cbd 	.word	0x00025cbd
   2b13c:	00025d7d 	.word	0x00025d7d

0002b140 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2b140:	b590      	push	{r4, r7, lr}
   2b142:	b089      	sub	sp, #36	; 0x24
   2b144:	af00      	add	r7, sp, #0
   2b146:	60b9      	str	r1, [r7, #8]
   2b148:	607a      	str	r2, [r7, #4]
   2b14a:	0019      	movs	r1, r3
   2b14c:	230f      	movs	r3, #15
   2b14e:	18fb      	adds	r3, r7, r3
   2b150:	1c02      	adds	r2, r0, #0
   2b152:	701a      	strb	r2, [r3, #0]
   2b154:	230e      	movs	r3, #14
   2b156:	18fb      	adds	r3, r7, r3
   2b158:	1c0a      	adds	r2, r1, #0
   2b15a:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2b15c:	231b      	movs	r3, #27
   2b15e:	18fc      	adds	r4, r7, r3
   2b160:	230f      	movs	r3, #15
   2b162:	18fb      	adds	r3, r7, r3
   2b164:	781b      	ldrb	r3, [r3, #0]
   2b166:	0018      	movs	r0, r3
   2b168:	4b28      	ldr	r3, [pc, #160]	; (2b20c <disk_write+0xcc>)
   2b16a:	4798      	blx	r3
   2b16c:	0003      	movs	r3, r0
   2b16e:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2b170:	231b      	movs	r3, #27
   2b172:	18fb      	adds	r3, r7, r3
   2b174:	781b      	ldrb	r3, [r3, #0]
   2b176:	2b00      	cmp	r3, #0
   2b178:	d101      	bne.n	2b17e <disk_write+0x3e>
		return RES_ERROR;
   2b17a:	2301      	movs	r3, #1
   2b17c:	e042      	b.n	2b204 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2b17e:	2314      	movs	r3, #20
   2b180:	18fa      	adds	r2, r7, r3
   2b182:	230f      	movs	r3, #15
   2b184:	18fb      	adds	r3, r7, r3
   2b186:	781b      	ldrb	r3, [r3, #0]
   2b188:	0011      	movs	r1, r2
   2b18a:	0018      	movs	r0, r3
   2b18c:	4b20      	ldr	r3, [pc, #128]	; (2b210 <disk_write+0xd0>)
   2b18e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2b190:	230e      	movs	r3, #14
   2b192:	18fb      	adds	r3, r7, r3
   2b194:	781b      	ldrb	r3, [r3, #0]
   2b196:	221b      	movs	r2, #27
   2b198:	18ba      	adds	r2, r7, r2
   2b19a:	7812      	ldrb	r2, [r2, #0]
   2b19c:	4353      	muls	r3, r2
   2b19e:	001a      	movs	r2, r3
   2b1a0:	687b      	ldr	r3, [r7, #4]
   2b1a2:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2b1a4:	697b      	ldr	r3, [r7, #20]
   2b1a6:	3301      	adds	r3, #1
   2b1a8:	211b      	movs	r1, #27
   2b1aa:	1879      	adds	r1, r7, r1
   2b1ac:	7809      	ldrb	r1, [r1, #0]
   2b1ae:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2b1b0:	429a      	cmp	r2, r3
   2b1b2:	d901      	bls.n	2b1b8 <disk_write+0x78>
		return RES_PARERR;
   2b1b4:	2304      	movs	r3, #4
   2b1b6:	e025      	b.n	2b204 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2b1b8:	2300      	movs	r3, #0
   2b1ba:	61fb      	str	r3, [r7, #28]
   2b1bc:	e01b      	b.n	2b1f6 <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2b1be:	231b      	movs	r3, #27
   2b1c0:	18fb      	adds	r3, r7, r3
   2b1c2:	781b      	ldrb	r3, [r3, #0]
   2b1c4:	69fa      	ldr	r2, [r7, #28]
   2b1c6:	435a      	muls	r2, r3
   2b1c8:	687b      	ldr	r3, [r7, #4]
   2b1ca:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2b1cc:	231b      	movs	r3, #27
   2b1ce:	18fb      	adds	r3, r7, r3
   2b1d0:	781b      	ldrb	r3, [r3, #0]
   2b1d2:	69fa      	ldr	r2, [r7, #28]
   2b1d4:	4353      	muls	r3, r2
   2b1d6:	025b      	lsls	r3, r3, #9
   2b1d8:	68ba      	ldr	r2, [r7, #8]
   2b1da:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2b1dc:	230f      	movs	r3, #15
   2b1de:	18fb      	adds	r3, r7, r3
   2b1e0:	781b      	ldrb	r3, [r3, #0]
   2b1e2:	0018      	movs	r0, r3
   2b1e4:	4b0b      	ldr	r3, [pc, #44]	; (2b214 <disk_write+0xd4>)
   2b1e6:	4798      	blx	r3
   2b1e8:	1e03      	subs	r3, r0, #0
   2b1ea:	d001      	beq.n	2b1f0 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2b1ec:	2301      	movs	r3, #1
   2b1ee:	e009      	b.n	2b204 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2b1f0:	69fb      	ldr	r3, [r7, #28]
   2b1f2:	3301      	adds	r3, #1
   2b1f4:	61fb      	str	r3, [r7, #28]
   2b1f6:	230e      	movs	r3, #14
   2b1f8:	18fb      	adds	r3, r7, r3
   2b1fa:	781a      	ldrb	r2, [r3, #0]
   2b1fc:	69fb      	ldr	r3, [r7, #28]
   2b1fe:	429a      	cmp	r2, r3
   2b200:	d8dd      	bhi.n	2b1be <disk_write+0x7e>
		}
	}

	return RES_OK;
   2b202:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2b204:	0018      	movs	r0, r3
   2b206:	46bd      	mov	sp, r7
   2b208:	b009      	add	sp, #36	; 0x24
   2b20a:	bd90      	pop	{r4, r7, pc}
   2b20c:	00025d09 	.word	0x00025d09
   2b210:	00025cbd 	.word	0x00025cbd
   2b214:	00025dd1 	.word	0x00025dd1

0002b218 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2b218:	b590      	push	{r4, r7, lr}
   2b21a:	b085      	sub	sp, #20
   2b21c:	af00      	add	r7, sp, #0
   2b21e:	603a      	str	r2, [r7, #0]
   2b220:	1dfb      	adds	r3, r7, #7
   2b222:	1c02      	adds	r2, r0, #0
   2b224:	701a      	strb	r2, [r3, #0]
   2b226:	1dbb      	adds	r3, r7, #6
   2b228:	1c0a      	adds	r2, r1, #0
   2b22a:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2b22c:	230f      	movs	r3, #15
   2b22e:	18fb      	adds	r3, r7, r3
   2b230:	2204      	movs	r2, #4
   2b232:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2b234:	1dbb      	adds	r3, r7, #6
   2b236:	781b      	ldrb	r3, [r3, #0]
   2b238:	2b01      	cmp	r3, #1
   2b23a:	d00f      	beq.n	2b25c <disk_ioctl+0x44>
   2b23c:	dc02      	bgt.n	2b244 <disk_ioctl+0x2c>
   2b23e:	2b00      	cmp	r3, #0
   2b240:	d044      	beq.n	2b2cc <disk_ioctl+0xb4>
   2b242:	e054      	b.n	2b2ee <disk_ioctl+0xd6>
   2b244:	2b02      	cmp	r3, #2
   2b246:	d01a      	beq.n	2b27e <disk_ioctl+0x66>
   2b248:	2b03      	cmp	r3, #3
   2b24a:	d150      	bne.n	2b2ee <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2b24c:	683b      	ldr	r3, [r7, #0]
   2b24e:	2201      	movs	r2, #1
   2b250:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2b252:	230f      	movs	r3, #15
   2b254:	18fb      	adds	r3, r7, r3
   2b256:	2200      	movs	r2, #0
   2b258:	701a      	strb	r2, [r3, #0]
		break;
   2b25a:	e04c      	b.n	2b2f6 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2b25c:	2308      	movs	r3, #8
   2b25e:	18fa      	adds	r2, r7, r3
   2b260:	1dfb      	adds	r3, r7, #7
   2b262:	781b      	ldrb	r3, [r3, #0]
   2b264:	0011      	movs	r1, r2
   2b266:	0018      	movs	r0, r3
   2b268:	4b26      	ldr	r3, [pc, #152]	; (2b304 <disk_ioctl+0xec>)
   2b26a:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2b26c:	68bb      	ldr	r3, [r7, #8]
   2b26e:	1c5a      	adds	r2, r3, #1
   2b270:	683b      	ldr	r3, [r7, #0]
   2b272:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2b274:	230f      	movs	r3, #15
   2b276:	18fb      	adds	r3, r7, r3
   2b278:	2200      	movs	r2, #0
   2b27a:	701a      	strb	r2, [r3, #0]
	}
	break;
   2b27c:	e03b      	b.n	2b2f6 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2b27e:	230e      	movs	r3, #14
   2b280:	18fc      	adds	r4, r7, r3
   2b282:	1dfb      	adds	r3, r7, #7
   2b284:	781b      	ldrb	r3, [r3, #0]
   2b286:	0018      	movs	r0, r3
   2b288:	4b1f      	ldr	r3, [pc, #124]	; (2b308 <disk_ioctl+0xf0>)
   2b28a:	4798      	blx	r3
   2b28c:	0003      	movs	r3, r0
   2b28e:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2b290:	230e      	movs	r3, #14
   2b292:	18fb      	adds	r3, r7, r3
   2b294:	781b      	ldrb	r3, [r3, #0]
   2b296:	2b01      	cmp	r3, #1
   2b298:	d010      	beq.n	2b2bc <disk_ioctl+0xa4>
   2b29a:	230e      	movs	r3, #14
   2b29c:	18fb      	adds	r3, r7, r3
   2b29e:	781b      	ldrb	r3, [r3, #0]
   2b2a0:	2b02      	cmp	r3, #2
   2b2a2:	d00b      	beq.n	2b2bc <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2b2a4:	230e      	movs	r3, #14
   2b2a6:	18fb      	adds	r3, r7, r3
   2b2a8:	781b      	ldrb	r3, [r3, #0]
   2b2aa:	2b04      	cmp	r3, #4
   2b2ac:	d006      	beq.n	2b2bc <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2b2ae:	230e      	movs	r3, #14
   2b2b0:	18fb      	adds	r3, r7, r3
   2b2b2:	781b      	ldrb	r3, [r3, #0]
   2b2b4:	2b08      	cmp	r3, #8
   2b2b6:	d001      	beq.n	2b2bc <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2b2b8:	2301      	movs	r3, #1
   2b2ba:	e01f      	b.n	2b2fc <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2b2bc:	683b      	ldr	r3, [r7, #0]
   2b2be:	2200      	movs	r2, #0
   2b2c0:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2b2c2:	230f      	movs	r3, #15
   2b2c4:	18fb      	adds	r3, r7, r3
   2b2c6:	2200      	movs	r2, #0
   2b2c8:	701a      	strb	r2, [r3, #0]
	}
	break;
   2b2ca:	e014      	b.n	2b2f6 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2b2cc:	1dfb      	adds	r3, r7, #7
   2b2ce:	781b      	ldrb	r3, [r3, #0]
   2b2d0:	0018      	movs	r0, r3
   2b2d2:	4b0e      	ldr	r3, [pc, #56]	; (2b30c <disk_ioctl+0xf4>)
   2b2d4:	4798      	blx	r3
   2b2d6:	1e03      	subs	r3, r0, #0
   2b2d8:	d104      	bne.n	2b2e4 <disk_ioctl+0xcc>
			res = RES_OK;
   2b2da:	230f      	movs	r3, #15
   2b2dc:	18fb      	adds	r3, r7, r3
   2b2de:	2200      	movs	r2, #0
   2b2e0:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2b2e2:	e008      	b.n	2b2f6 <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2b2e4:	230f      	movs	r3, #15
   2b2e6:	18fb      	adds	r3, r7, r3
   2b2e8:	2203      	movs	r2, #3
   2b2ea:	701a      	strb	r2, [r3, #0]
		break;
   2b2ec:	e003      	b.n	2b2f6 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2b2ee:	230f      	movs	r3, #15
   2b2f0:	18fb      	adds	r3, r7, r3
   2b2f2:	2204      	movs	r2, #4
   2b2f4:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2b2f6:	230f      	movs	r3, #15
   2b2f8:	18fb      	adds	r3, r7, r3
   2b2fa:	781b      	ldrb	r3, [r3, #0]
}
   2b2fc:	0018      	movs	r0, r3
   2b2fe:	46bd      	mov	sp, r7
   2b300:	b005      	add	sp, #20
   2b302:	bd90      	pop	{r4, r7, pc}
   2b304:	00025cbd 	.word	0x00025cbd
   2b308:	00025d09 	.word	0x00025d09
   2b30c:	00025c7d 	.word	0x00025c7d

0002b310 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2b310:	b580      	push	{r7, lr}
   2b312:	b084      	sub	sp, #16
   2b314:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2b316:	1d3a      	adds	r2, r7, #4
   2b318:	4b12      	ldr	r3, [pc, #72]	; (2b364 <get_fattime+0x54>)
   2b31a:	0011      	movs	r1, r2
   2b31c:	0018      	movs	r0, r3
   2b31e:	4b12      	ldr	r3, [pc, #72]	; (2b368 <get_fattime+0x58>)
   2b320:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2b322:	1d3b      	adds	r3, r7, #4
   2b324:	88db      	ldrh	r3, [r3, #6]
   2b326:	4a11      	ldr	r2, [pc, #68]	; (2b36c <get_fattime+0x5c>)
   2b328:	4694      	mov	ip, r2
   2b32a:	4463      	add	r3, ip
   2b32c:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2b32e:	1d3b      	adds	r3, r7, #4
   2b330:	795b      	ldrb	r3, [r3, #5]
   2b332:	055b      	lsls	r3, r3, #21
   2b334:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2b336:	1d3b      	adds	r3, r7, #4
   2b338:	791b      	ldrb	r3, [r3, #4]
   2b33a:	041b      	lsls	r3, r3, #16
   2b33c:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2b33e:	1d3b      	adds	r3, r7, #4
   2b340:	789b      	ldrb	r3, [r3, #2]
   2b342:	02db      	lsls	r3, r3, #11
   2b344:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2b346:	1d3b      	adds	r3, r7, #4
   2b348:	785b      	ldrb	r3, [r3, #1]
   2b34a:	015b      	lsls	r3, r3, #5
   2b34c:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2b34e:	1d3a      	adds	r2, r7, #4
   2b350:	7812      	ldrb	r2, [r2, #0]
   2b352:	0852      	lsrs	r2, r2, #1
   2b354:	b2d2      	uxtb	r2, r2
   2b356:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2b358:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2b35a:	68fb      	ldr	r3, [r7, #12]
}
   2b35c:	0018      	movs	r0, r3
   2b35e:	46bd      	mov	sp, r7
   2b360:	b004      	add	sp, #16
   2b362:	bd80      	pop	{r7, pc}
   2b364:	20005a6c 	.word	0x20005a6c
   2b368:	00026ae9 	.word	0x00026ae9
   2b36c:	fffff844 	.word	0xfffff844

0002b370 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2b370:	b580      	push	{r7, lr}
   2b372:	b086      	sub	sp, #24
   2b374:	af00      	add	r7, sp, #0
   2b376:	60f8      	str	r0, [r7, #12]
   2b378:	60b9      	str	r1, [r7, #8]
   2b37a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2b37c:	68fb      	ldr	r3, [r7, #12]
   2b37e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2b380:	68bb      	ldr	r3, [r7, #8]
   2b382:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2b384:	e007      	b.n	2b396 <mem_cpy+0x26>
		*d++ = *s++;
   2b386:	697b      	ldr	r3, [r7, #20]
   2b388:	1c5a      	adds	r2, r3, #1
   2b38a:	617a      	str	r2, [r7, #20]
   2b38c:	693a      	ldr	r2, [r7, #16]
   2b38e:	1c51      	adds	r1, r2, #1
   2b390:	6139      	str	r1, [r7, #16]
   2b392:	7812      	ldrb	r2, [r2, #0]
   2b394:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2b396:	687b      	ldr	r3, [r7, #4]
   2b398:	1e5a      	subs	r2, r3, #1
   2b39a:	607a      	str	r2, [r7, #4]
   2b39c:	2b00      	cmp	r3, #0
   2b39e:	d1f2      	bne.n	2b386 <mem_cpy+0x16>
}
   2b3a0:	46c0      	nop			; (mov r8, r8)
   2b3a2:	46bd      	mov	sp, r7
   2b3a4:	b006      	add	sp, #24
   2b3a6:	bd80      	pop	{r7, pc}

0002b3a8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2b3a8:	b580      	push	{r7, lr}
   2b3aa:	b086      	sub	sp, #24
   2b3ac:	af00      	add	r7, sp, #0
   2b3ae:	60f8      	str	r0, [r7, #12]
   2b3b0:	60b9      	str	r1, [r7, #8]
   2b3b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2b3b4:	68fb      	ldr	r3, [r7, #12]
   2b3b6:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2b3b8:	e005      	b.n	2b3c6 <mem_set+0x1e>
		*d++ = (BYTE)val;
   2b3ba:	697b      	ldr	r3, [r7, #20]
   2b3bc:	1c5a      	adds	r2, r3, #1
   2b3be:	617a      	str	r2, [r7, #20]
   2b3c0:	68ba      	ldr	r2, [r7, #8]
   2b3c2:	b2d2      	uxtb	r2, r2
   2b3c4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2b3c6:	687b      	ldr	r3, [r7, #4]
   2b3c8:	1e5a      	subs	r2, r3, #1
   2b3ca:	607a      	str	r2, [r7, #4]
   2b3cc:	2b00      	cmp	r3, #0
   2b3ce:	d1f4      	bne.n	2b3ba <mem_set+0x12>
}
   2b3d0:	46c0      	nop			; (mov r8, r8)
   2b3d2:	46bd      	mov	sp, r7
   2b3d4:	b006      	add	sp, #24
   2b3d6:	bd80      	pop	{r7, pc}

0002b3d8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2b3d8:	b580      	push	{r7, lr}
   2b3da:	b088      	sub	sp, #32
   2b3dc:	af00      	add	r7, sp, #0
   2b3de:	60f8      	str	r0, [r7, #12]
   2b3e0:	60b9      	str	r1, [r7, #8]
   2b3e2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2b3e4:	68fb      	ldr	r3, [r7, #12]
   2b3e6:	61fb      	str	r3, [r7, #28]
   2b3e8:	68bb      	ldr	r3, [r7, #8]
   2b3ea:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2b3ec:	2300      	movs	r3, #0
   2b3ee:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2b3f0:	46c0      	nop			; (mov r8, r8)
   2b3f2:	687b      	ldr	r3, [r7, #4]
   2b3f4:	1e5a      	subs	r2, r3, #1
   2b3f6:	607a      	str	r2, [r7, #4]
   2b3f8:	2b00      	cmp	r3, #0
   2b3fa:	d00d      	beq.n	2b418 <mem_cmp+0x40>
   2b3fc:	69fb      	ldr	r3, [r7, #28]
   2b3fe:	1c5a      	adds	r2, r3, #1
   2b400:	61fa      	str	r2, [r7, #28]
   2b402:	781b      	ldrb	r3, [r3, #0]
   2b404:	0019      	movs	r1, r3
   2b406:	69bb      	ldr	r3, [r7, #24]
   2b408:	1c5a      	adds	r2, r3, #1
   2b40a:	61ba      	str	r2, [r7, #24]
   2b40c:	781b      	ldrb	r3, [r3, #0]
   2b40e:	1acb      	subs	r3, r1, r3
   2b410:	617b      	str	r3, [r7, #20]
   2b412:	697b      	ldr	r3, [r7, #20]
   2b414:	2b00      	cmp	r3, #0
   2b416:	d0ec      	beq.n	2b3f2 <mem_cmp+0x1a>
	return r;
   2b418:	697b      	ldr	r3, [r7, #20]
}
   2b41a:	0018      	movs	r0, r3
   2b41c:	46bd      	mov	sp, r7
   2b41e:	b008      	add	sp, #32
   2b420:	bd80      	pop	{r7, pc}

0002b422 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2b422:	b580      	push	{r7, lr}
   2b424:	b082      	sub	sp, #8
   2b426:	af00      	add	r7, sp, #0
   2b428:	6078      	str	r0, [r7, #4]
   2b42a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2b42c:	e002      	b.n	2b434 <chk_chr+0x12>
   2b42e:	687b      	ldr	r3, [r7, #4]
   2b430:	3301      	adds	r3, #1
   2b432:	607b      	str	r3, [r7, #4]
   2b434:	687b      	ldr	r3, [r7, #4]
   2b436:	781b      	ldrb	r3, [r3, #0]
   2b438:	2b00      	cmp	r3, #0
   2b43a:	d005      	beq.n	2b448 <chk_chr+0x26>
   2b43c:	687b      	ldr	r3, [r7, #4]
   2b43e:	781b      	ldrb	r3, [r3, #0]
   2b440:	001a      	movs	r2, r3
   2b442:	683b      	ldr	r3, [r7, #0]
   2b444:	429a      	cmp	r2, r3
   2b446:	d1f2      	bne.n	2b42e <chk_chr+0xc>
	return *str;
   2b448:	687b      	ldr	r3, [r7, #4]
   2b44a:	781b      	ldrb	r3, [r3, #0]
}
   2b44c:	0018      	movs	r0, r3
   2b44e:	46bd      	mov	sp, r7
   2b450:	b002      	add	sp, #8
   2b452:	bd80      	pop	{r7, pc}

0002b454 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2b454:	b590      	push	{r4, r7, lr}
   2b456:	b085      	sub	sp, #20
   2b458:	af00      	add	r7, sp, #0
   2b45a:	6078      	str	r0, [r7, #4]
   2b45c:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2b45e:	687b      	ldr	r3, [r7, #4]
   2b460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2b462:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2b464:	68fa      	ldr	r2, [r7, #12]
   2b466:	683b      	ldr	r3, [r7, #0]
   2b468:	429a      	cmp	r2, r3
   2b46a:	d04e      	beq.n	2b50a <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2b46c:	687b      	ldr	r3, [r7, #4]
   2b46e:	791b      	ldrb	r3, [r3, #4]
   2b470:	2b00      	cmp	r3, #0
   2b472:	d037      	beq.n	2b4e4 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2b474:	687b      	ldr	r3, [r7, #4]
   2b476:	7858      	ldrb	r0, [r3, #1]
   2b478:	687b      	ldr	r3, [r7, #4]
   2b47a:	3330      	adds	r3, #48	; 0x30
   2b47c:	0019      	movs	r1, r3
   2b47e:	68fa      	ldr	r2, [r7, #12]
   2b480:	2301      	movs	r3, #1
   2b482:	4c24      	ldr	r4, [pc, #144]	; (2b514 <move_window+0xc0>)
   2b484:	47a0      	blx	r4
   2b486:	1e03      	subs	r3, r0, #0
   2b488:	d001      	beq.n	2b48e <move_window+0x3a>
				return FR_DISK_ERR;
   2b48a:	2301      	movs	r3, #1
   2b48c:	e03e      	b.n	2b50c <move_window+0xb8>
			fs->wflag = 0;
   2b48e:	687b      	ldr	r3, [r7, #4]
   2b490:	2200      	movs	r2, #0
   2b492:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2b494:	687b      	ldr	r3, [r7, #4]
   2b496:	6a1a      	ldr	r2, [r3, #32]
   2b498:	687b      	ldr	r3, [r7, #4]
   2b49a:	69db      	ldr	r3, [r3, #28]
   2b49c:	18d2      	adds	r2, r2, r3
   2b49e:	68fb      	ldr	r3, [r7, #12]
   2b4a0:	429a      	cmp	r2, r3
   2b4a2:	d91f      	bls.n	2b4e4 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2b4a4:	230b      	movs	r3, #11
   2b4a6:	18fb      	adds	r3, r7, r3
   2b4a8:	687a      	ldr	r2, [r7, #4]
   2b4aa:	78d2      	ldrb	r2, [r2, #3]
   2b4ac:	701a      	strb	r2, [r3, #0]
   2b4ae:	e014      	b.n	2b4da <move_window+0x86>
					wsect += fs->fsize;
   2b4b0:	687b      	ldr	r3, [r7, #4]
   2b4b2:	69db      	ldr	r3, [r3, #28]
   2b4b4:	68fa      	ldr	r2, [r7, #12]
   2b4b6:	18d3      	adds	r3, r2, r3
   2b4b8:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2b4ba:	687b      	ldr	r3, [r7, #4]
   2b4bc:	7858      	ldrb	r0, [r3, #1]
   2b4be:	687b      	ldr	r3, [r7, #4]
   2b4c0:	3330      	adds	r3, #48	; 0x30
   2b4c2:	0019      	movs	r1, r3
   2b4c4:	68fa      	ldr	r2, [r7, #12]
   2b4c6:	2301      	movs	r3, #1
   2b4c8:	4c12      	ldr	r4, [pc, #72]	; (2b514 <move_window+0xc0>)
   2b4ca:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2b4cc:	230b      	movs	r3, #11
   2b4ce:	18fb      	adds	r3, r7, r3
   2b4d0:	781a      	ldrb	r2, [r3, #0]
   2b4d2:	230b      	movs	r3, #11
   2b4d4:	18fb      	adds	r3, r7, r3
   2b4d6:	3a01      	subs	r2, #1
   2b4d8:	701a      	strb	r2, [r3, #0]
   2b4da:	230b      	movs	r3, #11
   2b4dc:	18fb      	adds	r3, r7, r3
   2b4de:	781b      	ldrb	r3, [r3, #0]
   2b4e0:	2b01      	cmp	r3, #1
   2b4e2:	d8e5      	bhi.n	2b4b0 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2b4e4:	683b      	ldr	r3, [r7, #0]
   2b4e6:	2b00      	cmp	r3, #0
   2b4e8:	d00f      	beq.n	2b50a <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2b4ea:	687b      	ldr	r3, [r7, #4]
   2b4ec:	7858      	ldrb	r0, [r3, #1]
   2b4ee:	687b      	ldr	r3, [r7, #4]
   2b4f0:	3330      	adds	r3, #48	; 0x30
   2b4f2:	0019      	movs	r1, r3
   2b4f4:	683a      	ldr	r2, [r7, #0]
   2b4f6:	2301      	movs	r3, #1
   2b4f8:	4c07      	ldr	r4, [pc, #28]	; (2b518 <move_window+0xc4>)
   2b4fa:	47a0      	blx	r4
   2b4fc:	1e03      	subs	r3, r0, #0
   2b4fe:	d001      	beq.n	2b504 <move_window+0xb0>
				return FR_DISK_ERR;
   2b500:	2301      	movs	r3, #1
   2b502:	e003      	b.n	2b50c <move_window+0xb8>
			fs->winsect = sector;
   2b504:	687b      	ldr	r3, [r7, #4]
   2b506:	683a      	ldr	r2, [r7, #0]
   2b508:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2b50a:	2300      	movs	r3, #0
}
   2b50c:	0018      	movs	r0, r3
   2b50e:	46bd      	mov	sp, r7
   2b510:	b005      	add	sp, #20
   2b512:	bd90      	pop	{r4, r7, pc}
   2b514:	0002b141 	.word	0x0002b141
   2b518:	0002b069 	.word	0x0002b069

0002b51c <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2b51c:	b590      	push	{r4, r7, lr}
   2b51e:	b085      	sub	sp, #20
   2b520:	af00      	add	r7, sp, #0
   2b522:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2b524:	230f      	movs	r3, #15
   2b526:	18fc      	adds	r4, r7, r3
   2b528:	687b      	ldr	r3, [r7, #4]
   2b52a:	2100      	movs	r1, #0
   2b52c:	0018      	movs	r0, r3
   2b52e:	4b52      	ldr	r3, [pc, #328]	; (2b678 <sync+0x15c>)
   2b530:	4798      	blx	r3
   2b532:	0003      	movs	r3, r0
   2b534:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2b536:	230f      	movs	r3, #15
   2b538:	18fb      	adds	r3, r7, r3
   2b53a:	781b      	ldrb	r3, [r3, #0]
   2b53c:	2b00      	cmp	r3, #0
   2b53e:	d000      	beq.n	2b542 <sync+0x26>
   2b540:	e093      	b.n	2b66a <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2b542:	687b      	ldr	r3, [r7, #4]
   2b544:	781b      	ldrb	r3, [r3, #0]
   2b546:	2b03      	cmp	r3, #3
   2b548:	d000      	beq.n	2b54c <sync+0x30>
   2b54a:	e081      	b.n	2b650 <sync+0x134>
   2b54c:	687b      	ldr	r3, [r7, #4]
   2b54e:	795b      	ldrb	r3, [r3, #5]
   2b550:	2b00      	cmp	r3, #0
   2b552:	d07d      	beq.n	2b650 <sync+0x134>
			fs->winsect = 0;
   2b554:	687b      	ldr	r3, [r7, #4]
   2b556:	2200      	movs	r2, #0
   2b558:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2b55a:	687b      	ldr	r3, [r7, #4]
   2b55c:	3330      	adds	r3, #48	; 0x30
   2b55e:	0018      	movs	r0, r3
   2b560:	2380      	movs	r3, #128	; 0x80
   2b562:	009b      	lsls	r3, r3, #2
   2b564:	001a      	movs	r2, r3
   2b566:	2100      	movs	r1, #0
   2b568:	4b44      	ldr	r3, [pc, #272]	; (2b67c <sync+0x160>)
   2b56a:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2b56c:	687b      	ldr	r3, [r7, #4]
   2b56e:	4a44      	ldr	r2, [pc, #272]	; (2b680 <sync+0x164>)
   2b570:	2155      	movs	r1, #85	; 0x55
   2b572:	5499      	strb	r1, [r3, r2]
   2b574:	687b      	ldr	r3, [r7, #4]
   2b576:	4a43      	ldr	r2, [pc, #268]	; (2b684 <sync+0x168>)
   2b578:	21aa      	movs	r1, #170	; 0xaa
   2b57a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2b57c:	687b      	ldr	r3, [r7, #4]
   2b57e:	2230      	movs	r2, #48	; 0x30
   2b580:	2152      	movs	r1, #82	; 0x52
   2b582:	5499      	strb	r1, [r3, r2]
   2b584:	687b      	ldr	r3, [r7, #4]
   2b586:	2231      	movs	r2, #49	; 0x31
   2b588:	2152      	movs	r1, #82	; 0x52
   2b58a:	5499      	strb	r1, [r3, r2]
   2b58c:	687b      	ldr	r3, [r7, #4]
   2b58e:	2232      	movs	r2, #50	; 0x32
   2b590:	2161      	movs	r1, #97	; 0x61
   2b592:	5499      	strb	r1, [r3, r2]
   2b594:	687b      	ldr	r3, [r7, #4]
   2b596:	2233      	movs	r2, #51	; 0x33
   2b598:	2141      	movs	r1, #65	; 0x41
   2b59a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2b59c:	687a      	ldr	r2, [r7, #4]
   2b59e:	2385      	movs	r3, #133	; 0x85
   2b5a0:	009b      	lsls	r3, r3, #2
   2b5a2:	2172      	movs	r1, #114	; 0x72
   2b5a4:	54d1      	strb	r1, [r2, r3]
   2b5a6:	687b      	ldr	r3, [r7, #4]
   2b5a8:	4a37      	ldr	r2, [pc, #220]	; (2b688 <sync+0x16c>)
   2b5aa:	2172      	movs	r1, #114	; 0x72
   2b5ac:	5499      	strb	r1, [r3, r2]
   2b5ae:	687b      	ldr	r3, [r7, #4]
   2b5b0:	4a36      	ldr	r2, [pc, #216]	; (2b68c <sync+0x170>)
   2b5b2:	2141      	movs	r1, #65	; 0x41
   2b5b4:	5499      	strb	r1, [r3, r2]
   2b5b6:	687b      	ldr	r3, [r7, #4]
   2b5b8:	4a35      	ldr	r2, [pc, #212]	; (2b690 <sync+0x174>)
   2b5ba:	2161      	movs	r1, #97	; 0x61
   2b5bc:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2b5be:	687b      	ldr	r3, [r7, #4]
   2b5c0:	691b      	ldr	r3, [r3, #16]
   2b5c2:	b2d9      	uxtb	r1, r3
   2b5c4:	687a      	ldr	r2, [r7, #4]
   2b5c6:	2386      	movs	r3, #134	; 0x86
   2b5c8:	009b      	lsls	r3, r3, #2
   2b5ca:	54d1      	strb	r1, [r2, r3]
   2b5cc:	687b      	ldr	r3, [r7, #4]
   2b5ce:	691b      	ldr	r3, [r3, #16]
   2b5d0:	b29b      	uxth	r3, r3
   2b5d2:	0a1b      	lsrs	r3, r3, #8
   2b5d4:	b29b      	uxth	r3, r3
   2b5d6:	b2d9      	uxtb	r1, r3
   2b5d8:	687b      	ldr	r3, [r7, #4]
   2b5da:	4a2e      	ldr	r2, [pc, #184]	; (2b694 <sync+0x178>)
   2b5dc:	5499      	strb	r1, [r3, r2]
   2b5de:	687b      	ldr	r3, [r7, #4]
   2b5e0:	691b      	ldr	r3, [r3, #16]
   2b5e2:	0c1b      	lsrs	r3, r3, #16
   2b5e4:	b2d9      	uxtb	r1, r3
   2b5e6:	687b      	ldr	r3, [r7, #4]
   2b5e8:	4a2b      	ldr	r2, [pc, #172]	; (2b698 <sync+0x17c>)
   2b5ea:	5499      	strb	r1, [r3, r2]
   2b5ec:	687b      	ldr	r3, [r7, #4]
   2b5ee:	691b      	ldr	r3, [r3, #16]
   2b5f0:	0e1b      	lsrs	r3, r3, #24
   2b5f2:	b2d9      	uxtb	r1, r3
   2b5f4:	687b      	ldr	r3, [r7, #4]
   2b5f6:	4a29      	ldr	r2, [pc, #164]	; (2b69c <sync+0x180>)
   2b5f8:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2b5fa:	687b      	ldr	r3, [r7, #4]
   2b5fc:	68db      	ldr	r3, [r3, #12]
   2b5fe:	b2d9      	uxtb	r1, r3
   2b600:	687a      	ldr	r2, [r7, #4]
   2b602:	2387      	movs	r3, #135	; 0x87
   2b604:	009b      	lsls	r3, r3, #2
   2b606:	54d1      	strb	r1, [r2, r3]
   2b608:	687b      	ldr	r3, [r7, #4]
   2b60a:	68db      	ldr	r3, [r3, #12]
   2b60c:	b29b      	uxth	r3, r3
   2b60e:	0a1b      	lsrs	r3, r3, #8
   2b610:	b29b      	uxth	r3, r3
   2b612:	b2d9      	uxtb	r1, r3
   2b614:	687b      	ldr	r3, [r7, #4]
   2b616:	4a22      	ldr	r2, [pc, #136]	; (2b6a0 <sync+0x184>)
   2b618:	5499      	strb	r1, [r3, r2]
   2b61a:	687b      	ldr	r3, [r7, #4]
   2b61c:	68db      	ldr	r3, [r3, #12]
   2b61e:	0c1b      	lsrs	r3, r3, #16
   2b620:	b2d9      	uxtb	r1, r3
   2b622:	687b      	ldr	r3, [r7, #4]
   2b624:	4a1f      	ldr	r2, [pc, #124]	; (2b6a4 <sync+0x188>)
   2b626:	5499      	strb	r1, [r3, r2]
   2b628:	687b      	ldr	r3, [r7, #4]
   2b62a:	68db      	ldr	r3, [r3, #12]
   2b62c:	0e1b      	lsrs	r3, r3, #24
   2b62e:	b2d9      	uxtb	r1, r3
   2b630:	687b      	ldr	r3, [r7, #4]
   2b632:	4a1d      	ldr	r2, [pc, #116]	; (2b6a8 <sync+0x18c>)
   2b634:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2b636:	687b      	ldr	r3, [r7, #4]
   2b638:	7858      	ldrb	r0, [r3, #1]
   2b63a:	687b      	ldr	r3, [r7, #4]
   2b63c:	3330      	adds	r3, #48	; 0x30
   2b63e:	0019      	movs	r1, r3
   2b640:	687b      	ldr	r3, [r7, #4]
   2b642:	695a      	ldr	r2, [r3, #20]
   2b644:	2301      	movs	r3, #1
   2b646:	4c19      	ldr	r4, [pc, #100]	; (2b6ac <sync+0x190>)
   2b648:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2b64a:	687b      	ldr	r3, [r7, #4]
   2b64c:	2200      	movs	r2, #0
   2b64e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2b650:	687b      	ldr	r3, [r7, #4]
   2b652:	785b      	ldrb	r3, [r3, #1]
   2b654:	2200      	movs	r2, #0
   2b656:	2100      	movs	r1, #0
   2b658:	0018      	movs	r0, r3
   2b65a:	4b15      	ldr	r3, [pc, #84]	; (2b6b0 <sync+0x194>)
   2b65c:	4798      	blx	r3
   2b65e:	1e03      	subs	r3, r0, #0
   2b660:	d003      	beq.n	2b66a <sync+0x14e>
			res = FR_DISK_ERR;
   2b662:	230f      	movs	r3, #15
   2b664:	18fb      	adds	r3, r7, r3
   2b666:	2201      	movs	r2, #1
   2b668:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2b66a:	230f      	movs	r3, #15
   2b66c:	18fb      	adds	r3, r7, r3
   2b66e:	781b      	ldrb	r3, [r3, #0]
}
   2b670:	0018      	movs	r0, r3
   2b672:	46bd      	mov	sp, r7
   2b674:	b005      	add	sp, #20
   2b676:	bd90      	pop	{r4, r7, pc}
   2b678:	0002b455 	.word	0x0002b455
   2b67c:	0002b3a9 	.word	0x0002b3a9
   2b680:	0000022e 	.word	0x0000022e
   2b684:	0000022f 	.word	0x0000022f
   2b688:	00000215 	.word	0x00000215
   2b68c:	00000216 	.word	0x00000216
   2b690:	00000217 	.word	0x00000217
   2b694:	00000219 	.word	0x00000219
   2b698:	0000021a 	.word	0x0000021a
   2b69c:	0000021b 	.word	0x0000021b
   2b6a0:	0000021d 	.word	0x0000021d
   2b6a4:	0000021e 	.word	0x0000021e
   2b6a8:	0000021f 	.word	0x0000021f
   2b6ac:	0002b141 	.word	0x0002b141
   2b6b0:	0002b219 	.word	0x0002b219

0002b6b4 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2b6b4:	b580      	push	{r7, lr}
   2b6b6:	b082      	sub	sp, #8
   2b6b8:	af00      	add	r7, sp, #0
   2b6ba:	6078      	str	r0, [r7, #4]
   2b6bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2b6be:	683b      	ldr	r3, [r7, #0]
   2b6c0:	3b02      	subs	r3, #2
   2b6c2:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2b6c4:	687b      	ldr	r3, [r7, #4]
   2b6c6:	699b      	ldr	r3, [r3, #24]
   2b6c8:	1e9a      	subs	r2, r3, #2
   2b6ca:	683b      	ldr	r3, [r7, #0]
   2b6cc:	429a      	cmp	r2, r3
   2b6ce:	d801      	bhi.n	2b6d4 <clust2sect+0x20>
   2b6d0:	2300      	movs	r3, #0
   2b6d2:	e007      	b.n	2b6e4 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2b6d4:	687b      	ldr	r3, [r7, #4]
   2b6d6:	789b      	ldrb	r3, [r3, #2]
   2b6d8:	001a      	movs	r2, r3
   2b6da:	683b      	ldr	r3, [r7, #0]
   2b6dc:	435a      	muls	r2, r3
   2b6de:	687b      	ldr	r3, [r7, #4]
   2b6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b6e2:	18d3      	adds	r3, r2, r3
}
   2b6e4:	0018      	movs	r0, r3
   2b6e6:	46bd      	mov	sp, r7
   2b6e8:	b002      	add	sp, #8
   2b6ea:	bd80      	pop	{r7, pc}

0002b6ec <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2b6ec:	b580      	push	{r7, lr}
   2b6ee:	b086      	sub	sp, #24
   2b6f0:	af00      	add	r7, sp, #0
   2b6f2:	6078      	str	r0, [r7, #4]
   2b6f4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2b6f6:	683b      	ldr	r3, [r7, #0]
   2b6f8:	2b01      	cmp	r3, #1
   2b6fa:	d904      	bls.n	2b706 <get_fat+0x1a>
   2b6fc:	687b      	ldr	r3, [r7, #4]
   2b6fe:	699a      	ldr	r2, [r3, #24]
   2b700:	683b      	ldr	r3, [r7, #0]
   2b702:	429a      	cmp	r2, r3
   2b704:	d801      	bhi.n	2b70a <get_fat+0x1e>
		return 1;
   2b706:	2301      	movs	r3, #1
   2b708:	e09f      	b.n	2b84a <get_fat+0x15e>

	switch (fs->fs_type) {
   2b70a:	687b      	ldr	r3, [r7, #4]
   2b70c:	781b      	ldrb	r3, [r3, #0]
   2b70e:	2b02      	cmp	r3, #2
   2b710:	d048      	beq.n	2b7a4 <get_fat+0xb8>
   2b712:	2b03      	cmp	r3, #3
   2b714:	d067      	beq.n	2b7e6 <get_fat+0xfa>
   2b716:	2b01      	cmp	r3, #1
   2b718:	d000      	beq.n	2b71c <get_fat+0x30>
   2b71a:	e094      	b.n	2b846 <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2b71c:	683b      	ldr	r3, [r7, #0]
   2b71e:	617b      	str	r3, [r7, #20]
   2b720:	697b      	ldr	r3, [r7, #20]
   2b722:	085b      	lsrs	r3, r3, #1
   2b724:	697a      	ldr	r2, [r7, #20]
   2b726:	18d3      	adds	r3, r2, r3
   2b728:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b72a:	687b      	ldr	r3, [r7, #4]
   2b72c:	6a1a      	ldr	r2, [r3, #32]
   2b72e:	697b      	ldr	r3, [r7, #20]
   2b730:	0a5b      	lsrs	r3, r3, #9
   2b732:	18d2      	adds	r2, r2, r3
   2b734:	687b      	ldr	r3, [r7, #4]
   2b736:	0011      	movs	r1, r2
   2b738:	0018      	movs	r0, r3
   2b73a:	4b46      	ldr	r3, [pc, #280]	; (2b854 <get_fat+0x168>)
   2b73c:	4798      	blx	r3
   2b73e:	1e03      	subs	r3, r0, #0
   2b740:	d000      	beq.n	2b744 <get_fat+0x58>
   2b742:	e079      	b.n	2b838 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2b744:	697b      	ldr	r3, [r7, #20]
   2b746:	05db      	lsls	r3, r3, #23
   2b748:	0ddb      	lsrs	r3, r3, #23
   2b74a:	687a      	ldr	r2, [r7, #4]
   2b74c:	2130      	movs	r1, #48	; 0x30
   2b74e:	18d3      	adds	r3, r2, r3
   2b750:	185b      	adds	r3, r3, r1
   2b752:	781b      	ldrb	r3, [r3, #0]
   2b754:	613b      	str	r3, [r7, #16]
   2b756:	697b      	ldr	r3, [r7, #20]
   2b758:	3301      	adds	r3, #1
   2b75a:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b75c:	687b      	ldr	r3, [r7, #4]
   2b75e:	6a1a      	ldr	r2, [r3, #32]
   2b760:	697b      	ldr	r3, [r7, #20]
   2b762:	0a5b      	lsrs	r3, r3, #9
   2b764:	18d2      	adds	r2, r2, r3
   2b766:	687b      	ldr	r3, [r7, #4]
   2b768:	0011      	movs	r1, r2
   2b76a:	0018      	movs	r0, r3
   2b76c:	4b39      	ldr	r3, [pc, #228]	; (2b854 <get_fat+0x168>)
   2b76e:	4798      	blx	r3
   2b770:	1e03      	subs	r3, r0, #0
   2b772:	d163      	bne.n	2b83c <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2b774:	697b      	ldr	r3, [r7, #20]
   2b776:	05db      	lsls	r3, r3, #23
   2b778:	0ddb      	lsrs	r3, r3, #23
   2b77a:	687a      	ldr	r2, [r7, #4]
   2b77c:	2130      	movs	r1, #48	; 0x30
   2b77e:	18d3      	adds	r3, r2, r3
   2b780:	185b      	adds	r3, r3, r1
   2b782:	781b      	ldrb	r3, [r3, #0]
   2b784:	021b      	lsls	r3, r3, #8
   2b786:	001a      	movs	r2, r3
   2b788:	693b      	ldr	r3, [r7, #16]
   2b78a:	4313      	orrs	r3, r2
   2b78c:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2b78e:	683b      	ldr	r3, [r7, #0]
   2b790:	2201      	movs	r2, #1
   2b792:	4013      	ands	r3, r2
   2b794:	d002      	beq.n	2b79c <get_fat+0xb0>
   2b796:	693b      	ldr	r3, [r7, #16]
   2b798:	091b      	lsrs	r3, r3, #4
   2b79a:	e056      	b.n	2b84a <get_fat+0x15e>
   2b79c:	693b      	ldr	r3, [r7, #16]
   2b79e:	051b      	lsls	r3, r3, #20
   2b7a0:	0d1b      	lsrs	r3, r3, #20
   2b7a2:	e052      	b.n	2b84a <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2b7a4:	687b      	ldr	r3, [r7, #4]
   2b7a6:	6a1a      	ldr	r2, [r3, #32]
   2b7a8:	683b      	ldr	r3, [r7, #0]
   2b7aa:	0a1b      	lsrs	r3, r3, #8
   2b7ac:	18d2      	adds	r2, r2, r3
   2b7ae:	687b      	ldr	r3, [r7, #4]
   2b7b0:	0011      	movs	r1, r2
   2b7b2:	0018      	movs	r0, r3
   2b7b4:	4b27      	ldr	r3, [pc, #156]	; (2b854 <get_fat+0x168>)
   2b7b6:	4798      	blx	r3
   2b7b8:	1e03      	subs	r3, r0, #0
   2b7ba:	d141      	bne.n	2b840 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2b7bc:	683b      	ldr	r3, [r7, #0]
   2b7be:	005a      	lsls	r2, r3, #1
   2b7c0:	23ff      	movs	r3, #255	; 0xff
   2b7c2:	005b      	lsls	r3, r3, #1
   2b7c4:	4013      	ands	r3, r2
   2b7c6:	3330      	adds	r3, #48	; 0x30
   2b7c8:	687a      	ldr	r2, [r7, #4]
   2b7ca:	18d3      	adds	r3, r2, r3
   2b7cc:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2b7ce:	68fb      	ldr	r3, [r7, #12]
   2b7d0:	3301      	adds	r3, #1
   2b7d2:	781b      	ldrb	r3, [r3, #0]
   2b7d4:	021b      	lsls	r3, r3, #8
   2b7d6:	b21a      	sxth	r2, r3
   2b7d8:	68fb      	ldr	r3, [r7, #12]
   2b7da:	781b      	ldrb	r3, [r3, #0]
   2b7dc:	b21b      	sxth	r3, r3
   2b7de:	4313      	orrs	r3, r2
   2b7e0:	b21b      	sxth	r3, r3
   2b7e2:	b29b      	uxth	r3, r3
   2b7e4:	e031      	b.n	2b84a <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2b7e6:	687b      	ldr	r3, [r7, #4]
   2b7e8:	6a1a      	ldr	r2, [r3, #32]
   2b7ea:	683b      	ldr	r3, [r7, #0]
   2b7ec:	09db      	lsrs	r3, r3, #7
   2b7ee:	18d2      	adds	r2, r2, r3
   2b7f0:	687b      	ldr	r3, [r7, #4]
   2b7f2:	0011      	movs	r1, r2
   2b7f4:	0018      	movs	r0, r3
   2b7f6:	4b17      	ldr	r3, [pc, #92]	; (2b854 <get_fat+0x168>)
   2b7f8:	4798      	blx	r3
   2b7fa:	1e03      	subs	r3, r0, #0
   2b7fc:	d122      	bne.n	2b844 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2b7fe:	683b      	ldr	r3, [r7, #0]
   2b800:	009a      	lsls	r2, r3, #2
   2b802:	23fe      	movs	r3, #254	; 0xfe
   2b804:	005b      	lsls	r3, r3, #1
   2b806:	4013      	ands	r3, r2
   2b808:	3330      	adds	r3, #48	; 0x30
   2b80a:	687a      	ldr	r2, [r7, #4]
   2b80c:	18d3      	adds	r3, r2, r3
   2b80e:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2b810:	68fb      	ldr	r3, [r7, #12]
   2b812:	3303      	adds	r3, #3
   2b814:	781b      	ldrb	r3, [r3, #0]
   2b816:	061a      	lsls	r2, r3, #24
   2b818:	68fb      	ldr	r3, [r7, #12]
   2b81a:	3302      	adds	r3, #2
   2b81c:	781b      	ldrb	r3, [r3, #0]
   2b81e:	041b      	lsls	r3, r3, #16
   2b820:	4313      	orrs	r3, r2
   2b822:	68fa      	ldr	r2, [r7, #12]
   2b824:	3201      	adds	r2, #1
   2b826:	7812      	ldrb	r2, [r2, #0]
   2b828:	0212      	lsls	r2, r2, #8
   2b82a:	4313      	orrs	r3, r2
   2b82c:	68fa      	ldr	r2, [r7, #12]
   2b82e:	7812      	ldrb	r2, [r2, #0]
   2b830:	4313      	orrs	r3, r2
   2b832:	011b      	lsls	r3, r3, #4
   2b834:	091b      	lsrs	r3, r3, #4
   2b836:	e008      	b.n	2b84a <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b838:	46c0      	nop			; (mov r8, r8)
   2b83a:	e004      	b.n	2b846 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b83c:	46c0      	nop			; (mov r8, r8)
   2b83e:	e002      	b.n	2b846 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2b840:	46c0      	nop			; (mov r8, r8)
   2b842:	e000      	b.n	2b846 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2b844:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2b846:	2301      	movs	r3, #1
   2b848:	425b      	negs	r3, r3
}
   2b84a:	0018      	movs	r0, r3
   2b84c:	46bd      	mov	sp, r7
   2b84e:	b006      	add	sp, #24
   2b850:	bd80      	pop	{r7, pc}
   2b852:	46c0      	nop			; (mov r8, r8)
   2b854:	0002b455 	.word	0x0002b455

0002b858 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2b858:	b590      	push	{r4, r7, lr}
   2b85a:	b089      	sub	sp, #36	; 0x24
   2b85c:	af00      	add	r7, sp, #0
   2b85e:	60f8      	str	r0, [r7, #12]
   2b860:	60b9      	str	r1, [r7, #8]
   2b862:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2b864:	68bb      	ldr	r3, [r7, #8]
   2b866:	2b01      	cmp	r3, #1
   2b868:	d904      	bls.n	2b874 <put_fat+0x1c>
   2b86a:	68fb      	ldr	r3, [r7, #12]
   2b86c:	699a      	ldr	r2, [r3, #24]
   2b86e:	68bb      	ldr	r3, [r7, #8]
   2b870:	429a      	cmp	r2, r3
   2b872:	d804      	bhi.n	2b87e <put_fat+0x26>
		res = FR_INT_ERR;
   2b874:	231f      	movs	r3, #31
   2b876:	18fb      	adds	r3, r7, r3
   2b878:	2202      	movs	r2, #2
   2b87a:	701a      	strb	r2, [r3, #0]
   2b87c:	e100      	b.n	2ba80 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2b87e:	68fb      	ldr	r3, [r7, #12]
   2b880:	781b      	ldrb	r3, [r3, #0]
   2b882:	2b02      	cmp	r3, #2
   2b884:	d100      	bne.n	2b888 <put_fat+0x30>
   2b886:	e078      	b.n	2b97a <put_fat+0x122>
   2b888:	2b03      	cmp	r3, #3
   2b88a:	d100      	bne.n	2b88e <put_fat+0x36>
   2b88c:	e09e      	b.n	2b9cc <put_fat+0x174>
   2b88e:	2b01      	cmp	r3, #1
   2b890:	d000      	beq.n	2b894 <put_fat+0x3c>
   2b892:	e0e6      	b.n	2ba62 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2b894:	68bb      	ldr	r3, [r7, #8]
   2b896:	61bb      	str	r3, [r7, #24]
   2b898:	69bb      	ldr	r3, [r7, #24]
   2b89a:	085b      	lsrs	r3, r3, #1
   2b89c:	69ba      	ldr	r2, [r7, #24]
   2b89e:	18d3      	adds	r3, r2, r3
   2b8a0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2b8a2:	68fb      	ldr	r3, [r7, #12]
   2b8a4:	6a1a      	ldr	r2, [r3, #32]
   2b8a6:	69bb      	ldr	r3, [r7, #24]
   2b8a8:	0a5b      	lsrs	r3, r3, #9
   2b8aa:	18d2      	adds	r2, r2, r3
   2b8ac:	231f      	movs	r3, #31
   2b8ae:	18fc      	adds	r4, r7, r3
   2b8b0:	68fb      	ldr	r3, [r7, #12]
   2b8b2:	0011      	movs	r1, r2
   2b8b4:	0018      	movs	r0, r3
   2b8b6:	4b76      	ldr	r3, [pc, #472]	; (2ba90 <put_fat+0x238>)
   2b8b8:	4798      	blx	r3
   2b8ba:	0003      	movs	r3, r0
   2b8bc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b8be:	231f      	movs	r3, #31
   2b8c0:	18fb      	adds	r3, r7, r3
   2b8c2:	781b      	ldrb	r3, [r3, #0]
   2b8c4:	2b00      	cmp	r3, #0
   2b8c6:	d000      	beq.n	2b8ca <put_fat+0x72>
   2b8c8:	e0d0      	b.n	2ba6c <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2b8ca:	69bb      	ldr	r3, [r7, #24]
   2b8cc:	05db      	lsls	r3, r3, #23
   2b8ce:	0ddb      	lsrs	r3, r3, #23
   2b8d0:	3330      	adds	r3, #48	; 0x30
   2b8d2:	68fa      	ldr	r2, [r7, #12]
   2b8d4:	18d3      	adds	r3, r2, r3
   2b8d6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2b8d8:	68bb      	ldr	r3, [r7, #8]
   2b8da:	2201      	movs	r2, #1
   2b8dc:	4013      	ands	r3, r2
   2b8de:	d00d      	beq.n	2b8fc <put_fat+0xa4>
   2b8e0:	697b      	ldr	r3, [r7, #20]
   2b8e2:	781b      	ldrb	r3, [r3, #0]
   2b8e4:	b25b      	sxtb	r3, r3
   2b8e6:	220f      	movs	r2, #15
   2b8e8:	4013      	ands	r3, r2
   2b8ea:	b25a      	sxtb	r2, r3
   2b8ec:	687b      	ldr	r3, [r7, #4]
   2b8ee:	b2db      	uxtb	r3, r3
   2b8f0:	011b      	lsls	r3, r3, #4
   2b8f2:	b25b      	sxtb	r3, r3
   2b8f4:	4313      	orrs	r3, r2
   2b8f6:	b25b      	sxtb	r3, r3
   2b8f8:	b2db      	uxtb	r3, r3
   2b8fa:	e001      	b.n	2b900 <put_fat+0xa8>
   2b8fc:	687b      	ldr	r3, [r7, #4]
   2b8fe:	b2db      	uxtb	r3, r3
   2b900:	697a      	ldr	r2, [r7, #20]
   2b902:	7013      	strb	r3, [r2, #0]
			bc++;
   2b904:	69bb      	ldr	r3, [r7, #24]
   2b906:	3301      	adds	r3, #1
   2b908:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2b90a:	68fb      	ldr	r3, [r7, #12]
   2b90c:	2201      	movs	r2, #1
   2b90e:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2b910:	68fb      	ldr	r3, [r7, #12]
   2b912:	6a1a      	ldr	r2, [r3, #32]
   2b914:	69bb      	ldr	r3, [r7, #24]
   2b916:	0a5b      	lsrs	r3, r3, #9
   2b918:	18d2      	adds	r2, r2, r3
   2b91a:	231f      	movs	r3, #31
   2b91c:	18fc      	adds	r4, r7, r3
   2b91e:	68fb      	ldr	r3, [r7, #12]
   2b920:	0011      	movs	r1, r2
   2b922:	0018      	movs	r0, r3
   2b924:	4b5a      	ldr	r3, [pc, #360]	; (2ba90 <put_fat+0x238>)
   2b926:	4798      	blx	r3
   2b928:	0003      	movs	r3, r0
   2b92a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b92c:	231f      	movs	r3, #31
   2b92e:	18fb      	adds	r3, r7, r3
   2b930:	781b      	ldrb	r3, [r3, #0]
   2b932:	2b00      	cmp	r3, #0
   2b934:	d000      	beq.n	2b938 <put_fat+0xe0>
   2b936:	e09b      	b.n	2ba70 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2b938:	69bb      	ldr	r3, [r7, #24]
   2b93a:	05db      	lsls	r3, r3, #23
   2b93c:	0ddb      	lsrs	r3, r3, #23
   2b93e:	3330      	adds	r3, #48	; 0x30
   2b940:	68fa      	ldr	r2, [r7, #12]
   2b942:	18d3      	adds	r3, r2, r3
   2b944:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2b946:	68bb      	ldr	r3, [r7, #8]
   2b948:	2201      	movs	r2, #1
   2b94a:	4013      	ands	r3, r2
   2b94c:	d003      	beq.n	2b956 <put_fat+0xfe>
   2b94e:	687b      	ldr	r3, [r7, #4]
   2b950:	091b      	lsrs	r3, r3, #4
   2b952:	b2db      	uxtb	r3, r3
   2b954:	e00e      	b.n	2b974 <put_fat+0x11c>
   2b956:	697b      	ldr	r3, [r7, #20]
   2b958:	781b      	ldrb	r3, [r3, #0]
   2b95a:	b25b      	sxtb	r3, r3
   2b95c:	220f      	movs	r2, #15
   2b95e:	4393      	bics	r3, r2
   2b960:	b25a      	sxtb	r2, r3
   2b962:	687b      	ldr	r3, [r7, #4]
   2b964:	0a1b      	lsrs	r3, r3, #8
   2b966:	b25b      	sxtb	r3, r3
   2b968:	210f      	movs	r1, #15
   2b96a:	400b      	ands	r3, r1
   2b96c:	b25b      	sxtb	r3, r3
   2b96e:	4313      	orrs	r3, r2
   2b970:	b25b      	sxtb	r3, r3
   2b972:	b2db      	uxtb	r3, r3
   2b974:	697a      	ldr	r2, [r7, #20]
   2b976:	7013      	strb	r3, [r2, #0]
			break;
   2b978:	e07f      	b.n	2ba7a <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2b97a:	68fb      	ldr	r3, [r7, #12]
   2b97c:	6a1a      	ldr	r2, [r3, #32]
   2b97e:	68bb      	ldr	r3, [r7, #8]
   2b980:	0a1b      	lsrs	r3, r3, #8
   2b982:	18d2      	adds	r2, r2, r3
   2b984:	231f      	movs	r3, #31
   2b986:	18fc      	adds	r4, r7, r3
   2b988:	68fb      	ldr	r3, [r7, #12]
   2b98a:	0011      	movs	r1, r2
   2b98c:	0018      	movs	r0, r3
   2b98e:	4b40      	ldr	r3, [pc, #256]	; (2ba90 <put_fat+0x238>)
   2b990:	4798      	blx	r3
   2b992:	0003      	movs	r3, r0
   2b994:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b996:	231f      	movs	r3, #31
   2b998:	18fb      	adds	r3, r7, r3
   2b99a:	781b      	ldrb	r3, [r3, #0]
   2b99c:	2b00      	cmp	r3, #0
   2b99e:	d169      	bne.n	2ba74 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2b9a0:	68bb      	ldr	r3, [r7, #8]
   2b9a2:	005a      	lsls	r2, r3, #1
   2b9a4:	23ff      	movs	r3, #255	; 0xff
   2b9a6:	005b      	lsls	r3, r3, #1
   2b9a8:	4013      	ands	r3, r2
   2b9aa:	3330      	adds	r3, #48	; 0x30
   2b9ac:	68fa      	ldr	r2, [r7, #12]
   2b9ae:	18d3      	adds	r3, r2, r3
   2b9b0:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2b9b2:	687b      	ldr	r3, [r7, #4]
   2b9b4:	b2da      	uxtb	r2, r3
   2b9b6:	697b      	ldr	r3, [r7, #20]
   2b9b8:	701a      	strb	r2, [r3, #0]
   2b9ba:	697b      	ldr	r3, [r7, #20]
   2b9bc:	3301      	adds	r3, #1
   2b9be:	687a      	ldr	r2, [r7, #4]
   2b9c0:	b292      	uxth	r2, r2
   2b9c2:	0a12      	lsrs	r2, r2, #8
   2b9c4:	b292      	uxth	r2, r2
   2b9c6:	b2d2      	uxtb	r2, r2
   2b9c8:	701a      	strb	r2, [r3, #0]
			break;
   2b9ca:	e056      	b.n	2ba7a <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2b9cc:	68fb      	ldr	r3, [r7, #12]
   2b9ce:	6a1a      	ldr	r2, [r3, #32]
   2b9d0:	68bb      	ldr	r3, [r7, #8]
   2b9d2:	09db      	lsrs	r3, r3, #7
   2b9d4:	18d2      	adds	r2, r2, r3
   2b9d6:	231f      	movs	r3, #31
   2b9d8:	18fc      	adds	r4, r7, r3
   2b9da:	68fb      	ldr	r3, [r7, #12]
   2b9dc:	0011      	movs	r1, r2
   2b9de:	0018      	movs	r0, r3
   2b9e0:	4b2b      	ldr	r3, [pc, #172]	; (2ba90 <put_fat+0x238>)
   2b9e2:	4798      	blx	r3
   2b9e4:	0003      	movs	r3, r0
   2b9e6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b9e8:	231f      	movs	r3, #31
   2b9ea:	18fb      	adds	r3, r7, r3
   2b9ec:	781b      	ldrb	r3, [r3, #0]
   2b9ee:	2b00      	cmp	r3, #0
   2b9f0:	d142      	bne.n	2ba78 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2b9f2:	68bb      	ldr	r3, [r7, #8]
   2b9f4:	009a      	lsls	r2, r3, #2
   2b9f6:	23fe      	movs	r3, #254	; 0xfe
   2b9f8:	005b      	lsls	r3, r3, #1
   2b9fa:	4013      	ands	r3, r2
   2b9fc:	3330      	adds	r3, #48	; 0x30
   2b9fe:	68fa      	ldr	r2, [r7, #12]
   2ba00:	18d3      	adds	r3, r2, r3
   2ba02:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2ba04:	697b      	ldr	r3, [r7, #20]
   2ba06:	3303      	adds	r3, #3
   2ba08:	781b      	ldrb	r3, [r3, #0]
   2ba0a:	061a      	lsls	r2, r3, #24
   2ba0c:	697b      	ldr	r3, [r7, #20]
   2ba0e:	3302      	adds	r3, #2
   2ba10:	781b      	ldrb	r3, [r3, #0]
   2ba12:	041b      	lsls	r3, r3, #16
   2ba14:	4313      	orrs	r3, r2
   2ba16:	697a      	ldr	r2, [r7, #20]
   2ba18:	3201      	adds	r2, #1
   2ba1a:	7812      	ldrb	r2, [r2, #0]
   2ba1c:	0212      	lsls	r2, r2, #8
   2ba1e:	4313      	orrs	r3, r2
   2ba20:	697a      	ldr	r2, [r7, #20]
   2ba22:	7812      	ldrb	r2, [r2, #0]
   2ba24:	4313      	orrs	r3, r2
   2ba26:	0f1b      	lsrs	r3, r3, #28
   2ba28:	071b      	lsls	r3, r3, #28
   2ba2a:	687a      	ldr	r2, [r7, #4]
   2ba2c:	4313      	orrs	r3, r2
   2ba2e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2ba30:	687b      	ldr	r3, [r7, #4]
   2ba32:	b2da      	uxtb	r2, r3
   2ba34:	697b      	ldr	r3, [r7, #20]
   2ba36:	701a      	strb	r2, [r3, #0]
   2ba38:	697b      	ldr	r3, [r7, #20]
   2ba3a:	3301      	adds	r3, #1
   2ba3c:	687a      	ldr	r2, [r7, #4]
   2ba3e:	b292      	uxth	r2, r2
   2ba40:	0a12      	lsrs	r2, r2, #8
   2ba42:	b292      	uxth	r2, r2
   2ba44:	b2d2      	uxtb	r2, r2
   2ba46:	701a      	strb	r2, [r3, #0]
   2ba48:	697b      	ldr	r3, [r7, #20]
   2ba4a:	3302      	adds	r3, #2
   2ba4c:	687a      	ldr	r2, [r7, #4]
   2ba4e:	0c12      	lsrs	r2, r2, #16
   2ba50:	b2d2      	uxtb	r2, r2
   2ba52:	701a      	strb	r2, [r3, #0]
   2ba54:	697b      	ldr	r3, [r7, #20]
   2ba56:	3303      	adds	r3, #3
   2ba58:	687a      	ldr	r2, [r7, #4]
   2ba5a:	0e12      	lsrs	r2, r2, #24
   2ba5c:	b2d2      	uxtb	r2, r2
   2ba5e:	701a      	strb	r2, [r3, #0]
			break;
   2ba60:	e00b      	b.n	2ba7a <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2ba62:	231f      	movs	r3, #31
   2ba64:	18fb      	adds	r3, r7, r3
   2ba66:	2202      	movs	r2, #2
   2ba68:	701a      	strb	r2, [r3, #0]
   2ba6a:	e006      	b.n	2ba7a <put_fat+0x222>
			if (res != FR_OK) break;
   2ba6c:	46c0      	nop			; (mov r8, r8)
   2ba6e:	e004      	b.n	2ba7a <put_fat+0x222>
			if (res != FR_OK) break;
   2ba70:	46c0      	nop			; (mov r8, r8)
   2ba72:	e002      	b.n	2ba7a <put_fat+0x222>
			if (res != FR_OK) break;
   2ba74:	46c0      	nop			; (mov r8, r8)
   2ba76:	e000      	b.n	2ba7a <put_fat+0x222>
			if (res != FR_OK) break;
   2ba78:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2ba7a:	68fb      	ldr	r3, [r7, #12]
   2ba7c:	2201      	movs	r2, #1
   2ba7e:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2ba80:	231f      	movs	r3, #31
   2ba82:	18fb      	adds	r3, r7, r3
   2ba84:	781b      	ldrb	r3, [r3, #0]
}
   2ba86:	0018      	movs	r0, r3
   2ba88:	46bd      	mov	sp, r7
   2ba8a:	b009      	add	sp, #36	; 0x24
   2ba8c:	bd90      	pop	{r4, r7, pc}
   2ba8e:	46c0      	nop			; (mov r8, r8)
   2ba90:	0002b455 	.word	0x0002b455

0002ba94 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2ba94:	b590      	push	{r4, r7, lr}
   2ba96:	b085      	sub	sp, #20
   2ba98:	af00      	add	r7, sp, #0
   2ba9a:	6078      	str	r0, [r7, #4]
   2ba9c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2ba9e:	683b      	ldr	r3, [r7, #0]
   2baa0:	2b01      	cmp	r3, #1
   2baa2:	d904      	bls.n	2baae <remove_chain+0x1a>
   2baa4:	687b      	ldr	r3, [r7, #4]
   2baa6:	699a      	ldr	r2, [r3, #24]
   2baa8:	683b      	ldr	r3, [r7, #0]
   2baaa:	429a      	cmp	r2, r3
   2baac:	d804      	bhi.n	2bab8 <remove_chain+0x24>
		res = FR_INT_ERR;
   2baae:	230f      	movs	r3, #15
   2bab0:	18fb      	adds	r3, r7, r3
   2bab2:	2202      	movs	r2, #2
   2bab4:	701a      	strb	r2, [r3, #0]
   2bab6:	e045      	b.n	2bb44 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2bab8:	230f      	movs	r3, #15
   2baba:	18fb      	adds	r3, r7, r3
   2babc:	2200      	movs	r2, #0
   2babe:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2bac0:	e037      	b.n	2bb32 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2bac2:	683a      	ldr	r2, [r7, #0]
   2bac4:	687b      	ldr	r3, [r7, #4]
   2bac6:	0011      	movs	r1, r2
   2bac8:	0018      	movs	r0, r3
   2baca:	4b22      	ldr	r3, [pc, #136]	; (2bb54 <remove_chain+0xc0>)
   2bacc:	4798      	blx	r3
   2bace:	0003      	movs	r3, r0
   2bad0:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2bad2:	68bb      	ldr	r3, [r7, #8]
   2bad4:	2b00      	cmp	r3, #0
   2bad6:	d032      	beq.n	2bb3e <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2bad8:	68bb      	ldr	r3, [r7, #8]
   2bada:	2b01      	cmp	r3, #1
   2badc:	d104      	bne.n	2bae8 <remove_chain+0x54>
   2bade:	230f      	movs	r3, #15
   2bae0:	18fb      	adds	r3, r7, r3
   2bae2:	2202      	movs	r2, #2
   2bae4:	701a      	strb	r2, [r3, #0]
   2bae6:	e02d      	b.n	2bb44 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2bae8:	68bb      	ldr	r3, [r7, #8]
   2baea:	3301      	adds	r3, #1
   2baec:	d104      	bne.n	2baf8 <remove_chain+0x64>
   2baee:	230f      	movs	r3, #15
   2baf0:	18fb      	adds	r3, r7, r3
   2baf2:	2201      	movs	r2, #1
   2baf4:	701a      	strb	r2, [r3, #0]
   2baf6:	e025      	b.n	2bb44 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2baf8:	230f      	movs	r3, #15
   2bafa:	18fc      	adds	r4, r7, r3
   2bafc:	6839      	ldr	r1, [r7, #0]
   2bafe:	687b      	ldr	r3, [r7, #4]
   2bb00:	2200      	movs	r2, #0
   2bb02:	0018      	movs	r0, r3
   2bb04:	4b14      	ldr	r3, [pc, #80]	; (2bb58 <remove_chain+0xc4>)
   2bb06:	4798      	blx	r3
   2bb08:	0003      	movs	r3, r0
   2bb0a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bb0c:	230f      	movs	r3, #15
   2bb0e:	18fb      	adds	r3, r7, r3
   2bb10:	781b      	ldrb	r3, [r3, #0]
   2bb12:	2b00      	cmp	r3, #0
   2bb14:	d115      	bne.n	2bb42 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2bb16:	687b      	ldr	r3, [r7, #4]
   2bb18:	691b      	ldr	r3, [r3, #16]
   2bb1a:	3301      	adds	r3, #1
   2bb1c:	d007      	beq.n	2bb2e <remove_chain+0x9a>
				fs->free_clust++;
   2bb1e:	687b      	ldr	r3, [r7, #4]
   2bb20:	691b      	ldr	r3, [r3, #16]
   2bb22:	1c5a      	adds	r2, r3, #1
   2bb24:	687b      	ldr	r3, [r7, #4]
   2bb26:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2bb28:	687b      	ldr	r3, [r7, #4]
   2bb2a:	2201      	movs	r2, #1
   2bb2c:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2bb2e:	68bb      	ldr	r3, [r7, #8]
   2bb30:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2bb32:	687b      	ldr	r3, [r7, #4]
   2bb34:	699a      	ldr	r2, [r3, #24]
   2bb36:	683b      	ldr	r3, [r7, #0]
   2bb38:	429a      	cmp	r2, r3
   2bb3a:	d8c2      	bhi.n	2bac2 <remove_chain+0x2e>
   2bb3c:	e002      	b.n	2bb44 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2bb3e:	46c0      	nop			; (mov r8, r8)
   2bb40:	e000      	b.n	2bb44 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2bb42:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2bb44:	230f      	movs	r3, #15
   2bb46:	18fb      	adds	r3, r7, r3
   2bb48:	781b      	ldrb	r3, [r3, #0]
}
   2bb4a:	0018      	movs	r0, r3
   2bb4c:	46bd      	mov	sp, r7
   2bb4e:	b005      	add	sp, #20
   2bb50:	bd90      	pop	{r4, r7, pc}
   2bb52:	46c0      	nop			; (mov r8, r8)
   2bb54:	0002b6ed 	.word	0x0002b6ed
   2bb58:	0002b859 	.word	0x0002b859

0002bb5c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2bb5c:	b590      	push	{r4, r7, lr}
   2bb5e:	b087      	sub	sp, #28
   2bb60:	af00      	add	r7, sp, #0
   2bb62:	6078      	str	r0, [r7, #4]
   2bb64:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2bb66:	683b      	ldr	r3, [r7, #0]
   2bb68:	2b00      	cmp	r3, #0
   2bb6a:	d10d      	bne.n	2bb88 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2bb6c:	687b      	ldr	r3, [r7, #4]
   2bb6e:	68db      	ldr	r3, [r3, #12]
   2bb70:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2bb72:	693b      	ldr	r3, [r7, #16]
   2bb74:	2b00      	cmp	r3, #0
   2bb76:	d004      	beq.n	2bb82 <create_chain+0x26>
   2bb78:	687b      	ldr	r3, [r7, #4]
   2bb7a:	699a      	ldr	r2, [r3, #24]
   2bb7c:	693b      	ldr	r3, [r7, #16]
   2bb7e:	429a      	cmp	r2, r3
   2bb80:	d818      	bhi.n	2bbb4 <create_chain+0x58>
   2bb82:	2301      	movs	r3, #1
   2bb84:	613b      	str	r3, [r7, #16]
   2bb86:	e015      	b.n	2bbb4 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2bb88:	683a      	ldr	r2, [r7, #0]
   2bb8a:	687b      	ldr	r3, [r7, #4]
   2bb8c:	0011      	movs	r1, r2
   2bb8e:	0018      	movs	r0, r3
   2bb90:	4b3e      	ldr	r3, [pc, #248]	; (2bc8c <create_chain+0x130>)
   2bb92:	4798      	blx	r3
   2bb94:	0003      	movs	r3, r0
   2bb96:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2bb98:	68bb      	ldr	r3, [r7, #8]
   2bb9a:	2b01      	cmp	r3, #1
   2bb9c:	d801      	bhi.n	2bba2 <create_chain+0x46>
   2bb9e:	2301      	movs	r3, #1
   2bba0:	e070      	b.n	2bc84 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2bba2:	687b      	ldr	r3, [r7, #4]
   2bba4:	699a      	ldr	r2, [r3, #24]
   2bba6:	68bb      	ldr	r3, [r7, #8]
   2bba8:	429a      	cmp	r2, r3
   2bbaa:	d901      	bls.n	2bbb0 <create_chain+0x54>
   2bbac:	68bb      	ldr	r3, [r7, #8]
   2bbae:	e069      	b.n	2bc84 <create_chain+0x128>
		scl = clst;
   2bbb0:	683b      	ldr	r3, [r7, #0]
   2bbb2:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2bbb4:	693b      	ldr	r3, [r7, #16]
   2bbb6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2bbb8:	697b      	ldr	r3, [r7, #20]
   2bbba:	3301      	adds	r3, #1
   2bbbc:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2bbbe:	687b      	ldr	r3, [r7, #4]
   2bbc0:	699a      	ldr	r2, [r3, #24]
   2bbc2:	697b      	ldr	r3, [r7, #20]
   2bbc4:	429a      	cmp	r2, r3
   2bbc6:	d807      	bhi.n	2bbd8 <create_chain+0x7c>
			ncl = 2;
   2bbc8:	2302      	movs	r3, #2
   2bbca:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2bbcc:	697a      	ldr	r2, [r7, #20]
   2bbce:	693b      	ldr	r3, [r7, #16]
   2bbd0:	429a      	cmp	r2, r3
   2bbd2:	d901      	bls.n	2bbd8 <create_chain+0x7c>
   2bbd4:	2300      	movs	r3, #0
   2bbd6:	e055      	b.n	2bc84 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2bbd8:	697a      	ldr	r2, [r7, #20]
   2bbda:	687b      	ldr	r3, [r7, #4]
   2bbdc:	0011      	movs	r1, r2
   2bbde:	0018      	movs	r0, r3
   2bbe0:	4b2a      	ldr	r3, [pc, #168]	; (2bc8c <create_chain+0x130>)
   2bbe2:	4798      	blx	r3
   2bbe4:	0003      	movs	r3, r0
   2bbe6:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2bbe8:	68bb      	ldr	r3, [r7, #8]
   2bbea:	2b00      	cmp	r3, #0
   2bbec:	d00d      	beq.n	2bc0a <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2bbee:	68bb      	ldr	r3, [r7, #8]
   2bbf0:	3301      	adds	r3, #1
   2bbf2:	d002      	beq.n	2bbfa <create_chain+0x9e>
   2bbf4:	68bb      	ldr	r3, [r7, #8]
   2bbf6:	2b01      	cmp	r3, #1
   2bbf8:	d101      	bne.n	2bbfe <create_chain+0xa2>
			return cs;
   2bbfa:	68bb      	ldr	r3, [r7, #8]
   2bbfc:	e042      	b.n	2bc84 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2bbfe:	697a      	ldr	r2, [r7, #20]
   2bc00:	693b      	ldr	r3, [r7, #16]
   2bc02:	429a      	cmp	r2, r3
   2bc04:	d1d8      	bne.n	2bbb8 <create_chain+0x5c>
   2bc06:	2300      	movs	r3, #0
   2bc08:	e03c      	b.n	2bc84 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2bc0a:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2bc0c:	230f      	movs	r3, #15
   2bc0e:	18fc      	adds	r4, r7, r3
   2bc10:	4a1f      	ldr	r2, [pc, #124]	; (2bc90 <create_chain+0x134>)
   2bc12:	6979      	ldr	r1, [r7, #20]
   2bc14:	687b      	ldr	r3, [r7, #4]
   2bc16:	0018      	movs	r0, r3
   2bc18:	4b1e      	ldr	r3, [pc, #120]	; (2bc94 <create_chain+0x138>)
   2bc1a:	4798      	blx	r3
   2bc1c:	0003      	movs	r3, r0
   2bc1e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2bc20:	230f      	movs	r3, #15
   2bc22:	18fb      	adds	r3, r7, r3
   2bc24:	781b      	ldrb	r3, [r3, #0]
   2bc26:	2b00      	cmp	r3, #0
   2bc28:	d10c      	bne.n	2bc44 <create_chain+0xe8>
   2bc2a:	683b      	ldr	r3, [r7, #0]
   2bc2c:	2b00      	cmp	r3, #0
   2bc2e:	d009      	beq.n	2bc44 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2bc30:	230f      	movs	r3, #15
   2bc32:	18fc      	adds	r4, r7, r3
   2bc34:	697a      	ldr	r2, [r7, #20]
   2bc36:	6839      	ldr	r1, [r7, #0]
   2bc38:	687b      	ldr	r3, [r7, #4]
   2bc3a:	0018      	movs	r0, r3
   2bc3c:	4b15      	ldr	r3, [pc, #84]	; (2bc94 <create_chain+0x138>)
   2bc3e:	4798      	blx	r3
   2bc40:	0003      	movs	r3, r0
   2bc42:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2bc44:	230f      	movs	r3, #15
   2bc46:	18fb      	adds	r3, r7, r3
   2bc48:	781b      	ldrb	r3, [r3, #0]
   2bc4a:	2b00      	cmp	r3, #0
   2bc4c:	d10f      	bne.n	2bc6e <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2bc4e:	687b      	ldr	r3, [r7, #4]
   2bc50:	697a      	ldr	r2, [r7, #20]
   2bc52:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2bc54:	687b      	ldr	r3, [r7, #4]
   2bc56:	691b      	ldr	r3, [r3, #16]
   2bc58:	3301      	adds	r3, #1
   2bc5a:	d012      	beq.n	2bc82 <create_chain+0x126>
			fs->free_clust--;
   2bc5c:	687b      	ldr	r3, [r7, #4]
   2bc5e:	691b      	ldr	r3, [r3, #16]
   2bc60:	1e5a      	subs	r2, r3, #1
   2bc62:	687b      	ldr	r3, [r7, #4]
   2bc64:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2bc66:	687b      	ldr	r3, [r7, #4]
   2bc68:	2201      	movs	r2, #1
   2bc6a:	715a      	strb	r2, [r3, #5]
   2bc6c:	e009      	b.n	2bc82 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2bc6e:	230f      	movs	r3, #15
   2bc70:	18fb      	adds	r3, r7, r3
   2bc72:	781b      	ldrb	r3, [r3, #0]
   2bc74:	2b01      	cmp	r3, #1
   2bc76:	d102      	bne.n	2bc7e <create_chain+0x122>
   2bc78:	2301      	movs	r3, #1
   2bc7a:	425b      	negs	r3, r3
   2bc7c:	e000      	b.n	2bc80 <create_chain+0x124>
   2bc7e:	2301      	movs	r3, #1
   2bc80:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2bc82:	697b      	ldr	r3, [r7, #20]
}
   2bc84:	0018      	movs	r0, r3
   2bc86:	46bd      	mov	sp, r7
   2bc88:	b007      	add	sp, #28
   2bc8a:	bd90      	pop	{r4, r7, pc}
   2bc8c:	0002b6ed 	.word	0x0002b6ed
   2bc90:	0fffffff 	.word	0x0fffffff
   2bc94:	0002b859 	.word	0x0002b859

0002bc98 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2bc98:	b580      	push	{r7, lr}
   2bc9a:	b084      	sub	sp, #16
   2bc9c:	af00      	add	r7, sp, #0
   2bc9e:	6078      	str	r0, [r7, #4]
   2bca0:	000a      	movs	r2, r1
   2bca2:	1cbb      	adds	r3, r7, #2
   2bca4:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2bca6:	687b      	ldr	r3, [r7, #4]
   2bca8:	1cba      	adds	r2, r7, #2
   2bcaa:	8812      	ldrh	r2, [r2, #0]
   2bcac:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2bcae:	687b      	ldr	r3, [r7, #4]
   2bcb0:	689b      	ldr	r3, [r3, #8]
   2bcb2:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2bcb4:	68fb      	ldr	r3, [r7, #12]
   2bcb6:	2b01      	cmp	r3, #1
   2bcb8:	d005      	beq.n	2bcc6 <dir_sdi+0x2e>
   2bcba:	687b      	ldr	r3, [r7, #4]
   2bcbc:	681b      	ldr	r3, [r3, #0]
   2bcbe:	699a      	ldr	r2, [r3, #24]
   2bcc0:	68fb      	ldr	r3, [r7, #12]
   2bcc2:	429a      	cmp	r2, r3
   2bcc4:	d801      	bhi.n	2bcca <dir_sdi+0x32>
		return FR_INT_ERR;
   2bcc6:	2302      	movs	r3, #2
   2bcc8:	e075      	b.n	2bdb6 <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2bcca:	68fb      	ldr	r3, [r7, #12]
   2bccc:	2b00      	cmp	r3, #0
   2bcce:	d108      	bne.n	2bce2 <dir_sdi+0x4a>
   2bcd0:	687b      	ldr	r3, [r7, #4]
   2bcd2:	681b      	ldr	r3, [r3, #0]
   2bcd4:	781b      	ldrb	r3, [r3, #0]
   2bcd6:	2b03      	cmp	r3, #3
   2bcd8:	d103      	bne.n	2bce2 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2bcda:	687b      	ldr	r3, [r7, #4]
   2bcdc:	681b      	ldr	r3, [r3, #0]
   2bcde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2bce0:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2bce2:	68fb      	ldr	r3, [r7, #12]
   2bce4:	2b00      	cmp	r3, #0
   2bce6:	d116      	bne.n	2bd16 <dir_sdi+0x7e>
		dj->clust = clst;
   2bce8:	687b      	ldr	r3, [r7, #4]
   2bcea:	68fa      	ldr	r2, [r7, #12]
   2bcec:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2bcee:	687b      	ldr	r3, [r7, #4]
   2bcf0:	681b      	ldr	r3, [r3, #0]
   2bcf2:	891b      	ldrh	r3, [r3, #8]
   2bcf4:	1cba      	adds	r2, r7, #2
   2bcf6:	8812      	ldrh	r2, [r2, #0]
   2bcf8:	429a      	cmp	r2, r3
   2bcfa:	d301      	bcc.n	2bd00 <dir_sdi+0x68>
			return FR_INT_ERR;
   2bcfc:	2302      	movs	r3, #2
   2bcfe:	e05a      	b.n	2bdb6 <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2bd00:	687b      	ldr	r3, [r7, #4]
   2bd02:	681b      	ldr	r3, [r3, #0]
   2bd04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2bd06:	1cba      	adds	r2, r7, #2
   2bd08:	8812      	ldrh	r2, [r2, #0]
   2bd0a:	0912      	lsrs	r2, r2, #4
   2bd0c:	b292      	uxth	r2, r2
   2bd0e:	189a      	adds	r2, r3, r2
   2bd10:	687b      	ldr	r3, [r7, #4]
   2bd12:	611a      	str	r2, [r3, #16]
   2bd14:	e042      	b.n	2bd9c <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2bd16:	687b      	ldr	r3, [r7, #4]
   2bd18:	681b      	ldr	r3, [r3, #0]
   2bd1a:	789b      	ldrb	r3, [r3, #2]
   2bd1c:	b29a      	uxth	r2, r3
   2bd1e:	230a      	movs	r3, #10
   2bd20:	18fb      	adds	r3, r7, r3
   2bd22:	0112      	lsls	r2, r2, #4
   2bd24:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2bd26:	e020      	b.n	2bd6a <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2bd28:	687b      	ldr	r3, [r7, #4]
   2bd2a:	681b      	ldr	r3, [r3, #0]
   2bd2c:	68fa      	ldr	r2, [r7, #12]
   2bd2e:	0011      	movs	r1, r2
   2bd30:	0018      	movs	r0, r3
   2bd32:	4b23      	ldr	r3, [pc, #140]	; (2bdc0 <dir_sdi+0x128>)
   2bd34:	4798      	blx	r3
   2bd36:	0003      	movs	r3, r0
   2bd38:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2bd3a:	68fb      	ldr	r3, [r7, #12]
   2bd3c:	3301      	adds	r3, #1
   2bd3e:	d101      	bne.n	2bd44 <dir_sdi+0xac>
   2bd40:	2301      	movs	r3, #1
   2bd42:	e038      	b.n	2bdb6 <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2bd44:	68fb      	ldr	r3, [r7, #12]
   2bd46:	2b01      	cmp	r3, #1
   2bd48:	d905      	bls.n	2bd56 <dir_sdi+0xbe>
   2bd4a:	687b      	ldr	r3, [r7, #4]
   2bd4c:	681b      	ldr	r3, [r3, #0]
   2bd4e:	699a      	ldr	r2, [r3, #24]
   2bd50:	68fb      	ldr	r3, [r7, #12]
   2bd52:	429a      	cmp	r2, r3
   2bd54:	d801      	bhi.n	2bd5a <dir_sdi+0xc2>
				return FR_INT_ERR;
   2bd56:	2302      	movs	r3, #2
   2bd58:	e02d      	b.n	2bdb6 <dir_sdi+0x11e>
			idx -= ic;
   2bd5a:	1cbb      	adds	r3, r7, #2
   2bd5c:	1cb9      	adds	r1, r7, #2
   2bd5e:	220a      	movs	r2, #10
   2bd60:	18ba      	adds	r2, r7, r2
   2bd62:	8809      	ldrh	r1, [r1, #0]
   2bd64:	8812      	ldrh	r2, [r2, #0]
   2bd66:	1a8a      	subs	r2, r1, r2
   2bd68:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2bd6a:	1cba      	adds	r2, r7, #2
   2bd6c:	230a      	movs	r3, #10
   2bd6e:	18fb      	adds	r3, r7, r3
   2bd70:	8812      	ldrh	r2, [r2, #0]
   2bd72:	881b      	ldrh	r3, [r3, #0]
   2bd74:	429a      	cmp	r2, r3
   2bd76:	d2d7      	bcs.n	2bd28 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2bd78:	687b      	ldr	r3, [r7, #4]
   2bd7a:	68fa      	ldr	r2, [r7, #12]
   2bd7c:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2bd7e:	687b      	ldr	r3, [r7, #4]
   2bd80:	681b      	ldr	r3, [r3, #0]
   2bd82:	68fa      	ldr	r2, [r7, #12]
   2bd84:	0011      	movs	r1, r2
   2bd86:	0018      	movs	r0, r3
   2bd88:	4b0e      	ldr	r3, [pc, #56]	; (2bdc4 <dir_sdi+0x12c>)
   2bd8a:	4798      	blx	r3
   2bd8c:	0002      	movs	r2, r0
   2bd8e:	1cbb      	adds	r3, r7, #2
   2bd90:	881b      	ldrh	r3, [r3, #0]
   2bd92:	091b      	lsrs	r3, r3, #4
   2bd94:	b29b      	uxth	r3, r3
   2bd96:	18d2      	adds	r2, r2, r3
   2bd98:	687b      	ldr	r3, [r7, #4]
   2bd9a:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2bd9c:	687b      	ldr	r3, [r7, #4]
   2bd9e:	681b      	ldr	r3, [r3, #0]
   2bda0:	3330      	adds	r3, #48	; 0x30
   2bda2:	001a      	movs	r2, r3
   2bda4:	1cbb      	adds	r3, r7, #2
   2bda6:	881b      	ldrh	r3, [r3, #0]
   2bda8:	210f      	movs	r1, #15
   2bdaa:	400b      	ands	r3, r1
   2bdac:	015b      	lsls	r3, r3, #5
   2bdae:	18d2      	adds	r2, r2, r3
   2bdb0:	687b      	ldr	r3, [r7, #4]
   2bdb2:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2bdb4:	2300      	movs	r3, #0
}
   2bdb6:	0018      	movs	r0, r3
   2bdb8:	46bd      	mov	sp, r7
   2bdba:	b004      	add	sp, #16
   2bdbc:	bd80      	pop	{r7, pc}
   2bdbe:	46c0      	nop			; (mov r8, r8)
   2bdc0:	0002b6ed 	.word	0x0002b6ed
   2bdc4:	0002b6b5 	.word	0x0002b6b5

0002bdc8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2bdc8:	b590      	push	{r4, r7, lr}
   2bdca:	b085      	sub	sp, #20
   2bdcc:	af00      	add	r7, sp, #0
   2bdce:	6078      	str	r0, [r7, #4]
   2bdd0:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2bdd2:	687b      	ldr	r3, [r7, #4]
   2bdd4:	88da      	ldrh	r2, [r3, #6]
   2bdd6:	2308      	movs	r3, #8
   2bdd8:	18fb      	adds	r3, r7, r3
   2bdda:	3201      	adds	r2, #1
   2bddc:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2bdde:	2308      	movs	r3, #8
   2bde0:	18fb      	adds	r3, r7, r3
   2bde2:	881b      	ldrh	r3, [r3, #0]
   2bde4:	2b00      	cmp	r3, #0
   2bde6:	d003      	beq.n	2bdf0 <dir_next+0x28>
   2bde8:	687b      	ldr	r3, [r7, #4]
   2bdea:	691b      	ldr	r3, [r3, #16]
   2bdec:	2b00      	cmp	r3, #0
   2bdee:	d101      	bne.n	2bdf4 <dir_next+0x2c>
		return FR_NO_FILE;
   2bdf0:	2304      	movs	r3, #4
   2bdf2:	e0d2      	b.n	2bf9a <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2bdf4:	2308      	movs	r3, #8
   2bdf6:	18fb      	adds	r3, r7, r3
   2bdf8:	881b      	ldrh	r3, [r3, #0]
   2bdfa:	220f      	movs	r2, #15
   2bdfc:	4013      	ands	r3, r2
   2bdfe:	b29b      	uxth	r3, r3
   2be00:	2b00      	cmp	r3, #0
   2be02:	d000      	beq.n	2be06 <dir_next+0x3e>
   2be04:	e0b6      	b.n	2bf74 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2be06:	687b      	ldr	r3, [r7, #4]
   2be08:	691b      	ldr	r3, [r3, #16]
   2be0a:	1c5a      	adds	r2, r3, #1
   2be0c:	687b      	ldr	r3, [r7, #4]
   2be0e:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2be10:	687b      	ldr	r3, [r7, #4]
   2be12:	68db      	ldr	r3, [r3, #12]
   2be14:	2b00      	cmp	r3, #0
   2be16:	d10a      	bne.n	2be2e <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2be18:	687b      	ldr	r3, [r7, #4]
   2be1a:	681b      	ldr	r3, [r3, #0]
   2be1c:	891b      	ldrh	r3, [r3, #8]
   2be1e:	2208      	movs	r2, #8
   2be20:	18ba      	adds	r2, r7, r2
   2be22:	8812      	ldrh	r2, [r2, #0]
   2be24:	429a      	cmp	r2, r3
   2be26:	d200      	bcs.n	2be2a <dir_next+0x62>
   2be28:	e0a4      	b.n	2bf74 <dir_next+0x1ac>
				return FR_NO_FILE;
   2be2a:	2304      	movs	r3, #4
   2be2c:	e0b5      	b.n	2bf9a <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2be2e:	2308      	movs	r3, #8
   2be30:	18fb      	adds	r3, r7, r3
   2be32:	881b      	ldrh	r3, [r3, #0]
   2be34:	091b      	lsrs	r3, r3, #4
   2be36:	b29b      	uxth	r3, r3
   2be38:	001a      	movs	r2, r3
   2be3a:	687b      	ldr	r3, [r7, #4]
   2be3c:	681b      	ldr	r3, [r3, #0]
   2be3e:	789b      	ldrb	r3, [r3, #2]
   2be40:	3b01      	subs	r3, #1
   2be42:	4013      	ands	r3, r2
   2be44:	d000      	beq.n	2be48 <dir_next+0x80>
   2be46:	e095      	b.n	2bf74 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2be48:	687b      	ldr	r3, [r7, #4]
   2be4a:	681a      	ldr	r2, [r3, #0]
   2be4c:	687b      	ldr	r3, [r7, #4]
   2be4e:	68db      	ldr	r3, [r3, #12]
   2be50:	0019      	movs	r1, r3
   2be52:	0010      	movs	r0, r2
   2be54:	4b53      	ldr	r3, [pc, #332]	; (2bfa4 <dir_next+0x1dc>)
   2be56:	4798      	blx	r3
   2be58:	0003      	movs	r3, r0
   2be5a:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2be5c:	68fb      	ldr	r3, [r7, #12]
   2be5e:	2b01      	cmp	r3, #1
   2be60:	d801      	bhi.n	2be66 <dir_next+0x9e>
   2be62:	2302      	movs	r3, #2
   2be64:	e099      	b.n	2bf9a <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2be66:	68fb      	ldr	r3, [r7, #12]
   2be68:	3301      	adds	r3, #1
   2be6a:	d101      	bne.n	2be70 <dir_next+0xa8>
   2be6c:	2301      	movs	r3, #1
   2be6e:	e094      	b.n	2bf9a <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2be70:	687b      	ldr	r3, [r7, #4]
   2be72:	681b      	ldr	r3, [r3, #0]
   2be74:	699a      	ldr	r2, [r3, #24]
   2be76:	68fb      	ldr	r3, [r7, #12]
   2be78:	429a      	cmp	r2, r3
   2be7a:	d900      	bls.n	2be7e <dir_next+0xb6>
   2be7c:	e06d      	b.n	2bf5a <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2be7e:	683b      	ldr	r3, [r7, #0]
   2be80:	2b00      	cmp	r3, #0
   2be82:	d101      	bne.n	2be88 <dir_next+0xc0>
   2be84:	2304      	movs	r3, #4
   2be86:	e088      	b.n	2bf9a <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2be88:	687b      	ldr	r3, [r7, #4]
   2be8a:	681a      	ldr	r2, [r3, #0]
   2be8c:	687b      	ldr	r3, [r7, #4]
   2be8e:	68db      	ldr	r3, [r3, #12]
   2be90:	0019      	movs	r1, r3
   2be92:	0010      	movs	r0, r2
   2be94:	4b44      	ldr	r3, [pc, #272]	; (2bfa8 <dir_next+0x1e0>)
   2be96:	4798      	blx	r3
   2be98:	0003      	movs	r3, r0
   2be9a:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2be9c:	68fb      	ldr	r3, [r7, #12]
   2be9e:	2b00      	cmp	r3, #0
   2bea0:	d101      	bne.n	2bea6 <dir_next+0xde>
   2bea2:	2307      	movs	r3, #7
   2bea4:	e079      	b.n	2bf9a <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2bea6:	68fb      	ldr	r3, [r7, #12]
   2bea8:	2b01      	cmp	r3, #1
   2beaa:	d101      	bne.n	2beb0 <dir_next+0xe8>
   2beac:	2302      	movs	r3, #2
   2beae:	e074      	b.n	2bf9a <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2beb0:	68fb      	ldr	r3, [r7, #12]
   2beb2:	3301      	adds	r3, #1
   2beb4:	d101      	bne.n	2beba <dir_next+0xf2>
   2beb6:	2301      	movs	r3, #1
   2beb8:	e06f      	b.n	2bf9a <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2beba:	687b      	ldr	r3, [r7, #4]
   2bebc:	681b      	ldr	r3, [r3, #0]
   2bebe:	2100      	movs	r1, #0
   2bec0:	0018      	movs	r0, r3
   2bec2:	4b3a      	ldr	r3, [pc, #232]	; (2bfac <dir_next+0x1e4>)
   2bec4:	4798      	blx	r3
   2bec6:	1e03      	subs	r3, r0, #0
   2bec8:	d001      	beq.n	2bece <dir_next+0x106>
   2beca:	2301      	movs	r3, #1
   2becc:	e065      	b.n	2bf9a <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2bece:	687b      	ldr	r3, [r7, #4]
   2bed0:	681b      	ldr	r3, [r3, #0]
   2bed2:	3330      	adds	r3, #48	; 0x30
   2bed4:	0018      	movs	r0, r3
   2bed6:	2380      	movs	r3, #128	; 0x80
   2bed8:	009b      	lsls	r3, r3, #2
   2beda:	001a      	movs	r2, r3
   2bedc:	2100      	movs	r1, #0
   2bede:	4b34      	ldr	r3, [pc, #208]	; (2bfb0 <dir_next+0x1e8>)
   2bee0:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2bee2:	687b      	ldr	r3, [r7, #4]
   2bee4:	681c      	ldr	r4, [r3, #0]
   2bee6:	687b      	ldr	r3, [r7, #4]
   2bee8:	681b      	ldr	r3, [r3, #0]
   2beea:	68fa      	ldr	r2, [r7, #12]
   2beec:	0011      	movs	r1, r2
   2beee:	0018      	movs	r0, r3
   2bef0:	4b30      	ldr	r3, [pc, #192]	; (2bfb4 <dir_next+0x1ec>)
   2bef2:	4798      	blx	r3
   2bef4:	0003      	movs	r3, r0
   2bef6:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2bef8:	230b      	movs	r3, #11
   2befa:	18fb      	adds	r3, r7, r3
   2befc:	2200      	movs	r2, #0
   2befe:	701a      	strb	r2, [r3, #0]
   2bf00:	e019      	b.n	2bf36 <dir_next+0x16e>
						dj->fs->wflag = 1;
   2bf02:	687b      	ldr	r3, [r7, #4]
   2bf04:	681b      	ldr	r3, [r3, #0]
   2bf06:	2201      	movs	r2, #1
   2bf08:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2bf0a:	687b      	ldr	r3, [r7, #4]
   2bf0c:	681b      	ldr	r3, [r3, #0]
   2bf0e:	2100      	movs	r1, #0
   2bf10:	0018      	movs	r0, r3
   2bf12:	4b26      	ldr	r3, [pc, #152]	; (2bfac <dir_next+0x1e4>)
   2bf14:	4798      	blx	r3
   2bf16:	1e03      	subs	r3, r0, #0
   2bf18:	d001      	beq.n	2bf1e <dir_next+0x156>
   2bf1a:	2301      	movs	r3, #1
   2bf1c:	e03d      	b.n	2bf9a <dir_next+0x1d2>
						dj->fs->winsect++;
   2bf1e:	687b      	ldr	r3, [r7, #4]
   2bf20:	681b      	ldr	r3, [r3, #0]
   2bf22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2bf24:	3201      	adds	r2, #1
   2bf26:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2bf28:	230b      	movs	r3, #11
   2bf2a:	18fb      	adds	r3, r7, r3
   2bf2c:	781a      	ldrb	r2, [r3, #0]
   2bf2e:	230b      	movs	r3, #11
   2bf30:	18fb      	adds	r3, r7, r3
   2bf32:	3201      	adds	r2, #1
   2bf34:	701a      	strb	r2, [r3, #0]
   2bf36:	687b      	ldr	r3, [r7, #4]
   2bf38:	681b      	ldr	r3, [r3, #0]
   2bf3a:	789b      	ldrb	r3, [r3, #2]
   2bf3c:	220b      	movs	r2, #11
   2bf3e:	18ba      	adds	r2, r7, r2
   2bf40:	7812      	ldrb	r2, [r2, #0]
   2bf42:	429a      	cmp	r2, r3
   2bf44:	d3dd      	bcc.n	2bf02 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2bf46:	687b      	ldr	r3, [r7, #4]
   2bf48:	681b      	ldr	r3, [r3, #0]
   2bf4a:	687a      	ldr	r2, [r7, #4]
   2bf4c:	6812      	ldr	r2, [r2, #0]
   2bf4e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2bf50:	220b      	movs	r2, #11
   2bf52:	18ba      	adds	r2, r7, r2
   2bf54:	7812      	ldrb	r2, [r2, #0]
   2bf56:	1a8a      	subs	r2, r1, r2
   2bf58:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2bf5a:	687b      	ldr	r3, [r7, #4]
   2bf5c:	68fa      	ldr	r2, [r7, #12]
   2bf5e:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2bf60:	687b      	ldr	r3, [r7, #4]
   2bf62:	681b      	ldr	r3, [r3, #0]
   2bf64:	68fa      	ldr	r2, [r7, #12]
   2bf66:	0011      	movs	r1, r2
   2bf68:	0018      	movs	r0, r3
   2bf6a:	4b12      	ldr	r3, [pc, #72]	; (2bfb4 <dir_next+0x1ec>)
   2bf6c:	4798      	blx	r3
   2bf6e:	0002      	movs	r2, r0
   2bf70:	687b      	ldr	r3, [r7, #4]
   2bf72:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2bf74:	687b      	ldr	r3, [r7, #4]
   2bf76:	2208      	movs	r2, #8
   2bf78:	18ba      	adds	r2, r7, r2
   2bf7a:	8812      	ldrh	r2, [r2, #0]
   2bf7c:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2bf7e:	687b      	ldr	r3, [r7, #4]
   2bf80:	681b      	ldr	r3, [r3, #0]
   2bf82:	3330      	adds	r3, #48	; 0x30
   2bf84:	001a      	movs	r2, r3
   2bf86:	2308      	movs	r3, #8
   2bf88:	18fb      	adds	r3, r7, r3
   2bf8a:	881b      	ldrh	r3, [r3, #0]
   2bf8c:	210f      	movs	r1, #15
   2bf8e:	400b      	ands	r3, r1
   2bf90:	015b      	lsls	r3, r3, #5
   2bf92:	18d2      	adds	r2, r2, r3
   2bf94:	687b      	ldr	r3, [r7, #4]
   2bf96:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2bf98:	2300      	movs	r3, #0
}
   2bf9a:	0018      	movs	r0, r3
   2bf9c:	46bd      	mov	sp, r7
   2bf9e:	b005      	add	sp, #20
   2bfa0:	bd90      	pop	{r4, r7, pc}
   2bfa2:	46c0      	nop			; (mov r8, r8)
   2bfa4:	0002b6ed 	.word	0x0002b6ed
   2bfa8:	0002bb5d 	.word	0x0002bb5d
   2bfac:	0002b455 	.word	0x0002b455
   2bfb0:	0002b3a9 	.word	0x0002b3a9
   2bfb4:	0002b6b5 	.word	0x0002b6b5

0002bfb8 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2bfb8:	b590      	push	{r4, r7, lr}
   2bfba:	b087      	sub	sp, #28
   2bfbc:	af00      	add	r7, sp, #0
   2bfbe:	6078      	str	r0, [r7, #4]
   2bfc0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2bfc2:	683b      	ldr	r3, [r7, #0]
   2bfc4:	781b      	ldrb	r3, [r3, #0]
   2bfc6:	001a      	movs	r2, r3
   2bfc8:	2340      	movs	r3, #64	; 0x40
   2bfca:	439a      	bics	r2, r3
   2bfcc:	0013      	movs	r3, r2
   2bfce:	1e5a      	subs	r2, r3, #1
   2bfd0:	0013      	movs	r3, r2
   2bfd2:	005b      	lsls	r3, r3, #1
   2bfd4:	189b      	adds	r3, r3, r2
   2bfd6:	009b      	lsls	r3, r3, #2
   2bfd8:	189b      	adds	r3, r3, r2
   2bfda:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2bfdc:	2300      	movs	r3, #0
   2bfde:	613b      	str	r3, [r7, #16]
   2bfe0:	230e      	movs	r3, #14
   2bfe2:	18fb      	adds	r3, r7, r3
   2bfe4:	2201      	movs	r2, #1
   2bfe6:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2bfe8:	4a31      	ldr	r2, [pc, #196]	; (2c0b0 <cmp_lfn+0xf8>)
   2bfea:	693b      	ldr	r3, [r7, #16]
   2bfec:	18d3      	adds	r3, r2, r3
   2bfee:	781b      	ldrb	r3, [r3, #0]
   2bff0:	3301      	adds	r3, #1
   2bff2:	683a      	ldr	r2, [r7, #0]
   2bff4:	18d3      	adds	r3, r2, r3
   2bff6:	781b      	ldrb	r3, [r3, #0]
   2bff8:	021b      	lsls	r3, r3, #8
   2bffa:	b21a      	sxth	r2, r3
   2bffc:	492c      	ldr	r1, [pc, #176]	; (2c0b0 <cmp_lfn+0xf8>)
   2bffe:	693b      	ldr	r3, [r7, #16]
   2c000:	18cb      	adds	r3, r1, r3
   2c002:	781b      	ldrb	r3, [r3, #0]
   2c004:	0019      	movs	r1, r3
   2c006:	683b      	ldr	r3, [r7, #0]
   2c008:	185b      	adds	r3, r3, r1
   2c00a:	781b      	ldrb	r3, [r3, #0]
   2c00c:	b21b      	sxth	r3, r3
   2c00e:	4313      	orrs	r3, r2
   2c010:	b21a      	sxth	r2, r3
   2c012:	230c      	movs	r3, #12
   2c014:	18fb      	adds	r3, r7, r3
   2c016:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2c018:	230e      	movs	r3, #14
   2c01a:	18fb      	adds	r3, r7, r3
   2c01c:	881b      	ldrh	r3, [r3, #0]
   2c01e:	2b00      	cmp	r3, #0
   2c020:	d01f      	beq.n	2c062 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2c022:	230e      	movs	r3, #14
   2c024:	18fc      	adds	r4, r7, r3
   2c026:	230c      	movs	r3, #12
   2c028:	18fb      	adds	r3, r7, r3
   2c02a:	881b      	ldrh	r3, [r3, #0]
   2c02c:	0018      	movs	r0, r3
   2c02e:	4b21      	ldr	r3, [pc, #132]	; (2c0b4 <cmp_lfn+0xfc>)
   2c030:	4798      	blx	r3
   2c032:	0003      	movs	r3, r0
   2c034:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2c036:	697b      	ldr	r3, [r7, #20]
   2c038:	2bfe      	cmp	r3, #254	; 0xfe
   2c03a:	d810      	bhi.n	2c05e <cmp_lfn+0xa6>
   2c03c:	697b      	ldr	r3, [r7, #20]
   2c03e:	1c5a      	adds	r2, r3, #1
   2c040:	617a      	str	r2, [r7, #20]
   2c042:	005b      	lsls	r3, r3, #1
   2c044:	687a      	ldr	r2, [r7, #4]
   2c046:	18d3      	adds	r3, r2, r3
   2c048:	881b      	ldrh	r3, [r3, #0]
   2c04a:	0018      	movs	r0, r3
   2c04c:	4b19      	ldr	r3, [pc, #100]	; (2c0b4 <cmp_lfn+0xfc>)
   2c04e:	4798      	blx	r3
   2c050:	0003      	movs	r3, r0
   2c052:	001a      	movs	r2, r3
   2c054:	230e      	movs	r3, #14
   2c056:	18fb      	adds	r3, r7, r3
   2c058:	881b      	ldrh	r3, [r3, #0]
   2c05a:	4293      	cmp	r3, r2
   2c05c:	d009      	beq.n	2c072 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2c05e:	2300      	movs	r3, #0
   2c060:	e022      	b.n	2c0a8 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2c062:	230c      	movs	r3, #12
   2c064:	18fb      	adds	r3, r7, r3
   2c066:	881b      	ldrh	r3, [r3, #0]
   2c068:	4a13      	ldr	r2, [pc, #76]	; (2c0b8 <cmp_lfn+0x100>)
   2c06a:	4293      	cmp	r3, r2
   2c06c:	d001      	beq.n	2c072 <cmp_lfn+0xba>
   2c06e:	2300      	movs	r3, #0
   2c070:	e01a      	b.n	2c0a8 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2c072:	693b      	ldr	r3, [r7, #16]
   2c074:	3301      	adds	r3, #1
   2c076:	613b      	str	r3, [r7, #16]
   2c078:	693b      	ldr	r3, [r7, #16]
   2c07a:	2b0c      	cmp	r3, #12
   2c07c:	d9b4      	bls.n	2bfe8 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2c07e:	683b      	ldr	r3, [r7, #0]
   2c080:	781b      	ldrb	r3, [r3, #0]
   2c082:	001a      	movs	r2, r3
   2c084:	2340      	movs	r3, #64	; 0x40
   2c086:	4013      	ands	r3, r2
   2c088:	d00d      	beq.n	2c0a6 <cmp_lfn+0xee>
   2c08a:	230e      	movs	r3, #14
   2c08c:	18fb      	adds	r3, r7, r3
   2c08e:	881b      	ldrh	r3, [r3, #0]
   2c090:	2b00      	cmp	r3, #0
   2c092:	d008      	beq.n	2c0a6 <cmp_lfn+0xee>
   2c094:	697b      	ldr	r3, [r7, #20]
   2c096:	005b      	lsls	r3, r3, #1
   2c098:	687a      	ldr	r2, [r7, #4]
   2c09a:	18d3      	adds	r3, r2, r3
   2c09c:	881b      	ldrh	r3, [r3, #0]
   2c09e:	2b00      	cmp	r3, #0
   2c0a0:	d001      	beq.n	2c0a6 <cmp_lfn+0xee>
		return 0;
   2c0a2:	2300      	movs	r3, #0
   2c0a4:	e000      	b.n	2c0a8 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2c0a6:	2301      	movs	r3, #1
}
   2c0a8:	0018      	movs	r0, r3
   2c0aa:	46bd      	mov	sp, r7
   2c0ac:	b007      	add	sp, #28
   2c0ae:	bd90      	pop	{r4, r7, pc}
   2c0b0:	0003922c 	.word	0x0003922c
   2c0b4:	0002e065 	.word	0x0002e065
   2c0b8:	0000ffff 	.word	0x0000ffff

0002c0bc <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2c0bc:	b580      	push	{r7, lr}
   2c0be:	b088      	sub	sp, #32
   2c0c0:	af00      	add	r7, sp, #0
   2c0c2:	60f8      	str	r0, [r7, #12]
   2c0c4:	60b9      	str	r1, [r7, #8]
   2c0c6:	0019      	movs	r1, r3
   2c0c8:	1dfb      	adds	r3, r7, #7
   2c0ca:	701a      	strb	r2, [r3, #0]
   2c0cc:	1dbb      	adds	r3, r7, #6
   2c0ce:	1c0a      	adds	r2, r1, #0
   2c0d0:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2c0d2:	68bb      	ldr	r3, [r7, #8]
   2c0d4:	330d      	adds	r3, #13
   2c0d6:	1dba      	adds	r2, r7, #6
   2c0d8:	7812      	ldrb	r2, [r2, #0]
   2c0da:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2c0dc:	68bb      	ldr	r3, [r7, #8]
   2c0de:	330b      	adds	r3, #11
   2c0e0:	220f      	movs	r2, #15
   2c0e2:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2c0e4:	68bb      	ldr	r3, [r7, #8]
   2c0e6:	330c      	adds	r3, #12
   2c0e8:	2200      	movs	r2, #0
   2c0ea:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2c0ec:	68bb      	ldr	r3, [r7, #8]
   2c0ee:	331a      	adds	r3, #26
   2c0f0:	2200      	movs	r2, #0
   2c0f2:	701a      	strb	r2, [r3, #0]
   2c0f4:	68bb      	ldr	r3, [r7, #8]
   2c0f6:	331b      	adds	r3, #27
   2c0f8:	2200      	movs	r2, #0
   2c0fa:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2c0fc:	1dfb      	adds	r3, r7, #7
   2c0fe:	781b      	ldrb	r3, [r3, #0]
   2c100:	1e5a      	subs	r2, r3, #1
   2c102:	0013      	movs	r3, r2
   2c104:	005b      	lsls	r3, r3, #1
   2c106:	189b      	adds	r3, r3, r2
   2c108:	009b      	lsls	r3, r3, #2
   2c10a:	189b      	adds	r3, r3, r2
   2c10c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2c10e:	2316      	movs	r3, #22
   2c110:	18fb      	adds	r3, r7, r3
   2c112:	2200      	movs	r2, #0
   2c114:	801a      	strh	r2, [r3, #0]
   2c116:	2300      	movs	r3, #0
   2c118:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2c11a:	2316      	movs	r3, #22
   2c11c:	18fb      	adds	r3, r7, r3
   2c11e:	881b      	ldrh	r3, [r3, #0]
   2c120:	4a28      	ldr	r2, [pc, #160]	; (2c1c4 <fit_lfn+0x108>)
   2c122:	4293      	cmp	r3, r2
   2c124:	d009      	beq.n	2c13a <fit_lfn+0x7e>
   2c126:	69fb      	ldr	r3, [r7, #28]
   2c128:	1c5a      	adds	r2, r3, #1
   2c12a:	61fa      	str	r2, [r7, #28]
   2c12c:	005b      	lsls	r3, r3, #1
   2c12e:	68fa      	ldr	r2, [r7, #12]
   2c130:	18d2      	adds	r2, r2, r3
   2c132:	2316      	movs	r3, #22
   2c134:	18fb      	adds	r3, r7, r3
   2c136:	8812      	ldrh	r2, [r2, #0]
   2c138:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2c13a:	4a23      	ldr	r2, [pc, #140]	; (2c1c8 <fit_lfn+0x10c>)
   2c13c:	69bb      	ldr	r3, [r7, #24]
   2c13e:	18d3      	adds	r3, r2, r3
   2c140:	781b      	ldrb	r3, [r3, #0]
   2c142:	001a      	movs	r2, r3
   2c144:	68bb      	ldr	r3, [r7, #8]
   2c146:	189b      	adds	r3, r3, r2
   2c148:	2216      	movs	r2, #22
   2c14a:	18ba      	adds	r2, r7, r2
   2c14c:	8812      	ldrh	r2, [r2, #0]
   2c14e:	b2d2      	uxtb	r2, r2
   2c150:	701a      	strb	r2, [r3, #0]
   2c152:	4a1d      	ldr	r2, [pc, #116]	; (2c1c8 <fit_lfn+0x10c>)
   2c154:	69bb      	ldr	r3, [r7, #24]
   2c156:	18d3      	adds	r3, r2, r3
   2c158:	781b      	ldrb	r3, [r3, #0]
   2c15a:	3301      	adds	r3, #1
   2c15c:	68ba      	ldr	r2, [r7, #8]
   2c15e:	18d3      	adds	r3, r2, r3
   2c160:	2216      	movs	r2, #22
   2c162:	18ba      	adds	r2, r7, r2
   2c164:	8812      	ldrh	r2, [r2, #0]
   2c166:	0a12      	lsrs	r2, r2, #8
   2c168:	b292      	uxth	r2, r2
   2c16a:	b2d2      	uxtb	r2, r2
   2c16c:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2c16e:	2316      	movs	r3, #22
   2c170:	18fb      	adds	r3, r7, r3
   2c172:	881b      	ldrh	r3, [r3, #0]
   2c174:	2b00      	cmp	r3, #0
   2c176:	d104      	bne.n	2c182 <fit_lfn+0xc6>
   2c178:	2316      	movs	r3, #22
   2c17a:	18fb      	adds	r3, r7, r3
   2c17c:	2201      	movs	r2, #1
   2c17e:	4252      	negs	r2, r2
   2c180:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2c182:	69bb      	ldr	r3, [r7, #24]
   2c184:	3301      	adds	r3, #1
   2c186:	61bb      	str	r3, [r7, #24]
   2c188:	69bb      	ldr	r3, [r7, #24]
   2c18a:	2b0c      	cmp	r3, #12
   2c18c:	d9c5      	bls.n	2c11a <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2c18e:	2316      	movs	r3, #22
   2c190:	18fb      	adds	r3, r7, r3
   2c192:	881b      	ldrh	r3, [r3, #0]
   2c194:	4a0b      	ldr	r2, [pc, #44]	; (2c1c4 <fit_lfn+0x108>)
   2c196:	4293      	cmp	r3, r2
   2c198:	d006      	beq.n	2c1a8 <fit_lfn+0xec>
   2c19a:	69fb      	ldr	r3, [r7, #28]
   2c19c:	005b      	lsls	r3, r3, #1
   2c19e:	68fa      	ldr	r2, [r7, #12]
   2c1a0:	18d3      	adds	r3, r2, r3
   2c1a2:	881b      	ldrh	r3, [r3, #0]
   2c1a4:	2b00      	cmp	r3, #0
   2c1a6:	d105      	bne.n	2c1b4 <fit_lfn+0xf8>
   2c1a8:	1dfb      	adds	r3, r7, #7
   2c1aa:	1dfa      	adds	r2, r7, #7
   2c1ac:	7812      	ldrb	r2, [r2, #0]
   2c1ae:	2140      	movs	r1, #64	; 0x40
   2c1b0:	430a      	orrs	r2, r1
   2c1b2:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2c1b4:	68bb      	ldr	r3, [r7, #8]
   2c1b6:	1dfa      	adds	r2, r7, #7
   2c1b8:	7812      	ldrb	r2, [r2, #0]
   2c1ba:	701a      	strb	r2, [r3, #0]
}
   2c1bc:	46c0      	nop			; (mov r8, r8)
   2c1be:	46bd      	mov	sp, r7
   2c1c0:	b008      	add	sp, #32
   2c1c2:	bd80      	pop	{r7, pc}
   2c1c4:	0000ffff 	.word	0x0000ffff
   2c1c8:	0003922c 	.word	0x0003922c

0002c1cc <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2c1cc:	b580      	push	{r7, lr}
   2c1ce:	b08a      	sub	sp, #40	; 0x28
   2c1d0:	af00      	add	r7, sp, #0
   2c1d2:	60f8      	str	r0, [r7, #12]
   2c1d4:	60b9      	str	r1, [r7, #8]
   2c1d6:	607a      	str	r2, [r7, #4]
   2c1d8:	001a      	movs	r2, r3
   2c1da:	1cbb      	adds	r3, r7, #2
   2c1dc:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2c1de:	68b9      	ldr	r1, [r7, #8]
   2c1e0:	68fb      	ldr	r3, [r7, #12]
   2c1e2:	220b      	movs	r2, #11
   2c1e4:	0018      	movs	r0, r3
   2c1e6:	4b38      	ldr	r3, [pc, #224]	; (2c2c8 <gen_numname+0xfc>)
   2c1e8:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2c1ea:	1cbb      	adds	r3, r7, #2
   2c1ec:	881b      	ldrh	r3, [r3, #0]
   2c1ee:	2b05      	cmp	r3, #5
   2c1f0:	d911      	bls.n	2c216 <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2c1f2:	1cbb      	adds	r3, r7, #2
   2c1f4:	881b      	ldrh	r3, [r3, #0]
   2c1f6:	b29a      	uxth	r2, r3
   2c1f8:	0852      	lsrs	r2, r2, #1
   2c1fa:	03db      	lsls	r3, r3, #15
   2c1fc:	4313      	orrs	r3, r2
   2c1fe:	b299      	uxth	r1, r3
   2c200:	687b      	ldr	r3, [r7, #4]
   2c202:	1c9a      	adds	r2, r3, #2
   2c204:	607a      	str	r2, [r7, #4]
   2c206:	881a      	ldrh	r2, [r3, #0]
   2c208:	1cbb      	adds	r3, r7, #2
   2c20a:	188a      	adds	r2, r1, r2
   2c20c:	801a      	strh	r2, [r3, #0]
   2c20e:	687b      	ldr	r3, [r7, #4]
   2c210:	881b      	ldrh	r3, [r3, #0]
   2c212:	2b00      	cmp	r3, #0
   2c214:	d1ed      	bne.n	2c1f2 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2c216:	2307      	movs	r3, #7
   2c218:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2c21a:	1cbb      	adds	r3, r7, #2
   2c21c:	881b      	ldrh	r3, [r3, #0]
   2c21e:	b2db      	uxtb	r3, r3
   2c220:	220f      	movs	r2, #15
   2c222:	4013      	ands	r3, r2
   2c224:	b2da      	uxtb	r2, r3
   2c226:	2327      	movs	r3, #39	; 0x27
   2c228:	18fb      	adds	r3, r7, r3
   2c22a:	3230      	adds	r2, #48	; 0x30
   2c22c:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2c22e:	2327      	movs	r3, #39	; 0x27
   2c230:	18fb      	adds	r3, r7, r3
   2c232:	781b      	ldrb	r3, [r3, #0]
   2c234:	2b39      	cmp	r3, #57	; 0x39
   2c236:	d906      	bls.n	2c246 <gen_numname+0x7a>
   2c238:	2327      	movs	r3, #39	; 0x27
   2c23a:	18fb      	adds	r3, r7, r3
   2c23c:	2227      	movs	r2, #39	; 0x27
   2c23e:	18ba      	adds	r2, r7, r2
   2c240:	7812      	ldrb	r2, [r2, #0]
   2c242:	3207      	adds	r2, #7
   2c244:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2c246:	6a3b      	ldr	r3, [r7, #32]
   2c248:	1e5a      	subs	r2, r3, #1
   2c24a:	623a      	str	r2, [r7, #32]
   2c24c:	2214      	movs	r2, #20
   2c24e:	18ba      	adds	r2, r7, r2
   2c250:	2127      	movs	r1, #39	; 0x27
   2c252:	1879      	adds	r1, r7, r1
   2c254:	7809      	ldrb	r1, [r1, #0]
   2c256:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2c258:	1cbb      	adds	r3, r7, #2
   2c25a:	1cba      	adds	r2, r7, #2
   2c25c:	8812      	ldrh	r2, [r2, #0]
   2c25e:	0912      	lsrs	r2, r2, #4
   2c260:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2c262:	1cbb      	adds	r3, r7, #2
   2c264:	881b      	ldrh	r3, [r3, #0]
   2c266:	2b00      	cmp	r3, #0
   2c268:	d1d7      	bne.n	2c21a <gen_numname+0x4e>
	ns[i] = '~';
   2c26a:	2314      	movs	r3, #20
   2c26c:	18fa      	adds	r2, r7, r3
   2c26e:	6a3b      	ldr	r3, [r7, #32]
   2c270:	18d3      	adds	r3, r2, r3
   2c272:	227e      	movs	r2, #126	; 0x7e
   2c274:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2c276:	2300      	movs	r3, #0
   2c278:	61fb      	str	r3, [r7, #28]
   2c27a:	e002      	b.n	2c282 <gen_numname+0xb6>
   2c27c:	69fb      	ldr	r3, [r7, #28]
   2c27e:	3301      	adds	r3, #1
   2c280:	61fb      	str	r3, [r7, #28]
   2c282:	69fa      	ldr	r2, [r7, #28]
   2c284:	6a3b      	ldr	r3, [r7, #32]
   2c286:	429a      	cmp	r2, r3
   2c288:	d205      	bcs.n	2c296 <gen_numname+0xca>
   2c28a:	68fa      	ldr	r2, [r7, #12]
   2c28c:	69fb      	ldr	r3, [r7, #28]
   2c28e:	18d3      	adds	r3, r2, r3
   2c290:	781b      	ldrb	r3, [r3, #0]
   2c292:	2b20      	cmp	r3, #32
   2c294:	d1f2      	bne.n	2c27c <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2c296:	69fb      	ldr	r3, [r7, #28]
   2c298:	1c5a      	adds	r2, r3, #1
   2c29a:	61fa      	str	r2, [r7, #28]
   2c29c:	68fa      	ldr	r2, [r7, #12]
   2c29e:	18d2      	adds	r2, r2, r3
   2c2a0:	6a3b      	ldr	r3, [r7, #32]
   2c2a2:	2b07      	cmp	r3, #7
   2c2a4:	d806      	bhi.n	2c2b4 <gen_numname+0xe8>
   2c2a6:	6a3b      	ldr	r3, [r7, #32]
   2c2a8:	1c59      	adds	r1, r3, #1
   2c2aa:	6239      	str	r1, [r7, #32]
   2c2ac:	2114      	movs	r1, #20
   2c2ae:	1879      	adds	r1, r7, r1
   2c2b0:	5ccb      	ldrb	r3, [r1, r3]
   2c2b2:	e000      	b.n	2c2b6 <gen_numname+0xea>
   2c2b4:	2320      	movs	r3, #32
   2c2b6:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2c2b8:	69fb      	ldr	r3, [r7, #28]
   2c2ba:	2b07      	cmp	r3, #7
   2c2bc:	d9eb      	bls.n	2c296 <gen_numname+0xca>
}
   2c2be:	46c0      	nop			; (mov r8, r8)
   2c2c0:	46bd      	mov	sp, r7
   2c2c2:	b00a      	add	sp, #40	; 0x28
   2c2c4:	bd80      	pop	{r7, pc}
   2c2c6:	46c0      	nop			; (mov r8, r8)
   2c2c8:	0002b371 	.word	0x0002b371

0002c2cc <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2c2cc:	b580      	push	{r7, lr}
   2c2ce:	b084      	sub	sp, #16
   2c2d0:	af00      	add	r7, sp, #0
   2c2d2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2c2d4:	230f      	movs	r3, #15
   2c2d6:	18fb      	adds	r3, r7, r3
   2c2d8:	2200      	movs	r2, #0
   2c2da:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2c2dc:	230b      	movs	r3, #11
   2c2de:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2c2e0:	230f      	movs	r3, #15
   2c2e2:	18fb      	adds	r3, r7, r3
   2c2e4:	781b      	ldrb	r3, [r3, #0]
   2c2e6:	b2da      	uxtb	r2, r3
   2c2e8:	0852      	lsrs	r2, r2, #1
   2c2ea:	01db      	lsls	r3, r3, #7
   2c2ec:	4313      	orrs	r3, r2
   2c2ee:	b2d9      	uxtb	r1, r3
   2c2f0:	687b      	ldr	r3, [r7, #4]
   2c2f2:	1c5a      	adds	r2, r3, #1
   2c2f4:	607a      	str	r2, [r7, #4]
   2c2f6:	781a      	ldrb	r2, [r3, #0]
   2c2f8:	230f      	movs	r3, #15
   2c2fa:	18fb      	adds	r3, r7, r3
   2c2fc:	188a      	adds	r2, r1, r2
   2c2fe:	701a      	strb	r2, [r3, #0]
   2c300:	68bb      	ldr	r3, [r7, #8]
   2c302:	3b01      	subs	r3, #1
   2c304:	60bb      	str	r3, [r7, #8]
   2c306:	68bb      	ldr	r3, [r7, #8]
   2c308:	2b00      	cmp	r3, #0
   2c30a:	d1e9      	bne.n	2c2e0 <sum_sfn+0x14>
	return sum;
   2c30c:	230f      	movs	r3, #15
   2c30e:	18fb      	adds	r3, r7, r3
   2c310:	781b      	ldrb	r3, [r3, #0]
}
   2c312:	0018      	movs	r0, r3
   2c314:	46bd      	mov	sp, r7
   2c316:	b004      	add	sp, #16
   2c318:	bd80      	pop	{r7, pc}
	...

0002c31c <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2c31c:	b590      	push	{r4, r7, lr}
   2c31e:	b087      	sub	sp, #28
   2c320:	af00      	add	r7, sp, #0
   2c322:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2c324:	2317      	movs	r3, #23
   2c326:	18fc      	adds	r4, r7, r3
   2c328:	687b      	ldr	r3, [r7, #4]
   2c32a:	2100      	movs	r1, #0
   2c32c:	0018      	movs	r0, r3
   2c32e:	4b74      	ldr	r3, [pc, #464]	; (2c500 <dir_find+0x1e4>)
   2c330:	4798      	blx	r3
   2c332:	0003      	movs	r3, r0
   2c334:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2c336:	2317      	movs	r3, #23
   2c338:	18fb      	adds	r3, r7, r3
   2c33a:	781b      	ldrb	r3, [r3, #0]
   2c33c:	2b00      	cmp	r3, #0
   2c33e:	d003      	beq.n	2c348 <dir_find+0x2c>
   2c340:	2317      	movs	r3, #23
   2c342:	18fb      	adds	r3, r7, r3
   2c344:	781b      	ldrb	r3, [r3, #0]
   2c346:	e0d6      	b.n	2c4f6 <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2c348:	2314      	movs	r3, #20
   2c34a:	18fb      	adds	r3, r7, r3
   2c34c:	22ff      	movs	r2, #255	; 0xff
   2c34e:	701a      	strb	r2, [r3, #0]
   2c350:	2315      	movs	r3, #21
   2c352:	18fb      	adds	r3, r7, r3
   2c354:	2214      	movs	r2, #20
   2c356:	18ba      	adds	r2, r7, r2
   2c358:	7812      	ldrb	r2, [r2, #0]
   2c35a:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2c35c:	687b      	ldr	r3, [r7, #4]
   2c35e:	681a      	ldr	r2, [r3, #0]
   2c360:	687b      	ldr	r3, [r7, #4]
   2c362:	691b      	ldr	r3, [r3, #16]
   2c364:	2117      	movs	r1, #23
   2c366:	187c      	adds	r4, r7, r1
   2c368:	0019      	movs	r1, r3
   2c36a:	0010      	movs	r0, r2
   2c36c:	4b65      	ldr	r3, [pc, #404]	; (2c504 <dir_find+0x1e8>)
   2c36e:	4798      	blx	r3
   2c370:	0003      	movs	r3, r0
   2c372:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2c374:	2317      	movs	r3, #23
   2c376:	18fb      	adds	r3, r7, r3
   2c378:	781b      	ldrb	r3, [r3, #0]
   2c37a:	2b00      	cmp	r3, #0
   2c37c:	d000      	beq.n	2c380 <dir_find+0x64>
   2c37e:	e0b2      	b.n	2c4e6 <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2c380:	687b      	ldr	r3, [r7, #4]
   2c382:	695b      	ldr	r3, [r3, #20]
   2c384:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2c386:	2316      	movs	r3, #22
   2c388:	18fb      	adds	r3, r7, r3
   2c38a:	693a      	ldr	r2, [r7, #16]
   2c38c:	7812      	ldrb	r2, [r2, #0]
   2c38e:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2c390:	2316      	movs	r3, #22
   2c392:	18fb      	adds	r3, r7, r3
   2c394:	781b      	ldrb	r3, [r3, #0]
   2c396:	2b00      	cmp	r3, #0
   2c398:	d104      	bne.n	2c3a4 <dir_find+0x88>
   2c39a:	2317      	movs	r3, #23
   2c39c:	18fb      	adds	r3, r7, r3
   2c39e:	2204      	movs	r2, #4
   2c3a0:	701a      	strb	r2, [r3, #0]
   2c3a2:	e0a5      	b.n	2c4f0 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2c3a4:	693b      	ldr	r3, [r7, #16]
   2c3a6:	330b      	adds	r3, #11
   2c3a8:	781a      	ldrb	r2, [r3, #0]
   2c3aa:	230f      	movs	r3, #15
   2c3ac:	18fb      	adds	r3, r7, r3
   2c3ae:	213f      	movs	r1, #63	; 0x3f
   2c3b0:	400a      	ands	r2, r1
   2c3b2:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2c3b4:	2316      	movs	r3, #22
   2c3b6:	18fb      	adds	r3, r7, r3
   2c3b8:	781b      	ldrb	r3, [r3, #0]
   2c3ba:	2be5      	cmp	r3, #229	; 0xe5
   2c3bc:	d00a      	beq.n	2c3d4 <dir_find+0xb8>
   2c3be:	230f      	movs	r3, #15
   2c3c0:	18fb      	adds	r3, r7, r3
   2c3c2:	781b      	ldrb	r3, [r3, #0]
   2c3c4:	2208      	movs	r2, #8
   2c3c6:	4013      	ands	r3, r2
   2c3c8:	d009      	beq.n	2c3de <dir_find+0xc2>
   2c3ca:	230f      	movs	r3, #15
   2c3cc:	18fb      	adds	r3, r7, r3
   2c3ce:	781b      	ldrb	r3, [r3, #0]
   2c3d0:	2b0f      	cmp	r3, #15
   2c3d2:	d004      	beq.n	2c3de <dir_find+0xc2>
			ord = 0xFF;
   2c3d4:	2315      	movs	r3, #21
   2c3d6:	18fb      	adds	r3, r7, r3
   2c3d8:	22ff      	movs	r2, #255	; 0xff
   2c3da:	701a      	strb	r2, [r3, #0]
   2c3dc:	e073      	b.n	2c4c6 <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2c3de:	230f      	movs	r3, #15
   2c3e0:	18fb      	adds	r3, r7, r3
   2c3e2:	781b      	ldrb	r3, [r3, #0]
   2c3e4:	2b0f      	cmp	r3, #15
   2c3e6:	d145      	bne.n	2c474 <dir_find+0x158>
				if (dj->lfn) {
   2c3e8:	687b      	ldr	r3, [r7, #4]
   2c3ea:	69db      	ldr	r3, [r3, #28]
   2c3ec:	2b00      	cmp	r3, #0
   2c3ee:	d100      	bne.n	2c3f2 <dir_find+0xd6>
   2c3f0:	e069      	b.n	2c4c6 <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2c3f2:	2316      	movs	r3, #22
   2c3f4:	18fb      	adds	r3, r7, r3
   2c3f6:	781b      	ldrb	r3, [r3, #0]
   2c3f8:	2240      	movs	r2, #64	; 0x40
   2c3fa:	4013      	ands	r3, r2
   2c3fc:	d016      	beq.n	2c42c <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2c3fe:	2314      	movs	r3, #20
   2c400:	18fb      	adds	r3, r7, r3
   2c402:	693a      	ldr	r2, [r7, #16]
   2c404:	7b52      	ldrb	r2, [r2, #13]
   2c406:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2c408:	2316      	movs	r3, #22
   2c40a:	18fb      	adds	r3, r7, r3
   2c40c:	2216      	movs	r2, #22
   2c40e:	18ba      	adds	r2, r7, r2
   2c410:	7812      	ldrb	r2, [r2, #0]
   2c412:	2140      	movs	r1, #64	; 0x40
   2c414:	438a      	bics	r2, r1
   2c416:	701a      	strb	r2, [r3, #0]
   2c418:	2315      	movs	r3, #21
   2c41a:	18fb      	adds	r3, r7, r3
   2c41c:	2216      	movs	r2, #22
   2c41e:	18ba      	adds	r2, r7, r2
   2c420:	7812      	ldrb	r2, [r2, #0]
   2c422:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2c424:	687b      	ldr	r3, [r7, #4]
   2c426:	88da      	ldrh	r2, [r3, #6]
   2c428:	687b      	ldr	r3, [r7, #4]
   2c42a:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2c42c:	2316      	movs	r3, #22
   2c42e:	18fa      	adds	r2, r7, r3
   2c430:	2315      	movs	r3, #21
   2c432:	18fb      	adds	r3, r7, r3
   2c434:	7812      	ldrb	r2, [r2, #0]
   2c436:	781b      	ldrb	r3, [r3, #0]
   2c438:	429a      	cmp	r2, r3
   2c43a:	d116      	bne.n	2c46a <dir_find+0x14e>
   2c43c:	693b      	ldr	r3, [r7, #16]
   2c43e:	330d      	adds	r3, #13
   2c440:	781b      	ldrb	r3, [r3, #0]
   2c442:	2214      	movs	r2, #20
   2c444:	18ba      	adds	r2, r7, r2
   2c446:	7812      	ldrb	r2, [r2, #0]
   2c448:	429a      	cmp	r2, r3
   2c44a:	d10e      	bne.n	2c46a <dir_find+0x14e>
   2c44c:	687b      	ldr	r3, [r7, #4]
   2c44e:	69db      	ldr	r3, [r3, #28]
   2c450:	693a      	ldr	r2, [r7, #16]
   2c452:	0011      	movs	r1, r2
   2c454:	0018      	movs	r0, r3
   2c456:	4b2c      	ldr	r3, [pc, #176]	; (2c508 <dir_find+0x1ec>)
   2c458:	4798      	blx	r3
   2c45a:	1e03      	subs	r3, r0, #0
   2c45c:	d005      	beq.n	2c46a <dir_find+0x14e>
   2c45e:	2315      	movs	r3, #21
   2c460:	18fb      	adds	r3, r7, r3
   2c462:	781b      	ldrb	r3, [r3, #0]
   2c464:	3b01      	subs	r3, #1
   2c466:	b2da      	uxtb	r2, r3
   2c468:	e000      	b.n	2c46c <dir_find+0x150>
   2c46a:	22ff      	movs	r2, #255	; 0xff
   2c46c:	2315      	movs	r3, #21
   2c46e:	18fb      	adds	r3, r7, r3
   2c470:	701a      	strb	r2, [r3, #0]
   2c472:	e028      	b.n	2c4c6 <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2c474:	2315      	movs	r3, #21
   2c476:	18fb      	adds	r3, r7, r3
   2c478:	781b      	ldrb	r3, [r3, #0]
   2c47a:	2b00      	cmp	r3, #0
   2c47c:	d10a      	bne.n	2c494 <dir_find+0x178>
   2c47e:	693b      	ldr	r3, [r7, #16]
   2c480:	0018      	movs	r0, r3
   2c482:	4b22      	ldr	r3, [pc, #136]	; (2c50c <dir_find+0x1f0>)
   2c484:	4798      	blx	r3
   2c486:	0003      	movs	r3, r0
   2c488:	001a      	movs	r2, r3
   2c48a:	2314      	movs	r3, #20
   2c48c:	18fb      	adds	r3, r7, r3
   2c48e:	781b      	ldrb	r3, [r3, #0]
   2c490:	4293      	cmp	r3, r2
   2c492:	d02a      	beq.n	2c4ea <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2c494:	2315      	movs	r3, #21
   2c496:	18fb      	adds	r3, r7, r3
   2c498:	22ff      	movs	r2, #255	; 0xff
   2c49a:	701a      	strb	r2, [r3, #0]
   2c49c:	687b      	ldr	r3, [r7, #4]
   2c49e:	2201      	movs	r2, #1
   2c4a0:	4252      	negs	r2, r2
   2c4a2:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2c4a4:	687b      	ldr	r3, [r7, #4]
   2c4a6:	699b      	ldr	r3, [r3, #24]
   2c4a8:	330b      	adds	r3, #11
   2c4aa:	781b      	ldrb	r3, [r3, #0]
   2c4ac:	001a      	movs	r2, r3
   2c4ae:	2301      	movs	r3, #1
   2c4b0:	4013      	ands	r3, r2
   2c4b2:	d108      	bne.n	2c4c6 <dir_find+0x1aa>
   2c4b4:	687b      	ldr	r3, [r7, #4]
   2c4b6:	6999      	ldr	r1, [r3, #24]
   2c4b8:	693b      	ldr	r3, [r7, #16]
   2c4ba:	220b      	movs	r2, #11
   2c4bc:	0018      	movs	r0, r3
   2c4be:	4b14      	ldr	r3, [pc, #80]	; (2c510 <dir_find+0x1f4>)
   2c4c0:	4798      	blx	r3
   2c4c2:	1e03      	subs	r3, r0, #0
   2c4c4:	d013      	beq.n	2c4ee <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2c4c6:	2317      	movs	r3, #23
   2c4c8:	18fc      	adds	r4, r7, r3
   2c4ca:	687b      	ldr	r3, [r7, #4]
   2c4cc:	2100      	movs	r1, #0
   2c4ce:	0018      	movs	r0, r3
   2c4d0:	4b10      	ldr	r3, [pc, #64]	; (2c514 <dir_find+0x1f8>)
   2c4d2:	4798      	blx	r3
   2c4d4:	0003      	movs	r3, r0
   2c4d6:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2c4d8:	2317      	movs	r3, #23
   2c4da:	18fb      	adds	r3, r7, r3
   2c4dc:	781b      	ldrb	r3, [r3, #0]
   2c4de:	2b00      	cmp	r3, #0
   2c4e0:	d100      	bne.n	2c4e4 <dir_find+0x1c8>
   2c4e2:	e73b      	b.n	2c35c <dir_find+0x40>
   2c4e4:	e004      	b.n	2c4f0 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2c4e6:	46c0      	nop			; (mov r8, r8)
   2c4e8:	e002      	b.n	2c4f0 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2c4ea:	46c0      	nop			; (mov r8, r8)
   2c4ec:	e000      	b.n	2c4f0 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2c4ee:	46c0      	nop			; (mov r8, r8)

	return res;
   2c4f0:	2317      	movs	r3, #23
   2c4f2:	18fb      	adds	r3, r7, r3
   2c4f4:	781b      	ldrb	r3, [r3, #0]
}
   2c4f6:	0018      	movs	r0, r3
   2c4f8:	46bd      	mov	sp, r7
   2c4fa:	b007      	add	sp, #28
   2c4fc:	bd90      	pop	{r4, r7, pc}
   2c4fe:	46c0      	nop			; (mov r8, r8)
   2c500:	0002bc99 	.word	0x0002bc99
   2c504:	0002b455 	.word	0x0002b455
   2c508:	0002bfb9 	.word	0x0002bfb9
   2c50c:	0002c2cd 	.word	0x0002c2cd
   2c510:	0002b3d9 	.word	0x0002b3d9
   2c514:	0002bdc9 	.word	0x0002bdc9

0002c518 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2c518:	b590      	push	{r4, r7, lr}
   2c51a:	b08d      	sub	sp, #52	; 0x34
   2c51c:	af00      	add	r7, sp, #0
   2c51e:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2c520:	687b      	ldr	r3, [r7, #4]
   2c522:	699b      	ldr	r3, [r3, #24]
   2c524:	627b      	str	r3, [r7, #36]	; 0x24
   2c526:	687b      	ldr	r3, [r7, #4]
   2c528:	69db      	ldr	r3, [r3, #28]
   2c52a:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2c52c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2c52e:	230c      	movs	r3, #12
   2c530:	18fb      	adds	r3, r7, r3
   2c532:	220c      	movs	r2, #12
   2c534:	0018      	movs	r0, r3
   2c536:	4bc8      	ldr	r3, [pc, #800]	; (2c858 <dir_register+0x340>)
   2c538:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2c53a:	230c      	movs	r3, #12
   2c53c:	18fb      	adds	r3, r7, r3
   2c53e:	7adb      	ldrb	r3, [r3, #11]
   2c540:	001a      	movs	r2, r3
   2c542:	2301      	movs	r3, #1
   2c544:	4013      	ands	r3, r2
   2c546:	d048      	beq.n	2c5da <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2c548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c54a:	330b      	adds	r3, #11
   2c54c:	2200      	movs	r2, #0
   2c54e:	701a      	strb	r2, [r3, #0]
   2c550:	687b      	ldr	r3, [r7, #4]
   2c552:	2200      	movs	r2, #0
   2c554:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2c556:	232c      	movs	r3, #44	; 0x2c
   2c558:	18fb      	adds	r3, r7, r3
   2c55a:	2201      	movs	r2, #1
   2c55c:	801a      	strh	r2, [r3, #0]
   2c55e:	e01c      	b.n	2c59a <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2c560:	232c      	movs	r3, #44	; 0x2c
   2c562:	18fb      	adds	r3, r7, r3
   2c564:	881b      	ldrh	r3, [r3, #0]
   2c566:	6a3a      	ldr	r2, [r7, #32]
   2c568:	210c      	movs	r1, #12
   2c56a:	1879      	adds	r1, r7, r1
   2c56c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2c56e:	4cbb      	ldr	r4, [pc, #748]	; (2c85c <dir_register+0x344>)
   2c570:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2c572:	232f      	movs	r3, #47	; 0x2f
   2c574:	18fc      	adds	r4, r7, r3
   2c576:	687b      	ldr	r3, [r7, #4]
   2c578:	0018      	movs	r0, r3
   2c57a:	4bb9      	ldr	r3, [pc, #740]	; (2c860 <dir_register+0x348>)
   2c57c:	4798      	blx	r3
   2c57e:	0003      	movs	r3, r0
   2c580:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c582:	232f      	movs	r3, #47	; 0x2f
   2c584:	18fb      	adds	r3, r7, r3
   2c586:	781b      	ldrb	r3, [r3, #0]
   2c588:	2b00      	cmp	r3, #0
   2c58a:	d10c      	bne.n	2c5a6 <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2c58c:	232c      	movs	r3, #44	; 0x2c
   2c58e:	18fb      	adds	r3, r7, r3
   2c590:	881a      	ldrh	r2, [r3, #0]
   2c592:	232c      	movs	r3, #44	; 0x2c
   2c594:	18fb      	adds	r3, r7, r3
   2c596:	3201      	adds	r2, #1
   2c598:	801a      	strh	r2, [r3, #0]
   2c59a:	232c      	movs	r3, #44	; 0x2c
   2c59c:	18fb      	adds	r3, r7, r3
   2c59e:	881b      	ldrh	r3, [r3, #0]
   2c5a0:	2b63      	cmp	r3, #99	; 0x63
   2c5a2:	d9dd      	bls.n	2c560 <dir_register+0x48>
   2c5a4:	e000      	b.n	2c5a8 <dir_register+0x90>
			if (res != FR_OK) break;
   2c5a6:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2c5a8:	232c      	movs	r3, #44	; 0x2c
   2c5aa:	18fb      	adds	r3, r7, r3
   2c5ac:	881b      	ldrh	r3, [r3, #0]
   2c5ae:	2b64      	cmp	r3, #100	; 0x64
   2c5b0:	d101      	bne.n	2c5b6 <dir_register+0x9e>
   2c5b2:	2307      	movs	r3, #7
   2c5b4:	e14c      	b.n	2c850 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2c5b6:	232f      	movs	r3, #47	; 0x2f
   2c5b8:	18fb      	adds	r3, r7, r3
   2c5ba:	781b      	ldrb	r3, [r3, #0]
   2c5bc:	2b04      	cmp	r3, #4
   2c5be:	d003      	beq.n	2c5c8 <dir_register+0xb0>
   2c5c0:	232f      	movs	r3, #47	; 0x2f
   2c5c2:	18fb      	adds	r3, r7, r3
   2c5c4:	781b      	ldrb	r3, [r3, #0]
   2c5c6:	e143      	b.n	2c850 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2c5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c5ca:	330b      	adds	r3, #11
   2c5cc:	220c      	movs	r2, #12
   2c5ce:	18ba      	adds	r2, r7, r2
   2c5d0:	7ad2      	ldrb	r2, [r2, #11]
   2c5d2:	701a      	strb	r2, [r3, #0]
   2c5d4:	687b      	ldr	r3, [r7, #4]
   2c5d6:	6a3a      	ldr	r2, [r7, #32]
   2c5d8:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2c5da:	230c      	movs	r3, #12
   2c5dc:	18fb      	adds	r3, r7, r3
   2c5de:	7adb      	ldrb	r3, [r3, #11]
   2c5e0:	001a      	movs	r2, r3
   2c5e2:	2302      	movs	r3, #2
   2c5e4:	4013      	ands	r3, r2
   2c5e6:	d023      	beq.n	2c630 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2c5e8:	232a      	movs	r3, #42	; 0x2a
   2c5ea:	18fb      	adds	r3, r7, r3
   2c5ec:	2200      	movs	r2, #0
   2c5ee:	801a      	strh	r2, [r3, #0]
   2c5f0:	e006      	b.n	2c600 <dir_register+0xe8>
   2c5f2:	232a      	movs	r3, #42	; 0x2a
   2c5f4:	18fb      	adds	r3, r7, r3
   2c5f6:	881a      	ldrh	r2, [r3, #0]
   2c5f8:	232a      	movs	r3, #42	; 0x2a
   2c5fa:	18fb      	adds	r3, r7, r3
   2c5fc:	3201      	adds	r2, #1
   2c5fe:	801a      	strh	r2, [r3, #0]
   2c600:	232a      	movs	r3, #42	; 0x2a
   2c602:	18fb      	adds	r3, r7, r3
   2c604:	881b      	ldrh	r3, [r3, #0]
   2c606:	005b      	lsls	r3, r3, #1
   2c608:	6a3a      	ldr	r2, [r7, #32]
   2c60a:	18d3      	adds	r3, r2, r3
   2c60c:	881b      	ldrh	r3, [r3, #0]
   2c60e:	2b00      	cmp	r3, #0
   2c610:	d1ef      	bne.n	2c5f2 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2c612:	232a      	movs	r3, #42	; 0x2a
   2c614:	18fb      	adds	r3, r7, r3
   2c616:	881b      	ldrh	r3, [r3, #0]
   2c618:	3319      	adds	r3, #25
   2c61a:	001a      	movs	r2, r3
   2c61c:	4b91      	ldr	r3, [pc, #580]	; (2c864 <dir_register+0x34c>)
   2c61e:	210d      	movs	r1, #13
   2c620:	0010      	movs	r0, r2
   2c622:	4798      	blx	r3
   2c624:	0003      	movs	r3, r0
   2c626:	001a      	movs	r2, r3
   2c628:	232a      	movs	r3, #42	; 0x2a
   2c62a:	18fb      	adds	r3, r7, r3
   2c62c:	801a      	strh	r2, [r3, #0]
   2c62e:	e003      	b.n	2c638 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2c630:	232a      	movs	r3, #42	; 0x2a
   2c632:	18fb      	adds	r3, r7, r3
   2c634:	2201      	movs	r2, #1
   2c636:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2c638:	232f      	movs	r3, #47	; 0x2f
   2c63a:	18fc      	adds	r4, r7, r3
   2c63c:	687b      	ldr	r3, [r7, #4]
   2c63e:	2100      	movs	r1, #0
   2c640:	0018      	movs	r0, r3
   2c642:	4b89      	ldr	r3, [pc, #548]	; (2c868 <dir_register+0x350>)
   2c644:	4798      	blx	r3
   2c646:	0003      	movs	r3, r0
   2c648:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2c64a:	232f      	movs	r3, #47	; 0x2f
   2c64c:	18fb      	adds	r3, r7, r3
   2c64e:	781b      	ldrb	r3, [r3, #0]
   2c650:	2b00      	cmp	r3, #0
   2c652:	d003      	beq.n	2c65c <dir_register+0x144>
   2c654:	232f      	movs	r3, #47	; 0x2f
   2c656:	18fb      	adds	r3, r7, r3
   2c658:	781b      	ldrb	r3, [r3, #0]
   2c65a:	e0f9      	b.n	2c850 <dir_register+0x338>
	n = is = 0;
   2c65c:	2328      	movs	r3, #40	; 0x28
   2c65e:	18fb      	adds	r3, r7, r3
   2c660:	2200      	movs	r2, #0
   2c662:	801a      	strh	r2, [r3, #0]
   2c664:	232c      	movs	r3, #44	; 0x2c
   2c666:	18fb      	adds	r3, r7, r3
   2c668:	2228      	movs	r2, #40	; 0x28
   2c66a:	18ba      	adds	r2, r7, r2
   2c66c:	8812      	ldrh	r2, [r2, #0]
   2c66e:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2c670:	687b      	ldr	r3, [r7, #4]
   2c672:	681a      	ldr	r2, [r3, #0]
   2c674:	687b      	ldr	r3, [r7, #4]
   2c676:	691b      	ldr	r3, [r3, #16]
   2c678:	212f      	movs	r1, #47	; 0x2f
   2c67a:	187c      	adds	r4, r7, r1
   2c67c:	0019      	movs	r1, r3
   2c67e:	0010      	movs	r0, r2
   2c680:	4b7a      	ldr	r3, [pc, #488]	; (2c86c <dir_register+0x354>)
   2c682:	4798      	blx	r3
   2c684:	0003      	movs	r3, r0
   2c686:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2c688:	232f      	movs	r3, #47	; 0x2f
   2c68a:	18fb      	adds	r3, r7, r3
   2c68c:	781b      	ldrb	r3, [r3, #0]
   2c68e:	2b00      	cmp	r3, #0
   2c690:	d13c      	bne.n	2c70c <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2c692:	687b      	ldr	r3, [r7, #4]
   2c694:	695a      	ldr	r2, [r3, #20]
   2c696:	231f      	movs	r3, #31
   2c698:	18fb      	adds	r3, r7, r3
   2c69a:	7812      	ldrb	r2, [r2, #0]
   2c69c:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2c69e:	231f      	movs	r3, #31
   2c6a0:	18fb      	adds	r3, r7, r3
   2c6a2:	781b      	ldrb	r3, [r3, #0]
   2c6a4:	2be5      	cmp	r3, #229	; 0xe5
   2c6a6:	d004      	beq.n	2c6b2 <dir_register+0x19a>
   2c6a8:	231f      	movs	r3, #31
   2c6aa:	18fb      	adds	r3, r7, r3
   2c6ac:	781b      	ldrb	r3, [r3, #0]
   2c6ae:	2b00      	cmp	r3, #0
   2c6b0:	d119      	bne.n	2c6e6 <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2c6b2:	232c      	movs	r3, #44	; 0x2c
   2c6b4:	18fb      	adds	r3, r7, r3
   2c6b6:	881b      	ldrh	r3, [r3, #0]
   2c6b8:	2b00      	cmp	r3, #0
   2c6ba:	d104      	bne.n	2c6c6 <dir_register+0x1ae>
   2c6bc:	2328      	movs	r3, #40	; 0x28
   2c6be:	18fb      	adds	r3, r7, r3
   2c6c0:	687a      	ldr	r2, [r7, #4]
   2c6c2:	88d2      	ldrh	r2, [r2, #6]
   2c6c4:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2c6c6:	232c      	movs	r3, #44	; 0x2c
   2c6c8:	18fb      	adds	r3, r7, r3
   2c6ca:	222c      	movs	r2, #44	; 0x2c
   2c6cc:	18ba      	adds	r2, r7, r2
   2c6ce:	8812      	ldrh	r2, [r2, #0]
   2c6d0:	3201      	adds	r2, #1
   2c6d2:	801a      	strh	r2, [r3, #0]
   2c6d4:	232c      	movs	r3, #44	; 0x2c
   2c6d6:	18fa      	adds	r2, r7, r3
   2c6d8:	232a      	movs	r3, #42	; 0x2a
   2c6da:	18fb      	adds	r3, r7, r3
   2c6dc:	8812      	ldrh	r2, [r2, #0]
   2c6de:	881b      	ldrh	r3, [r3, #0]
   2c6e0:	429a      	cmp	r2, r3
   2c6e2:	d104      	bne.n	2c6ee <dir_register+0x1d6>
   2c6e4:	e013      	b.n	2c70e <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2c6e6:	232c      	movs	r3, #44	; 0x2c
   2c6e8:	18fb      	adds	r3, r7, r3
   2c6ea:	2200      	movs	r2, #0
   2c6ec:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2c6ee:	232f      	movs	r3, #47	; 0x2f
   2c6f0:	18fc      	adds	r4, r7, r3
   2c6f2:	687b      	ldr	r3, [r7, #4]
   2c6f4:	2101      	movs	r1, #1
   2c6f6:	0018      	movs	r0, r3
   2c6f8:	4b5d      	ldr	r3, [pc, #372]	; (2c870 <dir_register+0x358>)
   2c6fa:	4798      	blx	r3
   2c6fc:	0003      	movs	r3, r0
   2c6fe:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2c700:	232f      	movs	r3, #47	; 0x2f
   2c702:	18fb      	adds	r3, r7, r3
   2c704:	781b      	ldrb	r3, [r3, #0]
   2c706:	2b00      	cmp	r3, #0
   2c708:	d0b2      	beq.n	2c670 <dir_register+0x158>
   2c70a:	e000      	b.n	2c70e <dir_register+0x1f6>
		if (res != FR_OK) break;
   2c70c:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2c70e:	232f      	movs	r3, #47	; 0x2f
   2c710:	18fb      	adds	r3, r7, r3
   2c712:	781b      	ldrb	r3, [r3, #0]
   2c714:	2b00      	cmp	r3, #0
   2c716:	d163      	bne.n	2c7e0 <dir_register+0x2c8>
   2c718:	232a      	movs	r3, #42	; 0x2a
   2c71a:	18fb      	adds	r3, r7, r3
   2c71c:	881b      	ldrh	r3, [r3, #0]
   2c71e:	2b01      	cmp	r3, #1
   2c720:	d95e      	bls.n	2c7e0 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2c722:	232f      	movs	r3, #47	; 0x2f
   2c724:	18fc      	adds	r4, r7, r3
   2c726:	2328      	movs	r3, #40	; 0x28
   2c728:	18fb      	adds	r3, r7, r3
   2c72a:	881a      	ldrh	r2, [r3, #0]
   2c72c:	687b      	ldr	r3, [r7, #4]
   2c72e:	0011      	movs	r1, r2
   2c730:	0018      	movs	r0, r3
   2c732:	4b4d      	ldr	r3, [pc, #308]	; (2c868 <dir_register+0x350>)
   2c734:	4798      	blx	r3
   2c736:	0003      	movs	r3, r0
   2c738:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2c73a:	232f      	movs	r3, #47	; 0x2f
   2c73c:	18fb      	adds	r3, r7, r3
   2c73e:	781b      	ldrb	r3, [r3, #0]
   2c740:	2b00      	cmp	r3, #0
   2c742:	d14d      	bne.n	2c7e0 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2c744:	687b      	ldr	r3, [r7, #4]
   2c746:	699b      	ldr	r3, [r3, #24]
   2c748:	221e      	movs	r2, #30
   2c74a:	18bc      	adds	r4, r7, r2
   2c74c:	0018      	movs	r0, r3
   2c74e:	4b49      	ldr	r3, [pc, #292]	; (2c874 <dir_register+0x35c>)
   2c750:	4798      	blx	r3
   2c752:	0003      	movs	r3, r0
   2c754:	7023      	strb	r3, [r4, #0]
			ne--;
   2c756:	232a      	movs	r3, #42	; 0x2a
   2c758:	18fb      	adds	r3, r7, r3
   2c75a:	881a      	ldrh	r2, [r3, #0]
   2c75c:	232a      	movs	r3, #42	; 0x2a
   2c75e:	18fb      	adds	r3, r7, r3
   2c760:	3a01      	subs	r2, #1
   2c762:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2c764:	687b      	ldr	r3, [r7, #4]
   2c766:	681a      	ldr	r2, [r3, #0]
   2c768:	687b      	ldr	r3, [r7, #4]
   2c76a:	691b      	ldr	r3, [r3, #16]
   2c76c:	212f      	movs	r1, #47	; 0x2f
   2c76e:	187c      	adds	r4, r7, r1
   2c770:	0019      	movs	r1, r3
   2c772:	0010      	movs	r0, r2
   2c774:	4b3d      	ldr	r3, [pc, #244]	; (2c86c <dir_register+0x354>)
   2c776:	4798      	blx	r3
   2c778:	0003      	movs	r3, r0
   2c77a:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2c77c:	232f      	movs	r3, #47	; 0x2f
   2c77e:	18fb      	adds	r3, r7, r3
   2c780:	781b      	ldrb	r3, [r3, #0]
   2c782:	2b00      	cmp	r3, #0
   2c784:	d12b      	bne.n	2c7de <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2c786:	687b      	ldr	r3, [r7, #4]
   2c788:	69d8      	ldr	r0, [r3, #28]
   2c78a:	687b      	ldr	r3, [r7, #4]
   2c78c:	6959      	ldr	r1, [r3, #20]
   2c78e:	232a      	movs	r3, #42	; 0x2a
   2c790:	18fb      	adds	r3, r7, r3
   2c792:	881b      	ldrh	r3, [r3, #0]
   2c794:	b2da      	uxtb	r2, r3
   2c796:	231e      	movs	r3, #30
   2c798:	18fb      	adds	r3, r7, r3
   2c79a:	781b      	ldrb	r3, [r3, #0]
   2c79c:	4c36      	ldr	r4, [pc, #216]	; (2c878 <dir_register+0x360>)
   2c79e:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2c7a0:	687b      	ldr	r3, [r7, #4]
   2c7a2:	681b      	ldr	r3, [r3, #0]
   2c7a4:	2201      	movs	r2, #1
   2c7a6:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2c7a8:	232f      	movs	r3, #47	; 0x2f
   2c7aa:	18fc      	adds	r4, r7, r3
   2c7ac:	687b      	ldr	r3, [r7, #4]
   2c7ae:	2100      	movs	r1, #0
   2c7b0:	0018      	movs	r0, r3
   2c7b2:	4b2f      	ldr	r3, [pc, #188]	; (2c870 <dir_register+0x358>)
   2c7b4:	4798      	blx	r3
   2c7b6:	0003      	movs	r3, r0
   2c7b8:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2c7ba:	232f      	movs	r3, #47	; 0x2f
   2c7bc:	18fb      	adds	r3, r7, r3
   2c7be:	781b      	ldrb	r3, [r3, #0]
   2c7c0:	2b00      	cmp	r3, #0
   2c7c2:	d10d      	bne.n	2c7e0 <dir_register+0x2c8>
   2c7c4:	232a      	movs	r3, #42	; 0x2a
   2c7c6:	18fb      	adds	r3, r7, r3
   2c7c8:	222a      	movs	r2, #42	; 0x2a
   2c7ca:	18ba      	adds	r2, r7, r2
   2c7cc:	8812      	ldrh	r2, [r2, #0]
   2c7ce:	3a01      	subs	r2, #1
   2c7d0:	801a      	strh	r2, [r3, #0]
   2c7d2:	232a      	movs	r3, #42	; 0x2a
   2c7d4:	18fb      	adds	r3, r7, r3
   2c7d6:	881b      	ldrh	r3, [r3, #0]
   2c7d8:	2b00      	cmp	r3, #0
   2c7da:	d1c3      	bne.n	2c764 <dir_register+0x24c>
   2c7dc:	e000      	b.n	2c7e0 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2c7de:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2c7e0:	232f      	movs	r3, #47	; 0x2f
   2c7e2:	18fb      	adds	r3, r7, r3
   2c7e4:	781b      	ldrb	r3, [r3, #0]
   2c7e6:	2b00      	cmp	r3, #0
   2c7e8:	d12f      	bne.n	2c84a <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2c7ea:	687b      	ldr	r3, [r7, #4]
   2c7ec:	681a      	ldr	r2, [r3, #0]
   2c7ee:	687b      	ldr	r3, [r7, #4]
   2c7f0:	691b      	ldr	r3, [r3, #16]
   2c7f2:	212f      	movs	r1, #47	; 0x2f
   2c7f4:	187c      	adds	r4, r7, r1
   2c7f6:	0019      	movs	r1, r3
   2c7f8:	0010      	movs	r0, r2
   2c7fa:	4b1c      	ldr	r3, [pc, #112]	; (2c86c <dir_register+0x354>)
   2c7fc:	4798      	blx	r3
   2c7fe:	0003      	movs	r3, r0
   2c800:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2c802:	232f      	movs	r3, #47	; 0x2f
   2c804:	18fb      	adds	r3, r7, r3
   2c806:	781b      	ldrb	r3, [r3, #0]
   2c808:	2b00      	cmp	r3, #0
   2c80a:	d11e      	bne.n	2c84a <dir_register+0x332>
			dir = dj->dir;
   2c80c:	687b      	ldr	r3, [r7, #4]
   2c80e:	695b      	ldr	r3, [r3, #20]
   2c810:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2c812:	69bb      	ldr	r3, [r7, #24]
   2c814:	2220      	movs	r2, #32
   2c816:	2100      	movs	r1, #0
   2c818:	0018      	movs	r0, r3
   2c81a:	4b18      	ldr	r3, [pc, #96]	; (2c87c <dir_register+0x364>)
   2c81c:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2c81e:	687b      	ldr	r3, [r7, #4]
   2c820:	6999      	ldr	r1, [r3, #24]
   2c822:	69bb      	ldr	r3, [r7, #24]
   2c824:	220b      	movs	r2, #11
   2c826:	0018      	movs	r0, r3
   2c828:	4b0b      	ldr	r3, [pc, #44]	; (2c858 <dir_register+0x340>)
   2c82a:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2c82c:	69bb      	ldr	r3, [r7, #24]
   2c82e:	330c      	adds	r3, #12
   2c830:	001a      	movs	r2, r3
   2c832:	687b      	ldr	r3, [r7, #4]
   2c834:	699b      	ldr	r3, [r3, #24]
   2c836:	330b      	adds	r3, #11
   2c838:	781b      	ldrb	r3, [r3, #0]
   2c83a:	2118      	movs	r1, #24
   2c83c:	400b      	ands	r3, r1
   2c83e:	b2db      	uxtb	r3, r3
   2c840:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2c842:	687b      	ldr	r3, [r7, #4]
   2c844:	681b      	ldr	r3, [r3, #0]
   2c846:	2201      	movs	r2, #1
   2c848:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2c84a:	232f      	movs	r3, #47	; 0x2f
   2c84c:	18fb      	adds	r3, r7, r3
   2c84e:	781b      	ldrb	r3, [r3, #0]
}
   2c850:	0018      	movs	r0, r3
   2c852:	46bd      	mov	sp, r7
   2c854:	b00d      	add	sp, #52	; 0x34
   2c856:	bd90      	pop	{r4, r7, pc}
   2c858:	0002b371 	.word	0x0002b371
   2c85c:	0002c1cd 	.word	0x0002c1cd
   2c860:	0002c31d 	.word	0x0002c31d
   2c864:	00032769 	.word	0x00032769
   2c868:	0002bc99 	.word	0x0002bc99
   2c86c:	0002b455 	.word	0x0002b455
   2c870:	0002bdc9 	.word	0x0002bdc9
   2c874:	0002c2cd 	.word	0x0002c2cd
   2c878:	0002c0bd 	.word	0x0002c0bd
   2c87c:	0002b3a9 	.word	0x0002b3a9

0002c880 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2c880:	b590      	push	{r4, r7, lr}
   2c882:	b08b      	sub	sp, #44	; 0x2c
   2c884:	af00      	add	r7, sp, #0
   2c886:	6078      	str	r0, [r7, #4]
   2c888:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2c88a:	683b      	ldr	r3, [r7, #0]
   2c88c:	681b      	ldr	r3, [r3, #0]
   2c88e:	613b      	str	r3, [r7, #16]
   2c890:	e002      	b.n	2c898 <create_name+0x18>
   2c892:	693b      	ldr	r3, [r7, #16]
   2c894:	3301      	adds	r3, #1
   2c896:	613b      	str	r3, [r7, #16]
   2c898:	693b      	ldr	r3, [r7, #16]
   2c89a:	781b      	ldrb	r3, [r3, #0]
   2c89c:	2b2f      	cmp	r3, #47	; 0x2f
   2c89e:	d0f8      	beq.n	2c892 <create_name+0x12>
   2c8a0:	693b      	ldr	r3, [r7, #16]
   2c8a2:	781b      	ldrb	r3, [r3, #0]
   2c8a4:	2b5c      	cmp	r3, #92	; 0x5c
   2c8a6:	d0f4      	beq.n	2c892 <create_name+0x12>
	lfn = dj->lfn;
   2c8a8:	687b      	ldr	r3, [r7, #4]
   2c8aa:	69db      	ldr	r3, [r3, #28]
   2c8ac:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2c8ae:	2300      	movs	r3, #0
   2c8b0:	617b      	str	r3, [r7, #20]
   2c8b2:	697b      	ldr	r3, [r7, #20]
   2c8b4:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2c8b6:	69bb      	ldr	r3, [r7, #24]
   2c8b8:	1c5a      	adds	r2, r3, #1
   2c8ba:	61ba      	str	r2, [r7, #24]
   2c8bc:	693a      	ldr	r2, [r7, #16]
   2c8be:	18d3      	adds	r3, r2, r3
   2c8c0:	781a      	ldrb	r2, [r3, #0]
   2c8c2:	2324      	movs	r3, #36	; 0x24
   2c8c4:	18fb      	adds	r3, r7, r3
   2c8c6:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2c8c8:	2324      	movs	r3, #36	; 0x24
   2c8ca:	18fb      	adds	r3, r7, r3
   2c8cc:	881b      	ldrh	r3, [r3, #0]
   2c8ce:	2b1f      	cmp	r3, #31
   2c8d0:	d944      	bls.n	2c95c <create_name+0xdc>
   2c8d2:	2324      	movs	r3, #36	; 0x24
   2c8d4:	18fb      	adds	r3, r7, r3
   2c8d6:	881b      	ldrh	r3, [r3, #0]
   2c8d8:	2b2f      	cmp	r3, #47	; 0x2f
   2c8da:	d03f      	beq.n	2c95c <create_name+0xdc>
   2c8dc:	2324      	movs	r3, #36	; 0x24
   2c8de:	18fb      	adds	r3, r7, r3
   2c8e0:	881b      	ldrh	r3, [r3, #0]
   2c8e2:	2b5c      	cmp	r3, #92	; 0x5c
   2c8e4:	d03a      	beq.n	2c95c <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2c8e6:	697b      	ldr	r3, [r7, #20]
   2c8e8:	2bfe      	cmp	r3, #254	; 0xfe
   2c8ea:	d901      	bls.n	2c8f0 <create_name+0x70>
			return FR_INVALID_NAME;
   2c8ec:	2306      	movs	r3, #6
   2c8ee:	e1e7      	b.n	2ccc0 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2c8f0:	2324      	movs	r3, #36	; 0x24
   2c8f2:	18fb      	adds	r3, r7, r3
   2c8f4:	2224      	movs	r2, #36	; 0x24
   2c8f6:	18ba      	adds	r2, r7, r2
   2c8f8:	8812      	ldrh	r2, [r2, #0]
   2c8fa:	21ff      	movs	r1, #255	; 0xff
   2c8fc:	400a      	ands	r2, r1
   2c8fe:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2c900:	2324      	movs	r3, #36	; 0x24
   2c902:	18fc      	adds	r4, r7, r3
   2c904:	2324      	movs	r3, #36	; 0x24
   2c906:	18fb      	adds	r3, r7, r3
   2c908:	881b      	ldrh	r3, [r3, #0]
   2c90a:	2101      	movs	r1, #1
   2c90c:	0018      	movs	r0, r3
   2c90e:	4bba      	ldr	r3, [pc, #744]	; (2cbf8 <create_name+0x378>)
   2c910:	4798      	blx	r3
   2c912:	0003      	movs	r3, r0
   2c914:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2c916:	2324      	movs	r3, #36	; 0x24
   2c918:	18fb      	adds	r3, r7, r3
   2c91a:	881b      	ldrh	r3, [r3, #0]
   2c91c:	2b00      	cmp	r3, #0
   2c91e:	d101      	bne.n	2c924 <create_name+0xa4>
   2c920:	2306      	movs	r3, #6
   2c922:	e1cd      	b.n	2ccc0 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2c924:	2324      	movs	r3, #36	; 0x24
   2c926:	18fb      	adds	r3, r7, r3
   2c928:	881b      	ldrh	r3, [r3, #0]
   2c92a:	2b7f      	cmp	r3, #127	; 0x7f
   2c92c:	d80b      	bhi.n	2c946 <create_name+0xc6>
   2c92e:	2324      	movs	r3, #36	; 0x24
   2c930:	18fb      	adds	r3, r7, r3
   2c932:	881a      	ldrh	r2, [r3, #0]
   2c934:	4bb1      	ldr	r3, [pc, #708]	; (2cbfc <create_name+0x37c>)
   2c936:	0011      	movs	r1, r2
   2c938:	0018      	movs	r0, r3
   2c93a:	4bb1      	ldr	r3, [pc, #708]	; (2cc00 <create_name+0x380>)
   2c93c:	4798      	blx	r3
   2c93e:	1e03      	subs	r3, r0, #0
   2c940:	d001      	beq.n	2c946 <create_name+0xc6>
			return FR_INVALID_NAME;
   2c942:	2306      	movs	r3, #6
   2c944:	e1bc      	b.n	2ccc0 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2c946:	697b      	ldr	r3, [r7, #20]
   2c948:	1c5a      	adds	r2, r3, #1
   2c94a:	617a      	str	r2, [r7, #20]
   2c94c:	005b      	lsls	r3, r3, #1
   2c94e:	68fa      	ldr	r2, [r7, #12]
   2c950:	18d3      	adds	r3, r2, r3
   2c952:	2224      	movs	r2, #36	; 0x24
   2c954:	18ba      	adds	r2, r7, r2
   2c956:	8812      	ldrh	r2, [r2, #0]
   2c958:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2c95a:	e7ac      	b.n	2c8b6 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2c95c:	693a      	ldr	r2, [r7, #16]
   2c95e:	69bb      	ldr	r3, [r7, #24]
   2c960:	18d2      	adds	r2, r2, r3
   2c962:	683b      	ldr	r3, [r7, #0]
   2c964:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2c966:	2324      	movs	r3, #36	; 0x24
   2c968:	18fb      	adds	r3, r7, r3
   2c96a:	881b      	ldrh	r3, [r3, #0]
   2c96c:	2b1f      	cmp	r3, #31
   2c96e:	d801      	bhi.n	2c974 <create_name+0xf4>
   2c970:	2204      	movs	r2, #4
   2c972:	e000      	b.n	2c976 <create_name+0xf6>
   2c974:	2200      	movs	r2, #0
   2c976:	2326      	movs	r3, #38	; 0x26
   2c978:	18fb      	adds	r3, r7, r3
   2c97a:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2c97c:	e017      	b.n	2c9ae <create_name+0x12e>
		w = lfn[di-1];
   2c97e:	697b      	ldr	r3, [r7, #20]
   2c980:	4aa0      	ldr	r2, [pc, #640]	; (2cc04 <create_name+0x384>)
   2c982:	4694      	mov	ip, r2
   2c984:	4463      	add	r3, ip
   2c986:	005b      	lsls	r3, r3, #1
   2c988:	68fa      	ldr	r2, [r7, #12]
   2c98a:	18d2      	adds	r2, r2, r3
   2c98c:	2324      	movs	r3, #36	; 0x24
   2c98e:	18fb      	adds	r3, r7, r3
   2c990:	8812      	ldrh	r2, [r2, #0]
   2c992:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2c994:	2324      	movs	r3, #36	; 0x24
   2c996:	18fb      	adds	r3, r7, r3
   2c998:	881b      	ldrh	r3, [r3, #0]
   2c99a:	2b20      	cmp	r3, #32
   2c99c:	d004      	beq.n	2c9a8 <create_name+0x128>
   2c99e:	2324      	movs	r3, #36	; 0x24
   2c9a0:	18fb      	adds	r3, r7, r3
   2c9a2:	881b      	ldrh	r3, [r3, #0]
   2c9a4:	2b2e      	cmp	r3, #46	; 0x2e
   2c9a6:	d106      	bne.n	2c9b6 <create_name+0x136>
		di--;
   2c9a8:	697b      	ldr	r3, [r7, #20]
   2c9aa:	3b01      	subs	r3, #1
   2c9ac:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2c9ae:	697b      	ldr	r3, [r7, #20]
   2c9b0:	2b00      	cmp	r3, #0
   2c9b2:	d1e4      	bne.n	2c97e <create_name+0xfe>
   2c9b4:	e000      	b.n	2c9b8 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2c9b6:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2c9b8:	697b      	ldr	r3, [r7, #20]
   2c9ba:	2b00      	cmp	r3, #0
   2c9bc:	d101      	bne.n	2c9c2 <create_name+0x142>
   2c9be:	2306      	movs	r3, #6
   2c9c0:	e17e      	b.n	2ccc0 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2c9c2:	697b      	ldr	r3, [r7, #20]
   2c9c4:	005b      	lsls	r3, r3, #1
   2c9c6:	68fa      	ldr	r2, [r7, #12]
   2c9c8:	18d3      	adds	r3, r2, r3
   2c9ca:	2200      	movs	r2, #0
   2c9cc:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2c9ce:	687b      	ldr	r3, [r7, #4]
   2c9d0:	699b      	ldr	r3, [r3, #24]
   2c9d2:	220b      	movs	r2, #11
   2c9d4:	2120      	movs	r1, #32
   2c9d6:	0018      	movs	r0, r3
   2c9d8:	4b8b      	ldr	r3, [pc, #556]	; (2cc08 <create_name+0x388>)
   2c9da:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2c9dc:	2300      	movs	r3, #0
   2c9de:	61bb      	str	r3, [r7, #24]
   2c9e0:	e002      	b.n	2c9e8 <create_name+0x168>
   2c9e2:	69bb      	ldr	r3, [r7, #24]
   2c9e4:	3301      	adds	r3, #1
   2c9e6:	61bb      	str	r3, [r7, #24]
   2c9e8:	69bb      	ldr	r3, [r7, #24]
   2c9ea:	005b      	lsls	r3, r3, #1
   2c9ec:	68fa      	ldr	r2, [r7, #12]
   2c9ee:	18d3      	adds	r3, r2, r3
   2c9f0:	881b      	ldrh	r3, [r3, #0]
   2c9f2:	2b20      	cmp	r3, #32
   2c9f4:	d0f5      	beq.n	2c9e2 <create_name+0x162>
   2c9f6:	69bb      	ldr	r3, [r7, #24]
   2c9f8:	005b      	lsls	r3, r3, #1
   2c9fa:	68fa      	ldr	r2, [r7, #12]
   2c9fc:	18d3      	adds	r3, r2, r3
   2c9fe:	881b      	ldrh	r3, [r3, #0]
   2ca00:	2b2e      	cmp	r3, #46	; 0x2e
   2ca02:	d0ee      	beq.n	2c9e2 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2ca04:	69bb      	ldr	r3, [r7, #24]
   2ca06:	2b00      	cmp	r3, #0
   2ca08:	d00b      	beq.n	2ca22 <create_name+0x1a2>
   2ca0a:	2326      	movs	r3, #38	; 0x26
   2ca0c:	18fb      	adds	r3, r7, r3
   2ca0e:	2226      	movs	r2, #38	; 0x26
   2ca10:	18ba      	adds	r2, r7, r2
   2ca12:	7812      	ldrb	r2, [r2, #0]
   2ca14:	2103      	movs	r1, #3
   2ca16:	430a      	orrs	r2, r1
   2ca18:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2ca1a:	e002      	b.n	2ca22 <create_name+0x1a2>
   2ca1c:	697b      	ldr	r3, [r7, #20]
   2ca1e:	3b01      	subs	r3, #1
   2ca20:	617b      	str	r3, [r7, #20]
   2ca22:	697b      	ldr	r3, [r7, #20]
   2ca24:	2b00      	cmp	r3, #0
   2ca26:	d009      	beq.n	2ca3c <create_name+0x1bc>
   2ca28:	697b      	ldr	r3, [r7, #20]
   2ca2a:	4a76      	ldr	r2, [pc, #472]	; (2cc04 <create_name+0x384>)
   2ca2c:	4694      	mov	ip, r2
   2ca2e:	4463      	add	r3, ip
   2ca30:	005b      	lsls	r3, r3, #1
   2ca32:	68fa      	ldr	r2, [r7, #12]
   2ca34:	18d3      	adds	r3, r2, r3
   2ca36:	881b      	ldrh	r3, [r3, #0]
   2ca38:	2b2e      	cmp	r3, #46	; 0x2e
   2ca3a:	d1ef      	bne.n	2ca1c <create_name+0x19c>

	b = i = 0; ni = 8;
   2ca3c:	2300      	movs	r3, #0
   2ca3e:	623b      	str	r3, [r7, #32]
   2ca40:	2327      	movs	r3, #39	; 0x27
   2ca42:	18fb      	adds	r3, r7, r3
   2ca44:	2200      	movs	r2, #0
   2ca46:	701a      	strb	r2, [r3, #0]
   2ca48:	2308      	movs	r3, #8
   2ca4a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2ca4c:	69bb      	ldr	r3, [r7, #24]
   2ca4e:	1c5a      	adds	r2, r3, #1
   2ca50:	61ba      	str	r2, [r7, #24]
   2ca52:	005b      	lsls	r3, r3, #1
   2ca54:	68fa      	ldr	r2, [r7, #12]
   2ca56:	18d2      	adds	r2, r2, r3
   2ca58:	2324      	movs	r3, #36	; 0x24
   2ca5a:	18fb      	adds	r3, r7, r3
   2ca5c:	8812      	ldrh	r2, [r2, #0]
   2ca5e:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2ca60:	2324      	movs	r3, #36	; 0x24
   2ca62:	18fb      	adds	r3, r7, r3
   2ca64:	881b      	ldrh	r3, [r3, #0]
   2ca66:	2b00      	cmp	r3, #0
   2ca68:	d100      	bne.n	2ca6c <create_name+0x1ec>
   2ca6a:	e0c3      	b.n	2cbf4 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2ca6c:	2324      	movs	r3, #36	; 0x24
   2ca6e:	18fb      	adds	r3, r7, r3
   2ca70:	881b      	ldrh	r3, [r3, #0]
   2ca72:	2b20      	cmp	r3, #32
   2ca74:	d008      	beq.n	2ca88 <create_name+0x208>
   2ca76:	2324      	movs	r3, #36	; 0x24
   2ca78:	18fb      	adds	r3, r7, r3
   2ca7a:	881b      	ldrh	r3, [r3, #0]
   2ca7c:	2b2e      	cmp	r3, #46	; 0x2e
   2ca7e:	d10c      	bne.n	2ca9a <create_name+0x21a>
   2ca80:	69ba      	ldr	r2, [r7, #24]
   2ca82:	697b      	ldr	r3, [r7, #20]
   2ca84:	429a      	cmp	r2, r3
   2ca86:	d008      	beq.n	2ca9a <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2ca88:	2326      	movs	r3, #38	; 0x26
   2ca8a:	18fb      	adds	r3, r7, r3
   2ca8c:	2226      	movs	r2, #38	; 0x26
   2ca8e:	18ba      	adds	r2, r7, r2
   2ca90:	7812      	ldrb	r2, [r2, #0]
   2ca92:	2103      	movs	r1, #3
   2ca94:	430a      	orrs	r2, r1
   2ca96:	701a      	strb	r2, [r3, #0]
   2ca98:	e0ab      	b.n	2cbf2 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2ca9a:	6a3a      	ldr	r2, [r7, #32]
   2ca9c:	69fb      	ldr	r3, [r7, #28]
   2ca9e:	429a      	cmp	r2, r3
   2caa0:	d203      	bcs.n	2caaa <create_name+0x22a>
   2caa2:	69ba      	ldr	r2, [r7, #24]
   2caa4:	697b      	ldr	r3, [r7, #20]
   2caa6:	429a      	cmp	r2, r3
   2caa8:	d12a      	bne.n	2cb00 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2caaa:	69fb      	ldr	r3, [r7, #28]
   2caac:	2b0b      	cmp	r3, #11
   2caae:	d108      	bne.n	2cac2 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2cab0:	2326      	movs	r3, #38	; 0x26
   2cab2:	18fb      	adds	r3, r7, r3
   2cab4:	2226      	movs	r2, #38	; 0x26
   2cab6:	18ba      	adds	r2, r7, r2
   2cab8:	7812      	ldrb	r2, [r2, #0]
   2caba:	2103      	movs	r1, #3
   2cabc:	430a      	orrs	r2, r1
   2cabe:	701a      	strb	r2, [r3, #0]
   2cac0:	e0a9      	b.n	2cc16 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2cac2:	69ba      	ldr	r2, [r7, #24]
   2cac4:	697b      	ldr	r3, [r7, #20]
   2cac6:	429a      	cmp	r2, r3
   2cac8:	d007      	beq.n	2cada <create_name+0x25a>
   2caca:	2326      	movs	r3, #38	; 0x26
   2cacc:	18fb      	adds	r3, r7, r3
   2cace:	2226      	movs	r2, #38	; 0x26
   2cad0:	18ba      	adds	r2, r7, r2
   2cad2:	7812      	ldrb	r2, [r2, #0]
   2cad4:	2103      	movs	r1, #3
   2cad6:	430a      	orrs	r2, r1
   2cad8:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2cada:	69ba      	ldr	r2, [r7, #24]
   2cadc:	697b      	ldr	r3, [r7, #20]
   2cade:	429a      	cmp	r2, r3
   2cae0:	d900      	bls.n	2cae4 <create_name+0x264>
   2cae2:	e097      	b.n	2cc14 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2cae4:	697b      	ldr	r3, [r7, #20]
   2cae6:	61bb      	str	r3, [r7, #24]
   2cae8:	2308      	movs	r3, #8
   2caea:	623b      	str	r3, [r7, #32]
   2caec:	230b      	movs	r3, #11
   2caee:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2caf0:	2327      	movs	r3, #39	; 0x27
   2caf2:	18fb      	adds	r3, r7, r3
   2caf4:	2227      	movs	r2, #39	; 0x27
   2caf6:	18ba      	adds	r2, r7, r2
   2caf8:	7812      	ldrb	r2, [r2, #0]
   2cafa:	0092      	lsls	r2, r2, #2
   2cafc:	701a      	strb	r2, [r3, #0]
   2cafe:	e078      	b.n	2cbf2 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2cb00:	2324      	movs	r3, #36	; 0x24
   2cb02:	18fb      	adds	r3, r7, r3
   2cb04:	881b      	ldrh	r3, [r3, #0]
   2cb06:	2b7f      	cmp	r3, #127	; 0x7f
   2cb08:	d920      	bls.n	2cb4c <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2cb0a:	2324      	movs	r3, #36	; 0x24
   2cb0c:	18fc      	adds	r4, r7, r3
   2cb0e:	2324      	movs	r3, #36	; 0x24
   2cb10:	18fb      	adds	r3, r7, r3
   2cb12:	881b      	ldrh	r3, [r3, #0]
   2cb14:	2100      	movs	r1, #0
   2cb16:	0018      	movs	r0, r3
   2cb18:	4b37      	ldr	r3, [pc, #220]	; (2cbf8 <create_name+0x378>)
   2cb1a:	4798      	blx	r3
   2cb1c:	0003      	movs	r3, r0
   2cb1e:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2cb20:	2324      	movs	r3, #36	; 0x24
   2cb22:	18fb      	adds	r3, r7, r3
   2cb24:	881b      	ldrh	r3, [r3, #0]
   2cb26:	2b00      	cmp	r3, #0
   2cb28:	d008      	beq.n	2cb3c <create_name+0x2bc>
   2cb2a:	2324      	movs	r3, #36	; 0x24
   2cb2c:	18fb      	adds	r3, r7, r3
   2cb2e:	881b      	ldrh	r3, [r3, #0]
   2cb30:	3b80      	subs	r3, #128	; 0x80
   2cb32:	4a36      	ldr	r2, [pc, #216]	; (2cc0c <create_name+0x38c>)
   2cb34:	5cd2      	ldrb	r2, [r2, r3]
   2cb36:	2324      	movs	r3, #36	; 0x24
   2cb38:	18fb      	adds	r3, r7, r3
   2cb3a:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2cb3c:	2326      	movs	r3, #38	; 0x26
   2cb3e:	18fb      	adds	r3, r7, r3
   2cb40:	2226      	movs	r2, #38	; 0x26
   2cb42:	18ba      	adds	r2, r7, r2
   2cb44:	7812      	ldrb	r2, [r2, #0]
   2cb46:	2102      	movs	r1, #2
   2cb48:	430a      	orrs	r2, r1
   2cb4a:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2cb4c:	2324      	movs	r3, #36	; 0x24
   2cb4e:	18fb      	adds	r3, r7, r3
   2cb50:	881b      	ldrh	r3, [r3, #0]
   2cb52:	2b00      	cmp	r3, #0
   2cb54:	d009      	beq.n	2cb6a <create_name+0x2ea>
   2cb56:	2324      	movs	r3, #36	; 0x24
   2cb58:	18fb      	adds	r3, r7, r3
   2cb5a:	881a      	ldrh	r2, [r3, #0]
   2cb5c:	4b2c      	ldr	r3, [pc, #176]	; (2cc10 <create_name+0x390>)
   2cb5e:	0011      	movs	r1, r2
   2cb60:	0018      	movs	r0, r3
   2cb62:	4b27      	ldr	r3, [pc, #156]	; (2cc00 <create_name+0x380>)
   2cb64:	4798      	blx	r3
   2cb66:	1e03      	subs	r3, r0, #0
   2cb68:	d00c      	beq.n	2cb84 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2cb6a:	2324      	movs	r3, #36	; 0x24
   2cb6c:	18fb      	adds	r3, r7, r3
   2cb6e:	225f      	movs	r2, #95	; 0x5f
   2cb70:	801a      	strh	r2, [r3, #0]
   2cb72:	2326      	movs	r3, #38	; 0x26
   2cb74:	18fb      	adds	r3, r7, r3
   2cb76:	2226      	movs	r2, #38	; 0x26
   2cb78:	18ba      	adds	r2, r7, r2
   2cb7a:	7812      	ldrb	r2, [r2, #0]
   2cb7c:	2103      	movs	r1, #3
   2cb7e:	430a      	orrs	r2, r1
   2cb80:	701a      	strb	r2, [r3, #0]
   2cb82:	e02b      	b.n	2cbdc <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2cb84:	2324      	movs	r3, #36	; 0x24
   2cb86:	18fb      	adds	r3, r7, r3
   2cb88:	881b      	ldrh	r3, [r3, #0]
   2cb8a:	2b40      	cmp	r3, #64	; 0x40
   2cb8c:	d90d      	bls.n	2cbaa <create_name+0x32a>
   2cb8e:	2324      	movs	r3, #36	; 0x24
   2cb90:	18fb      	adds	r3, r7, r3
   2cb92:	881b      	ldrh	r3, [r3, #0]
   2cb94:	2b5a      	cmp	r3, #90	; 0x5a
   2cb96:	d808      	bhi.n	2cbaa <create_name+0x32a>
					b |= 2;
   2cb98:	2327      	movs	r3, #39	; 0x27
   2cb9a:	18fb      	adds	r3, r7, r3
   2cb9c:	2227      	movs	r2, #39	; 0x27
   2cb9e:	18ba      	adds	r2, r7, r2
   2cba0:	7812      	ldrb	r2, [r2, #0]
   2cba2:	2102      	movs	r1, #2
   2cba4:	430a      	orrs	r2, r1
   2cba6:	701a      	strb	r2, [r3, #0]
   2cba8:	e018      	b.n	2cbdc <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2cbaa:	2324      	movs	r3, #36	; 0x24
   2cbac:	18fb      	adds	r3, r7, r3
   2cbae:	881b      	ldrh	r3, [r3, #0]
   2cbb0:	2b60      	cmp	r3, #96	; 0x60
   2cbb2:	d913      	bls.n	2cbdc <create_name+0x35c>
   2cbb4:	2324      	movs	r3, #36	; 0x24
   2cbb6:	18fb      	adds	r3, r7, r3
   2cbb8:	881b      	ldrh	r3, [r3, #0]
   2cbba:	2b7a      	cmp	r3, #122	; 0x7a
   2cbbc:	d80e      	bhi.n	2cbdc <create_name+0x35c>
						b |= 1; w -= 0x20;
   2cbbe:	2327      	movs	r3, #39	; 0x27
   2cbc0:	18fb      	adds	r3, r7, r3
   2cbc2:	2227      	movs	r2, #39	; 0x27
   2cbc4:	18ba      	adds	r2, r7, r2
   2cbc6:	7812      	ldrb	r2, [r2, #0]
   2cbc8:	2101      	movs	r1, #1
   2cbca:	430a      	orrs	r2, r1
   2cbcc:	701a      	strb	r2, [r3, #0]
   2cbce:	2324      	movs	r3, #36	; 0x24
   2cbd0:	18fb      	adds	r3, r7, r3
   2cbd2:	2224      	movs	r2, #36	; 0x24
   2cbd4:	18ba      	adds	r2, r7, r2
   2cbd6:	8812      	ldrh	r2, [r2, #0]
   2cbd8:	3a20      	subs	r2, #32
   2cbda:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2cbdc:	687b      	ldr	r3, [r7, #4]
   2cbde:	699a      	ldr	r2, [r3, #24]
   2cbe0:	6a3b      	ldr	r3, [r7, #32]
   2cbe2:	1c59      	adds	r1, r3, #1
   2cbe4:	6239      	str	r1, [r7, #32]
   2cbe6:	18d3      	adds	r3, r2, r3
   2cbe8:	2224      	movs	r2, #36	; 0x24
   2cbea:	18ba      	adds	r2, r7, r2
   2cbec:	8812      	ldrh	r2, [r2, #0]
   2cbee:	b2d2      	uxtb	r2, r2
   2cbf0:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2cbf2:	e72b      	b.n	2ca4c <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2cbf4:	46c0      	nop			; (mov r8, r8)
   2cbf6:	e00e      	b.n	2cc16 <create_name+0x396>
   2cbf8:	0002dfb9 	.word	0x0002dfb9
   2cbfc:	0003923c 	.word	0x0003923c
   2cc00:	0002b423 	.word	0x0002b423
   2cc04:	7fffffff 	.word	0x7fffffff
   2cc08:	0002b3a9 	.word	0x0002b3a9
   2cc0c:	00039284 	.word	0x00039284
   2cc10:	00039248 	.word	0x00039248
			if (si > di) break;			/* No extension */
   2cc14:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2cc16:	687b      	ldr	r3, [r7, #4]
   2cc18:	699b      	ldr	r3, [r3, #24]
   2cc1a:	781b      	ldrb	r3, [r3, #0]
   2cc1c:	2be5      	cmp	r3, #229	; 0xe5
   2cc1e:	d103      	bne.n	2cc28 <create_name+0x3a8>
   2cc20:	687b      	ldr	r3, [r7, #4]
   2cc22:	699b      	ldr	r3, [r3, #24]
   2cc24:	2205      	movs	r2, #5
   2cc26:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2cc28:	69fb      	ldr	r3, [r7, #28]
   2cc2a:	2b08      	cmp	r3, #8
   2cc2c:	d106      	bne.n	2cc3c <create_name+0x3bc>
   2cc2e:	2327      	movs	r3, #39	; 0x27
   2cc30:	18fb      	adds	r3, r7, r3
   2cc32:	2227      	movs	r2, #39	; 0x27
   2cc34:	18ba      	adds	r2, r7, r2
   2cc36:	7812      	ldrb	r2, [r2, #0]
   2cc38:	0092      	lsls	r2, r2, #2
   2cc3a:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2cc3c:	2327      	movs	r3, #39	; 0x27
   2cc3e:	18fb      	adds	r3, r7, r3
   2cc40:	781b      	ldrb	r3, [r3, #0]
   2cc42:	220c      	movs	r2, #12
   2cc44:	4013      	ands	r3, r2
   2cc46:	2b0c      	cmp	r3, #12
   2cc48:	d006      	beq.n	2cc58 <create_name+0x3d8>
   2cc4a:	2327      	movs	r3, #39	; 0x27
   2cc4c:	18fb      	adds	r3, r7, r3
   2cc4e:	781b      	ldrb	r3, [r3, #0]
   2cc50:	2203      	movs	r2, #3
   2cc52:	4013      	ands	r3, r2
   2cc54:	2b03      	cmp	r3, #3
   2cc56:	d107      	bne.n	2cc68 <create_name+0x3e8>
		cf |= NS_LFN;
   2cc58:	2326      	movs	r3, #38	; 0x26
   2cc5a:	18fb      	adds	r3, r7, r3
   2cc5c:	2226      	movs	r2, #38	; 0x26
   2cc5e:	18ba      	adds	r2, r7, r2
   2cc60:	7812      	ldrb	r2, [r2, #0]
   2cc62:	2102      	movs	r1, #2
   2cc64:	430a      	orrs	r2, r1
   2cc66:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2cc68:	2326      	movs	r3, #38	; 0x26
   2cc6a:	18fb      	adds	r3, r7, r3
   2cc6c:	781b      	ldrb	r3, [r3, #0]
   2cc6e:	2202      	movs	r2, #2
   2cc70:	4013      	ands	r3, r2
   2cc72:	d11d      	bne.n	2ccb0 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2cc74:	2327      	movs	r3, #39	; 0x27
   2cc76:	18fb      	adds	r3, r7, r3
   2cc78:	781b      	ldrb	r3, [r3, #0]
   2cc7a:	2203      	movs	r2, #3
   2cc7c:	4013      	ands	r3, r2
   2cc7e:	2b01      	cmp	r3, #1
   2cc80:	d107      	bne.n	2cc92 <create_name+0x412>
   2cc82:	2326      	movs	r3, #38	; 0x26
   2cc84:	18fb      	adds	r3, r7, r3
   2cc86:	2226      	movs	r2, #38	; 0x26
   2cc88:	18ba      	adds	r2, r7, r2
   2cc8a:	7812      	ldrb	r2, [r2, #0]
   2cc8c:	2110      	movs	r1, #16
   2cc8e:	430a      	orrs	r2, r1
   2cc90:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2cc92:	2327      	movs	r3, #39	; 0x27
   2cc94:	18fb      	adds	r3, r7, r3
   2cc96:	781b      	ldrb	r3, [r3, #0]
   2cc98:	220c      	movs	r2, #12
   2cc9a:	4013      	ands	r3, r2
   2cc9c:	2b04      	cmp	r3, #4
   2cc9e:	d107      	bne.n	2ccb0 <create_name+0x430>
   2cca0:	2326      	movs	r3, #38	; 0x26
   2cca2:	18fb      	adds	r3, r7, r3
   2cca4:	2226      	movs	r2, #38	; 0x26
   2cca6:	18ba      	adds	r2, r7, r2
   2cca8:	7812      	ldrb	r2, [r2, #0]
   2ccaa:	2108      	movs	r1, #8
   2ccac:	430a      	orrs	r2, r1
   2ccae:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2ccb0:	687b      	ldr	r3, [r7, #4]
   2ccb2:	699b      	ldr	r3, [r3, #24]
   2ccb4:	330b      	adds	r3, #11
   2ccb6:	2226      	movs	r2, #38	; 0x26
   2ccb8:	18ba      	adds	r2, r7, r2
   2ccba:	7812      	ldrb	r2, [r2, #0]
   2ccbc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2ccbe:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2ccc0:	0018      	movs	r0, r3
   2ccc2:	46bd      	mov	sp, r7
   2ccc4:	b00b      	add	sp, #44	; 0x2c
   2ccc6:	bd90      	pop	{r4, r7, pc}

0002ccc8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2ccc8:	b590      	push	{r4, r7, lr}
   2ccca:	b085      	sub	sp, #20
   2cccc:	af00      	add	r7, sp, #0
   2ccce:	6078      	str	r0, [r7, #4]
   2ccd0:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2ccd2:	683b      	ldr	r3, [r7, #0]
   2ccd4:	781b      	ldrb	r3, [r3, #0]
   2ccd6:	2b2f      	cmp	r3, #47	; 0x2f
   2ccd8:	d003      	beq.n	2cce2 <follow_path+0x1a>
   2ccda:	683b      	ldr	r3, [r7, #0]
   2ccdc:	781b      	ldrb	r3, [r3, #0]
   2ccde:	2b5c      	cmp	r3, #92	; 0x5c
   2cce0:	d102      	bne.n	2cce8 <follow_path+0x20>
		path++;
   2cce2:	683b      	ldr	r3, [r7, #0]
   2cce4:	3301      	adds	r3, #1
   2cce6:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2cce8:	687b      	ldr	r3, [r7, #4]
   2ccea:	2200      	movs	r2, #0
   2ccec:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2ccee:	683b      	ldr	r3, [r7, #0]
   2ccf0:	781b      	ldrb	r3, [r3, #0]
   2ccf2:	2b1f      	cmp	r3, #31
   2ccf4:	d80c      	bhi.n	2cd10 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2ccf6:	230f      	movs	r3, #15
   2ccf8:	18fc      	adds	r4, r7, r3
   2ccfa:	687b      	ldr	r3, [r7, #4]
   2ccfc:	2100      	movs	r1, #0
   2ccfe:	0018      	movs	r0, r3
   2cd00:	4b3c      	ldr	r3, [pc, #240]	; (2cdf4 <follow_path+0x12c>)
   2cd02:	4798      	blx	r3
   2cd04:	0003      	movs	r3, r0
   2cd06:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2cd08:	687b      	ldr	r3, [r7, #4]
   2cd0a:	2200      	movs	r2, #0
   2cd0c:	615a      	str	r2, [r3, #20]
   2cd0e:	e06a      	b.n	2cde6 <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2cd10:	230f      	movs	r3, #15
   2cd12:	18fc      	adds	r4, r7, r3
   2cd14:	003a      	movs	r2, r7
   2cd16:	687b      	ldr	r3, [r7, #4]
   2cd18:	0011      	movs	r1, r2
   2cd1a:	0018      	movs	r0, r3
   2cd1c:	4b36      	ldr	r3, [pc, #216]	; (2cdf8 <follow_path+0x130>)
   2cd1e:	4798      	blx	r3
   2cd20:	0003      	movs	r3, r0
   2cd22:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2cd24:	230f      	movs	r3, #15
   2cd26:	18fb      	adds	r3, r7, r3
   2cd28:	781b      	ldrb	r3, [r3, #0]
   2cd2a:	2b00      	cmp	r3, #0
   2cd2c:	d154      	bne.n	2cdd8 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2cd2e:	230f      	movs	r3, #15
   2cd30:	18fc      	adds	r4, r7, r3
   2cd32:	687b      	ldr	r3, [r7, #4]
   2cd34:	0018      	movs	r0, r3
   2cd36:	4b31      	ldr	r3, [pc, #196]	; (2cdfc <follow_path+0x134>)
   2cd38:	4798      	blx	r3
   2cd3a:	0003      	movs	r3, r0
   2cd3c:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2cd3e:	687b      	ldr	r3, [r7, #4]
   2cd40:	699a      	ldr	r2, [r3, #24]
   2cd42:	230e      	movs	r3, #14
   2cd44:	18fb      	adds	r3, r7, r3
   2cd46:	7ad2      	ldrb	r2, [r2, #11]
   2cd48:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2cd4a:	230f      	movs	r3, #15
   2cd4c:	18fb      	adds	r3, r7, r3
   2cd4e:	781b      	ldrb	r3, [r3, #0]
   2cd50:	2b00      	cmp	r3, #0
   2cd52:	d00f      	beq.n	2cd74 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2cd54:	230f      	movs	r3, #15
   2cd56:	18fb      	adds	r3, r7, r3
   2cd58:	781b      	ldrb	r3, [r3, #0]
   2cd5a:	2b04      	cmp	r3, #4
   2cd5c:	d13e      	bne.n	2cddc <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2cd5e:	230e      	movs	r3, #14
   2cd60:	18fb      	adds	r3, r7, r3
   2cd62:	781b      	ldrb	r3, [r3, #0]
   2cd64:	2204      	movs	r2, #4
   2cd66:	4013      	ands	r3, r2
   2cd68:	d13a      	bne.n	2cde0 <follow_path+0x118>
   2cd6a:	230f      	movs	r3, #15
   2cd6c:	18fb      	adds	r3, r7, r3
   2cd6e:	2205      	movs	r2, #5
   2cd70:	701a      	strb	r2, [r3, #0]
				}
				break;
   2cd72:	e035      	b.n	2cde0 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2cd74:	230e      	movs	r3, #14
   2cd76:	18fb      	adds	r3, r7, r3
   2cd78:	781b      	ldrb	r3, [r3, #0]
   2cd7a:	2204      	movs	r2, #4
   2cd7c:	4013      	ands	r3, r2
   2cd7e:	d131      	bne.n	2cde4 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2cd80:	687b      	ldr	r3, [r7, #4]
   2cd82:	695b      	ldr	r3, [r3, #20]
   2cd84:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2cd86:	68bb      	ldr	r3, [r7, #8]
   2cd88:	330b      	adds	r3, #11
   2cd8a:	781b      	ldrb	r3, [r3, #0]
   2cd8c:	001a      	movs	r2, r3
   2cd8e:	2310      	movs	r3, #16
   2cd90:	4013      	ands	r3, r2
   2cd92:	d104      	bne.n	2cd9e <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2cd94:	230f      	movs	r3, #15
   2cd96:	18fb      	adds	r3, r7, r3
   2cd98:	2205      	movs	r2, #5
   2cd9a:	701a      	strb	r2, [r3, #0]
   2cd9c:	e023      	b.n	2cde6 <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2cd9e:	68bb      	ldr	r3, [r7, #8]
   2cda0:	3315      	adds	r3, #21
   2cda2:	781b      	ldrb	r3, [r3, #0]
   2cda4:	021b      	lsls	r3, r3, #8
   2cda6:	b21a      	sxth	r2, r3
   2cda8:	68bb      	ldr	r3, [r7, #8]
   2cdaa:	3314      	adds	r3, #20
   2cdac:	781b      	ldrb	r3, [r3, #0]
   2cdae:	b21b      	sxth	r3, r3
   2cdb0:	4313      	orrs	r3, r2
   2cdb2:	b21b      	sxth	r3, r3
   2cdb4:	b29b      	uxth	r3, r3
   2cdb6:	041b      	lsls	r3, r3, #16
   2cdb8:	68ba      	ldr	r2, [r7, #8]
   2cdba:	321b      	adds	r2, #27
   2cdbc:	7812      	ldrb	r2, [r2, #0]
   2cdbe:	0212      	lsls	r2, r2, #8
   2cdc0:	b211      	sxth	r1, r2
   2cdc2:	68ba      	ldr	r2, [r7, #8]
   2cdc4:	321a      	adds	r2, #26
   2cdc6:	7812      	ldrb	r2, [r2, #0]
   2cdc8:	b212      	sxth	r2, r2
   2cdca:	430a      	orrs	r2, r1
   2cdcc:	b212      	sxth	r2, r2
   2cdce:	b292      	uxth	r2, r2
   2cdd0:	431a      	orrs	r2, r3
   2cdd2:	687b      	ldr	r3, [r7, #4]
   2cdd4:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2cdd6:	e79b      	b.n	2cd10 <follow_path+0x48>
			if (res != FR_OK) break;
   2cdd8:	46c0      	nop			; (mov r8, r8)
   2cdda:	e004      	b.n	2cde6 <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2cddc:	46c0      	nop			; (mov r8, r8)
   2cdde:	e002      	b.n	2cde6 <follow_path+0x11e>
				break;
   2cde0:	46c0      	nop			; (mov r8, r8)
   2cde2:	e000      	b.n	2cde6 <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2cde4:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2cde6:	230f      	movs	r3, #15
   2cde8:	18fb      	adds	r3, r7, r3
   2cdea:	781b      	ldrb	r3, [r3, #0]
}
   2cdec:	0018      	movs	r0, r3
   2cdee:	46bd      	mov	sp, r7
   2cdf0:	b005      	add	sp, #20
   2cdf2:	bd90      	pop	{r4, r7, pc}
   2cdf4:	0002bc99 	.word	0x0002bc99
   2cdf8:	0002c881 	.word	0x0002c881
   2cdfc:	0002c31d 	.word	0x0002c31d

0002ce00 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2ce00:	b590      	push	{r4, r7, lr}
   2ce02:	b083      	sub	sp, #12
   2ce04:	af00      	add	r7, sp, #0
   2ce06:	6078      	str	r0, [r7, #4]
   2ce08:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2ce0a:	687b      	ldr	r3, [r7, #4]
   2ce0c:	7858      	ldrb	r0, [r3, #1]
   2ce0e:	687b      	ldr	r3, [r7, #4]
   2ce10:	3330      	adds	r3, #48	; 0x30
   2ce12:	0019      	movs	r1, r3
   2ce14:	683a      	ldr	r2, [r7, #0]
   2ce16:	2301      	movs	r3, #1
   2ce18:	4c2a      	ldr	r4, [pc, #168]	; (2cec4 <check_fs+0xc4>)
   2ce1a:	47a0      	blx	r4
   2ce1c:	1e03      	subs	r3, r0, #0
   2ce1e:	d001      	beq.n	2ce24 <check_fs+0x24>
		return 3;
   2ce20:	2303      	movs	r3, #3
   2ce22:	e04b      	b.n	2cebc <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2ce24:	687b      	ldr	r3, [r7, #4]
   2ce26:	4a28      	ldr	r2, [pc, #160]	; (2cec8 <check_fs+0xc8>)
   2ce28:	4694      	mov	ip, r2
   2ce2a:	4463      	add	r3, ip
   2ce2c:	3301      	adds	r3, #1
   2ce2e:	781b      	ldrb	r3, [r3, #0]
   2ce30:	021b      	lsls	r3, r3, #8
   2ce32:	b21a      	sxth	r2, r3
   2ce34:	687b      	ldr	r3, [r7, #4]
   2ce36:	4924      	ldr	r1, [pc, #144]	; (2cec8 <check_fs+0xc8>)
   2ce38:	5c5b      	ldrb	r3, [r3, r1]
   2ce3a:	b21b      	sxth	r3, r3
   2ce3c:	4313      	orrs	r3, r2
   2ce3e:	b21b      	sxth	r3, r3
   2ce40:	4a22      	ldr	r2, [pc, #136]	; (2cecc <check_fs+0xcc>)
   2ce42:	4293      	cmp	r3, r2
   2ce44:	d001      	beq.n	2ce4a <check_fs+0x4a>
		return 2;
   2ce46:	2302      	movs	r3, #2
   2ce48:	e038      	b.n	2cebc <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2ce4a:	687b      	ldr	r3, [r7, #4]
   2ce4c:	3366      	adds	r3, #102	; 0x66
   2ce4e:	3303      	adds	r3, #3
   2ce50:	781b      	ldrb	r3, [r3, #0]
   2ce52:	061a      	lsls	r2, r3, #24
   2ce54:	687b      	ldr	r3, [r7, #4]
   2ce56:	3366      	adds	r3, #102	; 0x66
   2ce58:	3302      	adds	r3, #2
   2ce5a:	781b      	ldrb	r3, [r3, #0]
   2ce5c:	041b      	lsls	r3, r3, #16
   2ce5e:	4313      	orrs	r3, r2
   2ce60:	687a      	ldr	r2, [r7, #4]
   2ce62:	3266      	adds	r2, #102	; 0x66
   2ce64:	3201      	adds	r2, #1
   2ce66:	7812      	ldrb	r2, [r2, #0]
   2ce68:	0212      	lsls	r2, r2, #8
   2ce6a:	4313      	orrs	r3, r2
   2ce6c:	687a      	ldr	r2, [r7, #4]
   2ce6e:	2166      	movs	r1, #102	; 0x66
   2ce70:	5c52      	ldrb	r2, [r2, r1]
   2ce72:	4313      	orrs	r3, r2
   2ce74:	021b      	lsls	r3, r3, #8
   2ce76:	0a1b      	lsrs	r3, r3, #8
   2ce78:	4a15      	ldr	r2, [pc, #84]	; (2ced0 <check_fs+0xd0>)
   2ce7a:	4293      	cmp	r3, r2
   2ce7c:	d101      	bne.n	2ce82 <check_fs+0x82>
		return 0;
   2ce7e:	2300      	movs	r3, #0
   2ce80:	e01c      	b.n	2cebc <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2ce82:	687b      	ldr	r3, [r7, #4]
   2ce84:	3382      	adds	r3, #130	; 0x82
   2ce86:	3303      	adds	r3, #3
   2ce88:	781b      	ldrb	r3, [r3, #0]
   2ce8a:	061a      	lsls	r2, r3, #24
   2ce8c:	687b      	ldr	r3, [r7, #4]
   2ce8e:	3382      	adds	r3, #130	; 0x82
   2ce90:	3302      	adds	r3, #2
   2ce92:	781b      	ldrb	r3, [r3, #0]
   2ce94:	041b      	lsls	r3, r3, #16
   2ce96:	4313      	orrs	r3, r2
   2ce98:	687a      	ldr	r2, [r7, #4]
   2ce9a:	3282      	adds	r2, #130	; 0x82
   2ce9c:	3201      	adds	r2, #1
   2ce9e:	7812      	ldrb	r2, [r2, #0]
   2cea0:	0212      	lsls	r2, r2, #8
   2cea2:	4313      	orrs	r3, r2
   2cea4:	687a      	ldr	r2, [r7, #4]
   2cea6:	2182      	movs	r1, #130	; 0x82
   2cea8:	5c52      	ldrb	r2, [r2, r1]
   2ceaa:	4313      	orrs	r3, r2
   2ceac:	021b      	lsls	r3, r3, #8
   2ceae:	0a1b      	lsrs	r3, r3, #8
   2ceb0:	4a07      	ldr	r2, [pc, #28]	; (2ced0 <check_fs+0xd0>)
   2ceb2:	4293      	cmp	r3, r2
   2ceb4:	d101      	bne.n	2ceba <check_fs+0xba>
		return 0;
   2ceb6:	2300      	movs	r3, #0
   2ceb8:	e000      	b.n	2cebc <check_fs+0xbc>

	return 1;
   2ceba:	2301      	movs	r3, #1
}
   2cebc:	0018      	movs	r0, r3
   2cebe:	46bd      	mov	sp, r7
   2cec0:	b003      	add	sp, #12
   2cec2:	bd90      	pop	{r4, r7, pc}
   2cec4:	0002b069 	.word	0x0002b069
   2cec8:	0000022e 	.word	0x0000022e
   2cecc:	ffffaa55 	.word	0xffffaa55
   2ced0:	00544146 	.word	0x00544146

0002ced4 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2ced4:	b590      	push	{r4, r7, lr}
   2ced6:	b093      	sub	sp, #76	; 0x4c
   2ced8:	af00      	add	r7, sp, #0
   2ceda:	60f8      	str	r0, [r7, #12]
   2cedc:	60b9      	str	r1, [r7, #8]
   2cede:	1dfb      	adds	r3, r7, #7
   2cee0:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2cee2:	68fb      	ldr	r3, [r7, #12]
   2cee4:	681b      	ldr	r3, [r3, #0]
   2cee6:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2cee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ceea:	781b      	ldrb	r3, [r3, #0]
   2ceec:	3b30      	subs	r3, #48	; 0x30
   2ceee:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2cef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2cef2:	2b09      	cmp	r3, #9
   2cef4:	d80b      	bhi.n	2cf0e <chk_mounted+0x3a>
   2cef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2cef8:	3301      	adds	r3, #1
   2cefa:	781b      	ldrb	r3, [r3, #0]
   2cefc:	2b3a      	cmp	r3, #58	; 0x3a
   2cefe:	d106      	bne.n	2cf0e <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2cf00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2cf02:	3302      	adds	r3, #2
   2cf04:	62fb      	str	r3, [r7, #44]	; 0x2c
   2cf06:	68fb      	ldr	r3, [r7, #12]
   2cf08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2cf0a:	601a      	str	r2, [r3, #0]
   2cf0c:	e001      	b.n	2cf12 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2cf0e:	2300      	movs	r3, #0
   2cf10:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2cf12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2cf14:	2b07      	cmp	r3, #7
   2cf16:	d901      	bls.n	2cf1c <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2cf18:	230b      	movs	r3, #11
   2cf1a:	e2af      	b.n	2d47c <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2cf1c:	4bc5      	ldr	r3, [pc, #788]	; (2d234 <chk_mounted+0x360>)
   2cf1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2cf20:	0092      	lsls	r2, r2, #2
   2cf22:	58d3      	ldr	r3, [r2, r3]
   2cf24:	62bb      	str	r3, [r7, #40]	; 0x28
   2cf26:	68bb      	ldr	r3, [r7, #8]
   2cf28:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cf2a:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2cf2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf2e:	2b00      	cmp	r3, #0
   2cf30:	d101      	bne.n	2cf36 <chk_mounted+0x62>
   2cf32:	230c      	movs	r3, #12
   2cf34:	e2a2      	b.n	2d47c <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2cf36:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf38:	781b      	ldrb	r3, [r3, #0]
   2cf3a:	2b00      	cmp	r3, #0
   2cf3c:	d01c      	beq.n	2cf78 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2cf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf40:	785b      	ldrb	r3, [r3, #1]
   2cf42:	2227      	movs	r2, #39	; 0x27
   2cf44:	18bc      	adds	r4, r7, r2
   2cf46:	0018      	movs	r0, r3
   2cf48:	4bbb      	ldr	r3, [pc, #748]	; (2d238 <chk_mounted+0x364>)
   2cf4a:	4798      	blx	r3
   2cf4c:	0003      	movs	r3, r0
   2cf4e:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2cf50:	2327      	movs	r3, #39	; 0x27
   2cf52:	18fb      	adds	r3, r7, r3
   2cf54:	781b      	ldrb	r3, [r3, #0]
   2cf56:	2201      	movs	r2, #1
   2cf58:	4013      	ands	r3, r2
   2cf5a:	d10d      	bne.n	2cf78 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2cf5c:	1dfb      	adds	r3, r7, #7
   2cf5e:	781b      	ldrb	r3, [r3, #0]
   2cf60:	2b00      	cmp	r3, #0
   2cf62:	d007      	beq.n	2cf74 <chk_mounted+0xa0>
   2cf64:	2327      	movs	r3, #39	; 0x27
   2cf66:	18fb      	adds	r3, r7, r3
   2cf68:	781b      	ldrb	r3, [r3, #0]
   2cf6a:	2204      	movs	r2, #4
   2cf6c:	4013      	ands	r3, r2
   2cf6e:	d001      	beq.n	2cf74 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2cf70:	230a      	movs	r3, #10
   2cf72:	e283      	b.n	2d47c <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2cf74:	2300      	movs	r3, #0
   2cf76:	e281      	b.n	2d47c <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2cf78:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf7a:	2200      	movs	r2, #0
   2cf7c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2cf7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2cf80:	b2da      	uxtb	r2, r3
   2cf82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf84:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2cf86:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf88:	785b      	ldrb	r3, [r3, #1]
   2cf8a:	2227      	movs	r2, #39	; 0x27
   2cf8c:	18bc      	adds	r4, r7, r2
   2cf8e:	0018      	movs	r0, r3
   2cf90:	4baa      	ldr	r3, [pc, #680]	; (2d23c <chk_mounted+0x368>)
   2cf92:	4798      	blx	r3
   2cf94:	0003      	movs	r3, r0
   2cf96:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2cf98:	2327      	movs	r3, #39	; 0x27
   2cf9a:	18fb      	adds	r3, r7, r3
   2cf9c:	781b      	ldrb	r3, [r3, #0]
   2cf9e:	2201      	movs	r2, #1
   2cfa0:	4013      	ands	r3, r2
   2cfa2:	d001      	beq.n	2cfa8 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2cfa4:	2303      	movs	r3, #3
   2cfa6:	e269      	b.n	2d47c <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2cfa8:	1dfb      	adds	r3, r7, #7
   2cfaa:	781b      	ldrb	r3, [r3, #0]
   2cfac:	2b00      	cmp	r3, #0
   2cfae:	d007      	beq.n	2cfc0 <chk_mounted+0xec>
   2cfb0:	2327      	movs	r3, #39	; 0x27
   2cfb2:	18fb      	adds	r3, r7, r3
   2cfb4:	781b      	ldrb	r3, [r3, #0]
   2cfb6:	2204      	movs	r2, #4
   2cfb8:	4013      	ands	r3, r2
   2cfba:	d001      	beq.n	2cfc0 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2cfbc:	230a      	movs	r3, #10
   2cfbe:	e25d      	b.n	2d47c <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2cfc0:	2300      	movs	r3, #0
   2cfc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   2cfc4:	2347      	movs	r3, #71	; 0x47
   2cfc6:	18fc      	adds	r4, r7, r3
   2cfc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2cfca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cfcc:	0011      	movs	r1, r2
   2cfce:	0018      	movs	r0, r3
   2cfd0:	4b9b      	ldr	r3, [pc, #620]	; (2d240 <chk_mounted+0x36c>)
   2cfd2:	4798      	blx	r3
   2cfd4:	0003      	movs	r3, r0
   2cfd6:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2cfd8:	2347      	movs	r3, #71	; 0x47
   2cfda:	18fb      	adds	r3, r7, r3
   2cfdc:	781b      	ldrb	r3, [r3, #0]
   2cfde:	2b01      	cmp	r3, #1
   2cfe0:	d13b      	bne.n	2d05a <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2cfe2:	2346      	movs	r3, #70	; 0x46
   2cfe4:	18fb      	adds	r3, r7, r3
   2cfe6:	2200      	movs	r2, #0
   2cfe8:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2cfea:	2346      	movs	r3, #70	; 0x46
   2cfec:	18fb      	adds	r3, r7, r3
   2cfee:	781b      	ldrb	r3, [r3, #0]
   2cff0:	2b00      	cmp	r3, #0
   2cff2:	d006      	beq.n	2d002 <chk_mounted+0x12e>
   2cff4:	2346      	movs	r3, #70	; 0x46
   2cff6:	18fb      	adds	r3, r7, r3
   2cff8:	781a      	ldrb	r2, [r3, #0]
   2cffa:	2346      	movs	r3, #70	; 0x46
   2cffc:	18fb      	adds	r3, r7, r3
   2cffe:	3a01      	subs	r2, #1
   2d000:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2d002:	2346      	movs	r3, #70	; 0x46
   2d004:	18fb      	adds	r3, r7, r3
   2d006:	781b      	ldrb	r3, [r3, #0]
   2d008:	011b      	lsls	r3, r3, #4
   2d00a:	33bf      	adds	r3, #191	; 0xbf
   2d00c:	33ff      	adds	r3, #255	; 0xff
   2d00e:	3330      	adds	r3, #48	; 0x30
   2d010:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d012:	18d3      	adds	r3, r2, r3
   2d014:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2d016:	6a3b      	ldr	r3, [r7, #32]
   2d018:	3304      	adds	r3, #4
   2d01a:	781b      	ldrb	r3, [r3, #0]
   2d01c:	2b00      	cmp	r3, #0
   2d01e:	d01c      	beq.n	2d05a <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2d020:	6a3b      	ldr	r3, [r7, #32]
   2d022:	330b      	adds	r3, #11
   2d024:	781b      	ldrb	r3, [r3, #0]
   2d026:	061a      	lsls	r2, r3, #24
   2d028:	6a3b      	ldr	r3, [r7, #32]
   2d02a:	330a      	adds	r3, #10
   2d02c:	781b      	ldrb	r3, [r3, #0]
   2d02e:	041b      	lsls	r3, r3, #16
   2d030:	4313      	orrs	r3, r2
   2d032:	6a3a      	ldr	r2, [r7, #32]
   2d034:	3209      	adds	r2, #9
   2d036:	7812      	ldrb	r2, [r2, #0]
   2d038:	0212      	lsls	r2, r2, #8
   2d03a:	4313      	orrs	r3, r2
   2d03c:	6a3a      	ldr	r2, [r7, #32]
   2d03e:	3208      	adds	r2, #8
   2d040:	7812      	ldrb	r2, [r2, #0]
   2d042:	4313      	orrs	r3, r2
   2d044:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2d046:	2347      	movs	r3, #71	; 0x47
   2d048:	18fc      	adds	r4, r7, r3
   2d04a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d04e:	0011      	movs	r1, r2
   2d050:	0018      	movs	r0, r3
   2d052:	4b7b      	ldr	r3, [pc, #492]	; (2d240 <chk_mounted+0x36c>)
   2d054:	4798      	blx	r3
   2d056:	0003      	movs	r3, r0
   2d058:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2d05a:	2347      	movs	r3, #71	; 0x47
   2d05c:	18fb      	adds	r3, r7, r3
   2d05e:	781b      	ldrb	r3, [r3, #0]
   2d060:	2b03      	cmp	r3, #3
   2d062:	d101      	bne.n	2d068 <chk_mounted+0x194>
   2d064:	2301      	movs	r3, #1
   2d066:	e209      	b.n	2d47c <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2d068:	2347      	movs	r3, #71	; 0x47
   2d06a:	18fb      	adds	r3, r7, r3
   2d06c:	781b      	ldrb	r3, [r3, #0]
   2d06e:	2b00      	cmp	r3, #0
   2d070:	d001      	beq.n	2d076 <chk_mounted+0x1a2>
   2d072:	230d      	movs	r3, #13
   2d074:	e202      	b.n	2d47c <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2d076:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d078:	223c      	movs	r2, #60	; 0x3c
   2d07a:	5c9b      	ldrb	r3, [r3, r2]
   2d07c:	021b      	lsls	r3, r3, #8
   2d07e:	b21a      	sxth	r2, r3
   2d080:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d082:	213b      	movs	r1, #59	; 0x3b
   2d084:	5c5b      	ldrb	r3, [r3, r1]
   2d086:	b21b      	sxth	r3, r3
   2d088:	4313      	orrs	r3, r2
   2d08a:	b21a      	sxth	r2, r3
   2d08c:	2380      	movs	r3, #128	; 0x80
   2d08e:	009b      	lsls	r3, r3, #2
   2d090:	429a      	cmp	r2, r3
   2d092:	d001      	beq.n	2d098 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2d094:	230d      	movs	r3, #13
   2d096:	e1f1      	b.n	2d47c <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2d098:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d09a:	2247      	movs	r2, #71	; 0x47
   2d09c:	5c9b      	ldrb	r3, [r3, r2]
   2d09e:	021b      	lsls	r3, r3, #8
   2d0a0:	b21a      	sxth	r2, r3
   2d0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0a4:	2146      	movs	r1, #70	; 0x46
   2d0a6:	5c5b      	ldrb	r3, [r3, r1]
   2d0a8:	b21b      	sxth	r3, r3
   2d0aa:	4313      	orrs	r3, r2
   2d0ac:	b21b      	sxth	r3, r3
   2d0ae:	b29b      	uxth	r3, r3
   2d0b0:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2d0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d0b4:	2b00      	cmp	r3, #0
   2d0b6:	d112      	bne.n	2d0de <chk_mounted+0x20a>
   2d0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0ba:	2257      	movs	r2, #87	; 0x57
   2d0bc:	5c9b      	ldrb	r3, [r3, r2]
   2d0be:	061a      	lsls	r2, r3, #24
   2d0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0c2:	2156      	movs	r1, #86	; 0x56
   2d0c4:	5c5b      	ldrb	r3, [r3, r1]
   2d0c6:	041b      	lsls	r3, r3, #16
   2d0c8:	4313      	orrs	r3, r2
   2d0ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d0cc:	2155      	movs	r1, #85	; 0x55
   2d0ce:	5c52      	ldrb	r2, [r2, r1]
   2d0d0:	0212      	lsls	r2, r2, #8
   2d0d2:	4313      	orrs	r3, r2
   2d0d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d0d6:	2154      	movs	r1, #84	; 0x54
   2d0d8:	5c52      	ldrb	r2, [r2, r1]
   2d0da:	4313      	orrs	r3, r2
   2d0dc:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2d0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2d0e2:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2d0e4:	231f      	movs	r3, #31
   2d0e6:	18fb      	adds	r3, r7, r3
   2d0e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d0ea:	2140      	movs	r1, #64	; 0x40
   2d0ec:	5c52      	ldrb	r2, [r2, r1]
   2d0ee:	701a      	strb	r2, [r3, #0]
   2d0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0f2:	221f      	movs	r2, #31
   2d0f4:	18ba      	adds	r2, r7, r2
   2d0f6:	7812      	ldrb	r2, [r2, #0]
   2d0f8:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2d0fa:	231f      	movs	r3, #31
   2d0fc:	18fb      	adds	r3, r7, r3
   2d0fe:	781b      	ldrb	r3, [r3, #0]
   2d100:	2b01      	cmp	r3, #1
   2d102:	d006      	beq.n	2d112 <chk_mounted+0x23e>
   2d104:	231f      	movs	r3, #31
   2d106:	18fb      	adds	r3, r7, r3
   2d108:	781b      	ldrb	r3, [r3, #0]
   2d10a:	2b02      	cmp	r3, #2
   2d10c:	d001      	beq.n	2d112 <chk_mounted+0x23e>
   2d10e:	230d      	movs	r3, #13
   2d110:	e1b4      	b.n	2d47c <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2d112:	231f      	movs	r3, #31
   2d114:	18fb      	adds	r3, r7, r3
   2d116:	781a      	ldrb	r2, [r3, #0]
   2d118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d11a:	4353      	muls	r3, r2
   2d11c:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2d11e:	231f      	movs	r3, #31
   2d120:	18fb      	adds	r3, r7, r3
   2d122:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d124:	213d      	movs	r1, #61	; 0x3d
   2d126:	5c52      	ldrb	r2, [r2, r1]
   2d128:	701a      	strb	r2, [r3, #0]
   2d12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d12c:	221f      	movs	r2, #31
   2d12e:	18ba      	adds	r2, r7, r2
   2d130:	7812      	ldrb	r2, [r2, #0]
   2d132:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2d134:	231f      	movs	r3, #31
   2d136:	18fb      	adds	r3, r7, r3
   2d138:	781b      	ldrb	r3, [r3, #0]
   2d13a:	2b00      	cmp	r3, #0
   2d13c:	d008      	beq.n	2d150 <chk_mounted+0x27c>
   2d13e:	231f      	movs	r3, #31
   2d140:	18fb      	adds	r3, r7, r3
   2d142:	781b      	ldrb	r3, [r3, #0]
   2d144:	221f      	movs	r2, #31
   2d146:	18ba      	adds	r2, r7, r2
   2d148:	7812      	ldrb	r2, [r2, #0]
   2d14a:	3a01      	subs	r2, #1
   2d14c:	4013      	ands	r3, r2
   2d14e:	d001      	beq.n	2d154 <chk_mounted+0x280>
   2d150:	230d      	movs	r3, #13
   2d152:	e193      	b.n	2d47c <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2d154:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d156:	2242      	movs	r2, #66	; 0x42
   2d158:	5c9b      	ldrb	r3, [r3, r2]
   2d15a:	021b      	lsls	r3, r3, #8
   2d15c:	b21a      	sxth	r2, r3
   2d15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d160:	2141      	movs	r1, #65	; 0x41
   2d162:	5c5b      	ldrb	r3, [r3, r1]
   2d164:	b21b      	sxth	r3, r3
   2d166:	4313      	orrs	r3, r2
   2d168:	b21b      	sxth	r3, r3
   2d16a:	b29a      	uxth	r2, r3
   2d16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d16e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2d170:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d172:	891b      	ldrh	r3, [r3, #8]
   2d174:	220f      	movs	r2, #15
   2d176:	4013      	ands	r3, r2
   2d178:	b29b      	uxth	r3, r3
   2d17a:	2b00      	cmp	r3, #0
   2d17c:	d001      	beq.n	2d182 <chk_mounted+0x2ae>
   2d17e:	230d      	movs	r3, #13
   2d180:	e17c      	b.n	2d47c <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2d182:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d184:	2244      	movs	r2, #68	; 0x44
   2d186:	5c9b      	ldrb	r3, [r3, r2]
   2d188:	021b      	lsls	r3, r3, #8
   2d18a:	b21a      	sxth	r2, r3
   2d18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d18e:	2143      	movs	r1, #67	; 0x43
   2d190:	5c5b      	ldrb	r3, [r3, r1]
   2d192:	b21b      	sxth	r3, r3
   2d194:	4313      	orrs	r3, r2
   2d196:	b21b      	sxth	r3, r3
   2d198:	b29b      	uxth	r3, r3
   2d19a:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2d19c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2d19e:	2b00      	cmp	r3, #0
   2d1a0:	d112      	bne.n	2d1c8 <chk_mounted+0x2f4>
   2d1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1a4:	2253      	movs	r2, #83	; 0x53
   2d1a6:	5c9b      	ldrb	r3, [r3, r2]
   2d1a8:	061a      	lsls	r2, r3, #24
   2d1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1ac:	2152      	movs	r1, #82	; 0x52
   2d1ae:	5c5b      	ldrb	r3, [r3, r1]
   2d1b0:	041b      	lsls	r3, r3, #16
   2d1b2:	4313      	orrs	r3, r2
   2d1b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d1b6:	2151      	movs	r1, #81	; 0x51
   2d1b8:	5c52      	ldrb	r2, [r2, r1]
   2d1ba:	0212      	lsls	r2, r2, #8
   2d1bc:	4313      	orrs	r3, r2
   2d1be:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d1c0:	2150      	movs	r1, #80	; 0x50
   2d1c2:	5c52      	ldrb	r2, [r2, r1]
   2d1c4:	4313      	orrs	r3, r2
   2d1c6:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2d1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1ca:	223f      	movs	r2, #63	; 0x3f
   2d1cc:	5c9b      	ldrb	r3, [r3, r2]
   2d1ce:	021b      	lsls	r3, r3, #8
   2d1d0:	b21a      	sxth	r2, r3
   2d1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1d4:	213e      	movs	r1, #62	; 0x3e
   2d1d6:	5c5b      	ldrb	r3, [r3, r1]
   2d1d8:	b21b      	sxth	r3, r3
   2d1da:	4313      	orrs	r3, r2
   2d1dc:	b21a      	sxth	r2, r3
   2d1de:	231c      	movs	r3, #28
   2d1e0:	18fb      	adds	r3, r7, r3
   2d1e2:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2d1e4:	231c      	movs	r3, #28
   2d1e6:	18fb      	adds	r3, r7, r3
   2d1e8:	881b      	ldrh	r3, [r3, #0]
   2d1ea:	2b00      	cmp	r3, #0
   2d1ec:	d101      	bne.n	2d1f2 <chk_mounted+0x31e>
   2d1ee:	230d      	movs	r3, #13
   2d1f0:	e144      	b.n	2d47c <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2d1f2:	231c      	movs	r3, #28
   2d1f4:	18fb      	adds	r3, r7, r3
   2d1f6:	881a      	ldrh	r2, [r3, #0]
   2d1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d1fa:	18d3      	adds	r3, r2, r3
   2d1fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d1fe:	8912      	ldrh	r2, [r2, #8]
   2d200:	0912      	lsrs	r2, r2, #4
   2d202:	b292      	uxth	r2, r2
   2d204:	189b      	adds	r3, r3, r2
   2d206:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2d208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2d20a:	69bb      	ldr	r3, [r7, #24]
   2d20c:	429a      	cmp	r2, r3
   2d20e:	d201      	bcs.n	2d214 <chk_mounted+0x340>
   2d210:	230d      	movs	r3, #13
   2d212:	e133      	b.n	2d47c <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2d214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2d216:	69bb      	ldr	r3, [r7, #24]
   2d218:	1ad2      	subs	r2, r2, r3
   2d21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d21c:	789b      	ldrb	r3, [r3, #2]
   2d21e:	0019      	movs	r1, r3
   2d220:	4b08      	ldr	r3, [pc, #32]	; (2d244 <chk_mounted+0x370>)
   2d222:	0010      	movs	r0, r2
   2d224:	4798      	blx	r3
   2d226:	0003      	movs	r3, r0
   2d228:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2d22a:	697b      	ldr	r3, [r7, #20]
   2d22c:	2b00      	cmp	r3, #0
   2d22e:	d10b      	bne.n	2d248 <chk_mounted+0x374>
   2d230:	230d      	movs	r3, #13
   2d232:	e123      	b.n	2d47c <chk_mounted+0x5a8>
   2d234:	20004178 	.word	0x20004178
   2d238:	0002b031 	.word	0x0002b031
   2d23c:	0002afad 	.word	0x0002afad
   2d240:	0002ce01 	.word	0x0002ce01
   2d244:	00032655 	.word	0x00032655
	fmt = FS_FAT12;
   2d248:	2347      	movs	r3, #71	; 0x47
   2d24a:	18fb      	adds	r3, r7, r3
   2d24c:	2201      	movs	r2, #1
   2d24e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2d250:	697b      	ldr	r3, [r7, #20]
   2d252:	4a8c      	ldr	r2, [pc, #560]	; (2d484 <chk_mounted+0x5b0>)
   2d254:	4293      	cmp	r3, r2
   2d256:	d903      	bls.n	2d260 <chk_mounted+0x38c>
   2d258:	2347      	movs	r3, #71	; 0x47
   2d25a:	18fb      	adds	r3, r7, r3
   2d25c:	2202      	movs	r2, #2
   2d25e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2d260:	697b      	ldr	r3, [r7, #20]
   2d262:	4a89      	ldr	r2, [pc, #548]	; (2d488 <chk_mounted+0x5b4>)
   2d264:	4293      	cmp	r3, r2
   2d266:	d903      	bls.n	2d270 <chk_mounted+0x39c>
   2d268:	2347      	movs	r3, #71	; 0x47
   2d26a:	18fb      	adds	r3, r7, r3
   2d26c:	2203      	movs	r2, #3
   2d26e:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2d270:	697b      	ldr	r3, [r7, #20]
   2d272:	1c9a      	adds	r2, r3, #2
   2d274:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d276:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2d278:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d27a:	69bb      	ldr	r3, [r7, #24]
   2d27c:	18d2      	adds	r2, r2, r3
   2d27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d280:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2d282:	231c      	movs	r3, #28
   2d284:	18fb      	adds	r3, r7, r3
   2d286:	881a      	ldrh	r2, [r3, #0]
   2d288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d28a:	18d2      	adds	r2, r2, r3
   2d28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d28e:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2d290:	2347      	movs	r3, #71	; 0x47
   2d292:	18fb      	adds	r3, r7, r3
   2d294:	781b      	ldrb	r3, [r3, #0]
   2d296:	2b03      	cmp	r3, #3
   2d298:	d11e      	bne.n	2d2d8 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2d29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d29c:	891b      	ldrh	r3, [r3, #8]
   2d29e:	2b00      	cmp	r3, #0
   2d2a0:	d001      	beq.n	2d2a6 <chk_mounted+0x3d2>
   2d2a2:	230d      	movs	r3, #13
   2d2a4:	e0ea      	b.n	2d47c <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2d2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d2a8:	225f      	movs	r2, #95	; 0x5f
   2d2aa:	5c9b      	ldrb	r3, [r3, r2]
   2d2ac:	061a      	lsls	r2, r3, #24
   2d2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d2b0:	215e      	movs	r1, #94	; 0x5e
   2d2b2:	5c5b      	ldrb	r3, [r3, r1]
   2d2b4:	041b      	lsls	r3, r3, #16
   2d2b6:	4313      	orrs	r3, r2
   2d2b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d2ba:	215d      	movs	r1, #93	; 0x5d
   2d2bc:	5c52      	ldrb	r2, [r2, r1]
   2d2be:	0212      	lsls	r2, r2, #8
   2d2c0:	4313      	orrs	r3, r2
   2d2c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d2c4:	215c      	movs	r1, #92	; 0x5c
   2d2c6:	5c52      	ldrb	r2, [r2, r1]
   2d2c8:	431a      	orrs	r2, r3
   2d2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d2cc:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2d2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d2d0:	699b      	ldr	r3, [r3, #24]
   2d2d2:	009b      	lsls	r3, r3, #2
   2d2d4:	633b      	str	r3, [r7, #48]	; 0x30
   2d2d6:	e020      	b.n	2d31a <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2d2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d2da:	891b      	ldrh	r3, [r3, #8]
   2d2dc:	2b00      	cmp	r3, #0
   2d2de:	d101      	bne.n	2d2e4 <chk_mounted+0x410>
   2d2e0:	230d      	movs	r3, #13
   2d2e2:	e0cb      	b.n	2d47c <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2d2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d2e6:	6a1a      	ldr	r2, [r3, #32]
   2d2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d2ea:	18d2      	adds	r2, r2, r3
   2d2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d2ee:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2d2f0:	2347      	movs	r3, #71	; 0x47
   2d2f2:	18fb      	adds	r3, r7, r3
   2d2f4:	781b      	ldrb	r3, [r3, #0]
   2d2f6:	2b02      	cmp	r3, #2
   2d2f8:	d103      	bne.n	2d302 <chk_mounted+0x42e>
   2d2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d2fc:	699b      	ldr	r3, [r3, #24]
   2d2fe:	005b      	lsls	r3, r3, #1
   2d300:	e00a      	b.n	2d318 <chk_mounted+0x444>
   2d302:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d304:	699a      	ldr	r2, [r3, #24]
   2d306:	0013      	movs	r3, r2
   2d308:	005b      	lsls	r3, r3, #1
   2d30a:	189b      	adds	r3, r3, r2
   2d30c:	085a      	lsrs	r2, r3, #1
   2d30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d310:	699b      	ldr	r3, [r3, #24]
   2d312:	2101      	movs	r1, #1
   2d314:	400b      	ands	r3, r1
   2d316:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2d318:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2d31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d31c:	69da      	ldr	r2, [r3, #28]
   2d31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2d320:	495a      	ldr	r1, [pc, #360]	; (2d48c <chk_mounted+0x5b8>)
   2d322:	468c      	mov	ip, r1
   2d324:	4463      	add	r3, ip
   2d326:	0a5b      	lsrs	r3, r3, #9
   2d328:	429a      	cmp	r2, r3
   2d32a:	d201      	bcs.n	2d330 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2d32c:	230d      	movs	r3, #13
   2d32e:	e0a5      	b.n	2d47c <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2d330:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d332:	2201      	movs	r2, #1
   2d334:	4252      	negs	r2, r2
   2d336:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2d338:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d33a:	2200      	movs	r2, #0
   2d33c:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2d33e:	2347      	movs	r3, #71	; 0x47
   2d340:	18fb      	adds	r3, r7, r3
   2d342:	781b      	ldrb	r3, [r3, #0]
   2d344:	2b03      	cmp	r3, #3
   2d346:	d000      	beq.n	2d34a <chk_mounted+0x476>
   2d348:	e082      	b.n	2d450 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2d34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d34c:	2200      	movs	r2, #0
   2d34e:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2d350:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d352:	2261      	movs	r2, #97	; 0x61
   2d354:	5c9b      	ldrb	r3, [r3, r2]
   2d356:	021b      	lsls	r3, r3, #8
   2d358:	b21a      	sxth	r2, r3
   2d35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d35c:	2160      	movs	r1, #96	; 0x60
   2d35e:	5c5b      	ldrb	r3, [r3, r1]
   2d360:	b21b      	sxth	r3, r3
   2d362:	4313      	orrs	r3, r2
   2d364:	b21b      	sxth	r3, r3
   2d366:	b29b      	uxth	r3, r3
   2d368:	001a      	movs	r2, r3
   2d36a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d36c:	18d2      	adds	r2, r2, r3
   2d36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d370:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2d372:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d374:	7858      	ldrb	r0, [r3, #1]
   2d376:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d378:	3330      	adds	r3, #48	; 0x30
   2d37a:	0019      	movs	r1, r3
   2d37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d37e:	695a      	ldr	r2, [r3, #20]
   2d380:	2301      	movs	r3, #1
   2d382:	4c43      	ldr	r4, [pc, #268]	; (2d490 <chk_mounted+0x5bc>)
   2d384:	47a0      	blx	r4
   2d386:	1e03      	subs	r3, r0, #0
   2d388:	d162      	bne.n	2d450 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2d38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d38c:	4a41      	ldr	r2, [pc, #260]	; (2d494 <chk_mounted+0x5c0>)
   2d38e:	5c9b      	ldrb	r3, [r3, r2]
   2d390:	021b      	lsls	r3, r3, #8
   2d392:	b21a      	sxth	r2, r3
   2d394:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d396:	4940      	ldr	r1, [pc, #256]	; (2d498 <chk_mounted+0x5c4>)
   2d398:	5c5b      	ldrb	r3, [r3, r1]
   2d39a:	b21b      	sxth	r3, r3
   2d39c:	4313      	orrs	r3, r2
   2d39e:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2d3a0:	4a3e      	ldr	r2, [pc, #248]	; (2d49c <chk_mounted+0x5c8>)
   2d3a2:	4293      	cmp	r3, r2
   2d3a4:	d154      	bne.n	2d450 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2d3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3a8:	2233      	movs	r2, #51	; 0x33
   2d3aa:	5c9b      	ldrb	r3, [r3, r2]
   2d3ac:	061a      	lsls	r2, r3, #24
   2d3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3b0:	2132      	movs	r1, #50	; 0x32
   2d3b2:	5c5b      	ldrb	r3, [r3, r1]
   2d3b4:	041b      	lsls	r3, r3, #16
   2d3b6:	4313      	orrs	r3, r2
   2d3b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d3ba:	2131      	movs	r1, #49	; 0x31
   2d3bc:	5c52      	ldrb	r2, [r2, r1]
   2d3be:	0212      	lsls	r2, r2, #8
   2d3c0:	4313      	orrs	r3, r2
   2d3c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d3c4:	2130      	movs	r1, #48	; 0x30
   2d3c6:	5c52      	ldrb	r2, [r2, r1]
   2d3c8:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2d3ca:	4a35      	ldr	r2, [pc, #212]	; (2d4a0 <chk_mounted+0x5cc>)
   2d3cc:	4293      	cmp	r3, r2
   2d3ce:	d13f      	bne.n	2d450 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2d3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3d2:	4a34      	ldr	r2, [pc, #208]	; (2d4a4 <chk_mounted+0x5d0>)
   2d3d4:	5c9b      	ldrb	r3, [r3, r2]
   2d3d6:	061a      	lsls	r2, r3, #24
   2d3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3da:	4933      	ldr	r1, [pc, #204]	; (2d4a8 <chk_mounted+0x5d4>)
   2d3dc:	5c5b      	ldrb	r3, [r3, r1]
   2d3de:	041b      	lsls	r3, r3, #16
   2d3e0:	4313      	orrs	r3, r2
   2d3e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d3e4:	4931      	ldr	r1, [pc, #196]	; (2d4ac <chk_mounted+0x5d8>)
   2d3e6:	5c52      	ldrb	r2, [r2, r1]
   2d3e8:	0212      	lsls	r2, r2, #8
   2d3ea:	4313      	orrs	r3, r2
   2d3ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d3ee:	2285      	movs	r2, #133	; 0x85
   2d3f0:	0092      	lsls	r2, r2, #2
   2d3f2:	5c8a      	ldrb	r2, [r1, r2]
   2d3f4:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2d3f6:	4a2e      	ldr	r2, [pc, #184]	; (2d4b0 <chk_mounted+0x5dc>)
   2d3f8:	4293      	cmp	r3, r2
   2d3fa:	d129      	bne.n	2d450 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2d3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d3fe:	4a2d      	ldr	r2, [pc, #180]	; (2d4b4 <chk_mounted+0x5e0>)
   2d400:	5c9b      	ldrb	r3, [r3, r2]
   2d402:	061a      	lsls	r2, r3, #24
   2d404:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d406:	492c      	ldr	r1, [pc, #176]	; (2d4b8 <chk_mounted+0x5e4>)
   2d408:	5c5b      	ldrb	r3, [r3, r1]
   2d40a:	041b      	lsls	r3, r3, #16
   2d40c:	4313      	orrs	r3, r2
   2d40e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d410:	492a      	ldr	r1, [pc, #168]	; (2d4bc <chk_mounted+0x5e8>)
   2d412:	5c52      	ldrb	r2, [r2, r1]
   2d414:	0212      	lsls	r2, r2, #8
   2d416:	4313      	orrs	r3, r2
   2d418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d41a:	2287      	movs	r2, #135	; 0x87
   2d41c:	0092      	lsls	r2, r2, #2
   2d41e:	5c8a      	ldrb	r2, [r1, r2]
   2d420:	431a      	orrs	r2, r3
   2d422:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d424:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2d426:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d428:	4a25      	ldr	r2, [pc, #148]	; (2d4c0 <chk_mounted+0x5ec>)
   2d42a:	5c9b      	ldrb	r3, [r3, r2]
   2d42c:	061a      	lsls	r2, r3, #24
   2d42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d430:	4924      	ldr	r1, [pc, #144]	; (2d4c4 <chk_mounted+0x5f0>)
   2d432:	5c5b      	ldrb	r3, [r3, r1]
   2d434:	041b      	lsls	r3, r3, #16
   2d436:	4313      	orrs	r3, r2
   2d438:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d43a:	4923      	ldr	r1, [pc, #140]	; (2d4c8 <chk_mounted+0x5f4>)
   2d43c:	5c52      	ldrb	r2, [r2, r1]
   2d43e:	0212      	lsls	r2, r2, #8
   2d440:	4313      	orrs	r3, r2
   2d442:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d444:	2286      	movs	r2, #134	; 0x86
   2d446:	0092      	lsls	r2, r2, #2
   2d448:	5c8a      	ldrb	r2, [r1, r2]
   2d44a:	431a      	orrs	r2, r3
   2d44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d44e:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2d450:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d452:	2247      	movs	r2, #71	; 0x47
   2d454:	18ba      	adds	r2, r7, r2
   2d456:	7812      	ldrb	r2, [r2, #0]
   2d458:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2d45a:	4b1c      	ldr	r3, [pc, #112]	; (2d4cc <chk_mounted+0x5f8>)
   2d45c:	881b      	ldrh	r3, [r3, #0]
   2d45e:	3301      	adds	r3, #1
   2d460:	b29a      	uxth	r2, r3
   2d462:	4b1a      	ldr	r3, [pc, #104]	; (2d4cc <chk_mounted+0x5f8>)
   2d464:	801a      	strh	r2, [r3, #0]
   2d466:	4b19      	ldr	r3, [pc, #100]	; (2d4cc <chk_mounted+0x5f8>)
   2d468:	881a      	ldrh	r2, [r3, #0]
   2d46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d46c:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2d46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d470:	2200      	movs	r2, #0
   2d472:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2d474:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d476:	2200      	movs	r2, #0
   2d478:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2d47a:	2300      	movs	r3, #0
}
   2d47c:	0018      	movs	r0, r3
   2d47e:	46bd      	mov	sp, r7
   2d480:	b013      	add	sp, #76	; 0x4c
   2d482:	bd90      	pop	{r4, r7, pc}
   2d484:	00000ff5 	.word	0x00000ff5
   2d488:	0000fff5 	.word	0x0000fff5
   2d48c:	000001ff 	.word	0x000001ff
   2d490:	0002b069 	.word	0x0002b069
   2d494:	0000022f 	.word	0x0000022f
   2d498:	0000022e 	.word	0x0000022e
   2d49c:	ffffaa55 	.word	0xffffaa55
   2d4a0:	41615252 	.word	0x41615252
   2d4a4:	00000217 	.word	0x00000217
   2d4a8:	00000216 	.word	0x00000216
   2d4ac:	00000215 	.word	0x00000215
   2d4b0:	61417272 	.word	0x61417272
   2d4b4:	0000021f 	.word	0x0000021f
   2d4b8:	0000021e 	.word	0x0000021e
   2d4bc:	0000021d 	.word	0x0000021d
   2d4c0:	0000021b 	.word	0x0000021b
   2d4c4:	0000021a 	.word	0x0000021a
   2d4c8:	00000219 	.word	0x00000219
   2d4cc:	20004198 	.word	0x20004198

0002d4d0 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2d4d0:	b580      	push	{r7, lr}
   2d4d2:	b082      	sub	sp, #8
   2d4d4:	af00      	add	r7, sp, #0
   2d4d6:	6078      	str	r0, [r7, #4]
   2d4d8:	000a      	movs	r2, r1
   2d4da:	1cbb      	adds	r3, r7, #2
   2d4dc:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2d4de:	687b      	ldr	r3, [r7, #4]
   2d4e0:	2b00      	cmp	r3, #0
   2d4e2:	d009      	beq.n	2d4f8 <validate+0x28>
   2d4e4:	687b      	ldr	r3, [r7, #4]
   2d4e6:	781b      	ldrb	r3, [r3, #0]
   2d4e8:	2b00      	cmp	r3, #0
   2d4ea:	d005      	beq.n	2d4f8 <validate+0x28>
   2d4ec:	687b      	ldr	r3, [r7, #4]
   2d4ee:	88db      	ldrh	r3, [r3, #6]
   2d4f0:	1cba      	adds	r2, r7, #2
   2d4f2:	8812      	ldrh	r2, [r2, #0]
   2d4f4:	429a      	cmp	r2, r3
   2d4f6:	d001      	beq.n	2d4fc <validate+0x2c>
		return FR_INVALID_OBJECT;
   2d4f8:	2309      	movs	r3, #9
   2d4fa:	e00c      	b.n	2d516 <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2d4fc:	687b      	ldr	r3, [r7, #4]
   2d4fe:	785b      	ldrb	r3, [r3, #1]
   2d500:	0018      	movs	r0, r3
   2d502:	4b07      	ldr	r3, [pc, #28]	; (2d520 <validate+0x50>)
   2d504:	4798      	blx	r3
   2d506:	0003      	movs	r3, r0
   2d508:	001a      	movs	r2, r3
   2d50a:	2301      	movs	r3, #1
   2d50c:	4013      	ands	r3, r2
   2d50e:	d001      	beq.n	2d514 <validate+0x44>
		return FR_NOT_READY;
   2d510:	2303      	movs	r3, #3
   2d512:	e000      	b.n	2d516 <validate+0x46>

	return FR_OK;
   2d514:	2300      	movs	r3, #0
}
   2d516:	0018      	movs	r0, r3
   2d518:	46bd      	mov	sp, r7
   2d51a:	b002      	add	sp, #8
   2d51c:	bd80      	pop	{r7, pc}
   2d51e:	46c0      	nop			; (mov r8, r8)
   2d520:	0002b031 	.word	0x0002b031

0002d524 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2d524:	b580      	push	{r7, lr}
   2d526:	b084      	sub	sp, #16
   2d528:	af00      	add	r7, sp, #0
   2d52a:	0002      	movs	r2, r0
   2d52c:	6039      	str	r1, [r7, #0]
   2d52e:	1dfb      	adds	r3, r7, #7
   2d530:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2d532:	1dfb      	adds	r3, r7, #7
   2d534:	781b      	ldrb	r3, [r3, #0]
   2d536:	2b07      	cmp	r3, #7
   2d538:	d901      	bls.n	2d53e <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2d53a:	230b      	movs	r3, #11
   2d53c:	e018      	b.n	2d570 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2d53e:	1dfb      	adds	r3, r7, #7
   2d540:	781a      	ldrb	r2, [r3, #0]
   2d542:	4b0d      	ldr	r3, [pc, #52]	; (2d578 <f_mount+0x54>)
   2d544:	0092      	lsls	r2, r2, #2
   2d546:	58d3      	ldr	r3, [r2, r3]
   2d548:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2d54a:	68fb      	ldr	r3, [r7, #12]
   2d54c:	2b00      	cmp	r3, #0
   2d54e:	d002      	beq.n	2d556 <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2d550:	68fb      	ldr	r3, [r7, #12]
   2d552:	2200      	movs	r2, #0
   2d554:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2d556:	683b      	ldr	r3, [r7, #0]
   2d558:	2b00      	cmp	r3, #0
   2d55a:	d002      	beq.n	2d562 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2d55c:	683b      	ldr	r3, [r7, #0]
   2d55e:	2200      	movs	r2, #0
   2d560:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2d562:	1dfb      	adds	r3, r7, #7
   2d564:	781a      	ldrb	r2, [r3, #0]
   2d566:	4b04      	ldr	r3, [pc, #16]	; (2d578 <f_mount+0x54>)
   2d568:	0092      	lsls	r2, r2, #2
   2d56a:	6839      	ldr	r1, [r7, #0]
   2d56c:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2d56e:	2300      	movs	r3, #0
}
   2d570:	0018      	movs	r0, r3
   2d572:	46bd      	mov	sp, r7
   2d574:	b004      	add	sp, #16
   2d576:	bd80      	pop	{r7, pc}
   2d578:	20004178 	.word	0x20004178

0002d57c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2d57c:	b590      	push	{r4, r7, lr}
   2d57e:	4ce5      	ldr	r4, [pc, #916]	; (2d914 <f_open+0x398>)
   2d580:	44a5      	add	sp, r4
   2d582:	af00      	add	r7, sp, #0
   2d584:	60f8      	str	r0, [r7, #12]
   2d586:	60b9      	str	r1, [r7, #8]
   2d588:	4be3      	ldr	r3, [pc, #908]	; (2d918 <f_open+0x39c>)
   2d58a:	2194      	movs	r1, #148	; 0x94
   2d58c:	0089      	lsls	r1, r1, #2
   2d58e:	468c      	mov	ip, r1
   2d590:	44bc      	add	ip, r7
   2d592:	4463      	add	r3, ip
   2d594:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2d596:	68fb      	ldr	r3, [r7, #12]
   2d598:	2200      	movs	r2, #0
   2d59a:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2d59c:	4bde      	ldr	r3, [pc, #888]	; (2d918 <f_open+0x39c>)
   2d59e:	2294      	movs	r2, #148	; 0x94
   2d5a0:	0092      	lsls	r2, r2, #2
   2d5a2:	4694      	mov	ip, r2
   2d5a4:	44bc      	add	ip, r7
   2d5a6:	4463      	add	r3, ip
   2d5a8:	4adb      	ldr	r2, [pc, #876]	; (2d918 <f_open+0x39c>)
   2d5aa:	2194      	movs	r1, #148	; 0x94
   2d5ac:	0089      	lsls	r1, r1, #2
   2d5ae:	468c      	mov	ip, r1
   2d5b0:	44bc      	add	ip, r7
   2d5b2:	4462      	add	r2, ip
   2d5b4:	7812      	ldrb	r2, [r2, #0]
   2d5b6:	211f      	movs	r1, #31
   2d5b8:	400a      	ands	r2, r1
   2d5ba:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2d5bc:	4bd6      	ldr	r3, [pc, #856]	; (2d918 <f_open+0x39c>)
   2d5be:	2294      	movs	r2, #148	; 0x94
   2d5c0:	0092      	lsls	r2, r2, #2
   2d5c2:	4694      	mov	ip, r2
   2d5c4:	44bc      	add	ip, r7
   2d5c6:	4463      	add	r3, ip
   2d5c8:	781b      	ldrb	r3, [r3, #0]
   2d5ca:	2201      	movs	r2, #1
   2d5cc:	4393      	bics	r3, r2
   2d5ce:	b2da      	uxtb	r2, r3
   2d5d0:	4bd2      	ldr	r3, [pc, #840]	; (2d91c <f_open+0x3a0>)
   2d5d2:	18fc      	adds	r4, r7, r3
   2d5d4:	2387      	movs	r3, #135	; 0x87
   2d5d6:	009b      	lsls	r3, r3, #2
   2d5d8:	18f9      	adds	r1, r7, r3
   2d5da:	2308      	movs	r3, #8
   2d5dc:	18fb      	adds	r3, r7, r3
   2d5de:	0018      	movs	r0, r3
   2d5e0:	4bcf      	ldr	r3, [pc, #828]	; (2d920 <f_open+0x3a4>)
   2d5e2:	4798      	blx	r3
   2d5e4:	0003      	movs	r3, r0
   2d5e6:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2d5e8:	2387      	movs	r3, #135	; 0x87
   2d5ea:	009b      	lsls	r3, r3, #2
   2d5ec:	18fb      	adds	r3, r7, r3
   2d5ee:	2284      	movs	r2, #132	; 0x84
   2d5f0:	0092      	lsls	r2, r2, #2
   2d5f2:	18ba      	adds	r2, r7, r2
   2d5f4:	619a      	str	r2, [r3, #24]
   2d5f6:	2387      	movs	r3, #135	; 0x87
   2d5f8:	009b      	lsls	r3, r3, #2
   2d5fa:	18fb      	adds	r3, r7, r3
   2d5fc:	2210      	movs	r2, #16
   2d5fe:	18ba      	adds	r2, r7, r2
   2d600:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2d602:	4bc6      	ldr	r3, [pc, #792]	; (2d91c <f_open+0x3a0>)
   2d604:	18fb      	adds	r3, r7, r3
   2d606:	781b      	ldrb	r3, [r3, #0]
   2d608:	2b00      	cmp	r3, #0
   2d60a:	d10b      	bne.n	2d624 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2d60c:	68ba      	ldr	r2, [r7, #8]
   2d60e:	4bc3      	ldr	r3, [pc, #780]	; (2d91c <f_open+0x3a0>)
   2d610:	18fc      	adds	r4, r7, r3
   2d612:	2387      	movs	r3, #135	; 0x87
   2d614:	009b      	lsls	r3, r3, #2
   2d616:	18fb      	adds	r3, r7, r3
   2d618:	0011      	movs	r1, r2
   2d61a:	0018      	movs	r0, r3
   2d61c:	4bc1      	ldr	r3, [pc, #772]	; (2d924 <f_open+0x3a8>)
   2d61e:	4798      	blx	r3
   2d620:	0003      	movs	r3, r0
   2d622:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2d624:	2387      	movs	r3, #135	; 0x87
   2d626:	009b      	lsls	r3, r3, #2
   2d628:	18fb      	adds	r3, r7, r3
   2d62a:	695b      	ldr	r3, [r3, #20]
   2d62c:	2292      	movs	r2, #146	; 0x92
   2d62e:	0092      	lsls	r2, r2, #2
   2d630:	18ba      	adds	r2, r7, r2
   2d632:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2d634:	4bb9      	ldr	r3, [pc, #740]	; (2d91c <f_open+0x3a0>)
   2d636:	18fb      	adds	r3, r7, r3
   2d638:	781b      	ldrb	r3, [r3, #0]
   2d63a:	2b00      	cmp	r3, #0
   2d63c:	d109      	bne.n	2d652 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2d63e:	2392      	movs	r3, #146	; 0x92
   2d640:	009b      	lsls	r3, r3, #2
   2d642:	18fb      	adds	r3, r7, r3
   2d644:	681b      	ldr	r3, [r3, #0]
   2d646:	2b00      	cmp	r3, #0
   2d648:	d103      	bne.n	2d652 <f_open+0xd6>
			res = FR_INVALID_NAME;
   2d64a:	4bb4      	ldr	r3, [pc, #720]	; (2d91c <f_open+0x3a0>)
   2d64c:	18fb      	adds	r3, r7, r3
   2d64e:	2206      	movs	r2, #6
   2d650:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2d652:	4bb1      	ldr	r3, [pc, #708]	; (2d918 <f_open+0x39c>)
   2d654:	2294      	movs	r2, #148	; 0x94
   2d656:	0092      	lsls	r2, r2, #2
   2d658:	4694      	mov	ip, r2
   2d65a:	44bc      	add	ip, r7
   2d65c:	4463      	add	r3, ip
   2d65e:	781b      	ldrb	r3, [r3, #0]
   2d660:	221c      	movs	r2, #28
   2d662:	4013      	ands	r3, r2
   2d664:	d100      	bne.n	2d668 <f_open+0xec>
   2d666:	e141      	b.n	2d8ec <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2d668:	4bac      	ldr	r3, [pc, #688]	; (2d91c <f_open+0x3a0>)
   2d66a:	18fb      	adds	r3, r7, r3
   2d66c:	781b      	ldrb	r3, [r3, #0]
   2d66e:	2b00      	cmp	r3, #0
   2d670:	d027      	beq.n	2d6c2 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2d672:	4baa      	ldr	r3, [pc, #680]	; (2d91c <f_open+0x3a0>)
   2d674:	18fb      	adds	r3, r7, r3
   2d676:	781b      	ldrb	r3, [r3, #0]
   2d678:	2b04      	cmp	r3, #4
   2d67a:	d109      	bne.n	2d690 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2d67c:	4ba7      	ldr	r3, [pc, #668]	; (2d91c <f_open+0x3a0>)
   2d67e:	18fc      	adds	r4, r7, r3
   2d680:	2387      	movs	r3, #135	; 0x87
   2d682:	009b      	lsls	r3, r3, #2
   2d684:	18fb      	adds	r3, r7, r3
   2d686:	0018      	movs	r0, r3
   2d688:	4ba7      	ldr	r3, [pc, #668]	; (2d928 <f_open+0x3ac>)
   2d68a:	4798      	blx	r3
   2d68c:	0003      	movs	r3, r0
   2d68e:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2d690:	4ba1      	ldr	r3, [pc, #644]	; (2d918 <f_open+0x39c>)
   2d692:	2294      	movs	r2, #148	; 0x94
   2d694:	0092      	lsls	r2, r2, #2
   2d696:	4694      	mov	ip, r2
   2d698:	44bc      	add	ip, r7
   2d69a:	4463      	add	r3, ip
   2d69c:	4a9e      	ldr	r2, [pc, #632]	; (2d918 <f_open+0x39c>)
   2d69e:	2194      	movs	r1, #148	; 0x94
   2d6a0:	0089      	lsls	r1, r1, #2
   2d6a2:	468c      	mov	ip, r1
   2d6a4:	44bc      	add	ip, r7
   2d6a6:	4462      	add	r2, ip
   2d6a8:	7812      	ldrb	r2, [r2, #0]
   2d6aa:	2108      	movs	r1, #8
   2d6ac:	430a      	orrs	r2, r1
   2d6ae:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2d6b0:	2387      	movs	r3, #135	; 0x87
   2d6b2:	009b      	lsls	r3, r3, #2
   2d6b4:	18fb      	adds	r3, r7, r3
   2d6b6:	695b      	ldr	r3, [r3, #20]
   2d6b8:	2292      	movs	r2, #146	; 0x92
   2d6ba:	0092      	lsls	r2, r2, #2
   2d6bc:	18ba      	adds	r2, r7, r2
   2d6be:	6013      	str	r3, [r2, #0]
   2d6c0:	e01c      	b.n	2d6fc <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2d6c2:	2392      	movs	r3, #146	; 0x92
   2d6c4:	009b      	lsls	r3, r3, #2
   2d6c6:	18fb      	adds	r3, r7, r3
   2d6c8:	681b      	ldr	r3, [r3, #0]
   2d6ca:	330b      	adds	r3, #11
   2d6cc:	781b      	ldrb	r3, [r3, #0]
   2d6ce:	001a      	movs	r2, r3
   2d6d0:	2311      	movs	r3, #17
   2d6d2:	4013      	ands	r3, r2
   2d6d4:	d004      	beq.n	2d6e0 <f_open+0x164>
				res = FR_DENIED;
   2d6d6:	4b91      	ldr	r3, [pc, #580]	; (2d91c <f_open+0x3a0>)
   2d6d8:	18fb      	adds	r3, r7, r3
   2d6da:	2207      	movs	r2, #7
   2d6dc:	701a      	strb	r2, [r3, #0]
   2d6de:	e00d      	b.n	2d6fc <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2d6e0:	4b8d      	ldr	r3, [pc, #564]	; (2d918 <f_open+0x39c>)
   2d6e2:	2294      	movs	r2, #148	; 0x94
   2d6e4:	0092      	lsls	r2, r2, #2
   2d6e6:	4694      	mov	ip, r2
   2d6e8:	44bc      	add	ip, r7
   2d6ea:	4463      	add	r3, ip
   2d6ec:	781b      	ldrb	r3, [r3, #0]
   2d6ee:	2204      	movs	r2, #4
   2d6f0:	4013      	ands	r3, r2
   2d6f2:	d003      	beq.n	2d6fc <f_open+0x180>
					res = FR_EXIST;
   2d6f4:	4b89      	ldr	r3, [pc, #548]	; (2d91c <f_open+0x3a0>)
   2d6f6:	18fb      	adds	r3, r7, r3
   2d6f8:	2208      	movs	r2, #8
   2d6fa:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2d6fc:	4b87      	ldr	r3, [pc, #540]	; (2d91c <f_open+0x3a0>)
   2d6fe:	18fb      	adds	r3, r7, r3
   2d700:	781b      	ldrb	r3, [r3, #0]
   2d702:	2b00      	cmp	r3, #0
   2d704:	d000      	beq.n	2d708 <f_open+0x18c>
   2d706:	e12f      	b.n	2d968 <f_open+0x3ec>
   2d708:	4b83      	ldr	r3, [pc, #524]	; (2d918 <f_open+0x39c>)
   2d70a:	2294      	movs	r2, #148	; 0x94
   2d70c:	0092      	lsls	r2, r2, #2
   2d70e:	4694      	mov	ip, r2
   2d710:	44bc      	add	ip, r7
   2d712:	4463      	add	r3, ip
   2d714:	781b      	ldrb	r3, [r3, #0]
   2d716:	2208      	movs	r2, #8
   2d718:	4013      	ands	r3, r2
   2d71a:	d100      	bne.n	2d71e <f_open+0x1a2>
   2d71c:	e124      	b.n	2d968 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2d71e:	4b83      	ldr	r3, [pc, #524]	; (2d92c <f_open+0x3b0>)
   2d720:	4798      	blx	r3
   2d722:	0003      	movs	r3, r0
   2d724:	2291      	movs	r2, #145	; 0x91
   2d726:	0092      	lsls	r2, r2, #2
   2d728:	18ba      	adds	r2, r7, r2
   2d72a:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2d72c:	2392      	movs	r3, #146	; 0x92
   2d72e:	009b      	lsls	r3, r3, #2
   2d730:	18fb      	adds	r3, r7, r3
   2d732:	681b      	ldr	r3, [r3, #0]
   2d734:	330e      	adds	r3, #14
   2d736:	2291      	movs	r2, #145	; 0x91
   2d738:	0092      	lsls	r2, r2, #2
   2d73a:	18ba      	adds	r2, r7, r2
   2d73c:	6812      	ldr	r2, [r2, #0]
   2d73e:	b2d2      	uxtb	r2, r2
   2d740:	701a      	strb	r2, [r3, #0]
   2d742:	2392      	movs	r3, #146	; 0x92
   2d744:	009b      	lsls	r3, r3, #2
   2d746:	18fb      	adds	r3, r7, r3
   2d748:	681b      	ldr	r3, [r3, #0]
   2d74a:	330f      	adds	r3, #15
   2d74c:	2291      	movs	r2, #145	; 0x91
   2d74e:	0092      	lsls	r2, r2, #2
   2d750:	18ba      	adds	r2, r7, r2
   2d752:	6812      	ldr	r2, [r2, #0]
   2d754:	b292      	uxth	r2, r2
   2d756:	0a12      	lsrs	r2, r2, #8
   2d758:	b292      	uxth	r2, r2
   2d75a:	b2d2      	uxtb	r2, r2
   2d75c:	701a      	strb	r2, [r3, #0]
   2d75e:	2392      	movs	r3, #146	; 0x92
   2d760:	009b      	lsls	r3, r3, #2
   2d762:	18fb      	adds	r3, r7, r3
   2d764:	681b      	ldr	r3, [r3, #0]
   2d766:	3310      	adds	r3, #16
   2d768:	2291      	movs	r2, #145	; 0x91
   2d76a:	0092      	lsls	r2, r2, #2
   2d76c:	18ba      	adds	r2, r7, r2
   2d76e:	6812      	ldr	r2, [r2, #0]
   2d770:	0c12      	lsrs	r2, r2, #16
   2d772:	b2d2      	uxtb	r2, r2
   2d774:	701a      	strb	r2, [r3, #0]
   2d776:	2392      	movs	r3, #146	; 0x92
   2d778:	009b      	lsls	r3, r3, #2
   2d77a:	18fb      	adds	r3, r7, r3
   2d77c:	681b      	ldr	r3, [r3, #0]
   2d77e:	3311      	adds	r3, #17
   2d780:	2291      	movs	r2, #145	; 0x91
   2d782:	0092      	lsls	r2, r2, #2
   2d784:	18ba      	adds	r2, r7, r2
   2d786:	6812      	ldr	r2, [r2, #0]
   2d788:	0e12      	lsrs	r2, r2, #24
   2d78a:	b2d2      	uxtb	r2, r2
   2d78c:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2d78e:	2392      	movs	r3, #146	; 0x92
   2d790:	009b      	lsls	r3, r3, #2
   2d792:	18fb      	adds	r3, r7, r3
   2d794:	681b      	ldr	r3, [r3, #0]
   2d796:	330b      	adds	r3, #11
   2d798:	2200      	movs	r2, #0
   2d79a:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2d79c:	2392      	movs	r3, #146	; 0x92
   2d79e:	009b      	lsls	r3, r3, #2
   2d7a0:	18fb      	adds	r3, r7, r3
   2d7a2:	681b      	ldr	r3, [r3, #0]
   2d7a4:	331c      	adds	r3, #28
   2d7a6:	2200      	movs	r2, #0
   2d7a8:	701a      	strb	r2, [r3, #0]
   2d7aa:	2392      	movs	r3, #146	; 0x92
   2d7ac:	009b      	lsls	r3, r3, #2
   2d7ae:	18fb      	adds	r3, r7, r3
   2d7b0:	681b      	ldr	r3, [r3, #0]
   2d7b2:	331d      	adds	r3, #29
   2d7b4:	2200      	movs	r2, #0
   2d7b6:	701a      	strb	r2, [r3, #0]
   2d7b8:	2392      	movs	r3, #146	; 0x92
   2d7ba:	009b      	lsls	r3, r3, #2
   2d7bc:	18fb      	adds	r3, r7, r3
   2d7be:	681b      	ldr	r3, [r3, #0]
   2d7c0:	331e      	adds	r3, #30
   2d7c2:	2200      	movs	r2, #0
   2d7c4:	701a      	strb	r2, [r3, #0]
   2d7c6:	2392      	movs	r3, #146	; 0x92
   2d7c8:	009b      	lsls	r3, r3, #2
   2d7ca:	18fb      	adds	r3, r7, r3
   2d7cc:	681b      	ldr	r3, [r3, #0]
   2d7ce:	331f      	adds	r3, #31
   2d7d0:	2200      	movs	r2, #0
   2d7d2:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2d7d4:	2392      	movs	r3, #146	; 0x92
   2d7d6:	009b      	lsls	r3, r3, #2
   2d7d8:	18fb      	adds	r3, r7, r3
   2d7da:	681b      	ldr	r3, [r3, #0]
   2d7dc:	3315      	adds	r3, #21
   2d7de:	781b      	ldrb	r3, [r3, #0]
   2d7e0:	021b      	lsls	r3, r3, #8
   2d7e2:	b21a      	sxth	r2, r3
   2d7e4:	2392      	movs	r3, #146	; 0x92
   2d7e6:	009b      	lsls	r3, r3, #2
   2d7e8:	18fb      	adds	r3, r7, r3
   2d7ea:	681b      	ldr	r3, [r3, #0]
   2d7ec:	3314      	adds	r3, #20
   2d7ee:	781b      	ldrb	r3, [r3, #0]
   2d7f0:	b21b      	sxth	r3, r3
   2d7f2:	4313      	orrs	r3, r2
   2d7f4:	b21b      	sxth	r3, r3
   2d7f6:	b29b      	uxth	r3, r3
   2d7f8:	041b      	lsls	r3, r3, #16
   2d7fa:	2292      	movs	r2, #146	; 0x92
   2d7fc:	0092      	lsls	r2, r2, #2
   2d7fe:	18ba      	adds	r2, r7, r2
   2d800:	6812      	ldr	r2, [r2, #0]
   2d802:	321b      	adds	r2, #27
   2d804:	7812      	ldrb	r2, [r2, #0]
   2d806:	0212      	lsls	r2, r2, #8
   2d808:	b211      	sxth	r1, r2
   2d80a:	2292      	movs	r2, #146	; 0x92
   2d80c:	0092      	lsls	r2, r2, #2
   2d80e:	18ba      	adds	r2, r7, r2
   2d810:	6812      	ldr	r2, [r2, #0]
   2d812:	321a      	adds	r2, #26
   2d814:	7812      	ldrb	r2, [r2, #0]
   2d816:	b212      	sxth	r2, r2
   2d818:	430a      	orrs	r2, r1
   2d81a:	b212      	sxth	r2, r2
   2d81c:	b292      	uxth	r2, r2
   2d81e:	4313      	orrs	r3, r2
   2d820:	2290      	movs	r2, #144	; 0x90
   2d822:	0092      	lsls	r2, r2, #2
   2d824:	18ba      	adds	r2, r7, r2
   2d826:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2d828:	2392      	movs	r3, #146	; 0x92
   2d82a:	009b      	lsls	r3, r3, #2
   2d82c:	18fb      	adds	r3, r7, r3
   2d82e:	681b      	ldr	r3, [r3, #0]
   2d830:	331a      	adds	r3, #26
   2d832:	2200      	movs	r2, #0
   2d834:	701a      	strb	r2, [r3, #0]
   2d836:	2392      	movs	r3, #146	; 0x92
   2d838:	009b      	lsls	r3, r3, #2
   2d83a:	18fb      	adds	r3, r7, r3
   2d83c:	681b      	ldr	r3, [r3, #0]
   2d83e:	331b      	adds	r3, #27
   2d840:	2200      	movs	r2, #0
   2d842:	701a      	strb	r2, [r3, #0]
   2d844:	2392      	movs	r3, #146	; 0x92
   2d846:	009b      	lsls	r3, r3, #2
   2d848:	18fb      	adds	r3, r7, r3
   2d84a:	681b      	ldr	r3, [r3, #0]
   2d84c:	3314      	adds	r3, #20
   2d84e:	2200      	movs	r2, #0
   2d850:	701a      	strb	r2, [r3, #0]
   2d852:	2392      	movs	r3, #146	; 0x92
   2d854:	009b      	lsls	r3, r3, #2
   2d856:	18fb      	adds	r3, r7, r3
   2d858:	681b      	ldr	r3, [r3, #0]
   2d85a:	3315      	adds	r3, #21
   2d85c:	2200      	movs	r2, #0
   2d85e:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2d860:	2387      	movs	r3, #135	; 0x87
   2d862:	009b      	lsls	r3, r3, #2
   2d864:	18fb      	adds	r3, r7, r3
   2d866:	681b      	ldr	r3, [r3, #0]
   2d868:	2201      	movs	r2, #1
   2d86a:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2d86c:	2390      	movs	r3, #144	; 0x90
   2d86e:	009b      	lsls	r3, r3, #2
   2d870:	18fb      	adds	r3, r7, r3
   2d872:	681b      	ldr	r3, [r3, #0]
   2d874:	2b00      	cmp	r3, #0
   2d876:	d100      	bne.n	2d87a <f_open+0x2fe>
   2d878:	e076      	b.n	2d968 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2d87a:	2387      	movs	r3, #135	; 0x87
   2d87c:	009b      	lsls	r3, r3, #2
   2d87e:	18fb      	adds	r3, r7, r3
   2d880:	681b      	ldr	r3, [r3, #0]
   2d882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2d884:	2291      	movs	r2, #145	; 0x91
   2d886:	0092      	lsls	r2, r2, #2
   2d888:	18ba      	adds	r2, r7, r2
   2d88a:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2d88c:	2387      	movs	r3, #135	; 0x87
   2d88e:	009b      	lsls	r3, r3, #2
   2d890:	18fb      	adds	r3, r7, r3
   2d892:	681b      	ldr	r3, [r3, #0]
   2d894:	4a21      	ldr	r2, [pc, #132]	; (2d91c <f_open+0x3a0>)
   2d896:	18bc      	adds	r4, r7, r2
   2d898:	2290      	movs	r2, #144	; 0x90
   2d89a:	0092      	lsls	r2, r2, #2
   2d89c:	18ba      	adds	r2, r7, r2
   2d89e:	6812      	ldr	r2, [r2, #0]
   2d8a0:	0011      	movs	r1, r2
   2d8a2:	0018      	movs	r0, r3
   2d8a4:	4b22      	ldr	r3, [pc, #136]	; (2d930 <f_open+0x3b4>)
   2d8a6:	4798      	blx	r3
   2d8a8:	0003      	movs	r3, r0
   2d8aa:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2d8ac:	4b1b      	ldr	r3, [pc, #108]	; (2d91c <f_open+0x3a0>)
   2d8ae:	18fb      	adds	r3, r7, r3
   2d8b0:	781b      	ldrb	r3, [r3, #0]
   2d8b2:	2b00      	cmp	r3, #0
   2d8b4:	d158      	bne.n	2d968 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2d8b6:	2387      	movs	r3, #135	; 0x87
   2d8b8:	009b      	lsls	r3, r3, #2
   2d8ba:	18fb      	adds	r3, r7, r3
   2d8bc:	681b      	ldr	r3, [r3, #0]
   2d8be:	2290      	movs	r2, #144	; 0x90
   2d8c0:	0092      	lsls	r2, r2, #2
   2d8c2:	18ba      	adds	r2, r7, r2
   2d8c4:	6812      	ldr	r2, [r2, #0]
   2d8c6:	3a01      	subs	r2, #1
   2d8c8:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2d8ca:	2387      	movs	r3, #135	; 0x87
   2d8cc:	009b      	lsls	r3, r3, #2
   2d8ce:	18fb      	adds	r3, r7, r3
   2d8d0:	681b      	ldr	r3, [r3, #0]
   2d8d2:	4a12      	ldr	r2, [pc, #72]	; (2d91c <f_open+0x3a0>)
   2d8d4:	18bc      	adds	r4, r7, r2
   2d8d6:	2291      	movs	r2, #145	; 0x91
   2d8d8:	0092      	lsls	r2, r2, #2
   2d8da:	18ba      	adds	r2, r7, r2
   2d8dc:	6812      	ldr	r2, [r2, #0]
   2d8de:	0011      	movs	r1, r2
   2d8e0:	0018      	movs	r0, r3
   2d8e2:	4b14      	ldr	r3, [pc, #80]	; (2d934 <f_open+0x3b8>)
   2d8e4:	4798      	blx	r3
   2d8e6:	0003      	movs	r3, r0
   2d8e8:	7023      	strb	r3, [r4, #0]
   2d8ea:	e03d      	b.n	2d968 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2d8ec:	4b0b      	ldr	r3, [pc, #44]	; (2d91c <f_open+0x3a0>)
   2d8ee:	18fb      	adds	r3, r7, r3
   2d8f0:	781b      	ldrb	r3, [r3, #0]
   2d8f2:	2b00      	cmp	r3, #0
   2d8f4:	d138      	bne.n	2d968 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2d8f6:	2392      	movs	r3, #146	; 0x92
   2d8f8:	009b      	lsls	r3, r3, #2
   2d8fa:	18fb      	adds	r3, r7, r3
   2d8fc:	681b      	ldr	r3, [r3, #0]
   2d8fe:	330b      	adds	r3, #11
   2d900:	781b      	ldrb	r3, [r3, #0]
   2d902:	001a      	movs	r2, r3
   2d904:	2310      	movs	r3, #16
   2d906:	4013      	ands	r3, r2
   2d908:	d016      	beq.n	2d938 <f_open+0x3bc>
				res = FR_NO_FILE;
   2d90a:	4b04      	ldr	r3, [pc, #16]	; (2d91c <f_open+0x3a0>)
   2d90c:	18fb      	adds	r3, r7, r3
   2d90e:	2204      	movs	r2, #4
   2d910:	701a      	strb	r2, [r3, #0]
   2d912:	e029      	b.n	2d968 <f_open+0x3ec>
   2d914:	fffffdac 	.word	0xfffffdac
   2d918:	fffffdb7 	.word	0xfffffdb7
   2d91c:	0000024f 	.word	0x0000024f
   2d920:	0002ced5 	.word	0x0002ced5
   2d924:	0002ccc9 	.word	0x0002ccc9
   2d928:	0002c519 	.word	0x0002c519
   2d92c:	0002b311 	.word	0x0002b311
   2d930:	0002ba95 	.word	0x0002ba95
   2d934:	0002b455 	.word	0x0002b455
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2d938:	4b5a      	ldr	r3, [pc, #360]	; (2daa4 <f_open+0x528>)
   2d93a:	2294      	movs	r2, #148	; 0x94
   2d93c:	0092      	lsls	r2, r2, #2
   2d93e:	4694      	mov	ip, r2
   2d940:	44bc      	add	ip, r7
   2d942:	4463      	add	r3, ip
   2d944:	781b      	ldrb	r3, [r3, #0]
   2d946:	2202      	movs	r2, #2
   2d948:	4013      	ands	r3, r2
   2d94a:	d00d      	beq.n	2d968 <f_open+0x3ec>
   2d94c:	2392      	movs	r3, #146	; 0x92
   2d94e:	009b      	lsls	r3, r3, #2
   2d950:	18fb      	adds	r3, r7, r3
   2d952:	681b      	ldr	r3, [r3, #0]
   2d954:	330b      	adds	r3, #11
   2d956:	781b      	ldrb	r3, [r3, #0]
   2d958:	001a      	movs	r2, r3
   2d95a:	2301      	movs	r3, #1
   2d95c:	4013      	ands	r3, r2
   2d95e:	d003      	beq.n	2d968 <f_open+0x3ec>
					res = FR_DENIED;
   2d960:	4b51      	ldr	r3, [pc, #324]	; (2daa8 <f_open+0x52c>)
   2d962:	18fb      	adds	r3, r7, r3
   2d964:	2207      	movs	r2, #7
   2d966:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2d968:	4b4f      	ldr	r3, [pc, #316]	; (2daa8 <f_open+0x52c>)
   2d96a:	18fb      	adds	r3, r7, r3
   2d96c:	781b      	ldrb	r3, [r3, #0]
   2d96e:	2b00      	cmp	r3, #0
   2d970:	d126      	bne.n	2d9c0 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2d972:	4b4c      	ldr	r3, [pc, #304]	; (2daa4 <f_open+0x528>)
   2d974:	2294      	movs	r2, #148	; 0x94
   2d976:	0092      	lsls	r2, r2, #2
   2d978:	4694      	mov	ip, r2
   2d97a:	44bc      	add	ip, r7
   2d97c:	4463      	add	r3, ip
   2d97e:	781b      	ldrb	r3, [r3, #0]
   2d980:	2208      	movs	r2, #8
   2d982:	4013      	ands	r3, r2
   2d984:	d00f      	beq.n	2d9a6 <f_open+0x42a>
			mode |= FA__WRITTEN;
   2d986:	4b47      	ldr	r3, [pc, #284]	; (2daa4 <f_open+0x528>)
   2d988:	2294      	movs	r2, #148	; 0x94
   2d98a:	0092      	lsls	r2, r2, #2
   2d98c:	4694      	mov	ip, r2
   2d98e:	44bc      	add	ip, r7
   2d990:	4463      	add	r3, ip
   2d992:	4a44      	ldr	r2, [pc, #272]	; (2daa4 <f_open+0x528>)
   2d994:	2194      	movs	r1, #148	; 0x94
   2d996:	0089      	lsls	r1, r1, #2
   2d998:	468c      	mov	ip, r1
   2d99a:	44bc      	add	ip, r7
   2d99c:	4462      	add	r2, ip
   2d99e:	7812      	ldrb	r2, [r2, #0]
   2d9a0:	2120      	movs	r1, #32
   2d9a2:	430a      	orrs	r2, r1
   2d9a4:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2d9a6:	2387      	movs	r3, #135	; 0x87
   2d9a8:	009b      	lsls	r3, r3, #2
   2d9aa:	18fb      	adds	r3, r7, r3
   2d9ac:	681b      	ldr	r3, [r3, #0]
   2d9ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d9b0:	68fb      	ldr	r3, [r7, #12]
   2d9b2:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2d9b4:	68fb      	ldr	r3, [r7, #12]
   2d9b6:	2292      	movs	r2, #146	; 0x92
   2d9b8:	0092      	lsls	r2, r2, #2
   2d9ba:	18ba      	adds	r2, r7, r2
   2d9bc:	6812      	ldr	r2, [r2, #0]
   2d9be:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2d9c0:	4b39      	ldr	r3, [pc, #228]	; (2daa8 <f_open+0x52c>)
   2d9c2:	18fb      	adds	r3, r7, r3
   2d9c4:	781b      	ldrb	r3, [r3, #0]
   2d9c6:	2b00      	cmp	r3, #0
   2d9c8:	d163      	bne.n	2da92 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2d9ca:	68fb      	ldr	r3, [r7, #12]
   2d9cc:	4a35      	ldr	r2, [pc, #212]	; (2daa4 <f_open+0x528>)
   2d9ce:	2194      	movs	r1, #148	; 0x94
   2d9d0:	0089      	lsls	r1, r1, #2
   2d9d2:	468c      	mov	ip, r1
   2d9d4:	44bc      	add	ip, r7
   2d9d6:	4462      	add	r2, ip
   2d9d8:	7812      	ldrb	r2, [r2, #0]
   2d9da:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2d9dc:	2392      	movs	r3, #146	; 0x92
   2d9de:	009b      	lsls	r3, r3, #2
   2d9e0:	18fb      	adds	r3, r7, r3
   2d9e2:	681b      	ldr	r3, [r3, #0]
   2d9e4:	3315      	adds	r3, #21
   2d9e6:	781b      	ldrb	r3, [r3, #0]
   2d9e8:	021b      	lsls	r3, r3, #8
   2d9ea:	b21a      	sxth	r2, r3
   2d9ec:	2392      	movs	r3, #146	; 0x92
   2d9ee:	009b      	lsls	r3, r3, #2
   2d9f0:	18fb      	adds	r3, r7, r3
   2d9f2:	681b      	ldr	r3, [r3, #0]
   2d9f4:	3314      	adds	r3, #20
   2d9f6:	781b      	ldrb	r3, [r3, #0]
   2d9f8:	b21b      	sxth	r3, r3
   2d9fa:	4313      	orrs	r3, r2
   2d9fc:	b21b      	sxth	r3, r3
   2d9fe:	b29b      	uxth	r3, r3
   2da00:	041b      	lsls	r3, r3, #16
   2da02:	2292      	movs	r2, #146	; 0x92
   2da04:	0092      	lsls	r2, r2, #2
   2da06:	18ba      	adds	r2, r7, r2
   2da08:	6812      	ldr	r2, [r2, #0]
   2da0a:	321b      	adds	r2, #27
   2da0c:	7812      	ldrb	r2, [r2, #0]
   2da0e:	0212      	lsls	r2, r2, #8
   2da10:	b211      	sxth	r1, r2
   2da12:	2292      	movs	r2, #146	; 0x92
   2da14:	0092      	lsls	r2, r2, #2
   2da16:	18ba      	adds	r2, r7, r2
   2da18:	6812      	ldr	r2, [r2, #0]
   2da1a:	321a      	adds	r2, #26
   2da1c:	7812      	ldrb	r2, [r2, #0]
   2da1e:	b212      	sxth	r2, r2
   2da20:	430a      	orrs	r2, r1
   2da22:	b212      	sxth	r2, r2
   2da24:	b292      	uxth	r2, r2
   2da26:	431a      	orrs	r2, r3
   2da28:	68fb      	ldr	r3, [r7, #12]
   2da2a:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2da2c:	2392      	movs	r3, #146	; 0x92
   2da2e:	009b      	lsls	r3, r3, #2
   2da30:	18fb      	adds	r3, r7, r3
   2da32:	681b      	ldr	r3, [r3, #0]
   2da34:	331f      	adds	r3, #31
   2da36:	781b      	ldrb	r3, [r3, #0]
   2da38:	061a      	lsls	r2, r3, #24
   2da3a:	2392      	movs	r3, #146	; 0x92
   2da3c:	009b      	lsls	r3, r3, #2
   2da3e:	18fb      	adds	r3, r7, r3
   2da40:	681b      	ldr	r3, [r3, #0]
   2da42:	331e      	adds	r3, #30
   2da44:	781b      	ldrb	r3, [r3, #0]
   2da46:	041b      	lsls	r3, r3, #16
   2da48:	4313      	orrs	r3, r2
   2da4a:	2292      	movs	r2, #146	; 0x92
   2da4c:	0092      	lsls	r2, r2, #2
   2da4e:	18ba      	adds	r2, r7, r2
   2da50:	6812      	ldr	r2, [r2, #0]
   2da52:	321d      	adds	r2, #29
   2da54:	7812      	ldrb	r2, [r2, #0]
   2da56:	0212      	lsls	r2, r2, #8
   2da58:	4313      	orrs	r3, r2
   2da5a:	2292      	movs	r2, #146	; 0x92
   2da5c:	0092      	lsls	r2, r2, #2
   2da5e:	18ba      	adds	r2, r7, r2
   2da60:	6812      	ldr	r2, [r2, #0]
   2da62:	321c      	adds	r2, #28
   2da64:	7812      	ldrb	r2, [r2, #0]
   2da66:	431a      	orrs	r2, r3
   2da68:	68fb      	ldr	r3, [r7, #12]
   2da6a:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2da6c:	68fb      	ldr	r3, [r7, #12]
   2da6e:	2200      	movs	r2, #0
   2da70:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2da72:	68fb      	ldr	r3, [r7, #12]
   2da74:	2200      	movs	r2, #0
   2da76:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2da78:	2387      	movs	r3, #135	; 0x87
   2da7a:	009b      	lsls	r3, r3, #2
   2da7c:	18fb      	adds	r3, r7, r3
   2da7e:	681a      	ldr	r2, [r3, #0]
   2da80:	68fb      	ldr	r3, [r7, #12]
   2da82:	601a      	str	r2, [r3, #0]
   2da84:	2387      	movs	r3, #135	; 0x87
   2da86:	009b      	lsls	r3, r3, #2
   2da88:	18fb      	adds	r3, r7, r3
   2da8a:	681b      	ldr	r3, [r3, #0]
   2da8c:	88da      	ldrh	r2, [r3, #6]
   2da8e:	68fb      	ldr	r3, [r7, #12]
   2da90:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2da92:	4b05      	ldr	r3, [pc, #20]	; (2daa8 <f_open+0x52c>)
   2da94:	18fb      	adds	r3, r7, r3
   2da96:	781b      	ldrb	r3, [r3, #0]
}
   2da98:	0018      	movs	r0, r3
   2da9a:	46bd      	mov	sp, r7
   2da9c:	2395      	movs	r3, #149	; 0x95
   2da9e:	009b      	lsls	r3, r3, #2
   2daa0:	449d      	add	sp, r3
   2daa2:	bd90      	pop	{r4, r7, pc}
   2daa4:	fffffdb7 	.word	0xfffffdb7
   2daa8:	0000024f 	.word	0x0000024f

0002daac <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2daac:	b590      	push	{r4, r7, lr}
   2daae:	b08b      	sub	sp, #44	; 0x2c
   2dab0:	af00      	add	r7, sp, #0
   2dab2:	60f8      	str	r0, [r7, #12]
   2dab4:	60b9      	str	r1, [r7, #8]
   2dab6:	607a      	str	r2, [r7, #4]
   2dab8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2daba:	68bb      	ldr	r3, [r7, #8]
   2dabc:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2dabe:	683b      	ldr	r3, [r7, #0]
   2dac0:	2200      	movs	r2, #0
   2dac2:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2dac4:	68fb      	ldr	r3, [r7, #12]
   2dac6:	681a      	ldr	r2, [r3, #0]
   2dac8:	68fb      	ldr	r3, [r7, #12]
   2daca:	889b      	ldrh	r3, [r3, #4]
   2dacc:	2117      	movs	r1, #23
   2dace:	187c      	adds	r4, r7, r1
   2dad0:	0019      	movs	r1, r3
   2dad2:	0010      	movs	r0, r2
   2dad4:	4bc3      	ldr	r3, [pc, #780]	; (2dde4 <f_write+0x338>)
   2dad6:	4798      	blx	r3
   2dad8:	0003      	movs	r3, r0
   2dada:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2dadc:	2317      	movs	r3, #23
   2dade:	18fb      	adds	r3, r7, r3
   2dae0:	781b      	ldrb	r3, [r3, #0]
   2dae2:	2b00      	cmp	r3, #0
   2dae4:	d003      	beq.n	2daee <f_write+0x42>
   2dae6:	2317      	movs	r3, #23
   2dae8:	18fb      	adds	r3, r7, r3
   2daea:	781b      	ldrb	r3, [r3, #0]
   2daec:	e176      	b.n	2dddc <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2daee:	68fb      	ldr	r3, [r7, #12]
   2daf0:	799b      	ldrb	r3, [r3, #6]
   2daf2:	b25b      	sxtb	r3, r3
   2daf4:	2b00      	cmp	r3, #0
   2daf6:	da01      	bge.n	2dafc <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2daf8:	2302      	movs	r3, #2
   2dafa:	e16f      	b.n	2dddc <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2dafc:	68fb      	ldr	r3, [r7, #12]
   2dafe:	799b      	ldrb	r3, [r3, #6]
   2db00:	001a      	movs	r2, r3
   2db02:	2302      	movs	r3, #2
   2db04:	4013      	ands	r3, r2
   2db06:	d101      	bne.n	2db0c <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2db08:	2307      	movs	r3, #7
   2db0a:	e167      	b.n	2dddc <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2db0c:	68fb      	ldr	r3, [r7, #12]
   2db0e:	68da      	ldr	r2, [r3, #12]
   2db10:	687b      	ldr	r3, [r7, #4]
   2db12:	18d2      	adds	r2, r2, r3
   2db14:	68fb      	ldr	r3, [r7, #12]
   2db16:	68db      	ldr	r3, [r3, #12]
   2db18:	429a      	cmp	r2, r3
   2db1a:	d300      	bcc.n	2db1e <f_write+0x72>
   2db1c:	e146      	b.n	2ddac <f_write+0x300>
   2db1e:	2300      	movs	r3, #0
   2db20:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2db22:	e143      	b.n	2ddac <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2db24:	68fb      	ldr	r3, [r7, #12]
   2db26:	689b      	ldr	r3, [r3, #8]
   2db28:	05db      	lsls	r3, r3, #23
   2db2a:	0ddb      	lsrs	r3, r3, #23
   2db2c:	d000      	beq.n	2db30 <f_write+0x84>
   2db2e:	e0f6      	b.n	2dd1e <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2db30:	68fb      	ldr	r3, [r7, #12]
   2db32:	689b      	ldr	r3, [r3, #8]
   2db34:	0a5b      	lsrs	r3, r3, #9
   2db36:	b2da      	uxtb	r2, r3
   2db38:	68fb      	ldr	r3, [r7, #12]
   2db3a:	681b      	ldr	r3, [r3, #0]
   2db3c:	789b      	ldrb	r3, [r3, #2]
   2db3e:	3b01      	subs	r3, #1
   2db40:	b2d9      	uxtb	r1, r3
   2db42:	2316      	movs	r3, #22
   2db44:	18fb      	adds	r3, r7, r3
   2db46:	400a      	ands	r2, r1
   2db48:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2db4a:	2316      	movs	r3, #22
   2db4c:	18fb      	adds	r3, r7, r3
   2db4e:	781b      	ldrb	r3, [r3, #0]
   2db50:	2b00      	cmp	r3, #0
   2db52:	d140      	bne.n	2dbd6 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2db54:	68fb      	ldr	r3, [r7, #12]
   2db56:	689b      	ldr	r3, [r3, #8]
   2db58:	2b00      	cmp	r3, #0
   2db5a:	d111      	bne.n	2db80 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2db5c:	68fb      	ldr	r3, [r7, #12]
   2db5e:	691b      	ldr	r3, [r3, #16]
   2db60:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2db62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2db64:	2b00      	cmp	r3, #0
   2db66:	d115      	bne.n	2db94 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2db68:	68fb      	ldr	r3, [r7, #12]
   2db6a:	681b      	ldr	r3, [r3, #0]
   2db6c:	2100      	movs	r1, #0
   2db6e:	0018      	movs	r0, r3
   2db70:	4b9d      	ldr	r3, [pc, #628]	; (2dde8 <f_write+0x33c>)
   2db72:	4798      	blx	r3
   2db74:	0003      	movs	r3, r0
   2db76:	627b      	str	r3, [r7, #36]	; 0x24
   2db78:	68fb      	ldr	r3, [r7, #12]
   2db7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2db7c:	611a      	str	r2, [r3, #16]
   2db7e:	e009      	b.n	2db94 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2db80:	68fb      	ldr	r3, [r7, #12]
   2db82:	681a      	ldr	r2, [r3, #0]
   2db84:	68fb      	ldr	r3, [r7, #12]
   2db86:	695b      	ldr	r3, [r3, #20]
   2db88:	0019      	movs	r1, r3
   2db8a:	0010      	movs	r0, r2
   2db8c:	4b96      	ldr	r3, [pc, #600]	; (2dde8 <f_write+0x33c>)
   2db8e:	4798      	blx	r3
   2db90:	0003      	movs	r3, r0
   2db92:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2db94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2db96:	2b00      	cmp	r3, #0
   2db98:	d100      	bne.n	2db9c <f_write+0xf0>
   2db9a:	e10c      	b.n	2ddb6 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2db9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2db9e:	2b01      	cmp	r3, #1
   2dba0:	d109      	bne.n	2dbb6 <f_write+0x10a>
   2dba2:	68fb      	ldr	r3, [r7, #12]
   2dba4:	799b      	ldrb	r3, [r3, #6]
   2dba6:	2280      	movs	r2, #128	; 0x80
   2dba8:	4252      	negs	r2, r2
   2dbaa:	4313      	orrs	r3, r2
   2dbac:	b2da      	uxtb	r2, r3
   2dbae:	68fb      	ldr	r3, [r7, #12]
   2dbb0:	719a      	strb	r2, [r3, #6]
   2dbb2:	2302      	movs	r3, #2
   2dbb4:	e112      	b.n	2dddc <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2dbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dbb8:	3301      	adds	r3, #1
   2dbba:	d109      	bne.n	2dbd0 <f_write+0x124>
   2dbbc:	68fb      	ldr	r3, [r7, #12]
   2dbbe:	799b      	ldrb	r3, [r3, #6]
   2dbc0:	2280      	movs	r2, #128	; 0x80
   2dbc2:	4252      	negs	r2, r2
   2dbc4:	4313      	orrs	r3, r2
   2dbc6:	b2da      	uxtb	r2, r3
   2dbc8:	68fb      	ldr	r3, [r7, #12]
   2dbca:	719a      	strb	r2, [r3, #6]
   2dbcc:	2301      	movs	r3, #1
   2dbce:	e105      	b.n	2dddc <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2dbd0:	68fb      	ldr	r3, [r7, #12]
   2dbd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2dbd4:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2dbd6:	68fb      	ldr	r3, [r7, #12]
   2dbd8:	681b      	ldr	r3, [r3, #0]
   2dbda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2dbdc:	68fb      	ldr	r3, [r7, #12]
   2dbde:	699b      	ldr	r3, [r3, #24]
   2dbe0:	429a      	cmp	r2, r3
   2dbe2:	d111      	bne.n	2dc08 <f_write+0x15c>
   2dbe4:	68fb      	ldr	r3, [r7, #12]
   2dbe6:	681b      	ldr	r3, [r3, #0]
   2dbe8:	2100      	movs	r1, #0
   2dbea:	0018      	movs	r0, r3
   2dbec:	4b7f      	ldr	r3, [pc, #508]	; (2ddec <f_write+0x340>)
   2dbee:	4798      	blx	r3
   2dbf0:	1e03      	subs	r3, r0, #0
   2dbf2:	d009      	beq.n	2dc08 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2dbf4:	68fb      	ldr	r3, [r7, #12]
   2dbf6:	799b      	ldrb	r3, [r3, #6]
   2dbf8:	2280      	movs	r2, #128	; 0x80
   2dbfa:	4252      	negs	r2, r2
   2dbfc:	4313      	orrs	r3, r2
   2dbfe:	b2da      	uxtb	r2, r3
   2dc00:	68fb      	ldr	r3, [r7, #12]
   2dc02:	719a      	strb	r2, [r3, #6]
   2dc04:	2301      	movs	r3, #1
   2dc06:	e0e9      	b.n	2dddc <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2dc08:	68fb      	ldr	r3, [r7, #12]
   2dc0a:	681a      	ldr	r2, [r3, #0]
   2dc0c:	68fb      	ldr	r3, [r7, #12]
   2dc0e:	695b      	ldr	r3, [r3, #20]
   2dc10:	0019      	movs	r1, r3
   2dc12:	0010      	movs	r0, r2
   2dc14:	4b76      	ldr	r3, [pc, #472]	; (2ddf0 <f_write+0x344>)
   2dc16:	4798      	blx	r3
   2dc18:	0003      	movs	r3, r0
   2dc1a:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2dc1c:	693b      	ldr	r3, [r7, #16]
   2dc1e:	2b00      	cmp	r3, #0
   2dc20:	d109      	bne.n	2dc36 <f_write+0x18a>
   2dc22:	68fb      	ldr	r3, [r7, #12]
   2dc24:	799b      	ldrb	r3, [r3, #6]
   2dc26:	2280      	movs	r2, #128	; 0x80
   2dc28:	4252      	negs	r2, r2
   2dc2a:	4313      	orrs	r3, r2
   2dc2c:	b2da      	uxtb	r2, r3
   2dc2e:	68fb      	ldr	r3, [r7, #12]
   2dc30:	719a      	strb	r2, [r3, #6]
   2dc32:	2302      	movs	r3, #2
   2dc34:	e0d2      	b.n	2dddc <f_write+0x330>
			sect += csect;
   2dc36:	2316      	movs	r3, #22
   2dc38:	18fb      	adds	r3, r7, r3
   2dc3a:	781b      	ldrb	r3, [r3, #0]
   2dc3c:	693a      	ldr	r2, [r7, #16]
   2dc3e:	18d3      	adds	r3, r2, r3
   2dc40:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2dc42:	687b      	ldr	r3, [r7, #4]
   2dc44:	0a5b      	lsrs	r3, r3, #9
   2dc46:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2dc48:	69fb      	ldr	r3, [r7, #28]
   2dc4a:	2b00      	cmp	r3, #0
   2dc4c:	d048      	beq.n	2dce0 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2dc4e:	2316      	movs	r3, #22
   2dc50:	18fb      	adds	r3, r7, r3
   2dc52:	781a      	ldrb	r2, [r3, #0]
   2dc54:	69fb      	ldr	r3, [r7, #28]
   2dc56:	18d2      	adds	r2, r2, r3
   2dc58:	68fb      	ldr	r3, [r7, #12]
   2dc5a:	681b      	ldr	r3, [r3, #0]
   2dc5c:	789b      	ldrb	r3, [r3, #2]
   2dc5e:	429a      	cmp	r2, r3
   2dc60:	d908      	bls.n	2dc74 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2dc62:	68fb      	ldr	r3, [r7, #12]
   2dc64:	681b      	ldr	r3, [r3, #0]
   2dc66:	789b      	ldrb	r3, [r3, #2]
   2dc68:	001a      	movs	r2, r3
   2dc6a:	2316      	movs	r3, #22
   2dc6c:	18fb      	adds	r3, r7, r3
   2dc6e:	781b      	ldrb	r3, [r3, #0]
   2dc70:	1ad3      	subs	r3, r2, r3
   2dc72:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2dc74:	68fb      	ldr	r3, [r7, #12]
   2dc76:	681b      	ldr	r3, [r3, #0]
   2dc78:	7858      	ldrb	r0, [r3, #1]
   2dc7a:	69fb      	ldr	r3, [r7, #28]
   2dc7c:	b2db      	uxtb	r3, r3
   2dc7e:	693a      	ldr	r2, [r7, #16]
   2dc80:	69b9      	ldr	r1, [r7, #24]
   2dc82:	4c5c      	ldr	r4, [pc, #368]	; (2ddf4 <f_write+0x348>)
   2dc84:	47a0      	blx	r4
   2dc86:	1e03      	subs	r3, r0, #0
   2dc88:	d009      	beq.n	2dc9e <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2dc8a:	68fb      	ldr	r3, [r7, #12]
   2dc8c:	799b      	ldrb	r3, [r3, #6]
   2dc8e:	2280      	movs	r2, #128	; 0x80
   2dc90:	4252      	negs	r2, r2
   2dc92:	4313      	orrs	r3, r2
   2dc94:	b2da      	uxtb	r2, r3
   2dc96:	68fb      	ldr	r3, [r7, #12]
   2dc98:	719a      	strb	r2, [r3, #6]
   2dc9a:	2301      	movs	r3, #1
   2dc9c:	e09e      	b.n	2dddc <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2dc9e:	68fb      	ldr	r3, [r7, #12]
   2dca0:	681b      	ldr	r3, [r3, #0]
   2dca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2dca4:	693b      	ldr	r3, [r7, #16]
   2dca6:	1ad2      	subs	r2, r2, r3
   2dca8:	69fb      	ldr	r3, [r7, #28]
   2dcaa:	429a      	cmp	r2, r3
   2dcac:	d214      	bcs.n	2dcd8 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2dcae:	68fb      	ldr	r3, [r7, #12]
   2dcb0:	681b      	ldr	r3, [r3, #0]
   2dcb2:	3330      	adds	r3, #48	; 0x30
   2dcb4:	0018      	movs	r0, r3
   2dcb6:	68fb      	ldr	r3, [r7, #12]
   2dcb8:	681b      	ldr	r3, [r3, #0]
   2dcba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2dcbc:	693b      	ldr	r3, [r7, #16]
   2dcbe:	1ad3      	subs	r3, r2, r3
   2dcc0:	025b      	lsls	r3, r3, #9
   2dcc2:	69ba      	ldr	r2, [r7, #24]
   2dcc4:	18d1      	adds	r1, r2, r3
   2dcc6:	2380      	movs	r3, #128	; 0x80
   2dcc8:	009b      	lsls	r3, r3, #2
   2dcca:	001a      	movs	r2, r3
   2dccc:	4b4a      	ldr	r3, [pc, #296]	; (2ddf8 <f_write+0x34c>)
   2dcce:	4798      	blx	r3
					fp->fs->wflag = 0;
   2dcd0:	68fb      	ldr	r3, [r7, #12]
   2dcd2:	681b      	ldr	r3, [r3, #0]
   2dcd4:	2200      	movs	r2, #0
   2dcd6:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2dcd8:	69fb      	ldr	r3, [r7, #28]
   2dcda:	025b      	lsls	r3, r3, #9
   2dcdc:	623b      	str	r3, [r7, #32]
				continue;
   2dcde:	e051      	b.n	2dd84 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2dce0:	68fb      	ldr	r3, [r7, #12]
   2dce2:	689a      	ldr	r2, [r3, #8]
   2dce4:	68fb      	ldr	r3, [r7, #12]
   2dce6:	68db      	ldr	r3, [r3, #12]
   2dce8:	429a      	cmp	r2, r3
   2dcea:	d315      	bcc.n	2dd18 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2dcec:	68fb      	ldr	r3, [r7, #12]
   2dcee:	681b      	ldr	r3, [r3, #0]
   2dcf0:	2100      	movs	r1, #0
   2dcf2:	0018      	movs	r0, r3
   2dcf4:	4b3d      	ldr	r3, [pc, #244]	; (2ddec <f_write+0x340>)
   2dcf6:	4798      	blx	r3
   2dcf8:	1e03      	subs	r3, r0, #0
   2dcfa:	d009      	beq.n	2dd10 <f_write+0x264>
   2dcfc:	68fb      	ldr	r3, [r7, #12]
   2dcfe:	799b      	ldrb	r3, [r3, #6]
   2dd00:	2280      	movs	r2, #128	; 0x80
   2dd02:	4252      	negs	r2, r2
   2dd04:	4313      	orrs	r3, r2
   2dd06:	b2da      	uxtb	r2, r3
   2dd08:	68fb      	ldr	r3, [r7, #12]
   2dd0a:	719a      	strb	r2, [r3, #6]
   2dd0c:	2301      	movs	r3, #1
   2dd0e:	e065      	b.n	2dddc <f_write+0x330>
				fp->fs->winsect = sect;
   2dd10:	68fb      	ldr	r3, [r7, #12]
   2dd12:	681b      	ldr	r3, [r3, #0]
   2dd14:	693a      	ldr	r2, [r7, #16]
   2dd16:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2dd18:	68fb      	ldr	r3, [r7, #12]
   2dd1a:	693a      	ldr	r2, [r7, #16]
   2dd1c:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2dd1e:	68fb      	ldr	r3, [r7, #12]
   2dd20:	689b      	ldr	r3, [r3, #8]
   2dd22:	05db      	lsls	r3, r3, #23
   2dd24:	0ddb      	lsrs	r3, r3, #23
   2dd26:	2280      	movs	r2, #128	; 0x80
   2dd28:	0092      	lsls	r2, r2, #2
   2dd2a:	1ad3      	subs	r3, r2, r3
   2dd2c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2dd2e:	6a3a      	ldr	r2, [r7, #32]
   2dd30:	687b      	ldr	r3, [r7, #4]
   2dd32:	429a      	cmp	r2, r3
   2dd34:	d901      	bls.n	2dd3a <f_write+0x28e>
   2dd36:	687b      	ldr	r3, [r7, #4]
   2dd38:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2dd3a:	68fb      	ldr	r3, [r7, #12]
   2dd3c:	681a      	ldr	r2, [r3, #0]
   2dd3e:	68fb      	ldr	r3, [r7, #12]
   2dd40:	699b      	ldr	r3, [r3, #24]
   2dd42:	0019      	movs	r1, r3
   2dd44:	0010      	movs	r0, r2
   2dd46:	4b29      	ldr	r3, [pc, #164]	; (2ddec <f_write+0x340>)
   2dd48:	4798      	blx	r3
   2dd4a:	1e03      	subs	r3, r0, #0
   2dd4c:	d009      	beq.n	2dd62 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2dd4e:	68fb      	ldr	r3, [r7, #12]
   2dd50:	799b      	ldrb	r3, [r3, #6]
   2dd52:	2280      	movs	r2, #128	; 0x80
   2dd54:	4252      	negs	r2, r2
   2dd56:	4313      	orrs	r3, r2
   2dd58:	b2da      	uxtb	r2, r3
   2dd5a:	68fb      	ldr	r3, [r7, #12]
   2dd5c:	719a      	strb	r2, [r3, #6]
   2dd5e:	2301      	movs	r3, #1
   2dd60:	e03c      	b.n	2dddc <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2dd62:	68fb      	ldr	r3, [r7, #12]
   2dd64:	681a      	ldr	r2, [r3, #0]
   2dd66:	68fb      	ldr	r3, [r7, #12]
   2dd68:	689b      	ldr	r3, [r3, #8]
   2dd6a:	05db      	lsls	r3, r3, #23
   2dd6c:	0ddb      	lsrs	r3, r3, #23
   2dd6e:	3330      	adds	r3, #48	; 0x30
   2dd70:	18d3      	adds	r3, r2, r3
   2dd72:	6a3a      	ldr	r2, [r7, #32]
   2dd74:	69b9      	ldr	r1, [r7, #24]
   2dd76:	0018      	movs	r0, r3
   2dd78:	4b1f      	ldr	r3, [pc, #124]	; (2ddf8 <f_write+0x34c>)
   2dd7a:	4798      	blx	r3
		fp->fs->wflag = 1;
   2dd7c:	68fb      	ldr	r3, [r7, #12]
   2dd7e:	681b      	ldr	r3, [r3, #0]
   2dd80:	2201      	movs	r2, #1
   2dd82:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2dd84:	69ba      	ldr	r2, [r7, #24]
   2dd86:	6a3b      	ldr	r3, [r7, #32]
   2dd88:	18d3      	adds	r3, r2, r3
   2dd8a:	61bb      	str	r3, [r7, #24]
   2dd8c:	68fb      	ldr	r3, [r7, #12]
   2dd8e:	689a      	ldr	r2, [r3, #8]
   2dd90:	6a3b      	ldr	r3, [r7, #32]
   2dd92:	18d2      	adds	r2, r2, r3
   2dd94:	68fb      	ldr	r3, [r7, #12]
   2dd96:	609a      	str	r2, [r3, #8]
   2dd98:	683b      	ldr	r3, [r7, #0]
   2dd9a:	681a      	ldr	r2, [r3, #0]
   2dd9c:	6a3b      	ldr	r3, [r7, #32]
   2dd9e:	18d2      	adds	r2, r2, r3
   2dda0:	683b      	ldr	r3, [r7, #0]
   2dda2:	601a      	str	r2, [r3, #0]
   2dda4:	687a      	ldr	r2, [r7, #4]
   2dda6:	6a3b      	ldr	r3, [r7, #32]
   2dda8:	1ad3      	subs	r3, r2, r3
   2ddaa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2ddac:	687b      	ldr	r3, [r7, #4]
   2ddae:	2b00      	cmp	r3, #0
   2ddb0:	d000      	beq.n	2ddb4 <f_write+0x308>
   2ddb2:	e6b7      	b.n	2db24 <f_write+0x78>
   2ddb4:	e000      	b.n	2ddb8 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2ddb6:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2ddb8:	68fb      	ldr	r3, [r7, #12]
   2ddba:	689a      	ldr	r2, [r3, #8]
   2ddbc:	68fb      	ldr	r3, [r7, #12]
   2ddbe:	68db      	ldr	r3, [r3, #12]
   2ddc0:	429a      	cmp	r2, r3
   2ddc2:	d903      	bls.n	2ddcc <f_write+0x320>
   2ddc4:	68fb      	ldr	r3, [r7, #12]
   2ddc6:	689a      	ldr	r2, [r3, #8]
   2ddc8:	68fb      	ldr	r3, [r7, #12]
   2ddca:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2ddcc:	68fb      	ldr	r3, [r7, #12]
   2ddce:	799b      	ldrb	r3, [r3, #6]
   2ddd0:	2220      	movs	r2, #32
   2ddd2:	4313      	orrs	r3, r2
   2ddd4:	b2da      	uxtb	r2, r3
   2ddd6:	68fb      	ldr	r3, [r7, #12]
   2ddd8:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2ddda:	2300      	movs	r3, #0
}
   2dddc:	0018      	movs	r0, r3
   2ddde:	46bd      	mov	sp, r7
   2dde0:	b00b      	add	sp, #44	; 0x2c
   2dde2:	bd90      	pop	{r4, r7, pc}
   2dde4:	0002d4d1 	.word	0x0002d4d1
   2dde8:	0002bb5d 	.word	0x0002bb5d
   2ddec:	0002b455 	.word	0x0002b455
   2ddf0:	0002b6b5 	.word	0x0002b6b5
   2ddf4:	0002b141 	.word	0x0002b141
   2ddf8:	0002b371 	.word	0x0002b371

0002ddfc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2ddfc:	b590      	push	{r4, r7, lr}
   2ddfe:	b087      	sub	sp, #28
   2de00:	af00      	add	r7, sp, #0
   2de02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2de04:	687b      	ldr	r3, [r7, #4]
   2de06:	681a      	ldr	r2, [r3, #0]
   2de08:	687b      	ldr	r3, [r7, #4]
   2de0a:	889b      	ldrh	r3, [r3, #4]
   2de0c:	2117      	movs	r1, #23
   2de0e:	187c      	adds	r4, r7, r1
   2de10:	0019      	movs	r1, r3
   2de12:	0010      	movs	r0, r2
   2de14:	4b55      	ldr	r3, [pc, #340]	; (2df6c <f_sync+0x170>)
   2de16:	4798      	blx	r3
   2de18:	0003      	movs	r3, r0
   2de1a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2de1c:	2317      	movs	r3, #23
   2de1e:	18fb      	adds	r3, r7, r3
   2de20:	781b      	ldrb	r3, [r3, #0]
   2de22:	2b00      	cmp	r3, #0
   2de24:	d000      	beq.n	2de28 <f_sync+0x2c>
   2de26:	e09a      	b.n	2df5e <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2de28:	687b      	ldr	r3, [r7, #4]
   2de2a:	799b      	ldrb	r3, [r3, #6]
   2de2c:	001a      	movs	r2, r3
   2de2e:	2320      	movs	r3, #32
   2de30:	4013      	ands	r3, r2
   2de32:	d100      	bne.n	2de36 <f_sync+0x3a>
   2de34:	e093      	b.n	2df5e <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2de36:	687b      	ldr	r3, [r7, #4]
   2de38:	681a      	ldr	r2, [r3, #0]
   2de3a:	687b      	ldr	r3, [r7, #4]
   2de3c:	69db      	ldr	r3, [r3, #28]
   2de3e:	2117      	movs	r1, #23
   2de40:	187c      	adds	r4, r7, r1
   2de42:	0019      	movs	r1, r3
   2de44:	0010      	movs	r0, r2
   2de46:	4b4a      	ldr	r3, [pc, #296]	; (2df70 <f_sync+0x174>)
   2de48:	4798      	blx	r3
   2de4a:	0003      	movs	r3, r0
   2de4c:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2de4e:	2317      	movs	r3, #23
   2de50:	18fb      	adds	r3, r7, r3
   2de52:	781b      	ldrb	r3, [r3, #0]
   2de54:	2b00      	cmp	r3, #0
   2de56:	d000      	beq.n	2de5a <f_sync+0x5e>
   2de58:	e081      	b.n	2df5e <f_sync+0x162>
				dir = fp->dir_ptr;
   2de5a:	687b      	ldr	r3, [r7, #4]
   2de5c:	6a1b      	ldr	r3, [r3, #32]
   2de5e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2de60:	693b      	ldr	r3, [r7, #16]
   2de62:	330b      	adds	r3, #11
   2de64:	693a      	ldr	r2, [r7, #16]
   2de66:	320b      	adds	r2, #11
   2de68:	7812      	ldrb	r2, [r2, #0]
   2de6a:	2120      	movs	r1, #32
   2de6c:	430a      	orrs	r2, r1
   2de6e:	b2d2      	uxtb	r2, r2
   2de70:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2de72:	693b      	ldr	r3, [r7, #16]
   2de74:	331c      	adds	r3, #28
   2de76:	001a      	movs	r2, r3
   2de78:	687b      	ldr	r3, [r7, #4]
   2de7a:	68db      	ldr	r3, [r3, #12]
   2de7c:	b2db      	uxtb	r3, r3
   2de7e:	7013      	strb	r3, [r2, #0]
   2de80:	693b      	ldr	r3, [r7, #16]
   2de82:	331d      	adds	r3, #29
   2de84:	001a      	movs	r2, r3
   2de86:	687b      	ldr	r3, [r7, #4]
   2de88:	68db      	ldr	r3, [r3, #12]
   2de8a:	b29b      	uxth	r3, r3
   2de8c:	0a1b      	lsrs	r3, r3, #8
   2de8e:	b29b      	uxth	r3, r3
   2de90:	b2db      	uxtb	r3, r3
   2de92:	7013      	strb	r3, [r2, #0]
   2de94:	693b      	ldr	r3, [r7, #16]
   2de96:	331e      	adds	r3, #30
   2de98:	001a      	movs	r2, r3
   2de9a:	687b      	ldr	r3, [r7, #4]
   2de9c:	68db      	ldr	r3, [r3, #12]
   2de9e:	0c1b      	lsrs	r3, r3, #16
   2dea0:	b2db      	uxtb	r3, r3
   2dea2:	7013      	strb	r3, [r2, #0]
   2dea4:	693b      	ldr	r3, [r7, #16]
   2dea6:	331f      	adds	r3, #31
   2dea8:	001a      	movs	r2, r3
   2deaa:	687b      	ldr	r3, [r7, #4]
   2deac:	68db      	ldr	r3, [r3, #12]
   2deae:	0e1b      	lsrs	r3, r3, #24
   2deb0:	b2db      	uxtb	r3, r3
   2deb2:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2deb4:	693b      	ldr	r3, [r7, #16]
   2deb6:	331a      	adds	r3, #26
   2deb8:	001a      	movs	r2, r3
   2deba:	687b      	ldr	r3, [r7, #4]
   2debc:	691b      	ldr	r3, [r3, #16]
   2debe:	b2db      	uxtb	r3, r3
   2dec0:	7013      	strb	r3, [r2, #0]
   2dec2:	693b      	ldr	r3, [r7, #16]
   2dec4:	331b      	adds	r3, #27
   2dec6:	001a      	movs	r2, r3
   2dec8:	687b      	ldr	r3, [r7, #4]
   2deca:	691b      	ldr	r3, [r3, #16]
   2decc:	b29b      	uxth	r3, r3
   2dece:	0a1b      	lsrs	r3, r3, #8
   2ded0:	b29b      	uxth	r3, r3
   2ded2:	b2db      	uxtb	r3, r3
   2ded4:	7013      	strb	r3, [r2, #0]
   2ded6:	693b      	ldr	r3, [r7, #16]
   2ded8:	3314      	adds	r3, #20
   2deda:	001a      	movs	r2, r3
   2dedc:	687b      	ldr	r3, [r7, #4]
   2dede:	691b      	ldr	r3, [r3, #16]
   2dee0:	0c1b      	lsrs	r3, r3, #16
   2dee2:	b2db      	uxtb	r3, r3
   2dee4:	7013      	strb	r3, [r2, #0]
   2dee6:	693b      	ldr	r3, [r7, #16]
   2dee8:	3315      	adds	r3, #21
   2deea:	001a      	movs	r2, r3
   2deec:	687b      	ldr	r3, [r7, #4]
   2deee:	691b      	ldr	r3, [r3, #16]
   2def0:	0c1b      	lsrs	r3, r3, #16
   2def2:	b29b      	uxth	r3, r3
   2def4:	0a1b      	lsrs	r3, r3, #8
   2def6:	b29b      	uxth	r3, r3
   2def8:	b2db      	uxtb	r3, r3
   2defa:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2defc:	4b1d      	ldr	r3, [pc, #116]	; (2df74 <f_sync+0x178>)
   2defe:	4798      	blx	r3
   2df00:	0003      	movs	r3, r0
   2df02:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2df04:	693b      	ldr	r3, [r7, #16]
   2df06:	3316      	adds	r3, #22
   2df08:	68fa      	ldr	r2, [r7, #12]
   2df0a:	b2d2      	uxtb	r2, r2
   2df0c:	701a      	strb	r2, [r3, #0]
   2df0e:	693b      	ldr	r3, [r7, #16]
   2df10:	3317      	adds	r3, #23
   2df12:	68fa      	ldr	r2, [r7, #12]
   2df14:	b292      	uxth	r2, r2
   2df16:	0a12      	lsrs	r2, r2, #8
   2df18:	b292      	uxth	r2, r2
   2df1a:	b2d2      	uxtb	r2, r2
   2df1c:	701a      	strb	r2, [r3, #0]
   2df1e:	693b      	ldr	r3, [r7, #16]
   2df20:	3318      	adds	r3, #24
   2df22:	68fa      	ldr	r2, [r7, #12]
   2df24:	0c12      	lsrs	r2, r2, #16
   2df26:	b2d2      	uxtb	r2, r2
   2df28:	701a      	strb	r2, [r3, #0]
   2df2a:	693b      	ldr	r3, [r7, #16]
   2df2c:	3319      	adds	r3, #25
   2df2e:	68fa      	ldr	r2, [r7, #12]
   2df30:	0e12      	lsrs	r2, r2, #24
   2df32:	b2d2      	uxtb	r2, r2
   2df34:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2df36:	687b      	ldr	r3, [r7, #4]
   2df38:	799b      	ldrb	r3, [r3, #6]
   2df3a:	2220      	movs	r2, #32
   2df3c:	4393      	bics	r3, r2
   2df3e:	b2da      	uxtb	r2, r3
   2df40:	687b      	ldr	r3, [r7, #4]
   2df42:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2df44:	687b      	ldr	r3, [r7, #4]
   2df46:	681b      	ldr	r3, [r3, #0]
   2df48:	2201      	movs	r2, #1
   2df4a:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2df4c:	687b      	ldr	r3, [r7, #4]
   2df4e:	681b      	ldr	r3, [r3, #0]
   2df50:	2217      	movs	r2, #23
   2df52:	18bc      	adds	r4, r7, r2
   2df54:	0018      	movs	r0, r3
   2df56:	4b08      	ldr	r3, [pc, #32]	; (2df78 <f_sync+0x17c>)
   2df58:	4798      	blx	r3
   2df5a:	0003      	movs	r3, r0
   2df5c:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2df5e:	2317      	movs	r3, #23
   2df60:	18fb      	adds	r3, r7, r3
   2df62:	781b      	ldrb	r3, [r3, #0]
}
   2df64:	0018      	movs	r0, r3
   2df66:	46bd      	mov	sp, r7
   2df68:	b007      	add	sp, #28
   2df6a:	bd90      	pop	{r4, r7, pc}
   2df6c:	0002d4d1 	.word	0x0002d4d1
   2df70:	0002b455 	.word	0x0002b455
   2df74:	0002b311 	.word	0x0002b311
   2df78:	0002b51d 	.word	0x0002b51d

0002df7c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2df7c:	b590      	push	{r4, r7, lr}
   2df7e:	b085      	sub	sp, #20
   2df80:	af00      	add	r7, sp, #0
   2df82:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2df84:	230f      	movs	r3, #15
   2df86:	18fc      	adds	r4, r7, r3
   2df88:	687b      	ldr	r3, [r7, #4]
   2df8a:	0018      	movs	r0, r3
   2df8c:	4b09      	ldr	r3, [pc, #36]	; (2dfb4 <f_close+0x38>)
   2df8e:	4798      	blx	r3
   2df90:	0003      	movs	r3, r0
   2df92:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2df94:	230f      	movs	r3, #15
   2df96:	18fb      	adds	r3, r7, r3
   2df98:	781b      	ldrb	r3, [r3, #0]
   2df9a:	2b00      	cmp	r3, #0
   2df9c:	d102      	bne.n	2dfa4 <f_close+0x28>
   2df9e:	687b      	ldr	r3, [r7, #4]
   2dfa0:	2200      	movs	r2, #0
   2dfa2:	601a      	str	r2, [r3, #0]
	return res;
   2dfa4:	230f      	movs	r3, #15
   2dfa6:	18fb      	adds	r3, r7, r3
   2dfa8:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2dfaa:	0018      	movs	r0, r3
   2dfac:	46bd      	mov	sp, r7
   2dfae:	b005      	add	sp, #20
   2dfb0:	bd90      	pop	{r4, r7, pc}
   2dfb2:	46c0      	nop			; (mov r8, r8)
   2dfb4:	0002ddfd 	.word	0x0002ddfd

0002dfb8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2dfb8:	b580      	push	{r7, lr}
   2dfba:	b084      	sub	sp, #16
   2dfbc:	af00      	add	r7, sp, #0
   2dfbe:	0002      	movs	r2, r0
   2dfc0:	6039      	str	r1, [r7, #0]
   2dfc2:	1dbb      	adds	r3, r7, #6
   2dfc4:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2dfc6:	1dbb      	adds	r3, r7, #6
   2dfc8:	881b      	ldrh	r3, [r3, #0]
   2dfca:	2b7f      	cmp	r3, #127	; 0x7f
   2dfcc:	d805      	bhi.n	2dfda <ff_convert+0x22>
		c = src;
   2dfce:	230e      	movs	r3, #14
   2dfd0:	18fb      	adds	r3, r7, r3
   2dfd2:	1dba      	adds	r2, r7, #6
   2dfd4:	8812      	ldrh	r2, [r2, #0]
   2dfd6:	801a      	strh	r2, [r3, #0]
   2dfd8:	e03a      	b.n	2e050 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2dfda:	683b      	ldr	r3, [r7, #0]
   2dfdc:	2b00      	cmp	r3, #0
   2dfde:	d010      	beq.n	2e002 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2dfe0:	1dbb      	adds	r3, r7, #6
   2dfe2:	881b      	ldrh	r3, [r3, #0]
   2dfe4:	2bff      	cmp	r3, #255	; 0xff
   2dfe6:	d807      	bhi.n	2dff8 <ff_convert+0x40>
   2dfe8:	1dbb      	adds	r3, r7, #6
   2dfea:	881b      	ldrh	r3, [r3, #0]
   2dfec:	3b80      	subs	r3, #128	; 0x80
   2dfee:	001a      	movs	r2, r3
   2dff0:	4b1b      	ldr	r3, [pc, #108]	; (2e060 <ff_convert+0xa8>)
   2dff2:	0052      	lsls	r2, r2, #1
   2dff4:	5ad2      	ldrh	r2, [r2, r3]
   2dff6:	e000      	b.n	2dffa <ff_convert+0x42>
   2dff8:	2200      	movs	r2, #0
   2dffa:	230e      	movs	r3, #14
   2dffc:	18fb      	adds	r3, r7, r3
   2dffe:	801a      	strh	r2, [r3, #0]
   2e000:	e026      	b.n	2e050 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2e002:	230e      	movs	r3, #14
   2e004:	18fb      	adds	r3, r7, r3
   2e006:	2200      	movs	r2, #0
   2e008:	801a      	strh	r2, [r3, #0]
   2e00a:	e010      	b.n	2e02e <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2e00c:	230e      	movs	r3, #14
   2e00e:	18fb      	adds	r3, r7, r3
   2e010:	881a      	ldrh	r2, [r3, #0]
   2e012:	4b13      	ldr	r3, [pc, #76]	; (2e060 <ff_convert+0xa8>)
   2e014:	0052      	lsls	r2, r2, #1
   2e016:	5ad3      	ldrh	r3, [r2, r3]
   2e018:	1dba      	adds	r2, r7, #6
   2e01a:	8812      	ldrh	r2, [r2, #0]
   2e01c:	429a      	cmp	r2, r3
   2e01e:	d00c      	beq.n	2e03a <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2e020:	230e      	movs	r3, #14
   2e022:	18fb      	adds	r3, r7, r3
   2e024:	881a      	ldrh	r2, [r3, #0]
   2e026:	230e      	movs	r3, #14
   2e028:	18fb      	adds	r3, r7, r3
   2e02a:	3201      	adds	r2, #1
   2e02c:	801a      	strh	r2, [r3, #0]
   2e02e:	230e      	movs	r3, #14
   2e030:	18fb      	adds	r3, r7, r3
   2e032:	881b      	ldrh	r3, [r3, #0]
   2e034:	2b7f      	cmp	r3, #127	; 0x7f
   2e036:	d9e9      	bls.n	2e00c <ff_convert+0x54>
   2e038:	e000      	b.n	2e03c <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2e03a:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2e03c:	230e      	movs	r3, #14
   2e03e:	18fb      	adds	r3, r7, r3
   2e040:	881b      	ldrh	r3, [r3, #0]
   2e042:	3380      	adds	r3, #128	; 0x80
   2e044:	b29a      	uxth	r2, r3
   2e046:	230e      	movs	r3, #14
   2e048:	18fb      	adds	r3, r7, r3
   2e04a:	21ff      	movs	r1, #255	; 0xff
   2e04c:	400a      	ands	r2, r1
   2e04e:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2e050:	230e      	movs	r3, #14
   2e052:	18fb      	adds	r3, r7, r3
   2e054:	881b      	ldrh	r3, [r3, #0]
}
   2e056:	0018      	movs	r0, r3
   2e058:	46bd      	mov	sp, r7
   2e05a:	b004      	add	sp, #16
   2e05c:	bd80      	pop	{r7, pc}
   2e05e:	46c0      	nop			; (mov r8, r8)
   2e060:	00039304 	.word	0x00039304

0002e064 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2e064:	b580      	push	{r7, lr}
   2e066:	b084      	sub	sp, #16
   2e068:	af00      	add	r7, sp, #0
   2e06a:	0002      	movs	r2, r0
   2e06c:	1dbb      	adds	r3, r7, #6
   2e06e:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2e070:	2300      	movs	r3, #0
   2e072:	60fb      	str	r3, [r7, #12]
   2e074:	e002      	b.n	2e07c <ff_wtoupper+0x18>
   2e076:	68fb      	ldr	r3, [r7, #12]
   2e078:	3301      	adds	r3, #1
   2e07a:	60fb      	str	r3, [r7, #12]
   2e07c:	4b0f      	ldr	r3, [pc, #60]	; (2e0bc <ff_wtoupper+0x58>)
   2e07e:	68fa      	ldr	r2, [r7, #12]
   2e080:	0052      	lsls	r2, r2, #1
   2e082:	5ad3      	ldrh	r3, [r2, r3]
   2e084:	2b00      	cmp	r3, #0
   2e086:	d007      	beq.n	2e098 <ff_wtoupper+0x34>
   2e088:	4b0c      	ldr	r3, [pc, #48]	; (2e0bc <ff_wtoupper+0x58>)
   2e08a:	68fa      	ldr	r2, [r7, #12]
   2e08c:	0052      	lsls	r2, r2, #1
   2e08e:	5ad3      	ldrh	r3, [r2, r3]
   2e090:	1dba      	adds	r2, r7, #6
   2e092:	8812      	ldrh	r2, [r2, #0]
   2e094:	429a      	cmp	r2, r3
   2e096:	d1ee      	bne.n	2e076 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2e098:	4b08      	ldr	r3, [pc, #32]	; (2e0bc <ff_wtoupper+0x58>)
   2e09a:	68fa      	ldr	r2, [r7, #12]
   2e09c:	0052      	lsls	r2, r2, #1
   2e09e:	5ad3      	ldrh	r3, [r2, r3]
   2e0a0:	2b00      	cmp	r3, #0
   2e0a2:	d004      	beq.n	2e0ae <ff_wtoupper+0x4a>
   2e0a4:	4b06      	ldr	r3, [pc, #24]	; (2e0c0 <ff_wtoupper+0x5c>)
   2e0a6:	68fa      	ldr	r2, [r7, #12]
   2e0a8:	0052      	lsls	r2, r2, #1
   2e0aa:	5ad3      	ldrh	r3, [r2, r3]
   2e0ac:	e001      	b.n	2e0b2 <ff_wtoupper+0x4e>
   2e0ae:	1dbb      	adds	r3, r7, #6
   2e0b0:	881b      	ldrh	r3, [r3, #0]
}
   2e0b2:	0018      	movs	r0, r3
   2e0b4:	46bd      	mov	sp, r7
   2e0b6:	b004      	add	sp, #16
   2e0b8:	bd80      	pop	{r7, pc}
   2e0ba:	46c0      	nop			; (mov r8, r8)
   2e0bc:	00039404 	.word	0x00039404
   2e0c0:	000395e4 	.word	0x000395e4

0002e0c4 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2e0c4:	b580      	push	{r7, lr}
   2e0c6:	b084      	sub	sp, #16
   2e0c8:	af00      	add	r7, sp, #0
   2e0ca:	60f8      	str	r0, [r7, #12]
   2e0cc:	60b9      	str	r1, [r7, #8]
   2e0ce:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2e0d0:	68fb      	ldr	r3, [r7, #12]
   2e0d2:	68ba      	ldr	r2, [r7, #8]
   2e0d4:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2e0d6:	68fb      	ldr	r3, [r7, #12]
   2e0d8:	687a      	ldr	r2, [r7, #4]
   2e0da:	601a      	str	r2, [r3, #0]
}
   2e0dc:	46c0      	nop			; (mov r8, r8)
   2e0de:	46bd      	mov	sp, r7
   2e0e0:	b004      	add	sp, #16
   2e0e2:	bd80      	pop	{r7, pc}

0002e0e4 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2e0e4:	b580      	push	{r7, lr}
   2e0e6:	b082      	sub	sp, #8
   2e0e8:	af00      	add	r7, sp, #0
   2e0ea:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2e0ec:	687b      	ldr	r3, [r7, #4]
   2e0ee:	681b      	ldr	r3, [r3, #0]
   2e0f0:	4a07      	ldr	r2, [pc, #28]	; (2e110 <getNextPacketId+0x2c>)
   2e0f2:	4293      	cmp	r3, r2
   2e0f4:	d003      	beq.n	2e0fe <getNextPacketId+0x1a>
   2e0f6:	687b      	ldr	r3, [r7, #4]
   2e0f8:	681b      	ldr	r3, [r3, #0]
   2e0fa:	1c5a      	adds	r2, r3, #1
   2e0fc:	e000      	b.n	2e100 <getNextPacketId+0x1c>
   2e0fe:	2201      	movs	r2, #1
   2e100:	687b      	ldr	r3, [r7, #4]
   2e102:	601a      	str	r2, [r3, #0]
   2e104:	687b      	ldr	r3, [r7, #4]
   2e106:	681b      	ldr	r3, [r3, #0]
}
   2e108:	0018      	movs	r0, r3
   2e10a:	46bd      	mov	sp, r7
   2e10c:	b002      	add	sp, #8
   2e10e:	bd80      	pop	{r7, pc}
   2e110:	0000ffff 	.word	0x0000ffff

0002e114 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2e114:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e116:	b087      	sub	sp, #28
   2e118:	af00      	add	r7, sp, #0
   2e11a:	60f8      	str	r0, [r7, #12]
   2e11c:	60b9      	str	r1, [r7, #8]
   2e11e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2e120:	2301      	movs	r3, #1
   2e122:	425b      	negs	r3, r3
   2e124:	617b      	str	r3, [r7, #20]
        sent = 0;
   2e126:	2300      	movs	r3, #0
   2e128:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2e12a:	e01a      	b.n	2e162 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2e12c:	68fb      	ldr	r3, [r7, #12]
   2e12e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e130:	68dc      	ldr	r4, [r3, #12]
   2e132:	68fb      	ldr	r3, [r7, #12]
   2e134:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e136:	68fb      	ldr	r3, [r7, #12]
   2e138:	691a      	ldr	r2, [r3, #16]
   2e13a:	693b      	ldr	r3, [r7, #16]
   2e13c:	18d6      	adds	r6, r2, r3
   2e13e:	687b      	ldr	r3, [r7, #4]
   2e140:	0018      	movs	r0, r3
   2e142:	4b1a      	ldr	r3, [pc, #104]	; (2e1ac <sendPacket+0x98>)
   2e144:	4798      	blx	r3
   2e146:	0003      	movs	r3, r0
   2e148:	68ba      	ldr	r2, [r7, #8]
   2e14a:	0031      	movs	r1, r6
   2e14c:	0028      	movs	r0, r5
   2e14e:	47a0      	blx	r4
   2e150:	0003      	movs	r3, r0
   2e152:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2e154:	697b      	ldr	r3, [r7, #20]
   2e156:	2b00      	cmp	r3, #0
   2e158:	db0e      	blt.n	2e178 <sendPacket+0x64>
            break;
        sent += rc;
   2e15a:	693a      	ldr	r2, [r7, #16]
   2e15c:	697b      	ldr	r3, [r7, #20]
   2e15e:	18d3      	adds	r3, r2, r3
   2e160:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2e162:	693a      	ldr	r2, [r7, #16]
   2e164:	68bb      	ldr	r3, [r7, #8]
   2e166:	429a      	cmp	r2, r3
   2e168:	da07      	bge.n	2e17a <sendPacket+0x66>
   2e16a:	687b      	ldr	r3, [r7, #4]
   2e16c:	0018      	movs	r0, r3
   2e16e:	4b10      	ldr	r3, [pc, #64]	; (2e1b0 <sendPacket+0x9c>)
   2e170:	4798      	blx	r3
   2e172:	1e03      	subs	r3, r0, #0
   2e174:	d0da      	beq.n	2e12c <sendPacket+0x18>
   2e176:	e000      	b.n	2e17a <sendPacket+0x66>
            break;
   2e178:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2e17a:	693a      	ldr	r2, [r7, #16]
   2e17c:	68bb      	ldr	r3, [r7, #8]
   2e17e:	429a      	cmp	r2, r3
   2e180:	d10b      	bne.n	2e19a <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2e182:	68fb      	ldr	r3, [r7, #12]
   2e184:	3354      	adds	r3, #84	; 0x54
   2e186:	001a      	movs	r2, r3
   2e188:	68fb      	ldr	r3, [r7, #12]
   2e18a:	699b      	ldr	r3, [r3, #24]
   2e18c:	0019      	movs	r1, r3
   2e18e:	0010      	movs	r0, r2
   2e190:	4b08      	ldr	r3, [pc, #32]	; (2e1b4 <sendPacket+0xa0>)
   2e192:	4798      	blx	r3
        rc = SUCCESS;
   2e194:	2300      	movs	r3, #0
   2e196:	617b      	str	r3, [r7, #20]
   2e198:	e002      	b.n	2e1a0 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2e19a:	2301      	movs	r3, #1
   2e19c:	425b      	negs	r3, r3
   2e19e:	617b      	str	r3, [r7, #20]
    return rc;
   2e1a0:	697b      	ldr	r3, [r7, #20]
}
   2e1a2:	0018      	movs	r0, r3
   2e1a4:	46bd      	mov	sp, r7
   2e1a6:	b007      	add	sp, #28
   2e1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e1aa:	46c0      	nop			; (mov r8, r8)
   2e1ac:	0002ef75 	.word	0x0002ef75
   2e1b0:	0002eef9 	.word	0x0002eef9
   2e1b4:	0002ef4d 	.word	0x0002ef4d

0002e1b8 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2e1b8:	b580      	push	{r7, lr}
   2e1ba:	b086      	sub	sp, #24
   2e1bc:	af00      	add	r7, sp, #0
   2e1be:	60f8      	str	r0, [r7, #12]
   2e1c0:	60b9      	str	r1, [r7, #8]
   2e1c2:	607a      	str	r2, [r7, #4]
   2e1c4:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2e1c6:	68fb      	ldr	r3, [r7, #12]
   2e1c8:	68ba      	ldr	r2, [r7, #8]
   2e1ca:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e1cc:	2300      	movs	r3, #0
   2e1ce:	617b      	str	r3, [r7, #20]
   2e1d0:	e00a      	b.n	2e1e8 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2e1d2:	68fa      	ldr	r2, [r7, #12]
   2e1d4:	697b      	ldr	r3, [r7, #20]
   2e1d6:	3304      	adds	r3, #4
   2e1d8:	00db      	lsls	r3, r3, #3
   2e1da:	18d3      	adds	r3, r2, r3
   2e1dc:	3304      	adds	r3, #4
   2e1de:	2200      	movs	r2, #0
   2e1e0:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e1e2:	697b      	ldr	r3, [r7, #20]
   2e1e4:	3301      	adds	r3, #1
   2e1e6:	617b      	str	r3, [r7, #20]
   2e1e8:	697b      	ldr	r3, [r7, #20]
   2e1ea:	2b04      	cmp	r3, #4
   2e1ec:	ddf1      	ble.n	2e1d2 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2e1ee:	68fb      	ldr	r3, [r7, #12]
   2e1f0:	687a      	ldr	r2, [r7, #4]
   2e1f2:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2e1f4:	68fb      	ldr	r3, [r7, #12]
   2e1f6:	683a      	ldr	r2, [r7, #0]
   2e1f8:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2e1fa:	68fb      	ldr	r3, [r7, #12]
   2e1fc:	6a3a      	ldr	r2, [r7, #32]
   2e1fe:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2e200:	68fb      	ldr	r3, [r7, #12]
   2e202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e204:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2e206:	68fb      	ldr	r3, [r7, #12]
   2e208:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e20a:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2e20c:	68fb      	ldr	r3, [r7, #12]
   2e20e:	2200      	movs	r2, #0
   2e210:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2e212:	68fb      	ldr	r3, [r7, #12]
   2e214:	2200      	movs	r2, #0
   2e216:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2e218:	68fb      	ldr	r3, [r7, #12]
   2e21a:	2200      	movs	r2, #0
   2e21c:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2e21e:	68fb      	ldr	r3, [r7, #12]
   2e220:	2201      	movs	r2, #1
   2e222:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2e224:	68fb      	ldr	r3, [r7, #12]
   2e226:	3354      	adds	r3, #84	; 0x54
   2e228:	0018      	movs	r0, r3
   2e22a:	4b03      	ldr	r3, [pc, #12]	; (2e238 <MQTTClientInit+0x80>)
   2e22c:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2e22e:	46c0      	nop			; (mov r8, r8)
   2e230:	46bd      	mov	sp, r7
   2e232:	b006      	add	sp, #24
   2e234:	bd80      	pop	{r7, pc}
   2e236:	46c0      	nop			; (mov r8, r8)
   2e238:	0002ef9d 	.word	0x0002ef9d

0002e23c <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2e23c:	b590      	push	{r4, r7, lr}
   2e23e:	b08b      	sub	sp, #44	; 0x2c
   2e240:	af00      	add	r7, sp, #0
   2e242:	60f8      	str	r0, [r7, #12]
   2e244:	60b9      	str	r1, [r7, #8]
   2e246:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2e248:	2301      	movs	r3, #1
   2e24a:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2e24c:	2300      	movs	r3, #0
   2e24e:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2e250:	2304      	movs	r3, #4
   2e252:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2e254:	68bb      	ldr	r3, [r7, #8]
   2e256:	2200      	movs	r2, #0
   2e258:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2e25a:	2301      	movs	r3, #1
   2e25c:	425b      	negs	r3, r3
   2e25e:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2e260:	6a3b      	ldr	r3, [r7, #32]
   2e262:	3301      	adds	r3, #1
   2e264:	623b      	str	r3, [r7, #32]
   2e266:	6a3a      	ldr	r2, [r7, #32]
   2e268:	69fb      	ldr	r3, [r7, #28]
   2e26a:	429a      	cmp	r2, r3
   2e26c:	dd03      	ble.n	2e276 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2e26e:	2301      	movs	r3, #1
   2e270:	425b      	negs	r3, r3
   2e272:	61bb      	str	r3, [r7, #24]
            goto exit;
   2e274:	e026      	b.n	2e2c4 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2e276:	68fb      	ldr	r3, [r7, #12]
   2e278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e27a:	689c      	ldr	r4, [r3, #8]
   2e27c:	68fb      	ldr	r3, [r7, #12]
   2e27e:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2e280:	687b      	ldr	r3, [r7, #4]
   2e282:	2217      	movs	r2, #23
   2e284:	18b9      	adds	r1, r7, r2
   2e286:	2201      	movs	r2, #1
   2e288:	47a0      	blx	r4
   2e28a:	0003      	movs	r3, r0
   2e28c:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2e28e:	69bb      	ldr	r3, [r7, #24]
   2e290:	2b01      	cmp	r3, #1
   2e292:	d116      	bne.n	2e2c2 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2e294:	68bb      	ldr	r3, [r7, #8]
   2e296:	681a      	ldr	r2, [r3, #0]
   2e298:	2317      	movs	r3, #23
   2e29a:	18fb      	adds	r3, r7, r3
   2e29c:	781b      	ldrb	r3, [r3, #0]
   2e29e:	0019      	movs	r1, r3
   2e2a0:	237f      	movs	r3, #127	; 0x7f
   2e2a2:	400b      	ands	r3, r1
   2e2a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2e2a6:	434b      	muls	r3, r1
   2e2a8:	18d2      	adds	r2, r2, r3
   2e2aa:	68bb      	ldr	r3, [r7, #8]
   2e2ac:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2e2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e2b0:	01db      	lsls	r3, r3, #7
   2e2b2:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2e2b4:	2317      	movs	r3, #23
   2e2b6:	18fb      	adds	r3, r7, r3
   2e2b8:	781b      	ldrb	r3, [r3, #0]
   2e2ba:	b25b      	sxtb	r3, r3
   2e2bc:	2b00      	cmp	r3, #0
   2e2be:	dbcc      	blt.n	2e25a <decodePacket+0x1e>
   2e2c0:	e000      	b.n	2e2c4 <decodePacket+0x88>
            goto exit;
   2e2c2:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2e2c4:	6a3b      	ldr	r3, [r7, #32]
}
   2e2c6:	0018      	movs	r0, r3
   2e2c8:	46bd      	mov	sp, r7
   2e2ca:	b00b      	add	sp, #44	; 0x2c
   2e2cc:	bd90      	pop	{r4, r7, pc}
	...

0002e2d0 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2e2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e2d2:	46c6      	mov	lr, r8
   2e2d4:	b500      	push	{lr}
   2e2d6:	b086      	sub	sp, #24
   2e2d8:	af00      	add	r7, sp, #0
   2e2da:	6078      	str	r0, [r7, #4]
   2e2dc:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2e2de:	2301      	movs	r3, #1
   2e2e0:	425b      	negs	r3, r3
   2e2e2:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2e2e4:	2300      	movs	r3, #0
   2e2e6:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2e2e8:	2300      	movs	r3, #0
   2e2ea:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2e2ec:	2300      	movs	r3, #0
   2e2ee:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2e2f0:	687b      	ldr	r3, [r7, #4]
   2e2f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e2f4:	689c      	ldr	r4, [r3, #8]
   2e2f6:	687b      	ldr	r3, [r7, #4]
   2e2f8:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e2fa:	687b      	ldr	r3, [r7, #4]
   2e2fc:	695e      	ldr	r6, [r3, #20]
   2e2fe:	683b      	ldr	r3, [r7, #0]
   2e300:	0018      	movs	r0, r3
   2e302:	4b2b      	ldr	r3, [pc, #172]	; (2e3b0 <readPacket+0xe0>)
   2e304:	4798      	blx	r3
   2e306:	0003      	movs	r3, r0
   2e308:	2201      	movs	r2, #1
   2e30a:	0031      	movs	r1, r6
   2e30c:	0028      	movs	r0, r5
   2e30e:	47a0      	blx	r4
   2e310:	0003      	movs	r3, r0
   2e312:	2b01      	cmp	r3, #1
   2e314:	d141      	bne.n	2e39a <readPacket+0xca>
        goto exit;

    len = 1;
   2e316:	2301      	movs	r3, #1
   2e318:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2e31a:	683b      	ldr	r3, [r7, #0]
   2e31c:	0018      	movs	r0, r3
   2e31e:	4b24      	ldr	r3, [pc, #144]	; (2e3b0 <readPacket+0xe0>)
   2e320:	4798      	blx	r3
   2e322:	0002      	movs	r2, r0
   2e324:	2308      	movs	r3, #8
   2e326:	18f9      	adds	r1, r7, r3
   2e328:	687b      	ldr	r3, [r7, #4]
   2e32a:	0018      	movs	r0, r3
   2e32c:	4b21      	ldr	r3, [pc, #132]	; (2e3b4 <readPacket+0xe4>)
   2e32e:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2e330:	687b      	ldr	r3, [r7, #4]
   2e332:	695b      	ldr	r3, [r3, #20]
   2e334:	3301      	adds	r3, #1
   2e336:	68ba      	ldr	r2, [r7, #8]
   2e338:	0011      	movs	r1, r2
   2e33a:	0018      	movs	r0, r3
   2e33c:	4b1e      	ldr	r3, [pc, #120]	; (2e3b8 <readPacket+0xe8>)
   2e33e:	4798      	blx	r3
   2e340:	0002      	movs	r2, r0
   2e342:	693b      	ldr	r3, [r7, #16]
   2e344:	189b      	adds	r3, r3, r2
   2e346:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2e348:	68bb      	ldr	r3, [r7, #8]
   2e34a:	2b00      	cmp	r3, #0
   2e34c:	dd17      	ble.n	2e37e <readPacket+0xae>
   2e34e:	687b      	ldr	r3, [r7, #4]
   2e350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e352:	689c      	ldr	r4, [r3, #8]
   2e354:	687b      	ldr	r3, [r7, #4]
   2e356:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e358:	687b      	ldr	r3, [r7, #4]
   2e35a:	695a      	ldr	r2, [r3, #20]
   2e35c:	693b      	ldr	r3, [r7, #16]
   2e35e:	18d6      	adds	r6, r2, r3
   2e360:	68bb      	ldr	r3, [r7, #8]
   2e362:	4698      	mov	r8, r3
   2e364:	683b      	ldr	r3, [r7, #0]
   2e366:	0018      	movs	r0, r3
   2e368:	4b11      	ldr	r3, [pc, #68]	; (2e3b0 <readPacket+0xe0>)
   2e36a:	4798      	blx	r3
   2e36c:	0003      	movs	r3, r0
   2e36e:	4642      	mov	r2, r8
   2e370:	0031      	movs	r1, r6
   2e372:	0028      	movs	r0, r5
   2e374:	47a0      	blx	r4
   2e376:	0002      	movs	r2, r0
   2e378:	68bb      	ldr	r3, [r7, #8]
   2e37a:	429a      	cmp	r2, r3
   2e37c:	d10f      	bne.n	2e39e <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2e37e:	687b      	ldr	r3, [r7, #4]
   2e380:	695b      	ldr	r3, [r3, #20]
   2e382:	781a      	ldrb	r2, [r3, #0]
   2e384:	230c      	movs	r3, #12
   2e386:	18fb      	adds	r3, r7, r3
   2e388:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2e38a:	230c      	movs	r3, #12
   2e38c:	18fb      	adds	r3, r7, r3
   2e38e:	781b      	ldrb	r3, [r3, #0]
   2e390:	061b      	lsls	r3, r3, #24
   2e392:	0f1b      	lsrs	r3, r3, #28
   2e394:	b2db      	uxtb	r3, r3
   2e396:	617b      	str	r3, [r7, #20]
   2e398:	e002      	b.n	2e3a0 <readPacket+0xd0>
        goto exit;
   2e39a:	46c0      	nop			; (mov r8, r8)
   2e39c:	e000      	b.n	2e3a0 <readPacket+0xd0>
        goto exit;
   2e39e:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2e3a0:	697b      	ldr	r3, [r7, #20]
}
   2e3a2:	0018      	movs	r0, r3
   2e3a4:	46bd      	mov	sp, r7
   2e3a6:	b006      	add	sp, #24
   2e3a8:	bc04      	pop	{r2}
   2e3aa:	4690      	mov	r8, r2
   2e3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e3ae:	46c0      	nop			; (mov r8, r8)
   2e3b0:	0002ef75 	.word	0x0002ef75
   2e3b4:	0002e23d 	.word	0x0002e23d
   2e3b8:	0002fd4d 	.word	0x0002fd4d

0002e3bc <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2e3bc:	b580      	push	{r7, lr}
   2e3be:	b086      	sub	sp, #24
   2e3c0:	af00      	add	r7, sp, #0
   2e3c2:	6078      	str	r0, [r7, #4]
   2e3c4:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2e3c6:	687b      	ldr	r3, [r7, #4]
   2e3c8:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2e3ca:	683b      	ldr	r3, [r7, #0]
   2e3cc:	689b      	ldr	r3, [r3, #8]
   2e3ce:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2e3d0:	683b      	ldr	r3, [r7, #0]
   2e3d2:	685b      	ldr	r3, [r3, #4]
   2e3d4:	001a      	movs	r2, r3
   2e3d6:	693b      	ldr	r3, [r7, #16]
   2e3d8:	189b      	adds	r3, r3, r2
   2e3da:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2e3dc:	e039      	b.n	2e452 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2e3de:	693b      	ldr	r3, [r7, #16]
   2e3e0:	781b      	ldrb	r3, [r3, #0]
   2e3e2:	2b2f      	cmp	r3, #47	; 0x2f
   2e3e4:	d103      	bne.n	2e3ee <isTopicMatched+0x32>
   2e3e6:	697b      	ldr	r3, [r7, #20]
   2e3e8:	781b      	ldrb	r3, [r3, #0]
   2e3ea:	2b2f      	cmp	r3, #47	; 0x2f
   2e3ec:	d13a      	bne.n	2e464 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2e3ee:	697b      	ldr	r3, [r7, #20]
   2e3f0:	781b      	ldrb	r3, [r3, #0]
   2e3f2:	2b2b      	cmp	r3, #43	; 0x2b
   2e3f4:	d009      	beq.n	2e40a <isTopicMatched+0x4e>
   2e3f6:	697b      	ldr	r3, [r7, #20]
   2e3f8:	781b      	ldrb	r3, [r3, #0]
   2e3fa:	2b23      	cmp	r3, #35	; 0x23
   2e3fc:	d005      	beq.n	2e40a <isTopicMatched+0x4e>
   2e3fe:	697b      	ldr	r3, [r7, #20]
   2e400:	781a      	ldrb	r2, [r3, #0]
   2e402:	693b      	ldr	r3, [r7, #16]
   2e404:	781b      	ldrb	r3, [r3, #0]
   2e406:	429a      	cmp	r2, r3
   2e408:	d12e      	bne.n	2e468 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2e40a:	697b      	ldr	r3, [r7, #20]
   2e40c:	781b      	ldrb	r3, [r3, #0]
   2e40e:	2b2b      	cmp	r3, #43	; 0x2b
   2e410:	d112      	bne.n	2e438 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2e412:	693b      	ldr	r3, [r7, #16]
   2e414:	3301      	adds	r3, #1
   2e416:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2e418:	e005      	b.n	2e426 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2e41a:	693b      	ldr	r3, [r7, #16]
   2e41c:	3301      	adds	r3, #1
   2e41e:	613b      	str	r3, [r7, #16]
   2e420:	693b      	ldr	r3, [r7, #16]
   2e422:	3301      	adds	r3, #1
   2e424:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2e426:	68fa      	ldr	r2, [r7, #12]
   2e428:	68bb      	ldr	r3, [r7, #8]
   2e42a:	429a      	cmp	r2, r3
   2e42c:	d20b      	bcs.n	2e446 <isTopicMatched+0x8a>
   2e42e:	68fb      	ldr	r3, [r7, #12]
   2e430:	781b      	ldrb	r3, [r3, #0]
   2e432:	2b2f      	cmp	r3, #47	; 0x2f
   2e434:	d1f1      	bne.n	2e41a <isTopicMatched+0x5e>
   2e436:	e006      	b.n	2e446 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2e438:	697b      	ldr	r3, [r7, #20]
   2e43a:	781b      	ldrb	r3, [r3, #0]
   2e43c:	2b23      	cmp	r3, #35	; 0x23
   2e43e:	d102      	bne.n	2e446 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2e440:	68bb      	ldr	r3, [r7, #8]
   2e442:	3b01      	subs	r3, #1
   2e444:	613b      	str	r3, [r7, #16]
        curf++;
   2e446:	697b      	ldr	r3, [r7, #20]
   2e448:	3301      	adds	r3, #1
   2e44a:	617b      	str	r3, [r7, #20]
        curn++;
   2e44c:	693b      	ldr	r3, [r7, #16]
   2e44e:	3301      	adds	r3, #1
   2e450:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2e452:	697b      	ldr	r3, [r7, #20]
   2e454:	781b      	ldrb	r3, [r3, #0]
   2e456:	2b00      	cmp	r3, #0
   2e458:	d007      	beq.n	2e46a <isTopicMatched+0xae>
   2e45a:	693a      	ldr	r2, [r7, #16]
   2e45c:	68bb      	ldr	r3, [r7, #8]
   2e45e:	429a      	cmp	r2, r3
   2e460:	d3bd      	bcc.n	2e3de <isTopicMatched+0x22>
   2e462:	e002      	b.n	2e46a <isTopicMatched+0xae>
            break;
   2e464:	46c0      	nop			; (mov r8, r8)
   2e466:	e000      	b.n	2e46a <isTopicMatched+0xae>
            break;
   2e468:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2e46a:	693a      	ldr	r2, [r7, #16]
   2e46c:	68bb      	ldr	r3, [r7, #8]
   2e46e:	429a      	cmp	r2, r3
   2e470:	d105      	bne.n	2e47e <isTopicMatched+0xc2>
   2e472:	697b      	ldr	r3, [r7, #20]
   2e474:	781b      	ldrb	r3, [r3, #0]
   2e476:	2b00      	cmp	r3, #0
   2e478:	d101      	bne.n	2e47e <isTopicMatched+0xc2>
   2e47a:	2301      	movs	r3, #1
   2e47c:	e000      	b.n	2e480 <isTopicMatched+0xc4>
   2e47e:	2300      	movs	r3, #0
   2e480:	b2db      	uxtb	r3, r3
}
   2e482:	0018      	movs	r0, r3
   2e484:	46bd      	mov	sp, r7
   2e486:	b006      	add	sp, #24
   2e488:	bd80      	pop	{r7, pc}
	...

0002e48c <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2e48c:	b580      	push	{r7, lr}
   2e48e:	b08a      	sub	sp, #40	; 0x28
   2e490:	af00      	add	r7, sp, #0
   2e492:	60f8      	str	r0, [r7, #12]
   2e494:	60b9      	str	r1, [r7, #8]
   2e496:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2e498:	2301      	movs	r3, #1
   2e49a:	425b      	negs	r3, r3
   2e49c:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e49e:	2300      	movs	r3, #0
   2e4a0:	627b      	str	r3, [r7, #36]	; 0x24
   2e4a2:	e044      	b.n	2e52e <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2e4a4:	68fa      	ldr	r2, [r7, #12]
   2e4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e4a8:	3304      	adds	r3, #4
   2e4aa:	00db      	lsls	r3, r3, #3
   2e4ac:	18d3      	adds	r3, r2, r3
   2e4ae:	3304      	adds	r3, #4
   2e4b0:	681b      	ldr	r3, [r3, #0]
   2e4b2:	2b00      	cmp	r3, #0
   2e4b4:	d038      	beq.n	2e528 <deliverMessage+0x9c>
   2e4b6:	68fa      	ldr	r2, [r7, #12]
   2e4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e4ba:	3304      	adds	r3, #4
   2e4bc:	00db      	lsls	r3, r3, #3
   2e4be:	18d3      	adds	r3, r2, r3
   2e4c0:	3304      	adds	r3, #4
   2e4c2:	681a      	ldr	r2, [r3, #0]
   2e4c4:	68bb      	ldr	r3, [r7, #8]
   2e4c6:	0011      	movs	r1, r2
   2e4c8:	0018      	movs	r0, r3
   2e4ca:	4b28      	ldr	r3, [pc, #160]	; (2e56c <deliverMessage+0xe0>)
   2e4cc:	4798      	blx	r3
   2e4ce:	1e03      	subs	r3, r0, #0
   2e4d0:	d10d      	bne.n	2e4ee <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2e4d2:	68fa      	ldr	r2, [r7, #12]
   2e4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e4d6:	3304      	adds	r3, #4
   2e4d8:	00db      	lsls	r3, r3, #3
   2e4da:	18d3      	adds	r3, r2, r3
   2e4dc:	3304      	adds	r3, #4
   2e4de:	681b      	ldr	r3, [r3, #0]
   2e4e0:	68ba      	ldr	r2, [r7, #8]
   2e4e2:	0011      	movs	r1, r2
   2e4e4:	0018      	movs	r0, r3
   2e4e6:	4b22      	ldr	r3, [pc, #136]	; (2e570 <deliverMessage+0xe4>)
   2e4e8:	4798      	blx	r3
   2e4ea:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2e4ec:	d01c      	beq.n	2e528 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2e4ee:	68fa      	ldr	r2, [r7, #12]
   2e4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e4f2:	3304      	adds	r3, #4
   2e4f4:	00db      	lsls	r3, r3, #3
   2e4f6:	18d3      	adds	r3, r2, r3
   2e4f8:	3308      	adds	r3, #8
   2e4fa:	681b      	ldr	r3, [r3, #0]
   2e4fc:	2b00      	cmp	r3, #0
   2e4fe:	d013      	beq.n	2e528 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2e500:	687a      	ldr	r2, [r7, #4]
   2e502:	68b9      	ldr	r1, [r7, #8]
   2e504:	2318      	movs	r3, #24
   2e506:	18fb      	adds	r3, r7, r3
   2e508:	0018      	movs	r0, r3
   2e50a:	4b1a      	ldr	r3, [pc, #104]	; (2e574 <deliverMessage+0xe8>)
   2e50c:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2e50e:	68fa      	ldr	r2, [r7, #12]
   2e510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e512:	3304      	adds	r3, #4
   2e514:	00db      	lsls	r3, r3, #3
   2e516:	18d3      	adds	r3, r2, r3
   2e518:	3308      	adds	r3, #8
   2e51a:	681b      	ldr	r3, [r3, #0]
   2e51c:	2218      	movs	r2, #24
   2e51e:	18ba      	adds	r2, r7, r2
   2e520:	0010      	movs	r0, r2
   2e522:	4798      	blx	r3
                rc = SUCCESS;
   2e524:	2300      	movs	r3, #0
   2e526:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e52a:	3301      	adds	r3, #1
   2e52c:	627b      	str	r3, [r7, #36]	; 0x24
   2e52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e530:	2b04      	cmp	r3, #4
   2e532:	ddb7      	ble.n	2e4a4 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2e534:	6a3b      	ldr	r3, [r7, #32]
   2e536:	3301      	adds	r3, #1
   2e538:	d112      	bne.n	2e560 <deliverMessage+0xd4>
   2e53a:	68fb      	ldr	r3, [r7, #12]
   2e53c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e53e:	2b00      	cmp	r3, #0
   2e540:	d00e      	beq.n	2e560 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2e542:	687a      	ldr	r2, [r7, #4]
   2e544:	68b9      	ldr	r1, [r7, #8]
   2e546:	2310      	movs	r3, #16
   2e548:	18fb      	adds	r3, r7, r3
   2e54a:	0018      	movs	r0, r3
   2e54c:	4b09      	ldr	r3, [pc, #36]	; (2e574 <deliverMessage+0xe8>)
   2e54e:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2e550:	68fb      	ldr	r3, [r7, #12]
   2e552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e554:	2210      	movs	r2, #16
   2e556:	18ba      	adds	r2, r7, r2
   2e558:	0010      	movs	r0, r2
   2e55a:	4798      	blx	r3
        rc = SUCCESS;
   2e55c:	2300      	movs	r3, #0
   2e55e:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2e560:	6a3b      	ldr	r3, [r7, #32]
}
   2e562:	0018      	movs	r0, r3
   2e564:	46bd      	mov	sp, r7
   2e566:	b00a      	add	sp, #40	; 0x28
   2e568:	bd80      	pop	{r7, pc}
   2e56a:	46c0      	nop			; (mov r8, r8)
   2e56c:	00030161 	.word	0x00030161
   2e570:	0002e3bd 	.word	0x0002e3bd
   2e574:	0002e0c5 	.word	0x0002e0c5

0002e578 <keepalive>:


int keepalive(MQTTClient* c)
{
   2e578:	b580      	push	{r7, lr}
   2e57a:	b088      	sub	sp, #32
   2e57c:	af00      	add	r7, sp, #0
   2e57e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2e580:	2301      	movs	r3, #1
   2e582:	425b      	negs	r3, r3
   2e584:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2e586:	687b      	ldr	r3, [r7, #4]
   2e588:	699b      	ldr	r3, [r3, #24]
   2e58a:	2b00      	cmp	r3, #0
   2e58c:	d102      	bne.n	2e594 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2e58e:	2300      	movs	r3, #0
   2e590:	61fb      	str	r3, [r7, #28]
        goto exit;
   2e592:	e033      	b.n	2e5fc <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2e594:	687b      	ldr	r3, [r7, #4]
   2e596:	3354      	adds	r3, #84	; 0x54
   2e598:	0018      	movs	r0, r3
   2e59a:	4b1b      	ldr	r3, [pc, #108]	; (2e608 <keepalive+0x90>)
   2e59c:	4798      	blx	r3
   2e59e:	1e03      	subs	r3, r0, #0
   2e5a0:	d02c      	beq.n	2e5fc <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2e5a2:	687b      	ldr	r3, [r7, #4]
   2e5a4:	7f1b      	ldrb	r3, [r3, #28]
   2e5a6:	2b00      	cmp	r3, #0
   2e5a8:	d128      	bne.n	2e5fc <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2e5aa:	230c      	movs	r3, #12
   2e5ac:	18fb      	adds	r3, r7, r3
   2e5ae:	0018      	movs	r0, r3
   2e5b0:	4b16      	ldr	r3, [pc, #88]	; (2e60c <keepalive+0x94>)
   2e5b2:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2e5b4:	23fa      	movs	r3, #250	; 0xfa
   2e5b6:	009a      	lsls	r2, r3, #2
   2e5b8:	230c      	movs	r3, #12
   2e5ba:	18fb      	adds	r3, r7, r3
   2e5bc:	0011      	movs	r1, r2
   2e5be:	0018      	movs	r0, r3
   2e5c0:	4b13      	ldr	r3, [pc, #76]	; (2e610 <keepalive+0x98>)
   2e5c2:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2e5c4:	687b      	ldr	r3, [r7, #4]
   2e5c6:	691a      	ldr	r2, [r3, #16]
   2e5c8:	687b      	ldr	r3, [r7, #4]
   2e5ca:	689b      	ldr	r3, [r3, #8]
   2e5cc:	0019      	movs	r1, r3
   2e5ce:	0010      	movs	r0, r2
   2e5d0:	4b10      	ldr	r3, [pc, #64]	; (2e614 <keepalive+0x9c>)
   2e5d2:	4798      	blx	r3
   2e5d4:	0003      	movs	r3, r0
   2e5d6:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2e5d8:	69bb      	ldr	r3, [r7, #24]
   2e5da:	2b00      	cmp	r3, #0
   2e5dc:	dd0e      	ble.n	2e5fc <keepalive+0x84>
   2e5de:	230c      	movs	r3, #12
   2e5e0:	18fa      	adds	r2, r7, r3
   2e5e2:	69b9      	ldr	r1, [r7, #24]
   2e5e4:	687b      	ldr	r3, [r7, #4]
   2e5e6:	0018      	movs	r0, r3
   2e5e8:	4b0b      	ldr	r3, [pc, #44]	; (2e618 <keepalive+0xa0>)
   2e5ea:	4798      	blx	r3
   2e5ec:	0003      	movs	r3, r0
   2e5ee:	61fb      	str	r3, [r7, #28]
   2e5f0:	69fb      	ldr	r3, [r7, #28]
   2e5f2:	2b00      	cmp	r3, #0
   2e5f4:	d102      	bne.n	2e5fc <keepalive+0x84>
                c->ping_outstanding = 1;
   2e5f6:	687b      	ldr	r3, [r7, #4]
   2e5f8:	2201      	movs	r2, #1
   2e5fa:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2e5fc:	69fb      	ldr	r3, [r7, #28]
}
   2e5fe:	0018      	movs	r0, r3
   2e600:	46bd      	mov	sp, r7
   2e602:	b008      	add	sp, #32
   2e604:	bd80      	pop	{r7, pc}
   2e606:	46c0      	nop			; (mov r8, r8)
   2e608:	0002eef9 	.word	0x0002eef9
   2e60c:	0002ef9d 	.word	0x0002ef9d
   2e610:	0002ef25 	.word	0x0002ef25
   2e614:	0002fb71 	.word	0x0002fb71
   2e618:	0002e115 	.word	0x0002e115

0002e61c <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2e61c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e61e:	b095      	sub	sp, #84	; 0x54
   2e620:	af06      	add	r7, sp, #24
   2e622:	6078      	str	r0, [r7, #4]
   2e624:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2e626:	683a      	ldr	r2, [r7, #0]
   2e628:	687b      	ldr	r3, [r7, #4]
   2e62a:	0011      	movs	r1, r2
   2e62c:	0018      	movs	r0, r3
   2e62e:	4b70      	ldr	r3, [pc, #448]	; (2e7f0 <cycle+0x1d4>)
   2e630:	4798      	blx	r3
   2e632:	0002      	movs	r2, r0
   2e634:	232e      	movs	r3, #46	; 0x2e
   2e636:	18fb      	adds	r3, r7, r3
   2e638:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2e63a:	2300      	movs	r3, #0
   2e63c:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2e63e:	2300      	movs	r3, #0
   2e640:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2e642:	232e      	movs	r3, #46	; 0x2e
   2e644:	18fb      	adds	r3, r7, r3
   2e646:	881b      	ldrh	r3, [r3, #0]
   2e648:	2b0d      	cmp	r3, #13
   2e64a:	d900      	bls.n	2e64e <cycle+0x32>
   2e64c:	e0bd      	b.n	2e7ca <cycle+0x1ae>
   2e64e:	009a      	lsls	r2, r3, #2
   2e650:	4b68      	ldr	r3, [pc, #416]	; (2e7f4 <cycle+0x1d8>)
   2e652:	18d3      	adds	r3, r2, r3
   2e654:	681b      	ldr	r3, [r3, #0]
   2e656:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2e658:	687b      	ldr	r3, [r7, #4]
   2e65a:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2e65c:	687b      	ldr	r3, [r7, #4]
   2e65e:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2e660:	001e      	movs	r6, r3
   2e662:	2310      	movs	r3, #16
   2e664:	18fb      	adds	r3, r7, r3
   2e666:	1d1d      	adds	r5, r3, #4
   2e668:	2310      	movs	r3, #16
   2e66a:	18fb      	adds	r3, r7, r3
   2e66c:	1c5c      	adds	r4, r3, #1
   2e66e:	230c      	movs	r3, #12
   2e670:	18f9      	adds	r1, r7, r3
   2e672:	2310      	movs	r3, #16
   2e674:	18fb      	adds	r3, r7, r3
   2e676:	1c98      	adds	r0, r3, #2
   2e678:	9604      	str	r6, [sp, #16]
   2e67a:	9203      	str	r2, [sp, #12]
   2e67c:	2310      	movs	r3, #16
   2e67e:	18fb      	adds	r3, r7, r3
   2e680:	330c      	adds	r3, #12
   2e682:	9302      	str	r3, [sp, #8]
   2e684:	2310      	movs	r3, #16
   2e686:	18fb      	adds	r3, r7, r3
   2e688:	3308      	adds	r3, #8
   2e68a:	9301      	str	r3, [sp, #4]
   2e68c:	2320      	movs	r3, #32
   2e68e:	18fb      	adds	r3, r7, r3
   2e690:	9300      	str	r3, [sp, #0]
   2e692:	002b      	movs	r3, r5
   2e694:	0022      	movs	r2, r4
   2e696:	4c58      	ldr	r4, [pc, #352]	; (2e7f8 <cycle+0x1dc>)
   2e698:	47a0      	blx	r4
   2e69a:	0003      	movs	r3, r0
   2e69c:	2b01      	cmp	r3, #1
   2e69e:	d000      	beq.n	2e6a2 <cycle+0x86>
   2e6a0:	e098      	b.n	2e7d4 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2e6a2:	68fb      	ldr	r3, [r7, #12]
   2e6a4:	b2da      	uxtb	r2, r3
   2e6a6:	2310      	movs	r3, #16
   2e6a8:	18fb      	adds	r3, r7, r3
   2e6aa:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2e6ac:	2310      	movs	r3, #16
   2e6ae:	18fa      	adds	r2, r7, r3
   2e6b0:	2320      	movs	r3, #32
   2e6b2:	18f9      	adds	r1, r7, r3
   2e6b4:	687b      	ldr	r3, [r7, #4]
   2e6b6:	0018      	movs	r0, r3
   2e6b8:	4b50      	ldr	r3, [pc, #320]	; (2e7fc <cycle+0x1e0>)
   2e6ba:	4798      	blx	r3
            if (msg.qos != QOS0)
   2e6bc:	2310      	movs	r3, #16
   2e6be:	18fb      	adds	r3, r7, r3
   2e6c0:	781b      	ldrb	r3, [r3, #0]
   2e6c2:	2b00      	cmp	r3, #0
   2e6c4:	d100      	bne.n	2e6c8 <cycle+0xac>
   2e6c6:	e07d      	b.n	2e7c4 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2e6c8:	2310      	movs	r3, #16
   2e6ca:	18fb      	adds	r3, r7, r3
   2e6cc:	781b      	ldrb	r3, [r3, #0]
   2e6ce:	2b01      	cmp	r3, #1
   2e6d0:	d10f      	bne.n	2e6f2 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2e6d2:	687b      	ldr	r3, [r7, #4]
   2e6d4:	6918      	ldr	r0, [r3, #16]
   2e6d6:	687b      	ldr	r3, [r7, #4]
   2e6d8:	689b      	ldr	r3, [r3, #8]
   2e6da:	0019      	movs	r1, r3
   2e6dc:	2310      	movs	r3, #16
   2e6de:	18fb      	adds	r3, r7, r3
   2e6e0:	889b      	ldrh	r3, [r3, #4]
   2e6e2:	9300      	str	r3, [sp, #0]
   2e6e4:	2300      	movs	r3, #0
   2e6e6:	2204      	movs	r2, #4
   2e6e8:	4c45      	ldr	r4, [pc, #276]	; (2e800 <cycle+0x1e4>)
   2e6ea:	47a0      	blx	r4
   2e6ec:	0003      	movs	r3, r0
   2e6ee:	637b      	str	r3, [r7, #52]	; 0x34
   2e6f0:	e013      	b.n	2e71a <cycle+0xfe>
                else if (msg.qos == QOS2)
   2e6f2:	2310      	movs	r3, #16
   2e6f4:	18fb      	adds	r3, r7, r3
   2e6f6:	781b      	ldrb	r3, [r3, #0]
   2e6f8:	2b02      	cmp	r3, #2
   2e6fa:	d10e      	bne.n	2e71a <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2e6fc:	687b      	ldr	r3, [r7, #4]
   2e6fe:	6918      	ldr	r0, [r3, #16]
   2e700:	687b      	ldr	r3, [r7, #4]
   2e702:	689b      	ldr	r3, [r3, #8]
   2e704:	0019      	movs	r1, r3
   2e706:	2310      	movs	r3, #16
   2e708:	18fb      	adds	r3, r7, r3
   2e70a:	889b      	ldrh	r3, [r3, #4]
   2e70c:	9300      	str	r3, [sp, #0]
   2e70e:	2300      	movs	r3, #0
   2e710:	2205      	movs	r2, #5
   2e712:	4c3b      	ldr	r4, [pc, #236]	; (2e800 <cycle+0x1e4>)
   2e714:	47a0      	blx	r4
   2e716:	0003      	movs	r3, r0
   2e718:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2e71a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e71c:	2b00      	cmp	r3, #0
   2e71e:	dc03      	bgt.n	2e728 <cycle+0x10c>
                    rc = FAILURE;
   2e720:	2301      	movs	r3, #1
   2e722:	425b      	negs	r3, r3
   2e724:	633b      	str	r3, [r7, #48]	; 0x30
   2e726:	e007      	b.n	2e738 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2e728:	683a      	ldr	r2, [r7, #0]
   2e72a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2e72c:	687b      	ldr	r3, [r7, #4]
   2e72e:	0018      	movs	r0, r3
   2e730:	4b34      	ldr	r3, [pc, #208]	; (2e804 <cycle+0x1e8>)
   2e732:	4798      	blx	r3
   2e734:	0003      	movs	r3, r0
   2e736:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2e738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e73a:	3301      	adds	r3, #1
   2e73c:	d142      	bne.n	2e7c4 <cycle+0x1a8>
                    goto exit; // there was a problem
   2e73e:	46c0      	nop			; (mov r8, r8)
   2e740:	e049      	b.n	2e7d6 <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2e742:	687b      	ldr	r3, [r7, #4]
   2e744:	695c      	ldr	r4, [r3, #20]
   2e746:	687b      	ldr	r3, [r7, #4]
   2e748:	68db      	ldr	r3, [r3, #12]
   2e74a:	220a      	movs	r2, #10
   2e74c:	18ba      	adds	r2, r7, r2
   2e74e:	2109      	movs	r1, #9
   2e750:	1879      	adds	r1, r7, r1
   2e752:	2008      	movs	r0, #8
   2e754:	1838      	adds	r0, r7, r0
   2e756:	9300      	str	r3, [sp, #0]
   2e758:	0023      	movs	r3, r4
   2e75a:	4c2b      	ldr	r4, [pc, #172]	; (2e808 <cycle+0x1ec>)
   2e75c:	47a0      	blx	r4
   2e75e:	0003      	movs	r3, r0
   2e760:	2b01      	cmp	r3, #1
   2e762:	d003      	beq.n	2e76c <cycle+0x150>
                rc = FAILURE;
   2e764:	2301      	movs	r3, #1
   2e766:	425b      	negs	r3, r3
   2e768:	633b      	str	r3, [r7, #48]	; 0x30
   2e76a:	e023      	b.n	2e7b4 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2e76c:	687b      	ldr	r3, [r7, #4]
   2e76e:	6918      	ldr	r0, [r3, #16]
   2e770:	687b      	ldr	r3, [r7, #4]
   2e772:	689b      	ldr	r3, [r3, #8]
   2e774:	0019      	movs	r1, r3
   2e776:	230a      	movs	r3, #10
   2e778:	18fb      	adds	r3, r7, r3
   2e77a:	881b      	ldrh	r3, [r3, #0]
   2e77c:	9300      	str	r3, [sp, #0]
   2e77e:	2300      	movs	r3, #0
   2e780:	2206      	movs	r2, #6
   2e782:	4c1f      	ldr	r4, [pc, #124]	; (2e800 <cycle+0x1e4>)
   2e784:	47a0      	blx	r4
   2e786:	0003      	movs	r3, r0
   2e788:	637b      	str	r3, [r7, #52]	; 0x34
   2e78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e78c:	2b00      	cmp	r3, #0
   2e78e:	dc03      	bgt.n	2e798 <cycle+0x17c>
                rc = FAILURE;
   2e790:	2301      	movs	r3, #1
   2e792:	425b      	negs	r3, r3
   2e794:	633b      	str	r3, [r7, #48]	; 0x30
   2e796:	e00d      	b.n	2e7b4 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2e798:	683a      	ldr	r2, [r7, #0]
   2e79a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2e79c:	687b      	ldr	r3, [r7, #4]
   2e79e:	0018      	movs	r0, r3
   2e7a0:	4b18      	ldr	r3, [pc, #96]	; (2e804 <cycle+0x1e8>)
   2e7a2:	4798      	blx	r3
   2e7a4:	0003      	movs	r3, r0
   2e7a6:	633b      	str	r3, [r7, #48]	; 0x30
   2e7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e7aa:	2b00      	cmp	r3, #0
   2e7ac:	d002      	beq.n	2e7b4 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2e7ae:	2301      	movs	r3, #1
   2e7b0:	425b      	negs	r3, r3
   2e7b2:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2e7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e7b6:	3301      	adds	r3, #1
   2e7b8:	d106      	bne.n	2e7c8 <cycle+0x1ac>
                goto exit; // there was a problem
   2e7ba:	e00c      	b.n	2e7d6 <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2e7bc:	687b      	ldr	r3, [r7, #4]
   2e7be:	2200      	movs	r2, #0
   2e7c0:	771a      	strb	r2, [r3, #28]
            break;
   2e7c2:	e002      	b.n	2e7ca <cycle+0x1ae>
            break;
   2e7c4:	46c0      	nop			; (mov r8, r8)
   2e7c6:	e000      	b.n	2e7ca <cycle+0x1ae>
            break;
   2e7c8:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2e7ca:	687b      	ldr	r3, [r7, #4]
   2e7cc:	0018      	movs	r0, r3
   2e7ce:	4b0f      	ldr	r3, [pc, #60]	; (2e80c <cycle+0x1f0>)
   2e7d0:	4798      	blx	r3
   2e7d2:	e000      	b.n	2e7d6 <cycle+0x1ba>
                goto exit;
   2e7d4:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2e7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e7d8:	2b00      	cmp	r3, #0
   2e7da:	d103      	bne.n	2e7e4 <cycle+0x1c8>
        rc = packet_type;
   2e7dc:	232e      	movs	r3, #46	; 0x2e
   2e7de:	18fb      	adds	r3, r7, r3
   2e7e0:	881b      	ldrh	r3, [r3, #0]
   2e7e2:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2e7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2e7e6:	0018      	movs	r0, r3
   2e7e8:	46bd      	mov	sp, r7
   2e7ea:	b00f      	add	sp, #60	; 0x3c
   2e7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e7ee:	46c0      	nop			; (mov r8, r8)
   2e7f0:	0002e2d1 	.word	0x0002e2d1
   2e7f4:	000397c4 	.word	0x000397c4
   2e7f8:	0002fb95 	.word	0x0002fb95
   2e7fc:	0002e48d 	.word	0x0002e48d
   2e800:	0003038d 	.word	0x0003038d
   2e804:	0002e115 	.word	0x0002e115
   2e808:	0002fc99 	.word	0x0002fc99
   2e80c:	0002e579 	.word	0x0002e579

0002e810 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2e810:	b580      	push	{r7, lr}
   2e812:	b086      	sub	sp, #24
   2e814:	af00      	add	r7, sp, #0
   2e816:	6078      	str	r0, [r7, #4]
   2e818:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2e81a:	2300      	movs	r3, #0
   2e81c:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2e81e:	2308      	movs	r3, #8
   2e820:	18fb      	adds	r3, r7, r3
   2e822:	0018      	movs	r0, r3
   2e824:	4b11      	ldr	r3, [pc, #68]	; (2e86c <MQTTYield+0x5c>)
   2e826:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2e828:	683a      	ldr	r2, [r7, #0]
   2e82a:	2308      	movs	r3, #8
   2e82c:	18fb      	adds	r3, r7, r3
   2e82e:	0011      	movs	r1, r2
   2e830:	0018      	movs	r0, r3
   2e832:	4b0f      	ldr	r3, [pc, #60]	; (2e870 <MQTTYield+0x60>)
   2e834:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2e836:	2308      	movs	r3, #8
   2e838:	18fa      	adds	r2, r7, r3
   2e83a:	687b      	ldr	r3, [r7, #4]
   2e83c:	0011      	movs	r1, r2
   2e83e:	0018      	movs	r0, r3
   2e840:	4b0c      	ldr	r3, [pc, #48]	; (2e874 <MQTTYield+0x64>)
   2e842:	4798      	blx	r3
   2e844:	0003      	movs	r3, r0
   2e846:	3301      	adds	r3, #1
   2e848:	d103      	bne.n	2e852 <MQTTYield+0x42>
        {
            rc = FAILURE;
   2e84a:	2301      	movs	r3, #1
   2e84c:	425b      	negs	r3, r3
   2e84e:	617b      	str	r3, [r7, #20]
            break;
   2e850:	e006      	b.n	2e860 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2e852:	2308      	movs	r3, #8
   2e854:	18fb      	adds	r3, r7, r3
   2e856:	0018      	movs	r0, r3
   2e858:	4b07      	ldr	r3, [pc, #28]	; (2e878 <MQTTYield+0x68>)
   2e85a:	4798      	blx	r3
   2e85c:	1e03      	subs	r3, r0, #0
   2e85e:	d0ea      	beq.n	2e836 <MQTTYield+0x26>
        
    return rc;
   2e860:	697b      	ldr	r3, [r7, #20]
}
   2e862:	0018      	movs	r0, r3
   2e864:	46bd      	mov	sp, r7
   2e866:	b006      	add	sp, #24
   2e868:	bd80      	pop	{r7, pc}
   2e86a:	46c0      	nop			; (mov r8, r8)
   2e86c:	0002ef9d 	.word	0x0002ef9d
   2e870:	0002ef25 	.word	0x0002ef25
   2e874:	0002e61d 	.word	0x0002e61d
   2e878:	0002eef9 	.word	0x0002eef9

0002e87c <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2e87c:	b580      	push	{r7, lr}
   2e87e:	b086      	sub	sp, #24
   2e880:	af00      	add	r7, sp, #0
   2e882:	60f8      	str	r0, [r7, #12]
   2e884:	60b9      	str	r1, [r7, #8]
   2e886:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2e888:	2301      	movs	r3, #1
   2e88a:	425b      	negs	r3, r3
   2e88c:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2e88e:	687b      	ldr	r3, [r7, #4]
   2e890:	0018      	movs	r0, r3
   2e892:	4b0b      	ldr	r3, [pc, #44]	; (2e8c0 <waitfor+0x44>)
   2e894:	4798      	blx	r3
   2e896:	1e03      	subs	r3, r0, #0
   2e898:	d10c      	bne.n	2e8b4 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2e89a:	687a      	ldr	r2, [r7, #4]
   2e89c:	68fb      	ldr	r3, [r7, #12]
   2e89e:	0011      	movs	r1, r2
   2e8a0:	0018      	movs	r0, r3
   2e8a2:	4b08      	ldr	r3, [pc, #32]	; (2e8c4 <waitfor+0x48>)
   2e8a4:	4798      	blx	r3
   2e8a6:	0003      	movs	r3, r0
   2e8a8:	617b      	str	r3, [r7, #20]
   2e8aa:	697a      	ldr	r2, [r7, #20]
   2e8ac:	68bb      	ldr	r3, [r7, #8]
   2e8ae:	429a      	cmp	r2, r3
   2e8b0:	d1ed      	bne.n	2e88e <waitfor+0x12>
   2e8b2:	e000      	b.n	2e8b6 <waitfor+0x3a>
            break; // we timed out
   2e8b4:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2e8b6:	697b      	ldr	r3, [r7, #20]
}
   2e8b8:	0018      	movs	r0, r3
   2e8ba:	46bd      	mov	sp, r7
   2e8bc:	b006      	add	sp, #24
   2e8be:	bd80      	pop	{r7, pc}
   2e8c0:	0002eef9 	.word	0x0002eef9
   2e8c4:	0002e61d 	.word	0x0002e61d

0002e8c8 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2e8c8:	b590      	push	{r4, r7, lr}
   2e8ca:	b09f      	sub	sp, #124	; 0x7c
   2e8cc:	af00      	add	r7, sp, #0
   2e8ce:	6078      	str	r0, [r7, #4]
   2e8d0:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2e8d2:	2301      	movs	r3, #1
   2e8d4:	425b      	negs	r3, r3
   2e8d6:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2e8d8:	230c      	movs	r3, #12
   2e8da:	18fa      	adds	r2, r7, r3
   2e8dc:	4b41      	ldr	r3, [pc, #260]	; (2e9e4 <MQTTConnect+0x11c>)
   2e8de:	0010      	movs	r0, r2
   2e8e0:	0019      	movs	r1, r3
   2e8e2:	2358      	movs	r3, #88	; 0x58
   2e8e4:	001a      	movs	r2, r3
   2e8e6:	4b40      	ldr	r3, [pc, #256]	; (2e9e8 <MQTTConnect+0x120>)
   2e8e8:	4798      	blx	r3
    int len = 0;
   2e8ea:	2300      	movs	r3, #0
   2e8ec:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2e8ee:	687b      	ldr	r3, [r7, #4]
   2e8f0:	6a1b      	ldr	r3, [r3, #32]
   2e8f2:	2b00      	cmp	r3, #0
   2e8f4:	d166      	bne.n	2e9c4 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2e8f6:	2364      	movs	r3, #100	; 0x64
   2e8f8:	18fb      	adds	r3, r7, r3
   2e8fa:	0018      	movs	r0, r3
   2e8fc:	4b3b      	ldr	r3, [pc, #236]	; (2e9ec <MQTTConnect+0x124>)
   2e8fe:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2e900:	687b      	ldr	r3, [r7, #4]
   2e902:	685a      	ldr	r2, [r3, #4]
   2e904:	2364      	movs	r3, #100	; 0x64
   2e906:	18fb      	adds	r3, r7, r3
   2e908:	0011      	movs	r1, r2
   2e90a:	0018      	movs	r0, r3
   2e90c:	4b38      	ldr	r3, [pc, #224]	; (2e9f0 <MQTTConnect+0x128>)
   2e90e:	4798      	blx	r3

    if (options == 0)
   2e910:	683b      	ldr	r3, [r7, #0]
   2e912:	2b00      	cmp	r3, #0
   2e914:	d102      	bne.n	2e91c <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2e916:	230c      	movs	r3, #12
   2e918:	18fb      	adds	r3, r7, r3
   2e91a:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2e91c:	683b      	ldr	r3, [r7, #0]
   2e91e:	8b1b      	ldrh	r3, [r3, #24]
   2e920:	001a      	movs	r2, r3
   2e922:	687b      	ldr	r3, [r7, #4]
   2e924:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2e926:	687b      	ldr	r3, [r7, #4]
   2e928:	3354      	adds	r3, #84	; 0x54
   2e92a:	001a      	movs	r2, r3
   2e92c:	687b      	ldr	r3, [r7, #4]
   2e92e:	699b      	ldr	r3, [r3, #24]
   2e930:	0019      	movs	r1, r3
   2e932:	0010      	movs	r0, r2
   2e934:	4b2f      	ldr	r3, [pc, #188]	; (2e9f4 <MQTTConnect+0x12c>)
   2e936:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2e938:	687b      	ldr	r3, [r7, #4]
   2e93a:	6918      	ldr	r0, [r3, #16]
   2e93c:	687b      	ldr	r3, [r7, #4]
   2e93e:	689b      	ldr	r3, [r3, #8]
   2e940:	0019      	movs	r1, r3
   2e942:	683b      	ldr	r3, [r7, #0]
   2e944:	001a      	movs	r2, r3
   2e946:	4b2c      	ldr	r3, [pc, #176]	; (2e9f8 <MQTTConnect+0x130>)
   2e948:	4798      	blx	r3
   2e94a:	0003      	movs	r3, r0
   2e94c:	673b      	str	r3, [r7, #112]	; 0x70
   2e94e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2e950:	2b00      	cmp	r3, #0
   2e952:	dd39      	ble.n	2e9c8 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2e954:	2364      	movs	r3, #100	; 0x64
   2e956:	18fa      	adds	r2, r7, r3
   2e958:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2e95a:	687b      	ldr	r3, [r7, #4]
   2e95c:	0018      	movs	r0, r3
   2e95e:	4b27      	ldr	r3, [pc, #156]	; (2e9fc <MQTTConnect+0x134>)
   2e960:	4798      	blx	r3
   2e962:	0003      	movs	r3, r0
   2e964:	677b      	str	r3, [r7, #116]	; 0x74
   2e966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2e968:	2b00      	cmp	r3, #0
   2e96a:	d12f      	bne.n	2e9cc <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2e96c:	2364      	movs	r3, #100	; 0x64
   2e96e:	18fa      	adds	r2, r7, r3
   2e970:	687b      	ldr	r3, [r7, #4]
   2e972:	2102      	movs	r1, #2
   2e974:	0018      	movs	r0, r3
   2e976:	4b22      	ldr	r3, [pc, #136]	; (2ea00 <MQTTConnect+0x138>)
   2e978:	4798      	blx	r3
   2e97a:	0003      	movs	r3, r0
   2e97c:	2b02      	cmp	r3, #2
   2e97e:	d11d      	bne.n	2e9bc <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2e980:	230b      	movs	r3, #11
   2e982:	18fb      	adds	r3, r7, r3
   2e984:	22ff      	movs	r2, #255	; 0xff
   2e986:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2e988:	230a      	movs	r3, #10
   2e98a:	18fb      	adds	r3, r7, r3
   2e98c:	2200      	movs	r2, #0
   2e98e:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2e990:	687b      	ldr	r3, [r7, #4]
   2e992:	695a      	ldr	r2, [r3, #20]
   2e994:	687b      	ldr	r3, [r7, #4]
   2e996:	68db      	ldr	r3, [r3, #12]
   2e998:	210b      	movs	r1, #11
   2e99a:	1879      	adds	r1, r7, r1
   2e99c:	200a      	movs	r0, #10
   2e99e:	1838      	adds	r0, r7, r0
   2e9a0:	4c18      	ldr	r4, [pc, #96]	; (2ea04 <MQTTConnect+0x13c>)
   2e9a2:	47a0      	blx	r4
   2e9a4:	0003      	movs	r3, r0
   2e9a6:	2b01      	cmp	r3, #1
   2e9a8:	d104      	bne.n	2e9b4 <MQTTConnect+0xec>
            rc = connack_rc;
   2e9aa:	230b      	movs	r3, #11
   2e9ac:	18fb      	adds	r3, r7, r3
   2e9ae:	781b      	ldrb	r3, [r3, #0]
   2e9b0:	677b      	str	r3, [r7, #116]	; 0x74
   2e9b2:	e00c      	b.n	2e9ce <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2e9b4:	2301      	movs	r3, #1
   2e9b6:	425b      	negs	r3, r3
   2e9b8:	677b      	str	r3, [r7, #116]	; 0x74
   2e9ba:	e008      	b.n	2e9ce <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2e9bc:	2301      	movs	r3, #1
   2e9be:	425b      	negs	r3, r3
   2e9c0:	677b      	str	r3, [r7, #116]	; 0x74
   2e9c2:	e004      	b.n	2e9ce <MQTTConnect+0x106>
		goto exit;
   2e9c4:	46c0      	nop			; (mov r8, r8)
   2e9c6:	e002      	b.n	2e9ce <MQTTConnect+0x106>
        goto exit;
   2e9c8:	46c0      	nop			; (mov r8, r8)
   2e9ca:	e000      	b.n	2e9ce <MQTTConnect+0x106>
        goto exit; // there was a problem
   2e9cc:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2e9ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2e9d0:	2b00      	cmp	r3, #0
   2e9d2:	d102      	bne.n	2e9da <MQTTConnect+0x112>
        c->isconnected = 1;
   2e9d4:	687b      	ldr	r3, [r7, #4]
   2e9d6:	2201      	movs	r2, #1
   2e9d8:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2e9da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2e9dc:	0018      	movs	r0, r3
   2e9de:	46bd      	mov	sp, r7
   2e9e0:	b01f      	add	sp, #124	; 0x7c
   2e9e2:	bd90      	pop	{r4, r7, pc}
   2e9e4:	000397fc 	.word	0x000397fc
   2e9e8:	000345f9 	.word	0x000345f9
   2e9ec:	0002ef9d 	.word	0x0002ef9d
   2e9f0:	0002ef25 	.word	0x0002ef25
   2e9f4:	0002ef4d 	.word	0x0002ef4d
   2e9f8:	0002f779 	.word	0x0002f779
   2e9fc:	0002e115 	.word	0x0002e115
   2ea00:	0002e87d 	.word	0x0002e87d
   2ea04:	0002f9f5 	.word	0x0002f9f5

0002ea08 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2ea08:	b5b0      	push	{r4, r5, r7, lr}
   2ea0a:	b096      	sub	sp, #88	; 0x58
   2ea0c:	af04      	add	r7, sp, #16
   2ea0e:	60f8      	str	r0, [r7, #12]
   2ea10:	60b9      	str	r1, [r7, #8]
   2ea12:	603b      	str	r3, [r7, #0]
   2ea14:	1dfb      	adds	r3, r7, #7
   2ea16:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2ea18:	2301      	movs	r3, #1
   2ea1a:	425b      	negs	r3, r3
   2ea1c:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2ea1e:	2300      	movs	r3, #0
   2ea20:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2ea22:	2324      	movs	r3, #36	; 0x24
   2ea24:	18fb      	adds	r3, r7, r3
   2ea26:	2200      	movs	r2, #0
   2ea28:	601a      	str	r2, [r3, #0]
   2ea2a:	2324      	movs	r3, #36	; 0x24
   2ea2c:	18fb      	adds	r3, r7, r3
   2ea2e:	2200      	movs	r2, #0
   2ea30:	605a      	str	r2, [r3, #4]
   2ea32:	2324      	movs	r3, #36	; 0x24
   2ea34:	18fb      	adds	r3, r7, r3
   2ea36:	2200      	movs	r2, #0
   2ea38:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2ea3a:	1dfb      	adds	r3, r7, #7
   2ea3c:	781b      	ldrb	r3, [r3, #0]
   2ea3e:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2ea40:	2324      	movs	r3, #36	; 0x24
   2ea42:	18fb      	adds	r3, r7, r3
   2ea44:	68ba      	ldr	r2, [r7, #8]
   2ea46:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2ea48:	68fb      	ldr	r3, [r7, #12]
   2ea4a:	6a1b      	ldr	r3, [r3, #32]
   2ea4c:	2b00      	cmp	r3, #0
   2ea4e:	d100      	bne.n	2ea52 <MQTTSubscribe+0x4a>
   2ea50:	e088      	b.n	2eb64 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2ea52:	2330      	movs	r3, #48	; 0x30
   2ea54:	18fb      	adds	r3, r7, r3
   2ea56:	0018      	movs	r0, r3
   2ea58:	4b47      	ldr	r3, [pc, #284]	; (2eb78 <MQTTSubscribe+0x170>)
   2ea5a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2ea5c:	68fb      	ldr	r3, [r7, #12]
   2ea5e:	685a      	ldr	r2, [r3, #4]
   2ea60:	2330      	movs	r3, #48	; 0x30
   2ea62:	18fb      	adds	r3, r7, r3
   2ea64:	0011      	movs	r1, r2
   2ea66:	0018      	movs	r0, r3
   2ea68:	4b44      	ldr	r3, [pc, #272]	; (2eb7c <MQTTSubscribe+0x174>)
   2ea6a:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2ea6c:	68fb      	ldr	r3, [r7, #12]
   2ea6e:	691c      	ldr	r4, [r3, #16]
   2ea70:	68fb      	ldr	r3, [r7, #12]
   2ea72:	689b      	ldr	r3, [r3, #8]
   2ea74:	001d      	movs	r5, r3
   2ea76:	68fb      	ldr	r3, [r7, #12]
   2ea78:	0018      	movs	r0, r3
   2ea7a:	4b41      	ldr	r3, [pc, #260]	; (2eb80 <MQTTSubscribe+0x178>)
   2ea7c:	4798      	blx	r3
   2ea7e:	0003      	movs	r3, r0
   2ea80:	b29a      	uxth	r2, r3
   2ea82:	2320      	movs	r3, #32
   2ea84:	18fb      	adds	r3, r7, r3
   2ea86:	9302      	str	r3, [sp, #8]
   2ea88:	2324      	movs	r3, #36	; 0x24
   2ea8a:	18fb      	adds	r3, r7, r3
   2ea8c:	9301      	str	r3, [sp, #4]
   2ea8e:	2301      	movs	r3, #1
   2ea90:	9300      	str	r3, [sp, #0]
   2ea92:	0013      	movs	r3, r2
   2ea94:	2200      	movs	r2, #0
   2ea96:	0029      	movs	r1, r5
   2ea98:	0020      	movs	r0, r4
   2ea9a:	4c3a      	ldr	r4, [pc, #232]	; (2eb84 <MQTTSubscribe+0x17c>)
   2ea9c:	47a0      	blx	r4
   2ea9e:	0003      	movs	r3, r0
   2eaa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2eaa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2eaa4:	2b00      	cmp	r3, #0
   2eaa6:	dd5f      	ble.n	2eb68 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2eaa8:	2330      	movs	r3, #48	; 0x30
   2eaaa:	18fa      	adds	r2, r7, r3
   2eaac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2eaae:	68fb      	ldr	r3, [r7, #12]
   2eab0:	0018      	movs	r0, r3
   2eab2:	4b35      	ldr	r3, [pc, #212]	; (2eb88 <MQTTSubscribe+0x180>)
   2eab4:	4798      	blx	r3
   2eab6:	0003      	movs	r3, r0
   2eab8:	647b      	str	r3, [r7, #68]	; 0x44
   2eaba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2eabc:	2b00      	cmp	r3, #0
   2eabe:	d155      	bne.n	2eb6c <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2eac0:	2330      	movs	r3, #48	; 0x30
   2eac2:	18fa      	adds	r2, r7, r3
   2eac4:	68fb      	ldr	r3, [r7, #12]
   2eac6:	2109      	movs	r1, #9
   2eac8:	0018      	movs	r0, r3
   2eaca:	4b30      	ldr	r3, [pc, #192]	; (2eb8c <MQTTSubscribe+0x184>)
   2eacc:	4798      	blx	r3
   2eace:	0003      	movs	r3, r0
   2ead0:	2b09      	cmp	r3, #9
   2ead2:	d143      	bne.n	2eb5c <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2ead4:	2300      	movs	r3, #0
   2ead6:	61fb      	str	r3, [r7, #28]
   2ead8:	2301      	movs	r3, #1
   2eada:	425b      	negs	r3, r3
   2eadc:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2eade:	68fb      	ldr	r3, [r7, #12]
   2eae0:	695a      	ldr	r2, [r3, #20]
   2eae2:	68fb      	ldr	r3, [r7, #12]
   2eae4:	68db      	ldr	r3, [r3, #12]
   2eae6:	001c      	movs	r4, r3
   2eae8:	2318      	movs	r3, #24
   2eaea:	18fb      	adds	r3, r7, r3
   2eaec:	211c      	movs	r1, #28
   2eaee:	1879      	adds	r1, r7, r1
   2eaf0:	2016      	movs	r0, #22
   2eaf2:	1838      	adds	r0, r7, r0
   2eaf4:	9401      	str	r4, [sp, #4]
   2eaf6:	9200      	str	r2, [sp, #0]
   2eaf8:	000a      	movs	r2, r1
   2eafa:	2101      	movs	r1, #1
   2eafc:	4c24      	ldr	r4, [pc, #144]	; (2eb90 <MQTTSubscribe+0x188>)
   2eafe:	47a0      	blx	r4
   2eb00:	0003      	movs	r3, r0
   2eb02:	2b01      	cmp	r3, #1
   2eb04:	d101      	bne.n	2eb0a <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2eb06:	69bb      	ldr	r3, [r7, #24]
   2eb08:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2eb0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2eb0c:	2b80      	cmp	r3, #128	; 0x80
   2eb0e:	d02e      	beq.n	2eb6e <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2eb10:	2300      	movs	r3, #0
   2eb12:	643b      	str	r3, [r7, #64]	; 0x40
   2eb14:	e01e      	b.n	2eb54 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2eb16:	68fa      	ldr	r2, [r7, #12]
   2eb18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2eb1a:	3304      	adds	r3, #4
   2eb1c:	00db      	lsls	r3, r3, #3
   2eb1e:	18d3      	adds	r3, r2, r3
   2eb20:	3304      	adds	r3, #4
   2eb22:	681b      	ldr	r3, [r3, #0]
   2eb24:	2b00      	cmp	r3, #0
   2eb26:	d112      	bne.n	2eb4e <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2eb28:	68fa      	ldr	r2, [r7, #12]
   2eb2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2eb2c:	3304      	adds	r3, #4
   2eb2e:	00db      	lsls	r3, r3, #3
   2eb30:	18d3      	adds	r3, r2, r3
   2eb32:	3304      	adds	r3, #4
   2eb34:	68ba      	ldr	r2, [r7, #8]
   2eb36:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2eb38:	68fa      	ldr	r2, [r7, #12]
   2eb3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2eb3c:	3304      	adds	r3, #4
   2eb3e:	00db      	lsls	r3, r3, #3
   2eb40:	18d3      	adds	r3, r2, r3
   2eb42:	3308      	adds	r3, #8
   2eb44:	683a      	ldr	r2, [r7, #0]
   2eb46:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2eb48:	2300      	movs	r3, #0
   2eb4a:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2eb4c:	e00f      	b.n	2eb6e <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2eb4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2eb50:	3301      	adds	r3, #1
   2eb52:	643b      	str	r3, [r7, #64]	; 0x40
   2eb54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2eb56:	2b04      	cmp	r3, #4
   2eb58:	dddd      	ble.n	2eb16 <MQTTSubscribe+0x10e>
   2eb5a:	e008      	b.n	2eb6e <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2eb5c:	2301      	movs	r3, #1
   2eb5e:	425b      	negs	r3, r3
   2eb60:	647b      	str	r3, [r7, #68]	; 0x44
   2eb62:	e004      	b.n	2eb6e <MQTTSubscribe+0x166>
		goto exit;
   2eb64:	46c0      	nop			; (mov r8, r8)
   2eb66:	e002      	b.n	2eb6e <MQTTSubscribe+0x166>
        goto exit;
   2eb68:	46c0      	nop			; (mov r8, r8)
   2eb6a:	e000      	b.n	2eb6e <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2eb6c:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2eb6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2eb70:	0018      	movs	r0, r3
   2eb72:	46bd      	mov	sp, r7
   2eb74:	b012      	add	sp, #72	; 0x48
   2eb76:	bdb0      	pop	{r4, r5, r7, pc}
   2eb78:	0002ef9d 	.word	0x0002ef9d
   2eb7c:	0002ef25 	.word	0x0002ef25
   2eb80:	0002e0e5 	.word	0x0002e0e5
   2eb84:	000304d5 	.word	0x000304d5
   2eb88:	0002e115 	.word	0x0002e115
   2eb8c:	0002e87d 	.word	0x0002e87d
   2eb90:	00030625 	.word	0x00030625

0002eb94 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2eb94:	b5f0      	push	{r4, r5, r6, r7, lr}
   2eb96:	46ce      	mov	lr, r9
   2eb98:	4647      	mov	r7, r8
   2eb9a:	b580      	push	{r7, lr}
   2eb9c:	b097      	sub	sp, #92	; 0x5c
   2eb9e:	af08      	add	r7, sp, #32
   2eba0:	60f8      	str	r0, [r7, #12]
   2eba2:	60b9      	str	r1, [r7, #8]
   2eba4:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2eba6:	2301      	movs	r3, #1
   2eba8:	425b      	negs	r3, r3
   2ebaa:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2ebac:	2318      	movs	r3, #24
   2ebae:	18fb      	adds	r3, r7, r3
   2ebb0:	2200      	movs	r2, #0
   2ebb2:	601a      	str	r2, [r3, #0]
   2ebb4:	2318      	movs	r3, #24
   2ebb6:	18fb      	adds	r3, r7, r3
   2ebb8:	2200      	movs	r2, #0
   2ebba:	605a      	str	r2, [r3, #4]
   2ebbc:	2318      	movs	r3, #24
   2ebbe:	18fb      	adds	r3, r7, r3
   2ebc0:	2200      	movs	r2, #0
   2ebc2:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2ebc4:	2318      	movs	r3, #24
   2ebc6:	18fb      	adds	r3, r7, r3
   2ebc8:	68ba      	ldr	r2, [r7, #8]
   2ebca:	601a      	str	r2, [r3, #0]
    int len = 0;
   2ebcc:	2300      	movs	r3, #0
   2ebce:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2ebd0:	68fb      	ldr	r3, [r7, #12]
   2ebd2:	6a1b      	ldr	r3, [r3, #32]
   2ebd4:	2b00      	cmp	r3, #0
   2ebd6:	d100      	bne.n	2ebda <MQTTPublish+0x46>
   2ebd8:	e0a0      	b.n	2ed1c <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2ebda:	2324      	movs	r3, #36	; 0x24
   2ebdc:	18fb      	adds	r3, r7, r3
   2ebde:	0018      	movs	r0, r3
   2ebe0:	4b55      	ldr	r3, [pc, #340]	; (2ed38 <MQTTPublish+0x1a4>)
   2ebe2:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2ebe4:	68fb      	ldr	r3, [r7, #12]
   2ebe6:	685a      	ldr	r2, [r3, #4]
   2ebe8:	2324      	movs	r3, #36	; 0x24
   2ebea:	18fb      	adds	r3, r7, r3
   2ebec:	0011      	movs	r1, r2
   2ebee:	0018      	movs	r0, r3
   2ebf0:	4b52      	ldr	r3, [pc, #328]	; (2ed3c <MQTTPublish+0x1a8>)
   2ebf2:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2ebf4:	687b      	ldr	r3, [r7, #4]
   2ebf6:	781b      	ldrb	r3, [r3, #0]
   2ebf8:	2b01      	cmp	r3, #1
   2ebfa:	d003      	beq.n	2ec04 <MQTTPublish+0x70>
   2ebfc:	687b      	ldr	r3, [r7, #4]
   2ebfe:	781b      	ldrb	r3, [r3, #0]
   2ec00:	2b02      	cmp	r3, #2
   2ec02:	d107      	bne.n	2ec14 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2ec04:	68fb      	ldr	r3, [r7, #12]
   2ec06:	0018      	movs	r0, r3
   2ec08:	4b4d      	ldr	r3, [pc, #308]	; (2ed40 <MQTTPublish+0x1ac>)
   2ec0a:	4798      	blx	r3
   2ec0c:	0003      	movs	r3, r0
   2ec0e:	b29a      	uxth	r2, r3
   2ec10:	687b      	ldr	r3, [r7, #4]
   2ec12:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2ec14:	68fb      	ldr	r3, [r7, #12]
   2ec16:	691b      	ldr	r3, [r3, #16]
   2ec18:	469c      	mov	ip, r3
   2ec1a:	68fb      	ldr	r3, [r7, #12]
   2ec1c:	689b      	ldr	r3, [r3, #8]
   2ec1e:	001d      	movs	r5, r3
   2ec20:	687b      	ldr	r3, [r7, #4]
   2ec22:	781b      	ldrb	r3, [r3, #0]
   2ec24:	001e      	movs	r6, r3
   2ec26:	687b      	ldr	r3, [r7, #4]
   2ec28:	785b      	ldrb	r3, [r3, #1]
   2ec2a:	4698      	mov	r8, r3
   2ec2c:	687b      	ldr	r3, [r7, #4]
   2ec2e:	889b      	ldrh	r3, [r3, #4]
   2ec30:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2ec32:	687b      	ldr	r3, [r7, #4]
   2ec34:	689a      	ldr	r2, [r3, #8]
   2ec36:	687b      	ldr	r3, [r7, #4]
   2ec38:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2ec3a:	9306      	str	r3, [sp, #24]
   2ec3c:	9205      	str	r2, [sp, #20]
   2ec3e:	2318      	movs	r3, #24
   2ec40:	18fa      	adds	r2, r7, r3
   2ec42:	2308      	movs	r3, #8
   2ec44:	446b      	add	r3, sp
   2ec46:	ca13      	ldmia	r2!, {r0, r1, r4}
   2ec48:	c313      	stmia	r3!, {r0, r1, r4}
   2ec4a:	464b      	mov	r3, r9
   2ec4c:	9301      	str	r3, [sp, #4]
   2ec4e:	4643      	mov	r3, r8
   2ec50:	9300      	str	r3, [sp, #0]
   2ec52:	0033      	movs	r3, r6
   2ec54:	2200      	movs	r2, #0
   2ec56:	0029      	movs	r1, r5
   2ec58:	4660      	mov	r0, ip
   2ec5a:	4c3a      	ldr	r4, [pc, #232]	; (2ed44 <MQTTPublish+0x1b0>)
   2ec5c:	47a0      	blx	r4
   2ec5e:	0003      	movs	r3, r0
   2ec60:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2ec62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ec64:	2b00      	cmp	r3, #0
   2ec66:	dd5b      	ble.n	2ed20 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2ec68:	2324      	movs	r3, #36	; 0x24
   2ec6a:	18fa      	adds	r2, r7, r3
   2ec6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2ec6e:	68fb      	ldr	r3, [r7, #12]
   2ec70:	0018      	movs	r0, r3
   2ec72:	4b35      	ldr	r3, [pc, #212]	; (2ed48 <MQTTPublish+0x1b4>)
   2ec74:	4798      	blx	r3
   2ec76:	0003      	movs	r3, r0
   2ec78:	637b      	str	r3, [r7, #52]	; 0x34
   2ec7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2ec7c:	2b00      	cmp	r3, #0
   2ec7e:	d151      	bne.n	2ed24 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2ec80:	687b      	ldr	r3, [r7, #4]
   2ec82:	781b      	ldrb	r3, [r3, #0]
   2ec84:	2b01      	cmp	r3, #1
   2ec86:	d122      	bne.n	2ecce <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2ec88:	2324      	movs	r3, #36	; 0x24
   2ec8a:	18fa      	adds	r2, r7, r3
   2ec8c:	68fb      	ldr	r3, [r7, #12]
   2ec8e:	2104      	movs	r1, #4
   2ec90:	0018      	movs	r0, r3
   2ec92:	4b2e      	ldr	r3, [pc, #184]	; (2ed4c <MQTTPublish+0x1b8>)
   2ec94:	4798      	blx	r3
   2ec96:	0003      	movs	r3, r0
   2ec98:	2b04      	cmp	r3, #4
   2ec9a:	d114      	bne.n	2ecc6 <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2ec9c:	68fb      	ldr	r3, [r7, #12]
   2ec9e:	695c      	ldr	r4, [r3, #20]
   2eca0:	68fb      	ldr	r3, [r7, #12]
   2eca2:	68db      	ldr	r3, [r3, #12]
   2eca4:	2216      	movs	r2, #22
   2eca6:	18ba      	adds	r2, r7, r2
   2eca8:	2115      	movs	r1, #21
   2ecaa:	1879      	adds	r1, r7, r1
   2ecac:	2014      	movs	r0, #20
   2ecae:	1838      	adds	r0, r7, r0
   2ecb0:	9300      	str	r3, [sp, #0]
   2ecb2:	0023      	movs	r3, r4
   2ecb4:	4c26      	ldr	r4, [pc, #152]	; (2ed50 <MQTTPublish+0x1bc>)
   2ecb6:	47a0      	blx	r4
   2ecb8:	0003      	movs	r3, r0
   2ecba:	2b01      	cmp	r3, #1
   2ecbc:	d033      	beq.n	2ed26 <MQTTPublish+0x192>
                rc = FAILURE;
   2ecbe:	2301      	movs	r3, #1
   2ecc0:	425b      	negs	r3, r3
   2ecc2:	637b      	str	r3, [r7, #52]	; 0x34
   2ecc4:	e02f      	b.n	2ed26 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2ecc6:	2301      	movs	r3, #1
   2ecc8:	425b      	negs	r3, r3
   2ecca:	637b      	str	r3, [r7, #52]	; 0x34
   2eccc:	e02b      	b.n	2ed26 <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2ecce:	687b      	ldr	r3, [r7, #4]
   2ecd0:	781b      	ldrb	r3, [r3, #0]
   2ecd2:	2b02      	cmp	r3, #2
   2ecd4:	d127      	bne.n	2ed26 <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2ecd6:	2324      	movs	r3, #36	; 0x24
   2ecd8:	18fa      	adds	r2, r7, r3
   2ecda:	68fb      	ldr	r3, [r7, #12]
   2ecdc:	2107      	movs	r1, #7
   2ecde:	0018      	movs	r0, r3
   2ece0:	4b1a      	ldr	r3, [pc, #104]	; (2ed4c <MQTTPublish+0x1b8>)
   2ece2:	4798      	blx	r3
   2ece4:	0003      	movs	r3, r0
   2ece6:	2b07      	cmp	r3, #7
   2ece8:	d114      	bne.n	2ed14 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2ecea:	68fb      	ldr	r3, [r7, #12]
   2ecec:	695c      	ldr	r4, [r3, #20]
   2ecee:	68fb      	ldr	r3, [r7, #12]
   2ecf0:	68db      	ldr	r3, [r3, #12]
   2ecf2:	2212      	movs	r2, #18
   2ecf4:	18ba      	adds	r2, r7, r2
   2ecf6:	2111      	movs	r1, #17
   2ecf8:	1879      	adds	r1, r7, r1
   2ecfa:	2010      	movs	r0, #16
   2ecfc:	1838      	adds	r0, r7, r0
   2ecfe:	9300      	str	r3, [sp, #0]
   2ed00:	0023      	movs	r3, r4
   2ed02:	4c13      	ldr	r4, [pc, #76]	; (2ed50 <MQTTPublish+0x1bc>)
   2ed04:	47a0      	blx	r4
   2ed06:	0003      	movs	r3, r0
   2ed08:	2b01      	cmp	r3, #1
   2ed0a:	d00c      	beq.n	2ed26 <MQTTPublish+0x192>
                rc = FAILURE;
   2ed0c:	2301      	movs	r3, #1
   2ed0e:	425b      	negs	r3, r3
   2ed10:	637b      	str	r3, [r7, #52]	; 0x34
   2ed12:	e008      	b.n	2ed26 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2ed14:	2301      	movs	r3, #1
   2ed16:	425b      	negs	r3, r3
   2ed18:	637b      	str	r3, [r7, #52]	; 0x34
   2ed1a:	e004      	b.n	2ed26 <MQTTPublish+0x192>
		goto exit;
   2ed1c:	46c0      	nop			; (mov r8, r8)
   2ed1e:	e002      	b.n	2ed26 <MQTTPublish+0x192>
        goto exit;
   2ed20:	46c0      	nop			; (mov r8, r8)
   2ed22:	e000      	b.n	2ed26 <MQTTPublish+0x192>
        goto exit; // there was a problem
   2ed24:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2ed26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2ed28:	0018      	movs	r0, r3
   2ed2a:	46bd      	mov	sp, r7
   2ed2c:	b00f      	add	sp, #60	; 0x3c
   2ed2e:	bc0c      	pop	{r2, r3}
   2ed30:	4690      	mov	r8, r2
   2ed32:	4699      	mov	r9, r3
   2ed34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ed36:	46c0      	nop			; (mov r8, r8)
   2ed38:	0002ef9d 	.word	0x0002ef9d
   2ed3c:	0002ef25 	.word	0x0002ef25
   2ed40:	0002e0e5 	.word	0x0002e0e5
   2ed44:	00030221 	.word	0x00030221
   2ed48:	0002e115 	.word	0x0002e115
   2ed4c:	0002e87d 	.word	0x0002e87d
   2ed50:	0002fc99 	.word	0x0002fc99

0002ed54 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2ed54:	b580      	push	{r7, lr}
   2ed56:	b088      	sub	sp, #32
   2ed58:	af00      	add	r7, sp, #0
   2ed5a:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2ed5c:	2301      	movs	r3, #1
   2ed5e:	425b      	negs	r3, r3
   2ed60:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2ed62:	2300      	movs	r3, #0
   2ed64:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2ed66:	230c      	movs	r3, #12
   2ed68:	18fb      	adds	r3, r7, r3
   2ed6a:	0018      	movs	r0, r3
   2ed6c:	4b13      	ldr	r3, [pc, #76]	; (2edbc <MQTTDisconnect+0x68>)
   2ed6e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2ed70:	687b      	ldr	r3, [r7, #4]
   2ed72:	685a      	ldr	r2, [r3, #4]
   2ed74:	230c      	movs	r3, #12
   2ed76:	18fb      	adds	r3, r7, r3
   2ed78:	0011      	movs	r1, r2
   2ed7a:	0018      	movs	r0, r3
   2ed7c:	4b10      	ldr	r3, [pc, #64]	; (2edc0 <MQTTDisconnect+0x6c>)
   2ed7e:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2ed80:	687b      	ldr	r3, [r7, #4]
   2ed82:	691a      	ldr	r2, [r3, #16]
   2ed84:	687b      	ldr	r3, [r7, #4]
   2ed86:	689b      	ldr	r3, [r3, #8]
   2ed88:	0019      	movs	r1, r3
   2ed8a:	0010      	movs	r0, r2
   2ed8c:	4b0d      	ldr	r3, [pc, #52]	; (2edc4 <MQTTDisconnect+0x70>)
   2ed8e:	4798      	blx	r3
   2ed90:	0003      	movs	r3, r0
   2ed92:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2ed94:	69bb      	ldr	r3, [r7, #24]
   2ed96:	2b00      	cmp	r3, #0
   2ed98:	dd08      	ble.n	2edac <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2ed9a:	230c      	movs	r3, #12
   2ed9c:	18fa      	adds	r2, r7, r3
   2ed9e:	69b9      	ldr	r1, [r7, #24]
   2eda0:	687b      	ldr	r3, [r7, #4]
   2eda2:	0018      	movs	r0, r3
   2eda4:	4b08      	ldr	r3, [pc, #32]	; (2edc8 <MQTTDisconnect+0x74>)
   2eda6:	4798      	blx	r3
   2eda8:	0003      	movs	r3, r0
   2edaa:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2edac:	687b      	ldr	r3, [r7, #4]
   2edae:	2200      	movs	r2, #0
   2edb0:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2edb2:	69fb      	ldr	r3, [r7, #28]
}
   2edb4:	0018      	movs	r0, r3
   2edb6:	46bd      	mov	sp, r7
   2edb8:	b008      	add	sp, #32
   2edba:	bd80      	pop	{r7, pc}
   2edbc:	0002ef9d 	.word	0x0002ef9d
   2edc0:	0002ef25 	.word	0x0002ef25
   2edc4:	0002fb4d 	.word	0x0002fb4d
   2edc8:	0002e115 	.word	0x0002e115

0002edcc <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2edcc:	b580      	push	{r7, lr}
   2edce:	b084      	sub	sp, #16
   2edd0:	af00      	add	r7, sp, #0
   2edd2:	0002      	movs	r2, r0
   2edd4:	1dfb      	adds	r3, r7, #7
   2edd6:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2edd8:	2300      	movs	r3, #0
   2edda:	60fb      	str	r3, [r7, #12]
   2eddc:	e01c      	b.n	2ee18 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2edde:	4a12      	ldr	r2, [pc, #72]	; (2ee28 <isMQTTSocket+0x5c>)
   2ede0:	68fb      	ldr	r3, [r7, #12]
   2ede2:	2164      	movs	r1, #100	; 0x64
   2ede4:	434b      	muls	r3, r1
   2ede6:	18d3      	adds	r3, r2, r3
   2ede8:	3360      	adds	r3, #96	; 0x60
   2edea:	681b      	ldr	r3, [r3, #0]
   2edec:	2b00      	cmp	r3, #0
   2edee:	d010      	beq.n	2ee12 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2edf0:	4a0d      	ldr	r2, [pc, #52]	; (2ee28 <isMQTTSocket+0x5c>)
   2edf2:	68fb      	ldr	r3, [r7, #12]
   2edf4:	2164      	movs	r1, #100	; 0x64
   2edf6:	434b      	muls	r3, r1
   2edf8:	18d3      	adds	r3, r2, r3
   2edfa:	3360      	adds	r3, #96	; 0x60
   2edfc:	681b      	ldr	r3, [r3, #0]
   2edfe:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2ee00:	68bb      	ldr	r3, [r7, #8]
   2ee02:	6a1a      	ldr	r2, [r3, #32]
   2ee04:	1dfb      	adds	r3, r7, #7
   2ee06:	781b      	ldrb	r3, [r3, #0]
   2ee08:	b25b      	sxtb	r3, r3
   2ee0a:	429a      	cmp	r2, r3
   2ee0c:	d101      	bne.n	2ee12 <isMQTTSocket+0x46>
				return true;
   2ee0e:	2301      	movs	r3, #1
   2ee10:	e006      	b.n	2ee20 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2ee12:	68fb      	ldr	r3, [r7, #12]
   2ee14:	3301      	adds	r3, #1
   2ee16:	60fb      	str	r3, [r7, #12]
   2ee18:	68fb      	ldr	r3, [r7, #12]
   2ee1a:	2b06      	cmp	r3, #6
   2ee1c:	d9df      	bls.n	2edde <isMQTTSocket+0x12>
		}
	}
	return false;
   2ee1e:	2300      	movs	r3, #0
}
   2ee20:	0018      	movs	r0, r3
   2ee22:	46bd      	mov	sp, r7
   2ee24:	b004      	add	sp, #16
   2ee26:	bd80      	pop	{r7, pc}
   2ee28:	200042b4 	.word	0x200042b4

0002ee2c <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2ee2c:	b580      	push	{r7, lr}
   2ee2e:	b082      	sub	sp, #8
   2ee30:	af00      	add	r7, sp, #0
   2ee32:	6078      	str	r0, [r7, #4]
   2ee34:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2ee36:	4b0d      	ldr	r3, [pc, #52]	; (2ee6c <dnsResolveCallback+0x40>)
   2ee38:	781b      	ldrb	r3, [r3, #0]
   2ee3a:	2201      	movs	r2, #1
   2ee3c:	4053      	eors	r3, r2
   2ee3e:	b2db      	uxtb	r3, r3
   2ee40:	2b00      	cmp	r3, #0
   2ee42:	d00e      	beq.n	2ee62 <dnsResolveCallback+0x36>
   2ee44:	4b0a      	ldr	r3, [pc, #40]	; (2ee70 <dnsResolveCallback+0x44>)
   2ee46:	681b      	ldr	r3, [r3, #0]
   2ee48:	687a      	ldr	r2, [r7, #4]
   2ee4a:	0011      	movs	r1, r2
   2ee4c:	0018      	movs	r0, r3
   2ee4e:	4b09      	ldr	r3, [pc, #36]	; (2ee74 <dnsResolveCallback+0x48>)
   2ee50:	4798      	blx	r3
   2ee52:	1e03      	subs	r3, r0, #0
   2ee54:	d105      	bne.n	2ee62 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2ee56:	683a      	ldr	r2, [r7, #0]
   2ee58:	4b07      	ldr	r3, [pc, #28]	; (2ee78 <dnsResolveCallback+0x4c>)
   2ee5a:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2ee5c:	4b03      	ldr	r3, [pc, #12]	; (2ee6c <dnsResolveCallback+0x40>)
   2ee5e:	2201      	movs	r2, #1
   2ee60:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2ee62:	46c0      	nop			; (mov r8, r8)
   2ee64:	46bd      	mov	sp, r7
   2ee66:	b002      	add	sp, #8
   2ee68:	bd80      	pop	{r7, pc}
   2ee6a:	46c0      	nop			; (mov r8, r8)
   2ee6c:	200041a4 	.word	0x200041a4
   2ee70:	200042b0 	.word	0x200042b0
   2ee74:	00034987 	.word	0x00034987
   2ee78:	2000419c 	.word	0x2000419c

0002ee7c <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2ee7c:	b580      	push	{r7, lr}
   2ee7e:	b084      	sub	sp, #16
   2ee80:	af00      	add	r7, sp, #0
   2ee82:	603a      	str	r2, [r7, #0]
   2ee84:	1dfb      	adds	r3, r7, #7
   2ee86:	1c02      	adds	r2, r0, #0
   2ee88:	701a      	strb	r2, [r3, #0]
   2ee8a:	1dbb      	adds	r3, r7, #6
   2ee8c:	1c0a      	adds	r2, r1, #0
   2ee8e:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2ee90:	1dfb      	adds	r3, r7, #7
   2ee92:	781b      	ldrb	r3, [r3, #0]
   2ee94:	b25b      	sxtb	r3, r3
   2ee96:	0018      	movs	r0, r3
   2ee98:	4b12      	ldr	r3, [pc, #72]	; (2eee4 <tcpClientSocketEventHandler+0x68>)
   2ee9a:	4798      	blx	r3
   2ee9c:	1e03      	subs	r3, r0, #0
   2ee9e:	d01c      	beq.n	2eeda <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2eea0:	1dbb      	adds	r3, r7, #6
   2eea2:	781b      	ldrb	r3, [r3, #0]
   2eea4:	2b06      	cmp	r3, #6
   2eea6:	d00c      	beq.n	2eec2 <tcpClientSocketEventHandler+0x46>
   2eea8:	2b07      	cmp	r3, #7
   2eeaa:	d006      	beq.n	2eeba <tcpClientSocketEventHandler+0x3e>
   2eeac:	2b05      	cmp	r3, #5
   2eeae:	d000      	beq.n	2eeb2 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2eeb0:	e013      	b.n	2eeda <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2eeb2:	4b0d      	ldr	r3, [pc, #52]	; (2eee8 <tcpClientSocketEventHandler+0x6c>)
   2eeb4:	2201      	movs	r2, #1
   2eeb6:	701a      	strb	r2, [r3, #0]
			break;
   2eeb8:	e00f      	b.n	2eeda <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2eeba:	4b0c      	ldr	r3, [pc, #48]	; (2eeec <tcpClientSocketEventHandler+0x70>)
   2eebc:	2201      	movs	r2, #1
   2eebe:	701a      	strb	r2, [r3, #0]
			break;
   2eec0:	e00b      	b.n	2eeda <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2eec2:	683b      	ldr	r3, [r7, #0]
   2eec4:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2eec6:	68fb      	ldr	r3, [r7, #12]
   2eec8:	2204      	movs	r2, #4
   2eeca:	5e9b      	ldrsh	r3, [r3, r2]
   2eecc:	001a      	movs	r2, r3
   2eece:	4b08      	ldr	r3, [pc, #32]	; (2eef0 <tcpClientSocketEventHandler+0x74>)
   2eed0:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2eed2:	4b08      	ldr	r3, [pc, #32]	; (2eef4 <tcpClientSocketEventHandler+0x78>)
   2eed4:	2201      	movs	r2, #1
   2eed6:	701a      	strb	r2, [r3, #0]
			break;
   2eed8:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2eeda:	46c0      	nop			; (mov r8, r8)
   2eedc:	46bd      	mov	sp, r7
   2eede:	b004      	add	sp, #16
   2eee0:	bd80      	pop	{r7, pc}
   2eee2:	46c0      	nop			; (mov r8, r8)
   2eee4:	0002edcd 	.word	0x0002edcd
   2eee8:	200041a5 	.word	0x200041a5
   2eeec:	200041a6 	.word	0x200041a6
   2eef0:	200041a0 	.word	0x200041a0
   2eef4:	200041a7 	.word	0x200041a7

0002eef8 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2eef8:	b580      	push	{r7, lr}
   2eefa:	b082      	sub	sp, #8
   2eefc:	af00      	add	r7, sp, #0
   2eefe:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2ef00:	687b      	ldr	r3, [r7, #4]
   2ef02:	3304      	adds	r3, #4
   2ef04:	687a      	ldr	r2, [r7, #4]
   2ef06:	0011      	movs	r1, r2
   2ef08:	0018      	movs	r0, r3
   2ef0a:	4b05      	ldr	r3, [pc, #20]	; (2ef20 <TimerIsExpired+0x28>)
   2ef0c:	4798      	blx	r3
   2ef0e:	0003      	movs	r3, r0
   2ef10:	3b01      	subs	r3, #1
   2ef12:	425a      	negs	r2, r3
   2ef14:	4153      	adcs	r3, r2
   2ef16:	b2db      	uxtb	r3, r3
}
   2ef18:	0018      	movs	r0, r3
   2ef1a:	46bd      	mov	sp, r7
   2ef1c:	b002      	add	sp, #8
   2ef1e:	bd80      	pop	{r7, pc}
   2ef20:	0001c791 	.word	0x0001c791

0002ef24 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2ef24:	b580      	push	{r7, lr}
   2ef26:	b082      	sub	sp, #8
   2ef28:	af00      	add	r7, sp, #0
   2ef2a:	6078      	str	r0, [r7, #4]
   2ef2c:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2ef2e:	687b      	ldr	r3, [r7, #4]
   2ef30:	683a      	ldr	r2, [r7, #0]
   2ef32:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2ef34:	687b      	ldr	r3, [r7, #4]
   2ef36:	3304      	adds	r3, #4
   2ef38:	0018      	movs	r0, r3
   2ef3a:	4b03      	ldr	r3, [pc, #12]	; (2ef48 <TimerCountdownMS+0x24>)
   2ef3c:	4798      	blx	r3
}
   2ef3e:	46c0      	nop			; (mov r8, r8)
   2ef40:	46bd      	mov	sp, r7
   2ef42:	b002      	add	sp, #8
   2ef44:	bd80      	pop	{r7, pc}
   2ef46:	46c0      	nop			; (mov r8, r8)
   2ef48:	0001c725 	.word	0x0001c725

0002ef4c <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2ef4c:	b580      	push	{r7, lr}
   2ef4e:	b082      	sub	sp, #8
   2ef50:	af00      	add	r7, sp, #0
   2ef52:	6078      	str	r0, [r7, #4]
   2ef54:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2ef56:	683b      	ldr	r3, [r7, #0]
   2ef58:	22fa      	movs	r2, #250	; 0xfa
   2ef5a:	0092      	lsls	r2, r2, #2
   2ef5c:	435a      	muls	r2, r3
   2ef5e:	687b      	ldr	r3, [r7, #4]
   2ef60:	0011      	movs	r1, r2
   2ef62:	0018      	movs	r0, r3
   2ef64:	4b02      	ldr	r3, [pc, #8]	; (2ef70 <TimerCountdown+0x24>)
   2ef66:	4798      	blx	r3
}
   2ef68:	46c0      	nop			; (mov r8, r8)
   2ef6a:	46bd      	mov	sp, r7
   2ef6c:	b002      	add	sp, #8
   2ef6e:	bd80      	pop	{r7, pc}
   2ef70:	0002ef25 	.word	0x0002ef25

0002ef74 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2ef74:	b580      	push	{r7, lr}
   2ef76:	b082      	sub	sp, #8
   2ef78:	af00      	add	r7, sp, #0
   2ef7a:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2ef7c:	687b      	ldr	r3, [r7, #4]
   2ef7e:	3304      	adds	r3, #4
   2ef80:	687a      	ldr	r2, [r7, #4]
   2ef82:	0011      	movs	r1, r2
   2ef84:	0018      	movs	r0, r3
   2ef86:	4b04      	ldr	r3, [pc, #16]	; (2ef98 <TimerLeftMS+0x24>)
   2ef88:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2ef8a:	687b      	ldr	r3, [r7, #4]
   2ef8c:	681b      	ldr	r3, [r3, #0]
}
   2ef8e:	0018      	movs	r0, r3
   2ef90:	46bd      	mov	sp, r7
   2ef92:	b002      	add	sp, #8
   2ef94:	bd80      	pop	{r7, pc}
   2ef96:	46c0      	nop			; (mov r8, r8)
   2ef98:	0001c791 	.word	0x0001c791

0002ef9c <TimerInit>:


void TimerInit(Timer* timer) {
   2ef9c:	b580      	push	{r7, lr}
   2ef9e:	b082      	sub	sp, #8
   2efa0:	af00      	add	r7, sp, #0
   2efa2:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2efa4:	687b      	ldr	r3, [r7, #4]
   2efa6:	2200      	movs	r2, #0
   2efa8:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2efaa:	687b      	ldr	r3, [r7, #4]
   2efac:	3304      	adds	r3, #4
   2efae:	2208      	movs	r2, #8
   2efb0:	2100      	movs	r1, #0
   2efb2:	0018      	movs	r0, r3
   2efb4:	4b02      	ldr	r3, [pc, #8]	; (2efc0 <TimerInit+0x24>)
   2efb6:	4798      	blx	r3
}
   2efb8:	46c0      	nop			; (mov r8, r8)
   2efba:	46bd      	mov	sp, r7
   2efbc:	b002      	add	sp, #8
   2efbe:	bd80      	pop	{r7, pc}
   2efc0:	0003462f 	.word	0x0003462f

0002efc4 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2efc4:	b590      	push	{r4, r7, lr}
   2efc6:	b085      	sub	sp, #20
   2efc8:	af00      	add	r7, sp, #0
   2efca:	60f8      	str	r0, [r7, #12]
   2efcc:	60b9      	str	r1, [r7, #8]
   2efce:	607a      	str	r2, [r7, #4]
   2efd0:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2efd2:	683b      	ldr	r3, [r7, #0]
   2efd4:	2b00      	cmp	r3, #0
   2efd6:	d101      	bne.n	2efdc <WINC1500_read+0x18>
   2efd8:	230a      	movs	r3, #10
   2efda:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2efdc:	4b2c      	ldr	r3, [pc, #176]	; (2f090 <WINC1500_read+0xcc>)
   2efde:	681b      	ldr	r3, [r3, #0]
   2efe0:	2b00      	cmp	r3, #0
   2efe2:	d131      	bne.n	2f048 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2efe4:	4b2b      	ldr	r3, [pc, #172]	; (2f094 <WINC1500_read+0xd0>)
   2efe6:	2200      	movs	r2, #0
   2efe8:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2efea:	68fb      	ldr	r3, [r7, #12]
   2efec:	681b      	ldr	r3, [r3, #0]
   2efee:	b258      	sxtb	r0, r3
   2eff0:	683c      	ldr	r4, [r7, #0]
   2eff2:	2380      	movs	r3, #128	; 0x80
   2eff4:	005a      	lsls	r2, r3, #1
   2eff6:	4928      	ldr	r1, [pc, #160]	; (2f098 <WINC1500_read+0xd4>)
   2eff8:	0023      	movs	r3, r4
   2effa:	4c28      	ldr	r4, [pc, #160]	; (2f09c <WINC1500_read+0xd8>)
   2effc:	47a0      	blx	r4
   2effe:	1e03      	subs	r3, r0, #0
   2f000:	d005      	beq.n	2f00e <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2f002:	2301      	movs	r3, #1
   2f004:	425b      	negs	r3, r3
   2f006:	e03e      	b.n	2f086 <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2f008:	2000      	movs	r0, #0
   2f00a:	4b25      	ldr	r3, [pc, #148]	; (2f0a0 <WINC1500_read+0xdc>)
   2f00c:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2f00e:	4b21      	ldr	r3, [pc, #132]	; (2f094 <WINC1500_read+0xd0>)
   2f010:	781b      	ldrb	r3, [r3, #0]
   2f012:	2201      	movs	r2, #1
   2f014:	4053      	eors	r3, r2
   2f016:	b2db      	uxtb	r3, r3
   2f018:	2b00      	cmp	r3, #0
   2f01a:	d1f5      	bne.n	2f008 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2f01c:	4b21      	ldr	r3, [pc, #132]	; (2f0a4 <WINC1500_read+0xe0>)
   2f01e:	681b      	ldr	r3, [r3, #0]
   2f020:	2b00      	cmp	r3, #0
   2f022:	dd08      	ble.n	2f036 <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2f024:	4b1f      	ldr	r3, [pc, #124]	; (2f0a4 <WINC1500_read+0xe0>)
   2f026:	681b      	ldr	r3, [r3, #0]
   2f028:	001a      	movs	r2, r3
   2f02a:	4b19      	ldr	r3, [pc, #100]	; (2f090 <WINC1500_read+0xcc>)
   2f02c:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2f02e:	4b1e      	ldr	r3, [pc, #120]	; (2f0a8 <WINC1500_read+0xe4>)
   2f030:	2200      	movs	r2, #0
   2f032:	601a      	str	r2, [r3, #0]
   2f034:	e008      	b.n	2f048 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2f036:	4b16      	ldr	r3, [pc, #88]	; (2f090 <WINC1500_read+0xcc>)
   2f038:	2200      	movs	r2, #0
   2f03a:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2f03c:	4b1a      	ldr	r3, [pc, #104]	; (2f0a8 <WINC1500_read+0xe4>)
   2f03e:	2200      	movs	r2, #0
   2f040:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2f042:	4b18      	ldr	r3, [pc, #96]	; (2f0a4 <WINC1500_read+0xe0>)
   2f044:	681b      	ldr	r3, [r3, #0]
   2f046:	e01e      	b.n	2f086 <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2f048:	4b11      	ldr	r3, [pc, #68]	; (2f090 <WINC1500_read+0xcc>)
   2f04a:	681b      	ldr	r3, [r3, #0]
   2f04c:	001a      	movs	r2, r3
   2f04e:	687b      	ldr	r3, [r7, #4]
   2f050:	4293      	cmp	r3, r2
   2f052:	dd02      	ble.n	2f05a <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2f054:	2301      	movs	r3, #1
   2f056:	425b      	negs	r3, r3
   2f058:	e015      	b.n	2f086 <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2f05a:	4b13      	ldr	r3, [pc, #76]	; (2f0a8 <WINC1500_read+0xe4>)
   2f05c:	681a      	ldr	r2, [r3, #0]
   2f05e:	4b0e      	ldr	r3, [pc, #56]	; (2f098 <WINC1500_read+0xd4>)
   2f060:	18d1      	adds	r1, r2, r3
   2f062:	687a      	ldr	r2, [r7, #4]
   2f064:	68bb      	ldr	r3, [r7, #8]
   2f066:	0018      	movs	r0, r3
   2f068:	4b10      	ldr	r3, [pc, #64]	; (2f0ac <WINC1500_read+0xe8>)
   2f06a:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2f06c:	4b08      	ldr	r3, [pc, #32]	; (2f090 <WINC1500_read+0xcc>)
   2f06e:	681a      	ldr	r2, [r3, #0]
   2f070:	687b      	ldr	r3, [r7, #4]
   2f072:	1ad2      	subs	r2, r2, r3
   2f074:	4b06      	ldr	r3, [pc, #24]	; (2f090 <WINC1500_read+0xcc>)
   2f076:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2f078:	4b0b      	ldr	r3, [pc, #44]	; (2f0a8 <WINC1500_read+0xe4>)
   2f07a:	681a      	ldr	r2, [r3, #0]
   2f07c:	687b      	ldr	r3, [r7, #4]
   2f07e:	18d2      	adds	r2, r2, r3
   2f080:	4b09      	ldr	r3, [pc, #36]	; (2f0a8 <WINC1500_read+0xe4>)
   2f082:	601a      	str	r2, [r3, #0]
  
  return len;
   2f084:	687b      	ldr	r3, [r7, #4]
}
   2f086:	0018      	movs	r0, r3
   2f088:	46bd      	mov	sp, r7
   2f08a:	b005      	add	sp, #20
   2f08c:	bd90      	pop	{r4, r7, pc}
   2f08e:	46c0      	nop			; (mov r8, r8)
   2f090:	200042ac 	.word	0x200042ac
   2f094:	200041a7 	.word	0x200041a7
   2f098:	200041a8 	.word	0x200041a8
   2f09c:	00025679 	.word	0x00025679
   2f0a0:	00021bc1 	.word	0x00021bc1
   2f0a4:	200041a0 	.word	0x200041a0
   2f0a8:	200042a8 	.word	0x200042a8
   2f0ac:	000345f9 	.word	0x000345f9

0002f0b0 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2f0b0:	b590      	push	{r4, r7, lr}
   2f0b2:	b085      	sub	sp, #20
   2f0b4:	af00      	add	r7, sp, #0
   2f0b6:	60f8      	str	r0, [r7, #12]
   2f0b8:	60b9      	str	r1, [r7, #8]
   2f0ba:	607a      	str	r2, [r7, #4]
   2f0bc:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2f0be:	4b10      	ldr	r3, [pc, #64]	; (2f100 <WINC1500_write+0x50>)
   2f0c0:	2200      	movs	r2, #0
   2f0c2:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2f0c4:	68fb      	ldr	r3, [r7, #12]
   2f0c6:	681b      	ldr	r3, [r3, #0]
   2f0c8:	b258      	sxtb	r0, r3
   2f0ca:	687b      	ldr	r3, [r7, #4]
   2f0cc:	b29a      	uxth	r2, r3
   2f0ce:	68b9      	ldr	r1, [r7, #8]
   2f0d0:	2300      	movs	r3, #0
   2f0d2:	4c0c      	ldr	r4, [pc, #48]	; (2f104 <WINC1500_write+0x54>)
   2f0d4:	47a0      	blx	r4
   2f0d6:	1e03      	subs	r3, r0, #0
   2f0d8:	d005      	beq.n	2f0e6 <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2f0da:	2301      	movs	r3, #1
   2f0dc:	425b      	negs	r3, r3
   2f0de:	e00a      	b.n	2f0f6 <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2f0e0:	2000      	movs	r0, #0
   2f0e2:	4b09      	ldr	r3, [pc, #36]	; (2f108 <WINC1500_write+0x58>)
   2f0e4:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2f0e6:	4b06      	ldr	r3, [pc, #24]	; (2f100 <WINC1500_write+0x50>)
   2f0e8:	781b      	ldrb	r3, [r3, #0]
   2f0ea:	2201      	movs	r2, #1
   2f0ec:	4053      	eors	r3, r2
   2f0ee:	b2db      	uxtb	r3, r3
   2f0f0:	2b00      	cmp	r3, #0
   2f0f2:	d1f5      	bne.n	2f0e0 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2f0f4:	687b      	ldr	r3, [r7, #4]
}
   2f0f6:	0018      	movs	r0, r3
   2f0f8:	46bd      	mov	sp, r7
   2f0fa:	b005      	add	sp, #20
   2f0fc:	bd90      	pop	{r4, r7, pc}
   2f0fe:	46c0      	nop			; (mov r8, r8)
   2f100:	200041a6 	.word	0x200041a6
   2f104:	00025515 	.word	0x00025515
   2f108:	00021bc1 	.word	0x00021bc1

0002f10c <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2f10c:	b580      	push	{r7, lr}
   2f10e:	b082      	sub	sp, #8
   2f110:	af00      	add	r7, sp, #0
   2f112:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2f114:	687b      	ldr	r3, [r7, #4]
   2f116:	681b      	ldr	r3, [r3, #0]
   2f118:	b25b      	sxtb	r3, r3
   2f11a:	0018      	movs	r0, r3
   2f11c:	4b06      	ldr	r3, [pc, #24]	; (2f138 <WINC1500_disconnect+0x2c>)
   2f11e:	4798      	blx	r3
	n->socket=-1;
   2f120:	687b      	ldr	r3, [r7, #4]
   2f122:	2201      	movs	r2, #1
   2f124:	4252      	negs	r2, r2
   2f126:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2f128:	4b04      	ldr	r3, [pc, #16]	; (2f13c <WINC1500_disconnect+0x30>)
   2f12a:	2200      	movs	r2, #0
   2f12c:	701a      	strb	r2, [r3, #0]
}
   2f12e:	46c0      	nop			; (mov r8, r8)
   2f130:	46bd      	mov	sp, r7
   2f132:	b002      	add	sp, #8
   2f134:	bd80      	pop	{r7, pc}
   2f136:	46c0      	nop			; (mov r8, r8)
   2f138:	000257f9 	.word	0x000257f9
   2f13c:	200041a5 	.word	0x200041a5

0002f140 <NetworkInit>:


void NetworkInit(Network* n) {
   2f140:	b580      	push	{r7, lr}
   2f142:	b082      	sub	sp, #8
   2f144:	af00      	add	r7, sp, #0
   2f146:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2f148:	687b      	ldr	r3, [r7, #4]
   2f14a:	2201      	movs	r2, #1
   2f14c:	4252      	negs	r2, r2
   2f14e:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2f150:	687b      	ldr	r3, [r7, #4]
   2f152:	4a06      	ldr	r2, [pc, #24]	; (2f16c <NetworkInit+0x2c>)
   2f154:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2f156:	687b      	ldr	r3, [r7, #4]
   2f158:	4a05      	ldr	r2, [pc, #20]	; (2f170 <NetworkInit+0x30>)
   2f15a:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2f15c:	687b      	ldr	r3, [r7, #4]
   2f15e:	4a05      	ldr	r2, [pc, #20]	; (2f174 <NetworkInit+0x34>)
   2f160:	611a      	str	r2, [r3, #16]
}
   2f162:	46c0      	nop			; (mov r8, r8)
   2f164:	46bd      	mov	sp, r7
   2f166:	b002      	add	sp, #8
   2f168:	bd80      	pop	{r7, pc}
   2f16a:	46c0      	nop			; (mov r8, r8)
   2f16c:	0002efc5 	.word	0x0002efc5
   2f170:	0002f0b1 	.word	0x0002f0b1
   2f174:	0002f10d 	.word	0x0002f10d

0002f178 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2f178:	b580      	push	{r7, lr}
   2f17a:	b088      	sub	sp, #32
   2f17c:	af00      	add	r7, sp, #0
   2f17e:	60f8      	str	r0, [r7, #12]
   2f180:	60b9      	str	r1, [r7, #8]
   2f182:	607a      	str	r2, [r7, #4]
   2f184:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2f186:	4b37      	ldr	r3, [pc, #220]	; (2f264 <ConnectNetwork+0xec>)
   2f188:	2200      	movs	r2, #0
   2f18a:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2f18c:	4b36      	ldr	r3, [pc, #216]	; (2f268 <ConnectNetwork+0xf0>)
   2f18e:	68ba      	ldr	r2, [r7, #8]
   2f190:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2f192:	68bb      	ldr	r3, [r7, #8]
   2f194:	0018      	movs	r0, r3
   2f196:	4b35      	ldr	r3, [pc, #212]	; (2f26c <ConnectNetwork+0xf4>)
   2f198:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2f19a:	e002      	b.n	2f1a2 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2f19c:	2000      	movs	r0, #0
   2f19e:	4b34      	ldr	r3, [pc, #208]	; (2f270 <ConnectNetwork+0xf8>)
   2f1a0:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2f1a2:	4b30      	ldr	r3, [pc, #192]	; (2f264 <ConnectNetwork+0xec>)
   2f1a4:	781b      	ldrb	r3, [r3, #0]
   2f1a6:	2201      	movs	r2, #1
   2f1a8:	4053      	eors	r3, r2
   2f1aa:	b2db      	uxtb	r3, r3
   2f1ac:	2b00      	cmp	r3, #0
   2f1ae:	d1f5      	bne.n	2f19c <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2f1b0:	4b30      	ldr	r3, [pc, #192]	; (2f274 <ConnectNetwork+0xfc>)
   2f1b2:	681a      	ldr	r2, [r3, #0]
   2f1b4:	68fb      	ldr	r3, [r7, #12]
   2f1b6:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2f1b8:	2310      	movs	r3, #16
   2f1ba:	18fb      	adds	r3, r7, r3
   2f1bc:	2202      	movs	r2, #2
   2f1be:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2f1c0:	687b      	ldr	r3, [r7, #4]
   2f1c2:	b29b      	uxth	r3, r3
   2f1c4:	021b      	lsls	r3, r3, #8
   2f1c6:	b21a      	sxth	r2, r3
   2f1c8:	687b      	ldr	r3, [r7, #4]
   2f1ca:	b29b      	uxth	r3, r3
   2f1cc:	0a1b      	lsrs	r3, r3, #8
   2f1ce:	b29b      	uxth	r3, r3
   2f1d0:	b21b      	sxth	r3, r3
   2f1d2:	4313      	orrs	r3, r2
   2f1d4:	b21b      	sxth	r3, r3
   2f1d6:	b29a      	uxth	r2, r3
   2f1d8:	2310      	movs	r3, #16
   2f1da:	18fb      	adds	r3, r7, r3
   2f1dc:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2f1de:	4b25      	ldr	r3, [pc, #148]	; (2f274 <ConnectNetwork+0xfc>)
   2f1e0:	681b      	ldr	r3, [r3, #0]
   2f1e2:	001a      	movs	r2, r3
   2f1e4:	2310      	movs	r3, #16
   2f1e6:	18fb      	adds	r3, r7, r3
   2f1e8:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2f1ea:	68fb      	ldr	r3, [r7, #12]
   2f1ec:	681b      	ldr	r3, [r3, #0]
   2f1ee:	2b00      	cmp	r3, #0
   2f1f0:	da0a      	bge.n	2f208 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2f1f2:	683b      	ldr	r3, [r7, #0]
   2f1f4:	b2db      	uxtb	r3, r3
   2f1f6:	001a      	movs	r2, r3
   2f1f8:	2101      	movs	r1, #1
   2f1fa:	2002      	movs	r0, #2
   2f1fc:	4b1e      	ldr	r3, [pc, #120]	; (2f278 <ConnectNetwork+0x100>)
   2f1fe:	4798      	blx	r3
   2f200:	0003      	movs	r3, r0
   2f202:	001a      	movs	r2, r3
   2f204:	68fb      	ldr	r3, [r7, #12]
   2f206:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2f208:	68fb      	ldr	r3, [r7, #12]
   2f20a:	681b      	ldr	r3, [r3, #0]
   2f20c:	3301      	adds	r3, #1
   2f20e:	d108      	bne.n	2f222 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2f210:	68fb      	ldr	r3, [r7, #12]
   2f212:	681b      	ldr	r3, [r3, #0]
   2f214:	b25b      	sxtb	r3, r3
   2f216:	0018      	movs	r0, r3
   2f218:	4b18      	ldr	r3, [pc, #96]	; (2f27c <ConnectNetwork+0x104>)
   2f21a:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2f21c:	2309      	movs	r3, #9
   2f21e:	425b      	negs	r3, r3
   2f220:	e01c      	b.n	2f25c <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2f222:	68fb      	ldr	r3, [r7, #12]
   2f224:	681b      	ldr	r3, [r3, #0]
   2f226:	b25b      	sxtb	r3, r3
   2f228:	2210      	movs	r2, #16
   2f22a:	18b9      	adds	r1, r7, r2
   2f22c:	2210      	movs	r2, #16
   2f22e:	0018      	movs	r0, r3
   2f230:	4b13      	ldr	r3, [pc, #76]	; (2f280 <ConnectNetwork+0x108>)
   2f232:	4798      	blx	r3
   2f234:	1e03      	subs	r3, r0, #0
   2f236:	d002      	beq.n	2f23e <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2f238:	2309      	movs	r3, #9
   2f23a:	425b      	negs	r3, r3
   2f23c:	e00e      	b.n	2f25c <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2f23e:	4b11      	ldr	r3, [pc, #68]	; (2f284 <ConnectNetwork+0x10c>)
   2f240:	2200      	movs	r2, #0
   2f242:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2f244:	e002      	b.n	2f24c <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2f246:	2000      	movs	r0, #0
   2f248:	4b09      	ldr	r3, [pc, #36]	; (2f270 <ConnectNetwork+0xf8>)
   2f24a:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2f24c:	4b0d      	ldr	r3, [pc, #52]	; (2f284 <ConnectNetwork+0x10c>)
   2f24e:	781b      	ldrb	r3, [r3, #0]
   2f250:	2201      	movs	r2, #1
   2f252:	4053      	eors	r3, r2
   2f254:	b2db      	uxtb	r3, r3
   2f256:	2b00      	cmp	r3, #0
   2f258:	d1f5      	bne.n	2f246 <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2f25a:	2300      	movs	r3, #0
   2f25c:	0018      	movs	r0, r3
   2f25e:	46bd      	mov	sp, r7
   2f260:	b008      	add	sp, #32
   2f262:	bd80      	pop	{r7, pc}
   2f264:	200041a4 	.word	0x200041a4
   2f268:	200042b0 	.word	0x200042b0
   2f26c:	00025a41 	.word	0x00025a41
   2f270:	00021bc1 	.word	0x00021bc1
   2f274:	2000419c 	.word	0x2000419c
   2f278:	000251ed 	.word	0x000251ed
   2f27c:	000257f9 	.word	0x000257f9
   2f280:	00025401 	.word	0x00025401
   2f284:	200041a5 	.word	0x200041a5

0002f288 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2f288:	b580      	push	{r7, lr}
   2f28a:	b084      	sub	sp, #16
   2f28c:	af00      	add	r7, sp, #0
   2f28e:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2f290:	687b      	ldr	r3, [r7, #4]
   2f292:	2b00      	cmp	r3, #0
   2f294:	d022      	beq.n	2f2dc <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f296:	2300      	movs	r3, #0
   2f298:	60fb      	str	r3, [r7, #12]
   2f29a:	e01b      	b.n	2f2d4 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2f29c:	4a11      	ldr	r2, [pc, #68]	; (2f2e4 <allocateClient+0x5c>)
   2f29e:	68fb      	ldr	r3, [r7, #12]
   2f2a0:	2164      	movs	r1, #100	; 0x64
   2f2a2:	434b      	muls	r3, r1
   2f2a4:	18d3      	adds	r3, r2, r3
   2f2a6:	3360      	adds	r3, #96	; 0x60
   2f2a8:	681b      	ldr	r3, [r3, #0]
   2f2aa:	2b00      	cmp	r3, #0
   2f2ac:	d10f      	bne.n	2f2ce <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2f2ae:	4a0d      	ldr	r2, [pc, #52]	; (2f2e4 <allocateClient+0x5c>)
   2f2b0:	68fb      	ldr	r3, [r7, #12]
   2f2b2:	2164      	movs	r1, #100	; 0x64
   2f2b4:	434b      	muls	r3, r1
   2f2b6:	18d3      	adds	r3, r2, r3
   2f2b8:	3360      	adds	r3, #96	; 0x60
   2f2ba:	687a      	ldr	r2, [r7, #4]
   2f2bc:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2f2be:	68fb      	ldr	r3, [r7, #12]
   2f2c0:	2264      	movs	r2, #100	; 0x64
   2f2c2:	435a      	muls	r2, r3
   2f2c4:	4b07      	ldr	r3, [pc, #28]	; (2f2e4 <allocateClient+0x5c>)
   2f2c6:	18d2      	adds	r2, r2, r3
   2f2c8:	687b      	ldr	r3, [r7, #4]
   2f2ca:	61da      	str	r2, [r3, #28]
			return;
   2f2cc:	e007      	b.n	2f2de <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f2ce:	68fb      	ldr	r3, [r7, #12]
   2f2d0:	3301      	adds	r3, #1
   2f2d2:	60fb      	str	r3, [r7, #12]
   2f2d4:	68fb      	ldr	r3, [r7, #12]
   2f2d6:	2b06      	cmp	r3, #6
   2f2d8:	d9e0      	bls.n	2f29c <allocateClient+0x14>
   2f2da:	e000      	b.n	2f2de <allocateClient+0x56>
		return;
   2f2dc:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2f2de:	46bd      	mov	sp, r7
   2f2e0:	b004      	add	sp, #16
   2f2e2:	bd80      	pop	{r7, pc}
   2f2e4:	200042b4 	.word	0x200042b4

0002f2e8 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2f2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f2ea:	b089      	sub	sp, #36	; 0x24
   2f2ec:	af04      	add	r7, sp, #16
   2f2ee:	6078      	str	r0, [r7, #4]
   2f2f0:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2f2f2:	687b      	ldr	r3, [r7, #4]
   2f2f4:	2b00      	cmp	r3, #0
   2f2f6:	d00a      	beq.n	2f30e <mqtt_init+0x26>
   2f2f8:	683b      	ldr	r3, [r7, #0]
   2f2fa:	2b00      	cmp	r3, #0
   2f2fc:	d007      	beq.n	2f30e <mqtt_init+0x26>
   2f2fe:	683b      	ldr	r3, [r7, #0]
   2f300:	691b      	ldr	r3, [r3, #16]
   2f302:	2b00      	cmp	r3, #0
   2f304:	d003      	beq.n	2f30e <mqtt_init+0x26>
   2f306:	683b      	ldr	r3, [r7, #0]
   2f308:	689b      	ldr	r3, [r3, #8]
   2f30a:	2b00      	cmp	r3, #0
   2f30c:	d102      	bne.n	2f314 <mqtt_init+0x2c>
		return FAILURE;
   2f30e:	2301      	movs	r3, #1
   2f310:	425b      	negs	r3, r3
   2f312:	e034      	b.n	2f37e <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2f314:	683b      	ldr	r3, [r7, #0]
   2f316:	889b      	ldrh	r3, [r3, #4]
   2f318:	001a      	movs	r2, r3
   2f31a:	23fa      	movs	r3, #250	; 0xfa
   2f31c:	009b      	lsls	r3, r3, #2
   2f31e:	4353      	muls	r3, r2
   2f320:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2f322:	687b      	ldr	r3, [r7, #4]
   2f324:	3320      	adds	r3, #32
   2f326:	0018      	movs	r0, r3
   2f328:	4b17      	ldr	r3, [pc, #92]	; (2f388 <mqtt_init+0xa0>)
   2f32a:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2f32c:	687b      	ldr	r3, [r7, #4]
   2f32e:	3304      	adds	r3, #4
   2f330:	6839      	ldr	r1, [r7, #0]
   2f332:	2218      	movs	r2, #24
   2f334:	0018      	movs	r0, r3
   2f336:	4b15      	ldr	r3, [pc, #84]	; (2f38c <mqtt_init+0xa4>)
   2f338:	4798      	blx	r3
	allocateClient(module);
   2f33a:	687b      	ldr	r3, [r7, #4]
   2f33c:	0018      	movs	r0, r3
   2f33e:	4b14      	ldr	r3, [pc, #80]	; (2f390 <mqtt_init+0xa8>)
   2f340:	4798      	blx	r3
	
	if(module->client)
   2f342:	687b      	ldr	r3, [r7, #4]
   2f344:	69db      	ldr	r3, [r3, #28]
   2f346:	2b00      	cmp	r3, #0
   2f348:	d017      	beq.n	2f37a <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2f34a:	687b      	ldr	r3, [r7, #4]
   2f34c:	69d8      	ldr	r0, [r3, #28]
   2f34e:	687b      	ldr	r3, [r7, #4]
   2f350:	3320      	adds	r3, #32
   2f352:	001c      	movs	r4, r3
   2f354:	683b      	ldr	r3, [r7, #0]
   2f356:	691e      	ldr	r6, [r3, #16]
   2f358:	683b      	ldr	r3, [r7, #0]
   2f35a:	695a      	ldr	r2, [r3, #20]
   2f35c:	683b      	ldr	r3, [r7, #0]
   2f35e:	6899      	ldr	r1, [r3, #8]
   2f360:	683b      	ldr	r3, [r7, #0]
   2f362:	68db      	ldr	r3, [r3, #12]
   2f364:	68fd      	ldr	r5, [r7, #12]
   2f366:	9302      	str	r3, [sp, #8]
   2f368:	9101      	str	r1, [sp, #4]
   2f36a:	9200      	str	r2, [sp, #0]
   2f36c:	0033      	movs	r3, r6
   2f36e:	002a      	movs	r2, r5
   2f370:	0021      	movs	r1, r4
   2f372:	4c08      	ldr	r4, [pc, #32]	; (2f394 <mqtt_init+0xac>)
   2f374:	47a0      	blx	r4
		return SUCCESS;
   2f376:	2300      	movs	r3, #0
   2f378:	e001      	b.n	2f37e <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2f37a:	2301      	movs	r3, #1
   2f37c:	425b      	negs	r3, r3
}
   2f37e:	0018      	movs	r0, r3
   2f380:	46bd      	mov	sp, r7
   2f382:	b005      	add	sp, #20
   2f384:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f386:	46c0      	nop			; (mov r8, r8)
   2f388:	0002f141 	.word	0x0002f141
   2f38c:	000345f9 	.word	0x000345f9
   2f390:	0002f289 	.word	0x0002f289
   2f394:	0002e1b9 	.word	0x0002e1b9

0002f398 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2f398:	b580      	push	{r7, lr}
   2f39a:	b082      	sub	sp, #8
   2f39c:	af00      	add	r7, sp, #0
   2f39e:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2f3a0:	687b      	ldr	r3, [r7, #4]
   2f3a2:	4a0c      	ldr	r2, [pc, #48]	; (2f3d4 <mqtt_get_config_defaults+0x3c>)
   2f3a4:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2f3a6:	687b      	ldr	r3, [r7, #4]
   2f3a8:	2200      	movs	r2, #0
   2f3aa:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2f3ac:	687b      	ldr	r3, [r7, #4]
   2f3ae:	223c      	movs	r2, #60	; 0x3c
   2f3b0:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2f3b2:	687b      	ldr	r3, [r7, #4]
   2f3b4:	2200      	movs	r2, #0
   2f3b6:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2f3b8:	687b      	ldr	r3, [r7, #4]
   2f3ba:	2200      	movs	r2, #0
   2f3bc:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2f3be:	687b      	ldr	r3, [r7, #4]
   2f3c0:	2200      	movs	r2, #0
   2f3c2:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2f3c4:	687b      	ldr	r3, [r7, #4]
   2f3c6:	2200      	movs	r2, #0
   2f3c8:	615a      	str	r2, [r3, #20]
}
   2f3ca:	46c0      	nop			; (mov r8, r8)
   2f3cc:	46bd      	mov	sp, r7
   2f3ce:	b002      	add	sp, #8
   2f3d0:	bd80      	pop	{r7, pc}
   2f3d2:	46c0      	nop			; (mov r8, r8)
   2f3d4:	0000075b 	.word	0x0000075b

0002f3d8 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2f3d8:	b580      	push	{r7, lr}
   2f3da:	b082      	sub	sp, #8
   2f3dc:	af00      	add	r7, sp, #0
   2f3de:	6078      	str	r0, [r7, #4]
   2f3e0:	6039      	str	r1, [r7, #0]
	if(module)
   2f3e2:	687b      	ldr	r3, [r7, #4]
   2f3e4:	2b00      	cmp	r3, #0
   2f3e6:	d004      	beq.n	2f3f2 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2f3e8:	687b      	ldr	r3, [r7, #4]
   2f3ea:	683a      	ldr	r2, [r7, #0]
   2f3ec:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2f3ee:	2300      	movs	r3, #0
   2f3f0:	e001      	b.n	2f3f6 <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2f3f2:	2301      	movs	r3, #1
   2f3f4:	425b      	negs	r3, r3
}
   2f3f6:	0018      	movs	r0, r3
   2f3f8:	46bd      	mov	sp, r7
   2f3fa:	b002      	add	sp, #8
   2f3fc:	bd80      	pop	{r7, pc}
	...

0002f400 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2f400:	b580      	push	{r7, lr}
   2f402:	b082      	sub	sp, #8
   2f404:	af00      	add	r7, sp, #0
   2f406:	603a      	str	r2, [r7, #0]
   2f408:	1dfb      	adds	r3, r7, #7
   2f40a:	1c02      	adds	r2, r0, #0
   2f40c:	701a      	strb	r2, [r3, #0]
   2f40e:	1dbb      	adds	r3, r7, #6
   2f410:	1c0a      	adds	r2, r1, #0
   2f412:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2f414:	683a      	ldr	r2, [r7, #0]
   2f416:	1dbb      	adds	r3, r7, #6
   2f418:	7819      	ldrb	r1, [r3, #0]
   2f41a:	1dfb      	adds	r3, r7, #7
   2f41c:	781b      	ldrb	r3, [r3, #0]
   2f41e:	b25b      	sxtb	r3, r3
   2f420:	0018      	movs	r0, r3
   2f422:	4b03      	ldr	r3, [pc, #12]	; (2f430 <mqtt_socket_event_handler+0x30>)
   2f424:	4798      	blx	r3
}
   2f426:	46c0      	nop			; (mov r8, r8)
   2f428:	46bd      	mov	sp, r7
   2f42a:	b002      	add	sp, #8
   2f42c:	bd80      	pop	{r7, pc}
   2f42e:	46c0      	nop			; (mov r8, r8)
   2f430:	0002ee7d 	.word	0x0002ee7d

0002f434 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2f434:	b580      	push	{r7, lr}
   2f436:	b082      	sub	sp, #8
   2f438:	af00      	add	r7, sp, #0
   2f43a:	6078      	str	r0, [r7, #4]
   2f43c:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2f43e:	683a      	ldr	r2, [r7, #0]
   2f440:	687b      	ldr	r3, [r7, #4]
   2f442:	0011      	movs	r1, r2
   2f444:	0018      	movs	r0, r3
   2f446:	4b03      	ldr	r3, [pc, #12]	; (2f454 <mqtt_socket_resolve_handler+0x20>)
   2f448:	4798      	blx	r3
}
   2f44a:	46c0      	nop			; (mov r8, r8)
   2f44c:	46bd      	mov	sp, r7
   2f44e:	b002      	add	sp, #8
   2f450:	bd80      	pop	{r7, pc}
   2f452:	46c0      	nop			; (mov r8, r8)
   2f454:	0002ee2d 	.word	0x0002ee2d

0002f458 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2f458:	b590      	push	{r4, r7, lr}
   2f45a:	b085      	sub	sp, #20
   2f45c:	af00      	add	r7, sp, #0
   2f45e:	6078      	str	r0, [r7, #4]
   2f460:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2f462:	687b      	ldr	r3, [r7, #4]
   2f464:	3320      	adds	r3, #32
   2f466:	0018      	movs	r0, r3
   2f468:	687b      	ldr	r3, [r7, #4]
   2f46a:	889b      	ldrh	r3, [r3, #4]
   2f46c:	001a      	movs	r2, r3
   2f46e:	687b      	ldr	r3, [r7, #4]
   2f470:	799b      	ldrb	r3, [r3, #6]
   2f472:	6839      	ldr	r1, [r7, #0]
   2f474:	4c09      	ldr	r4, [pc, #36]	; (2f49c <mqtt_connect+0x44>)
   2f476:	47a0      	blx	r4
   2f478:	0003      	movs	r3, r0
   2f47a:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2f47c:	687b      	ldr	r3, [r7, #4]
   2f47e:	681b      	ldr	r3, [r3, #0]
   2f480:	2b00      	cmp	r3, #0
   2f482:	d006      	beq.n	2f492 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2f484:	687b      	ldr	r3, [r7, #4]
   2f486:	681b      	ldr	r3, [r3, #0]
   2f488:	220c      	movs	r2, #12
   2f48a:	18ba      	adds	r2, r7, r2
   2f48c:	6878      	ldr	r0, [r7, #4]
   2f48e:	2100      	movs	r1, #0
   2f490:	4798      	blx	r3
	return connResult.sock_connected.result;
   2f492:	68fb      	ldr	r3, [r7, #12]
}
   2f494:	0018      	movs	r0, r3
   2f496:	46bd      	mov	sp, r7
   2f498:	b005      	add	sp, #20
   2f49a:	bd90      	pop	{r4, r7, pc}
   2f49c:	0002f179 	.word	0x0002f179

0002f4a0 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2f4a0:	b580      	push	{r7, lr}
   2f4a2:	b09c      	sub	sp, #112	; 0x70
   2f4a4:	af00      	add	r7, sp, #0
   2f4a6:	60f8      	str	r0, [r7, #12]
   2f4a8:	607a      	str	r2, [r7, #4]
   2f4aa:	603b      	str	r3, [r7, #0]
   2f4ac:	230b      	movs	r3, #11
   2f4ae:	18fb      	adds	r3, r7, r3
   2f4b0:	1c0a      	adds	r2, r1, #0
   2f4b2:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2f4b4:	2310      	movs	r3, #16
   2f4b6:	18fa      	adds	r2, r7, r3
   2f4b8:	4b31      	ldr	r3, [pc, #196]	; (2f580 <mqtt_connect_broker+0xe0>)
   2f4ba:	0010      	movs	r0, r2
   2f4bc:	0019      	movs	r1, r3
   2f4be:	2358      	movs	r3, #88	; 0x58
   2f4c0:	001a      	movs	r2, r3
   2f4c2:	4b30      	ldr	r3, [pc, #192]	; (2f584 <mqtt_connect_broker+0xe4>)
   2f4c4:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2f4c6:	2310      	movs	r3, #16
   2f4c8:	18fb      	adds	r3, r7, r3
   2f4ca:	2204      	movs	r2, #4
   2f4cc:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2f4ce:	2310      	movs	r3, #16
   2f4d0:	18fb      	adds	r3, r7, r3
   2f4d2:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2f4d4:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2f4d6:	2310      	movs	r3, #16
   2f4d8:	18fb      	adds	r3, r7, r3
   2f4da:	687a      	ldr	r2, [r7, #4]
   2f4dc:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2f4de:	2310      	movs	r3, #16
   2f4e0:	18fb      	adds	r3, r7, r3
   2f4e2:	683a      	ldr	r2, [r7, #0]
   2f4e4:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2f4e6:	2310      	movs	r3, #16
   2f4e8:	18fb      	adds	r3, r7, r3
   2f4ea:	220b      	movs	r2, #11
   2f4ec:	18ba      	adds	r2, r7, r2
   2f4ee:	7812      	ldrb	r2, [r2, #0]
   2f4f0:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2f4f2:	2310      	movs	r3, #16
   2f4f4:	18fb      	adds	r3, r7, r3
   2f4f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2f4f8:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2f4fa:	2310      	movs	r3, #16
   2f4fc:	18fb      	adds	r3, r7, r3
   2f4fe:	2280      	movs	r2, #128	; 0x80
   2f500:	18ba      	adds	r2, r7, r2
   2f502:	6812      	ldr	r2, [r2, #0]
   2f504:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2f506:	2310      	movs	r3, #16
   2f508:	18fb      	adds	r3, r7, r3
   2f50a:	228c      	movs	r2, #140	; 0x8c
   2f50c:	18ba      	adds	r2, r7, r2
   2f50e:	213c      	movs	r1, #60	; 0x3c
   2f510:	7812      	ldrb	r2, [r2, #0]
   2f512:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2f514:	2310      	movs	r3, #16
   2f516:	18fb      	adds	r3, r7, r3
   2f518:	2288      	movs	r2, #136	; 0x88
   2f51a:	18ba      	adds	r2, r7, r2
   2f51c:	213d      	movs	r1, #61	; 0x3d
   2f51e:	7812      	ldrb	r2, [r2, #0]
   2f520:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2f522:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2f524:	2b00      	cmp	r3, #0
   2f526:	d008      	beq.n	2f53a <mqtt_connect_broker+0x9a>
   2f528:	2380      	movs	r3, #128	; 0x80
   2f52a:	18fb      	adds	r3, r7, r3
   2f52c:	681b      	ldr	r3, [r3, #0]
   2f52e:	2b00      	cmp	r3, #0
   2f530:	d003      	beq.n	2f53a <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2f532:	2310      	movs	r3, #16
   2f534:	18fb      	adds	r3, r7, r3
   2f536:	2201      	movs	r2, #1
   2f538:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2f53a:	68fb      	ldr	r3, [r7, #12]
   2f53c:	69db      	ldr	r3, [r3, #28]
   2f53e:	2210      	movs	r2, #16
   2f540:	18ba      	adds	r2, r7, r2
   2f542:	0011      	movs	r1, r2
   2f544:	0018      	movs	r0, r3
   2f546:	4b10      	ldr	r3, [pc, #64]	; (2f588 <mqtt_connect_broker+0xe8>)
   2f548:	4798      	blx	r3
   2f54a:	0003      	movs	r3, r0
   2f54c:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2f54e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2f550:	b2da      	uxtb	r2, r3
   2f552:	2368      	movs	r3, #104	; 0x68
   2f554:	18fb      	adds	r3, r7, r3
   2f556:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2f558:	68fb      	ldr	r3, [r7, #12]
   2f55a:	681b      	ldr	r3, [r3, #0]
   2f55c:	2b00      	cmp	r3, #0
   2f55e:	d006      	beq.n	2f56e <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2f560:	68fb      	ldr	r3, [r7, #12]
   2f562:	681b      	ldr	r3, [r3, #0]
   2f564:	2268      	movs	r2, #104	; 0x68
   2f566:	18ba      	adds	r2, r7, r2
   2f568:	68f8      	ldr	r0, [r7, #12]
   2f56a:	2101      	movs	r1, #1
   2f56c:	4798      	blx	r3
	
	module->isConnected = true;
   2f56e:	68fb      	ldr	r3, [r7, #12]
   2f570:	2234      	movs	r2, #52	; 0x34
   2f572:	2101      	movs	r1, #1
   2f574:	5499      	strb	r1, [r3, r2]
	return rc;
   2f576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2f578:	0018      	movs	r0, r3
   2f57a:	46bd      	mov	sp, r7
   2f57c:	b01c      	add	sp, #112	; 0x70
   2f57e:	bd80      	pop	{r7, pc}
   2f580:	00039854 	.word	0x00039854
   2f584:	000345f9 	.word	0x000345f9
   2f588:	0002e8c9 	.word	0x0002e8c9

0002f58c <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2f58c:	b580      	push	{r7, lr}
   2f58e:	b084      	sub	sp, #16
   2f590:	af00      	add	r7, sp, #0
   2f592:	6078      	str	r0, [r7, #4]
   2f594:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2f596:	687b      	ldr	r3, [r7, #4]
   2f598:	69db      	ldr	r3, [r3, #28]
   2f59a:	0018      	movs	r0, r3
   2f59c:	4b0c      	ldr	r3, [pc, #48]	; (2f5d0 <mqtt_disconnect+0x44>)
   2f59e:	4798      	blx	r3
   2f5a0:	0003      	movs	r3, r0
   2f5a2:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2f5a4:	68fb      	ldr	r3, [r7, #12]
   2f5a6:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2f5a8:	687b      	ldr	r3, [r7, #4]
   2f5aa:	681b      	ldr	r3, [r3, #0]
   2f5ac:	2b00      	cmp	r3, #0
   2f5ae:	d006      	beq.n	2f5be <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2f5b0:	687b      	ldr	r3, [r7, #4]
   2f5b2:	681b      	ldr	r3, [r3, #0]
   2f5b4:	2208      	movs	r2, #8
   2f5b6:	18ba      	adds	r2, r7, r2
   2f5b8:	6878      	ldr	r0, [r7, #4]
   2f5ba:	2105      	movs	r1, #5
   2f5bc:	4798      	blx	r3
	
	module->isConnected = false;
   2f5be:	687b      	ldr	r3, [r7, #4]
   2f5c0:	2234      	movs	r2, #52	; 0x34
   2f5c2:	2100      	movs	r1, #0
   2f5c4:	5499      	strb	r1, [r3, r2]
	return rc;
   2f5c6:	68fb      	ldr	r3, [r7, #12]
}
   2f5c8:	0018      	movs	r0, r3
   2f5ca:	46bd      	mov	sp, r7
   2f5cc:	b004      	add	sp, #16
   2f5ce:	bd80      	pop	{r7, pc}
   2f5d0:	0002ed55 	.word	0x0002ed55

0002f5d4 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   2f5d4:	b580      	push	{r7, lr}
   2f5d6:	b08a      	sub	sp, #40	; 0x28
   2f5d8:	af00      	add	r7, sp, #0
   2f5da:	60f8      	str	r0, [r7, #12]
   2f5dc:	60b9      	str	r1, [r7, #8]
   2f5de:	607a      	str	r2, [r7, #4]
   2f5e0:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2f5e2:	2314      	movs	r3, #20
   2f5e4:	18fb      	adds	r3, r7, r3
   2f5e6:	2230      	movs	r2, #48	; 0x30
   2f5e8:	18ba      	adds	r2, r7, r2
   2f5ea:	7812      	ldrb	r2, [r2, #0]
   2f5ec:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   2f5ee:	2314      	movs	r3, #20
   2f5f0:	18fb      	adds	r3, r7, r3
   2f5f2:	687a      	ldr	r2, [r7, #4]
   2f5f4:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   2f5f6:	2314      	movs	r3, #20
   2f5f8:	18fb      	adds	r3, r7, r3
   2f5fa:	683a      	ldr	r2, [r7, #0]
   2f5fc:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   2f5fe:	2314      	movs	r3, #20
   2f600:	18fb      	adds	r3, r7, r3
   2f602:	2234      	movs	r2, #52	; 0x34
   2f604:	18ba      	adds	r2, r7, r2
   2f606:	7812      	ldrb	r2, [r2, #0]
   2f608:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   2f60a:	68fb      	ldr	r3, [r7, #12]
   2f60c:	69db      	ldr	r3, [r3, #28]
   2f60e:	2214      	movs	r2, #20
   2f610:	18ba      	adds	r2, r7, r2
   2f612:	68b9      	ldr	r1, [r7, #8]
   2f614:	0018      	movs	r0, r3
   2f616:	4b09      	ldr	r3, [pc, #36]	; (2f63c <mqtt_publish+0x68>)
   2f618:	4798      	blx	r3
   2f61a:	0003      	movs	r3, r0
   2f61c:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   2f61e:	68fb      	ldr	r3, [r7, #12]
   2f620:	681b      	ldr	r3, [r3, #0]
   2f622:	2b00      	cmp	r3, #0
   2f624:	d005      	beq.n	2f632 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   2f626:	68fb      	ldr	r3, [r7, #12]
   2f628:	681b      	ldr	r3, [r3, #0]
   2f62a:	68f8      	ldr	r0, [r7, #12]
   2f62c:	2200      	movs	r2, #0
   2f62e:	2102      	movs	r1, #2
   2f630:	4798      	blx	r3
	
	return rc;
   2f632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f634:	0018      	movs	r0, r3
   2f636:	46bd      	mov	sp, r7
   2f638:	b00a      	add	sp, #40	; 0x28
   2f63a:	bd80      	pop	{r7, pc}
   2f63c:	0002eb95 	.word	0x0002eb95

0002f640 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2f640:	b590      	push	{r4, r7, lr}
   2f642:	b087      	sub	sp, #28
   2f644:	af00      	add	r7, sp, #0
   2f646:	60f8      	str	r0, [r7, #12]
   2f648:	60b9      	str	r1, [r7, #8]
   2f64a:	603b      	str	r3, [r7, #0]
   2f64c:	1dfb      	adds	r3, r7, #7
   2f64e:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2f650:	68fb      	ldr	r3, [r7, #12]
   2f652:	69d8      	ldr	r0, [r3, #28]
   2f654:	683c      	ldr	r4, [r7, #0]
   2f656:	1dfb      	adds	r3, r7, #7
   2f658:	781a      	ldrb	r2, [r3, #0]
   2f65a:	68b9      	ldr	r1, [r7, #8]
   2f65c:	0023      	movs	r3, r4
   2f65e:	4c09      	ldr	r4, [pc, #36]	; (2f684 <mqtt_subscribe+0x44>)
   2f660:	47a0      	blx	r4
   2f662:	0003      	movs	r3, r0
   2f664:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   2f666:	68fb      	ldr	r3, [r7, #12]
   2f668:	681b      	ldr	r3, [r3, #0]
   2f66a:	2b00      	cmp	r3, #0
   2f66c:	d005      	beq.n	2f67a <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2f66e:	68fb      	ldr	r3, [r7, #12]
   2f670:	681b      	ldr	r3, [r3, #0]
   2f672:	68f8      	ldr	r0, [r7, #12]
   2f674:	2200      	movs	r2, #0
   2f676:	2103      	movs	r1, #3
   2f678:	4798      	blx	r3
	
	return rc;
   2f67a:	697b      	ldr	r3, [r7, #20]
}
   2f67c:	0018      	movs	r0, r3
   2f67e:	46bd      	mov	sp, r7
   2f680:	b007      	add	sp, #28
   2f682:	bd90      	pop	{r4, r7, pc}
   2f684:	0002ea09 	.word	0x0002ea09

0002f688 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2f688:	b580      	push	{r7, lr}
   2f68a:	b082      	sub	sp, #8
   2f68c:	af00      	add	r7, sp, #0
   2f68e:	6078      	str	r0, [r7, #4]
   2f690:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   2f692:	687b      	ldr	r3, [r7, #4]
   2f694:	69db      	ldr	r3, [r3, #28]
   2f696:	683a      	ldr	r2, [r7, #0]
   2f698:	0011      	movs	r1, r2
   2f69a:	0018      	movs	r0, r3
   2f69c:	4b03      	ldr	r3, [pc, #12]	; (2f6ac <mqtt_yield+0x24>)
   2f69e:	4798      	blx	r3
   2f6a0:	0003      	movs	r3, r0
   2f6a2:	0018      	movs	r0, r3
   2f6a4:	46bd      	mov	sp, r7
   2f6a6:	b002      	add	sp, #8
   2f6a8:	bd80      	pop	{r7, pc}
   2f6aa:	46c0      	nop			; (mov r8, r8)
   2f6ac:	0002e811 	.word	0x0002e811

0002f6b0 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   2f6b0:	b590      	push	{r4, r7, lr}
   2f6b2:	b085      	sub	sp, #20
   2f6b4:	af00      	add	r7, sp, #0
   2f6b6:	6078      	str	r0, [r7, #4]
	int len = 0;
   2f6b8:	2300      	movs	r3, #0
   2f6ba:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   2f6bc:	687b      	ldr	r3, [r7, #4]
   2f6be:	7a1b      	ldrb	r3, [r3, #8]
   2f6c0:	2b03      	cmp	r3, #3
   2f6c2:	d102      	bne.n	2f6ca <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   2f6c4:	230c      	movs	r3, #12
   2f6c6:	60fb      	str	r3, [r7, #12]
   2f6c8:	e005      	b.n	2f6d6 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   2f6ca:	687b      	ldr	r3, [r7, #4]
   2f6cc:	7a1b      	ldrb	r3, [r3, #8]
   2f6ce:	2b04      	cmp	r3, #4
   2f6d0:	d101      	bne.n	2f6d6 <MQTTSerialize_connectLength+0x26>
		len = 10;
   2f6d2:	230a      	movs	r3, #10
   2f6d4:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   2f6d6:	687b      	ldr	r3, [r7, #4]
   2f6d8:	68d8      	ldr	r0, [r3, #12]
   2f6da:	6919      	ldr	r1, [r3, #16]
   2f6dc:	695a      	ldr	r2, [r3, #20]
   2f6de:	4b25      	ldr	r3, [pc, #148]	; (2f774 <MQTTSerialize_connectLength+0xc4>)
   2f6e0:	4798      	blx	r3
   2f6e2:	0003      	movs	r3, r0
   2f6e4:	3302      	adds	r3, #2
   2f6e6:	68fa      	ldr	r2, [r7, #12]
   2f6e8:	18d3      	adds	r3, r2, r3
   2f6ea:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   2f6ec:	687b      	ldr	r3, [r7, #4]
   2f6ee:	7edb      	ldrb	r3, [r3, #27]
   2f6f0:	2b00      	cmp	r3, #0
   2f6f2:	d013      	beq.n	2f71c <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   2f6f4:	687b      	ldr	r3, [r7, #4]
   2f6f6:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2f6f8:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2f6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2f6fc:	4b1d      	ldr	r3, [pc, #116]	; (2f774 <MQTTSerialize_connectLength+0xc4>)
   2f6fe:	4798      	blx	r3
   2f700:	0003      	movs	r3, r0
   2f702:	1c9c      	adds	r4, r3, #2
   2f704:	687b      	ldr	r3, [r7, #4]
   2f706:	6b18      	ldr	r0, [r3, #48]	; 0x30
   2f708:	6b59      	ldr	r1, [r3, #52]	; 0x34
   2f70a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2f70c:	4b19      	ldr	r3, [pc, #100]	; (2f774 <MQTTSerialize_connectLength+0xc4>)
   2f70e:	4798      	blx	r3
   2f710:	0003      	movs	r3, r0
   2f712:	18e3      	adds	r3, r4, r3
   2f714:	3302      	adds	r3, #2
   2f716:	68fa      	ldr	r2, [r7, #12]
   2f718:	18d3      	adds	r3, r2, r3
   2f71a:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   2f71c:	687b      	ldr	r3, [r7, #4]
   2f71e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2f720:	2b00      	cmp	r3, #0
   2f722:	d103      	bne.n	2f72c <MQTTSerialize_connectLength+0x7c>
   2f724:	687b      	ldr	r3, [r7, #4]
   2f726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f728:	2b00      	cmp	r3, #0
   2f72a:	d00a      	beq.n	2f742 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   2f72c:	687b      	ldr	r3, [r7, #4]
   2f72e:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2f730:	6c59      	ldr	r1, [r3, #68]	; 0x44
   2f732:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2f734:	4b0f      	ldr	r3, [pc, #60]	; (2f774 <MQTTSerialize_connectLength+0xc4>)
   2f736:	4798      	blx	r3
   2f738:	0003      	movs	r3, r0
   2f73a:	3302      	adds	r3, #2
   2f73c:	68fa      	ldr	r2, [r7, #12]
   2f73e:	18d3      	adds	r3, r2, r3
   2f740:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   2f742:	687b      	ldr	r3, [r7, #4]
   2f744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f746:	2b00      	cmp	r3, #0
   2f748:	d103      	bne.n	2f752 <MQTTSerialize_connectLength+0xa2>
   2f74a:	687b      	ldr	r3, [r7, #4]
   2f74c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f74e:	2b00      	cmp	r3, #0
   2f750:	d00a      	beq.n	2f768 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   2f752:	687b      	ldr	r3, [r7, #4]
   2f754:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2f756:	6d19      	ldr	r1, [r3, #80]	; 0x50
   2f758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2f75a:	4b06      	ldr	r3, [pc, #24]	; (2f774 <MQTTSerialize_connectLength+0xc4>)
   2f75c:	4798      	blx	r3
   2f75e:	0003      	movs	r3, r0
   2f760:	3302      	adds	r3, #2
   2f762:	68fa      	ldr	r2, [r7, #12]
   2f764:	18d3      	adds	r3, r2, r3
   2f766:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   2f768:	68fb      	ldr	r3, [r7, #12]
}
   2f76a:	0018      	movs	r0, r3
   2f76c:	46bd      	mov	sp, r7
   2f76e:	b005      	add	sp, #20
   2f770:	bd90      	pop	{r4, r7, pc}
   2f772:	46c0      	nop			; (mov r8, r8)
   2f774:	00030121 	.word	0x00030121

0002f778 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   2f778:	b590      	push	{r4, r7, lr}
   2f77a:	b08b      	sub	sp, #44	; 0x2c
   2f77c:	af00      	add	r7, sp, #0
   2f77e:	60f8      	str	r0, [r7, #12]
   2f780:	60b9      	str	r1, [r7, #8]
   2f782:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   2f784:	68fb      	ldr	r3, [r7, #12]
   2f786:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   2f788:	2300      	movs	r3, #0
   2f78a:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   2f78c:	2300      	movs	r3, #0
   2f78e:	617b      	str	r3, [r7, #20]
	int len = 0;
   2f790:	2300      	movs	r3, #0
   2f792:	623b      	str	r3, [r7, #32]
	int rc = -1;
   2f794:	2301      	movs	r3, #1
   2f796:	425b      	negs	r3, r3
   2f798:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   2f79a:	687b      	ldr	r3, [r7, #4]
   2f79c:	0018      	movs	r0, r3
   2f79e:	4b8c      	ldr	r3, [pc, #560]	; (2f9d0 <MQTTSerialize_connect+0x258>)
   2f7a0:	4798      	blx	r3
   2f7a2:	0003      	movs	r3, r0
   2f7a4:	623b      	str	r3, [r7, #32]
   2f7a6:	6a3b      	ldr	r3, [r7, #32]
   2f7a8:	0018      	movs	r0, r3
   2f7aa:	4b8a      	ldr	r3, [pc, #552]	; (2f9d4 <MQTTSerialize_connect+0x25c>)
   2f7ac:	4798      	blx	r3
   2f7ae:	0002      	movs	r2, r0
   2f7b0:	68bb      	ldr	r3, [r7, #8]
   2f7b2:	429a      	cmp	r2, r3
   2f7b4:	dd03      	ble.n	2f7be <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f7b6:	2302      	movs	r3, #2
   2f7b8:	425b      	negs	r3, r3
   2f7ba:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2f7bc:	e103      	b.n	2f9c6 <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   2f7be:	2318      	movs	r3, #24
   2f7c0:	18fb      	adds	r3, r7, r3
   2f7c2:	2200      	movs	r2, #0
   2f7c4:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   2f7c6:	2318      	movs	r3, #24
   2f7c8:	18fb      	adds	r3, r7, r3
   2f7ca:	781a      	ldrb	r2, [r3, #0]
   2f7cc:	210f      	movs	r1, #15
   2f7ce:	400a      	ands	r2, r1
   2f7d0:	1c11      	adds	r1, r2, #0
   2f7d2:	2210      	movs	r2, #16
   2f7d4:	430a      	orrs	r2, r1
   2f7d6:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f7d8:	2318      	movs	r3, #24
   2f7da:	18fb      	adds	r3, r7, r3
   2f7dc:	781a      	ldrb	r2, [r3, #0]
   2f7de:	231c      	movs	r3, #28
   2f7e0:	18fb      	adds	r3, r7, r3
   2f7e2:	0011      	movs	r1, r2
   2f7e4:	0018      	movs	r0, r3
   2f7e6:	4b7c      	ldr	r3, [pc, #496]	; (2f9d8 <MQTTSerialize_connect+0x260>)
   2f7e8:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   2f7ea:	69fb      	ldr	r3, [r7, #28]
   2f7ec:	6a3a      	ldr	r2, [r7, #32]
   2f7ee:	0011      	movs	r1, r2
   2f7f0:	0018      	movs	r0, r3
   2f7f2:	4b7a      	ldr	r3, [pc, #488]	; (2f9dc <MQTTSerialize_connect+0x264>)
   2f7f4:	4798      	blx	r3
   2f7f6:	0002      	movs	r2, r0
   2f7f8:	69fb      	ldr	r3, [r7, #28]
   2f7fa:	189b      	adds	r3, r3, r2
   2f7fc:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   2f7fe:	687b      	ldr	r3, [r7, #4]
   2f800:	7a1b      	ldrb	r3, [r3, #8]
   2f802:	2b04      	cmp	r3, #4
   2f804:	d10d      	bne.n	2f822 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   2f806:	4a76      	ldr	r2, [pc, #472]	; (2f9e0 <MQTTSerialize_connect+0x268>)
   2f808:	231c      	movs	r3, #28
   2f80a:	18fb      	adds	r3, r7, r3
   2f80c:	0011      	movs	r1, r2
   2f80e:	0018      	movs	r0, r3
   2f810:	4b74      	ldr	r3, [pc, #464]	; (2f9e4 <MQTTSerialize_connect+0x26c>)
   2f812:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   2f814:	231c      	movs	r3, #28
   2f816:	18fb      	adds	r3, r7, r3
   2f818:	2104      	movs	r1, #4
   2f81a:	0018      	movs	r0, r3
   2f81c:	4b6e      	ldr	r3, [pc, #440]	; (2f9d8 <MQTTSerialize_connect+0x260>)
   2f81e:	4798      	blx	r3
   2f820:	e00c      	b.n	2f83c <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   2f822:	4a71      	ldr	r2, [pc, #452]	; (2f9e8 <MQTTSerialize_connect+0x270>)
   2f824:	231c      	movs	r3, #28
   2f826:	18fb      	adds	r3, r7, r3
   2f828:	0011      	movs	r1, r2
   2f82a:	0018      	movs	r0, r3
   2f82c:	4b6d      	ldr	r3, [pc, #436]	; (2f9e4 <MQTTSerialize_connect+0x26c>)
   2f82e:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   2f830:	231c      	movs	r3, #28
   2f832:	18fb      	adds	r3, r7, r3
   2f834:	2103      	movs	r1, #3
   2f836:	0018      	movs	r0, r3
   2f838:	4b67      	ldr	r3, [pc, #412]	; (2f9d8 <MQTTSerialize_connect+0x260>)
   2f83a:	4798      	blx	r3
	}

	flags.all = 0;
   2f83c:	2314      	movs	r3, #20
   2f83e:	18fb      	adds	r3, r7, r3
   2f840:	2200      	movs	r2, #0
   2f842:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   2f844:	687b      	ldr	r3, [r7, #4]
   2f846:	7e9b      	ldrb	r3, [r3, #26]
   2f848:	1c1a      	adds	r2, r3, #0
   2f84a:	2301      	movs	r3, #1
   2f84c:	4013      	ands	r3, r2
   2f84e:	b2da      	uxtb	r2, r3
   2f850:	2314      	movs	r3, #20
   2f852:	18fb      	adds	r3, r7, r3
   2f854:	2101      	movs	r1, #1
   2f856:	400a      	ands	r2, r1
   2f858:	1890      	adds	r0, r2, r2
   2f85a:	781a      	ldrb	r2, [r3, #0]
   2f85c:	2102      	movs	r1, #2
   2f85e:	438a      	bics	r2, r1
   2f860:	1c11      	adds	r1, r2, #0
   2f862:	1c02      	adds	r2, r0, #0
   2f864:	430a      	orrs	r2, r1
   2f866:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   2f868:	687b      	ldr	r3, [r7, #4]
   2f86a:	7edb      	ldrb	r3, [r3, #27]
   2f86c:	1e5a      	subs	r2, r3, #1
   2f86e:	4193      	sbcs	r3, r2
   2f870:	b2da      	uxtb	r2, r3
   2f872:	2314      	movs	r3, #20
   2f874:	18fb      	adds	r3, r7, r3
   2f876:	2101      	movs	r1, #1
   2f878:	400a      	ands	r2, r1
   2f87a:	0090      	lsls	r0, r2, #2
   2f87c:	781a      	ldrb	r2, [r3, #0]
   2f87e:	2104      	movs	r1, #4
   2f880:	438a      	bics	r2, r1
   2f882:	1c11      	adds	r1, r2, #0
   2f884:	1c02      	adds	r2, r0, #0
   2f886:	430a      	orrs	r2, r1
   2f888:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   2f88a:	2314      	movs	r3, #20
   2f88c:	18fb      	adds	r3, r7, r3
   2f88e:	781b      	ldrb	r3, [r3, #0]
   2f890:	2204      	movs	r2, #4
   2f892:	4013      	ands	r3, r2
   2f894:	b2db      	uxtb	r3, r3
   2f896:	2b00      	cmp	r3, #0
   2f898:	d025      	beq.n	2f8e6 <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   2f89a:	687b      	ldr	r3, [r7, #4]
   2f89c:	223d      	movs	r2, #61	; 0x3d
   2f89e:	5c9b      	ldrb	r3, [r3, r2]
   2f8a0:	1c1a      	adds	r2, r3, #0
   2f8a2:	2303      	movs	r3, #3
   2f8a4:	4013      	ands	r3, r2
   2f8a6:	b2da      	uxtb	r2, r3
   2f8a8:	2314      	movs	r3, #20
   2f8aa:	18fb      	adds	r3, r7, r3
   2f8ac:	2103      	movs	r1, #3
   2f8ae:	400a      	ands	r2, r1
   2f8b0:	00d0      	lsls	r0, r2, #3
   2f8b2:	781a      	ldrb	r2, [r3, #0]
   2f8b4:	2118      	movs	r1, #24
   2f8b6:	438a      	bics	r2, r1
   2f8b8:	1c11      	adds	r1, r2, #0
   2f8ba:	1c02      	adds	r2, r0, #0
   2f8bc:	430a      	orrs	r2, r1
   2f8be:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   2f8c0:	687b      	ldr	r3, [r7, #4]
   2f8c2:	223c      	movs	r2, #60	; 0x3c
   2f8c4:	5c9b      	ldrb	r3, [r3, r2]
   2f8c6:	1c1a      	adds	r2, r3, #0
   2f8c8:	2301      	movs	r3, #1
   2f8ca:	4013      	ands	r3, r2
   2f8cc:	b2da      	uxtb	r2, r3
   2f8ce:	2314      	movs	r3, #20
   2f8d0:	18fb      	adds	r3, r7, r3
   2f8d2:	2101      	movs	r1, #1
   2f8d4:	400a      	ands	r2, r1
   2f8d6:	0150      	lsls	r0, r2, #5
   2f8d8:	781a      	ldrb	r2, [r3, #0]
   2f8da:	2120      	movs	r1, #32
   2f8dc:	438a      	bics	r2, r1
   2f8de:	1c11      	adds	r1, r2, #0
   2f8e0:	1c02      	adds	r2, r0, #0
   2f8e2:	430a      	orrs	r2, r1
   2f8e4:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   2f8e6:	687b      	ldr	r3, [r7, #4]
   2f8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2f8ea:	2b00      	cmp	r3, #0
   2f8ec:	d103      	bne.n	2f8f6 <MQTTSerialize_connect+0x17e>
   2f8ee:	687b      	ldr	r3, [r7, #4]
   2f8f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f8f2:	2b00      	cmp	r3, #0
   2f8f4:	d006      	beq.n	2f904 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   2f8f6:	2314      	movs	r3, #20
   2f8f8:	18fb      	adds	r3, r7, r3
   2f8fa:	781a      	ldrb	r2, [r3, #0]
   2f8fc:	2180      	movs	r1, #128	; 0x80
   2f8fe:	4249      	negs	r1, r1
   2f900:	430a      	orrs	r2, r1
   2f902:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   2f904:	687b      	ldr	r3, [r7, #4]
   2f906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f908:	2b00      	cmp	r3, #0
   2f90a:	d103      	bne.n	2f914 <MQTTSerialize_connect+0x19c>
   2f90c:	687b      	ldr	r3, [r7, #4]
   2f90e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f910:	2b00      	cmp	r3, #0
   2f912:	d005      	beq.n	2f920 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   2f914:	2314      	movs	r3, #20
   2f916:	18fb      	adds	r3, r7, r3
   2f918:	781a      	ldrb	r2, [r3, #0]
   2f91a:	2140      	movs	r1, #64	; 0x40
   2f91c:	430a      	orrs	r2, r1
   2f91e:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   2f920:	2314      	movs	r3, #20
   2f922:	18fb      	adds	r3, r7, r3
   2f924:	781a      	ldrb	r2, [r3, #0]
   2f926:	231c      	movs	r3, #28
   2f928:	18fb      	adds	r3, r7, r3
   2f92a:	0011      	movs	r1, r2
   2f92c:	0018      	movs	r0, r3
   2f92e:	4b2a      	ldr	r3, [pc, #168]	; (2f9d8 <MQTTSerialize_connect+0x260>)
   2f930:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   2f932:	687b      	ldr	r3, [r7, #4]
   2f934:	8b1b      	ldrh	r3, [r3, #24]
   2f936:	001a      	movs	r2, r3
   2f938:	231c      	movs	r3, #28
   2f93a:	18fb      	adds	r3, r7, r3
   2f93c:	0011      	movs	r1, r2
   2f93e:	0018      	movs	r0, r3
   2f940:	4b2a      	ldr	r3, [pc, #168]	; (2f9ec <MQTTSerialize_connect+0x274>)
   2f942:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   2f944:	687b      	ldr	r3, [r7, #4]
   2f946:	221c      	movs	r2, #28
   2f948:	18b8      	adds	r0, r7, r2
   2f94a:	68d9      	ldr	r1, [r3, #12]
   2f94c:	691a      	ldr	r2, [r3, #16]
   2f94e:	695b      	ldr	r3, [r3, #20]
   2f950:	4c27      	ldr	r4, [pc, #156]	; (2f9f0 <MQTTSerialize_connect+0x278>)
   2f952:	47a0      	blx	r4
	if (options->willFlag)
   2f954:	687b      	ldr	r3, [r7, #4]
   2f956:	7edb      	ldrb	r3, [r3, #27]
   2f958:	2b00      	cmp	r3, #0
   2f95a:	d00f      	beq.n	2f97c <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   2f95c:	687b      	ldr	r3, [r7, #4]
   2f95e:	221c      	movs	r2, #28
   2f960:	18b8      	adds	r0, r7, r2
   2f962:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2f964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2f966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2f968:	4c21      	ldr	r4, [pc, #132]	; (2f9f0 <MQTTSerialize_connect+0x278>)
   2f96a:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   2f96c:	687b      	ldr	r3, [r7, #4]
   2f96e:	221c      	movs	r2, #28
   2f970:	18b8      	adds	r0, r7, r2
   2f972:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2f974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2f976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2f978:	4c1d      	ldr	r4, [pc, #116]	; (2f9f0 <MQTTSerialize_connect+0x278>)
   2f97a:	47a0      	blx	r4
	}
	if (flags.bits.username)
   2f97c:	2314      	movs	r3, #20
   2f97e:	18fb      	adds	r3, r7, r3
   2f980:	781b      	ldrb	r3, [r3, #0]
   2f982:	227f      	movs	r2, #127	; 0x7f
   2f984:	4393      	bics	r3, r2
   2f986:	b2db      	uxtb	r3, r3
   2f988:	2b00      	cmp	r3, #0
   2f98a:	d007      	beq.n	2f99c <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   2f98c:	687b      	ldr	r3, [r7, #4]
   2f98e:	221c      	movs	r2, #28
   2f990:	18b8      	adds	r0, r7, r2
   2f992:	6c19      	ldr	r1, [r3, #64]	; 0x40
   2f994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2f996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f998:	4c15      	ldr	r4, [pc, #84]	; (2f9f0 <MQTTSerialize_connect+0x278>)
   2f99a:	47a0      	blx	r4
	if (flags.bits.password)
   2f99c:	2314      	movs	r3, #20
   2f99e:	18fb      	adds	r3, r7, r3
   2f9a0:	781b      	ldrb	r3, [r3, #0]
   2f9a2:	2240      	movs	r2, #64	; 0x40
   2f9a4:	4013      	ands	r3, r2
   2f9a6:	b2db      	uxtb	r3, r3
   2f9a8:	2b00      	cmp	r3, #0
   2f9aa:	d007      	beq.n	2f9bc <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   2f9ac:	687b      	ldr	r3, [r7, #4]
   2f9ae:	221c      	movs	r2, #28
   2f9b0:	18b8      	adds	r0, r7, r2
   2f9b2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   2f9b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2f9b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f9b8:	4c0d      	ldr	r4, [pc, #52]	; (2f9f0 <MQTTSerialize_connect+0x278>)
   2f9ba:	47a0      	blx	r4

	rc = ptr - buf;
   2f9bc:	69fb      	ldr	r3, [r7, #28]
   2f9be:	001a      	movs	r2, r3
   2f9c0:	68fb      	ldr	r3, [r7, #12]
   2f9c2:	1ad3      	subs	r3, r2, r3
   2f9c4:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   2f9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f9c8:	0018      	movs	r0, r3
   2f9ca:	46bd      	mov	sp, r7
   2f9cc:	b00b      	add	sp, #44	; 0x2c
   2f9ce:	bd90      	pop	{r4, r7, pc}
   2f9d0:	0002f6b1 	.word	0x0002f6b1
   2f9d4:	0002fe45 	.word	0x0002fe45
   2f9d8:	0002ff67 	.word	0x0002ff67
   2f9dc:	0002fd4d 	.word	0x0002fd4d
   2f9e0:	000398ac 	.word	0x000398ac
   2f9e4:	0002ffe9 	.word	0x0002ffe9
   2f9e8:	000398b4 	.word	0x000398b4
   2f9ec:	0002ff91 	.word	0x0002ff91
   2f9f0:	00030039 	.word	0x00030039

0002f9f4 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   2f9f4:	b580      	push	{r7, lr}
   2f9f6:	b08a      	sub	sp, #40	; 0x28
   2f9f8:	af00      	add	r7, sp, #0
   2f9fa:	60f8      	str	r0, [r7, #12]
   2f9fc:	60b9      	str	r1, [r7, #8]
   2f9fe:	607a      	str	r2, [r7, #4]
   2fa00:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2fa02:	2300      	movs	r3, #0
   2fa04:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2fa06:	687b      	ldr	r3, [r7, #4]
   2fa08:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2fa0a:	2300      	movs	r3, #0
   2fa0c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2fa0e:	2300      	movs	r3, #0
   2fa10:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   2fa12:	2300      	movs	r3, #0
   2fa14:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2fa16:	2318      	movs	r3, #24
   2fa18:	18fb      	adds	r3, r7, r3
   2fa1a:	0018      	movs	r0, r3
   2fa1c:	4b25      	ldr	r3, [pc, #148]	; (2fab4 <MQTTDeserialize_connack+0xc0>)
   2fa1e:	4798      	blx	r3
   2fa20:	0003      	movs	r3, r0
   2fa22:	001a      	movs	r2, r3
   2fa24:	231c      	movs	r3, #28
   2fa26:	18fb      	adds	r3, r7, r3
   2fa28:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   2fa2a:	231c      	movs	r3, #28
   2fa2c:	18fb      	adds	r3, r7, r3
   2fa2e:	781b      	ldrb	r3, [r3, #0]
   2fa30:	220f      	movs	r2, #15
   2fa32:	4393      	bics	r3, r2
   2fa34:	b2db      	uxtb	r3, r3
   2fa36:	2b20      	cmp	r3, #32
   2fa38:	d134      	bne.n	2faa4 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2fa3a:	69bb      	ldr	r3, [r7, #24]
   2fa3c:	2214      	movs	r2, #20
   2fa3e:	18ba      	adds	r2, r7, r2
   2fa40:	0011      	movs	r1, r2
   2fa42:	0018      	movs	r0, r3
   2fa44:	4b1c      	ldr	r3, [pc, #112]	; (2fab8 <MQTTDeserialize_connack+0xc4>)
   2fa46:	4798      	blx	r3
   2fa48:	0003      	movs	r3, r0
   2fa4a:	627b      	str	r3, [r7, #36]	; 0x24
   2fa4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2fa4e:	69bb      	ldr	r3, [r7, #24]
   2fa50:	189b      	adds	r3, r3, r2
   2fa52:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2fa54:	69bb      	ldr	r3, [r7, #24]
   2fa56:	697a      	ldr	r2, [r7, #20]
   2fa58:	189b      	adds	r3, r3, r2
   2fa5a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2fa5c:	6a3b      	ldr	r3, [r7, #32]
   2fa5e:	69ba      	ldr	r2, [r7, #24]
   2fa60:	1a9b      	subs	r3, r3, r2
   2fa62:	2b01      	cmp	r3, #1
   2fa64:	dd20      	ble.n	2faa8 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   2fa66:	2318      	movs	r3, #24
   2fa68:	18fb      	adds	r3, r7, r3
   2fa6a:	0018      	movs	r0, r3
   2fa6c:	4b11      	ldr	r3, [pc, #68]	; (2fab4 <MQTTDeserialize_connack+0xc0>)
   2fa6e:	4798      	blx	r3
   2fa70:	0003      	movs	r3, r0
   2fa72:	001a      	movs	r2, r3
   2fa74:	2310      	movs	r3, #16
   2fa76:	18fb      	adds	r3, r7, r3
   2fa78:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   2fa7a:	2310      	movs	r3, #16
   2fa7c:	18fb      	adds	r3, r7, r3
   2fa7e:	781b      	ldrb	r3, [r3, #0]
   2fa80:	061b      	lsls	r3, r3, #24
   2fa82:	0fdb      	lsrs	r3, r3, #31
   2fa84:	b2db      	uxtb	r3, r3
   2fa86:	001a      	movs	r2, r3
   2fa88:	68fb      	ldr	r3, [r7, #12]
   2fa8a:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   2fa8c:	2318      	movs	r3, #24
   2fa8e:	18fb      	adds	r3, r7, r3
   2fa90:	0018      	movs	r0, r3
   2fa92:	4b08      	ldr	r3, [pc, #32]	; (2fab4 <MQTTDeserialize_connack+0xc0>)
   2fa94:	4798      	blx	r3
   2fa96:	0003      	movs	r3, r0
   2fa98:	001a      	movs	r2, r3
   2fa9a:	68bb      	ldr	r3, [r7, #8]
   2fa9c:	701a      	strb	r2, [r3, #0]

	rc = 1;
   2fa9e:	2301      	movs	r3, #1
   2faa0:	627b      	str	r3, [r7, #36]	; 0x24
   2faa2:	e002      	b.n	2faaa <MQTTDeserialize_connack+0xb6>
		goto exit;
   2faa4:	46c0      	nop			; (mov r8, r8)
   2faa6:	e000      	b.n	2faaa <MQTTDeserialize_connack+0xb6>
		goto exit;
   2faa8:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2faaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2faac:	0018      	movs	r0, r3
   2faae:	46bd      	mov	sp, r7
   2fab0:	b00a      	add	sp, #40	; 0x28
   2fab2:	bd80      	pop	{r7, pc}
   2fab4:	0002ff3b 	.word	0x0002ff3b
   2fab8:	0002fed5 	.word	0x0002fed5

0002fabc <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   2fabc:	b580      	push	{r7, lr}
   2fabe:	b088      	sub	sp, #32
   2fac0:	af00      	add	r7, sp, #0
   2fac2:	60f8      	str	r0, [r7, #12]
   2fac4:	60b9      	str	r1, [r7, #8]
   2fac6:	1dfb      	adds	r3, r7, #7
   2fac8:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2faca:	2300      	movs	r3, #0
   2facc:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   2face:	2301      	movs	r3, #1
   2fad0:	425b      	negs	r3, r3
   2fad2:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2fad4:	68fb      	ldr	r3, [r7, #12]
   2fad6:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   2fad8:	68bb      	ldr	r3, [r7, #8]
   2fada:	2b01      	cmp	r3, #1
   2fadc:	dc03      	bgt.n	2fae6 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2fade:	2302      	movs	r3, #2
   2fae0:	425b      	negs	r3, r3
   2fae2:	61fb      	str	r3, [r7, #28]
		goto exit;
   2fae4:	e029      	b.n	2fb3a <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   2fae6:	2318      	movs	r3, #24
   2fae8:	18fb      	adds	r3, r7, r3
   2faea:	2200      	movs	r2, #0
   2faec:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   2faee:	1dfb      	adds	r3, r7, #7
   2faf0:	781b      	ldrb	r3, [r3, #0]
   2faf2:	220f      	movs	r2, #15
   2faf4:	4013      	ands	r3, r2
   2faf6:	b2da      	uxtb	r2, r3
   2faf8:	2318      	movs	r3, #24
   2fafa:	18fb      	adds	r3, r7, r3
   2fafc:	0110      	lsls	r0, r2, #4
   2fafe:	781a      	ldrb	r2, [r3, #0]
   2fb00:	210f      	movs	r1, #15
   2fb02:	400a      	ands	r2, r1
   2fb04:	1c11      	adds	r1, r2, #0
   2fb06:	1c02      	adds	r2, r0, #0
   2fb08:	430a      	orrs	r2, r1
   2fb0a:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2fb0c:	2318      	movs	r3, #24
   2fb0e:	18fb      	adds	r3, r7, r3
   2fb10:	781a      	ldrb	r2, [r3, #0]
   2fb12:	2314      	movs	r3, #20
   2fb14:	18fb      	adds	r3, r7, r3
   2fb16:	0011      	movs	r1, r2
   2fb18:	0018      	movs	r0, r3
   2fb1a:	4b0a      	ldr	r3, [pc, #40]	; (2fb44 <MQTTSerialize_zero+0x88>)
   2fb1c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   2fb1e:	697b      	ldr	r3, [r7, #20]
   2fb20:	2100      	movs	r1, #0
   2fb22:	0018      	movs	r0, r3
   2fb24:	4b08      	ldr	r3, [pc, #32]	; (2fb48 <MQTTSerialize_zero+0x8c>)
   2fb26:	4798      	blx	r3
   2fb28:	0002      	movs	r2, r0
   2fb2a:	697b      	ldr	r3, [r7, #20]
   2fb2c:	189b      	adds	r3, r3, r2
   2fb2e:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   2fb30:	697b      	ldr	r3, [r7, #20]
   2fb32:	001a      	movs	r2, r3
   2fb34:	68fb      	ldr	r3, [r7, #12]
   2fb36:	1ad3      	subs	r3, r2, r3
   2fb38:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fb3a:	69fb      	ldr	r3, [r7, #28]
}
   2fb3c:	0018      	movs	r0, r3
   2fb3e:	46bd      	mov	sp, r7
   2fb40:	b008      	add	sp, #32
   2fb42:	bd80      	pop	{r7, pc}
   2fb44:	0002ff67 	.word	0x0002ff67
   2fb48:	0002fd4d 	.word	0x0002fd4d

0002fb4c <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   2fb4c:	b580      	push	{r7, lr}
   2fb4e:	b082      	sub	sp, #8
   2fb50:	af00      	add	r7, sp, #0
   2fb52:	6078      	str	r0, [r7, #4]
   2fb54:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   2fb56:	6839      	ldr	r1, [r7, #0]
   2fb58:	687b      	ldr	r3, [r7, #4]
   2fb5a:	220e      	movs	r2, #14
   2fb5c:	0018      	movs	r0, r3
   2fb5e:	4b03      	ldr	r3, [pc, #12]	; (2fb6c <MQTTSerialize_disconnect+0x20>)
   2fb60:	4798      	blx	r3
   2fb62:	0003      	movs	r3, r0
}
   2fb64:	0018      	movs	r0, r3
   2fb66:	46bd      	mov	sp, r7
   2fb68:	b002      	add	sp, #8
   2fb6a:	bd80      	pop	{r7, pc}
   2fb6c:	0002fabd 	.word	0x0002fabd

0002fb70 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   2fb70:	b580      	push	{r7, lr}
   2fb72:	b082      	sub	sp, #8
   2fb74:	af00      	add	r7, sp, #0
   2fb76:	6078      	str	r0, [r7, #4]
   2fb78:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   2fb7a:	6839      	ldr	r1, [r7, #0]
   2fb7c:	687b      	ldr	r3, [r7, #4]
   2fb7e:	220c      	movs	r2, #12
   2fb80:	0018      	movs	r0, r3
   2fb82:	4b03      	ldr	r3, [pc, #12]	; (2fb90 <MQTTSerialize_pingreq+0x20>)
   2fb84:	4798      	blx	r3
   2fb86:	0003      	movs	r3, r0
}
   2fb88:	0018      	movs	r0, r3
   2fb8a:	46bd      	mov	sp, r7
   2fb8c:	b002      	add	sp, #8
   2fb8e:	bd80      	pop	{r7, pc}
   2fb90:	0002fabd 	.word	0x0002fabd

0002fb94 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   2fb94:	b580      	push	{r7, lr}
   2fb96:	b08a      	sub	sp, #40	; 0x28
   2fb98:	af00      	add	r7, sp, #0
   2fb9a:	60f8      	str	r0, [r7, #12]
   2fb9c:	60b9      	str	r1, [r7, #8]
   2fb9e:	607a      	str	r2, [r7, #4]
   2fba0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2fba2:	2300      	movs	r3, #0
   2fba4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2fba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2fba8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2fbaa:	2300      	movs	r3, #0
   2fbac:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2fbae:	2300      	movs	r3, #0
   2fbb0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   2fbb2:	2300      	movs	r3, #0
   2fbb4:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2fbb6:	2318      	movs	r3, #24
   2fbb8:	18fb      	adds	r3, r7, r3
   2fbba:	0018      	movs	r0, r3
   2fbbc:	4b32      	ldr	r3, [pc, #200]	; (2fc88 <MQTTDeserialize_publish+0xf4>)
   2fbbe:	4798      	blx	r3
   2fbc0:	0003      	movs	r3, r0
   2fbc2:	001a      	movs	r2, r3
   2fbc4:	231c      	movs	r3, #28
   2fbc6:	18fb      	adds	r3, r7, r3
   2fbc8:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   2fbca:	231c      	movs	r3, #28
   2fbcc:	18fb      	adds	r3, r7, r3
   2fbce:	781b      	ldrb	r3, [r3, #0]
   2fbd0:	220f      	movs	r2, #15
   2fbd2:	4393      	bics	r3, r2
   2fbd4:	b2db      	uxtb	r3, r3
   2fbd6:	2b30      	cmp	r3, #48	; 0x30
   2fbd8:	d150      	bne.n	2fc7c <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   2fbda:	231c      	movs	r3, #28
   2fbdc:	18fb      	adds	r3, r7, r3
   2fbde:	781b      	ldrb	r3, [r3, #0]
   2fbe0:	071b      	lsls	r3, r3, #28
   2fbe2:	0fdb      	lsrs	r3, r3, #31
   2fbe4:	b2db      	uxtb	r3, r3
   2fbe6:	001a      	movs	r2, r3
   2fbe8:	68fb      	ldr	r3, [r7, #12]
   2fbea:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   2fbec:	231c      	movs	r3, #28
   2fbee:	18fb      	adds	r3, r7, r3
   2fbf0:	781b      	ldrb	r3, [r3, #0]
   2fbf2:	075b      	lsls	r3, r3, #29
   2fbf4:	0f9b      	lsrs	r3, r3, #30
   2fbf6:	b2db      	uxtb	r3, r3
   2fbf8:	001a      	movs	r2, r3
   2fbfa:	68bb      	ldr	r3, [r7, #8]
   2fbfc:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   2fbfe:	231c      	movs	r3, #28
   2fc00:	18fb      	adds	r3, r7, r3
   2fc02:	781b      	ldrb	r3, [r3, #0]
   2fc04:	07db      	lsls	r3, r3, #31
   2fc06:	0fdb      	lsrs	r3, r3, #31
   2fc08:	b2db      	uxtb	r3, r3
   2fc0a:	001a      	movs	r2, r3
   2fc0c:	687b      	ldr	r3, [r7, #4]
   2fc0e:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2fc10:	69bb      	ldr	r3, [r7, #24]
   2fc12:	2214      	movs	r2, #20
   2fc14:	18ba      	adds	r2, r7, r2
   2fc16:	0011      	movs	r1, r2
   2fc18:	0018      	movs	r0, r3
   2fc1a:	4b1c      	ldr	r3, [pc, #112]	; (2fc8c <MQTTDeserialize_publish+0xf8>)
   2fc1c:	4798      	blx	r3
   2fc1e:	0003      	movs	r3, r0
   2fc20:	627b      	str	r3, [r7, #36]	; 0x24
   2fc22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2fc24:	69bb      	ldr	r3, [r7, #24]
   2fc26:	189b      	adds	r3, r3, r2
   2fc28:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2fc2a:	69bb      	ldr	r3, [r7, #24]
   2fc2c:	697a      	ldr	r2, [r7, #20]
   2fc2e:	189b      	adds	r3, r3, r2
   2fc30:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2fc32:	6a3a      	ldr	r2, [r7, #32]
   2fc34:	2318      	movs	r3, #24
   2fc36:	18f9      	adds	r1, r7, r3
   2fc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2fc3a:	0018      	movs	r0, r3
   2fc3c:	4b14      	ldr	r3, [pc, #80]	; (2fc90 <MQTTDeserialize_publish+0xfc>)
   2fc3e:	4798      	blx	r3
   2fc40:	1e03      	subs	r3, r0, #0
   2fc42:	d01c      	beq.n	2fc7e <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   2fc44:	6a3b      	ldr	r3, [r7, #32]
   2fc46:	69ba      	ldr	r2, [r7, #24]
   2fc48:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2fc4a:	d418      	bmi.n	2fc7e <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   2fc4c:	68bb      	ldr	r3, [r7, #8]
   2fc4e:	681b      	ldr	r3, [r3, #0]
   2fc50:	2b00      	cmp	r3, #0
   2fc52:	dd08      	ble.n	2fc66 <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   2fc54:	2318      	movs	r3, #24
   2fc56:	18fb      	adds	r3, r7, r3
   2fc58:	0018      	movs	r0, r3
   2fc5a:	4b0e      	ldr	r3, [pc, #56]	; (2fc94 <MQTTDeserialize_publish+0x100>)
   2fc5c:	4798      	blx	r3
   2fc5e:	0003      	movs	r3, r0
   2fc60:	b29a      	uxth	r2, r3
   2fc62:	683b      	ldr	r3, [r7, #0]
   2fc64:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   2fc66:	6a3b      	ldr	r3, [r7, #32]
   2fc68:	69ba      	ldr	r2, [r7, #24]
   2fc6a:	1a9a      	subs	r2, r3, r2
   2fc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2fc6e:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   2fc70:	69ba      	ldr	r2, [r7, #24]
   2fc72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2fc74:	601a      	str	r2, [r3, #0]
	rc = 1;
   2fc76:	2301      	movs	r3, #1
   2fc78:	627b      	str	r3, [r7, #36]	; 0x24
   2fc7a:	e000      	b.n	2fc7e <MQTTDeserialize_publish+0xea>
		goto exit;
   2fc7c:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fc80:	0018      	movs	r0, r3
   2fc82:	46bd      	mov	sp, r7
   2fc84:	b00a      	add	sp, #40	; 0x28
   2fc86:	bd80      	pop	{r7, pc}
   2fc88:	0002ff3b 	.word	0x0002ff3b
   2fc8c:	0002fed5 	.word	0x0002fed5
   2fc90:	000300b9 	.word	0x000300b9
   2fc94:	0002ff09 	.word	0x0002ff09

0002fc98 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   2fc98:	b580      	push	{r7, lr}
   2fc9a:	b08a      	sub	sp, #40	; 0x28
   2fc9c:	af00      	add	r7, sp, #0
   2fc9e:	60f8      	str	r0, [r7, #12]
   2fca0:	60b9      	str	r1, [r7, #8]
   2fca2:	607a      	str	r2, [r7, #4]
   2fca4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2fca6:	2300      	movs	r3, #0
   2fca8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2fcaa:	683b      	ldr	r3, [r7, #0]
   2fcac:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2fcae:	2300      	movs	r3, #0
   2fcb0:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2fcb2:	2300      	movs	r3, #0
   2fcb4:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2fcb6:	2318      	movs	r3, #24
   2fcb8:	18fb      	adds	r3, r7, r3
   2fcba:	0018      	movs	r0, r3
   2fcbc:	4b20      	ldr	r3, [pc, #128]	; (2fd40 <MQTTDeserialize_ack+0xa8>)
   2fcbe:	4798      	blx	r3
   2fcc0:	0003      	movs	r3, r0
   2fcc2:	001a      	movs	r2, r3
   2fcc4:	231c      	movs	r3, #28
   2fcc6:	18fb      	adds	r3, r7, r3
   2fcc8:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   2fcca:	231c      	movs	r3, #28
   2fccc:	18fb      	adds	r3, r7, r3
   2fcce:	781b      	ldrb	r3, [r3, #0]
   2fcd0:	071b      	lsls	r3, r3, #28
   2fcd2:	0fdb      	lsrs	r3, r3, #31
   2fcd4:	b2db      	uxtb	r3, r3
   2fcd6:	001a      	movs	r2, r3
   2fcd8:	68bb      	ldr	r3, [r7, #8]
   2fcda:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   2fcdc:	231c      	movs	r3, #28
   2fcde:	18fb      	adds	r3, r7, r3
   2fce0:	781b      	ldrb	r3, [r3, #0]
   2fce2:	061b      	lsls	r3, r3, #24
   2fce4:	0f1b      	lsrs	r3, r3, #28
   2fce6:	b2db      	uxtb	r3, r3
   2fce8:	001a      	movs	r2, r3
   2fcea:	68fb      	ldr	r3, [r7, #12]
   2fcec:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2fcee:	69bb      	ldr	r3, [r7, #24]
   2fcf0:	2214      	movs	r2, #20
   2fcf2:	18ba      	adds	r2, r7, r2
   2fcf4:	0011      	movs	r1, r2
   2fcf6:	0018      	movs	r0, r3
   2fcf8:	4b12      	ldr	r3, [pc, #72]	; (2fd44 <MQTTDeserialize_ack+0xac>)
   2fcfa:	4798      	blx	r3
   2fcfc:	0003      	movs	r3, r0
   2fcfe:	627b      	str	r3, [r7, #36]	; 0x24
   2fd00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2fd02:	69bb      	ldr	r3, [r7, #24]
   2fd04:	189b      	adds	r3, r3, r2
   2fd06:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2fd08:	69bb      	ldr	r3, [r7, #24]
   2fd0a:	697a      	ldr	r2, [r7, #20]
   2fd0c:	189b      	adds	r3, r3, r2
   2fd0e:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   2fd10:	6a3b      	ldr	r3, [r7, #32]
   2fd12:	69ba      	ldr	r2, [r7, #24]
   2fd14:	1a9b      	subs	r3, r3, r2
   2fd16:	2b01      	cmp	r3, #1
   2fd18:	dd0b      	ble.n	2fd32 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   2fd1a:	2318      	movs	r3, #24
   2fd1c:	18fb      	adds	r3, r7, r3
   2fd1e:	0018      	movs	r0, r3
   2fd20:	4b09      	ldr	r3, [pc, #36]	; (2fd48 <MQTTDeserialize_ack+0xb0>)
   2fd22:	4798      	blx	r3
   2fd24:	0003      	movs	r3, r0
   2fd26:	b29a      	uxth	r2, r3
   2fd28:	687b      	ldr	r3, [r7, #4]
   2fd2a:	801a      	strh	r2, [r3, #0]

	rc = 1;
   2fd2c:	2301      	movs	r3, #1
   2fd2e:	627b      	str	r3, [r7, #36]	; 0x24
   2fd30:	e000      	b.n	2fd34 <MQTTDeserialize_ack+0x9c>
		goto exit;
   2fd32:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fd36:	0018      	movs	r0, r3
   2fd38:	46bd      	mov	sp, r7
   2fd3a:	b00a      	add	sp, #40	; 0x28
   2fd3c:	bd80      	pop	{r7, pc}
   2fd3e:	46c0      	nop			; (mov r8, r8)
   2fd40:	0002ff3b 	.word	0x0002ff3b
   2fd44:	0002fed5 	.word	0x0002fed5
   2fd48:	0002ff09 	.word	0x0002ff09

0002fd4c <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   2fd4c:	b580      	push	{r7, lr}
   2fd4e:	b084      	sub	sp, #16
   2fd50:	af00      	add	r7, sp, #0
   2fd52:	6078      	str	r0, [r7, #4]
   2fd54:	6039      	str	r1, [r7, #0]
	int rc = 0;
   2fd56:	2300      	movs	r3, #0
   2fd58:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   2fd5a:	683b      	ldr	r3, [r7, #0]
   2fd5c:	4a17      	ldr	r2, [pc, #92]	; (2fdbc <MQTTPacket_encode+0x70>)
   2fd5e:	4013      	ands	r3, r2
   2fd60:	d504      	bpl.n	2fd6c <MQTTPacket_encode+0x20>
   2fd62:	3b01      	subs	r3, #1
   2fd64:	2280      	movs	r2, #128	; 0x80
   2fd66:	4252      	negs	r2, r2
   2fd68:	4313      	orrs	r3, r2
   2fd6a:	3301      	adds	r3, #1
   2fd6c:	001a      	movs	r2, r3
   2fd6e:	230b      	movs	r3, #11
   2fd70:	18fb      	adds	r3, r7, r3
   2fd72:	701a      	strb	r2, [r3, #0]
		length /= 128;
   2fd74:	683b      	ldr	r3, [r7, #0]
   2fd76:	2b00      	cmp	r3, #0
   2fd78:	da00      	bge.n	2fd7c <MQTTPacket_encode+0x30>
   2fd7a:	337f      	adds	r3, #127	; 0x7f
   2fd7c:	11db      	asrs	r3, r3, #7
   2fd7e:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   2fd80:	683b      	ldr	r3, [r7, #0]
   2fd82:	2b00      	cmp	r3, #0
   2fd84:	dd08      	ble.n	2fd98 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   2fd86:	230b      	movs	r3, #11
   2fd88:	18fb      	adds	r3, r7, r3
   2fd8a:	220b      	movs	r2, #11
   2fd8c:	18ba      	adds	r2, r7, r2
   2fd8e:	7812      	ldrb	r2, [r2, #0]
   2fd90:	2180      	movs	r1, #128	; 0x80
   2fd92:	4249      	negs	r1, r1
   2fd94:	430a      	orrs	r2, r1
   2fd96:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   2fd98:	68fb      	ldr	r3, [r7, #12]
   2fd9a:	1c5a      	adds	r2, r3, #1
   2fd9c:	60fa      	str	r2, [r7, #12]
   2fd9e:	001a      	movs	r2, r3
   2fda0:	687b      	ldr	r3, [r7, #4]
   2fda2:	189b      	adds	r3, r3, r2
   2fda4:	220b      	movs	r2, #11
   2fda6:	18ba      	adds	r2, r7, r2
   2fda8:	7812      	ldrb	r2, [r2, #0]
   2fdaa:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   2fdac:	683b      	ldr	r3, [r7, #0]
   2fdae:	2b00      	cmp	r3, #0
   2fdb0:	dcd3      	bgt.n	2fd5a <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   2fdb2:	68fb      	ldr	r3, [r7, #12]
}
   2fdb4:	0018      	movs	r0, r3
   2fdb6:	46bd      	mov	sp, r7
   2fdb8:	b004      	add	sp, #16
   2fdba:	bd80      	pop	{r7, pc}
   2fdbc:	8000007f 	.word	0x8000007f

0002fdc0 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   2fdc0:	b580      	push	{r7, lr}
   2fdc2:	b086      	sub	sp, #24
   2fdc4:	af00      	add	r7, sp, #0
   2fdc6:	6078      	str	r0, [r7, #4]
   2fdc8:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   2fdca:	2301      	movs	r3, #1
   2fdcc:	617b      	str	r3, [r7, #20]
	int len = 0;
   2fdce:	2300      	movs	r3, #0
   2fdd0:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   2fdd2:	683b      	ldr	r3, [r7, #0]
   2fdd4:	2200      	movs	r2, #0
   2fdd6:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   2fdd8:	2301      	movs	r3, #1
   2fdda:	425b      	negs	r3, r3
   2fddc:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2fdde:	693b      	ldr	r3, [r7, #16]
   2fde0:	3301      	adds	r3, #1
   2fde2:	613b      	str	r3, [r7, #16]
   2fde4:	693b      	ldr	r3, [r7, #16]
   2fde6:	2b04      	cmp	r3, #4
   2fde8:	dd03      	ble.n	2fdf2 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   2fdea:	2301      	movs	r3, #1
   2fdec:	425b      	negs	r3, r3
   2fdee:	60fb      	str	r3, [r7, #12]
			goto exit;
   2fdf0:	e022      	b.n	2fe38 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   2fdf2:	230b      	movs	r3, #11
   2fdf4:	18fa      	adds	r2, r7, r3
   2fdf6:	687b      	ldr	r3, [r7, #4]
   2fdf8:	2101      	movs	r1, #1
   2fdfa:	0010      	movs	r0, r2
   2fdfc:	4798      	blx	r3
   2fdfe:	0003      	movs	r3, r0
   2fe00:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   2fe02:	68fb      	ldr	r3, [r7, #12]
   2fe04:	2b01      	cmp	r3, #1
   2fe06:	d116      	bne.n	2fe36 <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   2fe08:	683b      	ldr	r3, [r7, #0]
   2fe0a:	681a      	ldr	r2, [r3, #0]
   2fe0c:	230b      	movs	r3, #11
   2fe0e:	18fb      	adds	r3, r7, r3
   2fe10:	781b      	ldrb	r3, [r3, #0]
   2fe12:	0019      	movs	r1, r3
   2fe14:	237f      	movs	r3, #127	; 0x7f
   2fe16:	400b      	ands	r3, r1
   2fe18:	6979      	ldr	r1, [r7, #20]
   2fe1a:	434b      	muls	r3, r1
   2fe1c:	18d2      	adds	r2, r2, r3
   2fe1e:	683b      	ldr	r3, [r7, #0]
   2fe20:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   2fe22:	697b      	ldr	r3, [r7, #20]
   2fe24:	01db      	lsls	r3, r3, #7
   2fe26:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   2fe28:	230b      	movs	r3, #11
   2fe2a:	18fb      	adds	r3, r7, r3
   2fe2c:	781b      	ldrb	r3, [r3, #0]
   2fe2e:	b25b      	sxtb	r3, r3
   2fe30:	2b00      	cmp	r3, #0
   2fe32:	dbd1      	blt.n	2fdd8 <MQTTPacket_decode+0x18>
   2fe34:	e000      	b.n	2fe38 <MQTTPacket_decode+0x78>
			goto exit;
   2fe36:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   2fe38:	693b      	ldr	r3, [r7, #16]
}
   2fe3a:	0018      	movs	r0, r3
   2fe3c:	46bd      	mov	sp, r7
   2fe3e:	b006      	add	sp, #24
   2fe40:	bd80      	pop	{r7, pc}
	...

0002fe44 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   2fe44:	b580      	push	{r7, lr}
   2fe46:	b082      	sub	sp, #8
   2fe48:	af00      	add	r7, sp, #0
   2fe4a:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   2fe4c:	687b      	ldr	r3, [r7, #4]
   2fe4e:	3301      	adds	r3, #1
   2fe50:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   2fe52:	687b      	ldr	r3, [r7, #4]
   2fe54:	2b7f      	cmp	r3, #127	; 0x7f
   2fe56:	dc03      	bgt.n	2fe60 <MQTTPacket_len+0x1c>
		rem_len += 1;
   2fe58:	687b      	ldr	r3, [r7, #4]
   2fe5a:	3301      	adds	r3, #1
   2fe5c:	607b      	str	r3, [r7, #4]
   2fe5e:	e012      	b.n	2fe86 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   2fe60:	687b      	ldr	r3, [r7, #4]
   2fe62:	4a0b      	ldr	r2, [pc, #44]	; (2fe90 <MQTTPacket_len+0x4c>)
   2fe64:	4293      	cmp	r3, r2
   2fe66:	dc03      	bgt.n	2fe70 <MQTTPacket_len+0x2c>
		rem_len += 2;
   2fe68:	687b      	ldr	r3, [r7, #4]
   2fe6a:	3302      	adds	r3, #2
   2fe6c:	607b      	str	r3, [r7, #4]
   2fe6e:	e00a      	b.n	2fe86 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   2fe70:	687b      	ldr	r3, [r7, #4]
   2fe72:	4a08      	ldr	r2, [pc, #32]	; (2fe94 <MQTTPacket_len+0x50>)
   2fe74:	4293      	cmp	r3, r2
   2fe76:	dc03      	bgt.n	2fe80 <MQTTPacket_len+0x3c>
		rem_len += 3;
   2fe78:	687b      	ldr	r3, [r7, #4]
   2fe7a:	3303      	adds	r3, #3
   2fe7c:	607b      	str	r3, [r7, #4]
   2fe7e:	e002      	b.n	2fe86 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   2fe80:	687b      	ldr	r3, [r7, #4]
   2fe82:	3304      	adds	r3, #4
   2fe84:	607b      	str	r3, [r7, #4]
	return rem_len;
   2fe86:	687b      	ldr	r3, [r7, #4]
}
   2fe88:	0018      	movs	r0, r3
   2fe8a:	46bd      	mov	sp, r7
   2fe8c:	b002      	add	sp, #8
   2fe8e:	bd80      	pop	{r7, pc}
   2fe90:	00003fff 	.word	0x00003fff
   2fe94:	001ffffe 	.word	0x001ffffe

0002fe98 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   2fe98:	b580      	push	{r7, lr}
   2fe9a:	b084      	sub	sp, #16
   2fe9c:	af00      	add	r7, sp, #0
   2fe9e:	6078      	str	r0, [r7, #4]
   2fea0:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   2fea2:	2300      	movs	r3, #0
   2fea4:	60fb      	str	r3, [r7, #12]
   2fea6:	e00a      	b.n	2febe <bufchar+0x26>
		*c = *bufptr++;
   2fea8:	4b09      	ldr	r3, [pc, #36]	; (2fed0 <bufchar+0x38>)
   2feaa:	681b      	ldr	r3, [r3, #0]
   2feac:	1c59      	adds	r1, r3, #1
   2feae:	4a08      	ldr	r2, [pc, #32]	; (2fed0 <bufchar+0x38>)
   2feb0:	6011      	str	r1, [r2, #0]
   2feb2:	781a      	ldrb	r2, [r3, #0]
   2feb4:	687b      	ldr	r3, [r7, #4]
   2feb6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   2feb8:	68fb      	ldr	r3, [r7, #12]
   2feba:	3301      	adds	r3, #1
   2febc:	60fb      	str	r3, [r7, #12]
   2febe:	68fa      	ldr	r2, [r7, #12]
   2fec0:	683b      	ldr	r3, [r7, #0]
   2fec2:	429a      	cmp	r2, r3
   2fec4:	dbf0      	blt.n	2fea8 <bufchar+0x10>
	return count;
   2fec6:	683b      	ldr	r3, [r7, #0]
}
   2fec8:	0018      	movs	r0, r3
   2feca:	46bd      	mov	sp, r7
   2fecc:	b004      	add	sp, #16
   2fece:	bd80      	pop	{r7, pc}
   2fed0:	20004570 	.word	0x20004570

0002fed4 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   2fed4:	b580      	push	{r7, lr}
   2fed6:	b082      	sub	sp, #8
   2fed8:	af00      	add	r7, sp, #0
   2feda:	6078      	str	r0, [r7, #4]
   2fedc:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   2fede:	4b07      	ldr	r3, [pc, #28]	; (2fefc <MQTTPacket_decodeBuf+0x28>)
   2fee0:	687a      	ldr	r2, [r7, #4]
   2fee2:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   2fee4:	683a      	ldr	r2, [r7, #0]
   2fee6:	4b06      	ldr	r3, [pc, #24]	; (2ff00 <MQTTPacket_decodeBuf+0x2c>)
   2fee8:	0011      	movs	r1, r2
   2feea:	0018      	movs	r0, r3
   2feec:	4b05      	ldr	r3, [pc, #20]	; (2ff04 <MQTTPacket_decodeBuf+0x30>)
   2feee:	4798      	blx	r3
   2fef0:	0003      	movs	r3, r0
}
   2fef2:	0018      	movs	r0, r3
   2fef4:	46bd      	mov	sp, r7
   2fef6:	b002      	add	sp, #8
   2fef8:	bd80      	pop	{r7, pc}
   2fefa:	46c0      	nop			; (mov r8, r8)
   2fefc:	20004570 	.word	0x20004570
   2ff00:	0002fe99 	.word	0x0002fe99
   2ff04:	0002fdc1 	.word	0x0002fdc1

0002ff08 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   2ff08:	b580      	push	{r7, lr}
   2ff0a:	b084      	sub	sp, #16
   2ff0c:	af00      	add	r7, sp, #0
   2ff0e:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   2ff10:	687b      	ldr	r3, [r7, #4]
   2ff12:	681b      	ldr	r3, [r3, #0]
   2ff14:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   2ff16:	68fb      	ldr	r3, [r7, #12]
   2ff18:	781b      	ldrb	r3, [r3, #0]
   2ff1a:	021b      	lsls	r3, r3, #8
   2ff1c:	68fa      	ldr	r2, [r7, #12]
   2ff1e:	3201      	adds	r2, #1
   2ff20:	7812      	ldrb	r2, [r2, #0]
   2ff22:	189b      	adds	r3, r3, r2
   2ff24:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   2ff26:	687b      	ldr	r3, [r7, #4]
   2ff28:	681b      	ldr	r3, [r3, #0]
   2ff2a:	1c9a      	adds	r2, r3, #2
   2ff2c:	687b      	ldr	r3, [r7, #4]
   2ff2e:	601a      	str	r2, [r3, #0]
	return len;
   2ff30:	68bb      	ldr	r3, [r7, #8]
}
   2ff32:	0018      	movs	r0, r3
   2ff34:	46bd      	mov	sp, r7
   2ff36:	b004      	add	sp, #16
   2ff38:	bd80      	pop	{r7, pc}

0002ff3a <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   2ff3a:	b580      	push	{r7, lr}
   2ff3c:	b084      	sub	sp, #16
   2ff3e:	af00      	add	r7, sp, #0
   2ff40:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   2ff42:	687b      	ldr	r3, [r7, #4]
   2ff44:	681a      	ldr	r2, [r3, #0]
   2ff46:	230f      	movs	r3, #15
   2ff48:	18fb      	adds	r3, r7, r3
   2ff4a:	7812      	ldrb	r2, [r2, #0]
   2ff4c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2ff4e:	687b      	ldr	r3, [r7, #4]
   2ff50:	681b      	ldr	r3, [r3, #0]
   2ff52:	1c5a      	adds	r2, r3, #1
   2ff54:	687b      	ldr	r3, [r7, #4]
   2ff56:	601a      	str	r2, [r3, #0]
	return c;
   2ff58:	230f      	movs	r3, #15
   2ff5a:	18fb      	adds	r3, r7, r3
   2ff5c:	781b      	ldrb	r3, [r3, #0]
}
   2ff5e:	0018      	movs	r0, r3
   2ff60:	46bd      	mov	sp, r7
   2ff62:	b004      	add	sp, #16
   2ff64:	bd80      	pop	{r7, pc}

0002ff66 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   2ff66:	b580      	push	{r7, lr}
   2ff68:	b082      	sub	sp, #8
   2ff6a:	af00      	add	r7, sp, #0
   2ff6c:	6078      	str	r0, [r7, #4]
   2ff6e:	000a      	movs	r2, r1
   2ff70:	1cfb      	adds	r3, r7, #3
   2ff72:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   2ff74:	687b      	ldr	r3, [r7, #4]
   2ff76:	681b      	ldr	r3, [r3, #0]
   2ff78:	1cfa      	adds	r2, r7, #3
   2ff7a:	7812      	ldrb	r2, [r2, #0]
   2ff7c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2ff7e:	687b      	ldr	r3, [r7, #4]
   2ff80:	681b      	ldr	r3, [r3, #0]
   2ff82:	1c5a      	adds	r2, r3, #1
   2ff84:	687b      	ldr	r3, [r7, #4]
   2ff86:	601a      	str	r2, [r3, #0]
}
   2ff88:	46c0      	nop			; (mov r8, r8)
   2ff8a:	46bd      	mov	sp, r7
   2ff8c:	b002      	add	sp, #8
   2ff8e:	bd80      	pop	{r7, pc}

0002ff90 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   2ff90:	b580      	push	{r7, lr}
   2ff92:	b082      	sub	sp, #8
   2ff94:	af00      	add	r7, sp, #0
   2ff96:	6078      	str	r0, [r7, #4]
   2ff98:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   2ff9a:	687b      	ldr	r3, [r7, #4]
   2ff9c:	681a      	ldr	r2, [r3, #0]
   2ff9e:	683b      	ldr	r3, [r7, #0]
   2ffa0:	2b00      	cmp	r3, #0
   2ffa2:	da00      	bge.n	2ffa6 <writeInt+0x16>
   2ffa4:	33ff      	adds	r3, #255	; 0xff
   2ffa6:	121b      	asrs	r3, r3, #8
   2ffa8:	b2db      	uxtb	r3, r3
   2ffaa:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2ffac:	687b      	ldr	r3, [r7, #4]
   2ffae:	681b      	ldr	r3, [r3, #0]
   2ffb0:	1c5a      	adds	r2, r3, #1
   2ffb2:	687b      	ldr	r3, [r7, #4]
   2ffb4:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   2ffb6:	687b      	ldr	r3, [r7, #4]
   2ffb8:	681a      	ldr	r2, [r3, #0]
   2ffba:	683b      	ldr	r3, [r7, #0]
   2ffbc:	4908      	ldr	r1, [pc, #32]	; (2ffe0 <writeInt+0x50>)
   2ffbe:	400b      	ands	r3, r1
   2ffc0:	d503      	bpl.n	2ffca <writeInt+0x3a>
   2ffc2:	3b01      	subs	r3, #1
   2ffc4:	4907      	ldr	r1, [pc, #28]	; (2ffe4 <writeInt+0x54>)
   2ffc6:	430b      	orrs	r3, r1
   2ffc8:	3301      	adds	r3, #1
   2ffca:	b2db      	uxtb	r3, r3
   2ffcc:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2ffce:	687b      	ldr	r3, [r7, #4]
   2ffd0:	681b      	ldr	r3, [r3, #0]
   2ffd2:	1c5a      	adds	r2, r3, #1
   2ffd4:	687b      	ldr	r3, [r7, #4]
   2ffd6:	601a      	str	r2, [r3, #0]
}
   2ffd8:	46c0      	nop			; (mov r8, r8)
   2ffda:	46bd      	mov	sp, r7
   2ffdc:	b002      	add	sp, #8
   2ffde:	bd80      	pop	{r7, pc}
   2ffe0:	800000ff 	.word	0x800000ff
   2ffe4:	ffffff00 	.word	0xffffff00

0002ffe8 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   2ffe8:	b580      	push	{r7, lr}
   2ffea:	b084      	sub	sp, #16
   2ffec:	af00      	add	r7, sp, #0
   2ffee:	6078      	str	r0, [r7, #4]
   2fff0:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   2fff2:	683b      	ldr	r3, [r7, #0]
   2fff4:	0018      	movs	r0, r3
   2fff6:	4b0d      	ldr	r3, [pc, #52]	; (3002c <writeCString+0x44>)
   2fff8:	4798      	blx	r3
   2fffa:	0003      	movs	r3, r0
   2fffc:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   2fffe:	68fa      	ldr	r2, [r7, #12]
   30000:	687b      	ldr	r3, [r7, #4]
   30002:	0011      	movs	r1, r2
   30004:	0018      	movs	r0, r3
   30006:	4b0a      	ldr	r3, [pc, #40]	; (30030 <writeCString+0x48>)
   30008:	4798      	blx	r3
	memcpy(*pptr, string, len);
   3000a:	687b      	ldr	r3, [r7, #4]
   3000c:	681b      	ldr	r3, [r3, #0]
   3000e:	68fa      	ldr	r2, [r7, #12]
   30010:	6839      	ldr	r1, [r7, #0]
   30012:	0018      	movs	r0, r3
   30014:	4b07      	ldr	r3, [pc, #28]	; (30034 <writeCString+0x4c>)
   30016:	4798      	blx	r3
	*pptr += len;
   30018:	687b      	ldr	r3, [r7, #4]
   3001a:	681a      	ldr	r2, [r3, #0]
   3001c:	68fb      	ldr	r3, [r7, #12]
   3001e:	18d2      	adds	r2, r2, r3
   30020:	687b      	ldr	r3, [r7, #4]
   30022:	601a      	str	r2, [r3, #0]
}
   30024:	46c0      	nop			; (mov r8, r8)
   30026:	46bd      	mov	sp, r7
   30028:	b004      	add	sp, #16
   3002a:	bd80      	pop	{r7, pc}
   3002c:	000349e7 	.word	0x000349e7
   30030:	0002ff91 	.word	0x0002ff91
   30034:	000345f9 	.word	0x000345f9

00030038 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   30038:	b580      	push	{r7, lr}
   3003a:	b084      	sub	sp, #16
   3003c:	af00      	add	r7, sp, #0
   3003e:	60f8      	str	r0, [r7, #12]
   30040:	0038      	movs	r0, r7
   30042:	6001      	str	r1, [r0, #0]
   30044:	6042      	str	r2, [r0, #4]
   30046:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   30048:	003b      	movs	r3, r7
   3004a:	685b      	ldr	r3, [r3, #4]
   3004c:	2b00      	cmp	r3, #0
   3004e:	dd17      	ble.n	30080 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   30050:	003b      	movs	r3, r7
   30052:	685a      	ldr	r2, [r3, #4]
   30054:	68fb      	ldr	r3, [r7, #12]
   30056:	0011      	movs	r1, r2
   30058:	0018      	movs	r0, r3
   3005a:	4b14      	ldr	r3, [pc, #80]	; (300ac <writeMQTTString+0x74>)
   3005c:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   3005e:	68fb      	ldr	r3, [r7, #12]
   30060:	6818      	ldr	r0, [r3, #0]
   30062:	003b      	movs	r3, r7
   30064:	6899      	ldr	r1, [r3, #8]
   30066:	003b      	movs	r3, r7
   30068:	685b      	ldr	r3, [r3, #4]
   3006a:	001a      	movs	r2, r3
   3006c:	4b10      	ldr	r3, [pc, #64]	; (300b0 <writeMQTTString+0x78>)
   3006e:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   30070:	68fb      	ldr	r3, [r7, #12]
   30072:	681a      	ldr	r2, [r3, #0]
   30074:	003b      	movs	r3, r7
   30076:	685b      	ldr	r3, [r3, #4]
   30078:	18d2      	adds	r2, r2, r3
   3007a:	68fb      	ldr	r3, [r7, #12]
   3007c:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   3007e:	e010      	b.n	300a2 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   30080:	003b      	movs	r3, r7
   30082:	681b      	ldr	r3, [r3, #0]
   30084:	2b00      	cmp	r3, #0
   30086:	d007      	beq.n	30098 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   30088:	003b      	movs	r3, r7
   3008a:	681a      	ldr	r2, [r3, #0]
   3008c:	68fb      	ldr	r3, [r7, #12]
   3008e:	0011      	movs	r1, r2
   30090:	0018      	movs	r0, r3
   30092:	4b08      	ldr	r3, [pc, #32]	; (300b4 <writeMQTTString+0x7c>)
   30094:	4798      	blx	r3
}
   30096:	e004      	b.n	300a2 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   30098:	68fb      	ldr	r3, [r7, #12]
   3009a:	2100      	movs	r1, #0
   3009c:	0018      	movs	r0, r3
   3009e:	4b03      	ldr	r3, [pc, #12]	; (300ac <writeMQTTString+0x74>)
   300a0:	4798      	blx	r3
}
   300a2:	46c0      	nop			; (mov r8, r8)
   300a4:	46bd      	mov	sp, r7
   300a6:	b004      	add	sp, #16
   300a8:	bd80      	pop	{r7, pc}
   300aa:	46c0      	nop			; (mov r8, r8)
   300ac:	0002ff91 	.word	0x0002ff91
   300b0:	000345f9 	.word	0x000345f9
   300b4:	0002ffe9 	.word	0x0002ffe9

000300b8 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   300b8:	b580      	push	{r7, lr}
   300ba:	b086      	sub	sp, #24
   300bc:	af00      	add	r7, sp, #0
   300be:	60f8      	str	r0, [r7, #12]
   300c0:	60b9      	str	r1, [r7, #8]
   300c2:	607a      	str	r2, [r7, #4]
	int rc = 0;
   300c4:	2300      	movs	r3, #0
   300c6:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   300c8:	687a      	ldr	r2, [r7, #4]
   300ca:	68bb      	ldr	r3, [r7, #8]
   300cc:	681b      	ldr	r3, [r3, #0]
   300ce:	1ad3      	subs	r3, r2, r3
   300d0:	2b01      	cmp	r3, #1
   300d2:	dd1b      	ble.n	3010c <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   300d4:	68bb      	ldr	r3, [r7, #8]
   300d6:	0018      	movs	r0, r3
   300d8:	4b10      	ldr	r3, [pc, #64]	; (3011c <readMQTTLenString+0x64>)
   300da:	4798      	blx	r3
   300dc:	0002      	movs	r2, r0
   300de:	68fb      	ldr	r3, [r7, #12]
   300e0:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   300e2:	68bb      	ldr	r3, [r7, #8]
   300e4:	681a      	ldr	r2, [r3, #0]
   300e6:	68fb      	ldr	r3, [r7, #12]
   300e8:	685b      	ldr	r3, [r3, #4]
   300ea:	18d2      	adds	r2, r2, r3
   300ec:	687b      	ldr	r3, [r7, #4]
   300ee:	429a      	cmp	r2, r3
   300f0:	d80c      	bhi.n	3010c <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   300f2:	68bb      	ldr	r3, [r7, #8]
   300f4:	681a      	ldr	r2, [r3, #0]
   300f6:	68fb      	ldr	r3, [r7, #12]
   300f8:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   300fa:	68bb      	ldr	r3, [r7, #8]
   300fc:	681a      	ldr	r2, [r3, #0]
   300fe:	68fb      	ldr	r3, [r7, #12]
   30100:	685b      	ldr	r3, [r3, #4]
   30102:	18d2      	adds	r2, r2, r3
   30104:	68bb      	ldr	r3, [r7, #8]
   30106:	601a      	str	r2, [r3, #0]
			rc = 1;
   30108:	2301      	movs	r3, #1
   3010a:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   3010c:	68fb      	ldr	r3, [r7, #12]
   3010e:	2200      	movs	r2, #0
   30110:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   30112:	697b      	ldr	r3, [r7, #20]
}
   30114:	0018      	movs	r0, r3
   30116:	46bd      	mov	sp, r7
   30118:	b006      	add	sp, #24
   3011a:	bd80      	pop	{r7, pc}
   3011c:	0002ff09 	.word	0x0002ff09

00030120 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   30120:	b580      	push	{r7, lr}
   30122:	b086      	sub	sp, #24
   30124:	af00      	add	r7, sp, #0
   30126:	1d3b      	adds	r3, r7, #4
   30128:	6018      	str	r0, [r3, #0]
   3012a:	6059      	str	r1, [r3, #4]
   3012c:	609a      	str	r2, [r3, #8]
	int rc = 0;
   3012e:	2300      	movs	r3, #0
   30130:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   30132:	1d3b      	adds	r3, r7, #4
   30134:	681b      	ldr	r3, [r3, #0]
   30136:	2b00      	cmp	r3, #0
   30138:	d007      	beq.n	3014a <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   3013a:	1d3b      	adds	r3, r7, #4
   3013c:	681b      	ldr	r3, [r3, #0]
   3013e:	0018      	movs	r0, r3
   30140:	4b06      	ldr	r3, [pc, #24]	; (3015c <MQTTstrlen+0x3c>)
   30142:	4798      	blx	r3
   30144:	0003      	movs	r3, r0
   30146:	617b      	str	r3, [r7, #20]
   30148:	e002      	b.n	30150 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   3014a:	1d3b      	adds	r3, r7, #4
   3014c:	685b      	ldr	r3, [r3, #4]
   3014e:	617b      	str	r3, [r7, #20]
	return rc;
   30150:	697b      	ldr	r3, [r7, #20]
}
   30152:	0018      	movs	r0, r3
   30154:	46bd      	mov	sp, r7
   30156:	b006      	add	sp, #24
   30158:	bd80      	pop	{r7, pc}
   3015a:	46c0      	nop			; (mov r8, r8)
   3015c:	000349e7 	.word	0x000349e7

00030160 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   30160:	b580      	push	{r7, lr}
   30162:	b086      	sub	sp, #24
   30164:	af00      	add	r7, sp, #0
   30166:	6078      	str	r0, [r7, #4]
   30168:	6039      	str	r1, [r7, #0]
	int alen = 0,
   3016a:	2300      	movs	r3, #0
   3016c:	617b      	str	r3, [r7, #20]
		blen = 0;
   3016e:	2300      	movs	r3, #0
   30170:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   30172:	687b      	ldr	r3, [r7, #4]
   30174:	681b      	ldr	r3, [r3, #0]
   30176:	2b00      	cmp	r3, #0
   30178:	d00a      	beq.n	30190 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   3017a:	687b      	ldr	r3, [r7, #4]
   3017c:	681b      	ldr	r3, [r3, #0]
   3017e:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   30180:	687b      	ldr	r3, [r7, #4]
   30182:	681b      	ldr	r3, [r3, #0]
   30184:	0018      	movs	r0, r3
   30186:	4b12      	ldr	r3, [pc, #72]	; (301d0 <MQTTPacket_equals+0x70>)
   30188:	4798      	blx	r3
   3018a:	0003      	movs	r3, r0
   3018c:	617b      	str	r3, [r7, #20]
   3018e:	e005      	b.n	3019c <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   30190:	687b      	ldr	r3, [r7, #4]
   30192:	689b      	ldr	r3, [r3, #8]
   30194:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   30196:	687b      	ldr	r3, [r7, #4]
   30198:	685b      	ldr	r3, [r3, #4]
   3019a:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   3019c:	683b      	ldr	r3, [r7, #0]
   3019e:	0018      	movs	r0, r3
   301a0:	4b0b      	ldr	r3, [pc, #44]	; (301d0 <MQTTPacket_equals+0x70>)
   301a2:	4798      	blx	r3
   301a4:	0003      	movs	r3, r0
   301a6:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   301a8:	697a      	ldr	r2, [r7, #20]
   301aa:	68fb      	ldr	r3, [r7, #12]
   301ac:	429a      	cmp	r2, r3
   301ae:	d109      	bne.n	301c4 <MQTTPacket_equals+0x64>
   301b0:	697a      	ldr	r2, [r7, #20]
   301b2:	6839      	ldr	r1, [r7, #0]
   301b4:	693b      	ldr	r3, [r7, #16]
   301b6:	0018      	movs	r0, r3
   301b8:	4b06      	ldr	r3, [pc, #24]	; (301d4 <MQTTPacket_equals+0x74>)
   301ba:	4798      	blx	r3
   301bc:	1e03      	subs	r3, r0, #0
   301be:	d101      	bne.n	301c4 <MQTTPacket_equals+0x64>
   301c0:	2301      	movs	r3, #1
   301c2:	e000      	b.n	301c6 <MQTTPacket_equals+0x66>
   301c4:	2300      	movs	r3, #0
}
   301c6:	0018      	movs	r0, r3
   301c8:	46bd      	mov	sp, r7
   301ca:	b006      	add	sp, #24
   301cc:	bd80      	pop	{r7, pc}
   301ce:	46c0      	nop			; (mov r8, r8)
   301d0:	000349e7 	.word	0x000349e7
   301d4:	000349f5 	.word	0x000349f5

000301d8 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   301d8:	b580      	push	{r7, lr}
   301da:	b086      	sub	sp, #24
   301dc:	af00      	add	r7, sp, #0
   301de:	60f8      	str	r0, [r7, #12]
   301e0:	0038      	movs	r0, r7
   301e2:	6001      	str	r1, [r0, #0]
   301e4:	6042      	str	r2, [r0, #4]
   301e6:	6083      	str	r3, [r0, #8]
	int len = 0;
   301e8:	2300      	movs	r3, #0
   301ea:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   301ec:	003b      	movs	r3, r7
   301ee:	6818      	ldr	r0, [r3, #0]
   301f0:	6859      	ldr	r1, [r3, #4]
   301f2:	689a      	ldr	r2, [r3, #8]
   301f4:	4b09      	ldr	r3, [pc, #36]	; (3021c <MQTTSerialize_publishLength+0x44>)
   301f6:	4798      	blx	r3
   301f8:	0003      	movs	r3, r0
   301fa:	1c9a      	adds	r2, r3, #2
   301fc:	6a3b      	ldr	r3, [r7, #32]
   301fe:	18d3      	adds	r3, r2, r3
   30200:	697a      	ldr	r2, [r7, #20]
   30202:	18d3      	adds	r3, r2, r3
   30204:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   30206:	68fb      	ldr	r3, [r7, #12]
   30208:	2b00      	cmp	r3, #0
   3020a:	dd02      	ble.n	30212 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   3020c:	697b      	ldr	r3, [r7, #20]
   3020e:	3302      	adds	r3, #2
   30210:	617b      	str	r3, [r7, #20]
	return len;
   30212:	697b      	ldr	r3, [r7, #20]
}
   30214:	0018      	movs	r0, r3
   30216:	46bd      	mov	sp, r7
   30218:	b006      	add	sp, #24
   3021a:	bd80      	pop	{r7, pc}
   3021c:	00030121 	.word	0x00030121

00030220 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   30220:	b590      	push	{r4, r7, lr}
   30222:	b08b      	sub	sp, #44	; 0x2c
   30224:	af02      	add	r7, sp, #8
   30226:	60f8      	str	r0, [r7, #12]
   30228:	60b9      	str	r1, [r7, #8]
   3022a:	603b      	str	r3, [r7, #0]
   3022c:	1dfb      	adds	r3, r7, #7
   3022e:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   30230:	68fb      	ldr	r3, [r7, #12]
   30232:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   30234:	2300      	movs	r3, #0
   30236:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   30238:	2300      	movs	r3, #0
   3023a:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   3023c:	2300      	movs	r3, #0
   3023e:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   30240:	2308      	movs	r3, #8
   30242:	2230      	movs	r2, #48	; 0x30
   30244:	4694      	mov	ip, r2
   30246:	44bc      	add	ip, r7
   30248:	4463      	add	r3, ip
   3024a:	6838      	ldr	r0, [r7, #0]
   3024c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   3024e:	9200      	str	r2, [sp, #0]
   30250:	6819      	ldr	r1, [r3, #0]
   30252:	685a      	ldr	r2, [r3, #4]
   30254:	689b      	ldr	r3, [r3, #8]
   30256:	4c46      	ldr	r4, [pc, #280]	; (30370 <MQTTSerialize_publish+0x150>)
   30258:	47a0      	blx	r4
   3025a:	0003      	movs	r3, r0
   3025c:	61bb      	str	r3, [r7, #24]
   3025e:	69bb      	ldr	r3, [r7, #24]
   30260:	0018      	movs	r0, r3
   30262:	4b44      	ldr	r3, [pc, #272]	; (30374 <MQTTSerialize_publish+0x154>)
   30264:	4798      	blx	r3
   30266:	0002      	movs	r2, r0
   30268:	68bb      	ldr	r3, [r7, #8]
   3026a:	429a      	cmp	r2, r3
   3026c:	dd03      	ble.n	30276 <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3026e:	2302      	movs	r3, #2
   30270:	425b      	negs	r3, r3
   30272:	61fb      	str	r3, [r7, #28]
		goto exit;
   30274:	e077      	b.n	30366 <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   30276:	2310      	movs	r3, #16
   30278:	18fb      	adds	r3, r7, r3
   3027a:	781a      	ldrb	r2, [r3, #0]
   3027c:	210f      	movs	r1, #15
   3027e:	400a      	ands	r2, r1
   30280:	1c11      	adds	r1, r2, #0
   30282:	2230      	movs	r2, #48	; 0x30
   30284:	430a      	orrs	r2, r1
   30286:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   30288:	1dfb      	adds	r3, r7, #7
   3028a:	781b      	ldrb	r3, [r3, #0]
   3028c:	2201      	movs	r2, #1
   3028e:	4013      	ands	r3, r2
   30290:	b2da      	uxtb	r2, r3
   30292:	2310      	movs	r3, #16
   30294:	18fb      	adds	r3, r7, r3
   30296:	2101      	movs	r1, #1
   30298:	400a      	ands	r2, r1
   3029a:	00d0      	lsls	r0, r2, #3
   3029c:	781a      	ldrb	r2, [r3, #0]
   3029e:	2108      	movs	r1, #8
   302a0:	438a      	bics	r2, r1
   302a2:	1c11      	adds	r1, r2, #0
   302a4:	1c02      	adds	r2, r0, #0
   302a6:	430a      	orrs	r2, r1
   302a8:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   302aa:	683b      	ldr	r3, [r7, #0]
   302ac:	b2db      	uxtb	r3, r3
   302ae:	1c1a      	adds	r2, r3, #0
   302b0:	2303      	movs	r3, #3
   302b2:	4013      	ands	r3, r2
   302b4:	b2da      	uxtb	r2, r3
   302b6:	2310      	movs	r3, #16
   302b8:	18fb      	adds	r3, r7, r3
   302ba:	2103      	movs	r1, #3
   302bc:	400a      	ands	r2, r1
   302be:	1890      	adds	r0, r2, r2
   302c0:	781a      	ldrb	r2, [r3, #0]
   302c2:	2106      	movs	r1, #6
   302c4:	438a      	bics	r2, r1
   302c6:	1c11      	adds	r1, r2, #0
   302c8:	1c02      	adds	r2, r0, #0
   302ca:	430a      	orrs	r2, r1
   302cc:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   302ce:	2330      	movs	r3, #48	; 0x30
   302d0:	18fb      	adds	r3, r7, r3
   302d2:	781b      	ldrb	r3, [r3, #0]
   302d4:	2201      	movs	r2, #1
   302d6:	4013      	ands	r3, r2
   302d8:	b2da      	uxtb	r2, r3
   302da:	2310      	movs	r3, #16
   302dc:	18fb      	adds	r3, r7, r3
   302de:	2101      	movs	r1, #1
   302e0:	400a      	ands	r2, r1
   302e2:	0010      	movs	r0, r2
   302e4:	781a      	ldrb	r2, [r3, #0]
   302e6:	2101      	movs	r1, #1
   302e8:	438a      	bics	r2, r1
   302ea:	1c11      	adds	r1, r2, #0
   302ec:	1c02      	adds	r2, r0, #0
   302ee:	430a      	orrs	r2, r1
   302f0:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   302f2:	2310      	movs	r3, #16
   302f4:	18fb      	adds	r3, r7, r3
   302f6:	781a      	ldrb	r2, [r3, #0]
   302f8:	2314      	movs	r3, #20
   302fa:	18fb      	adds	r3, r7, r3
   302fc:	0011      	movs	r1, r2
   302fe:	0018      	movs	r0, r3
   30300:	4b1d      	ldr	r3, [pc, #116]	; (30378 <MQTTSerialize_publish+0x158>)
   30302:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   30304:	697b      	ldr	r3, [r7, #20]
   30306:	69ba      	ldr	r2, [r7, #24]
   30308:	0011      	movs	r1, r2
   3030a:	0018      	movs	r0, r3
   3030c:	4b1b      	ldr	r3, [pc, #108]	; (3037c <MQTTSerialize_publish+0x15c>)
   3030e:	4798      	blx	r3
   30310:	0002      	movs	r2, r0
   30312:	697b      	ldr	r3, [r7, #20]
   30314:	189b      	adds	r3, r3, r2
   30316:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   30318:	2308      	movs	r3, #8
   3031a:	2230      	movs	r2, #48	; 0x30
   3031c:	4694      	mov	ip, r2
   3031e:	44bc      	add	ip, r7
   30320:	4463      	add	r3, ip
   30322:	2214      	movs	r2, #20
   30324:	18b8      	adds	r0, r7, r2
   30326:	6819      	ldr	r1, [r3, #0]
   30328:	685a      	ldr	r2, [r3, #4]
   3032a:	689b      	ldr	r3, [r3, #8]
   3032c:	4c14      	ldr	r4, [pc, #80]	; (30380 <MQTTSerialize_publish+0x160>)
   3032e:	47a0      	blx	r4

	if (qos > 0)
   30330:	683b      	ldr	r3, [r7, #0]
   30332:	2b00      	cmp	r3, #0
   30334:	dd08      	ble.n	30348 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   30336:	2334      	movs	r3, #52	; 0x34
   30338:	18fb      	adds	r3, r7, r3
   3033a:	881a      	ldrh	r2, [r3, #0]
   3033c:	2314      	movs	r3, #20
   3033e:	18fb      	adds	r3, r7, r3
   30340:	0011      	movs	r1, r2
   30342:	0018      	movs	r0, r3
   30344:	4b0f      	ldr	r3, [pc, #60]	; (30384 <MQTTSerialize_publish+0x164>)
   30346:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   30348:	697b      	ldr	r3, [r7, #20]
   3034a:	6cba      	ldr	r2, [r7, #72]	; 0x48
   3034c:	6c79      	ldr	r1, [r7, #68]	; 0x44
   3034e:	0018      	movs	r0, r3
   30350:	4b0d      	ldr	r3, [pc, #52]	; (30388 <MQTTSerialize_publish+0x168>)
   30352:	4798      	blx	r3
	ptr += payloadlen;
   30354:	697a      	ldr	r2, [r7, #20]
   30356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30358:	18d3      	adds	r3, r2, r3
   3035a:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   3035c:	697b      	ldr	r3, [r7, #20]
   3035e:	001a      	movs	r2, r3
   30360:	68fb      	ldr	r3, [r7, #12]
   30362:	1ad3      	subs	r3, r2, r3
   30364:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30366:	69fb      	ldr	r3, [r7, #28]
}
   30368:	0018      	movs	r0, r3
   3036a:	46bd      	mov	sp, r7
   3036c:	b009      	add	sp, #36	; 0x24
   3036e:	bd90      	pop	{r4, r7, pc}
   30370:	000301d9 	.word	0x000301d9
   30374:	0002fe45 	.word	0x0002fe45
   30378:	0002ff67 	.word	0x0002ff67
   3037c:	0002fd4d 	.word	0x0002fd4d
   30380:	00030039 	.word	0x00030039
   30384:	0002ff91 	.word	0x0002ff91
   30388:	000345f9 	.word	0x000345f9

0003038c <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   3038c:	b580      	push	{r7, lr}
   3038e:	b088      	sub	sp, #32
   30390:	af00      	add	r7, sp, #0
   30392:	60f8      	str	r0, [r7, #12]
   30394:	60b9      	str	r1, [r7, #8]
   30396:	0019      	movs	r1, r3
   30398:	1dfb      	adds	r3, r7, #7
   3039a:	701a      	strb	r2, [r3, #0]
   3039c:	1dbb      	adds	r3, r7, #6
   3039e:	1c0a      	adds	r2, r1, #0
   303a0:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   303a2:	2300      	movs	r3, #0
   303a4:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   303a6:	2300      	movs	r3, #0
   303a8:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   303aa:	68fb      	ldr	r3, [r7, #12]
   303ac:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   303ae:	68bb      	ldr	r3, [r7, #8]
   303b0:	2b03      	cmp	r3, #3
   303b2:	dc03      	bgt.n	303bc <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   303b4:	2302      	movs	r3, #2
   303b6:	425b      	negs	r3, r3
   303b8:	61fb      	str	r3, [r7, #28]
		goto exit;
   303ba:	e055      	b.n	30468 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   303bc:	1dfb      	adds	r3, r7, #7
   303be:	781b      	ldrb	r3, [r3, #0]
   303c0:	220f      	movs	r2, #15
   303c2:	4013      	ands	r3, r2
   303c4:	b2da      	uxtb	r2, r3
   303c6:	2318      	movs	r3, #24
   303c8:	18fb      	adds	r3, r7, r3
   303ca:	0110      	lsls	r0, r2, #4
   303cc:	781a      	ldrb	r2, [r3, #0]
   303ce:	210f      	movs	r1, #15
   303d0:	400a      	ands	r2, r1
   303d2:	1c11      	adds	r1, r2, #0
   303d4:	1c02      	adds	r2, r0, #0
   303d6:	430a      	orrs	r2, r1
   303d8:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   303da:	1dbb      	adds	r3, r7, #6
   303dc:	781b      	ldrb	r3, [r3, #0]
   303de:	2201      	movs	r2, #1
   303e0:	4013      	ands	r3, r2
   303e2:	b2da      	uxtb	r2, r3
   303e4:	2318      	movs	r3, #24
   303e6:	18fb      	adds	r3, r7, r3
   303e8:	2101      	movs	r1, #1
   303ea:	400a      	ands	r2, r1
   303ec:	00d0      	lsls	r0, r2, #3
   303ee:	781a      	ldrb	r2, [r3, #0]
   303f0:	2108      	movs	r1, #8
   303f2:	438a      	bics	r2, r1
   303f4:	1c11      	adds	r1, r2, #0
   303f6:	1c02      	adds	r2, r0, #0
   303f8:	430a      	orrs	r2, r1
   303fa:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   303fc:	1dfb      	adds	r3, r7, #7
   303fe:	781b      	ldrb	r3, [r3, #0]
   30400:	3b06      	subs	r3, #6
   30402:	425a      	negs	r2, r3
   30404:	4153      	adcs	r3, r2
   30406:	b2db      	uxtb	r3, r3
   30408:	1c1a      	adds	r2, r3, #0
   3040a:	2303      	movs	r3, #3
   3040c:	4013      	ands	r3, r2
   3040e:	b2da      	uxtb	r2, r3
   30410:	2318      	movs	r3, #24
   30412:	18fb      	adds	r3, r7, r3
   30414:	2103      	movs	r1, #3
   30416:	400a      	ands	r2, r1
   30418:	1890      	adds	r0, r2, r2
   3041a:	781a      	ldrb	r2, [r3, #0]
   3041c:	2106      	movs	r1, #6
   3041e:	438a      	bics	r2, r1
   30420:	1c11      	adds	r1, r2, #0
   30422:	1c02      	adds	r2, r0, #0
   30424:	430a      	orrs	r2, r1
   30426:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30428:	2318      	movs	r3, #24
   3042a:	18fb      	adds	r3, r7, r3
   3042c:	781a      	ldrb	r2, [r3, #0]
   3042e:	2314      	movs	r3, #20
   30430:	18fb      	adds	r3, r7, r3
   30432:	0011      	movs	r1, r2
   30434:	0018      	movs	r0, r3
   30436:	4b0f      	ldr	r3, [pc, #60]	; (30474 <MQTTSerialize_ack+0xe8>)
   30438:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   3043a:	697b      	ldr	r3, [r7, #20]
   3043c:	2102      	movs	r1, #2
   3043e:	0018      	movs	r0, r3
   30440:	4b0d      	ldr	r3, [pc, #52]	; (30478 <MQTTSerialize_ack+0xec>)
   30442:	4798      	blx	r3
   30444:	0002      	movs	r2, r0
   30446:	697b      	ldr	r3, [r7, #20]
   30448:	189b      	adds	r3, r3, r2
   3044a:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   3044c:	2328      	movs	r3, #40	; 0x28
   3044e:	18fb      	adds	r3, r7, r3
   30450:	881a      	ldrh	r2, [r3, #0]
   30452:	2314      	movs	r3, #20
   30454:	18fb      	adds	r3, r7, r3
   30456:	0011      	movs	r1, r2
   30458:	0018      	movs	r0, r3
   3045a:	4b08      	ldr	r3, [pc, #32]	; (3047c <MQTTSerialize_ack+0xf0>)
   3045c:	4798      	blx	r3
	rc = ptr - buf;
   3045e:	697b      	ldr	r3, [r7, #20]
   30460:	001a      	movs	r2, r3
   30462:	68fb      	ldr	r3, [r7, #12]
   30464:	1ad3      	subs	r3, r2, r3
   30466:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30468:	69fb      	ldr	r3, [r7, #28]
}
   3046a:	0018      	movs	r0, r3
   3046c:	46bd      	mov	sp, r7
   3046e:	b008      	add	sp, #32
   30470:	bd80      	pop	{r7, pc}
   30472:	46c0      	nop			; (mov r8, r8)
   30474:	0002ff67 	.word	0x0002ff67
   30478:	0002fd4d 	.word	0x0002fd4d
   3047c:	0002ff91 	.word	0x0002ff91

00030480 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   30480:	b580      	push	{r7, lr}
   30482:	b084      	sub	sp, #16
   30484:	af00      	add	r7, sp, #0
   30486:	6078      	str	r0, [r7, #4]
   30488:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   3048a:	2302      	movs	r3, #2
   3048c:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   3048e:	2300      	movs	r3, #0
   30490:	60fb      	str	r3, [r7, #12]
   30492:	e014      	b.n	304be <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   30494:	68fa      	ldr	r2, [r7, #12]
   30496:	0013      	movs	r3, r2
   30498:	005b      	lsls	r3, r3, #1
   3049a:	189b      	adds	r3, r3, r2
   3049c:	009b      	lsls	r3, r3, #2
   3049e:	001a      	movs	r2, r3
   304a0:	683b      	ldr	r3, [r7, #0]
   304a2:	189b      	adds	r3, r3, r2
   304a4:	6818      	ldr	r0, [r3, #0]
   304a6:	6859      	ldr	r1, [r3, #4]
   304a8:	689a      	ldr	r2, [r3, #8]
   304aa:	4b09      	ldr	r3, [pc, #36]	; (304d0 <MQTTSerialize_subscribeLength+0x50>)
   304ac:	4798      	blx	r3
   304ae:	0003      	movs	r3, r0
   304b0:	3303      	adds	r3, #3
   304b2:	68ba      	ldr	r2, [r7, #8]
   304b4:	18d3      	adds	r3, r2, r3
   304b6:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   304b8:	68fb      	ldr	r3, [r7, #12]
   304ba:	3301      	adds	r3, #1
   304bc:	60fb      	str	r3, [r7, #12]
   304be:	68fa      	ldr	r2, [r7, #12]
   304c0:	687b      	ldr	r3, [r7, #4]
   304c2:	429a      	cmp	r2, r3
   304c4:	dbe6      	blt.n	30494 <MQTTSerialize_subscribeLength+0x14>
	return len;
   304c6:	68bb      	ldr	r3, [r7, #8]
}
   304c8:	0018      	movs	r0, r3
   304ca:	46bd      	mov	sp, r7
   304cc:	b004      	add	sp, #16
   304ce:	bd80      	pop	{r7, pc}
   304d0:	00030121 	.word	0x00030121

000304d4 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   304d4:	b590      	push	{r4, r7, lr}
   304d6:	b08b      	sub	sp, #44	; 0x2c
   304d8:	af00      	add	r7, sp, #0
   304da:	60f8      	str	r0, [r7, #12]
   304dc:	60b9      	str	r1, [r7, #8]
   304de:	0019      	movs	r1, r3
   304e0:	1dfb      	adds	r3, r7, #7
   304e2:	701a      	strb	r2, [r3, #0]
   304e4:	1d3b      	adds	r3, r7, #4
   304e6:	1c0a      	adds	r2, r1, #0
   304e8:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   304ea:	68fb      	ldr	r3, [r7, #12]
   304ec:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   304ee:	2300      	movs	r3, #0
   304f0:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   304f2:	2300      	movs	r3, #0
   304f4:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   304f6:	2300      	movs	r3, #0
   304f8:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   304fa:	2300      	movs	r3, #0
   304fc:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   304fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   30500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30502:	0011      	movs	r1, r2
   30504:	0018      	movs	r0, r3
   30506:	4b41      	ldr	r3, [pc, #260]	; (3060c <MQTTSerialize_subscribe+0x138>)
   30508:	4798      	blx	r3
   3050a:	0003      	movs	r3, r0
   3050c:	61fb      	str	r3, [r7, #28]
   3050e:	69fb      	ldr	r3, [r7, #28]
   30510:	0018      	movs	r0, r3
   30512:	4b3f      	ldr	r3, [pc, #252]	; (30610 <MQTTSerialize_subscribe+0x13c>)
   30514:	4798      	blx	r3
   30516:	0002      	movs	r2, r0
   30518:	68bb      	ldr	r3, [r7, #8]
   3051a:	429a      	cmp	r2, r3
   3051c:	dd03      	ble.n	30526 <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3051e:	2302      	movs	r3, #2
   30520:	425b      	negs	r3, r3
   30522:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   30524:	e06c      	b.n	30600 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   30526:	2314      	movs	r3, #20
   30528:	18fb      	adds	r3, r7, r3
   3052a:	2200      	movs	r2, #0
   3052c:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   3052e:	2314      	movs	r3, #20
   30530:	18fb      	adds	r3, r7, r3
   30532:	781a      	ldrb	r2, [r3, #0]
   30534:	210f      	movs	r1, #15
   30536:	400a      	ands	r2, r1
   30538:	1c11      	adds	r1, r2, #0
   3053a:	2280      	movs	r2, #128	; 0x80
   3053c:	4252      	negs	r2, r2
   3053e:	430a      	orrs	r2, r1
   30540:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   30542:	1dfb      	adds	r3, r7, #7
   30544:	781b      	ldrb	r3, [r3, #0]
   30546:	2201      	movs	r2, #1
   30548:	4013      	ands	r3, r2
   3054a:	b2da      	uxtb	r2, r3
   3054c:	2314      	movs	r3, #20
   3054e:	18fb      	adds	r3, r7, r3
   30550:	2101      	movs	r1, #1
   30552:	400a      	ands	r2, r1
   30554:	00d0      	lsls	r0, r2, #3
   30556:	781a      	ldrb	r2, [r3, #0]
   30558:	2108      	movs	r1, #8
   3055a:	438a      	bics	r2, r1
   3055c:	1c11      	adds	r1, r2, #0
   3055e:	1c02      	adds	r2, r0, #0
   30560:	430a      	orrs	r2, r1
   30562:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   30564:	2314      	movs	r3, #20
   30566:	18fb      	adds	r3, r7, r3
   30568:	781a      	ldrb	r2, [r3, #0]
   3056a:	2106      	movs	r1, #6
   3056c:	438a      	bics	r2, r1
   3056e:	1c11      	adds	r1, r2, #0
   30570:	2202      	movs	r2, #2
   30572:	430a      	orrs	r2, r1
   30574:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30576:	2314      	movs	r3, #20
   30578:	18fb      	adds	r3, r7, r3
   3057a:	781a      	ldrb	r2, [r3, #0]
   3057c:	2318      	movs	r3, #24
   3057e:	18fb      	adds	r3, r7, r3
   30580:	0011      	movs	r1, r2
   30582:	0018      	movs	r0, r3
   30584:	4b23      	ldr	r3, [pc, #140]	; (30614 <MQTTSerialize_subscribe+0x140>)
   30586:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   30588:	69bb      	ldr	r3, [r7, #24]
   3058a:	69fa      	ldr	r2, [r7, #28]
   3058c:	0011      	movs	r1, r2
   3058e:	0018      	movs	r0, r3
   30590:	4b21      	ldr	r3, [pc, #132]	; (30618 <MQTTSerialize_subscribe+0x144>)
   30592:	4798      	blx	r3
   30594:	0002      	movs	r2, r0
   30596:	69bb      	ldr	r3, [r7, #24]
   30598:	189b      	adds	r3, r3, r2
   3059a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   3059c:	1d3b      	adds	r3, r7, #4
   3059e:	881a      	ldrh	r2, [r3, #0]
   305a0:	2318      	movs	r3, #24
   305a2:	18fb      	adds	r3, r7, r3
   305a4:	0011      	movs	r1, r2
   305a6:	0018      	movs	r0, r3
   305a8:	4b1c      	ldr	r3, [pc, #112]	; (3061c <MQTTSerialize_subscribe+0x148>)
   305aa:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   305ac:	2300      	movs	r3, #0
   305ae:	623b      	str	r3, [r7, #32]
   305b0:	e01d      	b.n	305ee <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   305b2:	6a3a      	ldr	r2, [r7, #32]
   305b4:	0013      	movs	r3, r2
   305b6:	005b      	lsls	r3, r3, #1
   305b8:	189b      	adds	r3, r3, r2
   305ba:	009b      	lsls	r3, r3, #2
   305bc:	001a      	movs	r2, r3
   305be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   305c0:	189b      	adds	r3, r3, r2
   305c2:	2218      	movs	r2, #24
   305c4:	18b8      	adds	r0, r7, r2
   305c6:	6819      	ldr	r1, [r3, #0]
   305c8:	685a      	ldr	r2, [r3, #4]
   305ca:	689b      	ldr	r3, [r3, #8]
   305cc:	4c14      	ldr	r4, [pc, #80]	; (30620 <MQTTSerialize_subscribe+0x14c>)
   305ce:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   305d0:	6a3b      	ldr	r3, [r7, #32]
   305d2:	009b      	lsls	r3, r3, #2
   305d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   305d6:	18d3      	adds	r3, r2, r3
   305d8:	681b      	ldr	r3, [r3, #0]
   305da:	b2da      	uxtb	r2, r3
   305dc:	2318      	movs	r3, #24
   305de:	18fb      	adds	r3, r7, r3
   305e0:	0011      	movs	r1, r2
   305e2:	0018      	movs	r0, r3
   305e4:	4b0b      	ldr	r3, [pc, #44]	; (30614 <MQTTSerialize_subscribe+0x140>)
   305e6:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   305e8:	6a3b      	ldr	r3, [r7, #32]
   305ea:	3301      	adds	r3, #1
   305ec:	623b      	str	r3, [r7, #32]
   305ee:	6a3a      	ldr	r2, [r7, #32]
   305f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   305f2:	429a      	cmp	r2, r3
   305f4:	dbdd      	blt.n	305b2 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   305f6:	69bb      	ldr	r3, [r7, #24]
   305f8:	001a      	movs	r2, r3
   305fa:	68fb      	ldr	r3, [r7, #12]
   305fc:	1ad3      	subs	r3, r2, r3
   305fe:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30602:	0018      	movs	r0, r3
   30604:	46bd      	mov	sp, r7
   30606:	b00b      	add	sp, #44	; 0x2c
   30608:	bd90      	pop	{r4, r7, pc}
   3060a:	46c0      	nop			; (mov r8, r8)
   3060c:	00030481 	.word	0x00030481
   30610:	0002fe45 	.word	0x0002fe45
   30614:	0002ff67 	.word	0x0002ff67
   30618:	0002fd4d 	.word	0x0002fd4d
   3061c:	0002ff91 	.word	0x0002ff91
   30620:	00030039 	.word	0x00030039

00030624 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   30624:	b590      	push	{r4, r7, lr}
   30626:	b08b      	sub	sp, #44	; 0x2c
   30628:	af00      	add	r7, sp, #0
   3062a:	60f8      	str	r0, [r7, #12]
   3062c:	60b9      	str	r1, [r7, #8]
   3062e:	607a      	str	r2, [r7, #4]
   30630:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30632:	2300      	movs	r3, #0
   30634:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30638:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   3063a:	2300      	movs	r3, #0
   3063c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   3063e:	2300      	movs	r3, #0
   30640:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30642:	2318      	movs	r3, #24
   30644:	18fb      	adds	r3, r7, r3
   30646:	0018      	movs	r0, r3
   30648:	4b2c      	ldr	r3, [pc, #176]	; (306fc <MQTTDeserialize_suback+0xd8>)
   3064a:	4798      	blx	r3
   3064c:	0003      	movs	r3, r0
   3064e:	001a      	movs	r2, r3
   30650:	231c      	movs	r3, #28
   30652:	18fb      	adds	r3, r7, r3
   30654:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   30656:	231c      	movs	r3, #28
   30658:	18fb      	adds	r3, r7, r3
   3065a:	781b      	ldrb	r3, [r3, #0]
   3065c:	220f      	movs	r2, #15
   3065e:	4393      	bics	r3, r2
   30660:	b2db      	uxtb	r3, r3
   30662:	2b90      	cmp	r3, #144	; 0x90
   30664:	d142      	bne.n	306ec <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30666:	69bb      	ldr	r3, [r7, #24]
   30668:	2214      	movs	r2, #20
   3066a:	18ba      	adds	r2, r7, r2
   3066c:	0011      	movs	r1, r2
   3066e:	0018      	movs	r0, r3
   30670:	4b23      	ldr	r3, [pc, #140]	; (30700 <MQTTDeserialize_suback+0xdc>)
   30672:	4798      	blx	r3
   30674:	0003      	movs	r3, r0
   30676:	627b      	str	r3, [r7, #36]	; 0x24
   30678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   3067a:	69bb      	ldr	r3, [r7, #24]
   3067c:	189b      	adds	r3, r3, r2
   3067e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30680:	69bb      	ldr	r3, [r7, #24]
   30682:	697a      	ldr	r2, [r7, #20]
   30684:	189b      	adds	r3, r3, r2
   30686:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   30688:	6a3b      	ldr	r3, [r7, #32]
   3068a:	69ba      	ldr	r2, [r7, #24]
   3068c:	1a9b      	subs	r3, r3, r2
   3068e:	2b01      	cmp	r3, #1
   30690:	dd2e      	ble.n	306f0 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   30692:	2318      	movs	r3, #24
   30694:	18fb      	adds	r3, r7, r3
   30696:	0018      	movs	r0, r3
   30698:	4b1a      	ldr	r3, [pc, #104]	; (30704 <MQTTDeserialize_suback+0xe0>)
   3069a:	4798      	blx	r3
   3069c:	0003      	movs	r3, r0
   3069e:	b29a      	uxth	r2, r3
   306a0:	68fb      	ldr	r3, [r7, #12]
   306a2:	801a      	strh	r2, [r3, #0]

	*count = 0;
   306a4:	687b      	ldr	r3, [r7, #4]
   306a6:	2200      	movs	r2, #0
   306a8:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   306aa:	e018      	b.n	306de <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   306ac:	687b      	ldr	r3, [r7, #4]
   306ae:	681a      	ldr	r2, [r3, #0]
   306b0:	68bb      	ldr	r3, [r7, #8]
   306b2:	429a      	cmp	r2, r3
   306b4:	dd03      	ble.n	306be <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   306b6:	2301      	movs	r3, #1
   306b8:	425b      	negs	r3, r3
   306ba:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   306bc:	e019      	b.n	306f2 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   306be:	687b      	ldr	r3, [r7, #4]
   306c0:	681a      	ldr	r2, [r3, #0]
   306c2:	1c51      	adds	r1, r2, #1
   306c4:	687b      	ldr	r3, [r7, #4]
   306c6:	6019      	str	r1, [r3, #0]
   306c8:	0013      	movs	r3, r2
   306ca:	009b      	lsls	r3, r3, #2
   306cc:	683a      	ldr	r2, [r7, #0]
   306ce:	18d4      	adds	r4, r2, r3
   306d0:	2318      	movs	r3, #24
   306d2:	18fb      	adds	r3, r7, r3
   306d4:	0018      	movs	r0, r3
   306d6:	4b09      	ldr	r3, [pc, #36]	; (306fc <MQTTDeserialize_suback+0xd8>)
   306d8:	4798      	blx	r3
   306da:	0003      	movs	r3, r0
   306dc:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   306de:	69ba      	ldr	r2, [r7, #24]
   306e0:	6a3b      	ldr	r3, [r7, #32]
   306e2:	429a      	cmp	r2, r3
   306e4:	d3e2      	bcc.n	306ac <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   306e6:	2301      	movs	r3, #1
   306e8:	627b      	str	r3, [r7, #36]	; 0x24
   306ea:	e002      	b.n	306f2 <MQTTDeserialize_suback+0xce>
		goto exit;
   306ec:	46c0      	nop			; (mov r8, r8)
   306ee:	e000      	b.n	306f2 <MQTTDeserialize_suback+0xce>
		goto exit;
   306f0:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   306f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   306f4:	0018      	movs	r0, r3
   306f6:	46bd      	mov	sp, r7
   306f8:	b00b      	add	sp, #44	; 0x2c
   306fa:	bd90      	pop	{r4, r7, pc}
   306fc:	0002ff3b 	.word	0x0002ff3b
   30700:	0002fed5 	.word	0x0002fed5
   30704:	0002ff09 	.word	0x0002ff09

00030708 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   30708:	b580      	push	{r7, lr}
   3070a:	b082      	sub	sp, #8
   3070c:	af00      	add	r7, sp, #0
   3070e:	6078      	str	r0, [r7, #4]
	config->port = 80;
   30710:	687b      	ldr	r3, [r7, #4]
   30712:	2250      	movs	r2, #80	; 0x50
   30714:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   30716:	687b      	ldr	r3, [r7, #4]
   30718:	2200      	movs	r2, #0
   3071a:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   3071c:	687b      	ldr	r3, [r7, #4]
   3071e:	4a0b      	ldr	r2, [pc, #44]	; (3074c <http_client_get_config_defaults+0x44>)
   30720:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   30722:	687b      	ldr	r3, [r7, #4]
   30724:	2200      	movs	r2, #0
   30726:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   30728:	687b      	ldr	r3, [r7, #4]
   3072a:	2200      	movs	r2, #0
   3072c:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   3072e:	687b      	ldr	r3, [r7, #4]
   30730:	2280      	movs	r2, #128	; 0x80
   30732:	0052      	lsls	r2, r2, #1
   30734:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   30736:	687b      	ldr	r3, [r7, #4]
   30738:	2252      	movs	r2, #82	; 0x52
   3073a:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   3073c:	687b      	ldr	r3, [r7, #4]
   3073e:	4a04      	ldr	r2, [pc, #16]	; (30750 <http_client_get_config_defaults+0x48>)
   30740:	619a      	str	r2, [r3, #24]
}
   30742:	46c0      	nop			; (mov r8, r8)
   30744:	46bd      	mov	sp, r7
   30746:	b002      	add	sp, #8
   30748:	bd80      	pop	{r7, pc}
   3074a:	46c0      	nop			; (mov r8, r8)
   3074c:	00004e20 	.word	0x00004e20
   30750:	000398bc 	.word	0x000398bc

00030754 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   30754:	b590      	push	{r4, r7, lr}
   30756:	b083      	sub	sp, #12
   30758:	af00      	add	r7, sp, #0
   3075a:	6078      	str	r0, [r7, #4]
   3075c:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   3075e:	687b      	ldr	r3, [r7, #4]
   30760:	2b00      	cmp	r3, #0
   30762:	d002      	beq.n	3076a <http_client_init+0x16>
   30764:	683b      	ldr	r3, [r7, #0]
   30766:	2b00      	cmp	r3, #0
   30768:	d102      	bne.n	30770 <http_client_init+0x1c>
		return -EINVAL;
   3076a:	2316      	movs	r3, #22
   3076c:	425b      	negs	r3, r3
   3076e:	e058      	b.n	30822 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   30770:	683b      	ldr	r3, [r7, #0]
   30772:	691b      	ldr	r3, [r3, #16]
   30774:	2b00      	cmp	r3, #0
   30776:	d102      	bne.n	3077e <http_client_init+0x2a>
		return -EINVAL;
   30778:	2316      	movs	r3, #22
   3077a:	425b      	negs	r3, r3
   3077c:	e051      	b.n	30822 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   3077e:	683b      	ldr	r3, [r7, #0]
   30780:	685b      	ldr	r3, [r3, #4]
   30782:	2b00      	cmp	r3, #0
   30784:	d102      	bne.n	3078c <http_client_init+0x38>
		return -EINVAL;
   30786:	2316      	movs	r3, #22
   30788:	425b      	negs	r3, r3
   3078a:	e04a      	b.n	30822 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   3078c:	683b      	ldr	r3, [r7, #0]
   3078e:	695b      	ldr	r3, [r3, #20]
   30790:	2b51      	cmp	r3, #81	; 0x51
   30792:	d802      	bhi.n	3079a <http_client_init+0x46>
		return -EINVAL;
   30794:	2316      	movs	r3, #22
   30796:	425b      	negs	r3, r3
   30798:	e043      	b.n	30822 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   3079a:	687b      	ldr	r3, [r7, #4]
   3079c:	22e8      	movs	r2, #232	; 0xe8
   3079e:	2100      	movs	r1, #0
   307a0:	0018      	movs	r0, r3
   307a2:	4b22      	ldr	r3, [pc, #136]	; (3082c <http_client_init+0xd8>)
   307a4:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   307a6:	687b      	ldr	r3, [r7, #4]
   307a8:	3350      	adds	r3, #80	; 0x50
   307aa:	6839      	ldr	r1, [r7, #0]
   307ac:	221c      	movs	r2, #28
   307ae:	0018      	movs	r0, r3
   307b0:	4b1f      	ldr	r3, [pc, #124]	; (30830 <http_client_init+0xdc>)
   307b2:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   307b4:	687b      	ldr	r3, [r7, #4]
   307b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   307b8:	2b00      	cmp	r3, #0
   307ba:	d115      	bne.n	307e8 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   307bc:	683b      	ldr	r3, [r7, #0]
   307be:	691b      	ldr	r3, [r3, #16]
   307c0:	0018      	movs	r0, r3
   307c2:	4b1c      	ldr	r3, [pc, #112]	; (30834 <http_client_init+0xe0>)
   307c4:	4798      	blx	r3
   307c6:	0003      	movs	r3, r0
   307c8:	001a      	movs	r2, r3
   307ca:	687b      	ldr	r3, [r7, #4]
   307cc:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   307ce:	687b      	ldr	r3, [r7, #4]
   307d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   307d2:	2b00      	cmp	r3, #0
   307d4:	d102      	bne.n	307dc <http_client_init+0x88>
			return -ENOMEM;
   307d6:	230c      	movs	r3, #12
   307d8:	425b      	negs	r3, r3
   307da:	e022      	b.n	30822 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   307dc:	687b      	ldr	r3, [r7, #4]
   307de:	2241      	movs	r2, #65	; 0x41
   307e0:	5c99      	ldrb	r1, [r3, r2]
   307e2:	2004      	movs	r0, #4
   307e4:	4301      	orrs	r1, r0
   307e6:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   307e8:	683b      	ldr	r3, [r7, #0]
   307ea:	891b      	ldrh	r3, [r3, #8]
   307ec:	2b00      	cmp	r3, #0
   307ee:	d010      	beq.n	30812 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   307f0:	683b      	ldr	r3, [r7, #0]
   307f2:	6858      	ldr	r0, [r3, #4]
   307f4:	687a      	ldr	r2, [r7, #4]
   307f6:	4910      	ldr	r1, [pc, #64]	; (30838 <http_client_init+0xe4>)
   307f8:	2300      	movs	r3, #0
   307fa:	4c10      	ldr	r4, [pc, #64]	; (3083c <http_client_init+0xe8>)
   307fc:	47a0      	blx	r4
   307fe:	0002      	movs	r2, r0
   30800:	687b      	ldr	r3, [r7, #4]
   30802:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   30804:	687b      	ldr	r3, [r7, #4]
   30806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30808:	2b00      	cmp	r3, #0
   3080a:	da02      	bge.n	30812 <http_client_init+0xbe>
			return -ENOSPC;
   3080c:	231c      	movs	r3, #28
   3080e:	425b      	negs	r3, r3
   30810:	e007      	b.n	30822 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   30812:	687b      	ldr	r3, [r7, #4]
   30814:	2200      	movs	r2, #0
   30816:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   30818:	687b      	ldr	r3, [r7, #4]
   3081a:	22d8      	movs	r2, #216	; 0xd8
   3081c:	2100      	movs	r1, #0
   3081e:	5099      	str	r1, [r3, r2]

	return 0;
   30820:	2300      	movs	r3, #0
}
   30822:	0018      	movs	r0, r3
   30824:	46bd      	mov	sp, r7
   30826:	b003      	add	sp, #12
   30828:	bd90      	pop	{r4, r7, pc}
   3082a:	46c0      	nop			; (mov r8, r8)
   3082c:	0003462f 	.word	0x0003462f
   30830:	000345f9 	.word	0x000345f9
   30834:	000345d1 	.word	0x000345d1
   30838:	00030b05 	.word	0x00030b05
   3083c:	000321a9 	.word	0x000321a9

00030840 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   30840:	b580      	push	{r7, lr}
   30842:	b082      	sub	sp, #8
   30844:	af00      	add	r7, sp, #0
   30846:	6078      	str	r0, [r7, #4]
   30848:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   3084a:	687b      	ldr	r3, [r7, #4]
   3084c:	2b00      	cmp	r3, #0
   3084e:	d102      	bne.n	30856 <http_client_register_callback+0x16>
		return -EINVAL;
   30850:	2316      	movs	r3, #22
   30852:	425b      	negs	r3, r3
   30854:	e003      	b.n	3085e <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   30856:	687b      	ldr	r3, [r7, #4]
   30858:	683a      	ldr	r2, [r7, #0]
   3085a:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   3085c:	2300      	movs	r3, #0
}
   3085e:	0018      	movs	r0, r3
   30860:	46bd      	mov	sp, r7
   30862:	b002      	add	sp, #8
   30864:	bd80      	pop	{r7, pc}
	...

00030868 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   30868:	b580      	push	{r7, lr}
   3086a:	b082      	sub	sp, #8
   3086c:	af00      	add	r7, sp, #0
   3086e:	6078      	str	r0, [r7, #4]
	switch (err) {
   30870:	687b      	ldr	r3, [r7, #4]
   30872:	330e      	adds	r3, #14
   30874:	2b0e      	cmp	r3, #14
   30876:	d825      	bhi.n	308c4 <_hwerr_to_stderr+0x5c>
   30878:	009a      	lsls	r2, r3, #2
   3087a:	4b18      	ldr	r3, [pc, #96]	; (308dc <_hwerr_to_stderr+0x74>)
   3087c:	18d3      	adds	r3, r2, r3
   3087e:	681b      	ldr	r3, [r3, #0]
   30880:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   30882:	2305      	movs	r3, #5
   30884:	425b      	negs	r3, r3
   30886:	e024      	b.n	308d2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   30888:	2302      	movs	r3, #2
   3088a:	425b      	negs	r3, r3
   3088c:	e021      	b.n	308d2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   3088e:	2370      	movs	r3, #112	; 0x70
   30890:	425b      	negs	r3, r3
   30892:	e01e      	b.n	308d2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   30894:	230c      	movs	r3, #12
   30896:	425b      	negs	r3, r3
   30898:	e01b      	b.n	308d2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   3089a:	2316      	movs	r3, #22
   3089c:	425b      	negs	r3, r3
   3089e:	e018      	b.n	308d2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   308a0:	230c      	movs	r3, #12
   308a2:	425b      	negs	r3, r3
   308a4:	e015      	b.n	308d2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   308a6:	2305      	movs	r3, #5
   308a8:	425b      	negs	r3, r3
   308aa:	e012      	b.n	308d2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   308ac:	2379      	movs	r3, #121	; 0x79
   308ae:	425b      	negs	r3, r3
   308b0:	e00f      	b.n	308d2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   308b2:	2368      	movs	r3, #104	; 0x68
   308b4:	425b      	negs	r3, r3
   308b6:	e00c      	b.n	308d2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   308b8:	230b      	movs	r3, #11
   308ba:	425b      	negs	r3, r3
   308bc:	e009      	b.n	308d2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   308be:	2310      	movs	r3, #16
   308c0:	425b      	negs	r3, r3
   308c2:	e006      	b.n	308d2 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   308c4:	687b      	ldr	r3, [r7, #4]
   308c6:	2b00      	cmp	r3, #0
   308c8:	da02      	bge.n	308d0 <_hwerr_to_stderr+0x68>
				return -EIO;
   308ca:	2305      	movs	r3, #5
   308cc:	425b      	negs	r3, r3
   308ce:	e000      	b.n	308d2 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   308d0:	2300      	movs	r3, #0
	}
}
   308d2:	0018      	movs	r0, r3
   308d4:	46bd      	mov	sp, r7
   308d6:	b002      	add	sp, #8
   308d8:	bd80      	pop	{r7, pc}
   308da:	46c0      	nop			; (mov r8, r8)
   308dc:	000399f8 	.word	0x000399f8

000308e0 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   308e0:	b580      	push	{r7, lr}
   308e2:	b08a      	sub	sp, #40	; 0x28
   308e4:	af00      	add	r7, sp, #0
   308e6:	603a      	str	r2, [r7, #0]
   308e8:	1dfb      	adds	r3, r7, #7
   308ea:	1c02      	adds	r2, r0, #0
   308ec:	701a      	strb	r2, [r3, #0]
   308ee:	1dbb      	adds	r3, r7, #6
   308f0:	1c0a      	adds	r2, r1, #0
   308f2:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   308f4:	1dfb      	adds	r3, r7, #7
   308f6:	2200      	movs	r2, #0
   308f8:	569a      	ldrsb	r2, [r3, r2]
   308fa:	4b4b      	ldr	r3, [pc, #300]	; (30a28 <http_client_socket_event_handler+0x148>)
   308fc:	0092      	lsls	r2, r2, #2
   308fe:	58d3      	ldr	r3, [r2, r3]
   30900:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   30902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30904:	2b00      	cmp	r3, #0
   30906:	d100      	bne.n	3090a <http_client_socket_event_handler+0x2a>
   30908:	e08a      	b.n	30a20 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   3090a:	1dbb      	adds	r3, r7, #6
   3090c:	781b      	ldrb	r3, [r3, #0]
   3090e:	2b06      	cmp	r3, #6
   30910:	d040      	beq.n	30994 <http_client_socket_event_handler+0xb4>
   30912:	2b07      	cmp	r3, #7
   30914:	d060      	beq.n	309d8 <http_client_socket_event_handler+0xf8>
   30916:	2b05      	cmp	r3, #5
   30918:	d000      	beq.n	3091c <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   3091a:	e082      	b.n	30a22 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   3091c:	683b      	ldr	r3, [r7, #0]
   3091e:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   30920:	6a3b      	ldr	r3, [r7, #32]
   30922:	785b      	ldrb	r3, [r3, #1]
   30924:	b25b      	sxtb	r3, r3
   30926:	001a      	movs	r2, r3
   30928:	230c      	movs	r3, #12
   3092a:	18fb      	adds	r3, r7, r3
   3092c:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   3092e:	6a3b      	ldr	r3, [r7, #32]
   30930:	785b      	ldrb	r3, [r3, #1]
   30932:	b25b      	sxtb	r3, r3
   30934:	2b00      	cmp	r3, #0
   30936:	da0c      	bge.n	30952 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   30938:	6a3b      	ldr	r3, [r7, #32]
   3093a:	785b      	ldrb	r3, [r3, #1]
   3093c:	b25b      	sxtb	r3, r3
   3093e:	0018      	movs	r0, r3
   30940:	4b3a      	ldr	r3, [pc, #232]	; (30a2c <http_client_socket_event_handler+0x14c>)
   30942:	4798      	blx	r3
   30944:	0002      	movs	r2, r0
   30946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30948:	0011      	movs	r1, r2
   3094a:	0018      	movs	r0, r3
   3094c:	4b38      	ldr	r3, [pc, #224]	; (30a30 <http_client_socket_event_handler+0x150>)
   3094e:	4798      	blx	r3
    	break;
   30950:	e067      	b.n	30a22 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   30952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30956:	2b00      	cmp	r3, #0
   30958:	d006      	beq.n	30968 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   3095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3095e:	220c      	movs	r2, #12
   30960:	18ba      	adds	r2, r7, r2
   30962:	6a78      	ldr	r0, [r7, #36]	; 0x24
   30964:	2100      	movs	r1, #0
   30966:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   30968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3096a:	2203      	movs	r2, #3
   3096c:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   3096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30970:	6d58      	ldr	r0, [r3, #84]	; 0x54
   30972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30974:	6c99      	ldr	r1, [r3, #72]	; 0x48
   30976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30978:	2258      	movs	r2, #88	; 0x58
   3097a:	5a9b      	ldrh	r3, [r3, r2]
   3097c:	001a      	movs	r2, r3
   3097e:	4b2d      	ldr	r3, [pc, #180]	; (30a34 <http_client_socket_event_handler+0x154>)
   30980:	4798      	blx	r3
    		_http_client_recv_packet(module);
   30982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30984:	0018      	movs	r0, r3
   30986:	4b2c      	ldr	r3, [pc, #176]	; (30a38 <http_client_socket_event_handler+0x158>)
   30988:	4798      	blx	r3
			_http_client_request(module);
   3098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3098c:	0018      	movs	r0, r3
   3098e:	4b2b      	ldr	r3, [pc, #172]	; (30a3c <http_client_socket_event_handler+0x15c>)
   30990:	4798      	blx	r3
    	break;
   30992:	e046      	b.n	30a22 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   30994:	683b      	ldr	r3, [r7, #0]
   30996:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   30998:	69fb      	ldr	r3, [r7, #28]
   3099a:	2204      	movs	r2, #4
   3099c:	5e9b      	ldrsh	r3, [r3, r2]
   3099e:	2b00      	cmp	r3, #0
   309a0:	dd09      	ble.n	309b6 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   309a2:	69fb      	ldr	r3, [r7, #28]
   309a4:	2204      	movs	r2, #4
   309a6:	5e9b      	ldrsh	r3, [r3, r2]
   309a8:	001a      	movs	r2, r3
   309aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   309ac:	0011      	movs	r1, r2
   309ae:	0018      	movs	r0, r3
   309b0:	4b23      	ldr	r3, [pc, #140]	; (30a40 <http_client_socket_event_handler+0x160>)
   309b2:	4798      	blx	r3
   309b4:	e00b      	b.n	309ce <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   309b6:	69fb      	ldr	r3, [r7, #28]
   309b8:	2204      	movs	r2, #4
   309ba:	5e9b      	ldrsh	r3, [r3, r2]
   309bc:	0018      	movs	r0, r3
   309be:	4b1b      	ldr	r3, [pc, #108]	; (30a2c <http_client_socket_event_handler+0x14c>)
   309c0:	4798      	blx	r3
   309c2:	0002      	movs	r2, r0
   309c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   309c6:	0011      	movs	r1, r2
   309c8:	0018      	movs	r0, r3
   309ca:	4b19      	ldr	r3, [pc, #100]	; (30a30 <http_client_socket_event_handler+0x150>)
   309cc:	4798      	blx	r3
		_http_client_recv_packet(module);
   309ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   309d0:	0018      	movs	r0, r3
   309d2:	4b19      	ldr	r3, [pc, #100]	; (30a38 <http_client_socket_event_handler+0x158>)
   309d4:	4798      	blx	r3
		break;
   309d6:	e024      	b.n	30a22 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   309d8:	231a      	movs	r3, #26
   309da:	18fb      	adds	r3, r7, r3
   309dc:	683a      	ldr	r2, [r7, #0]
   309de:	8812      	ldrh	r2, [r2, #0]
   309e0:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   309e2:	231a      	movs	r3, #26
   309e4:	18fb      	adds	r3, r7, r3
   309e6:	2200      	movs	r2, #0
   309e8:	5e9b      	ldrsh	r3, [r3, r2]
   309ea:	2b00      	cmp	r3, #0
   309ec:	da0d      	bge.n	30a0a <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   309ee:	231a      	movs	r3, #26
   309f0:	18fb      	adds	r3, r7, r3
   309f2:	2200      	movs	r2, #0
   309f4:	5e9b      	ldrsh	r3, [r3, r2]
   309f6:	0018      	movs	r0, r3
   309f8:	4b0c      	ldr	r3, [pc, #48]	; (30a2c <http_client_socket_event_handler+0x14c>)
   309fa:	4798      	blx	r3
   309fc:	0002      	movs	r2, r0
   309fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30a00:	0011      	movs	r1, r2
   30a02:	0018      	movs	r0, r3
   30a04:	4b0a      	ldr	r3, [pc, #40]	; (30a30 <http_client_socket_event_handler+0x150>)
   30a06:	4798      	blx	r3
   30a08:	e003      	b.n	30a12 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   30a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30a0c:	0018      	movs	r0, r3
   30a0e:	4b0b      	ldr	r3, [pc, #44]	; (30a3c <http_client_socket_event_handler+0x15c>)
   30a10:	4798      	blx	r3
		module->sending = 0;
   30a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30a14:	2241      	movs	r2, #65	; 0x41
   30a16:	5c99      	ldrb	r1, [r3, r2]
   30a18:	2001      	movs	r0, #1
   30a1a:	4381      	bics	r1, r0
   30a1c:	5499      	strb	r1, [r3, r2]
    	break;
   30a1e:	e000      	b.n	30a22 <http_client_socket_event_handler+0x142>
		return;
   30a20:	46c0      	nop			; (mov r8, r8)
	}

}
   30a22:	46bd      	mov	sp, r7
   30a24:	b00a      	add	sp, #40	; 0x28
   30a26:	bd80      	pop	{r7, pc}
   30a28:	20004574 	.word	0x20004574
   30a2c:	00030869 	.word	0x00030869
   30a30:	00030edd 	.word	0x00030edd
   30a34:	00032239 	.word	0x00032239
   30a38:	00031769 	.word	0x00031769
   30a3c:	00031031 	.word	0x00031031
   30a40:	000317cd 	.word	0x000317cd

00030a44 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   30a44:	b580      	push	{r7, lr}
   30a46:	b088      	sub	sp, #32
   30a48:	af00      	add	r7, sp, #0
   30a4a:	6078      	str	r0, [r7, #4]
   30a4c:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   30a4e:	2300      	movs	r3, #0
   30a50:	61fb      	str	r3, [r7, #28]
   30a52:	e048      	b.n	30ae6 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   30a54:	4b27      	ldr	r3, [pc, #156]	; (30af4 <http_client_socket_resolve_handler+0xb0>)
   30a56:	69fa      	ldr	r2, [r7, #28]
   30a58:	0092      	lsls	r2, r2, #2
   30a5a:	58d3      	ldr	r3, [r2, r3]
   30a5c:	2b00      	cmp	r3, #0
   30a5e:	d03f      	beq.n	30ae0 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   30a60:	4b24      	ldr	r3, [pc, #144]	; (30af4 <http_client_socket_resolve_handler+0xb0>)
   30a62:	69fa      	ldr	r2, [r7, #28]
   30a64:	0092      	lsls	r2, r2, #2
   30a66:	58d3      	ldr	r3, [r2, r3]
   30a68:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   30a6a:	69bb      	ldr	r3, [r7, #24]
   30a6c:	1c5a      	adds	r2, r3, #1
   30a6e:	687b      	ldr	r3, [r7, #4]
   30a70:	0011      	movs	r1, r2
   30a72:	0018      	movs	r0, r3
   30a74:	4b20      	ldr	r3, [pc, #128]	; (30af8 <http_client_socket_resolve_handler+0xb4>)
   30a76:	4798      	blx	r3
   30a78:	1e03      	subs	r3, r0, #0
   30a7a:	d131      	bne.n	30ae0 <http_client_socket_resolve_handler+0x9c>
   30a7c:	69bb      	ldr	r3, [r7, #24]
   30a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30a80:	2b01      	cmp	r3, #1
   30a82:	d12d      	bne.n	30ae0 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   30a84:	683b      	ldr	r3, [r7, #0]
   30a86:	2b00      	cmp	r3, #0
   30a88:	d107      	bne.n	30a9a <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   30a8a:	2376      	movs	r3, #118	; 0x76
   30a8c:	425a      	negs	r2, r3
   30a8e:	69bb      	ldr	r3, [r7, #24]
   30a90:	0011      	movs	r1, r2
   30a92:	0018      	movs	r0, r3
   30a94:	4b19      	ldr	r3, [pc, #100]	; (30afc <http_client_socket_resolve_handler+0xb8>)
   30a96:	4798      	blx	r3
					return;
   30a98:	e028      	b.n	30aec <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   30a9a:	2308      	movs	r3, #8
   30a9c:	18fb      	adds	r3, r7, r3
   30a9e:	2202      	movs	r2, #2
   30aa0:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   30aa2:	69bb      	ldr	r3, [r7, #24]
   30aa4:	2250      	movs	r2, #80	; 0x50
   30aa6:	5a9b      	ldrh	r3, [r3, r2]
   30aa8:	021b      	lsls	r3, r3, #8
   30aaa:	b21a      	sxth	r2, r3
   30aac:	69bb      	ldr	r3, [r7, #24]
   30aae:	2150      	movs	r1, #80	; 0x50
   30ab0:	5a5b      	ldrh	r3, [r3, r1]
   30ab2:	0a1b      	lsrs	r3, r3, #8
   30ab4:	b29b      	uxth	r3, r3
   30ab6:	b21b      	sxth	r3, r3
   30ab8:	4313      	orrs	r3, r2
   30aba:	b21b      	sxth	r3, r3
   30abc:	b29a      	uxth	r2, r3
   30abe:	2308      	movs	r3, #8
   30ac0:	18fb      	adds	r3, r7, r3
   30ac2:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   30ac4:	2308      	movs	r3, #8
   30ac6:	18fb      	adds	r3, r7, r3
   30ac8:	683a      	ldr	r2, [r7, #0]
   30aca:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   30acc:	69bb      	ldr	r3, [r7, #24]
   30ace:	781b      	ldrb	r3, [r3, #0]
   30ad0:	b25b      	sxtb	r3, r3
   30ad2:	2208      	movs	r2, #8
   30ad4:	18b9      	adds	r1, r7, r2
   30ad6:	2210      	movs	r2, #16
   30ad8:	0018      	movs	r0, r3
   30ada:	4b09      	ldr	r3, [pc, #36]	; (30b00 <http_client_socket_resolve_handler+0xbc>)
   30adc:	4798      	blx	r3
				return;
   30ade:	e005      	b.n	30aec <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   30ae0:	69fb      	ldr	r3, [r7, #28]
   30ae2:	3301      	adds	r3, #1
   30ae4:	61fb      	str	r3, [r7, #28]
   30ae6:	69fb      	ldr	r3, [r7, #28]
   30ae8:	2b06      	cmp	r3, #6
   30aea:	ddb3      	ble.n	30a54 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   30aec:	46bd      	mov	sp, r7
   30aee:	b008      	add	sp, #32
   30af0:	bd80      	pop	{r7, pc}
   30af2:	46c0      	nop			; (mov r8, r8)
   30af4:	20004574 	.word	0x20004574
   30af8:	00034987 	.word	0x00034987
   30afc:	00030edd 	.word	0x00030edd
   30b00:	00025401 	.word	0x00025401

00030b04 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   30b04:	b580      	push	{r7, lr}
   30b06:	b086      	sub	sp, #24
   30b08:	af00      	add	r7, sp, #0
   30b0a:	60f8      	str	r0, [r7, #12]
   30b0c:	60b9      	str	r1, [r7, #8]
   30b0e:	607a      	str	r2, [r7, #4]
   30b10:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   30b12:	687b      	ldr	r3, [r7, #4]
   30b14:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   30b16:	697b      	ldr	r3, [r7, #20]
   30b18:	2b00      	cmp	r3, #0
   30b1a:	d007      	beq.n	30b2c <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   30b1c:	233e      	movs	r3, #62	; 0x3e
   30b1e:	425a      	negs	r2, r3
   30b20:	697b      	ldr	r3, [r7, #20]
   30b22:	0011      	movs	r1, r2
   30b24:	0018      	movs	r0, r3
   30b26:	4b03      	ldr	r3, [pc, #12]	; (30b34 <http_client_timer_callback+0x30>)
   30b28:	4798      	blx	r3
   30b2a:	e000      	b.n	30b2e <http_client_timer_callback+0x2a>
		return;
   30b2c:	46c0      	nop			; (mov r8, r8)
}
   30b2e:	46bd      	mov	sp, r7
   30b30:	b006      	add	sp, #24
   30b32:	bd80      	pop	{r7, pc}
   30b34:	00030edd 	.word	0x00030edd

00030b38 <_is_ip>:

static int _is_ip(const char *host)
{
   30b38:	b580      	push	{r7, lr}
   30b3a:	b084      	sub	sp, #16
   30b3c:	af00      	add	r7, sp, #0
   30b3e:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   30b40:	2300      	movs	r3, #0
   30b42:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   30b44:	e03a      	b.n	30bbc <_is_ip+0x84>
		ch = *host++;
   30b46:	687b      	ldr	r3, [r7, #4]
   30b48:	1c5a      	adds	r2, r3, #1
   30b4a:	607a      	str	r2, [r7, #4]
   30b4c:	220b      	movs	r2, #11
   30b4e:	18ba      	adds	r2, r7, r2
   30b50:	781b      	ldrb	r3, [r3, #0]
   30b52:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   30b54:	230b      	movs	r3, #11
   30b56:	18fb      	adds	r3, r7, r3
   30b58:	781b      	ldrb	r3, [r3, #0]
   30b5a:	2b60      	cmp	r3, #96	; 0x60
   30b5c:	d904      	bls.n	30b68 <_is_ip+0x30>
   30b5e:	230b      	movs	r3, #11
   30b60:	18fb      	adds	r3, r7, r3
   30b62:	781b      	ldrb	r3, [r3, #0]
   30b64:	2b66      	cmp	r3, #102	; 0x66
   30b66:	d913      	bls.n	30b90 <_is_ip+0x58>
   30b68:	230b      	movs	r3, #11
   30b6a:	18fb      	adds	r3, r7, r3
   30b6c:	781b      	ldrb	r3, [r3, #0]
   30b6e:	2b40      	cmp	r3, #64	; 0x40
   30b70:	d904      	bls.n	30b7c <_is_ip+0x44>
   30b72:	230b      	movs	r3, #11
   30b74:	18fb      	adds	r3, r7, r3
   30b76:	781b      	ldrb	r3, [r3, #0]
   30b78:	2b46      	cmp	r3, #70	; 0x46
   30b7a:	d909      	bls.n	30b90 <_is_ip+0x58>
   30b7c:	230b      	movs	r3, #11
   30b7e:	18fb      	adds	r3, r7, r3
   30b80:	781b      	ldrb	r3, [r3, #0]
   30b82:	2b3a      	cmp	r3, #58	; 0x3a
   30b84:	d004      	beq.n	30b90 <_is_ip+0x58>
   30b86:	230b      	movs	r3, #11
   30b88:	18fb      	adds	r3, r7, r3
   30b8a:	781b      	ldrb	r3, [r3, #0]
   30b8c:	2b2f      	cmp	r3, #47	; 0x2f
   30b8e:	d102      	bne.n	30b96 <_is_ip+0x5e>
			isv6 = 1;
   30b90:	2301      	movs	r3, #1
   30b92:	60fb      	str	r3, [r7, #12]
   30b94:	e012      	b.n	30bbc <_is_ip+0x84>
		} else if (ch == '.') {
   30b96:	230b      	movs	r3, #11
   30b98:	18fb      	adds	r3, r7, r3
   30b9a:	781b      	ldrb	r3, [r3, #0]
   30b9c:	2b2e      	cmp	r3, #46	; 0x2e
   30b9e:	d104      	bne.n	30baa <_is_ip+0x72>
			if (isv6) {
   30ba0:	68fb      	ldr	r3, [r7, #12]
   30ba2:	2b00      	cmp	r3, #0
   30ba4:	d00a      	beq.n	30bbc <_is_ip+0x84>
				return 0;
   30ba6:	2300      	movs	r3, #0
   30ba8:	e00d      	b.n	30bc6 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   30baa:	230b      	movs	r3, #11
   30bac:	18fb      	adds	r3, r7, r3
   30bae:	781b      	ldrb	r3, [r3, #0]
   30bb0:	2230      	movs	r2, #48	; 0x30
   30bb2:	4013      	ands	r3, r2
   30bb4:	2b30      	cmp	r3, #48	; 0x30
   30bb6:	d001      	beq.n	30bbc <_is_ip+0x84>
			return 0;
   30bb8:	2300      	movs	r3, #0
   30bba:	e004      	b.n	30bc6 <_is_ip+0x8e>
	while (*host != '\0') {
   30bbc:	687b      	ldr	r3, [r7, #4]
   30bbe:	781b      	ldrb	r3, [r3, #0]
   30bc0:	2b00      	cmp	r3, #0
   30bc2:	d1c0      	bne.n	30b46 <_is_ip+0xe>
		}
	}
	return 1;
   30bc4:	2301      	movs	r3, #1
}
   30bc6:	0018      	movs	r0, r3
   30bc8:	46bd      	mov	sp, r7
   30bca:	b004      	add	sp, #16
   30bcc:	bd80      	pop	{r7, pc}
	...

00030bd0 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   30bd0:	b5b0      	push	{r4, r5, r7, lr}
   30bd2:	b08e      	sub	sp, #56	; 0x38
   30bd4:	af00      	add	r7, sp, #0
   30bd6:	60f8      	str	r0, [r7, #12]
   30bd8:	60b9      	str	r1, [r7, #8]
   30bda:	603b      	str	r3, [r7, #0]
   30bdc:	1dfb      	adds	r3, r7, #7
   30bde:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   30be0:	2337      	movs	r3, #55	; 0x37
   30be2:	18fb      	adds	r3, r7, r3
   30be4:	2200      	movs	r2, #0
   30be6:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   30be8:	2300      	movs	r3, #0
   30bea:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   30bec:	2300      	movs	r3, #0
   30bee:	633b      	str	r3, [r7, #48]	; 0x30
   30bf0:	2300      	movs	r3, #0
   30bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   30bf4:	2300      	movs	r3, #0
   30bf6:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   30bf8:	68fb      	ldr	r3, [r7, #12]
   30bfa:	2b00      	cmp	r3, #0
   30bfc:	d102      	bne.n	30c04 <http_client_send_request+0x34>
		return -EINVAL;
   30bfe:	2316      	movs	r3, #22
   30c00:	425b      	negs	r3, r3
   30c02:	e145      	b.n	30e90 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   30c04:	68fb      	ldr	r3, [r7, #12]
   30c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30c08:	2b02      	cmp	r3, #2
   30c0a:	d902      	bls.n	30c12 <http_client_send_request+0x42>
		return -EBUSY;
   30c0c:	2310      	movs	r3, #16
   30c0e:	425b      	negs	r3, r3
   30c10:	e13e      	b.n	30e90 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   30c12:	49a1      	ldr	r1, [pc, #644]	; (30e98 <http_client_send_request+0x2c8>)
   30c14:	68bb      	ldr	r3, [r7, #8]
   30c16:	2207      	movs	r2, #7
   30c18:	0018      	movs	r0, r3
   30c1a:	4ba0      	ldr	r3, [pc, #640]	; (30e9c <http_client_send_request+0x2cc>)
   30c1c:	4798      	blx	r3
   30c1e:	1e03      	subs	r3, r0, #0
   30c20:	d102      	bne.n	30c28 <http_client_send_request+0x58>
		i = 7;
   30c22:	2307      	movs	r3, #7
   30c24:	633b      	str	r3, [r7, #48]	; 0x30
   30c26:	e009      	b.n	30c3c <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   30c28:	499d      	ldr	r1, [pc, #628]	; (30ea0 <http_client_send_request+0x2d0>)
   30c2a:	68bb      	ldr	r3, [r7, #8]
   30c2c:	2208      	movs	r2, #8
   30c2e:	0018      	movs	r0, r3
   30c30:	4b9a      	ldr	r3, [pc, #616]	; (30e9c <http_client_send_request+0x2cc>)
   30c32:	4798      	blx	r3
   30c34:	1e03      	subs	r3, r0, #0
   30c36:	d101      	bne.n	30c3c <http_client_send_request+0x6c>
		i = 8;
   30c38:	2308      	movs	r3, #8
   30c3a:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   30c3c:	68fb      	ldr	r3, [r7, #12]
   30c3e:	1c5c      	adds	r4, r3, #1
   30c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30c42:	68ba      	ldr	r2, [r7, #8]
   30c44:	18d5      	adds	r5, r2, r3
   30c46:	68fb      	ldr	r3, [r7, #12]
   30c48:	3301      	adds	r3, #1
   30c4a:	0018      	movs	r0, r3
   30c4c:	4b95      	ldr	r3, [pc, #596]	; (30ea4 <http_client_send_request+0x2d4>)
   30c4e:	4798      	blx	r3
   30c50:	0003      	movs	r3, r0
   30c52:	001a      	movs	r2, r3
   30c54:	0029      	movs	r1, r5
   30c56:	0020      	movs	r0, r4
   30c58:	4b90      	ldr	r3, [pc, #576]	; (30e9c <http_client_send_request+0x2cc>)
   30c5a:	4798      	blx	r3
   30c5c:	0003      	movs	r3, r0
   30c5e:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   30c60:	e00d      	b.n	30c7e <http_client_send_request+0xae>
		module->host[j++] = url[i];
   30c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   30c64:	1c5a      	adds	r2, r3, #1
   30c66:	62fa      	str	r2, [r7, #44]	; 0x2c
   30c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   30c6a:	68b9      	ldr	r1, [r7, #8]
   30c6c:	188a      	adds	r2, r1, r2
   30c6e:	7811      	ldrb	r1, [r2, #0]
   30c70:	68fa      	ldr	r2, [r7, #12]
   30c72:	18d3      	adds	r3, r2, r3
   30c74:	1c0a      	adds	r2, r1, #0
   30c76:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   30c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30c7a:	3301      	adds	r3, #1
   30c7c:	633b      	str	r3, [r7, #48]	; 0x30
   30c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30c80:	68ba      	ldr	r2, [r7, #8]
   30c82:	18d3      	adds	r3, r2, r3
   30c84:	781b      	ldrb	r3, [r3, #0]
   30c86:	2b00      	cmp	r3, #0
   30c88:	d005      	beq.n	30c96 <http_client_send_request+0xc6>
   30c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30c8c:	68ba      	ldr	r2, [r7, #8]
   30c8e:	18d3      	adds	r3, r2, r3
   30c90:	781b      	ldrb	r3, [r3, #0]
   30c92:	2b2f      	cmp	r3, #47	; 0x2f
   30c94:	d1e5      	bne.n	30c62 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   30c96:	68fa      	ldr	r2, [r7, #12]
   30c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   30c9a:	18d3      	adds	r3, r2, r3
   30c9c:	3301      	adds	r3, #1
   30c9e:	2200      	movs	r2, #0
   30ca0:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   30ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30ca4:	68ba      	ldr	r2, [r7, #8]
   30ca6:	18d3      	adds	r3, r2, r3
   30ca8:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   30caa:	68fb      	ldr	r3, [r7, #12]
   30cac:	3301      	adds	r3, #1
   30cae:	781b      	ldrb	r3, [r3, #0]
   30cb0:	2b00      	cmp	r3, #0
   30cb2:	d102      	bne.n	30cba <http_client_send_request+0xea>
		return -EINVAL;
   30cb4:	2316      	movs	r3, #22
   30cb6:	425b      	negs	r3, r3
   30cb8:	e0ea      	b.n	30e90 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   30cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30cbc:	0018      	movs	r0, r3
   30cbe:	4b79      	ldr	r3, [pc, #484]	; (30ea4 <http_client_send_request+0x2d4>)
   30cc0:	4798      	blx	r3
   30cc2:	0003      	movs	r3, r0
   30cc4:	2b3f      	cmp	r3, #63	; 0x3f
   30cc6:	d902      	bls.n	30cce <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   30cc8:	235b      	movs	r3, #91	; 0x5b
   30cca:	425b      	negs	r3, r3
   30ccc:	e0e0      	b.n	30e90 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   30cce:	68fb      	ldr	r3, [r7, #12]
   30cd0:	22d4      	movs	r2, #212	; 0xd4
   30cd2:	589b      	ldr	r3, [r3, r2]
   30cd4:	2b00      	cmp	r3, #0
   30cd6:	d005      	beq.n	30ce4 <http_client_send_request+0x114>
		free(module->req.ext_header);
   30cd8:	68fb      	ldr	r3, [r7, #12]
   30cda:	22d4      	movs	r2, #212	; 0xd4
   30cdc:	589b      	ldr	r3, [r3, r2]
   30cde:	0018      	movs	r0, r3
   30ce0:	4b71      	ldr	r3, [pc, #452]	; (30ea8 <http_client_send_request+0x2d8>)
   30ce2:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   30ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30ce6:	2b00      	cmp	r3, #0
   30ce8:	d010      	beq.n	30d0c <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   30cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30cec:	0018      	movs	r0, r3
   30cee:	4b6f      	ldr	r3, [pc, #444]	; (30eac <http_client_send_request+0x2dc>)
   30cf0:	4798      	blx	r3
   30cf2:	0003      	movs	r3, r0
   30cf4:	0019      	movs	r1, r3
   30cf6:	68fb      	ldr	r3, [r7, #12]
   30cf8:	22d4      	movs	r2, #212	; 0xd4
   30cfa:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   30cfc:	68fb      	ldr	r3, [r7, #12]
   30cfe:	22d4      	movs	r2, #212	; 0xd4
   30d00:	589b      	ldr	r3, [r3, r2]
   30d02:	2b00      	cmp	r3, #0
   30d04:	d106      	bne.n	30d14 <http_client_send_request+0x144>
			return -ENOMEM;
   30d06:	230c      	movs	r3, #12
   30d08:	425b      	negs	r3, r3
   30d0a:	e0c1      	b.n	30e90 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   30d0c:	68fb      	ldr	r3, [r7, #12]
   30d0e:	22d4      	movs	r2, #212	; 0xd4
   30d10:	2100      	movs	r1, #0
   30d12:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   30d14:	68fb      	ldr	r3, [r7, #12]
   30d16:	2241      	movs	r2, #65	; 0x41
   30d18:	5c99      	ldrb	r1, [r3, r2]
   30d1a:	2001      	movs	r0, #1
   30d1c:	4381      	bics	r1, r0
   30d1e:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   30d20:	68fb      	ldr	r3, [r7, #12]
   30d22:	2200      	movs	r2, #0
   30d24:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   30d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30d28:	781b      	ldrb	r3, [r3, #0]
   30d2a:	2b2f      	cmp	r3, #47	; 0x2f
   30d2c:	d107      	bne.n	30d3e <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   30d2e:	68fb      	ldr	r3, [r7, #12]
   30d30:	3370      	adds	r3, #112	; 0x70
   30d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30d34:	0011      	movs	r1, r2
   30d36:	0018      	movs	r0, r3
   30d38:	4b5d      	ldr	r3, [pc, #372]	; (30eb0 <http_client_send_request+0x2e0>)
   30d3a:	4798      	blx	r3
   30d3c:	e00f      	b.n	30d5e <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   30d3e:	68fb      	ldr	r3, [r7, #12]
   30d40:	2270      	movs	r2, #112	; 0x70
   30d42:	212f      	movs	r1, #47	; 0x2f
   30d44:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   30d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30d48:	781b      	ldrb	r3, [r3, #0]
   30d4a:	2b00      	cmp	r3, #0
   30d4c:	d007      	beq.n	30d5e <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   30d4e:	68fb      	ldr	r3, [r7, #12]
   30d50:	3370      	adds	r3, #112	; 0x70
   30d52:	3301      	adds	r3, #1
   30d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30d56:	0011      	movs	r1, r2
   30d58:	0018      	movs	r0, r3
   30d5a:	4b55      	ldr	r3, [pc, #340]	; (30eb0 <http_client_send_request+0x2e0>)
   30d5c:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   30d5e:	683b      	ldr	r3, [r7, #0]
   30d60:	2b00      	cmp	r3, #0
   30d62:	d007      	beq.n	30d74 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   30d64:	68fb      	ldr	r3, [r7, #12]
   30d66:	33b0      	adds	r3, #176	; 0xb0
   30d68:	6839      	ldr	r1, [r7, #0]
   30d6a:	2218      	movs	r2, #24
   30d6c:	0018      	movs	r0, r3
   30d6e:	4b51      	ldr	r3, [pc, #324]	; (30eb4 <http_client_send_request+0x2e4>)
   30d70:	4798      	blx	r3
   30d72:	e006      	b.n	30d82 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   30d74:	68fb      	ldr	r3, [r7, #12]
   30d76:	33b0      	adds	r3, #176	; 0xb0
   30d78:	2218      	movs	r2, #24
   30d7a:	2100      	movs	r1, #0
   30d7c:	0018      	movs	r0, r3
   30d7e:	4b4e      	ldr	r3, [pc, #312]	; (30eb8 <http_client_send_request+0x2e8>)
   30d80:	4798      	blx	r3
	}

	module->req.method = method;
   30d82:	68fb      	ldr	r3, [r7, #12]
   30d84:	1dfa      	adds	r2, r7, #7
   30d86:	21c8      	movs	r1, #200	; 0xc8
   30d88:	7812      	ldrb	r2, [r2, #0]
   30d8a:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   30d8c:	68fb      	ldr	r3, [r7, #12]
   30d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30d90:	2b01      	cmp	r3, #1
   30d92:	d003      	beq.n	30d9c <http_client_send_request+0x1cc>
   30d94:	d316      	bcc.n	30dc4 <http_client_send_request+0x1f4>
   30d96:	2b02      	cmp	r3, #2
   30d98:	d004      	beq.n	30da4 <http_client_send_request+0x1d4>
   30d9a:	e074      	b.n	30e86 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   30d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30d9e:	2b00      	cmp	r3, #0
   30da0:	d100      	bne.n	30da4 <http_client_send_request+0x1d4>
   30da2:	e073      	b.n	30e8c <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   30da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30da6:	2b00      	cmp	r3, #0
   30da8:	d107      	bne.n	30dba <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   30daa:	68fb      	ldr	r3, [r7, #12]
   30dac:	2203      	movs	r2, #3
   30dae:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   30db0:	68fb      	ldr	r3, [r7, #12]
   30db2:	0018      	movs	r0, r3
   30db4:	4b41      	ldr	r3, [pc, #260]	; (30ebc <http_client_send_request+0x2ec>)
   30db6:	4798      	blx	r3
			break;
   30db8:	e069      	b.n	30e8e <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   30dba:	68fb      	ldr	r3, [r7, #12]
   30dbc:	2100      	movs	r1, #0
   30dbe:	0018      	movs	r0, r3
   30dc0:	4b3f      	ldr	r3, [pc, #252]	; (30ec0 <http_client_send_request+0x2f0>)
   30dc2:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   30dc4:	68fb      	ldr	r3, [r7, #12]
   30dc6:	2252      	movs	r2, #82	; 0x52
   30dc8:	5c9b      	ldrb	r3, [r3, r2]
   30dca:	2b00      	cmp	r3, #0
   30dcc:	d007      	beq.n	30dde <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   30dce:	2337      	movs	r3, #55	; 0x37
   30dd0:	18fb      	adds	r3, r7, r3
   30dd2:	2237      	movs	r2, #55	; 0x37
   30dd4:	18ba      	adds	r2, r7, r2
   30dd6:	7812      	ldrb	r2, [r2, #0]
   30dd8:	2101      	movs	r1, #1
   30dda:	430a      	orrs	r2, r1
   30ddc:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   30dde:	2337      	movs	r3, #55	; 0x37
   30de0:	18fb      	adds	r3, r7, r3
   30de2:	781b      	ldrb	r3, [r3, #0]
   30de4:	001a      	movs	r2, r3
   30de6:	2101      	movs	r1, #1
   30de8:	2002      	movs	r0, #2
   30dea:	4b36      	ldr	r3, [pc, #216]	; (30ec4 <http_client_send_request+0x2f4>)
   30dec:	4798      	blx	r3
   30dee:	0003      	movs	r3, r0
   30df0:	001a      	movs	r2, r3
   30df2:	68fb      	ldr	r3, [r7, #12]
   30df4:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   30df6:	68fb      	ldr	r3, [r7, #12]
   30df8:	781b      	ldrb	r3, [r3, #0]
   30dfa:	b25b      	sxtb	r3, r3
   30dfc:	2b00      	cmp	r3, #0
   30dfe:	db3f      	blt.n	30e80 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   30e00:	68fb      	ldr	r3, [r7, #12]
   30e02:	781b      	ldrb	r3, [r3, #0]
   30e04:	b25b      	sxtb	r3, r3
   30e06:	001a      	movs	r2, r3
   30e08:	4b2f      	ldr	r3, [pc, #188]	; (30ec8 <http_client_send_request+0x2f8>)
   30e0a:	0092      	lsls	r2, r2, #2
   30e0c:	68f9      	ldr	r1, [r7, #12]
   30e0e:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   30e10:	68fb      	ldr	r3, [r7, #12]
   30e12:	3301      	adds	r3, #1
   30e14:	0018      	movs	r0, r3
   30e16:	4b2d      	ldr	r3, [pc, #180]	; (30ecc <http_client_send_request+0x2fc>)
   30e18:	4798      	blx	r3
   30e1a:	1e03      	subs	r3, r0, #0
   30e1c:	d027      	beq.n	30e6e <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   30e1e:	2314      	movs	r3, #20
   30e20:	18fb      	adds	r3, r7, r3
   30e22:	2202      	movs	r2, #2
   30e24:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   30e26:	68fb      	ldr	r3, [r7, #12]
   30e28:	2250      	movs	r2, #80	; 0x50
   30e2a:	5a9b      	ldrh	r3, [r3, r2]
   30e2c:	021b      	lsls	r3, r3, #8
   30e2e:	b21a      	sxth	r2, r3
   30e30:	68fb      	ldr	r3, [r7, #12]
   30e32:	2150      	movs	r1, #80	; 0x50
   30e34:	5a5b      	ldrh	r3, [r3, r1]
   30e36:	0a1b      	lsrs	r3, r3, #8
   30e38:	b29b      	uxth	r3, r3
   30e3a:	b21b      	sxth	r3, r3
   30e3c:	4313      	orrs	r3, r2
   30e3e:	b21b      	sxth	r3, r3
   30e40:	b29a      	uxth	r2, r3
   30e42:	2314      	movs	r3, #20
   30e44:	18fb      	adds	r3, r7, r3
   30e46:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   30e48:	68fb      	ldr	r3, [r7, #12]
   30e4a:	3301      	adds	r3, #1
   30e4c:	0018      	movs	r0, r3
   30e4e:	4b20      	ldr	r3, [pc, #128]	; (30ed0 <http_client_send_request+0x300>)
   30e50:	4798      	blx	r3
   30e52:	0002      	movs	r2, r0
   30e54:	2314      	movs	r3, #20
   30e56:	18fb      	adds	r3, r7, r3
   30e58:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   30e5a:	68fb      	ldr	r3, [r7, #12]
   30e5c:	781b      	ldrb	r3, [r3, #0]
   30e5e:	b25b      	sxtb	r3, r3
   30e60:	2214      	movs	r2, #20
   30e62:	18b9      	adds	r1, r7, r2
   30e64:	2210      	movs	r2, #16
   30e66:	0018      	movs	r0, r3
   30e68:	4b1a      	ldr	r3, [pc, #104]	; (30ed4 <http_client_send_request+0x304>)
   30e6a:	4798      	blx	r3
   30e6c:	e004      	b.n	30e78 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   30e6e:	68fb      	ldr	r3, [r7, #12]
   30e70:	3301      	adds	r3, #1
   30e72:	0018      	movs	r0, r3
   30e74:	4b18      	ldr	r3, [pc, #96]	; (30ed8 <http_client_send_request+0x308>)
   30e76:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   30e78:	68fb      	ldr	r3, [r7, #12]
   30e7a:	2201      	movs	r2, #1
   30e7c:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   30e7e:	e006      	b.n	30e8e <http_client_send_request+0x2be>
			return -ENOSPC;
   30e80:	231c      	movs	r3, #28
   30e82:	425b      	negs	r3, r3
   30e84:	e004      	b.n	30e90 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   30e86:	230b      	movs	r3, #11
   30e88:	425b      	negs	r3, r3
   30e8a:	e001      	b.n	30e90 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   30e8c:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   30e8e:	2300      	movs	r3, #0
}
   30e90:	0018      	movs	r0, r3
   30e92:	46bd      	mov	sp, r7
   30e94:	b00e      	add	sp, #56	; 0x38
   30e96:	bdb0      	pop	{r4, r5, r7, pc}
   30e98:	000398c8 	.word	0x000398c8
   30e9c:	000349f5 	.word	0x000349f5
   30ea0:	000398d0 	.word	0x000398d0
   30ea4:	000349e7 	.word	0x000349e7
   30ea8:	000345e5 	.word	0x000345e5
   30eac:	000349ad 	.word	0x000349ad
   30eb0:	0003499b 	.word	0x0003499b
   30eb4:	000345f9 	.word	0x000345f9
   30eb8:	0003462f 	.word	0x0003462f
   30ebc:	00031031 	.word	0x00031031
   30ec0:	00030edd 	.word	0x00030edd
   30ec4:	000251ed 	.word	0x000251ed
   30ec8:	20004574 	.word	0x20004574
   30ecc:	00030b39 	.word	0x00030b39
   30ed0:	00025939 	.word	0x00025939
   30ed4:	00025401 	.word	0x00025401
   30ed8:	00025a41 	.word	0x00025a41

00030edc <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   30edc:	b580      	push	{r7, lr}
   30ede:	b086      	sub	sp, #24
   30ee0:	af00      	add	r7, sp, #0
   30ee2:	6078      	str	r0, [r7, #4]
   30ee4:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   30ee6:	687b      	ldr	r3, [r7, #4]
   30ee8:	22c0      	movs	r2, #192	; 0xc0
   30eea:	589b      	ldr	r3, [r3, r2]
   30eec:	2b00      	cmp	r3, #0
   30eee:	d007      	beq.n	30f00 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   30ef0:	687b      	ldr	r3, [r7, #4]
   30ef2:	22c0      	movs	r2, #192	; 0xc0
   30ef4:	589b      	ldr	r3, [r3, r2]
   30ef6:	687a      	ldr	r2, [r7, #4]
   30ef8:	21c4      	movs	r1, #196	; 0xc4
   30efa:	5852      	ldr	r2, [r2, r1]
   30efc:	0010      	movs	r0, r2
   30efe:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   30f00:	687b      	ldr	r3, [r7, #4]
   30f02:	33b0      	adds	r3, #176	; 0xb0
   30f04:	2218      	movs	r2, #24
   30f06:	2100      	movs	r1, #0
   30f08:	0018      	movs	r0, r3
   30f0a:	4b24      	ldr	r3, [pc, #144]	; (30f9c <_http_client_clear_conn+0xc0>)
   30f0c:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   30f0e:	687b      	ldr	r3, [r7, #4]
   30f10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30f12:	2b00      	cmp	r3, #0
   30f14:	d005      	beq.n	30f22 <_http_client_clear_conn+0x46>
		close(module->sock);
   30f16:	687b      	ldr	r3, [r7, #4]
   30f18:	781b      	ldrb	r3, [r3, #0]
   30f1a:	b25b      	sxtb	r3, r3
   30f1c:	0018      	movs	r0, r3
   30f1e:	4b20      	ldr	r3, [pc, #128]	; (30fa0 <_http_client_clear_conn+0xc4>)
   30f20:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   30f22:	687b      	ldr	r3, [r7, #4]
   30f24:	781b      	ldrb	r3, [r3, #0]
   30f26:	b25b      	sxtb	r3, r3
   30f28:	001a      	movs	r2, r3
   30f2a:	4b1e      	ldr	r3, [pc, #120]	; (30fa4 <_http_client_clear_conn+0xc8>)
   30f2c:	0092      	lsls	r2, r2, #2
   30f2e:	2100      	movs	r1, #0
   30f30:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   30f32:	687b      	ldr	r3, [r7, #4]
   30f34:	336c      	adds	r3, #108	; 0x6c
   30f36:	226c      	movs	r2, #108	; 0x6c
   30f38:	2100      	movs	r1, #0
   30f3a:	0018      	movs	r0, r3
   30f3c:	4b17      	ldr	r3, [pc, #92]	; (30f9c <_http_client_clear_conn+0xc0>)
   30f3e:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   30f40:	687b      	ldr	r3, [r7, #4]
   30f42:	33d8      	adds	r3, #216	; 0xd8
   30f44:	2210      	movs	r2, #16
   30f46:	2100      	movs	r1, #0
   30f48:	0018      	movs	r0, r3
   30f4a:	4b14      	ldr	r3, [pc, #80]	; (30f9c <_http_client_clear_conn+0xc0>)
   30f4c:	4798      	blx	r3
	module->req.state = STATE_INIT;
   30f4e:	687b      	ldr	r3, [r7, #4]
   30f50:	2200      	movs	r2, #0
   30f52:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   30f54:	687b      	ldr	r3, [r7, #4]
   30f56:	22d8      	movs	r2, #216	; 0xd8
   30f58:	2100      	movs	r1, #0
   30f5a:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   30f5c:	687b      	ldr	r3, [r7, #4]
   30f5e:	2241      	movs	r2, #65	; 0x41
   30f60:	5c99      	ldrb	r1, [r3, r2]
   30f62:	2001      	movs	r0, #1
   30f64:	4381      	bics	r1, r0
   30f66:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   30f68:	687b      	ldr	r3, [r7, #4]
   30f6a:	2241      	movs	r2, #65	; 0x41
   30f6c:	5c99      	ldrb	r1, [r3, r2]
   30f6e:	2002      	movs	r0, #2
   30f70:	4381      	bics	r1, r0
   30f72:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   30f74:	230c      	movs	r3, #12
   30f76:	18fb      	adds	r3, r7, r3
   30f78:	683a      	ldr	r2, [r7, #0]
   30f7a:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   30f7c:	687b      	ldr	r3, [r7, #4]
   30f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30f80:	2b00      	cmp	r3, #0
   30f82:	d006      	beq.n	30f92 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   30f84:	687b      	ldr	r3, [r7, #4]
   30f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30f88:	220c      	movs	r2, #12
   30f8a:	18ba      	adds	r2, r7, r2
   30f8c:	6878      	ldr	r0, [r7, #4]
   30f8e:	2104      	movs	r1, #4
   30f90:	4798      	blx	r3
	}
}
   30f92:	46c0      	nop			; (mov r8, r8)
   30f94:	46bd      	mov	sp, r7
   30f96:	b006      	add	sp, #24
   30f98:	bd80      	pop	{r7, pc}
   30f9a:	46c0      	nop			; (mov r8, r8)
   30f9c:	0003462f 	.word	0x0003462f
   30fa0:	000257f9 	.word	0x000257f9
   30fa4:	20004574 	.word	0x20004574

00030fa8 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   30fa8:	b590      	push	{r4, r7, lr}
   30faa:	b087      	sub	sp, #28
   30fac:	af00      	add	r7, sp, #0
   30fae:	60f8      	str	r0, [r7, #12]
   30fb0:	60b9      	str	r1, [r7, #8]
   30fb2:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   30fb4:	68fb      	ldr	r3, [r7, #12]
   30fb6:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   30fb8:	697b      	ldr	r3, [r7, #20]
   30fba:	2241      	movs	r2, #65	; 0x41
   30fbc:	5c99      	ldrb	r1, [r3, r2]
   30fbe:	2001      	movs	r0, #1
   30fc0:	4301      	orrs	r1, r0
   30fc2:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   30fc4:	697b      	ldr	r3, [r7, #20]
   30fc6:	2000      	movs	r0, #0
   30fc8:	5618      	ldrsb	r0, [r3, r0]
   30fca:	687b      	ldr	r3, [r7, #4]
   30fcc:	b29a      	uxth	r2, r3
   30fce:	68b9      	ldr	r1, [r7, #8]
   30fd0:	2300      	movs	r3, #0
   30fd2:	4c14      	ldr	r4, [pc, #80]	; (31024 <_http_client_send_wait+0x7c>)
   30fd4:	47a0      	blx	r4
   30fd6:	0003      	movs	r3, r0
   30fd8:	613b      	str	r3, [r7, #16]
   30fda:	693b      	ldr	r3, [r7, #16]
   30fdc:	2b00      	cmp	r3, #0
   30fde:	da0f      	bge.n	31000 <_http_client_send_wait+0x58>
		module->sending = 0;
   30fe0:	697b      	ldr	r3, [r7, #20]
   30fe2:	2241      	movs	r2, #65	; 0x41
   30fe4:	5c99      	ldrb	r1, [r3, r2]
   30fe6:	2001      	movs	r0, #1
   30fe8:	4381      	bics	r1, r0
   30fea:	5499      	strb	r1, [r3, r2]
		return result;
   30fec:	693b      	ldr	r3, [r7, #16]
   30fee:	e014      	b.n	3101a <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   30ff0:	2000      	movs	r0, #0
   30ff2:	4b0d      	ldr	r3, [pc, #52]	; (31028 <_http_client_send_wait+0x80>)
   30ff4:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   30ff6:	697b      	ldr	r3, [r7, #20]
   30ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30ffa:	0018      	movs	r0, r3
   30ffc:	4b0b      	ldr	r3, [pc, #44]	; (3102c <_http_client_send_wait+0x84>)
   30ffe:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   31000:	697b      	ldr	r3, [r7, #20]
   31002:	2241      	movs	r2, #65	; 0x41
   31004:	5c9b      	ldrb	r3, [r3, r2]
   31006:	2201      	movs	r2, #1
   31008:	4013      	ands	r3, r2
   3100a:	b2db      	uxtb	r3, r3
   3100c:	2b00      	cmp	r3, #0
   3100e:	d003      	beq.n	31018 <_http_client_send_wait+0x70>
   31010:	697b      	ldr	r3, [r7, #20]
   31012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31014:	2b02      	cmp	r3, #2
   31016:	d8eb      	bhi.n	30ff0 <_http_client_send_wait+0x48>
	}

	return 0;
   31018:	2300      	movs	r3, #0
}
   3101a:	0018      	movs	r0, r3
   3101c:	46bd      	mov	sp, r7
   3101e:	b007      	add	sp, #28
   31020:	bd90      	pop	{r4, r7, pc}
   31022:	46c0      	nop			; (mov r8, r8)
   31024:	00025515 	.word	0x00025515
   31028:	00021bc1 	.word	0x00021bc1
   3102c:	000322b5 	.word	0x000322b5

00031030 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   31030:	b5f0      	push	{r4, r5, r6, r7, lr}
   31032:	46c6      	mov	lr, r8
   31034:	b500      	push	{lr}
   31036:	b0a0      	sub	sp, #128	; 0x80
   31038:	af02      	add	r7, sp, #8
   3103a:	61f8      	str	r0, [r7, #28]
   3103c:	4668      	mov	r0, sp
   3103e:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   31040:	2318      	movs	r3, #24
   31042:	2218      	movs	r2, #24
   31044:	18ba      	adds	r2, r7, r2
   31046:	18d0      	adds	r0, r2, r3
   31048:	4bbd      	ldr	r3, [pc, #756]	; (31340 <_http_client_request+0x310>)
   3104a:	469c      	mov	ip, r3
   3104c:	4663      	mov	r3, ip
   3104e:	cb16      	ldmia	r3!, {r1, r2, r4}
   31050:	c016      	stmia	r0!, {r1, r2, r4}
   31052:	469c      	mov	ip, r3
   31054:	4663      	mov	r3, ip
   31056:	681b      	ldr	r3, [r3, #0]
   31058:	469c      	mov	ip, r3
   3105a:	4663      	mov	r3, ip
   3105c:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   3105e:	69f8      	ldr	r0, [r7, #28]
   31060:	6e40      	ldr	r0, [r0, #100]	; 0x64
   31062:	4684      	mov	ip, r0
   31064:	2301      	movs	r3, #1
   31066:	425b      	negs	r3, r3
   31068:	4698      	mov	r8, r3
   3106a:	44c4      	add	ip, r8
   3106c:	4663      	mov	r3, ip
   3106e:	66fb      	str	r3, [r7, #108]	; 0x6c
   31070:	6038      	str	r0, [r7, #0]
   31072:	2300      	movs	r3, #0
   31074:	607b      	str	r3, [r7, #4]
   31076:	6839      	ldr	r1, [r7, #0]
   31078:	687a      	ldr	r2, [r7, #4]
   3107a:	000b      	movs	r3, r1
   3107c:	0f5b      	lsrs	r3, r3, #29
   3107e:	469c      	mov	ip, r3
   31080:	0013      	movs	r3, r2
   31082:	00db      	lsls	r3, r3, #3
   31084:	617b      	str	r3, [r7, #20]
   31086:	4663      	mov	r3, ip
   31088:	697c      	ldr	r4, [r7, #20]
   3108a:	431c      	orrs	r4, r3
   3108c:	617c      	str	r4, [r7, #20]
   3108e:	000b      	movs	r3, r1
   31090:	00db      	lsls	r3, r3, #3
   31092:	613b      	str	r3, [r7, #16]
   31094:	0005      	movs	r5, r0
   31096:	2200      	movs	r2, #0
   31098:	0016      	movs	r6, r2
   3109a:	0f6a      	lsrs	r2, r5, #29
   3109c:	00f3      	lsls	r3, r6, #3
   3109e:	60fb      	str	r3, [r7, #12]
   310a0:	68fb      	ldr	r3, [r7, #12]
   310a2:	4313      	orrs	r3, r2
   310a4:	60fb      	str	r3, [r7, #12]
   310a6:	00eb      	lsls	r3, r5, #3
   310a8:	60bb      	str	r3, [r7, #8]
   310aa:	1dc3      	adds	r3, r0, #7
   310ac:	08db      	lsrs	r3, r3, #3
   310ae:	00db      	lsls	r3, r3, #3
   310b0:	466a      	mov	r2, sp
   310b2:	1ad3      	subs	r3, r2, r3
   310b4:	469d      	mov	sp, r3
   310b6:	ab02      	add	r3, sp, #8
   310b8:	3300      	adds	r3, #0
   310ba:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   310bc:	69fb      	ldr	r3, [r7, #28]
   310be:	2b00      	cmp	r3, #0
   310c0:	d100      	bne.n	310c4 <_http_client_request+0x94>
   310c2:	e346      	b.n	31752 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   310c4:	69fb      	ldr	r3, [r7, #28]
   310c6:	2241      	movs	r2, #65	; 0x41
   310c8:	5c9b      	ldrb	r3, [r3, r2]
   310ca:	2201      	movs	r2, #1
   310cc:	4013      	ands	r3, r2
   310ce:	b2db      	uxtb	r3, r3
   310d0:	2b00      	cmp	r3, #0
   310d2:	d000      	beq.n	310d6 <_http_client_request+0xa6>
   310d4:	e33f      	b.n	31756 <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   310d6:	69fb      	ldr	r3, [r7, #28]
   310d8:	33b0      	adds	r3, #176	; 0xb0
   310da:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   310dc:	69fb      	ldr	r3, [r7, #28]
   310de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   310e0:	2b03      	cmp	r3, #3
   310e2:	d003      	beq.n	310ec <_http_client_request+0xbc>
   310e4:	2b04      	cmp	r3, #4
   310e6:	d100      	bne.n	310ea <_http_client_request+0xba>
   310e8:	e1b3      	b.n	31452 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   310ea:	e32f      	b.n	3174c <_http_client_request+0x71c>
		module->req.content_length = 0;
   310ec:	69fb      	ldr	r3, [r7, #28]
   310ee:	22cc      	movs	r2, #204	; 0xcc
   310f0:	2100      	movs	r1, #0
   310f2:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   310f4:	69fb      	ldr	r3, [r7, #28]
   310f6:	22d0      	movs	r2, #208	; 0xd0
   310f8:	2100      	movs	r1, #0
   310fa:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   310fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   310fe:	69fb      	ldr	r3, [r7, #28]
   31100:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   31102:	4c90      	ldr	r4, [pc, #576]	; (31344 <_http_client_request+0x314>)
   31104:	2334      	movs	r3, #52	; 0x34
   31106:	2018      	movs	r0, #24
   31108:	1838      	adds	r0, r7, r0
   3110a:	18c0      	adds	r0, r0, r3
   3110c:	69fb      	ldr	r3, [r7, #28]
   3110e:	9300      	str	r3, [sp, #0]
   31110:	0023      	movs	r3, r4
   31112:	4c8d      	ldr	r4, [pc, #564]	; (31348 <_http_client_request+0x318>)
   31114:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   31116:	69fb      	ldr	r3, [r7, #28]
   31118:	22c8      	movs	r2, #200	; 0xc8
   3111a:	5c9b      	ldrb	r3, [r3, r2]
   3111c:	2b01      	cmp	r3, #1
   3111e:	d10a      	bne.n	31136 <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   31120:	498a      	ldr	r1, [pc, #552]	; (3134c <_http_client_request+0x31c>)
   31122:	2334      	movs	r3, #52	; 0x34
   31124:	2218      	movs	r2, #24
   31126:	4694      	mov	ip, r2
   31128:	44bc      	add	ip, r7
   3112a:	4463      	add	r3, ip
   3112c:	2204      	movs	r2, #4
   3112e:	0018      	movs	r0, r3
   31130:	4b87      	ldr	r3, [pc, #540]	; (31350 <_http_client_request+0x320>)
   31132:	4798      	blx	r3
   31134:	e04e      	b.n	311d4 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   31136:	69fb      	ldr	r3, [r7, #28]
   31138:	22c8      	movs	r2, #200	; 0xc8
   3113a:	5c9b      	ldrb	r3, [r3, r2]
   3113c:	2b02      	cmp	r3, #2
   3113e:	d10a      	bne.n	31156 <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   31140:	4984      	ldr	r1, [pc, #528]	; (31354 <_http_client_request+0x324>)
   31142:	2334      	movs	r3, #52	; 0x34
   31144:	2218      	movs	r2, #24
   31146:	4694      	mov	ip, r2
   31148:	44bc      	add	ip, r7
   3114a:	4463      	add	r3, ip
   3114c:	2205      	movs	r2, #5
   3114e:	0018      	movs	r0, r3
   31150:	4b7f      	ldr	r3, [pc, #508]	; (31350 <_http_client_request+0x320>)
   31152:	4798      	blx	r3
   31154:	e03e      	b.n	311d4 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   31156:	69fb      	ldr	r3, [r7, #28]
   31158:	22c8      	movs	r2, #200	; 0xc8
   3115a:	5c9b      	ldrb	r3, [r3, r2]
   3115c:	2b03      	cmp	r3, #3
   3115e:	d10a      	bne.n	31176 <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   31160:	497d      	ldr	r1, [pc, #500]	; (31358 <_http_client_request+0x328>)
   31162:	2334      	movs	r3, #52	; 0x34
   31164:	2218      	movs	r2, #24
   31166:	4694      	mov	ip, r2
   31168:	44bc      	add	ip, r7
   3116a:	4463      	add	r3, ip
   3116c:	2207      	movs	r2, #7
   3116e:	0018      	movs	r0, r3
   31170:	4b77      	ldr	r3, [pc, #476]	; (31350 <_http_client_request+0x320>)
   31172:	4798      	blx	r3
   31174:	e02e      	b.n	311d4 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   31176:	69fb      	ldr	r3, [r7, #28]
   31178:	22c8      	movs	r2, #200	; 0xc8
   3117a:	5c9b      	ldrb	r3, [r3, r2]
   3117c:	2b04      	cmp	r3, #4
   3117e:	d10a      	bne.n	31196 <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   31180:	4976      	ldr	r1, [pc, #472]	; (3135c <_http_client_request+0x32c>)
   31182:	2334      	movs	r3, #52	; 0x34
   31184:	2218      	movs	r2, #24
   31186:	4694      	mov	ip, r2
   31188:	44bc      	add	ip, r7
   3118a:	4463      	add	r3, ip
   3118c:	2204      	movs	r2, #4
   3118e:	0018      	movs	r0, r3
   31190:	4b6f      	ldr	r3, [pc, #444]	; (31350 <_http_client_request+0x320>)
   31192:	4798      	blx	r3
   31194:	e01e      	b.n	311d4 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   31196:	69fb      	ldr	r3, [r7, #28]
   31198:	22c8      	movs	r2, #200	; 0xc8
   3119a:	5c9b      	ldrb	r3, [r3, r2]
   3119c:	2b05      	cmp	r3, #5
   3119e:	d10a      	bne.n	311b6 <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   311a0:	496f      	ldr	r1, [pc, #444]	; (31360 <_http_client_request+0x330>)
   311a2:	2334      	movs	r3, #52	; 0x34
   311a4:	2218      	movs	r2, #24
   311a6:	4694      	mov	ip, r2
   311a8:	44bc      	add	ip, r7
   311aa:	4463      	add	r3, ip
   311ac:	2208      	movs	r2, #8
   311ae:	0018      	movs	r0, r3
   311b0:	4b67      	ldr	r3, [pc, #412]	; (31350 <_http_client_request+0x320>)
   311b2:	4798      	blx	r3
   311b4:	e00e      	b.n	311d4 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   311b6:	69fb      	ldr	r3, [r7, #28]
   311b8:	22c8      	movs	r2, #200	; 0xc8
   311ba:	5c9b      	ldrb	r3, [r3, r2]
   311bc:	2b06      	cmp	r3, #6
   311be:	d109      	bne.n	311d4 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   311c0:	4968      	ldr	r1, [pc, #416]	; (31364 <_http_client_request+0x334>)
   311c2:	2334      	movs	r3, #52	; 0x34
   311c4:	2218      	movs	r2, #24
   311c6:	4694      	mov	ip, r2
   311c8:	44bc      	add	ip, r7
   311ca:	4463      	add	r3, ip
   311cc:	2205      	movs	r2, #5
   311ce:	0018      	movs	r0, r3
   311d0:	4b5f      	ldr	r3, [pc, #380]	; (31350 <_http_client_request+0x320>)
   311d2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   311d4:	69fb      	ldr	r3, [r7, #28]
   311d6:	3370      	adds	r3, #112	; 0x70
   311d8:	001c      	movs	r4, r3
   311da:	69fb      	ldr	r3, [r7, #28]
   311dc:	3370      	adds	r3, #112	; 0x70
   311de:	0018      	movs	r0, r3
   311e0:	4b61      	ldr	r3, [pc, #388]	; (31368 <_http_client_request+0x338>)
   311e2:	4798      	blx	r3
   311e4:	0002      	movs	r2, r0
   311e6:	2334      	movs	r3, #52	; 0x34
   311e8:	2118      	movs	r1, #24
   311ea:	468c      	mov	ip, r1
   311ec:	44bc      	add	ip, r7
   311ee:	4463      	add	r3, ip
   311f0:	0021      	movs	r1, r4
   311f2:	0018      	movs	r0, r3
   311f4:	4b56      	ldr	r3, [pc, #344]	; (31350 <_http_client_request+0x320>)
   311f6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   311f8:	495c      	ldr	r1, [pc, #368]	; (3136c <_http_client_request+0x33c>)
   311fa:	2334      	movs	r3, #52	; 0x34
   311fc:	2218      	movs	r2, #24
   311fe:	4694      	mov	ip, r2
   31200:	44bc      	add	ip, r7
   31202:	4463      	add	r3, ip
   31204:	220b      	movs	r2, #11
   31206:	0018      	movs	r0, r3
   31208:	4b51      	ldr	r3, [pc, #324]	; (31350 <_http_client_request+0x320>)
   3120a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   3120c:	4958      	ldr	r1, [pc, #352]	; (31370 <_http_client_request+0x340>)
   3120e:	2334      	movs	r3, #52	; 0x34
   31210:	2218      	movs	r2, #24
   31212:	4694      	mov	ip, r2
   31214:	44bc      	add	ip, r7
   31216:	4463      	add	r3, ip
   31218:	220c      	movs	r2, #12
   3121a:	0018      	movs	r0, r3
   3121c:	4b4c      	ldr	r3, [pc, #304]	; (31350 <_http_client_request+0x320>)
   3121e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   31220:	69fb      	ldr	r3, [r7, #28]
   31222:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   31224:	69fb      	ldr	r3, [r7, #28]
   31226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   31228:	0018      	movs	r0, r3
   3122a:	4b4f      	ldr	r3, [pc, #316]	; (31368 <_http_client_request+0x338>)
   3122c:	4798      	blx	r3
   3122e:	0002      	movs	r2, r0
   31230:	2334      	movs	r3, #52	; 0x34
   31232:	2118      	movs	r1, #24
   31234:	468c      	mov	ip, r1
   31236:	44bc      	add	ip, r7
   31238:	4463      	add	r3, ip
   3123a:	0021      	movs	r1, r4
   3123c:	0018      	movs	r0, r3
   3123e:	4b44      	ldr	r3, [pc, #272]	; (31350 <_http_client_request+0x320>)
   31240:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31242:	494c      	ldr	r1, [pc, #304]	; (31374 <_http_client_request+0x344>)
   31244:	2334      	movs	r3, #52	; 0x34
   31246:	2218      	movs	r2, #24
   31248:	4694      	mov	ip, r2
   3124a:	44bc      	add	ip, r7
   3124c:	4463      	add	r3, ip
   3124e:	2202      	movs	r2, #2
   31250:	0018      	movs	r0, r3
   31252:	4b3f      	ldr	r3, [pc, #252]	; (31350 <_http_client_request+0x320>)
   31254:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   31256:	4948      	ldr	r1, [pc, #288]	; (31378 <_http_client_request+0x348>)
   31258:	2334      	movs	r3, #52	; 0x34
   3125a:	2218      	movs	r2, #24
   3125c:	4694      	mov	ip, r2
   3125e:	44bc      	add	ip, r7
   31260:	4463      	add	r3, ip
   31262:	2206      	movs	r2, #6
   31264:	0018      	movs	r0, r3
   31266:	4b3a      	ldr	r3, [pc, #232]	; (31350 <_http_client_request+0x320>)
   31268:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   3126a:	69fb      	ldr	r3, [r7, #28]
   3126c:	1c5c      	adds	r4, r3, #1
   3126e:	69fb      	ldr	r3, [r7, #28]
   31270:	3301      	adds	r3, #1
   31272:	0018      	movs	r0, r3
   31274:	4b3c      	ldr	r3, [pc, #240]	; (31368 <_http_client_request+0x338>)
   31276:	4798      	blx	r3
   31278:	0002      	movs	r2, r0
   3127a:	2334      	movs	r3, #52	; 0x34
   3127c:	2118      	movs	r1, #24
   3127e:	468c      	mov	ip, r1
   31280:	44bc      	add	ip, r7
   31282:	4463      	add	r3, ip
   31284:	0021      	movs	r1, r4
   31286:	0018      	movs	r0, r3
   31288:	4b31      	ldr	r3, [pc, #196]	; (31350 <_http_client_request+0x320>)
   3128a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   3128c:	4939      	ldr	r1, [pc, #228]	; (31374 <_http_client_request+0x344>)
   3128e:	2334      	movs	r3, #52	; 0x34
   31290:	2218      	movs	r2, #24
   31292:	4694      	mov	ip, r2
   31294:	44bc      	add	ip, r7
   31296:	4463      	add	r3, ip
   31298:	2202      	movs	r2, #2
   3129a:	0018      	movs	r0, r3
   3129c:	4b2c      	ldr	r3, [pc, #176]	; (31350 <_http_client_request+0x320>)
   3129e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   312a0:	4936      	ldr	r1, [pc, #216]	; (3137c <_http_client_request+0x34c>)
   312a2:	2334      	movs	r3, #52	; 0x34
   312a4:	2218      	movs	r2, #24
   312a6:	4694      	mov	ip, r2
   312a8:	44bc      	add	ip, r7
   312aa:	4463      	add	r3, ip
   312ac:	2218      	movs	r2, #24
   312ae:	0018      	movs	r0, r3
   312b0:	4b27      	ldr	r3, [pc, #156]	; (31350 <_http_client_request+0x320>)
   312b2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   312b4:	4932      	ldr	r1, [pc, #200]	; (31380 <_http_client_request+0x350>)
   312b6:	2334      	movs	r3, #52	; 0x34
   312b8:	2218      	movs	r2, #24
   312ba:	4694      	mov	ip, r2
   312bc:	44bc      	add	ip, r7
   312be:	4463      	add	r3, ip
   312c0:	2213      	movs	r2, #19
   312c2:	0018      	movs	r0, r3
   312c4:	4b22      	ldr	r3, [pc, #136]	; (31350 <_http_client_request+0x320>)
   312c6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   312c8:	492e      	ldr	r1, [pc, #184]	; (31384 <_http_client_request+0x354>)
   312ca:	2334      	movs	r3, #52	; 0x34
   312cc:	2218      	movs	r2, #24
   312ce:	4694      	mov	ip, r2
   312d0:	44bc      	add	ip, r7
   312d2:	4463      	add	r3, ip
   312d4:	2217      	movs	r2, #23
   312d6:	0018      	movs	r0, r3
   312d8:	4b1d      	ldr	r3, [pc, #116]	; (31350 <_http_client_request+0x320>)
   312da:	4798      	blx	r3
		if (entity->read != NULL) {
   312dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   312de:	68db      	ldr	r3, [r3, #12]
   312e0:	2b00      	cmp	r3, #0
   312e2:	d100      	bne.n	312e6 <_http_client_request+0x2b6>
   312e4:	e088      	b.n	313f8 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   312e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   312e8:	781b      	ldrb	r3, [r3, #0]
   312ea:	2b00      	cmp	r3, #0
   312ec:	d00f      	beq.n	3130e <_http_client_request+0x2de>
				module->req.content_length = -1;
   312ee:	69fb      	ldr	r3, [r7, #28]
   312f0:	21cc      	movs	r1, #204	; 0xcc
   312f2:	2201      	movs	r2, #1
   312f4:	4252      	negs	r2, r2
   312f6:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   312f8:	4923      	ldr	r1, [pc, #140]	; (31388 <_http_client_request+0x358>)
   312fa:	2334      	movs	r3, #52	; 0x34
   312fc:	2218      	movs	r2, #24
   312fe:	4694      	mov	ip, r2
   31300:	44bc      	add	ip, r7
   31302:	4463      	add	r3, ip
   31304:	221c      	movs	r2, #28
   31306:	0018      	movs	r0, r3
   31308:	4b11      	ldr	r3, [pc, #68]	; (31350 <_http_client_request+0x320>)
   3130a:	4798      	blx	r3
   3130c:	e074      	b.n	313f8 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   3130e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31310:	689b      	ldr	r3, [r3, #8]
   31312:	2b00      	cmp	r3, #0
   31314:	d070      	beq.n	313f8 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   31316:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31318:	689a      	ldr	r2, [r3, #8]
   3131a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3131c:	695b      	ldr	r3, [r3, #20]
   3131e:	0018      	movs	r0, r3
   31320:	4790      	blx	r2
   31322:	0001      	movs	r1, r0
   31324:	69fb      	ldr	r3, [r7, #28]
   31326:	22cc      	movs	r2, #204	; 0xcc
   31328:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   3132a:	69fb      	ldr	r3, [r7, #28]
   3132c:	22cc      	movs	r2, #204	; 0xcc
   3132e:	589b      	ldr	r3, [r3, r2]
   31330:	2b00      	cmp	r3, #0
   31332:	da2b      	bge.n	3138c <_http_client_request+0x35c>
					module->req.content_length = 0;
   31334:	69fb      	ldr	r3, [r7, #28]
   31336:	22cc      	movs	r2, #204	; 0xcc
   31338:	2100      	movs	r1, #0
   3133a:	5099      	str	r1, [r3, r2]
   3133c:	e05c      	b.n	313f8 <_http_client_request+0x3c8>
   3133e:	46c0      	nop			; (mov r8, r8)
   31340:	000399b8 	.word	0x000399b8
   31344:	00030fa9 	.word	0x00030fa9
   31348:	00031f11 	.word	0x00031f11
   3134c:	000398dc 	.word	0x000398dc
   31350:	00031f91 	.word	0x00031f91
   31354:	000398e4 	.word	0x000398e4
   31358:	000398ec 	.word	0x000398ec
   3135c:	000398f4 	.word	0x000398f4
   31360:	000398fc 	.word	0x000398fc
   31364:	00039908 	.word	0x00039908
   31368:	000349e7 	.word	0x000349e7
   3136c:	00039910 	.word	0x00039910
   31370:	0003991c 	.word	0x0003991c
   31374:	0003992c 	.word	0x0003992c
   31378:	00039930 	.word	0x00039930
   3137c:	00039938 	.word	0x00039938
   31380:	00039954 	.word	0x00039954
   31384:	00039968 	.word	0x00039968
   31388:	00039980 	.word	0x00039980
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   3138c:	69fb      	ldr	r3, [r7, #28]
   3138e:	22cc      	movs	r2, #204	; 0xcc
   31390:	589b      	ldr	r3, [r3, r2]
   31392:	001a      	movs	r2, r3
   31394:	49e0      	ldr	r1, [pc, #896]	; (31718 <_http_client_request+0x6e8>)
   31396:	2328      	movs	r3, #40	; 0x28
   31398:	2018      	movs	r0, #24
   3139a:	4684      	mov	ip, r0
   3139c:	44bc      	add	ip, r7
   3139e:	4463      	add	r3, ip
   313a0:	0018      	movs	r0, r3
   313a2:	4bde      	ldr	r3, [pc, #888]	; (3171c <_http_client_request+0x6ec>)
   313a4:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   313a6:	49de      	ldr	r1, [pc, #888]	; (31720 <_http_client_request+0x6f0>)
   313a8:	2334      	movs	r3, #52	; 0x34
   313aa:	2218      	movs	r2, #24
   313ac:	4694      	mov	ip, r2
   313ae:	44bc      	add	ip, r7
   313b0:	4463      	add	r3, ip
   313b2:	2210      	movs	r2, #16
   313b4:	0018      	movs	r0, r3
   313b6:	4bdb      	ldr	r3, [pc, #876]	; (31724 <_http_client_request+0x6f4>)
   313b8:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   313ba:	2328      	movs	r3, #40	; 0x28
   313bc:	2218      	movs	r2, #24
   313be:	4694      	mov	ip, r2
   313c0:	44bc      	add	ip, r7
   313c2:	4463      	add	r3, ip
   313c4:	0018      	movs	r0, r3
   313c6:	4bd8      	ldr	r3, [pc, #864]	; (31728 <_http_client_request+0x6f8>)
   313c8:	4798      	blx	r3
   313ca:	0002      	movs	r2, r0
   313cc:	2328      	movs	r3, #40	; 0x28
   313ce:	2118      	movs	r1, #24
   313d0:	1879      	adds	r1, r7, r1
   313d2:	18c9      	adds	r1, r1, r3
   313d4:	2334      	movs	r3, #52	; 0x34
   313d6:	2018      	movs	r0, #24
   313d8:	4684      	mov	ip, r0
   313da:	44bc      	add	ip, r7
   313dc:	4463      	add	r3, ip
   313de:	0018      	movs	r0, r3
   313e0:	4bd0      	ldr	r3, [pc, #832]	; (31724 <_http_client_request+0x6f4>)
   313e2:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   313e4:	49d1      	ldr	r1, [pc, #836]	; (3172c <_http_client_request+0x6fc>)
   313e6:	2334      	movs	r3, #52	; 0x34
   313e8:	2218      	movs	r2, #24
   313ea:	4694      	mov	ip, r2
   313ec:	44bc      	add	ip, r7
   313ee:	4463      	add	r3, ip
   313f0:	2202      	movs	r2, #2
   313f2:	0018      	movs	r0, r3
   313f4:	4bcb      	ldr	r3, [pc, #812]	; (31724 <_http_client_request+0x6f4>)
   313f6:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   313f8:	69fb      	ldr	r3, [r7, #28]
   313fa:	22d4      	movs	r2, #212	; 0xd4
   313fc:	589b      	ldr	r3, [r3, r2]
   313fe:	2b00      	cmp	r3, #0
   31400:	d012      	beq.n	31428 <_http_client_request+0x3f8>
				module->req.ext_header,
   31402:	69fb      	ldr	r3, [r7, #28]
   31404:	22d4      	movs	r2, #212	; 0xd4
   31406:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   31408:	69fb      	ldr	r3, [r7, #28]
   3140a:	22d4      	movs	r2, #212	; 0xd4
   3140c:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   3140e:	0018      	movs	r0, r3
   31410:	4bc5      	ldr	r3, [pc, #788]	; (31728 <_http_client_request+0x6f8>)
   31412:	4798      	blx	r3
   31414:	0002      	movs	r2, r0
   31416:	2334      	movs	r3, #52	; 0x34
   31418:	2118      	movs	r1, #24
   3141a:	468c      	mov	ip, r1
   3141c:	44bc      	add	ip, r7
   3141e:	4463      	add	r3, ip
   31420:	0021      	movs	r1, r4
   31422:	0018      	movs	r0, r3
   31424:	4bbf      	ldr	r3, [pc, #764]	; (31724 <_http_client_request+0x6f4>)
   31426:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31428:	49c0      	ldr	r1, [pc, #768]	; (3172c <_http_client_request+0x6fc>)
   3142a:	2334      	movs	r3, #52	; 0x34
   3142c:	2218      	movs	r2, #24
   3142e:	4694      	mov	ip, r2
   31430:	44bc      	add	ip, r7
   31432:	4463      	add	r3, ip
   31434:	2202      	movs	r2, #2
   31436:	0018      	movs	r0, r3
   31438:	4bba      	ldr	r3, [pc, #744]	; (31724 <_http_client_request+0x6f4>)
   3143a:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   3143c:	2334      	movs	r3, #52	; 0x34
   3143e:	2218      	movs	r2, #24
   31440:	4694      	mov	ip, r2
   31442:	44bc      	add	ip, r7
   31444:	4463      	add	r3, ip
   31446:	0018      	movs	r0, r3
   31448:	4bb9      	ldr	r3, [pc, #740]	; (31730 <_http_client_request+0x700>)
   3144a:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   3144c:	69fb      	ldr	r3, [r7, #28]
   3144e:	2204      	movs	r2, #4
   31450:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   31452:	69fb      	ldr	r3, [r7, #28]
   31454:	22cc      	movs	r2, #204	; 0xcc
   31456:	589b      	ldr	r3, [r3, r2]
   31458:	2b00      	cmp	r3, #0
   3145a:	db00      	blt.n	3145e <_http_client_request+0x42e>
   3145c:	e0c6      	b.n	315ec <_http_client_request+0x5bc>
   3145e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31460:	68db      	ldr	r3, [r3, #12]
   31462:	2b00      	cmp	r3, #0
   31464:	d100      	bne.n	31468 <_http_client_request+0x438>
   31466:	e0c1      	b.n	315ec <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   31468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3146a:	68dc      	ldr	r4, [r3, #12]
   3146c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3146e:	6958      	ldr	r0, [r3, #20]
   31470:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31472:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   31474:	69fb      	ldr	r3, [r7, #28]
   31476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   31478:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   3147a:	69fb      	ldr	r3, [r7, #28]
   3147c:	22d0      	movs	r2, #208	; 0xd0
   3147e:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   31480:	002a      	movs	r2, r5
   31482:	47a0      	blx	r4
   31484:	0003      	movs	r3, r0
   31486:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   31488:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3148a:	2b00      	cmp	r3, #0
   3148c:	da01      	bge.n	31492 <_http_client_request+0x462>
				size = 0;
   3148e:	2300      	movs	r3, #0
   31490:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   31492:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31494:	220a      	movs	r2, #10
   31496:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   31498:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3149a:	220d      	movs	r2, #13
   3149c:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   3149e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   314a0:	3305      	adds	r3, #5
   314a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
   314a4:	210d      	movs	r1, #13
   314a6:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   314a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   314aa:	3306      	adds	r3, #6
   314ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
   314ae:	210a      	movs	r1, #10
   314b0:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   314b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   314b4:	2b00      	cmp	r3, #0
   314b6:	db14      	blt.n	314e2 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   314b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   314ba:	3302      	adds	r3, #2
   314bc:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   314be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   314c0:	4a9c      	ldr	r2, [pc, #624]	; (31734 <_http_client_request+0x704>)
   314c2:	4013      	ands	r3, r2
   314c4:	d504      	bpl.n	314d0 <_http_client_request+0x4a0>
   314c6:	3b01      	subs	r3, #1
   314c8:	2210      	movs	r2, #16
   314ca:	4252      	negs	r2, r2
   314cc:	4313      	orrs	r3, r2
   314ce:	3301      	adds	r3, #1
   314d0:	001a      	movs	r2, r3
   314d2:	2318      	movs	r3, #24
   314d4:	2118      	movs	r1, #24
   314d6:	468c      	mov	ip, r1
   314d8:	44bc      	add	ip, r7
   314da:	4463      	add	r3, ip
   314dc:	5c9a      	ldrb	r2, [r3, r2]
   314de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   314e0:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   314e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   314e4:	2b0f      	cmp	r3, #15
   314e6:	dd19      	ble.n	3151c <_http_client_request+0x4ec>
				ptr = buffer + 1;
   314e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   314ea:	3301      	adds	r3, #1
   314ec:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   314ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   314f0:	2b00      	cmp	r3, #0
   314f2:	da00      	bge.n	314f6 <_http_client_request+0x4c6>
   314f4:	330f      	adds	r3, #15
   314f6:	111b      	asrs	r3, r3, #4
   314f8:	001a      	movs	r2, r3
   314fa:	4b8e      	ldr	r3, [pc, #568]	; (31734 <_http_client_request+0x704>)
   314fc:	4013      	ands	r3, r2
   314fe:	d504      	bpl.n	3150a <_http_client_request+0x4da>
   31500:	3b01      	subs	r3, #1
   31502:	2210      	movs	r2, #16
   31504:	4252      	negs	r2, r2
   31506:	4313      	orrs	r3, r2
   31508:	3301      	adds	r3, #1
   3150a:	001a      	movs	r2, r3
   3150c:	2318      	movs	r3, #24
   3150e:	2118      	movs	r1, #24
   31510:	468c      	mov	ip, r1
   31512:	44bc      	add	ip, r7
   31514:	4463      	add	r3, ip
   31516:	5c9a      	ldrb	r2, [r3, r2]
   31518:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3151a:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   3151c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3151e:	2bff      	cmp	r3, #255	; 0xff
   31520:	dd18      	ble.n	31554 <_http_client_request+0x524>
				ptr = buffer;
   31522:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31524:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   31526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31528:	2b00      	cmp	r3, #0
   3152a:	da00      	bge.n	3152e <_http_client_request+0x4fe>
   3152c:	33ff      	adds	r3, #255	; 0xff
   3152e:	121b      	asrs	r3, r3, #8
   31530:	001a      	movs	r2, r3
   31532:	4b80      	ldr	r3, [pc, #512]	; (31734 <_http_client_request+0x704>)
   31534:	4013      	ands	r3, r2
   31536:	d504      	bpl.n	31542 <_http_client_request+0x512>
   31538:	3b01      	subs	r3, #1
   3153a:	2210      	movs	r2, #16
   3153c:	4252      	negs	r2, r2
   3153e:	4313      	orrs	r3, r2
   31540:	3301      	adds	r3, #1
   31542:	001a      	movs	r2, r3
   31544:	2318      	movs	r3, #24
   31546:	2118      	movs	r1, #24
   31548:	468c      	mov	ip, r1
   3154a:	44bc      	add	ip, r7
   3154c:	4463      	add	r3, ip
   3154e:	5c9a      	ldrb	r2, [r3, r2]
   31550:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31552:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   31554:	69fb      	ldr	r3, [r7, #28]
   31556:	2000      	movs	r0, #0
   31558:	5618      	ldrsb	r0, [r3, r0]
   3155a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3155c:	3303      	adds	r3, #3
   3155e:	001a      	movs	r2, r3
   31560:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31562:	1ad3      	subs	r3, r2, r3
   31564:	b29a      	uxth	r2, r3
   31566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31568:	b29b      	uxth	r3, r3
   3156a:	18d3      	adds	r3, r2, r3
   3156c:	b29b      	uxth	r3, r3
   3156e:	3304      	adds	r3, #4
   31570:	b29a      	uxth	r2, r3
   31572:	6f39      	ldr	r1, [r7, #112]	; 0x70
   31574:	2300      	movs	r3, #0
   31576:	4c70      	ldr	r4, [pc, #448]	; (31738 <_http_client_request+0x708>)
   31578:	47a0      	blx	r4
   3157a:	0003      	movs	r3, r0
   3157c:	663b      	str	r3, [r7, #96]	; 0x60
   3157e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   31580:	2b00      	cmp	r3, #0
   31582:	da07      	bge.n	31594 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   31584:	2305      	movs	r3, #5
   31586:	425a      	negs	r2, r3
   31588:	69fb      	ldr	r3, [r7, #28]
   3158a:	0011      	movs	r1, r2
   3158c:	0018      	movs	r0, r3
   3158e:	4b6b      	ldr	r3, [pc, #428]	; (3173c <_http_client_request+0x70c>)
   31590:	4798      	blx	r3
				return;
   31592:	e0e1      	b.n	31758 <_http_client_request+0x728>
			module->req.sent_length += size;
   31594:	69fb      	ldr	r3, [r7, #28]
   31596:	22d0      	movs	r2, #208	; 0xd0
   31598:	589a      	ldr	r2, [r3, r2]
   3159a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3159c:	18d2      	adds	r2, r2, r3
   3159e:	69fb      	ldr	r3, [r7, #28]
   315a0:	21d0      	movs	r1, #208	; 0xd0
   315a2:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   315a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   315a6:	2b00      	cmp	r3, #0
   315a8:	d000      	beq.n	315ac <_http_client_request+0x57c>
   315aa:	e0c9      	b.n	31740 <_http_client_request+0x710>
				if (module->req.entity.close) {
   315ac:	69fb      	ldr	r3, [r7, #28]
   315ae:	22c0      	movs	r2, #192	; 0xc0
   315b0:	589b      	ldr	r3, [r3, r2]
   315b2:	2b00      	cmp	r3, #0
   315b4:	d007      	beq.n	315c6 <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   315b6:	69fb      	ldr	r3, [r7, #28]
   315b8:	22c0      	movs	r2, #192	; 0xc0
   315ba:	589b      	ldr	r3, [r3, r2]
   315bc:	69fa      	ldr	r2, [r7, #28]
   315be:	21c4      	movs	r1, #196	; 0xc4
   315c0:	5852      	ldr	r2, [r2, r1]
   315c2:	0010      	movs	r0, r2
   315c4:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   315c6:	69fb      	ldr	r3, [r7, #28]
   315c8:	2202      	movs	r2, #2
   315ca:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   315cc:	69fb      	ldr	r3, [r7, #28]
   315ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   315d0:	2b00      	cmp	r3, #0
   315d2:	d100      	bne.n	315d6 <_http_client_request+0x5a6>
   315d4:	e0b5      	b.n	31742 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   315d6:	69fb      	ldr	r3, [r7, #28]
   315d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   315da:	220c      	movs	r2, #12
   315dc:	2118      	movs	r1, #24
   315de:	468c      	mov	ip, r1
   315e0:	44bc      	add	ip, r7
   315e2:	4462      	add	r2, ip
   315e4:	69f8      	ldr	r0, [r7, #28]
   315e6:	2101      	movs	r1, #1
   315e8:	4798      	blx	r3
				break;
   315ea:	e0aa      	b.n	31742 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   315ec:	69fb      	ldr	r3, [r7, #28]
   315ee:	22cc      	movs	r2, #204	; 0xcc
   315f0:	589b      	ldr	r3, [r3, r2]
   315f2:	2b00      	cmp	r3, #0
   315f4:	dc00      	bgt.n	315f8 <_http_client_request+0x5c8>
   315f6:	e07c      	b.n	316f2 <_http_client_request+0x6c2>
   315f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   315fa:	68db      	ldr	r3, [r3, #12]
   315fc:	2b00      	cmp	r3, #0
   315fe:	d100      	bne.n	31602 <_http_client_request+0x5d2>
   31600:	e077      	b.n	316f2 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   31602:	69fb      	ldr	r3, [r7, #28]
   31604:	22d0      	movs	r2, #208	; 0xd0
   31606:	589a      	ldr	r2, [r3, r2]
   31608:	69fb      	ldr	r3, [r7, #28]
   3160a:	21cc      	movs	r1, #204	; 0xcc
   3160c:	585b      	ldr	r3, [r3, r1]
   3160e:	429a      	cmp	r2, r3
   31610:	db1f      	blt.n	31652 <_http_client_request+0x622>
				if (module->req.entity.close) {
   31612:	69fb      	ldr	r3, [r7, #28]
   31614:	22c0      	movs	r2, #192	; 0xc0
   31616:	589b      	ldr	r3, [r3, r2]
   31618:	2b00      	cmp	r3, #0
   3161a:	d007      	beq.n	3162c <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   3161c:	69fb      	ldr	r3, [r7, #28]
   3161e:	22c0      	movs	r2, #192	; 0xc0
   31620:	589b      	ldr	r3, [r3, r2]
   31622:	69fa      	ldr	r2, [r7, #28]
   31624:	21c4      	movs	r1, #196	; 0xc4
   31626:	5852      	ldr	r2, [r2, r1]
   31628:	0010      	movs	r0, r2
   3162a:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   3162c:	69fb      	ldr	r3, [r7, #28]
   3162e:	2202      	movs	r2, #2
   31630:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   31632:	69fb      	ldr	r3, [r7, #28]
   31634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31636:	2b00      	cmp	r3, #0
   31638:	d100      	bne.n	3163c <_http_client_request+0x60c>
   3163a:	e084      	b.n	31746 <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   3163c:	69fb      	ldr	r3, [r7, #28]
   3163e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31640:	220c      	movs	r2, #12
   31642:	2118      	movs	r1, #24
   31644:	468c      	mov	ip, r1
   31646:	44bc      	add	ip, r7
   31648:	4462      	add	r2, ip
   3164a:	69f8      	ldr	r0, [r7, #28]
   3164c:	2101      	movs	r1, #1
   3164e:	4798      	blx	r3
				break;
   31650:	e079      	b.n	31746 <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   31652:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31654:	68dc      	ldr	r4, [r3, #12]
   31656:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31658:	6958      	ldr	r0, [r3, #20]
   3165a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   3165c:	69fb      	ldr	r3, [r7, #28]
   3165e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   31660:	69fb      	ldr	r3, [r7, #28]
   31662:	22d0      	movs	r2, #208	; 0xd0
   31664:	589b      	ldr	r3, [r3, r2]
   31666:	002a      	movs	r2, r5
   31668:	47a0      	blx	r4
   3166a:	0003      	movs	r3, r0
   3166c:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   3166e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31670:	2b00      	cmp	r3, #0
   31672:	da0d      	bge.n	31690 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   31674:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31676:	2b00      	cmp	r3, #0
   31678:	d102      	bne.n	31680 <_http_client_request+0x650>
   3167a:	234d      	movs	r3, #77	; 0x4d
   3167c:	425b      	negs	r3, r3
   3167e:	e001      	b.n	31684 <_http_client_request+0x654>
   31680:	2305      	movs	r3, #5
   31682:	425b      	negs	r3, r3
   31684:	69fa      	ldr	r2, [r7, #28]
   31686:	0019      	movs	r1, r3
   31688:	0010      	movs	r0, r2
   3168a:	4b2c      	ldr	r3, [pc, #176]	; (3173c <_http_client_request+0x70c>)
   3168c:	4798      	blx	r3
			if (size < 0) {
   3168e:	e057      	b.n	31740 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   31690:	69fb      	ldr	r3, [r7, #28]
   31692:	22cc      	movs	r2, #204	; 0xcc
   31694:	589a      	ldr	r2, [r3, r2]
   31696:	69fb      	ldr	r3, [r7, #28]
   31698:	21d0      	movs	r1, #208	; 0xd0
   3169a:	585b      	ldr	r3, [r3, r1]
   3169c:	1ad2      	subs	r2, r2, r3
   3169e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   316a0:	429a      	cmp	r2, r3
   316a2:	da07      	bge.n	316b4 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   316a4:	69fb      	ldr	r3, [r7, #28]
   316a6:	22cc      	movs	r2, #204	; 0xcc
   316a8:	589a      	ldr	r2, [r3, r2]
   316aa:	69fb      	ldr	r3, [r7, #28]
   316ac:	21d0      	movs	r1, #208	; 0xd0
   316ae:	585b      	ldr	r3, [r3, r1]
   316b0:	1ad3      	subs	r3, r2, r3
   316b2:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   316b4:	69fb      	ldr	r3, [r7, #28]
   316b6:	2000      	movs	r0, #0
   316b8:	5618      	ldrsb	r0, [r3, r0]
   316ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   316bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   316be:	b29a      	uxth	r2, r3
   316c0:	2300      	movs	r3, #0
   316c2:	4c1d      	ldr	r4, [pc, #116]	; (31738 <_http_client_request+0x708>)
   316c4:	47a0      	blx	r4
   316c6:	0003      	movs	r3, r0
   316c8:	663b      	str	r3, [r7, #96]	; 0x60
   316ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   316cc:	2b00      	cmp	r3, #0
   316ce:	da07      	bge.n	316e0 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   316d0:	2305      	movs	r3, #5
   316d2:	425a      	negs	r2, r3
   316d4:	69fb      	ldr	r3, [r7, #28]
   316d6:	0011      	movs	r1, r2
   316d8:	0018      	movs	r0, r3
   316da:	4b18      	ldr	r3, [pc, #96]	; (3173c <_http_client_request+0x70c>)
   316dc:	4798      	blx	r3
					return;
   316de:	e03b      	b.n	31758 <_http_client_request+0x728>
				module->req.sent_length += size;
   316e0:	69fb      	ldr	r3, [r7, #28]
   316e2:	22d0      	movs	r2, #208	; 0xd0
   316e4:	589a      	ldr	r2, [r3, r2]
   316e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   316e8:	18d2      	adds	r2, r2, r3
   316ea:	69fb      	ldr	r3, [r7, #28]
   316ec:	21d0      	movs	r1, #208	; 0xd0
   316ee:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   316f0:	e026      	b.n	31740 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   316f2:	69fb      	ldr	r3, [r7, #28]
   316f4:	2202      	movs	r2, #2
   316f6:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   316f8:	69fb      	ldr	r3, [r7, #28]
   316fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   316fc:	2b00      	cmp	r3, #0
   316fe:	d024      	beq.n	3174a <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   31700:	69fb      	ldr	r3, [r7, #28]
   31702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31704:	220c      	movs	r2, #12
   31706:	2118      	movs	r1, #24
   31708:	468c      	mov	ip, r1
   3170a:	44bc      	add	ip, r7
   3170c:	4462      	add	r2, ip
   3170e:	69f8      	ldr	r0, [r7, #28]
   31710:	2101      	movs	r1, #1
   31712:	4798      	blx	r3
			break;
   31714:	e019      	b.n	3174a <_http_client_request+0x71a>
   31716:	46c0      	nop			; (mov r8, r8)
   31718:	000399a0 	.word	0x000399a0
   3171c:	000348ed 	.word	0x000348ed
   31720:	000399a4 	.word	0x000399a4
   31724:	00031f91 	.word	0x00031f91
   31728:	000349e7 	.word	0x000349e7
   3172c:	0003992c 	.word	0x0003992c
   31730:	00031fcd 	.word	0x00031fcd
   31734:	8000000f 	.word	0x8000000f
   31738:	00025515 	.word	0x00025515
   3173c:	00030edd 	.word	0x00030edd
		break;
   31740:	e004      	b.n	3174c <_http_client_request+0x71c>
				break;
   31742:	46c0      	nop			; (mov r8, r8)
   31744:	e002      	b.n	3174c <_http_client_request+0x71c>
				break;
   31746:	46c0      	nop			; (mov r8, r8)
   31748:	e000      	b.n	3174c <_http_client_request+0x71c>
			break;
   3174a:	46c0      	nop			; (mov r8, r8)
   3174c:	69bb      	ldr	r3, [r7, #24]
   3174e:	469d      	mov	sp, r3
   31750:	e004      	b.n	3175c <_http_client_request+0x72c>
		return;
   31752:	46c0      	nop			; (mov r8, r8)
   31754:	e000      	b.n	31758 <_http_client_request+0x728>
		return;
   31756:	46c0      	nop			; (mov r8, r8)
   31758:	69bb      	ldr	r3, [r7, #24]
   3175a:	469d      	mov	sp, r3
	}
}
   3175c:	46bd      	mov	sp, r7
   3175e:	b01e      	add	sp, #120	; 0x78
   31760:	bc04      	pop	{r2}
   31762:	4690      	mov	r8, r2
   31764:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31766:	46c0      	nop			; (mov r8, r8)

00031768 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   31768:	b590      	push	{r4, r7, lr}
   3176a:	b083      	sub	sp, #12
   3176c:	af00      	add	r7, sp, #0
   3176e:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   31770:	687b      	ldr	r3, [r7, #4]
   31772:	2b00      	cmp	r3, #0
   31774:	d021      	beq.n	317ba <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   31776:	687b      	ldr	r3, [r7, #4]
   31778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   3177a:	687b      	ldr	r3, [r7, #4]
   3177c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3177e:	429a      	cmp	r2, r3
   31780:	d307      	bcc.n	31792 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   31782:	238b      	movs	r3, #139	; 0x8b
   31784:	425a      	negs	r2, r3
   31786:	687b      	ldr	r3, [r7, #4]
   31788:	0011      	movs	r1, r2
   3178a:	0018      	movs	r0, r3
   3178c:	4b0d      	ldr	r3, [pc, #52]	; (317c4 <_http_client_recv_packet+0x5c>)
   3178e:	4798      	blx	r3
		return;
   31790:	e014      	b.n	317bc <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   31792:	687b      	ldr	r3, [r7, #4]
   31794:	2000      	movs	r0, #0
   31796:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   31798:	687b      	ldr	r3, [r7, #4]
   3179a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   3179c:	687b      	ldr	r3, [r7, #4]
   3179e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   317a0:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   317a2:	687b      	ldr	r3, [r7, #4]
   317a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   317a6:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   317a8:	687b      	ldr	r3, [r7, #4]
   317aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   317ac:	b29b      	uxth	r3, r3
   317ae:	1ad3      	subs	r3, r2, r3
   317b0:	b29a      	uxth	r2, r3
   317b2:	2300      	movs	r3, #0
   317b4:	4c04      	ldr	r4, [pc, #16]	; (317c8 <_http_client_recv_packet+0x60>)
   317b6:	47a0      	blx	r4
   317b8:	e000      	b.n	317bc <_http_client_recv_packet+0x54>
		return;
   317ba:	46c0      	nop			; (mov r8, r8)
}
   317bc:	46bd      	mov	sp, r7
   317be:	b003      	add	sp, #12
   317c0:	bd90      	pop	{r4, r7, pc}
   317c2:	46c0      	nop			; (mov r8, r8)
   317c4:	00030edd 	.word	0x00030edd
   317c8:	00025679 	.word	0x00025679

000317cc <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   317cc:	b580      	push	{r7, lr}
   317ce:	b082      	sub	sp, #8
   317d0:	af00      	add	r7, sp, #0
   317d2:	6078      	str	r0, [r7, #4]
   317d4:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   317d6:	687b      	ldr	r3, [r7, #4]
   317d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   317da:	683b      	ldr	r3, [r7, #0]
   317dc:	18d2      	adds	r2, r2, r3
   317de:	687b      	ldr	r3, [r7, #4]
   317e0:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   317e2:	687b      	ldr	r3, [r7, #4]
   317e4:	2258      	movs	r2, #88	; 0x58
   317e6:	5a9b      	ldrh	r3, [r3, r2]
   317e8:	2b00      	cmp	r3, #0
   317ea:	d007      	beq.n	317fc <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   317ec:	687b      	ldr	r3, [r7, #4]
   317ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   317f0:	687b      	ldr	r3, [r7, #4]
   317f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   317f4:	0019      	movs	r1, r3
   317f6:	0010      	movs	r0, r2
   317f8:	4b06      	ldr	r3, [pc, #24]	; (31814 <_http_client_recved_packet+0x48>)
   317fa:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   317fc:	46c0      	nop			; (mov r8, r8)
   317fe:	687b      	ldr	r3, [r7, #4]
   31800:	0018      	movs	r0, r3
   31802:	4b05      	ldr	r3, [pc, #20]	; (31818 <_http_client_recved_packet+0x4c>)
   31804:	4798      	blx	r3
   31806:	1e03      	subs	r3, r0, #0
   31808:	d1f9      	bne.n	317fe <_http_client_recved_packet+0x32>
}
   3180a:	46c0      	nop			; (mov r8, r8)
   3180c:	46bd      	mov	sp, r7
   3180e:	b002      	add	sp, #8
   31810:	bd80      	pop	{r7, pc}
   31812:	46c0      	nop			; (mov r8, r8)
   31814:	00032289 	.word	0x00032289
   31818:	0003181d 	.word	0x0003181d

0003181c <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   3181c:	b580      	push	{r7, lr}
   3181e:	b082      	sub	sp, #8
   31820:	af00      	add	r7, sp, #0
   31822:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   31824:	687b      	ldr	r3, [r7, #4]
   31826:	22d8      	movs	r2, #216	; 0xd8
   31828:	589b      	ldr	r3, [r3, r2]
   3182a:	2b00      	cmp	r3, #0
   3182c:	d002      	beq.n	31834 <_http_client_handle_response+0x18>
   3182e:	2b01      	cmp	r3, #1
   31830:	d006      	beq.n	31840 <_http_client_handle_response+0x24>
   31832:	e00b      	b.n	3184c <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   31834:	687b      	ldr	r3, [r7, #4]
   31836:	0018      	movs	r0, r3
   31838:	4b07      	ldr	r3, [pc, #28]	; (31858 <_http_client_handle_response+0x3c>)
   3183a:	4798      	blx	r3
   3183c:	0003      	movs	r3, r0
   3183e:	e006      	b.n	3184e <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   31840:	687b      	ldr	r3, [r7, #4]
   31842:	0018      	movs	r0, r3
   31844:	4b05      	ldr	r3, [pc, #20]	; (3185c <_http_client_handle_response+0x40>)
   31846:	4798      	blx	r3
   31848:	0003      	movs	r3, r0
   3184a:	e000      	b.n	3184e <_http_client_handle_response+0x32>
	}
	return 0;
   3184c:	2300      	movs	r3, #0
}
   3184e:	0018      	movs	r0, r3
   31850:	46bd      	mov	sp, r7
   31852:	b002      	add	sp, #8
   31854:	bd80      	pop	{r7, pc}
   31856:	46c0      	nop			; (mov r8, r8)
   31858:	00031861 	.word	0x00031861
   3185c:	00031d19 	.word	0x00031d19

00031860 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   31860:	b590      	push	{r4, r7, lr}
   31862:	b08b      	sub	sp, #44	; 0x2c
   31864:	af00      	add	r7, sp, #0
   31866:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   31868:	687b      	ldr	r3, [r7, #4]
   3186a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3186c:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   3186e:	4b9a      	ldr	r3, [pc, #616]	; (31ad8 <_http_client_handle_header+0x278>)
   31870:	681a      	ldr	r2, [r3, #0]
   31872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31874:	0011      	movs	r1, r2
   31876:	0018      	movs	r0, r3
   31878:	4b98      	ldr	r3, [pc, #608]	; (31adc <_http_client_handle_header+0x27c>)
   3187a:	4798      	blx	r3
   3187c:	0003      	movs	r3, r0
   3187e:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   31880:	69bb      	ldr	r3, [r7, #24]
   31882:	2b00      	cmp	r3, #0
   31884:	d007      	beq.n	31896 <_http_client_handle_header+0x36>
   31886:	687b      	ldr	r3, [r7, #4]
   31888:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   3188a:	687b      	ldr	r3, [r7, #4]
   3188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3188e:	18d2      	adds	r2, r2, r3
   31890:	69bb      	ldr	r3, [r7, #24]
   31892:	429a      	cmp	r2, r3
   31894:	d807      	bhi.n	318a6 <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   31896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   31898:	687b      	ldr	r3, [r7, #4]
   3189a:	0011      	movs	r1, r2
   3189c:	0018      	movs	r0, r3
   3189e:	4b90      	ldr	r3, [pc, #576]	; (31ae0 <_http_client_handle_header+0x280>)
   318a0:	4798      	blx	r3
			return 0;
   318a2:	2300      	movs	r3, #0
   318a4:	e114      	b.n	31ad0 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   318a6:	4b8c      	ldr	r3, [pc, #560]	; (31ad8 <_http_client_handle_header+0x278>)
   318a8:	681c      	ldr	r4, [r3, #0]
   318aa:	4b8b      	ldr	r3, [pc, #556]	; (31ad8 <_http_client_handle_header+0x278>)
   318ac:	681b      	ldr	r3, [r3, #0]
   318ae:	0018      	movs	r0, r3
   318b0:	4b8c      	ldr	r3, [pc, #560]	; (31ae4 <_http_client_handle_header+0x284>)
   318b2:	4798      	blx	r3
   318b4:	0002      	movs	r2, r0
   318b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   318b8:	0021      	movs	r1, r4
   318ba:	0018      	movs	r0, r3
   318bc:	4b8a      	ldr	r3, [pc, #552]	; (31ae8 <_http_client_handle_header+0x288>)
   318be:	4798      	blx	r3
   318c0:	1e03      	subs	r3, r0, #0
   318c2:	d15d      	bne.n	31980 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   318c4:	4b84      	ldr	r3, [pc, #528]	; (31ad8 <_http_client_handle_header+0x278>)
   318c6:	681b      	ldr	r3, [r3, #0]
   318c8:	0018      	movs	r0, r3
   318ca:	4b86      	ldr	r3, [pc, #536]	; (31ae4 <_http_client_handle_header+0x284>)
   318cc:	4798      	blx	r3
   318ce:	0002      	movs	r2, r0
   318d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   318d2:	189a      	adds	r2, r3, r2
   318d4:	687b      	ldr	r3, [r7, #4]
   318d6:	0011      	movs	r1, r2
   318d8:	0018      	movs	r0, r3
   318da:	4b81      	ldr	r3, [pc, #516]	; (31ae0 <_http_client_handle_header+0x280>)
   318dc:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   318de:	687b      	ldr	r3, [r7, #4]
   318e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   318e2:	2b00      	cmp	r3, #0
   318e4:	d046      	beq.n	31974 <_http_client_handle_header+0x114>
   318e6:	687b      	ldr	r3, [r7, #4]
   318e8:	22e4      	movs	r2, #228	; 0xe4
   318ea:	5a9b      	ldrh	r3, [r3, r2]
   318ec:	2b00      	cmp	r3, #0
   318ee:	d041      	beq.n	31974 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   318f0:	687b      	ldr	r3, [r7, #4]
   318f2:	22dc      	movs	r2, #220	; 0xdc
   318f4:	589b      	ldr	r3, [r3, r2]
   318f6:	2b00      	cmp	r3, #0
   318f8:	da19      	bge.n	3192e <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   318fa:	687b      	ldr	r3, [r7, #4]
   318fc:	22e4      	movs	r2, #228	; 0xe4
   318fe:	5a9a      	ldrh	r2, [r3, r2]
   31900:	230c      	movs	r3, #12
   31902:	18fb      	adds	r3, r7, r3
   31904:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   31906:	230c      	movs	r3, #12
   31908:	18fb      	adds	r3, r7, r3
   3190a:	2201      	movs	r2, #1
   3190c:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   3190e:	687b      	ldr	r3, [r7, #4]
   31910:	22e0      	movs	r2, #224	; 0xe0
   31912:	2100      	movs	r1, #0
   31914:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   31916:	230c      	movs	r3, #12
   31918:	18fb      	adds	r3, r7, r3
   3191a:	2200      	movs	r2, #0
   3191c:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   3191e:	687b      	ldr	r3, [r7, #4]
   31920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31922:	220c      	movs	r2, #12
   31924:	18ba      	adds	r2, r7, r2
   31926:	6878      	ldr	r0, [r7, #4]
   31928:	2102      	movs	r1, #2
   3192a:	4798      	blx	r3
   3192c:	e022      	b.n	31974 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   3192e:	687b      	ldr	r3, [r7, #4]
   31930:	22dc      	movs	r2, #220	; 0xdc
   31932:	589a      	ldr	r2, [r3, r2]
   31934:	687b      	ldr	r3, [r7, #4]
   31936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31938:	429a      	cmp	r2, r3
   3193a:	dd1b      	ble.n	31974 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   3193c:	687b      	ldr	r3, [r7, #4]
   3193e:	22e4      	movs	r2, #228	; 0xe4
   31940:	5a9a      	ldrh	r2, [r3, r2]
   31942:	230c      	movs	r3, #12
   31944:	18fb      	adds	r3, r7, r3
   31946:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   31948:	687b      	ldr	r3, [r7, #4]
   3194a:	22dc      	movs	r2, #220	; 0xdc
   3194c:	589b      	ldr	r3, [r3, r2]
   3194e:	001a      	movs	r2, r3
   31950:	230c      	movs	r3, #12
   31952:	18fb      	adds	r3, r7, r3
   31954:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   31956:	230c      	movs	r3, #12
   31958:	18fb      	adds	r3, r7, r3
   3195a:	2200      	movs	r2, #0
   3195c:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   3195e:	687b      	ldr	r3, [r7, #4]
   31960:	22e0      	movs	r2, #224	; 0xe0
   31962:	2100      	movs	r1, #0
   31964:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   31966:	687b      	ldr	r3, [r7, #4]
   31968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3196a:	220c      	movs	r2, #12
   3196c:	18ba      	adds	r2, r7, r2
   3196e:	6878      	ldr	r0, [r7, #4]
   31970:	2102      	movs	r1, #2
   31972:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   31974:	687b      	ldr	r3, [r7, #4]
   31976:	22d8      	movs	r2, #216	; 0xd8
   31978:	2101      	movs	r1, #1
   3197a:	5099      	str	r1, [r3, r2]
			return 1;
   3197c:	2301      	movs	r3, #1
   3197e:	e0a7      	b.n	31ad0 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   31980:	495a      	ldr	r1, [pc, #360]	; (31aec <_http_client_handle_header+0x28c>)
   31982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31984:	2210      	movs	r2, #16
   31986:	0018      	movs	r0, r3
   31988:	4b57      	ldr	r3, [pc, #348]	; (31ae8 <_http_client_handle_header+0x288>)
   3198a:	4798      	blx	r3
   3198c:	1e03      	subs	r3, r0, #0
   3198e:	d109      	bne.n	319a4 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   31990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31992:	3310      	adds	r3, #16
   31994:	0018      	movs	r0, r3
   31996:	4b56      	ldr	r3, [pc, #344]	; (31af0 <_http_client_handle_header+0x290>)
   31998:	4798      	blx	r3
   3199a:	0001      	movs	r1, r0
   3199c:	687b      	ldr	r3, [r7, #4]
   3199e:	22dc      	movs	r2, #220	; 0xdc
   319a0:	5099      	str	r1, [r3, r2]
   319a2:	e08b      	b.n	31abc <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   319a4:	4953      	ldr	r1, [pc, #332]	; (31af4 <_http_client_handle_header+0x294>)
   319a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   319a8:	2213      	movs	r2, #19
   319aa:	0018      	movs	r0, r3
   319ac:	4b4e      	ldr	r3, [pc, #312]	; (31ae8 <_http_client_handle_header+0x288>)
   319ae:	4798      	blx	r3
   319b0:	1e03      	subs	r3, r0, #0
   319b2:	d127      	bne.n	31a04 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   319b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   319b6:	3313      	adds	r3, #19
   319b8:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   319ba:	e01e      	b.n	319fa <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   319bc:	6a3b      	ldr	r3, [r7, #32]
   319be:	781b      	ldrb	r3, [r3, #0]
   319c0:	2b20      	cmp	r3, #32
   319c2:	d103      	bne.n	319cc <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   319c4:	6a3b      	ldr	r3, [r7, #32]
   319c6:	3301      	adds	r3, #1
   319c8:	623b      	str	r3, [r7, #32]
   319ca:	e016      	b.n	319fa <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   319cc:	6a3b      	ldr	r3, [r7, #32]
   319ce:	781b      	ldrb	r3, [r3, #0]
   319d0:	2b43      	cmp	r3, #67	; 0x43
   319d2:	d003      	beq.n	319dc <_http_client_handle_header+0x17c>
   319d4:	6a3b      	ldr	r3, [r7, #32]
   319d6:	781b      	ldrb	r3, [r3, #0]
   319d8:	2b63      	cmp	r3, #99	; 0x63
   319da:	d105      	bne.n	319e8 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   319dc:	687b      	ldr	r3, [r7, #4]
   319de:	21cc      	movs	r1, #204	; 0xcc
   319e0:	2201      	movs	r2, #1
   319e2:	4252      	negs	r2, r2
   319e4:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   319e6:	e069      	b.n	31abc <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   319e8:	2386      	movs	r3, #134	; 0x86
   319ea:	425a      	negs	r2, r3
   319ec:	687b      	ldr	r3, [r7, #4]
   319ee:	0011      	movs	r1, r2
   319f0:	0018      	movs	r0, r3
   319f2:	4b41      	ldr	r3, [pc, #260]	; (31af8 <_http_client_handle_header+0x298>)
   319f4:	4798      	blx	r3
					return 0;
   319f6:	2300      	movs	r3, #0
   319f8:	e06a      	b.n	31ad0 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   319fa:	69ba      	ldr	r2, [r7, #24]
   319fc:	6a3b      	ldr	r3, [r7, #32]
   319fe:	429a      	cmp	r2, r3
   31a00:	d8dc      	bhi.n	319bc <_http_client_handle_header+0x15c>
   31a02:	e05b      	b.n	31abc <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   31a04:	493d      	ldr	r1, [pc, #244]	; (31afc <_http_client_handle_header+0x29c>)
   31a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a08:	220c      	movs	r2, #12
   31a0a:	0018      	movs	r0, r3
   31a0c:	4b36      	ldr	r3, [pc, #216]	; (31ae8 <_http_client_handle_header+0x288>)
   31a0e:	4798      	blx	r3
   31a10:	1e03      	subs	r3, r0, #0
   31a12:	d126      	bne.n	31a62 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   31a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a16:	330c      	adds	r3, #12
   31a18:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31a1a:	e01d      	b.n	31a58 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   31a1c:	69fb      	ldr	r3, [r7, #28]
   31a1e:	781b      	ldrb	r3, [r3, #0]
   31a20:	2b20      	cmp	r3, #32
   31a22:	d103      	bne.n	31a2c <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31a24:	69fb      	ldr	r3, [r7, #28]
   31a26:	3301      	adds	r3, #1
   31a28:	61fb      	str	r3, [r7, #28]
   31a2a:	e015      	b.n	31a58 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   31a2c:	69fb      	ldr	r3, [r7, #28]
   31a2e:	781b      	ldrb	r3, [r3, #0]
   31a30:	2b4b      	cmp	r3, #75	; 0x4b
   31a32:	d003      	beq.n	31a3c <_http_client_handle_header+0x1dc>
   31a34:	69fb      	ldr	r3, [r7, #28]
   31a36:	781b      	ldrb	r3, [r3, #0]
   31a38:	2b6b      	cmp	r3, #107	; 0x6b
   31a3a:	d106      	bne.n	31a4a <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   31a3c:	687b      	ldr	r3, [r7, #4]
   31a3e:	2241      	movs	r2, #65	; 0x41
   31a40:	5c99      	ldrb	r1, [r3, r2]
   31a42:	2002      	movs	r0, #2
   31a44:	4301      	orrs	r1, r0
   31a46:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   31a48:	e038      	b.n	31abc <_http_client_handle_header+0x25c>
					module->permanent = 0;
   31a4a:	687b      	ldr	r3, [r7, #4]
   31a4c:	2241      	movs	r2, #65	; 0x41
   31a4e:	5c99      	ldrb	r1, [r3, r2]
   31a50:	2002      	movs	r0, #2
   31a52:	4381      	bics	r1, r0
   31a54:	5499      	strb	r1, [r3, r2]
				break;
   31a56:	e031      	b.n	31abc <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31a58:	69ba      	ldr	r2, [r7, #24]
   31a5a:	69fb      	ldr	r3, [r7, #28]
   31a5c:	429a      	cmp	r2, r3
   31a5e:	d8dd      	bhi.n	31a1c <_http_client_handle_header+0x1bc>
   31a60:	e02c      	b.n	31abc <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   31a62:	4927      	ldr	r1, [pc, #156]	; (31b00 <_http_client_handle_header+0x2a0>)
   31a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a66:	2205      	movs	r2, #5
   31a68:	0018      	movs	r0, r3
   31a6a:	4b1f      	ldr	r3, [pc, #124]	; (31ae8 <_http_client_handle_header+0x288>)
   31a6c:	4798      	blx	r3
   31a6e:	1e03      	subs	r3, r0, #0
   31a70:	d124      	bne.n	31abc <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   31a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a74:	3309      	adds	r3, #9
   31a76:	0018      	movs	r0, r3
   31a78:	4b1d      	ldr	r3, [pc, #116]	; (31af0 <_http_client_handle_header+0x290>)
   31a7a:	4798      	blx	r3
   31a7c:	0003      	movs	r3, r0
   31a7e:	b299      	uxth	r1, r3
   31a80:	687b      	ldr	r3, [r7, #4]
   31a82:	22e4      	movs	r2, #228	; 0xe4
   31a84:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   31a86:	687b      	ldr	r3, [r7, #4]
   31a88:	22dc      	movs	r2, #220	; 0xdc
   31a8a:	2100      	movs	r1, #0
   31a8c:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   31a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a90:	3305      	adds	r3, #5
   31a92:	781b      	ldrb	r3, [r3, #0]
   31a94:	2b31      	cmp	r3, #49	; 0x31
   31a96:	d804      	bhi.n	31aa2 <_http_client_handle_header+0x242>
   31a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a9a:	3307      	adds	r3, #7
   31a9c:	781b      	ldrb	r3, [r3, #0]
   31a9e:	2b30      	cmp	r3, #48	; 0x30
   31aa0:	d906      	bls.n	31ab0 <_http_client_handle_header+0x250>
				module->permanent = 1;
   31aa2:	687b      	ldr	r3, [r7, #4]
   31aa4:	2241      	movs	r2, #65	; 0x41
   31aa6:	5c99      	ldrb	r1, [r3, r2]
   31aa8:	2002      	movs	r0, #2
   31aaa:	4301      	orrs	r1, r0
   31aac:	5499      	strb	r1, [r3, r2]
   31aae:	e005      	b.n	31abc <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   31ab0:	687b      	ldr	r3, [r7, #4]
   31ab2:	2241      	movs	r2, #65	; 0x41
   31ab4:	5c99      	ldrb	r1, [r3, r2]
   31ab6:	2002      	movs	r0, #2
   31ab8:	4381      	bics	r1, r0
   31aba:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   31abc:	4b06      	ldr	r3, [pc, #24]	; (31ad8 <_http_client_handle_header+0x278>)
   31abe:	681b      	ldr	r3, [r3, #0]
   31ac0:	0018      	movs	r0, r3
   31ac2:	4b08      	ldr	r3, [pc, #32]	; (31ae4 <_http_client_handle_header+0x284>)
   31ac4:	4798      	blx	r3
   31ac6:	0002      	movs	r2, r0
   31ac8:	69bb      	ldr	r3, [r7, #24]
   31aca:	189b      	adds	r3, r3, r2
   31acc:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   31ace:	e6ce      	b.n	3186e <_http_client_handle_header+0xe>
	}
}
   31ad0:	0018      	movs	r0, r3
   31ad2:	46bd      	mov	sp, r7
   31ad4:	b00b      	add	sp, #44	; 0x2c
   31ad6:	bd90      	pop	{r4, r7, pc}
   31ad8:	20000120 	.word	0x20000120
   31adc:	00034a65 	.word	0x00034a65
   31ae0:	00031ec5 	.word	0x00031ec5
   31ae4:	000349e7 	.word	0x000349e7
   31ae8:	000349f5 	.word	0x000349f5
   31aec:	000399a4 	.word	0x000399a4
   31af0:	0003457d 	.word	0x0003457d
   31af4:	000399c8 	.word	0x000399c8
   31af8:	00030edd 	.word	0x00030edd
   31afc:	000399dc 	.word	0x000399dc
   31b00:	000399ec 	.word	0x000399ec

00031b04 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   31b04:	b580      	push	{r7, lr}
   31b06:	b088      	sub	sp, #32
   31b08:	af00      	add	r7, sp, #0
   31b0a:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   31b0c:	687b      	ldr	r3, [r7, #4]
   31b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31b10:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   31b12:	2300      	movs	r3, #0
   31b14:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   31b16:	687b      	ldr	r3, [r7, #4]
   31b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31b1a:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   31b1c:	687b      	ldr	r3, [r7, #4]
   31b1e:	22e0      	movs	r2, #224	; 0xe0
   31b20:	589b      	ldr	r3, [r3, r2]
   31b22:	2b00      	cmp	r3, #0
   31b24:	db71      	blt.n	31c0a <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   31b26:	687b      	ldr	r3, [r7, #4]
   31b28:	22e0      	movs	r2, #224	; 0xe0
   31b2a:	589b      	ldr	r3, [r3, r2]
   31b2c:	2b00      	cmp	r3, #0
   31b2e:	d134      	bne.n	31b9a <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   31b30:	687b      	ldr	r3, [r7, #4]
   31b32:	22d8      	movs	r2, #216	; 0xd8
   31b34:	2100      	movs	r1, #0
   31b36:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   31b38:	687b      	ldr	r3, [r7, #4]
   31b3a:	22e4      	movs	r2, #228	; 0xe4
   31b3c:	2100      	movs	r1, #0
   31b3e:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   31b40:	2308      	movs	r3, #8
   31b42:	18fb      	adds	r3, r7, r3
   31b44:	2201      	movs	r2, #1
   31b46:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   31b48:	2308      	movs	r3, #8
   31b4a:	18fb      	adds	r3, r7, r3
   31b4c:	2200      	movs	r2, #0
   31b4e:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   31b50:	2308      	movs	r3, #8
   31b52:	18fb      	adds	r3, r7, r3
   31b54:	2200      	movs	r2, #0
   31b56:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   31b58:	687b      	ldr	r3, [r7, #4]
   31b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31b5c:	2b00      	cmp	r3, #0
   31b5e:	d006      	beq.n	31b6e <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   31b60:	687b      	ldr	r3, [r7, #4]
   31b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31b64:	2208      	movs	r2, #8
   31b66:	18ba      	adds	r2, r7, r2
   31b68:	6878      	ldr	r0, [r7, #4]
   31b6a:	2103      	movs	r1, #3
   31b6c:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   31b6e:	687b      	ldr	r3, [r7, #4]
   31b70:	2241      	movs	r2, #65	; 0x41
   31b72:	5c9b      	ldrb	r3, [r3, r2]
   31b74:	2202      	movs	r2, #2
   31b76:	4013      	ands	r3, r2
   31b78:	b2db      	uxtb	r3, r3
   31b7a:	2b00      	cmp	r3, #0
   31b7c:	d105      	bne.n	31b8a <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   31b7e:	687b      	ldr	r3, [r7, #4]
   31b80:	2100      	movs	r1, #0
   31b82:	0018      	movs	r0, r3
   31b84:	4b62      	ldr	r3, [pc, #392]	; (31d10 <_http_client_read_chuked_entity+0x20c>)
   31b86:	4798      	blx	r3
					return;
   31b88:	e0bf      	b.n	31d0a <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   31b8a:	697b      	ldr	r3, [r7, #20]
   31b8c:	1c9a      	adds	r2, r3, #2
   31b8e:	687b      	ldr	r3, [r7, #4]
   31b90:	0011      	movs	r1, r2
   31b92:	0018      	movs	r0, r3
   31b94:	4b5f      	ldr	r3, [pc, #380]	; (31d14 <_http_client_read_chuked_entity+0x210>)
   31b96:	4798      	blx	r3
   31b98:	e0b2      	b.n	31d00 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   31b9a:	687b      	ldr	r3, [r7, #4]
   31b9c:	22e0      	movs	r2, #224	; 0xe0
   31b9e:	589a      	ldr	r2, [r3, r2]
   31ba0:	69fb      	ldr	r3, [r7, #28]
   31ba2:	429a      	cmp	r2, r3
   31ba4:	dd00      	ble.n	31ba8 <_http_client_read_chuked_entity+0xa4>
   31ba6:	e0ab      	b.n	31d00 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   31ba8:	687b      	ldr	r3, [r7, #4]
   31baa:	22e0      	movs	r2, #224	; 0xe0
   31bac:	589b      	ldr	r3, [r3, r2]
   31bae:	001a      	movs	r2, r3
   31bb0:	2308      	movs	r3, #8
   31bb2:	18fb      	adds	r3, r7, r3
   31bb4:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   31bb6:	2308      	movs	r3, #8
   31bb8:	18fb      	adds	r3, r7, r3
   31bba:	697a      	ldr	r2, [r7, #20]
   31bbc:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   31bbe:	2308      	movs	r3, #8
   31bc0:	18fb      	adds	r3, r7, r3
   31bc2:	2200      	movs	r2, #0
   31bc4:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   31bc6:	687b      	ldr	r3, [r7, #4]
   31bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31bca:	2b00      	cmp	r3, #0
   31bcc:	d006      	beq.n	31bdc <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   31bce:	687b      	ldr	r3, [r7, #4]
   31bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31bd2:	2208      	movs	r2, #8
   31bd4:	18ba      	adds	r2, r7, r2
   31bd6:	6878      	ldr	r0, [r7, #4]
   31bd8:	2103      	movs	r1, #3
   31bda:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   31bdc:	687b      	ldr	r3, [r7, #4]
   31bde:	22e0      	movs	r2, #224	; 0xe0
   31be0:	589b      	ldr	r3, [r3, r2]
   31be2:	3302      	adds	r3, #2
   31be4:	697a      	ldr	r2, [r7, #20]
   31be6:	18d2      	adds	r2, r2, r3
   31be8:	687b      	ldr	r3, [r7, #4]
   31bea:	0011      	movs	r1, r2
   31bec:	0018      	movs	r0, r3
   31bee:	4b49      	ldr	r3, [pc, #292]	; (31d14 <_http_client_read_chuked_entity+0x210>)
   31bf0:	4798      	blx	r3
				length = (int)module->recved_size;
   31bf2:	687b      	ldr	r3, [r7, #4]
   31bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31bf6:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   31bf8:	687b      	ldr	r3, [r7, #4]
   31bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31bfc:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   31bfe:	687b      	ldr	r3, [r7, #4]
   31c00:	21e0      	movs	r1, #224	; 0xe0
   31c02:	2201      	movs	r2, #1
   31c04:	4252      	negs	r2, r2
   31c06:	505a      	str	r2, [r3, r1]
   31c08:	e07a      	b.n	31d00 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   31c0a:	687b      	ldr	r3, [r7, #4]
   31c0c:	22e0      	movs	r2, #224	; 0xe0
   31c0e:	2100      	movs	r1, #0
   31c10:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   31c12:	e05a      	b.n	31cca <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   31c14:	697b      	ldr	r3, [r7, #20]
   31c16:	781b      	ldrb	r3, [r3, #0]
   31c18:	2b0a      	cmp	r3, #10
   31c1a:	d106      	bne.n	31c2a <_http_client_read_chuked_entity+0x126>
					buffer++;
   31c1c:	697b      	ldr	r3, [r7, #20]
   31c1e:	3301      	adds	r3, #1
   31c20:	617b      	str	r3, [r7, #20]
					length--;
   31c22:	69fb      	ldr	r3, [r7, #28]
   31c24:	3b01      	subs	r3, #1
   31c26:	61fb      	str	r3, [r7, #28]
					break;
   31c28:	e052      	b.n	31cd0 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   31c2a:	69bb      	ldr	r3, [r7, #24]
   31c2c:	2b00      	cmp	r3, #0
   31c2e:	d145      	bne.n	31cbc <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   31c30:	697b      	ldr	r3, [r7, #20]
   31c32:	781b      	ldrb	r3, [r3, #0]
   31c34:	2b2f      	cmp	r3, #47	; 0x2f
   31c36:	d910      	bls.n	31c5a <_http_client_read_chuked_entity+0x156>
   31c38:	697b      	ldr	r3, [r7, #20]
   31c3a:	781b      	ldrb	r3, [r3, #0]
   31c3c:	2b39      	cmp	r3, #57	; 0x39
   31c3e:	d80c      	bhi.n	31c5a <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   31c40:	687b      	ldr	r3, [r7, #4]
   31c42:	22e0      	movs	r2, #224	; 0xe0
   31c44:	589b      	ldr	r3, [r3, r2]
   31c46:	011b      	lsls	r3, r3, #4
   31c48:	697a      	ldr	r2, [r7, #20]
   31c4a:	7812      	ldrb	r2, [r2, #0]
   31c4c:	189b      	adds	r3, r3, r2
   31c4e:	3b30      	subs	r3, #48	; 0x30
   31c50:	001a      	movs	r2, r3
   31c52:	687b      	ldr	r3, [r7, #4]
   31c54:	21e0      	movs	r1, #224	; 0xe0
   31c56:	505a      	str	r2, [r3, r1]
   31c58:	e031      	b.n	31cbe <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   31c5a:	697b      	ldr	r3, [r7, #20]
   31c5c:	781b      	ldrb	r3, [r3, #0]
   31c5e:	2b60      	cmp	r3, #96	; 0x60
   31c60:	d910      	bls.n	31c84 <_http_client_read_chuked_entity+0x180>
   31c62:	697b      	ldr	r3, [r7, #20]
   31c64:	781b      	ldrb	r3, [r3, #0]
   31c66:	2b66      	cmp	r3, #102	; 0x66
   31c68:	d80c      	bhi.n	31c84 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   31c6a:	687b      	ldr	r3, [r7, #4]
   31c6c:	22e0      	movs	r2, #224	; 0xe0
   31c6e:	589b      	ldr	r3, [r3, r2]
   31c70:	011b      	lsls	r3, r3, #4
   31c72:	697a      	ldr	r2, [r7, #20]
   31c74:	7812      	ldrb	r2, [r2, #0]
   31c76:	189b      	adds	r3, r3, r2
   31c78:	3b61      	subs	r3, #97	; 0x61
   31c7a:	001a      	movs	r2, r3
   31c7c:	687b      	ldr	r3, [r7, #4]
   31c7e:	21e0      	movs	r1, #224	; 0xe0
   31c80:	505a      	str	r2, [r3, r1]
   31c82:	e01c      	b.n	31cbe <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   31c84:	697b      	ldr	r3, [r7, #20]
   31c86:	781b      	ldrb	r3, [r3, #0]
   31c88:	2b40      	cmp	r3, #64	; 0x40
   31c8a:	d910      	bls.n	31cae <_http_client_read_chuked_entity+0x1aa>
   31c8c:	697b      	ldr	r3, [r7, #20]
   31c8e:	781b      	ldrb	r3, [r3, #0]
   31c90:	2b46      	cmp	r3, #70	; 0x46
   31c92:	d80c      	bhi.n	31cae <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   31c94:	687b      	ldr	r3, [r7, #4]
   31c96:	22e0      	movs	r2, #224	; 0xe0
   31c98:	589b      	ldr	r3, [r3, r2]
   31c9a:	011b      	lsls	r3, r3, #4
   31c9c:	697a      	ldr	r2, [r7, #20]
   31c9e:	7812      	ldrb	r2, [r2, #0]
   31ca0:	189b      	adds	r3, r3, r2
   31ca2:	3b41      	subs	r3, #65	; 0x41
   31ca4:	001a      	movs	r2, r3
   31ca6:	687b      	ldr	r3, [r7, #4]
   31ca8:	21e0      	movs	r1, #224	; 0xe0
   31caa:	505a      	str	r2, [r3, r1]
   31cac:	e007      	b.n	31cbe <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   31cae:	697b      	ldr	r3, [r7, #20]
   31cb0:	781b      	ldrb	r3, [r3, #0]
   31cb2:	2b3b      	cmp	r3, #59	; 0x3b
   31cb4:	d103      	bne.n	31cbe <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   31cb6:	2301      	movs	r3, #1
   31cb8:	61bb      	str	r3, [r7, #24]
   31cba:	e000      	b.n	31cbe <_http_client_read_chuked_entity+0x1ba>
					continue;
   31cbc:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   31cbe:	697b      	ldr	r3, [r7, #20]
   31cc0:	3301      	adds	r3, #1
   31cc2:	617b      	str	r3, [r7, #20]
   31cc4:	69fb      	ldr	r3, [r7, #28]
   31cc6:	3b01      	subs	r3, #1
   31cc8:	61fb      	str	r3, [r7, #28]
   31cca:	69fb      	ldr	r3, [r7, #28]
   31ccc:	2b00      	cmp	r3, #0
   31cce:	dca1      	bgt.n	31c14 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   31cd0:	687b      	ldr	r3, [r7, #4]
   31cd2:	22e0      	movs	r2, #224	; 0xe0
   31cd4:	589a      	ldr	r2, [r3, r2]
   31cd6:	687b      	ldr	r3, [r7, #4]
   31cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31cda:	429a      	cmp	r2, r3
   31cdc:	dd07      	ble.n	31cee <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   31cde:	238b      	movs	r3, #139	; 0x8b
   31ce0:	425a      	negs	r2, r3
   31ce2:	687b      	ldr	r3, [r7, #4]
   31ce4:	0011      	movs	r1, r2
   31ce6:	0018      	movs	r0, r3
   31ce8:	4b09      	ldr	r3, [pc, #36]	; (31d10 <_http_client_read_chuked_entity+0x20c>)
   31cea:	4798      	blx	r3
				return;
   31cec:	e00d      	b.n	31d0a <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   31cee:	69fb      	ldr	r3, [r7, #28]
   31cf0:	2b00      	cmp	r3, #0
   31cf2:	d105      	bne.n	31d00 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   31cf4:	687b      	ldr	r3, [r7, #4]
   31cf6:	21e0      	movs	r1, #224	; 0xe0
   31cf8:	2201      	movs	r2, #1
   31cfa:	4252      	negs	r2, r2
   31cfc:	505a      	str	r2, [r3, r1]
				return;
   31cfe:	e004      	b.n	31d0a <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   31d00:	687b      	ldr	r3, [r7, #4]
   31d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31d04:	2b00      	cmp	r3, #0
   31d06:	d000      	beq.n	31d0a <_http_client_read_chuked_entity+0x206>
   31d08:	e708      	b.n	31b1c <_http_client_read_chuked_entity+0x18>
}
   31d0a:	46bd      	mov	sp, r7
   31d0c:	b008      	add	sp, #32
   31d0e:	bd80      	pop	{r7, pc}
   31d10:	00030edd 	.word	0x00030edd
   31d14:	00031ec5 	.word	0x00031ec5

00031d18 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   31d18:	b580      	push	{r7, lr}
   31d1a:	b086      	sub	sp, #24
   31d1c:	af00      	add	r7, sp, #0
   31d1e:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   31d20:	687b      	ldr	r3, [r7, #4]
   31d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31d24:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   31d26:	687b      	ldr	r3, [r7, #4]
   31d28:	22dc      	movs	r2, #220	; 0xdc
   31d2a:	589b      	ldr	r3, [r3, r2]
   31d2c:	2b00      	cmp	r3, #0
   31d2e:	db58      	blt.n	31de2 <_http_client_handle_entity+0xca>
   31d30:	687b      	ldr	r3, [r7, #4]
   31d32:	22dc      	movs	r2, #220	; 0xdc
   31d34:	589a      	ldr	r2, [r3, r2]
   31d36:	687b      	ldr	r3, [r7, #4]
   31d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31d3a:	429a      	cmp	r2, r3
   31d3c:	dc51      	bgt.n	31de2 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   31d3e:	687b      	ldr	r3, [r7, #4]
   31d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31d42:	0019      	movs	r1, r3
   31d44:	687b      	ldr	r3, [r7, #4]
   31d46:	22dc      	movs	r2, #220	; 0xdc
   31d48:	589b      	ldr	r3, [r3, r2]
   31d4a:	4299      	cmp	r1, r3
   31d4c:	da00      	bge.n	31d50 <_http_client_handle_entity+0x38>
   31d4e:	e0a9      	b.n	31ea4 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   31d50:	687b      	ldr	r3, [r7, #4]
   31d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31d54:	2b00      	cmp	r3, #0
   31d56:	d020      	beq.n	31d9a <_http_client_handle_entity+0x82>
   31d58:	687b      	ldr	r3, [r7, #4]
   31d5a:	22e4      	movs	r2, #228	; 0xe4
   31d5c:	5a9b      	ldrh	r3, [r3, r2]
   31d5e:	2b00      	cmp	r3, #0
   31d60:	d01b      	beq.n	31d9a <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   31d62:	687b      	ldr	r3, [r7, #4]
   31d64:	22e4      	movs	r2, #228	; 0xe4
   31d66:	5a9a      	ldrh	r2, [r3, r2]
   31d68:	2308      	movs	r3, #8
   31d6a:	18fb      	adds	r3, r7, r3
   31d6c:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   31d6e:	2308      	movs	r3, #8
   31d70:	18fb      	adds	r3, r7, r3
   31d72:	2200      	movs	r2, #0
   31d74:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   31d76:	687b      	ldr	r3, [r7, #4]
   31d78:	22dc      	movs	r2, #220	; 0xdc
   31d7a:	589b      	ldr	r3, [r3, r2]
   31d7c:	001a      	movs	r2, r3
   31d7e:	2308      	movs	r3, #8
   31d80:	18fb      	adds	r3, r7, r3
   31d82:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   31d84:	2308      	movs	r3, #8
   31d86:	18fb      	adds	r3, r7, r3
   31d88:	697a      	ldr	r2, [r7, #20]
   31d8a:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   31d8c:	687b      	ldr	r3, [r7, #4]
   31d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31d90:	2208      	movs	r2, #8
   31d92:	18ba      	adds	r2, r7, r2
   31d94:	6878      	ldr	r0, [r7, #4]
   31d96:	2102      	movs	r1, #2
   31d98:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   31d9a:	687b      	ldr	r3, [r7, #4]
   31d9c:	22d8      	movs	r2, #216	; 0xd8
   31d9e:	2100      	movs	r1, #0
   31da0:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   31da2:	687b      	ldr	r3, [r7, #4]
   31da4:	22e4      	movs	r2, #228	; 0xe4
   31da6:	2100      	movs	r1, #0
   31da8:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   31daa:	687b      	ldr	r3, [r7, #4]
   31dac:	2241      	movs	r2, #65	; 0x41
   31dae:	5c9b      	ldrb	r3, [r3, r2]
   31db0:	2202      	movs	r2, #2
   31db2:	4013      	ands	r3, r2
   31db4:	b2db      	uxtb	r3, r3
   31db6:	2b00      	cmp	r3, #0
   31db8:	d105      	bne.n	31dc6 <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   31dba:	687b      	ldr	r3, [r7, #4]
   31dbc:	2100      	movs	r1, #0
   31dbe:	0018      	movs	r0, r3
   31dc0:	4b3b      	ldr	r3, [pc, #236]	; (31eb0 <_http_client_handle_entity+0x198>)
   31dc2:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   31dc4:	e06e      	b.n	31ea4 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   31dc6:	687b      	ldr	r3, [r7, #4]
   31dc8:	22dc      	movs	r2, #220	; 0xdc
   31dca:	589b      	ldr	r3, [r3, r2]
   31dcc:	001a      	movs	r2, r3
   31dce:	697b      	ldr	r3, [r7, #20]
   31dd0:	189a      	adds	r2, r3, r2
   31dd2:	687b      	ldr	r3, [r7, #4]
   31dd4:	0011      	movs	r1, r2
   31dd6:	0018      	movs	r0, r3
   31dd8:	4b36      	ldr	r3, [pc, #216]	; (31eb4 <_http_client_handle_entity+0x19c>)
   31dda:	4798      	blx	r3
				return module->recved_size;
   31ddc:	687b      	ldr	r3, [r7, #4]
   31dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31de0:	e061      	b.n	31ea6 <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   31de2:	687b      	ldr	r3, [r7, #4]
   31de4:	22dc      	movs	r2, #220	; 0xdc
   31de6:	589b      	ldr	r3, [r3, r2]
   31de8:	2b00      	cmp	r3, #0
   31dea:	db57      	blt.n	31e9c <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   31dec:	687b      	ldr	r3, [r7, #4]
   31dee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   31df0:	2308      	movs	r3, #8
   31df2:	18fb      	adds	r3, r7, r3
   31df4:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   31df6:	2308      	movs	r3, #8
   31df8:	18fb      	adds	r3, r7, r3
   31dfa:	697a      	ldr	r2, [r7, #20]
   31dfc:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   31dfe:	687b      	ldr	r3, [r7, #4]
   31e00:	22e0      	movs	r2, #224	; 0xe0
   31e02:	589a      	ldr	r2, [r3, r2]
   31e04:	687b      	ldr	r3, [r7, #4]
   31e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31e08:	18d2      	adds	r2, r2, r3
   31e0a:	687b      	ldr	r3, [r7, #4]
   31e0c:	21e0      	movs	r1, #224	; 0xe0
   31e0e:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   31e10:	687b      	ldr	r3, [r7, #4]
   31e12:	22dc      	movs	r2, #220	; 0xdc
   31e14:	589a      	ldr	r2, [r3, r2]
   31e16:	687b      	ldr	r3, [r7, #4]
   31e18:	21e0      	movs	r1, #224	; 0xe0
   31e1a:	585b      	ldr	r3, [r3, r1]
   31e1c:	429a      	cmp	r2, r3
   31e1e:	dc0c      	bgt.n	31e3a <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   31e20:	687b      	ldr	r3, [r7, #4]
   31e22:	22d8      	movs	r2, #216	; 0xd8
   31e24:	2100      	movs	r1, #0
   31e26:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   31e28:	687b      	ldr	r3, [r7, #4]
   31e2a:	22e4      	movs	r2, #228	; 0xe4
   31e2c:	2100      	movs	r1, #0
   31e2e:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   31e30:	2308      	movs	r3, #8
   31e32:	18fb      	adds	r3, r7, r3
   31e34:	2201      	movs	r2, #1
   31e36:	721a      	strb	r2, [r3, #8]
   31e38:	e003      	b.n	31e42 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   31e3a:	2308      	movs	r3, #8
   31e3c:	18fb      	adds	r3, r7, r3
   31e3e:	2200      	movs	r2, #0
   31e40:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   31e42:	687b      	ldr	r3, [r7, #4]
   31e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31e46:	2b00      	cmp	r3, #0
   31e48:	d006      	beq.n	31e58 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   31e4a:	687b      	ldr	r3, [r7, #4]
   31e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31e4e:	2208      	movs	r2, #8
   31e50:	18ba      	adds	r2, r7, r2
   31e52:	6878      	ldr	r0, [r7, #4]
   31e54:	2103      	movs	r1, #3
   31e56:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   31e58:	2308      	movs	r3, #8
   31e5a:	18fb      	adds	r3, r7, r3
   31e5c:	7a1b      	ldrb	r3, [r3, #8]
   31e5e:	2b01      	cmp	r3, #1
   31e60:	d112      	bne.n	31e88 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   31e62:	687b      	ldr	r3, [r7, #4]
   31e64:	2241      	movs	r2, #65	; 0x41
   31e66:	5c9b      	ldrb	r3, [r3, r2]
   31e68:	2202      	movs	r2, #2
   31e6a:	4013      	ands	r3, r2
   31e6c:	b2db      	uxtb	r3, r3
   31e6e:	2b00      	cmp	r3, #0
   31e70:	d10a      	bne.n	31e88 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   31e72:	4b11      	ldr	r3, [pc, #68]	; (31eb8 <_http_client_handle_entity+0x1a0>)
   31e74:	0018      	movs	r0, r3
   31e76:	4b11      	ldr	r3, [pc, #68]	; (31ebc <_http_client_handle_entity+0x1a4>)
   31e78:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   31e7a:	687b      	ldr	r3, [r7, #4]
   31e7c:	2100      	movs	r1, #0
   31e7e:	0018      	movs	r0, r3
   31e80:	4b0b      	ldr	r3, [pc, #44]	; (31eb0 <_http_client_handle_entity+0x198>)
   31e82:	4798      	blx	r3
					return 0;
   31e84:	2300      	movs	r3, #0
   31e86:	e00e      	b.n	31ea6 <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   31e88:	687b      	ldr	r3, [r7, #4]
   31e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31e8c:	697a      	ldr	r2, [r7, #20]
   31e8e:	18d2      	adds	r2, r2, r3
   31e90:	687b      	ldr	r3, [r7, #4]
   31e92:	0011      	movs	r1, r2
   31e94:	0018      	movs	r0, r3
   31e96:	4b07      	ldr	r3, [pc, #28]	; (31eb4 <_http_client_handle_entity+0x19c>)
   31e98:	4798      	blx	r3
   31e9a:	e003      	b.n	31ea4 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   31e9c:	687b      	ldr	r3, [r7, #4]
   31e9e:	0018      	movs	r0, r3
   31ea0:	4b07      	ldr	r3, [pc, #28]	; (31ec0 <_http_client_handle_entity+0x1a8>)
   31ea2:	4798      	blx	r3
		}
	}

	return 0;
   31ea4:	2300      	movs	r3, #0
}
   31ea6:	0018      	movs	r0, r3
   31ea8:	46bd      	mov	sp, r7
   31eaa:	b006      	add	sp, #24
   31eac:	bd80      	pop	{r7, pc}
   31eae:	46c0      	nop			; (mov r8, r8)
   31eb0:	00030edd 	.word	0x00030edd
   31eb4:	00031ec5 	.word	0x00031ec5
   31eb8:	000399f4 	.word	0x000399f4
   31ebc:	00034851 	.word	0x00034851
   31ec0:	00031b05 	.word	0x00031b05

00031ec4 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   31ec4:	b580      	push	{r7, lr}
   31ec6:	b084      	sub	sp, #16
   31ec8:	af00      	add	r7, sp, #0
   31eca:	6078      	str	r0, [r7, #4]
   31ecc:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   31ece:	687b      	ldr	r3, [r7, #4]
   31ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31ed2:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   31ed4:	687b      	ldr	r3, [r7, #4]
   31ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31ed8:	001a      	movs	r2, r3
   31eda:	683b      	ldr	r3, [r7, #0]
   31edc:	1ad2      	subs	r2, r2, r3
   31ede:	68fb      	ldr	r3, [r7, #12]
   31ee0:	18d3      	adds	r3, r2, r3
   31ee2:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   31ee4:	68bb      	ldr	r3, [r7, #8]
   31ee6:	2b00      	cmp	r3, #0
   31ee8:	dd09      	ble.n	31efe <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   31eea:	68ba      	ldr	r2, [r7, #8]
   31eec:	6839      	ldr	r1, [r7, #0]
   31eee:	68fb      	ldr	r3, [r7, #12]
   31ef0:	0018      	movs	r0, r3
   31ef2:	4b06      	ldr	r3, [pc, #24]	; (31f0c <_http_client_move_buffer+0x48>)
   31ef4:	4798      	blx	r3
		module->recved_size = remain;
   31ef6:	68ba      	ldr	r2, [r7, #8]
   31ef8:	687b      	ldr	r3, [r7, #4]
   31efa:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   31efc:	e002      	b.n	31f04 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   31efe:	687b      	ldr	r3, [r7, #4]
   31f00:	2200      	movs	r2, #0
   31f02:	645a      	str	r2, [r3, #68]	; 0x44
}
   31f04:	46c0      	nop			; (mov r8, r8)
   31f06:	46bd      	mov	sp, r7
   31f08:	b004      	add	sp, #16
   31f0a:	bd80      	pop	{r7, pc}
   31f0c:	0003460b 	.word	0x0003460b

00031f10 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   31f10:	b580      	push	{r7, lr}
   31f12:	b084      	sub	sp, #16
   31f14:	af00      	add	r7, sp, #0
   31f16:	60f8      	str	r0, [r7, #12]
   31f18:	60b9      	str	r1, [r7, #8]
   31f1a:	607a      	str	r2, [r7, #4]
   31f1c:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   31f1e:	68fb      	ldr	r3, [r7, #12]
   31f20:	687a      	ldr	r2, [r7, #4]
   31f22:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   31f24:	68fb      	ldr	r3, [r7, #12]
   31f26:	68ba      	ldr	r2, [r7, #8]
   31f28:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   31f2a:	68fb      	ldr	r3, [r7, #12]
   31f2c:	2200      	movs	r2, #0
   31f2e:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   31f30:	68fb      	ldr	r3, [r7, #12]
   31f32:	683a      	ldr	r2, [r7, #0]
   31f34:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   31f36:	68fb      	ldr	r3, [r7, #12]
   31f38:	69ba      	ldr	r2, [r7, #24]
   31f3a:	60da      	str	r2, [r3, #12]
}
   31f3c:	46c0      	nop			; (mov r8, r8)
   31f3e:	46bd      	mov	sp, r7
   31f40:	b004      	add	sp, #16
   31f42:	bd80      	pop	{r7, pc}

00031f44 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   31f44:	b580      	push	{r7, lr}
   31f46:	b084      	sub	sp, #16
   31f48:	af00      	add	r7, sp, #0
   31f4a:	6078      	str	r0, [r7, #4]
   31f4c:	000a      	movs	r2, r1
   31f4e:	1cfb      	adds	r3, r7, #3
   31f50:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   31f52:	687b      	ldr	r3, [r7, #4]
   31f54:	681a      	ldr	r2, [r3, #0]
   31f56:	687b      	ldr	r3, [r7, #4]
   31f58:	685b      	ldr	r3, [r3, #4]
   31f5a:	1ad3      	subs	r3, r2, r3
   31f5c:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   31f5e:	68fb      	ldr	r3, [r7, #12]
   31f60:	2b00      	cmp	r3, #0
   31f62:	dc03      	bgt.n	31f6c <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   31f64:	687b      	ldr	r3, [r7, #4]
   31f66:	0018      	movs	r0, r3
   31f68:	4b08      	ldr	r3, [pc, #32]	; (31f8c <stream_writer_send_8+0x48>)
   31f6a:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   31f6c:	687b      	ldr	r3, [r7, #4]
   31f6e:	6919      	ldr	r1, [r3, #16]
   31f70:	687b      	ldr	r3, [r7, #4]
   31f72:	685b      	ldr	r3, [r3, #4]
   31f74:	1c58      	adds	r0, r3, #1
   31f76:	687a      	ldr	r2, [r7, #4]
   31f78:	6050      	str	r0, [r2, #4]
   31f7a:	18cb      	adds	r3, r1, r3
   31f7c:	1cfa      	adds	r2, r7, #3
   31f7e:	7812      	ldrb	r2, [r2, #0]
   31f80:	701a      	strb	r2, [r3, #0]
}
   31f82:	46c0      	nop			; (mov r8, r8)
   31f84:	46bd      	mov	sp, r7
   31f86:	b004      	add	sp, #16
   31f88:	bd80      	pop	{r7, pc}
   31f8a:	46c0      	nop			; (mov r8, r8)
   31f8c:	00031fcd 	.word	0x00031fcd

00031f90 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   31f90:	b580      	push	{r7, lr}
   31f92:	b084      	sub	sp, #16
   31f94:	af00      	add	r7, sp, #0
   31f96:	60f8      	str	r0, [r7, #12]
   31f98:	60b9      	str	r1, [r7, #8]
   31f9a:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   31f9c:	e00d      	b.n	31fba <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   31f9e:	68bb      	ldr	r3, [r7, #8]
   31fa0:	781b      	ldrb	r3, [r3, #0]
   31fa2:	b25a      	sxtb	r2, r3
   31fa4:	68fb      	ldr	r3, [r7, #12]
   31fa6:	0011      	movs	r1, r2
   31fa8:	0018      	movs	r0, r3
   31faa:	4b07      	ldr	r3, [pc, #28]	; (31fc8 <stream_writer_send_buffer+0x38>)
   31fac:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   31fae:	687b      	ldr	r3, [r7, #4]
   31fb0:	3b01      	subs	r3, #1
   31fb2:	607b      	str	r3, [r7, #4]
   31fb4:	68bb      	ldr	r3, [r7, #8]
   31fb6:	3301      	adds	r3, #1
   31fb8:	60bb      	str	r3, [r7, #8]
   31fba:	687b      	ldr	r3, [r7, #4]
   31fbc:	2b00      	cmp	r3, #0
   31fbe:	d1ee      	bne.n	31f9e <stream_writer_send_buffer+0xe>
	}
}
   31fc0:	46c0      	nop			; (mov r8, r8)
   31fc2:	46bd      	mov	sp, r7
   31fc4:	b004      	add	sp, #16
   31fc6:	bd80      	pop	{r7, pc}
   31fc8:	00031f45 	.word	0x00031f45

00031fcc <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   31fcc:	b590      	push	{r4, r7, lr}
   31fce:	b083      	sub	sp, #12
   31fd0:	af00      	add	r7, sp, #0
   31fd2:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   31fd4:	687b      	ldr	r3, [r7, #4]
   31fd6:	685b      	ldr	r3, [r3, #4]
   31fd8:	2b00      	cmp	r3, #0
   31fda:	d00c      	beq.n	31ff6 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   31fdc:	687b      	ldr	r3, [r7, #4]
   31fde:	689c      	ldr	r4, [r3, #8]
   31fe0:	687b      	ldr	r3, [r7, #4]
   31fe2:	68d8      	ldr	r0, [r3, #12]
   31fe4:	687b      	ldr	r3, [r7, #4]
   31fe6:	6919      	ldr	r1, [r3, #16]
   31fe8:	687b      	ldr	r3, [r7, #4]
   31fea:	685b      	ldr	r3, [r3, #4]
   31fec:	001a      	movs	r2, r3
   31fee:	47a0      	blx	r4
		writer->written = 0;
   31ff0:	687b      	ldr	r3, [r7, #4]
   31ff2:	2200      	movs	r2, #0
   31ff4:	605a      	str	r2, [r3, #4]
	}
}
   31ff6:	46c0      	nop			; (mov r8, r8)
   31ff8:	46bd      	mov	sp, r7
   31ffa:	b003      	add	sp, #12
   31ffc:	bd90      	pop	{r4, r7, pc}
	...

00032000 <system_cpu_clock_get_hz>:
{
   32000:	b580      	push	{r7, lr}
   32002:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   32004:	2000      	movs	r0, #0
   32006:	4b05      	ldr	r3, [pc, #20]	; (3201c <system_cpu_clock_get_hz+0x1c>)
   32008:	4798      	blx	r3
   3200a:	0002      	movs	r2, r0
   3200c:	4b04      	ldr	r3, [pc, #16]	; (32020 <system_cpu_clock_get_hz+0x20>)
   3200e:	7a1b      	ldrb	r3, [r3, #8]
   32010:	b2db      	uxtb	r3, r3
   32012:	40da      	lsrs	r2, r3
   32014:	0013      	movs	r3, r2
}
   32016:	0018      	movs	r0, r3
   32018:	46bd      	mov	sp, r7
   3201a:	bd80      	pop	{r7, pc}
   3201c:	000299e1 	.word	0x000299e1
   32020:	40000400 	.word	0x40000400

00032024 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   32024:	b580      	push	{r7, lr}
   32026:	b084      	sub	sp, #16
   32028:	af00      	add	r7, sp, #0
   3202a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   3202c:	687b      	ldr	r3, [r7, #4]
   3202e:	681b      	ldr	r3, [r3, #0]
   32030:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   32032:	46c0      	nop			; (mov r8, r8)
   32034:	68fb      	ldr	r3, [r7, #12]
   32036:	689b      	ldr	r3, [r3, #8]
   32038:	2202      	movs	r2, #2
   3203a:	4013      	ands	r3, r2
   3203c:	d1fa      	bne.n	32034 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   3203e:	68fb      	ldr	r3, [r7, #12]
   32040:	681b      	ldr	r3, [r3, #0]
   32042:	2202      	movs	r2, #2
   32044:	431a      	orrs	r2, r3
   32046:	68fb      	ldr	r3, [r7, #12]
   32048:	601a      	str	r2, [r3, #0]
}
   3204a:	46c0      	nop			; (mov r8, r8)
   3204c:	46bd      	mov	sp, r7
   3204e:	b004      	add	sp, #16
   32050:	bd80      	pop	{r7, pc}
	...

00032054 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   32054:	b580      	push	{r7, lr}
   32056:	b082      	sub	sp, #8
   32058:	af00      	add	r7, sp, #0
   3205a:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   3205c:	4b04      	ldr	r3, [pc, #16]	; (32070 <sw_timer_tcc_callback+0x1c>)
   3205e:	681b      	ldr	r3, [r3, #0]
   32060:	1c5a      	adds	r2, r3, #1
   32062:	4b03      	ldr	r3, [pc, #12]	; (32070 <sw_timer_tcc_callback+0x1c>)
   32064:	601a      	str	r2, [r3, #0]
}
   32066:	46c0      	nop			; (mov r8, r8)
   32068:	46bd      	mov	sp, r7
   3206a:	b002      	add	sp, #8
   3206c:	bd80      	pop	{r7, pc}
   3206e:	46c0      	nop			; (mov r8, r8)
   32070:	20004590 	.word	0x20004590

00032074 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   32074:	b580      	push	{r7, lr}
   32076:	b082      	sub	sp, #8
   32078:	af00      	add	r7, sp, #0
   3207a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   3207c:	687b      	ldr	r3, [r7, #4]
   3207e:	2264      	movs	r2, #100	; 0x64
   32080:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   32082:	687b      	ldr	r3, [r7, #4]
   32084:	2200      	movs	r2, #0
   32086:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   32088:	687b      	ldr	r3, [r7, #4]
   3208a:	2200      	movs	r2, #0
   3208c:	705a      	strb	r2, [r3, #1]
}
   3208e:	46c0      	nop			; (mov r8, r8)
   32090:	46bd      	mov	sp, r7
   32092:	b002      	add	sp, #8
   32094:	bd80      	pop	{r7, pc}
	...

00032098 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   32098:	b590      	push	{r4, r7, lr}
   3209a:	b0b1      	sub	sp, #196	; 0xc4
   3209c:	af00      	add	r7, sp, #0
   3209e:	6078      	str	r0, [r7, #4]
   320a0:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   320a2:	230c      	movs	r3, #12
   320a4:	18fb      	adds	r3, r7, r3
   320a6:	4a2e      	ldr	r2, [pc, #184]	; (32160 <sw_timer_init+0xc8>)
   320a8:	ca13      	ldmia	r2!, {r0, r1, r4}
   320aa:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   320ac:	683b      	ldr	r3, [r7, #0]
   320ae:	885b      	ldrh	r3, [r3, #2]
   320b0:	001a      	movs	r2, r3
   320b2:	687b      	ldr	r3, [r7, #4]
   320b4:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   320b6:	687b      	ldr	r3, [r7, #4]
   320b8:	3314      	adds	r3, #20
   320ba:	22bc      	movs	r2, #188	; 0xbc
   320bc:	18ba      	adds	r2, r7, r2
   320be:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   320c0:	683b      	ldr	r3, [r7, #0]
   320c2:	781b      	ldrb	r3, [r3, #0]
   320c4:	001a      	movs	r2, r3
   320c6:	230c      	movs	r3, #12
   320c8:	18fb      	adds	r3, r7, r3
   320ca:	0092      	lsls	r2, r2, #2
   320cc:	58d2      	ldr	r2, [r2, r3]
   320ce:	2318      	movs	r3, #24
   320d0:	18fb      	adds	r3, r7, r3
   320d2:	0011      	movs	r1, r2
   320d4:	0018      	movs	r0, r3
   320d6:	4b23      	ldr	r3, [pc, #140]	; (32164 <sw_timer_init+0xcc>)
   320d8:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   320da:	4b23      	ldr	r3, [pc, #140]	; (32168 <sw_timer_init+0xd0>)
   320dc:	4798      	blx	r3
   320de:	0004      	movs	r4, r0
   320e0:	683b      	ldr	r3, [r7, #0]
   320e2:	885b      	ldrh	r3, [r3, #2]
   320e4:	001a      	movs	r2, r3
   320e6:	4b21      	ldr	r3, [pc, #132]	; (3216c <sw_timer_init+0xd4>)
   320e8:	0011      	movs	r1, r2
   320ea:	22fa      	movs	r2, #250	; 0xfa
   320ec:	0210      	lsls	r0, r2, #8
   320ee:	4798      	blx	r3
   320f0:	0003      	movs	r3, r0
   320f2:	001a      	movs	r2, r3
   320f4:	4b1e      	ldr	r3, [pc, #120]	; (32170 <sw_timer_init+0xd8>)
   320f6:	0011      	movs	r1, r2
   320f8:	0020      	movs	r0, r4
   320fa:	4798      	blx	r3
   320fc:	0003      	movs	r3, r0
   320fe:	001a      	movs	r2, r3
   32100:	2318      	movs	r3, #24
   32102:	18fb      	adds	r3, r7, r3
   32104:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   32106:	2318      	movs	r3, #24
   32108:	18fb      	adds	r3, r7, r3
   3210a:	2205      	movs	r2, #5
   3210c:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   3210e:	683b      	ldr	r3, [r7, #0]
   32110:	781b      	ldrb	r3, [r3, #0]
   32112:	001a      	movs	r2, r3
   32114:	230c      	movs	r3, #12
   32116:	18fb      	adds	r3, r7, r3
   32118:	0092      	lsls	r2, r2, #2
   3211a:	58d1      	ldr	r1, [r2, r3]
   3211c:	2318      	movs	r3, #24
   3211e:	18fa      	adds	r2, r7, r3
   32120:	23bc      	movs	r3, #188	; 0xbc
   32122:	18fb      	adds	r3, r7, r3
   32124:	681b      	ldr	r3, [r3, #0]
   32126:	0018      	movs	r0, r3
   32128:	4b12      	ldr	r3, [pc, #72]	; (32174 <sw_timer_init+0xdc>)
   3212a:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   3212c:	683b      	ldr	r3, [r7, #0]
   3212e:	785b      	ldrb	r3, [r3, #1]
   32130:	3308      	adds	r3, #8
   32132:	b2da      	uxtb	r2, r3
   32134:	4910      	ldr	r1, [pc, #64]	; (32178 <sw_timer_init+0xe0>)
   32136:	23bc      	movs	r3, #188	; 0xbc
   32138:	18fb      	adds	r3, r7, r3
   3213a:	681b      	ldr	r3, [r3, #0]
   3213c:	0018      	movs	r0, r3
   3213e:	4b0f      	ldr	r3, [pc, #60]	; (3217c <sw_timer_init+0xe4>)
   32140:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   32142:	683b      	ldr	r3, [r7, #0]
   32144:	785b      	ldrb	r3, [r3, #1]
   32146:	3308      	adds	r3, #8
   32148:	b2da      	uxtb	r2, r3
   3214a:	23bc      	movs	r3, #188	; 0xbc
   3214c:	18fb      	adds	r3, r7, r3
   3214e:	681b      	ldr	r3, [r3, #0]
   32150:	0011      	movs	r1, r2
   32152:	0018      	movs	r0, r3
   32154:	4b0a      	ldr	r3, [pc, #40]	; (32180 <sw_timer_init+0xe8>)
   32156:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   32158:	46c0      	nop			; (mov r8, r8)
   3215a:	46bd      	mov	sp, r7
   3215c:	b031      	add	sp, #196	; 0xc4
   3215e:	bd90      	pop	{r4, r7, pc}
   32160:	00039a34 	.word	0x00039a34
   32164:	00029f79 	.word	0x00029f79
   32168:	00032001 	.word	0x00032001
   3216c:	00032769 	.word	0x00032769
   32170:	00032655 	.word	0x00032655
   32174:	0002a5d5 	.word	0x0002a5d5
   32178:	00032055 	.word	0x00032055
   3217c:	0002a9ed 	.word	0x0002a9ed
   32180:	0002aa2d 	.word	0x0002aa2d

00032184 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   32184:	b580      	push	{r7, lr}
   32186:	b084      	sub	sp, #16
   32188:	af00      	add	r7, sp, #0
   3218a:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   3218c:	687b      	ldr	r3, [r7, #4]
   3218e:	3314      	adds	r3, #20
   32190:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   32192:	68fb      	ldr	r3, [r7, #12]
   32194:	0018      	movs	r0, r3
   32196:	4b03      	ldr	r3, [pc, #12]	; (321a4 <sw_timer_enable+0x20>)
   32198:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   3219a:	46c0      	nop			; (mov r8, r8)
   3219c:	46bd      	mov	sp, r7
   3219e:	b004      	add	sp, #16
   321a0:	bd80      	pop	{r7, pc}
   321a2:	46c0      	nop			; (mov r8, r8)
   321a4:	00032025 	.word	0x00032025

000321a8 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   321a8:	b580      	push	{r7, lr}
   321aa:	b086      	sub	sp, #24
   321ac:	af00      	add	r7, sp, #0
   321ae:	60f8      	str	r0, [r7, #12]
   321b0:	60b9      	str	r1, [r7, #8]
   321b2:	607a      	str	r2, [r7, #4]
   321b4:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   321b6:	2300      	movs	r3, #0
   321b8:	617b      	str	r3, [r7, #20]
   321ba:	e032      	b.n	32222 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   321bc:	68f9      	ldr	r1, [r7, #12]
   321be:	697a      	ldr	r2, [r7, #20]
   321c0:	0013      	movs	r3, r2
   321c2:	009b      	lsls	r3, r3, #2
   321c4:	189b      	adds	r3, r3, r2
   321c6:	009b      	lsls	r3, r3, #2
   321c8:	5c5b      	ldrb	r3, [r3, r1]
   321ca:	07db      	lsls	r3, r3, #31
   321cc:	0fdb      	lsrs	r3, r3, #31
   321ce:	b2db      	uxtb	r3, r3
   321d0:	2b00      	cmp	r3, #0
   321d2:	d123      	bne.n	3221c <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   321d4:	697a      	ldr	r2, [r7, #20]
   321d6:	0013      	movs	r3, r2
   321d8:	009b      	lsls	r3, r3, #2
   321da:	189b      	adds	r3, r3, r2
   321dc:	009b      	lsls	r3, r3, #2
   321de:	68fa      	ldr	r2, [r7, #12]
   321e0:	18d3      	adds	r3, r2, r3
   321e2:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   321e4:	693b      	ldr	r3, [r7, #16]
   321e6:	68ba      	ldr	r2, [r7, #8]
   321e8:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   321ea:	693b      	ldr	r3, [r7, #16]
   321ec:	781a      	ldrb	r2, [r3, #0]
   321ee:	2102      	movs	r1, #2
   321f0:	438a      	bics	r2, r1
   321f2:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   321f4:	693b      	ldr	r3, [r7, #16]
   321f6:	687a      	ldr	r2, [r7, #4]
   321f8:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   321fa:	68fb      	ldr	r3, [r7, #12]
   321fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   321fe:	4b0d      	ldr	r3, [pc, #52]	; (32234 <sw_timer_register_callback+0x8c>)
   32200:	0011      	movs	r1, r2
   32202:	6838      	ldr	r0, [r7, #0]
   32204:	4798      	blx	r3
   32206:	0003      	movs	r3, r0
   32208:	001a      	movs	r2, r3
   3220a:	693b      	ldr	r3, [r7, #16]
   3220c:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   3220e:	693b      	ldr	r3, [r7, #16]
   32210:	781a      	ldrb	r2, [r3, #0]
   32212:	2101      	movs	r1, #1
   32214:	430a      	orrs	r2, r1
   32216:	701a      	strb	r2, [r3, #0]
			return index;
   32218:	697b      	ldr	r3, [r7, #20]
   3221a:	e007      	b.n	3222c <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3221c:	697b      	ldr	r3, [r7, #20]
   3221e:	3301      	adds	r3, #1
   32220:	617b      	str	r3, [r7, #20]
   32222:	697b      	ldr	r3, [r7, #20]
   32224:	2b00      	cmp	r3, #0
   32226:	ddc9      	ble.n	321bc <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   32228:	2301      	movs	r3, #1
   3222a:	425b      	negs	r3, r3
}
   3222c:	0018      	movs	r0, r3
   3222e:	46bd      	mov	sp, r7
   32230:	b006      	add	sp, #24
   32232:	bd80      	pop	{r7, pc}
   32234:	00032655 	.word	0x00032655

00032238 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   32238:	b580      	push	{r7, lr}
   3223a:	b086      	sub	sp, #24
   3223c:	af00      	add	r7, sp, #0
   3223e:	60f8      	str	r0, [r7, #12]
   32240:	60b9      	str	r1, [r7, #8]
   32242:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   32244:	68ba      	ldr	r2, [r7, #8]
   32246:	0013      	movs	r3, r2
   32248:	009b      	lsls	r3, r3, #2
   3224a:	189b      	adds	r3, r3, r2
   3224c:	009b      	lsls	r3, r3, #2
   3224e:	68fa      	ldr	r2, [r7, #12]
   32250:	18d3      	adds	r3, r2, r3
   32252:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   32254:	697b      	ldr	r3, [r7, #20]
   32256:	781a      	ldrb	r2, [r3, #0]
   32258:	2102      	movs	r1, #2
   3225a:	430a      	orrs	r2, r1
   3225c:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   3225e:	68fb      	ldr	r3, [r7, #12]
   32260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   32262:	4b07      	ldr	r3, [pc, #28]	; (32280 <sw_timer_enable_callback+0x48>)
   32264:	0011      	movs	r1, r2
   32266:	6878      	ldr	r0, [r7, #4]
   32268:	4798      	blx	r3
   3226a:	0003      	movs	r3, r0
   3226c:	001a      	movs	r2, r3
   3226e:	4b05      	ldr	r3, [pc, #20]	; (32284 <sw_timer_enable_callback+0x4c>)
   32270:	681b      	ldr	r3, [r3, #0]
   32272:	18d2      	adds	r2, r2, r3
   32274:	697b      	ldr	r3, [r7, #20]
   32276:	611a      	str	r2, [r3, #16]
}
   32278:	46c0      	nop			; (mov r8, r8)
   3227a:	46bd      	mov	sp, r7
   3227c:	b006      	add	sp, #24
   3227e:	bd80      	pop	{r7, pc}
   32280:	00032655 	.word	0x00032655
   32284:	20004590 	.word	0x20004590

00032288 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   32288:	b580      	push	{r7, lr}
   3228a:	b084      	sub	sp, #16
   3228c:	af00      	add	r7, sp, #0
   3228e:	6078      	str	r0, [r7, #4]
   32290:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   32292:	683a      	ldr	r2, [r7, #0]
   32294:	0013      	movs	r3, r2
   32296:	009b      	lsls	r3, r3, #2
   32298:	189b      	adds	r3, r3, r2
   3229a:	009b      	lsls	r3, r3, #2
   3229c:	687a      	ldr	r2, [r7, #4]
   3229e:	18d3      	adds	r3, r2, r3
   322a0:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   322a2:	68fb      	ldr	r3, [r7, #12]
   322a4:	781a      	ldrb	r2, [r3, #0]
   322a6:	2102      	movs	r1, #2
   322a8:	438a      	bics	r2, r1
   322aa:	701a      	strb	r2, [r3, #0]
}
   322ac:	46c0      	nop			; (mov r8, r8)
   322ae:	46bd      	mov	sp, r7
   322b0:	b004      	add	sp, #16
   322b2:	bd80      	pop	{r7, pc}

000322b4 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   322b4:	b590      	push	{r4, r7, lr}
   322b6:	b085      	sub	sp, #20
   322b8:	af00      	add	r7, sp, #0
   322ba:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   322bc:	2300      	movs	r3, #0
   322be:	60fb      	str	r3, [r7, #12]
   322c0:	e053      	b.n	3236a <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   322c2:	6879      	ldr	r1, [r7, #4]
   322c4:	68fa      	ldr	r2, [r7, #12]
   322c6:	0013      	movs	r3, r2
   322c8:	009b      	lsls	r3, r3, #2
   322ca:	189b      	adds	r3, r3, r2
   322cc:	009b      	lsls	r3, r3, #2
   322ce:	5c5b      	ldrb	r3, [r3, r1]
   322d0:	07db      	lsls	r3, r3, #31
   322d2:	0fdb      	lsrs	r3, r3, #31
   322d4:	b2db      	uxtb	r3, r3
   322d6:	2b00      	cmp	r3, #0
   322d8:	d044      	beq.n	32364 <sw_timer_task+0xb0>
   322da:	6879      	ldr	r1, [r7, #4]
   322dc:	68fa      	ldr	r2, [r7, #12]
   322de:	0013      	movs	r3, r2
   322e0:	009b      	lsls	r3, r3, #2
   322e2:	189b      	adds	r3, r3, r2
   322e4:	009b      	lsls	r3, r3, #2
   322e6:	5c5b      	ldrb	r3, [r3, r1]
   322e8:	079b      	lsls	r3, r3, #30
   322ea:	0fdb      	lsrs	r3, r3, #31
   322ec:	b2db      	uxtb	r3, r3
   322ee:	2b00      	cmp	r3, #0
   322f0:	d038      	beq.n	32364 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   322f2:	68fa      	ldr	r2, [r7, #12]
   322f4:	0013      	movs	r3, r2
   322f6:	009b      	lsls	r3, r3, #2
   322f8:	189b      	adds	r3, r3, r2
   322fa:	009b      	lsls	r3, r3, #2
   322fc:	687a      	ldr	r2, [r7, #4]
   322fe:	18d3      	adds	r3, r2, r3
   32300:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   32302:	68bb      	ldr	r3, [r7, #8]
   32304:	691a      	ldr	r2, [r3, #16]
   32306:	4b1c      	ldr	r3, [pc, #112]	; (32378 <sw_timer_task+0xc4>)
   32308:	681b      	ldr	r3, [r3, #0]
   3230a:	1ad3      	subs	r3, r2, r3
   3230c:	d52a      	bpl.n	32364 <sw_timer_task+0xb0>
   3230e:	68bb      	ldr	r3, [r7, #8]
   32310:	781b      	ldrb	r3, [r3, #0]
   32312:	2204      	movs	r2, #4
   32314:	4013      	ands	r3, r2
   32316:	b2db      	uxtb	r3, r3
   32318:	2b00      	cmp	r3, #0
   3231a:	d123      	bne.n	32364 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   3231c:	68bb      	ldr	r3, [r7, #8]
   3231e:	781a      	ldrb	r2, [r3, #0]
   32320:	2104      	movs	r1, #4
   32322:	430a      	orrs	r2, r1
   32324:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   32326:	68bb      	ldr	r3, [r7, #8]
   32328:	68db      	ldr	r3, [r3, #12]
   3232a:	2b00      	cmp	r3, #0
   3232c:	d007      	beq.n	3233e <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   3232e:	68bb      	ldr	r3, [r7, #8]
   32330:	68da      	ldr	r2, [r3, #12]
   32332:	4b11      	ldr	r3, [pc, #68]	; (32378 <sw_timer_task+0xc4>)
   32334:	681b      	ldr	r3, [r3, #0]
   32336:	18d2      	adds	r2, r2, r3
   32338:	68bb      	ldr	r3, [r7, #8]
   3233a:	611a      	str	r2, [r3, #16]
   3233c:	e004      	b.n	32348 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   3233e:	68bb      	ldr	r3, [r7, #8]
   32340:	781a      	ldrb	r2, [r3, #0]
   32342:	2102      	movs	r1, #2
   32344:	438a      	bics	r2, r1
   32346:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   32348:	68bb      	ldr	r3, [r7, #8]
   3234a:	685c      	ldr	r4, [r3, #4]
   3234c:	68bb      	ldr	r3, [r7, #8]
   3234e:	689a      	ldr	r2, [r3, #8]
   32350:	68bb      	ldr	r3, [r7, #8]
   32352:	68db      	ldr	r3, [r3, #12]
   32354:	68f9      	ldr	r1, [r7, #12]
   32356:	6878      	ldr	r0, [r7, #4]
   32358:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   3235a:	68bb      	ldr	r3, [r7, #8]
   3235c:	781a      	ldrb	r2, [r3, #0]
   3235e:	2104      	movs	r1, #4
   32360:	438a      	bics	r2, r1
   32362:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   32364:	68fb      	ldr	r3, [r7, #12]
   32366:	3301      	adds	r3, #1
   32368:	60fb      	str	r3, [r7, #12]
   3236a:	68fb      	ldr	r3, [r7, #12]
   3236c:	2b00      	cmp	r3, #0
   3236e:	dda8      	ble.n	322c2 <sw_timer_task+0xe>
			}
		}
	}
}
   32370:	46c0      	nop			; (mov r8, r8)
   32372:	46bd      	mov	sp, r7
   32374:	b005      	add	sp, #20
   32376:	bd90      	pop	{r4, r7, pc}
   32378:	20004590 	.word	0x20004590

0003237c <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   3237c:	b580      	push	{r7, lr}
   3237e:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   32380:	4b06      	ldr	r3, [pc, #24]	; (3239c <main+0x20>)
   32382:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   32384:	4b06      	ldr	r3, [pc, #24]	; (323a0 <main+0x24>)
   32386:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   32388:	2001      	movs	r0, #1
   3238a:	4b06      	ldr	r3, [pc, #24]	; (323a4 <main+0x28>)
   3238c:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   3238e:	4b06      	ldr	r3, [pc, #24]	; (323a8 <main+0x2c>)
   32390:	4798      	blx	r3

    return 0;  // Will not get here
   32392:	2300      	movs	r3, #0
}
   32394:	0018      	movs	r0, r3
   32396:	46bd      	mov	sp, r7
   32398:	bd80      	pop	{r7, pc}
   3239a:	46c0      	nop			; (mov r8, r8)
   3239c:	00029e6d 	.word	0x00029e6d
   323a0:	0001d975 	.word	0x0001d975
   323a4:	0001803d 	.word	0x0001803d
   323a8:	0001bfcd 	.word	0x0001bfcd

000323ac <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   323ac:	b580      	push	{r7, lr}
   323ae:	b082      	sub	sp, #8
   323b0:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   323b2:	4b29      	ldr	r3, [pc, #164]	; (32458 <vApplicationDaemonTaskStartupHook+0xac>)
   323b4:	0018      	movs	r0, r3
   323b6:	4b29      	ldr	r3, [pc, #164]	; (3245c <vApplicationDaemonTaskStartupHook+0xb0>)
   323b8:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   323ba:	4b29      	ldr	r3, [pc, #164]	; (32460 <vApplicationDaemonTaskStartupHook+0xb4>)
   323bc:	0018      	movs	r0, r3
   323be:	4b27      	ldr	r3, [pc, #156]	; (3245c <vApplicationDaemonTaskStartupHook+0xb0>)
   323c0:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   323c2:	4b28      	ldr	r3, [pc, #160]	; (32464 <vApplicationDaemonTaskStartupHook+0xb8>)
   323c4:	4798      	blx	r3
   323c6:	1e03      	subs	r3, r0, #0
   323c8:	d004      	beq.n	323d4 <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   323ca:	4b27      	ldr	r3, [pc, #156]	; (32468 <vApplicationDaemonTaskStartupHook+0xbc>)
   323cc:	0018      	movs	r0, r3
   323ce:	4b23      	ldr	r3, [pc, #140]	; (3245c <vApplicationDaemonTaskStartupHook+0xb0>)
   323d0:	4798      	blx	r3
   323d2:	e003      	b.n	323dc <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   323d4:	4b25      	ldr	r3, [pc, #148]	; (3246c <vApplicationDaemonTaskStartupHook+0xc0>)
   323d6:	0018      	movs	r0, r3
   323d8:	4b20      	ldr	r3, [pc, #128]	; (3245c <vApplicationDaemonTaskStartupHook+0xb0>)
   323da:	4798      	blx	r3
    }

    if (0 != InitializeSeesaw()) {
   323dc:	4b24      	ldr	r3, [pc, #144]	; (32470 <vApplicationDaemonTaskStartupHook+0xc4>)
   323de:	4798      	blx	r3
   323e0:	1e03      	subs	r3, r0, #0
   323e2:	d004      	beq.n	323ee <vApplicationDaemonTaskStartupHook+0x42>
        SerialConsoleWriteString("Error initializing Seesaw!\r\n");
   323e4:	4b23      	ldr	r3, [pc, #140]	; (32474 <vApplicationDaemonTaskStartupHook+0xc8>)
   323e6:	0018      	movs	r0, r3
   323e8:	4b1c      	ldr	r3, [pc, #112]	; (3245c <vApplicationDaemonTaskStartupHook+0xb0>)
   323ea:	4798      	blx	r3
   323ec:	e003      	b.n	323f6 <vApplicationDaemonTaskStartupHook+0x4a>
    } else {
        SerialConsoleWriteString("Initialized Seesaw!\r\n");
   323ee:	4b22      	ldr	r3, [pc, #136]	; (32478 <vApplicationDaemonTaskStartupHook+0xcc>)
   323f0:	0018      	movs	r0, r3
   323f2:	4b1a      	ldr	r3, [pc, #104]	; (3245c <vApplicationDaemonTaskStartupHook+0xb0>)
   323f4:	4798      	blx	r3
    }

    uint8_t whoamI = 0;
   323f6:	1dfb      	adds	r3, r7, #7
   323f8:	2200      	movs	r2, #0
   323fa:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   323fc:	4b1f      	ldr	r3, [pc, #124]	; (3247c <vApplicationDaemonTaskStartupHook+0xd0>)
   323fe:	4798      	blx	r3
   32400:	0002      	movs	r2, r0
   32402:	1dfb      	adds	r3, r7, #7
   32404:	0019      	movs	r1, r3
   32406:	0010      	movs	r0, r2
   32408:	4b1d      	ldr	r3, [pc, #116]	; (32480 <vApplicationDaemonTaskStartupHook+0xd4>)
   3240a:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   3240c:	1dfb      	adds	r3, r7, #7
   3240e:	781b      	ldrb	r3, [r3, #0]
   32410:	2b6c      	cmp	r3, #108	; 0x6c
   32412:	d004      	beq.n	3241e <vApplicationDaemonTaskStartupHook+0x72>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   32414:	4b1b      	ldr	r3, [pc, #108]	; (32484 <vApplicationDaemonTaskStartupHook+0xd8>)
   32416:	0018      	movs	r0, r3
   32418:	4b10      	ldr	r3, [pc, #64]	; (3245c <vApplicationDaemonTaskStartupHook+0xb0>)
   3241a:	4798      	blx	r3
   3241c:	e010      	b.n	32440 <vApplicationDaemonTaskStartupHook+0x94>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   3241e:	4b1a      	ldr	r3, [pc, #104]	; (32488 <vApplicationDaemonTaskStartupHook+0xdc>)
   32420:	0018      	movs	r0, r3
   32422:	4b0e      	ldr	r3, [pc, #56]	; (3245c <vApplicationDaemonTaskStartupHook+0xb0>)
   32424:	4798      	blx	r3
        if (InitImu() == 0) {
   32426:	4b19      	ldr	r3, [pc, #100]	; (3248c <vApplicationDaemonTaskStartupHook+0xe0>)
   32428:	4798      	blx	r3
   3242a:	1e03      	subs	r3, r0, #0
   3242c:	d104      	bne.n	32438 <vApplicationDaemonTaskStartupHook+0x8c>
            SerialConsoleWriteString("IMU initialized!\r\n");
   3242e:	4b18      	ldr	r3, [pc, #96]	; (32490 <vApplicationDaemonTaskStartupHook+0xe4>)
   32430:	0018      	movs	r0, r3
   32432:	4b0a      	ldr	r3, [pc, #40]	; (3245c <vApplicationDaemonTaskStartupHook+0xb0>)
   32434:	4798      	blx	r3
   32436:	e003      	b.n	32440 <vApplicationDaemonTaskStartupHook+0x94>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   32438:	4b16      	ldr	r3, [pc, #88]	; (32494 <vApplicationDaemonTaskStartupHook+0xe8>)
   3243a:	0018      	movs	r0, r3
   3243c:	4b07      	ldr	r3, [pc, #28]	; (3245c <vApplicationDaemonTaskStartupHook+0xb0>)
   3243e:	4798      	blx	r3
    SerialConsoleWriteString("Initializing distance sensor\r\n");
    InitializeDistanceSensor();
    SerialConsoleWriteString("Distance sensor initialized\r\n");
	*/

    StartTasks();
   32440:	4b15      	ldr	r3, [pc, #84]	; (32498 <vApplicationDaemonTaskStartupHook+0xec>)
   32442:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   32444:	4b15      	ldr	r3, [pc, #84]	; (3249c <vApplicationDaemonTaskStartupHook+0xf0>)
   32446:	681b      	ldr	r3, [r3, #0]
   32448:	0018      	movs	r0, r3
   3244a:	4b15      	ldr	r3, [pc, #84]	; (324a0 <vApplicationDaemonTaskStartupHook+0xf4>)
   3244c:	4798      	blx	r3
}
   3244e:	46c0      	nop			; (mov r8, r8)
   32450:	46bd      	mov	sp, r7
   32452:	b002      	add	sp, #8
   32454:	bd80      	pop	{r7, pc}
   32456:	46c0      	nop			; (mov r8, r8)
   32458:	00039a40 	.word	0x00039a40
   3245c:	0001d9e5 	.word	0x0001d9e5
   32460:	00039a64 	.word	0x00039a64
   32464:	00013dd9 	.word	0x00013dd9
   32468:	00039a7c 	.word	0x00039a7c
   3246c:	00039aa0 	.word	0x00039aa0
   32470:	00015019 	.word	0x00015019
   32474:	00039abc 	.word	0x00039abc
   32478:	00039adc 	.word	0x00039adc
   3247c:	00014f41 	.word	0x00014f41
   32480:	00014b45 	.word	0x00014b45
   32484:	00039af4 	.word	0x00039af4
   32488:	00039b08 	.word	0x00039b08
   3248c:	00014f51 	.word	0x00014f51
   32490:	00039b18 	.word	0x00039b18
   32494:	00039b2c 	.word	0x00039b2c
   32498:	000324a5 	.word	0x000324a5
   3249c:	20004598 	.word	0x20004598
   324a0:	0001be71 	.word	0x0001be71

000324a4 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   324a4:	b590      	push	{r4, r7, lr}
   324a6:	b083      	sub	sp, #12
   324a8:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   324aa:	4b44      	ldr	r3, [pc, #272]	; (325bc <StartTasks+0x118>)
   324ac:	4798      	blx	r3
   324ae:	0003      	movs	r3, r0
   324b0:	4a43      	ldr	r2, [pc, #268]	; (325c0 <StartTasks+0x11c>)
   324b2:	4844      	ldr	r0, [pc, #272]	; (325c4 <StartTasks+0x120>)
   324b4:	2140      	movs	r1, #64	; 0x40
   324b6:	4c44      	ldr	r4, [pc, #272]	; (325c8 <StartTasks+0x124>)
   324b8:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   324ba:	4b42      	ldr	r3, [pc, #264]	; (325c4 <StartTasks+0x120>)
   324bc:	0018      	movs	r0, r3
   324be:	4b43      	ldr	r3, [pc, #268]	; (325cc <StartTasks+0x128>)
   324c0:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   324c2:	23c8      	movs	r3, #200	; 0xc8
   324c4:	005a      	lsls	r2, r3, #1
   324c6:	4942      	ldr	r1, [pc, #264]	; (325d0 <StartTasks+0x12c>)
   324c8:	4842      	ldr	r0, [pc, #264]	; (325d4 <StartTasks+0x130>)
   324ca:	4b43      	ldr	r3, [pc, #268]	; (325d8 <StartTasks+0x134>)
   324cc:	9301      	str	r3, [sp, #4]
   324ce:	2304      	movs	r3, #4
   324d0:	9300      	str	r3, [sp, #0]
   324d2:	2300      	movs	r3, #0
   324d4:	4c41      	ldr	r4, [pc, #260]	; (325dc <StartTasks+0x138>)
   324d6:	47a0      	blx	r4
   324d8:	0003      	movs	r3, r0
   324da:	2b01      	cmp	r3, #1
   324dc:	d003      	beq.n	324e6 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   324de:	4b40      	ldr	r3, [pc, #256]	; (325e0 <StartTasks+0x13c>)
   324e0:	0018      	movs	r0, r3
   324e2:	4b3a      	ldr	r3, [pc, #232]	; (325cc <StartTasks+0x128>)
   324e4:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   324e6:	4b35      	ldr	r3, [pc, #212]	; (325bc <StartTasks+0x118>)
   324e8:	4798      	blx	r3
   324ea:	0003      	movs	r3, r0
   324ec:	4a3d      	ldr	r2, [pc, #244]	; (325e4 <StartTasks+0x140>)
   324ee:	4835      	ldr	r0, [pc, #212]	; (325c4 <StartTasks+0x120>)
   324f0:	2140      	movs	r1, #64	; 0x40
   324f2:	4c35      	ldr	r4, [pc, #212]	; (325c8 <StartTasks+0x124>)
   324f4:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   324f6:	4b33      	ldr	r3, [pc, #204]	; (325c4 <StartTasks+0x120>)
   324f8:	0018      	movs	r0, r3
   324fa:	4b34      	ldr	r3, [pc, #208]	; (325cc <StartTasks+0x128>)
   324fc:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   324fe:	23fa      	movs	r3, #250	; 0xfa
   32500:	009a      	lsls	r2, r3, #2
   32502:	4939      	ldr	r1, [pc, #228]	; (325e8 <StartTasks+0x144>)
   32504:	4839      	ldr	r0, [pc, #228]	; (325ec <StartTasks+0x148>)
   32506:	4b3a      	ldr	r3, [pc, #232]	; (325f0 <StartTasks+0x14c>)
   32508:	9301      	str	r3, [sp, #4]
   3250a:	2303      	movs	r3, #3
   3250c:	9300      	str	r3, [sp, #0]
   3250e:	2300      	movs	r3, #0
   32510:	4c32      	ldr	r4, [pc, #200]	; (325dc <StartTasks+0x138>)
   32512:	47a0      	blx	r4
   32514:	0003      	movs	r3, r0
   32516:	2b01      	cmp	r3, #1
   32518:	d003      	beq.n	32522 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   3251a:	4b36      	ldr	r3, [pc, #216]	; (325f4 <StartTasks+0x150>)
   3251c:	0018      	movs	r0, r3
   3251e:	4b2b      	ldr	r3, [pc, #172]	; (325cc <StartTasks+0x128>)
   32520:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   32522:	4b26      	ldr	r3, [pc, #152]	; (325bc <StartTasks+0x118>)
   32524:	4798      	blx	r3
   32526:	0003      	movs	r3, r0
   32528:	4a33      	ldr	r2, [pc, #204]	; (325f8 <StartTasks+0x154>)
   3252a:	4826      	ldr	r0, [pc, #152]	; (325c4 <StartTasks+0x120>)
   3252c:	2140      	movs	r1, #64	; 0x40
   3252e:	4c26      	ldr	r4, [pc, #152]	; (325c8 <StartTasks+0x124>)
   32530:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32532:	4b24      	ldr	r3, [pc, #144]	; (325c4 <StartTasks+0x120>)
   32534:	0018      	movs	r0, r3
   32536:	4b25      	ldr	r3, [pc, #148]	; (325cc <StartTasks+0x128>)
   32538:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   3253a:	23c8      	movs	r3, #200	; 0xc8
   3253c:	005a      	lsls	r2, r3, #1
   3253e:	492f      	ldr	r1, [pc, #188]	; (325fc <StartTasks+0x158>)
   32540:	482f      	ldr	r0, [pc, #188]	; (32600 <StartTasks+0x15c>)
   32542:	4b30      	ldr	r3, [pc, #192]	; (32604 <StartTasks+0x160>)
   32544:	9301      	str	r3, [sp, #4]
   32546:	2304      	movs	r3, #4
   32548:	9300      	str	r3, [sp, #0]
   3254a:	2300      	movs	r3, #0
   3254c:	4c23      	ldr	r4, [pc, #140]	; (325dc <StartTasks+0x138>)
   3254e:	47a0      	blx	r4
   32550:	0003      	movs	r3, r0
   32552:	2b01      	cmp	r3, #1
   32554:	d003      	beq.n	3255e <StartTasks+0xba>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   32556:	4b2c      	ldr	r3, [pc, #176]	; (32608 <StartTasks+0x164>)
   32558:	0018      	movs	r0, r3
   3255a:	4b1c      	ldr	r3, [pc, #112]	; (325cc <StartTasks+0x128>)
   3255c:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   3255e:	4b17      	ldr	r3, [pc, #92]	; (325bc <StartTasks+0x118>)
   32560:	4798      	blx	r3
   32562:	0003      	movs	r3, r0
   32564:	4a29      	ldr	r2, [pc, #164]	; (3260c <StartTasks+0x168>)
   32566:	4817      	ldr	r0, [pc, #92]	; (325c4 <StartTasks+0x120>)
   32568:	2140      	movs	r1, #64	; 0x40
   3256a:	4c17      	ldr	r4, [pc, #92]	; (325c8 <StartTasks+0x124>)
   3256c:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3256e:	4b15      	ldr	r3, [pc, #84]	; (325c4 <StartTasks+0x120>)
   32570:	0018      	movs	r0, r3
   32572:	4b16      	ldr	r3, [pc, #88]	; (325cc <StartTasks+0x128>)
   32574:	4798      	blx	r3

    if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   32576:	2380      	movs	r3, #128	; 0x80
   32578:	005a      	lsls	r2, r3, #1
   3257a:	4925      	ldr	r1, [pc, #148]	; (32610 <StartTasks+0x16c>)
   3257c:	4825      	ldr	r0, [pc, #148]	; (32614 <StartTasks+0x170>)
   3257e:	4b26      	ldr	r3, [pc, #152]	; (32618 <StartTasks+0x174>)
   32580:	9301      	str	r3, [sp, #4]
   32582:	2304      	movs	r3, #4
   32584:	9300      	str	r3, [sp, #0]
   32586:	2300      	movs	r3, #0
   32588:	4c14      	ldr	r4, [pc, #80]	; (325dc <StartTasks+0x138>)
   3258a:	47a0      	blx	r4
   3258c:	0003      	movs	r3, r0
   3258e:	2b01      	cmp	r3, #1
   32590:	d003      	beq.n	3259a <StartTasks+0xf6>
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   32592:	4b22      	ldr	r3, [pc, #136]	; (3261c <StartTasks+0x178>)
   32594:	0018      	movs	r0, r3
   32596:	4b0d      	ldr	r3, [pc, #52]	; (325cc <StartTasks+0x128>)
   32598:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   3259a:	4b08      	ldr	r3, [pc, #32]	; (325bc <StartTasks+0x118>)
   3259c:	4798      	blx	r3
   3259e:	0003      	movs	r3, r0
   325a0:	4a1f      	ldr	r2, [pc, #124]	; (32620 <StartTasks+0x17c>)
   325a2:	4808      	ldr	r0, [pc, #32]	; (325c4 <StartTasks+0x120>)
   325a4:	2140      	movs	r1, #64	; 0x40
   325a6:	4c08      	ldr	r4, [pc, #32]	; (325c8 <StartTasks+0x124>)
   325a8:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   325aa:	4b06      	ldr	r3, [pc, #24]	; (325c4 <StartTasks+0x120>)
   325ac:	0018      	movs	r0, r3
   325ae:	4b07      	ldr	r3, [pc, #28]	; (325cc <StartTasks+0x128>)
   325b0:	4798      	blx	r3
}
   325b2:	46c0      	nop			; (mov r8, r8)
   325b4:	46bd      	mov	sp, r7
   325b6:	b001      	add	sp, #4
   325b8:	bd90      	pop	{r4, r7, pc}
   325ba:	46c0      	nop			; (mov r8, r8)
   325bc:	00019fb1 	.word	0x00019fb1
   325c0:	00039b48 	.word	0x00039b48
   325c4:	20005a80 	.word	0x20005a80
   325c8:	00034889 	.word	0x00034889
   325cc:	0001d9e5 	.word	0x0001d9e5
   325d0:	00039b6c 	.word	0x00039b6c
   325d4:	00012e71 	.word	0x00012e71
   325d8:	20004594 	.word	0x20004594
   325dc:	0001b9f5 	.word	0x0001b9f5
   325e0:	00039b78 	.word	0x00039b78
   325e4:	00039ba4 	.word	0x00039ba4
   325e8:	00039bc4 	.word	0x00039bc4
   325ec:	00016df1 	.word	0x00016df1
   325f0:	2000459c 	.word	0x2000459c
   325f4:	00039bd0 	.word	0x00039bd0
   325f8:	00039bfc 	.word	0x00039bfc
   325fc:	00039c1c 	.word	0x00039c1c
   32600:	0001552d 	.word	0x0001552d
   32604:	200045a0 	.word	0x200045a0
   32608:	00039c24 	.word	0x00039c24
   3260c:	00039c50 	.word	0x00039c50
   32610:	00039c74 	.word	0x00039c74
   32614:	0001378d 	.word	0x0001378d
   32618:	200045a4 	.word	0x200045a4
   3261c:	00039c84 	.word	0x00039c84
   32620:	00039cb4 	.word	0x00039cb4

00032624 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   32624:	b580      	push	{r7, lr}
   32626:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   32628:	4b02      	ldr	r3, [pc, #8]	; (32634 <vApplicationMallocFailedHook+0x10>)
   3262a:	0018      	movs	r0, r3
   3262c:	4b02      	ldr	r3, [pc, #8]	; (32638 <vApplicationMallocFailedHook+0x14>)
   3262e:	4798      	blx	r3
    while (1)
   32630:	e7fe      	b.n	32630 <vApplicationMallocFailedHook+0xc>
   32632:	46c0      	nop			; (mov r8, r8)
   32634:	00039cdc 	.word	0x00039cdc
   32638:	0001d9e5 	.word	0x0001d9e5

0003263c <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   3263c:	b580      	push	{r7, lr}
   3263e:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   32640:	4b02      	ldr	r3, [pc, #8]	; (3264c <vApplicationStackOverflowHook+0x10>)
   32642:	0018      	movs	r0, r3
   32644:	4b02      	ldr	r3, [pc, #8]	; (32650 <vApplicationStackOverflowHook+0x14>)
   32646:	4798      	blx	r3
    while (1)
   32648:	e7fe      	b.n	32648 <vApplicationStackOverflowHook+0xc>
   3264a:	46c0      	nop			; (mov r8, r8)
   3264c:	00039d08 	.word	0x00039d08
   32650:	0001d9e5 	.word	0x0001d9e5

00032654 <__udivsi3>:
   32654:	2200      	movs	r2, #0
   32656:	0843      	lsrs	r3, r0, #1
   32658:	428b      	cmp	r3, r1
   3265a:	d374      	bcc.n	32746 <__udivsi3+0xf2>
   3265c:	0903      	lsrs	r3, r0, #4
   3265e:	428b      	cmp	r3, r1
   32660:	d35f      	bcc.n	32722 <__udivsi3+0xce>
   32662:	0a03      	lsrs	r3, r0, #8
   32664:	428b      	cmp	r3, r1
   32666:	d344      	bcc.n	326f2 <__udivsi3+0x9e>
   32668:	0b03      	lsrs	r3, r0, #12
   3266a:	428b      	cmp	r3, r1
   3266c:	d328      	bcc.n	326c0 <__udivsi3+0x6c>
   3266e:	0c03      	lsrs	r3, r0, #16
   32670:	428b      	cmp	r3, r1
   32672:	d30d      	bcc.n	32690 <__udivsi3+0x3c>
   32674:	22ff      	movs	r2, #255	; 0xff
   32676:	0209      	lsls	r1, r1, #8
   32678:	ba12      	rev	r2, r2
   3267a:	0c03      	lsrs	r3, r0, #16
   3267c:	428b      	cmp	r3, r1
   3267e:	d302      	bcc.n	32686 <__udivsi3+0x32>
   32680:	1212      	asrs	r2, r2, #8
   32682:	0209      	lsls	r1, r1, #8
   32684:	d065      	beq.n	32752 <__udivsi3+0xfe>
   32686:	0b03      	lsrs	r3, r0, #12
   32688:	428b      	cmp	r3, r1
   3268a:	d319      	bcc.n	326c0 <__udivsi3+0x6c>
   3268c:	e000      	b.n	32690 <__udivsi3+0x3c>
   3268e:	0a09      	lsrs	r1, r1, #8
   32690:	0bc3      	lsrs	r3, r0, #15
   32692:	428b      	cmp	r3, r1
   32694:	d301      	bcc.n	3269a <__udivsi3+0x46>
   32696:	03cb      	lsls	r3, r1, #15
   32698:	1ac0      	subs	r0, r0, r3
   3269a:	4152      	adcs	r2, r2
   3269c:	0b83      	lsrs	r3, r0, #14
   3269e:	428b      	cmp	r3, r1
   326a0:	d301      	bcc.n	326a6 <__udivsi3+0x52>
   326a2:	038b      	lsls	r3, r1, #14
   326a4:	1ac0      	subs	r0, r0, r3
   326a6:	4152      	adcs	r2, r2
   326a8:	0b43      	lsrs	r3, r0, #13
   326aa:	428b      	cmp	r3, r1
   326ac:	d301      	bcc.n	326b2 <__udivsi3+0x5e>
   326ae:	034b      	lsls	r3, r1, #13
   326b0:	1ac0      	subs	r0, r0, r3
   326b2:	4152      	adcs	r2, r2
   326b4:	0b03      	lsrs	r3, r0, #12
   326b6:	428b      	cmp	r3, r1
   326b8:	d301      	bcc.n	326be <__udivsi3+0x6a>
   326ba:	030b      	lsls	r3, r1, #12
   326bc:	1ac0      	subs	r0, r0, r3
   326be:	4152      	adcs	r2, r2
   326c0:	0ac3      	lsrs	r3, r0, #11
   326c2:	428b      	cmp	r3, r1
   326c4:	d301      	bcc.n	326ca <__udivsi3+0x76>
   326c6:	02cb      	lsls	r3, r1, #11
   326c8:	1ac0      	subs	r0, r0, r3
   326ca:	4152      	adcs	r2, r2
   326cc:	0a83      	lsrs	r3, r0, #10
   326ce:	428b      	cmp	r3, r1
   326d0:	d301      	bcc.n	326d6 <__udivsi3+0x82>
   326d2:	028b      	lsls	r3, r1, #10
   326d4:	1ac0      	subs	r0, r0, r3
   326d6:	4152      	adcs	r2, r2
   326d8:	0a43      	lsrs	r3, r0, #9
   326da:	428b      	cmp	r3, r1
   326dc:	d301      	bcc.n	326e2 <__udivsi3+0x8e>
   326de:	024b      	lsls	r3, r1, #9
   326e0:	1ac0      	subs	r0, r0, r3
   326e2:	4152      	adcs	r2, r2
   326e4:	0a03      	lsrs	r3, r0, #8
   326e6:	428b      	cmp	r3, r1
   326e8:	d301      	bcc.n	326ee <__udivsi3+0x9a>
   326ea:	020b      	lsls	r3, r1, #8
   326ec:	1ac0      	subs	r0, r0, r3
   326ee:	4152      	adcs	r2, r2
   326f0:	d2cd      	bcs.n	3268e <__udivsi3+0x3a>
   326f2:	09c3      	lsrs	r3, r0, #7
   326f4:	428b      	cmp	r3, r1
   326f6:	d301      	bcc.n	326fc <__udivsi3+0xa8>
   326f8:	01cb      	lsls	r3, r1, #7
   326fa:	1ac0      	subs	r0, r0, r3
   326fc:	4152      	adcs	r2, r2
   326fe:	0983      	lsrs	r3, r0, #6
   32700:	428b      	cmp	r3, r1
   32702:	d301      	bcc.n	32708 <__udivsi3+0xb4>
   32704:	018b      	lsls	r3, r1, #6
   32706:	1ac0      	subs	r0, r0, r3
   32708:	4152      	adcs	r2, r2
   3270a:	0943      	lsrs	r3, r0, #5
   3270c:	428b      	cmp	r3, r1
   3270e:	d301      	bcc.n	32714 <__udivsi3+0xc0>
   32710:	014b      	lsls	r3, r1, #5
   32712:	1ac0      	subs	r0, r0, r3
   32714:	4152      	adcs	r2, r2
   32716:	0903      	lsrs	r3, r0, #4
   32718:	428b      	cmp	r3, r1
   3271a:	d301      	bcc.n	32720 <__udivsi3+0xcc>
   3271c:	010b      	lsls	r3, r1, #4
   3271e:	1ac0      	subs	r0, r0, r3
   32720:	4152      	adcs	r2, r2
   32722:	08c3      	lsrs	r3, r0, #3
   32724:	428b      	cmp	r3, r1
   32726:	d301      	bcc.n	3272c <__udivsi3+0xd8>
   32728:	00cb      	lsls	r3, r1, #3
   3272a:	1ac0      	subs	r0, r0, r3
   3272c:	4152      	adcs	r2, r2
   3272e:	0883      	lsrs	r3, r0, #2
   32730:	428b      	cmp	r3, r1
   32732:	d301      	bcc.n	32738 <__udivsi3+0xe4>
   32734:	008b      	lsls	r3, r1, #2
   32736:	1ac0      	subs	r0, r0, r3
   32738:	4152      	adcs	r2, r2
   3273a:	0843      	lsrs	r3, r0, #1
   3273c:	428b      	cmp	r3, r1
   3273e:	d301      	bcc.n	32744 <__udivsi3+0xf0>
   32740:	004b      	lsls	r3, r1, #1
   32742:	1ac0      	subs	r0, r0, r3
   32744:	4152      	adcs	r2, r2
   32746:	1a41      	subs	r1, r0, r1
   32748:	d200      	bcs.n	3274c <__udivsi3+0xf8>
   3274a:	4601      	mov	r1, r0
   3274c:	4152      	adcs	r2, r2
   3274e:	4610      	mov	r0, r2
   32750:	4770      	bx	lr
   32752:	e7ff      	b.n	32754 <__udivsi3+0x100>
   32754:	b501      	push	{r0, lr}
   32756:	2000      	movs	r0, #0
   32758:	f000 f8f0 	bl	3293c <__aeabi_idiv0>
   3275c:	bd02      	pop	{r1, pc}
   3275e:	46c0      	nop			; (mov r8, r8)

00032760 <__aeabi_uidivmod>:
   32760:	2900      	cmp	r1, #0
   32762:	d0f7      	beq.n	32754 <__udivsi3+0x100>
   32764:	e776      	b.n	32654 <__udivsi3>
   32766:	4770      	bx	lr

00032768 <__divsi3>:
   32768:	4603      	mov	r3, r0
   3276a:	430b      	orrs	r3, r1
   3276c:	d47f      	bmi.n	3286e <__divsi3+0x106>
   3276e:	2200      	movs	r2, #0
   32770:	0843      	lsrs	r3, r0, #1
   32772:	428b      	cmp	r3, r1
   32774:	d374      	bcc.n	32860 <__divsi3+0xf8>
   32776:	0903      	lsrs	r3, r0, #4
   32778:	428b      	cmp	r3, r1
   3277a:	d35f      	bcc.n	3283c <__divsi3+0xd4>
   3277c:	0a03      	lsrs	r3, r0, #8
   3277e:	428b      	cmp	r3, r1
   32780:	d344      	bcc.n	3280c <__divsi3+0xa4>
   32782:	0b03      	lsrs	r3, r0, #12
   32784:	428b      	cmp	r3, r1
   32786:	d328      	bcc.n	327da <__divsi3+0x72>
   32788:	0c03      	lsrs	r3, r0, #16
   3278a:	428b      	cmp	r3, r1
   3278c:	d30d      	bcc.n	327aa <__divsi3+0x42>
   3278e:	22ff      	movs	r2, #255	; 0xff
   32790:	0209      	lsls	r1, r1, #8
   32792:	ba12      	rev	r2, r2
   32794:	0c03      	lsrs	r3, r0, #16
   32796:	428b      	cmp	r3, r1
   32798:	d302      	bcc.n	327a0 <__divsi3+0x38>
   3279a:	1212      	asrs	r2, r2, #8
   3279c:	0209      	lsls	r1, r1, #8
   3279e:	d065      	beq.n	3286c <__divsi3+0x104>
   327a0:	0b03      	lsrs	r3, r0, #12
   327a2:	428b      	cmp	r3, r1
   327a4:	d319      	bcc.n	327da <__divsi3+0x72>
   327a6:	e000      	b.n	327aa <__divsi3+0x42>
   327a8:	0a09      	lsrs	r1, r1, #8
   327aa:	0bc3      	lsrs	r3, r0, #15
   327ac:	428b      	cmp	r3, r1
   327ae:	d301      	bcc.n	327b4 <__divsi3+0x4c>
   327b0:	03cb      	lsls	r3, r1, #15
   327b2:	1ac0      	subs	r0, r0, r3
   327b4:	4152      	adcs	r2, r2
   327b6:	0b83      	lsrs	r3, r0, #14
   327b8:	428b      	cmp	r3, r1
   327ba:	d301      	bcc.n	327c0 <__divsi3+0x58>
   327bc:	038b      	lsls	r3, r1, #14
   327be:	1ac0      	subs	r0, r0, r3
   327c0:	4152      	adcs	r2, r2
   327c2:	0b43      	lsrs	r3, r0, #13
   327c4:	428b      	cmp	r3, r1
   327c6:	d301      	bcc.n	327cc <__divsi3+0x64>
   327c8:	034b      	lsls	r3, r1, #13
   327ca:	1ac0      	subs	r0, r0, r3
   327cc:	4152      	adcs	r2, r2
   327ce:	0b03      	lsrs	r3, r0, #12
   327d0:	428b      	cmp	r3, r1
   327d2:	d301      	bcc.n	327d8 <__divsi3+0x70>
   327d4:	030b      	lsls	r3, r1, #12
   327d6:	1ac0      	subs	r0, r0, r3
   327d8:	4152      	adcs	r2, r2
   327da:	0ac3      	lsrs	r3, r0, #11
   327dc:	428b      	cmp	r3, r1
   327de:	d301      	bcc.n	327e4 <__divsi3+0x7c>
   327e0:	02cb      	lsls	r3, r1, #11
   327e2:	1ac0      	subs	r0, r0, r3
   327e4:	4152      	adcs	r2, r2
   327e6:	0a83      	lsrs	r3, r0, #10
   327e8:	428b      	cmp	r3, r1
   327ea:	d301      	bcc.n	327f0 <__divsi3+0x88>
   327ec:	028b      	lsls	r3, r1, #10
   327ee:	1ac0      	subs	r0, r0, r3
   327f0:	4152      	adcs	r2, r2
   327f2:	0a43      	lsrs	r3, r0, #9
   327f4:	428b      	cmp	r3, r1
   327f6:	d301      	bcc.n	327fc <__divsi3+0x94>
   327f8:	024b      	lsls	r3, r1, #9
   327fa:	1ac0      	subs	r0, r0, r3
   327fc:	4152      	adcs	r2, r2
   327fe:	0a03      	lsrs	r3, r0, #8
   32800:	428b      	cmp	r3, r1
   32802:	d301      	bcc.n	32808 <__divsi3+0xa0>
   32804:	020b      	lsls	r3, r1, #8
   32806:	1ac0      	subs	r0, r0, r3
   32808:	4152      	adcs	r2, r2
   3280a:	d2cd      	bcs.n	327a8 <__divsi3+0x40>
   3280c:	09c3      	lsrs	r3, r0, #7
   3280e:	428b      	cmp	r3, r1
   32810:	d301      	bcc.n	32816 <__divsi3+0xae>
   32812:	01cb      	lsls	r3, r1, #7
   32814:	1ac0      	subs	r0, r0, r3
   32816:	4152      	adcs	r2, r2
   32818:	0983      	lsrs	r3, r0, #6
   3281a:	428b      	cmp	r3, r1
   3281c:	d301      	bcc.n	32822 <__divsi3+0xba>
   3281e:	018b      	lsls	r3, r1, #6
   32820:	1ac0      	subs	r0, r0, r3
   32822:	4152      	adcs	r2, r2
   32824:	0943      	lsrs	r3, r0, #5
   32826:	428b      	cmp	r3, r1
   32828:	d301      	bcc.n	3282e <__divsi3+0xc6>
   3282a:	014b      	lsls	r3, r1, #5
   3282c:	1ac0      	subs	r0, r0, r3
   3282e:	4152      	adcs	r2, r2
   32830:	0903      	lsrs	r3, r0, #4
   32832:	428b      	cmp	r3, r1
   32834:	d301      	bcc.n	3283a <__divsi3+0xd2>
   32836:	010b      	lsls	r3, r1, #4
   32838:	1ac0      	subs	r0, r0, r3
   3283a:	4152      	adcs	r2, r2
   3283c:	08c3      	lsrs	r3, r0, #3
   3283e:	428b      	cmp	r3, r1
   32840:	d301      	bcc.n	32846 <__divsi3+0xde>
   32842:	00cb      	lsls	r3, r1, #3
   32844:	1ac0      	subs	r0, r0, r3
   32846:	4152      	adcs	r2, r2
   32848:	0883      	lsrs	r3, r0, #2
   3284a:	428b      	cmp	r3, r1
   3284c:	d301      	bcc.n	32852 <__divsi3+0xea>
   3284e:	008b      	lsls	r3, r1, #2
   32850:	1ac0      	subs	r0, r0, r3
   32852:	4152      	adcs	r2, r2
   32854:	0843      	lsrs	r3, r0, #1
   32856:	428b      	cmp	r3, r1
   32858:	d301      	bcc.n	3285e <__divsi3+0xf6>
   3285a:	004b      	lsls	r3, r1, #1
   3285c:	1ac0      	subs	r0, r0, r3
   3285e:	4152      	adcs	r2, r2
   32860:	1a41      	subs	r1, r0, r1
   32862:	d200      	bcs.n	32866 <__divsi3+0xfe>
   32864:	4601      	mov	r1, r0
   32866:	4152      	adcs	r2, r2
   32868:	4610      	mov	r0, r2
   3286a:	4770      	bx	lr
   3286c:	e05d      	b.n	3292a <__divsi3+0x1c2>
   3286e:	0fca      	lsrs	r2, r1, #31
   32870:	d000      	beq.n	32874 <__divsi3+0x10c>
   32872:	4249      	negs	r1, r1
   32874:	1003      	asrs	r3, r0, #32
   32876:	d300      	bcc.n	3287a <__divsi3+0x112>
   32878:	4240      	negs	r0, r0
   3287a:	4053      	eors	r3, r2
   3287c:	2200      	movs	r2, #0
   3287e:	469c      	mov	ip, r3
   32880:	0903      	lsrs	r3, r0, #4
   32882:	428b      	cmp	r3, r1
   32884:	d32d      	bcc.n	328e2 <__divsi3+0x17a>
   32886:	0a03      	lsrs	r3, r0, #8
   32888:	428b      	cmp	r3, r1
   3288a:	d312      	bcc.n	328b2 <__divsi3+0x14a>
   3288c:	22fc      	movs	r2, #252	; 0xfc
   3288e:	0189      	lsls	r1, r1, #6
   32890:	ba12      	rev	r2, r2
   32892:	0a03      	lsrs	r3, r0, #8
   32894:	428b      	cmp	r3, r1
   32896:	d30c      	bcc.n	328b2 <__divsi3+0x14a>
   32898:	0189      	lsls	r1, r1, #6
   3289a:	1192      	asrs	r2, r2, #6
   3289c:	428b      	cmp	r3, r1
   3289e:	d308      	bcc.n	328b2 <__divsi3+0x14a>
   328a0:	0189      	lsls	r1, r1, #6
   328a2:	1192      	asrs	r2, r2, #6
   328a4:	428b      	cmp	r3, r1
   328a6:	d304      	bcc.n	328b2 <__divsi3+0x14a>
   328a8:	0189      	lsls	r1, r1, #6
   328aa:	d03a      	beq.n	32922 <__divsi3+0x1ba>
   328ac:	1192      	asrs	r2, r2, #6
   328ae:	e000      	b.n	328b2 <__divsi3+0x14a>
   328b0:	0989      	lsrs	r1, r1, #6
   328b2:	09c3      	lsrs	r3, r0, #7
   328b4:	428b      	cmp	r3, r1
   328b6:	d301      	bcc.n	328bc <__divsi3+0x154>
   328b8:	01cb      	lsls	r3, r1, #7
   328ba:	1ac0      	subs	r0, r0, r3
   328bc:	4152      	adcs	r2, r2
   328be:	0983      	lsrs	r3, r0, #6
   328c0:	428b      	cmp	r3, r1
   328c2:	d301      	bcc.n	328c8 <__divsi3+0x160>
   328c4:	018b      	lsls	r3, r1, #6
   328c6:	1ac0      	subs	r0, r0, r3
   328c8:	4152      	adcs	r2, r2
   328ca:	0943      	lsrs	r3, r0, #5
   328cc:	428b      	cmp	r3, r1
   328ce:	d301      	bcc.n	328d4 <__divsi3+0x16c>
   328d0:	014b      	lsls	r3, r1, #5
   328d2:	1ac0      	subs	r0, r0, r3
   328d4:	4152      	adcs	r2, r2
   328d6:	0903      	lsrs	r3, r0, #4
   328d8:	428b      	cmp	r3, r1
   328da:	d301      	bcc.n	328e0 <__divsi3+0x178>
   328dc:	010b      	lsls	r3, r1, #4
   328de:	1ac0      	subs	r0, r0, r3
   328e0:	4152      	adcs	r2, r2
   328e2:	08c3      	lsrs	r3, r0, #3
   328e4:	428b      	cmp	r3, r1
   328e6:	d301      	bcc.n	328ec <__divsi3+0x184>
   328e8:	00cb      	lsls	r3, r1, #3
   328ea:	1ac0      	subs	r0, r0, r3
   328ec:	4152      	adcs	r2, r2
   328ee:	0883      	lsrs	r3, r0, #2
   328f0:	428b      	cmp	r3, r1
   328f2:	d301      	bcc.n	328f8 <__divsi3+0x190>
   328f4:	008b      	lsls	r3, r1, #2
   328f6:	1ac0      	subs	r0, r0, r3
   328f8:	4152      	adcs	r2, r2
   328fa:	d2d9      	bcs.n	328b0 <__divsi3+0x148>
   328fc:	0843      	lsrs	r3, r0, #1
   328fe:	428b      	cmp	r3, r1
   32900:	d301      	bcc.n	32906 <__divsi3+0x19e>
   32902:	004b      	lsls	r3, r1, #1
   32904:	1ac0      	subs	r0, r0, r3
   32906:	4152      	adcs	r2, r2
   32908:	1a41      	subs	r1, r0, r1
   3290a:	d200      	bcs.n	3290e <__divsi3+0x1a6>
   3290c:	4601      	mov	r1, r0
   3290e:	4663      	mov	r3, ip
   32910:	4152      	adcs	r2, r2
   32912:	105b      	asrs	r3, r3, #1
   32914:	4610      	mov	r0, r2
   32916:	d301      	bcc.n	3291c <__divsi3+0x1b4>
   32918:	4240      	negs	r0, r0
   3291a:	2b00      	cmp	r3, #0
   3291c:	d500      	bpl.n	32920 <__divsi3+0x1b8>
   3291e:	4249      	negs	r1, r1
   32920:	4770      	bx	lr
   32922:	4663      	mov	r3, ip
   32924:	105b      	asrs	r3, r3, #1
   32926:	d300      	bcc.n	3292a <__divsi3+0x1c2>
   32928:	4240      	negs	r0, r0
   3292a:	b501      	push	{r0, lr}
   3292c:	2000      	movs	r0, #0
   3292e:	f000 f805 	bl	3293c <__aeabi_idiv0>
   32932:	bd02      	pop	{r1, pc}

00032934 <__aeabi_idivmod>:
   32934:	2900      	cmp	r1, #0
   32936:	d0f8      	beq.n	3292a <__divsi3+0x1c2>
   32938:	e716      	b.n	32768 <__divsi3>
   3293a:	4770      	bx	lr

0003293c <__aeabi_idiv0>:
   3293c:	4770      	bx	lr
   3293e:	46c0      	nop			; (mov r8, r8)

00032940 <__aeabi_lmul>:
   32940:	b5f0      	push	{r4, r5, r6, r7, lr}
   32942:	46ce      	mov	lr, r9
   32944:	4647      	mov	r7, r8
   32946:	0415      	lsls	r5, r2, #16
   32948:	0c2d      	lsrs	r5, r5, #16
   3294a:	002e      	movs	r6, r5
   3294c:	b580      	push	{r7, lr}
   3294e:	0407      	lsls	r7, r0, #16
   32950:	0c14      	lsrs	r4, r2, #16
   32952:	0c3f      	lsrs	r7, r7, #16
   32954:	4699      	mov	r9, r3
   32956:	0c03      	lsrs	r3, r0, #16
   32958:	437e      	muls	r6, r7
   3295a:	435d      	muls	r5, r3
   3295c:	4367      	muls	r7, r4
   3295e:	4363      	muls	r3, r4
   32960:	197f      	adds	r7, r7, r5
   32962:	0c34      	lsrs	r4, r6, #16
   32964:	19e4      	adds	r4, r4, r7
   32966:	469c      	mov	ip, r3
   32968:	42a5      	cmp	r5, r4
   3296a:	d903      	bls.n	32974 <__aeabi_lmul+0x34>
   3296c:	2380      	movs	r3, #128	; 0x80
   3296e:	025b      	lsls	r3, r3, #9
   32970:	4698      	mov	r8, r3
   32972:	44c4      	add	ip, r8
   32974:	464b      	mov	r3, r9
   32976:	4351      	muls	r1, r2
   32978:	4343      	muls	r3, r0
   3297a:	0436      	lsls	r6, r6, #16
   3297c:	0c36      	lsrs	r6, r6, #16
   3297e:	0c25      	lsrs	r5, r4, #16
   32980:	0424      	lsls	r4, r4, #16
   32982:	4465      	add	r5, ip
   32984:	19a4      	adds	r4, r4, r6
   32986:	1859      	adds	r1, r3, r1
   32988:	1949      	adds	r1, r1, r5
   3298a:	0020      	movs	r0, r4
   3298c:	bc0c      	pop	{r2, r3}
   3298e:	4690      	mov	r8, r2
   32990:	4699      	mov	r9, r3
   32992:	bdf0      	pop	{r4, r5, r6, r7, pc}

00032994 <__aeabi_fmul>:
   32994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32996:	4657      	mov	r7, sl
   32998:	464e      	mov	r6, r9
   3299a:	4645      	mov	r5, r8
   3299c:	46de      	mov	lr, fp
   3299e:	b5e0      	push	{r5, r6, r7, lr}
   329a0:	0247      	lsls	r7, r0, #9
   329a2:	0046      	lsls	r6, r0, #1
   329a4:	4688      	mov	r8, r1
   329a6:	0a7f      	lsrs	r7, r7, #9
   329a8:	0e36      	lsrs	r6, r6, #24
   329aa:	0fc4      	lsrs	r4, r0, #31
   329ac:	2e00      	cmp	r6, #0
   329ae:	d047      	beq.n	32a40 <__aeabi_fmul+0xac>
   329b0:	2eff      	cmp	r6, #255	; 0xff
   329b2:	d024      	beq.n	329fe <__aeabi_fmul+0x6a>
   329b4:	00fb      	lsls	r3, r7, #3
   329b6:	2780      	movs	r7, #128	; 0x80
   329b8:	04ff      	lsls	r7, r7, #19
   329ba:	431f      	orrs	r7, r3
   329bc:	2300      	movs	r3, #0
   329be:	4699      	mov	r9, r3
   329c0:	469a      	mov	sl, r3
   329c2:	3e7f      	subs	r6, #127	; 0x7f
   329c4:	4643      	mov	r3, r8
   329c6:	025d      	lsls	r5, r3, #9
   329c8:	0058      	lsls	r0, r3, #1
   329ca:	0fdb      	lsrs	r3, r3, #31
   329cc:	0a6d      	lsrs	r5, r5, #9
   329ce:	0e00      	lsrs	r0, r0, #24
   329d0:	4698      	mov	r8, r3
   329d2:	d043      	beq.n	32a5c <__aeabi_fmul+0xc8>
   329d4:	28ff      	cmp	r0, #255	; 0xff
   329d6:	d03b      	beq.n	32a50 <__aeabi_fmul+0xbc>
   329d8:	00eb      	lsls	r3, r5, #3
   329da:	2580      	movs	r5, #128	; 0x80
   329dc:	2200      	movs	r2, #0
   329de:	04ed      	lsls	r5, r5, #19
   329e0:	431d      	orrs	r5, r3
   329e2:	387f      	subs	r0, #127	; 0x7f
   329e4:	1836      	adds	r6, r6, r0
   329e6:	1c73      	adds	r3, r6, #1
   329e8:	4641      	mov	r1, r8
   329ea:	469b      	mov	fp, r3
   329ec:	464b      	mov	r3, r9
   329ee:	4061      	eors	r1, r4
   329f0:	4313      	orrs	r3, r2
   329f2:	2b0f      	cmp	r3, #15
   329f4:	d864      	bhi.n	32ac0 <__aeabi_fmul+0x12c>
   329f6:	4875      	ldr	r0, [pc, #468]	; (32bcc <__aeabi_fmul+0x238>)
   329f8:	009b      	lsls	r3, r3, #2
   329fa:	58c3      	ldr	r3, [r0, r3]
   329fc:	469f      	mov	pc, r3
   329fe:	2f00      	cmp	r7, #0
   32a00:	d142      	bne.n	32a88 <__aeabi_fmul+0xf4>
   32a02:	2308      	movs	r3, #8
   32a04:	4699      	mov	r9, r3
   32a06:	3b06      	subs	r3, #6
   32a08:	26ff      	movs	r6, #255	; 0xff
   32a0a:	469a      	mov	sl, r3
   32a0c:	e7da      	b.n	329c4 <__aeabi_fmul+0x30>
   32a0e:	4641      	mov	r1, r8
   32a10:	2a02      	cmp	r2, #2
   32a12:	d028      	beq.n	32a66 <__aeabi_fmul+0xd2>
   32a14:	2a03      	cmp	r2, #3
   32a16:	d100      	bne.n	32a1a <__aeabi_fmul+0x86>
   32a18:	e0ce      	b.n	32bb8 <__aeabi_fmul+0x224>
   32a1a:	2a01      	cmp	r2, #1
   32a1c:	d000      	beq.n	32a20 <__aeabi_fmul+0x8c>
   32a1e:	e0ac      	b.n	32b7a <__aeabi_fmul+0x1e6>
   32a20:	4011      	ands	r1, r2
   32a22:	2000      	movs	r0, #0
   32a24:	2200      	movs	r2, #0
   32a26:	b2cc      	uxtb	r4, r1
   32a28:	0240      	lsls	r0, r0, #9
   32a2a:	05d2      	lsls	r2, r2, #23
   32a2c:	0a40      	lsrs	r0, r0, #9
   32a2e:	07e4      	lsls	r4, r4, #31
   32a30:	4310      	orrs	r0, r2
   32a32:	4320      	orrs	r0, r4
   32a34:	bc3c      	pop	{r2, r3, r4, r5}
   32a36:	4690      	mov	r8, r2
   32a38:	4699      	mov	r9, r3
   32a3a:	46a2      	mov	sl, r4
   32a3c:	46ab      	mov	fp, r5
   32a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32a40:	2f00      	cmp	r7, #0
   32a42:	d115      	bne.n	32a70 <__aeabi_fmul+0xdc>
   32a44:	2304      	movs	r3, #4
   32a46:	4699      	mov	r9, r3
   32a48:	3b03      	subs	r3, #3
   32a4a:	2600      	movs	r6, #0
   32a4c:	469a      	mov	sl, r3
   32a4e:	e7b9      	b.n	329c4 <__aeabi_fmul+0x30>
   32a50:	20ff      	movs	r0, #255	; 0xff
   32a52:	2202      	movs	r2, #2
   32a54:	2d00      	cmp	r5, #0
   32a56:	d0c5      	beq.n	329e4 <__aeabi_fmul+0x50>
   32a58:	2203      	movs	r2, #3
   32a5a:	e7c3      	b.n	329e4 <__aeabi_fmul+0x50>
   32a5c:	2d00      	cmp	r5, #0
   32a5e:	d119      	bne.n	32a94 <__aeabi_fmul+0x100>
   32a60:	2000      	movs	r0, #0
   32a62:	2201      	movs	r2, #1
   32a64:	e7be      	b.n	329e4 <__aeabi_fmul+0x50>
   32a66:	2401      	movs	r4, #1
   32a68:	22ff      	movs	r2, #255	; 0xff
   32a6a:	400c      	ands	r4, r1
   32a6c:	2000      	movs	r0, #0
   32a6e:	e7db      	b.n	32a28 <__aeabi_fmul+0x94>
   32a70:	0038      	movs	r0, r7
   32a72:	f001 fd65 	bl	34540 <__clzsi2>
   32a76:	2676      	movs	r6, #118	; 0x76
   32a78:	1f43      	subs	r3, r0, #5
   32a7a:	409f      	lsls	r7, r3
   32a7c:	2300      	movs	r3, #0
   32a7e:	4276      	negs	r6, r6
   32a80:	1a36      	subs	r6, r6, r0
   32a82:	4699      	mov	r9, r3
   32a84:	469a      	mov	sl, r3
   32a86:	e79d      	b.n	329c4 <__aeabi_fmul+0x30>
   32a88:	230c      	movs	r3, #12
   32a8a:	4699      	mov	r9, r3
   32a8c:	3b09      	subs	r3, #9
   32a8e:	26ff      	movs	r6, #255	; 0xff
   32a90:	469a      	mov	sl, r3
   32a92:	e797      	b.n	329c4 <__aeabi_fmul+0x30>
   32a94:	0028      	movs	r0, r5
   32a96:	f001 fd53 	bl	34540 <__clzsi2>
   32a9a:	1f43      	subs	r3, r0, #5
   32a9c:	409d      	lsls	r5, r3
   32a9e:	2376      	movs	r3, #118	; 0x76
   32aa0:	425b      	negs	r3, r3
   32aa2:	1a18      	subs	r0, r3, r0
   32aa4:	2200      	movs	r2, #0
   32aa6:	e79d      	b.n	329e4 <__aeabi_fmul+0x50>
   32aa8:	2080      	movs	r0, #128	; 0x80
   32aaa:	2400      	movs	r4, #0
   32aac:	03c0      	lsls	r0, r0, #15
   32aae:	22ff      	movs	r2, #255	; 0xff
   32ab0:	e7ba      	b.n	32a28 <__aeabi_fmul+0x94>
   32ab2:	003d      	movs	r5, r7
   32ab4:	4652      	mov	r2, sl
   32ab6:	e7ab      	b.n	32a10 <__aeabi_fmul+0x7c>
   32ab8:	003d      	movs	r5, r7
   32aba:	0021      	movs	r1, r4
   32abc:	4652      	mov	r2, sl
   32abe:	e7a7      	b.n	32a10 <__aeabi_fmul+0x7c>
   32ac0:	0c3b      	lsrs	r3, r7, #16
   32ac2:	469c      	mov	ip, r3
   32ac4:	042a      	lsls	r2, r5, #16
   32ac6:	0c12      	lsrs	r2, r2, #16
   32ac8:	0c2b      	lsrs	r3, r5, #16
   32aca:	0014      	movs	r4, r2
   32acc:	4660      	mov	r0, ip
   32ace:	4665      	mov	r5, ip
   32ad0:	043f      	lsls	r7, r7, #16
   32ad2:	0c3f      	lsrs	r7, r7, #16
   32ad4:	437c      	muls	r4, r7
   32ad6:	4342      	muls	r2, r0
   32ad8:	435d      	muls	r5, r3
   32ada:	437b      	muls	r3, r7
   32adc:	0c27      	lsrs	r7, r4, #16
   32ade:	189b      	adds	r3, r3, r2
   32ae0:	18ff      	adds	r7, r7, r3
   32ae2:	42ba      	cmp	r2, r7
   32ae4:	d903      	bls.n	32aee <__aeabi_fmul+0x15a>
   32ae6:	2380      	movs	r3, #128	; 0x80
   32ae8:	025b      	lsls	r3, r3, #9
   32aea:	469c      	mov	ip, r3
   32aec:	4465      	add	r5, ip
   32aee:	0424      	lsls	r4, r4, #16
   32af0:	043a      	lsls	r2, r7, #16
   32af2:	0c24      	lsrs	r4, r4, #16
   32af4:	1912      	adds	r2, r2, r4
   32af6:	0193      	lsls	r3, r2, #6
   32af8:	1e5c      	subs	r4, r3, #1
   32afa:	41a3      	sbcs	r3, r4
   32afc:	0c3f      	lsrs	r7, r7, #16
   32afe:	0e92      	lsrs	r2, r2, #26
   32b00:	197d      	adds	r5, r7, r5
   32b02:	431a      	orrs	r2, r3
   32b04:	01ad      	lsls	r5, r5, #6
   32b06:	4315      	orrs	r5, r2
   32b08:	012b      	lsls	r3, r5, #4
   32b0a:	d504      	bpl.n	32b16 <__aeabi_fmul+0x182>
   32b0c:	2301      	movs	r3, #1
   32b0e:	465e      	mov	r6, fp
   32b10:	086a      	lsrs	r2, r5, #1
   32b12:	401d      	ands	r5, r3
   32b14:	4315      	orrs	r5, r2
   32b16:	0032      	movs	r2, r6
   32b18:	327f      	adds	r2, #127	; 0x7f
   32b1a:	2a00      	cmp	r2, #0
   32b1c:	dd25      	ble.n	32b6a <__aeabi_fmul+0x1d6>
   32b1e:	076b      	lsls	r3, r5, #29
   32b20:	d004      	beq.n	32b2c <__aeabi_fmul+0x198>
   32b22:	230f      	movs	r3, #15
   32b24:	402b      	ands	r3, r5
   32b26:	2b04      	cmp	r3, #4
   32b28:	d000      	beq.n	32b2c <__aeabi_fmul+0x198>
   32b2a:	3504      	adds	r5, #4
   32b2c:	012b      	lsls	r3, r5, #4
   32b2e:	d503      	bpl.n	32b38 <__aeabi_fmul+0x1a4>
   32b30:	0032      	movs	r2, r6
   32b32:	4b27      	ldr	r3, [pc, #156]	; (32bd0 <__aeabi_fmul+0x23c>)
   32b34:	3280      	adds	r2, #128	; 0x80
   32b36:	401d      	ands	r5, r3
   32b38:	2afe      	cmp	r2, #254	; 0xfe
   32b3a:	dc94      	bgt.n	32a66 <__aeabi_fmul+0xd2>
   32b3c:	2401      	movs	r4, #1
   32b3e:	01a8      	lsls	r0, r5, #6
   32b40:	0a40      	lsrs	r0, r0, #9
   32b42:	b2d2      	uxtb	r2, r2
   32b44:	400c      	ands	r4, r1
   32b46:	e76f      	b.n	32a28 <__aeabi_fmul+0x94>
   32b48:	2080      	movs	r0, #128	; 0x80
   32b4a:	03c0      	lsls	r0, r0, #15
   32b4c:	4207      	tst	r7, r0
   32b4e:	d007      	beq.n	32b60 <__aeabi_fmul+0x1cc>
   32b50:	4205      	tst	r5, r0
   32b52:	d105      	bne.n	32b60 <__aeabi_fmul+0x1cc>
   32b54:	4328      	orrs	r0, r5
   32b56:	0240      	lsls	r0, r0, #9
   32b58:	0a40      	lsrs	r0, r0, #9
   32b5a:	4644      	mov	r4, r8
   32b5c:	22ff      	movs	r2, #255	; 0xff
   32b5e:	e763      	b.n	32a28 <__aeabi_fmul+0x94>
   32b60:	4338      	orrs	r0, r7
   32b62:	0240      	lsls	r0, r0, #9
   32b64:	0a40      	lsrs	r0, r0, #9
   32b66:	22ff      	movs	r2, #255	; 0xff
   32b68:	e75e      	b.n	32a28 <__aeabi_fmul+0x94>
   32b6a:	2401      	movs	r4, #1
   32b6c:	1aa3      	subs	r3, r4, r2
   32b6e:	2b1b      	cmp	r3, #27
   32b70:	dd05      	ble.n	32b7e <__aeabi_fmul+0x1ea>
   32b72:	400c      	ands	r4, r1
   32b74:	2200      	movs	r2, #0
   32b76:	2000      	movs	r0, #0
   32b78:	e756      	b.n	32a28 <__aeabi_fmul+0x94>
   32b7a:	465e      	mov	r6, fp
   32b7c:	e7cb      	b.n	32b16 <__aeabi_fmul+0x182>
   32b7e:	002a      	movs	r2, r5
   32b80:	2020      	movs	r0, #32
   32b82:	40da      	lsrs	r2, r3
   32b84:	1ac3      	subs	r3, r0, r3
   32b86:	409d      	lsls	r5, r3
   32b88:	002b      	movs	r3, r5
   32b8a:	1e5d      	subs	r5, r3, #1
   32b8c:	41ab      	sbcs	r3, r5
   32b8e:	4313      	orrs	r3, r2
   32b90:	075a      	lsls	r2, r3, #29
   32b92:	d004      	beq.n	32b9e <__aeabi_fmul+0x20a>
   32b94:	220f      	movs	r2, #15
   32b96:	401a      	ands	r2, r3
   32b98:	2a04      	cmp	r2, #4
   32b9a:	d000      	beq.n	32b9e <__aeabi_fmul+0x20a>
   32b9c:	3304      	adds	r3, #4
   32b9e:	015a      	lsls	r2, r3, #5
   32ba0:	d504      	bpl.n	32bac <__aeabi_fmul+0x218>
   32ba2:	2401      	movs	r4, #1
   32ba4:	2201      	movs	r2, #1
   32ba6:	400c      	ands	r4, r1
   32ba8:	2000      	movs	r0, #0
   32baa:	e73d      	b.n	32a28 <__aeabi_fmul+0x94>
   32bac:	2401      	movs	r4, #1
   32bae:	019b      	lsls	r3, r3, #6
   32bb0:	0a58      	lsrs	r0, r3, #9
   32bb2:	400c      	ands	r4, r1
   32bb4:	2200      	movs	r2, #0
   32bb6:	e737      	b.n	32a28 <__aeabi_fmul+0x94>
   32bb8:	2080      	movs	r0, #128	; 0x80
   32bba:	2401      	movs	r4, #1
   32bbc:	03c0      	lsls	r0, r0, #15
   32bbe:	4328      	orrs	r0, r5
   32bc0:	0240      	lsls	r0, r0, #9
   32bc2:	0a40      	lsrs	r0, r0, #9
   32bc4:	400c      	ands	r4, r1
   32bc6:	22ff      	movs	r2, #255	; 0xff
   32bc8:	e72e      	b.n	32a28 <__aeabi_fmul+0x94>
   32bca:	46c0      	nop			; (mov r8, r8)
   32bcc:	00039d30 	.word	0x00039d30
   32bd0:	f7ffffff 	.word	0xf7ffffff

00032bd4 <__aeabi_f2iz>:
   32bd4:	0241      	lsls	r1, r0, #9
   32bd6:	0043      	lsls	r3, r0, #1
   32bd8:	0fc2      	lsrs	r2, r0, #31
   32bda:	0a49      	lsrs	r1, r1, #9
   32bdc:	0e1b      	lsrs	r3, r3, #24
   32bde:	2000      	movs	r0, #0
   32be0:	2b7e      	cmp	r3, #126	; 0x7e
   32be2:	dd0d      	ble.n	32c00 <__aeabi_f2iz+0x2c>
   32be4:	2b9d      	cmp	r3, #157	; 0x9d
   32be6:	dc0c      	bgt.n	32c02 <__aeabi_f2iz+0x2e>
   32be8:	2080      	movs	r0, #128	; 0x80
   32bea:	0400      	lsls	r0, r0, #16
   32bec:	4301      	orrs	r1, r0
   32bee:	2b95      	cmp	r3, #149	; 0x95
   32bf0:	dc0a      	bgt.n	32c08 <__aeabi_f2iz+0x34>
   32bf2:	2096      	movs	r0, #150	; 0x96
   32bf4:	1ac3      	subs	r3, r0, r3
   32bf6:	40d9      	lsrs	r1, r3
   32bf8:	4248      	negs	r0, r1
   32bfa:	2a00      	cmp	r2, #0
   32bfc:	d100      	bne.n	32c00 <__aeabi_f2iz+0x2c>
   32bfe:	0008      	movs	r0, r1
   32c00:	4770      	bx	lr
   32c02:	4b03      	ldr	r3, [pc, #12]	; (32c10 <__aeabi_f2iz+0x3c>)
   32c04:	18d0      	adds	r0, r2, r3
   32c06:	e7fb      	b.n	32c00 <__aeabi_f2iz+0x2c>
   32c08:	3b96      	subs	r3, #150	; 0x96
   32c0a:	4099      	lsls	r1, r3
   32c0c:	e7f4      	b.n	32bf8 <__aeabi_f2iz+0x24>
   32c0e:	46c0      	nop			; (mov r8, r8)
   32c10:	7fffffff 	.word	0x7fffffff

00032c14 <__aeabi_i2f>:
   32c14:	b570      	push	{r4, r5, r6, lr}
   32c16:	2800      	cmp	r0, #0
   32c18:	d030      	beq.n	32c7c <__aeabi_i2f+0x68>
   32c1a:	17c3      	asrs	r3, r0, #31
   32c1c:	18c4      	adds	r4, r0, r3
   32c1e:	405c      	eors	r4, r3
   32c20:	0fc5      	lsrs	r5, r0, #31
   32c22:	0020      	movs	r0, r4
   32c24:	f001 fc8c 	bl	34540 <__clzsi2>
   32c28:	239e      	movs	r3, #158	; 0x9e
   32c2a:	1a1b      	subs	r3, r3, r0
   32c2c:	2b96      	cmp	r3, #150	; 0x96
   32c2e:	dc0d      	bgt.n	32c4c <__aeabi_i2f+0x38>
   32c30:	2296      	movs	r2, #150	; 0x96
   32c32:	1ad2      	subs	r2, r2, r3
   32c34:	4094      	lsls	r4, r2
   32c36:	002a      	movs	r2, r5
   32c38:	0264      	lsls	r4, r4, #9
   32c3a:	0a64      	lsrs	r4, r4, #9
   32c3c:	b2db      	uxtb	r3, r3
   32c3e:	0264      	lsls	r4, r4, #9
   32c40:	05db      	lsls	r3, r3, #23
   32c42:	0a60      	lsrs	r0, r4, #9
   32c44:	07d2      	lsls	r2, r2, #31
   32c46:	4318      	orrs	r0, r3
   32c48:	4310      	orrs	r0, r2
   32c4a:	bd70      	pop	{r4, r5, r6, pc}
   32c4c:	2b99      	cmp	r3, #153	; 0x99
   32c4e:	dc19      	bgt.n	32c84 <__aeabi_i2f+0x70>
   32c50:	2299      	movs	r2, #153	; 0x99
   32c52:	1ad2      	subs	r2, r2, r3
   32c54:	2a00      	cmp	r2, #0
   32c56:	dd29      	ble.n	32cac <__aeabi_i2f+0x98>
   32c58:	4094      	lsls	r4, r2
   32c5a:	0022      	movs	r2, r4
   32c5c:	4c14      	ldr	r4, [pc, #80]	; (32cb0 <__aeabi_i2f+0x9c>)
   32c5e:	4014      	ands	r4, r2
   32c60:	0751      	lsls	r1, r2, #29
   32c62:	d004      	beq.n	32c6e <__aeabi_i2f+0x5a>
   32c64:	210f      	movs	r1, #15
   32c66:	400a      	ands	r2, r1
   32c68:	2a04      	cmp	r2, #4
   32c6a:	d000      	beq.n	32c6e <__aeabi_i2f+0x5a>
   32c6c:	3404      	adds	r4, #4
   32c6e:	0162      	lsls	r2, r4, #5
   32c70:	d413      	bmi.n	32c9a <__aeabi_i2f+0x86>
   32c72:	01a4      	lsls	r4, r4, #6
   32c74:	0a64      	lsrs	r4, r4, #9
   32c76:	b2db      	uxtb	r3, r3
   32c78:	002a      	movs	r2, r5
   32c7a:	e7e0      	b.n	32c3e <__aeabi_i2f+0x2a>
   32c7c:	2200      	movs	r2, #0
   32c7e:	2300      	movs	r3, #0
   32c80:	2400      	movs	r4, #0
   32c82:	e7dc      	b.n	32c3e <__aeabi_i2f+0x2a>
   32c84:	2205      	movs	r2, #5
   32c86:	0021      	movs	r1, r4
   32c88:	1a12      	subs	r2, r2, r0
   32c8a:	40d1      	lsrs	r1, r2
   32c8c:	22b9      	movs	r2, #185	; 0xb9
   32c8e:	1ad2      	subs	r2, r2, r3
   32c90:	4094      	lsls	r4, r2
   32c92:	1e62      	subs	r2, r4, #1
   32c94:	4194      	sbcs	r4, r2
   32c96:	430c      	orrs	r4, r1
   32c98:	e7da      	b.n	32c50 <__aeabi_i2f+0x3c>
   32c9a:	4b05      	ldr	r3, [pc, #20]	; (32cb0 <__aeabi_i2f+0x9c>)
   32c9c:	002a      	movs	r2, r5
   32c9e:	401c      	ands	r4, r3
   32ca0:	239f      	movs	r3, #159	; 0x9f
   32ca2:	01a4      	lsls	r4, r4, #6
   32ca4:	1a1b      	subs	r3, r3, r0
   32ca6:	0a64      	lsrs	r4, r4, #9
   32ca8:	b2db      	uxtb	r3, r3
   32caa:	e7c8      	b.n	32c3e <__aeabi_i2f+0x2a>
   32cac:	0022      	movs	r2, r4
   32cae:	e7d5      	b.n	32c5c <__aeabi_i2f+0x48>
   32cb0:	fbffffff 	.word	0xfbffffff

00032cb4 <__aeabi_dadd>:
   32cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32cb6:	4645      	mov	r5, r8
   32cb8:	46de      	mov	lr, fp
   32cba:	4657      	mov	r7, sl
   32cbc:	464e      	mov	r6, r9
   32cbe:	030c      	lsls	r4, r1, #12
   32cc0:	b5e0      	push	{r5, r6, r7, lr}
   32cc2:	004e      	lsls	r6, r1, #1
   32cc4:	0fc9      	lsrs	r1, r1, #31
   32cc6:	4688      	mov	r8, r1
   32cc8:	000d      	movs	r5, r1
   32cca:	0a61      	lsrs	r1, r4, #9
   32ccc:	0f44      	lsrs	r4, r0, #29
   32cce:	430c      	orrs	r4, r1
   32cd0:	00c7      	lsls	r7, r0, #3
   32cd2:	0319      	lsls	r1, r3, #12
   32cd4:	0058      	lsls	r0, r3, #1
   32cd6:	0fdb      	lsrs	r3, r3, #31
   32cd8:	469b      	mov	fp, r3
   32cda:	0a4b      	lsrs	r3, r1, #9
   32cdc:	0f51      	lsrs	r1, r2, #29
   32cde:	430b      	orrs	r3, r1
   32ce0:	0d76      	lsrs	r6, r6, #21
   32ce2:	0d40      	lsrs	r0, r0, #21
   32ce4:	0019      	movs	r1, r3
   32ce6:	00d2      	lsls	r2, r2, #3
   32ce8:	45d8      	cmp	r8, fp
   32cea:	d100      	bne.n	32cee <__aeabi_dadd+0x3a>
   32cec:	e0ae      	b.n	32e4c <__aeabi_dadd+0x198>
   32cee:	1a35      	subs	r5, r6, r0
   32cf0:	2d00      	cmp	r5, #0
   32cf2:	dc00      	bgt.n	32cf6 <__aeabi_dadd+0x42>
   32cf4:	e0f6      	b.n	32ee4 <__aeabi_dadd+0x230>
   32cf6:	2800      	cmp	r0, #0
   32cf8:	d10f      	bne.n	32d1a <__aeabi_dadd+0x66>
   32cfa:	4313      	orrs	r3, r2
   32cfc:	d100      	bne.n	32d00 <__aeabi_dadd+0x4c>
   32cfe:	e0db      	b.n	32eb8 <__aeabi_dadd+0x204>
   32d00:	1e6b      	subs	r3, r5, #1
   32d02:	2b00      	cmp	r3, #0
   32d04:	d000      	beq.n	32d08 <__aeabi_dadd+0x54>
   32d06:	e137      	b.n	32f78 <__aeabi_dadd+0x2c4>
   32d08:	1aba      	subs	r2, r7, r2
   32d0a:	4297      	cmp	r7, r2
   32d0c:	41bf      	sbcs	r7, r7
   32d0e:	1a64      	subs	r4, r4, r1
   32d10:	427f      	negs	r7, r7
   32d12:	1be4      	subs	r4, r4, r7
   32d14:	2601      	movs	r6, #1
   32d16:	0017      	movs	r7, r2
   32d18:	e024      	b.n	32d64 <__aeabi_dadd+0xb0>
   32d1a:	4bc6      	ldr	r3, [pc, #792]	; (33034 <__aeabi_dadd+0x380>)
   32d1c:	429e      	cmp	r6, r3
   32d1e:	d04d      	beq.n	32dbc <__aeabi_dadd+0x108>
   32d20:	2380      	movs	r3, #128	; 0x80
   32d22:	041b      	lsls	r3, r3, #16
   32d24:	4319      	orrs	r1, r3
   32d26:	2d38      	cmp	r5, #56	; 0x38
   32d28:	dd00      	ble.n	32d2c <__aeabi_dadd+0x78>
   32d2a:	e107      	b.n	32f3c <__aeabi_dadd+0x288>
   32d2c:	2d1f      	cmp	r5, #31
   32d2e:	dd00      	ble.n	32d32 <__aeabi_dadd+0x7e>
   32d30:	e138      	b.n	32fa4 <__aeabi_dadd+0x2f0>
   32d32:	2020      	movs	r0, #32
   32d34:	1b43      	subs	r3, r0, r5
   32d36:	469a      	mov	sl, r3
   32d38:	000b      	movs	r3, r1
   32d3a:	4650      	mov	r0, sl
   32d3c:	4083      	lsls	r3, r0
   32d3e:	4699      	mov	r9, r3
   32d40:	0013      	movs	r3, r2
   32d42:	4648      	mov	r0, r9
   32d44:	40eb      	lsrs	r3, r5
   32d46:	4318      	orrs	r0, r3
   32d48:	0003      	movs	r3, r0
   32d4a:	4650      	mov	r0, sl
   32d4c:	4082      	lsls	r2, r0
   32d4e:	1e50      	subs	r0, r2, #1
   32d50:	4182      	sbcs	r2, r0
   32d52:	40e9      	lsrs	r1, r5
   32d54:	431a      	orrs	r2, r3
   32d56:	1aba      	subs	r2, r7, r2
   32d58:	1a61      	subs	r1, r4, r1
   32d5a:	4297      	cmp	r7, r2
   32d5c:	41a4      	sbcs	r4, r4
   32d5e:	0017      	movs	r7, r2
   32d60:	4264      	negs	r4, r4
   32d62:	1b0c      	subs	r4, r1, r4
   32d64:	0223      	lsls	r3, r4, #8
   32d66:	d562      	bpl.n	32e2e <__aeabi_dadd+0x17a>
   32d68:	0264      	lsls	r4, r4, #9
   32d6a:	0a65      	lsrs	r5, r4, #9
   32d6c:	2d00      	cmp	r5, #0
   32d6e:	d100      	bne.n	32d72 <__aeabi_dadd+0xbe>
   32d70:	e0df      	b.n	32f32 <__aeabi_dadd+0x27e>
   32d72:	0028      	movs	r0, r5
   32d74:	f001 fbe4 	bl	34540 <__clzsi2>
   32d78:	0003      	movs	r3, r0
   32d7a:	3b08      	subs	r3, #8
   32d7c:	2b1f      	cmp	r3, #31
   32d7e:	dd00      	ble.n	32d82 <__aeabi_dadd+0xce>
   32d80:	e0d2      	b.n	32f28 <__aeabi_dadd+0x274>
   32d82:	2220      	movs	r2, #32
   32d84:	003c      	movs	r4, r7
   32d86:	1ad2      	subs	r2, r2, r3
   32d88:	409d      	lsls	r5, r3
   32d8a:	40d4      	lsrs	r4, r2
   32d8c:	409f      	lsls	r7, r3
   32d8e:	4325      	orrs	r5, r4
   32d90:	429e      	cmp	r6, r3
   32d92:	dd00      	ble.n	32d96 <__aeabi_dadd+0xe2>
   32d94:	e0c4      	b.n	32f20 <__aeabi_dadd+0x26c>
   32d96:	1b9e      	subs	r6, r3, r6
   32d98:	1c73      	adds	r3, r6, #1
   32d9a:	2b1f      	cmp	r3, #31
   32d9c:	dd00      	ble.n	32da0 <__aeabi_dadd+0xec>
   32d9e:	e0f1      	b.n	32f84 <__aeabi_dadd+0x2d0>
   32da0:	2220      	movs	r2, #32
   32da2:	0038      	movs	r0, r7
   32da4:	0029      	movs	r1, r5
   32da6:	1ad2      	subs	r2, r2, r3
   32da8:	40d8      	lsrs	r0, r3
   32daa:	4091      	lsls	r1, r2
   32dac:	4097      	lsls	r7, r2
   32dae:	002c      	movs	r4, r5
   32db0:	4301      	orrs	r1, r0
   32db2:	1e78      	subs	r0, r7, #1
   32db4:	4187      	sbcs	r7, r0
   32db6:	40dc      	lsrs	r4, r3
   32db8:	2600      	movs	r6, #0
   32dba:	430f      	orrs	r7, r1
   32dbc:	077b      	lsls	r3, r7, #29
   32dbe:	d009      	beq.n	32dd4 <__aeabi_dadd+0x120>
   32dc0:	230f      	movs	r3, #15
   32dc2:	403b      	ands	r3, r7
   32dc4:	2b04      	cmp	r3, #4
   32dc6:	d005      	beq.n	32dd4 <__aeabi_dadd+0x120>
   32dc8:	1d3b      	adds	r3, r7, #4
   32dca:	42bb      	cmp	r3, r7
   32dcc:	41bf      	sbcs	r7, r7
   32dce:	427f      	negs	r7, r7
   32dd0:	19e4      	adds	r4, r4, r7
   32dd2:	001f      	movs	r7, r3
   32dd4:	0223      	lsls	r3, r4, #8
   32dd6:	d52c      	bpl.n	32e32 <__aeabi_dadd+0x17e>
   32dd8:	4b96      	ldr	r3, [pc, #600]	; (33034 <__aeabi_dadd+0x380>)
   32dda:	3601      	adds	r6, #1
   32ddc:	429e      	cmp	r6, r3
   32dde:	d100      	bne.n	32de2 <__aeabi_dadd+0x12e>
   32de0:	e09a      	b.n	32f18 <__aeabi_dadd+0x264>
   32de2:	4645      	mov	r5, r8
   32de4:	4b94      	ldr	r3, [pc, #592]	; (33038 <__aeabi_dadd+0x384>)
   32de6:	08ff      	lsrs	r7, r7, #3
   32de8:	401c      	ands	r4, r3
   32dea:	0760      	lsls	r0, r4, #29
   32dec:	0576      	lsls	r6, r6, #21
   32dee:	0264      	lsls	r4, r4, #9
   32df0:	4307      	orrs	r7, r0
   32df2:	0b24      	lsrs	r4, r4, #12
   32df4:	0d76      	lsrs	r6, r6, #21
   32df6:	2100      	movs	r1, #0
   32df8:	0324      	lsls	r4, r4, #12
   32dfa:	0b23      	lsrs	r3, r4, #12
   32dfc:	0d0c      	lsrs	r4, r1, #20
   32dfe:	4a8f      	ldr	r2, [pc, #572]	; (3303c <__aeabi_dadd+0x388>)
   32e00:	0524      	lsls	r4, r4, #20
   32e02:	431c      	orrs	r4, r3
   32e04:	4014      	ands	r4, r2
   32e06:	0533      	lsls	r3, r6, #20
   32e08:	4323      	orrs	r3, r4
   32e0a:	005b      	lsls	r3, r3, #1
   32e0c:	07ed      	lsls	r5, r5, #31
   32e0e:	085b      	lsrs	r3, r3, #1
   32e10:	432b      	orrs	r3, r5
   32e12:	0038      	movs	r0, r7
   32e14:	0019      	movs	r1, r3
   32e16:	bc3c      	pop	{r2, r3, r4, r5}
   32e18:	4690      	mov	r8, r2
   32e1a:	4699      	mov	r9, r3
   32e1c:	46a2      	mov	sl, r4
   32e1e:	46ab      	mov	fp, r5
   32e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32e22:	4664      	mov	r4, ip
   32e24:	4304      	orrs	r4, r0
   32e26:	d100      	bne.n	32e2a <__aeabi_dadd+0x176>
   32e28:	e211      	b.n	3324e <__aeabi_dadd+0x59a>
   32e2a:	0004      	movs	r4, r0
   32e2c:	4667      	mov	r7, ip
   32e2e:	077b      	lsls	r3, r7, #29
   32e30:	d1c6      	bne.n	32dc0 <__aeabi_dadd+0x10c>
   32e32:	4645      	mov	r5, r8
   32e34:	0760      	lsls	r0, r4, #29
   32e36:	08ff      	lsrs	r7, r7, #3
   32e38:	4307      	orrs	r7, r0
   32e3a:	08e4      	lsrs	r4, r4, #3
   32e3c:	4b7d      	ldr	r3, [pc, #500]	; (33034 <__aeabi_dadd+0x380>)
   32e3e:	429e      	cmp	r6, r3
   32e40:	d030      	beq.n	32ea4 <__aeabi_dadd+0x1f0>
   32e42:	0324      	lsls	r4, r4, #12
   32e44:	0576      	lsls	r6, r6, #21
   32e46:	0b24      	lsrs	r4, r4, #12
   32e48:	0d76      	lsrs	r6, r6, #21
   32e4a:	e7d4      	b.n	32df6 <__aeabi_dadd+0x142>
   32e4c:	1a33      	subs	r3, r6, r0
   32e4e:	469a      	mov	sl, r3
   32e50:	2b00      	cmp	r3, #0
   32e52:	dd78      	ble.n	32f46 <__aeabi_dadd+0x292>
   32e54:	2800      	cmp	r0, #0
   32e56:	d031      	beq.n	32ebc <__aeabi_dadd+0x208>
   32e58:	4876      	ldr	r0, [pc, #472]	; (33034 <__aeabi_dadd+0x380>)
   32e5a:	4286      	cmp	r6, r0
   32e5c:	d0ae      	beq.n	32dbc <__aeabi_dadd+0x108>
   32e5e:	2080      	movs	r0, #128	; 0x80
   32e60:	0400      	lsls	r0, r0, #16
   32e62:	4301      	orrs	r1, r0
   32e64:	4653      	mov	r3, sl
   32e66:	2b38      	cmp	r3, #56	; 0x38
   32e68:	dc00      	bgt.n	32e6c <__aeabi_dadd+0x1b8>
   32e6a:	e0e9      	b.n	33040 <__aeabi_dadd+0x38c>
   32e6c:	430a      	orrs	r2, r1
   32e6e:	1e51      	subs	r1, r2, #1
   32e70:	418a      	sbcs	r2, r1
   32e72:	2100      	movs	r1, #0
   32e74:	19d2      	adds	r2, r2, r7
   32e76:	42ba      	cmp	r2, r7
   32e78:	41bf      	sbcs	r7, r7
   32e7a:	1909      	adds	r1, r1, r4
   32e7c:	427c      	negs	r4, r7
   32e7e:	0017      	movs	r7, r2
   32e80:	190c      	adds	r4, r1, r4
   32e82:	0223      	lsls	r3, r4, #8
   32e84:	d5d3      	bpl.n	32e2e <__aeabi_dadd+0x17a>
   32e86:	4b6b      	ldr	r3, [pc, #428]	; (33034 <__aeabi_dadd+0x380>)
   32e88:	3601      	adds	r6, #1
   32e8a:	429e      	cmp	r6, r3
   32e8c:	d100      	bne.n	32e90 <__aeabi_dadd+0x1dc>
   32e8e:	e13a      	b.n	33106 <__aeabi_dadd+0x452>
   32e90:	2001      	movs	r0, #1
   32e92:	4b69      	ldr	r3, [pc, #420]	; (33038 <__aeabi_dadd+0x384>)
   32e94:	401c      	ands	r4, r3
   32e96:	087b      	lsrs	r3, r7, #1
   32e98:	4007      	ands	r7, r0
   32e9a:	431f      	orrs	r7, r3
   32e9c:	07e0      	lsls	r0, r4, #31
   32e9e:	4307      	orrs	r7, r0
   32ea0:	0864      	lsrs	r4, r4, #1
   32ea2:	e78b      	b.n	32dbc <__aeabi_dadd+0x108>
   32ea4:	0023      	movs	r3, r4
   32ea6:	433b      	orrs	r3, r7
   32ea8:	d100      	bne.n	32eac <__aeabi_dadd+0x1f8>
   32eaa:	e1cb      	b.n	33244 <__aeabi_dadd+0x590>
   32eac:	2280      	movs	r2, #128	; 0x80
   32eae:	0312      	lsls	r2, r2, #12
   32eb0:	4314      	orrs	r4, r2
   32eb2:	0324      	lsls	r4, r4, #12
   32eb4:	0b24      	lsrs	r4, r4, #12
   32eb6:	e79e      	b.n	32df6 <__aeabi_dadd+0x142>
   32eb8:	002e      	movs	r6, r5
   32eba:	e77f      	b.n	32dbc <__aeabi_dadd+0x108>
   32ebc:	0008      	movs	r0, r1
   32ebe:	4310      	orrs	r0, r2
   32ec0:	d100      	bne.n	32ec4 <__aeabi_dadd+0x210>
   32ec2:	e0b4      	b.n	3302e <__aeabi_dadd+0x37a>
   32ec4:	1e58      	subs	r0, r3, #1
   32ec6:	2800      	cmp	r0, #0
   32ec8:	d000      	beq.n	32ecc <__aeabi_dadd+0x218>
   32eca:	e0de      	b.n	3308a <__aeabi_dadd+0x3d6>
   32ecc:	18ba      	adds	r2, r7, r2
   32ece:	42ba      	cmp	r2, r7
   32ed0:	419b      	sbcs	r3, r3
   32ed2:	1864      	adds	r4, r4, r1
   32ed4:	425b      	negs	r3, r3
   32ed6:	18e4      	adds	r4, r4, r3
   32ed8:	0017      	movs	r7, r2
   32eda:	2601      	movs	r6, #1
   32edc:	0223      	lsls	r3, r4, #8
   32ede:	d5a6      	bpl.n	32e2e <__aeabi_dadd+0x17a>
   32ee0:	2602      	movs	r6, #2
   32ee2:	e7d5      	b.n	32e90 <__aeabi_dadd+0x1dc>
   32ee4:	2d00      	cmp	r5, #0
   32ee6:	d16e      	bne.n	32fc6 <__aeabi_dadd+0x312>
   32ee8:	1c70      	adds	r0, r6, #1
   32eea:	0540      	lsls	r0, r0, #21
   32eec:	0d40      	lsrs	r0, r0, #21
   32eee:	2801      	cmp	r0, #1
   32ef0:	dc00      	bgt.n	32ef4 <__aeabi_dadd+0x240>
   32ef2:	e0f9      	b.n	330e8 <__aeabi_dadd+0x434>
   32ef4:	1ab8      	subs	r0, r7, r2
   32ef6:	4684      	mov	ip, r0
   32ef8:	4287      	cmp	r7, r0
   32efa:	4180      	sbcs	r0, r0
   32efc:	1ae5      	subs	r5, r4, r3
   32efe:	4240      	negs	r0, r0
   32f00:	1a2d      	subs	r5, r5, r0
   32f02:	0228      	lsls	r0, r5, #8
   32f04:	d400      	bmi.n	32f08 <__aeabi_dadd+0x254>
   32f06:	e089      	b.n	3301c <__aeabi_dadd+0x368>
   32f08:	1bd7      	subs	r7, r2, r7
   32f0a:	42ba      	cmp	r2, r7
   32f0c:	4192      	sbcs	r2, r2
   32f0e:	1b1c      	subs	r4, r3, r4
   32f10:	4252      	negs	r2, r2
   32f12:	1aa5      	subs	r5, r4, r2
   32f14:	46d8      	mov	r8, fp
   32f16:	e729      	b.n	32d6c <__aeabi_dadd+0xb8>
   32f18:	4645      	mov	r5, r8
   32f1a:	2400      	movs	r4, #0
   32f1c:	2700      	movs	r7, #0
   32f1e:	e76a      	b.n	32df6 <__aeabi_dadd+0x142>
   32f20:	4c45      	ldr	r4, [pc, #276]	; (33038 <__aeabi_dadd+0x384>)
   32f22:	1af6      	subs	r6, r6, r3
   32f24:	402c      	ands	r4, r5
   32f26:	e749      	b.n	32dbc <__aeabi_dadd+0x108>
   32f28:	003d      	movs	r5, r7
   32f2a:	3828      	subs	r0, #40	; 0x28
   32f2c:	4085      	lsls	r5, r0
   32f2e:	2700      	movs	r7, #0
   32f30:	e72e      	b.n	32d90 <__aeabi_dadd+0xdc>
   32f32:	0038      	movs	r0, r7
   32f34:	f001 fb04 	bl	34540 <__clzsi2>
   32f38:	3020      	adds	r0, #32
   32f3a:	e71d      	b.n	32d78 <__aeabi_dadd+0xc4>
   32f3c:	430a      	orrs	r2, r1
   32f3e:	1e51      	subs	r1, r2, #1
   32f40:	418a      	sbcs	r2, r1
   32f42:	2100      	movs	r1, #0
   32f44:	e707      	b.n	32d56 <__aeabi_dadd+0xa2>
   32f46:	2b00      	cmp	r3, #0
   32f48:	d000      	beq.n	32f4c <__aeabi_dadd+0x298>
   32f4a:	e0f3      	b.n	33134 <__aeabi_dadd+0x480>
   32f4c:	1c70      	adds	r0, r6, #1
   32f4e:	0543      	lsls	r3, r0, #21
   32f50:	0d5b      	lsrs	r3, r3, #21
   32f52:	2b01      	cmp	r3, #1
   32f54:	dc00      	bgt.n	32f58 <__aeabi_dadd+0x2a4>
   32f56:	e0ad      	b.n	330b4 <__aeabi_dadd+0x400>
   32f58:	4b36      	ldr	r3, [pc, #216]	; (33034 <__aeabi_dadd+0x380>)
   32f5a:	4298      	cmp	r0, r3
   32f5c:	d100      	bne.n	32f60 <__aeabi_dadd+0x2ac>
   32f5e:	e0d1      	b.n	33104 <__aeabi_dadd+0x450>
   32f60:	18ba      	adds	r2, r7, r2
   32f62:	42ba      	cmp	r2, r7
   32f64:	41bf      	sbcs	r7, r7
   32f66:	1864      	adds	r4, r4, r1
   32f68:	427f      	negs	r7, r7
   32f6a:	19e4      	adds	r4, r4, r7
   32f6c:	07e7      	lsls	r7, r4, #31
   32f6e:	0852      	lsrs	r2, r2, #1
   32f70:	4317      	orrs	r7, r2
   32f72:	0864      	lsrs	r4, r4, #1
   32f74:	0006      	movs	r6, r0
   32f76:	e721      	b.n	32dbc <__aeabi_dadd+0x108>
   32f78:	482e      	ldr	r0, [pc, #184]	; (33034 <__aeabi_dadd+0x380>)
   32f7a:	4285      	cmp	r5, r0
   32f7c:	d100      	bne.n	32f80 <__aeabi_dadd+0x2cc>
   32f7e:	e093      	b.n	330a8 <__aeabi_dadd+0x3f4>
   32f80:	001d      	movs	r5, r3
   32f82:	e6d0      	b.n	32d26 <__aeabi_dadd+0x72>
   32f84:	0029      	movs	r1, r5
   32f86:	3e1f      	subs	r6, #31
   32f88:	40f1      	lsrs	r1, r6
   32f8a:	2b20      	cmp	r3, #32
   32f8c:	d100      	bne.n	32f90 <__aeabi_dadd+0x2dc>
   32f8e:	e08d      	b.n	330ac <__aeabi_dadd+0x3f8>
   32f90:	2240      	movs	r2, #64	; 0x40
   32f92:	1ad3      	subs	r3, r2, r3
   32f94:	409d      	lsls	r5, r3
   32f96:	432f      	orrs	r7, r5
   32f98:	1e7d      	subs	r5, r7, #1
   32f9a:	41af      	sbcs	r7, r5
   32f9c:	2400      	movs	r4, #0
   32f9e:	430f      	orrs	r7, r1
   32fa0:	2600      	movs	r6, #0
   32fa2:	e744      	b.n	32e2e <__aeabi_dadd+0x17a>
   32fa4:	002b      	movs	r3, r5
   32fa6:	0008      	movs	r0, r1
   32fa8:	3b20      	subs	r3, #32
   32faa:	40d8      	lsrs	r0, r3
   32fac:	0003      	movs	r3, r0
   32fae:	2d20      	cmp	r5, #32
   32fb0:	d100      	bne.n	32fb4 <__aeabi_dadd+0x300>
   32fb2:	e07d      	b.n	330b0 <__aeabi_dadd+0x3fc>
   32fb4:	2040      	movs	r0, #64	; 0x40
   32fb6:	1b45      	subs	r5, r0, r5
   32fb8:	40a9      	lsls	r1, r5
   32fba:	430a      	orrs	r2, r1
   32fbc:	1e51      	subs	r1, r2, #1
   32fbe:	418a      	sbcs	r2, r1
   32fc0:	2100      	movs	r1, #0
   32fc2:	431a      	orrs	r2, r3
   32fc4:	e6c7      	b.n	32d56 <__aeabi_dadd+0xa2>
   32fc6:	2e00      	cmp	r6, #0
   32fc8:	d050      	beq.n	3306c <__aeabi_dadd+0x3b8>
   32fca:	4e1a      	ldr	r6, [pc, #104]	; (33034 <__aeabi_dadd+0x380>)
   32fcc:	42b0      	cmp	r0, r6
   32fce:	d057      	beq.n	33080 <__aeabi_dadd+0x3cc>
   32fd0:	2680      	movs	r6, #128	; 0x80
   32fd2:	426b      	negs	r3, r5
   32fd4:	4699      	mov	r9, r3
   32fd6:	0436      	lsls	r6, r6, #16
   32fd8:	4334      	orrs	r4, r6
   32fda:	464b      	mov	r3, r9
   32fdc:	2b38      	cmp	r3, #56	; 0x38
   32fde:	dd00      	ble.n	32fe2 <__aeabi_dadd+0x32e>
   32fe0:	e0d6      	b.n	33190 <__aeabi_dadd+0x4dc>
   32fe2:	2b1f      	cmp	r3, #31
   32fe4:	dd00      	ble.n	32fe8 <__aeabi_dadd+0x334>
   32fe6:	e135      	b.n	33254 <__aeabi_dadd+0x5a0>
   32fe8:	2620      	movs	r6, #32
   32fea:	1af5      	subs	r5, r6, r3
   32fec:	0026      	movs	r6, r4
   32fee:	40ae      	lsls	r6, r5
   32ff0:	46b2      	mov	sl, r6
   32ff2:	003e      	movs	r6, r7
   32ff4:	40de      	lsrs	r6, r3
   32ff6:	46ac      	mov	ip, r5
   32ff8:	0035      	movs	r5, r6
   32ffa:	4656      	mov	r6, sl
   32ffc:	432e      	orrs	r6, r5
   32ffe:	4665      	mov	r5, ip
   33000:	40af      	lsls	r7, r5
   33002:	1e7d      	subs	r5, r7, #1
   33004:	41af      	sbcs	r7, r5
   33006:	40dc      	lsrs	r4, r3
   33008:	4337      	orrs	r7, r6
   3300a:	1bd7      	subs	r7, r2, r7
   3300c:	42ba      	cmp	r2, r7
   3300e:	4192      	sbcs	r2, r2
   33010:	1b0c      	subs	r4, r1, r4
   33012:	4252      	negs	r2, r2
   33014:	1aa4      	subs	r4, r4, r2
   33016:	0006      	movs	r6, r0
   33018:	46d8      	mov	r8, fp
   3301a:	e6a3      	b.n	32d64 <__aeabi_dadd+0xb0>
   3301c:	4664      	mov	r4, ip
   3301e:	4667      	mov	r7, ip
   33020:	432c      	orrs	r4, r5
   33022:	d000      	beq.n	33026 <__aeabi_dadd+0x372>
   33024:	e6a2      	b.n	32d6c <__aeabi_dadd+0xb8>
   33026:	2500      	movs	r5, #0
   33028:	2600      	movs	r6, #0
   3302a:	2700      	movs	r7, #0
   3302c:	e706      	b.n	32e3c <__aeabi_dadd+0x188>
   3302e:	001e      	movs	r6, r3
   33030:	e6c4      	b.n	32dbc <__aeabi_dadd+0x108>
   33032:	46c0      	nop			; (mov r8, r8)
   33034:	000007ff 	.word	0x000007ff
   33038:	ff7fffff 	.word	0xff7fffff
   3303c:	800fffff 	.word	0x800fffff
   33040:	2b1f      	cmp	r3, #31
   33042:	dc63      	bgt.n	3310c <__aeabi_dadd+0x458>
   33044:	2020      	movs	r0, #32
   33046:	1ac3      	subs	r3, r0, r3
   33048:	0008      	movs	r0, r1
   3304a:	4098      	lsls	r0, r3
   3304c:	469c      	mov	ip, r3
   3304e:	4683      	mov	fp, r0
   33050:	4653      	mov	r3, sl
   33052:	0010      	movs	r0, r2
   33054:	40d8      	lsrs	r0, r3
   33056:	0003      	movs	r3, r0
   33058:	4658      	mov	r0, fp
   3305a:	4318      	orrs	r0, r3
   3305c:	4663      	mov	r3, ip
   3305e:	409a      	lsls	r2, r3
   33060:	1e53      	subs	r3, r2, #1
   33062:	419a      	sbcs	r2, r3
   33064:	4653      	mov	r3, sl
   33066:	4302      	orrs	r2, r0
   33068:	40d9      	lsrs	r1, r3
   3306a:	e703      	b.n	32e74 <__aeabi_dadd+0x1c0>
   3306c:	0026      	movs	r6, r4
   3306e:	433e      	orrs	r6, r7
   33070:	d006      	beq.n	33080 <__aeabi_dadd+0x3cc>
   33072:	43eb      	mvns	r3, r5
   33074:	4699      	mov	r9, r3
   33076:	2b00      	cmp	r3, #0
   33078:	d0c7      	beq.n	3300a <__aeabi_dadd+0x356>
   3307a:	4e94      	ldr	r6, [pc, #592]	; (332cc <__aeabi_dadd+0x618>)
   3307c:	42b0      	cmp	r0, r6
   3307e:	d1ac      	bne.n	32fda <__aeabi_dadd+0x326>
   33080:	000c      	movs	r4, r1
   33082:	0017      	movs	r7, r2
   33084:	0006      	movs	r6, r0
   33086:	46d8      	mov	r8, fp
   33088:	e698      	b.n	32dbc <__aeabi_dadd+0x108>
   3308a:	4b90      	ldr	r3, [pc, #576]	; (332cc <__aeabi_dadd+0x618>)
   3308c:	459a      	cmp	sl, r3
   3308e:	d00b      	beq.n	330a8 <__aeabi_dadd+0x3f4>
   33090:	4682      	mov	sl, r0
   33092:	e6e7      	b.n	32e64 <__aeabi_dadd+0x1b0>
   33094:	2800      	cmp	r0, #0
   33096:	d000      	beq.n	3309a <__aeabi_dadd+0x3e6>
   33098:	e09e      	b.n	331d8 <__aeabi_dadd+0x524>
   3309a:	0018      	movs	r0, r3
   3309c:	4310      	orrs	r0, r2
   3309e:	d100      	bne.n	330a2 <__aeabi_dadd+0x3ee>
   330a0:	e0e9      	b.n	33276 <__aeabi_dadd+0x5c2>
   330a2:	001c      	movs	r4, r3
   330a4:	0017      	movs	r7, r2
   330a6:	46d8      	mov	r8, fp
   330a8:	4e88      	ldr	r6, [pc, #544]	; (332cc <__aeabi_dadd+0x618>)
   330aa:	e687      	b.n	32dbc <__aeabi_dadd+0x108>
   330ac:	2500      	movs	r5, #0
   330ae:	e772      	b.n	32f96 <__aeabi_dadd+0x2e2>
   330b0:	2100      	movs	r1, #0
   330b2:	e782      	b.n	32fba <__aeabi_dadd+0x306>
   330b4:	0023      	movs	r3, r4
   330b6:	433b      	orrs	r3, r7
   330b8:	2e00      	cmp	r6, #0
   330ba:	d000      	beq.n	330be <__aeabi_dadd+0x40a>
   330bc:	e0ab      	b.n	33216 <__aeabi_dadd+0x562>
   330be:	2b00      	cmp	r3, #0
   330c0:	d100      	bne.n	330c4 <__aeabi_dadd+0x410>
   330c2:	e0e7      	b.n	33294 <__aeabi_dadd+0x5e0>
   330c4:	000b      	movs	r3, r1
   330c6:	4313      	orrs	r3, r2
   330c8:	d100      	bne.n	330cc <__aeabi_dadd+0x418>
   330ca:	e677      	b.n	32dbc <__aeabi_dadd+0x108>
   330cc:	18ba      	adds	r2, r7, r2
   330ce:	42ba      	cmp	r2, r7
   330d0:	41bf      	sbcs	r7, r7
   330d2:	1864      	adds	r4, r4, r1
   330d4:	427f      	negs	r7, r7
   330d6:	19e4      	adds	r4, r4, r7
   330d8:	0223      	lsls	r3, r4, #8
   330da:	d400      	bmi.n	330de <__aeabi_dadd+0x42a>
   330dc:	e0f2      	b.n	332c4 <__aeabi_dadd+0x610>
   330de:	4b7c      	ldr	r3, [pc, #496]	; (332d0 <__aeabi_dadd+0x61c>)
   330e0:	0017      	movs	r7, r2
   330e2:	401c      	ands	r4, r3
   330e4:	0006      	movs	r6, r0
   330e6:	e669      	b.n	32dbc <__aeabi_dadd+0x108>
   330e8:	0020      	movs	r0, r4
   330ea:	4338      	orrs	r0, r7
   330ec:	2e00      	cmp	r6, #0
   330ee:	d1d1      	bne.n	33094 <__aeabi_dadd+0x3e0>
   330f0:	2800      	cmp	r0, #0
   330f2:	d15b      	bne.n	331ac <__aeabi_dadd+0x4f8>
   330f4:	001c      	movs	r4, r3
   330f6:	4314      	orrs	r4, r2
   330f8:	d100      	bne.n	330fc <__aeabi_dadd+0x448>
   330fa:	e0a8      	b.n	3324e <__aeabi_dadd+0x59a>
   330fc:	001c      	movs	r4, r3
   330fe:	0017      	movs	r7, r2
   33100:	46d8      	mov	r8, fp
   33102:	e65b      	b.n	32dbc <__aeabi_dadd+0x108>
   33104:	0006      	movs	r6, r0
   33106:	2400      	movs	r4, #0
   33108:	2700      	movs	r7, #0
   3310a:	e697      	b.n	32e3c <__aeabi_dadd+0x188>
   3310c:	4650      	mov	r0, sl
   3310e:	000b      	movs	r3, r1
   33110:	3820      	subs	r0, #32
   33112:	40c3      	lsrs	r3, r0
   33114:	4699      	mov	r9, r3
   33116:	4653      	mov	r3, sl
   33118:	2b20      	cmp	r3, #32
   3311a:	d100      	bne.n	3311e <__aeabi_dadd+0x46a>
   3311c:	e095      	b.n	3324a <__aeabi_dadd+0x596>
   3311e:	2340      	movs	r3, #64	; 0x40
   33120:	4650      	mov	r0, sl
   33122:	1a1b      	subs	r3, r3, r0
   33124:	4099      	lsls	r1, r3
   33126:	430a      	orrs	r2, r1
   33128:	1e51      	subs	r1, r2, #1
   3312a:	418a      	sbcs	r2, r1
   3312c:	464b      	mov	r3, r9
   3312e:	2100      	movs	r1, #0
   33130:	431a      	orrs	r2, r3
   33132:	e69f      	b.n	32e74 <__aeabi_dadd+0x1c0>
   33134:	2e00      	cmp	r6, #0
   33136:	d130      	bne.n	3319a <__aeabi_dadd+0x4e6>
   33138:	0026      	movs	r6, r4
   3313a:	433e      	orrs	r6, r7
   3313c:	d067      	beq.n	3320e <__aeabi_dadd+0x55a>
   3313e:	43db      	mvns	r3, r3
   33140:	469a      	mov	sl, r3
   33142:	2b00      	cmp	r3, #0
   33144:	d01c      	beq.n	33180 <__aeabi_dadd+0x4cc>
   33146:	4e61      	ldr	r6, [pc, #388]	; (332cc <__aeabi_dadd+0x618>)
   33148:	42b0      	cmp	r0, r6
   3314a:	d060      	beq.n	3320e <__aeabi_dadd+0x55a>
   3314c:	4653      	mov	r3, sl
   3314e:	2b38      	cmp	r3, #56	; 0x38
   33150:	dd00      	ble.n	33154 <__aeabi_dadd+0x4a0>
   33152:	e096      	b.n	33282 <__aeabi_dadd+0x5ce>
   33154:	2b1f      	cmp	r3, #31
   33156:	dd00      	ble.n	3315a <__aeabi_dadd+0x4a6>
   33158:	e09f      	b.n	3329a <__aeabi_dadd+0x5e6>
   3315a:	2620      	movs	r6, #32
   3315c:	1af3      	subs	r3, r6, r3
   3315e:	0026      	movs	r6, r4
   33160:	409e      	lsls	r6, r3
   33162:	469c      	mov	ip, r3
   33164:	46b3      	mov	fp, r6
   33166:	4653      	mov	r3, sl
   33168:	003e      	movs	r6, r7
   3316a:	40de      	lsrs	r6, r3
   3316c:	0033      	movs	r3, r6
   3316e:	465e      	mov	r6, fp
   33170:	431e      	orrs	r6, r3
   33172:	4663      	mov	r3, ip
   33174:	409f      	lsls	r7, r3
   33176:	1e7b      	subs	r3, r7, #1
   33178:	419f      	sbcs	r7, r3
   3317a:	4653      	mov	r3, sl
   3317c:	40dc      	lsrs	r4, r3
   3317e:	4337      	orrs	r7, r6
   33180:	18bf      	adds	r7, r7, r2
   33182:	4297      	cmp	r7, r2
   33184:	4192      	sbcs	r2, r2
   33186:	1864      	adds	r4, r4, r1
   33188:	4252      	negs	r2, r2
   3318a:	18a4      	adds	r4, r4, r2
   3318c:	0006      	movs	r6, r0
   3318e:	e678      	b.n	32e82 <__aeabi_dadd+0x1ce>
   33190:	4327      	orrs	r7, r4
   33192:	1e7c      	subs	r4, r7, #1
   33194:	41a7      	sbcs	r7, r4
   33196:	2400      	movs	r4, #0
   33198:	e737      	b.n	3300a <__aeabi_dadd+0x356>
   3319a:	4e4c      	ldr	r6, [pc, #304]	; (332cc <__aeabi_dadd+0x618>)
   3319c:	42b0      	cmp	r0, r6
   3319e:	d036      	beq.n	3320e <__aeabi_dadd+0x55a>
   331a0:	2680      	movs	r6, #128	; 0x80
   331a2:	425b      	negs	r3, r3
   331a4:	0436      	lsls	r6, r6, #16
   331a6:	469a      	mov	sl, r3
   331a8:	4334      	orrs	r4, r6
   331aa:	e7cf      	b.n	3314c <__aeabi_dadd+0x498>
   331ac:	0018      	movs	r0, r3
   331ae:	4310      	orrs	r0, r2
   331b0:	d100      	bne.n	331b4 <__aeabi_dadd+0x500>
   331b2:	e603      	b.n	32dbc <__aeabi_dadd+0x108>
   331b4:	1ab8      	subs	r0, r7, r2
   331b6:	4684      	mov	ip, r0
   331b8:	4567      	cmp	r7, ip
   331ba:	41ad      	sbcs	r5, r5
   331bc:	1ae0      	subs	r0, r4, r3
   331be:	426d      	negs	r5, r5
   331c0:	1b40      	subs	r0, r0, r5
   331c2:	0205      	lsls	r5, r0, #8
   331c4:	d400      	bmi.n	331c8 <__aeabi_dadd+0x514>
   331c6:	e62c      	b.n	32e22 <__aeabi_dadd+0x16e>
   331c8:	1bd7      	subs	r7, r2, r7
   331ca:	42ba      	cmp	r2, r7
   331cc:	4192      	sbcs	r2, r2
   331ce:	1b1c      	subs	r4, r3, r4
   331d0:	4252      	negs	r2, r2
   331d2:	1aa4      	subs	r4, r4, r2
   331d4:	46d8      	mov	r8, fp
   331d6:	e5f1      	b.n	32dbc <__aeabi_dadd+0x108>
   331d8:	0018      	movs	r0, r3
   331da:	4310      	orrs	r0, r2
   331dc:	d100      	bne.n	331e0 <__aeabi_dadd+0x52c>
   331de:	e763      	b.n	330a8 <__aeabi_dadd+0x3f4>
   331e0:	08f8      	lsrs	r0, r7, #3
   331e2:	0767      	lsls	r7, r4, #29
   331e4:	4307      	orrs	r7, r0
   331e6:	2080      	movs	r0, #128	; 0x80
   331e8:	08e4      	lsrs	r4, r4, #3
   331ea:	0300      	lsls	r0, r0, #12
   331ec:	4204      	tst	r4, r0
   331ee:	d008      	beq.n	33202 <__aeabi_dadd+0x54e>
   331f0:	08dd      	lsrs	r5, r3, #3
   331f2:	4205      	tst	r5, r0
   331f4:	d105      	bne.n	33202 <__aeabi_dadd+0x54e>
   331f6:	08d2      	lsrs	r2, r2, #3
   331f8:	0759      	lsls	r1, r3, #29
   331fa:	4311      	orrs	r1, r2
   331fc:	000f      	movs	r7, r1
   331fe:	002c      	movs	r4, r5
   33200:	46d8      	mov	r8, fp
   33202:	0f7b      	lsrs	r3, r7, #29
   33204:	00e4      	lsls	r4, r4, #3
   33206:	431c      	orrs	r4, r3
   33208:	00ff      	lsls	r7, r7, #3
   3320a:	4e30      	ldr	r6, [pc, #192]	; (332cc <__aeabi_dadd+0x618>)
   3320c:	e5d6      	b.n	32dbc <__aeabi_dadd+0x108>
   3320e:	000c      	movs	r4, r1
   33210:	0017      	movs	r7, r2
   33212:	0006      	movs	r6, r0
   33214:	e5d2      	b.n	32dbc <__aeabi_dadd+0x108>
   33216:	2b00      	cmp	r3, #0
   33218:	d038      	beq.n	3328c <__aeabi_dadd+0x5d8>
   3321a:	000b      	movs	r3, r1
   3321c:	4313      	orrs	r3, r2
   3321e:	d100      	bne.n	33222 <__aeabi_dadd+0x56e>
   33220:	e742      	b.n	330a8 <__aeabi_dadd+0x3f4>
   33222:	08f8      	lsrs	r0, r7, #3
   33224:	0767      	lsls	r7, r4, #29
   33226:	4307      	orrs	r7, r0
   33228:	2080      	movs	r0, #128	; 0x80
   3322a:	08e4      	lsrs	r4, r4, #3
   3322c:	0300      	lsls	r0, r0, #12
   3322e:	4204      	tst	r4, r0
   33230:	d0e7      	beq.n	33202 <__aeabi_dadd+0x54e>
   33232:	08cb      	lsrs	r3, r1, #3
   33234:	4203      	tst	r3, r0
   33236:	d1e4      	bne.n	33202 <__aeabi_dadd+0x54e>
   33238:	08d2      	lsrs	r2, r2, #3
   3323a:	0749      	lsls	r1, r1, #29
   3323c:	4311      	orrs	r1, r2
   3323e:	000f      	movs	r7, r1
   33240:	001c      	movs	r4, r3
   33242:	e7de      	b.n	33202 <__aeabi_dadd+0x54e>
   33244:	2700      	movs	r7, #0
   33246:	2400      	movs	r4, #0
   33248:	e5d5      	b.n	32df6 <__aeabi_dadd+0x142>
   3324a:	2100      	movs	r1, #0
   3324c:	e76b      	b.n	33126 <__aeabi_dadd+0x472>
   3324e:	2500      	movs	r5, #0
   33250:	2700      	movs	r7, #0
   33252:	e5f3      	b.n	32e3c <__aeabi_dadd+0x188>
   33254:	464e      	mov	r6, r9
   33256:	0025      	movs	r5, r4
   33258:	3e20      	subs	r6, #32
   3325a:	40f5      	lsrs	r5, r6
   3325c:	464b      	mov	r3, r9
   3325e:	002e      	movs	r6, r5
   33260:	2b20      	cmp	r3, #32
   33262:	d02d      	beq.n	332c0 <__aeabi_dadd+0x60c>
   33264:	2540      	movs	r5, #64	; 0x40
   33266:	1aed      	subs	r5, r5, r3
   33268:	40ac      	lsls	r4, r5
   3326a:	4327      	orrs	r7, r4
   3326c:	1e7c      	subs	r4, r7, #1
   3326e:	41a7      	sbcs	r7, r4
   33270:	2400      	movs	r4, #0
   33272:	4337      	orrs	r7, r6
   33274:	e6c9      	b.n	3300a <__aeabi_dadd+0x356>
   33276:	2480      	movs	r4, #128	; 0x80
   33278:	2500      	movs	r5, #0
   3327a:	0324      	lsls	r4, r4, #12
   3327c:	4e13      	ldr	r6, [pc, #76]	; (332cc <__aeabi_dadd+0x618>)
   3327e:	2700      	movs	r7, #0
   33280:	e5dc      	b.n	32e3c <__aeabi_dadd+0x188>
   33282:	4327      	orrs	r7, r4
   33284:	1e7c      	subs	r4, r7, #1
   33286:	41a7      	sbcs	r7, r4
   33288:	2400      	movs	r4, #0
   3328a:	e779      	b.n	33180 <__aeabi_dadd+0x4cc>
   3328c:	000c      	movs	r4, r1
   3328e:	0017      	movs	r7, r2
   33290:	4e0e      	ldr	r6, [pc, #56]	; (332cc <__aeabi_dadd+0x618>)
   33292:	e593      	b.n	32dbc <__aeabi_dadd+0x108>
   33294:	000c      	movs	r4, r1
   33296:	0017      	movs	r7, r2
   33298:	e590      	b.n	32dbc <__aeabi_dadd+0x108>
   3329a:	4656      	mov	r6, sl
   3329c:	0023      	movs	r3, r4
   3329e:	3e20      	subs	r6, #32
   332a0:	40f3      	lsrs	r3, r6
   332a2:	4699      	mov	r9, r3
   332a4:	4653      	mov	r3, sl
   332a6:	2b20      	cmp	r3, #32
   332a8:	d00e      	beq.n	332c8 <__aeabi_dadd+0x614>
   332aa:	2340      	movs	r3, #64	; 0x40
   332ac:	4656      	mov	r6, sl
   332ae:	1b9b      	subs	r3, r3, r6
   332b0:	409c      	lsls	r4, r3
   332b2:	4327      	orrs	r7, r4
   332b4:	1e7c      	subs	r4, r7, #1
   332b6:	41a7      	sbcs	r7, r4
   332b8:	464b      	mov	r3, r9
   332ba:	2400      	movs	r4, #0
   332bc:	431f      	orrs	r7, r3
   332be:	e75f      	b.n	33180 <__aeabi_dadd+0x4cc>
   332c0:	2400      	movs	r4, #0
   332c2:	e7d2      	b.n	3326a <__aeabi_dadd+0x5b6>
   332c4:	0017      	movs	r7, r2
   332c6:	e5b2      	b.n	32e2e <__aeabi_dadd+0x17a>
   332c8:	2400      	movs	r4, #0
   332ca:	e7f2      	b.n	332b2 <__aeabi_dadd+0x5fe>
   332cc:	000007ff 	.word	0x000007ff
   332d0:	ff7fffff 	.word	0xff7fffff

000332d4 <__aeabi_ddiv>:
   332d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   332d6:	4657      	mov	r7, sl
   332d8:	4645      	mov	r5, r8
   332da:	46de      	mov	lr, fp
   332dc:	464e      	mov	r6, r9
   332de:	b5e0      	push	{r5, r6, r7, lr}
   332e0:	004c      	lsls	r4, r1, #1
   332e2:	030e      	lsls	r6, r1, #12
   332e4:	b087      	sub	sp, #28
   332e6:	4683      	mov	fp, r0
   332e8:	4692      	mov	sl, r2
   332ea:	001d      	movs	r5, r3
   332ec:	4680      	mov	r8, r0
   332ee:	0b36      	lsrs	r6, r6, #12
   332f0:	0d64      	lsrs	r4, r4, #21
   332f2:	0fcf      	lsrs	r7, r1, #31
   332f4:	2c00      	cmp	r4, #0
   332f6:	d04f      	beq.n	33398 <__aeabi_ddiv+0xc4>
   332f8:	4b6f      	ldr	r3, [pc, #444]	; (334b8 <__aeabi_ddiv+0x1e4>)
   332fa:	429c      	cmp	r4, r3
   332fc:	d035      	beq.n	3336a <__aeabi_ddiv+0x96>
   332fe:	2380      	movs	r3, #128	; 0x80
   33300:	0f42      	lsrs	r2, r0, #29
   33302:	041b      	lsls	r3, r3, #16
   33304:	00f6      	lsls	r6, r6, #3
   33306:	4313      	orrs	r3, r2
   33308:	4333      	orrs	r3, r6
   3330a:	4699      	mov	r9, r3
   3330c:	00c3      	lsls	r3, r0, #3
   3330e:	4698      	mov	r8, r3
   33310:	4b6a      	ldr	r3, [pc, #424]	; (334bc <__aeabi_ddiv+0x1e8>)
   33312:	2600      	movs	r6, #0
   33314:	469c      	mov	ip, r3
   33316:	2300      	movs	r3, #0
   33318:	4464      	add	r4, ip
   3331a:	9303      	str	r3, [sp, #12]
   3331c:	032b      	lsls	r3, r5, #12
   3331e:	0b1b      	lsrs	r3, r3, #12
   33320:	469b      	mov	fp, r3
   33322:	006b      	lsls	r3, r5, #1
   33324:	0fed      	lsrs	r5, r5, #31
   33326:	4650      	mov	r0, sl
   33328:	0d5b      	lsrs	r3, r3, #21
   3332a:	9501      	str	r5, [sp, #4]
   3332c:	d05e      	beq.n	333ec <__aeabi_ddiv+0x118>
   3332e:	4a62      	ldr	r2, [pc, #392]	; (334b8 <__aeabi_ddiv+0x1e4>)
   33330:	4293      	cmp	r3, r2
   33332:	d053      	beq.n	333dc <__aeabi_ddiv+0x108>
   33334:	465a      	mov	r2, fp
   33336:	00d1      	lsls	r1, r2, #3
   33338:	2280      	movs	r2, #128	; 0x80
   3333a:	0f40      	lsrs	r0, r0, #29
   3333c:	0412      	lsls	r2, r2, #16
   3333e:	4302      	orrs	r2, r0
   33340:	430a      	orrs	r2, r1
   33342:	4693      	mov	fp, r2
   33344:	4652      	mov	r2, sl
   33346:	00d1      	lsls	r1, r2, #3
   33348:	4a5c      	ldr	r2, [pc, #368]	; (334bc <__aeabi_ddiv+0x1e8>)
   3334a:	4694      	mov	ip, r2
   3334c:	2200      	movs	r2, #0
   3334e:	4463      	add	r3, ip
   33350:	0038      	movs	r0, r7
   33352:	4068      	eors	r0, r5
   33354:	4684      	mov	ip, r0
   33356:	9002      	str	r0, [sp, #8]
   33358:	1ae4      	subs	r4, r4, r3
   3335a:	4316      	orrs	r6, r2
   3335c:	2e0f      	cmp	r6, #15
   3335e:	d900      	bls.n	33362 <__aeabi_ddiv+0x8e>
   33360:	e0b4      	b.n	334cc <__aeabi_ddiv+0x1f8>
   33362:	4b57      	ldr	r3, [pc, #348]	; (334c0 <__aeabi_ddiv+0x1ec>)
   33364:	00b6      	lsls	r6, r6, #2
   33366:	599b      	ldr	r3, [r3, r6]
   33368:	469f      	mov	pc, r3
   3336a:	0003      	movs	r3, r0
   3336c:	4333      	orrs	r3, r6
   3336e:	4699      	mov	r9, r3
   33370:	d16c      	bne.n	3344c <__aeabi_ddiv+0x178>
   33372:	2300      	movs	r3, #0
   33374:	4698      	mov	r8, r3
   33376:	3302      	adds	r3, #2
   33378:	2608      	movs	r6, #8
   3337a:	9303      	str	r3, [sp, #12]
   3337c:	e7ce      	b.n	3331c <__aeabi_ddiv+0x48>
   3337e:	46cb      	mov	fp, r9
   33380:	4641      	mov	r1, r8
   33382:	9a03      	ldr	r2, [sp, #12]
   33384:	9701      	str	r7, [sp, #4]
   33386:	2a02      	cmp	r2, #2
   33388:	d165      	bne.n	33456 <__aeabi_ddiv+0x182>
   3338a:	9b01      	ldr	r3, [sp, #4]
   3338c:	4c4a      	ldr	r4, [pc, #296]	; (334b8 <__aeabi_ddiv+0x1e4>)
   3338e:	469c      	mov	ip, r3
   33390:	2300      	movs	r3, #0
   33392:	2200      	movs	r2, #0
   33394:	4698      	mov	r8, r3
   33396:	e06b      	b.n	33470 <__aeabi_ddiv+0x19c>
   33398:	0003      	movs	r3, r0
   3339a:	4333      	orrs	r3, r6
   3339c:	4699      	mov	r9, r3
   3339e:	d04e      	beq.n	3343e <__aeabi_ddiv+0x16a>
   333a0:	2e00      	cmp	r6, #0
   333a2:	d100      	bne.n	333a6 <__aeabi_ddiv+0xd2>
   333a4:	e1bc      	b.n	33720 <__aeabi_ddiv+0x44c>
   333a6:	0030      	movs	r0, r6
   333a8:	f001 f8ca 	bl	34540 <__clzsi2>
   333ac:	0003      	movs	r3, r0
   333ae:	3b0b      	subs	r3, #11
   333b0:	2b1c      	cmp	r3, #28
   333b2:	dd00      	ble.n	333b6 <__aeabi_ddiv+0xe2>
   333b4:	e1ac      	b.n	33710 <__aeabi_ddiv+0x43c>
   333b6:	221d      	movs	r2, #29
   333b8:	1ad3      	subs	r3, r2, r3
   333ba:	465a      	mov	r2, fp
   333bc:	0001      	movs	r1, r0
   333be:	40da      	lsrs	r2, r3
   333c0:	3908      	subs	r1, #8
   333c2:	408e      	lsls	r6, r1
   333c4:	0013      	movs	r3, r2
   333c6:	4333      	orrs	r3, r6
   333c8:	4699      	mov	r9, r3
   333ca:	465b      	mov	r3, fp
   333cc:	408b      	lsls	r3, r1
   333ce:	4698      	mov	r8, r3
   333d0:	2300      	movs	r3, #0
   333d2:	4c3c      	ldr	r4, [pc, #240]	; (334c4 <__aeabi_ddiv+0x1f0>)
   333d4:	2600      	movs	r6, #0
   333d6:	1a24      	subs	r4, r4, r0
   333d8:	9303      	str	r3, [sp, #12]
   333da:	e79f      	b.n	3331c <__aeabi_ddiv+0x48>
   333dc:	4651      	mov	r1, sl
   333de:	465a      	mov	r2, fp
   333e0:	4311      	orrs	r1, r2
   333e2:	d129      	bne.n	33438 <__aeabi_ddiv+0x164>
   333e4:	2200      	movs	r2, #0
   333e6:	4693      	mov	fp, r2
   333e8:	3202      	adds	r2, #2
   333ea:	e7b1      	b.n	33350 <__aeabi_ddiv+0x7c>
   333ec:	4659      	mov	r1, fp
   333ee:	4301      	orrs	r1, r0
   333f0:	d01e      	beq.n	33430 <__aeabi_ddiv+0x15c>
   333f2:	465b      	mov	r3, fp
   333f4:	2b00      	cmp	r3, #0
   333f6:	d100      	bne.n	333fa <__aeabi_ddiv+0x126>
   333f8:	e19e      	b.n	33738 <__aeabi_ddiv+0x464>
   333fa:	4658      	mov	r0, fp
   333fc:	f001 f8a0 	bl	34540 <__clzsi2>
   33400:	0003      	movs	r3, r0
   33402:	3b0b      	subs	r3, #11
   33404:	2b1c      	cmp	r3, #28
   33406:	dd00      	ble.n	3340a <__aeabi_ddiv+0x136>
   33408:	e18f      	b.n	3372a <__aeabi_ddiv+0x456>
   3340a:	0002      	movs	r2, r0
   3340c:	4659      	mov	r1, fp
   3340e:	3a08      	subs	r2, #8
   33410:	4091      	lsls	r1, r2
   33412:	468b      	mov	fp, r1
   33414:	211d      	movs	r1, #29
   33416:	1acb      	subs	r3, r1, r3
   33418:	4651      	mov	r1, sl
   3341a:	40d9      	lsrs	r1, r3
   3341c:	000b      	movs	r3, r1
   3341e:	4659      	mov	r1, fp
   33420:	430b      	orrs	r3, r1
   33422:	4651      	mov	r1, sl
   33424:	469b      	mov	fp, r3
   33426:	4091      	lsls	r1, r2
   33428:	4b26      	ldr	r3, [pc, #152]	; (334c4 <__aeabi_ddiv+0x1f0>)
   3342a:	2200      	movs	r2, #0
   3342c:	1a1b      	subs	r3, r3, r0
   3342e:	e78f      	b.n	33350 <__aeabi_ddiv+0x7c>
   33430:	2300      	movs	r3, #0
   33432:	2201      	movs	r2, #1
   33434:	469b      	mov	fp, r3
   33436:	e78b      	b.n	33350 <__aeabi_ddiv+0x7c>
   33438:	4651      	mov	r1, sl
   3343a:	2203      	movs	r2, #3
   3343c:	e788      	b.n	33350 <__aeabi_ddiv+0x7c>
   3343e:	2300      	movs	r3, #0
   33440:	4698      	mov	r8, r3
   33442:	3301      	adds	r3, #1
   33444:	2604      	movs	r6, #4
   33446:	2400      	movs	r4, #0
   33448:	9303      	str	r3, [sp, #12]
   3344a:	e767      	b.n	3331c <__aeabi_ddiv+0x48>
   3344c:	2303      	movs	r3, #3
   3344e:	46b1      	mov	r9, r6
   33450:	9303      	str	r3, [sp, #12]
   33452:	260c      	movs	r6, #12
   33454:	e762      	b.n	3331c <__aeabi_ddiv+0x48>
   33456:	2a03      	cmp	r2, #3
   33458:	d100      	bne.n	3345c <__aeabi_ddiv+0x188>
   3345a:	e25c      	b.n	33916 <__aeabi_ddiv+0x642>
   3345c:	9b01      	ldr	r3, [sp, #4]
   3345e:	2a01      	cmp	r2, #1
   33460:	d000      	beq.n	33464 <__aeabi_ddiv+0x190>
   33462:	e1e4      	b.n	3382e <__aeabi_ddiv+0x55a>
   33464:	4013      	ands	r3, r2
   33466:	469c      	mov	ip, r3
   33468:	2300      	movs	r3, #0
   3346a:	2400      	movs	r4, #0
   3346c:	2200      	movs	r2, #0
   3346e:	4698      	mov	r8, r3
   33470:	2100      	movs	r1, #0
   33472:	0312      	lsls	r2, r2, #12
   33474:	0b13      	lsrs	r3, r2, #12
   33476:	0d0a      	lsrs	r2, r1, #20
   33478:	0512      	lsls	r2, r2, #20
   3347a:	431a      	orrs	r2, r3
   3347c:	0523      	lsls	r3, r4, #20
   3347e:	4c12      	ldr	r4, [pc, #72]	; (334c8 <__aeabi_ddiv+0x1f4>)
   33480:	4640      	mov	r0, r8
   33482:	4022      	ands	r2, r4
   33484:	4313      	orrs	r3, r2
   33486:	4662      	mov	r2, ip
   33488:	005b      	lsls	r3, r3, #1
   3348a:	07d2      	lsls	r2, r2, #31
   3348c:	085b      	lsrs	r3, r3, #1
   3348e:	4313      	orrs	r3, r2
   33490:	0019      	movs	r1, r3
   33492:	b007      	add	sp, #28
   33494:	bc3c      	pop	{r2, r3, r4, r5}
   33496:	4690      	mov	r8, r2
   33498:	4699      	mov	r9, r3
   3349a:	46a2      	mov	sl, r4
   3349c:	46ab      	mov	fp, r5
   3349e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   334a0:	2300      	movs	r3, #0
   334a2:	2280      	movs	r2, #128	; 0x80
   334a4:	469c      	mov	ip, r3
   334a6:	0312      	lsls	r2, r2, #12
   334a8:	4698      	mov	r8, r3
   334aa:	4c03      	ldr	r4, [pc, #12]	; (334b8 <__aeabi_ddiv+0x1e4>)
   334ac:	e7e0      	b.n	33470 <__aeabi_ddiv+0x19c>
   334ae:	2300      	movs	r3, #0
   334b0:	4c01      	ldr	r4, [pc, #4]	; (334b8 <__aeabi_ddiv+0x1e4>)
   334b2:	2200      	movs	r2, #0
   334b4:	4698      	mov	r8, r3
   334b6:	e7db      	b.n	33470 <__aeabi_ddiv+0x19c>
   334b8:	000007ff 	.word	0x000007ff
   334bc:	fffffc01 	.word	0xfffffc01
   334c0:	00039d70 	.word	0x00039d70
   334c4:	fffffc0d 	.word	0xfffffc0d
   334c8:	800fffff 	.word	0x800fffff
   334cc:	45d9      	cmp	r9, fp
   334ce:	d900      	bls.n	334d2 <__aeabi_ddiv+0x1fe>
   334d0:	e139      	b.n	33746 <__aeabi_ddiv+0x472>
   334d2:	d100      	bne.n	334d6 <__aeabi_ddiv+0x202>
   334d4:	e134      	b.n	33740 <__aeabi_ddiv+0x46c>
   334d6:	2300      	movs	r3, #0
   334d8:	4646      	mov	r6, r8
   334da:	464d      	mov	r5, r9
   334dc:	469a      	mov	sl, r3
   334de:	3c01      	subs	r4, #1
   334e0:	465b      	mov	r3, fp
   334e2:	0e0a      	lsrs	r2, r1, #24
   334e4:	021b      	lsls	r3, r3, #8
   334e6:	431a      	orrs	r2, r3
   334e8:	020b      	lsls	r3, r1, #8
   334ea:	0c17      	lsrs	r7, r2, #16
   334ec:	9303      	str	r3, [sp, #12]
   334ee:	0413      	lsls	r3, r2, #16
   334f0:	0c1b      	lsrs	r3, r3, #16
   334f2:	0039      	movs	r1, r7
   334f4:	0028      	movs	r0, r5
   334f6:	4690      	mov	r8, r2
   334f8:	9301      	str	r3, [sp, #4]
   334fa:	f7ff f8ab 	bl	32654 <__udivsi3>
   334fe:	0002      	movs	r2, r0
   33500:	9b01      	ldr	r3, [sp, #4]
   33502:	4683      	mov	fp, r0
   33504:	435a      	muls	r2, r3
   33506:	0028      	movs	r0, r5
   33508:	0039      	movs	r1, r7
   3350a:	4691      	mov	r9, r2
   3350c:	f7ff f928 	bl	32760 <__aeabi_uidivmod>
   33510:	0c35      	lsrs	r5, r6, #16
   33512:	0409      	lsls	r1, r1, #16
   33514:	430d      	orrs	r5, r1
   33516:	45a9      	cmp	r9, r5
   33518:	d90d      	bls.n	33536 <__aeabi_ddiv+0x262>
   3351a:	465b      	mov	r3, fp
   3351c:	4445      	add	r5, r8
   3351e:	3b01      	subs	r3, #1
   33520:	45a8      	cmp	r8, r5
   33522:	d900      	bls.n	33526 <__aeabi_ddiv+0x252>
   33524:	e13a      	b.n	3379c <__aeabi_ddiv+0x4c8>
   33526:	45a9      	cmp	r9, r5
   33528:	d800      	bhi.n	3352c <__aeabi_ddiv+0x258>
   3352a:	e137      	b.n	3379c <__aeabi_ddiv+0x4c8>
   3352c:	2302      	movs	r3, #2
   3352e:	425b      	negs	r3, r3
   33530:	469c      	mov	ip, r3
   33532:	4445      	add	r5, r8
   33534:	44e3      	add	fp, ip
   33536:	464b      	mov	r3, r9
   33538:	1aeb      	subs	r3, r5, r3
   3353a:	0039      	movs	r1, r7
   3353c:	0018      	movs	r0, r3
   3353e:	9304      	str	r3, [sp, #16]
   33540:	f7ff f888 	bl	32654 <__udivsi3>
   33544:	9b01      	ldr	r3, [sp, #4]
   33546:	0005      	movs	r5, r0
   33548:	4343      	muls	r3, r0
   3354a:	0039      	movs	r1, r7
   3354c:	9804      	ldr	r0, [sp, #16]
   3354e:	4699      	mov	r9, r3
   33550:	f7ff f906 	bl	32760 <__aeabi_uidivmod>
   33554:	0433      	lsls	r3, r6, #16
   33556:	0409      	lsls	r1, r1, #16
   33558:	0c1b      	lsrs	r3, r3, #16
   3355a:	430b      	orrs	r3, r1
   3355c:	4599      	cmp	r9, r3
   3355e:	d909      	bls.n	33574 <__aeabi_ddiv+0x2a0>
   33560:	4443      	add	r3, r8
   33562:	1e6a      	subs	r2, r5, #1
   33564:	4598      	cmp	r8, r3
   33566:	d900      	bls.n	3356a <__aeabi_ddiv+0x296>
   33568:	e11a      	b.n	337a0 <__aeabi_ddiv+0x4cc>
   3356a:	4599      	cmp	r9, r3
   3356c:	d800      	bhi.n	33570 <__aeabi_ddiv+0x29c>
   3356e:	e117      	b.n	337a0 <__aeabi_ddiv+0x4cc>
   33570:	3d02      	subs	r5, #2
   33572:	4443      	add	r3, r8
   33574:	464a      	mov	r2, r9
   33576:	1a9b      	subs	r3, r3, r2
   33578:	465a      	mov	r2, fp
   3357a:	0412      	lsls	r2, r2, #16
   3357c:	432a      	orrs	r2, r5
   3357e:	9903      	ldr	r1, [sp, #12]
   33580:	4693      	mov	fp, r2
   33582:	0c10      	lsrs	r0, r2, #16
   33584:	0c0a      	lsrs	r2, r1, #16
   33586:	4691      	mov	r9, r2
   33588:	0409      	lsls	r1, r1, #16
   3358a:	465a      	mov	r2, fp
   3358c:	0c09      	lsrs	r1, r1, #16
   3358e:	464e      	mov	r6, r9
   33590:	000d      	movs	r5, r1
   33592:	0412      	lsls	r2, r2, #16
   33594:	0c12      	lsrs	r2, r2, #16
   33596:	4345      	muls	r5, r0
   33598:	9105      	str	r1, [sp, #20]
   3359a:	4351      	muls	r1, r2
   3359c:	4372      	muls	r2, r6
   3359e:	4370      	muls	r0, r6
   335a0:	1952      	adds	r2, r2, r5
   335a2:	0c0e      	lsrs	r6, r1, #16
   335a4:	18b2      	adds	r2, r6, r2
   335a6:	4295      	cmp	r5, r2
   335a8:	d903      	bls.n	335b2 <__aeabi_ddiv+0x2de>
   335aa:	2580      	movs	r5, #128	; 0x80
   335ac:	026d      	lsls	r5, r5, #9
   335ae:	46ac      	mov	ip, r5
   335b0:	4460      	add	r0, ip
   335b2:	0c15      	lsrs	r5, r2, #16
   335b4:	0409      	lsls	r1, r1, #16
   335b6:	0412      	lsls	r2, r2, #16
   335b8:	0c09      	lsrs	r1, r1, #16
   335ba:	1828      	adds	r0, r5, r0
   335bc:	1852      	adds	r2, r2, r1
   335be:	4283      	cmp	r3, r0
   335c0:	d200      	bcs.n	335c4 <__aeabi_ddiv+0x2f0>
   335c2:	e0ce      	b.n	33762 <__aeabi_ddiv+0x48e>
   335c4:	d100      	bne.n	335c8 <__aeabi_ddiv+0x2f4>
   335c6:	e0c8      	b.n	3375a <__aeabi_ddiv+0x486>
   335c8:	1a1d      	subs	r5, r3, r0
   335ca:	4653      	mov	r3, sl
   335cc:	1a9e      	subs	r6, r3, r2
   335ce:	45b2      	cmp	sl, r6
   335d0:	4192      	sbcs	r2, r2
   335d2:	4252      	negs	r2, r2
   335d4:	1aab      	subs	r3, r5, r2
   335d6:	469a      	mov	sl, r3
   335d8:	4598      	cmp	r8, r3
   335da:	d100      	bne.n	335de <__aeabi_ddiv+0x30a>
   335dc:	e117      	b.n	3380e <__aeabi_ddiv+0x53a>
   335de:	0039      	movs	r1, r7
   335e0:	0018      	movs	r0, r3
   335e2:	f7ff f837 	bl	32654 <__udivsi3>
   335e6:	9b01      	ldr	r3, [sp, #4]
   335e8:	0005      	movs	r5, r0
   335ea:	4343      	muls	r3, r0
   335ec:	0039      	movs	r1, r7
   335ee:	4650      	mov	r0, sl
   335f0:	9304      	str	r3, [sp, #16]
   335f2:	f7ff f8b5 	bl	32760 <__aeabi_uidivmod>
   335f6:	9804      	ldr	r0, [sp, #16]
   335f8:	040b      	lsls	r3, r1, #16
   335fa:	0c31      	lsrs	r1, r6, #16
   335fc:	4319      	orrs	r1, r3
   335fe:	4288      	cmp	r0, r1
   33600:	d909      	bls.n	33616 <__aeabi_ddiv+0x342>
   33602:	4441      	add	r1, r8
   33604:	1e6b      	subs	r3, r5, #1
   33606:	4588      	cmp	r8, r1
   33608:	d900      	bls.n	3360c <__aeabi_ddiv+0x338>
   3360a:	e107      	b.n	3381c <__aeabi_ddiv+0x548>
   3360c:	4288      	cmp	r0, r1
   3360e:	d800      	bhi.n	33612 <__aeabi_ddiv+0x33e>
   33610:	e104      	b.n	3381c <__aeabi_ddiv+0x548>
   33612:	3d02      	subs	r5, #2
   33614:	4441      	add	r1, r8
   33616:	9b04      	ldr	r3, [sp, #16]
   33618:	1acb      	subs	r3, r1, r3
   3361a:	0018      	movs	r0, r3
   3361c:	0039      	movs	r1, r7
   3361e:	9304      	str	r3, [sp, #16]
   33620:	f7ff f818 	bl	32654 <__udivsi3>
   33624:	9b01      	ldr	r3, [sp, #4]
   33626:	4682      	mov	sl, r0
   33628:	4343      	muls	r3, r0
   3362a:	0039      	movs	r1, r7
   3362c:	9804      	ldr	r0, [sp, #16]
   3362e:	9301      	str	r3, [sp, #4]
   33630:	f7ff f896 	bl	32760 <__aeabi_uidivmod>
   33634:	9801      	ldr	r0, [sp, #4]
   33636:	040b      	lsls	r3, r1, #16
   33638:	0431      	lsls	r1, r6, #16
   3363a:	0c09      	lsrs	r1, r1, #16
   3363c:	4319      	orrs	r1, r3
   3363e:	4288      	cmp	r0, r1
   33640:	d90d      	bls.n	3365e <__aeabi_ddiv+0x38a>
   33642:	4653      	mov	r3, sl
   33644:	4441      	add	r1, r8
   33646:	3b01      	subs	r3, #1
   33648:	4588      	cmp	r8, r1
   3364a:	d900      	bls.n	3364e <__aeabi_ddiv+0x37a>
   3364c:	e0e8      	b.n	33820 <__aeabi_ddiv+0x54c>
   3364e:	4288      	cmp	r0, r1
   33650:	d800      	bhi.n	33654 <__aeabi_ddiv+0x380>
   33652:	e0e5      	b.n	33820 <__aeabi_ddiv+0x54c>
   33654:	2302      	movs	r3, #2
   33656:	425b      	negs	r3, r3
   33658:	469c      	mov	ip, r3
   3365a:	4441      	add	r1, r8
   3365c:	44e2      	add	sl, ip
   3365e:	9b01      	ldr	r3, [sp, #4]
   33660:	042d      	lsls	r5, r5, #16
   33662:	1ace      	subs	r6, r1, r3
   33664:	4651      	mov	r1, sl
   33666:	4329      	orrs	r1, r5
   33668:	9d05      	ldr	r5, [sp, #20]
   3366a:	464f      	mov	r7, r9
   3366c:	002a      	movs	r2, r5
   3366e:	040b      	lsls	r3, r1, #16
   33670:	0c08      	lsrs	r0, r1, #16
   33672:	0c1b      	lsrs	r3, r3, #16
   33674:	435a      	muls	r2, r3
   33676:	4345      	muls	r5, r0
   33678:	437b      	muls	r3, r7
   3367a:	4378      	muls	r0, r7
   3367c:	195b      	adds	r3, r3, r5
   3367e:	0c17      	lsrs	r7, r2, #16
   33680:	18fb      	adds	r3, r7, r3
   33682:	429d      	cmp	r5, r3
   33684:	d903      	bls.n	3368e <__aeabi_ddiv+0x3ba>
   33686:	2580      	movs	r5, #128	; 0x80
   33688:	026d      	lsls	r5, r5, #9
   3368a:	46ac      	mov	ip, r5
   3368c:	4460      	add	r0, ip
   3368e:	0c1d      	lsrs	r5, r3, #16
   33690:	0412      	lsls	r2, r2, #16
   33692:	041b      	lsls	r3, r3, #16
   33694:	0c12      	lsrs	r2, r2, #16
   33696:	1828      	adds	r0, r5, r0
   33698:	189b      	adds	r3, r3, r2
   3369a:	4286      	cmp	r6, r0
   3369c:	d200      	bcs.n	336a0 <__aeabi_ddiv+0x3cc>
   3369e:	e093      	b.n	337c8 <__aeabi_ddiv+0x4f4>
   336a0:	d100      	bne.n	336a4 <__aeabi_ddiv+0x3d0>
   336a2:	e08e      	b.n	337c2 <__aeabi_ddiv+0x4ee>
   336a4:	2301      	movs	r3, #1
   336a6:	4319      	orrs	r1, r3
   336a8:	4ba0      	ldr	r3, [pc, #640]	; (3392c <__aeabi_ddiv+0x658>)
   336aa:	18e3      	adds	r3, r4, r3
   336ac:	2b00      	cmp	r3, #0
   336ae:	dc00      	bgt.n	336b2 <__aeabi_ddiv+0x3de>
   336b0:	e099      	b.n	337e6 <__aeabi_ddiv+0x512>
   336b2:	074a      	lsls	r2, r1, #29
   336b4:	d000      	beq.n	336b8 <__aeabi_ddiv+0x3e4>
   336b6:	e09e      	b.n	337f6 <__aeabi_ddiv+0x522>
   336b8:	465a      	mov	r2, fp
   336ba:	01d2      	lsls	r2, r2, #7
   336bc:	d506      	bpl.n	336cc <__aeabi_ddiv+0x3f8>
   336be:	465a      	mov	r2, fp
   336c0:	4b9b      	ldr	r3, [pc, #620]	; (33930 <__aeabi_ddiv+0x65c>)
   336c2:	401a      	ands	r2, r3
   336c4:	2380      	movs	r3, #128	; 0x80
   336c6:	4693      	mov	fp, r2
   336c8:	00db      	lsls	r3, r3, #3
   336ca:	18e3      	adds	r3, r4, r3
   336cc:	4a99      	ldr	r2, [pc, #612]	; (33934 <__aeabi_ddiv+0x660>)
   336ce:	4293      	cmp	r3, r2
   336d0:	dd68      	ble.n	337a4 <__aeabi_ddiv+0x4d0>
   336d2:	2301      	movs	r3, #1
   336d4:	9a02      	ldr	r2, [sp, #8]
   336d6:	4c98      	ldr	r4, [pc, #608]	; (33938 <__aeabi_ddiv+0x664>)
   336d8:	401a      	ands	r2, r3
   336da:	2300      	movs	r3, #0
   336dc:	4694      	mov	ip, r2
   336de:	4698      	mov	r8, r3
   336e0:	2200      	movs	r2, #0
   336e2:	e6c5      	b.n	33470 <__aeabi_ddiv+0x19c>
   336e4:	2280      	movs	r2, #128	; 0x80
   336e6:	464b      	mov	r3, r9
   336e8:	0312      	lsls	r2, r2, #12
   336ea:	4213      	tst	r3, r2
   336ec:	d00a      	beq.n	33704 <__aeabi_ddiv+0x430>
   336ee:	465b      	mov	r3, fp
   336f0:	4213      	tst	r3, r2
   336f2:	d106      	bne.n	33702 <__aeabi_ddiv+0x42e>
   336f4:	431a      	orrs	r2, r3
   336f6:	0312      	lsls	r2, r2, #12
   336f8:	0b12      	lsrs	r2, r2, #12
   336fa:	46ac      	mov	ip, r5
   336fc:	4688      	mov	r8, r1
   336fe:	4c8e      	ldr	r4, [pc, #568]	; (33938 <__aeabi_ddiv+0x664>)
   33700:	e6b6      	b.n	33470 <__aeabi_ddiv+0x19c>
   33702:	464b      	mov	r3, r9
   33704:	431a      	orrs	r2, r3
   33706:	0312      	lsls	r2, r2, #12
   33708:	0b12      	lsrs	r2, r2, #12
   3370a:	46bc      	mov	ip, r7
   3370c:	4c8a      	ldr	r4, [pc, #552]	; (33938 <__aeabi_ddiv+0x664>)
   3370e:	e6af      	b.n	33470 <__aeabi_ddiv+0x19c>
   33710:	0003      	movs	r3, r0
   33712:	465a      	mov	r2, fp
   33714:	3b28      	subs	r3, #40	; 0x28
   33716:	409a      	lsls	r2, r3
   33718:	2300      	movs	r3, #0
   3371a:	4691      	mov	r9, r2
   3371c:	4698      	mov	r8, r3
   3371e:	e657      	b.n	333d0 <__aeabi_ddiv+0xfc>
   33720:	4658      	mov	r0, fp
   33722:	f000 ff0d 	bl	34540 <__clzsi2>
   33726:	3020      	adds	r0, #32
   33728:	e640      	b.n	333ac <__aeabi_ddiv+0xd8>
   3372a:	0003      	movs	r3, r0
   3372c:	4652      	mov	r2, sl
   3372e:	3b28      	subs	r3, #40	; 0x28
   33730:	409a      	lsls	r2, r3
   33732:	2100      	movs	r1, #0
   33734:	4693      	mov	fp, r2
   33736:	e677      	b.n	33428 <__aeabi_ddiv+0x154>
   33738:	f000 ff02 	bl	34540 <__clzsi2>
   3373c:	3020      	adds	r0, #32
   3373e:	e65f      	b.n	33400 <__aeabi_ddiv+0x12c>
   33740:	4588      	cmp	r8, r1
   33742:	d200      	bcs.n	33746 <__aeabi_ddiv+0x472>
   33744:	e6c7      	b.n	334d6 <__aeabi_ddiv+0x202>
   33746:	464b      	mov	r3, r9
   33748:	07de      	lsls	r6, r3, #31
   3374a:	085d      	lsrs	r5, r3, #1
   3374c:	4643      	mov	r3, r8
   3374e:	085b      	lsrs	r3, r3, #1
   33750:	431e      	orrs	r6, r3
   33752:	4643      	mov	r3, r8
   33754:	07db      	lsls	r3, r3, #31
   33756:	469a      	mov	sl, r3
   33758:	e6c2      	b.n	334e0 <__aeabi_ddiv+0x20c>
   3375a:	2500      	movs	r5, #0
   3375c:	4592      	cmp	sl, r2
   3375e:	d300      	bcc.n	33762 <__aeabi_ddiv+0x48e>
   33760:	e733      	b.n	335ca <__aeabi_ddiv+0x2f6>
   33762:	9e03      	ldr	r6, [sp, #12]
   33764:	4659      	mov	r1, fp
   33766:	46b4      	mov	ip, r6
   33768:	44e2      	add	sl, ip
   3376a:	45b2      	cmp	sl, r6
   3376c:	41ad      	sbcs	r5, r5
   3376e:	426d      	negs	r5, r5
   33770:	4445      	add	r5, r8
   33772:	18eb      	adds	r3, r5, r3
   33774:	3901      	subs	r1, #1
   33776:	4598      	cmp	r8, r3
   33778:	d207      	bcs.n	3378a <__aeabi_ddiv+0x4b6>
   3377a:	4298      	cmp	r0, r3
   3377c:	d900      	bls.n	33780 <__aeabi_ddiv+0x4ac>
   3377e:	e07f      	b.n	33880 <__aeabi_ddiv+0x5ac>
   33780:	d100      	bne.n	33784 <__aeabi_ddiv+0x4b0>
   33782:	e0bc      	b.n	338fe <__aeabi_ddiv+0x62a>
   33784:	1a1d      	subs	r5, r3, r0
   33786:	468b      	mov	fp, r1
   33788:	e71f      	b.n	335ca <__aeabi_ddiv+0x2f6>
   3378a:	4598      	cmp	r8, r3
   3378c:	d1fa      	bne.n	33784 <__aeabi_ddiv+0x4b0>
   3378e:	9d03      	ldr	r5, [sp, #12]
   33790:	4555      	cmp	r5, sl
   33792:	d9f2      	bls.n	3377a <__aeabi_ddiv+0x4a6>
   33794:	4643      	mov	r3, r8
   33796:	468b      	mov	fp, r1
   33798:	1a1d      	subs	r5, r3, r0
   3379a:	e716      	b.n	335ca <__aeabi_ddiv+0x2f6>
   3379c:	469b      	mov	fp, r3
   3379e:	e6ca      	b.n	33536 <__aeabi_ddiv+0x262>
   337a0:	0015      	movs	r5, r2
   337a2:	e6e7      	b.n	33574 <__aeabi_ddiv+0x2a0>
   337a4:	465a      	mov	r2, fp
   337a6:	08c9      	lsrs	r1, r1, #3
   337a8:	0752      	lsls	r2, r2, #29
   337aa:	430a      	orrs	r2, r1
   337ac:	055b      	lsls	r3, r3, #21
   337ae:	4690      	mov	r8, r2
   337b0:	0d5c      	lsrs	r4, r3, #21
   337b2:	465a      	mov	r2, fp
   337b4:	2301      	movs	r3, #1
   337b6:	9902      	ldr	r1, [sp, #8]
   337b8:	0252      	lsls	r2, r2, #9
   337ba:	4019      	ands	r1, r3
   337bc:	0b12      	lsrs	r2, r2, #12
   337be:	468c      	mov	ip, r1
   337c0:	e656      	b.n	33470 <__aeabi_ddiv+0x19c>
   337c2:	2b00      	cmp	r3, #0
   337c4:	d100      	bne.n	337c8 <__aeabi_ddiv+0x4f4>
   337c6:	e76f      	b.n	336a8 <__aeabi_ddiv+0x3d4>
   337c8:	4446      	add	r6, r8
   337ca:	1e4a      	subs	r2, r1, #1
   337cc:	45b0      	cmp	r8, r6
   337ce:	d929      	bls.n	33824 <__aeabi_ddiv+0x550>
   337d0:	0011      	movs	r1, r2
   337d2:	4286      	cmp	r6, r0
   337d4:	d000      	beq.n	337d8 <__aeabi_ddiv+0x504>
   337d6:	e765      	b.n	336a4 <__aeabi_ddiv+0x3d0>
   337d8:	9a03      	ldr	r2, [sp, #12]
   337da:	4293      	cmp	r3, r2
   337dc:	d000      	beq.n	337e0 <__aeabi_ddiv+0x50c>
   337de:	e761      	b.n	336a4 <__aeabi_ddiv+0x3d0>
   337e0:	e762      	b.n	336a8 <__aeabi_ddiv+0x3d4>
   337e2:	2101      	movs	r1, #1
   337e4:	4249      	negs	r1, r1
   337e6:	2001      	movs	r0, #1
   337e8:	1ac2      	subs	r2, r0, r3
   337ea:	2a38      	cmp	r2, #56	; 0x38
   337ec:	dd21      	ble.n	33832 <__aeabi_ddiv+0x55e>
   337ee:	9b02      	ldr	r3, [sp, #8]
   337f0:	4003      	ands	r3, r0
   337f2:	469c      	mov	ip, r3
   337f4:	e638      	b.n	33468 <__aeabi_ddiv+0x194>
   337f6:	220f      	movs	r2, #15
   337f8:	400a      	ands	r2, r1
   337fa:	2a04      	cmp	r2, #4
   337fc:	d100      	bne.n	33800 <__aeabi_ddiv+0x52c>
   337fe:	e75b      	b.n	336b8 <__aeabi_ddiv+0x3e4>
   33800:	000a      	movs	r2, r1
   33802:	1d11      	adds	r1, r2, #4
   33804:	4291      	cmp	r1, r2
   33806:	4192      	sbcs	r2, r2
   33808:	4252      	negs	r2, r2
   3380a:	4493      	add	fp, r2
   3380c:	e754      	b.n	336b8 <__aeabi_ddiv+0x3e4>
   3380e:	4b47      	ldr	r3, [pc, #284]	; (3392c <__aeabi_ddiv+0x658>)
   33810:	18e3      	adds	r3, r4, r3
   33812:	2b00      	cmp	r3, #0
   33814:	dde5      	ble.n	337e2 <__aeabi_ddiv+0x50e>
   33816:	2201      	movs	r2, #1
   33818:	4252      	negs	r2, r2
   3381a:	e7f2      	b.n	33802 <__aeabi_ddiv+0x52e>
   3381c:	001d      	movs	r5, r3
   3381e:	e6fa      	b.n	33616 <__aeabi_ddiv+0x342>
   33820:	469a      	mov	sl, r3
   33822:	e71c      	b.n	3365e <__aeabi_ddiv+0x38a>
   33824:	42b0      	cmp	r0, r6
   33826:	d839      	bhi.n	3389c <__aeabi_ddiv+0x5c8>
   33828:	d06e      	beq.n	33908 <__aeabi_ddiv+0x634>
   3382a:	0011      	movs	r1, r2
   3382c:	e73a      	b.n	336a4 <__aeabi_ddiv+0x3d0>
   3382e:	9302      	str	r3, [sp, #8]
   33830:	e73a      	b.n	336a8 <__aeabi_ddiv+0x3d4>
   33832:	2a1f      	cmp	r2, #31
   33834:	dc3c      	bgt.n	338b0 <__aeabi_ddiv+0x5dc>
   33836:	2320      	movs	r3, #32
   33838:	1a9b      	subs	r3, r3, r2
   3383a:	000c      	movs	r4, r1
   3383c:	4658      	mov	r0, fp
   3383e:	4099      	lsls	r1, r3
   33840:	4098      	lsls	r0, r3
   33842:	1e4b      	subs	r3, r1, #1
   33844:	4199      	sbcs	r1, r3
   33846:	465b      	mov	r3, fp
   33848:	40d4      	lsrs	r4, r2
   3384a:	40d3      	lsrs	r3, r2
   3384c:	4320      	orrs	r0, r4
   3384e:	4308      	orrs	r0, r1
   33850:	001a      	movs	r2, r3
   33852:	0743      	lsls	r3, r0, #29
   33854:	d009      	beq.n	3386a <__aeabi_ddiv+0x596>
   33856:	230f      	movs	r3, #15
   33858:	4003      	ands	r3, r0
   3385a:	2b04      	cmp	r3, #4
   3385c:	d005      	beq.n	3386a <__aeabi_ddiv+0x596>
   3385e:	0001      	movs	r1, r0
   33860:	1d08      	adds	r0, r1, #4
   33862:	4288      	cmp	r0, r1
   33864:	419b      	sbcs	r3, r3
   33866:	425b      	negs	r3, r3
   33868:	18d2      	adds	r2, r2, r3
   3386a:	0213      	lsls	r3, r2, #8
   3386c:	d53a      	bpl.n	338e4 <__aeabi_ddiv+0x610>
   3386e:	2301      	movs	r3, #1
   33870:	9a02      	ldr	r2, [sp, #8]
   33872:	2401      	movs	r4, #1
   33874:	401a      	ands	r2, r3
   33876:	2300      	movs	r3, #0
   33878:	4694      	mov	ip, r2
   3387a:	4698      	mov	r8, r3
   3387c:	2200      	movs	r2, #0
   3387e:	e5f7      	b.n	33470 <__aeabi_ddiv+0x19c>
   33880:	2102      	movs	r1, #2
   33882:	4249      	negs	r1, r1
   33884:	468c      	mov	ip, r1
   33886:	9d03      	ldr	r5, [sp, #12]
   33888:	44e3      	add	fp, ip
   3388a:	46ac      	mov	ip, r5
   3388c:	44e2      	add	sl, ip
   3388e:	45aa      	cmp	sl, r5
   33890:	41ad      	sbcs	r5, r5
   33892:	426d      	negs	r5, r5
   33894:	4445      	add	r5, r8
   33896:	18ed      	adds	r5, r5, r3
   33898:	1a2d      	subs	r5, r5, r0
   3389a:	e696      	b.n	335ca <__aeabi_ddiv+0x2f6>
   3389c:	1e8a      	subs	r2, r1, #2
   3389e:	9903      	ldr	r1, [sp, #12]
   338a0:	004d      	lsls	r5, r1, #1
   338a2:	428d      	cmp	r5, r1
   338a4:	4189      	sbcs	r1, r1
   338a6:	4249      	negs	r1, r1
   338a8:	4441      	add	r1, r8
   338aa:	1876      	adds	r6, r6, r1
   338ac:	9503      	str	r5, [sp, #12]
   338ae:	e78f      	b.n	337d0 <__aeabi_ddiv+0x4fc>
   338b0:	201f      	movs	r0, #31
   338b2:	4240      	negs	r0, r0
   338b4:	1ac3      	subs	r3, r0, r3
   338b6:	4658      	mov	r0, fp
   338b8:	40d8      	lsrs	r0, r3
   338ba:	0003      	movs	r3, r0
   338bc:	2a20      	cmp	r2, #32
   338be:	d028      	beq.n	33912 <__aeabi_ddiv+0x63e>
   338c0:	2040      	movs	r0, #64	; 0x40
   338c2:	465d      	mov	r5, fp
   338c4:	1a82      	subs	r2, r0, r2
   338c6:	4095      	lsls	r5, r2
   338c8:	4329      	orrs	r1, r5
   338ca:	1e4a      	subs	r2, r1, #1
   338cc:	4191      	sbcs	r1, r2
   338ce:	4319      	orrs	r1, r3
   338d0:	2307      	movs	r3, #7
   338d2:	2200      	movs	r2, #0
   338d4:	400b      	ands	r3, r1
   338d6:	d009      	beq.n	338ec <__aeabi_ddiv+0x618>
   338d8:	230f      	movs	r3, #15
   338da:	2200      	movs	r2, #0
   338dc:	400b      	ands	r3, r1
   338de:	0008      	movs	r0, r1
   338e0:	2b04      	cmp	r3, #4
   338e2:	d1bd      	bne.n	33860 <__aeabi_ddiv+0x58c>
   338e4:	0001      	movs	r1, r0
   338e6:	0753      	lsls	r3, r2, #29
   338e8:	0252      	lsls	r2, r2, #9
   338ea:	0b12      	lsrs	r2, r2, #12
   338ec:	08c9      	lsrs	r1, r1, #3
   338ee:	4319      	orrs	r1, r3
   338f0:	2301      	movs	r3, #1
   338f2:	4688      	mov	r8, r1
   338f4:	9902      	ldr	r1, [sp, #8]
   338f6:	2400      	movs	r4, #0
   338f8:	4019      	ands	r1, r3
   338fa:	468c      	mov	ip, r1
   338fc:	e5b8      	b.n	33470 <__aeabi_ddiv+0x19c>
   338fe:	4552      	cmp	r2, sl
   33900:	d8be      	bhi.n	33880 <__aeabi_ddiv+0x5ac>
   33902:	468b      	mov	fp, r1
   33904:	2500      	movs	r5, #0
   33906:	e660      	b.n	335ca <__aeabi_ddiv+0x2f6>
   33908:	9d03      	ldr	r5, [sp, #12]
   3390a:	429d      	cmp	r5, r3
   3390c:	d3c6      	bcc.n	3389c <__aeabi_ddiv+0x5c8>
   3390e:	0011      	movs	r1, r2
   33910:	e762      	b.n	337d8 <__aeabi_ddiv+0x504>
   33912:	2500      	movs	r5, #0
   33914:	e7d8      	b.n	338c8 <__aeabi_ddiv+0x5f4>
   33916:	2280      	movs	r2, #128	; 0x80
   33918:	465b      	mov	r3, fp
   3391a:	0312      	lsls	r2, r2, #12
   3391c:	431a      	orrs	r2, r3
   3391e:	9b01      	ldr	r3, [sp, #4]
   33920:	0312      	lsls	r2, r2, #12
   33922:	0b12      	lsrs	r2, r2, #12
   33924:	469c      	mov	ip, r3
   33926:	4688      	mov	r8, r1
   33928:	4c03      	ldr	r4, [pc, #12]	; (33938 <__aeabi_ddiv+0x664>)
   3392a:	e5a1      	b.n	33470 <__aeabi_ddiv+0x19c>
   3392c:	000003ff 	.word	0x000003ff
   33930:	feffffff 	.word	0xfeffffff
   33934:	000007fe 	.word	0x000007fe
   33938:	000007ff 	.word	0x000007ff

0003393c <__aeabi_dmul>:
   3393c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3393e:	4657      	mov	r7, sl
   33940:	4645      	mov	r5, r8
   33942:	46de      	mov	lr, fp
   33944:	464e      	mov	r6, r9
   33946:	b5e0      	push	{r5, r6, r7, lr}
   33948:	030c      	lsls	r4, r1, #12
   3394a:	4698      	mov	r8, r3
   3394c:	004e      	lsls	r6, r1, #1
   3394e:	0b23      	lsrs	r3, r4, #12
   33950:	b087      	sub	sp, #28
   33952:	0007      	movs	r7, r0
   33954:	4692      	mov	sl, r2
   33956:	469b      	mov	fp, r3
   33958:	0d76      	lsrs	r6, r6, #21
   3395a:	0fcd      	lsrs	r5, r1, #31
   3395c:	2e00      	cmp	r6, #0
   3395e:	d06b      	beq.n	33a38 <__aeabi_dmul+0xfc>
   33960:	4b6d      	ldr	r3, [pc, #436]	; (33b18 <__aeabi_dmul+0x1dc>)
   33962:	429e      	cmp	r6, r3
   33964:	d035      	beq.n	339d2 <__aeabi_dmul+0x96>
   33966:	2480      	movs	r4, #128	; 0x80
   33968:	465b      	mov	r3, fp
   3396a:	0f42      	lsrs	r2, r0, #29
   3396c:	0424      	lsls	r4, r4, #16
   3396e:	00db      	lsls	r3, r3, #3
   33970:	4314      	orrs	r4, r2
   33972:	431c      	orrs	r4, r3
   33974:	00c3      	lsls	r3, r0, #3
   33976:	4699      	mov	r9, r3
   33978:	4b68      	ldr	r3, [pc, #416]	; (33b1c <__aeabi_dmul+0x1e0>)
   3397a:	46a3      	mov	fp, r4
   3397c:	469c      	mov	ip, r3
   3397e:	2300      	movs	r3, #0
   33980:	2700      	movs	r7, #0
   33982:	4466      	add	r6, ip
   33984:	9302      	str	r3, [sp, #8]
   33986:	4643      	mov	r3, r8
   33988:	031c      	lsls	r4, r3, #12
   3398a:	005a      	lsls	r2, r3, #1
   3398c:	0fdb      	lsrs	r3, r3, #31
   3398e:	4650      	mov	r0, sl
   33990:	0b24      	lsrs	r4, r4, #12
   33992:	0d52      	lsrs	r2, r2, #21
   33994:	4698      	mov	r8, r3
   33996:	d100      	bne.n	3399a <__aeabi_dmul+0x5e>
   33998:	e076      	b.n	33a88 <__aeabi_dmul+0x14c>
   3399a:	4b5f      	ldr	r3, [pc, #380]	; (33b18 <__aeabi_dmul+0x1dc>)
   3399c:	429a      	cmp	r2, r3
   3399e:	d06d      	beq.n	33a7c <__aeabi_dmul+0x140>
   339a0:	2380      	movs	r3, #128	; 0x80
   339a2:	0f41      	lsrs	r1, r0, #29
   339a4:	041b      	lsls	r3, r3, #16
   339a6:	430b      	orrs	r3, r1
   339a8:	495c      	ldr	r1, [pc, #368]	; (33b1c <__aeabi_dmul+0x1e0>)
   339aa:	00e4      	lsls	r4, r4, #3
   339ac:	468c      	mov	ip, r1
   339ae:	431c      	orrs	r4, r3
   339b0:	00c3      	lsls	r3, r0, #3
   339b2:	2000      	movs	r0, #0
   339b4:	4462      	add	r2, ip
   339b6:	4641      	mov	r1, r8
   339b8:	18b6      	adds	r6, r6, r2
   339ba:	4069      	eors	r1, r5
   339bc:	1c72      	adds	r2, r6, #1
   339be:	9101      	str	r1, [sp, #4]
   339c0:	4694      	mov	ip, r2
   339c2:	4307      	orrs	r7, r0
   339c4:	2f0f      	cmp	r7, #15
   339c6:	d900      	bls.n	339ca <__aeabi_dmul+0x8e>
   339c8:	e0b0      	b.n	33b2c <__aeabi_dmul+0x1f0>
   339ca:	4a55      	ldr	r2, [pc, #340]	; (33b20 <__aeabi_dmul+0x1e4>)
   339cc:	00bf      	lsls	r7, r7, #2
   339ce:	59d2      	ldr	r2, [r2, r7]
   339d0:	4697      	mov	pc, r2
   339d2:	465b      	mov	r3, fp
   339d4:	4303      	orrs	r3, r0
   339d6:	4699      	mov	r9, r3
   339d8:	d000      	beq.n	339dc <__aeabi_dmul+0xa0>
   339da:	e087      	b.n	33aec <__aeabi_dmul+0x1b0>
   339dc:	2300      	movs	r3, #0
   339de:	469b      	mov	fp, r3
   339e0:	3302      	adds	r3, #2
   339e2:	2708      	movs	r7, #8
   339e4:	9302      	str	r3, [sp, #8]
   339e6:	e7ce      	b.n	33986 <__aeabi_dmul+0x4a>
   339e8:	4642      	mov	r2, r8
   339ea:	9201      	str	r2, [sp, #4]
   339ec:	2802      	cmp	r0, #2
   339ee:	d067      	beq.n	33ac0 <__aeabi_dmul+0x184>
   339f0:	2803      	cmp	r0, #3
   339f2:	d100      	bne.n	339f6 <__aeabi_dmul+0xba>
   339f4:	e20e      	b.n	33e14 <__aeabi_dmul+0x4d8>
   339f6:	2801      	cmp	r0, #1
   339f8:	d000      	beq.n	339fc <__aeabi_dmul+0xc0>
   339fa:	e162      	b.n	33cc2 <__aeabi_dmul+0x386>
   339fc:	2300      	movs	r3, #0
   339fe:	2400      	movs	r4, #0
   33a00:	2200      	movs	r2, #0
   33a02:	4699      	mov	r9, r3
   33a04:	9901      	ldr	r1, [sp, #4]
   33a06:	4001      	ands	r1, r0
   33a08:	b2cd      	uxtb	r5, r1
   33a0a:	2100      	movs	r1, #0
   33a0c:	0312      	lsls	r2, r2, #12
   33a0e:	0d0b      	lsrs	r3, r1, #20
   33a10:	0b12      	lsrs	r2, r2, #12
   33a12:	051b      	lsls	r3, r3, #20
   33a14:	4313      	orrs	r3, r2
   33a16:	4a43      	ldr	r2, [pc, #268]	; (33b24 <__aeabi_dmul+0x1e8>)
   33a18:	0524      	lsls	r4, r4, #20
   33a1a:	4013      	ands	r3, r2
   33a1c:	431c      	orrs	r4, r3
   33a1e:	0064      	lsls	r4, r4, #1
   33a20:	07ed      	lsls	r5, r5, #31
   33a22:	0864      	lsrs	r4, r4, #1
   33a24:	432c      	orrs	r4, r5
   33a26:	4648      	mov	r0, r9
   33a28:	0021      	movs	r1, r4
   33a2a:	b007      	add	sp, #28
   33a2c:	bc3c      	pop	{r2, r3, r4, r5}
   33a2e:	4690      	mov	r8, r2
   33a30:	4699      	mov	r9, r3
   33a32:	46a2      	mov	sl, r4
   33a34:	46ab      	mov	fp, r5
   33a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33a38:	4303      	orrs	r3, r0
   33a3a:	4699      	mov	r9, r3
   33a3c:	d04f      	beq.n	33ade <__aeabi_dmul+0x1a2>
   33a3e:	465b      	mov	r3, fp
   33a40:	2b00      	cmp	r3, #0
   33a42:	d100      	bne.n	33a46 <__aeabi_dmul+0x10a>
   33a44:	e189      	b.n	33d5a <__aeabi_dmul+0x41e>
   33a46:	4658      	mov	r0, fp
   33a48:	f000 fd7a 	bl	34540 <__clzsi2>
   33a4c:	0003      	movs	r3, r0
   33a4e:	3b0b      	subs	r3, #11
   33a50:	2b1c      	cmp	r3, #28
   33a52:	dd00      	ble.n	33a56 <__aeabi_dmul+0x11a>
   33a54:	e17a      	b.n	33d4c <__aeabi_dmul+0x410>
   33a56:	221d      	movs	r2, #29
   33a58:	1ad3      	subs	r3, r2, r3
   33a5a:	003a      	movs	r2, r7
   33a5c:	0001      	movs	r1, r0
   33a5e:	465c      	mov	r4, fp
   33a60:	40da      	lsrs	r2, r3
   33a62:	3908      	subs	r1, #8
   33a64:	408c      	lsls	r4, r1
   33a66:	0013      	movs	r3, r2
   33a68:	408f      	lsls	r7, r1
   33a6a:	4323      	orrs	r3, r4
   33a6c:	469b      	mov	fp, r3
   33a6e:	46b9      	mov	r9, r7
   33a70:	2300      	movs	r3, #0
   33a72:	4e2d      	ldr	r6, [pc, #180]	; (33b28 <__aeabi_dmul+0x1ec>)
   33a74:	2700      	movs	r7, #0
   33a76:	1a36      	subs	r6, r6, r0
   33a78:	9302      	str	r3, [sp, #8]
   33a7a:	e784      	b.n	33986 <__aeabi_dmul+0x4a>
   33a7c:	4653      	mov	r3, sl
   33a7e:	4323      	orrs	r3, r4
   33a80:	d12a      	bne.n	33ad8 <__aeabi_dmul+0x19c>
   33a82:	2400      	movs	r4, #0
   33a84:	2002      	movs	r0, #2
   33a86:	e796      	b.n	339b6 <__aeabi_dmul+0x7a>
   33a88:	4653      	mov	r3, sl
   33a8a:	4323      	orrs	r3, r4
   33a8c:	d020      	beq.n	33ad0 <__aeabi_dmul+0x194>
   33a8e:	2c00      	cmp	r4, #0
   33a90:	d100      	bne.n	33a94 <__aeabi_dmul+0x158>
   33a92:	e157      	b.n	33d44 <__aeabi_dmul+0x408>
   33a94:	0020      	movs	r0, r4
   33a96:	f000 fd53 	bl	34540 <__clzsi2>
   33a9a:	0003      	movs	r3, r0
   33a9c:	3b0b      	subs	r3, #11
   33a9e:	2b1c      	cmp	r3, #28
   33aa0:	dd00      	ble.n	33aa4 <__aeabi_dmul+0x168>
   33aa2:	e149      	b.n	33d38 <__aeabi_dmul+0x3fc>
   33aa4:	211d      	movs	r1, #29
   33aa6:	1acb      	subs	r3, r1, r3
   33aa8:	4651      	mov	r1, sl
   33aaa:	0002      	movs	r2, r0
   33aac:	40d9      	lsrs	r1, r3
   33aae:	4653      	mov	r3, sl
   33ab0:	3a08      	subs	r2, #8
   33ab2:	4094      	lsls	r4, r2
   33ab4:	4093      	lsls	r3, r2
   33ab6:	430c      	orrs	r4, r1
   33ab8:	4a1b      	ldr	r2, [pc, #108]	; (33b28 <__aeabi_dmul+0x1ec>)
   33aba:	1a12      	subs	r2, r2, r0
   33abc:	2000      	movs	r0, #0
   33abe:	e77a      	b.n	339b6 <__aeabi_dmul+0x7a>
   33ac0:	2501      	movs	r5, #1
   33ac2:	9b01      	ldr	r3, [sp, #4]
   33ac4:	4c14      	ldr	r4, [pc, #80]	; (33b18 <__aeabi_dmul+0x1dc>)
   33ac6:	401d      	ands	r5, r3
   33ac8:	2300      	movs	r3, #0
   33aca:	2200      	movs	r2, #0
   33acc:	4699      	mov	r9, r3
   33ace:	e79c      	b.n	33a0a <__aeabi_dmul+0xce>
   33ad0:	2400      	movs	r4, #0
   33ad2:	2200      	movs	r2, #0
   33ad4:	2001      	movs	r0, #1
   33ad6:	e76e      	b.n	339b6 <__aeabi_dmul+0x7a>
   33ad8:	4653      	mov	r3, sl
   33ada:	2003      	movs	r0, #3
   33adc:	e76b      	b.n	339b6 <__aeabi_dmul+0x7a>
   33ade:	2300      	movs	r3, #0
   33ae0:	469b      	mov	fp, r3
   33ae2:	3301      	adds	r3, #1
   33ae4:	2704      	movs	r7, #4
   33ae6:	2600      	movs	r6, #0
   33ae8:	9302      	str	r3, [sp, #8]
   33aea:	e74c      	b.n	33986 <__aeabi_dmul+0x4a>
   33aec:	2303      	movs	r3, #3
   33aee:	4681      	mov	r9, r0
   33af0:	270c      	movs	r7, #12
   33af2:	9302      	str	r3, [sp, #8]
   33af4:	e747      	b.n	33986 <__aeabi_dmul+0x4a>
   33af6:	2280      	movs	r2, #128	; 0x80
   33af8:	2300      	movs	r3, #0
   33afa:	2500      	movs	r5, #0
   33afc:	0312      	lsls	r2, r2, #12
   33afe:	4699      	mov	r9, r3
   33b00:	4c05      	ldr	r4, [pc, #20]	; (33b18 <__aeabi_dmul+0x1dc>)
   33b02:	e782      	b.n	33a0a <__aeabi_dmul+0xce>
   33b04:	465c      	mov	r4, fp
   33b06:	464b      	mov	r3, r9
   33b08:	9802      	ldr	r0, [sp, #8]
   33b0a:	e76f      	b.n	339ec <__aeabi_dmul+0xb0>
   33b0c:	465c      	mov	r4, fp
   33b0e:	464b      	mov	r3, r9
   33b10:	9501      	str	r5, [sp, #4]
   33b12:	9802      	ldr	r0, [sp, #8]
   33b14:	e76a      	b.n	339ec <__aeabi_dmul+0xb0>
   33b16:	46c0      	nop			; (mov r8, r8)
   33b18:	000007ff 	.word	0x000007ff
   33b1c:	fffffc01 	.word	0xfffffc01
   33b20:	00039db0 	.word	0x00039db0
   33b24:	800fffff 	.word	0x800fffff
   33b28:	fffffc0d 	.word	0xfffffc0d
   33b2c:	464a      	mov	r2, r9
   33b2e:	4649      	mov	r1, r9
   33b30:	0c17      	lsrs	r7, r2, #16
   33b32:	0c1a      	lsrs	r2, r3, #16
   33b34:	041b      	lsls	r3, r3, #16
   33b36:	0c1b      	lsrs	r3, r3, #16
   33b38:	0408      	lsls	r0, r1, #16
   33b3a:	0019      	movs	r1, r3
   33b3c:	0c00      	lsrs	r0, r0, #16
   33b3e:	4341      	muls	r1, r0
   33b40:	0015      	movs	r5, r2
   33b42:	4688      	mov	r8, r1
   33b44:	0019      	movs	r1, r3
   33b46:	437d      	muls	r5, r7
   33b48:	4379      	muls	r1, r7
   33b4a:	9503      	str	r5, [sp, #12]
   33b4c:	4689      	mov	r9, r1
   33b4e:	0029      	movs	r1, r5
   33b50:	0015      	movs	r5, r2
   33b52:	4345      	muls	r5, r0
   33b54:	444d      	add	r5, r9
   33b56:	9502      	str	r5, [sp, #8]
   33b58:	4645      	mov	r5, r8
   33b5a:	0c2d      	lsrs	r5, r5, #16
   33b5c:	46aa      	mov	sl, r5
   33b5e:	9d02      	ldr	r5, [sp, #8]
   33b60:	4455      	add	r5, sl
   33b62:	45a9      	cmp	r9, r5
   33b64:	d906      	bls.n	33b74 <__aeabi_dmul+0x238>
   33b66:	468a      	mov	sl, r1
   33b68:	2180      	movs	r1, #128	; 0x80
   33b6a:	0249      	lsls	r1, r1, #9
   33b6c:	4689      	mov	r9, r1
   33b6e:	44ca      	add	sl, r9
   33b70:	4651      	mov	r1, sl
   33b72:	9103      	str	r1, [sp, #12]
   33b74:	0c29      	lsrs	r1, r5, #16
   33b76:	9104      	str	r1, [sp, #16]
   33b78:	4641      	mov	r1, r8
   33b7a:	0409      	lsls	r1, r1, #16
   33b7c:	042d      	lsls	r5, r5, #16
   33b7e:	0c09      	lsrs	r1, r1, #16
   33b80:	4688      	mov	r8, r1
   33b82:	0029      	movs	r1, r5
   33b84:	0c25      	lsrs	r5, r4, #16
   33b86:	0424      	lsls	r4, r4, #16
   33b88:	4441      	add	r1, r8
   33b8a:	0c24      	lsrs	r4, r4, #16
   33b8c:	9105      	str	r1, [sp, #20]
   33b8e:	0021      	movs	r1, r4
   33b90:	4341      	muls	r1, r0
   33b92:	4688      	mov	r8, r1
   33b94:	0021      	movs	r1, r4
   33b96:	4379      	muls	r1, r7
   33b98:	468a      	mov	sl, r1
   33b9a:	4368      	muls	r0, r5
   33b9c:	4641      	mov	r1, r8
   33b9e:	4450      	add	r0, sl
   33ba0:	4681      	mov	r9, r0
   33ba2:	0c08      	lsrs	r0, r1, #16
   33ba4:	4448      	add	r0, r9
   33ba6:	436f      	muls	r7, r5
   33ba8:	4582      	cmp	sl, r0
   33baa:	d903      	bls.n	33bb4 <__aeabi_dmul+0x278>
   33bac:	2180      	movs	r1, #128	; 0x80
   33bae:	0249      	lsls	r1, r1, #9
   33bb0:	4689      	mov	r9, r1
   33bb2:	444f      	add	r7, r9
   33bb4:	0c01      	lsrs	r1, r0, #16
   33bb6:	4689      	mov	r9, r1
   33bb8:	0039      	movs	r1, r7
   33bba:	4449      	add	r1, r9
   33bbc:	9102      	str	r1, [sp, #8]
   33bbe:	4641      	mov	r1, r8
   33bc0:	040f      	lsls	r7, r1, #16
   33bc2:	9904      	ldr	r1, [sp, #16]
   33bc4:	0c3f      	lsrs	r7, r7, #16
   33bc6:	4688      	mov	r8, r1
   33bc8:	0400      	lsls	r0, r0, #16
   33bca:	19c0      	adds	r0, r0, r7
   33bcc:	4480      	add	r8, r0
   33bce:	4641      	mov	r1, r8
   33bd0:	9104      	str	r1, [sp, #16]
   33bd2:	4659      	mov	r1, fp
   33bd4:	0c0f      	lsrs	r7, r1, #16
   33bd6:	0409      	lsls	r1, r1, #16
   33bd8:	0c09      	lsrs	r1, r1, #16
   33bda:	4688      	mov	r8, r1
   33bdc:	4359      	muls	r1, r3
   33bde:	468a      	mov	sl, r1
   33be0:	0039      	movs	r1, r7
   33be2:	4351      	muls	r1, r2
   33be4:	4689      	mov	r9, r1
   33be6:	4641      	mov	r1, r8
   33be8:	434a      	muls	r2, r1
   33bea:	4651      	mov	r1, sl
   33bec:	0c09      	lsrs	r1, r1, #16
   33bee:	468b      	mov	fp, r1
   33bf0:	437b      	muls	r3, r7
   33bf2:	18d2      	adds	r2, r2, r3
   33bf4:	445a      	add	r2, fp
   33bf6:	4293      	cmp	r3, r2
   33bf8:	d903      	bls.n	33c02 <__aeabi_dmul+0x2c6>
   33bfa:	2380      	movs	r3, #128	; 0x80
   33bfc:	025b      	lsls	r3, r3, #9
   33bfe:	469b      	mov	fp, r3
   33c00:	44d9      	add	r9, fp
   33c02:	4651      	mov	r1, sl
   33c04:	0409      	lsls	r1, r1, #16
   33c06:	0c09      	lsrs	r1, r1, #16
   33c08:	468a      	mov	sl, r1
   33c0a:	4641      	mov	r1, r8
   33c0c:	4361      	muls	r1, r4
   33c0e:	437c      	muls	r4, r7
   33c10:	0c13      	lsrs	r3, r2, #16
   33c12:	0412      	lsls	r2, r2, #16
   33c14:	444b      	add	r3, r9
   33c16:	4452      	add	r2, sl
   33c18:	46a1      	mov	r9, r4
   33c1a:	468a      	mov	sl, r1
   33c1c:	003c      	movs	r4, r7
   33c1e:	4641      	mov	r1, r8
   33c20:	436c      	muls	r4, r5
   33c22:	434d      	muls	r5, r1
   33c24:	4651      	mov	r1, sl
   33c26:	444d      	add	r5, r9
   33c28:	0c0f      	lsrs	r7, r1, #16
   33c2a:	197d      	adds	r5, r7, r5
   33c2c:	45a9      	cmp	r9, r5
   33c2e:	d903      	bls.n	33c38 <__aeabi_dmul+0x2fc>
   33c30:	2180      	movs	r1, #128	; 0x80
   33c32:	0249      	lsls	r1, r1, #9
   33c34:	4688      	mov	r8, r1
   33c36:	4444      	add	r4, r8
   33c38:	9f04      	ldr	r7, [sp, #16]
   33c3a:	9903      	ldr	r1, [sp, #12]
   33c3c:	46b8      	mov	r8, r7
   33c3e:	4441      	add	r1, r8
   33c40:	468b      	mov	fp, r1
   33c42:	4583      	cmp	fp, r0
   33c44:	4180      	sbcs	r0, r0
   33c46:	4241      	negs	r1, r0
   33c48:	4688      	mov	r8, r1
   33c4a:	4651      	mov	r1, sl
   33c4c:	0408      	lsls	r0, r1, #16
   33c4e:	042f      	lsls	r7, r5, #16
   33c50:	0c00      	lsrs	r0, r0, #16
   33c52:	183f      	adds	r7, r7, r0
   33c54:	4658      	mov	r0, fp
   33c56:	9902      	ldr	r1, [sp, #8]
   33c58:	1810      	adds	r0, r2, r0
   33c5a:	4689      	mov	r9, r1
   33c5c:	4290      	cmp	r0, r2
   33c5e:	4192      	sbcs	r2, r2
   33c60:	444f      	add	r7, r9
   33c62:	46ba      	mov	sl, r7
   33c64:	4252      	negs	r2, r2
   33c66:	4699      	mov	r9, r3
   33c68:	4693      	mov	fp, r2
   33c6a:	44c2      	add	sl, r8
   33c6c:	44d1      	add	r9, sl
   33c6e:	44cb      	add	fp, r9
   33c70:	428f      	cmp	r7, r1
   33c72:	41bf      	sbcs	r7, r7
   33c74:	45c2      	cmp	sl, r8
   33c76:	4189      	sbcs	r1, r1
   33c78:	4599      	cmp	r9, r3
   33c7a:	419b      	sbcs	r3, r3
   33c7c:	4593      	cmp	fp, r2
   33c7e:	4192      	sbcs	r2, r2
   33c80:	427f      	negs	r7, r7
   33c82:	4249      	negs	r1, r1
   33c84:	0c2d      	lsrs	r5, r5, #16
   33c86:	4252      	negs	r2, r2
   33c88:	430f      	orrs	r7, r1
   33c8a:	425b      	negs	r3, r3
   33c8c:	4313      	orrs	r3, r2
   33c8e:	197f      	adds	r7, r7, r5
   33c90:	18ff      	adds	r7, r7, r3
   33c92:	465b      	mov	r3, fp
   33c94:	193c      	adds	r4, r7, r4
   33c96:	0ddb      	lsrs	r3, r3, #23
   33c98:	9a05      	ldr	r2, [sp, #20]
   33c9a:	0264      	lsls	r4, r4, #9
   33c9c:	431c      	orrs	r4, r3
   33c9e:	0243      	lsls	r3, r0, #9
   33ca0:	4313      	orrs	r3, r2
   33ca2:	1e5d      	subs	r5, r3, #1
   33ca4:	41ab      	sbcs	r3, r5
   33ca6:	465a      	mov	r2, fp
   33ca8:	0dc0      	lsrs	r0, r0, #23
   33caa:	4303      	orrs	r3, r0
   33cac:	0252      	lsls	r2, r2, #9
   33cae:	4313      	orrs	r3, r2
   33cb0:	01e2      	lsls	r2, r4, #7
   33cb2:	d556      	bpl.n	33d62 <__aeabi_dmul+0x426>
   33cb4:	2001      	movs	r0, #1
   33cb6:	085a      	lsrs	r2, r3, #1
   33cb8:	4003      	ands	r3, r0
   33cba:	4313      	orrs	r3, r2
   33cbc:	07e2      	lsls	r2, r4, #31
   33cbe:	4313      	orrs	r3, r2
   33cc0:	0864      	lsrs	r4, r4, #1
   33cc2:	485a      	ldr	r0, [pc, #360]	; (33e2c <__aeabi_dmul+0x4f0>)
   33cc4:	4460      	add	r0, ip
   33cc6:	2800      	cmp	r0, #0
   33cc8:	dd4d      	ble.n	33d66 <__aeabi_dmul+0x42a>
   33cca:	075a      	lsls	r2, r3, #29
   33ccc:	d009      	beq.n	33ce2 <__aeabi_dmul+0x3a6>
   33cce:	220f      	movs	r2, #15
   33cd0:	401a      	ands	r2, r3
   33cd2:	2a04      	cmp	r2, #4
   33cd4:	d005      	beq.n	33ce2 <__aeabi_dmul+0x3a6>
   33cd6:	1d1a      	adds	r2, r3, #4
   33cd8:	429a      	cmp	r2, r3
   33cda:	419b      	sbcs	r3, r3
   33cdc:	425b      	negs	r3, r3
   33cde:	18e4      	adds	r4, r4, r3
   33ce0:	0013      	movs	r3, r2
   33ce2:	01e2      	lsls	r2, r4, #7
   33ce4:	d504      	bpl.n	33cf0 <__aeabi_dmul+0x3b4>
   33ce6:	2080      	movs	r0, #128	; 0x80
   33ce8:	4a51      	ldr	r2, [pc, #324]	; (33e30 <__aeabi_dmul+0x4f4>)
   33cea:	00c0      	lsls	r0, r0, #3
   33cec:	4014      	ands	r4, r2
   33cee:	4460      	add	r0, ip
   33cf0:	4a50      	ldr	r2, [pc, #320]	; (33e34 <__aeabi_dmul+0x4f8>)
   33cf2:	4290      	cmp	r0, r2
   33cf4:	dd00      	ble.n	33cf8 <__aeabi_dmul+0x3bc>
   33cf6:	e6e3      	b.n	33ac0 <__aeabi_dmul+0x184>
   33cf8:	2501      	movs	r5, #1
   33cfa:	08db      	lsrs	r3, r3, #3
   33cfc:	0762      	lsls	r2, r4, #29
   33cfe:	431a      	orrs	r2, r3
   33d00:	0264      	lsls	r4, r4, #9
   33d02:	9b01      	ldr	r3, [sp, #4]
   33d04:	4691      	mov	r9, r2
   33d06:	0b22      	lsrs	r2, r4, #12
   33d08:	0544      	lsls	r4, r0, #21
   33d0a:	0d64      	lsrs	r4, r4, #21
   33d0c:	401d      	ands	r5, r3
   33d0e:	e67c      	b.n	33a0a <__aeabi_dmul+0xce>
   33d10:	2280      	movs	r2, #128	; 0x80
   33d12:	4659      	mov	r1, fp
   33d14:	0312      	lsls	r2, r2, #12
   33d16:	4211      	tst	r1, r2
   33d18:	d008      	beq.n	33d2c <__aeabi_dmul+0x3f0>
   33d1a:	4214      	tst	r4, r2
   33d1c:	d106      	bne.n	33d2c <__aeabi_dmul+0x3f0>
   33d1e:	4322      	orrs	r2, r4
   33d20:	0312      	lsls	r2, r2, #12
   33d22:	0b12      	lsrs	r2, r2, #12
   33d24:	4645      	mov	r5, r8
   33d26:	4699      	mov	r9, r3
   33d28:	4c43      	ldr	r4, [pc, #268]	; (33e38 <__aeabi_dmul+0x4fc>)
   33d2a:	e66e      	b.n	33a0a <__aeabi_dmul+0xce>
   33d2c:	465b      	mov	r3, fp
   33d2e:	431a      	orrs	r2, r3
   33d30:	0312      	lsls	r2, r2, #12
   33d32:	0b12      	lsrs	r2, r2, #12
   33d34:	4c40      	ldr	r4, [pc, #256]	; (33e38 <__aeabi_dmul+0x4fc>)
   33d36:	e668      	b.n	33a0a <__aeabi_dmul+0xce>
   33d38:	0003      	movs	r3, r0
   33d3a:	4654      	mov	r4, sl
   33d3c:	3b28      	subs	r3, #40	; 0x28
   33d3e:	409c      	lsls	r4, r3
   33d40:	2300      	movs	r3, #0
   33d42:	e6b9      	b.n	33ab8 <__aeabi_dmul+0x17c>
   33d44:	f000 fbfc 	bl	34540 <__clzsi2>
   33d48:	3020      	adds	r0, #32
   33d4a:	e6a6      	b.n	33a9a <__aeabi_dmul+0x15e>
   33d4c:	0003      	movs	r3, r0
   33d4e:	3b28      	subs	r3, #40	; 0x28
   33d50:	409f      	lsls	r7, r3
   33d52:	2300      	movs	r3, #0
   33d54:	46bb      	mov	fp, r7
   33d56:	4699      	mov	r9, r3
   33d58:	e68a      	b.n	33a70 <__aeabi_dmul+0x134>
   33d5a:	f000 fbf1 	bl	34540 <__clzsi2>
   33d5e:	3020      	adds	r0, #32
   33d60:	e674      	b.n	33a4c <__aeabi_dmul+0x110>
   33d62:	46b4      	mov	ip, r6
   33d64:	e7ad      	b.n	33cc2 <__aeabi_dmul+0x386>
   33d66:	2501      	movs	r5, #1
   33d68:	1a2a      	subs	r2, r5, r0
   33d6a:	2a38      	cmp	r2, #56	; 0x38
   33d6c:	dd06      	ble.n	33d7c <__aeabi_dmul+0x440>
   33d6e:	9b01      	ldr	r3, [sp, #4]
   33d70:	2400      	movs	r4, #0
   33d72:	401d      	ands	r5, r3
   33d74:	2300      	movs	r3, #0
   33d76:	2200      	movs	r2, #0
   33d78:	4699      	mov	r9, r3
   33d7a:	e646      	b.n	33a0a <__aeabi_dmul+0xce>
   33d7c:	2a1f      	cmp	r2, #31
   33d7e:	dc21      	bgt.n	33dc4 <__aeabi_dmul+0x488>
   33d80:	2520      	movs	r5, #32
   33d82:	0020      	movs	r0, r4
   33d84:	1aad      	subs	r5, r5, r2
   33d86:	001e      	movs	r6, r3
   33d88:	40ab      	lsls	r3, r5
   33d8a:	40a8      	lsls	r0, r5
   33d8c:	40d6      	lsrs	r6, r2
   33d8e:	1e5d      	subs	r5, r3, #1
   33d90:	41ab      	sbcs	r3, r5
   33d92:	4330      	orrs	r0, r6
   33d94:	4318      	orrs	r0, r3
   33d96:	40d4      	lsrs	r4, r2
   33d98:	0743      	lsls	r3, r0, #29
   33d9a:	d009      	beq.n	33db0 <__aeabi_dmul+0x474>
   33d9c:	230f      	movs	r3, #15
   33d9e:	4003      	ands	r3, r0
   33da0:	2b04      	cmp	r3, #4
   33da2:	d005      	beq.n	33db0 <__aeabi_dmul+0x474>
   33da4:	0003      	movs	r3, r0
   33da6:	1d18      	adds	r0, r3, #4
   33da8:	4298      	cmp	r0, r3
   33daa:	419b      	sbcs	r3, r3
   33dac:	425b      	negs	r3, r3
   33dae:	18e4      	adds	r4, r4, r3
   33db0:	0223      	lsls	r3, r4, #8
   33db2:	d521      	bpl.n	33df8 <__aeabi_dmul+0x4bc>
   33db4:	2501      	movs	r5, #1
   33db6:	9b01      	ldr	r3, [sp, #4]
   33db8:	2401      	movs	r4, #1
   33dba:	401d      	ands	r5, r3
   33dbc:	2300      	movs	r3, #0
   33dbe:	2200      	movs	r2, #0
   33dc0:	4699      	mov	r9, r3
   33dc2:	e622      	b.n	33a0a <__aeabi_dmul+0xce>
   33dc4:	251f      	movs	r5, #31
   33dc6:	0021      	movs	r1, r4
   33dc8:	426d      	negs	r5, r5
   33dca:	1a28      	subs	r0, r5, r0
   33dcc:	40c1      	lsrs	r1, r0
   33dce:	0008      	movs	r0, r1
   33dd0:	2a20      	cmp	r2, #32
   33dd2:	d01d      	beq.n	33e10 <__aeabi_dmul+0x4d4>
   33dd4:	355f      	adds	r5, #95	; 0x5f
   33dd6:	1aaa      	subs	r2, r5, r2
   33dd8:	4094      	lsls	r4, r2
   33dda:	4323      	orrs	r3, r4
   33ddc:	1e5c      	subs	r4, r3, #1
   33dde:	41a3      	sbcs	r3, r4
   33de0:	2507      	movs	r5, #7
   33de2:	4303      	orrs	r3, r0
   33de4:	401d      	ands	r5, r3
   33de6:	2200      	movs	r2, #0
   33de8:	2d00      	cmp	r5, #0
   33dea:	d009      	beq.n	33e00 <__aeabi_dmul+0x4c4>
   33dec:	220f      	movs	r2, #15
   33dee:	2400      	movs	r4, #0
   33df0:	401a      	ands	r2, r3
   33df2:	0018      	movs	r0, r3
   33df4:	2a04      	cmp	r2, #4
   33df6:	d1d6      	bne.n	33da6 <__aeabi_dmul+0x46a>
   33df8:	0003      	movs	r3, r0
   33dfa:	0765      	lsls	r5, r4, #29
   33dfc:	0264      	lsls	r4, r4, #9
   33dfe:	0b22      	lsrs	r2, r4, #12
   33e00:	08db      	lsrs	r3, r3, #3
   33e02:	432b      	orrs	r3, r5
   33e04:	2501      	movs	r5, #1
   33e06:	4699      	mov	r9, r3
   33e08:	9b01      	ldr	r3, [sp, #4]
   33e0a:	2400      	movs	r4, #0
   33e0c:	401d      	ands	r5, r3
   33e0e:	e5fc      	b.n	33a0a <__aeabi_dmul+0xce>
   33e10:	2400      	movs	r4, #0
   33e12:	e7e2      	b.n	33dda <__aeabi_dmul+0x49e>
   33e14:	2280      	movs	r2, #128	; 0x80
   33e16:	2501      	movs	r5, #1
   33e18:	0312      	lsls	r2, r2, #12
   33e1a:	4322      	orrs	r2, r4
   33e1c:	9901      	ldr	r1, [sp, #4]
   33e1e:	0312      	lsls	r2, r2, #12
   33e20:	0b12      	lsrs	r2, r2, #12
   33e22:	400d      	ands	r5, r1
   33e24:	4699      	mov	r9, r3
   33e26:	4c04      	ldr	r4, [pc, #16]	; (33e38 <__aeabi_dmul+0x4fc>)
   33e28:	e5ef      	b.n	33a0a <__aeabi_dmul+0xce>
   33e2a:	46c0      	nop			; (mov r8, r8)
   33e2c:	000003ff 	.word	0x000003ff
   33e30:	feffffff 	.word	0xfeffffff
   33e34:	000007fe 	.word	0x000007fe
   33e38:	000007ff 	.word	0x000007ff

00033e3c <__aeabi_dsub>:
   33e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   33e3e:	4646      	mov	r6, r8
   33e40:	46d6      	mov	lr, sl
   33e42:	464f      	mov	r7, r9
   33e44:	030c      	lsls	r4, r1, #12
   33e46:	b5c0      	push	{r6, r7, lr}
   33e48:	0fcd      	lsrs	r5, r1, #31
   33e4a:	004e      	lsls	r6, r1, #1
   33e4c:	0a61      	lsrs	r1, r4, #9
   33e4e:	0f44      	lsrs	r4, r0, #29
   33e50:	430c      	orrs	r4, r1
   33e52:	00c1      	lsls	r1, r0, #3
   33e54:	0058      	lsls	r0, r3, #1
   33e56:	0d40      	lsrs	r0, r0, #21
   33e58:	4684      	mov	ip, r0
   33e5a:	468a      	mov	sl, r1
   33e5c:	000f      	movs	r7, r1
   33e5e:	0319      	lsls	r1, r3, #12
   33e60:	0f50      	lsrs	r0, r2, #29
   33e62:	0a49      	lsrs	r1, r1, #9
   33e64:	4301      	orrs	r1, r0
   33e66:	48c6      	ldr	r0, [pc, #792]	; (34180 <__aeabi_dsub+0x344>)
   33e68:	0d76      	lsrs	r6, r6, #21
   33e6a:	46a8      	mov	r8, r5
   33e6c:	0fdb      	lsrs	r3, r3, #31
   33e6e:	00d2      	lsls	r2, r2, #3
   33e70:	4584      	cmp	ip, r0
   33e72:	d100      	bne.n	33e76 <__aeabi_dsub+0x3a>
   33e74:	e0d8      	b.n	34028 <__aeabi_dsub+0x1ec>
   33e76:	2001      	movs	r0, #1
   33e78:	4043      	eors	r3, r0
   33e7a:	42ab      	cmp	r3, r5
   33e7c:	d100      	bne.n	33e80 <__aeabi_dsub+0x44>
   33e7e:	e0a6      	b.n	33fce <__aeabi_dsub+0x192>
   33e80:	4660      	mov	r0, ip
   33e82:	1a35      	subs	r5, r6, r0
   33e84:	2d00      	cmp	r5, #0
   33e86:	dc00      	bgt.n	33e8a <__aeabi_dsub+0x4e>
   33e88:	e105      	b.n	34096 <__aeabi_dsub+0x25a>
   33e8a:	2800      	cmp	r0, #0
   33e8c:	d110      	bne.n	33eb0 <__aeabi_dsub+0x74>
   33e8e:	000b      	movs	r3, r1
   33e90:	4313      	orrs	r3, r2
   33e92:	d100      	bne.n	33e96 <__aeabi_dsub+0x5a>
   33e94:	e0d7      	b.n	34046 <__aeabi_dsub+0x20a>
   33e96:	1e6b      	subs	r3, r5, #1
   33e98:	2b00      	cmp	r3, #0
   33e9a:	d000      	beq.n	33e9e <__aeabi_dsub+0x62>
   33e9c:	e14b      	b.n	34136 <__aeabi_dsub+0x2fa>
   33e9e:	4653      	mov	r3, sl
   33ea0:	1a9f      	subs	r7, r3, r2
   33ea2:	45ba      	cmp	sl, r7
   33ea4:	4180      	sbcs	r0, r0
   33ea6:	1a64      	subs	r4, r4, r1
   33ea8:	4240      	negs	r0, r0
   33eaa:	1a24      	subs	r4, r4, r0
   33eac:	2601      	movs	r6, #1
   33eae:	e01e      	b.n	33eee <__aeabi_dsub+0xb2>
   33eb0:	4bb3      	ldr	r3, [pc, #716]	; (34180 <__aeabi_dsub+0x344>)
   33eb2:	429e      	cmp	r6, r3
   33eb4:	d048      	beq.n	33f48 <__aeabi_dsub+0x10c>
   33eb6:	2380      	movs	r3, #128	; 0x80
   33eb8:	041b      	lsls	r3, r3, #16
   33eba:	4319      	orrs	r1, r3
   33ebc:	2d38      	cmp	r5, #56	; 0x38
   33ebe:	dd00      	ble.n	33ec2 <__aeabi_dsub+0x86>
   33ec0:	e119      	b.n	340f6 <__aeabi_dsub+0x2ba>
   33ec2:	2d1f      	cmp	r5, #31
   33ec4:	dd00      	ble.n	33ec8 <__aeabi_dsub+0x8c>
   33ec6:	e14c      	b.n	34162 <__aeabi_dsub+0x326>
   33ec8:	2320      	movs	r3, #32
   33eca:	000f      	movs	r7, r1
   33ecc:	1b5b      	subs	r3, r3, r5
   33ece:	0010      	movs	r0, r2
   33ed0:	409a      	lsls	r2, r3
   33ed2:	409f      	lsls	r7, r3
   33ed4:	40e8      	lsrs	r0, r5
   33ed6:	1e53      	subs	r3, r2, #1
   33ed8:	419a      	sbcs	r2, r3
   33eda:	40e9      	lsrs	r1, r5
   33edc:	4307      	orrs	r7, r0
   33ede:	4317      	orrs	r7, r2
   33ee0:	4653      	mov	r3, sl
   33ee2:	1bdf      	subs	r7, r3, r7
   33ee4:	1a61      	subs	r1, r4, r1
   33ee6:	45ba      	cmp	sl, r7
   33ee8:	41a4      	sbcs	r4, r4
   33eea:	4264      	negs	r4, r4
   33eec:	1b0c      	subs	r4, r1, r4
   33eee:	0223      	lsls	r3, r4, #8
   33ef0:	d400      	bmi.n	33ef4 <__aeabi_dsub+0xb8>
   33ef2:	e0c5      	b.n	34080 <__aeabi_dsub+0x244>
   33ef4:	0264      	lsls	r4, r4, #9
   33ef6:	0a65      	lsrs	r5, r4, #9
   33ef8:	2d00      	cmp	r5, #0
   33efa:	d100      	bne.n	33efe <__aeabi_dsub+0xc2>
   33efc:	e0f6      	b.n	340ec <__aeabi_dsub+0x2b0>
   33efe:	0028      	movs	r0, r5
   33f00:	f000 fb1e 	bl	34540 <__clzsi2>
   33f04:	0003      	movs	r3, r0
   33f06:	3b08      	subs	r3, #8
   33f08:	2b1f      	cmp	r3, #31
   33f0a:	dd00      	ble.n	33f0e <__aeabi_dsub+0xd2>
   33f0c:	e0e9      	b.n	340e2 <__aeabi_dsub+0x2a6>
   33f0e:	2220      	movs	r2, #32
   33f10:	003c      	movs	r4, r7
   33f12:	1ad2      	subs	r2, r2, r3
   33f14:	409d      	lsls	r5, r3
   33f16:	40d4      	lsrs	r4, r2
   33f18:	409f      	lsls	r7, r3
   33f1a:	4325      	orrs	r5, r4
   33f1c:	429e      	cmp	r6, r3
   33f1e:	dd00      	ble.n	33f22 <__aeabi_dsub+0xe6>
   33f20:	e0db      	b.n	340da <__aeabi_dsub+0x29e>
   33f22:	1b9e      	subs	r6, r3, r6
   33f24:	1c73      	adds	r3, r6, #1
   33f26:	2b1f      	cmp	r3, #31
   33f28:	dd00      	ble.n	33f2c <__aeabi_dsub+0xf0>
   33f2a:	e10a      	b.n	34142 <__aeabi_dsub+0x306>
   33f2c:	2220      	movs	r2, #32
   33f2e:	0038      	movs	r0, r7
   33f30:	1ad2      	subs	r2, r2, r3
   33f32:	0029      	movs	r1, r5
   33f34:	4097      	lsls	r7, r2
   33f36:	002c      	movs	r4, r5
   33f38:	4091      	lsls	r1, r2
   33f3a:	40d8      	lsrs	r0, r3
   33f3c:	1e7a      	subs	r2, r7, #1
   33f3e:	4197      	sbcs	r7, r2
   33f40:	40dc      	lsrs	r4, r3
   33f42:	2600      	movs	r6, #0
   33f44:	4301      	orrs	r1, r0
   33f46:	430f      	orrs	r7, r1
   33f48:	077b      	lsls	r3, r7, #29
   33f4a:	d009      	beq.n	33f60 <__aeabi_dsub+0x124>
   33f4c:	230f      	movs	r3, #15
   33f4e:	403b      	ands	r3, r7
   33f50:	2b04      	cmp	r3, #4
   33f52:	d005      	beq.n	33f60 <__aeabi_dsub+0x124>
   33f54:	1d3b      	adds	r3, r7, #4
   33f56:	42bb      	cmp	r3, r7
   33f58:	41bf      	sbcs	r7, r7
   33f5a:	427f      	negs	r7, r7
   33f5c:	19e4      	adds	r4, r4, r7
   33f5e:	001f      	movs	r7, r3
   33f60:	0223      	lsls	r3, r4, #8
   33f62:	d525      	bpl.n	33fb0 <__aeabi_dsub+0x174>
   33f64:	4b86      	ldr	r3, [pc, #536]	; (34180 <__aeabi_dsub+0x344>)
   33f66:	3601      	adds	r6, #1
   33f68:	429e      	cmp	r6, r3
   33f6a:	d100      	bne.n	33f6e <__aeabi_dsub+0x132>
   33f6c:	e0af      	b.n	340ce <__aeabi_dsub+0x292>
   33f6e:	4b85      	ldr	r3, [pc, #532]	; (34184 <__aeabi_dsub+0x348>)
   33f70:	2501      	movs	r5, #1
   33f72:	401c      	ands	r4, r3
   33f74:	4643      	mov	r3, r8
   33f76:	0762      	lsls	r2, r4, #29
   33f78:	08ff      	lsrs	r7, r7, #3
   33f7a:	0264      	lsls	r4, r4, #9
   33f7c:	0576      	lsls	r6, r6, #21
   33f7e:	4317      	orrs	r7, r2
   33f80:	0b24      	lsrs	r4, r4, #12
   33f82:	0d76      	lsrs	r6, r6, #21
   33f84:	401d      	ands	r5, r3
   33f86:	2100      	movs	r1, #0
   33f88:	0324      	lsls	r4, r4, #12
   33f8a:	0b23      	lsrs	r3, r4, #12
   33f8c:	0d0c      	lsrs	r4, r1, #20
   33f8e:	4a7e      	ldr	r2, [pc, #504]	; (34188 <__aeabi_dsub+0x34c>)
   33f90:	0524      	lsls	r4, r4, #20
   33f92:	431c      	orrs	r4, r3
   33f94:	4014      	ands	r4, r2
   33f96:	0533      	lsls	r3, r6, #20
   33f98:	4323      	orrs	r3, r4
   33f9a:	005b      	lsls	r3, r3, #1
   33f9c:	07ed      	lsls	r5, r5, #31
   33f9e:	085b      	lsrs	r3, r3, #1
   33fa0:	432b      	orrs	r3, r5
   33fa2:	0038      	movs	r0, r7
   33fa4:	0019      	movs	r1, r3
   33fa6:	bc1c      	pop	{r2, r3, r4}
   33fa8:	4690      	mov	r8, r2
   33faa:	4699      	mov	r9, r3
   33fac:	46a2      	mov	sl, r4
   33fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33fb0:	2501      	movs	r5, #1
   33fb2:	4643      	mov	r3, r8
   33fb4:	0762      	lsls	r2, r4, #29
   33fb6:	08ff      	lsrs	r7, r7, #3
   33fb8:	4317      	orrs	r7, r2
   33fba:	08e4      	lsrs	r4, r4, #3
   33fbc:	401d      	ands	r5, r3
   33fbe:	4b70      	ldr	r3, [pc, #448]	; (34180 <__aeabi_dsub+0x344>)
   33fc0:	429e      	cmp	r6, r3
   33fc2:	d036      	beq.n	34032 <__aeabi_dsub+0x1f6>
   33fc4:	0324      	lsls	r4, r4, #12
   33fc6:	0576      	lsls	r6, r6, #21
   33fc8:	0b24      	lsrs	r4, r4, #12
   33fca:	0d76      	lsrs	r6, r6, #21
   33fcc:	e7db      	b.n	33f86 <__aeabi_dsub+0x14a>
   33fce:	4663      	mov	r3, ip
   33fd0:	1af3      	subs	r3, r6, r3
   33fd2:	2b00      	cmp	r3, #0
   33fd4:	dc00      	bgt.n	33fd8 <__aeabi_dsub+0x19c>
   33fd6:	e094      	b.n	34102 <__aeabi_dsub+0x2c6>
   33fd8:	4660      	mov	r0, ip
   33fda:	2800      	cmp	r0, #0
   33fdc:	d035      	beq.n	3404a <__aeabi_dsub+0x20e>
   33fde:	4868      	ldr	r0, [pc, #416]	; (34180 <__aeabi_dsub+0x344>)
   33fe0:	4286      	cmp	r6, r0
   33fe2:	d0b1      	beq.n	33f48 <__aeabi_dsub+0x10c>
   33fe4:	2780      	movs	r7, #128	; 0x80
   33fe6:	043f      	lsls	r7, r7, #16
   33fe8:	4339      	orrs	r1, r7
   33fea:	2b38      	cmp	r3, #56	; 0x38
   33fec:	dc00      	bgt.n	33ff0 <__aeabi_dsub+0x1b4>
   33fee:	e0fd      	b.n	341ec <__aeabi_dsub+0x3b0>
   33ff0:	430a      	orrs	r2, r1
   33ff2:	0017      	movs	r7, r2
   33ff4:	2100      	movs	r1, #0
   33ff6:	1e7a      	subs	r2, r7, #1
   33ff8:	4197      	sbcs	r7, r2
   33ffa:	4457      	add	r7, sl
   33ffc:	4557      	cmp	r7, sl
   33ffe:	4180      	sbcs	r0, r0
   34000:	1909      	adds	r1, r1, r4
   34002:	4244      	negs	r4, r0
   34004:	190c      	adds	r4, r1, r4
   34006:	0223      	lsls	r3, r4, #8
   34008:	d53a      	bpl.n	34080 <__aeabi_dsub+0x244>
   3400a:	4b5d      	ldr	r3, [pc, #372]	; (34180 <__aeabi_dsub+0x344>)
   3400c:	3601      	adds	r6, #1
   3400e:	429e      	cmp	r6, r3
   34010:	d100      	bne.n	34014 <__aeabi_dsub+0x1d8>
   34012:	e14b      	b.n	342ac <__aeabi_dsub+0x470>
   34014:	2201      	movs	r2, #1
   34016:	4b5b      	ldr	r3, [pc, #364]	; (34184 <__aeabi_dsub+0x348>)
   34018:	401c      	ands	r4, r3
   3401a:	087b      	lsrs	r3, r7, #1
   3401c:	4017      	ands	r7, r2
   3401e:	431f      	orrs	r7, r3
   34020:	07e2      	lsls	r2, r4, #31
   34022:	4317      	orrs	r7, r2
   34024:	0864      	lsrs	r4, r4, #1
   34026:	e78f      	b.n	33f48 <__aeabi_dsub+0x10c>
   34028:	0008      	movs	r0, r1
   3402a:	4310      	orrs	r0, r2
   3402c:	d000      	beq.n	34030 <__aeabi_dsub+0x1f4>
   3402e:	e724      	b.n	33e7a <__aeabi_dsub+0x3e>
   34030:	e721      	b.n	33e76 <__aeabi_dsub+0x3a>
   34032:	0023      	movs	r3, r4
   34034:	433b      	orrs	r3, r7
   34036:	d100      	bne.n	3403a <__aeabi_dsub+0x1fe>
   34038:	e1b9      	b.n	343ae <__aeabi_dsub+0x572>
   3403a:	2280      	movs	r2, #128	; 0x80
   3403c:	0312      	lsls	r2, r2, #12
   3403e:	4314      	orrs	r4, r2
   34040:	0324      	lsls	r4, r4, #12
   34042:	0b24      	lsrs	r4, r4, #12
   34044:	e79f      	b.n	33f86 <__aeabi_dsub+0x14a>
   34046:	002e      	movs	r6, r5
   34048:	e77e      	b.n	33f48 <__aeabi_dsub+0x10c>
   3404a:	0008      	movs	r0, r1
   3404c:	4310      	orrs	r0, r2
   3404e:	d100      	bne.n	34052 <__aeabi_dsub+0x216>
   34050:	e0ca      	b.n	341e8 <__aeabi_dsub+0x3ac>
   34052:	1e58      	subs	r0, r3, #1
   34054:	4684      	mov	ip, r0
   34056:	2800      	cmp	r0, #0
   34058:	d000      	beq.n	3405c <__aeabi_dsub+0x220>
   3405a:	e0e7      	b.n	3422c <__aeabi_dsub+0x3f0>
   3405c:	4452      	add	r2, sl
   3405e:	4552      	cmp	r2, sl
   34060:	4180      	sbcs	r0, r0
   34062:	1864      	adds	r4, r4, r1
   34064:	4240      	negs	r0, r0
   34066:	1824      	adds	r4, r4, r0
   34068:	0017      	movs	r7, r2
   3406a:	2601      	movs	r6, #1
   3406c:	0223      	lsls	r3, r4, #8
   3406e:	d507      	bpl.n	34080 <__aeabi_dsub+0x244>
   34070:	2602      	movs	r6, #2
   34072:	e7cf      	b.n	34014 <__aeabi_dsub+0x1d8>
   34074:	4664      	mov	r4, ip
   34076:	432c      	orrs	r4, r5
   34078:	d100      	bne.n	3407c <__aeabi_dsub+0x240>
   3407a:	e1b3      	b.n	343e4 <__aeabi_dsub+0x5a8>
   3407c:	002c      	movs	r4, r5
   3407e:	4667      	mov	r7, ip
   34080:	077b      	lsls	r3, r7, #29
   34082:	d000      	beq.n	34086 <__aeabi_dsub+0x24a>
   34084:	e762      	b.n	33f4c <__aeabi_dsub+0x110>
   34086:	0763      	lsls	r3, r4, #29
   34088:	08ff      	lsrs	r7, r7, #3
   3408a:	431f      	orrs	r7, r3
   3408c:	2501      	movs	r5, #1
   3408e:	4643      	mov	r3, r8
   34090:	08e4      	lsrs	r4, r4, #3
   34092:	401d      	ands	r5, r3
   34094:	e793      	b.n	33fbe <__aeabi_dsub+0x182>
   34096:	2d00      	cmp	r5, #0
   34098:	d178      	bne.n	3418c <__aeabi_dsub+0x350>
   3409a:	1c75      	adds	r5, r6, #1
   3409c:	056d      	lsls	r5, r5, #21
   3409e:	0d6d      	lsrs	r5, r5, #21
   340a0:	2d01      	cmp	r5, #1
   340a2:	dc00      	bgt.n	340a6 <__aeabi_dsub+0x26a>
   340a4:	e0f2      	b.n	3428c <__aeabi_dsub+0x450>
   340a6:	4650      	mov	r0, sl
   340a8:	1a80      	subs	r0, r0, r2
   340aa:	4582      	cmp	sl, r0
   340ac:	41bf      	sbcs	r7, r7
   340ae:	1a65      	subs	r5, r4, r1
   340b0:	427f      	negs	r7, r7
   340b2:	1bed      	subs	r5, r5, r7
   340b4:	4684      	mov	ip, r0
   340b6:	0228      	lsls	r0, r5, #8
   340b8:	d400      	bmi.n	340bc <__aeabi_dsub+0x280>
   340ba:	e08c      	b.n	341d6 <__aeabi_dsub+0x39a>
   340bc:	4650      	mov	r0, sl
   340be:	1a17      	subs	r7, r2, r0
   340c0:	42ba      	cmp	r2, r7
   340c2:	4192      	sbcs	r2, r2
   340c4:	1b0c      	subs	r4, r1, r4
   340c6:	4255      	negs	r5, r2
   340c8:	1b65      	subs	r5, r4, r5
   340ca:	4698      	mov	r8, r3
   340cc:	e714      	b.n	33ef8 <__aeabi_dsub+0xbc>
   340ce:	2501      	movs	r5, #1
   340d0:	4643      	mov	r3, r8
   340d2:	2400      	movs	r4, #0
   340d4:	401d      	ands	r5, r3
   340d6:	2700      	movs	r7, #0
   340d8:	e755      	b.n	33f86 <__aeabi_dsub+0x14a>
   340da:	4c2a      	ldr	r4, [pc, #168]	; (34184 <__aeabi_dsub+0x348>)
   340dc:	1af6      	subs	r6, r6, r3
   340de:	402c      	ands	r4, r5
   340e0:	e732      	b.n	33f48 <__aeabi_dsub+0x10c>
   340e2:	003d      	movs	r5, r7
   340e4:	3828      	subs	r0, #40	; 0x28
   340e6:	4085      	lsls	r5, r0
   340e8:	2700      	movs	r7, #0
   340ea:	e717      	b.n	33f1c <__aeabi_dsub+0xe0>
   340ec:	0038      	movs	r0, r7
   340ee:	f000 fa27 	bl	34540 <__clzsi2>
   340f2:	3020      	adds	r0, #32
   340f4:	e706      	b.n	33f04 <__aeabi_dsub+0xc8>
   340f6:	430a      	orrs	r2, r1
   340f8:	0017      	movs	r7, r2
   340fa:	2100      	movs	r1, #0
   340fc:	1e7a      	subs	r2, r7, #1
   340fe:	4197      	sbcs	r7, r2
   34100:	e6ee      	b.n	33ee0 <__aeabi_dsub+0xa4>
   34102:	2b00      	cmp	r3, #0
   34104:	d000      	beq.n	34108 <__aeabi_dsub+0x2cc>
   34106:	e0e5      	b.n	342d4 <__aeabi_dsub+0x498>
   34108:	1c73      	adds	r3, r6, #1
   3410a:	469c      	mov	ip, r3
   3410c:	055b      	lsls	r3, r3, #21
   3410e:	0d5b      	lsrs	r3, r3, #21
   34110:	2b01      	cmp	r3, #1
   34112:	dc00      	bgt.n	34116 <__aeabi_dsub+0x2da>
   34114:	e09f      	b.n	34256 <__aeabi_dsub+0x41a>
   34116:	4b1a      	ldr	r3, [pc, #104]	; (34180 <__aeabi_dsub+0x344>)
   34118:	459c      	cmp	ip, r3
   3411a:	d100      	bne.n	3411e <__aeabi_dsub+0x2e2>
   3411c:	e0c5      	b.n	342aa <__aeabi_dsub+0x46e>
   3411e:	4452      	add	r2, sl
   34120:	4552      	cmp	r2, sl
   34122:	4180      	sbcs	r0, r0
   34124:	1864      	adds	r4, r4, r1
   34126:	4240      	negs	r0, r0
   34128:	1824      	adds	r4, r4, r0
   3412a:	07e7      	lsls	r7, r4, #31
   3412c:	0852      	lsrs	r2, r2, #1
   3412e:	4317      	orrs	r7, r2
   34130:	0864      	lsrs	r4, r4, #1
   34132:	4666      	mov	r6, ip
   34134:	e708      	b.n	33f48 <__aeabi_dsub+0x10c>
   34136:	4812      	ldr	r0, [pc, #72]	; (34180 <__aeabi_dsub+0x344>)
   34138:	4285      	cmp	r5, r0
   3413a:	d100      	bne.n	3413e <__aeabi_dsub+0x302>
   3413c:	e085      	b.n	3424a <__aeabi_dsub+0x40e>
   3413e:	001d      	movs	r5, r3
   34140:	e6bc      	b.n	33ebc <__aeabi_dsub+0x80>
   34142:	0029      	movs	r1, r5
   34144:	3e1f      	subs	r6, #31
   34146:	40f1      	lsrs	r1, r6
   34148:	2b20      	cmp	r3, #32
   3414a:	d100      	bne.n	3414e <__aeabi_dsub+0x312>
   3414c:	e07f      	b.n	3424e <__aeabi_dsub+0x412>
   3414e:	2240      	movs	r2, #64	; 0x40
   34150:	1ad3      	subs	r3, r2, r3
   34152:	409d      	lsls	r5, r3
   34154:	432f      	orrs	r7, r5
   34156:	1e7d      	subs	r5, r7, #1
   34158:	41af      	sbcs	r7, r5
   3415a:	2400      	movs	r4, #0
   3415c:	430f      	orrs	r7, r1
   3415e:	2600      	movs	r6, #0
   34160:	e78e      	b.n	34080 <__aeabi_dsub+0x244>
   34162:	002b      	movs	r3, r5
   34164:	000f      	movs	r7, r1
   34166:	3b20      	subs	r3, #32
   34168:	40df      	lsrs	r7, r3
   3416a:	2d20      	cmp	r5, #32
   3416c:	d071      	beq.n	34252 <__aeabi_dsub+0x416>
   3416e:	2340      	movs	r3, #64	; 0x40
   34170:	1b5d      	subs	r5, r3, r5
   34172:	40a9      	lsls	r1, r5
   34174:	430a      	orrs	r2, r1
   34176:	1e51      	subs	r1, r2, #1
   34178:	418a      	sbcs	r2, r1
   3417a:	2100      	movs	r1, #0
   3417c:	4317      	orrs	r7, r2
   3417e:	e6af      	b.n	33ee0 <__aeabi_dsub+0xa4>
   34180:	000007ff 	.word	0x000007ff
   34184:	ff7fffff 	.word	0xff7fffff
   34188:	800fffff 	.word	0x800fffff
   3418c:	2e00      	cmp	r6, #0
   3418e:	d03e      	beq.n	3420e <__aeabi_dsub+0x3d2>
   34190:	4eb3      	ldr	r6, [pc, #716]	; (34460 <__aeabi_dsub+0x624>)
   34192:	45b4      	cmp	ip, r6
   34194:	d045      	beq.n	34222 <__aeabi_dsub+0x3e6>
   34196:	2680      	movs	r6, #128	; 0x80
   34198:	0436      	lsls	r6, r6, #16
   3419a:	426d      	negs	r5, r5
   3419c:	4334      	orrs	r4, r6
   3419e:	2d38      	cmp	r5, #56	; 0x38
   341a0:	dd00      	ble.n	341a4 <__aeabi_dsub+0x368>
   341a2:	e0a8      	b.n	342f6 <__aeabi_dsub+0x4ba>
   341a4:	2d1f      	cmp	r5, #31
   341a6:	dd00      	ble.n	341aa <__aeabi_dsub+0x36e>
   341a8:	e11f      	b.n	343ea <__aeabi_dsub+0x5ae>
   341aa:	2620      	movs	r6, #32
   341ac:	0027      	movs	r7, r4
   341ae:	4650      	mov	r0, sl
   341b0:	1b76      	subs	r6, r6, r5
   341b2:	40b7      	lsls	r7, r6
   341b4:	40e8      	lsrs	r0, r5
   341b6:	4307      	orrs	r7, r0
   341b8:	4650      	mov	r0, sl
   341ba:	40b0      	lsls	r0, r6
   341bc:	1e46      	subs	r6, r0, #1
   341be:	41b0      	sbcs	r0, r6
   341c0:	40ec      	lsrs	r4, r5
   341c2:	4338      	orrs	r0, r7
   341c4:	1a17      	subs	r7, r2, r0
   341c6:	42ba      	cmp	r2, r7
   341c8:	4192      	sbcs	r2, r2
   341ca:	1b0c      	subs	r4, r1, r4
   341cc:	4252      	negs	r2, r2
   341ce:	1aa4      	subs	r4, r4, r2
   341d0:	4666      	mov	r6, ip
   341d2:	4698      	mov	r8, r3
   341d4:	e68b      	b.n	33eee <__aeabi_dsub+0xb2>
   341d6:	4664      	mov	r4, ip
   341d8:	4667      	mov	r7, ip
   341da:	432c      	orrs	r4, r5
   341dc:	d000      	beq.n	341e0 <__aeabi_dsub+0x3a4>
   341de:	e68b      	b.n	33ef8 <__aeabi_dsub+0xbc>
   341e0:	2500      	movs	r5, #0
   341e2:	2600      	movs	r6, #0
   341e4:	2700      	movs	r7, #0
   341e6:	e6ea      	b.n	33fbe <__aeabi_dsub+0x182>
   341e8:	001e      	movs	r6, r3
   341ea:	e6ad      	b.n	33f48 <__aeabi_dsub+0x10c>
   341ec:	2b1f      	cmp	r3, #31
   341ee:	dc60      	bgt.n	342b2 <__aeabi_dsub+0x476>
   341f0:	2720      	movs	r7, #32
   341f2:	1af8      	subs	r0, r7, r3
   341f4:	000f      	movs	r7, r1
   341f6:	4684      	mov	ip, r0
   341f8:	4087      	lsls	r7, r0
   341fa:	0010      	movs	r0, r2
   341fc:	40d8      	lsrs	r0, r3
   341fe:	4307      	orrs	r7, r0
   34200:	4660      	mov	r0, ip
   34202:	4082      	lsls	r2, r0
   34204:	1e50      	subs	r0, r2, #1
   34206:	4182      	sbcs	r2, r0
   34208:	40d9      	lsrs	r1, r3
   3420a:	4317      	orrs	r7, r2
   3420c:	e6f5      	b.n	33ffa <__aeabi_dsub+0x1be>
   3420e:	0026      	movs	r6, r4
   34210:	4650      	mov	r0, sl
   34212:	4306      	orrs	r6, r0
   34214:	d005      	beq.n	34222 <__aeabi_dsub+0x3e6>
   34216:	43ed      	mvns	r5, r5
   34218:	2d00      	cmp	r5, #0
   3421a:	d0d3      	beq.n	341c4 <__aeabi_dsub+0x388>
   3421c:	4e90      	ldr	r6, [pc, #576]	; (34460 <__aeabi_dsub+0x624>)
   3421e:	45b4      	cmp	ip, r6
   34220:	d1bd      	bne.n	3419e <__aeabi_dsub+0x362>
   34222:	000c      	movs	r4, r1
   34224:	0017      	movs	r7, r2
   34226:	4666      	mov	r6, ip
   34228:	4698      	mov	r8, r3
   3422a:	e68d      	b.n	33f48 <__aeabi_dsub+0x10c>
   3422c:	488c      	ldr	r0, [pc, #560]	; (34460 <__aeabi_dsub+0x624>)
   3422e:	4283      	cmp	r3, r0
   34230:	d00b      	beq.n	3424a <__aeabi_dsub+0x40e>
   34232:	4663      	mov	r3, ip
   34234:	e6d9      	b.n	33fea <__aeabi_dsub+0x1ae>
   34236:	2d00      	cmp	r5, #0
   34238:	d000      	beq.n	3423c <__aeabi_dsub+0x400>
   3423a:	e096      	b.n	3436a <__aeabi_dsub+0x52e>
   3423c:	0008      	movs	r0, r1
   3423e:	4310      	orrs	r0, r2
   34240:	d100      	bne.n	34244 <__aeabi_dsub+0x408>
   34242:	e0e2      	b.n	3440a <__aeabi_dsub+0x5ce>
   34244:	000c      	movs	r4, r1
   34246:	0017      	movs	r7, r2
   34248:	4698      	mov	r8, r3
   3424a:	4e85      	ldr	r6, [pc, #532]	; (34460 <__aeabi_dsub+0x624>)
   3424c:	e67c      	b.n	33f48 <__aeabi_dsub+0x10c>
   3424e:	2500      	movs	r5, #0
   34250:	e780      	b.n	34154 <__aeabi_dsub+0x318>
   34252:	2100      	movs	r1, #0
   34254:	e78e      	b.n	34174 <__aeabi_dsub+0x338>
   34256:	0023      	movs	r3, r4
   34258:	4650      	mov	r0, sl
   3425a:	4303      	orrs	r3, r0
   3425c:	2e00      	cmp	r6, #0
   3425e:	d000      	beq.n	34262 <__aeabi_dsub+0x426>
   34260:	e0a8      	b.n	343b4 <__aeabi_dsub+0x578>
   34262:	2b00      	cmp	r3, #0
   34264:	d100      	bne.n	34268 <__aeabi_dsub+0x42c>
   34266:	e0de      	b.n	34426 <__aeabi_dsub+0x5ea>
   34268:	000b      	movs	r3, r1
   3426a:	4313      	orrs	r3, r2
   3426c:	d100      	bne.n	34270 <__aeabi_dsub+0x434>
   3426e:	e66b      	b.n	33f48 <__aeabi_dsub+0x10c>
   34270:	4452      	add	r2, sl
   34272:	4552      	cmp	r2, sl
   34274:	4180      	sbcs	r0, r0
   34276:	1864      	adds	r4, r4, r1
   34278:	4240      	negs	r0, r0
   3427a:	1824      	adds	r4, r4, r0
   3427c:	0017      	movs	r7, r2
   3427e:	0223      	lsls	r3, r4, #8
   34280:	d400      	bmi.n	34284 <__aeabi_dsub+0x448>
   34282:	e6fd      	b.n	34080 <__aeabi_dsub+0x244>
   34284:	4b77      	ldr	r3, [pc, #476]	; (34464 <__aeabi_dsub+0x628>)
   34286:	4666      	mov	r6, ip
   34288:	401c      	ands	r4, r3
   3428a:	e65d      	b.n	33f48 <__aeabi_dsub+0x10c>
   3428c:	0025      	movs	r5, r4
   3428e:	4650      	mov	r0, sl
   34290:	4305      	orrs	r5, r0
   34292:	2e00      	cmp	r6, #0
   34294:	d1cf      	bne.n	34236 <__aeabi_dsub+0x3fa>
   34296:	2d00      	cmp	r5, #0
   34298:	d14f      	bne.n	3433a <__aeabi_dsub+0x4fe>
   3429a:	000c      	movs	r4, r1
   3429c:	4314      	orrs	r4, r2
   3429e:	d100      	bne.n	342a2 <__aeabi_dsub+0x466>
   342a0:	e0a0      	b.n	343e4 <__aeabi_dsub+0x5a8>
   342a2:	000c      	movs	r4, r1
   342a4:	0017      	movs	r7, r2
   342a6:	4698      	mov	r8, r3
   342a8:	e64e      	b.n	33f48 <__aeabi_dsub+0x10c>
   342aa:	4666      	mov	r6, ip
   342ac:	2400      	movs	r4, #0
   342ae:	2700      	movs	r7, #0
   342b0:	e685      	b.n	33fbe <__aeabi_dsub+0x182>
   342b2:	001f      	movs	r7, r3
   342b4:	0008      	movs	r0, r1
   342b6:	3f20      	subs	r7, #32
   342b8:	40f8      	lsrs	r0, r7
   342ba:	0007      	movs	r7, r0
   342bc:	2b20      	cmp	r3, #32
   342be:	d100      	bne.n	342c2 <__aeabi_dsub+0x486>
   342c0:	e08e      	b.n	343e0 <__aeabi_dsub+0x5a4>
   342c2:	2040      	movs	r0, #64	; 0x40
   342c4:	1ac3      	subs	r3, r0, r3
   342c6:	4099      	lsls	r1, r3
   342c8:	430a      	orrs	r2, r1
   342ca:	1e51      	subs	r1, r2, #1
   342cc:	418a      	sbcs	r2, r1
   342ce:	2100      	movs	r1, #0
   342d0:	4317      	orrs	r7, r2
   342d2:	e692      	b.n	33ffa <__aeabi_dsub+0x1be>
   342d4:	2e00      	cmp	r6, #0
   342d6:	d114      	bne.n	34302 <__aeabi_dsub+0x4c6>
   342d8:	0026      	movs	r6, r4
   342da:	4650      	mov	r0, sl
   342dc:	4306      	orrs	r6, r0
   342de:	d062      	beq.n	343a6 <__aeabi_dsub+0x56a>
   342e0:	43db      	mvns	r3, r3
   342e2:	2b00      	cmp	r3, #0
   342e4:	d15c      	bne.n	343a0 <__aeabi_dsub+0x564>
   342e6:	1887      	adds	r7, r0, r2
   342e8:	4297      	cmp	r7, r2
   342ea:	4192      	sbcs	r2, r2
   342ec:	1864      	adds	r4, r4, r1
   342ee:	4252      	negs	r2, r2
   342f0:	18a4      	adds	r4, r4, r2
   342f2:	4666      	mov	r6, ip
   342f4:	e687      	b.n	34006 <__aeabi_dsub+0x1ca>
   342f6:	4650      	mov	r0, sl
   342f8:	4320      	orrs	r0, r4
   342fa:	1e44      	subs	r4, r0, #1
   342fc:	41a0      	sbcs	r0, r4
   342fe:	2400      	movs	r4, #0
   34300:	e760      	b.n	341c4 <__aeabi_dsub+0x388>
   34302:	4e57      	ldr	r6, [pc, #348]	; (34460 <__aeabi_dsub+0x624>)
   34304:	45b4      	cmp	ip, r6
   34306:	d04e      	beq.n	343a6 <__aeabi_dsub+0x56a>
   34308:	2680      	movs	r6, #128	; 0x80
   3430a:	0436      	lsls	r6, r6, #16
   3430c:	425b      	negs	r3, r3
   3430e:	4334      	orrs	r4, r6
   34310:	2b38      	cmp	r3, #56	; 0x38
   34312:	dd00      	ble.n	34316 <__aeabi_dsub+0x4da>
   34314:	e07f      	b.n	34416 <__aeabi_dsub+0x5da>
   34316:	2b1f      	cmp	r3, #31
   34318:	dd00      	ble.n	3431c <__aeabi_dsub+0x4e0>
   3431a:	e08b      	b.n	34434 <__aeabi_dsub+0x5f8>
   3431c:	2620      	movs	r6, #32
   3431e:	0027      	movs	r7, r4
   34320:	4650      	mov	r0, sl
   34322:	1af6      	subs	r6, r6, r3
   34324:	40b7      	lsls	r7, r6
   34326:	40d8      	lsrs	r0, r3
   34328:	4307      	orrs	r7, r0
   3432a:	4650      	mov	r0, sl
   3432c:	40b0      	lsls	r0, r6
   3432e:	1e46      	subs	r6, r0, #1
   34330:	41b0      	sbcs	r0, r6
   34332:	4307      	orrs	r7, r0
   34334:	40dc      	lsrs	r4, r3
   34336:	18bf      	adds	r7, r7, r2
   34338:	e7d6      	b.n	342e8 <__aeabi_dsub+0x4ac>
   3433a:	000d      	movs	r5, r1
   3433c:	4315      	orrs	r5, r2
   3433e:	d100      	bne.n	34342 <__aeabi_dsub+0x506>
   34340:	e602      	b.n	33f48 <__aeabi_dsub+0x10c>
   34342:	4650      	mov	r0, sl
   34344:	1a80      	subs	r0, r0, r2
   34346:	4582      	cmp	sl, r0
   34348:	41bf      	sbcs	r7, r7
   3434a:	1a65      	subs	r5, r4, r1
   3434c:	427f      	negs	r7, r7
   3434e:	1bed      	subs	r5, r5, r7
   34350:	4684      	mov	ip, r0
   34352:	0228      	lsls	r0, r5, #8
   34354:	d400      	bmi.n	34358 <__aeabi_dsub+0x51c>
   34356:	e68d      	b.n	34074 <__aeabi_dsub+0x238>
   34358:	4650      	mov	r0, sl
   3435a:	1a17      	subs	r7, r2, r0
   3435c:	42ba      	cmp	r2, r7
   3435e:	4192      	sbcs	r2, r2
   34360:	1b0c      	subs	r4, r1, r4
   34362:	4252      	negs	r2, r2
   34364:	1aa4      	subs	r4, r4, r2
   34366:	4698      	mov	r8, r3
   34368:	e5ee      	b.n	33f48 <__aeabi_dsub+0x10c>
   3436a:	000d      	movs	r5, r1
   3436c:	4315      	orrs	r5, r2
   3436e:	d100      	bne.n	34372 <__aeabi_dsub+0x536>
   34370:	e76b      	b.n	3424a <__aeabi_dsub+0x40e>
   34372:	4650      	mov	r0, sl
   34374:	0767      	lsls	r7, r4, #29
   34376:	08c0      	lsrs	r0, r0, #3
   34378:	4307      	orrs	r7, r0
   3437a:	2080      	movs	r0, #128	; 0x80
   3437c:	08e4      	lsrs	r4, r4, #3
   3437e:	0300      	lsls	r0, r0, #12
   34380:	4204      	tst	r4, r0
   34382:	d007      	beq.n	34394 <__aeabi_dsub+0x558>
   34384:	08cd      	lsrs	r5, r1, #3
   34386:	4205      	tst	r5, r0
   34388:	d104      	bne.n	34394 <__aeabi_dsub+0x558>
   3438a:	002c      	movs	r4, r5
   3438c:	4698      	mov	r8, r3
   3438e:	08d7      	lsrs	r7, r2, #3
   34390:	0749      	lsls	r1, r1, #29
   34392:	430f      	orrs	r7, r1
   34394:	0f7b      	lsrs	r3, r7, #29
   34396:	00e4      	lsls	r4, r4, #3
   34398:	431c      	orrs	r4, r3
   3439a:	00ff      	lsls	r7, r7, #3
   3439c:	4e30      	ldr	r6, [pc, #192]	; (34460 <__aeabi_dsub+0x624>)
   3439e:	e5d3      	b.n	33f48 <__aeabi_dsub+0x10c>
   343a0:	4e2f      	ldr	r6, [pc, #188]	; (34460 <__aeabi_dsub+0x624>)
   343a2:	45b4      	cmp	ip, r6
   343a4:	d1b4      	bne.n	34310 <__aeabi_dsub+0x4d4>
   343a6:	000c      	movs	r4, r1
   343a8:	0017      	movs	r7, r2
   343aa:	4666      	mov	r6, ip
   343ac:	e5cc      	b.n	33f48 <__aeabi_dsub+0x10c>
   343ae:	2700      	movs	r7, #0
   343b0:	2400      	movs	r4, #0
   343b2:	e5e8      	b.n	33f86 <__aeabi_dsub+0x14a>
   343b4:	2b00      	cmp	r3, #0
   343b6:	d039      	beq.n	3442c <__aeabi_dsub+0x5f0>
   343b8:	000b      	movs	r3, r1
   343ba:	4313      	orrs	r3, r2
   343bc:	d100      	bne.n	343c0 <__aeabi_dsub+0x584>
   343be:	e744      	b.n	3424a <__aeabi_dsub+0x40e>
   343c0:	08c0      	lsrs	r0, r0, #3
   343c2:	0767      	lsls	r7, r4, #29
   343c4:	4307      	orrs	r7, r0
   343c6:	2080      	movs	r0, #128	; 0x80
   343c8:	08e4      	lsrs	r4, r4, #3
   343ca:	0300      	lsls	r0, r0, #12
   343cc:	4204      	tst	r4, r0
   343ce:	d0e1      	beq.n	34394 <__aeabi_dsub+0x558>
   343d0:	08cb      	lsrs	r3, r1, #3
   343d2:	4203      	tst	r3, r0
   343d4:	d1de      	bne.n	34394 <__aeabi_dsub+0x558>
   343d6:	08d7      	lsrs	r7, r2, #3
   343d8:	0749      	lsls	r1, r1, #29
   343da:	430f      	orrs	r7, r1
   343dc:	001c      	movs	r4, r3
   343de:	e7d9      	b.n	34394 <__aeabi_dsub+0x558>
   343e0:	2100      	movs	r1, #0
   343e2:	e771      	b.n	342c8 <__aeabi_dsub+0x48c>
   343e4:	2500      	movs	r5, #0
   343e6:	2700      	movs	r7, #0
   343e8:	e5e9      	b.n	33fbe <__aeabi_dsub+0x182>
   343ea:	002e      	movs	r6, r5
   343ec:	0027      	movs	r7, r4
   343ee:	3e20      	subs	r6, #32
   343f0:	40f7      	lsrs	r7, r6
   343f2:	2d20      	cmp	r5, #32
   343f4:	d02f      	beq.n	34456 <__aeabi_dsub+0x61a>
   343f6:	2640      	movs	r6, #64	; 0x40
   343f8:	1b75      	subs	r5, r6, r5
   343fa:	40ac      	lsls	r4, r5
   343fc:	4650      	mov	r0, sl
   343fe:	4320      	orrs	r0, r4
   34400:	1e44      	subs	r4, r0, #1
   34402:	41a0      	sbcs	r0, r4
   34404:	2400      	movs	r4, #0
   34406:	4338      	orrs	r0, r7
   34408:	e6dc      	b.n	341c4 <__aeabi_dsub+0x388>
   3440a:	2480      	movs	r4, #128	; 0x80
   3440c:	2500      	movs	r5, #0
   3440e:	0324      	lsls	r4, r4, #12
   34410:	4e13      	ldr	r6, [pc, #76]	; (34460 <__aeabi_dsub+0x624>)
   34412:	2700      	movs	r7, #0
   34414:	e5d3      	b.n	33fbe <__aeabi_dsub+0x182>
   34416:	4650      	mov	r0, sl
   34418:	4320      	orrs	r0, r4
   3441a:	0007      	movs	r7, r0
   3441c:	1e78      	subs	r0, r7, #1
   3441e:	4187      	sbcs	r7, r0
   34420:	2400      	movs	r4, #0
   34422:	18bf      	adds	r7, r7, r2
   34424:	e760      	b.n	342e8 <__aeabi_dsub+0x4ac>
   34426:	000c      	movs	r4, r1
   34428:	0017      	movs	r7, r2
   3442a:	e58d      	b.n	33f48 <__aeabi_dsub+0x10c>
   3442c:	000c      	movs	r4, r1
   3442e:	0017      	movs	r7, r2
   34430:	4e0b      	ldr	r6, [pc, #44]	; (34460 <__aeabi_dsub+0x624>)
   34432:	e589      	b.n	33f48 <__aeabi_dsub+0x10c>
   34434:	001e      	movs	r6, r3
   34436:	0027      	movs	r7, r4
   34438:	3e20      	subs	r6, #32
   3443a:	40f7      	lsrs	r7, r6
   3443c:	2b20      	cmp	r3, #32
   3443e:	d00c      	beq.n	3445a <__aeabi_dsub+0x61e>
   34440:	2640      	movs	r6, #64	; 0x40
   34442:	1af3      	subs	r3, r6, r3
   34444:	409c      	lsls	r4, r3
   34446:	4650      	mov	r0, sl
   34448:	4320      	orrs	r0, r4
   3444a:	1e44      	subs	r4, r0, #1
   3444c:	41a0      	sbcs	r0, r4
   3444e:	4307      	orrs	r7, r0
   34450:	2400      	movs	r4, #0
   34452:	18bf      	adds	r7, r7, r2
   34454:	e748      	b.n	342e8 <__aeabi_dsub+0x4ac>
   34456:	2400      	movs	r4, #0
   34458:	e7d0      	b.n	343fc <__aeabi_dsub+0x5c0>
   3445a:	2400      	movs	r4, #0
   3445c:	e7f3      	b.n	34446 <__aeabi_dsub+0x60a>
   3445e:	46c0      	nop			; (mov r8, r8)
   34460:	000007ff 	.word	0x000007ff
   34464:	ff7fffff 	.word	0xff7fffff

00034468 <__aeabi_d2iz>:
   34468:	b530      	push	{r4, r5, lr}
   3446a:	4d13      	ldr	r5, [pc, #76]	; (344b8 <__aeabi_d2iz+0x50>)
   3446c:	030a      	lsls	r2, r1, #12
   3446e:	004b      	lsls	r3, r1, #1
   34470:	0b12      	lsrs	r2, r2, #12
   34472:	0d5b      	lsrs	r3, r3, #21
   34474:	0fc9      	lsrs	r1, r1, #31
   34476:	2400      	movs	r4, #0
   34478:	42ab      	cmp	r3, r5
   3447a:	dd10      	ble.n	3449e <__aeabi_d2iz+0x36>
   3447c:	4c0f      	ldr	r4, [pc, #60]	; (344bc <__aeabi_d2iz+0x54>)
   3447e:	42a3      	cmp	r3, r4
   34480:	dc0f      	bgt.n	344a2 <__aeabi_d2iz+0x3a>
   34482:	2480      	movs	r4, #128	; 0x80
   34484:	4d0e      	ldr	r5, [pc, #56]	; (344c0 <__aeabi_d2iz+0x58>)
   34486:	0364      	lsls	r4, r4, #13
   34488:	4322      	orrs	r2, r4
   3448a:	1aed      	subs	r5, r5, r3
   3448c:	2d1f      	cmp	r5, #31
   3448e:	dd0b      	ble.n	344a8 <__aeabi_d2iz+0x40>
   34490:	480c      	ldr	r0, [pc, #48]	; (344c4 <__aeabi_d2iz+0x5c>)
   34492:	1ac3      	subs	r3, r0, r3
   34494:	40da      	lsrs	r2, r3
   34496:	4254      	negs	r4, r2
   34498:	2900      	cmp	r1, #0
   3449a:	d100      	bne.n	3449e <__aeabi_d2iz+0x36>
   3449c:	0014      	movs	r4, r2
   3449e:	0020      	movs	r0, r4
   344a0:	bd30      	pop	{r4, r5, pc}
   344a2:	4b09      	ldr	r3, [pc, #36]	; (344c8 <__aeabi_d2iz+0x60>)
   344a4:	18cc      	adds	r4, r1, r3
   344a6:	e7fa      	b.n	3449e <__aeabi_d2iz+0x36>
   344a8:	4c08      	ldr	r4, [pc, #32]	; (344cc <__aeabi_d2iz+0x64>)
   344aa:	40e8      	lsrs	r0, r5
   344ac:	46a4      	mov	ip, r4
   344ae:	4463      	add	r3, ip
   344b0:	409a      	lsls	r2, r3
   344b2:	4302      	orrs	r2, r0
   344b4:	e7ef      	b.n	34496 <__aeabi_d2iz+0x2e>
   344b6:	46c0      	nop			; (mov r8, r8)
   344b8:	000003fe 	.word	0x000003fe
   344bc:	0000041d 	.word	0x0000041d
   344c0:	00000433 	.word	0x00000433
   344c4:	00000413 	.word	0x00000413
   344c8:	7fffffff 	.word	0x7fffffff
   344cc:	fffffbed 	.word	0xfffffbed

000344d0 <__aeabi_ui2d>:
   344d0:	b510      	push	{r4, lr}
   344d2:	1e04      	subs	r4, r0, #0
   344d4:	d028      	beq.n	34528 <__aeabi_ui2d+0x58>
   344d6:	f000 f833 	bl	34540 <__clzsi2>
   344da:	4b15      	ldr	r3, [pc, #84]	; (34530 <__aeabi_ui2d+0x60>)
   344dc:	4a15      	ldr	r2, [pc, #84]	; (34534 <__aeabi_ui2d+0x64>)
   344de:	1a1b      	subs	r3, r3, r0
   344e0:	1ad2      	subs	r2, r2, r3
   344e2:	2a1f      	cmp	r2, #31
   344e4:	dd15      	ble.n	34512 <__aeabi_ui2d+0x42>
   344e6:	4a14      	ldr	r2, [pc, #80]	; (34538 <__aeabi_ui2d+0x68>)
   344e8:	1ad2      	subs	r2, r2, r3
   344ea:	4094      	lsls	r4, r2
   344ec:	2200      	movs	r2, #0
   344ee:	0324      	lsls	r4, r4, #12
   344f0:	055b      	lsls	r3, r3, #21
   344f2:	0b24      	lsrs	r4, r4, #12
   344f4:	0d5b      	lsrs	r3, r3, #21
   344f6:	2100      	movs	r1, #0
   344f8:	0010      	movs	r0, r2
   344fa:	0324      	lsls	r4, r4, #12
   344fc:	0d0a      	lsrs	r2, r1, #20
   344fe:	0b24      	lsrs	r4, r4, #12
   34500:	0512      	lsls	r2, r2, #20
   34502:	4322      	orrs	r2, r4
   34504:	4c0d      	ldr	r4, [pc, #52]	; (3453c <__aeabi_ui2d+0x6c>)
   34506:	051b      	lsls	r3, r3, #20
   34508:	4022      	ands	r2, r4
   3450a:	4313      	orrs	r3, r2
   3450c:	005b      	lsls	r3, r3, #1
   3450e:	0859      	lsrs	r1, r3, #1
   34510:	bd10      	pop	{r4, pc}
   34512:	0021      	movs	r1, r4
   34514:	4091      	lsls	r1, r2
   34516:	000a      	movs	r2, r1
   34518:	210b      	movs	r1, #11
   3451a:	1a08      	subs	r0, r1, r0
   3451c:	40c4      	lsrs	r4, r0
   3451e:	055b      	lsls	r3, r3, #21
   34520:	0324      	lsls	r4, r4, #12
   34522:	0b24      	lsrs	r4, r4, #12
   34524:	0d5b      	lsrs	r3, r3, #21
   34526:	e7e6      	b.n	344f6 <__aeabi_ui2d+0x26>
   34528:	2300      	movs	r3, #0
   3452a:	2400      	movs	r4, #0
   3452c:	2200      	movs	r2, #0
   3452e:	e7e2      	b.n	344f6 <__aeabi_ui2d+0x26>
   34530:	0000041e 	.word	0x0000041e
   34534:	00000433 	.word	0x00000433
   34538:	00000413 	.word	0x00000413
   3453c:	800fffff 	.word	0x800fffff

00034540 <__clzsi2>:
   34540:	211c      	movs	r1, #28
   34542:	2301      	movs	r3, #1
   34544:	041b      	lsls	r3, r3, #16
   34546:	4298      	cmp	r0, r3
   34548:	d301      	bcc.n	3454e <__clzsi2+0xe>
   3454a:	0c00      	lsrs	r0, r0, #16
   3454c:	3910      	subs	r1, #16
   3454e:	0a1b      	lsrs	r3, r3, #8
   34550:	4298      	cmp	r0, r3
   34552:	d301      	bcc.n	34558 <__clzsi2+0x18>
   34554:	0a00      	lsrs	r0, r0, #8
   34556:	3908      	subs	r1, #8
   34558:	091b      	lsrs	r3, r3, #4
   3455a:	4298      	cmp	r0, r3
   3455c:	d301      	bcc.n	34562 <__clzsi2+0x22>
   3455e:	0900      	lsrs	r0, r0, #4
   34560:	3904      	subs	r1, #4
   34562:	a202      	add	r2, pc, #8	; (adr r2, 3456c <__clzsi2+0x2c>)
   34564:	5c10      	ldrb	r0, [r2, r0]
   34566:	1840      	adds	r0, r0, r1
   34568:	4770      	bx	lr
   3456a:	46c0      	nop			; (mov r8, r8)
   3456c:	02020304 	.word	0x02020304
   34570:	01010101 	.word	0x01010101
	...

0003457c <atoi>:
   3457c:	b510      	push	{r4, lr}
   3457e:	220a      	movs	r2, #10
   34580:	2100      	movs	r1, #0
   34582:	f000 fb0d 	bl	34ba0 <strtol>
   34586:	bd10      	pop	{r4, pc}

00034588 <__libc_init_array>:
   34588:	b570      	push	{r4, r5, r6, lr}
   3458a:	2600      	movs	r6, #0
   3458c:	4d0c      	ldr	r5, [pc, #48]	; (345c0 <__libc_init_array+0x38>)
   3458e:	4c0d      	ldr	r4, [pc, #52]	; (345c4 <__libc_init_array+0x3c>)
   34590:	1b64      	subs	r4, r4, r5
   34592:	10a4      	asrs	r4, r4, #2
   34594:	42a6      	cmp	r6, r4
   34596:	d109      	bne.n	345ac <__libc_init_array+0x24>
   34598:	2600      	movs	r6, #0
   3459a:	f005 fcfb 	bl	39f94 <_init>
   3459e:	4d0a      	ldr	r5, [pc, #40]	; (345c8 <__libc_init_array+0x40>)
   345a0:	4c0a      	ldr	r4, [pc, #40]	; (345cc <__libc_init_array+0x44>)
   345a2:	1b64      	subs	r4, r4, r5
   345a4:	10a4      	asrs	r4, r4, #2
   345a6:	42a6      	cmp	r6, r4
   345a8:	d105      	bne.n	345b6 <__libc_init_array+0x2e>
   345aa:	bd70      	pop	{r4, r5, r6, pc}
   345ac:	00b3      	lsls	r3, r6, #2
   345ae:	58eb      	ldr	r3, [r5, r3]
   345b0:	4798      	blx	r3
   345b2:	3601      	adds	r6, #1
   345b4:	e7ee      	b.n	34594 <__libc_init_array+0xc>
   345b6:	00b3      	lsls	r3, r6, #2
   345b8:	58eb      	ldr	r3, [r5, r3]
   345ba:	4798      	blx	r3
   345bc:	3601      	adds	r6, #1
   345be:	e7f2      	b.n	345a6 <__libc_init_array+0x1e>
   345c0:	00039fa0 	.word	0x00039fa0
   345c4:	00039fa0 	.word	0x00039fa0
   345c8:	00039fa0 	.word	0x00039fa0
   345cc:	00039fa4 	.word	0x00039fa4

000345d0 <malloc>:
   345d0:	b510      	push	{r4, lr}
   345d2:	4b03      	ldr	r3, [pc, #12]	; (345e0 <malloc+0x10>)
   345d4:	0001      	movs	r1, r0
   345d6:	6818      	ldr	r0, [r3, #0]
   345d8:	f000 f87c 	bl	346d4 <_malloc_r>
   345dc:	bd10      	pop	{r4, pc}
   345de:	46c0      	nop			; (mov r8, r8)
   345e0:	20000124 	.word	0x20000124

000345e4 <free>:
   345e4:	b510      	push	{r4, lr}
   345e6:	4b03      	ldr	r3, [pc, #12]	; (345f4 <free+0x10>)
   345e8:	0001      	movs	r1, r0
   345ea:	6818      	ldr	r0, [r3, #0]
   345ec:	f000 f828 	bl	34640 <_free_r>
   345f0:	bd10      	pop	{r4, pc}
   345f2:	46c0      	nop			; (mov r8, r8)
   345f4:	20000124 	.word	0x20000124

000345f8 <memcpy>:
   345f8:	2300      	movs	r3, #0
   345fa:	b510      	push	{r4, lr}
   345fc:	429a      	cmp	r2, r3
   345fe:	d100      	bne.n	34602 <memcpy+0xa>
   34600:	bd10      	pop	{r4, pc}
   34602:	5ccc      	ldrb	r4, [r1, r3]
   34604:	54c4      	strb	r4, [r0, r3]
   34606:	3301      	adds	r3, #1
   34608:	e7f8      	b.n	345fc <memcpy+0x4>

0003460a <memmove>:
   3460a:	b510      	push	{r4, lr}
   3460c:	4288      	cmp	r0, r1
   3460e:	d902      	bls.n	34616 <memmove+0xc>
   34610:	188b      	adds	r3, r1, r2
   34612:	4298      	cmp	r0, r3
   34614:	d308      	bcc.n	34628 <memmove+0x1e>
   34616:	2300      	movs	r3, #0
   34618:	429a      	cmp	r2, r3
   3461a:	d007      	beq.n	3462c <memmove+0x22>
   3461c:	5ccc      	ldrb	r4, [r1, r3]
   3461e:	54c4      	strb	r4, [r0, r3]
   34620:	3301      	adds	r3, #1
   34622:	e7f9      	b.n	34618 <memmove+0xe>
   34624:	5c8b      	ldrb	r3, [r1, r2]
   34626:	5483      	strb	r3, [r0, r2]
   34628:	3a01      	subs	r2, #1
   3462a:	d2fb      	bcs.n	34624 <memmove+0x1a>
   3462c:	bd10      	pop	{r4, pc}

0003462e <memset>:
   3462e:	0003      	movs	r3, r0
   34630:	1882      	adds	r2, r0, r2
   34632:	4293      	cmp	r3, r2
   34634:	d100      	bne.n	34638 <memset+0xa>
   34636:	4770      	bx	lr
   34638:	7019      	strb	r1, [r3, #0]
   3463a:	3301      	adds	r3, #1
   3463c:	e7f9      	b.n	34632 <memset+0x4>
	...

00034640 <_free_r>:
   34640:	b570      	push	{r4, r5, r6, lr}
   34642:	0005      	movs	r5, r0
   34644:	2900      	cmp	r1, #0
   34646:	d010      	beq.n	3466a <_free_r+0x2a>
   34648:	1f0c      	subs	r4, r1, #4
   3464a:	6823      	ldr	r3, [r4, #0]
   3464c:	2b00      	cmp	r3, #0
   3464e:	da00      	bge.n	34652 <_free_r+0x12>
   34650:	18e4      	adds	r4, r4, r3
   34652:	0028      	movs	r0, r5
   34654:	f000 fdd8 	bl	35208 <__malloc_lock>
   34658:	4a1d      	ldr	r2, [pc, #116]	; (346d0 <_free_r+0x90>)
   3465a:	6813      	ldr	r3, [r2, #0]
   3465c:	2b00      	cmp	r3, #0
   3465e:	d105      	bne.n	3466c <_free_r+0x2c>
   34660:	6063      	str	r3, [r4, #4]
   34662:	6014      	str	r4, [r2, #0]
   34664:	0028      	movs	r0, r5
   34666:	f000 fdd0 	bl	3520a <__malloc_unlock>
   3466a:	bd70      	pop	{r4, r5, r6, pc}
   3466c:	42a3      	cmp	r3, r4
   3466e:	d909      	bls.n	34684 <_free_r+0x44>
   34670:	6821      	ldr	r1, [r4, #0]
   34672:	1860      	adds	r0, r4, r1
   34674:	4283      	cmp	r3, r0
   34676:	d1f3      	bne.n	34660 <_free_r+0x20>
   34678:	6818      	ldr	r0, [r3, #0]
   3467a:	685b      	ldr	r3, [r3, #4]
   3467c:	1841      	adds	r1, r0, r1
   3467e:	6021      	str	r1, [r4, #0]
   34680:	e7ee      	b.n	34660 <_free_r+0x20>
   34682:	0013      	movs	r3, r2
   34684:	685a      	ldr	r2, [r3, #4]
   34686:	2a00      	cmp	r2, #0
   34688:	d001      	beq.n	3468e <_free_r+0x4e>
   3468a:	42a2      	cmp	r2, r4
   3468c:	d9f9      	bls.n	34682 <_free_r+0x42>
   3468e:	6819      	ldr	r1, [r3, #0]
   34690:	1858      	adds	r0, r3, r1
   34692:	42a0      	cmp	r0, r4
   34694:	d10b      	bne.n	346ae <_free_r+0x6e>
   34696:	6820      	ldr	r0, [r4, #0]
   34698:	1809      	adds	r1, r1, r0
   3469a:	1858      	adds	r0, r3, r1
   3469c:	6019      	str	r1, [r3, #0]
   3469e:	4282      	cmp	r2, r0
   346a0:	d1e0      	bne.n	34664 <_free_r+0x24>
   346a2:	6810      	ldr	r0, [r2, #0]
   346a4:	6852      	ldr	r2, [r2, #4]
   346a6:	1841      	adds	r1, r0, r1
   346a8:	6019      	str	r1, [r3, #0]
   346aa:	605a      	str	r2, [r3, #4]
   346ac:	e7da      	b.n	34664 <_free_r+0x24>
   346ae:	42a0      	cmp	r0, r4
   346b0:	d902      	bls.n	346b8 <_free_r+0x78>
   346b2:	230c      	movs	r3, #12
   346b4:	602b      	str	r3, [r5, #0]
   346b6:	e7d5      	b.n	34664 <_free_r+0x24>
   346b8:	6821      	ldr	r1, [r4, #0]
   346ba:	1860      	adds	r0, r4, r1
   346bc:	4282      	cmp	r2, r0
   346be:	d103      	bne.n	346c8 <_free_r+0x88>
   346c0:	6810      	ldr	r0, [r2, #0]
   346c2:	6852      	ldr	r2, [r2, #4]
   346c4:	1841      	adds	r1, r0, r1
   346c6:	6021      	str	r1, [r4, #0]
   346c8:	6062      	str	r2, [r4, #4]
   346ca:	605c      	str	r4, [r3, #4]
   346cc:	e7ca      	b.n	34664 <_free_r+0x24>
   346ce:	46c0      	nop			; (mov r8, r8)
   346d0:	200045a8 	.word	0x200045a8

000346d4 <_malloc_r>:
   346d4:	2303      	movs	r3, #3
   346d6:	b570      	push	{r4, r5, r6, lr}
   346d8:	1ccd      	adds	r5, r1, #3
   346da:	439d      	bics	r5, r3
   346dc:	3508      	adds	r5, #8
   346de:	0006      	movs	r6, r0
   346e0:	2d0c      	cmp	r5, #12
   346e2:	d21e      	bcs.n	34722 <_malloc_r+0x4e>
   346e4:	250c      	movs	r5, #12
   346e6:	42a9      	cmp	r1, r5
   346e8:	d81d      	bhi.n	34726 <_malloc_r+0x52>
   346ea:	0030      	movs	r0, r6
   346ec:	f000 fd8c 	bl	35208 <__malloc_lock>
   346f0:	4a25      	ldr	r2, [pc, #148]	; (34788 <_malloc_r+0xb4>)
   346f2:	6814      	ldr	r4, [r2, #0]
   346f4:	0021      	movs	r1, r4
   346f6:	2900      	cmp	r1, #0
   346f8:	d119      	bne.n	3472e <_malloc_r+0x5a>
   346fa:	4c24      	ldr	r4, [pc, #144]	; (3478c <_malloc_r+0xb8>)
   346fc:	6823      	ldr	r3, [r4, #0]
   346fe:	2b00      	cmp	r3, #0
   34700:	d103      	bne.n	3470a <_malloc_r+0x36>
   34702:	0030      	movs	r0, r6
   34704:	f000 f8ae 	bl	34864 <_sbrk_r>
   34708:	6020      	str	r0, [r4, #0]
   3470a:	0029      	movs	r1, r5
   3470c:	0030      	movs	r0, r6
   3470e:	f000 f8a9 	bl	34864 <_sbrk_r>
   34712:	1c43      	adds	r3, r0, #1
   34714:	d12c      	bne.n	34770 <_malloc_r+0x9c>
   34716:	230c      	movs	r3, #12
   34718:	0030      	movs	r0, r6
   3471a:	6033      	str	r3, [r6, #0]
   3471c:	f000 fd75 	bl	3520a <__malloc_unlock>
   34720:	e003      	b.n	3472a <_malloc_r+0x56>
   34722:	2d00      	cmp	r5, #0
   34724:	dadf      	bge.n	346e6 <_malloc_r+0x12>
   34726:	230c      	movs	r3, #12
   34728:	6033      	str	r3, [r6, #0]
   3472a:	2000      	movs	r0, #0
   3472c:	bd70      	pop	{r4, r5, r6, pc}
   3472e:	680b      	ldr	r3, [r1, #0]
   34730:	1b5b      	subs	r3, r3, r5
   34732:	d41a      	bmi.n	3476a <_malloc_r+0x96>
   34734:	2b0b      	cmp	r3, #11
   34736:	d903      	bls.n	34740 <_malloc_r+0x6c>
   34738:	600b      	str	r3, [r1, #0]
   3473a:	18cc      	adds	r4, r1, r3
   3473c:	6025      	str	r5, [r4, #0]
   3473e:	e003      	b.n	34748 <_malloc_r+0x74>
   34740:	428c      	cmp	r4, r1
   34742:	d10e      	bne.n	34762 <_malloc_r+0x8e>
   34744:	6863      	ldr	r3, [r4, #4]
   34746:	6013      	str	r3, [r2, #0]
   34748:	0030      	movs	r0, r6
   3474a:	f000 fd5e 	bl	3520a <__malloc_unlock>
   3474e:	0020      	movs	r0, r4
   34750:	2207      	movs	r2, #7
   34752:	300b      	adds	r0, #11
   34754:	1d23      	adds	r3, r4, #4
   34756:	4390      	bics	r0, r2
   34758:	1ac3      	subs	r3, r0, r3
   3475a:	d0e7      	beq.n	3472c <_malloc_r+0x58>
   3475c:	425a      	negs	r2, r3
   3475e:	50e2      	str	r2, [r4, r3]
   34760:	e7e4      	b.n	3472c <_malloc_r+0x58>
   34762:	684b      	ldr	r3, [r1, #4]
   34764:	6063      	str	r3, [r4, #4]
   34766:	000c      	movs	r4, r1
   34768:	e7ee      	b.n	34748 <_malloc_r+0x74>
   3476a:	000c      	movs	r4, r1
   3476c:	6849      	ldr	r1, [r1, #4]
   3476e:	e7c2      	b.n	346f6 <_malloc_r+0x22>
   34770:	2303      	movs	r3, #3
   34772:	1cc4      	adds	r4, r0, #3
   34774:	439c      	bics	r4, r3
   34776:	42a0      	cmp	r0, r4
   34778:	d0e0      	beq.n	3473c <_malloc_r+0x68>
   3477a:	1a21      	subs	r1, r4, r0
   3477c:	0030      	movs	r0, r6
   3477e:	f000 f871 	bl	34864 <_sbrk_r>
   34782:	1c43      	adds	r3, r0, #1
   34784:	d1da      	bne.n	3473c <_malloc_r+0x68>
   34786:	e7c6      	b.n	34716 <_malloc_r+0x42>
   34788:	200045a8 	.word	0x200045a8
   3478c:	200045ac 	.word	0x200045ac

00034790 <_puts_r>:
   34790:	b570      	push	{r4, r5, r6, lr}
   34792:	0005      	movs	r5, r0
   34794:	000e      	movs	r6, r1
   34796:	2800      	cmp	r0, #0
   34798:	d004      	beq.n	347a4 <_puts_r+0x14>
   3479a:	6983      	ldr	r3, [r0, #24]
   3479c:	2b00      	cmp	r3, #0
   3479e:	d101      	bne.n	347a4 <_puts_r+0x14>
   347a0:	f000 fc0e 	bl	34fc0 <__sinit>
   347a4:	69ab      	ldr	r3, [r5, #24]
   347a6:	68ac      	ldr	r4, [r5, #8]
   347a8:	2b00      	cmp	r3, #0
   347aa:	d102      	bne.n	347b2 <_puts_r+0x22>
   347ac:	0028      	movs	r0, r5
   347ae:	f000 fc07 	bl	34fc0 <__sinit>
   347b2:	4b24      	ldr	r3, [pc, #144]	; (34844 <_puts_r+0xb4>)
   347b4:	429c      	cmp	r4, r3
   347b6:	d10f      	bne.n	347d8 <_puts_r+0x48>
   347b8:	686c      	ldr	r4, [r5, #4]
   347ba:	89a3      	ldrh	r3, [r4, #12]
   347bc:	071b      	lsls	r3, r3, #28
   347be:	d502      	bpl.n	347c6 <_puts_r+0x36>
   347c0:	6923      	ldr	r3, [r4, #16]
   347c2:	2b00      	cmp	r3, #0
   347c4:	d120      	bne.n	34808 <_puts_r+0x78>
   347c6:	0021      	movs	r1, r4
   347c8:	0028      	movs	r0, r5
   347ca:	f000 fa8b 	bl	34ce4 <__swsetup_r>
   347ce:	2800      	cmp	r0, #0
   347d0:	d01a      	beq.n	34808 <_puts_r+0x78>
   347d2:	2001      	movs	r0, #1
   347d4:	4240      	negs	r0, r0
   347d6:	bd70      	pop	{r4, r5, r6, pc}
   347d8:	4b1b      	ldr	r3, [pc, #108]	; (34848 <_puts_r+0xb8>)
   347da:	429c      	cmp	r4, r3
   347dc:	d101      	bne.n	347e2 <_puts_r+0x52>
   347de:	68ac      	ldr	r4, [r5, #8]
   347e0:	e7eb      	b.n	347ba <_puts_r+0x2a>
   347e2:	4b1a      	ldr	r3, [pc, #104]	; (3484c <_puts_r+0xbc>)
   347e4:	429c      	cmp	r4, r3
   347e6:	d1e8      	bne.n	347ba <_puts_r+0x2a>
   347e8:	68ec      	ldr	r4, [r5, #12]
   347ea:	e7e6      	b.n	347ba <_puts_r+0x2a>
   347ec:	3b01      	subs	r3, #1
   347ee:	3601      	adds	r6, #1
   347f0:	60a3      	str	r3, [r4, #8]
   347f2:	2b00      	cmp	r3, #0
   347f4:	da04      	bge.n	34800 <_puts_r+0x70>
   347f6:	69a2      	ldr	r2, [r4, #24]
   347f8:	4293      	cmp	r3, r2
   347fa:	db16      	blt.n	3482a <_puts_r+0x9a>
   347fc:	290a      	cmp	r1, #10
   347fe:	d014      	beq.n	3482a <_puts_r+0x9a>
   34800:	6823      	ldr	r3, [r4, #0]
   34802:	1c5a      	adds	r2, r3, #1
   34804:	6022      	str	r2, [r4, #0]
   34806:	7019      	strb	r1, [r3, #0]
   34808:	7831      	ldrb	r1, [r6, #0]
   3480a:	68a3      	ldr	r3, [r4, #8]
   3480c:	2900      	cmp	r1, #0
   3480e:	d1ed      	bne.n	347ec <_puts_r+0x5c>
   34810:	3b01      	subs	r3, #1
   34812:	60a3      	str	r3, [r4, #8]
   34814:	2b00      	cmp	r3, #0
   34816:	da0f      	bge.n	34838 <_puts_r+0xa8>
   34818:	0022      	movs	r2, r4
   3481a:	310a      	adds	r1, #10
   3481c:	0028      	movs	r0, r5
   3481e:	f000 fa0b 	bl	34c38 <__swbuf_r>
   34822:	1c43      	adds	r3, r0, #1
   34824:	d0d5      	beq.n	347d2 <_puts_r+0x42>
   34826:	200a      	movs	r0, #10
   34828:	e7d5      	b.n	347d6 <_puts_r+0x46>
   3482a:	0022      	movs	r2, r4
   3482c:	0028      	movs	r0, r5
   3482e:	f000 fa03 	bl	34c38 <__swbuf_r>
   34832:	1c43      	adds	r3, r0, #1
   34834:	d1e8      	bne.n	34808 <_puts_r+0x78>
   34836:	e7cc      	b.n	347d2 <_puts_r+0x42>
   34838:	200a      	movs	r0, #10
   3483a:	6823      	ldr	r3, [r4, #0]
   3483c:	1c5a      	adds	r2, r3, #1
   3483e:	6022      	str	r2, [r4, #0]
   34840:	7018      	strb	r0, [r3, #0]
   34842:	e7c8      	b.n	347d6 <_puts_r+0x46>
   34844:	00039e14 	.word	0x00039e14
   34848:	00039e34 	.word	0x00039e34
   3484c:	00039df4 	.word	0x00039df4

00034850 <puts>:
   34850:	b510      	push	{r4, lr}
   34852:	4b03      	ldr	r3, [pc, #12]	; (34860 <puts+0x10>)
   34854:	0001      	movs	r1, r0
   34856:	6818      	ldr	r0, [r3, #0]
   34858:	f7ff ff9a 	bl	34790 <_puts_r>
   3485c:	bd10      	pop	{r4, pc}
   3485e:	46c0      	nop			; (mov r8, r8)
   34860:	20000124 	.word	0x20000124

00034864 <_sbrk_r>:
   34864:	2300      	movs	r3, #0
   34866:	b570      	push	{r4, r5, r6, lr}
   34868:	4c06      	ldr	r4, [pc, #24]	; (34884 <_sbrk_r+0x20>)
   3486a:	0005      	movs	r5, r0
   3486c:	0008      	movs	r0, r1
   3486e:	6023      	str	r3, [r4, #0]
   34870:	f7f6 fa98 	bl	2ada4 <_sbrk>
   34874:	1c43      	adds	r3, r0, #1
   34876:	d103      	bne.n	34880 <_sbrk_r+0x1c>
   34878:	6823      	ldr	r3, [r4, #0]
   3487a:	2b00      	cmp	r3, #0
   3487c:	d000      	beq.n	34880 <_sbrk_r+0x1c>
   3487e:	602b      	str	r3, [r5, #0]
   34880:	bd70      	pop	{r4, r5, r6, pc}
   34882:	46c0      	nop			; (mov r8, r8)
   34884:	20005ac0 	.word	0x20005ac0

00034888 <sniprintf>:
   34888:	b40c      	push	{r2, r3}
   3488a:	b530      	push	{r4, r5, lr}
   3488c:	4b16      	ldr	r3, [pc, #88]	; (348e8 <sniprintf+0x60>)
   3488e:	b09d      	sub	sp, #116	; 0x74
   34890:	1e0c      	subs	r4, r1, #0
   34892:	681d      	ldr	r5, [r3, #0]
   34894:	da08      	bge.n	348a8 <sniprintf+0x20>
   34896:	238b      	movs	r3, #139	; 0x8b
   34898:	2001      	movs	r0, #1
   3489a:	602b      	str	r3, [r5, #0]
   3489c:	4240      	negs	r0, r0
   3489e:	b01d      	add	sp, #116	; 0x74
   348a0:	bc30      	pop	{r4, r5}
   348a2:	bc08      	pop	{r3}
   348a4:	b002      	add	sp, #8
   348a6:	4718      	bx	r3
   348a8:	2382      	movs	r3, #130	; 0x82
   348aa:	a902      	add	r1, sp, #8
   348ac:	009b      	lsls	r3, r3, #2
   348ae:	818b      	strh	r3, [r1, #12]
   348b0:	2300      	movs	r3, #0
   348b2:	9002      	str	r0, [sp, #8]
   348b4:	6108      	str	r0, [r1, #16]
   348b6:	429c      	cmp	r4, r3
   348b8:	d000      	beq.n	348bc <sniprintf+0x34>
   348ba:	1e63      	subs	r3, r4, #1
   348bc:	608b      	str	r3, [r1, #8]
   348be:	614b      	str	r3, [r1, #20]
   348c0:	2301      	movs	r3, #1
   348c2:	425b      	negs	r3, r3
   348c4:	81cb      	strh	r3, [r1, #14]
   348c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
   348c8:	ab21      	add	r3, sp, #132	; 0x84
   348ca:	0028      	movs	r0, r5
   348cc:	9301      	str	r3, [sp, #4]
   348ce:	f000 fcff 	bl	352d0 <_svfiprintf_r>
   348d2:	1c43      	adds	r3, r0, #1
   348d4:	da01      	bge.n	348da <sniprintf+0x52>
   348d6:	238b      	movs	r3, #139	; 0x8b
   348d8:	602b      	str	r3, [r5, #0]
   348da:	2c00      	cmp	r4, #0
   348dc:	d0df      	beq.n	3489e <sniprintf+0x16>
   348de:	2300      	movs	r3, #0
   348e0:	9a02      	ldr	r2, [sp, #8]
   348e2:	7013      	strb	r3, [r2, #0]
   348e4:	e7db      	b.n	3489e <sniprintf+0x16>
   348e6:	46c0      	nop			; (mov r8, r8)
   348e8:	20000124 	.word	0x20000124

000348ec <siprintf>:
   348ec:	b40e      	push	{r1, r2, r3}
   348ee:	b510      	push	{r4, lr}
   348f0:	b09d      	sub	sp, #116	; 0x74
   348f2:	a902      	add	r1, sp, #8
   348f4:	9002      	str	r0, [sp, #8]
   348f6:	6108      	str	r0, [r1, #16]
   348f8:	480b      	ldr	r0, [pc, #44]	; (34928 <siprintf+0x3c>)
   348fa:	2482      	movs	r4, #130	; 0x82
   348fc:	6088      	str	r0, [r1, #8]
   348fe:	6148      	str	r0, [r1, #20]
   34900:	2001      	movs	r0, #1
   34902:	4240      	negs	r0, r0
   34904:	ab1f      	add	r3, sp, #124	; 0x7c
   34906:	81c8      	strh	r0, [r1, #14]
   34908:	4808      	ldr	r0, [pc, #32]	; (3492c <siprintf+0x40>)
   3490a:	cb04      	ldmia	r3!, {r2}
   3490c:	00a4      	lsls	r4, r4, #2
   3490e:	6800      	ldr	r0, [r0, #0]
   34910:	9301      	str	r3, [sp, #4]
   34912:	818c      	strh	r4, [r1, #12]
   34914:	f000 fcdc 	bl	352d0 <_svfiprintf_r>
   34918:	2300      	movs	r3, #0
   3491a:	9a02      	ldr	r2, [sp, #8]
   3491c:	7013      	strb	r3, [r2, #0]
   3491e:	b01d      	add	sp, #116	; 0x74
   34920:	bc10      	pop	{r4}
   34922:	bc08      	pop	{r3}
   34924:	b003      	add	sp, #12
   34926:	4718      	bx	r3
   34928:	7fffffff 	.word	0x7fffffff
   3492c:	20000124 	.word	0x20000124

00034930 <strcasecmp>:
   34930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34932:	0007      	movs	r7, r0
   34934:	000e      	movs	r6, r1
   34936:	783c      	ldrb	r4, [r7, #0]
   34938:	f000 fbda 	bl	350f0 <__locale_ctype_ptr>
   3493c:	2203      	movs	r2, #3
   3493e:	1900      	adds	r0, r0, r4
   34940:	7843      	ldrb	r3, [r0, #1]
   34942:	4013      	ands	r3, r2
   34944:	2b01      	cmp	r3, #1
   34946:	d100      	bne.n	3494a <strcasecmp+0x1a>
   34948:	3420      	adds	r4, #32
   3494a:	7835      	ldrb	r5, [r6, #0]
   3494c:	f000 fbd0 	bl	350f0 <__locale_ctype_ptr>
   34950:	2203      	movs	r2, #3
   34952:	1940      	adds	r0, r0, r5
   34954:	7843      	ldrb	r3, [r0, #1]
   34956:	4013      	ands	r3, r2
   34958:	2b01      	cmp	r3, #1
   3495a:	d100      	bne.n	3495e <strcasecmp+0x2e>
   3495c:	3520      	adds	r5, #32
   3495e:	1b60      	subs	r0, r4, r5
   34960:	d103      	bne.n	3496a <strcasecmp+0x3a>
   34962:	3701      	adds	r7, #1
   34964:	3601      	adds	r6, #1
   34966:	2d00      	cmp	r5, #0
   34968:	d1e5      	bne.n	34936 <strcasecmp+0x6>
   3496a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003496c <strcat>:
   3496c:	0002      	movs	r2, r0
   3496e:	b510      	push	{r4, lr}
   34970:	7813      	ldrb	r3, [r2, #0]
   34972:	2b00      	cmp	r3, #0
   34974:	d105      	bne.n	34982 <strcat+0x16>
   34976:	5ccc      	ldrb	r4, [r1, r3]
   34978:	54d4      	strb	r4, [r2, r3]
   3497a:	3301      	adds	r3, #1
   3497c:	2c00      	cmp	r4, #0
   3497e:	d1fa      	bne.n	34976 <strcat+0xa>
   34980:	bd10      	pop	{r4, pc}
   34982:	3201      	adds	r2, #1
   34984:	e7f4      	b.n	34970 <strcat+0x4>

00034986 <strcmp>:
   34986:	7802      	ldrb	r2, [r0, #0]
   34988:	780b      	ldrb	r3, [r1, #0]
   3498a:	2a00      	cmp	r2, #0
   3498c:	d003      	beq.n	34996 <strcmp+0x10>
   3498e:	3001      	adds	r0, #1
   34990:	3101      	adds	r1, #1
   34992:	429a      	cmp	r2, r3
   34994:	d0f7      	beq.n	34986 <strcmp>
   34996:	1ad0      	subs	r0, r2, r3
   34998:	4770      	bx	lr

0003499a <strcpy>:
   3499a:	1c03      	adds	r3, r0, #0
   3499c:	780a      	ldrb	r2, [r1, #0]
   3499e:	3101      	adds	r1, #1
   349a0:	701a      	strb	r2, [r3, #0]
   349a2:	3301      	adds	r3, #1
   349a4:	2a00      	cmp	r2, #0
   349a6:	d1f9      	bne.n	3499c <strcpy+0x2>
   349a8:	4770      	bx	lr
	...

000349ac <strdup>:
   349ac:	b510      	push	{r4, lr}
   349ae:	4b03      	ldr	r3, [pc, #12]	; (349bc <strdup+0x10>)
   349b0:	0001      	movs	r1, r0
   349b2:	6818      	ldr	r0, [r3, #0]
   349b4:	f000 f804 	bl	349c0 <_strdup_r>
   349b8:	bd10      	pop	{r4, pc}
   349ba:	46c0      	nop			; (mov r8, r8)
   349bc:	20000124 	.word	0x20000124

000349c0 <_strdup_r>:
   349c0:	b570      	push	{r4, r5, r6, lr}
   349c2:	0005      	movs	r5, r0
   349c4:	0008      	movs	r0, r1
   349c6:	000e      	movs	r6, r1
   349c8:	f000 f80d 	bl	349e6 <strlen>
   349cc:	1c44      	adds	r4, r0, #1
   349ce:	0021      	movs	r1, r4
   349d0:	0028      	movs	r0, r5
   349d2:	f7ff fe7f 	bl	346d4 <_malloc_r>
   349d6:	1e05      	subs	r5, r0, #0
   349d8:	d003      	beq.n	349e2 <_strdup_r+0x22>
   349da:	0022      	movs	r2, r4
   349dc:	0031      	movs	r1, r6
   349de:	f7ff fe0b 	bl	345f8 <memcpy>
   349e2:	0028      	movs	r0, r5
   349e4:	bd70      	pop	{r4, r5, r6, pc}

000349e6 <strlen>:
   349e6:	2300      	movs	r3, #0
   349e8:	5cc2      	ldrb	r2, [r0, r3]
   349ea:	3301      	adds	r3, #1
   349ec:	2a00      	cmp	r2, #0
   349ee:	d1fb      	bne.n	349e8 <strlen+0x2>
   349f0:	1e58      	subs	r0, r3, #1
   349f2:	4770      	bx	lr

000349f4 <strncmp>:
   349f4:	2300      	movs	r3, #0
   349f6:	b530      	push	{r4, r5, lr}
   349f8:	429a      	cmp	r2, r3
   349fa:	d00a      	beq.n	34a12 <strncmp+0x1e>
   349fc:	3a01      	subs	r2, #1
   349fe:	5cc4      	ldrb	r4, [r0, r3]
   34a00:	5ccd      	ldrb	r5, [r1, r3]
   34a02:	42ac      	cmp	r4, r5
   34a04:	d104      	bne.n	34a10 <strncmp+0x1c>
   34a06:	429a      	cmp	r2, r3
   34a08:	d002      	beq.n	34a10 <strncmp+0x1c>
   34a0a:	3301      	adds	r3, #1
   34a0c:	2c00      	cmp	r4, #0
   34a0e:	d1f6      	bne.n	349fe <strncmp+0xa>
   34a10:	1b63      	subs	r3, r4, r5
   34a12:	0018      	movs	r0, r3
   34a14:	bd30      	pop	{r4, r5, pc}

00034a16 <strncpy>:
   34a16:	b570      	push	{r4, r5, r6, lr}
   34a18:	0004      	movs	r4, r0
   34a1a:	2a00      	cmp	r2, #0
   34a1c:	d100      	bne.n	34a20 <strncpy+0xa>
   34a1e:	bd70      	pop	{r4, r5, r6, pc}
   34a20:	780d      	ldrb	r5, [r1, #0]
   34a22:	1e56      	subs	r6, r2, #1
   34a24:	1c63      	adds	r3, r4, #1
   34a26:	7025      	strb	r5, [r4, #0]
   34a28:	3101      	adds	r1, #1
   34a2a:	2d00      	cmp	r5, #0
   34a2c:	d105      	bne.n	34a3a <strncpy+0x24>
   34a2e:	18a4      	adds	r4, r4, r2
   34a30:	429c      	cmp	r4, r3
   34a32:	d0f4      	beq.n	34a1e <strncpy+0x8>
   34a34:	701d      	strb	r5, [r3, #0]
   34a36:	3301      	adds	r3, #1
   34a38:	e7fa      	b.n	34a30 <strncpy+0x1a>
   34a3a:	001c      	movs	r4, r3
   34a3c:	0032      	movs	r2, r6
   34a3e:	e7ec      	b.n	34a1a <strncpy+0x4>

00034a40 <strrchr>:
   34a40:	b570      	push	{r4, r5, r6, lr}
   34a42:	000d      	movs	r5, r1
   34a44:	2400      	movs	r4, #0
   34a46:	2900      	cmp	r1, #0
   34a48:	d105      	bne.n	34a56 <strrchr+0x16>
   34a4a:	f000 ff19 	bl	35880 <strchr>
   34a4e:	0004      	movs	r4, r0
   34a50:	e006      	b.n	34a60 <strrchr+0x20>
   34a52:	001c      	movs	r4, r3
   34a54:	1c58      	adds	r0, r3, #1
   34a56:	0029      	movs	r1, r5
   34a58:	f000 ff12 	bl	35880 <strchr>
   34a5c:	1e03      	subs	r3, r0, #0
   34a5e:	d1f8      	bne.n	34a52 <strrchr+0x12>
   34a60:	0020      	movs	r0, r4
   34a62:	bd70      	pop	{r4, r5, r6, pc}

00034a64 <strstr>:
   34a64:	b510      	push	{r4, lr}
   34a66:	0002      	movs	r2, r0
   34a68:	7800      	ldrb	r0, [r0, #0]
   34a6a:	2800      	cmp	r0, #0
   34a6c:	d104      	bne.n	34a78 <strstr+0x14>
   34a6e:	7809      	ldrb	r1, [r1, #0]
   34a70:	2900      	cmp	r1, #0
   34a72:	d00d      	beq.n	34a90 <strstr+0x2c>
   34a74:	bd10      	pop	{r4, pc}
   34a76:	3201      	adds	r2, #1
   34a78:	7810      	ldrb	r0, [r2, #0]
   34a7a:	2800      	cmp	r0, #0
   34a7c:	d0fa      	beq.n	34a74 <strstr+0x10>
   34a7e:	2300      	movs	r3, #0
   34a80:	5cc8      	ldrb	r0, [r1, r3]
   34a82:	2800      	cmp	r0, #0
   34a84:	d004      	beq.n	34a90 <strstr+0x2c>
   34a86:	5cd4      	ldrb	r4, [r2, r3]
   34a88:	4284      	cmp	r4, r0
   34a8a:	d1f4      	bne.n	34a76 <strstr+0x12>
   34a8c:	3301      	adds	r3, #1
   34a8e:	e7f7      	b.n	34a80 <strstr+0x1c>
   34a90:	0010      	movs	r0, r2
   34a92:	e7ef      	b.n	34a74 <strstr+0x10>

00034a94 <_strtol_l.isra.0>:
   34a94:	b5f0      	push	{r4, r5, r6, r7, lr}
   34a96:	001f      	movs	r7, r3
   34a98:	000e      	movs	r6, r1
   34a9a:	b087      	sub	sp, #28
   34a9c:	9005      	str	r0, [sp, #20]
   34a9e:	9103      	str	r1, [sp, #12]
   34aa0:	9202      	str	r2, [sp, #8]
   34aa2:	980c      	ldr	r0, [sp, #48]	; 0x30
   34aa4:	7834      	ldrb	r4, [r6, #0]
   34aa6:	f000 fb20 	bl	350ea <__locale_ctype_ptr_l>
   34aaa:	2208      	movs	r2, #8
   34aac:	1900      	adds	r0, r0, r4
   34aae:	7843      	ldrb	r3, [r0, #1]
   34ab0:	1c75      	adds	r5, r6, #1
   34ab2:	4013      	ands	r3, r2
   34ab4:	d10c      	bne.n	34ad0 <_strtol_l.isra.0+0x3c>
   34ab6:	2c2d      	cmp	r4, #45	; 0x2d
   34ab8:	d10c      	bne.n	34ad4 <_strtol_l.isra.0+0x40>
   34aba:	3301      	adds	r3, #1
   34abc:	782c      	ldrb	r4, [r5, #0]
   34abe:	9301      	str	r3, [sp, #4]
   34ac0:	1cb5      	adds	r5, r6, #2
   34ac2:	2f00      	cmp	r7, #0
   34ac4:	d00c      	beq.n	34ae0 <_strtol_l.isra.0+0x4c>
   34ac6:	2f10      	cmp	r7, #16
   34ac8:	d114      	bne.n	34af4 <_strtol_l.isra.0+0x60>
   34aca:	2c30      	cmp	r4, #48	; 0x30
   34acc:	d00a      	beq.n	34ae4 <_strtol_l.isra.0+0x50>
   34ace:	e011      	b.n	34af4 <_strtol_l.isra.0+0x60>
   34ad0:	002e      	movs	r6, r5
   34ad2:	e7e6      	b.n	34aa2 <_strtol_l.isra.0+0xe>
   34ad4:	9301      	str	r3, [sp, #4]
   34ad6:	2c2b      	cmp	r4, #43	; 0x2b
   34ad8:	d1f3      	bne.n	34ac2 <_strtol_l.isra.0+0x2e>
   34ada:	782c      	ldrb	r4, [r5, #0]
   34adc:	1cb5      	adds	r5, r6, #2
   34ade:	e7f0      	b.n	34ac2 <_strtol_l.isra.0+0x2e>
   34ae0:	2c30      	cmp	r4, #48	; 0x30
   34ae2:	d12f      	bne.n	34b44 <_strtol_l.isra.0+0xb0>
   34ae4:	2220      	movs	r2, #32
   34ae6:	782b      	ldrb	r3, [r5, #0]
   34ae8:	4393      	bics	r3, r2
   34aea:	2b58      	cmp	r3, #88	; 0x58
   34aec:	d151      	bne.n	34b92 <_strtol_l.isra.0+0xfe>
   34aee:	2710      	movs	r7, #16
   34af0:	786c      	ldrb	r4, [r5, #1]
   34af2:	3502      	adds	r5, #2
   34af4:	9b01      	ldr	r3, [sp, #4]
   34af6:	4a29      	ldr	r2, [pc, #164]	; (34b9c <_strtol_l.isra.0+0x108>)
   34af8:	0039      	movs	r1, r7
   34afa:	189e      	adds	r6, r3, r2
   34afc:	0030      	movs	r0, r6
   34afe:	f7fd fe2f 	bl	32760 <__aeabi_uidivmod>
   34b02:	0030      	movs	r0, r6
   34b04:	9104      	str	r1, [sp, #16]
   34b06:	0039      	movs	r1, r7
   34b08:	f7fd fda4 	bl	32654 <__udivsi3>
   34b0c:	2101      	movs	r1, #1
   34b0e:	2300      	movs	r3, #0
   34b10:	4249      	negs	r1, r1
   34b12:	0002      	movs	r2, r0
   34b14:	468c      	mov	ip, r1
   34b16:	0018      	movs	r0, r3
   34b18:	0021      	movs	r1, r4
   34b1a:	3930      	subs	r1, #48	; 0x30
   34b1c:	2909      	cmp	r1, #9
   34b1e:	d813      	bhi.n	34b48 <_strtol_l.isra.0+0xb4>
   34b20:	000c      	movs	r4, r1
   34b22:	42a7      	cmp	r7, r4
   34b24:	dd1c      	ble.n	34b60 <_strtol_l.isra.0+0xcc>
   34b26:	1c59      	adds	r1, r3, #1
   34b28:	d009      	beq.n	34b3e <_strtol_l.isra.0+0xaa>
   34b2a:	4663      	mov	r3, ip
   34b2c:	4282      	cmp	r2, r0
   34b2e:	d306      	bcc.n	34b3e <_strtol_l.isra.0+0xaa>
   34b30:	d102      	bne.n	34b38 <_strtol_l.isra.0+0xa4>
   34b32:	9904      	ldr	r1, [sp, #16]
   34b34:	42a1      	cmp	r1, r4
   34b36:	db02      	blt.n	34b3e <_strtol_l.isra.0+0xaa>
   34b38:	2301      	movs	r3, #1
   34b3a:	4378      	muls	r0, r7
   34b3c:	1820      	adds	r0, r4, r0
   34b3e:	782c      	ldrb	r4, [r5, #0]
   34b40:	3501      	adds	r5, #1
   34b42:	e7e9      	b.n	34b18 <_strtol_l.isra.0+0x84>
   34b44:	270a      	movs	r7, #10
   34b46:	e7d5      	b.n	34af4 <_strtol_l.isra.0+0x60>
   34b48:	0021      	movs	r1, r4
   34b4a:	3941      	subs	r1, #65	; 0x41
   34b4c:	2919      	cmp	r1, #25
   34b4e:	d801      	bhi.n	34b54 <_strtol_l.isra.0+0xc0>
   34b50:	3c37      	subs	r4, #55	; 0x37
   34b52:	e7e6      	b.n	34b22 <_strtol_l.isra.0+0x8e>
   34b54:	0021      	movs	r1, r4
   34b56:	3961      	subs	r1, #97	; 0x61
   34b58:	2919      	cmp	r1, #25
   34b5a:	d801      	bhi.n	34b60 <_strtol_l.isra.0+0xcc>
   34b5c:	3c57      	subs	r4, #87	; 0x57
   34b5e:	e7e0      	b.n	34b22 <_strtol_l.isra.0+0x8e>
   34b60:	1c5a      	adds	r2, r3, #1
   34b62:	d108      	bne.n	34b76 <_strtol_l.isra.0+0xe2>
   34b64:	9a05      	ldr	r2, [sp, #20]
   34b66:	3323      	adds	r3, #35	; 0x23
   34b68:	6013      	str	r3, [r2, #0]
   34b6a:	9b02      	ldr	r3, [sp, #8]
   34b6c:	0030      	movs	r0, r6
   34b6e:	2b00      	cmp	r3, #0
   34b70:	d10b      	bne.n	34b8a <_strtol_l.isra.0+0xf6>
   34b72:	b007      	add	sp, #28
   34b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34b76:	9a01      	ldr	r2, [sp, #4]
   34b78:	2a00      	cmp	r2, #0
   34b7a:	d000      	beq.n	34b7e <_strtol_l.isra.0+0xea>
   34b7c:	4240      	negs	r0, r0
   34b7e:	9a02      	ldr	r2, [sp, #8]
   34b80:	2a00      	cmp	r2, #0
   34b82:	d0f6      	beq.n	34b72 <_strtol_l.isra.0+0xde>
   34b84:	9a03      	ldr	r2, [sp, #12]
   34b86:	2b00      	cmp	r3, #0
   34b88:	d000      	beq.n	34b8c <_strtol_l.isra.0+0xf8>
   34b8a:	1e6a      	subs	r2, r5, #1
   34b8c:	9b02      	ldr	r3, [sp, #8]
   34b8e:	601a      	str	r2, [r3, #0]
   34b90:	e7ef      	b.n	34b72 <_strtol_l.isra.0+0xde>
   34b92:	2430      	movs	r4, #48	; 0x30
   34b94:	2f00      	cmp	r7, #0
   34b96:	d1ad      	bne.n	34af4 <_strtol_l.isra.0+0x60>
   34b98:	3708      	adds	r7, #8
   34b9a:	e7ab      	b.n	34af4 <_strtol_l.isra.0+0x60>
   34b9c:	7fffffff 	.word	0x7fffffff

00034ba0 <strtol>:
   34ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   34ba2:	0013      	movs	r3, r2
   34ba4:	4a06      	ldr	r2, [pc, #24]	; (34bc0 <strtol+0x20>)
   34ba6:	0005      	movs	r5, r0
   34ba8:	6810      	ldr	r0, [r2, #0]
   34baa:	6a04      	ldr	r4, [r0, #32]
   34bac:	2c00      	cmp	r4, #0
   34bae:	d100      	bne.n	34bb2 <strtol+0x12>
   34bb0:	4c04      	ldr	r4, [pc, #16]	; (34bc4 <strtol+0x24>)
   34bb2:	000a      	movs	r2, r1
   34bb4:	9400      	str	r4, [sp, #0]
   34bb6:	0029      	movs	r1, r5
   34bb8:	f7ff ff6c 	bl	34a94 <_strtol_l.isra.0>
   34bbc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   34bbe:	46c0      	nop			; (mov r8, r8)
   34bc0:	20000124 	.word	0x20000124
   34bc4:	20000188 	.word	0x20000188

00034bc8 <_vsniprintf_r>:
   34bc8:	b530      	push	{r4, r5, lr}
   34bca:	0014      	movs	r4, r2
   34bcc:	b09b      	sub	sp, #108	; 0x6c
   34bce:	0005      	movs	r5, r0
   34bd0:	001a      	movs	r2, r3
   34bd2:	2c00      	cmp	r4, #0
   34bd4:	da05      	bge.n	34be2 <_vsniprintf_r+0x1a>
   34bd6:	238b      	movs	r3, #139	; 0x8b
   34bd8:	6003      	str	r3, [r0, #0]
   34bda:	2001      	movs	r0, #1
   34bdc:	4240      	negs	r0, r0
   34bde:	b01b      	add	sp, #108	; 0x6c
   34be0:	bd30      	pop	{r4, r5, pc}
   34be2:	2382      	movs	r3, #130	; 0x82
   34be4:	4668      	mov	r0, sp
   34be6:	009b      	lsls	r3, r3, #2
   34be8:	8183      	strh	r3, [r0, #12]
   34bea:	2300      	movs	r3, #0
   34bec:	9100      	str	r1, [sp, #0]
   34bee:	9104      	str	r1, [sp, #16]
   34bf0:	429c      	cmp	r4, r3
   34bf2:	d000      	beq.n	34bf6 <_vsniprintf_r+0x2e>
   34bf4:	1e63      	subs	r3, r4, #1
   34bf6:	9302      	str	r3, [sp, #8]
   34bf8:	9305      	str	r3, [sp, #20]
   34bfa:	2301      	movs	r3, #1
   34bfc:	4669      	mov	r1, sp
   34bfe:	425b      	negs	r3, r3
   34c00:	81cb      	strh	r3, [r1, #14]
   34c02:	0028      	movs	r0, r5
   34c04:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   34c06:	f000 fb63 	bl	352d0 <_svfiprintf_r>
   34c0a:	1c43      	adds	r3, r0, #1
   34c0c:	da01      	bge.n	34c12 <_vsniprintf_r+0x4a>
   34c0e:	238b      	movs	r3, #139	; 0x8b
   34c10:	602b      	str	r3, [r5, #0]
   34c12:	2c00      	cmp	r4, #0
   34c14:	d0e3      	beq.n	34bde <_vsniprintf_r+0x16>
   34c16:	2300      	movs	r3, #0
   34c18:	9a00      	ldr	r2, [sp, #0]
   34c1a:	7013      	strb	r3, [r2, #0]
   34c1c:	e7df      	b.n	34bde <_vsniprintf_r+0x16>
	...

00034c20 <vsniprintf>:
   34c20:	b507      	push	{r0, r1, r2, lr}
   34c22:	9300      	str	r3, [sp, #0]
   34c24:	0013      	movs	r3, r2
   34c26:	000a      	movs	r2, r1
   34c28:	0001      	movs	r1, r0
   34c2a:	4802      	ldr	r0, [pc, #8]	; (34c34 <vsniprintf+0x14>)
   34c2c:	6800      	ldr	r0, [r0, #0]
   34c2e:	f7ff ffcb 	bl	34bc8 <_vsniprintf_r>
   34c32:	bd0e      	pop	{r1, r2, r3, pc}
   34c34:	20000124 	.word	0x20000124

00034c38 <__swbuf_r>:
   34c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34c3a:	0005      	movs	r5, r0
   34c3c:	000e      	movs	r6, r1
   34c3e:	0014      	movs	r4, r2
   34c40:	2800      	cmp	r0, #0
   34c42:	d004      	beq.n	34c4e <__swbuf_r+0x16>
   34c44:	6983      	ldr	r3, [r0, #24]
   34c46:	2b00      	cmp	r3, #0
   34c48:	d101      	bne.n	34c4e <__swbuf_r+0x16>
   34c4a:	f000 f9b9 	bl	34fc0 <__sinit>
   34c4e:	4b22      	ldr	r3, [pc, #136]	; (34cd8 <__swbuf_r+0xa0>)
   34c50:	429c      	cmp	r4, r3
   34c52:	d12d      	bne.n	34cb0 <__swbuf_r+0x78>
   34c54:	686c      	ldr	r4, [r5, #4]
   34c56:	69a3      	ldr	r3, [r4, #24]
   34c58:	60a3      	str	r3, [r4, #8]
   34c5a:	89a3      	ldrh	r3, [r4, #12]
   34c5c:	071b      	lsls	r3, r3, #28
   34c5e:	d531      	bpl.n	34cc4 <__swbuf_r+0x8c>
   34c60:	6923      	ldr	r3, [r4, #16]
   34c62:	2b00      	cmp	r3, #0
   34c64:	d02e      	beq.n	34cc4 <__swbuf_r+0x8c>
   34c66:	6823      	ldr	r3, [r4, #0]
   34c68:	6922      	ldr	r2, [r4, #16]
   34c6a:	b2f7      	uxtb	r7, r6
   34c6c:	1a98      	subs	r0, r3, r2
   34c6e:	6963      	ldr	r3, [r4, #20]
   34c70:	b2f6      	uxtb	r6, r6
   34c72:	4298      	cmp	r0, r3
   34c74:	db05      	blt.n	34c82 <__swbuf_r+0x4a>
   34c76:	0021      	movs	r1, r4
   34c78:	0028      	movs	r0, r5
   34c7a:	f000 f933 	bl	34ee4 <_fflush_r>
   34c7e:	2800      	cmp	r0, #0
   34c80:	d126      	bne.n	34cd0 <__swbuf_r+0x98>
   34c82:	68a3      	ldr	r3, [r4, #8]
   34c84:	3001      	adds	r0, #1
   34c86:	3b01      	subs	r3, #1
   34c88:	60a3      	str	r3, [r4, #8]
   34c8a:	6823      	ldr	r3, [r4, #0]
   34c8c:	1c5a      	adds	r2, r3, #1
   34c8e:	6022      	str	r2, [r4, #0]
   34c90:	701f      	strb	r7, [r3, #0]
   34c92:	6963      	ldr	r3, [r4, #20]
   34c94:	4298      	cmp	r0, r3
   34c96:	d004      	beq.n	34ca2 <__swbuf_r+0x6a>
   34c98:	89a3      	ldrh	r3, [r4, #12]
   34c9a:	07db      	lsls	r3, r3, #31
   34c9c:	d51a      	bpl.n	34cd4 <__swbuf_r+0x9c>
   34c9e:	2e0a      	cmp	r6, #10
   34ca0:	d118      	bne.n	34cd4 <__swbuf_r+0x9c>
   34ca2:	0021      	movs	r1, r4
   34ca4:	0028      	movs	r0, r5
   34ca6:	f000 f91d 	bl	34ee4 <_fflush_r>
   34caa:	2800      	cmp	r0, #0
   34cac:	d012      	beq.n	34cd4 <__swbuf_r+0x9c>
   34cae:	e00f      	b.n	34cd0 <__swbuf_r+0x98>
   34cb0:	4b0a      	ldr	r3, [pc, #40]	; (34cdc <__swbuf_r+0xa4>)
   34cb2:	429c      	cmp	r4, r3
   34cb4:	d101      	bne.n	34cba <__swbuf_r+0x82>
   34cb6:	68ac      	ldr	r4, [r5, #8]
   34cb8:	e7cd      	b.n	34c56 <__swbuf_r+0x1e>
   34cba:	4b09      	ldr	r3, [pc, #36]	; (34ce0 <__swbuf_r+0xa8>)
   34cbc:	429c      	cmp	r4, r3
   34cbe:	d1ca      	bne.n	34c56 <__swbuf_r+0x1e>
   34cc0:	68ec      	ldr	r4, [r5, #12]
   34cc2:	e7c8      	b.n	34c56 <__swbuf_r+0x1e>
   34cc4:	0021      	movs	r1, r4
   34cc6:	0028      	movs	r0, r5
   34cc8:	f000 f80c 	bl	34ce4 <__swsetup_r>
   34ccc:	2800      	cmp	r0, #0
   34cce:	d0ca      	beq.n	34c66 <__swbuf_r+0x2e>
   34cd0:	2601      	movs	r6, #1
   34cd2:	4276      	negs	r6, r6
   34cd4:	0030      	movs	r0, r6
   34cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34cd8:	00039e14 	.word	0x00039e14
   34cdc:	00039e34 	.word	0x00039e34
   34ce0:	00039df4 	.word	0x00039df4

00034ce4 <__swsetup_r>:
   34ce4:	4b36      	ldr	r3, [pc, #216]	; (34dc0 <__swsetup_r+0xdc>)
   34ce6:	b570      	push	{r4, r5, r6, lr}
   34ce8:	681d      	ldr	r5, [r3, #0]
   34cea:	0006      	movs	r6, r0
   34cec:	000c      	movs	r4, r1
   34cee:	2d00      	cmp	r5, #0
   34cf0:	d005      	beq.n	34cfe <__swsetup_r+0x1a>
   34cf2:	69ab      	ldr	r3, [r5, #24]
   34cf4:	2b00      	cmp	r3, #0
   34cf6:	d102      	bne.n	34cfe <__swsetup_r+0x1a>
   34cf8:	0028      	movs	r0, r5
   34cfa:	f000 f961 	bl	34fc0 <__sinit>
   34cfe:	4b31      	ldr	r3, [pc, #196]	; (34dc4 <__swsetup_r+0xe0>)
   34d00:	429c      	cmp	r4, r3
   34d02:	d10f      	bne.n	34d24 <__swsetup_r+0x40>
   34d04:	686c      	ldr	r4, [r5, #4]
   34d06:	230c      	movs	r3, #12
   34d08:	5ee2      	ldrsh	r2, [r4, r3]
   34d0a:	b293      	uxth	r3, r2
   34d0c:	0719      	lsls	r1, r3, #28
   34d0e:	d42d      	bmi.n	34d6c <__swsetup_r+0x88>
   34d10:	06d9      	lsls	r1, r3, #27
   34d12:	d411      	bmi.n	34d38 <__swsetup_r+0x54>
   34d14:	2309      	movs	r3, #9
   34d16:	2001      	movs	r0, #1
   34d18:	6033      	str	r3, [r6, #0]
   34d1a:	3337      	adds	r3, #55	; 0x37
   34d1c:	4313      	orrs	r3, r2
   34d1e:	81a3      	strh	r3, [r4, #12]
   34d20:	4240      	negs	r0, r0
   34d22:	bd70      	pop	{r4, r5, r6, pc}
   34d24:	4b28      	ldr	r3, [pc, #160]	; (34dc8 <__swsetup_r+0xe4>)
   34d26:	429c      	cmp	r4, r3
   34d28:	d101      	bne.n	34d2e <__swsetup_r+0x4a>
   34d2a:	68ac      	ldr	r4, [r5, #8]
   34d2c:	e7eb      	b.n	34d06 <__swsetup_r+0x22>
   34d2e:	4b27      	ldr	r3, [pc, #156]	; (34dcc <__swsetup_r+0xe8>)
   34d30:	429c      	cmp	r4, r3
   34d32:	d1e8      	bne.n	34d06 <__swsetup_r+0x22>
   34d34:	68ec      	ldr	r4, [r5, #12]
   34d36:	e7e6      	b.n	34d06 <__swsetup_r+0x22>
   34d38:	075b      	lsls	r3, r3, #29
   34d3a:	d513      	bpl.n	34d64 <__swsetup_r+0x80>
   34d3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   34d3e:	2900      	cmp	r1, #0
   34d40:	d008      	beq.n	34d54 <__swsetup_r+0x70>
   34d42:	0023      	movs	r3, r4
   34d44:	3344      	adds	r3, #68	; 0x44
   34d46:	4299      	cmp	r1, r3
   34d48:	d002      	beq.n	34d50 <__swsetup_r+0x6c>
   34d4a:	0030      	movs	r0, r6
   34d4c:	f7ff fc78 	bl	34640 <_free_r>
   34d50:	2300      	movs	r3, #0
   34d52:	6363      	str	r3, [r4, #52]	; 0x34
   34d54:	2224      	movs	r2, #36	; 0x24
   34d56:	89a3      	ldrh	r3, [r4, #12]
   34d58:	4393      	bics	r3, r2
   34d5a:	81a3      	strh	r3, [r4, #12]
   34d5c:	2300      	movs	r3, #0
   34d5e:	6063      	str	r3, [r4, #4]
   34d60:	6923      	ldr	r3, [r4, #16]
   34d62:	6023      	str	r3, [r4, #0]
   34d64:	2308      	movs	r3, #8
   34d66:	89a2      	ldrh	r2, [r4, #12]
   34d68:	4313      	orrs	r3, r2
   34d6a:	81a3      	strh	r3, [r4, #12]
   34d6c:	6923      	ldr	r3, [r4, #16]
   34d6e:	2b00      	cmp	r3, #0
   34d70:	d10b      	bne.n	34d8a <__swsetup_r+0xa6>
   34d72:	21a0      	movs	r1, #160	; 0xa0
   34d74:	2280      	movs	r2, #128	; 0x80
   34d76:	89a3      	ldrh	r3, [r4, #12]
   34d78:	0089      	lsls	r1, r1, #2
   34d7a:	0092      	lsls	r2, r2, #2
   34d7c:	400b      	ands	r3, r1
   34d7e:	4293      	cmp	r3, r2
   34d80:	d003      	beq.n	34d8a <__swsetup_r+0xa6>
   34d82:	0021      	movs	r1, r4
   34d84:	0030      	movs	r0, r6
   34d86:	f000 f9e9 	bl	3515c <__smakebuf_r>
   34d8a:	2301      	movs	r3, #1
   34d8c:	89a2      	ldrh	r2, [r4, #12]
   34d8e:	4013      	ands	r3, r2
   34d90:	d011      	beq.n	34db6 <__swsetup_r+0xd2>
   34d92:	2300      	movs	r3, #0
   34d94:	60a3      	str	r3, [r4, #8]
   34d96:	6963      	ldr	r3, [r4, #20]
   34d98:	425b      	negs	r3, r3
   34d9a:	61a3      	str	r3, [r4, #24]
   34d9c:	2000      	movs	r0, #0
   34d9e:	6923      	ldr	r3, [r4, #16]
   34da0:	4283      	cmp	r3, r0
   34da2:	d1be      	bne.n	34d22 <__swsetup_r+0x3e>
   34da4:	230c      	movs	r3, #12
   34da6:	5ee2      	ldrsh	r2, [r4, r3]
   34da8:	0613      	lsls	r3, r2, #24
   34daa:	d5ba      	bpl.n	34d22 <__swsetup_r+0x3e>
   34dac:	2340      	movs	r3, #64	; 0x40
   34dae:	4313      	orrs	r3, r2
   34db0:	81a3      	strh	r3, [r4, #12]
   34db2:	3801      	subs	r0, #1
   34db4:	e7b5      	b.n	34d22 <__swsetup_r+0x3e>
   34db6:	0792      	lsls	r2, r2, #30
   34db8:	d400      	bmi.n	34dbc <__swsetup_r+0xd8>
   34dba:	6963      	ldr	r3, [r4, #20]
   34dbc:	60a3      	str	r3, [r4, #8]
   34dbe:	e7ed      	b.n	34d9c <__swsetup_r+0xb8>
   34dc0:	20000124 	.word	0x20000124
   34dc4:	00039e14 	.word	0x00039e14
   34dc8:	00039e34 	.word	0x00039e34
   34dcc:	00039df4 	.word	0x00039df4

00034dd0 <__sflush_r>:
   34dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34dd2:	898a      	ldrh	r2, [r1, #12]
   34dd4:	0005      	movs	r5, r0
   34dd6:	000c      	movs	r4, r1
   34dd8:	0713      	lsls	r3, r2, #28
   34dda:	d460      	bmi.n	34e9e <__sflush_r+0xce>
   34ddc:	684b      	ldr	r3, [r1, #4]
   34dde:	2b00      	cmp	r3, #0
   34de0:	dc04      	bgt.n	34dec <__sflush_r+0x1c>
   34de2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   34de4:	2b00      	cmp	r3, #0
   34de6:	dc01      	bgt.n	34dec <__sflush_r+0x1c>
   34de8:	2000      	movs	r0, #0
   34dea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   34dec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   34dee:	2f00      	cmp	r7, #0
   34df0:	d0fa      	beq.n	34de8 <__sflush_r+0x18>
   34df2:	2300      	movs	r3, #0
   34df4:	682e      	ldr	r6, [r5, #0]
   34df6:	602b      	str	r3, [r5, #0]
   34df8:	2380      	movs	r3, #128	; 0x80
   34dfa:	015b      	lsls	r3, r3, #5
   34dfc:	401a      	ands	r2, r3
   34dfe:	d034      	beq.n	34e6a <__sflush_r+0x9a>
   34e00:	6d60      	ldr	r0, [r4, #84]	; 0x54
   34e02:	89a3      	ldrh	r3, [r4, #12]
   34e04:	075b      	lsls	r3, r3, #29
   34e06:	d506      	bpl.n	34e16 <__sflush_r+0x46>
   34e08:	6863      	ldr	r3, [r4, #4]
   34e0a:	1ac0      	subs	r0, r0, r3
   34e0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   34e0e:	2b00      	cmp	r3, #0
   34e10:	d001      	beq.n	34e16 <__sflush_r+0x46>
   34e12:	6c23      	ldr	r3, [r4, #64]	; 0x40
   34e14:	1ac0      	subs	r0, r0, r3
   34e16:	0002      	movs	r2, r0
   34e18:	6a21      	ldr	r1, [r4, #32]
   34e1a:	2300      	movs	r3, #0
   34e1c:	0028      	movs	r0, r5
   34e1e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   34e20:	47b8      	blx	r7
   34e22:	89a1      	ldrh	r1, [r4, #12]
   34e24:	1c43      	adds	r3, r0, #1
   34e26:	d106      	bne.n	34e36 <__sflush_r+0x66>
   34e28:	682b      	ldr	r3, [r5, #0]
   34e2a:	2b1d      	cmp	r3, #29
   34e2c:	d831      	bhi.n	34e92 <__sflush_r+0xc2>
   34e2e:	4a2c      	ldr	r2, [pc, #176]	; (34ee0 <__sflush_r+0x110>)
   34e30:	40da      	lsrs	r2, r3
   34e32:	07d3      	lsls	r3, r2, #31
   34e34:	d52d      	bpl.n	34e92 <__sflush_r+0xc2>
   34e36:	2300      	movs	r3, #0
   34e38:	6063      	str	r3, [r4, #4]
   34e3a:	6923      	ldr	r3, [r4, #16]
   34e3c:	6023      	str	r3, [r4, #0]
   34e3e:	04cb      	lsls	r3, r1, #19
   34e40:	d505      	bpl.n	34e4e <__sflush_r+0x7e>
   34e42:	1c43      	adds	r3, r0, #1
   34e44:	d102      	bne.n	34e4c <__sflush_r+0x7c>
   34e46:	682b      	ldr	r3, [r5, #0]
   34e48:	2b00      	cmp	r3, #0
   34e4a:	d100      	bne.n	34e4e <__sflush_r+0x7e>
   34e4c:	6560      	str	r0, [r4, #84]	; 0x54
   34e4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   34e50:	602e      	str	r6, [r5, #0]
   34e52:	2900      	cmp	r1, #0
   34e54:	d0c8      	beq.n	34de8 <__sflush_r+0x18>
   34e56:	0023      	movs	r3, r4
   34e58:	3344      	adds	r3, #68	; 0x44
   34e5a:	4299      	cmp	r1, r3
   34e5c:	d002      	beq.n	34e64 <__sflush_r+0x94>
   34e5e:	0028      	movs	r0, r5
   34e60:	f7ff fbee 	bl	34640 <_free_r>
   34e64:	2000      	movs	r0, #0
   34e66:	6360      	str	r0, [r4, #52]	; 0x34
   34e68:	e7bf      	b.n	34dea <__sflush_r+0x1a>
   34e6a:	2301      	movs	r3, #1
   34e6c:	6a21      	ldr	r1, [r4, #32]
   34e6e:	0028      	movs	r0, r5
   34e70:	47b8      	blx	r7
   34e72:	1c43      	adds	r3, r0, #1
   34e74:	d1c5      	bne.n	34e02 <__sflush_r+0x32>
   34e76:	682b      	ldr	r3, [r5, #0]
   34e78:	2b00      	cmp	r3, #0
   34e7a:	d0c2      	beq.n	34e02 <__sflush_r+0x32>
   34e7c:	2b1d      	cmp	r3, #29
   34e7e:	d001      	beq.n	34e84 <__sflush_r+0xb4>
   34e80:	2b16      	cmp	r3, #22
   34e82:	d101      	bne.n	34e88 <__sflush_r+0xb8>
   34e84:	602e      	str	r6, [r5, #0]
   34e86:	e7af      	b.n	34de8 <__sflush_r+0x18>
   34e88:	2340      	movs	r3, #64	; 0x40
   34e8a:	89a2      	ldrh	r2, [r4, #12]
   34e8c:	4313      	orrs	r3, r2
   34e8e:	81a3      	strh	r3, [r4, #12]
   34e90:	e7ab      	b.n	34dea <__sflush_r+0x1a>
   34e92:	2340      	movs	r3, #64	; 0x40
   34e94:	430b      	orrs	r3, r1
   34e96:	2001      	movs	r0, #1
   34e98:	81a3      	strh	r3, [r4, #12]
   34e9a:	4240      	negs	r0, r0
   34e9c:	e7a5      	b.n	34dea <__sflush_r+0x1a>
   34e9e:	690f      	ldr	r7, [r1, #16]
   34ea0:	2f00      	cmp	r7, #0
   34ea2:	d0a1      	beq.n	34de8 <__sflush_r+0x18>
   34ea4:	680b      	ldr	r3, [r1, #0]
   34ea6:	600f      	str	r7, [r1, #0]
   34ea8:	1bdb      	subs	r3, r3, r7
   34eaa:	9301      	str	r3, [sp, #4]
   34eac:	2300      	movs	r3, #0
   34eae:	0792      	lsls	r2, r2, #30
   34eb0:	d100      	bne.n	34eb4 <__sflush_r+0xe4>
   34eb2:	694b      	ldr	r3, [r1, #20]
   34eb4:	60a3      	str	r3, [r4, #8]
   34eb6:	9b01      	ldr	r3, [sp, #4]
   34eb8:	2b00      	cmp	r3, #0
   34eba:	dc00      	bgt.n	34ebe <__sflush_r+0xee>
   34ebc:	e794      	b.n	34de8 <__sflush_r+0x18>
   34ebe:	9b01      	ldr	r3, [sp, #4]
   34ec0:	003a      	movs	r2, r7
   34ec2:	6a21      	ldr	r1, [r4, #32]
   34ec4:	0028      	movs	r0, r5
   34ec6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   34ec8:	47b0      	blx	r6
   34eca:	2800      	cmp	r0, #0
   34ecc:	dc03      	bgt.n	34ed6 <__sflush_r+0x106>
   34ece:	2340      	movs	r3, #64	; 0x40
   34ed0:	89a2      	ldrh	r2, [r4, #12]
   34ed2:	4313      	orrs	r3, r2
   34ed4:	e7df      	b.n	34e96 <__sflush_r+0xc6>
   34ed6:	9b01      	ldr	r3, [sp, #4]
   34ed8:	183f      	adds	r7, r7, r0
   34eda:	1a1b      	subs	r3, r3, r0
   34edc:	9301      	str	r3, [sp, #4]
   34ede:	e7ea      	b.n	34eb6 <__sflush_r+0xe6>
   34ee0:	20400001 	.word	0x20400001

00034ee4 <_fflush_r>:
   34ee4:	690b      	ldr	r3, [r1, #16]
   34ee6:	b570      	push	{r4, r5, r6, lr}
   34ee8:	0005      	movs	r5, r0
   34eea:	000c      	movs	r4, r1
   34eec:	2b00      	cmp	r3, #0
   34eee:	d101      	bne.n	34ef4 <_fflush_r+0x10>
   34ef0:	2000      	movs	r0, #0
   34ef2:	bd70      	pop	{r4, r5, r6, pc}
   34ef4:	2800      	cmp	r0, #0
   34ef6:	d004      	beq.n	34f02 <_fflush_r+0x1e>
   34ef8:	6983      	ldr	r3, [r0, #24]
   34efa:	2b00      	cmp	r3, #0
   34efc:	d101      	bne.n	34f02 <_fflush_r+0x1e>
   34efe:	f000 f85f 	bl	34fc0 <__sinit>
   34f02:	4b0b      	ldr	r3, [pc, #44]	; (34f30 <_fflush_r+0x4c>)
   34f04:	429c      	cmp	r4, r3
   34f06:	d109      	bne.n	34f1c <_fflush_r+0x38>
   34f08:	686c      	ldr	r4, [r5, #4]
   34f0a:	220c      	movs	r2, #12
   34f0c:	5ea3      	ldrsh	r3, [r4, r2]
   34f0e:	2b00      	cmp	r3, #0
   34f10:	d0ee      	beq.n	34ef0 <_fflush_r+0xc>
   34f12:	0021      	movs	r1, r4
   34f14:	0028      	movs	r0, r5
   34f16:	f7ff ff5b 	bl	34dd0 <__sflush_r>
   34f1a:	e7ea      	b.n	34ef2 <_fflush_r+0xe>
   34f1c:	4b05      	ldr	r3, [pc, #20]	; (34f34 <_fflush_r+0x50>)
   34f1e:	429c      	cmp	r4, r3
   34f20:	d101      	bne.n	34f26 <_fflush_r+0x42>
   34f22:	68ac      	ldr	r4, [r5, #8]
   34f24:	e7f1      	b.n	34f0a <_fflush_r+0x26>
   34f26:	4b04      	ldr	r3, [pc, #16]	; (34f38 <_fflush_r+0x54>)
   34f28:	429c      	cmp	r4, r3
   34f2a:	d1ee      	bne.n	34f0a <_fflush_r+0x26>
   34f2c:	68ec      	ldr	r4, [r5, #12]
   34f2e:	e7ec      	b.n	34f0a <_fflush_r+0x26>
   34f30:	00039e14 	.word	0x00039e14
   34f34:	00039e34 	.word	0x00039e34
   34f38:	00039df4 	.word	0x00039df4

00034f3c <_cleanup_r>:
   34f3c:	b510      	push	{r4, lr}
   34f3e:	4902      	ldr	r1, [pc, #8]	; (34f48 <_cleanup_r+0xc>)
   34f40:	f000 f8b2 	bl	350a8 <_fwalk_reent>
   34f44:	bd10      	pop	{r4, pc}
   34f46:	46c0      	nop			; (mov r8, r8)
   34f48:	00034ee5 	.word	0x00034ee5

00034f4c <std.isra.0>:
   34f4c:	2300      	movs	r3, #0
   34f4e:	b510      	push	{r4, lr}
   34f50:	0004      	movs	r4, r0
   34f52:	6003      	str	r3, [r0, #0]
   34f54:	6043      	str	r3, [r0, #4]
   34f56:	6083      	str	r3, [r0, #8]
   34f58:	8181      	strh	r1, [r0, #12]
   34f5a:	6643      	str	r3, [r0, #100]	; 0x64
   34f5c:	81c2      	strh	r2, [r0, #14]
   34f5e:	6103      	str	r3, [r0, #16]
   34f60:	6143      	str	r3, [r0, #20]
   34f62:	6183      	str	r3, [r0, #24]
   34f64:	0019      	movs	r1, r3
   34f66:	2208      	movs	r2, #8
   34f68:	305c      	adds	r0, #92	; 0x5c
   34f6a:	f7ff fb60 	bl	3462e <memset>
   34f6e:	4b05      	ldr	r3, [pc, #20]	; (34f84 <std.isra.0+0x38>)
   34f70:	6224      	str	r4, [r4, #32]
   34f72:	6263      	str	r3, [r4, #36]	; 0x24
   34f74:	4b04      	ldr	r3, [pc, #16]	; (34f88 <std.isra.0+0x3c>)
   34f76:	62a3      	str	r3, [r4, #40]	; 0x28
   34f78:	4b04      	ldr	r3, [pc, #16]	; (34f8c <std.isra.0+0x40>)
   34f7a:	62e3      	str	r3, [r4, #44]	; 0x2c
   34f7c:	4b04      	ldr	r3, [pc, #16]	; (34f90 <std.isra.0+0x44>)
   34f7e:	6323      	str	r3, [r4, #48]	; 0x30
   34f80:	bd10      	pop	{r4, pc}
   34f82:	46c0      	nop			; (mov r8, r8)
   34f84:	000357e9 	.word	0x000357e9
   34f88:	00035811 	.word	0x00035811
   34f8c:	00035849 	.word	0x00035849
   34f90:	00035875 	.word	0x00035875

00034f94 <__sfmoreglue>:
   34f94:	b570      	push	{r4, r5, r6, lr}
   34f96:	2568      	movs	r5, #104	; 0x68
   34f98:	1e4a      	subs	r2, r1, #1
   34f9a:	4355      	muls	r5, r2
   34f9c:	000e      	movs	r6, r1
   34f9e:	0029      	movs	r1, r5
   34fa0:	3174      	adds	r1, #116	; 0x74
   34fa2:	f7ff fb97 	bl	346d4 <_malloc_r>
   34fa6:	1e04      	subs	r4, r0, #0
   34fa8:	d008      	beq.n	34fbc <__sfmoreglue+0x28>
   34faa:	2100      	movs	r1, #0
   34fac:	002a      	movs	r2, r5
   34fae:	6001      	str	r1, [r0, #0]
   34fb0:	6046      	str	r6, [r0, #4]
   34fb2:	300c      	adds	r0, #12
   34fb4:	60a0      	str	r0, [r4, #8]
   34fb6:	3268      	adds	r2, #104	; 0x68
   34fb8:	f7ff fb39 	bl	3462e <memset>
   34fbc:	0020      	movs	r0, r4
   34fbe:	bd70      	pop	{r4, r5, r6, pc}

00034fc0 <__sinit>:
   34fc0:	6983      	ldr	r3, [r0, #24]
   34fc2:	b513      	push	{r0, r1, r4, lr}
   34fc4:	0004      	movs	r4, r0
   34fc6:	2b00      	cmp	r3, #0
   34fc8:	d128      	bne.n	3501c <__sinit+0x5c>
   34fca:	6483      	str	r3, [r0, #72]	; 0x48
   34fcc:	64c3      	str	r3, [r0, #76]	; 0x4c
   34fce:	6503      	str	r3, [r0, #80]	; 0x50
   34fd0:	4b13      	ldr	r3, [pc, #76]	; (35020 <__sinit+0x60>)
   34fd2:	4a14      	ldr	r2, [pc, #80]	; (35024 <__sinit+0x64>)
   34fd4:	681b      	ldr	r3, [r3, #0]
   34fd6:	6282      	str	r2, [r0, #40]	; 0x28
   34fd8:	9301      	str	r3, [sp, #4]
   34fda:	4298      	cmp	r0, r3
   34fdc:	d101      	bne.n	34fe2 <__sinit+0x22>
   34fde:	2301      	movs	r3, #1
   34fe0:	6183      	str	r3, [r0, #24]
   34fe2:	0020      	movs	r0, r4
   34fe4:	f000 f820 	bl	35028 <__sfp>
   34fe8:	6060      	str	r0, [r4, #4]
   34fea:	0020      	movs	r0, r4
   34fec:	f000 f81c 	bl	35028 <__sfp>
   34ff0:	60a0      	str	r0, [r4, #8]
   34ff2:	0020      	movs	r0, r4
   34ff4:	f000 f818 	bl	35028 <__sfp>
   34ff8:	2200      	movs	r2, #0
   34ffa:	60e0      	str	r0, [r4, #12]
   34ffc:	2104      	movs	r1, #4
   34ffe:	6860      	ldr	r0, [r4, #4]
   35000:	f7ff ffa4 	bl	34f4c <std.isra.0>
   35004:	2201      	movs	r2, #1
   35006:	2109      	movs	r1, #9
   35008:	68a0      	ldr	r0, [r4, #8]
   3500a:	f7ff ff9f 	bl	34f4c <std.isra.0>
   3500e:	2202      	movs	r2, #2
   35010:	2112      	movs	r1, #18
   35012:	68e0      	ldr	r0, [r4, #12]
   35014:	f7ff ff9a 	bl	34f4c <std.isra.0>
   35018:	2301      	movs	r3, #1
   3501a:	61a3      	str	r3, [r4, #24]
   3501c:	bd13      	pop	{r0, r1, r4, pc}
   3501e:	46c0      	nop			; (mov r8, r8)
   35020:	00039df0 	.word	0x00039df0
   35024:	00034f3d 	.word	0x00034f3d

00035028 <__sfp>:
   35028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3502a:	4b1e      	ldr	r3, [pc, #120]	; (350a4 <__sfp+0x7c>)
   3502c:	0007      	movs	r7, r0
   3502e:	681e      	ldr	r6, [r3, #0]
   35030:	69b3      	ldr	r3, [r6, #24]
   35032:	2b00      	cmp	r3, #0
   35034:	d102      	bne.n	3503c <__sfp+0x14>
   35036:	0030      	movs	r0, r6
   35038:	f7ff ffc2 	bl	34fc0 <__sinit>
   3503c:	3648      	adds	r6, #72	; 0x48
   3503e:	68b4      	ldr	r4, [r6, #8]
   35040:	6873      	ldr	r3, [r6, #4]
   35042:	3b01      	subs	r3, #1
   35044:	d504      	bpl.n	35050 <__sfp+0x28>
   35046:	6833      	ldr	r3, [r6, #0]
   35048:	2b00      	cmp	r3, #0
   3504a:	d007      	beq.n	3505c <__sfp+0x34>
   3504c:	6836      	ldr	r6, [r6, #0]
   3504e:	e7f6      	b.n	3503e <__sfp+0x16>
   35050:	220c      	movs	r2, #12
   35052:	5ea5      	ldrsh	r5, [r4, r2]
   35054:	2d00      	cmp	r5, #0
   35056:	d00d      	beq.n	35074 <__sfp+0x4c>
   35058:	3468      	adds	r4, #104	; 0x68
   3505a:	e7f2      	b.n	35042 <__sfp+0x1a>
   3505c:	2104      	movs	r1, #4
   3505e:	0038      	movs	r0, r7
   35060:	f7ff ff98 	bl	34f94 <__sfmoreglue>
   35064:	6030      	str	r0, [r6, #0]
   35066:	2800      	cmp	r0, #0
   35068:	d1f0      	bne.n	3504c <__sfp+0x24>
   3506a:	230c      	movs	r3, #12
   3506c:	0004      	movs	r4, r0
   3506e:	603b      	str	r3, [r7, #0]
   35070:	0020      	movs	r0, r4
   35072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35074:	2301      	movs	r3, #1
   35076:	0020      	movs	r0, r4
   35078:	425b      	negs	r3, r3
   3507a:	81e3      	strh	r3, [r4, #14]
   3507c:	3302      	adds	r3, #2
   3507e:	81a3      	strh	r3, [r4, #12]
   35080:	6665      	str	r5, [r4, #100]	; 0x64
   35082:	6025      	str	r5, [r4, #0]
   35084:	60a5      	str	r5, [r4, #8]
   35086:	6065      	str	r5, [r4, #4]
   35088:	6125      	str	r5, [r4, #16]
   3508a:	6165      	str	r5, [r4, #20]
   3508c:	61a5      	str	r5, [r4, #24]
   3508e:	2208      	movs	r2, #8
   35090:	0029      	movs	r1, r5
   35092:	305c      	adds	r0, #92	; 0x5c
   35094:	f7ff facb 	bl	3462e <memset>
   35098:	6365      	str	r5, [r4, #52]	; 0x34
   3509a:	63a5      	str	r5, [r4, #56]	; 0x38
   3509c:	64a5      	str	r5, [r4, #72]	; 0x48
   3509e:	64e5      	str	r5, [r4, #76]	; 0x4c
   350a0:	e7e6      	b.n	35070 <__sfp+0x48>
   350a2:	46c0      	nop			; (mov r8, r8)
   350a4:	00039df0 	.word	0x00039df0

000350a8 <_fwalk_reent>:
   350a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   350aa:	0004      	movs	r4, r0
   350ac:	0007      	movs	r7, r0
   350ae:	2600      	movs	r6, #0
   350b0:	9101      	str	r1, [sp, #4]
   350b2:	3448      	adds	r4, #72	; 0x48
   350b4:	2c00      	cmp	r4, #0
   350b6:	d101      	bne.n	350bc <_fwalk_reent+0x14>
   350b8:	0030      	movs	r0, r6
   350ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   350bc:	6863      	ldr	r3, [r4, #4]
   350be:	68a5      	ldr	r5, [r4, #8]
   350c0:	9300      	str	r3, [sp, #0]
   350c2:	9b00      	ldr	r3, [sp, #0]
   350c4:	3b01      	subs	r3, #1
   350c6:	9300      	str	r3, [sp, #0]
   350c8:	d501      	bpl.n	350ce <_fwalk_reent+0x26>
   350ca:	6824      	ldr	r4, [r4, #0]
   350cc:	e7f2      	b.n	350b4 <_fwalk_reent+0xc>
   350ce:	89ab      	ldrh	r3, [r5, #12]
   350d0:	2b01      	cmp	r3, #1
   350d2:	d908      	bls.n	350e6 <_fwalk_reent+0x3e>
   350d4:	220e      	movs	r2, #14
   350d6:	5eab      	ldrsh	r3, [r5, r2]
   350d8:	3301      	adds	r3, #1
   350da:	d004      	beq.n	350e6 <_fwalk_reent+0x3e>
   350dc:	0029      	movs	r1, r5
   350de:	0038      	movs	r0, r7
   350e0:	9b01      	ldr	r3, [sp, #4]
   350e2:	4798      	blx	r3
   350e4:	4306      	orrs	r6, r0
   350e6:	3568      	adds	r5, #104	; 0x68
   350e8:	e7eb      	b.n	350c2 <_fwalk_reent+0x1a>

000350ea <__locale_ctype_ptr_l>:
   350ea:	30ec      	adds	r0, #236	; 0xec
   350ec:	6800      	ldr	r0, [r0, #0]
   350ee:	4770      	bx	lr

000350f0 <__locale_ctype_ptr>:
   350f0:	4b04      	ldr	r3, [pc, #16]	; (35104 <__locale_ctype_ptr+0x14>)
   350f2:	681b      	ldr	r3, [r3, #0]
   350f4:	6a1b      	ldr	r3, [r3, #32]
   350f6:	2b00      	cmp	r3, #0
   350f8:	d100      	bne.n	350fc <__locale_ctype_ptr+0xc>
   350fa:	4b03      	ldr	r3, [pc, #12]	; (35108 <__locale_ctype_ptr+0x18>)
   350fc:	33ec      	adds	r3, #236	; 0xec
   350fe:	6818      	ldr	r0, [r3, #0]
   35100:	4770      	bx	lr
   35102:	46c0      	nop			; (mov r8, r8)
   35104:	20000124 	.word	0x20000124
   35108:	20000188 	.word	0x20000188

0003510c <__swhatbuf_r>:
   3510c:	b570      	push	{r4, r5, r6, lr}
   3510e:	000e      	movs	r6, r1
   35110:	001d      	movs	r5, r3
   35112:	230e      	movs	r3, #14
   35114:	5ec9      	ldrsh	r1, [r1, r3]
   35116:	b090      	sub	sp, #64	; 0x40
   35118:	0014      	movs	r4, r2
   3511a:	2900      	cmp	r1, #0
   3511c:	da07      	bge.n	3512e <__swhatbuf_r+0x22>
   3511e:	2300      	movs	r3, #0
   35120:	602b      	str	r3, [r5, #0]
   35122:	89b3      	ldrh	r3, [r6, #12]
   35124:	061b      	lsls	r3, r3, #24
   35126:	d411      	bmi.n	3514c <__swhatbuf_r+0x40>
   35128:	2380      	movs	r3, #128	; 0x80
   3512a:	00db      	lsls	r3, r3, #3
   3512c:	e00f      	b.n	3514e <__swhatbuf_r+0x42>
   3512e:	aa01      	add	r2, sp, #4
   35130:	f000 fbe6 	bl	35900 <_fstat_r>
   35134:	2800      	cmp	r0, #0
   35136:	dbf2      	blt.n	3511e <__swhatbuf_r+0x12>
   35138:	22f0      	movs	r2, #240	; 0xf0
   3513a:	9b02      	ldr	r3, [sp, #8]
   3513c:	0212      	lsls	r2, r2, #8
   3513e:	4013      	ands	r3, r2
   35140:	4a05      	ldr	r2, [pc, #20]	; (35158 <__swhatbuf_r+0x4c>)
   35142:	189b      	adds	r3, r3, r2
   35144:	425a      	negs	r2, r3
   35146:	4153      	adcs	r3, r2
   35148:	602b      	str	r3, [r5, #0]
   3514a:	e7ed      	b.n	35128 <__swhatbuf_r+0x1c>
   3514c:	2340      	movs	r3, #64	; 0x40
   3514e:	2000      	movs	r0, #0
   35150:	6023      	str	r3, [r4, #0]
   35152:	b010      	add	sp, #64	; 0x40
   35154:	bd70      	pop	{r4, r5, r6, pc}
   35156:	46c0      	nop			; (mov r8, r8)
   35158:	ffffe000 	.word	0xffffe000

0003515c <__smakebuf_r>:
   3515c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3515e:	2602      	movs	r6, #2
   35160:	898b      	ldrh	r3, [r1, #12]
   35162:	0005      	movs	r5, r0
   35164:	000c      	movs	r4, r1
   35166:	4233      	tst	r3, r6
   35168:	d006      	beq.n	35178 <__smakebuf_r+0x1c>
   3516a:	0023      	movs	r3, r4
   3516c:	3347      	adds	r3, #71	; 0x47
   3516e:	6023      	str	r3, [r4, #0]
   35170:	6123      	str	r3, [r4, #16]
   35172:	2301      	movs	r3, #1
   35174:	6163      	str	r3, [r4, #20]
   35176:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   35178:	ab01      	add	r3, sp, #4
   3517a:	466a      	mov	r2, sp
   3517c:	f7ff ffc6 	bl	3510c <__swhatbuf_r>
   35180:	9900      	ldr	r1, [sp, #0]
   35182:	0007      	movs	r7, r0
   35184:	0028      	movs	r0, r5
   35186:	f7ff faa5 	bl	346d4 <_malloc_r>
   3518a:	2800      	cmp	r0, #0
   3518c:	d108      	bne.n	351a0 <__smakebuf_r+0x44>
   3518e:	220c      	movs	r2, #12
   35190:	5ea3      	ldrsh	r3, [r4, r2]
   35192:	059a      	lsls	r2, r3, #22
   35194:	d4ef      	bmi.n	35176 <__smakebuf_r+0x1a>
   35196:	2203      	movs	r2, #3
   35198:	4393      	bics	r3, r2
   3519a:	431e      	orrs	r6, r3
   3519c:	81a6      	strh	r6, [r4, #12]
   3519e:	e7e4      	b.n	3516a <__smakebuf_r+0xe>
   351a0:	4b0f      	ldr	r3, [pc, #60]	; (351e0 <__smakebuf_r+0x84>)
   351a2:	62ab      	str	r3, [r5, #40]	; 0x28
   351a4:	2380      	movs	r3, #128	; 0x80
   351a6:	89a2      	ldrh	r2, [r4, #12]
   351a8:	6020      	str	r0, [r4, #0]
   351aa:	4313      	orrs	r3, r2
   351ac:	81a3      	strh	r3, [r4, #12]
   351ae:	9b00      	ldr	r3, [sp, #0]
   351b0:	6120      	str	r0, [r4, #16]
   351b2:	6163      	str	r3, [r4, #20]
   351b4:	9b01      	ldr	r3, [sp, #4]
   351b6:	2b00      	cmp	r3, #0
   351b8:	d00d      	beq.n	351d6 <__smakebuf_r+0x7a>
   351ba:	230e      	movs	r3, #14
   351bc:	5ee1      	ldrsh	r1, [r4, r3]
   351be:	0028      	movs	r0, r5
   351c0:	f000 fbb0 	bl	35924 <_isatty_r>
   351c4:	2800      	cmp	r0, #0
   351c6:	d006      	beq.n	351d6 <__smakebuf_r+0x7a>
   351c8:	2203      	movs	r2, #3
   351ca:	89a3      	ldrh	r3, [r4, #12]
   351cc:	4393      	bics	r3, r2
   351ce:	001a      	movs	r2, r3
   351d0:	2301      	movs	r3, #1
   351d2:	4313      	orrs	r3, r2
   351d4:	81a3      	strh	r3, [r4, #12]
   351d6:	89a0      	ldrh	r0, [r4, #12]
   351d8:	4338      	orrs	r0, r7
   351da:	81a0      	strh	r0, [r4, #12]
   351dc:	e7cb      	b.n	35176 <__smakebuf_r+0x1a>
   351de:	46c0      	nop			; (mov r8, r8)
   351e0:	00034f3d 	.word	0x00034f3d

000351e4 <__ascii_mbtowc>:
   351e4:	b082      	sub	sp, #8
   351e6:	2900      	cmp	r1, #0
   351e8:	d100      	bne.n	351ec <__ascii_mbtowc+0x8>
   351ea:	a901      	add	r1, sp, #4
   351ec:	1e10      	subs	r0, r2, #0
   351ee:	d006      	beq.n	351fe <__ascii_mbtowc+0x1a>
   351f0:	2b00      	cmp	r3, #0
   351f2:	d006      	beq.n	35202 <__ascii_mbtowc+0x1e>
   351f4:	7813      	ldrb	r3, [r2, #0]
   351f6:	600b      	str	r3, [r1, #0]
   351f8:	7810      	ldrb	r0, [r2, #0]
   351fa:	1e43      	subs	r3, r0, #1
   351fc:	4198      	sbcs	r0, r3
   351fe:	b002      	add	sp, #8
   35200:	4770      	bx	lr
   35202:	2002      	movs	r0, #2
   35204:	4240      	negs	r0, r0
   35206:	e7fa      	b.n	351fe <__ascii_mbtowc+0x1a>

00035208 <__malloc_lock>:
   35208:	4770      	bx	lr

0003520a <__malloc_unlock>:
   3520a:	4770      	bx	lr

0003520c <__ssputs_r>:
   3520c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3520e:	688e      	ldr	r6, [r1, #8]
   35210:	b085      	sub	sp, #20
   35212:	0007      	movs	r7, r0
   35214:	000c      	movs	r4, r1
   35216:	9203      	str	r2, [sp, #12]
   35218:	9301      	str	r3, [sp, #4]
   3521a:	429e      	cmp	r6, r3
   3521c:	d839      	bhi.n	35292 <__ssputs_r+0x86>
   3521e:	2390      	movs	r3, #144	; 0x90
   35220:	898a      	ldrh	r2, [r1, #12]
   35222:	00db      	lsls	r3, r3, #3
   35224:	421a      	tst	r2, r3
   35226:	d034      	beq.n	35292 <__ssputs_r+0x86>
   35228:	2503      	movs	r5, #3
   3522a:	6909      	ldr	r1, [r1, #16]
   3522c:	6823      	ldr	r3, [r4, #0]
   3522e:	1a5b      	subs	r3, r3, r1
   35230:	9302      	str	r3, [sp, #8]
   35232:	6963      	ldr	r3, [r4, #20]
   35234:	9802      	ldr	r0, [sp, #8]
   35236:	435d      	muls	r5, r3
   35238:	0feb      	lsrs	r3, r5, #31
   3523a:	195d      	adds	r5, r3, r5
   3523c:	9b01      	ldr	r3, [sp, #4]
   3523e:	106d      	asrs	r5, r5, #1
   35240:	3301      	adds	r3, #1
   35242:	181b      	adds	r3, r3, r0
   35244:	42ab      	cmp	r3, r5
   35246:	d900      	bls.n	3524a <__ssputs_r+0x3e>
   35248:	001d      	movs	r5, r3
   3524a:	0553      	lsls	r3, r2, #21
   3524c:	d532      	bpl.n	352b4 <__ssputs_r+0xa8>
   3524e:	0029      	movs	r1, r5
   35250:	0038      	movs	r0, r7
   35252:	f7ff fa3f 	bl	346d4 <_malloc_r>
   35256:	1e06      	subs	r6, r0, #0
   35258:	d109      	bne.n	3526e <__ssputs_r+0x62>
   3525a:	230c      	movs	r3, #12
   3525c:	603b      	str	r3, [r7, #0]
   3525e:	2340      	movs	r3, #64	; 0x40
   35260:	2001      	movs	r0, #1
   35262:	89a2      	ldrh	r2, [r4, #12]
   35264:	4240      	negs	r0, r0
   35266:	4313      	orrs	r3, r2
   35268:	81a3      	strh	r3, [r4, #12]
   3526a:	b005      	add	sp, #20
   3526c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3526e:	9a02      	ldr	r2, [sp, #8]
   35270:	6921      	ldr	r1, [r4, #16]
   35272:	f7ff f9c1 	bl	345f8 <memcpy>
   35276:	89a3      	ldrh	r3, [r4, #12]
   35278:	4a14      	ldr	r2, [pc, #80]	; (352cc <__ssputs_r+0xc0>)
   3527a:	401a      	ands	r2, r3
   3527c:	2380      	movs	r3, #128	; 0x80
   3527e:	4313      	orrs	r3, r2
   35280:	81a3      	strh	r3, [r4, #12]
   35282:	9b02      	ldr	r3, [sp, #8]
   35284:	6126      	str	r6, [r4, #16]
   35286:	18f6      	adds	r6, r6, r3
   35288:	6026      	str	r6, [r4, #0]
   3528a:	6165      	str	r5, [r4, #20]
   3528c:	9e01      	ldr	r6, [sp, #4]
   3528e:	1aed      	subs	r5, r5, r3
   35290:	60a5      	str	r5, [r4, #8]
   35292:	9b01      	ldr	r3, [sp, #4]
   35294:	42b3      	cmp	r3, r6
   35296:	d200      	bcs.n	3529a <__ssputs_r+0x8e>
   35298:	001e      	movs	r6, r3
   3529a:	0032      	movs	r2, r6
   3529c:	9903      	ldr	r1, [sp, #12]
   3529e:	6820      	ldr	r0, [r4, #0]
   352a0:	f7ff f9b3 	bl	3460a <memmove>
   352a4:	68a3      	ldr	r3, [r4, #8]
   352a6:	2000      	movs	r0, #0
   352a8:	1b9b      	subs	r3, r3, r6
   352aa:	60a3      	str	r3, [r4, #8]
   352ac:	6823      	ldr	r3, [r4, #0]
   352ae:	199e      	adds	r6, r3, r6
   352b0:	6026      	str	r6, [r4, #0]
   352b2:	e7da      	b.n	3526a <__ssputs_r+0x5e>
   352b4:	002a      	movs	r2, r5
   352b6:	0038      	movs	r0, r7
   352b8:	f000 fb65 	bl	35986 <_realloc_r>
   352bc:	1e06      	subs	r6, r0, #0
   352be:	d1e0      	bne.n	35282 <__ssputs_r+0x76>
   352c0:	6921      	ldr	r1, [r4, #16]
   352c2:	0038      	movs	r0, r7
   352c4:	f7ff f9bc 	bl	34640 <_free_r>
   352c8:	e7c7      	b.n	3525a <__ssputs_r+0x4e>
   352ca:	46c0      	nop			; (mov r8, r8)
   352cc:	fffffb7f 	.word	0xfffffb7f

000352d0 <_svfiprintf_r>:
   352d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   352d2:	b09f      	sub	sp, #124	; 0x7c
   352d4:	9002      	str	r0, [sp, #8]
   352d6:	9305      	str	r3, [sp, #20]
   352d8:	898b      	ldrh	r3, [r1, #12]
   352da:	000f      	movs	r7, r1
   352dc:	0016      	movs	r6, r2
   352de:	061b      	lsls	r3, r3, #24
   352e0:	d511      	bpl.n	35306 <_svfiprintf_r+0x36>
   352e2:	690b      	ldr	r3, [r1, #16]
   352e4:	2b00      	cmp	r3, #0
   352e6:	d10e      	bne.n	35306 <_svfiprintf_r+0x36>
   352e8:	2140      	movs	r1, #64	; 0x40
   352ea:	f7ff f9f3 	bl	346d4 <_malloc_r>
   352ee:	6038      	str	r0, [r7, #0]
   352f0:	6138      	str	r0, [r7, #16]
   352f2:	2800      	cmp	r0, #0
   352f4:	d105      	bne.n	35302 <_svfiprintf_r+0x32>
   352f6:	230c      	movs	r3, #12
   352f8:	9a02      	ldr	r2, [sp, #8]
   352fa:	3801      	subs	r0, #1
   352fc:	6013      	str	r3, [r2, #0]
   352fe:	b01f      	add	sp, #124	; 0x7c
   35300:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35302:	2340      	movs	r3, #64	; 0x40
   35304:	617b      	str	r3, [r7, #20]
   35306:	2300      	movs	r3, #0
   35308:	ad06      	add	r5, sp, #24
   3530a:	616b      	str	r3, [r5, #20]
   3530c:	3320      	adds	r3, #32
   3530e:	766b      	strb	r3, [r5, #25]
   35310:	3310      	adds	r3, #16
   35312:	76ab      	strb	r3, [r5, #26]
   35314:	0034      	movs	r4, r6
   35316:	7823      	ldrb	r3, [r4, #0]
   35318:	2b00      	cmp	r3, #0
   3531a:	d147      	bne.n	353ac <_svfiprintf_r+0xdc>
   3531c:	1ba3      	subs	r3, r4, r6
   3531e:	9304      	str	r3, [sp, #16]
   35320:	d00d      	beq.n	3533e <_svfiprintf_r+0x6e>
   35322:	1ba3      	subs	r3, r4, r6
   35324:	0032      	movs	r2, r6
   35326:	0039      	movs	r1, r7
   35328:	9802      	ldr	r0, [sp, #8]
   3532a:	f7ff ff6f 	bl	3520c <__ssputs_r>
   3532e:	1c43      	adds	r3, r0, #1
   35330:	d100      	bne.n	35334 <_svfiprintf_r+0x64>
   35332:	e0b5      	b.n	354a0 <_svfiprintf_r+0x1d0>
   35334:	696a      	ldr	r2, [r5, #20]
   35336:	9b04      	ldr	r3, [sp, #16]
   35338:	4694      	mov	ip, r2
   3533a:	4463      	add	r3, ip
   3533c:	616b      	str	r3, [r5, #20]
   3533e:	7823      	ldrb	r3, [r4, #0]
   35340:	2b00      	cmp	r3, #0
   35342:	d100      	bne.n	35346 <_svfiprintf_r+0x76>
   35344:	e0ac      	b.n	354a0 <_svfiprintf_r+0x1d0>
   35346:	2201      	movs	r2, #1
   35348:	2300      	movs	r3, #0
   3534a:	4252      	negs	r2, r2
   3534c:	606a      	str	r2, [r5, #4]
   3534e:	a902      	add	r1, sp, #8
   35350:	3254      	adds	r2, #84	; 0x54
   35352:	1852      	adds	r2, r2, r1
   35354:	3401      	adds	r4, #1
   35356:	602b      	str	r3, [r5, #0]
   35358:	60eb      	str	r3, [r5, #12]
   3535a:	60ab      	str	r3, [r5, #8]
   3535c:	7013      	strb	r3, [r2, #0]
   3535e:	65ab      	str	r3, [r5, #88]	; 0x58
   35360:	4e58      	ldr	r6, [pc, #352]	; (354c4 <_svfiprintf_r+0x1f4>)
   35362:	2205      	movs	r2, #5
   35364:	7821      	ldrb	r1, [r4, #0]
   35366:	0030      	movs	r0, r6
   35368:	f000 fb02 	bl	35970 <memchr>
   3536c:	1c62      	adds	r2, r4, #1
   3536e:	2800      	cmp	r0, #0
   35370:	d120      	bne.n	353b4 <_svfiprintf_r+0xe4>
   35372:	6829      	ldr	r1, [r5, #0]
   35374:	06cb      	lsls	r3, r1, #27
   35376:	d504      	bpl.n	35382 <_svfiprintf_r+0xb2>
   35378:	2353      	movs	r3, #83	; 0x53
   3537a:	ae02      	add	r6, sp, #8
   3537c:	3020      	adds	r0, #32
   3537e:	199b      	adds	r3, r3, r6
   35380:	7018      	strb	r0, [r3, #0]
   35382:	070b      	lsls	r3, r1, #28
   35384:	d504      	bpl.n	35390 <_svfiprintf_r+0xc0>
   35386:	2353      	movs	r3, #83	; 0x53
   35388:	202b      	movs	r0, #43	; 0x2b
   3538a:	ae02      	add	r6, sp, #8
   3538c:	199b      	adds	r3, r3, r6
   3538e:	7018      	strb	r0, [r3, #0]
   35390:	7823      	ldrb	r3, [r4, #0]
   35392:	2b2a      	cmp	r3, #42	; 0x2a
   35394:	d016      	beq.n	353c4 <_svfiprintf_r+0xf4>
   35396:	2000      	movs	r0, #0
   35398:	210a      	movs	r1, #10
   3539a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3539c:	7822      	ldrb	r2, [r4, #0]
   3539e:	3a30      	subs	r2, #48	; 0x30
   353a0:	2a09      	cmp	r2, #9
   353a2:	d955      	bls.n	35450 <_svfiprintf_r+0x180>
   353a4:	2800      	cmp	r0, #0
   353a6:	d015      	beq.n	353d4 <_svfiprintf_r+0x104>
   353a8:	9309      	str	r3, [sp, #36]	; 0x24
   353aa:	e013      	b.n	353d4 <_svfiprintf_r+0x104>
   353ac:	2b25      	cmp	r3, #37	; 0x25
   353ae:	d0b5      	beq.n	3531c <_svfiprintf_r+0x4c>
   353b0:	3401      	adds	r4, #1
   353b2:	e7b0      	b.n	35316 <_svfiprintf_r+0x46>
   353b4:	2301      	movs	r3, #1
   353b6:	1b80      	subs	r0, r0, r6
   353b8:	4083      	lsls	r3, r0
   353ba:	6829      	ldr	r1, [r5, #0]
   353bc:	0014      	movs	r4, r2
   353be:	430b      	orrs	r3, r1
   353c0:	602b      	str	r3, [r5, #0]
   353c2:	e7cd      	b.n	35360 <_svfiprintf_r+0x90>
   353c4:	9b05      	ldr	r3, [sp, #20]
   353c6:	1d18      	adds	r0, r3, #4
   353c8:	681b      	ldr	r3, [r3, #0]
   353ca:	9005      	str	r0, [sp, #20]
   353cc:	2b00      	cmp	r3, #0
   353ce:	db39      	blt.n	35444 <_svfiprintf_r+0x174>
   353d0:	9309      	str	r3, [sp, #36]	; 0x24
   353d2:	0014      	movs	r4, r2
   353d4:	7823      	ldrb	r3, [r4, #0]
   353d6:	2b2e      	cmp	r3, #46	; 0x2e
   353d8:	d10b      	bne.n	353f2 <_svfiprintf_r+0x122>
   353da:	7863      	ldrb	r3, [r4, #1]
   353dc:	1c62      	adds	r2, r4, #1
   353de:	2b2a      	cmp	r3, #42	; 0x2a
   353e0:	d13e      	bne.n	35460 <_svfiprintf_r+0x190>
   353e2:	9b05      	ldr	r3, [sp, #20]
   353e4:	3402      	adds	r4, #2
   353e6:	1d1a      	adds	r2, r3, #4
   353e8:	681b      	ldr	r3, [r3, #0]
   353ea:	9205      	str	r2, [sp, #20]
   353ec:	2b00      	cmp	r3, #0
   353ee:	db34      	blt.n	3545a <_svfiprintf_r+0x18a>
   353f0:	9307      	str	r3, [sp, #28]
   353f2:	4e35      	ldr	r6, [pc, #212]	; (354c8 <_svfiprintf_r+0x1f8>)
   353f4:	7821      	ldrb	r1, [r4, #0]
   353f6:	2203      	movs	r2, #3
   353f8:	0030      	movs	r0, r6
   353fa:	f000 fab9 	bl	35970 <memchr>
   353fe:	2800      	cmp	r0, #0
   35400:	d006      	beq.n	35410 <_svfiprintf_r+0x140>
   35402:	2340      	movs	r3, #64	; 0x40
   35404:	1b80      	subs	r0, r0, r6
   35406:	4083      	lsls	r3, r0
   35408:	682a      	ldr	r2, [r5, #0]
   3540a:	3401      	adds	r4, #1
   3540c:	4313      	orrs	r3, r2
   3540e:	602b      	str	r3, [r5, #0]
   35410:	7821      	ldrb	r1, [r4, #0]
   35412:	2206      	movs	r2, #6
   35414:	482d      	ldr	r0, [pc, #180]	; (354cc <_svfiprintf_r+0x1fc>)
   35416:	1c66      	adds	r6, r4, #1
   35418:	7629      	strb	r1, [r5, #24]
   3541a:	f000 faa9 	bl	35970 <memchr>
   3541e:	2800      	cmp	r0, #0
   35420:	d046      	beq.n	354b0 <_svfiprintf_r+0x1e0>
   35422:	4b2b      	ldr	r3, [pc, #172]	; (354d0 <_svfiprintf_r+0x200>)
   35424:	2b00      	cmp	r3, #0
   35426:	d12f      	bne.n	35488 <_svfiprintf_r+0x1b8>
   35428:	6829      	ldr	r1, [r5, #0]
   3542a:	9b05      	ldr	r3, [sp, #20]
   3542c:	2207      	movs	r2, #7
   3542e:	05c9      	lsls	r1, r1, #23
   35430:	d528      	bpl.n	35484 <_svfiprintf_r+0x1b4>
   35432:	189b      	adds	r3, r3, r2
   35434:	4393      	bics	r3, r2
   35436:	3308      	adds	r3, #8
   35438:	9305      	str	r3, [sp, #20]
   3543a:	696b      	ldr	r3, [r5, #20]
   3543c:	9a03      	ldr	r2, [sp, #12]
   3543e:	189b      	adds	r3, r3, r2
   35440:	616b      	str	r3, [r5, #20]
   35442:	e767      	b.n	35314 <_svfiprintf_r+0x44>
   35444:	425b      	negs	r3, r3
   35446:	60eb      	str	r3, [r5, #12]
   35448:	2302      	movs	r3, #2
   3544a:	430b      	orrs	r3, r1
   3544c:	602b      	str	r3, [r5, #0]
   3544e:	e7c0      	b.n	353d2 <_svfiprintf_r+0x102>
   35450:	434b      	muls	r3, r1
   35452:	3401      	adds	r4, #1
   35454:	189b      	adds	r3, r3, r2
   35456:	2001      	movs	r0, #1
   35458:	e7a0      	b.n	3539c <_svfiprintf_r+0xcc>
   3545a:	2301      	movs	r3, #1
   3545c:	425b      	negs	r3, r3
   3545e:	e7c7      	b.n	353f0 <_svfiprintf_r+0x120>
   35460:	2300      	movs	r3, #0
   35462:	0014      	movs	r4, r2
   35464:	200a      	movs	r0, #10
   35466:	001a      	movs	r2, r3
   35468:	606b      	str	r3, [r5, #4]
   3546a:	7821      	ldrb	r1, [r4, #0]
   3546c:	3930      	subs	r1, #48	; 0x30
   3546e:	2909      	cmp	r1, #9
   35470:	d903      	bls.n	3547a <_svfiprintf_r+0x1aa>
   35472:	2b00      	cmp	r3, #0
   35474:	d0bd      	beq.n	353f2 <_svfiprintf_r+0x122>
   35476:	9207      	str	r2, [sp, #28]
   35478:	e7bb      	b.n	353f2 <_svfiprintf_r+0x122>
   3547a:	4342      	muls	r2, r0
   3547c:	3401      	adds	r4, #1
   3547e:	1852      	adds	r2, r2, r1
   35480:	2301      	movs	r3, #1
   35482:	e7f2      	b.n	3546a <_svfiprintf_r+0x19a>
   35484:	3307      	adds	r3, #7
   35486:	e7d5      	b.n	35434 <_svfiprintf_r+0x164>
   35488:	ab05      	add	r3, sp, #20
   3548a:	9300      	str	r3, [sp, #0]
   3548c:	003a      	movs	r2, r7
   3548e:	4b11      	ldr	r3, [pc, #68]	; (354d4 <_svfiprintf_r+0x204>)
   35490:	0029      	movs	r1, r5
   35492:	9802      	ldr	r0, [sp, #8]
   35494:	e000      	b.n	35498 <_svfiprintf_r+0x1c8>
   35496:	bf00      	nop
   35498:	9003      	str	r0, [sp, #12]
   3549a:	9b03      	ldr	r3, [sp, #12]
   3549c:	3301      	adds	r3, #1
   3549e:	d1cc      	bne.n	3543a <_svfiprintf_r+0x16a>
   354a0:	89bb      	ldrh	r3, [r7, #12]
   354a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   354a4:	065b      	lsls	r3, r3, #25
   354a6:	d400      	bmi.n	354aa <_svfiprintf_r+0x1da>
   354a8:	e729      	b.n	352fe <_svfiprintf_r+0x2e>
   354aa:	2001      	movs	r0, #1
   354ac:	4240      	negs	r0, r0
   354ae:	e726      	b.n	352fe <_svfiprintf_r+0x2e>
   354b0:	ab05      	add	r3, sp, #20
   354b2:	9300      	str	r3, [sp, #0]
   354b4:	003a      	movs	r2, r7
   354b6:	4b07      	ldr	r3, [pc, #28]	; (354d4 <_svfiprintf_r+0x204>)
   354b8:	0029      	movs	r1, r5
   354ba:	9802      	ldr	r0, [sp, #8]
   354bc:	f000 f87a 	bl	355b4 <_printf_i>
   354c0:	e7ea      	b.n	35498 <_svfiprintf_r+0x1c8>
   354c2:	46c0      	nop			; (mov r8, r8)
   354c4:	00039e5e 	.word	0x00039e5e
   354c8:	00039e64 	.word	0x00039e64
   354cc:	00039e68 	.word	0x00039e68
   354d0:	00000000 	.word	0x00000000
   354d4:	0003520d 	.word	0x0003520d

000354d8 <_printf_common>:
   354d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   354da:	0015      	movs	r5, r2
   354dc:	9301      	str	r3, [sp, #4]
   354de:	688a      	ldr	r2, [r1, #8]
   354e0:	690b      	ldr	r3, [r1, #16]
   354e2:	9000      	str	r0, [sp, #0]
   354e4:	000c      	movs	r4, r1
   354e6:	4293      	cmp	r3, r2
   354e8:	da00      	bge.n	354ec <_printf_common+0x14>
   354ea:	0013      	movs	r3, r2
   354ec:	0022      	movs	r2, r4
   354ee:	602b      	str	r3, [r5, #0]
   354f0:	3243      	adds	r2, #67	; 0x43
   354f2:	7812      	ldrb	r2, [r2, #0]
   354f4:	2a00      	cmp	r2, #0
   354f6:	d001      	beq.n	354fc <_printf_common+0x24>
   354f8:	3301      	adds	r3, #1
   354fa:	602b      	str	r3, [r5, #0]
   354fc:	6823      	ldr	r3, [r4, #0]
   354fe:	069b      	lsls	r3, r3, #26
   35500:	d502      	bpl.n	35508 <_printf_common+0x30>
   35502:	682b      	ldr	r3, [r5, #0]
   35504:	3302      	adds	r3, #2
   35506:	602b      	str	r3, [r5, #0]
   35508:	2706      	movs	r7, #6
   3550a:	6823      	ldr	r3, [r4, #0]
   3550c:	401f      	ands	r7, r3
   3550e:	d027      	beq.n	35560 <_printf_common+0x88>
   35510:	0023      	movs	r3, r4
   35512:	3343      	adds	r3, #67	; 0x43
   35514:	781b      	ldrb	r3, [r3, #0]
   35516:	1e5a      	subs	r2, r3, #1
   35518:	4193      	sbcs	r3, r2
   3551a:	6822      	ldr	r2, [r4, #0]
   3551c:	0692      	lsls	r2, r2, #26
   3551e:	d430      	bmi.n	35582 <_printf_common+0xaa>
   35520:	0022      	movs	r2, r4
   35522:	9901      	ldr	r1, [sp, #4]
   35524:	3243      	adds	r2, #67	; 0x43
   35526:	9800      	ldr	r0, [sp, #0]
   35528:	9e08      	ldr	r6, [sp, #32]
   3552a:	47b0      	blx	r6
   3552c:	1c43      	adds	r3, r0, #1
   3552e:	d025      	beq.n	3557c <_printf_common+0xa4>
   35530:	2306      	movs	r3, #6
   35532:	6820      	ldr	r0, [r4, #0]
   35534:	682a      	ldr	r2, [r5, #0]
   35536:	68e1      	ldr	r1, [r4, #12]
   35538:	4003      	ands	r3, r0
   3553a:	2500      	movs	r5, #0
   3553c:	2b04      	cmp	r3, #4
   3553e:	d103      	bne.n	35548 <_printf_common+0x70>
   35540:	1a8d      	subs	r5, r1, r2
   35542:	43eb      	mvns	r3, r5
   35544:	17db      	asrs	r3, r3, #31
   35546:	401d      	ands	r5, r3
   35548:	68a3      	ldr	r3, [r4, #8]
   3554a:	6922      	ldr	r2, [r4, #16]
   3554c:	4293      	cmp	r3, r2
   3554e:	dd01      	ble.n	35554 <_printf_common+0x7c>
   35550:	1a9b      	subs	r3, r3, r2
   35552:	18ed      	adds	r5, r5, r3
   35554:	2700      	movs	r7, #0
   35556:	42bd      	cmp	r5, r7
   35558:	d120      	bne.n	3559c <_printf_common+0xc4>
   3555a:	2000      	movs	r0, #0
   3555c:	e010      	b.n	35580 <_printf_common+0xa8>
   3555e:	3701      	adds	r7, #1
   35560:	68e3      	ldr	r3, [r4, #12]
   35562:	682a      	ldr	r2, [r5, #0]
   35564:	1a9b      	subs	r3, r3, r2
   35566:	429f      	cmp	r7, r3
   35568:	dad2      	bge.n	35510 <_printf_common+0x38>
   3556a:	0022      	movs	r2, r4
   3556c:	2301      	movs	r3, #1
   3556e:	3219      	adds	r2, #25
   35570:	9901      	ldr	r1, [sp, #4]
   35572:	9800      	ldr	r0, [sp, #0]
   35574:	9e08      	ldr	r6, [sp, #32]
   35576:	47b0      	blx	r6
   35578:	1c43      	adds	r3, r0, #1
   3557a:	d1f0      	bne.n	3555e <_printf_common+0x86>
   3557c:	2001      	movs	r0, #1
   3557e:	4240      	negs	r0, r0
   35580:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   35582:	2030      	movs	r0, #48	; 0x30
   35584:	18e1      	adds	r1, r4, r3
   35586:	3143      	adds	r1, #67	; 0x43
   35588:	7008      	strb	r0, [r1, #0]
   3558a:	0021      	movs	r1, r4
   3558c:	1c5a      	adds	r2, r3, #1
   3558e:	3145      	adds	r1, #69	; 0x45
   35590:	7809      	ldrb	r1, [r1, #0]
   35592:	18a2      	adds	r2, r4, r2
   35594:	3243      	adds	r2, #67	; 0x43
   35596:	3302      	adds	r3, #2
   35598:	7011      	strb	r1, [r2, #0]
   3559a:	e7c1      	b.n	35520 <_printf_common+0x48>
   3559c:	0022      	movs	r2, r4
   3559e:	2301      	movs	r3, #1
   355a0:	321a      	adds	r2, #26
   355a2:	9901      	ldr	r1, [sp, #4]
   355a4:	9800      	ldr	r0, [sp, #0]
   355a6:	9e08      	ldr	r6, [sp, #32]
   355a8:	47b0      	blx	r6
   355aa:	1c43      	adds	r3, r0, #1
   355ac:	d0e6      	beq.n	3557c <_printf_common+0xa4>
   355ae:	3701      	adds	r7, #1
   355b0:	e7d1      	b.n	35556 <_printf_common+0x7e>
	...

000355b4 <_printf_i>:
   355b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   355b6:	b08b      	sub	sp, #44	; 0x2c
   355b8:	9206      	str	r2, [sp, #24]
   355ba:	000a      	movs	r2, r1
   355bc:	3243      	adds	r2, #67	; 0x43
   355be:	9307      	str	r3, [sp, #28]
   355c0:	9005      	str	r0, [sp, #20]
   355c2:	9204      	str	r2, [sp, #16]
   355c4:	7e0a      	ldrb	r2, [r1, #24]
   355c6:	000c      	movs	r4, r1
   355c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   355ca:	2a6e      	cmp	r2, #110	; 0x6e
   355cc:	d100      	bne.n	355d0 <_printf_i+0x1c>
   355ce:	e08f      	b.n	356f0 <_printf_i+0x13c>
   355d0:	d817      	bhi.n	35602 <_printf_i+0x4e>
   355d2:	2a63      	cmp	r2, #99	; 0x63
   355d4:	d02c      	beq.n	35630 <_printf_i+0x7c>
   355d6:	d808      	bhi.n	355ea <_printf_i+0x36>
   355d8:	2a00      	cmp	r2, #0
   355da:	d100      	bne.n	355de <_printf_i+0x2a>
   355dc:	e099      	b.n	35712 <_printf_i+0x15e>
   355de:	2a58      	cmp	r2, #88	; 0x58
   355e0:	d054      	beq.n	3568c <_printf_i+0xd8>
   355e2:	0026      	movs	r6, r4
   355e4:	3642      	adds	r6, #66	; 0x42
   355e6:	7032      	strb	r2, [r6, #0]
   355e8:	e029      	b.n	3563e <_printf_i+0x8a>
   355ea:	2a64      	cmp	r2, #100	; 0x64
   355ec:	d001      	beq.n	355f2 <_printf_i+0x3e>
   355ee:	2a69      	cmp	r2, #105	; 0x69
   355f0:	d1f7      	bne.n	355e2 <_printf_i+0x2e>
   355f2:	6821      	ldr	r1, [r4, #0]
   355f4:	681a      	ldr	r2, [r3, #0]
   355f6:	0608      	lsls	r0, r1, #24
   355f8:	d523      	bpl.n	35642 <_printf_i+0x8e>
   355fa:	1d11      	adds	r1, r2, #4
   355fc:	6019      	str	r1, [r3, #0]
   355fe:	6815      	ldr	r5, [r2, #0]
   35600:	e025      	b.n	3564e <_printf_i+0x9a>
   35602:	2a73      	cmp	r2, #115	; 0x73
   35604:	d100      	bne.n	35608 <_printf_i+0x54>
   35606:	e088      	b.n	3571a <_printf_i+0x166>
   35608:	d808      	bhi.n	3561c <_printf_i+0x68>
   3560a:	2a6f      	cmp	r2, #111	; 0x6f
   3560c:	d029      	beq.n	35662 <_printf_i+0xae>
   3560e:	2a70      	cmp	r2, #112	; 0x70
   35610:	d1e7      	bne.n	355e2 <_printf_i+0x2e>
   35612:	2220      	movs	r2, #32
   35614:	6809      	ldr	r1, [r1, #0]
   35616:	430a      	orrs	r2, r1
   35618:	6022      	str	r2, [r4, #0]
   3561a:	e003      	b.n	35624 <_printf_i+0x70>
   3561c:	2a75      	cmp	r2, #117	; 0x75
   3561e:	d020      	beq.n	35662 <_printf_i+0xae>
   35620:	2a78      	cmp	r2, #120	; 0x78
   35622:	d1de      	bne.n	355e2 <_printf_i+0x2e>
   35624:	0022      	movs	r2, r4
   35626:	2178      	movs	r1, #120	; 0x78
   35628:	3245      	adds	r2, #69	; 0x45
   3562a:	7011      	strb	r1, [r2, #0]
   3562c:	4a6c      	ldr	r2, [pc, #432]	; (357e0 <_printf_i+0x22c>)
   3562e:	e030      	b.n	35692 <_printf_i+0xde>
   35630:	000e      	movs	r6, r1
   35632:	681a      	ldr	r2, [r3, #0]
   35634:	3642      	adds	r6, #66	; 0x42
   35636:	1d11      	adds	r1, r2, #4
   35638:	6019      	str	r1, [r3, #0]
   3563a:	6813      	ldr	r3, [r2, #0]
   3563c:	7033      	strb	r3, [r6, #0]
   3563e:	2301      	movs	r3, #1
   35640:	e079      	b.n	35736 <_printf_i+0x182>
   35642:	0649      	lsls	r1, r1, #25
   35644:	d5d9      	bpl.n	355fa <_printf_i+0x46>
   35646:	1d11      	adds	r1, r2, #4
   35648:	6019      	str	r1, [r3, #0]
   3564a:	2300      	movs	r3, #0
   3564c:	5ed5      	ldrsh	r5, [r2, r3]
   3564e:	2d00      	cmp	r5, #0
   35650:	da03      	bge.n	3565a <_printf_i+0xa6>
   35652:	232d      	movs	r3, #45	; 0x2d
   35654:	9a04      	ldr	r2, [sp, #16]
   35656:	426d      	negs	r5, r5
   35658:	7013      	strb	r3, [r2, #0]
   3565a:	4b62      	ldr	r3, [pc, #392]	; (357e4 <_printf_i+0x230>)
   3565c:	270a      	movs	r7, #10
   3565e:	9303      	str	r3, [sp, #12]
   35660:	e02f      	b.n	356c2 <_printf_i+0x10e>
   35662:	6820      	ldr	r0, [r4, #0]
   35664:	6819      	ldr	r1, [r3, #0]
   35666:	0605      	lsls	r5, r0, #24
   35668:	d503      	bpl.n	35672 <_printf_i+0xbe>
   3566a:	1d08      	adds	r0, r1, #4
   3566c:	6018      	str	r0, [r3, #0]
   3566e:	680d      	ldr	r5, [r1, #0]
   35670:	e005      	b.n	3567e <_printf_i+0xca>
   35672:	0640      	lsls	r0, r0, #25
   35674:	d5f9      	bpl.n	3566a <_printf_i+0xb6>
   35676:	680d      	ldr	r5, [r1, #0]
   35678:	1d08      	adds	r0, r1, #4
   3567a:	6018      	str	r0, [r3, #0]
   3567c:	b2ad      	uxth	r5, r5
   3567e:	4b59      	ldr	r3, [pc, #356]	; (357e4 <_printf_i+0x230>)
   35680:	2708      	movs	r7, #8
   35682:	9303      	str	r3, [sp, #12]
   35684:	2a6f      	cmp	r2, #111	; 0x6f
   35686:	d018      	beq.n	356ba <_printf_i+0x106>
   35688:	270a      	movs	r7, #10
   3568a:	e016      	b.n	356ba <_printf_i+0x106>
   3568c:	3145      	adds	r1, #69	; 0x45
   3568e:	700a      	strb	r2, [r1, #0]
   35690:	4a54      	ldr	r2, [pc, #336]	; (357e4 <_printf_i+0x230>)
   35692:	9203      	str	r2, [sp, #12]
   35694:	681a      	ldr	r2, [r3, #0]
   35696:	6821      	ldr	r1, [r4, #0]
   35698:	1d10      	adds	r0, r2, #4
   3569a:	6018      	str	r0, [r3, #0]
   3569c:	6815      	ldr	r5, [r2, #0]
   3569e:	0608      	lsls	r0, r1, #24
   356a0:	d522      	bpl.n	356e8 <_printf_i+0x134>
   356a2:	07cb      	lsls	r3, r1, #31
   356a4:	d502      	bpl.n	356ac <_printf_i+0xf8>
   356a6:	2320      	movs	r3, #32
   356a8:	4319      	orrs	r1, r3
   356aa:	6021      	str	r1, [r4, #0]
   356ac:	2710      	movs	r7, #16
   356ae:	2d00      	cmp	r5, #0
   356b0:	d103      	bne.n	356ba <_printf_i+0x106>
   356b2:	2320      	movs	r3, #32
   356b4:	6822      	ldr	r2, [r4, #0]
   356b6:	439a      	bics	r2, r3
   356b8:	6022      	str	r2, [r4, #0]
   356ba:	0023      	movs	r3, r4
   356bc:	2200      	movs	r2, #0
   356be:	3343      	adds	r3, #67	; 0x43
   356c0:	701a      	strb	r2, [r3, #0]
   356c2:	6863      	ldr	r3, [r4, #4]
   356c4:	60a3      	str	r3, [r4, #8]
   356c6:	2b00      	cmp	r3, #0
   356c8:	db5c      	blt.n	35784 <_printf_i+0x1d0>
   356ca:	2204      	movs	r2, #4
   356cc:	6821      	ldr	r1, [r4, #0]
   356ce:	4391      	bics	r1, r2
   356d0:	6021      	str	r1, [r4, #0]
   356d2:	2d00      	cmp	r5, #0
   356d4:	d158      	bne.n	35788 <_printf_i+0x1d4>
   356d6:	9e04      	ldr	r6, [sp, #16]
   356d8:	2b00      	cmp	r3, #0
   356da:	d064      	beq.n	357a6 <_printf_i+0x1f2>
   356dc:	0026      	movs	r6, r4
   356de:	9b03      	ldr	r3, [sp, #12]
   356e0:	3642      	adds	r6, #66	; 0x42
   356e2:	781b      	ldrb	r3, [r3, #0]
   356e4:	7033      	strb	r3, [r6, #0]
   356e6:	e05e      	b.n	357a6 <_printf_i+0x1f2>
   356e8:	0648      	lsls	r0, r1, #25
   356ea:	d5da      	bpl.n	356a2 <_printf_i+0xee>
   356ec:	b2ad      	uxth	r5, r5
   356ee:	e7d8      	b.n	356a2 <_printf_i+0xee>
   356f0:	6809      	ldr	r1, [r1, #0]
   356f2:	681a      	ldr	r2, [r3, #0]
   356f4:	0608      	lsls	r0, r1, #24
   356f6:	d505      	bpl.n	35704 <_printf_i+0x150>
   356f8:	1d11      	adds	r1, r2, #4
   356fa:	6019      	str	r1, [r3, #0]
   356fc:	6813      	ldr	r3, [r2, #0]
   356fe:	6962      	ldr	r2, [r4, #20]
   35700:	601a      	str	r2, [r3, #0]
   35702:	e006      	b.n	35712 <_printf_i+0x15e>
   35704:	0649      	lsls	r1, r1, #25
   35706:	d5f7      	bpl.n	356f8 <_printf_i+0x144>
   35708:	1d11      	adds	r1, r2, #4
   3570a:	6019      	str	r1, [r3, #0]
   3570c:	6813      	ldr	r3, [r2, #0]
   3570e:	8aa2      	ldrh	r2, [r4, #20]
   35710:	801a      	strh	r2, [r3, #0]
   35712:	2300      	movs	r3, #0
   35714:	9e04      	ldr	r6, [sp, #16]
   35716:	6123      	str	r3, [r4, #16]
   35718:	e054      	b.n	357c4 <_printf_i+0x210>
   3571a:	681a      	ldr	r2, [r3, #0]
   3571c:	1d11      	adds	r1, r2, #4
   3571e:	6019      	str	r1, [r3, #0]
   35720:	6816      	ldr	r6, [r2, #0]
   35722:	2100      	movs	r1, #0
   35724:	6862      	ldr	r2, [r4, #4]
   35726:	0030      	movs	r0, r6
   35728:	f000 f922 	bl	35970 <memchr>
   3572c:	2800      	cmp	r0, #0
   3572e:	d001      	beq.n	35734 <_printf_i+0x180>
   35730:	1b80      	subs	r0, r0, r6
   35732:	6060      	str	r0, [r4, #4]
   35734:	6863      	ldr	r3, [r4, #4]
   35736:	6123      	str	r3, [r4, #16]
   35738:	2300      	movs	r3, #0
   3573a:	9a04      	ldr	r2, [sp, #16]
   3573c:	7013      	strb	r3, [r2, #0]
   3573e:	e041      	b.n	357c4 <_printf_i+0x210>
   35740:	6923      	ldr	r3, [r4, #16]
   35742:	0032      	movs	r2, r6
   35744:	9906      	ldr	r1, [sp, #24]
   35746:	9805      	ldr	r0, [sp, #20]
   35748:	9d07      	ldr	r5, [sp, #28]
   3574a:	47a8      	blx	r5
   3574c:	1c43      	adds	r3, r0, #1
   3574e:	d043      	beq.n	357d8 <_printf_i+0x224>
   35750:	6823      	ldr	r3, [r4, #0]
   35752:	2500      	movs	r5, #0
   35754:	079b      	lsls	r3, r3, #30
   35756:	d40f      	bmi.n	35778 <_printf_i+0x1c4>
   35758:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3575a:	68e0      	ldr	r0, [r4, #12]
   3575c:	4298      	cmp	r0, r3
   3575e:	da3d      	bge.n	357dc <_printf_i+0x228>
   35760:	0018      	movs	r0, r3
   35762:	e03b      	b.n	357dc <_printf_i+0x228>
   35764:	0022      	movs	r2, r4
   35766:	2301      	movs	r3, #1
   35768:	3219      	adds	r2, #25
   3576a:	9906      	ldr	r1, [sp, #24]
   3576c:	9805      	ldr	r0, [sp, #20]
   3576e:	9e07      	ldr	r6, [sp, #28]
   35770:	47b0      	blx	r6
   35772:	1c43      	adds	r3, r0, #1
   35774:	d030      	beq.n	357d8 <_printf_i+0x224>
   35776:	3501      	adds	r5, #1
   35778:	68e3      	ldr	r3, [r4, #12]
   3577a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3577c:	1a9b      	subs	r3, r3, r2
   3577e:	429d      	cmp	r5, r3
   35780:	dbf0      	blt.n	35764 <_printf_i+0x1b0>
   35782:	e7e9      	b.n	35758 <_printf_i+0x1a4>
   35784:	2d00      	cmp	r5, #0
   35786:	d0a9      	beq.n	356dc <_printf_i+0x128>
   35788:	9e04      	ldr	r6, [sp, #16]
   3578a:	0028      	movs	r0, r5
   3578c:	0039      	movs	r1, r7
   3578e:	f7fc ffe7 	bl	32760 <__aeabi_uidivmod>
   35792:	9b03      	ldr	r3, [sp, #12]
   35794:	3e01      	subs	r6, #1
   35796:	5c5b      	ldrb	r3, [r3, r1]
   35798:	0028      	movs	r0, r5
   3579a:	7033      	strb	r3, [r6, #0]
   3579c:	0039      	movs	r1, r7
   3579e:	f7fc ff59 	bl	32654 <__udivsi3>
   357a2:	1e05      	subs	r5, r0, #0
   357a4:	d1f1      	bne.n	3578a <_printf_i+0x1d6>
   357a6:	2f08      	cmp	r7, #8
   357a8:	d109      	bne.n	357be <_printf_i+0x20a>
   357aa:	6823      	ldr	r3, [r4, #0]
   357ac:	07db      	lsls	r3, r3, #31
   357ae:	d506      	bpl.n	357be <_printf_i+0x20a>
   357b0:	6863      	ldr	r3, [r4, #4]
   357b2:	6922      	ldr	r2, [r4, #16]
   357b4:	4293      	cmp	r3, r2
   357b6:	dc02      	bgt.n	357be <_printf_i+0x20a>
   357b8:	2330      	movs	r3, #48	; 0x30
   357ba:	3e01      	subs	r6, #1
   357bc:	7033      	strb	r3, [r6, #0]
   357be:	9b04      	ldr	r3, [sp, #16]
   357c0:	1b9b      	subs	r3, r3, r6
   357c2:	6123      	str	r3, [r4, #16]
   357c4:	9b07      	ldr	r3, [sp, #28]
   357c6:	aa09      	add	r2, sp, #36	; 0x24
   357c8:	9300      	str	r3, [sp, #0]
   357ca:	0021      	movs	r1, r4
   357cc:	9b06      	ldr	r3, [sp, #24]
   357ce:	9805      	ldr	r0, [sp, #20]
   357d0:	f7ff fe82 	bl	354d8 <_printf_common>
   357d4:	1c43      	adds	r3, r0, #1
   357d6:	d1b3      	bne.n	35740 <_printf_i+0x18c>
   357d8:	2001      	movs	r0, #1
   357da:	4240      	negs	r0, r0
   357dc:	b00b      	add	sp, #44	; 0x2c
   357de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   357e0:	00039e80 	.word	0x00039e80
   357e4:	00039e6f 	.word	0x00039e6f

000357e8 <__sread>:
   357e8:	b570      	push	{r4, r5, r6, lr}
   357ea:	000c      	movs	r4, r1
   357ec:	250e      	movs	r5, #14
   357ee:	5f49      	ldrsh	r1, [r1, r5]
   357f0:	f000 f8f0 	bl	359d4 <_read_r>
   357f4:	2800      	cmp	r0, #0
   357f6:	db03      	blt.n	35800 <__sread+0x18>
   357f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   357fa:	181b      	adds	r3, r3, r0
   357fc:	6563      	str	r3, [r4, #84]	; 0x54
   357fe:	bd70      	pop	{r4, r5, r6, pc}
   35800:	89a3      	ldrh	r3, [r4, #12]
   35802:	4a02      	ldr	r2, [pc, #8]	; (3580c <__sread+0x24>)
   35804:	4013      	ands	r3, r2
   35806:	81a3      	strh	r3, [r4, #12]
   35808:	e7f9      	b.n	357fe <__sread+0x16>
   3580a:	46c0      	nop			; (mov r8, r8)
   3580c:	ffffefff 	.word	0xffffefff

00035810 <__swrite>:
   35810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35812:	001f      	movs	r7, r3
   35814:	898b      	ldrh	r3, [r1, #12]
   35816:	0005      	movs	r5, r0
   35818:	000c      	movs	r4, r1
   3581a:	0016      	movs	r6, r2
   3581c:	05db      	lsls	r3, r3, #23
   3581e:	d505      	bpl.n	3582c <__swrite+0x1c>
   35820:	230e      	movs	r3, #14
   35822:	5ec9      	ldrsh	r1, [r1, r3]
   35824:	2200      	movs	r2, #0
   35826:	2302      	movs	r3, #2
   35828:	f000 f88e 	bl	35948 <_lseek_r>
   3582c:	89a3      	ldrh	r3, [r4, #12]
   3582e:	4a05      	ldr	r2, [pc, #20]	; (35844 <__swrite+0x34>)
   35830:	0028      	movs	r0, r5
   35832:	4013      	ands	r3, r2
   35834:	81a3      	strh	r3, [r4, #12]
   35836:	0032      	movs	r2, r6
   35838:	230e      	movs	r3, #14
   3583a:	5ee1      	ldrsh	r1, [r4, r3]
   3583c:	003b      	movs	r3, r7
   3583e:	f000 f839 	bl	358b4 <_write_r>
   35842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35844:	ffffefff 	.word	0xffffefff

00035848 <__sseek>:
   35848:	b570      	push	{r4, r5, r6, lr}
   3584a:	000c      	movs	r4, r1
   3584c:	250e      	movs	r5, #14
   3584e:	5f49      	ldrsh	r1, [r1, r5]
   35850:	f000 f87a 	bl	35948 <_lseek_r>
   35854:	89a3      	ldrh	r3, [r4, #12]
   35856:	1c42      	adds	r2, r0, #1
   35858:	d103      	bne.n	35862 <__sseek+0x1a>
   3585a:	4a05      	ldr	r2, [pc, #20]	; (35870 <__sseek+0x28>)
   3585c:	4013      	ands	r3, r2
   3585e:	81a3      	strh	r3, [r4, #12]
   35860:	bd70      	pop	{r4, r5, r6, pc}
   35862:	2280      	movs	r2, #128	; 0x80
   35864:	0152      	lsls	r2, r2, #5
   35866:	4313      	orrs	r3, r2
   35868:	81a3      	strh	r3, [r4, #12]
   3586a:	6560      	str	r0, [r4, #84]	; 0x54
   3586c:	e7f8      	b.n	35860 <__sseek+0x18>
   3586e:	46c0      	nop			; (mov r8, r8)
   35870:	ffffefff 	.word	0xffffefff

00035874 <__sclose>:
   35874:	b510      	push	{r4, lr}
   35876:	230e      	movs	r3, #14
   35878:	5ec9      	ldrsh	r1, [r1, r3]
   3587a:	f000 f82f 	bl	358dc <_close_r>
   3587e:	bd10      	pop	{r4, pc}

00035880 <strchr>:
   35880:	b2c9      	uxtb	r1, r1
   35882:	7803      	ldrb	r3, [r0, #0]
   35884:	2b00      	cmp	r3, #0
   35886:	d004      	beq.n	35892 <strchr+0x12>
   35888:	4299      	cmp	r1, r3
   3588a:	d100      	bne.n	3588e <strchr+0xe>
   3588c:	4770      	bx	lr
   3588e:	3001      	adds	r0, #1
   35890:	e7f7      	b.n	35882 <strchr+0x2>
   35892:	424b      	negs	r3, r1
   35894:	4159      	adcs	r1, r3
   35896:	4249      	negs	r1, r1
   35898:	4008      	ands	r0, r1
   3589a:	e7f7      	b.n	3588c <strchr+0xc>

0003589c <__ascii_wctomb>:
   3589c:	1e0b      	subs	r3, r1, #0
   3589e:	d004      	beq.n	358aa <__ascii_wctomb+0xe>
   358a0:	2aff      	cmp	r2, #255	; 0xff
   358a2:	d904      	bls.n	358ae <__ascii_wctomb+0x12>
   358a4:	238a      	movs	r3, #138	; 0x8a
   358a6:	6003      	str	r3, [r0, #0]
   358a8:	3b8b      	subs	r3, #139	; 0x8b
   358aa:	0018      	movs	r0, r3
   358ac:	4770      	bx	lr
   358ae:	700a      	strb	r2, [r1, #0]
   358b0:	2301      	movs	r3, #1
   358b2:	e7fa      	b.n	358aa <__ascii_wctomb+0xe>

000358b4 <_write_r>:
   358b4:	b570      	push	{r4, r5, r6, lr}
   358b6:	0005      	movs	r5, r0
   358b8:	0008      	movs	r0, r1
   358ba:	0011      	movs	r1, r2
   358bc:	2200      	movs	r2, #0
   358be:	4c06      	ldr	r4, [pc, #24]	; (358d8 <_write_r+0x24>)
   358c0:	6022      	str	r2, [r4, #0]
   358c2:	001a      	movs	r2, r3
   358c4:	f7f5 fa38 	bl	2ad38 <_write>
   358c8:	1c43      	adds	r3, r0, #1
   358ca:	d103      	bne.n	358d4 <_write_r+0x20>
   358cc:	6823      	ldr	r3, [r4, #0]
   358ce:	2b00      	cmp	r3, #0
   358d0:	d000      	beq.n	358d4 <_write_r+0x20>
   358d2:	602b      	str	r3, [r5, #0]
   358d4:	bd70      	pop	{r4, r5, r6, pc}
   358d6:	46c0      	nop			; (mov r8, r8)
   358d8:	20005ac0 	.word	0x20005ac0

000358dc <_close_r>:
   358dc:	2300      	movs	r3, #0
   358de:	b570      	push	{r4, r5, r6, lr}
   358e0:	4c06      	ldr	r4, [pc, #24]	; (358fc <_close_r+0x20>)
   358e2:	0005      	movs	r5, r0
   358e4:	0008      	movs	r0, r1
   358e6:	6023      	str	r3, [r4, #0]
   358e8:	f7f5 fa7a 	bl	2ade0 <_close>
   358ec:	1c43      	adds	r3, r0, #1
   358ee:	d103      	bne.n	358f8 <_close_r+0x1c>
   358f0:	6823      	ldr	r3, [r4, #0]
   358f2:	2b00      	cmp	r3, #0
   358f4:	d000      	beq.n	358f8 <_close_r+0x1c>
   358f6:	602b      	str	r3, [r5, #0]
   358f8:	bd70      	pop	{r4, r5, r6, pc}
   358fa:	46c0      	nop			; (mov r8, r8)
   358fc:	20005ac0 	.word	0x20005ac0

00035900 <_fstat_r>:
   35900:	2300      	movs	r3, #0
   35902:	b570      	push	{r4, r5, r6, lr}
   35904:	4c06      	ldr	r4, [pc, #24]	; (35920 <_fstat_r+0x20>)
   35906:	0005      	movs	r5, r0
   35908:	0008      	movs	r0, r1
   3590a:	0011      	movs	r1, r2
   3590c:	6023      	str	r3, [r4, #0]
   3590e:	f7f5 fa71 	bl	2adf4 <_fstat>
   35912:	1c43      	adds	r3, r0, #1
   35914:	d103      	bne.n	3591e <_fstat_r+0x1e>
   35916:	6823      	ldr	r3, [r4, #0]
   35918:	2b00      	cmp	r3, #0
   3591a:	d000      	beq.n	3591e <_fstat_r+0x1e>
   3591c:	602b      	str	r3, [r5, #0]
   3591e:	bd70      	pop	{r4, r5, r6, pc}
   35920:	20005ac0 	.word	0x20005ac0

00035924 <_isatty_r>:
   35924:	2300      	movs	r3, #0
   35926:	b570      	push	{r4, r5, r6, lr}
   35928:	4c06      	ldr	r4, [pc, #24]	; (35944 <_isatty_r+0x20>)
   3592a:	0005      	movs	r5, r0
   3592c:	0008      	movs	r0, r1
   3592e:	6023      	str	r3, [r4, #0]
   35930:	f7f5 fa6e 	bl	2ae10 <_isatty>
   35934:	1c43      	adds	r3, r0, #1
   35936:	d103      	bne.n	35940 <_isatty_r+0x1c>
   35938:	6823      	ldr	r3, [r4, #0]
   3593a:	2b00      	cmp	r3, #0
   3593c:	d000      	beq.n	35940 <_isatty_r+0x1c>
   3593e:	602b      	str	r3, [r5, #0]
   35940:	bd70      	pop	{r4, r5, r6, pc}
   35942:	46c0      	nop			; (mov r8, r8)
   35944:	20005ac0 	.word	0x20005ac0

00035948 <_lseek_r>:
   35948:	b570      	push	{r4, r5, r6, lr}
   3594a:	0005      	movs	r5, r0
   3594c:	0008      	movs	r0, r1
   3594e:	0011      	movs	r1, r2
   35950:	2200      	movs	r2, #0
   35952:	4c06      	ldr	r4, [pc, #24]	; (3596c <_lseek_r+0x24>)
   35954:	6022      	str	r2, [r4, #0]
   35956:	001a      	movs	r2, r3
   35958:	f7f5 fa63 	bl	2ae22 <_lseek>
   3595c:	1c43      	adds	r3, r0, #1
   3595e:	d103      	bne.n	35968 <_lseek_r+0x20>
   35960:	6823      	ldr	r3, [r4, #0]
   35962:	2b00      	cmp	r3, #0
   35964:	d000      	beq.n	35968 <_lseek_r+0x20>
   35966:	602b      	str	r3, [r5, #0]
   35968:	bd70      	pop	{r4, r5, r6, pc}
   3596a:	46c0      	nop			; (mov r8, r8)
   3596c:	20005ac0 	.word	0x20005ac0

00035970 <memchr>:
   35970:	b2c9      	uxtb	r1, r1
   35972:	1882      	adds	r2, r0, r2
   35974:	4290      	cmp	r0, r2
   35976:	d101      	bne.n	3597c <memchr+0xc>
   35978:	2000      	movs	r0, #0
   3597a:	4770      	bx	lr
   3597c:	7803      	ldrb	r3, [r0, #0]
   3597e:	428b      	cmp	r3, r1
   35980:	d0fb      	beq.n	3597a <memchr+0xa>
   35982:	3001      	adds	r0, #1
   35984:	e7f6      	b.n	35974 <memchr+0x4>

00035986 <_realloc_r>:
   35986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35988:	0007      	movs	r7, r0
   3598a:	000d      	movs	r5, r1
   3598c:	0016      	movs	r6, r2
   3598e:	2900      	cmp	r1, #0
   35990:	d105      	bne.n	3599e <_realloc_r+0x18>
   35992:	0011      	movs	r1, r2
   35994:	f7fe fe9e 	bl	346d4 <_malloc_r>
   35998:	0004      	movs	r4, r0
   3599a:	0020      	movs	r0, r4
   3599c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3599e:	2a00      	cmp	r2, #0
   359a0:	d103      	bne.n	359aa <_realloc_r+0x24>
   359a2:	f7fe fe4d 	bl	34640 <_free_r>
   359a6:	0034      	movs	r4, r6
   359a8:	e7f7      	b.n	3599a <_realloc_r+0x14>
   359aa:	f000 f827 	bl	359fc <_malloc_usable_size_r>
   359ae:	002c      	movs	r4, r5
   359b0:	4286      	cmp	r6, r0
   359b2:	d9f2      	bls.n	3599a <_realloc_r+0x14>
   359b4:	0031      	movs	r1, r6
   359b6:	0038      	movs	r0, r7
   359b8:	f7fe fe8c 	bl	346d4 <_malloc_r>
   359bc:	1e04      	subs	r4, r0, #0
   359be:	d0ec      	beq.n	3599a <_realloc_r+0x14>
   359c0:	0029      	movs	r1, r5
   359c2:	0032      	movs	r2, r6
   359c4:	f7fe fe18 	bl	345f8 <memcpy>
   359c8:	0029      	movs	r1, r5
   359ca:	0038      	movs	r0, r7
   359cc:	f7fe fe38 	bl	34640 <_free_r>
   359d0:	e7e3      	b.n	3599a <_realloc_r+0x14>
	...

000359d4 <_read_r>:
   359d4:	b570      	push	{r4, r5, r6, lr}
   359d6:	0005      	movs	r5, r0
   359d8:	0008      	movs	r0, r1
   359da:	0011      	movs	r1, r2
   359dc:	2200      	movs	r2, #0
   359de:	4c06      	ldr	r4, [pc, #24]	; (359f8 <_read_r+0x24>)
   359e0:	6022      	str	r2, [r4, #0]
   359e2:	001a      	movs	r2, r3
   359e4:	f7f5 f97e 	bl	2ace4 <_read>
   359e8:	1c43      	adds	r3, r0, #1
   359ea:	d103      	bne.n	359f4 <_read_r+0x20>
   359ec:	6823      	ldr	r3, [r4, #0]
   359ee:	2b00      	cmp	r3, #0
   359f0:	d000      	beq.n	359f4 <_read_r+0x20>
   359f2:	602b      	str	r3, [r5, #0]
   359f4:	bd70      	pop	{r4, r5, r6, pc}
   359f6:	46c0      	nop			; (mov r8, r8)
   359f8:	20005ac0 	.word	0x20005ac0

000359fc <_malloc_usable_size_r>:
   359fc:	1f0b      	subs	r3, r1, #4
   359fe:	681b      	ldr	r3, [r3, #0]
   35a00:	1f18      	subs	r0, r3, #4
   35a02:	2b00      	cmp	r3, #0
   35a04:	da01      	bge.n	35a0a <_malloc_usable_size_r+0xe>
   35a06:	580b      	ldr	r3, [r1, r0]
   35a08:	18c0      	adds	r0, r0, r3
   35a0a:	4770      	bx	lr

00035a0c <pcWelcomeMessage>:
   35a0c:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   35a1c:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   35a2c:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   35a3c:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   35a4c:	000a 0000 6d69 0075 6d69 3a75 5220 7465     ....imu.imu: Ret
   35a5c:	7275 736e 6120 7620 6c61 6575 6620 6f72     urns a value fro
   35a6c:	206d 6874 2065 4d49 0d55 000a 7766 0000     m the IMU...fw..
   35a7c:	7766 203a 6f44 6e77 6f6c 6461 6120 6620     fw: Download a f
   35a8c:	6c69 2065 6e61 2064 6570 6672 726f 206d     ile and perform 
   35a9c:	6e61 4620 2057 7075 6164 6574 0a0d 0000     an FW update....
   35aac:	6572 6573 0074 0000 6572 6573 3a74 5220     reset...reset: R
   35abc:	7365 7465 2073 6874 2065 6564 6976 6563     esets the device
   35acc:	0a0d 0000 656c 0064 656c 2064 6b5b 7965     ....led.led [key
   35adc:	756e 5d6d 525b 5b5d 5d47 425b 3a5d 5320     num][R][G][B]: S
   35aec:	7465 2073 6874 2065 6967 6576 206e 454c     ets the given LE
   35afc:	2044 6f74 7420 6568 6720 7669 6e65 5220     D to the given R
   35b0c:	472c 422c 7620 6c61 6575 2e73 0a0d 0000     ,G,B values.....
   35b1c:	6567 6274 7475 6f74 006e 0000 6567 6274     getbutton...getb
   35b2c:	7475 6f74 3a6e 5020 6f72 6563 7373 7365     utton: Processes
   35b3c:	6120 646e 7020 6972 746e 2073 6874 2065      and prints the 
   35b4c:	4946 4f46 6220 7475 6f74 206e 7562 6666     FIFO button buff
   35b5c:	7265 6620 6f72 206d 6874 2065 6573 7365     er from the sees
   35b6c:	7761 0d2e 000a 0000 6567 6474 7369 6174     aw......getdista
   35b7c:	636e 0065 6567 6474 7369 6174 636e 3a65     nce.getdistance:
   35b8c:	5220 7465 7275 736e 7420 6568 6420 7369      Returns the dis
   35b9c:	6174 636e 2065 7266 6d6f 7420 6568 5520     tance from the U
   35bac:	2d53 3031 2030 6553 736e 726f 0d2e 000a     S-100 Sensor....
   35bbc:	6167 656d 0000 0000 6167 656d 203a 6553     game....game: Se
   35bcc:	646e 2073 7564 6d6d 2079 6167 656d 6420     nds dummy game d
   35bdc:	7461 0d61 000a 0000 3269 0063 3269 3a63     ata.....i2c.i2c:
   35bec:	5320 6163 736e 4920 4332 6220 7375 0a0d      Scans I2C bus..
   35bfc:	0000 0000 6c63 0073 6c63 3a73 4320 656c     ....cls.cls: Cle
   35c0c:	7261 2073 6874 2065 6574 6d72 6e69 6c61     ars the terminal
   35c1c:	7320 7263 6565 0d6e 000a 0000 6f43 6c75      screen.....Coul
   35c2c:	2064 6f6e 2074 6c61 6f6c 6163 6574 7320     d not allocate s
   35c3c:	6d65 7061 6f68 6572 0a0d 0000 0a0d 0000     emaphore........
   35c4c:	616f 0000 6325 325b 0d4b 003e 2008 0008     oa..%c[2K.>.. ..
   35c5c:	6341 6563 656c 6172 6974 6e6f 5b20 676d     Acceleration [mg
   35c6c:	3a5d 2058 6425 5909 2520 0964 205a 6425     ]:X %d.Y %d.Z %d
   35c7c:	0a0d 0000 6f4e 6420 7461 2061 6572 6461     ....No data read
   35c8c:	2179 5320 6e65 6964 676e 6420 6d75 796d     y! Sending dummy
   35c9c:	6420 7461 2061 0a0d 0000 0000 6325 325b      data ......%c[2
   35cac:	004a 0000 7453 6475 6e65 7374 7420 206f     J...Students to 
   35cbc:	6966 6c6c 6f20 7475 0021 0000 7542 7474     fill out!...Butt
   35ccc:	6e6f 2320 6425 6920 2073 6572 656c 7361     on #%d is releas
   35cdc:	6465 0a0d 0000 0000 7542 7474 6e6f 2320     ed......Button #
   35cec:	6425 6920 2073 7270 7365 6573 0d64 000a     %d is pressed...
   35cfc:	6553 736e 726f 4520 7272 726f 2520 2164     Sensor Error %d!
   35d0c:	0a0d 0000 6944 7473 6e61 6563 203a 6425     ....Distance: %d
   35d1c:	6d20 0d6d 000a 0000 6944 7473 6e61 6563      mm.....Distance
   35d2c:	4420 7461 2061 514d 5454 5020 736f 0d74      Data MQTT Post.
   35d3c:	000a 0000 7544 6d6d 2079 6147 656d 4420     ....Dummy Game D
   35d4c:	7461 2061 514d 5454 5020 736f 0d74 000a     ata MQTT Post...
   35d5c:	2030 3120 2020 2032 3320 2020 2034 3520     0  1  2  3  4  5
   35d6c:	2020 2036 3720 2020 2038 3920 2020 2061       6  7  8  9  a 
   35d7c:	6220 2020 2063 6420 2020 2065 6620 0a0d      b  c  d  e  f..
   35d8c:	0000 0000 3025 7832 203a 0000 3025 7832     ....%02x: ..%02x
   35d9c:	0020 0000                                    ...

00035da0 <xImuGetCommand>:
   35da0:	5a50 0003 5a54 0003 3209 0001 0000 0000     PZ..TZ...2......

00035db0 <xOTAUCommand>:
   35db0:	5a78 0003 5a7c 0003 33b5 0001 0000 0000     xZ..|Z...3......

00035dc0 <xResetCommand>:
   35dc0:	5aac 0003 5ab4 0003 33d5 0001 0000 0000     .Z...Z...3......

00035dd0 <xNeotrellisTurnLEDCommand>:
   35dd0:	5ad0 0003 5ad4 0003 33f5 0001 0004 0000     .Z...Z...3......

00035de0 <xNeotrellisProcessButtonCommand>:
   35de0:	5b1c 0003 5b28 0003 3421 0001 0000 0000     .[..([..!4......

00035df0 <xDistanceSensorGetDistance>:
   35df0:	5b74 0003 5b80 0003 3525 0001 0000 0000     t[...[..%5......

00035e00 <xSendDummyGameData>:
   35e00:	5bbc 0003 5bc4 0003 35c9 0001 0000 0000     .[...[...5......

00035e10 <xI2cScan>:
   35e10:	5be4 0003 5be8 0003 3665 0001 0000 0000     .[...[..e6......

00035e20 <xClearScreen>:
   35e20:	5c00 0003 5c04 0003 336d 0001 0000 0000     .\...\..m3......
   35e30:	5345 3545 3631 2d20 4320 6e6f 7274 6c6f     ESE516 - Control
   35e40:	4920 696e 2074 6f43 6564 0a0d 0000 0000      Init Code......
   35e50:	5245 4f52 2052 6e49 7469 6169 696c 697a     ERROR Initializi
   35e60:	676e 4320 6e6f 7274 6c6f 4420 7461 2061     ng Control Data 
   35e70:	7571 7565 7365 0d21 000a 0000 6f43 746e     queues!.....Cont
   35e80:	6f72 206c 6854 6572 6461 203a 6f43 736e     rol Thread: Cons
   35e90:	6d75 6465 6720 6d61 2065 6170 6b63 7465     umed game packet
   35ea0:	0d21 000a 6f43 746e 6f72 206c 6854 6572     !...Control Thre
   35eb0:	6461 203a 6f43 6c75 2064 6f6e 2074 6573     ad: Could not se
   35ec0:	646e 6720 6d61 2065 6170 6b63 7465 0d21     nd game packet!.
   35ed0:	000a 0000                                   ....

00035ed4 <msgBaseGetHWID>:
   35ed4:	0100 0000                                   ....

00035ed8 <msgNeopixelPin>:
   35ed8:	010e 0003                                   ....

00035edc <msgNeopixelSpeed>:
   35edc:	020e 0001                                   ....

00035ee0 <msgNeopixelBufLength>:
   35ee0:	030e 3000                                   ...0

00035ee4 <msgKeypadEnableInt>:
   35ee4:	0210 0001                                   ....

00035ee8 <msgKeypadGetCount>:
   35ee8:	0410 0000 7245 6f72 2072 6e69 7469 6169     ....Error initia
   35ef8:	696c 697a 676e 5320 6565 6173 2177 722f     lizing Seesaw!/r
   35f08:	6e2f 0000 7245 6f72 2f72 2f72 006e 0000     /n..Error/r/n...
   35f18:	6f46 6e75 2064 6553 7365 7761 2f21 2f72     Found Seesaw!/r/
   35f28:	006e 0000 6f43 6c75 2064 6f6e 2074 7277     n...Could not wr
   35f38:	7469 2065 6553 7365 7761 7020 6e69 2f21     ite Seesaw pin!/
   35f48:	2f72 006e 6f43 6c75 2064 6f6e 2074 6573     r/n.Could not se
   35f58:	2074 6573 7365 7761 4e20 6f65 6970 6578     t seesaw Neopixe
   35f68:	206c 7073 6565 2164 722f 6e2f 0000 0000     l speed!/r/n....
   35f78:	6f43 6c75 2064 6f6e 2074 6573 2074 6573     Could not set se
   35f88:	7365 7761 4e20 6f65 6970 6578 206c 756e     esaw Neopixel nu
   35f98:	626d 7265 6f20 2066 6564 6976 6563 2f73     mber of devices/
   35fa8:	2f72 006e 7245 6f72 2072 6572 6461 6e69     r/n.Error readin
   35fb8:	2067 6553 7365 7761 6320 756f 746e 2173     g Seesaw counts!
   35fc8:	722f 6e2f 0000 0000 1010 0000 050e 0000     /r/n............
   35fd8:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   35fe8:	696c 657a 4b20 7965 6170 2164 722f 6e2f     lize Keypad!/r/n
   35ff8:	0000 0000 4955 5420 7361 206b 7453 7261     ....UI Task Star
   36008:	6574 2164 0000 0000                         ted!....

00036010 <main_mqtt_broker>:
   36010:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   36020:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   36030:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   36040:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   36050:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   36060:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   36070:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   36080:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   36090:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   360a0:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   360b0:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   360c0:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   360d0:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   360e0:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   360f0:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   36100:	2e2e 0d2e 000a 0000 7468 7074 3a73 2f2f     ........https://
   36110:	7777 2e77 6573 7361 752e 6570 6e6e 652e     www.seas.upenn.e
   36120:	7564 7e2f 6465 6167 6372 492f 546f 702e     du/~edgarc/IoT.p
   36130:	6664 0000 7473 726f 5f65 6966 656c 705f     df..store_file_p
   36140:	6361 656b 3a74 6520 706d 7974 6420 7461     acket: empty dat
   36150:	2e61 0a0d 0000 0000 7473 726f 5f65 6966     a.......store_fi
   36160:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   36170:	616e 656d 6920 2073 6e69 6176 696c 2e64     name is invalid.
   36180:	4420 776f 6c6e 616f 2064 6163 636e 6c65      Download cancel
   36190:	6465 0d2e 000a 0000 7473 726f 5f65 6966     ed......store_fi
   361a0:	656c 705f 6361 656b 3a74 6320 6572 7461     le_packet: creat
   361b0:	6e69 2067 6966 656c 5b20 7325 0d5d 000a     ing file [%s]...
   361c0:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   361d0:	3a74 6620 6c69 2065 7263 6165 6974 6e6f     t: file creation
   361e0:	6520 7272 726f 2021 6572 3a74 6425 0a0d      error! ret:%d..
   361f0:	0000 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   36200:	6361 656b 3a74 6620 6c69 2065 7277 7469     acket: file writ
   36210:	2065 7265 6f72 2c72 6420 776f 6c6e 616f     e error, downloa
   36220:	2064 6163 636e 6c65 6465 0d2e 000a 0000     d canceled......
   36230:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   36240:	3a74 7220 6365 6965 6576 5b64 6c25 5d75     t: received[%lu]
   36250:	202c 6966 656c 7320 7a69 5b65 6c25 5d75     , file size[%lu]
   36260:	0a0d 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   36270:	6361 656b 3a74 6620 6c69 2065 6f64 6e77     acket: file down
   36280:	6f6c 6461 6465 7320 6375 6563 7373 7566     loaded successfu
   36290:	6c6c 2e79 0a0d 0000 7468 7074 635f 696c     lly.....http_cli
   362a0:	6e65 5f74 6163 6c6c 6162 6b63 203a 5448     ent_callback: HT
   362b0:	5054 6320 696c 6e65 2074 6f73 6b63 7465     TP client socket
   362c0:	6320 6e6f 656e 7463 6465 0d2e 000a 0000      connected......
   362d0:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   362e0:	6162 6b63 203a 6572 7571 7365 2074 6f63     back: request co
   362f0:	706d 656c 6574 2e64 0a0d 0000 7468 7074     mpleted.....http
   36300:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   36310:	203a 6572 6563 7669 6465 7220 7365 6f70     : received respo
   36320:	736e 2065 7525 6420 7461 2061 6973 657a     nse %u data size
   36330:	2520 0d75 000a 0000 7468 7074 635f 696c      %u.....http_cli
   36340:	6e65 5f74 6163 6c6c 6162 6b63 203a 6964     ent_callback: di
   36350:	6373 6e6f 656e 7463 6f69 206e 6572 7361     sconnection reas
   36360:	6e6f 253a 0d64 000a 6572 6f73 766c 5f65     on:%d...resolve_
   36370:	6263 203a 7325 4920 2050 6461 7264 7365     cb: %s IP addres
   36380:	2073 7369 2520 2e64 6425 252e 2e64 6425     s is %d.%d.%d.%d
   36390:	0a0d 0a0d 0000 0000 6977 6966 635f 3a62     ........wifi_cb:
   363a0:	4d20 4d32 575f 4649 5f49 4f43 4e4e 4345      M2M_WIFI_CONNEC
   363b0:	4554 0d44 000a 0000 6977 6966 635f 3a62     TED.....wifi_cb:
   363c0:	4d20 4d32 575f 4649 5f49 4944 4353 4e4f      M2M_WIFI_DISCON
   363d0:	454e 5443 4445 0a0d 0000 0000 7241 696d     NECTED......Armi
   363e0:	6174 6567 0000 0000 6445 6957 6966 0000     tage....EdWifi..
   363f0:	6977 6966 635f 3a62 4920 2050 6461 7264     wifi_cb: IP addr
   36400:	7365 2073 7369 2520 2e75 7525 252e 2e75     ess is %u.%u.%u.
   36410:	7525 0a0d 0000 0000 7245 6f72 2072 6f63     %u......Error co
   36420:	6e6e 6365 6974 676e 7420 206f 514d 5454     nnecting to MQTT
   36430:	4220 6f72 656b 2172 0a0d 0000 6e69 7469      Broker!....init
   36440:	735f 6f74 6172 6567 203a 6c70 6165 6573     _storage: please
   36450:	7020 756c 2067 6e61 5320 2f44 4d4d 2043      plug an SD/MMC 
   36460:	6163 6472 6920 206e 6c73 746f 2e2e 0d2e     card in slot....
   36470:	000a 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   36480:	203a 4453 4320 7261 2064 6e69 7473 6c61     : SD Card instal
   36490:	206c 6166 6c69 6465 0d2e 000a 6e69 7469     l failed....init
   364a0:	735f 6f74 6172 6567 203a 7274 2079 6e75     _storage: try un
   364b0:	6c70 6775 6120 646e 7220 2d65 6c70 6775     plug and re-plug
   364c0:	7420 6568 6320 7261 2e64 0a0d 0000 0000      the card.......
   364d0:	6e69 7469 735f 6f74 6172 6567 203a 6f6d     init_storage: mo
   364e0:	6e75 6974 676e 5320 2044 6163 6472 2e2e     unting SD card..
   364f0:	0d2e 000a 6e69 7469 735f 6f74 6172 6567     ....init_storage
   36500:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   36510:	6166 6c69 6465 2021 7228 7365 2520 2964     failed! (res %d)
   36520:	0a0d 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   36530:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   36540:	4b4f 0d2e 000a 0000 6f63 666e 6769 7275     OK......configur
   36550:	5f65 7468 7074 635f 696c 6e65 3a74 4820     e_http_client: H
   36560:	5454 2050 6c63 6569 746e 6920 696e 6974     TTP client initi
   36570:	6c61 7a69 7461 6f69 206e 6166 6c69 6465     alization failed
   36580:	2021 7228 7365 2520 2964 0a0d 0000 0000     ! (res %d)......
   36590:	0a0d 2520 2a2e 0073 6772 2862 0000 0000     .. %.*s.rgb(....
   365a0:	0a0d 4752 2042 6425 2520 2064 6425 0a0d     ..RGB %d %d %d..
   365b0:	0000 0000 227b 6167 656d 3a22 005b 0000     ....{"game":[...
   365c0:	0a0d 6147 656d 6d20 7365 6173 6567 7220     ..Game message r
   365d0:	6365 6965 6576 2164 0a0d 0000 2e25 732a     eceived!....%.*s
   365e0:	0000 0000 0a0d 6150 7372 6465 4320 6d6f     ......Parsed Com
   365f0:	616d 646e 203a 0000 6425 002c 0a0d 6553     mand: ..%d,...Se
   36600:	746e 7020 616c 2079 6f74 6320 6e6f 7274     nt play to contr
   36610:	6c6f 0d21 000a 0000 0a0d 6147 656d 6d20     ol!.......Game m
   36620:	7365 6173 6567 7220 6365 6965 6576 2064     essage received 
   36630:	7562 2074 6f6e 2074 6e75 6564 7372 6f74     but not understo
   36640:	646f 0d21 000a 0000 0a0d 4d49 2055 6f74     od!.......IMU to
   36650:	6970 2063 6572 6563 7669 6465 0d21 000a     pic received!...
   36660:	0a0d 6944 7473 6e61 6563 7420 706f 6369     ..Distance topic
   36670:	7220 6365 6965 6576 2164 0a0d 0000 0000      received!......
   36680:	3e20 203e 0000 0000 3150 4c5f 4445 455f      >> ....P1_LED_E
   36690:	4553 3135 5f36 3054 0000 0000 6166 736c     SE516_T0....fals
   366a0:	0065 0000 7274 6575 0000 0000 0a0d 6f43     e...true......Co
   366b0:	6e6e 6365 6974 676e 7420 206f 7242 6b6f     nnecting to Brok
   366c0:	7265 2e2e 002e 0000 7242 4a73 4e42 6f56     er......BrsJBNVo
   366d0:	4251 376c 0000 0000 7472 7974 626f 6a65     QBl7....rttyobej
   366e0:	0000 0000 514d 5454 2020 7245 6f72 2072     ....MQTT  Error 
   366f0:	202d 4f4e 2054 6f43 6e6e 6365 6574 2064     - NOT Connected 
   36700:	6f74 6220 6f72 656b 0d72 000a 514d 5454     to broker...MQTT
   36710:	4320 6e6f 656e 7463 6465 7420 206f 7262      Connected to br
   36720:	6b6f 7265 0a0d 0000 6f43 6e6e 6365 2074     oker....Connect 
   36730:	6166 6c69 7420 206f 6573 7672 7265 2528     fail to server(%
   36740:	2973 2021 6572 7274 2079 7469 6120 7475     s)! retry it aut
   36750:	6d6f 7461 6369 6c61 796c 0d2e 000a 0000     omatically......
   36760:	3150 475f 4d41 5f45 5345 3545 3631 545f     P1_GAME_ESE516_T
   36770:	0030 0000 3150 495f 554d 455f 4553 3135     0...P1_IMU_ESE51
   36780:	5f36 3054 0000 0000 514d 5454 4320 6e6f     6_T0....MQTT Con
   36790:	656e 7463 6465 0a0d 0000 0000 514d 5454     nected......MQTT
   367a0:	6220 6f72 656b 2072 6564 6c63 6e69 2065      broker decline 
   367b0:	6f79 7275 6120 6363 7365 2173 6520 7272     your access! err
   367c0:	726f 6320 646f 2065 6425 0a0d 0000 0000     or code %d......
   367d0:	514d 5454 6420 7369 6f63 6e6e 6365 6574     MQTT disconnecte
   367e0:	0d64 000a 514d 5454 6920 696e 6974 6c61     d...MQTT initial
   367f0:	7a69 7461 6f69 206e 6166 6c69 6465 202e     ization failed. 
   36800:	7245 6f72 2072 6f63 6564 6920 2073 2528     Error code is (%
   36810:	2964 0a0d 0000 0000 514d 5454 7220 6765     d)......MQTT reg
   36820:	7369 6574 2072 6163 6c6c 6162 6b63 6620     ister callback f
   36830:	6961 656c 2e64 4520 7272 726f 6320 646f     ailed. Error cod
   36840:	2065 7369 2820 6425 0d29 000a 227b 2264     e is (%d)...{"d"
   36850:	7b3a 7422 6d65 2270 253a 7d64 007d 0000     :{"temp":%d}}...
   36860:	465b 4941 5d4c 7220 7365 2520 0d64 000a     [FAIL] res %d...
   36870:	6c46 6761 2e41 7874 2074 6461 6564 2164     FlagA.txt added!
   36880:	0a0d 0000 3a30 6c46 6761 2e41 7874 0074     ....0:FlagA.txt.
   36890:	6f43 6e6e 6365 6574 2064 6f74 4d20 5451     Connected to MQT
   368a0:	2054 7242 6b6f 7265 0d21 000a 227b 6d69     T Broker!...{"im
   368b0:	7875 3a22 6425 202c 6922 756d 2279 203a     ux":%d, "imuy": 
   368c0:	6425 202c 6922 756d 227a 203a 6425 007d     %d, "imuz": %d}.
   368d0:	6425 0000 7d5d 0000 0a0d 0000 3250 475f     %d..]}......P2_G
   368e0:	4d41 5f45 5345 3545 3631 545f 0030 0000     AME_ESE516_T0...
   368f0:	5245 4f52 2052 6e49 7469 6169 696c 697a     ERROR Initializi
   36900:	676e 5720 6669 2069 6144 6174 7120 6575     ng Wifi Data que
   36910:	6575 2173 0a0d 0000 5345 3545 3631 2d20     ues!....ESE516 -
   36920:	5720 6669 2069 6e49 7469 4320 646f 0d65      Wifi Init Code.
   36930:	000a 0000 616d 6e69 203a 326d 5f6d 6977     ....main: m2m_wi
   36940:	6966 695f 696e 2074 6163 6c6c 6520 7272     fi_init call err
   36950:	726f 2021 7228 7365 2520 2964 0a0d 0000     or! (res %d)....
   36960:	616d 6e69 203a 6f63 6e6e 6365 6974 676e     main: connecting
   36970:	7420 206f 6957 6946 4120 2050 7325 2e2e      to WiFi AP %s..
   36980:	0d2e 000a 3150 545f 4d45 4550 4152 5554     ....P1_TEMPERATU
   36990:	4552 455f 4553 3135 5f36 3054 0000 0000     RE_ESE516_T0....
   369a0:	514d 5454 7320 6e65 2064 7325 0a0d 0000     MQTT send %s....
   369b0:	5f7c 0001 5f88 0001 5f9a 0001 5ff0 0001     |_..._..._..._..
   369c0:	6010 0001 6568 706c 0000 0000 0a0d 6568     .`..help......he
   369d0:	706c 0d3a 200a 694c 7473 2073 6c61 206c     lp:.. Lists all 
   369e0:	6874 2065 6572 6967 7473 7265 6465 6320     the registered c
   369f0:	6d6f 616d 646e 0d73 0d0a 000a 6e49 6f63     ommands.....Inco
   36a00:	7272 6365 2074 6f63 6d6d 6e61 2064 6170     rrect command pa
   36a10:	6172 656d 6574 2872 2973 202e 4520 746e     rameter(s).  Ent
   36a20:	7265 2220 6568 706c 2022 6f74 7620 6569     er "help" to vie
   36a30:	2077 2061 696c 7473 6f20 2066 7661 6961     w a list of avai
   36a40:	616c 6c62 2065 6f63 6d6d 6e61 7364 0d2e     lable commands..
   36a50:	0d0a 000a 6f43 6d6d 6e61 2064 6f6e 2074     ....Command not 
   36a60:	6572 6f63 6e67 7369 6465 202e 4520 746e     recognised.  Ent
   36a70:	7265 2720 6568 706c 2027 6f74 7620 6569     er 'help' to vie
   36a80:	2077 2061 696c 7473 6f20 2066 7661 6961     w a list of avai
   36a90:	616c 6c62 2065 6f63 6d6d 6e61 7364 0d2e     lable commands..
   36aa0:	0d0a 000a                                   ....

00036aa4 <xHelpCommand>:
   36aa4:	69c4 0003 69cc 0003 7c51 0001 0000 0000     .i...i..Q|......
   36ab4:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   36ac4:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   36ad4:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   36ae4:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   36af4:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   36b04:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   36b14:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   36b24:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   36b34:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   36b44:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   36b54:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   36b64:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   36b74:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   36b84:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   36b94:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   36ba4:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   36bb4:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   36bc4:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   36bd4:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   36be4:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   36bf4:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   36c04:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   36c14:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   36c24:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   36c34:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   36c44:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   36c54:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   36c64:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   36c74:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   36c84:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   36c94:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   36ca4:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   36cb4:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   36cc4:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   36cd4:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   36ce4:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   36cf4:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   36d04:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   36d14:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   36d24:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   36d34:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   36d44:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   36d54:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   36d64:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   36d74:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   36d84:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   36d94:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   36da4:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   36db4:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   36dc4:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   36dd4:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   36de4:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   36df4:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   36e04:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   36e14:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   36e24:	6365 6374 616c 7373 0021 0000 8376 0001     ectclass!...v...
   36e34:	836e 0001 8372 0001 8366 0001 836a 0001     n...r...f...j...
   36e44:	837a 0001 837e 0001 8382 0001 8386 0001     z...~...........
   36e54:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   36e64:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   36e74:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   36e84:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   36e94:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   36ea4:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   36eb4:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   36ec4:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   36ed4:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   36ee4:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   36ef4:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   36f04:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   36f14:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   36f24:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   36f34:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   36f44:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   36f54:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   36f64:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   36f74:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   36f84:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   36f94:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   36fa4:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   36fb4:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   36fc4:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   36fd4:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   36fe4:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   36ff4:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   37004:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   37014:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   37024:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   37034:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   37044:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   37054:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   37064:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   37074:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   37084:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   37094:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   370a4:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   370b4:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   370c4:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   370d4:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   370e4:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   370f4:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   37104:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   37114:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   37124:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   37134:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   37144:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   37154:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   37164:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   37174:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   37184:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   37194:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   371a4:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   371b4:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   371c4:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   371d4:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   371e4:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   371f4:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   37204:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37214:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   37224:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   37234:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   37244:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   37254:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   37264:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   37274:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37284:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   37294:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   372a4:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   372b4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   372c4:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   372d4:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   372e4:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   372f4:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   37304:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   37314:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   37324:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37334:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37344:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37354:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   37364:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   37374:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   37384:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   37394:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   373a4:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   373b4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   373c4:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   373d4:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   373e4:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   373f4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37404:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37414:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   37424:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   37434:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   37444:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37454:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37464:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   37474:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   37484:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   37494:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   374a4:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   374b4:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   374c4:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   374d4:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   374e4:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   374f4:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   37504:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37514:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   37524:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   37534:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   37544:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   37554:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   37564:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   37574:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   37584:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   37594:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   375a4:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   375b4:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   375c4:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   375d4:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   375e4:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   375f4:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   37604:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   37614:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   37624:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37634:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37644:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   37654:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   37664:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   37674:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   37684:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   37694:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   376a4:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   376b4:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   376c4:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   376d4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   376e4:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   376f4:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   37704:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   37714:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   37724:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   37734:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   37744:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   37754:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   37764:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   37774:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37784:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   37794:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   377a4:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   377b4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   377c4:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   377d4:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   377e4:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   377f4:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37804:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37814:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   37824:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   37834:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   37844:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37854:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   37864:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   37874:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   37884:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37894:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   378a4:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   378b4:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   378c4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   378d4:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   378e4:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   378f4:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   37904:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37914:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   37924:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   37934:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   37944:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37954:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   37964:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   37974:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   37984:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   37994:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   379a4:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   379b4:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   379c4:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   379d4:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   379e4:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   379f4:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   37a04:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   37a14:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   37a24:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   37a34:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   37a44:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   37a54:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   37a64:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   37a74:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   37a84:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37a94:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   37aa4:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   37ab4:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   37ac4:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   37ad4:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   37ae4:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   37af4:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   37b04:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   37b14:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37b24:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   37b34:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   37b44:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   37b54:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   37b64:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   37b74:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   37b84:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37b94:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   37ba4:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   37bb4:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   37bc4:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   37bd4:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   37be4:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   37bf4:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   37c04:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   37c14:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   37c24:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   37c34:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   37c44:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   37c54:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   37c64:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   37c74:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   37c84:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   37c94:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   37ca4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37cb4:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   37cc4:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   37cd4:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   37ce4:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   37cf4:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   37d04:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   37d14:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   37d24:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   37d34:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   37d44:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37d54:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   37d64:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   37d74:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   37d84:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   37d94:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   37da4:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   37db4:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   37dc4:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   37dd4:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   37de4:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   37df4:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   37e04:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   37e14:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   37e24:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   37e34:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37e44:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   37e54:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   37e64:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   37e74:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   37e84:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   37e94:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   37ea4:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   37eb4:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   37ec4:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   37ed4:	0000 0000 6d54 2072 7653 0063 d418 0001     ....Tmr Svc.....
   37ee4:	d418 0001 d418 0001 d4a6 0001 d470 0001     ............p...
   37ef4:	d49a 0001 d418 0001 d418 0001 d4a6 0001     ................
   37f04:	d470 0001                                   p...

00037f08 <sd_mmc_trans_units>:
   37f08:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00037f24 <sd_trans_multipliers>:
   37f24:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   37f34:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   37f44:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   37f54:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00037f64 <mmc_trans_multipliers>:
   37f64:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   37f74:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   37f84:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   37f94:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   37fa4:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   37fb4:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   37fc4:	746c 6320 646d 000a 000d 0000               lt cmd......

00037fd0 <__FUNCTION__.17099>:
   37fd0:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   37fe0:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   37ff0:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   38000:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   38010:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   38020:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   38030:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   38040:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   38050:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   38060:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   38070:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   38080:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   38090:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   380a0:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   380b0:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   380c0:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   380d0:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   380e0:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   380f0:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   38100:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   38110:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   38120:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   38130:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   38140:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   38150:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   38160:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   38170:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   38180:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   38190:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   381a0:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   381b0:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   381c0:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   381d0:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   381e0:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   381f0:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   38200:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   38210:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   38220:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   38230:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   38240:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   38250:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   38260:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   38270:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   38280:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   38290:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   382a0:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   382b0:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   382c0:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   382d0:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   382e0:	203f 6425 000a 0000 15b8 0002 1588 0002     ? %d............
   382f0:	1580 0002 1598 0002 1590 0002 15b0 0002     ................
   38300:	15a0 0002 15a8 0002                         ........

00038308 <__FUNCTION__.17967>:
   38308:	6968 5f66 6573 646e 0000 0000               hif_send....

00038314 <__FUNCTION__.17977>:
   38314:	6968 5f66 7369 0072                         hif_isr.

0003831c <__FUNCTION__.17986>:
   3831c:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0003832c <__FUNCTION__.17998>:
   3832c:	6968 5f66 6572 6563 7669 0065               hif_receive.

00038338 <__FUNCTION__.18014>:
   38338:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   38348:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   38358:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   38368:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   38378:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   38388:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   38398:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   383a8:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   383b8:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   383c8:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   383d8:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   383e8:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   383f8:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   38408:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   38418:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   38428:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   38438:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   38448:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   38458:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   38468:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   38478:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   38488:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   38498:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   384a8:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   384b8:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   384c8:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   384d8:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   384e8:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   384f8:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   38508:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   38518:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   38528:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   38538:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   38548:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   38558:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   38568:	000a 0000 3031 353a 3a37 3030 0000 0000     ....10:57:00....
   38578:	7041 2072 3931 3220 3230 0032 7244 7669     Apr 19 2022.Driv
   38588:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   38598:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   385a8:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   385b8:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   385c8:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   385d8:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   385e8:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   385f8:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   38608:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   38618:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   38628:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   38638:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   38648:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   38658:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   38668:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   38678:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   38688:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   38698:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   386a8:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   386b8:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   386c8:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   386d8:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   386e8:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   386f8:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   38708:	4220 6675 6566 0a72 0000 0000                Buffer.....

00038714 <__FUNCTION__.17949>:
   38714:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00038720 <__FUNCTION__.17978>:
   38720:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00038730 <__FUNCTION__.18009>:
   38730:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   38740:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   38750:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   38760:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   38770:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   38780:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   38790:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   387a0:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   387b0:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   387c0:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

000387d0 <__FUNCTION__.17806>:
   387d0:	6863 7069 775f 6b61 0065 0000               chip_wake...

000387dc <__FUNCTION__.17855>:
   387dc:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   387ec:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   387fc:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   3880c:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   3881c:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   3882c:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   3883c:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   3884c:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   3885c:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   3886c:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   3887c:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   3888c:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   3889c:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   388ac:	6920 696e 2074 7562 0a73 0000                init bus...

000388b8 <__FUNCTION__.17853>:
   388b8:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

000388c4 <__FUNCTION__.17860>:
   388c4:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

000388d4 <crc7_syndrome_table>:
   388d4:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   388e4:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   388f4:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   38904:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   38914:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   38924:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   38934:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   38944:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   38954:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   38964:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   38974:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   38984:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   38994:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   389a4:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   389b4:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   389c4:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   389d4:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   389e4:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   389f4:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   38a04:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   38a14:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38a24:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   38a34:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38a44:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   38a54:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   38a64:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   38a74:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   38a84:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   38a94:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   38aa4:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   38ab4:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   38ac4:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   38ad4:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   38ae4:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   38af4:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   38b04:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38b14:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   38b24:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   38b34:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   38b44:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   38b54:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   38b64:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   38b74:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   38b84:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   38b94:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   38ba4:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   38bb4:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   38bc4:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   38bd4:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   38be4:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   38bf4:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   38c04:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   38c14:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   38c24:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   38c34:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38c44:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   38c54:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   38c64:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   38c74:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   38c84:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   38c94:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   38ca4:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   38cb4:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   38cc4:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   38cd4:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   38ce4:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   38cf4:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   38d04:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38d14:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   38d24:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   38d34:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   38d44:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   38d54:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   38d64:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   38d74:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   38d84:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   38d94:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   38da4:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   38db4:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38dc4:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   38dd4:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   38de4:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   38df4:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   38e04:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   38e14:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   38e24:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   38e34:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   38e44:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   38e54:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   38e64:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   38e74:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   38e84:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   38e94:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   38ea4:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   38eb4:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   38ec4:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   38ed4:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   38ee4:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   38ef4:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   38f04:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   38f14:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   38f24:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   38f34:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   38f44:	2e2e 0a2e 0000 0000 31e0 0002 31e0 0002     .........1...1..
   38f54:	3270 0002 3134 0002 317a 0002 319c 0002     p2..41..z1...1..
   38f64:	3222 0002 3222 0002 32dc 0002 3108 0002     "2.."2...2...1..
   38f74:	3336 0002 3336 0002 3336 0002 3336 0002     63..63..63..63..
   38f84:	31be 0002 3740 0002 3740 0002 37c8 0002     .1..@7..@7...7..
   38f94:	36a4 0002 36e6 0002 3704 0002 377e 0002     .6...6...7..~7..
   38fa4:	377e 0002 382a 0002 367c 0002 387a 0002     ~7..*8..|6..z8..
   38fb4:	387a 0002 387a 0002 387a 0002 3722 0002     z8..z8..z8.."7..

00038fc4 <__FUNCTION__.17128>:
   38fc4:	7073 5f69 6d63 0064                         spi_cmd.

00038fcc <__FUNCTION__.17135>:
   38fcc:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00038fdc <__FUNCTION__.17144>:
   38fdc:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00038fe8 <__FUNCTION__.17177>:
   38fe8:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   38ff8:	0000 0000                                   ....

00038ffc <__FUNCTION__.17223>:
   38ffc:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0003900c <__FUNCTION__.17235>:
   3900c:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0003901c <__FUNCTION__.17246>:
   3901c:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0003902c <__FUNCTION__.17258>:
   3902c:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0003903c <__FUNCTION__.17269>:
   3903c:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00039048 <__FUNCTION__.17290>:
   39048:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   39058:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   39068:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   39078:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   39088:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   39098:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   390a8:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   390b8:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   390c8:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   390d8:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   390e8:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   390f8:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   39108:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   39118:	2074 2230 0000 0000                         t 0"....

00039120 <lun_desc>:
   39120:	ee3d 0001 ee95 0001 eee1 0001 ef2d 0001     =...........-...
   39130:	ef5d 0001 efe1 0001 f071 0001 9108 0003     ].......q.......
   39140:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   39150:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   39160:	915e 0002 91d8 0002 91d8 0002 917c 0002     ^...........|...
   39170:	9176 0002 9182 0002 9164 0002 9188 0002     v.......d.......
   39180:	91be 0002 93c0 0002 9410 0002 9410 0002     ................
   39190:	940c 0002 93b2 0002 93d2 0002 93a2 0002     ................
   391a0:	93e4 0002 93f6 0002 945e 0002 948c 0002     ........^.......
   391b0:	948c 0002 9488 0002 9458 0002 9464 0002     ........X...d...
   391c0:	9452 0002 946a 0002 9470 0002               R...j...p...

000391cc <tcc_modules>:
   391cc:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

000391d8 <_tcc_gclk_ids>:
   391d8:	1a1a 001b                                   ....

000391dc <_tcc_apbcmasks>:
   391dc:	0100 0000 0200 0000 0400 0000               ............

000391e8 <_tcc_maxs>:
   391e8:	ffff 00ff ffff 00ff ffff 0000               ............

000391f4 <_tcc_cc_nums>:
   391f4:	0204 0002                                   ....

000391f8 <_tcc_ow_nums>:
   391f8:	0408 0002                                   ....

000391fc <_tcc_intflag>:
   391fc:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   3920c:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   3921c:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0003922c <LfnOfs>:
   3922c:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   3923c:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   3924c:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   3925c:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   3926c:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   3927c:	5441 2020 2020 0020                         AT     .

00039284 <excvt.4558>:
   39284:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   39294:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   392a4:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   392b4:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   392c4:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   392d4:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   392e4:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   392f4:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

00039304 <Tbl>:
   39304:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   39314:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   39324:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   39334:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   39344:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   39354:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   39364:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   39374:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   39384:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   39394:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   393a4:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   393b4:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   393c4:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   393d4:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   393e4:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   393f4:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

00039404 <tbl_lower.4308>:
   39404:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   39414:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   39424:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   39434:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   39444:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   39454:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   39464:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   39474:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   39484:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   39494:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   394a4:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   394b4:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   394c4:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   394d4:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   394e4:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   394f4:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   39504:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   39514:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   39524:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   39534:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   39544:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   39554:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   39564:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   39574:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   39584:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   39594:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   395a4:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   395b4:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   395c4:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   395d4:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

000395e4 <tbl_upper.4309>:
   395e4:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   395f4:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   39604:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   39614:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   39624:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   39634:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   39644:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   39654:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   39664:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   39674:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   39684:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   39694:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   396a4:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   396b4:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   396c4:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   396d4:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   396e4:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   396f4:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   39704:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   39714:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   39724:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   39734:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   39744:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   39754:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   39764:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   39774:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   39784:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   39794:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   397a4:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   397b4:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   397c4:	e7ca 0002 e7ca 0002 e7ca 0002 e658 0002     ............X...
   397d4:	e7ca 0002 e742 0002 e7ca 0002 e7ca 0002     ....B...........
   397e4:	e7ca 0002 e7ca 0002 e7ca 0002 e7ca 0002     ................
   397f4:	e7ca 0002 e7bc 0002 514d 4354 0000 0000     ........MQTC....
   39804:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   39814:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   39854:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   3986c:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   398ac:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   398bc:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   398cc:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   398dc:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   398ec:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   398fc:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   3990c:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   3991c:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   3992c:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   3993c:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   3994c:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   3995c:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   3996c:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   3997c:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   3998c:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   3999c:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   399ac:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   399bc:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   399cc:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   399dc:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   399ec:	5448 5054 002f 0000 0d31 0000 08be 0003     HTTP/...1.......
   399fc:	08b8 0003 08b2 0003 08ac 0003 08c4 0003     ................
   39a0c:	08a6 0003 08c4 0003 08a0 0003 089a 0003     ................
   39a1c:	08c4 0003 0894 0003 0894 0003 088e 0003     ................
   39a2c:	0888 0003 0882 0003 2000 4200 2400 4200     ......... .B.$.B
   39a3c:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   39a4c:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   39a5c:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   39a6c:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   39a7c:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   39a8c:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   39a9c:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   39aac:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   39abc:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   39acc:	676e 5320 6565 6173 2177 0a0d 0000 0000     ng Seesaw!......
   39adc:	6e49 7469 6169 696c 657a 2064 6553 7365     Initialized Sees
   39aec:	7761 0d21 000a 0000 6143 6e6e 746f 6620     aw!.....Cannot f
   39afc:	6e69 2064 4d49 2155 0a0d 0000 4d49 2055     ind IMU!....IMU 
   39b0c:	6f66 6e75 2164 0a0d 0000 0000 4d49 2055     found!......IMU 
   39b1c:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   39b2c:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   39b3c:	696c 657a 4920 554d 0a0d 0000 6548 7061     lize IMU....Heap
   39b4c:	6220 6665 726f 2065 7473 7261 6974 676e      before starting
   39b5c:	7420 7361 736b 203a 6425 0a0d 0000 0000      tasks: %d......
   39b6c:	4c43 5f49 4154 4b53 0000 0000 5245 3a52     CLI_TASK....ERR:
   39b7c:	4320 494c 7420 7361 206b 6f63 6c75 2064      CLI task could 
   39b8c:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   39b9c:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   39bac:	7265 7320 6174 7472 6e69 2067 4c43 3a49     er starting CLI:
   39bbc:	2520 0d64 000a 0000 4957 4946 545f 5341      %d.....WIFI_TAS
   39bcc:	004b 0000 5245 3a52 5720 4649 2049 6174     K...ERR: WIFI ta
   39bdc:	6b73 6320 756f 646c 6e20 746f 6220 2065     sk could not be 
   39bec:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   39bfc:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   39c0c:	6e69 2067 4957 4946 203a 6425 0a0d 0000     ing WIFI: %d....
   39c1c:	4955 5420 7361 006b 5245 3a52 5520 2049     UI Task.ERR: UI 
   39c2c:	6174 6b73 6320 756f 646c 6e20 746f 6220     task could not b
   39c3c:	2065 6e69 7469 6169 696c 657a 2164 0a0d     e initialized!..
   39c4c:	0000 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   39c5c:	6174 7472 6e69 2067 4955 5420 7361 3a6b     tarting UI Task:
   39c6c:	2520 0d64 000a 0000 6f43 746e 6f72 206c      %d.....Control 
   39c7c:	6154 6b73 0000 0000 5245 3a52 4320 6e6f     Task....ERR: Con
   39c8c:	7274 6c6f 7420 7361 206b 6f63 6c75 2064     trol task could 
   39c9c:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   39cac:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   39cbc:	7265 7320 6174 7472 6e69 2067 6f43 746e     er starting Cont
   39ccc:	6f72 206c 6154 6b73 203a 6425 0a0d 0000     rol Task: %d....
   39cdc:	7245 6f72 2072 6e6f 6d20 6d65 726f 2079     Error on memory 
   39cec:	6c61 6f6c 6163 6974 6e6f 6f20 206e 5246     allocation on FR
   39cfc:	4545 5452 534f 0d21 000a 0000 7245 6f72     EERTOS!.....Erro
   39d0c:	2072 6e6f 7320 6174 6b63 6f20 6576 6672     r on stack overf
   39d1c:	6f6c 2077 6e6f 4620 4552 5245 4f54 2153     low on FREERTOS!
   39d2c:	0a0d 0000 2ac0 0003 2a10 0003 2a10 0003     .....*...*...*..
   39d3c:	2a0e 0003 2ab2 0003 2ab2 0003 2aa8 0003     .*...*...*...*..
   39d4c:	2a0e 0003 2ab2 0003 2aa8 0003 2ab2 0003     .*...*...*...*..
   39d5c:	2a0e 0003 2ab8 0003 2ab8 0003 2ab8 0003     .*...*...*...*..
   39d6c:	2b48 0003 34cc 0003 34ae 0003 3468 0003     H+...4...4..h4..
   39d7c:	3386 0003 3468 0003 34a0 0003 3468 0003     .3..h4...4..h4..
   39d8c:	3386 0003 34ae 0003 34ae 0003 34a0 0003     .3...4...4...4..
   39d9c:	3386 0003 337e 0003 337e 0003 337e 0003     .3..~3..~3..~3..
   39dac:	36e4 0003 3b2c 0003 39ec 0003 39ec 0003     .6..,;...9...9..
   39dbc:	39e8 0003 3b04 0003 3b04 0003 3af6 0003     .9...;...;...:..
   39dcc:	39e8 0003 3b04 0003 3af6 0003 3b04 0003     .9...;...:...;..
   39ddc:	39e8 0003 3b0c 0003 3b0c 0003 3b0c 0003     .9...;...;...;..
   39dec:	3d10 0003                                   .=..

00039df0 <_global_impure_ptr>:
   39df0:	0128 2000                                   (.. 

00039df4 <__sf_fake_stderr>:
	...

00039e14 <__sf_fake_stdin>:
	...

00039e34 <__sf_fake_stdout>:
	...
   39e54:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   39e64:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   39e74:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   39e84:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

00039e91 <_ctype_>:
   39e91:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   39ea1:	2020 2020 2020 2020 2020 2020 2020 2020                     
   39eb1:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   39ec1:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   39ed1:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   39ee1:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   39ef1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   39f01:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   39f11:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00039f94 <_init>:
   39f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39f96:	46c0      	nop			; (mov r8, r8)
   39f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
   39f9a:	bc08      	pop	{r3}
   39f9c:	469e      	mov	lr, r3
   39f9e:	4770      	bx	lr

00039fa0 <__init_array_start>:
   39fa0:	000120dd 	.word	0x000120dd

00039fa4 <_fini>:
   39fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39fa6:	46c0      	nop			; (mov r8, r8)
   39fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   39faa:	bc08      	pop	{r3}
   39fac:	469e      	mov	lr, r3
   39fae:	4770      	bx	lr

00039fb0 <__fini_array_start>:
   39fb0:	000120b5 	.word	0x000120b5
