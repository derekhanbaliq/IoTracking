
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000113a4  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000274  20000000  000233a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003ce4  20000274  00023618  00020274  2**2
                  ALLOC
  3 .stack        00002000  20003f58  000272fc  00020274  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00092192  00000000  00000000  000202f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000e61b  00000000  00000000  000b2487  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0002740c  00000000  00000000  000c0aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001ce8  00000000  00000000  000e7eae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002858  00000000  00000000  000e9b96  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001fe08  00000000  00000000  000ec3ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0003b884  00000000  00000000  0010c1f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a9ad3  00000000  00000000  00147a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00005b84  00000000  00000000  001f1550  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	58 5f 00 20 c5 b1 01 00 a9 b1 01 00 a9 b1 01 00     X_. ............
	...
   1202c:	e5 2f 01 00 00 00 00 00 00 00 00 00 c1 30 01 00     ./...........0..
   1203c:	05 31 01 00 a9 b1 01 00 a9 b1 01 00 a9 b1 01 00     .1..............
   1204c:	ed 92 01 00 6d 8f 01 00 a9 b1 01 00 a9 b1 01 00     ....m...........
   1205c:	a9 b1 01 00 a9 b1 01 00 15 97 01 00 25 97 01 00     ............%...
   1206c:	35 97 01 00 45 97 01 00 55 97 01 00 65 97 01 00     5...E...U...e...
   1207c:	79 b1 01 00 89 b1 01 00 99 b1 01 00 61 2d 01 00     y...........a-..
   1208c:	71 2d 01 00 81 2d 01 00 00 00 00 00 00 00 00 00     q-...-..........
   1209c:	a9 b1 01 00 a9 b1 01 00 a9 b1 01 00 a9 b1 01 00     ................
   120ac:	a9 b1 01 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000274 	.word	0x20000274
   120d4:	00000000 	.word	0x00000000
   120d8:	000233a4 	.word	0x000233a4

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000278 	.word	0x20000278
   12108:	000233a4 	.word	0x000233a4
   1210c:	000233a4 	.word	0x000233a4
   12110:	00000000 	.word	0x00000000

00012114 <vCommandConsoleTask>:




void vCommandConsoleTask( void *pvParameters )
{
   12114:	b5f0      	push	{r4, r5, r6, r7, lr}
   12116:	46ce      	mov	lr, r9
   12118:	4647      	mov	r7, r8
   1211a:	b580      	push	{r7, lr}
   1211c:	b083      	sub	sp, #12
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString( pcWelcomeMessage);
   1211e:	4827      	ldr	r0, [pc, #156]	; (121bc <vCommandConsoleTask+0xa8>)
   12120:	4b27      	ldr	r3, [pc, #156]	; (121c0 <vCommandConsoleTask+0xac>)
   12122:	4798      	blx	r3
uint8_t cRxedChar, cInputIndex = 0;
   12124:	2400      	movs	r4, #0

    for( ;; )
    {
        /* This implementation reads a single character at a time.  Wait in the
        Blocked state until a character is received. */
        int recv = SerialConsoleReadCharacter(&cRxedChar);
   12126:	4f27      	ldr	r7, [pc, #156]	; (121c4 <vCommandConsoleTask+0xb0>)
            {
                /* Ignore carriage returns. */
            }
            else if( cRxedChar == ASCII_BACKSPACE || cRxedChar == ASCII_DELETE )
            {
				char erase[4] = {0x08, 0x20, 0x08, 0x00};
   12128:	4b27      	ldr	r3, [pc, #156]	; (121c8 <vCommandConsoleTask+0xb4>)
   1212a:	4699      	mov	r9, r3
				SerialConsoleWriteString(erase);
   1212c:	4b24      	ldr	r3, [pc, #144]	; (121c0 <vCommandConsoleTask+0xac>)
   1212e:	4698      	mov	r8, r3
   12130:	e02d      	b.n	1218e <vCommandConsoleTask+0x7a>
			vTaskDelay( CLI_TASK_DELAY);
   12132:	3097      	adds	r0, #151	; 0x97
   12134:	4b25      	ldr	r3, [pc, #148]	; (121cc <vCommandConsoleTask+0xb8>)
   12136:	4798      	blx	r3
   12138:	e029      	b.n	1218e <vCommandConsoleTask+0x7a>
            SerialConsoleWriteString("\r\n");
   1213a:	4825      	ldr	r0, [pc, #148]	; (121d0 <vCommandConsoleTask+0xbc>)
   1213c:	4b20      	ldr	r3, [pc, #128]	; (121c0 <vCommandConsoleTask+0xac>)
   1213e:	4798      	blx	r3
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand
   12140:	4c24      	ldr	r4, [pc, #144]	; (121d4 <vCommandConsoleTask+0xc0>)
   12142:	4e25      	ldr	r6, [pc, #148]	; (121d8 <vCommandConsoleTask+0xc4>)
   12144:	2264      	movs	r2, #100	; 0x64
   12146:	0021      	movs	r1, r4
   12148:	4824      	ldr	r0, [pc, #144]	; (121dc <vCommandConsoleTask+0xc8>)
   1214a:	47b0      	blx	r6
   1214c:	0005      	movs	r5, r0
				pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   1214e:	2200      	movs	r2, #0
   12150:	2363      	movs	r3, #99	; 0x63
   12152:	54e2      	strb	r2, [r4, r3]
                SerialConsoleWriteString(pcOutputString);
   12154:	0020      	movs	r0, r4
   12156:	4b1a      	ldr	r3, [pc, #104]	; (121c0 <vCommandConsoleTask+0xac>)
   12158:	4798      	blx	r3
            } while( xMoreDataToFollow != pdFALSE );
   1215a:	2d00      	cmp	r5, #0
   1215c:	d1f2      	bne.n	12144 <vCommandConsoleTask+0x30>
            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
   1215e:	2232      	movs	r2, #50	; 0x32
   12160:	2100      	movs	r1, #0
   12162:	481e      	ldr	r0, [pc, #120]	; (121dc <vCommandConsoleTask+0xc8>)
   12164:	4b1e      	ldr	r3, [pc, #120]	; (121e0 <vCommandConsoleTask+0xcc>)
   12166:	4798      	blx	r3
            cInputIndex = 0;
   12168:	2400      	movs	r4, #0
   1216a:	e010      	b.n	1218e <vCommandConsoleTask+0x7a>
				char erase[4] = {0x08, 0x20, 0x08, 0x00};
   1216c:	464b      	mov	r3, r9
   1216e:	681b      	ldr	r3, [r3, #0]
   12170:	9300      	str	r3, [sp, #0]
				SerialConsoleWriteString(erase);
   12172:	4668      	mov	r0, sp
   12174:	47c0      	blx	r8
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if( cInputIndex > 0 )
   12176:	2c00      	cmp	r4, #0
   12178:	d009      	beq.n	1218e <vCommandConsoleTask+0x7a>
                {
                    cInputIndex--;
   1217a:	3c01      	subs	r4, #1
   1217c:	b2e4      	uxtb	r4, r4
                    pcInputString[ cInputIndex ] = 0;
   1217e:	2200      	movs	r2, #0
   12180:	4b16      	ldr	r3, [pc, #88]	; (121dc <vCommandConsoleTask+0xc8>)
   12182:	551a      	strb	r2, [r3, r4]
            {
   12184:	e003      	b.n	1218e <vCommandConsoleTask+0x7a>
                    pcInputString[ cInputIndex ] = cRxedChar;
                    cInputIndex++;
                }

					//Order Echo
					SerialConsoleWriteString(&cRxedChar);
   12186:	466b      	mov	r3, sp
   12188:	1dd8      	adds	r0, r3, #7
   1218a:	4b0d      	ldr	r3, [pc, #52]	; (121c0 <vCommandConsoleTask+0xac>)
   1218c:	4798      	blx	r3
        int recv = SerialConsoleReadCharacter(&cRxedChar);
   1218e:	466b      	mov	r3, sp
   12190:	1dd8      	adds	r0, r3, #7
   12192:	47b8      	blx	r7
		if(recv == -1) //If no characters in the buffer, thread goes to sleep for a while
   12194:	1c43      	adds	r3, r0, #1
   12196:	d0cc      	beq.n	12132 <vCommandConsoleTask+0x1e>
		}else if( cRxedChar == '\n' )
   12198:	466b      	mov	r3, sp
   1219a:	3307      	adds	r3, #7
   1219c:	781b      	ldrb	r3, [r3, #0]
   1219e:	2b0a      	cmp	r3, #10
   121a0:	d0cb      	beq.n	1213a <vCommandConsoleTask+0x26>
            if( cRxedChar == '\r' )
   121a2:	2b0d      	cmp	r3, #13
   121a4:	d0f3      	beq.n	1218e <vCommandConsoleTask+0x7a>
            else if( cRxedChar == ASCII_BACKSPACE || cRxedChar == ASCII_DELETE )
   121a6:	2b08      	cmp	r3, #8
   121a8:	d0e0      	beq.n	1216c <vCommandConsoleTask+0x58>
   121aa:	2b7f      	cmp	r3, #127	; 0x7f
   121ac:	d0de      	beq.n	1216c <vCommandConsoleTask+0x58>
                if( cInputIndex < MAX_INPUT_LENGTH_CLI )
   121ae:	2c31      	cmp	r4, #49	; 0x31
   121b0:	d8e9      	bhi.n	12186 <vCommandConsoleTask+0x72>
                    pcInputString[ cInputIndex ] = cRxedChar;
   121b2:	4a0a      	ldr	r2, [pc, #40]	; (121dc <vCommandConsoleTask+0xc8>)
   121b4:	5513      	strb	r3, [r2, r4]
                    cInputIndex++;
   121b6:	3401      	adds	r4, #1
   121b8:	b2e4      	uxtb	r4, r4
   121ba:	e7e4      	b.n	12186 <vCommandConsoleTask+0x72>
   121bc:	00020f88 	.word	0x00020f88
   121c0:	000147f5 	.word	0x000147f5
   121c4:	00014879 	.word	0x00014879
   121c8:	00020f84 	.word	0x00020f84
   121cc:	00013e31 	.word	0x00013e31
   121d0:	000231dc 	.word	0x000231dc
   121d4:	200002c4 	.word	0x200002c4
   121d8:	00012dc9 	.word	0x00012dc9
   121dc:	20000290 	.word	0x20000290
   121e0:	0001fc1b 	.word	0x0001fc1b

000121e4 <add_state>:
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
	down_state |= mask;
   121e4:	4b02      	ldr	r3, [pc, #8]	; (121f0 <add_state+0xc>)
   121e6:	781a      	ldrb	r2, [r3, #0]
   121e8:	4310      	orrs	r0, r2
   121ea:	7018      	strb	r0, [r3, #0]
}
   121ec:	4770      	bx	lr
   121ee:	46c0      	nop			; (mov r8, r8)
   121f0:	2000035d 	.word	0x2000035d

000121f4 <SubscribeHandler>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandler(MessageData *msgData)
{
   121f4:	b570      	push	{r4, r5, r6, lr}
   121f6:	0004      	movs	r4, r0
	/* You received publish message which you had subscribed. */
	/* Print Topic and message */
	LogMessage(LOG_DEBUG_LVL,"\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   121f8:	6842      	ldr	r2, [r0, #4]
   121fa:	6893      	ldr	r3, [r2, #8]
   121fc:	6852      	ldr	r2, [r2, #4]
   121fe:	4918      	ldr	r1, [pc, #96]	; (12260 <SubscribeHandler+0x6c>)
   12200:	2001      	movs	r0, #1
   12202:	4d18      	ldr	r5, [pc, #96]	; (12264 <SubscribeHandler+0x70>)
   12204:	47a8      	blx	r5
	LogMessage(LOG_DEBUG_LVL," >> ");
   12206:	4918      	ldr	r1, [pc, #96]	; (12268 <SubscribeHandler+0x74>)
   12208:	2001      	movs	r0, #1
   1220a:	47a8      	blx	r5
	LogMessage(LOG_DEBUG_LVL,"%.*s",msgData->message->payloadlen,(char *)msgData->message->payload);	
   1220c:	6822      	ldr	r2, [r4, #0]
   1220e:	6893      	ldr	r3, [r2, #8]
   12210:	68d2      	ldr	r2, [r2, #12]
   12212:	4916      	ldr	r1, [pc, #88]	; (1226c <SubscribeHandler+0x78>)
   12214:	2001      	movs	r0, #1
   12216:	47a8      	blx	r5

	//Handle LedData message
	if(strncmp((char *) msgData->topicName->lenstring.data, LED_TOPIC, msgData->message->payloadlen) == 0)
   12218:	6826      	ldr	r6, [r4, #0]
   1221a:	68f5      	ldr	r5, [r6, #12]
   1221c:	6863      	ldr	r3, [r4, #4]
   1221e:	6898      	ldr	r0, [r3, #8]
   12220:	002a      	movs	r2, r5
   12222:	4913      	ldr	r1, [pc, #76]	; (12270 <SubscribeHandler+0x7c>)
   12224:	4b13      	ldr	r3, [pc, #76]	; (12274 <SubscribeHandler+0x80>)
   12226:	4798      	blx	r3
   12228:	2800      	cmp	r0, #0
   1222a:	d117      	bne.n	1225c <SubscribeHandler+0x68>
	{
		if(strncmp((char *)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0)
   1222c:	68b4      	ldr	r4, [r6, #8]
   1222e:	002a      	movs	r2, r5
   12230:	4911      	ldr	r1, [pc, #68]	; (12278 <SubscribeHandler+0x84>)
   12232:	0020      	movs	r0, r4
   12234:	4b0f      	ldr	r3, [pc, #60]	; (12274 <SubscribeHandler+0x80>)
   12236:	4798      	blx	r3
   12238:	2800      	cmp	r0, #0
   1223a:	d00b      	beq.n	12254 <SubscribeHandler+0x60>
		{
			port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
		} 
		else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0)
   1223c:	002a      	movs	r2, r5
   1223e:	490f      	ldr	r1, [pc, #60]	; (1227c <SubscribeHandler+0x88>)
   12240:	0020      	movs	r0, r4
   12242:	4b0c      	ldr	r3, [pc, #48]	; (12274 <SubscribeHandler+0x80>)
   12244:	4798      	blx	r3
   12246:	2800      	cmp	r0, #0
   12248:	d108      	bne.n	1225c <SubscribeHandler+0x68>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
   1224a:	2280      	movs	r2, #128	; 0x80
   1224c:	0412      	lsls	r2, r2, #16
   1224e:	4b0c      	ldr	r3, [pc, #48]	; (12280 <SubscribeHandler+0x8c>)
   12250:	615a      	str	r2, [r3, #20]
		{
			port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
		}
	}
}
   12252:	e003      	b.n	1225c <SubscribeHandler+0x68>
		port_base->OUTSET.reg = pin_mask;
   12254:	2280      	movs	r2, #128	; 0x80
   12256:	0412      	lsls	r2, r2, #16
   12258:	4b09      	ldr	r3, [pc, #36]	; (12280 <SubscribeHandler+0x8c>)
   1225a:	619a      	str	r2, [r3, #24]
   1225c:	bd70      	pop	{r4, r5, r6, pc}
   1225e:	46c0      	nop			; (mov r8, r8)
   12260:	00020fe0 	.word	0x00020fe0
   12264:	000148a5 	.word	0x000148a5
   12268:	00020fe8 	.word	0x00020fe8
   1226c:	00020ff0 	.word	0x00020ff0
   12270:	00020ff8 	.word	0x00020ff8
   12274:	0001ff89 	.word	0x0001ff89
   12278:	00021000 	.word	0x00021000
   1227c:	00021008 	.word	0x00021008
   12280:	41004400 	.word	0x41004400

00012284 <extint_detection_callback>:
}


volatile bool isPressed = false;
void extint_detection_callback(void)
{
   12284:	b510      	push	{r4, lr}
	//Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
	temperature++;
   12286:	4b0a      	ldr	r3, [pc, #40]	; (122b0 <extint_detection_callback+0x2c>)
   12288:	681a      	ldr	r2, [r3, #0]
   1228a:	3201      	adds	r2, #1
   1228c:	601a      	str	r2, [r3, #0]
	if (temperature > 40) temperature = 1;
   1228e:	681b      	ldr	r3, [r3, #0]
   12290:	2b28      	cmp	r3, #40	; 0x28
   12292:	d902      	bls.n	1229a <extint_detection_callback+0x16>
   12294:	2201      	movs	r2, #1
   12296:	4b06      	ldr	r3, [pc, #24]	; (122b0 <extint_detection_callback+0x2c>)
   12298:	601a      	str	r2, [r3, #0]
	snprintf(mqtt_msg, 63, "{\"d\":{\"temp\":%d}}", temperature);
   1229a:	4b05      	ldr	r3, [pc, #20]	; (122b0 <extint_detection_callback+0x2c>)
   1229c:	681b      	ldr	r3, [r3, #0]
   1229e:	4a05      	ldr	r2, [pc, #20]	; (122b4 <extint_detection_callback+0x30>)
   122a0:	213f      	movs	r1, #63	; 0x3f
   122a2:	4805      	ldr	r0, [pc, #20]	; (122b8 <extint_detection_callback+0x34>)
   122a4:	4c05      	ldr	r4, [pc, #20]	; (122bc <extint_detection_callback+0x38>)
   122a6:	47a0      	blx	r4
	isPressed = true;
   122a8:	2201      	movs	r2, #1
   122aa:	4b05      	ldr	r3, [pc, #20]	; (122c0 <extint_detection_callback+0x3c>)
   122ac:	701a      	strb	r2, [r3, #0]
	
}
   122ae:	bd10      	pop	{r4, pc}
   122b0:	20000084 	.word	0x20000084
   122b4:	00021010 	.word	0x00021010
   122b8:	20000000 	.word	0x20000000
   122bc:	0001fe75 	.word	0x0001fe75
   122c0:	200005b8 	.word	0x200005b8

000122c4 <socket_resolve_handler>:
{
   122c4:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
   122c6:	4b01      	ldr	r3, [pc, #4]	; (122cc <socket_resolve_handler+0x8>)
   122c8:	4798      	blx	r3
}
   122ca:	bd10      	pop	{r4, pc}
   122cc:	0001da7d 	.word	0x0001da7d

000122d0 <socket_event_handler>:
{
   122d0:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
   122d2:	4b01      	ldr	r3, [pc, #4]	; (122d8 <socket_event_handler+0x8>)
   122d4:	4798      	blx	r3
}
   122d6:	bd10      	pop	{r4, pc}
   122d8:	0001da71 	.word	0x0001da71

000122dc <resolve_cb>:
{
   122dc:	b570      	push	{r4, r5, r6, lr}
   122de:	b084      	sub	sp, #16
   122e0:	0005      	movs	r5, r0
   122e2:	000c      	movs	r4, r1
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   122e4:	22ff      	movs	r2, #255	; 0xff
   122e6:	0013      	movs	r3, r2
   122e8:	400b      	ands	r3, r1
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   122ea:	0e09      	lsrs	r1, r1, #24
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   122ec:	9102      	str	r1, [sp, #8]
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   122ee:	0c21      	lsrs	r1, r4, #16
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   122f0:	4011      	ands	r1, r2
   122f2:	9101      	str	r1, [sp, #4]
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
   122f4:	0a21      	lsrs	r1, r4, #8
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   122f6:	400a      	ands	r2, r1
   122f8:	9200      	str	r2, [sp, #0]
   122fa:	0002      	movs	r2, r0
   122fc:	4904      	ldr	r1, [pc, #16]	; (12310 <resolve_cb+0x34>)
   122fe:	2001      	movs	r0, #1
   12300:	4e04      	ldr	r6, [pc, #16]	; (12314 <resolve_cb+0x38>)
   12302:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   12304:	0021      	movs	r1, r4
   12306:	0028      	movs	r0, r5
   12308:	4b03      	ldr	r3, [pc, #12]	; (12318 <resolve_cb+0x3c>)
   1230a:	4798      	blx	r3
}
   1230c:	b004      	add	sp, #16
   1230e:	bd70      	pop	{r4, r5, r6, pc}
   12310:	00021330 	.word	0x00021330
   12314:	000148a5 	.word	0x000148a5
   12318:	0001e671 	.word	0x0001e671

0001231c <socket_cb>:
{
   1231c:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
   1231e:	4b01      	ldr	r3, [pc, #4]	; (12324 <socket_cb+0x8>)
   12320:	4798      	blx	r3
}
   12322:	bd10      	pop	{r4, pc}
   12324:	0001f29d 	.word	0x0001f29d

00012328 <start_download>:
{
   12328:	b510      	push	{r4, lr}
   1232a:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
   1232c:	4b15      	ldr	r3, [pc, #84]	; (12384 <start_download+0x5c>)
   1232e:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
   12330:	07da      	lsls	r2, r3, #31
   12332:	d512      	bpl.n	1235a <start_download+0x32>
	if (!is_state_set(WIFI_CONNECTED)) {
   12334:	079a      	lsls	r2, r3, #30
   12336:	d515      	bpl.n	12364 <start_download+0x3c>
	if (is_state_set(GET_REQUESTED)) {
   12338:	075a      	lsls	r2, r3, #29
   1233a:	d418      	bmi.n	1236e <start_download+0x46>
	if (is_state_set(DOWNLOADING)) {
   1233c:	071b      	lsls	r3, r3, #28
   1233e:	d41b      	bmi.n	12378 <start_download+0x50>
	LogMessage(LOG_DEBUG_LVL,"start_download: sending HTTP request...\r\n");
   12340:	4911      	ldr	r1, [pc, #68]	; (12388 <start_download+0x60>)
   12342:	2001      	movs	r0, #1
   12344:	4b11      	ldr	r3, [pc, #68]	; (1238c <start_download+0x64>)
   12346:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   12348:	2300      	movs	r3, #0
   1234a:	9300      	str	r3, [sp, #0]
   1234c:	2201      	movs	r2, #1
   1234e:	4910      	ldr	r1, [pc, #64]	; (12390 <start_download+0x68>)
   12350:	4810      	ldr	r0, [pc, #64]	; (12394 <start_download+0x6c>)
   12352:	4c11      	ldr	r4, [pc, #68]	; (12398 <start_download+0x70>)
   12354:	47a0      	blx	r4
}
   12356:	b002      	add	sp, #8
   12358:	bd10      	pop	{r4, pc}
		LogMessage(LOG_DEBUG_LVL,"start_download: MMC storage not ready.\r\n");
   1235a:	4910      	ldr	r1, [pc, #64]	; (1239c <start_download+0x74>)
   1235c:	2001      	movs	r0, #1
   1235e:	4b0b      	ldr	r3, [pc, #44]	; (1238c <start_download+0x64>)
   12360:	4798      	blx	r3
		return;
   12362:	e7f8      	b.n	12356 <start_download+0x2e>
		LogMessage(LOG_DEBUG_LVL,"start_download: Wi-Fi is not connected.\r\n");
   12364:	490e      	ldr	r1, [pc, #56]	; (123a0 <start_download+0x78>)
   12366:	2001      	movs	r0, #1
   12368:	4b08      	ldr	r3, [pc, #32]	; (1238c <start_download+0x64>)
   1236a:	4798      	blx	r3
		return;
   1236c:	e7f3      	b.n	12356 <start_download+0x2e>
		LogMessage(LOG_DEBUG_LVL,"start_download: request is sent already.\r\n");
   1236e:	490d      	ldr	r1, [pc, #52]	; (123a4 <start_download+0x7c>)
   12370:	2001      	movs	r0, #1
   12372:	4b06      	ldr	r3, [pc, #24]	; (1238c <start_download+0x64>)
   12374:	4798      	blx	r3
		return;
   12376:	e7ee      	b.n	12356 <start_download+0x2e>
		LogMessage(LOG_DEBUG_LVL,"start_download: running download already.\r\n");
   12378:	490b      	ldr	r1, [pc, #44]	; (123a8 <start_download+0x80>)
   1237a:	2001      	movs	r0, #1
   1237c:	4b03      	ldr	r3, [pc, #12]	; (1238c <start_download+0x64>)
   1237e:	4798      	blx	r3
		return;
   12380:	e7e9      	b.n	12356 <start_download+0x2e>
   12382:	46c0      	nop			; (mov r8, r8)
   12384:	2000035d 	.word	0x2000035d
   12388:	00021410 	.word	0x00021410
   1238c:	000148a5 	.word	0x000148a5
   12390:	0002143c 	.word	0x0002143c
   12394:	200037a0 	.word	0x200037a0
   12398:	0001eba1 	.word	0x0001eba1
   1239c:	00021360 	.word	0x00021360
   123a0:	0002138c 	.word	0x0002138c
   123a4:	000213b8 	.word	0x000213b8
   123a8:	000213e4 	.word	0x000213e4

000123ac <mqtt_callback>:
{
   123ac:	b570      	push	{r4, r5, r6, lr}
   123ae:	b086      	sub	sp, #24
   123b0:	0004      	movs	r4, r0
	switch (type) {
   123b2:	2901      	cmp	r1, #1
   123b4:	d030      	beq.n	12418 <mqtt_callback+0x6c>
   123b6:	2905      	cmp	r1, #5
   123b8:	d046      	beq.n	12448 <mqtt_callback+0x9c>
   123ba:	2900      	cmp	r1, #0
   123bc:	d001      	beq.n	123c2 <mqtt_callback+0x16>
}
   123be:	b006      	add	sp, #24
   123c0:	bd70      	pop	{r4, r5, r6, pc}
		if (data->sock_connected.result >= 0) {
   123c2:	6813      	ldr	r3, [r2, #0]
   123c4:	2b00      	cmp	r3, #0
   123c6:	db1c      	blt.n	12402 <mqtt_callback+0x56>
			LogMessage(LOG_DEBUG_LVL,"\r\nConnecting to Broker...");
   123c8:	4925      	ldr	r1, [pc, #148]	; (12460 <mqtt_callback+0xb4>)
   123ca:	2001      	movs	r0, #1
   123cc:	4b25      	ldr	r3, [pc, #148]	; (12464 <mqtt_callback+0xb8>)
   123ce:	4798      	blx	r3
			if(0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0))
   123d0:	4a25      	ldr	r2, [pc, #148]	; (12468 <mqtt_callback+0xbc>)
   123d2:	2300      	movs	r3, #0
   123d4:	9305      	str	r3, [sp, #20]
   123d6:	9304      	str	r3, [sp, #16]
   123d8:	9303      	str	r3, [sp, #12]
   123da:	9302      	str	r3, [sp, #8]
   123dc:	9301      	str	r3, [sp, #4]
   123de:	9200      	str	r2, [sp, #0]
   123e0:	4b22      	ldr	r3, [pc, #136]	; (1246c <mqtt_callback+0xc0>)
   123e2:	2101      	movs	r1, #1
   123e4:	0020      	movs	r0, r4
   123e6:	4c22      	ldr	r4, [pc, #136]	; (12470 <mqtt_callback+0xc4>)
   123e8:	47a0      	blx	r4
   123ea:	2800      	cmp	r0, #0
   123ec:	d004      	beq.n	123f8 <mqtt_callback+0x4c>
				LogMessage(LOG_DEBUG_LVL,"MQTT  Error - NOT Connected to broker\r\n");
   123ee:	4921      	ldr	r1, [pc, #132]	; (12474 <mqtt_callback+0xc8>)
   123f0:	2001      	movs	r0, #1
   123f2:	4b1c      	ldr	r3, [pc, #112]	; (12464 <mqtt_callback+0xb8>)
   123f4:	4798      	blx	r3
   123f6:	e7e2      	b.n	123be <mqtt_callback+0x12>
				LogMessage(LOG_DEBUG_LVL,"MQTT Connected to broker\r\n");
   123f8:	491f      	ldr	r1, [pc, #124]	; (12478 <mqtt_callback+0xcc>)
   123fa:	2001      	movs	r0, #1
   123fc:	4b19      	ldr	r3, [pc, #100]	; (12464 <mqtt_callback+0xb8>)
   123fe:	4798      	blx	r3
   12400:	e7dd      	b.n	123be <mqtt_callback+0x12>
			LogMessage(LOG_DEBUG_LVL,"Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   12402:	4d1e      	ldr	r5, [pc, #120]	; (1247c <mqtt_callback+0xd0>)
   12404:	002a      	movs	r2, r5
   12406:	491e      	ldr	r1, [pc, #120]	; (12480 <mqtt_callback+0xd4>)
   12408:	2001      	movs	r0, #1
   1240a:	4b16      	ldr	r3, [pc, #88]	; (12464 <mqtt_callback+0xb8>)
   1240c:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   1240e:	0029      	movs	r1, r5
   12410:	0020      	movs	r0, r4
   12412:	4b1c      	ldr	r3, [pc, #112]	; (12484 <mqtt_callback+0xd8>)
   12414:	4798      	blx	r3
   12416:	e7d2      	b.n	123be <mqtt_callback+0x12>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   12418:	7812      	ldrb	r2, [r2, #0]
   1241a:	2a00      	cmp	r2, #0
   1241c:	d10f      	bne.n	1243e <mqtt_callback+0x92>
			mqtt_subscribe(module_inst, TEMPERATURE_TOPIC, 2, SubscribeHandler);
   1241e:	4e1a      	ldr	r6, [pc, #104]	; (12488 <mqtt_callback+0xdc>)
   12420:	0033      	movs	r3, r6
   12422:	3202      	adds	r2, #2
   12424:	4919      	ldr	r1, [pc, #100]	; (1248c <mqtt_callback+0xe0>)
   12426:	4d1a      	ldr	r5, [pc, #104]	; (12490 <mqtt_callback+0xe4>)
   12428:	47a8      	blx	r5
			mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandler);
   1242a:	0033      	movs	r3, r6
   1242c:	2202      	movs	r2, #2
   1242e:	4919      	ldr	r1, [pc, #100]	; (12494 <mqtt_callback+0xe8>)
   12430:	0020      	movs	r0, r4
   12432:	47a8      	blx	r5
			LogMessage(LOG_DEBUG_LVL,"MQTT Connected\r\n");
   12434:	4918      	ldr	r1, [pc, #96]	; (12498 <mqtt_callback+0xec>)
   12436:	2001      	movs	r0, #1
   12438:	4b0a      	ldr	r3, [pc, #40]	; (12464 <mqtt_callback+0xb8>)
   1243a:	4798      	blx	r3
   1243c:	e7bf      	b.n	123be <mqtt_callback+0x12>
			LogMessage(LOG_DEBUG_LVL,"MQTT broker decline your access! error code %d\r\n", data->connected.result);
   1243e:	4917      	ldr	r1, [pc, #92]	; (1249c <mqtt_callback+0xf0>)
   12440:	2001      	movs	r0, #1
   12442:	4b08      	ldr	r3, [pc, #32]	; (12464 <mqtt_callback+0xb8>)
   12444:	4798      	blx	r3
   12446:	e7ba      	b.n	123be <mqtt_callback+0x12>
		LogMessage(LOG_DEBUG_LVL,"MQTT disconnected\r\n");
   12448:	4915      	ldr	r1, [pc, #84]	; (124a0 <mqtt_callback+0xf4>)
   1244a:	2001      	movs	r0, #1
   1244c:	4b05      	ldr	r3, [pc, #20]	; (12464 <mqtt_callback+0xb8>)
   1244e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
   12450:	4914      	ldr	r1, [pc, #80]	; (124a4 <mqtt_callback+0xf8>)
   12452:	2231      	movs	r2, #49	; 0x31
   12454:	5c8b      	ldrb	r3, [r1, r2]
   12456:	2002      	movs	r0, #2
   12458:	4383      	bics	r3, r0
   1245a:	548b      	strb	r3, [r1, r2]
}
   1245c:	e7af      	b.n	123be <mqtt_callback+0x12>
   1245e:	46c0      	nop			; (mov r8, r8)
   12460:	00021214 	.word	0x00021214
   12464:	000148a5 	.word	0x000148a5
   12468:	00021240 	.word	0x00021240
   1246c:	00021230 	.word	0x00021230
   12470:	0001dab5 	.word	0x0001dab5
   12474:	0002124c 	.word	0x0002124c
   12478:	00021274 	.word	0x00021274
   1247c:	00021200 	.word	0x00021200
   12480:	00021290 	.word	0x00021290
   12484:	0001da89 	.word	0x0001da89
   12488:	000121f5 	.word	0x000121f5
   1248c:	000212c8 	.word	0x000212c8
   12490:	0001dbb9 	.word	0x0001dbb9
   12494:	00020ff8 	.word	0x00020ff8
   12498:	000212d4 	.word	0x000212d4
   1249c:	000212e8 	.word	0x000212e8
   124a0:	0002131c 	.word	0x0002131c
   124a4:	20000328 	.word	0x20000328

000124a8 <store_file_packet>:
{
   124a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   124aa:	46d6      	mov	lr, sl
   124ac:	b500      	push	{lr}
   124ae:	b09a      	sub	sp, #104	; 0x68
   124b0:	9001      	str	r0, [sp, #4]
   124b2:	9102      	str	r1, [sp, #8]
	if ((data == NULL) || (length < 1)) {
   124b4:	2800      	cmp	r0, #0
   124b6:	d00d      	beq.n	124d4 <store_file_packet+0x2c>
   124b8:	2900      	cmp	r1, #0
   124ba:	d00b      	beq.n	124d4 <store_file_packet+0x2c>
	return ((down_state & mask) != 0);
   124bc:	4b87      	ldr	r3, [pc, #540]	; (126dc <store_file_packet+0x234>)
   124be:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(DOWNLOADING)) {
   124c0:	071b      	lsls	r3, r3, #28
   124c2:	d500      	bpl.n	124c6 <store_file_packet+0x1e>
   124c4:	e0c5      	b.n	12652 <store_file_packet+0x1aa>
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   124c6:	4b86      	ldr	r3, [pc, #536]	; (126e0 <store_file_packet+0x238>)
   124c8:	2230      	movs	r2, #48	; 0x30
   124ca:	701a      	strb	r2, [r3, #0]
		save_file_name[1] = ':';
   124cc:	320a      	adds	r2, #10
   124ce:	705a      	strb	r2, [r3, #1]
   124d0:	4c84      	ldr	r4, [pc, #528]	; (126e4 <store_file_packet+0x23c>)
   124d2:	e008      	b.n	124e6 <store_file_packet+0x3e>
		LogMessage(LOG_DEBUG_LVL,"store_file_packet: empty data.\r\n");
   124d4:	4984      	ldr	r1, [pc, #528]	; (126e8 <store_file_packet+0x240>)
   124d6:	2001      	movs	r0, #1
   124d8:	4b84      	ldr	r3, [pc, #528]	; (126ec <store_file_packet+0x244>)
   124da:	4798      	blx	r3
}
   124dc:	b01a      	add	sp, #104	; 0x68
   124de:	bc04      	pop	{r2}
   124e0:	4692      	mov	sl, r2
   124e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cp--;
   124e4:	0004      	movs	r4, r0
   124e6:	1e60      	subs	r0, r4, #1
		while (*cp != '/') {
   124e8:	7803      	ldrb	r3, [r0, #0]
   124ea:	2b2f      	cmp	r3, #47	; 0x2f
   124ec:	d1fa      	bne.n	124e4 <store_file_packet+0x3c>
		if (strlen(cp) > 1) {
   124ee:	4b80      	ldr	r3, [pc, #512]	; (126f0 <store_file_packet+0x248>)
   124f0:	4798      	blx	r3
   124f2:	2801      	cmp	r0, #1
   124f4:	d800      	bhi.n	124f8 <store_file_packet+0x50>
   124f6:	e0c1      	b.n	1267c <store_file_packet+0x1d4>
			strcpy(&save_file_name[2], cp);
   124f8:	4f79      	ldr	r7, [pc, #484]	; (126e0 <store_file_packet+0x238>)
   124fa:	1cb8      	adds	r0, r7, #2
   124fc:	0021      	movs	r1, r4
   124fe:	4b7d      	ldr	r3, [pc, #500]	; (126f4 <store_file_packet+0x24c>)
   12500:	4798      	blx	r3
	char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   12502:	2241      	movs	r2, #65	; 0x41
   12504:	2100      	movs	r1, #0
   12506:	a809      	add	r0, sp, #36	; 0x24
   12508:	4c7b      	ldr	r4, [pc, #492]	; (126f8 <store_file_packet+0x250>)
   1250a:	47a0      	blx	r4
	char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   1250c:	2209      	movs	r2, #9
   1250e:	2100      	movs	r1, #0
   12510:	a806      	add	r0, sp, #24
   12512:	47a0      	blx	r4
	char numbering[NUMBRING_MAX + 1] = {0};
   12514:	2300      	movs	r3, #0
   12516:	9305      	str	r3, [sp, #20]
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   12518:	4c78      	ldr	r4, [pc, #480]	; (126fc <store_file_packet+0x254>)
   1251a:	2200      	movs	r2, #0
   1251c:	0039      	movs	r1, r7
   1251e:	0020      	movs	r0, r4
   12520:	4b77      	ldr	r3, [pc, #476]	; (12700 <store_file_packet+0x258>)
   12522:	4798      	blx	r3
   12524:	0007      	movs	r7, r0
	f_close(&file_object);
   12526:	0020      	movs	r0, r4
   12528:	4b76      	ldr	r3, [pc, #472]	; (12704 <store_file_packet+0x25c>)
   1252a:	4798      	blx	r3
	if (!is_exist_file(fp, file_path_name)) {
   1252c:	2f00      	cmp	r7, #0
   1252e:	d17d      	bne.n	1262c <store_file_packet+0x184>
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   12530:	486b      	ldr	r0, [pc, #428]	; (126e0 <store_file_packet+0x238>)
   12532:	4b6f      	ldr	r3, [pc, #444]	; (126f0 <store_file_packet+0x248>)
   12534:	4798      	blx	r3
   12536:	2840      	cmp	r0, #64	; 0x40
   12538:	d878      	bhi.n	1262c <store_file_packet+0x184>
	p = strrchr(file_path_name, '.');
   1253a:	212e      	movs	r1, #46	; 0x2e
   1253c:	4868      	ldr	r0, [pc, #416]	; (126e0 <store_file_packet+0x238>)
   1253e:	4b72      	ldr	r3, [pc, #456]	; (12708 <store_file_packet+0x260>)
   12540:	4798      	blx	r3
   12542:	1e04      	subs	r4, r0, #0
	if (p != NULL) {
   12544:	d03b      	beq.n	125be <store_file_packet+0x116>
		ext_len = strlen(p);
   12546:	4b6a      	ldr	r3, [pc, #424]	; (126f0 <store_file_packet+0x248>)
   12548:	4798      	blx	r3
   1254a:	0007      	movs	r7, r0
   1254c:	b286      	uxth	r6, r0
		if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   1254e:	2e07      	cmp	r6, #7
   12550:	d821      	bhi.n	12596 <store_file_packet+0xee>
			strcpy(ext, p);
   12552:	0021      	movs	r1, r4
   12554:	a806      	add	r0, sp, #24
   12556:	4b67      	ldr	r3, [pc, #412]	; (126f4 <store_file_packet+0x24c>)
   12558:	4798      	blx	r3
			if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   1255a:	4861      	ldr	r0, [pc, #388]	; (126e0 <store_file_packet+0x238>)
   1255c:	4b64      	ldr	r3, [pc, #400]	; (126f0 <store_file_packet+0x248>)
   1255e:	4798      	blx	r3
   12560:	043f      	lsls	r7, r7, #16
   12562:	0c3f      	lsrs	r7, r7, #16
   12564:	1bc7      	subs	r7, r0, r7
   12566:	2f3c      	cmp	r7, #60	; 0x3c
   12568:	d90a      	bls.n	12580 <store_file_packet+0xd8>
				name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   1256a:	273c      	movs	r7, #60	; 0x3c
   1256c:	1bbf      	subs	r7, r7, r6
   1256e:	b2bf      	uxth	r7, r7
				strncpy(name, file_path_name, name_len);
   12570:	003a      	movs	r2, r7
   12572:	495b      	ldr	r1, [pc, #364]	; (126e0 <store_file_packet+0x238>)
   12574:	a809      	add	r0, sp, #36	; 0x24
   12576:	4b65      	ldr	r3, [pc, #404]	; (1270c <store_file_packet+0x264>)
   12578:	4798      	blx	r3
			valid_ext = true;
   1257a:	2301      	movs	r3, #1
   1257c:	469a      	mov	sl, r3
   1257e:	e012      	b.n	125a6 <store_file_packet+0xfe>
				name_len = (p - file_path_name);
   12580:	4957      	ldr	r1, [pc, #348]	; (126e0 <store_file_packet+0x238>)
   12582:	1a64      	subs	r4, r4, r1
   12584:	b2a7      	uxth	r7, r4
				strncpy(name, file_path_name, name_len);
   12586:	0424      	lsls	r4, r4, #16
   12588:	0c22      	lsrs	r2, r4, #16
   1258a:	a809      	add	r0, sp, #36	; 0x24
   1258c:	4b5f      	ldr	r3, [pc, #380]	; (1270c <store_file_packet+0x264>)
   1258e:	4798      	blx	r3
			valid_ext = true;
   12590:	2301      	movs	r3, #1
   12592:	469a      	mov	sl, r3
   12594:	e007      	b.n	125a6 <store_file_packet+0xfe>
			strncpy(name, file_path_name, name_len);
   12596:	223c      	movs	r2, #60	; 0x3c
   12598:	4951      	ldr	r1, [pc, #324]	; (126e0 <store_file_packet+0x238>)
   1259a:	a809      	add	r0, sp, #36	; 0x24
   1259c:	4b5b      	ldr	r3, [pc, #364]	; (1270c <store_file_packet+0x264>)
   1259e:	4798      	blx	r3
	bool valid_ext = false;
   125a0:	2300      	movs	r3, #0
   125a2:	469a      	mov	sl, r3
			name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   125a4:	273c      	movs	r7, #60	; 0x3c
	name[name_len++] = '-';
   125a6:	1c7c      	adds	r4, r7, #1
   125a8:	b2a4      	uxth	r4, r4
   125aa:	222d      	movs	r2, #45	; 0x2d
   125ac:	ab09      	add	r3, sp, #36	; 0x24
   125ae:	55da      	strb	r2, [r3, r7]
   125b0:	2601      	movs	r6, #1
			strcpy(&name[name_len + NUMBRING_MAX], ext);
   125b2:	1ce3      	adds	r3, r4, #3
   125b4:	aa09      	add	r2, sp, #36	; 0x24
   125b6:	4694      	mov	ip, r2
   125b8:	4463      	add	r3, ip
   125ba:	9303      	str	r3, [sp, #12]
   125bc:	e019      	b.n	125f2 <store_file_packet+0x14a>
		strncpy(name, file_path_name, name_len);
   125be:	223c      	movs	r2, #60	; 0x3c
   125c0:	4947      	ldr	r1, [pc, #284]	; (126e0 <store_file_packet+0x238>)
   125c2:	a809      	add	r0, sp, #36	; 0x24
   125c4:	4b51      	ldr	r3, [pc, #324]	; (1270c <store_file_packet+0x264>)
   125c6:	4798      	blx	r3
	bool valid_ext = false;
   125c8:	2300      	movs	r3, #0
   125ca:	469a      	mov	sl, r3
		name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   125cc:	273c      	movs	r7, #60	; 0x3c
   125ce:	e7ea      	b.n	125a6 <store_file_packet+0xfe>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   125d0:	4f4a      	ldr	r7, [pc, #296]	; (126fc <store_file_packet+0x254>)
   125d2:	2200      	movs	r2, #0
   125d4:	a909      	add	r1, sp, #36	; 0x24
   125d6:	0038      	movs	r0, r7
   125d8:	4b49      	ldr	r3, [pc, #292]	; (12700 <store_file_packet+0x258>)
   125da:	4798      	blx	r3
   125dc:	0005      	movs	r5, r0
	f_close(&file_object);
   125de:	0038      	movs	r0, r7
   125e0:	4b48      	ldr	r3, [pc, #288]	; (12704 <store_file_packet+0x25c>)
   125e2:	4798      	blx	r3
		if (!is_exist_file(fp, name)) {
   125e4:	2d00      	cmp	r5, #0
   125e6:	d117      	bne.n	12618 <store_file_packet+0x170>
   125e8:	3601      	adds	r6, #1
	for (i = 1; i < count; i++) {
   125ea:	4b49      	ldr	r3, [pc, #292]	; (12710 <store_file_packet+0x268>)
   125ec:	b2b2      	uxth	r2, r6
   125ee:	429a      	cmp	r2, r3
   125f0:	d81c      	bhi.n	1262c <store_file_packet+0x184>
		sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   125f2:	0032      	movs	r2, r6
   125f4:	4947      	ldr	r1, [pc, #284]	; (12714 <store_file_packet+0x26c>)
   125f6:	a805      	add	r0, sp, #20
   125f8:	4b47      	ldr	r3, [pc, #284]	; (12718 <store_file_packet+0x270>)
   125fa:	4798      	blx	r3
		strncpy(&name[name_len], numbering, NUMBRING_MAX);
   125fc:	ab09      	add	r3, sp, #36	; 0x24
   125fe:	1918      	adds	r0, r3, r4
   12600:	2203      	movs	r2, #3
   12602:	a905      	add	r1, sp, #20
   12604:	4b41      	ldr	r3, [pc, #260]	; (1270c <store_file_packet+0x264>)
   12606:	4798      	blx	r3
		if (valid_ext) {
   12608:	4653      	mov	r3, sl
   1260a:	2b00      	cmp	r3, #0
   1260c:	d0e0      	beq.n	125d0 <store_file_packet+0x128>
			strcpy(&name[name_len + NUMBRING_MAX], ext);
   1260e:	a906      	add	r1, sp, #24
   12610:	9803      	ldr	r0, [sp, #12]
   12612:	4b38      	ldr	r3, [pc, #224]	; (126f4 <store_file_packet+0x24c>)
   12614:	4798      	blx	r3
   12616:	e7db      	b.n	125d0 <store_file_packet+0x128>
			memset(file_path_name, 0, max_len);
   12618:	4c31      	ldr	r4, [pc, #196]	; (126e0 <store_file_packet+0x238>)
   1261a:	2240      	movs	r2, #64	; 0x40
   1261c:	2100      	movs	r1, #0
   1261e:	0020      	movs	r0, r4
   12620:	4b35      	ldr	r3, [pc, #212]	; (126f8 <store_file_packet+0x250>)
   12622:	4798      	blx	r3
			strcpy(file_path_name, name);
   12624:	a909      	add	r1, sp, #36	; 0x24
   12626:	0020      	movs	r0, r4
   12628:	4b32      	ldr	r3, [pc, #200]	; (126f4 <store_file_packet+0x24c>)
   1262a:	4798      	blx	r3
		LogMessage(LOG_DEBUG_LVL,"store_file_packet: creating file [%s]\r\n", save_file_name);
   1262c:	4c2c      	ldr	r4, [pc, #176]	; (126e0 <store_file_packet+0x238>)
   1262e:	0022      	movs	r2, r4
   12630:	493a      	ldr	r1, [pc, #232]	; (1271c <store_file_packet+0x274>)
   12632:	2001      	movs	r0, #1
   12634:	4b2d      	ldr	r3, [pc, #180]	; (126ec <store_file_packet+0x244>)
   12636:	4798      	blx	r3
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   12638:	220a      	movs	r2, #10
   1263a:	0021      	movs	r1, r4
   1263c:	482f      	ldr	r0, [pc, #188]	; (126fc <store_file_packet+0x254>)
   1263e:	4b30      	ldr	r3, [pc, #192]	; (12700 <store_file_packet+0x258>)
   12640:	4798      	blx	r3
		if (ret != FR_OK) {
   12642:	2800      	cmp	r0, #0
   12644:	d122      	bne.n	1268c <store_file_packet+0x1e4>
		received_file_size = 0;
   12646:	2200      	movs	r2, #0
   12648:	4b35      	ldr	r3, [pc, #212]	; (12720 <store_file_packet+0x278>)
   1264a:	601a      	str	r2, [r3, #0]
		add_state(DOWNLOADING);
   1264c:	2008      	movs	r0, #8
   1264e:	4b35      	ldr	r3, [pc, #212]	; (12724 <store_file_packet+0x27c>)
   12650:	4798      	blx	r3
		UINT wsize = 0;
   12652:	2300      	movs	r3, #0
   12654:	9309      	str	r3, [sp, #36]	; 0x24
		ret = f_write(&file_object, (const void *)data, length, &wsize);
   12656:	ab09      	add	r3, sp, #36	; 0x24
   12658:	9a02      	ldr	r2, [sp, #8]
   1265a:	9901      	ldr	r1, [sp, #4]
   1265c:	4827      	ldr	r0, [pc, #156]	; (126fc <store_file_packet+0x254>)
   1265e:	4c32      	ldr	r4, [pc, #200]	; (12728 <store_file_packet+0x280>)
   12660:	47a0      	blx	r4
		if (ret != FR_OK) {
   12662:	2800      	cmp	r0, #0
   12664:	d018      	beq.n	12698 <store_file_packet+0x1f0>
			f_close(&file_object);
   12666:	4825      	ldr	r0, [pc, #148]	; (126fc <store_file_packet+0x254>)
   12668:	4b26      	ldr	r3, [pc, #152]	; (12704 <store_file_packet+0x25c>)
   1266a:	4798      	blx	r3
			add_state(CANCELED);
   1266c:	2020      	movs	r0, #32
   1266e:	4b2d      	ldr	r3, [pc, #180]	; (12724 <store_file_packet+0x27c>)
   12670:	4798      	blx	r3
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file write error, download canceled.\r\n");
   12672:	492e      	ldr	r1, [pc, #184]	; (1272c <store_file_packet+0x284>)
   12674:	2001      	movs	r0, #1
   12676:	4b1d      	ldr	r3, [pc, #116]	; (126ec <store_file_packet+0x244>)
   12678:	4798      	blx	r3
			return;
   1267a:	e72f      	b.n	124dc <store_file_packet+0x34>
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file name is invalid. Download canceled.\r\n");
   1267c:	492c      	ldr	r1, [pc, #176]	; (12730 <store_file_packet+0x288>)
   1267e:	2001      	movs	r0, #1
   12680:	4b1a      	ldr	r3, [pc, #104]	; (126ec <store_file_packet+0x244>)
   12682:	4798      	blx	r3
			add_state(CANCELED);
   12684:	2020      	movs	r0, #32
   12686:	4b27      	ldr	r3, [pc, #156]	; (12724 <store_file_packet+0x27c>)
   12688:	4798      	blx	r3
			return;
   1268a:	e727      	b.n	124dc <store_file_packet+0x34>
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file creation error! ret:%d\r\n", ret);
   1268c:	0002      	movs	r2, r0
   1268e:	4929      	ldr	r1, [pc, #164]	; (12734 <store_file_packet+0x28c>)
   12690:	2001      	movs	r0, #1
   12692:	4b16      	ldr	r3, [pc, #88]	; (126ec <store_file_packet+0x244>)
   12694:	4798      	blx	r3
			return;
   12696:	e721      	b.n	124dc <store_file_packet+0x34>
		received_file_size += wsize;
   12698:	4c21      	ldr	r4, [pc, #132]	; (12720 <store_file_packet+0x278>)
   1269a:	6823      	ldr	r3, [r4, #0]
   1269c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1269e:	468c      	mov	ip, r1
   126a0:	4463      	add	r3, ip
   126a2:	001a      	movs	r2, r3
   126a4:	6023      	str	r3, [r4, #0]
		LogMessage(LOG_DEBUG_LVL,"store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   126a6:	4d24      	ldr	r5, [pc, #144]	; (12738 <store_file_packet+0x290>)
   126a8:	682b      	ldr	r3, [r5, #0]
   126aa:	4924      	ldr	r1, [pc, #144]	; (1273c <store_file_packet+0x294>)
   126ac:	2001      	movs	r0, #1
   126ae:	4e0f      	ldr	r6, [pc, #60]	; (126ec <store_file_packet+0x244>)
   126b0:	47b0      	blx	r6
		if (received_file_size >= http_file_size) {
   126b2:	6822      	ldr	r2, [r4, #0]
   126b4:	682b      	ldr	r3, [r5, #0]
   126b6:	429a      	cmp	r2, r3
   126b8:	d200      	bcs.n	126bc <store_file_packet+0x214>
   126ba:	e70f      	b.n	124dc <store_file_packet+0x34>
			f_close(&file_object);
   126bc:	480f      	ldr	r0, [pc, #60]	; (126fc <store_file_packet+0x254>)
   126be:	4b11      	ldr	r3, [pc, #68]	; (12704 <store_file_packet+0x25c>)
   126c0:	4798      	blx	r3
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file downloaded successfully.\r\n");
   126c2:	491f      	ldr	r1, [pc, #124]	; (12740 <store_file_packet+0x298>)
   126c4:	2001      	movs	r0, #1
   126c6:	4b09      	ldr	r3, [pc, #36]	; (126ec <store_file_packet+0x244>)
   126c8:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
   126ca:	2280      	movs	r2, #128	; 0x80
   126cc:	0412      	lsls	r2, r2, #16
   126ce:	4b1d      	ldr	r3, [pc, #116]	; (12744 <store_file_packet+0x29c>)
   126d0:	615a      	str	r2, [r3, #20]
			add_state(COMPLETED);
   126d2:	2010      	movs	r0, #16
   126d4:	4b13      	ldr	r3, [pc, #76]	; (12724 <store_file_packet+0x27c>)
   126d6:	4798      	blx	r3
			return;
   126d8:	e700      	b.n	124dc <store_file_packet+0x34>
   126da:	46c0      	nop			; (mov r8, r8)
   126dc:	2000035d 	.word	0x2000035d
   126e0:	20000040 	.word	0x20000040
   126e4:	0002145d 	.word	0x0002145d
   126e8:	00021460 	.word	0x00021460
   126ec:	000148a5 	.word	0x000148a5
   126f0:	0001ff7b 	.word	0x0001ff7b
   126f4:	0001ff31 	.word	0x0001ff31
   126f8:	0001fc1b 	.word	0x0001fc1b
   126fc:	20000590 	.word	0x20000590
   12700:	0001c9f9 	.word	0x0001c9f9
   12704:	0001ce45 	.word	0x0001ce45
   12708:	0001ffd5 	.word	0x0001ffd5
   1270c:	0001ffab 	.word	0x0001ffab
   12710:	000003e7 	.word	0x000003e7
   12714:	00021484 	.word	0x00021484
   12718:	0001fed9 	.word	0x0001fed9
   1271c:	0002148c 	.word	0x0002148c
   12720:	200009f4 	.word	0x200009f4
   12724:	000121e5 	.word	0x000121e5
   12728:	0001cb81 	.word	0x0001cb81
   1272c:	00021528 	.word	0x00021528
   12730:	000214b4 	.word	0x000214b4
   12734:	000214f4 	.word	0x000214f4
   12738:	200005b4 	.word	0x200005b4
   1273c:	00021564 	.word	0x00021564
   12740:	00021598 	.word	0x00021598
   12744:	41004400 	.word	0x41004400

00012748 <http_client_callback>:
{
   12748:	b570      	push	{r4, r5, r6, lr}
   1274a:	0014      	movs	r4, r2
	switch (type) {
   1274c:	2904      	cmp	r1, #4
   1274e:	d807      	bhi.n	12760 <http_client_callback+0x18>
   12750:	0089      	lsls	r1, r1, #2
   12752:	4b2c      	ldr	r3, [pc, #176]	; (12804 <http_client_callback+0xbc>)
   12754:	585b      	ldr	r3, [r3, r1]
   12756:	469f      	mov	pc, r3
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: HTTP client socket connected.\r\n");
   12758:	492b      	ldr	r1, [pc, #172]	; (12808 <http_client_callback+0xc0>)
   1275a:	2001      	movs	r0, #1
   1275c:	4b2b      	ldr	r3, [pc, #172]	; (1280c <http_client_callback+0xc4>)
   1275e:	4798      	blx	r3
}
   12760:	bd70      	pop	{r4, r5, r6, pc}
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: request completed.\r\n");
   12762:	492b      	ldr	r1, [pc, #172]	; (12810 <http_client_callback+0xc8>)
   12764:	2001      	movs	r0, #1
   12766:	4b29      	ldr	r3, [pc, #164]	; (1280c <http_client_callback+0xc4>)
   12768:	4798      	blx	r3
		add_state(GET_REQUESTED);
   1276a:	2004      	movs	r0, #4
   1276c:	4b29      	ldr	r3, [pc, #164]	; (12814 <http_client_callback+0xcc>)
   1276e:	4798      	blx	r3
		break;
   12770:	e7f6      	b.n	12760 <http_client_callback+0x18>
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: received response %u data size %u\r\n",
   12772:	8812      	ldrh	r2, [r2, #0]
   12774:	6863      	ldr	r3, [r4, #4]
   12776:	4928      	ldr	r1, [pc, #160]	; (12818 <http_client_callback+0xd0>)
   12778:	2001      	movs	r0, #1
   1277a:	4d24      	ldr	r5, [pc, #144]	; (1280c <http_client_callback+0xc4>)
   1277c:	47a8      	blx	r5
		if ((unsigned int)data->recv_response.response_code == 200) {
   1277e:	8823      	ldrh	r3, [r4, #0]
   12780:	2bc8      	cmp	r3, #200	; 0xc8
   12782:	d10f      	bne.n	127a4 <http_client_callback+0x5c>
			http_file_size = data->recv_response.content_length;
   12784:	6861      	ldr	r1, [r4, #4]
   12786:	4b25      	ldr	r3, [pc, #148]	; (1281c <http_client_callback+0xd4>)
   12788:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
   1278a:	2200      	movs	r2, #0
   1278c:	4b24      	ldr	r3, [pc, #144]	; (12820 <http_client_callback+0xd8>)
   1278e:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   12790:	4b24      	ldr	r3, [pc, #144]	; (12824 <http_client_callback+0xdc>)
   12792:	4299      	cmp	r1, r3
   12794:	d8e4      	bhi.n	12760 <http_client_callback+0x18>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
   12796:	68a0      	ldr	r0, [r4, #8]
   12798:	4b23      	ldr	r3, [pc, #140]	; (12828 <http_client_callback+0xe0>)
   1279a:	4798      	blx	r3
			add_state(COMPLETED);
   1279c:	2010      	movs	r0, #16
   1279e:	4b1d      	ldr	r3, [pc, #116]	; (12814 <http_client_callback+0xcc>)
   127a0:	4798      	blx	r3
   127a2:	e7dd      	b.n	12760 <http_client_callback+0x18>
			add_state(CANCELED);
   127a4:	2020      	movs	r0, #32
   127a6:	4b1b      	ldr	r3, [pc, #108]	; (12814 <http_client_callback+0xcc>)
   127a8:	4798      	blx	r3
			return;
   127aa:	e7d9      	b.n	12760 <http_client_callback+0x18>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   127ac:	6811      	ldr	r1, [r2, #0]
   127ae:	6850      	ldr	r0, [r2, #4]
   127b0:	4b1d      	ldr	r3, [pc, #116]	; (12828 <http_client_callback+0xe0>)
   127b2:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
   127b4:	7a23      	ldrb	r3, [r4, #8]
   127b6:	2b00      	cmp	r3, #0
   127b8:	d0d2      	beq.n	12760 <http_client_callback+0x18>
			add_state(COMPLETED);
   127ba:	2010      	movs	r0, #16
   127bc:	4b15      	ldr	r3, [pc, #84]	; (12814 <http_client_callback+0xcc>)
   127be:	4798      	blx	r3
   127c0:	e7ce      	b.n	12760 <http_client_callback+0x18>
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   127c2:	6812      	ldr	r2, [r2, #0]
   127c4:	4919      	ldr	r1, [pc, #100]	; (1282c <http_client_callback+0xe4>)
   127c6:	2001      	movs	r0, #1
   127c8:	4b10      	ldr	r3, [pc, #64]	; (1280c <http_client_callback+0xc4>)
   127ca:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
   127cc:	6823      	ldr	r3, [r4, #0]
   127ce:	330b      	adds	r3, #11
   127d0:	d1c6      	bne.n	12760 <http_client_callback+0x18>
	return ((down_state & mask) != 0);
   127d2:	4b17      	ldr	r3, [pc, #92]	; (12830 <http_client_callback+0xe8>)
   127d4:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
   127d6:	071b      	lsls	r3, r3, #28
   127d8:	d406      	bmi.n	127e8 <http_client_callback+0xa0>
	return ((down_state & mask) != 0);
   127da:	4b15      	ldr	r3, [pc, #84]	; (12830 <http_client_callback+0xe8>)
   127dc:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   127de:	075a      	lsls	r2, r3, #29
   127e0:	d40b      	bmi.n	127fa <http_client_callback+0xb2>
			start_download();
   127e2:	4b14      	ldr	r3, [pc, #80]	; (12834 <http_client_callback+0xec>)
   127e4:	4798      	blx	r3
   127e6:	e7bb      	b.n	12760 <http_client_callback+0x18>
				f_close(&file_object);
   127e8:	4813      	ldr	r0, [pc, #76]	; (12838 <http_client_callback+0xf0>)
   127ea:	4b14      	ldr	r3, [pc, #80]	; (1283c <http_client_callback+0xf4>)
   127ec:	4798      	blx	r3
	down_state &= ~mask;
   127ee:	4a10      	ldr	r2, [pc, #64]	; (12830 <http_client_callback+0xe8>)
   127f0:	7813      	ldrb	r3, [r2, #0]
   127f2:	2108      	movs	r1, #8
   127f4:	438b      	bics	r3, r1
   127f6:	7013      	strb	r3, [r2, #0]
   127f8:	e7ef      	b.n	127da <http_client_callback+0x92>
   127fa:	2204      	movs	r2, #4
   127fc:	4393      	bics	r3, r2
   127fe:	4a0c      	ldr	r2, [pc, #48]	; (12830 <http_client_callback+0xe8>)
   12800:	7013      	strb	r3, [r2, #0]
   12802:	e7ee      	b.n	127e2 <http_client_callback+0x9a>
   12804:	00020fcc 	.word	0x00020fcc
   12808:	00021024 	.word	0x00021024
   1280c:	000148a5 	.word	0x000148a5
   12810:	0002105c 	.word	0x0002105c
   12814:	000121e5 	.word	0x000121e5
   12818:	00021088 	.word	0x00021088
   1281c:	200005b4 	.word	0x200005b4
   12820:	200009f4 	.word	0x200009f4
   12824:	000005a6 	.word	0x000005a6
   12828:	000124a9 	.word	0x000124a9
   1282c:	000210c4 	.word	0x000210c4
   12830:	2000035d 	.word	0x2000035d
   12834:	00012329 	.word	0x00012329
   12838:	20000590 	.word	0x20000590
   1283c:	0001ce45 	.word	0x0001ce45

00012840 <wifi_cb>:
{
   12840:	b510      	push	{r4, lr}
   12842:	b082      	sub	sp, #8
	switch (u8MsgType) {
   12844:	282c      	cmp	r0, #44	; 0x2c
   12846:	d003      	beq.n	12850 <wifi_cb+0x10>
   12848:	2832      	cmp	r0, #50	; 0x32
   1284a:	d037      	beq.n	128bc <wifi_cb+0x7c>
}
   1284c:	b002      	add	sp, #8
   1284e:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   12850:	780b      	ldrb	r3, [r1, #0]
   12852:	2b01      	cmp	r3, #1
   12854:	d01d      	beq.n	12892 <wifi_cb+0x52>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   12856:	2b00      	cmp	r3, #0
   12858:	d1f8      	bne.n	1284c <wifi_cb+0xc>
			LogMessage(LOG_DEBUG_LVL,"wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   1285a:	4928      	ldr	r1, [pc, #160]	; (128fc <wifi_cb+0xbc>)
   1285c:	2001      	movs	r0, #1
   1285e:	4b28      	ldr	r3, [pc, #160]	; (12900 <wifi_cb+0xc0>)
   12860:	4798      	blx	r3
	down_state &= ~mask;
   12862:	4a28      	ldr	r2, [pc, #160]	; (12904 <wifi_cb+0xc4>)
   12864:	7813      	ldrb	r3, [r2, #0]
   12866:	2102      	movs	r1, #2
   12868:	438b      	bics	r3, r1
   1286a:	7013      	strb	r3, [r2, #0]
			if (is_state_set(DOWNLOADING)) {
   1286c:	071b      	lsls	r3, r3, #28
   1286e:	d417      	bmi.n	128a0 <wifi_cb+0x60>
	return ((down_state & mask) != 0);
   12870:	4b24      	ldr	r3, [pc, #144]	; (12904 <wifi_cb+0xc4>)
   12872:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   12874:	075a      	lsls	r2, r3, #29
   12876:	d41c      	bmi.n	128b2 <wifi_cb+0x72>
			mqtt_disconnect(&mqtt_inst, 1);
   12878:	2101      	movs	r1, #1
   1287a:	4823      	ldr	r0, [pc, #140]	; (12908 <wifi_cb+0xc8>)
   1287c:	4b23      	ldr	r3, [pc, #140]	; (1290c <wifi_cb+0xcc>)
   1287e:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   12880:	23ff      	movs	r3, #255	; 0xff
   12882:	9300      	str	r3, [sp, #0]
   12884:	4b22      	ldr	r3, [pc, #136]	; (12910 <wifi_cb+0xd0>)
   12886:	2202      	movs	r2, #2
   12888:	2107      	movs	r1, #7
   1288a:	4822      	ldr	r0, [pc, #136]	; (12914 <wifi_cb+0xd4>)
   1288c:	4c22      	ldr	r4, [pc, #136]	; (12918 <wifi_cb+0xd8>)
   1288e:	47a0      	blx	r4
   12890:	e7dc      	b.n	1284c <wifi_cb+0xc>
			LogMessage(LOG_DEBUG_LVL,"wifi_cb: M2M_WIFI_CONNECTED\r\n");
   12892:	4922      	ldr	r1, [pc, #136]	; (1291c <wifi_cb+0xdc>)
   12894:	2001      	movs	r0, #1
   12896:	4b1a      	ldr	r3, [pc, #104]	; (12900 <wifi_cb+0xc0>)
   12898:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
   1289a:	4b21      	ldr	r3, [pc, #132]	; (12920 <wifi_cb+0xe0>)
   1289c:	4798      	blx	r3
   1289e:	e7d5      	b.n	1284c <wifi_cb+0xc>
				f_close(&file_object);
   128a0:	4820      	ldr	r0, [pc, #128]	; (12924 <wifi_cb+0xe4>)
   128a2:	4b21      	ldr	r3, [pc, #132]	; (12928 <wifi_cb+0xe8>)
   128a4:	4798      	blx	r3
	down_state &= ~mask;
   128a6:	4a17      	ldr	r2, [pc, #92]	; (12904 <wifi_cb+0xc4>)
   128a8:	7813      	ldrb	r3, [r2, #0]
   128aa:	2108      	movs	r1, #8
   128ac:	438b      	bics	r3, r1
   128ae:	7013      	strb	r3, [r2, #0]
   128b0:	e7de      	b.n	12870 <wifi_cb+0x30>
   128b2:	2204      	movs	r2, #4
   128b4:	4393      	bics	r3, r2
   128b6:	4a13      	ldr	r2, [pc, #76]	; (12904 <wifi_cb+0xc4>)
   128b8:	7013      	strb	r3, [r2, #0]
   128ba:	e7dd      	b.n	12878 <wifi_cb+0x38>
		LogMessage(LOG_DEBUG_LVL,"wifi_cb: IP address is %u.%u.%u.%u\r\n",
   128bc:	784b      	ldrb	r3, [r1, #1]
   128be:	780a      	ldrb	r2, [r1, #0]
   128c0:	78c8      	ldrb	r0, [r1, #3]
   128c2:	9001      	str	r0, [sp, #4]
   128c4:	7889      	ldrb	r1, [r1, #2]
   128c6:	9100      	str	r1, [sp, #0]
   128c8:	4918      	ldr	r1, [pc, #96]	; (1292c <wifi_cb+0xec>)
   128ca:	2001      	movs	r0, #1
   128cc:	4c0c      	ldr	r4, [pc, #48]	; (12900 <wifi_cb+0xc0>)
   128ce:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
   128d0:	2002      	movs	r0, #2
   128d2:	4b17      	ldr	r3, [pc, #92]	; (12930 <wifi_cb+0xf0>)
   128d4:	4798      	blx	r3
		if(do_download_flag == 1)
   128d6:	4b17      	ldr	r3, [pc, #92]	; (12934 <wifi_cb+0xf4>)
   128d8:	781b      	ldrb	r3, [r3, #0]
   128da:	2b01      	cmp	r3, #1
   128dc:	d00a      	beq.n	128f4 <wifi_cb+0xb4>
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   128de:	4916      	ldr	r1, [pc, #88]	; (12938 <wifi_cb+0xf8>)
   128e0:	4809      	ldr	r0, [pc, #36]	; (12908 <wifi_cb+0xc8>)
   128e2:	4b16      	ldr	r3, [pc, #88]	; (1293c <wifi_cb+0xfc>)
   128e4:	4798      	blx	r3
   128e6:	2800      	cmp	r0, #0
   128e8:	d0b0      	beq.n	1284c <wifi_cb+0xc>
			LogMessage(LOG_DEBUG_LVL,"Error connecting to MQTT Broker!\r\n");
   128ea:	4915      	ldr	r1, [pc, #84]	; (12940 <wifi_cb+0x100>)
   128ec:	2001      	movs	r0, #1
   128ee:	4b04      	ldr	r3, [pc, #16]	; (12900 <wifi_cb+0xc0>)
   128f0:	4798      	blx	r3
}
   128f2:	e7ab      	b.n	1284c <wifi_cb+0xc>
			start_download();
   128f4:	4b13      	ldr	r3, [pc, #76]	; (12944 <wifi_cb+0x104>)
   128f6:	4798      	blx	r3
   128f8:	e7a8      	b.n	1284c <wifi_cb+0xc>
   128fa:	46c0      	nop			; (mov r8, r8)
   128fc:	00021740 	.word	0x00021740
   12900:	000148a5 	.word	0x000148a5
   12904:	2000035d 	.word	0x2000035d
   12908:	200005bc 	.word	0x200005bc
   1290c:	0001db4d 	.word	0x0001db4d
   12910:	00021764 	.word	0x00021764
   12914:	00021770 	.word	0x00021770
   12918:	00016d01 	.word	0x00016d01
   1291c:	00021720 	.word	0x00021720
   12920:	00016d1d 	.word	0x00016d1d
   12924:	20000590 	.word	0x20000590
   12928:	0001ce45 	.word	0x0001ce45
   1292c:	00021778 	.word	0x00021778
   12930:	000121e5 	.word	0x000121e5
   12934:	2000035c 	.word	0x2000035c
   12938:	00021200 	.word	0x00021200
   1293c:	0001da89 	.word	0x0001da89
   12940:	000217a0 	.word	0x000217a0
   12944:	00012329 	.word	0x00012329

00012948 <init_storage>:
{
   12948:	b570      	push	{r4, r5, r6, lr}
	sd_mmc_init();
   1294a:	4b1c      	ldr	r3, [pc, #112]	; (129bc <init_storage+0x74>)
   1294c:	4798      	blx	r3
		LogMessage(LOG_DEBUG_LVL,"init_storage: please plug an SD/MMC card in slot...\r\n");
   1294e:	491c      	ldr	r1, [pc, #112]	; (129c0 <init_storage+0x78>)
   12950:	2001      	movs	r0, #1
   12952:	4b1c      	ldr	r3, [pc, #112]	; (129c4 <init_storage+0x7c>)
   12954:	4798      	blx	r3
			status = sd_mmc_test_unit_ready(0);
   12956:	4e1c      	ldr	r6, [pc, #112]	; (129c8 <init_storage+0x80>)
				LogMessage(LOG_DEBUG_LVL,"init_storage: SD Card install failed.\r\n");
   12958:	4c1a      	ldr	r4, [pc, #104]	; (129c4 <init_storage+0x7c>)
   1295a:	e009      	b.n	12970 <init_storage+0x28>
   1295c:	491b      	ldr	r1, [pc, #108]	; (129cc <init_storage+0x84>)
   1295e:	47a0      	blx	r4
				LogMessage(LOG_DEBUG_LVL,"init_storage: try unplug and re-plug the card.\r\n");
   12960:	491b      	ldr	r1, [pc, #108]	; (129d0 <init_storage+0x88>)
   12962:	2001      	movs	r0, #1
   12964:	47a0      	blx	r4
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   12966:	4d1b      	ldr	r5, [pc, #108]	; (129d4 <init_storage+0x8c>)
   12968:	2000      	movs	r0, #0
   1296a:	47a8      	blx	r5
   1296c:	2802      	cmp	r0, #2
   1296e:	d1fb      	bne.n	12968 <init_storage+0x20>
			status = sd_mmc_test_unit_ready(0);
   12970:	2000      	movs	r0, #0
   12972:	47b0      	blx	r6
			if (CTRL_FAIL == status) {
   12974:	2801      	cmp	r0, #1
   12976:	d0f1      	beq.n	1295c <init_storage+0x14>
		} while (CTRL_GOOD != status);
   12978:	2800      	cmp	r0, #0
   1297a:	d1f9      	bne.n	12970 <init_storage+0x28>
		LogMessage(LOG_DEBUG_LVL,"init_storage: mounting SD card...\r\n");
   1297c:	4916      	ldr	r1, [pc, #88]	; (129d8 <init_storage+0x90>)
   1297e:	3001      	adds	r0, #1
   12980:	4b10      	ldr	r3, [pc, #64]	; (129c4 <init_storage+0x7c>)
   12982:	4798      	blx	r3
		memset(&fatfs, 0, sizeof(FATFS));
   12984:	4c15      	ldr	r4, [pc, #84]	; (129dc <init_storage+0x94>)
   12986:	228c      	movs	r2, #140	; 0x8c
   12988:	0092      	lsls	r2, r2, #2
   1298a:	2100      	movs	r1, #0
   1298c:	0020      	movs	r0, r4
   1298e:	4b14      	ldr	r3, [pc, #80]	; (129e0 <init_storage+0x98>)
   12990:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   12992:	0021      	movs	r1, r4
   12994:	2000      	movs	r0, #0
   12996:	4b13      	ldr	r3, [pc, #76]	; (129e4 <init_storage+0x9c>)
   12998:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
   1299a:	280b      	cmp	r0, #11
   1299c:	d007      	beq.n	129ae <init_storage+0x66>
		LogMessage(LOG_DEBUG_LVL,"init_storage: SD card mount OK.\r\n");
   1299e:	4912      	ldr	r1, [pc, #72]	; (129e8 <init_storage+0xa0>)
   129a0:	2001      	movs	r0, #1
   129a2:	4b08      	ldr	r3, [pc, #32]	; (129c4 <init_storage+0x7c>)
   129a4:	4798      	blx	r3
		add_state(STORAGE_READY);
   129a6:	2001      	movs	r0, #1
   129a8:	4b10      	ldr	r3, [pc, #64]	; (129ec <init_storage+0xa4>)
   129aa:	4798      	blx	r3
}
   129ac:	bd70      	pop	{r4, r5, r6, pc}
			LogMessage(LOG_DEBUG_LVL,"init_storage: SD card mount failed! (res %d)\r\n", res);
   129ae:	220b      	movs	r2, #11
   129b0:	490f      	ldr	r1, [pc, #60]	; (129f0 <init_storage+0xa8>)
   129b2:	380a      	subs	r0, #10
   129b4:	4b03      	ldr	r3, [pc, #12]	; (129c4 <init_storage+0x7c>)
   129b6:	4798      	blx	r3
			return;
   129b8:	e7f8      	b.n	129ac <init_storage+0x64>
   129ba:	46c0      	nop			; (mov r8, r8)
   129bc:	00014a21 	.word	0x00014a21
   129c0:	000210f4 	.word	0x000210f4
   129c4:	000148a5 	.word	0x000148a5
   129c8:	00015155 	.word	0x00015155
   129cc:	0002112c 	.word	0x0002112c
   129d0:	00021154 	.word	0x00021154
   129d4:	00014a41 	.word	0x00014a41
   129d8:	00021188 	.word	0x00021188
   129dc:	20000360 	.word	0x20000360
   129e0:	0001fc1b 	.word	0x0001fc1b
   129e4:	0001c9c9 	.word	0x0001c9c9
   129e8:	000211dc 	.word	0x000211dc
   129ec:	000121e5 	.word	0x000121e5
   129f0:	000211ac 	.word	0x000211ac

000129f4 <configure_extint_channel>:
{
   129f4:	b510      	push	{r4, lr}
   129f6:	b084      	sub	sp, #16
    extint_chan_get_config_defaults(&config_extint_chan);
   129f8:	ac01      	add	r4, sp, #4
   129fa:	0020      	movs	r0, r4
   129fc:	4b07      	ldr	r3, [pc, #28]	; (12a1c <configure_extint_channel+0x28>)
   129fe:	4798      	blx	r3
    config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
   12a00:	2337      	movs	r3, #55	; 0x37
   12a02:	9301      	str	r3, [sp, #4]
    config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
   12a04:	2300      	movs	r3, #0
   12a06:	6063      	str	r3, [r4, #4]
    config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
   12a08:	3301      	adds	r3, #1
   12a0a:	7223      	strb	r3, [r4, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   12a0c:	3301      	adds	r3, #1
   12a0e:	72e3      	strb	r3, [r4, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   12a10:	0021      	movs	r1, r4
   12a12:	2007      	movs	r0, #7
   12a14:	4b02      	ldr	r3, [pc, #8]	; (12a20 <configure_extint_channel+0x2c>)
   12a16:	4798      	blx	r3
}
   12a18:	b004      	add	sp, #16
   12a1a:	bd10      	pop	{r4, pc}
   12a1c:	00019045 	.word	0x00019045
   12a20:	00019059 	.word	0x00019059

00012a24 <configure_extint_callbacks>:
{
   12a24:	b510      	push	{r4, lr}
    extint_register_callback(extint_detection_callback,
   12a26:	2200      	movs	r2, #0
   12a28:	2107      	movs	r1, #7
   12a2a:	4804      	ldr	r0, [pc, #16]	; (12a3c <configure_extint_callbacks+0x18>)
   12a2c:	4b04      	ldr	r3, [pc, #16]	; (12a40 <configure_extint_callbacks+0x1c>)
   12a2e:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE,
   12a30:	2100      	movs	r1, #0
   12a32:	2007      	movs	r0, #7
   12a34:	4b03      	ldr	r3, [pc, #12]	; (12a44 <configure_extint_callbacks+0x20>)
   12a36:	4798      	blx	r3
}
   12a38:	bd10      	pop	{r4, pc}
   12a3a:	46c0      	nop			; (mov r8, r8)
   12a3c:	00012285 	.word	0x00012285
   12a40:	00018f01 	.word	0x00018f01
   12a44:	00018f2d 	.word	0x00018f2d

00012a48 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask( void *pvParameters )
{
   12a48:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a4a:	b091      	sub	sp, #68	; 0x44
	tstrWifiInitParam param;
	int8_t ret;
	vTaskDelay(100);
   12a4c:	2064      	movs	r0, #100	; 0x64
   12a4e:	4b6e      	ldr	r3, [pc, #440]	; (12c08 <vWifiTask+0x1c0>)
   12a50:	4798      	blx	r3
	down_state = NOT_READY;
   12a52:	2200      	movs	r2, #0
   12a54:	4b6d      	ldr	r3, [pc, #436]	; (12c0c <vWifiTask+0x1c4>)
   12a56:	701a      	strb	r2, [r3, #0]
	init_state();

	SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   12a58:	486d      	ldr	r0, [pc, #436]	; (12c10 <vWifiTask+0x1c8>)
   12a5a:	4b6e      	ldr	r3, [pc, #440]	; (12c14 <vWifiTask+0x1cc>)
   12a5c:	4798      	blx	r3
	sw_timer_get_config_defaults(&swt_conf);
   12a5e:	a803      	add	r0, sp, #12
   12a60:	4b6d      	ldr	r3, [pc, #436]	; (12c18 <vWifiTask+0x1d0>)
   12a62:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
   12a64:	4c6d      	ldr	r4, [pc, #436]	; (12c1c <vWifiTask+0x1d4>)
   12a66:	a903      	add	r1, sp, #12
   12a68:	0020      	movs	r0, r4
   12a6a:	4b6d      	ldr	r3, [pc, #436]	; (12c20 <vWifiTask+0x1d8>)
   12a6c:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
   12a6e:	0020      	movs	r0, r4
   12a70:	4b6c      	ldr	r3, [pc, #432]	; (12c24 <vWifiTask+0x1dc>)
   12a72:	4798      	blx	r3
	http_client_get_config_defaults(&httpc_conf);
   12a74:	a803      	add	r0, sp, #12
   12a76:	4b6c      	ldr	r3, [pc, #432]	; (12c28 <vWifiTask+0x1e0>)
   12a78:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   12a7a:	4b6c      	ldr	r3, [pc, #432]	; (12c2c <vWifiTask+0x1e4>)
   12a7c:	9307      	str	r3, [sp, #28]
	httpc_conf.timer_inst = &swt_module_inst;
   12a7e:	9404      	str	r4, [sp, #16]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   12a80:	a903      	add	r1, sp, #12
   12a82:	486b      	ldr	r0, [pc, #428]	; (12c30 <vWifiTask+0x1e8>)
   12a84:	4b6b      	ldr	r3, [pc, #428]	; (12c34 <vWifiTask+0x1ec>)
   12a86:	4798      	blx	r3
   12a88:	1e02      	subs	r2, r0, #0
	if (ret < 0) {
   12a8a:	db1e      	blt.n	12aca <vWifiTask+0x82>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
   12a8c:	496a      	ldr	r1, [pc, #424]	; (12c38 <vWifiTask+0x1f0>)
   12a8e:	4868      	ldr	r0, [pc, #416]	; (12c30 <vWifiTask+0x1e8>)
   12a90:	4b6a      	ldr	r3, [pc, #424]	; (12c3c <vWifiTask+0x1f4>)
   12a92:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
   12a94:	ac03      	add	r4, sp, #12
   12a96:	0020      	movs	r0, r4
   12a98:	4b69      	ldr	r3, [pc, #420]	; (12c40 <vWifiTask+0x1f8>)
   12a9a:	4798      	blx	r3
	mqtt_conf.read_buffer = mqtt_read_buffer;
   12a9c:	4b69      	ldr	r3, [pc, #420]	; (12c44 <vWifiTask+0x1fc>)
   12a9e:	60a3      	str	r3, [r4, #8]
	mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   12aa0:	2380      	movs	r3, #128	; 0x80
   12aa2:	009b      	lsls	r3, r3, #2
   12aa4:	60e3      	str	r3, [r4, #12]
	mqtt_conf.send_buffer = mqtt_send_buffer;
   12aa6:	4a68      	ldr	r2, [pc, #416]	; (12c48 <vWifiTask+0x200>)
   12aa8:	6122      	str	r2, [r4, #16]
	mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   12aaa:	6163      	str	r3, [r4, #20]
	mqtt_conf.port = CLOUDMQTT_PORT;
   12aac:	4b67      	ldr	r3, [pc, #412]	; (12c4c <vWifiTask+0x204>)
   12aae:	8023      	strh	r3, [r4, #0]
	mqtt_conf.keep_alive = 6000;
   12ab0:	4b67      	ldr	r3, [pc, #412]	; (12c50 <vWifiTask+0x208>)
   12ab2:	80a3      	strh	r3, [r4, #4]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
   12ab4:	0021      	movs	r1, r4
   12ab6:	4867      	ldr	r0, [pc, #412]	; (12c54 <vWifiTask+0x20c>)
   12ab8:	4b67      	ldr	r3, [pc, #412]	; (12c58 <vWifiTask+0x210>)
   12aba:	4798      	blx	r3
   12abc:	1e02      	subs	r2, r0, #0
	if (result < 0) {
   12abe:	da09      	bge.n	12ad4 <vWifiTask+0x8c>
		LogMessage(LOG_DEBUG_LVL,"MQTT initialization failed. Error code is (%d)\r\n", result);
   12ac0:	4966      	ldr	r1, [pc, #408]	; (12c5c <vWifiTask+0x214>)
   12ac2:	2001      	movs	r0, #1
   12ac4:	4b66      	ldr	r3, [pc, #408]	; (12c60 <vWifiTask+0x218>)
   12ac6:	4798      	blx	r3
   12ac8:	e7fe      	b.n	12ac8 <vWifiTask+0x80>
		LogMessage(LOG_DEBUG_LVL,"configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   12aca:	4966      	ldr	r1, [pc, #408]	; (12c64 <vWifiTask+0x21c>)
   12acc:	2001      	movs	r0, #1
   12ace:	4b64      	ldr	r3, [pc, #400]	; (12c60 <vWifiTask+0x218>)
   12ad0:	4798      	blx	r3
   12ad2:	e7fe      	b.n	12ad2 <vWifiTask+0x8a>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   12ad4:	4964      	ldr	r1, [pc, #400]	; (12c68 <vWifiTask+0x220>)
   12ad6:	485f      	ldr	r0, [pc, #380]	; (12c54 <vWifiTask+0x20c>)
   12ad8:	4b64      	ldr	r3, [pc, #400]	; (12c6c <vWifiTask+0x224>)
   12ada:	4798      	blx	r3
   12adc:	1e02      	subs	r2, r0, #0
	if (result < 0) {
   12ade:	db18      	blt.n	12b12 <vWifiTask+0xca>

	/* Initialize the MQTT service. */
	configure_mqtt();

	/* Initialize SD/MMC storage. */
	init_storage();
   12ae0:	4b63      	ldr	r3, [pc, #396]	; (12c70 <vWifiTask+0x228>)
   12ae2:	4798      	blx	r3

	/*Initialize BUTTON 0 as an external interrupt*/
	configure_extint_channel();
   12ae4:	4b63      	ldr	r3, [pc, #396]	; (12c74 <vWifiTask+0x22c>)
   12ae6:	4798      	blx	r3
	configure_extint_callbacks();
   12ae8:	4b63      	ldr	r3, [pc, #396]	; (12c78 <vWifiTask+0x230>)
   12aea:	4798      	blx	r3

	
	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   12aec:	2218      	movs	r2, #24
   12aee:	2100      	movs	r1, #0
   12af0:	a80a      	add	r0, sp, #40	; 0x28
   12af2:	4b62      	ldr	r3, [pc, #392]	; (12c7c <vWifiTask+0x234>)
   12af4:	4798      	blx	r3

	nm_bsp_init();
   12af6:	4b62      	ldr	r3, [pc, #392]	; (12c80 <vWifiTask+0x238>)
   12af8:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
   12afa:	4b62      	ldr	r3, [pc, #392]	; (12c84 <vWifiTask+0x23c>)
   12afc:	930a      	str	r3, [sp, #40]	; 0x28
	ret = m2m_wifi_init(&param);
   12afe:	a80a      	add	r0, sp, #40	; 0x28
   12b00:	4b61      	ldr	r3, [pc, #388]	; (12c88 <vWifiTask+0x240>)
   12b02:	4798      	blx	r3
   12b04:	1e02      	subs	r2, r0, #0
	if (M2M_SUCCESS != ret) {
   12b06:	d009      	beq.n	12b1c <vWifiTask+0xd4>
		LogMessage(LOG_DEBUG_LVL,"main: m2m_wifi_init call error! (res %d)\r\n", ret);
   12b08:	4960      	ldr	r1, [pc, #384]	; (12c8c <vWifiTask+0x244>)
   12b0a:	2001      	movs	r0, #1
   12b0c:	4b54      	ldr	r3, [pc, #336]	; (12c60 <vWifiTask+0x218>)
   12b0e:	4798      	blx	r3
   12b10:	e7fe      	b.n	12b10 <vWifiTask+0xc8>
		LogMessage(LOG_DEBUG_LVL,"MQTT register callback failed. Error code is (%d)\r\n", result);
   12b12:	495f      	ldr	r1, [pc, #380]	; (12c90 <vWifiTask+0x248>)
   12b14:	2001      	movs	r0, #1
   12b16:	4b52      	ldr	r3, [pc, #328]	; (12c60 <vWifiTask+0x218>)
   12b18:	4798      	blx	r3
   12b1a:	e7fe      	b.n	12b1a <vWifiTask+0xd2>
				}
		}


	//DOWNLOAD A FILE
	do_download_flag = true;
   12b1c:	2501      	movs	r5, #1
   12b1e:	4b5d      	ldr	r3, [pc, #372]	; (12c94 <vWifiTask+0x24c>)
   12b20:	701d      	strb	r5, [r3, #0]

	/* Initialize socket module. */
	socketInit();
   12b22:	4b5d      	ldr	r3, [pc, #372]	; (12c98 <vWifiTask+0x250>)
   12b24:	4798      	blx	r3
	/* Register socket callback function. */
	registerSocketCallback(socket_cb, resolve_cb);
   12b26:	495d      	ldr	r1, [pc, #372]	; (12c9c <vWifiTask+0x254>)
   12b28:	485d      	ldr	r0, [pc, #372]	; (12ca0 <vWifiTask+0x258>)
   12b2a:	4b5e      	ldr	r3, [pc, #376]	; (12ca4 <vWifiTask+0x25c>)
   12b2c:	4798      	blx	r3

	/* Connect to router. */
	LogMessage(LOG_DEBUG_LVL,"main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   12b2e:	4c5e      	ldr	r4, [pc, #376]	; (12ca8 <vWifiTask+0x260>)
   12b30:	0022      	movs	r2, r4
   12b32:	495e      	ldr	r1, [pc, #376]	; (12cac <vWifiTask+0x264>)
   12b34:	0028      	movs	r0, r5
   12b36:	4b4a      	ldr	r3, [pc, #296]	; (12c60 <vWifiTask+0x218>)
   12b38:	4798      	blx	r3
	delay_s(1);
   12b3a:	20fa      	movs	r0, #250	; 0xfa
   12b3c:	0080      	lsls	r0, r0, #2
   12b3e:	4b5c      	ldr	r3, [pc, #368]	; (12cb0 <vWifiTask+0x268>)
   12b40:	4798      	blx	r3

	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   12b42:	23ff      	movs	r3, #255	; 0xff
   12b44:	9300      	str	r3, [sp, #0]
   12b46:	4b5b      	ldr	r3, [pc, #364]	; (12cb4 <vWifiTask+0x26c>)
   12b48:	2202      	movs	r2, #2
   12b4a:	2107      	movs	r1, #7
   12b4c:	0020      	movs	r0, r4
   12b4e:	4c5a      	ldr	r4, [pc, #360]	; (12cb8 <vWifiTask+0x270>)
   12b50:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   12b52:	4b2e      	ldr	r3, [pc, #184]	; (12c0c <vWifiTask+0x1c4>)

	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   12b54:	781a      	ldrb	r2, [r3, #0]
   12b56:	2330      	movs	r3, #48	; 0x30
   12b58:	421a      	tst	r2, r3
   12b5a:	d10b      	bne.n	12b74 <vWifiTask+0x12c>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
   12b5c:	4e57      	ldr	r6, [pc, #348]	; (12cbc <vWifiTask+0x274>)
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
   12b5e:	4d2f      	ldr	r5, [pc, #188]	; (12c1c <vWifiTask+0x1d4>)
   12b60:	4c57      	ldr	r4, [pc, #348]	; (12cc0 <vWifiTask+0x278>)
		m2m_wifi_handle_events(NULL);
   12b62:	2000      	movs	r0, #0
   12b64:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
   12b66:	0028      	movs	r0, r5
   12b68:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   12b6a:	4b28      	ldr	r3, [pc, #160]	; (12c0c <vWifiTask+0x1c4>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   12b6c:	781b      	ldrb	r3, [r3, #0]
   12b6e:	2230      	movs	r2, #48	; 0x30
   12b70:	421a      	tst	r2, r3
   12b72:	d0f6      	beq.n	12b62 <vWifiTask+0x11a>
	}
	LogMessage(LOG_DEBUG_LVL,"main: please unplug the SD/MMC card.\r\n");
   12b74:	4953      	ldr	r1, [pc, #332]	; (12cc4 <vWifiTask+0x27c>)
   12b76:	2001      	movs	r0, #1
   12b78:	4c39      	ldr	r4, [pc, #228]	; (12c60 <vWifiTask+0x218>)
   12b7a:	47a0      	blx	r4
	LogMessage(LOG_DEBUG_LVL,"main: done.\r\n");
   12b7c:	4952      	ldr	r1, [pc, #328]	; (12cc8 <vWifiTask+0x280>)
   12b7e:	2001      	movs	r0, #1
   12b80:	47a0      	blx	r4


	//Disable socket for HTTP Transfer
	socketDeinit();
   12b82:	4b52      	ldr	r3, [pc, #328]	; (12ccc <vWifiTask+0x284>)
   12b84:	4798      	blx	r3


	vTaskDelay(1000);
   12b86:	20fa      	movs	r0, #250	; 0xfa
   12b88:	0080      	lsls	r0, r0, #2
   12b8a:	4b1f      	ldr	r3, [pc, #124]	; (12c08 <vWifiTask+0x1c0>)
   12b8c:	4798      	blx	r3
	//CONNECT TO MQTT BROKER

	do_download_flag = false;
   12b8e:	2200      	movs	r2, #0
   12b90:	4b40      	ldr	r3, [pc, #256]	; (12c94 <vWifiTask+0x24c>)
   12b92:	701a      	strb	r2, [r3, #0]

	//Re-enable socket for MQTT Transfer
	socketInit();
   12b94:	4b40      	ldr	r3, [pc, #256]	; (12c98 <vWifiTask+0x250>)
   12b96:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
   12b98:	494d      	ldr	r1, [pc, #308]	; (12cd0 <vWifiTask+0x288>)
   12b9a:	484e      	ldr	r0, [pc, #312]	; (12cd4 <vWifiTask+0x28c>)
   12b9c:	4b41      	ldr	r3, [pc, #260]	; (12ca4 <vWifiTask+0x25c>)
   12b9e:	4798      	blx	r3

		/* Connect to router. */
	
	if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   12ba0:	494d      	ldr	r1, [pc, #308]	; (12cd8 <vWifiTask+0x290>)
   12ba2:	482c      	ldr	r0, [pc, #176]	; (12c54 <vWifiTask+0x20c>)
   12ba4:	4b4d      	ldr	r3, [pc, #308]	; (12cdc <vWifiTask+0x294>)
   12ba6:	4798      	blx	r3
   12ba8:	2800      	cmp	r0, #0
   12baa:	d102      	bne.n	12bb2 <vWifiTask+0x16a>
	}
	
	while (1) {

	/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
   12bac:	4e43      	ldr	r6, [pc, #268]	; (12cbc <vWifiTask+0x274>)
		sw_timer_task(&swt_module_inst);
   12bae:	4d44      	ldr	r5, [pc, #272]	; (12cc0 <vWifiTask+0x278>)
   12bb0:	e018      	b.n	12be4 <vWifiTask+0x19c>
		LogMessage(LOG_DEBUG_LVL,"Error connecting to MQTT Broker!\r\n");
   12bb2:	494b      	ldr	r1, [pc, #300]	; (12ce0 <vWifiTask+0x298>)
   12bb4:	2001      	movs	r0, #1
   12bb6:	4b2a      	ldr	r3, [pc, #168]	; (12c60 <vWifiTask+0x218>)
   12bb8:	4798      	blx	r3
   12bba:	e7f7      	b.n	12bac <vWifiTask+0x164>

		if(isPressed)
		{
			//Publish updated temperature data
			mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg, strlen(mqtt_msg), 2, 0);
   12bbc:	4f49      	ldr	r7, [pc, #292]	; (12ce4 <vWifiTask+0x29c>)
   12bbe:	0038      	movs	r0, r7
   12bc0:	4b49      	ldr	r3, [pc, #292]	; (12ce8 <vWifiTask+0x2a0>)
   12bc2:	4798      	blx	r3
   12bc4:	0003      	movs	r3, r0
   12bc6:	2400      	movs	r4, #0
   12bc8:	9401      	str	r4, [sp, #4]
   12bca:	2202      	movs	r2, #2
   12bcc:	9200      	str	r2, [sp, #0]
   12bce:	003a      	movs	r2, r7
   12bd0:	4946      	ldr	r1, [pc, #280]	; (12cec <vWifiTask+0x2a4>)
   12bd2:	4820      	ldr	r0, [pc, #128]	; (12c54 <vWifiTask+0x20c>)
   12bd4:	4f46      	ldr	r7, [pc, #280]	; (12cf0 <vWifiTask+0x2a8>)
   12bd6:	47b8      	blx	r7
			isPressed = false;
   12bd8:	4b46      	ldr	r3, [pc, #280]	; (12cf4 <vWifiTask+0x2ac>)
   12bda:	701c      	strb	r4, [r3, #0]
   12bdc:	e00a      	b.n	12bf4 <vWifiTask+0x1ac>

		//Handle MQTT messages
			if(mqtt_inst.isConnected)
			mqtt_yield(&mqtt_inst, 100);

			vTaskDelay(50);
   12bde:	2032      	movs	r0, #50	; 0x32
   12be0:	4b09      	ldr	r3, [pc, #36]	; (12c08 <vWifiTask+0x1c0>)
   12be2:	4798      	blx	r3
		m2m_wifi_handle_events(NULL);
   12be4:	2000      	movs	r0, #0
   12be6:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
   12be8:	480c      	ldr	r0, [pc, #48]	; (12c1c <vWifiTask+0x1d4>)
   12bea:	47a8      	blx	r5
		if(isPressed)
   12bec:	4b41      	ldr	r3, [pc, #260]	; (12cf4 <vWifiTask+0x2ac>)
   12bee:	781b      	ldrb	r3, [r3, #0]
   12bf0:	2b00      	cmp	r3, #0
   12bf2:	d1e3      	bne.n	12bbc <vWifiTask+0x174>
			if(mqtt_inst.isConnected)
   12bf4:	2334      	movs	r3, #52	; 0x34
   12bf6:	4a17      	ldr	r2, [pc, #92]	; (12c54 <vWifiTask+0x20c>)
   12bf8:	5cd3      	ldrb	r3, [r2, r3]
   12bfa:	2b00      	cmp	r3, #0
   12bfc:	d0ef      	beq.n	12bde <vWifiTask+0x196>
			mqtt_yield(&mqtt_inst, 100);
   12bfe:	2164      	movs	r1, #100	; 0x64
   12c00:	0010      	movs	r0, r2
   12c02:	4b3d      	ldr	r3, [pc, #244]	; (12cf8 <vWifiTask+0x2b0>)
   12c04:	4798      	blx	r3
   12c06:	e7ea      	b.n	12bde <vWifiTask+0x196>
   12c08:	00013e31 	.word	0x00013e31
   12c0c:	2000035d 	.word	0x2000035d
   12c10:	000215cc 	.word	0x000215cc
   12c14:	000147f5 	.word	0x000147f5
   12c18:	0001f4e5 	.word	0x0001f4e5
   12c1c:	20003748 	.word	0x20003748
   12c20:	0001f4f1 	.word	0x0001f4f1
   12c24:	0001f59d 	.word	0x0001f59d
   12c28:	0001e4fd 	.word	0x0001e4fd
   12c2c:	000005a6 	.word	0x000005a6
   12c30:	200037a0 	.word	0x200037a0
   12c34:	0001e525 	.word	0x0001e525
   12c38:	00012749 	.word	0x00012749
   12c3c:	0001e5d9 	.word	0x0001e5d9
   12c40:	0001da45 	.word	0x0001da45
   12c44:	200005f4 	.word	0x200005f4
   12c48:	200007f4 	.word	0x200007f4
   12c4c:	00002d69 	.word	0x00002d69
   12c50:	00001770 	.word	0x00001770
   12c54:	200005bc 	.word	0x200005bc
   12c58:	0001d98d 	.word	0x0001d98d
   12c5c:	00021630 	.word	0x00021630
   12c60:	000148a5 	.word	0x000148a5
   12c64:	000215e8 	.word	0x000215e8
   12c68:	000123ad 	.word	0x000123ad
   12c6c:	0001da61 	.word	0x0001da61
   12c70:	00012949 	.word	0x00012949
   12c74:	000129f5 	.word	0x000129f5
   12c78:	00012a25 	.word	0x00012a25
   12c7c:	0001fc1b 	.word	0x0001fc1b
   12c80:	00015a39 	.word	0x00015a39
   12c84:	00012841 	.word	0x00012841
   12c88:	0001695d 	.word	0x0001695d
   12c8c:	00021698 	.word	0x00021698
   12c90:	00021664 	.word	0x00021664
   12c94:	2000035c 	.word	0x2000035c
   12c98:	000187cd 	.word	0x000187cd
   12c9c:	000122dd 	.word	0x000122dd
   12ca0:	0001231d 	.word	0x0001231d
   12ca4:	0001884d 	.word	0x0001884d
   12ca8:	00021770 	.word	0x00021770
   12cac:	000216c4 	.word	0x000216c4
   12cb0:	000159f9 	.word	0x000159f9
   12cb4:	00021764 	.word	0x00021764
   12cb8:	00016d01 	.word	0x00016d01
   12cbc:	00016a89 	.word	0x00016a89
   12cc0:	0001f625 	.word	0x0001f625
   12cc4:	000216e8 	.word	0x000216e8
   12cc8:	00021710 	.word	0x00021710
   12ccc:	00018811 	.word	0x00018811
   12cd0:	000122c5 	.word	0x000122c5
   12cd4:	000122d1 	.word	0x000122d1
   12cd8:	00021200 	.word	0x00021200
   12cdc:	0001da89 	.word	0x0001da89
   12ce0:	000217a0 	.word	0x000217a0
   12ce4:	20000000 	.word	0x20000000
   12ce8:	0001ff7b 	.word	0x0001ff7b
   12cec:	000212c8 	.word	0x000212c8
   12cf0:	0001db7d 	.word	0x0001db7d
   12cf4:	200005b8 	.word	0x200005b8
   12cf8:	0001dbdd 	.word	0x0001dbdd

00012cfc <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   12cfc:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
   12cfe:	0080      	lsls	r0, r0, #2
   12d00:	4b16      	ldr	r3, [pc, #88]	; (12d5c <_tc_interrupt_handler+0x60>)
   12d02:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   12d04:	6823      	ldr	r3, [r4, #0]
   12d06:	7b9d      	ldrb	r5, [r3, #14]
   12d08:	7e22      	ldrb	r2, [r4, #24]
   12d0a:	7e63      	ldrb	r3, [r4, #25]
   12d0c:	4013      	ands	r3, r2
   12d0e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   12d10:	07eb      	lsls	r3, r5, #31
   12d12:	d406      	bmi.n	12d22 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   12d14:	07ab      	lsls	r3, r5, #30
   12d16:	d40b      	bmi.n	12d30 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   12d18:	06eb      	lsls	r3, r5, #27
   12d1a:	d410      	bmi.n	12d3e <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   12d1c:	06ab      	lsls	r3, r5, #26
   12d1e:	d415      	bmi.n	12d4c <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
   12d20:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   12d22:	0020      	movs	r0, r4
   12d24:	68a3      	ldr	r3, [r4, #8]
   12d26:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   12d28:	2301      	movs	r3, #1
   12d2a:	6822      	ldr	r2, [r4, #0]
   12d2c:	7393      	strb	r3, [r2, #14]
   12d2e:	e7f1      	b.n	12d14 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
   12d30:	0020      	movs	r0, r4
   12d32:	68e3      	ldr	r3, [r4, #12]
   12d34:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   12d36:	2302      	movs	r3, #2
   12d38:	6822      	ldr	r2, [r4, #0]
   12d3a:	7393      	strb	r3, [r2, #14]
   12d3c:	e7ec      	b.n	12d18 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   12d3e:	0020      	movs	r0, r4
   12d40:	6923      	ldr	r3, [r4, #16]
   12d42:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   12d44:	2310      	movs	r3, #16
   12d46:	6822      	ldr	r2, [r4, #0]
   12d48:	7393      	strb	r3, [r2, #14]
   12d4a:	e7e7      	b.n	12d1c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   12d4c:	0020      	movs	r0, r4
   12d4e:	6963      	ldr	r3, [r4, #20]
   12d50:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   12d52:	6823      	ldr	r3, [r4, #0]
   12d54:	2220      	movs	r2, #32
   12d56:	739a      	strb	r2, [r3, #14]
}
   12d58:	e7e2      	b.n	12d20 <_tc_interrupt_handler+0x24>
   12d5a:	46c0      	nop			; (mov r8, r8)
   12d5c:	20003888 	.word	0x20003888

00012d60 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   12d60:	b510      	push	{r4, lr}
   12d62:	2000      	movs	r0, #0
   12d64:	4b01      	ldr	r3, [pc, #4]	; (12d6c <TC3_Handler+0xc>)
   12d66:	4798      	blx	r3
   12d68:	bd10      	pop	{r4, pc}
   12d6a:	46c0      	nop			; (mov r8, r8)
   12d6c:	00012cfd 	.word	0x00012cfd

00012d70 <TC4_Handler>:
   12d70:	b510      	push	{r4, lr}
   12d72:	2001      	movs	r0, #1
   12d74:	4b01      	ldr	r3, [pc, #4]	; (12d7c <TC4_Handler+0xc>)
   12d76:	4798      	blx	r3
   12d78:	bd10      	pop	{r4, pc}
   12d7a:	46c0      	nop			; (mov r8, r8)
   12d7c:	00012cfd 	.word	0x00012cfd

00012d80 <TC5_Handler>:
   12d80:	b510      	push	{r4, lr}
   12d82:	2002      	movs	r0, #2
   12d84:	4b01      	ldr	r3, [pc, #4]	; (12d8c <TC5_Handler+0xc>)
   12d86:	4798      	blx	r3
   12d88:	bd10      	pop	{r4, pc}
   12d8a:	46c0      	nop			; (mov r8, r8)
   12d8c:	00012cfd 	.word	0x00012cfd

00012d90 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   12d90:	b570      	push	{r4, r5, r6, lr}
   12d92:	000a      	movs	r2, r1
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   12d94:	4b09      	ldr	r3, [pc, #36]	; (12dbc <prvHelpCommand+0x2c>)
   12d96:	681b      	ldr	r3, [r3, #0]
   12d98:	2b00      	cmp	r3, #0
   12d9a:	d00a      	beq.n	12db2 <prvHelpCommand+0x22>
		pxCommand = &xRegisteredCommands;
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   12d9c:	4c07      	ldr	r4, [pc, #28]	; (12dbc <prvHelpCommand+0x2c>)
   12d9e:	6825      	ldr	r5, [r4, #0]
   12da0:	682b      	ldr	r3, [r5, #0]
   12da2:	6859      	ldr	r1, [r3, #4]
   12da4:	4b06      	ldr	r3, [pc, #24]	; (12dc0 <prvHelpCommand+0x30>)
   12da6:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   12da8:	6868      	ldr	r0, [r5, #4]
   12daa:	6020      	str	r0, [r4, #0]

	if( pxCommand == NULL )
   12dac:	1e43      	subs	r3, r0, #1
   12dae:	4198      	sbcs	r0, r3
	{
		xReturn = pdTRUE;
	}

	return xReturn;
}
   12db0:	bd70      	pop	{r4, r5, r6, pc}
		pxCommand = &xRegisteredCommands;
   12db2:	4904      	ldr	r1, [pc, #16]	; (12dc4 <prvHelpCommand+0x34>)
   12db4:	4b01      	ldr	r3, [pc, #4]	; (12dbc <prvHelpCommand+0x2c>)
   12db6:	6019      	str	r1, [r3, #0]
   12db8:	e7f0      	b.n	12d9c <prvHelpCommand+0xc>
   12dba:	46c0      	nop			; (mov r8, r8)
   12dbc:	200009fc 	.word	0x200009fc
   12dc0:	0001ffab 	.word	0x0001ffab
   12dc4:	20000088 	.word	0x20000088

00012dc8 <FreeRTOS_CLIProcessCommand>:
{
   12dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12dca:	46de      	mov	lr, fp
   12dcc:	4657      	mov	r7, sl
   12dce:	464e      	mov	r6, r9
   12dd0:	4645      	mov	r5, r8
   12dd2:	b5e0      	push	{r5, r6, r7, lr}
   12dd4:	b083      	sub	sp, #12
   12dd6:	0006      	movs	r6, r0
   12dd8:	9100      	str	r1, [sp, #0]
   12dda:	9201      	str	r2, [sp, #4]
	if( pxCommand == NULL )
   12ddc:	4b39      	ldr	r3, [pc, #228]	; (12ec4 <FreeRTOS_CLIProcessCommand+0xfc>)
   12dde:	681b      	ldr	r3, [r3, #0]
   12de0:	2b00      	cmp	r3, #0
   12de2:	d011      	beq.n	12e08 <FreeRTOS_CLIProcessCommand+0x40>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   12de4:	681b      	ldr	r3, [r3, #0]
   12de6:	689b      	ldr	r3, [r3, #8]
   12de8:	0032      	movs	r2, r6
   12dea:	9901      	ldr	r1, [sp, #4]
   12dec:	9800      	ldr	r0, [sp, #0]
   12dee:	4798      	blx	r3
		if( xReturn == pdFALSE )
   12df0:	2800      	cmp	r0, #0
   12df2:	d102      	bne.n	12dfa <FreeRTOS_CLIProcessCommand+0x32>
			pxCommand = NULL;
   12df4:	2200      	movs	r2, #0
   12df6:	4b33      	ldr	r3, [pc, #204]	; (12ec4 <FreeRTOS_CLIProcessCommand+0xfc>)
   12df8:	601a      	str	r2, [r3, #0]
}
   12dfa:	b003      	add	sp, #12
   12dfc:	bc3c      	pop	{r2, r3, r4, r5}
   12dfe:	4690      	mov	r8, r2
   12e00:	4699      	mov	r9, r3
   12e02:	46a2      	mov	sl, r4
   12e04:	46ab      	mov	fp, r5
   12e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   12e08:	4c2f      	ldr	r4, [pc, #188]	; (12ec8 <FreeRTOS_CLIProcessCommand+0x100>)
   12e0a:	4b2e      	ldr	r3, [pc, #184]	; (12ec4 <FreeRTOS_CLIProcessCommand+0xfc>)
   12e0c:	601c      	str	r4, [r3, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   12e0e:	4b2f      	ldr	r3, [pc, #188]	; (12ecc <FreeRTOS_CLIProcessCommand+0x104>)
   12e10:	4699      	mov	r9, r3
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   12e12:	2320      	movs	r3, #32
   12e14:	4698      	mov	r8, r3
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   12e16:	4b2e      	ldr	r3, [pc, #184]	; (12ed0 <FreeRTOS_CLIProcessCommand+0x108>)
   12e18:	469b      	mov	fp, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   12e1a:	4b2a      	ldr	r3, [pc, #168]	; (12ec4 <FreeRTOS_CLIProcessCommand+0xfc>)
   12e1c:	469a      	mov	sl, r3
   12e1e:	e00a      	b.n	12e36 <FreeRTOS_CLIProcessCommand+0x6e>
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   12e20:	0002      	movs	r2, r0
   12e22:	0029      	movs	r1, r5
   12e24:	0030      	movs	r0, r6
   12e26:	47d8      	blx	fp
   12e28:	2800      	cmp	r0, #0
   12e2a:	d00d      	beq.n	12e48 <FreeRTOS_CLIProcessCommand+0x80>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   12e2c:	6864      	ldr	r4, [r4, #4]
   12e2e:	4653      	mov	r3, sl
   12e30:	601c      	str	r4, [r3, #0]
   12e32:	2c00      	cmp	r4, #0
   12e34:	d03e      	beq.n	12eb4 <FreeRTOS_CLIProcessCommand+0xec>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   12e36:	6827      	ldr	r7, [r4, #0]
   12e38:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   12e3a:	0028      	movs	r0, r5
   12e3c:	47c8      	blx	r9
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   12e3e:	5c33      	ldrb	r3, [r6, r0]
   12e40:	4642      	mov	r2, r8
   12e42:	4393      	bics	r3, r2
   12e44:	d1f2      	bne.n	12e2c <FreeRTOS_CLIProcessCommand+0x64>
   12e46:	e7eb      	b.n	12e20 <FreeRTOS_CLIProcessCommand+0x58>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   12e48:	7b3f      	ldrb	r7, [r7, #12]
   12e4a:	b27f      	sxtb	r7, r7
   12e4c:	2f00      	cmp	r7, #0
   12e4e:	db2d      	blt.n	12eac <FreeRTOS_CLIProcessCommand+0xe4>
{
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   12e50:	7833      	ldrb	r3, [r6, #0]
   12e52:	2b00      	cmp	r3, #0
   12e54:	d028      	beq.n	12ea8 <FreeRTOS_CLIProcessCommand+0xe0>
   12e56:	0032      	movs	r2, r6
   12e58:	2500      	movs	r5, #0
   12e5a:	2100      	movs	r1, #0
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
   12e5c:	2401      	movs	r4, #1
   12e5e:	e008      	b.n	12e72 <FreeRTOS_CLIProcessCommand+0xaa>
   12e60:	2901      	cmp	r1, #1
   12e62:	d00a      	beq.n	12e7a <FreeRTOS_CLIProcessCommand+0xb2>
			{
				cParameters++;
   12e64:	3501      	adds	r5, #1
   12e66:	b26d      	sxtb	r5, r5
				xLastCharacterWasSpace = pdTRUE;
   12e68:	0021      	movs	r1, r4
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
   12e6a:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
   12e6c:	7813      	ldrb	r3, [r2, #0]
   12e6e:	2b00      	cmp	r3, #0
   12e70:	d005      	beq.n	12e7e <FreeRTOS_CLIProcessCommand+0xb6>
		if( ( *pcCommandString ) == ' ' )
   12e72:	2b20      	cmp	r3, #32
   12e74:	d0f4      	beq.n	12e60 <FreeRTOS_CLIProcessCommand+0x98>
			xLastCharacterWasSpace = pdFALSE;
   12e76:	0001      	movs	r1, r0
   12e78:	e7f7      	b.n	12e6a <FreeRTOS_CLIProcessCommand+0xa2>
			if( xLastCharacterWasSpace != pdTRUE )
   12e7a:	0021      	movs	r1, r4
   12e7c:	e7f5      	b.n	12e6a <FreeRTOS_CLIProcessCommand+0xa2>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   12e7e:	2901      	cmp	r1, #1
   12e80:	d00f      	beq.n	12ea2 <FreeRTOS_CLIProcessCommand+0xda>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   12e82:	4b10      	ldr	r3, [pc, #64]	; (12ec4 <FreeRTOS_CLIProcessCommand+0xfc>)
   12e84:	681b      	ldr	r3, [r3, #0]
   12e86:	2b00      	cmp	r3, #0
   12e88:	d014      	beq.n	12eb4 <FreeRTOS_CLIProcessCommand+0xec>
   12e8a:	42af      	cmp	r7, r5
   12e8c:	d0aa      	beq.n	12de4 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   12e8e:	9a01      	ldr	r2, [sp, #4]
   12e90:	4910      	ldr	r1, [pc, #64]	; (12ed4 <FreeRTOS_CLIProcessCommand+0x10c>)
   12e92:	9800      	ldr	r0, [sp, #0]
   12e94:	4b10      	ldr	r3, [pc, #64]	; (12ed8 <FreeRTOS_CLIProcessCommand+0x110>)
   12e96:	4798      	blx	r3
		pxCommand = NULL;
   12e98:	2200      	movs	r2, #0
   12e9a:	4b0a      	ldr	r3, [pc, #40]	; (12ec4 <FreeRTOS_CLIProcessCommand+0xfc>)
   12e9c:	601a      	str	r2, [r3, #0]
   12e9e:	2000      	movs	r0, #0
   12ea0:	e7ab      	b.n	12dfa <FreeRTOS_CLIProcessCommand+0x32>
	{
		cParameters--;
   12ea2:	3d01      	subs	r5, #1
   12ea4:	b26d      	sxtb	r5, r5
   12ea6:	e7ec      	b.n	12e82 <FreeRTOS_CLIProcessCommand+0xba>
	while( *pcCommandString != 0x00 )
   12ea8:	2500      	movs	r5, #0
   12eaa:	e7ea      	b.n	12e82 <FreeRTOS_CLIProcessCommand+0xba>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   12eac:	4b05      	ldr	r3, [pc, #20]	; (12ec4 <FreeRTOS_CLIProcessCommand+0xfc>)
   12eae:	681b      	ldr	r3, [r3, #0]
   12eb0:	2b00      	cmp	r3, #0
   12eb2:	d197      	bne.n	12de4 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   12eb4:	9a01      	ldr	r2, [sp, #4]
   12eb6:	4909      	ldr	r1, [pc, #36]	; (12edc <FreeRTOS_CLIProcessCommand+0x114>)
   12eb8:	9800      	ldr	r0, [sp, #0]
   12eba:	4b07      	ldr	r3, [pc, #28]	; (12ed8 <FreeRTOS_CLIProcessCommand+0x110>)
   12ebc:	4798      	blx	r3
		xReturn = pdFALSE;
   12ebe:	2000      	movs	r0, #0
	return xReturn;
   12ec0:	e79b      	b.n	12dfa <FreeRTOS_CLIProcessCommand+0x32>
   12ec2:	46c0      	nop			; (mov r8, r8)
   12ec4:	200009f8 	.word	0x200009f8
   12ec8:	20000088 	.word	0x20000088
   12ecc:	0001ff7b 	.word	0x0001ff7b
   12ed0:	0001ff89 	.word	0x0001ff89
   12ed4:	000217c4 	.word	0x000217c4
   12ed8:	0001ffab 	.word	0x0001ffab
   12edc:	0002181c 	.word	0x0002181c

00012ee0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   12ee0:	0003      	movs	r3, r0
   12ee2:	3308      	adds	r3, #8
   12ee4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   12ee6:	2201      	movs	r2, #1
   12ee8:	4252      	negs	r2, r2
   12eea:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   12eec:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   12eee:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   12ef0:	2300      	movs	r3, #0
   12ef2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   12ef4:	4770      	bx	lr

00012ef6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   12ef6:	2300      	movs	r3, #0
   12ef8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   12efa:	4770      	bx	lr

00012efc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
   12efc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   12efe:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   12f00:	689a      	ldr	r2, [r3, #8]
   12f02:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   12f04:	689a      	ldr	r2, [r3, #8]
   12f06:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
   12f08:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   12f0a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   12f0c:	6803      	ldr	r3, [r0, #0]
   12f0e:	3301      	adds	r3, #1
   12f10:	6003      	str	r3, [r0, #0]
}
   12f12:	4770      	bx	lr

00012f14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   12f14:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   12f16:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   12f18:	0002      	movs	r2, r0
   12f1a:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
   12f1c:	1c63      	adds	r3, r4, #1
   12f1e:	d102      	bne.n	12f26 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
   12f20:	6902      	ldr	r2, [r0, #16]
   12f22:	e004      	b.n	12f2e <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   12f24:	001a      	movs	r2, r3
   12f26:	6853      	ldr	r3, [r2, #4]
   12f28:	681d      	ldr	r5, [r3, #0]
   12f2a:	42ac      	cmp	r4, r5
   12f2c:	d2fa      	bcs.n	12f24 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   12f2e:	6853      	ldr	r3, [r2, #4]
   12f30:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   12f32:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   12f34:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
   12f36:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   12f38:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   12f3a:	6803      	ldr	r3, [r0, #0]
   12f3c:	3301      	adds	r3, #1
   12f3e:	6003      	str	r3, [r0, #0]
}
   12f40:	bd30      	pop	{r4, r5, pc}

00012f42 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   12f42:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   12f44:	6842      	ldr	r2, [r0, #4]
   12f46:	6881      	ldr	r1, [r0, #8]
   12f48:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   12f4a:	6882      	ldr	r2, [r0, #8]
   12f4c:	6841      	ldr	r1, [r0, #4]
   12f4e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   12f50:	685a      	ldr	r2, [r3, #4]
   12f52:	4290      	cmp	r0, r2
   12f54:	d006      	beq.n	12f64 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   12f56:	2200      	movs	r2, #0
   12f58:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   12f5a:	681a      	ldr	r2, [r3, #0]
   12f5c:	3a01      	subs	r2, #1
   12f5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   12f60:	6818      	ldr	r0, [r3, #0]
}
   12f62:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   12f64:	6882      	ldr	r2, [r0, #8]
   12f66:	605a      	str	r2, [r3, #4]
   12f68:	e7f5      	b.n	12f56 <uxListRemove+0x14>
	...

00012f6c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   12f6c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
   12f6e:	2300      	movs	r3, #0
   12f70:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   12f72:	4b06      	ldr	r3, [pc, #24]	; (12f8c <prvTaskExitError+0x20>)
   12f74:	681b      	ldr	r3, [r3, #0]
   12f76:	3301      	adds	r3, #1
   12f78:	d001      	beq.n	12f7e <prvTaskExitError+0x12>
   12f7a:	b672      	cpsid	i
   12f7c:	e7fe      	b.n	12f7c <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
   12f7e:	b672      	cpsid	i
	while( ulDummy == 0 )
   12f80:	9b01      	ldr	r3, [sp, #4]
   12f82:	2b00      	cmp	r3, #0
   12f84:	d0fc      	beq.n	12f80 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   12f86:	b002      	add	sp, #8
   12f88:	4770      	bx	lr
   12f8a:	46c0      	nop			; (mov r8, r8)
   12f8c:	20000090 	.word	0x20000090

00012f90 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   12f90:	4a0b      	ldr	r2, [pc, #44]	; (12fc0 <pxCurrentTCBConst2>)
   12f92:	6813      	ldr	r3, [r2, #0]
   12f94:	6818      	ldr	r0, [r3, #0]
   12f96:	3020      	adds	r0, #32
   12f98:	f380 8809 	msr	PSP, r0
   12f9c:	2002      	movs	r0, #2
   12f9e:	f380 8814 	msr	CONTROL, r0
   12fa2:	f3bf 8f6f 	isb	sy
   12fa6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   12fa8:	46ae      	mov	lr, r5
   12faa:	bc08      	pop	{r3}
   12fac:	bc04      	pop	{r2}
   12fae:	b662      	cpsie	i
   12fb0:	4718      	bx	r3
   12fb2:	46c0      	nop			; (mov r8, r8)
   12fb4:	46c0      	nop			; (mov r8, r8)
   12fb6:	46c0      	nop			; (mov r8, r8)
   12fb8:	46c0      	nop			; (mov r8, r8)
   12fba:	46c0      	nop			; (mov r8, r8)
   12fbc:	46c0      	nop			; (mov r8, r8)
   12fbe:	46c0      	nop			; (mov r8, r8)

00012fc0 <pxCurrentTCBConst2>:
   12fc0:	20003118 	.word	0x20003118

00012fc4 <pxPortInitialiseStack>:
{
   12fc4:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   12fc6:	1f03      	subs	r3, r0, #4
   12fc8:	2480      	movs	r4, #128	; 0x80
   12fca:	0464      	lsls	r4, r4, #17
   12fcc:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   12fce:	3b04      	subs	r3, #4
   12fd0:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   12fd2:	3b04      	subs	r3, #4
   12fd4:	4902      	ldr	r1, [pc, #8]	; (12fe0 <pxPortInitialiseStack+0x1c>)
   12fd6:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   12fd8:	3b14      	subs	r3, #20
   12fda:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   12fdc:	3840      	subs	r0, #64	; 0x40
}
   12fde:	bd10      	pop	{r4, pc}
   12fe0:	00012f6d 	.word	0x00012f6d

00012fe4 <SVC_Handler>:
}
   12fe4:	4770      	bx	lr
	...

00012fe8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   12fe8:	b570      	push	{r4, r5, r6, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   12fea:	4b13      	ldr	r3, [pc, #76]	; (13038 <xPortStartScheduler+0x50>)
   12fec:	6819      	ldr	r1, [r3, #0]
   12fee:	22ff      	movs	r2, #255	; 0xff
   12ff0:	0412      	lsls	r2, r2, #16
   12ff2:	430a      	orrs	r2, r1
   12ff4:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   12ff6:	6819      	ldr	r1, [r3, #0]
   12ff8:	22ff      	movs	r2, #255	; 0xff
   12ffa:	0612      	lsls	r2, r2, #24
   12ffc:	430a      	orrs	r2, r1
   12ffe:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   13000:	4d0e      	ldr	r5, [pc, #56]	; (1303c <xPortStartScheduler+0x54>)
   13002:	2400      	movs	r4, #0
   13004:	602c      	str	r4, [r5, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   13006:	4b0e      	ldr	r3, [pc, #56]	; (13040 <xPortStartScheduler+0x58>)
   13008:	601c      	str	r4, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1300a:	2000      	movs	r0, #0
   1300c:	4b0d      	ldr	r3, [pc, #52]	; (13044 <xPortStartScheduler+0x5c>)
   1300e:	4798      	blx	r3
   13010:	21fa      	movs	r1, #250	; 0xfa
   13012:	0089      	lsls	r1, r1, #2
   13014:	4b0c      	ldr	r3, [pc, #48]	; (13048 <xPortStartScheduler+0x60>)
   13016:	4798      	blx	r3
   13018:	3801      	subs	r0, #1
   1301a:	4b0c      	ldr	r3, [pc, #48]	; (1304c <xPortStartScheduler+0x64>)
   1301c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1301e:	2307      	movs	r3, #7
   13020:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
   13022:	4b0b      	ldr	r3, [pc, #44]	; (13050 <xPortStartScheduler+0x68>)
   13024:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
   13026:	4b0b      	ldr	r3, [pc, #44]	; (13054 <xPortStartScheduler+0x6c>)
   13028:	4798      	blx	r3
	vTaskSwitchContext();
   1302a:	4b0b      	ldr	r3, [pc, #44]	; (13058 <xPortStartScheduler+0x70>)
   1302c:	4798      	blx	r3
	prvTaskExitError();
   1302e:	4b0b      	ldr	r3, [pc, #44]	; (1305c <xPortStartScheduler+0x74>)
   13030:	4798      	blx	r3
}
   13032:	2000      	movs	r0, #0
   13034:	bd70      	pop	{r4, r5, r6, pc}
   13036:	46c0      	nop			; (mov r8, r8)
   13038:	e000ed20 	.word	0xe000ed20
   1303c:	e000e010 	.word	0xe000e010
   13040:	e000e018 	.word	0xe000e018
   13044:	0001a8d9 	.word	0x0001a8d9
   13048:	0001f829 	.word	0x0001f829
   1304c:	e000e014 	.word	0xe000e014
   13050:	20000090 	.word	0x20000090
   13054:	00012f91 	.word	0x00012f91
   13058:	00013e71 	.word	0x00013e71
   1305c:	00012f6d 	.word	0x00012f6d

00013060 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   13060:	2280      	movs	r2, #128	; 0x80
   13062:	0552      	lsls	r2, r2, #21
   13064:	4b01      	ldr	r3, [pc, #4]	; (1306c <vPortYield+0xc>)
   13066:	601a      	str	r2, [r3, #0]
}
   13068:	4770      	bx	lr
   1306a:	46c0      	nop			; (mov r8, r8)
   1306c:	e000ed04 	.word	0xe000ed04

00013070 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
   13070:	b672      	cpsid	i
    uxCriticalNesting++;
   13072:	4a04      	ldr	r2, [pc, #16]	; (13084 <vPortEnterCritical+0x14>)
   13074:	6813      	ldr	r3, [r2, #0]
   13076:	3301      	adds	r3, #1
   13078:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
   1307a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1307e:	f3bf 8f6f 	isb	sy
}
   13082:	4770      	bx	lr
   13084:	20000090 	.word	0x20000090

00013088 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
   13088:	4b06      	ldr	r3, [pc, #24]	; (130a4 <vPortExitCritical+0x1c>)
   1308a:	681b      	ldr	r3, [r3, #0]
   1308c:	2b00      	cmp	r3, #0
   1308e:	d101      	bne.n	13094 <vPortExitCritical+0xc>
   13090:	b672      	cpsid	i
   13092:	e7fe      	b.n	13092 <vPortExitCritical+0xa>
    uxCriticalNesting--;
   13094:	3b01      	subs	r3, #1
   13096:	4a03      	ldr	r2, [pc, #12]	; (130a4 <vPortExitCritical+0x1c>)
   13098:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
   1309a:	2b00      	cmp	r3, #0
   1309c:	d100      	bne.n	130a0 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
   1309e:	b662      	cpsie	i
}
   130a0:	4770      	bx	lr
   130a2:	46c0      	nop			; (mov r8, r8)
   130a4:	20000090 	.word	0x20000090

000130a8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
   130a8:	f3ef 8010 	mrs	r0, PRIMASK
   130ac:	b672      	cpsid	i
   130ae:	4770      	bx	lr

000130b0 <vClearInterruptMaskFromISR>:
	__asm volatile(
   130b0:	f380 8810 	msr	PRIMASK, r0
   130b4:	4770      	bx	lr
	...

000130c0 <PendSV_Handler>:
	__asm volatile
   130c0:	f3ef 8009 	mrs	r0, PSP
   130c4:	4b0e      	ldr	r3, [pc, #56]	; (13100 <pxCurrentTCBConst>)
   130c6:	681a      	ldr	r2, [r3, #0]
   130c8:	3820      	subs	r0, #32
   130ca:	6010      	str	r0, [r2, #0]
   130cc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   130ce:	4644      	mov	r4, r8
   130d0:	464d      	mov	r5, r9
   130d2:	4656      	mov	r6, sl
   130d4:	465f      	mov	r7, fp
   130d6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   130d8:	b508      	push	{r3, lr}
   130da:	b672      	cpsid	i
   130dc:	f000 fec8 	bl	13e70 <vTaskSwitchContext>
   130e0:	b662      	cpsie	i
   130e2:	bc0c      	pop	{r2, r3}
   130e4:	6811      	ldr	r1, [r2, #0]
   130e6:	6808      	ldr	r0, [r1, #0]
   130e8:	3010      	adds	r0, #16
   130ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   130ec:	46a0      	mov	r8, r4
   130ee:	46a9      	mov	r9, r5
   130f0:	46b2      	mov	sl, r6
   130f2:	46bb      	mov	fp, r7
   130f4:	f380 8809 	msr	PSP, r0
   130f8:	3820      	subs	r0, #32
   130fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   130fc:	4718      	bx	r3
   130fe:	46c0      	nop			; (mov r8, r8)

00013100 <pxCurrentTCBConst>:
   13100:	20003118 	.word	0x20003118

00013104 <SysTick_Handler>:
{
   13104:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   13106:	4b07      	ldr	r3, [pc, #28]	; (13124 <SysTick_Handler+0x20>)
   13108:	4798      	blx	r3
   1310a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
   1310c:	4b06      	ldr	r3, [pc, #24]	; (13128 <SysTick_Handler+0x24>)
   1310e:	4798      	blx	r3
   13110:	2800      	cmp	r0, #0
   13112:	d003      	beq.n	1311c <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   13114:	2280      	movs	r2, #128	; 0x80
   13116:	0552      	lsls	r2, r2, #21
   13118:	4b04      	ldr	r3, [pc, #16]	; (1312c <SysTick_Handler+0x28>)
   1311a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1311c:	0020      	movs	r0, r4
   1311e:	4b04      	ldr	r3, [pc, #16]	; (13130 <SysTick_Handler+0x2c>)
   13120:	4798      	blx	r3
}
   13122:	bd10      	pop	{r4, pc}
   13124:	000130a9 	.word	0x000130a9
   13128:	00013c11 	.word	0x00013c11
   1312c:	e000ed04 	.word	0xe000ed04
   13130:	000130b1 	.word	0x000130b1

00013134 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   13134:	b570      	push	{r4, r5, r6, lr}
   13136:	0004      	movs	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   13138:	0743      	lsls	r3, r0, #29
   1313a:	d002      	beq.n	13142 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1313c:	2307      	movs	r3, #7
   1313e:	439c      	bics	r4, r3
   13140:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
   13142:	4b13      	ldr	r3, [pc, #76]	; (13190 <pvPortMalloc+0x5c>)
   13144:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   13146:	4b13      	ldr	r3, [pc, #76]	; (13194 <pvPortMalloc+0x60>)
   13148:	681b      	ldr	r3, [r3, #0]
   1314a:	2b00      	cmp	r3, #0
   1314c:	d012      	beq.n	13174 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1314e:	4b12      	ldr	r3, [pc, #72]	; (13198 <pvPortMalloc+0x64>)
   13150:	681b      	ldr	r3, [r3, #0]
   13152:	18e4      	adds	r4, r4, r3
   13154:	4a11      	ldr	r2, [pc, #68]	; (1319c <pvPortMalloc+0x68>)
   13156:	4294      	cmp	r4, r2
   13158:	d813      	bhi.n	13182 <pvPortMalloc+0x4e>
   1315a:	42a3      	cmp	r3, r4
   1315c:	d211      	bcs.n	13182 <pvPortMalloc+0x4e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1315e:	4a0d      	ldr	r2, [pc, #52]	; (13194 <pvPortMalloc+0x60>)
   13160:	6815      	ldr	r5, [r2, #0]
   13162:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
   13164:	4b0c      	ldr	r3, [pc, #48]	; (13198 <pvPortMalloc+0x64>)
   13166:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   13168:	4b0d      	ldr	r3, [pc, #52]	; (131a0 <pvPortMalloc+0x6c>)
   1316a:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1316c:	2d00      	cmp	r5, #0
   1316e:	d00a      	beq.n	13186 <pvPortMalloc+0x52>
		}
	}
	#endif

	return pvReturn;
}
   13170:	0028      	movs	r0, r5
   13172:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   13174:	2207      	movs	r2, #7
   13176:	4b0b      	ldr	r3, [pc, #44]	; (131a4 <pvPortMalloc+0x70>)
   13178:	3308      	adds	r3, #8
   1317a:	4393      	bics	r3, r2
   1317c:	4a05      	ldr	r2, [pc, #20]	; (13194 <pvPortMalloc+0x60>)
   1317e:	6013      	str	r3, [r2, #0]
   13180:	e7e5      	b.n	1314e <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
   13182:	4b07      	ldr	r3, [pc, #28]	; (131a0 <pvPortMalloc+0x6c>)
   13184:	4798      	blx	r3
			vApplicationMallocFailedHook();
   13186:	4b08      	ldr	r3, [pc, #32]	; (131a8 <pvPortMalloc+0x74>)
   13188:	4798      	blx	r3
   1318a:	2500      	movs	r5, #0
	return pvReturn;
   1318c:	e7f0      	b.n	13170 <pvPortMalloc+0x3c>
   1318e:	46c0      	nop			; (mov r8, r8)
   13190:	00013bf5 	.word	0x00013bf5
   13194:	20000a00 	.word	0x20000a00
   13198:	20003114 	.word	0x20003114
   1319c:	00002707 	.word	0x00002707
   131a0:	00013d31 	.word	0x00013d31
   131a4:	20000a04 	.word	0x20000a04
   131a8:	0001f801 	.word	0x0001f801

000131ac <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   131ac:	2800      	cmp	r0, #0
   131ae:	d001      	beq.n	131b4 <vPortFree+0x8>
   131b0:	b672      	cpsid	i
   131b2:	e7fe      	b.n	131b2 <vPortFree+0x6>
}
   131b4:	4770      	bx	lr
	...

000131b8 <xPortGetFreeHeapSize>:
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   131b8:	4b02      	ldr	r3, [pc, #8]	; (131c4 <xPortGetFreeHeapSize+0xc>)
   131ba:	681b      	ldr	r3, [r3, #0]
   131bc:	4802      	ldr	r0, [pc, #8]	; (131c8 <xPortGetFreeHeapSize+0x10>)
   131be:	1ac0      	subs	r0, r0, r3
}
   131c0:	4770      	bx	lr
   131c2:	46c0      	nop			; (mov r8, r8)
   131c4:	20003114 	.word	0x20003114
   131c8:	00002708 	.word	0x00002708

000131cc <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   131cc:	b510      	push	{r4, lr}
   131ce:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
   131d0:	4b03      	ldr	r3, [pc, #12]	; (131e0 <prvIsQueueEmpty+0x14>)
   131d2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   131d4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   131d6:	4b03      	ldr	r3, [pc, #12]	; (131e4 <prvIsQueueEmpty+0x18>)
   131d8:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   131da:	4260      	negs	r0, r4
   131dc:	4160      	adcs	r0, r4

	return xReturn;
}
   131de:	bd10      	pop	{r4, pc}
   131e0:	00013071 	.word	0x00013071
   131e4:	00013089 	.word	0x00013089

000131e8 <prvCopyDataToQueue>:
{
   131e8:	b570      	push	{r4, r5, r6, lr}
   131ea:	0004      	movs	r4, r0
   131ec:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   131ee:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   131f0:	6c02      	ldr	r2, [r0, #64]	; 0x40
   131f2:	2a00      	cmp	r2, #0
   131f4:	d10b      	bne.n	1320e <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
   131f6:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   131f8:	6823      	ldr	r3, [r4, #0]
   131fa:	4283      	cmp	r3, r0
   131fc:	d104      	bne.n	13208 <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   131fe:	6860      	ldr	r0, [r4, #4]
   13200:	4b16      	ldr	r3, [pc, #88]	; (1325c <prvCopyDataToQueue+0x74>)
   13202:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   13204:	2300      	movs	r3, #0
   13206:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   13208:	3501      	adds	r5, #1
   1320a:	63a5      	str	r5, [r4, #56]	; 0x38
}
   1320c:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
   1320e:	2e00      	cmp	r6, #0
   13210:	d10e      	bne.n	13230 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   13212:	6880      	ldr	r0, [r0, #8]
   13214:	4b12      	ldr	r3, [pc, #72]	; (13260 <prvCopyDataToQueue+0x78>)
   13216:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   13218:	68a3      	ldr	r3, [r4, #8]
   1321a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   1321c:	4694      	mov	ip, r2
   1321e:	4463      	add	r3, ip
   13220:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
   13222:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   13224:	6862      	ldr	r2, [r4, #4]
   13226:	4293      	cmp	r3, r2
   13228:	d3ee      	bcc.n	13208 <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1322a:	6823      	ldr	r3, [r4, #0]
   1322c:	60a3      	str	r3, [r4, #8]
   1322e:	e7eb      	b.n	13208 <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   13230:	68c0      	ldr	r0, [r0, #12]
   13232:	4b0b      	ldr	r3, [pc, #44]	; (13260 <prvCopyDataToQueue+0x78>)
   13234:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   13236:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13238:	425b      	negs	r3, r3
   1323a:	68e2      	ldr	r2, [r4, #12]
   1323c:	18d2      	adds	r2, r2, r3
   1323e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   13240:	6821      	ldr	r1, [r4, #0]
   13242:	428a      	cmp	r2, r1
   13244:	d203      	bcs.n	1324e <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   13246:	6862      	ldr	r2, [r4, #4]
   13248:	4694      	mov	ip, r2
   1324a:	4463      	add	r3, ip
   1324c:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
   1324e:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
   13250:	2e02      	cmp	r6, #2
   13252:	d1d9      	bne.n	13208 <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   13254:	4285      	cmp	r5, r0
   13256:	d0d7      	beq.n	13208 <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
   13258:	3d01      	subs	r5, #1
   1325a:	e7d5      	b.n	13208 <prvCopyDataToQueue+0x20>
   1325c:	00014195 	.word	0x00014195
   13260:	0001fbe5 	.word	0x0001fbe5

00013264 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   13264:	b570      	push	{r4, r5, r6, lr}
   13266:	b082      	sub	sp, #8
   13268:	9001      	str	r0, [sp, #4]
   1326a:	000a      	movs	r2, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1326c:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1326e:	2c00      	cmp	r4, #0
   13270:	d005      	beq.n	1327e <prvNotifyQueueSetContainer+0x1a>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   13272:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   13274:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   13276:	4299      	cmp	r1, r3
   13278:	d303      	bcc.n	13282 <prvNotifyQueueSetContainer+0x1e>
   1327a:	b672      	cpsid	i
   1327c:	e7fe      	b.n	1327c <prvNotifyQueueSetContainer+0x18>
		configASSERT( pxQueueSetContainer );
   1327e:	b672      	cpsid	i
   13280:	e7fe      	b.n	13280 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   13282:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
   13284:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   13286:	428b      	cmp	r3, r1
   13288:	d802      	bhi.n	13290 <prvNotifyQueueSetContainer+0x2c>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
   1328a:	0030      	movs	r0, r6
   1328c:	b002      	add	sp, #8
   1328e:	bd70      	pop	{r4, r5, r6, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   13290:	2345      	movs	r3, #69	; 0x45
   13292:	5ce5      	ldrb	r5, [r4, r3]
   13294:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   13296:	a901      	add	r1, sp, #4
   13298:	0020      	movs	r0, r4
   1329a:	4b0a      	ldr	r3, [pc, #40]	; (132c4 <prvNotifyQueueSetContainer+0x60>)
   1329c:	4798      	blx	r3
   1329e:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
   132a0:	1c6b      	adds	r3, r5, #1
   132a2:	d10a      	bne.n	132ba <prvNotifyQueueSetContainer+0x56>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   132a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   132a6:	2b00      	cmp	r3, #0
   132a8:	d0ef      	beq.n	1328a <prvNotifyQueueSetContainer+0x26>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   132aa:	0020      	movs	r0, r4
   132ac:	3024      	adds	r0, #36	; 0x24
   132ae:	4b06      	ldr	r3, [pc, #24]	; (132c8 <prvNotifyQueueSetContainer+0x64>)
   132b0:	4798      	blx	r3
   132b2:	2800      	cmp	r0, #0
   132b4:	d0e9      	beq.n	1328a <prvNotifyQueueSetContainer+0x26>
						xReturn = pdTRUE;
   132b6:	2601      	movs	r6, #1
   132b8:	e7e7      	b.n	1328a <prvNotifyQueueSetContainer+0x26>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   132ba:	3501      	adds	r5, #1
   132bc:	b26d      	sxtb	r5, r5
   132be:	2345      	movs	r3, #69	; 0x45
   132c0:	54e5      	strb	r5, [r4, r3]
   132c2:	e7e2      	b.n	1328a <prvNotifyQueueSetContainer+0x26>
   132c4:	000131e9 	.word	0x000131e9
   132c8:	00014059 	.word	0x00014059

000132cc <prvCopyDataFromQueue>:
{
   132cc:	b510      	push	{r4, lr}
   132ce:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   132d0:	6c02      	ldr	r2, [r0, #64]	; 0x40
   132d2:	2a00      	cmp	r2, #0
   132d4:	d00b      	beq.n	132ee <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   132d6:	68c3      	ldr	r3, [r0, #12]
   132d8:	189b      	adds	r3, r3, r2
   132da:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   132dc:	6841      	ldr	r1, [r0, #4]
   132de:	428b      	cmp	r3, r1
   132e0:	d301      	bcc.n	132e6 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   132e2:	6803      	ldr	r3, [r0, #0]
   132e4:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   132e6:	68c1      	ldr	r1, [r0, #12]
   132e8:	0020      	movs	r0, r4
   132ea:	4b01      	ldr	r3, [pc, #4]	; (132f0 <prvCopyDataFromQueue+0x24>)
   132ec:	4798      	blx	r3
}
   132ee:	bd10      	pop	{r4, pc}
   132f0:	0001fbe5 	.word	0x0001fbe5

000132f4 <prvUnlockQueue>:
{
   132f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   132f6:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
   132f8:	4b25      	ldr	r3, [pc, #148]	; (13390 <prvUnlockQueue+0x9c>)
   132fa:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
   132fc:	2345      	movs	r3, #69	; 0x45
   132fe:	5cfc      	ldrb	r4, [r7, r3]
   13300:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   13302:	2c00      	cmp	r4, #0
   13304:	dd1c      	ble.n	13340 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   13306:	4e23      	ldr	r6, [pc, #140]	; (13394 <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   13308:	4d23      	ldr	r5, [pc, #140]	; (13398 <prvUnlockQueue+0xa4>)
   1330a:	e00b      	b.n	13324 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1330e:	2b00      	cmp	r3, #0
   13310:	d016      	beq.n	13340 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   13312:	0038      	movs	r0, r7
   13314:	3024      	adds	r0, #36	; 0x24
   13316:	47a8      	blx	r5
   13318:	2800      	cmp	r0, #0
   1331a:	d10e      	bne.n	1333a <prvUnlockQueue+0x46>
   1331c:	3c01      	subs	r4, #1
   1331e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   13320:	2c00      	cmp	r4, #0
   13322:	d00d      	beq.n	13340 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
   13324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   13326:	2b00      	cmp	r3, #0
   13328:	d0f0      	beq.n	1330c <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1332a:	2100      	movs	r1, #0
   1332c:	0038      	movs	r0, r7
   1332e:	47b0      	blx	r6
   13330:	2800      	cmp	r0, #0
   13332:	d0f3      	beq.n	1331c <prvUnlockQueue+0x28>
						vTaskMissedYield();
   13334:	4b19      	ldr	r3, [pc, #100]	; (1339c <prvUnlockQueue+0xa8>)
   13336:	4798      	blx	r3
   13338:	e7f0      	b.n	1331c <prvUnlockQueue+0x28>
							vTaskMissedYield();
   1333a:	4b18      	ldr	r3, [pc, #96]	; (1339c <prvUnlockQueue+0xa8>)
   1333c:	4798      	blx	r3
   1333e:	e7ed      	b.n	1331c <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
   13340:	22ff      	movs	r2, #255	; 0xff
   13342:	2345      	movs	r3, #69	; 0x45
   13344:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
   13346:	4b16      	ldr	r3, [pc, #88]	; (133a0 <prvUnlockQueue+0xac>)
   13348:	4798      	blx	r3
	taskENTER_CRITICAL();
   1334a:	4b11      	ldr	r3, [pc, #68]	; (13390 <prvUnlockQueue+0x9c>)
   1334c:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
   1334e:	2344      	movs	r3, #68	; 0x44
   13350:	5cfc      	ldrb	r4, [r7, r3]
   13352:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   13354:	2c00      	cmp	r4, #0
   13356:	dd14      	ble.n	13382 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   13358:	693b      	ldr	r3, [r7, #16]
   1335a:	2b00      	cmp	r3, #0
   1335c:	d011      	beq.n	13382 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1335e:	003d      	movs	r5, r7
   13360:	3510      	adds	r5, #16
   13362:	4e0d      	ldr	r6, [pc, #52]	; (13398 <prvUnlockQueue+0xa4>)
   13364:	e006      	b.n	13374 <prvUnlockQueue+0x80>
   13366:	3c01      	subs	r4, #1
   13368:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1336a:	2c00      	cmp	r4, #0
   1336c:	d009      	beq.n	13382 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1336e:	693b      	ldr	r3, [r7, #16]
   13370:	2b00      	cmp	r3, #0
   13372:	d006      	beq.n	13382 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   13374:	0028      	movs	r0, r5
   13376:	47b0      	blx	r6
   13378:	2800      	cmp	r0, #0
   1337a:	d0f4      	beq.n	13366 <prvUnlockQueue+0x72>
					vTaskMissedYield();
   1337c:	4b07      	ldr	r3, [pc, #28]	; (1339c <prvUnlockQueue+0xa8>)
   1337e:	4798      	blx	r3
   13380:	e7f1      	b.n	13366 <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
   13382:	22ff      	movs	r2, #255	; 0xff
   13384:	2344      	movs	r3, #68	; 0x44
   13386:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
   13388:	4b05      	ldr	r3, [pc, #20]	; (133a0 <prvUnlockQueue+0xac>)
   1338a:	4798      	blx	r3
}
   1338c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1338e:	46c0      	nop			; (mov r8, r8)
   13390:	00013071 	.word	0x00013071
   13394:	00013265 	.word	0x00013265
   13398:	00014059 	.word	0x00014059
   1339c:	00014169 	.word	0x00014169
   133a0:	00013089 	.word	0x00013089

000133a4 <xQueueGenericReset>:
{
   133a4:	b570      	push	{r4, r5, r6, lr}
   133a6:	0004      	movs	r4, r0
   133a8:	000d      	movs	r5, r1
	configASSERT( pxQueue );
   133aa:	2800      	cmp	r0, #0
   133ac:	d021      	beq.n	133f2 <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
   133ae:	4b17      	ldr	r3, [pc, #92]	; (1340c <xQueueGenericReset+0x68>)
   133b0:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   133b2:	6822      	ldr	r2, [r4, #0]
   133b4:	6c21      	ldr	r1, [r4, #64]	; 0x40
   133b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   133b8:	434b      	muls	r3, r1
   133ba:	18d0      	adds	r0, r2, r3
   133bc:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   133be:	2000      	movs	r0, #0
   133c0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   133c2:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   133c4:	1a5b      	subs	r3, r3, r1
   133c6:	18d3      	adds	r3, r2, r3
   133c8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   133ca:	23ff      	movs	r3, #255	; 0xff
   133cc:	2244      	movs	r2, #68	; 0x44
   133ce:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   133d0:	3201      	adds	r2, #1
   133d2:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
   133d4:	2d00      	cmp	r5, #0
   133d6:	d111      	bne.n	133fc <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   133d8:	6923      	ldr	r3, [r4, #16]
   133da:	2b00      	cmp	r3, #0
   133dc:	d005      	beq.n	133ea <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   133de:	0020      	movs	r0, r4
   133e0:	3010      	adds	r0, #16
   133e2:	4b0b      	ldr	r3, [pc, #44]	; (13410 <xQueueGenericReset+0x6c>)
   133e4:	4798      	blx	r3
   133e6:	2800      	cmp	r0, #0
   133e8:	d105      	bne.n	133f6 <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
   133ea:	4b0a      	ldr	r3, [pc, #40]	; (13414 <xQueueGenericReset+0x70>)
   133ec:	4798      	blx	r3
}
   133ee:	2001      	movs	r0, #1
   133f0:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
   133f2:	b672      	cpsid	i
   133f4:	e7fe      	b.n	133f4 <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
   133f6:	4b08      	ldr	r3, [pc, #32]	; (13418 <xQueueGenericReset+0x74>)
   133f8:	4798      	blx	r3
   133fa:	e7f6      	b.n	133ea <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   133fc:	0020      	movs	r0, r4
   133fe:	3010      	adds	r0, #16
   13400:	4d06      	ldr	r5, [pc, #24]	; (1341c <xQueueGenericReset+0x78>)
   13402:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   13404:	0020      	movs	r0, r4
   13406:	3024      	adds	r0, #36	; 0x24
   13408:	47a8      	blx	r5
   1340a:	e7ee      	b.n	133ea <xQueueGenericReset+0x46>
   1340c:	00013071 	.word	0x00013071
   13410:	00014059 	.word	0x00014059
   13414:	00013089 	.word	0x00013089
   13418:	00013061 	.word	0x00013061
   1341c:	00012ee1 	.word	0x00012ee1

00013420 <xQueueGenericCreate>:
	{
   13420:	b570      	push	{r4, r5, r6, lr}
   13422:	0006      	movs	r6, r0
   13424:	000d      	movs	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   13426:	2800      	cmp	r0, #0
   13428:	d101      	bne.n	1342e <xQueueGenericCreate+0xe>
   1342a:	b672      	cpsid	i
   1342c:	e7fe      	b.n	1342c <xQueueGenericCreate+0xc>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1342e:	0008      	movs	r0, r1
   13430:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   13432:	304c      	adds	r0, #76	; 0x4c
   13434:	4b0a      	ldr	r3, [pc, #40]	; (13460 <xQueueGenericCreate+0x40>)
   13436:	4798      	blx	r3
   13438:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
   1343a:	d00e      	beq.n	1345a <xQueueGenericCreate+0x3a>
	if( uxItemSize == ( UBaseType_t ) 0 )
   1343c:	2d00      	cmp	r5, #0
   1343e:	d003      	beq.n	13448 <xQueueGenericCreate+0x28>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   13440:	0003      	movs	r3, r0
   13442:	334c      	adds	r3, #76	; 0x4c
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   13444:	6003      	str	r3, [r0, #0]
   13446:	e000      	b.n	1344a <xQueueGenericCreate+0x2a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   13448:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
   1344a:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1344c:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1344e:	2101      	movs	r1, #1
   13450:	0020      	movs	r0, r4
   13452:	4b04      	ldr	r3, [pc, #16]	; (13464 <xQueueGenericCreate+0x44>)
   13454:	4798      	blx	r3
		pxNewQueue->pxQueueSetContainer = NULL;
   13456:	2300      	movs	r3, #0
   13458:	64a3      	str	r3, [r4, #72]	; 0x48
	}
   1345a:	0020      	movs	r0, r4
   1345c:	bd70      	pop	{r4, r5, r6, pc}
   1345e:	46c0      	nop			; (mov r8, r8)
   13460:	00013135 	.word	0x00013135
   13464:	000133a5 	.word	0x000133a5

00013468 <xQueueGenericSend>:
{
   13468:	b5f0      	push	{r4, r5, r6, r7, lr}
   1346a:	46ce      	mov	lr, r9
   1346c:	4647      	mov	r7, r8
   1346e:	b580      	push	{r7, lr}
   13470:	b085      	sub	sp, #20
   13472:	0004      	movs	r4, r0
   13474:	000f      	movs	r7, r1
   13476:	9201      	str	r2, [sp, #4]
   13478:	001d      	movs	r5, r3
	configASSERT( pxQueue );
   1347a:	2800      	cmp	r0, #0
   1347c:	d00c      	beq.n	13498 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1347e:	2900      	cmp	r1, #0
   13480:	d00c      	beq.n	1349c <xQueueGenericSend+0x34>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   13482:	2d02      	cmp	r5, #2
   13484:	d00f      	beq.n	134a6 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   13486:	4b4e      	ldr	r3, [pc, #312]	; (135c0 <xQueueGenericSend+0x158>)
   13488:	4798      	blx	r3
   1348a:	2800      	cmp	r0, #0
   1348c:	d110      	bne.n	134b0 <xQueueGenericSend+0x48>
   1348e:	9b01      	ldr	r3, [sp, #4]
   13490:	2b00      	cmp	r3, #0
   13492:	d011      	beq.n	134b8 <xQueueGenericSend+0x50>
   13494:	b672      	cpsid	i
   13496:	e7fe      	b.n	13496 <xQueueGenericSend+0x2e>
	configASSERT( pxQueue );
   13498:	b672      	cpsid	i
   1349a:	e7fe      	b.n	1349a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1349c:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1349e:	2b00      	cmp	r3, #0
   134a0:	d0ef      	beq.n	13482 <xQueueGenericSend+0x1a>
   134a2:	b672      	cpsid	i
   134a4:	e7fe      	b.n	134a4 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   134a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   134a8:	2b01      	cmp	r3, #1
   134aa:	d0ec      	beq.n	13486 <xQueueGenericSend+0x1e>
   134ac:	b672      	cpsid	i
   134ae:	e7fe      	b.n	134ae <xQueueGenericSend+0x46>
   134b0:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
   134b2:	4b44      	ldr	r3, [pc, #272]	; (135c4 <xQueueGenericSend+0x15c>)
   134b4:	4698      	mov	r8, r3
   134b6:	e04c      	b.n	13552 <xQueueGenericSend+0xea>
   134b8:	2600      	movs	r6, #0
   134ba:	e7fa      	b.n	134b2 <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   134bc:	002a      	movs	r2, r5
   134be:	0039      	movs	r1, r7
   134c0:	0020      	movs	r0, r4
   134c2:	4b41      	ldr	r3, [pc, #260]	; (135c8 <xQueueGenericSend+0x160>)
   134c4:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
   134c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   134c8:	2b00      	cmp	r3, #0
   134ca:	d00f      	beq.n	134ec <xQueueGenericSend+0x84>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   134cc:	0029      	movs	r1, r5
   134ce:	0020      	movs	r0, r4
   134d0:	4b3e      	ldr	r3, [pc, #248]	; (135cc <xQueueGenericSend+0x164>)
   134d2:	4798      	blx	r3
   134d4:	2800      	cmp	r0, #0
   134d6:	d001      	beq.n	134dc <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
   134d8:	4b3d      	ldr	r3, [pc, #244]	; (135d0 <xQueueGenericSend+0x168>)
   134da:	4798      	blx	r3
				taskEXIT_CRITICAL();
   134dc:	4b3d      	ldr	r3, [pc, #244]	; (135d4 <xQueueGenericSend+0x16c>)
   134de:	4798      	blx	r3
				return pdPASS;
   134e0:	2001      	movs	r0, #1
}
   134e2:	b005      	add	sp, #20
   134e4:	bc0c      	pop	{r2, r3}
   134e6:	4690      	mov	r8, r2
   134e8:	4699      	mov	r9, r3
   134ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   134ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   134ee:	2b00      	cmp	r3, #0
   134f0:	d008      	beq.n	13504 <xQueueGenericSend+0x9c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   134f2:	0020      	movs	r0, r4
   134f4:	3024      	adds	r0, #36	; 0x24
   134f6:	4b38      	ldr	r3, [pc, #224]	; (135d8 <xQueueGenericSend+0x170>)
   134f8:	4798      	blx	r3
   134fa:	2800      	cmp	r0, #0
   134fc:	d0ee      	beq.n	134dc <xQueueGenericSend+0x74>
								queueYIELD_IF_USING_PREEMPTION();
   134fe:	4b34      	ldr	r3, [pc, #208]	; (135d0 <xQueueGenericSend+0x168>)
   13500:	4798      	blx	r3
   13502:	e7eb      	b.n	134dc <xQueueGenericSend+0x74>
						else if( xYieldRequired != pdFALSE )
   13504:	2800      	cmp	r0, #0
   13506:	d0e9      	beq.n	134dc <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
   13508:	4b31      	ldr	r3, [pc, #196]	; (135d0 <xQueueGenericSend+0x168>)
   1350a:	4798      	blx	r3
   1350c:	e7e6      	b.n	134dc <xQueueGenericSend+0x74>
					taskEXIT_CRITICAL();
   1350e:	4b31      	ldr	r3, [pc, #196]	; (135d4 <xQueueGenericSend+0x16c>)
   13510:	4798      	blx	r3
					return errQUEUE_FULL;
   13512:	2000      	movs	r0, #0
   13514:	e7e5      	b.n	134e2 <xQueueGenericSend+0x7a>
		prvLockQueue( pxQueue );
   13516:	4b2f      	ldr	r3, [pc, #188]	; (135d4 <xQueueGenericSend+0x16c>)
   13518:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1351a:	a901      	add	r1, sp, #4
   1351c:	a802      	add	r0, sp, #8
   1351e:	4b2f      	ldr	r3, [pc, #188]	; (135dc <xQueueGenericSend+0x174>)
   13520:	4798      	blx	r3
   13522:	2800      	cmp	r0, #0
   13524:	d144      	bne.n	135b0 <xQueueGenericSend+0x148>
	taskENTER_CRITICAL();
   13526:	4b27      	ldr	r3, [pc, #156]	; (135c4 <xQueueGenericSend+0x15c>)
   13528:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1352a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1352c:	4699      	mov	r9, r3
   1352e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   13530:	4b28      	ldr	r3, [pc, #160]	; (135d4 <xQueueGenericSend+0x16c>)
   13532:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   13534:	45b1      	cmp	r9, r6
   13536:	d135      	bne.n	135a4 <xQueueGenericSend+0x13c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   13538:	0020      	movs	r0, r4
   1353a:	3010      	adds	r0, #16
   1353c:	9901      	ldr	r1, [sp, #4]
   1353e:	4b28      	ldr	r3, [pc, #160]	; (135e0 <xQueueGenericSend+0x178>)
   13540:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   13542:	0020      	movs	r0, r4
   13544:	4b27      	ldr	r3, [pc, #156]	; (135e4 <xQueueGenericSend+0x17c>)
   13546:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   13548:	4b27      	ldr	r3, [pc, #156]	; (135e8 <xQueueGenericSend+0x180>)
   1354a:	4798      	blx	r3
   1354c:	2800      	cmp	r0, #0
   1354e:	d026      	beq.n	1359e <xQueueGenericSend+0x136>
   13550:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
   13552:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   13554:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13556:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   13558:	4293      	cmp	r3, r2
   1355a:	d3af      	bcc.n	134bc <xQueueGenericSend+0x54>
   1355c:	2d02      	cmp	r5, #2
   1355e:	d0ad      	beq.n	134bc <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
   13560:	9b01      	ldr	r3, [sp, #4]
   13562:	2b00      	cmp	r3, #0
   13564:	d0d3      	beq.n	1350e <xQueueGenericSend+0xa6>
				else if( xEntryTimeSet == pdFALSE )
   13566:	2e00      	cmp	r6, #0
   13568:	d102      	bne.n	13570 <xQueueGenericSend+0x108>
					vTaskInternalSetTimeOutState( &xTimeOut );
   1356a:	a802      	add	r0, sp, #8
   1356c:	4b1f      	ldr	r3, [pc, #124]	; (135ec <xQueueGenericSend+0x184>)
   1356e:	4798      	blx	r3
		taskEXIT_CRITICAL();
   13570:	4b18      	ldr	r3, [pc, #96]	; (135d4 <xQueueGenericSend+0x16c>)
   13572:	4798      	blx	r3
		vTaskSuspendAll();
   13574:	4b1e      	ldr	r3, [pc, #120]	; (135f0 <xQueueGenericSend+0x188>)
   13576:	4798      	blx	r3
		prvLockQueue( pxQueue );
   13578:	4b12      	ldr	r3, [pc, #72]	; (135c4 <xQueueGenericSend+0x15c>)
   1357a:	4798      	blx	r3
   1357c:	2344      	movs	r3, #68	; 0x44
   1357e:	5ce3      	ldrb	r3, [r4, r3]
   13580:	b25b      	sxtb	r3, r3
   13582:	3301      	adds	r3, #1
   13584:	d102      	bne.n	1358c <xQueueGenericSend+0x124>
   13586:	2200      	movs	r2, #0
   13588:	2344      	movs	r3, #68	; 0x44
   1358a:	54e2      	strb	r2, [r4, r3]
   1358c:	2345      	movs	r3, #69	; 0x45
   1358e:	5ce3      	ldrb	r3, [r4, r3]
   13590:	b25b      	sxtb	r3, r3
   13592:	3301      	adds	r3, #1
   13594:	d1bf      	bne.n	13516 <xQueueGenericSend+0xae>
   13596:	2200      	movs	r2, #0
   13598:	2345      	movs	r3, #69	; 0x45
   1359a:	54e2      	strb	r2, [r4, r3]
   1359c:	e7bb      	b.n	13516 <xQueueGenericSend+0xae>
					portYIELD_WITHIN_API();
   1359e:	4b0c      	ldr	r3, [pc, #48]	; (135d0 <xQueueGenericSend+0x168>)
   135a0:	4798      	blx	r3
   135a2:	e7d5      	b.n	13550 <xQueueGenericSend+0xe8>
				prvUnlockQueue( pxQueue );
   135a4:	0020      	movs	r0, r4
   135a6:	4b0f      	ldr	r3, [pc, #60]	; (135e4 <xQueueGenericSend+0x17c>)
   135a8:	4798      	blx	r3
				( void ) xTaskResumeAll();
   135aa:	4b0f      	ldr	r3, [pc, #60]	; (135e8 <xQueueGenericSend+0x180>)
   135ac:	4798      	blx	r3
   135ae:	e7cf      	b.n	13550 <xQueueGenericSend+0xe8>
			prvUnlockQueue( pxQueue );
   135b0:	0020      	movs	r0, r4
   135b2:	4b0c      	ldr	r3, [pc, #48]	; (135e4 <xQueueGenericSend+0x17c>)
   135b4:	4798      	blx	r3
			( void ) xTaskResumeAll();
   135b6:	4b0c      	ldr	r3, [pc, #48]	; (135e8 <xQueueGenericSend+0x180>)
   135b8:	4798      	blx	r3
			return errQUEUE_FULL;
   135ba:	2000      	movs	r0, #0
   135bc:	e791      	b.n	134e2 <xQueueGenericSend+0x7a>
   135be:	46c0      	nop			; (mov r8, r8)
   135c0:	00014175 	.word	0x00014175
   135c4:	00013071 	.word	0x00013071
   135c8:	000131e9 	.word	0x000131e9
   135cc:	00013265 	.word	0x00013265
   135d0:	00013061 	.word	0x00013061
   135d4:	00013089 	.word	0x00013089
   135d8:	00014059 	.word	0x00014059
   135dc:	000140f9 	.word	0x000140f9
   135e0:	00013ff5 	.word	0x00013ff5
   135e4:	000132f5 	.word	0x000132f5
   135e8:	00013d31 	.word	0x00013d31
   135ec:	000140e1 	.word	0x000140e1
   135f0:	00013bf5 	.word	0x00013bf5

000135f4 <xQueueGenericSendFromISR>:
{
   135f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   135f6:	b083      	sub	sp, #12
   135f8:	0004      	movs	r4, r0
   135fa:	9101      	str	r1, [sp, #4]
   135fc:	0016      	movs	r6, r2
   135fe:	001d      	movs	r5, r3
	configASSERT( pxQueue );
   13600:	2800      	cmp	r0, #0
   13602:	d012      	beq.n	1362a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   13604:	9b01      	ldr	r3, [sp, #4]
   13606:	2b00      	cmp	r3, #0
   13608:	d011      	beq.n	1362e <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1360a:	2d02      	cmp	r5, #2
   1360c:	d014      	beq.n	13638 <xQueueGenericSendFromISR+0x44>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1360e:	4b28      	ldr	r3, [pc, #160]	; (136b0 <xQueueGenericSendFromISR+0xbc>)
   13610:	4798      	blx	r3
   13612:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   13614:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13616:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   13618:	429a      	cmp	r2, r3
   1361a:	d82f      	bhi.n	1367c <xQueueGenericSendFromISR+0x88>
			xReturn = errQUEUE_FULL;
   1361c:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1361e:	9800      	ldr	r0, [sp, #0]
   13620:	4b24      	ldr	r3, [pc, #144]	; (136b4 <xQueueGenericSendFromISR+0xc0>)
   13622:	4798      	blx	r3
}
   13624:	0028      	movs	r0, r5
   13626:	b003      	add	sp, #12
   13628:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
   1362a:	b672      	cpsid	i
   1362c:	e7fe      	b.n	1362c <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1362e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   13630:	2b00      	cmp	r3, #0
   13632:	d0ea      	beq.n	1360a <xQueueGenericSendFromISR+0x16>
   13634:	b672      	cpsid	i
   13636:	e7fe      	b.n	13636 <xQueueGenericSendFromISR+0x42>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   13638:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1363a:	2b01      	cmp	r3, #1
   1363c:	d01a      	beq.n	13674 <xQueueGenericSendFromISR+0x80>
   1363e:	b672      	cpsid	i
   13640:	e7fe      	b.n	13640 <xQueueGenericSendFromISR+0x4c>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   13642:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
   13644:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   13646:	2b00      	cmp	r3, #0
   13648:	d0e9      	beq.n	1361e <xQueueGenericSendFromISR+0x2a>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1364a:	0020      	movs	r0, r4
   1364c:	3024      	adds	r0, #36	; 0x24
   1364e:	4b1a      	ldr	r3, [pc, #104]	; (136b8 <xQueueGenericSendFromISR+0xc4>)
   13650:	4798      	blx	r3
   13652:	2800      	cmp	r0, #0
   13654:	d0e3      	beq.n	1361e <xQueueGenericSendFromISR+0x2a>
								if( pxHigherPriorityTaskWoken != NULL )
   13656:	2e00      	cmp	r6, #0
   13658:	d00a      	beq.n	13670 <xQueueGenericSendFromISR+0x7c>
									*pxHigherPriorityTaskWoken = pdTRUE;
   1365a:	2301      	movs	r3, #1
   1365c:	6033      	str	r3, [r6, #0]
   1365e:	e7de      	b.n	1361e <xQueueGenericSendFromISR+0x2a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   13660:	1c7b      	adds	r3, r7, #1
   13662:	b25b      	sxtb	r3, r3
   13664:	2245      	movs	r2, #69	; 0x45
   13666:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
   13668:	2501      	movs	r5, #1
   1366a:	e7d8      	b.n	1361e <xQueueGenericSendFromISR+0x2a>
   1366c:	2501      	movs	r5, #1
   1366e:	e7d6      	b.n	1361e <xQueueGenericSendFromISR+0x2a>
   13670:	2501      	movs	r5, #1
   13672:	e7d4      	b.n	1361e <xQueueGenericSendFromISR+0x2a>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   13674:	4b0e      	ldr	r3, [pc, #56]	; (136b0 <xQueueGenericSendFromISR+0xbc>)
   13676:	4798      	blx	r3
   13678:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1367a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
   1367c:	2345      	movs	r3, #69	; 0x45
   1367e:	5ce7      	ldrb	r7, [r4, r3]
   13680:	b27f      	sxtb	r7, r7
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   13682:	002a      	movs	r2, r5
   13684:	9901      	ldr	r1, [sp, #4]
   13686:	0020      	movs	r0, r4
   13688:	4b0c      	ldr	r3, [pc, #48]	; (136bc <xQueueGenericSendFromISR+0xc8>)
   1368a:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
   1368c:	1c7b      	adds	r3, r7, #1
   1368e:	d1e7      	bne.n	13660 <xQueueGenericSendFromISR+0x6c>
					if( pxQueue->pxQueueSetContainer != NULL )
   13690:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   13692:	2b00      	cmp	r3, #0
   13694:	d0d5      	beq.n	13642 <xQueueGenericSendFromISR+0x4e>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   13696:	0029      	movs	r1, r5
   13698:	0020      	movs	r0, r4
   1369a:	4b09      	ldr	r3, [pc, #36]	; (136c0 <xQueueGenericSendFromISR+0xcc>)
   1369c:	4798      	blx	r3
			xReturn = pdPASS;
   1369e:	2501      	movs	r5, #1
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   136a0:	2800      	cmp	r0, #0
   136a2:	d0bc      	beq.n	1361e <xQueueGenericSendFromISR+0x2a>
							if( pxHigherPriorityTaskWoken != NULL )
   136a4:	2e00      	cmp	r6, #0
   136a6:	d0e1      	beq.n	1366c <xQueueGenericSendFromISR+0x78>
								*pxHigherPriorityTaskWoken = pdTRUE;
   136a8:	2301      	movs	r3, #1
   136aa:	6033      	str	r3, [r6, #0]
   136ac:	e7b7      	b.n	1361e <xQueueGenericSendFromISR+0x2a>
   136ae:	46c0      	nop			; (mov r8, r8)
   136b0:	000130a9 	.word	0x000130a9
   136b4:	000130b1 	.word	0x000130b1
   136b8:	00014059 	.word	0x00014059
   136bc:	000131e9 	.word	0x000131e9
   136c0:	00013265 	.word	0x00013265

000136c4 <xQueueReceive>:
{
   136c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   136c6:	46c6      	mov	lr, r8
   136c8:	b500      	push	{lr}
   136ca:	b084      	sub	sp, #16
   136cc:	0004      	movs	r4, r0
   136ce:	000f      	movs	r7, r1
   136d0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
   136d2:	2800      	cmp	r0, #0
   136d4:	d00a      	beq.n	136ec <xQueueReceive+0x28>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   136d6:	2900      	cmp	r1, #0
   136d8:	d00a      	beq.n	136f0 <xQueueReceive+0x2c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   136da:	4b42      	ldr	r3, [pc, #264]	; (137e4 <xQueueReceive+0x120>)
   136dc:	4798      	blx	r3
   136de:	2800      	cmp	r0, #0
   136e0:	d10b      	bne.n	136fa <xQueueReceive+0x36>
   136e2:	9b01      	ldr	r3, [sp, #4]
   136e4:	2b00      	cmp	r3, #0
   136e6:	d00c      	beq.n	13702 <xQueueReceive+0x3e>
   136e8:	b672      	cpsid	i
   136ea:	e7fe      	b.n	136ea <xQueueReceive+0x26>
	configASSERT( ( pxQueue ) );
   136ec:	b672      	cpsid	i
   136ee:	e7fe      	b.n	136ee <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   136f0:	6c03      	ldr	r3, [r0, #64]	; 0x40
   136f2:	2b00      	cmp	r3, #0
   136f4:	d0f1      	beq.n	136da <xQueueReceive+0x16>
   136f6:	b672      	cpsid	i
   136f8:	e7fe      	b.n	136f8 <xQueueReceive+0x34>
   136fa:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
   136fc:	4b3a      	ldr	r3, [pc, #232]	; (137e8 <xQueueReceive+0x124>)
   136fe:	4698      	mov	r8, r3
   13700:	e02f      	b.n	13762 <xQueueReceive+0x9e>
   13702:	2600      	movs	r6, #0
   13704:	e7fa      	b.n	136fc <xQueueReceive+0x38>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   13706:	0039      	movs	r1, r7
   13708:	0020      	movs	r0, r4
   1370a:	4b38      	ldr	r3, [pc, #224]	; (137ec <xQueueReceive+0x128>)
   1370c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1370e:	3d01      	subs	r5, #1
   13710:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   13712:	6923      	ldr	r3, [r4, #16]
   13714:	2b00      	cmp	r3, #0
   13716:	d007      	beq.n	13728 <xQueueReceive+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   13718:	0020      	movs	r0, r4
   1371a:	3010      	adds	r0, #16
   1371c:	4b34      	ldr	r3, [pc, #208]	; (137f0 <xQueueReceive+0x12c>)
   1371e:	4798      	blx	r3
   13720:	2800      	cmp	r0, #0
   13722:	d001      	beq.n	13728 <xQueueReceive+0x64>
						queueYIELD_IF_USING_PREEMPTION();
   13724:	4b33      	ldr	r3, [pc, #204]	; (137f4 <xQueueReceive+0x130>)
   13726:	4798      	blx	r3
				taskEXIT_CRITICAL();
   13728:	4b33      	ldr	r3, [pc, #204]	; (137f8 <xQueueReceive+0x134>)
   1372a:	4798      	blx	r3
				return pdPASS;
   1372c:	2001      	movs	r0, #1
}
   1372e:	b004      	add	sp, #16
   13730:	bc04      	pop	{r2}
   13732:	4690      	mov	r8, r2
   13734:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
   13736:	4b30      	ldr	r3, [pc, #192]	; (137f8 <xQueueReceive+0x134>)
   13738:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1373a:	2000      	movs	r0, #0
   1373c:	e7f7      	b.n	1372e <xQueueReceive+0x6a>
					vTaskInternalSetTimeOutState( &xTimeOut );
   1373e:	a802      	add	r0, sp, #8
   13740:	4b2e      	ldr	r3, [pc, #184]	; (137fc <xQueueReceive+0x138>)
   13742:	4798      	blx	r3
   13744:	e016      	b.n	13774 <xQueueReceive+0xb0>
		prvLockQueue( pxQueue );
   13746:	2200      	movs	r2, #0
   13748:	2344      	movs	r3, #68	; 0x44
   1374a:	54e2      	strb	r2, [r4, r3]
   1374c:	e01d      	b.n	1378a <xQueueReceive+0xc6>
   1374e:	2200      	movs	r2, #0
   13750:	2345      	movs	r3, #69	; 0x45
   13752:	54e2      	strb	r2, [r4, r3]
   13754:	e01e      	b.n	13794 <xQueueReceive+0xd0>
				prvUnlockQueue( pxQueue );
   13756:	0020      	movs	r0, r4
   13758:	4b29      	ldr	r3, [pc, #164]	; (13800 <xQueueReceive+0x13c>)
   1375a:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1375c:	4b29      	ldr	r3, [pc, #164]	; (13804 <xQueueReceive+0x140>)
   1375e:	4798      	blx	r3
   13760:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
   13762:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   13764:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   13766:	2d00      	cmp	r5, #0
   13768:	d1cd      	bne.n	13706 <xQueueReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
   1376a:	9b01      	ldr	r3, [sp, #4]
   1376c:	2b00      	cmp	r3, #0
   1376e:	d0e2      	beq.n	13736 <xQueueReceive+0x72>
				else if( xEntryTimeSet == pdFALSE )
   13770:	2e00      	cmp	r6, #0
   13772:	d0e4      	beq.n	1373e <xQueueReceive+0x7a>
		taskEXIT_CRITICAL();
   13774:	4b20      	ldr	r3, [pc, #128]	; (137f8 <xQueueReceive+0x134>)
   13776:	4798      	blx	r3
		vTaskSuspendAll();
   13778:	4b23      	ldr	r3, [pc, #140]	; (13808 <xQueueReceive+0x144>)
   1377a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1377c:	4b1a      	ldr	r3, [pc, #104]	; (137e8 <xQueueReceive+0x124>)
   1377e:	4798      	blx	r3
   13780:	2344      	movs	r3, #68	; 0x44
   13782:	5ce3      	ldrb	r3, [r4, r3]
   13784:	b25b      	sxtb	r3, r3
   13786:	3301      	adds	r3, #1
   13788:	d0dd      	beq.n	13746 <xQueueReceive+0x82>
   1378a:	2345      	movs	r3, #69	; 0x45
   1378c:	5ce3      	ldrb	r3, [r4, r3]
   1378e:	b25b      	sxtb	r3, r3
   13790:	3301      	adds	r3, #1
   13792:	d0dc      	beq.n	1374e <xQueueReceive+0x8a>
   13794:	4b18      	ldr	r3, [pc, #96]	; (137f8 <xQueueReceive+0x134>)
   13796:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   13798:	a901      	add	r1, sp, #4
   1379a:	a802      	add	r0, sp, #8
   1379c:	4b1b      	ldr	r3, [pc, #108]	; (1380c <xQueueReceive+0x148>)
   1379e:	4798      	blx	r3
   137a0:	2800      	cmp	r0, #0
   137a2:	d113      	bne.n	137cc <xQueueReceive+0x108>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   137a4:	0020      	movs	r0, r4
   137a6:	4b1a      	ldr	r3, [pc, #104]	; (13810 <xQueueReceive+0x14c>)
   137a8:	4798      	blx	r3
   137aa:	2800      	cmp	r0, #0
   137ac:	d0d3      	beq.n	13756 <xQueueReceive+0x92>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   137ae:	0020      	movs	r0, r4
   137b0:	3024      	adds	r0, #36	; 0x24
   137b2:	9901      	ldr	r1, [sp, #4]
   137b4:	4b17      	ldr	r3, [pc, #92]	; (13814 <xQueueReceive+0x150>)
   137b6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   137b8:	0020      	movs	r0, r4
   137ba:	4b11      	ldr	r3, [pc, #68]	; (13800 <xQueueReceive+0x13c>)
   137bc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   137be:	4b11      	ldr	r3, [pc, #68]	; (13804 <xQueueReceive+0x140>)
   137c0:	4798      	blx	r3
   137c2:	2800      	cmp	r0, #0
   137c4:	d1cc      	bne.n	13760 <xQueueReceive+0x9c>
					portYIELD_WITHIN_API();
   137c6:	4b0b      	ldr	r3, [pc, #44]	; (137f4 <xQueueReceive+0x130>)
   137c8:	4798      	blx	r3
   137ca:	e7c9      	b.n	13760 <xQueueReceive+0x9c>
			prvUnlockQueue( pxQueue );
   137cc:	0020      	movs	r0, r4
   137ce:	4b0c      	ldr	r3, [pc, #48]	; (13800 <xQueueReceive+0x13c>)
   137d0:	4798      	blx	r3
			( void ) xTaskResumeAll();
   137d2:	4b0c      	ldr	r3, [pc, #48]	; (13804 <xQueueReceive+0x140>)
   137d4:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   137d6:	0020      	movs	r0, r4
   137d8:	4b0d      	ldr	r3, [pc, #52]	; (13810 <xQueueReceive+0x14c>)
   137da:	4798      	blx	r3
   137dc:	2800      	cmp	r0, #0
   137de:	d0bf      	beq.n	13760 <xQueueReceive+0x9c>
				return errQUEUE_EMPTY;
   137e0:	2000      	movs	r0, #0
   137e2:	e7a4      	b.n	1372e <xQueueReceive+0x6a>
   137e4:	00014175 	.word	0x00014175
   137e8:	00013071 	.word	0x00013071
   137ec:	000132cd 	.word	0x000132cd
   137f0:	00014059 	.word	0x00014059
   137f4:	00013061 	.word	0x00013061
   137f8:	00013089 	.word	0x00013089
   137fc:	000140e1 	.word	0x000140e1
   13800:	000132f5 	.word	0x000132f5
   13804:	00013d31 	.word	0x00013d31
   13808:	00013bf5 	.word	0x00013bf5
   1380c:	000140f9 	.word	0x000140f9
   13810:	000131cd 	.word	0x000131cd
   13814:	00013ff5 	.word	0x00013ff5

00013818 <vQueueWaitForMessageRestricted>:
	{
   13818:	b570      	push	{r4, r5, r6, lr}
   1381a:	0004      	movs	r4, r0
   1381c:	000d      	movs	r5, r1
   1381e:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
   13820:	4b11      	ldr	r3, [pc, #68]	; (13868 <vQueueWaitForMessageRestricted+0x50>)
   13822:	4798      	blx	r3
   13824:	2344      	movs	r3, #68	; 0x44
   13826:	5ce3      	ldrb	r3, [r4, r3]
   13828:	b25b      	sxtb	r3, r3
   1382a:	3301      	adds	r3, #1
   1382c:	d00d      	beq.n	1384a <vQueueWaitForMessageRestricted+0x32>
   1382e:	2345      	movs	r3, #69	; 0x45
   13830:	5ce3      	ldrb	r3, [r4, r3]
   13832:	b25b      	sxtb	r3, r3
   13834:	3301      	adds	r3, #1
   13836:	d00c      	beq.n	13852 <vQueueWaitForMessageRestricted+0x3a>
   13838:	4b0c      	ldr	r3, [pc, #48]	; (1386c <vQueueWaitForMessageRestricted+0x54>)
   1383a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1383c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1383e:	2b00      	cmp	r3, #0
   13840:	d00b      	beq.n	1385a <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
   13842:	0020      	movs	r0, r4
   13844:	4b0a      	ldr	r3, [pc, #40]	; (13870 <vQueueWaitForMessageRestricted+0x58>)
   13846:	4798      	blx	r3
	}
   13848:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
   1384a:	2200      	movs	r2, #0
   1384c:	2344      	movs	r3, #68	; 0x44
   1384e:	54e2      	strb	r2, [r4, r3]
   13850:	e7ed      	b.n	1382e <vQueueWaitForMessageRestricted+0x16>
   13852:	2200      	movs	r2, #0
   13854:	2345      	movs	r3, #69	; 0x45
   13856:	54e2      	strb	r2, [r4, r3]
   13858:	e7ee      	b.n	13838 <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1385a:	0020      	movs	r0, r4
   1385c:	3024      	adds	r0, #36	; 0x24
   1385e:	0032      	movs	r2, r6
   13860:	0029      	movs	r1, r5
   13862:	4b04      	ldr	r3, [pc, #16]	; (13874 <vQueueWaitForMessageRestricted+0x5c>)
   13864:	4798      	blx	r3
   13866:	e7ec      	b.n	13842 <vQueueWaitForMessageRestricted+0x2a>
   13868:	00013071 	.word	0x00013071
   1386c:	00013089 	.word	0x00013089
   13870:	000132f5 	.word	0x000132f5
   13874:	00014021 	.word	0x00014021

00013878 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   13878:	4b08      	ldr	r3, [pc, #32]	; (1389c <prvResetNextTaskUnblockTime+0x24>)
   1387a:	681b      	ldr	r3, [r3, #0]
   1387c:	681b      	ldr	r3, [r3, #0]
   1387e:	2b00      	cmp	r3, #0
   13880:	d007      	beq.n	13892 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   13882:	4b06      	ldr	r3, [pc, #24]	; (1389c <prvResetNextTaskUnblockTime+0x24>)
   13884:	681b      	ldr	r3, [r3, #0]
   13886:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   13888:	68db      	ldr	r3, [r3, #12]
   1388a:	685a      	ldr	r2, [r3, #4]
   1388c:	4b04      	ldr	r3, [pc, #16]	; (138a0 <prvResetNextTaskUnblockTime+0x28>)
   1388e:	601a      	str	r2, [r3, #0]
	}
}
   13890:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
   13892:	2201      	movs	r2, #1
   13894:	4252      	negs	r2, r2
   13896:	4b02      	ldr	r3, [pc, #8]	; (138a0 <prvResetNextTaskUnblockTime+0x28>)
   13898:	601a      	str	r2, [r3, #0]
   1389a:	e7f9      	b.n	13890 <prvResetNextTaskUnblockTime+0x18>
   1389c:	2000311c 	.word	0x2000311c
   138a0:	200031cc 	.word	0x200031cc

000138a4 <prvIdleTask>:
{
   138a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   138a6:	46d6      	mov	lr, sl
   138a8:	464f      	mov	r7, r9
   138aa:	4646      	mov	r6, r8
   138ac:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   138ae:	4b14      	ldr	r3, [pc, #80]	; (13900 <prvIdleTask+0x5c>)
   138b0:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
   138b2:	4b14      	ldr	r3, [pc, #80]	; (13904 <prvIdleTask+0x60>)
   138b4:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   138b6:	4f14      	ldr	r7, [pc, #80]	; (13908 <prvIdleTask+0x64>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   138b8:	4b14      	ldr	r3, [pc, #80]	; (1390c <prvIdleTask+0x68>)
   138ba:	469a      	mov	sl, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   138bc:	464b      	mov	r3, r9
   138be:	681b      	ldr	r3, [r3, #0]
   138c0:	2b00      	cmp	r3, #0
   138c2:	d016      	beq.n	138f2 <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
   138c4:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   138c6:	68fb      	ldr	r3, [r7, #12]
   138c8:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   138ca:	1d28      	adds	r0, r5, #4
   138cc:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
   138ce:	4a10      	ldr	r2, [pc, #64]	; (13910 <prvIdleTask+0x6c>)
   138d0:	6813      	ldr	r3, [r2, #0]
   138d2:	3b01      	subs	r3, #1
   138d4:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
   138d6:	4c0a      	ldr	r4, [pc, #40]	; (13900 <prvIdleTask+0x5c>)
   138d8:	6823      	ldr	r3, [r4, #0]
   138da:	3b01      	subs	r3, #1
   138dc:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
   138de:	4b0d      	ldr	r3, [pc, #52]	; (13914 <prvIdleTask+0x70>)
   138e0:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
   138e2:	6b28      	ldr	r0, [r5, #48]	; 0x30
   138e4:	4e0c      	ldr	r6, [pc, #48]	; (13918 <prvIdleTask+0x74>)
   138e6:	47b0      	blx	r6
			vPortFree( pxTCB );
   138e8:	0028      	movs	r0, r5
   138ea:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   138ec:	6823      	ldr	r3, [r4, #0]
   138ee:	2b00      	cmp	r3, #0
   138f0:	d1e8      	bne.n	138c4 <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   138f2:	4b0a      	ldr	r3, [pc, #40]	; (1391c <prvIdleTask+0x78>)
   138f4:	681b      	ldr	r3, [r3, #0]
   138f6:	2b01      	cmp	r3, #1
   138f8:	d9e0      	bls.n	138bc <prvIdleTask+0x18>
				taskYIELD();
   138fa:	4b09      	ldr	r3, [pc, #36]	; (13920 <prvIdleTask+0x7c>)
   138fc:	4798      	blx	r3
   138fe:	e7dd      	b.n	138bc <prvIdleTask+0x18>
   13900:	2000318c 	.word	0x2000318c
   13904:	00013071 	.word	0x00013071
   13908:	20003200 	.word	0x20003200
   1390c:	00012f43 	.word	0x00012f43
   13910:	20003188 	.word	0x20003188
   13914:	00013089 	.word	0x00013089
   13918:	000131ad 	.word	0x000131ad
   1391c:	20003124 	.word	0x20003124
   13920:	00013061 	.word	0x00013061

00013924 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   13924:	b570      	push	{r4, r5, r6, lr}
   13926:	0004      	movs	r4, r0
   13928:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1392a:	4b17      	ldr	r3, [pc, #92]	; (13988 <prvAddCurrentTaskToDelayedList+0x64>)
   1392c:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1392e:	4b17      	ldr	r3, [pc, #92]	; (1398c <prvAddCurrentTaskToDelayedList+0x68>)
   13930:	6818      	ldr	r0, [r3, #0]
   13932:	3004      	adds	r0, #4
   13934:	4b16      	ldr	r3, [pc, #88]	; (13990 <prvAddCurrentTaskToDelayedList+0x6c>)
   13936:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   13938:	1c63      	adds	r3, r4, #1
   1393a:	d013      	beq.n	13964 <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
   1393c:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1393e:	4b13      	ldr	r3, [pc, #76]	; (1398c <prvAddCurrentTaskToDelayedList+0x68>)
   13940:	681b      	ldr	r3, [r3, #0]
   13942:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
   13944:	42a6      	cmp	r6, r4
   13946:	d816      	bhi.n	13976 <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   13948:	4b12      	ldr	r3, [pc, #72]	; (13994 <prvAddCurrentTaskToDelayedList+0x70>)
   1394a:	6818      	ldr	r0, [r3, #0]
   1394c:	4b0f      	ldr	r3, [pc, #60]	; (1398c <prvAddCurrentTaskToDelayedList+0x68>)
   1394e:	6819      	ldr	r1, [r3, #0]
   13950:	3104      	adds	r1, #4
   13952:	4b11      	ldr	r3, [pc, #68]	; (13998 <prvAddCurrentTaskToDelayedList+0x74>)
   13954:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
   13956:	4b11      	ldr	r3, [pc, #68]	; (1399c <prvAddCurrentTaskToDelayedList+0x78>)
   13958:	681b      	ldr	r3, [r3, #0]
   1395a:	429c      	cmp	r4, r3
   1395c:	d212      	bcs.n	13984 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
   1395e:	4b0f      	ldr	r3, [pc, #60]	; (1399c <prvAddCurrentTaskToDelayedList+0x78>)
   13960:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   13962:	e00f      	b.n	13984 <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   13964:	2d00      	cmp	r5, #0
   13966:	d0e9      	beq.n	1393c <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   13968:	4b08      	ldr	r3, [pc, #32]	; (1398c <prvAddCurrentTaskToDelayedList+0x68>)
   1396a:	6819      	ldr	r1, [r3, #0]
   1396c:	3104      	adds	r1, #4
   1396e:	480c      	ldr	r0, [pc, #48]	; (139a0 <prvAddCurrentTaskToDelayedList+0x7c>)
   13970:	4b0c      	ldr	r3, [pc, #48]	; (139a4 <prvAddCurrentTaskToDelayedList+0x80>)
   13972:	4798      	blx	r3
   13974:	e006      	b.n	13984 <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   13976:	4b0c      	ldr	r3, [pc, #48]	; (139a8 <prvAddCurrentTaskToDelayedList+0x84>)
   13978:	6818      	ldr	r0, [r3, #0]
   1397a:	4b04      	ldr	r3, [pc, #16]	; (1398c <prvAddCurrentTaskToDelayedList+0x68>)
   1397c:	6819      	ldr	r1, [r3, #0]
   1397e:	3104      	adds	r1, #4
   13980:	4b05      	ldr	r3, [pc, #20]	; (13998 <prvAddCurrentTaskToDelayedList+0x74>)
   13982:	4798      	blx	r3
}
   13984:	bd70      	pop	{r4, r5, r6, pc}
   13986:	46c0      	nop			; (mov r8, r8)
   13988:	20003214 	.word	0x20003214
   1398c:	20003118 	.word	0x20003118
   13990:	00012f43 	.word	0x00012f43
   13994:	2000311c 	.word	0x2000311c
   13998:	00012f15 	.word	0x00012f15
   1399c:	200031cc 	.word	0x200031cc
   139a0:	200031ec 	.word	0x200031ec
   139a4:	00012efd 	.word	0x00012efd
   139a8:	20003120 	.word	0x20003120

000139ac <xTaskCreate>:
	{
   139ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   139ae:	46c6      	mov	lr, r8
   139b0:	b500      	push	{lr}
   139b2:	b084      	sub	sp, #16
   139b4:	9001      	str	r0, [sp, #4]
   139b6:	000d      	movs	r5, r1
   139b8:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   139ba:	0097      	lsls	r7, r2, #2
   139bc:	0038      	movs	r0, r7
   139be:	4b5b      	ldr	r3, [pc, #364]	; (13b2c <xTaskCreate+0x180>)
   139c0:	4798      	blx	r3
   139c2:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
   139c4:	d100      	bne.n	139c8 <xTaskCreate+0x1c>
   139c6:	e081      	b.n	13acc <xTaskCreate+0x120>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   139c8:	204c      	movs	r0, #76	; 0x4c
   139ca:	4b58      	ldr	r3, [pc, #352]	; (13b2c <xTaskCreate+0x180>)
   139cc:	4798      	blx	r3
   139ce:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
   139d0:	d100      	bne.n	139d4 <xTaskCreate+0x28>
   139d2:	e078      	b.n	13ac6 <xTaskCreate+0x11a>
					pxNewTCB->pxStack = pxStack;
   139d4:	6306      	str	r6, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   139d6:	1f38      	subs	r0, r7, #4
   139d8:	1830      	adds	r0, r6, r0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   139da:	2307      	movs	r3, #7
   139dc:	4398      	bics	r0, r3
   139de:	4680      	mov	r8, r0
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   139e0:	782a      	ldrb	r2, [r5, #0]
   139e2:	332d      	adds	r3, #45	; 0x2d
   139e4:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
   139e6:	782b      	ldrb	r3, [r5, #0]
   139e8:	2b00      	cmp	r3, #0
   139ea:	d00d      	beq.n	13a08 <xTaskCreate+0x5c>
   139ec:	3501      	adds	r5, #1
   139ee:	0023      	movs	r3, r4
   139f0:	3335      	adds	r3, #53	; 0x35
   139f2:	0020      	movs	r0, r4
   139f4:	303c      	adds	r0, #60	; 0x3c
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   139f6:	782a      	ldrb	r2, [r5, #0]
   139f8:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
   139fa:	782a      	ldrb	r2, [r5, #0]
   139fc:	2a00      	cmp	r2, #0
   139fe:	d003      	beq.n	13a08 <xTaskCreate+0x5c>
   13a00:	3501      	adds	r5, #1
   13a02:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   13a04:	4283      	cmp	r3, r0
   13a06:	d1f6      	bne.n	139f6 <xTaskCreate+0x4a>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   13a08:	2200      	movs	r2, #0
   13a0a:	233b      	movs	r3, #59	; 0x3b
   13a0c:	54e2      	strb	r2, [r4, r3]
   13a0e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   13a10:	2f04      	cmp	r7, #4
   13a12:	d900      	bls.n	13a16 <xTaskCreate+0x6a>
   13a14:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
   13a16:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
   13a18:	63e7      	str	r7, [r4, #60]	; 0x3c
		pxNewTCB->uxMutexesHeld = 0;
   13a1a:	2600      	movs	r6, #0
   13a1c:	6426      	str	r6, [r4, #64]	; 0x40
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   13a1e:	1d23      	adds	r3, r4, #4
   13a20:	9303      	str	r3, [sp, #12]
   13a22:	0018      	movs	r0, r3
   13a24:	4d42      	ldr	r5, [pc, #264]	; (13b30 <xTaskCreate+0x184>)
   13a26:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   13a28:	0020      	movs	r0, r4
   13a2a:	3018      	adds	r0, #24
   13a2c:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   13a2e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   13a30:	2305      	movs	r3, #5
   13a32:	1bdb      	subs	r3, r3, r7
   13a34:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   13a36:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
   13a38:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   13a3a:	2348      	movs	r3, #72	; 0x48
   13a3c:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   13a3e:	9a02      	ldr	r2, [sp, #8]
   13a40:	9901      	ldr	r1, [sp, #4]
   13a42:	4640      	mov	r0, r8
   13a44:	4b3b      	ldr	r3, [pc, #236]	; (13b34 <xTaskCreate+0x188>)
   13a46:	4798      	blx	r3
   13a48:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
   13a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13a4c:	2b00      	cmp	r3, #0
   13a4e:	d000      	beq.n	13a52 <xTaskCreate+0xa6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   13a50:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
   13a52:	4b39      	ldr	r3, [pc, #228]	; (13b38 <xTaskCreate+0x18c>)
   13a54:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
   13a56:	4a39      	ldr	r2, [pc, #228]	; (13b3c <xTaskCreate+0x190>)
   13a58:	6813      	ldr	r3, [r2, #0]
   13a5a:	3301      	adds	r3, #1
   13a5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   13a5e:	4b38      	ldr	r3, [pc, #224]	; (13b40 <xTaskCreate+0x194>)
   13a60:	681b      	ldr	r3, [r3, #0]
   13a62:	2b00      	cmp	r3, #0
   13a64:	d035      	beq.n	13ad2 <xTaskCreate+0x126>
			if( xSchedulerRunning == pdFALSE )
   13a66:	4b37      	ldr	r3, [pc, #220]	; (13b44 <xTaskCreate+0x198>)
   13a68:	681b      	ldr	r3, [r3, #0]
   13a6a:	2b00      	cmp	r3, #0
   13a6c:	d107      	bne.n	13a7e <xTaskCreate+0xd2>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   13a6e:	4b34      	ldr	r3, [pc, #208]	; (13b40 <xTaskCreate+0x194>)
   13a70:	681b      	ldr	r3, [r3, #0]
   13a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13a74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   13a76:	4293      	cmp	r3, r2
   13a78:	d801      	bhi.n	13a7e <xTaskCreate+0xd2>
					pxCurrentTCB = pxNewTCB;
   13a7a:	4b31      	ldr	r3, [pc, #196]	; (13b40 <xTaskCreate+0x194>)
   13a7c:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
   13a7e:	4a32      	ldr	r2, [pc, #200]	; (13b48 <xTaskCreate+0x19c>)
   13a80:	6813      	ldr	r3, [r2, #0]
   13a82:	3301      	adds	r3, #1
   13a84:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
   13a86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13a88:	4a30      	ldr	r2, [pc, #192]	; (13b4c <xTaskCreate+0x1a0>)
   13a8a:	6812      	ldr	r2, [r2, #0]
   13a8c:	4293      	cmp	r3, r2
   13a8e:	d901      	bls.n	13a94 <xTaskCreate+0xe8>
   13a90:	4a2e      	ldr	r2, [pc, #184]	; (13b4c <xTaskCreate+0x1a0>)
   13a92:	6013      	str	r3, [r2, #0]
   13a94:	0098      	lsls	r0, r3, #2
   13a96:	18c0      	adds	r0, r0, r3
   13a98:	0080      	lsls	r0, r0, #2
   13a9a:	4b2d      	ldr	r3, [pc, #180]	; (13b50 <xTaskCreate+0x1a4>)
   13a9c:	1818      	adds	r0, r3, r0
   13a9e:	9903      	ldr	r1, [sp, #12]
   13aa0:	4b2c      	ldr	r3, [pc, #176]	; (13b54 <xTaskCreate+0x1a8>)
   13aa2:	4798      	blx	r3
	taskEXIT_CRITICAL();
   13aa4:	4b2c      	ldr	r3, [pc, #176]	; (13b58 <xTaskCreate+0x1ac>)
   13aa6:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
   13aa8:	4b26      	ldr	r3, [pc, #152]	; (13b44 <xTaskCreate+0x198>)
   13aaa:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
   13aac:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
   13aae:	2b00      	cmp	r3, #0
   13ab0:	d005      	beq.n	13abe <xTaskCreate+0x112>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   13ab2:	4b23      	ldr	r3, [pc, #140]	; (13b40 <xTaskCreate+0x194>)
   13ab4:	681b      	ldr	r3, [r3, #0]
   13ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   13ab8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13aba:	429a      	cmp	r2, r3
   13abc:	d331      	bcc.n	13b22 <xTaskCreate+0x176>
	}
   13abe:	b004      	add	sp, #16
   13ac0:	bc04      	pop	{r2}
   13ac2:	4690      	mov	r8, r2
   13ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
   13ac6:	0030      	movs	r0, r6
   13ac8:	4b24      	ldr	r3, [pc, #144]	; (13b5c <xTaskCreate+0x1b0>)
   13aca:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   13acc:	2001      	movs	r0, #1
   13ace:	4240      	negs	r0, r0
   13ad0:	e7f5      	b.n	13abe <xTaskCreate+0x112>
			pxCurrentTCB = pxNewTCB;
   13ad2:	4b1b      	ldr	r3, [pc, #108]	; (13b40 <xTaskCreate+0x194>)
   13ad4:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   13ad6:	6813      	ldr	r3, [r2, #0]
   13ad8:	2b01      	cmp	r3, #1
   13ada:	d1d0      	bne.n	13a7e <xTaskCreate+0xd2>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   13adc:	4f1c      	ldr	r7, [pc, #112]	; (13b50 <xTaskCreate+0x1a4>)
   13ade:	0038      	movs	r0, r7
   13ae0:	4e1f      	ldr	r6, [pc, #124]	; (13b60 <xTaskCreate+0x1b4>)
   13ae2:	47b0      	blx	r6
   13ae4:	0038      	movs	r0, r7
   13ae6:	3014      	adds	r0, #20
   13ae8:	47b0      	blx	r6
   13aea:	0038      	movs	r0, r7
   13aec:	3028      	adds	r0, #40	; 0x28
   13aee:	47b0      	blx	r6
   13af0:	0038      	movs	r0, r7
   13af2:	303c      	adds	r0, #60	; 0x3c
   13af4:	47b0      	blx	r6
   13af6:	0038      	movs	r0, r7
   13af8:	3050      	adds	r0, #80	; 0x50
   13afa:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
   13afc:	4b19      	ldr	r3, [pc, #100]	; (13b64 <xTaskCreate+0x1b8>)
   13afe:	4698      	mov	r8, r3
   13b00:	0018      	movs	r0, r3
   13b02:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
   13b04:	4f18      	ldr	r7, [pc, #96]	; (13b68 <xTaskCreate+0x1bc>)
   13b06:	0038      	movs	r0, r7
   13b08:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
   13b0a:	4818      	ldr	r0, [pc, #96]	; (13b6c <xTaskCreate+0x1c0>)
   13b0c:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
   13b0e:	4818      	ldr	r0, [pc, #96]	; (13b70 <xTaskCreate+0x1c4>)
   13b10:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
   13b12:	4818      	ldr	r0, [pc, #96]	; (13b74 <xTaskCreate+0x1c8>)
   13b14:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
   13b16:	4b18      	ldr	r3, [pc, #96]	; (13b78 <xTaskCreate+0x1cc>)
   13b18:	4642      	mov	r2, r8
   13b1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   13b1c:	4b17      	ldr	r3, [pc, #92]	; (13b7c <xTaskCreate+0x1d0>)
   13b1e:	601f      	str	r7, [r3, #0]
   13b20:	e7ad      	b.n	13a7e <xTaskCreate+0xd2>
			taskYIELD_IF_USING_PREEMPTION();
   13b22:	4b17      	ldr	r3, [pc, #92]	; (13b80 <xTaskCreate+0x1d4>)
   13b24:	4798      	blx	r3
			xReturn = pdPASS;
   13b26:	2001      	movs	r0, #1
   13b28:	e7c9      	b.n	13abe <xTaskCreate+0x112>
   13b2a:	46c0      	nop			; (mov r8, r8)
   13b2c:	00013135 	.word	0x00013135
   13b30:	00012ef7 	.word	0x00012ef7
   13b34:	00012fc5 	.word	0x00012fc5
   13b38:	00013071 	.word	0x00013071
   13b3c:	20003188 	.word	0x20003188
   13b40:	20003118 	.word	0x20003118
   13b44:	200031e8 	.word	0x200031e8
   13b48:	20003198 	.word	0x20003198
   13b4c:	2000319c 	.word	0x2000319c
   13b50:	20003124 	.word	0x20003124
   13b54:	00012efd 	.word	0x00012efd
   13b58:	00013089 	.word	0x00013089
   13b5c:	000131ad 	.word	0x000131ad
   13b60:	00012ee1 	.word	0x00012ee1
   13b64:	200031a0 	.word	0x200031a0
   13b68:	200031b4 	.word	0x200031b4
   13b6c:	200031d4 	.word	0x200031d4
   13b70:	20003200 	.word	0x20003200
   13b74:	200031ec 	.word	0x200031ec
   13b78:	2000311c 	.word	0x2000311c
   13b7c:	20003120 	.word	0x20003120
   13b80:	00013061 	.word	0x00013061

00013b84 <vTaskStartScheduler>:
{
   13b84:	b510      	push	{r4, lr}
   13b86:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
   13b88:	4b11      	ldr	r3, [pc, #68]	; (13bd0 <vTaskStartScheduler+0x4c>)
   13b8a:	9301      	str	r3, [sp, #4]
   13b8c:	2300      	movs	r3, #0
   13b8e:	9300      	str	r3, [sp, #0]
   13b90:	22fa      	movs	r2, #250	; 0xfa
   13b92:	0052      	lsls	r2, r2, #1
   13b94:	490f      	ldr	r1, [pc, #60]	; (13bd4 <vTaskStartScheduler+0x50>)
   13b96:	4810      	ldr	r0, [pc, #64]	; (13bd8 <vTaskStartScheduler+0x54>)
   13b98:	4c10      	ldr	r4, [pc, #64]	; (13bdc <vTaskStartScheduler+0x58>)
   13b9a:	47a0      	blx	r4
		if( xReturn == pdPASS )
   13b9c:	2801      	cmp	r0, #1
   13b9e:	d003      	beq.n	13ba8 <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   13ba0:	1c43      	adds	r3, r0, #1
   13ba2:	d013      	beq.n	13bcc <vTaskStartScheduler+0x48>
}
   13ba4:	b002      	add	sp, #8
   13ba6:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
   13ba8:	4b0d      	ldr	r3, [pc, #52]	; (13be0 <vTaskStartScheduler+0x5c>)
   13baa:	4798      	blx	r3
	if( xReturn == pdPASS )
   13bac:	2801      	cmp	r0, #1
   13bae:	d1f7      	bne.n	13ba0 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
   13bb0:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
   13bb2:	2201      	movs	r2, #1
   13bb4:	4252      	negs	r2, r2
   13bb6:	4b0b      	ldr	r3, [pc, #44]	; (13be4 <vTaskStartScheduler+0x60>)
   13bb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   13bba:	3202      	adds	r2, #2
   13bbc:	4b0a      	ldr	r3, [pc, #40]	; (13be8 <vTaskStartScheduler+0x64>)
   13bbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   13bc0:	2200      	movs	r2, #0
   13bc2:	4b0a      	ldr	r3, [pc, #40]	; (13bec <vTaskStartScheduler+0x68>)
   13bc4:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
   13bc6:	4b0a      	ldr	r3, [pc, #40]	; (13bf0 <vTaskStartScheduler+0x6c>)
   13bc8:	4798      	blx	r3
   13bca:	e7eb      	b.n	13ba4 <vTaskStartScheduler+0x20>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   13bcc:	b672      	cpsid	i
   13bce:	e7fe      	b.n	13bce <vTaskStartScheduler+0x4a>
   13bd0:	200031c8 	.word	0x200031c8
   13bd4:	000218b4 	.word	0x000218b4
   13bd8:	000138a5 	.word	0x000138a5
   13bdc:	000139ad 	.word	0x000139ad
   13be0:	000142b9 	.word	0x000142b9
   13be4:	200031cc 	.word	0x200031cc
   13be8:	200031e8 	.word	0x200031e8
   13bec:	20003214 	.word	0x20003214
   13bf0:	00012fe9 	.word	0x00012fe9

00013bf4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   13bf4:	4a02      	ldr	r2, [pc, #8]	; (13c00 <vTaskSuspendAll+0xc>)
   13bf6:	6813      	ldr	r3, [r2, #0]
   13bf8:	3301      	adds	r3, #1
   13bfa:	6013      	str	r3, [r2, #0]
}
   13bfc:	4770      	bx	lr
   13bfe:	46c0      	nop			; (mov r8, r8)
   13c00:	20003194 	.word	0x20003194

00013c04 <xTaskGetTickCount>:
		xTicks = xTickCount;
   13c04:	4b01      	ldr	r3, [pc, #4]	; (13c0c <xTaskGetTickCount+0x8>)
   13c06:	6818      	ldr	r0, [r3, #0]
}
   13c08:	4770      	bx	lr
   13c0a:	46c0      	nop			; (mov r8, r8)
   13c0c:	20003214 	.word	0x20003214

00013c10 <xTaskIncrementTick>:
{
   13c10:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c12:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   13c14:	4b38      	ldr	r3, [pc, #224]	; (13cf8 <xTaskIncrementTick+0xe8>)
   13c16:	681b      	ldr	r3, [r3, #0]
   13c18:	2b00      	cmp	r3, #0
   13c1a:	d160      	bne.n	13cde <xTaskIncrementTick+0xce>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   13c1c:	4b37      	ldr	r3, [pc, #220]	; (13cfc <xTaskIncrementTick+0xec>)
   13c1e:	681d      	ldr	r5, [r3, #0]
   13c20:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
   13c22:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   13c24:	2d00      	cmp	r5, #0
   13c26:	d112      	bne.n	13c4e <xTaskIncrementTick+0x3e>
			taskSWITCH_DELAYED_LISTS();
   13c28:	4b35      	ldr	r3, [pc, #212]	; (13d00 <xTaskIncrementTick+0xf0>)
   13c2a:	681b      	ldr	r3, [r3, #0]
   13c2c:	681b      	ldr	r3, [r3, #0]
   13c2e:	2b00      	cmp	r3, #0
   13c30:	d001      	beq.n	13c36 <xTaskIncrementTick+0x26>
   13c32:	b672      	cpsid	i
   13c34:	e7fe      	b.n	13c34 <xTaskIncrementTick+0x24>
   13c36:	4a32      	ldr	r2, [pc, #200]	; (13d00 <xTaskIncrementTick+0xf0>)
   13c38:	6811      	ldr	r1, [r2, #0]
   13c3a:	4b32      	ldr	r3, [pc, #200]	; (13d04 <xTaskIncrementTick+0xf4>)
   13c3c:	6818      	ldr	r0, [r3, #0]
   13c3e:	6010      	str	r0, [r2, #0]
   13c40:	6019      	str	r1, [r3, #0]
   13c42:	4a31      	ldr	r2, [pc, #196]	; (13d08 <xTaskIncrementTick+0xf8>)
   13c44:	6813      	ldr	r3, [r2, #0]
   13c46:	3301      	adds	r3, #1
   13c48:	6013      	str	r3, [r2, #0]
   13c4a:	4b30      	ldr	r3, [pc, #192]	; (13d0c <xTaskIncrementTick+0xfc>)
   13c4c:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
   13c4e:	4b30      	ldr	r3, [pc, #192]	; (13d10 <xTaskIncrementTick+0x100>)
   13c50:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
   13c52:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
   13c54:	429d      	cmp	r5, r3
   13c56:	d333      	bcc.n	13cc0 <xTaskIncrementTick+0xb0>
   13c58:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   13c5a:	4f29      	ldr	r7, [pc, #164]	; (13d00 <xTaskIncrementTick+0xf0>)
   13c5c:	683b      	ldr	r3, [r7, #0]
   13c5e:	681b      	ldr	r3, [r3, #0]
   13c60:	2b00      	cmp	r3, #0
   13c62:	d029      	beq.n	13cb8 <xTaskIncrementTick+0xa8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   13c64:	4b26      	ldr	r3, [pc, #152]	; (13d00 <xTaskIncrementTick+0xf0>)
   13c66:	681b      	ldr	r3, [r3, #0]
   13c68:	68db      	ldr	r3, [r3, #12]
   13c6a:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   13c6c:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
   13c6e:	429d      	cmp	r5, r3
   13c70:	d332      	bcc.n	13cd8 <xTaskIncrementTick+0xc8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   13c72:	1d33      	adds	r3, r6, #4
   13c74:	9301      	str	r3, [sp, #4]
   13c76:	0018      	movs	r0, r3
   13c78:	4b26      	ldr	r3, [pc, #152]	; (13d14 <xTaskIncrementTick+0x104>)
   13c7a:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   13c7c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   13c7e:	2b00      	cmp	r3, #0
   13c80:	d003      	beq.n	13c8a <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   13c82:	0030      	movs	r0, r6
   13c84:	3018      	adds	r0, #24
   13c86:	4b23      	ldr	r3, [pc, #140]	; (13d14 <xTaskIncrementTick+0x104>)
   13c88:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   13c8a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   13c8c:	4a22      	ldr	r2, [pc, #136]	; (13d18 <xTaskIncrementTick+0x108>)
   13c8e:	6812      	ldr	r2, [r2, #0]
   13c90:	4293      	cmp	r3, r2
   13c92:	d901      	bls.n	13c98 <xTaskIncrementTick+0x88>
   13c94:	4a20      	ldr	r2, [pc, #128]	; (13d18 <xTaskIncrementTick+0x108>)
   13c96:	6013      	str	r3, [r2, #0]
   13c98:	0098      	lsls	r0, r3, #2
   13c9a:	18c0      	adds	r0, r0, r3
   13c9c:	0080      	lsls	r0, r0, #2
   13c9e:	4b1f      	ldr	r3, [pc, #124]	; (13d1c <xTaskIncrementTick+0x10c>)
   13ca0:	1818      	adds	r0, r3, r0
   13ca2:	9901      	ldr	r1, [sp, #4]
   13ca4:	4b1e      	ldr	r3, [pc, #120]	; (13d20 <xTaskIncrementTick+0x110>)
   13ca6:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   13ca8:	4b1e      	ldr	r3, [pc, #120]	; (13d24 <xTaskIncrementTick+0x114>)
   13caa:	681b      	ldr	r3, [r3, #0]
   13cac:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   13cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13cb0:	429a      	cmp	r2, r3
   13cb2:	d3d3      	bcc.n	13c5c <xTaskIncrementTick+0x4c>
							xSwitchRequired = pdTRUE;
   13cb4:	2401      	movs	r4, #1
   13cb6:	e7d1      	b.n	13c5c <xTaskIncrementTick+0x4c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   13cb8:	2201      	movs	r2, #1
   13cba:	4252      	negs	r2, r2
   13cbc:	4b14      	ldr	r3, [pc, #80]	; (13d10 <xTaskIncrementTick+0x100>)
   13cbe:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   13cc0:	4b18      	ldr	r3, [pc, #96]	; (13d24 <xTaskIncrementTick+0x114>)
   13cc2:	681b      	ldr	r3, [r3, #0]
   13cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   13cc6:	0093      	lsls	r3, r2, #2
   13cc8:	189b      	adds	r3, r3, r2
   13cca:	009b      	lsls	r3, r3, #2
   13ccc:	4a13      	ldr	r2, [pc, #76]	; (13d1c <xTaskIncrementTick+0x10c>)
   13cce:	589b      	ldr	r3, [r3, r2]
   13cd0:	2b01      	cmp	r3, #1
   13cd2:	d909      	bls.n	13ce8 <xTaskIncrementTick+0xd8>
				xSwitchRequired = pdTRUE;
   13cd4:	2401      	movs	r4, #1
   13cd6:	e007      	b.n	13ce8 <xTaskIncrementTick+0xd8>
						xNextTaskUnblockTime = xItemValue;
   13cd8:	4a0d      	ldr	r2, [pc, #52]	; (13d10 <xTaskIncrementTick+0x100>)
   13cda:	6013      	str	r3, [r2, #0]
						break;
   13cdc:	e7f0      	b.n	13cc0 <xTaskIncrementTick+0xb0>
		++uxPendedTicks;
   13cde:	4a12      	ldr	r2, [pc, #72]	; (13d28 <xTaskIncrementTick+0x118>)
   13ce0:	6813      	ldr	r3, [r2, #0]
   13ce2:	3301      	adds	r3, #1
   13ce4:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
   13ce6:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
   13ce8:	4b10      	ldr	r3, [pc, #64]	; (13d2c <xTaskIncrementTick+0x11c>)
   13cea:	681b      	ldr	r3, [r3, #0]
   13cec:	2b00      	cmp	r3, #0
   13cee:	d000      	beq.n	13cf2 <xTaskIncrementTick+0xe2>
			xSwitchRequired = pdTRUE;
   13cf0:	2401      	movs	r4, #1
}
   13cf2:	0020      	movs	r0, r4
   13cf4:	b003      	add	sp, #12
   13cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13cf8:	20003194 	.word	0x20003194
   13cfc:	20003214 	.word	0x20003214
   13d00:	2000311c 	.word	0x2000311c
   13d04:	20003120 	.word	0x20003120
   13d08:	200031d0 	.word	0x200031d0
   13d0c:	00013879 	.word	0x00013879
   13d10:	200031cc 	.word	0x200031cc
   13d14:	00012f43 	.word	0x00012f43
   13d18:	2000319c 	.word	0x2000319c
   13d1c:	20003124 	.word	0x20003124
   13d20:	00012efd 	.word	0x00012efd
   13d24:	20003118 	.word	0x20003118
   13d28:	20003190 	.word	0x20003190
   13d2c:	20003218 	.word	0x20003218

00013d30 <xTaskResumeAll>:
{
   13d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
   13d32:	4b30      	ldr	r3, [pc, #192]	; (13df4 <xTaskResumeAll+0xc4>)
   13d34:	681b      	ldr	r3, [r3, #0]
   13d36:	2b00      	cmp	r3, #0
   13d38:	d101      	bne.n	13d3e <xTaskResumeAll+0xe>
   13d3a:	b672      	cpsid	i
   13d3c:	e7fe      	b.n	13d3c <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
   13d3e:	4b2e      	ldr	r3, [pc, #184]	; (13df8 <xTaskResumeAll+0xc8>)
   13d40:	4798      	blx	r3
		--uxSchedulerSuspended;
   13d42:	4b2c      	ldr	r3, [pc, #176]	; (13df4 <xTaskResumeAll+0xc4>)
   13d44:	681a      	ldr	r2, [r3, #0]
   13d46:	3a01      	subs	r2, #1
   13d48:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   13d4a:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
   13d4c:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   13d4e:	2b00      	cmp	r3, #0
   13d50:	d103      	bne.n	13d5a <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   13d52:	4b2a      	ldr	r3, [pc, #168]	; (13dfc <xTaskResumeAll+0xcc>)
   13d54:	681b      	ldr	r3, [r3, #0]
   13d56:	2b00      	cmp	r3, #0
   13d58:	d103      	bne.n	13d62 <xTaskResumeAll+0x32>
	taskEXIT_CRITICAL();
   13d5a:	4b29      	ldr	r3, [pc, #164]	; (13e00 <xTaskResumeAll+0xd0>)
   13d5c:	4798      	blx	r3
}
   13d5e:	0020      	movs	r0, r4
   13d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   13d62:	4d28      	ldr	r5, [pc, #160]	; (13e04 <xTaskResumeAll+0xd4>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   13d64:	002f      	movs	r7, r5
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   13d66:	682b      	ldr	r3, [r5, #0]
   13d68:	2b00      	cmp	r3, #0
   13d6a:	d022      	beq.n	13db2 <xTaskResumeAll+0x82>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   13d6c:	68fb      	ldr	r3, [r7, #12]
   13d6e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   13d70:	0020      	movs	r0, r4
   13d72:	3018      	adds	r0, #24
   13d74:	4b24      	ldr	r3, [pc, #144]	; (13e08 <xTaskResumeAll+0xd8>)
   13d76:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   13d78:	1d26      	adds	r6, r4, #4
   13d7a:	0030      	movs	r0, r6
   13d7c:	4b22      	ldr	r3, [pc, #136]	; (13e08 <xTaskResumeAll+0xd8>)
   13d7e:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   13d80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13d82:	4a22      	ldr	r2, [pc, #136]	; (13e0c <xTaskResumeAll+0xdc>)
   13d84:	6812      	ldr	r2, [r2, #0]
   13d86:	4293      	cmp	r3, r2
   13d88:	d901      	bls.n	13d8e <xTaskResumeAll+0x5e>
   13d8a:	4a20      	ldr	r2, [pc, #128]	; (13e0c <xTaskResumeAll+0xdc>)
   13d8c:	6013      	str	r3, [r2, #0]
   13d8e:	0098      	lsls	r0, r3, #2
   13d90:	18c0      	adds	r0, r0, r3
   13d92:	0080      	lsls	r0, r0, #2
   13d94:	4b1e      	ldr	r3, [pc, #120]	; (13e10 <xTaskResumeAll+0xe0>)
   13d96:	1818      	adds	r0, r3, r0
   13d98:	0031      	movs	r1, r6
   13d9a:	4b1e      	ldr	r3, [pc, #120]	; (13e14 <xTaskResumeAll+0xe4>)
   13d9c:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   13d9e:	4b1e      	ldr	r3, [pc, #120]	; (13e18 <xTaskResumeAll+0xe8>)
   13da0:	681b      	ldr	r3, [r3, #0]
   13da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13da4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   13da6:	429a      	cmp	r2, r3
   13da8:	d3dd      	bcc.n	13d66 <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
   13daa:	2201      	movs	r2, #1
   13dac:	4b1b      	ldr	r3, [pc, #108]	; (13e1c <xTaskResumeAll+0xec>)
   13dae:	601a      	str	r2, [r3, #0]
   13db0:	e7d9      	b.n	13d66 <xTaskResumeAll+0x36>
				if( pxTCB != NULL )
   13db2:	2c00      	cmp	r4, #0
   13db4:	d001      	beq.n	13dba <xTaskResumeAll+0x8a>
					prvResetNextTaskUnblockTime();
   13db6:	4b1a      	ldr	r3, [pc, #104]	; (13e20 <xTaskResumeAll+0xf0>)
   13db8:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   13dba:	4b1a      	ldr	r3, [pc, #104]	; (13e24 <xTaskResumeAll+0xf4>)
   13dbc:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
   13dbe:	2c00      	cmp	r4, #0
   13dc0:	d00e      	beq.n	13de0 <xTaskResumeAll+0xb0>
							if( xTaskIncrementTick() != pdFALSE )
   13dc2:	4f19      	ldr	r7, [pc, #100]	; (13e28 <xTaskResumeAll+0xf8>)
								xYieldPending = pdTRUE;
   13dc4:	4e15      	ldr	r6, [pc, #84]	; (13e1c <xTaskResumeAll+0xec>)
   13dc6:	2501      	movs	r5, #1
   13dc8:	e002      	b.n	13dd0 <xTaskResumeAll+0xa0>
							--uxPendedCounts;
   13dca:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   13dcc:	2c00      	cmp	r4, #0
   13dce:	d004      	beq.n	13dda <xTaskResumeAll+0xaa>
							if( xTaskIncrementTick() != pdFALSE )
   13dd0:	47b8      	blx	r7
   13dd2:	2800      	cmp	r0, #0
   13dd4:	d0f9      	beq.n	13dca <xTaskResumeAll+0x9a>
								xYieldPending = pdTRUE;
   13dd6:	6035      	str	r5, [r6, #0]
   13dd8:	e7f7      	b.n	13dca <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
   13dda:	2200      	movs	r2, #0
   13ddc:	4b11      	ldr	r3, [pc, #68]	; (13e24 <xTaskResumeAll+0xf4>)
   13dde:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
   13de0:	4b0e      	ldr	r3, [pc, #56]	; (13e1c <xTaskResumeAll+0xec>)
   13de2:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
   13de4:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
   13de6:	2b00      	cmp	r3, #0
   13de8:	d0b7      	beq.n	13d5a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
   13dea:	4b10      	ldr	r3, [pc, #64]	; (13e2c <xTaskResumeAll+0xfc>)
   13dec:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
   13dee:	3401      	adds	r4, #1
   13df0:	e7b3      	b.n	13d5a <xTaskResumeAll+0x2a>
   13df2:	46c0      	nop			; (mov r8, r8)
   13df4:	20003194 	.word	0x20003194
   13df8:	00013071 	.word	0x00013071
   13dfc:	20003188 	.word	0x20003188
   13e00:	00013089 	.word	0x00013089
   13e04:	200031d4 	.word	0x200031d4
   13e08:	00012f43 	.word	0x00012f43
   13e0c:	2000319c 	.word	0x2000319c
   13e10:	20003124 	.word	0x20003124
   13e14:	00012efd 	.word	0x00012efd
   13e18:	20003118 	.word	0x20003118
   13e1c:	20003218 	.word	0x20003218
   13e20:	00013879 	.word	0x00013879
   13e24:	20003190 	.word	0x20003190
   13e28:	00013c11 	.word	0x00013c11
   13e2c:	00013061 	.word	0x00013061

00013e30 <vTaskDelay>:
	{
   13e30:	b510      	push	{r4, lr}
   13e32:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
   13e34:	d00f      	beq.n	13e56 <vTaskDelay+0x26>
			configASSERT( uxSchedulerSuspended == 0 );
   13e36:	4b09      	ldr	r3, [pc, #36]	; (13e5c <vTaskDelay+0x2c>)
   13e38:	681b      	ldr	r3, [r3, #0]
   13e3a:	2b00      	cmp	r3, #0
   13e3c:	d001      	beq.n	13e42 <vTaskDelay+0x12>
   13e3e:	b672      	cpsid	i
   13e40:	e7fe      	b.n	13e40 <vTaskDelay+0x10>
			vTaskSuspendAll();
   13e42:	4b07      	ldr	r3, [pc, #28]	; (13e60 <vTaskDelay+0x30>)
   13e44:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   13e46:	2100      	movs	r1, #0
   13e48:	0020      	movs	r0, r4
   13e4a:	4b06      	ldr	r3, [pc, #24]	; (13e64 <vTaskDelay+0x34>)
   13e4c:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
   13e4e:	4b06      	ldr	r3, [pc, #24]	; (13e68 <vTaskDelay+0x38>)
   13e50:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
   13e52:	2800      	cmp	r0, #0
   13e54:	d101      	bne.n	13e5a <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
   13e56:	4b05      	ldr	r3, [pc, #20]	; (13e6c <vTaskDelay+0x3c>)
   13e58:	4798      	blx	r3
	}
   13e5a:	bd10      	pop	{r4, pc}
   13e5c:	20003194 	.word	0x20003194
   13e60:	00013bf5 	.word	0x00013bf5
   13e64:	00013925 	.word	0x00013925
   13e68:	00013d31 	.word	0x00013d31
   13e6c:	00013061 	.word	0x00013061

00013e70 <vTaskSwitchContext>:
{
   13e70:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   13e72:	4b28      	ldr	r3, [pc, #160]	; (13f14 <vTaskSwitchContext+0xa4>)
   13e74:	681b      	ldr	r3, [r3, #0]
   13e76:	2b00      	cmp	r3, #0
   13e78:	d125      	bne.n	13ec6 <vTaskSwitchContext+0x56>
		xYieldPending = pdFALSE;
   13e7a:	2200      	movs	r2, #0
   13e7c:	4b26      	ldr	r3, [pc, #152]	; (13f18 <vTaskSwitchContext+0xa8>)
   13e7e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   13e80:	4b26      	ldr	r3, [pc, #152]	; (13f1c <vTaskSwitchContext+0xac>)
   13e82:	681a      	ldr	r2, [r3, #0]
   13e84:	681b      	ldr	r3, [r3, #0]
   13e86:	6812      	ldr	r2, [r2, #0]
   13e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13e8a:	429a      	cmp	r2, r3
   13e8c:	d805      	bhi.n	13e9a <vTaskSwitchContext+0x2a>
   13e8e:	4b23      	ldr	r3, [pc, #140]	; (13f1c <vTaskSwitchContext+0xac>)
   13e90:	6818      	ldr	r0, [r3, #0]
   13e92:	6819      	ldr	r1, [r3, #0]
   13e94:	3134      	adds	r1, #52	; 0x34
   13e96:	4b22      	ldr	r3, [pc, #136]	; (13f20 <vTaskSwitchContext+0xb0>)
   13e98:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   13e9a:	4b22      	ldr	r3, [pc, #136]	; (13f24 <vTaskSwitchContext+0xb4>)
   13e9c:	681b      	ldr	r3, [r3, #0]
   13e9e:	009a      	lsls	r2, r3, #2
   13ea0:	18d2      	adds	r2, r2, r3
   13ea2:	0092      	lsls	r2, r2, #2
   13ea4:	4920      	ldr	r1, [pc, #128]	; (13f28 <vTaskSwitchContext+0xb8>)
   13ea6:	5852      	ldr	r2, [r2, r1]
   13ea8:	2a00      	cmp	r2, #0
   13eaa:	d110      	bne.n	13ece <vTaskSwitchContext+0x5e>
   13eac:	2b00      	cmp	r3, #0
   13eae:	d008      	beq.n	13ec2 <vTaskSwitchContext+0x52>
   13eb0:	3b01      	subs	r3, #1
   13eb2:	009a      	lsls	r2, r3, #2
   13eb4:	18d2      	adds	r2, r2, r3
   13eb6:	0092      	lsls	r2, r2, #2
   13eb8:	5852      	ldr	r2, [r2, r1]
   13eba:	2a00      	cmp	r2, #0
   13ebc:	d107      	bne.n	13ece <vTaskSwitchContext+0x5e>
   13ebe:	2b00      	cmp	r3, #0
   13ec0:	d1f6      	bne.n	13eb0 <vTaskSwitchContext+0x40>
   13ec2:	b672      	cpsid	i
   13ec4:	e7fe      	b.n	13ec4 <vTaskSwitchContext+0x54>
		xYieldPending = pdTRUE;
   13ec6:	2201      	movs	r2, #1
   13ec8:	4b13      	ldr	r3, [pc, #76]	; (13f18 <vTaskSwitchContext+0xa8>)
   13eca:	601a      	str	r2, [r3, #0]
}
   13ecc:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
   13ece:	4816      	ldr	r0, [pc, #88]	; (13f28 <vTaskSwitchContext+0xb8>)
   13ed0:	009a      	lsls	r2, r3, #2
   13ed2:	18d1      	adds	r1, r2, r3
   13ed4:	0089      	lsls	r1, r1, #2
   13ed6:	1841      	adds	r1, r0, r1
   13ed8:	684c      	ldr	r4, [r1, #4]
   13eda:	6864      	ldr	r4, [r4, #4]
   13edc:	604c      	str	r4, [r1, #4]
   13ede:	18d2      	adds	r2, r2, r3
   13ee0:	0092      	lsls	r2, r2, #2
   13ee2:	3208      	adds	r2, #8
   13ee4:	1882      	adds	r2, r0, r2
   13ee6:	4294      	cmp	r4, r2
   13ee8:	d00b      	beq.n	13f02 <vTaskSwitchContext+0x92>
   13eea:	009a      	lsls	r2, r3, #2
   13eec:	18d2      	adds	r2, r2, r3
   13eee:	0092      	lsls	r2, r2, #2
   13ef0:	490d      	ldr	r1, [pc, #52]	; (13f28 <vTaskSwitchContext+0xb8>)
   13ef2:	188a      	adds	r2, r1, r2
   13ef4:	6852      	ldr	r2, [r2, #4]
   13ef6:	68d1      	ldr	r1, [r2, #12]
   13ef8:	4a08      	ldr	r2, [pc, #32]	; (13f1c <vTaskSwitchContext+0xac>)
   13efa:	6011      	str	r1, [r2, #0]
   13efc:	4a09      	ldr	r2, [pc, #36]	; (13f24 <vTaskSwitchContext+0xb4>)
   13efe:	6013      	str	r3, [r2, #0]
}
   13f00:	e7e4      	b.n	13ecc <vTaskSwitchContext+0x5c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
   13f02:	6860      	ldr	r0, [r4, #4]
   13f04:	009a      	lsls	r2, r3, #2
   13f06:	18d2      	adds	r2, r2, r3
   13f08:	0092      	lsls	r2, r2, #2
   13f0a:	4907      	ldr	r1, [pc, #28]	; (13f28 <vTaskSwitchContext+0xb8>)
   13f0c:	188a      	adds	r2, r1, r2
   13f0e:	6050      	str	r0, [r2, #4]
   13f10:	e7eb      	b.n	13eea <vTaskSwitchContext+0x7a>
   13f12:	46c0      	nop			; (mov r8, r8)
   13f14:	20003194 	.word	0x20003194
   13f18:	20003218 	.word	0x20003218
   13f1c:	20003118 	.word	0x20003118
   13f20:	0001f815 	.word	0x0001f815
   13f24:	2000319c 	.word	0x2000319c
   13f28:	20003124 	.word	0x20003124

00013f2c <vTaskSuspend>:
	{
   13f2c:	b570      	push	{r4, r5, r6, lr}
   13f2e:	0005      	movs	r5, r0
		taskENTER_CRITICAL();
   13f30:	4b24      	ldr	r3, [pc, #144]	; (13fc4 <vTaskSuspend+0x98>)
   13f32:	4798      	blx	r3
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   13f34:	1e2c      	subs	r4, r5, #0
   13f36:	d01d      	beq.n	13f74 <vTaskSuspend+0x48>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   13f38:	1d25      	adds	r5, r4, #4
   13f3a:	0028      	movs	r0, r5
   13f3c:	4b22      	ldr	r3, [pc, #136]	; (13fc8 <vTaskSuspend+0x9c>)
   13f3e:	4798      	blx	r3
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   13f40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13f42:	2b00      	cmp	r3, #0
   13f44:	d003      	beq.n	13f4e <vTaskSuspend+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   13f46:	0020      	movs	r0, r4
   13f48:	3018      	adds	r0, #24
   13f4a:	4b1f      	ldr	r3, [pc, #124]	; (13fc8 <vTaskSuspend+0x9c>)
   13f4c:	4798      	blx	r3
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   13f4e:	0029      	movs	r1, r5
   13f50:	481e      	ldr	r0, [pc, #120]	; (13fcc <vTaskSuspend+0xa0>)
   13f52:	4b1f      	ldr	r3, [pc, #124]	; (13fd0 <vTaskSuspend+0xa4>)
   13f54:	4798      	blx	r3
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   13f56:	2348      	movs	r3, #72	; 0x48
   13f58:	5ce3      	ldrb	r3, [r4, r3]
   13f5a:	2b01      	cmp	r3, #1
   13f5c:	d00d      	beq.n	13f7a <vTaskSuspend+0x4e>
		taskEXIT_CRITICAL();
   13f5e:	4b1d      	ldr	r3, [pc, #116]	; (13fd4 <vTaskSuspend+0xa8>)
   13f60:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
   13f62:	4b1d      	ldr	r3, [pc, #116]	; (13fd8 <vTaskSuspend+0xac>)
   13f64:	681b      	ldr	r3, [r3, #0]
   13f66:	2b00      	cmp	r3, #0
   13f68:	d10b      	bne.n	13f82 <vTaskSuspend+0x56>
		if( pxTCB == pxCurrentTCB )
   13f6a:	4b1c      	ldr	r3, [pc, #112]	; (13fdc <vTaskSuspend+0xb0>)
   13f6c:	681b      	ldr	r3, [r3, #0]
   13f6e:	429c      	cmp	r4, r3
   13f70:	d00e      	beq.n	13f90 <vTaskSuspend+0x64>
	}
   13f72:	bd70      	pop	{r4, r5, r6, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   13f74:	4b19      	ldr	r3, [pc, #100]	; (13fdc <vTaskSuspend+0xb0>)
   13f76:	681c      	ldr	r4, [r3, #0]
   13f78:	e7de      	b.n	13f38 <vTaskSuspend+0xc>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   13f7a:	2200      	movs	r2, #0
   13f7c:	3347      	adds	r3, #71	; 0x47
   13f7e:	54e2      	strb	r2, [r4, r3]
   13f80:	e7ed      	b.n	13f5e <vTaskSuspend+0x32>
			taskENTER_CRITICAL();
   13f82:	4b10      	ldr	r3, [pc, #64]	; (13fc4 <vTaskSuspend+0x98>)
   13f84:	4798      	blx	r3
				prvResetNextTaskUnblockTime();
   13f86:	4b16      	ldr	r3, [pc, #88]	; (13fe0 <vTaskSuspend+0xb4>)
   13f88:	4798      	blx	r3
			taskEXIT_CRITICAL();
   13f8a:	4b12      	ldr	r3, [pc, #72]	; (13fd4 <vTaskSuspend+0xa8>)
   13f8c:	4798      	blx	r3
   13f8e:	e7ec      	b.n	13f6a <vTaskSuspend+0x3e>
			if( xSchedulerRunning != pdFALSE )
   13f90:	4b11      	ldr	r3, [pc, #68]	; (13fd8 <vTaskSuspend+0xac>)
   13f92:	681b      	ldr	r3, [r3, #0]
   13f94:	2b00      	cmp	r3, #0
   13f96:	d008      	beq.n	13faa <vTaskSuspend+0x7e>
				configASSERT( uxSchedulerSuspended == 0 );
   13f98:	4b12      	ldr	r3, [pc, #72]	; (13fe4 <vTaskSuspend+0xb8>)
   13f9a:	681b      	ldr	r3, [r3, #0]
   13f9c:	2b00      	cmp	r3, #0
   13f9e:	d001      	beq.n	13fa4 <vTaskSuspend+0x78>
   13fa0:	b672      	cpsid	i
   13fa2:	e7fe      	b.n	13fa2 <vTaskSuspend+0x76>
				portYIELD_WITHIN_API();
   13fa4:	4b10      	ldr	r3, [pc, #64]	; (13fe8 <vTaskSuspend+0xbc>)
   13fa6:	4798      	blx	r3
   13fa8:	e7e3      	b.n	13f72 <vTaskSuspend+0x46>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   13faa:	4b08      	ldr	r3, [pc, #32]	; (13fcc <vTaskSuspend+0xa0>)
   13fac:	681a      	ldr	r2, [r3, #0]
   13fae:	4b0f      	ldr	r3, [pc, #60]	; (13fec <vTaskSuspend+0xc0>)
   13fb0:	681b      	ldr	r3, [r3, #0]
   13fb2:	429a      	cmp	r2, r3
   13fb4:	d002      	beq.n	13fbc <vTaskSuspend+0x90>
					vTaskSwitchContext();
   13fb6:	4b0e      	ldr	r3, [pc, #56]	; (13ff0 <vTaskSuspend+0xc4>)
   13fb8:	4798      	blx	r3
	}
   13fba:	e7da      	b.n	13f72 <vTaskSuspend+0x46>
					pxCurrentTCB = NULL;
   13fbc:	2200      	movs	r2, #0
   13fbe:	4b07      	ldr	r3, [pc, #28]	; (13fdc <vTaskSuspend+0xb0>)
   13fc0:	601a      	str	r2, [r3, #0]
   13fc2:	e7d6      	b.n	13f72 <vTaskSuspend+0x46>
   13fc4:	00013071 	.word	0x00013071
   13fc8:	00012f43 	.word	0x00012f43
   13fcc:	200031ec 	.word	0x200031ec
   13fd0:	00012efd 	.word	0x00012efd
   13fd4:	00013089 	.word	0x00013089
   13fd8:	200031e8 	.word	0x200031e8
   13fdc:	20003118 	.word	0x20003118
   13fe0:	00013879 	.word	0x00013879
   13fe4:	20003194 	.word	0x20003194
   13fe8:	00013061 	.word	0x00013061
   13fec:	20003188 	.word	0x20003188
   13ff0:	00013e71 	.word	0x00013e71

00013ff4 <vTaskPlaceOnEventList>:
{
   13ff4:	b510      	push	{r4, lr}
   13ff6:	000c      	movs	r4, r1
	configASSERT( pxEventList );
   13ff8:	2800      	cmp	r0, #0
   13ffa:	d101      	bne.n	14000 <vTaskPlaceOnEventList+0xc>
   13ffc:	b672      	cpsid	i
   13ffe:	e7fe      	b.n	13ffe <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   14000:	4b04      	ldr	r3, [pc, #16]	; (14014 <vTaskPlaceOnEventList+0x20>)
   14002:	6819      	ldr	r1, [r3, #0]
   14004:	3118      	adds	r1, #24
   14006:	4b04      	ldr	r3, [pc, #16]	; (14018 <vTaskPlaceOnEventList+0x24>)
   14008:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1400a:	2101      	movs	r1, #1
   1400c:	0020      	movs	r0, r4
   1400e:	4b03      	ldr	r3, [pc, #12]	; (1401c <vTaskPlaceOnEventList+0x28>)
   14010:	4798      	blx	r3
}
   14012:	bd10      	pop	{r4, pc}
   14014:	20003118 	.word	0x20003118
   14018:	00012f15 	.word	0x00012f15
   1401c:	00013925 	.word	0x00013925

00014020 <vTaskPlaceOnEventListRestricted>:
	{
   14020:	b570      	push	{r4, r5, r6, lr}
   14022:	000c      	movs	r4, r1
   14024:	0015      	movs	r5, r2
		configASSERT( pxEventList );
   14026:	2800      	cmp	r0, #0
   14028:	d00d      	beq.n	14046 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1402a:	4b08      	ldr	r3, [pc, #32]	; (1404c <vTaskPlaceOnEventListRestricted+0x2c>)
   1402c:	6819      	ldr	r1, [r3, #0]
   1402e:	3118      	adds	r1, #24
   14030:	4b07      	ldr	r3, [pc, #28]	; (14050 <vTaskPlaceOnEventListRestricted+0x30>)
   14032:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
   14034:	2d00      	cmp	r5, #0
   14036:	d001      	beq.n	1403c <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
   14038:	2401      	movs	r4, #1
   1403a:	4264      	negs	r4, r4
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1403c:	0029      	movs	r1, r5
   1403e:	0020      	movs	r0, r4
   14040:	4b04      	ldr	r3, [pc, #16]	; (14054 <vTaskPlaceOnEventListRestricted+0x34>)
   14042:	4798      	blx	r3
	}
   14044:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
   14046:	b672      	cpsid	i
   14048:	e7fe      	b.n	14048 <vTaskPlaceOnEventListRestricted+0x28>
   1404a:	46c0      	nop			; (mov r8, r8)
   1404c:	20003118 	.word	0x20003118
   14050:	00012efd 	.word	0x00012efd
   14054:	00013925 	.word	0x00013925

00014058 <xTaskRemoveFromEventList>:
{
   14058:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1405a:	68c3      	ldr	r3, [r0, #12]
   1405c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   1405e:	2c00      	cmp	r4, #0
   14060:	d027      	beq.n	140b2 <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   14062:	0025      	movs	r5, r4
   14064:	3518      	adds	r5, #24
   14066:	0028      	movs	r0, r5
   14068:	4b15      	ldr	r3, [pc, #84]	; (140c0 <xTaskRemoveFromEventList+0x68>)
   1406a:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1406c:	4b15      	ldr	r3, [pc, #84]	; (140c4 <xTaskRemoveFromEventList+0x6c>)
   1406e:	681b      	ldr	r3, [r3, #0]
   14070:	2b00      	cmp	r3, #0
   14072:	d120      	bne.n	140b6 <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   14074:	1d25      	adds	r5, r4, #4
   14076:	0028      	movs	r0, r5
   14078:	4b11      	ldr	r3, [pc, #68]	; (140c0 <xTaskRemoveFromEventList+0x68>)
   1407a:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1407c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1407e:	4a12      	ldr	r2, [pc, #72]	; (140c8 <xTaskRemoveFromEventList+0x70>)
   14080:	6812      	ldr	r2, [r2, #0]
   14082:	4293      	cmp	r3, r2
   14084:	d901      	bls.n	1408a <xTaskRemoveFromEventList+0x32>
   14086:	4a10      	ldr	r2, [pc, #64]	; (140c8 <xTaskRemoveFromEventList+0x70>)
   14088:	6013      	str	r3, [r2, #0]
   1408a:	0098      	lsls	r0, r3, #2
   1408c:	18c0      	adds	r0, r0, r3
   1408e:	0080      	lsls	r0, r0, #2
   14090:	4b0e      	ldr	r3, [pc, #56]	; (140cc <xTaskRemoveFromEventList+0x74>)
   14092:	1818      	adds	r0, r3, r0
   14094:	0029      	movs	r1, r5
   14096:	4b0e      	ldr	r3, [pc, #56]	; (140d0 <xTaskRemoveFromEventList+0x78>)
   14098:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1409a:	4b0e      	ldr	r3, [pc, #56]	; (140d4 <xTaskRemoveFromEventList+0x7c>)
   1409c:	681b      	ldr	r3, [r3, #0]
   1409e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   140a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
   140a2:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   140a4:	429a      	cmp	r2, r3
   140a6:	d903      	bls.n	140b0 <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
   140a8:	2201      	movs	r2, #1
   140aa:	4b0b      	ldr	r3, [pc, #44]	; (140d8 <xTaskRemoveFromEventList+0x80>)
   140ac:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
   140ae:	3001      	adds	r0, #1
}
   140b0:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
   140b2:	b672      	cpsid	i
   140b4:	e7fe      	b.n	140b4 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   140b6:	0029      	movs	r1, r5
   140b8:	4808      	ldr	r0, [pc, #32]	; (140dc <xTaskRemoveFromEventList+0x84>)
   140ba:	4b05      	ldr	r3, [pc, #20]	; (140d0 <xTaskRemoveFromEventList+0x78>)
   140bc:	4798      	blx	r3
   140be:	e7ec      	b.n	1409a <xTaskRemoveFromEventList+0x42>
   140c0:	00012f43 	.word	0x00012f43
   140c4:	20003194 	.word	0x20003194
   140c8:	2000319c 	.word	0x2000319c
   140cc:	20003124 	.word	0x20003124
   140d0:	00012efd 	.word	0x00012efd
   140d4:	20003118 	.word	0x20003118
   140d8:	20003218 	.word	0x20003218
   140dc:	200031d4 	.word	0x200031d4

000140e0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   140e0:	4b03      	ldr	r3, [pc, #12]	; (140f0 <vTaskInternalSetTimeOutState+0x10>)
   140e2:	681b      	ldr	r3, [r3, #0]
   140e4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   140e6:	4b03      	ldr	r3, [pc, #12]	; (140f4 <vTaskInternalSetTimeOutState+0x14>)
   140e8:	681b      	ldr	r3, [r3, #0]
   140ea:	6043      	str	r3, [r0, #4]
}
   140ec:	4770      	bx	lr
   140ee:	46c0      	nop			; (mov r8, r8)
   140f0:	200031d0 	.word	0x200031d0
   140f4:	20003214 	.word	0x20003214

000140f8 <xTaskCheckForTimeOut>:
{
   140f8:	b570      	push	{r4, r5, r6, lr}
   140fa:	0006      	movs	r6, r0
   140fc:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
   140fe:	2800      	cmp	r0, #0
   14100:	d01b      	beq.n	1413a <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
   14102:	2900      	cmp	r1, #0
   14104:	d01b      	beq.n	1413e <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
   14106:	4b13      	ldr	r3, [pc, #76]	; (14154 <xTaskCheckForTimeOut+0x5c>)
   14108:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
   1410a:	4b13      	ldr	r3, [pc, #76]	; (14158 <xTaskCheckForTimeOut+0x60>)
   1410c:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1410e:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
   14110:	682b      	ldr	r3, [r5, #0]
   14112:	1c58      	adds	r0, r3, #1
   14114:	d01c      	beq.n	14150 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   14116:	4811      	ldr	r0, [pc, #68]	; (1415c <xTaskCheckForTimeOut+0x64>)
   14118:	6800      	ldr	r0, [r0, #0]
   1411a:	6834      	ldr	r4, [r6, #0]
   1411c:	4284      	cmp	r4, r0
   1411e:	d002      	beq.n	14126 <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
   14120:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   14122:	428a      	cmp	r2, r1
   14124:	d205      	bcs.n	14132 <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   14126:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   14128:	429a      	cmp	r2, r3
   1412a:	d30a      	bcc.n	14142 <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
   1412c:	2300      	movs	r3, #0
   1412e:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
   14130:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
   14132:	4b0b      	ldr	r3, [pc, #44]	; (14160 <xTaskCheckForTimeOut+0x68>)
   14134:	4798      	blx	r3
}
   14136:	0020      	movs	r0, r4
   14138:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
   1413a:	b672      	cpsid	i
   1413c:	e7fe      	b.n	1413c <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
   1413e:	b672      	cpsid	i
   14140:	e7fe      	b.n	14140 <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
   14142:	1a9b      	subs	r3, r3, r2
   14144:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   14146:	0030      	movs	r0, r6
   14148:	4b06      	ldr	r3, [pc, #24]	; (14164 <xTaskCheckForTimeOut+0x6c>)
   1414a:	4798      	blx	r3
			xReturn = pdFALSE;
   1414c:	2400      	movs	r4, #0
   1414e:	e7f0      	b.n	14132 <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
   14150:	2400      	movs	r4, #0
   14152:	e7ee      	b.n	14132 <xTaskCheckForTimeOut+0x3a>
   14154:	00013071 	.word	0x00013071
   14158:	20003214 	.word	0x20003214
   1415c:	200031d0 	.word	0x200031d0
   14160:	00013089 	.word	0x00013089
   14164:	000140e1 	.word	0x000140e1

00014168 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
   14168:	2201      	movs	r2, #1
   1416a:	4b01      	ldr	r3, [pc, #4]	; (14170 <vTaskMissedYield+0x8>)
   1416c:	601a      	str	r2, [r3, #0]
}
   1416e:	4770      	bx	lr
   14170:	20003218 	.word	0x20003218

00014174 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
   14174:	4b05      	ldr	r3, [pc, #20]	; (1418c <xTaskGetSchedulerState+0x18>)
   14176:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
   14178:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
   1417a:	2b00      	cmp	r3, #0
   1417c:	d004      	beq.n	14188 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1417e:	4b04      	ldr	r3, [pc, #16]	; (14190 <xTaskGetSchedulerState+0x1c>)
   14180:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
   14182:	4243      	negs	r3, r0
   14184:	4158      	adcs	r0, r3
   14186:	0040      	lsls	r0, r0, #1
	}
   14188:	4770      	bx	lr
   1418a:	46c0      	nop			; (mov r8, r8)
   1418c:	200031e8 	.word	0x200031e8
   14190:	20003194 	.word	0x20003194

00014194 <xTaskPriorityDisinherit>:
	{
   14194:	b570      	push	{r4, r5, r6, lr}
   14196:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
   14198:	d02c      	beq.n	141f4 <xTaskPriorityDisinherit+0x60>
			configASSERT( pxTCB == pxCurrentTCB );
   1419a:	4b18      	ldr	r3, [pc, #96]	; (141fc <xTaskPriorityDisinherit+0x68>)
   1419c:	681b      	ldr	r3, [r3, #0]
   1419e:	4298      	cmp	r0, r3
   141a0:	d001      	beq.n	141a6 <xTaskPriorityDisinherit+0x12>
   141a2:	b672      	cpsid	i
   141a4:	e7fe      	b.n	141a4 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
   141a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
   141a8:	2b00      	cmp	r3, #0
   141aa:	d101      	bne.n	141b0 <xTaskPriorityDisinherit+0x1c>
   141ac:	b672      	cpsid	i
   141ae:	e7fe      	b.n	141ae <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
   141b0:	3b01      	subs	r3, #1
   141b2:	6403      	str	r3, [r0, #64]	; 0x40
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   141b4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   141b6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   141b8:	428a      	cmp	r2, r1
   141ba:	d01d      	beq.n	141f8 <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
   141bc:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   141be:	2b00      	cmp	r3, #0
   141c0:	d117      	bne.n	141f2 <xTaskPriorityDisinherit+0x5e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   141c2:	1d25      	adds	r5, r4, #4
   141c4:	0028      	movs	r0, r5
   141c6:	4b0e      	ldr	r3, [pc, #56]	; (14200 <xTaskPriorityDisinherit+0x6c>)
   141c8:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   141ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   141cc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   141ce:	2205      	movs	r2, #5
   141d0:	1ad2      	subs	r2, r2, r3
   141d2:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
   141d4:	4a0b      	ldr	r2, [pc, #44]	; (14204 <xTaskPriorityDisinherit+0x70>)
   141d6:	6812      	ldr	r2, [r2, #0]
   141d8:	4293      	cmp	r3, r2
   141da:	d901      	bls.n	141e0 <xTaskPriorityDisinherit+0x4c>
   141dc:	4a09      	ldr	r2, [pc, #36]	; (14204 <xTaskPriorityDisinherit+0x70>)
   141de:	6013      	str	r3, [r2, #0]
   141e0:	009a      	lsls	r2, r3, #2
   141e2:	18d3      	adds	r3, r2, r3
   141e4:	009b      	lsls	r3, r3, #2
   141e6:	4808      	ldr	r0, [pc, #32]	; (14208 <xTaskPriorityDisinherit+0x74>)
   141e8:	18c0      	adds	r0, r0, r3
   141ea:	0029      	movs	r1, r5
   141ec:	4b07      	ldr	r3, [pc, #28]	; (1420c <xTaskPriorityDisinherit+0x78>)
   141ee:	4798      	blx	r3
					xReturn = pdTRUE;
   141f0:	2001      	movs	r0, #1
	}
   141f2:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
   141f4:	2000      	movs	r0, #0
   141f6:	e7fc      	b.n	141f2 <xTaskPriorityDisinherit+0x5e>
   141f8:	2000      	movs	r0, #0
   141fa:	e7fa      	b.n	141f2 <xTaskPriorityDisinherit+0x5e>
   141fc:	20003118 	.word	0x20003118
   14200:	00012f43 	.word	0x00012f43
   14204:	2000319c 	.word	0x2000319c
   14208:	20003124 	.word	0x20003124
   1420c:	00012efd 	.word	0x00012efd

00014210 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   14210:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   14212:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   14214:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   14216:	4291      	cmp	r1, r2
   14218:	d80b      	bhi.n	14232 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1421a:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1421c:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1421e:	6983      	ldr	r3, [r0, #24]
   14220:	429a      	cmp	r2, r3
   14222:	d211      	bcs.n	14248 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   14224:	1d01      	adds	r1, r0, #4
   14226:	4b09      	ldr	r3, [pc, #36]	; (1424c <prvInsertTimerInActiveList+0x3c>)
   14228:	6818      	ldr	r0, [r3, #0]
   1422a:	4b09      	ldr	r3, [pc, #36]	; (14250 <prvInsertTimerInActiveList+0x40>)
   1422c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   1422e:	2400      	movs	r4, #0
   14230:	e00a      	b.n	14248 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   14232:	429a      	cmp	r2, r3
   14234:	d202      	bcs.n	1423c <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   14236:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   14238:	4299      	cmp	r1, r3
   1423a:	d205      	bcs.n	14248 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1423c:	1d01      	adds	r1, r0, #4
   1423e:	4b05      	ldr	r3, [pc, #20]	; (14254 <prvInsertTimerInActiveList+0x44>)
   14240:	6818      	ldr	r0, [r3, #0]
   14242:	4b03      	ldr	r3, [pc, #12]	; (14250 <prvInsertTimerInActiveList+0x40>)
   14244:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   14246:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
   14248:	0020      	movs	r0, r4
   1424a:	bd10      	pop	{r4, pc}
   1424c:	20003220 	.word	0x20003220
   14250:	00012f15 	.word	0x00012f15
   14254:	2000321c 	.word	0x2000321c

00014258 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   14258:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1425a:	4b0e      	ldr	r3, [pc, #56]	; (14294 <prvCheckForValidListAndQueue+0x3c>)
   1425c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1425e:	4b0e      	ldr	r3, [pc, #56]	; (14298 <prvCheckForValidListAndQueue+0x40>)
   14260:	681b      	ldr	r3, [r3, #0]
   14262:	2b00      	cmp	r3, #0
   14264:	d002      	beq.n	1426c <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   14266:	4b0d      	ldr	r3, [pc, #52]	; (1429c <prvCheckForValidListAndQueue+0x44>)
   14268:	4798      	blx	r3
}
   1426a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
   1426c:	4d0c      	ldr	r5, [pc, #48]	; (142a0 <prvCheckForValidListAndQueue+0x48>)
   1426e:	0028      	movs	r0, r5
   14270:	4e0c      	ldr	r6, [pc, #48]	; (142a4 <prvCheckForValidListAndQueue+0x4c>)
   14272:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   14274:	4c0c      	ldr	r4, [pc, #48]	; (142a8 <prvCheckForValidListAndQueue+0x50>)
   14276:	0020      	movs	r0, r4
   14278:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   1427a:	4b0c      	ldr	r3, [pc, #48]	; (142ac <prvCheckForValidListAndQueue+0x54>)
   1427c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1427e:	4b0c      	ldr	r3, [pc, #48]	; (142b0 <prvCheckForValidListAndQueue+0x58>)
   14280:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   14282:	2200      	movs	r2, #0
   14284:	210c      	movs	r1, #12
   14286:	2002      	movs	r0, #2
   14288:	4b0a      	ldr	r3, [pc, #40]	; (142b4 <prvCheckForValidListAndQueue+0x5c>)
   1428a:	4798      	blx	r3
   1428c:	4b02      	ldr	r3, [pc, #8]	; (14298 <prvCheckForValidListAndQueue+0x40>)
   1428e:	6018      	str	r0, [r3, #0]
   14290:	e7e9      	b.n	14266 <prvCheckForValidListAndQueue+0xe>
   14292:	46c0      	nop			; (mov r8, r8)
   14294:	00013071 	.word	0x00013071
   14298:	20003250 	.word	0x20003250
   1429c:	00013089 	.word	0x00013089
   142a0:	20003224 	.word	0x20003224
   142a4:	00012ee1 	.word	0x00012ee1
   142a8:	20003238 	.word	0x20003238
   142ac:	2000321c 	.word	0x2000321c
   142b0:	20003220 	.word	0x20003220
   142b4:	00013421 	.word	0x00013421

000142b8 <xTimerCreateTimerTask>:
{
   142b8:	b510      	push	{r4, lr}
   142ba:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
   142bc:	4b0a      	ldr	r3, [pc, #40]	; (142e8 <xTimerCreateTimerTask+0x30>)
   142be:	4798      	blx	r3
	if( xTimerQueue != NULL )
   142c0:	4b0a      	ldr	r3, [pc, #40]	; (142ec <xTimerCreateTimerTask+0x34>)
   142c2:	681b      	ldr	r3, [r3, #0]
   142c4:	2b00      	cmp	r3, #0
   142c6:	d00d      	beq.n	142e4 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate(	prvTimerTask,
   142c8:	4b09      	ldr	r3, [pc, #36]	; (142f0 <xTimerCreateTimerTask+0x38>)
   142ca:	9301      	str	r3, [sp, #4]
   142cc:	2302      	movs	r3, #2
   142ce:	9300      	str	r3, [sp, #0]
   142d0:	2300      	movs	r3, #0
   142d2:	2280      	movs	r2, #128	; 0x80
   142d4:	4907      	ldr	r1, [pc, #28]	; (142f4 <xTimerCreateTimerTask+0x3c>)
   142d6:	4808      	ldr	r0, [pc, #32]	; (142f8 <xTimerCreateTimerTask+0x40>)
   142d8:	4c08      	ldr	r4, [pc, #32]	; (142fc <xTimerCreateTimerTask+0x44>)
   142da:	47a0      	blx	r4
	configASSERT( xReturn );
   142dc:	2800      	cmp	r0, #0
   142de:	d001      	beq.n	142e4 <xTimerCreateTimerTask+0x2c>
}
   142e0:	b002      	add	sp, #8
   142e2:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
   142e4:	b672      	cpsid	i
   142e6:	e7fe      	b.n	142e6 <xTimerCreateTimerTask+0x2e>
   142e8:	00014259 	.word	0x00014259
   142ec:	20003250 	.word	0x20003250
   142f0:	20003254 	.word	0x20003254
   142f4:	000218e4 	.word	0x000218e4
   142f8:	00014425 	.word	0x00014425
   142fc:	000139ad 	.word	0x000139ad

00014300 <xTimerGenericCommand>:
{
   14300:	b530      	push	{r4, r5, lr}
   14302:	b085      	sub	sp, #20
   14304:	0004      	movs	r4, r0
   14306:	001d      	movs	r5, r3
	configASSERT( xTimer );
   14308:	2800      	cmp	r0, #0
   1430a:	d014      	beq.n	14336 <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
   1430c:	4b13      	ldr	r3, [pc, #76]	; (1435c <xTimerGenericCommand+0x5c>)
   1430e:	6818      	ldr	r0, [r3, #0]
   14310:	2800      	cmp	r0, #0
   14312:	d021      	beq.n	14358 <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
   14314:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   14316:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   14318:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1431a:	2905      	cmp	r1, #5
   1431c:	dc15      	bgt.n	1434a <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1431e:	4b10      	ldr	r3, [pc, #64]	; (14360 <xTimerGenericCommand+0x60>)
   14320:	4798      	blx	r3
   14322:	2802      	cmp	r0, #2
   14324:	d009      	beq.n	1433a <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   14326:	4b0d      	ldr	r3, [pc, #52]	; (1435c <xTimerGenericCommand+0x5c>)
   14328:	6818      	ldr	r0, [r3, #0]
   1432a:	2300      	movs	r3, #0
   1432c:	2200      	movs	r2, #0
   1432e:	a901      	add	r1, sp, #4
   14330:	4c0c      	ldr	r4, [pc, #48]	; (14364 <xTimerGenericCommand+0x64>)
   14332:	47a0      	blx	r4
   14334:	e00e      	b.n	14354 <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
   14336:	b672      	cpsid	i
   14338:	e7fe      	b.n	14338 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1433a:	4b08      	ldr	r3, [pc, #32]	; (1435c <xTimerGenericCommand+0x5c>)
   1433c:	6818      	ldr	r0, [r3, #0]
   1433e:	2300      	movs	r3, #0
   14340:	9a08      	ldr	r2, [sp, #32]
   14342:	a901      	add	r1, sp, #4
   14344:	4c07      	ldr	r4, [pc, #28]	; (14364 <xTimerGenericCommand+0x64>)
   14346:	47a0      	blx	r4
   14348:	e004      	b.n	14354 <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1434a:	2300      	movs	r3, #0
   1434c:	002a      	movs	r2, r5
   1434e:	a901      	add	r1, sp, #4
   14350:	4c05      	ldr	r4, [pc, #20]	; (14368 <xTimerGenericCommand+0x68>)
   14352:	47a0      	blx	r4
}
   14354:	b005      	add	sp, #20
   14356:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
   14358:	2000      	movs	r0, #0
	return xReturn;
   1435a:	e7fb      	b.n	14354 <xTimerGenericCommand+0x54>
   1435c:	20003250 	.word	0x20003250
   14360:	00014175 	.word	0x00014175
   14364:	00013469 	.word	0x00013469
   14368:	000135f5 	.word	0x000135f5

0001436c <prvSampleTimeNow>:
{
   1436c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1436e:	46d6      	mov	lr, sl
   14370:	464f      	mov	r7, r9
   14372:	4646      	mov	r6, r8
   14374:	b5c0      	push	{r6, r7, lr}
   14376:	b082      	sub	sp, #8
   14378:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
   1437a:	4b23      	ldr	r3, [pc, #140]	; (14408 <prvSampleTimeNow+0x9c>)
   1437c:	4798      	blx	r3
   1437e:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
   14380:	4b22      	ldr	r3, [pc, #136]	; (1440c <prvSampleTimeNow+0xa0>)
   14382:	681b      	ldr	r3, [r3, #0]
   14384:	4298      	cmp	r0, r3
   14386:	d317      	bcc.n	143b8 <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
   14388:	2300      	movs	r3, #0
   1438a:	4642      	mov	r2, r8
   1438c:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
   1438e:	4b1f      	ldr	r3, [pc, #124]	; (1440c <prvSampleTimeNow+0xa0>)
   14390:	4652      	mov	r2, sl
   14392:	601a      	str	r2, [r3, #0]
}
   14394:	4650      	mov	r0, sl
   14396:	b002      	add	sp, #8
   14398:	bc1c      	pop	{r2, r3, r4}
   1439a:	4690      	mov	r8, r2
   1439c:	4699      	mov	r9, r3
   1439e:	46a2      	mov	sl, r4
   143a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   143a2:	2300      	movs	r3, #0
   143a4:	9300      	str	r3, [sp, #0]
   143a6:	003a      	movs	r2, r7
   143a8:	2100      	movs	r1, #0
   143aa:	0020      	movs	r0, r4
   143ac:	4c18      	ldr	r4, [pc, #96]	; (14410 <prvSampleTimeNow+0xa4>)
   143ae:	47a0      	blx	r4
				configASSERT( xResult );
   143b0:	2800      	cmp	r0, #0
   143b2:	d104      	bne.n	143be <prvSampleTimeNow+0x52>
   143b4:	b672      	cpsid	i
   143b6:	e7fe      	b.n	143b6 <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   143b8:	4d16      	ldr	r5, [pc, #88]	; (14414 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   143ba:	4b17      	ldr	r3, [pc, #92]	; (14418 <prvSampleTimeNow+0xac>)
   143bc:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   143be:	682b      	ldr	r3, [r5, #0]
   143c0:	681a      	ldr	r2, [r3, #0]
   143c2:	2a00      	cmp	r2, #0
   143c4:	d017      	beq.n	143f6 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   143c6:	68db      	ldr	r3, [r3, #12]
   143c8:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   143ca:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   143cc:	1d26      	adds	r6, r4, #4
   143ce:	0030      	movs	r0, r6
   143d0:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   143d2:	0020      	movs	r0, r4
   143d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   143d6:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   143d8:	69e3      	ldr	r3, [r4, #28]
   143da:	2b01      	cmp	r3, #1
   143dc:	d1ef      	bne.n	143be <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   143de:	69a3      	ldr	r3, [r4, #24]
   143e0:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
   143e2:	429f      	cmp	r7, r3
   143e4:	d2dd      	bcs.n	143a2 <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   143e6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   143e8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   143ea:	4b0a      	ldr	r3, [pc, #40]	; (14414 <prvSampleTimeNow+0xa8>)
   143ec:	6818      	ldr	r0, [r3, #0]
   143ee:	0031      	movs	r1, r6
   143f0:	4b0a      	ldr	r3, [pc, #40]	; (1441c <prvSampleTimeNow+0xb0>)
   143f2:	4798      	blx	r3
   143f4:	e7e3      	b.n	143be <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
   143f6:	4a0a      	ldr	r2, [pc, #40]	; (14420 <prvSampleTimeNow+0xb4>)
   143f8:	4906      	ldr	r1, [pc, #24]	; (14414 <prvSampleTimeNow+0xa8>)
   143fa:	6810      	ldr	r0, [r2, #0]
   143fc:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   143fe:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
   14400:	2301      	movs	r3, #1
   14402:	4642      	mov	r2, r8
   14404:	6013      	str	r3, [r2, #0]
   14406:	e7c2      	b.n	1438e <prvSampleTimeNow+0x22>
   14408:	00013c05 	.word	0x00013c05
   1440c:	2000324c 	.word	0x2000324c
   14410:	00014301 	.word	0x00014301
   14414:	2000321c 	.word	0x2000321c
   14418:	00012f43 	.word	0x00012f43
   1441c:	00012f15 	.word	0x00012f15
   14420:	20003220 	.word	0x20003220

00014424 <prvTimerTask>:
{
   14424:	b5f0      	push	{r4, r5, r6, r7, lr}
   14426:	b089      	sub	sp, #36	; 0x24
		vApplicationDaemonTaskStartupHook();
   14428:	4b53      	ldr	r3, [pc, #332]	; (14578 <prvTimerTask+0x154>)
   1442a:	4798      	blx	r3
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1442c:	4f53      	ldr	r7, [pc, #332]	; (1457c <prvTimerTask+0x158>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1442e:	4b54      	ldr	r3, [pc, #336]	; (14580 <prvTimerTask+0x15c>)
   14430:	681b      	ldr	r3, [r3, #0]
   14432:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   14434:	2a00      	cmp	r2, #0
   14436:	d00e      	beq.n	14456 <prvTimerTask+0x32>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   14438:	68db      	ldr	r3, [r3, #12]
   1443a:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
   1443c:	4b51      	ldr	r3, [pc, #324]	; (14584 <prvTimerTask+0x160>)
   1443e:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   14440:	a805      	add	r0, sp, #20
   14442:	4b51      	ldr	r3, [pc, #324]	; (14588 <prvTimerTask+0x164>)
   14444:	4798      	blx	r3
   14446:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
   14448:	9b05      	ldr	r3, [sp, #20]
   1444a:	2b00      	cmp	r3, #0
   1444c:	d15f      	bne.n	1450e <prvTimerTask+0xea>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1444e:	4284      	cmp	r4, r0
   14450:	d936      	bls.n	144c0 <prvTimerTask+0x9c>
   14452:	2200      	movs	r2, #0
   14454:	e00f      	b.n	14476 <prvTimerTask+0x52>
	vTaskSuspendAll();
   14456:	4b4b      	ldr	r3, [pc, #300]	; (14584 <prvTimerTask+0x160>)
   14458:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1445a:	a805      	add	r0, sp, #20
   1445c:	4b4a      	ldr	r3, [pc, #296]	; (14588 <prvTimerTask+0x164>)
   1445e:	4798      	blx	r3
   14460:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
   14462:	9b05      	ldr	r3, [sp, #20]
   14464:	2b00      	cmp	r3, #0
   14466:	d152      	bne.n	1450e <prvTimerTask+0xea>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   14468:	4b48      	ldr	r3, [pc, #288]	; (1458c <prvTimerTask+0x168>)
   1446a:	681b      	ldr	r3, [r3, #0]
   1446c:	681b      	ldr	r3, [r3, #0]
   1446e:	425a      	negs	r2, r3
   14470:	415a      	adcs	r2, r3
   14472:	b2d2      	uxtb	r2, r2
   14474:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   14476:	1b61      	subs	r1, r4, r5
   14478:	4b45      	ldr	r3, [pc, #276]	; (14590 <prvTimerTask+0x16c>)
   1447a:	6818      	ldr	r0, [r3, #0]
   1447c:	4b45      	ldr	r3, [pc, #276]	; (14594 <prvTimerTask+0x170>)
   1447e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   14480:	4b45      	ldr	r3, [pc, #276]	; (14598 <prvTimerTask+0x174>)
   14482:	4798      	blx	r3
   14484:	2800      	cmp	r0, #0
   14486:	d03f      	beq.n	14508 <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   14488:	4d41      	ldr	r5, [pc, #260]	; (14590 <prvTimerTask+0x16c>)
   1448a:	4c44      	ldr	r4, [pc, #272]	; (1459c <prvTimerTask+0x178>)
   1448c:	2200      	movs	r2, #0
   1448e:	a905      	add	r1, sp, #20
   14490:	6828      	ldr	r0, [r5, #0]
   14492:	47a0      	blx	r4
   14494:	2800      	cmp	r0, #0
   14496:	d0ca      	beq.n	1442e <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   14498:	9b05      	ldr	r3, [sp, #20]
   1449a:	9303      	str	r3, [sp, #12]
   1449c:	2b00      	cmp	r3, #0
   1449e:	dbf5      	blt.n	1448c <prvTimerTask+0x68>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   144a0:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   144a2:	6973      	ldr	r3, [r6, #20]
   144a4:	2b00      	cmp	r3, #0
   144a6:	d001      	beq.n	144ac <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   144a8:	1d30      	adds	r0, r6, #4
   144aa:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   144ac:	a804      	add	r0, sp, #16
   144ae:	4b36      	ldr	r3, [pc, #216]	; (14588 <prvTimerTask+0x164>)
   144b0:	4798      	blx	r3
			switch( xMessage.xMessageID )
   144b2:	9b05      	ldr	r3, [sp, #20]
   144b4:	2b09      	cmp	r3, #9
   144b6:	d8e9      	bhi.n	1448c <prvTimerTask+0x68>
   144b8:	009b      	lsls	r3, r3, #2
   144ba:	4a39      	ldr	r2, [pc, #228]	; (145a0 <prvTimerTask+0x17c>)
   144bc:	58d3      	ldr	r3, [r2, r3]
   144be:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
   144c0:	4b35      	ldr	r3, [pc, #212]	; (14598 <prvTimerTask+0x174>)
   144c2:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   144c4:	4b2e      	ldr	r3, [pc, #184]	; (14580 <prvTimerTask+0x15c>)
   144c6:	681b      	ldr	r3, [r3, #0]
   144c8:	68db      	ldr	r3, [r3, #12]
   144ca:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   144cc:	1d30      	adds	r0, r6, #4
   144ce:	4b2b      	ldr	r3, [pc, #172]	; (1457c <prvTimerTask+0x158>)
   144d0:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   144d2:	69f3      	ldr	r3, [r6, #28]
   144d4:	2b01      	cmp	r3, #1
   144d6:	d003      	beq.n	144e0 <prvTimerTask+0xbc>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   144d8:	6a73      	ldr	r3, [r6, #36]	; 0x24
   144da:	0030      	movs	r0, r6
   144dc:	4798      	blx	r3
   144de:	e7d3      	b.n	14488 <prvTimerTask+0x64>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   144e0:	69b3      	ldr	r3, [r6, #24]
   144e2:	18e1      	adds	r1, r4, r3
   144e4:	0023      	movs	r3, r4
   144e6:	002a      	movs	r2, r5
   144e8:	0030      	movs	r0, r6
   144ea:	4d2e      	ldr	r5, [pc, #184]	; (145a4 <prvTimerTask+0x180>)
   144ec:	47a8      	blx	r5
   144ee:	2800      	cmp	r0, #0
   144f0:	d0f2      	beq.n	144d8 <prvTimerTask+0xb4>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   144f2:	2300      	movs	r3, #0
   144f4:	9300      	str	r3, [sp, #0]
   144f6:	0022      	movs	r2, r4
   144f8:	2100      	movs	r1, #0
   144fa:	0030      	movs	r0, r6
   144fc:	4c2a      	ldr	r4, [pc, #168]	; (145a8 <prvTimerTask+0x184>)
   144fe:	47a0      	blx	r4
			configASSERT( xResult );
   14500:	2800      	cmp	r0, #0
   14502:	d1e9      	bne.n	144d8 <prvTimerTask+0xb4>
   14504:	b672      	cpsid	i
   14506:	e7fe      	b.n	14506 <prvTimerTask+0xe2>
					portYIELD_WITHIN_API();
   14508:	4b28      	ldr	r3, [pc, #160]	; (145ac <prvTimerTask+0x188>)
   1450a:	4798      	blx	r3
   1450c:	e7bc      	b.n	14488 <prvTimerTask+0x64>
			( void ) xTaskResumeAll();
   1450e:	4b22      	ldr	r3, [pc, #136]	; (14598 <prvTimerTask+0x174>)
   14510:	4798      	blx	r3
   14512:	e7b9      	b.n	14488 <prvTimerTask+0x64>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   14514:	9b06      	ldr	r3, [sp, #24]
   14516:	69b2      	ldr	r2, [r6, #24]
   14518:	4694      	mov	ip, r2
   1451a:	4463      	add	r3, ip
   1451c:	0019      	movs	r1, r3
   1451e:	9b06      	ldr	r3, [sp, #24]
   14520:	0002      	movs	r2, r0
   14522:	0030      	movs	r0, r6
   14524:	4c1f      	ldr	r4, [pc, #124]	; (145a4 <prvTimerTask+0x180>)
   14526:	47a0      	blx	r4
   14528:	2800      	cmp	r0, #0
   1452a:	d0ae      	beq.n	1448a <prvTimerTask+0x66>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1452c:	0030      	movs	r0, r6
   1452e:	6a73      	ldr	r3, [r6, #36]	; 0x24
   14530:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   14532:	69f3      	ldr	r3, [r6, #28]
   14534:	2b01      	cmp	r3, #1
   14536:	d1a8      	bne.n	1448a <prvTimerTask+0x66>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   14538:	9b06      	ldr	r3, [sp, #24]
   1453a:	69b1      	ldr	r1, [r6, #24]
   1453c:	468c      	mov	ip, r1
   1453e:	4463      	add	r3, ip
   14540:	001a      	movs	r2, r3
   14542:	2300      	movs	r3, #0
   14544:	9300      	str	r3, [sp, #0]
   14546:	2100      	movs	r1, #0
   14548:	0030      	movs	r0, r6
   1454a:	4c17      	ldr	r4, [pc, #92]	; (145a8 <prvTimerTask+0x184>)
   1454c:	47a0      	blx	r4
							configASSERT( xResult );
   1454e:	2800      	cmp	r0, #0
   14550:	d19b      	bne.n	1448a <prvTimerTask+0x66>
   14552:	b672      	cpsid	i
   14554:	e7fe      	b.n	14554 <prvTimerTask+0x130>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   14556:	9906      	ldr	r1, [sp, #24]
   14558:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1455a:	2900      	cmp	r1, #0
   1455c:	d006      	beq.n	1456c <prvTimerTask+0x148>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1455e:	1841      	adds	r1, r0, r1
   14560:	0003      	movs	r3, r0
   14562:	0002      	movs	r2, r0
   14564:	0030      	movs	r0, r6
   14566:	4c0f      	ldr	r4, [pc, #60]	; (145a4 <prvTimerTask+0x180>)
   14568:	47a0      	blx	r4
   1456a:	e78e      	b.n	1448a <prvTimerTask+0x66>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1456c:	b672      	cpsid	i
   1456e:	e7fe      	b.n	1456e <prvTimerTask+0x14a>
						vPortFree( pxTimer );
   14570:	0030      	movs	r0, r6
   14572:	4b0f      	ldr	r3, [pc, #60]	; (145b0 <prvTimerTask+0x18c>)
   14574:	4798      	blx	r3
   14576:	e788      	b.n	1448a <prvTimerTask+0x66>
   14578:	0001f69d 	.word	0x0001f69d
   1457c:	00012f43 	.word	0x00012f43
   14580:	2000321c 	.word	0x2000321c
   14584:	00013bf5 	.word	0x00013bf5
   14588:	0001436d 	.word	0x0001436d
   1458c:	20003220 	.word	0x20003220
   14590:	20003250 	.word	0x20003250
   14594:	00013819 	.word	0x00013819
   14598:	00013d31 	.word	0x00013d31
   1459c:	000136c5 	.word	0x000136c5
   145a0:	000218bc 	.word	0x000218bc
   145a4:	00014211 	.word	0x00014211
   145a8:	00014301 	.word	0x00014301
   145ac:	00013061 	.word	0x00013061
   145b0:	000131ad 	.word	0x000131ad

000145b4 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   145b4:	b510      	push	{r4, lr}
   145b6:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
   145b8:	7c03      	ldrb	r3, [r0, #16]
   145ba:	2b00      	cmp	r3, #0
   145bc:	d005      	beq.n	145ca <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   145be:	6883      	ldr	r3, [r0, #8]
   145c0:	1c58      	adds	r0, r3, #1
   145c2:	68e1      	ldr	r1, [r4, #12]
   145c4:	4b07      	ldr	r3, [pc, #28]	; (145e4 <advance_pointer+0x30>)
   145c6:	4798      	blx	r3
   145c8:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   145ca:	6863      	ldr	r3, [r4, #4]
   145cc:	1c58      	adds	r0, r3, #1
   145ce:	68e1      	ldr	r1, [r4, #12]
   145d0:	4b04      	ldr	r3, [pc, #16]	; (145e4 <advance_pointer+0x30>)
   145d2:	4798      	blx	r3
   145d4:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   145d6:	68a3      	ldr	r3, [r4, #8]
   145d8:	1a59      	subs	r1, r3, r1
   145da:	424a      	negs	r2, r1
   145dc:	414a      	adcs	r2, r1
   145de:	7422      	strb	r2, [r4, #16]
 }
   145e0:	bd10      	pop	{r4, pc}
   145e2:	46c0      	nop			; (mov r8, r8)
   145e4:	0001f935 	.word	0x0001f935

000145e8 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   145e8:	b570      	push	{r4, r5, r6, lr}
   145ea:	0005      	movs	r5, r0
   145ec:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   145ee:	2014      	movs	r0, #20
   145f0:	4b04      	ldr	r3, [pc, #16]	; (14604 <circular_buf_init+0x1c>)
   145f2:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   145f4:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
   145f6:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
   145f8:	2300      	movs	r3, #0
   145fa:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
   145fc:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
   145fe:	7403      	strb	r3, [r0, #16]
 }
   14600:	bd70      	pop	{r4, r5, r6, pc}
   14602:	46c0      	nop			; (mov r8, r8)
   14604:	0001fbbd 	.word	0x0001fbbd

00014608 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   14608:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1460a:	6803      	ldr	r3, [r0, #0]
   1460c:	6842      	ldr	r2, [r0, #4]
   1460e:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
   14610:	4b01      	ldr	r3, [pc, #4]	; (14618 <circular_buf_put+0x10>)
   14612:	4798      	blx	r3
 }
   14614:	bd10      	pop	{r4, pc}
   14616:	46c0      	nop			; (mov r8, r8)
   14618:	000145b5 	.word	0x000145b5

0001461c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1461c:	7c02      	ldrb	r2, [r0, #16]
   1461e:	2300      	movs	r3, #0
   14620:	2a00      	cmp	r2, #0
   14622:	d105      	bne.n	14630 <circular_buf_empty+0x14>
   14624:	6843      	ldr	r3, [r0, #4]
   14626:	6880      	ldr	r0, [r0, #8]
   14628:	1a1b      	subs	r3, r3, r0
   1462a:	4258      	negs	r0, r3
   1462c:	4143      	adcs	r3, r0
   1462e:	b2db      	uxtb	r3, r3
   14630:	0018      	movs	r0, r3
 }
   14632:	4770      	bx	lr

00014634 <circular_buf_get>:
 {
   14634:	b570      	push	{r4, r5, r6, lr}
   14636:	0004      	movs	r4, r0
   14638:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
   1463a:	4b0a      	ldr	r3, [pc, #40]	; (14664 <circular_buf_get+0x30>)
   1463c:	4798      	blx	r3
   1463e:	2800      	cmp	r0, #0
   14640:	d10d      	bne.n	1465e <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
   14642:	6823      	ldr	r3, [r4, #0]
   14644:	68a2      	ldr	r2, [r4, #8]
   14646:	5c9b      	ldrb	r3, [r3, r2]
   14648:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
   1464a:	2300      	movs	r3, #0
   1464c:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1464e:	68a3      	ldr	r3, [r4, #8]
   14650:	1c58      	adds	r0, r3, #1
   14652:	68e1      	ldr	r1, [r4, #12]
   14654:	4b04      	ldr	r3, [pc, #16]	; (14668 <circular_buf_get+0x34>)
   14656:	4798      	blx	r3
   14658:	60a1      	str	r1, [r4, #8]
		 r = 0;
   1465a:	2000      	movs	r0, #0
 }
   1465c:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
   1465e:	2001      	movs	r0, #1
   14660:	4240      	negs	r0, r0
	 return r;
   14662:	e7fb      	b.n	1465c <circular_buf_get+0x28>
   14664:	0001461d 	.word	0x0001461d
   14668:	0001f935 	.word	0x0001f935

0001466c <usart_read_callback>:
* @fn			void usart_read_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module)
{
   1466c:	b510      	push	{r4, lr}

	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
   1466e:	4c06      	ldr	r4, [pc, #24]	; (14688 <usart_read_callback+0x1c>)
   14670:	7821      	ldrb	r1, [r4, #0]
   14672:	4b06      	ldr	r3, [pc, #24]	; (1468c <usart_read_callback+0x20>)
   14674:	6818      	ldr	r0, [r3, #0]
   14676:	4b06      	ldr	r3, [pc, #24]	; (14690 <usart_read_callback+0x24>)
   14678:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
   1467a:	2201      	movs	r2, #1
   1467c:	0021      	movs	r1, r4
   1467e:	4805      	ldr	r0, [pc, #20]	; (14694 <usart_read_callback+0x28>)
   14680:	4b05      	ldr	r3, [pc, #20]	; (14698 <usart_read_callback+0x2c>)
   14682:	4798      	blx	r3
	
}
   14684:	bd10      	pop	{r4, pc}
   14686:	46c0      	nop			; (mov r8, r8)
   14688:	2000394c 	.word	0x2000394c
   1468c:	20003948 	.word	0x20003948
   14690:	00014609 	.word	0x00014609
   14694:	20003914 	.word	0x20003914
   14698:	0001a271 	.word	0x0001a271

0001469c <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
   1469c:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
   1469e:	4b06      	ldr	r3, [pc, #24]	; (146b8 <usart_write_callback+0x1c>)
   146a0:	6818      	ldr	r0, [r3, #0]
   146a2:	4906      	ldr	r1, [pc, #24]	; (146bc <usart_write_callback+0x20>)
   146a4:	4b06      	ldr	r3, [pc, #24]	; (146c0 <usart_write_callback+0x24>)
   146a6:	4798      	blx	r3
   146a8:	1c43      	adds	r3, r0, #1
   146aa:	d004      	beq.n	146b6 <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
   146ac:	2201      	movs	r2, #1
   146ae:	4903      	ldr	r1, [pc, #12]	; (146bc <usart_write_callback+0x20>)
   146b0:	4804      	ldr	r0, [pc, #16]	; (146c4 <usart_write_callback+0x28>)
   146b2:	4b05      	ldr	r3, [pc, #20]	; (146c8 <usart_write_callback+0x2c>)
   146b4:	4798      	blx	r3
	}
	
}
   146b6:	bd10      	pop	{r4, pc}
   146b8:	20003d54 	.word	0x20003d54
   146bc:	20003d50 	.word	0x20003d50
   146c0:	00014635 	.word	0x00014635
   146c4:	20003914 	.word	0x20003914
   146c8:	0001a251 	.word	0x0001a251

000146cc <InitializeSerialConsole>:
{
   146cc:	b530      	push	{r4, r5, lr}
   146ce:	b091      	sub	sp, #68	; 0x44
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
   146d0:	2580      	movs	r5, #128	; 0x80
   146d2:	00ad      	lsls	r5, r5, #2
   146d4:	0029      	movs	r1, r5
   146d6:	4836      	ldr	r0, [pc, #216]	; (147b0 <InitializeSerialConsole+0xe4>)
   146d8:	4c36      	ldr	r4, [pc, #216]	; (147b4 <InitializeSerialConsole+0xe8>)
   146da:	47a0      	blx	r4
   146dc:	4b36      	ldr	r3, [pc, #216]	; (147b8 <InitializeSerialConsole+0xec>)
   146de:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
   146e0:	0029      	movs	r1, r5
   146e2:	4836      	ldr	r0, [pc, #216]	; (147bc <InitializeSerialConsole+0xf0>)
   146e4:	47a0      	blx	r4
   146e6:	4b36      	ldr	r3, [pc, #216]	; (147c0 <InitializeSerialConsole+0xf4>)
   146e8:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   146ea:	2380      	movs	r3, #128	; 0x80
   146ec:	05db      	lsls	r3, r3, #23
   146ee:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   146f0:	2300      	movs	r3, #0
   146f2:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
   146f4:	22ff      	movs	r2, #255	; 0xff
   146f6:	4669      	mov	r1, sp
   146f8:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
   146fa:	2200      	movs	r2, #0
   146fc:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   146fe:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
   14700:	2101      	movs	r1, #1
   14702:	2024      	movs	r0, #36	; 0x24
   14704:	466c      	mov	r4, sp
   14706:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
   14708:	3001      	adds	r0, #1
   1470a:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
   1470c:	3125      	adds	r1, #37	; 0x25
   1470e:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
   14710:	3101      	adds	r1, #1
   14712:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
   14714:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
   14716:	3105      	adds	r1, #5
   14718:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
   1471a:	3101      	adds	r1, #1
   1471c:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1471e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   14720:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   14722:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   14724:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   14726:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   14728:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
   1472a:	2313      	movs	r3, #19
   1472c:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1472e:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
   14730:	23e1      	movs	r3, #225	; 0xe1
   14732:	025b      	lsls	r3, r3, #9
   14734:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   14736:	23c4      	movs	r3, #196	; 0xc4
   14738:	039b      	lsls	r3, r3, #14
   1473a:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1473c:	2301      	movs	r3, #1
   1473e:	425b      	negs	r3, r3
   14740:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   14742:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   14744:	4b1f      	ldr	r3, [pc, #124]	; (147c4 <InitializeSerialConsole+0xf8>)
   14746:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   14748:	4b1f      	ldr	r3, [pc, #124]	; (147c8 <InitializeSerialConsole+0xfc>)
   1474a:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
   1474c:	4d1f      	ldr	r5, [pc, #124]	; (147cc <InitializeSerialConsole+0x100>)
   1474e:	4c20      	ldr	r4, [pc, #128]	; (147d0 <InitializeSerialConsole+0x104>)
   14750:	466a      	mov	r2, sp
   14752:	4920      	ldr	r1, [pc, #128]	; (147d4 <InitializeSerialConsole+0x108>)
   14754:	0028      	movs	r0, r5
   14756:	47a0      	blx	r4
   14758:	2800      	cmp	r0, #0
   1475a:	d1f9      	bne.n	14750 <InitializeSerialConsole+0x84>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1475c:	4d1b      	ldr	r5, [pc, #108]	; (147cc <InitializeSerialConsole+0x100>)
   1475e:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   14760:	0020      	movs	r0, r4
   14762:	4b1d      	ldr	r3, [pc, #116]	; (147d8 <InitializeSerialConsole+0x10c>)
   14764:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   14766:	231f      	movs	r3, #31
   14768:	4018      	ands	r0, r3
   1476a:	3b1e      	subs	r3, #30
   1476c:	4083      	lsls	r3, r0
   1476e:	4a1b      	ldr	r2, [pc, #108]	; (147dc <InitializeSerialConsole+0x110>)
   14770:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
   14772:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   14774:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   14776:	2b00      	cmp	r3, #0
   14778:	d1fc      	bne.n	14774 <InitializeSerialConsole+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1477a:	6823      	ldr	r3, [r4, #0]
   1477c:	2202      	movs	r2, #2
   1477e:	4313      	orrs	r3, r2
   14780:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
   14782:	4c12      	ldr	r4, [pc, #72]	; (147cc <InitializeSerialConsole+0x100>)
   14784:	2200      	movs	r2, #0
   14786:	4916      	ldr	r1, [pc, #88]	; (147e0 <InitializeSerialConsole+0x114>)
   14788:	0020      	movs	r0, r4
   1478a:	4d16      	ldr	r5, [pc, #88]	; (147e4 <InitializeSerialConsole+0x118>)
   1478c:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
   1478e:	2201      	movs	r2, #1
   14790:	4915      	ldr	r1, [pc, #84]	; (147e8 <InitializeSerialConsole+0x11c>)
   14792:	0020      	movs	r0, r4
   14794:	47a8      	blx	r5
	module->callback_enable_mask |= (1 << callback_type);
   14796:	2231      	movs	r2, #49	; 0x31
   14798:	5ca3      	ldrb	r3, [r4, r2]
   1479a:	2103      	movs	r1, #3
   1479c:	430b      	orrs	r3, r1
   1479e:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
   147a0:	3a30      	subs	r2, #48	; 0x30
   147a2:	4912      	ldr	r1, [pc, #72]	; (147ec <InitializeSerialConsole+0x120>)
   147a4:	0020      	movs	r0, r4
   147a6:	4b12      	ldr	r3, [pc, #72]	; (147f0 <InitializeSerialConsole+0x124>)
   147a8:	4798      	blx	r3
}
   147aa:	b011      	add	sp, #68	; 0x44
   147ac:	bd30      	pop	{r4, r5, pc}
   147ae:	46c0      	nop			; (mov r8, r8)
   147b0:	20003b50 	.word	0x20003b50
   147b4:	000145e9 	.word	0x000145e9
   147b8:	20003948 	.word	0x20003948
   147bc:	20003950 	.word	0x20003950
   147c0:	20003d54 	.word	0x20003d54
   147c4:	002a0003 	.word	0x002a0003
   147c8:	002b0003 	.word	0x002b0003
   147cc:	20003914 	.word	0x20003914
   147d0:	00019e69 	.word	0x00019e69
   147d4:	42001800 	.word	0x42001800
   147d8:	000196e5 	.word	0x000196e5
   147dc:	e000e100 	.word	0xe000e100
   147e0:	0001469d 	.word	0x0001469d
   147e4:	0001a239 	.word	0x0001a239
   147e8:	0001466d 	.word	0x0001466d
   147ec:	2000394c 	.word	0x2000394c
   147f0:	0001a271 	.word	0x0001a271

000147f4 <SerialConsoleWriteString>:
{
   147f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   147f6:	46c6      	mov	lr, r8
   147f8:	b500      	push	{lr}
   147fa:	0005      	movs	r5, r0
vTaskSuspendAll();
   147fc:	4b14      	ldr	r3, [pc, #80]	; (14850 <SerialConsoleWriteString+0x5c>)
   147fe:	4798      	blx	r3
   14800:	2400      	movs	r4, #0
	if(string != NULL)
   14802:	2d00      	cmp	r5, #0
   14804:	d012      	beq.n	1482c <SerialConsoleWriteString+0x38>
		for (size_t iter = 0; iter < strlen(string); iter++)
   14806:	4e13      	ldr	r6, [pc, #76]	; (14854 <SerialConsoleWriteString+0x60>)
			circular_buf_put(cbufTx, string[iter]);
   14808:	4f13      	ldr	r7, [pc, #76]	; (14858 <SerialConsoleWriteString+0x64>)
   1480a:	4b14      	ldr	r3, [pc, #80]	; (1485c <SerialConsoleWriteString+0x68>)
   1480c:	4698      	mov	r8, r3
   1480e:	e003      	b.n	14818 <SerialConsoleWriteString+0x24>
   14810:	5d29      	ldrb	r1, [r5, r4]
   14812:	6838      	ldr	r0, [r7, #0]
   14814:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
   14816:	3401      	adds	r4, #1
   14818:	0028      	movs	r0, r5
   1481a:	47b0      	blx	r6
   1481c:	4284      	cmp	r4, r0
   1481e:	d3f7      	bcc.n	14810 <SerialConsoleWriteString+0x1c>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
   14820:	2101      	movs	r1, #1
   14822:	480f      	ldr	r0, [pc, #60]	; (14860 <SerialConsoleWriteString+0x6c>)
   14824:	4b0f      	ldr	r3, [pc, #60]	; (14864 <SerialConsoleWriteString+0x70>)
   14826:	4798      	blx	r3
   14828:	2800      	cmp	r0, #0
   1482a:	d004      	beq.n	14836 <SerialConsoleWriteString+0x42>
xTaskResumeAll();
   1482c:	4b0e      	ldr	r3, [pc, #56]	; (14868 <SerialConsoleWriteString+0x74>)
   1482e:	4798      	blx	r3
}
   14830:	bc04      	pop	{r2}
   14832:	4690      	mov	r8, r2
   14834:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
   14836:	4c0d      	ldr	r4, [pc, #52]	; (1486c <SerialConsoleWriteString+0x78>)
   14838:	4b07      	ldr	r3, [pc, #28]	; (14858 <SerialConsoleWriteString+0x64>)
   1483a:	6818      	ldr	r0, [r3, #0]
   1483c:	0021      	movs	r1, r4
   1483e:	4b0c      	ldr	r3, [pc, #48]	; (14870 <SerialConsoleWriteString+0x7c>)
   14840:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
   14842:	2201      	movs	r2, #1
   14844:	0021      	movs	r1, r4
   14846:	4806      	ldr	r0, [pc, #24]	; (14860 <SerialConsoleWriteString+0x6c>)
   14848:	4b0a      	ldr	r3, [pc, #40]	; (14874 <SerialConsoleWriteString+0x80>)
   1484a:	4798      	blx	r3
   1484c:	e7ee      	b.n	1482c <SerialConsoleWriteString+0x38>
   1484e:	46c0      	nop			; (mov r8, r8)
   14850:	00013bf5 	.word	0x00013bf5
   14854:	0001ff7b 	.word	0x0001ff7b
   14858:	20003d54 	.word	0x20003d54
   1485c:	00014609 	.word	0x00014609
   14860:	20003914 	.word	0x20003914
   14864:	0001a291 	.word	0x0001a291
   14868:	00013d31 	.word	0x00013d31
   1486c:	20003d50 	.word	0x20003d50
   14870:	00014635 	.word	0x00014635
   14874:	0001a251 	.word	0x0001a251

00014878 <SerialConsoleReadCharacter>:
{
   14878:	b510      	push	{r4, lr}
   1487a:	0004      	movs	r4, r0
	vTaskSuspendAll();
   1487c:	4b05      	ldr	r3, [pc, #20]	; (14894 <SerialConsoleReadCharacter+0x1c>)
   1487e:	4798      	blx	r3
	int a = circular_buf_get(cbufRx, (uint8_t*) rxChar);
   14880:	4b05      	ldr	r3, [pc, #20]	; (14898 <SerialConsoleReadCharacter+0x20>)
   14882:	6818      	ldr	r0, [r3, #0]
   14884:	0021      	movs	r1, r4
   14886:	4b05      	ldr	r3, [pc, #20]	; (1489c <SerialConsoleReadCharacter+0x24>)
   14888:	4798      	blx	r3
   1488a:	0004      	movs	r4, r0
	xTaskResumeAll();
   1488c:	4b04      	ldr	r3, [pc, #16]	; (148a0 <SerialConsoleReadCharacter+0x28>)
   1488e:	4798      	blx	r3
}
   14890:	0020      	movs	r0, r4
   14892:	bd10      	pop	{r4, pc}
   14894:	00013bf5 	.word	0x00013bf5
   14898:	20003948 	.word	0x20003948
   1489c:	00014635 	.word	0x00014635
   148a0:	00013d31 	.word	0x00013d31

000148a4 <LogMessage>:
{
   148a4:	b40e      	push	{r1, r2, r3}
   148a6:	b530      	push	{r4, r5, lr}
   148a8:	b082      	sub	sp, #8
return currentDebugLevel;
   148aa:	4b0a      	ldr	r3, [pc, #40]	; (148d4 <LogMessage+0x30>)
if(getLogLevel() <= level){
   148ac:	781b      	ldrb	r3, [r3, #0]
   148ae:	4283      	cmp	r3, r0
   148b0:	d904      	bls.n	148bc <LogMessage+0x18>
};
   148b2:	b002      	add	sp, #8
   148b4:	bc30      	pop	{r4, r5}
   148b6:	bc08      	pop	{r3}
   148b8:	b003      	add	sp, #12
   148ba:	4718      	bx	r3
	va_start(ap, format);
   148bc:	ab06      	add	r3, sp, #24
   148be:	9301      	str	r3, [sp, #4]
	vsnprintf(debugBuffer, 127, format, ap);
   148c0:	4c05      	ldr	r4, [pc, #20]	; (148d8 <LogMessage+0x34>)
   148c2:	9a05      	ldr	r2, [sp, #20]
   148c4:	217f      	movs	r1, #127	; 0x7f
   148c6:	0020      	movs	r0, r4
   148c8:	4d04      	ldr	r5, [pc, #16]	; (148dc <LogMessage+0x38>)
   148ca:	47a8      	blx	r5
	SerialConsoleWriteString(debugBuffer);
   148cc:	0020      	movs	r0, r4
   148ce:	4b04      	ldr	r3, [pc, #16]	; (148e0 <LogMessage+0x3c>)
   148d0:	4798      	blx	r3
};
   148d2:	e7ee      	b.n	148b2 <LogMessage+0xe>
   148d4:	20003258 	.word	0x20003258
   148d8:	20003894 	.word	0x20003894
   148dc:	000201b5 	.word	0x000201b5
   148e0:	000147f5 	.word	0x000147f5

000148e4 <LogMessageDebug>:
{
   148e4:	b40f      	push	{r0, r1, r2, r3}
   148e6:	b510      	push	{r4, lr}
LogMessage(LOG_DEBUG_LVL, format);
   148e8:	9902      	ldr	r1, [sp, #8]
   148ea:	2001      	movs	r0, #1
   148ec:	4b02      	ldr	r3, [pc, #8]	; (148f8 <LogMessageDebug+0x14>)
   148ee:	4798      	blx	r3
};
   148f0:	bc10      	pop	{r4}
   148f2:	bc08      	pop	{r3}
   148f4:	b004      	add	sp, #16
   148f6:	4718      	bx	r3
   148f8:	000148a5 	.word	0x000148a5

000148fc <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   148fc:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   148fe:	4b06      	ldr	r3, [pc, #24]	; (14918 <sd_mmc_configure_slot+0x1c>)
   14900:	6819      	ldr	r1, [r3, #0]
   14902:	7f8b      	ldrb	r3, [r1, #30]
   14904:	1e5a      	subs	r2, r3, #1
   14906:	4193      	sbcs	r3, r2
   14908:	b2db      	uxtb	r3, r3
   1490a:	7b4a      	ldrb	r2, [r1, #13]
   1490c:	6809      	ldr	r1, [r1, #0]
   1490e:	4803      	ldr	r0, [pc, #12]	; (1491c <sd_mmc_configure_slot+0x20>)
   14910:	7800      	ldrb	r0, [r0, #0]
   14912:	4c03      	ldr	r4, [pc, #12]	; (14920 <sd_mmc_configure_slot+0x24>)
   14914:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
   14916:	bd10      	pop	{r4, pc}
   14918:	2000325c 	.word	0x2000325c
   1491c:	20003284 	.word	0x20003284
   14920:	000155a5 	.word	0x000155a5

00014924 <sd_mmc_select_slot>:
{
   14924:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
   14926:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
   14928:	2800      	cmp	r0, #0
   1492a:	d001      	beq.n	14930 <sd_mmc_select_slot+0xc>
}
   1492c:	0018      	movs	r0, r3
   1492e:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   14930:	4b0e      	ldr	r3, [pc, #56]	; (1496c <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   14932:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   14934:	3b03      	subs	r3, #3
   14936:	2b01      	cmp	r3, #1
   14938:	d90d      	bls.n	14956 <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
   1493a:	2200      	movs	r2, #0
   1493c:	4b0c      	ldr	r3, [pc, #48]	; (14970 <sd_mmc_select_slot+0x4c>)
   1493e:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   14940:	4c0a      	ldr	r4, [pc, #40]	; (1496c <sd_mmc_select_slot+0x48>)
   14942:	4b0c      	ldr	r3, [pc, #48]	; (14974 <sd_mmc_select_slot+0x50>)
   14944:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
   14946:	4b0c      	ldr	r3, [pc, #48]	; (14978 <sd_mmc_select_slot+0x54>)
   14948:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1494a:	7aa3      	ldrb	r3, [r4, #10]
   1494c:	3b02      	subs	r3, #2
   1494e:	4258      	negs	r0, r3
   14950:	4143      	adcs	r3, r0
   14952:	b2db      	uxtb	r3, r3
   14954:	e7ea      	b.n	1492c <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   14956:	4b05      	ldr	r3, [pc, #20]	; (1496c <sd_mmc_select_slot+0x48>)
   14958:	2202      	movs	r2, #2
   1495a:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1495c:	4a07      	ldr	r2, [pc, #28]	; (1497c <sd_mmc_select_slot+0x58>)
   1495e:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
   14960:	2201      	movs	r2, #1
   14962:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
   14964:	2200      	movs	r2, #0
   14966:	779a      	strb	r2, [r3, #30]
   14968:	e7e7      	b.n	1493a <sd_mmc_select_slot+0x16>
   1496a:	46c0      	nop			; (mov r8, r8)
   1496c:	20003260 	.word	0x20003260
   14970:	20003284 	.word	0x20003284
   14974:	2000325c 	.word	0x2000325c
   14978:	000148fd 	.word	0x000148fd
   1497c:	00061a80 	.word	0x00061a80

00014980 <sd_mmc_cmd13>:
{
   14980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14982:	4d09      	ldr	r5, [pc, #36]	; (149a8 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   14984:	4f09      	ldr	r7, [pc, #36]	; (149ac <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
   14986:	4e0a      	ldr	r6, [pc, #40]	; (149b0 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   14988:	2100      	movs	r1, #0
   1498a:	480a      	ldr	r0, [pc, #40]	; (149b4 <sd_mmc_cmd13+0x34>)
   1498c:	47b8      	blx	r7
   1498e:	1e04      	subs	r4, r0, #0
   14990:	d007      	beq.n	149a2 <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
   14992:	47b0      	blx	r6
   14994:	23ff      	movs	r3, #255	; 0xff
   14996:	4203      	tst	r3, r0
   14998:	d003      	beq.n	149a2 <sd_mmc_cmd13+0x22>
   1499a:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
   1499c:	2d00      	cmp	r5, #0
   1499e:	d1f3      	bne.n	14988 <sd_mmc_cmd13+0x8>
			return false;
   149a0:	2400      	movs	r4, #0
}
   149a2:	0020      	movs	r0, r4
   149a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   149a6:	46c0      	nop			; (mov r8, r8)
   149a8:	00030d41 	.word	0x00030d41
   149ac:	000157e9 	.word	0x000157e9
   149b0:	00015801 	.word	0x00015801
   149b4:	00001b0d 	.word	0x00001b0d

000149b8 <sd_mmc_cmd9_spi>:
{
   149b8:	b510      	push	{r4, lr}
   149ba:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   149bc:	4b0c      	ldr	r3, [pc, #48]	; (149f0 <sd_mmc_cmd9_spi+0x38>)
   149be:	681b      	ldr	r3, [r3, #0]
   149c0:	8919      	ldrh	r1, [r3, #8]
   149c2:	0409      	lsls	r1, r1, #16
   149c4:	2301      	movs	r3, #1
   149c6:	9300      	str	r3, [sp, #0]
   149c8:	2210      	movs	r2, #16
   149ca:	480a      	ldr	r0, [pc, #40]	; (149f4 <sd_mmc_cmd9_spi+0x3c>)
   149cc:	4c0a      	ldr	r4, [pc, #40]	; (149f8 <sd_mmc_cmd9_spi+0x40>)
   149ce:	47a0      	blx	r4
   149d0:	2800      	cmp	r0, #0
   149d2:	d101      	bne.n	149d8 <sd_mmc_cmd9_spi+0x20>
}
   149d4:	b002      	add	sp, #8
   149d6:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   149d8:	4b05      	ldr	r3, [pc, #20]	; (149f0 <sd_mmc_cmd9_spi+0x38>)
   149da:	6818      	ldr	r0, [r3, #0]
   149dc:	300e      	adds	r0, #14
   149de:	2101      	movs	r1, #1
   149e0:	4b06      	ldr	r3, [pc, #24]	; (149fc <sd_mmc_cmd9_spi+0x44>)
   149e2:	4798      	blx	r3
   149e4:	2800      	cmp	r0, #0
   149e6:	d0f5      	beq.n	149d4 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
   149e8:	4b05      	ldr	r3, [pc, #20]	; (14a00 <sd_mmc_cmd9_spi+0x48>)
   149ea:	4798      	blx	r3
   149ec:	e7f2      	b.n	149d4 <sd_mmc_cmd9_spi+0x1c>
   149ee:	46c0      	nop			; (mov r8, r8)
   149f0:	2000325c 	.word	0x2000325c
   149f4:	00081109 	.word	0x00081109
   149f8:	00015659 	.word	0x00015659
   149fc:	00015885 	.word	0x00015885
   14a00:	00015911 	.word	0x00015911

00014a04 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   14a04:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   14a06:	4b04      	ldr	r3, [pc, #16]	; (14a18 <sd_mmc_deselect_slot+0x14>)
   14a08:	781b      	ldrb	r3, [r3, #0]
   14a0a:	2b00      	cmp	r3, #0
   14a0c:	d000      	beq.n	14a10 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
   14a0e:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
   14a10:	2000      	movs	r0, #0
   14a12:	4b02      	ldr	r3, [pc, #8]	; (14a1c <sd_mmc_deselect_slot+0x18>)
   14a14:	4798      	blx	r3
}
   14a16:	e7fa      	b.n	14a0e <sd_mmc_deselect_slot+0xa>
   14a18:	20003284 	.word	0x20003284
   14a1c:	000155f9 	.word	0x000155f9

00014a20 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   14a20:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   14a22:	2204      	movs	r2, #4
   14a24:	4b03      	ldr	r3, [pc, #12]	; (14a34 <sd_mmc_init+0x14>)
   14a26:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   14a28:	32fb      	adds	r2, #251	; 0xfb
   14a2a:	4b03      	ldr	r3, [pc, #12]	; (14a38 <sd_mmc_init+0x18>)
   14a2c:	701a      	strb	r2, [r3, #0]
	driver_init();
   14a2e:	4b03      	ldr	r3, [pc, #12]	; (14a3c <sd_mmc_init+0x1c>)
   14a30:	4798      	blx	r3
}
   14a32:	bd10      	pop	{r4, pc}
   14a34:	20003260 	.word	0x20003260
   14a38:	20003284 	.word	0x20003284
   14a3c:	000154a5 	.word	0x000154a5

00014a40 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   14a40:	b5f0      	push	{r4, r5, r6, r7, lr}
   14a42:	46c6      	mov	lr, r8
   14a44:	b500      	push	{lr}
   14a46:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   14a48:	4bcb      	ldr	r3, [pc, #812]	; (14d78 <sd_mmc_check+0x338>)
   14a4a:	4798      	blx	r3
   14a4c:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   14a4e:	2801      	cmp	r0, #1
   14a50:	d006      	beq.n	14a60 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
   14a52:	4bca      	ldr	r3, [pc, #808]	; (14d7c <sd_mmc_check+0x33c>)
   14a54:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
   14a56:	0020      	movs	r0, r4
   14a58:	b008      	add	sp, #32
   14a5a:	bc04      	pop	{r2}
   14a5c:	4690      	mov	r8, r2
   14a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
   14a60:	4bc7      	ldr	r3, [pc, #796]	; (14d80 <sd_mmc_check+0x340>)
   14a62:	681b      	ldr	r3, [r3, #0]
   14a64:	2201      	movs	r2, #1
   14a66:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   14a68:	2200      	movs	r2, #0
   14a6a:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   14a6c:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
   14a6e:	4bc5      	ldr	r3, [pc, #788]	; (14d84 <sd_mmc_check+0x344>)
   14a70:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   14a72:	2100      	movs	r1, #0
   14a74:	2088      	movs	r0, #136	; 0x88
   14a76:	0140      	lsls	r0, r0, #5
   14a78:	4bc3      	ldr	r3, [pc, #780]	; (14d88 <sd_mmc_check+0x348>)
   14a7a:	4798      	blx	r3
   14a7c:	2800      	cmp	r0, #0
   14a7e:	d107      	bne.n	14a90 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   14a80:	4bbf      	ldr	r3, [pc, #764]	; (14d80 <sd_mmc_check+0x340>)
   14a82:	681b      	ldr	r3, [r3, #0]
   14a84:	2203      	movs	r2, #3
   14a86:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   14a88:	4bbc      	ldr	r3, [pc, #752]	; (14d7c <sd_mmc_check+0x33c>)
   14a8a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   14a8c:	2403      	movs	r4, #3
   14a8e:	e7e2      	b.n	14a56 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   14a90:	21d5      	movs	r1, #213	; 0xd5
   14a92:	0049      	lsls	r1, r1, #1
   14a94:	48bd      	ldr	r0, [pc, #756]	; (14d8c <sd_mmc_check+0x34c>)
   14a96:	4bbc      	ldr	r3, [pc, #752]	; (14d88 <sd_mmc_check+0x348>)
   14a98:	4798      	blx	r3
	*v2 = 0;
   14a9a:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   14a9c:	2800      	cmp	r0, #0
   14a9e:	d125      	bne.n	14aec <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   14aa0:	4bb7      	ldr	r3, [pc, #732]	; (14d80 <sd_mmc_check+0x340>)
   14aa2:	681b      	ldr	r3, [r3, #0]
   14aa4:	7adb      	ldrb	r3, [r3, #11]
   14aa6:	07db      	lsls	r3, r3, #31
   14aa8:	d500      	bpl.n	14aac <sd_mmc_check+0x6c>
   14aaa:	e1eb      	b.n	14e84 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   14aac:	4bb4      	ldr	r3, [pc, #720]	; (14d80 <sd_mmc_check+0x340>)
   14aae:	681b      	ldr	r3, [r3, #0]
   14ab0:	7ada      	ldrb	r2, [r3, #11]
   14ab2:	2309      	movs	r3, #9
   14ab4:	4013      	ands	r3, r2
   14ab6:	2b01      	cmp	r3, #1
   14ab8:	d10f      	bne.n	14ada <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   14aba:	2180      	movs	r1, #128	; 0x80
   14abc:	0089      	lsls	r1, r1, #2
   14abe:	48b4      	ldr	r0, [pc, #720]	; (14d90 <sd_mmc_check+0x350>)
   14ac0:	4bb1      	ldr	r3, [pc, #708]	; (14d88 <sd_mmc_check+0x348>)
   14ac2:	4798      	blx	r3
   14ac4:	2800      	cmp	r0, #0
   14ac6:	d0db      	beq.n	14a80 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   14ac8:	4bad      	ldr	r3, [pc, #692]	; (14d80 <sd_mmc_check+0x340>)
   14aca:	681b      	ldr	r3, [r3, #0]
   14acc:	7adb      	ldrb	r3, [r3, #11]
   14ace:	07db      	lsls	r3, r3, #31
   14ad0:	d503      	bpl.n	14ada <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
   14ad2:	4bb0      	ldr	r3, [pc, #704]	; (14d94 <sd_mmc_check+0x354>)
   14ad4:	4798      	blx	r3
   14ad6:	2800      	cmp	r0, #0
   14ad8:	d0d2      	beq.n	14a80 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
   14ada:	4baf      	ldr	r3, [pc, #700]	; (14d98 <sd_mmc_check+0x358>)
   14adc:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   14ade:	4ba8      	ldr	r3, [pc, #672]	; (14d80 <sd_mmc_check+0x340>)
   14ae0:	681b      	ldr	r3, [r3, #0]
   14ae2:	2200      	movs	r2, #0
   14ae4:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   14ae6:	4ba5      	ldr	r3, [pc, #660]	; (14d7c <sd_mmc_check+0x33c>)
   14ae8:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
   14aea:	e7b4      	b.n	14a56 <sd_mmc_check+0x16>
	resp = driver_get_response();
   14aec:	4bab      	ldr	r3, [pc, #684]	; (14d9c <sd_mmc_check+0x35c>)
   14aee:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
   14af0:	1c43      	adds	r3, r0, #1
   14af2:	d100      	bne.n	14af6 <sd_mmc_check+0xb6>
   14af4:	e1c4      	b.n	14e80 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   14af6:	0500      	lsls	r0, r0, #20
   14af8:	0d00      	lsrs	r0, r0, #20
   14afa:	23d5      	movs	r3, #213	; 0xd5
   14afc:	005b      	lsls	r3, r3, #1
	*v2 = 1;
   14afe:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   14b00:	4298      	cmp	r0, r3
   14b02:	d1bd      	bne.n	14a80 <sd_mmc_check+0x40>
   14b04:	e7cc      	b.n	14aa0 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   14b06:	2100      	movs	r1, #0
   14b08:	48a5      	ldr	r0, [pc, #660]	; (14da0 <sd_mmc_check+0x360>)
   14b0a:	4b9f      	ldr	r3, [pc, #636]	; (14d88 <sd_mmc_check+0x348>)
   14b0c:	4798      	blx	r3
   14b0e:	2800      	cmp	r0, #0
   14b10:	d119      	bne.n	14b46 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
   14b12:	4b9b      	ldr	r3, [pc, #620]	; (14d80 <sd_mmc_check+0x340>)
   14b14:	681b      	ldr	r3, [r3, #0]
   14b16:	2202      	movs	r2, #2
   14b18:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   14b1a:	2100      	movs	r1, #0
   14b1c:	2088      	movs	r0, #136	; 0x88
   14b1e:	0140      	lsls	r0, r0, #5
   14b20:	4b99      	ldr	r3, [pc, #612]	; (14d88 <sd_mmc_check+0x348>)
   14b22:	4798      	blx	r3
   14b24:	2800      	cmp	r0, #0
   14b26:	d0ab      	beq.n	14a80 <sd_mmc_check+0x40>
   14b28:	4d9e      	ldr	r5, [pc, #632]	; (14da4 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   14b2a:	4f97      	ldr	r7, [pc, #604]	; (14d88 <sd_mmc_check+0x348>)
		resp = driver_get_response();
   14b2c:	4e9b      	ldr	r6, [pc, #620]	; (14d9c <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   14b2e:	2100      	movs	r1, #0
   14b30:	489d      	ldr	r0, [pc, #628]	; (14da8 <sd_mmc_check+0x368>)
   14b32:	47b8      	blx	r7
   14b34:	2800      	cmp	r0, #0
   14b36:	d0a3      	beq.n	14a80 <sd_mmc_check+0x40>
		resp = driver_get_response();
   14b38:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
   14b3a:	07c3      	lsls	r3, r0, #31
   14b3c:	d57d      	bpl.n	14c3a <sd_mmc_check+0x1fa>
   14b3e:	3d01      	subs	r5, #1
		if (retry-- == 0) {
   14b40:	2d00      	cmp	r5, #0
   14b42:	d1f4      	bne.n	14b2e <sd_mmc_check+0xee>
   14b44:	e79c      	b.n	14a80 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
   14b46:	4b95      	ldr	r3, [pc, #596]	; (14d9c <sd_mmc_check+0x35c>)
   14b48:	4798      	blx	r3
   14b4a:	0043      	lsls	r3, r0, #1
   14b4c:	d505      	bpl.n	14b5a <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
   14b4e:	4b8c      	ldr	r3, [pc, #560]	; (14d80 <sd_mmc_check+0x340>)
   14b50:	681a      	ldr	r2, [r3, #0]
   14b52:	7ad3      	ldrb	r3, [r2, #11]
   14b54:	2108      	movs	r1, #8
   14b56:	430b      	orrs	r3, r1
   14b58:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   14b5a:	2100      	movs	r1, #0
   14b5c:	4893      	ldr	r0, [pc, #588]	; (14dac <sd_mmc_check+0x36c>)
   14b5e:	4b8a      	ldr	r3, [pc, #552]	; (14d88 <sd_mmc_check+0x348>)
   14b60:	4798      	blx	r3
   14b62:	2800      	cmp	r0, #0
   14b64:	d08c      	beq.n	14a80 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   14b66:	4b86      	ldr	r3, [pc, #536]	; (14d80 <sd_mmc_check+0x340>)
   14b68:	681b      	ldr	r3, [r3, #0]
   14b6a:	7adb      	ldrb	r3, [r3, #11]
   14b6c:	07da      	lsls	r2, r3, #31
   14b6e:	d400      	bmi.n	14b72 <sd_mmc_check+0x132>
   14b70:	e1a4      	b.n	14ebc <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
   14b72:	4b8f      	ldr	r3, [pc, #572]	; (14db0 <sd_mmc_check+0x370>)
   14b74:	4798      	blx	r3
   14b76:	2800      	cmp	r0, #0
   14b78:	d082      	beq.n	14a80 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   14b7a:	4b81      	ldr	r3, [pc, #516]	; (14d80 <sd_mmc_check+0x340>)
   14b7c:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   14b7e:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   14b80:	2107      	movs	r1, #7
   14b82:	4019      	ands	r1, r3
   14b84:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
   14b86:	488b      	ldr	r0, [pc, #556]	; (14db4 <sd_mmc_check+0x374>)
   14b88:	5808      	ldr	r0, [r1, r0]
   14b8a:	21fa      	movs	r1, #250	; 0xfa
   14b8c:	0089      	lsls	r1, r1, #2
   14b8e:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   14b90:	065b      	lsls	r3, r3, #25
   14b92:	0f1b      	lsrs	r3, r3, #28
   14b94:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
   14b96:	4888      	ldr	r0, [pc, #544]	; (14db8 <sd_mmc_check+0x378>)
   14b98:	581b      	ldr	r3, [r3, r0]
   14b9a:	434b      	muls	r3, r1
   14b9c:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   14b9e:	7b93      	ldrb	r3, [r2, #14]
   14ba0:	099b      	lsrs	r3, r3, #6
   14ba2:	d000      	beq.n	14ba6 <sd_mmc_check+0x166>
   14ba4:	e13c      	b.n	14e20 <sd_mmc_check+0x3e0>
   14ba6:	7d91      	ldrb	r1, [r2, #22]
   14ba8:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   14baa:	7d53      	ldrb	r3, [r2, #21]
   14bac:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   14bae:	7d10      	ldrb	r0, [r2, #20]
   14bb0:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   14bb2:	4303      	orrs	r3, r0
   14bb4:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   14bb6:	7e10      	ldrb	r0, [r2, #24]
   14bb8:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   14bba:	7dd1      	ldrb	r1, [r2, #23]
   14bbc:	0049      	lsls	r1, r1, #1
   14bbe:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
   14bc0:	051b      	lsls	r3, r3, #20
   14bc2:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   14bc4:	3301      	adds	r3, #1
   14bc6:	2107      	movs	r1, #7
   14bc8:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   14bca:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   14bcc:	408b      	lsls	r3, r1
   14bce:	7cd0      	ldrb	r0, [r2, #19]
   14bd0:	210f      	movs	r1, #15
   14bd2:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
   14bd4:	408b      	lsls	r3, r1
				/ 1024;
   14bd6:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   14bd8:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   14bda:	8911      	ldrh	r1, [r2, #8]
   14bdc:	0409      	lsls	r1, r1, #16
   14bde:	4877      	ldr	r0, [pc, #476]	; (14dbc <sd_mmc_check+0x37c>)
   14be0:	4b69      	ldr	r3, [pc, #420]	; (14d88 <sd_mmc_check+0x348>)
   14be2:	4798      	blx	r3
   14be4:	2800      	cmp	r0, #0
   14be6:	d100      	bne.n	14bea <sd_mmc_check+0x1aa>
   14be8:	e74a      	b.n	14a80 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   14bea:	2301      	movs	r3, #1
   14bec:	9300      	str	r3, [sp, #0]
   14bee:	2208      	movs	r2, #8
   14bf0:	2100      	movs	r1, #0
   14bf2:	4873      	ldr	r0, [pc, #460]	; (14dc0 <sd_mmc_check+0x380>)
   14bf4:	4d73      	ldr	r5, [pc, #460]	; (14dc4 <sd_mmc_check+0x384>)
   14bf6:	47a8      	blx	r5
   14bf8:	2800      	cmp	r0, #0
   14bfa:	d100      	bne.n	14bfe <sd_mmc_check+0x1be>
   14bfc:	e740      	b.n	14a80 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
   14bfe:	2101      	movs	r1, #1
   14c00:	a806      	add	r0, sp, #24
   14c02:	4b71      	ldr	r3, [pc, #452]	; (14dc8 <sd_mmc_check+0x388>)
   14c04:	4798      	blx	r3
   14c06:	2800      	cmp	r0, #0
   14c08:	d100      	bne.n	14c0c <sd_mmc_check+0x1cc>
   14c0a:	e739      	b.n	14a80 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
   14c0c:	4b6f      	ldr	r3, [pc, #444]	; (14dcc <sd_mmc_check+0x38c>)
   14c0e:	4798      	blx	r3
   14c10:	2800      	cmp	r0, #0
   14c12:	d100      	bne.n	14c16 <sd_mmc_check+0x1d6>
   14c14:	e734      	b.n	14a80 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   14c16:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
   14c18:	781b      	ldrb	r3, [r3, #0]
   14c1a:	220f      	movs	r2, #15
   14c1c:	4013      	ands	r3, r2
   14c1e:	2b01      	cmp	r3, #1
   14c20:	d100      	bne.n	14c24 <sd_mmc_check+0x1e4>
   14c22:	e119      	b.n	14e58 <sd_mmc_check+0x418>
   14c24:	2b00      	cmp	r3, #0
   14c26:	d100      	bne.n	14c2a <sd_mmc_check+0x1ea>
   14c28:	e109      	b.n	14e3e <sd_mmc_check+0x3fe>
   14c2a:	2b02      	cmp	r3, #2
   14c2c:	d100      	bne.n	14c30 <sd_mmc_check+0x1f0>
   14c2e:	e118      	b.n	14e62 <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
   14c30:	4b53      	ldr	r3, [pc, #332]	; (14d80 <sd_mmc_check+0x340>)
   14c32:	681b      	ldr	r3, [r3, #0]
   14c34:	2210      	movs	r2, #16
   14c36:	731a      	strb	r2, [r3, #12]
   14c38:	e105      	b.n	14e46 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   14c3a:	2100      	movs	r1, #0
   14c3c:	4858      	ldr	r0, [pc, #352]	; (14da0 <sd_mmc_check+0x360>)
   14c3e:	4b52      	ldr	r3, [pc, #328]	; (14d88 <sd_mmc_check+0x348>)
   14c40:	4798      	blx	r3
   14c42:	2800      	cmp	r0, #0
   14c44:	d100      	bne.n	14c48 <sd_mmc_check+0x208>
   14c46:	e71b      	b.n	14a80 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   14c48:	4b54      	ldr	r3, [pc, #336]	; (14d9c <sd_mmc_check+0x35c>)
   14c4a:	4798      	blx	r3
   14c4c:	23c0      	movs	r3, #192	; 0xc0
   14c4e:	05db      	lsls	r3, r3, #23
   14c50:	4018      	ands	r0, r3
   14c52:	2380      	movs	r3, #128	; 0x80
   14c54:	05db      	lsls	r3, r3, #23
   14c56:	4298      	cmp	r0, r3
   14c58:	d105      	bne.n	14c66 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
   14c5a:	4b49      	ldr	r3, [pc, #292]	; (14d80 <sd_mmc_check+0x340>)
   14c5c:	681a      	ldr	r2, [r3, #0]
   14c5e:	7ad1      	ldrb	r1, [r2, #11]
   14c60:	2308      	movs	r3, #8
   14c62:	430b      	orrs	r3, r1
   14c64:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   14c66:	2100      	movs	r1, #0
   14c68:	4850      	ldr	r0, [pc, #320]	; (14dac <sd_mmc_check+0x36c>)
   14c6a:	4b47      	ldr	r3, [pc, #284]	; (14d88 <sd_mmc_check+0x348>)
   14c6c:	4798      	blx	r3
   14c6e:	2800      	cmp	r0, #0
   14c70:	d100      	bne.n	14c74 <sd_mmc_check+0x234>
   14c72:	e705      	b.n	14a80 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
   14c74:	4b4e      	ldr	r3, [pc, #312]	; (14db0 <sd_mmc_check+0x370>)
   14c76:	4798      	blx	r3
   14c78:	2800      	cmp	r0, #0
   14c7a:	d100      	bne.n	14c7e <sd_mmc_check+0x23e>
   14c7c:	e700      	b.n	14a80 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   14c7e:	4b40      	ldr	r3, [pc, #256]	; (14d80 <sd_mmc_check+0x340>)
   14c80:	681a      	ldr	r2, [r3, #0]
   14c82:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
   14c84:	069b      	lsls	r3, r3, #26
   14c86:	0f1b      	lsrs	r3, r3, #28
   14c88:	2b02      	cmp	r3, #2
   14c8a:	d100      	bne.n	14c8e <sd_mmc_check+0x24e>
   14c8c:	e0a8      	b.n	14de0 <sd_mmc_check+0x3a0>
   14c8e:	d907      	bls.n	14ca0 <sd_mmc_check+0x260>
   14c90:	2b03      	cmp	r3, #3
   14c92:	d100      	bne.n	14c96 <sd_mmc_check+0x256>
   14c94:	e0a7      	b.n	14de6 <sd_mmc_check+0x3a6>
   14c96:	2b04      	cmp	r3, #4
   14c98:	d104      	bne.n	14ca4 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
   14c9a:	2340      	movs	r3, #64	; 0x40
   14c9c:	7313      	strb	r3, [r2, #12]
   14c9e:	e003      	b.n	14ca8 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   14ca0:	2b01      	cmp	r3, #1
   14ca2:	d066      	beq.n	14d72 <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   14ca4:	2312      	movs	r3, #18
   14ca6:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   14ca8:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   14caa:	0659      	lsls	r1, r3, #25
   14cac:	0f09      	lsrs	r1, r1, #28
   14cae:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   14cb0:	2007      	movs	r0, #7
   14cb2:	4003      	ands	r3, r0
   14cb4:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
   14cb6:	483f      	ldr	r0, [pc, #252]	; (14db4 <sd_mmc_check+0x374>)
   14cb8:	5818      	ldr	r0, [r3, r0]
   14cba:	23fa      	movs	r3, #250	; 0xfa
   14cbc:	009b      	lsls	r3, r3, #2
   14cbe:	4343      	muls	r3, r0
   14cc0:	4843      	ldr	r0, [pc, #268]	; (14dd0 <sd_mmc_check+0x390>)
   14cc2:	5809      	ldr	r1, [r1, r0]
   14cc4:	434b      	muls	r3, r1
   14cc6:	6013      	str	r3, [r2, #0]
   14cc8:	7d91      	ldrb	r1, [r2, #22]
   14cca:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   14ccc:	7d53      	ldrb	r3, [r2, #21]
   14cce:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   14cd0:	7d10      	ldrb	r0, [r2, #20]
   14cd2:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   14cd4:	4303      	orrs	r3, r0
   14cd6:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
   14cd8:	051b      	lsls	r3, r3, #20
   14cda:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   14cdc:	493d      	ldr	r1, [pc, #244]	; (14dd4 <sd_mmc_check+0x394>)
   14cde:	428b      	cmp	r3, r1
   14ce0:	d00f      	beq.n	14d02 <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   14ce2:	7e10      	ldrb	r0, [r2, #24]
   14ce4:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   14ce6:	7dd1      	ldrb	r1, [r2, #23]
   14ce8:	0049      	lsls	r1, r1, #1
   14cea:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   14cec:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
   14cee:	2007      	movs	r0, #7
   14cf0:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   14cf2:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   14cf4:	408b      	lsls	r3, r1
   14cf6:	7cd1      	ldrb	r1, [r2, #19]
   14cf8:	3008      	adds	r0, #8
   14cfa:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
   14cfc:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   14cfe:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   14d00:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   14d02:	7b13      	ldrb	r3, [r2, #12]
   14d04:	2b3f      	cmp	r3, #63	; 0x3f
   14d06:	d97b      	bls.n	14e00 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   14d08:	2100      	movs	r1, #0
   14d0a:	9100      	str	r1, [sp, #0]
   14d0c:	2301      	movs	r3, #1
   14d0e:	2280      	movs	r2, #128	; 0x80
   14d10:	0092      	lsls	r2, r2, #2
   14d12:	4831      	ldr	r0, [pc, #196]	; (14dd8 <sd_mmc_check+0x398>)
   14d14:	4d2b      	ldr	r5, [pc, #172]	; (14dc4 <sd_mmc_check+0x384>)
   14d16:	47a8      	blx	r5
   14d18:	2800      	cmp	r0, #0
   14d1a:	d100      	bne.n	14d1e <sd_mmc_check+0x2de>
   14d1c:	e6b0      	b.n	14a80 <sd_mmc_check+0x40>
   14d1e:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
   14d20:	4e2e      	ldr	r6, [pc, #184]	; (14ddc <sd_mmc_check+0x39c>)
   14d22:	a805      	add	r0, sp, #20
   14d24:	47b0      	blx	r6
   14d26:	2800      	cmp	r0, #0
   14d28:	d100      	bne.n	14d2c <sd_mmc_check+0x2ec>
   14d2a:	e6a9      	b.n	14a80 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   14d2c:	3501      	adds	r5, #1
   14d2e:	b2ad      	uxth	r5, r5
   14d30:	2d32      	cmp	r5, #50	; 0x32
   14d32:	d1f6      	bne.n	14d22 <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   14d34:	4b12      	ldr	r3, [pc, #72]	; (14d80 <sd_mmc_check+0x340>)
   14d36:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   14d38:	7d8a      	ldrb	r2, [r1, #22]
   14d3a:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   14d3c:	7d4b      	ldrb	r3, [r1, #21]
   14d3e:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   14d40:	7d09      	ldrb	r1, [r1, #20]
   14d42:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   14d44:	430b      	orrs	r3, r1
   14d46:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
   14d48:	051b      	lsls	r3, r3, #20
   14d4a:	0d1b      	lsrs	r3, r3, #20
   14d4c:	4a21      	ldr	r2, [pc, #132]	; (14dd4 <sd_mmc_check+0x394>)
   14d4e:	4293      	cmp	r3, r2
   14d50:	d154      	bne.n	14dfc <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
   14d52:	4e22      	ldr	r6, [pc, #136]	; (14ddc <sd_mmc_check+0x39c>)
   14d54:	a806      	add	r0, sp, #24
   14d56:	47b0      	blx	r6
   14d58:	2800      	cmp	r0, #0
   14d5a:	d100      	bne.n	14d5e <sd_mmc_check+0x31e>
   14d5c:	e690      	b.n	14a80 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   14d5e:	3501      	adds	r5, #1
   14d60:	b2ad      	uxth	r5, r5
   14d62:	2d35      	cmp	r5, #53	; 0x35
   14d64:	d9f6      	bls.n	14d54 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
   14d66:	4b06      	ldr	r3, [pc, #24]	; (14d80 <sd_mmc_check+0x340>)
   14d68:	681a      	ldr	r2, [r3, #0]
   14d6a:	9b06      	ldr	r3, [sp, #24]
   14d6c:	085b      	lsrs	r3, r3, #1
   14d6e:	6053      	str	r3, [r2, #4]
   14d70:	e044      	b.n	14dfc <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   14d72:	2314      	movs	r3, #20
   14d74:	7313      	strb	r3, [r2, #12]
   14d76:	e797      	b.n	14ca8 <sd_mmc_check+0x268>
   14d78:	00014925 	.word	0x00014925
   14d7c:	00014a05 	.word	0x00014a05
   14d80:	2000325c 	.word	0x2000325c
   14d84:	00015621 	.word	0x00015621
   14d88:	000157e9 	.word	0x000157e9
   14d8c:	00005508 	.word	0x00005508
   14d90:	00001110 	.word	0x00001110
   14d94:	00014981 	.word	0x00014981
   14d98:	000148fd 	.word	0x000148fd
   14d9c:	00015801 	.word	0x00015801
   14da0:	0000053a 	.word	0x0000053a
   14da4:	00001bef 	.word	0x00001bef
   14da8:	00001101 	.word	0x00001101
   14dac:	0000113b 	.word	0x0000113b
   14db0:	000149b9 	.word	0x000149b9
   14db4:	0002192c 	.word	0x0002192c
   14db8:	00021948 	.word	0x00021948
   14dbc:	00001137 	.word	0x00001137
   14dc0:	00081133 	.word	0x00081133
   14dc4:	00015659 	.word	0x00015659
   14dc8:	00015885 	.word	0x00015885
   14dcc:	00015911 	.word	0x00015911
   14dd0:	000218ec 	.word	0x000218ec
   14dd4:	00000fff 	.word	0x00000fff
   14dd8:	00081108 	.word	0x00081108
   14ddc:	0001580d 	.word	0x0001580d
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   14de0:	2322      	movs	r3, #34	; 0x22
   14de2:	7313      	strb	r3, [r2, #12]
   14de4:	e760      	b.n	14ca8 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
   14de6:	2330      	movs	r3, #48	; 0x30
   14de8:	7313      	strb	r3, [r2, #12]
   14dea:	e75d      	b.n	14ca8 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
   14dec:	a806      	add	r0, sp, #24
   14dee:	4b36      	ldr	r3, [pc, #216]	; (14ec8 <sd_mmc_check+0x488>)
   14df0:	4798      	blx	r3
   14df2:	2800      	cmp	r0, #0
   14df4:	d100      	bne.n	14df8 <sd_mmc_check+0x3b8>
   14df6:	e643      	b.n	14a80 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   14df8:	3501      	adds	r5, #1
   14dfa:	b2ad      	uxth	r5, r5
   14dfc:	2d7f      	cmp	r5, #127	; 0x7f
   14dfe:	d9f5      	bls.n	14dec <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   14e00:	2180      	movs	r1, #128	; 0x80
   14e02:	0089      	lsls	r1, r1, #2
   14e04:	4831      	ldr	r0, [pc, #196]	; (14ecc <sd_mmc_check+0x48c>)
   14e06:	4b32      	ldr	r3, [pc, #200]	; (14ed0 <sd_mmc_check+0x490>)
   14e08:	4798      	blx	r3
   14e0a:	2800      	cmp	r0, #0
   14e0c:	d100      	bne.n	14e10 <sd_mmc_check+0x3d0>
   14e0e:	e637      	b.n	14a80 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
   14e10:	4b30      	ldr	r3, [pc, #192]	; (14ed4 <sd_mmc_check+0x494>)
   14e12:	4798      	blx	r3
   14e14:	2800      	cmp	r0, #0
   14e16:	d100      	bne.n	14e1a <sd_mmc_check+0x3da>
   14e18:	e632      	b.n	14a80 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
   14e1a:	4b2f      	ldr	r3, [pc, #188]	; (14ed8 <sd_mmc_check+0x498>)
   14e1c:	4798      	blx	r3
   14e1e:	e65e      	b.n	14ade <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   14e20:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   14e22:	7d93      	ldrb	r3, [r2, #22]
   14e24:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   14e26:	7d51      	ldrb	r1, [r2, #21]
   14e28:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   14e2a:	430b      	orrs	r3, r1
   14e2c:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
   14e2e:	029b      	lsls	r3, r3, #10
				* 512;
   14e30:	085b      	lsrs	r3, r3, #1
   14e32:	2180      	movs	r1, #128	; 0x80
   14e34:	0089      	lsls	r1, r1, #2
   14e36:	468c      	mov	ip, r1
   14e38:	4463      	add	r3, ip
		sd_mmc_card->capacity =
   14e3a:	6053      	str	r3, [r2, #4]
   14e3c:	e6cd      	b.n	14bda <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
   14e3e:	4b27      	ldr	r3, [pc, #156]	; (14edc <sd_mmc_check+0x49c>)
   14e40:	681b      	ldr	r3, [r3, #0]
   14e42:	2210      	movs	r2, #16
   14e44:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   14e46:	4b25      	ldr	r3, [pc, #148]	; (14edc <sd_mmc_check+0x49c>)
   14e48:	681b      	ldr	r3, [r3, #0]
   14e4a:	7adb      	ldrb	r3, [r3, #11]
   14e4c:	2209      	movs	r2, #9
   14e4e:	4013      	ands	r3, r2
   14e50:	2b01      	cmp	r3, #1
   14e52:	d000      	beq.n	14e56 <sd_mmc_check+0x416>
   14e54:	e638      	b.n	14ac8 <sd_mmc_check+0x88>
   14e56:	e630      	b.n	14aba <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
   14e58:	4b20      	ldr	r3, [pc, #128]	; (14edc <sd_mmc_check+0x49c>)
   14e5a:	681b      	ldr	r3, [r3, #0]
   14e5c:	221a      	movs	r2, #26
   14e5e:	731a      	strb	r2, [r3, #12]
   14e60:	e7f1      	b.n	14e46 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   14e62:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   14e64:	789b      	ldrb	r3, [r3, #2]
   14e66:	09db      	lsrs	r3, r3, #7
   14e68:	2b01      	cmp	r3, #1
   14e6a:	d104      	bne.n	14e76 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   14e6c:	4b1b      	ldr	r3, [pc, #108]	; (14edc <sd_mmc_check+0x49c>)
   14e6e:	681b      	ldr	r3, [r3, #0]
   14e70:	2230      	movs	r2, #48	; 0x30
   14e72:	731a      	strb	r2, [r3, #12]
   14e74:	e7e7      	b.n	14e46 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   14e76:	4b19      	ldr	r3, [pc, #100]	; (14edc <sd_mmc_check+0x49c>)
   14e78:	681b      	ldr	r3, [r3, #0]
   14e7a:	2220      	movs	r2, #32
   14e7c:	731a      	strb	r2, [r3, #12]
   14e7e:	e7e2      	b.n	14e46 <sd_mmc_check+0x406>
	*v2 = 0;
   14e80:	2600      	movs	r6, #0
   14e82:	e60d      	b.n	14aa0 <sd_mmc_check+0x60>
   14e84:	1e73      	subs	r3, r6, #1
   14e86:	419e      	sbcs	r6, r3
   14e88:	07b3      	lsls	r3, r6, #30
   14e8a:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   14e8c:	4d14      	ldr	r5, [pc, #80]	; (14ee0 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   14e8e:	4f10      	ldr	r7, [pc, #64]	; (14ed0 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   14e90:	46b8      	mov	r8, r7
		resp = driver_get_response();
   14e92:	4e14      	ldr	r6, [pc, #80]	; (14ee4 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   14e94:	2100      	movs	r1, #0
   14e96:	4814      	ldr	r0, [pc, #80]	; (14ee8 <sd_mmc_check+0x4a8>)
   14e98:	47b8      	blx	r7
   14e9a:	2800      	cmp	r0, #0
   14e9c:	d100      	bne.n	14ea0 <sd_mmc_check+0x460>
   14e9e:	e638      	b.n	14b12 <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   14ea0:	9903      	ldr	r1, [sp, #12]
   14ea2:	4812      	ldr	r0, [pc, #72]	; (14eec <sd_mmc_check+0x4ac>)
   14ea4:	47c0      	blx	r8
   14ea6:	2800      	cmp	r0, #0
   14ea8:	d100      	bne.n	14eac <sd_mmc_check+0x46c>
   14eaa:	e632      	b.n	14b12 <sd_mmc_check+0xd2>
		resp = driver_get_response();
   14eac:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
   14eae:	07c3      	lsls	r3, r0, #31
   14eb0:	d400      	bmi.n	14eb4 <sd_mmc_check+0x474>
   14eb2:	e628      	b.n	14b06 <sd_mmc_check+0xc6>
   14eb4:	3d01      	subs	r5, #1
		if (retry-- == 0) {
   14eb6:	2d00      	cmp	r5, #0
   14eb8:	d1ec      	bne.n	14e94 <sd_mmc_check+0x454>
   14eba:	e62a      	b.n	14b12 <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   14ebc:	2209      	movs	r2, #9
   14ebe:	4013      	ands	r3, r2
   14ec0:	2b01      	cmp	r3, #1
   14ec2:	d000      	beq.n	14ec6 <sd_mmc_check+0x486>
   14ec4:	e609      	b.n	14ada <sd_mmc_check+0x9a>
   14ec6:	e5f8      	b.n	14aba <sd_mmc_check+0x7a>
   14ec8:	0001580d 	.word	0x0001580d
   14ecc:	00001110 	.word	0x00001110
   14ed0:	000157e9 	.word	0x000157e9
   14ed4:	00014981 	.word	0x00014981
   14ed8:	000148fd 	.word	0x000148fd
   14edc:	2000325c 	.word	0x2000325c
   14ee0:	00001bef 	.word	0x00001bef
   14ee4:	00015801 	.word	0x00015801
   14ee8:	00001137 	.word	0x00001137
   14eec:	00001129 	.word	0x00001129

00014ef0 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   14ef0:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   14ef2:	4b06      	ldr	r3, [pc, #24]	; (14f0c <sd_mmc_get_type+0x1c>)
   14ef4:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
   14ef6:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   14ef8:	2800      	cmp	r0, #0
   14efa:	d001      	beq.n	14f00 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
   14efc:	0018      	movs	r0, r3
   14efe:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
   14f00:	4b03      	ldr	r3, [pc, #12]	; (14f10 <sd_mmc_get_type+0x20>)
   14f02:	4798      	blx	r3
	return sd_mmc_card->type;
   14f04:	4b03      	ldr	r3, [pc, #12]	; (14f14 <sd_mmc_get_type+0x24>)
   14f06:	681b      	ldr	r3, [r3, #0]
   14f08:	7adb      	ldrb	r3, [r3, #11]
   14f0a:	e7f7      	b.n	14efc <sd_mmc_get_type+0xc>
   14f0c:	00014925 	.word	0x00014925
   14f10:	00014a05 	.word	0x00014a05
   14f14:	2000325c 	.word	0x2000325c

00014f18 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   14f18:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   14f1a:	4b06      	ldr	r3, [pc, #24]	; (14f34 <sd_mmc_get_capacity+0x1c>)
   14f1c:	4798      	blx	r3
		return 0;
   14f1e:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   14f20:	2800      	cmp	r0, #0
   14f22:	d001      	beq.n	14f28 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
   14f24:	0018      	movs	r0, r3
   14f26:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
   14f28:	4b03      	ldr	r3, [pc, #12]	; (14f38 <sd_mmc_get_capacity+0x20>)
   14f2a:	4798      	blx	r3
	return sd_mmc_card->capacity;
   14f2c:	4b03      	ldr	r3, [pc, #12]	; (14f3c <sd_mmc_get_capacity+0x24>)
   14f2e:	681b      	ldr	r3, [r3, #0]
   14f30:	685b      	ldr	r3, [r3, #4]
   14f32:	e7f7      	b.n	14f24 <sd_mmc_get_capacity+0xc>
   14f34:	00014925 	.word	0x00014925
   14f38:	00014a05 	.word	0x00014a05
   14f3c:	2000325c 	.word	0x2000325c

00014f40 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
   14f40:	2000      	movs	r0, #0
   14f42:	4770      	bx	lr

00014f44 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   14f44:	b570      	push	{r4, r5, r6, lr}
   14f46:	b082      	sub	sp, #8
   14f48:	000e      	movs	r6, r1
   14f4a:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   14f4c:	4b16      	ldr	r3, [pc, #88]	; (14fa8 <sd_mmc_init_read_blocks+0x64>)
   14f4e:	4798      	blx	r3
   14f50:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
   14f52:	d002      	beq.n	14f5a <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
   14f54:	0020      	movs	r0, r4
   14f56:	b002      	add	sp, #8
   14f58:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
   14f5a:	4b14      	ldr	r3, [pc, #80]	; (14fac <sd_mmc_init_read_blocks+0x68>)
   14f5c:	4798      	blx	r3
   14f5e:	2800      	cmp	r0, #0
   14f60:	d017      	beq.n	14f92 <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
   14f62:	2d01      	cmp	r5, #1
   14f64:	d919      	bls.n	14f9a <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   14f66:	4812      	ldr	r0, [pc, #72]	; (14fb0 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   14f68:	4b12      	ldr	r3, [pc, #72]	; (14fb4 <sd_mmc_init_read_blocks+0x70>)
   14f6a:	681b      	ldr	r3, [r3, #0]
   14f6c:	7adb      	ldrb	r3, [r3, #11]
   14f6e:	071b      	lsls	r3, r3, #28
   14f70:	d400      	bmi.n	14f74 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
   14f72:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   14f74:	2301      	movs	r3, #1
   14f76:	9300      	str	r3, [sp, #0]
   14f78:	002b      	movs	r3, r5
   14f7a:	2280      	movs	r2, #128	; 0x80
   14f7c:	0092      	lsls	r2, r2, #2
   14f7e:	0031      	movs	r1, r6
   14f80:	4e0d      	ldr	r6, [pc, #52]	; (14fb8 <sd_mmc_init_read_blocks+0x74>)
   14f82:	47b0      	blx	r6
   14f84:	2800      	cmp	r0, #0
   14f86:	d00a      	beq.n	14f9e <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
   14f88:	4b0c      	ldr	r3, [pc, #48]	; (14fbc <sd_mmc_init_read_blocks+0x78>)
   14f8a:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   14f8c:	4b0c      	ldr	r3, [pc, #48]	; (14fc0 <sd_mmc_init_read_blocks+0x7c>)
   14f8e:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
   14f90:	e7e0      	b.n	14f54 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
   14f92:	4b0c      	ldr	r3, [pc, #48]	; (14fc4 <sd_mmc_init_read_blocks+0x80>)
   14f94:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   14f96:	3405      	adds	r4, #5
   14f98:	e7dc      	b.n	14f54 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   14f9a:	480b      	ldr	r0, [pc, #44]	; (14fc8 <sd_mmc_init_read_blocks+0x84>)
   14f9c:	e7e4      	b.n	14f68 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
   14f9e:	4b09      	ldr	r3, [pc, #36]	; (14fc4 <sd_mmc_init_read_blocks+0x80>)
   14fa0:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   14fa2:	2405      	movs	r4, #5
   14fa4:	e7d6      	b.n	14f54 <sd_mmc_init_read_blocks+0x10>
   14fa6:	46c0      	nop			; (mov r8, r8)
   14fa8:	00014925 	.word	0x00014925
   14fac:	00014981 	.word	0x00014981
   14fb0:	00101112 	.word	0x00101112
   14fb4:	2000325c 	.word	0x2000325c
   14fb8:	00015659 	.word	0x00015659
   14fbc:	20003280 	.word	0x20003280
   14fc0:	20003282 	.word	0x20003282
   14fc4:	00014a05 	.word	0x00014a05
   14fc8:	00081111 	.word	0x00081111

00014fcc <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   14fcc:	b510      	push	{r4, lr}
   14fce:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   14fd0:	4b07      	ldr	r3, [pc, #28]	; (14ff0 <sd_mmc_start_read_blocks+0x24>)
   14fd2:	4798      	blx	r3
   14fd4:	2800      	cmp	r0, #0
   14fd6:	d104      	bne.n	14fe2 <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
   14fd8:	2200      	movs	r2, #0
   14fda:	4b06      	ldr	r3, [pc, #24]	; (14ff4 <sd_mmc_start_read_blocks+0x28>)
   14fdc:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   14fde:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
   14fe0:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
   14fe2:	4a04      	ldr	r2, [pc, #16]	; (14ff4 <sd_mmc_start_read_blocks+0x28>)
   14fe4:	8813      	ldrh	r3, [r2, #0]
   14fe6:	1b1c      	subs	r4, r3, r4
   14fe8:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
   14fea:	2000      	movs	r0, #0
   14fec:	e7f8      	b.n	14fe0 <sd_mmc_start_read_blocks+0x14>
   14fee:	46c0      	nop			; (mov r8, r8)
   14ff0:	00015885 	.word	0x00015885
   14ff4:	20003280 	.word	0x20003280

00014ff8 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   14ff8:	b510      	push	{r4, lr}
   14ffa:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
   14ffc:	4b14      	ldr	r3, [pc, #80]	; (15050 <sd_mmc_wait_end_of_read_blocks+0x58>)
   14ffe:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   15000:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
   15002:	2800      	cmp	r0, #0
   15004:	d101      	bne.n	1500a <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   15006:	0018      	movs	r0, r3
   15008:	bd10      	pop	{r4, pc}
	if (abort) {
   1500a:	2c00      	cmp	r4, #0
   1500c:	d010      	beq.n	15030 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
   1500e:	2200      	movs	r2, #0
   15010:	4b10      	ldr	r3, [pc, #64]	; (15054 <sd_mmc_wait_end_of_read_blocks+0x5c>)
   15012:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
   15014:	4b10      	ldr	r3, [pc, #64]	; (15058 <sd_mmc_wait_end_of_read_blocks+0x60>)
   15016:	881b      	ldrh	r3, [r3, #0]
   15018:	2b01      	cmp	r3, #1
   1501a:	d00f      	beq.n	1503c <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1501c:	2100      	movs	r1, #0
   1501e:	480f      	ldr	r0, [pc, #60]	; (1505c <sd_mmc_wait_end_of_read_blocks+0x64>)
   15020:	4b0f      	ldr	r3, [pc, #60]	; (15060 <sd_mmc_wait_end_of_read_blocks+0x68>)
   15022:	4798      	blx	r3
   15024:	2800      	cmp	r0, #0
   15026:	d00d      	beq.n	15044 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
   15028:	4b0e      	ldr	r3, [pc, #56]	; (15064 <sd_mmc_wait_end_of_read_blocks+0x6c>)
   1502a:	4798      	blx	r3
	return SD_MMC_OK;
   1502c:	2300      	movs	r3, #0
   1502e:	e7ea      	b.n	15006 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
   15030:	4b08      	ldr	r3, [pc, #32]	; (15054 <sd_mmc_wait_end_of_read_blocks+0x5c>)
   15032:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
   15034:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
   15036:	2a00      	cmp	r2, #0
   15038:	d0ec      	beq.n	15014 <sd_mmc_wait_end_of_read_blocks+0x1c>
   1503a:	e7e4      	b.n	15006 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
   1503c:	4b09      	ldr	r3, [pc, #36]	; (15064 <sd_mmc_wait_end_of_read_blocks+0x6c>)
   1503e:	4798      	blx	r3
		return SD_MMC_OK;
   15040:	2300      	movs	r3, #0
   15042:	e7e0      	b.n	15006 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   15044:	2100      	movs	r1, #0
   15046:	4805      	ldr	r0, [pc, #20]	; (1505c <sd_mmc_wait_end_of_read_blocks+0x64>)
   15048:	4b05      	ldr	r3, [pc, #20]	; (15060 <sd_mmc_wait_end_of_read_blocks+0x68>)
   1504a:	4798      	blx	r3
   1504c:	e7ec      	b.n	15028 <sd_mmc_wait_end_of_read_blocks+0x30>
   1504e:	46c0      	nop			; (mov r8, r8)
   15050:	00015911 	.word	0x00015911
   15054:	20003280 	.word	0x20003280
   15058:	20003282 	.word	0x20003282
   1505c:	0000310c 	.word	0x0000310c
   15060:	000157e9 	.word	0x000157e9
   15064:	00014a05 	.word	0x00014a05

00015068 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   15068:	b570      	push	{r4, r5, r6, lr}
   1506a:	b082      	sub	sp, #8
   1506c:	000e      	movs	r6, r1
   1506e:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   15070:	4b11      	ldr	r3, [pc, #68]	; (150b8 <sd_mmc_init_write_blocks+0x50>)
   15072:	4798      	blx	r3
   15074:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
   15076:	d116      	bne.n	150a6 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
   15078:	2d01      	cmp	r5, #1
   1507a:	d917      	bls.n	150ac <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1507c:	480f      	ldr	r0, [pc, #60]	; (150bc <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1507e:	4b10      	ldr	r3, [pc, #64]	; (150c0 <sd_mmc_init_write_blocks+0x58>)
   15080:	681b      	ldr	r3, [r3, #0]
   15082:	7adb      	ldrb	r3, [r3, #11]
   15084:	071b      	lsls	r3, r3, #28
   15086:	d400      	bmi.n	1508a <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   15088:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1508a:	2301      	movs	r3, #1
   1508c:	9300      	str	r3, [sp, #0]
   1508e:	002b      	movs	r3, r5
   15090:	2280      	movs	r2, #128	; 0x80
   15092:	0092      	lsls	r2, r2, #2
   15094:	0031      	movs	r1, r6
   15096:	4e0b      	ldr	r6, [pc, #44]	; (150c4 <sd_mmc_init_write_blocks+0x5c>)
   15098:	47b0      	blx	r6
   1509a:	2800      	cmp	r0, #0
   1509c:	d008      	beq.n	150b0 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1509e:	4b0a      	ldr	r3, [pc, #40]	; (150c8 <sd_mmc_init_write_blocks+0x60>)
   150a0:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   150a2:	4b0a      	ldr	r3, [pc, #40]	; (150cc <sd_mmc_init_write_blocks+0x64>)
   150a4:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
   150a6:	0020      	movs	r0, r4
   150a8:	b002      	add	sp, #8
   150aa:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   150ac:	4808      	ldr	r0, [pc, #32]	; (150d0 <sd_mmc_init_write_blocks+0x68>)
   150ae:	e7e6      	b.n	1507e <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
   150b0:	4b08      	ldr	r3, [pc, #32]	; (150d4 <sd_mmc_init_write_blocks+0x6c>)
   150b2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   150b4:	2405      	movs	r4, #5
   150b6:	e7f6      	b.n	150a6 <sd_mmc_init_write_blocks+0x3e>
   150b8:	00014925 	.word	0x00014925
   150bc:	00109119 	.word	0x00109119
   150c0:	2000325c 	.word	0x2000325c
   150c4:	00015659 	.word	0x00015659
   150c8:	20003280 	.word	0x20003280
   150cc:	20003282 	.word	0x20003282
   150d0:	00089118 	.word	0x00089118
   150d4:	00014a05 	.word	0x00014a05

000150d8 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   150d8:	b510      	push	{r4, lr}
   150da:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   150dc:	4b07      	ldr	r3, [pc, #28]	; (150fc <sd_mmc_start_write_blocks+0x24>)
   150de:	4798      	blx	r3
   150e0:	2800      	cmp	r0, #0
   150e2:	d104      	bne.n	150ee <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
   150e4:	2200      	movs	r2, #0
   150e6:	4b06      	ldr	r3, [pc, #24]	; (15100 <sd_mmc_start_write_blocks+0x28>)
   150e8:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   150ea:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
   150ec:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
   150ee:	4a04      	ldr	r2, [pc, #16]	; (15100 <sd_mmc_start_write_blocks+0x28>)
   150f0:	8813      	ldrh	r3, [r2, #0]
   150f2:	1b1c      	subs	r4, r3, r4
   150f4:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
   150f6:	2000      	movs	r0, #0
   150f8:	e7f8      	b.n	150ec <sd_mmc_start_write_blocks+0x14>
   150fa:	46c0      	nop			; (mov r8, r8)
   150fc:	00015915 	.word	0x00015915
   15100:	20003280 	.word	0x20003280

00015104 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   15104:	b510      	push	{r4, lr}
   15106:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
   15108:	4b0e      	ldr	r3, [pc, #56]	; (15144 <sd_mmc_wait_end_of_write_blocks+0x40>)
   1510a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1510c:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
   1510e:	2800      	cmp	r0, #0
   15110:	d101      	bne.n	15116 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   15112:	0018      	movs	r0, r3
   15114:	bd10      	pop	{r4, pc}
	if (abort) {
   15116:	2c00      	cmp	r4, #0
   15118:	d00a      	beq.n	15130 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
   1511a:	2200      	movs	r2, #0
   1511c:	4b0a      	ldr	r3, [pc, #40]	; (15148 <sd_mmc_wait_end_of_write_blocks+0x44>)
   1511e:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
   15120:	4b0a      	ldr	r3, [pc, #40]	; (1514c <sd_mmc_wait_end_of_write_blocks+0x48>)
   15122:	881b      	ldrh	r3, [r3, #0]
   15124:	2b01      	cmp	r3, #1
   15126:	d009      	beq.n	1513c <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
   15128:	4b09      	ldr	r3, [pc, #36]	; (15150 <sd_mmc_wait_end_of_write_blocks+0x4c>)
   1512a:	4798      	blx	r3
	return SD_MMC_OK;
   1512c:	2300      	movs	r3, #0
   1512e:	e7f0      	b.n	15112 <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
   15130:	4b05      	ldr	r3, [pc, #20]	; (15148 <sd_mmc_wait_end_of_write_blocks+0x44>)
   15132:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
   15134:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
   15136:	2a00      	cmp	r2, #0
   15138:	d0f2      	beq.n	15120 <sd_mmc_wait_end_of_write_blocks+0x1c>
   1513a:	e7ea      	b.n	15112 <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
   1513c:	4b04      	ldr	r3, [pc, #16]	; (15150 <sd_mmc_wait_end_of_write_blocks+0x4c>)
   1513e:	4798      	blx	r3
		return SD_MMC_OK;
   15140:	2300      	movs	r3, #0
   15142:	e7e6      	b.n	15112 <sd_mmc_wait_end_of_write_blocks+0xe>
   15144:	00015995 	.word	0x00015995
   15148:	20003280 	.word	0x20003280
   1514c:	20003282 	.word	0x20003282
   15150:	00014a05 	.word	0x00014a05

00015154 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   15154:	b510      	push	{r4, lr}
   15156:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
   15158:	4b0f      	ldr	r3, [pc, #60]	; (15198 <sd_mmc_test_unit_ready+0x44>)
   1515a:	4798      	blx	r3
   1515c:	2801      	cmp	r0, #1
   1515e:	d019      	beq.n	15194 <sd_mmc_test_unit_ready+0x40>
   15160:	2800      	cmp	r0, #0
   15162:	d003      	beq.n	1516c <sd_mmc_test_unit_ready+0x18>
   15164:	2802      	cmp	r0, #2
   15166:	d010      	beq.n	1518a <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
   15168:	2001      	movs	r0, #1
	}
}
   1516a:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
   1516c:	4b0b      	ldr	r3, [pc, #44]	; (1519c <sd_mmc_test_unit_ready+0x48>)
   1516e:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
   15170:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
   15172:	2b00      	cmp	r3, #0
   15174:	d1f9      	bne.n	1516a <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   15176:	0020      	movs	r0, r4
   15178:	4b09      	ldr	r3, [pc, #36]	; (151a0 <sd_mmc_test_unit_ready+0x4c>)
   1517a:	4798      	blx	r3
   1517c:	0003      	movs	r3, r0
   1517e:	2003      	movs	r0, #3
   15180:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
   15182:	4243      	negs	r3, r0
   15184:	4158      	adcs	r0, r3
   15186:	0040      	lsls	r0, r0, #1
   15188:	e7ef      	b.n	1516a <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
   1518a:	2200      	movs	r2, #0
   1518c:	4b03      	ldr	r3, [pc, #12]	; (1519c <sd_mmc_test_unit_ready+0x48>)
   1518e:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
   15190:	2002      	movs	r0, #2
   15192:	e7ea      	b.n	1516a <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
   15194:	2003      	movs	r0, #3
   15196:	e7e8      	b.n	1516a <sd_mmc_test_unit_ready+0x16>
   15198:	00014a41 	.word	0x00014a41
   1519c:	20003288 	.word	0x20003288
   151a0:	00014ef1 	.word	0x00014ef1

000151a4 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   151a4:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
   151a6:	2000      	movs	r0, #0
   151a8:	4b01      	ldr	r3, [pc, #4]	; (151b0 <sd_mmc_test_unit_ready_0+0xc>)
   151aa:	4798      	blx	r3
}
   151ac:	bd10      	pop	{r4, pc}
   151ae:	46c0      	nop			; (mov r8, r8)
   151b0:	00015155 	.word	0x00015155

000151b4 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   151b4:	b570      	push	{r4, r5, r6, lr}
   151b6:	0004      	movs	r4, r0
   151b8:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   151ba:	4b04      	ldr	r3, [pc, #16]	; (151cc <sd_mmc_read_capacity+0x18>)
   151bc:	4798      	blx	r3
   151be:	0040      	lsls	r0, r0, #1
   151c0:	3801      	subs	r0, #1
   151c2:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
   151c4:	0020      	movs	r0, r4
   151c6:	4b02      	ldr	r3, [pc, #8]	; (151d0 <sd_mmc_read_capacity+0x1c>)
   151c8:	4798      	blx	r3
}
   151ca:	bd70      	pop	{r4, r5, r6, pc}
   151cc:	00014f19 	.word	0x00014f19
   151d0:	00015155 	.word	0x00015155

000151d4 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   151d4:	b510      	push	{r4, lr}
   151d6:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
   151d8:	2000      	movs	r0, #0
   151da:	4b01      	ldr	r3, [pc, #4]	; (151e0 <sd_mmc_read_capacity_0+0xc>)
   151dc:	4798      	blx	r3
}
   151de:	bd10      	pop	{r4, pc}
   151e0:	000151b5 	.word	0x000151b5

000151e4 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
   151e4:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
   151e6:	2000      	movs	r0, #0
   151e8:	4b01      	ldr	r3, [pc, #4]	; (151f0 <sd_mmc_wr_protect_0+0xc>)
   151ea:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
   151ec:	bd10      	pop	{r4, pc}
   151ee:	46c0      	nop			; (mov r8, r8)
   151f0:	00014f41 	.word	0x00014f41

000151f4 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   151f4:	b510      	push	{r4, lr}
   151f6:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   151f8:	2201      	movs	r2, #1
   151fa:	4b0c      	ldr	r3, [pc, #48]	; (1522c <sd_mmc_mem_2_ram+0x38>)
   151fc:	4798      	blx	r3
   151fe:	2800      	cmp	r0, #0
   15200:	d004      	beq.n	1520c <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   15202:	3802      	subs	r0, #2
   15204:	4243      	negs	r3, r0
   15206:	4158      	adcs	r0, r3
   15208:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
   1520a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1520c:	2101      	movs	r1, #1
   1520e:	0020      	movs	r0, r4
   15210:	4b07      	ldr	r3, [pc, #28]	; (15230 <sd_mmc_mem_2_ram+0x3c>)
   15212:	4798      	blx	r3
   15214:	0003      	movs	r3, r0
		return CTRL_FAIL;
   15216:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   15218:	2b00      	cmp	r3, #0
   1521a:	d1f6      	bne.n	1520a <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1521c:	2000      	movs	r0, #0
   1521e:	4b05      	ldr	r3, [pc, #20]	; (15234 <sd_mmc_mem_2_ram+0x40>)
   15220:	4798      	blx	r3
   15222:	1e43      	subs	r3, r0, #1
   15224:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
   15226:	b2c0      	uxtb	r0, r0
   15228:	e7ef      	b.n	1520a <sd_mmc_mem_2_ram+0x16>
   1522a:	46c0      	nop			; (mov r8, r8)
   1522c:	00014f45 	.word	0x00014f45
   15230:	00014fcd 	.word	0x00014fcd
   15234:	00014ff9 	.word	0x00014ff9

00015238 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   15238:	b510      	push	{r4, lr}
   1523a:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
   1523c:	0001      	movs	r1, r0
   1523e:	2000      	movs	r0, #0
   15240:	4b01      	ldr	r3, [pc, #4]	; (15248 <sd_mmc_mem_2_ram_0+0x10>)
   15242:	4798      	blx	r3
}
   15244:	bd10      	pop	{r4, pc}
   15246:	46c0      	nop			; (mov r8, r8)
   15248:	000151f5 	.word	0x000151f5

0001524c <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1524c:	b510      	push	{r4, lr}
   1524e:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   15250:	2201      	movs	r2, #1
   15252:	4b0c      	ldr	r3, [pc, #48]	; (15284 <sd_mmc_ram_2_mem+0x38>)
   15254:	4798      	blx	r3
   15256:	2800      	cmp	r0, #0
   15258:	d004      	beq.n	15264 <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   1525a:	3802      	subs	r0, #2
   1525c:	4243      	negs	r3, r0
   1525e:	4158      	adcs	r0, r3
   15260:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
   15262:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   15264:	2101      	movs	r1, #1
   15266:	0020      	movs	r0, r4
   15268:	4b07      	ldr	r3, [pc, #28]	; (15288 <sd_mmc_ram_2_mem+0x3c>)
   1526a:	4798      	blx	r3
   1526c:	0003      	movs	r3, r0
		return CTRL_FAIL;
   1526e:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   15270:	2b00      	cmp	r3, #0
   15272:	d1f6      	bne.n	15262 <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   15274:	2000      	movs	r0, #0
   15276:	4b05      	ldr	r3, [pc, #20]	; (1528c <sd_mmc_ram_2_mem+0x40>)
   15278:	4798      	blx	r3
   1527a:	1e43      	subs	r3, r0, #1
   1527c:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
   1527e:	b2c0      	uxtb	r0, r0
   15280:	e7ef      	b.n	15262 <sd_mmc_ram_2_mem+0x16>
   15282:	46c0      	nop			; (mov r8, r8)
   15284:	00015069 	.word	0x00015069
   15288:	000150d9 	.word	0x000150d9
   1528c:	00015105 	.word	0x00015105

00015290 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   15290:	b510      	push	{r4, lr}
   15292:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
   15294:	0001      	movs	r1, r0
   15296:	2000      	movs	r0, #0
   15298:	4b01      	ldr	r3, [pc, #4]	; (152a0 <sd_mmc_ram_2_mem_0+0x10>)
   1529a:	4798      	blx	r3
}
   1529c:	bd10      	pop	{r4, pc}
   1529e:	46c0      	nop			; (mov r8, r8)
   152a0:	0001524d 	.word	0x0001524d

000152a4 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   152a4:	b500      	push	{lr}
   152a6:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
   152a8:	466b      	mov	r3, sp
   152aa:	1dd9      	adds	r1, r3, #7
   152ac:	23ff      	movs	r3, #255	; 0xff
   152ae:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   152b0:	2201      	movs	r2, #1
   152b2:	480b      	ldr	r0, [pc, #44]	; (152e0 <sd_mmc_spi_start_write_block+0x3c>)
   152b4:	4b0b      	ldr	r3, [pc, #44]	; (152e4 <sd_mmc_spi_start_write_block+0x40>)
   152b6:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   152b8:	4b0b      	ldr	r3, [pc, #44]	; (152e8 <sd_mmc_spi_start_write_block+0x44>)
   152ba:	881b      	ldrh	r3, [r3, #0]
   152bc:	2b01      	cmp	r3, #1
   152be:	d00a      	beq.n	152d6 <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   152c0:	22fc      	movs	r2, #252	; 0xfc
   152c2:	466b      	mov	r3, sp
   152c4:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   152c6:	2201      	movs	r2, #1
   152c8:	466b      	mov	r3, sp
   152ca:	1d99      	adds	r1, r3, #6
   152cc:	4804      	ldr	r0, [pc, #16]	; (152e0 <sd_mmc_spi_start_write_block+0x3c>)
   152ce:	4b05      	ldr	r3, [pc, #20]	; (152e4 <sd_mmc_spi_start_write_block+0x40>)
   152d0:	4798      	blx	r3
}
   152d2:	b003      	add	sp, #12
   152d4:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
   152d6:	22fe      	movs	r2, #254	; 0xfe
   152d8:	466b      	mov	r3, sp
   152da:	719a      	strb	r2, [r3, #6]
   152dc:	e7f3      	b.n	152c6 <sd_mmc_spi_start_write_block+0x22>
   152de:	46c0      	nop			; (mov r8, r8)
   152e0:	2000328c 	.word	0x2000328c
   152e4:	00019bcd 	.word	0x00019bcd
   152e8:	200032d0 	.word	0x200032d0

000152ec <sd_mmc_spi_wait_busy>:
{
   152ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   152ee:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
   152f0:	466b      	mov	r3, sp
   152f2:	1ddc      	adds	r4, r3, #7
   152f4:	23ff      	movs	r3, #255	; 0xff
   152f6:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   152f8:	4e12      	ldr	r6, [pc, #72]	; (15344 <sd_mmc_spi_wait_busy+0x58>)
   152fa:	2201      	movs	r2, #1
   152fc:	0021      	movs	r1, r4
   152fe:	0030      	movs	r0, r6
   15300:	4d11      	ldr	r5, [pc, #68]	; (15348 <sd_mmc_spi_wait_busy+0x5c>)
   15302:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   15304:	23ff      	movs	r3, #255	; 0xff
   15306:	2201      	movs	r2, #1
   15308:	0021      	movs	r1, r4
   1530a:	0030      	movs	r0, r6
   1530c:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1530e:	23ff      	movs	r3, #255	; 0xff
   15310:	2201      	movs	r2, #1
   15312:	0021      	movs	r1, r4
   15314:	0030      	movs	r0, r6
   15316:	47a8      	blx	r5
   15318:	4c0c      	ldr	r4, [pc, #48]	; (1534c <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
   1531a:	466b      	mov	r3, sp
   1531c:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1531e:	4e09      	ldr	r6, [pc, #36]	; (15344 <sd_mmc_spi_wait_busy+0x58>)
   15320:	4f09      	ldr	r7, [pc, #36]	; (15348 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
   15322:	782b      	ldrb	r3, [r5, #0]
   15324:	2bff      	cmp	r3, #255	; 0xff
   15326:	d009      	beq.n	1533c <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   15328:	23ff      	movs	r3, #255	; 0xff
   1532a:	2201      	movs	r2, #1
   1532c:	0029      	movs	r1, r5
   1532e:	0030      	movs	r0, r6
   15330:	47b8      	blx	r7
   15332:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
   15334:	2c00      	cmp	r4, #0
   15336:	d1f4      	bne.n	15322 <sd_mmc_spi_wait_busy+0x36>
			return false;
   15338:	2000      	movs	r0, #0
   1533a:	e000      	b.n	1533e <sd_mmc_spi_wait_busy+0x52>
	return true;
   1533c:	2001      	movs	r0, #1
}
   1533e:	b003      	add	sp, #12
   15340:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15342:	46c0      	nop			; (mov r8, r8)
   15344:	2000328c 	.word	0x2000328c
   15348:	00019a05 	.word	0x00019a05
   1534c:	00030d40 	.word	0x00030d40

00015350 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   15350:	b570      	push	{r4, r5, r6, lr}
   15352:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   15354:	4b14      	ldr	r3, [pc, #80]	; (153a8 <sd_mmc_spi_stop_multiwrite_block+0x58>)
   15356:	881c      	ldrh	r4, [r3, #0]
   15358:	2c01      	cmp	r4, #1
   1535a:	d023      	beq.n	153a4 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1535c:	4b13      	ldr	r3, [pc, #76]	; (153ac <sd_mmc_spi_stop_multiwrite_block+0x5c>)
   1535e:	8819      	ldrh	r1, [r3, #0]
   15360:	4b13      	ldr	r3, [pc, #76]	; (153b0 <sd_mmc_spi_stop_multiwrite_block+0x60>)
   15362:	6818      	ldr	r0, [r3, #0]
   15364:	4b13      	ldr	r3, [pc, #76]	; (153b4 <sd_mmc_spi_stop_multiwrite_block+0x64>)
   15366:	4798      	blx	r3
		return true; // It is not the End of multi write
   15368:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
   1536a:	4284      	cmp	r4, r0
   1536c:	d902      	bls.n	15374 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
   1536e:	0018      	movs	r0, r3
   15370:	b002      	add	sp, #8
   15372:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
   15374:	466b      	mov	r3, sp
   15376:	1ddc      	adds	r4, r3, #7
   15378:	23ff      	movs	r3, #255	; 0xff
   1537a:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1537c:	4e0e      	ldr	r6, [pc, #56]	; (153b8 <sd_mmc_spi_stop_multiwrite_block+0x68>)
   1537e:	2201      	movs	r2, #1
   15380:	0021      	movs	r1, r4
   15382:	0030      	movs	r0, r6
   15384:	4d0d      	ldr	r5, [pc, #52]	; (153bc <sd_mmc_spi_stop_multiwrite_block+0x6c>)
   15386:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
   15388:	23fd      	movs	r3, #253	; 0xfd
   1538a:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1538c:	2201      	movs	r2, #1
   1538e:	0021      	movs	r1, r4
   15390:	0030      	movs	r0, r6
   15392:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
   15394:	4b0a      	ldr	r3, [pc, #40]	; (153c0 <sd_mmc_spi_stop_multiwrite_block+0x70>)
   15396:	4798      	blx	r3
   15398:	1e03      	subs	r3, r0, #0
   1539a:	d1e8      	bne.n	1536e <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1539c:	2105      	movs	r1, #5
   1539e:	4a09      	ldr	r2, [pc, #36]	; (153c4 <sd_mmc_spi_stop_multiwrite_block+0x74>)
   153a0:	7011      	strb	r1, [r2, #0]
		return false;
   153a2:	e7e4      	b.n	1536e <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
   153a4:	2301      	movs	r3, #1
   153a6:	e7e2      	b.n	1536e <sd_mmc_spi_stop_multiwrite_block+0x1e>
   153a8:	200032d0 	.word	0x200032d0
   153ac:	200032c8 	.word	0x200032c8
   153b0:	200032d8 	.word	0x200032d8
   153b4:	0001f829 	.word	0x0001f829
   153b8:	2000328c 	.word	0x2000328c
   153bc:	00019bcd 	.word	0x00019bcd
   153c0:	000152ed 	.word	0x000152ed
   153c4:	200032cf 	.word	0x200032cf

000153c8 <sd_mmc_spi_start_read_block>:
{
   153c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   153ca:	b083      	sub	sp, #12
	token = 0;
   153cc:	2200      	movs	r2, #0
   153ce:	466b      	mov	r3, sp
   153d0:	71da      	strb	r2, [r3, #7]
   153d2:	4c14      	ldr	r4, [pc, #80]	; (15424 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   153d4:	466b      	mov	r3, sp
   153d6:	1ddd      	adds	r5, r3, #7
   153d8:	4e13      	ldr	r6, [pc, #76]	; (15428 <sd_mmc_spi_start_read_block+0x60>)
   153da:	4f14      	ldr	r7, [pc, #80]	; (1542c <sd_mmc_spi_start_read_block+0x64>)
   153dc:	23ff      	movs	r3, #255	; 0xff
   153de:	2201      	movs	r2, #1
   153e0:	0029      	movs	r1, r5
   153e2:	0030      	movs	r0, r6
   153e4:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   153e6:	782b      	ldrb	r3, [r5, #0]
   153e8:	220f      	movs	r2, #15
   153ea:	0019      	movs	r1, r3
   153ec:	4391      	bics	r1, r2
   153ee:	1e0a      	subs	r2, r1, #0
   153f0:	d009      	beq.n	15406 <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   153f2:	2bfe      	cmp	r3, #254	; 0xfe
   153f4:	d013      	beq.n	1541e <sd_mmc_spi_start_read_block+0x56>
   153f6:	3c01      	subs	r4, #1
		if (i-- == 0) {
   153f8:	2c00      	cmp	r4, #0
   153fa:	d1ef      	bne.n	153dc <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   153fc:	2204      	movs	r2, #4
   153fe:	4b0c      	ldr	r3, [pc, #48]	; (15430 <sd_mmc_spi_start_read_block+0x68>)
   15400:	701a      	strb	r2, [r3, #0]
			return false;
   15402:	2000      	movs	r0, #0
   15404:	e00c      	b.n	15420 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   15406:	075b      	lsls	r3, r3, #29
   15408:	d004      	beq.n	15414 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1540a:	3207      	adds	r2, #7
   1540c:	4b08      	ldr	r3, [pc, #32]	; (15430 <sd_mmc_spi_start_read_block+0x68>)
   1540e:	701a      	strb	r2, [r3, #0]
			return false;
   15410:	2000      	movs	r0, #0
   15412:	e005      	b.n	15420 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   15414:	220b      	movs	r2, #11
   15416:	4b06      	ldr	r3, [pc, #24]	; (15430 <sd_mmc_spi_start_read_block+0x68>)
   15418:	701a      	strb	r2, [r3, #0]
			return false;
   1541a:	2000      	movs	r0, #0
   1541c:	e000      	b.n	15420 <sd_mmc_spi_start_read_block+0x58>
	return true;
   1541e:	2001      	movs	r0, #1
}
   15420:	b003      	add	sp, #12
   15422:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15424:	0007a120 	.word	0x0007a120
   15428:	2000328c 	.word	0x2000328c
   1542c:	00019a05 	.word	0x00019a05
   15430:	200032cf 	.word	0x200032cf

00015434 <sd_mmc_spi_stop_write_block>:
{
   15434:	b530      	push	{r4, r5, lr}
   15436:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   15438:	a901      	add	r1, sp, #4
   1543a:	2301      	movs	r3, #1
   1543c:	425b      	negs	r3, r3
   1543e:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   15440:	4d14      	ldr	r5, [pc, #80]	; (15494 <sd_mmc_spi_stop_write_block+0x60>)
   15442:	2202      	movs	r2, #2
   15444:	0028      	movs	r0, r5
   15446:	4b14      	ldr	r3, [pc, #80]	; (15498 <sd_mmc_spi_stop_write_block+0x64>)
   15448:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1544a:	466b      	mov	r3, sp
   1544c:	1ddc      	adds	r4, r3, #7
   1544e:	23ff      	movs	r3, #255	; 0xff
   15450:	2201      	movs	r2, #1
   15452:	0021      	movs	r1, r4
   15454:	0028      	movs	r0, r5
   15456:	4d11      	ldr	r5, [pc, #68]	; (1549c <sd_mmc_spi_stop_write_block+0x68>)
   15458:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1545a:	7822      	ldrb	r2, [r4, #0]
   1545c:	2311      	movs	r3, #17
   1545e:	4013      	ands	r3, r2
   15460:	2b01      	cmp	r3, #1
   15462:	d005      	beq.n	15470 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   15464:	2201      	movs	r2, #1
   15466:	4b0e      	ldr	r3, [pc, #56]	; (154a0 <sd_mmc_spi_stop_write_block+0x6c>)
   15468:	701a      	strb	r2, [r3, #0]
		return false;
   1546a:	2000      	movs	r0, #0
}
   1546c:	b003      	add	sp, #12
   1546e:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   15470:	231e      	movs	r3, #30
   15472:	401a      	ands	r2, r3
   15474:	2a04      	cmp	r2, #4
   15476:	d00b      	beq.n	15490 <sd_mmc_spi_stop_write_block+0x5c>
   15478:	2a0a      	cmp	r2, #10
   1547a:	d104      	bne.n	15486 <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1547c:	3a02      	subs	r2, #2
   1547e:	4b08      	ldr	r3, [pc, #32]	; (154a0 <sd_mmc_spi_stop_write_block+0x6c>)
   15480:	701a      	strb	r2, [r3, #0]
		return false;
   15482:	2000      	movs	r0, #0
   15484:	e7f2      	b.n	1546c <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   15486:	220a      	movs	r2, #10
   15488:	4b05      	ldr	r3, [pc, #20]	; (154a0 <sd_mmc_spi_stop_write_block+0x6c>)
   1548a:	701a      	strb	r2, [r3, #0]
		return false;
   1548c:	2000      	movs	r0, #0
   1548e:	e7ed      	b.n	1546c <sd_mmc_spi_stop_write_block+0x38>
	return true;
   15490:	2001      	movs	r0, #1
   15492:	e7eb      	b.n	1546c <sd_mmc_spi_stop_write_block+0x38>
   15494:	2000328c 	.word	0x2000328c
   15498:	00019bcd 	.word	0x00019bcd
   1549c:	00019a05 	.word	0x00019a05
   154a0:	200032cf 	.word	0x200032cf

000154a4 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   154a4:	b570      	push	{r4, r5, r6, lr}
   154a6:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   154a8:	2300      	movs	r3, #0
   154aa:	4a2d      	ldr	r2, [pc, #180]	; (15560 <sd_mmc_spi_init+0xbc>)
   154ac:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   154ae:	ac02      	add	r4, sp, #8
   154b0:	2501      	movs	r5, #1
   154b2:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   154b4:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   154b6:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   154b8:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
   154ba:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
   154bc:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   154be:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   154c0:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   154c2:	2224      	movs	r2, #36	; 0x24
   154c4:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   154c6:	3a18      	subs	r2, #24
   154c8:	2100      	movs	r1, #0
   154ca:	a808      	add	r0, sp, #32
   154cc:	4b25      	ldr	r3, [pc, #148]	; (15564 <sd_mmc_spi_init+0xc0>)
   154ce:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   154d0:	2380      	movs	r3, #128	; 0x80
   154d2:	025b      	lsls	r3, r3, #9
   154d4:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   154d6:	4b24      	ldr	r3, [pc, #144]	; (15568 <sd_mmc_spi_init+0xc4>)
   154d8:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   154da:	4b24      	ldr	r3, [pc, #144]	; (1556c <sd_mmc_spi_init+0xc8>)
   154dc:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   154de:	4b24      	ldr	r3, [pc, #144]	; (15570 <sd_mmc_spi_init+0xcc>)
   154e0:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   154e2:	4b24      	ldr	r3, [pc, #144]	; (15574 <sd_mmc_spi_init+0xd0>)
   154e4:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   154e6:	4b24      	ldr	r3, [pc, #144]	; (15578 <sd_mmc_spi_init+0xd4>)
   154e8:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   154ea:	4e24      	ldr	r6, [pc, #144]	; (1557c <sd_mmc_spi_init+0xd8>)
   154ec:	0022      	movs	r2, r4
   154ee:	4924      	ldr	r1, [pc, #144]	; (15580 <sd_mmc_spi_init+0xdc>)
   154f0:	0030      	movs	r0, r6
   154f2:	4b24      	ldr	r3, [pc, #144]	; (15584 <sd_mmc_spi_init+0xe0>)
   154f4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   154f6:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   154f8:	0020      	movs	r0, r4
   154fa:	4b23      	ldr	r3, [pc, #140]	; (15588 <sd_mmc_spi_init+0xe4>)
   154fc:	4798      	blx	r3
   154fe:	231f      	movs	r3, #31
   15500:	4018      	ands	r0, r3
   15502:	4085      	lsls	r5, r0
   15504:	4b21      	ldr	r3, [pc, #132]	; (1558c <sd_mmc_spi_init+0xe8>)
   15506:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   15508:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
   1550a:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
   1550c:	2b00      	cmp	r3, #0
   1550e:	d1fc      	bne.n	1550a <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   15510:	6823      	ldr	r3, [r4, #0]
   15512:	2202      	movs	r2, #2
   15514:	4313      	orrs	r3, r2
   15516:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
   15518:	4a1d      	ldr	r2, [pc, #116]	; (15590 <sd_mmc_spi_init+0xec>)
   1551a:	2300      	movs	r3, #0
   1551c:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
   1551e:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
   15520:	491c      	ldr	r1, [pc, #112]	; (15594 <sd_mmc_spi_init+0xf0>)
   15522:	7808      	ldrb	r0, [r1, #0]
   15524:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
   15526:	4c1c      	ldr	r4, [pc, #112]	; (15598 <sd_mmc_spi_init+0xf4>)
   15528:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
   1552a:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
   1552c:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   1552e:	a901      	add	r1, sp, #4
   15530:	2201      	movs	r2, #1
   15532:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
   15534:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   15536:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   15538:	4b18      	ldr	r3, [pc, #96]	; (1559c <sd_mmc_spi_init+0xf8>)
   1553a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1553c:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
   1553e:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
   15540:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   15542:	2900      	cmp	r1, #0
   15544:	d104      	bne.n	15550 <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
   15546:	0953      	lsrs	r3, r2, #5
   15548:	01db      	lsls	r3, r3, #7
   1554a:	4915      	ldr	r1, [pc, #84]	; (155a0 <sd_mmc_spi_init+0xfc>)
   1554c:	468c      	mov	ip, r1
   1554e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   15550:	211f      	movs	r1, #31
   15552:	4011      	ands	r1, r2
   15554:	2201      	movs	r2, #1
   15556:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   15558:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
   1555a:	b010      	add	sp, #64	; 0x40
   1555c:	bd70      	pop	{r4, r5, r6, pc}
   1555e:	46c0      	nop			; (mov r8, r8)
   15560:	200032cf 	.word	0x200032cf
   15564:	0001fc1b 	.word	0x0001fc1b
   15568:	00100002 	.word	0x00100002
   1556c:	00110002 	.word	0x00110002
   15570:	00120002 	.word	0x00120002
   15574:	00130002 	.word	0x00130002
   15578:	00061a80 	.word	0x00061a80
   1557c:	2000328c 	.word	0x2000328c
   15580:	42000c00 	.word	0x42000c00
   15584:	0001982d 	.word	0x0001982d
   15588:	000196e5 	.word	0x000196e5
   1558c:	e000e100 	.word	0xe000e100
   15590:	200032dc 	.word	0x200032dc
   15594:	20000094 	.word	0x20000094
   15598:	200032cc 	.word	0x200032cc
   1559c:	000190d1 	.word	0x000190d1
   155a0:	41004400 	.word	0x41004400

000155a4 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   155a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   155a6:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   155a8:	2200      	movs	r2, #0
   155aa:	4b0d      	ldr	r3, [pc, #52]	; (155e0 <sd_mmc_spi_select_device+0x3c>)
   155ac:	701a      	strb	r2, [r3, #0]
   155ae:	000c      	movs	r4, r1
   155b0:	4b0c      	ldr	r3, [pc, #48]	; (155e4 <sd_mmc_spi_select_device+0x40>)
   155b2:	4299      	cmp	r1, r3
   155b4:	d900      	bls.n	155b8 <sd_mmc_spi_select_device+0x14>
   155b6:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   155b8:	4d0b      	ldr	r5, [pc, #44]	; (155e8 <sd_mmc_spi_select_device+0x44>)
   155ba:	4e0c      	ldr	r6, [pc, #48]	; (155ec <sd_mmc_spi_select_device+0x48>)
   155bc:	e001      	b.n	155c2 <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
   155be:	08e3      	lsrs	r3, r4, #3
   155c0:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   155c2:	0021      	movs	r1, r4
   155c4:	0028      	movs	r0, r5
   155c6:	47b0      	blx	r6
   155c8:	2817      	cmp	r0, #23
   155ca:	d0f8      	beq.n	155be <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   155cc:	0079      	lsls	r1, r7, #1
   155ce:	19cf      	adds	r7, r1, r7
   155d0:	4907      	ldr	r1, [pc, #28]	; (155f0 <sd_mmc_spi_select_device+0x4c>)
   155d2:	19c9      	adds	r1, r1, r7
   155d4:	2201      	movs	r2, #1
   155d6:	4804      	ldr	r0, [pc, #16]	; (155e8 <sd_mmc_spi_select_device+0x44>)
   155d8:	4b06      	ldr	r3, [pc, #24]	; (155f4 <sd_mmc_spi_select_device+0x50>)
   155da:	4798      	blx	r3
}
   155dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   155de:	46c0      	nop			; (mov r8, r8)
   155e0:	200032cf 	.word	0x200032cf
   155e4:	00989680 	.word	0x00989680
   155e8:	2000328c 	.word	0x2000328c
   155ec:	00019775 	.word	0x00019775
   155f0:	200032cc 	.word	0x200032cc
   155f4:	00019ad9 	.word	0x00019ad9

000155f8 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   155f8:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   155fa:	2200      	movs	r2, #0
   155fc:	4b04      	ldr	r3, [pc, #16]	; (15610 <sd_mmc_spi_deselect_device+0x18>)
   155fe:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   15600:	0041      	lsls	r1, r0, #1
   15602:	1808      	adds	r0, r1, r0
   15604:	4903      	ldr	r1, [pc, #12]	; (15614 <sd_mmc_spi_deselect_device+0x1c>)
   15606:	1809      	adds	r1, r1, r0
   15608:	4803      	ldr	r0, [pc, #12]	; (15618 <sd_mmc_spi_deselect_device+0x20>)
   1560a:	4b04      	ldr	r3, [pc, #16]	; (1561c <sd_mmc_spi_deselect_device+0x24>)
   1560c:	4798      	blx	r3
}
   1560e:	bd10      	pop	{r4, pc}
   15610:	200032cf 	.word	0x200032cf
   15614:	200032cc 	.word	0x200032cc
   15618:	2000328c 	.word	0x2000328c
   1561c:	00019ad9 	.word	0x00019ad9

00015620 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   15620:	b570      	push	{r4, r5, r6, lr}
   15622:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
   15624:	22ff      	movs	r2, #255	; 0xff
   15626:	466b      	mov	r3, sp
   15628:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1562a:	2200      	movs	r2, #0
   1562c:	4b07      	ldr	r3, [pc, #28]	; (1564c <sd_mmc_spi_send_clock+0x2c>)
   1562e:	701a      	strb	r2, [r3, #0]
   15630:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   15632:	4e07      	ldr	r6, [pc, #28]	; (15650 <sd_mmc_spi_send_clock+0x30>)
   15634:	4d07      	ldr	r5, [pc, #28]	; (15654 <sd_mmc_spi_send_clock+0x34>)
   15636:	2201      	movs	r2, #1
   15638:	466b      	mov	r3, sp
   1563a:	1dd9      	adds	r1, r3, #7
   1563c:	0030      	movs	r0, r6
   1563e:	47a8      	blx	r5
   15640:	3c01      	subs	r4, #1
   15642:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
   15644:	2c00      	cmp	r4, #0
   15646:	d1f6      	bne.n	15636 <sd_mmc_spi_send_clock+0x16>
	}
}
   15648:	b002      	add	sp, #8
   1564a:	bd70      	pop	{r4, r5, r6, pc}
   1564c:	200032cf 	.word	0x200032cf
   15650:	2000328c 	.word	0x2000328c
   15654:	00019bcd 	.word	0x00019bcd

00015658 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   15658:	b5f0      	push	{r4, r5, r6, r7, lr}
   1565a:	46c6      	mov	lr, r8
   1565c:	b500      	push	{lr}
   1565e:	b086      	sub	sp, #24
   15660:	4680      	mov	r8, r0
   15662:	9200      	str	r2, [sp, #0]
   15664:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
   15666:	22ff      	movs	r2, #255	; 0xff
   15668:	230f      	movs	r3, #15
   1566a:	a802      	add	r0, sp, #8
   1566c:	4684      	mov	ip, r0
   1566e:	4463      	add	r3, ip
   15670:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   15672:	2200      	movs	r2, #0
   15674:	4b53      	ldr	r3, [pc, #332]	; (157c4 <sd_mmc_spi_adtc_start+0x16c>)
   15676:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   15678:	ab04      	add	r3, sp, #16
   1567a:	323f      	adds	r2, #63	; 0x3f
   1567c:	4640      	mov	r0, r8
   1567e:	4002      	ands	r2, r0
   15680:	2040      	movs	r0, #64	; 0x40
   15682:	4302      	orrs	r2, r0
   15684:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   15686:	0e0a      	lsrs	r2, r1, #24
   15688:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   1568a:	0c0a      	lsrs	r2, r1, #16
   1568c:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   1568e:	0a0a      	lsrs	r2, r1, #8
   15690:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   15692:	7119      	strb	r1, [r3, #4]
   15694:	2700      	movs	r7, #0
	crc = 0;
   15696:	2300      	movs	r3, #0
		value = *buf++;
   15698:	a904      	add	r1, sp, #16
   1569a:	2208      	movs	r2, #8
				crc ^= 0x09;
   1569c:	2409      	movs	r4, #9
   1569e:	e011      	b.n	156c4 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
   156a0:	0076      	lsls	r6, r6, #1
   156a2:	b2f6      	uxtb	r6, r6
   156a4:	3801      	subs	r0, #1
   156a6:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
   156a8:	2800      	cmp	r0, #0
   156aa:	d008      	beq.n	156be <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
   156ac:	005b      	lsls	r3, r3, #1
   156ae:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
   156b0:	001d      	movs	r5, r3
   156b2:	4075      	eors	r5, r6
   156b4:	062d      	lsls	r5, r5, #24
   156b6:	d5f3      	bpl.n	156a0 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
   156b8:	4063      	eors	r3, r4
   156ba:	b2db      	uxtb	r3, r3
   156bc:	e7f0      	b.n	156a0 <sd_mmc_spi_adtc_start+0x48>
   156be:	3701      	adds	r7, #1
	while (size--) {
   156c0:	2f05      	cmp	r7, #5
   156c2:	d002      	beq.n	156ca <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
   156c4:	5c7e      	ldrb	r6, [r7, r1]
   156c6:	0010      	movs	r0, r2
   156c8:	e7f0      	b.n	156ac <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
   156ca:	005b      	lsls	r3, r3, #1
   156cc:	2201      	movs	r2, #1
   156ce:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   156d0:	ac04      	add	r4, sp, #16
   156d2:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   156d4:	4e3c      	ldr	r6, [pc, #240]	; (157c8 <sd_mmc_spi_adtc_start+0x170>)
   156d6:	2201      	movs	r2, #1
   156d8:	210f      	movs	r1, #15
   156da:	ab02      	add	r3, sp, #8
   156dc:	469c      	mov	ip, r3
   156de:	4461      	add	r1, ip
   156e0:	0030      	movs	r0, r6
   156e2:	4f3a      	ldr	r7, [pc, #232]	; (157cc <sd_mmc_spi_adtc_start+0x174>)
   156e4:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   156e6:	2206      	movs	r2, #6
   156e8:	0021      	movs	r1, r4
   156ea:	0030      	movs	r0, r6
   156ec:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   156ee:	ab02      	add	r3, sp, #8
   156f0:	1dd9      	adds	r1, r3, #7
   156f2:	23ff      	movs	r3, #255	; 0xff
   156f4:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   156f6:	2201      	movs	r2, #1
   156f8:	0030      	movs	r0, r6
   156fa:	4e35      	ldr	r6, [pc, #212]	; (157d0 <sd_mmc_spi_adtc_start+0x178>)
   156fc:	47b0      	blx	r6
   156fe:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   15700:	ab02      	add	r3, sp, #8
   15702:	1dde      	adds	r6, r3, #7
   15704:	4f30      	ldr	r7, [pc, #192]	; (157c8 <sd_mmc_spi_adtc_start+0x170>)
   15706:	4d32      	ldr	r5, [pc, #200]	; (157d0 <sd_mmc_spi_adtc_start+0x178>)
   15708:	23ff      	movs	r3, #255	; 0xff
   1570a:	2201      	movs	r2, #1
   1570c:	0031      	movs	r1, r6
   1570e:	0038      	movs	r0, r7
   15710:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   15712:	7833      	ldrb	r3, [r6, #0]
   15714:	b25a      	sxtb	r2, r3
   15716:	2a00      	cmp	r2, #0
   15718:	da0b      	bge.n	15732 <sd_mmc_spi_adtc_start+0xda>
   1571a:	3c01      	subs	r4, #1
   1571c:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   1571e:	2c00      	cmp	r4, #0
   15720:	d1f2      	bne.n	15708 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   15722:	2202      	movs	r2, #2
   15724:	4b27      	ldr	r3, [pc, #156]	; (157c4 <sd_mmc_spi_adtc_start+0x16c>)
   15726:	701a      	strb	r2, [r3, #0]
			return false;
   15728:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
   1572a:	b006      	add	sp, #24
   1572c:	bc04      	pop	{r2}
   1572e:	4690      	mov	r8, r2
   15730:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
   15732:	4a28      	ldr	r2, [pc, #160]	; (157d4 <sd_mmc_spi_adtc_start+0x17c>)
   15734:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
   15736:	071a      	lsls	r2, r3, #28
   15738:	d41a      	bmi.n	15770 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   1573a:	075a      	lsls	r2, r3, #29
   1573c:	d41d      	bmi.n	1577a <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
   1573e:	2201      	movs	r2, #1
   15740:	4393      	bics	r3, r2
   15742:	d11f      	bne.n	15784 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
   15744:	4643      	mov	r3, r8
   15746:	049b      	lsls	r3, r3, #18
   15748:	d420      	bmi.n	1578c <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
   1574a:	4643      	mov	r3, r8
   1574c:	059b      	lsls	r3, r3, #22
   1574e:	d425      	bmi.n	1579c <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
   15750:	4643      	mov	r3, r8
   15752:	055b      	lsls	r3, r3, #21
   15754:	d42b      	bmi.n	157ae <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
   15756:	4b20      	ldr	r3, [pc, #128]	; (157d8 <sd_mmc_spi_adtc_start+0x180>)
   15758:	466a      	mov	r2, sp
   1575a:	8812      	ldrh	r2, [r2, #0]
   1575c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   1575e:	4b1f      	ldr	r3, [pc, #124]	; (157dc <sd_mmc_spi_adtc_start+0x184>)
   15760:	466a      	mov	r2, sp
   15762:	8892      	ldrh	r2, [r2, #4]
   15764:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   15766:	2200      	movs	r2, #0
   15768:	4b1d      	ldr	r3, [pc, #116]	; (157e0 <sd_mmc_spi_adtc_start+0x188>)
   1576a:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   1576c:	2001      	movs	r0, #1
   1576e:	e7dc      	b.n	1572a <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   15770:	2206      	movs	r2, #6
   15772:	4b14      	ldr	r3, [pc, #80]	; (157c4 <sd_mmc_spi_adtc_start+0x16c>)
   15774:	701a      	strb	r2, [r3, #0]
		return false;
   15776:	2000      	movs	r0, #0
   15778:	e7d7      	b.n	1572a <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   1577a:	2209      	movs	r2, #9
   1577c:	4b11      	ldr	r3, [pc, #68]	; (157c4 <sd_mmc_spi_adtc_start+0x16c>)
   1577e:	701a      	strb	r2, [r3, #0]
		return false;
   15780:	2000      	movs	r0, #0
   15782:	e7d2      	b.n	1572a <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   15784:	4b0f      	ldr	r3, [pc, #60]	; (157c4 <sd_mmc_spi_adtc_start+0x16c>)
   15786:	701a      	strb	r2, [r3, #0]
		return false;
   15788:	2000      	movs	r0, #0
   1578a:	e7ce      	b.n	1572a <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
   1578c:	4b15      	ldr	r3, [pc, #84]	; (157e4 <sd_mmc_spi_adtc_start+0x18c>)
   1578e:	4798      	blx	r3
   15790:	2800      	cmp	r0, #0
   15792:	d1da      	bne.n	1574a <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   15794:	2203      	movs	r2, #3
   15796:	4b0b      	ldr	r3, [pc, #44]	; (157c4 <sd_mmc_spi_adtc_start+0x16c>)
   15798:	701a      	strb	r2, [r3, #0]
			return false;
   1579a:	e7c6      	b.n	1572a <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
   1579c:	490d      	ldr	r1, [pc, #52]	; (157d4 <sd_mmc_spi_adtc_start+0x17c>)
   1579e:	2300      	movs	r3, #0
   157a0:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   157a2:	33ff      	adds	r3, #255	; 0xff
   157a4:	2201      	movs	r2, #1
   157a6:	4808      	ldr	r0, [pc, #32]	; (157c8 <sd_mmc_spi_adtc_start+0x170>)
   157a8:	4e09      	ldr	r6, [pc, #36]	; (157d0 <sd_mmc_spi_adtc_start+0x178>)
   157aa:	47b0      	blx	r6
   157ac:	e7d0      	b.n	15750 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   157ae:	4e09      	ldr	r6, [pc, #36]	; (157d4 <sd_mmc_spi_adtc_start+0x17c>)
   157b0:	23ff      	movs	r3, #255	; 0xff
   157b2:	2204      	movs	r2, #4
   157b4:	0031      	movs	r1, r6
   157b6:	4804      	ldr	r0, [pc, #16]	; (157c8 <sd_mmc_spi_adtc_start+0x170>)
   157b8:	4f05      	ldr	r7, [pc, #20]	; (157d0 <sd_mmc_spi_adtc_start+0x178>)
   157ba:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   157bc:	6833      	ldr	r3, [r6, #0]
   157be:	ba1b      	rev	r3, r3
   157c0:	6033      	str	r3, [r6, #0]
   157c2:	e7c8      	b.n	15756 <sd_mmc_spi_adtc_start+0xfe>
   157c4:	200032cf 	.word	0x200032cf
   157c8:	2000328c 	.word	0x2000328c
   157cc:	00019bcd 	.word	0x00019bcd
   157d0:	00019a05 	.word	0x00019a05
   157d4:	200032d4 	.word	0x200032d4
   157d8:	200032c8 	.word	0x200032c8
   157dc:	200032d0 	.word	0x200032d0
   157e0:	200032d8 	.word	0x200032d8
   157e4:	000152ed 	.word	0x000152ed

000157e8 <sd_mmc_spi_send_cmd>:
{
   157e8:	b510      	push	{r4, lr}
   157ea:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   157ec:	2300      	movs	r3, #0
   157ee:	9300      	str	r3, [sp, #0]
   157f0:	2200      	movs	r2, #0
   157f2:	4c02      	ldr	r4, [pc, #8]	; (157fc <sd_mmc_spi_send_cmd+0x14>)
   157f4:	47a0      	blx	r4
}
   157f6:	b002      	add	sp, #8
   157f8:	bd10      	pop	{r4, pc}
   157fa:	46c0      	nop			; (mov r8, r8)
   157fc:	00015659 	.word	0x00015659

00015800 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
   15800:	4b01      	ldr	r3, [pc, #4]	; (15808 <sd_mmc_spi_get_response+0x8>)
   15802:	6818      	ldr	r0, [r3, #0]
}
   15804:	4770      	bx	lr
   15806:	46c0      	nop			; (mov r8, r8)
   15808:	200032d4 	.word	0x200032d4

0001580c <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   1580c:	b510      	push	{r4, lr}
   1580e:	b084      	sub	sp, #16
   15810:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   15812:	2200      	movs	r2, #0
   15814:	4b14      	ldr	r3, [pc, #80]	; (15868 <sd_mmc_spi_read_word+0x5c>)
   15816:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   15818:	4b14      	ldr	r3, [pc, #80]	; (1586c <sd_mmc_spi_read_word+0x60>)
   1581a:	8819      	ldrh	r1, [r3, #0]
   1581c:	4b14      	ldr	r3, [pc, #80]	; (15870 <sd_mmc_spi_read_word+0x64>)
   1581e:	6818      	ldr	r0, [r3, #0]
   15820:	4b14      	ldr	r3, [pc, #80]	; (15874 <sd_mmc_spi_read_word+0x68>)
   15822:	4798      	blx	r3
   15824:	2900      	cmp	r1, #0
   15826:	d103      	bne.n	15830 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   15828:	4b13      	ldr	r3, [pc, #76]	; (15878 <sd_mmc_spi_read_word+0x6c>)
   1582a:	4798      	blx	r3
   1582c:	2800      	cmp	r0, #0
   1582e:	d010      	beq.n	15852 <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   15830:	23ff      	movs	r3, #255	; 0xff
   15832:	2204      	movs	r2, #4
   15834:	a901      	add	r1, sp, #4
   15836:	4811      	ldr	r0, [pc, #68]	; (1587c <sd_mmc_spi_read_word+0x70>)
   15838:	4c11      	ldr	r4, [pc, #68]	; (15880 <sd_mmc_spi_read_word+0x74>)
   1583a:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
   1583c:	4b0c      	ldr	r3, [pc, #48]	; (15870 <sd_mmc_spi_read_word+0x64>)
   1583e:	681a      	ldr	r2, [r3, #0]
   15840:	1d10      	adds	r0, r2, #4
   15842:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   15844:	4b09      	ldr	r3, [pc, #36]	; (1586c <sd_mmc_spi_read_word+0x60>)
   15846:	8819      	ldrh	r1, [r3, #0]
   15848:	4b0a      	ldr	r3, [pc, #40]	; (15874 <sd_mmc_spi_read_word+0x68>)
   1584a:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
   1584c:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1584e:	2900      	cmp	r1, #0
   15850:	d001      	beq.n	15856 <sd_mmc_spi_read_word+0x4a>
}
   15852:	b004      	add	sp, #16
   15854:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   15856:	23ff      	movs	r3, #255	; 0xff
   15858:	2202      	movs	r2, #2
   1585a:	a903      	add	r1, sp, #12
   1585c:	4807      	ldr	r0, [pc, #28]	; (1587c <sd_mmc_spi_read_word+0x70>)
   1585e:	4c08      	ldr	r4, [pc, #32]	; (15880 <sd_mmc_spi_read_word+0x74>)
   15860:	47a0      	blx	r4
	return true;
   15862:	2001      	movs	r0, #1
   15864:	e7f5      	b.n	15852 <sd_mmc_spi_read_word+0x46>
   15866:	46c0      	nop			; (mov r8, r8)
   15868:	200032cf 	.word	0x200032cf
   1586c:	200032c8 	.word	0x200032c8
   15870:	200032d8 	.word	0x200032d8
   15874:	0001f935 	.word	0x0001f935
   15878:	000153c9 	.word	0x000153c9
   1587c:	2000328c 	.word	0x2000328c
   15880:	00019a05 	.word	0x00019a05

00015884 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   15884:	b5f0      	push	{r4, r5, r6, r7, lr}
   15886:	46de      	mov	lr, fp
   15888:	4657      	mov	r7, sl
   1588a:	4646      	mov	r6, r8
   1588c:	b5c0      	push	{r6, r7, lr}
   1588e:	b082      	sub	sp, #8
   15890:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   15892:	2200      	movs	r2, #0
   15894:	4b17      	ldr	r3, [pc, #92]	; (158f4 <sd_mmc_spi_start_read_blocks+0x70>)
   15896:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
   15898:	1e4c      	subs	r4, r1, #1
   1589a:	b2a4      	uxth	r4, r4
   1589c:	2900      	cmp	r1, #0
   1589e:	d026      	beq.n	158ee <sd_mmc_spi_start_read_blocks+0x6a>
   158a0:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   158a2:	4b15      	ldr	r3, [pc, #84]	; (158f8 <sd_mmc_spi_start_read_blocks+0x74>)
   158a4:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   158a6:	4f15      	ldr	r7, [pc, #84]	; (158fc <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
   158a8:	47d0      	blx	sl
   158aa:	4680      	mov	r8, r0
   158ac:	2800      	cmp	r0, #0
   158ae:	d017      	beq.n	158e0 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   158b0:	883a      	ldrh	r2, [r7, #0]
   158b2:	465b      	mov	r3, fp
   158b4:	1999      	adds	r1, r3, r6
   158b6:	23ff      	movs	r3, #255	; 0xff
   158b8:	4811      	ldr	r0, [pc, #68]	; (15900 <sd_mmc_spi_start_read_blocks+0x7c>)
   158ba:	4d12      	ldr	r5, [pc, #72]	; (15904 <sd_mmc_spi_start_read_blocks+0x80>)
   158bc:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   158be:	883b      	ldrh	r3, [r7, #0]
   158c0:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   158c2:	4a11      	ldr	r2, [pc, #68]	; (15908 <sd_mmc_spi_start_read_blocks+0x84>)
   158c4:	6811      	ldr	r1, [r2, #0]
   158c6:	468c      	mov	ip, r1
   158c8:	4463      	add	r3, ip
   158ca:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   158cc:	23ff      	movs	r3, #255	; 0xff
   158ce:	2202      	movs	r2, #2
   158d0:	a901      	add	r1, sp, #4
   158d2:	480b      	ldr	r0, [pc, #44]	; (15900 <sd_mmc_spi_start_read_blocks+0x7c>)
   158d4:	47a8      	blx	r5
	while (nb_block--) {
   158d6:	3c01      	subs	r4, #1
   158d8:	b2a4      	uxth	r4, r4
   158da:	4b0c      	ldr	r3, [pc, #48]	; (1590c <sd_mmc_spi_start_read_blocks+0x88>)
   158dc:	429c      	cmp	r4, r3
   158de:	d1e3      	bne.n	158a8 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
   158e0:	4640      	mov	r0, r8
   158e2:	b002      	add	sp, #8
   158e4:	bc1c      	pop	{r2, r3, r4}
   158e6:	4690      	mov	r8, r2
   158e8:	469a      	mov	sl, r3
   158ea:	46a3      	mov	fp, r4
   158ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
   158ee:	2301      	movs	r3, #1
   158f0:	4698      	mov	r8, r3
   158f2:	e7f5      	b.n	158e0 <sd_mmc_spi_start_read_blocks+0x5c>
   158f4:	200032cf 	.word	0x200032cf
   158f8:	000153c9 	.word	0x000153c9
   158fc:	200032c8 	.word	0x200032c8
   15900:	2000328c 	.word	0x2000328c
   15904:	00019a05 	.word	0x00019a05
   15908:	200032d8 	.word	0x200032d8
   1590c:	0000ffff 	.word	0x0000ffff

00015910 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
   15910:	2001      	movs	r0, #1
   15912:	4770      	bx	lr

00015914 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   15914:	b5f0      	push	{r4, r5, r6, r7, lr}
   15916:	46c6      	mov	lr, r8
   15918:	b500      	push	{lr}
   1591a:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1591c:	2200      	movs	r2, #0
   1591e:	4b15      	ldr	r3, [pc, #84]	; (15974 <sd_mmc_spi_start_write_blocks+0x60>)
   15920:	701a      	strb	r2, [r3, #0]
	pos = 0;
   15922:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   15924:	4f14      	ldr	r7, [pc, #80]	; (15978 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   15926:	4e15      	ldr	r6, [pc, #84]	; (1597c <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
   15928:	e000      	b.n	1592c <sd_mmc_spi_start_write_blocks+0x18>
{
   1592a:	0021      	movs	r1, r4
	while (nb_block--) {
   1592c:	1e4c      	subs	r4, r1, #1
   1592e:	b2a4      	uxth	r4, r4
   15930:	2900      	cmp	r1, #0
   15932:	d01b      	beq.n	1596c <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
   15934:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   15936:	8832      	ldrh	r2, [r6, #0]
   15938:	4643      	mov	r3, r8
   1593a:	1959      	adds	r1, r3, r5
   1593c:	4810      	ldr	r0, [pc, #64]	; (15980 <sd_mmc_spi_start_write_blocks+0x6c>)
   1593e:	4b11      	ldr	r3, [pc, #68]	; (15984 <sd_mmc_spi_start_write_blocks+0x70>)
   15940:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   15942:	8833      	ldrh	r3, [r6, #0]
   15944:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   15946:	4a10      	ldr	r2, [pc, #64]	; (15988 <sd_mmc_spi_start_write_blocks+0x74>)
   15948:	6811      	ldr	r1, [r2, #0]
   1594a:	468c      	mov	ip, r1
   1594c:	4463      	add	r3, ip
   1594e:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   15950:	4b0e      	ldr	r3, [pc, #56]	; (1598c <sd_mmc_spi_start_write_blocks+0x78>)
   15952:	4798      	blx	r3
   15954:	2800      	cmp	r0, #0
   15956:	d00a      	beq.n	1596e <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   15958:	2c00      	cmp	r4, #0
   1595a:	d0e6      	beq.n	1592a <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   1595c:	4b0c      	ldr	r3, [pc, #48]	; (15990 <sd_mmc_spi_start_write_blocks+0x7c>)
   1595e:	4798      	blx	r3
   15960:	2800      	cmp	r0, #0
   15962:	d1e2      	bne.n	1592a <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   15964:	2205      	movs	r2, #5
   15966:	4b03      	ldr	r3, [pc, #12]	; (15974 <sd_mmc_spi_start_write_blocks+0x60>)
   15968:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1596a:	e000      	b.n	1596e <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
   1596c:	2001      	movs	r0, #1
}
   1596e:	bc04      	pop	{r2}
   15970:	4690      	mov	r8, r2
   15972:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15974:	200032cf 	.word	0x200032cf
   15978:	000152a5 	.word	0x000152a5
   1597c:	200032c8 	.word	0x200032c8
   15980:	2000328c 	.word	0x2000328c
   15984:	00019bcd 	.word	0x00019bcd
   15988:	200032d8 	.word	0x200032d8
   1598c:	00015435 	.word	0x00015435
   15990:	000152ed 	.word	0x000152ed

00015994 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   15994:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   15996:	4b05      	ldr	r3, [pc, #20]	; (159ac <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
   15998:	4798      	blx	r3
   1599a:	2800      	cmp	r0, #0
   1599c:	d103      	bne.n	159a6 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1599e:	2205      	movs	r2, #5
   159a0:	4b03      	ldr	r3, [pc, #12]	; (159b0 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
   159a2:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
   159a4:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
   159a6:	4b03      	ldr	r3, [pc, #12]	; (159b4 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
   159a8:	4798      	blx	r3
   159aa:	e7fb      	b.n	159a4 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
   159ac:	000152ed 	.word	0x000152ed
   159b0:	200032cf 	.word	0x200032cf
   159b4:	00015351 	.word	0x00015351

000159b8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   159b8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
   159ba:	2000      	movs	r0, #0
   159bc:	4b08      	ldr	r3, [pc, #32]	; (159e0 <delay_init+0x28>)
   159be:	4798      	blx	r3
   159c0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
   159c2:	4c08      	ldr	r4, [pc, #32]	; (159e4 <delay_init+0x2c>)
   159c4:	21fa      	movs	r1, #250	; 0xfa
   159c6:	0089      	lsls	r1, r1, #2
   159c8:	47a0      	blx	r4
   159ca:	4b07      	ldr	r3, [pc, #28]	; (159e8 <delay_init+0x30>)
   159cc:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   159ce:	4907      	ldr	r1, [pc, #28]	; (159ec <delay_init+0x34>)
   159d0:	0028      	movs	r0, r5
   159d2:	47a0      	blx	r4
   159d4:	4b06      	ldr	r3, [pc, #24]	; (159f0 <delay_init+0x38>)
   159d6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   159d8:	2205      	movs	r2, #5
   159da:	4b06      	ldr	r3, [pc, #24]	; (159f4 <delay_init+0x3c>)
   159dc:	601a      	str	r2, [r3, #0]
}
   159de:	bd70      	pop	{r4, r5, r6, pc}
   159e0:	0001a8d9 	.word	0x0001a8d9
   159e4:	0001f829 	.word	0x0001f829
   159e8:	20000098 	.word	0x20000098
   159ec:	000f4240 	.word	0x000f4240
   159f0:	2000009c 	.word	0x2000009c
   159f4:	e000e010 	.word	0xe000e010

000159f8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   159f8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   159fa:	4b08      	ldr	r3, [pc, #32]	; (15a1c <delay_cycles_ms+0x24>)
   159fc:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
   159fe:	4a08      	ldr	r2, [pc, #32]	; (15a20 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
   15a00:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   15a02:	2180      	movs	r1, #128	; 0x80
   15a04:	0249      	lsls	r1, r1, #9
	while (n--) {
   15a06:	3801      	subs	r0, #1
   15a08:	d307      	bcc.n	15a1a <delay_cycles_ms+0x22>
	if (n > 0) {
   15a0a:	2c00      	cmp	r4, #0
   15a0c:	d0fb      	beq.n	15a06 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
   15a0e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
   15a10:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   15a12:	6813      	ldr	r3, [r2, #0]
   15a14:	420b      	tst	r3, r1
   15a16:	d0fc      	beq.n	15a12 <delay_cycles_ms+0x1a>
   15a18:	e7f5      	b.n	15a06 <delay_cycles_ms+0xe>
	}
}
   15a1a:	bd30      	pop	{r4, r5, pc}
   15a1c:	20000098 	.word	0x20000098
   15a20:	e000e010 	.word	0xe000e010

00015a24 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   15a24:	b510      	push	{r4, lr}
	if (gpfIsr) {
   15a26:	4b03      	ldr	r3, [pc, #12]	; (15a34 <chip_isr+0x10>)
   15a28:	681b      	ldr	r3, [r3, #0]
   15a2a:	2b00      	cmp	r3, #0
   15a2c:	d000      	beq.n	15a30 <chip_isr+0xc>
		gpfIsr();
   15a2e:	4798      	blx	r3
	}
}
   15a30:	bd10      	pop	{r4, pc}
   15a32:	46c0      	nop			; (mov r8, r8)
   15a34:	200032e0 	.word	0x200032e0

00015a38 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   15a38:	b570      	push	{r4, r5, r6, lr}
   15a3a:	b082      	sub	sp, #8
	gpfIsr = NULL;
   15a3c:	2300      	movs	r3, #0
   15a3e:	4a15      	ldr	r2, [pc, #84]	; (15a94 <nm_bsp_init+0x5c>)
   15a40:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   15a42:	ac01      	add	r4, sp, #4
   15a44:	2501      	movs	r5, #1
   15a46:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
   15a48:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   15a4a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   15a4c:	0021      	movs	r1, r4
   15a4e:	201b      	movs	r0, #27
   15a50:	4e11      	ldr	r6, [pc, #68]	; (15a98 <nm_bsp_init+0x60>)
   15a52:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   15a54:	0021      	movs	r1, r4
   15a56:	201c      	movs	r0, #28
   15a58:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   15a5a:	0021      	movs	r1, r4
   15a5c:	2028      	movs	r0, #40	; 0x28
   15a5e:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
   15a60:	4b0e      	ldr	r3, [pc, #56]	; (15a9c <nm_bsp_init+0x64>)
   15a62:	2280      	movs	r2, #128	; 0x80
   15a64:	0552      	lsls	r2, r2, #21
   15a66:	615a      	str	r2, [r3, #20]
   15a68:	2280      	movs	r2, #128	; 0x80
   15a6a:	0512      	lsls	r2, r2, #20
   15a6c:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   15a6e:	4b0c      	ldr	r3, [pc, #48]	; (15aa0 <nm_bsp_init+0x68>)
   15a70:	681b      	ldr	r3, [r3, #0]
   15a72:	421d      	tst	r5, r3
   15a74:	d003      	beq.n	15a7e <nm_bsp_init+0x46>
   15a76:	4b0a      	ldr	r3, [pc, #40]	; (15aa0 <nm_bsp_init+0x68>)
   15a78:	681b      	ldr	r3, [r3, #0]
   15a7a:	079b      	lsls	r3, r3, #30
   15a7c:	d401      	bmi.n	15a82 <nm_bsp_init+0x4a>
	    delay_init();
   15a7e:	4b09      	ldr	r3, [pc, #36]	; (15aa4 <nm_bsp_init+0x6c>)
   15a80:	4798      	blx	r3
	cpu_irq_enable();
   15a82:	2201      	movs	r2, #1
   15a84:	4b08      	ldr	r3, [pc, #32]	; (15aa8 <nm_bsp_init+0x70>)
   15a86:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   15a88:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   15a8c:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
   15a8e:	2000      	movs	r0, #0
   15a90:	b002      	add	sp, #8
   15a92:	bd70      	pop	{r4, r5, r6, pc}
   15a94:	200032e0 	.word	0x200032e0
   15a98:	000190d1 	.word	0x000190d1
   15a9c:	41004400 	.word	0x41004400
   15aa0:	e000e010 	.word	0xe000e010
   15aa4:	000159b9 	.word	0x000159b9
   15aa8:	200000a2 	.word	0x200000a2

00015aac <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   15aac:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
   15aae:	1e44      	subs	r4, r0, #1
   15ab0:	2800      	cmp	r0, #0
   15ab2:	d004      	beq.n	15abe <nm_bsp_sleep+0x12>
		delay_ms(1);
   15ab4:	4d02      	ldr	r5, [pc, #8]	; (15ac0 <nm_bsp_sleep+0x14>)
   15ab6:	2001      	movs	r0, #1
   15ab8:	47a8      	blx	r5
	while (u32TimeMsec--) {
   15aba:	3c01      	subs	r4, #1
   15abc:	d2fb      	bcs.n	15ab6 <nm_bsp_sleep+0xa>
	}
}
   15abe:	bd70      	pop	{r4, r5, r6, pc}
   15ac0:	000159f9 	.word	0x000159f9

00015ac4 <nm_bsp_reset>:
{
   15ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15ac6:	4c07      	ldr	r4, [pc, #28]	; (15ae4 <nm_bsp_reset+0x20>)
   15ac8:	2780      	movs	r7, #128	; 0x80
   15aca:	057f      	lsls	r7, r7, #21
   15acc:	6167      	str	r7, [r4, #20]
   15ace:	2580      	movs	r5, #128	; 0x80
   15ad0:	052d      	lsls	r5, r5, #20
   15ad2:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
   15ad4:	2001      	movs	r0, #1
   15ad6:	4e04      	ldr	r6, [pc, #16]	; (15ae8 <nm_bsp_reset+0x24>)
   15ad8:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
   15ada:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
   15adc:	200a      	movs	r0, #10
   15ade:	47b0      	blx	r6
   15ae0:	61a5      	str	r5, [r4, #24]
}
   15ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15ae4:	41004400 	.word	0x41004400
   15ae8:	00015aad 	.word	0x00015aad

00015aec <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   15aec:	b510      	push	{r4, lr}
   15aee:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   15af0:	4b0e      	ldr	r3, [pc, #56]	; (15b2c <nm_bsp_register_isr+0x40>)
   15af2:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   15af4:	ac01      	add	r4, sp, #4
   15af6:	0020      	movs	r0, r4
   15af8:	4b0d      	ldr	r3, [pc, #52]	; (15b30 <nm_bsp_register_isr+0x44>)
   15afa:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   15afc:	2329      	movs	r3, #41	; 0x29
   15afe:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   15b00:	2300      	movs	r3, #0
   15b02:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   15b04:	3301      	adds	r3, #1
   15b06:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   15b08:	3301      	adds	r3, #1
   15b0a:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   15b0c:	0021      	movs	r1, r4
   15b0e:	2009      	movs	r0, #9
   15b10:	4b08      	ldr	r3, [pc, #32]	; (15b34 <nm_bsp_register_isr+0x48>)
   15b12:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   15b14:	2200      	movs	r2, #0
   15b16:	2109      	movs	r1, #9
   15b18:	4807      	ldr	r0, [pc, #28]	; (15b38 <nm_bsp_register_isr+0x4c>)
   15b1a:	4b08      	ldr	r3, [pc, #32]	; (15b3c <nm_bsp_register_isr+0x50>)
   15b1c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   15b1e:	2100      	movs	r1, #0
   15b20:	2009      	movs	r0, #9
   15b22:	4b07      	ldr	r3, [pc, #28]	; (15b40 <nm_bsp_register_isr+0x54>)
   15b24:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   15b26:	b004      	add	sp, #16
   15b28:	bd10      	pop	{r4, pc}
   15b2a:	46c0      	nop			; (mov r8, r8)
   15b2c:	200032e0 	.word	0x200032e0
   15b30:	00019045 	.word	0x00019045
   15b34:	00019059 	.word	0x00019059
   15b38:	00015a25 	.word	0x00015a25
   15b3c:	00018f01 	.word	0x00018f01
   15b40:	00018f2d 	.word	0x00018f2d

00015b44 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   15b44:	b510      	push	{r4, lr}
	if (u8Enable) {
   15b46:	2800      	cmp	r0, #0
   15b48:	d104      	bne.n	15b54 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   15b4a:	2100      	movs	r1, #0
   15b4c:	2009      	movs	r0, #9
   15b4e:	4b04      	ldr	r3, [pc, #16]	; (15b60 <nm_bsp_interrupt_ctrl+0x1c>)
   15b50:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   15b52:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   15b54:	2100      	movs	r1, #0
   15b56:	2009      	movs	r0, #9
   15b58:	4b02      	ldr	r3, [pc, #8]	; (15b64 <nm_bsp_interrupt_ctrl+0x20>)
   15b5a:	4798      	blx	r3
   15b5c:	e7f9      	b.n	15b52 <nm_bsp_interrupt_ctrl+0xe>
   15b5e:	46c0      	nop			; (mov r8, r8)
   15b60:	00018f4d 	.word	0x00018f4d
   15b64:	00018f2d 	.word	0x00018f2d

00015b68 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   15b68:	b530      	push	{r4, r5, lr}
   15b6a:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
   15b6c:	4c30      	ldr	r4, [pc, #192]	; (15c30 <nm_bus_init+0xc8>)
   15b6e:	230e      	movs	r3, #14
   15b70:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
   15b72:	2300      	movs	r3, #0
   15b74:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
   15b76:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   15b78:	a901      	add	r1, sp, #4
   15b7a:	2201      	movs	r2, #1
   15b7c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
   15b7e:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   15b80:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   15b82:	200e      	movs	r0, #14
   15b84:	4b2b      	ldr	r3, [pc, #172]	; (15c34 <nm_bus_init+0xcc>)
   15b86:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   15b88:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
   15b8a:	09d1      	lsrs	r1, r2, #7
		return NULL;
   15b8c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   15b8e:	2900      	cmp	r1, #0
   15b90:	d104      	bne.n	15b9c <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
   15b92:	0953      	lsrs	r3, r2, #5
   15b94:	01db      	lsls	r3, r3, #7
   15b96:	4928      	ldr	r1, [pc, #160]	; (15c38 <nm_bus_init+0xd0>)
   15b98:	468c      	mov	ip, r1
   15b9a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   15b9c:	211f      	movs	r1, #31
   15b9e:	4011      	ands	r1, r2
   15ba0:	2201      	movs	r2, #1
   15ba2:	0010      	movs	r0, r2
   15ba4:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
   15ba6:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
   15ba8:	ac02      	add	r4, sp, #8
   15baa:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   15bac:	2300      	movs	r3, #0
   15bae:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   15bb0:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   15bb2:	21c0      	movs	r1, #192	; 0xc0
   15bb4:	0389      	lsls	r1, r1, #14
   15bb6:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   15bb8:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
   15bba:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
   15bbc:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
   15bbe:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
   15bc0:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
   15bc2:	3223      	adds	r2, #35	; 0x23
   15bc4:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   15bc6:	3a18      	subs	r2, #24
   15bc8:	2100      	movs	r1, #0
   15bca:	a808      	add	r0, sp, #32
   15bcc:	4b1b      	ldr	r3, [pc, #108]	; (15c3c <nm_bus_init+0xd4>)
   15bce:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   15bd0:	4b1b      	ldr	r3, [pc, #108]	; (15c40 <nm_bus_init+0xd8>)
   15bd2:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   15bd4:	4b1b      	ldr	r3, [pc, #108]	; (15c44 <nm_bus_init+0xdc>)
   15bd6:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   15bd8:	2301      	movs	r3, #1
   15bda:	425b      	negs	r3, r3
   15bdc:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   15bde:	4b1a      	ldr	r3, [pc, #104]	; (15c48 <nm_bus_init+0xe0>)
   15be0:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   15be2:	4b1a      	ldr	r3, [pc, #104]	; (15c4c <nm_bus_init+0xe4>)
   15be4:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   15be6:	0022      	movs	r2, r4
   15be8:	4919      	ldr	r1, [pc, #100]	; (15c50 <nm_bus_init+0xe8>)
   15bea:	481a      	ldr	r0, [pc, #104]	; (15c54 <nm_bus_init+0xec>)
   15bec:	4b1a      	ldr	r3, [pc, #104]	; (15c58 <nm_bus_init+0xf0>)
   15bee:	4798      	blx	r3
   15bf0:	2800      	cmp	r0, #0
   15bf2:	d11a      	bne.n	15c2a <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
   15bf4:	4d17      	ldr	r5, [pc, #92]	; (15c54 <nm_bus_init+0xec>)
   15bf6:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   15bf8:	0020      	movs	r0, r4
   15bfa:	4b18      	ldr	r3, [pc, #96]	; (15c5c <nm_bus_init+0xf4>)
   15bfc:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   15bfe:	231f      	movs	r3, #31
   15c00:	4018      	ands	r0, r3
   15c02:	3b1e      	subs	r3, #30
   15c04:	4083      	lsls	r3, r0
   15c06:	4a16      	ldr	r2, [pc, #88]	; (15c60 <nm_bus_init+0xf8>)
   15c08:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   15c0a:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   15c0c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   15c0e:	2b00      	cmp	r3, #0
   15c10:	d1fc      	bne.n	15c0c <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   15c12:	6823      	ldr	r3, [r4, #0]
   15c14:	2202      	movs	r2, #2
   15c16:	4313      	orrs	r3, r2
   15c18:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
   15c1a:	4b12      	ldr	r3, [pc, #72]	; (15c64 <nm_bus_init+0xfc>)
   15c1c:	4798      	blx	r3
	nm_bsp_sleep(1);
   15c1e:	2001      	movs	r0, #1
   15c20:	4b11      	ldr	r3, [pc, #68]	; (15c68 <nm_bus_init+0x100>)
   15c22:	4798      	blx	r3
#endif
	return result;
   15c24:	2000      	movs	r0, #0
}
   15c26:	b011      	add	sp, #68	; 0x44
   15c28:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
   15c2a:	2006      	movs	r0, #6
   15c2c:	4240      	negs	r0, r0
   15c2e:	e7fa      	b.n	15c26 <nm_bus_init+0xbe>
   15c30:	20003d58 	.word	0x20003d58
   15c34:	000190d1 	.word	0x000190d1
   15c38:	41004400 	.word	0x41004400
   15c3c:	0001fc1b 	.word	0x0001fc1b
   15c40:	000c0002 	.word	0x000c0002
   15c44:	000d0002 	.word	0x000d0002
   15c48:	000f0002 	.word	0x000f0002
   15c4c:	00124f80 	.word	0x00124f80
   15c50:	42001000 	.word	0x42001000
   15c54:	20003d5c 	.word	0x20003d5c
   15c58:	0001982d 	.word	0x0001982d
   15c5c:	000196e5 	.word	0x000196e5
   15c60:	e000e100 	.word	0xe000e100
   15c64:	00015ac5 	.word	0x00015ac5
   15c68:	00015aad 	.word	0x00015aad

00015c6c <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   15c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15c6e:	46de      	mov	lr, fp
   15c70:	4657      	mov	r7, sl
   15c72:	464e      	mov	r6, r9
   15c74:	4645      	mov	r5, r8
   15c76:	b5e0      	push	{r5, r6, r7, lr}
   15c78:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
   15c7a:	2803      	cmp	r0, #3
   15c7c:	d000      	beq.n	15c80 <nm_bus_ioctl+0x14>
   15c7e:	e075      	b.n	15d6c <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   15c80:	680e      	ldr	r6, [r1, #0]
   15c82:	684d      	ldr	r5, [r1, #4]
   15c84:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0xFF;
   15c86:	22ff      	movs	r2, #255	; 0xff
   15c88:	466b      	mov	r3, sp
   15c8a:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   15c8c:	2d00      	cmp	r5, #0
   15c8e:	d027      	beq.n	15ce0 <nm_bus_ioctl+0x74>
   15c90:	2c00      	cmp	r4, #0
   15c92:	d065      	beq.n	15d60 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
   15c94:	2e00      	cmp	r6, #0
   15c96:	d100      	bne.n	15c9a <nm_bus_ioctl+0x2e>
   15c98:	e075      	b.n	15d86 <nm_bus_ioctl+0x11a>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   15c9a:	2300      	movs	r3, #0
   15c9c:	4698      	mov	r8, r3
   15c9e:	2300      	movs	r3, #0
   15ca0:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
   15ca2:	2201      	movs	r2, #1
   15ca4:	493a      	ldr	r1, [pc, #232]	; (15d90 <nm_bus_ioctl+0x124>)
   15ca6:	483b      	ldr	r0, [pc, #236]	; (15d94 <nm_bus_ioctl+0x128>)
   15ca8:	4b3b      	ldr	r3, [pc, #236]	; (15d98 <nm_bus_ioctl+0x12c>)
   15caa:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   15cac:	4b39      	ldr	r3, [pc, #228]	; (15d94 <nm_bus_ioctl+0x128>)
   15cae:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
   15cb0:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
   15cb2:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   15cb4:	4699      	mov	r9, r3
			pu8Miso++;
   15cb6:	4659      	mov	r1, fp
   15cb8:	424b      	negs	r3, r1
   15cba:	4159      	adcs	r1, r3
   15cbc:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
   15cbe:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   15cc0:	4653      	mov	r3, sl
   15cc2:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   15cc4:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
   15cc6:	4239      	tst	r1, r7
   15cc8:	d0fc      	beq.n	15cc4 <nm_bus_ioctl+0x58>
   15cca:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
   15ccc:	4239      	tst	r1, r7
   15cce:	d0fc      	beq.n	15cca <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   15cd0:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   15cd2:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
   15cd4:	4211      	tst	r1, r2
   15cd6:	d0fc      	beq.n	15cd2 <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   15cd8:	4649      	mov	r1, r9
   15cda:	7989      	ldrb	r1, [r1, #6]
   15cdc:	468c      	mov	ip, r1
   15cde:	e011      	b.n	15d04 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   15ce0:	2e00      	cmp	r6, #0
   15ce2:	d03a      	beq.n	15d5a <nm_bus_ioctl+0xee>
   15ce4:	2c00      	cmp	r4, #0
   15ce6:	d03e      	beq.n	15d66 <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   15ce8:	2300      	movs	r3, #0
   15cea:	4698      	mov	r8, r3
		u8SkipMiso = 1;
   15cec:	3301      	adds	r3, #1
   15cee:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
   15cf0:	466b      	mov	r3, sp
   15cf2:	1ddd      	adds	r5, r3, #7
   15cf4:	e7d5      	b.n	15ca2 <nm_bus_ioctl+0x36>
   15cf6:	4660      	mov	r0, ip
   15cf8:	2801      	cmp	r0, #1
   15cfa:	d00d      	beq.n	15d18 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   15cfc:	6a98      	ldr	r0, [r3, #40]	; 0x28
   15cfe:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   15d00:	2900      	cmp	r1, #0
   15d02:	d00d      	beq.n	15d20 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   15d04:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
   15d06:	4211      	tst	r1, r2
   15d08:	d0fc      	beq.n	15d04 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   15d0a:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
   15d0c:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   15d0e:	4210      	tst	r0, r2
   15d10:	d0f1      	beq.n	15cf6 <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   15d12:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
   15d14:	311e      	adds	r1, #30
   15d16:	e7ee      	b.n	15cf6 <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   15d18:	6a98      	ldr	r0, [r3, #40]	; 0x28
   15d1a:	05c0      	lsls	r0, r0, #23
   15d1c:	0dc0      	lsrs	r0, r0, #23
   15d1e:	e7ef      	b.n	15d00 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
   15d20:	7028      	strb	r0, [r5, #0]
		u16Sz--;
   15d22:	3c01      	subs	r4, #1
   15d24:	b2a4      	uxth	r4, r4
			pu8Miso++;
   15d26:	445d      	add	r5, fp
			pu8Mosi++;
   15d28:	4643      	mov	r3, r8
   15d2a:	4259      	negs	r1, r3
   15d2c:	414b      	adcs	r3, r1
   15d2e:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
   15d30:	2c00      	cmp	r4, #0
   15d32:	d1c4      	bne.n	15cbe <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
   15d34:	4b17      	ldr	r3, [pc, #92]	; (15d94 <nm_bus_ioctl+0x128>)
   15d36:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
   15d38:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   15d3a:	7e0b      	ldrb	r3, [r1, #24]
   15d3c:	4213      	tst	r3, r2
   15d3e:	d0fc      	beq.n	15d3a <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
   15d40:	2200      	movs	r2, #0
   15d42:	4913      	ldr	r1, [pc, #76]	; (15d90 <nm_bus_ioctl+0x124>)
   15d44:	4813      	ldr	r0, [pc, #76]	; (15d94 <nm_bus_ioctl+0x128>)
   15d46:	4b14      	ldr	r3, [pc, #80]	; (15d98 <nm_bus_ioctl+0x12c>)
   15d48:	4798      	blx	r3
	return M2M_SUCCESS;
   15d4a:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
   15d4c:	b003      	add	sp, #12
   15d4e:	bc3c      	pop	{r2, r3, r4, r5}
   15d50:	4690      	mov	r8, r2
   15d52:	4699      	mov	r9, r3
   15d54:	46a2      	mov	sl, r4
   15d56:	46ab      	mov	fp, r5
   15d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
   15d5a:	200f      	movs	r0, #15
   15d5c:	4240      	negs	r0, r0
   15d5e:	e7f5      	b.n	15d4c <nm_bus_ioctl+0xe0>
   15d60:	200f      	movs	r0, #15
   15d62:	4240      	negs	r0, r0
   15d64:	e7f2      	b.n	15d4c <nm_bus_ioctl+0xe0>
   15d66:	200f      	movs	r0, #15
   15d68:	4240      	negs	r0, r0
		break;
   15d6a:	e7ef      	b.n	15d4c <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
   15d6c:	2283      	movs	r2, #131	; 0x83
   15d6e:	0052      	lsls	r2, r2, #1
   15d70:	490a      	ldr	r1, [pc, #40]	; (15d9c <nm_bus_ioctl+0x130>)
   15d72:	480b      	ldr	r0, [pc, #44]	; (15da0 <nm_bus_ioctl+0x134>)
   15d74:	4c0b      	ldr	r4, [pc, #44]	; (15da4 <nm_bus_ioctl+0x138>)
   15d76:	47a0      	blx	r4
   15d78:	480b      	ldr	r0, [pc, #44]	; (15da8 <nm_bus_ioctl+0x13c>)
   15d7a:	47a0      	blx	r4
   15d7c:	480b      	ldr	r0, [pc, #44]	; (15dac <nm_bus_ioctl+0x140>)
   15d7e:	47a0      	blx	r4
			s8Ret = -1;
   15d80:	2001      	movs	r0, #1
   15d82:	4240      	negs	r0, r0
	return s8Ret;
   15d84:	e7e2      	b.n	15d4c <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
   15d86:	2301      	movs	r3, #1
   15d88:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
   15d8a:	466b      	mov	r3, sp
   15d8c:	1dde      	adds	r6, r3, #7
   15d8e:	e786      	b.n	15c9e <nm_bus_ioctl+0x32>
   15d90:	20003d58 	.word	0x20003d58
   15d94:	20003d5c 	.word	0x20003d5c
   15d98:	00019ad9 	.word	0x00019ad9
   15d9c:	00021988 	.word	0x00021988
   15da0:	00021998 	.word	0x00021998
   15da4:	000148e5 	.word	0x000148e5
   15da8:	000219ac 	.word	0x000219ac
   15dac:	000219c0 	.word	0x000219c0

00015db0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   15db0:	b530      	push	{r4, r5, lr}
   15db2:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
   15db4:	ab01      	add	r3, sp, #4
   15db6:	2200      	movs	r2, #0
   15db8:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
   15dba:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   15dbc:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
   15dbe:	4d13      	ldr	r5, [pc, #76]	; (15e0c <nm_bus_deinit+0x5c>)
   15dc0:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   15dc2:	0020      	movs	r0, r4
   15dc4:	4b12      	ldr	r3, [pc, #72]	; (15e10 <nm_bus_deinit+0x60>)
   15dc6:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   15dc8:	231f      	movs	r3, #31
   15dca:	4018      	ands	r0, r3
   15dcc:	3b1e      	subs	r3, #30
   15dce:	4083      	lsls	r3, r0
   15dd0:	2280      	movs	r2, #128	; 0x80
   15dd2:	4910      	ldr	r1, [pc, #64]	; (15e14 <nm_bus_deinit+0x64>)
   15dd4:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
   15dd6:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   15dd8:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   15dda:	2b00      	cmp	r3, #0
   15ddc:	d1fc      	bne.n	15dd8 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   15dde:	338f      	adds	r3, #143	; 0x8f
   15de0:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   15de2:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   15de4:	6823      	ldr	r3, [r4, #0]
   15de6:	2202      	movs	r2, #2
   15de8:	4393      	bics	r3, r2
   15dea:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   15dec:	a901      	add	r1, sp, #4
   15dee:	200c      	movs	r0, #12
   15df0:	4c09      	ldr	r4, [pc, #36]	; (15e18 <nm_bus_deinit+0x68>)
   15df2:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   15df4:	a901      	add	r1, sp, #4
   15df6:	200f      	movs	r0, #15
   15df8:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   15dfa:	a901      	add	r1, sp, #4
   15dfc:	200d      	movs	r0, #13
   15dfe:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   15e00:	a901      	add	r1, sp, #4
   15e02:	200e      	movs	r0, #14
   15e04:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
   15e06:	2000      	movs	r0, #0
   15e08:	b003      	add	sp, #12
   15e0a:	bd30      	pop	{r4, r5, pc}
   15e0c:	20003d5c 	.word	0x20003d5c
   15e10:	000196e5 	.word	0x000196e5
   15e14:	e000e100 	.word	0xe000e100
   15e18:	000190d1 	.word	0x000190d1

00015e1c <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
   15e1c:	2a00      	cmp	r2, #0
   15e1e:	d006      	beq.n	15e2e <m2m_memcpy+0x12>
   15e20:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
   15e22:	780b      	ldrb	r3, [r1, #0]
   15e24:	7003      	strb	r3, [r0, #0]
		pDst++;
   15e26:	3001      	adds	r0, #1
		pSrc++;
   15e28:	3101      	adds	r1, #1
	}while(--sz);
   15e2a:	4290      	cmp	r0, r2
   15e2c:	d1f9      	bne.n	15e22 <m2m_memcpy+0x6>
}
   15e2e:	4770      	bx	lr

00015e30 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
   15e30:	2a00      	cmp	r2, #0
   15e32:	d004      	beq.n	15e3e <m2m_memset+0xe>
   15e34:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
   15e36:	7001      	strb	r1, [r0, #0]
		pBuf++;
   15e38:	3001      	adds	r0, #1
	}while(--sz);
   15e3a:	4290      	cmp	r0, r2
   15e3c:	d1fb      	bne.n	15e36 <m2m_memset+0x6>
}
   15e3e:	4770      	bx	lr

00015e40 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   15e40:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
   15e42:	7802      	ldrb	r2, [r0, #0]
   15e44:	2a00      	cmp	r2, #0
   15e46:	d007      	beq.n	15e58 <m2m_strlen+0x18>
   15e48:	2000      	movs	r0, #0
	{
		u16StrLen ++;
   15e4a:	3001      	adds	r0, #1
   15e4c:	b280      	uxth	r0, r0
		pcStr++;
   15e4e:	3301      	adds	r3, #1
	while(*pcStr)
   15e50:	781a      	ldrb	r2, [r3, #0]
   15e52:	2a00      	cmp	r2, #0
   15e54:	d1f9      	bne.n	15e4a <m2m_strlen+0xa>
	}
	return u16StrLen;
}
   15e56:	4770      	bx	lr
	uint16	u16StrLen = 0;
   15e58:	2000      	movs	r0, #0
   15e5a:	e7fc      	b.n	15e56 <m2m_strlen+0x16>

00015e5c <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
   15e5c:	4a02      	ldr	r2, [pc, #8]	; (15e68 <isr+0xc>)
   15e5e:	78d3      	ldrb	r3, [r2, #3]
   15e60:	3301      	adds	r3, #1
   15e62:	b2db      	uxtb	r3, r3
   15e64:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   15e66:	4770      	bx	lr
   15e68:	20003d98 	.word	0x20003d98

00015e6c <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
   15e6c:	4770      	bx	lr
	...

00015e70 <hif_set_rx_done>:
{
   15e70:	b500      	push	{lr}
   15e72:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
   15e74:	2200      	movs	r2, #0
   15e76:	4b0a      	ldr	r3, [pc, #40]	; (15ea0 <hif_set_rx_done+0x30>)
   15e78:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
   15e7a:	2001      	movs	r0, #1
   15e7c:	4b09      	ldr	r3, [pc, #36]	; (15ea4 <hif_set_rx_done+0x34>)
   15e7e:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   15e80:	a901      	add	r1, sp, #4
   15e82:	4809      	ldr	r0, [pc, #36]	; (15ea8 <hif_set_rx_done+0x38>)
   15e84:	4b09      	ldr	r3, [pc, #36]	; (15eac <hif_set_rx_done+0x3c>)
   15e86:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
   15e88:	2800      	cmp	r0, #0
   15e8a:	d001      	beq.n	15e90 <hif_set_rx_done+0x20>
}
   15e8c:	b003      	add	sp, #12
   15e8e:	bd00      	pop	{pc}
	reg |= NBIT1;
   15e90:	2102      	movs	r1, #2
   15e92:	9b01      	ldr	r3, [sp, #4]
   15e94:	4319      	orrs	r1, r3
   15e96:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   15e98:	4803      	ldr	r0, [pc, #12]	; (15ea8 <hif_set_rx_done+0x38>)
   15e9a:	4b05      	ldr	r3, [pc, #20]	; (15eb0 <hif_set_rx_done+0x40>)
   15e9c:	4798      	blx	r3
   15e9e:	e7f5      	b.n	15e8c <hif_set_rx_done+0x1c>
   15ea0:	20003d98 	.word	0x20003d98
   15ea4:	00015b45 	.word	0x00015b45
   15ea8:	00001070 	.word	0x00001070
   15eac:	000171ed 	.word	0x000171ed
   15eb0:	000171f9 	.word	0x000171f9

00015eb4 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   15eb4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
   15eb6:	4b0c      	ldr	r3, [pc, #48]	; (15ee8 <hif_chip_wake+0x34>)
   15eb8:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   15eba:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
   15ebc:	2b00      	cmp	r3, #0
   15ebe:	d10d      	bne.n	15edc <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   15ec0:	4b09      	ldr	r3, [pc, #36]	; (15ee8 <hif_chip_wake+0x34>)
   15ec2:	785b      	ldrb	r3, [r3, #1]
   15ec4:	2b00      	cmp	r3, #0
   15ec6:	d103      	bne.n	15ed0 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   15ec8:	4b07      	ldr	r3, [pc, #28]	; (15ee8 <hif_chip_wake+0x34>)
   15eca:	781b      	ldrb	r3, [r3, #0]
   15ecc:	2b00      	cmp	r3, #0
   15ece:	d106      	bne.n	15ede <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   15ed0:	4a05      	ldr	r2, [pc, #20]	; (15ee8 <hif_chip_wake+0x34>)
   15ed2:	7853      	ldrb	r3, [r2, #1]
   15ed4:	3301      	adds	r3, #1
   15ed6:	b2db      	uxtb	r3, r3
   15ed8:	7053      	strb	r3, [r2, #1]
   15eda:	2000      	movs	r0, #0
ERR1:
	return ret;
}
   15edc:	bd10      	pop	{r4, pc}
			ret = chip_wake();
   15ede:	4b03      	ldr	r3, [pc, #12]	; (15eec <hif_chip_wake+0x38>)
   15ee0:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
   15ee2:	2800      	cmp	r0, #0
   15ee4:	d0f4      	beq.n	15ed0 <hif_chip_wake+0x1c>
   15ee6:	e7f9      	b.n	15edc <hif_chip_wake+0x28>
   15ee8:	20003d98 	.word	0x20003d98
   15eec:	00016eed 	.word	0x00016eed

00015ef0 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
   15ef0:	4b05      	ldr	r3, [pc, #20]	; (15f08 <hif_chip_sleep_sc+0x18>)
   15ef2:	785b      	ldrb	r3, [r3, #1]
   15ef4:	2b00      	cmp	r3, #0
   15ef6:	d004      	beq.n	15f02 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
   15ef8:	4a03      	ldr	r2, [pc, #12]	; (15f08 <hif_chip_sleep_sc+0x18>)
   15efa:	7853      	ldrb	r3, [r2, #1]
   15efc:	3b01      	subs	r3, #1
   15efe:	b2db      	uxtb	r3, r3
   15f00:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
   15f02:	2000      	movs	r0, #0
   15f04:	4770      	bx	lr
   15f06:	46c0      	nop			; (mov r8, r8)
   15f08:	20003d98 	.word	0x20003d98

00015f0c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   15f0c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
   15f0e:	4b0b      	ldr	r3, [pc, #44]	; (15f3c <hif_chip_sleep+0x30>)
   15f10:	785b      	ldrb	r3, [r3, #1]
   15f12:	2b00      	cmp	r3, #0
   15f14:	d004      	beq.n	15f20 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
   15f16:	4a09      	ldr	r2, [pc, #36]	; (15f3c <hif_chip_sleep+0x30>)
   15f18:	7853      	ldrb	r3, [r2, #1]
   15f1a:	3b01      	subs	r3, #1
   15f1c:	b2db      	uxtb	r3, r3
   15f1e:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   15f20:	4b06      	ldr	r3, [pc, #24]	; (15f3c <hif_chip_sleep+0x30>)
   15f22:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
   15f24:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
   15f26:	2b00      	cmp	r3, #0
   15f28:	d103      	bne.n	15f32 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   15f2a:	4b04      	ldr	r3, [pc, #16]	; (15f3c <hif_chip_sleep+0x30>)
   15f2c:	781b      	ldrb	r3, [r3, #0]
   15f2e:	2b00      	cmp	r3, #0
   15f30:	d100      	bne.n	15f34 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
   15f32:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
   15f34:	4b02      	ldr	r3, [pc, #8]	; (15f40 <hif_chip_sleep+0x34>)
   15f36:	4798      	blx	r3
   15f38:	e7fb      	b.n	15f32 <hif_chip_sleep+0x26>
   15f3a:	46c0      	nop			; (mov r8, r8)
   15f3c:	20003d98 	.word	0x20003d98
   15f40:	00016e85 	.word	0x00016e85

00015f44 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   15f44:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f46:	46de      	mov	lr, fp
   15f48:	4657      	mov	r7, sl
   15f4a:	b580      	push	{r7, lr}
   15f4c:	b089      	sub	sp, #36	; 0x24
   15f4e:	4683      	mov	fp, r0
   15f50:	468a      	mov	sl, r1
   15f52:	9201      	str	r2, [sp, #4]
   15f54:	9300      	str	r3, [sp, #0]
   15f56:	ab10      	add	r3, sp, #64	; 0x40
   15f58:	cb80      	ldmia	r3!, {r7}
   15f5a:	881e      	ldrh	r6, [r3, #0]
   15f5c:	ab12      	add	r3, sp, #72	; 0x48
   15f5e:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   15f60:	227f      	movs	r2, #127	; 0x7f
   15f62:	400a      	ands	r2, r1
   15f64:	ab07      	add	r3, sp, #28
   15f66:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   15f68:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   15f6a:	2208      	movs	r2, #8
   15f6c:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   15f6e:	2f00      	cmp	r7, #0
   15f70:	d03d      	beq.n	15fee <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   15f72:	885a      	ldrh	r2, [r3, #2]
   15f74:	1992      	adds	r2, r2, r6
   15f76:	18aa      	adds	r2, r5, r2
   15f78:	b292      	uxth	r2, r2
   15f7a:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
   15f7c:	4b68      	ldr	r3, [pc, #416]	; (16120 <hif_send+0x1dc>)
   15f7e:	4798      	blx	r3
   15f80:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
   15f82:	d000      	beq.n	15f86 <hif_send+0x42>
   15f84:	e0c0      	b.n	16108 <hif_send+0x1c4>
	{
		volatile uint32 reg, dma_addr = 0;
   15f86:	2300      	movs	r3, #0
   15f88:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
   15f8a:	aa02      	add	r2, sp, #8
   15f8c:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   15f8e:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
   15f90:	9b04      	ldr	r3, [sp, #16]
   15f92:	465a      	mov	r2, fp
   15f94:	431a      	orrs	r2, r3
   15f96:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
   15f98:	9a04      	ldr	r2, [sp, #16]
   15f9a:	4653      	mov	r3, sl
   15f9c:	021b      	lsls	r3, r3, #8
   15f9e:	4313      	orrs	r3, r2
   15fa0:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
   15fa2:	ab07      	add	r3, sp, #28
   15fa4:	885b      	ldrh	r3, [r3, #2]
   15fa6:	9a04      	ldr	r2, [sp, #16]
   15fa8:	041b      	lsls	r3, r3, #16
   15faa:	4313      	orrs	r3, r2
   15fac:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   15fae:	9904      	ldr	r1, [sp, #16]
   15fb0:	485c      	ldr	r0, [pc, #368]	; (16124 <hif_send+0x1e0>)
   15fb2:	4b5d      	ldr	r3, [pc, #372]	; (16128 <hif_send+0x1e4>)
   15fb4:	4798      	blx	r3
   15fb6:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
   15fb8:	d156      	bne.n	16068 <hif_send+0x124>

		reg = 0UL;
   15fba:	2300      	movs	r3, #0
   15fbc:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
   15fbe:	9b04      	ldr	r3, [sp, #16]
   15fc0:	2202      	movs	r2, #2
   15fc2:	4313      	orrs	r3, r2
   15fc4:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   15fc6:	9904      	ldr	r1, [sp, #16]
   15fc8:	4858      	ldr	r0, [pc, #352]	; (1612c <hif_send+0x1e8>)
   15fca:	4b57      	ldr	r3, [pc, #348]	; (16128 <hif_send+0x1e4>)
   15fcc:	4798      	blx	r3
   15fce:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
   15fd0:	d14a      	bne.n	16068 <hif_send+0x124>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   15fd2:	2200      	movs	r2, #0
   15fd4:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   15fd6:	ab02      	add	r3, sp, #8
   15fd8:	80da      	strh	r2, [r3, #6]
   15fda:	3306      	adds	r3, #6
   15fdc:	881b      	ldrh	r3, [r3, #0]
   15fde:	b29b      	uxth	r3, r3
   15fe0:	4a53      	ldr	r2, [pc, #332]	; (16130 <hif_send+0x1ec>)
   15fe2:	4293      	cmp	r3, r2
   15fe4:	d848      	bhi.n	16078 <hif_send+0x134>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   15fe6:	4c53      	ldr	r4, [pc, #332]	; (16134 <hif_send+0x1f0>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
   15fe8:	4b53      	ldr	r3, [pc, #332]	; (16138 <hif_send+0x1f4>)
   15fea:	469a      	mov	sl, r3
   15fec:	e017      	b.n	1601e <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
   15fee:	ab07      	add	r3, sp, #28
   15ff0:	885a      	ldrh	r2, [r3, #2]
   15ff2:	9900      	ldr	r1, [sp, #0]
   15ff4:	468c      	mov	ip, r1
   15ff6:	4462      	add	r2, ip
   15ff8:	b292      	uxth	r2, r2
   15ffa:	805a      	strh	r2, [r3, #2]
   15ffc:	e7be      	b.n	15f7c <hif_send+0x38>
				nm_bsp_sleep(1);
   15ffe:	2001      	movs	r0, #1
   16000:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
   16002:	9b04      	ldr	r3, [sp, #16]
   16004:	079b      	lsls	r3, r3, #30
   16006:	d527      	bpl.n	16058 <hif_send+0x114>
		for(cnt = 0; cnt < 1000; cnt ++)
   16008:	ab02      	add	r3, sp, #8
   1600a:	88da      	ldrh	r2, [r3, #6]
   1600c:	3201      	adds	r2, #1
   1600e:	b292      	uxth	r2, r2
   16010:	80da      	strh	r2, [r3, #6]
   16012:	3306      	adds	r3, #6
   16014:	881b      	ldrh	r3, [r3, #0]
   16016:	b29b      	uxth	r3, r3
   16018:	4a45      	ldr	r2, [pc, #276]	; (16130 <hif_send+0x1ec>)
   1601a:	4293      	cmp	r3, r2
   1601c:	d82c      	bhi.n	16078 <hif_send+0x134>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   1601e:	a904      	add	r1, sp, #16
   16020:	4842      	ldr	r0, [pc, #264]	; (1612c <hif_send+0x1e8>)
   16022:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
   16024:	2800      	cmp	r0, #0
   16026:	d127      	bne.n	16078 <hif_send+0x134>
			if(cnt >= 500) {
   16028:	ab02      	add	r3, sp, #8
   1602a:	3306      	adds	r3, #6
   1602c:	881b      	ldrh	r3, [r3, #0]
   1602e:	b29b      	uxth	r3, r3
   16030:	22f4      	movs	r2, #244	; 0xf4
   16032:	32ff      	adds	r2, #255	; 0xff
   16034:	4293      	cmp	r3, r2
   16036:	d9e4      	bls.n	16002 <hif_send+0xbe>
				if(cnt < 501) {
   16038:	ab02      	add	r3, sp, #8
   1603a:	3306      	adds	r3, #6
   1603c:	881b      	ldrh	r3, [r3, #0]
   1603e:	b29b      	uxth	r3, r3
   16040:	3201      	adds	r2, #1
   16042:	4293      	cmp	r3, r2
   16044:	d8db      	bhi.n	15ffe <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
   16046:	483d      	ldr	r0, [pc, #244]	; (1613c <hif_send+0x1f8>)
   16048:	4b3d      	ldr	r3, [pc, #244]	; (16140 <hif_send+0x1fc>)
   1604a:	469b      	mov	fp, r3
   1604c:	4798      	blx	r3
   1604e:	483d      	ldr	r0, [pc, #244]	; (16144 <hif_send+0x200>)
   16050:	47d8      	blx	fp
   16052:	483d      	ldr	r0, [pc, #244]	; (16148 <hif_send+0x204>)
   16054:	47d8      	blx	fp
   16056:	e7d2      	b.n	15ffe <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   16058:	a905      	add	r1, sp, #20
   1605a:	483c      	ldr	r0, [pc, #240]	; (1614c <hif_send+0x208>)
   1605c:	4b35      	ldr	r3, [pc, #212]	; (16134 <hif_send+0x1f0>)
   1605e:	4798      	blx	r3
   16060:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
   16062:	d009      	beq.n	16078 <hif_send+0x134>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   16064:	2300      	movs	r3, #0
   16066:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   16068:	4b39      	ldr	r3, [pc, #228]	; (16150 <hif_send+0x20c>)
   1606a:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
   1606c:	0020      	movs	r0, r4
   1606e:	b009      	add	sp, #36	; 0x24
   16070:	bc0c      	pop	{r2, r3}
   16072:	4692      	mov	sl, r2
   16074:	469b      	mov	fp, r3
   16076:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
   16078:	9b05      	ldr	r3, [sp, #20]
   1607a:	2b00      	cmp	r3, #0
   1607c:	d03f      	beq.n	160fe <hif_send+0x1ba>
			u32CurrAddr = dma_addr;
   1607e:	9b05      	ldr	r3, [sp, #20]
   16080:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   16082:	a907      	add	r1, sp, #28
   16084:	884b      	ldrh	r3, [r1, #2]
   16086:	b29b      	uxth	r3, r3
   16088:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   1608a:	9806      	ldr	r0, [sp, #24]
   1608c:	2208      	movs	r2, #8
   1608e:	4b31      	ldr	r3, [pc, #196]	; (16154 <hif_send+0x210>)
   16090:	4798      	blx	r3
   16092:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
   16094:	d1e8      	bne.n	16068 <hif_send+0x124>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   16096:	9b06      	ldr	r3, [sp, #24]
   16098:	3308      	adds	r3, #8
   1609a:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
   1609c:	9b01      	ldr	r3, [sp, #4]
   1609e:	2b00      	cmp	r3, #0
   160a0:	d00b      	beq.n	160ba <hif_send+0x176>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   160a2:	9806      	ldr	r0, [sp, #24]
   160a4:	9a00      	ldr	r2, [sp, #0]
   160a6:	0019      	movs	r1, r3
   160a8:	4b2a      	ldr	r3, [pc, #168]	; (16154 <hif_send+0x210>)
   160aa:	4798      	blx	r3
   160ac:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
   160ae:	d1db      	bne.n	16068 <hif_send+0x124>
				u32CurrAddr += u16CtrlBufSize;
   160b0:	9b06      	ldr	r3, [sp, #24]
   160b2:	9a00      	ldr	r2, [sp, #0]
   160b4:	4694      	mov	ip, r2
   160b6:	4463      	add	r3, ip
   160b8:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
   160ba:	2f00      	cmp	r7, #0
   160bc:	d00e      	beq.n	160dc <hif_send+0x198>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   160be:	9b06      	ldr	r3, [sp, #24]
   160c0:	9a00      	ldr	r2, [sp, #0]
   160c2:	1aad      	subs	r5, r5, r2
   160c4:	18ed      	adds	r5, r5, r3
   160c6:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   160c8:	9806      	ldr	r0, [sp, #24]
   160ca:	0032      	movs	r2, r6
   160cc:	0039      	movs	r1, r7
   160ce:	4b21      	ldr	r3, [pc, #132]	; (16154 <hif_send+0x210>)
   160d0:	4798      	blx	r3
   160d2:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
   160d4:	d1c8      	bne.n	16068 <hif_send+0x124>
				u32CurrAddr += u16DataSize;
   160d6:	9b06      	ldr	r3, [sp, #24]
   160d8:	18f3      	adds	r3, r6, r3
   160da:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
   160dc:	9b05      	ldr	r3, [sp, #20]
   160de:	009b      	lsls	r3, r3, #2
   160e0:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
   160e2:	9b04      	ldr	r3, [sp, #16]
   160e4:	2202      	movs	r2, #2
   160e6:	4313      	orrs	r3, r2
   160e8:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   160ea:	9904      	ldr	r1, [sp, #16]
   160ec:	481a      	ldr	r0, [pc, #104]	; (16158 <hif_send+0x214>)
   160ee:	4b0e      	ldr	r3, [pc, #56]	; (16128 <hif_send+0x1e4>)
   160f0:	4798      	blx	r3
   160f2:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
   160f4:	d1b8      	bne.n	16068 <hif_send+0x124>
 	ret = hif_chip_sleep();
   160f6:	4b19      	ldr	r3, [pc, #100]	; (1615c <hif_send+0x218>)
   160f8:	4798      	blx	r3
   160fa:	0004      	movs	r4, r0
	return ret;
   160fc:	e7b6      	b.n	1606c <hif_send+0x128>
			ret = hif_chip_sleep();
   160fe:	4b17      	ldr	r3, [pc, #92]	; (1615c <hif_send+0x218>)
   16100:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
   16102:	2403      	movs	r4, #3
   16104:	4264      	negs	r4, r4
			goto ERR2;
   16106:	e7b1      	b.n	1606c <hif_send+0x128>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   16108:	2298      	movs	r2, #152	; 0x98
   1610a:	32ff      	adds	r2, #255	; 0xff
   1610c:	4914      	ldr	r1, [pc, #80]	; (16160 <hif_send+0x21c>)
   1610e:	4815      	ldr	r0, [pc, #84]	; (16164 <hif_send+0x220>)
   16110:	4d0b      	ldr	r5, [pc, #44]	; (16140 <hif_send+0x1fc>)
   16112:	47a8      	blx	r5
   16114:	4814      	ldr	r0, [pc, #80]	; (16168 <hif_send+0x224>)
   16116:	47a8      	blx	r5
   16118:	480b      	ldr	r0, [pc, #44]	; (16148 <hif_send+0x204>)
   1611a:	47a8      	blx	r5
		goto ERR2;
   1611c:	e7a6      	b.n	1606c <hif_send+0x128>
   1611e:	46c0      	nop			; (mov r8, r8)
   16120:	00015eb5 	.word	0x00015eb5
   16124:	0000108c 	.word	0x0000108c
   16128:	000171f9 	.word	0x000171f9
   1612c:	00001078 	.word	0x00001078
   16130:	000003e7 	.word	0x000003e7
   16134:	000171ed 	.word	0x000171ed
   16138:	00015aad 	.word	0x00015aad
   1613c:	00021cd4 	.word	0x00021cd4
   16140:	000148e5 	.word	0x000148e5
   16144:	00021ce0 	.word	0x00021ce0
   16148:	000219c0 	.word	0x000219c0
   1614c:	00150400 	.word	0x00150400
   16150:	00015ef1 	.word	0x00015ef1
   16154:	0001726d 	.word	0x0001726d
   16158:	0000106c 	.word	0x0000106c
   1615c:	00015f0d 	.word	0x00015f0d
   16160:	000219e4 	.word	0x000219e4
   16164:	00021998 	.word	0x00021998
   16168:	00021cf4 	.word	0x00021cf4

0001616c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   1616c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1616e:	46ce      	mov	lr, r9
   16170:	4647      	mov	r7, r8
   16172:	b580      	push	{r7, lr}
   16174:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
   16176:	2200      	movs	r2, #0
   16178:	4bc8      	ldr	r3, [pc, #800]	; (1649c <hif_handle_isr+0x330>)
   1617a:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   1617c:	4699      	mov	r9, r3
   1617e:	4698      	mov	r8, r3
   16180:	e07c      	b.n	1627c <hif_handle_isr+0x110>
				gstrHifCxt.u32RxAddr = address;
   16182:	4bc6      	ldr	r3, [pc, #792]	; (1649c <hif_handle_isr+0x330>)
   16184:	9a05      	ldr	r2, [sp, #20]
   16186:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   16188:	60df      	str	r7, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   1618a:	ad04      	add	r5, sp, #16
   1618c:	2204      	movs	r2, #4
   1618e:	0029      	movs	r1, r5
   16190:	9805      	ldr	r0, [sp, #20]
   16192:	4bc3      	ldr	r3, [pc, #780]	; (164a0 <hif_handle_isr+0x334>)
   16194:	4798      	blx	r3
   16196:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   16198:	886b      	ldrh	r3, [r5, #2]
   1619a:	b29b      	uxth	r3, r3
   1619c:	806b      	strh	r3, [r5, #2]
				if(M2M_SUCCESS != ret)
   1619e:	2800      	cmp	r0, #0
   161a0:	d132      	bne.n	16208 <hif_handle_isr+0x9c>
				if(strHif.u16Length != size)
   161a2:	ab04      	add	r3, sp, #16
   161a4:	885b      	ldrh	r3, [r3, #2]
   161a6:	b29b      	uxth	r3, r3
   161a8:	429f      	cmp	r7, r3
   161aa:	d004      	beq.n	161b6 <hif_handle_isr+0x4a>
					if((size - strHif.u16Length) > 4)
   161ac:	ab04      	add	r3, sp, #16
   161ae:	885b      	ldrh	r3, [r3, #2]
   161b0:	1afb      	subs	r3, r7, r3
   161b2:	2b04      	cmp	r3, #4
   161b4:	dc36      	bgt.n	16224 <hif_handle_isr+0xb8>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   161b6:	ab04      	add	r3, sp, #16
   161b8:	781b      	ldrb	r3, [r3, #0]
   161ba:	2b01      	cmp	r3, #1
   161bc:	d04a      	beq.n	16254 <hif_handle_isr+0xe8>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   161be:	ab04      	add	r3, sp, #16
   161c0:	781b      	ldrb	r3, [r3, #0]
   161c2:	2b02      	cmp	r3, #2
   161c4:	d076      	beq.n	162b4 <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   161c6:	ab04      	add	r3, sp, #16
   161c8:	781b      	ldrb	r3, [r3, #0]
   161ca:	2b04      	cmp	r3, #4
   161cc:	d100      	bne.n	161d0 <hif_handle_isr+0x64>
   161ce:	e08c      	b.n	162ea <hif_handle_isr+0x17e>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   161d0:	ab04      	add	r3, sp, #16
   161d2:	781b      	ldrb	r3, [r3, #0]
   161d4:	2b06      	cmp	r3, #6
   161d6:	d100      	bne.n	161da <hif_handle_isr+0x6e>
   161d8:	e0a2      	b.n	16320 <hif_handle_isr+0x1b4>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   161da:	ab04      	add	r3, sp, #16
   161dc:	781b      	ldrb	r3, [r3, #0]
   161de:	2b07      	cmp	r3, #7
   161e0:	d100      	bne.n	161e4 <hif_handle_isr+0x78>
   161e2:	e0b8      	b.n	16356 <hif_handle_isr+0x1ea>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   161e4:	ab04      	add	r3, sp, #16
   161e6:	781b      	ldrb	r3, [r3, #0]
   161e8:	2b05      	cmp	r3, #5
   161ea:	d100      	bne.n	161ee <hif_handle_isr+0x82>
   161ec:	e0cd      	b.n	1638a <hif_handle_isr+0x21e>
					M2M_ERR("(hif) invalid group ID\n");
   161ee:	2284      	movs	r2, #132	; 0x84
   161f0:	0092      	lsls	r2, r2, #2
   161f2:	49ac      	ldr	r1, [pc, #688]	; (164a4 <hif_handle_isr+0x338>)
   161f4:	48ac      	ldr	r0, [pc, #688]	; (164a8 <hif_handle_isr+0x33c>)
   161f6:	4cad      	ldr	r4, [pc, #692]	; (164ac <hif_handle_isr+0x340>)
   161f8:	47a0      	blx	r4
   161fa:	48ad      	ldr	r0, [pc, #692]	; (164b0 <hif_handle_isr+0x344>)
   161fc:	47a0      	blx	r4
   161fe:	48ad      	ldr	r0, [pc, #692]	; (164b4 <hif_handle_isr+0x348>)
   16200:	47a0      	blx	r4
					ret = M2M_ERR_BUS_FAIL;
   16202:	2406      	movs	r4, #6
   16204:	4264      	negs	r4, r4
   16206:	e106      	b.n	16416 <hif_handle_isr+0x2aa>
					M2M_ERR("(hif) address bus fail\n");
   16208:	22e9      	movs	r2, #233	; 0xe9
   1620a:	0052      	lsls	r2, r2, #1
   1620c:	49a5      	ldr	r1, [pc, #660]	; (164a4 <hif_handle_isr+0x338>)
   1620e:	48a6      	ldr	r0, [pc, #664]	; (164a8 <hif_handle_isr+0x33c>)
   16210:	4da6      	ldr	r5, [pc, #664]	; (164ac <hif_handle_isr+0x340>)
   16212:	47a8      	blx	r5
   16214:	48a8      	ldr	r0, [pc, #672]	; (164b8 <hif_handle_isr+0x34c>)
   16216:	47a8      	blx	r5
   16218:	48a6      	ldr	r0, [pc, #664]	; (164b4 <hif_handle_isr+0x348>)
   1621a:	47a8      	blx	r5
					nm_bsp_interrupt_ctrl(1);
   1621c:	2001      	movs	r0, #1
   1621e:	4ba7      	ldr	r3, [pc, #668]	; (164bc <hif_handle_isr+0x350>)
   16220:	4798      	blx	r3
   16222:	e0f8      	b.n	16416 <hif_handle_isr+0x2aa>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   16224:	22dc      	movs	r2, #220	; 0xdc
   16226:	32ff      	adds	r2, #255	; 0xff
   16228:	499e      	ldr	r1, [pc, #632]	; (164a4 <hif_handle_isr+0x338>)
   1622a:	489f      	ldr	r0, [pc, #636]	; (164a8 <hif_handle_isr+0x33c>)
   1622c:	4c9f      	ldr	r4, [pc, #636]	; (164ac <hif_handle_isr+0x340>)
   1622e:	47a0      	blx	r4
   16230:	a904      	add	r1, sp, #16
   16232:	884a      	ldrh	r2, [r1, #2]
   16234:	b292      	uxth	r2, r2
   16236:	780b      	ldrb	r3, [r1, #0]
   16238:	b2db      	uxtb	r3, r3
   1623a:	7849      	ldrb	r1, [r1, #1]
   1623c:	9100      	str	r1, [sp, #0]
   1623e:	0039      	movs	r1, r7
   16240:	489f      	ldr	r0, [pc, #636]	; (164c0 <hif_handle_isr+0x354>)
   16242:	47a0      	blx	r4
   16244:	489b      	ldr	r0, [pc, #620]	; (164b4 <hif_handle_isr+0x348>)
   16246:	47a0      	blx	r4
						nm_bsp_interrupt_ctrl(1);
   16248:	2001      	movs	r0, #1
   1624a:	4b9c      	ldr	r3, [pc, #624]	; (164bc <hif_handle_isr+0x350>)
   1624c:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   1624e:	2406      	movs	r4, #6
   16250:	4264      	negs	r4, r4
   16252:	e0e0      	b.n	16416 <hif_handle_isr+0x2aa>
					if(gstrHifCxt.pfWifiCb)
   16254:	4b91      	ldr	r3, [pc, #580]	; (1649c <hif_handle_isr+0x330>)
   16256:	691b      	ldr	r3, [r3, #16]
   16258:	2b00      	cmp	r3, #0
   1625a:	d020      	beq.n	1629e <hif_handle_isr+0x132>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1625c:	4b8f      	ldr	r3, [pc, #572]	; (1649c <hif_handle_isr+0x330>)
   1625e:	691b      	ldr	r3, [r3, #16]
   16260:	aa04      	add	r2, sp, #16
   16262:	7850      	ldrb	r0, [r2, #1]
   16264:	b2c0      	uxtb	r0, r0
   16266:	8851      	ldrh	r1, [r2, #2]
   16268:	9a05      	ldr	r2, [sp, #20]
   1626a:	3208      	adds	r2, #8
   1626c:	3908      	subs	r1, #8
   1626e:	b289      	uxth	r1, r1
   16270:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
   16272:	4b8a      	ldr	r3, [pc, #552]	; (1649c <hif_handle_isr+0x330>)
   16274:	789b      	ldrb	r3, [r3, #2]
   16276:	2b00      	cmp	r3, #0
   16278:	d000      	beq.n	1627c <hif_handle_isr+0x110>
   1627a:	e097      	b.n	163ac <hif_handle_isr+0x240>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   1627c:	464b      	mov	r3, r9
   1627e:	78db      	ldrb	r3, [r3, #3]
   16280:	2b00      	cmp	r3, #0
   16282:	d100      	bne.n	16286 <hif_handle_isr+0x11a>
   16284:	e103      	b.n	1648e <hif_handle_isr+0x322>
   16286:	4643      	mov	r3, r8
   16288:	791b      	ldrb	r3, [r3, #4]
   1628a:	2b00      	cmp	r3, #0
   1628c:	d000      	beq.n	16290 <hif_handle_isr+0x124>
   1628e:	e0fe      	b.n	1648e <hif_handle_isr+0x322>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   16290:	4a82      	ldr	r2, [pc, #520]	; (1649c <hif_handle_isr+0x330>)
   16292:	78d3      	ldrb	r3, [r2, #3]
   16294:	3b01      	subs	r3, #1
   16296:	b2db      	uxtb	r3, r3
   16298:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   1629a:	4e8a      	ldr	r6, [pc, #552]	; (164c4 <hif_handle_isr+0x358>)
   1629c:	e0c5      	b.n	1642a <hif_handle_isr+0x2be>
						M2M_ERR("WIFI callback is not registered\n");
   1629e:	22e8      	movs	r2, #232	; 0xe8
   162a0:	32ff      	adds	r2, #255	; 0xff
   162a2:	4980      	ldr	r1, [pc, #512]	; (164a4 <hif_handle_isr+0x338>)
   162a4:	4880      	ldr	r0, [pc, #512]	; (164a8 <hif_handle_isr+0x33c>)
   162a6:	4c81      	ldr	r4, [pc, #516]	; (164ac <hif_handle_isr+0x340>)
   162a8:	47a0      	blx	r4
   162aa:	4887      	ldr	r0, [pc, #540]	; (164c8 <hif_handle_isr+0x35c>)
   162ac:	47a0      	blx	r4
   162ae:	4881      	ldr	r0, [pc, #516]	; (164b4 <hif_handle_isr+0x348>)
   162b0:	47a0      	blx	r4
   162b2:	e7de      	b.n	16272 <hif_handle_isr+0x106>
					if(gstrHifCxt.pfIpCb)
   162b4:	4b79      	ldr	r3, [pc, #484]	; (1649c <hif_handle_isr+0x330>)
   162b6:	695b      	ldr	r3, [r3, #20]
   162b8:	2b00      	cmp	r3, #0
   162ba:	d00b      	beq.n	162d4 <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   162bc:	4b77      	ldr	r3, [pc, #476]	; (1649c <hif_handle_isr+0x330>)
   162be:	695b      	ldr	r3, [r3, #20]
   162c0:	aa04      	add	r2, sp, #16
   162c2:	7850      	ldrb	r0, [r2, #1]
   162c4:	b2c0      	uxtb	r0, r0
   162c6:	8851      	ldrh	r1, [r2, #2]
   162c8:	9a05      	ldr	r2, [sp, #20]
   162ca:	3208      	adds	r2, #8
   162cc:	3908      	subs	r1, #8
   162ce:	b289      	uxth	r1, r1
   162d0:	4798      	blx	r3
   162d2:	e7ce      	b.n	16272 <hif_handle_isr+0x106>
						M2M_ERR("Scoket callback is not registered\n");
   162d4:	22f0      	movs	r2, #240	; 0xf0
   162d6:	32ff      	adds	r2, #255	; 0xff
   162d8:	4972      	ldr	r1, [pc, #456]	; (164a4 <hif_handle_isr+0x338>)
   162da:	4873      	ldr	r0, [pc, #460]	; (164a8 <hif_handle_isr+0x33c>)
   162dc:	4c73      	ldr	r4, [pc, #460]	; (164ac <hif_handle_isr+0x340>)
   162de:	47a0      	blx	r4
   162e0:	487a      	ldr	r0, [pc, #488]	; (164cc <hif_handle_isr+0x360>)
   162e2:	47a0      	blx	r4
   162e4:	4873      	ldr	r0, [pc, #460]	; (164b4 <hif_handle_isr+0x348>)
   162e6:	47a0      	blx	r4
   162e8:	e7c3      	b.n	16272 <hif_handle_isr+0x106>
					if(gstrHifCxt.pfOtaCb)
   162ea:	4b6c      	ldr	r3, [pc, #432]	; (1649c <hif_handle_isr+0x330>)
   162ec:	699b      	ldr	r3, [r3, #24]
   162ee:	2b00      	cmp	r3, #0
   162f0:	d00b      	beq.n	1630a <hif_handle_isr+0x19e>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   162f2:	4b6a      	ldr	r3, [pc, #424]	; (1649c <hif_handle_isr+0x330>)
   162f4:	699b      	ldr	r3, [r3, #24]
   162f6:	aa04      	add	r2, sp, #16
   162f8:	7850      	ldrb	r0, [r2, #1]
   162fa:	b2c0      	uxtb	r0, r0
   162fc:	8851      	ldrh	r1, [r2, #2]
   162fe:	9a05      	ldr	r2, [sp, #20]
   16300:	3208      	adds	r2, #8
   16302:	3908      	subs	r1, #8
   16304:	b289      	uxth	r1, r1
   16306:	4798      	blx	r3
   16308:	e7b3      	b.n	16272 <hif_handle_isr+0x106>
						M2M_ERR("Ota callback is not registered\n");
   1630a:	22f8      	movs	r2, #248	; 0xf8
   1630c:	32ff      	adds	r2, #255	; 0xff
   1630e:	4965      	ldr	r1, [pc, #404]	; (164a4 <hif_handle_isr+0x338>)
   16310:	4865      	ldr	r0, [pc, #404]	; (164a8 <hif_handle_isr+0x33c>)
   16312:	4c66      	ldr	r4, [pc, #408]	; (164ac <hif_handle_isr+0x340>)
   16314:	47a0      	blx	r4
   16316:	486e      	ldr	r0, [pc, #440]	; (164d0 <hif_handle_isr+0x364>)
   16318:	47a0      	blx	r4
   1631a:	4866      	ldr	r0, [pc, #408]	; (164b4 <hif_handle_isr+0x348>)
   1631c:	47a0      	blx	r4
   1631e:	e7a8      	b.n	16272 <hif_handle_isr+0x106>
					if(gstrHifCxt.pfCryptoCb)
   16320:	4b5e      	ldr	r3, [pc, #376]	; (1649c <hif_handle_isr+0x330>)
   16322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16324:	2b00      	cmp	r3, #0
   16326:	d00b      	beq.n	16340 <hif_handle_isr+0x1d4>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   16328:	4b5c      	ldr	r3, [pc, #368]	; (1649c <hif_handle_isr+0x330>)
   1632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1632c:	aa04      	add	r2, sp, #16
   1632e:	7850      	ldrb	r0, [r2, #1]
   16330:	b2c0      	uxtb	r0, r0
   16332:	8851      	ldrh	r1, [r2, #2]
   16334:	9a05      	ldr	r2, [sp, #20]
   16336:	3208      	adds	r2, #8
   16338:	3908      	subs	r1, #8
   1633a:	b289      	uxth	r1, r1
   1633c:	4798      	blx	r3
   1633e:	e798      	b.n	16272 <hif_handle_isr+0x106>
						M2M_ERR("Crypto callback is not registered\n");
   16340:	2280      	movs	r2, #128	; 0x80
   16342:	0092      	lsls	r2, r2, #2
   16344:	4957      	ldr	r1, [pc, #348]	; (164a4 <hif_handle_isr+0x338>)
   16346:	4858      	ldr	r0, [pc, #352]	; (164a8 <hif_handle_isr+0x33c>)
   16348:	4c58      	ldr	r4, [pc, #352]	; (164ac <hif_handle_isr+0x340>)
   1634a:	47a0      	blx	r4
   1634c:	4861      	ldr	r0, [pc, #388]	; (164d4 <hif_handle_isr+0x368>)
   1634e:	47a0      	blx	r4
   16350:	4858      	ldr	r0, [pc, #352]	; (164b4 <hif_handle_isr+0x348>)
   16352:	47a0      	blx	r4
   16354:	e78d      	b.n	16272 <hif_handle_isr+0x106>
					if(gstrHifCxt.pfSigmaCb)
   16356:	4b51      	ldr	r3, [pc, #324]	; (1649c <hif_handle_isr+0x330>)
   16358:	69db      	ldr	r3, [r3, #28]
   1635a:	2b00      	cmp	r3, #0
   1635c:	d00b      	beq.n	16376 <hif_handle_isr+0x20a>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1635e:	4b4f      	ldr	r3, [pc, #316]	; (1649c <hif_handle_isr+0x330>)
   16360:	69db      	ldr	r3, [r3, #28]
   16362:	aa04      	add	r2, sp, #16
   16364:	7850      	ldrb	r0, [r2, #1]
   16366:	b2c0      	uxtb	r0, r0
   16368:	8851      	ldrh	r1, [r2, #2]
   1636a:	9a05      	ldr	r2, [sp, #20]
   1636c:	3208      	adds	r2, #8
   1636e:	3908      	subs	r1, #8
   16370:	b289      	uxth	r1, r1
   16372:	4798      	blx	r3
   16374:	e77d      	b.n	16272 <hif_handle_isr+0x106>
						M2M_ERR("Sigma callback is not registered\n");
   16376:	4a58      	ldr	r2, [pc, #352]	; (164d8 <hif_handle_isr+0x36c>)
   16378:	494a      	ldr	r1, [pc, #296]	; (164a4 <hif_handle_isr+0x338>)
   1637a:	484b      	ldr	r0, [pc, #300]	; (164a8 <hif_handle_isr+0x33c>)
   1637c:	4c4b      	ldr	r4, [pc, #300]	; (164ac <hif_handle_isr+0x340>)
   1637e:	47a0      	blx	r4
   16380:	4856      	ldr	r0, [pc, #344]	; (164dc <hif_handle_isr+0x370>)
   16382:	47a0      	blx	r4
   16384:	484b      	ldr	r0, [pc, #300]	; (164b4 <hif_handle_isr+0x348>)
   16386:	47a0      	blx	r4
   16388:	e773      	b.n	16272 <hif_handle_isr+0x106>
				    if(gstrHifCxt.pfSslCb)
   1638a:	4b44      	ldr	r3, [pc, #272]	; (1649c <hif_handle_isr+0x330>)
   1638c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1638e:	2b00      	cmp	r3, #0
   16390:	d100      	bne.n	16394 <hif_handle_isr+0x228>
   16392:	e76e      	b.n	16272 <hif_handle_isr+0x106>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   16394:	4b41      	ldr	r3, [pc, #260]	; (1649c <hif_handle_isr+0x330>)
   16396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16398:	aa04      	add	r2, sp, #16
   1639a:	7850      	ldrb	r0, [r2, #1]
   1639c:	b2c0      	uxtb	r0, r0
   1639e:	8851      	ldrh	r1, [r2, #2]
   163a0:	9a05      	ldr	r2, [sp, #20]
   163a2:	3208      	adds	r2, #8
   163a4:	3908      	subs	r1, #8
   163a6:	b289      	uxth	r1, r1
   163a8:	4798      	blx	r3
   163aa:	e762      	b.n	16272 <hif_handle_isr+0x106>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   163ac:	4a4c      	ldr	r2, [pc, #304]	; (164e0 <hif_handle_isr+0x374>)
   163ae:	493d      	ldr	r1, [pc, #244]	; (164a4 <hif_handle_isr+0x338>)
   163b0:	483d      	ldr	r0, [pc, #244]	; (164a8 <hif_handle_isr+0x33c>)
   163b2:	4c3e      	ldr	r4, [pc, #248]	; (164ac <hif_handle_isr+0x340>)
   163b4:	47a0      	blx	r4
   163b6:	ab04      	add	r3, sp, #16
   163b8:	7819      	ldrb	r1, [r3, #0]
   163ba:	b2c9      	uxtb	r1, r1
   163bc:	785a      	ldrb	r2, [r3, #1]
   163be:	b2d2      	uxtb	r2, r2
   163c0:	4848      	ldr	r0, [pc, #288]	; (164e4 <hif_handle_isr+0x378>)
   163c2:	47a0      	blx	r4
   163c4:	483b      	ldr	r0, [pc, #236]	; (164b4 <hif_handle_isr+0x348>)
   163c6:	47a0      	blx	r4
					ret = hif_set_rx_done();
   163c8:	4b47      	ldr	r3, [pc, #284]	; (164e8 <hif_handle_isr+0x37c>)
   163ca:	4798      	blx	r3
   163cc:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
   163ce:	d122      	bne.n	16416 <hif_handle_isr+0x2aa>
   163d0:	e754      	b.n	1627c <hif_handle_isr+0x110>
				M2M_ERR("(hif) Wrong Size\n");
   163d2:	4a46      	ldr	r2, [pc, #280]	; (164ec <hif_handle_isr+0x380>)
   163d4:	4933      	ldr	r1, [pc, #204]	; (164a4 <hif_handle_isr+0x338>)
   163d6:	4834      	ldr	r0, [pc, #208]	; (164a8 <hif_handle_isr+0x33c>)
   163d8:	4c34      	ldr	r4, [pc, #208]	; (164ac <hif_handle_isr+0x340>)
   163da:	47a0      	blx	r4
   163dc:	4844      	ldr	r0, [pc, #272]	; (164f0 <hif_handle_isr+0x384>)
   163de:	47a0      	blx	r4
   163e0:	4834      	ldr	r0, [pc, #208]	; (164b4 <hif_handle_isr+0x348>)
   163e2:	47a0      	blx	r4
				ret = M2M_ERR_RCV;
   163e4:	2402      	movs	r4, #2
   163e6:	4264      	negs	r4, r4
   163e8:	e015      	b.n	16416 <hif_handle_isr+0x2aa>
			M2M_ERR("(hif) False interrupt %lx",reg);
   163ea:	4a42      	ldr	r2, [pc, #264]	; (164f4 <hif_handle_isr+0x388>)
   163ec:	492d      	ldr	r1, [pc, #180]	; (164a4 <hif_handle_isr+0x338>)
   163ee:	482e      	ldr	r0, [pc, #184]	; (164a8 <hif_handle_isr+0x33c>)
   163f0:	4c2e      	ldr	r4, [pc, #184]	; (164ac <hif_handle_isr+0x340>)
   163f2:	47a0      	blx	r4
   163f4:	9903      	ldr	r1, [sp, #12]
   163f6:	4840      	ldr	r0, [pc, #256]	; (164f8 <hif_handle_isr+0x38c>)
   163f8:	47a0      	blx	r4
   163fa:	482e      	ldr	r0, [pc, #184]	; (164b4 <hif_handle_isr+0x348>)
   163fc:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   163fe:	240c      	movs	r4, #12
   16400:	4264      	negs	r4, r4
   16402:	e008      	b.n	16416 <hif_handle_isr+0x2aa>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   16404:	4a3d      	ldr	r2, [pc, #244]	; (164fc <hif_handle_isr+0x390>)
   16406:	4927      	ldr	r1, [pc, #156]	; (164a4 <hif_handle_isr+0x338>)
   16408:	4827      	ldr	r0, [pc, #156]	; (164a8 <hif_handle_isr+0x33c>)
   1640a:	4d28      	ldr	r5, [pc, #160]	; (164ac <hif_handle_isr+0x340>)
   1640c:	47a8      	blx	r5
   1640e:	483c      	ldr	r0, [pc, #240]	; (16500 <hif_handle_isr+0x394>)
   16410:	47a8      	blx	r5
   16412:	4828      	ldr	r0, [pc, #160]	; (164b4 <hif_handle_isr+0x348>)
   16414:	47a8      	blx	r5
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   16416:	4a3b      	ldr	r2, [pc, #236]	; (16504 <hif_handle_isr+0x398>)
   16418:	493b      	ldr	r1, [pc, #236]	; (16508 <hif_handle_isr+0x39c>)
   1641a:	4823      	ldr	r0, [pc, #140]	; (164a8 <hif_handle_isr+0x33c>)
   1641c:	4d23      	ldr	r5, [pc, #140]	; (164ac <hif_handle_isr+0x340>)
   1641e:	47a8      	blx	r5
   16420:	0021      	movs	r1, r4
   16422:	483a      	ldr	r0, [pc, #232]	; (1650c <hif_handle_isr+0x3a0>)
   16424:	47a8      	blx	r5
   16426:	4823      	ldr	r0, [pc, #140]	; (164b4 <hif_handle_isr+0x348>)
   16428:	47a8      	blx	r5
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   1642a:	a903      	add	r1, sp, #12
   1642c:	4838      	ldr	r0, [pc, #224]	; (16510 <hif_handle_isr+0x3a4>)
   1642e:	47b0      	blx	r6
   16430:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
   16432:	d1e7      	bne.n	16404 <hif_handle_isr+0x298>
		if(reg & 0x1)	/* New interrupt has been received */
   16434:	9b03      	ldr	r3, [sp, #12]
   16436:	07db      	lsls	r3, r3, #31
   16438:	d5d7      	bpl.n	163ea <hif_handle_isr+0x27e>
			nm_bsp_interrupt_ctrl(0);
   1643a:	2000      	movs	r0, #0
   1643c:	4b1f      	ldr	r3, [pc, #124]	; (164bc <hif_handle_isr+0x350>)
   1643e:	4798      	blx	r3
			reg &= ~NBIT0;
   16440:	2301      	movs	r3, #1
   16442:	9903      	ldr	r1, [sp, #12]
   16444:	4399      	bics	r1, r3
   16446:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   16448:	4831      	ldr	r0, [pc, #196]	; (16510 <hif_handle_isr+0x3a4>)
   1644a:	4b32      	ldr	r3, [pc, #200]	; (16514 <hif_handle_isr+0x3a8>)
   1644c:	4798      	blx	r3
   1644e:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
   16450:	d1e1      	bne.n	16416 <hif_handle_isr+0x2aa>
			gstrHifCxt.u8HifRXDone = 1;
   16452:	2201      	movs	r2, #1
   16454:	4b11      	ldr	r3, [pc, #68]	; (1649c <hif_handle_isr+0x330>)
   16456:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   16458:	9b03      	ldr	r3, [sp, #12]
   1645a:	049f      	lsls	r7, r3, #18
   1645c:	0d3f      	lsrs	r7, r7, #20
			if (size > 0) {
   1645e:	d0b8      	beq.n	163d2 <hif_handle_isr+0x266>
				uint32 address = 0;
   16460:	2300      	movs	r3, #0
   16462:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   16464:	a905      	add	r1, sp, #20
   16466:	482c      	ldr	r0, [pc, #176]	; (16518 <hif_handle_isr+0x3ac>)
   16468:	4b16      	ldr	r3, [pc, #88]	; (164c4 <hif_handle_isr+0x358>)
   1646a:	4798      	blx	r3
   1646c:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
   1646e:	d100      	bne.n	16472 <hif_handle_isr+0x306>
   16470:	e687      	b.n	16182 <hif_handle_isr+0x16>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   16472:	22e4      	movs	r2, #228	; 0xe4
   16474:	0052      	lsls	r2, r2, #1
   16476:	490b      	ldr	r1, [pc, #44]	; (164a4 <hif_handle_isr+0x338>)
   16478:	480b      	ldr	r0, [pc, #44]	; (164a8 <hif_handle_isr+0x33c>)
   1647a:	4d0c      	ldr	r5, [pc, #48]	; (164ac <hif_handle_isr+0x340>)
   1647c:	47a8      	blx	r5
   1647e:	4827      	ldr	r0, [pc, #156]	; (1651c <hif_handle_isr+0x3b0>)
   16480:	47a8      	blx	r5
   16482:	480c      	ldr	r0, [pc, #48]	; (164b4 <hif_handle_isr+0x348>)
   16484:	47a8      	blx	r5
					nm_bsp_interrupt_ctrl(1);
   16486:	2001      	movs	r0, #1
   16488:	4b0c      	ldr	r3, [pc, #48]	; (164bc <hif_handle_isr+0x350>)
   1648a:	4798      	blx	r3
   1648c:	e7c3      	b.n	16416 <hif_handle_isr+0x2aa>
			}
		}
	}

	return ret;
}
   1648e:	2000      	movs	r0, #0
   16490:	b007      	add	sp, #28
   16492:	bc0c      	pop	{r2, r3}
   16494:	4690      	mov	r8, r2
   16496:	4699      	mov	r9, r3
   16498:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1649a:	46c0      	nop			; (mov r8, r8)
   1649c:	20003d98 	.word	0x20003d98
   164a0:	00017205 	.word	0x00017205
   164a4:	000219f0 	.word	0x000219f0
   164a8:	00021998 	.word	0x00021998
   164ac:	000148e5 	.word	0x000148e5
   164b0:	00021b54 	.word	0x00021b54
   164b4:	000219c0 	.word	0x000219c0
   164b8:	00021a4c 	.word	0x00021a4c
   164bc:	00015b45 	.word	0x00015b45
   164c0:	00021a64 	.word	0x00021a64
   164c4:	000171ed 	.word	0x000171ed
   164c8:	00021aa4 	.word	0x00021aa4
   164cc:	00021ac8 	.word	0x00021ac8
   164d0:	00021aec 	.word	0x00021aec
   164d4:	00021b0c 	.word	0x00021b0c
   164d8:	00000207 	.word	0x00000207
   164dc:	00021b30 	.word	0x00021b30
   164e0:	00000216 	.word	0x00000216
   164e4:	00021b6c 	.word	0x00021b6c
   164e8:	00015e71 	.word	0x00015e71
   164ec:	0000021d 	.word	0x0000021d
   164f0:	00021b98 	.word	0x00021b98
   164f4:	00000225 	.word	0x00000225
   164f8:	00021bac 	.word	0x00021bac
   164fc:	0000022e 	.word	0x0000022e
   16500:	00021bc8 	.word	0x00021bc8
   16504:	00000257 	.word	0x00000257
   16508:	000219f8 	.word	0x000219f8
   1650c:	00021bec 	.word	0x00021bec
   16510:	00001070 	.word	0x00001070
   16514:	000171f9 	.word	0x000171f9
   16518:	00001084 	.word	0x00001084
   1651c:	00021a24 	.word	0x00021a24

00016520 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   16520:	b570      	push	{r4, r5, r6, lr}
   16522:	0014      	movs	r4, r2
   16524:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   16526:	2800      	cmp	r0, #0
   16528:	d003      	beq.n	16532 <hif_receive+0x12>
   1652a:	2900      	cmp	r1, #0
   1652c:	d001      	beq.n	16532 <hif_receive+0x12>
   1652e:	2a00      	cmp	r2, #0
   16530:	d111      	bne.n	16556 <hif_receive+0x36>
	{
		if(isDone)
   16532:	2d00      	cmp	r5, #0
   16534:	d002      	beq.n	1653c <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   16536:	4b25      	ldr	r3, [pc, #148]	; (165cc <hif_receive+0xac>)
   16538:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
   1653a:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
   1653c:	229e      	movs	r2, #158	; 0x9e
   1653e:	0092      	lsls	r2, r2, #2
   16540:	4923      	ldr	r1, [pc, #140]	; (165d0 <hif_receive+0xb0>)
   16542:	4824      	ldr	r0, [pc, #144]	; (165d4 <hif_receive+0xb4>)
   16544:	4c24      	ldr	r4, [pc, #144]	; (165d8 <hif_receive+0xb8>)
   16546:	47a0      	blx	r4
   16548:	4824      	ldr	r0, [pc, #144]	; (165dc <hif_receive+0xbc>)
   1654a:	47a0      	blx	r4
   1654c:	4824      	ldr	r0, [pc, #144]	; (165e0 <hif_receive+0xc0>)
   1654e:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   16550:	200c      	movs	r0, #12
   16552:	4240      	negs	r0, r0
   16554:	e7f1      	b.n	1653a <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
   16556:	4b23      	ldr	r3, [pc, #140]	; (165e4 <hif_receive+0xc4>)
   16558:	68db      	ldr	r3, [r3, #12]
   1655a:	429a      	cmp	r2, r3
   1655c:	d81a      	bhi.n	16594 <hif_receive+0x74>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   1655e:	4b21      	ldr	r3, [pc, #132]	; (165e4 <hif_receive+0xc4>)
   16560:	689b      	ldr	r3, [r3, #8]
   16562:	4298      	cmp	r0, r3
   16564:	d326      	bcc.n	165b4 <hif_receive+0x94>
   16566:	1886      	adds	r6, r0, r2
   16568:	4a1e      	ldr	r2, [pc, #120]	; (165e4 <hif_receive+0xc4>)
   1656a:	6893      	ldr	r3, [r2, #8]
   1656c:	68d2      	ldr	r2, [r2, #12]
   1656e:	189b      	adds	r3, r3, r2
   16570:	429e      	cmp	r6, r3
   16572:	d81f      	bhi.n	165b4 <hif_receive+0x94>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   16574:	0022      	movs	r2, r4
   16576:	4b1c      	ldr	r3, [pc, #112]	; (165e8 <hif_receive+0xc8>)
   16578:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
   1657a:	2800      	cmp	r0, #0
   1657c:	d1dd      	bne.n	1653a <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   1657e:	4a19      	ldr	r2, [pc, #100]	; (165e4 <hif_receive+0xc4>)
   16580:	6893      	ldr	r3, [r2, #8]
   16582:	68d2      	ldr	r2, [r2, #12]
   16584:	189b      	adds	r3, r3, r2
   16586:	429e      	cmp	r6, r3
   16588:	d001      	beq.n	1658e <hif_receive+0x6e>
   1658a:	2d00      	cmp	r5, #0
   1658c:	d0d5      	beq.n	1653a <hif_receive+0x1a>
		ret = hif_set_rx_done();
   1658e:	4b0f      	ldr	r3, [pc, #60]	; (165cc <hif_receive+0xac>)
   16590:	4798      	blx	r3
   16592:	e7d2      	b.n	1653a <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   16594:	22a0      	movs	r2, #160	; 0xa0
   16596:	0092      	lsls	r2, r2, #2
   16598:	490d      	ldr	r1, [pc, #52]	; (165d0 <hif_receive+0xb0>)
   1659a:	480e      	ldr	r0, [pc, #56]	; (165d4 <hif_receive+0xb4>)
   1659c:	4d0e      	ldr	r5, [pc, #56]	; (165d8 <hif_receive+0xb8>)
   1659e:	47a8      	blx	r5
   165a0:	4b10      	ldr	r3, [pc, #64]	; (165e4 <hif_receive+0xc4>)
   165a2:	68da      	ldr	r2, [r3, #12]
   165a4:	0021      	movs	r1, r4
   165a6:	4811      	ldr	r0, [pc, #68]	; (165ec <hif_receive+0xcc>)
   165a8:	47a8      	blx	r5
   165aa:	480d      	ldr	r0, [pc, #52]	; (165e0 <hif_receive+0xc0>)
   165ac:	47a8      	blx	r5
		ret = M2M_ERR_FAIL;
   165ae:	200c      	movs	r0, #12
   165b0:	4240      	negs	r0, r0
		goto ERR1;
   165b2:	e7c2      	b.n	1653a <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   165b4:	4a0e      	ldr	r2, [pc, #56]	; (165f0 <hif_receive+0xd0>)
   165b6:	4906      	ldr	r1, [pc, #24]	; (165d0 <hif_receive+0xb0>)
   165b8:	4806      	ldr	r0, [pc, #24]	; (165d4 <hif_receive+0xb4>)
   165ba:	4c07      	ldr	r4, [pc, #28]	; (165d8 <hif_receive+0xb8>)
   165bc:	47a0      	blx	r4
   165be:	480d      	ldr	r0, [pc, #52]	; (165f4 <hif_receive+0xd4>)
   165c0:	47a0      	blx	r4
   165c2:	4807      	ldr	r0, [pc, #28]	; (165e0 <hif_receive+0xc0>)
   165c4:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
   165c6:	200c      	movs	r0, #12
   165c8:	4240      	negs	r0, r0
		goto ERR1;
   165ca:	e7b6      	b.n	1653a <hif_receive+0x1a>
   165cc:	00015e71 	.word	0x00015e71
   165d0:	00021a08 	.word	0x00021a08
   165d4:	00021998 	.word	0x00021998
   165d8:	000148e5 	.word	0x000148e5
   165dc:	00021c1c 	.word	0x00021c1c
   165e0:	000219c0 	.word	0x000219c0
   165e4:	20003d98 	.word	0x20003d98
   165e8:	00017205 	.word	0x00017205
   165ec:	00021c3c 	.word	0x00021c3c
   165f0:	00000286 	.word	0x00000286
   165f4:	00021c84 	.word	0x00021c84

000165f8 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   165f8:	b570      	push	{r4, r5, r6, lr}
   165fa:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
   165fc:	2807      	cmp	r0, #7
   165fe:	d81f      	bhi.n	16640 <hif_register_cb+0x48>
   16600:	0083      	lsls	r3, r0, #2
   16602:	4a16      	ldr	r2, [pc, #88]	; (1665c <hif_register_cb+0x64>)
   16604:	58d3      	ldr	r3, [r2, r3]
   16606:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   16608:	4b15      	ldr	r3, [pc, #84]	; (16660 <hif_register_cb+0x68>)
   1660a:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
   1660c:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
   1660e:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
   16610:	4b13      	ldr	r3, [pc, #76]	; (16660 <hif_register_cb+0x68>)
   16612:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
   16614:	2000      	movs	r0, #0
			break;
   16616:	e7fa      	b.n	1660e <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
   16618:	4b11      	ldr	r3, [pc, #68]	; (16660 <hif_register_cb+0x68>)
   1661a:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
   1661c:	2000      	movs	r0, #0
			break;
   1661e:	e7f6      	b.n	1660e <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
   16620:	4b0f      	ldr	r3, [pc, #60]	; (16660 <hif_register_cb+0x68>)
   16622:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
   16624:	2000      	movs	r0, #0
			break;
   16626:	e7f2      	b.n	1660e <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
   16628:	4b0d      	ldr	r3, [pc, #52]	; (16660 <hif_register_cb+0x68>)
   1662a:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
   1662c:	2000      	movs	r0, #0
			break;
   1662e:	e7ee      	b.n	1660e <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
   16630:	4b0b      	ldr	r3, [pc, #44]	; (16660 <hif_register_cb+0x68>)
   16632:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
   16634:	2000      	movs	r0, #0
			break;
   16636:	e7ea      	b.n	1660e <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
   16638:	4b09      	ldr	r3, [pc, #36]	; (16660 <hif_register_cb+0x68>)
   1663a:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
   1663c:	2000      	movs	r0, #0
			break;
   1663e:	e7e6      	b.n	1660e <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
   16640:	4a08      	ldr	r2, [pc, #32]	; (16664 <hif_register_cb+0x6c>)
   16642:	4909      	ldr	r1, [pc, #36]	; (16668 <hif_register_cb+0x70>)
   16644:	4809      	ldr	r0, [pc, #36]	; (1666c <hif_register_cb+0x74>)
   16646:	4d0a      	ldr	r5, [pc, #40]	; (16670 <hif_register_cb+0x78>)
   16648:	47a8      	blx	r5
   1664a:	0021      	movs	r1, r4
   1664c:	4809      	ldr	r0, [pc, #36]	; (16674 <hif_register_cb+0x7c>)
   1664e:	47a8      	blx	r5
   16650:	4809      	ldr	r0, [pc, #36]	; (16678 <hif_register_cb+0x80>)
   16652:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
   16654:	200c      	movs	r0, #12
   16656:	4240      	negs	r0, r0
			break;
   16658:	e7d9      	b.n	1660e <hif_register_cb+0x16>
   1665a:	46c0      	nop			; (mov r8, r8)
   1665c:	000219c4 	.word	0x000219c4
   16660:	20003d98 	.word	0x20003d98
   16664:	000002be 	.word	0x000002be
   16668:	00021a14 	.word	0x00021a14
   1666c:	00021998 	.word	0x00021998
   16670:	000148e5 	.word	0x000148e5
   16674:	00021cc8 	.word	0x00021cc8
   16678:	000219c0 	.word	0x000219c0

0001667c <hif_init>:
{
   1667c:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   1667e:	222c      	movs	r2, #44	; 0x2c
   16680:	2100      	movs	r1, #0
   16682:	4806      	ldr	r0, [pc, #24]	; (1669c <hif_init+0x20>)
   16684:	4b06      	ldr	r3, [pc, #24]	; (166a0 <hif_init+0x24>)
   16686:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   16688:	4806      	ldr	r0, [pc, #24]	; (166a4 <hif_init+0x28>)
   1668a:	4b07      	ldr	r3, [pc, #28]	; (166a8 <hif_init+0x2c>)
   1668c:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   1668e:	4907      	ldr	r1, [pc, #28]	; (166ac <hif_init+0x30>)
   16690:	2003      	movs	r0, #3
   16692:	4b07      	ldr	r3, [pc, #28]	; (166b0 <hif_init+0x34>)
   16694:	4798      	blx	r3
}
   16696:	2000      	movs	r0, #0
   16698:	bd10      	pop	{r4, pc}
   1669a:	46c0      	nop			; (mov r8, r8)
   1669c:	20003d98 	.word	0x20003d98
   166a0:	00015e31 	.word	0x00015e31
   166a4:	00015e5d 	.word	0x00015e5d
   166a8:	00015aed 	.word	0x00015aed
   166ac:	00015e6d 	.word	0x00015e6d
   166b0:	000165f9 	.word	0x000165f9

000166b4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   166b4:	b530      	push	{r4, r5, lr}
   166b6:	b09f      	sub	sp, #124	; 0x7c
   166b8:	0004      	movs	r4, r0
   166ba:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   166bc:	282c      	cmp	r0, #44	; 0x2c
   166be:	d02e      	beq.n	1671e <m2m_wifi_cb+0x6a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   166c0:	281b      	cmp	r0, #27
   166c2:	d03c      	beq.n	1673e <m2m_wifi_cb+0x8a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   166c4:	2806      	cmp	r0, #6
   166c6:	d04a      	beq.n	1675e <m2m_wifi_cb+0xaa>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   166c8:	280e      	cmp	r0, #14
   166ca:	d026      	beq.n	1671a <m2m_wifi_cb+0x66>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   166cc:	2832      	cmp	r0, #50	; 0x32
   166ce:	d056      	beq.n	1677e <m2m_wifi_cb+0xca>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   166d0:	282f      	cmp	r0, #47	; 0x2f
   166d2:	d064      	beq.n	1679e <m2m_wifi_cb+0xea>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   166d4:	2834      	cmp	r0, #52	; 0x34
   166d6:	d100      	bne.n	166da <m2m_wifi_cb+0x26>
   166d8:	e076      	b.n	167c8 <m2m_wifi_cb+0x114>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   166da:	2811      	cmp	r0, #17
   166dc:	d100      	bne.n	166e0 <m2m_wifi_cb+0x2c>
   166de:	e094      	b.n	1680a <m2m_wifi_cb+0x156>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   166e0:	2813      	cmp	r0, #19
   166e2:	d100      	bne.n	166e6 <m2m_wifi_cb+0x32>
   166e4:	e0aa      	b.n	1683c <m2m_wifi_cb+0x188>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   166e6:	2804      	cmp	r0, #4
   166e8:	d100      	bne.n	166ec <m2m_wifi_cb+0x38>
   166ea:	e0b9      	b.n	16860 <m2m_wifi_cb+0x1ac>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   166ec:	2865      	cmp	r0, #101	; 0x65
   166ee:	d100      	bne.n	166f2 <m2m_wifi_cb+0x3e>
   166f0:	e0c8      	b.n	16884 <m2m_wifi_cb+0x1d0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   166f2:	2809      	cmp	r0, #9
   166f4:	d100      	bne.n	166f8 <m2m_wifi_cb+0x44>
   166f6:	e0d7      	b.n	168a8 <m2m_wifi_cb+0x1f4>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   166f8:	282a      	cmp	r0, #42	; 0x2a
   166fa:	d100      	bne.n	166fe <m2m_wifi_cb+0x4a>
   166fc:	e0e6      	b.n	168cc <m2m_wifi_cb+0x218>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   166fe:	2820      	cmp	r0, #32
   16700:	d100      	bne.n	16704 <m2m_wifi_cb+0x50>
   16702:	e0f5      	b.n	168f0 <m2m_wifi_cb+0x23c>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   16704:	2224      	movs	r2, #36	; 0x24
   16706:	32ff      	adds	r2, #255	; 0xff
   16708:	4988      	ldr	r1, [pc, #544]	; (1692c <m2m_wifi_cb+0x278>)
   1670a:	4889      	ldr	r0, [pc, #548]	; (16930 <m2m_wifi_cb+0x27c>)
   1670c:	4d89      	ldr	r5, [pc, #548]	; (16934 <m2m_wifi_cb+0x280>)
   1670e:	47a8      	blx	r5
   16710:	0021      	movs	r1, r4
   16712:	4889      	ldr	r0, [pc, #548]	; (16938 <m2m_wifi_cb+0x284>)
   16714:	47a8      	blx	r5
   16716:	4889      	ldr	r0, [pc, #548]	; (1693c <m2m_wifi_cb+0x288>)
   16718:	47a8      	blx	r5
	}
}
   1671a:	b01f      	add	sp, #124	; 0x7c
   1671c:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   1671e:	2300      	movs	r3, #0
   16720:	2204      	movs	r2, #4
   16722:	a903      	add	r1, sp, #12
   16724:	0028      	movs	r0, r5
   16726:	4c86      	ldr	r4, [pc, #536]	; (16940 <m2m_wifi_cb+0x28c>)
   16728:	47a0      	blx	r4
   1672a:	2800      	cmp	r0, #0
   1672c:	d1f5      	bne.n	1671a <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1672e:	4b85      	ldr	r3, [pc, #532]	; (16944 <m2m_wifi_cb+0x290>)
   16730:	681b      	ldr	r3, [r3, #0]
   16732:	2b00      	cmp	r3, #0
   16734:	d0f1      	beq.n	1671a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   16736:	a903      	add	r1, sp, #12
   16738:	302c      	adds	r0, #44	; 0x2c
   1673a:	4798      	blx	r3
   1673c:	e7ed      	b.n	1671a <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   1673e:	2300      	movs	r3, #0
   16740:	2208      	movs	r2, #8
   16742:	a903      	add	r1, sp, #12
   16744:	0028      	movs	r0, r5
   16746:	4c7e      	ldr	r4, [pc, #504]	; (16940 <m2m_wifi_cb+0x28c>)
   16748:	47a0      	blx	r4
   1674a:	2800      	cmp	r0, #0
   1674c:	d1e5      	bne.n	1671a <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1674e:	4b7d      	ldr	r3, [pc, #500]	; (16944 <m2m_wifi_cb+0x290>)
   16750:	681b      	ldr	r3, [r3, #0]
   16752:	2b00      	cmp	r3, #0
   16754:	d0e1      	beq.n	1671a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   16756:	a903      	add	r1, sp, #12
   16758:	301b      	adds	r0, #27
   1675a:	4798      	blx	r3
   1675c:	e7dd      	b.n	1671a <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   1675e:	2301      	movs	r3, #1
   16760:	2230      	movs	r2, #48	; 0x30
   16762:	a903      	add	r1, sp, #12
   16764:	0028      	movs	r0, r5
   16766:	4c76      	ldr	r4, [pc, #472]	; (16940 <m2m_wifi_cb+0x28c>)
   16768:	47a0      	blx	r4
   1676a:	2800      	cmp	r0, #0
   1676c:	d1d5      	bne.n	1671a <m2m_wifi_cb+0x66>
			if(gpfAppWifiCb)
   1676e:	4b75      	ldr	r3, [pc, #468]	; (16944 <m2m_wifi_cb+0x290>)
   16770:	681b      	ldr	r3, [r3, #0]
   16772:	2b00      	cmp	r3, #0
   16774:	d0d1      	beq.n	1671a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   16776:	a903      	add	r1, sp, #12
   16778:	3006      	adds	r0, #6
   1677a:	4798      	blx	r3
   1677c:	e7cd      	b.n	1671a <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   1677e:	2300      	movs	r3, #0
   16780:	2218      	movs	r2, #24
   16782:	a903      	add	r1, sp, #12
   16784:	0028      	movs	r0, r5
   16786:	4c6e      	ldr	r4, [pc, #440]	; (16940 <m2m_wifi_cb+0x28c>)
   16788:	47a0      	blx	r4
   1678a:	2800      	cmp	r0, #0
   1678c:	d1c5      	bne.n	1671a <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1678e:	4b6d      	ldr	r3, [pc, #436]	; (16944 <m2m_wifi_cb+0x290>)
   16790:	681b      	ldr	r3, [r3, #0]
   16792:	2b00      	cmp	r3, #0
   16794:	d0c1      	beq.n	1671a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   16796:	a903      	add	r1, sp, #12
   16798:	3032      	adds	r0, #50	; 0x32
   1679a:	4798      	blx	r3
   1679c:	e7bd      	b.n	1671a <m2m_wifi_cb+0x66>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   1679e:	2264      	movs	r2, #100	; 0x64
   167a0:	2100      	movs	r1, #0
   167a2:	a803      	add	r0, sp, #12
   167a4:	4b68      	ldr	r3, [pc, #416]	; (16948 <m2m_wifi_cb+0x294>)
   167a6:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   167a8:	2300      	movs	r3, #0
   167aa:	2264      	movs	r2, #100	; 0x64
   167ac:	a903      	add	r1, sp, #12
   167ae:	0028      	movs	r0, r5
   167b0:	4c63      	ldr	r4, [pc, #396]	; (16940 <m2m_wifi_cb+0x28c>)
   167b2:	47a0      	blx	r4
   167b4:	2800      	cmp	r0, #0
   167b6:	d1b0      	bne.n	1671a <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   167b8:	4b62      	ldr	r3, [pc, #392]	; (16944 <m2m_wifi_cb+0x290>)
   167ba:	681b      	ldr	r3, [r3, #0]
   167bc:	2b00      	cmp	r3, #0
   167be:	d0ac      	beq.n	1671a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   167c0:	a903      	add	r1, sp, #12
   167c2:	302f      	adds	r0, #47	; 0x2f
   167c4:	4798      	blx	r3
   167c6:	e7a8      	b.n	1671a <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   167c8:	2300      	movs	r3, #0
   167ca:	2204      	movs	r2, #4
   167cc:	a903      	add	r1, sp, #12
   167ce:	0028      	movs	r0, r5
   167d0:	4c5b      	ldr	r4, [pc, #364]	; (16940 <m2m_wifi_cb+0x28c>)
   167d2:	47a0      	blx	r4
   167d4:	2800      	cmp	r0, #0
   167d6:	d1a0      	bne.n	1671a <m2m_wifi_cb+0x66>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   167d8:	485c      	ldr	r0, [pc, #368]	; (1694c <m2m_wifi_cb+0x298>)
   167da:	4d56      	ldr	r5, [pc, #344]	; (16934 <m2m_wifi_cb+0x280>)
   167dc:	47a8      	blx	r5
   167de:	9c03      	ldr	r4, [sp, #12]
   167e0:	0a23      	lsrs	r3, r4, #8
   167e2:	20ff      	movs	r0, #255	; 0xff
   167e4:	4003      	ands	r3, r0
   167e6:	0c22      	lsrs	r2, r4, #16
   167e8:	4002      	ands	r2, r0
   167ea:	0e21      	lsrs	r1, r4, #24
   167ec:	4020      	ands	r0, r4
   167ee:	9000      	str	r0, [sp, #0]
   167f0:	4857      	ldr	r0, [pc, #348]	; (16950 <m2m_wifi_cb+0x29c>)
   167f2:	47a8      	blx	r5
   167f4:	4851      	ldr	r0, [pc, #324]	; (1693c <m2m_wifi_cb+0x288>)
   167f6:	47a8      	blx	r5
			if (gpfAppWifiCb)
   167f8:	4b52      	ldr	r3, [pc, #328]	; (16944 <m2m_wifi_cb+0x290>)
   167fa:	681b      	ldr	r3, [r3, #0]
   167fc:	2b00      	cmp	r3, #0
   167fe:	d100      	bne.n	16802 <m2m_wifi_cb+0x14e>
   16800:	e78b      	b.n	1671a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   16802:	2100      	movs	r1, #0
   16804:	2034      	movs	r0, #52	; 0x34
   16806:	4798      	blx	r3
   16808:	e787      	b.n	1671a <m2m_wifi_cb+0x66>
		gu8scanInProgress = 0;
   1680a:	2200      	movs	r2, #0
   1680c:	4b51      	ldr	r3, [pc, #324]	; (16954 <m2m_wifi_cb+0x2a0>)
   1680e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   16810:	2300      	movs	r3, #0
   16812:	3204      	adds	r2, #4
   16814:	a903      	add	r1, sp, #12
   16816:	0028      	movs	r0, r5
   16818:	4c49      	ldr	r4, [pc, #292]	; (16940 <m2m_wifi_cb+0x28c>)
   1681a:	47a0      	blx	r4
   1681c:	2800      	cmp	r0, #0
   1681e:	d000      	beq.n	16822 <m2m_wifi_cb+0x16e>
   16820:	e77b      	b.n	1671a <m2m_wifi_cb+0x66>
			gu8ChNum = strState.u8NumofCh;
   16822:	ab03      	add	r3, sp, #12
   16824:	781a      	ldrb	r2, [r3, #0]
   16826:	4b4c      	ldr	r3, [pc, #304]	; (16958 <m2m_wifi_cb+0x2a4>)
   16828:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   1682a:	4b46      	ldr	r3, [pc, #280]	; (16944 <m2m_wifi_cb+0x290>)
   1682c:	681b      	ldr	r3, [r3, #0]
   1682e:	2b00      	cmp	r3, #0
   16830:	d100      	bne.n	16834 <m2m_wifi_cb+0x180>
   16832:	e772      	b.n	1671a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   16834:	a903      	add	r1, sp, #12
   16836:	3011      	adds	r0, #17
   16838:	4798      	blx	r3
   1683a:	e76e      	b.n	1671a <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   1683c:	2300      	movs	r3, #0
   1683e:	222c      	movs	r2, #44	; 0x2c
   16840:	a903      	add	r1, sp, #12
   16842:	0028      	movs	r0, r5
   16844:	4c3e      	ldr	r4, [pc, #248]	; (16940 <m2m_wifi_cb+0x28c>)
   16846:	47a0      	blx	r4
   16848:	2800      	cmp	r0, #0
   1684a:	d000      	beq.n	1684e <m2m_wifi_cb+0x19a>
   1684c:	e765      	b.n	1671a <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1684e:	4b3d      	ldr	r3, [pc, #244]	; (16944 <m2m_wifi_cb+0x290>)
   16850:	681b      	ldr	r3, [r3, #0]
   16852:	2b00      	cmp	r3, #0
   16854:	d100      	bne.n	16858 <m2m_wifi_cb+0x1a4>
   16856:	e760      	b.n	1671a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   16858:	a903      	add	r1, sp, #12
   1685a:	3013      	adds	r0, #19
   1685c:	4798      	blx	r3
   1685e:	e75c      	b.n	1671a <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   16860:	2300      	movs	r3, #0
   16862:	2204      	movs	r2, #4
   16864:	a91c      	add	r1, sp, #112	; 0x70
   16866:	0028      	movs	r0, r5
   16868:	4c35      	ldr	r4, [pc, #212]	; (16940 <m2m_wifi_cb+0x28c>)
   1686a:	47a0      	blx	r4
   1686c:	2800      	cmp	r0, #0
   1686e:	d000      	beq.n	16872 <m2m_wifi_cb+0x1be>
   16870:	e753      	b.n	1671a <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   16872:	4b34      	ldr	r3, [pc, #208]	; (16944 <m2m_wifi_cb+0x290>)
   16874:	681b      	ldr	r3, [r3, #0]
   16876:	2b00      	cmp	r3, #0
   16878:	d100      	bne.n	1687c <m2m_wifi_cb+0x1c8>
   1687a:	e74e      	b.n	1671a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   1687c:	a91c      	add	r1, sp, #112	; 0x70
   1687e:	3004      	adds	r0, #4
   16880:	4798      	blx	r3
   16882:	e74a      	b.n	1671a <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   16884:	2300      	movs	r3, #0
   16886:	2204      	movs	r2, #4
   16888:	a91c      	add	r1, sp, #112	; 0x70
   1688a:	0028      	movs	r0, r5
   1688c:	4c2c      	ldr	r4, [pc, #176]	; (16940 <m2m_wifi_cb+0x28c>)
   1688e:	47a0      	blx	r4
   16890:	2800      	cmp	r0, #0
   16892:	d000      	beq.n	16896 <m2m_wifi_cb+0x1e2>
   16894:	e741      	b.n	1671a <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   16896:	4b2b      	ldr	r3, [pc, #172]	; (16944 <m2m_wifi_cb+0x290>)
   16898:	681b      	ldr	r3, [r3, #0]
   1689a:	2b00      	cmp	r3, #0
   1689c:	d100      	bne.n	168a0 <m2m_wifi_cb+0x1ec>
   1689e:	e73c      	b.n	1671a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   168a0:	a91c      	add	r1, sp, #112	; 0x70
   168a2:	3065      	adds	r0, #101	; 0x65
   168a4:	4798      	blx	r3
   168a6:	e738      	b.n	1671a <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   168a8:	2301      	movs	r3, #1
   168aa:	2264      	movs	r2, #100	; 0x64
   168ac:	a903      	add	r1, sp, #12
   168ae:	0028      	movs	r0, r5
   168b0:	4c23      	ldr	r4, [pc, #140]	; (16940 <m2m_wifi_cb+0x28c>)
   168b2:	47a0      	blx	r4
   168b4:	2800      	cmp	r0, #0
   168b6:	d000      	beq.n	168ba <m2m_wifi_cb+0x206>
   168b8:	e72f      	b.n	1671a <m2m_wifi_cb+0x66>
			if(gpfAppWifiCb)
   168ba:	4b22      	ldr	r3, [pc, #136]	; (16944 <m2m_wifi_cb+0x290>)
   168bc:	681b      	ldr	r3, [r3, #0]
   168be:	2b00      	cmp	r3, #0
   168c0:	d100      	bne.n	168c4 <m2m_wifi_cb+0x210>
   168c2:	e72a      	b.n	1671a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   168c4:	a903      	add	r1, sp, #12
   168c6:	3009      	adds	r0, #9
   168c8:	4798      	blx	r3
   168ca:	e726      	b.n	1671a <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   168cc:	2301      	movs	r3, #1
   168ce:	2204      	movs	r2, #4
   168d0:	a903      	add	r1, sp, #12
   168d2:	0028      	movs	r0, r5
   168d4:	4c1a      	ldr	r4, [pc, #104]	; (16940 <m2m_wifi_cb+0x28c>)
   168d6:	47a0      	blx	r4
   168d8:	2800      	cmp	r0, #0
   168da:	d000      	beq.n	168de <m2m_wifi_cb+0x22a>
   168dc:	e71d      	b.n	1671a <m2m_wifi_cb+0x66>
			if(gpfAppWifiCb)
   168de:	4b19      	ldr	r3, [pc, #100]	; (16944 <m2m_wifi_cb+0x290>)
   168e0:	681b      	ldr	r3, [r3, #0]
   168e2:	2b00      	cmp	r3, #0
   168e4:	d100      	bne.n	168e8 <m2m_wifi_cb+0x234>
   168e6:	e718      	b.n	1671a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   168e8:	a903      	add	r1, sp, #12
   168ea:	302a      	adds	r0, #42	; 0x2a
   168ec:	4798      	blx	r3
   168ee:	e714      	b.n	1671a <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   168f0:	2300      	movs	r3, #0
   168f2:	2208      	movs	r2, #8
   168f4:	a903      	add	r1, sp, #12
   168f6:	0028      	movs	r0, r5
   168f8:	4c11      	ldr	r4, [pc, #68]	; (16940 <m2m_wifi_cb+0x28c>)
   168fa:	47a0      	blx	r4
   168fc:	2800      	cmp	r0, #0
   168fe:	d000      	beq.n	16902 <m2m_wifi_cb+0x24e>
   16900:	e70b      	b.n	1671a <m2m_wifi_cb+0x66>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   16902:	ab03      	add	r3, sp, #12
   16904:	889a      	ldrh	r2, [r3, #4]
   16906:	0028      	movs	r0, r5
   16908:	3008      	adds	r0, #8
   1690a:	2301      	movs	r3, #1
   1690c:	9903      	ldr	r1, [sp, #12]
   1690e:	4c0c      	ldr	r4, [pc, #48]	; (16940 <m2m_wifi_cb+0x28c>)
   16910:	47a0      	blx	r4
   16912:	2800      	cmp	r0, #0
   16914:	d000      	beq.n	16918 <m2m_wifi_cb+0x264>
   16916:	e700      	b.n	1671a <m2m_wifi_cb+0x66>
				if(gpfAppWifiCb)
   16918:	4b0a      	ldr	r3, [pc, #40]	; (16944 <m2m_wifi_cb+0x290>)
   1691a:	681b      	ldr	r3, [r3, #0]
   1691c:	2b00      	cmp	r3, #0
   1691e:	d100      	bne.n	16922 <m2m_wifi_cb+0x26e>
   16920:	e6fb      	b.n	1671a <m2m_wifi_cb+0x66>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   16922:	a903      	add	r1, sp, #12
   16924:	3020      	adds	r0, #32
   16926:	4798      	blx	r3
   16928:	e6f7      	b.n	1671a <m2m_wifi_cb+0x66>
   1692a:	46c0      	nop			; (mov r8, r8)
   1692c:	00021d14 	.word	0x00021d14
   16930:	00021998 	.word	0x00021998
   16934:	000148e5 	.word	0x000148e5
   16938:	00021d64 	.word	0x00021d64
   1693c:	000219c0 	.word	0x000219c0
   16940:	00016521 	.word	0x00016521
   16944:	200032e4 	.word	0x200032e4
   16948:	00015e31 	.word	0x00015e31
   1694c:	00021cd4 	.word	0x00021cd4
   16950:	00021d44 	.word	0x00021d44
   16954:	200032e9 	.word	0x200032e9
   16958:	200032e8 	.word	0x200032e8

0001695c <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   1695c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1695e:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   16960:	2201      	movs	r2, #1
   16962:	230f      	movs	r3, #15
   16964:	446b      	add	r3, sp
   16966:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   16968:	2800      	cmp	r0, #0
   1696a:	d05f      	beq.n	16a2c <m2m_wifi_init+0xd0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   1696c:	6802      	ldr	r2, [r0, #0]
   1696e:	4b31      	ldr	r3, [pc, #196]	; (16a34 <m2m_wifi_init+0xd8>)
   16970:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   16972:	2200      	movs	r2, #0
   16974:	4b30      	ldr	r3, [pc, #192]	; (16a38 <m2m_wifi_init+0xdc>)
   16976:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   16978:	200f      	movs	r0, #15
   1697a:	4468      	add	r0, sp
   1697c:	4b2f      	ldr	r3, [pc, #188]	; (16a3c <m2m_wifi_init+0xe0>)
   1697e:	4798      	blx	r3
   16980:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   16982:	d002      	beq.n	1698a <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
   16984:	0020      	movs	r0, r4
   16986:	b00f      	add	sp, #60	; 0x3c
   16988:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
   1698a:	2000      	movs	r0, #0
   1698c:	4b2c      	ldr	r3, [pc, #176]	; (16a40 <m2m_wifi_init+0xe4>)
   1698e:	4798      	blx	r3
   16990:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   16992:	d147      	bne.n	16a24 <m2m_wifi_init+0xc8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   16994:	492b      	ldr	r1, [pc, #172]	; (16a44 <m2m_wifi_init+0xe8>)
   16996:	2001      	movs	r0, #1
   16998:	4b2b      	ldr	r3, [pc, #172]	; (16a48 <m2m_wifi_init+0xec>)
   1699a:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
   1699c:	ad04      	add	r5, sp, #16
   1699e:	0028      	movs	r0, r5
   169a0:	4b2a      	ldr	r3, [pc, #168]	; (16a4c <m2m_wifi_init+0xf0>)
   169a2:	4798      	blx	r3
   169a4:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   169a6:	4f2a      	ldr	r7, [pc, #168]	; (16a50 <m2m_wifi_init+0xf4>)
   169a8:	0038      	movs	r0, r7
   169aa:	4e2a      	ldr	r6, [pc, #168]	; (16a54 <m2m_wifi_init+0xf8>)
   169ac:	47b0      	blx	r6
   169ae:	79ab      	ldrb	r3, [r5, #6]
   169b0:	796a      	ldrb	r2, [r5, #5]
   169b2:	7929      	ldrb	r1, [r5, #4]
   169b4:	8c28      	ldrh	r0, [r5, #32]
   169b6:	9000      	str	r0, [sp, #0]
   169b8:	4827      	ldr	r0, [pc, #156]	; (16a58 <m2m_wifi_init+0xfc>)
   169ba:	47b0      	blx	r6
   169bc:	4827      	ldr	r0, [pc, #156]	; (16a5c <m2m_wifi_init+0x100>)
   169be:	47b0      	blx	r6
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   169c0:	0038      	movs	r0, r7
   169c2:	47b0      	blx	r6
   169c4:	2226      	movs	r2, #38	; 0x26
   169c6:	446a      	add	r2, sp
   169c8:	211a      	movs	r1, #26
   169ca:	4469      	add	r1, sp
   169cc:	4824      	ldr	r0, [pc, #144]	; (16a60 <m2m_wifi_init+0x104>)
   169ce:	47b0      	blx	r6
   169d0:	4822      	ldr	r0, [pc, #136]	; (16a5c <m2m_wifi_init+0x100>)
   169d2:	47b0      	blx	r6
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   169d4:	0038      	movs	r0, r7
   169d6:	47b0      	blx	r6
   169d8:	7a6b      	ldrb	r3, [r5, #9]
   169da:	7a2a      	ldrb	r2, [r5, #8]
   169dc:	79e9      	ldrb	r1, [r5, #7]
   169de:	4821      	ldr	r0, [pc, #132]	; (16a64 <m2m_wifi_init+0x108>)
   169e0:	47b0      	blx	r6
   169e2:	481e      	ldr	r0, [pc, #120]	; (16a5c <m2m_wifi_init+0x100>)
   169e4:	47b0      	blx	r6
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   169e6:	0038      	movs	r0, r7
   169e8:	47b0      	blx	r6
   169ea:	2304      	movs	r3, #4
   169ec:	2205      	movs	r2, #5
   169ee:	2113      	movs	r1, #19
   169f0:	481d      	ldr	r0, [pc, #116]	; (16a68 <m2m_wifi_init+0x10c>)
   169f2:	47b0      	blx	r6
   169f4:	4819      	ldr	r0, [pc, #100]	; (16a5c <m2m_wifi_init+0x100>)
   169f6:	47b0      	blx	r6
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   169f8:	0038      	movs	r0, r7
   169fa:	47b0      	blx	r6
   169fc:	4a1b      	ldr	r2, [pc, #108]	; (16a6c <m2m_wifi_init+0x110>)
   169fe:	491c      	ldr	r1, [pc, #112]	; (16a70 <m2m_wifi_init+0x114>)
   16a00:	481c      	ldr	r0, [pc, #112]	; (16a74 <m2m_wifi_init+0x118>)
   16a02:	47b0      	blx	r6
   16a04:	4815      	ldr	r0, [pc, #84]	; (16a5c <m2m_wifi_init+0x100>)
   16a06:	47b0      	blx	r6
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   16a08:	0023      	movs	r3, r4
   16a0a:	330d      	adds	r3, #13
   16a0c:	d1ba      	bne.n	16984 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
   16a0e:	22e8      	movs	r2, #232	; 0xe8
   16a10:	32ff      	adds	r2, #255	; 0xff
   16a12:	4919      	ldr	r1, [pc, #100]	; (16a78 <m2m_wifi_init+0x11c>)
   16a14:	4819      	ldr	r0, [pc, #100]	; (16a7c <m2m_wifi_init+0x120>)
   16a16:	4d0f      	ldr	r5, [pc, #60]	; (16a54 <m2m_wifi_init+0xf8>)
   16a18:	47a8      	blx	r5
   16a1a:	4819      	ldr	r0, [pc, #100]	; (16a80 <m2m_wifi_init+0x124>)
   16a1c:	47a8      	blx	r5
   16a1e:	480f      	ldr	r0, [pc, #60]	; (16a5c <m2m_wifi_init+0x100>)
   16a20:	47a8      	blx	r5
   16a22:	e7af      	b.n	16984 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
   16a24:	2000      	movs	r0, #0
   16a26:	4b17      	ldr	r3, [pc, #92]	; (16a84 <m2m_wifi_init+0x128>)
   16a28:	4798      	blx	r3
   16a2a:	e7ab      	b.n	16984 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   16a2c:	240c      	movs	r4, #12
   16a2e:	4264      	negs	r4, r4
   16a30:	e7a8      	b.n	16984 <m2m_wifi_init+0x28>
   16a32:	46c0      	nop			; (mov r8, r8)
   16a34:	200032e4 	.word	0x200032e4
   16a38:	200032e9 	.word	0x200032e9
   16a3c:	000173b9 	.word	0x000173b9
   16a40:	0001667d 	.word	0x0001667d
   16a44:	000166b5 	.word	0x000166b5
   16a48:	000165f9 	.word	0x000165f9
   16a4c:	000172d5 	.word	0x000172d5
   16a50:	00021cd4 	.word	0x00021cd4
   16a54:	000148e5 	.word	0x000148e5
   16a58:	00021e24 	.word	0x00021e24
   16a5c:	000219c0 	.word	0x000219c0
   16a60:	00021e4c 	.word	0x00021e4c
   16a64:	00021e68 	.word	0x00021e68
   16a68:	00021e8c 	.word	0x00021e8c
   16a6c:	00021ea4 	.word	0x00021ea4
   16a70:	00021eb0 	.word	0x00021eb0
   16a74:	00021ebc 	.word	0x00021ebc
   16a78:	00021d20 	.word	0x00021d20
   16a7c:	00021998 	.word	0x00021998
   16a80:	00021ed4 	.word	0x00021ed4
   16a84:	00017481 	.word	0x00017481

00016a88 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   16a88:	b510      	push	{r4, lr}
	return hif_handle_isr();
   16a8a:	4b01      	ldr	r3, [pc, #4]	; (16a90 <m2m_wifi_handle_events+0x8>)
   16a8c:	4798      	blx	r3
}
   16a8e:	bd10      	pop	{r4, pc}
   16a90:	0001616d 	.word	0x0001616d

00016a94 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   16a94:	b5f0      	push	{r4, r5, r6, r7, lr}
   16a96:	46ce      	mov	lr, r9
   16a98:	4647      	mov	r7, r8
   16a9a:	b580      	push	{r7, lr}
   16a9c:	b0a3      	sub	sp, #140	; 0x8c
   16a9e:	9005      	str	r0, [sp, #20]
   16aa0:	000c      	movs	r4, r1
   16aa2:	0015      	movs	r5, r2
   16aa4:	001f      	movs	r7, r3
   16aa6:	ab2a      	add	r3, sp, #168	; 0xa8
   16aa8:	881b      	ldrh	r3, [r3, #0]
   16aaa:	4699      	mov	r9, r3
   16aac:	ab2b      	add	r3, sp, #172	; 0xac
   16aae:	781b      	ldrb	r3, [r3, #0]
   16ab0:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   16ab2:	2a01      	cmp	r2, #1
   16ab4:	d003      	beq.n	16abe <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
   16ab6:	2f00      	cmp	r7, #0
   16ab8:	d03f      	beq.n	16b3a <m2m_wifi_connect_sc+0xa6>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   16aba:	2a02      	cmp	r2, #2
   16abc:	d049      	beq.n	16b52 <m2m_wifi_connect_sc+0xbe>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   16abe:	1e63      	subs	r3, r4, #1
   16ac0:	2b1f      	cmp	r3, #31
   16ac2:	d900      	bls.n	16ac6 <m2m_wifi_connect_sc+0x32>
   16ac4:	e073      	b.n	16bae <m2m_wifi_connect_sc+0x11a>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   16ac6:	464b      	mov	r3, r9
   16ac8:	3b01      	subs	r3, #1
   16aca:	b29b      	uxth	r3, r3
   16acc:	2b0d      	cmp	r3, #13
   16ace:	d903      	bls.n	16ad8 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   16ad0:	464b      	mov	r3, r9
   16ad2:	2bff      	cmp	r3, #255	; 0xff
   16ad4:	d000      	beq.n	16ad8 <m2m_wifi_connect_sc+0x44>
   16ad6:	e077      	b.n	16bc8 <m2m_wifi_connect_sc+0x134>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   16ad8:	ae07      	add	r6, sp, #28
   16ada:	0022      	movs	r2, r4
   16adc:	9905      	ldr	r1, [sp, #20]
   16ade:	205a      	movs	r0, #90	; 0x5a
   16ae0:	ab02      	add	r3, sp, #8
   16ae2:	469c      	mov	ip, r3
   16ae4:	4460      	add	r0, ip
   16ae6:	4b71      	ldr	r3, [pc, #452]	; (16cac <m2m_wifi_connect_sc+0x218>)
   16ae8:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   16aea:	1934      	adds	r4, r6, r4
   16aec:	3446      	adds	r4, #70	; 0x46
   16aee:	2300      	movs	r3, #0
   16af0:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   16af2:	3344      	adds	r3, #68	; 0x44
   16af4:	464a      	mov	r2, r9
   16af6:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   16af8:	4643      	mov	r3, r8
   16afa:	1e5a      	subs	r2, r3, #1
   16afc:	4193      	sbcs	r3, r2
   16afe:	2267      	movs	r2, #103	; 0x67
   16b00:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
   16b02:	2341      	movs	r3, #65	; 0x41
   16b04:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   16b06:	2d03      	cmp	r5, #3
   16b08:	d06a      	beq.n	16be0 <m2m_wifi_connect_sc+0x14c>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   16b0a:	2d02      	cmp	r5, #2
   16b0c:	d100      	bne.n	16b10 <m2m_wifi_connect_sc+0x7c>
   16b0e:	e0a2      	b.n	16c56 <m2m_wifi_connect_sc+0x1c2>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   16b10:	2d04      	cmp	r5, #4
   16b12:	d100      	bne.n	16b16 <m2m_wifi_connect_sc+0x82>
   16b14:	e0b8      	b.n	16c88 <m2m_wifi_connect_sc+0x1f4>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   16b16:	2d01      	cmp	r5, #1
   16b18:	d000      	beq.n	16b1c <m2m_wifi_connect_sc+0x88>
   16b1a:	e0bb      	b.n	16c94 <m2m_wifi_connect_sc+0x200>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   16b1c:	2300      	movs	r3, #0
   16b1e:	9302      	str	r3, [sp, #8]
   16b20:	9301      	str	r3, [sp, #4]
   16b22:	9300      	str	r3, [sp, #0]
   16b24:	336c      	adds	r3, #108	; 0x6c
   16b26:	aa07      	add	r2, sp, #28
   16b28:	2128      	movs	r1, #40	; 0x28
   16b2a:	2001      	movs	r0, #1
   16b2c:	4c60      	ldr	r4, [pc, #384]	; (16cb0 <m2m_wifi_connect_sc+0x21c>)
   16b2e:	47a0      	blx	r4

ERR1:
	return ret;
}
   16b30:	b023      	add	sp, #140	; 0x8c
   16b32:	bc0c      	pop	{r2, r3}
   16b34:	4690      	mov	r8, r2
   16b36:	4699      	mov	r9, r3
   16b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
   16b3a:	4a5e      	ldr	r2, [pc, #376]	; (16cb4 <m2m_wifi_connect_sc+0x220>)
   16b3c:	495e      	ldr	r1, [pc, #376]	; (16cb8 <m2m_wifi_connect_sc+0x224>)
   16b3e:	485f      	ldr	r0, [pc, #380]	; (16cbc <m2m_wifi_connect_sc+0x228>)
   16b40:	4c5f      	ldr	r4, [pc, #380]	; (16cc0 <m2m_wifi_connect_sc+0x22c>)
   16b42:	47a0      	blx	r4
   16b44:	485f      	ldr	r0, [pc, #380]	; (16cc4 <m2m_wifi_connect_sc+0x230>)
   16b46:	47a0      	blx	r4
   16b48:	485f      	ldr	r0, [pc, #380]	; (16cc8 <m2m_wifi_connect_sc+0x234>)
   16b4a:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   16b4c:	200c      	movs	r0, #12
   16b4e:	4240      	negs	r0, r0
			goto ERR1;
   16b50:	e7ee      	b.n	16b30 <m2m_wifi_connect_sc+0x9c>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   16b52:	0038      	movs	r0, r7
   16b54:	4b5d      	ldr	r3, [pc, #372]	; (16ccc <m2m_wifi_connect_sc+0x238>)
   16b56:	4798      	blx	r3
   16b58:	2840      	cmp	r0, #64	; 0x40
   16b5a:	d1b0      	bne.n	16abe <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   16b5c:	783b      	ldrb	r3, [r7, #0]
   16b5e:	001a      	movs	r2, r3
   16b60:	3a30      	subs	r2, #48	; 0x30
   16b62:	2a36      	cmp	r2, #54	; 0x36
   16b64:	d817      	bhi.n	16b96 <m2m_wifi_connect_sc+0x102>
   16b66:	3a0a      	subs	r2, #10
   16b68:	2a06      	cmp	r2, #6
   16b6a:	d914      	bls.n	16b96 <m2m_wifi_connect_sc+0x102>
   16b6c:	3b47      	subs	r3, #71	; 0x47
   16b6e:	2b19      	cmp	r3, #25
   16b70:	d911      	bls.n	16b96 <m2m_wifi_connect_sc+0x102>
   16b72:	1c7a      	adds	r2, r7, #1
   16b74:	0038      	movs	r0, r7
   16b76:	3040      	adds	r0, #64	; 0x40
   16b78:	7813      	ldrb	r3, [r2, #0]
   16b7a:	0019      	movs	r1, r3
   16b7c:	3930      	subs	r1, #48	; 0x30
   16b7e:	2936      	cmp	r1, #54	; 0x36
   16b80:	d809      	bhi.n	16b96 <m2m_wifi_connect_sc+0x102>
   16b82:	390a      	subs	r1, #10
   16b84:	2906      	cmp	r1, #6
   16b86:	d906      	bls.n	16b96 <m2m_wifi_connect_sc+0x102>
   16b88:	3b47      	subs	r3, #71	; 0x47
   16b8a:	2b19      	cmp	r3, #25
   16b8c:	d903      	bls.n	16b96 <m2m_wifi_connect_sc+0x102>
   16b8e:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
   16b90:	4282      	cmp	r2, r0
   16b92:	d1f1      	bne.n	16b78 <m2m_wifi_connect_sc+0xe4>
   16b94:	e793      	b.n	16abe <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
   16b96:	4a4e      	ldr	r2, [pc, #312]	; (16cd0 <m2m_wifi_connect_sc+0x23c>)
   16b98:	4947      	ldr	r1, [pc, #284]	; (16cb8 <m2m_wifi_connect_sc+0x224>)
   16b9a:	4848      	ldr	r0, [pc, #288]	; (16cbc <m2m_wifi_connect_sc+0x228>)
   16b9c:	4c48      	ldr	r4, [pc, #288]	; (16cc0 <m2m_wifi_connect_sc+0x22c>)
   16b9e:	47a0      	blx	r4
   16ba0:	484c      	ldr	r0, [pc, #304]	; (16cd4 <m2m_wifi_connect_sc+0x240>)
   16ba2:	47a0      	blx	r4
   16ba4:	4848      	ldr	r0, [pc, #288]	; (16cc8 <m2m_wifi_connect_sc+0x234>)
   16ba6:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
   16ba8:	200c      	movs	r0, #12
   16baa:	4240      	negs	r0, r0
					goto ERR1;
   16bac:	e7c0      	b.n	16b30 <m2m_wifi_connect_sc+0x9c>
		M2M_ERR("SSID LEN INVALID\n");
   16bae:	228c      	movs	r2, #140	; 0x8c
   16bb0:	0092      	lsls	r2, r2, #2
   16bb2:	4941      	ldr	r1, [pc, #260]	; (16cb8 <m2m_wifi_connect_sc+0x224>)
   16bb4:	4841      	ldr	r0, [pc, #260]	; (16cbc <m2m_wifi_connect_sc+0x228>)
   16bb6:	4c42      	ldr	r4, [pc, #264]	; (16cc0 <m2m_wifi_connect_sc+0x22c>)
   16bb8:	47a0      	blx	r4
   16bba:	4847      	ldr	r0, [pc, #284]	; (16cd8 <m2m_wifi_connect_sc+0x244>)
   16bbc:	47a0      	blx	r4
   16bbe:	4842      	ldr	r0, [pc, #264]	; (16cc8 <m2m_wifi_connect_sc+0x234>)
   16bc0:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
   16bc2:	200c      	movs	r0, #12
   16bc4:	4240      	negs	r0, r0
		goto ERR1;
   16bc6:	e7b3      	b.n	16b30 <m2m_wifi_connect_sc+0x9c>
			M2M_ERR("CH INVALID\n");
   16bc8:	4a44      	ldr	r2, [pc, #272]	; (16cdc <m2m_wifi_connect_sc+0x248>)
   16bca:	493b      	ldr	r1, [pc, #236]	; (16cb8 <m2m_wifi_connect_sc+0x224>)
   16bcc:	483b      	ldr	r0, [pc, #236]	; (16cbc <m2m_wifi_connect_sc+0x228>)
   16bce:	4c3c      	ldr	r4, [pc, #240]	; (16cc0 <m2m_wifi_connect_sc+0x22c>)
   16bd0:	47a0      	blx	r4
   16bd2:	4843      	ldr	r0, [pc, #268]	; (16ce0 <m2m_wifi_connect_sc+0x24c>)
   16bd4:	47a0      	blx	r4
   16bd6:	483c      	ldr	r0, [pc, #240]	; (16cc8 <m2m_wifi_connect_sc+0x234>)
   16bd8:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   16bda:	200c      	movs	r0, #12
   16bdc:	4240      	negs	r0, r0
			goto ERR1;
   16bde:	e7a7      	b.n	16b30 <m2m_wifi_connect_sc+0x9c>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   16be0:	783b      	ldrb	r3, [r7, #0]
   16be2:	3b01      	subs	r3, #1
   16be4:	b2db      	uxtb	r3, r3
   16be6:	aa07      	add	r2, sp, #28
   16be8:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   16bea:	2b03      	cmp	r3, #3
   16bec:	d816      	bhi.n	16c1c <m2m_wifi_connect_sc+0x188>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   16bee:	787a      	ldrb	r2, [r7, #1]
   16bf0:	1e51      	subs	r1, r2, #1
   16bf2:	ab07      	add	r3, sp, #28
   16bf4:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   16bf6:	2310      	movs	r3, #16
   16bf8:	0011      	movs	r1, r2
   16bfa:	4399      	bics	r1, r3
   16bfc:	290b      	cmp	r1, #11
   16bfe:	d01c      	beq.n	16c3a <m2m_wifi_connect_sc+0x1a6>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   16c00:	4a38      	ldr	r2, [pc, #224]	; (16ce4 <m2m_wifi_connect_sc+0x250>)
   16c02:	492d      	ldr	r1, [pc, #180]	; (16cb8 <m2m_wifi_connect_sc+0x224>)
   16c04:	482d      	ldr	r0, [pc, #180]	; (16cbc <m2m_wifi_connect_sc+0x228>)
   16c06:	4c2e      	ldr	r4, [pc, #184]	; (16cc0 <m2m_wifi_connect_sc+0x22c>)
   16c08:	47a0      	blx	r4
   16c0a:	ab07      	add	r3, sp, #28
   16c0c:	7859      	ldrb	r1, [r3, #1]
   16c0e:	4836      	ldr	r0, [pc, #216]	; (16ce8 <m2m_wifi_connect_sc+0x254>)
   16c10:	47a0      	blx	r4
   16c12:	482d      	ldr	r0, [pc, #180]	; (16cc8 <m2m_wifi_connect_sc+0x234>)
   16c14:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   16c16:	200c      	movs	r0, #12
   16c18:	4240      	negs	r0, r0
			goto ERR1;
   16c1a:	e789      	b.n	16b30 <m2m_wifi_connect_sc+0x9c>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   16c1c:	2294      	movs	r2, #148	; 0x94
   16c1e:	0092      	lsls	r2, r2, #2
   16c20:	4925      	ldr	r1, [pc, #148]	; (16cb8 <m2m_wifi_connect_sc+0x224>)
   16c22:	4826      	ldr	r0, [pc, #152]	; (16cbc <m2m_wifi_connect_sc+0x228>)
   16c24:	4c26      	ldr	r4, [pc, #152]	; (16cc0 <m2m_wifi_connect_sc+0x22c>)
   16c26:	47a0      	blx	r4
   16c28:	ab07      	add	r3, sp, #28
   16c2a:	7819      	ldrb	r1, [r3, #0]
   16c2c:	482f      	ldr	r0, [pc, #188]	; (16cec <m2m_wifi_connect_sc+0x258>)
   16c2e:	47a0      	blx	r4
   16c30:	4825      	ldr	r0, [pc, #148]	; (16cc8 <m2m_wifi_connect_sc+0x234>)
   16c32:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   16c34:	200c      	movs	r0, #12
   16c36:	4240      	negs	r0, r0
			goto ERR1;
   16c38:	e77a      	b.n	16b30 <m2m_wifi_connect_sc+0x9c>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   16c3a:	1cb9      	adds	r1, r7, #2
   16c3c:	2016      	movs	r0, #22
   16c3e:	ab02      	add	r3, sp, #8
   16c40:	469c      	mov	ip, r3
   16c42:	4460      	add	r0, ip
   16c44:	4b19      	ldr	r3, [pc, #100]	; (16cac <m2m_wifi_connect_sc+0x218>)
   16c46:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   16c48:	787b      	ldrb	r3, [r7, #1]
   16c4a:	aa07      	add	r2, sp, #28
   16c4c:	4694      	mov	ip, r2
   16c4e:	4463      	add	r3, ip
   16c50:	2200      	movs	r2, #0
   16c52:	709a      	strb	r2, [r3, #2]
   16c54:	e762      	b.n	16b1c <m2m_wifi_connect_sc+0x88>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   16c56:	0038      	movs	r0, r7
   16c58:	4b1c      	ldr	r3, [pc, #112]	; (16ccc <m2m_wifi_connect_sc+0x238>)
   16c5a:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   16c5c:	1e43      	subs	r3, r0, #1
   16c5e:	b29b      	uxth	r3, r3
   16c60:	2b3f      	cmp	r3, #63	; 0x3f
   16c62:	d805      	bhi.n	16c70 <m2m_wifi_connect_sc+0x1dc>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   16c64:	1c42      	adds	r2, r0, #1
   16c66:	0039      	movs	r1, r7
   16c68:	a807      	add	r0, sp, #28
   16c6a:	4b10      	ldr	r3, [pc, #64]	; (16cac <m2m_wifi_connect_sc+0x218>)
   16c6c:	4798      	blx	r3
   16c6e:	e755      	b.n	16b1c <m2m_wifi_connect_sc+0x88>
			M2M_ERR("Incorrect PSK key length\n");
   16c70:	4a1f      	ldr	r2, [pc, #124]	; (16cf0 <m2m_wifi_connect_sc+0x25c>)
   16c72:	4911      	ldr	r1, [pc, #68]	; (16cb8 <m2m_wifi_connect_sc+0x224>)
   16c74:	4811      	ldr	r0, [pc, #68]	; (16cbc <m2m_wifi_connect_sc+0x228>)
   16c76:	4c12      	ldr	r4, [pc, #72]	; (16cc0 <m2m_wifi_connect_sc+0x22c>)
   16c78:	47a0      	blx	r4
   16c7a:	481e      	ldr	r0, [pc, #120]	; (16cf4 <m2m_wifi_connect_sc+0x260>)
   16c7c:	47a0      	blx	r4
   16c7e:	4812      	ldr	r0, [pc, #72]	; (16cc8 <m2m_wifi_connect_sc+0x234>)
   16c80:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   16c82:	200c      	movs	r0, #12
   16c84:	4240      	negs	r0, r0
			goto ERR1;
   16c86:	e753      	b.n	16b30 <m2m_wifi_connect_sc+0x9c>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   16c88:	223e      	movs	r2, #62	; 0x3e
   16c8a:	0039      	movs	r1, r7
   16c8c:	a807      	add	r0, sp, #28
   16c8e:	4b07      	ldr	r3, [pc, #28]	; (16cac <m2m_wifi_connect_sc+0x218>)
   16c90:	4798      	blx	r3
   16c92:	e743      	b.n	16b1c <m2m_wifi_connect_sc+0x88>
		M2M_ERR("undefined sec type\n");
   16c94:	4a18      	ldr	r2, [pc, #96]	; (16cf8 <m2m_wifi_connect_sc+0x264>)
   16c96:	4908      	ldr	r1, [pc, #32]	; (16cb8 <m2m_wifi_connect_sc+0x224>)
   16c98:	4808      	ldr	r0, [pc, #32]	; (16cbc <m2m_wifi_connect_sc+0x228>)
   16c9a:	4c09      	ldr	r4, [pc, #36]	; (16cc0 <m2m_wifi_connect_sc+0x22c>)
   16c9c:	47a0      	blx	r4
   16c9e:	4817      	ldr	r0, [pc, #92]	; (16cfc <m2m_wifi_connect_sc+0x268>)
   16ca0:	47a0      	blx	r4
   16ca2:	4809      	ldr	r0, [pc, #36]	; (16cc8 <m2m_wifi_connect_sc+0x234>)
   16ca4:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
   16ca6:	200c      	movs	r0, #12
   16ca8:	4240      	negs	r0, r0
		goto ERR1;
   16caa:	e741      	b.n	16b30 <m2m_wifi_connect_sc+0x9c>
   16cac:	00015e1d 	.word	0x00015e1d
   16cb0:	00015f45 	.word	0x00015f45
   16cb4:	0000021a 	.word	0x0000021a
   16cb8:	00021d30 	.word	0x00021d30
   16cbc:	00021998 	.word	0x00021998
   16cc0:	000148e5 	.word	0x000148e5
   16cc4:	00021d78 	.word	0x00021d78
   16cc8:	000219c0 	.word	0x000219c0
   16ccc:	00015e41 	.word	0x00015e41
   16cd0:	00000226 	.word	0x00000226
   16cd4:	00021d8c 	.word	0x00021d8c
   16cd8:	00021d9c 	.word	0x00021d9c
   16cdc:	00000239 	.word	0x00000239
   16ce0:	00021db0 	.word	0x00021db0
   16ce4:	00000257 	.word	0x00000257
   16ce8:	00021dd8 	.word	0x00021dd8
   16cec:	00021dbc 	.word	0x00021dbc
   16cf0:	00000266 	.word	0x00000266
   16cf4:	00021df4 	.word	0x00021df4
   16cf8:	00000276 	.word	0x00000276
   16cfc:	00021e10 	.word	0x00021e10

00016d00 <m2m_wifi_connect>:
{
   16d00:	b530      	push	{r4, r5, lr}
   16d02:	b083      	sub	sp, #12
   16d04:	ac06      	add	r4, sp, #24
   16d06:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   16d08:	2500      	movs	r5, #0
   16d0a:	9501      	str	r5, [sp, #4]
   16d0c:	9400      	str	r4, [sp, #0]
   16d0e:	4c02      	ldr	r4, [pc, #8]	; (16d18 <m2m_wifi_connect+0x18>)
   16d10:	47a0      	blx	r4
}
   16d12:	b003      	add	sp, #12
   16d14:	bd30      	pop	{r4, r5, pc}
   16d16:	46c0      	nop			; (mov r8, r8)
   16d18:	00016a95 	.word	0x00016a95

00016d1c <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
   16d1c:	2000      	movs	r0, #0
   16d1e:	4770      	bx	lr

00016d20 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   16d20:	b5f0      	push	{r4, r5, r6, r7, lr}
   16d22:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   16d24:	2580      	movs	r5, #128	; 0x80
   16d26:	006d      	lsls	r5, r5, #1
   16d28:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   16d2a:	24a5      	movs	r4, #165	; 0xa5
   16d2c:	0164      	lsls	r4, r4, #5
   16d2e:	4f08      	ldr	r7, [pc, #32]	; (16d50 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   16d30:	4e08      	ldr	r6, [pc, #32]	; (16d54 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
   16d32:	0029      	movs	r1, r5
   16d34:	0020      	movs	r0, r4
   16d36:	47b8      	blx	r7
			uint32 reg = 0;
   16d38:	2300      	movs	r3, #0
   16d3a:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   16d3c:	a901      	add	r1, sp, #4
   16d3e:	0020      	movs	r0, r4
   16d40:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
   16d42:	2800      	cmp	r0, #0
   16d44:	d1f5      	bne.n	16d32 <chip_apply_conf+0x12>
				if(reg == val32)
   16d46:	9b01      	ldr	r3, [sp, #4]
   16d48:	429d      	cmp	r5, r3
   16d4a:	d1f2      	bne.n	16d32 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
   16d4c:	b003      	add	sp, #12
   16d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16d50:	000171f9 	.word	0x000171f9
   16d54:	000171ed 	.word	0x000171ed

00016d58 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   16d58:	b500      	push	{lr}
   16d5a:	b083      	sub	sp, #12
	uint32 reg = 0;
   16d5c:	2300      	movs	r3, #0
   16d5e:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   16d60:	a901      	add	r1, sp, #4
   16d62:	4811      	ldr	r0, [pc, #68]	; (16da8 <enable_interrupts+0x50>)
   16d64:	4b11      	ldr	r3, [pc, #68]	; (16dac <enable_interrupts+0x54>)
   16d66:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
   16d68:	2800      	cmp	r0, #0
   16d6a:	d001      	beq.n	16d70 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
   16d6c:	b003      	add	sp, #12
   16d6e:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
   16d70:	2180      	movs	r1, #128	; 0x80
   16d72:	0049      	lsls	r1, r1, #1
   16d74:	9b01      	ldr	r3, [sp, #4]
   16d76:	4319      	orrs	r1, r3
   16d78:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   16d7a:	480b      	ldr	r0, [pc, #44]	; (16da8 <enable_interrupts+0x50>)
   16d7c:	4b0c      	ldr	r3, [pc, #48]	; (16db0 <enable_interrupts+0x58>)
   16d7e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
   16d80:	2800      	cmp	r0, #0
   16d82:	d1f3      	bne.n	16d6c <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   16d84:	a901      	add	r1, sp, #4
   16d86:	20d0      	movs	r0, #208	; 0xd0
   16d88:	0140      	lsls	r0, r0, #5
   16d8a:	4b08      	ldr	r3, [pc, #32]	; (16dac <enable_interrupts+0x54>)
   16d8c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
   16d8e:	2800      	cmp	r0, #0
   16d90:	d1ec      	bne.n	16d6c <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
   16d92:	2180      	movs	r1, #128	; 0x80
   16d94:	0249      	lsls	r1, r1, #9
   16d96:	9b01      	ldr	r3, [sp, #4]
   16d98:	4319      	orrs	r1, r3
   16d9a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   16d9c:	20d0      	movs	r0, #208	; 0xd0
   16d9e:	0140      	lsls	r0, r0, #5
   16da0:	4b03      	ldr	r3, [pc, #12]	; (16db0 <enable_interrupts+0x58>)
   16da2:	4798      	blx	r3
   16da4:	e7e2      	b.n	16d6c <enable_interrupts+0x14>
   16da6:	46c0      	nop			; (mov r8, r8)
   16da8:	00001408 	.word	0x00001408
   16dac:	000171ed 	.word	0x000171ed
   16db0:	000171f9 	.word	0x000171f9

00016db4 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   16db4:	b510      	push	{r4, lr}
   16db6:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
   16db8:	4b28      	ldr	r3, [pc, #160]	; (16e5c <nmi_get_chipid+0xa8>)
   16dba:	681c      	ldr	r4, [r3, #0]
   16dbc:	2c00      	cmp	r4, #0
   16dbe:	d004      	beq.n	16dca <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
   16dc0:	4b26      	ldr	r3, [pc, #152]	; (16e5c <nmi_get_chipid+0xa8>)
   16dc2:	681c      	ldr	r4, [r3, #0]
}
   16dc4:	0020      	movs	r0, r4
   16dc6:	b002      	add	sp, #8
   16dc8:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   16dca:	0019      	movs	r1, r3
   16dcc:	2080      	movs	r0, #128	; 0x80
   16dce:	0140      	lsls	r0, r0, #5
   16dd0:	4b23      	ldr	r3, [pc, #140]	; (16e60 <nmi_get_chipid+0xac>)
   16dd2:	4798      	blx	r3
   16dd4:	2800      	cmp	r0, #0
   16dd6:	d003      	beq.n	16de0 <nmi_get_chipid+0x2c>
			chipid = 0;
   16dd8:	2200      	movs	r2, #0
   16dda:	4b20      	ldr	r3, [pc, #128]	; (16e5c <nmi_get_chipid+0xa8>)
   16ddc:	601a      	str	r2, [r3, #0]
			return 0;
   16dde:	e7f1      	b.n	16dc4 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   16de0:	a901      	add	r1, sp, #4
   16de2:	4820      	ldr	r0, [pc, #128]	; (16e64 <nmi_get_chipid+0xb0>)
   16de4:	4b1e      	ldr	r3, [pc, #120]	; (16e60 <nmi_get_chipid+0xac>)
   16de6:	4798      	blx	r3
   16de8:	2800      	cmp	r0, #0
   16dea:	d003      	beq.n	16df4 <nmi_get_chipid+0x40>
			chipid = 0;
   16dec:	2200      	movs	r2, #0
   16dee:	4b1b      	ldr	r3, [pc, #108]	; (16e5c <nmi_get_chipid+0xa8>)
   16df0:	601a      	str	r2, [r3, #0]
			return 0;
   16df2:	e7e7      	b.n	16dc4 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
   16df4:	4b19      	ldr	r3, [pc, #100]	; (16e5c <nmi_get_chipid+0xa8>)
   16df6:	681b      	ldr	r3, [r3, #0]
   16df8:	4a1b      	ldr	r2, [pc, #108]	; (16e68 <nmi_get_chipid+0xb4>)
   16dfa:	4293      	cmp	r3, r2
   16dfc:	d00e      	beq.n	16e1c <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
   16dfe:	4a1b      	ldr	r2, [pc, #108]	; (16e6c <nmi_get_chipid+0xb8>)
   16e00:	4293      	cmp	r3, r2
   16e02:	d012      	beq.n	16e2a <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
   16e04:	4a1a      	ldr	r2, [pc, #104]	; (16e70 <nmi_get_chipid+0xbc>)
   16e06:	4293      	cmp	r3, r2
   16e08:	d01c      	beq.n	16e44 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
   16e0a:	4914      	ldr	r1, [pc, #80]	; (16e5c <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
   16e0c:	4a19      	ldr	r2, [pc, #100]	; (16e74 <nmi_get_chipid+0xc0>)
   16e0e:	680b      	ldr	r3, [r1, #0]
   16e10:	401a      	ands	r2, r3
		chipid |= 0x050000;
   16e12:	23a0      	movs	r3, #160	; 0xa0
   16e14:	02db      	lsls	r3, r3, #11
   16e16:	4313      	orrs	r3, r2
   16e18:	600b      	str	r3, [r1, #0]
   16e1a:	e7d1      	b.n	16dc0 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
   16e1c:	9b01      	ldr	r3, [sp, #4]
   16e1e:	2b01      	cmp	r3, #1
   16e20:	d0f3      	beq.n	16e0a <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
   16e22:	4a15      	ldr	r2, [pc, #84]	; (16e78 <nmi_get_chipid+0xc4>)
   16e24:	4b0d      	ldr	r3, [pc, #52]	; (16e5c <nmi_get_chipid+0xa8>)
   16e26:	601a      	str	r2, [r3, #0]
   16e28:	e7ef      	b.n	16e0a <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
   16e2a:	9b01      	ldr	r3, [sp, #4]
   16e2c:	2b03      	cmp	r3, #3
   16e2e:	d0ec      	beq.n	16e0a <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
   16e30:	2b04      	cmp	r3, #4
   16e32:	d003      	beq.n	16e3c <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
   16e34:	4a11      	ldr	r2, [pc, #68]	; (16e7c <nmi_get_chipid+0xc8>)
   16e36:	4b09      	ldr	r3, [pc, #36]	; (16e5c <nmi_get_chipid+0xa8>)
   16e38:	601a      	str	r2, [r3, #0]
   16e3a:	e7e6      	b.n	16e0a <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
   16e3c:	4a10      	ldr	r2, [pc, #64]	; (16e80 <nmi_get_chipid+0xcc>)
   16e3e:	4b07      	ldr	r3, [pc, #28]	; (16e5c <nmi_get_chipid+0xa8>)
   16e40:	601a      	str	r2, [r3, #0]
   16e42:	e7e2      	b.n	16e0a <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   16e44:	4905      	ldr	r1, [pc, #20]	; (16e5c <nmi_get_chipid+0xa8>)
   16e46:	20ec      	movs	r0, #236	; 0xec
   16e48:	0380      	lsls	r0, r0, #14
   16e4a:	4b05      	ldr	r3, [pc, #20]	; (16e60 <nmi_get_chipid+0xac>)
   16e4c:	4798      	blx	r3
   16e4e:	2800      	cmp	r0, #0
   16e50:	d0db      	beq.n	16e0a <nmi_get_chipid+0x56>
			chipid = 0;
   16e52:	2200      	movs	r2, #0
   16e54:	4b01      	ldr	r3, [pc, #4]	; (16e5c <nmi_get_chipid+0xa8>)
   16e56:	601a      	str	r2, [r3, #0]
			return 0;
   16e58:	e7b4      	b.n	16dc4 <nmi_get_chipid+0x10>
   16e5a:	46c0      	nop			; (mov r8, r8)
   16e5c:	200032ec 	.word	0x200032ec
   16e60:	000171ed 	.word	0x000171ed
   16e64:	000013f4 	.word	0x000013f4
   16e68:	001002a0 	.word	0x001002a0
   16e6c:	001002b0 	.word	0x001002b0
   16e70:	001000f0 	.word	0x001000f0
   16e74:	fff0ffff 	.word	0xfff0ffff
   16e78:	001002a1 	.word	0x001002a1
   16e7c:	001002b2 	.word	0x001002b2
   16e80:	001002b1 	.word	0x001002b1

00016e84 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   16e84:	b530      	push	{r4, r5, lr}
   16e86:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   16e88:	4c16      	ldr	r4, [pc, #88]	; (16ee4 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
   16e8a:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   16e8c:	a901      	add	r1, sp, #4
   16e8e:	2010      	movs	r0, #16
   16e90:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
   16e92:	2800      	cmp	r0, #0
   16e94:	d11c      	bne.n	16ed0 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
   16e96:	9b01      	ldr	r3, [sp, #4]
   16e98:	422b      	tst	r3, r5
   16e9a:	d1f7      	bne.n	16e8c <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   16e9c:	a901      	add	r1, sp, #4
   16e9e:	3001      	adds	r0, #1
   16ea0:	4b10      	ldr	r3, [pc, #64]	; (16ee4 <chip_sleep+0x60>)
   16ea2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
   16ea4:	2800      	cmp	r0, #0
   16ea6:	d113      	bne.n	16ed0 <chip_sleep+0x4c>
	if(reg & NBIT1)
   16ea8:	9901      	ldr	r1, [sp, #4]
   16eaa:	078b      	lsls	r3, r1, #30
   16eac:	d507      	bpl.n	16ebe <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
   16eae:	2302      	movs	r3, #2
   16eb0:	4399      	bics	r1, r3
   16eb2:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   16eb4:	3001      	adds	r0, #1
   16eb6:	4b0c      	ldr	r3, [pc, #48]	; (16ee8 <chip_sleep+0x64>)
   16eb8:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
   16eba:	2800      	cmp	r0, #0
   16ebc:	d108      	bne.n	16ed0 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   16ebe:	a901      	add	r1, sp, #4
   16ec0:	200b      	movs	r0, #11
   16ec2:	4b08      	ldr	r3, [pc, #32]	; (16ee4 <chip_sleep+0x60>)
   16ec4:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
   16ec6:	2800      	cmp	r0, #0
   16ec8:	d102      	bne.n	16ed0 <chip_sleep+0x4c>
	if(reg & NBIT0)
   16eca:	9901      	ldr	r1, [sp, #4]
   16ecc:	07cb      	lsls	r3, r1, #31
   16ece:	d401      	bmi.n	16ed4 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
   16ed0:	b003      	add	sp, #12
   16ed2:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
   16ed4:	2301      	movs	r3, #1
   16ed6:	4399      	bics	r1, r3
   16ed8:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   16eda:	300b      	adds	r0, #11
   16edc:	4b02      	ldr	r3, [pc, #8]	; (16ee8 <chip_sleep+0x64>)
   16ede:	4798      	blx	r3
   16ee0:	e7f6      	b.n	16ed0 <chip_sleep+0x4c>
   16ee2:	46c0      	nop			; (mov r8, r8)
   16ee4:	000171ed 	.word	0x000171ed
   16ee8:	000171f9 	.word	0x000171f9

00016eec <chip_wake>:
sint8 chip_wake(void)
{
   16eec:	b5f0      	push	{r4, r5, r6, r7, lr}
   16eee:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   16ef0:	2300      	movs	r3, #0
   16ef2:	9301      	str	r3, [sp, #4]
   16ef4:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   16ef6:	a901      	add	r1, sp, #4
   16ef8:	200b      	movs	r0, #11
   16efa:	4b27      	ldr	r3, [pc, #156]	; (16f98 <chip_wake+0xac>)
   16efc:	4798      	blx	r3
   16efe:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   16f00:	d12e      	bne.n	16f60 <chip_wake+0x74>
	
	if(!(reg & NBIT0))
   16f02:	9901      	ldr	r1, [sp, #4]
   16f04:	07cb      	lsls	r3, r1, #31
   16f06:	d406      	bmi.n	16f16 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   16f08:	2301      	movs	r3, #1
   16f0a:	4319      	orrs	r1, r3
   16f0c:	200b      	movs	r0, #11
   16f0e:	4b23      	ldr	r3, [pc, #140]	; (16f9c <chip_wake+0xb0>)
   16f10:	4798      	blx	r3
   16f12:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   16f14:	d124      	bne.n	16f60 <chip_wake+0x74>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   16f16:	a901      	add	r1, sp, #4
   16f18:	2001      	movs	r0, #1
   16f1a:	4b1f      	ldr	r3, [pc, #124]	; (16f98 <chip_wake+0xac>)
   16f1c:	4798      	blx	r3
   16f1e:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   16f20:	d11e      	bne.n	16f60 <chip_wake+0x74>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   16f22:	9901      	ldr	r1, [sp, #4]
   16f24:	078b      	lsls	r3, r1, #30
   16f26:	d51e      	bpl.n	16f66 <chip_wake+0x7a>
{
   16f28:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   16f2a:	4f1b      	ldr	r7, [pc, #108]	; (16f98 <chip_wake+0xac>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
   16f2c:	4e1c      	ldr	r6, [pc, #112]	; (16fa0 <chip_wake+0xb4>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   16f2e:	4669      	mov	r1, sp
   16f30:	200f      	movs	r0, #15
   16f32:	47b8      	blx	r7
   16f34:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
   16f36:	d11e      	bne.n	16f76 <chip_wake+0x8a>
		if(clk_status_reg & NBIT2) {
   16f38:	9b00      	ldr	r3, [sp, #0]
   16f3a:	075b      	lsls	r3, r3, #29
   16f3c:	d428      	bmi.n	16f90 <chip_wake+0xa4>
		nm_bsp_sleep(2);
   16f3e:	2002      	movs	r0, #2
   16f40:	47b0      	blx	r6
   16f42:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
   16f44:	2d00      	cmp	r5, #0
   16f46:	d1f2      	bne.n	16f2e <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
   16f48:	22ad      	movs	r2, #173	; 0xad
   16f4a:	0052      	lsls	r2, r2, #1
   16f4c:	4915      	ldr	r1, [pc, #84]	; (16fa4 <chip_wake+0xb8>)
   16f4e:	4816      	ldr	r0, [pc, #88]	; (16fa8 <chip_wake+0xbc>)
   16f50:	4c16      	ldr	r4, [pc, #88]	; (16fac <chip_wake+0xc0>)
   16f52:	47a0      	blx	r4
   16f54:	4816      	ldr	r0, [pc, #88]	; (16fb0 <chip_wake+0xc4>)
   16f56:	47a0      	blx	r4
   16f58:	4816      	ldr	r0, [pc, #88]	; (16fb4 <chip_wake+0xc8>)
   16f5a:	47a0      	blx	r4
			ret = M2M_ERR_TIME_OUT;
   16f5c:	2404      	movs	r4, #4
   16f5e:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
   16f60:	0020      	movs	r0, r4
   16f62:	b003      	add	sp, #12
   16f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   16f66:	2302      	movs	r3, #2
   16f68:	4319      	orrs	r1, r3
   16f6a:	2001      	movs	r0, #1
   16f6c:	4b0b      	ldr	r3, [pc, #44]	; (16f9c <chip_wake+0xb0>)
   16f6e:	4798      	blx	r3
   16f70:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   16f72:	d0d9      	beq.n	16f28 <chip_wake+0x3c>
   16f74:	e7f4      	b.n	16f60 <chip_wake+0x74>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   16f76:	22a8      	movs	r2, #168	; 0xa8
   16f78:	0052      	lsls	r2, r2, #1
   16f7a:	490a      	ldr	r1, [pc, #40]	; (16fa4 <chip_wake+0xb8>)
   16f7c:	480a      	ldr	r0, [pc, #40]	; (16fa8 <chip_wake+0xbc>)
   16f7e:	4d0b      	ldr	r5, [pc, #44]	; (16fac <chip_wake+0xc0>)
   16f80:	47a8      	blx	r5
   16f82:	9a00      	ldr	r2, [sp, #0]
   16f84:	0021      	movs	r1, r4
   16f86:	480c      	ldr	r0, [pc, #48]	; (16fb8 <chip_wake+0xcc>)
   16f88:	47a8      	blx	r5
   16f8a:	480a      	ldr	r0, [pc, #40]	; (16fb4 <chip_wake+0xc8>)
   16f8c:	47a8      	blx	r5
			goto _WAKE_EXIT;
   16f8e:	e7e7      	b.n	16f60 <chip_wake+0x74>
	nm_bus_reset();
   16f90:	4b0a      	ldr	r3, [pc, #40]	; (16fbc <chip_wake+0xd0>)
   16f92:	4798      	blx	r3
   16f94:	e7e4      	b.n	16f60 <chip_wake+0x74>
   16f96:	46c0      	nop			; (mov r8, r8)
   16f98:	000171ed 	.word	0x000171ed
   16f9c:	000171f9 	.word	0x000171f9
   16fa0:	00015aad 	.word	0x00015aad
   16fa4:	00021ef0 	.word	0x00021ef0
   16fa8:	00021998 	.word	0x00021998
   16fac:	000148e5 	.word	0x000148e5
   16fb0:	00021f3c 	.word	0x00021f3c
   16fb4:	000219c0 	.word	0x000219c0
   16fb8:	00021f24 	.word	0x00021f24
   16fbc:	000171d5 	.word	0x000171d5

00016fc0 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   16fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16fc2:	0007      	movs	r7, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   16fc4:	4d2c      	ldr	r5, [pc, #176]	; (17078 <wait_for_bootrom+0xb8>)
   16fc6:	4c2d      	ldr	r4, [pc, #180]	; (1707c <wait_for_bootrom+0xbc>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   16fc8:	4e2d      	ldr	r6, [pc, #180]	; (17080 <wait_for_bootrom+0xc0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   16fca:	0028      	movs	r0, r5
   16fcc:	47a0      	blx	r4
		if (reg & 0x80000000) {
   16fce:	2800      	cmp	r0, #0
   16fd0:	db02      	blt.n	16fd8 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   16fd2:	2001      	movs	r0, #1
   16fd4:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   16fd6:	e7f8      	b.n	16fca <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   16fd8:	482a      	ldr	r0, [pc, #168]	; (17084 <wait_for_bootrom+0xc4>)
   16fda:	4b28      	ldr	r3, [pc, #160]	; (1707c <wait_for_bootrom+0xbc>)
   16fdc:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   16fde:	07c3      	lsls	r3, r0, #31
   16fe0:	d409      	bmi.n	16ff6 <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
   16fe2:	4e27      	ldr	r6, [pc, #156]	; (17080 <wait_for_bootrom+0xc0>)
			reg = nm_read_reg(BOOTROM_REG);
   16fe4:	4c28      	ldr	r4, [pc, #160]	; (17088 <wait_for_bootrom+0xc8>)
   16fe6:	4d25      	ldr	r5, [pc, #148]	; (1707c <wait_for_bootrom+0xbc>)
			nm_bsp_sleep(1);
   16fe8:	2001      	movs	r0, #1
   16fea:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
   16fec:	0020      	movs	r0, r4
   16fee:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
   16ff0:	4b26      	ldr	r3, [pc, #152]	; (1708c <wait_for_bootrom+0xcc>)
   16ff2:	4298      	cmp	r0, r3
   16ff4:	d1f8      	bne.n	16fe8 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   16ff6:	2f02      	cmp	r7, #2
   16ff8:	d020      	beq.n	1703c <wait_for_bootrom+0x7c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   16ffa:	2f03      	cmp	r7, #3
   16ffc:	d028      	beq.n	17050 <wait_for_bootrom+0x90>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   16ffe:	2f04      	cmp	r7, #4
   17000:	d02f      	beq.n	17062 <wait_for_bootrom+0xa2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   17002:	4923      	ldr	r1, [pc, #140]	; (17090 <wait_for_bootrom+0xd0>)
   17004:	4823      	ldr	r0, [pc, #140]	; (17094 <wait_for_bootrom+0xd4>)
   17006:	4b24      	ldr	r3, [pc, #144]	; (17098 <wait_for_bootrom+0xd8>)
   17008:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
   1700a:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   1700c:	4b23      	ldr	r3, [pc, #140]	; (1709c <wait_for_bootrom+0xdc>)
   1700e:	4798      	blx	r3
   17010:	0500      	lsls	r0, r0, #20
   17012:	0d00      	lsrs	r0, r0, #20
   17014:	4b22      	ldr	r3, [pc, #136]	; (170a0 <wait_for_bootrom+0xe0>)
   17016:	4298      	cmp	r0, r3
   17018:	d829      	bhi.n	1706e <wait_for_bootrom+0xae>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
   1701a:	0020      	movs	r0, r4
   1701c:	4b21      	ldr	r3, [pc, #132]	; (170a4 <wait_for_bootrom+0xe4>)
   1701e:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   17020:	4821      	ldr	r0, [pc, #132]	; (170a8 <wait_for_bootrom+0xe8>)
   17022:	4c22      	ldr	r4, [pc, #136]	; (170ac <wait_for_bootrom+0xec>)
   17024:	47a0      	blx	r4
   17026:	491a      	ldr	r1, [pc, #104]	; (17090 <wait_for_bootrom+0xd0>)
   17028:	4821      	ldr	r0, [pc, #132]	; (170b0 <wait_for_bootrom+0xf0>)
   1702a:	47a0      	blx	r4
   1702c:	4821      	ldr	r0, [pc, #132]	; (170b4 <wait_for_bootrom+0xf4>)
   1702e:	47a0      	blx	r4

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   17030:	4921      	ldr	r1, [pc, #132]	; (170b8 <wait_for_bootrom+0xf8>)
   17032:	4815      	ldr	r0, [pc, #84]	; (17088 <wait_for_bootrom+0xc8>)
   17034:	4b18      	ldr	r3, [pc, #96]	; (17098 <wait_for_bootrom+0xd8>)
   17036:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
   17038:	2000      	movs	r0, #0
   1703a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   1703c:	491f      	ldr	r1, [pc, #124]	; (170bc <wait_for_bootrom+0xfc>)
   1703e:	4820      	ldr	r0, [pc, #128]	; (170c0 <wait_for_bootrom+0x100>)
   17040:	4c15      	ldr	r4, [pc, #84]	; (17098 <wait_for_bootrom+0xd8>)
   17042:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
   17044:	2180      	movs	r1, #128	; 0x80
   17046:	0349      	lsls	r1, r1, #13
   17048:	4812      	ldr	r0, [pc, #72]	; (17094 <wait_for_bootrom+0xd4>)
   1704a:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
   1704c:	2400      	movs	r4, #0
   1704e:	e7dd      	b.n	1700c <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   17050:	491a      	ldr	r1, [pc, #104]	; (170bc <wait_for_bootrom+0xfc>)
   17052:	481b      	ldr	r0, [pc, #108]	; (170c0 <wait_for_bootrom+0x100>)
   17054:	4c10      	ldr	r4, [pc, #64]	; (17098 <wait_for_bootrom+0xd8>)
   17056:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
   17058:	2100      	movs	r1, #0
   1705a:	480e      	ldr	r0, [pc, #56]	; (17094 <wait_for_bootrom+0xd4>)
   1705c:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
   1705e:	2400      	movs	r4, #0
   17060:	e7d4      	b.n	1700c <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   17062:	490b      	ldr	r1, [pc, #44]	; (17090 <wait_for_bootrom+0xd0>)
   17064:	480b      	ldr	r0, [pc, #44]	; (17094 <wait_for_bootrom+0xd4>)
   17066:	4b0c      	ldr	r3, [pc, #48]	; (17098 <wait_for_bootrom+0xd8>)
   17068:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   1706a:	2480      	movs	r4, #128	; 0x80
   1706c:	e7ce      	b.n	1700c <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   1706e:	2002      	movs	r0, #2
   17070:	4320      	orrs	r0, r4
   17072:	4b0c      	ldr	r3, [pc, #48]	; (170a4 <wait_for_bootrom+0xe4>)
   17074:	4798      	blx	r3
   17076:	e7d3      	b.n	17020 <wait_for_bootrom+0x60>
   17078:	00001014 	.word	0x00001014
   1707c:	000171e1 	.word	0x000171e1
   17080:	00015aad 	.word	0x00015aad
   17084:	000207bc 	.word	0x000207bc
   17088:	000c000c 	.word	0x000c000c
   1708c:	10add09e 	.word	0x10add09e
   17090:	13301354 	.word	0x13301354
   17094:	0000108c 	.word	0x0000108c
   17098:	000171f9 	.word	0x000171f9
   1709c:	00016db5 	.word	0x00016db5
   170a0:	0000039f 	.word	0x0000039f
   170a4:	00016d21 	.word	0x00016d21
   170a8:	00021cd4 	.word	0x00021cd4
   170ac:	000148e5 	.word	0x000148e5
   170b0:	00021f58 	.word	0x00021f58
   170b4:	000219c0 	.word	0x000219c0
   170b8:	ef522f61 	.word	0xef522f61
   170bc:	3c1cd57d 	.word	0x3c1cd57d
   170c0:	000207ac 	.word	0x000207ac

000170c4 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   170c4:	b570      	push	{r4, r5, r6, lr}
   170c6:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
   170c8:	4b15      	ldr	r3, [pc, #84]	; (17120 <wait_for_firmware_start+0x5c>)
   170ca:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   170cc:	4b15      	ldr	r3, [pc, #84]	; (17124 <wait_for_firmware_start+0x60>)
   170ce:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   170d0:	3802      	subs	r0, #2
   170d2:	2801      	cmp	r0, #1
   170d4:	d911      	bls.n	170fa <wait_for_firmware_start+0x36>
{
   170d6:	2401      	movs	r4, #1
   170d8:	4264      	negs	r4, r4
   170da:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   170dc:	4e12      	ldr	r6, [pc, #72]	; (17128 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   170de:	4d13      	ldr	r5, [pc, #76]	; (1712c <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
   170e0:	9b00      	ldr	r3, [sp, #0]
   170e2:	4298      	cmp	r0, r3
   170e4:	d00e      	beq.n	17104 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   170e6:	2002      	movs	r0, #2
   170e8:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
   170ea:	9801      	ldr	r0, [sp, #4]
   170ec:	47a8      	blx	r5
   170ee:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
   170f0:	2c00      	cmp	r4, #0
   170f2:	d1f5      	bne.n	170e0 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   170f4:	2005      	movs	r0, #5
   170f6:	4240      	negs	r0, r0
   170f8:	e009      	b.n	1710e <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
   170fa:	4b0d      	ldr	r3, [pc, #52]	; (17130 <wait_for_firmware_start+0x6c>)
   170fc:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   170fe:	4b0d      	ldr	r3, [pc, #52]	; (17134 <wait_for_firmware_start+0x70>)
   17100:	9300      	str	r3, [sp, #0]
   17102:	e7e8      	b.n	170d6 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   17104:	9a00      	ldr	r2, [sp, #0]
   17106:	4b07      	ldr	r3, [pc, #28]	; (17124 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
   17108:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
   1710a:	429a      	cmp	r2, r3
   1710c:	d001      	beq.n	17112 <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
   1710e:	b002      	add	sp, #8
   17110:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
   17112:	2100      	movs	r1, #0
   17114:	4802      	ldr	r0, [pc, #8]	; (17120 <wait_for_firmware_start+0x5c>)
   17116:	4b08      	ldr	r3, [pc, #32]	; (17138 <wait_for_firmware_start+0x74>)
   17118:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
   1711a:	2000      	movs	r0, #0
   1711c:	e7f7      	b.n	1710e <wait_for_firmware_start+0x4a>
   1711e:	46c0      	nop			; (mov r8, r8)
   17120:	0000108c 	.word	0x0000108c
   17124:	02532636 	.word	0x02532636
   17128:	00015aad 	.word	0x00015aad
   1712c:	000171e1 	.word	0x000171e1
   17130:	000207ac 	.word	0x000207ac
   17134:	d75dc1c3 	.word	0xd75dc1c3
   17138:	000171f9 	.word	0x000171f9

0001713c <chip_deinit>:

sint8 chip_deinit(void)
{
   1713c:	b530      	push	{r4, r5, lr}
   1713e:	b083      	sub	sp, #12
	uint32 reg = 0;
   17140:	2300      	movs	r3, #0
   17142:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   17144:	a901      	add	r1, sp, #4
   17146:	20a0      	movs	r0, #160	; 0xa0
   17148:	0140      	lsls	r0, r0, #5
   1714a:	4b12      	ldr	r3, [pc, #72]	; (17194 <chip_deinit+0x58>)
   1714c:	4798      	blx	r3
   1714e:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
   17150:	d113      	bne.n	1717a <chip_deinit+0x3e>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
   17152:	4911      	ldr	r1, [pc, #68]	; (17198 <chip_deinit+0x5c>)
   17154:	9b01      	ldr	r3, [sp, #4]
   17156:	4019      	ands	r1, r3
   17158:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   1715a:	20a0      	movs	r0, #160	; 0xa0
   1715c:	0140      	lsls	r0, r0, #5
   1715e:	4b0f      	ldr	r3, [pc, #60]	; (1719c <chip_deinit+0x60>)
   17160:	4798      	blx	r3
   17162:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
   17164:	d012      	beq.n	1718c <chip_deinit+0x50>
		M2M_ERR("failed to de-initialize\n");
   17166:	4a0e      	ldr	r2, [pc, #56]	; (171a0 <chip_deinit+0x64>)
   17168:	490e      	ldr	r1, [pc, #56]	; (171a4 <chip_deinit+0x68>)
   1716a:	480f      	ldr	r0, [pc, #60]	; (171a8 <chip_deinit+0x6c>)
   1716c:	4d0f      	ldr	r5, [pc, #60]	; (171ac <chip_deinit+0x70>)
   1716e:	47a8      	blx	r5
   17170:	480f      	ldr	r0, [pc, #60]	; (171b0 <chip_deinit+0x74>)
   17172:	47a8      	blx	r5
   17174:	480f      	ldr	r0, [pc, #60]	; (171b4 <chip_deinit+0x78>)
   17176:	47a8      	blx	r5
		goto ERR1;
   17178:	e008      	b.n	1718c <chip_deinit+0x50>
		M2M_ERR("failed to de-initialize\n");
   1717a:	4a0f      	ldr	r2, [pc, #60]	; (171b8 <chip_deinit+0x7c>)
   1717c:	4909      	ldr	r1, [pc, #36]	; (171a4 <chip_deinit+0x68>)
   1717e:	480a      	ldr	r0, [pc, #40]	; (171a8 <chip_deinit+0x6c>)
   17180:	4d0a      	ldr	r5, [pc, #40]	; (171ac <chip_deinit+0x70>)
   17182:	47a8      	blx	r5
   17184:	480a      	ldr	r0, [pc, #40]	; (171b0 <chip_deinit+0x74>)
   17186:	47a8      	blx	r5
   17188:	480a      	ldr	r0, [pc, #40]	; (171b4 <chip_deinit+0x78>)
   1718a:	47a8      	blx	r5
	}

ERR1:
	return ret;
}
   1718c:	0020      	movs	r0, r4
   1718e:	b003      	add	sp, #12
   17190:	bd30      	pop	{r4, r5, pc}
   17192:	46c0      	nop			; (mov r8, r8)
   17194:	000171ed 	.word	0x000171ed
   17198:	fffffbff 	.word	0xfffffbff
   1719c:	000171f9 	.word	0x000171f9
   171a0:	00000207 	.word	0x00000207
   171a4:	00021efc 	.word	0x00021efc
   171a8:	00021998 	.word	0x00021998
   171ac:	000148e5 	.word	0x000148e5
   171b0:	00021f08 	.word	0x00021f08
   171b4:	000219c0 	.word	0x000219c0
   171b8:	00000201 	.word	0x00000201

000171bc <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   171bc:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
   171be:	4b01      	ldr	r3, [pc, #4]	; (171c4 <nm_bus_iface_init+0x8>)
   171c0:	4798      	blx	r3
	return ret;
}
   171c2:	bd10      	pop	{r4, pc}
   171c4:	00015b69 	.word	0x00015b69

000171c8 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   171c8:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
   171ca:	4b01      	ldr	r3, [pc, #4]	; (171d0 <nm_bus_iface_deinit+0x8>)
   171cc:	4798      	blx	r3

	return ret;
}
   171ce:	bd10      	pop	{r4, pc}
   171d0:	00015db1 	.word	0x00015db1

000171d4 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   171d4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   171d6:	4b01      	ldr	r3, [pc, #4]	; (171dc <nm_bus_reset+0x8>)
   171d8:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   171da:	bd10      	pop	{r4, pc}
   171dc:	00017f0d 	.word	0x00017f0d

000171e0 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   171e0:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   171e2:	4b01      	ldr	r3, [pc, #4]	; (171e8 <nm_read_reg+0x8>)
   171e4:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   171e6:	bd10      	pop	{r4, pc}
   171e8:	00017f45 	.word	0x00017f45

000171ec <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   171ec:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   171ee:	4b01      	ldr	r3, [pc, #4]	; (171f4 <nm_read_reg_with_ret+0x8>)
   171f0:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   171f2:	bd10      	pop	{r4, pc}
   171f4:	00017f59 	.word	0x00017f59

000171f8 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   171f8:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   171fa:	4b01      	ldr	r3, [pc, #4]	; (17200 <nm_write_reg+0x8>)
   171fc:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   171fe:	bd10      	pop	{r4, pc}
   17200:	00017f71 	.word	0x00017f71

00017204 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   17204:	b5f0      	push	{r4, r5, r6, r7, lr}
   17206:	46d6      	mov	lr, sl
   17208:	464f      	mov	r7, r9
   1720a:	4646      	mov	r6, r8
   1720c:	b5c0      	push	{r6, r7, lr}
   1720e:	b082      	sub	sp, #8
   17210:	4680      	mov	r8, r0
   17212:	4689      	mov	r9, r1
   17214:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   17216:	4b13      	ldr	r3, [pc, #76]	; (17264 <nm_read_block+0x60>)
   17218:	881f      	ldrh	r7, [r3, #0]
   1721a:	3f08      	subs	r7, #8
   1721c:	b2bb      	uxth	r3, r7
   1721e:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   17220:	001e      	movs	r6, r3
   17222:	0004      	movs	r4, r0
   17224:	429a      	cmp	r2, r3
   17226:	d91a      	bls.n	1725e <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   17228:	4b0f      	ldr	r3, [pc, #60]	; (17268 <nm_read_block+0x64>)
   1722a:	469a      	mov	sl, r3
   1722c:	1a37      	subs	r7, r6, r0
   1722e:	4643      	mov	r3, r8
   17230:	1ae1      	subs	r1, r4, r3
   17232:	4449      	add	r1, r9
   17234:	9a01      	ldr	r2, [sp, #4]
   17236:	0020      	movs	r0, r4
   17238:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
   1723a:	2800      	cmp	r0, #0
   1723c:	d109      	bne.n	17252 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
   1723e:	1bad      	subs	r5, r5, r6
   17240:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
   17242:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
   17244:	42b5      	cmp	r5, r6
   17246:	d8f2      	bhi.n	1722e <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   17248:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   1724a:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   1724c:	0020      	movs	r0, r4
   1724e:	4b06      	ldr	r3, [pc, #24]	; (17268 <nm_read_block+0x64>)
   17250:	4798      	blx	r3
		}
	}

	return s8Ret;
}
   17252:	b002      	add	sp, #8
   17254:	bc1c      	pop	{r2, r3, r4}
   17256:	4690      	mov	r8, r2
   17258:	4699      	mov	r9, r3
   1725a:	46a2      	mov	sl, r4
   1725c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
   1725e:	2100      	movs	r1, #0
   17260:	e7f2      	b.n	17248 <nm_read_block+0x44>
   17262:	46c0      	nop			; (mov r8, r8)
   17264:	200000a0 	.word	0x200000a0
   17268:	0001809d 	.word	0x0001809d

0001726c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   1726c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1726e:	46d6      	mov	lr, sl
   17270:	464f      	mov	r7, r9
   17272:	4646      	mov	r6, r8
   17274:	b5c0      	push	{r6, r7, lr}
   17276:	b082      	sub	sp, #8
   17278:	4680      	mov	r8, r0
   1727a:	4689      	mov	r9, r1
   1727c:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   1727e:	4b13      	ldr	r3, [pc, #76]	; (172cc <nm_write_block+0x60>)
   17280:	881f      	ldrh	r7, [r3, #0]
   17282:	3f08      	subs	r7, #8
   17284:	b2bb      	uxth	r3, r7
   17286:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   17288:	001e      	movs	r6, r3
   1728a:	0004      	movs	r4, r0
   1728c:	429a      	cmp	r2, r3
   1728e:	d91a      	bls.n	172c6 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   17290:	4b0f      	ldr	r3, [pc, #60]	; (172d0 <nm_write_block+0x64>)
   17292:	469a      	mov	sl, r3
   17294:	1a37      	subs	r7, r6, r0
   17296:	4643      	mov	r3, r8
   17298:	1ae1      	subs	r1, r4, r3
   1729a:	4449      	add	r1, r9
   1729c:	9a01      	ldr	r2, [sp, #4]
   1729e:	0020      	movs	r0, r4
   172a0:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
   172a2:	2800      	cmp	r0, #0
   172a4:	d109      	bne.n	172ba <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
   172a6:	1bad      	subs	r5, r5, r6
   172a8:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
   172aa:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
   172ac:	42b5      	cmp	r5, r6
   172ae:	d8f2      	bhi.n	17296 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   172b0:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   172b2:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   172b4:	0020      	movs	r0, r4
   172b6:	4b06      	ldr	r3, [pc, #24]	; (172d0 <nm_write_block+0x64>)
   172b8:	4798      	blx	r3
		}
	}

	return s8Ret;
}
   172ba:	b002      	add	sp, #8
   172bc:	bc1c      	pop	{r2, r3, r4}
   172be:	4690      	mov	r8, r2
   172c0:	4699      	mov	r9, r3
   172c2:	46a2      	mov	sl, r4
   172c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
   172c6:	2100      	movs	r1, #0
   172c8:	e7f2      	b.n	172b0 <nm_write_block+0x44>
   172ca:	46c0      	nop			; (mov r8, r8)
   172cc:	200000a0 	.word	0x200000a0
   172d0:	00018169 	.word	0x00018169

000172d4 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   172d4:	b570      	push	{r4, r5, r6, lr}
   172d6:	b084      	sub	sp, #16
   172d8:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   172da:	2300      	movs	r3, #0
   172dc:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
   172de:	2208      	movs	r2, #8
   172e0:	2100      	movs	r1, #0
   172e2:	a801      	add	r0, sp, #4
   172e4:	4b2d      	ldr	r3, [pc, #180]	; (1739c <nm_get_firmware_full_info+0xc8>)
   172e6:	4798      	blx	r3
	if (pstrRev != NULL)
   172e8:	2c00      	cmp	r4, #0
   172ea:	d044      	beq.n	17376 <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   172ec:	2228      	movs	r2, #40	; 0x28
   172ee:	2100      	movs	r1, #0
   172f0:	0020      	movs	r0, r4
   172f2:	4b2b      	ldr	r3, [pc, #172]	; (173a0 <nm_get_firmware_full_info+0xcc>)
   172f4:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   172f6:	a903      	add	r1, sp, #12
   172f8:	482a      	ldr	r0, [pc, #168]	; (173a4 <nm_get_firmware_full_info+0xd0>)
   172fa:	4b2b      	ldr	r3, [pc, #172]	; (173a8 <nm_get_firmware_full_info+0xd4>)
   172fc:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
   172fe:	2800      	cmp	r0, #0
   17300:	d13a      	bne.n	17378 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
   17302:	9b03      	ldr	r3, [sp, #12]
   17304:	2b00      	cmp	r3, #0
   17306:	d039      	beq.n	1737c <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   17308:	20c0      	movs	r0, #192	; 0xc0
   1730a:	0280      	lsls	r0, r0, #10
   1730c:	4318      	orrs	r0, r3
   1730e:	2208      	movs	r2, #8
   17310:	a901      	add	r1, sp, #4
   17312:	4b26      	ldr	r3, [pc, #152]	; (173ac <nm_get_firmware_full_info+0xd8>)
   17314:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
   17316:	2800      	cmp	r0, #0
   17318:	d12e      	bne.n	17378 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
   1731a:	9b02      	ldr	r3, [sp, #8]
   1731c:	0418      	lsls	r0, r3, #16
   1731e:	0c00      	lsrs	r0, r0, #16
   17320:	9003      	str	r0, [sp, #12]
					if(reg != 0)
   17322:	d02e      	beq.n	17382 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   17324:	23c0      	movs	r3, #192	; 0xc0
   17326:	029b      	lsls	r3, r3, #10
   17328:	4318      	orrs	r0, r3
   1732a:	2228      	movs	r2, #40	; 0x28
   1732c:	0021      	movs	r1, r4
   1732e:	4b1f      	ldr	r3, [pc, #124]	; (173ac <nm_get_firmware_full_info+0xd8>)
   17330:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
   17332:	2800      	cmp	r0, #0
   17334:	d120      	bne.n	17378 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   17336:	7921      	ldrb	r1, [r4, #4]
   17338:	0209      	lsls	r1, r1, #8
   1733a:	79a2      	ldrb	r2, [r4, #6]
   1733c:	230f      	movs	r3, #15
   1733e:	401a      	ands	r2, r3
   17340:	430a      	orrs	r2, r1
   17342:	7961      	ldrb	r1, [r4, #5]
   17344:	0109      	lsls	r1, r1, #4
   17346:	25ff      	movs	r5, #255	; 0xff
   17348:	4029      	ands	r1, r5
   1734a:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   1734c:	79e1      	ldrb	r1, [r4, #7]
   1734e:	0209      	lsls	r1, r1, #8
   17350:	7a66      	ldrb	r6, [r4, #9]
   17352:	4033      	ands	r3, r6
   17354:	430b      	orrs	r3, r1
   17356:	7a21      	ldrb	r1, [r4, #8]
   17358:	0109      	lsls	r1, r1, #4
   1735a:	400d      	ands	r5, r1
   1735c:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   1735e:	2a00      	cmp	r2, #0
   17360:	d012      	beq.n	17388 <nm_get_firmware_full_info+0xb4>
   17362:	2b00      	cmp	r3, #0
   17364:	d013      	beq.n	1738e <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   17366:	4912      	ldr	r1, [pc, #72]	; (173b0 <nm_get_firmware_full_info+0xdc>)
   17368:	428b      	cmp	r3, r1
   1736a:	d813      	bhi.n	17394 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
   1736c:	4b11      	ldr	r3, [pc, #68]	; (173b4 <nm_get_firmware_full_info+0xe0>)
   1736e:	429a      	cmp	r2, r3
   17370:	d802      	bhi.n	17378 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   17372:	380d      	subs	r0, #13
   17374:	e000      	b.n	17378 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
   17376:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
   17378:	b004      	add	sp, #16
   1737a:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
   1737c:	200c      	movs	r0, #12
   1737e:	4240      	negs	r0, r0
   17380:	e7fa      	b.n	17378 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
   17382:	200c      	movs	r0, #12
   17384:	4240      	negs	r0, r0
   17386:	e7f7      	b.n	17378 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
   17388:	200c      	movs	r0, #12
   1738a:	4240      	negs	r0, r0
   1738c:	e7f4      	b.n	17378 <nm_get_firmware_full_info+0xa4>
   1738e:	200c      	movs	r0, #12
   17390:	4240      	negs	r0, r0
   17392:	e7f1      	b.n	17378 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
   17394:	200d      	movs	r0, #13
   17396:	4240      	negs	r0, r0
   17398:	e7ee      	b.n	17378 <nm_get_firmware_full_info+0xa4>
   1739a:	46c0      	nop			; (mov r8, r8)
   1739c:	0001fc1b 	.word	0x0001fc1b
   173a0:	00015e31 	.word	0x00015e31
   173a4:	000c0008 	.word	0x000c0008
   173a8:	000171ed 	.word	0x000171ed
   173ac:	00017205 	.word	0x00017205
   173b0:	00001354 	.word	0x00001354
   173b4:	00001353 	.word	0x00001353

000173b8 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   173b8:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
   173ba:	2800      	cmp	r0, #0
   173bc:	d034      	beq.n	17428 <nm_drv_init+0x70>
		u8Mode = *((uint8 *)arg);
   173be:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   173c0:	1e6b      	subs	r3, r5, #1
   173c2:	2b03      	cmp	r3, #3
   173c4:	d900      	bls.n	173c8 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   173c6:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
   173c8:	2000      	movs	r0, #0
   173ca:	4b1e      	ldr	r3, [pc, #120]	; (17444 <nm_drv_init+0x8c>)
   173cc:	4798      	blx	r3
   173ce:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   173d0:	d12c      	bne.n	1742c <nm_drv_init+0x74>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   173d2:	481d      	ldr	r0, [pc, #116]	; (17448 <nm_drv_init+0x90>)
   173d4:	4c1d      	ldr	r4, [pc, #116]	; (1744c <nm_drv_init+0x94>)
   173d6:	47a0      	blx	r4
   173d8:	4b1d      	ldr	r3, [pc, #116]	; (17450 <nm_drv_init+0x98>)
   173da:	4798      	blx	r3
   173dc:	0001      	movs	r1, r0
   173de:	481d      	ldr	r0, [pc, #116]	; (17454 <nm_drv_init+0x9c>)
   173e0:	47a0      	blx	r4
   173e2:	481d      	ldr	r0, [pc, #116]	; (17458 <nm_drv_init+0xa0>)
   173e4:	47a0      	blx	r4
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   173e6:	4b1d      	ldr	r3, [pc, #116]	; (1745c <nm_drv_init+0xa4>)
   173e8:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   173ea:	0028      	movs	r0, r5
   173ec:	4b1c      	ldr	r3, [pc, #112]	; (17460 <nm_drv_init+0xa8>)
   173ee:	4798      	blx	r3
   173f0:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   173f2:	d115      	bne.n	17420 <nm_drv_init+0x68>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   173f4:	0028      	movs	r0, r5
   173f6:	4b1b      	ldr	r3, [pc, #108]	; (17464 <nm_drv_init+0xac>)
   173f8:	4798      	blx	r3
   173fa:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   173fc:	d110      	bne.n	17420 <nm_drv_init+0x68>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   173fe:	3d02      	subs	r5, #2
   17400:	2d01      	cmp	r5, #1
   17402:	d90f      	bls.n	17424 <nm_drv_init+0x6c>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   17404:	4b18      	ldr	r3, [pc, #96]	; (17468 <nm_drv_init+0xb0>)
   17406:	4798      	blx	r3
   17408:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1740a:	d00b      	beq.n	17424 <nm_drv_init+0x6c>
		M2M_ERR("failed to enable interrupts..\n");
   1740c:	22a7      	movs	r2, #167	; 0xa7
   1740e:	0052      	lsls	r2, r2, #1
   17410:	4916      	ldr	r1, [pc, #88]	; (1746c <nm_drv_init+0xb4>)
   17412:	4817      	ldr	r0, [pc, #92]	; (17470 <nm_drv_init+0xb8>)
   17414:	4d0d      	ldr	r5, [pc, #52]	; (1744c <nm_drv_init+0x94>)
   17416:	47a8      	blx	r5
   17418:	4816      	ldr	r0, [pc, #88]	; (17474 <nm_drv_init+0xbc>)
   1741a:	47a8      	blx	r5
   1741c:	480e      	ldr	r0, [pc, #56]	; (17458 <nm_drv_init+0xa0>)
   1741e:	47a8      	blx	r5
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
   17420:	4b15      	ldr	r3, [pc, #84]	; (17478 <nm_drv_init+0xc0>)
   17422:	4798      	blx	r3
ERR1:
	return ret;
}
   17424:	0020      	movs	r0, r4
   17426:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
   17428:	2501      	movs	r5, #1
   1742a:	e7cd      	b.n	173c8 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
   1742c:	2290      	movs	r2, #144	; 0x90
   1742e:	0052      	lsls	r2, r2, #1
   17430:	490e      	ldr	r1, [pc, #56]	; (1746c <nm_drv_init+0xb4>)
   17432:	480f      	ldr	r0, [pc, #60]	; (17470 <nm_drv_init+0xb8>)
   17434:	4d05      	ldr	r5, [pc, #20]	; (1744c <nm_drv_init+0x94>)
   17436:	47a8      	blx	r5
   17438:	4810      	ldr	r0, [pc, #64]	; (1747c <nm_drv_init+0xc4>)
   1743a:	47a8      	blx	r5
   1743c:	4806      	ldr	r0, [pc, #24]	; (17458 <nm_drv_init+0xa0>)
   1743e:	47a8      	blx	r5
		goto ERR1;
   17440:	e7f0      	b.n	17424 <nm_drv_init+0x6c>
   17442:	46c0      	nop			; (mov r8, r8)
   17444:	000171bd 	.word	0x000171bd
   17448:	00021cd4 	.word	0x00021cd4
   1744c:	000148e5 	.word	0x000148e5
   17450:	00016db5 	.word	0x00016db5
   17454:	00022028 	.word	0x00022028
   17458:	000219c0 	.word	0x000219c0
   1745c:	00017f89 	.word	0x00017f89
   17460:	00016fc1 	.word	0x00016fc1
   17464:	000170c5 	.word	0x000170c5
   17468:	00016d59 	.word	0x00016d59
   1746c:	00021f70 	.word	0x00021f70
   17470:	00021998 	.word	0x00021998
   17474:	00021fec 	.word	0x00021fec
   17478:	000171c9 	.word	0x000171c9
   1747c:	0002200c 	.word	0x0002200c

00017480 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   17480:	b570      	push	{r4, r5, r6, lr}
	sint8 ret;

	ret = chip_deinit();
   17482:	4b19      	ldr	r3, [pc, #100]	; (174e8 <nm_drv_deinit+0x68>)
   17484:	4798      	blx	r3
   17486:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   17488:	d10b      	bne.n	174a2 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   1748a:	2000      	movs	r0, #0
   1748c:	4b17      	ldr	r3, [pc, #92]	; (174ec <nm_drv_deinit+0x6c>)
   1748e:	4798      	blx	r3
   17490:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   17492:	d112      	bne.n	174ba <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
   17494:	4b16      	ldr	r3, [pc, #88]	; (174f0 <nm_drv_deinit+0x70>)
   17496:	4798      	blx	r3
   17498:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1749a:	d119      	bne.n	174d0 <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   1749c:	4b15      	ldr	r3, [pc, #84]	; (174f4 <nm_drv_deinit+0x74>)
   1749e:	4798      	blx	r3
   174a0:	e009      	b.n	174b6 <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   174a2:	2266      	movs	r2, #102	; 0x66
   174a4:	32ff      	adds	r2, #255	; 0xff
   174a6:	4914      	ldr	r1, [pc, #80]	; (174f8 <nm_drv_deinit+0x78>)
   174a8:	4814      	ldr	r0, [pc, #80]	; (174fc <nm_drv_deinit+0x7c>)
   174aa:	4d15      	ldr	r5, [pc, #84]	; (17500 <nm_drv_deinit+0x80>)
   174ac:	47a8      	blx	r5
   174ae:	4815      	ldr	r0, [pc, #84]	; (17504 <nm_drv_deinit+0x84>)
   174b0:	47a8      	blx	r5
   174b2:	4815      	ldr	r0, [pc, #84]	; (17508 <nm_drv_deinit+0x88>)
   174b4:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
   174b6:	0020      	movs	r0, r4
   174b8:	bd70      	pop	{r4, r5, r6, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   174ba:	22b6      	movs	r2, #182	; 0xb6
   174bc:	0052      	lsls	r2, r2, #1
   174be:	490e      	ldr	r1, [pc, #56]	; (174f8 <nm_drv_deinit+0x78>)
   174c0:	480e      	ldr	r0, [pc, #56]	; (174fc <nm_drv_deinit+0x7c>)
   174c2:	4d0f      	ldr	r5, [pc, #60]	; (17500 <nm_drv_deinit+0x80>)
   174c4:	47a8      	blx	r5
   174c6:	4811      	ldr	r0, [pc, #68]	; (1750c <nm_drv_deinit+0x8c>)
   174c8:	47a8      	blx	r5
   174ca:	480f      	ldr	r0, [pc, #60]	; (17508 <nm_drv_deinit+0x88>)
   174cc:	47a8      	blx	r5
		goto ERR1;
   174ce:	e7f2      	b.n	174b6 <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
   174d0:	22b9      	movs	r2, #185	; 0xb9
   174d2:	0052      	lsls	r2, r2, #1
   174d4:	4908      	ldr	r1, [pc, #32]	; (174f8 <nm_drv_deinit+0x78>)
   174d6:	4809      	ldr	r0, [pc, #36]	; (174fc <nm_drv_deinit+0x7c>)
   174d8:	4d09      	ldr	r5, [pc, #36]	; (17500 <nm_drv_deinit+0x80>)
   174da:	47a8      	blx	r5
   174dc:	480c      	ldr	r0, [pc, #48]	; (17510 <nm_drv_deinit+0x90>)
   174de:	47a8      	blx	r5
   174e0:	4809      	ldr	r0, [pc, #36]	; (17508 <nm_drv_deinit+0x88>)
   174e2:	47a8      	blx	r5
		goto ERR1;
   174e4:	e7e7      	b.n	174b6 <nm_drv_deinit+0x36>
   174e6:	46c0      	nop			; (mov r8, r8)
   174e8:	0001713d 	.word	0x0001713d
   174ec:	00018cdd 	.word	0x00018cdd
   174f0:	000171c9 	.word	0x000171c9
   174f4:	00017f35 	.word	0x00017f35
   174f8:	00021f7c 	.word	0x00021f7c
   174fc:	00021998 	.word	0x00021998
   17500:	000148e5 	.word	0x000148e5
   17504:	00021f8c 	.word	0x00021f8c
   17508:	000219c0 	.word	0x000219c0
   1750c:	00021fac 	.word	0x00021fac
   17510:	00021fd0 	.word	0x00021fd0

00017514 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   17514:	b500      	push	{lr}
   17516:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   17518:	ab01      	add	r3, sp, #4
   1751a:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
   1751c:	2200      	movs	r2, #0
   1751e:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
   17520:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   17522:	0019      	movs	r1, r3
   17524:	2003      	movs	r0, #3
   17526:	4b02      	ldr	r3, [pc, #8]	; (17530 <nmi_spi_write+0x1c>)
   17528:	4798      	blx	r3
}
   1752a:	b005      	add	sp, #20
   1752c:	bd00      	pop	{pc}
   1752e:	46c0      	nop			; (mov r8, r8)
   17530:	00015c6d 	.word	0x00015c6d

00017534 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   17534:	b570      	push	{r4, r5, r6, lr}
   17536:	b084      	sub	sp, #16
   17538:	ac08      	add	r4, sp, #32
   1753a:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
   1753c:	ac01      	add	r4, sp, #4
   1753e:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
   17540:	303f      	adds	r0, #63	; 0x3f
   17542:	b2c4      	uxtb	r4, r0
   17544:	2c0e      	cmp	r4, #14
   17546:	d900      	bls.n	1754a <spi_cmd+0x16>
   17548:	e082      	b.n	17650 <spi_cmd+0x11c>
   1754a:	00a0      	lsls	r0, r4, #2
   1754c:	4c4e      	ldr	r4, [pc, #312]	; (17688 <spi_cmd+0x154>)
   1754e:	5820      	ldr	r0, [r4, r0]
   17550:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   17552:	ab01      	add	r3, sp, #4
   17554:	0c0a      	lsrs	r2, r1, #16
   17556:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   17558:	0a0a      	lsrs	r2, r1, #8
   1755a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   1755c:	70d9      	strb	r1, [r3, #3]
		len = 5;
   1755e:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
   17560:	4b4a      	ldr	r3, [pc, #296]	; (1768c <spi_cmd+0x158>)
   17562:	781b      	ldrb	r3, [r3, #0]
   17564:	2b00      	cmp	r3, #0
   17566:	d075      	beq.n	17654 <spi_cmd+0x120>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
   17568:	3901      	subs	r1, #1
   1756a:	b2c9      	uxtb	r1, r1
   1756c:	e081      	b.n	17672 <spi_cmd+0x13e>
		bc[1] = (uint8)(adr >> 8);
   1756e:	0a0b      	lsrs	r3, r1, #8
   17570:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
   17572:	2d00      	cmp	r5, #0
   17574:	d107      	bne.n	17586 <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
   17576:	aa01      	add	r2, sp, #4
   17578:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
   1757a:	ab01      	add	r3, sp, #4
   1757c:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
   1757e:	2200      	movs	r2, #0
   17580:	70da      	strb	r2, [r3, #3]
		len = 5;
   17582:	2105      	movs	r1, #5
		break;
   17584:	e7ec      	b.n	17560 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
   17586:	2280      	movs	r2, #128	; 0x80
   17588:	4252      	negs	r2, r2
   1758a:	4313      	orrs	r3, r2
   1758c:	aa01      	add	r2, sp, #4
   1758e:	7053      	strb	r3, [r2, #1]
   17590:	e7f3      	b.n	1757a <spi_cmd+0x46>
		bc[1] = 0x00;
   17592:	ab01      	add	r3, sp, #4
   17594:	2200      	movs	r2, #0
   17596:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   17598:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   1759a:	70da      	strb	r2, [r3, #3]
		len = 5;
   1759c:	2105      	movs	r1, #5
		break;
   1759e:	e7df      	b.n	17560 <spi_cmd+0x2c>
		bc[1] = 0x00;
   175a0:	ab01      	add	r3, sp, #4
   175a2:	2200      	movs	r2, #0
   175a4:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   175a6:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   175a8:	70da      	strb	r2, [r3, #3]
		len = 5;
   175aa:	2105      	movs	r1, #5
		break;
   175ac:	e7d8      	b.n	17560 <spi_cmd+0x2c>
		bc[1] = 0xff;
   175ae:	ab01      	add	r3, sp, #4
   175b0:	22ff      	movs	r2, #255	; 0xff
   175b2:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   175b4:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   175b6:	70da      	strb	r2, [r3, #3]
		len = 5;
   175b8:	2105      	movs	r1, #5
		break;
   175ba:	e7d1      	b.n	17560 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
   175bc:	aa01      	add	r2, sp, #4
   175be:	0c08      	lsrs	r0, r1, #16
   175c0:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
   175c2:	0a08      	lsrs	r0, r1, #8
   175c4:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
   175c6:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
   175c8:	0a19      	lsrs	r1, r3, #8
   175ca:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
   175cc:	7153      	strb	r3, [r2, #5]
		len = 7;
   175ce:	2107      	movs	r1, #7
		break;
   175d0:	e7c6      	b.n	17560 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
   175d2:	aa01      	add	r2, sp, #4
   175d4:	0c08      	lsrs	r0, r1, #16
   175d6:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
   175d8:	0a08      	lsrs	r0, r1, #8
   175da:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
   175dc:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
   175de:	0c19      	lsrs	r1, r3, #16
   175e0:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
   175e2:	0a19      	lsrs	r1, r3, #8
   175e4:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
   175e6:	7193      	strb	r3, [r2, #6]
		len = 8;
   175e8:	2108      	movs	r1, #8
		break;
   175ea:	e7b9      	b.n	17560 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
   175ec:	0a0b      	lsrs	r3, r1, #8
   175ee:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
   175f0:	2d00      	cmp	r5, #0
   175f2:	d10c      	bne.n	1760e <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
   175f4:	a801      	add	r0, sp, #4
   175f6:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
   175f8:	ab01      	add	r3, sp, #4
   175fa:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   175fc:	0e11      	lsrs	r1, r2, #24
   175fe:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   17600:	0c11      	lsrs	r1, r2, #16
   17602:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   17604:	0a11      	lsrs	r1, r2, #8
   17606:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
   17608:	719a      	strb	r2, [r3, #6]
		len = 8;
   1760a:	2108      	movs	r1, #8
		break;
   1760c:	e7a8      	b.n	17560 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
   1760e:	2080      	movs	r0, #128	; 0x80
   17610:	4240      	negs	r0, r0
   17612:	4303      	orrs	r3, r0
   17614:	a801      	add	r0, sp, #4
   17616:	7043      	strb	r3, [r0, #1]
   17618:	e7ee      	b.n	175f8 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
   1761a:	ab01      	add	r3, sp, #4
   1761c:	0c08      	lsrs	r0, r1, #16
   1761e:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   17620:	0a08      	lsrs	r0, r1, #8
   17622:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
   17624:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   17626:	0e11      	lsrs	r1, r2, #24
   17628:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   1762a:	0c11      	lsrs	r1, r2, #16
   1762c:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   1762e:	0a11      	lsrs	r1, r2, #8
   17630:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
   17632:	71da      	strb	r2, [r3, #7]
		len = 9;
   17634:	2109      	movs	r1, #9
		break;
   17636:	e793      	b.n	17560 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   17638:	2290      	movs	r2, #144	; 0x90
   1763a:	0052      	lsls	r2, r2, #1
   1763c:	4914      	ldr	r1, [pc, #80]	; (17690 <spi_cmd+0x15c>)
   1763e:	4815      	ldr	r0, [pc, #84]	; (17694 <spi_cmd+0x160>)
   17640:	4c15      	ldr	r4, [pc, #84]	; (17698 <spi_cmd+0x164>)
   17642:	47a0      	blx	r4
   17644:	4815      	ldr	r0, [pc, #84]	; (1769c <spi_cmd+0x168>)
   17646:	47a0      	blx	r4
   17648:	4815      	ldr	r0, [pc, #84]	; (176a0 <spi_cmd+0x16c>)
   1764a:	47a0      	blx	r4
			result = N_FAIL;
   1764c:	2300      	movs	r3, #0
   1764e:	e017      	b.n	17680 <spi_cmd+0x14c>
	switch (cmd) {
   17650:	2300      	movs	r3, #0
   17652:	e015      	b.n	17680 <spi_cmd+0x14c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   17654:	1e4e      	subs	r6, r1, #1
   17656:	aa01      	add	r2, sp, #4
   17658:	1995      	adds	r5, r2, r6
   1765a:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
   1765c:	4c11      	ldr	r4, [pc, #68]	; (176a4 <spi_cmd+0x170>)
   1765e:	005b      	lsls	r3, r3, #1
   17660:	7810      	ldrb	r0, [r2, #0]
   17662:	4043      	eors	r3, r0
   17664:	5ce3      	ldrb	r3, [r4, r3]
   17666:	3201      	adds	r2, #1
	while (len--)
   17668:	42aa      	cmp	r2, r5
   1766a:	d1f8      	bne.n	1765e <spi_cmd+0x12a>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   1766c:	005b      	lsls	r3, r3, #1
   1766e:	aa01      	add	r2, sp, #4
   17670:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   17672:	b289      	uxth	r1, r1
   17674:	a801      	add	r0, sp, #4
   17676:	4b0c      	ldr	r3, [pc, #48]	; (176a8 <spi_cmd+0x174>)
   17678:	4798      	blx	r3
   1767a:	2301      	movs	r3, #1
   1767c:	2800      	cmp	r0, #0
   1767e:	d1db      	bne.n	17638 <spi_cmd+0x104>
		}
	}

	return result;
}
   17680:	0018      	movs	r0, r3
   17682:	b004      	add	sp, #16
   17684:	bd70      	pop	{r4, r5, r6, pc}
   17686:	46c0      	nop			; (mov r8, r8)
   17688:	00022038 	.word	0x00022038
   1768c:	200032f0 	.word	0x200032f0
   17690:	000220b4 	.word	0x000220b4
   17694:	00021998 	.word	0x00021998
   17698:	000148e5 	.word	0x000148e5
   1769c:	000224b8 	.word	0x000224b8
   176a0:	000219c0 	.word	0x000219c0
   176a4:	00022144 	.word	0x00022144
   176a8:	00017515 	.word	0x00017515

000176ac <nmi_spi_read>:
{
   176ac:	b500      	push	{lr}
   176ae:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
   176b0:	ab01      	add	r3, sp, #4
   176b2:	2200      	movs	r2, #0
   176b4:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
   176b6:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
   176b8:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   176ba:	0019      	movs	r1, r3
   176bc:	2003      	movs	r0, #3
   176be:	4b02      	ldr	r3, [pc, #8]	; (176c8 <nmi_spi_read+0x1c>)
   176c0:	4798      	blx	r3
}
   176c2:	b005      	add	sp, #20
   176c4:	bd00      	pop	{pc}
   176c6:	46c0      	nop			; (mov r8, r8)
   176c8:	00015c6d 	.word	0x00015c6d

000176cc <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
   176cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   176ce:	46c6      	mov	lr, r8
   176d0:	b500      	push	{lr}
   176d2:	b082      	sub	sp, #8
   176d4:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   176d6:	28cf      	cmp	r0, #207	; 0xcf
   176d8:	d02b      	beq.n	17732 <spi_cmd_rsp+0x66>
   176da:	0003      	movs	r3, r0
   176dc:	333b      	adds	r3, #59	; 0x3b
   176de:	b2db      	uxtb	r3, r3
   176e0:	2b01      	cmp	r3, #1
   176e2:	d926      	bls.n	17732 <spi_cmd_rsp+0x66>
{
   176e4:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   176e6:	466b      	mov	r3, sp
   176e8:	1dde      	adds	r6, r3, #7
   176ea:	4b24      	ldr	r3, [pc, #144]	; (1777c <spi_cmd_rsp+0xb0>)
   176ec:	4698      	mov	r8, r3
   176ee:	2101      	movs	r1, #1
   176f0:	0030      	movs	r0, r6
   176f2:	47c0      	blx	r8
   176f4:	1e05      	subs	r5, r0, #0
   176f6:	d125      	bne.n	17744 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   176f8:	7833      	ldrb	r3, [r6, #0]
   176fa:	42bb      	cmp	r3, r7
   176fc:	d02e      	beq.n	1775c <spi_cmd_rsp+0x90>
   176fe:	3c01      	subs	r4, #1
   17700:	b2e4      	uxtb	r4, r4
   17702:	2c00      	cmp	r4, #0
   17704:	d1f3      	bne.n	176ee <spi_cmd_rsp+0x22>
   17706:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   17708:	466b      	mov	r3, sp
   1770a:	1dde      	adds	r6, r3, #7
   1770c:	4f1b      	ldr	r7, [pc, #108]	; (1777c <spi_cmd_rsp+0xb0>)
   1770e:	2101      	movs	r1, #1
   17710:	0030      	movs	r0, r6
   17712:	47b8      	blx	r7
   17714:	2800      	cmp	r0, #0
   17716:	d123      	bne.n	17760 <spi_cmd_rsp+0x94>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   17718:	7833      	ldrb	r3, [r6, #0]
   1771a:	2b00      	cmp	r3, #0
   1771c:	d02b      	beq.n	17776 <spi_cmd_rsp+0xaa>
   1771e:	3c01      	subs	r4, #1
   17720:	b2e4      	uxtb	r4, r4
   17722:	2c00      	cmp	r4, #0
   17724:	d1f3      	bne.n	1770e <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
   17726:	2501      	movs	r5, #1

_fail_:

	return result;
}
   17728:	0028      	movs	r0, r5
   1772a:	b002      	add	sp, #8
   1772c:	bc04      	pop	{r2}
   1772e:	4690      	mov	r8, r2
   17730:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   17732:	2101      	movs	r1, #1
   17734:	466b      	mov	r3, sp
   17736:	1dd8      	adds	r0, r3, #7
   17738:	4b10      	ldr	r3, [pc, #64]	; (1777c <spi_cmd_rsp+0xb0>)
   1773a:	4798      	blx	r3
			result = N_FAIL;
   1773c:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   1773e:	2800      	cmp	r0, #0
   17740:	d0d0      	beq.n	176e4 <spi_cmd_rsp+0x18>
   17742:	e7f1      	b.n	17728 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   17744:	225c      	movs	r2, #92	; 0x5c
   17746:	32ff      	adds	r2, #255	; 0xff
   17748:	490d      	ldr	r1, [pc, #52]	; (17780 <spi_cmd_rsp+0xb4>)
   1774a:	480e      	ldr	r0, [pc, #56]	; (17784 <spi_cmd_rsp+0xb8>)
   1774c:	4c0e      	ldr	r4, [pc, #56]	; (17788 <spi_cmd_rsp+0xbc>)
   1774e:	47a0      	blx	r4
   17750:	480e      	ldr	r0, [pc, #56]	; (1778c <spi_cmd_rsp+0xc0>)
   17752:	47a0      	blx	r4
   17754:	480e      	ldr	r0, [pc, #56]	; (17790 <spi_cmd_rsp+0xc4>)
   17756:	47a0      	blx	r4
			result = N_FAIL;
   17758:	2500      	movs	r5, #0
			goto _fail_;
   1775a:	e7e5      	b.n	17728 <spi_cmd_rsp+0x5c>
   1775c:	240b      	movs	r4, #11
   1775e:	e7d3      	b.n	17708 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   17760:	226a      	movs	r2, #106	; 0x6a
   17762:	32ff      	adds	r2, #255	; 0xff
   17764:	4906      	ldr	r1, [pc, #24]	; (17780 <spi_cmd_rsp+0xb4>)
   17766:	4807      	ldr	r0, [pc, #28]	; (17784 <spi_cmd_rsp+0xb8>)
   17768:	4c07      	ldr	r4, [pc, #28]	; (17788 <spi_cmd_rsp+0xbc>)
   1776a:	47a0      	blx	r4
   1776c:	4807      	ldr	r0, [pc, #28]	; (1778c <spi_cmd_rsp+0xc0>)
   1776e:	47a0      	blx	r4
   17770:	4807      	ldr	r0, [pc, #28]	; (17790 <spi_cmd_rsp+0xc4>)
   17772:	47a0      	blx	r4
			goto _fail_;
   17774:	e7d8      	b.n	17728 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
   17776:	2501      	movs	r5, #1
   17778:	e7d6      	b.n	17728 <spi_cmd_rsp+0x5c>
   1777a:	46c0      	nop			; (mov r8, r8)
   1777c:	000176ad 	.word	0x000176ad
   17780:	000220cc 	.word	0x000220cc
   17784:	00021998 	.word	0x00021998
   17788:	000148e5 	.word	0x000148e5
   1778c:	000226b4 	.word	0x000226b4
   17790:	000219c0 	.word	0x000219c0

00017794 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   17794:	b5f0      	push	{r4, r5, r6, r7, lr}
   17796:	46de      	mov	lr, fp
   17798:	4657      	mov	r7, sl
   1779a:	464e      	mov	r6, r9
   1779c:	4645      	mov	r5, r8
   1779e:	b5e0      	push	{r5, r6, r7, lr}
   177a0:	b097      	sub	sp, #92	; 0x5c
   177a2:	0005      	movs	r5, r0
   177a4:	4690      	mov	r8, r2
   177a6:	9300      	str	r3, [sp, #0]
   177a8:	ab20      	add	r3, sp, #128	; 0x80
   177aa:	7818      	ldrb	r0, [r3, #0]
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
	int result = N_OK;

	wb[0] = cmd;
   177ac:	ab0e      	add	r3, sp, #56	; 0x38
   177ae:	701d      	strb	r5, [r3, #0]
	switch (cmd) {
   177b0:	002b      	movs	r3, r5
   177b2:	333f      	adds	r3, #63	; 0x3f
   177b4:	b2da      	uxtb	r2, r3
   177b6:	2a0e      	cmp	r2, #14
   177b8:	d900      	bls.n	177bc <spi_cmd_complete+0x28>
   177ba:	e263      	b.n	17c84 <spi_cmd_complete+0x4f0>
   177bc:	0093      	lsls	r3, r2, #2
   177be:	4acc      	ldr	r2, [pc, #816]	; (17af0 <spi_cmd_complete+0x35c>)
   177c0:	58d3      	ldr	r3, [r2, r3]
   177c2:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   177c4:	ab0e      	add	r3, sp, #56	; 0x38
   177c6:	0c0a      	lsrs	r2, r1, #16
   177c8:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   177ca:	0a0a      	lsrs	r2, r1, #8
   177cc:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   177ce:	70d9      	strb	r1, [r3, #3]
		len = 5;
   177d0:	2305      	movs	r3, #5
   177d2:	4699      	mov	r9, r3

	if (result != N_OK) {
		return result;
	}

	if (!gu8Crc_off) {
   177d4:	4bc7      	ldr	r3, [pc, #796]	; (17af4 <spi_cmd_complete+0x360>)
   177d6:	781f      	ldrb	r7, [r3, #0]
   177d8:	2f00      	cmp	r7, #0
   177da:	d100      	bne.n	177de <spi_cmd_complete+0x4a>
   177dc:	e254      	b.n	17c88 <spi_cmd_complete+0x4f4>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
	} else {
		len -=1;
   177de:	2301      	movs	r3, #1
   177e0:	425b      	negs	r3, r3
   177e2:	469c      	mov	ip, r3
   177e4:	44e1      	add	r9, ip
   177e6:	e263      	b.n	17cb0 <spi_cmd_complete+0x51c>
		wb[1] = (uint8_t)(adr >> 8);
   177e8:	0a0b      	lsrs	r3, r1, #8
   177ea:	b2db      	uxtb	r3, r3
		if(clockless == 1)  wb[1] |= (1 << 7);
   177ec:	2801      	cmp	r0, #1
   177ee:	d008      	beq.n	17802 <spi_cmd_complete+0x6e>
		wb[1] = (uint8_t)(adr >> 8);
   177f0:	aa0e      	add	r2, sp, #56	; 0x38
   177f2:	7053      	strb	r3, [r2, #1]
		wb[2] = (uint8_t)adr;
   177f4:	ab0e      	add	r3, sp, #56	; 0x38
   177f6:	7099      	strb	r1, [r3, #2]
		wb[3] = 0x00;
   177f8:	2200      	movs	r2, #0
   177fa:	70da      	strb	r2, [r3, #3]
		len = 5;
   177fc:	2305      	movs	r3, #5
   177fe:	4699      	mov	r9, r3
		break;
   17800:	e7e8      	b.n	177d4 <spi_cmd_complete+0x40>
		if(clockless == 1)  wb[1] |= (1 << 7);
   17802:	2280      	movs	r2, #128	; 0x80
   17804:	4252      	negs	r2, r2
   17806:	4313      	orrs	r3, r2
   17808:	aa0e      	add	r2, sp, #56	; 0x38
   1780a:	7053      	strb	r3, [r2, #1]
   1780c:	e7f2      	b.n	177f4 <spi_cmd_complete+0x60>
		wb[1] = 0x00;
   1780e:	ab0e      	add	r3, sp, #56	; 0x38
   17810:	2200      	movs	r2, #0
   17812:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   17814:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   17816:	70da      	strb	r2, [r3, #3]
		len = 5;
   17818:	2305      	movs	r3, #5
   1781a:	4699      	mov	r9, r3
		break;
   1781c:	e7da      	b.n	177d4 <spi_cmd_complete+0x40>
		wb[1] = 0x00;
   1781e:	ab0e      	add	r3, sp, #56	; 0x38
   17820:	2200      	movs	r2, #0
   17822:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   17824:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   17826:	70da      	strb	r2, [r3, #3]
		len = 5;
   17828:	2305      	movs	r3, #5
   1782a:	4699      	mov	r9, r3
		break;
   1782c:	e7d2      	b.n	177d4 <spi_cmd_complete+0x40>
		wb[1] = 0xff;
   1782e:	ab0e      	add	r3, sp, #56	; 0x38
   17830:	22ff      	movs	r2, #255	; 0xff
   17832:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   17834:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   17836:	70da      	strb	r2, [r3, #3]
		len = 5;
   17838:	2305      	movs	r3, #5
   1783a:	4699      	mov	r9, r3
		break;
   1783c:	e7ca      	b.n	177d4 <spi_cmd_complete+0x40>
		wb[1] = (uint8_t)(adr >> 16);
   1783e:	ab0e      	add	r3, sp, #56	; 0x38
   17840:	0c0a      	lsrs	r2, r1, #16
   17842:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   17844:	0a0a      	lsrs	r2, r1, #8
   17846:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   17848:	70d9      	strb	r1, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   1784a:	9900      	ldr	r1, [sp, #0]
   1784c:	0a0a      	lsrs	r2, r1, #8
   1784e:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   17850:	7159      	strb	r1, [r3, #5]
		len = 7;
   17852:	2307      	movs	r3, #7
   17854:	4699      	mov	r9, r3
		break;
   17856:	e7bd      	b.n	177d4 <spi_cmd_complete+0x40>
		wb[1] = (uint8_t)(adr >> 16);
   17858:	ab0e      	add	r3, sp, #56	; 0x38
   1785a:	0c0a      	lsrs	r2, r1, #16
   1785c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1785e:	0a0a      	lsrs	r2, r1, #8
   17860:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   17862:	70d9      	strb	r1, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   17864:	9900      	ldr	r1, [sp, #0]
   17866:	0c0a      	lsrs	r2, r1, #16
   17868:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   1786a:	0a0a      	lsrs	r2, r1, #8
   1786c:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   1786e:	7199      	strb	r1, [r3, #6]
		len = 8;
   17870:	2308      	movs	r3, #8
   17872:	4699      	mov	r9, r3
		break;
   17874:	e7ae      	b.n	177d4 <spi_cmd_complete+0x40>
		wb[1] = (uint8_t)(adr >> 8);
   17876:	0a0b      	lsrs	r3, r1, #8
   17878:	b2db      	uxtb	r3, r3
		if(clockless == 1)  wb[1] |= (1 << 7);
   1787a:	2801      	cmp	r0, #1
   1787c:	d012      	beq.n	178a4 <spi_cmd_complete+0x110>
		wb[1] = (uint8_t)(adr >> 8);
   1787e:	aa0e      	add	r2, sp, #56	; 0x38
   17880:	7053      	strb	r3, [r2, #1]
		wb[2] = (uint8_t)(adr);
   17882:	ab0e      	add	r3, sp, #56	; 0x38
   17884:	7099      	strb	r1, [r3, #2]
		wb[3] = b[3];
   17886:	4642      	mov	r2, r8
   17888:	78d2      	ldrb	r2, [r2, #3]
   1788a:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   1788c:	4642      	mov	r2, r8
   1788e:	7892      	ldrb	r2, [r2, #2]
   17890:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   17892:	4642      	mov	r2, r8
   17894:	7852      	ldrb	r2, [r2, #1]
   17896:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   17898:	4642      	mov	r2, r8
   1789a:	7812      	ldrb	r2, [r2, #0]
   1789c:	719a      	strb	r2, [r3, #6]
		len = 8;
   1789e:	2308      	movs	r3, #8
   178a0:	4699      	mov	r9, r3
		break;
   178a2:	e797      	b.n	177d4 <spi_cmd_complete+0x40>
		if(clockless == 1)  wb[1] |= (1 << 7);
   178a4:	2280      	movs	r2, #128	; 0x80
   178a6:	4252      	negs	r2, r2
   178a8:	4313      	orrs	r3, r2
   178aa:	aa0e      	add	r2, sp, #56	; 0x38
   178ac:	7053      	strb	r3, [r2, #1]
   178ae:	e7e8      	b.n	17882 <spi_cmd_complete+0xee>
		wb[1] = (uint8_t)(adr >> 16);
   178b0:	ab0e      	add	r3, sp, #56	; 0x38
   178b2:	0c0a      	lsrs	r2, r1, #16
   178b4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   178b6:	0a0a      	lsrs	r2, r1, #8
   178b8:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   178ba:	70d9      	strb	r1, [r3, #3]
		wb[4] = b[3];
   178bc:	4642      	mov	r2, r8
   178be:	78d2      	ldrb	r2, [r2, #3]
   178c0:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   178c2:	4642      	mov	r2, r8
   178c4:	7892      	ldrb	r2, [r2, #2]
   178c6:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   178c8:	4642      	mov	r2, r8
   178ca:	7852      	ldrb	r2, [r2, #1]
   178cc:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   178ce:	4642      	mov	r2, r8
   178d0:	7812      	ldrb	r2, [r2, #0]
   178d2:	71da      	strb	r2, [r3, #7]
		len = 9;
   178d4:	2309      	movs	r3, #9
   178d6:	4699      	mov	r9, r3
		break;
   178d8:	e77c      	b.n	177d4 <spi_cmd_complete+0x40>
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
		(cmd == CMD_TERMINATE) ||
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   178da:	464b      	mov	r3, r9
   178dc:	1d9e      	adds	r6, r3, #6
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   178de:	2e20      	cmp	r6, #32
   178e0:	d844      	bhi.n	1796c <spi_cmd_complete+0x1d8>
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
		return result;
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   178e2:	464b      	mov	r3, r9
   178e4:	466a      	mov	r2, sp
   178e6:	71d3      	strb	r3, [r2, #7]
   178e8:	79d7      	ldrb	r7, [r2, #7]
   178ea:	42b7      	cmp	r7, r6
   178ec:	d207      	bcs.n	178fe <spi_cmd_complete+0x16a>
   178ee:	003b      	movs	r3, r7
		wb[wix] = 0;
   178f0:	a90e      	add	r1, sp, #56	; 0x38
   178f2:	2200      	movs	r2, #0
   178f4:	54ca      	strb	r2, [r1, r3]
	for(wix = len; wix< len2; wix++) {
   178f6:	3301      	adds	r3, #1
   178f8:	b2db      	uxtb	r3, r3
   178fa:	429e      	cmp	r6, r3
   178fc:	d8fa      	bhi.n	178f4 <spi_cmd_complete+0x160>
	spi.pu8InBuf = bin;
   178fe:	ab0e      	add	r3, sp, #56	; 0x38
   17900:	9302      	str	r3, [sp, #8]
	spi.pu8OutBuf = bout;
   17902:	ab06      	add	r3, sp, #24
   17904:	9303      	str	r3, [sp, #12]
	spi.u16Sz = sz;
   17906:	ab02      	add	r3, sp, #8
   17908:	811e      	strh	r6, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   1790a:	0019      	movs	r1, r3
   1790c:	2003      	movs	r0, #3
   1790e:	4b7a      	ldr	r3, [pc, #488]	; (17af8 <spi_cmd_complete+0x364>)
   17910:	4798      	blx	r3
	}
	rix = len;

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   17912:	2800      	cmp	r0, #0
   17914:	d138      	bne.n	17988 <spi_cmd_complete+0x1f4>
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   17916:	2dcf      	cmp	r5, #207	; 0xcf
   17918:	d004      	beq.n	17924 <spi_cmd_complete+0x190>
   1791a:	002b      	movs	r3, r5
   1791c:	333b      	adds	r3, #59	; 0x3b
   1791e:	b2db      	uxtb	r3, r3
   17920:	2b01      	cmp	r3, #1
   17922:	d801      	bhi.n	17928 <spi_cmd_complete+0x194>
		(cmd == CMD_TERMINATE) ||
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   17924:	3701      	adds	r7, #1
   17926:	b2ff      	uxtb	r7, r7
	}

	rsp = rb[rix++];
   17928:	ab06      	add	r3, sp, #24
   1792a:	5ddb      	ldrb	r3, [r3, r7]
   1792c:	220f      	movs	r2, #15
   1792e:	a902      	add	r1, sp, #8
   17930:	468c      	mov	ip, r1
   17932:	4462      	add	r2, ip
   17934:	7013      	strb	r3, [r2, #0]


	if (rsp != cmd) {
   17936:	429d      	cmp	r5, r3
   17938:	d132      	bne.n	179a0 <spi_cmd_complete+0x20c>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   1793a:	1cbc      	adds	r4, r7, #2
   1793c:	b2e4      	uxtb	r4, r4
	rsp = rb[rix++];
   1793e:	1c7b      	adds	r3, r7, #1
	rsp = rb[rix++];
   17940:	b2db      	uxtb	r3, r3
   17942:	aa06      	add	r2, sp, #24
   17944:	5cd0      	ldrb	r0, [r2, r3]
   17946:	230f      	movs	r3, #15
   17948:	aa02      	add	r2, sp, #8
   1794a:	4694      	mov	ip, r2
   1794c:	4463      	add	r3, ip
   1794e:	7018      	strb	r0, [r3, #0]
	if (rsp != 0x00) {
   17950:	2800      	cmp	r0, #0
   17952:	d13c      	bne.n	179ce <spi_cmd_complete+0x23a>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
		result = N_FAIL;
		return result;
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   17954:	002b      	movs	r3, r5
   17956:	333c      	adds	r3, #60	; 0x3c
   17958:	22fb      	movs	r2, #251	; 0xfb
   1795a:	4213      	tst	r3, r2
   1795c:	d047      	beq.n	179ee <spi_cmd_complete+0x25a>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   1795e:	2308      	movs	r3, #8
   17960:	002a      	movs	r2, r5
   17962:	439a      	bics	r2, r3
   17964:	2ac2      	cmp	r2, #194	; 0xc2
   17966:	d042      	beq.n	179ee <spi_cmd_complete+0x25a>
   17968:	2001      	movs	r0, #1
   1796a:	e029      	b.n	179c0 <spi_cmd_complete+0x22c>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   1796c:	22f7      	movs	r2, #247	; 0xf7
   1796e:	0052      	lsls	r2, r2, #1
   17970:	4962      	ldr	r1, [pc, #392]	; (17afc <spi_cmd_complete+0x368>)
   17972:	4863      	ldr	r0, [pc, #396]	; (17b00 <spi_cmd_complete+0x36c>)
   17974:	4c63      	ldr	r4, [pc, #396]	; (17b04 <spi_cmd_complete+0x370>)
   17976:	47a0      	blx	r4
   17978:	2220      	movs	r2, #32
   1797a:	0031      	movs	r1, r6
   1797c:	4862      	ldr	r0, [pc, #392]	; (17b08 <spi_cmd_complete+0x374>)
   1797e:	47a0      	blx	r4
   17980:	4862      	ldr	r0, [pc, #392]	; (17b0c <spi_cmd_complete+0x378>)
   17982:	47a0      	blx	r4
		return result;
   17984:	2000      	movs	r0, #0
   17986:	e01b      	b.n	179c0 <spi_cmd_complete+0x22c>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   17988:	22fa      	movs	r2, #250	; 0xfa
   1798a:	32ff      	adds	r2, #255	; 0xff
   1798c:	495b      	ldr	r1, [pc, #364]	; (17afc <spi_cmd_complete+0x368>)
   1798e:	485c      	ldr	r0, [pc, #368]	; (17b00 <spi_cmd_complete+0x36c>)
   17990:	4c5c      	ldr	r4, [pc, #368]	; (17b04 <spi_cmd_complete+0x370>)
   17992:	47a0      	blx	r4
   17994:	485e      	ldr	r0, [pc, #376]	; (17b10 <spi_cmd_complete+0x37c>)
   17996:	47a0      	blx	r4
   17998:	485c      	ldr	r0, [pc, #368]	; (17b0c <spi_cmd_complete+0x378>)
   1799a:	47a0      	blx	r4
		return result;
   1799c:	2000      	movs	r0, #0
   1799e:	e00f      	b.n	179c0 <spi_cmd_complete+0x22c>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   179a0:	4a5c      	ldr	r2, [pc, #368]	; (17b14 <spi_cmd_complete+0x380>)
   179a2:	4956      	ldr	r1, [pc, #344]	; (17afc <spi_cmd_complete+0x368>)
   179a4:	4856      	ldr	r0, [pc, #344]	; (17b00 <spi_cmd_complete+0x36c>)
   179a6:	4c57      	ldr	r4, [pc, #348]	; (17b04 <spi_cmd_complete+0x370>)
   179a8:	47a0      	blx	r4
   179aa:	230f      	movs	r3, #15
   179ac:	aa02      	add	r2, sp, #8
   179ae:	4694      	mov	ip, r2
   179b0:	4463      	add	r3, ip
   179b2:	781a      	ldrb	r2, [r3, #0]
   179b4:	0029      	movs	r1, r5
   179b6:	4858      	ldr	r0, [pc, #352]	; (17b18 <spi_cmd_complete+0x384>)
   179b8:	47a0      	blx	r4
   179ba:	4854      	ldr	r0, [pc, #336]	; (17b0c <spi_cmd_complete+0x378>)
   179bc:	47a0      	blx	r4
		return result;
   179be:	2000      	movs	r0, #0
				}
			}
	}
_error_:
	return result;
}
   179c0:	b017      	add	sp, #92	; 0x5c
   179c2:	bc3c      	pop	{r2, r3, r4, r5}
   179c4:	4690      	mov	r8, r2
   179c6:	4699      	mov	r9, r3
   179c8:	46a2      	mov	sl, r4
   179ca:	46ab      	mov	fp, r5
   179cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   179ce:	4a53      	ldr	r2, [pc, #332]	; (17b1c <spi_cmd_complete+0x388>)
   179d0:	494a      	ldr	r1, [pc, #296]	; (17afc <spi_cmd_complete+0x368>)
   179d2:	484b      	ldr	r0, [pc, #300]	; (17b00 <spi_cmd_complete+0x36c>)
   179d4:	4c4b      	ldr	r4, [pc, #300]	; (17b04 <spi_cmd_complete+0x370>)
   179d6:	47a0      	blx	r4
   179d8:	230f      	movs	r3, #15
   179da:	aa02      	add	r2, sp, #8
   179dc:	4694      	mov	ip, r2
   179de:	4463      	add	r3, ip
   179e0:	7819      	ldrb	r1, [r3, #0]
   179e2:	484f      	ldr	r0, [pc, #316]	; (17b20 <spi_cmd_complete+0x38c>)
   179e4:	47a0      	blx	r4
   179e6:	4849      	ldr	r0, [pc, #292]	; (17b0c <spi_cmd_complete+0x378>)
   179e8:	47a0      	blx	r4
		return result;
   179ea:	2000      	movs	r0, #0
   179ec:	e7e8      	b.n	179c0 <spi_cmd_complete+0x22c>
   179ee:	370d      	adds	r7, #13
   179f0:	b2fb      	uxtb	r3, r7
   179f2:	469a      	mov	sl, r3
	for(wix = len; wix< len2; wix++) {
   179f4:	2200      	movs	r2, #0
   179f6:	270a      	movs	r7, #10
					rsp = rb[rix++];
   179f8:	a906      	add	r1, sp, #24
   179fa:	e000      	b.n	179fe <spi_cmd_complete+0x26a>
   179fc:	001c      	movs	r4, r3
				if(rix < len2) { 
   179fe:	42a6      	cmp	r6, r4
   17a00:	d956      	bls.n	17ab0 <spi_cmd_complete+0x31c>
					rsp = rb[rix++];
   17a02:	1c63      	adds	r3, r4, #1
   17a04:	b2db      	uxtb	r3, r3
   17a06:	5d08      	ldrb	r0, [r1, r4]
				if (((rsp >> 4) & 0xf) == 0xf)
   17a08:	0902      	lsrs	r2, r0, #4
   17a0a:	2a0f      	cmp	r2, #15
   17a0c:	d06a      	beq.n	17ae4 <spi_cmd_complete+0x350>
			} while (retry--);
   17a0e:	3f01      	subs	r7, #1
   17a10:	2201      	movs	r2, #1
   17a12:	4553      	cmp	r3, sl
   17a14:	d1f2      	bne.n	179fc <spi_cmd_complete+0x268>
   17a16:	320e      	adds	r2, #14
   17a18:	a902      	add	r1, sp, #8
   17a1a:	468c      	mov	ip, r1
   17a1c:	4462      	add	r2, ip
   17a1e:	7010      	strb	r0, [r2, #0]
			if (retry <= 0) {
   17a20:	2f00      	cmp	r7, #0
   17a22:	dd47      	ble.n	17ab4 <spi_cmd_complete+0x320>
			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   17a24:	2dc4      	cmp	r5, #196	; 0xc4
   17a26:	d100      	bne.n	17a2a <spi_cmd_complete+0x296>
   17a28:	e080      	b.n	17b2c <spi_cmd_complete+0x398>
   17a2a:	2dca      	cmp	r5, #202	; 0xca
   17a2c:	d100      	bne.n	17a30 <spi_cmd_complete+0x29c>
   17a2e:	e07d      	b.n	17b2c <spi_cmd_complete+0x398>
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   17a30:	2dc2      	cmp	r5, #194	; 0xc2
   17a32:	d002      	beq.n	17a3a <spi_cmd_complete+0x2a6>
   17a34:	2001      	movs	r0, #1
   17a36:	2dc8      	cmp	r5, #200	; 0xc8
   17a38:	d1c2      	bne.n	179c0 <spi_cmd_complete+0x22c>
				for(ix=0; (rix < len2) && (ix < sz);) {
   17a3a:	429e      	cmp	r6, r3
   17a3c:	d800      	bhi.n	17a40 <spi_cmd_complete+0x2ac>
   17a3e:	e0ac      	b.n	17b9a <spi_cmd_complete+0x406>
   17a40:	9a00      	ldr	r2, [sp, #0]
   17a42:	2a00      	cmp	r2, #0
   17a44:	d100      	bne.n	17a48 <spi_cmd_complete+0x2b4>
   17a46:	e11b      	b.n	17c80 <spi_cmd_complete+0x4ec>
   17a48:	4442      	add	r2, r8
   17a4a:	0014      	movs	r4, r2
   17a4c:	4640      	mov	r0, r8
   17a4e:	2701      	movs	r7, #1
   17a50:	1a3f      	subs	r7, r7, r0
					b[ix++] = rb[rix++];				
   17a52:	a906      	add	r1, sp, #24
   17a54:	183d      	adds	r5, r7, r0
   17a56:	1c5a      	adds	r2, r3, #1
   17a58:	b2d2      	uxtb	r2, r2
   17a5a:	5ccb      	ldrb	r3, [r1, r3]
   17a5c:	7003      	strb	r3, [r0, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   17a5e:	4296      	cmp	r6, r2
   17a60:	d903      	bls.n	17a6a <spi_cmd_complete+0x2d6>
   17a62:	3001      	adds	r0, #1
					b[ix++] = rb[rix++];				
   17a64:	0013      	movs	r3, r2
				for(ix=0; (rix < len2) && (ix < sz);) {
   17a66:	42a0      	cmp	r0, r4
   17a68:	d1f4      	bne.n	17a54 <spi_cmd_complete+0x2c0>
				sz -= ix;
   17a6a:	002b      	movs	r3, r5
   17a6c:	9a00      	ldr	r2, [sp, #0]
   17a6e:	1b54      	subs	r4, r2, r5
   17a70:	2001      	movs	r0, #1
				if(sz > 0) {
   17a72:	2c00      	cmp	r4, #0
   17a74:	d0a4      	beq.n	179c0 <spi_cmd_complete+0x22c>
					if (sz <= (DATA_PKT_SZ-ix)) {
   17a76:	2680      	movs	r6, #128	; 0x80
   17a78:	01b6      	lsls	r6, r6, #6
   17a7a:	1b76      	subs	r6, r6, r5
   17a7c:	42b4      	cmp	r4, r6
   17a7e:	d800      	bhi.n	17a82 <spi_cmd_complete+0x2ee>
						nbytes = sz;
   17a80:	0026      	movs	r6, r4
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   17a82:	b2b1      	uxth	r1, r6
   17a84:	4443      	add	r3, r8
   17a86:	0018      	movs	r0, r3
   17a88:	4b26      	ldr	r3, [pc, #152]	; (17b24 <spi_cmd_complete+0x390>)
   17a8a:	4798      	blx	r3
   17a8c:	2800      	cmp	r0, #0
   17a8e:	d000      	beq.n	17a92 <spi_cmd_complete+0x2fe>
   17a90:	e085      	b.n	17b9e <spi_cmd_complete+0x40a>
					if (!gu8Crc_off) {
   17a92:	4b18      	ldr	r3, [pc, #96]	; (17af4 <spi_cmd_complete+0x360>)
   17a94:	781b      	ldrb	r3, [r3, #0]
   17a96:	2b00      	cmp	r3, #0
   17a98:	d100      	bne.n	17a9c <spi_cmd_complete+0x308>
   17a9a:	e08b      	b.n	17bb4 <spi_cmd_complete+0x420>
					ix += nbytes;
   17a9c:	46aa      	mov	sl, r5
   17a9e:	44b2      	add	sl, r6
					sz -= nbytes;
   17aa0:	1ba6      	subs	r6, r4, r6
				while(sz > 0) {
   17aa2:	2001      	movs	r0, #1
   17aa4:	2e00      	cmp	r6, #0
   17aa6:	d100      	bne.n	17aaa <spi_cmd_complete+0x316>
   17aa8:	e78a      	b.n	179c0 <spi_cmd_complete+0x22c>
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   17aaa:	4f1e      	ldr	r7, [pc, #120]	; (17b24 <spi_cmd_complete+0x390>)
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   17aac:	46bb      	mov	fp, r7
   17aae:	e0b5      	b.n	17c1c <spi_cmd_complete+0x488>
   17ab0:	2a00      	cmp	r2, #0
   17ab2:	d111      	bne.n	17ad8 <spi_cmd_complete+0x344>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   17ab4:	2295      	movs	r2, #149	; 0x95
   17ab6:	0092      	lsls	r2, r2, #2
   17ab8:	4910      	ldr	r1, [pc, #64]	; (17afc <spi_cmd_complete+0x368>)
   17aba:	4811      	ldr	r0, [pc, #68]	; (17b00 <spi_cmd_complete+0x36c>)
   17abc:	4c11      	ldr	r4, [pc, #68]	; (17b04 <spi_cmd_complete+0x370>)
   17abe:	47a0      	blx	r4
   17ac0:	230f      	movs	r3, #15
   17ac2:	aa02      	add	r2, sp, #8
   17ac4:	4694      	mov	ip, r2
   17ac6:	4463      	add	r3, ip
   17ac8:	7819      	ldrb	r1, [r3, #0]
   17aca:	4817      	ldr	r0, [pc, #92]	; (17b28 <spi_cmd_complete+0x394>)
   17acc:	47a0      	blx	r4
   17ace:	480f      	ldr	r0, [pc, #60]	; (17b0c <spi_cmd_complete+0x378>)
   17ad0:	47a0      	blx	r4
				return result;
   17ad2:	2001      	movs	r0, #1
   17ad4:	4240      	negs	r0, r0
   17ad6:	e773      	b.n	179c0 <spi_cmd_complete+0x22c>
   17ad8:	230f      	movs	r3, #15
   17ada:	aa02      	add	r2, sp, #8
   17adc:	4694      	mov	ip, r2
   17ade:	4463      	add	r3, ip
   17ae0:	7018      	strb	r0, [r3, #0]
   17ae2:	e7e7      	b.n	17ab4 <spi_cmd_complete+0x320>
   17ae4:	a902      	add	r1, sp, #8
   17ae6:	468c      	mov	ip, r1
   17ae8:	4462      	add	r2, ip
   17aea:	7010      	strb	r0, [r2, #0]
   17aec:	e798      	b.n	17a20 <spi_cmd_complete+0x28c>
   17aee:	46c0      	nop			; (mov r8, r8)
   17af0:	00022074 	.word	0x00022074
   17af4:	200032f0 	.word	0x200032f0
   17af8:	00015c6d 	.word	0x00015c6d
   17afc:	000220d8 	.word	0x000220d8
   17b00:	00021998 	.word	0x00021998
   17b04:	000148e5 	.word	0x000148e5
   17b08:	000224e4 	.word	0x000224e4
   17b0c:	000219c0 	.word	0x000219c0
   17b10:	000224b8 	.word	0x000224b8
   17b14:	0000022f 	.word	0x0000022f
   17b18:	00022514 	.word	0x00022514
   17b1c:	00000239 	.word	0x00000239
   17b20:	00022550 	.word	0x00022550
   17b24:	000176ad 	.word	0x000176ad
   17b28:	00022584 	.word	0x00022584
				if((rix+3) < len2) { 
   17b2c:	1cda      	adds	r2, r3, #3
   17b2e:	4296      	cmp	r6, r2
   17b30:	d928      	bls.n	17b84 <spi_cmd_complete+0x3f0>
					b[0] = rb[rix++];
   17b32:	aa06      	add	r2, sp, #24
   17b34:	5cd3      	ldrb	r3, [r2, r3]
   17b36:	4641      	mov	r1, r8
   17b38:	700b      	strb	r3, [r1, #0]
   17b3a:	1ca3      	adds	r3, r4, #2
					b[1] = rb[rix++];
   17b3c:	b2db      	uxtb	r3, r3
   17b3e:	5cd3      	ldrb	r3, [r2, r3]
   17b40:	704b      	strb	r3, [r1, #1]
   17b42:	1ce3      	adds	r3, r4, #3
					b[2] = rb[rix++];
   17b44:	b2db      	uxtb	r3, r3
   17b46:	5cd3      	ldrb	r3, [r2, r3]
   17b48:	708b      	strb	r3, [r1, #2]
   17b4a:	1d23      	adds	r3, r4, #4
					b[3] = rb[rix++];
   17b4c:	b2db      	uxtb	r3, r3
   17b4e:	5cd3      	ldrb	r3, [r2, r3]
   17b50:	70cb      	strb	r3, [r1, #3]
				if (!gu8Crc_off) {						
   17b52:	4b63      	ldr	r3, [pc, #396]	; (17ce0 <spi_cmd_complete+0x54c>)
   17b54:	781b      	ldrb	r3, [r3, #0]
   17b56:	2001      	movs	r0, #1
   17b58:	2b00      	cmp	r3, #0
   17b5a:	d000      	beq.n	17b5e <spi_cmd_complete+0x3ca>
   17b5c:	e730      	b.n	179c0 <spi_cmd_complete+0x22c>
					b[3] = rb[rix++];
   17b5e:	1d63      	adds	r3, r4, #5
					if((rix+1) < len2) { 
   17b60:	b2db      	uxtb	r3, r3
   17b62:	3301      	adds	r3, #1
   17b64:	2001      	movs	r0, #1
   17b66:	429e      	cmp	r6, r3
   17b68:	d900      	bls.n	17b6c <spi_cmd_complete+0x3d8>
   17b6a:	e729      	b.n	179c0 <spi_cmd_complete+0x22c>
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   17b6c:	229c      	movs	r2, #156	; 0x9c
   17b6e:	0092      	lsls	r2, r2, #2
   17b70:	495c      	ldr	r1, [pc, #368]	; (17ce4 <spi_cmd_complete+0x550>)
   17b72:	485d      	ldr	r0, [pc, #372]	; (17ce8 <spi_cmd_complete+0x554>)
   17b74:	4c5d      	ldr	r4, [pc, #372]	; (17cec <spi_cmd_complete+0x558>)
   17b76:	47a0      	blx	r4
   17b78:	485d      	ldr	r0, [pc, #372]	; (17cf0 <spi_cmd_complete+0x55c>)
   17b7a:	47a0      	blx	r4
   17b7c:	485d      	ldr	r0, [pc, #372]	; (17cf4 <spi_cmd_complete+0x560>)
   17b7e:	47a0      	blx	r4
						return result;
   17b80:	2000      	movs	r0, #0
   17b82:	e71d      	b.n	179c0 <spi_cmd_complete+0x22c>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   17b84:	4a5c      	ldr	r2, [pc, #368]	; (17cf8 <spi_cmd_complete+0x564>)
   17b86:	4957      	ldr	r1, [pc, #348]	; (17ce4 <spi_cmd_complete+0x550>)
   17b88:	4857      	ldr	r0, [pc, #348]	; (17ce8 <spi_cmd_complete+0x554>)
   17b8a:	4c58      	ldr	r4, [pc, #352]	; (17cec <spi_cmd_complete+0x558>)
   17b8c:	47a0      	blx	r4
   17b8e:	485b      	ldr	r0, [pc, #364]	; (17cfc <spi_cmd_complete+0x568>)
   17b90:	47a0      	blx	r4
   17b92:	4858      	ldr	r0, [pc, #352]	; (17cf4 <spi_cmd_complete+0x560>)
   17b94:	47a0      	blx	r4
					return result;
   17b96:	2000      	movs	r0, #0
   17b98:	e712      	b.n	179c0 <spi_cmd_complete+0x22c>
				for(ix=0; (rix < len2) && (ix < sz);) {
   17b9a:	2500      	movs	r5, #0
   17b9c:	e765      	b.n	17a6a <spi_cmd_complete+0x2d6>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   17b9e:	4a58      	ldr	r2, [pc, #352]	; (17d00 <spi_cmd_complete+0x56c>)
   17ba0:	4950      	ldr	r1, [pc, #320]	; (17ce4 <spi_cmd_complete+0x550>)
   17ba2:	4851      	ldr	r0, [pc, #324]	; (17ce8 <spi_cmd_complete+0x554>)
   17ba4:	4c51      	ldr	r4, [pc, #324]	; (17cec <spi_cmd_complete+0x558>)
   17ba6:	47a0      	blx	r4
   17ba8:	4856      	ldr	r0, [pc, #344]	; (17d04 <spi_cmd_complete+0x570>)
   17baa:	47a0      	blx	r4
   17bac:	4851      	ldr	r0, [pc, #324]	; (17cf4 <spi_cmd_complete+0x560>)
   17bae:	47a0      	blx	r4
						goto _error_;
   17bb0:	2000      	movs	r0, #0
   17bb2:	e705      	b.n	179c0 <spi_cmd_complete+0x22c>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   17bb4:	2102      	movs	r1, #2
   17bb6:	a802      	add	r0, sp, #8
   17bb8:	4b53      	ldr	r3, [pc, #332]	; (17d08 <spi_cmd_complete+0x574>)
   17bba:	4798      	blx	r3
   17bbc:	2800      	cmp	r0, #0
   17bbe:	d100      	bne.n	17bc2 <spi_cmd_complete+0x42e>
   17bc0:	e76c      	b.n	17a9c <spi_cmd_complete+0x308>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   17bc2:	22a6      	movs	r2, #166	; 0xa6
   17bc4:	0092      	lsls	r2, r2, #2
   17bc6:	4947      	ldr	r1, [pc, #284]	; (17ce4 <spi_cmd_complete+0x550>)
   17bc8:	4847      	ldr	r0, [pc, #284]	; (17ce8 <spi_cmd_complete+0x554>)
   17bca:	4c48      	ldr	r4, [pc, #288]	; (17cec <spi_cmd_complete+0x558>)
   17bcc:	47a0      	blx	r4
   17bce:	484f      	ldr	r0, [pc, #316]	; (17d0c <spi_cmd_complete+0x578>)
   17bd0:	47a0      	blx	r4
   17bd2:	4848      	ldr	r0, [pc, #288]	; (17cf4 <spi_cmd_complete+0x560>)
   17bd4:	47a0      	blx	r4
							goto _error_;
   17bd6:	e7eb      	b.n	17bb0 <spi_cmd_complete+0x41c>
   17bd8:	9b00      	ldr	r3, [sp, #0]
   17bda:	4699      	mov	r9, r3
				for(ix=0; (rix < len2) && (ix < sz);) {
   17bdc:	240b      	movs	r4, #11
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   17bde:	250f      	movs	r5, #15
   17be0:	ab02      	add	r3, sp, #8
   17be2:	469c      	mov	ip, r3
   17be4:	4465      	add	r5, ip
   17be6:	2101      	movs	r1, #1
   17be8:	0028      	movs	r0, r5
   17bea:	47b8      	blx	r7
   17bec:	2800      	cmp	r0, #0
   17bee:	d11c      	bne.n	17c2a <spi_cmd_complete+0x496>
						if (((rsp >> 4) & 0xf) == 0xf)
   17bf0:	782b      	ldrb	r3, [r5, #0]
   17bf2:	091b      	lsrs	r3, r3, #4
   17bf4:	2b0f      	cmp	r3, #15
   17bf6:	d002      	beq.n	17bfe <spi_cmd_complete+0x46a>
   17bf8:	3c01      	subs	r4, #1
					} while (retry--);
   17bfa:	2c00      	cmp	r4, #0
   17bfc:	d1f3      	bne.n	17be6 <spi_cmd_complete+0x452>
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   17bfe:	466b      	mov	r3, sp
   17c00:	8819      	ldrh	r1, [r3, #0]
   17c02:	4640      	mov	r0, r8
   17c04:	4450      	add	r0, sl
   17c06:	47d8      	blx	fp
   17c08:	2800      	cmp	r0, #0
   17c0a:	d11a      	bne.n	17c42 <spi_cmd_complete+0x4ae>
					if (!gu8Crc_off) {
   17c0c:	4b34      	ldr	r3, [pc, #208]	; (17ce0 <spi_cmd_complete+0x54c>)
   17c0e:	781b      	ldrb	r3, [r3, #0]
   17c10:	2b00      	cmp	r3, #0
   17c12:	d022      	beq.n	17c5a <spi_cmd_complete+0x4c6>
					ix += nbytes;
   17c14:	44ca      	add	sl, r9
					sz -= nbytes;
   17c16:	9b00      	ldr	r3, [sp, #0]
   17c18:	1af6      	subs	r6, r6, r3
				while(sz > 0) {
   17c1a:	d02f      	beq.n	17c7c <spi_cmd_complete+0x4e8>
   17c1c:	9600      	str	r6, [sp, #0]
   17c1e:	2380      	movs	r3, #128	; 0x80
   17c20:	019b      	lsls	r3, r3, #6
   17c22:	429e      	cmp	r6, r3
   17c24:	d9d8      	bls.n	17bd8 <spi_cmd_complete+0x444>
   17c26:	9300      	str	r3, [sp, #0]
   17c28:	e7d6      	b.n	17bd8 <spi_cmd_complete+0x444>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   17c2a:	22ae      	movs	r2, #174	; 0xae
   17c2c:	0092      	lsls	r2, r2, #2
   17c2e:	492d      	ldr	r1, [pc, #180]	; (17ce4 <spi_cmd_complete+0x550>)
   17c30:	482d      	ldr	r0, [pc, #180]	; (17ce8 <spi_cmd_complete+0x554>)
   17c32:	4c2e      	ldr	r4, [pc, #184]	; (17cec <spi_cmd_complete+0x558>)
   17c34:	47a0      	blx	r4
   17c36:	4836      	ldr	r0, [pc, #216]	; (17d10 <spi_cmd_complete+0x57c>)
   17c38:	47a0      	blx	r4
   17c3a:	482e      	ldr	r0, [pc, #184]	; (17cf4 <spi_cmd_complete+0x560>)
   17c3c:	47a0      	blx	r4
   17c3e:	2000      	movs	r0, #0
   17c40:	e6be      	b.n	179c0 <spi_cmd_complete+0x22c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   17c42:	22b2      	movs	r2, #178	; 0xb2
   17c44:	0092      	lsls	r2, r2, #2
   17c46:	4927      	ldr	r1, [pc, #156]	; (17ce4 <spi_cmd_complete+0x550>)
   17c48:	4827      	ldr	r0, [pc, #156]	; (17ce8 <spi_cmd_complete+0x554>)
   17c4a:	4c28      	ldr	r4, [pc, #160]	; (17cec <spi_cmd_complete+0x558>)
   17c4c:	47a0      	blx	r4
   17c4e:	482d      	ldr	r0, [pc, #180]	; (17d04 <spi_cmd_complete+0x570>)
   17c50:	47a0      	blx	r4
   17c52:	4828      	ldr	r0, [pc, #160]	; (17cf4 <spi_cmd_complete+0x560>)
   17c54:	47a0      	blx	r4
						result = N_FAIL;
   17c56:	2000      	movs	r0, #0
						break;
   17c58:	e6b2      	b.n	179c0 <spi_cmd_complete+0x22c>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   17c5a:	2102      	movs	r1, #2
   17c5c:	a802      	add	r0, sp, #8
   17c5e:	4b2a      	ldr	r3, [pc, #168]	; (17d08 <spi_cmd_complete+0x574>)
   17c60:	4798      	blx	r3
   17c62:	2800      	cmp	r0, #0
   17c64:	d0d6      	beq.n	17c14 <spi_cmd_complete+0x480>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   17c66:	4a2b      	ldr	r2, [pc, #172]	; (17d14 <spi_cmd_complete+0x580>)
   17c68:	491e      	ldr	r1, [pc, #120]	; (17ce4 <spi_cmd_complete+0x550>)
   17c6a:	481f      	ldr	r0, [pc, #124]	; (17ce8 <spi_cmd_complete+0x554>)
   17c6c:	4c1f      	ldr	r4, [pc, #124]	; (17cec <spi_cmd_complete+0x558>)
   17c6e:	47a0      	blx	r4
   17c70:	4826      	ldr	r0, [pc, #152]	; (17d0c <spi_cmd_complete+0x578>)
   17c72:	47a0      	blx	r4
   17c74:	481f      	ldr	r0, [pc, #124]	; (17cf4 <spi_cmd_complete+0x560>)
   17c76:	47a0      	blx	r4
							result = N_FAIL;
   17c78:	2000      	movs	r0, #0
							break;
   17c7a:	e6a1      	b.n	179c0 <spi_cmd_complete+0x22c>
   17c7c:	2001      	movs	r0, #1
   17c7e:	e69f      	b.n	179c0 <spi_cmd_complete+0x22c>
				for(ix=0; (rix < len2) && (ix < sz);) {
   17c80:	2001      	movs	r0, #1
   17c82:	e69d      	b.n	179c0 <spi_cmd_complete+0x22c>
		return result;
   17c84:	2000      	movs	r0, #0
   17c86:	e69b      	b.n	179c0 <spi_cmd_complete+0x22c>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   17c88:	2301      	movs	r3, #1
   17c8a:	425b      	negs	r3, r3
   17c8c:	444b      	add	r3, r9
   17c8e:	469c      	mov	ip, r3
   17c90:	001c      	movs	r4, r3
   17c92:	2200      	movs	r2, #0
   17c94:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
   17c96:	4e20      	ldr	r6, [pc, #128]	; (17d18 <spi_cmd_complete+0x584>)
		crc = crc7_byte(crc, *buffer++);
   17c98:	a90e      	add	r1, sp, #56	; 0x38
	return crc7_syndrome_table[(crc << 1) ^ data];
   17c9a:	005b      	lsls	r3, r3, #1
   17c9c:	5c50      	ldrb	r0, [r2, r1]
   17c9e:	4043      	eors	r3, r0
   17ca0:	5cf3      	ldrb	r3, [r6, r3]
   17ca2:	3201      	adds	r2, #1
	while (len--)
   17ca4:	42a2      	cmp	r2, r4
   17ca6:	d1f8      	bne.n	17c9a <spi_cmd_complete+0x506>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   17ca8:	005b      	lsls	r3, r3, #1
   17caa:	aa0e      	add	r2, sp, #56	; 0x38
   17cac:	4661      	mov	r1, ip
   17cae:	5453      	strb	r3, [r2, r1]
	if ((cmd == CMD_RESET) ||
   17cb0:	2dcf      	cmp	r5, #207	; 0xcf
   17cb2:	d100      	bne.n	17cb6 <spi_cmd_complete+0x522>
   17cb4:	e611      	b.n	178da <spi_cmd_complete+0x146>
   17cb6:	002b      	movs	r3, r5
   17cb8:	333b      	adds	r3, #59	; 0x3b
   17cba:	b2db      	uxtb	r3, r3
   17cbc:	2b01      	cmp	r3, #1
   17cbe:	d800      	bhi.n	17cc2 <spi_cmd_complete+0x52e>
   17cc0:	e60b      	b.n	178da <spi_cmd_complete+0x146>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   17cc2:	2dc4      	cmp	r5, #196	; 0xc4
   17cc4:	d004      	beq.n	17cd0 <spi_cmd_complete+0x53c>
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   17cc6:	464b      	mov	r3, r9
   17cc8:	1d5e      	adds	r6, r3, #5
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   17cca:	2dca      	cmp	r5, #202	; 0xca
   17ccc:	d000      	beq.n	17cd0 <spi_cmd_complete+0x53c>
   17cce:	e606      	b.n	178de <spi_cmd_complete+0x14a>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   17cd0:	464e      	mov	r6, r9
   17cd2:	360a      	adds	r6, #10
		if (!gu8Crc_off) {
   17cd4:	2f00      	cmp	r7, #0
   17cd6:	d000      	beq.n	17cda <spi_cmd_complete+0x546>
   17cd8:	e601      	b.n	178de <spi_cmd_complete+0x14a>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   17cda:	3602      	adds	r6, #2
   17cdc:	e5ff      	b.n	178de <spi_cmd_complete+0x14a>
   17cde:	46c0      	nop			; (mov r8, r8)
   17ce0:	200032f0 	.word	0x200032f0
   17ce4:	000220d8 	.word	0x000220d8
   17ce8:	00021998 	.word	0x00021998
   17cec:	000148e5 	.word	0x000148e5
   17cf0:	000225e4 	.word	0x000225e4
   17cf4:	000219c0 	.word	0x000219c0
   17cf8:	00000263 	.word	0x00000263
   17cfc:	000225b4 	.word	0x000225b4
   17d00:	0000028e 	.word	0x0000028e
   17d04:	00022614 	.word	0x00022614
   17d08:	000176ad 	.word	0x000176ad
   17d0c:	00022648 	.word	0x00022648
   17d10:	00022680 	.word	0x00022680
   17d14:	000002d2 	.word	0x000002d2
   17d18:	00022144 	.word	0x00022144

00017d1c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   17d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17d1e:	46de      	mov	lr, fp
   17d20:	4657      	mov	r7, sl
   17d22:	464e      	mov	r6, r9
   17d24:	4645      	mov	r5, r8
   17d26:	b5e0      	push	{r5, r6, r7, lr}
   17d28:	b087      	sub	sp, #28
   17d2a:	9003      	str	r0, [sp, #12]
   17d2c:	9105      	str	r1, [sp, #20]
   17d2e:	2830      	cmp	r0, #48	; 0x30
   17d30:	d80e      	bhi.n	17d50 <spi_write_reg+0x34>
   17d32:	4b27      	ldr	r3, [pc, #156]	; (17dd0 <spi_write_reg+0xb4>)
   17d34:	781b      	ldrb	r3, [r3, #0]
   17d36:	b2db      	uxtb	r3, r3
   17d38:	9304      	str	r3, [sp, #16]
   17d3a:	2300      	movs	r3, #0
   17d3c:	2230      	movs	r2, #48	; 0x30
   17d3e:	9903      	ldr	r1, [sp, #12]
   17d40:	428a      	cmp	r2, r1
   17d42:	415b      	adcs	r3, r3
   17d44:	b2db      	uxtb	r3, r3
   17d46:	469a      	mov	sl, r3
   17d48:	260a      	movs	r6, #10
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   17d4a:	4b22      	ldr	r3, [pc, #136]	; (17dd4 <spi_write_reg+0xb8>)
   17d4c:	469b      	mov	fp, r3
   17d4e:	e02b      	b.n	17da8 <spi_write_reg+0x8c>
   17d50:	4b21      	ldr	r3, [pc, #132]	; (17dd8 <spi_write_reg+0xbc>)
   17d52:	781b      	ldrb	r3, [r3, #0]
   17d54:	e7ef      	b.n	17d36 <spi_write_reg+0x1a>
	if (result != N_OK) {
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   17d56:	4a21      	ldr	r2, [pc, #132]	; (17ddc <spi_write_reg+0xc0>)
   17d58:	4921      	ldr	r1, [pc, #132]	; (17de0 <spi_write_reg+0xc4>)
   17d5a:	4822      	ldr	r0, [pc, #136]	; (17de4 <spi_write_reg+0xc8>)
   17d5c:	4c22      	ldr	r4, [pc, #136]	; (17de8 <spi_write_reg+0xcc>)
   17d5e:	47a0      	blx	r4
   17d60:	9703      	str	r7, [sp, #12]
   17d62:	0039      	movs	r1, r7
   17d64:	4821      	ldr	r0, [pc, #132]	; (17dec <spi_write_reg+0xd0>)
   17d66:	47a0      	blx	r4
   17d68:	4821      	ldr	r0, [pc, #132]	; (17df0 <spi_write_reg+0xd4>)
   17d6a:	47a0      	blx	r4

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
   17d6c:	2001      	movs	r0, #1
   17d6e:	4f21      	ldr	r7, [pc, #132]	; (17df4 <spi_write_reg+0xd8>)
   17d70:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   17d72:	2300      	movs	r3, #0
   17d74:	9300      	str	r3, [sp, #0]
   17d76:	2200      	movs	r2, #0
   17d78:	2100      	movs	r1, #0
   17d7a:	20cf      	movs	r0, #207	; 0xcf
   17d7c:	4d1e      	ldr	r5, [pc, #120]	; (17df8 <spi_write_reg+0xdc>)
   17d7e:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
   17d80:	20cf      	movs	r0, #207	; 0xcf
   17d82:	4b1e      	ldr	r3, [pc, #120]	; (17dfc <spi_write_reg+0xe0>)
   17d84:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   17d86:	22ea      	movs	r2, #234	; 0xea
   17d88:	0092      	lsls	r2, r2, #2
   17d8a:	4915      	ldr	r1, [pc, #84]	; (17de0 <spi_write_reg+0xc4>)
   17d8c:	4815      	ldr	r0, [pc, #84]	; (17de4 <spi_write_reg+0xc8>)
   17d8e:	47a0      	blx	r4
   17d90:	9b05      	ldr	r3, [sp, #20]
   17d92:	9a03      	ldr	r2, [sp, #12]
   17d94:	0031      	movs	r1, r6
   17d96:	481a      	ldr	r0, [pc, #104]	; (17e00 <spi_write_reg+0xe4>)
   17d98:	47a0      	blx	r4
   17d9a:	4815      	ldr	r0, [pc, #84]	; (17df0 <spi_write_reg+0xd4>)
   17d9c:	47a0      	blx	r4
		nm_bsp_sleep(1);
   17d9e:	2001      	movs	r0, #1
   17da0:	47b8      	blx	r7
   17da2:	3e01      	subs	r6, #1
		retry--;
		if(retry) goto _RETRY_;
   17da4:	2e00      	cmp	r6, #0
   17da6:	d00b      	beq.n	17dc0 <spi_write_reg+0xa4>
	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   17da8:	4653      	mov	r3, sl
   17daa:	9300      	str	r3, [sp, #0]
   17dac:	2304      	movs	r3, #4
   17dae:	aa05      	add	r2, sp, #20
   17db0:	9f03      	ldr	r7, [sp, #12]
   17db2:	0039      	movs	r1, r7
   17db4:	9804      	ldr	r0, [sp, #16]
   17db6:	47d8      	blx	fp
   17db8:	b243      	sxtb	r3, r0
   17dba:	4698      	mov	r8, r3
	if (result != N_OK) {
   17dbc:	2b01      	cmp	r3, #1
   17dbe:	d1ca      	bne.n	17d56 <spi_write_reg+0x3a>
	}

	return result;
}
   17dc0:	4640      	mov	r0, r8
   17dc2:	b007      	add	sp, #28
   17dc4:	bc3c      	pop	{r2, r3, r4, r5}
   17dc6:	4690      	mov	r8, r2
   17dc8:	4699      	mov	r9, r3
   17dca:	46a2      	mov	sl, r4
   17dcc:	46ab      	mov	fp, r5
   17dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17dd0:	000220b0 	.word	0x000220b0
   17dd4:	00017795 	.word	0x00017795
   17dd8:	000220b1 	.word	0x000220b1
   17ddc:	0000039d 	.word	0x0000039d
   17de0:	000220fc 	.word	0x000220fc
   17de4:	00021998 	.word	0x00021998
   17de8:	000148e5 	.word	0x000148e5
   17dec:	0002272c 	.word	0x0002272c
   17df0:	000219c0 	.word	0x000219c0
   17df4:	00015aad 	.word	0x00015aad
   17df8:	00017535 	.word	0x00017535
   17dfc:	000176cd 	.word	0x000176cd
   17e00:	00022758 	.word	0x00022758

00017e04 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   17e04:	b5f0      	push	{r4, r5, r6, r7, lr}
   17e06:	46de      	mov	lr, fp
   17e08:	4657      	mov	r7, sl
   17e0a:	464e      	mov	r6, r9
   17e0c:	4645      	mov	r5, r8
   17e0e:	b5e0      	push	{r5, r6, r7, lr}
   17e10:	b089      	sub	sp, #36	; 0x24
   17e12:	9003      	str	r0, [sp, #12]
   17e14:	468a      	mov	sl, r1
   17e16:	28ff      	cmp	r0, #255	; 0xff
   17e18:	d80e      	bhi.n	17e38 <spi_read_reg+0x34>
   17e1a:	4b2e      	ldr	r3, [pc, #184]	; (17ed4 <spi_read_reg+0xd0>)
   17e1c:	781b      	ldrb	r3, [r3, #0]
   17e1e:	b2db      	uxtb	r3, r3
   17e20:	9305      	str	r3, [sp, #20]
   17e22:	2300      	movs	r3, #0
   17e24:	22ff      	movs	r2, #255	; 0xff
   17e26:	9903      	ldr	r1, [sp, #12]
   17e28:	428a      	cmp	r2, r1
   17e2a:	415b      	adcs	r3, r3
   17e2c:	b2db      	uxtb	r3, r3
   17e2e:	4698      	mov	r8, r3
   17e30:	260a      	movs	r6, #10
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   17e32:	4b29      	ldr	r3, [pc, #164]	; (17ed8 <spi_read_reg+0xd4>)
   17e34:	469b      	mov	fp, r3
   17e36:	e029      	b.n	17e8c <spi_read_reg+0x88>
   17e38:	4b28      	ldr	r3, [pc, #160]	; (17edc <spi_read_reg+0xd8>)
   17e3a:	781b      	ldrb	r3, [r3, #0]
   17e3c:	e7ef      	b.n	17e1e <spi_read_reg+0x1a>
	if (result != N_OK) {
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   17e3e:	4a28      	ldr	r2, [pc, #160]	; (17ee0 <spi_read_reg+0xdc>)
   17e40:	4928      	ldr	r1, [pc, #160]	; (17ee4 <spi_read_reg+0xe0>)
   17e42:	4829      	ldr	r0, [pc, #164]	; (17ee8 <spi_read_reg+0xe4>)
   17e44:	4c29      	ldr	r4, [pc, #164]	; (17eec <spi_read_reg+0xe8>)
   17e46:	47a0      	blx	r4
   17e48:	9703      	str	r7, [sp, #12]
   17e4a:	0039      	movs	r1, r7
   17e4c:	4828      	ldr	r0, [pc, #160]	; (17ef0 <spi_read_reg+0xec>)
   17e4e:	47a0      	blx	r4
   17e50:	4828      	ldr	r0, [pc, #160]	; (17ef4 <spi_read_reg+0xf0>)
   17e52:	47a0      	blx	r4
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
   17e54:	2001      	movs	r0, #1
   17e56:	4f28      	ldr	r7, [pc, #160]	; (17ef8 <spi_read_reg+0xf4>)
   17e58:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   17e5a:	2300      	movs	r3, #0
   17e5c:	9300      	str	r3, [sp, #0]
   17e5e:	2200      	movs	r2, #0
   17e60:	2100      	movs	r1, #0
   17e62:	20cf      	movs	r0, #207	; 0xcf
   17e64:	4d25      	ldr	r5, [pc, #148]	; (17efc <spi_read_reg+0xf8>)
   17e66:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
   17e68:	20cf      	movs	r0, #207	; 0xcf
   17e6a:	4b25      	ldr	r3, [pc, #148]	; (17f00 <spi_read_reg+0xfc>)
   17e6c:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   17e6e:	4a25      	ldr	r2, [pc, #148]	; (17f04 <spi_read_reg+0x100>)
   17e70:	491c      	ldr	r1, [pc, #112]	; (17ee4 <spi_read_reg+0xe0>)
   17e72:	481d      	ldr	r0, [pc, #116]	; (17ee8 <spi_read_reg+0xe4>)
   17e74:	47a0      	blx	r4
   17e76:	9a03      	ldr	r2, [sp, #12]
   17e78:	0031      	movs	r1, r6
   17e7a:	4823      	ldr	r0, [pc, #140]	; (17f08 <spi_read_reg+0x104>)
   17e7c:	47a0      	blx	r4
   17e7e:	481d      	ldr	r0, [pc, #116]	; (17ef4 <spi_read_reg+0xf0>)
   17e80:	47a0      	blx	r4
		nm_bsp_sleep(1);
   17e82:	2001      	movs	r0, #1
   17e84:	47b8      	blx	r7
   17e86:	3e01      	subs	r6, #1
		retry--;
		if(retry) goto _RETRY_;
   17e88:	2e00      	cmp	r6, #0
   17e8a:	d021      	beq.n	17ed0 <spi_read_reg+0xcc>
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   17e8c:	4643      	mov	r3, r8
   17e8e:	9300      	str	r3, [sp, #0]
   17e90:	2304      	movs	r3, #4
   17e92:	aa07      	add	r2, sp, #28
   17e94:	9f03      	ldr	r7, [sp, #12]
   17e96:	0039      	movs	r1, r7
   17e98:	9805      	ldr	r0, [sp, #20]
   17e9a:	47d8      	blx	fp
   17e9c:	b243      	sxtb	r3, r0
   17e9e:	9304      	str	r3, [sp, #16]
	if (result != N_OK) {
   17ea0:	2b01      	cmp	r3, #1
   17ea2:	d1cc      	bne.n	17e3e <spi_read_reg+0x3a>
   17ea4:	9d04      	ldr	r5, [sp, #16]
		((uint32)tmp[1] << 8) |
   17ea6:	aa07      	add	r2, sp, #28
   17ea8:	7853      	ldrb	r3, [r2, #1]
   17eaa:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
   17eac:	7891      	ldrb	r1, [r2, #2]
   17eae:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
   17eb0:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
   17eb2:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
   17eb4:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
   17eb6:	78d2      	ldrb	r2, [r2, #3]
   17eb8:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
   17eba:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
   17ebc:	4652      	mov	r2, sl
   17ebe:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
   17ec0:	0028      	movs	r0, r5
   17ec2:	b009      	add	sp, #36	; 0x24
   17ec4:	bc3c      	pop	{r2, r3, r4, r5}
   17ec6:	4690      	mov	r8, r2
   17ec8:	4699      	mov	r9, r3
   17eca:	46a2      	mov	sl, r4
   17ecc:	46ab      	mov	fp, r5
   17ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17ed0:	9d04      	ldr	r5, [sp, #16]
   17ed2:	e7f5      	b.n	17ec0 <spi_read_reg+0xbc>
   17ed4:	000220b2 	.word	0x000220b2
   17ed8:	00017795 	.word	0x00017795
   17edc:	000220b3 	.word	0x000220b3
   17ee0:	00000423 	.word	0x00000423
   17ee4:	0002211c 	.word	0x0002211c
   17ee8:	00021998 	.word	0x00021998
   17eec:	000148e5 	.word	0x000148e5
   17ef0:	000226e8 	.word	0x000226e8
   17ef4:	000219c0 	.word	0x000219c0
   17ef8:	00015aad 	.word	0x00015aad
   17efc:	00017535 	.word	0x00017535
   17f00:	000176cd 	.word	0x000176cd
   17f04:	00000435 	.word	0x00000435
   17f08:	00022714 	.word	0x00022714

00017f0c <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
   17f0c:	b510      	push	{r4, lr}
   17f0e:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   17f10:	2300      	movs	r3, #0
   17f12:	9300      	str	r3, [sp, #0]
   17f14:	2200      	movs	r2, #0
   17f16:	2100      	movs	r1, #0
   17f18:	20cf      	movs	r0, #207	; 0xcf
   17f1a:	4c04      	ldr	r4, [pc, #16]	; (17f2c <nm_spi_reset+0x20>)
   17f1c:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   17f1e:	20cf      	movs	r0, #207	; 0xcf
   17f20:	4b03      	ldr	r3, [pc, #12]	; (17f30 <nm_spi_reset+0x24>)
   17f22:	4798      	blx	r3
	return M2M_SUCCESS;
}
   17f24:	2000      	movs	r0, #0
   17f26:	b002      	add	sp, #8
   17f28:	bd10      	pop	{r4, pc}
   17f2a:	46c0      	nop			; (mov r8, r8)
   17f2c:	00017535 	.word	0x00017535
   17f30:	000176cd 	.word	0x000176cd

00017f34 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
   17f34:	2200      	movs	r2, #0
   17f36:	4b02      	ldr	r3, [pc, #8]	; (17f40 <nm_spi_deinit+0xc>)
   17f38:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
   17f3a:	2000      	movs	r0, #0
   17f3c:	4770      	bx	lr
   17f3e:	46c0      	nop			; (mov r8, r8)
   17f40:	200032f0 	.word	0x200032f0

00017f44 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   17f44:	b500      	push	{lr}
   17f46:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   17f48:	a901      	add	r1, sp, #4
   17f4a:	4b02      	ldr	r3, [pc, #8]	; (17f54 <nm_spi_read_reg+0x10>)
   17f4c:	4798      	blx	r3

	return u32Val;
}
   17f4e:	9801      	ldr	r0, [sp, #4]
   17f50:	b003      	add	sp, #12
   17f52:	bd00      	pop	{pc}
   17f54:	00017e05 	.word	0x00017e05

00017f58 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   17f58:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   17f5a:	4b04      	ldr	r3, [pc, #16]	; (17f6c <nm_spi_read_reg_with_ret+0x14>)
   17f5c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   17f5e:	2300      	movs	r3, #0
   17f60:	2801      	cmp	r0, #1
   17f62:	d101      	bne.n	17f68 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
   17f64:	0018      	movs	r0, r3
   17f66:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
   17f68:	3b06      	subs	r3, #6
   17f6a:	e7fb      	b.n	17f64 <nm_spi_read_reg_with_ret+0xc>
   17f6c:	00017e05 	.word	0x00017e05

00017f70 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   17f70:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   17f72:	4b04      	ldr	r3, [pc, #16]	; (17f84 <nm_spi_write_reg+0x14>)
   17f74:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   17f76:	2300      	movs	r3, #0
   17f78:	2801      	cmp	r0, #1
   17f7a:	d101      	bne.n	17f80 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
   17f7c:	0018      	movs	r0, r3
   17f7e:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
   17f80:	3b06      	subs	r3, #6
   17f82:	e7fb      	b.n	17f7c <nm_spi_write_reg+0xc>
   17f84:	00017d1d 	.word	0x00017d1d

00017f88 <nm_spi_init>:
{
   17f88:	b530      	push	{r4, r5, lr}
   17f8a:	b083      	sub	sp, #12
	uint32 reg = 0;
   17f8c:	2300      	movs	r3, #0
   17f8e:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
   17f90:	4a31      	ldr	r2, [pc, #196]	; (18058 <nm_spi_init+0xd0>)
   17f92:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   17f94:	4669      	mov	r1, sp
   17f96:	4831      	ldr	r0, [pc, #196]	; (1805c <nm_spi_init+0xd4>)
   17f98:	4b31      	ldr	r3, [pc, #196]	; (18060 <nm_spi_init+0xd8>)
   17f9a:	4798      	blx	r3
   17f9c:	2800      	cmp	r0, #0
   17f9e:	d028      	beq.n	17ff2 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
   17fa0:	4b2d      	ldr	r3, [pc, #180]	; (18058 <nm_spi_init+0xd0>)
   17fa2:	781b      	ldrb	r3, [r3, #0]
   17fa4:	2b00      	cmp	r3, #0
   17fa6:	d10d      	bne.n	17fc4 <nm_spi_init+0x3c>
		reg &= ~0x70;
   17fa8:	337c      	adds	r3, #124	; 0x7c
   17faa:	9900      	ldr	r1, [sp, #0]
   17fac:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
   17fae:	3b2c      	subs	r3, #44	; 0x2c
   17fb0:	4319      	orrs	r1, r3
   17fb2:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   17fb4:	4829      	ldr	r0, [pc, #164]	; (1805c <nm_spi_init+0xd4>)
   17fb6:	4b2b      	ldr	r3, [pc, #172]	; (18064 <nm_spi_init+0xdc>)
   17fb8:	4798      	blx	r3
   17fba:	1e04      	subs	r4, r0, #0
   17fbc:	d036      	beq.n	1802c <nm_spi_init+0xa4>
		gu8Crc_off = 1;
   17fbe:	2201      	movs	r2, #1
   17fc0:	4b25      	ldr	r3, [pc, #148]	; (18058 <nm_spi_init+0xd0>)
   17fc2:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
   17fc4:	a901      	add	r1, sp, #4
   17fc6:	2080      	movs	r0, #128	; 0x80
   17fc8:	0140      	lsls	r0, r0, #5
   17fca:	4b25      	ldr	r3, [pc, #148]	; (18060 <nm_spi_init+0xd8>)
   17fcc:	4798      	blx	r3
   17fce:	2800      	cmp	r0, #0
   17fd0:	d036      	beq.n	18040 <nm_spi_init+0xb8>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   17fd2:	4c22      	ldr	r4, [pc, #136]	; (1805c <nm_spi_init+0xd4>)
   17fd4:	0020      	movs	r0, r4
   17fd6:	4b24      	ldr	r3, [pc, #144]	; (18068 <nm_spi_init+0xe0>)
   17fd8:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
   17fda:	2370      	movs	r3, #112	; 0x70
   17fdc:	0001      	movs	r1, r0
   17fde:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
   17fe0:	2050      	movs	r0, #80	; 0x50
   17fe2:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   17fe4:	0020      	movs	r0, r4
   17fe6:	4b21      	ldr	r3, [pc, #132]	; (1806c <nm_spi_init+0xe4>)
   17fe8:	4798      	blx	r3
	return M2M_SUCCESS;
   17fea:	2400      	movs	r4, #0
}
   17fec:	0020      	movs	r0, r4
   17fee:	b003      	add	sp, #12
   17ff0:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
   17ff2:	2201      	movs	r2, #1
   17ff4:	4b18      	ldr	r3, [pc, #96]	; (18058 <nm_spi_init+0xd0>)
   17ff6:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   17ff8:	2298      	movs	r2, #152	; 0x98
   17ffa:	00d2      	lsls	r2, r2, #3
   17ffc:	491c      	ldr	r1, [pc, #112]	; (18070 <nm_spi_init+0xe8>)
   17ffe:	481d      	ldr	r0, [pc, #116]	; (18074 <nm_spi_init+0xec>)
   18000:	4c1d      	ldr	r4, [pc, #116]	; (18078 <nm_spi_init+0xf0>)
   18002:	47a0      	blx	r4
   18004:	481d      	ldr	r0, [pc, #116]	; (1807c <nm_spi_init+0xf4>)
   18006:	47a0      	blx	r4
   18008:	481d      	ldr	r0, [pc, #116]	; (18080 <nm_spi_init+0xf8>)
   1800a:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   1800c:	4669      	mov	r1, sp
   1800e:	4813      	ldr	r0, [pc, #76]	; (1805c <nm_spi_init+0xd4>)
   18010:	4b13      	ldr	r3, [pc, #76]	; (18060 <nm_spi_init+0xd8>)
   18012:	4798      	blx	r3
   18014:	1e04      	subs	r4, r0, #0
   18016:	d1c3      	bne.n	17fa0 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   18018:	4a1a      	ldr	r2, [pc, #104]	; (18084 <nm_spi_init+0xfc>)
   1801a:	4915      	ldr	r1, [pc, #84]	; (18070 <nm_spi_init+0xe8>)
   1801c:	4815      	ldr	r0, [pc, #84]	; (18074 <nm_spi_init+0xec>)
   1801e:	4d16      	ldr	r5, [pc, #88]	; (18078 <nm_spi_init+0xf0>)
   18020:	47a8      	blx	r5
   18022:	4819      	ldr	r0, [pc, #100]	; (18088 <nm_spi_init+0x100>)
   18024:	47a8      	blx	r5
   18026:	4816      	ldr	r0, [pc, #88]	; (18080 <nm_spi_init+0xf8>)
   18028:	47a8      	blx	r5
			return 0;
   1802a:	e7df      	b.n	17fec <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   1802c:	4a17      	ldr	r2, [pc, #92]	; (1808c <nm_spi_init+0x104>)
   1802e:	4910      	ldr	r1, [pc, #64]	; (18070 <nm_spi_init+0xe8>)
   18030:	4810      	ldr	r0, [pc, #64]	; (18074 <nm_spi_init+0xec>)
   18032:	4d11      	ldr	r5, [pc, #68]	; (18078 <nm_spi_init+0xf0>)
   18034:	47a8      	blx	r5
   18036:	4816      	ldr	r0, [pc, #88]	; (18090 <nm_spi_init+0x108>)
   18038:	47a8      	blx	r5
   1803a:	4811      	ldr	r0, [pc, #68]	; (18080 <nm_spi_init+0xf8>)
   1803c:	47a8      	blx	r5
			return 0;
   1803e:	e7d5      	b.n	17fec <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   18040:	4a14      	ldr	r2, [pc, #80]	; (18094 <nm_spi_init+0x10c>)
   18042:	490b      	ldr	r1, [pc, #44]	; (18070 <nm_spi_init+0xe8>)
   18044:	480b      	ldr	r0, [pc, #44]	; (18074 <nm_spi_init+0xec>)
   18046:	4c0c      	ldr	r4, [pc, #48]	; (18078 <nm_spi_init+0xf0>)
   18048:	47a0      	blx	r4
   1804a:	4813      	ldr	r0, [pc, #76]	; (18098 <nm_spi_init+0x110>)
   1804c:	47a0      	blx	r4
   1804e:	480c      	ldr	r0, [pc, #48]	; (18080 <nm_spi_init+0xf8>)
   18050:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
   18052:	2406      	movs	r4, #6
   18054:	4264      	negs	r4, r4
   18056:	e7c9      	b.n	17fec <nm_spi_init+0x64>
   18058:	200032f0 	.word	0x200032f0
   1805c:	0000e824 	.word	0x0000e824
   18060:	00017e05 	.word	0x00017e05
   18064:	00017d1d 	.word	0x00017d1d
   18068:	00017f45 	.word	0x00017f45
   1806c:	00017f71 	.word	0x00017f71
   18070:	00022138 	.word	0x00022138
   18074:	00021998 	.word	0x00021998
   18078:	000148e5 	.word	0x000148e5
   1807c:	00022244 	.word	0x00022244
   18080:	000219c0 	.word	0x000219c0
   18084:	000004c3 	.word	0x000004c3
   18088:	00022294 	.word	0x00022294
   1808c:	000004cd 	.word	0x000004cd
   18090:	000222c4 	.word	0x000222c4
   18094:	000004d7 	.word	0x000004d7
   18098:	000222f8 	.word	0x000222f8

0001809c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   1809c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1809e:	46de      	mov	lr, fp
   180a0:	464f      	mov	r7, r9
   180a2:	4646      	mov	r6, r8
   180a4:	b5c0      	push	{r6, r7, lr}
   180a6:	b086      	sub	sp, #24
   180a8:	9003      	str	r0, [sp, #12]
   180aa:	9105      	str	r1, [sp, #20]
   180ac:	9204      	str	r2, [sp, #16]
   180ae:	250a      	movs	r5, #10
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   180b0:	4b21      	ldr	r3, [pc, #132]	; (18138 <nm_spi_read_block+0x9c>)
   180b2:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   180b4:	002f      	movs	r7, r5
   180b6:	e029      	b.n	1810c <nm_spi_read_block+0x70>
   180b8:	4a20      	ldr	r2, [pc, #128]	; (1813c <nm_spi_read_block+0xa0>)
   180ba:	4921      	ldr	r1, [pc, #132]	; (18140 <nm_spi_read_block+0xa4>)
   180bc:	4821      	ldr	r0, [pc, #132]	; (18144 <nm_spi_read_block+0xa8>)
   180be:	4c22      	ldr	r4, [pc, #136]	; (18148 <nm_spi_read_block+0xac>)
   180c0:	47a0      	blx	r4
   180c2:	9503      	str	r5, [sp, #12]
   180c4:	0029      	movs	r1, r5
   180c6:	4821      	ldr	r0, [pc, #132]	; (1814c <nm_spi_read_block+0xb0>)
   180c8:	47a0      	blx	r4
   180ca:	4d21      	ldr	r5, [pc, #132]	; (18150 <nm_spi_read_block+0xb4>)
   180cc:	0028      	movs	r0, r5
   180ce:	47a0      	blx	r4
		nm_bsp_sleep(1);
   180d0:	2001      	movs	r0, #1
   180d2:	4920      	ldr	r1, [pc, #128]	; (18154 <nm_spi_read_block+0xb8>)
   180d4:	4689      	mov	r9, r1
   180d6:	4788      	blx	r1
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   180d8:	2300      	movs	r3, #0
   180da:	9300      	str	r3, [sp, #0]
   180dc:	2200      	movs	r2, #0
   180de:	2100      	movs	r1, #0
   180e0:	20cf      	movs	r0, #207	; 0xcf
   180e2:	4e1d      	ldr	r6, [pc, #116]	; (18158 <nm_spi_read_block+0xbc>)
   180e4:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
   180e6:	20cf      	movs	r0, #207	; 0xcf
   180e8:	4b1c      	ldr	r3, [pc, #112]	; (1815c <nm_spi_read_block+0xc0>)
   180ea:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   180ec:	4a1c      	ldr	r2, [pc, #112]	; (18160 <nm_spi_read_block+0xc4>)
   180ee:	4914      	ldr	r1, [pc, #80]	; (18140 <nm_spi_read_block+0xa4>)
   180f0:	4814      	ldr	r0, [pc, #80]	; (18144 <nm_spi_read_block+0xa8>)
   180f2:	47a0      	blx	r4
   180f4:	9b04      	ldr	r3, [sp, #16]
   180f6:	9a03      	ldr	r2, [sp, #12]
   180f8:	0039      	movs	r1, r7
   180fa:	481a      	ldr	r0, [pc, #104]	; (18164 <nm_spi_read_block+0xc8>)
   180fc:	47a0      	blx	r4
   180fe:	0028      	movs	r0, r5
   18100:	47a0      	blx	r4
		nm_bsp_sleep(1);
   18102:	2001      	movs	r0, #1
   18104:	47c8      	blx	r9
   18106:	3f01      	subs	r7, #1
		if(retry) goto _RETRY_;
   18108:	2f00      	cmp	r7, #0
   1810a:	d011      	beq.n	18130 <nm_spi_read_block+0x94>
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   1810c:	2300      	movs	r3, #0
   1810e:	9300      	str	r3, [sp, #0]
   18110:	9b04      	ldr	r3, [sp, #16]
   18112:	9a05      	ldr	r2, [sp, #20]
   18114:	9d03      	ldr	r5, [sp, #12]
   18116:	0029      	movs	r1, r5
   18118:	20c8      	movs	r0, #200	; 0xc8
   1811a:	47c0      	blx	r8
	if (result != N_OK) {
   1811c:	b240      	sxtb	r0, r0
   1811e:	2801      	cmp	r0, #1
   18120:	d1ca      	bne.n	180b8 <nm_spi_read_block+0x1c>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   18122:	2000      	movs	r0, #0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
   18124:	b006      	add	sp, #24
   18126:	bc1c      	pop	{r2, r3, r4}
   18128:	4690      	mov	r8, r2
   1812a:	4699      	mov	r9, r3
   1812c:	46a3      	mov	fp, r4
   1812e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
   18130:	2006      	movs	r0, #6
   18132:	4240      	negs	r0, r0
   18134:	e7f6      	b.n	18124 <nm_spi_read_block+0x88>
   18136:	46c0      	nop			; (mov r8, r8)
   18138:	00017795 	.word	0x00017795
   1813c:	00000472 	.word	0x00000472
   18140:	0002212c 	.word	0x0002212c
   18144:	00021998 	.word	0x00021998
   18148:	000148e5 	.word	0x000148e5
   1814c:	00022320 	.word	0x00022320
   18150:	000219c0 	.word	0x000219c0
   18154:	00015aad 	.word	0x00015aad
   18158:	00017535 	.word	0x00017535
   1815c:	000176cd 	.word	0x000176cd
   18160:	0000047d 	.word	0x0000047d
   18164:	00022350 	.word	0x00022350

00018168 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   18168:	b5f0      	push	{r4, r5, r6, r7, lr}
   1816a:	46de      	mov	lr, fp
   1816c:	4647      	mov	r7, r8
   1816e:	b580      	push	{r7, lr}
   18170:	b089      	sub	sp, #36	; 0x24
   18172:	9004      	str	r0, [sp, #16]
   18174:	468b      	mov	fp, r1
   18176:	9203      	str	r2, [sp, #12]
   18178:	230a      	movs	r3, #10
   1817a:	4698      	mov	r8, r3
   1817c:	2780      	movs	r7, #128	; 0x80
   1817e:	01bf      	lsls	r7, r7, #6
   18180:	466b      	mov	r3, sp
   18182:	82df      	strh	r7, [r3, #22]
   18184:	e068      	b.n	18258 <nm_spi_write_block+0xf0>
	uint8 cmd, order, crc[2] = {0};
   18186:	2200      	movs	r2, #0
   18188:	ab07      	add	r3, sp, #28
   1818a:	801a      	strh	r2, [r3, #0]
   1818c:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
   1818e:	2500      	movs	r5, #0
   18190:	e021      	b.n	181d6 <nm_spi_write_block+0x6e>
				order = 0x2;
   18192:	2300      	movs	r3, #0
   18194:	42a7      	cmp	r7, r4
   18196:	415b      	adcs	r3, r3
   18198:	3302      	adds	r3, #2
		cmd |= order;
   1819a:	200b      	movs	r0, #11
   1819c:	aa04      	add	r2, sp, #16
   1819e:	4694      	mov	ip, r2
   181a0:	4460      	add	r0, ip
   181a2:	2210      	movs	r2, #16
   181a4:	4252      	negs	r2, r2
   181a6:	4313      	orrs	r3, r2
   181a8:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   181aa:	2101      	movs	r1, #1
   181ac:	4b65      	ldr	r3, [pc, #404]	; (18344 <nm_spi_write_block+0x1dc>)
   181ae:	4798      	blx	r3
   181b0:	2800      	cmp	r0, #0
   181b2:	d11d      	bne.n	181f0 <nm_spi_write_block+0x88>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   181b4:	465b      	mov	r3, fp
   181b6:	1958      	adds	r0, r3, r5
   181b8:	0031      	movs	r1, r6
   181ba:	4b62      	ldr	r3, [pc, #392]	; (18344 <nm_spi_write_block+0x1dc>)
   181bc:	4798      	blx	r3
   181be:	2800      	cmp	r0, #0
   181c0:	d161      	bne.n	18286 <nm_spi_write_block+0x11e>
		if (!gu8Crc_off) {
   181c2:	4b61      	ldr	r3, [pc, #388]	; (18348 <nm_spi_write_block+0x1e0>)
   181c4:	781b      	ldrb	r3, [r3, #0]
   181c6:	2b00      	cmp	r3, #0
   181c8:	d067      	beq.n	1829a <nm_spi_write_block+0x132>
		ix += nbytes;
   181ca:	1975      	adds	r5, r6, r5
   181cc:	b22d      	sxth	r5, r5
		sz -= nbytes;
   181ce:	1ba4      	subs	r4, r4, r6
   181d0:	b2a4      	uxth	r4, r4
	} while (sz);
   181d2:	2c00      	cmp	r4, #0
   181d4:	d07d      	beq.n	182d2 <nm_spi_write_block+0x16a>
   181d6:	1c26      	adds	r6, r4, #0
   181d8:	42bc      	cmp	r4, r7
   181da:	d901      	bls.n	181e0 <nm_spi_write_block+0x78>
   181dc:	466b      	mov	r3, sp
   181de:	8ade      	ldrh	r6, [r3, #22]
   181e0:	b2b6      	uxth	r6, r6
		if (ix == 0)  {
   181e2:	2d00      	cmp	r5, #0
   181e4:	d1d5      	bne.n	18192 <nm_spi_write_block+0x2a>
				order = 0x3;
   181e6:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
   181e8:	42bc      	cmp	r4, r7
   181ea:	d9d6      	bls.n	1819a <nm_spi_write_block+0x32>
				order = 0x1;
   181ec:	3b02      	subs	r3, #2
   181ee:	e7d4      	b.n	1819a <nm_spi_write_block+0x32>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   181f0:	4a56      	ldr	r2, [pc, #344]	; (1834c <nm_spi_write_block+0x1e4>)
   181f2:	4957      	ldr	r1, [pc, #348]	; (18350 <nm_spi_write_block+0x1e8>)
   181f4:	4857      	ldr	r0, [pc, #348]	; (18354 <nm_spi_write_block+0x1ec>)
   181f6:	4c58      	ldr	r4, [pc, #352]	; (18358 <nm_spi_write_block+0x1f0>)
   181f8:	47a0      	blx	r4
   181fa:	4858      	ldr	r0, [pc, #352]	; (1835c <nm_spi_write_block+0x1f4>)
   181fc:	47a0      	blx	r4
   181fe:	4858      	ldr	r0, [pc, #352]	; (18360 <nm_spi_write_block+0x1f8>)
   18200:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   18202:	4a58      	ldr	r2, [pc, #352]	; (18364 <nm_spi_write_block+0x1fc>)
   18204:	4958      	ldr	r1, [pc, #352]	; (18368 <nm_spi_write_block+0x200>)
   18206:	4853      	ldr	r0, [pc, #332]	; (18354 <nm_spi_write_block+0x1ec>)
   18208:	4c53      	ldr	r4, [pc, #332]	; (18358 <nm_spi_write_block+0x1f0>)
   1820a:	47a0      	blx	r4
   1820c:	4857      	ldr	r0, [pc, #348]	; (1836c <nm_spi_write_block+0x204>)
   1820e:	47a0      	blx	r4
   18210:	4853      	ldr	r0, [pc, #332]	; (18360 <nm_spi_write_block+0x1f8>)
   18212:	47a0      	blx	r4
		nm_bsp_sleep(1);
   18214:	2001      	movs	r0, #1
   18216:	4d56      	ldr	r5, [pc, #344]	; (18370 <nm_spi_write_block+0x208>)
   18218:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1821a:	2300      	movs	r3, #0
   1821c:	9300      	str	r3, [sp, #0]
   1821e:	2200      	movs	r2, #0
   18220:	2100      	movs	r1, #0
   18222:	20cf      	movs	r0, #207	; 0xcf
   18224:	4c53      	ldr	r4, [pc, #332]	; (18374 <nm_spi_write_block+0x20c>)
   18226:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   18228:	20cf      	movs	r0, #207	; 0xcf
   1822a:	4b53      	ldr	r3, [pc, #332]	; (18378 <nm_spi_write_block+0x210>)
   1822c:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   1822e:	4a53      	ldr	r2, [pc, #332]	; (1837c <nm_spi_write_block+0x214>)
   18230:	494d      	ldr	r1, [pc, #308]	; (18368 <nm_spi_write_block+0x200>)
   18232:	4848      	ldr	r0, [pc, #288]	; (18354 <nm_spi_write_block+0x1ec>)
   18234:	4c48      	ldr	r4, [pc, #288]	; (18358 <nm_spi_write_block+0x1f0>)
   18236:	47a0      	blx	r4
   18238:	9b03      	ldr	r3, [sp, #12]
   1823a:	9a04      	ldr	r2, [sp, #16]
   1823c:	4641      	mov	r1, r8
   1823e:	4850      	ldr	r0, [pc, #320]	; (18380 <nm_spi_write_block+0x218>)
   18240:	47a0      	blx	r4
   18242:	4847      	ldr	r0, [pc, #284]	; (18360 <nm_spi_write_block+0x1f8>)
   18244:	47a0      	blx	r4
		nm_bsp_sleep(1);
   18246:	2001      	movs	r0, #1
   18248:	47a8      	blx	r5
   1824a:	2301      	movs	r3, #1
   1824c:	425b      	negs	r3, r3
   1824e:	469c      	mov	ip, r3
   18250:	44e0      	add	r8, ip
		if(retry) goto _RETRY_;
   18252:	4643      	mov	r3, r8
   18254:	2b00      	cmp	r3, #0
   18256:	d06e      	beq.n	18336 <nm_spi_write_block+0x1ce>
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   18258:	2300      	movs	r3, #0
   1825a:	9300      	str	r3, [sp, #0]
   1825c:	9b03      	ldr	r3, [sp, #12]
   1825e:	2200      	movs	r2, #0
   18260:	9d04      	ldr	r5, [sp, #16]
   18262:	0029      	movs	r1, r5
   18264:	20c7      	movs	r0, #199	; 0xc7
   18266:	4c47      	ldr	r4, [pc, #284]	; (18384 <nm_spi_write_block+0x21c>)
   18268:	47a0      	blx	r4
	if (result != N_OK) {
   1826a:	b240      	sxtb	r0, r0
   1826c:	2801      	cmp	r0, #1
   1826e:	d08a      	beq.n	18186 <nm_spi_write_block+0x1e>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   18270:	4a45      	ldr	r2, [pc, #276]	; (18388 <nm_spi_write_block+0x220>)
   18272:	493d      	ldr	r1, [pc, #244]	; (18368 <nm_spi_write_block+0x200>)
   18274:	4837      	ldr	r0, [pc, #220]	; (18354 <nm_spi_write_block+0x1ec>)
   18276:	4c38      	ldr	r4, [pc, #224]	; (18358 <nm_spi_write_block+0x1f0>)
   18278:	47a0      	blx	r4
   1827a:	0029      	movs	r1, r5
   1827c:	4843      	ldr	r0, [pc, #268]	; (1838c <nm_spi_write_block+0x224>)
   1827e:	47a0      	blx	r4
   18280:	4837      	ldr	r0, [pc, #220]	; (18360 <nm_spi_write_block+0x1f8>)
   18282:	47a0      	blx	r4
   18284:	e7c6      	b.n	18214 <nm_spi_write_block+0xac>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   18286:	4a42      	ldr	r2, [pc, #264]	; (18390 <nm_spi_write_block+0x228>)
   18288:	4931      	ldr	r1, [pc, #196]	; (18350 <nm_spi_write_block+0x1e8>)
   1828a:	4832      	ldr	r0, [pc, #200]	; (18354 <nm_spi_write_block+0x1ec>)
   1828c:	4c32      	ldr	r4, [pc, #200]	; (18358 <nm_spi_write_block+0x1f0>)
   1828e:	47a0      	blx	r4
   18290:	4840      	ldr	r0, [pc, #256]	; (18394 <nm_spi_write_block+0x22c>)
   18292:	47a0      	blx	r4
   18294:	4832      	ldr	r0, [pc, #200]	; (18360 <nm_spi_write_block+0x1f8>)
   18296:	47a0      	blx	r4
   18298:	e7b3      	b.n	18202 <nm_spi_write_block+0x9a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   1829a:	2102      	movs	r1, #2
   1829c:	a807      	add	r0, sp, #28
   1829e:	4b29      	ldr	r3, [pc, #164]	; (18344 <nm_spi_write_block+0x1dc>)
   182a0:	4798      	blx	r3
   182a2:	2800      	cmp	r0, #0
   182a4:	d091      	beq.n	181ca <nm_spi_write_block+0x62>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   182a6:	22d7      	movs	r2, #215	; 0xd7
   182a8:	0092      	lsls	r2, r2, #2
   182aa:	4929      	ldr	r1, [pc, #164]	; (18350 <nm_spi_write_block+0x1e8>)
   182ac:	4829      	ldr	r0, [pc, #164]	; (18354 <nm_spi_write_block+0x1ec>)
   182ae:	4c2a      	ldr	r4, [pc, #168]	; (18358 <nm_spi_write_block+0x1f0>)
   182b0:	47a0      	blx	r4
   182b2:	4839      	ldr	r0, [pc, #228]	; (18398 <nm_spi_write_block+0x230>)
   182b4:	47a0      	blx	r4
   182b6:	482a      	ldr	r0, [pc, #168]	; (18360 <nm_spi_write_block+0x1f8>)
   182b8:	47a0      	blx	r4
   182ba:	e7a2      	b.n	18202 <nm_spi_write_block+0x9a>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   182bc:	229a      	movs	r2, #154	; 0x9a
   182be:	0052      	lsls	r2, r2, #1
   182c0:	4936      	ldr	r1, [pc, #216]	; (1839c <nm_spi_write_block+0x234>)
   182c2:	4824      	ldr	r0, [pc, #144]	; (18354 <nm_spi_write_block+0x1ec>)
   182c4:	4c24      	ldr	r4, [pc, #144]	; (18358 <nm_spi_write_block+0x1f0>)
   182c6:	47a0      	blx	r4
   182c8:	4835      	ldr	r0, [pc, #212]	; (183a0 <nm_spi_write_block+0x238>)
   182ca:	47a0      	blx	r4
   182cc:	4824      	ldr	r0, [pc, #144]	; (18360 <nm_spi_write_block+0x1f8>)
   182ce:	47a0      	blx	r4
   182d0:	e025      	b.n	1831e <nm_spi_write_block+0x1b6>
    if (!gu8Crc_off)
   182d2:	4b1d      	ldr	r3, [pc, #116]	; (18348 <nm_spi_write_block+0x1e0>)
   182d4:	781c      	ldrb	r4, [r3, #0]
		len = 3;
   182d6:	1e63      	subs	r3, r4, #1
   182d8:	419c      	sbcs	r4, r3
   182da:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   182dc:	b2a1      	uxth	r1, r4
   182de:	a807      	add	r0, sp, #28
   182e0:	4b30      	ldr	r3, [pc, #192]	; (183a4 <nm_spi_write_block+0x23c>)
   182e2:	4798      	blx	r3
   182e4:	2800      	cmp	r0, #0
   182e6:	d1e9      	bne.n	182bc <nm_spi_write_block+0x154>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   182e8:	ab08      	add	r3, sp, #32
   182ea:	191b      	adds	r3, r3, r4
   182ec:	3b05      	subs	r3, #5
   182ee:	781b      	ldrb	r3, [r3, #0]
   182f0:	2b00      	cmp	r3, #0
   182f2:	d106      	bne.n	18302 <nm_spi_write_block+0x19a>
   182f4:	ab08      	add	r3, sp, #32
   182f6:	469c      	mov	ip, r3
   182f8:	4464      	add	r4, ip
   182fa:	3c06      	subs	r4, #6
   182fc:	7823      	ldrb	r3, [r4, #0]
   182fe:	2bc3      	cmp	r3, #195	; 0xc3
   18300:	d017      	beq.n	18332 <nm_spi_write_block+0x1ca>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   18302:	223c      	movs	r2, #60	; 0x3c
   18304:	32ff      	adds	r2, #255	; 0xff
   18306:	4925      	ldr	r1, [pc, #148]	; (1839c <nm_spi_write_block+0x234>)
   18308:	4812      	ldr	r0, [pc, #72]	; (18354 <nm_spi_write_block+0x1ec>)
   1830a:	4c13      	ldr	r4, [pc, #76]	; (18358 <nm_spi_write_block+0x1f0>)
   1830c:	47a0      	blx	r4
   1830e:	a907      	add	r1, sp, #28
   18310:	788b      	ldrb	r3, [r1, #2]
   18312:	784a      	ldrb	r2, [r1, #1]
   18314:	7809      	ldrb	r1, [r1, #0]
   18316:	4824      	ldr	r0, [pc, #144]	; (183a8 <nm_spi_write_block+0x240>)
   18318:	47a0      	blx	r4
   1831a:	4811      	ldr	r0, [pc, #68]	; (18360 <nm_spi_write_block+0x1f8>)
   1831c:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   1831e:	4a23      	ldr	r2, [pc, #140]	; (183ac <nm_spi_write_block+0x244>)
   18320:	4911      	ldr	r1, [pc, #68]	; (18368 <nm_spi_write_block+0x200>)
   18322:	480c      	ldr	r0, [pc, #48]	; (18354 <nm_spi_write_block+0x1ec>)
   18324:	4c0c      	ldr	r4, [pc, #48]	; (18358 <nm_spi_write_block+0x1f0>)
   18326:	47a0      	blx	r4
   18328:	4810      	ldr	r0, [pc, #64]	; (1836c <nm_spi_write_block+0x204>)
   1832a:	47a0      	blx	r4
   1832c:	480c      	ldr	r0, [pc, #48]	; (18360 <nm_spi_write_block+0x1f8>)
   1832e:	47a0      	blx	r4
   18330:	e770      	b.n	18214 <nm_spi_write_block+0xac>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   18332:	2000      	movs	r0, #0
   18334:	e001      	b.n	1833a <nm_spi_write_block+0x1d2>
	else s8Ret = M2M_ERR_BUS_FAIL;
   18336:	2006      	movs	r0, #6
   18338:	4240      	negs	r0, r0

	return s8Ret;
}
   1833a:	b009      	add	sp, #36	; 0x24
   1833c:	bc0c      	pop	{r2, r3}
   1833e:	4690      	mov	r8, r2
   18340:	469b      	mov	fp, r3
   18342:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18344:	00017515 	.word	0x00017515
   18348:	200032f0 	.word	0x200032f0
   1834c:	00000349 	.word	0x00000349
   18350:	000220ec 	.word	0x000220ec
   18354:	00021998 	.word	0x00021998
   18358:	000148e5 	.word	0x000148e5
   1835c:	0002239c 	.word	0x0002239c
   18360:	000219c0 	.word	0x000219c0
   18364:	000003d9 	.word	0x000003d9
   18368:	0002210c 	.word	0x0002210c
   1836c:	00022490 	.word	0x00022490
   18370:	00015aad 	.word	0x00015aad
   18374:	00017535 	.word	0x00017535
   18378:	000176cd 	.word	0x000176cd
   1837c:	000003eb 	.word	0x000003eb
   18380:	00022350 	.word	0x00022350
   18384:	00017795 	.word	0x00017795
   18388:	000003cf 	.word	0x000003cf
   1838c:	0002236c 	.word	0x0002236c
   18390:	00000352 	.word	0x00000352
   18394:	000223d4 	.word	0x000223d4
   18398:	00022408 	.word	0x00022408
   1839c:	000220bc 	.word	0x000220bc
   183a0:	00022440 	.word	0x00022440
   183a4:	000176ad 	.word	0x000176ad
   183a8:	00022460 	.word	0x00022460
   183ac:	000003e1 	.word	0x000003e1

000183b0 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   183b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   183b2:	46de      	mov	lr, fp
   183b4:	4657      	mov	r7, sl
   183b6:	464e      	mov	r6, r9
   183b8:	4645      	mov	r5, r8
   183ba:	b5e0      	push	{r5, r6, r7, lr}
   183bc:	b085      	sub	sp, #20
   183be:	9001      	str	r0, [sp, #4]
   183c0:	000e      	movs	r6, r1
   183c2:	9202      	str	r2, [sp, #8]
   183c4:	001d      	movs	r5, r3
   183c6:	ab0e      	add	r3, sp, #56	; 0x38
   183c8:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   183ca:	2c00      	cmp	r4, #0
   183cc:	d063      	beq.n	18496 <Socket_ReadSocketData+0xe6>
   183ce:	0103      	lsls	r3, r0, #4
   183d0:	4934      	ldr	r1, [pc, #208]	; (184a4 <Socket_ReadSocketData+0xf4>)
   183d2:	585b      	ldr	r3, [r3, r1]
   183d4:	2b00      	cmp	r3, #0
   183d6:	d05e      	beq.n	18496 <Socket_ReadSocketData+0xe6>
   183d8:	0101      	lsls	r1, r0, #4
   183da:	4b32      	ldr	r3, [pc, #200]	; (184a4 <Socket_ReadSocketData+0xf4>)
   183dc:	185b      	adds	r3, r3, r1
   183de:	889b      	ldrh	r3, [r3, #4]
   183e0:	b29b      	uxth	r3, r3
   183e2:	2b00      	cmp	r3, #0
   183e4:	d057      	beq.n	18496 <Socket_ReadSocketData+0xe6>
   183e6:	4b2f      	ldr	r3, [pc, #188]	; (184a4 <Socket_ReadSocketData+0xf4>)
   183e8:	185b      	adds	r3, r3, r1
   183ea:	7a9b      	ldrb	r3, [r3, #10]
   183ec:	2b01      	cmp	r3, #1
   183ee:	d152      	bne.n	18496 <Socket_ReadSocketData+0xe6>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   183f0:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   183f2:	4b2c      	ldr	r3, [pc, #176]	; (184a4 <Socket_ReadSocketData+0xf4>)
   183f4:	469b      	mov	fp, r3
   183f6:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   183f8:	465b      	mov	r3, fp
   183fa:	220a      	movs	r2, #10
   183fc:	4690      	mov	r8, r2
   183fe:	44d8      	add	r8, fp
   18400:	468a      	mov	sl, r1
   18402:	9500      	str	r5, [sp, #0]
   18404:	9303      	str	r3, [sp, #12]
   18406:	e014      	b.n	18432 <Socket_ReadSocketData+0x82>
   18408:	0025      	movs	r5, r4
			u8SetRxDone = 1;
   1840a:	2301      	movs	r3, #1
   1840c:	e01b      	b.n	18446 <Socket_ReadSocketData+0x96>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   1840e:	3301      	adds	r3, #1
   18410:	2200      	movs	r2, #0
   18412:	2100      	movs	r1, #0
   18414:	2000      	movs	r0, #0
   18416:	4c24      	ldr	r4, [pc, #144]	; (184a8 <Socket_ReadSocketData+0xf8>)
   18418:	47a0      	blx	r4
   1841a:	e03c      	b.n	18496 <Socket_ReadSocketData+0xe6>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   1841c:	4823      	ldr	r0, [pc, #140]	; (184ac <Socket_ReadSocketData+0xfc>)
   1841e:	4d24      	ldr	r5, [pc, #144]	; (184b0 <Socket_ReadSocketData+0x100>)
   18420:	47a8      	blx	r5
   18422:	0021      	movs	r1, r4
   18424:	4823      	ldr	r0, [pc, #140]	; (184b4 <Socket_ReadSocketData+0x104>)
   18426:	47a8      	blx	r5
   18428:	4823      	ldr	r0, [pc, #140]	; (184b8 <Socket_ReadSocketData+0x108>)
   1842a:	47a8      	blx	r5
				break;
   1842c:	e033      	b.n	18496 <Socket_ReadSocketData+0xe6>
			}
		}while(u16ReadCount != 0);
   1842e:	2c00      	cmp	r4, #0
   18430:	d031      	beq.n	18496 <Socket_ReadSocketData+0xe6>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   18432:	465b      	mov	r3, fp
   18434:	889b      	ldrh	r3, [r3, #4]
   18436:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
   18438:	b21b      	sxth	r3, r3
   1843a:	2b00      	cmp	r3, #0
   1843c:	dde4      	ble.n	18408 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   1843e:	9b03      	ldr	r3, [sp, #12]
   18440:	889d      	ldrh	r5, [r3, #4]
   18442:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
   18444:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   18446:	4a17      	ldr	r2, [pc, #92]	; (184a4 <Socket_ReadSocketData+0xf4>)
   18448:	4651      	mov	r1, sl
   1844a:	5889      	ldr	r1, [r1, r2]
   1844c:	002a      	movs	r2, r5
   1844e:	9800      	ldr	r0, [sp, #0]
   18450:	4f15      	ldr	r7, [pc, #84]	; (184a8 <Socket_ReadSocketData+0xf8>)
   18452:	47b8      	blx	r7
   18454:	2800      	cmp	r0, #0
   18456:	d1e1      	bne.n	1841c <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   18458:	4b12      	ldr	r3, [pc, #72]	; (184a4 <Socket_ReadSocketData+0xf4>)
   1845a:	4652      	mov	r2, sl
   1845c:	58d3      	ldr	r3, [r2, r3]
   1845e:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
   18460:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   18462:	88f3      	ldrh	r3, [r6, #6]
   18464:	1b5b      	subs	r3, r3, r5
   18466:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
   18468:	4b14      	ldr	r3, [pc, #80]	; (184bc <Socket_ReadSocketData+0x10c>)
   1846a:	681b      	ldr	r3, [r3, #0]
   1846c:	2b00      	cmp	r3, #0
   1846e:	d005      	beq.n	1847c <Socket_ReadSocketData+0xcc>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   18470:	4b12      	ldr	r3, [pc, #72]	; (184bc <Socket_ReadSocketData+0x10c>)
   18472:	681b      	ldr	r3, [r3, #0]
   18474:	0032      	movs	r2, r6
   18476:	9902      	ldr	r1, [sp, #8]
   18478:	9801      	ldr	r0, [sp, #4]
   1847a:	4798      	blx	r3
				u16ReadCount -= u16Read;
   1847c:	1b64      	subs	r4, r4, r5
   1847e:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
   18480:	9b00      	ldr	r3, [sp, #0]
   18482:	469c      	mov	ip, r3
   18484:	44ac      	add	ip, r5
   18486:	4663      	mov	r3, ip
   18488:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   1848a:	4643      	mov	r3, r8
   1848c:	781b      	ldrb	r3, [r3, #0]
   1848e:	2b00      	cmp	r3, #0
   18490:	d1cd      	bne.n	1842e <Socket_ReadSocketData+0x7e>
   18492:	2c00      	cmp	r4, #0
   18494:	d1bb      	bne.n	1840e <Socket_ReadSocketData+0x5e>
	}
}
   18496:	b005      	add	sp, #20
   18498:	bc3c      	pop	{r2, r3, r4, r5}
   1849a:	4690      	mov	r8, r2
   1849c:	4699      	mov	r9, r3
   1849e:	46a2      	mov	sl, r4
   184a0:	46ab      	mov	fp, r5
   184a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   184a4:	20003dc8 	.word	0x20003dc8
   184a8:	00016521 	.word	0x00016521
   184ac:	00021cd4 	.word	0x00021cd4
   184b0:	000148e5 	.word	0x000148e5
   184b4:	00022774 	.word	0x00022774
   184b8:	000219c0 	.word	0x000219c0
   184bc:	20003e78 	.word	0x20003e78

000184c0 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   184c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   184c2:	46d6      	mov	lr, sl
   184c4:	464f      	mov	r7, r9
   184c6:	4646      	mov	r6, r8
   184c8:	b5c0      	push	{r6, r7, lr}
   184ca:	b09a      	sub	sp, #104	; 0x68
   184cc:	000d      	movs	r5, r1
   184ce:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   184d0:	2841      	cmp	r0, #65	; 0x41
   184d2:	d039      	beq.n	18548 <m2m_ip_cb+0x88>
   184d4:	2854      	cmp	r0, #84	; 0x54
   184d6:	d037      	beq.n	18548 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   184d8:	2842      	cmp	r0, #66	; 0x42
   184da:	d053      	beq.n	18584 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   184dc:	2843      	cmp	r0, #67	; 0x43
   184de:	d06a      	beq.n	185b6 <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   184e0:	2844      	cmp	r0, #68	; 0x44
   184e2:	d100      	bne.n	184e6 <m2m_ip_cb+0x26>
   184e4:	e0af      	b.n	18646 <m2m_ip_cb+0x186>
   184e6:	284b      	cmp	r0, #75	; 0x4b
   184e8:	d100      	bne.n	184ec <m2m_ip_cb+0x2c>
   184ea:	e0ac      	b.n	18646 <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   184ec:	284a      	cmp	r0, #74	; 0x4a
   184ee:	d100      	bne.n	184f2 <m2m_ip_cb+0x32>
   184f0:	e0cf      	b.n	18692 <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   184f2:	2846      	cmp	r0, #70	; 0x46
   184f4:	d100      	bne.n	184f8 <m2m_ip_cb+0x38>
   184f6:	e0e5      	b.n	186c4 <m2m_ip_cb+0x204>
   184f8:	2848      	cmp	r0, #72	; 0x48
   184fa:	d100      	bne.n	184fe <m2m_ip_cb+0x3e>
   184fc:	e10e      	b.n	1871c <m2m_ip_cb+0x25c>
   184fe:	284d      	cmp	r0, #77	; 0x4d
   18500:	d100      	bne.n	18504 <m2m_ip_cb+0x44>
   18502:	e0dc      	b.n	186be <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   18504:	2845      	cmp	r0, #69	; 0x45
   18506:	d100      	bne.n	1850a <m2m_ip_cb+0x4a>
   18508:	e12c      	b.n	18764 <m2m_ip_cb+0x2a4>
   1850a:	2847      	cmp	r0, #71	; 0x47
   1850c:	d100      	bne.n	18510 <m2m_ip_cb+0x50>
   1850e:	e14d      	b.n	187ac <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   18510:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   18512:	284c      	cmp	r0, #76	; 0x4c
   18514:	d100      	bne.n	18518 <m2m_ip_cb+0x58>
   18516:	e126      	b.n	18766 <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
   18518:	2852      	cmp	r0, #82	; 0x52
   1851a:	d12d      	bne.n	18578 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   1851c:	2301      	movs	r3, #1
   1851e:	2214      	movs	r2, #20
   18520:	a909      	add	r1, sp, #36	; 0x24
   18522:	0020      	movs	r0, r4
   18524:	4ca2      	ldr	r4, [pc, #648]	; (187b0 <m2m_ip_cb+0x2f0>)
   18526:	47a0      	blx	r4
   18528:	2800      	cmp	r0, #0
   1852a:	d125      	bne.n	18578 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   1852c:	4ba1      	ldr	r3, [pc, #644]	; (187b4 <m2m_ip_cb+0x2f4>)
   1852e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   18530:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   18532:	681b      	ldr	r3, [r3, #0]
   18534:	2b00      	cmp	r3, #0
   18536:	d01f      	beq.n	18578 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   18538:	4b9e      	ldr	r3, [pc, #632]	; (187b4 <m2m_ip_cb+0x2f4>)
   1853a:	681c      	ldr	r4, [r3, #0]
   1853c:	ab09      	add	r3, sp, #36	; 0x24
   1853e:	7c1a      	ldrb	r2, [r3, #16]
   18540:	990b      	ldr	r1, [sp, #44]	; 0x2c
   18542:	9809      	ldr	r0, [sp, #36]	; 0x24
   18544:	47a0      	blx	r4
			}
		}
	}
}
   18546:	e017      	b.n	18578 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   18548:	2300      	movs	r3, #0
   1854a:	2204      	movs	r2, #4
   1854c:	a909      	add	r1, sp, #36	; 0x24
   1854e:	0020      	movs	r0, r4
   18550:	4c97      	ldr	r4, [pc, #604]	; (187b0 <m2m_ip_cb+0x2f0>)
   18552:	47a0      	blx	r4
   18554:	2800      	cmp	r0, #0
   18556:	d10f      	bne.n	18578 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
   18558:	ab09      	add	r3, sp, #36	; 0x24
   1855a:	785a      	ldrb	r2, [r3, #1]
   1855c:	ab05      	add	r3, sp, #20
   1855e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   18560:	4b95      	ldr	r3, [pc, #596]	; (187b8 <m2m_ip_cb+0x2f8>)
   18562:	681b      	ldr	r3, [r3, #0]
   18564:	2b00      	cmp	r3, #0
   18566:	d007      	beq.n	18578 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   18568:	4b93      	ldr	r3, [pc, #588]	; (187b8 <m2m_ip_cb+0x2f8>)
   1856a:	681b      	ldr	r3, [r3, #0]
   1856c:	aa09      	add	r2, sp, #36	; 0x24
   1856e:	2000      	movs	r0, #0
   18570:	5610      	ldrsb	r0, [r2, r0]
   18572:	aa05      	add	r2, sp, #20
   18574:	2101      	movs	r1, #1
   18576:	4798      	blx	r3
}
   18578:	b01a      	add	sp, #104	; 0x68
   1857a:	bc1c      	pop	{r2, r3, r4}
   1857c:	4690      	mov	r8, r2
   1857e:	4699      	mov	r9, r3
   18580:	46a2      	mov	sl, r4
   18582:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   18584:	2300      	movs	r3, #0
   18586:	2204      	movs	r2, #4
   18588:	a909      	add	r1, sp, #36	; 0x24
   1858a:	0020      	movs	r0, r4
   1858c:	4c88      	ldr	r4, [pc, #544]	; (187b0 <m2m_ip_cb+0x2f0>)
   1858e:	47a0      	blx	r4
   18590:	2800      	cmp	r0, #0
   18592:	d1f1      	bne.n	18578 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
   18594:	ab09      	add	r3, sp, #36	; 0x24
   18596:	785a      	ldrb	r2, [r3, #1]
   18598:	ab05      	add	r3, sp, #20
   1859a:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   1859c:	4b86      	ldr	r3, [pc, #536]	; (187b8 <m2m_ip_cb+0x2f8>)
   1859e:	681b      	ldr	r3, [r3, #0]
   185a0:	2b00      	cmp	r3, #0
   185a2:	d0e9      	beq.n	18578 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   185a4:	4b84      	ldr	r3, [pc, #528]	; (187b8 <m2m_ip_cb+0x2f8>)
   185a6:	681b      	ldr	r3, [r3, #0]
   185a8:	aa09      	add	r2, sp, #36	; 0x24
   185aa:	2000      	movs	r0, #0
   185ac:	5610      	ldrsb	r0, [r2, r0]
   185ae:	aa05      	add	r2, sp, #20
   185b0:	2102      	movs	r1, #2
   185b2:	4798      	blx	r3
   185b4:	e7e0      	b.n	18578 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   185b6:	2300      	movs	r3, #0
   185b8:	220c      	movs	r2, #12
   185ba:	a905      	add	r1, sp, #20
   185bc:	0020      	movs	r0, r4
   185be:	4c7c      	ldr	r4, [pc, #496]	; (187b0 <m2m_ip_cb+0x2f0>)
   185c0:	47a0      	blx	r4
   185c2:	2800      	cmp	r0, #0
   185c4:	d1d8      	bne.n	18578 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
   185c6:	ab05      	add	r3, sp, #20
   185c8:	2209      	movs	r2, #9
   185ca:	569a      	ldrsb	r2, [r3, r2]
   185cc:	2a00      	cmp	r2, #0
   185ce:	db24      	blt.n	1861a <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   185d0:	0018      	movs	r0, r3
   185d2:	2108      	movs	r1, #8
   185d4:	5659      	ldrsb	r1, [r3, r1]
   185d6:	4b79      	ldr	r3, [pc, #484]	; (187bc <m2m_ip_cb+0x2fc>)
   185d8:	0109      	lsls	r1, r1, #4
   185da:	1859      	adds	r1, r3, r1
   185dc:	7ac9      	ldrb	r1, [r1, #11]
   185de:	b2c9      	uxtb	r1, r1
   185e0:	0114      	lsls	r4, r2, #4
   185e2:	191b      	adds	r3, r3, r4
   185e4:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   185e6:	2101      	movs	r1, #1
   185e8:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   185ea:	8941      	ldrh	r1, [r0, #10]
   185ec:	3908      	subs	r1, #8
   185ee:	b289      	uxth	r1, r1
   185f0:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
   185f2:	4973      	ldr	r1, [pc, #460]	; (187c0 <m2m_ip_cb+0x300>)
   185f4:	880b      	ldrh	r3, [r1, #0]
   185f6:	3301      	adds	r3, #1
   185f8:	b29b      	uxth	r3, r3
   185fa:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
   185fc:	880b      	ldrh	r3, [r1, #0]
   185fe:	b29b      	uxth	r3, r3
   18600:	2b00      	cmp	r3, #0
   18602:	d103      	bne.n	1860c <m2m_ip_cb+0x14c>
					++gu16SessionID;
   18604:	880b      	ldrh	r3, [r1, #0]
   18606:	3301      	adds	r3, #1
   18608:	b29b      	uxth	r3, r3
   1860a:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   1860c:	4b6c      	ldr	r3, [pc, #432]	; (187c0 <m2m_ip_cb+0x300>)
   1860e:	8819      	ldrh	r1, [r3, #0]
   18610:	b289      	uxth	r1, r1
   18612:	0110      	lsls	r0, r2, #4
   18614:	4b69      	ldr	r3, [pc, #420]	; (187bc <m2m_ip_cb+0x2fc>)
   18616:	181b      	adds	r3, r3, r0
   18618:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
   1861a:	ab09      	add	r3, sp, #36	; 0x24
   1861c:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   1861e:	2202      	movs	r2, #2
   18620:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   18622:	aa05      	add	r2, sp, #20
   18624:	8851      	ldrh	r1, [r2, #2]
   18626:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   18628:	9a06      	ldr	r2, [sp, #24]
   1862a:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
   1862c:	4b62      	ldr	r3, [pc, #392]	; (187b8 <m2m_ip_cb+0x2f8>)
   1862e:	681b      	ldr	r3, [r3, #0]
   18630:	2b00      	cmp	r3, #0
   18632:	d0a1      	beq.n	18578 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   18634:	4b60      	ldr	r3, [pc, #384]	; (187b8 <m2m_ip_cb+0x2f8>)
   18636:	681b      	ldr	r3, [r3, #0]
   18638:	aa05      	add	r2, sp, #20
   1863a:	2008      	movs	r0, #8
   1863c:	5610      	ldrsb	r0, [r2, r0]
   1863e:	aa09      	add	r2, sp, #36	; 0x24
   18640:	2104      	movs	r1, #4
   18642:	4798      	blx	r3
   18644:	e798      	b.n	18578 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   18646:	2300      	movs	r3, #0
   18648:	2204      	movs	r2, #4
   1864a:	a909      	add	r1, sp, #36	; 0x24
   1864c:	0020      	movs	r0, r4
   1864e:	4c58      	ldr	r4, [pc, #352]	; (187b0 <m2m_ip_cb+0x2f0>)
   18650:	47a0      	blx	r4
   18652:	2800      	cmp	r0, #0
   18654:	d000      	beq.n	18658 <m2m_ip_cb+0x198>
   18656:	e78f      	b.n	18578 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
   18658:	ab09      	add	r3, sp, #36	; 0x24
   1865a:	2000      	movs	r0, #0
   1865c:	5618      	ldrsb	r0, [r3, r0]
   1865e:	aa05      	add	r2, sp, #20
   18660:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   18662:	785b      	ldrb	r3, [r3, #1]
   18664:	b25b      	sxtb	r3, r3
   18666:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   18668:	2b00      	cmp	r3, #0
   1866a:	d107      	bne.n	1867c <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   1866c:	ab09      	add	r3, sp, #36	; 0x24
   1866e:	885b      	ldrh	r3, [r3, #2]
   18670:	3b08      	subs	r3, #8
   18672:	b29b      	uxth	r3, r3
   18674:	0101      	lsls	r1, r0, #4
   18676:	4a51      	ldr	r2, [pc, #324]	; (187bc <m2m_ip_cb+0x2fc>)
   18678:	1852      	adds	r2, r2, r1
   1867a:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
   1867c:	4b4e      	ldr	r3, [pc, #312]	; (187b8 <m2m_ip_cb+0x2f8>)
   1867e:	681b      	ldr	r3, [r3, #0]
   18680:	2b00      	cmp	r3, #0
   18682:	d100      	bne.n	18686 <m2m_ip_cb+0x1c6>
   18684:	e778      	b.n	18578 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   18686:	4b4c      	ldr	r3, [pc, #304]	; (187b8 <m2m_ip_cb+0x2f8>)
   18688:	681b      	ldr	r3, [r3, #0]
   1868a:	aa05      	add	r2, sp, #20
   1868c:	2105      	movs	r1, #5
   1868e:	4798      	blx	r3
	{
   18690:	e772      	b.n	18578 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   18692:	2300      	movs	r3, #0
   18694:	2244      	movs	r2, #68	; 0x44
   18696:	a909      	add	r1, sp, #36	; 0x24
   18698:	0020      	movs	r0, r4
   1869a:	4c45      	ldr	r4, [pc, #276]	; (187b0 <m2m_ip_cb+0x2f0>)
   1869c:	47a0      	blx	r4
   1869e:	2800      	cmp	r0, #0
   186a0:	d000      	beq.n	186a4 <m2m_ip_cb+0x1e4>
   186a2:	e769      	b.n	18578 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
   186a4:	4b47      	ldr	r3, [pc, #284]	; (187c4 <m2m_ip_cb+0x304>)
   186a6:	681b      	ldr	r3, [r3, #0]
   186a8:	2b00      	cmp	r3, #0
   186aa:	d100      	bne.n	186ae <m2m_ip_cb+0x1ee>
   186ac:	e764      	b.n	18578 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   186ae:	4b45      	ldr	r3, [pc, #276]	; (187c4 <m2m_ip_cb+0x304>)
   186b0:	681b      	ldr	r3, [r3, #0]
   186b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
   186b4:	9203      	str	r2, [sp, #12]
   186b6:	0011      	movs	r1, r2
   186b8:	a809      	add	r0, sp, #36	; 0x24
   186ba:	4798      	blx	r3
   186bc:	e75c      	b.n	18578 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   186be:	2306      	movs	r3, #6
   186c0:	469a      	mov	sl, r3
   186c2:	e001      	b.n	186c8 <m2m_ip_cb+0x208>
   186c4:	2306      	movs	r3, #6
   186c6:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   186c8:	2300      	movs	r3, #0
   186ca:	2210      	movs	r2, #16
   186cc:	a905      	add	r1, sp, #20
   186ce:	0020      	movs	r0, r4
   186d0:	4f37      	ldr	r7, [pc, #220]	; (187b0 <m2m_ip_cb+0x2f0>)
   186d2:	47b8      	blx	r7
   186d4:	2800      	cmp	r0, #0
   186d6:	d000      	beq.n	186da <m2m_ip_cb+0x21a>
   186d8:	e74e      	b.n	18578 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
   186da:	aa05      	add	r2, sp, #20
   186dc:	200c      	movs	r0, #12
   186de:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
   186e0:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
   186e2:	0107      	lsls	r7, r0, #4
   186e4:	4935      	ldr	r1, [pc, #212]	; (187bc <m2m_ip_cb+0x2fc>)
   186e6:	19c9      	adds	r1, r1, r7
   186e8:	2700      	movs	r7, #0
   186ea:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   186ec:	2608      	movs	r6, #8
   186ee:	5f97      	ldrsh	r7, [r2, r6]
   186f0:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   186f2:	8957      	ldrh	r7, [r2, #10]
   186f4:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   186f6:	af09      	add	r7, sp, #36	; 0x24
   186f8:	8856      	ldrh	r6, [r2, #2]
   186fa:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   186fc:	9a06      	ldr	r2, [sp, #24]
   186fe:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   18700:	88ca      	ldrh	r2, [r1, #6]
   18702:	b292      	uxth	r2, r2
   18704:	4293      	cmp	r3, r2
   18706:	d00c      	beq.n	18722 <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
   18708:	2d10      	cmp	r5, #16
   1870a:	d800      	bhi.n	1870e <m2m_ip_cb+0x24e>
   1870c:	e734      	b.n	18578 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   1870e:	2301      	movs	r3, #1
   18710:	2200      	movs	r2, #0
   18712:	2100      	movs	r1, #0
   18714:	2000      	movs	r0, #0
   18716:	4c26      	ldr	r4, [pc, #152]	; (187b0 <m2m_ip_cb+0x2f0>)
   18718:	47a0      	blx	r4
	{
   1871a:	e72d      	b.n	18578 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   1871c:	2309      	movs	r3, #9
   1871e:	469a      	mov	sl, r3
   18720:	e7d2      	b.n	186c8 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   18722:	4643      	mov	r3, r8
   18724:	2b00      	cmp	r3, #0
   18726:	dd01      	ble.n	1872c <m2m_ip_cb+0x26c>
   18728:	45a8      	cmp	r8, r5
   1872a:	db0f      	blt.n	1874c <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   1872c:	ab09      	add	r3, sp, #36	; 0x24
   1872e:	4642      	mov	r2, r8
   18730:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   18732:	2300      	movs	r3, #0
   18734:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
   18736:	4b20      	ldr	r3, [pc, #128]	; (187b8 <m2m_ip_cb+0x2f8>)
   18738:	681b      	ldr	r3, [r3, #0]
   1873a:	2b00      	cmp	r3, #0
   1873c:	d100      	bne.n	18740 <m2m_ip_cb+0x280>
   1873e:	e71b      	b.n	18578 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   18740:	4b1d      	ldr	r3, [pc, #116]	; (187b8 <m2m_ip_cb+0x2f8>)
   18742:	681b      	ldr	r3, [r3, #0]
   18744:	aa09      	add	r2, sp, #36	; 0x24
   18746:	4651      	mov	r1, sl
   18748:	4798      	blx	r3
   1874a:	e715      	b.n	18578 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
   1874c:	0023      	movs	r3, r4
   1874e:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   18750:	4642      	mov	r2, r8
   18752:	4669      	mov	r1, sp
   18754:	818a      	strh	r2, [r1, #12]
   18756:	898a      	ldrh	r2, [r1, #12]
   18758:	9200      	str	r2, [sp, #0]
   1875a:	4652      	mov	r2, sl
   1875c:	0039      	movs	r1, r7
   1875e:	4c1a      	ldr	r4, [pc, #104]	; (187c8 <m2m_ip_cb+0x308>)
   18760:	47a0      	blx	r4
   18762:	e709      	b.n	18578 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   18764:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   18766:	2300      	movs	r3, #0
   18768:	2208      	movs	r2, #8
   1876a:	a909      	add	r1, sp, #36	; 0x24
   1876c:	0020      	movs	r0, r4
   1876e:	4c10      	ldr	r4, [pc, #64]	; (187b0 <m2m_ip_cb+0x2f0>)
   18770:	47a0      	blx	r4
   18772:	2800      	cmp	r0, #0
   18774:	d000      	beq.n	18778 <m2m_ip_cb+0x2b8>
   18776:	e6ff      	b.n	18578 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
   18778:	ab09      	add	r3, sp, #36	; 0x24
   1877a:	2000      	movs	r0, #0
   1877c:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
   1877e:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   18780:	8859      	ldrh	r1, [r3, #2]
   18782:	ab05      	add	r3, sp, #20
   18784:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   18786:	0101      	lsls	r1, r0, #4
   18788:	4b0c      	ldr	r3, [pc, #48]	; (187bc <m2m_ip_cb+0x2fc>)
   1878a:	185b      	adds	r3, r3, r1
   1878c:	88db      	ldrh	r3, [r3, #6]
   1878e:	b29b      	uxth	r3, r3
   18790:	429a      	cmp	r2, r3
   18792:	d000      	beq.n	18796 <m2m_ip_cb+0x2d6>
   18794:	e6f0      	b.n	18578 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
   18796:	4b08      	ldr	r3, [pc, #32]	; (187b8 <m2m_ip_cb+0x2f8>)
   18798:	681b      	ldr	r3, [r3, #0]
   1879a:	2b00      	cmp	r3, #0
   1879c:	d100      	bne.n	187a0 <m2m_ip_cb+0x2e0>
   1879e:	e6eb      	b.n	18578 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   187a0:	4b05      	ldr	r3, [pc, #20]	; (187b8 <m2m_ip_cb+0x2f8>)
   187a2:	681b      	ldr	r3, [r3, #0]
   187a4:	aa05      	add	r2, sp, #20
   187a6:	0029      	movs	r1, r5
   187a8:	4798      	blx	r3
	{
   187aa:	e6e5      	b.n	18578 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   187ac:	2508      	movs	r5, #8
   187ae:	e7da      	b.n	18766 <m2m_ip_cb+0x2a6>
   187b0:	00016521 	.word	0x00016521
   187b4:	20003e7c 	.word	0x20003e7c
   187b8:	20003e78 	.word	0x20003e78
   187bc:	20003dc8 	.word	0x20003dc8
   187c0:	200032f2 	.word	0x200032f2
   187c4:	20003e80 	.word	0x20003e80
   187c8:	000183b1 	.word	0x000183b1

000187cc <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   187cc:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
   187ce:	4b0a      	ldr	r3, [pc, #40]	; (187f8 <socketInit+0x2c>)
   187d0:	781b      	ldrb	r3, [r3, #0]
   187d2:	2b00      	cmp	r3, #0
   187d4:	d000      	beq.n	187d8 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
   187d6:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   187d8:	22b0      	movs	r2, #176	; 0xb0
   187da:	2100      	movs	r1, #0
   187dc:	4807      	ldr	r0, [pc, #28]	; (187fc <socketInit+0x30>)
   187de:	4b08      	ldr	r3, [pc, #32]	; (18800 <socketInit+0x34>)
   187e0:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   187e2:	4908      	ldr	r1, [pc, #32]	; (18804 <socketInit+0x38>)
   187e4:	2002      	movs	r0, #2
   187e6:	4b08      	ldr	r3, [pc, #32]	; (18808 <socketInit+0x3c>)
   187e8:	4798      	blx	r3
		gbSocketInit	= 1;
   187ea:	2201      	movs	r2, #1
   187ec:	4b02      	ldr	r3, [pc, #8]	; (187f8 <socketInit+0x2c>)
   187ee:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   187f0:	2200      	movs	r2, #0
   187f2:	4b06      	ldr	r3, [pc, #24]	; (1880c <socketInit+0x40>)
   187f4:	801a      	strh	r2, [r3, #0]
}
   187f6:	e7ee      	b.n	187d6 <socketInit+0xa>
   187f8:	200032f1 	.word	0x200032f1
   187fc:	20003dc8 	.word	0x20003dc8
   18800:	00015e31 	.word	0x00015e31
   18804:	000184c1 	.word	0x000184c1
   18808:	000165f9 	.word	0x000165f9
   1880c:	200032f2 	.word	0x200032f2

00018810 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   18810:	b510      	push	{r4, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   18812:	22b0      	movs	r2, #176	; 0xb0
   18814:	2100      	movs	r1, #0
   18816:	4807      	ldr	r0, [pc, #28]	; (18834 <socketDeinit+0x24>)
   18818:	4b07      	ldr	r3, [pc, #28]	; (18838 <socketDeinit+0x28>)
   1881a:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   1881c:	2100      	movs	r1, #0
   1881e:	2002      	movs	r0, #2
   18820:	4b06      	ldr	r3, [pc, #24]	; (1883c <socketDeinit+0x2c>)
   18822:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   18824:	2300      	movs	r3, #0
   18826:	4a06      	ldr	r2, [pc, #24]	; (18840 <socketDeinit+0x30>)
   18828:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
   1882a:	4a06      	ldr	r2, [pc, #24]	; (18844 <socketDeinit+0x34>)
   1882c:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
   1882e:	4a06      	ldr	r2, [pc, #24]	; (18848 <socketDeinit+0x38>)
   18830:	7013      	strb	r3, [r2, #0]
}
   18832:	bd10      	pop	{r4, pc}
   18834:	20003dc8 	.word	0x20003dc8
   18838:	00015e31 	.word	0x00015e31
   1883c:	000165f9 	.word	0x000165f9
   18840:	20003e78 	.word	0x20003e78
   18844:	20003e80 	.word	0x20003e80
   18848:	200032f1 	.word	0x200032f1

0001884c <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
   1884c:	4b02      	ldr	r3, [pc, #8]	; (18858 <registerSocketCallback+0xc>)
   1884e:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   18850:	4b02      	ldr	r3, [pc, #8]	; (1885c <registerSocketCallback+0x10>)
   18852:	6019      	str	r1, [r3, #0]
}
   18854:	4770      	bx	lr
   18856:	46c0      	nop			; (mov r8, r8)
   18858:	20003e78 	.word	0x20003e78
   1885c:	20003e80 	.word	0x20003e80

00018860 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   18860:	b5f0      	push	{r4, r5, r6, r7, lr}
   18862:	46d6      	mov	lr, sl
   18864:	4647      	mov	r7, r8
   18866:	b580      	push	{r7, lr}
   18868:	b089      	sub	sp, #36	; 0x24
   1886a:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   1886c:	2802      	cmp	r0, #2
   1886e:	d000      	beq.n	18872 <socket+0x12>
   18870:	e09b      	b.n	189aa <socket+0x14a>
	{
		if(u8Type == SOCK_STREAM)
   18872:	2901      	cmp	r1, #1
   18874:	d00a      	beq.n	1888c <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   18876:	2902      	cmp	r1, #2
   18878:	d100      	bne.n	1887c <socket+0x1c>
   1887a:	e06f      	b.n	1895c <socket+0xfc>
	SOCKET					sock = -1;
   1887c:	2501      	movs	r5, #1
   1887e:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
   18880:	0028      	movs	r0, r5
   18882:	b009      	add	sp, #36	; 0x24
   18884:	bc0c      	pop	{r2, r3}
   18886:	4690      	mov	r8, r2
   18888:	469a      	mov	sl, r3
   1888a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
   1888c:	4c48      	ldr	r4, [pc, #288]	; (189b0 <socket+0x150>)
   1888e:	7827      	ldrb	r7, [r4, #0]
   18890:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
   18892:	7826      	ldrb	r6, [r4, #0]
   18894:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   18896:	7820      	ldrb	r0, [r4, #0]
   18898:	3001      	adds	r0, #1
   1889a:	3106      	adds	r1, #6
   1889c:	4b45      	ldr	r3, [pc, #276]	; (189b4 <socket+0x154>)
   1889e:	4798      	blx	r3
   188a0:	b2c9      	uxtb	r1, r1
   188a2:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
   188a4:	0132      	lsls	r2, r6, #4
   188a6:	4b44      	ldr	r3, [pc, #272]	; (189b8 <socket+0x158>)
   188a8:	189b      	adds	r3, r3, r2
   188aa:	7a9b      	ldrb	r3, [r3, #10]
   188ac:	2506      	movs	r5, #6
   188ae:	2b00      	cmp	r3, #0
   188b0:	d018      	beq.n	188e4 <socket+0x84>
				u8SockID	= u8NextTcpSock;
   188b2:	4e3f      	ldr	r6, [pc, #252]	; (189b0 <socket+0x150>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   188b4:	4b3f      	ldr	r3, [pc, #252]	; (189b4 <socket+0x154>)
   188b6:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
   188b8:	4b3f      	ldr	r3, [pc, #252]	; (189b8 <socket+0x158>)
   188ba:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
   188bc:	7837      	ldrb	r7, [r6, #0]
   188be:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
   188c0:	7834      	ldrb	r4, [r6, #0]
   188c2:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   188c4:	7830      	ldrb	r0, [r6, #0]
   188c6:	3001      	adds	r0, #1
   188c8:	2107      	movs	r1, #7
   188ca:	47d0      	blx	sl
   188cc:	b2c9      	uxtb	r1, r1
   188ce:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
   188d0:	0123      	lsls	r3, r4, #4
   188d2:	4443      	add	r3, r8
   188d4:	7a9b      	ldrb	r3, [r3, #10]
   188d6:	2b00      	cmp	r3, #0
   188d8:	d007      	beq.n	188ea <socket+0x8a>
   188da:	3d01      	subs	r5, #1
   188dc:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   188de:	2d00      	cmp	r5, #0
   188e0:	d1ec      	bne.n	188bc <socket+0x5c>
   188e2:	e7cb      	b.n	1887c <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
   188e4:	4b34      	ldr	r3, [pc, #208]	; (189b8 <socket+0x158>)
   188e6:	18d4      	adds	r4, r2, r3
   188e8:	e002      	b.n	188f0 <socket+0x90>
   188ea:	0124      	lsls	r4, r4, #4
   188ec:	4b32      	ldr	r3, [pc, #200]	; (189b8 <socket+0x158>)
   188ee:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
   188f0:	b27d      	sxtb	r5, r7
		if(sock >= 0)
   188f2:	2d00      	cmp	r5, #0
   188f4:	dbc4      	blt.n	18880 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   188f6:	2210      	movs	r2, #16
   188f8:	2100      	movs	r1, #0
   188fa:	0020      	movs	r0, r4
   188fc:	4b2f      	ldr	r3, [pc, #188]	; (189bc <socket+0x15c>)
   188fe:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   18900:	2301      	movs	r3, #1
   18902:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
   18904:	4a2e      	ldr	r2, [pc, #184]	; (189c0 <socket+0x160>)
   18906:	8813      	ldrh	r3, [r2, #0]
   18908:	3301      	adds	r3, #1
   1890a:	b29b      	uxth	r3, r3
   1890c:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
   1890e:	8813      	ldrh	r3, [r2, #0]
   18910:	b29b      	uxth	r3, r3
   18912:	2b00      	cmp	r3, #0
   18914:	d103      	bne.n	1891e <socket+0xbe>
				++gu16SessionID;
   18916:	8813      	ldrh	r3, [r2, #0]
   18918:	3301      	adds	r3, #1
   1891a:	b29b      	uxth	r3, r3
   1891c:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
   1891e:	4e28      	ldr	r6, [pc, #160]	; (189c0 <socket+0x160>)
   18920:	8833      	ldrh	r3, [r6, #0]
   18922:	b29b      	uxth	r3, r3
   18924:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   18926:	4827      	ldr	r0, [pc, #156]	; (189c4 <socket+0x164>)
   18928:	4f27      	ldr	r7, [pc, #156]	; (189c8 <socket+0x168>)
   1892a:	47b8      	blx	r7
   1892c:	8832      	ldrh	r2, [r6, #0]
   1892e:	b292      	uxth	r2, r2
   18930:	0029      	movs	r1, r5
   18932:	4826      	ldr	r0, [pc, #152]	; (189cc <socket+0x16c>)
   18934:	47b8      	blx	r7
   18936:	4826      	ldr	r0, [pc, #152]	; (189d0 <socket+0x170>)
   18938:	47b8      	blx	r7
			if(u8Flags & SOCKET_FLAGS_SSL)
   1893a:	9b05      	ldr	r3, [sp, #20]
   1893c:	07db      	lsls	r3, r3, #31
   1893e:	d59f      	bpl.n	18880 <socket+0x20>
				strSSLCreate.sslSock = sock;
   18940:	aa07      	add	r2, sp, #28
   18942:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   18944:	2321      	movs	r3, #33	; 0x21
   18946:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   18948:	2300      	movs	r3, #0
   1894a:	9302      	str	r3, [sp, #8]
   1894c:	9301      	str	r3, [sp, #4]
   1894e:	9300      	str	r3, [sp, #0]
   18950:	3304      	adds	r3, #4
   18952:	2150      	movs	r1, #80	; 0x50
   18954:	2002      	movs	r0, #2
   18956:	4c1f      	ldr	r4, [pc, #124]	; (189d4 <socket+0x174>)
   18958:	47a0      	blx	r4
   1895a:	e791      	b.n	18880 <socket+0x20>
				u8SockID		= u8NextUdpSock;
   1895c:	4b1e      	ldr	r3, [pc, #120]	; (189d8 <socket+0x178>)
   1895e:	781d      	ldrb	r5, [r3, #0]
   18960:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   18962:	781c      	ldrb	r4, [r3, #0]
   18964:	0124      	lsls	r4, r4, #4
   18966:	4a1d      	ldr	r2, [pc, #116]	; (189dc <socket+0x17c>)
   18968:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   1896a:	7819      	ldrb	r1, [r3, #0]
   1896c:	3101      	adds	r1, #1
   1896e:	2203      	movs	r2, #3
   18970:	400a      	ands	r2, r1
   18972:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   18974:	7aa3      	ldrb	r3, [r4, #10]
   18976:	2b00      	cmp	r3, #0
   18978:	d014      	beq.n	189a4 <socket+0x144>
   1897a:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
   1897c:	4916      	ldr	r1, [pc, #88]	; (189d8 <socket+0x178>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   1897e:	4f17      	ldr	r7, [pc, #92]	; (189dc <socket+0x17c>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   18980:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
   18982:	780d      	ldrb	r5, [r1, #0]
   18984:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   18986:	780c      	ldrb	r4, [r1, #0]
   18988:	0124      	lsls	r4, r4, #4
   1898a:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   1898c:	780b      	ldrb	r3, [r1, #0]
   1898e:	3301      	adds	r3, #1
   18990:	4003      	ands	r3, r0
   18992:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
   18994:	7aa3      	ldrb	r3, [r4, #10]
   18996:	2b00      	cmp	r3, #0
   18998:	d004      	beq.n	189a4 <socket+0x144>
   1899a:	3a01      	subs	r2, #1
   1899c:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   1899e:	2a00      	cmp	r2, #0
   189a0:	d1ef      	bne.n	18982 <socket+0x122>
   189a2:	e76b      	b.n	1887c <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   189a4:	3507      	adds	r5, #7
   189a6:	b26d      	sxtb	r5, r5
					break;
   189a8:	e7a3      	b.n	188f2 <socket+0x92>
	SOCKET					sock = -1;
   189aa:	2501      	movs	r5, #1
   189ac:	426d      	negs	r5, r5
   189ae:	e767      	b.n	18880 <socket+0x20>
   189b0:	200032f4 	.word	0x200032f4
   189b4:	0001fb09 	.word	0x0001fb09
   189b8:	20003dc8 	.word	0x20003dc8
   189bc:	00015e31 	.word	0x00015e31
   189c0:	200032f2 	.word	0x200032f2
   189c4:	00021cd4 	.word	0x00021cd4
   189c8:	000148e5 	.word	0x000148e5
   189cc:	000227a0 	.word	0x000227a0
   189d0:	000219c0 	.word	0x000219c0
   189d4:	00015f45 	.word	0x00015f45
   189d8:	200032f5 	.word	0x200032f5
   189dc:	20003e38 	.word	0x20003e38

000189e0 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   189e0:	b570      	push	{r4, r5, r6, lr}
   189e2:	b088      	sub	sp, #32
   189e4:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   189e6:	db30      	blt.n	18a4a <connect+0x6a>
   189e8:	2900      	cmp	r1, #0
   189ea:	d031      	beq.n	18a50 <connect+0x70>
   189ec:	0100      	lsls	r0, r0, #4
   189ee:	4b1d      	ldr	r3, [pc, #116]	; (18a64 <connect+0x84>)
   189f0:	181b      	adds	r3, r3, r0
   189f2:	7a9b      	ldrb	r3, [r3, #10]
   189f4:	2b01      	cmp	r3, #1
   189f6:	d12e      	bne.n	18a56 <connect+0x76>
   189f8:	2a00      	cmp	r2, #0
   189fa:	d02f      	beq.n	18a5c <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   189fc:	4b19      	ldr	r3, [pc, #100]	; (18a64 <connect+0x84>)
   189fe:	181b      	adds	r3, r3, r0
   18a00:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   18a02:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   18a04:	07db      	lsls	r3, r3, #31
   18a06:	d505      	bpl.n	18a14 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   18a08:	4b16      	ldr	r3, [pc, #88]	; (18a64 <connect+0x84>)
   18a0a:	181b      	adds	r3, r3, r0
   18a0c:	7ada      	ldrb	r2, [r3, #11]
   18a0e:	ab05      	add	r3, sp, #20
   18a10:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   18a12:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
   18a14:	ad05      	add	r5, sp, #20
   18a16:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   18a18:	2208      	movs	r2, #8
   18a1a:	0028      	movs	r0, r5
   18a1c:	4b12      	ldr	r3, [pc, #72]	; (18a68 <connect+0x88>)
   18a1e:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   18a20:	0124      	lsls	r4, r4, #4
   18a22:	4b10      	ldr	r3, [pc, #64]	; (18a64 <connect+0x84>)
   18a24:	191c      	adds	r4, r3, r4
   18a26:	88e3      	ldrh	r3, [r4, #6]
   18a28:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   18a2a:	2300      	movs	r3, #0
   18a2c:	9302      	str	r3, [sp, #8]
   18a2e:	9301      	str	r3, [sp, #4]
   18a30:	9300      	str	r3, [sp, #0]
   18a32:	330c      	adds	r3, #12
   18a34:	002a      	movs	r2, r5
   18a36:	0031      	movs	r1, r6
   18a38:	2002      	movs	r0, #2
   18a3a:	4c0c      	ldr	r4, [pc, #48]	; (18a6c <connect+0x8c>)
   18a3c:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
   18a3e:	2800      	cmp	r0, #0
   18a40:	d001      	beq.n	18a46 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
   18a42:	2009      	movs	r0, #9
   18a44:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
   18a46:	b008      	add	sp, #32
   18a48:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   18a4a:	2006      	movs	r0, #6
   18a4c:	4240      	negs	r0, r0
   18a4e:	e7fa      	b.n	18a46 <connect+0x66>
   18a50:	2006      	movs	r0, #6
   18a52:	4240      	negs	r0, r0
   18a54:	e7f7      	b.n	18a46 <connect+0x66>
   18a56:	2006      	movs	r0, #6
   18a58:	4240      	negs	r0, r0
   18a5a:	e7f4      	b.n	18a46 <connect+0x66>
   18a5c:	2006      	movs	r0, #6
   18a5e:	4240      	negs	r0, r0
   18a60:	e7f1      	b.n	18a46 <connect+0x66>
   18a62:	46c0      	nop			; (mov r8, r8)
   18a64:	20003dc8 	.word	0x20003dc8
   18a68:	00015e1d 	.word	0x00015e1d
   18a6c:	00015f45 	.word	0x00015f45

00018a70 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   18a70:	b530      	push	{r4, r5, lr}
   18a72:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   18a74:	2800      	cmp	r0, #0
   18a76:	db36      	blt.n	18ae6 <send+0x76>
   18a78:	2900      	cmp	r1, #0
   18a7a:	d037      	beq.n	18aec <send+0x7c>
   18a7c:	23af      	movs	r3, #175	; 0xaf
   18a7e:	00db      	lsls	r3, r3, #3
   18a80:	429a      	cmp	r2, r3
   18a82:	d836      	bhi.n	18af2 <send+0x82>
   18a84:	0104      	lsls	r4, r0, #4
   18a86:	4b1e      	ldr	r3, [pc, #120]	; (18b00 <send+0x90>)
   18a88:	191b      	adds	r3, r3, r4
   18a8a:	7a9b      	ldrb	r3, [r3, #10]
   18a8c:	2b01      	cmp	r3, #1
   18a8e:	d133      	bne.n	18af8 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
   18a90:	ab04      	add	r3, sp, #16
   18a92:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   18a94:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   18a96:	0025      	movs	r5, r4
   18a98:	4c19      	ldr	r4, [pc, #100]	; (18b00 <send+0x90>)
   18a9a:	1964      	adds	r4, r4, r5
   18a9c:	88e4      	ldrh	r4, [r4, #6]
   18a9e:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   18aa0:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
   18aa2:	2806      	cmp	r0, #6
   18aa4:	dd00      	ble.n	18aa8 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   18aa6:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   18aa8:	0104      	lsls	r4, r0, #4
   18aaa:	4b15      	ldr	r3, [pc, #84]	; (18b00 <send+0x90>)
   18aac:	191b      	adds	r3, r3, r4
   18aae:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
   18ab0:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   18ab2:	07e4      	lsls	r4, r4, #31
   18ab4:	d505      	bpl.n	18ac2 <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   18ab6:	0100      	lsls	r0, r0, #4
   18ab8:	4b11      	ldr	r3, [pc, #68]	; (18b00 <send+0x90>)
   18aba:	1818      	adds	r0, r3, r0
   18abc:	8905      	ldrh	r5, [r0, #8]
   18abe:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   18ac0:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   18ac2:	2080      	movs	r0, #128	; 0x80
   18ac4:	4318      	orrs	r0, r3
   18ac6:	9502      	str	r5, [sp, #8]
   18ac8:	9201      	str	r2, [sp, #4]
   18aca:	9100      	str	r1, [sp, #0]
   18acc:	2310      	movs	r3, #16
   18ace:	aa04      	add	r2, sp, #16
   18ad0:	0001      	movs	r1, r0
   18ad2:	2002      	movs	r0, #2
   18ad4:	4c0b      	ldr	r4, [pc, #44]	; (18b04 <send+0x94>)
   18ad6:	47a0      	blx	r4
   18ad8:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
   18ada:	2800      	cmp	r0, #0
   18adc:	d000      	beq.n	18ae0 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   18ade:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
   18ae0:	0018      	movs	r0, r3
   18ae2:	b009      	add	sp, #36	; 0x24
   18ae4:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   18ae6:	2306      	movs	r3, #6
   18ae8:	425b      	negs	r3, r3
   18aea:	e7f9      	b.n	18ae0 <send+0x70>
   18aec:	2306      	movs	r3, #6
   18aee:	425b      	negs	r3, r3
   18af0:	e7f6      	b.n	18ae0 <send+0x70>
   18af2:	2306      	movs	r3, #6
   18af4:	425b      	negs	r3, r3
   18af6:	e7f3      	b.n	18ae0 <send+0x70>
   18af8:	2306      	movs	r3, #6
   18afa:	425b      	negs	r3, r3
   18afc:	e7f0      	b.n	18ae0 <send+0x70>
   18afe:	46c0      	nop			; (mov r8, r8)
   18b00:	20003dc8 	.word	0x20003dc8
   18b04:	00015f45 	.word	0x00015f45

00018b08 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   18b08:	b530      	push	{r4, r5, lr}
   18b0a:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   18b0c:	2800      	cmp	r0, #0
   18b0e:	db34      	blt.n	18b7a <recv+0x72>
   18b10:	2900      	cmp	r1, #0
   18b12:	d035      	beq.n	18b80 <recv+0x78>
   18b14:	2a00      	cmp	r2, #0
   18b16:	d036      	beq.n	18b86 <recv+0x7e>
   18b18:	0105      	lsls	r5, r0, #4
   18b1a:	4c1e      	ldr	r4, [pc, #120]	; (18b94 <recv+0x8c>)
   18b1c:	1964      	adds	r4, r4, r5
   18b1e:	7aa4      	ldrb	r4, [r4, #10]
   18b20:	2c01      	cmp	r4, #1
   18b22:	d133      	bne.n	18b8c <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   18b24:	4c1b      	ldr	r4, [pc, #108]	; (18b94 <recv+0x8c>)
   18b26:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   18b28:	1964      	adds	r4, r4, r5
   18b2a:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
   18b2c:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
   18b2e:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
   18b30:	2900      	cmp	r1, #0
   18b32:	d11d      	bne.n	18b70 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
   18b34:	2101      	movs	r1, #1
   18b36:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   18b38:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
   18b3a:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   18b3c:	07d2      	lsls	r2, r2, #31
   18b3e:	d500      	bpl.n	18b42 <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   18b40:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   18b42:	2b00      	cmp	r3, #0
   18b44:	d117      	bne.n	18b76 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   18b46:	3b01      	subs	r3, #1
   18b48:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
   18b4a:	aa04      	add	r2, sp, #16
   18b4c:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   18b4e:	0100      	lsls	r0, r0, #4
   18b50:	4b10      	ldr	r3, [pc, #64]	; (18b94 <recv+0x8c>)
   18b52:	1818      	adds	r0, r3, r0
   18b54:	88c3      	ldrh	r3, [r0, #6]
   18b56:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   18b58:	2300      	movs	r3, #0
   18b5a:	9302      	str	r3, [sp, #8]
   18b5c:	9301      	str	r3, [sp, #4]
   18b5e:	9300      	str	r3, [sp, #0]
   18b60:	3308      	adds	r3, #8
   18b62:	2002      	movs	r0, #2
   18b64:	4c0c      	ldr	r4, [pc, #48]	; (18b98 <recv+0x90>)
   18b66:	47a0      	blx	r4
   18b68:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
   18b6a:	2800      	cmp	r0, #0
   18b6c:	d000      	beq.n	18b70 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   18b6e:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
   18b70:	0010      	movs	r0, r2
   18b72:	b007      	add	sp, #28
   18b74:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   18b76:	9304      	str	r3, [sp, #16]
   18b78:	e7e7      	b.n	18b4a <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   18b7a:	2206      	movs	r2, #6
   18b7c:	4252      	negs	r2, r2
   18b7e:	e7f7      	b.n	18b70 <recv+0x68>
   18b80:	2206      	movs	r2, #6
   18b82:	4252      	negs	r2, r2
   18b84:	e7f4      	b.n	18b70 <recv+0x68>
   18b86:	2206      	movs	r2, #6
   18b88:	4252      	negs	r2, r2
   18b8a:	e7f1      	b.n	18b70 <recv+0x68>
   18b8c:	2206      	movs	r2, #6
   18b8e:	4252      	negs	r2, r2
   18b90:	e7ee      	b.n	18b70 <recv+0x68>
   18b92:	46c0      	nop			; (mov r8, r8)
   18b94:	20003dc8 	.word	0x20003dc8
   18b98:	00015f45 	.word	0x00015f45

00018b9c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   18b9c:	b530      	push	{r4, r5, lr}
   18b9e:	b087      	sub	sp, #28
   18ba0:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
   18ba2:	481d      	ldr	r0, [pc, #116]	; (18c18 <close+0x7c>)
   18ba4:	4d1d      	ldr	r5, [pc, #116]	; (18c1c <close+0x80>)
   18ba6:	47a8      	blx	r5
   18ba8:	0021      	movs	r1, r4
   18baa:	481d      	ldr	r0, [pc, #116]	; (18c20 <close+0x84>)
   18bac:	47a8      	blx	r5
   18bae:	481d      	ldr	r0, [pc, #116]	; (18c24 <close+0x88>)
   18bb0:	47a8      	blx	r5
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   18bb2:	2c00      	cmp	r4, #0
   18bb4:	db2a      	blt.n	18c0c <close+0x70>
   18bb6:	0122      	lsls	r2, r4, #4
   18bb8:	4b1b      	ldr	r3, [pc, #108]	; (18c28 <close+0x8c>)
   18bba:	189b      	adds	r3, r3, r2
   18bbc:	7a9b      	ldrb	r3, [r3, #10]
   18bbe:	2b01      	cmp	r3, #1
   18bc0:	d127      	bne.n	18c12 <close+0x76>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   18bc2:	a905      	add	r1, sp, #20
   18bc4:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   18bc6:	4b18      	ldr	r3, [pc, #96]	; (18c28 <close+0x8c>)
   18bc8:	189b      	adds	r3, r3, r2
   18bca:	88da      	ldrh	r2, [r3, #6]
   18bcc:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   18bce:	2200      	movs	r2, #0
   18bd0:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
   18bd2:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   18bd4:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   18bd6:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   18bd8:	07db      	lsls	r3, r3, #31
   18bda:	d500      	bpl.n	18bde <close+0x42>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   18bdc:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   18bde:	2300      	movs	r3, #0
   18be0:	9302      	str	r3, [sp, #8]
   18be2:	9301      	str	r3, [sp, #4]
   18be4:	9300      	str	r3, [sp, #0]
   18be6:	3304      	adds	r3, #4
   18be8:	aa05      	add	r2, sp, #20
   18bea:	2002      	movs	r0, #2
   18bec:	4d0f      	ldr	r5, [pc, #60]	; (18c2c <close+0x90>)
   18bee:	47a8      	blx	r5
   18bf0:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
   18bf2:	d001      	beq.n	18bf8 <close+0x5c>
		{
			s8Ret = SOCK_ERR_INVALID;
   18bf4:	2509      	movs	r5, #9
   18bf6:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   18bf8:	0124      	lsls	r4, r4, #4
   18bfa:	480b      	ldr	r0, [pc, #44]	; (18c28 <close+0x8c>)
   18bfc:	1820      	adds	r0, r4, r0
   18bfe:	2210      	movs	r2, #16
   18c00:	2100      	movs	r1, #0
   18c02:	4b0b      	ldr	r3, [pc, #44]	; (18c30 <close+0x94>)
   18c04:	4798      	blx	r3
	}
	return s8Ret;
}
   18c06:	0028      	movs	r0, r5
   18c08:	b007      	add	sp, #28
   18c0a:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   18c0c:	2506      	movs	r5, #6
   18c0e:	426d      	negs	r5, r5
   18c10:	e7f9      	b.n	18c06 <close+0x6a>
   18c12:	2506      	movs	r5, #6
   18c14:	426d      	negs	r5, r5
   18c16:	e7f6      	b.n	18c06 <close+0x6a>
   18c18:	00021cd4 	.word	0x00021cd4
   18c1c:	000148e5 	.word	0x000148e5
   18c20:	00022788 	.word	0x00022788
   18c24:	000219c0 	.word	0x000219c0
   18c28:	20003dc8 	.word	0x20003dc8
   18c2c:	00015f45 	.word	0x00015f45
   18c30:	00015e31 	.word	0x00015e31

00018c34 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   18c34:	b570      	push	{r4, r5, r6, lr}
   18c36:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
   18c38:	2300      	movs	r3, #0
   18c3a:	9301      	str	r3, [sp, #4]
   18c3c:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
   18c3e:	2100      	movs	r1, #0
   18c40:	7802      	ldrb	r2, [r0, #0]
   18c42:	1c44      	adds	r4, r0, #1
   18c44:	3005      	adds	r0, #5
   18c46:	000b      	movs	r3, r1
   18c48:	e009      	b.n	18c5e <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
   18c4a:	009d      	lsls	r5, r3, #2
   18c4c:	195b      	adds	r3, r3, r5
   18c4e:	005b      	lsls	r3, r3, #1
   18c50:	189b      	adds	r3, r3, r2
   18c52:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
   18c54:	0022      	movs	r2, r4
   18c56:	3401      	adds	r4, #1
			if(j > 4)
   18c58:	42a0      	cmp	r0, r4
   18c5a:	d00a      	beq.n	18c72 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
   18c5c:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
   18c5e:	2a2e      	cmp	r2, #46	; 0x2e
   18c60:	d00a      	beq.n	18c78 <nmi_inet_addr+0x44>
   18c62:	2a00      	cmp	r2, #0
   18c64:	d00c      	beq.n	18c80 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
   18c66:	3a30      	subs	r2, #48	; 0x30
   18c68:	b2d2      	uxtb	r2, r2
   18c6a:	2a09      	cmp	r2, #9
   18c6c:	d9ed      	bls.n	18c4a <nmi_inet_addr+0x16>
				return 0;
   18c6e:	2000      	movs	r0, #0
   18c70:	e000      	b.n	18c74 <nmi_inet_addr+0x40>
				return 0;
   18c72:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
   18c74:	b002      	add	sp, #8
   18c76:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
   18c78:	466a      	mov	r2, sp
   18c7a:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
   18c7c:	0020      	movs	r0, r4
   18c7e:	e002      	b.n	18c86 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
   18c80:	466a      	mov	r2, sp
   18c82:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
   18c84:	0020      	movs	r0, r4
   18c86:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
   18c88:	2e04      	cmp	r6, #4
   18c8a:	d1d9      	bne.n	18c40 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   18c8c:	2204      	movs	r2, #4
   18c8e:	4669      	mov	r1, sp
   18c90:	a801      	add	r0, sp, #4
   18c92:	4b02      	ldr	r3, [pc, #8]	; (18c9c <nmi_inet_addr+0x68>)
   18c94:	4798      	blx	r3
	return u32IP;
   18c96:	9801      	ldr	r0, [sp, #4]
   18c98:	e7ec      	b.n	18c74 <nmi_inet_addr+0x40>
   18c9a:	46c0      	nop			; (mov r8, r8)
   18c9c:	00015e1d 	.word	0x00015e1d

00018ca0 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   18ca0:	b510      	push	{r4, lr}
   18ca2:	b084      	sub	sp, #16
   18ca4:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   18ca6:	4b0b      	ldr	r3, [pc, #44]	; (18cd4 <gethostbyname+0x34>)
   18ca8:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   18caa:	b2c3      	uxtb	r3, r0
   18cac:	2b40      	cmp	r3, #64	; 0x40
   18cae:	d80d      	bhi.n	18ccc <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   18cb0:	23ff      	movs	r3, #255	; 0xff
   18cb2:	4003      	ands	r3, r0
   18cb4:	3301      	adds	r3, #1
   18cb6:	2200      	movs	r2, #0
   18cb8:	9202      	str	r2, [sp, #8]
   18cba:	9201      	str	r2, [sp, #4]
   18cbc:	9200      	str	r2, [sp, #0]
   18cbe:	0022      	movs	r2, r4
   18cc0:	214a      	movs	r1, #74	; 0x4a
   18cc2:	2002      	movs	r0, #2
   18cc4:	4c04      	ldr	r4, [pc, #16]	; (18cd8 <gethostbyname+0x38>)
   18cc6:	47a0      	blx	r4
	}
	return s8Err;
}
   18cc8:	b004      	add	sp, #16
   18cca:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   18ccc:	2006      	movs	r0, #6
   18cce:	4240      	negs	r0, r0
   18cd0:	e7fa      	b.n	18cc8 <gethostbyname+0x28>
   18cd2:	46c0      	nop			; (mov r8, r8)
   18cd4:	00015e41 	.word	0x00015e41
   18cd8:	00015f45 	.word	0x00015f45

00018cdc <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   18cdc:	b570      	push	{r4, r5, r6, lr}
   18cde:	b082      	sub	sp, #8
   18ce0:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   18ce2:	4b2a      	ldr	r3, [pc, #168]	; (18d8c <spi_flash_enable+0xb0>)
   18ce4:	4798      	blx	r3
   18ce6:	0500      	lsls	r0, r0, #20
   18ce8:	0d00      	lsrs	r0, r0, #20
   18cea:	4b29      	ldr	r3, [pc, #164]	; (18d90 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
   18cec:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   18cee:	4298      	cmp	r0, r3
   18cf0:	d802      	bhi.n	18cf8 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
   18cf2:	0028      	movs	r0, r5
   18cf4:	b002      	add	sp, #8
   18cf6:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   18cf8:	a901      	add	r1, sp, #4
   18cfa:	4826      	ldr	r0, [pc, #152]	; (18d94 <spi_flash_enable+0xb8>)
   18cfc:	4b26      	ldr	r3, [pc, #152]	; (18d98 <spi_flash_enable+0xbc>)
   18cfe:	4798      	blx	r3
   18d00:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
   18d02:	d1f6      	bne.n	18cf2 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
   18d04:	4b25      	ldr	r3, [pc, #148]	; (18d9c <spi_flash_enable+0xc0>)
   18d06:	9a01      	ldr	r2, [sp, #4]
   18d08:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
   18d0a:	4925      	ldr	r1, [pc, #148]	; (18da0 <spi_flash_enable+0xc4>)
   18d0c:	4319      	orrs	r1, r3
   18d0e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
   18d10:	4820      	ldr	r0, [pc, #128]	; (18d94 <spi_flash_enable+0xb8>)
   18d12:	4b24      	ldr	r3, [pc, #144]	; (18da4 <spi_flash_enable+0xc8>)
   18d14:	4798      	blx	r3
		if(enable) {
   18d16:	2c00      	cmp	r4, #0
   18d18:	d020      	beq.n	18d5c <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   18d1a:	2100      	movs	r1, #0
   18d1c:	4822      	ldr	r0, [pc, #136]	; (18da8 <spi_flash_enable+0xcc>)
   18d1e:	4c21      	ldr	r4, [pc, #132]	; (18da4 <spi_flash_enable+0xc8>)
   18d20:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   18d22:	21ab      	movs	r1, #171	; 0xab
   18d24:	4821      	ldr	r0, [pc, #132]	; (18dac <spi_flash_enable+0xd0>)
   18d26:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   18d28:	2101      	movs	r1, #1
   18d2a:	4821      	ldr	r0, [pc, #132]	; (18db0 <spi_flash_enable+0xd4>)
   18d2c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   18d2e:	2100      	movs	r1, #0
   18d30:	4820      	ldr	r0, [pc, #128]	; (18db4 <spi_flash_enable+0xd8>)
   18d32:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   18d34:	2181      	movs	r1, #129	; 0x81
   18d36:	4820      	ldr	r0, [pc, #128]	; (18db8 <spi_flash_enable+0xdc>)
   18d38:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   18d3a:	4e20      	ldr	r6, [pc, #128]	; (18dbc <spi_flash_enable+0xe0>)
   18d3c:	4c20      	ldr	r4, [pc, #128]	; (18dc0 <spi_flash_enable+0xe4>)
   18d3e:	0030      	movs	r0, r6
   18d40:	47a0      	blx	r4
   18d42:	2801      	cmp	r0, #1
   18d44:	d1fb      	bne.n	18d3e <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
   18d46:	4b15      	ldr	r3, [pc, #84]	; (18d9c <spi_flash_enable+0xc0>)
   18d48:	9a01      	ldr	r2, [sp, #4]
   18d4a:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
   18d4c:	2180      	movs	r1, #128	; 0x80
   18d4e:	0249      	lsls	r1, r1, #9
   18d50:	4319      	orrs	r1, r3
   18d52:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
   18d54:	480f      	ldr	r0, [pc, #60]	; (18d94 <spi_flash_enable+0xb8>)
   18d56:	4b13      	ldr	r3, [pc, #76]	; (18da4 <spi_flash_enable+0xc8>)
   18d58:	4798      	blx	r3
   18d5a:	e7ca      	b.n	18cf2 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   18d5c:	2100      	movs	r1, #0
   18d5e:	4812      	ldr	r0, [pc, #72]	; (18da8 <spi_flash_enable+0xcc>)
   18d60:	4c10      	ldr	r4, [pc, #64]	; (18da4 <spi_flash_enable+0xc8>)
   18d62:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   18d64:	21b9      	movs	r1, #185	; 0xb9
   18d66:	4811      	ldr	r0, [pc, #68]	; (18dac <spi_flash_enable+0xd0>)
   18d68:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   18d6a:	2101      	movs	r1, #1
   18d6c:	4810      	ldr	r0, [pc, #64]	; (18db0 <spi_flash_enable+0xd4>)
   18d6e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   18d70:	2100      	movs	r1, #0
   18d72:	4810      	ldr	r0, [pc, #64]	; (18db4 <spi_flash_enable+0xd8>)
   18d74:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   18d76:	2181      	movs	r1, #129	; 0x81
   18d78:	480f      	ldr	r0, [pc, #60]	; (18db8 <spi_flash_enable+0xdc>)
   18d7a:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   18d7c:	4e0f      	ldr	r6, [pc, #60]	; (18dbc <spi_flash_enable+0xe0>)
   18d7e:	4c10      	ldr	r4, [pc, #64]	; (18dc0 <spi_flash_enable+0xe4>)
   18d80:	0030      	movs	r0, r6
   18d82:	47a0      	blx	r4
   18d84:	2801      	cmp	r0, #1
   18d86:	d1fb      	bne.n	18d80 <spi_flash_enable+0xa4>
   18d88:	e7dd      	b.n	18d46 <spi_flash_enable+0x6a>
   18d8a:	46c0      	nop			; (mov r8, r8)
   18d8c:	00016db5 	.word	0x00016db5
   18d90:	0000039f 	.word	0x0000039f
   18d94:	00001410 	.word	0x00001410
   18d98:	000171ed 	.word	0x000171ed
   18d9c:	f8888fff 	.word	0xf8888fff
   18da0:	01111000 	.word	0x01111000
   18da4:	000171f9 	.word	0x000171f9
   18da8:	00010208 	.word	0x00010208
   18dac:	0001020c 	.word	0x0001020c
   18db0:	00010214 	.word	0x00010214
   18db4:	0001021c 	.word	0x0001021c
   18db8:	00010204 	.word	0x00010204
   18dbc:	00010218 	.word	0x00010218
   18dc0:	000171e1 	.word	0x000171e1

00018dc4 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   18dc4:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   18dc6:	2301      	movs	r3, #1
   18dc8:	2800      	cmp	r0, #0
   18dca:	d001      	beq.n	18dd0 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
   18dcc:	0018      	movs	r0, r3
   18dce:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   18dd0:	4b01      	ldr	r3, [pc, #4]	; (18dd8 <mem_test_unit_ready+0x14>)
   18dd2:	4798      	blx	r3
   18dd4:	0003      	movs	r3, r0
   18dd6:	e7f9      	b.n	18dcc <mem_test_unit_ready+0x8>
   18dd8:	000151a5 	.word	0x000151a5

00018ddc <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   18ddc:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   18dde:	2301      	movs	r3, #1
   18de0:	2800      	cmp	r0, #0
   18de2:	d001      	beq.n	18de8 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
   18de4:	0018      	movs	r0, r3
   18de6:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   18de8:	0008      	movs	r0, r1
   18dea:	4b02      	ldr	r3, [pc, #8]	; (18df4 <mem_read_capacity+0x18>)
   18dec:	4798      	blx	r3
   18dee:	0003      	movs	r3, r0
   18df0:	e7f8      	b.n	18de4 <mem_read_capacity+0x8>
   18df2:	46c0      	nop			; (mov r8, r8)
   18df4:	000151d5 	.word	0x000151d5

00018df8 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   18df8:	4243      	negs	r3, r0
   18dfa:	4158      	adcs	r0, r3
   18dfc:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
   18dfe:	4770      	bx	lr

00018e00 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   18e00:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   18e02:	2301      	movs	r3, #1
   18e04:	2800      	cmp	r0, #0
   18e06:	d001      	beq.n	18e0c <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
   18e08:	0018      	movs	r0, r3
   18e0a:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   18e0c:	4b01      	ldr	r3, [pc, #4]	; (18e14 <mem_wr_protect+0x14>)
   18e0e:	4798      	blx	r3
   18e10:	0003      	movs	r3, r0
   18e12:	e7f9      	b.n	18e08 <mem_wr_protect+0x8>
   18e14:	000151e5 	.word	0x000151e5

00018e18 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   18e18:	b510      	push	{r4, lr}
   18e1a:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   18e1c:	2301      	movs	r3, #1
   18e1e:	2800      	cmp	r0, #0
   18e20:	d001      	beq.n	18e26 <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
   18e22:	0018      	movs	r0, r3
   18e24:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   18e26:	0011      	movs	r1, r2
   18e28:	0020      	movs	r0, r4
   18e2a:	4b02      	ldr	r3, [pc, #8]	; (18e34 <memory_2_ram+0x1c>)
   18e2c:	4798      	blx	r3
   18e2e:	0003      	movs	r3, r0
   18e30:	e7f7      	b.n	18e22 <memory_2_ram+0xa>
   18e32:	46c0      	nop			; (mov r8, r8)
   18e34:	00015239 	.word	0x00015239

00018e38 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   18e38:	b510      	push	{r4, lr}
   18e3a:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   18e3c:	2301      	movs	r3, #1
   18e3e:	2800      	cmp	r0, #0
   18e40:	d001      	beq.n	18e46 <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
   18e42:	0018      	movs	r0, r3
   18e44:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   18e46:	0011      	movs	r1, r2
   18e48:	0020      	movs	r0, r4
   18e4a:	4b02      	ldr	r3, [pc, #8]	; (18e54 <ram_2_memory+0x1c>)
   18e4c:	4798      	blx	r3
   18e4e:	0003      	movs	r3, r0
   18e50:	e7f7      	b.n	18e42 <ram_2_memory+0xa>
   18e52:	46c0      	nop			; (mov r8, r8)
   18e54:	00015291 	.word	0x00015291

00018e58 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   18e58:	4b0c      	ldr	r3, [pc, #48]	; (18e8c <cpu_irq_enter_critical+0x34>)
   18e5a:	681b      	ldr	r3, [r3, #0]
   18e5c:	2b00      	cmp	r3, #0
   18e5e:	d106      	bne.n	18e6e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18e60:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   18e64:	2b00      	cmp	r3, #0
   18e66:	d007      	beq.n	18e78 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   18e68:	2200      	movs	r2, #0
   18e6a:	4b09      	ldr	r3, [pc, #36]	; (18e90 <cpu_irq_enter_critical+0x38>)
   18e6c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   18e6e:	4a07      	ldr	r2, [pc, #28]	; (18e8c <cpu_irq_enter_critical+0x34>)
   18e70:	6813      	ldr	r3, [r2, #0]
   18e72:	3301      	adds	r3, #1
   18e74:	6013      	str	r3, [r2, #0]
}
   18e76:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
   18e78:	b672      	cpsid	i
   18e7a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   18e7e:	2200      	movs	r2, #0
   18e80:	4b04      	ldr	r3, [pc, #16]	; (18e94 <cpu_irq_enter_critical+0x3c>)
   18e82:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   18e84:	3201      	adds	r2, #1
   18e86:	4b02      	ldr	r3, [pc, #8]	; (18e90 <cpu_irq_enter_critical+0x38>)
   18e88:	701a      	strb	r2, [r3, #0]
   18e8a:	e7f0      	b.n	18e6e <cpu_irq_enter_critical+0x16>
   18e8c:	200032f8 	.word	0x200032f8
   18e90:	200032fc 	.word	0x200032fc
   18e94:	200000a2 	.word	0x200000a2

00018e98 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   18e98:	4b08      	ldr	r3, [pc, #32]	; (18ebc <cpu_irq_leave_critical+0x24>)
   18e9a:	681a      	ldr	r2, [r3, #0]
   18e9c:	3a01      	subs	r2, #1
   18e9e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   18ea0:	681b      	ldr	r3, [r3, #0]
   18ea2:	2b00      	cmp	r3, #0
   18ea4:	d109      	bne.n	18eba <cpu_irq_leave_critical+0x22>
   18ea6:	4b06      	ldr	r3, [pc, #24]	; (18ec0 <cpu_irq_leave_critical+0x28>)
   18ea8:	781b      	ldrb	r3, [r3, #0]
   18eaa:	2b00      	cmp	r3, #0
   18eac:	d005      	beq.n	18eba <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
   18eae:	2201      	movs	r2, #1
   18eb0:	4b04      	ldr	r3, [pc, #16]	; (18ec4 <cpu_irq_leave_critical+0x2c>)
   18eb2:	701a      	strb	r2, [r3, #0]
   18eb4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   18eb8:	b662      	cpsie	i
	}
}
   18eba:	4770      	bx	lr
   18ebc:	200032f8 	.word	0x200032f8
   18ec0:	200032fc 	.word	0x200032fc
   18ec4:	200000a2 	.word	0x200000a2

00018ec8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   18ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
   18eca:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
   18ecc:	ac01      	add	r4, sp, #4
   18ece:	2501      	movs	r5, #1
   18ed0:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
   18ed2:	2700      	movs	r7, #0
   18ed4:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   18ed6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   18ed8:	0021      	movs	r1, r4
   18eda:	2017      	movs	r0, #23
   18edc:	4e06      	ldr	r6, [pc, #24]	; (18ef8 <system_board_init+0x30>)
   18ede:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
   18ee0:	2280      	movs	r2, #128	; 0x80
   18ee2:	0412      	lsls	r2, r2, #16
   18ee4:	4b05      	ldr	r3, [pc, #20]	; (18efc <system_board_init+0x34>)
   18ee6:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   18ee8:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   18eea:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   18eec:	0021      	movs	r1, r4
   18eee:	2037      	movs	r0, #55	; 0x37
   18ef0:	47b0      	blx	r6
}
   18ef2:	b003      	add	sp, #12
   18ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18ef6:	46c0      	nop			; (mov r8, r8)
   18ef8:	000190d1 	.word	0x000190d1
   18efc:	41004400 	.word	0x41004400

00018f00 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   18f00:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   18f02:	2a00      	cmp	r2, #0
   18f04:	d001      	beq.n	18f0a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
   18f06:	0018      	movs	r0, r3
   18f08:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
   18f0a:	008b      	lsls	r3, r1, #2
   18f0c:	4a06      	ldr	r2, [pc, #24]	; (18f28 <extint_register_callback+0x28>)
   18f0e:	589b      	ldr	r3, [r3, r2]
   18f10:	2b00      	cmp	r3, #0
   18f12:	d003      	beq.n	18f1c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
   18f14:	4283      	cmp	r3, r0
   18f16:	d005      	beq.n	18f24 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
   18f18:	231d      	movs	r3, #29
   18f1a:	e7f4      	b.n	18f06 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
   18f1c:	0089      	lsls	r1, r1, #2
   18f1e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
   18f20:	2300      	movs	r3, #0
   18f22:	e7f0      	b.n	18f06 <extint_register_callback+0x6>
		return STATUS_OK;
   18f24:	2300      	movs	r3, #0
   18f26:	e7ee      	b.n	18f06 <extint_register_callback+0x6>
   18f28:	20003e88 	.word	0x20003e88

00018f2c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   18f2c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   18f2e:	2900      	cmp	r1, #0
   18f30:	d001      	beq.n	18f36 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
   18f32:	0018      	movs	r0, r3
   18f34:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
   18f36:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
   18f38:	281f      	cmp	r0, #31
   18f3a:	d800      	bhi.n	18f3e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
   18f3c:	4a02      	ldr	r2, [pc, #8]	; (18f48 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
   18f3e:	2301      	movs	r3, #1
   18f40:	4083      	lsls	r3, r0
   18f42:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
   18f44:	2300      	movs	r3, #0
   18f46:	e7f4      	b.n	18f32 <extint_chan_enable_callback+0x6>
   18f48:	40001800 	.word	0x40001800

00018f4c <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   18f4c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   18f4e:	2900      	cmp	r1, #0
   18f50:	d001      	beq.n	18f56 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
   18f52:	0018      	movs	r0, r3
   18f54:	4770      	bx	lr
		return NULL;
   18f56:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
   18f58:	281f      	cmp	r0, #31
   18f5a:	d800      	bhi.n	18f5e <extint_chan_disable_callback+0x12>
		return eics[eic_index];
   18f5c:	4a02      	ldr	r2, [pc, #8]	; (18f68 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
   18f5e:	2301      	movs	r3, #1
   18f60:	4083      	lsls	r3, r0
   18f62:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
   18f64:	2300      	movs	r3, #0
   18f66:	e7f4      	b.n	18f52 <extint_chan_disable_callback+0x6>
   18f68:	40001800 	.word	0x40001800

00018f6c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   18f6c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   18f6e:	2200      	movs	r2, #0
   18f70:	4b10      	ldr	r3, [pc, #64]	; (18fb4 <EIC_Handler+0x48>)
   18f72:	701a      	strb	r2, [r3, #0]
   18f74:	2300      	movs	r3, #0
   18f76:	4910      	ldr	r1, [pc, #64]	; (18fb8 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
   18f78:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   18f7a:	4e10      	ldr	r6, [pc, #64]	; (18fbc <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   18f7c:	4c0d      	ldr	r4, [pc, #52]	; (18fb4 <EIC_Handler+0x48>)
   18f7e:	e00a      	b.n	18f96 <EIC_Handler+0x2a>
		return eics[eic_index];
   18f80:	490d      	ldr	r1, [pc, #52]	; (18fb8 <EIC_Handler+0x4c>)
   18f82:	e008      	b.n	18f96 <EIC_Handler+0x2a>
   18f84:	7823      	ldrb	r3, [r4, #0]
   18f86:	3301      	adds	r3, #1
   18f88:	b2db      	uxtb	r3, r3
   18f8a:	7023      	strb	r3, [r4, #0]
   18f8c:	2b0f      	cmp	r3, #15
   18f8e:	d810      	bhi.n	18fb2 <EIC_Handler+0x46>
		return NULL;
   18f90:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
   18f92:	2b1f      	cmp	r3, #31
   18f94:	d9f4      	bls.n	18f80 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
   18f96:	0028      	movs	r0, r5
   18f98:	4018      	ands	r0, r3
   18f9a:	2201      	movs	r2, #1
   18f9c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
   18f9e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
   18fa0:	4210      	tst	r0, r2
   18fa2:	d0ef      	beq.n	18f84 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
   18fa4:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   18fa6:	009b      	lsls	r3, r3, #2
   18fa8:	599b      	ldr	r3, [r3, r6]
   18faa:	2b00      	cmp	r3, #0
   18fac:	d0ea      	beq.n	18f84 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   18fae:	4798      	blx	r3
   18fb0:	e7e8      	b.n	18f84 <EIC_Handler+0x18>
			}
		}
	}
}
   18fb2:	bd70      	pop	{r4, r5, r6, pc}
   18fb4:	20003e84 	.word	0x20003e84
   18fb8:	40001800 	.word	0x40001800
   18fbc:	20003e88 	.word	0x20003e88

00018fc0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   18fc0:	4a04      	ldr	r2, [pc, #16]	; (18fd4 <_extint_enable+0x14>)
   18fc2:	7813      	ldrb	r3, [r2, #0]
   18fc4:	2102      	movs	r1, #2
   18fc6:	430b      	orrs	r3, r1
   18fc8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   18fca:	7853      	ldrb	r3, [r2, #1]
   18fcc:	b25b      	sxtb	r3, r3
   18fce:	2b00      	cmp	r3, #0
   18fd0:	dbfb      	blt.n	18fca <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
   18fd2:	4770      	bx	lr
   18fd4:	40001800 	.word	0x40001800

00018fd8 <_system_extint_init>:
{
   18fd8:	b500      	push	{lr}
   18fda:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   18fdc:	4a12      	ldr	r2, [pc, #72]	; (19028 <_system_extint_init+0x50>)
   18fde:	6993      	ldr	r3, [r2, #24]
   18fe0:	2140      	movs	r1, #64	; 0x40
   18fe2:	430b      	orrs	r3, r1
   18fe4:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   18fe6:	a901      	add	r1, sp, #4
   18fe8:	2300      	movs	r3, #0
   18fea:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   18fec:	2005      	movs	r0, #5
   18fee:	4b0f      	ldr	r3, [pc, #60]	; (1902c <_system_extint_init+0x54>)
   18ff0:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
   18ff2:	2005      	movs	r0, #5
   18ff4:	4b0e      	ldr	r3, [pc, #56]	; (19030 <_system_extint_init+0x58>)
   18ff6:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   18ff8:	4a0e      	ldr	r2, [pc, #56]	; (19034 <_system_extint_init+0x5c>)
   18ffa:	7813      	ldrb	r3, [r2, #0]
   18ffc:	2101      	movs	r1, #1
   18ffe:	430b      	orrs	r3, r1
   19000:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   19002:	7853      	ldrb	r3, [r2, #1]
   19004:	b25b      	sxtb	r3, r3
   19006:	2b00      	cmp	r3, #0
   19008:	dbfb      	blt.n	19002 <_system_extint_init+0x2a>
   1900a:	4b0b      	ldr	r3, [pc, #44]	; (19038 <_system_extint_init+0x60>)
   1900c:	0019      	movs	r1, r3
   1900e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
   19010:	2200      	movs	r2, #0
   19012:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   19014:	4299      	cmp	r1, r3
   19016:	d1fc      	bne.n	19012 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   19018:	2210      	movs	r2, #16
   1901a:	4b08      	ldr	r3, [pc, #32]	; (1903c <_system_extint_init+0x64>)
   1901c:	601a      	str	r2, [r3, #0]
	_extint_enable();
   1901e:	4b08      	ldr	r3, [pc, #32]	; (19040 <_system_extint_init+0x68>)
   19020:	4798      	blx	r3
}
   19022:	b003      	add	sp, #12
   19024:	bd00      	pop	{pc}
   19026:	46c0      	nop			; (mov r8, r8)
   19028:	40000400 	.word	0x40000400
   1902c:	0001a9f1 	.word	0x0001a9f1
   19030:	0001a965 	.word	0x0001a965
   19034:	40001800 	.word	0x40001800
   19038:	20003e88 	.word	0x20003e88
   1903c:	e000e100 	.word	0xe000e100
   19040:	00018fc1 	.word	0x00018fc1

00019044 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   19044:	2300      	movs	r3, #0
   19046:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
   19048:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   1904a:	2201      	movs	r2, #1
   1904c:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
   1904e:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
   19050:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   19052:	3302      	adds	r3, #2
   19054:	72c3      	strb	r3, [r0, #11]
}
   19056:	4770      	bx	lr

00019058 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   19058:	b5f0      	push	{r4, r5, r6, r7, lr}
   1905a:	b083      	sub	sp, #12
   1905c:	0005      	movs	r5, r0
   1905e:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   19060:	a901      	add	r1, sp, #4
   19062:	2300      	movs	r3, #0
   19064:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
   19066:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
   19068:	7923      	ldrb	r3, [r4, #4]
   1906a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   1906c:	7a23      	ldrb	r3, [r4, #8]
   1906e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   19070:	7820      	ldrb	r0, [r4, #0]
   19072:	4b15      	ldr	r3, [pc, #84]	; (190c8 <extint_chan_set_config+0x70>)
   19074:	4798      	blx	r3
		return NULL;
   19076:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
   19078:	2d1f      	cmp	r5, #31
   1907a:	d800      	bhi.n	1907e <extint_chan_set_config+0x26>
		return eics[eic_index];
   1907c:	4813      	ldr	r0, [pc, #76]	; (190cc <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
   1907e:	2207      	movs	r2, #7
   19080:	402a      	ands	r2, r5
   19082:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   19084:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   19086:	7aa3      	ldrb	r3, [r4, #10]
   19088:	2b00      	cmp	r3, #0
   1908a:	d001      	beq.n	19090 <extint_chan_set_config+0x38>
   1908c:	2308      	movs	r3, #8
   1908e:	431f      	orrs	r7, r3
   19090:	08eb      	lsrs	r3, r5, #3
   19092:	009b      	lsls	r3, r3, #2
   19094:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
   19096:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   19098:	260f      	movs	r6, #15
   1909a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1909c:	43b1      	bics	r1, r6
			(new_config << config_pos);
   1909e:	4097      	lsls	r7, r2
   190a0:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   190a2:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
   190a4:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   190a6:	7a63      	ldrb	r3, [r4, #9]
   190a8:	2b00      	cmp	r3, #0
   190aa:	d106      	bne.n	190ba <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   190ac:	6943      	ldr	r3, [r0, #20]
   190ae:	2201      	movs	r2, #1
   190b0:	40aa      	lsls	r2, r5
   190b2:	4393      	bics	r3, r2
   190b4:	6143      	str	r3, [r0, #20]
	}
}
   190b6:	b003      	add	sp, #12
   190b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   190ba:	6942      	ldr	r2, [r0, #20]
   190bc:	2301      	movs	r3, #1
   190be:	40ab      	lsls	r3, r5
   190c0:	4313      	orrs	r3, r2
   190c2:	6143      	str	r3, [r0, #20]
   190c4:	e7f7      	b.n	190b6 <extint_chan_set_config+0x5e>
   190c6:	46c0      	nop			; (mov r8, r8)
   190c8:	0001aae9 	.word	0x0001aae9
   190cc:	40001800 	.word	0x40001800

000190d0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   190d0:	b500      	push	{lr}
   190d2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
   190d4:	ab01      	add	r3, sp, #4
   190d6:	2280      	movs	r2, #128	; 0x80
   190d8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   190da:	780a      	ldrb	r2, [r1, #0]
   190dc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   190de:	784a      	ldrb	r2, [r1, #1]
   190e0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   190e2:	788a      	ldrb	r2, [r1, #2]
   190e4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   190e6:	0019      	movs	r1, r3
   190e8:	4b01      	ldr	r3, [pc, #4]	; (190f0 <port_pin_set_config+0x20>)
   190ea:	4798      	blx	r3
}
   190ec:	b003      	add	sp, #12
   190ee:	bd00      	pop	{pc}
   190f0:	0001aae9 	.word	0x0001aae9

000190f4 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   190f4:	6801      	ldr	r1, [r0, #0]
   190f6:	2208      	movs	r2, #8
   190f8:	4b05      	ldr	r3, [pc, #20]	; (19110 <rtc_calendar_enable+0x1c>)
   190fa:	601a      	str	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
   190fc:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   190fe:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
   19100:	b25b      	sxtb	r3, r3
   19102:	2b00      	cmp	r3, #0
   19104:	dbfb      	blt.n	190fe <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   19106:	880b      	ldrh	r3, [r1, #0]
   19108:	2202      	movs	r2, #2
   1910a:	4313      	orrs	r3, r2
   1910c:	800b      	strh	r3, [r1, #0]
}
   1910e:	4770      	bx	lr
   19110:	e000e100 	.word	0xe000e100

00019114 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   19114:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   19116:	6802      	ldr	r2, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   19118:	2408      	movs	r4, #8
   1911a:	2380      	movs	r3, #128	; 0x80
   1911c:	4907      	ldr	r1, [pc, #28]	; (1913c <rtc_calendar_disable+0x28>)
   1911e:	50cc      	str	r4, [r1, r3]
	Rtc *const rtc_module = module->hw;
   19120:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   19122:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
   19124:	b25b      	sxtb	r3, r3
   19126:	2b00      	cmp	r3, #0
   19128:	dbfb      	blt.n	19122 <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   1912a:	23c1      	movs	r3, #193	; 0xc1
   1912c:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   1912e:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   19130:	8813      	ldrh	r3, [r2, #0]
   19132:	2102      	movs	r1, #2
   19134:	438b      	bics	r3, r1
   19136:	8013      	strh	r3, [r2, #0]
}
   19138:	bd10      	pop	{r4, pc}
   1913a:	46c0      	nop			; (mov r8, r8)
   1913c:	e000e100 	.word	0xe000e100

00019140 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   19140:	b570      	push	{r4, r5, r6, lr}
   19142:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   19144:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   19146:	4b07      	ldr	r3, [pc, #28]	; (19164 <rtc_calendar_reset+0x24>)
   19148:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   1914a:	2300      	movs	r3, #0
   1914c:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
   1914e:	8263      	strh	r3, [r4, #18]
	Rtc *const rtc_module = module->hw;
   19150:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   19152:	7a93      	ldrb	r3, [r2, #10]
#endif

	while (rtc_calendar_is_syncing(module)) {
   19154:	b25b      	sxtb	r3, r3
   19156:	2b00      	cmp	r3, #0
   19158:	dbfb      	blt.n	19152 <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   1915a:	882b      	ldrh	r3, [r5, #0]
   1915c:	2201      	movs	r2, #1
   1915e:	4313      	orrs	r3, r2
   19160:	802b      	strh	r3, [r5, #0]
}
   19162:	bd70      	pop	{r4, r5, r6, pc}
   19164:	00019115 	.word	0x00019115

00019168 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   19168:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   1916a:	88cb      	ldrh	r3, [r1, #6]
   1916c:	88c2      	ldrh	r2, [r0, #6]
   1916e:	1a9a      	subs	r2, r3, r2
   19170:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   19172:	794b      	ldrb	r3, [r1, #5]
   19174:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   19176:	790c      	ldrb	r4, [r1, #4]
   19178:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   1917a:	4323      	orrs	r3, r4
   1917c:	788c      	ldrb	r4, [r1, #2]
   1917e:	0324      	lsls	r4, r4, #12
   19180:	4323      	orrs	r3, r4
   19182:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   19184:	7902      	ldrb	r2, [r0, #4]
   19186:	2a00      	cmp	r2, #0
   19188:	d105      	bne.n	19196 <rtc_calendar_time_to_register_value+0x2e>
   1918a:	78ca      	ldrb	r2, [r1, #3]
   1918c:	2a00      	cmp	r2, #0
   1918e:	d002      	beq.n	19196 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   19190:	2280      	movs	r2, #128	; 0x80
   19192:	0252      	lsls	r2, r2, #9
   19194:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   19196:	7848      	ldrb	r0, [r1, #1]
   19198:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   1919a:	780a      	ldrb	r2, [r1, #0]
   1919c:	4310      	orrs	r0, r2
   1919e:	4318      	orrs	r0, r3

	return register_value;
}
   191a0:	bd10      	pop	{r4, pc}

000191a2 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   191a2:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   191a4:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   191a6:	88c4      	ldrh	r4, [r0, #6]
   191a8:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   191aa:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   191ac:	018b      	lsls	r3, r1, #6
   191ae:	0f1b      	lsrs	r3, r3, #28
   191b0:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   191b2:	028b      	lsls	r3, r1, #10
   191b4:	0edb      	lsrs	r3, r3, #27
   191b6:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   191b8:	7903      	ldrb	r3, [r0, #4]
   191ba:	2b00      	cmp	r3, #0
   191bc:	d10c      	bne.n	191d8 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   191be:	040b      	lsls	r3, r1, #16
   191c0:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
   191c2:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   191c4:	03cb      	lsls	r3, r1, #15
   191c6:	0fdb      	lsrs	r3, r3, #31
   191c8:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   191ca:	0988      	lsrs	r0, r1, #6
   191cc:	233f      	movs	r3, #63	; 0x3f
   191ce:	4018      	ands	r0, r3
   191d0:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   191d2:	4019      	ands	r1, r3
   191d4:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   191d6:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   191d8:	03cb      	lsls	r3, r1, #15
   191da:	0edb      	lsrs	r3, r3, #27
   191dc:	7093      	strb	r3, [r2, #2]
   191de:	e7f4      	b.n	191ca <rtc_calendar_register_value_to_time+0x28>

000191e0 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   191e0:	b510      	push	{r4, lr}
   191e2:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   191e4:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   191e6:	7941      	ldrb	r1, [r0, #5]
   191e8:	2900      	cmp	r1, #0
   191ea:	d006      	beq.n	191fa <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   191ec:	8859      	ldrh	r1, [r3, #2]
   191ee:	0449      	lsls	r1, r1, #17
   191f0:	d50b      	bpl.n	1920a <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   191f2:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   191f4:	4b0a      	ldr	r3, [pc, #40]	; (19220 <rtc_calendar_get_time+0x40>)
   191f6:	4798      	blx	r3
}
   191f8:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   191fa:	490a      	ldr	r1, [pc, #40]	; (19224 <rtc_calendar_get_time+0x44>)
   191fc:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
   191fe:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   19200:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
   19202:	b249      	sxtb	r1, r1
   19204:	2900      	cmp	r1, #0
   19206:	dbfb      	blt.n	19200 <rtc_calendar_get_time+0x20>
   19208:	e7f3      	b.n	191f2 <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   1920a:	8859      	ldrh	r1, [r3, #2]
   1920c:	24c0      	movs	r4, #192	; 0xc0
   1920e:	0224      	lsls	r4, r4, #8
   19210:	4321      	orrs	r1, r4
   19212:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
   19214:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   19216:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
   19218:	b249      	sxtb	r1, r1
   1921a:	2900      	cmp	r1, #0
   1921c:	dbfb      	blt.n	19216 <rtc_calendar_get_time+0x36>
   1921e:	e7e8      	b.n	191f2 <rtc_calendar_get_time+0x12>
   19220:	000191a3 	.word	0x000191a3
   19224:	ffff8000 	.word	0xffff8000

00019228 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   19228:	b570      	push	{r4, r5, r6, lr}
   1922a:	000d      	movs	r5, r1
   1922c:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
   1922e:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   19230:	2a01      	cmp	r2, #1
   19232:	d901      	bls.n	19238 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
   19234:	0018      	movs	r0, r3
   19236:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
   19238:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   1923a:	4b06      	ldr	r3, [pc, #24]	; (19254 <rtc_calendar_set_alarm+0x2c>)
   1923c:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1923e:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
   19240:	b25b      	sxtb	r3, r3
   19242:	2b00      	cmp	r3, #0
   19244:	dbfb      	blt.n	1923e <rtc_calendar_set_alarm+0x16>
   19246:	00e4      	lsls	r4, r4, #3
   19248:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   1924a:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   1924c:	7a2b      	ldrb	r3, [r5, #8]
   1924e:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
   19250:	2300      	movs	r3, #0
   19252:	e7ef      	b.n	19234 <rtc_calendar_set_alarm+0xc>
   19254:	00019169 	.word	0x00019169

00019258 <rtc_calendar_init>:
{
   19258:	b530      	push	{r4, r5, lr}
   1925a:	b083      	sub	sp, #12
   1925c:	0005      	movs	r5, r0
   1925e:	0014      	movs	r4, r2
	module->hw = hw;
   19260:	6001      	str	r1, [r0, #0]
   19262:	4a1c      	ldr	r2, [pc, #112]	; (192d4 <rtc_calendar_init+0x7c>)
   19264:	6993      	ldr	r3, [r2, #24]
   19266:	2120      	movs	r1, #32
   19268:	430b      	orrs	r3, r1
   1926a:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   1926c:	a901      	add	r1, sp, #4
   1926e:	2302      	movs	r3, #2
   19270:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   19272:	2004      	movs	r0, #4
   19274:	4b18      	ldr	r3, [pc, #96]	; (192d8 <rtc_calendar_init+0x80>)
   19276:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   19278:	2004      	movs	r0, #4
   1927a:	4b18      	ldr	r3, [pc, #96]	; (192dc <rtc_calendar_init+0x84>)
   1927c:	4798      	blx	r3
	rtc_calendar_reset(module);
   1927e:	0028      	movs	r0, r5
   19280:	4b17      	ldr	r3, [pc, #92]	; (192e0 <rtc_calendar_init+0x88>)
   19282:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
   19284:	7923      	ldrb	r3, [r4, #4]
   19286:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
   19288:	78e3      	ldrb	r3, [r4, #3]
   1928a:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
   1928c:	88e3      	ldrh	r3, [r4, #6]
   1928e:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
   19290:	4b14      	ldr	r3, [pc, #80]	; (192e4 <rtc_calendar_init+0x8c>)
   19292:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
   19294:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   19296:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
   19298:	7921      	ldrb	r1, [r4, #4]
   1929a:	2900      	cmp	r1, #0
   1929c:	d017      	beq.n	192ce <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   1929e:	2108      	movs	r1, #8
   192a0:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
   192a2:	78a1      	ldrb	r1, [r4, #2]
   192a4:	2900      	cmp	r1, #0
   192a6:	d001      	beq.n	192ac <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   192a8:	2180      	movs	r1, #128	; 0x80
   192aa:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   192ac:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
   192ae:	78e3      	ldrb	r3, [r4, #3]
   192b0:	2b00      	cmp	r3, #0
   192b2:	d004      	beq.n	192be <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   192b4:	8853      	ldrh	r3, [r2, #2]
   192b6:	2180      	movs	r1, #128	; 0x80
   192b8:	01c9      	lsls	r1, r1, #7
   192ba:	430b      	orrs	r3, r1
   192bc:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   192be:	0021      	movs	r1, r4
   192c0:	3108      	adds	r1, #8
   192c2:	2200      	movs	r2, #0
   192c4:	0028      	movs	r0, r5
   192c6:	4b08      	ldr	r3, [pc, #32]	; (192e8 <rtc_calendar_init+0x90>)
   192c8:	4798      	blx	r3
}
   192ca:	b003      	add	sp, #12
   192cc:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   192ce:	2148      	movs	r1, #72	; 0x48
   192d0:	430b      	orrs	r3, r1
   192d2:	e7e6      	b.n	192a2 <rtc_calendar_init+0x4a>
   192d4:	40000400 	.word	0x40000400
   192d8:	0001a9f1 	.word	0x0001a9f1
   192dc:	0001a965 	.word	0x0001a965
   192e0:	00019141 	.word	0x00019141
   192e4:	20003ec8 	.word	0x20003ec8
   192e8:	00019229 	.word	0x00019229

000192ec <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   192ec:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
   192ee:	4b0f      	ldr	r3, [pc, #60]	; (1932c <RTC_Handler+0x40>)
   192f0:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
   192f2:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
   192f4:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
   192f6:	8a13      	ldrh	r3, [r2, #16]
   192f8:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   192fa:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   192fc:	79e3      	ldrb	r3, [r4, #7]
   192fe:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   19300:	b258      	sxtb	r0, r3
   19302:	2800      	cmp	r0, #0
   19304:	db06      	blt.n	19314 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   19306:	07db      	lsls	r3, r3, #31
   19308:	d503      	bpl.n	19312 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   1930a:	07cb      	lsls	r3, r1, #31
   1930c:	d40a      	bmi.n	19324 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   1930e:	2301      	movs	r3, #1
   19310:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
   19312:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   19314:	078b      	lsls	r3, r1, #30
   19316:	d402      	bmi.n	1931e <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   19318:	2380      	movs	r3, #128	; 0x80
   1931a:	7223      	strb	r3, [r4, #8]
   1931c:	e7f9      	b.n	19312 <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   1931e:	68d3      	ldr	r3, [r2, #12]
   19320:	4798      	blx	r3
   19322:	e7f9      	b.n	19318 <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   19324:	6893      	ldr	r3, [r2, #8]
   19326:	4798      	blx	r3
   19328:	e7f1      	b.n	1930e <RTC_Handler+0x22>
   1932a:	46c0      	nop			; (mov r8, r8)
   1932c:	20003ec8 	.word	0x20003ec8

00019330 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   19330:	b5f0      	push	{r4, r5, r6, r7, lr}
   19332:	46de      	mov	lr, fp
   19334:	4657      	mov	r7, sl
   19336:	464e      	mov	r6, r9
   19338:	4645      	mov	r5, r8
   1933a:	b5e0      	push	{r5, r6, r7, lr}
   1933c:	b087      	sub	sp, #28
   1933e:	4680      	mov	r8, r0
   19340:	9104      	str	r1, [sp, #16]
   19342:	0016      	movs	r6, r2
   19344:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   19346:	2200      	movs	r2, #0
   19348:	2300      	movs	r3, #0
   1934a:	2100      	movs	r1, #0
   1934c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
   1934e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
   19350:	2001      	movs	r0, #1
   19352:	0021      	movs	r1, r4
   19354:	9600      	str	r6, [sp, #0]
   19356:	9701      	str	r7, [sp, #4]
   19358:	465c      	mov	r4, fp
   1935a:	9403      	str	r4, [sp, #12]
   1935c:	4644      	mov	r4, r8
   1935e:	9405      	str	r4, [sp, #20]
   19360:	e013      	b.n	1938a <long_division+0x5a>
   19362:	2420      	movs	r4, #32
   19364:	1a64      	subs	r4, r4, r1
   19366:	0005      	movs	r5, r0
   19368:	40e5      	lsrs	r5, r4
   1936a:	46a8      	mov	r8, r5
   1936c:	e014      	b.n	19398 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
   1936e:	9c00      	ldr	r4, [sp, #0]
   19370:	9d01      	ldr	r5, [sp, #4]
   19372:	1b12      	subs	r2, r2, r4
   19374:	41ab      	sbcs	r3, r5
			q |= bit_shift;
   19376:	465c      	mov	r4, fp
   19378:	464d      	mov	r5, r9
   1937a:	432c      	orrs	r4, r5
   1937c:	46a3      	mov	fp, r4
   1937e:	9c03      	ldr	r4, [sp, #12]
   19380:	4645      	mov	r5, r8
   19382:	432c      	orrs	r4, r5
   19384:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
   19386:	3901      	subs	r1, #1
   19388:	d325      	bcc.n	193d6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
   1938a:	2420      	movs	r4, #32
   1938c:	4264      	negs	r4, r4
   1938e:	190c      	adds	r4, r1, r4
   19390:	d4e7      	bmi.n	19362 <long_division+0x32>
   19392:	0005      	movs	r5, r0
   19394:	40a5      	lsls	r5, r4
   19396:	46a8      	mov	r8, r5
   19398:	0004      	movs	r4, r0
   1939a:	408c      	lsls	r4, r1
   1939c:	46a1      	mov	r9, r4
		r = r << 1;
   1939e:	1892      	adds	r2, r2, r2
   193a0:	415b      	adcs	r3, r3
   193a2:	0014      	movs	r4, r2
   193a4:	001d      	movs	r5, r3
		if (n & bit_shift) {
   193a6:	9e05      	ldr	r6, [sp, #20]
   193a8:	464f      	mov	r7, r9
   193aa:	403e      	ands	r6, r7
   193ac:	46b4      	mov	ip, r6
   193ae:	9e04      	ldr	r6, [sp, #16]
   193b0:	4647      	mov	r7, r8
   193b2:	403e      	ands	r6, r7
   193b4:	46b2      	mov	sl, r6
   193b6:	4666      	mov	r6, ip
   193b8:	4657      	mov	r7, sl
   193ba:	433e      	orrs	r6, r7
   193bc:	d003      	beq.n	193c6 <long_division+0x96>
			r |= 0x01;
   193be:	0006      	movs	r6, r0
   193c0:	4326      	orrs	r6, r4
   193c2:	0032      	movs	r2, r6
   193c4:	002b      	movs	r3, r5
		if (r >= d) {
   193c6:	9c00      	ldr	r4, [sp, #0]
   193c8:	9d01      	ldr	r5, [sp, #4]
   193ca:	429d      	cmp	r5, r3
   193cc:	d8db      	bhi.n	19386 <long_division+0x56>
   193ce:	d1ce      	bne.n	1936e <long_division+0x3e>
   193d0:	4294      	cmp	r4, r2
   193d2:	d8d8      	bhi.n	19386 <long_division+0x56>
   193d4:	e7cb      	b.n	1936e <long_division+0x3e>
   193d6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
   193d8:	4658      	mov	r0, fp
   193da:	0019      	movs	r1, r3
   193dc:	b007      	add	sp, #28
   193de:	bc3c      	pop	{r2, r3, r4, r5}
   193e0:	4690      	mov	r8, r2
   193e2:	4699      	mov	r9, r3
   193e4:	46a2      	mov	sl, r4
   193e6:	46ab      	mov	fp, r5
   193e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000193ea <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   193ea:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   193ec:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   193ee:	2340      	movs	r3, #64	; 0x40
   193f0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
   193f2:	4281      	cmp	r1, r0
   193f4:	d202      	bcs.n	193fc <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
   193f6:	0018      	movs	r0, r3
   193f8:	bd10      	pop	{r4, pc}
		baud_calculated++;
   193fa:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
   193fc:	1a09      	subs	r1, r1, r0
		baud_calculated++;
   193fe:	1c63      	adds	r3, r4, #1
   19400:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
   19402:	4288      	cmp	r0, r1
   19404:	d9f9      	bls.n	193fa <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   19406:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
   19408:	2cff      	cmp	r4, #255	; 0xff
   1940a:	d8f4      	bhi.n	193f6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
   1940c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
   1940e:	2300      	movs	r3, #0
   19410:	e7f1      	b.n	193f6 <_sercom_get_sync_baud_val+0xc>
	...

00019414 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   19414:	b5f0      	push	{r4, r5, r6, r7, lr}
   19416:	b083      	sub	sp, #12
   19418:	000f      	movs	r7, r1
   1941a:	0016      	movs	r6, r2
   1941c:	aa08      	add	r2, sp, #32
   1941e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   19420:	0004      	movs	r4, r0
   19422:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   19424:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
   19426:	42bc      	cmp	r4, r7
   19428:	d902      	bls.n	19430 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
   1942a:	0010      	movs	r0, r2
   1942c:	b003      	add	sp, #12
   1942e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   19430:	2b00      	cmp	r3, #0
   19432:	d114      	bne.n	1945e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   19434:	0002      	movs	r2, r0
   19436:	0008      	movs	r0, r1
   19438:	2100      	movs	r1, #0
   1943a:	4c19      	ldr	r4, [pc, #100]	; (194a0 <_sercom_get_async_baud_val+0x8c>)
   1943c:	47a0      	blx	r4
   1943e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
   19440:	003a      	movs	r2, r7
   19442:	2300      	movs	r3, #0
   19444:	2000      	movs	r0, #0
   19446:	4c17      	ldr	r4, [pc, #92]	; (194a4 <_sercom_get_async_baud_val+0x90>)
   19448:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
   1944a:	2200      	movs	r2, #0
   1944c:	2301      	movs	r3, #1
   1944e:	1a12      	subs	r2, r2, r0
   19450:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
   19452:	0c12      	lsrs	r2, r2, #16
   19454:	041b      	lsls	r3, r3, #16
   19456:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
   19458:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
   1945a:	2200      	movs	r2, #0
   1945c:	e7e5      	b.n	1942a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
   1945e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   19460:	2b01      	cmp	r3, #1
   19462:	d1f9      	bne.n	19458 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
   19464:	000a      	movs	r2, r1
   19466:	2300      	movs	r3, #0
   19468:	2100      	movs	r1, #0
   1946a:	4c0d      	ldr	r4, [pc, #52]	; (194a0 <_sercom_get_async_baud_val+0x8c>)
   1946c:	47a0      	blx	r4
   1946e:	0002      	movs	r2, r0
   19470:	000b      	movs	r3, r1
   19472:	9200      	str	r2, [sp, #0]
   19474:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
   19476:	0038      	movs	r0, r7
   19478:	2100      	movs	r1, #0
   1947a:	4c0a      	ldr	r4, [pc, #40]	; (194a4 <_sercom_get_async_baud_val+0x90>)
   1947c:	47a0      	blx	r4
   1947e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
   19480:	2380      	movs	r3, #128	; 0x80
   19482:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   19484:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
   19486:	4298      	cmp	r0, r3
   19488:	d8cf      	bhi.n	1942a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   1948a:	0f79      	lsrs	r1, r7, #29
   1948c:	00f8      	lsls	r0, r7, #3
   1948e:	9a00      	ldr	r2, [sp, #0]
   19490:	9b01      	ldr	r3, [sp, #4]
   19492:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
   19494:	00ea      	lsls	r2, r5, #3
   19496:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
   19498:	b2d2      	uxtb	r2, r2
   1949a:	0352      	lsls	r2, r2, #13
   1949c:	432a      	orrs	r2, r5
   1949e:	e7db      	b.n	19458 <_sercom_get_async_baud_val+0x44>
   194a0:	0001fb15 	.word	0x0001fb15
   194a4:	00019331 	.word	0x00019331

000194a8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   194a8:	b510      	push	{r4, lr}
   194aa:	b082      	sub	sp, #8
   194ac:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   194ae:	4b0e      	ldr	r3, [pc, #56]	; (194e8 <sercom_set_gclk_generator+0x40>)
   194b0:	781b      	ldrb	r3, [r3, #0]
   194b2:	2b00      	cmp	r3, #0
   194b4:	d007      	beq.n	194c6 <sercom_set_gclk_generator+0x1e>
   194b6:	2900      	cmp	r1, #0
   194b8:	d105      	bne.n	194c6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
   194ba:	4b0b      	ldr	r3, [pc, #44]	; (194e8 <sercom_set_gclk_generator+0x40>)
   194bc:	785b      	ldrb	r3, [r3, #1]
   194be:	4283      	cmp	r3, r0
   194c0:	d010      	beq.n	194e4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   194c2:	201d      	movs	r0, #29
   194c4:	e00c      	b.n	194e0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
   194c6:	a901      	add	r1, sp, #4
   194c8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   194ca:	2013      	movs	r0, #19
   194cc:	4b07      	ldr	r3, [pc, #28]	; (194ec <sercom_set_gclk_generator+0x44>)
   194ce:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   194d0:	2013      	movs	r0, #19
   194d2:	4b07      	ldr	r3, [pc, #28]	; (194f0 <sercom_set_gclk_generator+0x48>)
   194d4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
   194d6:	4b04      	ldr	r3, [pc, #16]	; (194e8 <sercom_set_gclk_generator+0x40>)
   194d8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
   194da:	2201      	movs	r2, #1
   194dc:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
   194de:	2000      	movs	r0, #0
}
   194e0:	b002      	add	sp, #8
   194e2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
   194e4:	2000      	movs	r0, #0
   194e6:	e7fb      	b.n	194e0 <sercom_set_gclk_generator+0x38>
   194e8:	20003300 	.word	0x20003300
   194ec:	0001a9f1 	.word	0x0001a9f1
   194f0:	0001a965 	.word	0x0001a965

000194f4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
   194f4:	4b40      	ldr	r3, [pc, #256]	; (195f8 <_sercom_get_default_pad+0x104>)
   194f6:	4298      	cmp	r0, r3
   194f8:	d031      	beq.n	1955e <_sercom_get_default_pad+0x6a>
   194fa:	d90a      	bls.n	19512 <_sercom_get_default_pad+0x1e>
   194fc:	4b3f      	ldr	r3, [pc, #252]	; (195fc <_sercom_get_default_pad+0x108>)
   194fe:	4298      	cmp	r0, r3
   19500:	d04d      	beq.n	1959e <_sercom_get_default_pad+0xaa>
   19502:	4b3f      	ldr	r3, [pc, #252]	; (19600 <_sercom_get_default_pad+0x10c>)
   19504:	4298      	cmp	r0, r3
   19506:	d05a      	beq.n	195be <_sercom_get_default_pad+0xca>
   19508:	4b3e      	ldr	r3, [pc, #248]	; (19604 <_sercom_get_default_pad+0x110>)
   1950a:	4298      	cmp	r0, r3
   1950c:	d037      	beq.n	1957e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
   1950e:	2000      	movs	r0, #0
}
   19510:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
   19512:	4b3d      	ldr	r3, [pc, #244]	; (19608 <_sercom_get_default_pad+0x114>)
   19514:	4298      	cmp	r0, r3
   19516:	d00c      	beq.n	19532 <_sercom_get_default_pad+0x3e>
   19518:	4b3c      	ldr	r3, [pc, #240]	; (1960c <_sercom_get_default_pad+0x118>)
   1951a:	4298      	cmp	r0, r3
   1951c:	d1f7      	bne.n	1950e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1951e:	2901      	cmp	r1, #1
   19520:	d017      	beq.n	19552 <_sercom_get_default_pad+0x5e>
   19522:	2900      	cmp	r1, #0
   19524:	d05d      	beq.n	195e2 <_sercom_get_default_pad+0xee>
   19526:	2902      	cmp	r1, #2
   19528:	d015      	beq.n	19556 <_sercom_get_default_pad+0x62>
   1952a:	2903      	cmp	r1, #3
   1952c:	d015      	beq.n	1955a <_sercom_get_default_pad+0x66>
	return 0;
   1952e:	2000      	movs	r0, #0
   19530:	e7ee      	b.n	19510 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   19532:	2901      	cmp	r1, #1
   19534:	d007      	beq.n	19546 <_sercom_get_default_pad+0x52>
   19536:	2900      	cmp	r1, #0
   19538:	d051      	beq.n	195de <_sercom_get_default_pad+0xea>
   1953a:	2902      	cmp	r1, #2
   1953c:	d005      	beq.n	1954a <_sercom_get_default_pad+0x56>
   1953e:	2903      	cmp	r1, #3
   19540:	d005      	beq.n	1954e <_sercom_get_default_pad+0x5a>
	return 0;
   19542:	2000      	movs	r0, #0
   19544:	e7e4      	b.n	19510 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   19546:	4832      	ldr	r0, [pc, #200]	; (19610 <_sercom_get_default_pad+0x11c>)
   19548:	e7e2      	b.n	19510 <_sercom_get_default_pad+0x1c>
   1954a:	4832      	ldr	r0, [pc, #200]	; (19614 <_sercom_get_default_pad+0x120>)
   1954c:	e7e0      	b.n	19510 <_sercom_get_default_pad+0x1c>
   1954e:	4832      	ldr	r0, [pc, #200]	; (19618 <_sercom_get_default_pad+0x124>)
   19550:	e7de      	b.n	19510 <_sercom_get_default_pad+0x1c>
   19552:	4832      	ldr	r0, [pc, #200]	; (1961c <_sercom_get_default_pad+0x128>)
   19554:	e7dc      	b.n	19510 <_sercom_get_default_pad+0x1c>
   19556:	4832      	ldr	r0, [pc, #200]	; (19620 <_sercom_get_default_pad+0x12c>)
   19558:	e7da      	b.n	19510 <_sercom_get_default_pad+0x1c>
   1955a:	4832      	ldr	r0, [pc, #200]	; (19624 <_sercom_get_default_pad+0x130>)
   1955c:	e7d8      	b.n	19510 <_sercom_get_default_pad+0x1c>
   1955e:	2901      	cmp	r1, #1
   19560:	d007      	beq.n	19572 <_sercom_get_default_pad+0x7e>
   19562:	2900      	cmp	r1, #0
   19564:	d03f      	beq.n	195e6 <_sercom_get_default_pad+0xf2>
   19566:	2902      	cmp	r1, #2
   19568:	d005      	beq.n	19576 <_sercom_get_default_pad+0x82>
   1956a:	2903      	cmp	r1, #3
   1956c:	d005      	beq.n	1957a <_sercom_get_default_pad+0x86>
	return 0;
   1956e:	2000      	movs	r0, #0
   19570:	e7ce      	b.n	19510 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   19572:	482d      	ldr	r0, [pc, #180]	; (19628 <_sercom_get_default_pad+0x134>)
   19574:	e7cc      	b.n	19510 <_sercom_get_default_pad+0x1c>
   19576:	482d      	ldr	r0, [pc, #180]	; (1962c <_sercom_get_default_pad+0x138>)
   19578:	e7ca      	b.n	19510 <_sercom_get_default_pad+0x1c>
   1957a:	482d      	ldr	r0, [pc, #180]	; (19630 <_sercom_get_default_pad+0x13c>)
   1957c:	e7c8      	b.n	19510 <_sercom_get_default_pad+0x1c>
   1957e:	2901      	cmp	r1, #1
   19580:	d007      	beq.n	19592 <_sercom_get_default_pad+0x9e>
   19582:	2900      	cmp	r1, #0
   19584:	d031      	beq.n	195ea <_sercom_get_default_pad+0xf6>
   19586:	2902      	cmp	r1, #2
   19588:	d005      	beq.n	19596 <_sercom_get_default_pad+0xa2>
   1958a:	2903      	cmp	r1, #3
   1958c:	d005      	beq.n	1959a <_sercom_get_default_pad+0xa6>
	return 0;
   1958e:	2000      	movs	r0, #0
   19590:	e7be      	b.n	19510 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   19592:	4828      	ldr	r0, [pc, #160]	; (19634 <_sercom_get_default_pad+0x140>)
   19594:	e7bc      	b.n	19510 <_sercom_get_default_pad+0x1c>
   19596:	4828      	ldr	r0, [pc, #160]	; (19638 <_sercom_get_default_pad+0x144>)
   19598:	e7ba      	b.n	19510 <_sercom_get_default_pad+0x1c>
   1959a:	4828      	ldr	r0, [pc, #160]	; (1963c <_sercom_get_default_pad+0x148>)
   1959c:	e7b8      	b.n	19510 <_sercom_get_default_pad+0x1c>
   1959e:	2901      	cmp	r1, #1
   195a0:	d007      	beq.n	195b2 <_sercom_get_default_pad+0xbe>
   195a2:	2900      	cmp	r1, #0
   195a4:	d023      	beq.n	195ee <_sercom_get_default_pad+0xfa>
   195a6:	2902      	cmp	r1, #2
   195a8:	d005      	beq.n	195b6 <_sercom_get_default_pad+0xc2>
   195aa:	2903      	cmp	r1, #3
   195ac:	d005      	beq.n	195ba <_sercom_get_default_pad+0xc6>
	return 0;
   195ae:	2000      	movs	r0, #0
   195b0:	e7ae      	b.n	19510 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   195b2:	4823      	ldr	r0, [pc, #140]	; (19640 <_sercom_get_default_pad+0x14c>)
   195b4:	e7ac      	b.n	19510 <_sercom_get_default_pad+0x1c>
   195b6:	4823      	ldr	r0, [pc, #140]	; (19644 <_sercom_get_default_pad+0x150>)
   195b8:	e7aa      	b.n	19510 <_sercom_get_default_pad+0x1c>
   195ba:	4823      	ldr	r0, [pc, #140]	; (19648 <_sercom_get_default_pad+0x154>)
   195bc:	e7a8      	b.n	19510 <_sercom_get_default_pad+0x1c>
   195be:	2901      	cmp	r1, #1
   195c0:	d007      	beq.n	195d2 <_sercom_get_default_pad+0xde>
   195c2:	2900      	cmp	r1, #0
   195c4:	d015      	beq.n	195f2 <_sercom_get_default_pad+0xfe>
   195c6:	2902      	cmp	r1, #2
   195c8:	d005      	beq.n	195d6 <_sercom_get_default_pad+0xe2>
   195ca:	2903      	cmp	r1, #3
   195cc:	d005      	beq.n	195da <_sercom_get_default_pad+0xe6>
	return 0;
   195ce:	2000      	movs	r0, #0
   195d0:	e79e      	b.n	19510 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   195d2:	481e      	ldr	r0, [pc, #120]	; (1964c <_sercom_get_default_pad+0x158>)
   195d4:	e79c      	b.n	19510 <_sercom_get_default_pad+0x1c>
   195d6:	481e      	ldr	r0, [pc, #120]	; (19650 <_sercom_get_default_pad+0x15c>)
   195d8:	e79a      	b.n	19510 <_sercom_get_default_pad+0x1c>
   195da:	481e      	ldr	r0, [pc, #120]	; (19654 <_sercom_get_default_pad+0x160>)
   195dc:	e798      	b.n	19510 <_sercom_get_default_pad+0x1c>
   195de:	481e      	ldr	r0, [pc, #120]	; (19658 <_sercom_get_default_pad+0x164>)
   195e0:	e796      	b.n	19510 <_sercom_get_default_pad+0x1c>
   195e2:	2003      	movs	r0, #3
   195e4:	e794      	b.n	19510 <_sercom_get_default_pad+0x1c>
   195e6:	481d      	ldr	r0, [pc, #116]	; (1965c <_sercom_get_default_pad+0x168>)
   195e8:	e792      	b.n	19510 <_sercom_get_default_pad+0x1c>
   195ea:	481d      	ldr	r0, [pc, #116]	; (19660 <_sercom_get_default_pad+0x16c>)
   195ec:	e790      	b.n	19510 <_sercom_get_default_pad+0x1c>
   195ee:	481d      	ldr	r0, [pc, #116]	; (19664 <_sercom_get_default_pad+0x170>)
   195f0:	e78e      	b.n	19510 <_sercom_get_default_pad+0x1c>
   195f2:	481d      	ldr	r0, [pc, #116]	; (19668 <_sercom_get_default_pad+0x174>)
   195f4:	e78c      	b.n	19510 <_sercom_get_default_pad+0x1c>
   195f6:	46c0      	nop			; (mov r8, r8)
   195f8:	42001000 	.word	0x42001000
   195fc:	42001800 	.word	0x42001800
   19600:	42001c00 	.word	0x42001c00
   19604:	42001400 	.word	0x42001400
   19608:	42000800 	.word	0x42000800
   1960c:	42000c00 	.word	0x42000c00
   19610:	00050003 	.word	0x00050003
   19614:	00060003 	.word	0x00060003
   19618:	00070003 	.word	0x00070003
   1961c:	00010003 	.word	0x00010003
   19620:	001e0003 	.word	0x001e0003
   19624:	001f0003 	.word	0x001f0003
   19628:	00090003 	.word	0x00090003
   1962c:	000a0003 	.word	0x000a0003
   19630:	000b0003 	.word	0x000b0003
   19634:	00110003 	.word	0x00110003
   19638:	00120003 	.word	0x00120003
   1963c:	00130003 	.word	0x00130003
   19640:	000d0003 	.word	0x000d0003
   19644:	000e0003 	.word	0x000e0003
   19648:	000f0003 	.word	0x000f0003
   1964c:	00170003 	.word	0x00170003
   19650:	00180003 	.word	0x00180003
   19654:	00190003 	.word	0x00190003
   19658:	00040003 	.word	0x00040003
   1965c:	00080003 	.word	0x00080003
   19660:	00100003 	.word	0x00100003
   19664:	000c0003 	.word	0x000c0003
   19668:	00160003 	.word	0x00160003

0001966c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   1966c:	b530      	push	{r4, r5, lr}
   1966e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   19670:	4b0b      	ldr	r3, [pc, #44]	; (196a0 <_sercom_get_sercom_inst_index+0x34>)
   19672:	466a      	mov	r2, sp
   19674:	cb32      	ldmia	r3!, {r1, r4, r5}
   19676:	c232      	stmia	r2!, {r1, r4, r5}
   19678:	cb32      	ldmia	r3!, {r1, r4, r5}
   1967a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   1967c:	9b00      	ldr	r3, [sp, #0]
   1967e:	4283      	cmp	r3, r0
   19680:	d00b      	beq.n	1969a <_sercom_get_sercom_inst_index+0x2e>
   19682:	2301      	movs	r3, #1
   19684:	009a      	lsls	r2, r3, #2
   19686:	4669      	mov	r1, sp
   19688:	5852      	ldr	r2, [r2, r1]
   1968a:	4282      	cmp	r2, r0
   1968c:	d006      	beq.n	1969c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1968e:	3301      	adds	r3, #1
   19690:	2b06      	cmp	r3, #6
   19692:	d1f7      	bne.n	19684 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   19694:	2000      	movs	r0, #0
}
   19696:	b007      	add	sp, #28
   19698:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1969a:	2300      	movs	r3, #0
			return i;
   1969c:	b2d8      	uxtb	r0, r3
   1969e:	e7fa      	b.n	19696 <_sercom_get_sercom_inst_index+0x2a>
   196a0:	000227bc 	.word	0x000227bc

000196a4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
   196a4:	4770      	bx	lr
	...

000196a8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   196a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   196aa:	4b0a      	ldr	r3, [pc, #40]	; (196d4 <_sercom_set_handler+0x2c>)
   196ac:	781b      	ldrb	r3, [r3, #0]
   196ae:	2b00      	cmp	r3, #0
   196b0:	d10c      	bne.n	196cc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   196b2:	4f09      	ldr	r7, [pc, #36]	; (196d8 <_sercom_set_handler+0x30>)
   196b4:	4e09      	ldr	r6, [pc, #36]	; (196dc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
   196b6:	4d0a      	ldr	r5, [pc, #40]	; (196e0 <_sercom_set_handler+0x38>)
   196b8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   196ba:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
   196bc:	195a      	adds	r2, r3, r5
   196be:	6014      	str	r4, [r2, #0]
   196c0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   196c2:	2b18      	cmp	r3, #24
   196c4:	d1f9      	bne.n	196ba <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
   196c6:	2201      	movs	r2, #1
   196c8:	4b02      	ldr	r3, [pc, #8]	; (196d4 <_sercom_set_handler+0x2c>)
   196ca:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   196cc:	0080      	lsls	r0, r0, #2
   196ce:	4b02      	ldr	r3, [pc, #8]	; (196d8 <_sercom_set_handler+0x30>)
   196d0:	50c1      	str	r1, [r0, r3]
}
   196d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   196d4:	20003302 	.word	0x20003302
   196d8:	20003304 	.word	0x20003304
   196dc:	000196a5 	.word	0x000196a5
   196e0:	20003ecc 	.word	0x20003ecc

000196e4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   196e4:	b500      	push	{lr}
   196e6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   196e8:	2309      	movs	r3, #9
   196ea:	466a      	mov	r2, sp
   196ec:	7013      	strb	r3, [r2, #0]
   196ee:	3301      	adds	r3, #1
   196f0:	7053      	strb	r3, [r2, #1]
   196f2:	3301      	adds	r3, #1
   196f4:	7093      	strb	r3, [r2, #2]
   196f6:	3301      	adds	r3, #1
   196f8:	70d3      	strb	r3, [r2, #3]
   196fa:	3301      	adds	r3, #1
   196fc:	7113      	strb	r3, [r2, #4]
   196fe:	3301      	adds	r3, #1
   19700:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   19702:	4b03      	ldr	r3, [pc, #12]	; (19710 <_sercom_get_interrupt_vector+0x2c>)
   19704:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   19706:	466b      	mov	r3, sp
   19708:	5618      	ldrsb	r0, [r3, r0]
}
   1970a:	b003      	add	sp, #12
   1970c:	bd00      	pop	{pc}
   1970e:	46c0      	nop			; (mov r8, r8)
   19710:	0001966d 	.word	0x0001966d

00019714 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   19714:	b510      	push	{r4, lr}
   19716:	4b02      	ldr	r3, [pc, #8]	; (19720 <SERCOM0_Handler+0xc>)
   19718:	681b      	ldr	r3, [r3, #0]
   1971a:	2000      	movs	r0, #0
   1971c:	4798      	blx	r3
   1971e:	bd10      	pop	{r4, pc}
   19720:	20003304 	.word	0x20003304

00019724 <SERCOM1_Handler>:
   19724:	b510      	push	{r4, lr}
   19726:	4b02      	ldr	r3, [pc, #8]	; (19730 <SERCOM1_Handler+0xc>)
   19728:	685b      	ldr	r3, [r3, #4]
   1972a:	2001      	movs	r0, #1
   1972c:	4798      	blx	r3
   1972e:	bd10      	pop	{r4, pc}
   19730:	20003304 	.word	0x20003304

00019734 <SERCOM2_Handler>:
   19734:	b510      	push	{r4, lr}
   19736:	4b02      	ldr	r3, [pc, #8]	; (19740 <SERCOM2_Handler+0xc>)
   19738:	689b      	ldr	r3, [r3, #8]
   1973a:	2002      	movs	r0, #2
   1973c:	4798      	blx	r3
   1973e:	bd10      	pop	{r4, pc}
   19740:	20003304 	.word	0x20003304

00019744 <SERCOM3_Handler>:
   19744:	b510      	push	{r4, lr}
   19746:	4b02      	ldr	r3, [pc, #8]	; (19750 <SERCOM3_Handler+0xc>)
   19748:	68db      	ldr	r3, [r3, #12]
   1974a:	2003      	movs	r0, #3
   1974c:	4798      	blx	r3
   1974e:	bd10      	pop	{r4, pc}
   19750:	20003304 	.word	0x20003304

00019754 <SERCOM4_Handler>:
   19754:	b510      	push	{r4, lr}
   19756:	4b02      	ldr	r3, [pc, #8]	; (19760 <SERCOM4_Handler+0xc>)
   19758:	691b      	ldr	r3, [r3, #16]
   1975a:	2004      	movs	r0, #4
   1975c:	4798      	blx	r3
   1975e:	bd10      	pop	{r4, pc}
   19760:	20003304 	.word	0x20003304

00019764 <SERCOM5_Handler>:
   19764:	b510      	push	{r4, lr}
   19766:	4b02      	ldr	r3, [pc, #8]	; (19770 <SERCOM5_Handler+0xc>)
   19768:	695b      	ldr	r3, [r3, #20]
   1976a:	2005      	movs	r0, #5
   1976c:	4798      	blx	r3
   1976e:	bd10      	pop	{r4, pc}
   19770:	20003304 	.word	0x20003304

00019774 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   19774:	b570      	push	{r4, r5, r6, lr}
   19776:	b082      	sub	sp, #8
   19778:	0005      	movs	r5, r0
   1977a:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   1977c:	2200      	movs	r2, #0
   1977e:	466b      	mov	r3, sp
   19780:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
   19782:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   19784:	0030      	movs	r0, r6
   19786:	4b24      	ldr	r3, [pc, #144]	; (19818 <spi_set_baudrate+0xa4>)
   19788:	4798      	blx	r3
   1978a:	231f      	movs	r3, #31
   1978c:	4018      	ands	r0, r3
   1978e:	3b1e      	subs	r3, #30
   19790:	4083      	lsls	r3, r0
   19792:	2280      	movs	r2, #128	; 0x80
   19794:	4921      	ldr	r1, [pc, #132]	; (1981c <spi_set_baudrate+0xa8>)
   19796:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
   19798:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1979a:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1979c:	2b00      	cmp	r3, #0
   1979e:	d1fc      	bne.n	1979a <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   197a0:	338f      	adds	r3, #143	; 0x8f
   197a2:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   197a4:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   197a6:	6833      	ldr	r3, [r6, #0]
   197a8:	2202      	movs	r2, #2
   197aa:	4393      	bics	r3, r2
   197ac:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   197ae:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   197b0:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
   197b2:	2b00      	cmp	r3, #0
   197b4:	d1fc      	bne.n	197b0 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   197b6:	4b1a      	ldr	r3, [pc, #104]	; (19820 <spi_set_baudrate+0xac>)
   197b8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   197ba:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   197bc:	b2c0      	uxtb	r0, r0
   197be:	4b19      	ldr	r3, [pc, #100]	; (19824 <spi_set_baudrate+0xb0>)
   197c0:	4798      	blx	r3
   197c2:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   197c4:	466b      	mov	r3, sp
   197c6:	1d9a      	adds	r2, r3, #6
   197c8:	0020      	movs	r0, r4
   197ca:	4b17      	ldr	r3, [pc, #92]	; (19828 <spi_set_baudrate+0xb4>)
   197cc:	4798      	blx	r3
   197ce:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   197d0:	d003      	beq.n	197da <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   197d2:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
   197d4:	0020      	movs	r0, r4
   197d6:	b002      	add	sp, #8
   197d8:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
   197da:	466b      	mov	r3, sp
   197dc:	3306      	adds	r3, #6
   197de:	781b      	ldrb	r3, [r3, #0]
   197e0:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
   197e2:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   197e4:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
   197e6:	2b00      	cmp	r3, #0
   197e8:	d1fc      	bne.n	197e4 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   197ea:	0030      	movs	r0, r6
   197ec:	4b0a      	ldr	r3, [pc, #40]	; (19818 <spi_set_baudrate+0xa4>)
   197ee:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   197f0:	231f      	movs	r3, #31
   197f2:	4018      	ands	r0, r3
   197f4:	3b1e      	subs	r3, #30
   197f6:	4083      	lsls	r3, r0
   197f8:	4a08      	ldr	r2, [pc, #32]	; (1981c <spi_set_baudrate+0xa8>)
   197fa:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   197fc:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   197fe:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   19800:	2b00      	cmp	r3, #0
   19802:	d1fc      	bne.n	197fe <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   19804:	6833      	ldr	r3, [r6, #0]
   19806:	2202      	movs	r2, #2
   19808:	4313      	orrs	r3, r2
   1980a:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1980c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1980e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   19810:	2b00      	cmp	r3, #0
   19812:	d1fc      	bne.n	1980e <spi_set_baudrate+0x9a>
   19814:	e7de      	b.n	197d4 <spi_set_baudrate+0x60>
   19816:	46c0      	nop			; (mov r8, r8)
   19818:	000196e5 	.word	0x000196e5
   1981c:	e000e100 	.word	0xe000e100
   19820:	0001966d 	.word	0x0001966d
   19824:	0001aa0d 	.word	0x0001aa0d
   19828:	000193eb 	.word	0x000193eb

0001982c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   1982c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1982e:	b08b      	sub	sp, #44	; 0x2c
   19830:	0005      	movs	r5, r0
   19832:	000c      	movs	r4, r1
   19834:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   19836:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   19838:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   1983a:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   1983c:	079b      	lsls	r3, r3, #30
   1983e:	d501      	bpl.n	19844 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
   19840:	b00b      	add	sp, #44	; 0x2c
   19842:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   19844:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
   19846:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   19848:	07db      	lsls	r3, r3, #31
   1984a:	d4f9      	bmi.n	19840 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1984c:	0008      	movs	r0, r1
   1984e:	4b60      	ldr	r3, [pc, #384]	; (199d0 <spi_init+0x1a4>)
   19850:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   19852:	4a60      	ldr	r2, [pc, #384]	; (199d4 <spi_init+0x1a8>)
   19854:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   19856:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   19858:	2301      	movs	r3, #1
   1985a:	40bb      	lsls	r3, r7
   1985c:	430b      	orrs	r3, r1
   1985e:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
   19860:	a909      	add	r1, sp, #36	; 0x24
   19862:	2724      	movs	r7, #36	; 0x24
   19864:	5df3      	ldrb	r3, [r6, r7]
   19866:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   19868:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1986a:	b2c3      	uxtb	r3, r0
   1986c:	9301      	str	r3, [sp, #4]
   1986e:	0018      	movs	r0, r3
   19870:	4b59      	ldr	r3, [pc, #356]	; (199d8 <spi_init+0x1ac>)
   19872:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   19874:	9801      	ldr	r0, [sp, #4]
   19876:	4b59      	ldr	r3, [pc, #356]	; (199dc <spi_init+0x1b0>)
   19878:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1987a:	5df0      	ldrb	r0, [r6, r7]
   1987c:	2100      	movs	r1, #0
   1987e:	4b58      	ldr	r3, [pc, #352]	; (199e0 <spi_init+0x1b4>)
   19880:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
   19882:	7833      	ldrb	r3, [r6, #0]
   19884:	2b01      	cmp	r3, #1
   19886:	d038      	beq.n	198fa <spi_init+0xce>
   19888:	002b      	movs	r3, r5
   1988a:	330c      	adds	r3, #12
   1988c:	0029      	movs	r1, r5
   1988e:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
   19890:	2200      	movs	r2, #0
   19892:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   19894:	428b      	cmp	r3, r1
   19896:	d1fc      	bne.n	19892 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
   19898:	2300      	movs	r3, #0
   1989a:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   1989c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   1989e:	2400      	movs	r4, #0
   198a0:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   198a2:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
   198a4:	3336      	adds	r3, #54	; 0x36
   198a6:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
   198a8:	3301      	adds	r3, #1
   198aa:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
   198ac:	3301      	adds	r3, #1
   198ae:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
   198b0:	3b35      	subs	r3, #53	; 0x35
   198b2:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
   198b4:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   198b6:	6828      	ldr	r0, [r5, #0]
   198b8:	4b45      	ldr	r3, [pc, #276]	; (199d0 <spi_init+0x1a4>)
   198ba:	4798      	blx	r3
   198bc:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   198be:	4949      	ldr	r1, [pc, #292]	; (199e4 <spi_init+0x1b8>)
   198c0:	4b49      	ldr	r3, [pc, #292]	; (199e8 <spi_init+0x1bc>)
   198c2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   198c4:	00bf      	lsls	r7, r7, #2
   198c6:	4b49      	ldr	r3, [pc, #292]	; (199ec <spi_init+0x1c0>)
   198c8:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
   198ca:	682f      	ldr	r7, [r5, #0]
   198cc:	ab04      	add	r3, sp, #16
   198ce:	2280      	movs	r2, #128	; 0x80
   198d0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   198d2:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   198d4:	3a7f      	subs	r2, #127	; 0x7f
   198d6:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   198d8:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
   198da:	7833      	ldrb	r3, [r6, #0]
   198dc:	2b00      	cmp	r3, #0
   198de:	d102      	bne.n	198e6 <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   198e0:	2200      	movs	r2, #0
   198e2:	ab04      	add	r3, sp, #16
   198e4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
   198e6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   198e8:	9305      	str	r3, [sp, #20]
   198ea:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   198ec:	9306      	str	r3, [sp, #24]
   198ee:	6b33      	ldr	r3, [r6, #48]	; 0x30
   198f0:	9307      	str	r3, [sp, #28]
   198f2:	6b73      	ldr	r3, [r6, #52]	; 0x34
   198f4:	9308      	str	r3, [sp, #32]
   198f6:	2400      	movs	r4, #0
   198f8:	e00b      	b.n	19912 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   198fa:	6823      	ldr	r3, [r4, #0]
   198fc:	220c      	movs	r2, #12
   198fe:	4313      	orrs	r3, r2
   19900:	6023      	str	r3, [r4, #0]
   19902:	e7c1      	b.n	19888 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   19904:	0038      	movs	r0, r7
   19906:	4b3a      	ldr	r3, [pc, #232]	; (199f0 <spi_init+0x1c4>)
   19908:	4798      	blx	r3
   1990a:	e00a      	b.n	19922 <spi_init+0xf6>
   1990c:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   1990e:	2c04      	cmp	r4, #4
   19910:	d010      	beq.n	19934 <spi_init+0x108>
   19912:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
   19914:	00a3      	lsls	r3, r4, #2
   19916:	aa02      	add	r2, sp, #8
   19918:	200c      	movs	r0, #12
   1991a:	1812      	adds	r2, r2, r0
   1991c:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
   1991e:	2800      	cmp	r0, #0
   19920:	d0f0      	beq.n	19904 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
   19922:	1c43      	adds	r3, r0, #1
   19924:	d0f2      	beq.n	1990c <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   19926:	a904      	add	r1, sp, #16
   19928:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1992a:	0c00      	lsrs	r0, r0, #16
   1992c:	b2c0      	uxtb	r0, r0
   1992e:	4b31      	ldr	r3, [pc, #196]	; (199f4 <spi_init+0x1c8>)
   19930:	4798      	blx	r3
   19932:	e7eb      	b.n	1990c <spi_init+0xe0>
	module->mode             = config->mode;
   19934:	7833      	ldrb	r3, [r6, #0]
   19936:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
   19938:	7c33      	ldrb	r3, [r6, #16]
   1993a:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
   1993c:	7cb3      	ldrb	r3, [r6, #18]
   1993e:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
   19940:	7d33      	ldrb	r3, [r6, #20]
   19942:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
   19944:	2200      	movs	r2, #0
   19946:	ab02      	add	r3, sp, #8
   19948:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
   1994a:	7833      	ldrb	r3, [r6, #0]
   1994c:	2b01      	cmp	r3, #1
   1994e:	d028      	beq.n	199a2 <spi_init+0x176>
	ctrla |= config->transfer_mode;
   19950:	6873      	ldr	r3, [r6, #4]
   19952:	68b2      	ldr	r2, [r6, #8]
   19954:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
   19956:	68f2      	ldr	r2, [r6, #12]
   19958:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
   1995a:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
   1995c:	7c72      	ldrb	r2, [r6, #17]
   1995e:	2a00      	cmp	r2, #0
   19960:	d103      	bne.n	1996a <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   19962:	4a25      	ldr	r2, [pc, #148]	; (199f8 <spi_init+0x1cc>)
   19964:	7892      	ldrb	r2, [r2, #2]
   19966:	0792      	lsls	r2, r2, #30
   19968:	d501      	bpl.n	1996e <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   1996a:	2280      	movs	r2, #128	; 0x80
   1996c:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
   1996e:	7cb2      	ldrb	r2, [r6, #18]
   19970:	2a00      	cmp	r2, #0
   19972:	d002      	beq.n	1997a <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   19974:	2280      	movs	r2, #128	; 0x80
   19976:	0292      	lsls	r2, r2, #10
   19978:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
   1997a:	7cf2      	ldrb	r2, [r6, #19]
   1997c:	2a00      	cmp	r2, #0
   1997e:	d002      	beq.n	19986 <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   19980:	2280      	movs	r2, #128	; 0x80
   19982:	0092      	lsls	r2, r2, #2
   19984:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
   19986:	7d32      	ldrb	r2, [r6, #20]
   19988:	2a00      	cmp	r2, #0
   1998a:	d002      	beq.n	19992 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   1998c:	2280      	movs	r2, #128	; 0x80
   1998e:	0192      	lsls	r2, r2, #6
   19990:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
   19992:	683a      	ldr	r2, [r7, #0]
   19994:	4313      	orrs	r3, r2
   19996:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
   19998:	687b      	ldr	r3, [r7, #4]
   1999a:	430b      	orrs	r3, r1
   1999c:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
   1999e:	2000      	movs	r0, #0
   199a0:	e74e      	b.n	19840 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   199a2:	6828      	ldr	r0, [r5, #0]
   199a4:	4b0a      	ldr	r3, [pc, #40]	; (199d0 <spi_init+0x1a4>)
   199a6:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   199a8:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   199aa:	b2c0      	uxtb	r0, r0
   199ac:	4b13      	ldr	r3, [pc, #76]	; (199fc <spi_init+0x1d0>)
   199ae:	4798      	blx	r3
   199b0:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
   199b2:	ab02      	add	r3, sp, #8
   199b4:	1d9a      	adds	r2, r3, #6
   199b6:	69b0      	ldr	r0, [r6, #24]
   199b8:	4b11      	ldr	r3, [pc, #68]	; (19a00 <spi_init+0x1d4>)
   199ba:	4798      	blx	r3
   199bc:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
   199be:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
   199c0:	2b00      	cmp	r3, #0
   199c2:	d000      	beq.n	199c6 <spi_init+0x19a>
   199c4:	e73c      	b.n	19840 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
   199c6:	ab02      	add	r3, sp, #8
   199c8:	3306      	adds	r3, #6
   199ca:	781b      	ldrb	r3, [r3, #0]
   199cc:	733b      	strb	r3, [r7, #12]
   199ce:	e7bf      	b.n	19950 <spi_init+0x124>
   199d0:	0001966d 	.word	0x0001966d
   199d4:	40000400 	.word	0x40000400
   199d8:	0001a9f1 	.word	0x0001a9f1
   199dc:	0001a965 	.word	0x0001a965
   199e0:	000194a9 	.word	0x000194a9
   199e4:	00019c99 	.word	0x00019c99
   199e8:	000196a9 	.word	0x000196a9
   199ec:	20003ecc 	.word	0x20003ecc
   199f0:	000194f5 	.word	0x000194f5
   199f4:	0001aae9 	.word	0x0001aae9
   199f8:	41002000 	.word	0x41002000
   199fc:	0001aa0d 	.word	0x0001aa0d
   19a00:	000193eb 	.word	0x000193eb

00019a04 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   19a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   19a06:	46d6      	mov	lr, sl
   19a08:	4647      	mov	r7, r8
   19a0a:	b580      	push	{r7, lr}
   19a0c:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   19a0e:	2438      	movs	r4, #56	; 0x38
   19a10:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   19a12:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
   19a14:	2d05      	cmp	r5, #5
   19a16:	d002      	beq.n	19a1e <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   19a18:	3412      	adds	r4, #18
	if (length == 0) {
   19a1a:	2a00      	cmp	r2, #0
   19a1c:	d105      	bne.n	19a2a <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
   19a1e:	0020      	movs	r0, r4
   19a20:	b003      	add	sp, #12
   19a22:	bc0c      	pop	{r2, r3}
   19a24:	4690      	mov	r8, r2
   19a26:	469a      	mov	sl, r3
   19a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
   19a2a:	79c4      	ldrb	r4, [r0, #7]
   19a2c:	2c00      	cmp	r4, #0
   19a2e:	d144      	bne.n	19aba <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
   19a30:	341c      	adds	r4, #28
   19a32:	e7f4      	b.n	19a1e <spi_read_buffer_wait+0x1a>
	SercomSpi *const spi_module = &(module->hw->SPI);
   19a34:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   19a36:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
   19a38:	423c      	tst	r4, r7
   19a3a:	d0fc      	beq.n	19a36 <spi_read_buffer_wait+0x32>
   19a3c:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
   19a3e:	423c      	tst	r4, r7
   19a40:	d01a      	beq.n	19a78 <spi_read_buffer_wait+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   19a42:	4644      	mov	r4, r8
   19a44:	62ac      	str	r4, [r5, #40]	; 0x28
   19a46:	e017      	b.n	19a78 <spi_read_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   19a48:	7984      	ldrb	r4, [r0, #6]
   19a4a:	2c01      	cmp	r4, #1
   19a4c:	d026      	beq.n	19a9c <spi_read_buffer_wait+0x98>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   19a4e:	6aad      	ldr	r5, [r5, #40]	; 0x28
   19a50:	b2ec      	uxtb	r4, r5
   19a52:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
   19a54:	9c01      	ldr	r4, [sp, #4]
   19a56:	2c00      	cmp	r4, #0
   19a58:	d13a      	bne.n	19ad0 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
   19a5a:	1c75      	adds	r5, r6, #1
   19a5c:	b2ad      	uxth	r5, r5
   19a5e:	4664      	mov	r4, ip
   19a60:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   19a62:	7984      	ldrb	r4, [r0, #6]
   19a64:	2c01      	cmp	r4, #1
   19a66:	d01e      	beq.n	19aa6 <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
   19a68:	002e      	movs	r6, r5
	while (length--) {
   19a6a:	3a01      	subs	r2, #1
   19a6c:	b292      	uxth	r2, r2
   19a6e:	4552      	cmp	r2, sl
   19a70:	d01f      	beq.n	19ab2 <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
   19a72:	7944      	ldrb	r4, [r0, #5]
   19a74:	2c01      	cmp	r4, #1
   19a76:	d0dd      	beq.n	19a34 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
   19a78:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   19a7a:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
   19a7c:	421c      	tst	r4, r3
   19a7e:	d0fc      	beq.n	19a7a <spi_read_buffer_wait+0x76>
   19a80:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
   19a82:	421c      	tst	r4, r3
   19a84:	d017      	beq.n	19ab6 <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   19a86:	8b6c      	ldrh	r4, [r5, #26]
   19a88:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
   19a8a:	2400      	movs	r4, #0
   19a8c:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   19a8e:	4664      	mov	r4, ip
   19a90:	421c      	tst	r4, r3
   19a92:	d0d9      	beq.n	19a48 <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   19a94:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
   19a96:	241e      	movs	r4, #30
   19a98:	9401      	str	r4, [sp, #4]
   19a9a:	e7d5      	b.n	19a48 <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   19a9c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   19a9e:	05e4      	lsls	r4, r4, #23
   19aa0:	0de4      	lsrs	r4, r4, #23
   19aa2:	46a4      	mov	ip, r4
   19aa4:	e7d6      	b.n	19a54 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
   19aa6:	3602      	adds	r6, #2
   19aa8:	b2b6      	uxth	r6, r6
   19aaa:	4664      	mov	r4, ip
   19aac:	0a24      	lsrs	r4, r4, #8
   19aae:	554c      	strb	r4, [r1, r5]
   19ab0:	e7db      	b.n	19a6a <spi_read_buffer_wait+0x66>
   19ab2:	9c01      	ldr	r4, [sp, #4]
   19ab4:	e7b3      	b.n	19a1e <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
   19ab6:	2410      	movs	r4, #16
   19ab8:	e7b1      	b.n	19a1e <spi_read_buffer_wait+0x1a>
	while (length--) {
   19aba:	3a01      	subs	r2, #1
   19abc:	b292      	uxth	r2, r2
   19abe:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
   19ac0:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   19ac2:	05db      	lsls	r3, r3, #23
   19ac4:	0ddb      	lsrs	r3, r3, #23
   19ac6:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
   19ac8:	2304      	movs	r3, #4
	while (length--) {
   19aca:	4c02      	ldr	r4, [pc, #8]	; (19ad4 <spi_read_buffer_wait+0xd0>)
   19acc:	46a2      	mov	sl, r4
   19ace:	e7d0      	b.n	19a72 <spi_read_buffer_wait+0x6e>
   19ad0:	9c01      	ldr	r4, [sp, #4]
   19ad2:	e7a4      	b.n	19a1e <spi_read_buffer_wait+0x1a>
   19ad4:	0000ffff 	.word	0x0000ffff

00019ad8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   19ad8:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   19ada:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
   19adc:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
   19ade:	2c01      	cmp	r4, #1
   19ae0:	d001      	beq.n	19ae6 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
   19ae2:	0018      	movs	r0, r3
   19ae4:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
   19ae6:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
   19ae8:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
   19aea:	2c00      	cmp	r4, #0
   19aec:	d1f9      	bne.n	19ae2 <spi_select_slave+0xa>
		if (select) {
   19aee:	2a00      	cmp	r2, #0
   19af0:	d058      	beq.n	19ba4 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
   19af2:	784b      	ldrb	r3, [r1, #1]
   19af4:	2b00      	cmp	r3, #0
   19af6:	d044      	beq.n	19b82 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   19af8:	6803      	ldr	r3, [r0, #0]
   19afa:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
   19afc:	07db      	lsls	r3, r3, #31
   19afe:	d410      	bmi.n	19b22 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
   19b00:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   19b02:	09d1      	lsrs	r1, r2, #7
		return NULL;
   19b04:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   19b06:	2900      	cmp	r1, #0
   19b08:	d104      	bne.n	19b14 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
   19b0a:	0953      	lsrs	r3, r2, #5
   19b0c:	01db      	lsls	r3, r3, #7
   19b0e:	492e      	ldr	r1, [pc, #184]	; (19bc8 <spi_select_slave+0xf0>)
   19b10:	468c      	mov	ip, r1
   19b12:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   19b14:	211f      	movs	r1, #31
   19b16:	4011      	ands	r1, r2
   19b18:	2201      	movs	r2, #1
   19b1a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   19b1c:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
   19b1e:	2305      	movs	r3, #5
   19b20:	e7df      	b.n	19ae2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   19b22:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   19b24:	09d4      	lsrs	r4, r2, #7
		return NULL;
   19b26:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   19b28:	2c00      	cmp	r4, #0
   19b2a:	d104      	bne.n	19b36 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
   19b2c:	0953      	lsrs	r3, r2, #5
   19b2e:	01db      	lsls	r3, r3, #7
   19b30:	4c25      	ldr	r4, [pc, #148]	; (19bc8 <spi_select_slave+0xf0>)
   19b32:	46a4      	mov	ip, r4
   19b34:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   19b36:	241f      	movs	r4, #31
   19b38:	4014      	ands	r4, r2
   19b3a:	2201      	movs	r2, #1
   19b3c:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
   19b3e:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
   19b40:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   19b42:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
   19b44:	07d2      	lsls	r2, r2, #31
   19b46:	d501      	bpl.n	19b4c <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   19b48:	788a      	ldrb	r2, [r1, #2]
   19b4a:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
   19b4c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
   19b4e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
   19b50:	2a00      	cmp	r2, #0
   19b52:	d1c6      	bne.n	19ae2 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
   19b54:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
   19b56:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   19b58:	7e13      	ldrb	r3, [r2, #24]
   19b5a:	420b      	tst	r3, r1
   19b5c:	d0fc      	beq.n	19b58 <spi_select_slave+0x80>
   19b5e:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
   19b60:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
   19b62:	0749      	lsls	r1, r1, #29
   19b64:	d5bd      	bpl.n	19ae2 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   19b66:	8b53      	ldrh	r3, [r2, #26]
   19b68:	075b      	lsls	r3, r3, #29
   19b6a:	d501      	bpl.n	19b70 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   19b6c:	2304      	movs	r3, #4
   19b6e:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   19b70:	7983      	ldrb	r3, [r0, #6]
   19b72:	2b01      	cmp	r3, #1
   19b74:	d002      	beq.n	19b7c <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   19b76:	6a93      	ldr	r3, [r2, #40]	; 0x28
   19b78:	2300      	movs	r3, #0
   19b7a:	e7b2      	b.n	19ae2 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   19b7c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   19b7e:	2300      	movs	r3, #0
   19b80:	e7af      	b.n	19ae2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   19b82:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   19b84:	09d1      	lsrs	r1, r2, #7
		return NULL;
   19b86:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   19b88:	2900      	cmp	r1, #0
   19b8a:	d104      	bne.n	19b96 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
   19b8c:	0953      	lsrs	r3, r2, #5
   19b8e:	01db      	lsls	r3, r3, #7
   19b90:	490d      	ldr	r1, [pc, #52]	; (19bc8 <spi_select_slave+0xf0>)
   19b92:	468c      	mov	ip, r1
   19b94:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   19b96:	211f      	movs	r1, #31
   19b98:	4011      	ands	r1, r2
   19b9a:	2201      	movs	r2, #1
   19b9c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
   19b9e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
   19ba0:	2300      	movs	r3, #0
   19ba2:	e79e      	b.n	19ae2 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
   19ba4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   19ba6:	09d1      	lsrs	r1, r2, #7
		return NULL;
   19ba8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   19baa:	2900      	cmp	r1, #0
   19bac:	d104      	bne.n	19bb8 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
   19bae:	0953      	lsrs	r3, r2, #5
   19bb0:	01db      	lsls	r3, r3, #7
   19bb2:	4905      	ldr	r1, [pc, #20]	; (19bc8 <spi_select_slave+0xf0>)
   19bb4:	468c      	mov	ip, r1
   19bb6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   19bb8:	211f      	movs	r1, #31
   19bba:	4011      	ands	r1, r2
   19bbc:	2201      	movs	r2, #1
   19bbe:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   19bc0:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
   19bc2:	2300      	movs	r3, #0
   19bc4:	e78d      	b.n	19ae2 <spi_select_slave+0xa>
   19bc6:	46c0      	nop			; (mov r8, r8)
   19bc8:	41004400 	.word	0x41004400

00019bcc <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   19bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   19bce:	46de      	mov	lr, fp
   19bd0:	4657      	mov	r7, sl
   19bd2:	464e      	mov	r6, r9
   19bd4:	4645      	mov	r5, r8
   19bd6:	b5e0      	push	{r5, r6, r7, lr}
   19bd8:	b083      	sub	sp, #12
   19bda:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   19bdc:	2338      	movs	r3, #56	; 0x38
   19bde:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   19be0:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
   19be2:	2c05      	cmp	r4, #5
   19be4:	d002      	beq.n	19bec <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   19be6:	3312      	adds	r3, #18
	if (length == 0) {
   19be8:	2a00      	cmp	r2, #0
   19bea:	d14b      	bne.n	19c84 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
   19bec:	0018      	movs	r0, r3
   19bee:	b003      	add	sp, #12
   19bf0:	bc3c      	pop	{r2, r3, r4, r5}
   19bf2:	4690      	mov	r8, r2
   19bf4:	4699      	mov	r9, r3
   19bf6:	46a2      	mov	sl, r4
   19bf8:	46ab      	mov	fp, r5
   19bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
   19bfc:	3702      	adds	r7, #2
   19bfe:	b2bf      	uxth	r7, r7
   19c00:	4641      	mov	r1, r8
   19c02:	4653      	mov	r3, sl
   19c04:	5c59      	ldrb	r1, [r3, r1]
   19c06:	0209      	lsls	r1, r1, #8
   19c08:	465b      	mov	r3, fp
   19c0a:	430b      	orrs	r3, r1
   19c0c:	e018      	b.n	19c40 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   19c0e:	7983      	ldrb	r3, [r0, #6]
   19c10:	2b01      	cmp	r3, #1
   19c12:	d02a      	beq.n	19c6a <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   19c14:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
   19c16:	3e01      	subs	r6, #1
   19c18:	b2b6      	uxth	r6, r6
   19c1a:	4566      	cmp	r6, ip
   19c1c:	d027      	beq.n	19c6e <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
   19c1e:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   19c20:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
   19c22:	4223      	tst	r3, r4
   19c24:	d0fc      	beq.n	19c20 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
   19c26:	1c7b      	adds	r3, r7, #1
   19c28:	b29b      	uxth	r3, r3
   19c2a:	4698      	mov	r8, r3
   19c2c:	4653      	mov	r3, sl
   19c2e:	5ddb      	ldrb	r3, [r3, r7]
   19c30:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   19c32:	7981      	ldrb	r1, [r0, #6]
   19c34:	2901      	cmp	r1, #1
   19c36:	d0e1      	beq.n	19bfc <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
   19c38:	4669      	mov	r1, sp
   19c3a:	80cb      	strh	r3, [r1, #6]
   19c3c:	88cb      	ldrh	r3, [r1, #6]
   19c3e:	4647      	mov	r7, r8
   19c40:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
   19c42:	4221      	tst	r1, r4
   19c44:	d002      	beq.n	19c4c <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   19c46:	05db      	lsls	r3, r3, #23
   19c48:	0ddb      	lsrs	r3, r3, #23
   19c4a:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
   19c4c:	79c3      	ldrb	r3, [r0, #7]
   19c4e:	2b00      	cmp	r3, #0
   19c50:	d0e1      	beq.n	19c16 <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
   19c52:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   19c54:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
   19c56:	422b      	tst	r3, r5
   19c58:	d0fc      	beq.n	19c54 <spi_write_buffer_wait+0x88>
   19c5a:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
   19c5c:	422b      	tst	r3, r5
   19c5e:	d0da      	beq.n	19c16 <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   19c60:	8b53      	ldrh	r3, [r2, #26]
   19c62:	422b      	tst	r3, r5
   19c64:	d0d3      	beq.n	19c0e <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   19c66:	8355      	strh	r5, [r2, #26]
   19c68:	e7d1      	b.n	19c0e <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   19c6a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   19c6c:	e7d3      	b.n	19c16 <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
   19c6e:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
   19c70:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
   19c72:	2a01      	cmp	r2, #1
   19c74:	d1ba      	bne.n	19bec <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
   19c76:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
   19c78:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   19c7a:	7e0b      	ldrb	r3, [r1, #24]
   19c7c:	4213      	tst	r3, r2
   19c7e:	d0fc      	beq.n	19c7a <spi_write_buffer_wait+0xae>
	return STATUS_OK;
   19c80:	2300      	movs	r3, #0
   19c82:	e7b3      	b.n	19bec <spi_write_buffer_wait+0x20>
	while (length--) {
   19c84:	3a01      	subs	r2, #1
   19c86:	b296      	uxth	r6, r2
   19c88:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
   19c8a:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
   19c8c:	2504      	movs	r5, #4
	while (length--) {
   19c8e:	4b01      	ldr	r3, [pc, #4]	; (19c94 <spi_write_buffer_wait+0xc8>)
   19c90:	469c      	mov	ip, r3
   19c92:	e7c4      	b.n	19c1e <spi_write_buffer_wait+0x52>
   19c94:	0000ffff 	.word	0x0000ffff

00019c98 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   19c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
   19c9a:	0080      	lsls	r0, r0, #2
   19c9c:	4b70      	ldr	r3, [pc, #448]	; (19e60 <_spi_interrupt_handler+0x1c8>)
   19c9e:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   19ca0:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   19ca2:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
   19ca4:	5ce7      	ldrb	r7, [r4, r3]
   19ca6:	2236      	movs	r2, #54	; 0x36
   19ca8:	5ca2      	ldrb	r2, [r4, r2]
   19caa:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   19cac:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
   19cae:	7db5      	ldrb	r5, [r6, #22]
   19cb0:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   19cb2:	07eb      	lsls	r3, r5, #31
   19cb4:	d502      	bpl.n	19cbc <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   19cb6:	7963      	ldrb	r3, [r4, #5]
   19cb8:	2b01      	cmp	r3, #1
   19cba:	d01e      	beq.n	19cfa <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   19cbc:	076b      	lsls	r3, r5, #29
   19cbe:	d511      	bpl.n	19ce4 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   19cc0:	8b73      	ldrh	r3, [r6, #26]
   19cc2:	075b      	lsls	r3, r3, #29
   19cc4:	d55a      	bpl.n	19d7c <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
   19cc6:	7a63      	ldrb	r3, [r4, #9]
   19cc8:	2b01      	cmp	r3, #1
   19cca:	d008      	beq.n	19cde <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   19ccc:	221e      	movs	r2, #30
   19cce:	2338      	movs	r3, #56	; 0x38
   19cd0:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   19cd2:	3b35      	subs	r3, #53	; 0x35
   19cd4:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   19cd6:	3302      	adds	r3, #2
   19cd8:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   19cda:	073b      	lsls	r3, r7, #28
   19cdc:	d44a      	bmi.n	19d74 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   19cde:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   19ce0:	2304      	movs	r3, #4
   19ce2:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   19ce4:	07ab      	lsls	r3, r5, #30
   19ce6:	d503      	bpl.n	19cf0 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   19ce8:	7963      	ldrb	r3, [r4, #5]
   19cea:	2b01      	cmp	r3, #1
   19cec:	d100      	bne.n	19cf0 <_spi_interrupt_handler+0x58>
   19cee:	e097      	b.n	19e20 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   19cf0:	b26d      	sxtb	r5, r5
   19cf2:	2d00      	cmp	r5, #0
   19cf4:	da00      	bge.n	19cf8 <_spi_interrupt_handler+0x60>
   19cf6:	e0a9      	b.n	19e4c <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
   19cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
   19cfa:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
   19cfc:	2b00      	cmp	r3, #0
   19cfe:	d022      	beq.n	19d46 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
   19d00:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
   19d02:	2b00      	cmp	r3, #0
   19d04:	d0da      	beq.n	19cbc <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   19d06:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   19d08:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   19d0a:	7813      	ldrb	r3, [r2, #0]
   19d0c:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
   19d0e:	1c50      	adds	r0, r2, #1
   19d10:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   19d12:	79a0      	ldrb	r0, [r4, #6]
   19d14:	2801      	cmp	r0, #1
   19d16:	d027      	beq.n	19d68 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   19d18:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   19d1a:	05db      	lsls	r3, r3, #23
   19d1c:	0ddb      	lsrs	r3, r3, #23
   19d1e:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
   19d20:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   19d22:	3b01      	subs	r3, #1
   19d24:	b29b      	uxth	r3, r3
   19d26:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
   19d28:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   19d2a:	b29b      	uxth	r3, r3
   19d2c:	2b00      	cmp	r3, #0
   19d2e:	d1c5      	bne.n	19cbc <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   19d30:	3301      	adds	r3, #1
   19d32:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
   19d34:	7a63      	ldrb	r3, [r4, #9]
   19d36:	2b01      	cmp	r3, #1
   19d38:	d1c0      	bne.n	19cbc <_spi_interrupt_handler+0x24>
   19d3a:	79e3      	ldrb	r3, [r4, #7]
   19d3c:	2b00      	cmp	r3, #0
   19d3e:	d1bd      	bne.n	19cbc <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   19d40:	3302      	adds	r3, #2
   19d42:	75b3      	strb	r3, [r6, #22]
   19d44:	e7ba      	b.n	19cbc <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
   19d46:	4b47      	ldr	r3, [pc, #284]	; (19e64 <_spi_interrupt_handler+0x1cc>)
   19d48:	881b      	ldrh	r3, [r3, #0]
   19d4a:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
   19d4c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   19d4e:	3b01      	subs	r3, #1
   19d50:	b29b      	uxth	r3, r3
   19d52:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
   19d54:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   19d56:	b29b      	uxth	r3, r3
   19d58:	2b00      	cmp	r3, #0
   19d5a:	d101      	bne.n	19d60 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   19d5c:	3301      	adds	r3, #1
   19d5e:	7533      	strb	r3, [r6, #20]
		if (0
   19d60:	7963      	ldrb	r3, [r4, #5]
   19d62:	2b01      	cmp	r3, #1
   19d64:	d0cc      	beq.n	19d00 <_spi_interrupt_handler+0x68>
   19d66:	e7a9      	b.n	19cbc <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   19d68:	7850      	ldrb	r0, [r2, #1]
   19d6a:	0200      	lsls	r0, r0, #8
   19d6c:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
   19d6e:	3202      	adds	r2, #2
   19d70:	62e2      	str	r2, [r4, #44]	; 0x2c
   19d72:	e7d2      	b.n	19d1a <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   19d74:	0020      	movs	r0, r4
   19d76:	69a3      	ldr	r3, [r4, #24]
   19d78:	4798      	blx	r3
   19d7a:	e7b0      	b.n	19cde <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
   19d7c:	7a63      	ldrb	r3, [r4, #9]
   19d7e:	2b01      	cmp	r3, #1
   19d80:	d028      	beq.n	19dd4 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   19d82:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   19d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19d86:	05db      	lsls	r3, r3, #23
   19d88:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
   19d8a:	b2da      	uxtb	r2, r3
   19d8c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   19d8e:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
   19d90:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   19d92:	1c51      	adds	r1, r2, #1
   19d94:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   19d96:	79a1      	ldrb	r1, [r4, #6]
   19d98:	2901      	cmp	r1, #1
   19d9a:	d034      	beq.n	19e06 <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
   19d9c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   19d9e:	3b01      	subs	r3, #1
   19da0:	b29b      	uxth	r3, r3
   19da2:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
   19da4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   19da6:	b29b      	uxth	r3, r3
   19da8:	2b00      	cmp	r3, #0
   19daa:	d000      	beq.n	19dae <_spi_interrupt_handler+0x116>
   19dac:	e79a      	b.n	19ce4 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
   19dae:	2200      	movs	r2, #0
   19db0:	3338      	adds	r3, #56	; 0x38
   19db2:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   19db4:	3b34      	subs	r3, #52	; 0x34
   19db6:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   19db8:	7a63      	ldrb	r3, [r4, #9]
   19dba:	2b02      	cmp	r3, #2
   19dbc:	d029      	beq.n	19e12 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
   19dbe:	7a63      	ldrb	r3, [r4, #9]
   19dc0:	2b00      	cmp	r3, #0
   19dc2:	d000      	beq.n	19dc6 <_spi_interrupt_handler+0x12e>
   19dc4:	e78e      	b.n	19ce4 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   19dc6:	07bb      	lsls	r3, r7, #30
   19dc8:	d400      	bmi.n	19dcc <_spi_interrupt_handler+0x134>
   19dca:	e78b      	b.n	19ce4 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   19dcc:	0020      	movs	r0, r4
   19dce:	6923      	ldr	r3, [r4, #16]
   19dd0:	4798      	blx	r3
   19dd2:	e787      	b.n	19ce4 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   19dd4:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
   19dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
   19dd8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   19dda:	3b01      	subs	r3, #1
   19ddc:	b29b      	uxth	r3, r3
   19dde:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
   19de0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   19de2:	b29b      	uxth	r3, r3
   19de4:	2b00      	cmp	r3, #0
   19de6:	d000      	beq.n	19dea <_spi_interrupt_handler+0x152>
   19de8:	e77c      	b.n	19ce4 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   19dea:	3304      	adds	r3, #4
   19dec:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
   19dee:	2200      	movs	r2, #0
   19df0:	3334      	adds	r3, #52	; 0x34
   19df2:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
   19df4:	3b35      	subs	r3, #53	; 0x35
   19df6:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
   19df8:	07fb      	lsls	r3, r7, #31
   19dfa:	d400      	bmi.n	19dfe <_spi_interrupt_handler+0x166>
   19dfc:	e772      	b.n	19ce4 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   19dfe:	0020      	movs	r0, r4
   19e00:	68e3      	ldr	r3, [r4, #12]
   19e02:	4798      	blx	r3
   19e04:	e76e      	b.n	19ce4 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
   19e06:	0a1b      	lsrs	r3, r3, #8
   19e08:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
   19e0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19e0c:	3301      	adds	r3, #1
   19e0e:	62a3      	str	r3, [r4, #40]	; 0x28
   19e10:	e7c4      	b.n	19d9c <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   19e12:	077b      	lsls	r3, r7, #29
   19e14:	d400      	bmi.n	19e18 <_spi_interrupt_handler+0x180>
   19e16:	e765      	b.n	19ce4 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   19e18:	0020      	movs	r0, r4
   19e1a:	6963      	ldr	r3, [r4, #20]
   19e1c:	4798      	blx	r3
   19e1e:	e761      	b.n	19ce4 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   19e20:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
   19e22:	2b01      	cmp	r3, #1
   19e24:	d000      	beq.n	19e28 <_spi_interrupt_handler+0x190>
   19e26:	e763      	b.n	19cf0 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   19e28:	79e3      	ldrb	r3, [r4, #7]
   19e2a:	2b00      	cmp	r3, #0
   19e2c:	d000      	beq.n	19e30 <_spi_interrupt_handler+0x198>
   19e2e:	e75f      	b.n	19cf0 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   19e30:	3302      	adds	r3, #2
   19e32:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
   19e34:	3301      	adds	r3, #1
   19e36:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
   19e38:	2200      	movs	r2, #0
   19e3a:	3335      	adds	r3, #53	; 0x35
   19e3c:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   19e3e:	07fb      	lsls	r3, r7, #31
   19e40:	d400      	bmi.n	19e44 <_spi_interrupt_handler+0x1ac>
   19e42:	e755      	b.n	19cf0 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   19e44:	0020      	movs	r0, r4
   19e46:	68e3      	ldr	r3, [r4, #12]
   19e48:	4798      	blx	r3
   19e4a:	e751      	b.n	19cf0 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   19e4c:	2380      	movs	r3, #128	; 0x80
   19e4e:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   19e50:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   19e52:	067b      	lsls	r3, r7, #25
   19e54:	d400      	bmi.n	19e58 <_spi_interrupt_handler+0x1c0>
   19e56:	e74f      	b.n	19cf8 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   19e58:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19e5a:	0020      	movs	r0, r4
   19e5c:	4798      	blx	r3
}
   19e5e:	e74b      	b.n	19cf8 <_spi_interrupt_handler+0x60>
   19e60:	20003ecc 	.word	0x20003ecc
   19e64:	20003ee4 	.word	0x20003ee4

00019e68 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   19e68:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e6a:	46de      	mov	lr, fp
   19e6c:	4657      	mov	r7, sl
   19e6e:	464e      	mov	r6, r9
   19e70:	4645      	mov	r5, r8
   19e72:	b5e0      	push	{r5, r6, r7, lr}
   19e74:	b091      	sub	sp, #68	; 0x44
   19e76:	0005      	movs	r5, r0
   19e78:	000c      	movs	r4, r1
   19e7a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   19e7c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   19e7e:	0008      	movs	r0, r1
   19e80:	4bbc      	ldr	r3, [pc, #752]	; (1a174 <usart_init+0x30c>)
   19e82:	4798      	blx	r3
   19e84:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   19e86:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   19e88:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   19e8a:	07db      	lsls	r3, r3, #31
   19e8c:	d506      	bpl.n	19e9c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
   19e8e:	b011      	add	sp, #68	; 0x44
   19e90:	bc3c      	pop	{r2, r3, r4, r5}
   19e92:	4690      	mov	r8, r2
   19e94:	4699      	mov	r9, r3
   19e96:	46a2      	mov	sl, r4
   19e98:	46ab      	mov	fp, r5
   19e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   19e9c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
   19e9e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   19ea0:	079b      	lsls	r3, r3, #30
   19ea2:	d4f4      	bmi.n	19e8e <usart_init+0x26>
   19ea4:	49b4      	ldr	r1, [pc, #720]	; (1a178 <usart_init+0x310>)
   19ea6:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   19ea8:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   19eaa:	2301      	movs	r3, #1
   19eac:	40bb      	lsls	r3, r7
   19eae:	4303      	orrs	r3, r0
   19eb0:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
   19eb2:	a90f      	add	r1, sp, #60	; 0x3c
   19eb4:	272d      	movs	r7, #45	; 0x2d
   19eb6:	5df3      	ldrb	r3, [r6, r7]
   19eb8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   19eba:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   19ebc:	b2d3      	uxtb	r3, r2
   19ebe:	9302      	str	r3, [sp, #8]
   19ec0:	0018      	movs	r0, r3
   19ec2:	4bae      	ldr	r3, [pc, #696]	; (1a17c <usart_init+0x314>)
   19ec4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   19ec6:	9802      	ldr	r0, [sp, #8]
   19ec8:	4bad      	ldr	r3, [pc, #692]	; (1a180 <usart_init+0x318>)
   19eca:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   19ecc:	5df0      	ldrb	r0, [r6, r7]
   19ece:	2100      	movs	r1, #0
   19ed0:	4bac      	ldr	r3, [pc, #688]	; (1a184 <usart_init+0x31c>)
   19ed2:	4798      	blx	r3
	module->character_size = config->character_size;
   19ed4:	7af3      	ldrb	r3, [r6, #11]
   19ed6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
   19ed8:	2324      	movs	r3, #36	; 0x24
   19eda:	5cf3      	ldrb	r3, [r6, r3]
   19edc:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
   19ede:	2325      	movs	r3, #37	; 0x25
   19ee0:	5cf3      	ldrb	r3, [r6, r3]
   19ee2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
   19ee4:	7ef3      	ldrb	r3, [r6, #27]
   19ee6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   19ee8:	7f33      	ldrb	r3, [r6, #28]
   19eea:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
   19eec:	682b      	ldr	r3, [r5, #0]
   19eee:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   19ef0:	0018      	movs	r0, r3
   19ef2:	4ba0      	ldr	r3, [pc, #640]	; (1a174 <usart_init+0x30c>)
   19ef4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   19ef6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
   19ef8:	2200      	movs	r2, #0
   19efa:	230e      	movs	r3, #14
   19efc:	a906      	add	r1, sp, #24
   19efe:	468c      	mov	ip, r1
   19f00:	4463      	add	r3, ip
   19f02:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
   19f04:	8a32      	ldrh	r2, [r6, #16]
   19f06:	9202      	str	r2, [sp, #8]
   19f08:	2380      	movs	r3, #128	; 0x80
   19f0a:	01db      	lsls	r3, r3, #7
   19f0c:	429a      	cmp	r2, r3
   19f0e:	d100      	bne.n	19f12 <usart_init+0xaa>
   19f10:	e09e      	b.n	1a050 <usart_init+0x1e8>
   19f12:	d90f      	bls.n	19f34 <usart_init+0xcc>
   19f14:	23c0      	movs	r3, #192	; 0xc0
   19f16:	01db      	lsls	r3, r3, #7
   19f18:	9a02      	ldr	r2, [sp, #8]
   19f1a:	429a      	cmp	r2, r3
   19f1c:	d100      	bne.n	19f20 <usart_init+0xb8>
   19f1e:	e092      	b.n	1a046 <usart_init+0x1de>
   19f20:	2380      	movs	r3, #128	; 0x80
   19f22:	021b      	lsls	r3, r3, #8
   19f24:	429a      	cmp	r2, r3
   19f26:	d000      	beq.n	19f2a <usart_init+0xc2>
   19f28:	e11f      	b.n	1a16a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   19f2a:	2303      	movs	r3, #3
   19f2c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   19f2e:	2300      	movs	r3, #0
   19f30:	9307      	str	r3, [sp, #28]
   19f32:	e008      	b.n	19f46 <usart_init+0xde>
	switch (config->sample_rate) {
   19f34:	2380      	movs	r3, #128	; 0x80
   19f36:	019b      	lsls	r3, r3, #6
   19f38:	429a      	cmp	r2, r3
   19f3a:	d000      	beq.n	19f3e <usart_init+0xd6>
   19f3c:	e115      	b.n	1a16a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   19f3e:	2310      	movs	r3, #16
   19f40:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   19f42:	3b0f      	subs	r3, #15
   19f44:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
   19f46:	6833      	ldr	r3, [r6, #0]
   19f48:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
   19f4a:	68f3      	ldr	r3, [r6, #12]
   19f4c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
   19f4e:	6973      	ldr	r3, [r6, #20]
   19f50:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   19f52:	7e33      	ldrb	r3, [r6, #24]
   19f54:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   19f56:	2326      	movs	r3, #38	; 0x26
   19f58:	5cf3      	ldrb	r3, [r6, r3]
   19f5a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
   19f5c:	6873      	ldr	r3, [r6, #4]
   19f5e:	4699      	mov	r9, r3
	switch (transfer_mode)
   19f60:	2b00      	cmp	r3, #0
   19f62:	d100      	bne.n	19f66 <usart_init+0xfe>
   19f64:	e0a0      	b.n	1a0a8 <usart_init+0x240>
   19f66:	2380      	movs	r3, #128	; 0x80
   19f68:	055b      	lsls	r3, r3, #21
   19f6a:	4599      	cmp	r9, r3
   19f6c:	d100      	bne.n	19f70 <usart_init+0x108>
   19f6e:	e084      	b.n	1a07a <usart_init+0x212>
	if(config->encoding_format_enable) {
   19f70:	7e73      	ldrb	r3, [r6, #25]
   19f72:	2b00      	cmp	r3, #0
   19f74:	d002      	beq.n	19f7c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   19f76:	7eb3      	ldrb	r3, [r6, #26]
   19f78:	4642      	mov	r2, r8
   19f7a:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
   19f7c:	682a      	ldr	r2, [r5, #0]
   19f7e:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
   19f80:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   19f82:	2b00      	cmp	r3, #0
   19f84:	d1fc      	bne.n	19f80 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
   19f86:	330e      	adds	r3, #14
   19f88:	aa06      	add	r2, sp, #24
   19f8a:	4694      	mov	ip, r2
   19f8c:	4463      	add	r3, ip
   19f8e:	881b      	ldrh	r3, [r3, #0]
   19f90:	4642      	mov	r2, r8
   19f92:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
   19f94:	9b05      	ldr	r3, [sp, #20]
   19f96:	9a03      	ldr	r2, [sp, #12]
   19f98:	4313      	orrs	r3, r2
   19f9a:	9a04      	ldr	r2, [sp, #16]
   19f9c:	4313      	orrs	r3, r2
   19f9e:	464a      	mov	r2, r9
   19fa0:	4313      	orrs	r3, r2
   19fa2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   19fa4:	465b      	mov	r3, fp
   19fa6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
   19fa8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   19faa:	4653      	mov	r3, sl
   19fac:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
   19fae:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
   19fb0:	2327      	movs	r3, #39	; 0x27
   19fb2:	5cf3      	ldrb	r3, [r6, r3]
   19fb4:	2b00      	cmp	r3, #0
   19fb6:	d101      	bne.n	19fbc <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   19fb8:	3304      	adds	r3, #4
   19fba:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   19fbc:	7e73      	ldrb	r3, [r6, #25]
   19fbe:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   19fc0:	7f32      	ldrb	r2, [r6, #28]
   19fc2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   19fc4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   19fc6:	7f72      	ldrb	r2, [r6, #29]
   19fc8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   19fca:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   19fcc:	2224      	movs	r2, #36	; 0x24
   19fce:	5cb2      	ldrb	r2, [r6, r2]
   19fd0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   19fd2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   19fd4:	2225      	movs	r2, #37	; 0x25
   19fd6:	5cb2      	ldrb	r2, [r6, r2]
   19fd8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   19fda:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
   19fdc:	7ab1      	ldrb	r1, [r6, #10]
   19fde:	7af2      	ldrb	r2, [r6, #11]
   19fe0:	4311      	orrs	r1, r2
   19fe2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
   19fe4:	8933      	ldrh	r3, [r6, #8]
   19fe6:	2bff      	cmp	r3, #255	; 0xff
   19fe8:	d100      	bne.n	19fec <usart_init+0x184>
   19fea:	e081      	b.n	1a0f0 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   19fec:	2280      	movs	r2, #128	; 0x80
   19fee:	0452      	lsls	r2, r2, #17
   19ff0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
   19ff2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
   19ff4:	232c      	movs	r3, #44	; 0x2c
   19ff6:	5cf3      	ldrb	r3, [r6, r3]
   19ff8:	2b00      	cmp	r3, #0
   19ffa:	d103      	bne.n	1a004 <usart_init+0x19c>
   19ffc:	4b62      	ldr	r3, [pc, #392]	; (1a188 <usart_init+0x320>)
   19ffe:	789b      	ldrb	r3, [r3, #2]
   1a000:	079b      	lsls	r3, r3, #30
   1a002:	d501      	bpl.n	1a008 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   1a004:	2380      	movs	r3, #128	; 0x80
   1a006:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
   1a008:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   1a00a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1a00c:	2b00      	cmp	r3, #0
   1a00e:	d1fc      	bne.n	1a00a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
   1a010:	4643      	mov	r3, r8
   1a012:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1a014:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   1a016:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1a018:	2b00      	cmp	r3, #0
   1a01a:	d1fc      	bne.n	1a016 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
   1a01c:	4643      	mov	r3, r8
   1a01e:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1a020:	ab0e      	add	r3, sp, #56	; 0x38
   1a022:	2280      	movs	r2, #128	; 0x80
   1a024:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1a026:	2200      	movs	r2, #0
   1a028:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
   1a02a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   1a02c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
   1a02e:	6b33      	ldr	r3, [r6, #48]	; 0x30
   1a030:	930a      	str	r3, [sp, #40]	; 0x28
   1a032:	6b73      	ldr	r3, [r6, #52]	; 0x34
   1a034:	930b      	str	r3, [sp, #44]	; 0x2c
   1a036:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1a038:	930c      	str	r3, [sp, #48]	; 0x30
   1a03a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   1a03c:	9302      	str	r3, [sp, #8]
   1a03e:	930d      	str	r3, [sp, #52]	; 0x34
   1a040:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
   1a042:	ae0a      	add	r6, sp, #40	; 0x28
   1a044:	e063      	b.n	1a10e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   1a046:	2308      	movs	r3, #8
   1a048:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   1a04a:	3b07      	subs	r3, #7
   1a04c:	9307      	str	r3, [sp, #28]
   1a04e:	e77a      	b.n	19f46 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
   1a050:	6833      	ldr	r3, [r6, #0]
   1a052:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
   1a054:	68f3      	ldr	r3, [r6, #12]
   1a056:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
   1a058:	6973      	ldr	r3, [r6, #20]
   1a05a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   1a05c:	7e33      	ldrb	r3, [r6, #24]
   1a05e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   1a060:	2326      	movs	r3, #38	; 0x26
   1a062:	5cf3      	ldrb	r3, [r6, r3]
   1a064:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
   1a066:	6873      	ldr	r3, [r6, #4]
   1a068:	4699      	mov	r9, r3
	switch (transfer_mode)
   1a06a:	2b00      	cmp	r3, #0
   1a06c:	d018      	beq.n	1a0a0 <usart_init+0x238>
   1a06e:	2380      	movs	r3, #128	; 0x80
   1a070:	055b      	lsls	r3, r3, #21
   1a072:	4599      	cmp	r9, r3
   1a074:	d001      	beq.n	1a07a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
   1a076:	2000      	movs	r0, #0
   1a078:	e025      	b.n	1a0c6 <usart_init+0x25e>
			if (!config->use_external_clock) {
   1a07a:	2327      	movs	r3, #39	; 0x27
   1a07c:	5cf3      	ldrb	r3, [r6, r3]
   1a07e:	2b00      	cmp	r3, #0
   1a080:	d000      	beq.n	1a084 <usart_init+0x21c>
   1a082:	e775      	b.n	19f70 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   1a084:	6a33      	ldr	r3, [r6, #32]
   1a086:	001f      	movs	r7, r3
   1a088:	b2c0      	uxtb	r0, r0
   1a08a:	4b40      	ldr	r3, [pc, #256]	; (1a18c <usart_init+0x324>)
   1a08c:	4798      	blx	r3
   1a08e:	0001      	movs	r1, r0
   1a090:	220e      	movs	r2, #14
   1a092:	ab06      	add	r3, sp, #24
   1a094:	469c      	mov	ip, r3
   1a096:	4462      	add	r2, ip
   1a098:	0038      	movs	r0, r7
   1a09a:	4b3d      	ldr	r3, [pc, #244]	; (1a190 <usart_init+0x328>)
   1a09c:	4798      	blx	r3
   1a09e:	e012      	b.n	1a0c6 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   1a0a0:	2308      	movs	r3, #8
   1a0a2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1a0a4:	2300      	movs	r3, #0
   1a0a6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
   1a0a8:	2327      	movs	r3, #39	; 0x27
   1a0aa:	5cf3      	ldrb	r3, [r6, r3]
   1a0ac:	2b00      	cmp	r3, #0
   1a0ae:	d00e      	beq.n	1a0ce <usart_init+0x266>
				status_code =
   1a0b0:	9b06      	ldr	r3, [sp, #24]
   1a0b2:	9300      	str	r3, [sp, #0]
   1a0b4:	9b07      	ldr	r3, [sp, #28]
   1a0b6:	220e      	movs	r2, #14
   1a0b8:	a906      	add	r1, sp, #24
   1a0ba:	468c      	mov	ip, r1
   1a0bc:	4462      	add	r2, ip
   1a0be:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   1a0c0:	6a30      	ldr	r0, [r6, #32]
   1a0c2:	4f34      	ldr	r7, [pc, #208]	; (1a194 <usart_init+0x32c>)
   1a0c4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
   1a0c6:	2800      	cmp	r0, #0
   1a0c8:	d000      	beq.n	1a0cc <usart_init+0x264>
   1a0ca:	e6e0      	b.n	19e8e <usart_init+0x26>
   1a0cc:	e750      	b.n	19f70 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
   1a0ce:	6a33      	ldr	r3, [r6, #32]
   1a0d0:	001f      	movs	r7, r3
   1a0d2:	b2c0      	uxtb	r0, r0
   1a0d4:	4b2d      	ldr	r3, [pc, #180]	; (1a18c <usart_init+0x324>)
   1a0d6:	4798      	blx	r3
   1a0d8:	0001      	movs	r1, r0
				status_code =
   1a0da:	9b06      	ldr	r3, [sp, #24]
   1a0dc:	9300      	str	r3, [sp, #0]
   1a0de:	9b07      	ldr	r3, [sp, #28]
   1a0e0:	220e      	movs	r2, #14
   1a0e2:	a806      	add	r0, sp, #24
   1a0e4:	4684      	mov	ip, r0
   1a0e6:	4462      	add	r2, ip
   1a0e8:	0038      	movs	r0, r7
   1a0ea:	4f2a      	ldr	r7, [pc, #168]	; (1a194 <usart_init+0x32c>)
   1a0ec:	47b8      	blx	r7
   1a0ee:	e7ea      	b.n	1a0c6 <usart_init+0x25e>
		if(config->lin_slave_enable) {
   1a0f0:	7ef3      	ldrb	r3, [r6, #27]
   1a0f2:	2b00      	cmp	r3, #0
   1a0f4:	d100      	bne.n	1a0f8 <usart_init+0x290>
   1a0f6:	e77d      	b.n	19ff4 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   1a0f8:	2380      	movs	r3, #128	; 0x80
   1a0fa:	04db      	lsls	r3, r3, #19
   1a0fc:	431f      	orrs	r7, r3
   1a0fe:	e779      	b.n	19ff4 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1a100:	0020      	movs	r0, r4
   1a102:	4b25      	ldr	r3, [pc, #148]	; (1a198 <usart_init+0x330>)
   1a104:	4798      	blx	r3
   1a106:	e007      	b.n	1a118 <usart_init+0x2b0>
   1a108:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   1a10a:	2f04      	cmp	r7, #4
   1a10c:	d00d      	beq.n	1a12a <usart_init+0x2c2>
   1a10e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
   1a110:	00bb      	lsls	r3, r7, #2
   1a112:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
   1a114:	2800      	cmp	r0, #0
   1a116:	d0f3      	beq.n	1a100 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
   1a118:	1c43      	adds	r3, r0, #1
   1a11a:	d0f5      	beq.n	1a108 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   1a11c:	a90e      	add	r1, sp, #56	; 0x38
   1a11e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1a120:	0c00      	lsrs	r0, r0, #16
   1a122:	b2c0      	uxtb	r0, r0
   1a124:	4b1d      	ldr	r3, [pc, #116]	; (1a19c <usart_init+0x334>)
   1a126:	4798      	blx	r3
   1a128:	e7ee      	b.n	1a108 <usart_init+0x2a0>
		module->callback[i]            = NULL;
   1a12a:	2300      	movs	r3, #0
   1a12c:	60eb      	str	r3, [r5, #12]
   1a12e:	612b      	str	r3, [r5, #16]
   1a130:	616b      	str	r3, [r5, #20]
   1a132:	61ab      	str	r3, [r5, #24]
   1a134:	61eb      	str	r3, [r5, #28]
   1a136:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
   1a138:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   1a13a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   1a13c:	2200      	movs	r2, #0
   1a13e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   1a140:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   1a142:	3330      	adds	r3, #48	; 0x30
   1a144:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
   1a146:	3301      	adds	r3, #1
   1a148:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
   1a14a:	3301      	adds	r3, #1
   1a14c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
   1a14e:	3301      	adds	r3, #1
   1a150:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   1a152:	6828      	ldr	r0, [r5, #0]
   1a154:	4b07      	ldr	r3, [pc, #28]	; (1a174 <usart_init+0x30c>)
   1a156:	4798      	blx	r3
   1a158:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   1a15a:	4911      	ldr	r1, [pc, #68]	; (1a1a0 <usart_init+0x338>)
   1a15c:	4b11      	ldr	r3, [pc, #68]	; (1a1a4 <usart_init+0x33c>)
   1a15e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   1a160:	00a4      	lsls	r4, r4, #2
   1a162:	4b11      	ldr	r3, [pc, #68]	; (1a1a8 <usart_init+0x340>)
   1a164:	50e5      	str	r5, [r4, r3]
	return status_code;
   1a166:	2000      	movs	r0, #0
   1a168:	e691      	b.n	19e8e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1a16a:	2310      	movs	r3, #16
   1a16c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1a16e:	2300      	movs	r3, #0
   1a170:	9307      	str	r3, [sp, #28]
   1a172:	e6e8      	b.n	19f46 <usart_init+0xde>
   1a174:	0001966d 	.word	0x0001966d
   1a178:	40000400 	.word	0x40000400
   1a17c:	0001a9f1 	.word	0x0001a9f1
   1a180:	0001a965 	.word	0x0001a965
   1a184:	000194a9 	.word	0x000194a9
   1a188:	41002000 	.word	0x41002000
   1a18c:	0001aa0d 	.word	0x0001aa0d
   1a190:	000193eb 	.word	0x000193eb
   1a194:	00019415 	.word	0x00019415
   1a198:	000194f5 	.word	0x000194f5
   1a19c:	0001aae9 	.word	0x0001aae9
   1a1a0:	0001a2ad 	.word	0x0001a2ad
   1a1a4:	000196a9 	.word	0x000196a9
   1a1a8:	20003ecc 	.word	0x20003ecc

0001a1ac <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   1a1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a1ae:	0006      	movs	r6, r0
   1a1b0:	000c      	movs	r4, r1
   1a1b2:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1a1b4:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
   1a1b6:	4b0a      	ldr	r3, [pc, #40]	; (1a1e0 <_usart_write_buffer+0x34>)
   1a1b8:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   1a1ba:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
   1a1bc:	b29b      	uxth	r3, r3
   1a1be:	2b00      	cmp	r3, #0
   1a1c0:	d003      	beq.n	1a1ca <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
   1a1c2:	4b08      	ldr	r3, [pc, #32]	; (1a1e4 <_usart_write_buffer+0x38>)
   1a1c4:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
   1a1c6:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
   1a1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
   1a1ca:	85f5      	strh	r5, [r6, #46]	; 0x2e
   1a1cc:	4b05      	ldr	r3, [pc, #20]	; (1a1e4 <_usart_write_buffer+0x38>)
   1a1ce:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
   1a1d0:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   1a1d2:	2205      	movs	r2, #5
   1a1d4:	2333      	movs	r3, #51	; 0x33
   1a1d6:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   1a1d8:	3b32      	subs	r3, #50	; 0x32
   1a1da:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
   1a1dc:	2000      	movs	r0, #0
   1a1de:	e7f3      	b.n	1a1c8 <_usart_write_buffer+0x1c>
   1a1e0:	00018e59 	.word	0x00018e59
   1a1e4:	00018e99 	.word	0x00018e99

0001a1e8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   1a1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a1ea:	0004      	movs	r4, r0
   1a1ec:	000d      	movs	r5, r1
   1a1ee:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1a1f0:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
   1a1f2:	4b0f      	ldr	r3, [pc, #60]	; (1a230 <_usart_read_buffer+0x48>)
   1a1f4:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   1a1f6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   1a1f8:	b29b      	uxth	r3, r3
   1a1fa:	2b00      	cmp	r3, #0
   1a1fc:	d003      	beq.n	1a206 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
   1a1fe:	4b0d      	ldr	r3, [pc, #52]	; (1a234 <_usart_read_buffer+0x4c>)
   1a200:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
   1a202:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
   1a204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
   1a206:	85a6      	strh	r6, [r4, #44]	; 0x2c
   1a208:	4b0a      	ldr	r3, [pc, #40]	; (1a234 <_usart_read_buffer+0x4c>)
   1a20a:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
   1a20c:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   1a20e:	2205      	movs	r2, #5
   1a210:	2332      	movs	r3, #50	; 0x32
   1a212:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   1a214:	3b2e      	subs	r3, #46	; 0x2e
   1a216:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
   1a218:	7a23      	ldrb	r3, [r4, #8]
   1a21a:	2b00      	cmp	r3, #0
   1a21c:	d001      	beq.n	1a222 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   1a21e:	2320      	movs	r3, #32
   1a220:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
   1a222:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
   1a224:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
   1a226:	2b00      	cmp	r3, #0
   1a228:	d0ec      	beq.n	1a204 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   1a22a:	2308      	movs	r3, #8
   1a22c:	75bb      	strb	r3, [r7, #22]
   1a22e:	e7e9      	b.n	1a204 <_usart_read_buffer+0x1c>
   1a230:	00018e59 	.word	0x00018e59
   1a234:	00018e99 	.word	0x00018e99

0001a238 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1a238:	1c93      	adds	r3, r2, #2
   1a23a:	009b      	lsls	r3, r3, #2
   1a23c:	18c3      	adds	r3, r0, r3
   1a23e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   1a240:	2130      	movs	r1, #48	; 0x30
   1a242:	2301      	movs	r3, #1
   1a244:	4093      	lsls	r3, r2
   1a246:	001a      	movs	r2, r3
   1a248:	5c43      	ldrb	r3, [r0, r1]
   1a24a:	4313      	orrs	r3, r2
   1a24c:	5443      	strb	r3, [r0, r1]
}
   1a24e:	4770      	bx	lr

0001a250 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   1a250:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1a252:	2317      	movs	r3, #23
	if (length == 0) {
   1a254:	2a00      	cmp	r2, #0
   1a256:	d101      	bne.n	1a25c <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
   1a258:	0018      	movs	r0, r3
   1a25a:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
   1a25c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
   1a25e:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
   1a260:	2c00      	cmp	r4, #0
   1a262:	d0f9      	beq.n	1a258 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
   1a264:	4b01      	ldr	r3, [pc, #4]	; (1a26c <usart_write_buffer_job+0x1c>)
   1a266:	4798      	blx	r3
   1a268:	0003      	movs	r3, r0
   1a26a:	e7f5      	b.n	1a258 <usart_write_buffer_job+0x8>
   1a26c:	0001a1ad 	.word	0x0001a1ad

0001a270 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   1a270:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1a272:	2317      	movs	r3, #23
	if (length == 0) {
   1a274:	2a00      	cmp	r2, #0
   1a276:	d101      	bne.n	1a27c <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
   1a278:	0018      	movs	r0, r3
   1a27a:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
   1a27c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
   1a27e:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
   1a280:	2c00      	cmp	r4, #0
   1a282:	d0f9      	beq.n	1a278 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
   1a284:	4b01      	ldr	r3, [pc, #4]	; (1a28c <usart_read_buffer_job+0x1c>)
   1a286:	4798      	blx	r3
   1a288:	0003      	movs	r3, r0
   1a28a:	e7f5      	b.n	1a278 <usart_read_buffer_job+0x8>
   1a28c:	0001a1e9 	.word	0x0001a1e9

0001a290 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   1a290:	2900      	cmp	r1, #0
   1a292:	d003      	beq.n	1a29c <usart_get_job_status+0xc>
   1a294:	2901      	cmp	r1, #1
   1a296:	d005      	beq.n	1a2a4 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   1a298:	2017      	movs	r0, #23
   1a29a:	e002      	b.n	1a2a2 <usart_get_job_status+0x12>
			status_code = module->rx_status;
   1a29c:	2332      	movs	r3, #50	; 0x32
   1a29e:	5cc0      	ldrb	r0, [r0, r3]
   1a2a0:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
   1a2a2:	4770      	bx	lr
			status_code = module->tx_status;
   1a2a4:	2333      	movs	r3, #51	; 0x33
   1a2a6:	5cc0      	ldrb	r0, [r0, r3]
   1a2a8:	b2c0      	uxtb	r0, r0
			break;
   1a2aa:	e7fa      	b.n	1a2a2 <usart_get_job_status+0x12>

0001a2ac <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   1a2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
   1a2ae:	0080      	lsls	r0, r0, #2
   1a2b0:	4b62      	ldr	r3, [pc, #392]	; (1a43c <_usart_interrupt_handler+0x190>)
   1a2b2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   1a2b4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   1a2b6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
   1a2b8:	2b00      	cmp	r3, #0
   1a2ba:	d1fc      	bne.n	1a2b6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   1a2bc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
   1a2be:	7da6      	ldrb	r6, [r4, #22]
   1a2c0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
   1a2c2:	2330      	movs	r3, #48	; 0x30
   1a2c4:	5ceb      	ldrb	r3, [r5, r3]
   1a2c6:	2231      	movs	r2, #49	; 0x31
   1a2c8:	5caf      	ldrb	r7, [r5, r2]
   1a2ca:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   1a2cc:	07f3      	lsls	r3, r6, #31
   1a2ce:	d522      	bpl.n	1a316 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
   1a2d0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   1a2d2:	b29b      	uxth	r3, r3
   1a2d4:	2b00      	cmp	r3, #0
   1a2d6:	d01c      	beq.n	1a312 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   1a2d8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1a2da:	7813      	ldrb	r3, [r2, #0]
   1a2dc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   1a2de:	1c51      	adds	r1, r2, #1
   1a2e0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1a2e2:	7969      	ldrb	r1, [r5, #5]
   1a2e4:	2901      	cmp	r1, #1
   1a2e6:	d00e      	beq.n	1a306 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   1a2e8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   1a2ea:	05db      	lsls	r3, r3, #23
   1a2ec:	0ddb      	lsrs	r3, r3, #23
   1a2ee:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   1a2f0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   1a2f2:	3b01      	subs	r3, #1
   1a2f4:	b29b      	uxth	r3, r3
   1a2f6:	85eb      	strh	r3, [r5, #46]	; 0x2e
   1a2f8:	2b00      	cmp	r3, #0
   1a2fa:	d10c      	bne.n	1a316 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   1a2fc:	3301      	adds	r3, #1
   1a2fe:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   1a300:	3301      	adds	r3, #1
   1a302:	75a3      	strb	r3, [r4, #22]
   1a304:	e007      	b.n	1a316 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   1a306:	7851      	ldrb	r1, [r2, #1]
   1a308:	0209      	lsls	r1, r1, #8
   1a30a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
   1a30c:	3202      	adds	r2, #2
   1a30e:	62aa      	str	r2, [r5, #40]	; 0x28
   1a310:	e7eb      	b.n	1a2ea <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   1a312:	2301      	movs	r3, #1
   1a314:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   1a316:	07b3      	lsls	r3, r6, #30
   1a318:	d506      	bpl.n	1a328 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   1a31a:	2302      	movs	r3, #2
   1a31c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
   1a31e:	2200      	movs	r2, #0
   1a320:	3331      	adds	r3, #49	; 0x31
   1a322:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   1a324:	07fb      	lsls	r3, r7, #31
   1a326:	d41a      	bmi.n	1a35e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   1a328:	0773      	lsls	r3, r6, #29
   1a32a:	d565      	bpl.n	1a3f8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
   1a32c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   1a32e:	b29b      	uxth	r3, r3
   1a330:	2b00      	cmp	r3, #0
   1a332:	d05f      	beq.n	1a3f4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   1a334:	8b63      	ldrh	r3, [r4, #26]
   1a336:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   1a338:	071a      	lsls	r2, r3, #28
   1a33a:	d414      	bmi.n	1a366 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   1a33c:	223f      	movs	r2, #63	; 0x3f
   1a33e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   1a340:	2b00      	cmp	r3, #0
   1a342:	d034      	beq.n	1a3ae <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   1a344:	079a      	lsls	r2, r3, #30
   1a346:	d511      	bpl.n	1a36c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   1a348:	221a      	movs	r2, #26
   1a34a:	2332      	movs	r3, #50	; 0x32
   1a34c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   1a34e:	3b30      	subs	r3, #48	; 0x30
   1a350:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
   1a352:	077b      	lsls	r3, r7, #29
   1a354:	d550      	bpl.n	1a3f8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   1a356:	0028      	movs	r0, r5
   1a358:	696b      	ldr	r3, [r5, #20]
   1a35a:	4798      	blx	r3
   1a35c:	e04c      	b.n	1a3f8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   1a35e:	0028      	movs	r0, r5
   1a360:	68eb      	ldr	r3, [r5, #12]
   1a362:	4798      	blx	r3
   1a364:	e7e0      	b.n	1a328 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   1a366:	2237      	movs	r2, #55	; 0x37
   1a368:	4013      	ands	r3, r2
   1a36a:	e7e9      	b.n	1a340 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   1a36c:	075a      	lsls	r2, r3, #29
   1a36e:	d505      	bpl.n	1a37c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
   1a370:	221e      	movs	r2, #30
   1a372:	2332      	movs	r3, #50	; 0x32
   1a374:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   1a376:	3b2e      	subs	r3, #46	; 0x2e
   1a378:	8363      	strh	r3, [r4, #26]
   1a37a:	e7ea      	b.n	1a352 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   1a37c:	07da      	lsls	r2, r3, #31
   1a37e:	d505      	bpl.n	1a38c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
   1a380:	2213      	movs	r2, #19
   1a382:	2332      	movs	r3, #50	; 0x32
   1a384:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   1a386:	3b31      	subs	r3, #49	; 0x31
   1a388:	8363      	strh	r3, [r4, #26]
   1a38a:	e7e2      	b.n	1a352 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   1a38c:	06da      	lsls	r2, r3, #27
   1a38e:	d505      	bpl.n	1a39c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
   1a390:	2242      	movs	r2, #66	; 0x42
   1a392:	2332      	movs	r3, #50	; 0x32
   1a394:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   1a396:	3b22      	subs	r3, #34	; 0x22
   1a398:	8363      	strh	r3, [r4, #26]
   1a39a:	e7da      	b.n	1a352 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   1a39c:	2220      	movs	r2, #32
   1a39e:	421a      	tst	r2, r3
   1a3a0:	d0d7      	beq.n	1a352 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   1a3a2:	3221      	adds	r2, #33	; 0x21
   1a3a4:	2332      	movs	r3, #50	; 0x32
   1a3a6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   1a3a8:	3b12      	subs	r3, #18
   1a3aa:	8363      	strh	r3, [r4, #26]
   1a3ac:	e7d1      	b.n	1a352 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   1a3ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1a3b0:	05db      	lsls	r3, r3, #23
   1a3b2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   1a3b4:	b2da      	uxtb	r2, r3
   1a3b6:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1a3b8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   1a3ba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1a3bc:	1c51      	adds	r1, r2, #1
   1a3be:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1a3c0:	7969      	ldrb	r1, [r5, #5]
   1a3c2:	2901      	cmp	r1, #1
   1a3c4:	d010      	beq.n	1a3e8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   1a3c6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   1a3c8:	3b01      	subs	r3, #1
   1a3ca:	b29b      	uxth	r3, r3
   1a3cc:	85ab      	strh	r3, [r5, #44]	; 0x2c
   1a3ce:	2b00      	cmp	r3, #0
   1a3d0:	d112      	bne.n	1a3f8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   1a3d2:	3304      	adds	r3, #4
   1a3d4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
   1a3d6:	2200      	movs	r2, #0
   1a3d8:	332e      	adds	r3, #46	; 0x2e
   1a3da:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
   1a3dc:	07bb      	lsls	r3, r7, #30
   1a3de:	d50b      	bpl.n	1a3f8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   1a3e0:	0028      	movs	r0, r5
   1a3e2:	692b      	ldr	r3, [r5, #16]
   1a3e4:	4798      	blx	r3
   1a3e6:	e007      	b.n	1a3f8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
   1a3e8:	0a1b      	lsrs	r3, r3, #8
   1a3ea:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
   1a3ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a3ee:	3301      	adds	r3, #1
   1a3f0:	626b      	str	r3, [r5, #36]	; 0x24
   1a3f2:	e7e8      	b.n	1a3c6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   1a3f4:	2304      	movs	r3, #4
   1a3f6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   1a3f8:	06f3      	lsls	r3, r6, #27
   1a3fa:	d504      	bpl.n	1a406 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   1a3fc:	2310      	movs	r3, #16
   1a3fe:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   1a400:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   1a402:	06fb      	lsls	r3, r7, #27
   1a404:	d40e      	bmi.n	1a424 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   1a406:	06b3      	lsls	r3, r6, #26
   1a408:	d504      	bpl.n	1a414 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   1a40a:	2320      	movs	r3, #32
   1a40c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   1a40e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   1a410:	073b      	lsls	r3, r7, #28
   1a412:	d40b      	bmi.n	1a42c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   1a414:	0733      	lsls	r3, r6, #28
   1a416:	d504      	bpl.n	1a422 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   1a418:	2308      	movs	r3, #8
   1a41a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   1a41c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   1a41e:	06bb      	lsls	r3, r7, #26
   1a420:	d408      	bmi.n	1a434 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
   1a422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   1a424:	0028      	movs	r0, r5
   1a426:	69eb      	ldr	r3, [r5, #28]
   1a428:	4798      	blx	r3
   1a42a:	e7ec      	b.n	1a406 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   1a42c:	0028      	movs	r0, r5
   1a42e:	69ab      	ldr	r3, [r5, #24]
   1a430:	4798      	blx	r3
   1a432:	e7ef      	b.n	1a414 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   1a434:	6a2b      	ldr	r3, [r5, #32]
   1a436:	0028      	movs	r0, r5
   1a438:	4798      	blx	r3
}
   1a43a:	e7f2      	b.n	1a422 <_usart_interrupt_handler+0x176>
   1a43c:	20003ecc 	.word	0x20003ecc

0001a440 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   1a440:	b510      	push	{r4, lr}
	switch (clock_source) {
   1a442:	2808      	cmp	r0, #8
   1a444:	d803      	bhi.n	1a44e <system_clock_source_get_hz+0xe>
   1a446:	0080      	lsls	r0, r0, #2
   1a448:	4b1c      	ldr	r3, [pc, #112]	; (1a4bc <system_clock_source_get_hz+0x7c>)
   1a44a:	581b      	ldr	r3, [r3, r0]
   1a44c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
   1a44e:	2000      	movs	r0, #0
   1a450:	e032      	b.n	1a4b8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
   1a452:	4b1b      	ldr	r3, [pc, #108]	; (1a4c0 <system_clock_source_get_hz+0x80>)
   1a454:	6918      	ldr	r0, [r3, #16]
   1a456:	e02f      	b.n	1a4b8 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   1a458:	4b1a      	ldr	r3, [pc, #104]	; (1a4c4 <system_clock_source_get_hz+0x84>)
   1a45a:	6a1b      	ldr	r3, [r3, #32]
   1a45c:	059b      	lsls	r3, r3, #22
   1a45e:	0f9b      	lsrs	r3, r3, #30
   1a460:	4819      	ldr	r0, [pc, #100]	; (1a4c8 <system_clock_source_get_hz+0x88>)
   1a462:	40d8      	lsrs	r0, r3
   1a464:	e028      	b.n	1a4b8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
   1a466:	4b16      	ldr	r3, [pc, #88]	; (1a4c0 <system_clock_source_get_hz+0x80>)
   1a468:	6958      	ldr	r0, [r3, #20]
   1a46a:	e025      	b.n	1a4b8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   1a46c:	4b14      	ldr	r3, [pc, #80]	; (1a4c0 <system_clock_source_get_hz+0x80>)
   1a46e:	681b      	ldr	r3, [r3, #0]
			return 0;
   1a470:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   1a472:	079b      	lsls	r3, r3, #30
   1a474:	d520      	bpl.n	1a4b8 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1a476:	4913      	ldr	r1, [pc, #76]	; (1a4c4 <system_clock_source_get_hz+0x84>)
   1a478:	2210      	movs	r2, #16
   1a47a:	68cb      	ldr	r3, [r1, #12]
   1a47c:	421a      	tst	r2, r3
   1a47e:	d0fc      	beq.n	1a47a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
   1a480:	4b0f      	ldr	r3, [pc, #60]	; (1a4c0 <system_clock_source_get_hz+0x80>)
   1a482:	681a      	ldr	r2, [r3, #0]
   1a484:	2324      	movs	r3, #36	; 0x24
   1a486:	4013      	ands	r3, r2
   1a488:	2b04      	cmp	r3, #4
   1a48a:	d001      	beq.n	1a490 <system_clock_source_get_hz+0x50>
			return 48000000UL;
   1a48c:	480f      	ldr	r0, [pc, #60]	; (1a4cc <system_clock_source_get_hz+0x8c>)
   1a48e:	e013      	b.n	1a4b8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1a490:	2000      	movs	r0, #0
   1a492:	4b0f      	ldr	r3, [pc, #60]	; (1a4d0 <system_clock_source_get_hz+0x90>)
   1a494:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
   1a496:	4b0a      	ldr	r3, [pc, #40]	; (1a4c0 <system_clock_source_get_hz+0x80>)
   1a498:	689b      	ldr	r3, [r3, #8]
   1a49a:	041b      	lsls	r3, r3, #16
   1a49c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1a49e:	4358      	muls	r0, r3
   1a4a0:	e00a      	b.n	1a4b8 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   1a4a2:	2350      	movs	r3, #80	; 0x50
   1a4a4:	4a07      	ldr	r2, [pc, #28]	; (1a4c4 <system_clock_source_get_hz+0x84>)
   1a4a6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
   1a4a8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   1a4aa:	075b      	lsls	r3, r3, #29
   1a4ac:	d504      	bpl.n	1a4b8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
   1a4ae:	4b04      	ldr	r3, [pc, #16]	; (1a4c0 <system_clock_source_get_hz+0x80>)
   1a4b0:	68d8      	ldr	r0, [r3, #12]
   1a4b2:	e001      	b.n	1a4b8 <system_clock_source_get_hz+0x78>
		return 32768UL;
   1a4b4:	2080      	movs	r0, #128	; 0x80
   1a4b6:	0200      	lsls	r0, r0, #8
	}
}
   1a4b8:	bd10      	pop	{r4, pc}
   1a4ba:	46c0      	nop			; (mov r8, r8)
   1a4bc:	000227d4 	.word	0x000227d4
   1a4c0:	2000331c 	.word	0x2000331c
   1a4c4:	40000800 	.word	0x40000800
   1a4c8:	007a1200 	.word	0x007a1200
   1a4cc:	02dc6c00 	.word	0x02dc6c00
   1a4d0:	0001aa0d 	.word	0x0001aa0d

0001a4d4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   1a4d4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   1a4d6:	490c      	ldr	r1, [pc, #48]	; (1a508 <system_clock_source_osc8m_set_config+0x34>)
   1a4d8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   1a4da:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
   1a4dc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
   1a4de:	7840      	ldrb	r0, [r0, #1]
   1a4e0:	2201      	movs	r2, #1
   1a4e2:	4010      	ands	r0, r2
   1a4e4:	0180      	lsls	r0, r0, #6
   1a4e6:	2640      	movs	r6, #64	; 0x40
   1a4e8:	43b3      	bics	r3, r6
   1a4ea:	4303      	orrs	r3, r0
   1a4ec:	402a      	ands	r2, r5
   1a4ee:	01d2      	lsls	r2, r2, #7
   1a4f0:	2080      	movs	r0, #128	; 0x80
   1a4f2:	4383      	bics	r3, r0
   1a4f4:	4313      	orrs	r3, r2
   1a4f6:	2203      	movs	r2, #3
   1a4f8:	4022      	ands	r2, r4
   1a4fa:	0212      	lsls	r2, r2, #8
   1a4fc:	4803      	ldr	r0, [pc, #12]	; (1a50c <system_clock_source_osc8m_set_config+0x38>)
   1a4fe:	4003      	ands	r3, r0
   1a500:	4313      	orrs	r3, r2
   1a502:	620b      	str	r3, [r1, #32]
}
   1a504:	bd70      	pop	{r4, r5, r6, pc}
   1a506:	46c0      	nop			; (mov r8, r8)
   1a508:	40000800 	.word	0x40000800
   1a50c:	fffffcff 	.word	0xfffffcff

0001a510 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   1a510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a512:	0005      	movs	r5, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   1a514:	68c4      	ldr	r4, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   1a516:	7d03      	ldrb	r3, [r0, #20]
   1a518:	2b01      	cmp	r3, #1
   1a51a:	d03b      	beq.n	1a594 <system_clock_source_dpll_set_config+0x84>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   1a51c:	68ab      	ldr	r3, [r5, #8]
   1a51e:	0118      	lsls	r0, r3, #4
   1a520:	0021      	movs	r1, r4
   1a522:	4b20      	ldr	r3, [pc, #128]	; (1a5a4 <system_clock_source_dpll_set_config+0x94>)
   1a524:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
   1a526:	220f      	movs	r2, #15
   1a528:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
   1a52a:	0903      	lsrs	r3, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   1a52c:	782e      	ldrb	r6, [r5, #0]
   1a52e:	01f6      	lsls	r6, r6, #7
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   1a530:	7869      	ldrb	r1, [r5, #1]
   1a532:	0189      	lsls	r1, r1, #6
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   1a534:	430e      	orrs	r6, r1
   1a536:	b2f6      	uxtb	r6, r6
	SYSCTRL->DPLLCTRLA.reg =
   1a538:	491b      	ldr	r1, [pc, #108]	; (1a5a8 <system_clock_source_dpll_set_config+0x98>)
   1a53a:	2744      	movs	r7, #68	; 0x44
   1a53c:	55ce      	strb	r6, [r1, r7]

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   1a53e:	0416      	lsls	r6, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
   1a540:	3b01      	subs	r3, #1
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   1a542:	051b      	lsls	r3, r3, #20
   1a544:	0d1b      	lsrs	r3, r3, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   1a546:	4333      	orrs	r3, r6
	SYSCTRL->DPLLRATIO.reg =
   1a548:	648b      	str	r3, [r1, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   1a54a:	78ab      	ldrb	r3, [r5, #2]
   1a54c:	031b      	lsls	r3, r3, #12
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   1a54e:	78ee      	ldrb	r6, [r5, #3]
   1a550:	00f6      	lsls	r6, r6, #3
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1a552:	4333      	orrs	r3, r6
   1a554:	792e      	ldrb	r6, [r5, #4]
   1a556:	00b6      	lsls	r6, r6, #2
   1a558:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   1a55a:	7caf      	ldrb	r7, [r5, #18]
   1a55c:	2603      	movs	r6, #3
   1a55e:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1a560:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   1a562:	8a2e      	ldrh	r6, [r5, #16]
   1a564:	0436      	lsls	r6, r6, #16
   1a566:	4f11      	ldr	r7, [pc, #68]	; (1a5ac <system_clock_source_dpll_set_config+0x9c>)
   1a568:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1a56a:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   1a56c:	7cee      	ldrb	r6, [r5, #19]
   1a56e:	0236      	lsls	r6, r6, #8
   1a570:	27e0      	movs	r7, #224	; 0xe0
   1a572:	00ff      	lsls	r7, r7, #3
   1a574:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1a576:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   1a578:	7d2e      	ldrb	r6, [r5, #20]
   1a57a:	0136      	lsls	r6, r6, #4
   1a57c:	2530      	movs	r5, #48	; 0x30
   1a57e:	4035      	ands	r5, r6
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1a580:	432b      	orrs	r3, r5
	SYSCTRL->DPLLCTRLB.reg =
   1a582:	64cb      	str	r3, [r1, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   1a584:	230f      	movs	r3, #15
   1a586:	4398      	bics	r0, r3
   1a588:	1880      	adds	r0, r0, r2
   1a58a:	4344      	muls	r4, r0
   1a58c:	0924      	lsrs	r4, r4, #4
	_system_clock_inst.dpll.frequency =
   1a58e:	4b08      	ldr	r3, [pc, #32]	; (1a5b0 <system_clock_source_dpll_set_config+0xa0>)
   1a590:	60dc      	str	r4, [r3, #12]
}
   1a592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
   1a594:	8a01      	ldrh	r1, [r0, #16]
   1a596:	3101      	adds	r1, #1
   1a598:	0049      	lsls	r1, r1, #1
   1a59a:	0020      	movs	r0, r4
   1a59c:	4b01      	ldr	r3, [pc, #4]	; (1a5a4 <system_clock_source_dpll_set_config+0x94>)
   1a59e:	4798      	blx	r3
   1a5a0:	0004      	movs	r4, r0
   1a5a2:	e7bb      	b.n	1a51c <system_clock_source_dpll_set_config+0xc>
   1a5a4:	0001f829 	.word	0x0001f829
   1a5a8:	40000800 	.word	0x40000800
   1a5ac:	07ff0000 	.word	0x07ff0000
   1a5b0:	2000331c 	.word	0x2000331c

0001a5b4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
   1a5b4:	2808      	cmp	r0, #8
   1a5b6:	d803      	bhi.n	1a5c0 <system_clock_source_enable+0xc>
   1a5b8:	0080      	lsls	r0, r0, #2
   1a5ba:	4b25      	ldr	r3, [pc, #148]	; (1a650 <system_clock_source_enable+0x9c>)
   1a5bc:	581b      	ldr	r3, [r3, r0]
   1a5be:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1a5c0:	2017      	movs	r0, #23
   1a5c2:	e044      	b.n	1a64e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   1a5c4:	4a23      	ldr	r2, [pc, #140]	; (1a654 <system_clock_source_enable+0xa0>)
   1a5c6:	6a13      	ldr	r3, [r2, #32]
   1a5c8:	2102      	movs	r1, #2
   1a5ca:	430b      	orrs	r3, r1
   1a5cc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
   1a5ce:	2000      	movs	r0, #0
   1a5d0:	e03d      	b.n	1a64e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   1a5d2:	4a20      	ldr	r2, [pc, #128]	; (1a654 <system_clock_source_enable+0xa0>)
   1a5d4:	6993      	ldr	r3, [r2, #24]
   1a5d6:	2102      	movs	r1, #2
   1a5d8:	430b      	orrs	r3, r1
   1a5da:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
   1a5dc:	2000      	movs	r0, #0
		break;
   1a5de:	e036      	b.n	1a64e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   1a5e0:	4a1c      	ldr	r2, [pc, #112]	; (1a654 <system_clock_source_enable+0xa0>)
   1a5e2:	8a13      	ldrh	r3, [r2, #16]
   1a5e4:	2102      	movs	r1, #2
   1a5e6:	430b      	orrs	r3, r1
   1a5e8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
   1a5ea:	2000      	movs	r0, #0
		break;
   1a5ec:	e02f      	b.n	1a64e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   1a5ee:	4a19      	ldr	r2, [pc, #100]	; (1a654 <system_clock_source_enable+0xa0>)
   1a5f0:	8a93      	ldrh	r3, [r2, #20]
   1a5f2:	2102      	movs	r1, #2
   1a5f4:	430b      	orrs	r3, r1
   1a5f6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
   1a5f8:	2000      	movs	r0, #0
		break;
   1a5fa:	e028      	b.n	1a64e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   1a5fc:	4916      	ldr	r1, [pc, #88]	; (1a658 <system_clock_source_enable+0xa4>)
   1a5fe:	680b      	ldr	r3, [r1, #0]
   1a600:	2202      	movs	r2, #2
   1a602:	4313      	orrs	r3, r2
   1a604:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   1a606:	4b13      	ldr	r3, [pc, #76]	; (1a654 <system_clock_source_enable+0xa0>)
   1a608:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1a60a:	0019      	movs	r1, r3
   1a60c:	320e      	adds	r2, #14
   1a60e:	68cb      	ldr	r3, [r1, #12]
   1a610:	421a      	tst	r2, r3
   1a612:	d0fc      	beq.n	1a60e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   1a614:	4a10      	ldr	r2, [pc, #64]	; (1a658 <system_clock_source_enable+0xa4>)
   1a616:	6891      	ldr	r1, [r2, #8]
   1a618:	4b0e      	ldr	r3, [pc, #56]	; (1a654 <system_clock_source_enable+0xa0>)
   1a61a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   1a61c:	6852      	ldr	r2, [r2, #4]
   1a61e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
   1a620:	2200      	movs	r2, #0
   1a622:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1a624:	0019      	movs	r1, r3
   1a626:	3210      	adds	r2, #16
   1a628:	68cb      	ldr	r3, [r1, #12]
   1a62a:	421a      	tst	r2, r3
   1a62c:	d0fc      	beq.n	1a628 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   1a62e:	4b0a      	ldr	r3, [pc, #40]	; (1a658 <system_clock_source_enable+0xa4>)
   1a630:	681b      	ldr	r3, [r3, #0]
   1a632:	b29b      	uxth	r3, r3
   1a634:	4a07      	ldr	r2, [pc, #28]	; (1a654 <system_clock_source_enable+0xa0>)
   1a636:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
   1a638:	2000      	movs	r0, #0
   1a63a:	e008      	b.n	1a64e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   1a63c:	4905      	ldr	r1, [pc, #20]	; (1a654 <system_clock_source_enable+0xa0>)
   1a63e:	2244      	movs	r2, #68	; 0x44
   1a640:	5c8b      	ldrb	r3, [r1, r2]
   1a642:	2002      	movs	r0, #2
   1a644:	4303      	orrs	r3, r0
   1a646:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
   1a648:	2000      	movs	r0, #0
		break;
   1a64a:	e000      	b.n	1a64e <system_clock_source_enable+0x9a>
		return STATUS_OK;
   1a64c:	2000      	movs	r0, #0
}
   1a64e:	4770      	bx	lr
   1a650:	000227f8 	.word	0x000227f8
   1a654:	40000800 	.word	0x40000800
   1a658:	2000331c 	.word	0x2000331c

0001a65c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   1a65c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a65e:	46d6      	mov	lr, sl
   1a660:	464f      	mov	r7, r9
   1a662:	4646      	mov	r6, r8
   1a664:	b5c0      	push	{r6, r7, lr}
   1a666:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   1a668:	22c2      	movs	r2, #194	; 0xc2
   1a66a:	00d2      	lsls	r2, r2, #3
   1a66c:	4b45      	ldr	r3, [pc, #276]	; (1a784 <system_clock_init+0x128>)
   1a66e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   1a670:	4a45      	ldr	r2, [pc, #276]	; (1a788 <system_clock_init+0x12c>)
   1a672:	6853      	ldr	r3, [r2, #4]
   1a674:	211e      	movs	r1, #30
   1a676:	438b      	bics	r3, r1
   1a678:	3918      	subs	r1, #24
   1a67a:	430b      	orrs	r3, r1
   1a67c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   1a67e:	2203      	movs	r2, #3
   1a680:	ab01      	add	r3, sp, #4
   1a682:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   1a684:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   1a686:	4d41      	ldr	r5, [pc, #260]	; (1a78c <system_clock_init+0x130>)
   1a688:	b2e0      	uxtb	r0, r4
   1a68a:	a901      	add	r1, sp, #4
   1a68c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   1a68e:	3401      	adds	r4, #1
   1a690:	2c25      	cmp	r4, #37	; 0x25
   1a692:	d1f9      	bne.n	1a688 <system_clock_init+0x2c>
	config->run_in_standby  = false;
   1a694:	a80b      	add	r0, sp, #44	; 0x2c
   1a696:	2500      	movs	r5, #0
   1a698:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
   1a69a:	2601      	movs	r6, #1
   1a69c:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   1a69e:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
   1a6a0:	4b3b      	ldr	r3, [pc, #236]	; (1a790 <system_clock_init+0x134>)
   1a6a2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   1a6a4:	2006      	movs	r0, #6
   1a6a6:	4b3b      	ldr	r3, [pc, #236]	; (1a794 <system_clock_init+0x138>)
   1a6a8:	4699      	mov	r9, r3
   1a6aa:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   1a6ac:	4b3a      	ldr	r3, [pc, #232]	; (1a798 <system_clock_init+0x13c>)
   1a6ae:	4798      	blx	r3
	config->high_when_disabled = false;
   1a6b0:	ac01      	add	r4, sp, #4
   1a6b2:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   1a6b4:	2306      	movs	r3, #6
   1a6b6:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
   1a6b8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   1a6ba:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   1a6bc:	3302      	adds	r3, #2
   1a6be:	6063      	str	r3, [r4, #4]
   1a6c0:	0021      	movs	r1, r4
   1a6c2:	2001      	movs	r0, #1
   1a6c4:	4b35      	ldr	r3, [pc, #212]	; (1a79c <system_clock_init+0x140>)
   1a6c6:	4698      	mov	r8, r3
   1a6c8:	4798      	blx	r3
   1a6ca:	2001      	movs	r0, #1
   1a6cc:	4f34      	ldr	r7, [pc, #208]	; (1a7a0 <system_clock_init+0x144>)
   1a6ce:	47b8      	blx	r7
	config->division_factor    = 1;
   1a6d0:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
   1a6d2:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
   1a6d4:	7265      	strb	r5, [r4, #9]
   1a6d6:	2303      	movs	r3, #3
   1a6d8:	469a      	mov	sl, r3
   1a6da:	7023      	strb	r3, [r4, #0]
   1a6dc:	7226      	strb	r6, [r4, #8]
   1a6de:	0021      	movs	r1, r4
   1a6e0:	2002      	movs	r0, #2
   1a6e2:	47c0      	blx	r8
   1a6e4:	2002      	movs	r0, #2
   1a6e6:	47b8      	blx	r7
	config->high_when_disabled = false;
   1a6e8:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
   1a6ea:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   1a6ec:	7265      	strb	r5, [r4, #9]
   1a6ee:	4653      	mov	r3, sl
   1a6f0:	7023      	strb	r3, [r4, #0]
   1a6f2:	2320      	movs	r3, #32
   1a6f4:	6063      	str	r3, [r4, #4]
   1a6f6:	0021      	movs	r1, r4
   1a6f8:	2004      	movs	r0, #4
   1a6fa:	47c0      	blx	r8
   1a6fc:	2004      	movs	r0, #4
   1a6fe:	47b8      	blx	r7
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   1a700:	a90a      	add	r1, sp, #40	; 0x28
   1a702:	700e      	strb	r6, [r1, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   1a704:	2001      	movs	r0, #1
   1a706:	4b21      	ldr	r3, [pc, #132]	; (1a78c <system_clock_init+0x130>)
   1a708:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   1a70a:	2001      	movs	r0, #1
   1a70c:	4b25      	ldr	r3, [pc, #148]	; (1a7a4 <system_clock_init+0x148>)
   1a70e:	4798      	blx	r3
	config->run_in_standby      = false;
   1a710:	a804      	add	r0, sp, #16
   1a712:	7045      	strb	r5, [r0, #1]
	config->lock_bypass         = false;
   1a714:	7085      	strb	r5, [r0, #2]
	config->wake_up_fast        = false;
   1a716:	70c5      	strb	r5, [r0, #3]
	config->low_power_enable    = false;
   1a718:	7105      	strb	r5, [r0, #4]
	config->output_frequency    = 48000000;
   1a71a:	4b23      	ldr	r3, [pc, #140]	; (1a7a8 <system_clock_init+0x14c>)
   1a71c:	6083      	str	r3, [r0, #8]
	config->reference_divider   = 1;
   1a71e:	8206      	strh	r6, [r0, #16]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   1a720:	74c5      	strb	r5, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   1a722:	7485      	strb	r5, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
   1a724:	7005      	strb	r5, [r0, #0]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   1a726:	2302      	movs	r3, #2
   1a728:	7503      	strb	r3, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   1a72a:	4b20      	ldr	r3, [pc, #128]	; (1a7ac <system_clock_init+0x150>)
   1a72c:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
   1a72e:	4b20      	ldr	r3, [pc, #128]	; (1a7b0 <system_clock_init+0x154>)
   1a730:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   1a732:	2008      	movs	r0, #8
   1a734:	47c8      	blx	r9
		return ((SYSCTRL->DPLLSTATUS.reg &
   1a736:	4813      	ldr	r0, [pc, #76]	; (1a784 <system_clock_init+0x128>)
   1a738:	2150      	movs	r1, #80	; 0x50
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   1a73a:	2203      	movs	r2, #3
		return ((SYSCTRL->DPLLSTATUS.reg &
   1a73c:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   1a73e:	4013      	ands	r3, r2
   1a740:	2b03      	cmp	r3, #3
   1a742:	d1fb      	bne.n	1a73c <system_clock_init+0xe0>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   1a744:	490f      	ldr	r1, [pc, #60]	; (1a784 <system_clock_init+0x128>)
   1a746:	2244      	movs	r2, #68	; 0x44
   1a748:	5c88      	ldrb	r0, [r1, r2]
   1a74a:	3b83      	subs	r3, #131	; 0x83
   1a74c:	4303      	orrs	r3, r0
   1a74e:	548b      	strb	r3, [r1, r2]
	PM->CPUSEL.reg = (uint32_t)divider;
   1a750:	4a18      	ldr	r2, [pc, #96]	; (1a7b4 <system_clock_init+0x158>)
   1a752:	2300      	movs	r3, #0
   1a754:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
   1a756:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
   1a758:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
   1a75a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
   1a75c:	a901      	add	r1, sp, #4
   1a75e:	2201      	movs	r2, #1
   1a760:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
   1a762:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
   1a764:	720b      	strb	r3, [r1, #8]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   1a766:	3308      	adds	r3, #8
   1a768:	700b      	strb	r3, [r1, #0]
   1a76a:	724a      	strb	r2, [r1, #9]
   1a76c:	2000      	movs	r0, #0
   1a76e:	4b0b      	ldr	r3, [pc, #44]	; (1a79c <system_clock_init+0x140>)
   1a770:	4798      	blx	r3
   1a772:	2000      	movs	r0, #0
   1a774:	4b0a      	ldr	r3, [pc, #40]	; (1a7a0 <system_clock_init+0x144>)
   1a776:	4798      	blx	r3
#endif
}
   1a778:	b00c      	add	sp, #48	; 0x30
   1a77a:	bc1c      	pop	{r2, r3, r4}
   1a77c:	4690      	mov	r8, r2
   1a77e:	4699      	mov	r9, r3
   1a780:	46a2      	mov	sl, r4
   1a782:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a784:	40000800 	.word	0x40000800
   1a788:	41004000 	.word	0x41004000
   1a78c:	0001a9f1 	.word	0x0001a9f1
   1a790:	0001a4d5 	.word	0x0001a4d5
   1a794:	0001a5b5 	.word	0x0001a5b5
   1a798:	0001a7b9 	.word	0x0001a7b9
   1a79c:	0001a7dd 	.word	0x0001a7dd
   1a7a0:	0001a895 	.word	0x0001a895
   1a7a4:	0001a965 	.word	0x0001a965
   1a7a8:	02dc6c00 	.word	0x02dc6c00
   1a7ac:	000f4240 	.word	0x000f4240
   1a7b0:	0001a511 	.word	0x0001a511
   1a7b4:	40000400 	.word	0x40000400

0001a7b8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
   1a7b8:	4a06      	ldr	r2, [pc, #24]	; (1a7d4 <system_gclk_init+0x1c>)
   1a7ba:	6993      	ldr	r3, [r2, #24]
   1a7bc:	2108      	movs	r1, #8
   1a7be:	430b      	orrs	r3, r1
   1a7c0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   1a7c2:	2201      	movs	r2, #1
   1a7c4:	4b04      	ldr	r3, [pc, #16]	; (1a7d8 <system_gclk_init+0x20>)
   1a7c6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   1a7c8:	0019      	movs	r1, r3
   1a7ca:	780b      	ldrb	r3, [r1, #0]
   1a7cc:	4213      	tst	r3, r2
   1a7ce:	d1fc      	bne.n	1a7ca <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
   1a7d0:	4770      	bx	lr
   1a7d2:	46c0      	nop			; (mov r8, r8)
   1a7d4:	40000400 	.word	0x40000400
   1a7d8:	40000c00 	.word	0x40000c00

0001a7dc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   1a7dc:	b570      	push	{r4, r5, r6, lr}
   1a7de:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   1a7e0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   1a7e2:	780d      	ldrb	r5, [r1, #0]
   1a7e4:	022d      	lsls	r5, r5, #8
   1a7e6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   1a7e8:	784b      	ldrb	r3, [r1, #1]
   1a7ea:	2b00      	cmp	r3, #0
   1a7ec:	d002      	beq.n	1a7f4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   1a7ee:	2380      	movs	r3, #128	; 0x80
   1a7f0:	02db      	lsls	r3, r3, #11
   1a7f2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   1a7f4:	7a4b      	ldrb	r3, [r1, #9]
   1a7f6:	2b00      	cmp	r3, #0
   1a7f8:	d002      	beq.n	1a800 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   1a7fa:	2380      	movs	r3, #128	; 0x80
   1a7fc:	031b      	lsls	r3, r3, #12
   1a7fe:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   1a800:	6848      	ldr	r0, [r1, #4]
   1a802:	2801      	cmp	r0, #1
   1a804:	d910      	bls.n	1a828 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   1a806:	1e43      	subs	r3, r0, #1
   1a808:	4218      	tst	r0, r3
   1a80a:	d134      	bne.n	1a876 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   1a80c:	2802      	cmp	r0, #2
   1a80e:	d930      	bls.n	1a872 <system_gclk_gen_set_config+0x96>
   1a810:	2302      	movs	r3, #2
   1a812:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
   1a814:	3201      	adds	r2, #1
						mask <<= 1) {
   1a816:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
   1a818:	4298      	cmp	r0, r3
   1a81a:	d8fb      	bhi.n	1a814 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   1a81c:	0212      	lsls	r2, r2, #8
   1a81e:	4332      	orrs	r2, r6
   1a820:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   1a822:	2380      	movs	r3, #128	; 0x80
   1a824:	035b      	lsls	r3, r3, #13
   1a826:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   1a828:	7a0b      	ldrb	r3, [r1, #8]
   1a82a:	2b00      	cmp	r3, #0
   1a82c:	d002      	beq.n	1a834 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   1a82e:	2380      	movs	r3, #128	; 0x80
   1a830:	039b      	lsls	r3, r3, #14
   1a832:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1a834:	4a13      	ldr	r2, [pc, #76]	; (1a884 <system_gclk_gen_set_config+0xa8>)
   1a836:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
   1a838:	b25b      	sxtb	r3, r3
   1a83a:	2b00      	cmp	r3, #0
   1a83c:	dbfb      	blt.n	1a836 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
   1a83e:	4b12      	ldr	r3, [pc, #72]	; (1a888 <system_gclk_gen_set_config+0xac>)
   1a840:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1a842:	4b12      	ldr	r3, [pc, #72]	; (1a88c <system_gclk_gen_set_config+0xb0>)
   1a844:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1a846:	4a0f      	ldr	r2, [pc, #60]	; (1a884 <system_gclk_gen_set_config+0xa8>)
   1a848:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   1a84a:	b25b      	sxtb	r3, r3
   1a84c:	2b00      	cmp	r3, #0
   1a84e:	dbfb      	blt.n	1a848 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   1a850:	4b0c      	ldr	r3, [pc, #48]	; (1a884 <system_gclk_gen_set_config+0xa8>)
   1a852:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1a854:	001a      	movs	r2, r3
   1a856:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
   1a858:	b25b      	sxtb	r3, r3
   1a85a:	2b00      	cmp	r3, #0
   1a85c:	dbfb      	blt.n	1a856 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   1a85e:	4a09      	ldr	r2, [pc, #36]	; (1a884 <system_gclk_gen_set_config+0xa8>)
   1a860:	6853      	ldr	r3, [r2, #4]
   1a862:	2180      	movs	r1, #128	; 0x80
   1a864:	0249      	lsls	r1, r1, #9
   1a866:	400b      	ands	r3, r1
   1a868:	431d      	orrs	r5, r3
   1a86a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
   1a86c:	4b08      	ldr	r3, [pc, #32]	; (1a890 <system_gclk_gen_set_config+0xb4>)
   1a86e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1a870:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
   1a872:	2200      	movs	r2, #0
   1a874:	e7d2      	b.n	1a81c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   1a876:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
   1a878:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   1a87a:	2380      	movs	r3, #128	; 0x80
   1a87c:	029b      	lsls	r3, r3, #10
   1a87e:	431d      	orrs	r5, r3
   1a880:	e7d2      	b.n	1a828 <system_gclk_gen_set_config+0x4c>
   1a882:	46c0      	nop			; (mov r8, r8)
   1a884:	40000c00 	.word	0x40000c00
   1a888:	00018e59 	.word	0x00018e59
   1a88c:	40000c08 	.word	0x40000c08
   1a890:	00018e99 	.word	0x00018e99

0001a894 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   1a894:	b510      	push	{r4, lr}
   1a896:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1a898:	4a0b      	ldr	r2, [pc, #44]	; (1a8c8 <system_gclk_gen_enable+0x34>)
   1a89a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1a89c:	b25b      	sxtb	r3, r3
   1a89e:	2b00      	cmp	r3, #0
   1a8a0:	dbfb      	blt.n	1a89a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
   1a8a2:	4b0a      	ldr	r3, [pc, #40]	; (1a8cc <system_gclk_gen_enable+0x38>)
   1a8a4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1a8a6:	4b0a      	ldr	r3, [pc, #40]	; (1a8d0 <system_gclk_gen_enable+0x3c>)
   1a8a8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1a8aa:	4a07      	ldr	r2, [pc, #28]	; (1a8c8 <system_gclk_gen_enable+0x34>)
   1a8ac:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1a8ae:	b25b      	sxtb	r3, r3
   1a8b0:	2b00      	cmp	r3, #0
   1a8b2:	dbfb      	blt.n	1a8ac <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   1a8b4:	4a04      	ldr	r2, [pc, #16]	; (1a8c8 <system_gclk_gen_enable+0x34>)
   1a8b6:	6851      	ldr	r1, [r2, #4]
   1a8b8:	2380      	movs	r3, #128	; 0x80
   1a8ba:	025b      	lsls	r3, r3, #9
   1a8bc:	430b      	orrs	r3, r1
   1a8be:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
   1a8c0:	4b04      	ldr	r3, [pc, #16]	; (1a8d4 <system_gclk_gen_enable+0x40>)
   1a8c2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1a8c4:	bd10      	pop	{r4, pc}
   1a8c6:	46c0      	nop			; (mov r8, r8)
   1a8c8:	40000c00 	.word	0x40000c00
   1a8cc:	00018e59 	.word	0x00018e59
   1a8d0:	40000c04 	.word	0x40000c04
   1a8d4:	00018e99 	.word	0x00018e99

0001a8d8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   1a8d8:	b570      	push	{r4, r5, r6, lr}
   1a8da:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1a8dc:	4a1a      	ldr	r2, [pc, #104]	; (1a948 <system_gclk_gen_get_hz+0x70>)
   1a8de:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1a8e0:	b25b      	sxtb	r3, r3
   1a8e2:	2b00      	cmp	r3, #0
   1a8e4:	dbfb      	blt.n	1a8de <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
   1a8e6:	4b19      	ldr	r3, [pc, #100]	; (1a94c <system_gclk_gen_get_hz+0x74>)
   1a8e8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1a8ea:	4b19      	ldr	r3, [pc, #100]	; (1a950 <system_gclk_gen_get_hz+0x78>)
   1a8ec:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1a8ee:	4a16      	ldr	r2, [pc, #88]	; (1a948 <system_gclk_gen_get_hz+0x70>)
   1a8f0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1a8f2:	b25b      	sxtb	r3, r3
   1a8f4:	2b00      	cmp	r3, #0
   1a8f6:	dbfb      	blt.n	1a8f0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   1a8f8:	4e13      	ldr	r6, [pc, #76]	; (1a948 <system_gclk_gen_get_hz+0x70>)
   1a8fa:	6870      	ldr	r0, [r6, #4]
   1a8fc:	04c0      	lsls	r0, r0, #19
   1a8fe:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1a900:	4b14      	ldr	r3, [pc, #80]	; (1a954 <system_gclk_gen_get_hz+0x7c>)
   1a902:	4798      	blx	r3
   1a904:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1a906:	4b12      	ldr	r3, [pc, #72]	; (1a950 <system_gclk_gen_get_hz+0x78>)
   1a908:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   1a90a:	6876      	ldr	r6, [r6, #4]
   1a90c:	02f6      	lsls	r6, r6, #11
   1a90e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1a910:	4b11      	ldr	r3, [pc, #68]	; (1a958 <system_gclk_gen_get_hz+0x80>)
   1a912:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1a914:	4a0c      	ldr	r2, [pc, #48]	; (1a948 <system_gclk_gen_get_hz+0x70>)
   1a916:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1a918:	b25b      	sxtb	r3, r3
   1a91a:	2b00      	cmp	r3, #0
   1a91c:	dbfb      	blt.n	1a916 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   1a91e:	4b0a      	ldr	r3, [pc, #40]	; (1a948 <system_gclk_gen_get_hz+0x70>)
   1a920:	689c      	ldr	r4, [r3, #8]
   1a922:	0224      	lsls	r4, r4, #8
   1a924:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
   1a926:	4b0d      	ldr	r3, [pc, #52]	; (1a95c <system_gclk_gen_get_hz+0x84>)
   1a928:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   1a92a:	2e00      	cmp	r6, #0
   1a92c:	d107      	bne.n	1a93e <system_gclk_gen_get_hz+0x66>
   1a92e:	2c01      	cmp	r4, #1
   1a930:	d907      	bls.n	1a942 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
   1a932:	0021      	movs	r1, r4
   1a934:	0028      	movs	r0, r5
   1a936:	4b0a      	ldr	r3, [pc, #40]	; (1a960 <system_gclk_gen_get_hz+0x88>)
   1a938:	4798      	blx	r3
   1a93a:	0005      	movs	r5, r0
   1a93c:	e001      	b.n	1a942 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
   1a93e:	3401      	adds	r4, #1
   1a940:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
   1a942:	0028      	movs	r0, r5
   1a944:	bd70      	pop	{r4, r5, r6, pc}
   1a946:	46c0      	nop			; (mov r8, r8)
   1a948:	40000c00 	.word	0x40000c00
   1a94c:	00018e59 	.word	0x00018e59
   1a950:	40000c04 	.word	0x40000c04
   1a954:	0001a441 	.word	0x0001a441
   1a958:	40000c08 	.word	0x40000c08
   1a95c:	00018e99 	.word	0x00018e99
   1a960:	0001f829 	.word	0x0001f829

0001a964 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   1a964:	b510      	push	{r4, lr}
   1a966:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   1a968:	4b06      	ldr	r3, [pc, #24]	; (1a984 <system_gclk_chan_enable+0x20>)
   1a96a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1a96c:	4b06      	ldr	r3, [pc, #24]	; (1a988 <system_gclk_chan_enable+0x24>)
   1a96e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   1a970:	4a06      	ldr	r2, [pc, #24]	; (1a98c <system_gclk_chan_enable+0x28>)
   1a972:	8853      	ldrh	r3, [r2, #2]
   1a974:	2180      	movs	r1, #128	; 0x80
   1a976:	01c9      	lsls	r1, r1, #7
   1a978:	430b      	orrs	r3, r1
   1a97a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
   1a97c:	4b04      	ldr	r3, [pc, #16]	; (1a990 <system_gclk_chan_enable+0x2c>)
   1a97e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1a980:	bd10      	pop	{r4, pc}
   1a982:	46c0      	nop			; (mov r8, r8)
   1a984:	00018e59 	.word	0x00018e59
   1a988:	40000c02 	.word	0x40000c02
   1a98c:	40000c00 	.word	0x40000c00
   1a990:	00018e99 	.word	0x00018e99

0001a994 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   1a994:	b510      	push	{r4, lr}
   1a996:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   1a998:	4b0f      	ldr	r3, [pc, #60]	; (1a9d8 <system_gclk_chan_disable+0x44>)
   1a99a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1a99c:	4b0f      	ldr	r3, [pc, #60]	; (1a9dc <system_gclk_chan_disable+0x48>)
   1a99e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   1a9a0:	4a0f      	ldr	r2, [pc, #60]	; (1a9e0 <system_gclk_chan_disable+0x4c>)
   1a9a2:	8853      	ldrh	r3, [r2, #2]
   1a9a4:	051b      	lsls	r3, r3, #20
   1a9a6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
   1a9a8:	8853      	ldrh	r3, [r2, #2]
   1a9aa:	490e      	ldr	r1, [pc, #56]	; (1a9e4 <system_gclk_chan_disable+0x50>)
   1a9ac:	400b      	ands	r3, r1
   1a9ae:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   1a9b0:	8853      	ldrh	r3, [r2, #2]
   1a9b2:	490d      	ldr	r1, [pc, #52]	; (1a9e8 <system_gclk_chan_disable+0x54>)
   1a9b4:	400b      	ands	r3, r1
   1a9b6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   1a9b8:	0011      	movs	r1, r2
   1a9ba:	2280      	movs	r2, #128	; 0x80
   1a9bc:	01d2      	lsls	r2, r2, #7
   1a9be:	884b      	ldrh	r3, [r1, #2]
   1a9c0:	4213      	tst	r3, r2
   1a9c2:	d1fc      	bne.n	1a9be <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   1a9c4:	4906      	ldr	r1, [pc, #24]	; (1a9e0 <system_gclk_chan_disable+0x4c>)
   1a9c6:	884a      	ldrh	r2, [r1, #2]
   1a9c8:	0203      	lsls	r3, r0, #8
   1a9ca:	4806      	ldr	r0, [pc, #24]	; (1a9e4 <system_gclk_chan_disable+0x50>)
   1a9cc:	4002      	ands	r2, r0
   1a9ce:	4313      	orrs	r3, r2
   1a9d0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
   1a9d2:	4b06      	ldr	r3, [pc, #24]	; (1a9ec <system_gclk_chan_disable+0x58>)
   1a9d4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1a9d6:	bd10      	pop	{r4, pc}
   1a9d8:	00018e59 	.word	0x00018e59
   1a9dc:	40000c02 	.word	0x40000c02
   1a9e0:	40000c00 	.word	0x40000c00
   1a9e4:	fffff0ff 	.word	0xfffff0ff
   1a9e8:	ffffbfff 	.word	0xffffbfff
   1a9ec:	00018e99 	.word	0x00018e99

0001a9f0 <system_gclk_chan_set_config>:
{
   1a9f0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   1a9f2:	780c      	ldrb	r4, [r1, #0]
   1a9f4:	0224      	lsls	r4, r4, #8
   1a9f6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
   1a9f8:	4b02      	ldr	r3, [pc, #8]	; (1aa04 <system_gclk_chan_set_config+0x14>)
   1a9fa:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   1a9fc:	b2a4      	uxth	r4, r4
   1a9fe:	4b02      	ldr	r3, [pc, #8]	; (1aa08 <system_gclk_chan_set_config+0x18>)
   1aa00:	805c      	strh	r4, [r3, #2]
}
   1aa02:	bd10      	pop	{r4, pc}
   1aa04:	0001a995 	.word	0x0001a995
   1aa08:	40000c00 	.word	0x40000c00

0001aa0c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   1aa0c:	b510      	push	{r4, lr}
   1aa0e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   1aa10:	4b06      	ldr	r3, [pc, #24]	; (1aa2c <system_gclk_chan_get_hz+0x20>)
   1aa12:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1aa14:	4b06      	ldr	r3, [pc, #24]	; (1aa30 <system_gclk_chan_get_hz+0x24>)
   1aa16:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   1aa18:	4b06      	ldr	r3, [pc, #24]	; (1aa34 <system_gclk_chan_get_hz+0x28>)
   1aa1a:	885c      	ldrh	r4, [r3, #2]
   1aa1c:	0524      	lsls	r4, r4, #20
   1aa1e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
   1aa20:	4b05      	ldr	r3, [pc, #20]	; (1aa38 <system_gclk_chan_get_hz+0x2c>)
   1aa22:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   1aa24:	0020      	movs	r0, r4
   1aa26:	4b05      	ldr	r3, [pc, #20]	; (1aa3c <system_gclk_chan_get_hz+0x30>)
   1aa28:	4798      	blx	r3
}
   1aa2a:	bd10      	pop	{r4, pc}
   1aa2c:	00018e59 	.word	0x00018e59
   1aa30:	40000c02 	.word	0x40000c02
   1aa34:	40000c00 	.word	0x40000c00
   1aa38:	00018e99 	.word	0x00018e99
   1aa3c:	0001a8d9 	.word	0x0001a8d9

0001aa40 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   1aa40:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   1aa42:	78d3      	ldrb	r3, [r2, #3]
   1aa44:	2b00      	cmp	r3, #0
   1aa46:	d135      	bne.n	1aab4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   1aa48:	7813      	ldrb	r3, [r2, #0]
   1aa4a:	2b80      	cmp	r3, #128	; 0x80
   1aa4c:	d029      	beq.n	1aaa2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   1aa4e:	061b      	lsls	r3, r3, #24
   1aa50:	2480      	movs	r4, #128	; 0x80
   1aa52:	0264      	lsls	r4, r4, #9
   1aa54:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   1aa56:	7854      	ldrb	r4, [r2, #1]
   1aa58:	2502      	movs	r5, #2
   1aa5a:	43ac      	bics	r4, r5
   1aa5c:	d106      	bne.n	1aa6c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   1aa5e:	7894      	ldrb	r4, [r2, #2]
   1aa60:	2c00      	cmp	r4, #0
   1aa62:	d120      	bne.n	1aaa6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
   1aa64:	2480      	movs	r4, #128	; 0x80
   1aa66:	02a4      	lsls	r4, r4, #10
   1aa68:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   1aa6a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1aa6c:	7854      	ldrb	r4, [r2, #1]
   1aa6e:	3c01      	subs	r4, #1
   1aa70:	2c01      	cmp	r4, #1
   1aa72:	d91c      	bls.n	1aaae <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1aa74:	040d      	lsls	r5, r1, #16
   1aa76:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   1aa78:	24a0      	movs	r4, #160	; 0xa0
   1aa7a:	05e4      	lsls	r4, r4, #23
   1aa7c:	432c      	orrs	r4, r5
   1aa7e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1aa80:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   1aa82:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1aa84:	24d0      	movs	r4, #208	; 0xd0
   1aa86:	0624      	lsls	r4, r4, #24
   1aa88:	432c      	orrs	r4, r5
   1aa8a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1aa8c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   1aa8e:	78d4      	ldrb	r4, [r2, #3]
   1aa90:	2c00      	cmp	r4, #0
   1aa92:	d122      	bne.n	1aada <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   1aa94:	035b      	lsls	r3, r3, #13
   1aa96:	d51c      	bpl.n	1aad2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   1aa98:	7893      	ldrb	r3, [r2, #2]
   1aa9a:	2b01      	cmp	r3, #1
   1aa9c:	d01e      	beq.n	1aadc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
   1aa9e:	6141      	str	r1, [r0, #20]
   1aaa0:	e017      	b.n	1aad2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
   1aaa2:	2300      	movs	r3, #0
   1aaa4:	e7d7      	b.n	1aa56 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   1aaa6:	24c0      	movs	r4, #192	; 0xc0
   1aaa8:	02e4      	lsls	r4, r4, #11
   1aaaa:	4323      	orrs	r3, r4
   1aaac:	e7dd      	b.n	1aa6a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   1aaae:	4c0d      	ldr	r4, [pc, #52]	; (1aae4 <_system_pinmux_config+0xa4>)
   1aab0:	4023      	ands	r3, r4
   1aab2:	e7df      	b.n	1aa74 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
   1aab4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1aab6:	040c      	lsls	r4, r1, #16
   1aab8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   1aaba:	23a0      	movs	r3, #160	; 0xa0
   1aabc:	05db      	lsls	r3, r3, #23
   1aabe:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1aac0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   1aac2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1aac4:	23d0      	movs	r3, #208	; 0xd0
   1aac6:	061b      	lsls	r3, r3, #24
   1aac8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1aaca:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
   1aacc:	78d3      	ldrb	r3, [r2, #3]
   1aace:	2b00      	cmp	r3, #0
   1aad0:	d103      	bne.n	1aada <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1aad2:	7853      	ldrb	r3, [r2, #1]
   1aad4:	3b01      	subs	r3, #1
   1aad6:	2b01      	cmp	r3, #1
   1aad8:	d902      	bls.n	1aae0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
   1aada:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
   1aadc:	6181      	str	r1, [r0, #24]
   1aade:	e7f8      	b.n	1aad2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
   1aae0:	6081      	str	r1, [r0, #8]
}
   1aae2:	e7fa      	b.n	1aada <_system_pinmux_config+0x9a>
   1aae4:	fffbffff 	.word	0xfffbffff

0001aae8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   1aae8:	b510      	push	{r4, lr}
   1aaea:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
   1aaec:	09c1      	lsrs	r1, r0, #7
		return NULL;
   1aaee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1aaf0:	2900      	cmp	r1, #0
   1aaf2:	d104      	bne.n	1aafe <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
   1aaf4:	0943      	lsrs	r3, r0, #5
   1aaf6:	01db      	lsls	r3, r3, #7
   1aaf8:	4905      	ldr	r1, [pc, #20]	; (1ab10 <system_pinmux_pin_set_config+0x28>)
   1aafa:	468c      	mov	ip, r1
   1aafc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   1aafe:	241f      	movs	r4, #31
   1ab00:	4020      	ands	r0, r4
   1ab02:	2101      	movs	r1, #1
   1ab04:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
   1ab06:	0018      	movs	r0, r3
   1ab08:	4b02      	ldr	r3, [pc, #8]	; (1ab14 <system_pinmux_pin_set_config+0x2c>)
   1ab0a:	4798      	blx	r3
}
   1ab0c:	bd10      	pop	{r4, pc}
   1ab0e:	46c0      	nop			; (mov r8, r8)
   1ab10:	41004400 	.word	0x41004400
   1ab14:	0001aa41 	.word	0x0001aa41

0001ab18 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
   1ab18:	4770      	bx	lr
	...

0001ab1c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   1ab1c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   1ab1e:	4b05      	ldr	r3, [pc, #20]	; (1ab34 <system_init+0x18>)
   1ab20:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   1ab22:	4b05      	ldr	r3, [pc, #20]	; (1ab38 <system_init+0x1c>)
   1ab24:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   1ab26:	4b05      	ldr	r3, [pc, #20]	; (1ab3c <system_init+0x20>)
   1ab28:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   1ab2a:	4b05      	ldr	r3, [pc, #20]	; (1ab40 <system_init+0x24>)
   1ab2c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   1ab2e:	4b05      	ldr	r3, [pc, #20]	; (1ab44 <system_init+0x28>)
   1ab30:	4798      	blx	r3
}
   1ab32:	bd10      	pop	{r4, pc}
   1ab34:	0001a65d 	.word	0x0001a65d
   1ab38:	00018ec9 	.word	0x00018ec9
   1ab3c:	0001ab19 	.word	0x0001ab19
   1ab40:	00018fd9 	.word	0x00018fd9
   1ab44:	0001ab19 	.word	0x0001ab19

0001ab48 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
   1ab48:	4b09      	ldr	r3, [pc, #36]	; (1ab70 <_tcc_get_inst_index+0x28>)
   1ab4a:	4298      	cmp	r0, r3
   1ab4c:	d00c      	beq.n	1ab68 <_tcc_get_inst_index+0x20>
   1ab4e:	4b09      	ldr	r3, [pc, #36]	; (1ab74 <_tcc_get_inst_index+0x2c>)
   1ab50:	4298      	cmp	r0, r3
   1ab52:	d007      	beq.n	1ab64 <_tcc_get_inst_index+0x1c>
   1ab54:	4a08      	ldr	r2, [pc, #32]	; (1ab78 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   1ab56:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
   1ab58:	4290      	cmp	r0, r2
   1ab5a:	d001      	beq.n	1ab60 <_tcc_get_inst_index+0x18>
}
   1ab5c:	0018      	movs	r0, r3
   1ab5e:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   1ab60:	3302      	adds	r3, #2
   1ab62:	e002      	b.n	1ab6a <_tcc_get_inst_index+0x22>
   1ab64:	2301      	movs	r3, #1
   1ab66:	e000      	b.n	1ab6a <_tcc_get_inst_index+0x22>
   1ab68:	2300      	movs	r3, #0
			return i;
   1ab6a:	b2db      	uxtb	r3, r3
   1ab6c:	e7f6      	b.n	1ab5c <_tcc_get_inst_index+0x14>
   1ab6e:	46c0      	nop			; (mov r8, r8)
   1ab70:	42002000 	.word	0x42002000
   1ab74:	42002400 	.word	0x42002400
   1ab78:	42002800 	.word	0x42002800

0001ab7c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   1ab7c:	b510      	push	{r4, lr}
   1ab7e:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   1ab80:	0008      	movs	r0, r1
   1ab82:	4b4f      	ldr	r3, [pc, #316]	; (1acc0 <tcc_get_config_defaults+0x144>)
   1ab84:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
   1ab86:	2300      	movs	r3, #0
   1ab88:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   1ab8a:	0080      	lsls	r0, r0, #2
   1ab8c:	4a4d      	ldr	r2, [pc, #308]	; (1acc4 <tcc_get_config_defaults+0x148>)
   1ab8e:	5882      	ldr	r2, [r0, r2]
   1ab90:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   1ab92:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   1ab94:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   1ab96:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   1ab98:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
   1ab9a:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1ab9c:	61e3      	str	r3, [r4, #28]
   1ab9e:	6223      	str	r3, [r4, #32]
   1aba0:	6263      	str	r3, [r4, #36]	; 0x24
   1aba2:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1aba4:	7523      	strb	r3, [r4, #20]
   1aba6:	7563      	strb	r3, [r4, #21]
   1aba8:	75a3      	strb	r3, [r4, #22]
   1abaa:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   1abac:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   1abae:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1abb0:	7423      	strb	r3, [r4, #16]
   1abb2:	7463      	strb	r3, [r4, #17]
   1abb4:	74a3      	strb	r3, [r4, #18]
   1abb6:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   1abb8:	222c      	movs	r2, #44	; 0x2c
   1abba:	54a3      	strb	r3, [r4, r2]
   1abbc:	3201      	adds	r2, #1
   1abbe:	54a3      	strb	r3, [r4, r2]
   1abc0:	3201      	adds	r2, #1
   1abc2:	54a3      	strb	r3, [r4, r2]
   1abc4:	3201      	adds	r2, #1
   1abc6:	54a3      	strb	r3, [r4, r2]
   1abc8:	3201      	adds	r2, #1
   1abca:	54a3      	strb	r3, [r4, r2]
   1abcc:	3201      	adds	r2, #1
   1abce:	54a3      	strb	r3, [r4, r2]
   1abd0:	3201      	adds	r2, #1
   1abd2:	54a3      	strb	r3, [r4, r2]
   1abd4:	3201      	adds	r2, #1
   1abd6:	54a3      	strb	r3, [r4, r2]
   1abd8:	3201      	adds	r2, #1
   1abda:	54a3      	strb	r3, [r4, r2]
   1abdc:	3201      	adds	r2, #1
   1abde:	54a3      	strb	r3, [r4, r2]
   1abe0:	3201      	adds	r2, #1
   1abe2:	54a3      	strb	r3, [r4, r2]
   1abe4:	3201      	adds	r2, #1
   1abe6:	54a3      	strb	r3, [r4, r2]
   1abe8:	3201      	adds	r2, #1
   1abea:	54a3      	strb	r3, [r4, r2]
   1abec:	3201      	adds	r2, #1
   1abee:	54a3      	strb	r3, [r4, r2]
   1abf0:	3201      	adds	r2, #1
   1abf2:	54a3      	strb	r3, [r4, r2]
   1abf4:	3201      	adds	r2, #1
   1abf6:	54a3      	strb	r3, [r4, r2]
   1abf8:	3201      	adds	r2, #1
   1abfa:	54a3      	strb	r3, [r4, r2]
   1abfc:	3201      	adds	r2, #1
   1abfe:	54a3      	strb	r3, [r4, r2]
   1ac00:	3201      	adds	r2, #1
   1ac02:	54a3      	strb	r3, [r4, r2]
   1ac04:	3201      	adds	r2, #1
   1ac06:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   1ac08:	3201      	adds	r2, #1
   1ac0a:	54a3      	strb	r3, [r4, r2]
   1ac0c:	3201      	adds	r2, #1
   1ac0e:	54a3      	strb	r3, [r4, r2]
   1ac10:	3201      	adds	r2, #1
   1ac12:	54a3      	strb	r3, [r4, r2]
   1ac14:	3201      	adds	r2, #1
   1ac16:	54a3      	strb	r3, [r4, r2]
   1ac18:	3201      	adds	r2, #1
   1ac1a:	54a3      	strb	r3, [r4, r2]
   1ac1c:	3201      	adds	r2, #1
   1ac1e:	54a3      	strb	r3, [r4, r2]
   1ac20:	3201      	adds	r2, #1
   1ac22:	54a3      	strb	r3, [r4, r2]
   1ac24:	3201      	adds	r2, #1
   1ac26:	54a3      	strb	r3, [r4, r2]
   1ac28:	3201      	adds	r2, #1
   1ac2a:	54a3      	strb	r3, [r4, r2]
   1ac2c:	3201      	adds	r2, #1
   1ac2e:	54a3      	strb	r3, [r4, r2]
   1ac30:	3201      	adds	r2, #1
   1ac32:	54a3      	strb	r3, [r4, r2]
   1ac34:	3201      	adds	r2, #1
   1ac36:	54a3      	strb	r3, [r4, r2]
   1ac38:	3201      	adds	r2, #1
   1ac3a:	54a3      	strb	r3, [r4, r2]
   1ac3c:	3201      	adds	r2, #1
   1ac3e:	54a3      	strb	r3, [r4, r2]
   1ac40:	3201      	adds	r2, #1
   1ac42:	54a3      	strb	r3, [r4, r2]
   1ac44:	3201      	adds	r2, #1
   1ac46:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   1ac48:	3201      	adds	r2, #1
   1ac4a:	54a3      	strb	r3, [r4, r2]
   1ac4c:	3201      	adds	r2, #1
   1ac4e:	54a3      	strb	r3, [r4, r2]
   1ac50:	3201      	adds	r2, #1
   1ac52:	54a3      	strb	r3, [r4, r2]
   1ac54:	3201      	adds	r2, #1
   1ac56:	54a3      	strb	r3, [r4, r2]
   1ac58:	3201      	adds	r2, #1
   1ac5a:	54a3      	strb	r3, [r4, r2]
   1ac5c:	3201      	adds	r2, #1
   1ac5e:	54a3      	strb	r3, [r4, r2]
   1ac60:	3201      	adds	r2, #1
   1ac62:	54a3      	strb	r3, [r4, r2]
   1ac64:	3201      	adds	r2, #1
   1ac66:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   1ac68:	3241      	adds	r2, #65	; 0x41
   1ac6a:	54a3      	strb	r3, [r4, r2]
   1ac6c:	65a3      	str	r3, [r4, #88]	; 0x58
   1ac6e:	67a3      	str	r3, [r4, #120]	; 0x78
   1ac70:	3201      	adds	r2, #1
   1ac72:	54a3      	strb	r3, [r4, r2]
   1ac74:	65e3      	str	r3, [r4, #92]	; 0x5c
   1ac76:	67e3      	str	r3, [r4, #124]	; 0x7c
   1ac78:	3201      	adds	r2, #1
   1ac7a:	54a3      	strb	r3, [r4, r2]
   1ac7c:	6623      	str	r3, [r4, #96]	; 0x60
   1ac7e:	3a1a      	subs	r2, #26
   1ac80:	50a3      	str	r3, [r4, r2]
   1ac82:	321b      	adds	r2, #27
   1ac84:	54a3      	strb	r3, [r4, r2]
   1ac86:	6663      	str	r3, [r4, #100]	; 0x64
   1ac88:	3a17      	subs	r2, #23
   1ac8a:	50a3      	str	r3, [r4, r2]
   1ac8c:	3218      	adds	r2, #24
   1ac8e:	54a3      	strb	r3, [r4, r2]
   1ac90:	66a3      	str	r3, [r4, #104]	; 0x68
   1ac92:	3a14      	subs	r2, #20
   1ac94:	50a3      	str	r3, [r4, r2]
   1ac96:	3215      	adds	r2, #21
   1ac98:	54a3      	strb	r3, [r4, r2]
   1ac9a:	66e3      	str	r3, [r4, #108]	; 0x6c
   1ac9c:	3a11      	subs	r2, #17
   1ac9e:	50a3      	str	r3, [r4, r2]
   1aca0:	3212      	adds	r2, #18
   1aca2:	54a3      	strb	r3, [r4, r2]
   1aca4:	6723      	str	r3, [r4, #112]	; 0x70
   1aca6:	3a0e      	subs	r2, #14
   1aca8:	50a3      	str	r3, [r4, r2]
   1acaa:	320f      	adds	r2, #15
   1acac:	54a3      	strb	r3, [r4, r2]
   1acae:	6763      	str	r3, [r4, #116]	; 0x74
   1acb0:	3a0b      	subs	r2, #11
   1acb2:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   1acb4:	2101      	movs	r1, #1
   1acb6:	320c      	adds	r2, #12
   1acb8:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
   1acba:	3201      	adds	r2, #1
   1acbc:	54a3      	strb	r3, [r4, r2]
}
   1acbe:	bd10      	pop	{r4, pc}
   1acc0:	0001ab49 	.word	0x0001ab49
   1acc4:	00022830 	.word	0x00022830

0001acc8 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   1acc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1acca:	46de      	mov	lr, fp
   1accc:	4657      	mov	r7, sl
   1acce:	464e      	mov	r6, r9
   1acd0:	4645      	mov	r5, r8
   1acd2:	b5e0      	push	{r5, r6, r7, lr}
   1acd4:	b091      	sub	sp, #68	; 0x44
   1acd6:	9001      	str	r0, [sp, #4]
   1acd8:	000c      	movs	r4, r1
   1acda:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   1acdc:	0008      	movs	r0, r1
   1acde:	4bc3      	ldr	r3, [pc, #780]	; (1afec <tcc_init+0x324>)
   1ace0:	4798      	blx	r3
   1ace2:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   1ace4:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
   1ace6:	48c2      	ldr	r0, [pc, #776]	; (1aff0 <tcc_init+0x328>)
   1ace8:	6a02      	ldr	r2, [r0, #32]
   1acea:	009e      	lsls	r6, r3, #2
   1acec:	4fc1      	ldr	r7, [pc, #772]	; (1aff4 <tcc_init+0x32c>)
   1acee:	59f7      	ldr	r7, [r6, r7]
   1acf0:	433a      	orrs	r2, r7
   1acf2:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   1acf4:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
   1acf6:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   1acf8:	0792      	lsls	r2, r2, #30
   1acfa:	d506      	bpl.n	1ad0a <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
   1acfc:	b011      	add	sp, #68	; 0x44
   1acfe:	bc3c      	pop	{r2, r3, r4, r5}
   1ad00:	4690      	mov	r8, r2
   1ad02:	4699      	mov	r9, r3
   1ad04:	46a2      	mov	sl, r4
   1ad06:	46ab      	mov	fp, r5
   1ad08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   1ad0a:	6822      	ldr	r2, [r4, #0]
   1ad0c:	2701      	movs	r7, #1
   1ad0e:	4017      	ands	r7, r2
   1ad10:	d1f4      	bne.n	1acfc <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
   1ad12:	48b9      	ldr	r0, [pc, #740]	; (1aff8 <tcc_init+0x330>)
   1ad14:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
   1ad16:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
   1ad18:	682e      	ldr	r6, [r5, #0]
   1ad1a:	42b2      	cmp	r2, r6
   1ad1c:	d3ee      	bcc.n	1acfc <tcc_init+0x34>
		|| (config->counter.period > count_max)
   1ad1e:	686e      	ldr	r6, [r5, #4]
   1ad20:	42b2      	cmp	r2, r6
   1ad22:	d3eb      	bcc.n	1acfc <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
   1ad24:	69e8      	ldr	r0, [r5, #28]
   1ad26:	4282      	cmp	r2, r0
   1ad28:	d200      	bcs.n	1ad2c <tcc_init+0x64>
   1ad2a:	e1b9      	b.n	1b0a0 <tcc_init+0x3d8>
   1ad2c:	6a28      	ldr	r0, [r5, #32]
   1ad2e:	4282      	cmp	r2, r0
   1ad30:	d200      	bcs.n	1ad34 <tcc_init+0x6c>
   1ad32:	e1b7      	b.n	1b0a4 <tcc_init+0x3dc>
   1ad34:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1ad36:	4282      	cmp	r2, r0
   1ad38:	d200      	bcs.n	1ad3c <tcc_init+0x74>
   1ad3a:	e1b5      	b.n	1b0a8 <tcc_init+0x3e0>
   1ad3c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1ad3e:	4282      	cmp	r2, r0
   1ad40:	d200      	bcs.n	1ad44 <tcc_init+0x7c>
   1ad42:	e1b3      	b.n	1b0ac <tcc_init+0x3e4>
   1ad44:	2298      	movs	r2, #152	; 0x98
   1ad46:	4694      	mov	ip, r2
   1ad48:	44ac      	add	ip, r5
   1ad4a:	4662      	mov	r2, ip
   1ad4c:	9208      	str	r2, [sp, #32]
   1ad4e:	2000      	movs	r0, #0
   1ad50:	e003      	b.n	1ad5a <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1ad52:	3001      	adds	r0, #1
   1ad54:	3201      	adds	r2, #1
   1ad56:	2808      	cmp	r0, #8
   1ad58:	d008      	beq.n	1ad6c <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
   1ad5a:	7816      	ldrb	r6, [r2, #0]
   1ad5c:	2e00      	cmp	r6, #0
   1ad5e:	d0f8      	beq.n	1ad52 <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
   1ad60:	4ea6      	ldr	r6, [pc, #664]	; (1affc <tcc_init+0x334>)
   1ad62:	5c76      	ldrb	r6, [r6, r1]
   1ad64:	4286      	cmp	r6, r0
   1ad66:	dcf4      	bgt.n	1ad52 <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
   1ad68:	2017      	movs	r0, #23
   1ad6a:	e7c7      	b.n	1acfc <tcc_init+0x34>
   1ad6c:	2200      	movs	r2, #0
   1ad6e:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   1ad70:	2080      	movs	r0, #128	; 0x80
   1ad72:	0440      	lsls	r0, r0, #17
   1ad74:	4684      	mov	ip, r0
   1ad76:	e002      	b.n	1ad7e <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   1ad78:	3201      	adds	r2, #1
   1ad7a:	2a04      	cmp	r2, #4
   1ad7c:	d00e      	beq.n	1ad9c <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
   1ad7e:	18a8      	adds	r0, r5, r2
   1ad80:	7c00      	ldrb	r0, [r0, #16]
   1ad82:	2801      	cmp	r0, #1
   1ad84:	d1f8      	bne.n	1ad78 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
   1ad86:	489e      	ldr	r0, [pc, #632]	; (1b000 <tcc_init+0x338>)
   1ad88:	5c40      	ldrb	r0, [r0, r1]
   1ad8a:	4290      	cmp	r0, r2
   1ad8c:	da00      	bge.n	1ad90 <tcc_init+0xc8>
   1ad8e:	e18f      	b.n	1b0b0 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   1ad90:	4660      	mov	r0, ip
   1ad92:	4090      	lsls	r0, r2
   1ad94:	9e02      	ldr	r6, [sp, #8]
   1ad96:	4306      	orrs	r6, r0
   1ad98:	9602      	str	r6, [sp, #8]
   1ad9a:	e7ed      	b.n	1ad78 <tcc_init+0xb0>
	if (config->run_in_standby) {
   1ad9c:	329d      	adds	r2, #157	; 0x9d
   1ad9e:	5caa      	ldrb	r2, [r5, r2]
   1ada0:	2a00      	cmp	r2, #0
   1ada2:	d004      	beq.n	1adae <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   1ada4:	2280      	movs	r2, #128	; 0x80
   1ada6:	0112      	lsls	r2, r2, #4
   1ada8:	9902      	ldr	r1, [sp, #8]
   1adaa:	4311      	orrs	r1, r2
   1adac:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
   1adae:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   1adb0:	1e51      	subs	r1, r2, #1
   1adb2:	418a      	sbcs	r2, r1
   1adb4:	0092      	lsls	r2, r2, #2
   1adb6:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   1adb8:	7a6a      	ldrb	r2, [r5, #9]
   1adba:	2a01      	cmp	r2, #1
   1adbc:	d022      	beq.n	1ae04 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
   1adbe:	4a90      	ldr	r2, [pc, #576]	; (1b000 <tcc_init+0x338>)
   1adc0:	5cd2      	ldrb	r2, [r2, r3]
   1adc2:	0011      	movs	r1, r2
   1adc4:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
   1adc6:	2235      	movs	r2, #53	; 0x35
   1adc8:	5caa      	ldrb	r2, [r5, r2]
   1adca:	428a      	cmp	r2, r1
   1adcc:	d300      	bcc.n	1add0 <tcc_init+0x108>
   1adce:	e179      	b.n	1b0c4 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   1add0:	212c      	movs	r1, #44	; 0x2c
   1add2:	5c69      	ldrb	r1, [r5, r1]
   1add4:	290f      	cmp	r1, #15
   1add6:	d900      	bls.n	1adda <tcc_init+0x112>
   1add8:	e174      	b.n	1b0c4 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   1adda:	7b28      	ldrb	r0, [r5, #12]
   1addc:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   1adde:	7ae8      	ldrb	r0, [r5, #11]
   1ade0:	900b      	str	r0, [sp, #44]	; 0x2c
   1ade2:	202d      	movs	r0, #45	; 0x2d
   1ade4:	4682      	mov	sl, r0
   1ade6:	44aa      	add	sl, r5
   1ade8:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   1adea:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
   1adec:	ae0e      	add	r6, sp, #56	; 0x38
   1adee:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   1adf0:	26c0      	movs	r6, #192	; 0xc0
   1adf2:	0136      	lsls	r6, r6, #4
   1adf4:	46b1      	mov	r9, r6
   1adf6:	4684      	mov	ip, r0
   1adf8:	46a0      	mov	r8, r4
   1adfa:	0028      	movs	r0, r5
   1adfc:	4655      	mov	r5, sl
   1adfe:	9309      	str	r3, [sp, #36]	; 0x24
   1ae00:	4682      	mov	sl, r0
   1ae02:	e035      	b.n	1ae70 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
   1ae04:	9906      	ldr	r1, [sp, #24]
   1ae06:	4311      	orrs	r1, r2
   1ae08:	9106      	str	r1, [sp, #24]
   1ae0a:	e7d8      	b.n	1adbe <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   1ae0c:	0292      	lsls	r2, r2, #10
   1ae0e:	464f      	mov	r7, r9
   1ae10:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1ae12:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
   1ae14:	7919      	ldrb	r1, [r3, #4]
   1ae16:	468b      	mov	fp, r1
   1ae18:	2103      	movs	r1, #3
   1ae1a:	465f      	mov	r7, fp
   1ae1c:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1ae1e:	430a      	orrs	r2, r1
   1ae20:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
   1ae22:	795a      	ldrb	r2, [r3, #5]
   1ae24:	0152      	lsls	r2, r2, #5
   1ae26:	2160      	movs	r1, #96	; 0x60
   1ae28:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1ae2a:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
   1ae2c:	7999      	ldrb	r1, [r3, #6]
   1ae2e:	0209      	lsls	r1, r1, #8
   1ae30:	26c0      	movs	r6, #192	; 0xc0
   1ae32:	00b6      	lsls	r6, r6, #2
   1ae34:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1ae36:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   1ae38:	79da      	ldrb	r2, [r3, #7]
   1ae3a:	0312      	lsls	r2, r2, #12
   1ae3c:	21e0      	movs	r1, #224	; 0xe0
   1ae3e:	01c9      	lsls	r1, r1, #7
   1ae40:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1ae42:	4316      	orrs	r6, r2
   1ae44:	4334      	orrs	r4, r6
   1ae46:	9a03      	ldr	r2, [sp, #12]
   1ae48:	4314      	orrs	r4, r2
   1ae4a:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
   1ae4c:	4662      	mov	r2, ip
   1ae4e:	9907      	ldr	r1, [sp, #28]
   1ae50:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   1ae52:	2a04      	cmp	r2, #4
   1ae54:	d02a      	beq.n	1aeac <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
   1ae56:	7c9a      	ldrb	r2, [r3, #18]
   1ae58:	9905      	ldr	r1, [sp, #20]
   1ae5a:	4291      	cmp	r1, r2
   1ae5c:	d800      	bhi.n	1ae60 <tcc_init+0x198>
   1ae5e:	e131      	b.n	1b0c4 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   1ae60:	7a59      	ldrb	r1, [r3, #9]
   1ae62:	350a      	adds	r5, #10
   1ae64:	2304      	movs	r3, #4
   1ae66:	469b      	mov	fp, r3
   1ae68:	44dc      	add	ip, fp
   1ae6a:	290f      	cmp	r1, #15
   1ae6c:	d900      	bls.n	1ae70 <tcc_init+0x1a8>
   1ae6e:	e129      	b.n	1b0c4 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1ae70:	0609      	lsls	r1, r1, #24
   1ae72:	23f0      	movs	r3, #240	; 0xf0
   1ae74:	051b      	lsls	r3, r3, #20
   1ae76:	4019      	ands	r1, r3
   1ae78:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   1ae7a:	782e      	ldrb	r6, [r5, #0]
   1ae7c:	0436      	lsls	r6, r6, #16
   1ae7e:	20ff      	movs	r0, #255	; 0xff
   1ae80:	0400      	lsls	r0, r0, #16
   1ae82:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   1ae84:	7868      	ldrb	r0, [r5, #1]
   1ae86:	2480      	movs	r4, #128	; 0x80
   1ae88:	2800      	cmp	r0, #0
   1ae8a:	d100      	bne.n	1ae8e <tcc_init+0x1c6>
   1ae8c:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   1ae8e:	7898      	ldrb	r0, [r3, #2]
   1ae90:	2708      	movs	r7, #8
   1ae92:	9703      	str	r7, [sp, #12]
   1ae94:	2800      	cmp	r0, #0
   1ae96:	d101      	bne.n	1ae9c <tcc_init+0x1d4>
   1ae98:	9804      	ldr	r0, [sp, #16]
   1ae9a:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   1ae9c:	78d8      	ldrb	r0, [r3, #3]
   1ae9e:	4683      	mov	fp, r0
   1aea0:	2010      	movs	r0, #16
   1aea2:	465f      	mov	r7, fp
   1aea4:	2f00      	cmp	r7, #0
   1aea6:	d1b1      	bne.n	1ae0c <tcc_init+0x144>
   1aea8:	9804      	ldr	r0, [sp, #16]
   1aeaa:	e7af      	b.n	1ae0c <tcc_init+0x144>
   1aeac:	4644      	mov	r4, r8
   1aeae:	4655      	mov	r5, sl
   1aeb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
   1aeb2:	4a52      	ldr	r2, [pc, #328]	; (1affc <tcc_init+0x334>)
   1aeb4:	5cd2      	ldrb	r2, [r2, r3]
   1aeb6:	4691      	mov	r9, r2
   1aeb8:	4651      	mov	r1, sl
   1aeba:	3150      	adds	r1, #80	; 0x50
   1aebc:	4650      	mov	r0, sl
   1aebe:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
   1aec0:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1aec2:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   1aec4:	2601      	movs	r6, #1
   1aec6:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   1aec8:	2602      	movs	r6, #2
   1aeca:	36ff      	adds	r6, #255	; 0xff
   1aecc:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   1aece:	2680      	movs	r6, #128	; 0x80
   1aed0:	0276      	lsls	r6, r6, #9
   1aed2:	46b0      	mov	r8, r6
   1aed4:	46a4      	mov	ip, r4
   1aed6:	001c      	movs	r4, r3
   1aed8:	464b      	mov	r3, r9
   1aeda:	e00f      	b.n	1aefc <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
   1aedc:	7806      	ldrb	r6, [r0, #0]
   1aede:	2e00      	cmp	r6, #0
   1aee0:	d007      	beq.n	1aef2 <tcc_init+0x22a>
			if (i >= ow_num) {
   1aee2:	4293      	cmp	r3, r2
   1aee4:	d800      	bhi.n	1aee8 <tcc_init+0x220>
   1aee6:	e0e7      	b.n	1b0b8 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
   1aee8:	2e02      	cmp	r6, #2
   1aeea:	d014      	beq.n	1af16 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   1aeec:	4656      	mov	r6, sl
   1aeee:	4096      	lsls	r6, r2
   1aef0:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1aef2:	3201      	adds	r2, #1
   1aef4:	3101      	adds	r1, #1
   1aef6:	3002      	adds	r0, #2
   1aef8:	2a08      	cmp	r2, #8
   1aefa:	d010      	beq.n	1af1e <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
   1aefc:	780e      	ldrb	r6, [r1, #0]
   1aefe:	2e00      	cmp	r6, #0
   1af00:	d0ec      	beq.n	1aedc <tcc_init+0x214>
			if (i >= ow_num) {
   1af02:	4293      	cmp	r3, r2
   1af04:	d800      	bhi.n	1af08 <tcc_init+0x240>
   1af06:	e0d5      	b.n	1b0b4 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   1af08:	4646      	mov	r6, r8
   1af0a:	4096      	lsls	r6, r2
   1af0c:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
   1af0e:	7806      	ldrb	r6, [r0, #0]
   1af10:	2e00      	cmp	r6, #0
   1af12:	d1e9      	bne.n	1aee8 <tcc_init+0x220>
   1af14:	e7ed      	b.n	1aef2 <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   1af16:	465e      	mov	r6, fp
   1af18:	4096      	lsls	r6, r2
   1af1a:	4337      	orrs	r7, r6
   1af1c:	e7e9      	b.n	1aef2 <tcc_init+0x22a>
   1af1e:	4699      	mov	r9, r3
   1af20:	0023      	movs	r3, r4
   1af22:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   1af24:	7e6a      	ldrb	r2, [r5, #25]
   1af26:	0112      	lsls	r2, r2, #4
   1af28:	2130      	movs	r1, #48	; 0x30
   1af2a:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   1af2c:	7e28      	ldrb	r0, [r5, #24]
   1af2e:	2207      	movs	r2, #7
   1af30:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   1af32:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   1af34:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
   1af36:	2080      	movs	r0, #128	; 0x80
   1af38:	0240      	lsls	r0, r0, #9
   1af3a:	000e      	movs	r6, r1
   1af3c:	e002      	b.n	1af44 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   1af3e:	3201      	adds	r2, #1
   1af40:	2a04      	cmp	r2, #4
   1af42:	d00b      	beq.n	1af5c <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
   1af44:	18a9      	adds	r1, r5, r2
   1af46:	7d09      	ldrb	r1, [r1, #20]
   1af48:	2900      	cmp	r1, #0
   1af4a:	d0f8      	beq.n	1af3e <tcc_init+0x276>
			if (n >= cc_num) {
   1af4c:	9905      	ldr	r1, [sp, #20]
   1af4e:	4291      	cmp	r1, r2
   1af50:	dc00      	bgt.n	1af54 <tcc_init+0x28c>
   1af52:	e0b3      	b.n	1b0bc <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
   1af54:	0001      	movs	r1, r0
   1af56:	4091      	lsls	r1, r2
   1af58:	430e      	orrs	r6, r1
   1af5a:	e7f0      	b.n	1af3e <tcc_init+0x276>
   1af5c:	46b2      	mov	sl, r6
   1af5e:	9801      	ldr	r0, [sp, #4]
   1af60:	0002      	movs	r2, r0
   1af62:	3204      	adds	r2, #4
   1af64:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
   1af66:	2100      	movs	r1, #0
   1af68:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   1af6a:	4282      	cmp	r2, r0
   1af6c:	d1fc      	bne.n	1af68 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
   1af6e:	2200      	movs	r2, #0
   1af70:	9801      	ldr	r0, [sp, #4]
   1af72:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   1af74:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   1af76:	0099      	lsls	r1, r3, #2
   1af78:	4a22      	ldr	r2, [pc, #136]	; (1b004 <tcc_init+0x33c>)
   1af7a:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
   1af7c:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   1af7e:	22a0      	movs	r2, #160	; 0xa0
   1af80:	5ca9      	ldrb	r1, [r5, r2]
   1af82:	3a64      	subs	r2, #100	; 0x64
   1af84:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
   1af86:	a90d      	add	r1, sp, #52	; 0x34
   1af88:	7aaa      	ldrb	r2, [r5, #10]
   1af8a:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   1af8c:	4a1e      	ldr	r2, [pc, #120]	; (1b008 <tcc_init+0x340>)
   1af8e:	5cd6      	ldrb	r6, [r2, r3]
   1af90:	0030      	movs	r0, r6
   1af92:	4b1e      	ldr	r3, [pc, #120]	; (1b00c <tcc_init+0x344>)
   1af94:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   1af96:	0030      	movs	r0, r6
   1af98:	4b1d      	ldr	r3, [pc, #116]	; (1b010 <tcc_init+0x348>)
   1af9a:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   1af9c:	464b      	mov	r3, r9
   1af9e:	2b00      	cmp	r3, #0
   1afa0:	dd3c      	ble.n	1b01c <tcc_init+0x354>
   1afa2:	002e      	movs	r6, r5
   1afa4:	3658      	adds	r6, #88	; 0x58
   1afa6:	3398      	adds	r3, #152	; 0x98
   1afa8:	4698      	mov	r8, r3
   1afaa:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1afac:	2301      	movs	r3, #1
   1afae:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
   1afb0:	46ab      	mov	fp, r5
   1afb2:	4645      	mov	r5, r8
   1afb4:	46a0      	mov	r8, r4
   1afb6:	9c08      	ldr	r4, [sp, #32]
   1afb8:	e003      	b.n	1afc2 <tcc_init+0x2fa>
   1afba:	3401      	adds	r4, #1
   1afbc:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   1afbe:	42ac      	cmp	r4, r5
   1afc0:	d02a      	beq.n	1b018 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
   1afc2:	7823      	ldrb	r3, [r4, #0]
   1afc4:	2b00      	cmp	r3, #0
   1afc6:	d0f8      	beq.n	1afba <tcc_init+0x2f2>
   1afc8:	ab0c      	add	r3, sp, #48	; 0x30
   1afca:	464a      	mov	r2, r9
   1afcc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1afce:	2300      	movs	r3, #0
   1afd0:	aa0c      	add	r2, sp, #48	; 0x30
   1afd2:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   1afd4:	0013      	movs	r3, r2
   1afd6:	2220      	movs	r2, #32
   1afd8:	18b2      	adds	r2, r6, r2
   1afda:	7812      	ldrb	r2, [r2, #0]
   1afdc:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   1afde:	464a      	mov	r2, r9
   1afe0:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
   1afe2:	7830      	ldrb	r0, [r6, #0]
   1afe4:	0019      	movs	r1, r3
   1afe6:	4b0b      	ldr	r3, [pc, #44]	; (1b014 <tcc_init+0x34c>)
   1afe8:	4798      	blx	r3
   1afea:	e7e6      	b.n	1afba <tcc_init+0x2f2>
   1afec:	0001ab49 	.word	0x0001ab49
   1aff0:	40000400 	.word	0x40000400
   1aff4:	0002281c 	.word	0x0002281c
   1aff8:	00022830 	.word	0x00022830
   1affc:	0002283c 	.word	0x0002283c
   1b000:	00022828 	.word	0x00022828
   1b004:	20003ee8 	.word	0x20003ee8
   1b008:	0002282c 	.word	0x0002282c
   1b00c:	0001a9f1 	.word	0x0001a9f1
   1b010:	0001a965 	.word	0x0001a965
   1b014:	0001aae9 	.word	0x0001aae9
   1b018:	4644      	mov	r4, r8
   1b01a:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   1b01c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b01e:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   1b020:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1b022:	0212      	lsls	r2, r2, #8
   1b024:	4313      	orrs	r3, r2
   1b026:	9a02      	ldr	r2, [sp, #8]
   1b028:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
   1b02a:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   1b02c:	2204      	movs	r2, #4
   1b02e:	68a3      	ldr	r3, [r4, #8]
   1b030:	421a      	tst	r2, r3
   1b032:	d1fc      	bne.n	1b02e <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
   1b034:	23ff      	movs	r3, #255	; 0xff
   1b036:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   1b038:	2204      	movs	r2, #4
   1b03a:	68a3      	ldr	r3, [r4, #8]
   1b03c:	421a      	tst	r2, r3
   1b03e:	d1fc      	bne.n	1b03a <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
   1b040:	466b      	mov	r3, sp
   1b042:	7e1b      	ldrb	r3, [r3, #24]
   1b044:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
   1b046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b048:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
   1b04a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b04c:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
   1b04e:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   1b050:	4a1d      	ldr	r2, [pc, #116]	; (1b0c8 <tcc_init+0x400>)
   1b052:	68a3      	ldr	r3, [r4, #8]
   1b054:	4213      	tst	r3, r2
   1b056:	d1fc      	bne.n	1b052 <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
   1b058:	4653      	mov	r3, sl
   1b05a:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   1b05c:	2210      	movs	r2, #16
   1b05e:	68a3      	ldr	r3, [r4, #8]
   1b060:	421a      	tst	r2, r3
   1b062:	d1fc      	bne.n	1b05e <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
   1b064:	682b      	ldr	r3, [r5, #0]
   1b066:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   1b068:	4a18      	ldr	r2, [pc, #96]	; (1b0cc <tcc_init+0x404>)
   1b06a:	68a3      	ldr	r3, [r4, #8]
   1b06c:	4213      	tst	r3, r2
   1b06e:	d1fc      	bne.n	1b06a <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
   1b070:	686b      	ldr	r3, [r5, #4]
   1b072:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   1b074:	9805      	ldr	r0, [sp, #20]
   1b076:	2800      	cmp	r0, #0
   1b078:	dd22      	ble.n	1b0c0 <tcc_init+0x3f8>
   1b07a:	351c      	adds	r5, #28
   1b07c:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   1b07e:	4e14      	ldr	r6, [pc, #80]	; (1b0d0 <tcc_init+0x408>)
   1b080:	0032      	movs	r2, r6
   1b082:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
   1b084:	68a3      	ldr	r3, [r4, #8]
   1b086:	421a      	tst	r2, r3
   1b088:	d1fc      	bne.n	1b084 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
   1b08a:	cd04      	ldmia	r5!, {r2}
   1b08c:	000b      	movs	r3, r1
   1b08e:	3310      	adds	r3, #16
   1b090:	009b      	lsls	r3, r3, #2
   1b092:	18e3      	adds	r3, r4, r3
   1b094:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   1b096:	3101      	adds	r1, #1
   1b098:	4288      	cmp	r0, r1
   1b09a:	dcf1      	bgt.n	1b080 <tcc_init+0x3b8>
	return STATUS_OK;
   1b09c:	2000      	movs	r0, #0
   1b09e:	e62d      	b.n	1acfc <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
   1b0a0:	2017      	movs	r0, #23
   1b0a2:	e62b      	b.n	1acfc <tcc_init+0x34>
   1b0a4:	2017      	movs	r0, #23
   1b0a6:	e629      	b.n	1acfc <tcc_init+0x34>
   1b0a8:	2017      	movs	r0, #23
   1b0aa:	e627      	b.n	1acfc <tcc_init+0x34>
   1b0ac:	2017      	movs	r0, #23
   1b0ae:	e625      	b.n	1acfc <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   1b0b0:	2017      	movs	r0, #23
   1b0b2:	e623      	b.n	1acfc <tcc_init+0x34>
			if (i >= ow_num) {
   1b0b4:	2017      	movs	r0, #23
   1b0b6:	e621      	b.n	1acfc <tcc_init+0x34>
			if (i >= ow_num) {
   1b0b8:	2017      	movs	r0, #23
   1b0ba:	e61f      	b.n	1acfc <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   1b0bc:	2017      	movs	r0, #23
   1b0be:	e61d      	b.n	1acfc <tcc_init+0x34>
	return STATUS_OK;
   1b0c0:	2000      	movs	r0, #0
   1b0c2:	e61b      	b.n	1acfc <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   1b0c4:	2017      	movs	r0, #23
   1b0c6:	e619      	b.n	1acfc <tcc_init+0x34>
   1b0c8:	00020040 	.word	0x00020040
   1b0cc:	00040080 	.word	0x00040080
   1b0d0:	00080100 	.word	0x00080100

0001b0d4 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1b0d4:	0092      	lsls	r2, r2, #2
   1b0d6:	1883      	adds	r3, r0, r2
   1b0d8:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   1b0da:	4b03      	ldr	r3, [pc, #12]	; (1b0e8 <tcc_register_callback+0x14>)
   1b0dc:	58d3      	ldr	r3, [r2, r3]
   1b0de:	6b42      	ldr	r2, [r0, #52]	; 0x34
   1b0e0:	4313      	orrs	r3, r2
   1b0e2:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
   1b0e4:	2000      	movs	r0, #0
   1b0e6:	4770      	bx	lr
   1b0e8:	00022840 	.word	0x00022840

0001b0ec <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   1b0ec:	b570      	push	{r4, r5, r6, lr}
   1b0ee:	0004      	movs	r4, r0
   1b0f0:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   1b0f2:	6800      	ldr	r0, [r0, #0]
   1b0f4:	4b09      	ldr	r3, [pc, #36]	; (1b11c <tcc_enable_callback+0x30>)
   1b0f6:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   1b0f8:	4b09      	ldr	r3, [pc, #36]	; (1b120 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1b0fa:	5c1b      	ldrb	r3, [r3, r0]
   1b0fc:	221f      	movs	r2, #31
   1b0fe:	401a      	ands	r2, r3
   1b100:	2301      	movs	r3, #1
   1b102:	4093      	lsls	r3, r2
   1b104:	4a07      	ldr	r2, [pc, #28]	; (1b124 <tcc_enable_callback+0x38>)
   1b106:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   1b108:	00ad      	lsls	r5, r5, #2
   1b10a:	4b07      	ldr	r3, [pc, #28]	; (1b128 <tcc_enable_callback+0x3c>)
   1b10c:	58ea      	ldr	r2, [r5, r3]
   1b10e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1b110:	4313      	orrs	r3, r2
   1b112:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   1b114:	6823      	ldr	r3, [r4, #0]
   1b116:	629a      	str	r2, [r3, #40]	; 0x28
}
   1b118:	bd70      	pop	{r4, r5, r6, pc}
   1b11a:	46c0      	nop			; (mov r8, r8)
   1b11c:	0001ab49 	.word	0x0001ab49
   1b120:	00022870 	.word	0x00022870
   1b124:	e000e100 	.word	0xe000e100
   1b128:	00022840 	.word	0x00022840

0001b12c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   1b12c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b12e:	46c6      	mov	lr, r8
   1b130:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
   1b132:	0080      	lsls	r0, r0, #2
   1b134:	4b0e      	ldr	r3, [pc, #56]	; (1b170 <_tcc_interrupt_handler+0x44>)
   1b136:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   1b138:	683b      	ldr	r3, [r7, #0]
   1b13a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   1b13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b13e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1b140:	4013      	ands	r3, r2
   1b142:	401e      	ands	r6, r3
   1b144:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   1b146:	4b0b      	ldr	r3, [pc, #44]	; (1b174 <_tcc_interrupt_handler+0x48>)
   1b148:	4698      	mov	r8, r3
   1b14a:	e002      	b.n	1b152 <_tcc_interrupt_handler+0x26>
   1b14c:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   1b14e:	2c30      	cmp	r4, #48	; 0x30
   1b150:	d00a      	beq.n	1b168 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   1b152:	4643      	mov	r3, r8
   1b154:	58e5      	ldr	r5, [r4, r3]
   1b156:	4235      	tst	r5, r6
   1b158:	d0f8      	beq.n	1b14c <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   1b15a:	193b      	adds	r3, r7, r4
   1b15c:	685b      	ldr	r3, [r3, #4]
   1b15e:	0038      	movs	r0, r7
   1b160:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   1b162:	683b      	ldr	r3, [r7, #0]
   1b164:	62dd      	str	r5, [r3, #44]	; 0x2c
   1b166:	e7f1      	b.n	1b14c <_tcc_interrupt_handler+0x20>
		}
	}
}
   1b168:	bc04      	pop	{r2}
   1b16a:	4690      	mov	r8, r2
   1b16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b16e:	46c0      	nop			; (mov r8, r8)
   1b170:	20003ee8 	.word	0x20003ee8
   1b174:	00022840 	.word	0x00022840

0001b178 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   1b178:	b510      	push	{r4, lr}
   1b17a:	2000      	movs	r0, #0
   1b17c:	4b01      	ldr	r3, [pc, #4]	; (1b184 <TCC0_Handler+0xc>)
   1b17e:	4798      	blx	r3
   1b180:	bd10      	pop	{r4, pc}
   1b182:	46c0      	nop			; (mov r8, r8)
   1b184:	0001b12d 	.word	0x0001b12d

0001b188 <TCC1_Handler>:
   1b188:	b510      	push	{r4, lr}
   1b18a:	2001      	movs	r0, #1
   1b18c:	4b01      	ldr	r3, [pc, #4]	; (1b194 <TCC1_Handler+0xc>)
   1b18e:	4798      	blx	r3
   1b190:	bd10      	pop	{r4, pc}
   1b192:	46c0      	nop			; (mov r8, r8)
   1b194:	0001b12d 	.word	0x0001b12d

0001b198 <TCC2_Handler>:
   1b198:	b510      	push	{r4, lr}
   1b19a:	2002      	movs	r0, #2
   1b19c:	4b01      	ldr	r3, [pc, #4]	; (1b1a4 <TCC2_Handler+0xc>)
   1b19e:	4798      	blx	r3
   1b1a0:	bd10      	pop	{r4, pc}
   1b1a2:	46c0      	nop			; (mov r8, r8)
   1b1a4:	0001b12d 	.word	0x0001b12d

0001b1a8 <Dummy_Handler>:
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
  __asm volatile (
   1b1a8:	2004      	movs	r0, #4
   1b1aa:	4671      	mov	r1, lr
   1b1ac:	4208      	tst	r0, r1
   1b1ae:	d002      	beq.n	1b1b6 <_MSP>
   1b1b0:	f3ef 8009 	mrs	r0, PSP
   1b1b4:	e001      	b.n	1b1ba <_HALT>

0001b1b6 <_MSP>:
   1b1b6:	f3ef 8008 	mrs	r0, MSP

0001b1ba <_HALT>:
   1b1ba:	6941      	ldr	r1, [r0, #20]
   1b1bc:	e074      	b.n	1b2a8 <HardFault_HandlerC>
   1b1be:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   1b1c0:	4770      	bx	lr
	...

0001b1c4 <Reset_Handler>:
{
   1b1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
   1b1c6:	4a2a      	ldr	r2, [pc, #168]	; (1b270 <Reset_Handler+0xac>)
   1b1c8:	4b2a      	ldr	r3, [pc, #168]	; (1b274 <Reset_Handler+0xb0>)
   1b1ca:	429a      	cmp	r2, r3
   1b1cc:	d011      	beq.n	1b1f2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
   1b1ce:	001a      	movs	r2, r3
   1b1d0:	4b29      	ldr	r3, [pc, #164]	; (1b278 <Reset_Handler+0xb4>)
   1b1d2:	429a      	cmp	r2, r3
   1b1d4:	d20d      	bcs.n	1b1f2 <Reset_Handler+0x2e>
   1b1d6:	4a29      	ldr	r2, [pc, #164]	; (1b27c <Reset_Handler+0xb8>)
   1b1d8:	3303      	adds	r3, #3
   1b1da:	1a9b      	subs	r3, r3, r2
   1b1dc:	089b      	lsrs	r3, r3, #2
   1b1de:	3301      	adds	r3, #1
   1b1e0:	009b      	lsls	r3, r3, #2
   1b1e2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
   1b1e4:	4823      	ldr	r0, [pc, #140]	; (1b274 <Reset_Handler+0xb0>)
   1b1e6:	4922      	ldr	r1, [pc, #136]	; (1b270 <Reset_Handler+0xac>)
   1b1e8:	588c      	ldr	r4, [r1, r2]
   1b1ea:	5084      	str	r4, [r0, r2]
   1b1ec:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   1b1ee:	429a      	cmp	r2, r3
   1b1f0:	d1fa      	bne.n	1b1e8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
   1b1f2:	4a23      	ldr	r2, [pc, #140]	; (1b280 <Reset_Handler+0xbc>)
   1b1f4:	4b23      	ldr	r3, [pc, #140]	; (1b284 <Reset_Handler+0xc0>)
   1b1f6:	429a      	cmp	r2, r3
   1b1f8:	d20a      	bcs.n	1b210 <Reset_Handler+0x4c>
   1b1fa:	43d3      	mvns	r3, r2
   1b1fc:	4921      	ldr	r1, [pc, #132]	; (1b284 <Reset_Handler+0xc0>)
   1b1fe:	185b      	adds	r3, r3, r1
   1b200:	2103      	movs	r1, #3
   1b202:	438b      	bics	r3, r1
   1b204:	3304      	adds	r3, #4
   1b206:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
   1b208:	2100      	movs	r1, #0
   1b20a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
   1b20c:	4293      	cmp	r3, r2
   1b20e:	d1fc      	bne.n	1b20a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   1b210:	4a1d      	ldr	r2, [pc, #116]	; (1b288 <Reset_Handler+0xc4>)
   1b212:	21ff      	movs	r1, #255	; 0xff
   1b214:	4b1d      	ldr	r3, [pc, #116]	; (1b28c <Reset_Handler+0xc8>)
   1b216:	438b      	bics	r3, r1
   1b218:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   1b21a:	39fd      	subs	r1, #253	; 0xfd
   1b21c:	2390      	movs	r3, #144	; 0x90
   1b21e:	005b      	lsls	r3, r3, #1
   1b220:	4a1b      	ldr	r2, [pc, #108]	; (1b290 <Reset_Handler+0xcc>)
   1b222:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   1b224:	4a1b      	ldr	r2, [pc, #108]	; (1b294 <Reset_Handler+0xd0>)
   1b226:	78d3      	ldrb	r3, [r2, #3]
   1b228:	2503      	movs	r5, #3
   1b22a:	43ab      	bics	r3, r5
   1b22c:	2402      	movs	r4, #2
   1b22e:	4323      	orrs	r3, r4
   1b230:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   1b232:	78d3      	ldrb	r3, [r2, #3]
   1b234:	270c      	movs	r7, #12
   1b236:	43bb      	bics	r3, r7
   1b238:	2608      	movs	r6, #8
   1b23a:	4333      	orrs	r3, r6
   1b23c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
   1b23e:	4b16      	ldr	r3, [pc, #88]	; (1b298 <Reset_Handler+0xd4>)
   1b240:	7b98      	ldrb	r0, [r3, #14]
   1b242:	2230      	movs	r2, #48	; 0x30
   1b244:	4390      	bics	r0, r2
   1b246:	2220      	movs	r2, #32
   1b248:	4310      	orrs	r0, r2
   1b24a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   1b24c:	7b99      	ldrb	r1, [r3, #14]
   1b24e:	43b9      	bics	r1, r7
   1b250:	4331      	orrs	r1, r6
   1b252:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   1b254:	7b9a      	ldrb	r2, [r3, #14]
   1b256:	43aa      	bics	r2, r5
   1b258:	4322      	orrs	r2, r4
   1b25a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
   1b25c:	4a0f      	ldr	r2, [pc, #60]	; (1b29c <Reset_Handler+0xd8>)
   1b25e:	6853      	ldr	r3, [r2, #4]
   1b260:	2180      	movs	r1, #128	; 0x80
   1b262:	430b      	orrs	r3, r1
   1b264:	6053      	str	r3, [r2, #4]
        __libc_init_array();
   1b266:	4b0e      	ldr	r3, [pc, #56]	; (1b2a0 <Reset_Handler+0xdc>)
   1b268:	4798      	blx	r3
        main();
   1b26a:	4b0e      	ldr	r3, [pc, #56]	; (1b2a4 <Reset_Handler+0xe0>)
   1b26c:	4798      	blx	r3
   1b26e:	e7fe      	b.n	1b26e <Reset_Handler+0xaa>
   1b270:	000233a4 	.word	0x000233a4
   1b274:	20000000 	.word	0x20000000
   1b278:	20000274 	.word	0x20000274
   1b27c:	20000004 	.word	0x20000004
   1b280:	20000274 	.word	0x20000274
   1b284:	20003f58 	.word	0x20003f58
   1b288:	e000ed00 	.word	0xe000ed00
   1b28c:	00012000 	.word	0x00012000
   1b290:	41007000 	.word	0x41007000
   1b294:	41005000 	.word	0x41005000
   1b298:	41004800 	.word	0x41004800
   1b29c:	41004000 	.word	0x41004000
   1b2a0:	0001fb75 	.word	0x0001fb75
   1b2a4:	0001f67d 	.word	0x0001f67d

0001b2a8 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   1b2a8:	b08e      	sub	sp, #56	; 0x38
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   1b2aa:	6803      	ldr	r3, [r0, #0]
   1b2ac:	930d      	str	r3, [sp, #52]	; 0x34
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   1b2ae:	6843      	ldr	r3, [r0, #4]
   1b2b0:	930c      	str	r3, [sp, #48]	; 0x30
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   1b2b2:	6883      	ldr	r3, [r0, #8]
   1b2b4:	930b      	str	r3, [sp, #44]	; 0x2c
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   1b2b6:	68c3      	ldr	r3, [r0, #12]
   1b2b8:	930a      	str	r3, [sp, #40]	; 0x28
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   1b2ba:	6903      	ldr	r3, [r0, #16]
   1b2bc:	9309      	str	r3, [sp, #36]	; 0x24
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   1b2be:	6943      	ldr	r3, [r0, #20]
   1b2c0:	9308      	str	r3, [sp, #32]
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   1b2c2:	6983      	ldr	r3, [r0, #24]
   1b2c4:	9307      	str	r3, [sp, #28]
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   1b2c6:	69c3      	ldr	r3, [r0, #28]
   1b2c8:	9306      	str	r3, [sp, #24]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   1b2ca:	4b0a      	ldr	r3, [pc, #40]	; (1b2f4 <HardFault_HandlerC+0x4c>)
   1b2cc:	681b      	ldr	r3, [r3, #0]
   1b2ce:	9305      	str	r3, [sp, #20]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   1b2d0:	4b09      	ldr	r3, [pc, #36]	; (1b2f8 <HardFault_HandlerC+0x50>)
   1b2d2:	681b      	ldr	r3, [r3, #0]
   1b2d4:	9304      	str	r3, [sp, #16]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   1b2d6:	4b09      	ldr	r3, [pc, #36]	; (1b2fc <HardFault_HandlerC+0x54>)
   1b2d8:	681b      	ldr	r3, [r3, #0]
   1b2da:	9303      	str	r3, [sp, #12]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   1b2dc:	4b08      	ldr	r3, [pc, #32]	; (1b300 <HardFault_HandlerC+0x58>)
   1b2de:	681b      	ldr	r3, [r3, #0]
   1b2e0:	9302      	str	r3, [sp, #8]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   1b2e2:	4b08      	ldr	r3, [pc, #32]	; (1b304 <HardFault_HandlerC+0x5c>)
   1b2e4:	681b      	ldr	r3, [r3, #0]
   1b2e6:	9300      	str	r3, [sp, #0]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   1b2e8:	4b07      	ldr	r3, [pc, #28]	; (1b308 <HardFault_HandlerC+0x60>)
   1b2ea:	681b      	ldr	r3, [r3, #0]
   1b2ec:	9301      	str	r3, [sp, #4]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   1b2ee:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   1b2f0:	b00e      	add	sp, #56	; 0x38
   1b2f2:	4770      	bx	lr
   1b2f4:	e000ed28 	.word	0xe000ed28
   1b2f8:	e000ed2c 	.word	0xe000ed2c
   1b2fc:	e000ed30 	.word	0xe000ed30
   1b300:	e000ed3c 	.word	0xe000ed3c
   1b304:	e000ed34 	.word	0xe000ed34
   1b308:	e000ed38 	.word	0xe000ed38

0001b30c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   1b30c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b30e:	46c6      	mov	lr, r8
   1b310:	b500      	push	{lr}
   1b312:	000c      	movs	r4, r1
   1b314:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   1b316:	2800      	cmp	r0, #0
   1b318:	d10f      	bne.n	1b33a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
   1b31a:	2a00      	cmp	r2, #0
   1b31c:	dd11      	ble.n	1b342 <_read+0x36>
   1b31e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   1b320:	4e09      	ldr	r6, [pc, #36]	; (1b348 <_read+0x3c>)
   1b322:	4d0a      	ldr	r5, [pc, #40]	; (1b34c <_read+0x40>)
   1b324:	6830      	ldr	r0, [r6, #0]
   1b326:	0021      	movs	r1, r4
   1b328:	682b      	ldr	r3, [r5, #0]
   1b32a:	4798      	blx	r3
		ptr++;
   1b32c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   1b32e:	42bc      	cmp	r4, r7
   1b330:	d1f8      	bne.n	1b324 <_read+0x18>
		nChars++;
	}
	return nChars;
}
   1b332:	4640      	mov	r0, r8
   1b334:	bc04      	pop	{r2}
   1b336:	4690      	mov	r8, r2
   1b338:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   1b33a:	2301      	movs	r3, #1
   1b33c:	425b      	negs	r3, r3
   1b33e:	4698      	mov	r8, r3
   1b340:	e7f7      	b.n	1b332 <_read+0x26>
	for (; len > 0; --len) {
   1b342:	4680      	mov	r8, r0
   1b344:	e7f5      	b.n	1b332 <_read+0x26>
   1b346:	46c0      	nop			; (mov r8, r8)
   1b348:	20003efc 	.word	0x20003efc
   1b34c:	20003ef4 	.word	0x20003ef4

0001b350 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   1b350:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b352:	46c6      	mov	lr, r8
   1b354:	b500      	push	{lr}
   1b356:	000e      	movs	r6, r1
   1b358:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   1b35a:	3801      	subs	r0, #1
   1b35c:	2802      	cmp	r0, #2
   1b35e:	d810      	bhi.n	1b382 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
   1b360:	2a00      	cmp	r2, #0
   1b362:	d011      	beq.n	1b388 <_write+0x38>
   1b364:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   1b366:	4b0c      	ldr	r3, [pc, #48]	; (1b398 <_write+0x48>)
   1b368:	4698      	mov	r8, r3
   1b36a:	4f0c      	ldr	r7, [pc, #48]	; (1b39c <_write+0x4c>)
   1b36c:	4643      	mov	r3, r8
   1b36e:	6818      	ldr	r0, [r3, #0]
   1b370:	5d31      	ldrb	r1, [r6, r4]
   1b372:	683b      	ldr	r3, [r7, #0]
   1b374:	4798      	blx	r3
   1b376:	2800      	cmp	r0, #0
   1b378:	db08      	blt.n	1b38c <_write+0x3c>
			return -1;
		}
		++nChars;
   1b37a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
   1b37c:	42a5      	cmp	r5, r4
   1b37e:	d1f5      	bne.n	1b36c <_write+0x1c>
   1b380:	e006      	b.n	1b390 <_write+0x40>
		return -1;
   1b382:	2401      	movs	r4, #1
   1b384:	4264      	negs	r4, r4
   1b386:	e003      	b.n	1b390 <_write+0x40>
	for (; len != 0; --len) {
   1b388:	0014      	movs	r4, r2
   1b38a:	e001      	b.n	1b390 <_write+0x40>
			return -1;
   1b38c:	2401      	movs	r4, #1
   1b38e:	4264      	negs	r4, r4
	}
	return nChars;
}
   1b390:	0020      	movs	r0, r4
   1b392:	bc04      	pop	{r2}
   1b394:	4690      	mov	r8, r2
   1b396:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b398:	20003efc 	.word	0x20003efc
   1b39c:	20003ef8 	.word	0x20003ef8

0001b3a0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   1b3a0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   1b3a2:	4a06      	ldr	r2, [pc, #24]	; (1b3bc <_sbrk+0x1c>)
   1b3a4:	6812      	ldr	r2, [r2, #0]
   1b3a6:	2a00      	cmp	r2, #0
   1b3a8:	d004      	beq.n	1b3b4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   1b3aa:	4a04      	ldr	r2, [pc, #16]	; (1b3bc <_sbrk+0x1c>)
   1b3ac:	6810      	ldr	r0, [r2, #0]

	heap += incr;
   1b3ae:	18c3      	adds	r3, r0, r3
   1b3b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
   1b3b2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   1b3b4:	4902      	ldr	r1, [pc, #8]	; (1b3c0 <_sbrk+0x20>)
   1b3b6:	4a01      	ldr	r2, [pc, #4]	; (1b3bc <_sbrk+0x1c>)
   1b3b8:	6011      	str	r1, [r2, #0]
   1b3ba:	e7f6      	b.n	1b3aa <_sbrk+0xa>
   1b3bc:	20003334 	.word	0x20003334
   1b3c0:	20005f58 	.word	0x20005f58

0001b3c4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   1b3c4:	2001      	movs	r0, #1
   1b3c6:	4240      	negs	r0, r0
   1b3c8:	4770      	bx	lr

0001b3ca <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   1b3ca:	2380      	movs	r3, #128	; 0x80
   1b3cc:	019b      	lsls	r3, r3, #6
   1b3ce:	604b      	str	r3, [r1, #4]

	return 0;
}
   1b3d0:	2000      	movs	r0, #0
   1b3d2:	4770      	bx	lr

0001b3d4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   1b3d4:	2001      	movs	r0, #1
   1b3d6:	4770      	bx	lr

0001b3d8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   1b3d8:	2000      	movs	r0, #0
   1b3da:	4770      	bx	lr

0001b3dc <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   1b3dc:	b530      	push	{r4, r5, lr}
   1b3de:	b087      	sub	sp, #28
   1b3e0:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   1b3e2:	aa01      	add	r2, sp, #4
   1b3e4:	23a0      	movs	r3, #160	; 0xa0
   1b3e6:	011b      	lsls	r3, r3, #4
   1b3e8:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
   1b3ea:	2300      	movs	r3, #0
   1b3ec:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   1b3ee:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
   1b3f0:	21fa      	movs	r1, #250	; 0xfa
   1b3f2:	00c9      	lsls	r1, r1, #3
   1b3f4:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
   1b3f6:	2101      	movs	r1, #1
   1b3f8:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   1b3fa:	2004      	movs	r0, #4
   1b3fc:	7210      	strb	r0, [r2, #8]
   1b3fe:	7253      	strb	r3, [r2, #9]
   1b400:	7293      	strb	r3, [r2, #10]
   1b402:	72d3      	strb	r3, [r2, #11]
   1b404:	7311      	strb	r1, [r2, #12]
   1b406:	7351      	strb	r1, [r2, #13]
   1b408:	4b14      	ldr	r3, [pc, #80]	; (1b45c <disk_initialize+0x80>)
   1b40a:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   1b40c:	2306      	movs	r3, #6
   1b40e:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   1b410:	4d13      	ldr	r5, [pc, #76]	; (1b460 <disk_initialize+0x84>)
   1b412:	4914      	ldr	r1, [pc, #80]	; (1b464 <disk_initialize+0x88>)
   1b414:	0028      	movs	r0, r5
   1b416:	4b14      	ldr	r3, [pc, #80]	; (1b468 <disk_initialize+0x8c>)
   1b418:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
   1b41a:	0028      	movs	r0, r5
   1b41c:	4b13      	ldr	r3, [pc, #76]	; (1b46c <disk_initialize+0x90>)
   1b41e:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   1b420:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
   1b422:	2c01      	cmp	r4, #1
   1b424:	d901      	bls.n	1b42a <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
   1b426:	b007      	add	sp, #28
   1b428:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
   1b42a:	0020      	movs	r0, r4
   1b42c:	4b10      	ldr	r3, [pc, #64]	; (1b470 <disk_initialize+0x94>)
   1b42e:	4798      	blx	r3
   1b430:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
   1b432:	2803      	cmp	r0, #3
   1b434:	d106      	bne.n	1b444 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
   1b436:	0020      	movs	r0, r4
   1b438:	4b0d      	ldr	r3, [pc, #52]	; (1b470 <disk_initialize+0x94>)
   1b43a:	4798      	blx	r3
   1b43c:	0003      	movs	r3, r0
		return STA_NOINIT;
   1b43e:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
   1b440:	2b03      	cmp	r3, #3
   1b442:	d0f0      	beq.n	1b426 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
   1b444:	2b00      	cmp	r3, #0
   1b446:	d106      	bne.n	1b456 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
   1b448:	0020      	movs	r0, r4
   1b44a:	4b0a      	ldr	r3, [pc, #40]	; (1b474 <disk_initialize+0x98>)
   1b44c:	4798      	blx	r3
	return 0;
   1b44e:	1e43      	subs	r3, r0, #1
   1b450:	4198      	sbcs	r0, r3
   1b452:	0080      	lsls	r0, r0, #2
   1b454:	e7e7      	b.n	1b426 <disk_initialize+0x4a>
		return STA_NOINIT;
   1b456:	2001      	movs	r0, #1
   1b458:	e7e5      	b.n	1b426 <disk_initialize+0x4a>
   1b45a:	46c0      	nop			; (mov r8, r8)
   1b45c:	000007de 	.word	0x000007de
   1b460:	20003f00 	.word	0x20003f00
   1b464:	40001400 	.word	0x40001400
   1b468:	00019259 	.word	0x00019259
   1b46c:	000190f5 	.word	0x000190f5
   1b470:	00018dc5 	.word	0x00018dc5
   1b474:	00018e01 	.word	0x00018e01

0001b478 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   1b478:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
   1b47a:	4b05      	ldr	r3, [pc, #20]	; (1b490 <disk_status+0x18>)
   1b47c:	4798      	blx	r3
   1b47e:	1e03      	subs	r3, r0, #0
   1b480:	d004      	beq.n	1b48c <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   1b482:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
   1b484:	2b02      	cmp	r3, #2
   1b486:	d000      	beq.n	1b48a <disk_status+0x12>
	default:
		return STA_NOINIT;
   1b488:	3802      	subs	r0, #2
	}
}
   1b48a:	bd10      	pop	{r4, pc}
		return 0;
   1b48c:	2000      	movs	r0, #0
   1b48e:	e7fc      	b.n	1b48a <disk_status+0x12>
   1b490:	00018dc5 	.word	0x00018dc5

0001b494 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   1b494:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b496:	46de      	mov	lr, fp
   1b498:	464f      	mov	r7, r9
   1b49a:	4646      	mov	r6, r8
   1b49c:	b5c0      	push	{r6, r7, lr}
   1b49e:	b084      	sub	sp, #16
   1b4a0:	9001      	str	r0, [sp, #4]
   1b4a2:	000d      	movs	r5, r1
   1b4a4:	0014      	movs	r4, r2
   1b4a6:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   1b4a8:	4b18      	ldr	r3, [pc, #96]	; (1b50c <disk_read+0x78>)
   1b4aa:	4798      	blx	r3
   1b4ac:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   1b4ae:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   1b4b0:	2e00      	cmp	r6, #0
   1b4b2:	d105      	bne.n	1b4c0 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   1b4b4:	b004      	add	sp, #16
   1b4b6:	bc1c      	pop	{r2, r3, r4}
   1b4b8:	4690      	mov	r8, r2
   1b4ba:	4699      	mov	r9, r3
   1b4bc:	46a3      	mov	fp, r4
   1b4be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   1b4c0:	a903      	add	r1, sp, #12
   1b4c2:	9801      	ldr	r0, [sp, #4]
   1b4c4:	4b12      	ldr	r3, [pc, #72]	; (1b510 <disk_read+0x7c>)
   1b4c6:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   1b4c8:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   1b4ca:	0032      	movs	r2, r6
   1b4cc:	437a      	muls	r2, r7
   1b4ce:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   1b4d0:	9b03      	ldr	r3, [sp, #12]
   1b4d2:	3301      	adds	r3, #1
   1b4d4:	4373      	muls	r3, r6
		return RES_PARERR;
   1b4d6:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   1b4d8:	429a      	cmp	r2, r3
   1b4da:	d8eb      	bhi.n	1b4b4 <disk_read+0x20>
	for (i = 0; i < count; i++) {
   1b4dc:	2f00      	cmp	r7, #0
   1b4de:	d011      	beq.n	1b504 <disk_read+0x70>
   1b4e0:	0273      	lsls	r3, r6, #9
   1b4e2:	4698      	mov	r8, r3
   1b4e4:	1c7b      	adds	r3, r7, #1
   1b4e6:	469b      	mov	fp, r3
   1b4e8:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   1b4ea:	4e0a      	ldr	r6, [pc, #40]	; (1b514 <disk_read+0x80>)
   1b4ec:	002a      	movs	r2, r5
   1b4ee:	0021      	movs	r1, r4
   1b4f0:	9801      	ldr	r0, [sp, #4]
   1b4f2:	47b0      	blx	r6
   1b4f4:	2800      	cmp	r0, #0
   1b4f6:	d107      	bne.n	1b508 <disk_read+0x74>
   1b4f8:	3701      	adds	r7, #1
   1b4fa:	444c      	add	r4, r9
   1b4fc:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   1b4fe:	455f      	cmp	r7, fp
   1b500:	d1f4      	bne.n	1b4ec <disk_read+0x58>
   1b502:	e7d7      	b.n	1b4b4 <disk_read+0x20>
	return RES_OK;
   1b504:	2000      	movs	r0, #0
   1b506:	e7d5      	b.n	1b4b4 <disk_read+0x20>
			return RES_ERROR;
   1b508:	2001      	movs	r0, #1
   1b50a:	e7d3      	b.n	1b4b4 <disk_read+0x20>
   1b50c:	00018df9 	.word	0x00018df9
   1b510:	00018ddd 	.word	0x00018ddd
   1b514:	00018e19 	.word	0x00018e19

0001b518 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   1b518:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b51a:	46de      	mov	lr, fp
   1b51c:	464f      	mov	r7, r9
   1b51e:	4646      	mov	r6, r8
   1b520:	b5c0      	push	{r6, r7, lr}
   1b522:	b084      	sub	sp, #16
   1b524:	9001      	str	r0, [sp, #4]
   1b526:	000d      	movs	r5, r1
   1b528:	0014      	movs	r4, r2
   1b52a:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   1b52c:	4b18      	ldr	r3, [pc, #96]	; (1b590 <disk_write+0x78>)
   1b52e:	4798      	blx	r3
   1b530:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   1b532:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   1b534:	2e00      	cmp	r6, #0
   1b536:	d105      	bne.n	1b544 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   1b538:	b004      	add	sp, #16
   1b53a:	bc1c      	pop	{r2, r3, r4}
   1b53c:	4690      	mov	r8, r2
   1b53e:	4699      	mov	r9, r3
   1b540:	46a3      	mov	fp, r4
   1b542:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   1b544:	a903      	add	r1, sp, #12
   1b546:	9801      	ldr	r0, [sp, #4]
   1b548:	4b12      	ldr	r3, [pc, #72]	; (1b594 <disk_write+0x7c>)
   1b54a:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   1b54c:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   1b54e:	0032      	movs	r2, r6
   1b550:	437a      	muls	r2, r7
   1b552:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   1b554:	9b03      	ldr	r3, [sp, #12]
   1b556:	3301      	adds	r3, #1
   1b558:	4373      	muls	r3, r6
		return RES_PARERR;
   1b55a:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   1b55c:	429a      	cmp	r2, r3
   1b55e:	d8eb      	bhi.n	1b538 <disk_write+0x20>
	for (i = 0; i < count; i++) {
   1b560:	2f00      	cmp	r7, #0
   1b562:	d011      	beq.n	1b588 <disk_write+0x70>
   1b564:	0273      	lsls	r3, r6, #9
   1b566:	4698      	mov	r8, r3
   1b568:	1c7b      	adds	r3, r7, #1
   1b56a:	469b      	mov	fp, r3
   1b56c:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   1b56e:	4e0a      	ldr	r6, [pc, #40]	; (1b598 <disk_write+0x80>)
   1b570:	002a      	movs	r2, r5
   1b572:	0021      	movs	r1, r4
   1b574:	9801      	ldr	r0, [sp, #4]
   1b576:	47b0      	blx	r6
   1b578:	2800      	cmp	r0, #0
   1b57a:	d107      	bne.n	1b58c <disk_write+0x74>
   1b57c:	3701      	adds	r7, #1
   1b57e:	444c      	add	r4, r9
   1b580:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   1b582:	455f      	cmp	r7, fp
   1b584:	d1f4      	bne.n	1b570 <disk_write+0x58>
   1b586:	e7d7      	b.n	1b538 <disk_write+0x20>
	return RES_OK;
   1b588:	2000      	movs	r0, #0
   1b58a:	e7d5      	b.n	1b538 <disk_write+0x20>
			return RES_ERROR;
   1b58c:	2001      	movs	r0, #1
   1b58e:	e7d3      	b.n	1b538 <disk_write+0x20>
   1b590:	00018df9 	.word	0x00018df9
   1b594:	00018ddd 	.word	0x00018ddd
   1b598:	00018e39 	.word	0x00018e39

0001b59c <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   1b59c:	b510      	push	{r4, lr}
   1b59e:	b082      	sub	sp, #8
   1b5a0:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
   1b5a2:	2901      	cmp	r1, #1
   1b5a4:	d00b      	beq.n	1b5be <disk_ioctl+0x22>
   1b5a6:	2900      	cmp	r1, #0
   1b5a8:	d020      	beq.n	1b5ec <disk_ioctl+0x50>
   1b5aa:	2902      	cmp	r1, #2
   1b5ac:	d00f      	beq.n	1b5ce <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
   1b5ae:	2004      	movs	r0, #4
	switch (ctrl) {
   1b5b0:	2903      	cmp	r1, #3
   1b5b2:	d102      	bne.n	1b5ba <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
   1b5b4:	2301      	movs	r3, #1
   1b5b6:	6013      	str	r3, [r2, #0]
		res = RES_OK;
   1b5b8:	2000      	movs	r0, #0
	}

	return res;
}
   1b5ba:	b002      	add	sp, #8
   1b5bc:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
   1b5be:	a901      	add	r1, sp, #4
   1b5c0:	4b0e      	ldr	r3, [pc, #56]	; (1b5fc <disk_ioctl+0x60>)
   1b5c2:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
   1b5c4:	9b01      	ldr	r3, [sp, #4]
   1b5c6:	3301      	adds	r3, #1
   1b5c8:	6023      	str	r3, [r4, #0]
		res = RES_OK;
   1b5ca:	2000      	movs	r0, #0
	break;
   1b5cc:	e7f5      	b.n	1b5ba <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
   1b5ce:	4b0c      	ldr	r3, [pc, #48]	; (1b600 <disk_ioctl+0x64>)
   1b5d0:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
   1b5d2:	1e43      	subs	r3, r0, #1
   1b5d4:	b2db      	uxtb	r3, r3
   1b5d6:	2b01      	cmp	r3, #1
   1b5d8:	d904      	bls.n	1b5e4 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   1b5da:	1f03      	subs	r3, r0, #4
   1b5dc:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
   1b5de:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
   1b5e0:	4213      	tst	r3, r2
   1b5e2:	d1ea      	bne.n	1b5ba <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   1b5e4:	2300      	movs	r3, #0
   1b5e6:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
   1b5e8:	2000      	movs	r0, #0
	break;
   1b5ea:	e7e6      	b.n	1b5ba <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   1b5ec:	4b05      	ldr	r3, [pc, #20]	; (1b604 <disk_ioctl+0x68>)
   1b5ee:	4798      	blx	r3
   1b5f0:	2800      	cmp	r0, #0
   1b5f2:	d001      	beq.n	1b5f8 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
   1b5f4:	2003      	movs	r0, #3
   1b5f6:	e7e0      	b.n	1b5ba <disk_ioctl+0x1e>
			res = RES_OK;
   1b5f8:	2000      	movs	r0, #0
   1b5fa:	e7de      	b.n	1b5ba <disk_ioctl+0x1e>
   1b5fc:	00018ddd 	.word	0x00018ddd
   1b600:	00018df9 	.word	0x00018df9
   1b604:	00018dc5 	.word	0x00018dc5

0001b608 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   1b608:	b500      	push	{lr}
   1b60a:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   1b60c:	4669      	mov	r1, sp
   1b60e:	480f      	ldr	r0, [pc, #60]	; (1b64c <get_fattime+0x44>)
   1b610:	4b0f      	ldr	r3, [pc, #60]	; (1b650 <get_fattime+0x48>)
   1b612:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
   1b614:	466b      	mov	r3, sp
   1b616:	7958      	ldrb	r0, [r3, #5]
   1b618:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
   1b61a:	791b      	ldrb	r3, [r3, #4]
   1b61c:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
   1b61e:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
   1b620:	466b      	mov	r3, sp
   1b622:	789b      	ldrb	r3, [r3, #2]
   1b624:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
   1b626:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
   1b628:	466b      	mov	r3, sp
   1b62a:	785b      	ldrb	r3, [r3, #1]
   1b62c:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
   1b62e:	4318      	orrs	r0, r3
   1b630:	466b      	mov	r3, sp
   1b632:	781b      	ldrb	r3, [r3, #0]
   1b634:	085b      	lsrs	r3, r3, #1
   1b636:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
   1b638:	466b      	mov	r3, sp
   1b63a:	88db      	ldrh	r3, [r3, #6]
   1b63c:	4a05      	ldr	r2, [pc, #20]	; (1b654 <get_fattime+0x4c>)
   1b63e:	4694      	mov	ip, r2
   1b640:	4463      	add	r3, ip
   1b642:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
   1b644:	4318      	orrs	r0, r3

	return ul_time;
}
   1b646:	b003      	add	sp, #12
   1b648:	bd00      	pop	{pc}
   1b64a:	46c0      	nop			; (mov r8, r8)
   1b64c:	20003f00 	.word	0x20003f00
   1b650:	000191e1 	.word	0x000191e1
   1b654:	fffff844 	.word	0xfffff844

0001b658 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   1b658:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   1b65a:	2a00      	cmp	r2, #0
   1b65c:	d005      	beq.n	1b66a <mem_cpy+0x12>
   1b65e:	2300      	movs	r3, #0
		*d++ = *s++;
   1b660:	5ccc      	ldrb	r4, [r1, r3]
   1b662:	54c4      	strb	r4, [r0, r3]
   1b664:	3301      	adds	r3, #1
	while (cnt--)
   1b666:	4293      	cmp	r3, r2
   1b668:	d1fa      	bne.n	1b660 <mem_cpy+0x8>
}
   1b66a:	bd10      	pop	{r4, pc}

0001b66c <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
   1b66c:	2a00      	cmp	r2, #0
   1b66e:	d005      	beq.n	1b67c <mem_set+0x10>
   1b670:	0003      	movs	r3, r0
   1b672:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
   1b674:	7019      	strb	r1, [r3, #0]
   1b676:	3301      	adds	r3, #1
	while (cnt--)
   1b678:	4293      	cmp	r3, r2
   1b67a:	d1fb      	bne.n	1b674 <mem_set+0x8>
}
   1b67c:	4770      	bx	lr

0001b67e <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   1b67e:	0002      	movs	r2, r0
	clst -= 2;
   1b680:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   1b682:	6983      	ldr	r3, [r0, #24]
   1b684:	3b02      	subs	r3, #2
   1b686:	2000      	movs	r0, #0
   1b688:	4299      	cmp	r1, r3
   1b68a:	d203      	bcs.n	1b694 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
   1b68c:	7890      	ldrb	r0, [r2, #2]
   1b68e:	4341      	muls	r1, r0
   1b690:	6a90      	ldr	r0, [r2, #40]	; 0x28
   1b692:	1808      	adds	r0, r1, r0
}
   1b694:	4770      	bx	lr

0001b696 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   1b696:	0002      	movs	r2, r0
   1b698:	0001      	movs	r1, r0
   1b69a:	310b      	adds	r1, #11
	BYTE sum = 0;
   1b69c:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   1b69e:	0843      	lsrs	r3, r0, #1
   1b6a0:	01c0      	lsls	r0, r0, #7
   1b6a2:	4303      	orrs	r3, r0
   1b6a4:	7810      	ldrb	r0, [r2, #0]
   1b6a6:	1818      	adds	r0, r3, r0
   1b6a8:	b2c0      	uxtb	r0, r0
   1b6aa:	3201      	adds	r2, #1
   1b6ac:	428a      	cmp	r2, r1
   1b6ae:	d1f6      	bne.n	1b69e <sum_sfn+0x8>
	return sum;
}
   1b6b0:	4770      	bx	lr
	...

0001b6b4 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   1b6b4:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
   1b6b6:	2800      	cmp	r0, #0
   1b6b8:	d010      	beq.n	1b6dc <validate+0x28>
   1b6ba:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
   1b6bc:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
   1b6be:	2a00      	cmp	r2, #0
   1b6c0:	d101      	bne.n	1b6c6 <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
   1b6c2:	0018      	movs	r0, r3
   1b6c4:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
   1b6c6:	88c2      	ldrh	r2, [r0, #6]
   1b6c8:	428a      	cmp	r2, r1
   1b6ca:	d1fa      	bne.n	1b6c2 <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
   1b6cc:	7840      	ldrb	r0, [r0, #1]
   1b6ce:	4b04      	ldr	r3, [pc, #16]	; (1b6e0 <validate+0x2c>)
   1b6d0:	4798      	blx	r3
		return FR_NOT_READY;
   1b6d2:	2303      	movs	r3, #3
	return FR_OK;
   1b6d4:	07c0      	lsls	r0, r0, #31
   1b6d6:	17c0      	asrs	r0, r0, #31
   1b6d8:	4003      	ands	r3, r0
   1b6da:	e7f2      	b.n	1b6c2 <validate+0xe>
		return FR_INVALID_OBJECT;
   1b6dc:	2309      	movs	r3, #9
   1b6de:	e7f0      	b.n	1b6c2 <validate+0xe>
   1b6e0:	0001b479 	.word	0x0001b479

0001b6e4 <check_fs>:
{
   1b6e4:	b570      	push	{r4, r5, r6, lr}
   1b6e6:	0004      	movs	r4, r0
   1b6e8:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   1b6ea:	0001      	movs	r1, r0
   1b6ec:	3130      	adds	r1, #48	; 0x30
   1b6ee:	7840      	ldrb	r0, [r0, #1]
   1b6f0:	2301      	movs	r3, #1
   1b6f2:	4d1f      	ldr	r5, [pc, #124]	; (1b770 <check_fs+0x8c>)
   1b6f4:	47a8      	blx	r5
		return 3;
   1b6f6:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   1b6f8:	2800      	cmp	r0, #0
   1b6fa:	d001      	beq.n	1b700 <check_fs+0x1c>
}
   1b6fc:	0018      	movs	r0, r3
   1b6fe:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   1b700:	4b1c      	ldr	r3, [pc, #112]	; (1b774 <check_fs+0x90>)
   1b702:	5ce3      	ldrb	r3, [r4, r3]
   1b704:	021b      	lsls	r3, r3, #8
   1b706:	4a1c      	ldr	r2, [pc, #112]	; (1b778 <check_fs+0x94>)
   1b708:	5ca2      	ldrb	r2, [r4, r2]
   1b70a:	431a      	orrs	r2, r3
   1b70c:	491b      	ldr	r1, [pc, #108]	; (1b77c <check_fs+0x98>)
   1b70e:	b212      	sxth	r2, r2
		return 2;
   1b710:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   1b712:	428a      	cmp	r2, r1
   1b714:	d1f2      	bne.n	1b6fc <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   1b716:	3367      	adds	r3, #103	; 0x67
   1b718:	5ce3      	ldrb	r3, [r4, r3]
   1b71a:	061b      	lsls	r3, r3, #24
   1b71c:	2268      	movs	r2, #104	; 0x68
   1b71e:	5ca2      	ldrb	r2, [r4, r2]
   1b720:	0412      	lsls	r2, r2, #16
   1b722:	4313      	orrs	r3, r2
   1b724:	2266      	movs	r2, #102	; 0x66
   1b726:	5ca2      	ldrb	r2, [r4, r2]
   1b728:	4313      	orrs	r3, r2
   1b72a:	2267      	movs	r2, #103	; 0x67
   1b72c:	5ca2      	ldrb	r2, [r4, r2]
   1b72e:	0212      	lsls	r2, r2, #8
   1b730:	4313      	orrs	r3, r2
   1b732:	021b      	lsls	r3, r3, #8
   1b734:	0a1b      	lsrs	r3, r3, #8
   1b736:	4a12      	ldr	r2, [pc, #72]	; (1b780 <check_fs+0x9c>)
   1b738:	4293      	cmp	r3, r2
   1b73a:	d016      	beq.n	1b76a <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   1b73c:	2385      	movs	r3, #133	; 0x85
   1b73e:	5ce3      	ldrb	r3, [r4, r3]
   1b740:	061b      	lsls	r3, r3, #24
   1b742:	2284      	movs	r2, #132	; 0x84
   1b744:	5ca2      	ldrb	r2, [r4, r2]
   1b746:	0412      	lsls	r2, r2, #16
   1b748:	4313      	orrs	r3, r2
   1b74a:	2282      	movs	r2, #130	; 0x82
   1b74c:	5ca2      	ldrb	r2, [r4, r2]
   1b74e:	4313      	orrs	r3, r2
   1b750:	2283      	movs	r2, #131	; 0x83
   1b752:	5ca2      	ldrb	r2, [r4, r2]
   1b754:	0212      	lsls	r2, r2, #8
   1b756:	4313      	orrs	r3, r2
   1b758:	021b      	lsls	r3, r3, #8
   1b75a:	0a1b      	lsrs	r3, r3, #8
   1b75c:	4a09      	ldr	r2, [pc, #36]	; (1b784 <check_fs+0xa0>)
   1b75e:	4694      	mov	ip, r2
   1b760:	4463      	add	r3, ip
   1b762:	1e58      	subs	r0, r3, #1
   1b764:	4183      	sbcs	r3, r0
		return 3;
   1b766:	b2db      	uxtb	r3, r3
   1b768:	e7c8      	b.n	1b6fc <check_fs+0x18>
		return 0;
   1b76a:	2300      	movs	r3, #0
   1b76c:	e7c6      	b.n	1b6fc <check_fs+0x18>
   1b76e:	46c0      	nop			; (mov r8, r8)
   1b770:	0001b495 	.word	0x0001b495
   1b774:	0000022f 	.word	0x0000022f
   1b778:	0000022e 	.word	0x0000022e
   1b77c:	ffffaa55 	.word	0xffffaa55
   1b780:	00544146 	.word	0x00544146
   1b784:	ffabbeba 	.word	0xffabbeba

0001b788 <chk_mounted>:
{
   1b788:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b78a:	46d6      	mov	lr, sl
   1b78c:	464f      	mov	r7, r9
   1b78e:	4646      	mov	r6, r8
   1b790:	b5c0      	push	{r6, r7, lr}
   1b792:	0015      	movs	r5, r2
	const TCHAR *p = *path;
   1b794:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
   1b796:	781c      	ldrb	r4, [r3, #0]
   1b798:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   1b79a:	2c09      	cmp	r4, #9
   1b79c:	d80e      	bhi.n	1b7bc <chk_mounted+0x34>
   1b79e:	785a      	ldrb	r2, [r3, #1]
   1b7a0:	2a3a      	cmp	r2, #58	; 0x3a
   1b7a2:	d001      	beq.n	1b7a8 <chk_mounted+0x20>
   1b7a4:	2400      	movs	r4, #0
   1b7a6:	e00a      	b.n	1b7be <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
   1b7a8:	3302      	adds	r3, #2
   1b7aa:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
   1b7ac:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   1b7ae:	2c07      	cmp	r4, #7
   1b7b0:	d905      	bls.n	1b7be <chk_mounted+0x36>
}
   1b7b2:	bc1c      	pop	{r2, r3, r4}
   1b7b4:	4690      	mov	r8, r2
   1b7b6:	4699      	mov	r9, r3
   1b7b8:	46a2      	mov	sl, r4
   1b7ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b7bc:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   1b7be:	00a3      	lsls	r3, r4, #2
   1b7c0:	4ac5      	ldr	r2, [pc, #788]	; (1bad8 <chk_mounted+0x350>)
   1b7c2:	589e      	ldr	r6, [r3, r2]
   1b7c4:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   1b7c6:	2e00      	cmp	r6, #0
   1b7c8:	d100      	bne.n	1b7cc <chk_mounted+0x44>
   1b7ca:	e0e8      	b.n	1b99e <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
   1b7cc:	7833      	ldrb	r3, [r6, #0]
   1b7ce:	2b00      	cmp	r3, #0
   1b7d0:	d00d      	beq.n	1b7ee <chk_mounted+0x66>
		stat = disk_status(fs->drv);
   1b7d2:	7870      	ldrb	r0, [r6, #1]
   1b7d4:	4bc1      	ldr	r3, [pc, #772]	; (1badc <chk_mounted+0x354>)
   1b7d6:	4798      	blx	r3
   1b7d8:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   1b7da:	07c2      	lsls	r2, r0, #31
   1b7dc:	d407      	bmi.n	1b7ee <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
   1b7de:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   1b7e0:	2d00      	cmp	r5, #0
   1b7e2:	d0e6      	beq.n	1b7b2 <chk_mounted+0x2a>
   1b7e4:	075b      	lsls	r3, r3, #29
   1b7e6:	d400      	bmi.n	1b7ea <chk_mounted+0x62>
   1b7e8:	e0db      	b.n	1b9a2 <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
   1b7ea:	300a      	adds	r0, #10
   1b7ec:	e7e1      	b.n	1b7b2 <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
   1b7ee:	2300      	movs	r3, #0
   1b7f0:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   1b7f2:	b2e0      	uxtb	r0, r4
   1b7f4:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   1b7f6:	4bba      	ldr	r3, [pc, #744]	; (1bae0 <chk_mounted+0x358>)
   1b7f8:	4798      	blx	r3
   1b7fa:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   1b7fc:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   1b7fe:	07da      	lsls	r2, r3, #31
   1b800:	d4d7      	bmi.n	1b7b2 <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   1b802:	2d00      	cmp	r5, #0
   1b804:	d002      	beq.n	1b80c <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
   1b806:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   1b808:	075b      	lsls	r3, r3, #29
   1b80a:	d4d2      	bmi.n	1b7b2 <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   1b80c:	2100      	movs	r1, #0
   1b80e:	0030      	movs	r0, r6
   1b810:	4bb4      	ldr	r3, [pc, #720]	; (1bae4 <chk_mounted+0x35c>)
   1b812:	4798      	blx	r3
   1b814:	0003      	movs	r3, r0
   1b816:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   1b818:	2801      	cmp	r0, #1
   1b81a:	d100      	bne.n	1b81e <chk_mounted+0x96>
   1b81c:	e09a      	b.n	1b954 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
   1b81e:	2b03      	cmp	r3, #3
   1b820:	d100      	bne.n	1b824 <chk_mounted+0x9c>
   1b822:	e0c0      	b.n	1b9a6 <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   1b824:	200d      	movs	r0, #13
   1b826:	2b00      	cmp	r3, #0
   1b828:	d1c3      	bne.n	1b7b2 <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   1b82a:	333c      	adds	r3, #60	; 0x3c
   1b82c:	5cf2      	ldrb	r2, [r6, r3]
   1b82e:	0212      	lsls	r2, r2, #8
   1b830:	3b01      	subs	r3, #1
   1b832:	5cf3      	ldrb	r3, [r6, r3]
   1b834:	4313      	orrs	r3, r2
   1b836:	2280      	movs	r2, #128	; 0x80
   1b838:	0092      	lsls	r2, r2, #2
   1b83a:	b21b      	sxth	r3, r3
   1b83c:	4293      	cmp	r3, r2
   1b83e:	d1b8      	bne.n	1b7b2 <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   1b840:	2347      	movs	r3, #71	; 0x47
   1b842:	5cf3      	ldrb	r3, [r6, r3]
   1b844:	021b      	lsls	r3, r3, #8
   1b846:	3abb      	subs	r2, #187	; 0xbb
   1b848:	3aff      	subs	r2, #255	; 0xff
   1b84a:	5cb5      	ldrb	r5, [r6, r2]
   1b84c:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   1b84e:	d10d      	bne.n	1b86c <chk_mounted+0xe4>
   1b850:	2357      	movs	r3, #87	; 0x57
   1b852:	5cf5      	ldrb	r5, [r6, r3]
   1b854:	062d      	lsls	r5, r5, #24
   1b856:	3b01      	subs	r3, #1
   1b858:	5cf3      	ldrb	r3, [r6, r3]
   1b85a:	041b      	lsls	r3, r3, #16
   1b85c:	431d      	orrs	r5, r3
   1b85e:	2354      	movs	r3, #84	; 0x54
   1b860:	5cf3      	ldrb	r3, [r6, r3]
   1b862:	431d      	orrs	r5, r3
   1b864:	2355      	movs	r3, #85	; 0x55
   1b866:	5cf3      	ldrb	r3, [r6, r3]
   1b868:	021b      	lsls	r3, r3, #8
   1b86a:	431d      	orrs	r5, r3
	fs->fsize = fasize;
   1b86c:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   1b86e:	2340      	movs	r3, #64	; 0x40
   1b870:	5cf2      	ldrb	r2, [r6, r3]
   1b872:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   1b874:	1e53      	subs	r3, r2, #1
   1b876:	200d      	movs	r0, #13
   1b878:	2b01      	cmp	r3, #1
   1b87a:	d89a      	bhi.n	1b7b2 <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   1b87c:	233d      	movs	r3, #61	; 0x3d
   1b87e:	5cf1      	ldrb	r1, [r6, r3]
   1b880:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   1b882:	2900      	cmp	r1, #0
   1b884:	d095      	beq.n	1b7b2 <chk_mounted+0x2a>
   1b886:	1e4b      	subs	r3, r1, #1
   1b888:	4219      	tst	r1, r3
   1b88a:	d192      	bne.n	1b7b2 <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   1b88c:	2342      	movs	r3, #66	; 0x42
   1b88e:	5cf3      	ldrb	r3, [r6, r3]
   1b890:	021b      	lsls	r3, r3, #8
   1b892:	3034      	adds	r0, #52	; 0x34
   1b894:	5c30      	ldrb	r0, [r6, r0]
   1b896:	4318      	orrs	r0, r3
   1b898:	4680      	mov	r8, r0
   1b89a:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   1b89c:	200d      	movs	r0, #13
   1b89e:	4643      	mov	r3, r8
   1b8a0:	071b      	lsls	r3, r3, #28
   1b8a2:	d000      	beq.n	1b8a6 <chk_mounted+0x11e>
   1b8a4:	e785      	b.n	1b7b2 <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   1b8a6:	2344      	movs	r3, #68	; 0x44
   1b8a8:	5cf3      	ldrb	r3, [r6, r3]
   1b8aa:	021b      	lsls	r3, r3, #8
   1b8ac:	3036      	adds	r0, #54	; 0x36
   1b8ae:	5c30      	ldrb	r0, [r6, r0]
   1b8b0:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   1b8b2:	d10d      	bne.n	1b8d0 <chk_mounted+0x148>
   1b8b4:	3353      	adds	r3, #83	; 0x53
   1b8b6:	5cf3      	ldrb	r3, [r6, r3]
   1b8b8:	061b      	lsls	r3, r3, #24
   1b8ba:	2052      	movs	r0, #82	; 0x52
   1b8bc:	5c30      	ldrb	r0, [r6, r0]
   1b8be:	0400      	lsls	r0, r0, #16
   1b8c0:	4303      	orrs	r3, r0
   1b8c2:	2050      	movs	r0, #80	; 0x50
   1b8c4:	5c30      	ldrb	r0, [r6, r0]
   1b8c6:	4303      	orrs	r3, r0
   1b8c8:	2051      	movs	r0, #81	; 0x51
   1b8ca:	5c30      	ldrb	r0, [r6, r0]
   1b8cc:	0200      	lsls	r0, r0, #8
   1b8ce:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   1b8d0:	203f      	movs	r0, #63	; 0x3f
   1b8d2:	5c30      	ldrb	r0, [r6, r0]
   1b8d4:	0200      	lsls	r0, r0, #8
   1b8d6:	273e      	movs	r7, #62	; 0x3e
   1b8d8:	5df7      	ldrb	r7, [r6, r7]
   1b8da:	4307      	orrs	r7, r0
   1b8dc:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   1b8de:	200d      	movs	r0, #13
   1b8e0:	2f00      	cmp	r7, #0
   1b8e2:	d100      	bne.n	1b8e6 <chk_mounted+0x15e>
   1b8e4:	e765      	b.n	1b7b2 <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
   1b8e6:	436a      	muls	r2, r5
   1b8e8:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   1b8ea:	4642      	mov	r2, r8
   1b8ec:	0917      	lsrs	r7, r2, #4
   1b8ee:	4457      	add	r7, sl
   1b8f0:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   1b8f2:	42bb      	cmp	r3, r7
   1b8f4:	d200      	bcs.n	1b8f8 <chk_mounted+0x170>
   1b8f6:	e75c      	b.n	1b7b2 <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   1b8f8:	1bd8      	subs	r0, r3, r7
   1b8fa:	4b7b      	ldr	r3, [pc, #492]	; (1bae8 <chk_mounted+0x360>)
   1b8fc:	4798      	blx	r3
   1b8fe:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   1b900:	200d      	movs	r0, #13
   1b902:	2b00      	cmp	r3, #0
   1b904:	d100      	bne.n	1b908 <chk_mounted+0x180>
   1b906:	e754      	b.n	1b7b2 <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   1b908:	4a78      	ldr	r2, [pc, #480]	; (1baec <chk_mounted+0x364>)
	fmt = FS_FAT12;
   1b90a:	429a      	cmp	r2, r3
   1b90c:	4192      	sbcs	r2, r2
   1b90e:	4252      	negs	r2, r2
   1b910:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   1b912:	4977      	ldr	r1, [pc, #476]	; (1baf0 <chk_mounted+0x368>)
   1b914:	428b      	cmp	r3, r1
   1b916:	d848      	bhi.n	1b9aa <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   1b918:	3302      	adds	r3, #2
   1b91a:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   1b91c:	19e7      	adds	r7, r4, r7
   1b91e:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   1b920:	4454      	add	r4, sl
   1b922:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   1b924:	200d      	movs	r0, #13
   1b926:	4641      	mov	r1, r8
   1b928:	2900      	cmp	r1, #0
   1b92a:	d100      	bne.n	1b92e <chk_mounted+0x1a6>
   1b92c:	e741      	b.n	1b7b2 <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   1b92e:	444c      	add	r4, r9
   1b930:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   1b932:	2a02      	cmp	r2, #2
   1b934:	d12c      	bne.n	1b990 <chk_mounted+0x208>
   1b936:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   1b938:	496e      	ldr	r1, [pc, #440]	; (1baf4 <chk_mounted+0x36c>)
   1b93a:	468c      	mov	ip, r1
   1b93c:	4463      	add	r3, ip
   1b93e:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   1b940:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   1b942:	429d      	cmp	r5, r3
   1b944:	d200      	bcs.n	1b948 <chk_mounted+0x1c0>
   1b946:	e734      	b.n	1b7b2 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   1b948:	2301      	movs	r3, #1
   1b94a:	425b      	negs	r3, r3
   1b94c:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   1b94e:	2300      	movs	r3, #0
   1b950:	60f3      	str	r3, [r6, #12]
   1b952:	e0b6      	b.n	1bac2 <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
   1b954:	33f2      	adds	r3, #242	; 0xf2
   1b956:	33ff      	adds	r3, #255	; 0xff
   1b958:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   1b95a:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
   1b95c:	2b00      	cmp	r3, #0
   1b95e:	d100      	bne.n	1b962 <chk_mounted+0x1da>
   1b960:	e727      	b.n	1b7b2 <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   1b962:	23fa      	movs	r3, #250	; 0xfa
   1b964:	33ff      	adds	r3, #255	; 0xff
   1b966:	5cf4      	ldrb	r4, [r6, r3]
   1b968:	0624      	lsls	r4, r4, #24
   1b96a:	3b01      	subs	r3, #1
   1b96c:	5cf3      	ldrb	r3, [r6, r3]
   1b96e:	041b      	lsls	r3, r3, #16
   1b970:	431c      	orrs	r4, r3
   1b972:	23fb      	movs	r3, #251	; 0xfb
   1b974:	005b      	lsls	r3, r3, #1
   1b976:	5cf3      	ldrb	r3, [r6, r3]
   1b978:	431c      	orrs	r4, r3
   1b97a:	23f8      	movs	r3, #248	; 0xf8
   1b97c:	33ff      	adds	r3, #255	; 0xff
   1b97e:	5cf2      	ldrb	r2, [r6, r3]
   1b980:	0212      	lsls	r2, r2, #8
   1b982:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
   1b984:	0021      	movs	r1, r4
   1b986:	0030      	movs	r0, r6
   1b988:	4b56      	ldr	r3, [pc, #344]	; (1bae4 <chk_mounted+0x35c>)
   1b98a:	4798      	blx	r3
   1b98c:	0003      	movs	r3, r0
   1b98e:	e746      	b.n	1b81e <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   1b990:	2103      	movs	r1, #3
   1b992:	4359      	muls	r1, r3
   1b994:	0849      	lsrs	r1, r1, #1
   1b996:	2001      	movs	r0, #1
   1b998:	4003      	ands	r3, r0
   1b99a:	18cb      	adds	r3, r1, r3
   1b99c:	e7cc      	b.n	1b938 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   1b99e:	200c      	movs	r0, #12
   1b9a0:	e707      	b.n	1b7b2 <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
   1b9a2:	2000      	movs	r0, #0
   1b9a4:	e705      	b.n	1b7b2 <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
   1b9a6:	2001      	movs	r0, #1
   1b9a8:	e703      	b.n	1b7b2 <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   1b9aa:	3302      	adds	r3, #2
   1b9ac:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   1b9ae:	19e7      	adds	r7, r4, r7
   1b9b0:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   1b9b2:	4652      	mov	r2, sl
   1b9b4:	18a2      	adds	r2, r4, r2
   1b9b6:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   1b9b8:	200d      	movs	r0, #13
   1b9ba:	4642      	mov	r2, r8
   1b9bc:	2a00      	cmp	r2, #0
   1b9be:	d000      	beq.n	1b9c2 <chk_mounted+0x23a>
   1b9c0:	e6f7      	b.n	1b7b2 <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   1b9c2:	225f      	movs	r2, #95	; 0x5f
   1b9c4:	5cb2      	ldrb	r2, [r6, r2]
   1b9c6:	0612      	lsls	r2, r2, #24
   1b9c8:	215e      	movs	r1, #94	; 0x5e
   1b9ca:	5c71      	ldrb	r1, [r6, r1]
   1b9cc:	0409      	lsls	r1, r1, #16
   1b9ce:	430a      	orrs	r2, r1
   1b9d0:	215c      	movs	r1, #92	; 0x5c
   1b9d2:	5c71      	ldrb	r1, [r6, r1]
   1b9d4:	430a      	orrs	r2, r1
   1b9d6:	215d      	movs	r1, #93	; 0x5d
   1b9d8:	5c71      	ldrb	r1, [r6, r1]
   1b9da:	0209      	lsls	r1, r1, #8
   1b9dc:	430a      	orrs	r2, r1
   1b9de:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   1b9e0:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   1b9e2:	4a44      	ldr	r2, [pc, #272]	; (1baf4 <chk_mounted+0x36c>)
   1b9e4:	4694      	mov	ip, r2
   1b9e6:	4463      	add	r3, ip
   1b9e8:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   1b9ea:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   1b9ec:	429d      	cmp	r5, r3
   1b9ee:	d200      	bcs.n	1b9f2 <chk_mounted+0x26a>
   1b9f0:	e6df      	b.n	1b7b2 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   1b9f2:	2301      	movs	r3, #1
   1b9f4:	425b      	negs	r3, r3
   1b9f6:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   1b9f8:	2300      	movs	r3, #0
   1b9fa:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
   1b9fc:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   1b9fe:	3361      	adds	r3, #97	; 0x61
   1ba00:	5cf3      	ldrb	r3, [r6, r3]
   1ba02:	021b      	lsls	r3, r3, #8
   1ba04:	2260      	movs	r2, #96	; 0x60
   1ba06:	5cb2      	ldrb	r2, [r6, r2]
   1ba08:	431a      	orrs	r2, r3
   1ba0a:	1912      	adds	r2, r2, r4
   1ba0c:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   1ba0e:	0031      	movs	r1, r6
   1ba10:	3130      	adds	r1, #48	; 0x30
   1ba12:	7870      	ldrb	r0, [r6, #1]
   1ba14:	2301      	movs	r3, #1
   1ba16:	4c38      	ldr	r4, [pc, #224]	; (1baf8 <chk_mounted+0x370>)
   1ba18:	47a0      	blx	r4
   1ba1a:	2203      	movs	r2, #3
   1ba1c:	2800      	cmp	r0, #0
   1ba1e:	d150      	bne.n	1bac2 <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   1ba20:	4b36      	ldr	r3, [pc, #216]	; (1bafc <chk_mounted+0x374>)
   1ba22:	5cf2      	ldrb	r2, [r6, r3]
   1ba24:	0212      	lsls	r2, r2, #8
   1ba26:	4b36      	ldr	r3, [pc, #216]	; (1bb00 <chk_mounted+0x378>)
   1ba28:	5cf3      	ldrb	r3, [r6, r3]
   1ba2a:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   1ba2c:	4935      	ldr	r1, [pc, #212]	; (1bb04 <chk_mounted+0x37c>)
   1ba2e:	b21b      	sxth	r3, r3
   1ba30:	2203      	movs	r2, #3
   1ba32:	428b      	cmp	r3, r1
   1ba34:	d145      	bne.n	1bac2 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   1ba36:	2333      	movs	r3, #51	; 0x33
   1ba38:	5cf3      	ldrb	r3, [r6, r3]
   1ba3a:	061b      	lsls	r3, r3, #24
   1ba3c:	322f      	adds	r2, #47	; 0x2f
   1ba3e:	5cb2      	ldrb	r2, [r6, r2]
   1ba40:	0412      	lsls	r2, r2, #16
   1ba42:	4313      	orrs	r3, r2
   1ba44:	2230      	movs	r2, #48	; 0x30
   1ba46:	5cb2      	ldrb	r2, [r6, r2]
   1ba48:	4313      	orrs	r3, r2
   1ba4a:	2231      	movs	r2, #49	; 0x31
   1ba4c:	5cb2      	ldrb	r2, [r6, r2]
   1ba4e:	0212      	lsls	r2, r2, #8
   1ba50:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   1ba52:	492d      	ldr	r1, [pc, #180]	; (1bb08 <chk_mounted+0x380>)
   1ba54:	2203      	movs	r2, #3
   1ba56:	428b      	cmp	r3, r1
   1ba58:	d133      	bne.n	1bac2 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   1ba5a:	4b2c      	ldr	r3, [pc, #176]	; (1bb0c <chk_mounted+0x384>)
   1ba5c:	5cf3      	ldrb	r3, [r6, r3]
   1ba5e:	061b      	lsls	r3, r3, #24
   1ba60:	4a2b      	ldr	r2, [pc, #172]	; (1bb10 <chk_mounted+0x388>)
   1ba62:	5cb2      	ldrb	r2, [r6, r2]
   1ba64:	0412      	lsls	r2, r2, #16
   1ba66:	4313      	orrs	r3, r2
   1ba68:	2285      	movs	r2, #133	; 0x85
   1ba6a:	0092      	lsls	r2, r2, #2
   1ba6c:	5cb2      	ldrb	r2, [r6, r2]
   1ba6e:	4313      	orrs	r3, r2
   1ba70:	4a28      	ldr	r2, [pc, #160]	; (1bb14 <chk_mounted+0x38c>)
   1ba72:	5cb2      	ldrb	r2, [r6, r2]
   1ba74:	0212      	lsls	r2, r2, #8
   1ba76:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   1ba78:	4927      	ldr	r1, [pc, #156]	; (1bb18 <chk_mounted+0x390>)
   1ba7a:	2203      	movs	r2, #3
   1ba7c:	428b      	cmp	r3, r1
   1ba7e:	d120      	bne.n	1bac2 <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   1ba80:	4b26      	ldr	r3, [pc, #152]	; (1bb1c <chk_mounted+0x394>)
   1ba82:	5cf3      	ldrb	r3, [r6, r3]
   1ba84:	061b      	lsls	r3, r3, #24
   1ba86:	4a26      	ldr	r2, [pc, #152]	; (1bb20 <chk_mounted+0x398>)
   1ba88:	5cb2      	ldrb	r2, [r6, r2]
   1ba8a:	0412      	lsls	r2, r2, #16
   1ba8c:	4313      	orrs	r3, r2
   1ba8e:	2287      	movs	r2, #135	; 0x87
   1ba90:	0092      	lsls	r2, r2, #2
   1ba92:	5cb2      	ldrb	r2, [r6, r2]
   1ba94:	4313      	orrs	r3, r2
   1ba96:	4a23      	ldr	r2, [pc, #140]	; (1bb24 <chk_mounted+0x39c>)
   1ba98:	5cb2      	ldrb	r2, [r6, r2]
   1ba9a:	0212      	lsls	r2, r2, #8
   1ba9c:	4313      	orrs	r3, r2
   1ba9e:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   1baa0:	4b21      	ldr	r3, [pc, #132]	; (1bb28 <chk_mounted+0x3a0>)
   1baa2:	5cf3      	ldrb	r3, [r6, r3]
   1baa4:	061b      	lsls	r3, r3, #24
   1baa6:	4a21      	ldr	r2, [pc, #132]	; (1bb2c <chk_mounted+0x3a4>)
   1baa8:	5cb2      	ldrb	r2, [r6, r2]
   1baaa:	0412      	lsls	r2, r2, #16
   1baac:	4313      	orrs	r3, r2
   1baae:	2286      	movs	r2, #134	; 0x86
   1bab0:	0092      	lsls	r2, r2, #2
   1bab2:	5cb2      	ldrb	r2, [r6, r2]
   1bab4:	4313      	orrs	r3, r2
   1bab6:	4a1e      	ldr	r2, [pc, #120]	; (1bb30 <chk_mounted+0x3a8>)
   1bab8:	5cb2      	ldrb	r2, [r6, r2]
   1baba:	0212      	lsls	r2, r2, #8
   1babc:	4313      	orrs	r3, r2
   1babe:	6133      	str	r3, [r6, #16]
   1bac0:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
   1bac2:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   1bac4:	4a1b      	ldr	r2, [pc, #108]	; (1bb34 <chk_mounted+0x3ac>)
   1bac6:	8813      	ldrh	r3, [r2, #0]
   1bac8:	3301      	adds	r3, #1
   1baca:	b29b      	uxth	r3, r3
   1bacc:	8013      	strh	r3, [r2, #0]
   1bace:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   1bad0:	2000      	movs	r0, #0
   1bad2:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
   1bad4:	7130      	strb	r0, [r6, #4]
	return FR_OK;
   1bad6:	e66c      	b.n	1b7b2 <chk_mounted+0x2a>
   1bad8:	20003338 	.word	0x20003338
   1badc:	0001b479 	.word	0x0001b479
   1bae0:	0001b3dd 	.word	0x0001b3dd
   1bae4:	0001b6e5 	.word	0x0001b6e5
   1bae8:	0001f829 	.word	0x0001f829
   1baec:	00000ff5 	.word	0x00000ff5
   1baf0:	0000fff5 	.word	0x0000fff5
   1baf4:	000001ff 	.word	0x000001ff
   1baf8:	0001b495 	.word	0x0001b495
   1bafc:	0000022f 	.word	0x0000022f
   1bb00:	0000022e 	.word	0x0000022e
   1bb04:	ffffaa55 	.word	0xffffaa55
   1bb08:	41615252 	.word	0x41615252
   1bb0c:	00000217 	.word	0x00000217
   1bb10:	00000216 	.word	0x00000216
   1bb14:	00000215 	.word	0x00000215
   1bb18:	61417272 	.word	0x61417272
   1bb1c:	0000021f 	.word	0x0000021f
   1bb20:	0000021e 	.word	0x0000021e
   1bb24:	0000021d 	.word	0x0000021d
   1bb28:	0000021b 	.word	0x0000021b
   1bb2c:	0000021a 	.word	0x0000021a
   1bb30:	00000219 	.word	0x00000219
   1bb34:	20003358 	.word	0x20003358

0001bb38 <move_window>:
{
   1bb38:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bb3a:	46ce      	mov	lr, r9
   1bb3c:	b500      	push	{lr}
   1bb3e:	b082      	sub	sp, #8
   1bb40:	0004      	movs	r4, r0
   1bb42:	000f      	movs	r7, r1
	wsect = fs->winsect;
   1bb44:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
   1bb46:	428d      	cmp	r5, r1
   1bb48:	d03f      	beq.n	1bbca <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
   1bb4a:	7903      	ldrb	r3, [r0, #4]
   1bb4c:	2b00      	cmp	r3, #0
   1bb4e:	d107      	bne.n	1bb60 <move_window+0x28>
	return FR_OK;
   1bb50:	2300      	movs	r3, #0
		if (sector) {
   1bb52:	2f00      	cmp	r7, #0
   1bb54:	d12c      	bne.n	1bbb0 <move_window+0x78>
}
   1bb56:	0018      	movs	r0, r3
   1bb58:	b002      	add	sp, #8
   1bb5a:	bc04      	pop	{r2}
   1bb5c:	4691      	mov	r9, r2
   1bb5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   1bb60:	2330      	movs	r3, #48	; 0x30
   1bb62:	469c      	mov	ip, r3
   1bb64:	4484      	add	ip, r0
   1bb66:	4663      	mov	r3, ip
   1bb68:	4661      	mov	r1, ip
   1bb6a:	9301      	str	r3, [sp, #4]
   1bb6c:	7840      	ldrb	r0, [r0, #1]
   1bb6e:	2301      	movs	r3, #1
   1bb70:	002a      	movs	r2, r5
   1bb72:	4e17      	ldr	r6, [pc, #92]	; (1bbd0 <move_window+0x98>)
   1bb74:	47b0      	blx	r6
				return FR_DISK_ERR;
   1bb76:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   1bb78:	2800      	cmp	r0, #0
   1bb7a:	d1ec      	bne.n	1bb56 <move_window+0x1e>
			fs->wflag = 0;
   1bb7c:	2300      	movs	r3, #0
   1bb7e:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   1bb80:	6a23      	ldr	r3, [r4, #32]
   1bb82:	69e2      	ldr	r2, [r4, #28]
   1bb84:	4694      	mov	ip, r2
   1bb86:	4463      	add	r3, ip
   1bb88:	429d      	cmp	r5, r3
   1bb8a:	d2e1      	bcs.n	1bb50 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   1bb8c:	78e6      	ldrb	r6, [r4, #3]
   1bb8e:	2e01      	cmp	r6, #1
   1bb90:	d9de      	bls.n	1bb50 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
   1bb92:	4b0f      	ldr	r3, [pc, #60]	; (1bbd0 <move_window+0x98>)
   1bb94:	4699      	mov	r9, r3
					wsect += fs->fsize;
   1bb96:	69e3      	ldr	r3, [r4, #28]
   1bb98:	469c      	mov	ip, r3
   1bb9a:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
   1bb9c:	7860      	ldrb	r0, [r4, #1]
   1bb9e:	2301      	movs	r3, #1
   1bba0:	002a      	movs	r2, r5
   1bba2:	9901      	ldr	r1, [sp, #4]
   1bba4:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   1bba6:	3e01      	subs	r6, #1
   1bba8:	b2f6      	uxtb	r6, r6
   1bbaa:	2e01      	cmp	r6, #1
   1bbac:	d1f3      	bne.n	1bb96 <move_window+0x5e>
   1bbae:	e7cf      	b.n	1bb50 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   1bbb0:	0021      	movs	r1, r4
   1bbb2:	3130      	adds	r1, #48	; 0x30
   1bbb4:	7860      	ldrb	r0, [r4, #1]
   1bbb6:	3301      	adds	r3, #1
   1bbb8:	003a      	movs	r2, r7
   1bbba:	4d06      	ldr	r5, [pc, #24]	; (1bbd4 <move_window+0x9c>)
   1bbbc:	47a8      	blx	r5
				return FR_DISK_ERR;
   1bbbe:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   1bbc0:	2800      	cmp	r0, #0
   1bbc2:	d1c8      	bne.n	1bb56 <move_window+0x1e>
			fs->winsect = sector;
   1bbc4:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
   1bbc6:	2300      	movs	r3, #0
   1bbc8:	e7c5      	b.n	1bb56 <move_window+0x1e>
   1bbca:	2300      	movs	r3, #0
   1bbcc:	e7c3      	b.n	1bb56 <move_window+0x1e>
   1bbce:	46c0      	nop			; (mov r8, r8)
   1bbd0:	0001b519 	.word	0x0001b519
   1bbd4:	0001b495 	.word	0x0001b495

0001bbd8 <get_fat>:
{
   1bbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bbda:	0005      	movs	r5, r0
   1bbdc:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   1bbde:	2901      	cmp	r1, #1
   1bbe0:	d974      	bls.n	1bccc <get_fat+0xf4>
		return 1;
   1bbe2:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   1bbe4:	69ab      	ldr	r3, [r5, #24]
   1bbe6:	4299      	cmp	r1, r3
   1bbe8:	d271      	bcs.n	1bcce <get_fat+0xf6>
	switch (fs->fs_type) {
   1bbea:	782b      	ldrb	r3, [r5, #0]
   1bbec:	2b02      	cmp	r3, #2
   1bbee:	d034      	beq.n	1bc5a <get_fat+0x82>
   1bbf0:	2b03      	cmp	r3, #3
   1bbf2:	d049      	beq.n	1bc88 <get_fat+0xb0>
   1bbf4:	2b01      	cmp	r3, #1
   1bbf6:	d002      	beq.n	1bbfe <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   1bbf8:	2001      	movs	r0, #1
   1bbfa:	4240      	negs	r0, r0
   1bbfc:	e067      	b.n	1bcce <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
   1bbfe:	084e      	lsrs	r6, r1, #1
   1bc00:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   1bc02:	0a71      	lsrs	r1, r6, #9
   1bc04:	6a2b      	ldr	r3, [r5, #32]
   1bc06:	469c      	mov	ip, r3
   1bc08:	4461      	add	r1, ip
   1bc0a:	0028      	movs	r0, r5
   1bc0c:	4b30      	ldr	r3, [pc, #192]	; (1bcd0 <get_fat+0xf8>)
   1bc0e:	4798      	blx	r3
   1bc10:	2800      	cmp	r0, #0
   1bc12:	d002      	beq.n	1bc1a <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   1bc14:	2001      	movs	r0, #1
   1bc16:	4240      	negs	r0, r0
   1bc18:	e059      	b.n	1bcce <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
   1bc1a:	05f3      	lsls	r3, r6, #23
   1bc1c:	0ddb      	lsrs	r3, r3, #23
   1bc1e:	18eb      	adds	r3, r5, r3
   1bc20:	3330      	adds	r3, #48	; 0x30
   1bc22:	781f      	ldrb	r7, [r3, #0]
   1bc24:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   1bc26:	0a71      	lsrs	r1, r6, #9
   1bc28:	6a2b      	ldr	r3, [r5, #32]
   1bc2a:	469c      	mov	ip, r3
   1bc2c:	4461      	add	r1, ip
   1bc2e:	0028      	movs	r0, r5
   1bc30:	4b27      	ldr	r3, [pc, #156]	; (1bcd0 <get_fat+0xf8>)
   1bc32:	4798      	blx	r3
   1bc34:	2800      	cmp	r0, #0
   1bc36:	d002      	beq.n	1bc3e <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   1bc38:	2001      	movs	r0, #1
   1bc3a:	4240      	negs	r0, r0
   1bc3c:	e047      	b.n	1bcce <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
   1bc3e:	05f6      	lsls	r6, r6, #23
   1bc40:	0df6      	lsrs	r6, r6, #23
   1bc42:	19ad      	adds	r5, r5, r6
   1bc44:	3530      	adds	r5, #48	; 0x30
   1bc46:	7828      	ldrb	r0, [r5, #0]
   1bc48:	0200      	lsls	r0, r0, #8
   1bc4a:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   1bc4c:	07e3      	lsls	r3, r4, #31
   1bc4e:	d501      	bpl.n	1bc54 <get_fat+0x7c>
   1bc50:	0900      	lsrs	r0, r0, #4
   1bc52:	e03c      	b.n	1bcce <get_fat+0xf6>
   1bc54:	0500      	lsls	r0, r0, #20
   1bc56:	0d00      	lsrs	r0, r0, #20
   1bc58:	e039      	b.n	1bcce <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   1bc5a:	0a09      	lsrs	r1, r1, #8
   1bc5c:	6a2b      	ldr	r3, [r5, #32]
   1bc5e:	469c      	mov	ip, r3
   1bc60:	4461      	add	r1, ip
   1bc62:	0028      	movs	r0, r5
   1bc64:	4b1a      	ldr	r3, [pc, #104]	; (1bcd0 <get_fat+0xf8>)
   1bc66:	4798      	blx	r3
   1bc68:	2800      	cmp	r0, #0
   1bc6a:	d002      	beq.n	1bc72 <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   1bc6c:	2001      	movs	r0, #1
   1bc6e:	4240      	negs	r0, r0
   1bc70:	e02d      	b.n	1bcce <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
   1bc72:	0064      	lsls	r4, r4, #1
   1bc74:	23ff      	movs	r3, #255	; 0xff
   1bc76:	005b      	lsls	r3, r3, #1
   1bc78:	401c      	ands	r4, r3
		return LD_WORD(p);
   1bc7a:	192d      	adds	r5, r5, r4
   1bc7c:	3530      	adds	r5, #48	; 0x30
   1bc7e:	786b      	ldrb	r3, [r5, #1]
   1bc80:	021b      	lsls	r3, r3, #8
   1bc82:	7828      	ldrb	r0, [r5, #0]
   1bc84:	4318      	orrs	r0, r3
   1bc86:	e022      	b.n	1bcce <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   1bc88:	09c9      	lsrs	r1, r1, #7
   1bc8a:	6a2b      	ldr	r3, [r5, #32]
   1bc8c:	469c      	mov	ip, r3
   1bc8e:	4461      	add	r1, ip
   1bc90:	0028      	movs	r0, r5
   1bc92:	4b0f      	ldr	r3, [pc, #60]	; (1bcd0 <get_fat+0xf8>)
   1bc94:	4798      	blx	r3
   1bc96:	2800      	cmp	r0, #0
   1bc98:	d002      	beq.n	1bca0 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   1bc9a:	2001      	movs	r0, #1
   1bc9c:	4240      	negs	r0, r0
   1bc9e:	e016      	b.n	1bcce <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
   1bca0:	00a4      	lsls	r4, r4, #2
   1bca2:	23fe      	movs	r3, #254	; 0xfe
   1bca4:	005b      	lsls	r3, r3, #1
   1bca6:	401c      	ands	r4, r3
   1bca8:	0023      	movs	r3, r4
   1bcaa:	3330      	adds	r3, #48	; 0x30
   1bcac:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
   1bcae:	78d8      	ldrb	r0, [r3, #3]
   1bcb0:	0600      	lsls	r0, r0, #24
   1bcb2:	789a      	ldrb	r2, [r3, #2]
   1bcb4:	0412      	lsls	r2, r2, #16
   1bcb6:	4310      	orrs	r0, r2
   1bcb8:	192c      	adds	r4, r5, r4
   1bcba:	3430      	adds	r4, #48	; 0x30
   1bcbc:	7822      	ldrb	r2, [r4, #0]
   1bcbe:	4310      	orrs	r0, r2
   1bcc0:	785b      	ldrb	r3, [r3, #1]
   1bcc2:	021b      	lsls	r3, r3, #8
   1bcc4:	4318      	orrs	r0, r3
   1bcc6:	0100      	lsls	r0, r0, #4
   1bcc8:	0900      	lsrs	r0, r0, #4
   1bcca:	e000      	b.n	1bcce <get_fat+0xf6>
		return 1;
   1bccc:	2001      	movs	r0, #1
}
   1bcce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bcd0:	0001bb39 	.word	0x0001bb39

0001bcd4 <dir_sdi>:
{
   1bcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bcd6:	0004      	movs	r4, r0
   1bcd8:	000d      	movs	r5, r1
	dj->index = idx;
   1bcda:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
   1bcdc:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
   1bcde:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   1bce0:	2901      	cmp	r1, #1
   1bce2:	d003      	beq.n	1bcec <dir_sdi+0x18>
   1bce4:	6823      	ldr	r3, [r4, #0]
   1bce6:	699a      	ldr	r2, [r3, #24]
   1bce8:	4291      	cmp	r1, r2
   1bcea:	d300      	bcc.n	1bcee <dir_sdi+0x1a>
}
   1bcec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   1bcee:	2900      	cmp	r1, #0
   1bcf0:	d119      	bne.n	1bd26 <dir_sdi+0x52>
   1bcf2:	781a      	ldrb	r2, [r3, #0]
   1bcf4:	2a03      	cmp	r2, #3
   1bcf6:	d013      	beq.n	1bd20 <dir_sdi+0x4c>
		dj->clust = clst;
   1bcf8:	2200      	movs	r2, #0
   1bcfa:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   1bcfc:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
   1bcfe:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   1bd00:	42aa      	cmp	r2, r5
   1bd02:	d9f3      	bls.n	1bcec <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   1bd04:	092a      	lsrs	r2, r5, #4
   1bd06:	b292      	uxth	r2, r2
   1bd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bd0a:	189b      	adds	r3, r3, r2
   1bd0c:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   1bd0e:	6823      	ldr	r3, [r4, #0]
   1bd10:	3330      	adds	r3, #48	; 0x30
   1bd12:	220f      	movs	r2, #15
   1bd14:	4015      	ands	r5, r2
   1bd16:	016d      	lsls	r5, r5, #5
   1bd18:	195d      	adds	r5, r3, r5
   1bd1a:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
   1bd1c:	2000      	movs	r0, #0
   1bd1e:	e7e5      	b.n	1bcec <dir_sdi+0x18>
		clst = dj->fs->dirbase;
   1bd20:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   1bd22:	2900      	cmp	r1, #0
   1bd24:	d0e8      	beq.n	1bcf8 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   1bd26:	789e      	ldrb	r6, [r3, #2]
   1bd28:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
   1bd2a:	42b5      	cmp	r5, r6
   1bd2c:	d313      	bcc.n	1bd56 <dir_sdi+0x82>
   1bd2e:	1bad      	subs	r5, r5, r6
   1bd30:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   1bd32:	4f10      	ldr	r7, [pc, #64]	; (1bd74 <dir_sdi+0xa0>)
   1bd34:	e000      	b.n	1bd38 <dir_sdi+0x64>
   1bd36:	001d      	movs	r5, r3
   1bd38:	6820      	ldr	r0, [r4, #0]
   1bd3a:	47b8      	blx	r7
   1bd3c:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   1bd3e:	1c43      	adds	r3, r0, #1
   1bd40:	d012      	beq.n	1bd68 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   1bd42:	2801      	cmp	r0, #1
   1bd44:	d912      	bls.n	1bd6c <dir_sdi+0x98>
   1bd46:	6823      	ldr	r3, [r4, #0]
   1bd48:	699b      	ldr	r3, [r3, #24]
   1bd4a:	4298      	cmp	r0, r3
   1bd4c:	d210      	bcs.n	1bd70 <dir_sdi+0x9c>
   1bd4e:	1bab      	subs	r3, r5, r6
   1bd50:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
   1bd52:	42b5      	cmp	r5, r6
   1bd54:	d2ef      	bcs.n	1bd36 <dir_sdi+0x62>
		dj->clust = clst;
   1bd56:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   1bd58:	6820      	ldr	r0, [r4, #0]
   1bd5a:	4b07      	ldr	r3, [pc, #28]	; (1bd78 <dir_sdi+0xa4>)
   1bd5c:	4798      	blx	r3
   1bd5e:	092b      	lsrs	r3, r5, #4
   1bd60:	b29b      	uxth	r3, r3
   1bd62:	1818      	adds	r0, r3, r0
   1bd64:	6120      	str	r0, [r4, #16]
   1bd66:	e7d2      	b.n	1bd0e <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   1bd68:	2001      	movs	r0, #1
   1bd6a:	e7bf      	b.n	1bcec <dir_sdi+0x18>
				return FR_INT_ERR;
   1bd6c:	2002      	movs	r0, #2
   1bd6e:	e7bd      	b.n	1bcec <dir_sdi+0x18>
   1bd70:	2002      	movs	r0, #2
   1bd72:	e7bb      	b.n	1bcec <dir_sdi+0x18>
   1bd74:	0001bbd9 	.word	0x0001bbd9
   1bd78:	0001b67f 	.word	0x0001b67f

0001bd7c <put_fat>:
{
   1bd7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bd7e:	46c6      	mov	lr, r8
   1bd80:	b500      	push	{lr}
   1bd82:	0007      	movs	r7, r0
   1bd84:	000c      	movs	r4, r1
   1bd86:	0016      	movs	r6, r2
		res = FR_INT_ERR;
   1bd88:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   1bd8a:	2901      	cmp	r1, #1
   1bd8c:	d902      	bls.n	1bd94 <put_fat+0x18>
   1bd8e:	6983      	ldr	r3, [r0, #24]
   1bd90:	4299      	cmp	r1, r3
   1bd92:	d303      	bcc.n	1bd9c <put_fat+0x20>
}
   1bd94:	0028      	movs	r0, r5
   1bd96:	bc04      	pop	{r2}
   1bd98:	4690      	mov	r8, r2
   1bd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
   1bd9c:	7803      	ldrb	r3, [r0, #0]
   1bd9e:	2b02      	cmp	r3, #2
   1bda0:	d053      	beq.n	1be4a <put_fat+0xce>
   1bda2:	2b03      	cmp	r3, #3
   1bda4:	d063      	beq.n	1be6e <put_fat+0xf2>
			res = FR_INT_ERR;
   1bda6:	2502      	movs	r5, #2
		switch (fs->fs_type) {
   1bda8:	2b01      	cmp	r3, #1
   1bdaa:	d002      	beq.n	1bdb2 <put_fat+0x36>
		fs->wflag = 1;
   1bdac:	2301      	movs	r3, #1
   1bdae:	713b      	strb	r3, [r7, #4]
   1bdb0:	e7f0      	b.n	1bd94 <put_fat+0x18>
			bc = clst; bc += bc / 2;
   1bdb2:	084b      	lsrs	r3, r1, #1
   1bdb4:	4698      	mov	r8, r3
   1bdb6:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   1bdb8:	4643      	mov	r3, r8
   1bdba:	0a59      	lsrs	r1, r3, #9
   1bdbc:	6a03      	ldr	r3, [r0, #32]
   1bdbe:	469c      	mov	ip, r3
   1bdc0:	4461      	add	r1, ip
   1bdc2:	4b3b      	ldr	r3, [pc, #236]	; (1beb0 <put_fat+0x134>)
   1bdc4:	4798      	blx	r3
   1bdc6:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   1bdc8:	d1f0      	bne.n	1bdac <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
   1bdca:	4643      	mov	r3, r8
   1bdcc:	05db      	lsls	r3, r3, #23
   1bdce:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   1bdd0:	07e2      	lsls	r2, r4, #31
   1bdd2:	d51f      	bpl.n	1be14 <put_fat+0x98>
   1bdd4:	18fb      	adds	r3, r7, r3
   1bdd6:	3330      	adds	r3, #48	; 0x30
   1bdd8:	7819      	ldrb	r1, [r3, #0]
   1bdda:	220f      	movs	r2, #15
   1bddc:	400a      	ands	r2, r1
   1bdde:	0131      	lsls	r1, r6, #4
   1bde0:	20ff      	movs	r0, #255	; 0xff
   1bde2:	0100      	lsls	r0, r0, #4
   1bde4:	4001      	ands	r1, r0
   1bde6:	430a      	orrs	r2, r1
   1bde8:	701a      	strb	r2, [r3, #0]
			bc++;
   1bdea:	4644      	mov	r4, r8
   1bdec:	3401      	adds	r4, #1
			fs->wflag = 1;
   1bdee:	2301      	movs	r3, #1
   1bdf0:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   1bdf2:	0a61      	lsrs	r1, r4, #9
   1bdf4:	6a3b      	ldr	r3, [r7, #32]
   1bdf6:	469c      	mov	ip, r3
   1bdf8:	4461      	add	r1, ip
   1bdfa:	0038      	movs	r0, r7
   1bdfc:	4b2c      	ldr	r3, [pc, #176]	; (1beb0 <put_fat+0x134>)
   1bdfe:	4798      	blx	r3
			if (res != FR_OK) break;
   1be00:	2800      	cmp	r0, #0
   1be02:	d151      	bne.n	1bea8 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
   1be04:	05e4      	lsls	r4, r4, #23
   1be06:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   1be08:	0936      	lsrs	r6, r6, #4
   1be0a:	b2f6      	uxtb	r6, r6
   1be0c:	193c      	adds	r4, r7, r4
   1be0e:	3430      	adds	r4, #48	; 0x30
   1be10:	7026      	strb	r6, [r4, #0]
			break;
   1be12:	e7cb      	b.n	1bdac <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   1be14:	18fb      	adds	r3, r7, r3
   1be16:	3330      	adds	r3, #48	; 0x30
   1be18:	701e      	strb	r6, [r3, #0]
			bc++;
   1be1a:	4644      	mov	r4, r8
   1be1c:	3401      	adds	r4, #1
			fs->wflag = 1;
   1be1e:	2301      	movs	r3, #1
   1be20:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   1be22:	0a61      	lsrs	r1, r4, #9
   1be24:	6a3b      	ldr	r3, [r7, #32]
   1be26:	469c      	mov	ip, r3
   1be28:	4461      	add	r1, ip
   1be2a:	0038      	movs	r0, r7
   1be2c:	4b20      	ldr	r3, [pc, #128]	; (1beb0 <put_fat+0x134>)
   1be2e:	4798      	blx	r3
			if (res != FR_OK) break;
   1be30:	2800      	cmp	r0, #0
   1be32:	d13b      	bne.n	1beac <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
   1be34:	05e4      	lsls	r4, r4, #23
   1be36:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   1be38:	193b      	adds	r3, r7, r4
   1be3a:	3330      	adds	r3, #48	; 0x30
   1be3c:	781b      	ldrb	r3, [r3, #0]
   1be3e:	220f      	movs	r2, #15
   1be40:	4393      	bics	r3, r2
   1be42:	0536      	lsls	r6, r6, #20
   1be44:	0f36      	lsrs	r6, r6, #28
   1be46:	431e      	orrs	r6, r3
   1be48:	e7e0      	b.n	1be0c <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   1be4a:	0a09      	lsrs	r1, r1, #8
   1be4c:	6a03      	ldr	r3, [r0, #32]
   1be4e:	469c      	mov	ip, r3
   1be50:	4461      	add	r1, ip
   1be52:	4b17      	ldr	r3, [pc, #92]	; (1beb0 <put_fat+0x134>)
   1be54:	4798      	blx	r3
   1be56:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   1be58:	d1a8      	bne.n	1bdac <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
   1be5a:	0063      	lsls	r3, r4, #1
   1be5c:	24ff      	movs	r4, #255	; 0xff
   1be5e:	0064      	lsls	r4, r4, #1
   1be60:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
   1be62:	18fb      	adds	r3, r7, r3
   1be64:	3330      	adds	r3, #48	; 0x30
   1be66:	701e      	strb	r6, [r3, #0]
   1be68:	0a36      	lsrs	r6, r6, #8
   1be6a:	705e      	strb	r6, [r3, #1]
			break;
   1be6c:	e79e      	b.n	1bdac <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   1be6e:	09c9      	lsrs	r1, r1, #7
   1be70:	6a03      	ldr	r3, [r0, #32]
   1be72:	469c      	mov	ip, r3
   1be74:	4461      	add	r1, ip
   1be76:	4b0e      	ldr	r3, [pc, #56]	; (1beb0 <put_fat+0x134>)
   1be78:	4798      	blx	r3
   1be7a:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   1be7c:	d196      	bne.n	1bdac <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
   1be7e:	00a4      	lsls	r4, r4, #2
   1be80:	23fe      	movs	r3, #254	; 0xfe
   1be82:	005b      	lsls	r3, r3, #1
   1be84:	401c      	ands	r4, r3
   1be86:	0022      	movs	r2, r4
   1be88:	3230      	adds	r2, #48	; 0x30
   1be8a:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
   1be8c:	78d3      	ldrb	r3, [r2, #3]
   1be8e:	193c      	adds	r4, r7, r4
   1be90:	3430      	adds	r4, #48	; 0x30
   1be92:	091b      	lsrs	r3, r3, #4
   1be94:	071b      	lsls	r3, r3, #28
   1be96:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
   1be98:	7026      	strb	r6, [r4, #0]
   1be9a:	0a33      	lsrs	r3, r6, #8
   1be9c:	7053      	strb	r3, [r2, #1]
   1be9e:	0c33      	lsrs	r3, r6, #16
   1bea0:	7093      	strb	r3, [r2, #2]
   1bea2:	0e36      	lsrs	r6, r6, #24
   1bea4:	70d6      	strb	r6, [r2, #3]
			break;
   1bea6:	e781      	b.n	1bdac <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   1bea8:	0005      	movs	r5, r0
   1beaa:	e77f      	b.n	1bdac <put_fat+0x30>
   1beac:	0005      	movs	r5, r0
   1beae:	e77d      	b.n	1bdac <put_fat+0x30>
   1beb0:	0001bb39 	.word	0x0001bb39

0001beb4 <create_chain>:
{
   1beb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1beb6:	46c6      	mov	lr, r8
   1beb8:	b500      	push	{lr}
   1beba:	0005      	movs	r5, r0
   1bebc:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
   1bebe:	2900      	cmp	r1, #0
   1bec0:	d107      	bne.n	1bed2 <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
   1bec2:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   1bec4:	2e00      	cmp	r6, #0
   1bec6:	d00d      	beq.n	1bee4 <create_chain+0x30>
   1bec8:	6983      	ldr	r3, [r0, #24]
   1beca:	429e      	cmp	r6, r3
   1becc:	d30b      	bcc.n	1bee6 <create_chain+0x32>
   1bece:	2601      	movs	r6, #1
   1bed0:	e009      	b.n	1bee6 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
   1bed2:	4b26      	ldr	r3, [pc, #152]	; (1bf6c <create_chain+0xb8>)
   1bed4:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
   1bed6:	2801      	cmp	r0, #1
   1bed8:	d93d      	bls.n	1bf56 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   1beda:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
   1bedc:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   1bede:	4298      	cmp	r0, r3
   1bee0:	d201      	bcs.n	1bee6 <create_chain+0x32>
   1bee2:	e03d      	b.n	1bf60 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
   1bee4:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
   1bee6:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   1bee8:	4f20      	ldr	r7, [pc, #128]	; (1bf6c <create_chain+0xb8>)
   1beea:	e00a      	b.n	1bf02 <create_chain+0x4e>
   1beec:	0021      	movs	r1, r4
   1beee:	0028      	movs	r0, r5
   1bef0:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
   1bef2:	2800      	cmp	r0, #0
   1bef4:	d00d      	beq.n	1bf12 <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   1bef6:	1c43      	adds	r3, r0, #1
   1bef8:	d032      	beq.n	1bf60 <create_chain+0xac>
   1befa:	2801      	cmp	r0, #1
   1befc:	d030      	beq.n	1bf60 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   1befe:	42b4      	cmp	r4, r6
   1bf00:	d02d      	beq.n	1bf5e <create_chain+0xaa>
		ncl++;							/* Next cluster */
   1bf02:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   1bf04:	69ab      	ldr	r3, [r5, #24]
   1bf06:	429c      	cmp	r4, r3
   1bf08:	d3f0      	bcc.n	1beec <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
   1bf0a:	2e01      	cmp	r6, #1
   1bf0c:	d925      	bls.n	1bf5a <create_chain+0xa6>
			ncl = 2;
   1bf0e:	2402      	movs	r4, #2
   1bf10:	e7ec      	b.n	1beec <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   1bf12:	4a17      	ldr	r2, [pc, #92]	; (1bf70 <create_chain+0xbc>)
   1bf14:	0021      	movs	r1, r4
   1bf16:	0028      	movs	r0, r5
   1bf18:	4b16      	ldr	r3, [pc, #88]	; (1bf74 <create_chain+0xc0>)
   1bf1a:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
   1bf1c:	2800      	cmp	r0, #0
   1bf1e:	d113      	bne.n	1bf48 <create_chain+0x94>
   1bf20:	4643      	mov	r3, r8
   1bf22:	2b00      	cmp	r3, #0
   1bf24:	d109      	bne.n	1bf3a <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
   1bf26:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   1bf28:	692b      	ldr	r3, [r5, #16]
   1bf2a:	1c5a      	adds	r2, r3, #1
   1bf2c:	d01b      	beq.n	1bf66 <create_chain+0xb2>
			fs->free_clust--;
   1bf2e:	3b01      	subs	r3, #1
   1bf30:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
   1bf32:	2301      	movs	r3, #1
   1bf34:	716b      	strb	r3, [r5, #5]
   1bf36:	0020      	movs	r0, r4
   1bf38:	e012      	b.n	1bf60 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   1bf3a:	0022      	movs	r2, r4
   1bf3c:	4641      	mov	r1, r8
   1bf3e:	0028      	movs	r0, r5
   1bf40:	4b0c      	ldr	r3, [pc, #48]	; (1bf74 <create_chain+0xc0>)
   1bf42:	4798      	blx	r3
	if (res == FR_OK) {
   1bf44:	2800      	cmp	r0, #0
   1bf46:	d0ee      	beq.n	1bf26 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   1bf48:	3801      	subs	r0, #1
   1bf4a:	4242      	negs	r2, r0
   1bf4c:	4142      	adcs	r2, r0
   1bf4e:	4250      	negs	r0, r2
   1bf50:	2301      	movs	r3, #1
   1bf52:	4318      	orrs	r0, r3
   1bf54:	e004      	b.n	1bf60 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
   1bf56:	2001      	movs	r0, #1
   1bf58:	e002      	b.n	1bf60 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
   1bf5a:	2000      	movs	r0, #0
   1bf5c:	e000      	b.n	1bf60 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   1bf5e:	2000      	movs	r0, #0
}
   1bf60:	bc04      	pop	{r2}
   1bf62:	4690      	mov	r8, r2
   1bf64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bf66:	0020      	movs	r0, r4
   1bf68:	e7fa      	b.n	1bf60 <create_chain+0xac>
   1bf6a:	46c0      	nop			; (mov r8, r8)
   1bf6c:	0001bbd9 	.word	0x0001bbd9
   1bf70:	0fffffff 	.word	0x0fffffff
   1bf74:	0001bd7d 	.word	0x0001bd7d

0001bf78 <remove_chain>:
{
   1bf78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bf7a:	46ce      	mov	lr, r9
   1bf7c:	4647      	mov	r7, r8
   1bf7e:	b580      	push	{r7, lr}
   1bf80:	0004      	movs	r4, r0
   1bf82:	000d      	movs	r5, r1
		res = FR_INT_ERR;
   1bf84:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   1bf86:	2901      	cmp	r1, #1
   1bf88:	d902      	bls.n	1bf90 <remove_chain+0x18>
   1bf8a:	69a3      	ldr	r3, [r4, #24]
   1bf8c:	4299      	cmp	r1, r3
   1bf8e:	d303      	bcc.n	1bf98 <remove_chain+0x20>
}
   1bf90:	bc0c      	pop	{r2, r3}
   1bf92:	4690      	mov	r8, r2
   1bf94:	4699      	mov	r9, r3
   1bf96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
   1bf98:	4f13      	ldr	r7, [pc, #76]	; (1bfe8 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   1bf9a:	4b14      	ldr	r3, [pc, #80]	; (1bfec <remove_chain+0x74>)
   1bf9c:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
   1bf9e:	2301      	movs	r3, #1
   1bfa0:	4699      	mov	r9, r3
   1bfa2:	e003      	b.n	1bfac <remove_chain+0x34>
   1bfa4:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
   1bfa6:	69a3      	ldr	r3, [r4, #24]
   1bfa8:	42b3      	cmp	r3, r6
   1bfaa:	d9f1      	bls.n	1bf90 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   1bfac:	0029      	movs	r1, r5
   1bfae:	0020      	movs	r0, r4
   1bfb0:	47b8      	blx	r7
   1bfb2:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
   1bfb4:	d011      	beq.n	1bfda <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   1bfb6:	2801      	cmp	r0, #1
   1bfb8:	d011      	beq.n	1bfde <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   1bfba:	1c43      	adds	r3, r0, #1
   1bfbc:	d011      	beq.n	1bfe2 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   1bfbe:	2200      	movs	r2, #0
   1bfc0:	0029      	movs	r1, r5
   1bfc2:	0020      	movs	r0, r4
   1bfc4:	47c0      	blx	r8
			if (res != FR_OK) break;
   1bfc6:	2800      	cmp	r0, #0
   1bfc8:	d1e2      	bne.n	1bf90 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   1bfca:	6923      	ldr	r3, [r4, #16]
   1bfcc:	1c5a      	adds	r2, r3, #1
   1bfce:	d0e9      	beq.n	1bfa4 <remove_chain+0x2c>
				fs->free_clust++;
   1bfd0:	3301      	adds	r3, #1
   1bfd2:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
   1bfd4:	464b      	mov	r3, r9
   1bfd6:	7163      	strb	r3, [r4, #5]
   1bfd8:	e7e4      	b.n	1bfa4 <remove_chain+0x2c>
   1bfda:	2000      	movs	r0, #0
   1bfdc:	e7d8      	b.n	1bf90 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   1bfde:	2002      	movs	r0, #2
   1bfe0:	e7d6      	b.n	1bf90 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   1bfe2:	2001      	movs	r0, #1
   1bfe4:	e7d4      	b.n	1bf90 <remove_chain+0x18>
   1bfe6:	46c0      	nop			; (mov r8, r8)
   1bfe8:	0001bbd9 	.word	0x0001bbd9
   1bfec:	0001bd7d 	.word	0x0001bd7d

0001bff0 <dir_next>:
{
   1bff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bff2:	46d6      	mov	lr, sl
   1bff4:	4647      	mov	r7, r8
   1bff6:	b580      	push	{r7, lr}
   1bff8:	0006      	movs	r6, r0
   1bffa:	000d      	movs	r5, r1
	i = dj->index + 1;
   1bffc:	88c4      	ldrh	r4, [r0, #6]
   1bffe:	3401      	adds	r4, #1
   1c000:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
   1c002:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   1c004:	2c00      	cmp	r4, #0
   1c006:	d103      	bne.n	1c010 <dir_next+0x20>
}
   1c008:	bc0c      	pop	{r2, r3}
   1c00a:	4690      	mov	r8, r2
   1c00c:	469a      	mov	sl, r3
   1c00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   1c010:	6933      	ldr	r3, [r6, #16]
   1c012:	2b00      	cmp	r3, #0
   1c014:	d0f8      	beq.n	1c008 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   1c016:	270f      	movs	r7, #15
   1c018:	4027      	ands	r7, r4
   1c01a:	d10f      	bne.n	1c03c <dir_next+0x4c>
		dj->sect++;					/* Next sector */
   1c01c:	3301      	adds	r3, #1
   1c01e:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
   1c020:	68f1      	ldr	r1, [r6, #12]
   1c022:	2900      	cmp	r1, #0
   1c024:	d104      	bne.n	1c030 <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   1c026:	6833      	ldr	r3, [r6, #0]
   1c028:	891b      	ldrh	r3, [r3, #8]
   1c02a:	42a3      	cmp	r3, r4
   1c02c:	d9ec      	bls.n	1c008 <dir_next+0x18>
   1c02e:	e005      	b.n	1c03c <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   1c030:	6830      	ldr	r0, [r6, #0]
   1c032:	7883      	ldrb	r3, [r0, #2]
   1c034:	3b01      	subs	r3, #1
   1c036:	0922      	lsrs	r2, r4, #4
   1c038:	421a      	tst	r2, r3
   1c03a:	d007      	beq.n	1c04c <dir_next+0x5c>
	dj->index = i;
   1c03c:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   1c03e:	6833      	ldr	r3, [r6, #0]
   1c040:	3330      	adds	r3, #48	; 0x30
   1c042:	017f      	lsls	r7, r7, #5
   1c044:	19df      	adds	r7, r3, r7
   1c046:	6177      	str	r7, [r6, #20]
	return FR_OK;
   1c048:	2000      	movs	r0, #0
   1c04a:	e7dd      	b.n	1c008 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   1c04c:	4b2c      	ldr	r3, [pc, #176]	; (1c100 <dir_next+0x110>)
   1c04e:	4798      	blx	r3
   1c050:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
   1c052:	2002      	movs	r0, #2
   1c054:	4643      	mov	r3, r8
   1c056:	2b01      	cmp	r3, #1
   1c058:	d9d6      	bls.n	1c008 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   1c05a:	3301      	adds	r3, #1
   1c05c:	d04b      	beq.n	1c0f6 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   1c05e:	6833      	ldr	r3, [r6, #0]
   1c060:	699a      	ldr	r2, [r3, #24]
   1c062:	4590      	cmp	r8, r2
   1c064:	d33f      	bcc.n	1c0e6 <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   1c066:	3002      	adds	r0, #2
   1c068:	2d00      	cmp	r5, #0
   1c06a:	d0cd      	beq.n	1c008 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   1c06c:	68f1      	ldr	r1, [r6, #12]
   1c06e:	0018      	movs	r0, r3
   1c070:	4b24      	ldr	r3, [pc, #144]	; (1c104 <dir_next+0x114>)
   1c072:	4798      	blx	r3
   1c074:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   1c076:	2007      	movs	r0, #7
   1c078:	4643      	mov	r3, r8
   1c07a:	2b00      	cmp	r3, #0
   1c07c:	d0c4      	beq.n	1c008 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
   1c07e:	3805      	subs	r0, #5
   1c080:	2b01      	cmp	r3, #1
   1c082:	d0c1      	beq.n	1c008 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   1c084:	3801      	subs	r0, #1
   1c086:	3301      	adds	r3, #1
   1c088:	d0be      	beq.n	1c008 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   1c08a:	2100      	movs	r1, #0
   1c08c:	6830      	ldr	r0, [r6, #0]
   1c08e:	4b1e      	ldr	r3, [pc, #120]	; (1c108 <dir_next+0x118>)
   1c090:	4798      	blx	r3
   1c092:	0003      	movs	r3, r0
   1c094:	2001      	movs	r0, #1
   1c096:	2b00      	cmp	r3, #0
   1c098:	d1b6      	bne.n	1c008 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   1c09a:	6830      	ldr	r0, [r6, #0]
   1c09c:	3030      	adds	r0, #48	; 0x30
   1c09e:	2280      	movs	r2, #128	; 0x80
   1c0a0:	0092      	lsls	r2, r2, #2
   1c0a2:	2100      	movs	r1, #0
   1c0a4:	4b19      	ldr	r3, [pc, #100]	; (1c10c <dir_next+0x11c>)
   1c0a6:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   1c0a8:	6835      	ldr	r5, [r6, #0]
   1c0aa:	4641      	mov	r1, r8
   1c0ac:	0028      	movs	r0, r5
   1c0ae:	4b18      	ldr	r3, [pc, #96]	; (1c110 <dir_next+0x120>)
   1c0b0:	4798      	blx	r3
   1c0b2:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   1c0b4:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
   1c0b6:	2301      	movs	r3, #1
   1c0b8:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   1c0ba:	6833      	ldr	r3, [r6, #0]
   1c0bc:	789a      	ldrb	r2, [r3, #2]
   1c0be:	42aa      	cmp	r2, r5
   1c0c0:	d90e      	bls.n	1c0e0 <dir_next+0xf0>
						dj->fs->wflag = 1;
   1c0c2:	4652      	mov	r2, sl
   1c0c4:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   1c0c6:	2100      	movs	r1, #0
   1c0c8:	6830      	ldr	r0, [r6, #0]
   1c0ca:	4b0f      	ldr	r3, [pc, #60]	; (1c108 <dir_next+0x118>)
   1c0cc:	4798      	blx	r3
   1c0ce:	2800      	cmp	r0, #0
   1c0d0:	d113      	bne.n	1c0fa <dir_next+0x10a>
						dj->fs->winsect++;
   1c0d2:	6832      	ldr	r2, [r6, #0]
   1c0d4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1c0d6:	3301      	adds	r3, #1
   1c0d8:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   1c0da:	3501      	adds	r5, #1
   1c0dc:	b2ed      	uxtb	r5, r5
   1c0de:	e7ec      	b.n	1c0ba <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
   1c0e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c0e2:	1b52      	subs	r2, r2, r5
   1c0e4:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
   1c0e6:	4643      	mov	r3, r8
   1c0e8:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
   1c0ea:	4641      	mov	r1, r8
   1c0ec:	6830      	ldr	r0, [r6, #0]
   1c0ee:	4b08      	ldr	r3, [pc, #32]	; (1c110 <dir_next+0x120>)
   1c0f0:	4798      	blx	r3
   1c0f2:	6130      	str	r0, [r6, #16]
   1c0f4:	e7a2      	b.n	1c03c <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   1c0f6:	2001      	movs	r0, #1
   1c0f8:	e786      	b.n	1c008 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   1c0fa:	2001      	movs	r0, #1
   1c0fc:	e784      	b.n	1c008 <dir_next+0x18>
   1c0fe:	46c0      	nop			; (mov r8, r8)
   1c100:	0001bbd9 	.word	0x0001bbd9
   1c104:	0001beb5 	.word	0x0001beb5
   1c108:	0001bb39 	.word	0x0001bb39
   1c10c:	0001b66d 	.word	0x0001b66d
   1c110:	0001b67f 	.word	0x0001b67f

0001c114 <dir_find>:
{
   1c114:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c116:	46de      	mov	lr, fp
   1c118:	4657      	mov	r7, sl
   1c11a:	464e      	mov	r6, r9
   1c11c:	4645      	mov	r5, r8
   1c11e:	b5e0      	push	{r5, r6, r7, lr}
   1c120:	b083      	sub	sp, #12
   1c122:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
   1c124:	2100      	movs	r1, #0
   1c126:	4b5a      	ldr	r3, [pc, #360]	; (1c290 <dir_find+0x17c>)
   1c128:	4798      	blx	r3
   1c12a:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
   1c12c:	d000      	beq.n	1c130 <dir_find+0x1c>
   1c12e:	e09e      	b.n	1c26e <dir_find+0x15a>
   1c130:	23ff      	movs	r3, #255	; 0xff
   1c132:	4699      	mov	r9, r3
   1c134:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
   1c136:	4b57      	ldr	r3, [pc, #348]	; (1c294 <dir_find+0x180>)
   1c138:	469b      	mov	fp, r3
   1c13a:	e01b      	b.n	1c174 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
   1c13c:	2b0f      	cmp	r3, #15
   1c13e:	d030      	beq.n	1c1a2 <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   1c140:	4653      	mov	r3, sl
   1c142:	2b00      	cmp	r3, #0
   1c144:	d105      	bne.n	1c152 <dir_find+0x3e>
   1c146:	0020      	movs	r0, r4
   1c148:	4b53      	ldr	r3, [pc, #332]	; (1c298 <dir_find+0x184>)
   1c14a:	4798      	blx	r3
   1c14c:	4581      	cmp	r9, r0
   1c14e:	d100      	bne.n	1c152 <dir_find+0x3e>
   1c150:	e08d      	b.n	1c26e <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   1c152:	2301      	movs	r3, #1
   1c154:	425b      	negs	r3, r3
   1c156:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   1c158:	69a8      	ldr	r0, [r5, #24]
   1c15a:	7ac3      	ldrb	r3, [r0, #11]
   1c15c:	07db      	lsls	r3, r3, #31
   1c15e:	d400      	bmi.n	1c162 <dir_find+0x4e>
   1c160:	e07d      	b.n	1c25e <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   1c162:	23ff      	movs	r3, #255	; 0xff
   1c164:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
   1c166:	2100      	movs	r1, #0
   1c168:	0028      	movs	r0, r5
   1c16a:	4b4c      	ldr	r3, [pc, #304]	; (1c29c <dir_find+0x188>)
   1c16c:	4798      	blx	r3
   1c16e:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
   1c170:	d000      	beq.n	1c174 <dir_find+0x60>
   1c172:	e07c      	b.n	1c26e <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
   1c174:	6929      	ldr	r1, [r5, #16]
   1c176:	6828      	ldr	r0, [r5, #0]
   1c178:	47d8      	blx	fp
   1c17a:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
   1c17c:	d177      	bne.n	1c26e <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   1c17e:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
   1c180:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   1c182:	2e00      	cmp	r6, #0
   1c184:	d100      	bne.n	1c188 <dir_find+0x74>
   1c186:	e080      	b.n	1c28a <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
   1c188:	7ae2      	ldrb	r2, [r4, #11]
   1c18a:	233f      	movs	r3, #63	; 0x3f
   1c18c:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   1c18e:	2ee5      	cmp	r6, #229	; 0xe5
   1c190:	d100      	bne.n	1c194 <dir_find+0x80>
   1c192:	e077      	b.n	1c284 <dir_find+0x170>
   1c194:	0712      	lsls	r2, r2, #28
   1c196:	d5d1      	bpl.n	1c13c <dir_find+0x28>
   1c198:	2b0f      	cmp	r3, #15
   1c19a:	d002      	beq.n	1c1a2 <dir_find+0x8e>
			ord = 0xFF;
   1c19c:	23ff      	movs	r3, #255	; 0xff
   1c19e:	469a      	mov	sl, r3
   1c1a0:	e7e1      	b.n	1c166 <dir_find+0x52>
				if (dj->lfn) {
   1c1a2:	69ef      	ldr	r7, [r5, #28]
   1c1a4:	2f00      	cmp	r7, #0
   1c1a6:	d0de      	beq.n	1c166 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   1c1a8:	0673      	lsls	r3, r6, #25
   1c1aa:	d518      	bpl.n	1c1de <dir_find+0xca>
						sum = dir[LDIR_Chksum];
   1c1ac:	7b63      	ldrb	r3, [r4, #13]
   1c1ae:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
   1c1b0:	2340      	movs	r3, #64	; 0x40
   1c1b2:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
   1c1b4:	88eb      	ldrh	r3, [r5, #6]
   1c1b6:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   1c1b8:	7b63      	ldrb	r3, [r4, #13]
   1c1ba:	9300      	str	r3, [sp, #0]
   1c1bc:	22ff      	movs	r2, #255	; 0xff
   1c1be:	4692      	mov	sl, r2
   1c1c0:	454b      	cmp	r3, r9
   1c1c2:	d1d0      	bne.n	1c166 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   1c1c4:	7823      	ldrb	r3, [r4, #0]
   1c1c6:	3abf      	subs	r2, #191	; 0xbf
   1c1c8:	4393      	bics	r3, r2
   1c1ca:	3b01      	subs	r3, #1
   1c1cc:	005a      	lsls	r2, r3, #1
   1c1ce:	18d2      	adds	r2, r2, r3
   1c1d0:	0092      	lsls	r2, r2, #2
   1c1d2:	4692      	mov	sl, r2
   1c1d4:	449a      	add	sl, r3
	s = 0; wc = 1;
   1c1d6:	2201      	movs	r2, #1
   1c1d8:	2300      	movs	r3, #0
   1c1da:	4699      	mov	r9, r3
   1c1dc:	e01d      	b.n	1c21a <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   1c1de:	45b2      	cmp	sl, r6
   1c1e0:	d0ea      	beq.n	1c1b8 <dir_find+0xa4>
   1c1e2:	23ff      	movs	r3, #255	; 0xff
   1c1e4:	469a      	mov	sl, r3
   1c1e6:	e7be      	b.n	1c166 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   1c1e8:	4b2d      	ldr	r3, [pc, #180]	; (1c2a0 <dir_find+0x18c>)
   1c1ea:	4798      	blx	r3
   1c1ec:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   1c1ee:	4653      	mov	r3, sl
   1c1f0:	2bfe      	cmp	r3, #254	; 0xfe
   1c1f2:	d81f      	bhi.n	1c234 <dir_find+0x120>
   1c1f4:	2301      	movs	r3, #1
   1c1f6:	4453      	add	r3, sl
   1c1f8:	4698      	mov	r8, r3
   1c1fa:	4653      	mov	r3, sl
   1c1fc:	005b      	lsls	r3, r3, #1
   1c1fe:	5bd8      	ldrh	r0, [r3, r7]
   1c200:	4b27      	ldr	r3, [pc, #156]	; (1c2a0 <dir_find+0x18c>)
   1c202:	4798      	blx	r3
   1c204:	0002      	movs	r2, r0
   1c206:	9b01      	ldr	r3, [sp, #4]
   1c208:	4283      	cmp	r3, r0
   1c20a:	d113      	bne.n	1c234 <dir_find+0x120>
   1c20c:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   1c20e:	2301      	movs	r3, #1
   1c210:	469c      	mov	ip, r3
   1c212:	44e1      	add	r9, ip
   1c214:	464b      	mov	r3, r9
   1c216:	2b0d      	cmp	r3, #13
   1c218:	d011      	beq.n	1c23e <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   1c21a:	4b22      	ldr	r3, [pc, #136]	; (1c2a4 <dir_find+0x190>)
   1c21c:	4649      	mov	r1, r9
   1c21e:	5cc9      	ldrb	r1, [r1, r3]
   1c220:	1863      	adds	r3, r4, r1
   1c222:	785b      	ldrb	r3, [r3, #1]
   1c224:	021b      	lsls	r3, r3, #8
   1c226:	5c60      	ldrb	r0, [r4, r1]
   1c228:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
   1c22a:	2a00      	cmp	r2, #0
   1c22c:	d1dc      	bne.n	1c1e8 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
   1c22e:	4b1e      	ldr	r3, [pc, #120]	; (1c2a8 <dir_find+0x194>)
   1c230:	4298      	cmp	r0, r3
   1c232:	d0ec      	beq.n	1c20e <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   1c234:	9b00      	ldr	r3, [sp, #0]
   1c236:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   1c238:	23ff      	movs	r3, #255	; 0xff
   1c23a:	469a      	mov	sl, r3
   1c23c:	e793      	b.n	1c166 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   1c23e:	7823      	ldrb	r3, [r4, #0]
   1c240:	065b      	lsls	r3, r3, #25
   1c242:	d506      	bpl.n	1c252 <dir_find+0x13e>
   1c244:	2a00      	cmp	r2, #0
   1c246:	d004      	beq.n	1c252 <dir_find+0x13e>
   1c248:	4653      	mov	r3, sl
   1c24a:	005b      	lsls	r3, r3, #1
   1c24c:	5bdb      	ldrh	r3, [r3, r7]
   1c24e:	2b00      	cmp	r3, #0
   1c250:	d1f0      	bne.n	1c234 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   1c252:	3e01      	subs	r6, #1
   1c254:	b2f3      	uxtb	r3, r6
   1c256:	469a      	mov	sl, r3
   1c258:	9b00      	ldr	r3, [sp, #0]
   1c25a:	4699      	mov	r9, r3
   1c25c:	e783      	b.n	1c166 <dir_find+0x52>
   1c25e:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
   1c260:	5ce1      	ldrb	r1, [r4, r3]
   1c262:	5cc2      	ldrb	r2, [r0, r3]
   1c264:	4291      	cmp	r1, r2
   1c266:	d10a      	bne.n	1c27e <dir_find+0x16a>
   1c268:	3301      	adds	r3, #1
   1c26a:	2b0b      	cmp	r3, #11
   1c26c:	d1f8      	bne.n	1c260 <dir_find+0x14c>
}
   1c26e:	0038      	movs	r0, r7
   1c270:	b003      	add	sp, #12
   1c272:	bc3c      	pop	{r2, r3, r4, r5}
   1c274:	4690      	mov	r8, r2
   1c276:	4699      	mov	r9, r3
   1c278:	46a2      	mov	sl, r4
   1c27a:	46ab      	mov	fp, r5
   1c27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   1c27e:	23ff      	movs	r3, #255	; 0xff
   1c280:	469a      	mov	sl, r3
   1c282:	e770      	b.n	1c166 <dir_find+0x52>
			ord = 0xFF;
   1c284:	23ff      	movs	r3, #255	; 0xff
   1c286:	469a      	mov	sl, r3
   1c288:	e76d      	b.n	1c166 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   1c28a:	2704      	movs	r7, #4
   1c28c:	e7ef      	b.n	1c26e <dir_find+0x15a>
   1c28e:	46c0      	nop			; (mov r8, r8)
   1c290:	0001bcd5 	.word	0x0001bcd5
   1c294:	0001bb39 	.word	0x0001bb39
   1c298:	0001b697 	.word	0x0001b697
   1c29c:	0001bff1 	.word	0x0001bff1
   1c2a0:	0001cea5 	.word	0x0001cea5
   1c2a4:	00022874 	.word	0x00022874
   1c2a8:	0000ffff 	.word	0x0000ffff

0001c2ac <dir_register>:
{
   1c2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c2ae:	46de      	mov	lr, fp
   1c2b0:	4657      	mov	r7, sl
   1c2b2:	464e      	mov	r6, r9
   1c2b4:	4645      	mov	r5, r8
   1c2b6:	b5e0      	push	{r5, r6, r7, lr}
   1c2b8:	b089      	sub	sp, #36	; 0x24
   1c2ba:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
   1c2bc:	6987      	ldr	r7, [r0, #24]
   1c2be:	69c3      	ldr	r3, [r0, #28]
   1c2c0:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
   1c2c2:	ad05      	add	r5, sp, #20
   1c2c4:	220c      	movs	r2, #12
   1c2c6:	0039      	movs	r1, r7
   1c2c8:	0028      	movs	r0, r5
   1c2ca:	4ba7      	ldr	r3, [pc, #668]	; (1c568 <dir_register+0x2bc>)
   1c2cc:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   1c2ce:	7aeb      	ldrb	r3, [r5, #11]
   1c2d0:	07db      	lsls	r3, r3, #31
   1c2d2:	d400      	bmi.n	1c2d6 <dir_register+0x2a>
   1c2d4:	e070      	b.n	1c3b8 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   1c2d6:	2300      	movs	r3, #0
   1c2d8:	72fb      	strb	r3, [r7, #11]
   1c2da:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
   1c2dc:	220b      	movs	r2, #11
   1c2de:	a905      	add	r1, sp, #20
   1c2e0:	0038      	movs	r0, r7
   1c2e2:	4ba1      	ldr	r3, [pc, #644]	; (1c568 <dir_register+0x2bc>)
   1c2e4:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   1c2e6:	2301      	movs	r3, #1
		ns[i--] = c;
   1c2e8:	ad03      	add	r5, sp, #12
   1c2ea:	001e      	movs	r6, r3
   1c2ec:	46a0      	mov	r8, r4
   1c2ee:	e049      	b.n	1c384 <dir_register+0xd8>
   1c2f0:	3801      	subs	r0, #1
   1c2f2:	1829      	adds	r1, r5, r0
   1c2f4:	704a      	strb	r2, [r1, #1]
		seq /= 16;
   1c2f6:	091b      	lsrs	r3, r3, #4
   1c2f8:	b29b      	uxth	r3, r3
	} while (seq);
   1c2fa:	2b00      	cmp	r3, #0
   1c2fc:	d007      	beq.n	1c30e <dir_register+0x62>
		c = (seq % 16) + '0';
   1c2fe:	0021      	movs	r1, r4
   1c300:	4019      	ands	r1, r3
   1c302:	000a      	movs	r2, r1
   1c304:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
   1c306:	2a39      	cmp	r2, #57	; 0x39
   1c308:	d9f2      	bls.n	1c2f0 <dir_register+0x44>
   1c30a:	3207      	adds	r2, #7
   1c30c:	e7f0      	b.n	1c2f0 <dir_register+0x44>
	ns[i] = '~';
   1c30e:	337e      	adds	r3, #126	; 0x7e
   1c310:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
   1c312:	2800      	cmp	r0, #0
   1c314:	d00a      	beq.n	1c32c <dir_register+0x80>
   1c316:	783b      	ldrb	r3, [r7, #0]
   1c318:	2b20      	cmp	r3, #32
   1c31a:	d009      	beq.n	1c330 <dir_register+0x84>
   1c31c:	2300      	movs	r3, #0
   1c31e:	3301      	adds	r3, #1
   1c320:	4298      	cmp	r0, r3
   1c322:	d007      	beq.n	1c334 <dir_register+0x88>
   1c324:	5cfa      	ldrb	r2, [r7, r3]
   1c326:	2a20      	cmp	r2, #32
   1c328:	d1f9      	bne.n	1c31e <dir_register+0x72>
   1c32a:	e009      	b.n	1c340 <dir_register+0x94>
   1c32c:	0003      	movs	r3, r0
   1c32e:	e007      	b.n	1c340 <dir_register+0x94>
   1c330:	2300      	movs	r3, #0
   1c332:	e005      	b.n	1c340 <dir_register+0x94>
   1c334:	0003      	movs	r3, r0
   1c336:	e003      	b.n	1c340 <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   1c338:	54fa      	strb	r2, [r7, r3]
   1c33a:	3301      	adds	r3, #1
	} while (j < 8);
   1c33c:	2b07      	cmp	r3, #7
   1c33e:	d805      	bhi.n	1c34c <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   1c340:	2220      	movs	r2, #32
   1c342:	2807      	cmp	r0, #7
   1c344:	d8f8      	bhi.n	1c338 <dir_register+0x8c>
   1c346:	5c2a      	ldrb	r2, [r5, r0]
   1c348:	3001      	adds	r0, #1
   1c34a:	e7f5      	b.n	1c338 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   1c34c:	4640      	mov	r0, r8
   1c34e:	4b87      	ldr	r3, [pc, #540]	; (1c56c <dir_register+0x2c0>)
   1c350:	4798      	blx	r3
			if (res != FR_OK) break;
   1c352:	2800      	cmp	r0, #0
   1c354:	d11c      	bne.n	1c390 <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
   1c356:	3601      	adds	r6, #1
   1c358:	b2b6      	uxth	r6, r6
   1c35a:	2e64      	cmp	r6, #100	; 0x64
   1c35c:	d015      	beq.n	1c38a <dir_register+0xde>
	mem_cpy(dst, src, 11);
   1c35e:	220b      	movs	r2, #11
   1c360:	a905      	add	r1, sp, #20
   1c362:	0038      	movs	r0, r7
   1c364:	4b80      	ldr	r3, [pc, #512]	; (1c568 <dir_register+0x2bc>)
   1c366:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   1c368:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   1c36a:	2e05      	cmp	r6, #5
   1c36c:	d90a      	bls.n	1c384 <dir_register+0xd8>
   1c36e:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   1c370:	085a      	lsrs	r2, r3, #1
   1c372:	03db      	lsls	r3, r3, #15
   1c374:	4313      	orrs	r3, r2
   1c376:	880a      	ldrh	r2, [r1, #0]
   1c378:	189b      	adds	r3, r3, r2
   1c37a:	b29b      	uxth	r3, r3
   1c37c:	3102      	adds	r1, #2
   1c37e:	880a      	ldrh	r2, [r1, #0]
   1c380:	2a00      	cmp	r2, #0
   1c382:	d1f5      	bne.n	1c370 <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
   1c384:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
   1c386:	240f      	movs	r4, #15
   1c388:	e7b9      	b.n	1c2fe <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   1c38a:	2307      	movs	r3, #7
   1c38c:	4698      	mov	r8, r3
   1c38e:	e006      	b.n	1c39e <dir_register+0xf2>
   1c390:	4644      	mov	r4, r8
   1c392:	4680      	mov	r8, r0
   1c394:	2e64      	cmp	r6, #100	; 0x64
   1c396:	d100      	bne.n	1c39a <dir_register+0xee>
   1c398:	e0a5      	b.n	1c4e6 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   1c39a:	2804      	cmp	r0, #4
   1c39c:	d007      	beq.n	1c3ae <dir_register+0x102>
}
   1c39e:	4640      	mov	r0, r8
   1c3a0:	b009      	add	sp, #36	; 0x24
   1c3a2:	bc3c      	pop	{r2, r3, r4, r5}
   1c3a4:	4690      	mov	r8, r2
   1c3a6:	4699      	mov	r9, r3
   1c3a8:	46a2      	mov	sl, r4
   1c3aa:	46ab      	mov	fp, r5
   1c3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
   1c3ae:	ab05      	add	r3, sp, #20
   1c3b0:	7adb      	ldrb	r3, [r3, #11]
   1c3b2:	72fb      	strb	r3, [r7, #11]
   1c3b4:	4653      	mov	r3, sl
   1c3b6:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   1c3b8:	ab05      	add	r3, sp, #20
   1c3ba:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
   1c3bc:	2201      	movs	r2, #1
   1c3be:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   1c3c0:	079b      	lsls	r3, r3, #30
   1c3c2:	d511      	bpl.n	1c3e8 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
   1c3c4:	4653      	mov	r3, sl
   1c3c6:	881b      	ldrh	r3, [r3, #0]
   1c3c8:	2b00      	cmp	r3, #0
   1c3ca:	d01b      	beq.n	1c404 <dir_register+0x158>
   1c3cc:	2000      	movs	r0, #0
   1c3ce:	4652      	mov	r2, sl
   1c3d0:	3001      	adds	r0, #1
   1c3d2:	b280      	uxth	r0, r0
   1c3d4:	0043      	lsls	r3, r0, #1
   1c3d6:	5a9b      	ldrh	r3, [r3, r2]
   1c3d8:	2b00      	cmp	r3, #0
   1c3da:	d1f9      	bne.n	1c3d0 <dir_register+0x124>
		ne = (ne + 25) / 13;
   1c3dc:	3019      	adds	r0, #25
   1c3de:	210d      	movs	r1, #13
   1c3e0:	4b63      	ldr	r3, [pc, #396]	; (1c570 <dir_register+0x2c4>)
   1c3e2:	4798      	blx	r3
   1c3e4:	b283      	uxth	r3, r0
   1c3e6:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
   1c3e8:	2100      	movs	r1, #0
   1c3ea:	0020      	movs	r0, r4
   1c3ec:	4b61      	ldr	r3, [pc, #388]	; (1c574 <dir_register+0x2c8>)
   1c3ee:	4798      	blx	r3
   1c3f0:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
   1c3f2:	2800      	cmp	r0, #0
   1c3f4:	d1d3      	bne.n	1c39e <dir_register+0xf2>
   1c3f6:	4682      	mov	sl, r0
   1c3f8:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
   1c3fa:	4f5f      	ldr	r7, [pc, #380]	; (1c578 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
   1c3fc:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   1c3fe:	4b5f      	ldr	r3, [pc, #380]	; (1c57c <dir_register+0x2d0>)
   1c400:	4699      	mov	r9, r3
   1c402:	e00b      	b.n	1c41c <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
   1c404:	2000      	movs	r0, #0
   1c406:	e7e9      	b.n	1c3dc <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   1c408:	1c6b      	adds	r3, r5, #1
   1c40a:	b29b      	uxth	r3, r3
   1c40c:	459b      	cmp	fp, r3
   1c40e:	d06d      	beq.n	1c4ec <dir_register+0x240>
   1c410:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   1c412:	2101      	movs	r1, #1
   1c414:	0020      	movs	r0, r4
   1c416:	47c8      	blx	r9
	} while (res == FR_OK);
   1c418:	2800      	cmp	r0, #0
   1c41a:	d112      	bne.n	1c442 <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
   1c41c:	6921      	ldr	r1, [r4, #16]
   1c41e:	6820      	ldr	r0, [r4, #0]
   1c420:	47b8      	blx	r7
		if (res != FR_OK) break;
   1c422:	2800      	cmp	r0, #0
   1c424:	d000      	beq.n	1c428 <dir_register+0x17c>
   1c426:	e098      	b.n	1c55a <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
   1c428:	6963      	ldr	r3, [r4, #20]
   1c42a:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   1c42c:	2be5      	cmp	r3, #229	; 0xe5
   1c42e:	d001      	beq.n	1c434 <dir_register+0x188>
   1c430:	2b00      	cmp	r3, #0
   1c432:	d104      	bne.n	1c43e <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   1c434:	2d00      	cmp	r5, #0
   1c436:	d1e7      	bne.n	1c408 <dir_register+0x15c>
   1c438:	88e3      	ldrh	r3, [r4, #6]
   1c43a:	469a      	mov	sl, r3
   1c43c:	e7e4      	b.n	1c408 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
   1c43e:	0035      	movs	r5, r6
   1c440:	e7e7      	b.n	1c412 <dir_register+0x166>
   1c442:	4680      	mov	r8, r0
   1c444:	e7ab      	b.n	1c39e <dir_register+0xf2>
		res = dir_sdi(dj, is);
   1c446:	4651      	mov	r1, sl
   1c448:	0020      	movs	r0, r4
   1c44a:	4b4a      	ldr	r3, [pc, #296]	; (1c574 <dir_register+0x2c8>)
   1c44c:	4798      	blx	r3
   1c44e:	4680      	mov	r8, r0
		if (res == FR_OK) {
   1c450:	2800      	cmp	r0, #0
   1c452:	d1a4      	bne.n	1c39e <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   1c454:	69a0      	ldr	r0, [r4, #24]
   1c456:	4b4a      	ldr	r3, [pc, #296]	; (1c580 <dir_register+0x2d4>)
   1c458:	4798      	blx	r3
   1c45a:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   1c45c:	46a8      	mov	r8, r5
   1c45e:	e01f      	b.n	1c4a0 <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   1c460:	0022      	movs	r2, r4
   1c462:	e067      	b.n	1c534 <dir_register+0x288>
   1c464:	465e      	mov	r6, fp
   1c466:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   1c468:	4946      	ldr	r1, [pc, #280]	; (1c584 <dir_register+0x2d8>)
   1c46a:	428b      	cmp	r3, r1
   1c46c:	d003      	beq.n	1c476 <dir_register+0x1ca>
   1c46e:	0052      	lsls	r2, r2, #1
   1c470:	5b93      	ldrh	r3, [r2, r6]
   1c472:	2b00      	cmp	r3, #0
   1c474:	d103      	bne.n	1c47e <dir_register+0x1d2>
   1c476:	2340      	movs	r3, #64	; 0x40
   1c478:	464a      	mov	r2, r9
   1c47a:	431a      	orrs	r2, r3
   1c47c:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   1c47e:	464b      	mov	r3, r9
   1c480:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
   1c482:	2301      	movs	r3, #1
   1c484:	6822      	ldr	r2, [r4, #0]
   1c486:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
   1c488:	2100      	movs	r1, #0
   1c48a:	0020      	movs	r0, r4
   1c48c:	4b3b      	ldr	r3, [pc, #236]	; (1c57c <dir_register+0x2d0>)
   1c48e:	4798      	blx	r3
			} while (res == FR_OK && --ne);
   1c490:	2800      	cmp	r0, #0
   1c492:	d166      	bne.n	1c562 <dir_register+0x2b6>
   1c494:	4645      	mov	r5, r8
   1c496:	3d01      	subs	r5, #1
   1c498:	b2ab      	uxth	r3, r5
   1c49a:	4698      	mov	r8, r3
   1c49c:	2b00      	cmp	r3, #0
   1c49e:	d027      	beq.n	1c4f0 <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
   1c4a0:	6921      	ldr	r1, [r4, #16]
   1c4a2:	6820      	ldr	r0, [r4, #0]
   1c4a4:	4b34      	ldr	r3, [pc, #208]	; (1c578 <dir_register+0x2cc>)
   1c4a6:	4798      	blx	r3
				if (res != FR_OK) break;
   1c4a8:	2800      	cmp	r0, #0
   1c4aa:	d158      	bne.n	1c55e <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   1c4ac:	69e6      	ldr	r6, [r4, #28]
   1c4ae:	6960      	ldr	r0, [r4, #20]
   1c4b0:	4643      	mov	r3, r8
   1c4b2:	466a      	mov	r2, sp
   1c4b4:	70d3      	strb	r3, [r2, #3]
   1c4b6:	78d3      	ldrb	r3, [r2, #3]
   1c4b8:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
   1c4ba:	7913      	ldrb	r3, [r2, #4]
   1c4bc:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   1c4be:	230f      	movs	r3, #15
   1c4c0:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
   1c4c2:	2300      	movs	r3, #0
   1c4c4:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   1c4c6:	7683      	strb	r3, [r0, #26]
   1c4c8:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   1c4ca:	464b      	mov	r3, r9
   1c4cc:	3b01      	subs	r3, #1
   1c4ce:	005a      	lsls	r2, r3, #1
   1c4d0:	18d2      	adds	r2, r2, r3
   1c4d2:	0092      	lsls	r2, r2, #2
   1c4d4:	18d2      	adds	r2, r2, r3
   1c4d6:	492c      	ldr	r1, [pc, #176]	; (1c588 <dir_register+0x2dc>)
   1c4d8:	000d      	movs	r5, r1
   1c4da:	350d      	adds	r5, #13
	s = wc = 0;
   1c4dc:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   1c4de:	4f29      	ldr	r7, [pc, #164]	; (1c584 <dir_register+0x2d8>)
   1c4e0:	46b3      	mov	fp, r6
   1c4e2:	46a4      	mov	ip, r4
   1c4e4:	e029      	b.n	1c53a <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   1c4e6:	2307      	movs	r3, #7
   1c4e8:	4698      	mov	r8, r3
   1c4ea:	e758      	b.n	1c39e <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   1c4ec:	2b01      	cmp	r3, #1
   1c4ee:	d8aa      	bhi.n	1c446 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
   1c4f0:	6921      	ldr	r1, [r4, #16]
   1c4f2:	6820      	ldr	r0, [r4, #0]
   1c4f4:	4b20      	ldr	r3, [pc, #128]	; (1c578 <dir_register+0x2cc>)
   1c4f6:	4798      	blx	r3
   1c4f8:	4680      	mov	r8, r0
		if (res == FR_OK) {
   1c4fa:	2800      	cmp	r0, #0
   1c4fc:	d000      	beq.n	1c500 <dir_register+0x254>
   1c4fe:	e74e      	b.n	1c39e <dir_register+0xf2>
			dir = dj->dir;
   1c500:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   1c502:	2220      	movs	r2, #32
   1c504:	2100      	movs	r1, #0
   1c506:	0028      	movs	r0, r5
   1c508:	4b20      	ldr	r3, [pc, #128]	; (1c58c <dir_register+0x2e0>)
   1c50a:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   1c50c:	220b      	movs	r2, #11
   1c50e:	69a1      	ldr	r1, [r4, #24]
   1c510:	0028      	movs	r0, r5
   1c512:	4b15      	ldr	r3, [pc, #84]	; (1c568 <dir_register+0x2bc>)
   1c514:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   1c516:	69a3      	ldr	r3, [r4, #24]
   1c518:	7ada      	ldrb	r2, [r3, #11]
   1c51a:	2318      	movs	r3, #24
   1c51c:	4013      	ands	r3, r2
   1c51e:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
   1c520:	6823      	ldr	r3, [r4, #0]
   1c522:	2201      	movs	r2, #1
   1c524:	711a      	strb	r2, [r3, #4]
   1c526:	e73a      	b.n	1c39e <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   1c528:	780c      	ldrb	r4, [r1, #0]
   1c52a:	26ff      	movs	r6, #255	; 0xff
   1c52c:	5506      	strb	r6, [r0, r4]
   1c52e:	1904      	adds	r4, r0, r4
   1c530:	26ff      	movs	r6, #255	; 0xff
   1c532:	7066      	strb	r6, [r4, #1]
   1c534:	3101      	adds	r1, #1
	} while (++s < 13);
   1c536:	42a9      	cmp	r1, r5
   1c538:	d094      	beq.n	1c464 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   1c53a:	42bb      	cmp	r3, r7
   1c53c:	d0f4      	beq.n	1c528 <dir_register+0x27c>
   1c53e:	1c54      	adds	r4, r2, #1
   1c540:	0052      	lsls	r2, r2, #1
   1c542:	465b      	mov	r3, fp
   1c544:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   1c546:	780a      	ldrb	r2, [r1, #0]
   1c548:	5483      	strb	r3, [r0, r2]
   1c54a:	1882      	adds	r2, r0, r2
   1c54c:	0a1e      	lsrs	r6, r3, #8
   1c54e:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   1c550:	2b00      	cmp	r3, #0
   1c552:	d185      	bne.n	1c460 <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   1c554:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   1c556:	003b      	movs	r3, r7
   1c558:	e7ec      	b.n	1c534 <dir_register+0x288>
   1c55a:	4680      	mov	r8, r0
   1c55c:	e71f      	b.n	1c39e <dir_register+0xf2>
   1c55e:	4680      	mov	r8, r0
   1c560:	e71d      	b.n	1c39e <dir_register+0xf2>
   1c562:	4680      	mov	r8, r0
   1c564:	e71b      	b.n	1c39e <dir_register+0xf2>
   1c566:	46c0      	nop			; (mov r8, r8)
   1c568:	0001b659 	.word	0x0001b659
   1c56c:	0001c115 	.word	0x0001c115
   1c570:	0001f93d 	.word	0x0001f93d
   1c574:	0001bcd5 	.word	0x0001bcd5
   1c578:	0001bb39 	.word	0x0001bb39
   1c57c:	0001bff1 	.word	0x0001bff1
   1c580:	0001b697 	.word	0x0001b697
   1c584:	0000ffff 	.word	0x0000ffff
   1c588:	00022874 	.word	0x00022874
   1c58c:	0001b66d 	.word	0x0001b66d

0001c590 <sync>:
{
   1c590:	b570      	push	{r4, r5, r6, lr}
   1c592:	0004      	movs	r4, r0
	res = move_window(fs, 0);
   1c594:	2100      	movs	r1, #0
   1c596:	4b2c      	ldr	r3, [pc, #176]	; (1c648 <sync+0xb8>)
   1c598:	4798      	blx	r3
	if (res == FR_OK) {
   1c59a:	2800      	cmp	r0, #0
   1c59c:	d10a      	bne.n	1c5b4 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   1c59e:	7823      	ldrb	r3, [r4, #0]
   1c5a0:	2b03      	cmp	r3, #3
   1c5a2:	d008      	beq.n	1c5b6 <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   1c5a4:	7860      	ldrb	r0, [r4, #1]
   1c5a6:	2200      	movs	r2, #0
   1c5a8:	2100      	movs	r1, #0
   1c5aa:	4b28      	ldr	r3, [pc, #160]	; (1c64c <sync+0xbc>)
   1c5ac:	4798      	blx	r3
   1c5ae:	1e43      	subs	r3, r0, #1
   1c5b0:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
   1c5b2:	b2c0      	uxtb	r0, r0
}
   1c5b4:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   1c5b6:	7963      	ldrb	r3, [r4, #5]
   1c5b8:	2b00      	cmp	r3, #0
   1c5ba:	d0f3      	beq.n	1c5a4 <sync+0x14>
			fs->winsect = 0;
   1c5bc:	2600      	movs	r6, #0
   1c5be:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
   1c5c0:	0025      	movs	r5, r4
   1c5c2:	3530      	adds	r5, #48	; 0x30
   1c5c4:	2280      	movs	r2, #128	; 0x80
   1c5c6:	0092      	lsls	r2, r2, #2
   1c5c8:	2100      	movs	r1, #0
   1c5ca:	0028      	movs	r0, r5
   1c5cc:	4b20      	ldr	r3, [pc, #128]	; (1c650 <sync+0xc0>)
   1c5ce:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   1c5d0:	2255      	movs	r2, #85	; 0x55
   1c5d2:	4b20      	ldr	r3, [pc, #128]	; (1c654 <sync+0xc4>)
   1c5d4:	54e2      	strb	r2, [r4, r3]
   1c5d6:	3255      	adds	r2, #85	; 0x55
   1c5d8:	4b1f      	ldr	r3, [pc, #124]	; (1c658 <sync+0xc8>)
   1c5da:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   1c5dc:	3bde      	subs	r3, #222	; 0xde
   1c5de:	3bff      	subs	r3, #255	; 0xff
   1c5e0:	3a7a      	subs	r2, #122	; 0x7a
   1c5e2:	54a3      	strb	r3, [r4, r2]
   1c5e4:	3201      	adds	r2, #1
   1c5e6:	54a3      	strb	r3, [r4, r2]
   1c5e8:	330f      	adds	r3, #15
   1c5ea:	3201      	adds	r2, #1
   1c5ec:	54a3      	strb	r3, [r4, r2]
   1c5ee:	320f      	adds	r2, #15
   1c5f0:	2133      	movs	r1, #51	; 0x33
   1c5f2:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   1c5f4:	313f      	adds	r1, #63	; 0x3f
   1c5f6:	2085      	movs	r0, #133	; 0x85
   1c5f8:	0080      	lsls	r0, r0, #2
   1c5fa:	5421      	strb	r1, [r4, r0]
   1c5fc:	4817      	ldr	r0, [pc, #92]	; (1c65c <sync+0xcc>)
   1c5fe:	5421      	strb	r1, [r4, r0]
   1c600:	4917      	ldr	r1, [pc, #92]	; (1c660 <sync+0xd0>)
   1c602:	5462      	strb	r2, [r4, r1]
   1c604:	4a17      	ldr	r2, [pc, #92]	; (1c664 <sync+0xd4>)
   1c606:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   1c608:	6923      	ldr	r3, [r4, #16]
   1c60a:	3201      	adds	r2, #1
   1c60c:	54a3      	strb	r3, [r4, r2]
   1c60e:	0a19      	lsrs	r1, r3, #8
   1c610:	4a15      	ldr	r2, [pc, #84]	; (1c668 <sync+0xd8>)
   1c612:	54a1      	strb	r1, [r4, r2]
   1c614:	0c19      	lsrs	r1, r3, #16
   1c616:	4a15      	ldr	r2, [pc, #84]	; (1c66c <sync+0xdc>)
   1c618:	54a1      	strb	r1, [r4, r2]
   1c61a:	0e1b      	lsrs	r3, r3, #24
   1c61c:	4a14      	ldr	r2, [pc, #80]	; (1c670 <sync+0xe0>)
   1c61e:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   1c620:	68e3      	ldr	r3, [r4, #12]
   1c622:	3201      	adds	r2, #1
   1c624:	54a3      	strb	r3, [r4, r2]
   1c626:	0a19      	lsrs	r1, r3, #8
   1c628:	4a12      	ldr	r2, [pc, #72]	; (1c674 <sync+0xe4>)
   1c62a:	54a1      	strb	r1, [r4, r2]
   1c62c:	0c19      	lsrs	r1, r3, #16
   1c62e:	4a12      	ldr	r2, [pc, #72]	; (1c678 <sync+0xe8>)
   1c630:	54a1      	strb	r1, [r4, r2]
   1c632:	0e1b      	lsrs	r3, r3, #24
   1c634:	4a11      	ldr	r2, [pc, #68]	; (1c67c <sync+0xec>)
   1c636:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   1c638:	7860      	ldrb	r0, [r4, #1]
   1c63a:	2301      	movs	r3, #1
   1c63c:	6962      	ldr	r2, [r4, #20]
   1c63e:	0029      	movs	r1, r5
   1c640:	4d0f      	ldr	r5, [pc, #60]	; (1c680 <sync+0xf0>)
   1c642:	47a8      	blx	r5
			fs->fsi_flag = 0;
   1c644:	7166      	strb	r6, [r4, #5]
   1c646:	e7ad      	b.n	1c5a4 <sync+0x14>
   1c648:	0001bb39 	.word	0x0001bb39
   1c64c:	0001b59d 	.word	0x0001b59d
   1c650:	0001b66d 	.word	0x0001b66d
   1c654:	0000022e 	.word	0x0000022e
   1c658:	0000022f 	.word	0x0000022f
   1c65c:	00000215 	.word	0x00000215
   1c660:	00000216 	.word	0x00000216
   1c664:	00000217 	.word	0x00000217
   1c668:	00000219 	.word	0x00000219
   1c66c:	0000021a 	.word	0x0000021a
   1c670:	0000021b 	.word	0x0000021b
   1c674:	0000021d 	.word	0x0000021d
   1c678:	0000021e 	.word	0x0000021e
   1c67c:	0000021f 	.word	0x0000021f
   1c680:	0001b519 	.word	0x0001b519

0001c684 <follow_path>:
{
   1c684:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c686:	46de      	mov	lr, fp
   1c688:	4657      	mov	r7, sl
   1c68a:	464e      	mov	r6, r9
   1c68c:	4645      	mov	r5, r8
   1c68e:	b5e0      	push	{r5, r6, r7, lr}
   1c690:	b083      	sub	sp, #12
   1c692:	4682      	mov	sl, r0
   1c694:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   1c696:	780b      	ldrb	r3, [r1, #0]
   1c698:	2b2f      	cmp	r3, #47	; 0x2f
   1c69a:	d00f      	beq.n	1c6bc <follow_path+0x38>
   1c69c:	2b5c      	cmp	r3, #92	; 0x5c
   1c69e:	d00d      	beq.n	1c6bc <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
   1c6a0:	2300      	movs	r3, #0
   1c6a2:	4652      	mov	r2, sl
   1c6a4:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   1c6a6:	782b      	ldrb	r3, [r5, #0]
   1c6a8:	4657      	mov	r7, sl
   1c6aa:	2b1f      	cmp	r3, #31
   1c6ac:	d809      	bhi.n	1c6c2 <follow_path+0x3e>
		res = dir_sdi(dj, 0);
   1c6ae:	2100      	movs	r1, #0
   1c6b0:	4650      	mov	r0, sl
   1c6b2:	4bb2      	ldr	r3, [pc, #712]	; (1c97c <follow_path+0x2f8>)
   1c6b4:	4798      	blx	r3
		dj->dir = 0;
   1c6b6:	2300      	movs	r3, #0
   1c6b8:	617b      	str	r3, [r7, #20]
   1c6ba:	e13a      	b.n	1c932 <follow_path+0x2ae>
		path++;
   1c6bc:	3501      	adds	r5, #1
   1c6be:	e7ef      	b.n	1c6a0 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   1c6c0:	3501      	adds	r5, #1
   1c6c2:	7828      	ldrb	r0, [r5, #0]
   1c6c4:	282f      	cmp	r0, #47	; 0x2f
   1c6c6:	d0fb      	beq.n	1c6c0 <follow_path+0x3c>
   1c6c8:	285c      	cmp	r0, #92	; 0x5c
   1c6ca:	d0f9      	beq.n	1c6c0 <follow_path+0x3c>
	lfn = dj->lfn;
   1c6cc:	69fb      	ldr	r3, [r7, #28]
   1c6ce:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
   1c6d0:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   1c6d2:	281f      	cmp	r0, #31
   1c6d4:	d800      	bhi.n	1c6d8 <follow_path+0x54>
   1c6d6:	e13b      	b.n	1c950 <follow_path+0x2cc>
   1c6d8:	282f      	cmp	r0, #47	; 0x2f
   1c6da:	d100      	bne.n	1c6de <follow_path+0x5a>
   1c6dc:	e13b      	b.n	1c956 <follow_path+0x2d2>
   1c6de:	285c      	cmp	r0, #92	; 0x5c
   1c6e0:	d100      	bne.n	1c6e4 <follow_path+0x60>
   1c6e2:	e13b      	b.n	1c95c <follow_path+0x2d8>
   1c6e4:	1c6e      	adds	r6, r5, #1
   1c6e6:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   1c6e8:	2380      	movs	r3, #128	; 0x80
   1c6ea:	005b      	lsls	r3, r3, #1
   1c6ec:	4698      	mov	r8, r3
   1c6ee:	46bb      	mov	fp, r7
   1c6f0:	002b      	movs	r3, r5
   1c6f2:	0025      	movs	r5, r4
   1c6f4:	0034      	movs	r4, r6
   1c6f6:	4656      	mov	r6, sl
   1c6f8:	4699      	mov	r9, r3
   1c6fa:	e011      	b.n	1c720 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   1c6fc:	2b00      	cmp	r3, #0
   1c6fe:	d135      	bne.n	1c76c <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
   1c700:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
   1c702:	1c6b      	adds	r3, r5, #1
   1c704:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   1c706:	281f      	cmp	r0, #31
   1c708:	d91e      	bls.n	1c748 <follow_path+0xc4>
   1c70a:	282f      	cmp	r0, #47	; 0x2f
   1c70c:	d100      	bne.n	1c710 <follow_path+0x8c>
   1c70e:	e128      	b.n	1c962 <follow_path+0x2de>
   1c710:	285c      	cmp	r0, #92	; 0x5c
   1c712:	d100      	bne.n	1c716 <follow_path+0x92>
   1c714:	e142      	b.n	1c99c <follow_path+0x318>
   1c716:	3602      	adds	r6, #2
   1c718:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   1c71a:	4543      	cmp	r3, r8
   1c71c:	d026      	beq.n	1c76c <follow_path+0xe8>
		w = p[si++];					/* Get a character */
   1c71e:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   1c720:	2101      	movs	r1, #1
   1c722:	4b97      	ldr	r3, [pc, #604]	; (1c980 <follow_path+0x2fc>)
   1c724:	4798      	blx	r3
   1c726:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   1c728:	d020      	beq.n	1c76c <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   1c72a:	287f      	cmp	r0, #127	; 0x7f
   1c72c:	d8e8      	bhi.n	1c700 <follow_path+0x7c>
	while (*str && *str != chr) str++;
   1c72e:	2822      	cmp	r0, #34	; 0x22
   1c730:	d100      	bne.n	1c734 <follow_path+0xb0>
   1c732:	e0fd      	b.n	1c930 <follow_path+0x2ac>
   1c734:	232a      	movs	r3, #42	; 0x2a
   1c736:	4a93      	ldr	r2, [pc, #588]	; (1c984 <follow_path+0x300>)
   1c738:	b29f      	uxth	r7, r3
   1c73a:	428f      	cmp	r7, r1
   1c73c:	d0de      	beq.n	1c6fc <follow_path+0x78>
   1c73e:	3201      	adds	r2, #1
   1c740:	7813      	ldrb	r3, [r2, #0]
   1c742:	2b00      	cmp	r3, #0
   1c744:	d1f8      	bne.n	1c738 <follow_path+0xb4>
   1c746:	e7db      	b.n	1c700 <follow_path+0x7c>
   1c748:	002c      	movs	r4, r5
   1c74a:	465f      	mov	r7, fp
   1c74c:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   1c74e:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   1c750:	2604      	movs	r6, #4
   1c752:	e10b      	b.n	1c96c <follow_path+0x2e8>
		di--;
   1c754:	3c01      	subs	r4, #1
   1c756:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
   1c758:	2c00      	cmp	r4, #0
   1c75a:	d100      	bne.n	1c75e <follow_path+0xda>
   1c75c:	e0e8      	b.n	1c930 <follow_path+0x2ac>
		w = lfn[di-1];
   1c75e:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   1c760:	2a20      	cmp	r2, #32
   1c762:	d0f7      	beq.n	1c754 <follow_path+0xd0>
   1c764:	2a2e      	cmp	r2, #46	; 0x2e
   1c766:	d0f5      	beq.n	1c754 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   1c768:	2c00      	cmp	r4, #0
   1c76a:	d101      	bne.n	1c770 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   1c76c:	2006      	movs	r0, #6
	return res;
   1c76e:	e0e0      	b.n	1c932 <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
   1c770:	0063      	lsls	r3, r4, #1
   1c772:	4698      	mov	r8, r3
   1c774:	2300      	movs	r3, #0
   1c776:	4652      	mov	r2, sl
   1c778:	4641      	mov	r1, r8
   1c77a:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
   1c77c:	220b      	movs	r2, #11
   1c77e:	2120      	movs	r1, #32
   1c780:	69b8      	ldr	r0, [r7, #24]
   1c782:	4b81      	ldr	r3, [pc, #516]	; (1c988 <follow_path+0x304>)
   1c784:	4798      	blx	r3
   1c786:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   1c788:	2300      	movs	r3, #0
   1c78a:	e001      	b.n	1c790 <follow_path+0x10c>
   1c78c:	3301      	adds	r3, #1
   1c78e:	3202      	adds	r2, #2
   1c790:	8811      	ldrh	r1, [r2, #0]
   1c792:	2920      	cmp	r1, #32
   1c794:	d0fa      	beq.n	1c78c <follow_path+0x108>
   1c796:	292e      	cmp	r1, #46	; 0x2e
   1c798:	d0f8      	beq.n	1c78c <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
   1c79a:	2b00      	cmp	r3, #0
   1c79c:	d001      	beq.n	1c7a2 <follow_path+0x11e>
   1c79e:	2203      	movs	r2, #3
   1c7a0:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   1c7a2:	4652      	mov	r2, sl
   1c7a4:	4442      	add	r2, r8
   1c7a6:	3a02      	subs	r2, #2
   1c7a8:	8812      	ldrh	r2, [r2, #0]
   1c7aa:	2a2e      	cmp	r2, #46	; 0x2e
   1c7ac:	d009      	beq.n	1c7c2 <follow_path+0x13e>
   1c7ae:	4642      	mov	r2, r8
   1c7b0:	3a04      	subs	r2, #4
   1c7b2:	4452      	add	r2, sl
   1c7b4:	3c01      	subs	r4, #1
   1c7b6:	2c00      	cmp	r4, #0
   1c7b8:	d003      	beq.n	1c7c2 <follow_path+0x13e>
   1c7ba:	3a02      	subs	r2, #2
   1c7bc:	8851      	ldrh	r1, [r2, #2]
   1c7be:	292e      	cmp	r1, #46	; 0x2e
   1c7c0:	d1f8      	bne.n	1c7b4 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
   1c7c2:	2208      	movs	r2, #8
   1c7c4:	9201      	str	r2, [sp, #4]
   1c7c6:	2200      	movs	r2, #0
   1c7c8:	4693      	mov	fp, r2
   1c7ca:	4691      	mov	r9, r2
   1c7cc:	46a0      	mov	r8, r4
   1c7ce:	e006      	b.n	1c7de <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   1c7d0:	4544      	cmp	r4, r8
   1c7d2:	d100      	bne.n	1c7d6 <follow_path+0x152>
   1c7d4:	e0e6      	b.n	1c9a4 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
   1c7d6:	2303      	movs	r3, #3
   1c7d8:	431e      	orrs	r6, r3
   1c7da:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
   1c7dc:	0023      	movs	r3, r4
   1c7de:	1c5c      	adds	r4, r3, #1
   1c7e0:	005b      	lsls	r3, r3, #1
   1c7e2:	4652      	mov	r2, sl
   1c7e4:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
   1c7e6:	2800      	cmp	r0, #0
   1c7e8:	d02c      	beq.n	1c844 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   1c7ea:	2820      	cmp	r0, #32
   1c7ec:	d0f3      	beq.n	1c7d6 <follow_path+0x152>
   1c7ee:	282e      	cmp	r0, #46	; 0x2e
   1c7f0:	d0ee      	beq.n	1c7d0 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
   1c7f2:	9b01      	ldr	r3, [sp, #4]
   1c7f4:	459b      	cmp	fp, r3
   1c7f6:	d219      	bcs.n	1c82c <follow_path+0x1a8>
   1c7f8:	4544      	cmp	r4, r8
   1c7fa:	d100      	bne.n	1c7fe <follow_path+0x17a>
   1c7fc:	e0d2      	b.n	1c9a4 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
   1c7fe:	287f      	cmp	r0, #127	; 0x7f
   1c800:	d85e      	bhi.n	1c8c0 <follow_path+0x23c>
	while (*str && *str != chr) str++;
   1c802:	282b      	cmp	r0, #43	; 0x2b
   1c804:	d06e      	beq.n	1c8e4 <follow_path+0x260>
   1c806:	232c      	movs	r3, #44	; 0x2c
   1c808:	4a60      	ldr	r2, [pc, #384]	; (1c98c <follow_path+0x308>)
   1c80a:	b299      	uxth	r1, r3
   1c80c:	4281      	cmp	r1, r0
   1c80e:	d067      	beq.n	1c8e0 <follow_path+0x25c>
   1c810:	3201      	adds	r2, #1
   1c812:	7813      	ldrb	r3, [r2, #0]
   1c814:	2b00      	cmp	r3, #0
   1c816:	d1f8      	bne.n	1c80a <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
   1c818:	0003      	movs	r3, r0
   1c81a:	3b41      	subs	r3, #65	; 0x41
   1c81c:	b29b      	uxth	r3, r3
   1c81e:	2b19      	cmp	r3, #25
   1c820:	d86c      	bhi.n	1c8fc <follow_path+0x278>
					b |= 2;
   1c822:	2302      	movs	r3, #2
   1c824:	464a      	mov	r2, r9
   1c826:	431a      	orrs	r2, r3
   1c828:	4691      	mov	r9, r2
   1c82a:	e05f      	b.n	1c8ec <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
   1c82c:	9b01      	ldr	r3, [sp, #4]
   1c82e:	2b0b      	cmp	r3, #11
   1c830:	d03b      	beq.n	1c8aa <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   1c832:	4544      	cmp	r4, r8
   1c834:	d100      	bne.n	1c838 <follow_path+0x1b4>
   1c836:	e0b9      	b.n	1c9ac <follow_path+0x328>
   1c838:	2303      	movs	r3, #3
   1c83a:	431e      	orrs	r6, r3
   1c83c:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
   1c83e:	4544      	cmp	r4, r8
   1c840:	d800      	bhi.n	1c844 <follow_path+0x1c0>
   1c842:	e0b3      	b.n	1c9ac <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   1c844:	69bb      	ldr	r3, [r7, #24]
   1c846:	781a      	ldrb	r2, [r3, #0]
   1c848:	2ae5      	cmp	r2, #229	; 0xe5
   1c84a:	d036      	beq.n	1c8ba <follow_path+0x236>
	if (ni == 8) b <<= 2;
   1c84c:	9b01      	ldr	r3, [sp, #4]
   1c84e:	2b08      	cmp	r3, #8
   1c850:	d060      	beq.n	1c914 <follow_path+0x290>
   1c852:	230c      	movs	r3, #12
   1c854:	464a      	mov	r2, r9
   1c856:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   1c858:	2b0c      	cmp	r3, #12
   1c85a:	d060      	beq.n	1c91e <follow_path+0x29a>
   1c85c:	43d2      	mvns	r2, r2
   1c85e:	0792      	lsls	r2, r2, #30
   1c860:	d05d      	beq.n	1c91e <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   1c862:	07b2      	lsls	r2, r6, #30
   1c864:	d406      	bmi.n	1c874 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   1c866:	2203      	movs	r2, #3
   1c868:	4649      	mov	r1, r9
   1c86a:	400a      	ands	r2, r1
   1c86c:	2a01      	cmp	r2, #1
   1c86e:	d059      	beq.n	1c924 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   1c870:	2b04      	cmp	r3, #4
   1c872:	d05a      	beq.n	1c92a <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
   1c874:	69bb      	ldr	r3, [r7, #24]
   1c876:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
   1c878:	0038      	movs	r0, r7
   1c87a:	4b45      	ldr	r3, [pc, #276]	; (1c990 <follow_path+0x30c>)
   1c87c:	4798      	blx	r3
			ns = *(dj->fn+NS);
   1c87e:	69bb      	ldr	r3, [r7, #24]
   1c880:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
   1c882:	2800      	cmp	r0, #0
   1c884:	d15c      	bne.n	1c940 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   1c886:	075b      	lsls	r3, r3, #29
   1c888:	d453      	bmi.n	1c932 <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   1c88a:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   1c88c:	7ad3      	ldrb	r3, [r2, #11]
   1c88e:	06db      	lsls	r3, r3, #27
   1c890:	d55c      	bpl.n	1c94c <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
   1c892:	7d51      	ldrb	r1, [r2, #21]
   1c894:	0209      	lsls	r1, r1, #8
   1c896:	7d13      	ldrb	r3, [r2, #20]
   1c898:	430b      	orrs	r3, r1
   1c89a:	041b      	lsls	r3, r3, #16
   1c89c:	7ed1      	ldrb	r1, [r2, #27]
   1c89e:	0209      	lsls	r1, r1, #8
   1c8a0:	7e92      	ldrb	r2, [r2, #26]
   1c8a2:	430a      	orrs	r2, r1
   1c8a4:	4313      	orrs	r3, r2
   1c8a6:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
   1c8a8:	e70b      	b.n	1c6c2 <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
   1c8aa:	2303      	movs	r3, #3
   1c8ac:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   1c8ae:	69bb      	ldr	r3, [r7, #24]
   1c8b0:	781a      	ldrb	r2, [r3, #0]
   1c8b2:	2ae5      	cmp	r2, #229	; 0xe5
   1c8b4:	d1cd      	bne.n	1c852 <follow_path+0x1ce>
   1c8b6:	220b      	movs	r2, #11
   1c8b8:	9201      	str	r2, [sp, #4]
   1c8ba:	2205      	movs	r2, #5
   1c8bc:	701a      	strb	r2, [r3, #0]
   1c8be:	e7c5      	b.n	1c84c <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   1c8c0:	2100      	movs	r1, #0
   1c8c2:	4b2f      	ldr	r3, [pc, #188]	; (1c980 <follow_path+0x2fc>)
   1c8c4:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   1c8c6:	2800      	cmp	r0, #0
   1c8c8:	d100      	bne.n	1c8cc <follow_path+0x248>
   1c8ca:	e079      	b.n	1c9c0 <follow_path+0x33c>
   1c8cc:	4b31      	ldr	r3, [pc, #196]	; (1c994 <follow_path+0x310>)
   1c8ce:	469c      	mov	ip, r3
   1c8d0:	4460      	add	r0, ip
   1c8d2:	3880      	subs	r0, #128	; 0x80
   1c8d4:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
   1c8d6:	2302      	movs	r3, #2
   1c8d8:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   1c8da:	2800      	cmp	r0, #0
   1c8dc:	d002      	beq.n	1c8e4 <follow_path+0x260>
   1c8de:	e790      	b.n	1c802 <follow_path+0x17e>
   1c8e0:	2b00      	cmp	r3, #0
   1c8e2:	d099      	beq.n	1c818 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   1c8e4:	2303      	movs	r3, #3
   1c8e6:	431e      	orrs	r6, r3
   1c8e8:	b2f6      	uxtb	r6, r6
   1c8ea:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
   1c8ec:	69bb      	ldr	r3, [r7, #24]
   1c8ee:	465a      	mov	r2, fp
   1c8f0:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
   1c8f2:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
   1c8f4:	2201      	movs	r2, #1
   1c8f6:	4694      	mov	ip, r2
   1c8f8:	44e3      	add	fp, ip
   1c8fa:	e770      	b.n	1c7de <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
   1c8fc:	0003      	movs	r3, r0
   1c8fe:	3b61      	subs	r3, #97	; 0x61
   1c900:	b29b      	uxth	r3, r3
   1c902:	2b19      	cmp	r3, #25
   1c904:	d8f2      	bhi.n	1c8ec <follow_path+0x268>
						b |= 1; w -= 0x20;
   1c906:	2301      	movs	r3, #1
   1c908:	464a      	mov	r2, r9
   1c90a:	431a      	orrs	r2, r3
   1c90c:	4691      	mov	r9, r2
   1c90e:	3820      	subs	r0, #32
   1c910:	b280      	uxth	r0, r0
   1c912:	e7eb      	b.n	1c8ec <follow_path+0x268>
	if (ni == 8) b <<= 2;
   1c914:	464b      	mov	r3, r9
   1c916:	009b      	lsls	r3, r3, #2
   1c918:	b2db      	uxtb	r3, r3
   1c91a:	4699      	mov	r9, r3
   1c91c:	e799      	b.n	1c852 <follow_path+0x1ce>
		cf |= NS_LFN;
   1c91e:	2202      	movs	r2, #2
   1c920:	4316      	orrs	r6, r2
   1c922:	e79e      	b.n	1c862 <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   1c924:	320f      	adds	r2, #15
   1c926:	4316      	orrs	r6, r2
   1c928:	e7a2      	b.n	1c870 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   1c92a:	3304      	adds	r3, #4
   1c92c:	431e      	orrs	r6, r3
   1c92e:	e7a1      	b.n	1c874 <follow_path+0x1f0>
   1c930:	2006      	movs	r0, #6
}
   1c932:	b003      	add	sp, #12
   1c934:	bc3c      	pop	{r2, r3, r4, r5}
   1c936:	4690      	mov	r8, r2
   1c938:	4699      	mov	r9, r3
   1c93a:	46a2      	mov	sl, r4
   1c93c:	46ab      	mov	fp, r5
   1c93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   1c940:	2804      	cmp	r0, #4
   1c942:	d1f6      	bne.n	1c932 <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   1c944:	075b      	lsls	r3, r3, #29
   1c946:	d4f4      	bmi.n	1c932 <follow_path+0x2ae>
   1c948:	3001      	adds	r0, #1
   1c94a:	e7f2      	b.n	1c932 <follow_path+0x2ae>
				res = FR_NO_PATH; break;
   1c94c:	2005      	movs	r0, #5
   1c94e:	e7f0      	b.n	1c932 <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
   1c950:	2301      	movs	r3, #1
	si = di = 0;
   1c952:	2400      	movs	r4, #0
   1c954:	e6fb      	b.n	1c74e <follow_path+0xca>
		w = p[si++];					/* Get a character */
   1c956:	2301      	movs	r3, #1
	si = di = 0;
   1c958:	2400      	movs	r4, #0
   1c95a:	e005      	b.n	1c968 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
   1c95c:	2301      	movs	r3, #1
	si = di = 0;
   1c95e:	2400      	movs	r4, #0
   1c960:	e002      	b.n	1c968 <follow_path+0x2e4>
   1c962:	002c      	movs	r4, r5
   1c964:	465f      	mov	r7, fp
   1c966:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   1c968:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   1c96a:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
   1c96c:	2c00      	cmp	r4, #0
   1c96e:	d0df      	beq.n	1c930 <follow_path+0x2ac>
   1c970:	4b09      	ldr	r3, [pc, #36]	; (1c998 <follow_path+0x314>)
   1c972:	18e3      	adds	r3, r4, r3
   1c974:	005b      	lsls	r3, r3, #1
   1c976:	4453      	add	r3, sl
   1c978:	e6f1      	b.n	1c75e <follow_path+0xda>
   1c97a:	46c0      	nop			; (mov r8, r8)
   1c97c:	0001bcd5 	.word	0x0001bcd5
   1c980:	0001ce5d 	.word	0x0001ce5d
   1c984:	00022905 	.word	0x00022905
   1c988:	0001b66d 	.word	0x0001b66d
   1c98c:	00022911 	.word	0x00022911
   1c990:	0001c115 	.word	0x0001c115
   1c994:	00022884 	.word	0x00022884
   1c998:	7fffffff 	.word	0x7fffffff
   1c99c:	002c      	movs	r4, r5
   1c99e:	465f      	mov	r7, fp
   1c9a0:	464d      	mov	r5, r9
   1c9a2:	e7e1      	b.n	1c968 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
   1c9a4:	9b01      	ldr	r3, [sp, #4]
   1c9a6:	2b0b      	cmp	r3, #11
   1c9a8:	d100      	bne.n	1c9ac <follow_path+0x328>
   1c9aa:	e77e      	b.n	1c8aa <follow_path+0x226>
			b <<= 2; continue;
   1c9ac:	464b      	mov	r3, r9
   1c9ae:	009b      	lsls	r3, r3, #2
   1c9b0:	b2db      	uxtb	r3, r3
   1c9b2:	4699      	mov	r9, r3
   1c9b4:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
   1c9b6:	220b      	movs	r2, #11
   1c9b8:	9201      	str	r2, [sp, #4]
   1c9ba:	3a03      	subs	r2, #3
   1c9bc:	4693      	mov	fp, r2
   1c9be:	e70e      	b.n	1c7de <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
   1c9c0:	2302      	movs	r3, #2
   1c9c2:	431e      	orrs	r6, r3
   1c9c4:	e78e      	b.n	1c8e4 <follow_path+0x260>
   1c9c6:	46c0      	nop			; (mov r8, r8)

0001c9c8 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
   1c9c8:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   1c9ca:	2807      	cmp	r0, #7
   1c9cc:	d901      	bls.n	1c9d2 <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
   1c9ce:	0018      	movs	r0, r3
   1c9d0:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
   1c9d2:	0083      	lsls	r3, r0, #2
   1c9d4:	4a07      	ldr	r2, [pc, #28]	; (1c9f4 <f_mount+0x2c>)
   1c9d6:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
   1c9d8:	2b00      	cmp	r3, #0
   1c9da:	d001      	beq.n	1c9e0 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
   1c9dc:	2200      	movs	r2, #0
   1c9de:	701a      	strb	r2, [r3, #0]
	if (fs) {
   1c9e0:	2900      	cmp	r1, #0
   1c9e2:	d001      	beq.n	1c9e8 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
   1c9e4:	2300      	movs	r3, #0
   1c9e6:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
   1c9e8:	0080      	lsls	r0, r0, #2
   1c9ea:	4b02      	ldr	r3, [pc, #8]	; (1c9f4 <f_mount+0x2c>)
   1c9ec:	50c1      	str	r1, [r0, r3]
	return FR_OK;
   1c9ee:	2300      	movs	r3, #0
   1c9f0:	e7ed      	b.n	1c9ce <f_mount+0x6>
   1c9f2:	46c0      	nop			; (mov r8, r8)
   1c9f4:	20003338 	.word	0x20003338

0001c9f8 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   1c9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c9fa:	46c6      	mov	lr, r8
   1c9fc:	b500      	push	{lr}
   1c9fe:	4c59      	ldr	r4, [pc, #356]	; (1cb64 <f_open+0x16c>)
   1ca00:	44a5      	add	sp, r4
   1ca02:	0005      	movs	r5, r0
   1ca04:	9101      	str	r1, [sp, #4]
   1ca06:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   1ca08:	2300      	movs	r3, #0
   1ca0a:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   1ca0c:	261f      	movs	r6, #31
   1ca0e:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   1ca10:	221e      	movs	r2, #30
   1ca12:	403a      	ands	r2, r7
   1ca14:	a985      	add	r1, sp, #532	; 0x214
   1ca16:	a801      	add	r0, sp, #4
   1ca18:	4b53      	ldr	r3, [pc, #332]	; (1cb68 <f_open+0x170>)
   1ca1a:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   1ca1c:	ab82      	add	r3, sp, #520	; 0x208
   1ca1e:	938b      	str	r3, [sp, #556]	; 0x22c
   1ca20:	ab02      	add	r3, sp, #8
   1ca22:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
   1ca24:	2800      	cmp	r0, #0
   1ca26:	d006      	beq.n	1ca36 <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
   1ca28:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   1ca2a:	231c      	movs	r3, #28
   1ca2c:	423b      	tst	r3, r7
   1ca2e:	d145      	bne.n	1cabc <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   1ca30:	2800      	cmp	r0, #0
   1ca32:	d13d      	bne.n	1cab0 <f_open+0xb8>
   1ca34:	e00c      	b.n	1ca50 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
   1ca36:	9901      	ldr	r1, [sp, #4]
   1ca38:	a885      	add	r0, sp, #532	; 0x214
   1ca3a:	4b4c      	ldr	r3, [pc, #304]	; (1cb6c <f_open+0x174>)
   1ca3c:	4798      	blx	r3
	dir = dj.dir;
   1ca3e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   1ca40:	2800      	cmp	r0, #0
   1ca42:	d1f2      	bne.n	1ca2a <f_open+0x32>
		if (!dir)	/* Current dir itself */
   1ca44:	2c00      	cmp	r4, #0
   1ca46:	d100      	bne.n	1ca4a <f_open+0x52>
   1ca48:	e086      	b.n	1cb58 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   1ca4a:	231c      	movs	r3, #28
   1ca4c:	423b      	tst	r3, r7
   1ca4e:	d146      	bne.n	1cade <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   1ca50:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
   1ca52:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   1ca54:	06da      	lsls	r2, r3, #27
   1ca56:	d42b      	bmi.n	1cab0 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   1ca58:	07ba      	lsls	r2, r7, #30
   1ca5a:	d502      	bpl.n	1ca62 <f_open+0x6a>
					res = FR_DENIED;
   1ca5c:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   1ca5e:	07db      	lsls	r3, r3, #31
   1ca60:	d426      	bmi.n	1cab0 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   1ca62:	073b      	lsls	r3, r7, #28
   1ca64:	d501      	bpl.n	1ca6a <f_open+0x72>
			mode |= FA__WRITTEN;
   1ca66:	2320      	movs	r3, #32
   1ca68:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   1ca6a:	9b85      	ldr	r3, [sp, #532]	; 0x214
   1ca6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ca6e:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
   1ca70:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
   1ca72:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   1ca74:	7d62      	ldrb	r2, [r4, #21]
   1ca76:	0212      	lsls	r2, r2, #8
   1ca78:	7d23      	ldrb	r3, [r4, #20]
   1ca7a:	4313      	orrs	r3, r2
   1ca7c:	041b      	lsls	r3, r3, #16
   1ca7e:	7ee1      	ldrb	r1, [r4, #27]
   1ca80:	0209      	lsls	r1, r1, #8
   1ca82:	7ea2      	ldrb	r2, [r4, #26]
   1ca84:	430a      	orrs	r2, r1
   1ca86:	4313      	orrs	r3, r2
   1ca88:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   1ca8a:	7fe3      	ldrb	r3, [r4, #31]
   1ca8c:	061b      	lsls	r3, r3, #24
   1ca8e:	7fa2      	ldrb	r2, [r4, #30]
   1ca90:	0412      	lsls	r2, r2, #16
   1ca92:	4313      	orrs	r3, r2
   1ca94:	7f22      	ldrb	r2, [r4, #28]
   1ca96:	4313      	orrs	r3, r2
   1ca98:	7f62      	ldrb	r2, [r4, #29]
   1ca9a:	0212      	lsls	r2, r2, #8
   1ca9c:	4313      	orrs	r3, r2
   1ca9e:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
   1caa0:	2300      	movs	r3, #0
   1caa2:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
   1caa4:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   1caa6:	9b85      	ldr	r3, [sp, #532]	; 0x214
   1caa8:	602b      	str	r3, [r5, #0]
   1caaa:	88db      	ldrh	r3, [r3, #6]
   1caac:	80ab      	strh	r3, [r5, #4]
   1caae:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
   1cab0:	238e      	movs	r3, #142	; 0x8e
   1cab2:	009b      	lsls	r3, r3, #2
   1cab4:	449d      	add	sp, r3
   1cab6:	bc04      	pop	{r2}
   1cab8:	4690      	mov	r8, r2
   1caba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   1cabc:	2804      	cmp	r0, #4
   1cabe:	d005      	beq.n	1cacc <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   1cac0:	2308      	movs	r3, #8
   1cac2:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   1cac4:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   1cac6:	2800      	cmp	r0, #0
   1cac8:	d0d3      	beq.n	1ca72 <f_open+0x7a>
   1caca:	e7f1      	b.n	1cab0 <f_open+0xb8>
				res = dir_register(&dj);
   1cacc:	a885      	add	r0, sp, #532	; 0x214
   1cace:	4b28      	ldr	r3, [pc, #160]	; (1cb70 <f_open+0x178>)
   1cad0:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   1cad2:	2308      	movs	r3, #8
   1cad4:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   1cad6:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   1cad8:	2800      	cmp	r0, #0
   1cada:	d008      	beq.n	1caee <f_open+0xf6>
   1cadc:	e7e8      	b.n	1cab0 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   1cade:	7ae3      	ldrb	r3, [r4, #11]
   1cae0:	2211      	movs	r2, #17
				res = FR_DENIED;
   1cae2:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   1cae4:	421a      	tst	r2, r3
   1cae6:	d1e3      	bne.n	1cab0 <f_open+0xb8>
					res = FR_EXIST;
   1cae8:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   1caea:	077b      	lsls	r3, r7, #29
   1caec:	d4e0      	bmi.n	1cab0 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   1caee:	0733      	lsls	r3, r6, #28
   1caf0:	d5bb      	bpl.n	1ca6a <f_open+0x72>
			dw = get_fattime();					/* Created time */
   1caf2:	4b20      	ldr	r3, [pc, #128]	; (1cb74 <f_open+0x17c>)
   1caf4:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
   1caf6:	73a0      	strb	r0, [r4, #14]
   1caf8:	0a03      	lsrs	r3, r0, #8
   1cafa:	73e3      	strb	r3, [r4, #15]
   1cafc:	0c03      	lsrs	r3, r0, #16
   1cafe:	7423      	strb	r3, [r4, #16]
   1cb00:	0e00      	lsrs	r0, r0, #24
   1cb02:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   1cb04:	2300      	movs	r3, #0
   1cb06:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   1cb08:	7723      	strb	r3, [r4, #28]
   1cb0a:	7763      	strb	r3, [r4, #29]
   1cb0c:	77a3      	strb	r3, [r4, #30]
   1cb0e:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
   1cb10:	7d62      	ldrb	r2, [r4, #21]
   1cb12:	0212      	lsls	r2, r2, #8
   1cb14:	7d27      	ldrb	r7, [r4, #20]
   1cb16:	4317      	orrs	r7, r2
   1cb18:	043f      	lsls	r7, r7, #16
   1cb1a:	7ee1      	ldrb	r1, [r4, #27]
   1cb1c:	0209      	lsls	r1, r1, #8
   1cb1e:	7ea2      	ldrb	r2, [r4, #26]
   1cb20:	430a      	orrs	r2, r1
   1cb22:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
   1cb24:	76a3      	strb	r3, [r4, #26]
   1cb26:	76e3      	strb	r3, [r4, #27]
   1cb28:	7523      	strb	r3, [r4, #20]
   1cb2a:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
   1cb2c:	9885      	ldr	r0, [sp, #532]	; 0x214
   1cb2e:	3301      	adds	r3, #1
   1cb30:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   1cb32:	2f00      	cmp	r7, #0
   1cb34:	d097      	beq.n	1ca66 <f_open+0x6e>
				dw = dj.fs->winsect;
   1cb36:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1cb38:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
   1cb3a:	0039      	movs	r1, r7
   1cb3c:	4b0e      	ldr	r3, [pc, #56]	; (1cb78 <f_open+0x180>)
   1cb3e:	4798      	blx	r3
				if (res == FR_OK) {
   1cb40:	2800      	cmp	r0, #0
   1cb42:	d1b5      	bne.n	1cab0 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   1cb44:	9885      	ldr	r0, [sp, #532]	; 0x214
   1cb46:	3f01      	subs	r7, #1
   1cb48:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
   1cb4a:	4641      	mov	r1, r8
   1cb4c:	4b0b      	ldr	r3, [pc, #44]	; (1cb7c <f_open+0x184>)
   1cb4e:	4798      	blx	r3
	if (res == FR_OK) {
   1cb50:	2800      	cmp	r0, #0
   1cb52:	d100      	bne.n	1cb56 <f_open+0x15e>
   1cb54:	e787      	b.n	1ca66 <f_open+0x6e>
   1cb56:	e7ab      	b.n	1cab0 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   1cb58:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
   1cb5a:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   1cb5c:	423b      	tst	r3, r7
   1cb5e:	d0b2      	beq.n	1cac6 <f_open+0xce>
			res = FR_INVALID_NAME;
   1cb60:	2006      	movs	r0, #6
   1cb62:	e7ad      	b.n	1cac0 <f_open+0xc8>
   1cb64:	fffffdc8 	.word	0xfffffdc8
   1cb68:	0001b789 	.word	0x0001b789
   1cb6c:	0001c685 	.word	0x0001c685
   1cb70:	0001c2ad 	.word	0x0001c2ad
   1cb74:	0001b609 	.word	0x0001b609
   1cb78:	0001bf79 	.word	0x0001bf79
   1cb7c:	0001bb39 	.word	0x0001bb39

0001cb80 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   1cb80:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cb82:	46de      	mov	lr, fp
   1cb84:	4657      	mov	r7, sl
   1cb86:	464e      	mov	r6, r9
   1cb88:	4645      	mov	r5, r8
   1cb8a:	b5e0      	push	{r5, r6, r7, lr}
   1cb8c:	b083      	sub	sp, #12
   1cb8e:	0004      	movs	r4, r0
   1cb90:	000d      	movs	r5, r1
   1cb92:	0016      	movs	r6, r2
   1cb94:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   1cb96:	2300      	movs	r3, #0
   1cb98:	464a      	mov	r2, r9
   1cb9a:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   1cb9c:	8881      	ldrh	r1, [r0, #4]
   1cb9e:	6800      	ldr	r0, [r0, #0]
   1cba0:	4b7f      	ldr	r3, [pc, #508]	; (1cda0 <f_write+0x220>)
   1cba2:	4798      	blx	r3
   1cba4:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   1cba6:	2800      	cmp	r0, #0
   1cba8:	d000      	beq.n	1cbac <f_write+0x2c>
   1cbaa:	e0f1      	b.n	1cd90 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   1cbac:	79a3      	ldrb	r3, [r4, #6]
   1cbae:	b25a      	sxtb	r2, r3
   1cbb0:	2a00      	cmp	r2, #0
   1cbb2:	da00      	bge.n	1cbb6 <f_write+0x36>
   1cbb4:	e0ea      	b.n	1cd8c <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   1cbb6:	079b      	lsls	r3, r3, #30
   1cbb8:	d402      	bmi.n	1cbc0 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
   1cbba:	2307      	movs	r3, #7
   1cbbc:	9300      	str	r3, [sp, #0]
   1cbbe:	e0e7      	b.n	1cd90 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   1cbc0:	68e3      	ldr	r3, [r4, #12]
   1cbc2:	199a      	adds	r2, r3, r6
   1cbc4:	4293      	cmp	r3, r2
   1cbc6:	d810      	bhi.n	1cbea <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
   1cbc8:	2e00      	cmp	r6, #0
   1cbca:	d00e      	beq.n	1cbea <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   1cbcc:	002f      	movs	r7, r5
   1cbce:	e07b      	b.n	1ccc8 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   1cbd0:	2100      	movs	r1, #0
   1cbd2:	4b74      	ldr	r3, [pc, #464]	; (1cda4 <f_write+0x224>)
   1cbd4:	4798      	blx	r3
   1cbd6:	0003      	movs	r3, r0
   1cbd8:	6120      	str	r0, [r4, #16]
   1cbda:	e003      	b.n	1cbe4 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   1cbdc:	6961      	ldr	r1, [r4, #20]
   1cbde:	4b71      	ldr	r3, [pc, #452]	; (1cda4 <f_write+0x224>)
   1cbe0:	4798      	blx	r3
   1cbe2:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   1cbe4:	2b00      	cmp	r3, #0
   1cbe6:	d000      	beq.n	1cbea <f_write+0x6a>
   1cbe8:	e080      	b.n	1ccec <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   1cbea:	68a3      	ldr	r3, [r4, #8]
   1cbec:	68e2      	ldr	r2, [r4, #12]
   1cbee:	4293      	cmp	r3, r2
   1cbf0:	d900      	bls.n	1cbf4 <f_write+0x74>
   1cbf2:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   1cbf4:	79a3      	ldrb	r3, [r4, #6]
   1cbf6:	2220      	movs	r2, #32
   1cbf8:	4313      	orrs	r3, r2
   1cbfa:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
   1cbfc:	e0c8      	b.n	1cd90 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   1cbfe:	79a2      	ldrb	r2, [r4, #6]
   1cc00:	3b81      	subs	r3, #129	; 0x81
   1cc02:	4313      	orrs	r3, r2
   1cc04:	71a3      	strb	r3, [r4, #6]
   1cc06:	2302      	movs	r3, #2
   1cc08:	9300      	str	r3, [sp, #0]
   1cc0a:	e0c1      	b.n	1cd90 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   1cc0c:	79a2      	ldrb	r2, [r4, #6]
   1cc0e:	3b7f      	subs	r3, #127	; 0x7f
   1cc10:	4313      	orrs	r3, r2
   1cc12:	71a3      	strb	r3, [r4, #6]
   1cc14:	2301      	movs	r3, #1
   1cc16:	9300      	str	r3, [sp, #0]
   1cc18:	e0ba      	b.n	1cd90 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   1cc1a:	2100      	movs	r1, #0
   1cc1c:	4b62      	ldr	r3, [pc, #392]	; (1cda8 <f_write+0x228>)
   1cc1e:	4798      	blx	r3
   1cc20:	2800      	cmp	r0, #0
   1cc22:	d06d      	beq.n	1cd00 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
   1cc24:	79a2      	ldrb	r2, [r4, #6]
   1cc26:	2380      	movs	r3, #128	; 0x80
   1cc28:	425b      	negs	r3, r3
   1cc2a:	4313      	orrs	r3, r2
   1cc2c:	71a3      	strb	r3, [r4, #6]
   1cc2e:	2301      	movs	r3, #1
   1cc30:	9300      	str	r3, [sp, #0]
   1cc32:	e0ad      	b.n	1cd90 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   1cc34:	79a2      	ldrb	r2, [r4, #6]
   1cc36:	2380      	movs	r3, #128	; 0x80
   1cc38:	425b      	negs	r3, r3
   1cc3a:	4313      	orrs	r3, r2
   1cc3c:	71a3      	strb	r3, [r4, #6]
   1cc3e:	2302      	movs	r3, #2
   1cc40:	9300      	str	r3, [sp, #0]
   1cc42:	e0a5      	b.n	1cd90 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
   1cc44:	79a2      	ldrb	r2, [r4, #6]
   1cc46:	2380      	movs	r3, #128	; 0x80
   1cc48:	425b      	negs	r3, r3
   1cc4a:	4313      	orrs	r3, r2
   1cc4c:	71a3      	strb	r3, [r4, #6]
   1cc4e:	2301      	movs	r3, #1
   1cc50:	9300      	str	r3, [sp, #0]
   1cc52:	e09d      	b.n	1cd90 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   1cc54:	0240      	lsls	r0, r0, #9
   1cc56:	1839      	adds	r1, r7, r0
   1cc58:	3330      	adds	r3, #48	; 0x30
   1cc5a:	0018      	movs	r0, r3
   1cc5c:	2280      	movs	r2, #128	; 0x80
   1cc5e:	0092      	lsls	r2, r2, #2
   1cc60:	4b52      	ldr	r3, [pc, #328]	; (1cdac <f_write+0x22c>)
   1cc62:	4798      	blx	r3
					fp->fs->wflag = 0;
   1cc64:	2300      	movs	r3, #0
   1cc66:	6822      	ldr	r2, [r4, #0]
   1cc68:	7113      	strb	r3, [r2, #4]
   1cc6a:	e072      	b.n	1cd52 <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   1cc6c:	68a3      	ldr	r3, [r4, #8]
   1cc6e:	68e2      	ldr	r2, [r4, #12]
   1cc70:	4293      	cmp	r3, r2
   1cc72:	d271      	bcs.n	1cd58 <f_write+0x1d8>
			fp->dsect = sect;
   1cc74:	4643      	mov	r3, r8
   1cc76:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   1cc78:	68a3      	ldr	r3, [r4, #8]
   1cc7a:	05dd      	lsls	r5, r3, #23
   1cc7c:	0ded      	lsrs	r5, r5, #23
   1cc7e:	2380      	movs	r3, #128	; 0x80
   1cc80:	009b      	lsls	r3, r3, #2
   1cc82:	1b5d      	subs	r5, r3, r5
   1cc84:	42b5      	cmp	r5, r6
   1cc86:	d900      	bls.n	1cc8a <f_write+0x10a>
   1cc88:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   1cc8a:	69a1      	ldr	r1, [r4, #24]
   1cc8c:	6820      	ldr	r0, [r4, #0]
   1cc8e:	4b46      	ldr	r3, [pc, #280]	; (1cda8 <f_write+0x228>)
   1cc90:	4798      	blx	r3
   1cc92:	2800      	cmp	r0, #0
   1cc94:	d172      	bne.n	1cd7c <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   1cc96:	68a3      	ldr	r3, [r4, #8]
   1cc98:	05d8      	lsls	r0, r3, #23
   1cc9a:	0dc0      	lsrs	r0, r0, #23
   1cc9c:	3030      	adds	r0, #48	; 0x30
   1cc9e:	6823      	ldr	r3, [r4, #0]
   1cca0:	469c      	mov	ip, r3
   1cca2:	4460      	add	r0, ip
   1cca4:	002a      	movs	r2, r5
   1cca6:	0039      	movs	r1, r7
   1cca8:	4b40      	ldr	r3, [pc, #256]	; (1cdac <f_write+0x22c>)
   1ccaa:	4798      	blx	r3
		fp->fs->wflag = 1;
   1ccac:	2301      	movs	r3, #1
   1ccae:	6822      	ldr	r2, [r4, #0]
   1ccb0:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   1ccb2:	197f      	adds	r7, r7, r5
   1ccb4:	68a3      	ldr	r3, [r4, #8]
   1ccb6:	195b      	adds	r3, r3, r5
   1ccb8:	60a3      	str	r3, [r4, #8]
   1ccba:	464b      	mov	r3, r9
   1ccbc:	681b      	ldr	r3, [r3, #0]
   1ccbe:	195b      	adds	r3, r3, r5
   1ccc0:	464a      	mov	r2, r9
   1ccc2:	6013      	str	r3, [r2, #0]
   1ccc4:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
   1ccc6:	d090      	beq.n	1cbea <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   1ccc8:	68a3      	ldr	r3, [r4, #8]
   1ccca:	05da      	lsls	r2, r3, #23
   1cccc:	d1d4      	bne.n	1cc78 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   1ccce:	6820      	ldr	r0, [r4, #0]
   1ccd0:	7882      	ldrb	r2, [r0, #2]
   1ccd2:	3a01      	subs	r2, #1
   1ccd4:	0a5d      	lsrs	r5, r3, #9
   1ccd6:	4015      	ands	r5, r2
   1ccd8:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
   1ccda:	2d00      	cmp	r5, #0
   1ccdc:	d10b      	bne.n	1ccf6 <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
   1ccde:	2b00      	cmp	r3, #0
   1cce0:	d000      	beq.n	1cce4 <f_write+0x164>
   1cce2:	e77b      	b.n	1cbdc <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
   1cce4:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
   1cce6:	2b00      	cmp	r3, #0
   1cce8:	d100      	bne.n	1ccec <f_write+0x16c>
   1ccea:	e771      	b.n	1cbd0 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   1ccec:	2b01      	cmp	r3, #1
   1ccee:	d086      	beq.n	1cbfe <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   1ccf0:	1c5a      	adds	r2, r3, #1
   1ccf2:	d08b      	beq.n	1cc0c <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
   1ccf4:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   1ccf6:	6820      	ldr	r0, [r4, #0]
   1ccf8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1ccfa:	69a2      	ldr	r2, [r4, #24]
   1ccfc:	4293      	cmp	r3, r2
   1ccfe:	d08c      	beq.n	1cc1a <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   1cd00:	6823      	ldr	r3, [r4, #0]
   1cd02:	469a      	mov	sl, r3
   1cd04:	6961      	ldr	r1, [r4, #20]
   1cd06:	0018      	movs	r0, r3
   1cd08:	4b29      	ldr	r3, [pc, #164]	; (1cdb0 <f_write+0x230>)
   1cd0a:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   1cd0c:	2800      	cmp	r0, #0
   1cd0e:	d091      	beq.n	1cc34 <f_write+0xb4>
			sect += csect;
   1cd10:	4680      	mov	r8, r0
   1cd12:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   1cd14:	0a73      	lsrs	r3, r6, #9
   1cd16:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
   1cd18:	d0a8      	beq.n	1cc6c <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   1cd1a:	4653      	mov	r3, sl
   1cd1c:	789b      	ldrb	r3, [r3, #2]
   1cd1e:	465a      	mov	r2, fp
   1cd20:	18aa      	adds	r2, r5, r2
   1cd22:	429a      	cmp	r2, r3
   1cd24:	d901      	bls.n	1cd2a <f_write+0x1aa>
					cc = fp->fs->csize - csect;
   1cd26:	1b5b      	subs	r3, r3, r5
   1cd28:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   1cd2a:	465b      	mov	r3, fp
   1cd2c:	466a      	mov	r2, sp
   1cd2e:	71d3      	strb	r3, [r2, #7]
   1cd30:	79d3      	ldrb	r3, [r2, #7]
   1cd32:	4652      	mov	r2, sl
   1cd34:	7850      	ldrb	r0, [r2, #1]
   1cd36:	4642      	mov	r2, r8
   1cd38:	0039      	movs	r1, r7
   1cd3a:	4d1e      	ldr	r5, [pc, #120]	; (1cdb4 <f_write+0x234>)
   1cd3c:	47a8      	blx	r5
   1cd3e:	2800      	cmp	r0, #0
   1cd40:	d000      	beq.n	1cd44 <f_write+0x1c4>
   1cd42:	e77f      	b.n	1cc44 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   1cd44:	6823      	ldr	r3, [r4, #0]
   1cd46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd48:	4641      	mov	r1, r8
   1cd4a:	1a50      	subs	r0, r2, r1
   1cd4c:	4583      	cmp	fp, r0
   1cd4e:	d900      	bls.n	1cd52 <f_write+0x1d2>
   1cd50:	e780      	b.n	1cc54 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   1cd52:	465b      	mov	r3, fp
   1cd54:	025d      	lsls	r5, r3, #9
				continue;
   1cd56:	e7ac      	b.n	1ccb2 <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   1cd58:	2100      	movs	r1, #0
   1cd5a:	4650      	mov	r0, sl
   1cd5c:	4b12      	ldr	r3, [pc, #72]	; (1cda8 <f_write+0x228>)
   1cd5e:	4798      	blx	r3
   1cd60:	2800      	cmp	r0, #0
   1cd62:	d103      	bne.n	1cd6c <f_write+0x1ec>
				fp->fs->winsect = sect;
   1cd64:	6823      	ldr	r3, [r4, #0]
   1cd66:	4642      	mov	r2, r8
   1cd68:	62da      	str	r2, [r3, #44]	; 0x2c
   1cd6a:	e783      	b.n	1cc74 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   1cd6c:	79a2      	ldrb	r2, [r4, #6]
   1cd6e:	2380      	movs	r3, #128	; 0x80
   1cd70:	425b      	negs	r3, r3
   1cd72:	4313      	orrs	r3, r2
   1cd74:	71a3      	strb	r3, [r4, #6]
   1cd76:	2301      	movs	r3, #1
   1cd78:	9300      	str	r3, [sp, #0]
   1cd7a:	e009      	b.n	1cd90 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
   1cd7c:	79a2      	ldrb	r2, [r4, #6]
   1cd7e:	2380      	movs	r3, #128	; 0x80
   1cd80:	425b      	negs	r3, r3
   1cd82:	4313      	orrs	r3, r2
   1cd84:	71a3      	strb	r3, [r4, #6]
   1cd86:	2301      	movs	r3, #1
   1cd88:	9300      	str	r3, [sp, #0]
   1cd8a:	e001      	b.n	1cd90 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   1cd8c:	2302      	movs	r3, #2
   1cd8e:	9300      	str	r3, [sp, #0]
}
   1cd90:	9800      	ldr	r0, [sp, #0]
   1cd92:	b003      	add	sp, #12
   1cd94:	bc3c      	pop	{r2, r3, r4, r5}
   1cd96:	4690      	mov	r8, r2
   1cd98:	4699      	mov	r9, r3
   1cd9a:	46a2      	mov	sl, r4
   1cd9c:	46ab      	mov	fp, r5
   1cd9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cda0:	0001b6b5 	.word	0x0001b6b5
   1cda4:	0001beb5 	.word	0x0001beb5
   1cda8:	0001bb39 	.word	0x0001bb39
   1cdac:	0001b659 	.word	0x0001b659
   1cdb0:	0001b67f 	.word	0x0001b67f
   1cdb4:	0001b519 	.word	0x0001b519

0001cdb8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   1cdb8:	b570      	push	{r4, r5, r6, lr}
   1cdba:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   1cdbc:	8881      	ldrh	r1, [r0, #4]
   1cdbe:	6800      	ldr	r0, [r0, #0]
   1cdc0:	4b1c      	ldr	r3, [pc, #112]	; (1ce34 <f_sync+0x7c>)
   1cdc2:	4798      	blx	r3
	if (res == FR_OK) {
   1cdc4:	2800      	cmp	r0, #0
   1cdc6:	d102      	bne.n	1cdce <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   1cdc8:	79a3      	ldrb	r3, [r4, #6]
   1cdca:	069b      	lsls	r3, r3, #26
   1cdcc:	d400      	bmi.n	1cdd0 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
   1cdce:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
   1cdd0:	69e1      	ldr	r1, [r4, #28]
   1cdd2:	6820      	ldr	r0, [r4, #0]
   1cdd4:	4b18      	ldr	r3, [pc, #96]	; (1ce38 <f_sync+0x80>)
   1cdd6:	4798      	blx	r3
			if (res == FR_OK) {
   1cdd8:	2800      	cmp	r0, #0
   1cdda:	d1f8      	bne.n	1cdce <f_sync+0x16>
				dir = fp->dir_ptr;
   1cddc:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   1cdde:	7aeb      	ldrb	r3, [r5, #11]
   1cde0:	2220      	movs	r2, #32
   1cde2:	4313      	orrs	r3, r2
   1cde4:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   1cde6:	7b23      	ldrb	r3, [r4, #12]
   1cde8:	772b      	strb	r3, [r5, #28]
   1cdea:	89a3      	ldrh	r3, [r4, #12]
   1cdec:	0a1b      	lsrs	r3, r3, #8
   1cdee:	776b      	strb	r3, [r5, #29]
   1cdf0:	89e3      	ldrh	r3, [r4, #14]
   1cdf2:	77ab      	strb	r3, [r5, #30]
   1cdf4:	7be3      	ldrb	r3, [r4, #15]
   1cdf6:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   1cdf8:	7c23      	ldrb	r3, [r4, #16]
   1cdfa:	76ab      	strb	r3, [r5, #26]
   1cdfc:	8a23      	ldrh	r3, [r4, #16]
   1cdfe:	0a1b      	lsrs	r3, r3, #8
   1ce00:	76eb      	strb	r3, [r5, #27]
   1ce02:	8a63      	ldrh	r3, [r4, #18]
   1ce04:	752b      	strb	r3, [r5, #20]
   1ce06:	8a63      	ldrh	r3, [r4, #18]
   1ce08:	0a1b      	lsrs	r3, r3, #8
   1ce0a:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
   1ce0c:	4b0b      	ldr	r3, [pc, #44]	; (1ce3c <f_sync+0x84>)
   1ce0e:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
   1ce10:	75a8      	strb	r0, [r5, #22]
   1ce12:	0a03      	lsrs	r3, r0, #8
   1ce14:	75eb      	strb	r3, [r5, #23]
   1ce16:	0c03      	lsrs	r3, r0, #16
   1ce18:	762b      	strb	r3, [r5, #24]
   1ce1a:	0e00      	lsrs	r0, r0, #24
   1ce1c:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
   1ce1e:	79a3      	ldrb	r3, [r4, #6]
   1ce20:	2220      	movs	r2, #32
   1ce22:	4393      	bics	r3, r2
   1ce24:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
   1ce26:	2301      	movs	r3, #1
   1ce28:	6822      	ldr	r2, [r4, #0]
   1ce2a:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
   1ce2c:	6820      	ldr	r0, [r4, #0]
   1ce2e:	4b04      	ldr	r3, [pc, #16]	; (1ce40 <f_sync+0x88>)
   1ce30:	4798      	blx	r3
   1ce32:	e7cc      	b.n	1cdce <f_sync+0x16>
   1ce34:	0001b6b5 	.word	0x0001b6b5
   1ce38:	0001bb39 	.word	0x0001bb39
   1ce3c:	0001b609 	.word	0x0001b609
   1ce40:	0001c591 	.word	0x0001c591

0001ce44 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   1ce44:	b510      	push	{r4, lr}
   1ce46:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   1ce48:	4b03      	ldr	r3, [pc, #12]	; (1ce58 <f_close+0x14>)
   1ce4a:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   1ce4c:	2800      	cmp	r0, #0
   1ce4e:	d101      	bne.n	1ce54 <f_close+0x10>
   1ce50:	2300      	movs	r3, #0
   1ce52:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
   1ce54:	bd10      	pop	{r4, pc}
   1ce56:	46c0      	nop			; (mov r8, r8)
   1ce58:	0001cdb9 	.word	0x0001cdb9

0001ce5c <ff_convert>:
   1ce5c:	0003      	movs	r3, r0
   1ce5e:	287f      	cmp	r0, #127	; 0x7f
   1ce60:	d911      	bls.n	1ce86 <ff_convert+0x2a>
   1ce62:	2900      	cmp	r1, #0
   1ce64:	d111      	bne.n	1ce8a <ff_convert+0x2e>
   1ce66:	28c7      	cmp	r0, #199	; 0xc7
   1ce68:	d017      	beq.n	1ce9a <ff_convert+0x3e>
   1ce6a:	4a0d      	ldr	r2, [pc, #52]	; (1cea0 <ff_convert+0x44>)
   1ce6c:	3202      	adds	r2, #2
   1ce6e:	2301      	movs	r3, #1
   1ce70:	8811      	ldrh	r1, [r2, #0]
   1ce72:	4281      	cmp	r1, r0
   1ce74:	d004      	beq.n	1ce80 <ff_convert+0x24>
   1ce76:	3301      	adds	r3, #1
   1ce78:	b29b      	uxth	r3, r3
   1ce7a:	3202      	adds	r2, #2
   1ce7c:	2b80      	cmp	r3, #128	; 0x80
   1ce7e:	d1f7      	bne.n	1ce70 <ff_convert+0x14>
   1ce80:	3380      	adds	r3, #128	; 0x80
   1ce82:	20ff      	movs	r0, #255	; 0xff
   1ce84:	4003      	ands	r3, r0
   1ce86:	0018      	movs	r0, r3
   1ce88:	4770      	bx	lr
   1ce8a:	2300      	movs	r3, #0
   1ce8c:	28ff      	cmp	r0, #255	; 0xff
   1ce8e:	d8fa      	bhi.n	1ce86 <ff_convert+0x2a>
   1ce90:	3880      	subs	r0, #128	; 0x80
   1ce92:	0040      	lsls	r0, r0, #1
   1ce94:	4b02      	ldr	r3, [pc, #8]	; (1cea0 <ff_convert+0x44>)
   1ce96:	5ac3      	ldrh	r3, [r0, r3]
   1ce98:	e7f5      	b.n	1ce86 <ff_convert+0x2a>
   1ce9a:	2300      	movs	r3, #0
   1ce9c:	e7f0      	b.n	1ce80 <ff_convert+0x24>
   1ce9e:	46c0      	nop			; (mov r8, r8)
   1cea0:	00022918 	.word	0x00022918

0001cea4 <ff_wtoupper>:
   1cea4:	2861      	cmp	r0, #97	; 0x61
   1cea6:	d014      	beq.n	1ced2 <ff_wtoupper+0x2e>
   1cea8:	4b0b      	ldr	r3, [pc, #44]	; (1ced8 <ff_wtoupper+0x34>)
   1ceaa:	3304      	adds	r3, #4
   1ceac:	2101      	movs	r1, #1
   1ceae:	2262      	movs	r2, #98	; 0x62
   1ceb0:	4290      	cmp	r0, r2
   1ceb2:	d007      	beq.n	1cec4 <ff_wtoupper+0x20>
   1ceb4:	3101      	adds	r1, #1
   1ceb6:	3302      	adds	r3, #2
   1ceb8:	1e9a      	subs	r2, r3, #2
   1ceba:	8812      	ldrh	r2, [r2, #0]
   1cebc:	2a00      	cmp	r2, #0
   1cebe:	d1f7      	bne.n	1ceb0 <ff_wtoupper+0xc>
   1cec0:	0003      	movs	r3, r0
   1cec2:	e004      	b.n	1cece <ff_wtoupper+0x2a>
   1cec4:	1e03      	subs	r3, r0, #0
   1cec6:	d002      	beq.n	1cece <ff_wtoupper+0x2a>
   1cec8:	0049      	lsls	r1, r1, #1
   1ceca:	4b04      	ldr	r3, [pc, #16]	; (1cedc <ff_wtoupper+0x38>)
   1cecc:	5acb      	ldrh	r3, [r1, r3]
   1cece:	0018      	movs	r0, r3
   1ced0:	4770      	bx	lr
   1ced2:	2100      	movs	r1, #0
   1ced4:	e7f8      	b.n	1cec8 <ff_wtoupper+0x24>
   1ced6:	46c0      	nop			; (mov r8, r8)
   1ced8:	00022a18 	.word	0x00022a18
   1cedc:	00022bf8 	.word	0x00022bf8

0001cee0 <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   1cee0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cee2:	46de      	mov	lr, fp
   1cee4:	4657      	mov	r7, sl
   1cee6:	464e      	mov	r6, r9
   1cee8:	4645      	mov	r5, r8
   1ceea:	b5e0      	push	{r5, r6, r7, lr}
   1ceec:	b083      	sub	sp, #12
   1ceee:	0007      	movs	r7, r0
   1cef0:	4688      	mov	r8, r1
   1cef2:	9201      	str	r2, [sp, #4]
    int rc = FAILURE, 
        sent = 0;
    
    while (sent < length && !TimerIsExpired(timer))
   1cef4:	2400      	movs	r4, #0
   1cef6:	2900      	cmp	r1, #0
   1cef8:	dd18      	ble.n	1cf2c <sendPacket+0x4c>
   1cefa:	4b15      	ldr	r3, [pc, #84]	; (1cf50 <sendPacket+0x70>)
   1cefc:	469a      	mov	sl, r3
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   1cefe:	4b15      	ldr	r3, [pc, #84]	; (1cf54 <sendPacket+0x74>)
   1cf00:	469b      	mov	fp, r3
    while (sent < length && !TimerIsExpired(timer))
   1cf02:	9801      	ldr	r0, [sp, #4]
   1cf04:	47d0      	blx	sl
   1cf06:	2800      	cmp	r0, #0
   1cf08:	d110      	bne.n	1cf2c <sendPacket+0x4c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   1cf0a:	6d3e      	ldr	r6, [r7, #80]	; 0x50
   1cf0c:	68f3      	ldr	r3, [r6, #12]
   1cf0e:	4699      	mov	r9, r3
   1cf10:	693b      	ldr	r3, [r7, #16]
   1cf12:	191d      	adds	r5, r3, r4
   1cf14:	9801      	ldr	r0, [sp, #4]
   1cf16:	47d8      	blx	fp
   1cf18:	0003      	movs	r3, r0
   1cf1a:	4642      	mov	r2, r8
   1cf1c:	0029      	movs	r1, r5
   1cf1e:	0030      	movs	r0, r6
   1cf20:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
   1cf22:	2800      	cmp	r0, #0
   1cf24:	db02      	blt.n	1cf2c <sendPacket+0x4c>
            break;
        sent += rc;
   1cf26:	1824      	adds	r4, r4, r0
    while (sent < length && !TimerIsExpired(timer))
   1cf28:	45a0      	cmp	r8, r4
   1cf2a:	dcea      	bgt.n	1cf02 <sendPacket+0x22>
    }
    if (sent == length)
   1cf2c:	45a0      	cmp	r8, r4
   1cf2e:	d10c      	bne.n	1cf4a <sendPacket+0x6a>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   1cf30:	69b9      	ldr	r1, [r7, #24]
   1cf32:	0038      	movs	r0, r7
   1cf34:	3054      	adds	r0, #84	; 0x54
   1cf36:	4b08      	ldr	r3, [pc, #32]	; (1cf58 <sendPacket+0x78>)
   1cf38:	4798      	blx	r3
        rc = SUCCESS;
   1cf3a:	2000      	movs	r0, #0
    }
    else
        rc = FAILURE;
    return rc;
}
   1cf3c:	b003      	add	sp, #12
   1cf3e:	bc3c      	pop	{r2, r3, r4, r5}
   1cf40:	4690      	mov	r8, r2
   1cf42:	4699      	mov	r9, r3
   1cf44:	46a2      	mov	sl, r4
   1cf46:	46ab      	mov	fp, r5
   1cf48:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = FAILURE;
   1cf4a:	2001      	movs	r0, #1
   1cf4c:	4240      	negs	r0, r0
    return rc;
   1cf4e:	e7f5      	b.n	1cf3c <sendPacket+0x5c>
   1cf50:	0001d84d 	.word	0x0001d84d
   1cf54:	0001d885 	.word	0x0001d885
   1cf58:	0001d875 	.word	0x0001d875

0001cf5c <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   1cf5c:	b510      	push	{r4, lr}
    int i;
    c->ipstack = network;
   1cf5e:	6501      	str	r1, [r0, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
   1cf60:	2100      	movs	r1, #0
   1cf62:	6241      	str	r1, [r0, #36]	; 0x24
   1cf64:	62c1      	str	r1, [r0, #44]	; 0x2c
   1cf66:	6341      	str	r1, [r0, #52]	; 0x34
   1cf68:	63c1      	str	r1, [r0, #60]	; 0x3c
   1cf6a:	6441      	str	r1, [r0, #68]	; 0x44
    c->command_timeout_ms = command_timeout_ms;
   1cf6c:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
   1cf6e:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
   1cf70:	9b02      	ldr	r3, [sp, #8]
   1cf72:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
   1cf74:	9b03      	ldr	r3, [sp, #12]
   1cf76:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
   1cf78:	9b04      	ldr	r3, [sp, #16]
   1cf7a:	60c3      	str	r3, [r0, #12]
    c->isconnected = 0;
   1cf7c:	6201      	str	r1, [r0, #32]
    c->ping_outstanding = 0;
   1cf7e:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
   1cf80:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->next_packetid = 1;
   1cf82:	2301      	movs	r3, #1
   1cf84:	6003      	str	r3, [r0, #0]
    TimerInit(&c->ping_timer);
   1cf86:	3054      	adds	r0, #84	; 0x54
   1cf88:	4b01      	ldr	r3, [pc, #4]	; (1cf90 <MQTTClientInit+0x34>)
   1cf8a:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   1cf8c:	bd10      	pop	{r4, pc}
   1cf8e:	46c0      	nop			; (mov r8, r8)
   1cf90:	0001d89d 	.word	0x0001d89d

0001cf94 <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   1cf94:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cf96:	46de      	mov	lr, fp
   1cf98:	4657      	mov	r7, sl
   1cf9a:	464e      	mov	r6, r9
   1cf9c:	4645      	mov	r5, r8
   1cf9e:	b5e0      	push	{r5, r6, r7, lr}
   1cfa0:	b085      	sub	sp, #20
   1cfa2:	4682      	mov	sl, r0
   1cfa4:	000f      	movs	r7, r1
   1cfa6:	4691      	mov	r9, r2
   1cfa8:	0004      	movs	r4, r0
   1cfaa:	3424      	adds	r4, #36	; 0x24
   1cfac:	234c      	movs	r3, #76	; 0x4c
   1cfae:	4453      	add	r3, sl
   1cfb0:	4698      	mov	r8, r3
    int i;
    int rc = FAILURE;
   1cfb2:	2301      	movs	r3, #1
   1cfb4:	425b      	negs	r3, r3
   1cfb6:	9301      	str	r3, [sp, #4]
   1cfb8:	e056      	b.n	1d068 <deliverMessage+0xd4>

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   1cfba:	6821      	ldr	r1, [r4, #0]
    char* curn = topicName->lenstring.data;
   1cfbc:	68bb      	ldr	r3, [r7, #8]
    char* curn_end = curn + topicName->lenstring.len;
   1cfbe:	687a      	ldr	r2, [r7, #4]
   1cfc0:	189e      	adds	r6, r3, r2
    while (*curf && curn < curn_end)
   1cfc2:	780a      	ldrb	r2, [r1, #0]
   1cfc4:	2a00      	cmp	r2, #0
   1cfc6:	d04a      	beq.n	1d05e <deliverMessage+0xca>
   1cfc8:	42b3      	cmp	r3, r6
   1cfca:	d24a      	bcs.n	1d062 <deliverMessage+0xce>
   1cfcc:	3101      	adds	r1, #1
   1cfce:	1e70      	subs	r0, r6, #1
   1cfd0:	e008      	b.n	1cfe4 <deliverMessage+0x50>
        if (*curn == '/' && *curf != '/')
   1cfd2:	2a2f      	cmp	r2, #47	; 0x2f
   1cfd4:	d10f      	bne.n	1cff6 <deliverMessage+0x62>
        curn++;
   1cfd6:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   1cfd8:	780a      	ldrb	r2, [r1, #0]
   1cfda:	2a00      	cmp	r2, #0
   1cfdc:	d03f      	beq.n	1d05e <deliverMessage+0xca>
   1cfde:	429e      	cmp	r6, r3
   1cfe0:	d93f      	bls.n	1d062 <deliverMessage+0xce>
   1cfe2:	3101      	adds	r1, #1
        if (*curn == '/' && *curf != '/')
   1cfe4:	781d      	ldrb	r5, [r3, #0]
   1cfe6:	2d2f      	cmp	r5, #47	; 0x2f
   1cfe8:	d0f3      	beq.n	1cfd2 <deliverMessage+0x3e>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   1cfea:	2a2b      	cmp	r2, #43	; 0x2b
   1cfec:	d008      	beq.n	1d000 <deliverMessage+0x6c>
   1cfee:	2a23      	cmp	r2, #35	; 0x23
   1cff0:	d013      	beq.n	1d01a <deliverMessage+0x86>
   1cff2:	4295      	cmp	r5, r2
   1cff4:	d0ef      	beq.n	1cfd6 <deliverMessage+0x42>
    return (curn == curn_end) && (*curf == '\0');
   1cff6:	429e      	cmp	r6, r3
   1cff8:	d133      	bne.n	1d062 <deliverMessage+0xce>
   1cffa:	2a00      	cmp	r2, #0
   1cffc:	d03d      	beq.n	1d07a <deliverMessage+0xe6>
   1cffe:	e030      	b.n	1d062 <deliverMessage+0xce>
            char* nextpos = curn + 1;
   1d000:	1c5d      	adds	r5, r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   1d002:	42ae      	cmp	r6, r5
   1d004:	d927      	bls.n	1d056 <deliverMessage+0xc2>
   1d006:	785a      	ldrb	r2, [r3, #1]
   1d008:	2a2f      	cmp	r2, #47	; 0x2f
   1d00a:	d01f      	beq.n	1d04c <deliverMessage+0xb8>
                nextpos = ++curn + 1;
   1d00c:	3301      	adds	r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   1d00e:	4283      	cmp	r3, r0
   1d010:	d0e1      	beq.n	1cfd6 <deliverMessage+0x42>
   1d012:	785a      	ldrb	r2, [r3, #1]
   1d014:	2a2f      	cmp	r2, #47	; 0x2f
   1d016:	d1f9      	bne.n	1d00c <deliverMessage+0x78>
   1d018:	e7dd      	b.n	1cfd6 <deliverMessage+0x42>
            curn = curn_end - 1;    // skip until end of string
   1d01a:	1e73      	subs	r3, r6, #1
   1d01c:	e7db      	b.n	1cfd6 <deliverMessage+0x42>
                rc = SUCCESS;
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   1d01e:	9b01      	ldr	r3, [sp, #4]
   1d020:	3301      	adds	r3, #1
   1d022:	d007      	beq.n	1d034 <deliverMessage+0xa0>
        c->defaultMessageHandler(&md);
        rc = SUCCESS;
    }   
    
    return rc;
}
   1d024:	9801      	ldr	r0, [sp, #4]
   1d026:	b005      	add	sp, #20
   1d028:	bc3c      	pop	{r2, r3, r4, r5}
   1d02a:	4690      	mov	r8, r2
   1d02c:	4699      	mov	r9, r3
   1d02e:	46a2      	mov	sl, r4
   1d030:	46ab      	mov	fp, r5
   1d032:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   1d034:	4653      	mov	r3, sl
   1d036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1d038:	2b00      	cmp	r3, #0
   1d03a:	d0f3      	beq.n	1d024 <deliverMessage+0x90>
    md->topicName = aTopicName;
   1d03c:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   1d03e:	464a      	mov	r2, r9
   1d040:	9202      	str	r2, [sp, #8]
        c->defaultMessageHandler(&md);
   1d042:	a802      	add	r0, sp, #8
   1d044:	4798      	blx	r3
        rc = SUCCESS;
   1d046:	2300      	movs	r3, #0
   1d048:	9301      	str	r3, [sp, #4]
    return rc;
   1d04a:	e7eb      	b.n	1d024 <deliverMessage+0x90>
    while (*curf && curn < curn_end)
   1d04c:	780a      	ldrb	r2, [r1, #0]
   1d04e:	2a00      	cmp	r2, #0
   1d050:	d007      	beq.n	1d062 <deliverMessage+0xce>
        curn++;
   1d052:	002b      	movs	r3, r5
   1d054:	e7c5      	b.n	1cfe2 <deliverMessage+0x4e>
   1d056:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   1d058:	780a      	ldrb	r2, [r1, #0]
   1d05a:	2a00      	cmp	r2, #0
   1d05c:	d101      	bne.n	1d062 <deliverMessage+0xce>
    return (curn == curn_end) && (*curf == '\0');
   1d05e:	429e      	cmp	r6, r3
   1d060:	d00b      	beq.n	1d07a <deliverMessage+0xe6>
   1d062:	3408      	adds	r4, #8
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1d064:	4544      	cmp	r4, r8
   1d066:	d0da      	beq.n	1d01e <deliverMessage+0x8a>
   1d068:	46a3      	mov	fp, r4
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   1d06a:	6821      	ldr	r1, [r4, #0]
   1d06c:	2900      	cmp	r1, #0
   1d06e:	d0f8      	beq.n	1d062 <deliverMessage+0xce>
   1d070:	0038      	movs	r0, r7
   1d072:	4b08      	ldr	r3, [pc, #32]	; (1d094 <deliverMessage+0x100>)
   1d074:	4798      	blx	r3
   1d076:	2800      	cmp	r0, #0
   1d078:	d09f      	beq.n	1cfba <deliverMessage+0x26>
            if (c->messageHandlers[i].fp != NULL)
   1d07a:	465b      	mov	r3, fp
   1d07c:	685b      	ldr	r3, [r3, #4]
   1d07e:	2b00      	cmp	r3, #0
   1d080:	d0ef      	beq.n	1d062 <deliverMessage+0xce>
    md->topicName = aTopicName;
   1d082:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   1d084:	464a      	mov	r2, r9
   1d086:	9202      	str	r2, [sp, #8]
                c->messageHandlers[i].fp(&md);
   1d088:	a802      	add	r0, sp, #8
   1d08a:	4798      	blx	r3
                rc = SUCCESS;
   1d08c:	2300      	movs	r3, #0
   1d08e:	9301      	str	r3, [sp, #4]
   1d090:	e7e7      	b.n	1d062 <deliverMessage+0xce>
   1d092:	46c0      	nop			; (mov r8, r8)
   1d094:	0001e171 	.word	0x0001e171

0001d098 <keepalive>:


int keepalive(MQTTClient* c)
{
   1d098:	b510      	push	{r4, lr}
   1d09a:	b082      	sub	sp, #8
   1d09c:	0004      	movs	r4, r0
    int rc = FAILURE;

    if (c->keepAliveInterval == 0)
    {
        rc = SUCCESS;
   1d09e:	2000      	movs	r0, #0
    if (c->keepAliveInterval == 0)
   1d0a0:	69a3      	ldr	r3, [r4, #24]
   1d0a2:	2b00      	cmp	r3, #0
   1d0a4:	d101      	bne.n	1d0aa <keepalive+0x12>
        }
    }

exit:
    return rc;
}
   1d0a6:	b002      	add	sp, #8
   1d0a8:	bd10      	pop	{r4, pc}
    if (TimerIsExpired(&c->ping_timer))
   1d0aa:	0020      	movs	r0, r4
   1d0ac:	3054      	adds	r0, #84	; 0x54
   1d0ae:	4b14      	ldr	r3, [pc, #80]	; (1d100 <keepalive+0x68>)
   1d0b0:	4798      	blx	r3
   1d0b2:	2800      	cmp	r0, #0
   1d0b4:	d01d      	beq.n	1d0f2 <keepalive+0x5a>
        if (!c->ping_outstanding)
   1d0b6:	7f23      	ldrb	r3, [r4, #28]
   1d0b8:	2b00      	cmp	r3, #0
   1d0ba:	d11d      	bne.n	1d0f8 <keepalive+0x60>
            TimerInit(&timer);
   1d0bc:	4668      	mov	r0, sp
   1d0be:	4b11      	ldr	r3, [pc, #68]	; (1d104 <keepalive+0x6c>)
   1d0c0:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   1d0c2:	21fa      	movs	r1, #250	; 0xfa
   1d0c4:	0089      	lsls	r1, r1, #2
   1d0c6:	4668      	mov	r0, sp
   1d0c8:	4b0f      	ldr	r3, [pc, #60]	; (1d108 <keepalive+0x70>)
   1d0ca:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   1d0cc:	68a1      	ldr	r1, [r4, #8]
   1d0ce:	6920      	ldr	r0, [r4, #16]
   1d0d0:	4b0e      	ldr	r3, [pc, #56]	; (1d10c <keepalive+0x74>)
   1d0d2:	4798      	blx	r3
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   1d0d4:	2800      	cmp	r0, #0
   1d0d6:	dd09      	ble.n	1d0ec <keepalive+0x54>
   1d0d8:	466a      	mov	r2, sp
   1d0da:	0001      	movs	r1, r0
   1d0dc:	0020      	movs	r0, r4
   1d0de:	4b0c      	ldr	r3, [pc, #48]	; (1d110 <keepalive+0x78>)
   1d0e0:	4798      	blx	r3
   1d0e2:	2800      	cmp	r0, #0
   1d0e4:	d1df      	bne.n	1d0a6 <keepalive+0xe>
                c->ping_outstanding = 1;
   1d0e6:	2301      	movs	r3, #1
   1d0e8:	7723      	strb	r3, [r4, #28]
   1d0ea:	e7dc      	b.n	1d0a6 <keepalive+0xe>
    int rc = FAILURE;
   1d0ec:	2001      	movs	r0, #1
   1d0ee:	4240      	negs	r0, r0
   1d0f0:	e7d9      	b.n	1d0a6 <keepalive+0xe>
   1d0f2:	2001      	movs	r0, #1
   1d0f4:	4240      	negs	r0, r0
   1d0f6:	e7d6      	b.n	1d0a6 <keepalive+0xe>
   1d0f8:	2001      	movs	r0, #1
   1d0fa:	4240      	negs	r0, r0
    return rc;
   1d0fc:	e7d3      	b.n	1d0a6 <keepalive+0xe>
   1d0fe:	46c0      	nop			; (mov r8, r8)
   1d100:	0001d84d 	.word	0x0001d84d
   1d104:	0001d89d 	.word	0x0001d89d
   1d108:	0001d861 	.word	0x0001d861
   1d10c:	0001de59 	.word	0x0001de59
   1d110:	0001cee1 	.word	0x0001cee1

0001d114 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   1d114:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d116:	46de      	mov	lr, fp
   1d118:	464f      	mov	r7, r9
   1d11a:	4646      	mov	r6, r8
   1d11c:	b5c0      	push	{r6, r7, lr}
   1d11e:	b090      	sub	sp, #64	; 0x40
   1d120:	0004      	movs	r4, r0
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   1d122:	6d05      	ldr	r5, [r0, #80]	; 0x50
   1d124:	68ae      	ldr	r6, [r5, #8]
   1d126:	6947      	ldr	r7, [r0, #20]
   1d128:	9107      	str	r1, [sp, #28]
   1d12a:	0008      	movs	r0, r1
   1d12c:	4b65      	ldr	r3, [pc, #404]	; (1d2c4 <cycle+0x1b0>)
   1d12e:	4798      	blx	r3
   1d130:	0003      	movs	r3, r0
   1d132:	2201      	movs	r2, #1
   1d134:	0039      	movs	r1, r7
   1d136:	0028      	movs	r0, r5
   1d138:	47b0      	blx	r6
   1d13a:	0005      	movs	r5, r0
   1d13c:	2801      	cmp	r0, #1
   1d13e:	d000      	beq.n	1d142 <cycle+0x2e>
   1d140:	e0bd      	b.n	1d2be <cycle+0x1aa>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   1d142:	9807      	ldr	r0, [sp, #28]
   1d144:	4b5f      	ldr	r3, [pc, #380]	; (1d2c4 <cycle+0x1b0>)
   1d146:	4798      	blx	r3
   1d148:	9006      	str	r0, [sp, #24]
   1d14a:	2604      	movs	r6, #4
    *value = 0;
   1d14c:	2700      	movs	r7, #0
        *value += (i & 127) * multiplier;
   1d14e:	237f      	movs	r3, #127	; 0x7f
   1d150:	469b      	mov	fp, r3
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   1d152:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1d154:	6883      	ldr	r3, [r0, #8]
   1d156:	4698      	mov	r8, r3
   1d158:	9b06      	ldr	r3, [sp, #24]
   1d15a:	2201      	movs	r2, #1
   1d15c:	a90c      	add	r1, sp, #48	; 0x30
   1d15e:	47c0      	blx	r8
        if (rc != 1)
   1d160:	2801      	cmp	r0, #1
   1d162:	d10e      	bne.n	1d182 <cycle+0x6e>
        *value += (i & 127) * multiplier;
   1d164:	ab02      	add	r3, sp, #8
   1d166:	2228      	movs	r2, #40	; 0x28
   1d168:	189b      	adds	r3, r3, r2
   1d16a:	781b      	ldrb	r3, [r3, #0]
   1d16c:	465a      	mov	r2, fp
   1d16e:	401a      	ands	r2, r3
   1d170:	436a      	muls	r2, r5
   1d172:	18bf      	adds	r7, r7, r2
        multiplier *= 128;
   1d174:	01ed      	lsls	r5, r5, #7
    } while ((i & 128) != 0);
   1d176:	b25b      	sxtb	r3, r3
   1d178:	2b00      	cmp	r3, #0
   1d17a:	da02      	bge.n	1d182 <cycle+0x6e>
   1d17c:	3e01      	subs	r6, #1
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   1d17e:	2e00      	cmp	r6, #0
   1d180:	d1e7      	bne.n	1d152 <cycle+0x3e>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   1d182:	6963      	ldr	r3, [r4, #20]
   1d184:	1c58      	adds	r0, r3, #1
   1d186:	0039      	movs	r1, r7
   1d188:	4b4f      	ldr	r3, [pc, #316]	; (1d2c8 <cycle+0x1b4>)
   1d18a:	4798      	blx	r3
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   1d18c:	2f00      	cmp	r7, #0
   1d18e:	dd10      	ble.n	1d1b2 <cycle+0x9e>
   1d190:	6d26      	ldr	r6, [r4, #80]	; 0x50
   1d192:	68b3      	ldr	r3, [r6, #8]
   1d194:	4699      	mov	r9, r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   1d196:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   1d198:	6963      	ldr	r3, [r4, #20]
   1d19a:	181d      	adds	r5, r3, r0
   1d19c:	9807      	ldr	r0, [sp, #28]
   1d19e:	4b49      	ldr	r3, [pc, #292]	; (1d2c4 <cycle+0x1b0>)
   1d1a0:	4798      	blx	r3
   1d1a2:	0003      	movs	r3, r0
   1d1a4:	003a      	movs	r2, r7
   1d1a6:	0029      	movs	r1, r5
   1d1a8:	0030      	movs	r0, r6
   1d1aa:	47c8      	blx	r9
   1d1ac:	42b8      	cmp	r0, r7
   1d1ae:	d000      	beq.n	1d1b2 <cycle+0x9e>
   1d1b0:	e085      	b.n	1d2be <cycle+0x1aa>
    header.byte = c->readbuf[0];
   1d1b2:	6963      	ldr	r3, [r4, #20]
   1d1b4:	781d      	ldrb	r5, [r3, #0]
   1d1b6:	092d      	lsrs	r5, r5, #4
    unsigned short packet_type = readPacket(c, timer);
    
    int len = 0,
        rc = SUCCESS;

    switch (packet_type)
   1d1b8:	2d05      	cmp	r5, #5
   1d1ba:	d051      	beq.n	1d260 <cycle+0x14c>
   1d1bc:	2d0d      	cmp	r5, #13
   1d1be:	d06e      	beq.n	1d29e <cycle+0x18a>
        rc = SUCCESS;
   1d1c0:	2600      	movs	r6, #0
    switch (packet_type)
   1d1c2:	2d03      	cmp	r5, #3
   1d1c4:	d16e      	bne.n	1d2a4 <cycle+0x190>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   1d1c6:	68e2      	ldr	r2, [r4, #12]
   1d1c8:	9204      	str	r2, [sp, #16]
   1d1ca:	9303      	str	r3, [sp, #12]
   1d1cc:	ab0f      	add	r3, sp, #60	; 0x3c
   1d1ce:	9302      	str	r3, [sp, #8]
   1d1d0:	ab0e      	add	r3, sp, #56	; 0x38
   1d1d2:	9301      	str	r3, [sp, #4]
   1d1d4:	ab09      	add	r3, sp, #36	; 0x24
   1d1d6:	9300      	str	r3, [sp, #0]
   1d1d8:	ab0d      	add	r3, sp, #52	; 0x34
   1d1da:	2229      	movs	r2, #41	; 0x29
   1d1dc:	a902      	add	r1, sp, #8
   1d1de:	468c      	mov	ip, r1
   1d1e0:	4462      	add	r2, ip
   1d1e2:	a908      	add	r1, sp, #32
   1d1e4:	202a      	movs	r0, #42	; 0x2a
   1d1e6:	4460      	add	r0, ip
   1d1e8:	4e38      	ldr	r6, [pc, #224]	; (1d2cc <cycle+0x1b8>)
   1d1ea:	47b0      	blx	r6
        rc = SUCCESS;
   1d1ec:	2600      	movs	r6, #0
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   1d1ee:	2801      	cmp	r0, #1
   1d1f0:	d15b      	bne.n	1d2aa <cycle+0x196>
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
                goto exit;
            msg.qos = (enum QoS)intQoS;
   1d1f2:	ae0c      	add	r6, sp, #48	; 0x30
   1d1f4:	ab02      	add	r3, sp, #8
   1d1f6:	7e1b      	ldrb	r3, [r3, #24]
   1d1f8:	7033      	strb	r3, [r6, #0]
            deliverMessage(c, &topicName, &msg);
   1d1fa:	0032      	movs	r2, r6
   1d1fc:	a909      	add	r1, sp, #36	; 0x24
   1d1fe:	0020      	movs	r0, r4
   1d200:	4b33      	ldr	r3, [pc, #204]	; (1d2d0 <cycle+0x1bc>)
   1d202:	4798      	blx	r3
            if (msg.qos != QOS0)
   1d204:	7833      	ldrb	r3, [r6, #0]
   1d206:	2b00      	cmp	r3, #0
   1d208:	d028      	beq.n	1d25c <cycle+0x148>
            {
                if (msg.qos == QOS1)
   1d20a:	2b01      	cmp	r3, #1
   1d20c:	d004      	beq.n	1d218 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
                else if (msg.qos == QOS2)
   1d20e:	2b02      	cmp	r3, #2
   1d210:	d016      	beq.n	1d240 <cycle+0x12c>
   1d212:	2601      	movs	r6, #1
   1d214:	4276      	negs	r6, r6
   1d216:	e048      	b.n	1d2aa <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   1d218:	ab0c      	add	r3, sp, #48	; 0x30
   1d21a:	889b      	ldrh	r3, [r3, #4]
   1d21c:	9300      	str	r3, [sp, #0]
   1d21e:	2300      	movs	r3, #0
   1d220:	2204      	movs	r2, #4
   1d222:	68a1      	ldr	r1, [r4, #8]
   1d224:	6920      	ldr	r0, [r4, #16]
   1d226:	4e2b      	ldr	r6, [pc, #172]	; (1d2d4 <cycle+0x1c0>)
   1d228:	47b0      	blx	r6
   1d22a:	0001      	movs	r1, r0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
                if (len <= 0)
   1d22c:	2900      	cmp	r1, #0
   1d22e:	dd12      	ble.n	1d256 <cycle+0x142>
                    rc = FAILURE;
                else
                    rc = sendPacket(c, len, timer);
   1d230:	9a07      	ldr	r2, [sp, #28]
   1d232:	0020      	movs	r0, r4
   1d234:	4b28      	ldr	r3, [pc, #160]	; (1d2d8 <cycle+0x1c4>)
   1d236:	4798      	blx	r3
   1d238:	0006      	movs	r6, r0
                if (rc == FAILURE)
   1d23a:	1c43      	adds	r3, r0, #1
   1d23c:	d132      	bne.n	1d2a4 <cycle+0x190>
   1d23e:	e034      	b.n	1d2aa <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   1d240:	ab0c      	add	r3, sp, #48	; 0x30
   1d242:	889b      	ldrh	r3, [r3, #4]
   1d244:	9300      	str	r3, [sp, #0]
   1d246:	2300      	movs	r3, #0
   1d248:	2205      	movs	r2, #5
   1d24a:	68a1      	ldr	r1, [r4, #8]
   1d24c:	6920      	ldr	r0, [r4, #16]
   1d24e:	4e21      	ldr	r6, [pc, #132]	; (1d2d4 <cycle+0x1c0>)
   1d250:	47b0      	blx	r6
   1d252:	0001      	movs	r1, r0
   1d254:	e7ea      	b.n	1d22c <cycle+0x118>
   1d256:	2601      	movs	r6, #1
   1d258:	4276      	negs	r6, r6
   1d25a:	e026      	b.n	1d2aa <cycle+0x196>
        rc = SUCCESS;
   1d25c:	2600      	movs	r6, #0
   1d25e:	e021      	b.n	1d2a4 <cycle+0x190>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1d260:	68e2      	ldr	r2, [r4, #12]
   1d262:	9200      	str	r2, [sp, #0]
   1d264:	aa0c      	add	r2, sp, #48	; 0x30
   1d266:	a908      	add	r1, sp, #32
   1d268:	a809      	add	r0, sp, #36	; 0x24
   1d26a:	4e1c      	ldr	r6, [pc, #112]	; (1d2dc <cycle+0x1c8>)
   1d26c:	47b0      	blx	r6
   1d26e:	2801      	cmp	r0, #1
   1d270:	d002      	beq.n	1d278 <cycle+0x164>
   1d272:	2601      	movs	r6, #1
   1d274:	4276      	negs	r6, r6
   1d276:	e01b      	b.n	1d2b0 <cycle+0x19c>
                rc = FAILURE;
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   1d278:	ab0c      	add	r3, sp, #48	; 0x30
   1d27a:	881b      	ldrh	r3, [r3, #0]
   1d27c:	9300      	str	r3, [sp, #0]
   1d27e:	2300      	movs	r3, #0
   1d280:	2206      	movs	r2, #6
   1d282:	68a1      	ldr	r1, [r4, #8]
   1d284:	6920      	ldr	r0, [r4, #16]
   1d286:	4e13      	ldr	r6, [pc, #76]	; (1d2d4 <cycle+0x1c0>)
   1d288:	47b0      	blx	r6
   1d28a:	2800      	cmp	r0, #0
   1d28c:	ddf1      	ble.n	1d272 <cycle+0x15e>
                rc = FAILURE;
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   1d28e:	9a07      	ldr	r2, [sp, #28]
   1d290:	0001      	movs	r1, r0
   1d292:	0020      	movs	r0, r4
   1d294:	4b10      	ldr	r3, [pc, #64]	; (1d2d8 <cycle+0x1c4>)
   1d296:	4798      	blx	r3
   1d298:	1e06      	subs	r6, r0, #0
   1d29a:	d1ea      	bne.n	1d272 <cycle+0x15e>
   1d29c:	e002      	b.n	1d2a4 <cycle+0x190>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   1d29e:	2300      	movs	r3, #0
   1d2a0:	7723      	strb	r3, [r4, #28]
        rc = SUCCESS;
   1d2a2:	2600      	movs	r6, #0
            break;
    }
    keepalive(c);
   1d2a4:	0020      	movs	r0, r4
   1d2a6:	4b0e      	ldr	r3, [pc, #56]	; (1d2e0 <cycle+0x1cc>)
   1d2a8:	4798      	blx	r3
exit:
    if (rc == SUCCESS)
   1d2aa:	2e00      	cmp	r6, #0
   1d2ac:	d100      	bne.n	1d2b0 <cycle+0x19c>
   1d2ae:	002e      	movs	r6, r5
        rc = packet_type;
    return rc;
}
   1d2b0:	0030      	movs	r0, r6
   1d2b2:	b010      	add	sp, #64	; 0x40
   1d2b4:	bc1c      	pop	{r2, r3, r4}
   1d2b6:	4690      	mov	r8, r2
   1d2b8:	4699      	mov	r9, r3
   1d2ba:	46a3      	mov	fp, r4
   1d2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d2be:	4d09      	ldr	r5, [pc, #36]	; (1d2e4 <cycle+0x1d0>)
        rc = SUCCESS;
   1d2c0:	2600      	movs	r6, #0
   1d2c2:	e7ef      	b.n	1d2a4 <cycle+0x190>
   1d2c4:	0001d885 	.word	0x0001d885
   1d2c8:	0001df71 	.word	0x0001df71
   1d2cc:	0001de69 	.word	0x0001de69
   1d2d0:	0001cf95 	.word	0x0001cf95
   1d2d4:	0001e2a5 	.word	0x0001e2a5
   1d2d8:	0001cee1 	.word	0x0001cee1
   1d2dc:	0001df01 	.word	0x0001df01
   1d2e0:	0001d099 	.word	0x0001d099
   1d2e4:	0000ffff 	.word	0x0000ffff

0001d2e8 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   1d2e8:	b570      	push	{r4, r5, r6, lr}
   1d2ea:	b082      	sub	sp, #8
   1d2ec:	0005      	movs	r5, r0
   1d2ee:	000c      	movs	r4, r1
    int rc = SUCCESS;
    Timer timer;

    TimerInit(&timer);
   1d2f0:	4668      	mov	r0, sp
   1d2f2:	4b0a      	ldr	r3, [pc, #40]	; (1d31c <MQTTYield+0x34>)
   1d2f4:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   1d2f6:	0021      	movs	r1, r4
   1d2f8:	4668      	mov	r0, sp
   1d2fa:	4b09      	ldr	r3, [pc, #36]	; (1d320 <MQTTYield+0x38>)
   1d2fc:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   1d2fe:	4c09      	ldr	r4, [pc, #36]	; (1d324 <MQTTYield+0x3c>)
        {
            rc = FAILURE;
            break;
        }
	} while (!TimerIsExpired(&timer));
   1d300:	4e09      	ldr	r6, [pc, #36]	; (1d328 <MQTTYield+0x40>)
        if (cycle(c, &timer) == FAILURE)
   1d302:	4669      	mov	r1, sp
   1d304:	0028      	movs	r0, r5
   1d306:	47a0      	blx	r4
   1d308:	1c43      	adds	r3, r0, #1
   1d30a:	d004      	beq.n	1d316 <MQTTYield+0x2e>
	} while (!TimerIsExpired(&timer));
   1d30c:	4668      	mov	r0, sp
   1d30e:	47b0      	blx	r6
   1d310:	2800      	cmp	r0, #0
   1d312:	d0f6      	beq.n	1d302 <MQTTYield+0x1a>
    int rc = SUCCESS;
   1d314:	2000      	movs	r0, #0
        
    return rc;
}
   1d316:	b002      	add	sp, #8
   1d318:	bd70      	pop	{r4, r5, r6, pc}
   1d31a:	46c0      	nop			; (mov r8, r8)
   1d31c:	0001d89d 	.word	0x0001d89d
   1d320:	0001d861 	.word	0x0001d861
   1d324:	0001d115 	.word	0x0001d115
   1d328:	0001d84d 	.word	0x0001d84d

0001d32c <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   1d32c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d32e:	b083      	sub	sp, #12
   1d330:	9001      	str	r0, [sp, #4]
   1d332:	000e      	movs	r6, r1
   1d334:	9200      	str	r2, [sp, #0]
    int rc = FAILURE;
   1d336:	2401      	movs	r4, #1
   1d338:	4264      	negs	r4, r4
    
    do
    {
        if (TimerIsExpired(timer))
   1d33a:	4f08      	ldr	r7, [pc, #32]	; (1d35c <waitfor+0x30>)
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   1d33c:	4d08      	ldr	r5, [pc, #32]	; (1d360 <waitfor+0x34>)
        if (TimerIsExpired(timer))
   1d33e:	9800      	ldr	r0, [sp, #0]
   1d340:	47b8      	blx	r7
   1d342:	2800      	cmp	r0, #0
   1d344:	d106      	bne.n	1d354 <waitfor+0x28>
    while ((rc = cycle(c, timer)) != packet_type);  
   1d346:	9900      	ldr	r1, [sp, #0]
   1d348:	9801      	ldr	r0, [sp, #4]
   1d34a:	47a8      	blx	r5
   1d34c:	0004      	movs	r4, r0
   1d34e:	42b0      	cmp	r0, r6
   1d350:	d1f5      	bne.n	1d33e <waitfor+0x12>
   1d352:	0034      	movs	r4, r6
    
    return rc;
}
   1d354:	0020      	movs	r0, r4
   1d356:	b003      	add	sp, #12
   1d358:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d35a:	46c0      	nop			; (mov r8, r8)
   1d35c:	0001d84d 	.word	0x0001d84d
   1d360:	0001d115 	.word	0x0001d115

0001d364 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   1d364:	b530      	push	{r4, r5, lr}
   1d366:	b09b      	sub	sp, #108	; 0x6c
   1d368:	0004      	movs	r4, r0
   1d36a:	000d      	movs	r5, r1
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   1d36c:	2258      	movs	r2, #88	; 0x58
   1d36e:	4928      	ldr	r1, [pc, #160]	; (1d410 <MQTTConnect+0xac>)
   1d370:	a802      	add	r0, sp, #8
   1d372:	4b28      	ldr	r3, [pc, #160]	; (1d414 <MQTTConnect+0xb0>)
   1d374:	4798      	blx	r3
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   1d376:	6a23      	ldr	r3, [r4, #32]
   1d378:	2b00      	cmp	r3, #0
   1d37a:	d13f      	bne.n	1d3fc <MQTTConnect+0x98>
		goto exit;
    
    TimerInit(&connect_timer);
   1d37c:	a818      	add	r0, sp, #96	; 0x60
   1d37e:	4b26      	ldr	r3, [pc, #152]	; (1d418 <MQTTConnect+0xb4>)
   1d380:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   1d382:	6861      	ldr	r1, [r4, #4]
   1d384:	a818      	add	r0, sp, #96	; 0x60
   1d386:	4b25      	ldr	r3, [pc, #148]	; (1d41c <MQTTConnect+0xb8>)
   1d388:	4798      	blx	r3

    if (options == 0)
   1d38a:	2d00      	cmp	r5, #0
   1d38c:	d015      	beq.n	1d3ba <MQTTConnect+0x56>
        options = &default_options; /* set default options if none were supplied */
    
    c->keepAliveInterval = options->keepAliveInterval;
   1d38e:	8b29      	ldrh	r1, [r5, #24]
   1d390:	61a1      	str	r1, [r4, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   1d392:	0020      	movs	r0, r4
   1d394:	3054      	adds	r0, #84	; 0x54
   1d396:	4b22      	ldr	r3, [pc, #136]	; (1d420 <MQTTConnect+0xbc>)
   1d398:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   1d39a:	002a      	movs	r2, r5
   1d39c:	68a1      	ldr	r1, [r4, #8]
   1d39e:	6920      	ldr	r0, [r4, #16]
   1d3a0:	4b20      	ldr	r3, [pc, #128]	; (1d424 <MQTTConnect+0xc0>)
   1d3a2:	4798      	blx	r3
   1d3a4:	2800      	cmp	r0, #0
   1d3a6:	dd2c      	ble.n	1d402 <MQTTConnect+0x9e>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   1d3a8:	aa18      	add	r2, sp, #96	; 0x60
   1d3aa:	0001      	movs	r1, r0
   1d3ac:	0020      	movs	r0, r4
   1d3ae:	4b1e      	ldr	r3, [pc, #120]	; (1d428 <MQTTConnect+0xc4>)
   1d3b0:	4798      	blx	r3
   1d3b2:	2800      	cmp	r0, #0
   1d3b4:	d003      	beq.n	1d3be <MQTTConnect+0x5a>
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
}
   1d3b6:	b01b      	add	sp, #108	; 0x6c
   1d3b8:	bd30      	pop	{r4, r5, pc}
        options = &default_options; /* set default options if none were supplied */
   1d3ba:	ad02      	add	r5, sp, #8
   1d3bc:	e7e7      	b.n	1d38e <MQTTConnect+0x2a>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   1d3be:	aa18      	add	r2, sp, #96	; 0x60
   1d3c0:	2102      	movs	r1, #2
   1d3c2:	0020      	movs	r0, r4
   1d3c4:	4b19      	ldr	r3, [pc, #100]	; (1d42c <MQTTConnect+0xc8>)
   1d3c6:	4798      	blx	r3
   1d3c8:	2802      	cmp	r0, #2
   1d3ca:	d11d      	bne.n	1d408 <MQTTConnect+0xa4>
        unsigned char connack_rc = 255;
   1d3cc:	466b      	mov	r3, sp
   1d3ce:	1d99      	adds	r1, r3, #6
   1d3d0:	23ff      	movs	r3, #255	; 0xff
   1d3d2:	700b      	strb	r3, [r1, #0]
        unsigned char sessionPresent = 0;
   1d3d4:	466b      	mov	r3, sp
   1d3d6:	1dd8      	adds	r0, r3, #7
   1d3d8:	2300      	movs	r3, #0
   1d3da:	7003      	strb	r3, [r0, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   1d3dc:	68e3      	ldr	r3, [r4, #12]
   1d3de:	6962      	ldr	r2, [r4, #20]
   1d3e0:	4d13      	ldr	r5, [pc, #76]	; (1d430 <MQTTConnect+0xcc>)
   1d3e2:	47a8      	blx	r5
   1d3e4:	2801      	cmp	r0, #1
   1d3e6:	d002      	beq.n	1d3ee <MQTTConnect+0x8a>
            rc = FAILURE;
   1d3e8:	2001      	movs	r0, #1
   1d3ea:	4240      	negs	r0, r0
   1d3ec:	e7e3      	b.n	1d3b6 <MQTTConnect+0x52>
            rc = connack_rc;
   1d3ee:	466b      	mov	r3, sp
   1d3f0:	7998      	ldrb	r0, [r3, #6]
    if (rc == SUCCESS)
   1d3f2:	2800      	cmp	r0, #0
   1d3f4:	d1df      	bne.n	1d3b6 <MQTTConnect+0x52>
        c->isconnected = 1;
   1d3f6:	2301      	movs	r3, #1
   1d3f8:	6223      	str	r3, [r4, #32]
    return rc;
   1d3fa:	e7dc      	b.n	1d3b6 <MQTTConnect+0x52>
    int rc = FAILURE;
   1d3fc:	2001      	movs	r0, #1
   1d3fe:	4240      	negs	r0, r0
   1d400:	e7d9      	b.n	1d3b6 <MQTTConnect+0x52>
   1d402:	2001      	movs	r0, #1
   1d404:	4240      	negs	r0, r0
   1d406:	e7d6      	b.n	1d3b6 <MQTTConnect+0x52>
        rc = FAILURE;
   1d408:	2001      	movs	r0, #1
   1d40a:	4240      	negs	r0, r0
   1d40c:	e7d3      	b.n	1d3b6 <MQTTConnect+0x52>
   1d40e:	46c0      	nop			; (mov r8, r8)
   1d410:	00022dd8 	.word	0x00022dd8
   1d414:	0001fbe5 	.word	0x0001fbe5
   1d418:	0001d89d 	.word	0x0001d89d
   1d41c:	0001d861 	.word	0x0001d861
   1d420:	0001d875 	.word	0x0001d875
   1d424:	0001dc75 	.word	0x0001dc75
   1d428:	0001cee1 	.word	0x0001cee1
   1d42c:	0001d32d 	.word	0x0001d32d
   1d430:	0001ddbd 	.word	0x0001ddbd

0001d434 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   1d434:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d436:	b091      	sub	sp, #68	; 0x44
   1d438:	0004      	movs	r4, r0
   1d43a:	000f      	movs	r7, r1
   1d43c:	9305      	str	r3, [sp, #20]
    int rc = FAILURE;  
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
   1d43e:	2300      	movs	r3, #0
   1d440:	930c      	str	r3, [sp, #48]	; 0x30
   1d442:	930d      	str	r3, [sp, #52]	; 0x34
	int Qoss = (int) qos;
   1d444:	920a      	str	r2, [sp, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
   1d446:	910b      	str	r1, [sp, #44]	; 0x2c
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   1d448:	6a03      	ldr	r3, [r0, #32]
   1d44a:	2b00      	cmp	r3, #0
   1d44c:	d05c      	beq.n	1d508 <MQTTSubscribe+0xd4>
		goto exit;

    TimerInit(&timer);
   1d44e:	a80e      	add	r0, sp, #56	; 0x38
   1d450:	4b32      	ldr	r3, [pc, #200]	; (1d51c <MQTTSubscribe+0xe8>)
   1d452:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   1d454:	6861      	ldr	r1, [r4, #4]
   1d456:	a80e      	add	r0, sp, #56	; 0x38
   1d458:	4b31      	ldr	r3, [pc, #196]	; (1d520 <MQTTSubscribe+0xec>)
   1d45a:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   1d45c:	6920      	ldr	r0, [r4, #16]
   1d45e:	68a1      	ldr	r1, [r4, #8]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   1d460:	6823      	ldr	r3, [r4, #0]
   1d462:	4a30      	ldr	r2, [pc, #192]	; (1d524 <MQTTSubscribe+0xf0>)
   1d464:	4293      	cmp	r3, r2
   1d466:	d017      	beq.n	1d498 <MQTTSubscribe+0x64>
   1d468:	3301      	adds	r3, #1
   1d46a:	6023      	str	r3, [r4, #0]
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   1d46c:	b29b      	uxth	r3, r3
   1d46e:	aa0a      	add	r2, sp, #40	; 0x28
   1d470:	9202      	str	r2, [sp, #8]
   1d472:	aa0b      	add	r2, sp, #44	; 0x2c
   1d474:	9201      	str	r2, [sp, #4]
   1d476:	2201      	movs	r2, #1
   1d478:	9200      	str	r2, [sp, #0]
   1d47a:	2200      	movs	r2, #0
   1d47c:	4e2a      	ldr	r6, [pc, #168]	; (1d528 <MQTTSubscribe+0xf4>)
   1d47e:	47b0      	blx	r6
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   1d480:	2800      	cmp	r0, #0
   1d482:	dd44      	ble.n	1d50e <MQTTSubscribe+0xda>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   1d484:	aa0e      	add	r2, sp, #56	; 0x38
   1d486:	0001      	movs	r1, r0
   1d488:	0020      	movs	r0, r4
   1d48a:	4b28      	ldr	r3, [pc, #160]	; (1d52c <MQTTSubscribe+0xf8>)
   1d48c:	4798      	blx	r3
   1d48e:	1e06      	subs	r6, r0, #0
   1d490:	d004      	beq.n	1d49c <MQTTSubscribe+0x68>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   1d492:	0030      	movs	r0, r6
   1d494:	b011      	add	sp, #68	; 0x44
   1d496:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   1d498:	2301      	movs	r3, #1
   1d49a:	e7e6      	b.n	1d46a <MQTTSubscribe+0x36>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   1d49c:	aa0e      	add	r2, sp, #56	; 0x38
   1d49e:	2109      	movs	r1, #9
   1d4a0:	0020      	movs	r0, r4
   1d4a2:	4b23      	ldr	r3, [pc, #140]	; (1d530 <MQTTSubscribe+0xfc>)
   1d4a4:	4798      	blx	r3
   1d4a6:	2809      	cmp	r0, #9
   1d4a8:	d134      	bne.n	1d514 <MQTTSubscribe+0xe0>
        int count = 0, grantedQoS = -1;
   1d4aa:	2300      	movs	r3, #0
   1d4ac:	9308      	str	r3, [sp, #32]
   1d4ae:	3b01      	subs	r3, #1
   1d4b0:	9309      	str	r3, [sp, #36]	; 0x24
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   1d4b2:	68e3      	ldr	r3, [r4, #12]
   1d4b4:	9301      	str	r3, [sp, #4]
   1d4b6:	6963      	ldr	r3, [r4, #20]
   1d4b8:	9300      	str	r3, [sp, #0]
   1d4ba:	ab09      	add	r3, sp, #36	; 0x24
   1d4bc:	aa08      	add	r2, sp, #32
   1d4be:	2101      	movs	r1, #1
   1d4c0:	300d      	adds	r0, #13
   1d4c2:	ad02      	add	r5, sp, #8
   1d4c4:	46ac      	mov	ip, r5
   1d4c6:	4460      	add	r0, ip
   1d4c8:	4d1a      	ldr	r5, [pc, #104]	; (1d534 <MQTTSubscribe+0x100>)
   1d4ca:	47a8      	blx	r5
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   1d4cc:	0031      	movs	r1, r6
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   1d4ce:	2801      	cmp	r0, #1
   1d4d0:	d00e      	beq.n	1d4f0 <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
   1d4d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d4d4:	2b00      	cmp	r3, #0
   1d4d6:	d010      	beq.n	1d4fa <MQTTSubscribe+0xc6>
   1d4d8:	0022      	movs	r2, r4
   1d4da:	322c      	adds	r2, #44	; 0x2c
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1d4dc:	2301      	movs	r3, #1
                if (c->messageHandlers[i].topicFilter == 0)
   1d4de:	6810      	ldr	r0, [r2, #0]
   1d4e0:	2800      	cmp	r0, #0
   1d4e2:	d00b      	beq.n	1d4fc <MQTTSubscribe+0xc8>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1d4e4:	3301      	adds	r3, #1
   1d4e6:	3208      	adds	r2, #8
   1d4e8:	2b05      	cmp	r3, #5
   1d4ea:	d1f8      	bne.n	1d4de <MQTTSubscribe+0xaa>
   1d4ec:	000e      	movs	r6, r1
   1d4ee:	e7d0      	b.n	1d492 <MQTTSubscribe+0x5e>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   1d4f0:	9909      	ldr	r1, [sp, #36]	; 0x24
        if (rc != 0x80)
   1d4f2:	2980      	cmp	r1, #128	; 0x80
   1d4f4:	d1ed      	bne.n	1d4d2 <MQTTSubscribe+0x9e>
   1d4f6:	000e      	movs	r6, r1
   1d4f8:	e7cb      	b.n	1d492 <MQTTSubscribe+0x5e>
                if (c->messageHandlers[i].topicFilter == 0)
   1d4fa:	0033      	movs	r3, r6
   1d4fc:	00db      	lsls	r3, r3, #3
   1d4fe:	18e4      	adds	r4, r4, r3
                    c->messageHandlers[i].topicFilter = topicFilter;
   1d500:	6267      	str	r7, [r4, #36]	; 0x24
                    c->messageHandlers[i].fp = msgHandler;
   1d502:	9b05      	ldr	r3, [sp, #20]
   1d504:	62a3      	str	r3, [r4, #40]	; 0x28
                    break;
   1d506:	e7c4      	b.n	1d492 <MQTTSubscribe+0x5e>
    int rc = FAILURE;  
   1d508:	2601      	movs	r6, #1
   1d50a:	4276      	negs	r6, r6
   1d50c:	e7c1      	b.n	1d492 <MQTTSubscribe+0x5e>
   1d50e:	2601      	movs	r6, #1
   1d510:	4276      	negs	r6, r6
   1d512:	e7be      	b.n	1d492 <MQTTSubscribe+0x5e>
        rc = FAILURE;
   1d514:	2601      	movs	r6, #1
   1d516:	4276      	negs	r6, r6
    return rc;
   1d518:	e7bb      	b.n	1d492 <MQTTSubscribe+0x5e>
   1d51a:	46c0      	nop			; (mov r8, r8)
   1d51c:	0001d89d 	.word	0x0001d89d
   1d520:	0001d861 	.word	0x0001d861
   1d524:	0000ffff 	.word	0x0000ffff
   1d528:	0001e33d 	.word	0x0001e33d
   1d52c:	0001cee1 	.word	0x0001cee1
   1d530:	0001d32d 	.word	0x0001d32d
   1d534:	0001e3f1 	.word	0x0001e3f1

0001d538 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   1d538:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d53a:	b08f      	sub	sp, #60	; 0x3c
   1d53c:	0005      	movs	r5, r0
   1d53e:	0014      	movs	r4, r2
    int rc = FAILURE;
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   1d540:	2300      	movs	r3, #0
   1d542:	930a      	str	r3, [sp, #40]	; 0x28
   1d544:	930b      	str	r3, [sp, #44]	; 0x2c
    topic.cstring = (char *)topicName;
   1d546:	9109      	str	r1, [sp, #36]	; 0x24
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   1d548:	6a03      	ldr	r3, [r0, #32]
   1d54a:	2b00      	cmp	r3, #0
   1d54c:	d062      	beq.n	1d614 <MQTTPublish+0xdc>
		goto exit;

    TimerInit(&timer);
   1d54e:	a80c      	add	r0, sp, #48	; 0x30
   1d550:	4b36      	ldr	r3, [pc, #216]	; (1d62c <MQTTPublish+0xf4>)
   1d552:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   1d554:	6869      	ldr	r1, [r5, #4]
   1d556:	a80c      	add	r0, sp, #48	; 0x30
   1d558:	4b35      	ldr	r3, [pc, #212]	; (1d630 <MQTTPublish+0xf8>)
   1d55a:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   1d55c:	7823      	ldrb	r3, [r4, #0]
   1d55e:	3b01      	subs	r3, #1
   1d560:	2b01      	cmp	r3, #1
   1d562:	d921      	bls.n	1d5a8 <MQTTPublish+0x70>
        message->id = getNextPacketId(c);
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   1d564:	7823      	ldrb	r3, [r4, #0]
   1d566:	68e2      	ldr	r2, [r4, #12]
   1d568:	9206      	str	r2, [sp, #24]
   1d56a:	68a2      	ldr	r2, [r4, #8]
   1d56c:	9205      	str	r2, [sp, #20]
   1d56e:	aa09      	add	r2, sp, #36	; 0x24
   1d570:	a902      	add	r1, sp, #8
   1d572:	cac1      	ldmia	r2!, {r0, r6, r7}
   1d574:	c1c1      	stmia	r1!, {r0, r6, r7}
   1d576:	88a2      	ldrh	r2, [r4, #4]
   1d578:	9201      	str	r2, [sp, #4]
   1d57a:	7862      	ldrb	r2, [r4, #1]
   1d57c:	9200      	str	r2, [sp, #0]
   1d57e:	2200      	movs	r2, #0
   1d580:	68a9      	ldr	r1, [r5, #8]
   1d582:	6928      	ldr	r0, [r5, #16]
   1d584:	4e2b      	ldr	r6, [pc, #172]	; (1d634 <MQTTPublish+0xfc>)
   1d586:	47b0      	blx	r6
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
   1d588:	2800      	cmp	r0, #0
   1d58a:	dd46      	ble.n	1d61a <MQTTPublish+0xe2>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   1d58c:	aa0c      	add	r2, sp, #48	; 0x30
   1d58e:	0001      	movs	r1, r0
   1d590:	0028      	movs	r0, r5
   1d592:	4b29      	ldr	r3, [pc, #164]	; (1d638 <MQTTPublish+0x100>)
   1d594:	4798      	blx	r3
   1d596:	2800      	cmp	r0, #0
   1d598:	d104      	bne.n	1d5a4 <MQTTPublish+0x6c>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   1d59a:	7823      	ldrb	r3, [r4, #0]
   1d59c:	2b01      	cmp	r3, #1
   1d59e:	d00d      	beq.n	1d5bc <MQTTPublish+0x84>
                rc = FAILURE;
        }
        else
            rc = FAILURE;
    }
    else if (message->qos == QOS2)
   1d5a0:	2b02      	cmp	r3, #2
   1d5a2:	d021      	beq.n	1d5e8 <MQTTPublish+0xb0>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   1d5a4:	b00f      	add	sp, #60	; 0x3c
   1d5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   1d5a8:	682b      	ldr	r3, [r5, #0]
   1d5aa:	4a24      	ldr	r2, [pc, #144]	; (1d63c <MQTTPublish+0x104>)
   1d5ac:	4293      	cmp	r3, r2
   1d5ae:	d003      	beq.n	1d5b8 <MQTTPublish+0x80>
   1d5b0:	3301      	adds	r3, #1
   1d5b2:	602b      	str	r3, [r5, #0]
        message->id = getNextPacketId(c);
   1d5b4:	80a3      	strh	r3, [r4, #4]
   1d5b6:	e7d5      	b.n	1d564 <MQTTPublish+0x2c>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   1d5b8:	2301      	movs	r3, #1
   1d5ba:	e7fa      	b.n	1d5b2 <MQTTPublish+0x7a>
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   1d5bc:	aa0c      	add	r2, sp, #48	; 0x30
   1d5be:	2104      	movs	r1, #4
   1d5c0:	0028      	movs	r0, r5
   1d5c2:	4b1f      	ldr	r3, [pc, #124]	; (1d640 <MQTTPublish+0x108>)
   1d5c4:	4798      	blx	r3
   1d5c6:	2804      	cmp	r0, #4
   1d5c8:	d12a      	bne.n	1d620 <MQTTPublish+0xe8>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1d5ca:	696b      	ldr	r3, [r5, #20]
   1d5cc:	68ea      	ldr	r2, [r5, #12]
   1d5ce:	9200      	str	r2, [sp, #0]
   1d5d0:	2222      	movs	r2, #34	; 0x22
   1d5d2:	446a      	add	r2, sp
   1d5d4:	a908      	add	r1, sp, #32
   1d5d6:	301d      	adds	r0, #29
   1d5d8:	4468      	add	r0, sp
   1d5da:	4c1a      	ldr	r4, [pc, #104]	; (1d644 <MQTTPublish+0x10c>)
   1d5dc:	47a0      	blx	r4
   1d5de:	3801      	subs	r0, #1
   1d5e0:	1e43      	subs	r3, r0, #1
   1d5e2:	4198      	sbcs	r0, r3
   1d5e4:	4240      	negs	r0, r0
   1d5e6:	e7dd      	b.n	1d5a4 <MQTTPublish+0x6c>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   1d5e8:	aa0c      	add	r2, sp, #48	; 0x30
   1d5ea:	2107      	movs	r1, #7
   1d5ec:	0028      	movs	r0, r5
   1d5ee:	4b14      	ldr	r3, [pc, #80]	; (1d640 <MQTTPublish+0x108>)
   1d5f0:	4798      	blx	r3
   1d5f2:	2807      	cmp	r0, #7
   1d5f4:	d117      	bne.n	1d626 <MQTTPublish+0xee>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1d5f6:	696b      	ldr	r3, [r5, #20]
   1d5f8:	68ea      	ldr	r2, [r5, #12]
   1d5fa:	9200      	str	r2, [sp, #0]
   1d5fc:	2222      	movs	r2, #34	; 0x22
   1d5fe:	446a      	add	r2, sp
   1d600:	a908      	add	r1, sp, #32
   1d602:	301a      	adds	r0, #26
   1d604:	4468      	add	r0, sp
   1d606:	4c0f      	ldr	r4, [pc, #60]	; (1d644 <MQTTPublish+0x10c>)
   1d608:	47a0      	blx	r4
   1d60a:	3801      	subs	r0, #1
   1d60c:	1e43      	subs	r3, r0, #1
   1d60e:	4198      	sbcs	r0, r3
   1d610:	4240      	negs	r0, r0
   1d612:	e7c7      	b.n	1d5a4 <MQTTPublish+0x6c>
    int rc = FAILURE;
   1d614:	2001      	movs	r0, #1
   1d616:	4240      	negs	r0, r0
   1d618:	e7c4      	b.n	1d5a4 <MQTTPublish+0x6c>
   1d61a:	2001      	movs	r0, #1
   1d61c:	4240      	negs	r0, r0
   1d61e:	e7c1      	b.n	1d5a4 <MQTTPublish+0x6c>
            rc = FAILURE;
   1d620:	2001      	movs	r0, #1
   1d622:	4240      	negs	r0, r0
   1d624:	e7be      	b.n	1d5a4 <MQTTPublish+0x6c>
            rc = FAILURE;
   1d626:	2001      	movs	r0, #1
   1d628:	4240      	negs	r0, r0
    return rc;
   1d62a:	e7bb      	b.n	1d5a4 <MQTTPublish+0x6c>
   1d62c:	0001d89d 	.word	0x0001d89d
   1d630:	0001d861 	.word	0x0001d861
   1d634:	0001e1dd 	.word	0x0001e1dd
   1d638:	0001cee1 	.word	0x0001cee1
   1d63c:	0000ffff 	.word	0x0000ffff
   1d640:	0001d32d 	.word	0x0001d32d
   1d644:	0001df01 	.word	0x0001df01

0001d648 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   1d648:	b510      	push	{r4, lr}
   1d64a:	b082      	sub	sp, #8
   1d64c:	0004      	movs	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   1d64e:	4668      	mov	r0, sp
   1d650:	4b0b      	ldr	r3, [pc, #44]	; (1d680 <MQTTDisconnect+0x38>)
   1d652:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   1d654:	6861      	ldr	r1, [r4, #4]
   1d656:	4668      	mov	r0, sp
   1d658:	4b0a      	ldr	r3, [pc, #40]	; (1d684 <MQTTDisconnect+0x3c>)
   1d65a:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   1d65c:	68a1      	ldr	r1, [r4, #8]
   1d65e:	6920      	ldr	r0, [r4, #16]
   1d660:	4b09      	ldr	r3, [pc, #36]	; (1d688 <MQTTDisconnect+0x40>)
   1d662:	4798      	blx	r3
    if (len > 0)
   1d664:	2800      	cmp	r0, #0
   1d666:	dd08      	ble.n	1d67a <MQTTDisconnect+0x32>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   1d668:	466a      	mov	r2, sp
   1d66a:	0001      	movs	r1, r0
   1d66c:	0020      	movs	r0, r4
   1d66e:	4b07      	ldr	r3, [pc, #28]	; (1d68c <MQTTDisconnect+0x44>)
   1d670:	4798      	blx	r3
        
    c->isconnected = 0;
   1d672:	2300      	movs	r3, #0
   1d674:	6223      	str	r3, [r4, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   1d676:	b002      	add	sp, #8
   1d678:	bd10      	pop	{r4, pc}
    int rc = FAILURE;
   1d67a:	2001      	movs	r0, #1
   1d67c:	4240      	negs	r0, r0
   1d67e:	e7f8      	b.n	1d672 <MQTTDisconnect+0x2a>
   1d680:	0001d89d 	.word	0x0001d89d
   1d684:	0001d861 	.word	0x0001d861
   1d688:	0001de49 	.word	0x0001de49
   1d68c:	0001cee1 	.word	0x0001cee1

0001d690 <WINC1500_disconnect>:
  //return gu32MQTTBrokerSendLen;
  return len;
}


static void WINC1500_disconnect(Network* n) {
   1d690:	b510      	push	{r4, lr}
   1d692:	0004      	movs	r4, r0
	close(n->socket);
   1d694:	2000      	movs	r0, #0
   1d696:	5620      	ldrsb	r0, [r4, r0]
   1d698:	4b04      	ldr	r3, [pc, #16]	; (1d6ac <WINC1500_disconnect+0x1c>)
   1d69a:	4798      	blx	r3
	n->socket=-1;
   1d69c:	2301      	movs	r3, #1
   1d69e:	425b      	negs	r3, r3
   1d6a0:	6023      	str	r3, [r4, #0]
	gbMQTTBrokerConnected=false;
   1d6a2:	2200      	movs	r2, #0
   1d6a4:	4b02      	ldr	r3, [pc, #8]	; (1d6b0 <WINC1500_disconnect+0x20>)
   1d6a6:	701a      	strb	r2, [r3, #0]
}
   1d6a8:	bd10      	pop	{r4, pc}
   1d6aa:	46c0      	nop			; (mov r8, r8)
   1d6ac:	00018b9d 	.word	0x00018b9d
   1d6b0:	2000335a 	.word	0x2000335a

0001d6b4 <WINC1500_write>:
static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   1d6b4:	b570      	push	{r4, r5, r6, lr}
   1d6b6:	0016      	movs	r6, r2
  gbMQTTBrokerSendDone=false;
   1d6b8:	2200      	movs	r2, #0
   1d6ba:	4b0d      	ldr	r3, [pc, #52]	; (1d6f0 <WINC1500_write+0x3c>)
   1d6bc:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   1d6be:	b2b2      	uxth	r2, r6
   1d6c0:	7800      	ldrb	r0, [r0, #0]
   1d6c2:	b240      	sxtb	r0, r0
   1d6c4:	2300      	movs	r3, #0
   1d6c6:	4c0b      	ldr	r4, [pc, #44]	; (1d6f4 <WINC1500_write+0x40>)
   1d6c8:	47a0      	blx	r4
   1d6ca:	2800      	cmp	r0, #0
   1d6cc:	d10c      	bne.n	1d6e8 <WINC1500_write+0x34>
  while (false==gbMQTTBrokerSendDone){
   1d6ce:	4b08      	ldr	r3, [pc, #32]	; (1d6f0 <WINC1500_write+0x3c>)
   1d6d0:	781b      	ldrb	r3, [r3, #0]
   1d6d2:	2b00      	cmp	r3, #0
   1d6d4:	d106      	bne.n	1d6e4 <WINC1500_write+0x30>
	  m2m_wifi_handle_events(NULL);
   1d6d6:	4d08      	ldr	r5, [pc, #32]	; (1d6f8 <WINC1500_write+0x44>)
  while (false==gbMQTTBrokerSendDone){
   1d6d8:	4c05      	ldr	r4, [pc, #20]	; (1d6f0 <WINC1500_write+0x3c>)
	  m2m_wifi_handle_events(NULL);
   1d6da:	2000      	movs	r0, #0
   1d6dc:	47a8      	blx	r5
  while (false==gbMQTTBrokerSendDone){
   1d6de:	7823      	ldrb	r3, [r4, #0]
   1d6e0:	2b00      	cmp	r3, #0
   1d6e2:	d0fa      	beq.n	1d6da <WINC1500_write+0x26>
}
   1d6e4:	0030      	movs	r0, r6
   1d6e6:	bd70      	pop	{r4, r5, r6, pc}
	  return -1;
   1d6e8:	2601      	movs	r6, #1
   1d6ea:	4276      	negs	r6, r6
   1d6ec:	e7fa      	b.n	1d6e4 <WINC1500_write+0x30>
   1d6ee:	46c0      	nop			; (mov r8, r8)
   1d6f0:	2000335d 	.word	0x2000335d
   1d6f4:	00018a71 	.word	0x00018a71
   1d6f8:	00016a89 	.word	0x00016a89

0001d6fc <WINC1500_read>:
static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   1d6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d6fe:	b083      	sub	sp, #12
   1d700:	9101      	str	r1, [sp, #4]
   1d702:	0014      	movs	r4, r2
  if(0==timeout_ms) timeout_ms=10;
   1d704:	2b00      	cmp	r3, #0
   1d706:	d100      	bne.n	1d70a <WINC1500_read+0xe>
   1d708:	330a      	adds	r3, #10
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   1d70a:	4a22      	ldr	r2, [pc, #136]	; (1d794 <WINC1500_read+0x98>)
   1d70c:	6812      	ldr	r2, [r2, #0]
   1d70e:	2a00      	cmp	r2, #0
   1d710:	d013      	beq.n	1d73a <WINC1500_read+0x3e>
  if(len>(int)gu32MQTTRxFIFOLen){
   1d712:	4b20      	ldr	r3, [pc, #128]	; (1d794 <WINC1500_read+0x98>)
   1d714:	681d      	ldr	r5, [r3, #0]
   1d716:	42a5      	cmp	r5, r4
   1d718:	db39      	blt.n	1d78e <WINC1500_read+0x92>
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   1d71a:	4e1f      	ldr	r6, [pc, #124]	; (1d798 <WINC1500_read+0x9c>)
   1d71c:	6837      	ldr	r7, [r6, #0]
   1d71e:	491f      	ldr	r1, [pc, #124]	; (1d79c <WINC1500_read+0xa0>)
   1d720:	19c9      	adds	r1, r1, r7
   1d722:	0022      	movs	r2, r4
   1d724:	9801      	ldr	r0, [sp, #4]
   1d726:	4b1e      	ldr	r3, [pc, #120]	; (1d7a0 <WINC1500_read+0xa4>)
   1d728:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   1d72a:	1b2d      	subs	r5, r5, r4
   1d72c:	4b19      	ldr	r3, [pc, #100]	; (1d794 <WINC1500_read+0x98>)
   1d72e:	601d      	str	r5, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   1d730:	193f      	adds	r7, r7, r4
   1d732:	6037      	str	r7, [r6, #0]
  return len;
   1d734:	0020      	movs	r0, r4
}
   1d736:	b003      	add	sp, #12
   1d738:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  gbMQTTBrokerRecvDone=false;
   1d73a:	2100      	movs	r1, #0
   1d73c:	4a19      	ldr	r2, [pc, #100]	; (1d7a4 <WINC1500_read+0xa8>)
   1d73e:	7011      	strb	r1, [r2, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   1d740:	7800      	ldrb	r0, [r0, #0]
   1d742:	b240      	sxtb	r0, r0
   1d744:	2280      	movs	r2, #128	; 0x80
   1d746:	0052      	lsls	r2, r2, #1
   1d748:	4914      	ldr	r1, [pc, #80]	; (1d79c <WINC1500_read+0xa0>)
   1d74a:	4d17      	ldr	r5, [pc, #92]	; (1d7a8 <WINC1500_read+0xac>)
   1d74c:	47a8      	blx	r5
   1d74e:	2800      	cmp	r0, #0
   1d750:	d11a      	bne.n	1d788 <WINC1500_read+0x8c>
	  while (false==gbMQTTBrokerRecvDone){
   1d752:	4b14      	ldr	r3, [pc, #80]	; (1d7a4 <WINC1500_read+0xa8>)
   1d754:	781b      	ldrb	r3, [r3, #0]
   1d756:	2b00      	cmp	r3, #0
   1d758:	d106      	bne.n	1d768 <WINC1500_read+0x6c>
		  m2m_wifi_handle_events(NULL);
   1d75a:	4f14      	ldr	r7, [pc, #80]	; (1d7ac <WINC1500_read+0xb0>)
	  while (false==gbMQTTBrokerRecvDone){
   1d75c:	4d11      	ldr	r5, [pc, #68]	; (1d7a4 <WINC1500_read+0xa8>)
		  m2m_wifi_handle_events(NULL);
   1d75e:	2000      	movs	r0, #0
   1d760:	47b8      	blx	r7
	  while (false==gbMQTTBrokerRecvDone){
   1d762:	782b      	ldrb	r3, [r5, #0]
   1d764:	2b00      	cmp	r3, #0
   1d766:	d0fa      	beq.n	1d75e <WINC1500_read+0x62>
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   1d768:	4b11      	ldr	r3, [pc, #68]	; (1d7b0 <WINC1500_read+0xb4>)
   1d76a:	6818      	ldr	r0, [r3, #0]
   1d76c:	2800      	cmp	r0, #0
   1d76e:	dd05      	ble.n	1d77c <WINC1500_read+0x80>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   1d770:	4b08      	ldr	r3, [pc, #32]	; (1d794 <WINC1500_read+0x98>)
   1d772:	6018      	str	r0, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   1d774:	2200      	movs	r2, #0
   1d776:	4b08      	ldr	r3, [pc, #32]	; (1d798 <WINC1500_read+0x9c>)
   1d778:	601a      	str	r2, [r3, #0]
   1d77a:	e7ca      	b.n	1d712 <WINC1500_read+0x16>
		  gu32MQTTRxFIFOLen=0;
   1d77c:	2300      	movs	r3, #0
   1d77e:	4a05      	ldr	r2, [pc, #20]	; (1d794 <WINC1500_read+0x98>)
   1d780:	6013      	str	r3, [r2, #0]
		  gu32MQTTRxFIFOPtr=0;
   1d782:	4a05      	ldr	r2, [pc, #20]	; (1d798 <WINC1500_read+0x9c>)
   1d784:	6013      	str	r3, [r2, #0]
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   1d786:	e7d6      	b.n	1d736 <WINC1500_read+0x3a>
		  return -1;
   1d788:	2001      	movs	r0, #1
   1d78a:	4240      	negs	r0, r0
   1d78c:	e7d3      	b.n	1d736 <WINC1500_read+0x3a>
	  return -1;
   1d78e:	2001      	movs	r0, #1
   1d790:	4240      	negs	r0, r0
   1d792:	e7d0      	b.n	1d736 <WINC1500_read+0x3a>
   1d794:	2000346c 	.word	0x2000346c
   1d798:	20003470 	.word	0x20003470
   1d79c:	20003360 	.word	0x20003360
   1d7a0:	0001fbe5 	.word	0x0001fbe5
   1d7a4:	2000335c 	.word	0x2000335c
   1d7a8:	00018b09 	.word	0x00018b09
   1d7ac:	00016a89 	.word	0x00016a89
   1d7b0:	20003464 	.word	0x20003464

0001d7b4 <dnsResolveCallback>:
{
   1d7b4:	b510      	push	{r4, lr}
   1d7b6:	0002      	movs	r2, r0
   1d7b8:	000c      	movs	r4, r1
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   1d7ba:	4b08      	ldr	r3, [pc, #32]	; (1d7dc <dnsResolveCallback+0x28>)
   1d7bc:	781b      	ldrb	r3, [r3, #0]
   1d7be:	2b00      	cmp	r3, #0
   1d7c0:	d10b      	bne.n	1d7da <dnsResolveCallback+0x26>
   1d7c2:	4b07      	ldr	r3, [pc, #28]	; (1d7e0 <dnsResolveCallback+0x2c>)
   1d7c4:	6818      	ldr	r0, [r3, #0]
   1d7c6:	0011      	movs	r1, r2
   1d7c8:	4b06      	ldr	r3, [pc, #24]	; (1d7e4 <dnsResolveCallback+0x30>)
   1d7ca:	4798      	blx	r3
   1d7cc:	2800      	cmp	r0, #0
   1d7ce:	d104      	bne.n	1d7da <dnsResolveCallback+0x26>
		gi32MQTTBrokerIp = hostIp;
   1d7d0:	4b05      	ldr	r3, [pc, #20]	; (1d7e8 <dnsResolveCallback+0x34>)
   1d7d2:	601c      	str	r4, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   1d7d4:	2201      	movs	r2, #1
   1d7d6:	4b01      	ldr	r3, [pc, #4]	; (1d7dc <dnsResolveCallback+0x28>)
   1d7d8:	701a      	strb	r2, [r3, #0]
}
   1d7da:	bd10      	pop	{r4, pc}
   1d7dc:	2000335b 	.word	0x2000335b
   1d7e0:	20003468 	.word	0x20003468
   1d7e4:	0001ff1d 	.word	0x0001ff1d
   1d7e8:	20003460 	.word	0x20003460

0001d7ec <tcpClientSocketEventHandler>:
{
   1d7ec:	b530      	push	{r4, r5, lr}
   1d7ee:	4b12      	ldr	r3, [pc, #72]	; (1d838 <tcpClientSocketEventHandler+0x4c>)
   1d7f0:	24a8      	movs	r4, #168	; 0xa8
   1d7f2:	00a4      	lsls	r4, r4, #2
   1d7f4:	191d      	adds	r5, r3, r4
   1d7f6:	e002      	b.n	1d7fe <tcpClientSocketEventHandler+0x12>
   1d7f8:	3360      	adds	r3, #96	; 0x60
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1d7fa:	42ab      	cmp	r3, r5
   1d7fc:	d00b      	beq.n	1d816 <tcpClientSocketEventHandler+0x2a>
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   1d7fe:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
   1d800:	2c00      	cmp	r4, #0
   1d802:	d0f9      	beq.n	1d7f8 <tcpClientSocketEventHandler+0xc>
			if(mqttInstance->network.socket == sock)
   1d804:	6a24      	ldr	r4, [r4, #32]
   1d806:	4284      	cmp	r4, r0
   1d808:	d1f6      	bne.n	1d7f8 <tcpClientSocketEventHandler+0xc>
		switch (u8Msg) {
   1d80a:	2906      	cmp	r1, #6
   1d80c:	d00c      	beq.n	1d828 <tcpClientSocketEventHandler+0x3c>
   1d80e:	2907      	cmp	r1, #7
   1d810:	d006      	beq.n	1d820 <tcpClientSocketEventHandler+0x34>
   1d812:	2905      	cmp	r1, #5
   1d814:	d000      	beq.n	1d818 <tcpClientSocketEventHandler+0x2c>
}
   1d816:	bd30      	pop	{r4, r5, pc}
				gbMQTTBrokerConnected=true;
   1d818:	2201      	movs	r2, #1
   1d81a:	4b08      	ldr	r3, [pc, #32]	; (1d83c <tcpClientSocketEventHandler+0x50>)
   1d81c:	701a      	strb	r2, [r3, #0]
			break;
   1d81e:	e7fa      	b.n	1d816 <tcpClientSocketEventHandler+0x2a>
				gbMQTTBrokerSendDone=true;
   1d820:	2201      	movs	r2, #1
   1d822:	4b07      	ldr	r3, [pc, #28]	; (1d840 <tcpClientSocketEventHandler+0x54>)
   1d824:	701a      	strb	r2, [r3, #0]
			break;
   1d826:	e7f6      	b.n	1d816 <tcpClientSocketEventHandler+0x2a>
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   1d828:	2304      	movs	r3, #4
   1d82a:	5ed2      	ldrsh	r2, [r2, r3]
   1d82c:	4b05      	ldr	r3, [pc, #20]	; (1d844 <tcpClientSocketEventHandler+0x58>)
   1d82e:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   1d830:	2201      	movs	r2, #1
   1d832:	4b05      	ldr	r3, [pc, #20]	; (1d848 <tcpClientSocketEventHandler+0x5c>)
   1d834:	701a      	strb	r2, [r3, #0]
}
   1d836:	e7ee      	b.n	1d816 <tcpClientSocketEventHandler+0x2a>
   1d838:	20003474 	.word	0x20003474
   1d83c:	2000335a 	.word	0x2000335a
   1d840:	2000335d 	.word	0x2000335d
   1d844:	20003464 	.word	0x20003464
   1d848:	2000335c 	.word	0x2000335c

0001d84c <TimerIsExpired>:
char TimerIsExpired(Timer* timer) {
   1d84c:	b510      	push	{r4, lr}
	long left = timer->end_time - xTaskGetTickCount();
   1d84e:	6844      	ldr	r4, [r0, #4]
   1d850:	4b02      	ldr	r3, [pc, #8]	; (1d85c <TimerIsExpired+0x10>)
   1d852:	4798      	blx	r3
   1d854:	1a20      	subs	r0, r4, r0
	return (left < 0);
   1d856:	0fc0      	lsrs	r0, r0, #31
}
   1d858:	bd10      	pop	{r4, pc}
   1d85a:	46c0      	nop			; (mov r8, r8)
   1d85c:	00013c05 	.word	0x00013c05

0001d860 <TimerCountdownMS>:
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
   1d860:	b570      	push	{r4, r5, r6, lr}
   1d862:	0004      	movs	r4, r0
   1d864:	000d      	movs	r5, r1
	timer->end_time = xTaskGetTickCount() + timeout;
   1d866:	4b02      	ldr	r3, [pc, #8]	; (1d870 <TimerCountdownMS+0x10>)
   1d868:	4798      	blx	r3
   1d86a:	1940      	adds	r0, r0, r5
   1d86c:	6060      	str	r0, [r4, #4]
}
   1d86e:	bd70      	pop	{r4, r5, r6, pc}
   1d870:	00013c05 	.word	0x00013c05

0001d874 <TimerCountdown>:
void TimerCountdown(Timer* timer, unsigned int timeout) {
   1d874:	b510      	push	{r4, lr}
   1d876:	0004      	movs	r4, r0
	timer->end_time = xTaskGetTickCount(); + (timeout * 1000);
   1d878:	4b01      	ldr	r3, [pc, #4]	; (1d880 <TimerCountdown+0xc>)
   1d87a:	4798      	blx	r3
   1d87c:	6060      	str	r0, [r4, #4]
}
   1d87e:	bd10      	pop	{r4, pc}
   1d880:	00013c05 	.word	0x00013c05

0001d884 <TimerLeftMS>:
int TimerLeftMS(Timer* timer) {
   1d884:	b510      	push	{r4, lr}
	long left = timer->end_time - xTaskGetTickCount();
   1d886:	6844      	ldr	r4, [r0, #4]
   1d888:	4b03      	ldr	r3, [pc, #12]	; (1d898 <TimerLeftMS+0x14>)
   1d88a:	4798      	blx	r3
   1d88c:	1a20      	subs	r0, r4, r0
	return (left < 0) ? 0 : left;
   1d88e:	43c3      	mvns	r3, r0
   1d890:	17db      	asrs	r3, r3, #31
   1d892:	4018      	ands	r0, r3
}
   1d894:	bd10      	pop	{r4, pc}
   1d896:	46c0      	nop			; (mov r8, r8)
   1d898:	00013c05 	.word	0x00013c05

0001d89c <TimerInit>:
	timer->end_time = 0;
   1d89c:	2300      	movs	r3, #0
   1d89e:	6043      	str	r3, [r0, #4]
}
   1d8a0:	4770      	bx	lr
	...

0001d8a4 <NetworkInit>:


void NetworkInit(Network* n) {
	n->socket = -1;
   1d8a4:	2301      	movs	r3, #1
   1d8a6:	425b      	negs	r3, r3
   1d8a8:	6003      	str	r3, [r0, #0]
	n->mqttread = WINC1500_read;
   1d8aa:	4b03      	ldr	r3, [pc, #12]	; (1d8b8 <NetworkInit+0x14>)
   1d8ac:	6083      	str	r3, [r0, #8]
	n->mqttwrite = WINC1500_write;
   1d8ae:	4b03      	ldr	r3, [pc, #12]	; (1d8bc <NetworkInit+0x18>)
   1d8b0:	60c3      	str	r3, [r0, #12]
	n->disconnect = WINC1500_disconnect;
   1d8b2:	4b03      	ldr	r3, [pc, #12]	; (1d8c0 <NetworkInit+0x1c>)
   1d8b4:	6103      	str	r3, [r0, #16]
}
   1d8b6:	4770      	bx	lr
   1d8b8:	0001d6fd 	.word	0x0001d6fd
   1d8bc:	0001d6b5 	.word	0x0001d6b5
   1d8c0:	0001d691 	.word	0x0001d691

0001d8c4 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   1d8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d8c6:	b087      	sub	sp, #28
   1d8c8:	0006      	movs	r6, r0
   1d8ca:	0015      	movs	r5, r2
   1d8cc:	9301      	str	r3, [sp, #4]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   1d8ce:	4c25      	ldr	r4, [pc, #148]	; (1d964 <ConnectNetwork+0xa0>)
   1d8d0:	2300      	movs	r3, #0
   1d8d2:	7023      	strb	r3, [r4, #0]
  gpcHostAddr = addr;
   1d8d4:	4b24      	ldr	r3, [pc, #144]	; (1d968 <ConnectNetwork+0xa4>)
   1d8d6:	6019      	str	r1, [r3, #0]
  gethostbyname((uint8*)addr);
   1d8d8:	0008      	movs	r0, r1
   1d8da:	4b24      	ldr	r3, [pc, #144]	; (1d96c <ConnectNetwork+0xa8>)
   1d8dc:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   1d8de:	7823      	ldrb	r3, [r4, #0]
   1d8e0:	2b00      	cmp	r3, #0
   1d8e2:	d106      	bne.n	1d8f2 <ConnectNetwork+0x2e>
	  m2m_wifi_handle_events(NULL);
   1d8e4:	4f22      	ldr	r7, [pc, #136]	; (1d970 <ConnectNetwork+0xac>)
  while (false==gbMQTTBrokerIpresolved){
   1d8e6:	4c1f      	ldr	r4, [pc, #124]	; (1d964 <ConnectNetwork+0xa0>)
	  m2m_wifi_handle_events(NULL);
   1d8e8:	2000      	movs	r0, #0
   1d8ea:	47b8      	blx	r7
  while (false==gbMQTTBrokerIpresolved){
   1d8ec:	7823      	ldrb	r3, [r4, #0]
   1d8ee:	2b00      	cmp	r3, #0
   1d8f0:	d0fa      	beq.n	1d8e8 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   1d8f2:	4b20      	ldr	r3, [pc, #128]	; (1d974 <ConnectNetwork+0xb0>)
   1d8f4:	681a      	ldr	r2, [r3, #0]
   1d8f6:	6072      	str	r2, [r6, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   1d8f8:	2302      	movs	r3, #2
   1d8fa:	a902      	add	r1, sp, #8
   1d8fc:	800b      	strh	r3, [r1, #0]
  addr_in.sin_port = _htons(port);
   1d8fe:	022b      	lsls	r3, r5, #8
   1d900:	491d      	ldr	r1, [pc, #116]	; (1d978 <ConnectNetwork+0xb4>)
   1d902:	400b      	ands	r3, r1
   1d904:	b2ad      	uxth	r5, r5
   1d906:	0a2d      	lsrs	r5, r5, #8
   1d908:	431d      	orrs	r5, r3
   1d90a:	ab02      	add	r3, sp, #8
   1d90c:	805d      	strh	r5, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   1d90e:	9203      	str	r2, [sp, #12]

  /* Create secure socket */ 
  if(n->socket < 0)
   1d910:	6833      	ldr	r3, [r6, #0]
   1d912:	2b00      	cmp	r3, #0
   1d914:	db16      	blt.n	1d944 <ConnectNetwork+0x80>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   1d916:	6830      	ldr	r0, [r6, #0]
   1d918:	1c43      	adds	r3, r0, #1
   1d91a:	d01b      	beq.n	1d954 <ConnectNetwork+0x90>
   close(n->socket);
   return SOCK_ERR_INVALID;
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   1d91c:	b240      	sxtb	r0, r0
   1d91e:	2210      	movs	r2, #16
   1d920:	a902      	add	r1, sp, #8
   1d922:	4b16      	ldr	r3, [pc, #88]	; (1d97c <ConnectNetwork+0xb8>)
   1d924:	4798      	blx	r3
   1d926:	2800      	cmp	r0, #0
   1d928:	d119      	bne.n	1d95e <ConnectNetwork+0x9a>
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
  }
  
  gbMQTTBrokerConnected = false;
   1d92a:	2200      	movs	r2, #0
   1d92c:	4b14      	ldr	r3, [pc, #80]	; (1d980 <ConnectNetwork+0xbc>)
   1d92e:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
    m2m_wifi_handle_events(NULL);
   1d930:	4d0f      	ldr	r5, [pc, #60]	; (1d970 <ConnectNetwork+0xac>)
  while(false==gbMQTTBrokerConnected){
   1d932:	001c      	movs	r4, r3
    m2m_wifi_handle_events(NULL);
   1d934:	2000      	movs	r0, #0
   1d936:	47a8      	blx	r5
  while(false==gbMQTTBrokerConnected){
   1d938:	7823      	ldrb	r3, [r4, #0]
   1d93a:	2b00      	cmp	r3, #0
   1d93c:	d0fa      	beq.n	1d934 <ConnectNetwork+0x70>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   1d93e:	2000      	movs	r0, #0
   1d940:	b007      	add	sp, #28
   1d942:	bdf0      	pop	{r4, r5, r6, r7, pc}
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   1d944:	466b      	mov	r3, sp
   1d946:	791a      	ldrb	r2, [r3, #4]
   1d948:	2101      	movs	r1, #1
   1d94a:	2002      	movs	r0, #2
   1d94c:	4b0d      	ldr	r3, [pc, #52]	; (1d984 <ConnectNetwork+0xc0>)
   1d94e:	4798      	blx	r3
   1d950:	6030      	str	r0, [r6, #0]
   1d952:	e7e0      	b.n	1d916 <ConnectNetwork+0x52>
   close(n->socket);
   1d954:	4b0c      	ldr	r3, [pc, #48]	; (1d988 <ConnectNetwork+0xc4>)
   1d956:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   1d958:	2009      	movs	r0, #9
   1d95a:	4240      	negs	r0, r0
   1d95c:	e7f0      	b.n	1d940 <ConnectNetwork+0x7c>
   return SOCK_ERR_INVALID;
   1d95e:	2009      	movs	r0, #9
   1d960:	4240      	negs	r0, r0
   1d962:	e7ed      	b.n	1d940 <ConnectNetwork+0x7c>
   1d964:	2000335b 	.word	0x2000335b
   1d968:	20003468 	.word	0x20003468
   1d96c:	00018ca1 	.word	0x00018ca1
   1d970:	00016a89 	.word	0x00016a89
   1d974:	20003460 	.word	0x20003460
   1d978:	00ffff00 	.word	0x00ffff00
   1d97c:	000189e1 	.word	0x000189e1
   1d980:	2000335a 	.word	0x2000335a
   1d984:	00018861 	.word	0x00018861
   1d988:	00018b9d 	.word	0x00018b9d

0001d98c <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   1d98c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d98e:	b085      	sub	sp, #20
   1d990:	0006      	movs	r6, r0
   1d992:	000d      	movs	r5, r1
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   1d994:	2800      	cmp	r0, #0
   1d996:	d03d      	beq.n	1da14 <mqtt_init+0x88>
   1d998:	2900      	cmp	r1, #0
   1d99a:	d03e      	beq.n	1da1a <mqtt_init+0x8e>
   1d99c:	690b      	ldr	r3, [r1, #16]
   1d99e:	2b00      	cmp	r3, #0
   1d9a0:	d03e      	beq.n	1da20 <mqtt_init+0x94>
   1d9a2:	688b      	ldr	r3, [r1, #8]
   1d9a4:	2b00      	cmp	r3, #0
   1d9a6:	d03e      	beq.n	1da26 <mqtt_init+0x9a>
		return FAILURE;
		
	timeout_ms = config->keep_alive * 1000;
   1d9a8:	888b      	ldrh	r3, [r1, #4]
   1d9aa:	27fa      	movs	r7, #250	; 0xfa
   1d9ac:	00bf      	lsls	r7, r7, #2
   1d9ae:	435f      	muls	r7, r3
	NetworkInit(&(module->network));
   1d9b0:	0004      	movs	r4, r0
   1d9b2:	3420      	adds	r4, #32
   1d9b4:	0020      	movs	r0, r4
   1d9b6:	4b1f      	ldr	r3, [pc, #124]	; (1da34 <mqtt_init+0xa8>)
   1d9b8:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   1d9ba:	1d30      	adds	r0, r6, #4
   1d9bc:	2218      	movs	r2, #24
   1d9be:	0029      	movs	r1, r5
   1d9c0:	4b1d      	ldr	r3, [pc, #116]	; (1da38 <mqtt_init+0xac>)
   1d9c2:	4798      	blx	r3
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   1d9c4:	4b1d      	ldr	r3, [pc, #116]	; (1da3c <mqtt_init+0xb0>)
   1d9c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1d9c8:	2b00      	cmp	r3, #0
   1d9ca:	d01a      	beq.n	1da02 <mqtt_init+0x76>
   1d9cc:	4b1b      	ldr	r3, [pc, #108]	; (1da3c <mqtt_init+0xb0>)
   1d9ce:	33bc      	adds	r3, #188	; 0xbc
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1d9d0:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   1d9d2:	6819      	ldr	r1, [r3, #0]
   1d9d4:	2900      	cmp	r1, #0
   1d9d6:	d015      	beq.n	1da04 <mqtt_init+0x78>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1d9d8:	3201      	adds	r2, #1
   1d9da:	3360      	adds	r3, #96	; 0x60
   1d9dc:	2a07      	cmp	r2, #7
   1d9de:	d1f8      	bne.n	1d9d2 <mqtt_init+0x46>
	allocateClient(module);
	
	if(module->client)
   1d9e0:	69f0      	ldr	r0, [r6, #28]
   1d9e2:	2800      	cmp	r0, #0
   1d9e4:	d022      	beq.n	1da2c <mqtt_init+0xa0>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   1d9e6:	692b      	ldr	r3, [r5, #16]
   1d9e8:	68ea      	ldr	r2, [r5, #12]
   1d9ea:	9202      	str	r2, [sp, #8]
   1d9ec:	68aa      	ldr	r2, [r5, #8]
   1d9ee:	9201      	str	r2, [sp, #4]
   1d9f0:	696a      	ldr	r2, [r5, #20]
   1d9f2:	9200      	str	r2, [sp, #0]
   1d9f4:	003a      	movs	r2, r7
   1d9f6:	0021      	movs	r1, r4
   1d9f8:	4c11      	ldr	r4, [pc, #68]	; (1da40 <mqtt_init+0xb4>)
   1d9fa:	47a0      	blx	r4
		return SUCCESS;
   1d9fc:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   1d9fe:	b005      	add	sp, #20
   1da00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   1da02:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = module;
   1da04:	480d      	ldr	r0, [pc, #52]	; (1da3c <mqtt_init+0xb0>)
   1da06:	0053      	lsls	r3, r2, #1
   1da08:	1899      	adds	r1, r3, r2
   1da0a:	0149      	lsls	r1, r1, #5
   1da0c:	1841      	adds	r1, r0, r1
   1da0e:	65ce      	str	r6, [r1, #92]	; 0x5c
			module->client = &(mqttClientPool[cIdx].client);
   1da10:	61f1      	str	r1, [r6, #28]
   1da12:	e7e5      	b.n	1d9e0 <mqtt_init+0x54>
		return FAILURE;
   1da14:	2001      	movs	r0, #1
   1da16:	4240      	negs	r0, r0
   1da18:	e7f1      	b.n	1d9fe <mqtt_init+0x72>
   1da1a:	2001      	movs	r0, #1
   1da1c:	4240      	negs	r0, r0
   1da1e:	e7ee      	b.n	1d9fe <mqtt_init+0x72>
   1da20:	2001      	movs	r0, #1
   1da22:	4240      	negs	r0, r0
   1da24:	e7eb      	b.n	1d9fe <mqtt_init+0x72>
   1da26:	2001      	movs	r0, #1
   1da28:	4240      	negs	r0, r0
   1da2a:	e7e8      	b.n	1d9fe <mqtt_init+0x72>
		return FAILURE;
   1da2c:	2001      	movs	r0, #1
   1da2e:	4240      	negs	r0, r0
   1da30:	e7e5      	b.n	1d9fe <mqtt_init+0x72>
   1da32:	46c0      	nop			; (mov r8, r8)
   1da34:	0001d8a5 	.word	0x0001d8a5
   1da38:	0001fbe5 	.word	0x0001fbe5
   1da3c:	20003474 	.word	0x20003474
   1da40:	0001cf5d 	.word	0x0001cf5d

0001da44 <mqtt_get_config_defaults>:
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
	config->port = 1883;
   1da44:	4b05      	ldr	r3, [pc, #20]	; (1da5c <mqtt_get_config_defaults+0x18>)
   1da46:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   1da48:	2300      	movs	r3, #0
   1da4a:	7083      	strb	r3, [r0, #2]
	config->keep_alive = 60;
   1da4c:	223c      	movs	r2, #60	; 0x3c
   1da4e:	8082      	strh	r2, [r0, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   1da50:	6083      	str	r3, [r0, #8]
	config->send_buffer = NULL;
   1da52:	6103      	str	r3, [r0, #16]
	config->read_buffer_size = 0;
   1da54:	60c3      	str	r3, [r0, #12]
	config->send_buffer_size = 0;
   1da56:	6143      	str	r3, [r0, #20]
}
   1da58:	4770      	bx	lr
   1da5a:	46c0      	nop			; (mov r8, r8)
   1da5c:	0000075b 	.word	0x0000075b

0001da60 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
	if(module)
   1da60:	2800      	cmp	r0, #0
   1da62:	d002      	beq.n	1da6a <mqtt_register_callback+0xa>
	{
		module->callback = callback;
   1da64:	6001      	str	r1, [r0, #0]
		return SUCCESS;
   1da66:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   1da68:	4770      	bx	lr
		return FAILURE;
   1da6a:	2001      	movs	r0, #1
   1da6c:	4240      	negs	r0, r0
   1da6e:	e7fb      	b.n	1da68 <mqtt_register_callback+0x8>

0001da70 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   1da70:	b510      	push	{r4, lr}
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   1da72:	4b01      	ldr	r3, [pc, #4]	; (1da78 <mqtt_socket_event_handler+0x8>)
   1da74:	4798      	blx	r3
}
   1da76:	bd10      	pop	{r4, pc}
   1da78:	0001d7ed 	.word	0x0001d7ed

0001da7c <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   1da7c:	b510      	push	{r4, lr}
	dnsResolveCallback(domain_name, server_ip);
   1da7e:	4b01      	ldr	r3, [pc, #4]	; (1da84 <mqtt_socket_resolve_handler+0x8>)
   1da80:	4798      	blx	r3
}
   1da82:	bd10      	pop	{r4, pc}
   1da84:	0001d7b5 	.word	0x0001d7b5

0001da88 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   1da88:	b530      	push	{r4, r5, lr}
   1da8a:	b083      	sub	sp, #12
   1da8c:	0004      	movs	r4, r0
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   1da8e:	7983      	ldrb	r3, [r0, #6]
   1da90:	8882      	ldrh	r2, [r0, #4]
   1da92:	3020      	adds	r0, #32
   1da94:	4d06      	ldr	r5, [pc, #24]	; (1dab0 <mqtt_connect+0x28>)
   1da96:	47a8      	blx	r5
   1da98:	9001      	str	r0, [sp, #4]
	if(module->callback)
   1da9a:	6823      	ldr	r3, [r4, #0]
   1da9c:	2b00      	cmp	r3, #0
   1da9e:	d003      	beq.n	1daa8 <mqtt_connect+0x20>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   1daa0:	aa01      	add	r2, sp, #4
   1daa2:	2100      	movs	r1, #0
   1daa4:	0020      	movs	r0, r4
   1daa6:	4798      	blx	r3
	return connResult.sock_connected.result;
}
   1daa8:	9801      	ldr	r0, [sp, #4]
   1daaa:	b003      	add	sp, #12
   1daac:	bd30      	pop	{r4, r5, pc}
   1daae:	46c0      	nop			; (mov r8, r8)
   1dab0:	0001d8c5 	.word	0x0001d8c5

0001dab4 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   1dab4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dab6:	46de      	mov	lr, fp
   1dab8:	4657      	mov	r7, sl
   1daba:	464e      	mov	r6, r9
   1dabc:	b5c0      	push	{r6, r7, lr}
   1dabe:	b098      	sub	sp, #96	; 0x60
   1dac0:	0005      	movs	r5, r0
   1dac2:	4689      	mov	r9, r1
   1dac4:	4693      	mov	fp, r2
   1dac6:	469a      	mov	sl, r3
   1dac8:	ab24      	add	r3, sp, #144	; 0x90
   1daca:	781f      	ldrb	r7, [r3, #0]
   1dacc:	ab25      	add	r3, sp, #148	; 0x94
   1dace:	781e      	ldrb	r6, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   1dad0:	ac01      	add	r4, sp, #4
   1dad2:	2258      	movs	r2, #88	; 0x58
   1dad4:	491a      	ldr	r1, [pc, #104]	; (1db40 <mqtt_connect_broker+0x8c>)
   1dad6:	0020      	movs	r0, r4
   1dad8:	4b1a      	ldr	r3, [pc, #104]	; (1db44 <mqtt_connect_broker+0x90>)
   1dada:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
	connectData.clientID.cstring = (char *)client_id;
   1dadc:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1dade:	60e3      	str	r3, [r4, #12]
	connectData.username.cstring = (char *)id;
   1dae0:	465b      	mov	r3, fp
   1dae2:	6423      	str	r3, [r4, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   1dae4:	4653      	mov	r3, sl
   1dae6:	64e3      	str	r3, [r4, #76]	; 0x4c
	connectData.cleansession = clean_session;
   1dae8:	464b      	mov	r3, r9
   1daea:	76a3      	strb	r3, [r4, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   1daec:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1daee:	6263      	str	r3, [r4, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   1daf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1daf2:	6323      	str	r3, [r4, #48]	; 0x30
	connectData.will.retained = will_retain;
   1daf4:	233c      	movs	r3, #60	; 0x3c
   1daf6:	54e6      	strb	r6, [r4, r3]
	connectData.will.qos = will_qos;
   1daf8:	3301      	adds	r3, #1
   1dafa:	54e7      	strb	r7, [r4, r3]
	
	if(will_topic && will_msg)
   1dafc:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1dafe:	2b00      	cmp	r3, #0
   1db00:	d005      	beq.n	1db0e <mqtt_connect_broker+0x5a>
   1db02:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1db04:	2b00      	cmp	r3, #0
   1db06:	d002      	beq.n	1db0e <mqtt_connect_broker+0x5a>
		connectData.willFlag = 1;
   1db08:	2201      	movs	r2, #1
   1db0a:	ab01      	add	r3, sp, #4
   1db0c:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   1db0e:	a901      	add	r1, sp, #4
   1db10:	69e8      	ldr	r0, [r5, #28]
   1db12:	4b0d      	ldr	r3, [pc, #52]	; (1db48 <mqtt_connect_broker+0x94>)
   1db14:	4798      	blx	r3
   1db16:	0004      	movs	r4, r0
	
	connBrokerResult.connected.result = rc;
   1db18:	ab17      	add	r3, sp, #92	; 0x5c
   1db1a:	7018      	strb	r0, [r3, #0]
	if(module->callback)
   1db1c:	682b      	ldr	r3, [r5, #0]
   1db1e:	2b00      	cmp	r3, #0
   1db20:	d003      	beq.n	1db2a <mqtt_connect_broker+0x76>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   1db22:	aa17      	add	r2, sp, #92	; 0x5c
   1db24:	2101      	movs	r1, #1
   1db26:	0028      	movs	r0, r5
   1db28:	4798      	blx	r3
	
	module->isConnected = true;
   1db2a:	2201      	movs	r2, #1
   1db2c:	2334      	movs	r3, #52	; 0x34
   1db2e:	54ea      	strb	r2, [r5, r3]
	return rc;
}
   1db30:	0020      	movs	r0, r4
   1db32:	b018      	add	sp, #96	; 0x60
   1db34:	bc1c      	pop	{r2, r3, r4}
   1db36:	4691      	mov	r9, r2
   1db38:	469a      	mov	sl, r3
   1db3a:	46a3      	mov	fp, r4
   1db3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1db3e:	46c0      	nop			; (mov r8, r8)
   1db40:	00022e30 	.word	0x00022e30
   1db44:	0001fbe5 	.word	0x0001fbe5
   1db48:	0001d365 	.word	0x0001d365

0001db4c <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   1db4c:	b530      	push	{r4, r5, lr}
   1db4e:	b083      	sub	sp, #12
   1db50:	0004      	movs	r4, r0
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   1db52:	69c0      	ldr	r0, [r0, #28]
   1db54:	4b08      	ldr	r3, [pc, #32]	; (1db78 <mqtt_disconnect+0x2c>)
   1db56:	4798      	blx	r3
   1db58:	0005      	movs	r5, r0
	
	disconnectResult.disconnected.reason = rc;
   1db5a:	9001      	str	r0, [sp, #4]
	
	if(module->callback)
   1db5c:	6823      	ldr	r3, [r4, #0]
   1db5e:	2b00      	cmp	r3, #0
   1db60:	d003      	beq.n	1db6a <mqtt_disconnect+0x1e>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   1db62:	aa01      	add	r2, sp, #4
   1db64:	2105      	movs	r1, #5
   1db66:	0020      	movs	r0, r4
   1db68:	4798      	blx	r3
	
	module->isConnected = false;
   1db6a:	2200      	movs	r2, #0
   1db6c:	2334      	movs	r3, #52	; 0x34
   1db6e:	54e2      	strb	r2, [r4, r3]
	return rc;
}
   1db70:	0028      	movs	r0, r5
   1db72:	b003      	add	sp, #12
   1db74:	bd30      	pop	{r4, r5, pc}
   1db76:	46c0      	nop			; (mov r8, r8)
   1db78:	0001d649 	.word	0x0001d649

0001db7c <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   1db7c:	b570      	push	{r4, r5, r6, lr}
   1db7e:	b084      	sub	sp, #16
   1db80:	0004      	movs	r4, r0
   1db82:	a808      	add	r0, sp, #32
   1db84:	7805      	ldrb	r5, [r0, #0]
   1db86:	a809      	add	r0, sp, #36	; 0x24
   1db88:	7800      	ldrb	r0, [r0, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   1db8a:	466e      	mov	r6, sp
   1db8c:	7035      	strb	r5, [r6, #0]
	mqttMsg.payload = (char *)msg;
   1db8e:	9202      	str	r2, [sp, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   1db90:	9303      	str	r3, [sp, #12]
	mqttMsg.retained = retain;
   1db92:	7070      	strb	r0, [r6, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   1db94:	466a      	mov	r2, sp
   1db96:	69e0      	ldr	r0, [r4, #28]
   1db98:	4b06      	ldr	r3, [pc, #24]	; (1dbb4 <mqtt_publish+0x38>)
   1db9a:	4798      	blx	r3
   1db9c:	0005      	movs	r5, r0
	
	if(module->callback)
   1db9e:	6823      	ldr	r3, [r4, #0]
   1dba0:	2b00      	cmp	r3, #0
   1dba2:	d003      	beq.n	1dbac <mqtt_publish+0x30>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   1dba4:	2200      	movs	r2, #0
   1dba6:	2102      	movs	r1, #2
   1dba8:	0020      	movs	r0, r4
   1dbaa:	4798      	blx	r3
	
	return rc;
}
   1dbac:	0028      	movs	r0, r5
   1dbae:	b004      	add	sp, #16
   1dbb0:	bd70      	pop	{r4, r5, r6, pc}
   1dbb2:	46c0      	nop			; (mov r8, r8)
   1dbb4:	0001d539 	.word	0x0001d539

0001dbb8 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   1dbb8:	b570      	push	{r4, r5, r6, lr}
   1dbba:	0004      	movs	r4, r0
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   1dbbc:	69c0      	ldr	r0, [r0, #28]
   1dbbe:	4d06      	ldr	r5, [pc, #24]	; (1dbd8 <mqtt_subscribe+0x20>)
   1dbc0:	47a8      	blx	r5
   1dbc2:	0005      	movs	r5, r0
	
	if(module->callback)
   1dbc4:	6823      	ldr	r3, [r4, #0]
   1dbc6:	2b00      	cmp	r3, #0
   1dbc8:	d003      	beq.n	1dbd2 <mqtt_subscribe+0x1a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   1dbca:	2200      	movs	r2, #0
   1dbcc:	2103      	movs	r1, #3
   1dbce:	0020      	movs	r0, r4
   1dbd0:	4798      	blx	r3
	
	return rc;
}
   1dbd2:	0028      	movs	r0, r5
   1dbd4:	bd70      	pop	{r4, r5, r6, pc}
   1dbd6:	46c0      	nop			; (mov r8, r8)
   1dbd8:	0001d435 	.word	0x0001d435

0001dbdc <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   1dbdc:	b510      	push	{r4, lr}
	return MQTTYield(module->client, timeout_ms);
   1dbde:	69c0      	ldr	r0, [r0, #28]
   1dbe0:	4b01      	ldr	r3, [pc, #4]	; (1dbe8 <mqtt_yield+0xc>)
   1dbe2:	4798      	blx	r3
   1dbe4:	bd10      	pop	{r4, pc}
   1dbe6:	46c0      	nop			; (mov r8, r8)
   1dbe8:	0001d2e9 	.word	0x0001d2e9

0001dbec <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   1dbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dbee:	0004      	movs	r4, r0
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   1dbf0:	7a03      	ldrb	r3, [r0, #8]
   1dbf2:	2b03      	cmp	r3, #3
   1dbf4:	d024      	beq.n	1dc40 <MQTTSerialize_connectLength+0x54>
	int len = 0;
   1dbf6:	2600      	movs	r6, #0
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
   1dbf8:	2b04      	cmp	r3, #4
   1dbfa:	d01f      	beq.n	1dc3c <MQTTSerialize_connectLength+0x50>
		len = 10;

	len += MQTTstrlen(options->clientID)+2;
   1dbfc:	68e0      	ldr	r0, [r4, #12]
   1dbfe:	6921      	ldr	r1, [r4, #16]
   1dc00:	6962      	ldr	r2, [r4, #20]
   1dc02:	4b1b      	ldr	r3, [pc, #108]	; (1dc70 <MQTTSerialize_connectLength+0x84>)
   1dc04:	4798      	blx	r3
   1dc06:	1c85      	adds	r5, r0, #2
   1dc08:	19ad      	adds	r5, r5, r6
	if (options->willFlag)
   1dc0a:	7ee3      	ldrb	r3, [r4, #27]
   1dc0c:	2b00      	cmp	r3, #0
   1dc0e:	d119      	bne.n	1dc44 <MQTTSerialize_connectLength+0x58>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
	if (options->username.cstring || options->username.lenstring.data)
   1dc10:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1dc12:	2b00      	cmp	r3, #0
   1dc14:	d024      	beq.n	1dc60 <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->username)+2;
   1dc16:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1dc18:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1dc1a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1dc1c:	4b14      	ldr	r3, [pc, #80]	; (1dc70 <MQTTSerialize_connectLength+0x84>)
   1dc1e:	4798      	blx	r3
   1dc20:	3002      	adds	r0, #2
   1dc22:	182d      	adds	r5, r5, r0
	if (options->password.cstring || options->password.lenstring.data)
   1dc24:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1dc26:	2b00      	cmp	r3, #0
   1dc28:	d01e      	beq.n	1dc68 <MQTTSerialize_connectLength+0x7c>
		len += MQTTstrlen(options->password)+2;
   1dc2a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1dc2c:	6d21      	ldr	r1, [r4, #80]	; 0x50
   1dc2e:	6d62      	ldr	r2, [r4, #84]	; 0x54
   1dc30:	4b0f      	ldr	r3, [pc, #60]	; (1dc70 <MQTTSerialize_connectLength+0x84>)
   1dc32:	4798      	blx	r3
   1dc34:	3002      	adds	r0, #2
   1dc36:	182d      	adds	r5, r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
   1dc38:	0028      	movs	r0, r5
   1dc3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		len = 10;
   1dc3c:	360a      	adds	r6, #10
   1dc3e:	e7dd      	b.n	1dbfc <MQTTSerialize_connectLength+0x10>
		len = 12; /* variable depending on MQTT or MQIsdp */
   1dc40:	260c      	movs	r6, #12
   1dc42:	e7db      	b.n	1dbfc <MQTTSerialize_connectLength+0x10>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   1dc44:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1dc46:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1dc48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1dc4a:	4f09      	ldr	r7, [pc, #36]	; (1dc70 <MQTTSerialize_connectLength+0x84>)
   1dc4c:	47b8      	blx	r7
   1dc4e:	0006      	movs	r6, r0
   1dc50:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1dc52:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1dc54:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1dc56:	47b8      	blx	r7
   1dc58:	1836      	adds	r6, r6, r0
   1dc5a:	3604      	adds	r6, #4
   1dc5c:	19ad      	adds	r5, r5, r6
   1dc5e:	e7d7      	b.n	1dc10 <MQTTSerialize_connectLength+0x24>
	if (options->username.cstring || options->username.lenstring.data)
   1dc60:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1dc62:	2b00      	cmp	r3, #0
   1dc64:	d1d7      	bne.n	1dc16 <MQTTSerialize_connectLength+0x2a>
   1dc66:	e7dd      	b.n	1dc24 <MQTTSerialize_connectLength+0x38>
	if (options->password.cstring || options->password.lenstring.data)
   1dc68:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1dc6a:	2b00      	cmp	r3, #0
   1dc6c:	d1dd      	bne.n	1dc2a <MQTTSerialize_connectLength+0x3e>
   1dc6e:	e7e3      	b.n	1dc38 <MQTTSerialize_connectLength+0x4c>
   1dc70:	0001e155 	.word	0x0001e155

0001dc74 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   1dc74:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dc76:	b083      	sub	sp, #12
   1dc78:	0006      	movs	r6, r0
   1dc7a:	000f      	movs	r7, r1
   1dc7c:	0015      	movs	r5, r2
	unsigned char *ptr = buf;
   1dc7e:	9001      	str	r0, [sp, #4]
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   1dc80:	0010      	movs	r0, r2
   1dc82:	4b45      	ldr	r3, [pc, #276]	; (1dd98 <MQTTSerialize_connect+0x124>)
   1dc84:	4798      	blx	r3
   1dc86:	0004      	movs	r4, r0
   1dc88:	4b44      	ldr	r3, [pc, #272]	; (1dd9c <MQTTSerialize_connect+0x128>)
   1dc8a:	4798      	blx	r3
   1dc8c:	42b8      	cmp	r0, r7
   1dc8e:	dd00      	ble.n	1dc92 <MQTTSerialize_connect+0x1e>
   1dc90:	e07f      	b.n	1dd92 <MQTTSerialize_connect+0x11e>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
   1dc92:	2110      	movs	r1, #16
   1dc94:	a801      	add	r0, sp, #4
   1dc96:	4b42      	ldr	r3, [pc, #264]	; (1dda0 <MQTTSerialize_connect+0x12c>)
   1dc98:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   1dc9a:	0021      	movs	r1, r4
   1dc9c:	9801      	ldr	r0, [sp, #4]
   1dc9e:	4b41      	ldr	r3, [pc, #260]	; (1dda4 <MQTTSerialize_connect+0x130>)
   1dca0:	4798      	blx	r3
   1dca2:	9b01      	ldr	r3, [sp, #4]
   1dca4:	469c      	mov	ip, r3
   1dca6:	4460      	add	r0, ip
   1dca8:	9001      	str	r0, [sp, #4]

	if (options->MQTTVersion == 4)
   1dcaa:	7a2b      	ldrb	r3, [r5, #8]
   1dcac:	2b04      	cmp	r3, #4
   1dcae:	d045      	beq.n	1dd3c <MQTTSerialize_connect+0xc8>
		writeCString(&ptr, "MQTT");
		writeChar(&ptr, (char) 4);
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   1dcb0:	493d      	ldr	r1, [pc, #244]	; (1dda8 <MQTTSerialize_connect+0x134>)
   1dcb2:	a801      	add	r0, sp, #4
   1dcb4:	4b3d      	ldr	r3, [pc, #244]	; (1ddac <MQTTSerialize_connect+0x138>)
   1dcb6:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   1dcb8:	2103      	movs	r1, #3
   1dcba:	a801      	add	r0, sp, #4
   1dcbc:	4b38      	ldr	r3, [pc, #224]	; (1dda0 <MQTTSerialize_connect+0x12c>)
   1dcbe:	4798      	blx	r3
	}

	flags.all = 0;
	flags.bits.cleansession = options->cleansession;
   1dcc0:	7ea9      	ldrb	r1, [r5, #26]
   1dcc2:	2301      	movs	r3, #1
   1dcc4:	4019      	ands	r1, r3
	flags.bits.will = (options->willFlag) ? 1 : 0;
   1dcc6:	7eea      	ldrb	r2, [r5, #27]
   1dcc8:	1e50      	subs	r0, r2, #1
   1dcca:	4182      	sbcs	r2, r0
   1dccc:	b2d2      	uxtb	r2, r2
   1dcce:	4013      	ands	r3, r2
   1dcd0:	009b      	lsls	r3, r3, #2
   1dcd2:	0049      	lsls	r1, r1, #1
	if (flags.bits.will)
   1dcd4:	4319      	orrs	r1, r3
   1dcd6:	2b00      	cmp	r3, #0
   1dcd8:	d00b      	beq.n	1dcf2 <MQTTSerialize_connect+0x7e>
	{
		flags.bits.willQoS = options->will.qos;
   1dcda:	233d      	movs	r3, #61	; 0x3d
   1dcdc:	5cea      	ldrb	r2, [r5, r3]
   1dcde:	3b3a      	subs	r3, #58	; 0x3a
   1dce0:	4013      	ands	r3, r2
   1dce2:	00db      	lsls	r3, r3, #3
		flags.bits.willRetain = options->will.retained;
   1dce4:	223c      	movs	r2, #60	; 0x3c
   1dce6:	5ca8      	ldrb	r0, [r5, r2]
   1dce8:	3a3b      	subs	r2, #59	; 0x3b
   1dcea:	4002      	ands	r2, r0
   1dcec:	0152      	lsls	r2, r2, #5
   1dcee:	4319      	orrs	r1, r3
   1dcf0:	4311      	orrs	r1, r2
	}

	if (options->username.cstring || options->username.lenstring.data)
   1dcf2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1dcf4:	2b00      	cmp	r3, #0
   1dcf6:	d02a      	beq.n	1dd4e <MQTTSerialize_connect+0xda>
		flags.bits.username = 1;
   1dcf8:	2380      	movs	r3, #128	; 0x80
   1dcfa:	4319      	orrs	r1, r3
	if (options->password.cstring || options->password.lenstring.data)
   1dcfc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   1dcfe:	2b00      	cmp	r3, #0
   1dd00:	d029      	beq.n	1dd56 <MQTTSerialize_connect+0xe2>
		flags.bits.password = 1;
   1dd02:	2340      	movs	r3, #64	; 0x40
   1dd04:	4319      	orrs	r1, r3

	writeChar(&ptr, flags.all);
   1dd06:	b2cc      	uxtb	r4, r1
   1dd08:	0021      	movs	r1, r4
   1dd0a:	a801      	add	r0, sp, #4
   1dd0c:	4b24      	ldr	r3, [pc, #144]	; (1dda0 <MQTTSerialize_connect+0x12c>)
   1dd0e:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   1dd10:	8b29      	ldrh	r1, [r5, #24]
   1dd12:	a801      	add	r0, sp, #4
   1dd14:	4b26      	ldr	r3, [pc, #152]	; (1ddb0 <MQTTSerialize_connect+0x13c>)
   1dd16:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   1dd18:	68e9      	ldr	r1, [r5, #12]
   1dd1a:	692a      	ldr	r2, [r5, #16]
   1dd1c:	696b      	ldr	r3, [r5, #20]
   1dd1e:	a801      	add	r0, sp, #4
   1dd20:	4f24      	ldr	r7, [pc, #144]	; (1ddb4 <MQTTSerialize_connect+0x140>)
   1dd22:	47b8      	blx	r7
	if (options->willFlag)
   1dd24:	7eeb      	ldrb	r3, [r5, #27]
   1dd26:	2b00      	cmp	r3, #0
   1dd28:	d119      	bne.n	1dd5e <MQTTSerialize_connect+0xea>
	{
		writeMQTTString(&ptr, options->will.topicName);
		writeMQTTString(&ptr, options->will.message);
	}
	if (flags.bits.username)
   1dd2a:	b263      	sxtb	r3, r4
   1dd2c:	2b00      	cmp	r3, #0
   1dd2e:	db22      	blt.n	1dd76 <MQTTSerialize_connect+0x102>
		writeMQTTString(&ptr, options->username);
	if (flags.bits.password)
   1dd30:	0663      	lsls	r3, r4, #25
   1dd32:	d427      	bmi.n	1dd84 <MQTTSerialize_connect+0x110>
		writeMQTTString(&ptr, options->password);

	rc = ptr - buf;
   1dd34:	9b01      	ldr	r3, [sp, #4]
   1dd36:	1b98      	subs	r0, r3, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
   1dd38:	b003      	add	sp, #12
   1dd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQTT");
   1dd3c:	491e      	ldr	r1, [pc, #120]	; (1ddb8 <MQTTSerialize_connect+0x144>)
   1dd3e:	a801      	add	r0, sp, #4
   1dd40:	4b1a      	ldr	r3, [pc, #104]	; (1ddac <MQTTSerialize_connect+0x138>)
   1dd42:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   1dd44:	2104      	movs	r1, #4
   1dd46:	a801      	add	r0, sp, #4
   1dd48:	4b15      	ldr	r3, [pc, #84]	; (1dda0 <MQTTSerialize_connect+0x12c>)
   1dd4a:	4798      	blx	r3
   1dd4c:	e7b8      	b.n	1dcc0 <MQTTSerialize_connect+0x4c>
	if (options->username.cstring || options->username.lenstring.data)
   1dd4e:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1dd50:	2b00      	cmp	r3, #0
   1dd52:	d1d1      	bne.n	1dcf8 <MQTTSerialize_connect+0x84>
   1dd54:	e7d2      	b.n	1dcfc <MQTTSerialize_connect+0x88>
	if (options->password.cstring || options->password.lenstring.data)
   1dd56:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   1dd58:	2b00      	cmp	r3, #0
   1dd5a:	d1d2      	bne.n	1dd02 <MQTTSerialize_connect+0x8e>
   1dd5c:	e7d3      	b.n	1dd06 <MQTTSerialize_connect+0x92>
		writeMQTTString(&ptr, options->will.topicName);
   1dd5e:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1dd60:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1dd62:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1dd64:	a801      	add	r0, sp, #4
   1dd66:	4f13      	ldr	r7, [pc, #76]	; (1ddb4 <MQTTSerialize_connect+0x140>)
   1dd68:	47b8      	blx	r7
		writeMQTTString(&ptr, options->will.message);
   1dd6a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1dd6c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   1dd6e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1dd70:	a801      	add	r0, sp, #4
   1dd72:	47b8      	blx	r7
   1dd74:	e7d9      	b.n	1dd2a <MQTTSerialize_connect+0xb6>
		writeMQTTString(&ptr, options->username);
   1dd76:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1dd78:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   1dd7a:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1dd7c:	a801      	add	r0, sp, #4
   1dd7e:	4f0d      	ldr	r7, [pc, #52]	; (1ddb4 <MQTTSerialize_connect+0x140>)
   1dd80:	47b8      	blx	r7
   1dd82:	e7d5      	b.n	1dd30 <MQTTSerialize_connect+0xbc>
		writeMQTTString(&ptr, options->password);
   1dd84:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   1dd86:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   1dd88:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   1dd8a:	a801      	add	r0, sp, #4
   1dd8c:	4c09      	ldr	r4, [pc, #36]	; (1ddb4 <MQTTSerialize_connect+0x140>)
   1dd8e:	47a0      	blx	r4
   1dd90:	e7d0      	b.n	1dd34 <MQTTSerialize_connect+0xc0>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1dd92:	2002      	movs	r0, #2
   1dd94:	4240      	negs	r0, r0
	return rc;
   1dd96:	e7cf      	b.n	1dd38 <MQTTSerialize_connect+0xc4>
   1dd98:	0001dbed 	.word	0x0001dbed
   1dd9c:	0001dff9 	.word	0x0001dff9
   1dda0:	0001e05b 	.word	0x0001e05b
   1dda4:	0001df71 	.word	0x0001df71
   1dda8:	00022e90 	.word	0x00022e90
   1ddac:	0001e091 	.word	0x0001e091
   1ddb0:	0001e067 	.word	0x0001e067
   1ddb4:	0001e0c9 	.word	0x0001e0c9
   1ddb8:	00022e88 	.word	0x00022e88

0001ddbc <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   1ddbc:	b570      	push	{r4, r5, r6, lr}
   1ddbe:	b082      	sub	sp, #8
   1ddc0:	0005      	movs	r5, r0
   1ddc2:	000c      	movs	r4, r1
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   1ddc4:	9201      	str	r2, [sp, #4]
	int rc = 0;
	int mylen;
	MQTTConnackFlags flags = {0};

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1ddc6:	a801      	add	r0, sp, #4
   1ddc8:	4b0e      	ldr	r3, [pc, #56]	; (1de04 <MQTTDeserialize_connack+0x48>)
   1ddca:	4798      	blx	r3
	if (header.bits.type != CONNACK)
   1ddcc:	23f0      	movs	r3, #240	; 0xf0
   1ddce:	4003      	ands	r3, r0
	int rc = 0;
   1ddd0:	2000      	movs	r0, #0
	if (header.bits.type != CONNACK)
   1ddd2:	2b20      	cmp	r3, #32
   1ddd4:	d001      	beq.n	1ddda <MQTTDeserialize_connack+0x1e>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   1ddd6:	b002      	add	sp, #8
   1ddd8:	bd70      	pop	{r4, r5, r6, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1ddda:	4669      	mov	r1, sp
   1dddc:	9801      	ldr	r0, [sp, #4]
   1ddde:	4b0a      	ldr	r3, [pc, #40]	; (1de08 <MQTTDeserialize_connack+0x4c>)
   1dde0:	4798      	blx	r3
   1dde2:	9b01      	ldr	r3, [sp, #4]
   1dde4:	181b      	adds	r3, r3, r0
   1dde6:	9301      	str	r3, [sp, #4]
	if (enddata - curdata < 2)
   1dde8:	9b00      	ldr	r3, [sp, #0]
   1ddea:	2b01      	cmp	r3, #1
   1ddec:	ddf3      	ble.n	1ddd6 <MQTTDeserialize_connack+0x1a>
	flags.all = readChar(&curdata);
   1ddee:	a801      	add	r0, sp, #4
   1ddf0:	4e04      	ldr	r6, [pc, #16]	; (1de04 <MQTTDeserialize_connack+0x48>)
   1ddf2:	47b0      	blx	r6
	*sessionPresent = flags.bits.sessionpresent;
   1ddf4:	0600      	lsls	r0, r0, #24
   1ddf6:	0fc0      	lsrs	r0, r0, #31
   1ddf8:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
   1ddfa:	a801      	add	r0, sp, #4
   1ddfc:	47b0      	blx	r6
   1ddfe:	7020      	strb	r0, [r4, #0]
	rc = 1;
   1de00:	2001      	movs	r0, #1
   1de02:	e7e8      	b.n	1ddd6 <MQTTDeserialize_connack+0x1a>
   1de04:	0001e04f 	.word	0x0001e04f
   1de08:	0001e021 	.word	0x0001e021

0001de0c <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   1de0c:	b510      	push	{r4, lr}
   1de0e:	b082      	sub	sp, #8
   1de10:	0004      	movs	r4, r0
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
   1de12:	9001      	str	r0, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 2)
   1de14:	2901      	cmp	r1, #1
   1de16:	dd0f      	ble.n	1de38 <MQTTSerialize_zero+0x2c>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
   1de18:	210f      	movs	r1, #15
   1de1a:	4011      	ands	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   1de1c:	0109      	lsls	r1, r1, #4
   1de1e:	a801      	add	r0, sp, #4
   1de20:	4b07      	ldr	r3, [pc, #28]	; (1de40 <MQTTSerialize_zero+0x34>)
   1de22:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   1de24:	2100      	movs	r1, #0
   1de26:	9801      	ldr	r0, [sp, #4]
   1de28:	4b06      	ldr	r3, [pc, #24]	; (1de44 <MQTTSerialize_zero+0x38>)
   1de2a:	4798      	blx	r3
   1de2c:	9b01      	ldr	r3, [sp, #4]
   1de2e:	469c      	mov	ip, r3
   1de30:	4460      	add	r0, ip
	rc = ptr - buf;
   1de32:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   1de34:	b002      	add	sp, #8
   1de36:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1de38:	2002      	movs	r0, #2
   1de3a:	4240      	negs	r0, r0
	return rc;
   1de3c:	e7fa      	b.n	1de34 <MQTTSerialize_zero+0x28>
   1de3e:	46c0      	nop			; (mov r8, r8)
   1de40:	0001e05b 	.word	0x0001e05b
   1de44:	0001df71 	.word	0x0001df71

0001de48 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   1de48:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   1de4a:	220e      	movs	r2, #14
   1de4c:	4b01      	ldr	r3, [pc, #4]	; (1de54 <MQTTSerialize_disconnect+0xc>)
   1de4e:	4798      	blx	r3
}
   1de50:	bd10      	pop	{r4, pc}
   1de52:	46c0      	nop			; (mov r8, r8)
   1de54:	0001de0d 	.word	0x0001de0d

0001de58 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   1de58:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   1de5a:	220c      	movs	r2, #12
   1de5c:	4b01      	ldr	r3, [pc, #4]	; (1de64 <MQTTSerialize_pingreq+0xc>)
   1de5e:	4798      	blx	r3
}
   1de60:	bd10      	pop	{r4, pc}
   1de62:	46c0      	nop			; (mov r8, r8)
   1de64:	0001de0d 	.word	0x0001de0d

0001de68 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   1de68:	b5f0      	push	{r4, r5, r6, r7, lr}
   1de6a:	b085      	sub	sp, #20
   1de6c:	0005      	movs	r5, r0
   1de6e:	000e      	movs	r6, r1
   1de70:	0014      	movs	r4, r2
   1de72:	9301      	str	r3, [sp, #4]
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   1de74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1de76:	9303      	str	r3, [sp, #12]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
   1de78:	2300      	movs	r3, #0
   1de7a:	9302      	str	r3, [sp, #8]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1de7c:	a803      	add	r0, sp, #12
   1de7e:	4b1c      	ldr	r3, [pc, #112]	; (1def0 <MQTTDeserialize_publish+0x88>)
   1de80:	4798      	blx	r3
   1de82:	0003      	movs	r3, r0
	if (header.bits.type != PUBLISH)
   1de84:	22f0      	movs	r2, #240	; 0xf0
   1de86:	4010      	ands	r0, r2
	int rc = 0;
   1de88:	2700      	movs	r7, #0
	if (header.bits.type != PUBLISH)
   1de8a:	2830      	cmp	r0, #48	; 0x30
   1de8c:	d002      	beq.n	1de94 <MQTTDeserialize_publish+0x2c>
	*payload = curdata;
	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   1de8e:	0038      	movs	r0, r7
   1de90:	b005      	add	sp, #20
   1de92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*dup = header.bits.dup;
   1de94:	071a      	lsls	r2, r3, #28
   1de96:	0fd2      	lsrs	r2, r2, #31
   1de98:	702a      	strb	r2, [r5, #0]
	*qos = header.bits.qos;
   1de9a:	075a      	lsls	r2, r3, #29
   1de9c:	0f92      	lsrs	r2, r2, #30
   1de9e:	6032      	str	r2, [r6, #0]
	*retained = header.bits.retain;
   1dea0:	07db      	lsls	r3, r3, #31
   1dea2:	0fdb      	lsrs	r3, r3, #31
   1dea4:	7023      	strb	r3, [r4, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1dea6:	a902      	add	r1, sp, #8
   1dea8:	9803      	ldr	r0, [sp, #12]
   1deaa:	4b12      	ldr	r3, [pc, #72]	; (1def4 <MQTTDeserialize_publish+0x8c>)
   1deac:	4798      	blx	r3
   1deae:	0007      	movs	r7, r0
   1deb0:	9b03      	ldr	r3, [sp, #12]
   1deb2:	181c      	adds	r4, r3, r0
   1deb4:	9403      	str	r4, [sp, #12]
	enddata = curdata + mylen;
   1deb6:	9b02      	ldr	r3, [sp, #8]
   1deb8:	469c      	mov	ip, r3
   1deba:	4464      	add	r4, ip
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   1debc:	0022      	movs	r2, r4
   1debe:	a903      	add	r1, sp, #12
   1dec0:	980a      	ldr	r0, [sp, #40]	; 0x28
   1dec2:	4b0d      	ldr	r3, [pc, #52]	; (1def8 <MQTTDeserialize_publish+0x90>)
   1dec4:	4798      	blx	r3
   1dec6:	2800      	cmp	r0, #0
   1dec8:	d0e1      	beq.n	1de8e <MQTTDeserialize_publish+0x26>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   1deca:	9b03      	ldr	r3, [sp, #12]
   1decc:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   1dece:	d4de      	bmi.n	1de8e <MQTTDeserialize_publish+0x26>
	if (*qos > 0)
   1ded0:	6833      	ldr	r3, [r6, #0]
   1ded2:	2b00      	cmp	r3, #0
   1ded4:	dd04      	ble.n	1dee0 <MQTTDeserialize_publish+0x78>
		*packetid = readInt(&curdata);
   1ded6:	a803      	add	r0, sp, #12
   1ded8:	4b08      	ldr	r3, [pc, #32]	; (1defc <MQTTDeserialize_publish+0x94>)
   1deda:	4798      	blx	r3
   1dedc:	9b01      	ldr	r3, [sp, #4]
   1dede:	8018      	strh	r0, [r3, #0]
	*payloadlen = enddata - curdata;
   1dee0:	9b03      	ldr	r3, [sp, #12]
   1dee2:	1ae4      	subs	r4, r4, r3
   1dee4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1dee6:	6014      	str	r4, [r2, #0]
	*payload = curdata;
   1dee8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1deea:	6013      	str	r3, [r2, #0]
	rc = 1;
   1deec:	2701      	movs	r7, #1
   1deee:	e7ce      	b.n	1de8e <MQTTDeserialize_publish+0x26>
   1def0:	0001e04f 	.word	0x0001e04f
   1def4:	0001e021 	.word	0x0001e021
   1def8:	0001e115 	.word	0x0001e115
   1defc:	0001e03d 	.word	0x0001e03d

0001df00 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   1df00:	b570      	push	{r4, r5, r6, lr}
   1df02:	b082      	sub	sp, #8
   1df04:	0005      	movs	r5, r0
   1df06:	000e      	movs	r6, r1
   1df08:	0014      	movs	r4, r2
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   1df0a:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1df0c:	a801      	add	r0, sp, #4
   1df0e:	4b0c      	ldr	r3, [pc, #48]	; (1df40 <MQTTDeserialize_ack+0x40>)
   1df10:	4798      	blx	r3
	*dup = header.bits.dup;
   1df12:	0703      	lsls	r3, r0, #28
   1df14:	0fdb      	lsrs	r3, r3, #31
   1df16:	7033      	strb	r3, [r6, #0]
	*packettype = header.bits.type;
   1df18:	0600      	lsls	r0, r0, #24
   1df1a:	0f00      	lsrs	r0, r0, #28
   1df1c:	7028      	strb	r0, [r5, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1df1e:	4669      	mov	r1, sp
   1df20:	9801      	ldr	r0, [sp, #4]
   1df22:	4b08      	ldr	r3, [pc, #32]	; (1df44 <MQTTDeserialize_ack+0x44>)
   1df24:	4798      	blx	r3
   1df26:	9b01      	ldr	r3, [sp, #4]
   1df28:	181b      	adds	r3, r3, r0
   1df2a:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
   1df2c:	9b00      	ldr	r3, [sp, #0]
   1df2e:	2b01      	cmp	r3, #1
   1df30:	dd04      	ble.n	1df3c <MQTTDeserialize_ack+0x3c>
		goto exit;
	*packetid = readInt(&curdata);
   1df32:	a801      	add	r0, sp, #4
   1df34:	4b04      	ldr	r3, [pc, #16]	; (1df48 <MQTTDeserialize_ack+0x48>)
   1df36:	4798      	blx	r3
   1df38:	8020      	strh	r0, [r4, #0]

	rc = 1;
   1df3a:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   1df3c:	b002      	add	sp, #8
   1df3e:	bd70      	pop	{r4, r5, r6, pc}
   1df40:	0001e04f 	.word	0x0001e04f
   1df44:	0001e021 	.word	0x0001e021
   1df48:	0001e03d 	.word	0x0001e03d

0001df4c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   1df4c:	b530      	push	{r4, r5, lr}
	int i;

	for (i = 0; i < count; ++i)
   1df4e:	2900      	cmp	r1, #0
   1df50:	dd0a      	ble.n	1df68 <bufchar+0x1c>
   1df52:	4b06      	ldr	r3, [pc, #24]	; (1df6c <bufchar+0x20>)
   1df54:	681b      	ldr	r3, [r3, #0]
   1df56:	185d      	adds	r5, r3, r1
   1df58:	002c      	movs	r4, r5
		*c = *bufptr++;
   1df5a:	781a      	ldrb	r2, [r3, #0]
   1df5c:	7002      	strb	r2, [r0, #0]
   1df5e:	3301      	adds	r3, #1
	for (i = 0; i < count; ++i)
   1df60:	42a3      	cmp	r3, r4
   1df62:	d1fa      	bne.n	1df5a <bufchar+0xe>
   1df64:	4b01      	ldr	r3, [pc, #4]	; (1df6c <bufchar+0x20>)
   1df66:	601d      	str	r5, [r3, #0]
	return count;
}
   1df68:	0008      	movs	r0, r1
   1df6a:	bd30      	pop	{r4, r5, pc}
   1df6c:	20003714 	.word	0x20003714

0001df70 <MQTTPacket_encode>:
{
   1df70:	b5f0      	push	{r4, r5, r6, r7, lr}
   1df72:	b083      	sub	sp, #12
   1df74:	2500      	movs	r5, #0
		char d = length % 128;
   1df76:	267f      	movs	r6, #127	; 0x7f
			d |= 0x80;
   1df78:	2780      	movs	r7, #128	; 0x80
   1df7a:	427f      	negs	r7, r7
   1df7c:	9501      	str	r5, [sp, #4]
		char d = length % 128;
   1df7e:	17ca      	asrs	r2, r1, #31
   1df80:	0e54      	lsrs	r4, r2, #25
   1df82:	190b      	adds	r3, r1, r4
   1df84:	4033      	ands	r3, r6
   1df86:	1b1b      	subs	r3, r3, r4
   1df88:	b2db      	uxtb	r3, r3
		length /= 128;
   1df8a:	4032      	ands	r2, r6
   1df8c:	1851      	adds	r1, r2, r1
   1df8e:	11c9      	asrs	r1, r1, #7
		if (length > 0)
   1df90:	2900      	cmp	r1, #0
   1df92:	dd03      	ble.n	1df9c <MQTTPacket_encode+0x2c>
			d |= 0x80;
   1df94:	433b      	orrs	r3, r7
		buf[rc++] = d;
   1df96:	5543      	strb	r3, [r0, r5]
   1df98:	3501      	adds	r5, #1
   1df9a:	e7ef      	b.n	1df7c <MQTTPacket_encode+0xc>
   1df9c:	5543      	strb	r3, [r0, r5]
   1df9e:	9801      	ldr	r0, [sp, #4]
   1dfa0:	3001      	adds	r0, #1
}
   1dfa2:	b003      	add	sp, #12
   1dfa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001dfa6 <MQTTPacket_decode>:
{
   1dfa6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dfa8:	46ce      	mov	lr, r9
   1dfaa:	4647      	mov	r7, r8
   1dfac:	b580      	push	{r7, lr}
   1dfae:	b083      	sub	sp, #12
   1dfb0:	4680      	mov	r8, r0
   1dfb2:	000f      	movs	r7, r1
	*value = 0;
   1dfb4:	2300      	movs	r3, #0
   1dfb6:	600b      	str	r3, [r1, #0]
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   1dfb8:	2401      	movs	r4, #1
	int multiplier = 1;
   1dfba:	2601      	movs	r6, #1
		rc = (*getcharfn)(&c, 1);
   1dfbc:	466b      	mov	r3, sp
   1dfbe:	1ddd      	adds	r5, r3, #7
		*value += (c & 127) * multiplier;
   1dfc0:	237f      	movs	r3, #127	; 0x7f
   1dfc2:	4699      	mov	r9, r3
		rc = (*getcharfn)(&c, 1);
   1dfc4:	2101      	movs	r1, #1
   1dfc6:	0028      	movs	r0, r5
   1dfc8:	47c0      	blx	r8
		if (rc != 1)
   1dfca:	2801      	cmp	r0, #1
   1dfcc:	d10e      	bne.n	1dfec <MQTTPacket_decode+0x46>
		*value += (c & 127) * multiplier;
   1dfce:	782b      	ldrb	r3, [r5, #0]
   1dfd0:	464a      	mov	r2, r9
   1dfd2:	401a      	ands	r2, r3
   1dfd4:	4372      	muls	r2, r6
   1dfd6:	6839      	ldr	r1, [r7, #0]
   1dfd8:	468c      	mov	ip, r1
   1dfda:	4462      	add	r2, ip
   1dfdc:	603a      	str	r2, [r7, #0]
		multiplier *= 128;
   1dfde:	01f6      	lsls	r6, r6, #7
	} while ((c & 128) != 0);
   1dfe0:	b25b      	sxtb	r3, r3
   1dfe2:	2b00      	cmp	r3, #0
   1dfe4:	da02      	bge.n	1dfec <MQTTPacket_decode+0x46>
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   1dfe6:	3401      	adds	r4, #1
   1dfe8:	2c05      	cmp	r4, #5
   1dfea:	d1eb      	bne.n	1dfc4 <MQTTPacket_decode+0x1e>
}
   1dfec:	0020      	movs	r0, r4
   1dfee:	b003      	add	sp, #12
   1dff0:	bc0c      	pop	{r2, r3}
   1dff2:	4690      	mov	r8, r2
   1dff4:	4699      	mov	r9, r3
   1dff6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001dff8 <MQTTPacket_len>:
{
   1dff8:	0003      	movs	r3, r0
	rem_len += 1; /* header byte */
   1dffa:	1c42      	adds	r2, r0, #1
		rem_len += 1;
   1dffc:	3002      	adds	r0, #2
	if (rem_len < 128)
   1dffe:	2a7f      	cmp	r2, #127	; 0x7f
   1e000:	dd07      	ble.n	1e012 <MQTTPacket_len+0x1a>
	else if (rem_len < 16384)
   1e002:	4905      	ldr	r1, [pc, #20]	; (1e018 <MQTTPacket_len+0x20>)
		rem_len += 2;
   1e004:	1cd8      	adds	r0, r3, #3
	else if (rem_len < 16384)
   1e006:	428a      	cmp	r2, r1
   1e008:	dd03      	ble.n	1e012 <MQTTPacket_len+0x1a>
	else if (rem_len < 2097151)
   1e00a:	4904      	ldr	r1, [pc, #16]	; (1e01c <MQTTPacket_len+0x24>)
		rem_len += 4;
   1e00c:	1d58      	adds	r0, r3, #5
	else if (rem_len < 2097151)
   1e00e:	428a      	cmp	r2, r1
   1e010:	dd00      	ble.n	1e014 <MQTTPacket_len+0x1c>
}
   1e012:	4770      	bx	lr
		rem_len += 3;
   1e014:	1d18      	adds	r0, r3, #4
   1e016:	e7fc      	b.n	1e012 <MQTTPacket_len+0x1a>
   1e018:	00003fff 	.word	0x00003fff
   1e01c:	001ffffe 	.word	0x001ffffe

0001e020 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   1e020:	b510      	push	{r4, lr}
	bufptr = buf;
   1e022:	4b03      	ldr	r3, [pc, #12]	; (1e030 <MQTTPacket_decodeBuf+0x10>)
   1e024:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   1e026:	4803      	ldr	r0, [pc, #12]	; (1e034 <MQTTPacket_decodeBuf+0x14>)
   1e028:	4b03      	ldr	r3, [pc, #12]	; (1e038 <MQTTPacket_decodeBuf+0x18>)
   1e02a:	4798      	blx	r3
}
   1e02c:	bd10      	pop	{r4, pc}
   1e02e:	46c0      	nop			; (mov r8, r8)
   1e030:	20003714 	.word	0x20003714
   1e034:	0001df4d 	.word	0x0001df4d
   1e038:	0001dfa7 	.word	0x0001dfa7

0001e03c <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   1e03c:	0001      	movs	r1, r0
	unsigned char* ptr = *pptr;
   1e03e:	6802      	ldr	r2, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
   1e040:	7813      	ldrb	r3, [r2, #0]
   1e042:	021b      	lsls	r3, r3, #8
   1e044:	7850      	ldrb	r0, [r2, #1]
   1e046:	1818      	adds	r0, r3, r0
	*pptr += 2;
   1e048:	3202      	adds	r2, #2
   1e04a:	600a      	str	r2, [r1, #0]
	return len;
}
   1e04c:	4770      	bx	lr

0001e04e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   1e04e:	0002      	movs	r2, r0
	char c = **pptr;
   1e050:	6803      	ldr	r3, [r0, #0]
   1e052:	7818      	ldrb	r0, [r3, #0]
	(*pptr)++;
   1e054:	3301      	adds	r3, #1
   1e056:	6013      	str	r3, [r2, #0]
	return c;
}
   1e058:	4770      	bx	lr

0001e05a <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
   1e05a:	6803      	ldr	r3, [r0, #0]
   1e05c:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
   1e05e:	6803      	ldr	r3, [r0, #0]
   1e060:	3301      	adds	r3, #1
   1e062:	6003      	str	r3, [r0, #0]
}
   1e064:	4770      	bx	lr

0001e066 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   1e066:	b530      	push	{r4, r5, lr}
	**pptr = (unsigned char)(anInt / 256);
   1e068:	17ca      	asrs	r2, r1, #31
   1e06a:	23ff      	movs	r3, #255	; 0xff
   1e06c:	001c      	movs	r4, r3
   1e06e:	4014      	ands	r4, r2
   1e070:	1864      	adds	r4, r4, r1
   1e072:	1224      	asrs	r4, r4, #8
   1e074:	6805      	ldr	r5, [r0, #0]
   1e076:	702c      	strb	r4, [r5, #0]
	(*pptr)++;
   1e078:	6804      	ldr	r4, [r0, #0]
   1e07a:	1c65      	adds	r5, r4, #1
   1e07c:	6005      	str	r5, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
   1e07e:	0e12      	lsrs	r2, r2, #24
   1e080:	1889      	adds	r1, r1, r2
   1e082:	400b      	ands	r3, r1
   1e084:	1a9b      	subs	r3, r3, r2
   1e086:	7063      	strb	r3, [r4, #1]
	(*pptr)++;
   1e088:	6803      	ldr	r3, [r0, #0]
   1e08a:	3301      	adds	r3, #1
   1e08c:	6003      	str	r3, [r0, #0]
}
   1e08e:	bd30      	pop	{r4, r5, pc}

0001e090 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   1e090:	b570      	push	{r4, r5, r6, lr}
   1e092:	0004      	movs	r4, r0
   1e094:	000e      	movs	r6, r1
	int len = strlen(string);
   1e096:	0008      	movs	r0, r1
   1e098:	4b08      	ldr	r3, [pc, #32]	; (1e0bc <writeCString+0x2c>)
   1e09a:	4798      	blx	r3
   1e09c:	0005      	movs	r5, r0
	writeInt(pptr, len);
   1e09e:	0001      	movs	r1, r0
   1e0a0:	0020      	movs	r0, r4
   1e0a2:	4b07      	ldr	r3, [pc, #28]	; (1e0c0 <writeCString+0x30>)
   1e0a4:	4798      	blx	r3
	memcpy(*pptr, string, len);
   1e0a6:	002a      	movs	r2, r5
   1e0a8:	0031      	movs	r1, r6
   1e0aa:	6820      	ldr	r0, [r4, #0]
   1e0ac:	4b05      	ldr	r3, [pc, #20]	; (1e0c4 <writeCString+0x34>)
   1e0ae:	4798      	blx	r3
	*pptr += len;
   1e0b0:	6823      	ldr	r3, [r4, #0]
   1e0b2:	469c      	mov	ip, r3
   1e0b4:	4465      	add	r5, ip
   1e0b6:	6025      	str	r5, [r4, #0]
}
   1e0b8:	bd70      	pop	{r4, r5, r6, pc}
   1e0ba:	46c0      	nop			; (mov r8, r8)
   1e0bc:	0001ff7b 	.word	0x0001ff7b
   1e0c0:	0001e067 	.word	0x0001e067
   1e0c4:	0001fbe5 	.word	0x0001fbe5

0001e0c8 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   1e0c8:	b530      	push	{r4, r5, lr}
   1e0ca:	b085      	sub	sp, #20
   1e0cc:	0005      	movs	r5, r0
   1e0ce:	9101      	str	r1, [sp, #4]
   1e0d0:	9303      	str	r3, [sp, #12]
   1e0d2:	1e14      	subs	r4, r2, #0
	if (mqttstring.lenstring.len > 0)
   1e0d4:	dc06      	bgt.n	1e0e4 <writeMQTTString+0x1c>
   1e0d6:	9901      	ldr	r1, [sp, #4]
	{
		writeInt(pptr, mqttstring.lenstring.len);
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
		*pptr += mqttstring.lenstring.len;
	}
	else if (mqttstring.cstring)
   1e0d8:	2900      	cmp	r1, #0
   1e0da:	d010      	beq.n	1e0fe <writeMQTTString+0x36>
		writeCString(pptr, mqttstring.cstring);
   1e0dc:	4b0a      	ldr	r3, [pc, #40]	; (1e108 <writeMQTTString+0x40>)
   1e0de:	4798      	blx	r3
	else
		writeInt(pptr, 0);
}
   1e0e0:	b005      	add	sp, #20
   1e0e2:	bd30      	pop	{r4, r5, pc}
		writeInt(pptr, mqttstring.lenstring.len);
   1e0e4:	0011      	movs	r1, r2
   1e0e6:	4b09      	ldr	r3, [pc, #36]	; (1e10c <writeMQTTString+0x44>)
   1e0e8:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   1e0ea:	0022      	movs	r2, r4
   1e0ec:	9903      	ldr	r1, [sp, #12]
   1e0ee:	6828      	ldr	r0, [r5, #0]
   1e0f0:	4b07      	ldr	r3, [pc, #28]	; (1e110 <writeMQTTString+0x48>)
   1e0f2:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   1e0f4:	682b      	ldr	r3, [r5, #0]
   1e0f6:	469c      	mov	ip, r3
   1e0f8:	4464      	add	r4, ip
   1e0fa:	602c      	str	r4, [r5, #0]
   1e0fc:	e7f0      	b.n	1e0e0 <writeMQTTString+0x18>
		writeInt(pptr, 0);
   1e0fe:	2100      	movs	r1, #0
   1e100:	4b02      	ldr	r3, [pc, #8]	; (1e10c <writeMQTTString+0x44>)
   1e102:	4798      	blx	r3
}
   1e104:	e7ec      	b.n	1e0e0 <writeMQTTString+0x18>
   1e106:	46c0      	nop			; (mov r8, r8)
   1e108:	0001e091 	.word	0x0001e091
   1e10c:	0001e067 	.word	0x0001e067
   1e110:	0001fbe5 	.word	0x0001fbe5

0001e114 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   1e114:	b570      	push	{r4, r5, r6, lr}
   1e116:	0005      	movs	r5, r0
   1e118:	000c      	movs	r4, r1
   1e11a:	0016      	movs	r6, r2
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   1e11c:	680b      	ldr	r3, [r1, #0]
   1e11e:	1ad3      	subs	r3, r2, r3
   1e120:	2b01      	cmp	r3, #1
   1e122:	dd12      	ble.n	1e14a <readMQTTLenString+0x36>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   1e124:	0008      	movs	r0, r1
   1e126:	4b0a      	ldr	r3, [pc, #40]	; (1e150 <readMQTTLenString+0x3c>)
   1e128:	4798      	blx	r3
   1e12a:	6068      	str	r0, [r5, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   1e12c:	6822      	ldr	r2, [r4, #0]
   1e12e:	1811      	adds	r1, r2, r0
	int rc = 0;
   1e130:	2300      	movs	r3, #0
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   1e132:	428e      	cmp	r6, r1
   1e134:	d305      	bcc.n	1e142 <readMQTTLenString+0x2e>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   1e136:	60aa      	str	r2, [r5, #8]
			*pptr += mqttstring->lenstring.len;
   1e138:	6823      	ldr	r3, [r4, #0]
   1e13a:	469c      	mov	ip, r3
   1e13c:	4460      	add	r0, ip
   1e13e:	6020      	str	r0, [r4, #0]
			rc = 1;
   1e140:	2301      	movs	r3, #1
		}
	}
	mqttstring->cstring = NULL;
   1e142:	2200      	movs	r2, #0
   1e144:	602a      	str	r2, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
   1e146:	0018      	movs	r0, r3
   1e148:	bd70      	pop	{r4, r5, r6, pc}
	int rc = 0;
   1e14a:	2300      	movs	r3, #0
   1e14c:	e7f9      	b.n	1e142 <readMQTTLenString+0x2e>
   1e14e:	46c0      	nop			; (mov r8, r8)
   1e150:	0001e03d 	.word	0x0001e03d

0001e154 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   1e154:	b500      	push	{lr}
   1e156:	b085      	sub	sp, #20
   1e158:	9102      	str	r1, [sp, #8]
	int rc = 0;

	if (mqttstring.cstring)
   1e15a:	2800      	cmp	r0, #0
   1e15c:	d003      	beq.n	1e166 <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
   1e15e:	4b03      	ldr	r3, [pc, #12]	; (1e16c <MQTTstrlen+0x18>)
   1e160:	4798      	blx	r3
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
   1e162:	b005      	add	sp, #20
   1e164:	bd00      	pop	{pc}
		rc = mqttstring.lenstring.len;
   1e166:	9802      	ldr	r0, [sp, #8]
	return rc;
   1e168:	e7fb      	b.n	1e162 <MQTTstrlen+0xe>
   1e16a:	46c0      	nop			; (mov r8, r8)
   1e16c:	0001ff7b 	.word	0x0001ff7b

0001e170 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   1e170:	b570      	push	{r4, r5, r6, lr}
   1e172:	000d      	movs	r5, r1
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
   1e174:	6806      	ldr	r6, [r0, #0]
   1e176:	2e00      	cmp	r6, #0
   1e178:	d00b      	beq.n	1e192 <MQTTPacket_equals+0x22>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
   1e17a:	0030      	movs	r0, r6
   1e17c:	4b0b      	ldr	r3, [pc, #44]	; (1e1ac <MQTTPacket_equals+0x3c>)
   1e17e:	4798      	blx	r3
   1e180:	0004      	movs	r4, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
   1e182:	0028      	movs	r0, r5
   1e184:	4b09      	ldr	r3, [pc, #36]	; (1e1ac <MQTTPacket_equals+0x3c>)
   1e186:	4798      	blx	r3
   1e188:	2300      	movs	r3, #0
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   1e18a:	4284      	cmp	r4, r0
   1e18c:	d004      	beq.n	1e198 <MQTTPacket_equals+0x28>
}
   1e18e:	0018      	movs	r0, r3
   1e190:	bd70      	pop	{r4, r5, r6, pc}
		aptr = a->lenstring.data;
   1e192:	6886      	ldr	r6, [r0, #8]
		alen = a->lenstring.len;
   1e194:	6844      	ldr	r4, [r0, #4]
   1e196:	e7f4      	b.n	1e182 <MQTTPacket_equals+0x12>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   1e198:	0022      	movs	r2, r4
   1e19a:	0029      	movs	r1, r5
   1e19c:	0030      	movs	r0, r6
   1e19e:	4b04      	ldr	r3, [pc, #16]	; (1e1b0 <MQTTPacket_equals+0x40>)
   1e1a0:	4798      	blx	r3
   1e1a2:	4243      	negs	r3, r0
   1e1a4:	4143      	adcs	r3, r0
   1e1a6:	b2db      	uxtb	r3, r3
   1e1a8:	e7f1      	b.n	1e18e <MQTTPacket_equals+0x1e>
   1e1aa:	46c0      	nop			; (mov r8, r8)
   1e1ac:	0001ff7b 	.word	0x0001ff7b
   1e1b0:	0001ff89 	.word	0x0001ff89

0001e1b4 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   1e1b4:	b510      	push	{r4, lr}
   1e1b6:	b084      	sub	sp, #16
   1e1b8:	0004      	movs	r4, r0
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   1e1ba:	0008      	movs	r0, r1
   1e1bc:	0011      	movs	r1, r2
   1e1be:	001a      	movs	r2, r3
   1e1c0:	4b05      	ldr	r3, [pc, #20]	; (1e1d8 <MQTTSerialize_publishLength+0x24>)
   1e1c2:	4798      	blx	r3
   1e1c4:	3002      	adds	r0, #2
   1e1c6:	9b06      	ldr	r3, [sp, #24]
   1e1c8:	469c      	mov	ip, r3
   1e1ca:	4460      	add	r0, ip
	if (qos > 0)
   1e1cc:	2c00      	cmp	r4, #0
   1e1ce:	dd00      	ble.n	1e1d2 <MQTTSerialize_publishLength+0x1e>
		len += 2; /* packetid */
   1e1d0:	3002      	adds	r0, #2
	return len;
}
   1e1d2:	b004      	add	sp, #16
   1e1d4:	bd10      	pop	{r4, pc}
   1e1d6:	46c0      	nop			; (mov r8, r8)
   1e1d8:	0001e155 	.word	0x0001e155

0001e1dc <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   1e1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e1de:	46de      	mov	lr, fp
   1e1e0:	4657      	mov	r7, sl
   1e1e2:	464e      	mov	r6, r9
   1e1e4:	b5c0      	push	{r6, r7, lr}
   1e1e6:	b084      	sub	sp, #16
   1e1e8:	0007      	movs	r7, r0
   1e1ea:	468b      	mov	fp, r1
   1e1ec:	4692      	mov	sl, r2
   1e1ee:	001e      	movs	r6, r3
   1e1f0:	ab0c      	add	r3, sp, #48	; 0x30
   1e1f2:	781b      	ldrb	r3, [r3, #0]
   1e1f4:	4699      	mov	r9, r3
   1e1f6:	ab0d      	add	r3, sp, #52	; 0x34
   1e1f8:	881c      	ldrh	r4, [r3, #0]
	unsigned char *ptr = buf;
   1e1fa:	9003      	str	r0, [sp, #12]
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   1e1fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1e1fe:	9300      	str	r3, [sp, #0]
   1e200:	990e      	ldr	r1, [sp, #56]	; 0x38
   1e202:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1e204:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e206:	0030      	movs	r0, r6
   1e208:	4d1f      	ldr	r5, [pc, #124]	; (1e288 <MQTTSerialize_publish+0xac>)
   1e20a:	47a8      	blx	r5
   1e20c:	0005      	movs	r5, r0
   1e20e:	4b1f      	ldr	r3, [pc, #124]	; (1e28c <MQTTSerialize_publish+0xb0>)
   1e210:	4798      	blx	r3
   1e212:	4558      	cmp	r0, fp
   1e214:	dc34      	bgt.n	1e280 <MQTTSerialize_publish+0xa4>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
	header.bits.dup = dup;
   1e216:	2201      	movs	r2, #1
   1e218:	4653      	mov	r3, sl
   1e21a:	4013      	ands	r3, r2
   1e21c:	00db      	lsls	r3, r3, #3
	header.bits.qos = qos;
   1e21e:	2103      	movs	r1, #3
   1e220:	4031      	ands	r1, r6
   1e222:	0048      	lsls	r0, r1, #1
   1e224:	2130      	movs	r1, #48	; 0x30
   1e226:	4319      	orrs	r1, r3
   1e228:	4301      	orrs	r1, r0
	header.bits.retain = retained;
   1e22a:	464b      	mov	r3, r9
   1e22c:	4013      	ands	r3, r2
   1e22e:	4391      	bics	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   1e230:	4319      	orrs	r1, r3
   1e232:	a803      	add	r0, sp, #12
   1e234:	4b16      	ldr	r3, [pc, #88]	; (1e290 <MQTTSerialize_publish+0xb4>)
   1e236:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   1e238:	0029      	movs	r1, r5
   1e23a:	9803      	ldr	r0, [sp, #12]
   1e23c:	4b15      	ldr	r3, [pc, #84]	; (1e294 <MQTTSerialize_publish+0xb8>)
   1e23e:	4798      	blx	r3
   1e240:	9b03      	ldr	r3, [sp, #12]
   1e242:	469c      	mov	ip, r3
   1e244:	4460      	add	r0, ip
   1e246:	9003      	str	r0, [sp, #12]

	writeMQTTString(&ptr, topicName);
   1e248:	990e      	ldr	r1, [sp, #56]	; 0x38
   1e24a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1e24c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e24e:	a803      	add	r0, sp, #12
   1e250:	4d11      	ldr	r5, [pc, #68]	; (1e298 <MQTTSerialize_publish+0xbc>)
   1e252:	47a8      	blx	r5

	if (qos > 0)
   1e254:	2e00      	cmp	r6, #0
   1e256:	dd03      	ble.n	1e260 <MQTTSerialize_publish+0x84>
		writeInt(&ptr, packetid);
   1e258:	0021      	movs	r1, r4
   1e25a:	a803      	add	r0, sp, #12
   1e25c:	4b0f      	ldr	r3, [pc, #60]	; (1e29c <MQTTSerialize_publish+0xc0>)
   1e25e:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   1e260:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1e262:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e264:	9803      	ldr	r0, [sp, #12]
   1e266:	4b0e      	ldr	r3, [pc, #56]	; (1e2a0 <MQTTSerialize_publish+0xc4>)
   1e268:	4798      	blx	r3
	ptr += payloadlen;
   1e26a:	9b03      	ldr	r3, [sp, #12]
   1e26c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1e26e:	4694      	mov	ip, r2
   1e270:	4463      	add	r3, ip

	rc = ptr - buf;
   1e272:	1bd8      	subs	r0, r3, r7

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   1e274:	b004      	add	sp, #16
   1e276:	bc1c      	pop	{r2, r3, r4}
   1e278:	4691      	mov	r9, r2
   1e27a:	469a      	mov	sl, r3
   1e27c:	46a3      	mov	fp, r4
   1e27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1e280:	2002      	movs	r0, #2
   1e282:	4240      	negs	r0, r0
	return rc;
   1e284:	e7f6      	b.n	1e274 <MQTTSerialize_publish+0x98>
   1e286:	46c0      	nop			; (mov r8, r8)
   1e288:	0001e1b5 	.word	0x0001e1b5
   1e28c:	0001dff9 	.word	0x0001dff9
   1e290:	0001e05b 	.word	0x0001e05b
   1e294:	0001df71 	.word	0x0001df71
   1e298:	0001e0c9 	.word	0x0001e0c9
   1e29c:	0001e067 	.word	0x0001e067
   1e2a0:	0001fbe5 	.word	0x0001fbe5

0001e2a4 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   1e2a4:	b530      	push	{r4, r5, lr}
   1e2a6:	b083      	sub	sp, #12
   1e2a8:	0004      	movs	r4, r0
   1e2aa:	a806      	add	r0, sp, #24
   1e2ac:	8805      	ldrh	r5, [r0, #0]
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;
   1e2ae:	9401      	str	r4, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 4)
   1e2b0:	2903      	cmp	r1, #3
   1e2b2:	dd1e      	ble.n	1e2f2 <MQTTSerialize_ack+0x4e>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
   1e2b4:	210f      	movs	r1, #15
   1e2b6:	4011      	ands	r1, r2
	header.bits.dup = dup;
   1e2b8:	2001      	movs	r0, #1
   1e2ba:	4003      	ands	r3, r0
   1e2bc:	00db      	lsls	r3, r3, #3
   1e2be:	0109      	lsls	r1, r1, #4
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   1e2c0:	3a06      	subs	r2, #6
   1e2c2:	4250      	negs	r0, r2
   1e2c4:	4142      	adcs	r2, r0
   1e2c6:	0052      	lsls	r2, r2, #1
   1e2c8:	4319      	orrs	r1, r3
	writeChar(&ptr, header.byte); /* write header */
   1e2ca:	4311      	orrs	r1, r2
   1e2cc:	a801      	add	r0, sp, #4
   1e2ce:	4b0a      	ldr	r3, [pc, #40]	; (1e2f8 <MQTTSerialize_ack+0x54>)
   1e2d0:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   1e2d2:	2102      	movs	r1, #2
   1e2d4:	9801      	ldr	r0, [sp, #4]
   1e2d6:	4b09      	ldr	r3, [pc, #36]	; (1e2fc <MQTTSerialize_ack+0x58>)
   1e2d8:	4798      	blx	r3
   1e2da:	9b01      	ldr	r3, [sp, #4]
   1e2dc:	469c      	mov	ip, r3
   1e2de:	4460      	add	r0, ip
   1e2e0:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
   1e2e2:	0029      	movs	r1, r5
   1e2e4:	a801      	add	r0, sp, #4
   1e2e6:	4b06      	ldr	r3, [pc, #24]	; (1e300 <MQTTSerialize_ack+0x5c>)
   1e2e8:	4798      	blx	r3
	rc = ptr - buf;
   1e2ea:	9b01      	ldr	r3, [sp, #4]
   1e2ec:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   1e2ee:	b003      	add	sp, #12
   1e2f0:	bd30      	pop	{r4, r5, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1e2f2:	2002      	movs	r0, #2
   1e2f4:	4240      	negs	r0, r0
	return rc;
   1e2f6:	e7fa      	b.n	1e2ee <MQTTSerialize_ack+0x4a>
   1e2f8:	0001e05b 	.word	0x0001e05b
   1e2fc:	0001df71 	.word	0x0001df71
   1e300:	0001e067 	.word	0x0001e067

0001e304 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   1e304:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e306:	46c6      	mov	lr, r8
   1e308:	b500      	push	{lr}
   1e30a:	1e07      	subs	r7, r0, #0
	int i;
	int len = 2; /* packetid */

	for (i = 0; i < count; ++i)
   1e30c:	dd12      	ble.n	1e334 <MQTTSerialize_subscribeLength+0x30>
   1e30e:	000c      	movs	r4, r1
   1e310:	2602      	movs	r6, #2
   1e312:	2500      	movs	r5, #0
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   1e314:	4b08      	ldr	r3, [pc, #32]	; (1e338 <MQTTSerialize_subscribeLength+0x34>)
   1e316:	4698      	mov	r8, r3
   1e318:	6820      	ldr	r0, [r4, #0]
   1e31a:	6861      	ldr	r1, [r4, #4]
   1e31c:	68a2      	ldr	r2, [r4, #8]
   1e31e:	47c0      	blx	r8
   1e320:	3003      	adds	r0, #3
   1e322:	1836      	adds	r6, r6, r0
	for (i = 0; i < count; ++i)
   1e324:	3501      	adds	r5, #1
   1e326:	340c      	adds	r4, #12
   1e328:	42af      	cmp	r7, r5
   1e32a:	d1f5      	bne.n	1e318 <MQTTSerialize_subscribeLength+0x14>
	return len;
}
   1e32c:	0030      	movs	r0, r6
   1e32e:	bc04      	pop	{r2}
   1e330:	4690      	mov	r8, r2
   1e332:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int len = 2; /* packetid */
   1e334:	2602      	movs	r6, #2
	return len;
   1e336:	e7f9      	b.n	1e32c <MQTTSerialize_subscribeLength+0x28>
   1e338:	0001e155 	.word	0x0001e155

0001e33c <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   1e33c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e33e:	46d6      	mov	lr, sl
   1e340:	464f      	mov	r7, r9
   1e342:	4646      	mov	r6, r8
   1e344:	b5c0      	push	{r6, r7, lr}
   1e346:	b084      	sub	sp, #16
   1e348:	4682      	mov	sl, r0
   1e34a:	000e      	movs	r6, r1
   1e34c:	0015      	movs	r5, r2
   1e34e:	9301      	str	r3, [sp, #4]
   1e350:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	unsigned char *ptr = buf;
   1e352:	9003      	str	r0, [sp, #12]
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   1e354:	990d      	ldr	r1, [sp, #52]	; 0x34
   1e356:	0038      	movs	r0, r7
   1e358:	4b1f      	ldr	r3, [pc, #124]	; (1e3d8 <MQTTSerialize_subscribe+0x9c>)
   1e35a:	4798      	blx	r3
   1e35c:	0004      	movs	r4, r0
   1e35e:	4b1f      	ldr	r3, [pc, #124]	; (1e3dc <MQTTSerialize_subscribe+0xa0>)
   1e360:	4798      	blx	r3
   1e362:	42b0      	cmp	r0, r6
   1e364:	dc34      	bgt.n	1e3d0 <MQTTSerialize_subscribe+0x94>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
	header.bits.dup = dup;
   1e366:	2101      	movs	r1, #1
   1e368:	4029      	ands	r1, r5
   1e36a:	00ca      	lsls	r2, r1, #3
	header.bits.qos = 1;
   1e36c:	2180      	movs	r1, #128	; 0x80
   1e36e:	4311      	orrs	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   1e370:	2302      	movs	r3, #2
   1e372:	4319      	orrs	r1, r3
   1e374:	a803      	add	r0, sp, #12
   1e376:	4b1a      	ldr	r3, [pc, #104]	; (1e3e0 <MQTTSerialize_subscribe+0xa4>)
   1e378:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   1e37a:	0021      	movs	r1, r4
   1e37c:	9803      	ldr	r0, [sp, #12]
   1e37e:	4b19      	ldr	r3, [pc, #100]	; (1e3e4 <MQTTSerialize_subscribe+0xa8>)
   1e380:	4798      	blx	r3
   1e382:	9a03      	ldr	r2, [sp, #12]
   1e384:	4694      	mov	ip, r2
   1e386:	4460      	add	r0, ip
   1e388:	9003      	str	r0, [sp, #12]

	writeInt(&ptr, packetid);
   1e38a:	9901      	ldr	r1, [sp, #4]
   1e38c:	a803      	add	r0, sp, #12
   1e38e:	4b16      	ldr	r3, [pc, #88]	; (1e3e8 <MQTTSerialize_subscribe+0xac>)
   1e390:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   1e392:	2f00      	cmp	r7, #0
   1e394:	dd13      	ble.n	1e3be <MQTTSerialize_subscribe+0x82>
   1e396:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1e398:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1e39a:	2500      	movs	r5, #0
	{
		writeMQTTString(&ptr, topicFilters[i]);
   1e39c:	4b13      	ldr	r3, [pc, #76]	; (1e3ec <MQTTSerialize_subscribe+0xb0>)
   1e39e:	4699      	mov	r9, r3
		writeChar(&ptr, requestedQoSs[i]);
   1e3a0:	4b0f      	ldr	r3, [pc, #60]	; (1e3e0 <MQTTSerialize_subscribe+0xa4>)
   1e3a2:	4698      	mov	r8, r3
		writeMQTTString(&ptr, topicFilters[i]);
   1e3a4:	6821      	ldr	r1, [r4, #0]
   1e3a6:	6862      	ldr	r2, [r4, #4]
   1e3a8:	68a3      	ldr	r3, [r4, #8]
   1e3aa:	a803      	add	r0, sp, #12
   1e3ac:	47c8      	blx	r9
		writeChar(&ptr, requestedQoSs[i]);
   1e3ae:	ce02      	ldmia	r6!, {r1}
   1e3b0:	b2c9      	uxtb	r1, r1
   1e3b2:	a803      	add	r0, sp, #12
   1e3b4:	47c0      	blx	r8
	for (i = 0; i < count; ++i)
   1e3b6:	3501      	adds	r5, #1
   1e3b8:	340c      	adds	r4, #12
   1e3ba:	42af      	cmp	r7, r5
   1e3bc:	d1f2      	bne.n	1e3a4 <MQTTSerialize_subscribe+0x68>
	}

	rc = ptr - buf;
   1e3be:	9b03      	ldr	r3, [sp, #12]
   1e3c0:	4652      	mov	r2, sl
   1e3c2:	1a98      	subs	r0, r3, r2
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   1e3c4:	b004      	add	sp, #16
   1e3c6:	bc1c      	pop	{r2, r3, r4}
   1e3c8:	4690      	mov	r8, r2
   1e3ca:	4699      	mov	r9, r3
   1e3cc:	46a2      	mov	sl, r4
   1e3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1e3d0:	2002      	movs	r0, #2
   1e3d2:	4240      	negs	r0, r0
	return rc;
   1e3d4:	e7f6      	b.n	1e3c4 <MQTTSerialize_subscribe+0x88>
   1e3d6:	46c0      	nop			; (mov r8, r8)
   1e3d8:	0001e305 	.word	0x0001e305
   1e3dc:	0001dff9 	.word	0x0001dff9
   1e3e0:	0001e05b 	.word	0x0001e05b
   1e3e4:	0001df71 	.word	0x0001df71
   1e3e8:	0001e067 	.word	0x0001e067
   1e3ec:	0001e0c9 	.word	0x0001e0c9

0001e3f0 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   1e3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e3f2:	46ce      	mov	lr, r9
   1e3f4:	4647      	mov	r7, r8
   1e3f6:	b580      	push	{r7, lr}
   1e3f8:	b083      	sub	sp, #12
   1e3fa:	0004      	movs	r4, r0
   1e3fc:	000e      	movs	r6, r1
   1e3fe:	0015      	movs	r5, r2
   1e400:	001f      	movs	r7, r3
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   1e402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e404:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1e406:	a801      	add	r0, sp, #4
   1e408:	4b1e      	ldr	r3, [pc, #120]	; (1e484 <MQTTDeserialize_suback+0x94>)
   1e40a:	4798      	blx	r3
	if (header.bits.type != SUBACK)
   1e40c:	23f0      	movs	r3, #240	; 0xf0
   1e40e:	4003      	ands	r3, r0
	int rc = 0;
   1e410:	2000      	movs	r0, #0
	if (header.bits.type != SUBACK)
   1e412:	2b90      	cmp	r3, #144	; 0x90
   1e414:	d004      	beq.n	1e420 <MQTTDeserialize_suback+0x30>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   1e416:	b003      	add	sp, #12
   1e418:	bc0c      	pop	{r2, r3}
   1e41a:	4690      	mov	r8, r2
   1e41c:	4699      	mov	r9, r3
   1e41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1e420:	4669      	mov	r1, sp
   1e422:	9801      	ldr	r0, [sp, #4]
   1e424:	4b18      	ldr	r3, [pc, #96]	; (1e488 <MQTTDeserialize_suback+0x98>)
   1e426:	4798      	blx	r3
   1e428:	9b01      	ldr	r3, [sp, #4]
   1e42a:	181b      	adds	r3, r3, r0
   1e42c:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;
   1e42e:	9a00      	ldr	r2, [sp, #0]
	if (enddata - curdata < 2)
   1e430:	2a01      	cmp	r2, #1
   1e432:	ddf0      	ble.n	1e416 <MQTTDeserialize_suback+0x26>
	enddata = curdata + mylen;
   1e434:	4698      	mov	r8, r3
   1e436:	4490      	add	r8, r2
	*packetid = readInt(&curdata);
   1e438:	a801      	add	r0, sp, #4
   1e43a:	4b14      	ldr	r3, [pc, #80]	; (1e48c <MQTTDeserialize_suback+0x9c>)
   1e43c:	4798      	blx	r3
   1e43e:	8020      	strh	r0, [r4, #0]
	*count = 0;
   1e440:	2300      	movs	r3, #0
   1e442:	602b      	str	r3, [r5, #0]
	while (curdata < enddata)
   1e444:	9b01      	ldr	r3, [sp, #4]
   1e446:	4598      	cmp	r8, r3
   1e448:	d916      	bls.n	1e478 <MQTTDeserialize_suback+0x88>
		if (*count > maxcount)
   1e44a:	2e00      	cmp	r6, #0
   1e44c:	db16      	blt.n	1e47c <MQTTDeserialize_suback+0x8c>
   1e44e:	2300      	movs	r3, #0
		grantedQoSs[(*count)++] = readChar(&curdata);
   1e450:	4a0c      	ldr	r2, [pc, #48]	; (1e484 <MQTTDeserialize_suback+0x94>)
   1e452:	4691      	mov	r9, r2
   1e454:	1c5a      	adds	r2, r3, #1
   1e456:	602a      	str	r2, [r5, #0]
   1e458:	009b      	lsls	r3, r3, #2
   1e45a:	18fc      	adds	r4, r7, r3
   1e45c:	a801      	add	r0, sp, #4
   1e45e:	47c8      	blx	r9
   1e460:	6020      	str	r0, [r4, #0]
	while (curdata < enddata)
   1e462:	9b01      	ldr	r3, [sp, #4]
   1e464:	4598      	cmp	r8, r3
   1e466:	d905      	bls.n	1e474 <MQTTDeserialize_suback+0x84>
		if (*count > maxcount)
   1e468:	682b      	ldr	r3, [r5, #0]
   1e46a:	42b3      	cmp	r3, r6
   1e46c:	ddf2      	ble.n	1e454 <MQTTDeserialize_suback+0x64>
			rc = -1;
   1e46e:	2001      	movs	r0, #1
   1e470:	4240      	negs	r0, r0
	return rc;
   1e472:	e7d0      	b.n	1e416 <MQTTDeserialize_suback+0x26>
	rc = 1;
   1e474:	2001      	movs	r0, #1
   1e476:	e7ce      	b.n	1e416 <MQTTDeserialize_suback+0x26>
   1e478:	2001      	movs	r0, #1
   1e47a:	e7cc      	b.n	1e416 <MQTTDeserialize_suback+0x26>
			rc = -1;
   1e47c:	2001      	movs	r0, #1
   1e47e:	4240      	negs	r0, r0
   1e480:	e7c9      	b.n	1e416 <MQTTDeserialize_suback+0x26>
   1e482:	46c0      	nop			; (mov r8, r8)
   1e484:	0001e04f 	.word	0x0001e04f
   1e488:	0001e021 	.word	0x0001e021
   1e48c:	0001e03d 	.word	0x0001e03d

0001e490 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   1e490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e492:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
   1e494:	2041      	movs	r0, #65	; 0x41
   1e496:	5c23      	ldrb	r3, [r4, r0]
   1e498:	2501      	movs	r5, #1
   1e49a:	432b      	orrs	r3, r5
   1e49c:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   1e49e:	b292      	uxth	r2, r2
   1e4a0:	2000      	movs	r0, #0
   1e4a2:	5620      	ldrsb	r0, [r4, r0]
   1e4a4:	2300      	movs	r3, #0
   1e4a6:	4d12      	ldr	r5, [pc, #72]	; (1e4f0 <_http_client_send_wait+0x60>)
   1e4a8:	47a8      	blx	r5
   1e4aa:	2800      	cmp	r0, #0
   1e4ac:	db16      	blt.n	1e4dc <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   1e4ae:	2341      	movs	r3, #65	; 0x41
   1e4b0:	5ce3      	ldrb	r3, [r4, r3]
   1e4b2:	07db      	lsls	r3, r3, #31
   1e4b4:	d518      	bpl.n	1e4e8 <_http_client_send_wait+0x58>
   1e4b6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
   1e4b8:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   1e4ba:	2b02      	cmp	r3, #2
   1e4bc:	d917      	bls.n	1e4ee <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
   1e4be:	4f0d      	ldr	r7, [pc, #52]	; (1e4f4 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
   1e4c0:	4e0d      	ldr	r6, [pc, #52]	; (1e4f8 <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   1e4c2:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
   1e4c4:	2000      	movs	r0, #0
   1e4c6:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
   1e4c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1e4ca:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   1e4cc:	5d63      	ldrb	r3, [r4, r5]
   1e4ce:	07db      	lsls	r3, r3, #31
   1e4d0:	d50c      	bpl.n	1e4ec <_http_client_send_wait+0x5c>
   1e4d2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   1e4d4:	2b02      	cmp	r3, #2
   1e4d6:	d8f5      	bhi.n	1e4c4 <_http_client_send_wait+0x34>
	return 0;
   1e4d8:	2000      	movs	r0, #0
   1e4da:	e008      	b.n	1e4ee <_http_client_send_wait+0x5e>
		module->sending = 0;
   1e4dc:	2241      	movs	r2, #65	; 0x41
   1e4de:	5ca3      	ldrb	r3, [r4, r2]
   1e4e0:	2101      	movs	r1, #1
   1e4e2:	438b      	bics	r3, r1
   1e4e4:	54a3      	strb	r3, [r4, r2]
		return result;
   1e4e6:	e002      	b.n	1e4ee <_http_client_send_wait+0x5e>
	return 0;
   1e4e8:	2000      	movs	r0, #0
   1e4ea:	e000      	b.n	1e4ee <_http_client_send_wait+0x5e>
   1e4ec:	2000      	movs	r0, #0
}
   1e4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e4f0:	00018a71 	.word	0x00018a71
   1e4f4:	00016a89 	.word	0x00016a89
   1e4f8:	0001f625 	.word	0x0001f625

0001e4fc <http_client_get_config_defaults>:
	config->port = 80;
   1e4fc:	2350      	movs	r3, #80	; 0x50
   1e4fe:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   1e500:	2300      	movs	r3, #0
   1e502:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
   1e504:	4a05      	ldr	r2, [pc, #20]	; (1e51c <http_client_get_config_defaults+0x20>)
   1e506:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
   1e508:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
   1e50a:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
   1e50c:	3301      	adds	r3, #1
   1e50e:	33ff      	adds	r3, #255	; 0xff
   1e510:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   1e512:	3bae      	subs	r3, #174	; 0xae
   1e514:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   1e516:	4b02      	ldr	r3, [pc, #8]	; (1e520 <http_client_get_config_defaults+0x24>)
   1e518:	6183      	str	r3, [r0, #24]
}
   1e51a:	4770      	bx	lr
   1e51c:	00004e20 	.word	0x00004e20
   1e520:	00023060 	.word	0x00023060

0001e524 <http_client_init>:
{
   1e524:	b570      	push	{r4, r5, r6, lr}
   1e526:	0004      	movs	r4, r0
   1e528:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
   1e52a:	2800      	cmp	r0, #0
   1e52c:	d038      	beq.n	1e5a0 <http_client_init+0x7c>
   1e52e:	2900      	cmp	r1, #0
   1e530:	d039      	beq.n	1e5a6 <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
   1e532:	690b      	ldr	r3, [r1, #16]
   1e534:	2b00      	cmp	r3, #0
   1e536:	d039      	beq.n	1e5ac <http_client_init+0x88>
	if (config->timer_inst == NULL) {
   1e538:	684b      	ldr	r3, [r1, #4]
   1e53a:	2b00      	cmp	r3, #0
   1e53c:	d039      	beq.n	1e5b2 <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   1e53e:	694b      	ldr	r3, [r1, #20]
   1e540:	2b51      	cmp	r3, #81	; 0x51
   1e542:	d939      	bls.n	1e5b8 <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
   1e544:	22e8      	movs	r2, #232	; 0xe8
   1e546:	2100      	movs	r1, #0
   1e548:	4b1e      	ldr	r3, [pc, #120]	; (1e5c4 <http_client_init+0xa0>)
   1e54a:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   1e54c:	0020      	movs	r0, r4
   1e54e:	3050      	adds	r0, #80	; 0x50
   1e550:	221c      	movs	r2, #28
   1e552:	0029      	movs	r1, r5
   1e554:	4b1c      	ldr	r3, [pc, #112]	; (1e5c8 <http_client_init+0xa4>)
   1e556:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
   1e558:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1e55a:	2b00      	cmp	r3, #0
   1e55c:	d008      	beq.n	1e570 <http_client_init+0x4c>
	if (config->timeout > 0) {
   1e55e:	892b      	ldrh	r3, [r5, #8]
   1e560:	2b00      	cmp	r3, #0
   1e562:	d111      	bne.n	1e588 <http_client_init+0x64>
	module->req.state = STATE_INIT;
   1e564:	2300      	movs	r3, #0
   1e566:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   1e568:	22d8      	movs	r2, #216	; 0xd8
   1e56a:	50a3      	str	r3, [r4, r2]
	return 0;
   1e56c:	2000      	movs	r0, #0
}
   1e56e:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   1e570:	6928      	ldr	r0, [r5, #16]
   1e572:	4b16      	ldr	r3, [pc, #88]	; (1e5cc <http_client_init+0xa8>)
   1e574:	4798      	blx	r3
   1e576:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   1e578:	2800      	cmp	r0, #0
   1e57a:	d020      	beq.n	1e5be <http_client_init+0x9a>
		module->alloc_buffer = 1;
   1e57c:	2241      	movs	r2, #65	; 0x41
   1e57e:	5ca3      	ldrb	r3, [r4, r2]
   1e580:	2104      	movs	r1, #4
   1e582:	430b      	orrs	r3, r1
   1e584:	54a3      	strb	r3, [r4, r2]
   1e586:	e7ea      	b.n	1e55e <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   1e588:	6868      	ldr	r0, [r5, #4]
   1e58a:	2300      	movs	r3, #0
   1e58c:	0022      	movs	r2, r4
   1e58e:	4910      	ldr	r1, [pc, #64]	; (1e5d0 <http_client_init+0xac>)
   1e590:	4d10      	ldr	r5, [pc, #64]	; (1e5d4 <http_client_init+0xb0>)
   1e592:	47a8      	blx	r5
   1e594:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
   1e596:	2800      	cmp	r0, #0
   1e598:	dae4      	bge.n	1e564 <http_client_init+0x40>
			return -ENOSPC;
   1e59a:	201c      	movs	r0, #28
   1e59c:	4240      	negs	r0, r0
   1e59e:	e7e6      	b.n	1e56e <http_client_init+0x4a>
		return -EINVAL;
   1e5a0:	2016      	movs	r0, #22
   1e5a2:	4240      	negs	r0, r0
   1e5a4:	e7e3      	b.n	1e56e <http_client_init+0x4a>
   1e5a6:	2016      	movs	r0, #22
   1e5a8:	4240      	negs	r0, r0
   1e5aa:	e7e0      	b.n	1e56e <http_client_init+0x4a>
		return -EINVAL;
   1e5ac:	2016      	movs	r0, #22
   1e5ae:	4240      	negs	r0, r0
   1e5b0:	e7dd      	b.n	1e56e <http_client_init+0x4a>
		return -EINVAL;
   1e5b2:	2016      	movs	r0, #22
   1e5b4:	4240      	negs	r0, r0
   1e5b6:	e7da      	b.n	1e56e <http_client_init+0x4a>
		return -EINVAL;
   1e5b8:	2016      	movs	r0, #22
   1e5ba:	4240      	negs	r0, r0
   1e5bc:	e7d7      	b.n	1e56e <http_client_init+0x4a>
			return -ENOMEM;
   1e5be:	200c      	movs	r0, #12
   1e5c0:	4240      	negs	r0, r0
   1e5c2:	e7d4      	b.n	1e56e <http_client_init+0x4a>
   1e5c4:	0001fc1b 	.word	0x0001fc1b
   1e5c8:	0001fbe5 	.word	0x0001fbe5
   1e5cc:	0001fbbd 	.word	0x0001fbbd
   1e5d0:	0001e6e9 	.word	0x0001e6e9
   1e5d4:	0001f5b1 	.word	0x0001f5b1

0001e5d8 <http_client_register_callback>:
	if (module == NULL) {
   1e5d8:	2800      	cmp	r0, #0
   1e5da:	d002      	beq.n	1e5e2 <http_client_register_callback+0xa>
	module->cb = callback;
   1e5dc:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
   1e5de:	2000      	movs	r0, #0
}
   1e5e0:	4770      	bx	lr
		return -EINVAL;
   1e5e2:	2016      	movs	r0, #22
   1e5e4:	4240      	negs	r0, r0
   1e5e6:	e7fb      	b.n	1e5e0 <http_client_register_callback+0x8>

0001e5e8 <_http_client_clear_conn>:
{
   1e5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e5ea:	b085      	sub	sp, #20
   1e5ec:	0004      	movs	r4, r0
   1e5ee:	000e      	movs	r6, r1
	if (module->req.entity.close) {
   1e5f0:	23c0      	movs	r3, #192	; 0xc0
   1e5f2:	58c3      	ldr	r3, [r0, r3]
   1e5f4:	2b00      	cmp	r3, #0
   1e5f6:	d002      	beq.n	1e5fe <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
   1e5f8:	22c4      	movs	r2, #196	; 0xc4
   1e5fa:	5880      	ldr	r0, [r0, r2]
   1e5fc:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
   1e5fe:	0020      	movs	r0, r4
   1e600:	30b0      	adds	r0, #176	; 0xb0
   1e602:	2218      	movs	r2, #24
   1e604:	2100      	movs	r1, #0
   1e606:	4b17      	ldr	r3, [pc, #92]	; (1e664 <_http_client_clear_conn+0x7c>)
   1e608:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   1e60a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   1e60c:	2b00      	cmp	r3, #0
   1e60e:	d124      	bne.n	1e65a <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
   1e610:	2300      	movs	r3, #0
   1e612:	56e3      	ldrsb	r3, [r4, r3]
   1e614:	009b      	lsls	r3, r3, #2
   1e616:	2500      	movs	r5, #0
   1e618:	4a13      	ldr	r2, [pc, #76]	; (1e668 <_http_client_clear_conn+0x80>)
   1e61a:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
   1e61c:	0020      	movs	r0, r4
   1e61e:	306c      	adds	r0, #108	; 0x6c
   1e620:	226c      	movs	r2, #108	; 0x6c
   1e622:	2100      	movs	r1, #0
   1e624:	4f0f      	ldr	r7, [pc, #60]	; (1e664 <_http_client_clear_conn+0x7c>)
   1e626:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   1e628:	0020      	movs	r0, r4
   1e62a:	30d8      	adds	r0, #216	; 0xd8
   1e62c:	2210      	movs	r2, #16
   1e62e:	2100      	movs	r1, #0
   1e630:	47b8      	blx	r7
	module->req.state = STATE_INIT;
   1e632:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   1e634:	23d8      	movs	r3, #216	; 0xd8
   1e636:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
   1e638:	2241      	movs	r2, #65	; 0x41
   1e63a:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
   1e63c:	2101      	movs	r1, #1
   1e63e:	438b      	bics	r3, r1
   1e640:	3101      	adds	r1, #1
   1e642:	438b      	bics	r3, r1
   1e644:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
   1e646:	9601      	str	r6, [sp, #4]
	if (module->cb) {
   1e648:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1e64a:	2b00      	cmp	r3, #0
   1e64c:	d003      	beq.n	1e656 <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   1e64e:	aa01      	add	r2, sp, #4
   1e650:	3102      	adds	r1, #2
   1e652:	0020      	movs	r0, r4
   1e654:	4798      	blx	r3
}
   1e656:	b005      	add	sp, #20
   1e658:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
   1e65a:	2000      	movs	r0, #0
   1e65c:	5620      	ldrsb	r0, [r4, r0]
   1e65e:	4b03      	ldr	r3, [pc, #12]	; (1e66c <_http_client_clear_conn+0x84>)
   1e660:	4798      	blx	r3
   1e662:	e7d5      	b.n	1e610 <_http_client_clear_conn+0x28>
   1e664:	0001fc1b 	.word	0x0001fc1b
   1e668:	20003718 	.word	0x20003718
   1e66c:	00018b9d 	.word	0x00018b9d

0001e670 <http_client_socket_resolve_handler>:
{
   1e670:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e672:	b087      	sub	sp, #28
   1e674:	9000      	str	r0, [sp, #0]
   1e676:	9101      	str	r1, [sp, #4]
   1e678:	4c17      	ldr	r4, [pc, #92]	; (1e6d8 <http_client_socket_resolve_handler+0x68>)
   1e67a:	0026      	movs	r6, r4
   1e67c:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   1e67e:	4f17      	ldr	r7, [pc, #92]	; (1e6dc <http_client_socket_resolve_handler+0x6c>)
   1e680:	e015      	b.n	1e6ae <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
   1e682:	2302      	movs	r3, #2
   1e684:	aa02      	add	r2, sp, #8
   1e686:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   1e688:	334e      	adds	r3, #78	; 0x4e
   1e68a:	5aeb      	ldrh	r3, [r5, r3]
   1e68c:	021a      	lsls	r2, r3, #8
   1e68e:	0a1b      	lsrs	r3, r3, #8
   1e690:	4313      	orrs	r3, r2
   1e692:	aa02      	add	r2, sp, #8
   1e694:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
   1e696:	9b01      	ldr	r3, [sp, #4]
   1e698:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   1e69a:	2000      	movs	r0, #0
   1e69c:	5628      	ldrsb	r0, [r5, r0]
   1e69e:	2210      	movs	r2, #16
   1e6a0:	a902      	add	r1, sp, #8
   1e6a2:	4b0f      	ldr	r3, [pc, #60]	; (1e6e0 <http_client_socket_resolve_handler+0x70>)
   1e6a4:	4798      	blx	r3
				return;
   1e6a6:	e015      	b.n	1e6d4 <http_client_socket_resolve_handler+0x64>
   1e6a8:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   1e6aa:	42b4      	cmp	r4, r6
   1e6ac:	d012      	beq.n	1e6d4 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
   1e6ae:	6825      	ldr	r5, [r4, #0]
   1e6b0:	2d00      	cmp	r5, #0
   1e6b2:	d0f9      	beq.n	1e6a8 <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   1e6b4:	1c69      	adds	r1, r5, #1
   1e6b6:	9800      	ldr	r0, [sp, #0]
   1e6b8:	47b8      	blx	r7
   1e6ba:	2800      	cmp	r0, #0
   1e6bc:	d1f4      	bne.n	1e6a8 <http_client_socket_resolve_handler+0x38>
   1e6be:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   1e6c0:	2b01      	cmp	r3, #1
   1e6c2:	d1f1      	bne.n	1e6a8 <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   1e6c4:	9b01      	ldr	r3, [sp, #4]
   1e6c6:	2b00      	cmp	r3, #0
   1e6c8:	d1db      	bne.n	1e682 <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   1e6ca:	2176      	movs	r1, #118	; 0x76
   1e6cc:	4249      	negs	r1, r1
   1e6ce:	0028      	movs	r0, r5
   1e6d0:	4b04      	ldr	r3, [pc, #16]	; (1e6e4 <http_client_socket_resolve_handler+0x74>)
   1e6d2:	4798      	blx	r3
}
   1e6d4:	b007      	add	sp, #28
   1e6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e6d8:	20003718 	.word	0x20003718
   1e6dc:	0001ff1d 	.word	0x0001ff1d
   1e6e0:	000189e1 	.word	0x000189e1
   1e6e4:	0001e5e9 	.word	0x0001e5e9

0001e6e8 <http_client_timer_callback>:
{
   1e6e8:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
   1e6ea:	2a00      	cmp	r2, #0
   1e6ec:	d004      	beq.n	1e6f8 <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
   1e6ee:	213e      	movs	r1, #62	; 0x3e
   1e6f0:	4249      	negs	r1, r1
   1e6f2:	0010      	movs	r0, r2
   1e6f4:	4b01      	ldr	r3, [pc, #4]	; (1e6fc <http_client_timer_callback+0x14>)
   1e6f6:	4798      	blx	r3
}
   1e6f8:	bd10      	pop	{r4, pc}
   1e6fa:	46c0      	nop			; (mov r8, r8)
   1e6fc:	0001e5e9 	.word	0x0001e5e9

0001e700 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   1e700:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e702:	46de      	mov	lr, fp
   1e704:	4657      	mov	r7, sl
   1e706:	b580      	push	{r7, lr}
   1e708:	b095      	sub	sp, #84	; 0x54
   1e70a:	af02      	add	r7, sp, #8
   1e70c:	0004      	movs	r4, r0
   1e70e:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   1e710:	2310      	movs	r3, #16
   1e712:	2208      	movs	r2, #8
   1e714:	18ba      	adds	r2, r7, r2
   1e716:	18d2      	adds	r2, r2, r3
   1e718:	4bb1      	ldr	r3, [pc, #708]	; (1e9e0 <_http_client_request+0x2e0>)
   1e71a:	cb23      	ldmia	r3!, {r0, r1, r5}
   1e71c:	c223      	stmia	r2!, {r0, r1, r5}
   1e71e:	681b      	ldr	r3, [r3, #0]
   1e720:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   1e722:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1e724:	1dd3      	adds	r3, r2, #7
   1e726:	08db      	lsrs	r3, r3, #3
   1e728:	00db      	lsls	r3, r3, #3
   1e72a:	4669      	mov	r1, sp
   1e72c:	1acb      	subs	r3, r1, r3
   1e72e:	469d      	mov	sp, r3
   1e730:	ae02      	add	r6, sp, #8

	if (module == NULL) {
   1e732:	2c00      	cmp	r4, #0
   1e734:	d100      	bne.n	1e738 <_http_client_request+0x38>
   1e736:	e1f0      	b.n	1eb1a <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
   1e738:	2341      	movs	r3, #65	; 0x41
   1e73a:	5ce3      	ldrb	r3, [r4, r3]
   1e73c:	07db      	lsls	r3, r3, #31
   1e73e:	d500      	bpl.n	1e742 <_http_client_request+0x42>
   1e740:	e1eb      	b.n	1eb1a <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
   1e742:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   1e744:	2b03      	cmp	r3, #3
   1e746:	d004      	beq.n	1e752 <_http_client_request+0x52>
   1e748:	2b04      	cmp	r3, #4
   1e74a:	d100      	bne.n	1e74e <_http_client_request+0x4e>
   1e74c:	e120      	b.n	1e990 <_http_client_request+0x290>
   1e74e:	46dd      	mov	sp, fp
   1e750:	e1e4      	b.n	1eb1c <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
   1e752:	2300      	movs	r3, #0
   1e754:	21cc      	movs	r1, #204	; 0xcc
   1e756:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
   1e758:	3104      	adds	r1, #4
   1e75a:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   1e75c:	9400      	str	r4, [sp, #0]
   1e75e:	4ba1      	ldr	r3, [pc, #644]	; (1e9e4 <_http_client_request+0x2e4>)
   1e760:	0031      	movs	r1, r6
   1e762:	202c      	movs	r0, #44	; 0x2c
   1e764:	2508      	movs	r5, #8
   1e766:	46ac      	mov	ip, r5
   1e768:	44bc      	add	ip, r7
   1e76a:	4460      	add	r0, ip
   1e76c:	4d9e      	ldr	r5, [pc, #632]	; (1e9e8 <_http_client_request+0x2e8>)
   1e76e:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
   1e770:	23c8      	movs	r3, #200	; 0xc8
   1e772:	5ce3      	ldrb	r3, [r4, r3]
   1e774:	2b01      	cmp	r3, #1
   1e776:	d100      	bne.n	1e77a <_http_client_request+0x7a>
   1e778:	e0a9      	b.n	1e8ce <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
   1e77a:	2b02      	cmp	r3, #2
   1e77c:	d100      	bne.n	1e780 <_http_client_request+0x80>
   1e77e:	e0af      	b.n	1e8e0 <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   1e780:	2b03      	cmp	r3, #3
   1e782:	d100      	bne.n	1e786 <_http_client_request+0x86>
   1e784:	e0b5      	b.n	1e8f2 <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
   1e786:	2b04      	cmp	r3, #4
   1e788:	d100      	bne.n	1e78c <_http_client_request+0x8c>
   1e78a:	e0bb      	b.n	1e904 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   1e78c:	2b05      	cmp	r3, #5
   1e78e:	d100      	bne.n	1e792 <_http_client_request+0x92>
   1e790:	e0c1      	b.n	1e916 <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   1e792:	2b06      	cmp	r3, #6
   1e794:	d100      	bne.n	1e798 <_http_client_request+0x98>
   1e796:	e0c7      	b.n	1e928 <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   1e798:	0025      	movs	r5, r4
   1e79a:	3570      	adds	r5, #112	; 0x70
   1e79c:	0028      	movs	r0, r5
   1e79e:	4b93      	ldr	r3, [pc, #588]	; (1e9ec <_http_client_request+0x2ec>)
   1e7a0:	469a      	mov	sl, r3
   1e7a2:	4798      	blx	r3
   1e7a4:	0002      	movs	r2, r0
   1e7a6:	0029      	movs	r1, r5
   1e7a8:	232c      	movs	r3, #44	; 0x2c
   1e7aa:	2008      	movs	r0, #8
   1e7ac:	1838      	adds	r0, r7, r0
   1e7ae:	18c0      	adds	r0, r0, r3
   1e7b0:	4d8f      	ldr	r5, [pc, #572]	; (1e9f0 <_http_client_request+0x2f0>)
   1e7b2:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   1e7b4:	220b      	movs	r2, #11
   1e7b6:	498f      	ldr	r1, [pc, #572]	; (1e9f4 <_http_client_request+0x2f4>)
   1e7b8:	232c      	movs	r3, #44	; 0x2c
   1e7ba:	2008      	movs	r0, #8
   1e7bc:	1838      	adds	r0, r7, r0
   1e7be:	18c0      	adds	r0, r0, r3
   1e7c0:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   1e7c2:	220c      	movs	r2, #12
   1e7c4:	498c      	ldr	r1, [pc, #560]	; (1e9f8 <_http_client_request+0x2f8>)
   1e7c6:	232c      	movs	r3, #44	; 0x2c
   1e7c8:	2008      	movs	r0, #8
   1e7ca:	1838      	adds	r0, r7, r0
   1e7cc:	18c0      	adds	r0, r0, r3
   1e7ce:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   1e7d0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1e7d2:	607b      	str	r3, [r7, #4]
   1e7d4:	0018      	movs	r0, r3
   1e7d6:	47d0      	blx	sl
   1e7d8:	0002      	movs	r2, r0
   1e7da:	6879      	ldr	r1, [r7, #4]
   1e7dc:	232c      	movs	r3, #44	; 0x2c
   1e7de:	2008      	movs	r0, #8
   1e7e0:	1838      	adds	r0, r7, r0
   1e7e2:	18c0      	adds	r0, r0, r3
   1e7e4:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1e7e6:	2202      	movs	r2, #2
   1e7e8:	4984      	ldr	r1, [pc, #528]	; (1e9fc <_http_client_request+0x2fc>)
   1e7ea:	232c      	movs	r3, #44	; 0x2c
   1e7ec:	2008      	movs	r0, #8
   1e7ee:	1838      	adds	r0, r7, r0
   1e7f0:	18c0      	adds	r0, r0, r3
   1e7f2:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   1e7f4:	2206      	movs	r2, #6
   1e7f6:	4982      	ldr	r1, [pc, #520]	; (1ea00 <_http_client_request+0x300>)
   1e7f8:	232c      	movs	r3, #44	; 0x2c
   1e7fa:	2008      	movs	r0, #8
   1e7fc:	1838      	adds	r0, r7, r0
   1e7fe:	18c0      	adds	r0, r0, r3
   1e800:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   1e802:	1c63      	adds	r3, r4, #1
   1e804:	607b      	str	r3, [r7, #4]
   1e806:	0018      	movs	r0, r3
   1e808:	47d0      	blx	sl
   1e80a:	0002      	movs	r2, r0
   1e80c:	6879      	ldr	r1, [r7, #4]
   1e80e:	232c      	movs	r3, #44	; 0x2c
   1e810:	2008      	movs	r0, #8
   1e812:	1838      	adds	r0, r7, r0
   1e814:	18c0      	adds	r0, r0, r3
   1e816:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1e818:	2202      	movs	r2, #2
   1e81a:	4978      	ldr	r1, [pc, #480]	; (1e9fc <_http_client_request+0x2fc>)
   1e81c:	232c      	movs	r3, #44	; 0x2c
   1e81e:	2008      	movs	r0, #8
   1e820:	1838      	adds	r0, r7, r0
   1e822:	18c0      	adds	r0, r0, r3
   1e824:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   1e826:	2218      	movs	r2, #24
   1e828:	4976      	ldr	r1, [pc, #472]	; (1ea04 <_http_client_request+0x304>)
   1e82a:	232c      	movs	r3, #44	; 0x2c
   1e82c:	2008      	movs	r0, #8
   1e82e:	1838      	adds	r0, r7, r0
   1e830:	18c0      	adds	r0, r0, r3
   1e832:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   1e834:	2213      	movs	r2, #19
   1e836:	4974      	ldr	r1, [pc, #464]	; (1ea08 <_http_client_request+0x308>)
   1e838:	232c      	movs	r3, #44	; 0x2c
   1e83a:	2008      	movs	r0, #8
   1e83c:	1838      	adds	r0, r7, r0
   1e83e:	18c0      	adds	r0, r0, r3
   1e840:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   1e842:	2217      	movs	r2, #23
   1e844:	4971      	ldr	r1, [pc, #452]	; (1ea0c <_http_client_request+0x30c>)
   1e846:	232c      	movs	r3, #44	; 0x2c
   1e848:	2008      	movs	r0, #8
   1e84a:	1838      	adds	r0, r7, r0
   1e84c:	18c0      	adds	r0, r0, r3
   1e84e:	47a8      	blx	r5

		if (entity->read != NULL) {
   1e850:	0023      	movs	r3, r4
   1e852:	33b0      	adds	r3, #176	; 0xb0
   1e854:	68db      	ldr	r3, [r3, #12]
   1e856:	2b00      	cmp	r3, #0
   1e858:	d07b      	beq.n	1e952 <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
   1e85a:	23b0      	movs	r3, #176	; 0xb0
   1e85c:	5ce3      	ldrb	r3, [r4, r3]
   1e85e:	2b00      	cmp	r3, #0
   1e860:	d16b      	bne.n	1e93a <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
   1e862:	0023      	movs	r3, r4
   1e864:	33b0      	adds	r3, #176	; 0xb0
   1e866:	689b      	ldr	r3, [r3, #8]
   1e868:	2b00      	cmp	r3, #0
   1e86a:	d072      	beq.n	1e952 <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   1e86c:	0022      	movs	r2, r4
   1e86e:	32b0      	adds	r2, #176	; 0xb0
   1e870:	6950      	ldr	r0, [r2, #20]
   1e872:	4798      	blx	r3
   1e874:	23cc      	movs	r3, #204	; 0xcc
   1e876:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
   1e878:	2800      	cmp	r0, #0
   1e87a:	da00      	bge.n	1e87e <_http_client_request+0x17e>
   1e87c:	e0ac      	b.n	1e9d8 <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   1e87e:	0002      	movs	r2, r0
   1e880:	4963      	ldr	r1, [pc, #396]	; (1ea10 <_http_client_request+0x310>)
   1e882:	2320      	movs	r3, #32
   1e884:	2008      	movs	r0, #8
   1e886:	1838      	adds	r0, r7, r0
   1e888:	18c0      	adds	r0, r0, r3
   1e88a:	4b62      	ldr	r3, [pc, #392]	; (1ea14 <_http_client_request+0x314>)
   1e88c:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   1e88e:	2210      	movs	r2, #16
   1e890:	4961      	ldr	r1, [pc, #388]	; (1ea18 <_http_client_request+0x318>)
   1e892:	232c      	movs	r3, #44	; 0x2c
   1e894:	2008      	movs	r0, #8
   1e896:	1838      	adds	r0, r7, r0
   1e898:	18c0      	adds	r0, r0, r3
   1e89a:	4d55      	ldr	r5, [pc, #340]	; (1e9f0 <_http_client_request+0x2f0>)
   1e89c:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
   1e89e:	2320      	movs	r3, #32
   1e8a0:	2208      	movs	r2, #8
   1e8a2:	18ba      	adds	r2, r7, r2
   1e8a4:	18d0      	adds	r0, r2, r3
   1e8a6:	4b51      	ldr	r3, [pc, #324]	; (1e9ec <_http_client_request+0x2ec>)
   1e8a8:	4798      	blx	r3
   1e8aa:	0002      	movs	r2, r0
   1e8ac:	2320      	movs	r3, #32
   1e8ae:	2108      	movs	r1, #8
   1e8b0:	1879      	adds	r1, r7, r1
   1e8b2:	18c9      	adds	r1, r1, r3
   1e8b4:	330c      	adds	r3, #12
   1e8b6:	2008      	movs	r0, #8
   1e8b8:	1838      	adds	r0, r7, r0
   1e8ba:	18c0      	adds	r0, r0, r3
   1e8bc:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1e8be:	2202      	movs	r2, #2
   1e8c0:	494e      	ldr	r1, [pc, #312]	; (1e9fc <_http_client_request+0x2fc>)
   1e8c2:	232c      	movs	r3, #44	; 0x2c
   1e8c4:	2008      	movs	r0, #8
   1e8c6:	1838      	adds	r0, r7, r0
   1e8c8:	18c0      	adds	r0, r0, r3
   1e8ca:	47a8      	blx	r5
   1e8cc:	e041      	b.n	1e952 <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
   1e8ce:	2204      	movs	r2, #4
   1e8d0:	4952      	ldr	r1, [pc, #328]	; (1ea1c <_http_client_request+0x31c>)
   1e8d2:	332b      	adds	r3, #43	; 0x2b
   1e8d4:	2008      	movs	r0, #8
   1e8d6:	1838      	adds	r0, r7, r0
   1e8d8:	18c0      	adds	r0, r0, r3
   1e8da:	4b45      	ldr	r3, [pc, #276]	; (1e9f0 <_http_client_request+0x2f0>)
   1e8dc:	4798      	blx	r3
   1e8de:	e75b      	b.n	1e798 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
   1e8e0:	2205      	movs	r2, #5
   1e8e2:	494f      	ldr	r1, [pc, #316]	; (1ea20 <_http_client_request+0x320>)
   1e8e4:	332a      	adds	r3, #42	; 0x2a
   1e8e6:	2008      	movs	r0, #8
   1e8e8:	1838      	adds	r0, r7, r0
   1e8ea:	18c0      	adds	r0, r0, r3
   1e8ec:	4b40      	ldr	r3, [pc, #256]	; (1e9f0 <_http_client_request+0x2f0>)
   1e8ee:	4798      	blx	r3
   1e8f0:	e752      	b.n	1e798 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   1e8f2:	2207      	movs	r2, #7
   1e8f4:	494b      	ldr	r1, [pc, #300]	; (1ea24 <_http_client_request+0x324>)
   1e8f6:	3329      	adds	r3, #41	; 0x29
   1e8f8:	2008      	movs	r0, #8
   1e8fa:	1838      	adds	r0, r7, r0
   1e8fc:	18c0      	adds	r0, r0, r3
   1e8fe:	4b3c      	ldr	r3, [pc, #240]	; (1e9f0 <_http_client_request+0x2f0>)
   1e900:	4798      	blx	r3
   1e902:	e749      	b.n	1e798 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   1e904:	2204      	movs	r2, #4
   1e906:	4948      	ldr	r1, [pc, #288]	; (1ea28 <_http_client_request+0x328>)
   1e908:	3328      	adds	r3, #40	; 0x28
   1e90a:	2008      	movs	r0, #8
   1e90c:	1838      	adds	r0, r7, r0
   1e90e:	18c0      	adds	r0, r0, r3
   1e910:	4b37      	ldr	r3, [pc, #220]	; (1e9f0 <_http_client_request+0x2f0>)
   1e912:	4798      	blx	r3
   1e914:	e740      	b.n	1e798 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   1e916:	2208      	movs	r2, #8
   1e918:	4944      	ldr	r1, [pc, #272]	; (1ea2c <_http_client_request+0x32c>)
   1e91a:	3327      	adds	r3, #39	; 0x27
   1e91c:	2008      	movs	r0, #8
   1e91e:	1838      	adds	r0, r7, r0
   1e920:	18c0      	adds	r0, r0, r3
   1e922:	4b33      	ldr	r3, [pc, #204]	; (1e9f0 <_http_client_request+0x2f0>)
   1e924:	4798      	blx	r3
   1e926:	e737      	b.n	1e798 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   1e928:	2205      	movs	r2, #5
   1e92a:	4941      	ldr	r1, [pc, #260]	; (1ea30 <_http_client_request+0x330>)
   1e92c:	3326      	adds	r3, #38	; 0x26
   1e92e:	2008      	movs	r0, #8
   1e930:	1838      	adds	r0, r7, r0
   1e932:	18c0      	adds	r0, r0, r3
   1e934:	4b2e      	ldr	r3, [pc, #184]	; (1e9f0 <_http_client_request+0x2f0>)
   1e936:	4798      	blx	r3
   1e938:	e72e      	b.n	1e798 <_http_client_request+0x98>
				module->req.content_length = -1;
   1e93a:	2201      	movs	r2, #1
   1e93c:	4252      	negs	r2, r2
   1e93e:	23cc      	movs	r3, #204	; 0xcc
   1e940:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   1e942:	321d      	adds	r2, #29
   1e944:	493b      	ldr	r1, [pc, #236]	; (1ea34 <_http_client_request+0x334>)
   1e946:	3ba0      	subs	r3, #160	; 0xa0
   1e948:	2008      	movs	r0, #8
   1e94a:	1838      	adds	r0, r7, r0
   1e94c:	18c0      	adds	r0, r0, r3
   1e94e:	4b28      	ldr	r3, [pc, #160]	; (1e9f0 <_http_client_request+0x2f0>)
   1e950:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
   1e952:	23d4      	movs	r3, #212	; 0xd4
   1e954:	58e5      	ldr	r5, [r4, r3]
   1e956:	2d00      	cmp	r5, #0
   1e958:	d00a      	beq.n	1e970 <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
   1e95a:	0028      	movs	r0, r5
   1e95c:	4b23      	ldr	r3, [pc, #140]	; (1e9ec <_http_client_request+0x2ec>)
   1e95e:	4798      	blx	r3
   1e960:	0002      	movs	r2, r0
   1e962:	0029      	movs	r1, r5
   1e964:	232c      	movs	r3, #44	; 0x2c
   1e966:	2008      	movs	r0, #8
   1e968:	1838      	adds	r0, r7, r0
   1e96a:	18c0      	adds	r0, r0, r3
   1e96c:	4b20      	ldr	r3, [pc, #128]	; (1e9f0 <_http_client_request+0x2f0>)
   1e96e:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1e970:	2202      	movs	r2, #2
   1e972:	4922      	ldr	r1, [pc, #136]	; (1e9fc <_http_client_request+0x2fc>)
   1e974:	232c      	movs	r3, #44	; 0x2c
   1e976:	2008      	movs	r0, #8
   1e978:	1838      	adds	r0, r7, r0
   1e97a:	18c0      	adds	r0, r0, r3
   1e97c:	4b1c      	ldr	r3, [pc, #112]	; (1e9f0 <_http_client_request+0x2f0>)
   1e97e:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   1e980:	232c      	movs	r3, #44	; 0x2c
   1e982:	2208      	movs	r2, #8
   1e984:	18ba      	adds	r2, r7, r2
   1e986:	18d0      	adds	r0, r2, r3
   1e988:	4b2b      	ldr	r3, [pc, #172]	; (1ea38 <_http_client_request+0x338>)
   1e98a:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
   1e98c:	2304      	movs	r3, #4
   1e98e:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
   1e990:	23cc      	movs	r3, #204	; 0xcc
   1e992:	58e2      	ldr	r2, [r4, r3]
   1e994:	2a00      	cmp	r2, #0
   1e996:	db51      	blt.n	1ea3c <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
   1e998:	dc00      	bgt.n	1e99c <_http_client_request+0x29c>
   1e99a:	e0f0      	b.n	1eb7e <_http_client_request+0x47e>
   1e99c:	0023      	movs	r3, r4
   1e99e:	33b0      	adds	r3, #176	; 0xb0
   1e9a0:	68dd      	ldr	r5, [r3, #12]
   1e9a2:	2d00      	cmp	r5, #0
   1e9a4:	d100      	bne.n	1e9a8 <_http_client_request+0x2a8>
   1e9a6:	e0ea      	b.n	1eb7e <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
   1e9a8:	23d0      	movs	r3, #208	; 0xd0
   1e9aa:	58e3      	ldr	r3, [r4, r3]
   1e9ac:	429a      	cmp	r2, r3
   1e9ae:	dd00      	ble.n	1e9b2 <_http_client_request+0x2b2>
   1e9b0:	e0ba      	b.n	1eb28 <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
   1e9b2:	23c0      	movs	r3, #192	; 0xc0
   1e9b4:	58e3      	ldr	r3, [r4, r3]
   1e9b6:	2b00      	cmp	r3, #0
   1e9b8:	d002      	beq.n	1e9c0 <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
   1e9ba:	22c4      	movs	r2, #196	; 0xc4
   1e9bc:	58a0      	ldr	r0, [r4, r2]
   1e9be:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
   1e9c0:	2302      	movs	r3, #2
   1e9c2:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   1e9c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1e9c6:	2b00      	cmp	r3, #0
   1e9c8:	d100      	bne.n	1e9cc <_http_client_request+0x2cc>
   1e9ca:	e6c0      	b.n	1e74e <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   1e9cc:	220c      	movs	r2, #12
   1e9ce:	18ba      	adds	r2, r7, r2
   1e9d0:	2101      	movs	r1, #1
   1e9d2:	0020      	movs	r0, r4
   1e9d4:	4798      	blx	r3
   1e9d6:	e6ba      	b.n	1e74e <_http_client_request+0x4e>
					module->req.content_length = 0;
   1e9d8:	2200      	movs	r2, #0
   1e9da:	50e2      	str	r2, [r4, r3]
   1e9dc:	e7b9      	b.n	1e952 <_http_client_request+0x252>
   1e9de:	46c0      	nop			; (mov r8, r8)
   1e9e0:	00022f48 	.word	0x00022f48
   1e9e4:	0001e491 	.word	0x0001e491
   1e9e8:	0001f45d 	.word	0x0001f45d
   1e9ec:	0001ff7b 	.word	0x0001ff7b
   1e9f0:	0001f4b1 	.word	0x0001f4b1
   1e9f4:	00022fbc 	.word	0x00022fbc
   1e9f8:	00022fc8 	.word	0x00022fc8
   1e9fc:	000231dc 	.word	0x000231dc
   1ea00:	00022fd8 	.word	0x00022fd8
   1ea04:	00022fe0 	.word	0x00022fe0
   1ea08:	00022ffc 	.word	0x00022ffc
   1ea0c:	00023010 	.word	0x00023010
   1ea10:	00023048 	.word	0x00023048
   1ea14:	0001fed9 	.word	0x0001fed9
   1ea18:	0002304c 	.word	0x0002304c
   1ea1c:	00022f88 	.word	0x00022f88
   1ea20:	00022f90 	.word	0x00022f90
   1ea24:	00022f98 	.word	0x00022f98
   1ea28:	00022fa0 	.word	0x00022fa0
   1ea2c:	00022fa8 	.word	0x00022fa8
   1ea30:	00022fb4 	.word	0x00022fb4
   1ea34:	00023028 	.word	0x00023028
   1ea38:	0001f46d 	.word	0x0001f46d
		if (module->req.content_length < 0 && entity->read) {
   1ea3c:	0023      	movs	r3, r4
   1ea3e:	33b0      	adds	r3, #176	; 0xb0
   1ea40:	68dd      	ldr	r5, [r3, #12]
   1ea42:	2d00      	cmp	r5, #0
   1ea44:	d100      	bne.n	1ea48 <_http_client_request+0x348>
   1ea46:	e09a      	b.n	1eb7e <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   1ea48:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   1ea4a:	58e3      	ldr	r3, [r4, r3]
   1ea4c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1ea4e:	3a07      	subs	r2, #7
   1ea50:	1d71      	adds	r1, r6, #5
   1ea52:	0020      	movs	r0, r4
   1ea54:	30b0      	adds	r0, #176	; 0xb0
   1ea56:	6940      	ldr	r0, [r0, #20]
   1ea58:	47a8      	blx	r5
   1ea5a:	0005      	movs	r5, r0
   1ea5c:	43c3      	mvns	r3, r0
   1ea5e:	17db      	asrs	r3, r3, #31
   1ea60:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   1ea62:	220a      	movs	r2, #10
   1ea64:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   1ea66:	210d      	movs	r1, #13
   1ea68:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   1ea6a:	1973      	adds	r3, r6, r5
   1ea6c:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   1ea6e:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
   1ea70:	230f      	movs	r3, #15
   1ea72:	402b      	ands	r3, r5
   1ea74:	3206      	adds	r2, #6
   1ea76:	3905      	subs	r1, #5
   1ea78:	468c      	mov	ip, r1
   1ea7a:	44bc      	add	ip, r7
   1ea7c:	4462      	add	r2, ip
   1ea7e:	5cd3      	ldrb	r3, [r2, r3]
   1ea80:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
   1ea82:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
   1ea84:	2d0f      	cmp	r5, #15
   1ea86:	dd0d      	ble.n	1eaa4 <_http_client_request+0x3a4>
				ptr = buffer + 1;
   1ea88:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
   1ea8a:	17eb      	asrs	r3, r5, #31
   1ea8c:	220f      	movs	r2, #15
   1ea8e:	4013      	ands	r3, r2
   1ea90:	195b      	adds	r3, r3, r5
   1ea92:	111b      	asrs	r3, r3, #4
   1ea94:	4013      	ands	r3, r2
   1ea96:	3201      	adds	r2, #1
   1ea98:	2008      	movs	r0, #8
   1ea9a:	4684      	mov	ip, r0
   1ea9c:	44bc      	add	ip, r7
   1ea9e:	4462      	add	r2, ip
   1eaa0:	5cd3      	ldrb	r3, [r2, r3]
   1eaa2:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
   1eaa4:	2dff      	cmp	r5, #255	; 0xff
   1eaa6:	dd0d      	ble.n	1eac4 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
   1eaa8:	17ea      	asrs	r2, r5, #31
   1eaaa:	23ff      	movs	r3, #255	; 0xff
   1eaac:	4013      	ands	r3, r2
   1eaae:	195b      	adds	r3, r3, r5
   1eab0:	051b      	lsls	r3, r3, #20
   1eab2:	0f1b      	lsrs	r3, r3, #28
   1eab4:	2210      	movs	r2, #16
   1eab6:	2108      	movs	r1, #8
   1eab8:	468c      	mov	ip, r1
   1eaba:	44bc      	add	ip, r7
   1eabc:	4462      	add	r2, ip
   1eabe:	5cd3      	ldrb	r3, [r2, r3]
   1eac0:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
   1eac2:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   1eac4:	1cca      	adds	r2, r1, #3
   1eac6:	1b92      	subs	r2, r2, r6
   1eac8:	1d2b      	adds	r3, r5, #4
   1eaca:	18d2      	adds	r2, r2, r3
   1eacc:	b292      	uxth	r2, r2
   1eace:	2000      	movs	r0, #0
   1ead0:	5620      	ldrsb	r0, [r4, r0]
   1ead2:	2300      	movs	r3, #0
   1ead4:	4e30      	ldr	r6, [pc, #192]	; (1eb98 <_http_client_request+0x498>)
   1ead6:	47b0      	blx	r6
   1ead8:	2800      	cmp	r0, #0
   1eada:	db19      	blt.n	1eb10 <_http_client_request+0x410>
			module->req.sent_length += size;
   1eadc:	22d0      	movs	r2, #208	; 0xd0
   1eade:	58a3      	ldr	r3, [r4, r2]
   1eae0:	195b      	adds	r3, r3, r5
   1eae2:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
   1eae4:	2d00      	cmp	r5, #0
   1eae6:	d000      	beq.n	1eaea <_http_client_request+0x3ea>
   1eae8:	e631      	b.n	1e74e <_http_client_request+0x4e>
				if (module->req.entity.close) {
   1eaea:	23c0      	movs	r3, #192	; 0xc0
   1eaec:	58e3      	ldr	r3, [r4, r3]
   1eaee:	2b00      	cmp	r3, #0
   1eaf0:	d002      	beq.n	1eaf8 <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
   1eaf2:	3a0c      	subs	r2, #12
   1eaf4:	58a0      	ldr	r0, [r4, r2]
   1eaf6:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   1eaf8:	2302      	movs	r3, #2
   1eafa:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   1eafc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1eafe:	2b00      	cmp	r3, #0
   1eb00:	d100      	bne.n	1eb04 <_http_client_request+0x404>
   1eb02:	e624      	b.n	1e74e <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   1eb04:	220c      	movs	r2, #12
   1eb06:	18ba      	adds	r2, r7, r2
   1eb08:	2101      	movs	r1, #1
   1eb0a:	0020      	movs	r0, r4
   1eb0c:	4798      	blx	r3
   1eb0e:	e61e      	b.n	1e74e <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
   1eb10:	2105      	movs	r1, #5
   1eb12:	4249      	negs	r1, r1
   1eb14:	0020      	movs	r0, r4
   1eb16:	4b21      	ldr	r3, [pc, #132]	; (1eb9c <_http_client_request+0x49c>)
   1eb18:	4798      	blx	r3
   1eb1a:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
   1eb1c:	46bd      	mov	sp, r7
   1eb1e:	b013      	add	sp, #76	; 0x4c
   1eb20:	bc0c      	pop	{r2, r3}
   1eb22:	4692      	mov	sl, r2
   1eb24:	469b      	mov	fp, r3
   1eb26:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   1eb28:	0022      	movs	r2, r4
   1eb2a:	32b0      	adds	r2, #176	; 0xb0
   1eb2c:	6950      	ldr	r0, [r2, #20]
   1eb2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1eb30:	0031      	movs	r1, r6
   1eb32:	47a8      	blx	r5
			if (size < 0) {
   1eb34:	2800      	cmp	r0, #0
   1eb36:	db16      	blt.n	1eb66 <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
   1eb38:	23cc      	movs	r3, #204	; 0xcc
   1eb3a:	58e5      	ldr	r5, [r4, r3]
   1eb3c:	3304      	adds	r3, #4
   1eb3e:	58e3      	ldr	r3, [r4, r3]
   1eb40:	1aed      	subs	r5, r5, r3
   1eb42:	4285      	cmp	r5, r0
   1eb44:	dd00      	ble.n	1eb48 <_http_client_request+0x448>
   1eb46:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   1eb48:	b2aa      	uxth	r2, r5
   1eb4a:	2000      	movs	r0, #0
   1eb4c:	5620      	ldrsb	r0, [r4, r0]
   1eb4e:	2300      	movs	r3, #0
   1eb50:	0031      	movs	r1, r6
   1eb52:	4e11      	ldr	r6, [pc, #68]	; (1eb98 <_http_client_request+0x498>)
   1eb54:	47b0      	blx	r6
   1eb56:	2800      	cmp	r0, #0
   1eb58:	db0b      	blt.n	1eb72 <_http_client_request+0x472>
				module->req.sent_length += size;
   1eb5a:	23d0      	movs	r3, #208	; 0xd0
   1eb5c:	58e2      	ldr	r2, [r4, r3]
   1eb5e:	4694      	mov	ip, r2
   1eb60:	4465      	add	r5, ip
   1eb62:	50e5      	str	r5, [r4, r3]
   1eb64:	e5f3      	b.n	1e74e <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   1eb66:	2105      	movs	r1, #5
   1eb68:	4249      	negs	r1, r1
   1eb6a:	0020      	movs	r0, r4
   1eb6c:	4b0b      	ldr	r3, [pc, #44]	; (1eb9c <_http_client_request+0x49c>)
   1eb6e:	4798      	blx	r3
   1eb70:	e5ed      	b.n	1e74e <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
   1eb72:	2105      	movs	r1, #5
   1eb74:	4249      	negs	r1, r1
   1eb76:	0020      	movs	r0, r4
   1eb78:	4b08      	ldr	r3, [pc, #32]	; (1eb9c <_http_client_request+0x49c>)
   1eb7a:	4798      	blx	r3
					return;
   1eb7c:	e7cd      	b.n	1eb1a <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
   1eb7e:	2302      	movs	r3, #2
   1eb80:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
   1eb82:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1eb84:	2b00      	cmp	r3, #0
   1eb86:	d100      	bne.n	1eb8a <_http_client_request+0x48a>
   1eb88:	e5e1      	b.n	1e74e <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   1eb8a:	220c      	movs	r2, #12
   1eb8c:	18ba      	adds	r2, r7, r2
   1eb8e:	2101      	movs	r1, #1
   1eb90:	0020      	movs	r0, r4
   1eb92:	4798      	blx	r3
   1eb94:	e5db      	b.n	1e74e <_http_client_request+0x4e>
   1eb96:	46c0      	nop			; (mov r8, r8)
   1eb98:	00018a71 	.word	0x00018a71
   1eb9c:	0001e5e9 	.word	0x0001e5e9

0001eba0 <http_client_send_request>:
{
   1eba0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eba2:	46d6      	mov	lr, sl
   1eba4:	b500      	push	{lr}
   1eba6:	b088      	sub	sp, #32
   1eba8:	0004      	movs	r4, r0
   1ebaa:	000f      	movs	r7, r1
   1ebac:	4692      	mov	sl, r2
   1ebae:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
   1ebb0:	2800      	cmp	r0, #0
   1ebb2:	d100      	bne.n	1ebb6 <http_client_send_request+0x16>
   1ebb4:	e0d3      	b.n	1ed5e <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
   1ebb6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   1ebb8:	2b02      	cmp	r3, #2
   1ebba:	d900      	bls.n	1ebbe <http_client_send_request+0x1e>
   1ebbc:	e0d3      	b.n	1ed66 <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
   1ebbe:	2207      	movs	r2, #7
   1ebc0:	4981      	ldr	r1, [pc, #516]	; (1edc8 <http_client_send_request+0x228>)
   1ebc2:	0038      	movs	r0, r7
   1ebc4:	4b81      	ldr	r3, [pc, #516]	; (1edcc <http_client_send_request+0x22c>)
   1ebc6:	4798      	blx	r3
		i = 7;
   1ebc8:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
   1ebca:	2800      	cmp	r0, #0
   1ebcc:	d007      	beq.n	1ebde <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
   1ebce:	2208      	movs	r2, #8
   1ebd0:	497f      	ldr	r1, [pc, #508]	; (1edd0 <http_client_send_request+0x230>)
   1ebd2:	0038      	movs	r0, r7
   1ebd4:	4b7d      	ldr	r3, [pc, #500]	; (1edcc <http_client_send_request+0x22c>)
   1ebd6:	4798      	blx	r3
		i = 8;
   1ebd8:	4246      	negs	r6, r0
   1ebda:	4146      	adcs	r6, r0
   1ebdc:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   1ebde:	1c63      	adds	r3, r4, #1
   1ebe0:	19bd      	adds	r5, r7, r6
   1ebe2:	9302      	str	r3, [sp, #8]
   1ebe4:	0018      	movs	r0, r3
   1ebe6:	4b7b      	ldr	r3, [pc, #492]	; (1edd4 <http_client_send_request+0x234>)
   1ebe8:	4798      	blx	r3
   1ebea:	0002      	movs	r2, r0
   1ebec:	0029      	movs	r1, r5
   1ebee:	9802      	ldr	r0, [sp, #8]
   1ebf0:	4b76      	ldr	r3, [pc, #472]	; (1edcc <http_client_send_request+0x22c>)
   1ebf2:	4798      	blx	r3
   1ebf4:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   1ebf6:	782b      	ldrb	r3, [r5, #0]
   1ebf8:	2b00      	cmp	r3, #0
   1ebfa:	d052      	beq.n	1eca2 <http_client_send_request+0x102>
   1ebfc:	2b2f      	cmp	r3, #47	; 0x2f
   1ebfe:	d052      	beq.n	1eca6 <http_client_send_request+0x106>
   1ec00:	1c71      	adds	r1, r6, #1
   1ec02:	1879      	adds	r1, r7, r1
   1ec04:	2200      	movs	r2, #0
		module->host[j++] = url[i];
   1ec06:	3201      	adds	r2, #1
   1ec08:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   1ec0a:	000d      	movs	r5, r1
   1ec0c:	780b      	ldrb	r3, [r1, #0]
   1ec0e:	2b00      	cmp	r3, #0
   1ec10:	d002      	beq.n	1ec18 <http_client_send_request+0x78>
   1ec12:	3101      	adds	r1, #1
   1ec14:	2b2f      	cmp	r3, #47	; 0x2f
   1ec16:	d1f6      	bne.n	1ec06 <http_client_send_request+0x66>
	module->host[j] = '\0';
   1ec18:	18a2      	adds	r2, r4, r2
   1ec1a:	2300      	movs	r3, #0
   1ec1c:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
   1ec1e:	7863      	ldrb	r3, [r4, #1]
   1ec20:	2b00      	cmp	r3, #0
   1ec22:	d100      	bne.n	1ec26 <http_client_send_request+0x86>
   1ec24:	e0a3      	b.n	1ed6e <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   1ec26:	0028      	movs	r0, r5
   1ec28:	4b6a      	ldr	r3, [pc, #424]	; (1edd4 <http_client_send_request+0x234>)
   1ec2a:	4798      	blx	r3
   1ec2c:	283f      	cmp	r0, #63	; 0x3f
   1ec2e:	d900      	bls.n	1ec32 <http_client_send_request+0x92>
   1ec30:	e0a1      	b.n	1ed76 <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
   1ec32:	23d4      	movs	r3, #212	; 0xd4
   1ec34:	58e0      	ldr	r0, [r4, r3]
   1ec36:	2800      	cmp	r0, #0
   1ec38:	d001      	beq.n	1ec3e <http_client_send_request+0x9e>
		free(module->req.ext_header);
   1ec3a:	4b67      	ldr	r3, [pc, #412]	; (1edd8 <http_client_send_request+0x238>)
   1ec3c:	4798      	blx	r3
	if (ext_header != NULL) {
   1ec3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ec40:	2b00      	cmp	r3, #0
   1ec42:	d032      	beq.n	1ecaa <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
   1ec44:	0018      	movs	r0, r3
   1ec46:	4b65      	ldr	r3, [pc, #404]	; (1eddc <http_client_send_request+0x23c>)
   1ec48:	4798      	blx	r3
   1ec4a:	23d4      	movs	r3, #212	; 0xd4
   1ec4c:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
   1ec4e:	2800      	cmp	r0, #0
   1ec50:	d100      	bne.n	1ec54 <http_client_send_request+0xb4>
   1ec52:	e094      	b.n	1ed7e <http_client_send_request+0x1de>
	module->sending = 0;
   1ec54:	2241      	movs	r2, #65	; 0x41
   1ec56:	5ca3      	ldrb	r3, [r4, r2]
   1ec58:	2101      	movs	r1, #1
   1ec5a:	438b      	bics	r3, r1
   1ec5c:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
   1ec5e:	2300      	movs	r3, #0
   1ec60:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
   1ec62:	782b      	ldrb	r3, [r5, #0]
   1ec64:	2b2f      	cmp	r3, #47	; 0x2f
   1ec66:	d024      	beq.n	1ecb2 <http_client_send_request+0x112>
		module->req.uri[0] = '/';
   1ec68:	222f      	movs	r2, #47	; 0x2f
   1ec6a:	2370      	movs	r3, #112	; 0x70
   1ec6c:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
   1ec6e:	782b      	ldrb	r3, [r5, #0]
   1ec70:	2b00      	cmp	r3, #0
   1ec72:	d124      	bne.n	1ecbe <http_client_send_request+0x11e>
	if (entity != NULL) {
   1ec74:	9b03      	ldr	r3, [sp, #12]
   1ec76:	2b00      	cmp	r3, #0
   1ec78:	d027      	beq.n	1ecca <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   1ec7a:	0020      	movs	r0, r4
   1ec7c:	30b0      	adds	r0, #176	; 0xb0
   1ec7e:	2218      	movs	r2, #24
   1ec80:	0019      	movs	r1, r3
   1ec82:	4b57      	ldr	r3, [pc, #348]	; (1ede0 <http_client_send_request+0x240>)
   1ec84:	4798      	blx	r3
	module->req.method = method;
   1ec86:	23c8      	movs	r3, #200	; 0xc8
   1ec88:	4652      	mov	r2, sl
   1ec8a:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
   1ec8c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   1ec8e:	2b01      	cmp	r3, #1
   1ec90:	d022      	beq.n	1ecd8 <http_client_send_request+0x138>
   1ec92:	2b00      	cmp	r3, #0
   1ec94:	d027      	beq.n	1ece6 <http_client_send_request+0x146>
   1ec96:	2b02      	cmp	r3, #2
   1ec98:	d03a      	beq.n	1ed10 <http_client_send_request+0x170>
		return -EAGAIN;
   1ec9a:	230b      	movs	r3, #11
   1ec9c:	425b      	negs	r3, r3
   1ec9e:	9301      	str	r3, [sp, #4]
   1eca0:	e08d      	b.n	1edbe <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
   1eca2:	2200      	movs	r2, #0
   1eca4:	e7b8      	b.n	1ec18 <http_client_send_request+0x78>
   1eca6:	2200      	movs	r2, #0
   1eca8:	e7b6      	b.n	1ec18 <http_client_send_request+0x78>
		module->req.ext_header = NULL;
   1ecaa:	2200      	movs	r2, #0
   1ecac:	23d4      	movs	r3, #212	; 0xd4
   1ecae:	50e2      	str	r2, [r4, r3]
   1ecb0:	e7d0      	b.n	1ec54 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
   1ecb2:	0020      	movs	r0, r4
   1ecb4:	3070      	adds	r0, #112	; 0x70
   1ecb6:	0029      	movs	r1, r5
   1ecb8:	4b4a      	ldr	r3, [pc, #296]	; (1ede4 <http_client_send_request+0x244>)
   1ecba:	4798      	blx	r3
   1ecbc:	e7da      	b.n	1ec74 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
   1ecbe:	0029      	movs	r1, r5
   1ecc0:	0020      	movs	r0, r4
   1ecc2:	3071      	adds	r0, #113	; 0x71
   1ecc4:	4b47      	ldr	r3, [pc, #284]	; (1ede4 <http_client_send_request+0x244>)
   1ecc6:	4798      	blx	r3
   1ecc8:	e7d4      	b.n	1ec74 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   1ecca:	0020      	movs	r0, r4
   1eccc:	30b0      	adds	r0, #176	; 0xb0
   1ecce:	2218      	movs	r2, #24
   1ecd0:	2100      	movs	r1, #0
   1ecd2:	4b45      	ldr	r3, [pc, #276]	; (1ede8 <http_client_send_request+0x248>)
   1ecd4:	4798      	blx	r3
   1ecd6:	e7d6      	b.n	1ec86 <http_client_send_request+0xe6>
		if (!reconnect) {
   1ecd8:	9b01      	ldr	r3, [sp, #4]
   1ecda:	2b00      	cmp	r3, #0
   1ecdc:	d06f      	beq.n	1edbe <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
   1ecde:	2100      	movs	r1, #0
   1ece0:	0020      	movs	r0, r4
   1ece2:	4b42      	ldr	r3, [pc, #264]	; (1edec <http_client_send_request+0x24c>)
   1ece4:	4798      	blx	r3
		if (module->config.tls) {
   1ece6:	2352      	movs	r3, #82	; 0x52
   1ece8:	5ce2      	ldrb	r2, [r4, r3]
   1ecea:	1e53      	subs	r3, r2, #1
   1ecec:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   1ecee:	b2d2      	uxtb	r2, r2
   1ecf0:	2101      	movs	r1, #1
   1ecf2:	2002      	movs	r0, #2
   1ecf4:	4b3e      	ldr	r3, [pc, #248]	; (1edf0 <http_client_send_request+0x250>)
   1ecf6:	4798      	blx	r3
   1ecf8:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
   1ecfa:	2800      	cmp	r0, #0
   1ecfc:	db43      	blt.n	1ed86 <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
   1ecfe:	0080      	lsls	r0, r0, #2
   1ed00:	4b3c      	ldr	r3, [pc, #240]	; (1edf4 <http_client_send_request+0x254>)
   1ed02:	50c4      	str	r4, [r0, r3]
   1ed04:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
   1ed06:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   1ed08:	2620      	movs	r6, #32
			isv6 = 1;
   1ed0a:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
   1ed0c:	2730      	movs	r7, #48	; 0x30
   1ed0e:	e00c      	b.n	1ed2a <http_client_send_request+0x18a>
		if (!reconnect) {
   1ed10:	9b01      	ldr	r3, [sp, #4]
   1ed12:	2b00      	cmp	r3, #0
   1ed14:	d1e3      	bne.n	1ecde <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
   1ed16:	3303      	adds	r3, #3
   1ed18:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
   1ed1a:	0020      	movs	r0, r4
   1ed1c:	4b36      	ldr	r3, [pc, #216]	; (1edf8 <http_client_send_request+0x258>)
   1ed1e:	4798      	blx	r3
			break;
   1ed20:	e04d      	b.n	1edbe <http_client_send_request+0x21e>
			if (isv6) {
   1ed22:	2900      	cmp	r1, #0
   1ed24:	d001      	beq.n	1ed2a <http_client_send_request+0x18a>
   1ed26:	e012      	b.n	1ed4e <http_client_send_request+0x1ae>
			isv6 = 1;
   1ed28:	0001      	movs	r1, r0
	while (*host != '\0') {
   1ed2a:	782a      	ldrb	r2, [r5, #0]
   1ed2c:	2a00      	cmp	r2, #0
   1ed2e:	d02e      	beq.n	1ed8e <http_client_send_request+0x1ee>
		ch = *host++;
   1ed30:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   1ed32:	0013      	movs	r3, r2
   1ed34:	43b3      	bics	r3, r6
   1ed36:	3b41      	subs	r3, #65	; 0x41
   1ed38:	2b05      	cmp	r3, #5
   1ed3a:	d9f5      	bls.n	1ed28 <http_client_send_request+0x188>
   1ed3c:	2a3a      	cmp	r2, #58	; 0x3a
   1ed3e:	d00a      	beq.n	1ed56 <http_client_send_request+0x1b6>
   1ed40:	2a2f      	cmp	r2, #47	; 0x2f
   1ed42:	d00a      	beq.n	1ed5a <http_client_send_request+0x1ba>
		} else if (ch == '.') {
   1ed44:	2a2e      	cmp	r2, #46	; 0x2e
   1ed46:	d0ec      	beq.n	1ed22 <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
   1ed48:	403a      	ands	r2, r7
   1ed4a:	2a30      	cmp	r2, #48	; 0x30
   1ed4c:	d0ed      	beq.n	1ed2a <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
   1ed4e:	9802      	ldr	r0, [sp, #8]
   1ed50:	4b2a      	ldr	r3, [pc, #168]	; (1edfc <http_client_send_request+0x25c>)
   1ed52:	4798      	blx	r3
   1ed54:	e02f      	b.n	1edb6 <http_client_send_request+0x216>
			isv6 = 1;
   1ed56:	0001      	movs	r1, r0
   1ed58:	e7e7      	b.n	1ed2a <http_client_send_request+0x18a>
   1ed5a:	0001      	movs	r1, r0
   1ed5c:	e7e5      	b.n	1ed2a <http_client_send_request+0x18a>
		return -EINVAL;
   1ed5e:	2316      	movs	r3, #22
   1ed60:	425b      	negs	r3, r3
   1ed62:	9301      	str	r3, [sp, #4]
   1ed64:	e02b      	b.n	1edbe <http_client_send_request+0x21e>
		return -EBUSY;
   1ed66:	2310      	movs	r3, #16
   1ed68:	425b      	negs	r3, r3
   1ed6a:	9301      	str	r3, [sp, #4]
   1ed6c:	e027      	b.n	1edbe <http_client_send_request+0x21e>
		return -EINVAL;
   1ed6e:	2316      	movs	r3, #22
   1ed70:	425b      	negs	r3, r3
   1ed72:	9301      	str	r3, [sp, #4]
   1ed74:	e023      	b.n	1edbe <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
   1ed76:	235b      	movs	r3, #91	; 0x5b
   1ed78:	425b      	negs	r3, r3
   1ed7a:	9301      	str	r3, [sp, #4]
   1ed7c:	e01f      	b.n	1edbe <http_client_send_request+0x21e>
			return -ENOMEM;
   1ed7e:	230c      	movs	r3, #12
   1ed80:	425b      	negs	r3, r3
   1ed82:	9301      	str	r3, [sp, #4]
   1ed84:	e01b      	b.n	1edbe <http_client_send_request+0x21e>
			return -ENOSPC;
   1ed86:	231c      	movs	r3, #28
   1ed88:	425b      	negs	r3, r3
   1ed8a:	9301      	str	r3, [sp, #4]
   1ed8c:	e017      	b.n	1edbe <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
   1ed8e:	2302      	movs	r3, #2
   1ed90:	aa04      	add	r2, sp, #16
   1ed92:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   1ed94:	334e      	adds	r3, #78	; 0x4e
   1ed96:	5ae3      	ldrh	r3, [r4, r3]
   1ed98:	021a      	lsls	r2, r3, #8
   1ed9a:	0a1b      	lsrs	r3, r3, #8
   1ed9c:	4313      	orrs	r3, r2
   1ed9e:	aa04      	add	r2, sp, #16
   1eda0:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   1eda2:	9802      	ldr	r0, [sp, #8]
   1eda4:	4b16      	ldr	r3, [pc, #88]	; (1ee00 <http_client_send_request+0x260>)
   1eda6:	4798      	blx	r3
   1eda8:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   1edaa:	2000      	movs	r0, #0
   1edac:	5620      	ldrsb	r0, [r4, r0]
   1edae:	2210      	movs	r2, #16
   1edb0:	a904      	add	r1, sp, #16
   1edb2:	4b14      	ldr	r3, [pc, #80]	; (1ee04 <http_client_send_request+0x264>)
   1edb4:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
   1edb6:	2301      	movs	r3, #1
   1edb8:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
   1edba:	2300      	movs	r3, #0
   1edbc:	9301      	str	r3, [sp, #4]
}
   1edbe:	9801      	ldr	r0, [sp, #4]
   1edc0:	b008      	add	sp, #32
   1edc2:	bc04      	pop	{r2}
   1edc4:	4692      	mov	sl, r2
   1edc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1edc8:	0002306c 	.word	0x0002306c
   1edcc:	0001ff89 	.word	0x0001ff89
   1edd0:	00023074 	.word	0x00023074
   1edd4:	0001ff7b 	.word	0x0001ff7b
   1edd8:	0001fbd1 	.word	0x0001fbd1
   1eddc:	0001ff41 	.word	0x0001ff41
   1ede0:	0001fbe5 	.word	0x0001fbe5
   1ede4:	0001ff31 	.word	0x0001ff31
   1ede8:	0001fc1b 	.word	0x0001fc1b
   1edec:	0001e5e9 	.word	0x0001e5e9
   1edf0:	00018861 	.word	0x00018861
   1edf4:	20003718 	.word	0x20003718
   1edf8:	0001e701 	.word	0x0001e701
   1edfc:	00018ca1 	.word	0x00018ca1
   1ee00:	00018c35 	.word	0x00018c35
   1ee04:	000189e1 	.word	0x000189e1

0001ee08 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   1ee08:	b510      	push	{r4, lr}
	if (module == NULL) {
   1ee0a:	2800      	cmp	r0, #0
   1ee0c:	d00d      	beq.n	1ee2a <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   1ee0e:	6c41      	ldr	r1, [r0, #68]	; 0x44
   1ee10:	6e02      	ldr	r2, [r0, #96]	; 0x60
   1ee12:	4291      	cmp	r1, r2
   1ee14:	d20a      	bcs.n	1ee2c <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   1ee16:	1a52      	subs	r2, r2, r1
   1ee18:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
   1ee1a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1ee1c:	469c      	mov	ip, r3
   1ee1e:	4461      	add	r1, ip
	recv(module->sock,
   1ee20:	7800      	ldrb	r0, [r0, #0]
   1ee22:	b240      	sxtb	r0, r0
   1ee24:	2300      	movs	r3, #0
   1ee26:	4c04      	ldr	r4, [pc, #16]	; (1ee38 <_http_client_recv_packet+0x30>)
   1ee28:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
   1ee2a:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
   1ee2c:	218b      	movs	r1, #139	; 0x8b
   1ee2e:	4249      	negs	r1, r1
   1ee30:	4b02      	ldr	r3, [pc, #8]	; (1ee3c <_http_client_recv_packet+0x34>)
   1ee32:	4798      	blx	r3
		return;
   1ee34:	e7f9      	b.n	1ee2a <_http_client_recv_packet+0x22>
   1ee36:	46c0      	nop			; (mov r8, r8)
   1ee38:	00018b09 	.word	0x00018b09
   1ee3c:	0001e5e9 	.word	0x0001e5e9

0001ee40 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   1ee40:	b570      	push	{r4, r5, r6, lr}
   1ee42:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
   1ee44:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   1ee46:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   1ee48:	1a5c      	subs	r4, r3, r1
   1ee4a:	1904      	adds	r4, r0, r4

	if (remain > 0) {
   1ee4c:	2c00      	cmp	r4, #0
   1ee4e:	dc02      	bgt.n	1ee56 <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
   1ee50:	2300      	movs	r3, #0
   1ee52:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
   1ee54:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
   1ee56:	0022      	movs	r2, r4
   1ee58:	4b01      	ldr	r3, [pc, #4]	; (1ee60 <_http_client_move_buffer+0x20>)
   1ee5a:	4798      	blx	r3
		module->recved_size = remain;
   1ee5c:	646c      	str	r4, [r5, #68]	; 0x44
   1ee5e:	e7f9      	b.n	1ee54 <_http_client_move_buffer+0x14>
   1ee60:	0001fbf7 	.word	0x0001fbf7

0001ee64 <_http_client_handle_header>:
{
   1ee64:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ee66:	46ce      	mov	lr, r9
   1ee68:	b500      	push	{lr}
   1ee6a:	b084      	sub	sp, #16
   1ee6c:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
   1ee6e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
   1ee70:	4b62      	ldr	r3, [pc, #392]	; (1effc <_http_client_handle_header+0x198>)
   1ee72:	4699      	mov	r9, r3
   1ee74:	e049      	b.n	1ef0a <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
   1ee76:	0021      	movs	r1, r4
   1ee78:	0038      	movs	r0, r7
   1ee7a:	4b61      	ldr	r3, [pc, #388]	; (1f000 <_http_client_handle_header+0x19c>)
   1ee7c:	4798      	blx	r3
			return 0;
   1ee7e:	2600      	movs	r6, #0
}
   1ee80:	0030      	movs	r0, r6
   1ee82:	b004      	add	sp, #16
   1ee84:	bc04      	pop	{r2}
   1ee86:	4691      	mov	r9, r2
   1ee88:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
   1ee8a:	1ca1      	adds	r1, r4, #2
   1ee8c:	0038      	movs	r0, r7
   1ee8e:	4b5c      	ldr	r3, [pc, #368]	; (1f000 <_http_client_handle_header+0x19c>)
   1ee90:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
   1ee92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ee94:	2b00      	cmp	r3, #0
   1ee96:	d00a      	beq.n	1eeae <_http_client_handle_header+0x4a>
   1ee98:	22e4      	movs	r2, #228	; 0xe4
   1ee9a:	5ab9      	ldrh	r1, [r7, r2]
   1ee9c:	2900      	cmp	r1, #0
   1ee9e:	d006      	beq.n	1eeae <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
   1eea0:	3a08      	subs	r2, #8
   1eea2:	58b8      	ldr	r0, [r7, r2]
   1eea4:	2800      	cmp	r0, #0
   1eea6:	db07      	blt.n	1eeb8 <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   1eea8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1eeaa:	4290      	cmp	r0, r2
   1eeac:	dc10      	bgt.n	1eed0 <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
   1eeae:	2201      	movs	r2, #1
   1eeb0:	23d8      	movs	r3, #216	; 0xd8
   1eeb2:	50fa      	str	r2, [r7, r3]
			return 1;
   1eeb4:	2601      	movs	r6, #1
   1eeb6:	e7e3      	b.n	1ee80 <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
   1eeb8:	aa01      	add	r2, sp, #4
   1eeba:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
   1eebc:	2101      	movs	r1, #1
   1eebe:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
   1eec0:	2100      	movs	r1, #0
   1eec2:	20e0      	movs	r0, #224	; 0xe0
   1eec4:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
   1eec6:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1eec8:	3102      	adds	r1, #2
   1eeca:	0038      	movs	r0, r7
   1eecc:	4798      	blx	r3
   1eece:	e7ee      	b.n	1eeae <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
   1eed0:	aa01      	add	r2, sp, #4
   1eed2:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
   1eed4:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
   1eed6:	2100      	movs	r1, #0
   1eed8:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
   1eeda:	20e0      	movs	r0, #224	; 0xe0
   1eedc:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1eede:	3102      	adds	r1, #2
   1eee0:	0038      	movs	r0, r7
   1eee2:	4798      	blx	r3
   1eee4:	e7e3      	b.n	1eeae <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   1eee6:	0020      	movs	r0, r4
   1eee8:	3010      	adds	r0, #16
   1eeea:	4b46      	ldr	r3, [pc, #280]	; (1f004 <_http_client_handle_header+0x1a0>)
   1eeec:	4798      	blx	r3
   1eeee:	23dc      	movs	r3, #220	; 0xdc
   1eef0:	50f8      	str	r0, [r7, r3]
   1eef2:	e009      	b.n	1ef08 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1eef4:	3201      	adds	r2, #1
   1eef6:	4295      	cmp	r5, r2
   1eef8:	d006      	beq.n	1ef08 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   1eefa:	7813      	ldrb	r3, [r2, #0]
   1eefc:	2b20      	cmp	r3, #32
   1eefe:	d12b      	bne.n	1ef58 <_http_client_handle_header+0xf4>
   1ef00:	e7f8      	b.n	1eef4 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
   1ef02:	3a21      	subs	r2, #33	; 0x21
   1ef04:	3389      	adds	r3, #137	; 0x89
   1ef06:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
   1ef08:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
   1ef0a:	493f      	ldr	r1, [pc, #252]	; (1f008 <_http_client_handle_header+0x1a4>)
   1ef0c:	0020      	movs	r0, r4
   1ef0e:	47c8      	blx	r9
   1ef10:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   1ef12:	d0b0      	beq.n	1ee76 <_http_client_handle_header+0x12>
   1ef14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1ef16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1ef18:	4694      	mov	ip, r2
   1ef1a:	4463      	add	r3, ip
   1ef1c:	4298      	cmp	r0, r3
   1ef1e:	d2aa      	bcs.n	1ee76 <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
   1ef20:	2202      	movs	r2, #2
   1ef22:	4939      	ldr	r1, [pc, #228]	; (1f008 <_http_client_handle_header+0x1a4>)
   1ef24:	0020      	movs	r0, r4
   1ef26:	4b39      	ldr	r3, [pc, #228]	; (1f00c <_http_client_handle_header+0x1a8>)
   1ef28:	4798      	blx	r3
   1ef2a:	2800      	cmp	r0, #0
   1ef2c:	d0ad      	beq.n	1ee8a <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   1ef2e:	2210      	movs	r2, #16
   1ef30:	4937      	ldr	r1, [pc, #220]	; (1f010 <_http_client_handle_header+0x1ac>)
   1ef32:	0020      	movs	r0, r4
   1ef34:	4b35      	ldr	r3, [pc, #212]	; (1f00c <_http_client_handle_header+0x1a8>)
   1ef36:	4798      	blx	r3
   1ef38:	2800      	cmp	r0, #0
   1ef3a:	d0d4      	beq.n	1eee6 <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   1ef3c:	2213      	movs	r2, #19
   1ef3e:	4935      	ldr	r1, [pc, #212]	; (1f014 <_http_client_handle_header+0x1b0>)
   1ef40:	0020      	movs	r0, r4
   1ef42:	4b32      	ldr	r3, [pc, #200]	; (1f00c <_http_client_handle_header+0x1a8>)
   1ef44:	4798      	blx	r3
   1ef46:	1e06      	subs	r6, r0, #0
   1ef48:	d110      	bne.n	1ef6c <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   1ef4a:	0022      	movs	r2, r4
   1ef4c:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1ef4e:	4295      	cmp	r5, r2
   1ef50:	d9da      	bls.n	1ef08 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   1ef52:	7ce3      	ldrb	r3, [r4, #19]
   1ef54:	2b20      	cmp	r3, #32
   1ef56:	d0cd      	beq.n	1eef4 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   1ef58:	2220      	movs	r2, #32
   1ef5a:	4393      	bics	r3, r2
   1ef5c:	2b43      	cmp	r3, #67	; 0x43
   1ef5e:	d0d0      	beq.n	1ef02 <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
   1ef60:	2186      	movs	r1, #134	; 0x86
   1ef62:	4249      	negs	r1, r1
   1ef64:	0038      	movs	r0, r7
   1ef66:	4b2c      	ldr	r3, [pc, #176]	; (1f018 <_http_client_handle_header+0x1b4>)
   1ef68:	4798      	blx	r3
					return 0;
   1ef6a:	e789      	b.n	1ee80 <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   1ef6c:	220c      	movs	r2, #12
   1ef6e:	492b      	ldr	r1, [pc, #172]	; (1f01c <_http_client_handle_header+0x1b8>)
   1ef70:	0020      	movs	r0, r4
   1ef72:	4b26      	ldr	r3, [pc, #152]	; (1f00c <_http_client_handle_header+0x1a8>)
   1ef74:	4798      	blx	r3
   1ef76:	2800      	cmp	r0, #0
   1ef78:	d11d      	bne.n	1efb6 <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
   1ef7a:	0022      	movs	r2, r4
   1ef7c:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1ef7e:	4295      	cmp	r5, r2
   1ef80:	d9c2      	bls.n	1ef08 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   1ef82:	7b23      	ldrb	r3, [r4, #12]
   1ef84:	2b20      	cmp	r3, #32
   1ef86:	d009      	beq.n	1ef9c <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   1ef88:	2220      	movs	r2, #32
   1ef8a:	4393      	bics	r3, r2
   1ef8c:	2b4b      	cmp	r3, #75	; 0x4b
   1ef8e:	d00c      	beq.n	1efaa <_http_client_handle_header+0x146>
					module->permanent = 0;
   1ef90:	2241      	movs	r2, #65	; 0x41
   1ef92:	5cbb      	ldrb	r3, [r7, r2]
   1ef94:	2102      	movs	r1, #2
   1ef96:	438b      	bics	r3, r1
   1ef98:	54bb      	strb	r3, [r7, r2]
   1ef9a:	e7b5      	b.n	1ef08 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1ef9c:	3201      	adds	r2, #1
   1ef9e:	4295      	cmp	r5, r2
   1efa0:	d0b2      	beq.n	1ef08 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   1efa2:	7813      	ldrb	r3, [r2, #0]
   1efa4:	2b20      	cmp	r3, #32
   1efa6:	d1ef      	bne.n	1ef88 <_http_client_handle_header+0x124>
   1efa8:	e7f8      	b.n	1ef9c <_http_client_handle_header+0x138>
					module->permanent = 1;
   1efaa:	3221      	adds	r2, #33	; 0x21
   1efac:	5cbb      	ldrb	r3, [r7, r2]
   1efae:	2102      	movs	r1, #2
   1efb0:	430b      	orrs	r3, r1
   1efb2:	54bb      	strb	r3, [r7, r2]
   1efb4:	e7a8      	b.n	1ef08 <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   1efb6:	2205      	movs	r2, #5
   1efb8:	4919      	ldr	r1, [pc, #100]	; (1f020 <_http_client_handle_header+0x1bc>)
   1efba:	0020      	movs	r0, r4
   1efbc:	4b13      	ldr	r3, [pc, #76]	; (1f00c <_http_client_handle_header+0x1a8>)
   1efbe:	4798      	blx	r3
   1efc0:	2800      	cmp	r0, #0
   1efc2:	d1a1      	bne.n	1ef08 <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   1efc4:	0020      	movs	r0, r4
   1efc6:	3009      	adds	r0, #9
   1efc8:	4b0e      	ldr	r3, [pc, #56]	; (1f004 <_http_client_handle_header+0x1a0>)
   1efca:	4798      	blx	r3
   1efcc:	23e4      	movs	r3, #228	; 0xe4
   1efce:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
   1efd0:	2200      	movs	r2, #0
   1efd2:	3b08      	subs	r3, #8
   1efd4:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
   1efd6:	7963      	ldrb	r3, [r4, #5]
   1efd8:	2b31      	cmp	r3, #49	; 0x31
   1efda:	d802      	bhi.n	1efe2 <_http_client_handle_header+0x17e>
   1efdc:	79e3      	ldrb	r3, [r4, #7]
   1efde:	2b30      	cmp	r3, #48	; 0x30
   1efe0:	d905      	bls.n	1efee <_http_client_handle_header+0x18a>
				module->permanent = 1;
   1efe2:	2241      	movs	r2, #65	; 0x41
   1efe4:	5cbb      	ldrb	r3, [r7, r2]
   1efe6:	2102      	movs	r1, #2
   1efe8:	430b      	orrs	r3, r1
   1efea:	54bb      	strb	r3, [r7, r2]
   1efec:	e78c      	b.n	1ef08 <_http_client_handle_header+0xa4>
				module->permanent = 0;
   1efee:	2241      	movs	r2, #65	; 0x41
   1eff0:	5cbb      	ldrb	r3, [r7, r2]
   1eff2:	2102      	movs	r1, #2
   1eff4:	438b      	bics	r3, r1
   1eff6:	54bb      	strb	r3, [r7, r2]
   1eff8:	e786      	b.n	1ef08 <_http_client_handle_header+0xa4>
   1effa:	46c0      	nop			; (mov r8, r8)
   1effc:	0001fff9 	.word	0x0001fff9
   1f000:	0001ee41 	.word	0x0001ee41
   1f004:	0001fb69 	.word	0x0001fb69
   1f008:	000231dc 	.word	0x000231dc
   1f00c:	0001ff89 	.word	0x0001ff89
   1f010:	0002304c 	.word	0x0002304c
   1f014:	00022f5c 	.word	0x00022f5c
   1f018:	0001e5e9 	.word	0x0001e5e9
   1f01c:	00022f70 	.word	0x00022f70
   1f020:	00022f80 	.word	0x00022f80

0001f024 <_http_client_handle_entity>:
{
   1f024:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f026:	46ce      	mov	lr, r9
   1f028:	b500      	push	{lr}
   1f02a:	b086      	sub	sp, #24
   1f02c:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
   1f02e:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   1f030:	23dc      	movs	r3, #220	; 0xdc
   1f032:	58c3      	ldr	r3, [r0, r3]
   1f034:	2b00      	cmp	r3, #0
   1f036:	db69      	blt.n	1f10c <_http_client_handle_entity+0xe8>
   1f038:	6e02      	ldr	r2, [r0, #96]	; 0x60
   1f03a:	4293      	cmp	r3, r2
   1f03c:	dc2b      	bgt.n	1f096 <_http_client_handle_entity+0x72>
	return 0;
   1f03e:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
   1f040:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1f042:	4293      	cmp	r3, r2
   1f044:	dc4e      	bgt.n	1f0e4 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
   1f046:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   1f048:	2e00      	cmp	r6, #0
   1f04a:	d003      	beq.n	1f054 <_http_client_handle_entity+0x30>
   1f04c:	22e4      	movs	r2, #228	; 0xe4
   1f04e:	5aa1      	ldrh	r1, [r4, r2]
   1f050:	2900      	cmp	r1, #0
   1f052:	d10e      	bne.n	1f072 <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
   1f054:	2300      	movs	r3, #0
   1f056:	22d8      	movs	r2, #216	; 0xd8
   1f058:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
   1f05a:	320c      	adds	r2, #12
   1f05c:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
   1f05e:	3341      	adds	r3, #65	; 0x41
   1f060:	5ce3      	ldrb	r3, [r4, r3]
   1f062:	079b      	lsls	r3, r3, #30
   1f064:	d40f      	bmi.n	1f086 <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
   1f066:	2100      	movs	r1, #0
   1f068:	0020      	movs	r0, r4
   1f06a:	4b71      	ldr	r3, [pc, #452]	; (1f230 <_http_client_handle_entity+0x20c>)
   1f06c:	4798      	blx	r3
	return 0;
   1f06e:	2000      	movs	r0, #0
   1f070:	e038      	b.n	1f0e4 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
   1f072:	aa03      	add	r2, sp, #12
   1f074:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
   1f076:	2100      	movs	r1, #0
   1f078:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
   1f07a:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
   1f07c:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1f07e:	3102      	adds	r1, #2
   1f080:	0020      	movs	r0, r4
   1f082:	47b0      	blx	r6
   1f084:	e7e6      	b.n	1f054 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   1f086:	23dc      	movs	r3, #220	; 0xdc
   1f088:	58e1      	ldr	r1, [r4, r3]
   1f08a:	1869      	adds	r1, r5, r1
   1f08c:	0020      	movs	r0, r4
   1f08e:	4b69      	ldr	r3, [pc, #420]	; (1f234 <_http_client_handle_entity+0x210>)
   1f090:	4798      	blx	r3
				return module->recved_size;
   1f092:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1f094:	e026      	b.n	1f0e4 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
   1f096:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1f098:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
   1f09a:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
   1f09c:	21e0      	movs	r1, #224	; 0xe0
   1f09e:	5840      	ldr	r0, [r0, r1]
   1f0a0:	4684      	mov	ip, r0
   1f0a2:	4462      	add	r2, ip
   1f0a4:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   1f0a6:	4293      	cmp	r3, r2
   1f0a8:	dc20      	bgt.n	1f0ec <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
   1f0aa:	2300      	movs	r3, #0
   1f0ac:	22d8      	movs	r2, #216	; 0xd8
   1f0ae:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   1f0b0:	320c      	adds	r2, #12
   1f0b2:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   1f0b4:	3ae3      	subs	r2, #227	; 0xe3
   1f0b6:	ab03      	add	r3, sp, #12
   1f0b8:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   1f0ba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1f0bc:	2b00      	cmp	r3, #0
   1f0be:	d007      	beq.n	1f0d0 <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   1f0c0:	ae03      	add	r6, sp, #12
   1f0c2:	0032      	movs	r2, r6
   1f0c4:	2103      	movs	r1, #3
   1f0c6:	0020      	movs	r0, r4
   1f0c8:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
   1f0ca:	7a33      	ldrb	r3, [r6, #8]
   1f0cc:	2b01      	cmp	r3, #1
   1f0ce:	d103      	bne.n	1f0d8 <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
   1f0d0:	2341      	movs	r3, #65	; 0x41
   1f0d2:	5ce3      	ldrb	r3, [r4, r3]
   1f0d4:	079b      	lsls	r3, r3, #30
   1f0d6:	d510      	bpl.n	1f0fa <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
   1f0d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1f0da:	18e9      	adds	r1, r5, r3
   1f0dc:	0020      	movs	r0, r4
   1f0de:	4b55      	ldr	r3, [pc, #340]	; (1f234 <_http_client_handle_entity+0x210>)
   1f0e0:	4798      	blx	r3
	return 0;
   1f0e2:	2000      	movs	r0, #0
}
   1f0e4:	b006      	add	sp, #24
   1f0e6:	bc04      	pop	{r2}
   1f0e8:	4691      	mov	r9, r2
   1f0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
   1f0ec:	2200      	movs	r2, #0
   1f0ee:	ab03      	add	r3, sp, #12
   1f0f0:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   1f0f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1f0f4:	2b00      	cmp	r3, #0
   1f0f6:	d0ef      	beq.n	1f0d8 <_http_client_handle_entity+0xb4>
   1f0f8:	e7e2      	b.n	1f0c0 <_http_client_handle_entity+0x9c>
					printf("1\r\n");
   1f0fa:	484f      	ldr	r0, [pc, #316]	; (1f238 <_http_client_handle_entity+0x214>)
   1f0fc:	4b4f      	ldr	r3, [pc, #316]	; (1f23c <_http_client_handle_entity+0x218>)
   1f0fe:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   1f100:	2100      	movs	r1, #0
   1f102:	0020      	movs	r0, r4
   1f104:	4b4a      	ldr	r3, [pc, #296]	; (1f230 <_http_client_handle_entity+0x20c>)
   1f106:	4798      	blx	r3
					return 0;
   1f108:	2000      	movs	r0, #0
   1f10a:	e7eb      	b.n	1f0e4 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
   1f10c:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
   1f10e:	2300      	movs	r3, #0
   1f110:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
   1f112:	26e0      	movs	r6, #224	; 0xe0
   1f114:	e00a      	b.n	1f12c <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
   1f116:	2341      	movs	r3, #65	; 0x41
   1f118:	5ce3      	ldrb	r3, [r4, r3]
   1f11a:	079b      	lsls	r3, r3, #30
   1f11c:	d51b      	bpl.n	1f156 <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
   1f11e:	1ca9      	adds	r1, r5, #2
   1f120:	0020      	movs	r0, r4
   1f122:	4b44      	ldr	r3, [pc, #272]	; (1f234 <_http_client_handle_entity+0x210>)
   1f124:	4798      	blx	r3
	} while(module->recved_size > 0);
   1f126:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1f128:	2b00      	cmp	r3, #0
   1f12a:	d073      	beq.n	1f214 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
   1f12c:	59a3      	ldr	r3, [r4, r6]
   1f12e:	2b00      	cmp	r3, #0
   1f130:	db30      	blt.n	1f194 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
   1f132:	d116      	bne.n	1f162 <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
   1f134:	22d8      	movs	r2, #216	; 0xd8
   1f136:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   1f138:	320c      	adds	r2, #12
   1f13a:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   1f13c:	3ae3      	subs	r2, #227	; 0xe3
   1f13e:	4669      	mov	r1, sp
   1f140:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
   1f142:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
   1f144:	9301      	str	r3, [sp, #4]
				if (module->cb) {
   1f146:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1f148:	2b00      	cmp	r3, #0
   1f14a:	d0e4      	beq.n	1f116 <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   1f14c:	466a      	mov	r2, sp
   1f14e:	2103      	movs	r1, #3
   1f150:	0020      	movs	r0, r4
   1f152:	4798      	blx	r3
   1f154:	e7df      	b.n	1f116 <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
   1f156:	2100      	movs	r1, #0
   1f158:	0020      	movs	r0, r4
   1f15a:	4b35      	ldr	r3, [pc, #212]	; (1f230 <_http_client_handle_entity+0x20c>)
   1f15c:	4798      	blx	r3
	return 0;
   1f15e:	2000      	movs	r0, #0
   1f160:	e7c0      	b.n	1f0e4 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
   1f162:	42bb      	cmp	r3, r7
   1f164:	dcdf      	bgt.n	1f126 <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
   1f166:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
   1f168:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
   1f16a:	2300      	movs	r3, #0
   1f16c:	466a      	mov	r2, sp
   1f16e:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
   1f170:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1f172:	2b00      	cmp	r3, #0
   1f174:	d002      	beq.n	1f17c <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   1f176:	2103      	movs	r1, #3
   1f178:	0020      	movs	r0, r4
   1f17a:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   1f17c:	59a3      	ldr	r3, [r4, r6]
   1f17e:	1c99      	adds	r1, r3, #2
   1f180:	1869      	adds	r1, r5, r1
   1f182:	0020      	movs	r0, r4
   1f184:	4b2b      	ldr	r3, [pc, #172]	; (1f234 <_http_client_handle_entity+0x210>)
   1f186:	4798      	blx	r3
				length = (int)module->recved_size;
   1f188:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
   1f18a:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
   1f18c:	2301      	movs	r3, #1
   1f18e:	425b      	negs	r3, r3
   1f190:	51a3      	str	r3, [r4, r6]
   1f192:	e7c8      	b.n	1f126 <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
   1f194:	2300      	movs	r3, #0
   1f196:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   1f198:	2f00      	cmp	r7, #0
   1f19a:	dd04      	ble.n	1f1a6 <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
   1f19c:	782b      	ldrb	r3, [r5, #0]
   1f19e:	2b0a      	cmp	r3, #10
   1f1a0:	d11c      	bne.n	1f1dc <_http_client_handle_entity+0x1b8>
					buffer++;
   1f1a2:	3501      	adds	r5, #1
					length--;
   1f1a4:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   1f1a6:	59a3      	ldr	r3, [r4, r6]
   1f1a8:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1f1aa:	4293      	cmp	r3, r2
   1f1ac:	dc39      	bgt.n	1f222 <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
   1f1ae:	2f00      	cmp	r7, #0
   1f1b0:	d1b9      	bne.n	1f126 <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
   1f1b2:	2201      	movs	r2, #1
   1f1b4:	4252      	negs	r2, r2
   1f1b6:	23e0      	movs	r3, #224	; 0xe0
   1f1b8:	50e2      	str	r2, [r4, r3]
   1f1ba:	e7d0      	b.n	1f15e <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   1f1bc:	001a      	movs	r2, r3
   1f1be:	3a61      	subs	r2, #97	; 0x61
   1f1c0:	2a05      	cmp	r2, #5
   1f1c2:	d818      	bhi.n	1f1f6 <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   1f1c4:	59a2      	ldr	r2, [r4, r6]
   1f1c6:	0112      	lsls	r2, r2, #4
   1f1c8:	18d3      	adds	r3, r2, r3
   1f1ca:	3b61      	subs	r3, #97	; 0x61
   1f1cc:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   1f1ce:	3501      	adds	r5, #1
   1f1d0:	3f01      	subs	r7, #1
   1f1d2:	2f00      	cmp	r7, #0
   1f1d4:	d020      	beq.n	1f218 <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
   1f1d6:	782b      	ldrb	r3, [r5, #0]
   1f1d8:	2b0a      	cmp	r3, #10
   1f1da:	d0e2      	beq.n	1f1a2 <_http_client_handle_entity+0x17e>
				if (extension != 0) {
   1f1dc:	464a      	mov	r2, r9
   1f1de:	2a00      	cmp	r2, #0
   1f1e0:	d1f5      	bne.n	1f1ce <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
   1f1e2:	001a      	movs	r2, r3
   1f1e4:	3a30      	subs	r2, #48	; 0x30
   1f1e6:	2a09      	cmp	r2, #9
   1f1e8:	d8e8      	bhi.n	1f1bc <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   1f1ea:	59a2      	ldr	r2, [r4, r6]
   1f1ec:	0112      	lsls	r2, r2, #4
   1f1ee:	18d3      	adds	r3, r2, r3
   1f1f0:	3b30      	subs	r3, #48	; 0x30
   1f1f2:	51a3      	str	r3, [r4, r6]
   1f1f4:	e7eb      	b.n	1f1ce <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   1f1f6:	001a      	movs	r2, r3
   1f1f8:	3a41      	subs	r2, #65	; 0x41
   1f1fa:	2a05      	cmp	r2, #5
   1f1fc:	d805      	bhi.n	1f20a <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   1f1fe:	59a2      	ldr	r2, [r4, r6]
   1f200:	0112      	lsls	r2, r2, #4
   1f202:	18d3      	adds	r3, r2, r3
   1f204:	3b41      	subs	r3, #65	; 0x41
   1f206:	51a3      	str	r3, [r4, r6]
   1f208:	e7e1      	b.n	1f1ce <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
   1f20a:	3b3b      	subs	r3, #59	; 0x3b
   1f20c:	425a      	negs	r2, r3
   1f20e:	415a      	adcs	r2, r3
   1f210:	4691      	mov	r9, r2
   1f212:	e7dc      	b.n	1f1ce <_http_client_handle_entity+0x1aa>
	return 0;
   1f214:	2000      	movs	r0, #0
   1f216:	e765      	b.n	1f0e4 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   1f218:	23e0      	movs	r3, #224	; 0xe0
   1f21a:	58e3      	ldr	r3, [r4, r3]
   1f21c:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1f21e:	4293      	cmp	r3, r2
   1f220:	ddc7      	ble.n	1f1b2 <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
   1f222:	218b      	movs	r1, #139	; 0x8b
   1f224:	4249      	negs	r1, r1
   1f226:	0020      	movs	r0, r4
   1f228:	4b01      	ldr	r3, [pc, #4]	; (1f230 <_http_client_handle_entity+0x20c>)
   1f22a:	4798      	blx	r3
   1f22c:	e797      	b.n	1f15e <_http_client_handle_entity+0x13a>
   1f22e:	46c0      	nop			; (mov r8, r8)
   1f230:	0001e5e9 	.word	0x0001e5e9
   1f234:	0001ee41 	.word	0x0001ee41
   1f238:	00022f58 	.word	0x00022f58
   1f23c:	0001fe3d 	.word	0x0001fe3d

0001f240 <_http_client_handle_response>:
{
   1f240:	b510      	push	{r4, lr}
	switch(module->resp.state) {
   1f242:	23d8      	movs	r3, #216	; 0xd8
   1f244:	58c3      	ldr	r3, [r0, r3]
   1f246:	2b00      	cmp	r3, #0
   1f248:	d003      	beq.n	1f252 <_http_client_handle_response+0x12>
   1f24a:	2b01      	cmp	r3, #1
   1f24c:	d004      	beq.n	1f258 <_http_client_handle_response+0x18>
	return 0;
   1f24e:	2000      	movs	r0, #0
   1f250:	e001      	b.n	1f256 <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
   1f252:	4b03      	ldr	r3, [pc, #12]	; (1f260 <_http_client_handle_response+0x20>)
   1f254:	4798      	blx	r3
}
   1f256:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
   1f258:	4b02      	ldr	r3, [pc, #8]	; (1f264 <_http_client_handle_response+0x24>)
   1f25a:	4798      	blx	r3
   1f25c:	e7fb      	b.n	1f256 <_http_client_handle_response+0x16>
   1f25e:	46c0      	nop			; (mov r8, r8)
   1f260:	0001ee65 	.word	0x0001ee65
   1f264:	0001f025 	.word	0x0001f025

0001f268 <_http_client_recved_packet>:
{
   1f268:	b570      	push	{r4, r5, r6, lr}
   1f26a:	0004      	movs	r4, r0
	module->recved_size += read_len;
   1f26c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1f26e:	469c      	mov	ip, r3
   1f270:	4461      	add	r1, ip
   1f272:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
   1f274:	2358      	movs	r3, #88	; 0x58
   1f276:	5ac3      	ldrh	r3, [r0, r3]
   1f278:	2b00      	cmp	r3, #0
   1f27a:	d105      	bne.n	1f288 <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
   1f27c:	4d05      	ldr	r5, [pc, #20]	; (1f294 <_http_client_recved_packet+0x2c>)
   1f27e:	0020      	movs	r0, r4
   1f280:	47a8      	blx	r5
   1f282:	2800      	cmp	r0, #0
   1f284:	d1fb      	bne.n	1f27e <_http_client_recved_packet+0x16>
}
   1f286:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   1f288:	6c81      	ldr	r1, [r0, #72]	; 0x48
   1f28a:	6d40      	ldr	r0, [r0, #84]	; 0x54
   1f28c:	4b02      	ldr	r3, [pc, #8]	; (1f298 <_http_client_recved_packet+0x30>)
   1f28e:	4798      	blx	r3
   1f290:	e7f4      	b.n	1f27c <_http_client_recved_packet+0x14>
   1f292:	46c0      	nop			; (mov r8, r8)
   1f294:	0001f241 	.word	0x0001f241
   1f298:	0001f615 	.word	0x0001f615

0001f29c <http_client_socket_event_handler>:
{
   1f29c:	b510      	push	{r4, lr}
   1f29e:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
   1f2a0:	0080      	lsls	r0, r0, #2
   1f2a2:	4b65      	ldr	r3, [pc, #404]	; (1f438 <http_client_socket_event_handler+0x19c>)
   1f2a4:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
   1f2a6:	2c00      	cmp	r4, #0
   1f2a8:	d006      	beq.n	1f2b8 <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
   1f2aa:	2906      	cmp	r1, #6
   1f2ac:	d051      	beq.n	1f352 <http_client_socket_event_handler+0xb6>
   1f2ae:	2907      	cmp	r1, #7
   1f2b0:	d100      	bne.n	1f2b4 <http_client_socket_event_handler+0x18>
   1f2b2:	e08a      	b.n	1f3ca <http_client_socket_event_handler+0x12e>
   1f2b4:	2905      	cmp	r1, #5
   1f2b6:	d001      	beq.n	1f2bc <http_client_socket_event_handler+0x20>
}
   1f2b8:	b004      	add	sp, #16
   1f2ba:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
   1f2bc:	2301      	movs	r3, #1
   1f2be:	56d3      	ldrsb	r3, [r2, r3]
   1f2c0:	1e1a      	subs	r2, r3, #0
   1f2c2:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
   1f2c4:	db15      	blt.n	1f2f2 <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
   1f2c6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1f2c8:	2b00      	cmp	r3, #0
   1f2ca:	d003      	beq.n	1f2d4 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   1f2cc:	aa01      	add	r2, sp, #4
   1f2ce:	2100      	movs	r1, #0
   1f2d0:	0020      	movs	r0, r4
   1f2d2:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   1f2d4:	2303      	movs	r3, #3
   1f2d6:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   1f2d8:	3355      	adds	r3, #85	; 0x55
   1f2da:	5ae2      	ldrh	r2, [r4, r3]
   1f2dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   1f2de:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1f2e0:	4b56      	ldr	r3, [pc, #344]	; (1f43c <http_client_socket_event_handler+0x1a0>)
   1f2e2:	4798      	blx	r3
    		_http_client_recv_packet(module);
   1f2e4:	0020      	movs	r0, r4
   1f2e6:	4b56      	ldr	r3, [pc, #344]	; (1f440 <http_client_socket_event_handler+0x1a4>)
   1f2e8:	4798      	blx	r3
			_http_client_request(module);
   1f2ea:	0020      	movs	r0, r4
   1f2ec:	4b55      	ldr	r3, [pc, #340]	; (1f444 <http_client_socket_event_handler+0x1a8>)
   1f2ee:	4798      	blx	r3
   1f2f0:	e7e2      	b.n	1f2b8 <http_client_socket_event_handler+0x1c>
	switch (err) {
   1f2f2:	330e      	adds	r3, #14
   1f2f4:	b2d9      	uxtb	r1, r3
   1f2f6:	290e      	cmp	r1, #14
   1f2f8:	d81e      	bhi.n	1f338 <http_client_socket_event_handler+0x9c>
   1f2fa:	008b      	lsls	r3, r1, #2
   1f2fc:	4952      	ldr	r1, [pc, #328]	; (1f448 <http_client_socket_event_handler+0x1ac>)
   1f2fe:	58cb      	ldr	r3, [r1, r3]
   1f300:	469f      	mov	pc, r3
			return -ENOENT;
   1f302:	2102      	movs	r1, #2
   1f304:	4249      	negs	r1, r1
   1f306:	e01d      	b.n	1f344 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
   1f308:	2170      	movs	r1, #112	; 0x70
   1f30a:	4249      	negs	r1, r1
   1f30c:	e01a      	b.n	1f344 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   1f30e:	210c      	movs	r1, #12
   1f310:	4249      	negs	r1, r1
   1f312:	e017      	b.n	1f344 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
   1f314:	2116      	movs	r1, #22
   1f316:	4249      	negs	r1, r1
   1f318:	e014      	b.n	1f344 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   1f31a:	210c      	movs	r1, #12
   1f31c:	4249      	negs	r1, r1
   1f31e:	e011      	b.n	1f344 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
   1f320:	2179      	movs	r1, #121	; 0x79
   1f322:	4249      	negs	r1, r1
   1f324:	e00e      	b.n	1f344 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
   1f326:	2168      	movs	r1, #104	; 0x68
   1f328:	4249      	negs	r1, r1
   1f32a:	e00b      	b.n	1f344 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
   1f32c:	210b      	movs	r1, #11
   1f32e:	4249      	negs	r1, r1
   1f330:	e008      	b.n	1f344 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
   1f332:	2110      	movs	r1, #16
   1f334:	4249      	negs	r1, r1
   1f336:	e005      	b.n	1f344 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
   1f338:	2a00      	cmp	r2, #0
   1f33a:	db07      	blt.n	1f34c <http_client_socket_event_handler+0xb0>
			return 0;
   1f33c:	2100      	movs	r1, #0
   1f33e:	e001      	b.n	1f344 <http_client_socket_event_handler+0xa8>
			return -EIO;
   1f340:	2105      	movs	r1, #5
   1f342:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   1f344:	0020      	movs	r0, r4
   1f346:	4b41      	ldr	r3, [pc, #260]	; (1f44c <http_client_socket_event_handler+0x1b0>)
   1f348:	4798      	blx	r3
   1f34a:	e7b5      	b.n	1f2b8 <http_client_socket_event_handler+0x1c>
				return -EIO;
   1f34c:	2105      	movs	r1, #5
   1f34e:	4249      	negs	r1, r1
   1f350:	e7f8      	b.n	1f344 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
   1f352:	2304      	movs	r3, #4
   1f354:	5ed1      	ldrsh	r1, [r2, r3]
   1f356:	2900      	cmp	r1, #0
   1f358:	dd06      	ble.n	1f368 <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   1f35a:	0020      	movs	r0, r4
   1f35c:	4b3c      	ldr	r3, [pc, #240]	; (1f450 <http_client_socket_event_handler+0x1b4>)
   1f35e:	4798      	blx	r3
		_http_client_recv_packet(module);
   1f360:	0020      	movs	r0, r4
   1f362:	4b37      	ldr	r3, [pc, #220]	; (1f440 <http_client_socket_event_handler+0x1a4>)
   1f364:	4798      	blx	r3
		break;
   1f366:	e7a7      	b.n	1f2b8 <http_client_socket_event_handler+0x1c>
	switch (err) {
   1f368:	000b      	movs	r3, r1
   1f36a:	330e      	adds	r3, #14
   1f36c:	b29a      	uxth	r2, r3
   1f36e:	2a0e      	cmp	r2, #14
   1f370:	d81e      	bhi.n	1f3b0 <http_client_socket_event_handler+0x114>
   1f372:	0093      	lsls	r3, r2, #2
   1f374:	4a37      	ldr	r2, [pc, #220]	; (1f454 <http_client_socket_event_handler+0x1b8>)
   1f376:	58d3      	ldr	r3, [r2, r3]
   1f378:	469f      	mov	pc, r3
			return -ENOENT;
   1f37a:	2102      	movs	r1, #2
   1f37c:	4249      	negs	r1, r1
   1f37e:	e01d      	b.n	1f3bc <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
   1f380:	2170      	movs	r1, #112	; 0x70
   1f382:	4249      	negs	r1, r1
   1f384:	e01a      	b.n	1f3bc <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   1f386:	210c      	movs	r1, #12
   1f388:	4249      	negs	r1, r1
   1f38a:	e017      	b.n	1f3bc <http_client_socket_event_handler+0x120>
			return -EINVAL;
   1f38c:	2116      	movs	r1, #22
   1f38e:	4249      	negs	r1, r1
   1f390:	e014      	b.n	1f3bc <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   1f392:	210c      	movs	r1, #12
   1f394:	4249      	negs	r1, r1
   1f396:	e011      	b.n	1f3bc <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
   1f398:	2179      	movs	r1, #121	; 0x79
   1f39a:	4249      	negs	r1, r1
   1f39c:	e00e      	b.n	1f3bc <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
   1f39e:	2168      	movs	r1, #104	; 0x68
   1f3a0:	4249      	negs	r1, r1
   1f3a2:	e00b      	b.n	1f3bc <http_client_socket_event_handler+0x120>
			return -EAGAIN;
   1f3a4:	210b      	movs	r1, #11
   1f3a6:	4249      	negs	r1, r1
   1f3a8:	e008      	b.n	1f3bc <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
   1f3aa:	2110      	movs	r1, #16
   1f3ac:	4249      	negs	r1, r1
   1f3ae:	e005      	b.n	1f3bc <http_client_socket_event_handler+0x120>
			if (err < 0) {
   1f3b0:	2900      	cmp	r1, #0
   1f3b2:	db07      	blt.n	1f3c4 <http_client_socket_event_handler+0x128>
			return 0;
   1f3b4:	2100      	movs	r1, #0
   1f3b6:	e001      	b.n	1f3bc <http_client_socket_event_handler+0x120>
			return -EIO;
   1f3b8:	2105      	movs	r1, #5
   1f3ba:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   1f3bc:	0020      	movs	r0, r4
   1f3be:	4b23      	ldr	r3, [pc, #140]	; (1f44c <http_client_socket_event_handler+0x1b0>)
   1f3c0:	4798      	blx	r3
   1f3c2:	e7cd      	b.n	1f360 <http_client_socket_event_handler+0xc4>
				return -EIO;
   1f3c4:	2105      	movs	r1, #5
   1f3c6:	4249      	negs	r1, r1
   1f3c8:	e7f8      	b.n	1f3bc <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
   1f3ca:	2300      	movs	r3, #0
   1f3cc:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
   1f3ce:	2b00      	cmp	r3, #0
   1f3d0:	db08      	blt.n	1f3e4 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
   1f3d2:	0020      	movs	r0, r4
   1f3d4:	4b1b      	ldr	r3, [pc, #108]	; (1f444 <http_client_socket_event_handler+0x1a8>)
   1f3d6:	4798      	blx	r3
		module->sending = 0;
   1f3d8:	2241      	movs	r2, #65	; 0x41
   1f3da:	5ca3      	ldrb	r3, [r4, r2]
   1f3dc:	2101      	movs	r1, #1
   1f3de:	438b      	bics	r3, r1
   1f3e0:	54a3      	strb	r3, [r4, r2]
    	break;
   1f3e2:	e769      	b.n	1f2b8 <http_client_socket_event_handler+0x1c>
	switch (err) {
   1f3e4:	330e      	adds	r3, #14
   1f3e6:	b29a      	uxth	r2, r3
   1f3e8:	2a0d      	cmp	r2, #13
   1f3ea:	d81e      	bhi.n	1f42a <http_client_socket_event_handler+0x18e>
   1f3ec:	0093      	lsls	r3, r2, #2
   1f3ee:	4a1a      	ldr	r2, [pc, #104]	; (1f458 <http_client_socket_event_handler+0x1bc>)
   1f3f0:	58d3      	ldr	r3, [r2, r3]
   1f3f2:	469f      	mov	pc, r3
			return -ENOENT;
   1f3f4:	2102      	movs	r1, #2
   1f3f6:	4249      	negs	r1, r1
   1f3f8:	e019      	b.n	1f42e <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
   1f3fa:	2170      	movs	r1, #112	; 0x70
   1f3fc:	4249      	negs	r1, r1
   1f3fe:	e016      	b.n	1f42e <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   1f400:	210c      	movs	r1, #12
   1f402:	4249      	negs	r1, r1
   1f404:	e013      	b.n	1f42e <http_client_socket_event_handler+0x192>
			return -EINVAL;
   1f406:	2116      	movs	r1, #22
   1f408:	4249      	negs	r1, r1
   1f40a:	e010      	b.n	1f42e <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   1f40c:	210c      	movs	r1, #12
   1f40e:	4249      	negs	r1, r1
   1f410:	e00d      	b.n	1f42e <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
   1f412:	2179      	movs	r1, #121	; 0x79
   1f414:	4249      	negs	r1, r1
   1f416:	e00a      	b.n	1f42e <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
   1f418:	2168      	movs	r1, #104	; 0x68
   1f41a:	4249      	negs	r1, r1
   1f41c:	e007      	b.n	1f42e <http_client_socket_event_handler+0x192>
			return -EAGAIN;
   1f41e:	210b      	movs	r1, #11
   1f420:	4249      	negs	r1, r1
   1f422:	e004      	b.n	1f42e <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
   1f424:	2110      	movs	r1, #16
   1f426:	4249      	negs	r1, r1
   1f428:	e001      	b.n	1f42e <http_client_socket_event_handler+0x192>
			return -EIO;
   1f42a:	2105      	movs	r1, #5
   1f42c:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   1f42e:	0020      	movs	r0, r4
   1f430:	4b06      	ldr	r3, [pc, #24]	; (1f44c <http_client_socket_event_handler+0x1b0>)
   1f432:	4798      	blx	r3
   1f434:	e7d0      	b.n	1f3d8 <http_client_socket_event_handler+0x13c>
   1f436:	46c0      	nop			; (mov r8, r8)
   1f438:	20003718 	.word	0x20003718
   1f43c:	0001f5e9 	.word	0x0001f5e9
   1f440:	0001ee09 	.word	0x0001ee09
   1f444:	0001e701 	.word	0x0001e701
   1f448:	00022e98 	.word	0x00022e98
   1f44c:	0001e5e9 	.word	0x0001e5e9
   1f450:	0001f269 	.word	0x0001f269
   1f454:	00022ed4 	.word	0x00022ed4
   1f458:	00022f10 	.word	0x00022f10

0001f45c <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
   1f45c:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
   1f45e:	6101      	str	r1, [r0, #16]
	writer->written = 0;
   1f460:	2200      	movs	r2, #0
   1f462:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
   1f464:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
   1f466:	9b00      	ldr	r3, [sp, #0]
   1f468:	60c3      	str	r3, [r0, #12]
}
   1f46a:	4770      	bx	lr

0001f46c <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
   1f46c:	b510      	push	{r4, lr}
   1f46e:	0004      	movs	r4, r0
	if(writer->written > 0) {
   1f470:	6842      	ldr	r2, [r0, #4]
   1f472:	2a00      	cmp	r2, #0
   1f474:	d100      	bne.n	1f478 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
   1f476:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   1f478:	6901      	ldr	r1, [r0, #16]
   1f47a:	68c0      	ldr	r0, [r0, #12]
   1f47c:	68a3      	ldr	r3, [r4, #8]
   1f47e:	4798      	blx	r3
		writer->written = 0;
   1f480:	2300      	movs	r3, #0
   1f482:	6063      	str	r3, [r4, #4]
}
   1f484:	e7f7      	b.n	1f476 <stream_writer_send_remain+0xa>
	...

0001f488 <stream_writer_send_8>:
{
   1f488:	b570      	push	{r4, r5, r6, lr}
   1f48a:	0004      	movs	r4, r0
   1f48c:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
   1f48e:	6803      	ldr	r3, [r0, #0]
   1f490:	6842      	ldr	r2, [r0, #4]
   1f492:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
   1f494:	2b00      	cmp	r3, #0
   1f496:	dd05      	ble.n	1f4a4 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
   1f498:	6922      	ldr	r2, [r4, #16]
   1f49a:	6863      	ldr	r3, [r4, #4]
   1f49c:	1c59      	adds	r1, r3, #1
   1f49e:	6061      	str	r1, [r4, #4]
   1f4a0:	54d5      	strb	r5, [r2, r3]
}
   1f4a2:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
   1f4a4:	4b01      	ldr	r3, [pc, #4]	; (1f4ac <stream_writer_send_8+0x24>)
   1f4a6:	4798      	blx	r3
   1f4a8:	e7f6      	b.n	1f498 <stream_writer_send_8+0x10>
   1f4aa:	46c0      	nop			; (mov r8, r8)
   1f4ac:	0001f46d 	.word	0x0001f46d

0001f4b0 <stream_writer_send_buffer>:
{
   1f4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f4b2:	0006      	movs	r6, r0
   1f4b4:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
   1f4b6:	2a00      	cmp	r2, #0
   1f4b8:	d008      	beq.n	1f4cc <stream_writer_send_buffer+0x1c>
   1f4ba:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
   1f4bc:	4f04      	ldr	r7, [pc, #16]	; (1f4d0 <stream_writer_send_buffer+0x20>)
   1f4be:	2100      	movs	r1, #0
   1f4c0:	5661      	ldrsb	r1, [r4, r1]
   1f4c2:	0030      	movs	r0, r6
   1f4c4:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
   1f4c6:	3401      	adds	r4, #1
   1f4c8:	42a5      	cmp	r5, r4
   1f4ca:	d1f8      	bne.n	1f4be <stream_writer_send_buffer+0xe>
}
   1f4cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f4ce:	46c0      	nop			; (mov r8, r8)
   1f4d0:	0001f489 	.word	0x0001f489

0001f4d4 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
   1f4d4:	4a02      	ldr	r2, [pc, #8]	; (1f4e0 <sw_timer_tcc_callback+0xc>)
   1f4d6:	6813      	ldr	r3, [r2, #0]
   1f4d8:	3301      	adds	r3, #1
   1f4da:	6013      	str	r3, [r2, #0]
}
   1f4dc:	4770      	bx	lr
   1f4de:	46c0      	nop			; (mov r8, r8)
   1f4e0:	20003734 	.word	0x20003734

0001f4e4 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
   1f4e4:	2364      	movs	r3, #100	; 0x64
   1f4e6:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
   1f4e8:	2300      	movs	r3, #0
   1f4ea:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
   1f4ec:	7043      	strb	r3, [r0, #1]
}
   1f4ee:	4770      	bx	lr

0001f4f0 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   1f4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f4f2:	46c6      	mov	lr, r8
   1f4f4:	b500      	push	{lr}
   1f4f6:	b0ac      	sub	sp, #176	; 0xb0
   1f4f8:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   1f4fa:	466e      	mov	r6, sp
   1f4fc:	4b1d      	ldr	r3, [pc, #116]	; (1f574 <sw_timer_init+0x84>)
   1f4fe:	466a      	mov	r2, sp
   1f500:	cb92      	ldmia	r3!, {r1, r4, r7}
   1f502:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   1f504:	886b      	ldrh	r3, [r5, #2]
   1f506:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   1f508:	3014      	adds	r0, #20
   1f50a:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   1f50c:	782b      	ldrb	r3, [r5, #0]
   1f50e:	009b      	lsls	r3, r3, #2
   1f510:	5999      	ldr	r1, [r3, r6]
   1f512:	0017      	movs	r7, r2
   1f514:	0010      	movs	r0, r2
   1f516:	4b18      	ldr	r3, [pc, #96]	; (1f578 <sw_timer_init+0x88>)
   1f518:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   1f51a:	2000      	movs	r0, #0
   1f51c:	4b17      	ldr	r3, [pc, #92]	; (1f57c <sw_timer_init+0x8c>)
   1f51e:	4798      	blx	r3
   1f520:	4b17      	ldr	r3, [pc, #92]	; (1f580 <sw_timer_init+0x90>)
   1f522:	7a1b      	ldrb	r3, [r3, #8]
   1f524:	b2db      	uxtb	r3, r3
   1f526:	40d8      	lsrs	r0, r3
   1f528:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   1f52a:	8869      	ldrh	r1, [r5, #2]
   1f52c:	20fa      	movs	r0, #250	; 0xfa
   1f52e:	0200      	lsls	r0, r0, #8
   1f530:	4b14      	ldr	r3, [pc, #80]	; (1f584 <sw_timer_init+0x94>)
   1f532:	4798      	blx	r3
   1f534:	0001      	movs	r1, r0
   1f536:	4640      	mov	r0, r8
   1f538:	4b13      	ldr	r3, [pc, #76]	; (1f588 <sw_timer_init+0x98>)
   1f53a:	4798      	blx	r3
   1f53c:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   1f53e:	2305      	movs	r3, #5
   1f540:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   1f542:	782b      	ldrb	r3, [r5, #0]
   1f544:	009b      	lsls	r3, r3, #2
   1f546:	5999      	ldr	r1, [r3, r6]
   1f548:	003a      	movs	r2, r7
   1f54a:	0020      	movs	r0, r4
   1f54c:	4b0f      	ldr	r3, [pc, #60]	; (1f58c <sw_timer_init+0x9c>)
   1f54e:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   1f550:	786a      	ldrb	r2, [r5, #1]
   1f552:	3208      	adds	r2, #8
   1f554:	b2d2      	uxtb	r2, r2
   1f556:	490e      	ldr	r1, [pc, #56]	; (1f590 <sw_timer_init+0xa0>)
   1f558:	0020      	movs	r0, r4
   1f55a:	4b0e      	ldr	r3, [pc, #56]	; (1f594 <sw_timer_init+0xa4>)
   1f55c:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   1f55e:	7869      	ldrb	r1, [r5, #1]
   1f560:	3108      	adds	r1, #8
   1f562:	b2c9      	uxtb	r1, r1
   1f564:	0020      	movs	r0, r4
   1f566:	4b0c      	ldr	r3, [pc, #48]	; (1f598 <sw_timer_init+0xa8>)
   1f568:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   1f56a:	b02c      	add	sp, #176	; 0xb0
   1f56c:	bc04      	pop	{r2}
   1f56e:	4690      	mov	r8, r2
   1f570:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f572:	46c0      	nop			; (mov r8, r8)
   1f574:	00023080 	.word	0x00023080
   1f578:	0001ab7d 	.word	0x0001ab7d
   1f57c:	0001a8d9 	.word	0x0001a8d9
   1f580:	40000400 	.word	0x40000400
   1f584:	0001f93d 	.word	0x0001f93d
   1f588:	0001f829 	.word	0x0001f829
   1f58c:	0001acc9 	.word	0x0001acc9
   1f590:	0001f4d5 	.word	0x0001f4d5
   1f594:	0001b0d5 	.word	0x0001b0d5
   1f598:	0001b0ed 	.word	0x0001b0ed

0001f59c <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   1f59c:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   1f59e:	2102      	movs	r1, #2
   1f5a0:	6893      	ldr	r3, [r2, #8]
   1f5a2:	4219      	tst	r1, r3
   1f5a4:	d1fc      	bne.n	1f5a0 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   1f5a6:	6813      	ldr	r3, [r2, #0]
   1f5a8:	2102      	movs	r1, #2
   1f5aa:	430b      	orrs	r3, r1
   1f5ac:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   1f5ae:	4770      	bx	lr

0001f5b0 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   1f5b0:	b570      	push	{r4, r5, r6, lr}
   1f5b2:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
   1f5b4:	7805      	ldrb	r5, [r0, #0]
   1f5b6:	07e8      	lsls	r0, r5, #31
   1f5b8:	d502      	bpl.n	1f5c0 <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
   1f5ba:	2001      	movs	r0, #1
   1f5bc:	4240      	negs	r0, r0
}
   1f5be:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
   1f5c0:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
   1f5c2:	0029      	movs	r1, r5
   1f5c4:	2002      	movs	r0, #2
   1f5c6:	4381      	bics	r1, r0
   1f5c8:	7021      	strb	r1, [r4, #0]
			handler->context = context;
   1f5ca:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
   1f5cc:	6d61      	ldr	r1, [r4, #84]	; 0x54
   1f5ce:	0018      	movs	r0, r3
   1f5d0:	4b04      	ldr	r3, [pc, #16]	; (1f5e4 <sw_timer_register_callback+0x34>)
   1f5d2:	4798      	blx	r3
   1f5d4:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
   1f5d6:	7823      	ldrb	r3, [r4, #0]
   1f5d8:	2201      	movs	r2, #1
   1f5da:	4313      	orrs	r3, r2
   1f5dc:	7023      	strb	r3, [r4, #0]
			return index;
   1f5de:	2000      	movs	r0, #0
   1f5e0:	e7ed      	b.n	1f5be <sw_timer_register_callback+0xe>
   1f5e2:	46c0      	nop			; (mov r8, r8)
   1f5e4:	0001f829 	.word	0x0001f829

0001f5e8 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   1f5e8:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
   1f5ea:	008b      	lsls	r3, r1, #2
   1f5ec:	185d      	adds	r5, r3, r1
   1f5ee:	00ad      	lsls	r5, r5, #2
   1f5f0:	5c29      	ldrb	r1, [r5, r0]
   1f5f2:	2602      	movs	r6, #2
   1f5f4:	4331      	orrs	r1, r6
   1f5f6:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   1f5f8:	1944      	adds	r4, r0, r5
   1f5fa:	6d41      	ldr	r1, [r0, #84]	; 0x54
   1f5fc:	0010      	movs	r0, r2
   1f5fe:	4b03      	ldr	r3, [pc, #12]	; (1f60c <sw_timer_enable_callback+0x24>)
   1f600:	4798      	blx	r3
   1f602:	4b03      	ldr	r3, [pc, #12]	; (1f610 <sw_timer_enable_callback+0x28>)
   1f604:	681b      	ldr	r3, [r3, #0]
   1f606:	18c0      	adds	r0, r0, r3
   1f608:	6120      	str	r0, [r4, #16]
}
   1f60a:	bd70      	pop	{r4, r5, r6, pc}
   1f60c:	0001f829 	.word	0x0001f829
   1f610:	20003734 	.word	0x20003734

0001f614 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
   1f614:	008b      	lsls	r3, r1, #2
   1f616:	1859      	adds	r1, r3, r1
   1f618:	0089      	lsls	r1, r1, #2
   1f61a:	5c0b      	ldrb	r3, [r1, r0]
   1f61c:	2202      	movs	r2, #2
   1f61e:	4393      	bics	r3, r2
   1f620:	540b      	strb	r3, [r1, r0]
}
   1f622:	4770      	bx	lr

0001f624 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   1f624:	b570      	push	{r4, r5, r6, lr}
   1f626:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   1f628:	7803      	ldrb	r3, [r0, #0]
   1f62a:	07db      	lsls	r3, r3, #31
   1f62c:	d507      	bpl.n	1f63e <sw_timer_task+0x1a>
   1f62e:	7803      	ldrb	r3, [r0, #0]
   1f630:	079b      	lsls	r3, r3, #30
   1f632:	d504      	bpl.n	1f63e <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   1f634:	4b10      	ldr	r3, [pc, #64]	; (1f678 <sw_timer_task+0x54>)
   1f636:	681a      	ldr	r2, [r3, #0]
   1f638:	6903      	ldr	r3, [r0, #16]
   1f63a:	1a9b      	subs	r3, r3, r2
   1f63c:	d400      	bmi.n	1f640 <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
   1f63e:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   1f640:	7803      	ldrb	r3, [r0, #0]
   1f642:	075b      	lsls	r3, r3, #29
   1f644:	d4fb      	bmi.n	1f63e <sw_timer_task+0x1a>
				handler->busy = 1;
   1f646:	7803      	ldrb	r3, [r0, #0]
   1f648:	2104      	movs	r1, #4
   1f64a:	430b      	orrs	r3, r1
   1f64c:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
   1f64e:	68c3      	ldr	r3, [r0, #12]
   1f650:	2b00      	cmp	r3, #0
   1f652:	d00b      	beq.n	1f66c <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
   1f654:	18d2      	adds	r2, r2, r3
   1f656:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
   1f658:	68a2      	ldr	r2, [r4, #8]
   1f65a:	2100      	movs	r1, #0
   1f65c:	0020      	movs	r0, r4
   1f65e:	6865      	ldr	r5, [r4, #4]
   1f660:	47a8      	blx	r5
				handler->busy = 0;
   1f662:	7823      	ldrb	r3, [r4, #0]
   1f664:	2204      	movs	r2, #4
   1f666:	4393      	bics	r3, r2
   1f668:	7023      	strb	r3, [r4, #0]
}
   1f66a:	e7e8      	b.n	1f63e <sw_timer_task+0x1a>
					handler->callback_enable = 0;
   1f66c:	7802      	ldrb	r2, [r0, #0]
   1f66e:	2102      	movs	r1, #2
   1f670:	438a      	bics	r2, r1
   1f672:	7002      	strb	r2, [r0, #0]
   1f674:	e7f0      	b.n	1f658 <sw_timer_task+0x34>
   1f676:	46c0      	nop			; (mov r8, r8)
   1f678:	20003734 	.word	0x20003734

0001f67c <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
   1f67c:	b510      	push	{r4, lr}


	/* Initialize the board. */
	system_init();
   1f67e:	4b04      	ldr	r3, [pc, #16]	; (1f690 <main+0x14>)
   1f680:	4798      	blx	r3

	/* Initialize the UART console. */
	InitializeSerialConsole();
   1f682:	4b04      	ldr	r3, [pc, #16]	; (1f694 <main+0x18>)
   1f684:	4798      	blx	r3

    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   1f686:	4b04      	ldr	r3, [pc, #16]	; (1f698 <main+0x1c>)
   1f688:	4798      	blx	r3


	return 0;
}
   1f68a:	2000      	movs	r0, #0
   1f68c:	bd10      	pop	{r4, pc}
   1f68e:	46c0      	nop			; (mov r8, r8)
   1f690:	0001ab1d 	.word	0x0001ab1d
   1f694:	000146cd 	.word	0x000146cd
   1f698:	00013b85 	.word	0x00013b85

0001f69c <vApplicationDaemonTaskStartupHook>:
* @param[in]        None
* @return           None
*****************************************************************************/

void vApplicationDaemonTaskStartupHook(void)
{
   1f69c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f69e:	46ce      	mov	lr, r9
   1f6a0:	4647      	mov	r7, r8
   1f6a2:	b580      	push	{r7, lr}
   1f6a4:	b08f      	sub	sp, #60	; 0x3c
	init_storage();
   1f6a6:	4b3d      	ldr	r3, [pc, #244]	; (1f79c <vApplicationDaemonTaskStartupHook+0x100>)
   1f6a8:	4798      	blx	r3
	SerialConsoleWriteString("Test Program A - LED Toggles every 500ms\r\n");
   1f6aa:	483d      	ldr	r0, [pc, #244]	; (1f7a0 <vApplicationDaemonTaskStartupHook+0x104>)
   1f6ac:	4b3d      	ldr	r3, [pc, #244]	; (1f7a4 <vApplicationDaemonTaskStartupHook+0x108>)
   1f6ae:	4798      	blx	r3
	char test_file_name[] = "0:FlagA.txt";
   1f6b0:	a902      	add	r1, sp, #8
   1f6b2:	4b3d      	ldr	r3, [pc, #244]	; (1f7a8 <vApplicationDaemonTaskStartupHook+0x10c>)
   1f6b4:	000a      	movs	r2, r1
   1f6b6:	cb31      	ldmia	r3!, {r0, r4, r5}
   1f6b8:	c231      	stmia	r2!, {r0, r4, r5}
	FRESULT res = res = f_open(&file_object, (char const *)test_file_name, FA_READ);
   1f6ba:	2201      	movs	r2, #1
   1f6bc:	a805      	add	r0, sp, #20
   1f6be:	4b3b      	ldr	r3, [pc, #236]	; (1f7ac <vApplicationDaemonTaskStartupHook+0x110>)
   1f6c0:	4798      	blx	r3
	if (res != FR_OK)
   1f6c2:	2800      	cmp	r0, #0
   1f6c4:	d065      	beq.n	1f792 <vApplicationDaemonTaskStartupHook+0xf6>
		SerialConsoleWriteString("No flag A!\r\n");
   1f6c6:	483a      	ldr	r0, [pc, #232]	; (1f7b0 <vApplicationDaemonTaskStartupHook+0x114>)
   1f6c8:	4b36      	ldr	r3, [pc, #216]	; (1f7a4 <vApplicationDaemonTaskStartupHook+0x108>)
   1f6ca:	4798      	blx	r3
	f_close(&file_object); //Close file
   1f6cc:	a805      	add	r0, sp, #20
   1f6ce:	4b39      	ldr	r3, [pc, #228]	; (1f7b4 <vApplicationDaemonTaskStartupHook+0x118>)
   1f6d0:	4798      	blx	r3
   1f6d2:	2403      	movs	r4, #3
		port_base->OUTCLR.reg = pin_mask;
   1f6d4:	4f38      	ldr	r7, [pc, #224]	; (1f7b8 <vApplicationDaemonTaskStartupHook+0x11c>)
   1f6d6:	2380      	movs	r3, #128	; 0x80
   1f6d8:	041b      	lsls	r3, r3, #16
   1f6da:	4698      	mov	r8, r3
   1f6dc:	4699      	mov	r9, r3
   1f6de:	464b      	mov	r3, r9
   1f6e0:	617b      	str	r3, [r7, #20]
		delay_s(1);
   1f6e2:	26fa      	movs	r6, #250	; 0xfa
   1f6e4:	00b6      	lsls	r6, r6, #2
   1f6e6:	0030      	movs	r0, r6
   1f6e8:	4d34      	ldr	r5, [pc, #208]	; (1f7bc <vApplicationDaemonTaskStartupHook+0x120>)
   1f6ea:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
   1f6ec:	4643      	mov	r3, r8
   1f6ee:	61bb      	str	r3, [r7, #24]
		delay_s(1);
   1f6f0:	0030      	movs	r0, r6
   1f6f2:	47a8      	blx	r5
   1f6f4:	3c01      	subs	r4, #1
	for(int i = 0; i < 3; i++)
   1f6f6:	2c00      	cmp	r4, #0
   1f6f8:	d1f1      	bne.n	1f6de <vApplicationDaemonTaskStartupHook+0x42>
*****************************************************************************/
static void StartTasks(void)
{


snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   1f6fa:	4b31      	ldr	r3, [pc, #196]	; (1f7c0 <vApplicationDaemonTaskStartupHook+0x124>)
   1f6fc:	4798      	blx	r3
   1f6fe:	0003      	movs	r3, r0
   1f700:	4c30      	ldr	r4, [pc, #192]	; (1f7c4 <vApplicationDaemonTaskStartupHook+0x128>)
   1f702:	4a31      	ldr	r2, [pc, #196]	; (1f7c8 <vApplicationDaemonTaskStartupHook+0x12c>)
   1f704:	2140      	movs	r1, #64	; 0x40
   1f706:	0020      	movs	r0, r4
   1f708:	4d30      	ldr	r5, [pc, #192]	; (1f7cc <vApplicationDaemonTaskStartupHook+0x130>)
   1f70a:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
   1f70c:	0020      	movs	r0, r4
   1f70e:	4b25      	ldr	r3, [pc, #148]	; (1f7a4 <vApplicationDaemonTaskStartupHook+0x108>)
   1f710:	4798      	blx	r3

//Initialize Tasks here

if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   1f712:	4b2f      	ldr	r3, [pc, #188]	; (1f7d0 <vApplicationDaemonTaskStartupHook+0x134>)
   1f714:	9301      	str	r3, [sp, #4]
   1f716:	2304      	movs	r3, #4
   1f718:	9300      	str	r3, [sp, #0]
   1f71a:	2300      	movs	r3, #0
   1f71c:	2280      	movs	r2, #128	; 0x80
   1f71e:	0052      	lsls	r2, r2, #1
   1f720:	492c      	ldr	r1, [pc, #176]	; (1f7d4 <vApplicationDaemonTaskStartupHook+0x138>)
   1f722:	482d      	ldr	r0, [pc, #180]	; (1f7d8 <vApplicationDaemonTaskStartupHook+0x13c>)
   1f724:	4c2d      	ldr	r4, [pc, #180]	; (1f7dc <vApplicationDaemonTaskStartupHook+0x140>)
   1f726:	47a0      	blx	r4
   1f728:	2801      	cmp	r0, #1
   1f72a:	d002      	beq.n	1f732 <vApplicationDaemonTaskStartupHook+0x96>
	SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   1f72c:	482c      	ldr	r0, [pc, #176]	; (1f7e0 <vApplicationDaemonTaskStartupHook+0x144>)
   1f72e:	4b1d      	ldr	r3, [pc, #116]	; (1f7a4 <vApplicationDaemonTaskStartupHook+0x108>)
   1f730:	4798      	blx	r3
}

snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   1f732:	4b23      	ldr	r3, [pc, #140]	; (1f7c0 <vApplicationDaemonTaskStartupHook+0x124>)
   1f734:	4798      	blx	r3
   1f736:	0003      	movs	r3, r0
   1f738:	4c22      	ldr	r4, [pc, #136]	; (1f7c4 <vApplicationDaemonTaskStartupHook+0x128>)
   1f73a:	4a2a      	ldr	r2, [pc, #168]	; (1f7e4 <vApplicationDaemonTaskStartupHook+0x148>)
   1f73c:	2140      	movs	r1, #64	; 0x40
   1f73e:	0020      	movs	r0, r4
   1f740:	4d22      	ldr	r5, [pc, #136]	; (1f7cc <vApplicationDaemonTaskStartupHook+0x130>)
   1f742:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
   1f744:	0020      	movs	r0, r4
   1f746:	4b17      	ldr	r3, [pc, #92]	; (1f7a4 <vApplicationDaemonTaskStartupHook+0x108>)
   1f748:	4798      	blx	r3


if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   1f74a:	4b27      	ldr	r3, [pc, #156]	; (1f7e8 <vApplicationDaemonTaskStartupHook+0x14c>)
   1f74c:	9301      	str	r3, [sp, #4]
   1f74e:	2303      	movs	r3, #3
   1f750:	9300      	str	r3, [sp, #0]
   1f752:	2300      	movs	r3, #0
   1f754:	22fa      	movs	r2, #250	; 0xfa
   1f756:	0092      	lsls	r2, r2, #2
   1f758:	4924      	ldr	r1, [pc, #144]	; (1f7ec <vApplicationDaemonTaskStartupHook+0x150>)
   1f75a:	4825      	ldr	r0, [pc, #148]	; (1f7f0 <vApplicationDaemonTaskStartupHook+0x154>)
   1f75c:	4c1f      	ldr	r4, [pc, #124]	; (1f7dc <vApplicationDaemonTaskStartupHook+0x140>)
   1f75e:	47a0      	blx	r4
   1f760:	2801      	cmp	r0, #1
   1f762:	d002      	beq.n	1f76a <vApplicationDaemonTaskStartupHook+0xce>
	SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   1f764:	481e      	ldr	r0, [pc, #120]	; (1f7e0 <vApplicationDaemonTaskStartupHook+0x144>)
   1f766:	4b0f      	ldr	r3, [pc, #60]	; (1f7a4 <vApplicationDaemonTaskStartupHook+0x108>)
   1f768:	4798      	blx	r3
}

snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   1f76a:	4b15      	ldr	r3, [pc, #84]	; (1f7c0 <vApplicationDaemonTaskStartupHook+0x124>)
   1f76c:	4798      	blx	r3
   1f76e:	0003      	movs	r3, r0
   1f770:	4c14      	ldr	r4, [pc, #80]	; (1f7c4 <vApplicationDaemonTaskStartupHook+0x128>)
   1f772:	4a20      	ldr	r2, [pc, #128]	; (1f7f4 <vApplicationDaemonTaskStartupHook+0x158>)
   1f774:	2140      	movs	r1, #64	; 0x40
   1f776:	0020      	movs	r0, r4
   1f778:	4d14      	ldr	r5, [pc, #80]	; (1f7cc <vApplicationDaemonTaskStartupHook+0x130>)
   1f77a:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
   1f77c:	0020      	movs	r0, r4
   1f77e:	4b09      	ldr	r3, [pc, #36]	; (1f7a4 <vApplicationDaemonTaskStartupHook+0x108>)
   1f780:	4798      	blx	r3
	vTaskSuspend(daemonTaskHandle);
   1f782:	2000      	movs	r0, #0
   1f784:	4b1c      	ldr	r3, [pc, #112]	; (1f7f8 <vApplicationDaemonTaskStartupHook+0x15c>)
   1f786:	4798      	blx	r3
}
   1f788:	b00f      	add	sp, #60	; 0x3c
   1f78a:	bc0c      	pop	{r2, r3}
   1f78c:	4690      	mov	r8, r2
   1f78e:	4699      	mov	r9, r3
   1f790:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SerialConsoleWriteString("Got flag A!\r\n");
   1f792:	481a      	ldr	r0, [pc, #104]	; (1f7fc <vApplicationDaemonTaskStartupHook+0x160>)
   1f794:	4b03      	ldr	r3, [pc, #12]	; (1f7a4 <vApplicationDaemonTaskStartupHook+0x108>)
   1f796:	4798      	blx	r3
   1f798:	e798      	b.n	1f6cc <vApplicationDaemonTaskStartupHook+0x30>
   1f79a:	46c0      	nop			; (mov r8, r8)
   1f79c:	00012949 	.word	0x00012949
   1f7a0:	0002308c 	.word	0x0002308c
   1f7a4:	000147f5 	.word	0x000147f5
   1f7a8:	00023180 	.word	0x00023180
   1f7ac:	0001c9f9 	.word	0x0001c9f9
   1f7b0:	000230b8 	.word	0x000230b8
   1f7b4:	0001ce45 	.word	0x0001ce45
   1f7b8:	41004400 	.word	0x41004400
   1f7bc:	000159f9 	.word	0x000159f9
   1f7c0:	000131b9 	.word	0x000131b9
   1f7c4:	20003f14 	.word	0x20003f14
   1f7c8:	000230d8 	.word	0x000230d8
   1f7cc:	0001fe75 	.word	0x0001fe75
   1f7d0:	20003738 	.word	0x20003738
   1f7d4:	000230fc 	.word	0x000230fc
   1f7d8:	00012115 	.word	0x00012115
   1f7dc:	000139ad 	.word	0x000139ad
   1f7e0:	00023108 	.word	0x00023108
   1f7e4:	00023134 	.word	0x00023134
   1f7e8:	2000373c 	.word	0x2000373c
   1f7ec:	00023154 	.word	0x00023154
   1f7f0:	00012a49 	.word	0x00012a49
   1f7f4:	00023160 	.word	0x00023160
   1f7f8:	00013f2d 	.word	0x00013f2d
   1f7fc:	000230c8 	.word	0x000230c8

0001f800 <vApplicationMallocFailedHook>:




void vApplicationMallocFailedHook(void)
{
   1f800:	b510      	push	{r4, lr}
SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   1f802:	4802      	ldr	r0, [pc, #8]	; (1f80c <vApplicationMallocFailedHook+0xc>)
   1f804:	4b02      	ldr	r3, [pc, #8]	; (1f810 <vApplicationMallocFailedHook+0x10>)
   1f806:	4798      	blx	r3
   1f808:	e7fe      	b.n	1f808 <vApplicationMallocFailedHook+0x8>
   1f80a:	46c0      	nop			; (mov r8, r8)
   1f80c:	0002318c 	.word	0x0002318c
   1f810:	000147f5 	.word	0x000147f5

0001f814 <vApplicationStackOverflowHook>:
while(1);
}

void vApplicationStackOverflowHook(void)
{
   1f814:	b510      	push	{r4, lr}
SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   1f816:	4802      	ldr	r0, [pc, #8]	; (1f820 <vApplicationStackOverflowHook+0xc>)
   1f818:	4b02      	ldr	r3, [pc, #8]	; (1f824 <vApplicationStackOverflowHook+0x10>)
   1f81a:	4798      	blx	r3
   1f81c:	e7fe      	b.n	1f81c <vApplicationStackOverflowHook+0x8>
   1f81e:	46c0      	nop			; (mov r8, r8)
   1f820:	000231b8 	.word	0x000231b8
   1f824:	000147f5 	.word	0x000147f5

0001f828 <__udivsi3>:
   1f828:	2200      	movs	r2, #0
   1f82a:	0843      	lsrs	r3, r0, #1
   1f82c:	428b      	cmp	r3, r1
   1f82e:	d374      	bcc.n	1f91a <__udivsi3+0xf2>
   1f830:	0903      	lsrs	r3, r0, #4
   1f832:	428b      	cmp	r3, r1
   1f834:	d35f      	bcc.n	1f8f6 <__udivsi3+0xce>
   1f836:	0a03      	lsrs	r3, r0, #8
   1f838:	428b      	cmp	r3, r1
   1f83a:	d344      	bcc.n	1f8c6 <__udivsi3+0x9e>
   1f83c:	0b03      	lsrs	r3, r0, #12
   1f83e:	428b      	cmp	r3, r1
   1f840:	d328      	bcc.n	1f894 <__udivsi3+0x6c>
   1f842:	0c03      	lsrs	r3, r0, #16
   1f844:	428b      	cmp	r3, r1
   1f846:	d30d      	bcc.n	1f864 <__udivsi3+0x3c>
   1f848:	22ff      	movs	r2, #255	; 0xff
   1f84a:	0209      	lsls	r1, r1, #8
   1f84c:	ba12      	rev	r2, r2
   1f84e:	0c03      	lsrs	r3, r0, #16
   1f850:	428b      	cmp	r3, r1
   1f852:	d302      	bcc.n	1f85a <__udivsi3+0x32>
   1f854:	1212      	asrs	r2, r2, #8
   1f856:	0209      	lsls	r1, r1, #8
   1f858:	d065      	beq.n	1f926 <__udivsi3+0xfe>
   1f85a:	0b03      	lsrs	r3, r0, #12
   1f85c:	428b      	cmp	r3, r1
   1f85e:	d319      	bcc.n	1f894 <__udivsi3+0x6c>
   1f860:	e000      	b.n	1f864 <__udivsi3+0x3c>
   1f862:	0a09      	lsrs	r1, r1, #8
   1f864:	0bc3      	lsrs	r3, r0, #15
   1f866:	428b      	cmp	r3, r1
   1f868:	d301      	bcc.n	1f86e <__udivsi3+0x46>
   1f86a:	03cb      	lsls	r3, r1, #15
   1f86c:	1ac0      	subs	r0, r0, r3
   1f86e:	4152      	adcs	r2, r2
   1f870:	0b83      	lsrs	r3, r0, #14
   1f872:	428b      	cmp	r3, r1
   1f874:	d301      	bcc.n	1f87a <__udivsi3+0x52>
   1f876:	038b      	lsls	r3, r1, #14
   1f878:	1ac0      	subs	r0, r0, r3
   1f87a:	4152      	adcs	r2, r2
   1f87c:	0b43      	lsrs	r3, r0, #13
   1f87e:	428b      	cmp	r3, r1
   1f880:	d301      	bcc.n	1f886 <__udivsi3+0x5e>
   1f882:	034b      	lsls	r3, r1, #13
   1f884:	1ac0      	subs	r0, r0, r3
   1f886:	4152      	adcs	r2, r2
   1f888:	0b03      	lsrs	r3, r0, #12
   1f88a:	428b      	cmp	r3, r1
   1f88c:	d301      	bcc.n	1f892 <__udivsi3+0x6a>
   1f88e:	030b      	lsls	r3, r1, #12
   1f890:	1ac0      	subs	r0, r0, r3
   1f892:	4152      	adcs	r2, r2
   1f894:	0ac3      	lsrs	r3, r0, #11
   1f896:	428b      	cmp	r3, r1
   1f898:	d301      	bcc.n	1f89e <__udivsi3+0x76>
   1f89a:	02cb      	lsls	r3, r1, #11
   1f89c:	1ac0      	subs	r0, r0, r3
   1f89e:	4152      	adcs	r2, r2
   1f8a0:	0a83      	lsrs	r3, r0, #10
   1f8a2:	428b      	cmp	r3, r1
   1f8a4:	d301      	bcc.n	1f8aa <__udivsi3+0x82>
   1f8a6:	028b      	lsls	r3, r1, #10
   1f8a8:	1ac0      	subs	r0, r0, r3
   1f8aa:	4152      	adcs	r2, r2
   1f8ac:	0a43      	lsrs	r3, r0, #9
   1f8ae:	428b      	cmp	r3, r1
   1f8b0:	d301      	bcc.n	1f8b6 <__udivsi3+0x8e>
   1f8b2:	024b      	lsls	r3, r1, #9
   1f8b4:	1ac0      	subs	r0, r0, r3
   1f8b6:	4152      	adcs	r2, r2
   1f8b8:	0a03      	lsrs	r3, r0, #8
   1f8ba:	428b      	cmp	r3, r1
   1f8bc:	d301      	bcc.n	1f8c2 <__udivsi3+0x9a>
   1f8be:	020b      	lsls	r3, r1, #8
   1f8c0:	1ac0      	subs	r0, r0, r3
   1f8c2:	4152      	adcs	r2, r2
   1f8c4:	d2cd      	bcs.n	1f862 <__udivsi3+0x3a>
   1f8c6:	09c3      	lsrs	r3, r0, #7
   1f8c8:	428b      	cmp	r3, r1
   1f8ca:	d301      	bcc.n	1f8d0 <__udivsi3+0xa8>
   1f8cc:	01cb      	lsls	r3, r1, #7
   1f8ce:	1ac0      	subs	r0, r0, r3
   1f8d0:	4152      	adcs	r2, r2
   1f8d2:	0983      	lsrs	r3, r0, #6
   1f8d4:	428b      	cmp	r3, r1
   1f8d6:	d301      	bcc.n	1f8dc <__udivsi3+0xb4>
   1f8d8:	018b      	lsls	r3, r1, #6
   1f8da:	1ac0      	subs	r0, r0, r3
   1f8dc:	4152      	adcs	r2, r2
   1f8de:	0943      	lsrs	r3, r0, #5
   1f8e0:	428b      	cmp	r3, r1
   1f8e2:	d301      	bcc.n	1f8e8 <__udivsi3+0xc0>
   1f8e4:	014b      	lsls	r3, r1, #5
   1f8e6:	1ac0      	subs	r0, r0, r3
   1f8e8:	4152      	adcs	r2, r2
   1f8ea:	0903      	lsrs	r3, r0, #4
   1f8ec:	428b      	cmp	r3, r1
   1f8ee:	d301      	bcc.n	1f8f4 <__udivsi3+0xcc>
   1f8f0:	010b      	lsls	r3, r1, #4
   1f8f2:	1ac0      	subs	r0, r0, r3
   1f8f4:	4152      	adcs	r2, r2
   1f8f6:	08c3      	lsrs	r3, r0, #3
   1f8f8:	428b      	cmp	r3, r1
   1f8fa:	d301      	bcc.n	1f900 <__udivsi3+0xd8>
   1f8fc:	00cb      	lsls	r3, r1, #3
   1f8fe:	1ac0      	subs	r0, r0, r3
   1f900:	4152      	adcs	r2, r2
   1f902:	0883      	lsrs	r3, r0, #2
   1f904:	428b      	cmp	r3, r1
   1f906:	d301      	bcc.n	1f90c <__udivsi3+0xe4>
   1f908:	008b      	lsls	r3, r1, #2
   1f90a:	1ac0      	subs	r0, r0, r3
   1f90c:	4152      	adcs	r2, r2
   1f90e:	0843      	lsrs	r3, r0, #1
   1f910:	428b      	cmp	r3, r1
   1f912:	d301      	bcc.n	1f918 <__udivsi3+0xf0>
   1f914:	004b      	lsls	r3, r1, #1
   1f916:	1ac0      	subs	r0, r0, r3
   1f918:	4152      	adcs	r2, r2
   1f91a:	1a41      	subs	r1, r0, r1
   1f91c:	d200      	bcs.n	1f920 <__udivsi3+0xf8>
   1f91e:	4601      	mov	r1, r0
   1f920:	4152      	adcs	r2, r2
   1f922:	4610      	mov	r0, r2
   1f924:	4770      	bx	lr
   1f926:	e7ff      	b.n	1f928 <__udivsi3+0x100>
   1f928:	b501      	push	{r0, lr}
   1f92a:	2000      	movs	r0, #0
   1f92c:	f000 f8f0 	bl	1fb10 <__aeabi_idiv0>
   1f930:	bd02      	pop	{r1, pc}
   1f932:	46c0      	nop			; (mov r8, r8)

0001f934 <__aeabi_uidivmod>:
   1f934:	2900      	cmp	r1, #0
   1f936:	d0f7      	beq.n	1f928 <__udivsi3+0x100>
   1f938:	e776      	b.n	1f828 <__udivsi3>
   1f93a:	4770      	bx	lr

0001f93c <__divsi3>:
   1f93c:	4603      	mov	r3, r0
   1f93e:	430b      	orrs	r3, r1
   1f940:	d47f      	bmi.n	1fa42 <__divsi3+0x106>
   1f942:	2200      	movs	r2, #0
   1f944:	0843      	lsrs	r3, r0, #1
   1f946:	428b      	cmp	r3, r1
   1f948:	d374      	bcc.n	1fa34 <__divsi3+0xf8>
   1f94a:	0903      	lsrs	r3, r0, #4
   1f94c:	428b      	cmp	r3, r1
   1f94e:	d35f      	bcc.n	1fa10 <__divsi3+0xd4>
   1f950:	0a03      	lsrs	r3, r0, #8
   1f952:	428b      	cmp	r3, r1
   1f954:	d344      	bcc.n	1f9e0 <__divsi3+0xa4>
   1f956:	0b03      	lsrs	r3, r0, #12
   1f958:	428b      	cmp	r3, r1
   1f95a:	d328      	bcc.n	1f9ae <__divsi3+0x72>
   1f95c:	0c03      	lsrs	r3, r0, #16
   1f95e:	428b      	cmp	r3, r1
   1f960:	d30d      	bcc.n	1f97e <__divsi3+0x42>
   1f962:	22ff      	movs	r2, #255	; 0xff
   1f964:	0209      	lsls	r1, r1, #8
   1f966:	ba12      	rev	r2, r2
   1f968:	0c03      	lsrs	r3, r0, #16
   1f96a:	428b      	cmp	r3, r1
   1f96c:	d302      	bcc.n	1f974 <__divsi3+0x38>
   1f96e:	1212      	asrs	r2, r2, #8
   1f970:	0209      	lsls	r1, r1, #8
   1f972:	d065      	beq.n	1fa40 <__divsi3+0x104>
   1f974:	0b03      	lsrs	r3, r0, #12
   1f976:	428b      	cmp	r3, r1
   1f978:	d319      	bcc.n	1f9ae <__divsi3+0x72>
   1f97a:	e000      	b.n	1f97e <__divsi3+0x42>
   1f97c:	0a09      	lsrs	r1, r1, #8
   1f97e:	0bc3      	lsrs	r3, r0, #15
   1f980:	428b      	cmp	r3, r1
   1f982:	d301      	bcc.n	1f988 <__divsi3+0x4c>
   1f984:	03cb      	lsls	r3, r1, #15
   1f986:	1ac0      	subs	r0, r0, r3
   1f988:	4152      	adcs	r2, r2
   1f98a:	0b83      	lsrs	r3, r0, #14
   1f98c:	428b      	cmp	r3, r1
   1f98e:	d301      	bcc.n	1f994 <__divsi3+0x58>
   1f990:	038b      	lsls	r3, r1, #14
   1f992:	1ac0      	subs	r0, r0, r3
   1f994:	4152      	adcs	r2, r2
   1f996:	0b43      	lsrs	r3, r0, #13
   1f998:	428b      	cmp	r3, r1
   1f99a:	d301      	bcc.n	1f9a0 <__divsi3+0x64>
   1f99c:	034b      	lsls	r3, r1, #13
   1f99e:	1ac0      	subs	r0, r0, r3
   1f9a0:	4152      	adcs	r2, r2
   1f9a2:	0b03      	lsrs	r3, r0, #12
   1f9a4:	428b      	cmp	r3, r1
   1f9a6:	d301      	bcc.n	1f9ac <__divsi3+0x70>
   1f9a8:	030b      	lsls	r3, r1, #12
   1f9aa:	1ac0      	subs	r0, r0, r3
   1f9ac:	4152      	adcs	r2, r2
   1f9ae:	0ac3      	lsrs	r3, r0, #11
   1f9b0:	428b      	cmp	r3, r1
   1f9b2:	d301      	bcc.n	1f9b8 <__divsi3+0x7c>
   1f9b4:	02cb      	lsls	r3, r1, #11
   1f9b6:	1ac0      	subs	r0, r0, r3
   1f9b8:	4152      	adcs	r2, r2
   1f9ba:	0a83      	lsrs	r3, r0, #10
   1f9bc:	428b      	cmp	r3, r1
   1f9be:	d301      	bcc.n	1f9c4 <__divsi3+0x88>
   1f9c0:	028b      	lsls	r3, r1, #10
   1f9c2:	1ac0      	subs	r0, r0, r3
   1f9c4:	4152      	adcs	r2, r2
   1f9c6:	0a43      	lsrs	r3, r0, #9
   1f9c8:	428b      	cmp	r3, r1
   1f9ca:	d301      	bcc.n	1f9d0 <__divsi3+0x94>
   1f9cc:	024b      	lsls	r3, r1, #9
   1f9ce:	1ac0      	subs	r0, r0, r3
   1f9d0:	4152      	adcs	r2, r2
   1f9d2:	0a03      	lsrs	r3, r0, #8
   1f9d4:	428b      	cmp	r3, r1
   1f9d6:	d301      	bcc.n	1f9dc <__divsi3+0xa0>
   1f9d8:	020b      	lsls	r3, r1, #8
   1f9da:	1ac0      	subs	r0, r0, r3
   1f9dc:	4152      	adcs	r2, r2
   1f9de:	d2cd      	bcs.n	1f97c <__divsi3+0x40>
   1f9e0:	09c3      	lsrs	r3, r0, #7
   1f9e2:	428b      	cmp	r3, r1
   1f9e4:	d301      	bcc.n	1f9ea <__divsi3+0xae>
   1f9e6:	01cb      	lsls	r3, r1, #7
   1f9e8:	1ac0      	subs	r0, r0, r3
   1f9ea:	4152      	adcs	r2, r2
   1f9ec:	0983      	lsrs	r3, r0, #6
   1f9ee:	428b      	cmp	r3, r1
   1f9f0:	d301      	bcc.n	1f9f6 <__divsi3+0xba>
   1f9f2:	018b      	lsls	r3, r1, #6
   1f9f4:	1ac0      	subs	r0, r0, r3
   1f9f6:	4152      	adcs	r2, r2
   1f9f8:	0943      	lsrs	r3, r0, #5
   1f9fa:	428b      	cmp	r3, r1
   1f9fc:	d301      	bcc.n	1fa02 <__divsi3+0xc6>
   1f9fe:	014b      	lsls	r3, r1, #5
   1fa00:	1ac0      	subs	r0, r0, r3
   1fa02:	4152      	adcs	r2, r2
   1fa04:	0903      	lsrs	r3, r0, #4
   1fa06:	428b      	cmp	r3, r1
   1fa08:	d301      	bcc.n	1fa0e <__divsi3+0xd2>
   1fa0a:	010b      	lsls	r3, r1, #4
   1fa0c:	1ac0      	subs	r0, r0, r3
   1fa0e:	4152      	adcs	r2, r2
   1fa10:	08c3      	lsrs	r3, r0, #3
   1fa12:	428b      	cmp	r3, r1
   1fa14:	d301      	bcc.n	1fa1a <__divsi3+0xde>
   1fa16:	00cb      	lsls	r3, r1, #3
   1fa18:	1ac0      	subs	r0, r0, r3
   1fa1a:	4152      	adcs	r2, r2
   1fa1c:	0883      	lsrs	r3, r0, #2
   1fa1e:	428b      	cmp	r3, r1
   1fa20:	d301      	bcc.n	1fa26 <__divsi3+0xea>
   1fa22:	008b      	lsls	r3, r1, #2
   1fa24:	1ac0      	subs	r0, r0, r3
   1fa26:	4152      	adcs	r2, r2
   1fa28:	0843      	lsrs	r3, r0, #1
   1fa2a:	428b      	cmp	r3, r1
   1fa2c:	d301      	bcc.n	1fa32 <__divsi3+0xf6>
   1fa2e:	004b      	lsls	r3, r1, #1
   1fa30:	1ac0      	subs	r0, r0, r3
   1fa32:	4152      	adcs	r2, r2
   1fa34:	1a41      	subs	r1, r0, r1
   1fa36:	d200      	bcs.n	1fa3a <__divsi3+0xfe>
   1fa38:	4601      	mov	r1, r0
   1fa3a:	4152      	adcs	r2, r2
   1fa3c:	4610      	mov	r0, r2
   1fa3e:	4770      	bx	lr
   1fa40:	e05d      	b.n	1fafe <__divsi3+0x1c2>
   1fa42:	0fca      	lsrs	r2, r1, #31
   1fa44:	d000      	beq.n	1fa48 <__divsi3+0x10c>
   1fa46:	4249      	negs	r1, r1
   1fa48:	1003      	asrs	r3, r0, #32
   1fa4a:	d300      	bcc.n	1fa4e <__divsi3+0x112>
   1fa4c:	4240      	negs	r0, r0
   1fa4e:	4053      	eors	r3, r2
   1fa50:	2200      	movs	r2, #0
   1fa52:	469c      	mov	ip, r3
   1fa54:	0903      	lsrs	r3, r0, #4
   1fa56:	428b      	cmp	r3, r1
   1fa58:	d32d      	bcc.n	1fab6 <__divsi3+0x17a>
   1fa5a:	0a03      	lsrs	r3, r0, #8
   1fa5c:	428b      	cmp	r3, r1
   1fa5e:	d312      	bcc.n	1fa86 <__divsi3+0x14a>
   1fa60:	22fc      	movs	r2, #252	; 0xfc
   1fa62:	0189      	lsls	r1, r1, #6
   1fa64:	ba12      	rev	r2, r2
   1fa66:	0a03      	lsrs	r3, r0, #8
   1fa68:	428b      	cmp	r3, r1
   1fa6a:	d30c      	bcc.n	1fa86 <__divsi3+0x14a>
   1fa6c:	0189      	lsls	r1, r1, #6
   1fa6e:	1192      	asrs	r2, r2, #6
   1fa70:	428b      	cmp	r3, r1
   1fa72:	d308      	bcc.n	1fa86 <__divsi3+0x14a>
   1fa74:	0189      	lsls	r1, r1, #6
   1fa76:	1192      	asrs	r2, r2, #6
   1fa78:	428b      	cmp	r3, r1
   1fa7a:	d304      	bcc.n	1fa86 <__divsi3+0x14a>
   1fa7c:	0189      	lsls	r1, r1, #6
   1fa7e:	d03a      	beq.n	1faf6 <__divsi3+0x1ba>
   1fa80:	1192      	asrs	r2, r2, #6
   1fa82:	e000      	b.n	1fa86 <__divsi3+0x14a>
   1fa84:	0989      	lsrs	r1, r1, #6
   1fa86:	09c3      	lsrs	r3, r0, #7
   1fa88:	428b      	cmp	r3, r1
   1fa8a:	d301      	bcc.n	1fa90 <__divsi3+0x154>
   1fa8c:	01cb      	lsls	r3, r1, #7
   1fa8e:	1ac0      	subs	r0, r0, r3
   1fa90:	4152      	adcs	r2, r2
   1fa92:	0983      	lsrs	r3, r0, #6
   1fa94:	428b      	cmp	r3, r1
   1fa96:	d301      	bcc.n	1fa9c <__divsi3+0x160>
   1fa98:	018b      	lsls	r3, r1, #6
   1fa9a:	1ac0      	subs	r0, r0, r3
   1fa9c:	4152      	adcs	r2, r2
   1fa9e:	0943      	lsrs	r3, r0, #5
   1faa0:	428b      	cmp	r3, r1
   1faa2:	d301      	bcc.n	1faa8 <__divsi3+0x16c>
   1faa4:	014b      	lsls	r3, r1, #5
   1faa6:	1ac0      	subs	r0, r0, r3
   1faa8:	4152      	adcs	r2, r2
   1faaa:	0903      	lsrs	r3, r0, #4
   1faac:	428b      	cmp	r3, r1
   1faae:	d301      	bcc.n	1fab4 <__divsi3+0x178>
   1fab0:	010b      	lsls	r3, r1, #4
   1fab2:	1ac0      	subs	r0, r0, r3
   1fab4:	4152      	adcs	r2, r2
   1fab6:	08c3      	lsrs	r3, r0, #3
   1fab8:	428b      	cmp	r3, r1
   1faba:	d301      	bcc.n	1fac0 <__divsi3+0x184>
   1fabc:	00cb      	lsls	r3, r1, #3
   1fabe:	1ac0      	subs	r0, r0, r3
   1fac0:	4152      	adcs	r2, r2
   1fac2:	0883      	lsrs	r3, r0, #2
   1fac4:	428b      	cmp	r3, r1
   1fac6:	d301      	bcc.n	1facc <__divsi3+0x190>
   1fac8:	008b      	lsls	r3, r1, #2
   1faca:	1ac0      	subs	r0, r0, r3
   1facc:	4152      	adcs	r2, r2
   1face:	d2d9      	bcs.n	1fa84 <__divsi3+0x148>
   1fad0:	0843      	lsrs	r3, r0, #1
   1fad2:	428b      	cmp	r3, r1
   1fad4:	d301      	bcc.n	1fada <__divsi3+0x19e>
   1fad6:	004b      	lsls	r3, r1, #1
   1fad8:	1ac0      	subs	r0, r0, r3
   1fada:	4152      	adcs	r2, r2
   1fadc:	1a41      	subs	r1, r0, r1
   1fade:	d200      	bcs.n	1fae2 <__divsi3+0x1a6>
   1fae0:	4601      	mov	r1, r0
   1fae2:	4663      	mov	r3, ip
   1fae4:	4152      	adcs	r2, r2
   1fae6:	105b      	asrs	r3, r3, #1
   1fae8:	4610      	mov	r0, r2
   1faea:	d301      	bcc.n	1faf0 <__divsi3+0x1b4>
   1faec:	4240      	negs	r0, r0
   1faee:	2b00      	cmp	r3, #0
   1faf0:	d500      	bpl.n	1faf4 <__divsi3+0x1b8>
   1faf2:	4249      	negs	r1, r1
   1faf4:	4770      	bx	lr
   1faf6:	4663      	mov	r3, ip
   1faf8:	105b      	asrs	r3, r3, #1
   1fafa:	d300      	bcc.n	1fafe <__divsi3+0x1c2>
   1fafc:	4240      	negs	r0, r0
   1fafe:	b501      	push	{r0, lr}
   1fb00:	2000      	movs	r0, #0
   1fb02:	f000 f805 	bl	1fb10 <__aeabi_idiv0>
   1fb06:	bd02      	pop	{r1, pc}

0001fb08 <__aeabi_idivmod>:
   1fb08:	2900      	cmp	r1, #0
   1fb0a:	d0f8      	beq.n	1fafe <__divsi3+0x1c2>
   1fb0c:	e716      	b.n	1f93c <__divsi3>
   1fb0e:	4770      	bx	lr

0001fb10 <__aeabi_idiv0>:
   1fb10:	4770      	bx	lr
   1fb12:	46c0      	nop			; (mov r8, r8)

0001fb14 <__aeabi_lmul>:
   1fb14:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fb16:	46ce      	mov	lr, r9
   1fb18:	4647      	mov	r7, r8
   1fb1a:	0415      	lsls	r5, r2, #16
   1fb1c:	0c2d      	lsrs	r5, r5, #16
   1fb1e:	002e      	movs	r6, r5
   1fb20:	b580      	push	{r7, lr}
   1fb22:	0407      	lsls	r7, r0, #16
   1fb24:	0c14      	lsrs	r4, r2, #16
   1fb26:	0c3f      	lsrs	r7, r7, #16
   1fb28:	4699      	mov	r9, r3
   1fb2a:	0c03      	lsrs	r3, r0, #16
   1fb2c:	437e      	muls	r6, r7
   1fb2e:	435d      	muls	r5, r3
   1fb30:	4367      	muls	r7, r4
   1fb32:	4363      	muls	r3, r4
   1fb34:	197f      	adds	r7, r7, r5
   1fb36:	0c34      	lsrs	r4, r6, #16
   1fb38:	19e4      	adds	r4, r4, r7
   1fb3a:	469c      	mov	ip, r3
   1fb3c:	42a5      	cmp	r5, r4
   1fb3e:	d903      	bls.n	1fb48 <__aeabi_lmul+0x34>
   1fb40:	2380      	movs	r3, #128	; 0x80
   1fb42:	025b      	lsls	r3, r3, #9
   1fb44:	4698      	mov	r8, r3
   1fb46:	44c4      	add	ip, r8
   1fb48:	464b      	mov	r3, r9
   1fb4a:	4351      	muls	r1, r2
   1fb4c:	4343      	muls	r3, r0
   1fb4e:	0436      	lsls	r6, r6, #16
   1fb50:	0c36      	lsrs	r6, r6, #16
   1fb52:	0c25      	lsrs	r5, r4, #16
   1fb54:	0424      	lsls	r4, r4, #16
   1fb56:	4465      	add	r5, ip
   1fb58:	19a4      	adds	r4, r4, r6
   1fb5a:	1859      	adds	r1, r3, r1
   1fb5c:	1949      	adds	r1, r1, r5
   1fb5e:	0020      	movs	r0, r4
   1fb60:	bc0c      	pop	{r2, r3}
   1fb62:	4690      	mov	r8, r2
   1fb64:	4699      	mov	r9, r3
   1fb66:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fb68 <atoi>:
   1fb68:	b510      	push	{r4, lr}
   1fb6a:	220a      	movs	r2, #10
   1fb6c:	2100      	movs	r1, #0
   1fb6e:	f000 fae1 	bl	20134 <strtol>
   1fb72:	bd10      	pop	{r4, pc}

0001fb74 <__libc_init_array>:
   1fb74:	b570      	push	{r4, r5, r6, lr}
   1fb76:	2600      	movs	r6, #0
   1fb78:	4d0c      	ldr	r5, [pc, #48]	; (1fbac <__libc_init_array+0x38>)
   1fb7a:	4c0d      	ldr	r4, [pc, #52]	; (1fbb0 <__libc_init_array+0x3c>)
   1fb7c:	1b64      	subs	r4, r4, r5
   1fb7e:	10a4      	asrs	r4, r4, #2
   1fb80:	42a6      	cmp	r6, r4
   1fb82:	d109      	bne.n	1fb98 <__libc_init_array+0x24>
   1fb84:	2600      	movs	r6, #0
   1fb86:	f003 fbfd 	bl	23384 <_init>
   1fb8a:	4d0a      	ldr	r5, [pc, #40]	; (1fbb4 <__libc_init_array+0x40>)
   1fb8c:	4c0a      	ldr	r4, [pc, #40]	; (1fbb8 <__libc_init_array+0x44>)
   1fb8e:	1b64      	subs	r4, r4, r5
   1fb90:	10a4      	asrs	r4, r4, #2
   1fb92:	42a6      	cmp	r6, r4
   1fb94:	d105      	bne.n	1fba2 <__libc_init_array+0x2e>
   1fb96:	bd70      	pop	{r4, r5, r6, pc}
   1fb98:	00b3      	lsls	r3, r6, #2
   1fb9a:	58eb      	ldr	r3, [r5, r3]
   1fb9c:	4798      	blx	r3
   1fb9e:	3601      	adds	r6, #1
   1fba0:	e7ee      	b.n	1fb80 <__libc_init_array+0xc>
   1fba2:	00b3      	lsls	r3, r6, #2
   1fba4:	58eb      	ldr	r3, [r5, r3]
   1fba6:	4798      	blx	r3
   1fba8:	3601      	adds	r6, #1
   1fbaa:	e7f2      	b.n	1fb92 <__libc_init_array+0x1e>
   1fbac:	00023390 	.word	0x00023390
   1fbb0:	00023390 	.word	0x00023390
   1fbb4:	00023390 	.word	0x00023390
   1fbb8:	00023394 	.word	0x00023394

0001fbbc <malloc>:
   1fbbc:	b510      	push	{r4, lr}
   1fbbe:	4b03      	ldr	r3, [pc, #12]	; (1fbcc <malloc+0x10>)
   1fbc0:	0001      	movs	r1, r0
   1fbc2:	6818      	ldr	r0, [r3, #0]
   1fbc4:	f000 f87c 	bl	1fcc0 <_malloc_r>
   1fbc8:	bd10      	pop	{r4, pc}
   1fbca:	46c0      	nop			; (mov r8, r8)
   1fbcc:	200000a4 	.word	0x200000a4

0001fbd0 <free>:
   1fbd0:	b510      	push	{r4, lr}
   1fbd2:	4b03      	ldr	r3, [pc, #12]	; (1fbe0 <free+0x10>)
   1fbd4:	0001      	movs	r1, r0
   1fbd6:	6818      	ldr	r0, [r3, #0]
   1fbd8:	f000 f828 	bl	1fc2c <_free_r>
   1fbdc:	bd10      	pop	{r4, pc}
   1fbde:	46c0      	nop			; (mov r8, r8)
   1fbe0:	200000a4 	.word	0x200000a4

0001fbe4 <memcpy>:
   1fbe4:	2300      	movs	r3, #0
   1fbe6:	b510      	push	{r4, lr}
   1fbe8:	429a      	cmp	r2, r3
   1fbea:	d100      	bne.n	1fbee <memcpy+0xa>
   1fbec:	bd10      	pop	{r4, pc}
   1fbee:	5ccc      	ldrb	r4, [r1, r3]
   1fbf0:	54c4      	strb	r4, [r0, r3]
   1fbf2:	3301      	adds	r3, #1
   1fbf4:	e7f8      	b.n	1fbe8 <memcpy+0x4>

0001fbf6 <memmove>:
   1fbf6:	b510      	push	{r4, lr}
   1fbf8:	4288      	cmp	r0, r1
   1fbfa:	d902      	bls.n	1fc02 <memmove+0xc>
   1fbfc:	188b      	adds	r3, r1, r2
   1fbfe:	4298      	cmp	r0, r3
   1fc00:	d308      	bcc.n	1fc14 <memmove+0x1e>
   1fc02:	2300      	movs	r3, #0
   1fc04:	429a      	cmp	r2, r3
   1fc06:	d007      	beq.n	1fc18 <memmove+0x22>
   1fc08:	5ccc      	ldrb	r4, [r1, r3]
   1fc0a:	54c4      	strb	r4, [r0, r3]
   1fc0c:	3301      	adds	r3, #1
   1fc0e:	e7f9      	b.n	1fc04 <memmove+0xe>
   1fc10:	5c8b      	ldrb	r3, [r1, r2]
   1fc12:	5483      	strb	r3, [r0, r2]
   1fc14:	3a01      	subs	r2, #1
   1fc16:	d2fb      	bcs.n	1fc10 <memmove+0x1a>
   1fc18:	bd10      	pop	{r4, pc}

0001fc1a <memset>:
   1fc1a:	0003      	movs	r3, r0
   1fc1c:	1882      	adds	r2, r0, r2
   1fc1e:	4293      	cmp	r3, r2
   1fc20:	d100      	bne.n	1fc24 <memset+0xa>
   1fc22:	4770      	bx	lr
   1fc24:	7019      	strb	r1, [r3, #0]
   1fc26:	3301      	adds	r3, #1
   1fc28:	e7f9      	b.n	1fc1e <memset+0x4>
	...

0001fc2c <_free_r>:
   1fc2c:	b570      	push	{r4, r5, r6, lr}
   1fc2e:	0005      	movs	r5, r0
   1fc30:	2900      	cmp	r1, #0
   1fc32:	d010      	beq.n	1fc56 <_free_r+0x2a>
   1fc34:	1f0c      	subs	r4, r1, #4
   1fc36:	6823      	ldr	r3, [r4, #0]
   1fc38:	2b00      	cmp	r3, #0
   1fc3a:	da00      	bge.n	1fc3e <_free_r+0x12>
   1fc3c:	18e4      	adds	r4, r4, r3
   1fc3e:	0028      	movs	r0, r5
   1fc40:	f000 fd9e 	bl	20780 <__malloc_lock>
   1fc44:	4a1d      	ldr	r2, [pc, #116]	; (1fcbc <_free_r+0x90>)
   1fc46:	6813      	ldr	r3, [r2, #0]
   1fc48:	2b00      	cmp	r3, #0
   1fc4a:	d105      	bne.n	1fc58 <_free_r+0x2c>
   1fc4c:	6063      	str	r3, [r4, #4]
   1fc4e:	6014      	str	r4, [r2, #0]
   1fc50:	0028      	movs	r0, r5
   1fc52:	f000 fd96 	bl	20782 <__malloc_unlock>
   1fc56:	bd70      	pop	{r4, r5, r6, pc}
   1fc58:	42a3      	cmp	r3, r4
   1fc5a:	d909      	bls.n	1fc70 <_free_r+0x44>
   1fc5c:	6821      	ldr	r1, [r4, #0]
   1fc5e:	1860      	adds	r0, r4, r1
   1fc60:	4283      	cmp	r3, r0
   1fc62:	d1f3      	bne.n	1fc4c <_free_r+0x20>
   1fc64:	6818      	ldr	r0, [r3, #0]
   1fc66:	685b      	ldr	r3, [r3, #4]
   1fc68:	1841      	adds	r1, r0, r1
   1fc6a:	6021      	str	r1, [r4, #0]
   1fc6c:	e7ee      	b.n	1fc4c <_free_r+0x20>
   1fc6e:	0013      	movs	r3, r2
   1fc70:	685a      	ldr	r2, [r3, #4]
   1fc72:	2a00      	cmp	r2, #0
   1fc74:	d001      	beq.n	1fc7a <_free_r+0x4e>
   1fc76:	42a2      	cmp	r2, r4
   1fc78:	d9f9      	bls.n	1fc6e <_free_r+0x42>
   1fc7a:	6819      	ldr	r1, [r3, #0]
   1fc7c:	1858      	adds	r0, r3, r1
   1fc7e:	42a0      	cmp	r0, r4
   1fc80:	d10b      	bne.n	1fc9a <_free_r+0x6e>
   1fc82:	6820      	ldr	r0, [r4, #0]
   1fc84:	1809      	adds	r1, r1, r0
   1fc86:	1858      	adds	r0, r3, r1
   1fc88:	6019      	str	r1, [r3, #0]
   1fc8a:	4282      	cmp	r2, r0
   1fc8c:	d1e0      	bne.n	1fc50 <_free_r+0x24>
   1fc8e:	6810      	ldr	r0, [r2, #0]
   1fc90:	6852      	ldr	r2, [r2, #4]
   1fc92:	1841      	adds	r1, r0, r1
   1fc94:	6019      	str	r1, [r3, #0]
   1fc96:	605a      	str	r2, [r3, #4]
   1fc98:	e7da      	b.n	1fc50 <_free_r+0x24>
   1fc9a:	42a0      	cmp	r0, r4
   1fc9c:	d902      	bls.n	1fca4 <_free_r+0x78>
   1fc9e:	230c      	movs	r3, #12
   1fca0:	602b      	str	r3, [r5, #0]
   1fca2:	e7d5      	b.n	1fc50 <_free_r+0x24>
   1fca4:	6821      	ldr	r1, [r4, #0]
   1fca6:	1860      	adds	r0, r4, r1
   1fca8:	4282      	cmp	r2, r0
   1fcaa:	d103      	bne.n	1fcb4 <_free_r+0x88>
   1fcac:	6810      	ldr	r0, [r2, #0]
   1fcae:	6852      	ldr	r2, [r2, #4]
   1fcb0:	1841      	adds	r1, r0, r1
   1fcb2:	6021      	str	r1, [r4, #0]
   1fcb4:	6062      	str	r2, [r4, #4]
   1fcb6:	605c      	str	r4, [r3, #4]
   1fcb8:	e7ca      	b.n	1fc50 <_free_r+0x24>
   1fcba:	46c0      	nop			; (mov r8, r8)
   1fcbc:	20003740 	.word	0x20003740

0001fcc0 <_malloc_r>:
   1fcc0:	2303      	movs	r3, #3
   1fcc2:	b570      	push	{r4, r5, r6, lr}
   1fcc4:	1ccd      	adds	r5, r1, #3
   1fcc6:	439d      	bics	r5, r3
   1fcc8:	3508      	adds	r5, #8
   1fcca:	0006      	movs	r6, r0
   1fccc:	2d0c      	cmp	r5, #12
   1fcce:	d21e      	bcs.n	1fd0e <_malloc_r+0x4e>
   1fcd0:	250c      	movs	r5, #12
   1fcd2:	42a9      	cmp	r1, r5
   1fcd4:	d81d      	bhi.n	1fd12 <_malloc_r+0x52>
   1fcd6:	0030      	movs	r0, r6
   1fcd8:	f000 fd52 	bl	20780 <__malloc_lock>
   1fcdc:	4a25      	ldr	r2, [pc, #148]	; (1fd74 <_malloc_r+0xb4>)
   1fcde:	6814      	ldr	r4, [r2, #0]
   1fce0:	0021      	movs	r1, r4
   1fce2:	2900      	cmp	r1, #0
   1fce4:	d119      	bne.n	1fd1a <_malloc_r+0x5a>
   1fce6:	4c24      	ldr	r4, [pc, #144]	; (1fd78 <_malloc_r+0xb8>)
   1fce8:	6823      	ldr	r3, [r4, #0]
   1fcea:	2b00      	cmp	r3, #0
   1fcec:	d103      	bne.n	1fcf6 <_malloc_r+0x36>
   1fcee:	0030      	movs	r0, r6
   1fcf0:	f000 f8ae 	bl	1fe50 <_sbrk_r>
   1fcf4:	6020      	str	r0, [r4, #0]
   1fcf6:	0029      	movs	r1, r5
   1fcf8:	0030      	movs	r0, r6
   1fcfa:	f000 f8a9 	bl	1fe50 <_sbrk_r>
   1fcfe:	1c43      	adds	r3, r0, #1
   1fd00:	d12c      	bne.n	1fd5c <_malloc_r+0x9c>
   1fd02:	230c      	movs	r3, #12
   1fd04:	0030      	movs	r0, r6
   1fd06:	6033      	str	r3, [r6, #0]
   1fd08:	f000 fd3b 	bl	20782 <__malloc_unlock>
   1fd0c:	e003      	b.n	1fd16 <_malloc_r+0x56>
   1fd0e:	2d00      	cmp	r5, #0
   1fd10:	dadf      	bge.n	1fcd2 <_malloc_r+0x12>
   1fd12:	230c      	movs	r3, #12
   1fd14:	6033      	str	r3, [r6, #0]
   1fd16:	2000      	movs	r0, #0
   1fd18:	bd70      	pop	{r4, r5, r6, pc}
   1fd1a:	680b      	ldr	r3, [r1, #0]
   1fd1c:	1b5b      	subs	r3, r3, r5
   1fd1e:	d41a      	bmi.n	1fd56 <_malloc_r+0x96>
   1fd20:	2b0b      	cmp	r3, #11
   1fd22:	d903      	bls.n	1fd2c <_malloc_r+0x6c>
   1fd24:	600b      	str	r3, [r1, #0]
   1fd26:	18cc      	adds	r4, r1, r3
   1fd28:	6025      	str	r5, [r4, #0]
   1fd2a:	e003      	b.n	1fd34 <_malloc_r+0x74>
   1fd2c:	428c      	cmp	r4, r1
   1fd2e:	d10e      	bne.n	1fd4e <_malloc_r+0x8e>
   1fd30:	6863      	ldr	r3, [r4, #4]
   1fd32:	6013      	str	r3, [r2, #0]
   1fd34:	0030      	movs	r0, r6
   1fd36:	f000 fd24 	bl	20782 <__malloc_unlock>
   1fd3a:	0020      	movs	r0, r4
   1fd3c:	2207      	movs	r2, #7
   1fd3e:	300b      	adds	r0, #11
   1fd40:	1d23      	adds	r3, r4, #4
   1fd42:	4390      	bics	r0, r2
   1fd44:	1ac3      	subs	r3, r0, r3
   1fd46:	d0e7      	beq.n	1fd18 <_malloc_r+0x58>
   1fd48:	425a      	negs	r2, r3
   1fd4a:	50e2      	str	r2, [r4, r3]
   1fd4c:	e7e4      	b.n	1fd18 <_malloc_r+0x58>
   1fd4e:	684b      	ldr	r3, [r1, #4]
   1fd50:	6063      	str	r3, [r4, #4]
   1fd52:	000c      	movs	r4, r1
   1fd54:	e7ee      	b.n	1fd34 <_malloc_r+0x74>
   1fd56:	000c      	movs	r4, r1
   1fd58:	6849      	ldr	r1, [r1, #4]
   1fd5a:	e7c2      	b.n	1fce2 <_malloc_r+0x22>
   1fd5c:	2303      	movs	r3, #3
   1fd5e:	1cc4      	adds	r4, r0, #3
   1fd60:	439c      	bics	r4, r3
   1fd62:	42a0      	cmp	r0, r4
   1fd64:	d0e0      	beq.n	1fd28 <_malloc_r+0x68>
   1fd66:	1a21      	subs	r1, r4, r0
   1fd68:	0030      	movs	r0, r6
   1fd6a:	f000 f871 	bl	1fe50 <_sbrk_r>
   1fd6e:	1c43      	adds	r3, r0, #1
   1fd70:	d1da      	bne.n	1fd28 <_malloc_r+0x68>
   1fd72:	e7c6      	b.n	1fd02 <_malloc_r+0x42>
   1fd74:	20003740 	.word	0x20003740
   1fd78:	20003744 	.word	0x20003744

0001fd7c <_puts_r>:
   1fd7c:	b570      	push	{r4, r5, r6, lr}
   1fd7e:	0005      	movs	r5, r0
   1fd80:	000e      	movs	r6, r1
   1fd82:	2800      	cmp	r0, #0
   1fd84:	d004      	beq.n	1fd90 <_puts_r+0x14>
   1fd86:	6983      	ldr	r3, [r0, #24]
   1fd88:	2b00      	cmp	r3, #0
   1fd8a:	d101      	bne.n	1fd90 <_puts_r+0x14>
   1fd8c:	f000 fbe2 	bl	20554 <__sinit>
   1fd90:	69ab      	ldr	r3, [r5, #24]
   1fd92:	68ac      	ldr	r4, [r5, #8]
   1fd94:	2b00      	cmp	r3, #0
   1fd96:	d102      	bne.n	1fd9e <_puts_r+0x22>
   1fd98:	0028      	movs	r0, r5
   1fd9a:	f000 fbdb 	bl	20554 <__sinit>
   1fd9e:	4b24      	ldr	r3, [pc, #144]	; (1fe30 <_puts_r+0xb4>)
   1fda0:	429c      	cmp	r4, r3
   1fda2:	d10f      	bne.n	1fdc4 <_puts_r+0x48>
   1fda4:	686c      	ldr	r4, [r5, #4]
   1fda6:	89a3      	ldrh	r3, [r4, #12]
   1fda8:	071b      	lsls	r3, r3, #28
   1fdaa:	d502      	bpl.n	1fdb2 <_puts_r+0x36>
   1fdac:	6923      	ldr	r3, [r4, #16]
   1fdae:	2b00      	cmp	r3, #0
   1fdb0:	d120      	bne.n	1fdf4 <_puts_r+0x78>
   1fdb2:	0021      	movs	r1, r4
   1fdb4:	0028      	movs	r0, r5
   1fdb6:	f000 fa5f 	bl	20278 <__swsetup_r>
   1fdba:	2800      	cmp	r0, #0
   1fdbc:	d01a      	beq.n	1fdf4 <_puts_r+0x78>
   1fdbe:	2001      	movs	r0, #1
   1fdc0:	4240      	negs	r0, r0
   1fdc2:	bd70      	pop	{r4, r5, r6, pc}
   1fdc4:	4b1b      	ldr	r3, [pc, #108]	; (1fe34 <_puts_r+0xb8>)
   1fdc6:	429c      	cmp	r4, r3
   1fdc8:	d101      	bne.n	1fdce <_puts_r+0x52>
   1fdca:	68ac      	ldr	r4, [r5, #8]
   1fdcc:	e7eb      	b.n	1fda6 <_puts_r+0x2a>
   1fdce:	4b1a      	ldr	r3, [pc, #104]	; (1fe38 <_puts_r+0xbc>)
   1fdd0:	429c      	cmp	r4, r3
   1fdd2:	d1e8      	bne.n	1fda6 <_puts_r+0x2a>
   1fdd4:	68ec      	ldr	r4, [r5, #12]
   1fdd6:	e7e6      	b.n	1fda6 <_puts_r+0x2a>
   1fdd8:	3b01      	subs	r3, #1
   1fdda:	3601      	adds	r6, #1
   1fddc:	60a3      	str	r3, [r4, #8]
   1fdde:	2b00      	cmp	r3, #0
   1fde0:	da04      	bge.n	1fdec <_puts_r+0x70>
   1fde2:	69a2      	ldr	r2, [r4, #24]
   1fde4:	4293      	cmp	r3, r2
   1fde6:	db16      	blt.n	1fe16 <_puts_r+0x9a>
   1fde8:	290a      	cmp	r1, #10
   1fdea:	d014      	beq.n	1fe16 <_puts_r+0x9a>
   1fdec:	6823      	ldr	r3, [r4, #0]
   1fdee:	1c5a      	adds	r2, r3, #1
   1fdf0:	6022      	str	r2, [r4, #0]
   1fdf2:	7019      	strb	r1, [r3, #0]
   1fdf4:	7831      	ldrb	r1, [r6, #0]
   1fdf6:	68a3      	ldr	r3, [r4, #8]
   1fdf8:	2900      	cmp	r1, #0
   1fdfa:	d1ed      	bne.n	1fdd8 <_puts_r+0x5c>
   1fdfc:	3b01      	subs	r3, #1
   1fdfe:	60a3      	str	r3, [r4, #8]
   1fe00:	2b00      	cmp	r3, #0
   1fe02:	da0f      	bge.n	1fe24 <_puts_r+0xa8>
   1fe04:	0022      	movs	r2, r4
   1fe06:	310a      	adds	r1, #10
   1fe08:	0028      	movs	r0, r5
   1fe0a:	f000 f9df 	bl	201cc <__swbuf_r>
   1fe0e:	1c43      	adds	r3, r0, #1
   1fe10:	d0d5      	beq.n	1fdbe <_puts_r+0x42>
   1fe12:	200a      	movs	r0, #10
   1fe14:	e7d5      	b.n	1fdc2 <_puts_r+0x46>
   1fe16:	0022      	movs	r2, r4
   1fe18:	0028      	movs	r0, r5
   1fe1a:	f000 f9d7 	bl	201cc <__swbuf_r>
   1fe1e:	1c43      	adds	r3, r0, #1
   1fe20:	d1e8      	bne.n	1fdf4 <_puts_r+0x78>
   1fe22:	e7cc      	b.n	1fdbe <_puts_r+0x42>
   1fe24:	200a      	movs	r0, #10
   1fe26:	6823      	ldr	r3, [r4, #0]
   1fe28:	1c5a      	adds	r2, r3, #1
   1fe2a:	6022      	str	r2, [r4, #0]
   1fe2c:	7018      	strb	r0, [r3, #0]
   1fe2e:	e7c8      	b.n	1fdc2 <_puts_r+0x46>
   1fe30:	00023204 	.word	0x00023204
   1fe34:	00023224 	.word	0x00023224
   1fe38:	000231e4 	.word	0x000231e4

0001fe3c <puts>:
   1fe3c:	b510      	push	{r4, lr}
   1fe3e:	4b03      	ldr	r3, [pc, #12]	; (1fe4c <puts+0x10>)
   1fe40:	0001      	movs	r1, r0
   1fe42:	6818      	ldr	r0, [r3, #0]
   1fe44:	f7ff ff9a 	bl	1fd7c <_puts_r>
   1fe48:	bd10      	pop	{r4, pc}
   1fe4a:	46c0      	nop			; (mov r8, r8)
   1fe4c:	200000a4 	.word	0x200000a4

0001fe50 <_sbrk_r>:
   1fe50:	2300      	movs	r3, #0
   1fe52:	b570      	push	{r4, r5, r6, lr}
   1fe54:	4c06      	ldr	r4, [pc, #24]	; (1fe70 <_sbrk_r+0x20>)
   1fe56:	0005      	movs	r5, r0
   1fe58:	0008      	movs	r0, r1
   1fe5a:	6023      	str	r3, [r4, #0]
   1fe5c:	f7fb faa0 	bl	1b3a0 <_sbrk>
   1fe60:	1c43      	adds	r3, r0, #1
   1fe62:	d103      	bne.n	1fe6c <_sbrk_r+0x1c>
   1fe64:	6823      	ldr	r3, [r4, #0]
   1fe66:	2b00      	cmp	r3, #0
   1fe68:	d000      	beq.n	1fe6c <_sbrk_r+0x1c>
   1fe6a:	602b      	str	r3, [r5, #0]
   1fe6c:	bd70      	pop	{r4, r5, r6, pc}
   1fe6e:	46c0      	nop			; (mov r8, r8)
   1fe70:	20003f54 	.word	0x20003f54

0001fe74 <sniprintf>:
   1fe74:	b40c      	push	{r2, r3}
   1fe76:	b530      	push	{r4, r5, lr}
   1fe78:	4b16      	ldr	r3, [pc, #88]	; (1fed4 <sniprintf+0x60>)
   1fe7a:	b09d      	sub	sp, #116	; 0x74
   1fe7c:	1e0c      	subs	r4, r1, #0
   1fe7e:	681d      	ldr	r5, [r3, #0]
   1fe80:	da08      	bge.n	1fe94 <sniprintf+0x20>
   1fe82:	238b      	movs	r3, #139	; 0x8b
   1fe84:	2001      	movs	r0, #1
   1fe86:	602b      	str	r3, [r5, #0]
   1fe88:	4240      	negs	r0, r0
   1fe8a:	b01d      	add	sp, #116	; 0x74
   1fe8c:	bc30      	pop	{r4, r5}
   1fe8e:	bc08      	pop	{r3}
   1fe90:	b002      	add	sp, #8
   1fe92:	4718      	bx	r3
   1fe94:	2382      	movs	r3, #130	; 0x82
   1fe96:	a902      	add	r1, sp, #8
   1fe98:	009b      	lsls	r3, r3, #2
   1fe9a:	818b      	strh	r3, [r1, #12]
   1fe9c:	2300      	movs	r3, #0
   1fe9e:	9002      	str	r0, [sp, #8]
   1fea0:	6108      	str	r0, [r1, #16]
   1fea2:	429c      	cmp	r4, r3
   1fea4:	d000      	beq.n	1fea8 <sniprintf+0x34>
   1fea6:	1e63      	subs	r3, r4, #1
   1fea8:	608b      	str	r3, [r1, #8]
   1feaa:	614b      	str	r3, [r1, #20]
   1feac:	2301      	movs	r3, #1
   1feae:	425b      	negs	r3, r3
   1feb0:	81cb      	strh	r3, [r1, #14]
   1feb2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1feb4:	ab21      	add	r3, sp, #132	; 0x84
   1feb6:	0028      	movs	r0, r5
   1feb8:	9301      	str	r3, [sp, #4]
   1feba:	f000 fcc5 	bl	20848 <_svfiprintf_r>
   1febe:	1c43      	adds	r3, r0, #1
   1fec0:	da01      	bge.n	1fec6 <sniprintf+0x52>
   1fec2:	238b      	movs	r3, #139	; 0x8b
   1fec4:	602b      	str	r3, [r5, #0]
   1fec6:	2c00      	cmp	r4, #0
   1fec8:	d0df      	beq.n	1fe8a <sniprintf+0x16>
   1feca:	2300      	movs	r3, #0
   1fecc:	9a02      	ldr	r2, [sp, #8]
   1fece:	7013      	strb	r3, [r2, #0]
   1fed0:	e7db      	b.n	1fe8a <sniprintf+0x16>
   1fed2:	46c0      	nop			; (mov r8, r8)
   1fed4:	200000a4 	.word	0x200000a4

0001fed8 <siprintf>:
   1fed8:	b40e      	push	{r1, r2, r3}
   1feda:	b510      	push	{r4, lr}
   1fedc:	b09d      	sub	sp, #116	; 0x74
   1fede:	a902      	add	r1, sp, #8
   1fee0:	9002      	str	r0, [sp, #8]
   1fee2:	6108      	str	r0, [r1, #16]
   1fee4:	480b      	ldr	r0, [pc, #44]	; (1ff14 <siprintf+0x3c>)
   1fee6:	2482      	movs	r4, #130	; 0x82
   1fee8:	6088      	str	r0, [r1, #8]
   1feea:	6148      	str	r0, [r1, #20]
   1feec:	2001      	movs	r0, #1
   1feee:	4240      	negs	r0, r0
   1fef0:	ab1f      	add	r3, sp, #124	; 0x7c
   1fef2:	81c8      	strh	r0, [r1, #14]
   1fef4:	4808      	ldr	r0, [pc, #32]	; (1ff18 <siprintf+0x40>)
   1fef6:	cb04      	ldmia	r3!, {r2}
   1fef8:	00a4      	lsls	r4, r4, #2
   1fefa:	6800      	ldr	r0, [r0, #0]
   1fefc:	9301      	str	r3, [sp, #4]
   1fefe:	818c      	strh	r4, [r1, #12]
   1ff00:	f000 fca2 	bl	20848 <_svfiprintf_r>
   1ff04:	2300      	movs	r3, #0
   1ff06:	9a02      	ldr	r2, [sp, #8]
   1ff08:	7013      	strb	r3, [r2, #0]
   1ff0a:	b01d      	add	sp, #116	; 0x74
   1ff0c:	bc10      	pop	{r4}
   1ff0e:	bc08      	pop	{r3}
   1ff10:	b003      	add	sp, #12
   1ff12:	4718      	bx	r3
   1ff14:	7fffffff 	.word	0x7fffffff
   1ff18:	200000a4 	.word	0x200000a4

0001ff1c <strcmp>:
   1ff1c:	7802      	ldrb	r2, [r0, #0]
   1ff1e:	780b      	ldrb	r3, [r1, #0]
   1ff20:	2a00      	cmp	r2, #0
   1ff22:	d003      	beq.n	1ff2c <strcmp+0x10>
   1ff24:	3001      	adds	r0, #1
   1ff26:	3101      	adds	r1, #1
   1ff28:	429a      	cmp	r2, r3
   1ff2a:	d0f7      	beq.n	1ff1c <strcmp>
   1ff2c:	1ad0      	subs	r0, r2, r3
   1ff2e:	4770      	bx	lr

0001ff30 <strcpy>:
   1ff30:	1c03      	adds	r3, r0, #0
   1ff32:	780a      	ldrb	r2, [r1, #0]
   1ff34:	3101      	adds	r1, #1
   1ff36:	701a      	strb	r2, [r3, #0]
   1ff38:	3301      	adds	r3, #1
   1ff3a:	2a00      	cmp	r2, #0
   1ff3c:	d1f9      	bne.n	1ff32 <strcpy+0x2>
   1ff3e:	4770      	bx	lr

0001ff40 <strdup>:
   1ff40:	b510      	push	{r4, lr}
   1ff42:	4b03      	ldr	r3, [pc, #12]	; (1ff50 <strdup+0x10>)
   1ff44:	0001      	movs	r1, r0
   1ff46:	6818      	ldr	r0, [r3, #0]
   1ff48:	f000 f804 	bl	1ff54 <_strdup_r>
   1ff4c:	bd10      	pop	{r4, pc}
   1ff4e:	46c0      	nop			; (mov r8, r8)
   1ff50:	200000a4 	.word	0x200000a4

0001ff54 <_strdup_r>:
   1ff54:	b570      	push	{r4, r5, r6, lr}
   1ff56:	0005      	movs	r5, r0
   1ff58:	0008      	movs	r0, r1
   1ff5a:	000e      	movs	r6, r1
   1ff5c:	f000 f80d 	bl	1ff7a <strlen>
   1ff60:	1c44      	adds	r4, r0, #1
   1ff62:	0021      	movs	r1, r4
   1ff64:	0028      	movs	r0, r5
   1ff66:	f7ff feab 	bl	1fcc0 <_malloc_r>
   1ff6a:	1e05      	subs	r5, r0, #0
   1ff6c:	d003      	beq.n	1ff76 <_strdup_r+0x22>
   1ff6e:	0022      	movs	r2, r4
   1ff70:	0031      	movs	r1, r6
   1ff72:	f7ff fe37 	bl	1fbe4 <memcpy>
   1ff76:	0028      	movs	r0, r5
   1ff78:	bd70      	pop	{r4, r5, r6, pc}

0001ff7a <strlen>:
   1ff7a:	2300      	movs	r3, #0
   1ff7c:	5cc2      	ldrb	r2, [r0, r3]
   1ff7e:	3301      	adds	r3, #1
   1ff80:	2a00      	cmp	r2, #0
   1ff82:	d1fb      	bne.n	1ff7c <strlen+0x2>
   1ff84:	1e58      	subs	r0, r3, #1
   1ff86:	4770      	bx	lr

0001ff88 <strncmp>:
   1ff88:	2300      	movs	r3, #0
   1ff8a:	b530      	push	{r4, r5, lr}
   1ff8c:	429a      	cmp	r2, r3
   1ff8e:	d00a      	beq.n	1ffa6 <strncmp+0x1e>
   1ff90:	3a01      	subs	r2, #1
   1ff92:	5cc4      	ldrb	r4, [r0, r3]
   1ff94:	5ccd      	ldrb	r5, [r1, r3]
   1ff96:	42ac      	cmp	r4, r5
   1ff98:	d104      	bne.n	1ffa4 <strncmp+0x1c>
   1ff9a:	429a      	cmp	r2, r3
   1ff9c:	d002      	beq.n	1ffa4 <strncmp+0x1c>
   1ff9e:	3301      	adds	r3, #1
   1ffa0:	2c00      	cmp	r4, #0
   1ffa2:	d1f6      	bne.n	1ff92 <strncmp+0xa>
   1ffa4:	1b63      	subs	r3, r4, r5
   1ffa6:	0018      	movs	r0, r3
   1ffa8:	bd30      	pop	{r4, r5, pc}

0001ffaa <strncpy>:
   1ffaa:	b570      	push	{r4, r5, r6, lr}
   1ffac:	0004      	movs	r4, r0
   1ffae:	2a00      	cmp	r2, #0
   1ffb0:	d100      	bne.n	1ffb4 <strncpy+0xa>
   1ffb2:	bd70      	pop	{r4, r5, r6, pc}
   1ffb4:	780d      	ldrb	r5, [r1, #0]
   1ffb6:	1e56      	subs	r6, r2, #1
   1ffb8:	1c63      	adds	r3, r4, #1
   1ffba:	7025      	strb	r5, [r4, #0]
   1ffbc:	3101      	adds	r1, #1
   1ffbe:	2d00      	cmp	r5, #0
   1ffc0:	d105      	bne.n	1ffce <strncpy+0x24>
   1ffc2:	18a4      	adds	r4, r4, r2
   1ffc4:	429c      	cmp	r4, r3
   1ffc6:	d0f4      	beq.n	1ffb2 <strncpy+0x8>
   1ffc8:	701d      	strb	r5, [r3, #0]
   1ffca:	3301      	adds	r3, #1
   1ffcc:	e7fa      	b.n	1ffc4 <strncpy+0x1a>
   1ffce:	001c      	movs	r4, r3
   1ffd0:	0032      	movs	r2, r6
   1ffd2:	e7ec      	b.n	1ffae <strncpy+0x4>

0001ffd4 <strrchr>:
   1ffd4:	b570      	push	{r4, r5, r6, lr}
   1ffd6:	000d      	movs	r5, r1
   1ffd8:	2400      	movs	r4, #0
   1ffda:	2900      	cmp	r1, #0
   1ffdc:	d105      	bne.n	1ffea <strrchr+0x16>
   1ffde:	f000 ff0b 	bl	20df8 <strchr>
   1ffe2:	0004      	movs	r4, r0
   1ffe4:	e006      	b.n	1fff4 <strrchr+0x20>
   1ffe6:	001c      	movs	r4, r3
   1ffe8:	1c58      	adds	r0, r3, #1
   1ffea:	0029      	movs	r1, r5
   1ffec:	f000 ff04 	bl	20df8 <strchr>
   1fff0:	1e03      	subs	r3, r0, #0
   1fff2:	d1f8      	bne.n	1ffe6 <strrchr+0x12>
   1fff4:	0020      	movs	r0, r4
   1fff6:	bd70      	pop	{r4, r5, r6, pc}

0001fff8 <strstr>:
   1fff8:	b510      	push	{r4, lr}
   1fffa:	0002      	movs	r2, r0
   1fffc:	7800      	ldrb	r0, [r0, #0]
   1fffe:	2800      	cmp	r0, #0
   20000:	d104      	bne.n	2000c <strstr+0x14>
   20002:	7809      	ldrb	r1, [r1, #0]
   20004:	2900      	cmp	r1, #0
   20006:	d00d      	beq.n	20024 <strstr+0x2c>
   20008:	bd10      	pop	{r4, pc}
   2000a:	3201      	adds	r2, #1
   2000c:	7810      	ldrb	r0, [r2, #0]
   2000e:	2800      	cmp	r0, #0
   20010:	d0fa      	beq.n	20008 <strstr+0x10>
   20012:	2300      	movs	r3, #0
   20014:	5cc8      	ldrb	r0, [r1, r3]
   20016:	2800      	cmp	r0, #0
   20018:	d004      	beq.n	20024 <strstr+0x2c>
   2001a:	5cd4      	ldrb	r4, [r2, r3]
   2001c:	4284      	cmp	r4, r0
   2001e:	d1f4      	bne.n	2000a <strstr+0x12>
   20020:	3301      	adds	r3, #1
   20022:	e7f7      	b.n	20014 <strstr+0x1c>
   20024:	0010      	movs	r0, r2
   20026:	e7ef      	b.n	20008 <strstr+0x10>

00020028 <_strtol_l.isra.0>:
   20028:	b5f0      	push	{r4, r5, r6, r7, lr}
   2002a:	001f      	movs	r7, r3
   2002c:	000e      	movs	r6, r1
   2002e:	b087      	sub	sp, #28
   20030:	9005      	str	r0, [sp, #20]
   20032:	9103      	str	r1, [sp, #12]
   20034:	9202      	str	r2, [sp, #8]
   20036:	980c      	ldr	r0, [sp, #48]	; 0x30
   20038:	7834      	ldrb	r4, [r6, #0]
   2003a:	f000 fb20 	bl	2067e <__locale_ctype_ptr_l>
   2003e:	2208      	movs	r2, #8
   20040:	1900      	adds	r0, r0, r4
   20042:	7843      	ldrb	r3, [r0, #1]
   20044:	1c75      	adds	r5, r6, #1
   20046:	4013      	ands	r3, r2
   20048:	d10c      	bne.n	20064 <_strtol_l.isra.0+0x3c>
   2004a:	2c2d      	cmp	r4, #45	; 0x2d
   2004c:	d10c      	bne.n	20068 <_strtol_l.isra.0+0x40>
   2004e:	3301      	adds	r3, #1
   20050:	782c      	ldrb	r4, [r5, #0]
   20052:	9301      	str	r3, [sp, #4]
   20054:	1cb5      	adds	r5, r6, #2
   20056:	2f00      	cmp	r7, #0
   20058:	d00c      	beq.n	20074 <_strtol_l.isra.0+0x4c>
   2005a:	2f10      	cmp	r7, #16
   2005c:	d114      	bne.n	20088 <_strtol_l.isra.0+0x60>
   2005e:	2c30      	cmp	r4, #48	; 0x30
   20060:	d00a      	beq.n	20078 <_strtol_l.isra.0+0x50>
   20062:	e011      	b.n	20088 <_strtol_l.isra.0+0x60>
   20064:	002e      	movs	r6, r5
   20066:	e7e6      	b.n	20036 <_strtol_l.isra.0+0xe>
   20068:	9301      	str	r3, [sp, #4]
   2006a:	2c2b      	cmp	r4, #43	; 0x2b
   2006c:	d1f3      	bne.n	20056 <_strtol_l.isra.0+0x2e>
   2006e:	782c      	ldrb	r4, [r5, #0]
   20070:	1cb5      	adds	r5, r6, #2
   20072:	e7f0      	b.n	20056 <_strtol_l.isra.0+0x2e>
   20074:	2c30      	cmp	r4, #48	; 0x30
   20076:	d12f      	bne.n	200d8 <_strtol_l.isra.0+0xb0>
   20078:	2220      	movs	r2, #32
   2007a:	782b      	ldrb	r3, [r5, #0]
   2007c:	4393      	bics	r3, r2
   2007e:	2b58      	cmp	r3, #88	; 0x58
   20080:	d151      	bne.n	20126 <_strtol_l.isra.0+0xfe>
   20082:	2710      	movs	r7, #16
   20084:	786c      	ldrb	r4, [r5, #1]
   20086:	3502      	adds	r5, #2
   20088:	9b01      	ldr	r3, [sp, #4]
   2008a:	4a29      	ldr	r2, [pc, #164]	; (20130 <_strtol_l.isra.0+0x108>)
   2008c:	0039      	movs	r1, r7
   2008e:	189e      	adds	r6, r3, r2
   20090:	0030      	movs	r0, r6
   20092:	f7ff fc4f 	bl	1f934 <__aeabi_uidivmod>
   20096:	0030      	movs	r0, r6
   20098:	9104      	str	r1, [sp, #16]
   2009a:	0039      	movs	r1, r7
   2009c:	f7ff fbc4 	bl	1f828 <__udivsi3>
   200a0:	2101      	movs	r1, #1
   200a2:	2300      	movs	r3, #0
   200a4:	4249      	negs	r1, r1
   200a6:	0002      	movs	r2, r0
   200a8:	468c      	mov	ip, r1
   200aa:	0018      	movs	r0, r3
   200ac:	0021      	movs	r1, r4
   200ae:	3930      	subs	r1, #48	; 0x30
   200b0:	2909      	cmp	r1, #9
   200b2:	d813      	bhi.n	200dc <_strtol_l.isra.0+0xb4>
   200b4:	000c      	movs	r4, r1
   200b6:	42a7      	cmp	r7, r4
   200b8:	dd1c      	ble.n	200f4 <_strtol_l.isra.0+0xcc>
   200ba:	1c59      	adds	r1, r3, #1
   200bc:	d009      	beq.n	200d2 <_strtol_l.isra.0+0xaa>
   200be:	4663      	mov	r3, ip
   200c0:	4282      	cmp	r2, r0
   200c2:	d306      	bcc.n	200d2 <_strtol_l.isra.0+0xaa>
   200c4:	d102      	bne.n	200cc <_strtol_l.isra.0+0xa4>
   200c6:	9904      	ldr	r1, [sp, #16]
   200c8:	42a1      	cmp	r1, r4
   200ca:	db02      	blt.n	200d2 <_strtol_l.isra.0+0xaa>
   200cc:	2301      	movs	r3, #1
   200ce:	4378      	muls	r0, r7
   200d0:	1820      	adds	r0, r4, r0
   200d2:	782c      	ldrb	r4, [r5, #0]
   200d4:	3501      	adds	r5, #1
   200d6:	e7e9      	b.n	200ac <_strtol_l.isra.0+0x84>
   200d8:	270a      	movs	r7, #10
   200da:	e7d5      	b.n	20088 <_strtol_l.isra.0+0x60>
   200dc:	0021      	movs	r1, r4
   200de:	3941      	subs	r1, #65	; 0x41
   200e0:	2919      	cmp	r1, #25
   200e2:	d801      	bhi.n	200e8 <_strtol_l.isra.0+0xc0>
   200e4:	3c37      	subs	r4, #55	; 0x37
   200e6:	e7e6      	b.n	200b6 <_strtol_l.isra.0+0x8e>
   200e8:	0021      	movs	r1, r4
   200ea:	3961      	subs	r1, #97	; 0x61
   200ec:	2919      	cmp	r1, #25
   200ee:	d801      	bhi.n	200f4 <_strtol_l.isra.0+0xcc>
   200f0:	3c57      	subs	r4, #87	; 0x57
   200f2:	e7e0      	b.n	200b6 <_strtol_l.isra.0+0x8e>
   200f4:	1c5a      	adds	r2, r3, #1
   200f6:	d108      	bne.n	2010a <_strtol_l.isra.0+0xe2>
   200f8:	9a05      	ldr	r2, [sp, #20]
   200fa:	3323      	adds	r3, #35	; 0x23
   200fc:	6013      	str	r3, [r2, #0]
   200fe:	9b02      	ldr	r3, [sp, #8]
   20100:	0030      	movs	r0, r6
   20102:	2b00      	cmp	r3, #0
   20104:	d10b      	bne.n	2011e <_strtol_l.isra.0+0xf6>
   20106:	b007      	add	sp, #28
   20108:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2010a:	9a01      	ldr	r2, [sp, #4]
   2010c:	2a00      	cmp	r2, #0
   2010e:	d000      	beq.n	20112 <_strtol_l.isra.0+0xea>
   20110:	4240      	negs	r0, r0
   20112:	9a02      	ldr	r2, [sp, #8]
   20114:	2a00      	cmp	r2, #0
   20116:	d0f6      	beq.n	20106 <_strtol_l.isra.0+0xde>
   20118:	9a03      	ldr	r2, [sp, #12]
   2011a:	2b00      	cmp	r3, #0
   2011c:	d000      	beq.n	20120 <_strtol_l.isra.0+0xf8>
   2011e:	1e6a      	subs	r2, r5, #1
   20120:	9b02      	ldr	r3, [sp, #8]
   20122:	601a      	str	r2, [r3, #0]
   20124:	e7ef      	b.n	20106 <_strtol_l.isra.0+0xde>
   20126:	2430      	movs	r4, #48	; 0x30
   20128:	2f00      	cmp	r7, #0
   2012a:	d1ad      	bne.n	20088 <_strtol_l.isra.0+0x60>
   2012c:	3708      	adds	r7, #8
   2012e:	e7ab      	b.n	20088 <_strtol_l.isra.0+0x60>
   20130:	7fffffff 	.word	0x7fffffff

00020134 <strtol>:
   20134:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20136:	0013      	movs	r3, r2
   20138:	4a06      	ldr	r2, [pc, #24]	; (20154 <strtol+0x20>)
   2013a:	0005      	movs	r5, r0
   2013c:	6810      	ldr	r0, [r2, #0]
   2013e:	6a04      	ldr	r4, [r0, #32]
   20140:	2c00      	cmp	r4, #0
   20142:	d100      	bne.n	20146 <strtol+0x12>
   20144:	4c04      	ldr	r4, [pc, #16]	; (20158 <strtol+0x24>)
   20146:	000a      	movs	r2, r1
   20148:	9400      	str	r4, [sp, #0]
   2014a:	0029      	movs	r1, r5
   2014c:	f7ff ff6c 	bl	20028 <_strtol_l.isra.0>
   20150:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   20152:	46c0      	nop			; (mov r8, r8)
   20154:	200000a4 	.word	0x200000a4
   20158:	20000108 	.word	0x20000108

0002015c <_vsniprintf_r>:
   2015c:	b530      	push	{r4, r5, lr}
   2015e:	0014      	movs	r4, r2
   20160:	b09b      	sub	sp, #108	; 0x6c
   20162:	0005      	movs	r5, r0
   20164:	001a      	movs	r2, r3
   20166:	2c00      	cmp	r4, #0
   20168:	da05      	bge.n	20176 <_vsniprintf_r+0x1a>
   2016a:	238b      	movs	r3, #139	; 0x8b
   2016c:	6003      	str	r3, [r0, #0]
   2016e:	2001      	movs	r0, #1
   20170:	4240      	negs	r0, r0
   20172:	b01b      	add	sp, #108	; 0x6c
   20174:	bd30      	pop	{r4, r5, pc}
   20176:	2382      	movs	r3, #130	; 0x82
   20178:	4668      	mov	r0, sp
   2017a:	009b      	lsls	r3, r3, #2
   2017c:	8183      	strh	r3, [r0, #12]
   2017e:	2300      	movs	r3, #0
   20180:	9100      	str	r1, [sp, #0]
   20182:	9104      	str	r1, [sp, #16]
   20184:	429c      	cmp	r4, r3
   20186:	d000      	beq.n	2018a <_vsniprintf_r+0x2e>
   20188:	1e63      	subs	r3, r4, #1
   2018a:	9302      	str	r3, [sp, #8]
   2018c:	9305      	str	r3, [sp, #20]
   2018e:	2301      	movs	r3, #1
   20190:	4669      	mov	r1, sp
   20192:	425b      	negs	r3, r3
   20194:	81cb      	strh	r3, [r1, #14]
   20196:	0028      	movs	r0, r5
   20198:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2019a:	f000 fb55 	bl	20848 <_svfiprintf_r>
   2019e:	1c43      	adds	r3, r0, #1
   201a0:	da01      	bge.n	201a6 <_vsniprintf_r+0x4a>
   201a2:	238b      	movs	r3, #139	; 0x8b
   201a4:	602b      	str	r3, [r5, #0]
   201a6:	2c00      	cmp	r4, #0
   201a8:	d0e3      	beq.n	20172 <_vsniprintf_r+0x16>
   201aa:	2300      	movs	r3, #0
   201ac:	9a00      	ldr	r2, [sp, #0]
   201ae:	7013      	strb	r3, [r2, #0]
   201b0:	e7df      	b.n	20172 <_vsniprintf_r+0x16>
	...

000201b4 <vsniprintf>:
   201b4:	b507      	push	{r0, r1, r2, lr}
   201b6:	9300      	str	r3, [sp, #0]
   201b8:	0013      	movs	r3, r2
   201ba:	000a      	movs	r2, r1
   201bc:	0001      	movs	r1, r0
   201be:	4802      	ldr	r0, [pc, #8]	; (201c8 <vsniprintf+0x14>)
   201c0:	6800      	ldr	r0, [r0, #0]
   201c2:	f7ff ffcb 	bl	2015c <_vsniprintf_r>
   201c6:	bd0e      	pop	{r1, r2, r3, pc}
   201c8:	200000a4 	.word	0x200000a4

000201cc <__swbuf_r>:
   201cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   201ce:	0005      	movs	r5, r0
   201d0:	000e      	movs	r6, r1
   201d2:	0014      	movs	r4, r2
   201d4:	2800      	cmp	r0, #0
   201d6:	d004      	beq.n	201e2 <__swbuf_r+0x16>
   201d8:	6983      	ldr	r3, [r0, #24]
   201da:	2b00      	cmp	r3, #0
   201dc:	d101      	bne.n	201e2 <__swbuf_r+0x16>
   201de:	f000 f9b9 	bl	20554 <__sinit>
   201e2:	4b22      	ldr	r3, [pc, #136]	; (2026c <__swbuf_r+0xa0>)
   201e4:	429c      	cmp	r4, r3
   201e6:	d12d      	bne.n	20244 <__swbuf_r+0x78>
   201e8:	686c      	ldr	r4, [r5, #4]
   201ea:	69a3      	ldr	r3, [r4, #24]
   201ec:	60a3      	str	r3, [r4, #8]
   201ee:	89a3      	ldrh	r3, [r4, #12]
   201f0:	071b      	lsls	r3, r3, #28
   201f2:	d531      	bpl.n	20258 <__swbuf_r+0x8c>
   201f4:	6923      	ldr	r3, [r4, #16]
   201f6:	2b00      	cmp	r3, #0
   201f8:	d02e      	beq.n	20258 <__swbuf_r+0x8c>
   201fa:	6823      	ldr	r3, [r4, #0]
   201fc:	6922      	ldr	r2, [r4, #16]
   201fe:	b2f7      	uxtb	r7, r6
   20200:	1a98      	subs	r0, r3, r2
   20202:	6963      	ldr	r3, [r4, #20]
   20204:	b2f6      	uxtb	r6, r6
   20206:	4298      	cmp	r0, r3
   20208:	db05      	blt.n	20216 <__swbuf_r+0x4a>
   2020a:	0021      	movs	r1, r4
   2020c:	0028      	movs	r0, r5
   2020e:	f000 f933 	bl	20478 <_fflush_r>
   20212:	2800      	cmp	r0, #0
   20214:	d126      	bne.n	20264 <__swbuf_r+0x98>
   20216:	68a3      	ldr	r3, [r4, #8]
   20218:	3001      	adds	r0, #1
   2021a:	3b01      	subs	r3, #1
   2021c:	60a3      	str	r3, [r4, #8]
   2021e:	6823      	ldr	r3, [r4, #0]
   20220:	1c5a      	adds	r2, r3, #1
   20222:	6022      	str	r2, [r4, #0]
   20224:	701f      	strb	r7, [r3, #0]
   20226:	6963      	ldr	r3, [r4, #20]
   20228:	4298      	cmp	r0, r3
   2022a:	d004      	beq.n	20236 <__swbuf_r+0x6a>
   2022c:	89a3      	ldrh	r3, [r4, #12]
   2022e:	07db      	lsls	r3, r3, #31
   20230:	d51a      	bpl.n	20268 <__swbuf_r+0x9c>
   20232:	2e0a      	cmp	r6, #10
   20234:	d118      	bne.n	20268 <__swbuf_r+0x9c>
   20236:	0021      	movs	r1, r4
   20238:	0028      	movs	r0, r5
   2023a:	f000 f91d 	bl	20478 <_fflush_r>
   2023e:	2800      	cmp	r0, #0
   20240:	d012      	beq.n	20268 <__swbuf_r+0x9c>
   20242:	e00f      	b.n	20264 <__swbuf_r+0x98>
   20244:	4b0a      	ldr	r3, [pc, #40]	; (20270 <__swbuf_r+0xa4>)
   20246:	429c      	cmp	r4, r3
   20248:	d101      	bne.n	2024e <__swbuf_r+0x82>
   2024a:	68ac      	ldr	r4, [r5, #8]
   2024c:	e7cd      	b.n	201ea <__swbuf_r+0x1e>
   2024e:	4b09      	ldr	r3, [pc, #36]	; (20274 <__swbuf_r+0xa8>)
   20250:	429c      	cmp	r4, r3
   20252:	d1ca      	bne.n	201ea <__swbuf_r+0x1e>
   20254:	68ec      	ldr	r4, [r5, #12]
   20256:	e7c8      	b.n	201ea <__swbuf_r+0x1e>
   20258:	0021      	movs	r1, r4
   2025a:	0028      	movs	r0, r5
   2025c:	f000 f80c 	bl	20278 <__swsetup_r>
   20260:	2800      	cmp	r0, #0
   20262:	d0ca      	beq.n	201fa <__swbuf_r+0x2e>
   20264:	2601      	movs	r6, #1
   20266:	4276      	negs	r6, r6
   20268:	0030      	movs	r0, r6
   2026a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2026c:	00023204 	.word	0x00023204
   20270:	00023224 	.word	0x00023224
   20274:	000231e4 	.word	0x000231e4

00020278 <__swsetup_r>:
   20278:	4b36      	ldr	r3, [pc, #216]	; (20354 <__swsetup_r+0xdc>)
   2027a:	b570      	push	{r4, r5, r6, lr}
   2027c:	681d      	ldr	r5, [r3, #0]
   2027e:	0006      	movs	r6, r0
   20280:	000c      	movs	r4, r1
   20282:	2d00      	cmp	r5, #0
   20284:	d005      	beq.n	20292 <__swsetup_r+0x1a>
   20286:	69ab      	ldr	r3, [r5, #24]
   20288:	2b00      	cmp	r3, #0
   2028a:	d102      	bne.n	20292 <__swsetup_r+0x1a>
   2028c:	0028      	movs	r0, r5
   2028e:	f000 f961 	bl	20554 <__sinit>
   20292:	4b31      	ldr	r3, [pc, #196]	; (20358 <__swsetup_r+0xe0>)
   20294:	429c      	cmp	r4, r3
   20296:	d10f      	bne.n	202b8 <__swsetup_r+0x40>
   20298:	686c      	ldr	r4, [r5, #4]
   2029a:	230c      	movs	r3, #12
   2029c:	5ee2      	ldrsh	r2, [r4, r3]
   2029e:	b293      	uxth	r3, r2
   202a0:	0719      	lsls	r1, r3, #28
   202a2:	d42d      	bmi.n	20300 <__swsetup_r+0x88>
   202a4:	06d9      	lsls	r1, r3, #27
   202a6:	d411      	bmi.n	202cc <__swsetup_r+0x54>
   202a8:	2309      	movs	r3, #9
   202aa:	2001      	movs	r0, #1
   202ac:	6033      	str	r3, [r6, #0]
   202ae:	3337      	adds	r3, #55	; 0x37
   202b0:	4313      	orrs	r3, r2
   202b2:	81a3      	strh	r3, [r4, #12]
   202b4:	4240      	negs	r0, r0
   202b6:	bd70      	pop	{r4, r5, r6, pc}
   202b8:	4b28      	ldr	r3, [pc, #160]	; (2035c <__swsetup_r+0xe4>)
   202ba:	429c      	cmp	r4, r3
   202bc:	d101      	bne.n	202c2 <__swsetup_r+0x4a>
   202be:	68ac      	ldr	r4, [r5, #8]
   202c0:	e7eb      	b.n	2029a <__swsetup_r+0x22>
   202c2:	4b27      	ldr	r3, [pc, #156]	; (20360 <__swsetup_r+0xe8>)
   202c4:	429c      	cmp	r4, r3
   202c6:	d1e8      	bne.n	2029a <__swsetup_r+0x22>
   202c8:	68ec      	ldr	r4, [r5, #12]
   202ca:	e7e6      	b.n	2029a <__swsetup_r+0x22>
   202cc:	075b      	lsls	r3, r3, #29
   202ce:	d513      	bpl.n	202f8 <__swsetup_r+0x80>
   202d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   202d2:	2900      	cmp	r1, #0
   202d4:	d008      	beq.n	202e8 <__swsetup_r+0x70>
   202d6:	0023      	movs	r3, r4
   202d8:	3344      	adds	r3, #68	; 0x44
   202da:	4299      	cmp	r1, r3
   202dc:	d002      	beq.n	202e4 <__swsetup_r+0x6c>
   202de:	0030      	movs	r0, r6
   202e0:	f7ff fca4 	bl	1fc2c <_free_r>
   202e4:	2300      	movs	r3, #0
   202e6:	6363      	str	r3, [r4, #52]	; 0x34
   202e8:	2224      	movs	r2, #36	; 0x24
   202ea:	89a3      	ldrh	r3, [r4, #12]
   202ec:	4393      	bics	r3, r2
   202ee:	81a3      	strh	r3, [r4, #12]
   202f0:	2300      	movs	r3, #0
   202f2:	6063      	str	r3, [r4, #4]
   202f4:	6923      	ldr	r3, [r4, #16]
   202f6:	6023      	str	r3, [r4, #0]
   202f8:	2308      	movs	r3, #8
   202fa:	89a2      	ldrh	r2, [r4, #12]
   202fc:	4313      	orrs	r3, r2
   202fe:	81a3      	strh	r3, [r4, #12]
   20300:	6923      	ldr	r3, [r4, #16]
   20302:	2b00      	cmp	r3, #0
   20304:	d10b      	bne.n	2031e <__swsetup_r+0xa6>
   20306:	21a0      	movs	r1, #160	; 0xa0
   20308:	2280      	movs	r2, #128	; 0x80
   2030a:	89a3      	ldrh	r3, [r4, #12]
   2030c:	0089      	lsls	r1, r1, #2
   2030e:	0092      	lsls	r2, r2, #2
   20310:	400b      	ands	r3, r1
   20312:	4293      	cmp	r3, r2
   20314:	d003      	beq.n	2031e <__swsetup_r+0xa6>
   20316:	0021      	movs	r1, r4
   20318:	0030      	movs	r0, r6
   2031a:	f000 f9db 	bl	206d4 <__smakebuf_r>
   2031e:	2301      	movs	r3, #1
   20320:	89a2      	ldrh	r2, [r4, #12]
   20322:	4013      	ands	r3, r2
   20324:	d011      	beq.n	2034a <__swsetup_r+0xd2>
   20326:	2300      	movs	r3, #0
   20328:	60a3      	str	r3, [r4, #8]
   2032a:	6963      	ldr	r3, [r4, #20]
   2032c:	425b      	negs	r3, r3
   2032e:	61a3      	str	r3, [r4, #24]
   20330:	2000      	movs	r0, #0
   20332:	6923      	ldr	r3, [r4, #16]
   20334:	4283      	cmp	r3, r0
   20336:	d1be      	bne.n	202b6 <__swsetup_r+0x3e>
   20338:	230c      	movs	r3, #12
   2033a:	5ee2      	ldrsh	r2, [r4, r3]
   2033c:	0613      	lsls	r3, r2, #24
   2033e:	d5ba      	bpl.n	202b6 <__swsetup_r+0x3e>
   20340:	2340      	movs	r3, #64	; 0x40
   20342:	4313      	orrs	r3, r2
   20344:	81a3      	strh	r3, [r4, #12]
   20346:	3801      	subs	r0, #1
   20348:	e7b5      	b.n	202b6 <__swsetup_r+0x3e>
   2034a:	0792      	lsls	r2, r2, #30
   2034c:	d400      	bmi.n	20350 <__swsetup_r+0xd8>
   2034e:	6963      	ldr	r3, [r4, #20]
   20350:	60a3      	str	r3, [r4, #8]
   20352:	e7ed      	b.n	20330 <__swsetup_r+0xb8>
   20354:	200000a4 	.word	0x200000a4
   20358:	00023204 	.word	0x00023204
   2035c:	00023224 	.word	0x00023224
   20360:	000231e4 	.word	0x000231e4

00020364 <__sflush_r>:
   20364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20366:	898a      	ldrh	r2, [r1, #12]
   20368:	0005      	movs	r5, r0
   2036a:	000c      	movs	r4, r1
   2036c:	0713      	lsls	r3, r2, #28
   2036e:	d460      	bmi.n	20432 <__sflush_r+0xce>
   20370:	684b      	ldr	r3, [r1, #4]
   20372:	2b00      	cmp	r3, #0
   20374:	dc04      	bgt.n	20380 <__sflush_r+0x1c>
   20376:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   20378:	2b00      	cmp	r3, #0
   2037a:	dc01      	bgt.n	20380 <__sflush_r+0x1c>
   2037c:	2000      	movs	r0, #0
   2037e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   20380:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   20382:	2f00      	cmp	r7, #0
   20384:	d0fa      	beq.n	2037c <__sflush_r+0x18>
   20386:	2300      	movs	r3, #0
   20388:	682e      	ldr	r6, [r5, #0]
   2038a:	602b      	str	r3, [r5, #0]
   2038c:	2380      	movs	r3, #128	; 0x80
   2038e:	015b      	lsls	r3, r3, #5
   20390:	401a      	ands	r2, r3
   20392:	d034      	beq.n	203fe <__sflush_r+0x9a>
   20394:	6d60      	ldr	r0, [r4, #84]	; 0x54
   20396:	89a3      	ldrh	r3, [r4, #12]
   20398:	075b      	lsls	r3, r3, #29
   2039a:	d506      	bpl.n	203aa <__sflush_r+0x46>
   2039c:	6863      	ldr	r3, [r4, #4]
   2039e:	1ac0      	subs	r0, r0, r3
   203a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   203a2:	2b00      	cmp	r3, #0
   203a4:	d001      	beq.n	203aa <__sflush_r+0x46>
   203a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   203a8:	1ac0      	subs	r0, r0, r3
   203aa:	0002      	movs	r2, r0
   203ac:	6a21      	ldr	r1, [r4, #32]
   203ae:	2300      	movs	r3, #0
   203b0:	0028      	movs	r0, r5
   203b2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   203b4:	47b8      	blx	r7
   203b6:	89a1      	ldrh	r1, [r4, #12]
   203b8:	1c43      	adds	r3, r0, #1
   203ba:	d106      	bne.n	203ca <__sflush_r+0x66>
   203bc:	682b      	ldr	r3, [r5, #0]
   203be:	2b1d      	cmp	r3, #29
   203c0:	d831      	bhi.n	20426 <__sflush_r+0xc2>
   203c2:	4a2c      	ldr	r2, [pc, #176]	; (20474 <__sflush_r+0x110>)
   203c4:	40da      	lsrs	r2, r3
   203c6:	07d3      	lsls	r3, r2, #31
   203c8:	d52d      	bpl.n	20426 <__sflush_r+0xc2>
   203ca:	2300      	movs	r3, #0
   203cc:	6063      	str	r3, [r4, #4]
   203ce:	6923      	ldr	r3, [r4, #16]
   203d0:	6023      	str	r3, [r4, #0]
   203d2:	04cb      	lsls	r3, r1, #19
   203d4:	d505      	bpl.n	203e2 <__sflush_r+0x7e>
   203d6:	1c43      	adds	r3, r0, #1
   203d8:	d102      	bne.n	203e0 <__sflush_r+0x7c>
   203da:	682b      	ldr	r3, [r5, #0]
   203dc:	2b00      	cmp	r3, #0
   203de:	d100      	bne.n	203e2 <__sflush_r+0x7e>
   203e0:	6560      	str	r0, [r4, #84]	; 0x54
   203e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   203e4:	602e      	str	r6, [r5, #0]
   203e6:	2900      	cmp	r1, #0
   203e8:	d0c8      	beq.n	2037c <__sflush_r+0x18>
   203ea:	0023      	movs	r3, r4
   203ec:	3344      	adds	r3, #68	; 0x44
   203ee:	4299      	cmp	r1, r3
   203f0:	d002      	beq.n	203f8 <__sflush_r+0x94>
   203f2:	0028      	movs	r0, r5
   203f4:	f7ff fc1a 	bl	1fc2c <_free_r>
   203f8:	2000      	movs	r0, #0
   203fa:	6360      	str	r0, [r4, #52]	; 0x34
   203fc:	e7bf      	b.n	2037e <__sflush_r+0x1a>
   203fe:	2301      	movs	r3, #1
   20400:	6a21      	ldr	r1, [r4, #32]
   20402:	0028      	movs	r0, r5
   20404:	47b8      	blx	r7
   20406:	1c43      	adds	r3, r0, #1
   20408:	d1c5      	bne.n	20396 <__sflush_r+0x32>
   2040a:	682b      	ldr	r3, [r5, #0]
   2040c:	2b00      	cmp	r3, #0
   2040e:	d0c2      	beq.n	20396 <__sflush_r+0x32>
   20410:	2b1d      	cmp	r3, #29
   20412:	d001      	beq.n	20418 <__sflush_r+0xb4>
   20414:	2b16      	cmp	r3, #22
   20416:	d101      	bne.n	2041c <__sflush_r+0xb8>
   20418:	602e      	str	r6, [r5, #0]
   2041a:	e7af      	b.n	2037c <__sflush_r+0x18>
   2041c:	2340      	movs	r3, #64	; 0x40
   2041e:	89a2      	ldrh	r2, [r4, #12]
   20420:	4313      	orrs	r3, r2
   20422:	81a3      	strh	r3, [r4, #12]
   20424:	e7ab      	b.n	2037e <__sflush_r+0x1a>
   20426:	2340      	movs	r3, #64	; 0x40
   20428:	430b      	orrs	r3, r1
   2042a:	2001      	movs	r0, #1
   2042c:	81a3      	strh	r3, [r4, #12]
   2042e:	4240      	negs	r0, r0
   20430:	e7a5      	b.n	2037e <__sflush_r+0x1a>
   20432:	690f      	ldr	r7, [r1, #16]
   20434:	2f00      	cmp	r7, #0
   20436:	d0a1      	beq.n	2037c <__sflush_r+0x18>
   20438:	680b      	ldr	r3, [r1, #0]
   2043a:	600f      	str	r7, [r1, #0]
   2043c:	1bdb      	subs	r3, r3, r7
   2043e:	9301      	str	r3, [sp, #4]
   20440:	2300      	movs	r3, #0
   20442:	0792      	lsls	r2, r2, #30
   20444:	d100      	bne.n	20448 <__sflush_r+0xe4>
   20446:	694b      	ldr	r3, [r1, #20]
   20448:	60a3      	str	r3, [r4, #8]
   2044a:	9b01      	ldr	r3, [sp, #4]
   2044c:	2b00      	cmp	r3, #0
   2044e:	dc00      	bgt.n	20452 <__sflush_r+0xee>
   20450:	e794      	b.n	2037c <__sflush_r+0x18>
   20452:	9b01      	ldr	r3, [sp, #4]
   20454:	003a      	movs	r2, r7
   20456:	6a21      	ldr	r1, [r4, #32]
   20458:	0028      	movs	r0, r5
   2045a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   2045c:	47b0      	blx	r6
   2045e:	2800      	cmp	r0, #0
   20460:	dc03      	bgt.n	2046a <__sflush_r+0x106>
   20462:	2340      	movs	r3, #64	; 0x40
   20464:	89a2      	ldrh	r2, [r4, #12]
   20466:	4313      	orrs	r3, r2
   20468:	e7df      	b.n	2042a <__sflush_r+0xc6>
   2046a:	9b01      	ldr	r3, [sp, #4]
   2046c:	183f      	adds	r7, r7, r0
   2046e:	1a1b      	subs	r3, r3, r0
   20470:	9301      	str	r3, [sp, #4]
   20472:	e7ea      	b.n	2044a <__sflush_r+0xe6>
   20474:	20400001 	.word	0x20400001

00020478 <_fflush_r>:
   20478:	690b      	ldr	r3, [r1, #16]
   2047a:	b570      	push	{r4, r5, r6, lr}
   2047c:	0005      	movs	r5, r0
   2047e:	000c      	movs	r4, r1
   20480:	2b00      	cmp	r3, #0
   20482:	d101      	bne.n	20488 <_fflush_r+0x10>
   20484:	2000      	movs	r0, #0
   20486:	bd70      	pop	{r4, r5, r6, pc}
   20488:	2800      	cmp	r0, #0
   2048a:	d004      	beq.n	20496 <_fflush_r+0x1e>
   2048c:	6983      	ldr	r3, [r0, #24]
   2048e:	2b00      	cmp	r3, #0
   20490:	d101      	bne.n	20496 <_fflush_r+0x1e>
   20492:	f000 f85f 	bl	20554 <__sinit>
   20496:	4b0b      	ldr	r3, [pc, #44]	; (204c4 <_fflush_r+0x4c>)
   20498:	429c      	cmp	r4, r3
   2049a:	d109      	bne.n	204b0 <_fflush_r+0x38>
   2049c:	686c      	ldr	r4, [r5, #4]
   2049e:	220c      	movs	r2, #12
   204a0:	5ea3      	ldrsh	r3, [r4, r2]
   204a2:	2b00      	cmp	r3, #0
   204a4:	d0ee      	beq.n	20484 <_fflush_r+0xc>
   204a6:	0021      	movs	r1, r4
   204a8:	0028      	movs	r0, r5
   204aa:	f7ff ff5b 	bl	20364 <__sflush_r>
   204ae:	e7ea      	b.n	20486 <_fflush_r+0xe>
   204b0:	4b05      	ldr	r3, [pc, #20]	; (204c8 <_fflush_r+0x50>)
   204b2:	429c      	cmp	r4, r3
   204b4:	d101      	bne.n	204ba <_fflush_r+0x42>
   204b6:	68ac      	ldr	r4, [r5, #8]
   204b8:	e7f1      	b.n	2049e <_fflush_r+0x26>
   204ba:	4b04      	ldr	r3, [pc, #16]	; (204cc <_fflush_r+0x54>)
   204bc:	429c      	cmp	r4, r3
   204be:	d1ee      	bne.n	2049e <_fflush_r+0x26>
   204c0:	68ec      	ldr	r4, [r5, #12]
   204c2:	e7ec      	b.n	2049e <_fflush_r+0x26>
   204c4:	00023204 	.word	0x00023204
   204c8:	00023224 	.word	0x00023224
   204cc:	000231e4 	.word	0x000231e4

000204d0 <_cleanup_r>:
   204d0:	b510      	push	{r4, lr}
   204d2:	4902      	ldr	r1, [pc, #8]	; (204dc <_cleanup_r+0xc>)
   204d4:	f000 f8b2 	bl	2063c <_fwalk_reent>
   204d8:	bd10      	pop	{r4, pc}
   204da:	46c0      	nop			; (mov r8, r8)
   204dc:	00020479 	.word	0x00020479

000204e0 <std.isra.0>:
   204e0:	2300      	movs	r3, #0
   204e2:	b510      	push	{r4, lr}
   204e4:	0004      	movs	r4, r0
   204e6:	6003      	str	r3, [r0, #0]
   204e8:	6043      	str	r3, [r0, #4]
   204ea:	6083      	str	r3, [r0, #8]
   204ec:	8181      	strh	r1, [r0, #12]
   204ee:	6643      	str	r3, [r0, #100]	; 0x64
   204f0:	81c2      	strh	r2, [r0, #14]
   204f2:	6103      	str	r3, [r0, #16]
   204f4:	6143      	str	r3, [r0, #20]
   204f6:	6183      	str	r3, [r0, #24]
   204f8:	0019      	movs	r1, r3
   204fa:	2208      	movs	r2, #8
   204fc:	305c      	adds	r0, #92	; 0x5c
   204fe:	f7ff fb8c 	bl	1fc1a <memset>
   20502:	4b05      	ldr	r3, [pc, #20]	; (20518 <std.isra.0+0x38>)
   20504:	6224      	str	r4, [r4, #32]
   20506:	6263      	str	r3, [r4, #36]	; 0x24
   20508:	4b04      	ldr	r3, [pc, #16]	; (2051c <std.isra.0+0x3c>)
   2050a:	62a3      	str	r3, [r4, #40]	; 0x28
   2050c:	4b04      	ldr	r3, [pc, #16]	; (20520 <std.isra.0+0x40>)
   2050e:	62e3      	str	r3, [r4, #44]	; 0x2c
   20510:	4b04      	ldr	r3, [pc, #16]	; (20524 <std.isra.0+0x44>)
   20512:	6323      	str	r3, [r4, #48]	; 0x30
   20514:	bd10      	pop	{r4, pc}
   20516:	46c0      	nop			; (mov r8, r8)
   20518:	00020d61 	.word	0x00020d61
   2051c:	00020d89 	.word	0x00020d89
   20520:	00020dc1 	.word	0x00020dc1
   20524:	00020ded 	.word	0x00020ded

00020528 <__sfmoreglue>:
   20528:	b570      	push	{r4, r5, r6, lr}
   2052a:	2568      	movs	r5, #104	; 0x68
   2052c:	1e4a      	subs	r2, r1, #1
   2052e:	4355      	muls	r5, r2
   20530:	000e      	movs	r6, r1
   20532:	0029      	movs	r1, r5
   20534:	3174      	adds	r1, #116	; 0x74
   20536:	f7ff fbc3 	bl	1fcc0 <_malloc_r>
   2053a:	1e04      	subs	r4, r0, #0
   2053c:	d008      	beq.n	20550 <__sfmoreglue+0x28>
   2053e:	2100      	movs	r1, #0
   20540:	002a      	movs	r2, r5
   20542:	6001      	str	r1, [r0, #0]
   20544:	6046      	str	r6, [r0, #4]
   20546:	300c      	adds	r0, #12
   20548:	60a0      	str	r0, [r4, #8]
   2054a:	3268      	adds	r2, #104	; 0x68
   2054c:	f7ff fb65 	bl	1fc1a <memset>
   20550:	0020      	movs	r0, r4
   20552:	bd70      	pop	{r4, r5, r6, pc}

00020554 <__sinit>:
   20554:	6983      	ldr	r3, [r0, #24]
   20556:	b513      	push	{r0, r1, r4, lr}
   20558:	0004      	movs	r4, r0
   2055a:	2b00      	cmp	r3, #0
   2055c:	d128      	bne.n	205b0 <__sinit+0x5c>
   2055e:	6483      	str	r3, [r0, #72]	; 0x48
   20560:	64c3      	str	r3, [r0, #76]	; 0x4c
   20562:	6503      	str	r3, [r0, #80]	; 0x50
   20564:	4b13      	ldr	r3, [pc, #76]	; (205b4 <__sinit+0x60>)
   20566:	4a14      	ldr	r2, [pc, #80]	; (205b8 <__sinit+0x64>)
   20568:	681b      	ldr	r3, [r3, #0]
   2056a:	6282      	str	r2, [r0, #40]	; 0x28
   2056c:	9301      	str	r3, [sp, #4]
   2056e:	4298      	cmp	r0, r3
   20570:	d101      	bne.n	20576 <__sinit+0x22>
   20572:	2301      	movs	r3, #1
   20574:	6183      	str	r3, [r0, #24]
   20576:	0020      	movs	r0, r4
   20578:	f000 f820 	bl	205bc <__sfp>
   2057c:	6060      	str	r0, [r4, #4]
   2057e:	0020      	movs	r0, r4
   20580:	f000 f81c 	bl	205bc <__sfp>
   20584:	60a0      	str	r0, [r4, #8]
   20586:	0020      	movs	r0, r4
   20588:	f000 f818 	bl	205bc <__sfp>
   2058c:	2200      	movs	r2, #0
   2058e:	60e0      	str	r0, [r4, #12]
   20590:	2104      	movs	r1, #4
   20592:	6860      	ldr	r0, [r4, #4]
   20594:	f7ff ffa4 	bl	204e0 <std.isra.0>
   20598:	2201      	movs	r2, #1
   2059a:	2109      	movs	r1, #9
   2059c:	68a0      	ldr	r0, [r4, #8]
   2059e:	f7ff ff9f 	bl	204e0 <std.isra.0>
   205a2:	2202      	movs	r2, #2
   205a4:	2112      	movs	r1, #18
   205a6:	68e0      	ldr	r0, [r4, #12]
   205a8:	f7ff ff9a 	bl	204e0 <std.isra.0>
   205ac:	2301      	movs	r3, #1
   205ae:	61a3      	str	r3, [r4, #24]
   205b0:	bd13      	pop	{r0, r1, r4, pc}
   205b2:	46c0      	nop			; (mov r8, r8)
   205b4:	000231e0 	.word	0x000231e0
   205b8:	000204d1 	.word	0x000204d1

000205bc <__sfp>:
   205bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   205be:	4b1e      	ldr	r3, [pc, #120]	; (20638 <__sfp+0x7c>)
   205c0:	0007      	movs	r7, r0
   205c2:	681e      	ldr	r6, [r3, #0]
   205c4:	69b3      	ldr	r3, [r6, #24]
   205c6:	2b00      	cmp	r3, #0
   205c8:	d102      	bne.n	205d0 <__sfp+0x14>
   205ca:	0030      	movs	r0, r6
   205cc:	f7ff ffc2 	bl	20554 <__sinit>
   205d0:	3648      	adds	r6, #72	; 0x48
   205d2:	68b4      	ldr	r4, [r6, #8]
   205d4:	6873      	ldr	r3, [r6, #4]
   205d6:	3b01      	subs	r3, #1
   205d8:	d504      	bpl.n	205e4 <__sfp+0x28>
   205da:	6833      	ldr	r3, [r6, #0]
   205dc:	2b00      	cmp	r3, #0
   205de:	d007      	beq.n	205f0 <__sfp+0x34>
   205e0:	6836      	ldr	r6, [r6, #0]
   205e2:	e7f6      	b.n	205d2 <__sfp+0x16>
   205e4:	220c      	movs	r2, #12
   205e6:	5ea5      	ldrsh	r5, [r4, r2]
   205e8:	2d00      	cmp	r5, #0
   205ea:	d00d      	beq.n	20608 <__sfp+0x4c>
   205ec:	3468      	adds	r4, #104	; 0x68
   205ee:	e7f2      	b.n	205d6 <__sfp+0x1a>
   205f0:	2104      	movs	r1, #4
   205f2:	0038      	movs	r0, r7
   205f4:	f7ff ff98 	bl	20528 <__sfmoreglue>
   205f8:	6030      	str	r0, [r6, #0]
   205fa:	2800      	cmp	r0, #0
   205fc:	d1f0      	bne.n	205e0 <__sfp+0x24>
   205fe:	230c      	movs	r3, #12
   20600:	0004      	movs	r4, r0
   20602:	603b      	str	r3, [r7, #0]
   20604:	0020      	movs	r0, r4
   20606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20608:	2301      	movs	r3, #1
   2060a:	0020      	movs	r0, r4
   2060c:	425b      	negs	r3, r3
   2060e:	81e3      	strh	r3, [r4, #14]
   20610:	3302      	adds	r3, #2
   20612:	81a3      	strh	r3, [r4, #12]
   20614:	6665      	str	r5, [r4, #100]	; 0x64
   20616:	6025      	str	r5, [r4, #0]
   20618:	60a5      	str	r5, [r4, #8]
   2061a:	6065      	str	r5, [r4, #4]
   2061c:	6125      	str	r5, [r4, #16]
   2061e:	6165      	str	r5, [r4, #20]
   20620:	61a5      	str	r5, [r4, #24]
   20622:	2208      	movs	r2, #8
   20624:	0029      	movs	r1, r5
   20626:	305c      	adds	r0, #92	; 0x5c
   20628:	f7ff faf7 	bl	1fc1a <memset>
   2062c:	6365      	str	r5, [r4, #52]	; 0x34
   2062e:	63a5      	str	r5, [r4, #56]	; 0x38
   20630:	64a5      	str	r5, [r4, #72]	; 0x48
   20632:	64e5      	str	r5, [r4, #76]	; 0x4c
   20634:	e7e6      	b.n	20604 <__sfp+0x48>
   20636:	46c0      	nop			; (mov r8, r8)
   20638:	000231e0 	.word	0x000231e0

0002063c <_fwalk_reent>:
   2063c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2063e:	0004      	movs	r4, r0
   20640:	0007      	movs	r7, r0
   20642:	2600      	movs	r6, #0
   20644:	9101      	str	r1, [sp, #4]
   20646:	3448      	adds	r4, #72	; 0x48
   20648:	2c00      	cmp	r4, #0
   2064a:	d101      	bne.n	20650 <_fwalk_reent+0x14>
   2064c:	0030      	movs	r0, r6
   2064e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   20650:	6863      	ldr	r3, [r4, #4]
   20652:	68a5      	ldr	r5, [r4, #8]
   20654:	9300      	str	r3, [sp, #0]
   20656:	9b00      	ldr	r3, [sp, #0]
   20658:	3b01      	subs	r3, #1
   2065a:	9300      	str	r3, [sp, #0]
   2065c:	d501      	bpl.n	20662 <_fwalk_reent+0x26>
   2065e:	6824      	ldr	r4, [r4, #0]
   20660:	e7f2      	b.n	20648 <_fwalk_reent+0xc>
   20662:	89ab      	ldrh	r3, [r5, #12]
   20664:	2b01      	cmp	r3, #1
   20666:	d908      	bls.n	2067a <_fwalk_reent+0x3e>
   20668:	220e      	movs	r2, #14
   2066a:	5eab      	ldrsh	r3, [r5, r2]
   2066c:	3301      	adds	r3, #1
   2066e:	d004      	beq.n	2067a <_fwalk_reent+0x3e>
   20670:	0029      	movs	r1, r5
   20672:	0038      	movs	r0, r7
   20674:	9b01      	ldr	r3, [sp, #4]
   20676:	4798      	blx	r3
   20678:	4306      	orrs	r6, r0
   2067a:	3568      	adds	r5, #104	; 0x68
   2067c:	e7eb      	b.n	20656 <_fwalk_reent+0x1a>

0002067e <__locale_ctype_ptr_l>:
   2067e:	30ec      	adds	r0, #236	; 0xec
   20680:	6800      	ldr	r0, [r0, #0]
   20682:	4770      	bx	lr

00020684 <__swhatbuf_r>:
   20684:	b570      	push	{r4, r5, r6, lr}
   20686:	000e      	movs	r6, r1
   20688:	001d      	movs	r5, r3
   2068a:	230e      	movs	r3, #14
   2068c:	5ec9      	ldrsh	r1, [r1, r3]
   2068e:	b090      	sub	sp, #64	; 0x40
   20690:	0014      	movs	r4, r2
   20692:	2900      	cmp	r1, #0
   20694:	da07      	bge.n	206a6 <__swhatbuf_r+0x22>
   20696:	2300      	movs	r3, #0
   20698:	602b      	str	r3, [r5, #0]
   2069a:	89b3      	ldrh	r3, [r6, #12]
   2069c:	061b      	lsls	r3, r3, #24
   2069e:	d411      	bmi.n	206c4 <__swhatbuf_r+0x40>
   206a0:	2380      	movs	r3, #128	; 0x80
   206a2:	00db      	lsls	r3, r3, #3
   206a4:	e00f      	b.n	206c6 <__swhatbuf_r+0x42>
   206a6:	aa01      	add	r2, sp, #4
   206a8:	f000 fbe6 	bl	20e78 <_fstat_r>
   206ac:	2800      	cmp	r0, #0
   206ae:	dbf2      	blt.n	20696 <__swhatbuf_r+0x12>
   206b0:	22f0      	movs	r2, #240	; 0xf0
   206b2:	9b02      	ldr	r3, [sp, #8]
   206b4:	0212      	lsls	r2, r2, #8
   206b6:	4013      	ands	r3, r2
   206b8:	4a05      	ldr	r2, [pc, #20]	; (206d0 <__swhatbuf_r+0x4c>)
   206ba:	189b      	adds	r3, r3, r2
   206bc:	425a      	negs	r2, r3
   206be:	4153      	adcs	r3, r2
   206c0:	602b      	str	r3, [r5, #0]
   206c2:	e7ed      	b.n	206a0 <__swhatbuf_r+0x1c>
   206c4:	2340      	movs	r3, #64	; 0x40
   206c6:	2000      	movs	r0, #0
   206c8:	6023      	str	r3, [r4, #0]
   206ca:	b010      	add	sp, #64	; 0x40
   206cc:	bd70      	pop	{r4, r5, r6, pc}
   206ce:	46c0      	nop			; (mov r8, r8)
   206d0:	ffffe000 	.word	0xffffe000

000206d4 <__smakebuf_r>:
   206d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   206d6:	2602      	movs	r6, #2
   206d8:	898b      	ldrh	r3, [r1, #12]
   206da:	0005      	movs	r5, r0
   206dc:	000c      	movs	r4, r1
   206de:	4233      	tst	r3, r6
   206e0:	d006      	beq.n	206f0 <__smakebuf_r+0x1c>
   206e2:	0023      	movs	r3, r4
   206e4:	3347      	adds	r3, #71	; 0x47
   206e6:	6023      	str	r3, [r4, #0]
   206e8:	6123      	str	r3, [r4, #16]
   206ea:	2301      	movs	r3, #1
   206ec:	6163      	str	r3, [r4, #20]
   206ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   206f0:	ab01      	add	r3, sp, #4
   206f2:	466a      	mov	r2, sp
   206f4:	f7ff ffc6 	bl	20684 <__swhatbuf_r>
   206f8:	9900      	ldr	r1, [sp, #0]
   206fa:	0007      	movs	r7, r0
   206fc:	0028      	movs	r0, r5
   206fe:	f7ff fadf 	bl	1fcc0 <_malloc_r>
   20702:	2800      	cmp	r0, #0
   20704:	d108      	bne.n	20718 <__smakebuf_r+0x44>
   20706:	220c      	movs	r2, #12
   20708:	5ea3      	ldrsh	r3, [r4, r2]
   2070a:	059a      	lsls	r2, r3, #22
   2070c:	d4ef      	bmi.n	206ee <__smakebuf_r+0x1a>
   2070e:	2203      	movs	r2, #3
   20710:	4393      	bics	r3, r2
   20712:	431e      	orrs	r6, r3
   20714:	81a6      	strh	r6, [r4, #12]
   20716:	e7e4      	b.n	206e2 <__smakebuf_r+0xe>
   20718:	4b0f      	ldr	r3, [pc, #60]	; (20758 <__smakebuf_r+0x84>)
   2071a:	62ab      	str	r3, [r5, #40]	; 0x28
   2071c:	2380      	movs	r3, #128	; 0x80
   2071e:	89a2      	ldrh	r2, [r4, #12]
   20720:	6020      	str	r0, [r4, #0]
   20722:	4313      	orrs	r3, r2
   20724:	81a3      	strh	r3, [r4, #12]
   20726:	9b00      	ldr	r3, [sp, #0]
   20728:	6120      	str	r0, [r4, #16]
   2072a:	6163      	str	r3, [r4, #20]
   2072c:	9b01      	ldr	r3, [sp, #4]
   2072e:	2b00      	cmp	r3, #0
   20730:	d00d      	beq.n	2074e <__smakebuf_r+0x7a>
   20732:	230e      	movs	r3, #14
   20734:	5ee1      	ldrsh	r1, [r4, r3]
   20736:	0028      	movs	r0, r5
   20738:	f000 fbb0 	bl	20e9c <_isatty_r>
   2073c:	2800      	cmp	r0, #0
   2073e:	d006      	beq.n	2074e <__smakebuf_r+0x7a>
   20740:	2203      	movs	r2, #3
   20742:	89a3      	ldrh	r3, [r4, #12]
   20744:	4393      	bics	r3, r2
   20746:	001a      	movs	r2, r3
   20748:	2301      	movs	r3, #1
   2074a:	4313      	orrs	r3, r2
   2074c:	81a3      	strh	r3, [r4, #12]
   2074e:	89a0      	ldrh	r0, [r4, #12]
   20750:	4338      	orrs	r0, r7
   20752:	81a0      	strh	r0, [r4, #12]
   20754:	e7cb      	b.n	206ee <__smakebuf_r+0x1a>
   20756:	46c0      	nop			; (mov r8, r8)
   20758:	000204d1 	.word	0x000204d1

0002075c <__ascii_mbtowc>:
   2075c:	b082      	sub	sp, #8
   2075e:	2900      	cmp	r1, #0
   20760:	d100      	bne.n	20764 <__ascii_mbtowc+0x8>
   20762:	a901      	add	r1, sp, #4
   20764:	1e10      	subs	r0, r2, #0
   20766:	d006      	beq.n	20776 <__ascii_mbtowc+0x1a>
   20768:	2b00      	cmp	r3, #0
   2076a:	d006      	beq.n	2077a <__ascii_mbtowc+0x1e>
   2076c:	7813      	ldrb	r3, [r2, #0]
   2076e:	600b      	str	r3, [r1, #0]
   20770:	7810      	ldrb	r0, [r2, #0]
   20772:	1e43      	subs	r3, r0, #1
   20774:	4198      	sbcs	r0, r3
   20776:	b002      	add	sp, #8
   20778:	4770      	bx	lr
   2077a:	2002      	movs	r0, #2
   2077c:	4240      	negs	r0, r0
   2077e:	e7fa      	b.n	20776 <__ascii_mbtowc+0x1a>

00020780 <__malloc_lock>:
   20780:	4770      	bx	lr

00020782 <__malloc_unlock>:
   20782:	4770      	bx	lr

00020784 <__ssputs_r>:
   20784:	b5f0      	push	{r4, r5, r6, r7, lr}
   20786:	688e      	ldr	r6, [r1, #8]
   20788:	b085      	sub	sp, #20
   2078a:	0007      	movs	r7, r0
   2078c:	000c      	movs	r4, r1
   2078e:	9203      	str	r2, [sp, #12]
   20790:	9301      	str	r3, [sp, #4]
   20792:	429e      	cmp	r6, r3
   20794:	d839      	bhi.n	2080a <__ssputs_r+0x86>
   20796:	2390      	movs	r3, #144	; 0x90
   20798:	898a      	ldrh	r2, [r1, #12]
   2079a:	00db      	lsls	r3, r3, #3
   2079c:	421a      	tst	r2, r3
   2079e:	d034      	beq.n	2080a <__ssputs_r+0x86>
   207a0:	2503      	movs	r5, #3
   207a2:	6909      	ldr	r1, [r1, #16]
   207a4:	6823      	ldr	r3, [r4, #0]
   207a6:	1a5b      	subs	r3, r3, r1
   207a8:	9302      	str	r3, [sp, #8]
   207aa:	6963      	ldr	r3, [r4, #20]
   207ac:	9802      	ldr	r0, [sp, #8]
   207ae:	435d      	muls	r5, r3
   207b0:	0feb      	lsrs	r3, r5, #31
   207b2:	195d      	adds	r5, r3, r5
   207b4:	9b01      	ldr	r3, [sp, #4]
   207b6:	106d      	asrs	r5, r5, #1
   207b8:	3301      	adds	r3, #1
   207ba:	181b      	adds	r3, r3, r0
   207bc:	42ab      	cmp	r3, r5
   207be:	d900      	bls.n	207c2 <__ssputs_r+0x3e>
   207c0:	001d      	movs	r5, r3
   207c2:	0553      	lsls	r3, r2, #21
   207c4:	d532      	bpl.n	2082c <__ssputs_r+0xa8>
   207c6:	0029      	movs	r1, r5
   207c8:	0038      	movs	r0, r7
   207ca:	f7ff fa79 	bl	1fcc0 <_malloc_r>
   207ce:	1e06      	subs	r6, r0, #0
   207d0:	d109      	bne.n	207e6 <__ssputs_r+0x62>
   207d2:	230c      	movs	r3, #12
   207d4:	603b      	str	r3, [r7, #0]
   207d6:	2340      	movs	r3, #64	; 0x40
   207d8:	2001      	movs	r0, #1
   207da:	89a2      	ldrh	r2, [r4, #12]
   207dc:	4240      	negs	r0, r0
   207de:	4313      	orrs	r3, r2
   207e0:	81a3      	strh	r3, [r4, #12]
   207e2:	b005      	add	sp, #20
   207e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   207e6:	9a02      	ldr	r2, [sp, #8]
   207e8:	6921      	ldr	r1, [r4, #16]
   207ea:	f7ff f9fb 	bl	1fbe4 <memcpy>
   207ee:	89a3      	ldrh	r3, [r4, #12]
   207f0:	4a14      	ldr	r2, [pc, #80]	; (20844 <__ssputs_r+0xc0>)
   207f2:	401a      	ands	r2, r3
   207f4:	2380      	movs	r3, #128	; 0x80
   207f6:	4313      	orrs	r3, r2
   207f8:	81a3      	strh	r3, [r4, #12]
   207fa:	9b02      	ldr	r3, [sp, #8]
   207fc:	6126      	str	r6, [r4, #16]
   207fe:	18f6      	adds	r6, r6, r3
   20800:	6026      	str	r6, [r4, #0]
   20802:	6165      	str	r5, [r4, #20]
   20804:	9e01      	ldr	r6, [sp, #4]
   20806:	1aed      	subs	r5, r5, r3
   20808:	60a5      	str	r5, [r4, #8]
   2080a:	9b01      	ldr	r3, [sp, #4]
   2080c:	42b3      	cmp	r3, r6
   2080e:	d200      	bcs.n	20812 <__ssputs_r+0x8e>
   20810:	001e      	movs	r6, r3
   20812:	0032      	movs	r2, r6
   20814:	9903      	ldr	r1, [sp, #12]
   20816:	6820      	ldr	r0, [r4, #0]
   20818:	f7ff f9ed 	bl	1fbf6 <memmove>
   2081c:	68a3      	ldr	r3, [r4, #8]
   2081e:	2000      	movs	r0, #0
   20820:	1b9b      	subs	r3, r3, r6
   20822:	60a3      	str	r3, [r4, #8]
   20824:	6823      	ldr	r3, [r4, #0]
   20826:	199e      	adds	r6, r3, r6
   20828:	6026      	str	r6, [r4, #0]
   2082a:	e7da      	b.n	207e2 <__ssputs_r+0x5e>
   2082c:	002a      	movs	r2, r5
   2082e:	0038      	movs	r0, r7
   20830:	f000 fb65 	bl	20efe <_realloc_r>
   20834:	1e06      	subs	r6, r0, #0
   20836:	d1e0      	bne.n	207fa <__ssputs_r+0x76>
   20838:	6921      	ldr	r1, [r4, #16]
   2083a:	0038      	movs	r0, r7
   2083c:	f7ff f9f6 	bl	1fc2c <_free_r>
   20840:	e7c7      	b.n	207d2 <__ssputs_r+0x4e>
   20842:	46c0      	nop			; (mov r8, r8)
   20844:	fffffb7f 	.word	0xfffffb7f

00020848 <_svfiprintf_r>:
   20848:	b5f0      	push	{r4, r5, r6, r7, lr}
   2084a:	b09f      	sub	sp, #124	; 0x7c
   2084c:	9002      	str	r0, [sp, #8]
   2084e:	9305      	str	r3, [sp, #20]
   20850:	898b      	ldrh	r3, [r1, #12]
   20852:	000f      	movs	r7, r1
   20854:	0016      	movs	r6, r2
   20856:	061b      	lsls	r3, r3, #24
   20858:	d511      	bpl.n	2087e <_svfiprintf_r+0x36>
   2085a:	690b      	ldr	r3, [r1, #16]
   2085c:	2b00      	cmp	r3, #0
   2085e:	d10e      	bne.n	2087e <_svfiprintf_r+0x36>
   20860:	2140      	movs	r1, #64	; 0x40
   20862:	f7ff fa2d 	bl	1fcc0 <_malloc_r>
   20866:	6038      	str	r0, [r7, #0]
   20868:	6138      	str	r0, [r7, #16]
   2086a:	2800      	cmp	r0, #0
   2086c:	d105      	bne.n	2087a <_svfiprintf_r+0x32>
   2086e:	230c      	movs	r3, #12
   20870:	9a02      	ldr	r2, [sp, #8]
   20872:	3801      	subs	r0, #1
   20874:	6013      	str	r3, [r2, #0]
   20876:	b01f      	add	sp, #124	; 0x7c
   20878:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2087a:	2340      	movs	r3, #64	; 0x40
   2087c:	617b      	str	r3, [r7, #20]
   2087e:	2300      	movs	r3, #0
   20880:	ad06      	add	r5, sp, #24
   20882:	616b      	str	r3, [r5, #20]
   20884:	3320      	adds	r3, #32
   20886:	766b      	strb	r3, [r5, #25]
   20888:	3310      	adds	r3, #16
   2088a:	76ab      	strb	r3, [r5, #26]
   2088c:	0034      	movs	r4, r6
   2088e:	7823      	ldrb	r3, [r4, #0]
   20890:	2b00      	cmp	r3, #0
   20892:	d147      	bne.n	20924 <_svfiprintf_r+0xdc>
   20894:	1ba3      	subs	r3, r4, r6
   20896:	9304      	str	r3, [sp, #16]
   20898:	d00d      	beq.n	208b6 <_svfiprintf_r+0x6e>
   2089a:	1ba3      	subs	r3, r4, r6
   2089c:	0032      	movs	r2, r6
   2089e:	0039      	movs	r1, r7
   208a0:	9802      	ldr	r0, [sp, #8]
   208a2:	f7ff ff6f 	bl	20784 <__ssputs_r>
   208a6:	1c43      	adds	r3, r0, #1
   208a8:	d100      	bne.n	208ac <_svfiprintf_r+0x64>
   208aa:	e0b5      	b.n	20a18 <_svfiprintf_r+0x1d0>
   208ac:	696a      	ldr	r2, [r5, #20]
   208ae:	9b04      	ldr	r3, [sp, #16]
   208b0:	4694      	mov	ip, r2
   208b2:	4463      	add	r3, ip
   208b4:	616b      	str	r3, [r5, #20]
   208b6:	7823      	ldrb	r3, [r4, #0]
   208b8:	2b00      	cmp	r3, #0
   208ba:	d100      	bne.n	208be <_svfiprintf_r+0x76>
   208bc:	e0ac      	b.n	20a18 <_svfiprintf_r+0x1d0>
   208be:	2201      	movs	r2, #1
   208c0:	2300      	movs	r3, #0
   208c2:	4252      	negs	r2, r2
   208c4:	606a      	str	r2, [r5, #4]
   208c6:	a902      	add	r1, sp, #8
   208c8:	3254      	adds	r2, #84	; 0x54
   208ca:	1852      	adds	r2, r2, r1
   208cc:	3401      	adds	r4, #1
   208ce:	602b      	str	r3, [r5, #0]
   208d0:	60eb      	str	r3, [r5, #12]
   208d2:	60ab      	str	r3, [r5, #8]
   208d4:	7013      	strb	r3, [r2, #0]
   208d6:	65ab      	str	r3, [r5, #88]	; 0x58
   208d8:	4e58      	ldr	r6, [pc, #352]	; (20a3c <_svfiprintf_r+0x1f4>)
   208da:	2205      	movs	r2, #5
   208dc:	7821      	ldrb	r1, [r4, #0]
   208de:	0030      	movs	r0, r6
   208e0:	f000 fb02 	bl	20ee8 <memchr>
   208e4:	1c62      	adds	r2, r4, #1
   208e6:	2800      	cmp	r0, #0
   208e8:	d120      	bne.n	2092c <_svfiprintf_r+0xe4>
   208ea:	6829      	ldr	r1, [r5, #0]
   208ec:	06cb      	lsls	r3, r1, #27
   208ee:	d504      	bpl.n	208fa <_svfiprintf_r+0xb2>
   208f0:	2353      	movs	r3, #83	; 0x53
   208f2:	ae02      	add	r6, sp, #8
   208f4:	3020      	adds	r0, #32
   208f6:	199b      	adds	r3, r3, r6
   208f8:	7018      	strb	r0, [r3, #0]
   208fa:	070b      	lsls	r3, r1, #28
   208fc:	d504      	bpl.n	20908 <_svfiprintf_r+0xc0>
   208fe:	2353      	movs	r3, #83	; 0x53
   20900:	202b      	movs	r0, #43	; 0x2b
   20902:	ae02      	add	r6, sp, #8
   20904:	199b      	adds	r3, r3, r6
   20906:	7018      	strb	r0, [r3, #0]
   20908:	7823      	ldrb	r3, [r4, #0]
   2090a:	2b2a      	cmp	r3, #42	; 0x2a
   2090c:	d016      	beq.n	2093c <_svfiprintf_r+0xf4>
   2090e:	2000      	movs	r0, #0
   20910:	210a      	movs	r1, #10
   20912:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20914:	7822      	ldrb	r2, [r4, #0]
   20916:	3a30      	subs	r2, #48	; 0x30
   20918:	2a09      	cmp	r2, #9
   2091a:	d955      	bls.n	209c8 <_svfiprintf_r+0x180>
   2091c:	2800      	cmp	r0, #0
   2091e:	d015      	beq.n	2094c <_svfiprintf_r+0x104>
   20920:	9309      	str	r3, [sp, #36]	; 0x24
   20922:	e013      	b.n	2094c <_svfiprintf_r+0x104>
   20924:	2b25      	cmp	r3, #37	; 0x25
   20926:	d0b5      	beq.n	20894 <_svfiprintf_r+0x4c>
   20928:	3401      	adds	r4, #1
   2092a:	e7b0      	b.n	2088e <_svfiprintf_r+0x46>
   2092c:	2301      	movs	r3, #1
   2092e:	1b80      	subs	r0, r0, r6
   20930:	4083      	lsls	r3, r0
   20932:	6829      	ldr	r1, [r5, #0]
   20934:	0014      	movs	r4, r2
   20936:	430b      	orrs	r3, r1
   20938:	602b      	str	r3, [r5, #0]
   2093a:	e7cd      	b.n	208d8 <_svfiprintf_r+0x90>
   2093c:	9b05      	ldr	r3, [sp, #20]
   2093e:	1d18      	adds	r0, r3, #4
   20940:	681b      	ldr	r3, [r3, #0]
   20942:	9005      	str	r0, [sp, #20]
   20944:	2b00      	cmp	r3, #0
   20946:	db39      	blt.n	209bc <_svfiprintf_r+0x174>
   20948:	9309      	str	r3, [sp, #36]	; 0x24
   2094a:	0014      	movs	r4, r2
   2094c:	7823      	ldrb	r3, [r4, #0]
   2094e:	2b2e      	cmp	r3, #46	; 0x2e
   20950:	d10b      	bne.n	2096a <_svfiprintf_r+0x122>
   20952:	7863      	ldrb	r3, [r4, #1]
   20954:	1c62      	adds	r2, r4, #1
   20956:	2b2a      	cmp	r3, #42	; 0x2a
   20958:	d13e      	bne.n	209d8 <_svfiprintf_r+0x190>
   2095a:	9b05      	ldr	r3, [sp, #20]
   2095c:	3402      	adds	r4, #2
   2095e:	1d1a      	adds	r2, r3, #4
   20960:	681b      	ldr	r3, [r3, #0]
   20962:	9205      	str	r2, [sp, #20]
   20964:	2b00      	cmp	r3, #0
   20966:	db34      	blt.n	209d2 <_svfiprintf_r+0x18a>
   20968:	9307      	str	r3, [sp, #28]
   2096a:	4e35      	ldr	r6, [pc, #212]	; (20a40 <_svfiprintf_r+0x1f8>)
   2096c:	7821      	ldrb	r1, [r4, #0]
   2096e:	2203      	movs	r2, #3
   20970:	0030      	movs	r0, r6
   20972:	f000 fab9 	bl	20ee8 <memchr>
   20976:	2800      	cmp	r0, #0
   20978:	d006      	beq.n	20988 <_svfiprintf_r+0x140>
   2097a:	2340      	movs	r3, #64	; 0x40
   2097c:	1b80      	subs	r0, r0, r6
   2097e:	4083      	lsls	r3, r0
   20980:	682a      	ldr	r2, [r5, #0]
   20982:	3401      	adds	r4, #1
   20984:	4313      	orrs	r3, r2
   20986:	602b      	str	r3, [r5, #0]
   20988:	7821      	ldrb	r1, [r4, #0]
   2098a:	2206      	movs	r2, #6
   2098c:	482d      	ldr	r0, [pc, #180]	; (20a44 <_svfiprintf_r+0x1fc>)
   2098e:	1c66      	adds	r6, r4, #1
   20990:	7629      	strb	r1, [r5, #24]
   20992:	f000 faa9 	bl	20ee8 <memchr>
   20996:	2800      	cmp	r0, #0
   20998:	d046      	beq.n	20a28 <_svfiprintf_r+0x1e0>
   2099a:	4b2b      	ldr	r3, [pc, #172]	; (20a48 <_svfiprintf_r+0x200>)
   2099c:	2b00      	cmp	r3, #0
   2099e:	d12f      	bne.n	20a00 <_svfiprintf_r+0x1b8>
   209a0:	6829      	ldr	r1, [r5, #0]
   209a2:	9b05      	ldr	r3, [sp, #20]
   209a4:	2207      	movs	r2, #7
   209a6:	05c9      	lsls	r1, r1, #23
   209a8:	d528      	bpl.n	209fc <_svfiprintf_r+0x1b4>
   209aa:	189b      	adds	r3, r3, r2
   209ac:	4393      	bics	r3, r2
   209ae:	3308      	adds	r3, #8
   209b0:	9305      	str	r3, [sp, #20]
   209b2:	696b      	ldr	r3, [r5, #20]
   209b4:	9a03      	ldr	r2, [sp, #12]
   209b6:	189b      	adds	r3, r3, r2
   209b8:	616b      	str	r3, [r5, #20]
   209ba:	e767      	b.n	2088c <_svfiprintf_r+0x44>
   209bc:	425b      	negs	r3, r3
   209be:	60eb      	str	r3, [r5, #12]
   209c0:	2302      	movs	r3, #2
   209c2:	430b      	orrs	r3, r1
   209c4:	602b      	str	r3, [r5, #0]
   209c6:	e7c0      	b.n	2094a <_svfiprintf_r+0x102>
   209c8:	434b      	muls	r3, r1
   209ca:	3401      	adds	r4, #1
   209cc:	189b      	adds	r3, r3, r2
   209ce:	2001      	movs	r0, #1
   209d0:	e7a0      	b.n	20914 <_svfiprintf_r+0xcc>
   209d2:	2301      	movs	r3, #1
   209d4:	425b      	negs	r3, r3
   209d6:	e7c7      	b.n	20968 <_svfiprintf_r+0x120>
   209d8:	2300      	movs	r3, #0
   209da:	0014      	movs	r4, r2
   209dc:	200a      	movs	r0, #10
   209de:	001a      	movs	r2, r3
   209e0:	606b      	str	r3, [r5, #4]
   209e2:	7821      	ldrb	r1, [r4, #0]
   209e4:	3930      	subs	r1, #48	; 0x30
   209e6:	2909      	cmp	r1, #9
   209e8:	d903      	bls.n	209f2 <_svfiprintf_r+0x1aa>
   209ea:	2b00      	cmp	r3, #0
   209ec:	d0bd      	beq.n	2096a <_svfiprintf_r+0x122>
   209ee:	9207      	str	r2, [sp, #28]
   209f0:	e7bb      	b.n	2096a <_svfiprintf_r+0x122>
   209f2:	4342      	muls	r2, r0
   209f4:	3401      	adds	r4, #1
   209f6:	1852      	adds	r2, r2, r1
   209f8:	2301      	movs	r3, #1
   209fa:	e7f2      	b.n	209e2 <_svfiprintf_r+0x19a>
   209fc:	3307      	adds	r3, #7
   209fe:	e7d5      	b.n	209ac <_svfiprintf_r+0x164>
   20a00:	ab05      	add	r3, sp, #20
   20a02:	9300      	str	r3, [sp, #0]
   20a04:	003a      	movs	r2, r7
   20a06:	4b11      	ldr	r3, [pc, #68]	; (20a4c <_svfiprintf_r+0x204>)
   20a08:	0029      	movs	r1, r5
   20a0a:	9802      	ldr	r0, [sp, #8]
   20a0c:	e000      	b.n	20a10 <_svfiprintf_r+0x1c8>
   20a0e:	bf00      	nop
   20a10:	9003      	str	r0, [sp, #12]
   20a12:	9b03      	ldr	r3, [sp, #12]
   20a14:	3301      	adds	r3, #1
   20a16:	d1cc      	bne.n	209b2 <_svfiprintf_r+0x16a>
   20a18:	89bb      	ldrh	r3, [r7, #12]
   20a1a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   20a1c:	065b      	lsls	r3, r3, #25
   20a1e:	d400      	bmi.n	20a22 <_svfiprintf_r+0x1da>
   20a20:	e729      	b.n	20876 <_svfiprintf_r+0x2e>
   20a22:	2001      	movs	r0, #1
   20a24:	4240      	negs	r0, r0
   20a26:	e726      	b.n	20876 <_svfiprintf_r+0x2e>
   20a28:	ab05      	add	r3, sp, #20
   20a2a:	9300      	str	r3, [sp, #0]
   20a2c:	003a      	movs	r2, r7
   20a2e:	4b07      	ldr	r3, [pc, #28]	; (20a4c <_svfiprintf_r+0x204>)
   20a30:	0029      	movs	r1, r5
   20a32:	9802      	ldr	r0, [sp, #8]
   20a34:	f000 f87a 	bl	20b2c <_printf_i>
   20a38:	e7ea      	b.n	20a10 <_svfiprintf_r+0x1c8>
   20a3a:	46c0      	nop			; (mov r8, r8)
   20a3c:	0002324e 	.word	0x0002324e
   20a40:	00023254 	.word	0x00023254
   20a44:	00023258 	.word	0x00023258
   20a48:	00000000 	.word	0x00000000
   20a4c:	00020785 	.word	0x00020785

00020a50 <_printf_common>:
   20a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20a52:	0015      	movs	r5, r2
   20a54:	9301      	str	r3, [sp, #4]
   20a56:	688a      	ldr	r2, [r1, #8]
   20a58:	690b      	ldr	r3, [r1, #16]
   20a5a:	9000      	str	r0, [sp, #0]
   20a5c:	000c      	movs	r4, r1
   20a5e:	4293      	cmp	r3, r2
   20a60:	da00      	bge.n	20a64 <_printf_common+0x14>
   20a62:	0013      	movs	r3, r2
   20a64:	0022      	movs	r2, r4
   20a66:	602b      	str	r3, [r5, #0]
   20a68:	3243      	adds	r2, #67	; 0x43
   20a6a:	7812      	ldrb	r2, [r2, #0]
   20a6c:	2a00      	cmp	r2, #0
   20a6e:	d001      	beq.n	20a74 <_printf_common+0x24>
   20a70:	3301      	adds	r3, #1
   20a72:	602b      	str	r3, [r5, #0]
   20a74:	6823      	ldr	r3, [r4, #0]
   20a76:	069b      	lsls	r3, r3, #26
   20a78:	d502      	bpl.n	20a80 <_printf_common+0x30>
   20a7a:	682b      	ldr	r3, [r5, #0]
   20a7c:	3302      	adds	r3, #2
   20a7e:	602b      	str	r3, [r5, #0]
   20a80:	2706      	movs	r7, #6
   20a82:	6823      	ldr	r3, [r4, #0]
   20a84:	401f      	ands	r7, r3
   20a86:	d027      	beq.n	20ad8 <_printf_common+0x88>
   20a88:	0023      	movs	r3, r4
   20a8a:	3343      	adds	r3, #67	; 0x43
   20a8c:	781b      	ldrb	r3, [r3, #0]
   20a8e:	1e5a      	subs	r2, r3, #1
   20a90:	4193      	sbcs	r3, r2
   20a92:	6822      	ldr	r2, [r4, #0]
   20a94:	0692      	lsls	r2, r2, #26
   20a96:	d430      	bmi.n	20afa <_printf_common+0xaa>
   20a98:	0022      	movs	r2, r4
   20a9a:	9901      	ldr	r1, [sp, #4]
   20a9c:	3243      	adds	r2, #67	; 0x43
   20a9e:	9800      	ldr	r0, [sp, #0]
   20aa0:	9e08      	ldr	r6, [sp, #32]
   20aa2:	47b0      	blx	r6
   20aa4:	1c43      	adds	r3, r0, #1
   20aa6:	d025      	beq.n	20af4 <_printf_common+0xa4>
   20aa8:	2306      	movs	r3, #6
   20aaa:	6820      	ldr	r0, [r4, #0]
   20aac:	682a      	ldr	r2, [r5, #0]
   20aae:	68e1      	ldr	r1, [r4, #12]
   20ab0:	4003      	ands	r3, r0
   20ab2:	2500      	movs	r5, #0
   20ab4:	2b04      	cmp	r3, #4
   20ab6:	d103      	bne.n	20ac0 <_printf_common+0x70>
   20ab8:	1a8d      	subs	r5, r1, r2
   20aba:	43eb      	mvns	r3, r5
   20abc:	17db      	asrs	r3, r3, #31
   20abe:	401d      	ands	r5, r3
   20ac0:	68a3      	ldr	r3, [r4, #8]
   20ac2:	6922      	ldr	r2, [r4, #16]
   20ac4:	4293      	cmp	r3, r2
   20ac6:	dd01      	ble.n	20acc <_printf_common+0x7c>
   20ac8:	1a9b      	subs	r3, r3, r2
   20aca:	18ed      	adds	r5, r5, r3
   20acc:	2700      	movs	r7, #0
   20ace:	42bd      	cmp	r5, r7
   20ad0:	d120      	bne.n	20b14 <_printf_common+0xc4>
   20ad2:	2000      	movs	r0, #0
   20ad4:	e010      	b.n	20af8 <_printf_common+0xa8>
   20ad6:	3701      	adds	r7, #1
   20ad8:	68e3      	ldr	r3, [r4, #12]
   20ada:	682a      	ldr	r2, [r5, #0]
   20adc:	1a9b      	subs	r3, r3, r2
   20ade:	429f      	cmp	r7, r3
   20ae0:	dad2      	bge.n	20a88 <_printf_common+0x38>
   20ae2:	0022      	movs	r2, r4
   20ae4:	2301      	movs	r3, #1
   20ae6:	3219      	adds	r2, #25
   20ae8:	9901      	ldr	r1, [sp, #4]
   20aea:	9800      	ldr	r0, [sp, #0]
   20aec:	9e08      	ldr	r6, [sp, #32]
   20aee:	47b0      	blx	r6
   20af0:	1c43      	adds	r3, r0, #1
   20af2:	d1f0      	bne.n	20ad6 <_printf_common+0x86>
   20af4:	2001      	movs	r0, #1
   20af6:	4240      	negs	r0, r0
   20af8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   20afa:	2030      	movs	r0, #48	; 0x30
   20afc:	18e1      	adds	r1, r4, r3
   20afe:	3143      	adds	r1, #67	; 0x43
   20b00:	7008      	strb	r0, [r1, #0]
   20b02:	0021      	movs	r1, r4
   20b04:	1c5a      	adds	r2, r3, #1
   20b06:	3145      	adds	r1, #69	; 0x45
   20b08:	7809      	ldrb	r1, [r1, #0]
   20b0a:	18a2      	adds	r2, r4, r2
   20b0c:	3243      	adds	r2, #67	; 0x43
   20b0e:	3302      	adds	r3, #2
   20b10:	7011      	strb	r1, [r2, #0]
   20b12:	e7c1      	b.n	20a98 <_printf_common+0x48>
   20b14:	0022      	movs	r2, r4
   20b16:	2301      	movs	r3, #1
   20b18:	321a      	adds	r2, #26
   20b1a:	9901      	ldr	r1, [sp, #4]
   20b1c:	9800      	ldr	r0, [sp, #0]
   20b1e:	9e08      	ldr	r6, [sp, #32]
   20b20:	47b0      	blx	r6
   20b22:	1c43      	adds	r3, r0, #1
   20b24:	d0e6      	beq.n	20af4 <_printf_common+0xa4>
   20b26:	3701      	adds	r7, #1
   20b28:	e7d1      	b.n	20ace <_printf_common+0x7e>
	...

00020b2c <_printf_i>:
   20b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   20b2e:	b08b      	sub	sp, #44	; 0x2c
   20b30:	9206      	str	r2, [sp, #24]
   20b32:	000a      	movs	r2, r1
   20b34:	3243      	adds	r2, #67	; 0x43
   20b36:	9307      	str	r3, [sp, #28]
   20b38:	9005      	str	r0, [sp, #20]
   20b3a:	9204      	str	r2, [sp, #16]
   20b3c:	7e0a      	ldrb	r2, [r1, #24]
   20b3e:	000c      	movs	r4, r1
   20b40:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20b42:	2a6e      	cmp	r2, #110	; 0x6e
   20b44:	d100      	bne.n	20b48 <_printf_i+0x1c>
   20b46:	e08f      	b.n	20c68 <_printf_i+0x13c>
   20b48:	d817      	bhi.n	20b7a <_printf_i+0x4e>
   20b4a:	2a63      	cmp	r2, #99	; 0x63
   20b4c:	d02c      	beq.n	20ba8 <_printf_i+0x7c>
   20b4e:	d808      	bhi.n	20b62 <_printf_i+0x36>
   20b50:	2a00      	cmp	r2, #0
   20b52:	d100      	bne.n	20b56 <_printf_i+0x2a>
   20b54:	e099      	b.n	20c8a <_printf_i+0x15e>
   20b56:	2a58      	cmp	r2, #88	; 0x58
   20b58:	d054      	beq.n	20c04 <_printf_i+0xd8>
   20b5a:	0026      	movs	r6, r4
   20b5c:	3642      	adds	r6, #66	; 0x42
   20b5e:	7032      	strb	r2, [r6, #0]
   20b60:	e029      	b.n	20bb6 <_printf_i+0x8a>
   20b62:	2a64      	cmp	r2, #100	; 0x64
   20b64:	d001      	beq.n	20b6a <_printf_i+0x3e>
   20b66:	2a69      	cmp	r2, #105	; 0x69
   20b68:	d1f7      	bne.n	20b5a <_printf_i+0x2e>
   20b6a:	6821      	ldr	r1, [r4, #0]
   20b6c:	681a      	ldr	r2, [r3, #0]
   20b6e:	0608      	lsls	r0, r1, #24
   20b70:	d523      	bpl.n	20bba <_printf_i+0x8e>
   20b72:	1d11      	adds	r1, r2, #4
   20b74:	6019      	str	r1, [r3, #0]
   20b76:	6815      	ldr	r5, [r2, #0]
   20b78:	e025      	b.n	20bc6 <_printf_i+0x9a>
   20b7a:	2a73      	cmp	r2, #115	; 0x73
   20b7c:	d100      	bne.n	20b80 <_printf_i+0x54>
   20b7e:	e088      	b.n	20c92 <_printf_i+0x166>
   20b80:	d808      	bhi.n	20b94 <_printf_i+0x68>
   20b82:	2a6f      	cmp	r2, #111	; 0x6f
   20b84:	d029      	beq.n	20bda <_printf_i+0xae>
   20b86:	2a70      	cmp	r2, #112	; 0x70
   20b88:	d1e7      	bne.n	20b5a <_printf_i+0x2e>
   20b8a:	2220      	movs	r2, #32
   20b8c:	6809      	ldr	r1, [r1, #0]
   20b8e:	430a      	orrs	r2, r1
   20b90:	6022      	str	r2, [r4, #0]
   20b92:	e003      	b.n	20b9c <_printf_i+0x70>
   20b94:	2a75      	cmp	r2, #117	; 0x75
   20b96:	d020      	beq.n	20bda <_printf_i+0xae>
   20b98:	2a78      	cmp	r2, #120	; 0x78
   20b9a:	d1de      	bne.n	20b5a <_printf_i+0x2e>
   20b9c:	0022      	movs	r2, r4
   20b9e:	2178      	movs	r1, #120	; 0x78
   20ba0:	3245      	adds	r2, #69	; 0x45
   20ba2:	7011      	strb	r1, [r2, #0]
   20ba4:	4a6c      	ldr	r2, [pc, #432]	; (20d58 <_printf_i+0x22c>)
   20ba6:	e030      	b.n	20c0a <_printf_i+0xde>
   20ba8:	000e      	movs	r6, r1
   20baa:	681a      	ldr	r2, [r3, #0]
   20bac:	3642      	adds	r6, #66	; 0x42
   20bae:	1d11      	adds	r1, r2, #4
   20bb0:	6019      	str	r1, [r3, #0]
   20bb2:	6813      	ldr	r3, [r2, #0]
   20bb4:	7033      	strb	r3, [r6, #0]
   20bb6:	2301      	movs	r3, #1
   20bb8:	e079      	b.n	20cae <_printf_i+0x182>
   20bba:	0649      	lsls	r1, r1, #25
   20bbc:	d5d9      	bpl.n	20b72 <_printf_i+0x46>
   20bbe:	1d11      	adds	r1, r2, #4
   20bc0:	6019      	str	r1, [r3, #0]
   20bc2:	2300      	movs	r3, #0
   20bc4:	5ed5      	ldrsh	r5, [r2, r3]
   20bc6:	2d00      	cmp	r5, #0
   20bc8:	da03      	bge.n	20bd2 <_printf_i+0xa6>
   20bca:	232d      	movs	r3, #45	; 0x2d
   20bcc:	9a04      	ldr	r2, [sp, #16]
   20bce:	426d      	negs	r5, r5
   20bd0:	7013      	strb	r3, [r2, #0]
   20bd2:	4b62      	ldr	r3, [pc, #392]	; (20d5c <_printf_i+0x230>)
   20bd4:	270a      	movs	r7, #10
   20bd6:	9303      	str	r3, [sp, #12]
   20bd8:	e02f      	b.n	20c3a <_printf_i+0x10e>
   20bda:	6820      	ldr	r0, [r4, #0]
   20bdc:	6819      	ldr	r1, [r3, #0]
   20bde:	0605      	lsls	r5, r0, #24
   20be0:	d503      	bpl.n	20bea <_printf_i+0xbe>
   20be2:	1d08      	adds	r0, r1, #4
   20be4:	6018      	str	r0, [r3, #0]
   20be6:	680d      	ldr	r5, [r1, #0]
   20be8:	e005      	b.n	20bf6 <_printf_i+0xca>
   20bea:	0640      	lsls	r0, r0, #25
   20bec:	d5f9      	bpl.n	20be2 <_printf_i+0xb6>
   20bee:	680d      	ldr	r5, [r1, #0]
   20bf0:	1d08      	adds	r0, r1, #4
   20bf2:	6018      	str	r0, [r3, #0]
   20bf4:	b2ad      	uxth	r5, r5
   20bf6:	4b59      	ldr	r3, [pc, #356]	; (20d5c <_printf_i+0x230>)
   20bf8:	2708      	movs	r7, #8
   20bfa:	9303      	str	r3, [sp, #12]
   20bfc:	2a6f      	cmp	r2, #111	; 0x6f
   20bfe:	d018      	beq.n	20c32 <_printf_i+0x106>
   20c00:	270a      	movs	r7, #10
   20c02:	e016      	b.n	20c32 <_printf_i+0x106>
   20c04:	3145      	adds	r1, #69	; 0x45
   20c06:	700a      	strb	r2, [r1, #0]
   20c08:	4a54      	ldr	r2, [pc, #336]	; (20d5c <_printf_i+0x230>)
   20c0a:	9203      	str	r2, [sp, #12]
   20c0c:	681a      	ldr	r2, [r3, #0]
   20c0e:	6821      	ldr	r1, [r4, #0]
   20c10:	1d10      	adds	r0, r2, #4
   20c12:	6018      	str	r0, [r3, #0]
   20c14:	6815      	ldr	r5, [r2, #0]
   20c16:	0608      	lsls	r0, r1, #24
   20c18:	d522      	bpl.n	20c60 <_printf_i+0x134>
   20c1a:	07cb      	lsls	r3, r1, #31
   20c1c:	d502      	bpl.n	20c24 <_printf_i+0xf8>
   20c1e:	2320      	movs	r3, #32
   20c20:	4319      	orrs	r1, r3
   20c22:	6021      	str	r1, [r4, #0]
   20c24:	2710      	movs	r7, #16
   20c26:	2d00      	cmp	r5, #0
   20c28:	d103      	bne.n	20c32 <_printf_i+0x106>
   20c2a:	2320      	movs	r3, #32
   20c2c:	6822      	ldr	r2, [r4, #0]
   20c2e:	439a      	bics	r2, r3
   20c30:	6022      	str	r2, [r4, #0]
   20c32:	0023      	movs	r3, r4
   20c34:	2200      	movs	r2, #0
   20c36:	3343      	adds	r3, #67	; 0x43
   20c38:	701a      	strb	r2, [r3, #0]
   20c3a:	6863      	ldr	r3, [r4, #4]
   20c3c:	60a3      	str	r3, [r4, #8]
   20c3e:	2b00      	cmp	r3, #0
   20c40:	db5c      	blt.n	20cfc <_printf_i+0x1d0>
   20c42:	2204      	movs	r2, #4
   20c44:	6821      	ldr	r1, [r4, #0]
   20c46:	4391      	bics	r1, r2
   20c48:	6021      	str	r1, [r4, #0]
   20c4a:	2d00      	cmp	r5, #0
   20c4c:	d158      	bne.n	20d00 <_printf_i+0x1d4>
   20c4e:	9e04      	ldr	r6, [sp, #16]
   20c50:	2b00      	cmp	r3, #0
   20c52:	d064      	beq.n	20d1e <_printf_i+0x1f2>
   20c54:	0026      	movs	r6, r4
   20c56:	9b03      	ldr	r3, [sp, #12]
   20c58:	3642      	adds	r6, #66	; 0x42
   20c5a:	781b      	ldrb	r3, [r3, #0]
   20c5c:	7033      	strb	r3, [r6, #0]
   20c5e:	e05e      	b.n	20d1e <_printf_i+0x1f2>
   20c60:	0648      	lsls	r0, r1, #25
   20c62:	d5da      	bpl.n	20c1a <_printf_i+0xee>
   20c64:	b2ad      	uxth	r5, r5
   20c66:	e7d8      	b.n	20c1a <_printf_i+0xee>
   20c68:	6809      	ldr	r1, [r1, #0]
   20c6a:	681a      	ldr	r2, [r3, #0]
   20c6c:	0608      	lsls	r0, r1, #24
   20c6e:	d505      	bpl.n	20c7c <_printf_i+0x150>
   20c70:	1d11      	adds	r1, r2, #4
   20c72:	6019      	str	r1, [r3, #0]
   20c74:	6813      	ldr	r3, [r2, #0]
   20c76:	6962      	ldr	r2, [r4, #20]
   20c78:	601a      	str	r2, [r3, #0]
   20c7a:	e006      	b.n	20c8a <_printf_i+0x15e>
   20c7c:	0649      	lsls	r1, r1, #25
   20c7e:	d5f7      	bpl.n	20c70 <_printf_i+0x144>
   20c80:	1d11      	adds	r1, r2, #4
   20c82:	6019      	str	r1, [r3, #0]
   20c84:	6813      	ldr	r3, [r2, #0]
   20c86:	8aa2      	ldrh	r2, [r4, #20]
   20c88:	801a      	strh	r2, [r3, #0]
   20c8a:	2300      	movs	r3, #0
   20c8c:	9e04      	ldr	r6, [sp, #16]
   20c8e:	6123      	str	r3, [r4, #16]
   20c90:	e054      	b.n	20d3c <_printf_i+0x210>
   20c92:	681a      	ldr	r2, [r3, #0]
   20c94:	1d11      	adds	r1, r2, #4
   20c96:	6019      	str	r1, [r3, #0]
   20c98:	6816      	ldr	r6, [r2, #0]
   20c9a:	2100      	movs	r1, #0
   20c9c:	6862      	ldr	r2, [r4, #4]
   20c9e:	0030      	movs	r0, r6
   20ca0:	f000 f922 	bl	20ee8 <memchr>
   20ca4:	2800      	cmp	r0, #0
   20ca6:	d001      	beq.n	20cac <_printf_i+0x180>
   20ca8:	1b80      	subs	r0, r0, r6
   20caa:	6060      	str	r0, [r4, #4]
   20cac:	6863      	ldr	r3, [r4, #4]
   20cae:	6123      	str	r3, [r4, #16]
   20cb0:	2300      	movs	r3, #0
   20cb2:	9a04      	ldr	r2, [sp, #16]
   20cb4:	7013      	strb	r3, [r2, #0]
   20cb6:	e041      	b.n	20d3c <_printf_i+0x210>
   20cb8:	6923      	ldr	r3, [r4, #16]
   20cba:	0032      	movs	r2, r6
   20cbc:	9906      	ldr	r1, [sp, #24]
   20cbe:	9805      	ldr	r0, [sp, #20]
   20cc0:	9d07      	ldr	r5, [sp, #28]
   20cc2:	47a8      	blx	r5
   20cc4:	1c43      	adds	r3, r0, #1
   20cc6:	d043      	beq.n	20d50 <_printf_i+0x224>
   20cc8:	6823      	ldr	r3, [r4, #0]
   20cca:	2500      	movs	r5, #0
   20ccc:	079b      	lsls	r3, r3, #30
   20cce:	d40f      	bmi.n	20cf0 <_printf_i+0x1c4>
   20cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20cd2:	68e0      	ldr	r0, [r4, #12]
   20cd4:	4298      	cmp	r0, r3
   20cd6:	da3d      	bge.n	20d54 <_printf_i+0x228>
   20cd8:	0018      	movs	r0, r3
   20cda:	e03b      	b.n	20d54 <_printf_i+0x228>
   20cdc:	0022      	movs	r2, r4
   20cde:	2301      	movs	r3, #1
   20ce0:	3219      	adds	r2, #25
   20ce2:	9906      	ldr	r1, [sp, #24]
   20ce4:	9805      	ldr	r0, [sp, #20]
   20ce6:	9e07      	ldr	r6, [sp, #28]
   20ce8:	47b0      	blx	r6
   20cea:	1c43      	adds	r3, r0, #1
   20cec:	d030      	beq.n	20d50 <_printf_i+0x224>
   20cee:	3501      	adds	r5, #1
   20cf0:	68e3      	ldr	r3, [r4, #12]
   20cf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20cf4:	1a9b      	subs	r3, r3, r2
   20cf6:	429d      	cmp	r5, r3
   20cf8:	dbf0      	blt.n	20cdc <_printf_i+0x1b0>
   20cfa:	e7e9      	b.n	20cd0 <_printf_i+0x1a4>
   20cfc:	2d00      	cmp	r5, #0
   20cfe:	d0a9      	beq.n	20c54 <_printf_i+0x128>
   20d00:	9e04      	ldr	r6, [sp, #16]
   20d02:	0028      	movs	r0, r5
   20d04:	0039      	movs	r1, r7
   20d06:	f7fe fe15 	bl	1f934 <__aeabi_uidivmod>
   20d0a:	9b03      	ldr	r3, [sp, #12]
   20d0c:	3e01      	subs	r6, #1
   20d0e:	5c5b      	ldrb	r3, [r3, r1]
   20d10:	0028      	movs	r0, r5
   20d12:	7033      	strb	r3, [r6, #0]
   20d14:	0039      	movs	r1, r7
   20d16:	f7fe fd87 	bl	1f828 <__udivsi3>
   20d1a:	1e05      	subs	r5, r0, #0
   20d1c:	d1f1      	bne.n	20d02 <_printf_i+0x1d6>
   20d1e:	2f08      	cmp	r7, #8
   20d20:	d109      	bne.n	20d36 <_printf_i+0x20a>
   20d22:	6823      	ldr	r3, [r4, #0]
   20d24:	07db      	lsls	r3, r3, #31
   20d26:	d506      	bpl.n	20d36 <_printf_i+0x20a>
   20d28:	6863      	ldr	r3, [r4, #4]
   20d2a:	6922      	ldr	r2, [r4, #16]
   20d2c:	4293      	cmp	r3, r2
   20d2e:	dc02      	bgt.n	20d36 <_printf_i+0x20a>
   20d30:	2330      	movs	r3, #48	; 0x30
   20d32:	3e01      	subs	r6, #1
   20d34:	7033      	strb	r3, [r6, #0]
   20d36:	9b04      	ldr	r3, [sp, #16]
   20d38:	1b9b      	subs	r3, r3, r6
   20d3a:	6123      	str	r3, [r4, #16]
   20d3c:	9b07      	ldr	r3, [sp, #28]
   20d3e:	aa09      	add	r2, sp, #36	; 0x24
   20d40:	9300      	str	r3, [sp, #0]
   20d42:	0021      	movs	r1, r4
   20d44:	9b06      	ldr	r3, [sp, #24]
   20d46:	9805      	ldr	r0, [sp, #20]
   20d48:	f7ff fe82 	bl	20a50 <_printf_common>
   20d4c:	1c43      	adds	r3, r0, #1
   20d4e:	d1b3      	bne.n	20cb8 <_printf_i+0x18c>
   20d50:	2001      	movs	r0, #1
   20d52:	4240      	negs	r0, r0
   20d54:	b00b      	add	sp, #44	; 0x2c
   20d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20d58:	00023270 	.word	0x00023270
   20d5c:	0002325f 	.word	0x0002325f

00020d60 <__sread>:
   20d60:	b570      	push	{r4, r5, r6, lr}
   20d62:	000c      	movs	r4, r1
   20d64:	250e      	movs	r5, #14
   20d66:	5f49      	ldrsh	r1, [r1, r5]
   20d68:	f000 f8f0 	bl	20f4c <_read_r>
   20d6c:	2800      	cmp	r0, #0
   20d6e:	db03      	blt.n	20d78 <__sread+0x18>
   20d70:	6d63      	ldr	r3, [r4, #84]	; 0x54
   20d72:	181b      	adds	r3, r3, r0
   20d74:	6563      	str	r3, [r4, #84]	; 0x54
   20d76:	bd70      	pop	{r4, r5, r6, pc}
   20d78:	89a3      	ldrh	r3, [r4, #12]
   20d7a:	4a02      	ldr	r2, [pc, #8]	; (20d84 <__sread+0x24>)
   20d7c:	4013      	ands	r3, r2
   20d7e:	81a3      	strh	r3, [r4, #12]
   20d80:	e7f9      	b.n	20d76 <__sread+0x16>
   20d82:	46c0      	nop			; (mov r8, r8)
   20d84:	ffffefff 	.word	0xffffefff

00020d88 <__swrite>:
   20d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20d8a:	001f      	movs	r7, r3
   20d8c:	898b      	ldrh	r3, [r1, #12]
   20d8e:	0005      	movs	r5, r0
   20d90:	000c      	movs	r4, r1
   20d92:	0016      	movs	r6, r2
   20d94:	05db      	lsls	r3, r3, #23
   20d96:	d505      	bpl.n	20da4 <__swrite+0x1c>
   20d98:	230e      	movs	r3, #14
   20d9a:	5ec9      	ldrsh	r1, [r1, r3]
   20d9c:	2200      	movs	r2, #0
   20d9e:	2302      	movs	r3, #2
   20da0:	f000 f88e 	bl	20ec0 <_lseek_r>
   20da4:	89a3      	ldrh	r3, [r4, #12]
   20da6:	4a05      	ldr	r2, [pc, #20]	; (20dbc <__swrite+0x34>)
   20da8:	0028      	movs	r0, r5
   20daa:	4013      	ands	r3, r2
   20dac:	81a3      	strh	r3, [r4, #12]
   20dae:	0032      	movs	r2, r6
   20db0:	230e      	movs	r3, #14
   20db2:	5ee1      	ldrsh	r1, [r4, r3]
   20db4:	003b      	movs	r3, r7
   20db6:	f000 f839 	bl	20e2c <_write_r>
   20dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20dbc:	ffffefff 	.word	0xffffefff

00020dc0 <__sseek>:
   20dc0:	b570      	push	{r4, r5, r6, lr}
   20dc2:	000c      	movs	r4, r1
   20dc4:	250e      	movs	r5, #14
   20dc6:	5f49      	ldrsh	r1, [r1, r5]
   20dc8:	f000 f87a 	bl	20ec0 <_lseek_r>
   20dcc:	89a3      	ldrh	r3, [r4, #12]
   20dce:	1c42      	adds	r2, r0, #1
   20dd0:	d103      	bne.n	20dda <__sseek+0x1a>
   20dd2:	4a05      	ldr	r2, [pc, #20]	; (20de8 <__sseek+0x28>)
   20dd4:	4013      	ands	r3, r2
   20dd6:	81a3      	strh	r3, [r4, #12]
   20dd8:	bd70      	pop	{r4, r5, r6, pc}
   20dda:	2280      	movs	r2, #128	; 0x80
   20ddc:	0152      	lsls	r2, r2, #5
   20dde:	4313      	orrs	r3, r2
   20de0:	81a3      	strh	r3, [r4, #12]
   20de2:	6560      	str	r0, [r4, #84]	; 0x54
   20de4:	e7f8      	b.n	20dd8 <__sseek+0x18>
   20de6:	46c0      	nop			; (mov r8, r8)
   20de8:	ffffefff 	.word	0xffffefff

00020dec <__sclose>:
   20dec:	b510      	push	{r4, lr}
   20dee:	230e      	movs	r3, #14
   20df0:	5ec9      	ldrsh	r1, [r1, r3]
   20df2:	f000 f82f 	bl	20e54 <_close_r>
   20df6:	bd10      	pop	{r4, pc}

00020df8 <strchr>:
   20df8:	b2c9      	uxtb	r1, r1
   20dfa:	7803      	ldrb	r3, [r0, #0]
   20dfc:	2b00      	cmp	r3, #0
   20dfe:	d004      	beq.n	20e0a <strchr+0x12>
   20e00:	4299      	cmp	r1, r3
   20e02:	d100      	bne.n	20e06 <strchr+0xe>
   20e04:	4770      	bx	lr
   20e06:	3001      	adds	r0, #1
   20e08:	e7f7      	b.n	20dfa <strchr+0x2>
   20e0a:	424b      	negs	r3, r1
   20e0c:	4159      	adcs	r1, r3
   20e0e:	4249      	negs	r1, r1
   20e10:	4008      	ands	r0, r1
   20e12:	e7f7      	b.n	20e04 <strchr+0xc>

00020e14 <__ascii_wctomb>:
   20e14:	1e0b      	subs	r3, r1, #0
   20e16:	d004      	beq.n	20e22 <__ascii_wctomb+0xe>
   20e18:	2aff      	cmp	r2, #255	; 0xff
   20e1a:	d904      	bls.n	20e26 <__ascii_wctomb+0x12>
   20e1c:	238a      	movs	r3, #138	; 0x8a
   20e1e:	6003      	str	r3, [r0, #0]
   20e20:	3b8b      	subs	r3, #139	; 0x8b
   20e22:	0018      	movs	r0, r3
   20e24:	4770      	bx	lr
   20e26:	700a      	strb	r2, [r1, #0]
   20e28:	2301      	movs	r3, #1
   20e2a:	e7fa      	b.n	20e22 <__ascii_wctomb+0xe>

00020e2c <_write_r>:
   20e2c:	b570      	push	{r4, r5, r6, lr}
   20e2e:	0005      	movs	r5, r0
   20e30:	0008      	movs	r0, r1
   20e32:	0011      	movs	r1, r2
   20e34:	2200      	movs	r2, #0
   20e36:	4c06      	ldr	r4, [pc, #24]	; (20e50 <_write_r+0x24>)
   20e38:	6022      	str	r2, [r4, #0]
   20e3a:	001a      	movs	r2, r3
   20e3c:	f7fa fa88 	bl	1b350 <_write>
   20e40:	1c43      	adds	r3, r0, #1
   20e42:	d103      	bne.n	20e4c <_write_r+0x20>
   20e44:	6823      	ldr	r3, [r4, #0]
   20e46:	2b00      	cmp	r3, #0
   20e48:	d000      	beq.n	20e4c <_write_r+0x20>
   20e4a:	602b      	str	r3, [r5, #0]
   20e4c:	bd70      	pop	{r4, r5, r6, pc}
   20e4e:	46c0      	nop			; (mov r8, r8)
   20e50:	20003f54 	.word	0x20003f54

00020e54 <_close_r>:
   20e54:	2300      	movs	r3, #0
   20e56:	b570      	push	{r4, r5, r6, lr}
   20e58:	4c06      	ldr	r4, [pc, #24]	; (20e74 <_close_r+0x20>)
   20e5a:	0005      	movs	r5, r0
   20e5c:	0008      	movs	r0, r1
   20e5e:	6023      	str	r3, [r4, #0]
   20e60:	f7fa fab0 	bl	1b3c4 <_close>
   20e64:	1c43      	adds	r3, r0, #1
   20e66:	d103      	bne.n	20e70 <_close_r+0x1c>
   20e68:	6823      	ldr	r3, [r4, #0]
   20e6a:	2b00      	cmp	r3, #0
   20e6c:	d000      	beq.n	20e70 <_close_r+0x1c>
   20e6e:	602b      	str	r3, [r5, #0]
   20e70:	bd70      	pop	{r4, r5, r6, pc}
   20e72:	46c0      	nop			; (mov r8, r8)
   20e74:	20003f54 	.word	0x20003f54

00020e78 <_fstat_r>:
   20e78:	2300      	movs	r3, #0
   20e7a:	b570      	push	{r4, r5, r6, lr}
   20e7c:	4c06      	ldr	r4, [pc, #24]	; (20e98 <_fstat_r+0x20>)
   20e7e:	0005      	movs	r5, r0
   20e80:	0008      	movs	r0, r1
   20e82:	0011      	movs	r1, r2
   20e84:	6023      	str	r3, [r4, #0]
   20e86:	f7fa faa0 	bl	1b3ca <_fstat>
   20e8a:	1c43      	adds	r3, r0, #1
   20e8c:	d103      	bne.n	20e96 <_fstat_r+0x1e>
   20e8e:	6823      	ldr	r3, [r4, #0]
   20e90:	2b00      	cmp	r3, #0
   20e92:	d000      	beq.n	20e96 <_fstat_r+0x1e>
   20e94:	602b      	str	r3, [r5, #0]
   20e96:	bd70      	pop	{r4, r5, r6, pc}
   20e98:	20003f54 	.word	0x20003f54

00020e9c <_isatty_r>:
   20e9c:	2300      	movs	r3, #0
   20e9e:	b570      	push	{r4, r5, r6, lr}
   20ea0:	4c06      	ldr	r4, [pc, #24]	; (20ebc <_isatty_r+0x20>)
   20ea2:	0005      	movs	r5, r0
   20ea4:	0008      	movs	r0, r1
   20ea6:	6023      	str	r3, [r4, #0]
   20ea8:	f7fa fa94 	bl	1b3d4 <_isatty>
   20eac:	1c43      	adds	r3, r0, #1
   20eae:	d103      	bne.n	20eb8 <_isatty_r+0x1c>
   20eb0:	6823      	ldr	r3, [r4, #0]
   20eb2:	2b00      	cmp	r3, #0
   20eb4:	d000      	beq.n	20eb8 <_isatty_r+0x1c>
   20eb6:	602b      	str	r3, [r5, #0]
   20eb8:	bd70      	pop	{r4, r5, r6, pc}
   20eba:	46c0      	nop			; (mov r8, r8)
   20ebc:	20003f54 	.word	0x20003f54

00020ec0 <_lseek_r>:
   20ec0:	b570      	push	{r4, r5, r6, lr}
   20ec2:	0005      	movs	r5, r0
   20ec4:	0008      	movs	r0, r1
   20ec6:	0011      	movs	r1, r2
   20ec8:	2200      	movs	r2, #0
   20eca:	4c06      	ldr	r4, [pc, #24]	; (20ee4 <_lseek_r+0x24>)
   20ecc:	6022      	str	r2, [r4, #0]
   20ece:	001a      	movs	r2, r3
   20ed0:	f7fa fa82 	bl	1b3d8 <_lseek>
   20ed4:	1c43      	adds	r3, r0, #1
   20ed6:	d103      	bne.n	20ee0 <_lseek_r+0x20>
   20ed8:	6823      	ldr	r3, [r4, #0]
   20eda:	2b00      	cmp	r3, #0
   20edc:	d000      	beq.n	20ee0 <_lseek_r+0x20>
   20ede:	602b      	str	r3, [r5, #0]
   20ee0:	bd70      	pop	{r4, r5, r6, pc}
   20ee2:	46c0      	nop			; (mov r8, r8)
   20ee4:	20003f54 	.word	0x20003f54

00020ee8 <memchr>:
   20ee8:	b2c9      	uxtb	r1, r1
   20eea:	1882      	adds	r2, r0, r2
   20eec:	4290      	cmp	r0, r2
   20eee:	d101      	bne.n	20ef4 <memchr+0xc>
   20ef0:	2000      	movs	r0, #0
   20ef2:	4770      	bx	lr
   20ef4:	7803      	ldrb	r3, [r0, #0]
   20ef6:	428b      	cmp	r3, r1
   20ef8:	d0fb      	beq.n	20ef2 <memchr+0xa>
   20efa:	3001      	adds	r0, #1
   20efc:	e7f6      	b.n	20eec <memchr+0x4>

00020efe <_realloc_r>:
   20efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20f00:	0007      	movs	r7, r0
   20f02:	000d      	movs	r5, r1
   20f04:	0016      	movs	r6, r2
   20f06:	2900      	cmp	r1, #0
   20f08:	d105      	bne.n	20f16 <_realloc_r+0x18>
   20f0a:	0011      	movs	r1, r2
   20f0c:	f7fe fed8 	bl	1fcc0 <_malloc_r>
   20f10:	0004      	movs	r4, r0
   20f12:	0020      	movs	r0, r4
   20f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20f16:	2a00      	cmp	r2, #0
   20f18:	d103      	bne.n	20f22 <_realloc_r+0x24>
   20f1a:	f7fe fe87 	bl	1fc2c <_free_r>
   20f1e:	0034      	movs	r4, r6
   20f20:	e7f7      	b.n	20f12 <_realloc_r+0x14>
   20f22:	f000 f827 	bl	20f74 <_malloc_usable_size_r>
   20f26:	002c      	movs	r4, r5
   20f28:	4286      	cmp	r6, r0
   20f2a:	d9f2      	bls.n	20f12 <_realloc_r+0x14>
   20f2c:	0031      	movs	r1, r6
   20f2e:	0038      	movs	r0, r7
   20f30:	f7fe fec6 	bl	1fcc0 <_malloc_r>
   20f34:	1e04      	subs	r4, r0, #0
   20f36:	d0ec      	beq.n	20f12 <_realloc_r+0x14>
   20f38:	0029      	movs	r1, r5
   20f3a:	0032      	movs	r2, r6
   20f3c:	f7fe fe52 	bl	1fbe4 <memcpy>
   20f40:	0029      	movs	r1, r5
   20f42:	0038      	movs	r0, r7
   20f44:	f7fe fe72 	bl	1fc2c <_free_r>
   20f48:	e7e3      	b.n	20f12 <_realloc_r+0x14>
	...

00020f4c <_read_r>:
   20f4c:	b570      	push	{r4, r5, r6, lr}
   20f4e:	0005      	movs	r5, r0
   20f50:	0008      	movs	r0, r1
   20f52:	0011      	movs	r1, r2
   20f54:	2200      	movs	r2, #0
   20f56:	4c06      	ldr	r4, [pc, #24]	; (20f70 <_read_r+0x24>)
   20f58:	6022      	str	r2, [r4, #0]
   20f5a:	001a      	movs	r2, r3
   20f5c:	f7fa f9d6 	bl	1b30c <_read>
   20f60:	1c43      	adds	r3, r0, #1
   20f62:	d103      	bne.n	20f6c <_read_r+0x20>
   20f64:	6823      	ldr	r3, [r4, #0]
   20f66:	2b00      	cmp	r3, #0
   20f68:	d000      	beq.n	20f6c <_read_r+0x20>
   20f6a:	602b      	str	r3, [r5, #0]
   20f6c:	bd70      	pop	{r4, r5, r6, pc}
   20f6e:	46c0      	nop			; (mov r8, r8)
   20f70:	20003f54 	.word	0x20003f54

00020f74 <_malloc_usable_size_r>:
   20f74:	1f0b      	subs	r3, r1, #4
   20f76:	681b      	ldr	r3, [r3, #0]
   20f78:	1f18      	subs	r0, r3, #4
   20f7a:	2b00      	cmp	r3, #0
   20f7c:	da01      	bge.n	20f82 <_malloc_usable_size_r+0xe>
   20f7e:	580b      	ldr	r3, [r1, r0]
   20f80:	18c0      	adds	r0, r0, r3
   20f82:	4770      	bx	lr
   20f84:	00082008 	.word	0x00082008
   20f88:	65657246 	.word	0x65657246
   20f8c:	534f5452 	.word	0x534f5452
   20f90:	494c4320 	.word	0x494c4320
   20f94:	540a0d2e 	.word	0x540a0d2e
   20f98:	20657079 	.word	0x20657079
   20f9c:	706c6548 	.word	0x706c6548
   20fa0:	206f7420 	.word	0x206f7420
   20fa4:	77656976 	.word	0x77656976
   20fa8:	6c206120 	.word	0x6c206120
   20fac:	20747369 	.word	0x20747369
   20fb0:	7220666f 	.word	0x7220666f
   20fb4:	73696765 	.word	0x73696765
   20fb8:	65726574 	.word	0x65726574
   20fbc:	6f632064 	.word	0x6f632064
   20fc0:	6e616d6d 	.word	0x6e616d6d
   20fc4:	0d2e7364 	.word	0x0d2e7364
   20fc8:	0000000a 	.word	0x0000000a
   20fcc:	00012758 	.word	0x00012758
   20fd0:	00012762 	.word	0x00012762
   20fd4:	00012772 	.word	0x00012772
   20fd8:	000127ac 	.word	0x000127ac
   20fdc:	000127c2 	.word	0x000127c2
   20fe0:	25200a0d 	.word	0x25200a0d
   20fe4:	00732a2e 	.word	0x00732a2e
   20fe8:	203e3e20 	.word	0x203e3e20
   20fec:	00000000 	.word	0x00000000
   20ff0:	732a2e25 	.word	0x732a2e25
   20ff4:	00000000 	.word	0x00000000
   20ff8:	4464654c 	.word	0x4464654c
   20ffc:	00617461 	.word	0x00617461
   21000:	736c6166 	.word	0x736c6166
   21004:	00000065 	.word	0x00000065
   21008:	65757274 	.word	0x65757274
   2100c:	00000000 	.word	0x00000000
   21010:	2264227b 	.word	0x2264227b
   21014:	74227b3a 	.word	0x74227b3a
   21018:	22706d65 	.word	0x22706d65
   2101c:	7d64253a 	.word	0x7d64253a
   21020:	0000007d 	.word	0x0000007d
   21024:	70747468 	.word	0x70747468
   21028:	696c635f 	.word	0x696c635f
   2102c:	5f746e65 	.word	0x5f746e65
   21030:	6c6c6163 	.word	0x6c6c6163
   21034:	6b636162 	.word	0x6b636162
   21038:	5448203a 	.word	0x5448203a
   2103c:	63205054 	.word	0x63205054
   21040:	6e65696c 	.word	0x6e65696c
   21044:	6f732074 	.word	0x6f732074
   21048:	74656b63 	.word	0x74656b63
   2104c:	6e6f6320 	.word	0x6e6f6320
   21050:	7463656e 	.word	0x7463656e
   21054:	0d2e6465 	.word	0x0d2e6465
   21058:	0000000a 	.word	0x0000000a
   2105c:	70747468 	.word	0x70747468
   21060:	696c635f 	.word	0x696c635f
   21064:	5f746e65 	.word	0x5f746e65
   21068:	6c6c6163 	.word	0x6c6c6163
   2106c:	6b636162 	.word	0x6b636162
   21070:	6572203a 	.word	0x6572203a
   21074:	73657571 	.word	0x73657571
   21078:	6f632074 	.word	0x6f632074
   2107c:	656c706d 	.word	0x656c706d
   21080:	2e646574 	.word	0x2e646574
   21084:	00000a0d 	.word	0x00000a0d
   21088:	70747468 	.word	0x70747468
   2108c:	696c635f 	.word	0x696c635f
   21090:	5f746e65 	.word	0x5f746e65
   21094:	6c6c6163 	.word	0x6c6c6163
   21098:	6b636162 	.word	0x6b636162
   2109c:	6572203a 	.word	0x6572203a
   210a0:	76696563 	.word	0x76696563
   210a4:	72206465 	.word	0x72206465
   210a8:	6f707365 	.word	0x6f707365
   210ac:	2065736e 	.word	0x2065736e
   210b0:	64207525 	.word	0x64207525
   210b4:	20617461 	.word	0x20617461
   210b8:	657a6973 	.word	0x657a6973
   210bc:	0d752520 	.word	0x0d752520
   210c0:	0000000a 	.word	0x0000000a
   210c4:	70747468 	.word	0x70747468
   210c8:	696c635f 	.word	0x696c635f
   210cc:	5f746e65 	.word	0x5f746e65
   210d0:	6c6c6163 	.word	0x6c6c6163
   210d4:	6b636162 	.word	0x6b636162
   210d8:	6964203a 	.word	0x6964203a
   210dc:	6e6f6373 	.word	0x6e6f6373
   210e0:	7463656e 	.word	0x7463656e
   210e4:	206e6f69 	.word	0x206e6f69
   210e8:	73616572 	.word	0x73616572
   210ec:	253a6e6f 	.word	0x253a6e6f
   210f0:	000a0d64 	.word	0x000a0d64
   210f4:	74696e69 	.word	0x74696e69
   210f8:	6f74735f 	.word	0x6f74735f
   210fc:	65676172 	.word	0x65676172
   21100:	6c70203a 	.word	0x6c70203a
   21104:	65736165 	.word	0x65736165
   21108:	756c7020 	.word	0x756c7020
   2110c:	6e612067 	.word	0x6e612067
   21110:	2f445320 	.word	0x2f445320
   21114:	20434d4d 	.word	0x20434d4d
   21118:	64726163 	.word	0x64726163
   2111c:	206e6920 	.word	0x206e6920
   21120:	746f6c73 	.word	0x746f6c73
   21124:	0d2e2e2e 	.word	0x0d2e2e2e
   21128:	0000000a 	.word	0x0000000a
   2112c:	74696e69 	.word	0x74696e69
   21130:	6f74735f 	.word	0x6f74735f
   21134:	65676172 	.word	0x65676172
   21138:	4453203a 	.word	0x4453203a
   2113c:	72614320 	.word	0x72614320
   21140:	6e692064 	.word	0x6e692064
   21144:	6c617473 	.word	0x6c617473
   21148:	6166206c 	.word	0x6166206c
   2114c:	64656c69 	.word	0x64656c69
   21150:	000a0d2e 	.word	0x000a0d2e
   21154:	74696e69 	.word	0x74696e69
   21158:	6f74735f 	.word	0x6f74735f
   2115c:	65676172 	.word	0x65676172
   21160:	7274203a 	.word	0x7274203a
   21164:	6e752079 	.word	0x6e752079
   21168:	67756c70 	.word	0x67756c70
   2116c:	646e6120 	.word	0x646e6120
   21170:	2d657220 	.word	0x2d657220
   21174:	67756c70 	.word	0x67756c70
   21178:	65687420 	.word	0x65687420
   2117c:	72616320 	.word	0x72616320
   21180:	0a0d2e64 	.word	0x0a0d2e64
   21184:	00000000 	.word	0x00000000
   21188:	74696e69 	.word	0x74696e69
   2118c:	6f74735f 	.word	0x6f74735f
   21190:	65676172 	.word	0x65676172
   21194:	6f6d203a 	.word	0x6f6d203a
   21198:	69746e75 	.word	0x69746e75
   2119c:	5320676e 	.word	0x5320676e
   211a0:	61632044 	.word	0x61632044
   211a4:	2e2e6472 	.word	0x2e2e6472
   211a8:	000a0d2e 	.word	0x000a0d2e
   211ac:	74696e69 	.word	0x74696e69
   211b0:	6f74735f 	.word	0x6f74735f
   211b4:	65676172 	.word	0x65676172
   211b8:	4453203a 	.word	0x4453203a
   211bc:	72616320 	.word	0x72616320
   211c0:	6f6d2064 	.word	0x6f6d2064
   211c4:	20746e75 	.word	0x20746e75
   211c8:	6c696166 	.word	0x6c696166
   211cc:	20216465 	.word	0x20216465
   211d0:	73657228 	.word	0x73657228
   211d4:	29642520 	.word	0x29642520
   211d8:	00000a0d 	.word	0x00000a0d
   211dc:	74696e69 	.word	0x74696e69
   211e0:	6f74735f 	.word	0x6f74735f
   211e4:	65676172 	.word	0x65676172
   211e8:	4453203a 	.word	0x4453203a
   211ec:	72616320 	.word	0x72616320
   211f0:	6f6d2064 	.word	0x6f6d2064
   211f4:	20746e75 	.word	0x20746e75
   211f8:	0d2e4b4f 	.word	0x0d2e4b4f
   211fc:	0000000a 	.word	0x0000000a

00021200 <main_mqtt_broker>:
   21200:	2e36316d 756f6c63 74716d64 6f632e74     m16.cloudmqtt.co
   21210:	0000006d 6f430a0d 63656e6e 676e6974     m.....Connecting
   21220:	206f7420 6b6f7242 2e2e7265 0000002e      to Broker......
   21230:	4a737242 6f564e42 376c4251 00000000     BrsJBNVoQBl7....
   21240:	79747472 6a65626f 00000000 5454514d     rttyobej....MQTT
   21250:	72452020 20726f72 4f4e202d 6f432054       Error - NOT Co
   21260:	63656e6e 20646574 62206f74 656b6f72     nnected to broke
   21270:	000a0d72 5454514d 6e6f4320 7463656e     r...MQTT Connect
   21280:	74206465 7262206f 72656b6f 00000a0d     ed to broker....
   21290:	6e6e6f43 20746365 6c696166 206f7420     Connect fail to 
   212a0:	76726573 25287265 20212973 72746572     server(%s)! retr
   212b0:	74692079 74756120 74616d6f 6c616369     y it automatical
   212c0:	0d2e796c 0000000a 706d6554 61746144     ly......TempData
   212d0:	00000000 5454514d 6e6f4320 7463656e     ....MQTT Connect
   212e0:	0a0d6465 00000000 5454514d 6f726220     ed......MQTT bro
   212f0:	2072656b 6c636564 20656e69 72756f79     ker decline your
   21300:	63636120 21737365 72726520 6320726f      access! error c
   21310:	2065646f 0a0d6425 00000000 5454514d     ode %d......MQTT
   21320:	73696420 6e6e6f63 65746365 000a0d64      disconnected...
   21330:	6f736572 5f65766c 203a6263 49207325     resolve_cb: %s I
   21340:	64612050 73657264 73692073 2e642520     P address is %d.
   21350:	252e6425 64252e64 0a0d0a0d 00000000     %d.%d.%d........
   21360:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   21370:	20434d4d 726f7473 20656761 20746f6e     MMC storage not 
   21380:	64616572 0a0d2e79 00000000 72617473     ready.......star
   21390:	6f645f74 6f6c6e77 203a6461 462d6957     t_download: Wi-F
   213a0:	73692069 746f6e20 6e6f6320 7463656e     i is not connect
   213b0:	0d2e6465 0000000a 72617473 6f645f74     ed......start_do
   213c0:	6f6c6e77 203a6461 75716572 20747365     wnload: request 
   213d0:	73207369 20746e65 65726c61 2e796461     is sent already.
   213e0:	00000a0d 72617473 6f645f74 6f6c6e77     ....start_downlo
   213f0:	203a6461 6e6e7572 20676e69 6e776f64     ad: running down
   21400:	64616f6c 726c6120 79646165 000a0d2e     load already....
   21410:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   21420:	646e6573 20676e69 50545448 71657220     sending HTTP req
   21430:	74736575 0d2e2e2e 0000000a 70747468     uest........http
   21440:	772f2f3a 6f2e7777 696d6972 6d6f632e     ://www.orimi.com
   21450:	6664702f 7365742d 64702e74 00000066     /pdf-test.pdf...
   21460:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   21470:	65203a74 7974706d 74616420 0a0d2e61     t: empty data...
   21480:	00000000 64333025 00000000 726f7473     ....%03d....stor
   21490:	69665f65 705f656c 656b6361 63203a74     e_file_packet: c
   214a0:	74616572 20676e69 656c6966 73255b20     reating file [%s
   214b0:	000a0d5d 726f7473 69665f65 705f656c     ]...store_file_p
   214c0:	656b6361 66203a74 20656c69 656d616e     acket: file name
   214d0:	20736920 61766e69 2e64696c 776f4420      is invalid. Dow
   214e0:	616f6c6e 61632064 6c65636e 0d2e6465     nload canceled..
   214f0:	0000000a 726f7473 69665f65 705f656c     ....store_file_p
   21500:	656b6361 66203a74 20656c69 61657263     acket: file crea
   21510:	6e6f6974 72726520 2021726f 3a746572     tion error! ret:
   21520:	0a0d6425 00000000 726f7473 69665f65     %d......store_fi
   21530:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   21540:	74697277 72652065 2c726f72 776f6420     write error, dow
   21550:	616f6c6e 61632064 6c65636e 0d2e6465     nload canceled..
   21560:	0000000a 726f7473 69665f65 705f656c     ....store_file_p
   21570:	656b6361 72203a74 69656365 5b646576     acket: received[
   21580:	5d756c25 6966202c 7320656c 5b657a69     %lu], file size[
   21590:	5d756c25 00000a0d 726f7473 69665f65     %lu]....store_fi
   215a0:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   215b0:	6e776f64 64616f6c 73206465 65636375     downloaded succe
   215c0:	75667373 2e796c6c 00000a0d 35455345     ssfully.....ESE5
   215d0:	2d203631 66695720 6e492069 43207469     16 - Wifi Init C
   215e0:	0d65646f 0000000a 666e6f63 72756769     ode.....configur
   215f0:	74685f65 635f7074 6e65696c 48203a74     e_http_client: H
   21600:	20505454 65696c63 6920746e 6974696e     TTP client initi
   21610:	7a696c61 6f697461 6166206e 64656c69     alization failed
   21620:	72282021 25207365 0a0d2964 00000000     ! (res %d)......
   21630:	5454514d 696e6920 6c616974 74617a69     MQTT initializat
   21640:	206e6f69 6c696166 202e6465 6f727245     ion failed. Erro
   21650:	6f632072 69206564 25282073 0a0d2964     r code is (%d)..
   21660:	00000000 5454514d 67657220 65747369     ....MQTT registe
   21670:	61632072 61626c6c 66206b63 656c6961     r callback faile
   21680:	45202e64 726f7272 646f6320 73692065     d. Error code is
   21690:	64252820 000a0d29 6e69616d 326d203a      (%d)...main: m2
   216a0:	69775f6d 695f6966 2074696e 6c6c6163     m_wifi_init call
   216b0:	72726520 2021726f 73657228 29642520      error! (res %d)
   216c0:	00000a0d 6e69616d 6f63203a 63656e6e     ....main: connec
   216d0:	676e6974 206f7420 69466957 20504120     ting to WiFi AP 
   216e0:	2e2e7325 000a0d2e 6e69616d 6c70203a     %s......main: pl
   216f0:	65736165 706e7520 2067756c 20656874     ease unplug the 
   21700:	4d2f4453 6320434d 2e647261 00000a0d     SD/MMC card.....
   21710:	6e69616d 6f64203a 0d2e656e 0000000a     main: done......
   21720:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
   21730:	4f435f49 43454e4e 0d444554 0000000a     I_CONNECTED.....
   21740:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
   21750:	49445f49 4e4f4353 5443454e 0a0d4445     I_DISCONNECTED..
   21760:	00000000 696d7241 65676174 00000000     ....Armitage....
   21770:	69576445 00006966 69666977 3a62635f     EdWifi..wifi_cb:
   21780:	20504920 72646461 20737365 25207369      IP address is %
   21790:	75252e75 2e75252e 0a0d7525 00000000     u.%u.%u.%u......
   217a0:	6f727245 6f632072 63656e6e 676e6974     Error connecting
   217b0:	206f7420 5454514d 6f724220 2172656b      to MQTT Broker!
   217c0:	00000a0d 6f636e49 63657272 6f632074     ....Incorrect co
   217d0:	6e616d6d 61702064 656d6172 28726574     mmand parameter(
   217e0:	202e2973 746e4520 22207265 706c6568     s).  Enter "help
   217f0:	6f742022 65697620 20612077 7473696c     " to view a list
   21800:	20666f20 69617661 6c62616c 6f632065      of available co
   21810:	6e616d6d 0d2e7364 000a0d0a 6d6d6f43     mmands......Comm
   21820:	20646e61 20746f6e 6f636572 73696e67     and not recognis
   21830:	202e6465 746e4520 27207265 706c6568     ed.  Enter 'help
   21840:	6f742027 65697620 20612077 7473696c     ' to view a list
   21850:	20666f20 69617661 6c62616c 6f632065      of available co
   21860:	6e616d6d 0d2e7364 000a0d0a 706c6568     mmands......help
   21870:	00000000 65680a0d 0d3a706c 694c200a     ......help:.. Li
   21880:	20737473 206c6c61 20656874 69676572     sts all the regi
   21890:	72657473 63206465 616d6d6f 0d73646e     stered commands.
   218a0:	000a0d0a                                ....

000218a4 <xHelpCommand>:
   218a4:	0002186c 00021874 00012d91 00000000     l...t....-......
   218b4:	454c4449 00000000 00014514 00014514     IDLE.....E...E..
   218c4:	00014514 0001448c 00014556 00014570     .E...D..VE..pE..
   218d4:	00014514 00014514 0001448c 00014556     .E...E...D..VE..
   218e4:	20726d54 00637653                       Tmr Svc.

000218ec <mmc_trans_multipliers>:
   218ec:	00000000 0000000a 0000000c 0000000d     ................
   218fc:	0000000f 00000014 0000001a 0000001e     ................
   2190c:	00000023 00000028 0000002d 00000034     #...(...-...4...
   2191c:	00000037 0000003c 00000046 00000050     7...<...F...P...

0002192c <sd_mmc_trans_units>:
   2192c:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00021948 <sd_trans_multipliers>:
   21948:	00000000 0000000a 0000000c 0000000d     ................
   21958:	0000000f 00000014 00000019 0000001e     ................
   21968:	00000023 00000028 0000002d 00000032     #...(...-...2...
   21978:	00000037 0000003c 00000046 00000050     7...<...F...P...

00021988 <__FUNCTION__.15697>:
   21988:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   21998:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   219a8:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   219b8:	6320746c 000a646d 0000000d 00016640     lt cmd......@f..
   219c8:	00016610 00016608 00016620 00016618     .f...f.. f...f..
   219d8:	00016638 00016628 00016630              8f..(f..0f..

000219e4 <__FUNCTION__.16565>:
   219e4:	5f666968 646e6573 00000000              hif_send....

000219f0 <__FUNCTION__.16575>:
   219f0:	5f666968 00727369                       hif_isr.

000219f8 <__FUNCTION__.16584>:
   219f8:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00021a08 <__FUNCTION__.16596>:
   21a08:	5f666968 65636572 00657669              hif_receive.

00021a14 <__FUNCTION__.16612>:
   21a14:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   21a24:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   21a34:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   21a44:	0a6c6961 00000000 66696828 64612029     ail.....(hif) ad
   21a54:	73657264 75622073 61662073 000a6c69     dress bus fail..
   21a64:	66696828 6f432029 70757272 20646574     (hif) Corrupted 
   21a74:	6b636170 53207465 20657a69 7525203d     packet Size = %u
   21a84:	204c3c20 7525203d 2047202c 7525203d      <L = %u, G = %u
   21a94:	504f202c 25203d20 3e583230 0000000a     , OP = %02X>....
   21aa4:	49464957 6c616320 6361626c 7369206b     WIFI callback is
   21ab4:	746f6e20 67657220 65747369 0a646572      not registered.
   21ac4:	00000000 6b6f6353 63207465 626c6c61     ....Scoket callb
   21ad4:	206b6361 6e207369 7220746f 73696765     ack is not regis
   21ae4:	65726574 00000a64 2061744f 6c6c6163     tered...Ota call
   21af4:	6b636162 20736920 20746f6e 69676572     back is not regi
   21b04:	72657473 000a6465 70797243 63206f74     stered..Crypto c
   21b14:	626c6c61 206b6361 6e207369 7220746f     allback is not r
   21b24:	73696765 65726574 00000a64 6d676953     egistered...Sigm
   21b34:	61632061 61626c6c 69206b63 6f6e2073     a callback is no
   21b44:	65722074 74736967 64657265 0000000a     t registered....
   21b54:	66696828 6e692029 696c6176 72672064     (hif) invalid gr
   21b64:	2070756f 000a4449 66696828 6f682029     oup ID..(hif) ho
   21b74:	61207473 64207070 276e6469 65732074     st app didn't se
   21b84:	58522074 6e6f4420 253c2065 253c3e75     t RX Done <%u><%
   21b94:	000a3e58 66696828 72572029 20676e6f     X>..(hif) Wrong 
   21ba4:	657a6953 0000000a 66696828 61462029     Size....(hif) Fa
   21bb4:	2065736c 65746e69 70757272 6c252074     lse interrupt %l
   21bc4:	00000078 66696828 61462029 74206c69     x...(hif) Fail t
   21bd4:	6552206f 69206461 7265746e 74707572     o Read interrupt
   21be4:	67657220 0000000a 46494828 61462029      reg....(HIF) Fa
   21bf4:	74206c69 6168206f 656c646e 746e6920     il to handle int
   21c04:	75727265 25207470 72742064 67412079     errupt %d try Ag
   21c14:	2e6e6961 00000a2e 66696820 6365725f     ain..... hif_rec
   21c24:	65766965 6e49203a 696c6176 72612064     eive: Invalid ar
   21c34:	656d7567 000a746e 20505041 75716552     gument..APP Requ
   21c44:	65747365 69532064 6920657a 616c2073     ested Size is la
   21c54:	72656772 61687420 6874206e 65722065     rger than the re
   21c64:	65766963 75622064 72656666 7a697320     cived buffer siz
   21c74:	253c2065 253c3e75 0a3e756c 00000000     e <%u><%lu>.....
   21c84:	20505041 75716552 65747365 64412064     APP Requested Ad
   21c94:	73657264 65622073 646e6f79 65687420     dress beyond the
   21ca4:	63657220 64657669 66756220 20726566      recived buffer 
   21cb4:	72646461 20737365 20646e61 676e656c     address and leng
   21cc4:	000a6874 20705247 6425203f 0000000a     th..GRp ? %d....
   21cd4:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   21ce4:	20676e69 6e776f64 0a2e2e2e 00000000     ing down........
   21cf4:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
   21d04:	74207075 63206568 0a706968 00000000     up the chip.....

00021d14 <__FUNCTION__.16547>:
   21d14:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00021d20 <__FUNCTION__.16576>:
   21d20:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00021d30 <__FUNCTION__.16607>:
   21d30:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   21d40:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
   21d50:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
   21d60:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
   21d70:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
   21d80:	7620746f 64696c61 0000000a 61766e49     ot valid....Inva
   21d90:	2064696c 0a79654b 00000000 44495353     lid Key.....SSID
   21da0:	4e454c20 564e4920 44494c41 0000000a      LEN INVALID....
   21db0:	49204843 4c41564e 000a4449 61766e49     CH INVALID..Inva
   21dc0:	2064696c 20706557 2079656b 65646e69     lid Wep key inde
   21dd0:	64252078 0000000a 61766e49 2064696c     x %d....Invalid 
   21de0:	20706557 2079656b 676e656c 25206874     Wep key length %
   21df0:	00000a64 6f636e49 63657272 53502074     d...Incorrect PS
   21e00:	656b204b 656c2079 6874676e 0000000a     K key length....
   21e10:	65646e75 656e6966 65732064 79742063     undefined sec ty
   21e20:	000a6570 6d726946 65726177 72657620     pe..Firmware ver
   21e30:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   21e40:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   21e50:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   21e60:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   21e70:	6e694d20 69726420 20726576 20726576      Min driver ver 
   21e80:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   21e90:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   21ea0:	0000000a 323a3032 35313a36 00000000     ....20:26:15....
   21eb0:	20727041 32203632 00323230 76697244     Apr 26 2022.Driv
   21ec0:	62207265 746c6975 20746120 25097325     er built at %s.%
   21ed0:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   21ee0:	7277616d 65562065 6f697372 00000a6e     mawre Version...

00021ef0 <__FUNCTION__.16404>:
   21ef0:	70696863 6b61775f 00000065              chip_wake...

00021efc <__FUNCTION__.16453>:
   21efc:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
   21f0c:	74206465 6564206f 696e692d 6c616974     ed to de-initial
   21f1c:	0a657a69 00000000 20737542 6f727265     ize.....Bus erro
   21f2c:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   21f3c:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
   21f4c:	20656874 70696863 0000000a 76697244     the chip....Driv
   21f5c:	65567265 666e4972 30203a6f 38302578     erVerInfo: 0x%08
   21f6c:	000a786c                                lx..

00021f70 <__FUNCTION__.16451>:
   21f70:	645f6d6e 695f7672 0074696e              nm_drv_init.

00021f7c <__FUNCTION__.16458>:
   21f7c:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
   21f8c:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
   21f9c:	6965645f 2074696e 6c696166 0000000a     _deinit fail....
   21fac:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
   21fbc:	73616c66 69642068 6c626173 61662065     flash disable fa
   21fcc:	000a6c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
   21fdc:	6c696166 696e6920 75622074 00000a73     fail init bus...
   21fec:	6c696166 74206465 6e65206f 656c6261     failed to enable
   21ffc:	746e6920 75727265 2e737470 00000a2e      interrupts.....
   2200c:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   2201c:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
   2202c:	20444920 0a786c25 00000000 000175bc      ID %lx......u..
   2203c:	000175bc 000175ec 0001756e 00017592     .u...u..nu...u..
   2204c:	000175a0 000175d2 000175d2 0001761a     .u...u...u...v..
   2205c:	00017552 00017650 00017650 00017650     Ru..Pv..Pv..Pv..
   2206c:	00017650 000175ae 0001783e 0001783e     Pv...u..>x..>x..
   2207c:	00017876 000177e8 0001780e 0001781e     vx...w...x...x..
   2208c:	00017858 00017858 000178b0 000177c4     Xx..Xx...x...w..
   2209c:	00017c84 00017c84 00017c84 00017c84     .|...|...|...|..
   220ac:	0001782e cac4c9c3                       .x......

000220b4 <__FUNCTION__.15726>:
   220b4:	5f697073 00646d63                       spi_cmd.

000220bc <__FUNCTION__.15733>:
   220bc:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

000220cc <__FUNCTION__.15742>:
   220cc:	5f697073 5f646d63 00707372              spi_cmd_rsp.

000220d8 <__FUNCTION__.15775>:
   220d8:	5f697073 5f646d63 706d6f63 6574656c     spi_cmd_complete
   220e8:	00000000                                ....

000220ec <__FUNCTION__.15821>:
   220ec:	5f697073 61746164 6972775f 00006574     spi_data_write..

000220fc <__FUNCTION__.15833>:
   220fc:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0002210c <__FUNCTION__.15844>:
   2210c:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0002211c <__FUNCTION__.15856>:
   2211c:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0002212c <__FUNCTION__.15867>:
   2212c:	735f6d6e 725f6970 00646165              nm_spi_read.

00022138 <__FUNCTION__.15888>:
   22138:	735f6d6e 695f6970 0074696e              nm_spi_init.

00022144 <crc7_syndrome_table>:
   22144:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   22154:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   22164:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   22174:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   22184:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   22194:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   221a4:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   221b4:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   221c4:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   221d4:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   221e4:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   221f4:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   22204:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   22214:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   22224:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   22234:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   22244:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   22254:	6e692064 6e726574 72206c61 20646165     d internal read 
   22264:	746f7270 6c6f636f 74697720 52432068     protocol with CR
   22274:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
   22284:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
   22294:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   222a4:	6e692064 6e726574 72206c61 20646165     d internal read 
   222b4:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
   222c4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   222d4:	6e692064 6e726574 77206c61 65746972     d internal write
   222e4:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   222f4:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   22304:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   22314:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
   22324:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   22334:	72202c64 20646165 636f6c62 2528206b     d, read block (%
   22344:	29783830 0a2e2e2e 00000000 65736552     08x)........Rese
   22354:	6e612074 65722064 20797274 25206425     t and retry %d %
   22364:	2520786c 00000a64 696d6e5b 69707320     lx %d...[nmi spi
   22374:	46203a5d 656c6961 6d632064 77202c64     ]: Failed cmd, w
   22384:	65746972 6f6c6220 28206b63 78383025     rite block (%08x
   22394:	2e2e2e29 0000000a 696d6e5b 69707320     ).......[nmi spi
   223a4:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   223b4:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   223c4:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
   223d4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   223e4:	61642064 62206174 6b636f6c 69727720     d data block wri
   223f4:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   22404:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   22414:	656c6961 61642064 62206174 6b636f6c     ailed data block
   22424:	63726320 69727720 202c6574 20737562      crc write, bus 
   22434:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
   22444:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
   22454:	72652073 2e726f72 000a2e2e 696d6e5b     s error.....[nmi
   22464:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   22474:	72206174 6f707365 2065736e 64616572     ta response read
   22484:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
   22494:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   224a4:	206b636f 61746164 69727720 2e2e6574     ock data write..
   224b4:	00000a2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   224c4:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   224d4:	73756220 72726520 2e2e726f 00000a2e      bus error......
   224e4:	696d6e5b 69707320 73203a5d 62206970     [nmi spi]: spi b
   224f4:	65666675 69732072 7420657a 73206f6f     uffer size too s
   22504:	6c6c616d 64252820 25282029 000a2964     mall (%d) (%d)..
   22514:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   22524:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   22534:	20646d63 32302528 202c2978 70736572     cmd (%02x), resp
   22544:	30252820 0a297832 00000000 696d6e5b      (%02x).....[nmi
   22554:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   22564:	74732064 20657461 70736572 65736e6f     d state response
   22574:	61747320 28206574 78323025 00000a29      state (%02x)...
   22584:	696d6e5b 69707320 45203a5d 726f7272     [nmi spi]: Error
   22594:	6164202c 72206174 20646165 70736572     , data read resp
   225a4:	65736e6f 30252820 0a297832 00000000     onse (%02x).....
   225b4:	696d6e5b 69707320 62203a5d 65666675     [nmi spi]: buffe
   225c4:	766f2072 75727265 6877206e 72206e65     r overrun when r
   225d4:	69646165 6420676e 2e617461 0000000a     eading data.....
   225e4:	696d6e5b 69707320 62203a5d 65666675     [nmi spi]: buffe
   225f4:	766f2072 75727265 6877206e 72206e65     r overrun when r
   22604:	69646165 6320676e 0a2e6372 00000000     eading crc......
   22614:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   22624:	61642064 62206174 6b636f6c 61657220     d data block rea
   22634:	62202c64 65207375 726f7272 0a2e2e2e     d, bus error....
   22644:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   22654:	656c6961 61642064 62206174 6b636f6c     ailed data block
   22664:	63726320 61657220 62202c64 65207375      crc read, bus e
   22674:	726f7272 0a2e2e2e 00000000 696d6e5b     rror........[nmi
   22684:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   22694:	72206174 6f707365 2065736e 64616572     ta response read
   226a4:	7562202c 72652073 2e726f72 000a2e2e     , bus error.....
   226b4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   226c4:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   226d4:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   226e4:	00000a2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   226f4:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   22704:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
   22714:	65736552 6e612074 65722064 20797274     Reset and retry 
   22724:	25206425 000a786c 696d6e5b 69707320     %d %lx..[nmi spi
   22734:	46203a5d 656c6961 6d632064 77202c64     ]: Failed cmd, w
   22744:	65746972 67657220 30252820 2e297838     rite reg (%08x).
   22754:	000a2e2e 65736552 6e612074 65722064     ....Reset and re
   22764:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
   22774:	52524528 75432952 6e657272 253c2074     (ERRR)Current <%
   22784:	000a3e64 6b636f53 206f7420 656c6564     d>..Sock to dele
   22794:	3c206574 0a3e6425 00000000 6b636f53     te <%d>.....Sock
   227a4:	25207465 65732064 6f697373 4449206e     et %d session ID
   227b4:	25203d20 000a0d64 42000800 42000c00      = %d......B...B
   227c4:	42001000 42001400 42001800 42001c00     ...B...B...B...B
   227d4:	0001a452 0001a44e 0001a44e 0001a4b4     R...N...N.......
   227e4:	0001a4b4 0001a466 0001a458 0001a46c     ....f...X...l...
   227f4:	0001a4a2 0001a5e0 0001a5c0 0001a5c0     ................
   22804:	0001a64c 0001a5d2 0001a5ee 0001a5c4     L...............
   22814:	0001a5fc 0001a63c                       ....<...

0002281c <_tcc_apbcmasks>:
   2281c:	00000100 00000200 00000400              ............

00022828 <_tcc_cc_nums>:
   22828:	00020204                                ....

0002282c <_tcc_gclk_ids>:
   2282c:	001b1a1a                                ....

00022830 <_tcc_maxs>:
   22830:	00ffffff 00ffffff 0000ffff              ............

0002283c <_tcc_ow_nums>:
   2283c:	00020408                                ....

00022840 <_tcc_intflag>:
   22840:	00000001 00000002 00000004 00000008     ................
   22850:	00001000 00002000 00004000 00008000     ..... ...@......
   22860:	00010000 00020000 00040000 00080000     ................

00022870 <tcc_interrupt_vectors.12458>:
   22870:	0011100f                                ....

00022874 <LfnOfs>:
   22874:	07050301 12100e09 1c181614 0000001e     ................

00022884 <excvt.4558>:
   22884:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   22894:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   228a4:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   228b4:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   228c4:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   228d4:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   228e4:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   228f4:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
   22904:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   22914:	00005d5b                                []..

00022918 <Tbl>:
   22918:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   22928:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   22938:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   22948:	00d600ff 00f800dc 00d800a3 019200d7     ................
   22958:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   22968:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   22978:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   22988:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   22998:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   229a8:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   229b8:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   229c8:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   229d8:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   229e8:	00da00de 00d900db 00dd00fd 00b400af     ................
   229f8:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   22a08:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00022a18 <tbl_lower.4308>:
   22a18:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   22a28:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   22a38:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   22a48:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   22a58:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   22a68:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   22a78:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   22a88:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   22a98:	01050103 01090107 010d010b 0111010f     ................
   22aa8:	01150113 01190117 011d011b 0121011f     ..............!.
   22ab8:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   22ac8:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   22ad8:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   22ae8:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   22af8:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   22b08:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   22b18:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   22b28:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   22b38:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   22b48:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   22b58:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   22b68:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   22b78:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   22b88:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   22b98:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   22ba8:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   22bb8:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   22bc8:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   22bd8:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   22be8:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00022bf8 <tbl_upper.4309>:
   22bf8:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   22c08:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   22c18:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   22c28:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   22c38:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   22c48:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   22c58:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   22c68:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   22c78:	01040102 01080106 010c010a 0110010e     ................
   22c88:	01140112 01180116 011c011a 0120011e     .............. .
   22c98:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   22ca8:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   22cb8:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   22cc8:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   22cd8:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   22ce8:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   22cf8:	03940393 03960395 03980397 039a0399     ................
   22d08:	039c039b 039e039d 03a0039f 03a303a1     ................
   22d18:	03a503a4 03a703a6 03a903a8 041003aa     ................
   22d28:	04120411 04140413 04160415 04180417     ................
   22d38:	041a0419 041c041b 041e041d 0420041f     .............. .
   22d48:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   22d58:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   22d68:	04030402 04050404 04070406 04090408     ................
   22d78:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   22d88:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   22d98:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   22da8:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   22db8:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   22dc8:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   22dd8:	4354514d 00000000 00000004 00000000     MQTC............
	...
   22df0:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   22e30:	4354514d 00000000 00000004 00000000     MQTC............
	...
   22e48:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   22e88:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   22e98:	0001f332 0001f32c 0001f326 0001f320     2...,...&... ...
   22ea8:	0001f338 0001f340 0001f338 0001f31a     8...@...8.......
   22eb8:	0001f314 0001f338 0001f30e 0001f30e     ....8...........
   22ec8:	0001f308 0001f302 0001f340 0001f3aa     ........@.......
   22ed8:	0001f3a4 0001f39e 0001f398 0001f3b0     ................
   22ee8:	0001f3b8 0001f3b0 0001f392 0001f38c     ................
   22ef8:	0001f3b0 0001f386 0001f386 0001f380     ................
   22f08:	0001f37a 0001f3b8 0001f424 0001f41e     z.......$.......
   22f18:	0001f418 0001f412 0001f42a 0001f42a     ........*...*...
   22f28:	0001f42a 0001f40c 0001f406 0001f42a     *...........*...
   22f38:	0001f400 0001f400 0001f3fa 0001f3f4     ................
   22f48:	33323130 37363534 62613938 66656463     0123456789abcdef
   22f58:	00000d31 6e617254 72656673 636e452d     1...Transfer-Enc
   22f68:	6e69646f 00203a67 6e6e6f43 69746365     oding: .Connecti
   22f78:	203a6e6f 00000000 50545448 0000002f     on: ....HTTP/...
   22f88:	20544547 00000000 54534f50 00000020     GET ....POST ...
   22f98:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   22fa8:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   22fb8:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   22fc8:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   22fd8:	74736f48 0000203a 6e6e6f43 69746365     Host: ..Connecti
   22fe8:	203a6e6f 7065654b 696c412d 0a0d6576     on: Keep-Alive..
   22ff8:	00000000 65636341 452d7470 646f636e     ....Accept-Encod
   23008:	3a676e69 000a0d20 65636341 432d7470     ing: ...Accept-C
   23018:	73726168 203a7465 2d667475 000a0d38     harset: utf-8...
   23028:	6e617254 72656673 636e452d 6e69646f     Transfer-Encodin
   23038:	63203a67 6b6e7568 0a0d6465 00000000     g: chunked......
   23048:	00007525 746e6f43 2d746e65 676e654c     %u..Content-Leng
   23058:	203a6874 00000000 656d7461 2e312f6c     th: ....atmel/1.
   23068:	00322e30 70747468 002f2f3a 70747468     0.2.http://.http
   23078:	2f2f3a73 00000000 42002000 42002400     s://..... .B.$.B
   23088:	42002800 74736554 6f725020 6d617267     .(.BTest Program
   23098:	2d204120 44454c20 676f5420 73656c67      A - LED Toggles
   230a8:	65766520 35207972 736d3030 00000a0d      every 500ms....
   230b8:	66206f4e 2067616c 0a0d2141 00000000     No flag A!......
   230c8:	20746f47 67616c66 0d214120 0000000a     Got flag A!.....
   230d8:	70616548 66656220 2065726f 72617473     Heap before star
   230e8:	676e6974 73617420 203a736b 0a0d6425     ting tasks: %d..
   230f8:	00000000 5f494c43 4b534154 00000000     ....CLI_TASK....
   23108:	3a525245 494c4320 73617420 6f63206b     ERR: CLI task co
   23118:	20646c75 20746f6e 69206562 6974696e     uld not be initi
   23128:	7a696c61 0d216465 0000000a 70616548     alized!.....Heap
   23138:	74666120 73207265 74726174 20676e69      after starting 
   23148:	3a494c43 0d642520 0000000a 49464957     CLI: %d.....WIFI
   23158:	5341545f 0000004b 70616548 74666120     _TASK...Heap aft
   23168:	73207265 74726174 20676e69 49464957     er starting WIFI
   23178:	6425203a 00000a0d 6c463a30 2e416761     : %d....0:FlagA.
   23188:	00747874 6f727245 6e6f2072 6d656d20     txt.Error on mem
   23198:	2079726f 6f6c6c61 69746163 6f206e6f     ory allocation o
   231a8:	5246206e 54524545 0d21534f 0000000a     n FREERTOS!.....
   231b8:	6f727245 6e6f2072 61747320 6f206b63     Error on stack o
   231c8:	66726576 20776f6c 46206e6f 52454552     verflow on FREER
   231d8:	21534f54 00000a0d                       TOS!....

000231e0 <_global_impure_ptr>:
   231e0:	200000a8                                ... 

000231e4 <__sf_fake_stderr>:
	...

00023204 <__sf_fake_stdin>:
	...

00023224 <__sf_fake_stdout>:
	...
   23244:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   23254:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   23264:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   23274:	37363534 62613938 66656463 20200000              456789abcdef.

00023281 <_ctype_>:
   23281:	20202000 20202020 28282020 20282828     .         ((((( 
   23291:	20202020 20202020 20202020 20202020                     
   232a1:	10108820 10101010 10101010 10101010      ...............
   232b1:	04040410 04040404 10040404 10101010     ................
   232c1:	41411010 41414141 01010101 01010101     ..AAAAAA........
   232d1:	01010101 01010101 01010101 10101010     ................
   232e1:	42421010 42424242 02020202 02020202     ..BBBBBB........
   232f1:	02020202 02020202 02020202 10101010     ................
   23301:	00000020 00000000 00000000 00000000      ...............
	...

00023384 <_init>:
   23384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23386:	46c0      	nop			; (mov r8, r8)
   23388:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2338a:	bc08      	pop	{r3}
   2338c:	469e      	mov	lr, r3
   2338e:	4770      	bx	lr

00023390 <__init_array_start>:
   23390:	000120dd 	.word	0x000120dd

00023394 <_fini>:
   23394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23396:	46c0      	nop			; (mov r8, r8)
   23398:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2339a:	bc08      	pop	{r3}
   2339c:	469e      	mov	lr, r3
   2339e:	4770      	bx	lr

000233a0 <__fini_array_start>:
   233a0:	000120b5 	.word	0x000120b5
